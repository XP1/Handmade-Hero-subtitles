1
00:00:02,629 --> 00:00:07,349
okay hello everyone and welcome to hand

2
00:00:06,000 --> 00:00:10,710
made here oh sure we could a complete

3
00:00:07,349 --> 00:00:12,388
game live on stream I we yesterday did a

4
00:00:10,710 --> 00:00:17,278
chat actually so I didn't get to think

5
00:00:12,388 --> 00:00:19,710
that I wanted to get to we do have one

6
00:00:17,278 --> 00:00:21,269
bit of cleanup to do from a previous

7
00:00:19,710 --> 00:00:22,380
stream I might hold that off for a

8
00:00:21,269 --> 00:00:23,669
little bit just so I can start on

9
00:00:22,379 --> 00:00:27,599
something today that I kind of want to

10
00:00:23,670 --> 00:00:31,980
start on and that is I wanted to talk a

11
00:00:27,599 --> 00:00:34,770
little bit about sort of finalizing or

12
00:00:31,980 --> 00:00:37,950
at least putting into its final API form

13
00:00:34,770 --> 00:00:41,070
the arena's memory arena stuff that we

14
00:00:37,950 --> 00:00:45,329
have been using on the stream for all of

15
00:00:41,070 --> 00:00:48,149
handmade hero and what I wanted to do

16
00:00:45,329 --> 00:00:51,090
there was I wanted to sort of show a

17
00:00:48,149 --> 00:00:54,329
little bit more about how the arena's

18
00:00:51,090 --> 00:00:57,059
could be made to be more flexible during

19
00:00:54,329 --> 00:00:59,219
development if we want them to be and I

20
00:00:57,058 --> 00:01:01,608
kind of just wanted to give you a little

21
00:00:59,219 --> 00:01:04,349
bit of an outline on how that would go

22
00:01:01,609 --> 00:01:09,560
so I'm just gonna do that and I'm gonna

23
00:01:04,349 --> 00:01:09,559
talk about that a little bit now oops

24
00:01:19,010 --> 00:01:26,700
so if you remember back when we first

25
00:01:24,269 --> 00:01:28,979
started doing dynamically allocated

26
00:01:26,700 --> 00:01:30,810
memory which is you know what we have

27
00:01:28,980 --> 00:01:33,329
used for most of the things in handmade

28
00:01:30,810 --> 00:01:37,049
hero are going are you know allocated at

29
00:01:33,329 --> 00:01:38,939
runtime what we were doing is we're

30
00:01:37,049 --> 00:01:40,560
essentially saying alright let's go

31
00:01:38,939 --> 00:01:42,299
ahead and take a giant block of memory

32
00:01:40,560 --> 00:01:43,978
right

33
00:01:42,299 --> 00:01:45,840
and so this giant block of memory would

34
00:01:43,978 --> 00:01:47,909
be as much memory as the game was going

35
00:01:45,840 --> 00:01:49,618
to take let's say so you know maybe it's

36
00:01:47,909 --> 00:01:51,060
gonna be 4 gigabytes of memory if this

37
00:01:49,618 --> 00:01:54,090
was like a big triple-a game or

38
00:01:51,060 --> 00:01:55,140
something like that right and we had I

39
00:01:54,090 --> 00:01:56,700
don't know if we have it set that way

40
00:01:55,140 --> 00:01:58,290
right now but at one time we tried we

41
00:01:56,700 --> 00:01:59,728
did set it to 4 gigs or whatever it

42
00:01:58,290 --> 00:02:05,250
might not be set to that anymore but you

43
00:01:59,728 --> 00:02:06,539
get the idea so what we would do is we

44
00:02:05,250 --> 00:02:08,219
would then say like okay we're gonna

45
00:02:06,540 --> 00:02:10,259
partition this up and we'll partition

46
00:02:08,219 --> 00:02:12,270
this up into like one gigabyte OB for

47
00:02:10,258 --> 00:02:15,238
like you know the world or something and

48
00:02:12,270 --> 00:02:18,810
you know 2 gigabytes of that will be

49
00:02:15,239 --> 00:02:20,520
from 4 assets or something and one will

50
00:02:18,810 --> 00:02:22,229
believe to scratch space I don't know I

51
00:02:20,520 --> 00:02:25,320
mean right we'll just partition it up

52
00:02:22,229 --> 00:02:28,530
and then we would sub allocate out of

53
00:02:25,319 --> 00:02:31,319
these when we need things and obviously

54
00:02:28,530 --> 00:02:32,669
there's a nice benefit to doing it this

55
00:02:31,319 --> 00:02:35,819
way it's obviously keeps everything nice

56
00:02:32,669 --> 00:02:37,759
and simple but it does have one obvious

57
00:02:35,819 --> 00:02:40,799
drawback of doing this which is that

58
00:02:37,759 --> 00:02:42,929
while it works fine if we know that we

59
00:02:40,799 --> 00:02:45,150
just want to constrain the game a priori

60
00:02:42,930 --> 00:02:47,239
to 4 gigabytes of memory which we may

61
00:02:45,150 --> 00:02:51,379
want to do in the final shipping version

62
00:02:47,239 --> 00:02:54,060
it does make an obvious sort of

63
00:02:51,379 --> 00:02:56,009
limitation to the game if we wanted to

64
00:02:54,060 --> 00:02:59,519
say just let the game use as much memory

65
00:02:56,009 --> 00:03:01,500
as the game wants to use right and this

66
00:02:59,519 --> 00:03:03,569
may not be super important to something

67
00:03:01,500 --> 00:03:05,579
like handmade hero because I'm handmade

68
00:03:03,569 --> 00:03:07,439
hero it's probably true that we will

69
00:03:05,579 --> 00:03:09,269
have a good idea of what the memory

70
00:03:07,439 --> 00:03:11,639
bounds for the game are when we ship it

71
00:03:09,269 --> 00:03:13,349
so that we could just say here's how

72
00:03:11,639 --> 00:03:16,919
much memory it tends to allocate and

73
00:03:13,349 --> 00:03:19,049
we're done but you could imagine a

74
00:03:16,919 --> 00:03:21,389
situation where you didn't want that to

75
00:03:19,049 --> 00:03:23,219
be true so an example would be let's

76
00:03:21,389 --> 00:03:26,309
suppose that we were to ship a world

77
00:03:23,219 --> 00:03:28,229
editor with handmade hero sometime and

78
00:03:26,310 --> 00:03:31,349
now the user wants to be able to make

79
00:03:28,229 --> 00:03:33,659
levels in these things and because there

80
00:03:31,349 --> 00:03:36,509
or whatever and you know how people are

81
00:03:33,659 --> 00:03:38,579
with a mod games they we don't want to

82
00:03:36,509 --> 00:03:40,229
constrain them to only making worlds

83
00:03:38,580 --> 00:03:42,600
that are a certain size that fit into

84
00:03:40,229 --> 00:03:44,639
our pre-allocated footprint we would

85
00:03:42,599 --> 00:03:47,099
rather let the user make worlds as big

86
00:03:44,639 --> 00:03:48,539
as they want so long as they have enough

87
00:03:47,099 --> 00:03:53,489
RAM for it or something

88
00:03:48,539 --> 00:03:55,169
right and obviously right we can even

89
00:03:53,490 --> 00:03:56,879
come up with approaches to that problem

90
00:03:55,169 --> 00:03:59,159
that are different we could start

91
00:03:56,879 --> 00:04:01,259
allowing you to do things out of core

92
00:03:59,159 --> 00:04:03,750
which we have a pretty easy way of doing

93
00:04:01,259 --> 00:04:06,030
in our system now actually because we do

94
00:04:03,750 --> 00:04:07,620
have that sort of world storage that

95
00:04:06,030 --> 00:04:09,780
packs enemies and then unpacks enemies

96
00:04:07,620 --> 00:04:11,939
and all that sort of stuff so we could

97
00:04:09,780 --> 00:04:13,319
actually switch to out of core and maybe

98
00:04:11,939 --> 00:04:14,849
sometime in hand-made here will actually

99
00:04:13,319 --> 00:04:16,589
do that just to show how you would do

100
00:04:14,849 --> 00:04:18,480
that because it's pretty easy given our

101
00:04:16,589 --> 00:04:21,209
current architecture but that's neither

102
00:04:18,480 --> 00:04:23,040
here though there even in that situation

103
00:04:21,209 --> 00:04:25,409
you may want to give you may want to

104
00:04:23,040 --> 00:04:26,790
empower the users to use as much memory

105
00:04:25,410 --> 00:04:29,400
as they have because hey they paid for

106
00:04:26,790 --> 00:04:30,960
it and if they paid for 64 gigabytes of

107
00:04:29,399 --> 00:04:33,899
memory in their suite gaming rig and

108
00:04:30,959 --> 00:04:37,799
they want to use it you should let them

109
00:04:33,899 --> 00:04:40,049
right I mean you know if we can just say

110
00:04:37,800 --> 00:04:43,350
like hey like dedicate more of that to

111
00:04:40,050 --> 00:04:47,069
the game then great right and so there

112
00:04:43,350 --> 00:04:49,530
is a certain amount of value here to

113
00:04:47,069 --> 00:04:53,579
being able to say maybe we can let

114
00:04:49,529 --> 00:04:58,169
arenas grow to whatever size the user

115
00:04:53,579 --> 00:05:02,219
wants them to grow to and just let them

116
00:04:58,170 --> 00:05:04,199
kind of roll the dice right if they want

117
00:05:02,220 --> 00:05:05,430
to max out their system and crash the

118
00:05:04,199 --> 00:05:06,810
game because they allocate too much

119
00:05:05,430 --> 00:05:09,540
memory that the system can't handle or

120
00:05:06,810 --> 00:05:11,160
something oh well and we could even be

121
00:05:09,540 --> 00:05:13,230
sensible about our allocations if we

122
00:05:11,160 --> 00:05:16,230
want to and you know try to do things

123
00:05:13,230 --> 00:05:18,330
that will make sure that we can issue an

124
00:05:16,230 --> 00:05:19,650
error message in that case cleanly so

125
00:05:18,329 --> 00:05:20,669
the game doesn't crash it just says hey

126
00:05:19,649 --> 00:05:22,229
you're trying to make a world that's

127
00:05:20,670 --> 00:05:23,970
bigger than what can you could fit in

128
00:05:22,230 --> 00:05:25,290
your machine or something so you know we

129
00:05:23,970 --> 00:05:29,400
have a lot of options there but point

130
00:05:25,290 --> 00:05:31,890
being it would be nice to be able to do

131
00:05:29,399 --> 00:05:34,799
that similarly another thing that would

132
00:05:31,889 --> 00:05:37,050
be nice is during development we don't

133
00:05:34,800 --> 00:05:38,430
really know a whole lot about our memory

134
00:05:37,050 --> 00:05:40,228
profile during development because we're

135
00:05:38,430 --> 00:05:42,120
making decisions here and there we're

136
00:05:40,228 --> 00:05:44,039
changing the way things work we have

137
00:05:42,120 --> 00:05:45,060
things like the debug arena that's not

138
00:05:44,040 --> 00:05:47,160
even part of the shipping

139
00:05:45,060 --> 00:05:48,839
so why we would ever care about Priya

140
00:05:47,160 --> 00:05:50,639
allocating that it doesn't make any

141
00:05:48,839 --> 00:05:52,589
sense we used us to even really think

142
00:05:50,639 --> 00:05:54,329
about how big that should be because

143
00:05:52,589 --> 00:05:55,979
it's purely a debug thing we just want

144
00:05:54,329 --> 00:05:58,289
to expand to hold as much debug

145
00:05:55,980 --> 00:06:00,169
collation data as we need it to we don't

146
00:05:58,290 --> 00:06:04,410
want to have to pre partition it right

147
00:06:00,168 --> 00:06:07,889
and so again even if even if we assumed

148
00:06:04,410 --> 00:06:10,560
that we were going to ship the game with

149
00:06:07,889 --> 00:06:12,949
a fixed allocation block and not allow

150
00:06:10,560 --> 00:06:15,930
any of its arenas to grow at dynamically

151
00:06:12,949 --> 00:06:17,370
that doesn't even that doesn't mean that

152
00:06:15,930 --> 00:06:18,540
we don't still want that expanding reach

153
00:06:17,370 --> 00:06:21,569
bar because it can simplify our

154
00:06:18,540 --> 00:06:24,270
development process by a allowing our

155
00:06:21,569 --> 00:06:26,459
arenas which do not have to be shipped

156
00:06:24,269 --> 00:06:30,990
at runtime to grow dynamically like in

157
00:06:26,459 --> 00:06:33,269
the debug case and even the arena's that

158
00:06:30,990 --> 00:06:34,829
we do want to make sure our fixed

159
00:06:33,269 --> 00:06:36,990
allocation sizes because that's maybe

160
00:06:34,829 --> 00:06:40,918
something we want to guarantee about our

161
00:06:36,990 --> 00:06:43,710
runtime even those also don't have to be

162
00:06:40,918 --> 00:06:46,259
set to be fixed sizes during development

163
00:06:43,709 --> 00:06:47,849
so that way during development we don't

164
00:06:46,259 --> 00:06:49,259
have to think about it but then as we

165
00:06:47,850 --> 00:06:50,820
get towards data development then we can

166
00:06:49,259 --> 00:06:53,189
start to look at how much memory are we

167
00:06:50,819 --> 00:06:59,550
using and then convert to fixed at that

168
00:06:53,189 --> 00:07:02,399
point right so expanding arenas useful

169
00:06:59,550 --> 00:07:03,960
thing and they kind of extend the arena

170
00:07:02,399 --> 00:07:05,429
concept very naturally in a way that

171
00:07:03,959 --> 00:07:09,989
allows you to make them grow to take up

172
00:07:05,430 --> 00:07:11,370
as much space as they need so let's talk

173
00:07:09,990 --> 00:07:13,019
about what's happening right now with

174
00:07:11,370 --> 00:07:16,769
our arenas and how we might implement

175
00:07:13,019 --> 00:07:18,359
this it's actually very very simple so

176
00:07:16,769 --> 00:07:19,709
if you look at how our arena's work

177
00:07:18,360 --> 00:07:23,310
right now there's a certain amount of

178
00:07:19,709 --> 00:07:27,209
memory there's a base pointer right and

179
00:07:23,310 --> 00:07:28,800
a size and then you can imagine at the

180
00:07:27,209 --> 00:07:30,418
end there's essentially sort of an

181
00:07:28,800 --> 00:07:32,579
ending pointer right it's like that's

182
00:07:30,418 --> 00:07:33,899
the end of this arena and so what

183
00:07:32,579 --> 00:07:36,538
happens when we allocate right you

184
00:07:33,899 --> 00:07:38,849
remember we've got this pointer at the

185
00:07:36,538 --> 00:07:40,769
base we initialize a pointer that's

186
00:07:38,850 --> 00:07:43,020
pointing there which is where we're at

187
00:07:40,769 --> 00:07:46,889
and every time you ask for an allocation

188
00:07:43,019 --> 00:07:48,538
we just move that pointer down right so

189
00:07:46,889 --> 00:07:50,819
we essentially say okay if we're going

190
00:07:48,538 --> 00:07:53,728
to write something in that's you know 64

191
00:07:50,819 --> 00:07:54,598
bytes we write in that 64 bytes or we

192
00:07:53,728 --> 00:07:55,829
don't really write it in we just

193
00:07:54,598 --> 00:07:58,139
returned the pointer that we're

194
00:07:55,829 --> 00:07:58,889
currently at and then we move 64 bytes

195
00:07:58,139 --> 00:08:00,360
down

196
00:07:58,889 --> 00:08:02,400
the next thing just gets stacked on top

197
00:08:00,360 --> 00:08:03,569
of it right and then we do a little bit

198
00:08:02,399 --> 00:08:06,478
of work there where we try to do

199
00:08:03,569 --> 00:08:08,789
alignment as well so we allow you when

200
00:08:06,478 --> 00:08:10,918
you allocate we may push the allocation

201
00:08:08,788 --> 00:08:16,079
around a little bit but otherwise it's

202
00:08:10,918 --> 00:08:19,079
exactly it's all analogous right so if

203
00:08:16,079 --> 00:08:21,089
we wanted to what we could do is say

204
00:08:19,079 --> 00:08:23,218
well we already have an assertion in

205
00:08:21,089 --> 00:08:24,959
there if you go look at the code where

206
00:08:23,218 --> 00:08:27,089
if the app pointer is all the way down

207
00:08:24,959 --> 00:08:29,128
here and you tell us to allocate

208
00:08:27,089 --> 00:08:31,019
something that's too large so the new

209
00:08:29,129 --> 00:08:33,060
app pointer would overflow the bounds of

210
00:08:31,019 --> 00:08:34,620
the arena we already have an assert in

211
00:08:33,059 --> 00:08:37,528
there to tell us we blew our memory

212
00:08:34,620 --> 00:08:41,129
budget right so what we could do instead

213
00:08:37,528 --> 00:08:43,288
of that assertion if we wanted to is we

214
00:08:41,129 --> 00:08:44,970
could just say oh well when we throw it

215
00:08:43,288 --> 00:08:47,338
when we would have thrown that assertion

216
00:08:44,970 --> 00:08:49,199
up and said hey halt the program tell

217
00:08:47,339 --> 00:08:51,240
the programmer you messed up what we

218
00:08:49,198 --> 00:08:53,338
could do instead is go ahead and

219
00:08:51,240 --> 00:08:55,079
allocate a new block and just put the

220
00:08:53,339 --> 00:08:58,589
app pointer there and then keep going

221
00:08:55,078 --> 00:08:59,939
right and just do that as many times as

222
00:08:58,589 --> 00:09:04,079
we want to right we could keep

223
00:08:59,940 --> 00:09:07,019
allocating new space for Arena as we go

224
00:09:04,078 --> 00:09:09,899
and so we can just fill it all the way

225
00:09:07,019 --> 00:09:12,899
up you know up until we run out of

226
00:09:09,899 --> 00:09:13,980
memory in the machine to allocate it can

227
00:09:12,899 --> 00:09:16,799
just keep growing and growing and

228
00:09:13,980 --> 00:09:19,980
growing right and mind you since this is

229
00:09:16,799 --> 00:09:21,569
allocating pieces at a time those pieces

230
00:09:19,980 --> 00:09:23,430
are still guaranteed to be contiguous

231
00:09:21,570 --> 00:09:25,290
because if I couldn't have fit the piece

232
00:09:23,429 --> 00:09:27,179
I put the whole piece on the next one

233
00:09:25,289 --> 00:09:29,849
what that means is we don't have to

234
00:09:27,179 --> 00:09:33,479
worry about copying things from this

235
00:09:29,850 --> 00:09:40,278
arena when it expands you know a similar

236
00:09:33,480 --> 00:09:42,209
technique like the dynamic array right

237
00:09:40,278 --> 00:09:43,649
dynamic arrays are the kind of things

238
00:09:42,208 --> 00:09:46,289
where you know okay I've got you know a

239
00:09:43,649 --> 00:09:48,778
few elements here you know 0 1 2 3 4 or

240
00:09:46,289 --> 00:09:50,849
5 whatever and then I want to insert a

241
00:09:48,778 --> 00:09:52,169
sixth element but I can't because I

242
00:09:50,850 --> 00:09:54,360
don't have enough room to insert the

243
00:09:52,169 --> 00:09:55,948
sixth element there were only well I

244
00:09:54,360 --> 00:09:57,659
should say the 7th element there's six

245
00:09:55,948 --> 00:09:59,009
elements here I have six elements in

246
00:09:57,659 --> 00:10:01,259
here I want to insert the seventh I

247
00:09:59,009 --> 00:10:02,519
can't do it because there's always six

248
00:10:01,259 --> 00:10:03,990
elements in the array there's no space

249
00:10:02,519 --> 00:10:07,769
so then what they do is they say well

250
00:10:03,990 --> 00:10:10,259
okay it's fine just you know reallocate

251
00:10:07,769 --> 00:10:11,909
a buffer and if you can reallocate in

252
00:10:10,259 --> 00:10:12,840
place great if you can't reallocate in

253
00:10:11,909 --> 00:10:16,500
place just

254
00:10:12,840 --> 00:10:19,440
get down the old values and then you'll

255
00:10:16,500 --> 00:10:21,990
have room and so that copy has to happen

256
00:10:19,440 --> 00:10:23,340
anytime you couldn't have like gone back

257
00:10:21,990 --> 00:10:24,690
and asked the memory allocator if there

258
00:10:23,340 --> 00:10:26,009
was if there was space here that the

259
00:10:24,690 --> 00:10:27,720
memory allocator hadn't used that

260
00:10:26,009 --> 00:10:29,610
happened to be adjacent it can just you

261
00:10:27,720 --> 00:10:31,350
know pump it out but otherwise you know

262
00:10:29,610 --> 00:10:32,730
you got to do that copy this doesn't

263
00:10:31,350 --> 00:10:34,830
have to the copy because no one is

264
00:10:32,730 --> 00:10:36,360
addressing into this thing right if

265
00:10:34,830 --> 00:10:38,070
they're addressing into something

266
00:10:36,360 --> 00:10:39,930
they're adding into a sub portion of it

267
00:10:38,070 --> 00:10:41,940
that was allocated with a single call

268
00:10:39,929 --> 00:10:43,500
and we know that that will still be

269
00:10:41,940 --> 00:10:45,410
contiguous because we're never breaking

270
00:10:43,500 --> 00:10:58,230
up those allocations across boundaries

271
00:10:45,409 --> 00:11:02,399
right so if we would like again it's

272
00:10:58,230 --> 00:11:05,029
very easy for us to go ahead and make

273
00:11:02,399 --> 00:11:08,340
our arena's support this natural

274
00:11:05,029 --> 00:11:09,959
expansion process and so I thought even

275
00:11:08,340 --> 00:11:12,690
though I don't really know that we need

276
00:11:09,960 --> 00:11:16,110
it too terribly badly I felt like since

277
00:11:12,690 --> 00:11:17,070
people kind of didn't have a when I talk

278
00:11:16,110 --> 00:11:18,300
about the arenas people are like oh

279
00:11:17,070 --> 00:11:19,680
that's reliefs because a lot of people

280
00:11:18,299 --> 00:11:21,479
are just only taught dynamic allocation

281
00:11:19,679 --> 00:11:23,579
they're not necessarily taught some of

282
00:11:21,480 --> 00:11:26,180
these other nice techniques arena

283
00:11:23,580 --> 00:11:28,530
allocation is a very common technique in

284
00:11:26,179 --> 00:11:30,179
production programming it's just it's

285
00:11:28,529 --> 00:11:32,309
kind of one of those things that isn't

286
00:11:30,179 --> 00:11:34,139
taught as often anymore again because of

287
00:11:32,309 --> 00:11:35,759
this kind of like weird move to like not

288
00:11:34,139 --> 00:11:38,399
knowing what memory is doing and stuff

289
00:11:35,759 --> 00:11:40,019
like that right but old-school

290
00:11:38,399 --> 00:11:42,389
programing arena is very very common

291
00:11:40,019 --> 00:11:44,009
very very straightforward thing and so

292
00:11:42,389 --> 00:11:46,769
since a lot of people hadn't really seen

293
00:11:44,009 --> 00:11:48,539
those and I think should absolutely see

294
00:11:46,769 --> 00:11:50,819
them I just wanted to take a day or two

295
00:11:48,539 --> 00:11:53,129
and show you how to make the expandable

296
00:11:50,820 --> 00:11:54,840
kind because it's very very simple and

297
00:11:53,129 --> 00:11:56,850
then you can use it in all sorts of

298
00:11:54,840 --> 00:11:59,250
other areas where you might want to use

299
00:11:56,850 --> 00:12:01,920
arenas but maybe we're afraid to because

300
00:11:59,250 --> 00:12:03,960
you didn't want to have to pre guess how

301
00:12:01,919 --> 00:12:05,490
much memory you were going to take for

302
00:12:03,960 --> 00:12:11,400
example in an application or something

303
00:12:05,490 --> 00:12:12,690
like this right so what I would say here

304
00:12:11,399 --> 00:12:14,850
is the first thing we're going to need

305
00:12:12,690 --> 00:12:16,620
and I think we already kind of started

306
00:12:14,850 --> 00:12:18,330
this a little bit we just never really

307
00:12:16,620 --> 00:12:20,429
Danny thing with it is we're gonna need

308
00:12:18,330 --> 00:12:22,770
a way to get more memory when we need it

309
00:12:20,429 --> 00:12:24,989
and so we have our platform API is in

310
00:12:22,769 --> 00:12:26,519
here right

311
00:12:24,990 --> 00:12:28,769
where is that guy

312
00:12:26,519 --> 00:12:30,569
here it is we have our platform api's

313
00:12:28,769 --> 00:12:33,029
and we need to be able to allocate and

314
00:12:30,570 --> 00:12:34,800
deallocate memory so you can see those

315
00:12:33,029 --> 00:12:37,819
calls are here I don't know if we

316
00:12:34,799 --> 00:12:42,029
actually ever used them I can't remember

317
00:12:37,820 --> 00:12:45,120
yeah we don't even use those calls but

318
00:12:42,029 --> 00:12:47,730
we did throw them in there so I think we

319
00:12:45,120 --> 00:12:49,830
already have set ourselves up to do what

320
00:12:47,730 --> 00:12:54,120
we need to do which is be able to get

321
00:12:49,830 --> 00:12:56,340
more memory when the time comes right so

322
00:12:54,120 --> 00:12:58,950
this should be very easy for us to do

323
00:12:56,340 --> 00:13:02,280
now it'll probably only take me a little

324
00:12:58,950 --> 00:13:05,370
bit to add the expandable to the

325
00:13:02,279 --> 00:13:08,600
expandable concept to our arenas but we

326
00:13:05,370 --> 00:13:11,580
do we will still have another problem I

327
00:13:08,600 --> 00:13:14,300
suspect that is going to be a little bit

328
00:13:11,580 --> 00:13:16,889
trickier to solve on the platform side

329
00:13:14,299 --> 00:13:19,169
and that is just the loop live code

330
00:13:16,889 --> 00:13:20,610
editing once we allow our arena so

331
00:13:19,169 --> 00:13:22,490
dynamically allocate we have a little

332
00:13:20,610 --> 00:13:25,980
more work that we're going to have to do

333
00:13:22,490 --> 00:13:28,799
in on the loop live co-editing side of

334
00:13:25,980 --> 00:13:30,960
things but we will also get a really big

335
00:13:28,799 --> 00:13:32,159
dividend when we do that I don't want to

336
00:13:30,960 --> 00:13:35,790
spoil what it is yet

337
00:13:32,159 --> 00:13:38,519
those of you with sharp handmade brainy

338
00:13:35,789 --> 00:13:40,980
brains probably already know what it is

339
00:13:38,519 --> 00:13:43,620
that we're going to get but for those of

340
00:13:40,980 --> 00:13:47,610
you still in suspense let's go ahead and

341
00:13:43,620 --> 00:13:49,740
get started here so we can get to the

342
00:13:47,610 --> 00:13:51,149
payoff that'll probably tomorrow though

343
00:13:49,740 --> 00:13:52,289
because I spent some time talking about

344
00:13:51,149 --> 00:13:55,289
so I don't know if we'll get it all in

345
00:13:52,289 --> 00:13:58,199
today so here is our memory arena and

346
00:13:55,289 --> 00:14:01,379
you can see here we've got a size a base

347
00:13:58,200 --> 00:14:05,550
and a used and so it's just kind of

348
00:14:01,379 --> 00:14:06,750
going up there I don't know I don't

349
00:14:05,549 --> 00:14:07,949
necessarily know that that's the most

350
00:14:06,750 --> 00:14:09,149
efficient way to store it as opposed to

351
00:14:07,950 --> 00:14:10,950
doing a point or whatever but you know

352
00:14:09,149 --> 00:14:12,360
this is basically the same thing right

353
00:14:10,950 --> 00:14:14,759
we're just saying here's how big it is

354
00:14:12,360 --> 00:14:16,769
total here's our amount used so anytime

355
00:14:14,759 --> 00:14:19,080
we know where that at pointer is like

356
00:14:16,769 --> 00:14:22,590
right this app pointer here we know is

357
00:14:19,080 --> 00:14:26,190
this far up from base and this is the

358
00:14:22,590 --> 00:14:31,769
maximum we can go right so if we come in

359
00:14:26,190 --> 00:14:36,270
here and we say well we want to push

360
00:14:31,769 --> 00:14:37,919
some memory on here and this is

361
00:14:36,269 --> 00:14:39,960
interested yeah we want to push the

362
00:14:37,919 --> 00:14:42,419
memory in here and as far as I could

363
00:14:39,960 --> 00:14:43,710
to call all of our allocation then goes

364
00:14:42,419 --> 00:14:44,879
through this push size call so if we

365
00:14:43,710 --> 00:14:47,160
just modify this one we should be good

366
00:14:44,879 --> 00:14:48,750
to go what it does is it says alright

367
00:14:47,159 --> 00:14:50,339
you know figure out how much we actually

368
00:14:48,750 --> 00:14:53,039
need to push on there based on the

369
00:14:50,340 --> 00:14:57,710
alignment you can see it happening here

370
00:14:53,039 --> 00:15:01,589
and then you can see the the assertion

371
00:14:57,710 --> 00:15:02,580
which is going to say oh wait that's not

372
00:15:01,590 --> 00:15:04,860
the assertion I'm looking for though

373
00:15:02,580 --> 00:15:07,050
this is the assertion the assertion

374
00:15:04,860 --> 00:15:09,899
which is going to say hey if where we're

375
00:15:07,049 --> 00:15:13,109
at plus how much we need to allocate is

376
00:15:09,899 --> 00:15:14,490
going to blow out the size then we're

377
00:15:13,110 --> 00:15:20,960
just gonna stop we're gonna halt right

378
00:15:14,490 --> 00:15:23,129
there oops as I pull the as I pull the

379
00:15:20,960 --> 00:15:25,139
the thing out of the slot I should

380
00:15:23,129 --> 00:15:27,240
probably check to make sure that I

381
00:15:25,139 --> 00:15:31,110
haven't disconnected the audio okay

382
00:15:27,240 --> 00:15:32,909
yeah I'm still going that's good so yes

383
00:15:31,110 --> 00:15:35,250
so really this is the if that we're

384
00:15:32,909 --> 00:15:39,809
talking about here this is the if that

385
00:15:35,250 --> 00:15:41,279
we actually need this is the the

386
00:15:39,809 --> 00:15:43,919
condition that we actually need to

387
00:15:41,279 --> 00:15:46,259
satisfy so what we could do here is we

388
00:15:43,919 --> 00:15:48,569
could say well alright what we want to

389
00:15:46,259 --> 00:15:51,720
do is say if instead of making an

390
00:15:48,570 --> 00:15:55,980
assertion if we were going to exceed the

391
00:15:51,720 --> 00:15:58,820
size right what if we could just do

392
00:15:55,980 --> 00:16:02,250
something here that would allow us to

393
00:15:58,820 --> 00:16:05,940
expand the arena and not have this

394
00:16:02,250 --> 00:16:07,049
problem where we're going to where you

395
00:16:05,940 --> 00:16:14,970
know where we're going to run out of

396
00:16:07,049 --> 00:16:16,289
size right so hopefully you can kind of

397
00:16:14,970 --> 00:16:17,820
see where we're going with this it looks

398
00:16:16,289 --> 00:16:19,919
like handmade memory has nothing in it

399
00:16:17,820 --> 00:16:24,510
apparently all right everything's in the

400
00:16:19,919 --> 00:16:26,579
H file so the memory arena here right it

401
00:16:24,509 --> 00:16:29,039
has this face pointer what we need to do

402
00:16:26,580 --> 00:16:30,750
is if we're going to blow the size what

403
00:16:29,039 --> 00:16:32,490
we need to do is basically allocate

404
00:16:30,750 --> 00:16:34,379
another chunk of memory to replace the

405
00:16:32,490 --> 00:16:37,169
base pointer with a new base pointer

406
00:16:34,379 --> 00:16:40,309
that we can use now the problem here is

407
00:16:37,169 --> 00:16:43,979
we don't actually know how much memory

408
00:16:40,309 --> 00:16:45,779
we should allocate because we could just

409
00:16:43,980 --> 00:16:47,789
allocate however much we just need right

410
00:16:45,779 --> 00:16:49,620
now but that's not very efficient

411
00:16:47,789 --> 00:16:50,699
because then the very next time someone

412
00:16:49,620 --> 00:16:53,580
calls us to allocate something we're

413
00:16:50,700 --> 00:16:55,620
gonna have to do it again right meaning

414
00:16:53,580 --> 00:16:58,950
if this person is asking us to allocate

415
00:16:55,620 --> 00:17:01,110
you know 64 bytes of memory and we find

416
00:16:58,950 --> 00:17:03,410
that we're at the end so 64 bytes won't

417
00:17:01,110 --> 00:17:06,750
fit we certainly don't want to allocate

418
00:17:03,409 --> 00:17:08,250
just a 64 byte chunk from the operating

419
00:17:06,750 --> 00:17:10,318
system to stuff this thing into that be

420
00:17:08,250 --> 00:17:11,338
horribly inefficient and and we would

421
00:17:10,318 --> 00:17:14,068
have to do the same thing again next

422
00:17:11,338 --> 00:17:15,928
call so we want to do instead is think

423
00:17:14,068 --> 00:17:18,420
okay if it's a really large allocation

424
00:17:15,929 --> 00:17:22,170
right if the person asks for 16

425
00:17:18,420 --> 00:17:24,029
megabytes of data here then it may be

426
00:17:22,170 --> 00:17:26,279
make sense to allocate the 16 megabytes

427
00:17:24,029 --> 00:17:27,869
and give it back to them no questions

428
00:17:26,279 --> 00:17:30,329
asked right but if they're only

429
00:17:27,869 --> 00:17:33,329
allocating a small size 4k or something

430
00:17:30,329 --> 00:17:35,970
like this then we probably want to have

431
00:17:33,329 --> 00:17:37,980
some minimum allocation size that we

432
00:17:35,970 --> 00:17:39,600
always allocate because we know we're

433
00:17:37,980 --> 00:17:41,880
gonna get more allocation calls the

434
00:17:39,599 --> 00:17:43,379
future we want to minimize the amount of

435
00:17:41,880 --> 00:17:44,910
times we have to go through the opera

436
00:17:43,380 --> 00:17:46,470
system right because if we start going

437
00:17:44,910 --> 00:17:49,170
to the operating system too often we

438
00:17:46,470 --> 00:17:51,089
lose most of the benefits of the arena

439
00:17:49,170 --> 00:17:52,440
in terms of efficiency we don't lose the

440
00:17:51,089 --> 00:17:54,029
benefits in terms of cleanup because

441
00:17:52,440 --> 00:17:56,308
cleanup is still nice and easier much

442
00:17:54,029 --> 00:17:59,129
easier than it is with sort of spaghetti

443
00:17:56,308 --> 00:18:00,779
string smart pointer nonsense right but

444
00:17:59,130 --> 00:18:02,610
we don't get the efficiency anymore

445
00:18:00,779 --> 00:18:05,279
we're back to being inefficient like a

446
00:18:02,609 --> 00:18:09,178
regular alligator is once we give that

447
00:18:05,279 --> 00:18:11,549
up right so we'd rather do here is have

448
00:18:09,179 --> 00:18:12,690
some minimum size so we want to do is

449
00:18:11,549 --> 00:18:14,789
say okay we've got a memory since this

450
00:18:12,690 --> 00:18:16,890
is going to be our block size right like

451
00:18:14,789 --> 00:18:19,799
how much we're going to allocate we know

452
00:18:16,890 --> 00:18:21,600
that we want it to be at least as big as

453
00:18:19,799 --> 00:18:25,558
the size that we're trying to allocate

454
00:18:21,599 --> 00:18:28,099
but we also want to know more

455
00:18:25,558 --> 00:18:28,099
specifically

456
00:18:31,849 --> 00:18:40,879
that we're going to allocate at least as

457
00:18:35,009 --> 00:18:44,549
much as our minimum block size like so

458
00:18:40,880 --> 00:18:48,510
right another way to write this I don't

459
00:18:44,549 --> 00:18:50,519
know if we have a min/max macro I think

460
00:18:48,509 --> 00:18:54,349
I think we did and I think we make them

461
00:18:50,519 --> 00:19:01,529
in it as a macro I don't really remember

462
00:18:54,349 --> 00:19:02,909
find out yes good good

463
00:19:01,529 --> 00:19:05,460
so another way to write this would just

464
00:19:02,910 --> 00:19:08,308
be to say I want it to be whatever the

465
00:19:05,460 --> 00:19:11,400
larger of the two of these is right I

466
00:19:08,308 --> 00:19:13,740
want if you know if the the size

467
00:19:11,400 --> 00:19:17,460
requested is bigger than will use that

468
00:19:13,740 --> 00:19:22,679
if the minimum block size is bigger then

469
00:19:17,460 --> 00:19:24,900
we will use that right so at that point

470
00:19:22,679 --> 00:19:28,380
we know what we want to do we want to

471
00:19:24,900 --> 00:19:30,809
now allocate you know depth that memory

472
00:19:28,380 --> 00:19:32,429
from from the system so we want to go

473
00:19:30,808 --> 00:19:34,799
back to our platform code here and we

474
00:19:32,429 --> 00:19:37,790
want to use the allocate memory call

475
00:19:34,799 --> 00:19:39,839
right so you want to say allocate memory

476
00:19:37,789 --> 00:19:42,029
and now we need to get this from

477
00:19:39,839 --> 00:19:44,669
somewhere and of course in hand-made I

478
00:19:42,029 --> 00:19:47,339
believe we have that it's this platform

479
00:19:44,670 --> 00:19:49,350
API I think here right so we can say hey

480
00:19:47,339 --> 00:19:50,819
platform allocate memory the memory

481
00:19:49,349 --> 00:19:53,129
we're going to allocate is whatever the

482
00:19:50,819 --> 00:19:54,269
block size is and I don't know that we

483
00:19:53,130 --> 00:19:55,620
pass anything else oops

484
00:19:54,269 --> 00:19:57,720
I don't know that we pass anything else

485
00:19:55,619 --> 00:19:59,189
in there I think platform allocate

486
00:19:57,720 --> 00:20:03,049
memory project size yeah it does and

487
00:19:59,190 --> 00:20:03,049
that's gonna give us back a void star

488
00:20:04,220 --> 00:20:12,089
right so that new void star would just

489
00:20:08,910 --> 00:20:13,529
be our base pointer now right so if you

490
00:20:12,089 --> 00:20:17,279
take a look back at the memory Arena

491
00:20:13,529 --> 00:20:18,839
here we now have you know if we were

492
00:20:17,279 --> 00:20:20,428
going to overwrite this memory Arenas

493
00:20:18,839 --> 00:20:22,799
data we would have something like this

494
00:20:20,429 --> 00:20:25,830
we'd say okay there's an arena science

495
00:20:22,799 --> 00:20:31,399
pointer and we know that that's going to

496
00:20:25,829 --> 00:20:34,558
be our block size I'm not pointer value

497
00:20:31,400 --> 00:20:36,870
we have a base pointer the base pointer

498
00:20:34,558 --> 00:20:38,549
is going to be the allocation we have

499
00:20:36,869 --> 00:20:40,469
used which is how much we used and

500
00:20:38,549 --> 00:20:42,299
that's going to be 0 and then we have

501
00:20:40,470 --> 00:20:44,519
temp count and temp count would remain

502
00:20:42,299 --> 00:20:45,750
the same because if we're inside a

503
00:20:44,519 --> 00:20:48,029
temporary memory block

504
00:20:45,750 --> 00:20:49,558
we're not going to you know no longer be

505
00:20:48,029 --> 00:20:52,019
in one just because we moved to a new

506
00:20:49,558 --> 00:20:57,808
block we're still inside a temporary

507
00:20:52,019 --> 00:20:59,730
memory situation right so now once we're

508
00:20:57,808 --> 00:21:02,819
done with that we should get to the

509
00:20:59,730 --> 00:21:05,130
point where we can assert right that we

510
00:21:02,819 --> 00:21:07,710
have the space that we need we should be

511
00:21:05,130 --> 00:21:11,160
able to say that this at this point

512
00:21:07,710 --> 00:21:14,370
should always be smaller than the arena

513
00:21:11,160 --> 00:21:18,509
size right so there you go

514
00:21:14,369 --> 00:21:20,279
and hopefully what you can see here is

515
00:21:18,509 --> 00:21:21,450
we're not quite done yet we have some

516
00:21:20,279 --> 00:21:23,220
more stuff to do

517
00:21:21,450 --> 00:21:25,980
but you can kind of see all right so

518
00:21:23,220 --> 00:21:28,048
what we do is we say every time we're

519
00:21:25,980 --> 00:21:30,450
going to overflow we just allocate a new

520
00:21:28,048 --> 00:21:31,410
block and we just pretend that we were

521
00:21:30,450 --> 00:21:34,500
back at the beginning

522
00:21:31,410 --> 00:21:38,490
and so the allocations can just proceed

523
00:21:34,500 --> 00:21:41,609
as normal now get effective size four is

524
00:21:38,490 --> 00:21:43,200
a problem for us in this regard it's not

525
00:21:41,609 --> 00:21:45,599
a problem for us practically speaking

526
00:21:43,200 --> 00:21:47,970
but it is sort of a problem if we wanted

527
00:21:45,599 --> 00:21:50,369
to really be sort of judicious about our

528
00:21:47,970 --> 00:21:52,679
code here because if you look at what's

529
00:21:50,369 --> 00:21:54,689
going on when we say get effective size

530
00:21:52,679 --> 00:21:56,519
for to figure out how big of a thing

531
00:21:54,690 --> 00:21:58,980
we're actually have to allocate what

532
00:21:56,519 --> 00:22:01,889
you'll see when you come up to the this

533
00:21:58,980 --> 00:22:04,019
call is that this is gonna be based on

534
00:22:01,890 --> 00:22:07,860
the alignment offset and when we ask for

535
00:22:04,019 --> 00:22:11,460
the alignment offset you can see that it

536
00:22:07,859 --> 00:22:15,119
matters what the used value was so it

537
00:22:11,460 --> 00:22:18,829
matters essentially it matters where you

538
00:22:15,119 --> 00:22:21,089
were in the arena as to what the

539
00:22:18,829 --> 00:22:22,349
alignment requite criteria how much

540
00:22:21,089 --> 00:22:24,119
we're gonna have to move to fulfill the

541
00:22:22,349 --> 00:22:26,519
alignment criteria right because if

542
00:22:24,119 --> 00:22:28,798
we're on the third byte of the arena

543
00:22:26,519 --> 00:22:30,660
then obviously if you want four byte

544
00:22:28,798 --> 00:22:32,220
alignment we're gonna have to move one

545
00:22:30,660 --> 00:22:34,500
byte forward before we do the allocation

546
00:22:32,220 --> 00:22:37,529
meaning the effective size is the size

547
00:22:34,500 --> 00:22:39,720
plus one if we're right on the zero byte

548
00:22:37,529 --> 00:22:41,009
then it's just going to be the size

549
00:22:39,720 --> 00:22:43,319
because we don't need to move anywhere

550
00:22:41,009 --> 00:22:44,759
to ensure our alignment and so get

551
00:22:43,319 --> 00:22:46,829
effective size four is actually going to

552
00:22:44,759 --> 00:22:49,529
return a size that is not actually the

553
00:22:46,829 --> 00:22:53,339
size we will need in the new allocation

554
00:22:49,529 --> 00:22:55,889
right the new allocation we could assume

555
00:22:53,339 --> 00:22:57,928
is always aligned the reason we could

556
00:22:55,890 --> 00:22:59,290
assume that it's always aligned is

557
00:22:57,929 --> 00:23:02,290
because if we're going

558
00:22:59,289 --> 00:23:04,149
to be allocating from the operating

559
00:23:02,289 --> 00:23:06,039
system we can assume that the operating

560
00:23:04,150 --> 00:23:09,040
systems block allocations that come back

561
00:23:06,039 --> 00:23:12,519
should always be aligned to the maximum

562
00:23:09,039 --> 00:23:14,079
alignment right but even if we didn't

563
00:23:12,519 --> 00:23:15,970
want to do that we could pass the

564
00:23:14,079 --> 00:23:18,099
alignment here to the operating system

565
00:23:15,970 --> 00:23:20,049
to let it know we want align memory but

566
00:23:18,099 --> 00:23:25,990
again operating system memory is always

567
00:23:20,049 --> 00:23:28,450
going to be aligned in Windows to 64 K

568
00:23:25,990 --> 00:23:30,279
boundaries so at that point you know

569
00:23:28,450 --> 00:23:32,559
there's no reason we're ever gonna do

570
00:23:30,279 --> 00:23:36,399
that so if we wanted to we could

571
00:23:32,559 --> 00:23:39,269
actually change this to being instead of

572
00:23:36,400 --> 00:23:41,769
size it could be size in it right

573
00:23:39,269 --> 00:23:44,349
because at that point we kind of know

574
00:23:41,769 --> 00:23:46,599
that we don't have that problem anymore

575
00:23:44,349 --> 00:23:49,149
so really what we would want to say is

576
00:23:46,599 --> 00:23:52,990
sighs you know equals size in it here

577
00:23:49,150 --> 00:23:59,110
and say you know note kc the base will

578
00:23:52,990 --> 00:24:00,819
automatically be aligned now and and so

579
00:23:59,109 --> 00:24:02,229
on now what's interesting is it looks

580
00:24:00,819 --> 00:24:03,759
like we didn't assert our alignment

581
00:24:02,230 --> 00:24:06,279
after we do the alignment which is a

582
00:24:03,759 --> 00:24:07,720
little weird but either way whatever I

583
00:24:06,279 --> 00:24:09,309
should probably add one of those in here

584
00:24:07,720 --> 00:24:11,620
meaning and there should be a thing

585
00:24:09,309 --> 00:24:14,349
which says hey Garen you know try to

586
00:24:11,619 --> 00:24:18,929
actually ascertain that when I did the

587
00:24:14,349 --> 00:24:22,990
alignment it was actually aligned right

588
00:24:18,930 --> 00:24:24,670
yeah but anyway so that's pretty much

589
00:24:22,990 --> 00:24:26,680
what we're looking at now you can see

590
00:24:24,670 --> 00:24:28,450
that we have a problem here which is

591
00:24:26,680 --> 00:24:29,980
that this minimum block size we don't

592
00:24:28,450 --> 00:24:31,900
have we don't know what the minimum

593
00:24:29,980 --> 00:24:33,519
block size is but fortunately that's not

594
00:24:31,900 --> 00:24:35,710
a particularly onerous problem for us

595
00:24:33,519 --> 00:24:38,230
because chances are we can put that on

596
00:24:35,710 --> 00:24:40,360
the arena itself meaning when the person

597
00:24:38,230 --> 00:24:42,400
created this arena probably they had an

598
00:24:40,359 --> 00:24:44,229
opinion about what that minimum block

599
00:24:42,400 --> 00:24:46,210
size would be and even if they didn't we

600
00:24:44,230 --> 00:24:48,700
can by default I'll make that minimum

601
00:24:46,210 --> 00:24:51,720
block size be something reasonable now

602
00:24:48,700 --> 00:24:54,940
when we actually initialize arenas I

603
00:24:51,720 --> 00:25:01,930
think we don't use clear to zero at the

604
00:24:54,940 --> 00:25:04,180
moment let's see yeah because the size

605
00:25:01,930 --> 00:25:06,490
value here is getting set the size and

606
00:25:04,180 --> 00:25:09,190
the base are getting set the like so

607
00:25:06,490 --> 00:25:11,230
right so we call this initialize arena

608
00:25:09,190 --> 00:25:12,830
we could very easily just say okay the

609
00:25:11,230 --> 00:25:14,750
minimum block size in here

610
00:25:12,829 --> 00:25:16,339
when we do minimum block size is just

611
00:25:14,750 --> 00:25:18,140
gonna be whatever it's gonna be you know

612
00:25:16,339 --> 00:25:19,819
64 K or something

613
00:25:18,140 --> 00:25:22,070
so the minimum size were gonna allocate

614
00:25:19,819 --> 00:25:23,750
when we allocate is gonna be that and

615
00:25:22,069 --> 00:25:25,579
you know off we go or whatever so with

616
00:25:23,750 --> 00:25:27,349
that maybe that's too small you know

617
00:25:25,579 --> 00:25:30,319
maybe it should be a megabyte per I

618
00:25:27,349 --> 00:25:31,879
don't know you know you're free to do it

619
00:25:30,319 --> 00:25:35,389
maybe a gigabytes better I don't know

620
00:25:31,880 --> 00:25:39,549
probably not gigabyte so you know I

621
00:25:35,390 --> 00:25:44,960
don't know we could do to do KC tune

622
00:25:39,548 --> 00:25:46,519
default block size eventually but really

623
00:25:44,960 --> 00:25:52,639
what we would want to do here is say

624
00:25:46,519 --> 00:25:55,220
okay chances are when people initialize

625
00:25:52,638 --> 00:25:59,269
these things they would also want to be

626
00:25:55,220 --> 00:26:02,240
able to specify you know that minimum

627
00:25:59,269 --> 00:26:05,089
block size themselves so for example

628
00:26:02,240 --> 00:26:08,329
they could do something like this in

629
00:26:05,089 --> 00:26:11,388
line void initialize arena where we give

630
00:26:08,329 --> 00:26:14,329
it the memory arena and then we say the

631
00:26:11,388 --> 00:26:16,069
minimum block size and that would be

632
00:26:14,329 --> 00:26:18,168
kind of an interesting thing as well and

633
00:26:16,069 --> 00:26:21,109
what you would see there happen is we

634
00:26:18,169 --> 00:26:22,309
would take all of this stuff oops we

635
00:26:21,109 --> 00:26:23,990
would take all of this stuff and

636
00:26:22,308 --> 00:26:26,750
actually just initialize it to zero and

637
00:26:23,990 --> 00:26:28,700
then inside here we would pet we would

638
00:26:26,750 --> 00:26:29,990
set that minimum block size now you may

639
00:26:28,700 --> 00:26:31,580
be asking well what's going on here

640
00:26:29,990 --> 00:26:33,740
you're not giving any memory to start

641
00:26:31,579 --> 00:26:37,129
with and the answer is well once we have

642
00:26:33,740 --> 00:26:39,440
expandable arenas we can choose not to

643
00:26:37,130 --> 00:26:41,389
Bob not to bother iliza them with any

644
00:26:39,440 --> 00:26:43,940
memory right we can just set a minimum

645
00:26:41,388 --> 00:26:45,109
block size and then just know the first

646
00:26:43,940 --> 00:26:47,058
time someone actually does an allocation

647
00:26:45,109 --> 00:26:49,129
this arena it will go allocate something

648
00:26:47,058 --> 00:26:50,960
of the minimum block size right so we

649
00:26:49,130 --> 00:26:52,669
don't need to pass in a base pointer

650
00:26:50,960 --> 00:26:54,409
anymore if we don't need to we can just

651
00:26:52,669 --> 00:26:56,240
initialize an arena to zero essentially

652
00:26:54,409 --> 00:27:00,559
and then just set the minimum block size

653
00:26:56,240 --> 00:27:02,359
right now I would go one further and say

654
00:27:00,558 --> 00:27:04,220
let's support zero is initialization

655
00:27:02,359 --> 00:27:05,629
here I'm a big fan of zeros

656
00:27:04,220 --> 00:27:08,720
initialization it's one of my favorite

657
00:27:05,630 --> 00:27:10,100
things I think it reduces bugs a lot and

658
00:27:08,720 --> 00:27:12,079
it also increases the efficiency in a

659
00:27:10,099 --> 00:27:15,048
lot of ways potentially depending on the

660
00:27:12,079 --> 00:27:17,528
circumstances so the other thing I would

661
00:27:15,048 --> 00:27:22,369
say is let's have a clear to zero

662
00:27:17,528 --> 00:27:24,470
ability on this arena by saying okay the

663
00:27:22,369 --> 00:27:26,779
minimum block size could be set to zero

664
00:27:24,470 --> 00:27:28,670
and we have a default block size

665
00:27:26,779 --> 00:27:30,710
thing here so essentially what we could

666
00:27:28,670 --> 00:27:32,330
say is hey if you don't set a minimum

667
00:27:30,710 --> 00:27:34,100
block size because we know a minimum

668
00:27:32,329 --> 00:27:35,269
block size of zero can't be valid

669
00:27:34,099 --> 00:27:38,480
because that would not allow you to

670
00:27:35,269 --> 00:27:40,639
actually allocate memory at all so what

671
00:27:38,480 --> 00:27:45,079
we could do there is say alright if the

672
00:27:40,640 --> 00:27:47,930
minimum block size is at zero then we

673
00:27:45,079 --> 00:27:50,539
will use it if it is zero we'll set it

674
00:27:47,930 --> 00:27:51,920
to the default right so when we push

675
00:27:50,539 --> 00:27:54,619
through here we'll just say if arena

676
00:27:51,920 --> 00:27:56,870
minimum block size is not set to

677
00:27:54,619 --> 00:28:00,529
anything then we will just set a minimum

678
00:27:56,869 --> 00:28:04,849
block size equal to whatever our default

679
00:28:00,529 --> 00:28:06,410
block size is right and so now you can

680
00:28:04,849 --> 00:28:08,089
see a really interesting thing that

681
00:28:06,410 --> 00:28:09,529
we've done here this is something I'm

682
00:28:08,089 --> 00:28:12,439
always pretty excited about what I can

683
00:28:09,529 --> 00:28:14,539
do when I can do it we've got a

684
00:28:12,440 --> 00:28:16,430
relatively complex thing that even has a

685
00:28:14,539 --> 00:28:19,159
pointer it in whatever we were still

686
00:28:16,430 --> 00:28:23,299
able to make initialize initialization

687
00:28:19,160 --> 00:28:25,070
zero is initialization work right I feel

688
00:28:23,299 --> 00:28:27,379
like that's a that should be a term like

689
00:28:25,069 --> 00:28:29,720
you know how people have our eye like

690
00:28:27,380 --> 00:28:34,010
resource acquisition is initialization

691
00:28:29,720 --> 00:28:36,350
are our AII I hate that pattern I think

692
00:28:34,009 --> 00:28:40,400
it's a really bad pattern how about zero

693
00:28:36,349 --> 00:28:45,339
is initialization zi i zi i like you

694
00:28:40,400 --> 00:28:55,550
know ra íí- equals bad zi i equals good

695
00:28:45,339 --> 00:28:57,819
right that's all you need to know there

696
00:28:55,549 --> 00:28:57,819
you go

697
00:28:57,910 --> 00:29:08,029
programming done so yeah zero is

698
00:29:06,140 --> 00:29:09,620
initialization is really nice if you can

699
00:29:08,029 --> 00:29:11,210
do it it means you can just take memory

700
00:29:09,619 --> 00:29:13,039
block clear it to zero and know that

701
00:29:11,210 --> 00:29:14,480
it's ready to go you don't need to have

702
00:29:13,039 --> 00:29:15,859
constructors you don't need to worry

703
00:29:14,480 --> 00:29:17,329
about pointers pointing to things it's

704
00:29:15,859 --> 00:29:19,159
really nice so if you can make it happen

705
00:29:17,329 --> 00:29:21,529
it's always kind of nice in this case we

706
00:29:19,160 --> 00:29:26,560
now have a really good way to make it

707
00:29:21,529 --> 00:29:29,119
happen and that is to use this sort of

708
00:29:26,559 --> 00:29:31,279
trick of checking the middle block size

709
00:29:29,119 --> 00:29:33,829
now what you'll notice is I kind of kid

710
00:29:31,279 --> 00:29:35,809
that in there in kind of a nice way we

711
00:29:33,829 --> 00:29:37,609
already have to do this if check to see

712
00:29:35,809 --> 00:29:39,679
whether or not we've hit the boundary of

713
00:29:37,609 --> 00:29:40,250
the memory well that's not going to

714
00:29:39,680 --> 00:29:41,930
happen very

715
00:29:40,250 --> 00:29:43,160
often right the whole point is if we're

716
00:29:41,930 --> 00:29:45,380
trying to be efficient we're not going

717
00:29:43,160 --> 00:29:47,029
to hit that very often so what I did is

718
00:29:45,380 --> 00:29:48,770
I buried this if inside there so it's

719
00:29:47,029 --> 00:29:50,720
nice we don't have to worry it's not

720
00:29:48,769 --> 00:29:53,420
like we're this cost us very much to do

721
00:29:50,720 --> 00:29:54,890
because adding that extra check is it's

722
00:29:53,420 --> 00:29:57,110
already pretty much free because it's

723
00:29:54,890 --> 00:29:59,600
only inside this fairly rarely taken

724
00:29:57,109 --> 00:30:01,729
branch so the work we do in here is just

725
00:29:59,599 --> 00:30:03,409
not relevant right this is this is

726
00:30:01,730 --> 00:30:05,180
called so infrequently hopefully if

727
00:30:03,410 --> 00:30:06,580
we've tuned our parameters properly that

728
00:30:05,180 --> 00:30:08,810
we don't have to worry very much about

729
00:30:06,579 --> 00:30:11,230
what we do in here so it's pretty much

730
00:30:08,809 --> 00:30:13,549
free to to add that check I believe

731
00:30:11,230 --> 00:30:15,710
because I don't think we'll pay any cost

732
00:30:13,549 --> 00:30:19,730
for that so it wasn't like the checking

733
00:30:15,710 --> 00:30:23,809
every time is somehow less efficient all

734
00:30:19,730 --> 00:30:25,849
right so that is a growing arena we need

735
00:30:23,809 --> 00:30:28,659
to actually add this in now

736
00:30:25,849 --> 00:30:28,659
let's see here

737
00:30:32,000 --> 00:30:39,759
I and there's just max

738
00:30:43,910 --> 00:30:59,570
well that's it handmade out H is it

739
00:30:45,798 --> 00:31:02,379
alright fine now it isn't so yeah I move

740
00:30:59,569 --> 00:31:06,439
over here so my head's not in the way

741
00:31:02,380 --> 00:31:09,620
all right so now we've got pretty much

742
00:31:06,440 --> 00:31:12,470
everything we need the platform bit it

743
00:31:09,619 --> 00:31:15,739
inside memory here we do have the

744
00:31:12,470 --> 00:31:17,870
problem of these arenas I think get used

745
00:31:15,740 --> 00:31:20,210
in places where platform I don't really

746
00:31:17,869 --> 00:31:24,109
know if platform always exists is one

747
00:31:20,210 --> 00:31:27,980
problem so you know something that kind

748
00:31:24,109 --> 00:31:30,038
of would it be nice and I'm not sure

749
00:31:27,980 --> 00:31:33,019
exactly how we would want to tackle it

750
00:31:30,038 --> 00:31:36,349
but one thing that would be nice is if

751
00:31:33,019 --> 00:31:40,750
we had a way of always getting that

752
00:31:36,349 --> 00:31:40,750
platform variable somehow from somebody

753
00:31:42,009 --> 00:31:48,440
regardless of you know having a way of

754
00:31:45,288 --> 00:31:51,798
getting that call regardless of where

755
00:31:48,440 --> 00:31:54,259
you were and so you know if you're in

756
00:31:51,798 --> 00:31:56,710
the dll we want this to be visible to

757
00:31:54,259 --> 00:31:59,210
you right and we sort of can do that

758
00:31:56,710 --> 00:32:02,538
global variable here I don't know if

759
00:31:59,210 --> 00:32:05,150
that's actually being used to make this

760
00:32:02,538 --> 00:32:07,548
thing static or not because I don't

761
00:32:05,150 --> 00:32:11,870
remember what again we set at this point

762
00:32:07,548 --> 00:32:15,950
our our definitions to there but global

763
00:32:11,869 --> 00:32:17,599
variable yeah static so what we could do

764
00:32:15,950 --> 00:32:20,000
there if we wanted to write is we could

765
00:32:17,599 --> 00:32:23,449
make that an externally linkable

766
00:32:20,000 --> 00:32:27,470
variable if we wanted to and we could

767
00:32:23,450 --> 00:32:29,150
make it so that that way the you know we

768
00:32:27,470 --> 00:32:31,038
could forward declare it in various

769
00:32:29,150 --> 00:32:33,950
places or other things like that and

770
00:32:31,038 --> 00:32:37,220
make sure that it actually works now the

771
00:32:33,950 --> 00:32:43,038
way that that happens is I believe it's

772
00:32:37,220 --> 00:32:45,110
inside game update and render you can

773
00:32:43,038 --> 00:32:47,179
see here where we basically copy the

774
00:32:45,109 --> 00:32:50,269
platform API from the memory that were

775
00:32:47,179 --> 00:32:52,250
Pat from the memory block structure that

776
00:32:50,269 --> 00:32:55,879
you know the thing that comes in from

777
00:32:52,250 --> 00:32:57,809
the platform layer and so when we do

778
00:32:55,880 --> 00:32:59,220
that copy right that's initializing

779
00:32:57,809 --> 00:33:02,519
our version of the global variable and

780
00:32:59,220 --> 00:33:04,980
in the platform code which is is still

781
00:33:02,519 --> 00:33:08,160
using the arena's as well right in the

782
00:33:04,980 --> 00:33:10,410
platform code we have that same data

783
00:33:08,160 --> 00:33:12,810
here right we filled it out in game

784
00:33:10,410 --> 00:33:14,970
memory so we could we could easily make

785
00:33:12,809 --> 00:33:19,819
it so that this thing was accessible in

786
00:33:14,970 --> 00:33:22,110
some way by the shared you know by the

787
00:33:19,819 --> 00:33:24,029
by the code that's in the platform layer

788
00:33:22,109 --> 00:33:27,299
as well we just need a good way of

789
00:33:24,029 --> 00:33:30,029
actually doing that right and so one way

790
00:33:27,299 --> 00:33:32,609
that we could do that is in the platform

791
00:33:30,029 --> 00:33:34,500
thing here where we say in handmade H

792
00:33:32,609 --> 00:33:36,479
where we say platform like I say we

793
00:33:34,500 --> 00:33:40,200
could try to try making this an extern

794
00:33:36,480 --> 00:33:43,860
right and then if we make it an extern

795
00:33:40,200 --> 00:33:45,690
we can actually put it up into we can

796
00:33:43,859 --> 00:33:48,479
put that up into the platform code and

797
00:33:45,690 --> 00:33:50,940
say hey yeah no matter where you are

798
00:33:48,480 --> 00:33:53,460
there will be one of these that you can

799
00:33:50,940 --> 00:33:54,779
access but you're gonna have to get it

800
00:33:53,460 --> 00:33:57,150
from different places depending on the

801
00:33:54,779 --> 00:34:01,829
circumstances right so we could say

802
00:33:57,150 --> 00:34:11,670
right here that they're gonna be able to

803
00:34:01,829 --> 00:34:13,829
get one right that you're going to be

804
00:34:11,670 --> 00:34:16,530
able to get one right and so then what

805
00:34:13,829 --> 00:34:19,409
we need to do is we need to figure out

806
00:34:16,530 --> 00:34:21,780
where we can define that thing so that

807
00:34:19,409 --> 00:34:23,569
it's accessible oh hey look we're

808
00:34:21,780 --> 00:34:28,140
already actually doing that apparently

809
00:34:23,570 --> 00:34:31,350
right so yes so we just need one of

810
00:34:28,139 --> 00:34:34,409
those in both places right so in

811
00:34:31,349 --> 00:34:37,079
handmade dot cpp we needed one and we

812
00:34:34,409 --> 00:34:38,549
can put that right here and then in the

813
00:34:37,079 --> 00:34:41,039
win32 layer we needed one and so now we

814
00:34:38,550 --> 00:34:44,910
have two different platform layers and

815
00:34:41,039 --> 00:34:47,610
each of them can be used separately now

816
00:34:44,909 --> 00:34:48,989
the problem here with platform is I

817
00:34:47,610 --> 00:34:50,700
don't know that we ever actually said it

818
00:34:48,989 --> 00:34:53,299
I know it's there but do we use it

819
00:34:50,699 --> 00:34:53,299
anywhere

820
00:34:57,579 --> 00:35:05,349
we do so there's our update so then

821
00:35:00,380 --> 00:35:07,910
we're all good I think right yeah

822
00:35:05,349 --> 00:35:10,130
virtual a lot blah blah blah so I think

823
00:35:07,909 --> 00:35:13,728
that's it I think that's really all

824
00:35:10,130 --> 00:35:15,950
there is to it to getting that platform

825
00:35:13,728 --> 00:35:18,788
into the right place now mind you at

826
00:35:15,949 --> 00:35:22,518
this point we have still not really done

827
00:35:18,789 --> 00:35:24,410
the actual hard parts of this we did the

828
00:35:22,518 --> 00:35:26,449
easy parts but we have a few hard parts

829
00:35:24,409 --> 00:35:29,478
left to go we've got about 15 minutes

830
00:35:26,449 --> 00:35:31,518
left if we run it now nothing's gonna

831
00:35:29,478 --> 00:35:32,989
happen any differently obviously and the

832
00:35:31,518 --> 00:35:37,939
reason that nothing's gonna happen to me

833
00:35:32,989 --> 00:35:39,650
differently is because if you since

834
00:35:37,940 --> 00:35:42,829
we're allocating our memory upfront

835
00:35:39,650 --> 00:35:44,389
anyway none of our arenas will ever hit

836
00:35:42,829 --> 00:35:49,130
that condition they would have asserted

837
00:35:44,389 --> 00:35:50,659
before right if they had if they had hit

838
00:35:49,130 --> 00:35:51,829
the end of them they wouldn't we would

839
00:35:50,659 --> 00:35:52,998
have been seeing assertions since we

840
00:35:51,829 --> 00:35:56,170
weren't seeing assertions we know we're

841
00:35:52,998 --> 00:35:56,169
never going to hit the allocation case

842
00:35:56,798 --> 00:36:03,349
so right now our arenas are actually

843
00:36:00,650 --> 00:36:07,940
running exactly the same way that they

844
00:36:03,349 --> 00:36:10,009
used to be running but what we can do to

845
00:36:07,940 --> 00:36:11,929
prevent that from happening and force

846
00:36:10,009 --> 00:36:15,829
them to go through a different path

847
00:36:11,929 --> 00:36:18,739
right is we could go in and say all

848
00:36:15,829 --> 00:36:21,950
right let's take the debug storage size

849
00:36:18,739 --> 00:36:27,889
thing and let's make the debug storage

850
00:36:21,949 --> 00:36:29,718
size not actually let's let's not have

851
00:36:27,889 --> 00:36:32,239
there be a debug storage size let's

852
00:36:29,719 --> 00:36:35,539
remove that entirely and we'll just use

853
00:36:32,239 --> 00:36:38,599
a growing arena for our debug size right

854
00:36:35,539 --> 00:36:44,960
so let's say we just get rid of this we

855
00:36:38,599 --> 00:36:49,818
go into our game memory code and we just

856
00:36:44,960 --> 00:36:53,749
say no right it's not it's not happening

857
00:36:49,818 --> 00:36:55,639
right and so now what we could say is

858
00:36:53,748 --> 00:37:00,159
well whenever this stuff is actually

859
00:36:55,639 --> 00:37:00,159
accessing this debug storage right

860
00:37:00,880 --> 00:37:05,749
although now I think about it we I don't

861
00:37:03,679 --> 00:37:07,460
know if we need to have the successful

862
00:37:05,748 --> 00:37:09,618
both places so this may be a poor choice

863
00:37:07,460 --> 00:37:10,670
because we'll have to put the arena out

864
00:37:09,619 --> 00:37:12,320
there although now I think

865
00:37:10,670 --> 00:37:22,269
I suppose there's no real reason why the

866
00:37:12,320 --> 00:37:22,269
arena can't just be out there I mean

867
00:37:23,079 --> 00:37:30,590
seems like that would just work push

868
00:37:26,269 --> 00:37:32,030
that on the stack for a second so yeah

869
00:37:30,590 --> 00:37:33,140
you can kind of see us doing this this

870
00:37:32,030 --> 00:37:34,940
thing here where we're lucky

871
00:37:33,139 --> 00:37:38,659
initializing these arenas and blah blah

872
00:37:34,940 --> 00:37:42,170
blah blah right and when we do this

873
00:37:38,659 --> 00:37:44,899
arena initialization stuff right this is

874
00:37:42,170 --> 00:37:46,519
all forcing us to kind of think about

875
00:37:44,900 --> 00:37:48,680
things that we maybe didn't want to

876
00:37:46,519 --> 00:37:50,509
think about and you know subdividing up

877
00:37:48,679 --> 00:37:53,389
this memory but we don't care about that

878
00:37:50,510 --> 00:37:55,070
right we don't care about how much

879
00:37:53,389 --> 00:37:57,829
memory these things are using it's just

880
00:37:55,070 --> 00:38:00,260
for debugging so this stuff is all just

881
00:37:57,829 --> 00:38:00,920
stupid it doesn't actually help us at

882
00:38:00,260 --> 00:38:03,440
all

883
00:38:00,920 --> 00:38:05,269
and it just makes it harder for us to

884
00:38:03,440 --> 00:38:07,730
program because it's wasting our time

885
00:38:05,269 --> 00:38:09,800
thinking about how big we need to make

886
00:38:07,730 --> 00:38:12,320
these things now it didn't waste very

887
00:38:09,800 --> 00:38:14,180
much time that's true but why waste any

888
00:38:12,320 --> 00:38:15,650
time if you don't have to since we can

889
00:38:14,179 --> 00:38:17,659
get the we can get all the same benefits

890
00:38:15,650 --> 00:38:19,400
from the arena that we were getting

891
00:38:17,659 --> 00:38:21,739
before we don't have to give anything up

892
00:38:19,400 --> 00:38:23,900
and now we wouldn't have to say how big

893
00:38:21,739 --> 00:38:25,579
the things we're going to be right so

894
00:38:23,900 --> 00:38:29,720
what we could do instead is just say all

895
00:38:25,579 --> 00:38:31,460
right the per frame arena in fact maybe

896
00:38:29,719 --> 00:38:34,969
this is the best way to do it

897
00:38:31,460 --> 00:38:37,639
to start with well okay what this way so

898
00:38:34,969 --> 00:38:41,449
the per frame arena inside our debug

899
00:38:37,639 --> 00:38:48,199
state we're just going to make the per

900
00:38:41,449 --> 00:38:52,579
frame arena be you know a dynamically

901
00:38:48,199 --> 00:38:54,139
growing arena right and I guess we

902
00:38:52,579 --> 00:38:56,029
should have another arena in here now I

903
00:38:54,139 --> 00:38:58,039
think about it though the debug arena

904
00:38:56,030 --> 00:39:01,970
itself when does that actually get

905
00:38:58,039 --> 00:39:05,139
created that's the one I probably

906
00:39:01,969 --> 00:39:05,139
actually want to do there

907
00:39:06,489 --> 00:39:10,299
as well

908
00:39:14,920 --> 00:39:24,309
hello it's this one so yes so that just

909
00:39:22,298 --> 00:39:28,179
takes the total memory size of the

910
00:39:24,309 --> 00:39:30,579
entire debug system right and the per

911
00:39:28,179 --> 00:39:32,078
frame arena just takes half of that it

912
00:39:30,579 --> 00:39:34,809
looks like you know whatever the half

913
00:39:32,079 --> 00:39:36,760
whatever half of that actually is so if

914
00:39:34,809 --> 00:39:38,950
I wanted to start out what I could say

915
00:39:36,760 --> 00:39:46,329
is like all right debug state debug

916
00:39:38,949 --> 00:39:48,848
arena and debug state performs they are

917
00:39:46,329 --> 00:39:53,950
both getting initialized at the outset

918
00:39:48,849 --> 00:39:55,088
here if during debug start and and so

919
00:39:53,949 --> 00:39:56,768
what I want to do is I want to

920
00:39:55,088 --> 00:39:58,690
initialize these arenas with a certain

921
00:39:56,768 --> 00:40:00,368
minimum frame size I guess I don't

922
00:39:58,690 --> 00:40:02,889
really care what that minimum frame size

923
00:40:00,369 --> 00:40:03,730
is so you know if I wanted to I could

924
00:40:02,889 --> 00:40:06,368
just do it like this

925
00:40:03,730 --> 00:40:08,409
right I could just say initialize them

926
00:40:06,369 --> 00:40:11,500
to 0 and that's all we needed to do

927
00:40:08,409 --> 00:40:13,210
right if I want to and again I'm gonna

928
00:40:11,500 --> 00:40:14,889
need some weight here to tell whether

929
00:40:13,210 --> 00:40:16,838
you know things are initialized or not

930
00:40:14,889 --> 00:40:20,768
but that would be the only thing that I

931
00:40:16,838 --> 00:40:22,808
would actually have to do right so yeah

932
00:40:20,768 --> 00:40:25,268
I can go ahead and do that do this

933
00:40:22,809 --> 00:40:27,039
initialization bit and then I don't need

934
00:40:25,268 --> 00:40:28,358
the total memory size or any of this

935
00:40:27,039 --> 00:40:31,028
stuff this stuff can all go away

936
00:40:28,358 --> 00:40:34,318
entirely and now I just end up having

937
00:40:31,028 --> 00:40:34,318
like okay there's you know

938
00:40:40,039 --> 00:40:44,079
there's some things that get

939
00:40:41,300 --> 00:40:46,730
automatically allocated for us right

940
00:40:44,079 --> 00:40:48,380
this also means that we wouldn't have to

941
00:40:46,730 --> 00:40:51,108
ever throw anything away that we didn't

942
00:40:48,380 --> 00:40:53,480
want to throw away so it also means we

943
00:40:51,108 --> 00:40:57,250
don't have to do the sort of borrowing

944
00:40:53,480 --> 00:41:00,559
thing we could just record as much debug

945
00:40:57,250 --> 00:41:02,780
information as we want and and so we

946
00:41:00,559 --> 00:41:05,119
could also you know create extremely

947
00:41:02,780 --> 00:41:06,470
large runs of store debug information if

948
00:41:05,119 --> 00:41:09,440
you wanted to and just let the arenas

949
00:41:06,469 --> 00:41:11,839
allocate so we could do that if you want

950
00:41:09,440 --> 00:41:14,710
to I'm actually going to call in it

951
00:41:11,840 --> 00:41:14,710
arena here

952
00:41:15,639 --> 00:41:22,639
it's just initialize and say that I'm

953
00:41:20,809 --> 00:41:27,980
gonna pass a well you know what no I'm

954
00:41:22,639 --> 00:41:29,480
just gonna stick to my guns there we go

955
00:41:27,980 --> 00:41:30,740
so those arenas are going to get

956
00:41:29,480 --> 00:41:33,019
initialized to zero which means they'll

957
00:41:30,739 --> 00:41:34,579
just use the default block size and so

958
00:41:33,019 --> 00:41:38,119
all we have to do now is clean up sort

959
00:41:34,579 --> 00:41:40,599
of the the basic emit pass requires

960
00:41:38,119 --> 00:41:44,660
l-value

961
00:41:40,599 --> 00:41:54,829
do I not pass a pointer to the struct is

962
00:41:44,659 --> 00:41:56,509
it this apparently it is so yeah I think

963
00:41:54,829 --> 00:41:58,009
that's all we really have to do when we

964
00:41:56,510 --> 00:41:59,810
call debug frame and you know we're

965
00:41:58,010 --> 00:42:02,150
grabbing the debug state out of this

966
00:41:59,809 --> 00:42:04,099
debug storage thing here and that's just

967
00:42:02,150 --> 00:42:05,599
you know in the game memory that's just

968
00:42:04,099 --> 00:42:09,319
where we have to store that particular

969
00:42:05,599 --> 00:42:11,299
piece of information and whether or not

970
00:42:09,320 --> 00:42:14,990
we get it depends you know if we get it

971
00:42:11,300 --> 00:42:17,180
or not depends makes the decision as to

972
00:42:14,989 --> 00:42:20,389
whether or not we actually do the debug

973
00:42:17,179 --> 00:42:22,879
work so the question here is how do we

974
00:42:20,389 --> 00:42:24,259
how do we get this thing started right

975
00:42:22,880 --> 00:42:26,090
because before we would just pass a

976
00:42:24,260 --> 00:42:27,920
block of memory in and say here's the

977
00:42:26,090 --> 00:42:29,809
block of memory now we actually have to

978
00:42:27,920 --> 00:42:32,809
do something we're okay you know if

979
00:42:29,809 --> 00:42:35,420
there was no arenas or whatever those

980
00:42:32,809 --> 00:42:38,329
things have to be initialized before we

981
00:42:35,420 --> 00:42:41,300
go and so what we need is we need some

982
00:42:38,329 --> 00:42:44,029
way right of recording the fact that

983
00:42:41,300 --> 00:42:45,650
these things you know in the game memory

984
00:42:44,030 --> 00:42:50,119
recording the fact that these things

985
00:42:45,650 --> 00:42:53,990
were not set up yet right and so in

986
00:42:50,119 --> 00:42:57,920
order to do that what I would need to

987
00:42:53,989 --> 00:43:00,919
do is have something in here that we can

988
00:42:57,920 --> 00:43:03,440
use for our initial you know for our

989
00:43:00,920 --> 00:43:05,599
initial for Ford like our base pointer

990
00:43:03,440 --> 00:43:10,610
right so I would need to have something

991
00:43:05,599 --> 00:43:12,319
like this right that allows us to go if

992
00:43:10,610 --> 00:43:15,019
that pointer is valid then we know that

993
00:43:12,320 --> 00:43:18,590
we've that we know we've initialized if

994
00:43:15,019 --> 00:43:21,019
it's not valid then or rather if it's

995
00:43:18,590 --> 00:43:23,960
you know we could we could have it and

996
00:43:21,019 --> 00:43:26,329
clear it to zero let's say right then we

997
00:43:23,960 --> 00:43:30,139
know that things have gone kind of

998
00:43:26,329 --> 00:43:31,579
pear-shaped on us right so let's take a

999
00:43:30,139 --> 00:43:34,190
look at what would happen if we did it

1000
00:43:31,579 --> 00:43:35,239
this way so if I did it this way you

1001
00:43:34,190 --> 00:43:36,650
know and we assumed it was cleared to

1002
00:43:35,239 --> 00:43:38,329
zero presumably all the rest of this

1003
00:43:36,650 --> 00:43:40,400
stuff just works the only difference is

1004
00:43:38,329 --> 00:43:42,319
when we go to get this thing out we

1005
00:43:40,400 --> 00:43:44,269
would just look at that pointer whatever

1006
00:43:42,320 --> 00:43:47,750
that pointer was instead of actually

1007
00:43:44,269 --> 00:43:49,670
taking a memory block and casting it so

1008
00:43:47,750 --> 00:43:53,900
now we would say like all right when we

1009
00:43:49,670 --> 00:43:56,300
do debug get state again it just looks

1010
00:43:53,900 --> 00:43:58,670
at it that way and that's really all

1011
00:43:56,300 --> 00:44:00,800
that we would be doing similarly we

1012
00:43:58,670 --> 00:44:02,570
don't have to account for the debug

1013
00:44:00,800 --> 00:44:07,700
storage size in here anymore the debug

1014
00:44:02,570 --> 00:44:09,320
storehouse could be removed and then the

1015
00:44:07,699 --> 00:44:13,429
debug storage itself also could be

1016
00:44:09,320 --> 00:44:15,559
removed so now we've sort of started to

1017
00:44:13,429 --> 00:44:18,169
do this correctly of course we also have

1018
00:44:15,559 --> 00:44:22,429
the problem now where we want to set

1019
00:44:18,170 --> 00:44:25,490
when we when we do the game memory we

1020
00:44:22,429 --> 00:44:26,899
want to in here set game memory well I

1021
00:44:25,489 --> 00:44:29,629
guess it's probably cleared to zero for

1022
00:44:26,900 --> 00:44:32,900
us huh let me just double check that it

1023
00:44:29,630 --> 00:44:34,760
is yeah so debug state by default would

1024
00:44:32,900 --> 00:44:41,119
be set to zero so what we want to do

1025
00:44:34,760 --> 00:44:43,850
here is we would want to well honestly

1026
00:44:41,119 --> 00:44:48,200
we probably want to do something a

1027
00:44:43,849 --> 00:44:51,230
little bit weird we could if we wanted

1028
00:44:48,199 --> 00:44:56,779
to create the debug struct like here

1029
00:44:51,230 --> 00:44:58,190
right we could just create a debug

1030
00:44:56,780 --> 00:45:00,710
struck one of those starts next but it

1031
00:44:58,190 --> 00:45:02,059
it would end point to it and then it

1032
00:45:00,710 --> 00:45:03,619
would just be all zero so you knew it

1033
00:45:02,059 --> 00:45:05,989
was initialized but a more interesting

1034
00:45:03,619 --> 00:45:07,230
might be to just set that debug state

1035
00:45:05,989 --> 00:45:09,539
pointer to not be

1036
00:45:07,230 --> 00:45:11,750
anything at all and if we set that debug

1037
00:45:09,539 --> 00:45:14,009
struct pointer to not be anything at all

1038
00:45:11,750 --> 00:45:16,440
then I feel like we're in a more

1039
00:45:14,010 --> 00:45:17,820
interesting situation because if we set

1040
00:45:16,440 --> 00:45:22,170
it to be nothing at all instead of

1041
00:45:17,820 --> 00:45:25,530
looking at initialized right what we

1042
00:45:22,170 --> 00:45:28,740
could do is just return memory debug

1043
00:45:25,530 --> 00:45:31,980
state and initialize would just be

1044
00:45:28,739 --> 00:45:34,049
whether or not that was was set to zero

1045
00:45:31,980 --> 00:45:37,409
or not right

1046
00:45:34,050 --> 00:45:40,080
so namely when we call debug start here

1047
00:45:37,409 --> 00:45:41,879
right and do the if not initialized and

1048
00:45:40,079 --> 00:45:46,799
let me take a quick look just to make

1049
00:45:41,880 --> 00:45:48,329
sure I loop saw wrong thing so that's

1050
00:45:46,800 --> 00:45:52,080
the only place that's called right is

1051
00:45:48,329 --> 00:45:57,690
right down here so what I might do is

1052
00:45:52,079 --> 00:46:09,230
say let's make debug in it we'll pull

1053
00:45:57,690 --> 00:46:13,320
this out and then what we'll say is okay

1054
00:46:09,230 --> 00:46:14,670
we're going to return a pointer here so

1055
00:46:13,320 --> 00:46:15,809
if you need to initialize a debug system

1056
00:46:14,670 --> 00:46:18,780
you can just go right ahead and do it

1057
00:46:15,809 --> 00:46:20,460
right and we're gonna need some things

1058
00:46:18,780 --> 00:46:23,640
that would have been passed through here

1059
00:46:20,460 --> 00:46:26,369
right we're gonna need some stuff so

1060
00:46:23,639 --> 00:46:28,799
when the debug start situation happens I

1061
00:46:26,369 --> 00:46:35,160
guess I also don't know does assets need

1062
00:46:28,800 --> 00:46:37,740
to be here yeah it does we'll have to

1063
00:46:35,159 --> 00:46:40,920
pass probably something here well maybe

1064
00:46:37,739 --> 00:46:43,019
not I don't even know do we have to pass

1065
00:46:40,920 --> 00:46:46,369
anything here do we use anything here

1066
00:46:43,019 --> 00:46:46,369
let's find out compiler tell me

1067
00:46:49,469 --> 00:46:59,068
oops so we do need to know the width and

1068
00:46:57,329 --> 00:47:00,568
the height that we start out at because

1069
00:46:59,068 --> 00:47:02,579
it looks like it's placing an initial

1070
00:47:00,568 --> 00:47:04,170
thing at that location so that we can

1071
00:47:02,579 --> 00:47:07,289
kind of go through here and say like

1072
00:47:04,170 --> 00:47:10,318
okay we got a path we got to pass that

1073
00:47:07,289 --> 00:47:12,420
in but otherwise that's it so what we

1074
00:47:10,318 --> 00:47:16,380
can do here is say like okay when we

1075
00:47:12,420 --> 00:47:20,369
come down here we can say take a look if

1076
00:47:16,380 --> 00:47:26,599
memory debug state is not valid we can

1077
00:47:20,369 --> 00:47:32,000
set memory debug state to be debug in it

1078
00:47:26,599 --> 00:47:34,740
and if I switch myself over here I

1079
00:47:32,000 --> 00:47:37,980
should be able to see where are we

1080
00:47:34,739 --> 00:47:49,588
getting that width and height from stop

1081
00:47:37,980 --> 00:47:51,900
blocking my view please all right so

1082
00:47:49,588 --> 00:47:54,809
yeah oops

1083
00:47:51,900 --> 00:47:55,500
passed the wrong things isn't that

1084
00:47:54,809 --> 00:48:02,670
always the way

1085
00:47:55,500 --> 00:48:04,409
oh yeah so yeah so once we have this

1086
00:48:02,670 --> 00:48:05,608
done where we're gonna say like okay if

1087
00:48:04,409 --> 00:48:08,519
we need to initialize it we'll

1088
00:48:05,608 --> 00:48:11,909
initialize it in here and we don't need

1089
00:48:08,519 --> 00:48:13,318
the if anymore obviously because we're

1090
00:48:11,909 --> 00:48:15,328
going to actually create one of these

1091
00:48:13,318 --> 00:48:18,989
ourselves when we go to initialize the

1092
00:48:15,329 --> 00:48:20,490
debug code what we need to do now is

1093
00:48:18,989 --> 00:48:23,009
have some way of getting that initial

1094
00:48:20,489 --> 00:48:25,500
memory for the debug code now it was a

1095
00:48:23,010 --> 00:48:27,420
bit of a catch-22 situation right what

1096
00:48:25,500 --> 00:48:29,400
we want to do is initialize these arenas

1097
00:48:27,420 --> 00:48:31,079
here we would probably want to allocate

1098
00:48:29,400 --> 00:48:33,349
it out of the debug arena but we don't

1099
00:48:31,079 --> 00:48:35,430
have a debug arena yet so what do we do

1100
00:48:33,349 --> 00:48:37,890
well it's kind of funny if you think

1101
00:48:35,429 --> 00:48:40,679
about it one of those debug arenas is

1102
00:48:37,889 --> 00:48:44,068
really not there's nothing magical about

1103
00:48:40,679 --> 00:48:47,279
it it's just a struct right all is is

1104
00:48:44,068 --> 00:48:49,440
this struct so if we wanted to we could

1105
00:48:47,280 --> 00:48:54,480
do this we could say here's a memory

1106
00:48:49,440 --> 00:48:57,300
arena right and what I want to do is I

1107
00:48:54,480 --> 00:49:00,358
want to take my memory arena and like do

1108
00:48:57,300 --> 00:49:02,130
a bootstrap on it right so it's just

1109
00:49:00,358 --> 00:49:02,608
it's set to zero there's nothing in it

1110
00:49:02,130 --> 00:49:03,749
right now

1111
00:49:02,608 --> 00:49:06,420
it's an

1112
00:49:03,748 --> 00:49:12,348
then what I want to do is I want to get

1113
00:49:06,420 --> 00:49:12,349
my debug state from the boostrap arena

1114
00:49:16,309 --> 00:49:20,849
right so now I have allocated some

1115
00:49:19,528 --> 00:49:22,768
memory because the memory reader will

1116
00:49:20,849 --> 00:49:25,019
allocate a block of memory it'll give me

1117
00:49:22,768 --> 00:49:26,729
back my debug state right then what I'm

1118
00:49:25,018 --> 00:49:31,439
gonna do we just say hey guess what guys

1119
00:49:26,730 --> 00:49:38,849
that debug state you know that's

1120
00:49:31,440 --> 00:49:41,999
actually gonna hold the arena so we just

1121
00:49:38,849 --> 00:49:48,900
block copy the values in here into our

1122
00:49:41,998 --> 00:49:50,489
debug a state right and that's it does

1123
00:49:48,900 --> 00:49:53,670
that make sense I know it's a little

1124
00:49:50,489 --> 00:49:56,998
tricky but it's very very simple at it's

1125
00:49:53,670 --> 00:49:59,490
at its most basic right

1126
00:49:56,998 --> 00:50:04,379
oops I gotta tell it what we're actually

1127
00:49:59,489 --> 00:50:06,508
allocating there you go right and so now

1128
00:50:04,380 --> 00:50:07,950
hopefully we can you know I probably got

1129
00:50:06,509 --> 00:50:11,460
some bugs in here so we're gonna have to

1130
00:50:07,949 --> 00:50:15,838
do some stuff but hopefully we can go in

1131
00:50:11,460 --> 00:50:20,009
and actually see sort of that one piece

1132
00:50:15,838 --> 00:50:31,288
of it work let's go ahead and switch to

1133
00:50:20,009 --> 00:50:33,900
debug yeah and okay so we look at memory

1134
00:50:31,289 --> 00:50:35,849
debug say it's not set right so we go in

1135
00:50:33,900 --> 00:50:37,619
here we create one of these bootstrap

1136
00:50:35,849 --> 00:50:44,068
arenas right and the bootstrap arena as

1137
00:50:37,619 --> 00:50:46,289
you can see has nothing in it at all so

1138
00:50:44,068 --> 00:50:48,960
then we say hey I need a debug state

1139
00:50:46,289 --> 00:50:51,720
structure please so we come in here and

1140
00:50:48,960 --> 00:50:53,699
we say all right well give us one of

1141
00:50:51,719 --> 00:50:55,018
those how big does it need to be you

1142
00:50:53,699 --> 00:50:57,719
know that's how big it is it's pretty

1143
00:50:55,018 --> 00:50:59,368
big it's pretty beefy we take a look at

1144
00:50:57,719 --> 00:51:03,209
what the minimum block size is and we

1145
00:50:59,369 --> 00:51:05,160
find that the minimum block size hasn't

1146
00:51:03,210 --> 00:51:07,920
been set so then we set it to one

1147
00:51:05,159 --> 00:51:10,230
megabyte right then we say okay we

1148
00:51:07,920 --> 00:51:12,180
wanted that much memory here's the

1149
00:51:10,230 --> 00:51:13,469
minimum size mm size is bigger so we end

1150
00:51:12,179 --> 00:51:15,868
up with a block size that's that's the

1151
00:51:13,469 --> 00:51:17,099
minimum block size we try to allocate it

1152
00:51:15,869 --> 00:51:18,690
we come under the platform

1153
00:51:17,099 --> 00:51:20,969
layer it calls virtual Alec with that

1154
00:51:18,690 --> 00:51:23,130
size now we've got a pointer to that

1155
00:51:20,969 --> 00:51:25,169
much and that's how much the size is

1156
00:51:23,130 --> 00:51:27,960
used right it's all good we then do the

1157
00:51:25,170 --> 00:51:30,030
alignment we zero out the block of

1158
00:51:27,960 --> 00:51:30,420
memory that we allocated and now we're

1159
00:51:30,030 --> 00:51:34,400
good to go

1160
00:51:30,420 --> 00:51:37,380
and now we have our debug state right

1161
00:51:34,400 --> 00:51:39,180
but our debug state has a debug arena

1162
00:51:37,380 --> 00:51:41,760
that shows that it has nothing in it

1163
00:51:39,179 --> 00:51:43,769
which is not correct we want to use that

1164
00:51:41,760 --> 00:51:46,230
part that we just started with so we

1165
00:51:43,769 --> 00:51:48,599
copy the memory in and now that debug

1166
00:51:46,230 --> 00:51:51,570
arena is actually the bootstrap arena

1167
00:51:48,599 --> 00:51:54,509
and from now on everything else goes

1168
00:51:51,570 --> 00:51:56,580
just fine now at this point what I'm

1169
00:51:54,510 --> 00:51:57,960
realizing is all of this stuff that's

1170
00:51:56,579 --> 00:51:59,670
initialize to zero is a complete waste

1171
00:51:57,960 --> 00:52:01,230
of everyone's time because I was

1172
00:51:59,670 --> 00:52:02,639
initializing the whole debug state to

1173
00:52:01,230 --> 00:52:04,500
zero because I kind of wanted that to be

1174
00:52:02,639 --> 00:52:06,059
a zero inertia last thing so I have no

1175
00:52:04,500 --> 00:52:09,000
idea why any of this stuff is set to

1176
00:52:06,059 --> 00:52:11,039
anything other than things that are non

1177
00:52:09,000 --> 00:52:13,280
zero right so really that's all that we

1178
00:52:11,039 --> 00:52:15,599
would set this does not have to be set

1179
00:52:13,280 --> 00:52:17,190
none of this stuff has to really be set

1180
00:52:15,599 --> 00:52:20,279
I also don't know why any of this stuff

1181
00:52:17,190 --> 00:52:22,679
is even here because I don't even know

1182
00:52:20,280 --> 00:52:24,000
what it is I guess that was just some

1183
00:52:22,679 --> 00:52:26,879
test code that's still in there for no

1184
00:52:24,000 --> 00:52:28,619
reason whatsoever similarly we don't

1185
00:52:26,880 --> 00:52:31,230
need to set things to false because

1186
00:52:28,619 --> 00:52:33,719
false is the default and so there we go

1187
00:52:31,230 --> 00:52:38,340
so that's actually our new startup code

1188
00:52:33,719 --> 00:52:44,909
right ok so sorry back to the

1189
00:52:38,340 --> 00:52:46,800
walkthrough so here we are right so now

1190
00:52:44,909 --> 00:52:48,539
we've got our debug state and it has its

1191
00:52:46,800 --> 00:52:50,789
own arena like we wanted and the arena

1192
00:52:48,539 --> 00:52:53,340
is getting used we return it back and

1193
00:52:50,789 --> 00:52:56,849
now we have inside our memory pointer

1194
00:52:53,340 --> 00:52:59,789
right we have the debug state should

1195
00:52:56,849 --> 00:53:02,069
actually be set there it is and it's got

1196
00:52:59,789 --> 00:53:04,019
of course the arena that we saved right

1197
00:53:02,070 --> 00:53:05,490
in here and we also are set to

1198
00:53:04,019 --> 00:53:08,159
initialize although initialize isn't

1199
00:53:05,489 --> 00:53:09,629
actually needed anymore so what I would

1200
00:53:08,159 --> 00:53:11,309
like to do is just get rid of it before

1201
00:53:09,630 --> 00:53:12,900
we forget because it's I don't want

1202
00:53:11,309 --> 00:53:14,400
people to think that that's doing

1203
00:53:12,900 --> 00:53:21,329
something when it's not doing anything

1204
00:53:14,400 --> 00:53:23,010
right okay so let's do p-- s-- that's

1205
00:53:21,329 --> 00:53:24,329
not what I wanted I wanted to step

1206
00:53:23,010 --> 00:53:29,010
through that let's try that one more

1207
00:53:24,329 --> 00:53:30,719
time ok so then after debug state is set

1208
00:53:29,010 --> 00:53:33,960
we now have everything doing

1209
00:53:30,719 --> 00:53:35,459
it's its thing like we expect and it

1210
00:53:33,960 --> 00:53:37,470
looks like we get hung up in here

1211
00:53:35,460 --> 00:53:38,849
somewhere I'm not really sure where so

1212
00:53:37,469 --> 00:53:43,879
let's take a look it's probably just a

1213
00:53:38,849 --> 00:53:43,880
bug that I have inadvertently introduced

1214
00:53:48,469 --> 00:53:51,889
doing who knows what

1215
00:54:00,130 --> 00:54:04,230
what is our hash index okay

1216
00:54:14,739 --> 00:54:18,329
while not results

1217
00:54:21,920 --> 00:54:32,780
aha so this is actually this was our

1218
00:54:30,889 --> 00:54:35,389
code to make sure we only used a certain

1219
00:54:32,780 --> 00:54:40,790
amount of space for the debug arena

1220
00:54:35,389 --> 00:54:44,059
stuff and we don't really need that

1221
00:54:40,789 --> 00:54:45,590
anymore right so this is just gonna loop

1222
00:54:44,059 --> 00:54:47,210
forever because it's like well I don't

1223
00:54:45,590 --> 00:54:48,470
have any room I have zero room so

1224
00:54:47,210 --> 00:54:51,530
there's no way I can ever store any

1225
00:54:48,469 --> 00:54:52,459
debug events so we really don't really

1226
00:54:51,530 --> 00:54:56,420
need that anymore

1227
00:54:52,460 --> 00:54:57,800
it's super not necessary but I don't

1228
00:54:56,420 --> 00:55:00,139
know that doesn't necessarily mean we

1229
00:54:57,800 --> 00:55:01,730
want to do it that way right we could

1230
00:55:00,139 --> 00:55:05,719
still say that we want the per frame

1231
00:55:01,730 --> 00:55:07,760
arena to be capped at some level right I

1232
00:55:05,719 --> 00:55:09,379
mean I don't know we could just say that

1233
00:55:07,760 --> 00:55:11,060
we don't want to take our betrayal route

1234
00:55:09,380 --> 00:55:12,950
Matt's room but if we did want to take

1235
00:55:11,059 --> 00:55:14,299
arbitrary amounts of room I just want to

1236
00:55:12,949 --> 00:55:16,939
make sure like let's say that we just

1237
00:55:14,300 --> 00:55:19,460
always did this push struct here right

1238
00:55:16,940 --> 00:55:21,619
and didn't do the freeing I'm wondering

1239
00:55:19,460 --> 00:55:23,030
if free oldest frame just filled this

1240
00:55:21,619 --> 00:55:31,369
frame get called in the course of

1241
00:55:23,030 --> 00:55:33,320
business so it does so these will get

1242
00:55:31,369 --> 00:55:34,699
cleaned up naturally so what I'm

1243
00:55:33,320 --> 00:55:36,980
thinking here is what we could do is

1244
00:55:34,699 --> 00:55:39,469
just say no let's not do that anymore

1245
00:55:36,980 --> 00:55:41,840
instead of like reclamation here and

1246
00:55:39,469 --> 00:55:44,359
doing the first free stored event thing

1247
00:55:41,840 --> 00:55:48,110
right what we could do instead is say

1248
00:55:44,360 --> 00:55:51,980
like alright take this code and just

1249
00:55:48,110 --> 00:55:54,460
assume that you've never free if you if

1250
00:55:51,980 --> 00:56:00,519
you want memory you can just have it

1251
00:55:54,460 --> 00:56:00,519
right oops

1252
00:56:02,550 --> 00:56:10,800
and then off you go

1253
00:56:05,400 --> 00:56:12,720
so yeah now that arena is just a

1254
00:56:10,800 --> 00:56:14,130
dynamically growing arena right so you

1255
00:56:12,719 --> 00:56:17,129
notice we've taken something that

1256
00:56:14,130 --> 00:56:18,780
previously forced us to specify how much

1257
00:56:17,130 --> 00:56:21,059
memory to take and replace it with

1258
00:56:18,780 --> 00:56:22,950
something that we don't have to specify

1259
00:56:21,059 --> 00:56:25,019
how much memory to take and it just kind

1260
00:56:22,949 --> 00:56:26,489
of will grow as necessary and all the

1261
00:56:25,019 --> 00:56:28,440
rest of the code runs exactly the same

1262
00:56:26,489 --> 00:56:30,299
and you can see here that we're still

1263
00:56:28,440 --> 00:56:32,909
stable we're not doing any allocations

1264
00:56:30,300 --> 00:56:34,560
or D allocations for frame right we're

1265
00:56:32,909 --> 00:56:35,819
totally stable because it's only going

1266
00:56:34,559 --> 00:56:39,900
to grow to the size it needs and then

1267
00:56:35,820 --> 00:56:44,070
it's gonna stop right so again pretty

1268
00:56:39,900 --> 00:56:46,079
much all the benefits of the of the

1269
00:56:44,070 --> 00:56:50,180
arena allocation scheme but now if you

1270
00:56:46,079 --> 00:56:52,380
choose instead of forcing yourself to

1271
00:56:50,179 --> 00:56:54,719
specify the boundaries at that

1272
00:56:52,380 --> 00:56:56,010
allocation time you can instead not

1273
00:56:54,719 --> 00:56:57,629
specify them and have it grow as

1274
00:56:56,010 --> 00:56:58,710
necessary and then again you just have

1275
00:56:57,630 --> 00:56:59,970
to be aware of the fact that you are

1276
00:56:58,710 --> 00:57:02,070
rolling the dice now because the

1277
00:56:59,969 --> 00:57:03,929
operating system may eventually run out

1278
00:57:02,070 --> 00:57:05,220
of memory right now that's probably not

1279
00:57:03,929 --> 00:57:06,869
gonna happen these days cuz there's so

1280
00:57:05,219 --> 00:57:08,489
much memory running around but maybe

1281
00:57:06,869 --> 00:57:10,230
think of a different platform think of

1282
00:57:08,489 --> 00:57:12,419
an iPhone or something something where

1283
00:57:10,230 --> 00:57:14,760
the memory might be tighter there you

1284
00:57:12,420 --> 00:57:16,200
know you can't just expect to just keep

1285
00:57:14,760 --> 00:57:19,290
allocating gigabytes of memory and not

1286
00:57:16,199 --> 00:57:22,230
have any consequences of it right so

1287
00:57:19,289 --> 00:57:24,059
again don't want to just go hog-wild

1288
00:57:22,230 --> 00:57:24,960
with it but it's nice to have this other

1289
00:57:24,059 --> 00:57:26,880
tool the toolbox

1290
00:57:24,960 --> 00:57:30,449
are we done yet no we've got more stuff

1291
00:57:26,880 --> 00:57:31,950
to do tomorrow obviously that we have to

1292
00:57:30,449 --> 00:57:32,909
do to work on it so we're gonna have

1293
00:57:31,949 --> 00:57:36,299
some more things to talk about tomorrow

1294
00:57:32,909 --> 00:57:38,219
right now though we're over time by five

1295
00:57:36,300 --> 00:57:40,590
minutes so let's go ahead and go to the

1296
00:57:38,219 --> 00:57:46,099
Q&amp;A anyone who has questions and answers

1297
00:57:40,590 --> 00:57:46,100
please go ahead and give them to me now

1298
00:58:27,329 --> 00:58:34,429
I think in Sabah is starting to be a

1299
00:58:30,510 --> 00:58:34,430
little bit like Microsoft a

1300
00:58:48,219 --> 00:58:52,099
trs-80 if you allocate new block after

1301
00:58:50,539 --> 00:58:53,539
clunk in temporary memory and temporary

1302
00:58:52,099 --> 00:58:55,909
memory is going to restore incorrect

1303
00:58:53,539 --> 00:59:00,440
values isn't it yes so this is why I

1304
00:58:55,909 --> 00:59:04,639
said we're not done yet the begin temp

1305
00:59:00,440 --> 00:59:05,750
end temp has to be implemented using a

1306
00:59:04,639 --> 00:59:07,429
technique that I'll show you tomorrow

1307
00:59:05,750 --> 00:59:08,690
it's it's not particularly difficult to

1308
00:59:07,429 --> 00:59:11,089
implement it's just we have one more

1309
00:59:08,690 --> 00:59:13,670
thing to do there the other thing that

1310
00:59:11,090 --> 00:59:16,220
we haven't done is for loop live code

1311
00:59:13,670 --> 00:59:19,039
editing we need to make those

1312
00:59:16,219 --> 00:59:22,279
allocations work in a predictable

1313
00:59:19,039 --> 00:59:23,929
fashion for saving out so we'll do that

1314
00:59:22,280 --> 00:59:25,250
as well so we got we've got at least two

1315
00:59:23,929 --> 00:59:26,210
more things to do I don't know that

1316
00:59:25,250 --> 00:59:27,920
we'll get to both of them tomorrow

1317
00:59:26,210 --> 00:59:30,230
beginning in temporary will definitely

1318
00:59:27,920 --> 00:59:31,760
do tomorrow but depending on how long it

1319
00:59:30,230 --> 00:59:33,440
is to debug that because although it's

1320
00:59:31,760 --> 00:59:35,210
easy to implement it's easy to

1321
00:59:33,440 --> 00:59:38,150
accidentally get a little thing wrong in

1322
00:59:35,210 --> 00:59:39,740
it sometimes so you know assuming the

1323
00:59:38,150 --> 00:59:43,160
that goes smoothly we'll get we'll start

1324
00:59:39,739 --> 00:59:47,569
on the loop type coding part but it may

1325
00:59:43,159 --> 00:59:52,190
not be we may have to go into Monday to

1326
00:59:47,570 --> 00:59:53,600
finish that part how easy or possible is

1327
00:59:52,190 --> 00:59:55,730
it to transfer code from Java to an

1328
00:59:53,599 --> 00:59:57,949
engine that does graphics well and if it

1329
00:59:55,730 --> 01:00:03,139
is possible or easy to transfer which

1330
00:59:57,949 --> 01:00:06,469
one would you recommend I'll be honest I

1331
01:00:03,139 --> 01:00:09,170
don't I don't really program in Java at

1332
01:00:06,469 --> 01:00:10,819
all and I I mean not to be too flippant

1333
01:00:09,170 --> 01:00:13,309
about it I don't really care about Java

1334
01:00:10,820 --> 01:00:15,769
at all so I haven't ever read up on

1335
01:00:13,309 --> 01:00:20,809
anything like that so I have no idea

1336
01:00:15,769 --> 01:00:23,869
absolutely no idea I I would say that

1337
01:00:20,809 --> 01:00:26,150
you know if you're looking for a Java

1338
01:00:23,869 --> 01:00:27,680
ish language meaning something that has

1339
01:00:26,150 --> 01:00:30,650
a lot of like garbage collection and

1340
01:00:27,679 --> 01:00:32,480
bytecode e things to it you know unity

1341
01:00:30,650 --> 01:00:33,108
is an engine that's programmed in

1342
01:00:32,480 --> 01:00:36,590
c-sharp

1343
01:00:33,108 --> 01:00:37,489
for example and c-sharp you know if you

1344
01:00:36,590 --> 01:00:40,910
program in Java

1345
01:00:37,489 --> 01:00:44,000
I feel like c-sharp is not a huge you

1346
01:00:40,909 --> 01:00:47,509
know incredible leap to try to make

1347
01:00:44,000 --> 01:00:49,400
right so I would say you know if if that

1348
01:00:47,510 --> 01:00:52,700
was your goal I would I would probably

1349
01:00:49,400 --> 01:00:55,160
not do Java Java just Java doesn't seem

1350
01:00:52,699 --> 01:00:57,710
like a particularly good language to use

1351
01:00:55,159 --> 01:00:59,960
for games nowadays because I don't feel

1352
01:00:57,710 --> 01:01:01,150
like a lot of the platforms that you

1353
01:00:59,960 --> 01:01:03,699
have to choose from

1354
01:01:01,150 --> 01:01:06,009
have embraced Java at all whereas like I

1355
01:01:03,699 --> 01:01:08,558
said c-sharp is like very prominent now

1356
01:01:06,009 --> 01:01:12,909
in games because of the fact that unity

1357
01:01:08,559 --> 01:01:16,390
chose to use it and so now you have the

1358
01:01:12,909 --> 01:01:18,969
option of tying into an engine set there

1359
01:01:16,389 --> 01:01:21,639
and a whole suite of middleware designed

1360
01:01:18,969 --> 01:01:25,419
to help you if you go to c-sharp route

1361
01:01:21,639 --> 01:01:26,739
if you go the Java route I don't like I

1362
01:01:25,420 --> 01:01:31,059
can't think of a single professional

1363
01:01:26,739 --> 01:01:32,739
like the only game I know of even really

1364
01:01:31,059 --> 01:01:34,960
that ships in Java that anyone ever

1365
01:01:32,739 --> 01:01:36,909
cared about was minecraft and that

1366
01:01:34,960 --> 01:01:40,358
didn't use a pre licensed engine the

1367
01:01:36,909 --> 01:01:42,338
engine is itself is written in Java and

1368
01:01:40,358 --> 01:01:46,630
even you know and minecraft isn't a

1369
01:01:42,338 --> 01:01:47,588
high-end graphics game right it's it's

1370
01:01:46,630 --> 01:01:50,528
pretty low-end

1371
01:01:47,588 --> 01:01:54,670
so you know I don't I really just don't

1372
01:01:50,528 --> 01:01:56,018
know of any kind of well you say does

1373
01:01:54,670 --> 01:01:58,329
grab as well I don't know of any

1374
01:01:56,018 --> 01:02:00,129
high-end graphic stuff that you can

1375
01:01:58,329 --> 01:02:02,440
easily tie to Java they probably exist

1376
01:02:00,130 --> 01:02:04,749
somewhere but I don't know so again I

1377
01:02:02,440 --> 01:02:08,349
would say not my area of expertise I

1378
01:02:04,748 --> 01:02:10,179
don't do that kind of programming I only

1379
01:02:08,349 --> 01:02:13,568
do the kind of low level gaming sorts of

1380
01:02:10,179 --> 01:02:16,389
code so I don't have a really strong

1381
01:02:13,568 --> 01:02:20,199
opinion all I can say is that if you

1382
01:02:16,389 --> 01:02:21,639
were you you know if you're just kind of

1383
01:02:20,199 --> 01:02:24,548
taking a bird's-eye view of it it looks

1384
01:02:21,639 --> 01:02:26,348
to me like if I was gonna pick one of

1385
01:02:24,548 --> 01:02:28,659
those higher-level languages it really

1386
01:02:26,349 --> 01:02:31,329
wouldn't be Java because you don't have

1387
01:02:28,659 --> 01:02:34,449
you're not gonna get much support there

1388
01:02:31,329 --> 01:02:38,079
right I'd go see sharp may Muni also or

1389
01:02:34,449 --> 01:02:40,929
try blueprint you know right is unreal

1390
01:02:38,079 --> 01:02:43,359
one there aren't that many game engines

1391
01:02:40,929 --> 01:02:48,848
out there right you know there's

1392
01:02:43,358 --> 01:02:52,598
lumberyard there's unity there's Unreal

1393
01:02:48,849 --> 01:02:54,369
there's game maker game maker isn't a

1394
01:02:52,599 --> 01:02:56,318
does graphics well kind of a thing

1395
01:02:54,369 --> 01:02:58,088
though right game makers made more made

1396
01:02:56,318 --> 01:02:59,739
for older style graphics so I don't know

1397
01:02:58,088 --> 01:03:01,920
that you would include that one but

1398
01:02:59,739 --> 01:03:05,889
there aren't that many high-end

1399
01:03:01,920 --> 01:03:07,749
rendering engine out there to pick from

1400
01:03:05,889 --> 01:03:09,808
and none of them use Java as far as I

1401
01:03:07,748 --> 01:03:09,808
know

1402
01:03:12,369 --> 01:03:15,800
would it be a good idea to store a point

1403
01:03:14,568 --> 01:03:17,750
to the allocator function inside the

1404
01:03:15,800 --> 01:03:20,599
arena struct instead of using a global

1405
01:03:17,750 --> 01:03:22,338
it is if you have a slightly different

1406
01:03:20,599 --> 01:03:24,500
architecture than we do on handmade Hiro

1407
01:03:22,338 --> 01:03:26,869
on handmade Hiro we do not have

1408
01:03:24,500 --> 01:03:29,510
different memory pools so there isn't

1409
01:03:26,869 --> 01:03:32,809
there's only ever going to be probably

1410
01:03:29,510 --> 01:03:35,540
one alligator right but if you are in a

1411
01:03:32,809 --> 01:03:37,130
heterogeneous environment where you may

1412
01:03:35,539 --> 01:03:39,440
be getting memory from different sources

1413
01:03:37,130 --> 01:03:42,400
then it makes a lot of sense to store

1414
01:03:39,440 --> 01:03:44,838
the alligator function inside the arena

1415
01:03:42,400 --> 01:03:46,160
but on handmade Hiro it probably

1416
01:03:44,838 --> 01:03:47,690
wouldn't be necessary because we

1417
01:03:46,159 --> 01:03:51,739
probably would never recall anything

1418
01:03:47,690 --> 01:03:55,400
other than the global now if that again

1419
01:03:51,739 --> 01:04:00,289
I don't I try not to do things

1420
01:03:55,400 --> 01:04:01,940
prematurely so even if I sort of

1421
01:04:00,289 --> 01:04:03,619
suspected we might do that I don't think

1422
01:04:01,940 --> 01:04:05,150
we will but even if I suspected we might

1423
01:04:03,619 --> 01:04:07,490
do that I probably wouldn't do it now I

1424
01:04:05,150 --> 01:04:09,650
would wait until we actually were

1425
01:04:07,489 --> 01:04:12,108
allocating from multiple pools just so I

1426
01:04:09,650 --> 01:04:16,160
could see what the most proper way to

1427
01:04:12,108 --> 01:04:18,650
integrate that was at that point but

1428
01:04:16,159 --> 01:04:20,029
like I said when you say would it be a

1429
01:04:18,650 --> 01:04:21,289
good idea I would say it's it's

1430
01:04:20,030 --> 01:04:22,970
definitely good idea sometimes I don't

1431
01:04:21,289 --> 01:04:25,519
think it's good idea for him a hero but

1432
01:04:22,969 --> 01:04:28,608
it's definitely a good idea in a general

1433
01:04:25,519 --> 01:04:31,579
sense of it is a technique you should

1434
01:04:28,608 --> 01:04:32,929
consider using if you have the need to

1435
01:04:31,579 --> 01:04:37,160
have different arenas at runtime

1436
01:04:32,929 --> 01:04:38,899
allocate from different sources how do

1437
01:04:37,159 --> 01:04:40,670
we free old memory blocks if the base

1438
01:04:38,900 --> 01:04:43,190
pointer always points to the newest

1439
01:04:40,670 --> 01:04:44,869
allocated block again you can have to

1440
01:04:43,190 --> 01:04:48,470
wait for tomorrow on that it's exactly

1441
01:04:44,869 --> 01:04:51,048
the same code as we need for the begin

1442
01:04:48,469 --> 01:04:54,769
and end temporary blocks if that makes

1443
01:04:51,048 --> 01:04:56,568
sense and so we just have to we need to

1444
01:04:54,769 --> 01:04:58,219
do that implementation and so as soon as

1445
01:04:56,568 --> 01:05:02,690
we go do that implementation then you

1446
01:04:58,219 --> 01:05:04,848
will see perhaps I'm missing something

1447
01:05:02,690 --> 01:05:06,889
but how to do you go back to previously

1448
01:05:04,849 --> 01:05:09,260
allocated memory blocks like for freeing

1449
01:05:06,889 --> 01:05:11,048
memory and saving it out and relocating

1450
01:05:09,260 --> 01:05:14,660
it again we'll cover all that tomorrow

1451
01:05:11,048 --> 01:05:17,630
so so don't worry that will be very

1452
01:05:14,659 --> 01:05:20,000
clear it's it's not difficult it just

1453
01:05:17,630 --> 01:05:21,769
requires us to do a little bit more work

1454
01:05:20,000 --> 01:05:23,150
in that if statement that I was talking

1455
01:05:21,769 --> 01:05:24,559
about where we don't care how long it

1456
01:05:23,150 --> 01:05:24,889
takes we just need to put a little bit

1457
01:05:24,559 --> 01:05:26,870
more

1458
01:05:24,889 --> 01:05:28,400
work in there and then once you put a

1459
01:05:26,869 --> 01:05:30,109
little bit we're working there we will

1460
01:05:28,400 --> 01:05:35,590
have the information that we need in

1461
01:05:30,110 --> 01:05:35,590
order to rewind our arenas

1462
01:05:48,409 --> 01:05:58,278
yeah yeah ma'am no ma'am ma'am ma'am

1463
01:05:54,599 --> 01:06:07,109
ma'am ma'am yeah meow meow meow yeah

1464
01:05:58,278 --> 01:06:10,559
yeah I'm out yeah I'm at my up now all

1465
01:06:07,108 --> 01:06:16,469
right we are just about out of time and

1466
01:06:10,559 --> 01:06:24,150
I don't see any more queue Cullen's so I

1467
01:06:16,469 --> 01:06:30,868
am going to wipe it down let's close it

1468
01:06:24,150 --> 01:06:32,068
up close it up and close it up all right

1469
01:06:30,869 --> 01:06:33,269
thank you everyone for joining me for

1470
01:06:32,068 --> 01:06:36,858
lips on a handmade hero it's been a

1471
01:06:33,268 --> 01:06:39,689
pleasure coding with you as it always is

1472
01:06:36,858 --> 01:06:41,068
if you would like to follow along with

1473
01:06:39,690 --> 01:06:43,679
series at home you can always pre-order

1474
01:06:41,068 --> 01:06:45,949
the game on hammaker org and I upload

1475
01:06:43,679 --> 01:06:48,478
the source code every night for your

1476
01:06:45,949 --> 01:06:49,528
experimenting pleasure we also have a

1477
01:06:48,478 --> 01:06:51,149
forum site you can go to if you want to

1478
01:06:49,528 --> 01:06:53,039
ask questions a patreon page you go to

1479
01:06:51,150 --> 01:06:55,920
transport our video series a schedule

1480
01:06:53,039 --> 01:06:58,680
bot you can use to find out when we are

1481
01:06:55,920 --> 01:07:02,309
live in an episode guide maintained by

1482
01:06:58,679 --> 01:07:03,868
the fabulous midlow who keeps it up to

1483
01:07:02,309 --> 01:07:05,369
date with time coded markers and

1484
01:07:03,869 --> 01:07:07,920
everything so if you want to catch up on

1485
01:07:05,369 --> 01:07:10,619
old episodes stuff that we covered in

1486
01:07:07,920 --> 01:07:13,048
previous episodes of handmade hero that

1487
01:07:10,619 --> 01:07:14,729
is the place to do it that is it for

1488
01:07:13,048 --> 01:07:16,139
today I will be back tomorrow for the

1489
01:07:14,728 --> 01:07:18,960
last stream of the week

1490
01:07:16,139 --> 01:07:21,058
tomorrow is a 5 p.m. stream again so

1491
01:07:18,960 --> 01:07:23,009
again keeping with the the alternating

1492
01:07:21,059 --> 01:07:25,769
time slots for people who are in

1493
01:07:23,009 --> 01:07:28,380
different time zones hope to see you all

1494
01:07:25,768 --> 01:07:30,058
here for that it's just gonna be us

1495
01:07:28,380 --> 01:07:31,588
finishing up our memory arena's like I

1496
01:07:30,059 --> 01:07:33,719
said might take us two more days my

1497
01:07:31,588 --> 01:07:35,940
tickets one depends on how quickly we go

1498
01:07:33,719 --> 01:07:38,639
tomorrow but basically we've already did

1499
01:07:35,940 --> 01:07:40,318
you've already seen the idea very very

1500
01:07:38,639 --> 01:07:43,278
simple and so now we just have to

1501
01:07:40,318 --> 01:07:46,849
implement the ability to rewind our

1502
01:07:43,278 --> 01:07:49,588
allocations and we will be good to go

1503
01:07:46,849 --> 01:07:52,048
that's it for today thank you for

1504
01:07:49,588 --> 01:07:53,699
joining me I will see you guys on the

1505
01:07:52,048 --> 01:07:56,748
Internet and then hopefully tomorrow 5

1506
01:07:53,699 --> 01:07:56,748
p.m. take it easy everyone

