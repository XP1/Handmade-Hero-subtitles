1
00:00:02,060 --> 00:00:06,240
hello everyone and welcome to handmade

2
00:00:04,500 --> 00:00:09,750
hero the show we code a complete game

3
00:00:06,240 --> 00:00:11,690
live on stream we are going to try today

4
00:00:09,750 --> 00:00:14,250
to actually do some graphics debugging

5
00:00:11,689 --> 00:00:16,410
yesterday we wanted to do some graphics

6
00:00:14,250 --> 00:00:20,698
debugging but mostly what we did was we

7
00:00:16,410 --> 00:00:23,629
worked around two very classic villains

8
00:00:20,699 --> 00:00:27,420
in the development world windows and

9
00:00:23,629 --> 00:00:29,099
graphics drivers so one of the things

10
00:00:27,420 --> 00:00:30,240
that's annoying about programming

11
00:00:29,099 --> 00:00:34,859
graphics one of the things that I think

12
00:00:30,239 --> 00:00:36,299
is kind of the worst sort of part of

13
00:00:34,859 --> 00:00:40,170
graphics programming that's happened

14
00:00:36,299 --> 00:00:44,009
over the past you know 20 years or so in

15
00:00:40,170 --> 00:00:46,559
its evolution is that the actual chips

16
00:00:44,009 --> 00:00:48,869
that run the graphics now are not really

17
00:00:46,558 --> 00:00:50,820
designed with debug ability in mind so

18
00:00:48,869 --> 00:00:54,659
you know one of the things that you have

19
00:00:50,820 --> 00:00:57,359
to appreciate is an Intel chip you know

20
00:00:54,659 --> 00:01:01,619
an X 64 or something like this actually

21
00:00:57,359 --> 00:01:04,680
has a tremendous amount of engineering

22
00:01:01,619 --> 00:01:08,310
in it specifically for you know ease of

23
00:01:04,680 --> 00:01:10,920
use basically by developers and by

24
00:01:08,310 --> 00:01:14,368
system administrators I mean it has all

25
00:01:10,920 --> 00:01:17,430
sorts of things like the ability to have

26
00:01:14,368 --> 00:01:20,099
separated rings of access the ability to

27
00:01:17,430 --> 00:01:23,490
have threads that switch in and out the

28
00:01:20,099 --> 00:01:25,379
ability to put in hardware interrupts

29
00:01:23,489 --> 00:01:29,509
that can you know cause things to happen

30
00:01:25,379 --> 00:01:32,489
and all of these things are designed

31
00:01:29,509 --> 00:01:35,009
quite well to allow you to have a good

32
00:01:32,489 --> 00:01:37,319
debugging experience and a good virtual

33
00:01:35,009 --> 00:01:39,750
machine and process swapping experience

34
00:01:37,319 --> 00:01:43,129
such that you almost never have any

35
00:01:39,750 --> 00:01:47,938
problems with multitasking or debugging

36
00:01:43,129 --> 00:01:49,379
that are due to a chip right it just

37
00:01:47,938 --> 00:01:53,578
sort of works and that's pretty great

38
00:01:49,379 --> 00:01:57,060
actually GPUs on the other hand don't

39
00:01:53,578 --> 00:01:59,218
have anything like that they are not

40
00:01:57,060 --> 00:02:00,629
really designed for consistent use in

41
00:01:59,218 --> 00:02:03,718
that way they're getting a little bit

42
00:02:00,629 --> 00:02:06,118
better but they don't really have a

43
00:02:03,718 --> 00:02:08,219
coherent complete standardized story on

44
00:02:06,118 --> 00:02:12,449
things like virtual memory and hardware

45
00:02:08,219 --> 00:02:13,560
debugging and ring access and all these

46
00:02:12,449 --> 00:02:18,269
other sorts of things

47
00:02:13,560 --> 00:02:19,620
they are trying to do that slowly and so

48
00:02:18,270 --> 00:02:21,599
hopefully you know someday we'll get

49
00:02:19,620 --> 00:02:23,700
there but the reality is you know if

50
00:02:21,598 --> 00:02:27,539
you've been programming with GPUs over

51
00:02:23,699 --> 00:02:29,068
the past ten years or so I you typically

52
00:02:27,539 --> 00:02:32,039
have an experience like we had yesterday

53
00:02:29,068 --> 00:02:35,598
where it's just extremely laborious to

54
00:02:32,039 --> 00:02:39,090
even get basic rudimentary debugging

55
00:02:35,598 --> 00:02:41,549
functionality working not because

56
00:02:39,090 --> 00:02:42,870
there's some kind of extraordinary thing

57
00:02:41,550 --> 00:02:44,400
that you're trying to do with respect

58
00:02:42,870 --> 00:02:47,250
that debugging but literally just like

59
00:02:44,400 --> 00:02:49,980
even just stepping through a shader to

60
00:02:47,250 --> 00:02:52,979
see what it does is kind of considered a

61
00:02:49,979 --> 00:02:55,429
you know Herculean task so that if it

62
00:02:52,979 --> 00:02:57,659
actually works you're you know

63
00:02:55,430 --> 00:02:59,909
flabbergasted that it didn't crash and

64
00:02:57,659 --> 00:03:01,469
that it actually ran and didn't do

65
00:02:59,909 --> 00:03:03,689
something like render doc did yesterday

66
00:03:01,469 --> 00:03:07,680
where it flames out and can't like do

67
00:03:03,689 --> 00:03:10,500
anything at all so we had that problem

68
00:03:07,680 --> 00:03:13,170
and we're using insight now which sort

69
00:03:10,500 --> 00:03:16,259
of kind of works it's extremely slow and

70
00:03:13,169 --> 00:03:18,328
error-prone but it sort of works and

71
00:03:16,259 --> 00:03:20,039
then we also ran to a secondary problem

72
00:03:18,329 --> 00:03:21,570
when we were trying to use insight which

73
00:03:20,039 --> 00:03:22,919
we had not encountered before because

74
00:03:21,569 --> 00:03:26,549
this is our first time developing on

75
00:03:22,919 --> 00:03:29,129
Windows 10 and apparently we or you know

76
00:03:26,549 --> 00:03:32,700
we hit what is I guess a Windows 10 bug

77
00:03:29,129 --> 00:03:34,789
that is absolutely abhorrent they send o

78
00:03:32,699 --> 00:03:38,639
X 738 to your window procedure

79
00:03:34,789 --> 00:03:41,519
infinitely if you're not careful this is

80
00:03:38,639 --> 00:03:43,169
a kind of a blatantly illegal thing to

81
00:03:41,519 --> 00:03:45,090
be doing as far as the API is concerned

82
00:03:43,169 --> 00:03:48,199
that's a WM user Raines message which

83
00:03:45,090 --> 00:03:50,639
should never be sent to anyone's window

84
00:03:48,199 --> 00:03:54,599
it's only for people to send to their

85
00:03:50,639 --> 00:03:56,579
own windows basically so we had to debug

86
00:03:54,599 --> 00:03:57,750
that yesterday which was also a whole

87
00:03:56,579 --> 00:03:59,189
heap of fun because you're not expecting

88
00:03:57,750 --> 00:04:04,349
that to happen and that's apparently

89
00:03:59,189 --> 00:04:07,379
only on Windows 10 so that's great but

90
00:04:04,349 --> 00:04:10,590
now in theory we may finally be able to

91
00:04:07,379 --> 00:04:12,000
do some actual development today and so

92
00:04:10,590 --> 00:04:13,889
that's what we're gonna try and do now

93
00:04:12,000 --> 00:04:17,728
remember all we really want to do here

94
00:04:13,889 --> 00:04:21,509
is see if we can take a look at what's

95
00:04:17,728 --> 00:04:26,459
being done in the graphics driver for

96
00:04:21,509 --> 00:04:27,300
our light rendering code and that's you

97
00:04:26,459 --> 00:04:29,549
know that

98
00:04:27,300 --> 00:04:30,810
really the the long and short of it you

99
00:04:29,550 --> 00:04:33,000
know like there's there's no other

100
00:04:30,810 --> 00:04:34,978
fanciness that's it's trying to happen

101
00:04:33,000 --> 00:04:38,418
here we just want to take a look and see

102
00:04:34,978 --> 00:04:40,589
if we can understand anything about the

103
00:04:38,418 --> 00:04:45,719
the textures we're submitting and what's

104
00:04:40,589 --> 00:04:47,848
going on so I'm gonna try to avoid using

105
00:04:45,720 --> 00:04:49,680
the graphics to bugger still like kind

106
00:04:47,848 --> 00:04:52,319
of like we used to be debugging it where

107
00:04:49,680 --> 00:04:55,168
we didn't really use the graphs to debug

108
00:04:52,319 --> 00:04:57,030
err very much the reason I'm gonna do

109
00:04:55,168 --> 00:04:59,008
that is because you saw how Genki it was

110
00:04:57,029 --> 00:05:01,679
yesterday so we'll use it when we need

111
00:04:59,009 --> 00:05:03,180
it when we can't figure out another way

112
00:05:01,680 --> 00:05:08,009
to test it but we're gonna try and use

113
00:05:03,180 --> 00:05:10,918
it lightly so yeah I mean I don't know

114
00:05:08,009 --> 00:05:14,250
what to say other than this is this is

115
00:05:10,918 --> 00:05:18,120
why GPU programming sucks and it would

116
00:05:14,250 --> 00:05:20,668
be nice if someday we add a stable GPU

117
00:05:18,120 --> 00:05:23,009
experience with development just like we

118
00:05:20,668 --> 00:05:25,709
do on a CPU and sometimes we take the

119
00:05:23,009 --> 00:05:27,870
cpu development experience for granted

120
00:05:25,709 --> 00:05:30,209
and probably we shouldn't because just a

121
00:05:27,870 --> 00:05:34,430
quick attempt to do program debugging on

122
00:05:30,209 --> 00:05:38,579
a GPU should remind you just how bad

123
00:05:34,430 --> 00:05:40,978
GPUs are at this and just how good CPUs

124
00:05:38,579 --> 00:05:44,218
consistently are with no prodding you

125
00:05:40,978 --> 00:05:46,949
know like nobody has to beg Intel or AMD

126
00:05:44,218 --> 00:05:50,968
to ship a chip that you can debug

127
00:05:46,949 --> 00:05:52,740
cleanly alright so for starters I'm

128
00:05:50,968 --> 00:05:55,500
tired of this weird like developer news

129
00:05:52,740 --> 00:06:02,000
page nonsense coming up and I believe

130
00:05:55,500 --> 00:06:06,629
you can switch that in here so I'm gonna

131
00:06:02,000 --> 00:06:08,610
yeah I like we like we ever want to

132
00:06:06,629 --> 00:06:10,349
download content from Microsoft while

133
00:06:08,610 --> 00:06:13,020
we're developing that's an interesting

134
00:06:10,348 --> 00:06:15,449
idea so I'm gonna go ahead and verify

135
00:06:13,019 --> 00:06:17,878
that we can just launch our program

136
00:06:15,449 --> 00:06:22,228
directly when we open up visual studio

137
00:06:17,879 --> 00:06:25,319
from now on let's eat there it is so

138
00:06:22,228 --> 00:06:29,399
that's much better so where are we left

139
00:06:25,319 --> 00:06:32,789
off we fixed that Oh x7 3/8 bug that

140
00:06:29,399 --> 00:06:34,258
Windows 10 had introduced technically

141
00:06:32,788 --> 00:06:38,038
what we did is we fixed a bug in Windows

142
00:06:34,259 --> 00:06:40,680
10 in our code we did not actually have

143
00:06:38,038 --> 00:06:45,589
a bug ourselves but there

144
00:06:40,680 --> 00:06:48,449
you go so when I hit the f1 key this is

145
00:06:45,589 --> 00:06:49,859
recomputing a lighting solution and I

146
00:06:48,449 --> 00:06:53,639
believe this lighting solution is

147
00:06:49,860 --> 00:06:54,689
actually somewhat correct it's not a

148
00:06:53,639 --> 00:06:57,060
great letting solution but it is

149
00:06:54,689 --> 00:06:59,459
actually like a real life solution that

150
00:06:57,060 --> 00:07:03,810
we computed and it's not all black and

151
00:06:59,459 --> 00:07:06,508
we can verify that by re by turning on

152
00:07:03,810 --> 00:07:08,728
the old color using the colors that

153
00:07:06,509 --> 00:07:12,000
don't come from the lighting solution so

154
00:07:08,728 --> 00:07:13,589
in here where we do our lighting

155
00:07:12,000 --> 00:07:17,069
computation we use this while loop to

156
00:07:13,589 --> 00:07:19,679
look up the lights and so on what we can

157
00:07:17,069 --> 00:07:22,050
do instead of over writing this this use

158
00:07:19,680 --> 00:07:24,959
light stuff here I believe if we just

159
00:07:22,050 --> 00:07:27,870
tell it not to over write we would get

160
00:07:24,959 --> 00:07:33,000
the old color that was being sent down

161
00:07:27,870 --> 00:07:35,459
directly from the engine and so yeah you

162
00:07:33,000 --> 00:07:37,978
can kind of see that here so if I hit f1

163
00:07:35,459 --> 00:07:40,649
to do the lighting computation you can

164
00:07:37,978 --> 00:07:43,079
kind of see that it actually is is doing

165
00:07:40,649 --> 00:07:44,429
some lighting meaning you know there's

166
00:07:43,079 --> 00:07:46,649
some yellow lights here that we're

167
00:07:44,430 --> 00:07:48,930
seeing there's some white lights here

168
00:07:46,649 --> 00:07:51,060
that we're seeing and the light probes

169
00:07:48,930 --> 00:07:53,069
that are around here that the lighting

170
00:07:51,060 --> 00:07:56,009
element points that are doing the

171
00:07:53,069 --> 00:07:58,500
reflection actually do have correct

172
00:07:56,009 --> 00:08:00,089
colors I mean like I said we're not

173
00:07:58,500 --> 00:08:02,220
doing much in the way of a good lighting

174
00:08:00,089 --> 00:08:04,228
solution or anything like that at the

175
00:08:02,220 --> 00:08:07,139
moment but we are actually doing

176
00:08:04,228 --> 00:08:08,579
something that resembles lighting where

177
00:08:07,139 --> 00:08:15,090
as what we're getting when we actually

178
00:08:08,579 --> 00:08:16,408
go into when we actually try to use that

179
00:08:15,089 --> 00:08:18,388
letting solution we're getting just

180
00:08:16,408 --> 00:08:22,079
blackness so what we're trying to do now

181
00:08:18,389 --> 00:08:24,240
is kind of claw our way back to having

182
00:08:22,079 --> 00:08:27,120
this work properly which currently it is

183
00:08:24,240 --> 00:08:29,250
not so the first thing that I'd like to

184
00:08:27,120 --> 00:08:33,028
do is try to figure out whether the

185
00:08:29,250 --> 00:08:35,519
Texel fetch stuff is working at all or

186
00:08:33,028 --> 00:08:38,070
whether you know there's sort of like

187
00:08:35,519 --> 00:08:40,199
two parts of this program that can be

188
00:08:38,070 --> 00:08:43,528
broken the first part of the program

189
00:08:40,200 --> 00:08:46,110
that could be broken is the lighting

190
00:08:43,528 --> 00:08:50,578
lookup itself so you can see we've got

191
00:08:46,110 --> 00:08:52,169
this kind of weird situation here and it

192
00:08:50,578 --> 00:08:53,489
looks like we're stuffing a value for a

193
00:08:52,169 --> 00:08:55,319
lookup right now

194
00:08:53,490 --> 00:08:58,379
that we thought was one that should have

195
00:08:55,320 --> 00:09:00,750
had some light in it I think that's why

196
00:08:58,379 --> 00:09:03,750
we were doing that testing before if you

197
00:09:00,750 --> 00:09:06,839
remember correctly I forgot that we were

198
00:09:03,750 --> 00:09:08,370
doing this exact thing here if you

199
00:09:06,839 --> 00:09:09,930
remember we looked at this yesterday

200
00:09:08,370 --> 00:09:12,089
actually and I was like I don't remember

201
00:09:09,929 --> 00:09:15,149
why we're doing that this was the front

202
00:09:12,089 --> 00:09:16,440
emit thing I guess I'm not sure why we

203
00:09:15,149 --> 00:09:18,000
were looking I guess we're just looking

204
00:09:16,440 --> 00:09:21,240
for something where the front emit red

205
00:09:18,000 --> 00:09:24,419
was greater than 0.5 something that

206
00:09:21,240 --> 00:09:27,299
would have a bright cell in it this

207
00:09:24,419 --> 00:09:29,490
debug XD bug why debug Z is probably

208
00:09:27,299 --> 00:09:32,579
just what we filled in here so we were

209
00:09:29,490 --> 00:09:34,709
forcing the issue of looking up a light

210
00:09:32,580 --> 00:09:38,820
that should have had something in it

211
00:09:34,708 --> 00:09:41,759
right but instead this light I this is

212
00:09:38,820 --> 00:09:43,470
never getting entered the reason we know

213
00:09:41,759 --> 00:09:46,970
that it's never getting entered is that

214
00:09:43,470 --> 00:09:49,290
we never get any green at all here so

215
00:09:46,970 --> 00:09:51,149
there's two possible things that could

216
00:09:49,289 --> 00:09:53,699
be happening the first one is that this

217
00:09:51,149 --> 00:09:55,980
lookup is busted and instead of actually

218
00:09:53,700 --> 00:09:58,560
looking up into this location like it's

219
00:09:55,980 --> 00:10:06,120
supposed to it's actually just totally

220
00:09:58,559 --> 00:10:09,028
wrong you know like maybe it looks up

221
00:10:06,120 --> 00:10:13,289
into the wrong place and the texture or

222
00:10:09,028 --> 00:10:17,338
maybe this 6 5 5 3 5 +5 stuff doesn't

223
00:10:13,289 --> 00:10:21,059
work so the cast like maybe we're not

224
00:10:17,339 --> 00:10:24,089
converting it up converting it to a

225
00:10:21,059 --> 00:10:27,899
light index properly and so we can't do

226
00:10:24,089 --> 00:10:31,110
our textile fetch correctly you know who

227
00:10:27,899 --> 00:10:34,559
knows right we have no idea what's going

228
00:10:31,110 --> 00:10:38,730
wrong here but it could be any of those

229
00:10:34,559 --> 00:10:40,528
things once we come in here this part

230
00:10:38,730 --> 00:10:42,959
we've taken out of the equation so we

231
00:10:40,528 --> 00:10:44,639
know that this can't be wrong because

232
00:10:42,958 --> 00:10:48,149
we're just stuffing the light value with

233
00:10:44,639 --> 00:10:50,789
green so if the light look up here had

234
00:10:48,149 --> 00:10:54,828
succeeded at all then we would get into

235
00:10:50,789 --> 00:10:57,539
this loop and we would see green right

236
00:10:54,828 --> 00:11:01,309
of course the only thing I'm not sure

237
00:10:57,539 --> 00:11:01,309
about is we wouldn't get out of the loop

238
00:11:02,059 --> 00:11:07,589
well I guess we would cuz we'd still be

239
00:11:04,370 --> 00:11:11,129
looking it up this way

240
00:11:07,590 --> 00:11:12,420
so I guess that's okay we could force

241
00:11:11,129 --> 00:11:15,480
our way out of the loop if we wanted to

242
00:11:12,419 --> 00:11:23,849
we could break here right out of the

243
00:11:15,480 --> 00:11:27,450
loop or change this to an if right so in

244
00:11:23,850 --> 00:11:29,790
that sense we could do it so but anyway

245
00:11:27,450 --> 00:11:33,720
so something in that light lookup could

246
00:11:29,789 --> 00:11:36,240
be wrong and so that's one thing we have

247
00:11:33,720 --> 00:11:37,769
to worry about but there's another thing

248
00:11:36,240 --> 00:11:39,450
that we have to worry about and that is

249
00:11:37,769 --> 00:11:42,600
that we're not actually sending down in

250
00:11:39,450 --> 00:11:47,340
the valid texture data so we know when

251
00:11:42,600 --> 00:11:50,190
we output our cubes right when we output

252
00:11:47,340 --> 00:11:51,810
those cubes we know that they had the

253
00:11:50,190 --> 00:11:54,330
lighting values that we were expecting

254
00:11:51,809 --> 00:11:57,989
to see what we don't know is whether or

255
00:11:54,330 --> 00:12:00,360
not the texture has that property right

256
00:11:57,990 --> 00:12:02,940
we're trying to send down a 3d texture

257
00:12:00,360 --> 00:12:05,129
that will mirror the information that is

258
00:12:02,940 --> 00:12:08,280
in those cubes we don't actually know

259
00:12:05,129 --> 00:12:10,799
whether that's succeeded and that's you

260
00:12:08,279 --> 00:12:13,919
know another whole part of the problem

261
00:12:10,799 --> 00:12:17,099
that could be wrong and so maybe this

262
00:12:13,919 --> 00:12:18,870
code is actually correct or even if it's

263
00:12:17,100 --> 00:12:21,000
in error maybe it doesn't matter that

264
00:12:18,870 --> 00:12:23,460
it's an error yet because we just don't

265
00:12:21,000 --> 00:12:26,159
have a valid texture set to look up into

266
00:12:23,460 --> 00:12:28,379
we're packing it wrong we're sending it

267
00:12:26,159 --> 00:12:30,329
down wrong we're setting it up

268
00:12:28,379 --> 00:12:32,549
incorrectly so the shader can't read

269
00:12:30,330 --> 00:12:34,620
from it correctly all of those things

270
00:12:32,549 --> 00:12:35,609
could be wrong and again since we can't

271
00:12:34,620 --> 00:12:38,070
step through anything or see anything

272
00:12:35,610 --> 00:12:40,560
it's always this nasty problem of like

273
00:12:38,070 --> 00:12:50,879
okay we've got to start blackbox

274
00:12:40,559 --> 00:12:54,899
debugging it all right so let's start by

275
00:12:50,879 --> 00:12:58,110
saying how are we actually putting these

276
00:12:54,899 --> 00:13:00,870
things together right at the moment I

277
00:12:58,110 --> 00:13:02,580
think what we're doing is we're trying

278
00:13:00,870 --> 00:13:05,669
to do when we output our lighting

279
00:13:02,580 --> 00:13:09,870
textures right you can see us doing it

280
00:13:05,669 --> 00:13:11,189
here I think this in this piece right

281
00:13:09,870 --> 00:13:14,759
here is pretty much where we're doing

282
00:13:11,190 --> 00:13:17,790
all of the packing I can watch this

283
00:13:14,759 --> 00:13:19,230
thing pack by using this if statement

284
00:13:17,789 --> 00:13:22,230
we've already got in there

285
00:13:19,230 --> 00:13:25,800
right so if I go ahead and and pause

286
00:13:22,230 --> 00:13:28,470
over to that I thought there was there's

287
00:13:25,799 --> 00:13:31,049
also some way how do we leave windows

288
00:13:28,470 --> 00:13:33,870
pinned I know there was something about

289
00:13:31,049 --> 00:13:37,819
that that you can do

290
00:13:33,870 --> 00:13:37,820
[Music]

291
00:13:46,500 --> 00:13:53,740
yeah solutions no shipping just a rush

292
00:13:51,578 --> 00:13:56,620
of pin button and pinned tabs maintain

293
00:13:53,740 --> 00:14:00,339
pß damage from well manifest be opened

294
00:13:56,620 --> 00:14:03,720
in the preview tab I think that's what

295
00:14:00,339 --> 00:14:03,720
we don't want

296
00:14:05,578 --> 00:14:13,568
so anyway I'm gonna take a look in here

297
00:14:08,438 --> 00:14:17,708
in output loading textures and I'm gonna

298
00:14:13,568 --> 00:14:20,889
run and now I hit f1 I should get in

299
00:14:17,708 --> 00:14:23,828
there I'm gonna look to see when we hit

300
00:14:20,889 --> 00:14:25,659
this and I'm gonna just to see when

301
00:14:23,828 --> 00:14:28,000
we're when we've arrived

302
00:14:25,659 --> 00:14:30,159
I'm gonna take a look at what that that

303
00:14:28,000 --> 00:14:34,860
debug XD bug Weiss and I'm gonna watch

304
00:14:30,159 --> 00:14:37,929
it pack it so here's the debug X oops

305
00:14:34,860 --> 00:14:39,579
x-man that is just awful is there that's

306
00:14:37,929 --> 00:14:41,258
another setting it would be nice to fix

307
00:14:39,578 --> 00:14:45,938
is there a way to make it go to the next

308
00:14:41,259 --> 00:14:48,039
line in the watch window because man

309
00:14:45,938 --> 00:14:49,958
they change that from the old one and

310
00:14:48,039 --> 00:14:52,620
that just yeah I have no idea why you

311
00:14:49,958 --> 00:14:56,919
would ever change that it seems nuts

312
00:14:52,620 --> 00:14:59,828
because it's literally just worse but I

313
00:14:56,919 --> 00:15:04,269
don't know I don't know if they even

314
00:14:59,828 --> 00:15:09,058
like realize they changed it I can't

315
00:15:04,269 --> 00:15:09,058
imagine that they did but maybe cooking

316
00:15:09,089 --> 00:15:14,059
general

317
00:15:10,960 --> 00:15:14,059
[Music]

318
00:15:20,210 --> 00:15:26,089
know what just my code is but it sounds

319
00:15:23,220 --> 00:15:26,089
not good

320
00:15:40,090 --> 00:15:46,389
oh man it looks like we're sad there's

321
00:15:44,350 --> 00:15:52,509
nothing on there

322
00:15:46,389 --> 00:15:56,309
I really hope one of the handmade

323
00:15:52,509 --> 00:15:57,789
debugger projects gets functional soon

324
00:15:56,309 --> 00:16:02,559
all right

325
00:15:57,789 --> 00:16:03,819
126 113 27 I'm gonna take a quick look

326
00:16:02,559 --> 00:16:05,829
and make sure that's what it would yes

327
00:16:03,820 --> 00:16:07,360
so so you can see exactly what we were

328
00:16:05,830 --> 00:16:09,790
doing there right we were just trying to

329
00:16:07,360 --> 00:16:12,490
take the first voxel that we knew had

330
00:16:09,789 --> 00:16:18,429
something in it and we were gonna try

331
00:16:12,490 --> 00:16:19,629
and use that so let's see here I guess

332
00:16:18,429 --> 00:16:24,750
we should really be compiling this in

333
00:16:19,629 --> 00:16:31,439
debug mode but anyway so in the P next

334
00:16:24,750 --> 00:16:33,820
texture here and the look up at texture

335
00:16:31,440 --> 00:16:36,400
all right let me actually do this in

336
00:16:33,820 --> 00:16:39,580
debug mode so we can inspect all our

337
00:16:36,399 --> 00:16:41,679
variables I just want to see if like it

338
00:16:39,580 --> 00:16:44,770
looks like we're putting stuff into that

339
00:16:41,679 --> 00:16:48,489
location or whether it's kind of looks a

340
00:16:44,769 --> 00:16:49,960
little bogus I'm not sure which we've

341
00:16:48,490 --> 00:16:56,139
done yet because it's been a long time

342
00:16:49,960 --> 00:16:57,460
since we coded due to the difference

343
00:16:56,139 --> 00:16:59,909
between debug and release for this is

344
00:16:57,460 --> 00:16:59,910
pretty dramatic

345
00:17:12,539 --> 00:17:22,539
all right so here we are I'm gonna take

346
00:17:17,799 --> 00:17:26,109
a look at various informations so the

347
00:17:22,539 --> 00:17:28,000
PAC index here the PAC index is just

348
00:17:26,109 --> 00:17:32,379
which one of these were actually at

349
00:17:28,000 --> 00:17:33,970
right we plus plus it instead of you

350
00:17:32,380 --> 00:17:36,850
know we plus plus PAC index instead of

351
00:17:33,970 --> 00:17:40,210
pack and X plus plus because we want to

352
00:17:36,849 --> 00:17:42,549
leave the 0 with elements as nothing

353
00:17:40,210 --> 00:17:46,390
because we want to be able to have the

354
00:17:42,549 --> 00:17:50,079
idea to specify a null so light index 0

355
00:17:46,390 --> 00:17:51,730
is like the non light so light index 1

356
00:17:50,079 --> 00:17:53,159
would be the first to me pack we've

357
00:17:51,730 --> 00:17:56,980
packed a great number of these already

358
00:17:53,160 --> 00:18:01,630
612 this one right here our packing is

359
00:17:56,980 --> 00:18:03,880
number 613 we are asserting that it's

360
00:18:01,630 --> 00:18:05,850
within the range of lights that we are

361
00:18:03,880 --> 00:18:09,070
allowed to pack which we you know we did

362
00:18:05,849 --> 00:18:12,369
and so now we're taking a look at the

363
00:18:09,069 --> 00:18:15,279
actual element we're gonna pack here so

364
00:18:12,369 --> 00:18:20,229
here's P next it's got a floating-point

365
00:18:15,279 --> 00:18:22,990
position of nothing and the next pointer

366
00:18:20,230 --> 00:18:29,519
of nothing and now we're going to

367
00:18:22,990 --> 00:18:29,519
specify that the element which is the

368
00:18:31,410 --> 00:18:37,960
the actual light we calculated we're

369
00:18:35,170 --> 00:18:39,610
gonna specify that the position value is

370
00:18:37,960 --> 00:18:41,950
going to be is going to take on that of

371
00:18:39,609 --> 00:18:44,259
its element which it does and that's

372
00:18:41,950 --> 00:18:47,200
good we're gonna make the next one be

373
00:18:44,259 --> 00:18:49,809
whatever was at the lookup already at

374
00:18:47,200 --> 00:18:51,490
this moment which was nothing and then

375
00:18:49,809 --> 00:18:53,589
we're gonna set the lookup equal to our

376
00:18:51,490 --> 00:18:55,690
pack index so now it's basically a

377
00:18:53,589 --> 00:18:59,019
singly linked list that points to this

378
00:18:55,690 --> 00:19:00,730
element and that does not have any other

379
00:18:59,019 --> 00:19:06,490
element in it like it doesn't have any

380
00:19:00,730 --> 00:19:08,680
other there's not some other light that

381
00:19:06,490 --> 00:19:10,569
needs to go in there so then we're gonna

382
00:19:08,680 --> 00:19:14,380
come through I wonder if again we'll

383
00:19:10,569 --> 00:19:15,879
have the same one 129 113 27 so I guess

384
00:19:14,380 --> 00:19:19,510
not

385
00:19:15,880 --> 00:19:21,730
we're actually we've moved a little bit

386
00:19:19,509 --> 00:19:24,169
so I wanted to see whether the

387
00:19:21,730 --> 00:19:25,940
daisy-chaining was working

388
00:19:24,169 --> 00:19:29,210
but it doesn't look how I'll be able to

389
00:19:25,940 --> 00:19:31,400
quite that way I don't really care if

390
00:19:29,210 --> 00:19:33,169
the daisy-chaining is working yet to be

391
00:19:31,400 --> 00:19:34,909
fair because it looks like we're having

392
00:19:33,169 --> 00:19:36,460
a problem more significant than the

393
00:19:34,909 --> 00:19:38,900
daisy-chaining

394
00:19:36,460 --> 00:19:41,860
so it doesn't look like it's really that

395
00:19:38,900 --> 00:19:47,360
important to debug that part the desk

396
00:19:41,859 --> 00:19:49,399
color part I'm not sure we really looked

397
00:19:47,359 --> 00:19:52,609
at that what's going on in there I

398
00:19:49,400 --> 00:19:55,490
assume so we are packing a pretty

399
00:19:52,609 --> 00:19:59,629
reasonable value into there as well so

400
00:19:55,490 --> 00:20:04,609
all of this looks you know saying to me

401
00:19:59,630 --> 00:20:07,789
I don't see you know I don't see a lot

402
00:20:04,609 --> 00:20:10,158
of a lot of cruft there so I'm going to

403
00:20:07,788 --> 00:20:16,069
come in here to where we do our render

404
00:20:10,159 --> 00:20:17,360
element this is what's going to transfer

405
00:20:16,069 --> 00:20:18,500
the lighting actually down this is the

406
00:20:17,359 --> 00:20:21,139
record that flows through to the

407
00:20:18,500 --> 00:20:24,558
renderer and if we look at what we

408
00:20:21,140 --> 00:20:26,538
specify here I want to make sure that

409
00:20:24,558 --> 00:20:30,440
we're doing the right thing with respect

410
00:20:26,538 --> 00:20:33,129
to sending these textures down so here's

411
00:20:30,440 --> 00:20:35,570
our P next value that we've specified

412
00:20:33,130 --> 00:20:40,549
and I just want to look at like the

413
00:20:35,569 --> 00:20:42,500
first 32 values of it right and what you

414
00:20:40,548 --> 00:20:45,359
can see I don't know why it's showing me

415
00:20:42,500 --> 00:20:48,450
I guess we declared it as a float

416
00:20:45,359 --> 00:20:48,449
[Music]

417
00:20:52,519 --> 00:20:58,470
that's just a float pointer I guess we

418
00:20:57,269 --> 00:21:00,240
declared this just as a pointer to

419
00:20:58,470 --> 00:21:01,589
floating point data which is probably

420
00:21:00,240 --> 00:21:04,200
makes sense because we're probably

421
00:21:01,589 --> 00:21:06,929
sending it down that way but anyway you

422
00:21:04,200 --> 00:21:08,970
can see that it's got reasonable stuff

423
00:21:06,930 --> 00:21:13,019
in it I mean it's got positions and then

424
00:21:08,970 --> 00:21:15,180
it's got occasional next pointers it

425
00:21:13,019 --> 00:21:18,529
should anyway if we look down there

426
00:21:15,180 --> 00:21:18,529
should be some floats that look absurd

427
00:21:19,519 --> 00:21:23,940
of course they won't be any of the first

428
00:21:22,140 --> 00:21:26,790
ones probably it would probably be more

429
00:21:23,940 --> 00:21:31,890
of ones later on let's see if that's

430
00:21:26,789 --> 00:21:33,480
true yeah so what you can see here is

431
00:21:31,890 --> 00:21:34,770
we're starting to get next values their

432
00:21:33,480 --> 00:21:36,269
reason they're ridiculous floating point

433
00:21:34,769 --> 00:21:40,470
valves because they're actually integers

434
00:21:36,269 --> 00:21:42,839
right so if I if I took this and said

435
00:21:40,470 --> 00:21:45,180
instead of you know you don't don't

436
00:21:42,839 --> 00:21:47,849
think of it as a float I think it was an

437
00:21:45,180 --> 00:21:52,710
integer then we can see we get like

438
00:21:47,849 --> 00:21:54,359
bogus integers and then real for the

439
00:21:52,710 --> 00:21:57,600
position values and then real integers

440
00:21:54,359 --> 00:21:59,299
for the next values right the P values

441
00:21:57,599 --> 00:22:03,500
are you know those are actually float

442
00:21:59,299 --> 00:22:06,180
and these are in so the you know that's

443
00:22:03,500 --> 00:22:08,730
that's a pointer to the data that we do

444
00:22:06,180 --> 00:22:15,600
actually want to submit that looks like

445
00:22:08,730 --> 00:22:17,309
it's correct you know so that's good and

446
00:22:15,599 --> 00:22:18,929
then we've got these other ones here and

447
00:22:17,309 --> 00:22:27,809
I'll just take a look at them that's C

448
00:22:18,930 --> 00:22:28,650
is the color channel and these all look

449
00:22:27,809 --> 00:22:29,849
pretty sane

450
00:22:28,650 --> 00:22:33,630
[Music]

451
00:22:29,849 --> 00:22:35,399
that's an alpha value of zero and I'm

452
00:22:33,630 --> 00:22:37,470
sorry an alpha value of one and the rest

453
00:22:35,400 --> 00:22:41,759
is zero let me make sure that some of

454
00:22:37,470 --> 00:22:42,809
these somewhere have some color value in

455
00:22:41,759 --> 00:22:45,210
them yes they do

456
00:22:42,809 --> 00:22:48,509
right so you can see that those are

457
00:22:45,210 --> 00:22:51,079
colors and so finally we'll take a look

458
00:22:48,509 --> 00:22:51,079
at the lookup

459
00:22:54,990 --> 00:23:04,539
here's the look up and this is just the

460
00:22:57,579 --> 00:23:10,029
first for any given voxel cell this is

461
00:23:04,539 --> 00:23:14,109
the first light that it should use not

462
00:23:10,029 --> 00:23:17,440
seeing a lot in there what I might do

463
00:23:14,109 --> 00:23:20,289
here is say alright let's take a look at

464
00:23:17,440 --> 00:23:22,750
how big this guy actually should be and

465
00:23:20,289 --> 00:23:27,009
actually just look at all of it to see

466
00:23:22,750 --> 00:23:31,500
whether it's filled out at all so if we

467
00:23:27,009 --> 00:23:35,680
do that that is in handmade platform and

468
00:23:31,500 --> 00:23:37,960
we can see the dimensions listed here

469
00:23:35,680 --> 00:23:44,259
I've got a pound to find for them

470
00:23:37,960 --> 00:23:48,940
it's 256 by 2 2 X by 32 and so 256 by 2

471
00:23:44,259 --> 00:23:52,900
X by 2 so there's 2 million entries in

472
00:23:48,940 --> 00:24:02,830
the voxel and so I should be able to

473
00:23:52,900 --> 00:24:06,519
take a look at Memory they're gonna get

474
00:24:02,829 --> 00:24:07,929
a memory window back I should be able to

475
00:24:06,519 --> 00:24:09,599
take a look at the memory here actually

476
00:24:07,930 --> 00:24:12,220
I think I will leave it down here and

477
00:24:09,599 --> 00:24:14,740
take a look at it's a little bit behind

478
00:24:12,220 --> 00:24:18,180
my head was the only reason that was a

479
00:24:14,740 --> 00:24:18,180
little hesitant there

480
00:24:29,000 --> 00:24:35,329
so I believe well actually it's actually

481
00:24:31,069 --> 00:24:38,659
a two byte integer right I think was the

482
00:24:35,329 --> 00:24:40,849
way lookup currently works and so we can

483
00:24:38,660 --> 00:24:42,440
just kind of scroll through here if we

484
00:24:40,849 --> 00:24:45,169
want to know what the address would be

485
00:24:42,440 --> 00:24:57,470
where we would end we now know that it's

486
00:24:45,170 --> 00:25:00,860
2 times 2 million right so this is the

487
00:24:57,470 --> 00:25:05,210
last address of one pass the last

488
00:25:00,859 --> 00:25:06,769
address of our voxel lookup so what I

489
00:25:05,210 --> 00:25:09,980
can do is just say well I'm starting at

490
00:25:06,769 --> 00:25:12,889
the 110 let me just scroll through and I

491
00:25:09,980 --> 00:25:17,200
know that until I hit that end point

492
00:25:12,890 --> 00:25:17,200
that that we're all in the voxel right

493
00:25:28,339 --> 00:25:42,119
so admittedly not seeing much here right

494
00:25:37,970 --> 00:25:45,630
we know we have to e so right now it's

495
00:25:42,119 --> 00:25:47,549
DD and we know we have till II so you

496
00:25:45,630 --> 00:25:58,370
know maybe it's just all this stuff is

497
00:25:47,549 --> 00:25:58,369
all zeroes for most of it there was one

498
00:26:00,250 --> 00:26:05,109
you should get in some areas that are

499
00:26:01,779 --> 00:26:06,460
pretty dense though like one look up and

500
00:26:05,109 --> 00:26:09,149
the entire thing does not seem good

501
00:26:06,460 --> 00:26:09,150
there's some more

502
00:26:27,619 --> 00:26:41,259
I will say it's pretty sparse I wonder

503
00:26:36,380 --> 00:26:41,260
if we messed up our voxels somehow

504
00:26:53,170 --> 00:26:57,220
because in theory it should be fairly

505
00:26:54,880 --> 00:26:58,630
tightly bounded like we just used a mill

506
00:26:57,220 --> 00:27:00,100
well we don't actually know that there

507
00:26:58,630 --> 00:27:01,780
could be something throwing off our

508
00:27:00,099 --> 00:27:10,869
bounds we should probably look at what

509
00:27:01,779 --> 00:27:12,940
the bounds are of the voxel so I think

510
00:27:10,869 --> 00:27:17,979
maybe the right thing to do just based

511
00:27:12,940 --> 00:27:21,309
on looking at this is just to visualize

512
00:27:17,980 --> 00:27:23,789
the voxel maybe and verify that we're

513
00:27:21,309 --> 00:27:26,289
not stuffing anything incorrect in there

514
00:27:23,789 --> 00:27:28,450
it's hard to say because there's the

515
00:27:26,289 --> 00:27:31,779
voxel is so big and this is this is the

516
00:27:28,450 --> 00:27:37,920
bane of three dimensionality right it's

517
00:27:31,779 --> 00:27:37,920
it's got it's got two million entries

518
00:27:41,069 --> 00:27:48,879
it's very hard to think about that and

519
00:27:44,019 --> 00:27:53,910
go well just looking at this array does

520
00:27:48,880 --> 00:27:53,910
it feel like it's correct you know

521
00:27:59,179 --> 00:28:03,288
and yeah I mean it's really hard to make

522
00:28:01,548 --> 00:28:04,848
that a judgement call so I think it's

523
00:28:03,288 --> 00:28:06,528
probably something we want to draw out

524
00:28:04,848 --> 00:28:08,450
because they don't think it's reasonable

525
00:28:06,528 --> 00:28:09,798
do you expect me to be able to guess

526
00:28:08,450 --> 00:28:11,659
whether we're you know maybe this really

527
00:28:09,798 --> 00:28:14,168
is still correct because there are

528
00:28:11,659 --> 00:28:16,580
entries in it it's not completely empty

529
00:28:14,169 --> 00:28:17,960
the fact that it's fairly sparse might

530
00:28:16,579 --> 00:28:19,999
just mean well hey we're still looking

531
00:28:17,960 --> 00:28:22,308
at the beginning part of it maybe it

532
00:28:19,999 --> 00:28:25,190
gets really dense later in the parts

533
00:28:22,308 --> 00:28:26,868
that we expect but even then if I see a

534
00:28:25,190 --> 00:28:30,528
dense part later we still it could be

535
00:28:26,868 --> 00:28:32,028
that we're not aligning properly and so

536
00:28:30,528 --> 00:28:35,269
when we go to look it up it's wrong and

537
00:28:32,028 --> 00:28:39,169
bla bla bla bla bla right so yeah so

538
00:28:35,269 --> 00:28:40,719
we've got a lot of issues there to say

539
00:28:39,169 --> 00:28:45,759
the least

540
00:28:40,719 --> 00:28:45,759
all right so let's think about this here

541
00:28:47,739 --> 00:28:52,098
let's take a quick look and see if

542
00:28:50,058 --> 00:28:56,329
there's anything we can tell about our

543
00:28:52,098 --> 00:28:58,548
voxel lookup and the other thing we

544
00:28:56,329 --> 00:29:06,079
could do here is if we read from the

545
00:28:58,548 --> 00:29:08,088
voxel lookup maybe we can make something

546
00:29:06,079 --> 00:29:11,449
that puts cubes out into the voxel

547
00:29:08,088 --> 00:29:14,778
lookup that would help us understand

548
00:29:11,450 --> 00:29:17,808
what we're actually seeing in there for

549
00:29:14,778 --> 00:29:23,210
example so one of the things when we hit

550
00:29:17,808 --> 00:29:25,038
f1 that we're doing right now one of the

551
00:29:23,210 --> 00:29:27,769
things that we would like to be able to

552
00:29:25,038 --> 00:29:28,940
see is could we get those cubes to show

553
00:29:27,769 --> 00:29:33,440
us more about what's going on in the

554
00:29:28,940 --> 00:29:35,599
voxel and when we do output I guess

555
00:29:33,440 --> 00:29:39,129
what's output lighting verts that we're

556
00:29:35,598 --> 00:29:39,128
doing are we doing a protection debug

557
00:29:39,579 --> 00:29:52,038
yeah so when we do output texture debug

558
00:29:47,808 --> 00:29:58,128
that we come through here we're we're

559
00:29:52,038 --> 00:29:59,960
pushing cubes we are pushing cubes based

560
00:29:58,128 --> 00:30:02,058
on what we stored in the voxel so we

561
00:29:59,960 --> 00:30:04,669
know that the voxels lighting solution

562
00:30:02,058 --> 00:30:06,408
is actually all stored in there what we

563
00:30:04,669 --> 00:30:09,019
don't know is that they're actually

564
00:30:06,409 --> 00:30:11,659
properly aligned with where the voxel

565
00:30:09,019 --> 00:30:12,890
thinks it is so for example when we push

566
00:30:11,659 --> 00:30:15,080
these cubes on

567
00:30:12,890 --> 00:30:17,840
we are working through what's in the

568
00:30:15,079 --> 00:30:19,789
voxel at any particular location but we

569
00:30:17,839 --> 00:30:25,669
don't actually know whether or not that

570
00:30:19,789 --> 00:30:27,319
voxel whether or not the light that's

571
00:30:25,670 --> 00:30:29,929
stored in that voxel the one that has

572
00:30:27,319 --> 00:30:34,819
this p-value we don't know whether it's

573
00:30:29,929 --> 00:30:36,530
actually a whether that p-value is

574
00:30:34,819 --> 00:30:39,500
actually contained inside the voxel

575
00:30:36,529 --> 00:30:42,769
right so for all we know this could be

576
00:30:39,500 --> 00:30:44,960
completely bogus so what would be nice

577
00:30:42,769 --> 00:30:48,048
to do is actually try to translate this

578
00:30:44,960 --> 00:30:51,679
out in some way where we figure out

579
00:30:48,048 --> 00:30:53,048
whether or not the voxel whether the

580
00:30:51,679 --> 00:30:55,519
things that are in each voxel sell

581
00:30:53,048 --> 00:31:00,589
properly correspond to lights in that

582
00:30:55,519 --> 00:31:02,210
region all right

583
00:31:00,589 --> 00:31:05,449
so let's go ahead and see if we can get

584
00:31:02,210 --> 00:31:08,000
any information about that so what we

585
00:31:05,450 --> 00:31:12,440
would like to do here is say okay let's

586
00:31:08,000 --> 00:31:15,140
take a look at this this loop here and

587
00:31:12,440 --> 00:31:17,919
let's have two ways that we can do it

588
00:31:15,140 --> 00:31:17,919
right

589
00:31:28,378 --> 00:31:35,138
so the first thing we want to do is

590
00:31:32,949 --> 00:31:37,089
instead of actually outputting things

591
00:31:35,138 --> 00:31:38,858
that they're a real location we're gonna

592
00:31:37,088 --> 00:31:41,138
output them at the center of the voxel

593
00:31:38,858 --> 00:31:42,398
so we can see where it is we're still

594
00:31:41,138 --> 00:31:45,488
gonna do the push cue but we're gonna do

595
00:31:42,398 --> 00:31:49,258
it outside so we need to have a thinker

596
00:31:45,489 --> 00:31:53,259
that says like where we should put the

597
00:31:49,259 --> 00:31:57,669
element right so what I want to do is

598
00:31:53,259 --> 00:32:01,088
say if there's anything in this voxel

599
00:31:57,669 --> 00:32:06,309
you skip it if there's nothing in it if

600
00:32:01,088 --> 00:32:14,168
there's anything in the voxel compute

601
00:32:06,308 --> 00:32:18,878
like the average color value something

602
00:32:14,169 --> 00:32:21,219
like this so we start out with a black

603
00:32:18,878 --> 00:32:25,738
color we sum up all of the colors that

604
00:32:21,219 --> 00:32:25,739
there are in there and then at the end

605
00:32:30,808 --> 00:32:40,928
at the end we'll just divide by however

606
00:32:33,519 --> 00:32:42,878
many there were right so this will

607
00:32:40,929 --> 00:32:46,359
produce an average value for each voxel

608
00:32:42,878 --> 00:32:48,278
cell that has anything in it and then it

609
00:32:46,358 --> 00:32:51,009
will put a cube at that location with

610
00:32:48,278 --> 00:32:52,838
that color value now the only thing we

611
00:32:51,009 --> 00:32:56,048
don't have here is we don't know where

612
00:32:52,838 --> 00:32:58,388
to put this guy because we don't have

613
00:32:56,048 --> 00:33:01,388
any way to compute that yet so we want

614
00:32:58,388 --> 00:33:06,158
to do is we want to get the voxel x y&amp;z

615
00:33:01,388 --> 00:33:10,778
out by using that dimension value so we

616
00:33:06,159 --> 00:33:15,729
want to do is like you know min you know

617
00:33:10,778 --> 00:33:21,598
locks little min corner plus X times you

618
00:33:15,729 --> 00:33:21,598
know well basically this

619
00:33:27,690 --> 00:33:32,558
so whatever the voxel dimension is we

620
00:33:30,819 --> 00:33:35,528
want to multiply that by wherever we are

621
00:33:32,558 --> 00:33:36,999
XY and Z integer y's and we want to

622
00:33:35,528 --> 00:33:40,388
offset from the middle corner the voxel

623
00:33:36,999 --> 00:33:42,159
that would put us at the corner of this

624
00:33:40,388 --> 00:33:44,829
voxel we probably want to be at the

625
00:33:42,159 --> 00:33:48,610
center of the voxel so we can also do

626
00:33:44,829 --> 00:33:59,528
like an 0.5 F times the voxel dimension

627
00:33:48,609 --> 00:34:00,998
plus write another way to do that would

628
00:33:59,528 --> 00:34:06,249
be to add point five to each of these

629
00:34:00,999 --> 00:34:07,990
but either way all right so that's what

630
00:34:06,249 --> 00:34:10,269
we need to do we need to take a look

631
00:34:07,990 --> 00:34:12,940
here at where that information is going

632
00:34:10,269 --> 00:34:14,949
to be how that information is going to

633
00:34:12,940 --> 00:34:16,690
get to us is the only thing because as

634
00:34:14,949 --> 00:34:18,428
you can see here where we do lighting

635
00:34:16,690 --> 00:34:22,269
solutions solution and lighting textures

636
00:34:18,429 --> 00:34:24,309
textures I don't know that we actually

637
00:34:22,269 --> 00:34:26,079
store that anywhere you can see in here

638
00:34:24,309 --> 00:34:28,510
it doesn't look like we actually store

639
00:34:26,079 --> 00:34:30,250
that data unfortunately so what I might

640
00:34:28,510 --> 00:34:32,319
do is say let's actually put that in

641
00:34:30,250 --> 00:34:34,179
there so that when we come through here

642
00:34:32,318 --> 00:34:35,769
and we store like min corner max corner

643
00:34:34,179 --> 00:34:38,980
that crap

644
00:34:35,769 --> 00:34:40,378
let's go ahead and actually keep that in

645
00:34:38,980 --> 00:34:44,648
here as well right

646
00:34:40,378 --> 00:34:50,529
so let's say that we've got a min corner

647
00:34:44,648 --> 00:34:55,058
in a max corner and a seldom and in

648
00:34:50,530 --> 00:34:57,430
seldom like so and that way when this

649
00:34:55,059 --> 00:35:01,298
thing produces the lighting solution we

650
00:34:57,429 --> 00:35:04,419
can actually store these values and have

651
00:35:01,298 --> 00:35:08,730
some idea of what they actually are so I

652
00:35:04,420 --> 00:35:08,730
think that just this

653
00:35:18,119 --> 00:35:29,349
nothing much to it and that'll store all

654
00:35:27,550 --> 00:35:34,090
those values off so that now we can use

655
00:35:29,349 --> 00:35:37,059
them anywhere that we want to if I come

656
00:35:34,090 --> 00:35:40,900
back up here I should be able to now get

657
00:35:37,059 --> 00:35:47,190
this out of the texture set so there's

658
00:35:40,900 --> 00:35:47,190
the voxel main corner there's seldom and

659
00:35:47,820 --> 00:35:57,570
there's Seldon a second time so that's

660
00:35:57,630 --> 00:36:01,930
that's really it that's all I wanted to

661
00:36:00,460 --> 00:36:03,280
do and that way I can just kind of see

662
00:36:01,929 --> 00:36:06,549
if these things are roughly in the right

663
00:36:03,280 --> 00:36:12,370
place I think we called that v3i that

664
00:36:06,550 --> 00:36:18,789
would be through you I thought we had

665
00:36:12,369 --> 00:36:30,969
something like that I guess we only had

666
00:36:18,789 --> 00:36:39,369
v2 uninitialized local variable right

667
00:36:30,969 --> 00:36:41,739
you are sir thank you compiler so now

668
00:36:39,369 --> 00:36:43,690
I'm going to run the lighting and I'm

669
00:36:41,739 --> 00:36:47,049
gonna it's gonna take a little longer

670
00:36:43,690 --> 00:36:49,690
because we are running a debug mode I

671
00:36:47,050 --> 00:36:53,800
could probably go back - OH - if we want

672
00:36:49,690 --> 00:36:55,720
to but probably it's not that long so

673
00:36:53,800 --> 00:36:59,320
this is the lighting solution running

674
00:36:55,719 --> 00:37:01,899
now we are going to do the voxel

675
00:36:59,320 --> 00:37:04,410
creation we don't need to stop here for

676
00:37:01,900 --> 00:37:04,410
any particular reason

677
00:37:05,070 --> 00:37:15,700
so yeah not reassuring right I see

678
00:37:10,900 --> 00:37:18,340
nothing but that's kind of good because

679
00:37:15,699 --> 00:37:19,779
I mean maybe there's a bug in this but

680
00:37:18,340 --> 00:37:22,090
if it turns out that there isn't a bug

681
00:37:19,780 --> 00:37:24,190
in this then that puts us a little bit

682
00:37:22,090 --> 00:37:24,680
closer to understanding what our problem

683
00:37:24,190 --> 00:37:26,059
is

684
00:37:24,679 --> 00:37:27,940
as if this is actually word incorrectly

685
00:37:26,059 --> 00:37:30,920
now and we're not getting anything

686
00:37:27,940 --> 00:37:33,619
that's a good indication that our voxel

687
00:37:30,920 --> 00:37:35,960
lookup is kind of borked let's go ahead

688
00:37:33,619 --> 00:37:38,240
and step into that and see what's going

689
00:37:35,960 --> 00:37:40,960
on in it maybe it just has a bug and we

690
00:37:38,239 --> 00:37:44,169
shouldn't get too excited

691
00:37:40,960 --> 00:37:48,039
or maybe we've actually found something

692
00:37:44,170 --> 00:37:48,039
only one way to tell

693
00:38:03,340 --> 00:38:16,870
ah okay so the first I'm going to do is

694
00:38:13,210 --> 00:38:19,780
see if we ever get in here right we may

695
00:38:16,869 --> 00:38:21,789
never but we did so we know that there

696
00:38:19,780 --> 00:38:25,269
are some voxels that have indices in

697
00:38:21,789 --> 00:38:26,320
them which we believed already to be the

698
00:38:25,269 --> 00:38:28,360
case because when we looked in the

699
00:38:26,320 --> 00:38:30,340
memory window and scanned the voxels it

700
00:38:28,360 --> 00:38:32,820
did look like there was stuff happening

701
00:38:30,340 --> 00:38:39,809
there so that's good

702
00:38:32,820 --> 00:38:42,580
when we sum up the color value here that

703
00:38:39,809 --> 00:38:44,590
doesn't look very promising it looks

704
00:38:42,579 --> 00:38:46,650
like the color value is zero but that's

705
00:38:44,590 --> 00:38:48,760
okay actually we should still see a cube

706
00:38:46,650 --> 00:38:51,280
maybe there just wasn't any light there

707
00:38:48,760 --> 00:38:52,750
so that's actually fine so now let's

708
00:38:51,280 --> 00:38:56,019
take a look at what we're getting in

709
00:38:52,750 --> 00:39:01,679
these in the actual location values so

710
00:38:56,019 --> 00:39:01,679
negative 35 to 35 the cell dimension

711
00:39:05,639 --> 00:39:16,089
that's totally wrong oh I see because we

712
00:39:13,780 --> 00:39:17,590
only ever compute inverse cell dimension

713
00:39:16,090 --> 00:39:20,410
this is actually the whole voxel

714
00:39:17,590 --> 00:39:23,620
dimension my bad

715
00:39:20,409 --> 00:39:27,309
hey I named it correctly I just didn't

716
00:39:23,619 --> 00:39:30,359
actually do it so let's go ahead and do

717
00:39:27,309 --> 00:39:30,360
seldom here

718
00:39:41,630 --> 00:39:45,230
and what you can see is basically we

719
00:39:43,739 --> 00:39:47,639
just do the divide the other way around

720
00:39:45,230 --> 00:39:50,400
so this is how much we have to span and

721
00:39:47,639 --> 00:39:54,598
we divide by the lookup value and there

722
00:39:50,400 --> 00:39:57,170
we get the Selden so that's fine let's

723
00:39:54,599 --> 00:39:57,170
try that over time

724
00:40:20,548 --> 00:40:29,699
so with that bug fixed it looks like two

725
00:40:25,059 --> 00:40:32,829
things one it looks like we have

726
00:40:29,699 --> 00:40:37,079
correctly stored the voxels where they

727
00:40:32,829 --> 00:40:39,039
are right I mean that looks right to me

728
00:40:37,079 --> 00:40:42,160
too

729
00:40:39,039 --> 00:40:43,719
we should probably run that again to

730
00:40:42,159 --> 00:40:45,518
make sure that the color values are

731
00:40:43,719 --> 00:40:49,749
right in there so what I'm going to do

732
00:40:45,518 --> 00:40:54,578
here is just go back to the OpenGL path

733
00:40:49,748 --> 00:40:57,068
and where we slam the green in there and

734
00:40:54,579 --> 00:41:02,459
do the the index loop I'm going to go

735
00:40:57,068 --> 00:41:04,538
ahead and recom nth out the value that

736
00:41:02,458 --> 00:41:07,298
I'm going to read comment the part where

737
00:41:04,539 --> 00:41:11,259
we assign the value over the default

738
00:41:07,298 --> 00:41:16,568
light the value that comes from the

739
00:41:11,259 --> 00:41:19,449
render stream so yeah this so I'm going

740
00:41:16,568 --> 00:41:23,619
to let it use the lighting value that

741
00:41:19,449 --> 00:41:26,019
it's being told I'm leaving it as o2

742
00:41:23,619 --> 00:41:28,048
because we're just kind of testing now

743
00:41:26,018 --> 00:41:31,958
we don't need to step through anything

744
00:41:28,048 --> 00:41:35,949
so when I run this this is viewing these

745
00:41:31,958 --> 00:41:37,748
created from the voxels positioning so

746
00:41:35,949 --> 00:41:41,920
it looks like they're placed in the

747
00:41:37,748 --> 00:41:46,028
right location as well so we now can be

748
00:41:41,920 --> 00:41:49,749
relatively sure that our pre pass is

749
00:41:46,028 --> 00:41:52,239
more or less correct meaning when we're

750
00:41:49,748 --> 00:41:57,818
setting up the texture data it seems to

751
00:41:52,239 --> 00:42:04,139
be correct so that means we can now move

752
00:41:57,818 --> 00:42:04,139
on to step two of this process which is

753
00:42:05,039 --> 00:42:12,489
taking a look inside the part where we

754
00:42:09,548 --> 00:42:14,440
submit the textures and seeing whether

755
00:42:12,489 --> 00:42:16,749
or not when we submit the actual

756
00:42:14,440 --> 00:42:21,309
textures whether we set anything

757
00:42:16,748 --> 00:42:23,618
sensible for them or not right so

758
00:42:21,309 --> 00:42:24,910
because again we we now know that it

759
00:42:23,619 --> 00:42:27,940
looks like the texture date is being

760
00:42:24,909 --> 00:42:30,278
prepped properly in memory we what we

761
00:42:27,940 --> 00:42:32,979
don't know is whether or not OpenGL ever

762
00:42:30,278 --> 00:42:33,400
gets that texture data so like right

763
00:42:32,978 --> 00:42:36,419
here

764
00:42:33,400 --> 00:42:40,809
you can see where we do our submissions

765
00:42:36,420 --> 00:42:42,940
entropy next entry C entry lookup we

766
00:42:40,809 --> 00:42:49,509
don't really know whether any of this

767
00:42:42,940 --> 00:42:51,220
stuff worked right like we don't know we

768
00:42:49,510 --> 00:42:53,500
have no idea whether any of this stuff

769
00:42:51,219 --> 00:42:58,449
got put in properly it could be

770
00:42:53,500 --> 00:43:00,369
completely incorrect right so that's the

771
00:42:58,449 --> 00:43:02,619
next thing we got to take a look at we

772
00:43:00,369 --> 00:43:05,679
also don't know what order these are

773
00:43:02,619 --> 00:43:08,710
stored in and this is kind of a big deal

774
00:43:05,679 --> 00:43:10,029
I guess I and it looks like I didn't

775
00:43:08,710 --> 00:43:11,530
give it much thought when we first put

776
00:43:10,030 --> 00:43:14,320
this in here so maybe I was just in a

777
00:43:11,530 --> 00:43:16,240
hurry and didn't have a chance to take a

778
00:43:14,320 --> 00:43:23,650
look at it but if you see here we've got

779
00:43:16,239 --> 00:43:26,349
X Y &amp; Z as the three indices here I

780
00:43:23,650 --> 00:43:32,829
don't know if that's actually what we're

781
00:43:26,349 --> 00:43:35,860
doing meaning I don't know whether we're

782
00:43:32,829 --> 00:43:39,940
storing them that way in the actual

783
00:43:35,860 --> 00:43:44,950
voxel writing routine itself so for

784
00:43:39,940 --> 00:43:49,119
example if you look at what's going on

785
00:43:44,949 --> 00:43:52,210
here we're indexing by X as the least

786
00:43:49,119 --> 00:43:54,789
significant factor Y in the middle and Z

787
00:43:52,210 --> 00:43:57,849
is the most significant factor I don't

788
00:43:54,789 --> 00:44:00,429
know what OpenGL is going to do I assume

789
00:43:57,849 --> 00:44:01,779
it will do it in that order but we would

790
00:44:00,429 --> 00:44:04,000
probably should go look at some

791
00:44:01,780 --> 00:44:06,960
documentation to verify that that's

792
00:44:04,000 --> 00:44:06,960
actually correct

793
00:44:13,550 --> 00:44:17,390
so when we do these text sub image calls

794
00:44:15,860 --> 00:44:20,079
I want to take a look to make sure we've

795
00:44:17,389 --> 00:44:23,509
defined these textures correctly as well

796
00:44:20,079 --> 00:44:28,759
so if I go back to where we're doing

797
00:44:23,510 --> 00:44:31,220
lighting where we're going back to the

798
00:44:28,760 --> 00:44:37,760
lighting P next and I look at these and

799
00:44:31,219 --> 00:44:41,299
see how we're storing them I mean this

800
00:44:37,760 --> 00:44:44,330
looks wrong to me already if you take a

801
00:44:41,300 --> 00:44:47,390
look at how these are being sent

802
00:44:44,329 --> 00:44:49,489
when I say GL text image 1d I'm saying

803
00:44:47,389 --> 00:44:51,259
that I'm passing an unsigned byte which

804
00:44:49,489 --> 00:44:53,059
I suppose doesn't matter because we're

805
00:44:51,260 --> 00:44:55,700
not passing any data but I'm saying that

806
00:44:53,059 --> 00:44:59,179
the internal storage format is only 8

807
00:44:55,699 --> 00:45:01,219
bits wide but we said that our internal

808
00:44:59,179 --> 00:45:04,009
storage format was going to be quite

809
00:45:01,219 --> 00:45:11,449
different than that we said it was going

810
00:45:04,010 --> 00:45:17,120
to be 16 bytes correct so this is not an

811
00:45:11,449 --> 00:45:20,029
r8 I mean this is an R 16 this is

812
00:45:17,119 --> 00:45:22,489
relatively correct it's 32 F meaning

813
00:45:20,030 --> 00:45:24,650
it's gonna be our g and b float then the

814
00:45:22,489 --> 00:45:27,589
final float which is actually the the

815
00:45:24,650 --> 00:45:28,970
next parameter is gonna have to be

816
00:45:27,590 --> 00:45:31,160
stored as a float anyway but we could

817
00:45:28,969 --> 00:45:36,559
we're gonna I guess convert it out of a

818
00:45:31,159 --> 00:45:38,389
float into a different value we're gonna

819
00:45:36,559 --> 00:45:39,559
reinterpret it as an integer which I

820
00:45:38,389 --> 00:45:42,799
assume is okay but we'll cross that

821
00:45:39,559 --> 00:45:47,840
bridge Pig come to it so that was not

822
00:45:42,800 --> 00:45:51,470
right I don't know how much of effect

823
00:45:47,840 --> 00:45:53,120
that would have had but you know any of

824
00:45:51,469 --> 00:45:55,339
those values above 2 to 6 would have

825
00:45:53,119 --> 00:45:57,670
been getting truncated so I don't know

826
00:45:55,340 --> 00:46:01,789
that could have been fairly significant

827
00:45:57,670 --> 00:46:09,590
it's probably not the only bug but it's

828
00:46:01,789 --> 00:46:12,559
definitely a bug so all right so we hope

829
00:46:09,590 --> 00:46:14,030
that this actually produces the empty

830
00:46:12,559 --> 00:46:16,210
space for the textures that we actually

831
00:46:14,030 --> 00:46:18,290
need and record their storage format

832
00:46:16,210 --> 00:46:19,940
properly but we don't actually know that

833
00:46:18,289 --> 00:46:21,590
and we don't actually know whether or

834
00:46:19,940 --> 00:46:23,809
not any of this data actually got down

835
00:46:21,590 --> 00:46:25,619
to them properly sadly I'm not really

836
00:46:23,809 --> 00:46:34,619
sure a good way to check to see

837
00:46:25,619 --> 00:46:36,088
if it did I'm gonna try inspecting this

838
00:46:34,619 --> 00:46:37,710
part maybe in the graphs debugger and

839
00:46:36,088 --> 00:46:39,808
we'll see if they can help us here what

840
00:46:37,710 --> 00:46:44,460
I can do is make sure that the Vox min

841
00:46:39,809 --> 00:46:46,559
corner and Vox in vim seldom are set

842
00:46:44,460 --> 00:46:50,338
correctly because those are just values

843
00:46:46,559 --> 00:46:56,249
that we can inspect and verify at that

844
00:46:50,338 --> 00:47:06,690
set time as well as when we set them in

845
00:46:56,248 --> 00:47:19,199
the shader prep right all right so if I

846
00:47:06,690 --> 00:47:23,429
go ahead and look at that so if I go

847
00:47:19,199 --> 00:47:26,960
ahead and look at that inside the open

848
00:47:23,429 --> 00:47:26,960
geo path I'm gonna have to

849
00:47:30,510 --> 00:47:43,380
okay open jail render commands what I

850
00:47:40,710 --> 00:47:45,000
want to do here is make sure that we're

851
00:47:43,380 --> 00:47:47,730
setting like the voxel look up

852
00:47:45,000 --> 00:47:59,159
parameters properly so I want to step to

853
00:47:47,730 --> 00:48:00,480
right oops that's the wrong key so I

854
00:47:59,159 --> 00:48:02,429
want to take a look here and make sure

855
00:48:00,480 --> 00:48:07,920
that those two values got set to the

856
00:48:02,429 --> 00:48:09,750
this you know what we were expecting so

857
00:48:07,920 --> 00:48:16,039
here's the voxel min corner here's the

858
00:48:09,750 --> 00:48:16,039
voxel inverse seldom that

859
00:48:28,630 --> 00:48:36,289
that looks about right so if you imagine

860
00:48:34,340 --> 00:48:38,920
the math that's going to happen here

861
00:48:36,289 --> 00:48:41,960
we're gonna take the min corner and

862
00:48:38,920 --> 00:48:44,840
we're going to subtract it away from

863
00:48:41,960 --> 00:48:46,309
whatever box lookup we have and we're

864
00:48:44,840 --> 00:48:48,740
gonna end up with a value that's gonna

865
00:48:46,309 --> 00:48:50,420
run from like negative 35 - 35 we're

866
00:48:48,739 --> 00:48:54,169
gonna subtract that 35 from it again

867
00:48:50,420 --> 00:48:59,690
with this one zero - like 60 or 70 and

868
00:48:54,170 --> 00:49:02,150
that times three is about 256 right so

869
00:48:59,690 --> 00:49:06,349
it does look like this is properly sort

870
00:49:02,150 --> 00:49:12,079
of you know pushing us in the direction

871
00:49:06,349 --> 00:49:14,599
we expect to go I don't know if we're

872
00:49:12,079 --> 00:49:17,420
actually setting those values properly

873
00:49:14,599 --> 00:49:19,969
so that's where I think we could maybe

874
00:49:17,420 --> 00:49:23,570
hopefully a little bit sort of kind of

875
00:49:19,969 --> 00:49:26,469
if every windows in the GPU decide to

876
00:49:23,570 --> 00:49:29,480
cooperate with us we could see perhaps

877
00:49:26,469 --> 00:49:31,399
some information from the graphics card

878
00:49:29,480 --> 00:49:36,170
to corroborate that which would be nice

879
00:49:31,400 --> 00:49:39,289
I'm gonna go ahead and try that here I'm

880
00:49:36,170 --> 00:49:42,950
not particularly optimistic but here we

881
00:49:39,289 --> 00:49:47,110
go so I'm going to go to the pause and

882
00:49:42,949 --> 00:49:50,960
capture frame we're gonna wait 17 years

883
00:49:47,110 --> 00:49:54,250
and after that 17 years has elapsed we

884
00:49:50,960 --> 00:49:58,929
will hope that maybe we will get some

885
00:49:54,250 --> 00:49:58,929
graphics analysis to look at

886
00:50:02,880 --> 00:50:12,700
okay so now that we have the graphics

887
00:50:06,820 --> 00:50:18,760
analysis we're gonna try to look at

888
00:50:12,699 --> 00:50:20,619
these textures so if we jump into a you

889
00:50:18,760 --> 00:50:22,570
know one of the render passes here you

890
00:50:20,619 --> 00:50:23,920
can see like our render target passes

891
00:50:22,570 --> 00:50:28,390
these are our depth fields here I

892
00:50:23,920 --> 00:50:32,289
believe happening right depth field zero

893
00:50:28,389 --> 00:50:33,549
one two three if we jump into a random

894
00:50:32,289 --> 00:50:35,199
one and you know in the middle of the

895
00:50:33,550 --> 00:50:37,570
depth feel or whatever we should be able

896
00:50:35,199 --> 00:50:39,699
to go see the lighting values because

897
00:50:37,570 --> 00:50:41,710
they're involved in every render right

898
00:50:39,699 --> 00:50:45,879
there set for every render and we should

899
00:50:41,710 --> 00:50:47,949
also be able to see in the fragment

900
00:50:45,880 --> 00:50:54,970
shader we should be able to see the

901
00:50:47,949 --> 00:50:56,980
voxel corner and stuff be set so there

902
00:50:54,969 --> 00:50:58,569
they are and so hey that's a nice thing

903
00:50:56,980 --> 00:51:00,159
that graphs the burger did for us that

904
00:50:58,570 --> 00:51:03,070
verifies that those values are actually

905
00:51:00,159 --> 00:51:06,309
being passed down correctly as we wanted

906
00:51:03,070 --> 00:51:07,990
them to be right so that's nice so let's

907
00:51:06,309 --> 00:51:11,710
see if we can take it a step further and

908
00:51:07,989 --> 00:51:13,599
see whether like our our textures here

909
00:51:11,710 --> 00:51:18,610
whether we can get any information about

910
00:51:13,599 --> 00:51:20,860
those I don't really know what this is

911
00:51:18,610 --> 00:51:22,150
showing me exactly but I think it's

912
00:51:20,860 --> 00:51:23,860
because it's too disease but yeah okay

913
00:51:22,150 --> 00:51:26,559
so since despite to about thirty two

914
00:51:23,860 --> 00:51:31,660
this is correct it's showing me the 32z

915
00:51:26,559 --> 00:51:33,309
levels of this you know texture right if

916
00:51:31,659 --> 00:51:36,190
I take a look at one of them

917
00:51:33,309 --> 00:51:38,500
I would have expected to see something

918
00:51:36,190 --> 00:51:42,599
here like I'm not seeing any pixels at

919
00:51:38,500 --> 00:51:48,219
all right everything appears to be zero

920
00:51:42,599 --> 00:51:51,599
I and that's just not good we know these

921
00:51:48,219 --> 00:51:51,599
are 16-bit integers

922
00:51:57,880 --> 00:52:08,559
let's get somebody here we know these

923
00:52:02,750 --> 00:52:11,510
are 16-bit integers I really don't know

924
00:52:08,559 --> 00:52:14,809
how to do anything particularly clever

925
00:52:11,510 --> 00:52:20,210
here but well so there's some so there

926
00:52:14,809 --> 00:52:22,219
we are sending down something right it's

927
00:52:20,210 --> 00:52:24,829
not very dense but again it wasn't very

928
00:52:22,219 --> 00:52:28,459
dense when we looked at it in our memory

929
00:52:24,829 --> 00:52:33,380
window either right it's because hey

930
00:52:28,460 --> 00:52:35,329
it's a sparse voxel I it even in you

931
00:52:33,380 --> 00:52:37,670
know if it's being done correctly it

932
00:52:35,329 --> 00:52:42,860
will not necessarily be particularly

933
00:52:37,670 --> 00:52:45,260
dense if I go back here and look at a

934
00:52:42,860 --> 00:52:52,640
graphical representation I don't know

935
00:52:45,260 --> 00:52:58,460
how to actually not actually see this

936
00:52:52,639 --> 00:53:02,900
one here's the color sampler for example

937
00:52:58,460 --> 00:53:04,970
I don't know why this only shows white

938
00:53:02,900 --> 00:53:08,000
when it actually doesn't show that here

939
00:53:04,969 --> 00:53:11,509
but anyway here's the color values and

940
00:53:08,000 --> 00:53:16,400
you can see RGB a rgba and again that

941
00:53:11,510 --> 00:53:18,800
looks like what we thought you know that

942
00:53:16,400 --> 00:53:23,180
looks I don't see anything particularly

943
00:53:18,800 --> 00:53:27,200
unusual there and same is true for this

944
00:53:23,179 --> 00:53:30,399
I don't really know how to say much

945
00:53:27,199 --> 00:53:36,799
about the position one I could look at

946
00:53:30,400 --> 00:53:39,440
it s 32-bit floats here and you know

947
00:53:36,800 --> 00:53:45,859
those look like valid light positions

948
00:53:39,440 --> 00:53:50,300
certainly I seem literally no next

949
00:53:45,858 --> 00:53:53,389
parameters which is weird that feels

950
00:53:50,300 --> 00:53:55,940
wrong I don't know if maybe we just

951
00:53:53,389 --> 00:53:57,500
never fill our voxel any deeper than

952
00:53:55,940 --> 00:53:59,358
that but it seems like we should have to

953
00:53:57,500 --> 00:54:01,519
at some point there should be two in the

954
00:53:59,358 --> 00:54:02,980
same place but I don't see that ever

955
00:54:01,519 --> 00:54:06,259
happening which is a little bit weird

956
00:54:02,980 --> 00:54:08,480
that maybe because you can't send down

957
00:54:06,260 --> 00:54:10,160
bogus floats it may be that we have to

958
00:54:08,480 --> 00:54:14,559
switch this to 32-bit but

959
00:54:10,159 --> 00:54:14,559
again even if that were the case that

960
00:54:16,539 --> 00:54:25,960
that as a bug should not actually be

961
00:54:20,690 --> 00:54:29,869
causing us any harm because we know that

962
00:54:25,960 --> 00:54:33,139
we're not even seeing a first light

963
00:54:29,869 --> 00:54:36,829
value anywhere at least as far as we can

964
00:54:33,139 --> 00:54:38,480
tell because even if we set all the

965
00:54:36,829 --> 00:54:41,269
colors to black and weren't sending any

966
00:54:38,480 --> 00:54:44,599
of that down just if there was even just

967
00:54:41,269 --> 00:54:47,179
a lookup hit if we ever hit the lookup

968
00:54:44,599 --> 00:54:48,949
properly even once we would see green

969
00:54:47,179 --> 00:54:52,369
because we're stuffing a green value if

970
00:54:48,949 --> 00:54:54,199
the lookup value ever succeeds so we

971
00:54:52,369 --> 00:54:58,309
don't even care about the next corner we

972
00:54:54,199 --> 00:55:01,219
should be seeing some green somewhere if

973
00:54:58,309 --> 00:55:04,219
we were not completely busted so we know

974
00:55:01,219 --> 00:55:08,029
that something is much more busted than

975
00:55:04,219 --> 00:55:10,339
just that well hey the graphs do bugger

976
00:55:08,030 --> 00:55:13,310
did something useful right that's a good

977
00:55:10,340 --> 00:55:18,100
thing we can applaud that we were able

978
00:55:13,309 --> 00:55:22,719
to actually see you know some some

979
00:55:18,099 --> 00:55:22,719
corroboration here that we weren't nuts

980
00:55:23,170 --> 00:55:28,579
and that we were sending down to our

981
00:55:25,579 --> 00:55:30,170
values properly so that's good so we

982
00:55:28,579 --> 00:55:31,789
think those are relatively correct the

983
00:55:30,170 --> 00:55:33,349
next pointer it looks like that's

984
00:55:31,789 --> 00:55:42,590
incorrect so it looks like we will have

985
00:55:33,349 --> 00:55:44,389
to send down that mixed-mode texture it

986
00:55:42,590 --> 00:55:46,789
looks like we've gonna have to do more

987
00:55:44,389 --> 00:55:48,199
work there we could all we could

988
00:55:46,789 --> 00:55:52,610
possibly send that down as part of the

989
00:55:48,199 --> 00:55:55,339
other one who knows what we can probably

990
00:55:52,610 --> 00:55:58,519
do something but but we've we've got

991
00:55:55,340 --> 00:56:00,200
some issues there so anyway let's go

992
00:55:58,519 --> 00:56:01,670
take a look at that shader maybe there's

993
00:56:00,199 --> 00:56:03,139
something that we're doing wrong in

994
00:56:01,670 --> 00:56:08,840
terms of when we're doing the lookup

995
00:56:03,139 --> 00:56:11,559
that we could you know fix and and see

996
00:56:08,840 --> 00:56:11,559
what's going on there

997
00:56:11,570 --> 00:56:15,220
so let's see here

998
00:56:15,898 --> 00:56:20,259
so there's a couple of things on the

999
00:56:17,949 --> 00:56:22,358
table like I was saying before we don't

1000
00:56:20,259 --> 00:56:24,489
really know how the indexing is working

1001
00:56:22,358 --> 00:56:25,958
inside OpenGL when we send down that

1002
00:56:24,489 --> 00:56:28,659
texture it could be that we got the

1003
00:56:25,958 --> 00:56:31,538
indices backwards I don't really know

1004
00:56:28,659 --> 00:56:34,419
because we are assuming that it follows

1005
00:56:31,539 --> 00:56:39,189
the same convention as XY textures where

1006
00:56:34,418 --> 00:56:41,558
the X Y values are specified in the GL

1007
00:56:39,188 --> 00:56:42,518
text image call you get X Y but when

1008
00:56:41,559 --> 00:56:45,489
you're indexing they're actually

1009
00:56:42,518 --> 00:56:48,368
indexing X minor y major we assume that

1010
00:56:45,489 --> 00:56:51,130
X Y Z follows the same rule meaning that

1011
00:56:48,369 --> 00:56:55,419
X is still minor Y is more major and Z

1012
00:56:51,130 --> 00:56:56,798
is most major but we might have to

1013
00:56:55,418 --> 00:56:58,208
verify that because we don't really know

1014
00:56:56,798 --> 00:57:02,018
that it's necessarily true we're just

1015
00:56:58,208 --> 00:57:03,548
assuming this true I but anyway inside

1016
00:57:02,018 --> 00:57:06,188
here if we take a look at what's going

1017
00:57:03,548 --> 00:57:07,958
on it seems fairly straightforward we're

1018
00:57:06,188 --> 00:57:10,808
taking the world position which we

1019
00:57:07,958 --> 00:57:23,259
believe we have correct it gets passed

1020
00:57:10,809 --> 00:57:24,909
in from the vertex shader directly so

1021
00:57:23,259 --> 00:57:30,068
that's an unmolested world position

1022
00:57:24,909 --> 00:57:34,179
right so hopefully we take that

1023
00:57:30,068 --> 00:57:36,489
unmolested world position there which is

1024
00:57:34,179 --> 00:57:40,539
includes the Z bias which is what we

1025
00:57:36,489 --> 00:57:44,588
want actually so that's all fine we take

1026
00:57:40,539 --> 00:57:47,079
that unmolested roll position we

1027
00:57:44,588 --> 00:57:47,978
subtract the Foxman corner from it looks

1028
00:57:47,079 --> 00:57:50,709
like they miss somebody with the

1029
00:57:47,978 --> 00:57:55,148
position we floor that that all seems

1030
00:57:50,708 --> 00:57:57,158
like reasonable work to me

1031
00:57:55,148 --> 00:57:59,199
we are currently over writing the value

1032
00:57:57,159 --> 00:58:03,209
by looking up into a place where we

1033
00:57:59,199 --> 00:58:05,918
believe there to be a value already

1034
00:58:03,208 --> 00:58:08,408
we're doing a Texel fetch into that

1035
00:58:05,918 --> 00:58:12,908
lookup sampler with that hard-coded

1036
00:58:08,409 --> 00:58:15,278
address and you know we're grabbing the

1037
00:58:12,909 --> 00:58:17,979
read value out of there we're

1038
00:58:15,278 --> 00:58:24,309
multiplying that read by value by 65535

1039
00:58:17,978 --> 00:58:25,898
and adding 0.5 I don't know I don't

1040
00:58:24,309 --> 00:58:28,620
really know the specifics of how that

1041
00:58:25,898 --> 00:58:31,690
Texel fetch is working

1042
00:58:28,619 --> 00:58:31,690
[Music]

1043
00:58:33,559 --> 00:58:38,429
so when you do something like a Texel

1044
00:58:36,570 --> 00:58:41,010
fetch in open jail I always have trouble

1045
00:58:38,429 --> 00:58:43,619
remembering how you how you're supposed

1046
00:58:41,010 --> 00:58:45,750
to tell it that this thing we're looking

1047
00:58:43,619 --> 00:58:51,089
up into is a 16-bit value and I don't

1048
00:58:45,750 --> 00:58:53,190
want you to turn into a float right I'm

1049
00:58:51,090 --> 00:58:58,650
not sure I mean let me take a look at

1050
00:58:53,190 --> 00:59:00,090
that right now what we're doing is it's

1051
00:58:58,650 --> 00:59:02,360
turning into a float and we're turning

1052
00:59:00,090 --> 00:59:02,360
it back

1053
00:59:22,539 --> 00:59:30,440
yeah so this is let me see we've got two

1054
00:59:27,110 --> 00:59:40,120
things here not from particularly great

1055
00:59:30,440 --> 00:59:40,119
sources unfortunately let's see

1056
00:59:45,730 --> 00:59:53,340
this is old like luminance is not still

1057
00:59:49,719 --> 00:59:53,339
a value so that's not going to help us

1058
01:00:08,088 --> 01:00:21,139
so I guess it's true I'm not passing you

1059
01:00:11,869 --> 01:00:23,119
I which I should however yeah is you

1060
01:00:21,139 --> 01:00:25,188
sampler available in what we're using

1061
01:00:23,119 --> 01:00:33,278
right now because that I probably should

1062
01:00:25,188 --> 01:00:36,288
be doing right like that would be better

1063
01:00:33,278 --> 01:00:39,889
and I'm not sure whether we've got that

1064
01:00:36,289 --> 01:00:44,329
or not I believe we're still set up to

1065
01:00:39,889 --> 01:00:49,728
error when we have a compilation fail so

1066
01:00:44,329 --> 01:00:52,068
I'm assuming that we will hit that but

1067
01:00:49,728 --> 01:00:55,458
what I would like to do here is yeah

1068
01:00:52,068 --> 01:00:57,498
like the these two we actually want

1069
01:00:55,458 --> 01:01:00,798
float at least at the moment but use

1070
01:00:57,498 --> 01:01:05,149
sampler 3d for this I think is what I

1071
01:01:00,798 --> 01:01:07,458
would would ideally like to use so if

1072
01:01:05,150 --> 01:01:09,349
you do a youth sampler and you do a

1073
01:01:07,458 --> 01:01:13,038
textile fetch I wonder if you can get

1074
01:01:09,349 --> 01:01:15,259
out exactly just the the integers there

1075
01:01:13,039 --> 01:01:19,959
I can also make sure that inside the

1076
01:01:15,259 --> 01:01:19,958
OpenGL loop again I pass

1077
01:01:31,110 --> 01:01:46,539
in here instead of an R 16 I wonder if I

1078
01:01:35,019 --> 01:01:49,509
can do in our 16 UI hopefully so if

1079
01:01:46,539 --> 01:01:51,489
that's the case it the you know OpenGL

1080
01:01:49,510 --> 01:02:02,140
would then know exactly what I was

1081
01:01:51,489 --> 01:02:04,719
trying store there and maybe I can get a

1082
01:02:02,139 --> 01:02:09,449
more direct look up here so when I fetch

1083
01:02:04,719 --> 01:02:17,349
this out you know it would just be like

1084
01:02:09,449 --> 01:02:20,250
Texas fetch and don't know can I

1085
01:02:17,349 --> 01:02:20,250
actually do that

1086
01:02:25,679 --> 01:02:40,289
oh OpenGL program yeah I don't why did

1087
01:02:37,650 --> 01:02:43,200
it break all the way up there I don't

1088
01:02:40,289 --> 01:02:45,509
really know this is probably something I

1089
01:02:43,199 --> 01:02:48,029
can configure in the new thing right

1090
01:02:45,510 --> 01:02:49,710
over anyway that says what I wanted to

1091
01:02:48,030 --> 01:02:51,869
have happen so now I can actually look

1092
01:02:49,710 --> 01:03:02,818
at the error so that's fine

1093
01:02:51,869 --> 01:03:04,680
vertex errors fragment errors program so

1094
01:03:02,818 --> 01:03:07,199
that's actually good implicit class from

1095
01:03:04,679 --> 01:03:08,639
you int to end that's great because that

1096
01:03:07,199 --> 01:03:11,429
basically means that that text will

1097
01:03:08,639 --> 01:03:13,318
fetch now is producing an unsigned

1098
01:03:11,429 --> 01:03:17,129
integer which is fantastic that's what I

1099
01:03:13,318 --> 01:03:22,519
wanted that's what I was hoping for so

1100
01:03:17,130 --> 01:03:22,519
let's find out if that flies

1101
01:03:27,500 --> 01:03:44,849
125 what we don't look up into the look

1102
01:03:40,409 --> 01:03:52,019
up sampler anywhere else though do we

1103
01:03:44,849 --> 01:03:54,559
I guess right here we're assigning to

1104
01:03:52,019 --> 01:03:54,559
light I

1105
01:04:01,170 --> 01:04:08,590
is it just that textile fetch wants an

1106
01:04:04,119 --> 01:04:19,809
actual int not a you ain't all the time

1107
01:04:08,590 --> 01:04:22,030
like it can't use a you ain't kind of

1108
01:04:19,809 --> 01:04:23,799
looks that way it also looks like for

1109
01:04:22,030 --> 01:04:27,760
some reason it's complaining about this

1110
01:04:23,800 --> 01:04:35,970
like I guess zero is not one of those so

1111
01:04:27,760 --> 01:04:35,970
I guess I'll just do this for now and

1112
01:04:41,039 --> 01:04:49,380
see how we do oh right forgot it

1113
01:04:45,989 --> 01:05:02,309
forgot that opengl has the sort of

1114
01:04:49,380 --> 01:05:02,309
function style cast so we got an error

1115
01:05:02,340 --> 01:05:05,700
what is the error

1116
01:05:15,619 --> 01:05:25,740
texture type and format combination is

1117
01:05:18,570 --> 01:05:30,750
not valid so it didn't like it didn't

1118
01:05:25,739 --> 01:05:34,529
like this for whatever reason so our 16

1119
01:05:30,750 --> 01:05:37,010
UI it did not want me to specify it

1120
01:05:34,530 --> 01:05:37,010
looks like

1121
01:05:57,510 --> 01:06:02,319
so I can't say I know why it would be

1122
01:06:00,280 --> 01:06:04,420
particularly upset about that because

1123
01:06:02,318 --> 01:06:06,099
that looks like the sort of thing that

1124
01:06:04,420 --> 01:06:08,289
would be relatively straightforward I

1125
01:06:06,099 --> 01:06:10,088
mean all we're doing is saying hey you

1126
01:06:08,289 --> 01:06:16,480
know we're we're not even sending down

1127
01:06:10,088 --> 01:06:19,900
any data you know it's just a zero

1128
01:06:16,480 --> 01:06:21,490
pointer so all you have to do all we're

1129
01:06:19,900 --> 01:06:24,160
doing is telling it the internal storage

1130
01:06:21,489 --> 01:06:31,750
format of the texture which we want it

1131
01:06:24,159 --> 01:06:38,789
to be 16-bit unsigned integer but it

1132
01:06:31,750 --> 01:06:38,789
doesn't like that and I'm not sure why

1133
01:06:55,909 --> 01:07:03,409
so does that imply that 3d textures for

1134
01:06:59,219 --> 01:07:03,409
some reason cannot be unsigned integers

1135
01:07:07,010 --> 01:07:12,420
which I mean and again we don't really

1136
01:07:09,420 --> 01:07:14,550
even necessarily need a 3d texture cuz

1137
01:07:12,420 --> 01:07:16,380
we can do our lookups manually we could

1138
01:07:14,550 --> 01:07:19,680
you know we could easily do this with a

1139
01:07:16,380 --> 01:07:21,660
non 3d texture just a bigger 2d texture

1140
01:07:19,679 --> 01:07:24,119
or something like that but I'm not sure

1141
01:07:21,659 --> 01:07:26,909
why it would care what the internal

1142
01:07:24,119 --> 01:07:36,569
format of the texture was just because

1143
01:07:26,909 --> 01:07:41,569
it was 3d it looks maybe more like it

1144
01:07:36,570 --> 01:07:41,570
doesn't know what that format is

1145
01:08:10,059 --> 01:08:13,779
so let's see

1146
01:08:32,529 --> 01:08:36,039
let's see

1147
01:08:38,529 --> 01:08:49,460
so inside internal format this is old

1148
01:08:45,680 --> 01:08:51,200
news let me see if I can get something

1149
01:08:49,460 --> 01:08:53,859
that says what we should be able to

1150
01:08:51,199 --> 01:08:53,858
specify there

1151
01:09:16,779 --> 01:09:27,469
so interestingly enough it actually

1152
01:09:22,448 --> 01:09:29,568
specifically says right here that that's

1153
01:09:27,469 --> 01:09:34,630
one of the constants that would be

1154
01:09:29,569 --> 01:09:34,630
allowed right

1155
01:09:53,658 --> 01:09:59,208
and GL red is also accepted here not

1156
01:09:57,260 --> 01:10:02,289
that we care because again we're not

1157
01:09:59,208 --> 01:10:02,288
really sending anything down

1158
01:10:13,090 --> 01:10:17,100
so I don't see anything

1159
01:10:35,859 --> 01:10:40,569
hmm so I don't really see what we can do

1160
01:10:38,560 --> 01:10:42,400
there differently that looks like

1161
01:10:40,569 --> 01:10:43,479
something that should work unfortunately

1162
01:10:42,399 --> 01:10:48,399
they're not giving us enough information

1163
01:10:43,479 --> 01:10:50,799
to know what it doesn't like about it it

1164
01:10:48,399 --> 01:10:56,889
said format and type are not compatible

1165
01:10:50,800 --> 01:11:05,190
I believe and I guess technically that's

1166
01:10:56,890 --> 01:11:05,190
those two unless it means this and this

1167
01:11:05,460 --> 01:11:12,750
but they look correctly compatible

1168
01:11:13,500 --> 01:11:20,460
because that are 16 you I would in

1169
01:11:17,529 --> 01:11:23,500
theory be exactly read unsigned short

1170
01:11:20,460 --> 01:11:27,789
right I mean that's exactly what you

1171
01:11:23,500 --> 01:11:30,220
would expect to have there because that

1172
01:11:27,789 --> 01:11:34,750
is what an R 16 UI is it's a read

1173
01:11:30,220 --> 01:11:36,039
unsigned short so it doesn't seem like

1174
01:11:34,750 --> 01:11:39,300
it would really be complaining about

1175
01:11:36,039 --> 01:11:39,300
that I'm not sure

1176
01:11:45,119 --> 01:11:53,609
so strictly out of curiosity what if I

1177
01:11:48,180 --> 01:11:53,610
just asked it for an even bigger one

1178
01:12:00,449 --> 01:12:10,149
doesn't like that how about a floating

1179
01:12:03,789 --> 01:12:12,399
point one so it's totally fine with

1180
01:12:10,149 --> 01:12:13,059
floating point floating points no

1181
01:12:12,399 --> 01:12:15,219
problem

1182
01:12:13,060 --> 01:12:27,160
but it really doesn't want an integer

1183
01:12:15,220 --> 01:12:31,300
texture I guess so I could store a

1184
01:12:27,159 --> 01:12:34,000
32-bit float per texture channel in the

1185
01:12:31,300 --> 01:12:44,829
3d texture but I just can't have an

1186
01:12:34,000 --> 01:12:47,079
unsigned integer of any size at all so I

1187
01:12:44,829 --> 01:12:57,880
wonder what happens what happens if it's

1188
01:12:47,079 --> 01:13:05,189
just signed is that also bad yep so it

1189
01:12:57,880 --> 01:13:08,109
has to be float why I don't understand

1190
01:13:05,189 --> 01:13:09,519
what's magic about floating point values

1191
01:13:08,109 --> 01:13:10,929
that it really wants to store floating

1192
01:13:09,520 --> 01:13:13,560
point values it really doesn't want to

1193
01:13:10,930 --> 01:13:13,560
store anything else

1194
01:13:20,979 --> 01:13:25,269
[Music]

1195
01:13:41,819 --> 01:13:47,739
well I can't say I know what the deal is

1196
01:13:45,369 --> 01:13:54,069
here or why anyone would care because

1197
01:13:47,739 --> 01:13:57,550
we'd really just want blind to texture

1198
01:13:54,069 --> 01:14:00,009
data we could change to using some kind

1199
01:13:57,550 --> 01:14:04,510
of a buffer lookup I suppose because we

1200
01:14:00,010 --> 01:14:06,159
don't really need I mean yeah I mean we

1201
01:14:04,510 --> 01:14:08,380
don't really care about the texture

1202
01:14:06,159 --> 01:14:10,329
aspect of this right

1203
01:14:08,380 --> 01:14:12,190
we're not asking it to texture from it

1204
01:14:10,329 --> 01:14:15,069
really in the way that you would

1205
01:14:12,189 --> 01:14:17,199
normally do these lookups but I guess

1206
01:14:15,069 --> 01:14:22,659
what that means is all right if we're

1207
01:14:17,199 --> 01:14:23,889
gonna have to do a float if we would

1208
01:14:22,659 --> 01:14:26,619
have to do a float then we could do a

1209
01:14:23,890 --> 01:14:28,869
float right and that would be fine

1210
01:14:26,619 --> 01:14:30,189
we could just have a single 32-bit entry

1211
01:14:28,869 --> 01:14:37,930
that was a float and the floating-point

1212
01:14:30,189 --> 01:14:39,429
value we decrypt right I mean we can

1213
01:14:37,930 --> 01:14:43,289
just store this thing as a floating

1214
01:14:39,430 --> 01:14:45,850
point value and that's no big deal I

1215
01:14:43,289 --> 01:14:48,399
really just don't understand why integer

1216
01:14:45,850 --> 01:14:52,300
isn't on the table because we know that

1217
01:14:48,399 --> 01:14:56,439
it's already an integer I mean like rgba

1218
01:14:52,300 --> 01:14:59,440
eight for example he is already an 8-bit

1219
01:14:56,439 --> 01:15:03,250
integer format right we know that it can

1220
01:14:59,439 --> 01:15:05,189
store textures that way so I'm not sure

1221
01:15:03,250 --> 01:15:10,180
why it doesn't really want to store them

1222
01:15:05,189 --> 01:15:12,549
in some other way but you know that's

1223
01:15:10,180 --> 01:15:14,320
just how it goes I guess so if it wants

1224
01:15:12,550 --> 01:15:15,940
to store them only as float that's okay

1225
01:15:14,319 --> 01:15:18,969
we can do that for now but it would be

1226
01:15:15,939 --> 01:15:21,669
nice to know how to convince it not to

1227
01:15:18,970 --> 01:15:23,050
do that if we were going to do that then

1228
01:15:21,670 --> 01:15:27,130
what we'd have to do is when we look up

1229
01:15:23,050 --> 01:15:31,119
this value we would yeah we'd have to do

1230
01:15:27,130 --> 01:15:33,609
essentially what we're doing before we'd

1231
01:15:31,119 --> 01:15:38,289
have to multiply it by 6 5 5 through 6

1232
01:15:33,609 --> 01:15:43,409
when we do the textile fetch and make

1233
01:15:38,289 --> 01:15:43,409
sure it around right

1234
01:15:43,859 --> 01:15:48,869
and so when we go to submit that texture

1235
01:15:47,550 --> 01:15:55,739
I don't know if we want to submit it as

1236
01:15:48,869 --> 01:16:03,930
float as well just to make sure but

1237
01:15:55,739 --> 01:16:09,719
that's the basic idea so I don't really

1238
01:16:03,930 --> 01:16:10,980
know why that's going on there it really

1239
01:16:09,720 --> 01:16:16,409
doesn't seem like it should have to

1240
01:16:10,979 --> 01:16:18,629
happen but but there you go so one thing

1241
01:16:16,409 --> 01:16:20,340
I would like to know is can we step into

1242
01:16:18,630 --> 01:16:26,609
that shader I don't know if that's

1243
01:16:20,340 --> 01:16:29,180
asking too much it probably is but let

1244
01:16:26,609 --> 01:16:29,179
me see here

1245
01:16:48,239 --> 01:16:51,929
go ahead and capture

1246
01:17:05,750 --> 01:17:18,948
so all right if we want to take a look

1247
01:17:11,420 --> 01:17:21,550
at one of these shader calls here's the

1248
01:17:18,948 --> 01:17:21,549
fragment shader

1249
01:17:33,869 --> 01:17:35,930
you

1250
01:17:42,779 --> 01:17:46,769
let me just see if it will let me insert

1251
01:17:45,300 --> 01:17:51,869
a breakpoint here doesn't look like it

1252
01:17:46,770 --> 01:17:53,489
will unfortunately I was hoping we could

1253
01:17:51,869 --> 01:18:08,969
do something where we could actually

1254
01:17:53,488 --> 01:18:10,198
take a look at some of the I was gonna

1255
01:18:08,969 --> 01:18:13,399
see if we could take a look at some of

1256
01:18:10,198 --> 01:18:17,299
the shader code there in action

1257
01:18:13,399 --> 01:18:17,299
but that doesn't look likely

1258
01:18:25,390 --> 01:18:30,610
let's see I have done this before

1259
01:18:28,960 --> 01:18:39,789
successfully I just don't remember

1260
01:18:30,609 --> 01:18:43,199
exactly how I convinced it to work I do

1261
01:18:39,789 --> 01:18:43,199
remember it took a little while of

1262
01:18:50,729 --> 01:18:57,209
course I've never done it in this

1263
01:18:52,810 --> 01:18:57,210
particular version of Visual Studio or

1264
01:18:57,779 --> 01:19:01,739
or in sight but

1265
01:19:12,220 --> 01:19:23,180
you see so let me look up because I

1266
01:19:16,489 --> 01:19:25,729
really do think you can do this step and

1267
01:19:23,180 --> 01:19:28,510
say at least under certain certain

1268
01:19:25,729 --> 01:19:28,509
circumstances

1269
01:19:40,989 --> 01:19:50,289
access the sheeter debugger start

1270
01:19:48,819 --> 01:19:54,219
debugging your graphs project from

1271
01:19:50,289 --> 01:19:56,439
insight windows shaders okay there we go

1272
01:19:54,220 --> 01:20:04,710
I knew there was a way to do it it's

1273
01:19:56,439 --> 01:20:04,710
just it's been a while there it is

1274
01:20:06,899 --> 01:20:16,259
alright so in theory

1275
01:20:32,359 --> 01:20:41,429
let's see here so in theory we want

1276
01:20:35,550 --> 01:20:41,909
program 21 which is this one right so

1277
01:20:41,430 --> 01:20:50,070
there we go

1278
01:20:41,909 --> 01:20:54,019
all right the following table shows the

1279
01:20:50,069 --> 01:20:54,019
possible states of the symbolic status

1280
01:20:54,529 --> 01:21:00,119
ready jitter has not been used that

1281
01:20:58,350 --> 01:21:12,990
application no symbols have been loaded

1282
01:21:00,119 --> 01:21:17,010
not a dub Bugaboo later however where

1283
01:21:12,989 --> 01:21:20,729
does that get listed I don't see any of

1284
01:21:17,010 --> 01:21:25,100
those things listed anywhere I don't

1285
01:21:20,729 --> 01:21:25,099
know why it says debug info none ah

1286
01:21:25,729 --> 01:21:32,459
shader debugging is not supported for

1287
01:21:28,409 --> 01:21:33,059
this GPU well I guess that answers that

1288
01:21:32,460 --> 01:21:37,020
question

1289
01:21:33,060 --> 01:21:40,230
I don't know why shader debugging is not

1290
01:21:37,020 --> 01:21:42,870
supported for this GPU do I need to

1291
01:21:40,229 --> 01:21:46,139
install a debug driver perhaps so maybe

1292
01:21:42,869 --> 01:21:50,869
that would fix it because I would like

1293
01:21:46,140 --> 01:21:50,869
to but maybe this GPU just can't do it

1294
01:22:18,389 --> 01:22:23,340
so it looks like they maybe just don't

1295
01:22:20,520 --> 01:22:25,380
support modern GPUs for shader debugging

1296
01:22:23,340 --> 01:22:27,500
like they like shader debugging just

1297
01:22:25,380 --> 01:22:30,179
went away

1298
01:22:27,500 --> 01:22:33,779
which I guess that's just like kind of a

1299
01:22:30,179 --> 01:22:36,750
future regression maybe because we are

1300
01:22:33,779 --> 01:22:37,948
using the latest version so I don't

1301
01:22:36,750 --> 01:22:41,729
think it's a question of having to

1302
01:22:37,948 --> 01:22:43,799
update n site I guess it's just insight

1303
01:22:41,729 --> 01:22:46,859
you know their GP is no longer support

1304
01:22:43,800 --> 01:22:49,320
trader debugging I guess that would be

1305
01:22:46,859 --> 01:22:50,880
bad because we want them to go towards

1306
01:22:49,319 --> 01:22:52,738
supporting shader debugging they

1307
01:22:50,880 --> 01:22:53,909
actually support less jitter debugging

1308
01:22:52,738 --> 01:23:03,468
on this than they did on the old series

1309
01:22:53,908 --> 01:23:03,469
that would be bad but I'm not sure

1310
01:23:07,859 --> 01:23:26,618
let me just double-check just want to

1311
01:23:25,359 --> 01:23:28,029
make sure there isn't a different

1312
01:23:26,618 --> 01:23:30,598
version of the driver that you have to

1313
01:23:28,029 --> 01:23:30,599
install

1314
01:23:45,849 --> 01:23:51,590
hmm I don't know so I'm not sure why

1315
01:23:49,849 --> 01:23:53,150
that is I we'd have to ask someone at

1316
01:23:51,590 --> 01:23:55,219
Nvidia I guess

1317
01:23:53,149 --> 01:23:57,799
whether or not we're supposed to be able

1318
01:23:55,219 --> 01:24:01,130
to do that or whether like you just

1319
01:23:57,800 --> 01:24:03,979
can't debug shaders anymore you have to

1320
01:24:01,130 --> 01:24:07,819
go go buy an old your older graphics

1321
01:24:03,979 --> 01:24:12,530
card in order to debug a shader I have

1322
01:24:07,819 --> 01:24:14,478
no idea however for the time being

1323
01:24:12,529 --> 01:24:18,408
anyway we will not be able to do that so

1324
01:24:14,479 --> 01:24:20,810
that's fine I if we wanted to do

1325
01:24:18,408 --> 01:24:23,210
something

1326
01:24:20,810 --> 01:24:28,100
I don't know like if we wanted to take a

1327
01:24:23,210 --> 01:24:29,539
quick moment to try and display some

1328
01:24:28,100 --> 01:24:31,280
more debug information here one of

1329
01:24:29,539 --> 01:24:36,408
things I'm gonna do is I'm gonna get rid

1330
01:24:31,279 --> 01:24:39,769
of this to see if we ever get into that

1331
01:24:36,408 --> 01:24:42,670
light loop anywhere I mean it looks like

1332
01:24:39,770 --> 01:24:45,620
we don't right no matter where we're

1333
01:24:42,670 --> 01:24:48,350
sort of pinging I also we we need to get

1334
01:24:45,619 --> 01:24:50,500
rid of that debug like our voxel is

1335
01:24:48,350 --> 01:24:52,760
shrunk down quite a bit from what its

1336
01:24:50,500 --> 01:24:56,689
compressed way more than it should be

1337
01:24:52,760 --> 01:24:59,360
because of this bounding solid that

1338
01:24:56,689 --> 01:25:01,789
we're sending down there and I really

1339
01:24:59,359 --> 01:25:05,509
don't want that to be included in the

1340
01:25:01,789 --> 01:25:07,310
solution so that's like kind of a bit of

1341
01:25:05,510 --> 01:25:09,440
an issue there let me see if I can just

1342
01:25:07,310 --> 01:25:13,480
get rid of that really quickly as well

1343
01:25:09,439 --> 01:25:13,479
so we don't have to contend with it

1344
01:25:26,099 --> 01:25:33,270
so here's push volume outline push

1345
01:25:30,899 --> 01:25:40,979
direct outline all of these I'm gonna

1346
01:25:33,270 --> 01:25:42,750
get rid of all of those and so now we

1347
01:25:40,979 --> 01:25:45,029
shouldn't have anything off the distance

1348
01:25:42,750 --> 01:25:55,889
there don't so we should just be dealing

1349
01:25:45,029 --> 01:25:57,509
with just this segment right okay so now

1350
01:25:55,889 --> 01:26:02,969
in here where we're looking up into the

1351
01:25:57,510 --> 01:26:05,130
light index and we're doing our textile

1352
01:26:02,969 --> 01:26:07,319
fetch into our lookup sampler

1353
01:26:05,130 --> 01:26:08,130
we're never getting a valid value out of

1354
01:26:07,319 --> 01:26:11,099
it

1355
01:26:08,130 --> 01:26:12,960
which is kind of nuts I'm gonna go ahead

1356
01:26:11,099 --> 01:26:15,779
and not even try to do the integer

1357
01:26:12,960 --> 01:26:20,730
casting I'm gonna actually convert this

1358
01:26:15,779 --> 01:26:25,519
down to just do like look here's a light

1359
01:26:20,729 --> 01:26:25,519
I value

1360
01:26:36,750 --> 01:26:45,460
let's just actually take whatever we get

1361
01:26:40,539 --> 01:26:48,250
and make that be the use light see so

1362
01:26:45,460 --> 01:26:54,340
I'm going to do a textile fetch into the

1363
01:26:48,250 --> 01:26:55,630
lookup sampler at Vox I in fact I'm just

1364
01:26:54,340 --> 01:26:59,980
gonna draw this directly

1365
01:26:55,630 --> 01:27:07,810
I won't even do that I'll just do world

1366
01:26:59,979 --> 01:27:16,269
P - Vox min corner like I'll just do

1367
01:27:07,810 --> 01:27:20,190
I'll just do a lookup at Vox eye and see

1368
01:27:16,270 --> 01:27:22,420
what I get if I just return it directly

1369
01:27:20,189 --> 01:27:23,949
right cuz I don't really have any idea

1370
01:27:22,420 --> 01:27:25,720
why we're having such a hard time

1371
01:27:23,949 --> 01:27:29,470
pulling out of this texture but we seem

1372
01:27:25,720 --> 01:27:31,869
to be so I'm just gonna try and get

1373
01:27:29,470 --> 01:27:34,320
something showing up any anywhere on

1374
01:27:31,869 --> 01:27:37,210
screen at all and I yeah that seems

1375
01:27:34,319 --> 01:27:40,599
somehow almost impossible but I don't

1376
01:27:37,210 --> 01:27:42,430
know why because you know we are sending

1377
01:27:40,600 --> 01:27:45,400
down values for this thing so I just

1378
01:27:42,430 --> 01:27:46,619
don't know yeah no what exactly is

1379
01:27:45,399 --> 01:27:49,509
happening there

1380
01:27:46,619 --> 01:27:54,779
so inside OpenGL I also want to look at

1381
01:27:49,510 --> 01:28:00,220
where we're submitting text sub image 3d

1382
01:27:54,779 --> 01:28:02,439
here and we're sitting down inside

1383
01:28:00,220 --> 01:28:04,690
shorts which is what we expect so yeah

1384
01:28:02,439 --> 01:28:05,799
again that just seems like that should

1385
01:28:04,689 --> 01:28:12,819
work just fine

1386
01:28:05,800 --> 01:28:14,560
I would think but we're just not getting

1387
01:28:12,819 --> 01:28:16,269
anything right we're getting this is

1388
01:28:14,560 --> 01:28:20,410
like the graphics card hasn't given us

1389
01:28:16,270 --> 01:28:23,170
any any help here at all if I wanted to

1390
01:28:20,409 --> 01:28:29,500
look up into the voxel by a floating

1391
01:28:23,170 --> 01:28:34,690
point value I should be able to vote

1392
01:28:29,500 --> 01:28:37,630
divided by I should be able to take the

1393
01:28:34,689 --> 01:28:40,449
vox eye and turn it into a vox UV by

1394
01:28:37,630 --> 01:28:42,640
dividing by the like constant values the

1395
01:28:40,449 --> 01:28:43,139
light dimension acts the light dimension

1396
01:28:42,640 --> 01:28:45,810
why

1397
01:28:43,139 --> 01:28:47,789
and the light dimension Z right that

1398
01:28:45,810 --> 01:28:48,119
should also if I want to look up that

1399
01:28:47,789 --> 01:28:49,769
way

1400
01:28:48,118 --> 01:28:53,549
I shouldn't have to that though I should

1401
01:28:49,770 --> 01:28:56,460
be able to look up by integer values so

1402
01:28:53,550 --> 01:29:03,440
it's kind of weird that I would have to

1403
01:28:56,460 --> 01:29:03,439
do that but yeah so yeah I don't know

1404
01:29:14,100 --> 01:29:19,800
I don't know why we're not getting

1405
01:29:15,930 --> 01:29:21,659
anything back that seems really broken

1406
01:29:19,800 --> 01:29:23,520
like it seems like that should be

1407
01:29:21,659 --> 01:29:25,079
clearly giving us something back we

1408
01:29:23,520 --> 01:29:28,020
looked and verified that there was

1409
01:29:25,079 --> 01:29:30,510
something in it however one thing I will

1410
01:29:28,020 --> 01:29:33,300
say is we even though there were clearly

1411
01:29:30,510 --> 01:29:37,079
values in it those values didn't seem to

1412
01:29:33,300 --> 01:29:41,070
come out properly in the texture preview

1413
01:29:37,079 --> 01:29:44,220
like when we looked at the the image

1414
01:29:41,069 --> 01:29:47,090
that the the insight was showing it

1415
01:29:44,220 --> 01:29:51,000
didn't seem to actually ever show us

1416
01:29:47,090 --> 01:29:53,069
valid data there in the memory view it

1417
01:29:51,000 --> 01:29:54,840
was but in the actual render it wasn't

1418
01:29:53,069 --> 01:29:57,449
and I do wonder about that as well

1419
01:29:54,840 --> 01:30:00,840
because I'm not sure why that was going

1420
01:29:57,449 --> 01:30:02,609
on but now in this you know these should

1421
01:30:00,840 --> 01:30:06,079
be floating-point values stored in here

1422
01:30:02,609 --> 01:30:09,960
so we should be able to get an RGB value

1423
01:30:06,079 --> 01:30:11,640
out of it and the fact that we're not

1424
01:30:09,960 --> 01:30:15,119
getting any RGB out of it no matter

1425
01:30:11,640 --> 01:30:16,950
where we're looking is just nuts right I

1426
01:30:15,119 --> 01:30:20,119
don't understand what the problem is

1427
01:30:16,949 --> 01:30:23,699
there this is why I hate GPU programming

1428
01:30:20,119 --> 01:30:26,399
because yeah you get no information it's

1429
01:30:23,699 --> 01:30:27,689
all the worst aspects of debugging once

1430
01:30:26,399 --> 01:30:30,119
again is because you have literally

1431
01:30:27,689 --> 01:30:31,979
nothing to go on it's like who knows and

1432
01:30:30,119 --> 01:30:35,399
this stuff is all SPECT so poorly that

1433
01:30:31,979 --> 01:30:37,049
it's like all right yeah I don't know

1434
01:30:35,399 --> 01:30:40,259
like there's all these parameters you

1435
01:30:37,050 --> 01:30:42,480
can specify but hey like where's just a

1436
01:30:40,260 --> 01:30:47,369
bunch we don't allow and we don't tell

1437
01:30:42,479 --> 01:30:48,779
you about that so have fun so yeah we

1438
01:30:47,369 --> 01:30:50,039
need to figure out why we are not

1439
01:30:48,779 --> 01:30:54,269
getting anything out of our lookup

1440
01:30:50,039 --> 01:30:55,529
sampler because that's obviously the you

1441
01:30:54,270 --> 01:30:59,970
know we're just not getting anywhere

1442
01:30:55,529 --> 01:31:03,809
until that thing gives us a valid result

1443
01:30:59,970 --> 01:31:05,760
out for our voxel lookup and in order to

1444
01:31:03,810 --> 01:31:07,740
get that I don't know what we should do

1445
01:31:05,760 --> 01:31:09,960
like I don't know how we can prod it any

1446
01:31:07,739 --> 01:31:11,639
more than we're already prodding it one

1447
01:31:09,960 --> 01:31:16,560
thing I could do is start trying to look

1448
01:31:11,640 --> 01:31:20,610
it up into it in some way that does not

1449
01:31:16,560 --> 01:31:24,990
involve integer lookups so I could try

1450
01:31:20,609 --> 01:31:26,880
specifying you know a manual look up

1451
01:31:24,989 --> 01:31:27,750
here that was gonna just do a regular

1452
01:31:26,880 --> 01:31:35,460
text

1453
01:31:27,750 --> 01:31:38,189
ol textbook all right so if I did

1454
01:31:35,460 --> 01:31:48,260
texture and I asked it to use the lookup

1455
01:31:38,189 --> 01:31:51,839
sampler and I pass it Effect 3 here

1456
01:31:48,260 --> 01:31:57,690
maybe one that I've sort of pre divided

1457
01:31:51,840 --> 01:32:02,069
by the lighting value the actual

1458
01:31:57,689 --> 01:32:14,489
dimension values so it's still 0 to 1

1459
01:32:02,069 --> 01:32:15,239
like a UV coordinate should be see if

1460
01:32:14,489 --> 01:32:18,710
that helps

1461
01:32:15,239 --> 01:32:18,710
I doubt it will

1462
01:32:23,520 --> 01:32:38,070
nothing so yeah I really just do not

1463
01:32:27,698 --> 01:32:38,069
know what it is objecting to there

1464
01:32:49,250 --> 01:32:54,949
I should probably have the game startup

1465
01:32:51,890 --> 01:32:58,039
windowed now because insight doesn't

1466
01:32:54,949 --> 01:32:59,510
work when the game is fullscreen so it

1467
01:32:58,039 --> 01:33:04,149
just saves a step there I constantly

1468
01:32:59,510 --> 01:33:04,150
have to remember to like alt enter

1469
01:33:16,579 --> 01:33:19,579
so

1470
01:33:31,229 --> 01:33:44,249
here's a look up sampler and again we

1471
01:33:36,958 --> 01:33:49,729
see no pixel data in it however if I

1472
01:33:44,248 --> 01:33:49,728
switch to memory view at least as before

1473
01:33:50,238 --> 01:33:59,879
we do see values in it part of the

1474
01:33:57,179 --> 01:34:02,908
problem I suppose is that those values

1475
01:33:59,880 --> 01:34:04,769
will just be very low because they're

1476
01:34:02,908 --> 01:34:08,908
only representing like a tiny fraction

1477
01:34:04,769 --> 01:34:13,739
of what we actually can specify gonna

1478
01:34:08,908 --> 01:34:16,170
float and maybe we're just encoding

1479
01:34:13,738 --> 01:34:17,819
those wrong I don't know so if they're a

1480
01:34:16,170 --> 01:34:21,300
floating-point value let's let's see

1481
01:34:17,819 --> 01:34:24,889
what it encoded here for example let's

1482
01:34:21,300 --> 01:34:24,889
find an area that's got some stuff in it

1483
01:34:35,850 --> 01:34:40,200
really don't understand why there's so

1484
01:34:37,590 --> 01:34:46,140
few of these and yet we tried debugging

1485
01:34:40,199 --> 01:34:47,849
the voxel and it it had actual it seemed

1486
01:34:46,140 --> 01:34:50,600
to store all the information just as we

1487
01:34:47,850 --> 01:34:50,600
expected it to

1488
01:35:02,859 --> 01:35:10,210
yet I just see so few entries here like

1489
01:35:05,439 --> 01:35:12,638
how is that possible right it just seems

1490
01:35:10,210 --> 01:35:18,309
like something's busted let me double

1491
01:35:12,639 --> 01:35:19,690
check again something doesn't make a lot

1492
01:35:18,309 --> 01:35:22,570
of sense but I just don't know what it

1493
01:35:19,689 --> 01:35:25,149
is I guess the other thing I could do is

1494
01:35:22,569 --> 01:35:31,599
I could manually force that voxels data

1495
01:35:25,149 --> 01:35:35,549
to be floating-point like when we submit

1496
01:35:31,599 --> 01:35:35,550
the texture instead of submitting it as

1497
01:35:36,448 --> 01:35:43,058
as 16-bit values I could just force it

1498
01:35:40,569 --> 01:35:45,719
to be floating-point right so this

1499
01:35:43,059 --> 01:35:45,719
lookup here

1500
01:36:02,399 --> 01:36:15,099
so if I was gonna do that then when we

1501
01:36:12,310 --> 01:36:20,650
create one of these guys what I could do

1502
01:36:15,100 --> 01:36:31,150
is say like alright yeah when we write

1503
01:36:20,649 --> 01:36:36,909
the lookup at value in addition to

1504
01:36:31,149 --> 01:36:44,710
writing it this way like so I'm also

1505
01:36:36,909 --> 01:36:45,849
gonna write it this way so I'm just

1506
01:36:44,710 --> 01:36:47,980
gonna store a floating point value

1507
01:36:45,850 --> 01:36:54,910
that's exactly the value that I actually

1508
01:36:47,979 --> 01:36:56,199
wanted new adulteration whatsoever so I

1509
01:36:54,909 --> 01:37:01,029
should just be able to see it directly

1510
01:36:56,199 --> 01:37:04,269
in there right and then in the render

1511
01:37:01,029 --> 01:37:06,539
group where it goes to push that value

1512
01:37:04,270 --> 01:37:06,540
on

1513
01:37:15,500 --> 01:37:21,738
we'll just say whatevs you know it's

1514
01:37:19,408 --> 01:37:21,738
fine

1515
01:37:31,130 --> 01:37:40,380
so all I'm doing is sending down a

1516
01:37:33,390 --> 01:37:42,360
completely parallel version here that I

1517
01:37:40,380 --> 01:37:43,980
know has been unmolested to try and

1518
01:37:42,359 --> 01:37:45,839
eliminate I don't know just some one

1519
01:37:43,979 --> 01:37:48,769
thing like open Jill's screwing us here

1520
01:37:45,840 --> 01:37:52,050
and I don't really know exactly how so

1521
01:37:48,770 --> 01:37:55,230
you know I don't have any other options

1522
01:37:52,050 --> 01:37:56,610
so when you don't have any other options

1523
01:37:55,229 --> 01:37:59,009
you have to just start trying something

1524
01:37:56,609 --> 01:38:03,000
to see if you can convince it to do

1525
01:37:59,010 --> 01:38:06,079
something resembling anything so if I go

1526
01:38:03,000 --> 01:38:09,210
ahead and do a text sub image here and

1527
01:38:06,079 --> 01:38:14,010
instead of doing it this way I actually

1528
01:38:09,210 --> 01:38:19,520
do it the opposite way so I say you know

1529
01:38:14,010 --> 01:38:19,520
I'm sending GL floats down here you go

1530
01:38:21,649 --> 01:38:34,979
and then when we look in here we do the

1531
01:38:24,869 --> 01:38:36,029
same and I don't know that we actually

1532
01:38:34,979 --> 01:38:40,408
need to do that because we're not

1533
01:38:36,029 --> 01:38:42,899
submitting anything here but hey so now

1534
01:38:40,408 --> 01:38:45,988
we've got a floating point texture that

1535
01:38:42,899 --> 01:38:49,198
should have value stored in it when I

1536
01:38:45,988 --> 01:38:51,619
actually go to do the f1 here now what

1537
01:38:49,198 --> 01:38:54,059
I'm expecting I forgot to do the

1538
01:38:51,619 --> 01:38:55,890
Starcraft thing

1539
01:38:54,060 --> 01:38:57,420
now what I'm expecting is if I go look

1540
01:38:55,890 --> 01:39:01,560
at those values they will actually be

1541
01:38:57,420 --> 01:39:08,069
even into indices into the array as I

1542
01:39:01,560 --> 01:39:10,880
wanted them to be so I hit f1 I pause

1543
01:39:08,069 --> 01:39:10,880
them capture frame

1544
01:39:12,329 --> 01:39:19,399
ah crap and I forgot to on window

1545
01:39:16,829 --> 01:39:19,399
ourselves

1546
01:39:33,948 --> 01:39:50,759
boy I hate programming creepy you so

1547
01:39:47,579 --> 01:39:55,469
much why did I ever let myself get

1548
01:39:50,760 --> 01:39:58,010
talked into this all right so let's try

1549
01:39:55,469 --> 01:39:58,010
that one more time

1550
01:40:10,710 --> 01:40:28,539
yeah that time we worked here's the

1551
01:40:18,850 --> 01:40:30,400
texture I I'm not sure what happened

1552
01:40:28,539 --> 01:40:37,689
there so now it doesn't think we

1553
01:40:30,399 --> 01:40:49,029
submitted it at all did I not hit did I

1554
01:40:37,689 --> 01:40:51,569
not actually maybe I didn't hit f1 let's

1555
01:40:49,029 --> 01:40:51,569
hope that's the case

1556
01:41:13,390 --> 01:41:22,610
okay just shoot me now just really put

1557
01:41:19,909 --> 01:41:26,420
me out of my misery all right so

1558
01:41:22,609 --> 01:41:27,769
basically the I've hit that problem

1559
01:41:26,420 --> 01:41:31,569
enough times I'm just going to go switch

1560
01:41:27,770 --> 01:41:31,570
just to not be windowed by default

1561
01:41:34,840 --> 01:41:41,230
because it just takes there's just too

1562
01:41:37,460 --> 01:41:41,230
many steps and I forget to do them all

1563
01:41:52,859 --> 01:42:00,460
there we go so f1 and now I can do it

1564
01:41:58,180 --> 01:42:01,510
alright so in theory now we shouldn't

1565
01:42:00,460 --> 01:42:04,140
have that problem anymore because we'll

1566
01:42:01,510 --> 01:42:07,480
start regular windowed so I can't forget

1567
01:42:04,140 --> 01:42:09,369
to hit the enter key before doing the

1568
01:42:07,479 --> 01:42:10,859
little magic dance to actually get the

1569
01:42:09,369 --> 01:42:15,069
debugger to sort of do something

1570
01:42:10,859 --> 01:42:17,639
resembling anything so we still wait a

1571
01:42:15,069 --> 01:42:17,639
little bit

1572
01:42:33,770 --> 01:42:41,390
how're we doing here there we go so if I

1573
01:42:39,439 --> 01:42:46,939
don't need this window open yet

1574
01:42:41,390 --> 01:42:51,829
but thank you if I take a look at where

1575
01:42:46,939 --> 01:42:57,859
that texture ended up here's the look up

1576
01:42:51,829 --> 01:43:05,920
sampler alright so now we can actually

1577
01:42:57,859 --> 01:43:08,839
see the voxel right and it's populated

1578
01:43:05,920 --> 01:43:12,069
so I don't know I'm gonna stick with

1579
01:43:08,840 --> 01:43:15,650
this then because at least we can see it

1580
01:43:12,069 --> 01:43:17,779
which is nice and if I go in here to

1581
01:43:15,649 --> 01:43:25,250
like a volume slice I should see some

1582
01:43:17,779 --> 01:43:27,429
values somewhere I would think of course

1583
01:43:25,250 --> 01:43:27,430
I don't

1584
01:43:32,250 --> 01:43:52,470
shouldn't I be able to how do I get out

1585
01:43:39,689 --> 01:43:54,119
of this volume slice hello is there some

1586
01:43:52,470 --> 01:43:56,449
way to control which slice I'm looking

1587
01:43:54,119 --> 01:43:56,449
at here

1588
01:44:00,989 --> 01:44:03,859
oh boy

1589
01:44:07,698 --> 01:44:18,799
so it doesn't correspond to that because

1590
01:44:09,890 --> 01:44:20,329
this says volume slice 19 shouldn't

1591
01:44:18,800 --> 01:44:26,380
there be a thing that lets me switch

1592
01:44:20,329 --> 01:44:26,380
through flip through there something I

1593
01:44:28,719 --> 01:44:32,529
don't really care about that

1594
01:44:37,729 --> 01:44:45,109
all I want to do is get back to the

1595
01:44:41,449 --> 01:44:48,729
screen I was just on but that seems like

1596
01:44:45,109 --> 01:44:48,729
it doesn't want me to do that

1597
01:45:08,229 --> 01:45:13,639
is it just me like am I just like crazy

1598
01:45:11,600 --> 01:45:16,400
or something like how does this stuff

1599
01:45:13,640 --> 01:45:19,520
even end up this way so there's got to

1600
01:45:16,399 --> 01:45:21,859
be a way to get back to it like that

1601
01:45:19,520 --> 01:45:23,840
doesn't involve that I would assume so

1602
01:45:21,859 --> 01:45:28,219
when I click in here there must be a way

1603
01:45:23,840 --> 01:45:32,930
to get back to the previous thing okay

1604
01:45:28,220 --> 01:45:40,510
so I right okay I right-click in the

1605
01:45:32,930 --> 01:45:45,140
white area looks like the magic sweet

1606
01:45:40,510 --> 01:45:47,930
merciful baby Jesus all right so if I

1607
01:45:45,140 --> 01:45:51,770
come down here and look at this like

1608
01:45:47,930 --> 01:45:53,780
volume slice 19 I see a bunch of values

1609
01:45:51,770 --> 01:45:56,120
in here but they're all just bright red

1610
01:45:53,779 --> 01:45:58,849
which also doesn't super thrill me I

1611
01:45:56,119 --> 01:46:01,640
mean that doesn't sound particularly

1612
01:45:58,850 --> 01:46:03,470
good so that's why I'm 619 look at all

1613
01:46:01,640 --> 01:46:05,840
those values there now I come over here

1614
01:46:03,470 --> 01:46:09,409
and I say let me see volume slice 19 I

1615
01:46:05,840 --> 01:46:09,829
should see a ton of values right okay

1616
01:46:09,409 --> 01:46:11,779
good

1617
01:46:09,829 --> 01:46:15,079
there we go I'm like I shouldn't it

1618
01:46:11,779 --> 01:46:19,009
shouldn't be impossible Z's so all of

1619
01:46:15,079 --> 01:46:21,079
these values are good right that's

1620
01:46:19,010 --> 01:46:23,659
exactly what I want to see so that's

1621
01:46:21,079 --> 01:46:28,460
fantastic look I am a happy camper about

1622
01:46:23,659 --> 01:46:31,909
that that's very good

1623
01:46:28,460 --> 01:46:33,289
so let's now take a look and see if you

1624
01:46:31,909 --> 01:46:36,800
know if there's anything I can do to

1625
01:46:33,289 --> 01:46:40,810
prod to get you know heaven forfend get

1626
01:46:36,800 --> 01:46:43,400
the GPU to actually read those values

1627
01:46:40,810 --> 01:46:48,260
when we're actually doing some shading I

1628
01:46:43,399 --> 01:46:55,219
know this is a big ask but here we go so

1629
01:46:48,260 --> 01:46:58,070
here we are in the Z bias program I'm

1630
01:46:55,220 --> 01:47:01,400
gonna revert back to the previous path

1631
01:46:58,069 --> 01:47:04,359
here to just see if I can pull a Texel

1632
01:47:01,399 --> 01:47:04,359
value out of there

1633
01:47:06,739 --> 01:47:23,460
like so all right so when we do a

1634
01:47:20,789 --> 01:47:26,939
textile fish fetch at a particular voxel

1635
01:47:23,460 --> 01:47:30,119
location we just verify that the values

1636
01:47:26,939 --> 01:47:32,519
are actually usable directly so in

1637
01:47:30,119 --> 01:47:35,250
theory that this textile fetch right

1638
01:47:32,520 --> 01:47:37,710
here should return us in integer it just

1639
01:47:35,250 --> 01:47:40,199
it's in a floating-point value but it is

1640
01:47:37,710 --> 01:47:41,909
actually just the integer we wanted so

1641
01:47:40,199 --> 01:47:47,519
we should be able to just go ahead and

1642
01:47:41,909 --> 01:47:50,189
use it directly as an integer right we

1643
01:47:47,520 --> 01:47:51,960
can then go ahead and test this part of

1644
01:47:50,189 --> 01:48:04,250
the loop and see if we ever get anything

1645
01:47:51,960 --> 01:48:11,550
that's not zero right here we go and

1646
01:48:04,250 --> 01:48:14,460
magically we still get nothing I have no

1647
01:48:11,550 --> 01:48:15,390
idea how that's possible right none

1648
01:48:14,460 --> 01:48:17,010
whatsoever

1649
01:48:15,390 --> 01:48:18,869
because we're searching over a fairly

1650
01:48:17,010 --> 01:48:21,329
wide area unless this math is wrong

1651
01:48:18,869 --> 01:48:23,220
maybe it is when we're doing this

1652
01:48:21,329 --> 01:48:26,699
textile fetch we should get those values

1653
01:48:23,220 --> 01:48:29,970
out somewhere right we should get those

1654
01:48:26,699 --> 01:48:32,819
values out somewhere but we don't

1655
01:48:29,970 --> 01:48:36,720
actually seem to so I have no idea why

1656
01:48:32,819 --> 01:48:40,619
literally none whatsoever so inside here

1657
01:48:36,720 --> 01:48:43,970
where we're saying the the I've x3 one

1658
01:48:40,619 --> 01:48:46,890
thing I could do here is again try to

1659
01:48:43,970 --> 01:48:49,590
let's try to debug this value just to

1660
01:48:46,890 --> 01:48:54,210
make sure that maybe we're using a valid

1661
01:48:49,590 --> 01:48:57,529
lookup of some kind so I'm gonna try to

1662
01:48:54,210 --> 01:49:00,890
make the Vox UV value here I'm gonna set

1663
01:48:57,529 --> 01:49:00,889
use light

1664
01:49:07,390 --> 01:49:13,100
I'm gonna set use Lightsey to actually

1665
01:49:10,789 --> 01:49:14,539
just be equal to the Vox TV for now so

1666
01:49:13,100 --> 01:49:19,990
we can actually see where we're looking

1667
01:49:14,539 --> 01:49:22,729
up in the voxel directly as best we can

1668
01:49:19,989 --> 01:49:25,389
so I'm gonna take Vox P and I'm gonna

1669
01:49:22,729 --> 01:49:39,559
multiply it by one over each of our

1670
01:49:25,390 --> 01:49:42,289
dimensions so you can see in here

1671
01:49:39,560 --> 01:49:43,880
alright we've got this voxel position

1672
01:49:42,289 --> 01:49:45,560
this is going to come out as like a zero

1673
01:49:43,880 --> 01:49:48,109
two two two six zero two two six zero

1674
01:49:45,560 --> 01:49:49,820
two thirty-two assuming that we did this

1675
01:49:48,109 --> 01:49:51,500
math correctly I'm going to change that

1676
01:49:49,819 --> 01:49:53,509
to what I think is a UV by just dividing

1677
01:49:51,500 --> 01:49:56,239
by what I think the size of the texture

1678
01:49:53,510 --> 01:49:57,470
we're looking up in is we don't care

1679
01:49:56,239 --> 01:49:59,199
about the rest of this because we're

1680
01:49:57,470 --> 01:50:02,930
ignoring it right now in fact this this

1681
01:49:59,199 --> 01:50:05,449
and this are all superfluous now so what

1682
01:50:02,930 --> 01:50:10,539
we're gonna do is just draw that UV

1683
01:50:05,449 --> 01:50:10,539
value all right that's all I want to do

1684
01:50:16,510 --> 01:50:21,130
so here we go this is the UV values that

1685
01:50:20,500 --> 01:50:23,770
we're drawing

1686
01:50:21,130 --> 01:50:28,078
uh they don't look correct to me at all

1687
01:50:23,770 --> 01:50:28,079
so I guess that's good information

1688
01:50:28,170 --> 01:50:35,050
they're not totally bogus but they are

1689
01:50:32,649 --> 01:50:36,219
somewhat bogus so what should be

1690
01:50:35,050 --> 01:50:38,289
happening is we should be getting a

1691
01:50:36,219 --> 01:50:41,069
gradual increase in green and gradual

1692
01:50:38,289 --> 01:50:44,260
increase in red a gradual increase in

1693
01:50:41,069 --> 01:50:47,590
blue and we're sort of getting that over

1694
01:50:44,260 --> 01:50:50,309
here but it tops out too quickly so it

1695
01:50:47,590 --> 01:50:53,949
looks like I've done something stupid

1696
01:50:50,309 --> 01:50:58,599
with respect to how I'm computing the

1697
01:50:53,948 --> 01:51:00,908
voxel position I or something like that

1698
01:50:58,599 --> 01:51:04,840
right like the voxels not aligned

1699
01:51:00,908 --> 01:51:06,189
properly or something like that so I

1700
01:51:04,840 --> 01:51:07,569
want to take a quick look I know it's

1701
01:51:06,189 --> 01:51:11,158
time for questions but I want to quick

1702
01:51:07,569 --> 01:51:12,849
look and see what's going on there and

1703
01:51:11,158 --> 01:51:17,500
verify that I don't have something

1704
01:51:12,849 --> 01:51:18,578
really dumb going on all right so let me

1705
01:51:17,500 --> 01:51:23,770
just make sure that I've got those

1706
01:51:18,578 --> 01:51:27,009
values correct you can see it's two six

1707
01:51:23,770 --> 01:51:29,860
two six 32 so there's two two six threes

1708
01:51:27,010 --> 01:51:31,510
thirty-two so in theory right we should

1709
01:51:29,859 --> 01:51:34,658
always be getting something between zero

1710
01:51:31,510 --> 01:51:37,539
and one for all of these voxels assuming

1711
01:51:34,658 --> 01:51:39,279
that the min corner is actually where we

1712
01:51:37,539 --> 01:51:45,399
think it is and the inverse seldom is

1713
01:51:39,279 --> 01:51:52,948
actually where we think it is right so

1714
01:51:45,399 --> 01:51:52,948
yeah I could also do something else here

1715
01:52:01,979 --> 01:52:06,429
so I'm trying to think but another thing

1716
01:52:04,208 --> 01:52:11,408
that I could do here is I could just try

1717
01:52:06,429 --> 01:52:15,340
to do an if statement and set the light

1718
01:52:11,408 --> 01:52:19,299
C equal to a certain value in either

1719
01:52:15,340 --> 01:52:22,360
case so what I could do is do like it's

1720
01:52:19,300 --> 01:52:28,510
black everywhere that it's in but if you

1721
01:52:22,359 --> 01:52:35,529
know Vox UV x is less than zero or Vox

1722
01:52:28,510 --> 01:52:39,939
UV Y is less than zero or box UV Z is

1723
01:52:35,529 --> 01:52:53,859
less than zero box UV X is greater than

1724
01:52:39,939 --> 01:52:55,269
one you get the idea so basically I'm

1725
01:52:53,859 --> 01:52:55,899
going to do is we're just doing a bounds

1726
01:52:55,269 --> 01:52:59,369
check here

1727
01:52:55,899 --> 01:53:02,819
and I'm gonna set the color to be red

1728
01:52:59,368 --> 01:53:08,018
everywhere that it's outside the voxel

1729
01:53:02,819 --> 01:53:14,408
right just so I can check my sanity so

1730
01:53:08,019 --> 01:53:16,119
it does not appear to be here right so

1731
01:53:14,408 --> 01:53:22,719
I'm not sure why we were getting such an

1732
01:53:16,118 --> 01:53:27,698
odd color ramp I don't know if that's

1733
01:53:22,719 --> 01:53:35,050
because of some kind of gamma correction

1734
01:53:27,698 --> 01:53:38,379
that's happening there I don't know why

1735
01:53:35,050 --> 01:53:41,529
we were getting such a weird color ramp

1736
01:53:38,380 --> 01:53:44,380
there necessarily it's a little

1737
01:53:41,529 --> 01:53:45,698
troubling because if we're never outside

1738
01:53:44,380 --> 01:53:47,699
the voxel then we should have been

1739
01:53:45,698 --> 01:53:49,988
getting something fairly stable there

1740
01:53:47,698 --> 01:53:52,988
and it didn't look like we really were

1741
01:53:49,988 --> 01:53:56,978
so that's a bit odd and probably warrant

1742
01:53:52,988 --> 01:53:58,779
some further inspection but yet so the

1743
01:53:56,979 --> 01:54:04,380
next I'm going to do is I'm going to

1744
01:53:58,779 --> 01:54:04,380
change it to slightly inside the voxel

1745
01:54:05,099 --> 01:54:10,630
so I can see whether or not we're

1746
01:54:07,929 --> 01:54:13,118
actually properly getting the bounds to

1747
01:54:10,630 --> 01:54:15,630
be so I moved the voxel boundary in by

1748
01:54:13,118 --> 01:54:15,630
about a quarter

1749
01:54:19,829 --> 01:54:28,470
all right and so I'm still not seeing

1750
01:54:22,359 --> 01:54:28,469
any of that so this is just bogus right

1751
01:54:30,569 --> 01:54:50,649
our Vox UV value oh that's great or I

1752
01:54:37,479 --> 01:54:57,849
just did the test wrong all right so our

1753
01:54:50,649 --> 01:55:08,199
Vox UV is wrong it's always hitting that

1754
01:54:57,850 --> 01:55:12,180
case and you can see there's a little

1755
01:55:08,199 --> 01:55:16,359
bit of it that's inside the voxel and

1756
01:55:12,180 --> 01:55:18,010
most of it is outside the voxel so it

1757
01:55:16,359 --> 01:55:20,889
looks like we've got a voxel alignment

1758
01:55:18,010 --> 01:55:23,770
problem here something we're doing to

1759
01:55:20,890 --> 01:55:26,640
try and create the UV values is is

1760
01:55:23,770 --> 01:55:26,640
incorrect

1761
01:55:27,250 --> 01:55:34,300
so this Vox P you know I guess I can

1762
01:55:31,090 --> 01:55:36,730
also I can try to start debugging this a

1763
01:55:34,300 --> 01:55:39,220
little bit more pushing it up a bit so

1764
01:55:36,729 --> 01:55:44,699
Vox P we know what that should be as

1765
01:55:39,220 --> 01:55:46,720
well right that should be just this

1766
01:55:44,699 --> 01:55:50,590
because we know the dimensions of our

1767
01:55:46,720 --> 01:55:52,090
voxel and so we know what we think that

1768
01:55:50,590 --> 01:55:53,770
should be as well so as soon as it

1769
01:55:52,090 --> 01:55:56,409
exceeds those values we know that

1770
01:55:53,770 --> 01:55:59,440
something has gone wrong really it's

1771
01:55:56,409 --> 01:56:01,569
it's actually for being specific it's

1772
01:55:59,439 --> 01:56:05,759
actually that cuz it can't even hit you

1773
01:56:01,569 --> 01:56:05,759
can't hit 256 either that would be bad

1774
01:56:06,779 --> 01:56:13,269
so here we go and running it so that

1775
01:56:11,020 --> 01:56:15,070
actually looks correct that's roughly

1776
01:56:13,270 --> 01:56:16,870
what we would expect to see looks like

1777
01:56:15,069 --> 01:56:21,250
our voxel needs a little bit more room

1778
01:56:16,869 --> 01:56:24,430
there on the side to give it some error

1779
01:56:21,250 --> 01:56:25,390
tolerance but otherwise our voxel looks

1780
01:56:24,430 --> 01:56:30,070
to be fit properly

1781
01:56:25,390 --> 01:56:33,930
so this line was wrong this Vox UV

1782
01:56:30,069 --> 01:56:33,929
was incorrect somehow

1783
01:56:41,420 --> 01:56:54,590
however I can't say that I see how at

1784
01:56:51,239 --> 01:56:54,590
the moment

1785
01:57:03,859 --> 01:57:06,859
mmm-hmm

1786
01:57:07,460 --> 01:57:11,819
that should have worked right if we knew

1787
01:57:09,840 --> 01:57:13,680
that value is between zero and fifty six

1788
01:57:11,819 --> 01:57:15,539
and we divide it by 256 we should get a

1789
01:57:13,680 --> 01:57:17,820
number of 14-0 and one that seems like a

1790
01:57:15,539 --> 01:57:20,430
none controversial statement so I'm not

1791
01:57:17,819 --> 01:57:24,299
sure why the UV test was failing in such

1792
01:57:20,430 --> 01:57:26,310
an odd way it looks like the UV was

1793
01:57:24,300 --> 01:57:34,440
never really getting divided by that

1794
01:57:26,310 --> 01:57:36,270
number and I don't know why we don't

1795
01:57:34,439 --> 01:57:37,679
need that value in the computations

1796
01:57:36,270 --> 01:57:41,220
that's okay I'm gonna move on to the

1797
01:57:37,680 --> 01:57:44,880
next one for now if we take a look at

1798
01:57:41,220 --> 01:57:49,619
box I we should now be able to look at

1799
01:57:44,880 --> 01:57:55,940
the values as integers and verify that

1800
01:57:49,619 --> 01:57:55,939
the same thing is happening

1801
01:58:02,238 --> 01:58:08,578
and it is so I don't know our voxel

1802
01:58:06,359 --> 01:58:10,529
lookup looks really solid there that

1803
01:58:08,578 --> 01:58:13,558
looks like it's looking up into exactly

1804
01:58:10,529 --> 01:58:17,158
the correct place I do not understand

1805
01:58:13,559 --> 01:58:19,349
what it is having a problem with so I

1806
01:58:17,158 --> 01:58:21,359
have no idea why this textile fetch is

1807
01:58:19,349 --> 01:58:26,578
failing that looks like a very

1808
01:58:21,359 --> 01:58:29,639
reasonable thing to pass to the fetch

1809
01:58:26,578 --> 01:58:35,519
yet the fetch seems never to produce a

1810
01:58:29,639 --> 01:58:37,920
value of any kind and I have no idea why

1811
01:58:35,520 --> 01:58:40,320
right I do not know why our Tech's will

1812
01:58:37,920 --> 01:58:41,118
fetch always produces zero no matter

1813
01:58:40,319 --> 01:58:43,408
what we do

1814
01:58:41,118 --> 01:58:44,238
so I guess that'll be the puzzle for

1815
01:58:43,408 --> 01:58:47,839
next weekend

1816
01:58:44,238 --> 01:58:50,549
for now I'll go to the brief a brief Q&amp;A

1817
01:58:47,840 --> 01:58:52,880
so anybody who has a question can put it

1818
01:58:50,550 --> 01:58:52,880
in now

1819
01:59:20,529 --> 01:59:27,738
all right so in Safari says try using

1820
01:59:23,988 --> 01:59:32,419
geo read integer instead of GL read

1821
01:59:27,738 --> 01:59:52,609
I am totally down with that as an

1822
01:59:32,420 --> 01:59:55,850
attempt to get it to use integers so

1823
01:59:52,609 --> 02:00:00,589
here's where we are storing this value

1824
01:59:55,850 --> 02:00:05,210
out right and the problem is that if we

1825
02:00:00,590 --> 02:00:15,250
change this to an R 16 UI and leave this

1826
02:00:05,210 --> 02:00:15,250
as it is it got very angry with me right

1827
02:00:19,238 --> 02:00:28,250
and here's where that call was happening

1828
02:00:23,050 --> 02:00:29,900
right here so the question is well can

1829
02:00:28,250 --> 02:00:40,819
we change it to something else

1830
02:00:29,899 --> 02:00:43,129
and have it work so if we were doing

1831
02:00:40,819 --> 02:00:44,689
this which i think is what you know and

1832
02:00:43,130 --> 02:00:47,569
insofar as I think was suggesting that

1833
02:00:44,689 --> 02:00:49,849
we passed red integer you know will it

1834
02:00:47,569 --> 02:00:55,509
work we need red integer to be defined

1835
02:00:49,850 --> 02:00:55,510
which we don't have at the moment

1836
02:01:05,828 --> 02:01:08,948
here it is

1837
02:01:26,920 --> 02:01:36,050
and hey alright thank you insofar as I I

1838
02:01:33,618 --> 02:01:41,089
mean I would just like to take a moment

1839
02:01:36,050 --> 02:01:45,500
to say again how ridiculous that kind of

1840
02:01:41,090 --> 02:01:47,440
thing is like that is just nuts like why

1841
02:01:45,500 --> 02:01:50,750
would you hang up a programmer on

1842
02:01:47,439 --> 02:01:53,469
something like that it like there's no

1843
02:01:50,750 --> 02:01:57,109
reason for AP AP I design of that nature

1844
02:01:53,469 --> 02:02:00,948
it's just kind of inexcusable I mean

1845
02:01:57,109 --> 02:02:01,488
doesn't even make sense but you know off

1846
02:02:00,948 --> 02:02:04,848
you go

1847
02:02:01,488 --> 02:02:06,888
anyway so let's go ahead and fix the the

1848
02:02:04,849 --> 02:02:13,159
tech sub image calls well then because

1849
02:02:06,889 --> 02:02:14,900
that's all we needed there in so far

1850
02:02:13,158 --> 02:02:18,198
essays today insofar us by the way is

1851
02:02:14,899 --> 02:02:19,569
the the famous author of in cybot who

1852
02:02:18,198 --> 02:02:23,178
you may have seen on the chat it's

1853
02:02:19,569 --> 02:02:25,609
basically I mean there's a lot of talk

1854
02:02:23,179 --> 02:02:28,609
in Silicon Valley these days about

1855
02:02:25,609 --> 02:02:29,779
artificial intelligence and cloud

1856
02:02:28,609 --> 02:02:31,759
computing and all these sorts of things

1857
02:02:29,779 --> 02:02:34,399
but basically in sohbat is the

1858
02:02:31,760 --> 02:02:36,980
embodiment of all those things it is not

1859
02:02:34,399 --> 02:02:39,558
only cloud computing artificial

1860
02:02:36,979 --> 02:02:41,328
intelligence but it's so far ahead of

1861
02:02:39,559 --> 02:02:44,090
anything they've got in Silicon Valley

1862
02:02:41,328 --> 02:02:48,198
it's ridiculous like in Saibot makes a

1863
02:02:44,090 --> 02:02:50,809
Alexa and Siri and Google's whatever

1864
02:02:48,198 --> 02:02:51,948
voice thing just look like such a joke

1865
02:02:50,809 --> 02:02:54,860
it's not even funny

1866
02:02:51,948 --> 02:02:59,448
I mean it's it's it's it comes up with

1867
02:02:54,859 --> 02:03:02,839
the best witness isms anyway let's take

1868
02:02:59,448 --> 02:03:05,149
a look here and see if there's anything

1869
02:03:02,840 --> 02:03:09,279
else I need to do I think that's it so I

1870
02:03:05,149 --> 02:03:09,279
would just specify the regular lookup

1871
02:03:09,849 --> 02:03:15,099
pointer here and I should get those

1872
02:03:12,260 --> 02:03:15,099
values out

1873
02:03:15,750 --> 02:03:23,908
let's take a look yep

1874
02:03:20,590 --> 02:03:30,550
so now I am specifying integer textures

1875
02:03:23,908 --> 02:03:35,289
finally and that is very good I also

1876
02:03:30,550 --> 02:03:38,050
need to go specify when I get those

1877
02:03:35,289 --> 02:03:41,139
values out now I think I can use a youth

1878
02:03:38,050 --> 02:03:42,520
sampler in theory of course we weren't

1879
02:03:41,139 --> 02:03:45,069
getting anything out of the other

1880
02:03:42,520 --> 02:03:47,320
sampler either so I'm not sure that it

1881
02:03:45,069 --> 02:03:52,509
necessarily matters yet but what are you

1882
02:03:47,319 --> 02:03:56,170
gonna do so let's just set that back to

1883
02:03:52,510 --> 02:04:04,500
what it was supposed to be set to all

1884
02:03:56,170 --> 02:04:04,500
right so Zee bias program sit down here

1885
02:04:06,210 --> 02:04:13,420
there's our look up sampler I'm gonna

1886
02:04:08,738 --> 02:04:28,649
set that to use sampler 3d and in here

1887
02:04:13,420 --> 02:04:32,399
as we go we want to see if we can get

1888
02:04:28,649 --> 02:04:32,399
this to sample

1889
02:04:38,809 --> 02:04:53,779
directly well almost

1890
02:04:49,099 --> 02:04:57,190
I always cast the wrong way I'm never

1891
02:04:53,779 --> 02:04:57,189
going to remember that there we go

1892
02:05:01,270 --> 02:05:09,590
perfect so we have debugged our stuff at

1893
02:05:05,479 --> 02:05:12,379
all but at least we can say that thanks

1894
02:05:09,590 --> 02:05:14,599
to insofar as suggestion we are able to

1895
02:05:12,380 --> 02:05:16,788
get OpenGL to stop complaining about us

1896
02:05:14,599 --> 02:05:20,119
just one restore that texture in a more

1897
02:05:16,788 --> 02:05:22,069
sensible format than floating-point

1898
02:05:20,118 --> 02:05:24,920
which takes up twice the space for no

1899
02:05:22,069 --> 02:05:31,729
actual benefit let me go zip through the

1900
02:05:24,920 --> 02:05:35,020
final questions here needs more seven

1901
02:05:31,729 --> 02:05:35,019
three eight I totally agree

1902
02:05:55,289 --> 02:06:02,789
what what do I think about GPU open I

1903
02:05:58,630 --> 02:06:02,789
don't really know much about GPU open

1904
02:06:05,399 --> 02:06:09,759
how much prep to do before every episode

1905
02:06:07,720 --> 02:06:11,860
there's no prep for the episodes the

1906
02:06:09,760 --> 02:06:13,510
whole point of the episodes is actually

1907
02:06:11,859 --> 02:06:17,679
to do the opposite of the normal thing

1908
02:06:13,510 --> 02:06:19,239
which is you know normally you when you

1909
02:06:17,680 --> 02:06:21,159
get like tutorials or perdón anything's

1910
02:06:19,239 --> 02:06:22,779
like that you just see a programmer who

1911
02:06:21,159 --> 02:06:26,590
already did all the work and then they

1912
02:06:22,779 --> 02:06:28,659
just sort of walk through the result so

1913
02:06:26,590 --> 02:06:30,369
we tried to the opposite of that so on

1914
02:06:28,659 --> 02:06:32,409
some streams if we're doing something

1915
02:06:30,369 --> 02:06:34,059
easy it may look like it was prepped

1916
02:06:32,409 --> 02:06:36,639
ahead of time just because it happens to

1917
02:06:34,060 --> 02:06:38,170
be easy so there's really no struggle

1918
02:06:36,640 --> 02:06:41,920
with it but other times like for example

1919
02:06:38,170 --> 02:06:44,859
this episode you know it's something

1920
02:06:41,920 --> 02:06:49,510
that's you know kind of API nightmare

1921
02:06:44,859 --> 02:06:51,009
stuff you'll have you will see me do all

1922
02:06:49,510 --> 02:06:52,510
the stuff I would normally have to do in

1923
02:06:51,010 --> 02:06:54,369
my day job where I'm just like I don't

1924
02:06:52,510 --> 02:06:56,530
know why this is black and here I go

1925
02:06:54,369 --> 02:06:59,019
poking a bunch of really simple tests in

1926
02:06:56,529 --> 02:07:01,000
just to try and find you know what

1927
02:06:59,020 --> 02:07:05,860
OpenGL doesn't like or what the GPU

1928
02:07:01,000 --> 02:07:07,659
doesn't like it's so on tt BJM I'm

1929
02:07:05,859 --> 02:07:11,199
curious to fixing the WM message bug

1930
02:07:07,659 --> 02:07:15,000
also fixed the crash in a render doc I

1931
02:07:11,199 --> 02:07:15,000
can test that if you want

1932
02:07:20,869 --> 02:07:31,189
oh so eventually they will support

1933
02:07:28,479 --> 02:07:32,989
shader debugging in Maxwell and Pascal

1934
02:07:31,189 --> 02:07:34,639
so they they didn't like remove it from

1935
02:07:32,989 --> 02:07:36,469
the hardware or something it's still

1936
02:07:34,640 --> 02:07:40,270
possible to do they just don't have

1937
02:07:36,470 --> 02:07:40,270
software support for it or something

1938
02:07:45,220 --> 02:07:49,039
bleeding a high KC my experience is very

1939
02:07:47,779 --> 02:07:50,389
good for developing geocell to keep

1940
02:07:49,039 --> 02:07:51,769
shares and files and have the stuff

1941
02:07:50,390 --> 02:07:55,789
right um a curio of them if they're

1942
02:07:51,770 --> 02:07:57,890
changed yeah I agree with that and I

1943
02:07:55,789 --> 02:07:58,819
avoided doing that originally because I

1944
02:07:57,890 --> 02:08:01,039
didn't think we were gonna be doing

1945
02:07:58,819 --> 02:08:02,989
anything fancy turns out we did end up

1946
02:08:01,039 --> 02:08:04,369
doing some fancy things so I wouldn't

1947
02:08:02,989 --> 02:08:19,130
necessarily be adverse to going that

1948
02:08:04,369 --> 02:08:25,599
route now so we'll see all right so let

1949
02:08:19,130 --> 02:08:25,600
me quickly just capture this here

1950
02:08:34,840 --> 02:08:39,019
every shoot-off topics it's okay ignore

1951
02:08:37,519 --> 02:08:40,639
and hurry do you have experience it's

1952
02:08:39,019 --> 02:08:42,679
rendering impossible spaces like an

1953
02:08:40,639 --> 02:08:46,189
antechamber or the secret levels of Duke

1954
02:08:42,679 --> 02:08:48,969
Nukem 3d no I've never really done

1955
02:08:46,189 --> 02:08:51,800
anything along those lines

1956
02:08:48,969 --> 02:08:53,269
you could probably include in that like

1957
02:08:51,800 --> 02:08:56,029
what they did for portal for example

1958
02:08:53,269 --> 02:08:57,979
would be another example of that I mean

1959
02:08:56,029 --> 02:09:02,118
they there's usually not a whole lot to

1960
02:08:57,979 --> 02:09:03,619
it it usually boils down mostly to sort

1961
02:09:02,118 --> 02:09:06,288
of doing recursive rendering where you

1962
02:09:03,618 --> 02:09:07,908
render from one perspective then you

1963
02:09:06,288 --> 02:09:09,408
composite that into a rendering from

1964
02:09:07,908 --> 02:09:10,248
another perspective and you can posit

1965
02:09:09,408 --> 02:09:12,498
that into renting for another

1966
02:09:10,248 --> 02:09:17,618
perspective right so you just like

1967
02:09:12,498 --> 02:09:22,069
rendering repeated renders that all like

1968
02:09:17,618 --> 02:09:25,038
pick a different camera point you know

1969
02:09:22,069 --> 02:09:27,109
and there isn't you know sometimes

1970
02:09:25,038 --> 02:09:32,448
there's more to it than that but usually

1971
02:09:27,109 --> 02:09:34,868
that's the basic idea right if that

1972
02:09:32,448 --> 02:09:34,868
makes sense

1973
02:09:40,399 --> 02:09:44,500
so here is our integer image

1974
02:09:52,179 --> 02:09:55,149
I don't know how to verify that we

1975
02:09:53,859 --> 02:10:03,549
actually evaluate circuses always so

1976
02:09:55,149 --> 02:10:09,878
sparse but there they are right and they

1977
02:10:03,550 --> 02:10:17,649
look pretty good I mean that looks like

1978
02:10:09,878 --> 02:10:27,248
it's working right so all right so I'm

1979
02:10:17,649 --> 02:10:29,949
going to go ahead and close down and I

1980
02:10:27,248 --> 02:10:31,569
will also just because someone was

1981
02:10:29,948 --> 02:10:34,978
asking about it I'll check to see

1982
02:10:31,569 --> 02:10:34,978
whether render doc can debug now

1983
02:10:42,789 --> 02:10:52,039
so here we go launching and this is with

1984
02:10:49,130 --> 02:10:56,829
the 738 bug fixed so here is you know

1985
02:10:52,039 --> 02:10:59,300
what we would want to capture I hit f12

1986
02:10:56,829 --> 02:11:02,569
it's working on it

1987
02:10:59,300 --> 02:11:07,970
it's done I've closed the application

1988
02:11:02,569 --> 02:11:10,159
and now it's doing its thing I can't

1989
02:11:07,970 --> 02:11:12,380
imagine why fixing the 738 bug would

1990
02:11:10,159 --> 02:11:14,479
help render duck because it's not

1991
02:11:12,380 --> 02:11:19,039
running my application anymore so I

1992
02:11:14,479 --> 02:11:23,649
don't know why that would matter and the

1993
02:11:19,039 --> 02:11:23,649
answer is no it's totally froze again oh

1994
02:11:27,819 --> 02:11:41,689
well that's better than it was sort of I

1995
02:11:37,359 --> 02:11:45,529
mean it's still pretty not usable

1996
02:11:41,689 --> 02:11:48,500
I mean it's so slow it doesn't seem to

1997
02:11:45,529 --> 02:11:51,319
be no it's yeah no it's it's pretty bad

1998
02:11:48,500 --> 02:11:54,770
I think we just have too many draw calls

1999
02:11:51,319 --> 02:11:57,920
maybe remember we can simplify our draw

2000
02:11:54,770 --> 02:11:59,960
calls a lot by adding our textures and

2001
02:11:57,920 --> 02:12:01,489
maybe we would need to do that if we

2002
02:11:59,960 --> 02:12:03,470
wanted to use render duck I'm not sure

2003
02:12:01,489 --> 02:12:06,260
but no I mean I can't even close it

2004
02:12:03,470 --> 02:12:07,369
right so I don't think that really had

2005
02:12:06,260 --> 02:12:08,869
anything to do with it because it

2006
02:12:07,369 --> 02:12:11,359
doesn't run our application during that

2007
02:12:08,869 --> 02:12:17,649
time so I'm not sure why the 7:38 bug

2008
02:12:11,359 --> 02:12:19,369
would even be relevant to it anyway

2009
02:12:17,649 --> 02:12:20,569
thank you everyone for joining me for

2010
02:12:19,369 --> 02:12:23,090
this o handmade hero it's been a

2011
02:12:20,569 --> 02:12:24,139
pleasure coding with you as always if

2012
02:12:23,090 --> 02:12:25,340
you would like to follow the series at

2013
02:12:24,140 --> 02:12:27,350
home you can always peer to the game on

2014
02:12:25,340 --> 02:12:30,050
handmade here at work and it comes with

2015
02:12:27,350 --> 02:12:33,170
a source code which I update after every

2016
02:12:30,050 --> 02:12:35,029
programming session that's about it for

2017
02:12:33,170 --> 02:12:37,640
today I'll be back next weekend for a

2018
02:12:35,029 --> 02:12:39,949
little more coding hopefully we could

2019
02:12:37,640 --> 02:12:42,710
figure out why the graphics card refuses

2020
02:12:39,949 --> 02:12:44,239
to look up into that texture and from

2021
02:12:42,710 --> 02:12:45,409
there we can maybe start playing with

2022
02:12:44,239 --> 02:12:48,829
our lighting a little bit more which is

2023
02:12:45,409 --> 02:12:52,010
what I would like to do until next time

2024
02:12:48,829 --> 02:12:52,488
take it easy and I'll see everyone on

2025
02:12:52,010 --> 02:12:55,659
the

2026
02:12:52,488 --> 02:12:55,659
didn't we use everyone

