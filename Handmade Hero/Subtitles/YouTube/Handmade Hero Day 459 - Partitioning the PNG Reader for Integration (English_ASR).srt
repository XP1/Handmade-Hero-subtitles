1
00:00:00,030 --> 00:00:03,539
hello everybody and welcome to handmade

2
00:00:02,009 --> 00:00:07,410
Hero the shore we code a complete game

3
00:00:03,540 --> 00:00:09,419
live on stream we nominally and I guess

4
00:00:07,410 --> 00:00:11,669
we don't really know because we haven't

5
00:00:09,419 --> 00:00:15,240
had any particular stress testing of it

6
00:00:11,669 --> 00:00:17,160
yet but we actually implemented our own

7
00:00:15,240 --> 00:00:20,039
PNG reader over the past couple episodes

8
00:00:17,160 --> 00:00:23,039
and it appears to be functional at least

9
00:00:20,039 --> 00:00:26,580
for the PNG s that we have tested so far

10
00:00:23,039 --> 00:00:29,699
which means we can proceed to step two

11
00:00:26,579 --> 00:00:32,579
of our plan for world domination which

12
00:00:29,699 --> 00:00:35,910
is trying to put some art into handmade

13
00:00:32,579 --> 00:00:37,500
hero and actually as part of that

14
00:00:35,909 --> 00:00:41,009
process in addition to putting art in

15
00:00:37,500 --> 00:00:44,128
handmade hero making it be able to have

16
00:00:41,009 --> 00:00:46,920
something in the way of an easy-to-use

17
00:00:44,128 --> 00:00:49,349
system so that an artist who was running

18
00:00:46,920 --> 00:00:52,590
the game who wanted to replace an art

19
00:00:49,350 --> 00:00:55,469
asset in the game could do so without

20
00:00:52,590 --> 00:00:57,329
having to know how to program or

21
00:00:55,469 --> 00:01:00,989
anything like that something that can

22
00:00:57,329 --> 00:01:02,789
work in this way so that's our goal for

23
00:01:00,988 --> 00:01:05,188
the next couple episodes is to work

24
00:01:02,789 --> 00:01:08,670
towards that we've put ourselves in a

25
00:01:05,188 --> 00:01:10,079
situation that none of the architecture

26
00:01:08,670 --> 00:01:12,359
in our game really will probably will

27
00:01:10,079 --> 00:01:14,700
have to change because we already

28
00:01:12,359 --> 00:01:17,009
support on-demand streaming of assets

29
00:01:14,700 --> 00:01:19,920
and when you support on-demand streaming

30
00:01:17,009 --> 00:01:22,530
of assets it means that you could just

31
00:01:19,920 --> 00:01:24,930
for free replace an asset because since

32
00:01:22,530 --> 00:01:27,540
all of the game already has to be

33
00:01:24,930 --> 00:01:30,780
written you know in a manner that makes

34
00:01:27,540 --> 00:01:32,840
it so that the the game doesn't know

35
00:01:30,780 --> 00:01:35,640
whether the asset is present or not

36
00:01:32,840 --> 00:01:38,310
replacing the asset with a new asset is

37
00:01:35,640 --> 00:01:42,810
fairly trivial now there are some things

38
00:01:38,310 --> 00:01:44,759
that we may have to work on that that

39
00:01:42,810 --> 00:01:47,030
aren't streamed like there may be some

40
00:01:44,759 --> 00:01:49,709
things that we count on being consistent

41
00:01:47,030 --> 00:01:52,079
that now won't be consistent but we've

42
00:01:49,709 --> 00:01:55,169
already done the bulk of the work which

43
00:01:52,078 --> 00:01:58,468
which is to say that not knowing that an

44
00:01:55,170 --> 00:02:00,810
asset is always there is really the hard

45
00:01:58,468 --> 00:02:03,599
part of hot loading and we've already

46
00:02:00,810 --> 00:02:06,060
done that so we really we're gonna have

47
00:02:03,599 --> 00:02:07,978
a much easier time of this than you

48
00:02:06,060 --> 00:02:10,618
would have if you were retrofitting hot

49
00:02:07,978 --> 00:02:12,759
loading into a game that had never

50
00:02:10,618 --> 00:02:16,479
considered the possibility

51
00:02:12,759 --> 00:02:19,000
that an art asset wasn't present because

52
00:02:16,479 --> 00:02:21,369
you know that's the part that usually

53
00:02:19,000 --> 00:02:23,759
trips you up and we won't have that so

54
00:02:21,370 --> 00:02:27,250
that's the good news the bad news is

55
00:02:23,759 --> 00:02:31,120
well we probably want to do some

56
00:02:27,250 --> 00:02:33,939
architectural changes anyway because now

57
00:02:31,120 --> 00:02:35,408
that we know that we want to support

58
00:02:33,939 --> 00:02:38,169
Hardware rendering because we have a

59
00:02:35,408 --> 00:02:40,419
hardware renderer now we probably want

60
00:02:38,169 --> 00:02:44,348
to take this opportunity to also enforce

61
00:02:40,419 --> 00:02:46,089
some kind of a rigid texture size so

62
00:02:44,348 --> 00:02:47,709
that we can use texture arrays and avoid

63
00:02:46,090 --> 00:02:49,150
all of the draw call restarts that we

64
00:02:47,709 --> 00:02:52,000
currently have to do because we allow

65
00:02:49,150 --> 00:02:53,889
textures to be arbitrarily sized so we

66
00:02:52,000 --> 00:02:55,658
may end up doing some architectural

67
00:02:53,889 --> 00:02:58,150
changes anyway but again those should

68
00:02:55,658 --> 00:03:00,280
probably be much more limited than they

69
00:02:58,150 --> 00:03:02,049
would have had to been otherwise had we

70
00:03:00,280 --> 00:03:06,579
not done a streaming asset system so

71
00:03:02,049 --> 00:03:09,819
streaming asset system kind of coming

72
00:03:06,579 --> 00:03:11,799
into play here I noticed some people on

73
00:03:09,818 --> 00:03:14,408
the chat saying that they are mesmerized

74
00:03:11,799 --> 00:03:17,169
by the bobbing orphan on the webpage yes

75
00:03:14,408 --> 00:03:19,000
that is kind of a fun little animation

76
00:03:17,169 --> 00:03:22,290
we made for the handmade here a purchase

77
00:03:19,000 --> 00:03:25,689
badge we thought it would be fun if our

78
00:03:22,289 --> 00:03:27,219
if our websites all had sort of animated

79
00:03:25,689 --> 00:03:29,620
badges instead of the kind of lame

80
00:03:27,219 --> 00:03:33,549
static badges and we just had fun making

81
00:03:29,620 --> 00:03:35,829
them so Anna drew this one and and it's

82
00:03:33,549 --> 00:03:38,409
it's yeah it's just kind of fun

83
00:03:35,829 --> 00:03:39,969
we actually have those for the handmade

84
00:03:38,409 --> 00:03:44,049
fund as well now there's a little one

85
00:03:39,969 --> 00:03:46,289
for that as well so you get you can get

86
00:03:44,049 --> 00:03:48,370
your pick of little animated icon there

87
00:03:46,289 --> 00:03:49,929
yeah and if you haven't ever used our

88
00:03:48,370 --> 00:03:51,609
website now our new website is pretty

89
00:03:49,930 --> 00:03:53,169
easy to use there's just a button bar at

90
00:03:51,609 --> 00:03:54,609
the top you can get to whatever you want

91
00:03:53,169 --> 00:03:56,049
on the handmade hero stuff and if you

92
00:03:54,609 --> 00:03:59,650
click on the main hero head you can

93
00:03:56,049 --> 00:04:01,750
actually get all of our our websites you

94
00:03:59,650 --> 00:04:03,760
can jump directly to them actually so

95
00:04:01,750 --> 00:04:06,459
you can jump to 1935 if you want to

96
00:04:03,759 --> 00:04:08,500
which we'll be updating actually in a

97
00:04:06,459 --> 00:04:09,908
couple months with some you know

98
00:04:08,500 --> 00:04:12,459
screenshots and trailers and stuff so

99
00:04:09,908 --> 00:04:13,780
that'll be used to know we've got the

100
00:04:12,459 --> 00:04:15,939
comic that Anna's working on right now

101
00:04:13,780 --> 00:04:17,139
which should come out soon as well so we

102
00:04:15,939 --> 00:04:19,538
got those got handmade here we got our

103
00:04:17,139 --> 00:04:22,060
main site which you can always go back

104
00:04:19,538 --> 00:04:24,009
to you with the blog and so on and then

105
00:04:22,060 --> 00:04:24,420
we have our personal pages right like my

106
00:04:24,009 --> 00:04:27,089
page

107
00:04:24,420 --> 00:04:29,009
it's on there with with all of my stuff

108
00:04:27,089 --> 00:04:31,139
on it you can go to my blog for example

109
00:04:29,009 --> 00:04:33,209
and see stuff that I'm posting or

110
00:04:31,139 --> 00:04:35,250
whatever so it's pretty handy and then

111
00:04:33,209 --> 00:04:39,629
Anna's got kind of an old school blog

112
00:04:35,250 --> 00:04:40,829
she still has one at tumblr with her old

113
00:04:39,629 --> 00:04:42,779
artwork on it and stuff like that so

114
00:04:40,829 --> 00:04:43,769
anyway it's pretty easy to use if you

115
00:04:42,779 --> 00:04:46,199
ever want to browse around there and

116
00:04:43,769 --> 00:04:47,879
just find my Rocket stuff it should work

117
00:04:46,199 --> 00:04:49,620
really well on mobile too so if you're

118
00:04:47,879 --> 00:04:51,360
you know just killing time or something

119
00:04:49,620 --> 00:04:53,759
like that anyway

120
00:04:51,360 --> 00:04:56,699
so let's go ahead and get started what

121
00:04:53,759 --> 00:04:58,529
we need to do now is actually we should

122
00:04:56,699 --> 00:04:59,909
prep before we integrate the PNG reader

123
00:04:58,529 --> 00:05:02,519
in a hammy oh shoot we try to figure out

124
00:04:59,910 --> 00:05:05,250
whether we can even load the files that

125
00:05:02,519 --> 00:05:06,299
we need to load so what first thing

126
00:05:05,250 --> 00:05:08,850
you're gonna want to do if you're

127
00:05:06,300 --> 00:05:10,740
following along at home is there's a new

128
00:05:08,850 --> 00:05:13,290
art pack up on the download link that

129
00:05:10,740 --> 00:05:15,540
you got to get so this is the new art

130
00:05:13,290 --> 00:05:18,240
pack it's handmade hero art pack 1 zip

131
00:05:15,540 --> 00:05:21,810
and it's a bunch of test art in the

132
00:05:18,240 --> 00:05:23,819
right format that that is basically

133
00:05:21,810 --> 00:05:25,860
examples of all different sort of stuff

134
00:05:23,819 --> 00:05:30,500
that we want to be able to load so like

135
00:05:25,860 --> 00:05:35,009
character like NPCs playable characters

136
00:05:30,500 --> 00:05:37,649
like block tiles cover coverage stuff

137
00:05:35,009 --> 00:05:39,839
you know a title screen and so on so

138
00:05:37,649 --> 00:05:41,819
like all the stuff that we might want to

139
00:05:39,839 --> 00:05:43,109
load is in there so the first thing

140
00:05:41,819 --> 00:05:45,360
we're gonna have to do obviously is

141
00:05:43,110 --> 00:05:47,850
we're gonna have to unpack that stuff

142
00:05:45,360 --> 00:05:49,620
into some place in the handmade curio

143
00:05:47,850 --> 00:05:52,439
directory that we want to load things

144
00:05:49,620 --> 00:05:54,780
from now we've got a data directory here

145
00:05:52,439 --> 00:05:56,310
in the data directory has a bunch of

146
00:05:54,779 --> 00:05:58,289
stuff in it that's what the game loads

147
00:05:56,310 --> 00:06:00,620
what I want to do is make a

148
00:05:58,290 --> 00:06:04,290
differentiation between those two things

149
00:06:00,620 --> 00:06:06,269
so I want to create a separation

150
00:06:04,290 --> 00:06:10,140
directory separation just to make it

151
00:06:06,269 --> 00:06:13,759
clear between data that the game loads

152
00:06:10,139 --> 00:06:17,099
and data that the artist works with and

153
00:06:13,759 --> 00:06:18,420
what's in this art pack is for the first

154
00:06:17,100 --> 00:06:20,189
time because we're trying to get a

155
00:06:18,420 --> 00:06:22,470
pipeline that runs at run time in the

156
00:06:20,189 --> 00:06:27,149
game running now where it'll suck in art

157
00:06:22,470 --> 00:06:32,040
as it comes in at run time is I want to

158
00:06:27,149 --> 00:06:35,219
make a different sort of directory for

159
00:06:32,040 --> 00:06:38,250
the source files so I'm going to make an

160
00:06:35,220 --> 00:06:44,280
art directory here for the first time

161
00:06:38,250 --> 00:06:47,129
and I'm gonna unzip this this art pack

162
00:06:44,279 --> 00:06:49,469
in there to differentiate it from data

163
00:06:47,129 --> 00:06:51,839
because data is still I think we're

164
00:06:49,470 --> 00:06:53,820
still gonna want to have these HHA files

165
00:06:51,839 --> 00:06:55,679
which are like what we consider to be

166
00:06:53,819 --> 00:06:59,759
the running package that we would ship

167
00:06:55,680 --> 00:07:02,550
at the game so this art is really not

168
00:06:59,759 --> 00:07:06,269
what we will be loading for the actual

169
00:07:02,550 --> 00:07:09,900
game necessarily it's just what the

170
00:07:06,269 --> 00:07:12,180
artist would dump art into and expect

171
00:07:09,899 --> 00:07:15,359
the game to load it right so it's

172
00:07:12,180 --> 00:07:16,949
different so anyway if you look at how

173
00:07:15,360 --> 00:07:18,120
these are structured there's a couple of

174
00:07:16,949 --> 00:07:21,920
different things in there there's like

175
00:07:18,120 --> 00:07:24,480
for example this these template files

176
00:07:21,920 --> 00:07:26,550
I'm gonna use the Photos app to view

177
00:07:24,480 --> 00:07:27,150
this here actually you know what I don't

178
00:07:26,550 --> 00:07:30,360
like

179
00:07:27,149 --> 00:07:32,429
do I like for us well that's fine so if

180
00:07:30,360 --> 00:07:34,560
you take a look at the template file you

181
00:07:32,430 --> 00:07:36,660
can see that it's got like a little bit

182
00:07:34,560 --> 00:07:38,579
of information on it like for state 1

183
00:07:36,660 --> 00:07:40,830
for state to Warren and then the

184
00:07:38,579 --> 00:07:44,668
direction the things facing there's one

185
00:07:40,829 --> 00:07:52,319
for character files as well where is

186
00:07:44,668 --> 00:07:59,279
that character templates can I just have

187
00:07:52,319 --> 00:08:00,659
this there we go okay uh so if I open up

188
00:07:59,279 --> 00:08:02,819
the character template one which you can

189
00:08:00,660 --> 00:08:04,680
see here I don't know why it insists on

190
00:08:02,819 --> 00:08:06,959
get like you just have the lines go away

191
00:08:04,680 --> 00:08:08,790
it's like it's it's blending thing like

192
00:08:06,959 --> 00:08:11,549
gets rid of the lines or something and

193
00:08:08,790 --> 00:08:13,740
that's sure what's going on there how do

194
00:08:11,550 --> 00:08:15,810
i yeah you can see there's lines there

195
00:08:13,740 --> 00:08:17,850
and they like disappear and that's

196
00:08:15,810 --> 00:08:20,449
that's some pretty questionable that's

197
00:08:17,850 --> 00:08:24,600
some pretty questionable zoom code there

198
00:08:20,449 --> 00:08:26,129
Microsoft anyway so what you can see

199
00:08:24,600 --> 00:08:27,840
here is just just a template file it's

200
00:08:26,129 --> 00:08:29,310
got a grid in it maybe if I load this

201
00:08:27,839 --> 00:08:30,560
into a program that was written by

202
00:08:29,310 --> 00:08:35,479
somebody who knew what they were doing

203
00:08:30,560 --> 00:08:35,479
we'd be able to see those let's see here

204
00:08:35,779 --> 00:08:43,709
let me go and load that keep that yes so

205
00:08:42,029 --> 00:08:45,179
you can see so you can see the grid here

206
00:08:43,710 --> 00:08:46,769
because this was written by someone

207
00:08:45,179 --> 00:08:49,199
who's you know ever heard of graphics

208
00:08:46,769 --> 00:08:51,639
and knows how they work so you can see

209
00:08:49,200 --> 00:08:54,490
here there's like a grid and it's got

210
00:08:51,639 --> 00:08:57,100
columns and rows default dodge left

211
00:08:54,490 --> 00:08:59,409
dodge right move hit attack you know one

212
00:08:57,100 --> 00:09:02,019
attack to default surprise anger this is

213
00:08:59,409 --> 00:09:04,209
how the artist laid out the different

214
00:09:02,019 --> 00:09:06,460
things and they just packed them into a

215
00:09:04,210 --> 00:09:08,440
file so that they're easier to load all

216
00:09:06,460 --> 00:09:10,660
and you can see here the body is at the

217
00:09:08,440 --> 00:09:13,420
top the heads at the bottom and there's

218
00:09:10,659 --> 00:09:16,360
directional arrows like right up left

219
00:09:13,419 --> 00:09:18,129
and down and these are just to remind us

220
00:09:16,360 --> 00:09:21,129
and we will use those as well to remind

221
00:09:18,129 --> 00:09:22,990
us how we're doing there so also before

222
00:09:21,129 --> 00:09:24,580
I go I'm gonna go ahead and switch this

223
00:09:22,990 --> 00:09:28,330
back because whoever wrote that program

224
00:09:24,580 --> 00:09:29,410
is really should probably be fired I'm

225
00:09:28,330 --> 00:09:31,360
gonna go ahead and switch it to a

226
00:09:29,409 --> 00:09:32,889
program that actually can resize an

227
00:09:31,360 --> 00:09:36,100
image without losing all the information

228
00:09:32,889 --> 00:09:39,189
in it because I think there is a like we

229
00:09:36,100 --> 00:09:43,750
need a viewer like the old viewer that

230
00:09:39,190 --> 00:09:45,610
actually works let me see here because

231
00:09:43,750 --> 00:09:48,039
isn't there usually is one that used

232
00:09:45,610 --> 00:09:50,080
there's just a photo viewer thing that

233
00:09:48,039 --> 00:09:55,000
actually works right or at least there

234
00:09:50,080 --> 00:09:59,040
was one maybe if I click on a other type

235
00:09:55,000 --> 00:09:59,039
of image or something

236
00:09:59,399 --> 00:10:09,250
coping with so those are set to canoe

237
00:10:07,120 --> 00:10:11,649
right now yeah I just don't know how to

238
00:10:09,250 --> 00:10:14,019
get back to having it open in like

239
00:10:11,649 --> 00:10:15,370
that's default one you know the one that

240
00:10:14,019 --> 00:10:18,159
I'm talking about that just comes with

241
00:10:15,370 --> 00:10:20,490
it where is that one because that one

242
00:10:18,159 --> 00:10:25,179
actually sort of worked

243
00:10:20,490 --> 00:10:27,629
what XC is the windows 7 default Photo

244
00:10:25,179 --> 00:10:27,629
Viewer

245
00:10:29,460 --> 00:10:40,450
hello seven forums wellness Furies

246
00:10:37,659 --> 00:10:43,549
remember ideal host okay start for the

247
00:10:40,450 --> 00:10:50,809
command line you would use this

248
00:10:43,549 --> 00:10:50,808
[Music]

249
00:10:53,200 --> 00:11:06,310
okay so it looks like you can maybe set

250
00:10:55,549 --> 00:11:08,359
default programs maybe that will work

251
00:11:06,309 --> 00:11:09,949
looks like think it looks like they got

252
00:11:08,360 --> 00:11:16,700
rid of it though like from those

253
00:11:09,950 --> 00:11:19,040
settings so we something with Microsoft

254
00:11:16,700 --> 00:11:21,050
it's like they can't even draw a picture

255
00:11:19,039 --> 00:11:23,059
that's that's where we're at they can't

256
00:11:21,049 --> 00:11:23,599
not even load an image they were like

257
00:11:23,059 --> 00:11:27,079
yeah

258
00:11:23,600 --> 00:11:29,720
sorry man I got nothing I have no idea

259
00:11:27,080 --> 00:11:32,120
how to draw a picture to a screen let's

260
00:11:29,720 --> 00:11:33,710
see here default programs set your

261
00:11:32,120 --> 00:11:39,039
default programs now it's going to

262
00:11:33,710 --> 00:11:39,040
launch that thing again yeah

263
00:11:43,698 --> 00:11:45,758
you

264
00:11:46,399 --> 00:11:50,328
so let's see

265
00:12:11,480 --> 00:12:20,649
I don't know maybe you can't get it back

266
00:12:22,299 --> 00:12:26,349
there must be some way

267
00:12:32,029 --> 00:12:36,709
thank you for like in the dating methods

268
00:12:43,519 --> 00:12:47,509
but that didn't work

269
00:12:48,169 --> 00:12:53,360
copy the code of this post time for us

270
00:12:50,759 --> 00:13:01,889
into notepad and save it as a reg file

271
00:12:53,360 --> 00:13:04,050
don't look like your new reg file all

272
00:13:01,889 --> 00:13:09,360
right we can do that so here's the Photo

273
00:13:04,049 --> 00:13:12,179
Viewer stuff yeah we could try this this

274
00:13:09,360 --> 00:13:19,220
looks legit it's only modifying those

275
00:13:12,179 --> 00:13:21,569
classes let's give it a shot

276
00:13:19,220 --> 00:13:24,360
can't believe I have to do this to view

277
00:13:21,570 --> 00:13:28,200
an image this is a new low even for

278
00:13:24,360 --> 00:13:32,180
Microsoft who honestly is like the

279
00:13:28,200 --> 00:13:32,180
expert of plumbing the lows lately

280
00:13:40,440 --> 00:13:51,340
all right I don't know if we would have

281
00:13:42,820 --> 00:13:53,730
to launch Explorer for that because it

282
00:13:51,340 --> 00:13:53,730
looks like

283
00:14:06,028 --> 00:14:10,188
I still don't see it oh there it is yes

284
00:14:11,120 --> 00:14:21,438
yes all right

285
00:14:14,490 --> 00:14:21,438
thank you seen it now

286
00:14:28,690 --> 00:14:37,120
there we go all right so seen I don't

287
00:14:34,690 --> 00:14:41,020
think they're loading the transparency

288
00:14:37,120 --> 00:14:43,240
right on these pings so there's that but

289
00:14:41,019 --> 00:14:45,549
at least let's see yeah so at least it

290
00:14:43,240 --> 00:14:46,930
can show the grid right so the first

291
00:14:45,549 --> 00:14:49,389
thing you wrote this wasn't like a

292
00:14:46,929 --> 00:14:51,250
complete tool they had some idea what

293
00:14:49,389 --> 00:14:53,889
they were doing not a whole lot but at

294
00:14:51,250 --> 00:14:55,649
least they can sort of do something

295
00:14:53,889 --> 00:14:58,929
right so now we can at least see that

296
00:14:55,649 --> 00:15:04,299
the file in some semblance of what it

297
00:14:58,929 --> 00:15:06,459
actually contains all right so what we

298
00:15:04,299 --> 00:15:09,819
want to do here is we want to start

299
00:15:06,460 --> 00:15:14,889
taking these files and we want to start

300
00:15:09,820 --> 00:15:16,090
bringing them into the the game and we

301
00:15:14,889 --> 00:15:18,069
want the game to be able to process them

302
00:15:16,090 --> 00:15:19,780
so you can see we've got some NPCs here

303
00:15:18,070 --> 00:15:22,030
right that we can stick in to the

304
00:15:19,779 --> 00:15:24,220
orphanage just a bunch of random orphans

305
00:15:22,029 --> 00:15:26,529
and then we also have the handmade hero

306
00:15:24,220 --> 00:15:29,680
one who's the actual main character

307
00:15:26,529 --> 00:15:31,929
which has some test lean animations as

308
00:15:29,679 --> 00:15:33,399
well not animations but extra frames if

309
00:15:31,929 --> 00:15:36,099
that makes sense

310
00:15:33,399 --> 00:15:37,840
and also some expression test stuff so

311
00:15:36,100 --> 00:15:39,550
we can play around that and see what we

312
00:15:37,840 --> 00:15:42,160
actually want know stuff some cats which

313
00:15:39,549 --> 00:15:46,139
is important these are some tile sets

314
00:15:42,159 --> 00:15:49,089
right for so that we can actually have

315
00:15:46,139 --> 00:15:51,159
so that we can wrap some things onto our

316
00:15:49,090 --> 00:15:53,769
cubes that maybe look like wood or like

317
00:15:51,159 --> 00:15:55,089
stone or like walls right so we can play

318
00:15:53,769 --> 00:15:57,279
around with those as well and then we

319
00:15:55,090 --> 00:15:58,930
have some base green green ones we also

320
00:15:57,279 --> 00:16:03,429
have a little title logo we can put up

321
00:15:58,929 --> 00:16:05,500
there and some some example like ground

322
00:16:03,429 --> 00:16:07,149
cover stuff and basically the goal here

323
00:16:05,500 --> 00:16:09,190
is just to take some of these things oh

324
00:16:07,149 --> 00:16:13,120
and some attachments for characters like

325
00:16:09,190 --> 00:16:15,490
the hats hands things like that also

326
00:16:13,120 --> 00:16:17,529
ground cover and stuff like that so

327
00:16:15,490 --> 00:16:19,600
basically we have stuff we can play with

328
00:16:17,529 --> 00:16:22,299
and our goal here is just to put these

329
00:16:19,600 --> 00:16:25,389
into the game and get them working so

330
00:16:22,299 --> 00:16:27,459
that we can then take it back to Anna so

331
00:16:25,389 --> 00:16:29,049
that she can actually draw stuff in the

332
00:16:27,460 --> 00:16:32,519
context of the game and see what looks

333
00:16:29,049 --> 00:16:34,479
good you know because at the moment

334
00:16:32,519 --> 00:16:36,189
there's really no way to do that right

335
00:16:34,480 --> 00:16:38,350
she can't really get any feedback about

336
00:16:36,190 --> 00:16:45,120
how the things should be drawn or

337
00:16:38,350 --> 00:16:45,120
what they should do right okay

338
00:16:45,539 --> 00:16:51,039
so that's really all we need here so

339
00:16:48,580 --> 00:16:55,120
we've got all this stuff so you can see

340
00:16:51,039 --> 00:16:56,949
our our path is completely laid out

341
00:16:55,120 --> 00:16:58,600
before us here I should probably put

342
00:16:56,950 --> 00:17:00,129
this photo of your reg thing into the

343
00:16:58,600 --> 00:17:02,950
misc directory potentially because

344
00:17:00,129 --> 00:17:05,410
honestly like we may need that again if

345
00:17:02,950 --> 00:17:08,049
Windows decides to give us another

346
00:17:05,410 --> 00:17:10,480
crappy photo viewer that doesn't work so

347
00:17:08,049 --> 00:17:13,799
I that's all you should need to do with

348
00:17:10,480 --> 00:17:15,789
the art pack once you've got that all

349
00:17:13,799 --> 00:17:17,319
unpacked in there you can get rid of the

350
00:17:15,789 --> 00:17:19,659
zip file we won't need that anymore we

351
00:17:17,319 --> 00:17:21,819
just need it to be in the directory

352
00:17:19,660 --> 00:17:23,259
where we can get it and so then we can

353
00:17:21,819 --> 00:17:25,119
start the process of trying to figure

354
00:17:23,259 --> 00:17:27,160
out how that's gonna go in there now

355
00:17:25,119 --> 00:17:29,229
like I've seen before I go any further

356
00:17:27,160 --> 00:17:33,220
because I don't really want to get too

357
00:17:29,230 --> 00:17:34,839
into the I don't want to go too far down

358
00:17:33,220 --> 00:17:37,120
the process of getting handmade hero

359
00:17:34,839 --> 00:17:39,009
ready to read PNG files and integrate

360
00:17:37,119 --> 00:17:40,929
them into its data set until I actually

361
00:17:39,009 --> 00:17:42,940
know whether we can read these PNG files

362
00:17:40,930 --> 00:17:45,220
in the first place because we've only

363
00:17:42,940 --> 00:17:47,559
tested the PNG reader very lightly and

364
00:17:45,220 --> 00:17:49,420
so what I want to know first is can we

365
00:17:47,559 --> 00:17:52,419
read these files these were output by

366
00:17:49,420 --> 00:17:56,710
Photoshop that's who we want to be able

367
00:17:52,420 --> 00:17:59,110
to read the files from and so I want to

368
00:17:56,710 --> 00:18:01,539
start testing these files to see whether

369
00:17:59,109 --> 00:18:04,269
Photoshop puts anything into it span

370
00:18:01,539 --> 00:18:07,899
geez that's different from the PNG s we

371
00:18:04,269 --> 00:18:10,960
were testing from because that way

372
00:18:07,900 --> 00:18:12,790
I can tell whether there's any kind of

373
00:18:10,960 --> 00:18:14,710
stuff that we forgot to implement or

374
00:18:12,789 --> 00:18:17,379
implemented wrong that we just like

375
00:18:14,710 --> 00:18:19,420
cases we just didn't hit because we did

376
00:18:17,380 --> 00:18:21,070
happen to ever see them like they didn't

377
00:18:19,420 --> 00:18:23,230
occur they don't occur when you're using

378
00:18:21,069 --> 00:18:25,210
giimpse compressor is different

379
00:18:23,230 --> 00:18:28,029
than photoshop's compressor probably

380
00:18:25,210 --> 00:18:30,880
right and so we want to be able to just

381
00:18:28,029 --> 00:18:32,349
get a sub perspective on whether or not

382
00:18:30,880 --> 00:18:36,790
we're gonna see something different here

383
00:18:32,349 --> 00:18:40,119
so if I go to the handmade art directory

384
00:18:36,789 --> 00:18:43,869
here like so I can just pick something

385
00:18:40,119 --> 00:18:44,199
maybe we'll load the character for the

386
00:18:43,869 --> 00:18:47,789
hero

387
00:18:44,200 --> 00:18:47,789
so just character hero dot PNG

388
00:18:49,710 --> 00:18:57,720
and then we'll just write that into the

389
00:18:52,230 --> 00:18:59,700
temp directory as a bitmap and we'll

390
00:18:57,720 --> 00:19:01,909
just run the program and see you know

391
00:18:59,700 --> 00:19:04,169
does it even work does it crash whatever

392
00:19:01,909 --> 00:19:05,730
so this is perfect right you can see we

393
00:19:04,169 --> 00:19:08,309
found something already this should not

394
00:19:05,730 --> 00:19:10,110
have happened so this is what I want to

395
00:19:08,308 --> 00:19:13,200
debug first and I wanted to bug it here

396
00:19:10,109 --> 00:19:17,939
because we've got a nice simple program

397
00:19:13,200 --> 00:19:21,390
set up which is designed to just do one

398
00:19:17,940 --> 00:19:25,980
PNG read so we can find anything that is

399
00:19:21,390 --> 00:19:28,320
not what we would expect right so when

400
00:19:25,980 --> 00:19:32,599
we were parsing to PNG here we went into

401
00:19:28,319 --> 00:19:36,269
some kind of a bit into a consume bits

402
00:19:32,599 --> 00:19:37,980
run where we were trying to copy a giant

403
00:19:36,269 --> 00:19:47,970
in fact this is a this is a block copy

404
00:19:37,980 --> 00:19:50,730
of this is a copy of an entire large

405
00:19:47,970 --> 00:19:54,179
chunk of data oh you know what this may

406
00:19:50,730 --> 00:19:59,370
this may just be a very simple problem

407
00:19:54,179 --> 00:20:02,309
actually now that I think about it we

408
00:19:59,369 --> 00:20:08,028
don't really handle huge block copies

409
00:20:02,308 --> 00:20:10,168
that cross multiple i dot chunks do we

410
00:20:08,028 --> 00:20:12,659
so that could be a problem of course

411
00:20:10,169 --> 00:20:14,520
looking at this I don't this is only one

412
00:20:12,659 --> 00:20:18,750
IDOT chunk so there must be a different

413
00:20:14,519 --> 00:20:20,940
bug in here right I think so anyway we

414
00:20:18,750 --> 00:20:22,470
should we're we're gonna have to take a

415
00:20:20,940 --> 00:20:24,210
look at this a little bit more carefully

416
00:20:22,470 --> 00:20:25,679
because there's only one on that trunk

417
00:20:24,210 --> 00:20:29,880
so that's not the problem but I do think

418
00:20:25,679 --> 00:20:33,630
if I'm not mistaken I feel like consume

419
00:20:29,880 --> 00:20:36,120
size in this case wouldn't work if it

420
00:20:33,630 --> 00:20:39,210
was split over more than one eye that

421
00:20:36,119 --> 00:20:41,009
chunk you know what I'm saying so I

422
00:20:39,210 --> 00:20:43,079
might I might slap what to do in there

423
00:20:41,009 --> 00:20:45,509
just because I feel like we for

424
00:20:43,079 --> 00:20:47,189
completeness sake did that's not the

425
00:20:45,509 --> 00:20:49,379
problem here but I had not thought about

426
00:20:47,190 --> 00:20:52,710
that before this really needs to be a

427
00:20:49,380 --> 00:20:54,028
loop that consumes as much as it can

428
00:20:52,710 --> 00:20:56,360
from the current I that chunk and then

429
00:20:54,028 --> 00:20:56,359
moves

430
00:21:38,509 --> 00:21:43,250
so just to leave that in there because

431
00:21:41,630 --> 00:21:45,410
I'm pretty sure it would just wouldn't

432
00:21:43,250 --> 00:21:50,059
work right you'd call consume size and

433
00:21:45,410 --> 00:21:52,220
consume size would say I want 50 bytes

434
00:21:50,059 --> 00:21:55,190
but there's only 30 bytes left in that

435
00:21:52,220 --> 00:21:59,960
idaite chunk that'll just fail right

436
00:21:55,190 --> 00:22:02,390
there's nothing you can do to fix that

437
00:21:59,960 --> 00:22:04,730
and so what we would need to do is is

438
00:22:02,390 --> 00:22:06,440
make it so that once you get the length

439
00:22:04,730 --> 00:22:09,769
there's like a thing where you're like

440
00:22:06,440 --> 00:22:12,799
hey consume as much as I can up to this

441
00:22:09,769 --> 00:22:16,250
amount and then if I can't consume it

442
00:22:12,799 --> 00:22:17,990
all I'll just loop inside there doing as

443
00:22:16,250 --> 00:22:22,309
much as I can so this would have to have

444
00:22:17,990 --> 00:22:24,529
a four loop in it basically right you

445
00:22:22,309 --> 00:22:28,250
know it would have to have a thing

446
00:22:24,529 --> 00:22:29,539
around the hole around the outside but

447
00:22:28,250 --> 00:22:31,460
that's not our problem currently because

448
00:22:29,539 --> 00:22:34,399
this is a single I that chunk at the

449
00:22:31,460 --> 00:22:39,350
moment so we shouldn't actually have

450
00:22:34,400 --> 00:22:49,420
that issue here so we should be able to

451
00:22:39,349 --> 00:22:49,419
debug this separately what's going on

452
00:22:50,529 --> 00:22:55,970
there we go we should be able to debug

453
00:22:54,710 --> 00:22:57,559
this separately because since this is

454
00:22:55,970 --> 00:23:01,579
inside a single eye that chunk we

455
00:22:57,559 --> 00:23:05,629
shouldn't have that problem so we start

456
00:23:01,579 --> 00:23:08,240
off here doing some bit consumption

457
00:23:05,630 --> 00:23:13,250
right the standard kind that we normally

458
00:23:08,240 --> 00:23:19,309
do let's see what we get we decompress

459
00:23:13,250 --> 00:23:20,539
this stuff blah blah blah just copying

460
00:23:19,309 --> 00:23:23,599
some literals here let's see what

461
00:23:20,539 --> 00:23:24,920
happens when we exit out I don't know

462
00:23:23,599 --> 00:23:26,329
why I can't set a breakpoint there

463
00:23:24,920 --> 00:23:27,440
probably because visual studios do

464
00:23:26,329 --> 00:23:29,119
butter keeps getting worse

465
00:23:27,440 --> 00:23:30,529
eventually what's gonna happen is a

466
00:23:29,119 --> 00:23:31,639
really bad debugger for Windows is gonna

467
00:23:30,529 --> 00:23:34,309
be better than Visual Studio because

468
00:23:31,640 --> 00:23:35,540
it's losing all of its features it's

469
00:23:34,309 --> 00:23:38,539
nuts

470
00:23:35,539 --> 00:23:40,099
alright anyway so I just want to take a

471
00:23:38,539 --> 00:23:41,539
quick look I'm finna try for how to set

472
00:23:40,099 --> 00:23:47,899
a breakpoint that will actually work

473
00:23:41,539 --> 00:23:50,420
there so this is probably the my best

474
00:23:47,900 --> 00:23:55,030
bet set a breakpoint on the the case

475
00:23:50,420 --> 00:23:55,029
that actually breaks out okay

476
00:23:55,130 --> 00:23:58,339
[Music]

477
00:24:03,470 --> 00:24:14,339
so it goes through it goes through many

478
00:24:12,150 --> 00:24:16,830
regular blocks and those all seem to

479
00:24:14,339 --> 00:24:20,189
parse okay because you know you know you

480
00:24:16,829 --> 00:24:22,769
notice we're never hitting like a little

481
00:24:20,190 --> 00:24:25,170
encount problem or anything like that

482
00:24:22,769 --> 00:24:27,450
so it looks like our Huffman table at

483
00:24:25,170 --> 00:24:34,370
least for the most part works correctly

484
00:24:27,450 --> 00:24:38,100
many times for what it's worth right so

485
00:24:34,369 --> 00:24:40,589
we're at least not completely messed up

486
00:24:38,099 --> 00:24:51,269
what I don't know is let me see where we

487
00:24:40,589 --> 00:24:54,539
are in the image right now so we know

488
00:24:51,269 --> 00:24:56,940
that the length of this so if we go look

489
00:24:54,539 --> 00:24:59,149
for example at how big the image is

490
00:24:56,940 --> 00:25:02,070
right so here's the file were actually

491
00:24:59,150 --> 00:25:05,009
reading so if I look at the details here

492
00:25:02,069 --> 00:25:10,859
you can see it's 81 92 by 81 92 right so

493
00:25:05,009 --> 00:25:16,829
it's an 8k by 8k image so each line of

494
00:25:10,859 --> 00:25:23,819
the image should be 81 92 times 4 bytes

495
00:25:16,829 --> 00:25:26,039
per pixel plus one byte for the filter

496
00:25:23,819 --> 00:25:29,609
so if I want to know how many rows this

497
00:25:26,039 --> 00:25:32,549
is so far down I should be able to

498
00:25:29,609 --> 00:25:36,269
divide this by 81 92 times 4 plus 1

499
00:25:32,549 --> 00:25:42,419
right to give me which row were actually

500
00:25:36,269 --> 00:25:45,569
on so we're on row 47 63 supposedly and

501
00:25:42,420 --> 00:25:52,130
you can kind of see us jumping through

502
00:25:45,569 --> 00:25:55,710
the file here jumping through the file

503
00:25:52,130 --> 00:26:02,580
jumping through the file bla bla bla bla

504
00:25:55,710 --> 00:26:04,940
bla bla and still jumping through the

505
00:26:02,579 --> 00:26:04,939
file

506
00:26:12,299 --> 00:26:15,818
[Music]

507
00:26:19,079 --> 00:26:26,048
okay so is this just us handling some

508
00:26:24,190 --> 00:26:27,038
kind of a padding thing wrong it looks

509
00:26:26,048 --> 00:26:29,168
like we do

510
00:26:27,038 --> 00:26:32,440
looks like we decompressed basically the

511
00:26:29,169 --> 00:26:36,369
whole image let's take a look at the

512
00:26:32,440 --> 00:26:39,999
actual bite count difference here so if

513
00:26:36,368 --> 00:26:44,168
I want to know how many bites are in the

514
00:26:39,999 --> 00:26:47,829
image right again 8192 times four plus

515
00:26:44,169 --> 00:26:51,580
one is the size of one row so eighty one

516
00:26:47,829 --> 00:26:53,769
ninety two of those is the total what

517
00:26:51,579 --> 00:26:57,699
you can see here is we've gotten to

518
00:26:53,769 --> 00:27:01,960
almost the end thus far let's take a

519
00:26:57,700 --> 00:27:05,590
look at where we go from here so we're

520
00:27:01,960 --> 00:27:09,399
gonna do one more so we fit I'd like

521
00:27:05,589 --> 00:27:16,209
it's that's the end like the images is

522
00:27:09,398 --> 00:27:23,079
done it's over so so be final should

523
00:27:16,210 --> 00:27:25,149
have been set so I mean the only bug

524
00:27:23,079 --> 00:27:37,658
here as far as I can tell is that be

525
00:27:25,148 --> 00:27:40,058
final isn't said what's going on be

526
00:27:37,659 --> 00:27:42,850
final still isn't set even after we've

527
00:27:40,058 --> 00:27:45,878
decoded did I do this calculation wrong

528
00:27:42,849 --> 00:27:48,278
or something I mean that looks like the

529
00:27:45,878 --> 00:27:50,108
whole that that's the whole image right

530
00:27:48,278 --> 00:27:51,849
I mean we've decoded the entire there's

531
00:27:50,108 --> 00:27:54,720
nothing left to decode why how's it be

532
00:27:51,849 --> 00:27:54,719
final been set

533
00:28:16,799 --> 00:28:22,700
are you folks as confused about this as

534
00:28:20,519 --> 00:28:22,700
I am

535
00:28:27,470 --> 00:28:31,380
alright so here's what I'm gonna do I

536
00:28:29,640 --> 00:28:33,240
miss most I want to see what the image

537
00:28:31,380 --> 00:28:35,010
was because we've decoded all the bytes

538
00:28:33,240 --> 00:28:36,960
did we get them all wrong are we just

539
00:28:35,009 --> 00:28:41,269
like way off here or something I'm gonna

540
00:28:36,960 --> 00:28:45,420
set it to just run straight to here just

541
00:28:41,269 --> 00:28:48,690
straight up right something to call PNG

542
00:28:45,420 --> 00:28:52,170
filter reconstruct - do you know the

543
00:28:48,690 --> 00:28:53,940
back transform on it and then we're

544
00:28:52,170 --> 00:28:56,759
gonna write it out because I just want

545
00:28:53,940 --> 00:29:00,870
to see what it looks like so if I go

546
00:28:56,759 --> 00:29:03,210
load that up in so that's in our

547
00:29:00,869 --> 00:29:13,319
temp directory it's this guy right here

548
00:29:03,210 --> 00:29:17,490
so I'm gonna open that up I so here's

549
00:29:13,319 --> 00:29:21,179
what we loaded the Alpha Channel does

550
00:29:17,490 --> 00:29:22,980
not appear to be there which I don't

551
00:29:21,180 --> 00:29:25,620
think is our fault

552
00:29:22,980 --> 00:29:26,849
I think that's this programs fault I

553
00:29:25,619 --> 00:29:28,949
don't know if we have anything that can

554
00:29:26,849 --> 00:29:36,419
actually read the Alpha Channel out of a

555
00:29:28,950 --> 00:29:41,670
bitmap my recollection is that that

556
00:29:36,420 --> 00:29:44,430
screws that up now of course we may have

557
00:29:41,670 --> 00:29:46,340
set also we may have set the channel

558
00:29:44,430 --> 00:29:52,080
information wrong for that I'm not sure

559
00:29:46,339 --> 00:29:55,139
I don't know if we need to set other

560
00:29:52,079 --> 00:29:57,389
information for that but ignoring all

561
00:29:55,140 --> 00:30:01,259
that like we read the image I mean

562
00:29:57,390 --> 00:30:03,060
there's no chant we were not garbage so

563
00:30:01,259 --> 00:30:05,670
we read the whole image so now my

564
00:30:03,059 --> 00:30:08,039
question is what's going on with this

565
00:30:05,670 --> 00:30:10,080
stream is there something in the spec

566
00:30:08,039 --> 00:30:14,250
that says that you don't need to put in

567
00:30:10,079 --> 00:30:19,500
a B final chunk if you know how big the

568
00:30:14,250 --> 00:30:21,710
image is you can just stop you know I'm

569
00:30:19,500 --> 00:30:21,710
saying

570
00:30:28,009 --> 00:30:33,538
design making sense a much like is there

571
00:30:30,720 --> 00:30:43,110
something that says hey look I don't

572
00:30:33,538 --> 00:30:45,329
need to set a be final I don't need to

573
00:30:43,109 --> 00:30:48,829
set the final if you know how big the

574
00:30:45,329 --> 00:30:56,129
thing is I'm just I'm just gonna end

575
00:30:48,829 --> 00:30:57,418
without ever setting that cuz it seems

576
00:30:56,130 --> 00:31:05,730
like what's goin on

577
00:30:57,419 --> 00:31:12,450
I mean that really seems like what's

578
00:31:05,730 --> 00:31:14,880
going on there I mean unless I guess let

579
00:31:12,450 --> 00:31:16,620
me check one more thing is it possible

580
00:31:14,880 --> 00:31:24,899
that the width and height are not what I

581
00:31:16,619 --> 00:31:27,418
think they are or something like is it

582
00:31:24,898 --> 00:31:36,298
not what was specified in the file you

583
00:31:27,419 --> 00:31:38,690
know also we can get rid of this now

584
00:31:36,298 --> 00:31:38,690
can't we

585
00:31:48,288 --> 00:31:52,158
no I mean that's what it is

586
00:31:52,819 --> 00:31:58,888
so what's going on here I guess I can go

587
00:31:56,940 --> 00:32:01,320
back and look at the spec did we miss

588
00:31:58,888 --> 00:32:02,939
something or is this are these PNG files

589
00:32:01,319 --> 00:32:04,470
just garbage PNG files

590
00:32:02,940 --> 00:32:09,840
look at these Photoshop just write them

591
00:32:04,470 --> 00:32:11,490
wrong I mean cuz one of the other has to

592
00:32:09,839 --> 00:32:12,898
be true because it doesn't look like

593
00:32:11,490 --> 00:32:15,899
we're getting anything wrong it looks

594
00:32:12,898 --> 00:32:19,158
like we got everything right so either

595
00:32:15,898 --> 00:32:22,158
we're just wrong about the spec maybe I

596
00:32:19,159 --> 00:32:22,159
guess

597
00:32:28,509 --> 00:32:32,009
[Music]

598
00:32:40,240 --> 00:32:45,179
so yeah all right let's see here

599
00:33:02,099 --> 00:33:05,929
so let's look at page five

600
00:33:47,589 --> 00:33:56,548
yeah I just I don't see anything in the

601
00:33:52,839 --> 00:33:56,548
deflate speck which would suggest that

602
00:34:12,210 --> 00:34:17,389
so how about the zips back

603
00:34:32,918 --> 00:34:46,029
I'm not particularly illuminating check

604
00:34:43,369 --> 00:34:46,030
PNG

605
00:35:02,519 --> 00:35:07,190
so we've read this a bunch of times

606
00:35:05,039 --> 00:35:07,190
before

607
00:35:13,039 --> 00:35:21,829
I mean it says a marker bit in the final

608
00:35:15,679 --> 00:35:24,349
block identifies it as the last block so

609
00:35:21,829 --> 00:35:32,090
I mean either these are broken or

610
00:35:24,349 --> 00:35:35,480
somehow we read just that bit wrong like

611
00:35:32,090 --> 00:35:38,600
just that one I mean maybe it's possible

612
00:35:35,480 --> 00:35:40,610
that just that one bit happened at just

613
00:35:38,599 --> 00:35:43,190
the wrong time in the stream that some

614
00:35:40,610 --> 00:35:50,320
in a way that no other bit would ever be

615
00:35:43,190 --> 00:35:50,320
wrong seems far-fetched but you know

616
00:36:08,230 --> 00:36:12,920
TNG all seasons compression in method

617
00:36:10,849 --> 00:36:19,730
zero and ina Suzuki says we don't care

618
00:36:12,920 --> 00:36:22,450
about those we don't read those so I

619
00:36:19,730 --> 00:36:22,449
don't see it

620
00:36:45,230 --> 00:36:52,650
there's some kind of like a pendeks

621
00:36:48,059 --> 00:36:59,420
gamma handling color handling alpha

622
00:36:52,650 --> 00:36:59,420
channel creation DEP scaling pallets

623
00:37:12,369 --> 00:37:16,519
the intruder may divide the compressed

624
00:37:14,960 --> 00:37:18,260
data stream to edit chunks ever wishes

625
00:37:16,519 --> 00:37:19,699
multiple items are allowed so that

626
00:37:18,260 --> 00:37:21,260
encoders may work in a fixed amount of

627
00:37:19,699 --> 00:37:22,669
memory typically the chunk size will

628
00:37:21,260 --> 00:37:24,800
correspond to the encoders buffer size a

629
00:37:22,670 --> 00:37:28,210
PNG data stream in which each I touch on

630
00:37:24,800 --> 00:37:31,250
contains only one data byte is valid

631
00:37:28,210 --> 00:37:33,079
though remarkably wastes lose faith zero

632
00:37:31,250 --> 00:37:36,280
like thatit chunks are also valid either

633
00:37:33,079 --> 00:37:48,079
even more wasteful current processing

634
00:37:36,280 --> 00:37:49,610
use of private chunks errors in a PNG

635
00:37:48,079 --> 00:37:51,289
dishum will fall into two classes

636
00:37:49,610 --> 00:37:55,030
transmission errors and syntax errors

637
00:37:51,289 --> 00:37:55,029
transmission error is blah blah blah

638
00:37:57,400 --> 00:38:02,389
detect area possible decoder can have

639
00:38:00,500 --> 00:38:04,849
confidence the data streams tickity if

640
00:38:02,389 --> 00:38:08,019
the next thing but to edit blah blah

641
00:38:04,849 --> 00:38:08,019
blah there's really nothing

642
00:38:18,670 --> 00:38:24,190
critical or ancillary is not really

643
00:38:21,019 --> 00:38:24,190
relevant to us

644
00:38:33,858 --> 00:38:45,598
I'll see anything here that suggests

645
00:38:41,548 --> 00:38:48,298
that we wouldn't expect the final bit to

646
00:38:45,599 --> 00:38:50,700
be set though non-square pixels can be

647
00:38:48,298 --> 00:38:53,210
represented but viewers are not required

648
00:38:50,699 --> 00:38:56,219
to account for them

649
00:38:53,210 --> 00:39:10,588
sorry not swear pixels rather that's

650
00:38:56,219 --> 00:39:12,659
fine is important up so that identifiers

651
00:39:10,588 --> 00:39:14,068
are no semantic significance to occur at

652
00:39:12,659 --> 00:39:17,308
any point - and there's no required

653
00:39:14,068 --> 00:39:19,588
correlation to the image data yep the

654
00:39:17,309 --> 00:39:21,150
complete image data is represented by a

655
00:39:19,588 --> 00:39:22,139
single Zealand data stream that is

656
00:39:21,150 --> 00:39:24,869
stored yep

657
00:39:22,139 --> 00:39:25,980
of course is named worth so they're

658
00:39:24,869 --> 00:39:27,088
correct something could actually may

659
00:39:25,980 --> 00:39:28,769
emit the issues of which some of these

660
00:39:27,088 --> 00:39:31,900
sources are indeed related but decoders

661
00:39:28,769 --> 00:39:33,500
cannot rely on this that's fine

662
00:39:31,900 --> 00:39:36,769
[Music]

663
00:39:33,500 --> 00:39:40,338
interlacing a progressive display I

664
00:39:36,769 --> 00:39:40,338
don't care about that

665
00:39:48,579 --> 00:39:53,299
blah-blah-blah-blah-blah

666
00:39:51,130 --> 00:39:55,880
we may need to look at that alpha

667
00:39:53,300 --> 00:39:58,039
channel processing stuff to get the

668
00:39:55,880 --> 00:39:59,390
Alpha right eventually as well if just

669
00:39:58,039 --> 00:40:00,710
for gamma stuff or whatever because

670
00:39:59,389 --> 00:40:02,949
there might be information that we need

671
00:40:00,710 --> 00:40:02,949
but

672
00:40:20,739 --> 00:40:28,429
so I guess what I would say is I'm kind

673
00:40:26,929 --> 00:40:30,139
of tempted to just put in a thing that

674
00:40:28,429 --> 00:40:33,199
checks to see if or at the end and if we

675
00:40:30,139 --> 00:40:35,710
are we consider that be final you know

676
00:40:33,199 --> 00:40:35,710
what I'm saying

677
00:41:00,519 --> 00:41:03,789
yeah I don't know

678
00:41:43,090 --> 00:41:53,500
yes people don't generally refer to it

679
00:41:45,099 --> 00:41:54,759
as B final so I don't know I don't know

680
00:41:53,500 --> 00:41:56,800
what to make of it I mean I did my due

681
00:41:54,760 --> 00:41:58,870
diligence reading there here's what I'm

682
00:41:56,800 --> 00:42:01,120
gonna do first because I really don't

683
00:41:58,869 --> 00:42:03,849
know how to proceed from something like

684
00:42:01,119 --> 00:42:10,269
this since I don't have much else to go

685
00:42:03,849 --> 00:42:15,099
on what I'm gonna do is I'm gonna look

686
00:42:10,269 --> 00:42:30,219
here and say that when we come back up

687
00:42:15,099 --> 00:42:34,210
to the top I'm gonna say this and I what

688
00:42:30,219 --> 00:42:37,389
I want to do here is just see am i right

689
00:42:34,210 --> 00:42:40,389
that we actually if we terminate at that

690
00:42:37,389 --> 00:42:42,579
point does the rest of the I mean does

691
00:42:40,389 --> 00:42:44,319
it just work right because I don't know

692
00:42:42,579 --> 00:42:47,139
how else to interpret it it doesn't seem

693
00:42:44,320 --> 00:42:48,820
like we could have a bug where we it'd

694
00:42:47,139 --> 00:42:49,869
be really hard to have I mean maybe

695
00:42:48,820 --> 00:42:51,190
there's a way to have it but it'd be

696
00:42:49,869 --> 00:42:54,369
really hard to have a bug where we can

697
00:42:51,190 --> 00:42:56,139
put into D encode the entire thing

698
00:42:54,369 --> 00:42:58,509
correctly and the only thing we get

699
00:42:56,139 --> 00:43:01,599
wrong is just the B final bit like I'm

700
00:42:58,510 --> 00:43:05,200
not sure how we would do that you know

701
00:43:01,599 --> 00:43:07,029
maybe it's possible but it seems pretty

702
00:43:05,199 --> 00:43:11,829
tough so I just want to see what's going

703
00:43:07,030 --> 00:43:14,440
on how come that didn't what happen

704
00:43:11,829 --> 00:43:18,369
there how come that didn't show me where

705
00:43:14,440 --> 00:43:24,820
the where the breakpoint was okay so

706
00:43:18,369 --> 00:43:29,739
there isn't one so if we just run then

707
00:43:24,820 --> 00:43:34,150
we get the image back and it's right the

708
00:43:29,739 --> 00:43:34,779
B final bit isn't set and I don't know

709
00:43:34,150 --> 00:43:38,559
what to make of it

710
00:43:34,780 --> 00:43:41,860
let's try a different one can we get any

711
00:43:38,559 --> 00:43:44,900
other kind of error to occur

712
00:43:41,860 --> 00:43:52,610
[Music]

713
00:43:44,900 --> 00:43:55,940
I guess to view my next question so

714
00:43:52,610 --> 00:43:59,829
let's suppose we took like I don't know

715
00:43:55,940 --> 00:43:59,829
just some other random one

716
00:44:19,179 --> 00:44:25,869
I mean it just it's so weird right I

717
00:44:22,960 --> 00:44:28,349
mean it looks like they're encoders just

718
00:44:25,869 --> 00:44:28,349
busted

719
00:44:34,769 --> 00:44:50,190
I mean that's what it looks like I don't

720
00:44:45,570 --> 00:44:51,809
know what else to make of it again it's

721
00:44:50,190 --> 00:44:53,550
possible we've got it wrong it's

722
00:44:51,809 --> 00:44:55,590
possible we're doing something wrong I

723
00:44:53,550 --> 00:44:58,080
mean we've there we've done very little

724
00:44:55,590 --> 00:44:59,730
testing on this PNG reader so it's well

725
00:44:58,079 --> 00:45:05,509
within the realm of possibility that we

726
00:44:59,730 --> 00:45:12,869
just did something wrong however it's

727
00:45:05,510 --> 00:45:16,500
kind of a pretty tough it's hard to

728
00:45:12,869 --> 00:45:22,170
think of how that would happen right

729
00:45:16,500 --> 00:45:24,659
like that's a pretty tough thing to get

730
00:45:22,170 --> 00:45:27,659
wrong in a way that only does that

731
00:45:24,659 --> 00:45:31,469
because those bits aren't even encoded

732
00:45:27,659 --> 00:45:32,879
right those bits are raw we're not

733
00:45:31,469 --> 00:45:35,549
putting them through a Huffman table

734
00:45:32,880 --> 00:45:38,099
they're not getting translated by any

735
00:45:35,550 --> 00:45:41,640
kind of algorithm we're not looking them

736
00:45:38,099 --> 00:45:44,130
up in one of those extra bits tables we

737
00:45:41,639 --> 00:45:47,190
are literally just looking at a bit in

738
00:45:44,130 --> 00:45:51,930
the file and saying isn't 0 or 1 and it

739
00:45:47,190 --> 00:45:56,360
seems like it's zero and it should have

740
00:45:51,929 --> 00:46:00,049
been 1 and everything else is correct so

741
00:45:56,360 --> 00:46:00,050
it looks like

742
00:46:04,840 --> 00:46:16,640
you know if i zoom in on the last row of

743
00:46:08,150 --> 00:46:22,340
the image I mean I don't see any garbage

744
00:46:16,639 --> 00:46:24,440
there either so not only you know this

745
00:46:22,340 --> 00:46:27,380
looks exactly right this is what

746
00:46:24,440 --> 00:46:30,710
Photoshop does by the way in the color

747
00:46:27,380 --> 00:46:34,250
channel the Alpha is probably right but

748
00:46:30,710 --> 00:46:36,470
we can't see it if that makes sense it

749
00:46:34,250 --> 00:46:38,210
would be nice if we could and I guess we

750
00:46:36,469 --> 00:46:40,099
will be able to see it soon we maybe

751
00:46:38,210 --> 00:46:42,440
we'd have to do a tiff reader I remember

752
00:46:40,099 --> 00:46:46,819
like almost nobody reads alpha out of

753
00:46:42,440 --> 00:46:48,740
BMPs correctly that's my recollection

754
00:46:46,820 --> 00:46:50,300
anyway so in order to see if the alpha

755
00:46:48,739 --> 00:46:54,649
channels right we would have had to have

756
00:46:50,300 --> 00:46:57,560
done something else there if that makes

757
00:46:54,650 --> 00:47:01,940
sense what we could do there are some

758
00:46:57,559 --> 00:47:03,710
things we could do if we wanted to in

759
00:47:01,940 --> 00:47:07,670
terms of making it a little bit easier

760
00:47:03,710 --> 00:47:11,000
for us to see that we could do something

761
00:47:07,670 --> 00:47:15,130
like blends instead of just swapping the

762
00:47:11,000 --> 00:47:18,829
R&amp;B rhythm and blues we could actually

763
00:47:15,130 --> 00:47:21,349
blend to a pink color or something that

764
00:47:18,829 --> 00:47:23,929
would make it clear so even though the

765
00:47:21,349 --> 00:47:25,579
alpha channel is getting ignored we

766
00:47:23,929 --> 00:47:29,539
would still have some way of seeing what

767
00:47:25,579 --> 00:47:31,880
the actual alpha channel was but I'm not

768
00:47:29,539 --> 00:47:36,380
so concerned about that at the moment so

769
00:47:31,880 --> 00:47:42,140
anyway just looking at the Y this is

770
00:47:36,380 --> 00:47:44,450
still here uh I don't know I think I'm

771
00:47:42,139 --> 00:47:46,309
just gonna push forward in it I would

772
00:47:44,449 --> 00:47:47,779
I'm gonna put it to do there I think

773
00:47:46,309 --> 00:47:50,360
it'd be interesting for someone to

774
00:47:47,780 --> 00:47:52,070
research find out whether we screwed

775
00:47:50,360 --> 00:47:57,190
something up or whether the Photoshop

776
00:47:52,070 --> 00:47:57,190
P&amp;G writer is just wrong and it's busted

777
00:48:36,130 --> 00:48:41,390
so we'll see I don't think it's worth

778
00:48:39,199 --> 00:48:43,159
going down that road at the moment

779
00:48:41,389 --> 00:48:45,078
because like I said this PNG reader

780
00:48:43,159 --> 00:48:46,940
really only exists for one purpose and

781
00:48:45,079 --> 00:48:49,670
that is to get the art into the game as

782
00:48:46,940 --> 00:48:51,639
long as the art is loading properly we

783
00:48:49,670 --> 00:48:53,778
don't care if we hacked around something

784
00:48:51,639 --> 00:48:58,338
so I'm fine with that

785
00:48:53,778 --> 00:49:01,099
I would like to know the answer because

786
00:48:58,338 --> 00:49:04,308
while it would not surprise me

787
00:49:01,099 --> 00:49:08,390
even the weed it would not even raise

788
00:49:04,309 --> 00:49:11,420
the smallest amount of surprise within

789
00:49:08,389 --> 00:49:13,308
me to learn that Photoshop could not

790
00:49:11,420 --> 00:49:19,068
write a PNG file correctly because that

791
00:49:13,309 --> 00:49:22,670
is so typical that would not surprise me

792
00:49:19,068 --> 00:49:24,349
at all I just don't know that that's

793
00:49:22,670 --> 00:49:25,940
true because since we have very little

794
00:49:24,349 --> 00:49:28,579
experience the PNG loading we only just

795
00:49:25,940 --> 00:49:30,289
wrote this thing in a couple hours and

796
00:49:28,579 --> 00:49:32,420
it's our first time ever looking at the

797
00:49:30,289 --> 00:49:34,609
spec that said etcetera I'm not in a

798
00:49:32,420 --> 00:49:37,519
position to say that they did something

799
00:49:34,608 --> 00:49:38,630
wrong or did something right so I would

800
00:49:37,518 --> 00:49:40,669
be interested to know a little bit more

801
00:49:38,630 --> 00:49:43,309
about that maybe ask some people who've

802
00:49:40,670 --> 00:49:47,838
done PNG readers before have they

803
00:49:43,309 --> 00:49:49,970
noticed that discrepancy we could look

804
00:49:47,838 --> 00:49:53,389
and see if there's any docs in the FTP

805
00:49:49,969 --> 00:49:54,649
libraries about that if you know for all

806
00:49:53,389 --> 00:49:55,848
I know you might have mentioned that

807
00:49:54,650 --> 00:49:58,849
like Sean might have been like hey

808
00:49:55,849 --> 00:50:02,109
Photoshop files don't do this right or

809
00:49:58,849 --> 00:50:02,109
we could look to see like

810
00:50:33,000 --> 00:50:37,190
what's this is your PMP

811
00:50:54,190 --> 00:51:07,950
so this is the image transform stuff

812
00:50:58,409 --> 00:51:07,949
yeah you can see here you go

813
00:51:17,110 --> 00:51:21,329
so let's see here

814
00:51:28,599 --> 00:51:36,440
here's parsing a single Huffman block

815
00:51:33,099 --> 00:51:39,280
here's the Huffman code generator here's

816
00:51:36,440 --> 00:51:39,280
the uncompressed block

817
00:51:40,150 --> 00:51:43,469
[Music]

818
00:51:53,179 --> 00:52:08,348
so type three so it looks like at least

819
00:52:05,358 --> 00:52:08,348
here

820
00:52:14,690 --> 00:52:18,990
it doesn't look like there's any kind of

821
00:52:17,010 --> 00:52:24,080
special out there's a bunch of return

822
00:52:18,989 --> 00:52:24,079
zero kind of stuff but

823
00:52:45,659 --> 00:52:49,858
yeah so I don't know I'd be interested

824
00:52:47,219 --> 00:52:52,318
to try running the code and see if it

825
00:52:49,858 --> 00:52:54,150
actually like run it against us to be

826
00:52:52,318 --> 00:52:58,259
image or something and see whether or

827
00:52:54,150 --> 00:53:00,539
not it properly gets the final right I

828
00:52:58,259 --> 00:53:03,179
mean or something just to see if if

829
00:53:00,539 --> 00:53:05,278
we're totally out to lunch on this one

830
00:53:03,179 --> 00:53:08,568
or not because I don't see anything in

831
00:53:05,278 --> 00:53:12,358
here that stops that stops it that way

832
00:53:08,568 --> 00:53:16,558
right it looks like it requires final to

833
00:53:12,358 --> 00:53:23,338
have been properly set just like we do

834
00:53:16,559 --> 00:53:25,259
and you know I don't know I mean what we

835
00:53:23,338 --> 00:53:27,719
could do here too right is we could just

836
00:53:25,259 --> 00:53:31,039
run this right now let's just run st the

837
00:53:27,719 --> 00:53:31,038
image on it see what happens

838
00:53:33,230 --> 00:53:36,869
that seems like worthwhile I don't know

839
00:53:35,670 --> 00:53:39,809
I kind of want to do it because I'm just

840
00:53:36,869 --> 00:53:41,818
curious I don't understand how we're

841
00:53:39,809 --> 00:53:44,190
able to decode everything else properly

842
00:53:41,818 --> 00:53:47,358
so it would be nice to see what goes on

843
00:53:44,190 --> 00:53:52,079
in another compressor so we could see

844
00:53:47,358 --> 00:53:56,239
how we could even have this bug so let's

845
00:53:52,079 --> 00:53:56,240
put STV image in a temp directory here

846
00:53:56,900 --> 00:54:00,420
and then all I'm gonna do is just go

847
00:53:59,039 --> 00:54:04,380
into the temp directory and make like a

848
00:54:00,420 --> 00:54:11,509
simple file that uses it right so this

849
00:54:04,380 --> 00:54:20,818
is FTB PNG test dot CPP pound include

850
00:54:11,509 --> 00:54:22,740
STV image dot H name and this will just

851
00:54:20,818 --> 00:54:25,739
we'll use the exact same thing here it

852
00:54:22,739 --> 00:54:28,229
just will just do it with STP image in

853
00:54:25,739 --> 00:54:29,699
this program so that we can see we could

854
00:54:28,230 --> 00:54:32,519
just so we can step through it right we

855
00:54:29,699 --> 00:54:36,719
just need something to build STB image

856
00:54:32,518 --> 00:54:38,548
so that we can step through it and we

857
00:54:36,719 --> 00:54:40,139
don't need to write we don't even need

858
00:54:38,548 --> 00:54:42,630
to write the output because we don't

859
00:54:40,139 --> 00:54:49,078
care whether SUV gets the output right

860
00:54:42,630 --> 00:54:51,539
or not we only care whether we only care

861
00:54:49,079 --> 00:54:54,990
to see whether or not it gets final back

862
00:54:51,539 --> 00:54:58,528
as a one that's all we want to see so we

863
00:54:54,989 --> 00:54:58,939
should be able to just say from here in

864
00:54:58,528 --> 00:55:02,480
fact

865
00:54:58,940 --> 00:55:09,470
doesn't need an out filename you can

866
00:55:02,480 --> 00:55:13,519
just do that this of course is more

867
00:55:09,469 --> 00:55:17,659
correctly that way um so all we need to

868
00:55:13,519 --> 00:55:23,650
do here is replace that part of the code

869
00:55:17,659 --> 00:55:26,899
with something that loads it from spb

870
00:55:23,650 --> 00:55:32,450
let's grab that there should be an easy

871
00:55:26,900 --> 00:55:33,670
example in here that we can use let's

872
00:55:32,449 --> 00:55:40,608
see

873
00:55:33,670 --> 00:55:43,430
ping support blah blah blah where is

874
00:55:40,608 --> 00:55:53,449
some example code please I don't know

875
00:55:43,429 --> 00:55:55,868
how to use this basic usage alright so

876
00:55:53,449 --> 00:55:55,868
there you go

877
00:56:00,219 --> 00:56:10,338
so that's all we're trying to do here

878
00:56:02,710 --> 00:56:14,269
oops we're just trying to load from in

879
00:56:10,338 --> 00:56:16,699
filename and we just we just want to be

880
00:56:14,269 --> 00:56:19,429
able to step through that right so now

881
00:56:16,699 --> 00:56:21,828
if like if I pop back over to the shell

882
00:56:19,429 --> 00:56:27,169
and I go into the temp directory I

883
00:56:21,829 --> 00:56:28,280
should be able to just build this right

884
00:56:27,170 --> 00:56:32,990
and oops

885
00:56:28,280 --> 00:56:35,690
what's said I should be able just build

886
00:56:32,989 --> 00:56:38,899
this and then if I ask it to load the

887
00:56:35,690 --> 00:56:43,490
same file so that we were asking it to

888
00:56:38,900 --> 00:56:47,329
which was the character hero bitmap we

889
00:56:43,489 --> 00:56:50,750
should be able to now go into the bugger

890
00:56:47,329 --> 00:56:54,079
and watch that loop run to see what they

891
00:56:50,750 --> 00:56:55,760
got does it get the same thing we get or

892
00:56:54,079 --> 00:56:58,789
does it get different because it'd be

893
00:56:55,760 --> 00:57:03,710
interesting to find that out so the art

894
00:56:58,789 --> 00:57:07,818
in question here is the character hero

895
00:57:03,710 --> 00:57:12,130
oops it's not test art character hero

896
00:57:07,818 --> 00:57:13,929
PNG so if I just run it like so

897
00:57:12,130 --> 00:57:17,470
we should now be able to jump in there

898
00:57:13,929 --> 00:57:20,139
and see what it got and that's really

899
00:57:17,469 --> 00:57:27,099
all I want to know so I'm gonna go ahead

900
00:57:20,139 --> 00:57:29,739
and do an Emma step on that oops um no I

901
00:57:27,099 --> 00:57:31,779
love how you can't tap complete in the

902
00:57:29,739 --> 00:57:36,089
middle of one of these like it deletes

903
00:57:31,780 --> 00:57:36,090
the rest of the line so good

904
00:57:46,929 --> 00:57:54,960
whoa Oh a that that was funny

905
00:57:50,380 --> 00:57:57,730
it actually loaded that PNG I think

906
00:57:54,960 --> 00:57:58,210
that's not what I meant but okay it's

907
00:57:57,730 --> 00:58:02,619
fine

908
00:57:58,210 --> 00:58:06,190
good job that's good it did it alright

909
00:58:02,619 --> 00:58:08,410
so there's the argument and so what I

910
00:58:06,190 --> 00:58:10,798
need to do in order to bug this I'm

911
00:58:08,409 --> 00:58:14,889
gonna have to actually pass a debug

912
00:58:10,798 --> 00:58:19,150
string to it there so what is that

913
00:58:14,889 --> 00:58:25,449
that's like slash z7 or something is

914
00:58:19,150 --> 00:58:28,269
that what we want yeah so we should be

915
00:58:25,449 --> 00:58:29,439
able to step through this now you know

916
00:58:28,269 --> 00:58:31,449
what I could also do I don't I don't

917
00:58:29,440 --> 00:58:33,010
think it will by default but we can also

918
00:58:31,449 --> 00:58:34,419
just make sure that optimizations are

919
00:58:33,010 --> 00:58:36,670
disabled because we don't want to have

920
00:58:34,420 --> 00:58:38,079
to deal with that either so if I step

921
00:58:36,670 --> 00:58:40,358
through here I should be able to step

922
00:58:38,079 --> 00:58:42,609
through the STP image loading code just

923
00:58:40,358 --> 00:58:44,798
see if Sean gets the same thing we get

924
00:58:42,608 --> 00:58:48,969
and if not maybe we can get a hint as to

925
00:58:44,798 --> 00:58:50,528
what it is we did because it's weird

926
00:58:48,969 --> 00:58:51,909
that I just don't know how we could have

927
00:58:50,528 --> 00:58:56,380
gotten everything else right and that

928
00:58:51,909 --> 00:58:59,739
wrong it's kind of bizarre so we should

929
00:58:56,380 --> 00:59:01,539
be able to do this ping test here it

930
00:58:59,739 --> 00:59:04,239
should return true and we should be able

931
00:59:01,539 --> 00:59:07,599
to do a ping load so here's the ping

932
00:59:04,239 --> 00:59:09,338
load we can set a breakpoint now

933
00:59:07,599 --> 00:59:12,480
somewhere that's actually more relevant

934
00:59:09,338 --> 00:59:15,210
to the ping should be up here somewhere

935
00:59:12,480 --> 00:59:17,920
[Music]

936
00:59:15,210 --> 00:59:19,480
create pinging image is not really what

937
00:59:17,920 --> 00:59:22,539
we're looking for we just want that one

938
00:59:19,480 --> 00:59:24,490
loop that I was just on I could search

939
00:59:22,539 --> 00:59:26,109
for it but instead I'm just kind of

940
00:59:24,489 --> 00:59:31,419
scrolling up like I had mindless

941
00:59:26,108 --> 00:59:36,130
automaton so we've got a bunch of Zee

942
00:59:31,420 --> 00:59:37,720
Lib stuff here this was where it was

943
00:59:36,130 --> 00:59:40,240
right it was right up in here somewhere

944
00:59:37,719 --> 00:59:42,068
so here's the Huffman codes so it should

945
00:59:40,239 --> 00:59:48,250
have been right down below here tonight

946
00:59:42,068 --> 00:59:50,710
a scroll just right by it see out to

947
00:59:48,250 --> 00:59:54,329
code buffered code nut chunk header

948
00:59:50,710 --> 00:59:54,329
check PNG

949
00:59:55,469 --> 00:59:59,489
there's that part so it should have been

950
00:59:57,599 --> 01:00:02,359
like right here I must have scrolled by

951
00:59:59,489 --> 01:00:02,358
by yes I did

952
01:00:12,940 --> 01:00:18,130
or maybe not

953
01:00:15,389 --> 01:00:20,730
where is it I just I had it up just a

954
01:00:18,130 --> 01:00:20,730
minute ago right

955
01:00:25,440 --> 01:00:36,780
it's svi parse z lib it's online 4140

956
01:00:31,050 --> 01:00:39,160
how did I miss it just blind I guess

957
01:00:36,780 --> 01:00:44,560
alright so this is what we actually want

958
01:00:39,159 --> 01:00:48,269
to see so let's let's jump in here parse

959
01:00:44,559 --> 01:00:51,730
is the Z Lib header and we start running

960
01:00:48,269 --> 01:00:55,539
so I don't really know like I said I

961
01:00:51,730 --> 01:00:58,170
don't use this library I don't really

962
01:00:55,539 --> 01:01:03,639
know much about it

963
01:00:58,170 --> 01:01:05,170
but presumably if we take a look at the

964
01:01:03,639 --> 01:01:10,449
data structures here we should be able

965
01:01:05,170 --> 01:01:15,010
to see you know like Z out I assume is

966
01:01:10,449 --> 01:01:16,689
like where the pixels go or something so

967
01:01:15,010 --> 01:01:19,780
I'm assuming that like this start and

968
01:01:16,690 --> 01:01:23,108
end tell me something about that so let

969
01:01:19,780 --> 01:01:27,900
me see if I do Z out and minus Z out

970
01:01:23,108 --> 01:01:27,900
start oops

971
01:01:28,230 --> 01:01:35,349
you know is that yeah that's the size of

972
01:01:32,530 --> 01:01:38,050
the image so we know where we are in the

973
01:01:35,349 --> 01:01:42,190
image by looking presumably at the Z out

974
01:01:38,050 --> 01:01:44,650
value minus the Z out start value and so

975
01:01:42,190 --> 01:01:47,470
if I want to I can kind of loop through

976
01:01:44,650 --> 01:01:50,590
this decompressing the image as we go

977
01:01:47,469 --> 01:01:52,539
just like we did in our routine and we

978
01:01:50,590 --> 01:01:55,480
can just kind of go up till we get

979
01:01:52,539 --> 01:01:58,029
within striking distance and then step

980
01:01:55,480 --> 01:02:00,219
through to see what happens on the Z

981
01:01:58,030 --> 01:02:03,420
final for that final chunk and that

982
01:02:00,219 --> 01:02:06,309
should tell us you know what's going on

983
01:02:03,420 --> 01:02:08,320
right so here we go decompressing the

984
01:02:06,309 --> 01:02:09,969
image exactly like we did compressed it

985
01:02:08,320 --> 01:02:13,240
in our code

986
01:02:09,969 --> 01:02:15,159
nothing is probably happening a typical

987
01:02:13,239 --> 01:02:19,229
right now I would assume micros I don't

988
01:02:15,159 --> 01:02:19,230
know off we go

989
01:02:21,769 --> 01:02:42,300
not particularly exciting getting closer

990
01:02:29,849 --> 01:02:46,199
now okay so now let's take a look and

991
01:02:42,300 --> 01:02:48,750
see if final is ever set because that's

992
01:02:46,199 --> 01:02:52,909
what we're interested in and so at some

993
01:02:48,750 --> 01:02:52,909
point here we should see that flip 201

994
01:02:54,920 --> 01:03:00,900
so this is the last block final is not

995
01:02:58,380 --> 01:03:02,550
set to a 1 at least I think it's the

996
01:03:00,900 --> 01:03:10,110
last block so let's step through this

997
01:03:02,550 --> 01:03:13,370
here now we're at the end finally it's

998
01:03:10,110 --> 01:03:13,370
not set

999
01:03:13,409 --> 01:03:21,659
what is typeset to 0 just like ours we

1000
01:03:18,719 --> 01:03:24,599
go into SV stb I parse uncompressed

1001
01:03:21,659 --> 01:03:26,549
block which is exactly what our decoder

1002
01:03:24,599 --> 01:03:35,190
did so so Sean's code is doing exactly

1003
01:03:26,550 --> 01:03:38,580
what our code did he's attempting to to

1004
01:03:35,190 --> 01:03:47,659
decompress the header of the block think

1005
01:03:38,579 --> 01:03:49,889
I'm not sure getting some bits there and

1006
01:03:47,659 --> 01:03:51,690
let's take it let's take it and

1007
01:03:49,889 --> 01:03:55,839
disassembly so we can see what what do

1008
01:03:51,690 --> 01:03:58,639
you what he gets out of this if and then

1009
01:03:55,840 --> 01:04:02,180
[Music]

1010
01:03:58,639 --> 01:04:02,179
took the jump

1011
01:04:10,750 --> 01:04:27,820
so he matched these two Oh interesting

1012
01:04:17,710 --> 01:04:30,630
so he got a length of zero but we we

1013
01:04:27,820 --> 01:04:30,630
didn't did we

1014
01:04:47,639 --> 01:04:53,159
so that would make more sense if did we

1015
01:04:51,000 --> 01:04:54,860
read are we reading the length wrong is

1016
01:04:53,159 --> 01:04:57,119
that's what's happening there because

1017
01:04:54,860 --> 01:05:01,640
theoretically you could put a block in

1018
01:04:57,119 --> 01:05:01,639
here that has a length of zero right

1019
01:05:02,300 --> 01:05:07,400
like this is just a nod this doesn't do

1020
01:05:04,980 --> 01:05:07,400
anything

1021
01:05:16,440 --> 01:05:24,530
this is a weird decoder so assuming

1022
01:05:19,889 --> 01:05:27,599
again that it's right it's just got a

1023
01:05:24,530 --> 01:05:32,010
bunch of zero length stuff at the end of

1024
01:05:27,599 --> 01:05:33,029
it so do we do we have that part of our

1025
01:05:32,010 --> 01:05:38,420
code wrong

1026
01:05:33,030 --> 01:05:42,390
you know that's are we reading this

1027
01:05:38,420 --> 01:05:47,539
value incorrectly like maybe is our

1028
01:05:42,389 --> 01:05:47,539
flush flight function incorrect you know

1029
01:05:48,260 --> 01:05:55,080
do we do something where where where we

1030
01:05:51,719 --> 01:05:57,649
don't deal with the end of the stream

1031
01:05:55,079 --> 01:05:57,650
properly

1032
01:06:03,909 --> 01:06:11,460
you know I'm not sure but we do we can

1033
01:06:07,838 --> 01:06:15,880
see a very obvious difference between

1034
01:06:11,460 --> 01:06:20,920
what we read there and so I'm just

1035
01:06:15,880 --> 01:06:25,838
curious to know what's going on with

1036
01:06:20,920 --> 01:06:27,670
that let's take a look because we should

1037
01:06:25,838 --> 01:06:29,558
be able to do it if the SDB image

1038
01:06:27,670 --> 01:06:31,298
library does it then you know they're

1039
01:06:29,559 --> 01:06:33,160
doing basically the same thing we're

1040
01:06:31,298 --> 01:06:45,389
doing so the question is what did we do

1041
01:06:33,159 --> 01:06:45,389
wrong here got to take this out

1042
01:06:48,838 --> 01:06:59,608
what I might also do here is I'm gonna

1043
01:06:53,130 --> 01:07:01,499
assert this because we never want that

1044
01:06:59,608 --> 01:07:03,358
to advance past the end so I'm going to

1045
01:07:01,498 --> 01:07:05,218
assert that if it's even if that if it's

1046
01:07:03,358 --> 01:07:06,960
at the end it's ok because like we now

1047
01:07:05,219 --> 01:07:11,869
know there's chunks that happen after

1048
01:07:06,960 --> 01:07:11,869
the last chunk that just our length zero

1049
01:07:12,170 --> 01:07:26,980
so let's see so ok we got to go back to

1050
01:07:15,809 --> 01:07:30,050
this one let's give it a whirl

1051
01:07:26,980 --> 01:07:30,050
[Music]

1052
01:07:31,880 --> 01:07:41,869
why can I not why does it not know the

1053
01:07:36,150 --> 01:07:41,869
file doesn't make a lot of sense

1054
01:07:43,219 --> 01:07:46,548
why can't it

1055
01:07:51,630 --> 01:07:54,858
my wrist is something

1056
01:08:00,570 --> 01:08:04,910
how is it different from the one that

1057
01:08:02,429 --> 01:08:04,909
was built

1058
01:08:24,649 --> 01:08:47,448
all right what is it this time Microsoft

1059
01:08:34,310 --> 01:08:52,139
what did you do so let's delete that

1060
01:08:47,448 --> 01:08:54,358
build so now we know there's only one of

1061
01:08:52,139 --> 01:08:59,569
those and we just built it with our

1062
01:08:54,359 --> 01:09:02,670
current source code unbelievable

1063
01:08:59,569 --> 01:09:09,779
all right so anyway now we can actually

1064
01:09:02,670 --> 01:09:12,328
get in here and so here we are on flush

1065
01:09:09,779 --> 01:09:13,619
byte and let's just see if there's

1066
01:09:12,328 --> 01:09:23,608
something that we're doing wrong in here

1067
01:09:13,618 --> 01:09:27,000
that we can fix so here's our buffer at

1068
01:09:23,609 --> 01:09:29,838
the time there's 12 bits supposedly

1069
01:09:27,000 --> 01:09:29,838
still in the buffer

1070
01:09:37,908 --> 01:09:53,479
Oh hmm so maybe that's what it is

1071
01:09:46,069 --> 01:09:56,000
our flush byte call here's what it

1072
01:09:53,479 --> 01:09:59,859
probably is our flush byte call is

1073
01:09:56,000 --> 01:10:02,810
flushing potentially more than a bite

1074
01:09:59,859 --> 01:10:05,000
that's what it is so I think that's what

1075
01:10:02,810 --> 01:10:10,460
the bug is right like our flush byte

1076
01:10:05,000 --> 01:10:13,939
call in this case should only flush 8

1077
01:10:10,460 --> 01:10:16,609
bits total and these should be things

1078
01:10:13,939 --> 01:10:19,638
that still do a consume bits and they

1079
01:10:16,609 --> 01:10:22,069
should consume 16 bits right to make

1080
01:10:19,639 --> 01:10:26,119
sure that we still work on the even

1081
01:10:22,069 --> 01:10:28,549
boundaries that seems like the right

1082
01:10:26,119 --> 01:10:30,738
thing because flush byte right now can

1083
01:10:28,550 --> 01:10:35,260
flush more than that what it should do

1084
01:10:30,738 --> 01:10:39,529
is say flush up to the next eight bit

1085
01:10:35,260 --> 01:10:43,960
boundary so if it's like 12 bits are in

1086
01:10:39,529 --> 01:10:49,130
the buffer you want to flush 4 bits

1087
01:10:43,960 --> 01:10:54,679
right you want to flush Mahdi the the

1088
01:10:49,130 --> 01:10:58,130
bits right so I think what we want to do

1089
01:10:54,679 --> 01:11:01,158
here is flush byte should really do a

1090
01:10:58,130 --> 01:11:06,800
thing where it says like flush count

1091
01:11:01,158 --> 01:11:08,929
equals buff bit count Maudie so like

1092
01:11:06,800 --> 01:11:12,020
what's the remainder and then I want to

1093
01:11:08,929 --> 01:11:13,819
do a consume bits on buff of whatever

1094
01:11:12,020 --> 01:11:18,580
that flush count is I think that's

1095
01:11:13,819 --> 01:11:18,579
actually the more correct thing

1096
01:11:31,770 --> 01:11:47,380
yeah okay so I think that's that may

1097
01:11:45,579 --> 01:11:49,930
have been the problem is just where the

1098
01:11:47,380 --> 01:11:51,909
bite boundary was so let's see when we

1099
01:11:49,930 --> 01:11:55,090
so now when we read it we get the right

1100
01:11:51,909 --> 01:11:57,609
answer we consume a zero size which is

1101
01:11:55,090 --> 01:12:00,789
no problem we come through here and

1102
01:11:57,609 --> 01:12:05,019
presume I guess we have a whole Huffman

1103
01:12:00,789 --> 01:12:10,119
table that doesn't do anything it's just

1104
01:12:05,020 --> 01:12:12,100
a 255 okay you know who knows why

1105
01:12:10,119 --> 01:12:13,949
Photoshop did that all right so we have

1106
01:12:12,100 --> 01:12:16,030
fixed that bug that's awesome

1107
01:12:13,949 --> 01:12:21,340
thank you to Shawn for the reference

1108
01:12:16,029 --> 01:12:23,259
code so yeah that was a good bug fix

1109
01:12:21,340 --> 01:12:29,980
while we're in here should we do

1110
01:12:23,260 --> 01:12:31,840
something about this I'm not sure what

1111
01:12:29,979 --> 01:12:34,239
we want to do about that basically what

1112
01:12:31,840 --> 01:12:42,850
the consumer that wants to do is say hey

1113
01:12:34,239 --> 01:12:51,399
look I might only be able to consume as

1114
01:12:42,850 --> 01:12:59,800
much left as there is right so you know

1115
01:12:51,399 --> 01:13:03,119
we could bound it on content size so

1116
01:12:59,800 --> 01:13:03,119
like it would look something like this

1117
01:13:06,220 --> 01:13:18,840
i if we look at consumers

1118
01:13:33,159 --> 01:13:45,880
yeah so you could see here like if we

1119
01:13:35,170 --> 01:13:57,970
consumed exactly that we could just make

1120
01:13:45,880 --> 01:14:02,609
a function here right and this function

1121
01:13:57,970 --> 01:14:02,610
just does the operation that is the fill

1122
01:14:10,470 --> 01:14:15,190
you know what I guess now I think about

1123
01:14:12,520 --> 01:14:19,630
it I suppose we don't even really have

1124
01:14:15,189 --> 01:14:32,349
to do that now we do

1125
01:14:19,630 --> 01:14:34,270
oops I think we do want that so what we

1126
01:14:32,350 --> 01:14:37,150
could do is say all right look

1127
01:14:34,270 --> 01:14:52,540
make sure the buffer is filled at the

1128
01:14:37,149 --> 01:14:55,359
top so refill if necessary so make sure

1129
01:14:52,539 --> 01:14:59,319
the buffer is filled at the top and then

1130
01:14:55,359 --> 01:15:04,839
say look we're gonna have a like a

1131
01:14:59,319 --> 01:15:08,649
concept called Uslan and we're gonna try

1132
01:15:04,840 --> 01:15:11,920
to read len but if we can't then we'll

1133
01:15:08,649 --> 01:15:17,559
just read as much as we can

1134
01:15:11,920 --> 01:15:19,060
then if the end we'll say this right so

1135
01:15:17,560 --> 01:15:22,030
what we'll do is say all right if the

1136
01:15:19,060 --> 01:15:25,300
use length is greater than the comp date

1137
01:15:22,029 --> 01:15:28,779
the whatever the component that the

1138
01:15:25,300 --> 01:15:30,130
whatever the compressed data is although

1139
01:15:28,779 --> 01:15:32,800
in this case is not compressed because

1140
01:15:30,130 --> 01:15:37,449
this is the B type 0 block but if the

1141
01:15:32,800 --> 01:15:39,789
content size is not enough to fill to

1142
01:15:37,449 --> 01:15:42,489
fulfill the entire read we'll just read

1143
01:15:39,789 --> 01:15:45,819
it as much as we can so we'll read up to

1144
01:15:42,489 --> 01:15:46,960
the end copy that out and then we'll

1145
01:15:45,819 --> 01:15:49,590
refill it again at the

1146
01:15:46,960 --> 01:16:07,960
of a loop right I think that should be

1147
01:15:49,590 --> 01:16:14,199
sufficient there okay so I think that

1148
01:16:07,960 --> 01:16:16,480
should do it and now we don't have that

1149
01:16:14,199 --> 01:16:18,609
to do there we can get rid of that

1150
01:16:16,479 --> 01:16:20,049
because now we are actually looping and

1151
01:16:18,609 --> 01:16:23,229
we'll try to grab as much as we can so

1152
01:16:20,050 --> 01:16:28,680
that can straddle the iTap block

1153
01:16:23,229 --> 01:16:28,679
boundaries just fine

1154
01:16:34,158 --> 01:16:39,649
yeah so I think that's pretty good while

1155
01:16:38,029 --> 01:16:42,019
we're in here since we're gonna start

1156
01:16:39,649 --> 01:16:44,809
doing a stuff now the reverse table

1157
01:16:42,020 --> 01:16:50,800
thing we don't use anymore

1158
01:16:44,810 --> 01:16:56,389
so I believe this table can go right

1159
01:16:50,800 --> 01:16:57,889
that's not in there anymore so I think

1160
01:16:56,389 --> 01:17:00,520
what we should be able to do now is

1161
01:16:57,889 --> 01:17:03,770
start moving this into our mainline code

1162
01:17:00,520 --> 01:17:06,500
and so tomorrow we can start actually

1163
01:17:03,770 --> 01:17:07,940
getting these images in because it looks

1164
01:17:06,500 --> 01:17:09,948
like everything's fine it looks like

1165
01:17:07,939 --> 01:17:11,359
we're reading them properly we did have

1166
01:17:09,948 --> 01:17:16,189
a weird bug there where we don't handle

1167
01:17:11,359 --> 01:17:17,119
0 blocks but now we do so I think we're

1168
01:17:16,189 --> 01:17:19,638
good

1169
01:17:17,119 --> 01:17:21,800
and we should be able to proceed so

1170
01:17:19,639 --> 01:17:24,560
looking at this stuff what I want to do

1171
01:17:21,800 --> 01:17:32,289
is I want to now split this out this

1172
01:17:24,560 --> 01:17:32,289
code out into sections where I can I

1173
01:17:33,399 --> 01:17:41,658
want to basically have in so far as I

1174
01:17:37,069 --> 01:17:44,658
can the PNG reader code is just in a

1175
01:17:41,658 --> 01:17:47,839
thing that can be included in the game

1176
01:17:44,658 --> 01:17:50,179
or steal any little test app like this

1177
01:17:47,840 --> 01:17:52,969
because although I think we're pretty

1178
01:17:50,179 --> 01:17:54,529
good now you know we're we've got a fair

1179
01:17:52,969 --> 01:17:56,510
number of test cases we've debug forth

1180
01:17:54,529 --> 01:18:00,198
there's still probably some other bugs

1181
01:17:56,510 --> 01:18:01,520
lurking in there maybe write that one a

1182
01:18:00,198 --> 01:18:04,428
day maybe we'll counter another one

1183
01:18:01,520 --> 01:18:06,320
tomorrow we don't know so I want to make

1184
01:18:04,429 --> 01:18:09,230
sure that we can steal pretty easily

1185
01:18:06,319 --> 01:18:12,139
compile the PNG reader outside the game

1186
01:18:09,229 --> 01:18:14,988
as well as inside the game so I want to

1187
01:18:12,139 --> 01:18:19,159
make that I want to pull out the test

1188
01:18:14,988 --> 01:18:21,888
app part and I want that part to be

1189
01:18:19,158 --> 01:18:24,259
still compiling the same code as the

1190
01:18:21,889 --> 01:18:27,829
game so the first thing I'm gonna do

1191
01:18:24,260 --> 01:18:31,159
here is I'm gonna change I'm gonna split

1192
01:18:27,829 --> 01:18:33,559
that code up right into two parts so I

1193
01:18:31,158 --> 01:18:37,759
want like you know how in here we have

1194
01:18:33,560 --> 01:18:40,969
like the like simple coprocessor

1195
01:18:37,760 --> 01:18:45,829
preprocessor tests I felt right I'm

1196
01:18:40,969 --> 01:18:47,510
gonna do a test PNG dot CPP file the

1197
01:18:45,829 --> 01:18:50,210
woman do is I'm gonna start

1198
01:18:47,510 --> 01:18:55,460
grab stuff out of here and plunk it down

1199
01:18:50,210 --> 01:18:58,368
in here as necessary right and I'm gonna

1200
01:18:55,460 --> 01:18:59,710
leave just the very straightforward part

1201
01:18:58,368 --> 01:19:02,719
of the code that does the actual

1202
01:18:59,710 --> 01:19:05,989
decompression of the PNG that's the only

1203
01:19:02,719 --> 01:19:08,960
part that I'm gonna leave in there right

1204
01:19:05,988 --> 01:19:16,038
so just just a decoder is that all that

1205
01:19:08,960 --> 01:19:18,230
goes in there right so all of this stuff

1206
01:19:16,038 --> 01:19:23,809
is stuff that's gonna have to get done

1207
01:19:18,229 --> 01:19:26,089
in the that's gonna have to get done in

1208
01:19:23,809 --> 01:19:30,380
the actual game so we're gonna start to

1209
01:19:26,090 --> 01:19:31,069
modify this code but let's see here what

1210
01:19:30,380 --> 01:19:42,920
else we got

1211
01:19:31,069 --> 01:19:44,719
yeah all that stuff okay so all of this

1212
01:19:42,920 --> 01:19:47,929
stuff is stuff that we'll want to still

1213
01:19:44,719 --> 01:19:52,010
have happen and we're gonna have to sort

1214
01:19:47,929 --> 01:19:54,019
of make accommodations for all the

1215
01:19:52,010 --> 01:19:56,420
things in there that maybe wouldn't

1216
01:19:54,019 --> 01:19:59,199
won't work or that need you know like we

1217
01:19:56,420 --> 01:20:02,000
can't F printf anything to standard out

1218
01:19:59,198 --> 01:20:02,988
so we can't report errors in here and

1219
01:20:02,000 --> 01:20:03,979
it's like that so we're gonna have to

1220
01:20:02,988 --> 01:20:05,569
figure out how to do something then

1221
01:20:03,979 --> 01:20:09,768
that's fine we don't have that's not

1222
01:20:05,569 --> 01:20:14,408
going to be a problem so that'll all

1223
01:20:09,769 --> 01:20:14,409
work fine we just need now to go towards

1224
01:20:16,059 --> 01:20:22,869
look merging those two paths right okay

1225
01:20:19,399 --> 01:20:25,308
so we've got handmade PNG eh as well

1226
01:20:22,868 --> 01:20:26,420
again that's got some things that we

1227
01:20:25,309 --> 01:20:29,630
probably don't want to put in there

1228
01:20:26,420 --> 01:20:32,149
either so we'll see how that has to go I

1229
01:20:29,630 --> 01:20:34,340
think all of this stuff does want to be

1230
01:20:32,149 --> 01:20:36,589
in there the only question is image you

1231
01:20:34,340 --> 01:20:39,199
32 I don't know if we have something

1232
01:20:36,590 --> 01:20:43,429
similar to that currently in the asset

1233
01:20:39,198 --> 01:20:46,549
system something like a loaded bitmap

1234
01:20:43,429 --> 01:20:49,038
that's got that same week if we could

1235
01:20:46,550 --> 01:20:52,510
just reuse the struct if we've got

1236
01:20:49,038 --> 01:20:52,509
something similar to that I'm not sure

1237
01:20:53,380 --> 01:20:57,949
so I'm going to take a look here and see

1238
01:20:55,309 --> 01:21:00,159
if you've got something similar there so

1239
01:20:57,948 --> 01:21:02,289
we've got a loaded bitmap in there

1240
01:21:00,159 --> 01:21:10,090
but that's not what I was looking for we

1241
01:21:02,289 --> 01:21:12,960
want like that one so that's not really

1242
01:21:10,090 --> 01:21:12,960
what we want either

1243
01:21:24,719 --> 01:21:36,770
yeah so I guess we just didn't have one

1244
01:21:29,100 --> 01:21:40,680
of these I guess it just didn't happen

1245
01:21:36,770 --> 01:21:42,000
so I don't know I don't know what to

1246
01:21:40,680 --> 01:21:43,680
make of that

1247
01:21:42,000 --> 01:21:45,840
so we will need something like that and

1248
01:21:43,680 --> 01:21:51,390
we can promote that maybe up to a more

1249
01:21:45,840 --> 01:21:53,869
aggressive type at some point and we'll

1250
01:21:51,390 --> 01:21:57,119
see how that goes all right so anyway

1251
01:21:53,869 --> 01:21:59,329
going back to where we were so all of

1252
01:21:57,119 --> 01:22:01,619
this stuff is in the header file it can

1253
01:21:59,329 --> 01:22:05,340
exist in both places it doesn't use

1254
01:22:01,619 --> 01:22:08,340
anything that's specific - yeah - that

1255
01:22:05,340 --> 01:22:10,739
either way so the first thing we're

1256
01:22:08,340 --> 01:22:13,199
gonna have to address here is error

1257
01:22:10,738 --> 01:22:23,819
reporting error porting in this case is

1258
01:22:13,198 --> 01:22:27,809
not going to be able to go to montgomery

1259
01:22:23,819 --> 01:22:29,159
else and so what I'd like to do is start

1260
01:22:27,810 --> 01:22:33,870
to figure out how that's gonna look

1261
01:22:29,159 --> 01:22:37,920
right so what I want to do here is talk

1262
01:22:33,869 --> 01:22:46,800
about this image u32 thing that we had

1263
01:22:37,920 --> 01:22:48,630
here perhaps and I want to think a

1264
01:22:46,800 --> 01:22:51,300
little bit about how I want to do errors

1265
01:22:48,630 --> 01:22:55,739
so what I would like to do ideally I

1266
01:22:51,300 --> 01:23:02,239
think is I'd like to have it so that the

1267
01:22:55,738 --> 01:23:02,238
errors just get buffered up and we can

1268
01:23:03,140 --> 01:23:11,610
you know maybe have some way that those

1269
01:23:06,238 --> 01:23:16,529
errors hoovy get recorded for later

1270
01:23:11,609 --> 01:23:19,009
display right so there's some kind of an

1271
01:23:16,529 --> 01:23:22,439
understanding of what those dreams are

1272
01:23:19,010 --> 01:23:24,180
so I'd like the debug I'd like to

1273
01:23:22,439 --> 01:23:27,149
basically have those and they're not

1274
01:23:24,180 --> 01:23:29,909
really debug per se they're things that

1275
01:23:27,149 --> 01:23:34,229
actually should run in the actual game

1276
01:23:29,909 --> 01:23:35,939
in a sense because if you were modding

1277
01:23:34,229 --> 01:23:38,579
the game after the fact or something

1278
01:23:35,939 --> 01:23:40,049
like that even these are pieces of it

1279
01:23:38,579 --> 01:23:41,519
Meishan that you would want to have like

1280
01:23:40,050 --> 01:23:45,960
oh you tried to load a pig and the thing

1281
01:23:41,520 --> 01:23:48,210
was corrupted or you know the the reader

1282
01:23:45,960 --> 01:23:50,010
couldn't read it for some reason that

1283
01:23:48,210 --> 01:23:53,609
Dios palletized and we don't support

1284
01:23:50,010 --> 01:23:57,810
that so it's kind of like real error

1285
01:23:53,609 --> 01:23:59,369
reporting does that make sense so we

1286
01:23:57,810 --> 01:24:02,370
kind of want to be able to support that

1287
01:23:59,369 --> 01:24:05,220
sort of thing so what I want to do is

1288
01:24:02,369 --> 01:24:07,050
maybe have a thing here where where I

1289
01:24:05,220 --> 01:24:10,579
just have something called a text stream

1290
01:24:07,050 --> 01:24:10,579
I don't know I'm just thinking out loud

1291
01:24:16,010 --> 01:24:21,030
and I just want to make a thing that

1292
01:24:18,659 --> 01:24:25,909
Daisy changed these together so I have a

1293
01:24:21,029 --> 01:24:25,909
text stream I have a text stream entry

1294
01:24:27,380 --> 01:24:33,869
so there's kind of like a doubly linked

1295
01:24:29,550 --> 01:24:41,699
list in here and you know maybe in here

1296
01:24:33,869 --> 01:24:44,670
I've got so you know so I can just kind

1297
01:24:41,699 --> 01:24:46,380
of daisy chain these together uh to some

1298
01:24:44,670 --> 01:24:50,489
degree I guess I don't care that it's a

1299
01:24:46,380 --> 01:24:52,289
text stream maybe I just call this a

1300
01:24:50,489 --> 01:24:53,880
stream because I don't care what I

1301
01:24:52,289 --> 01:24:58,189
stream out into it you know it could be

1302
01:24:53,880 --> 01:25:01,470
text could be anything else I don't care

1303
01:24:58,189 --> 01:25:09,989
so I could just say look it's just a

1304
01:25:01,470 --> 01:25:11,100
stream of stuff right so it's just

1305
01:25:09,989 --> 01:25:13,559
something that I couldn't buffer up

1306
01:25:11,100 --> 01:25:15,840
information into and I can dump things

1307
01:25:13,560 --> 01:25:20,360
into the stream all day long if that's

1308
01:25:15,840 --> 01:25:24,659
what makes me happy I could do it and so

1309
01:25:20,359 --> 01:25:27,839
off I go right so then when I introduced

1310
01:25:24,659 --> 01:25:31,889
something like the streaming the input

1311
01:25:27,840 --> 01:25:37,140
buffer right it can have associated with

1312
01:25:31,890 --> 01:25:39,990
it some kind of a you know a an error

1313
01:25:37,140 --> 01:25:42,980
output where the error should go when an

1314
01:25:39,989 --> 01:25:45,019
error happens on that particular stream

1315
01:25:42,979 --> 01:25:48,449
and that seems pretty straightforward

1316
01:25:45,020 --> 01:25:51,540
now what you'll notice is these are kind

1317
01:25:48,449 --> 01:25:53,489
of symmetric right so what we could do

1318
01:25:51,539 --> 01:25:57,510
just make one of these that functions

1319
01:25:53,489 --> 01:25:59,670
for both input and output and it would

1320
01:25:57,510 --> 01:26:01,230
work right so what you can kind of see

1321
01:25:59,670 --> 01:26:04,710
when I started to sketch this out is

1322
01:26:01,229 --> 01:26:07,379
this and this actually look the same so

1323
01:26:04,710 --> 01:26:10,170
what I could do is just say look there's

1324
01:26:07,380 --> 01:26:12,420
this is now what this is these are

1325
01:26:10,170 --> 01:26:15,239
basically the same I can make the

1326
01:26:12,420 --> 01:26:16,859
content size be six sixty four-bit if I

1327
01:26:15,239 --> 01:26:18,210
want to I'm not sure if I want to yet or

1328
01:26:16,859 --> 01:26:21,509
not that's the only thing that I would

1329
01:26:18,210 --> 01:26:24,180
have to think about there but otherwise

1330
01:26:21,510 --> 01:26:26,820
these things are the same and so I can

1331
01:26:24,180 --> 01:26:28,980
just kind of implement these using the

1332
01:26:26,819 --> 01:26:31,619
same structure so that tells me that I

1333
01:26:28,979 --> 01:26:35,759
just have a thing that I want here right

1334
01:26:31,619 --> 01:26:38,789
I want a handmade stream file I want to

1335
01:26:35,760 --> 01:26:40,350
have this thing in it I'm probably going

1336
01:26:38,789 --> 01:26:42,329
to want to rename it to just stream I

1337
01:26:40,350 --> 01:26:43,920
don't think as you all stream in it like

1338
01:26:42,329 --> 01:26:51,239
we don't need to make a gerund out of it

1339
01:26:43,920 --> 01:26:54,210
for no reason so here we go right we've

1340
01:26:51,239 --> 01:26:58,849
got the two and I can just put all of

1341
01:26:54,210 --> 01:27:03,859
those stream informations in there right

1342
01:26:58,850 --> 01:27:07,740
so all of this stuff consume endian

1343
01:27:03,859 --> 01:27:11,219
swapping is kind of just generic that

1344
01:27:07,739 --> 01:27:13,079
can be put inside some other file but

1345
01:27:11,220 --> 01:27:15,510
yeah all of this other stuff here like

1346
01:27:13,079 --> 01:27:18,119
peek bits discard bits to bits flush

1347
01:27:15,510 --> 01:27:22,710
pipe reverse bits all that stuff can

1348
01:27:18,119 --> 01:27:26,359
just go in here and I think that's all

1349
01:27:22,710 --> 01:27:26,359
we need right

1350
01:27:29,519 --> 01:27:41,280
yeah um so what I should be able do now

1351
01:27:32,368 --> 01:27:52,768
is I should be able to rename these it's

1352
01:27:41,279 --> 01:27:54,359
a strong it's a strong um so what I

1353
01:27:52,769 --> 01:27:56,789
should be able to do here like I said is

1354
01:27:54,359 --> 01:28:02,339
these this streaming buffer should allow

1355
01:27:56,788 --> 01:28:05,429
me to like stick stuff into it and and

1356
01:28:02,340 --> 01:28:08,429
pull stuff out of it now right and I'm

1357
01:28:05,429 --> 01:28:11,429
gonna just rename it from streaming to

1358
01:28:08,429 --> 01:28:12,420
stream because yeah no point in really

1359
01:28:11,429 --> 01:28:15,690
doing that

1360
01:28:12,420 --> 01:28:19,980
inside handmade PNG now I want to

1361
01:28:15,689 --> 01:28:23,518
include that sorry inside not handed PNG

1362
01:28:19,979 --> 01:28:26,158
but test PNG and also inside the build

1363
01:28:23,519 --> 01:28:29,039
file I I want I don't want to build a

1364
01:28:26,158 --> 01:28:32,518
handmade PNG by itself anymore it's

1365
01:28:29,038 --> 01:28:36,300
actually test PNG that's what I'm

1366
01:28:32,519 --> 01:28:38,159
actually building and I'll have to

1367
01:28:36,300 --> 01:28:38,880
change the program that we're launching

1368
01:28:38,158 --> 01:28:44,308
accordingly

1369
01:28:38,880 --> 01:28:47,368
so anyway inside here we've got to

1370
01:28:44,309 --> 01:28:51,329
change the name of this as well but once

1371
01:28:47,368 --> 01:28:56,658
we do that we should be pretty good to

1372
01:28:51,328 --> 01:29:04,460
go alright so if I then go back and look

1373
01:28:56,658 --> 01:29:09,710
here I've got to include it like so and

1374
01:29:04,460 --> 01:29:09,710
I've got include the handmade PNG code

1375
01:29:10,609 --> 01:29:22,889
as well yeah okay so also in here I

1376
01:29:19,948 --> 01:29:27,988
would I will need the actual code so

1377
01:29:22,889 --> 01:29:34,880
I'll need handmade PNG dot CPP oops and

1378
01:29:27,988 --> 01:29:34,879
handmade stream that CPP alright

1379
01:29:40,168 --> 01:29:46,779
okay

1380
01:29:43,078 --> 01:29:52,929
so next thing we've got to do here is

1381
01:29:46,779 --> 01:29:58,059
handmade P&amp;G is no longer a thing right

1382
01:29:52,929 --> 01:30:01,569
it's test P&amp;G now and so test P&amp;G eggsy

1383
01:29:58,059 --> 01:30:03,610
is the actual eggsy we need and in here

1384
01:30:01,569 --> 01:30:07,509
I can set up its arguments to do the

1385
01:30:03,609 --> 01:30:15,908
stuff that we wanted to do just like we

1386
01:30:07,510 --> 01:30:17,739
were doing it before so we should still

1387
01:30:15,908 --> 01:30:20,228
be able to run it and it should still

1388
01:30:17,738 --> 01:30:21,638
work like I said but we haven't really

1389
01:30:20,229 --> 01:30:25,630
made any modifications to it yet we've

1390
01:30:21,639 --> 01:30:28,090
just begun to split things up so the

1391
01:30:25,630 --> 01:30:31,590
first thing I'd like to do is maybe not

1392
01:30:28,090 --> 01:30:34,748
allow access to any of these things

1393
01:30:31,590 --> 01:30:36,998
inside the code that shouldn't have

1394
01:30:34,748 --> 01:30:40,300
access to them so I think we want to do

1395
01:30:36,998 --> 01:30:42,550
something more like that and that way

1396
01:30:40,300 --> 01:30:45,070
when we come through and do the compile

1397
01:30:42,550 --> 01:30:48,130
the compiler will now point out to us

1398
01:30:45,069 --> 01:30:50,859
all of the places in our code where we

1399
01:30:48,130 --> 01:30:53,139
are using things like an F printf that

1400
01:30:50,859 --> 01:30:55,748
we should no longer be using because

1401
01:30:53,139 --> 01:30:58,208
this code wants to be shared between the

1402
01:30:55,748 --> 01:31:01,510
external reader and the internal like

1403
01:30:58,208 --> 01:31:03,010
game code and F printf is not gonna cut

1404
01:31:01,510 --> 01:31:07,899
it for that because we don't even have

1405
01:31:03,010 --> 01:31:10,479
an F printf in our game code so now that

1406
01:31:07,899 --> 01:31:11,889
we've done that split and we've talked a

1407
01:31:10,479 --> 01:31:13,958
little bit about how that stream stuff's

1408
01:31:11,889 --> 01:31:15,788
going to work so what I want to do here

1409
01:31:13,958 --> 01:31:19,179
is say all right if we've got an output

1410
01:31:15,788 --> 01:31:20,800
stream so maybe we change stream buffer

1411
01:31:19,179 --> 01:31:25,019
because that's not very necessary

1412
01:31:20,800 --> 01:31:28,260
anymore we just call that to just stream

1413
01:31:25,019 --> 01:31:28,260
like so

1414
01:31:38,179 --> 01:31:41,449
there we go

1415
01:31:45,679 --> 01:31:52,010
anybody else still doing that stream

1416
01:32:01,429 --> 01:32:08,250
alright so now we need to do is make a

1417
01:32:05,550 --> 01:32:14,099
version of this F printf right that

1418
01:32:08,250 --> 01:32:17,819
actually is going to be targeting a

1419
01:32:14,099 --> 01:32:21,809
stream buffer instead of a C stream so

1420
01:32:17,819 --> 01:32:25,618
inside our stream function here you can

1421
01:32:21,809 --> 01:32:28,469
imagine us but you know taking a look at

1422
01:32:25,618 --> 01:32:32,009
how we would get this in there we need

1423
01:32:28,469 --> 01:32:33,899
some kind of a function that writes to

1424
01:32:32,010 --> 01:32:39,270
one of these buffers so you know we

1425
01:32:33,899 --> 01:32:44,189
could do something like okay you know

1426
01:32:39,270 --> 01:32:46,800
we've got a stream target here we have

1427
01:32:44,189 --> 01:32:48,538
the format string that's the you know

1428
01:32:46,800 --> 01:32:56,730
this thing whatever this thing is and

1429
01:32:48,538 --> 01:32:59,250
then we've got you know a bunch of bunch

1430
01:32:56,729 --> 01:33:02,819
of extra parameters that get stuffed in

1431
01:32:59,250 --> 01:33:04,288
there as as we go right now the question

1432
01:33:02,819 --> 01:33:07,500
is do we want to make this for it

1433
01:33:04,288 --> 01:33:09,359
potentially a macro I think we might

1434
01:33:07,500 --> 01:33:12,649
we don't have an odd F anywhere else do

1435
01:33:09,359 --> 01:33:12,649
we oops

1436
01:33:19,319 --> 01:33:23,039
so I think we might want to make this a

1437
01:33:21,270 --> 01:33:33,170
macro and the reason that I say that is

1438
01:33:23,039 --> 01:33:35,489
because if we make this a macro like so

1439
01:33:33,170 --> 01:33:38,670
then what we could do in this

1440
01:33:35,489 --> 01:33:43,229
circumstance is actually provide

1441
01:33:38,670 --> 01:33:44,730
additional information to the out F

1442
01:33:43,229 --> 01:33:46,739
function that we wouldn't have had

1443
01:33:44,729 --> 01:33:49,259
otherwise so for example we can provide

1444
01:33:46,739 --> 01:33:53,159
file on line number information here

1445
01:33:49,260 --> 01:33:56,489
which would allow the streaming

1446
01:33:53,159 --> 01:33:58,920
information to have additional like

1447
01:33:56,489 --> 01:34:02,670
debug info associated with it for

1448
01:33:58,920 --> 01:34:10,859
example which might also be handy again

1449
01:34:02,670 --> 01:34:14,220
just looking for words so something like

1450
01:34:10,859 --> 01:34:17,639
that may be interesting and relatively

1451
01:34:14,220 --> 01:34:22,590
easy for us to do pretty cheap so if I

1452
01:34:17,640 --> 01:34:24,990
change all of these and say okay from

1453
01:34:22,590 --> 01:34:38,520
now on every F printf is actually an out

1454
01:34:24,989 --> 01:34:39,269
F right now all of those functions will

1455
01:34:38,520 --> 01:34:46,410
be correct

1456
01:34:39,270 --> 01:34:48,030
however they have kind of arbitrary

1457
01:34:46,409 --> 01:34:50,729
stuff like standard out or whatever in

1458
01:34:48,029 --> 01:34:52,859
them what's the light that's a weird

1459
01:34:50,729 --> 01:34:54,209
error did I mess up that macro I don't

1460
01:34:52,859 --> 01:35:01,529
think that should be the area that we're

1461
01:34:54,210 --> 01:35:03,930
getting here I totally messed that up

1462
01:35:01,529 --> 01:35:06,529
don't ask me what that was supposed to

1463
01:35:03,930 --> 01:35:12,150
be that's where I wanted to put that

1464
01:35:06,529 --> 01:35:14,279
let's try that again yeah so now we're

1465
01:35:12,149 --> 01:35:17,279
fine the only problem that we have here

1466
01:35:14,279 --> 01:35:19,170
is that when we're doing our F that

1467
01:35:17,279 --> 01:35:26,609
first part they're like standard error

1468
01:35:19,170 --> 01:35:28,829
or whatever that isn't actually a real

1469
01:35:26,609 --> 01:35:32,609
target right we need to provide an

1470
01:35:28,829 --> 01:35:36,389
actual stream of some kind that we

1471
01:35:32,609 --> 01:35:43,979
use and we're gonna want to make that a

1472
01:35:36,389 --> 01:35:46,079
little bit more we're gonna want to make

1473
01:35:43,979 --> 01:35:47,579
there be some way that it can

1474
01:35:46,079 --> 01:35:50,130
automatically tell what it does

1475
01:35:47,579 --> 01:35:53,158
consumption of us on a stream where the

1476
01:35:50,130 --> 01:35:55,260
error should go so what I want to do is

1477
01:35:53,158 --> 01:35:57,539
have every stream can have another

1478
01:35:55,260 --> 01:35:59,880
stream that it just points to and it can

1479
01:35:57,539 --> 01:36:05,460
it can do so or not it could be a zero

1480
01:35:59,880 --> 01:36:06,929
and I'll be fine with that and if it's a

1481
01:36:05,460 --> 01:36:09,420
zero the areas this won't get reported

1482
01:36:06,929 --> 01:36:13,020
anywhere but if it's non zero then the

1483
01:36:09,420 --> 01:36:14,908
errors on that stream will get reported

1484
01:36:13,020 --> 01:36:17,610
to the error stream we're actually just

1485
01:36:14,908 --> 01:36:19,408
get dumped in there and maybe on the

1486
01:36:17,609 --> 01:36:21,420
stream chunk thing here we'll also say

1487
01:36:19,408 --> 01:36:23,129
that this can have a file on line number

1488
01:36:21,420 --> 01:36:25,529
attached to it as well

1489
01:36:23,130 --> 01:36:27,719
right so basically we can we can keep

1490
01:36:25,529 --> 01:36:30,090
track of where any given stream trunk

1491
01:36:27,719 --> 01:36:33,539
came from and then we also have

1492
01:36:30,090 --> 01:36:36,600
information about for any given stream

1493
01:36:33,539 --> 01:36:38,158
where the errors go on that stream so

1494
01:36:36,600 --> 01:36:40,139
what I can do here is say all right we

1495
01:36:38,158 --> 01:36:44,960
know where the errors would go here they

1496
01:36:40,139 --> 01:36:48,029
go to the errors on an underflow right

1497
01:36:44,960 --> 01:36:51,359
let's keep looking

1498
01:36:48,029 --> 01:36:55,769
so in here for example when we load in

1499
01:36:51,359 --> 01:36:58,079
the this PNG what we could do is say

1500
01:36:55,770 --> 01:37:00,929
well you know these aren't none of these

1501
01:36:58,079 --> 01:37:02,550
are errors these are informational so we

1502
01:37:00,929 --> 01:37:06,000
could do is say look when you parse the

1503
01:37:02,550 --> 01:37:08,159
PNG you can also give me a stream that's

1504
01:37:06,000 --> 01:37:11,189
just like an info stream so just you

1505
01:37:08,158 --> 01:37:12,929
know a place where you want me to send

1506
01:37:11,189 --> 01:37:15,229
any informational output that I'm gonna

1507
01:37:12,929 --> 01:37:15,230
have

1508
01:37:22,289 --> 01:37:26,140
right so all of these are just

1509
01:37:24,310 --> 01:37:32,200
informational they have nothing to do

1510
01:37:26,140 --> 01:37:35,500
with with errors so then when we have

1511
01:37:32,199 --> 01:37:36,909
our errors again on this we know exactly

1512
01:37:35,500 --> 01:37:39,189
what we're talking about here it's going

1513
01:37:36,909 --> 01:37:45,399
to be the errors stream of that

1514
01:37:39,189 --> 01:37:47,619
compressed data for the filter

1515
01:37:45,399 --> 01:37:50,079
reconstruction it if it's going to have

1516
01:37:47,619 --> 01:37:53,170
an error in there that needs to again

1517
01:37:50,079 --> 01:37:55,510
have an error stream we don't have the

1518
01:37:53,170 --> 01:38:02,409
buffer here so we're gonna have to pass

1519
01:37:55,510 --> 01:38:05,260
it so then when we come through here

1520
01:38:02,409 --> 01:38:18,159
again that's the comp data errors I

1521
01:38:05,260 --> 01:38:25,630
believe and then in the PNG filter

1522
01:38:18,159 --> 01:38:30,789
reconstruct groups same thing so then

1523
01:38:25,630 --> 01:38:34,180
when we parse the PNG we want to be able

1524
01:38:30,789 --> 01:38:41,409
to provide both of those things we want

1525
01:38:34,180 --> 01:38:43,119
to be able to provide the the us we want

1526
01:38:41,409 --> 01:38:45,579
to be able to provide a stream for

1527
01:38:43,119 --> 01:38:48,519
information as well as the stream for

1528
01:38:45,579 --> 01:38:51,130
errors and so that's what we're gonna do

1529
01:38:48,520 --> 01:38:54,150
here so what I want to do is start up by

1530
01:38:51,130 --> 01:38:54,150
creating two strings

1531
01:39:04,550 --> 01:39:09,210
and all I'm gonna do here is say look I

1532
01:39:07,409 --> 01:39:13,289
want you to make a new expandable memory

1533
01:39:09,210 --> 01:39:14,279
stream and maybe it's not even an

1534
01:39:13,289 --> 01:39:16,649
expandable noice you're me I'm just

1535
01:39:14,279 --> 01:39:19,170
gonna call this like an on-demand memory

1536
01:39:16,649 --> 01:39:20,369
stream so like basically every time you

1537
01:39:19,170 --> 01:39:25,230
need to put something in it

1538
01:39:20,369 --> 01:39:27,739
you know allocate more space right just

1539
01:39:25,229 --> 01:39:30,209
I don't know you figure it out for now

1540
01:39:27,739 --> 01:39:31,529
so we'll we'll get a little bit further

1541
01:39:30,210 --> 01:39:33,840
down that road in a second

1542
01:39:31,529 --> 01:39:35,880
we should probably pass a memory arena

1543
01:39:33,840 --> 01:39:38,369
here that the stream would use for

1544
01:39:35,880 --> 01:39:40,289
growing its size but you know we'll

1545
01:39:38,369 --> 01:39:43,289
cross that bridge we come to it so these

1546
01:39:40,289 --> 01:39:46,380
now again can also be done this way so

1547
01:39:43,289 --> 01:39:51,710
we can kind of unify this stuff into one

1548
01:39:46,380 --> 01:39:53,940
place so that we don't have multiple

1549
01:39:51,710 --> 01:39:55,770
dependencies here so we don't depend on

1550
01:39:53,939 --> 01:39:56,210
the C library for things we don't really

1551
01:39:55,770 --> 01:39:59,289
need to

1552
01:39:56,210 --> 01:39:59,288
[Music]

1553
01:40:00,810 --> 01:40:05,039
so that would would unify all of that

1554
01:40:02,939 --> 01:40:06,599
and then if we take a look up here we

1555
01:40:05,039 --> 01:40:08,010
kind of have some other things where

1556
01:40:06,600 --> 01:40:10,140
we're like okay you know read entire

1557
01:40:08,010 --> 01:40:12,690
file that has errors we can pass a

1558
01:40:10,140 --> 01:40:14,460
stream there for errors as well and we

1559
01:40:12,689 --> 01:40:16,289
want to do that because when we have

1560
01:40:14,460 --> 01:40:18,750
this stream that comes through as a

1561
01:40:16,289 --> 01:40:21,269
result we want that stream to get the

1562
01:40:18,750 --> 01:40:24,170
error stream that we're talking about

1563
01:40:21,270 --> 01:40:26,970
here right so this will also be an F

1564
01:40:24,170 --> 01:40:28,800
that goes to whatever the error stream

1565
01:40:26,970 --> 01:40:32,250
is for this result file because that's

1566
01:40:28,800 --> 01:40:34,140
where that should go same thing would

1567
01:40:32,250 --> 01:40:37,409
happen up here where we do the right top

1568
01:40:34,140 --> 01:40:39,119
down image we print out an error for an

1569
01:40:37,409 --> 01:40:42,269
unable to write the output file we might

1570
01:40:39,119 --> 01:40:46,369
as well again just go a whole hog and

1571
01:40:42,270 --> 01:40:46,370
have the error stream be passed in there

1572
01:40:48,680 --> 01:40:52,310
like so and

1573
01:40:54,929 --> 01:41:07,449
okay you need to implement that but once

1574
01:41:04,328 --> 01:41:11,859
we do all of that then this stuff would

1575
01:41:07,448 --> 01:41:15,279
just work okay parse P&amp;G also needs to

1576
01:41:11,859 --> 01:41:18,609
take the info screen but I think that's

1577
01:41:15,279 --> 01:41:21,069
it so then we're down to just okay now

1578
01:41:18,609 --> 01:41:23,828
we get these things the info stream in

1579
01:41:21,069 --> 01:41:27,099
the air stream those streams are things

1580
01:41:23,828 --> 01:41:29,649
that now have all of that stuff baked

1581
01:41:27,099 --> 01:41:32,710
into them what I would like to do now is

1582
01:41:29,649 --> 01:41:35,198
just have a way to recover that

1583
01:41:32,710 --> 01:41:37,538
information and of course it's pretty

1584
01:41:35,198 --> 01:41:40,658
straightforward for us to do that what

1585
01:41:37,538 --> 01:41:43,679
we can do is now just say all right

1586
01:41:40,658 --> 01:41:48,069
let's do a four I loop through the

1587
01:41:43,679 --> 01:41:50,559
chunks of the stream that we're talking

1588
01:41:48,069 --> 01:41:56,469
about here so let's do stream chunk

1589
01:41:50,559 --> 01:41:57,670
chunk equals info stream or I should

1590
01:41:56,469 --> 01:42:05,469
let's just do it this way let's say

1591
01:41:57,670 --> 01:42:09,519
stream first chunk chunk next that loops

1592
01:42:05,469 --> 01:42:12,840
over all the chunks in a stream then

1593
01:42:09,519 --> 01:42:17,110
what I can do is say all right

1594
01:42:12,840 --> 01:42:20,409
whatever the dest is I'm gonna do an F

1595
01:42:17,109 --> 01:42:22,808
printf to that destination with whatever

1596
01:42:20,408 --> 01:42:25,268
the contents of the stream actually was

1597
01:42:22,809 --> 01:42:27,940
I can actually view that as an F right

1598
01:42:25,269 --> 01:42:28,989
in this case because we know the size

1599
01:42:27,939 --> 01:42:38,288
ahead of time

1600
01:42:28,988 --> 01:42:41,018
so I can just say whatever the it sector

1601
01:42:38,288 --> 01:42:44,439
like that whatever the chunk contents

1602
01:42:41,019 --> 01:42:46,599
are I'm gonna put them out to that

1603
01:42:44,439 --> 01:42:49,238
destination file and I'm just gonna put

1604
01:42:46,599 --> 01:42:50,920
do that for all the chunks right now

1605
01:42:49,238 --> 01:42:53,078
what I would also like to do is in

1606
01:42:50,920 --> 01:42:54,998
between those I'm gonna actually just

1607
01:42:53,078 --> 01:42:57,149
because I can print out the file and

1608
01:42:54,998 --> 01:43:00,429
line number information because why not

1609
01:42:57,149 --> 01:43:03,460
so what I'll do here is say okay here's

1610
01:43:00,429 --> 01:43:07,199
the file here's the line and then here's

1611
01:43:03,460 --> 01:43:07,198
the stuff as it came

1612
01:43:07,319 --> 01:43:12,269
so the file name and the line number

1613
01:43:15,479 --> 01:43:21,669
these are optional we don't have to

1614
01:43:17,738 --> 01:43:23,319
print these out I'm just deciding - so

1615
01:43:21,670 --> 01:43:26,319
that's all good what I can do is then

1616
01:43:23,319 --> 01:43:31,630
make this into a little function this is

1617
01:43:26,319 --> 01:43:38,500
going to be called something like jump

1618
01:43:31,630 --> 01:43:40,359
stream to see runtime library and what

1619
01:43:38,500 --> 01:43:43,149
this will do is it'll take one of our

1620
01:43:40,359 --> 01:43:50,049
streams and then take one of their

1621
01:43:43,149 --> 01:43:52,000
streams and do the copy so then when we

1622
01:43:50,050 --> 01:43:55,179
get to the end I can just say alright

1623
01:43:52,000 --> 01:43:58,149
let's do a dump stream to see RT of the

1624
01:43:55,179 --> 01:43:59,920
info stream and the error stream this

1625
01:43:58,149 --> 01:44:02,769
will go to standard out this will go to

1626
01:43:59,920 --> 01:44:05,880
standard error and what I can also do

1627
01:44:02,770 --> 01:44:11,650
here is actually just do an F printf

1628
01:44:05,880 --> 01:44:16,569
that says info and then another one says

1629
01:44:11,649 --> 01:44:19,149
like errors or something like this so

1630
01:44:16,569 --> 01:44:21,939
those will be separated out and easy to

1631
01:44:19,149 --> 01:44:24,369
see I think that's all we really need

1632
01:44:21,939 --> 01:44:27,009
for the boilerplate so what we need to

1633
01:44:24,369 --> 01:44:29,710
do now is just actually have some way of

1634
01:44:27,010 --> 01:44:32,829
getting these things allocated if I go

1635
01:44:29,710 --> 01:44:37,829
to the stream functions here I can

1636
01:44:32,829 --> 01:44:45,460
define this as something that we will do

1637
01:44:37,829 --> 01:44:46,929
like so zooming and then our problem is

1638
01:44:45,460 --> 01:44:48,850
that you know these two functions are

1639
01:44:46,929 --> 01:44:51,369
now getting used but they don't exist

1640
01:44:48,850 --> 01:44:53,410
anywhere so if I come through here and

1641
01:44:51,369 --> 01:44:56,460
actually make them exist somewhere as

1642
01:44:53,409 --> 01:44:56,460
you can see

1643
01:45:02,389 --> 01:45:07,969
we should compile and moreover we should

1644
01:45:04,670 --> 01:45:10,520
actually run and what will happen now is

1645
01:45:07,969 --> 01:45:11,810
we just don't get any output right and

1646
01:45:10,520 --> 01:45:13,699
the reason we're getting output because

1647
01:45:11,810 --> 01:45:16,699
those streams don't dump anywhere that's

1648
01:45:13,698 --> 01:45:18,500
totally fine we don't care we can

1649
01:45:16,698 --> 01:45:30,469
address that later so I'll go to the Q&amp;A

1650
01:45:18,500 --> 01:45:33,609
now and then tomorrow we'll start

1651
01:45:30,469 --> 01:45:33,609
integrating that stuff in

1652
01:46:28,658 --> 01:46:34,719
so what is the focus now this logging

1653
01:46:31,210 --> 01:46:36,369
air system Wells not only a system it's

1654
01:46:34,719 --> 01:46:40,050
just some place to put the errors on the

1655
01:46:36,369 --> 01:46:40,050
PNG I don't know that it's a focus

1656
01:46:49,039 --> 01:46:56,899
right I mean at the risk of restating

1657
01:46:53,930 --> 01:47:02,690
exactly what I just said about 20

1658
01:46:56,899 --> 01:47:04,069
minutes ago so if a PNG fails to load we

1659
01:47:02,689 --> 01:47:05,899
need some way to see that it failed to

1660
01:47:04,069 --> 01:47:08,119
load but we need to see that fail to

1661
01:47:05,899 --> 01:47:10,159
load in the game and moreover we need to

1662
01:47:08,119 --> 01:47:12,590
be associated with the PNG that failed

1663
01:47:10,159 --> 01:47:14,479
so instead of these things going to the

1664
01:47:12,590 --> 01:47:15,829
console they need to go to a buffer that

1665
01:47:14,479 --> 01:47:21,379
we can print in the game

1666
01:47:15,829 --> 01:47:23,960
make sense so everywhere we call a

1667
01:47:21,380 --> 01:47:28,850
printf we just want to make it shunt

1668
01:47:23,960 --> 01:47:31,850
over to somewhere else it's not a system

1669
01:47:28,850 --> 01:47:33,980
it's just it's really straightforward

1670
01:47:31,850 --> 01:47:35,660
I'm not sure how that's I don't know

1671
01:47:33,979 --> 01:47:38,629
yeah I don't know how that got confusing

1672
01:47:35,659 --> 01:47:42,889
but point being you can't call F printf

1673
01:47:38,630 --> 01:47:44,600
if you're not a console app right so you

1674
01:47:42,890 --> 01:47:46,760
need somewhere to put that error

1675
01:47:44,600 --> 01:47:48,680
information and furthermore artist is

1676
01:47:46,760 --> 01:47:50,420
not going to look at a console so what

1677
01:47:48,680 --> 01:47:53,930
you want to do is when they put the PNG

1678
01:47:50,420 --> 01:47:57,579
in and it doesn't load you want to have

1679
01:47:53,930 --> 01:48:00,740
a thing in there that's like hey this

1680
01:47:57,579 --> 01:48:04,760
BMP named this that you just tried to

1681
01:48:00,739 --> 01:48:06,289
load here's the errors and you want them

1682
01:48:04,760 --> 01:48:09,650
split the reason I split them into two

1683
01:48:06,289 --> 01:48:12,529
different streams info and error is

1684
01:48:09,649 --> 01:48:14,359
because the errors are the only ones the

1685
01:48:12,529 --> 01:48:17,619
artist should probably be seeing you can

1686
01:48:14,359 --> 01:48:20,179
do that in a couple different ways but

1687
01:48:17,619 --> 01:48:21,859
what is the focus now this error like a

1688
01:48:20,180 --> 01:48:23,750
system we're answered that I haven't

1689
01:48:21,859 --> 01:48:25,250
been following the PNG streams closely

1690
01:48:23,750 --> 01:48:28,369
but how satisfied are you with the code

1691
01:48:25,250 --> 01:48:29,899
for the reader it seems fine to me

1692
01:48:28,369 --> 01:48:37,369
I mean I'm satisfied as long as it reads

1693
01:48:29,899 --> 01:48:38,839
it which it seems to be so far so I'm

1694
01:48:37,369 --> 01:48:40,729
pretty happy with it it didn't take very

1695
01:48:38,840 --> 01:48:43,130
long to write and it reads the files

1696
01:48:40,729 --> 01:48:46,779
that's really all we cared about we

1697
01:48:43,130 --> 01:48:46,779
don't have any other requirements for it

1698
01:48:51,600 --> 01:48:55,810
if that makes sense so in other words

1699
01:48:53,979 --> 01:48:58,299
that we don't need this reader to be

1700
01:48:55,810 --> 01:49:02,680
fast we don't need it to do anything

1701
01:48:58,300 --> 01:49:06,960
other than read just the bits of the

1702
01:49:02,680 --> 01:49:06,960
image so you know as long as it does

1703
01:49:08,189 --> 01:49:14,229
we're done and it seems like it does so

1704
01:49:11,949 --> 01:49:16,149
I'm happy with that could explain the

1705
01:49:14,229 --> 01:49:20,349
bug that was solved again sure so the

1706
01:49:16,149 --> 01:49:24,849
bug that we had was that the PNG

1707
01:49:20,350 --> 01:49:28,300
specification specifically says that if

1708
01:49:24,850 --> 01:49:31,390
you not the PNG that's slightly

1709
01:49:28,300 --> 01:49:34,020
misstated the deflate specification

1710
01:49:31,390 --> 01:49:36,789
which is the algorithm that PNG

1711
01:49:34,020 --> 01:49:39,160
references for its compression so it's

1712
01:49:36,789 --> 01:49:41,619
the it is effectively the spec for PNG

1713
01:49:39,159 --> 01:49:43,869
but it's not in the spec for PNG it's a

1714
01:49:41,619 --> 01:49:47,319
it's a much earlier compressor that the

1715
01:49:43,869 --> 01:49:50,829
PNG is just saying we're using it the

1716
01:49:47,319 --> 01:49:54,579
spec for deflate says that if you get a

1717
01:49:50,829 --> 01:49:56,819
block that is uncompressed so it does

1718
01:49:54,579 --> 01:50:02,579
not go through the Huffman and stuff

1719
01:49:56,819 --> 01:50:06,880
then first before you read the sizes to

1720
01:50:02,579 --> 01:50:09,880
copy uncompressed you must flush any

1721
01:50:06,880 --> 01:50:12,219
bits that you were still that you still

1722
01:50:09,880 --> 01:50:17,199
had left over from the Huffman stuff

1723
01:50:12,219 --> 01:50:20,529
right the problem was our Huffman bit

1724
01:50:17,199 --> 01:50:23,559
buffer was 16 bits long but the spec

1725
01:50:20,529 --> 01:50:27,099
says only flush up to the byte boundary

1726
01:50:23,560 --> 01:50:30,880
I flushed the whole 16 bit boundary

1727
01:50:27,100 --> 01:50:32,710
which means that we flushed 8 bits more

1728
01:50:30,880 --> 01:50:35,760
than we should have because we had 4

1729
01:50:32,710 --> 01:50:39,369
bits left in the buffer plus 8 bits

1730
01:50:35,760 --> 01:50:41,050
because it was 12 bits total I should

1731
01:50:39,369 --> 01:50:43,599
have only flushed 4 bits and then

1732
01:50:41,050 --> 01:50:46,690
started using the 8 bits that came next

1733
01:50:43,600 --> 01:50:49,630
instead I flushed all 12 bits so the fix

1734
01:50:46,689 --> 01:50:52,389
was just only flush up to the next byte

1735
01:50:49,630 --> 01:50:55,090
boundary don't accidentally flush a

1736
01:50:52,390 --> 01:50:59,940
whole extra byte if your bit buffer

1737
01:50:55,090 --> 01:50:59,940
happens to have that in it that's all

1738
01:51:20,989 --> 01:51:27,689
is to do comment still in the code I

1739
01:51:25,100 --> 01:51:31,860
don't know which part are we talking

1740
01:51:27,689 --> 01:51:34,769
about it's like that's the only one

1741
01:51:31,859 --> 01:51:37,019
we've got we've got plenty of to do's

1742
01:51:34,770 --> 01:51:41,150
elsewhere in the code but that's the

1743
01:51:37,020 --> 01:51:41,150
only one that's in that particular file

1744
01:51:44,329 --> 01:51:48,409
so

1745
01:51:45,359 --> 01:51:48,409
[Music]

1746
01:51:56,208 --> 01:52:01,769
and he plans to switch to LLVM anytime

1747
01:51:58,769 --> 01:52:04,769
the series no although when we compile

1748
01:52:01,769 --> 01:52:07,979
the code on Mac or Linux assuming report

1749
01:52:04,769 --> 01:52:13,409
to those platforms at some point they

1750
01:52:07,979 --> 01:52:17,280
are clang based so we would we would use

1751
01:52:13,408 --> 01:52:21,529
LLVM on those platforms it's the native

1752
01:52:17,279 --> 01:52:21,529
it's the native compiler

1753
01:52:41,109 --> 01:52:47,949
and that's a good question by the way

1754
01:52:43,179 --> 01:52:50,559
Asaf about whether you can load BMPs

1755
01:52:47,948 --> 01:52:54,969
with alpha inside Visual Studio I have

1756
01:52:50,559 --> 01:52:57,038
no idea doesn't look that way

1757
01:52:54,969 --> 01:52:59,439
or we're just we may be setting the

1758
01:52:57,038 --> 01:53:04,779
bitmap values wrong but it doesn't even

1759
01:52:59,439 --> 01:53:06,699
think there is an alpha Channel right so

1760
01:53:04,779 --> 01:53:15,788
I don't know if we need to set something

1761
01:53:06,698 --> 01:53:19,058
else you know maybe maybe we need to set

1762
01:53:15,788 --> 01:53:22,198
some other flag in the header to get it

1763
01:53:19,059 --> 01:53:25,899
to understand I seem to remember us

1764
01:53:22,198 --> 01:53:29,348
having to do something like that

1765
01:53:25,899 --> 01:53:32,619
originally I don't know I don't much

1766
01:53:29,349 --> 01:53:44,199
care because we don't really need to

1767
01:53:32,618 --> 01:53:46,118
know that but you know for reference if

1768
01:53:44,198 --> 01:53:48,969
you care what the Alpha channel is and

1769
01:53:46,118 --> 01:53:51,788
you only have a bitmap writer you can

1770
01:53:48,969 --> 01:53:53,649
also it's pretty easy right to add test

1771
01:53:51,788 --> 01:53:57,128
code that will get will give you the

1772
01:53:53,649 --> 01:54:00,809
information you want so you know what

1773
01:53:57,128 --> 01:54:00,809
you do is you just say like

1774
01:54:11,050 --> 01:54:28,600
something like this so what you can do

1775
01:54:23,510 --> 01:54:28,600
is you say like oh yeah okay so you know

1776
01:54:50,409 --> 01:54:53,680
something like this

1777
01:54:58,939 --> 01:55:02,279
so when you come in here and this is you

1778
01:55:01,319 --> 01:55:06,149
know because since this is not

1779
01:55:02,279 --> 01:55:10,859
performance critical code you can just

1780
01:55:06,149 --> 01:55:15,839
have a flags that just says like or you

1781
01:55:10,859 --> 01:55:25,259
know pixel ops it's like hey do you want

1782
01:55:15,840 --> 01:55:49,369
to replicate the alpha out and do you

1783
01:55:25,260 --> 01:55:54,060
want to swap something like this and

1784
01:55:49,369 --> 01:55:56,149
then you just implement those and you

1785
01:55:54,060 --> 01:56:04,770
can write out the Alpha Channel and see

1786
01:55:56,149 --> 01:56:06,689
what it actually is so you know in this

1787
01:56:04,770 --> 01:56:15,180
case we would just say okay the Alpha is

1788
01:56:06,689 --> 01:56:18,799
just C shifted down by 24 and then you

1789
01:56:15,180 --> 01:56:18,800
just you put that in every channel

1790
01:56:31,609 --> 01:56:41,069
right so this allows you to make

1791
01:56:38,880 --> 01:56:42,750
something that'll do a bunch of pixel

1792
01:56:41,069 --> 01:56:45,029
ops to the thing that you know whatever

1793
01:56:42,750 --> 01:56:49,250
you want to do and so then when you

1794
01:56:45,029 --> 01:56:52,949
write it you can write it twice you know

1795
01:56:49,250 --> 01:57:00,810
so you basically say like oh yeah you

1796
01:56:52,949 --> 01:57:07,199
know there's an RGB and an out a and we

1797
01:57:00,810 --> 01:57:13,200
check to see should be bitmap to write a

1798
01:57:07,199 --> 01:57:28,789
bitmap file to write or alpha and then

1799
01:57:13,199 --> 01:57:31,979
we just write both of these like so so

1800
01:57:28,789 --> 01:57:34,529
we just need to put them in in the flags

1801
01:57:31,979 --> 01:57:38,009
field which one of those we want to do

1802
01:57:34,529 --> 01:57:41,779
so like pixel op swap bar and pixel up

1803
01:57:38,010 --> 01:57:41,780
rip away or whatever

1804
01:57:50,390 --> 01:57:58,410
so that's that's really it and then if

1805
01:57:55,470 --> 01:57:59,820
we were to run this code we should be

1806
01:57:58,409 --> 01:58:02,699
able to then ask it for both of these

1807
01:57:59,819 --> 01:58:06,989
things um so like there's an RGB version

1808
01:58:02,699 --> 01:58:13,109
and then there's a W temp character here

1809
01:58:06,989 --> 01:58:14,159
Oh a you know an alpha version and you

1810
01:58:13,109 --> 01:58:15,509
know I kind of slammed that coach I'm

1811
01:58:14,159 --> 01:58:19,800
not sure if it's right but you get the

1812
01:58:15,510 --> 01:58:22,520
idea right so here you can see let me

1813
01:58:19,800 --> 01:58:22,520
delete this

1814
01:58:32,270 --> 01:58:42,800
I messed that up straight there so if I

1815
01:58:40,609 --> 01:58:45,109
run that now it should put one chip at

1816
01:58:42,800 --> 01:58:47,869
the RGB out to one bitmap in the Alfa to

1817
01:58:45,109 --> 01:58:50,920
another right so here's the Alpha

1818
01:58:47,869 --> 01:58:54,349
Channel right and you can see it's nice

1819
01:58:50,920 --> 01:58:58,250
looks like what an artist probably made

1820
01:58:54,350 --> 01:59:02,120
right and then you can see the the RGB

1821
01:58:58,250 --> 01:59:08,270
part here and you know you can have

1822
01:59:02,119 --> 01:59:11,239
other stuff you could have other ops as

1823
01:59:08,270 --> 01:59:13,250
well ones that you could multiply you

1824
01:59:11,239 --> 01:59:19,670
know you could have the Alpha replica

1825
01:59:13,250 --> 01:59:21,350
like the Alpha could multiply the image

1826
01:59:19,670 --> 01:59:26,539
to like put out a premultiplied alpha

1827
01:59:21,350 --> 01:59:28,250
right if you want to so there's a lot of

1828
01:59:26,539 --> 01:59:35,289
things you could do like if you know if

1829
01:59:28,250 --> 01:59:35,289
you want to see something like this

1830
01:59:44,368 --> 01:59:56,109
to isolate the channels right so that

1831
01:59:54,130 --> 01:59:59,769
gets us out channel zero trail one

1832
01:59:56,109 --> 02:00:01,509
channel two we get out the alpha then we

1833
01:59:59,769 --> 02:00:17,708
can do is just like multiply each of

1834
02:00:01,510 --> 02:00:19,599
these right by the Alpha now the thing

1835
02:00:17,708 --> 02:00:22,929
you have to remember is each of its like

1836
02:00:19,599 --> 02:00:25,719
to be five times 25 is not 255 right

1837
02:00:22,929 --> 02:00:26,800
this is that floating point so you end

1838
02:00:25,719 --> 02:00:28,630
up with an alpha value that's not

1839
02:00:26,800 --> 02:00:30,998
actually correct there so you need to

1840
02:00:28,630 --> 02:00:44,708
shift it down by eight this is a lossy

1841
02:00:30,998 --> 02:00:47,380
multiply so you actually two to five

1842
02:00:44,708 --> 02:00:50,948
took two to five shifted down by eight

1843
02:00:47,380 --> 02:00:53,909
is gonna leave you with one bit missing

1844
02:00:50,948 --> 02:00:57,728
so instead of 255 you know I can show

1845
02:00:53,908 --> 02:01:01,569
you what I mean so if I take 55 and I

1846
02:00:57,729 --> 02:01:05,400
multiply it by 55 its 6502 five right

1847
02:01:01,569 --> 02:01:12,779
dividing that by 256 I don't get 255

1848
02:01:05,399 --> 02:01:12,779
right so I lose one bit at the bottom

1849
02:01:12,958 --> 02:01:18,880
just so you know if you actually want

1850
02:01:15,998 --> 02:01:20,380
your 255 that's we've got to equal to

1851
02:01:18,880 --> 02:01:22,059
vibe you have to do the math a different

1852
02:01:20,380 --> 02:01:24,699
way and we're not gonna do that right

1853
02:01:22,059 --> 02:01:26,708
now we don't care about that at all in

1854
02:01:24,698 --> 02:01:29,228
this code but it's just so that you

1855
02:01:26,708 --> 02:01:33,760
understand what we're talking about here

1856
02:01:29,229 --> 02:01:35,650
so if I then repack the results now

1857
02:01:33,760 --> 02:01:42,159
we've got a multi and I could put in

1858
02:01:35,649 --> 02:01:44,708
here like that so another thing we could

1859
02:01:42,158 --> 02:01:49,448
do is for the RGB Channel right if I

1860
02:01:44,708 --> 02:01:52,149
wanted to I could put in a mul channel

1861
02:01:49,448 --> 02:01:55,779
up there so that you know when we run

1862
02:01:52,149 --> 02:01:58,289
this thing it'll it'll

1863
02:01:55,779 --> 02:02:01,779
clear out the parts of the image that

1864
02:01:58,289 --> 02:02:03,909
were not that didn't have a positive

1865
02:02:01,779 --> 02:02:07,509
alpha values or whatever Oh

1866
02:02:03,909 --> 02:02:21,880
or not what did I do wrong there have

1867
02:02:07,510 --> 02:02:26,340
school did I swap the channels c0 oh no

1868
02:02:21,880 --> 02:02:30,180
I just didn't use the swap Channel I

1869
02:02:26,340 --> 02:02:30,180
need to still do that

1870
02:02:31,979 --> 02:02:45,209
there we go so of course it helps if I

1871
02:02:42,670 --> 02:02:45,210
actually call it

1872
02:02:51,869 --> 02:03:07,229
sooo Michael I don't know what I called

1873
02:03:03,449 --> 02:03:09,869
that there yeah I so now what I call it

1874
02:03:07,229 --> 02:03:11,849
it should clear out you know the part of

1875
02:03:09,869 --> 02:03:13,559
the image the part of the RGB that

1876
02:03:11,850 --> 02:03:17,600
doesn't have an alpha value will get

1877
02:03:13,560 --> 02:03:23,400
cleared and so you can kind of see that

1878
02:03:17,600 --> 02:03:28,220
composited together if you care right so

1879
02:03:23,399 --> 02:03:28,219
this is a premultiplied alpha image now

1880
02:03:29,000 --> 02:03:34,109
just gives you ways of viewing them so

1881
02:03:31,500 --> 02:03:36,300
if you only have a three channel output

1882
02:03:34,109 --> 02:03:38,279
and you need to see these it's not the

1883
02:03:36,300 --> 02:03:50,250
end of the world it's still pretty

1884
02:03:38,279 --> 02:03:51,479
simple to do so will there be any blog

1885
02:03:50,250 --> 02:03:53,159
post on my rocket for any of the

1886
02:03:51,479 --> 02:03:57,659
products anytime I kind of missed those

1887
02:03:53,159 --> 02:04:06,899
yes actually there will be maybe a month

1888
02:03:57,659 --> 02:04:08,010
or two so no crap I am confused while

1889
02:04:06,899 --> 02:04:11,639
you shift the multiply down by eight

1890
02:04:08,010 --> 02:04:18,470
bits wouldn't you want to mask with oxf

1891
02:04:11,640 --> 02:04:25,710
f no so what you have to remember is

1892
02:04:18,470 --> 02:04:31,590
that when you do a fixed point multiply

1893
02:04:25,710 --> 02:04:34,289
which is what this is the basis gets

1894
02:04:31,590 --> 02:04:36,510
multiplied in and must be corrected for

1895
02:04:34,289 --> 02:04:39,810
and that's really what's happening here

1896
02:04:36,510 --> 02:04:42,960
and since we've never really well maybe

1897
02:04:39,810 --> 02:04:45,200
we have covered this I'll just say it

1898
02:04:42,960 --> 02:04:45,199
again

1899
02:04:54,929 --> 02:05:03,368
so what happens here is we're really

1900
02:05:01,719 --> 02:05:04,899
trying to say that we have a number

1901
02:05:03,368 --> 02:05:08,380
between zero and one

1902
02:05:04,899 --> 02:05:10,658
right and ideally this would be zero to

1903
02:05:08,380 --> 02:05:14,739
one where we include both ends of the

1904
02:05:10,658 --> 02:05:16,808
interval an in floating-point this just

1905
02:05:14,738 --> 02:05:19,958
works we have zero point zero and we

1906
02:05:16,809 --> 02:05:23,440
have one point O and anywhere in between

1907
02:05:19,958 --> 02:05:27,698
these work exactly right to within

1908
02:05:23,439 --> 02:05:33,488
floating point precision so 1.0 x 1.0

1909
02:05:27,698 --> 02:05:36,158
equals 1.0 right 1.0 x 0.5 equals 0.5

1910
02:05:33,488 --> 02:05:43,538
these are exactly what we want to have

1911
02:05:36,158 --> 02:05:47,170
happen half of the 1.0 is 0.5 right but

1912
02:05:43,538 --> 02:05:49,029
what happens in FP could also be fixed

1913
02:05:47,170 --> 02:05:58,510
fixed point so let me just say in float

1914
02:05:49,029 --> 02:06:01,689
right but in fixed point something very

1915
02:05:58,510 --> 02:06:05,050
different happens right because when I

1916
02:06:01,689 --> 02:06:11,368
say that I have zero to one in fixed

1917
02:06:05,050 --> 02:06:25,349
point what I really have is 0 to 255

1918
02:06:11,368 --> 02:06:30,219
over 255 right makes sense so it's not

1919
02:06:25,349 --> 02:06:35,139
this it's this so when I look at these

1920
02:06:30,219 --> 02:06:37,929
values if I have if I look at exactly

1921
02:06:35,139 --> 02:06:41,949
these three things if I have zero point

1922
02:06:37,929 --> 02:06:44,859
zero that's actually 0 over 255 right if

1923
02:06:41,948 --> 02:06:48,788
I have one times one equals one

1924
02:06:44,859 --> 02:06:50,109
what I actually have is 255 over 255

1925
02:06:48,788 --> 02:06:54,488
times

1926
02:06:50,109 --> 02:06:57,998
255 / 255 right that's what I actually

1927
02:06:54,488 --> 02:07:02,629
have and I want that to equal this is

1928
02:06:57,998 --> 02:07:04,819
what I want that's equal to 55 over 55

1929
02:07:02,630 --> 02:07:08,900
right that that's what I'm actually

1930
02:07:04,819 --> 02:07:10,699
trying to do the problem is it's just

1931
02:07:08,899 --> 02:07:14,389
happening in the cpu in an integer

1932
02:07:10,699 --> 02:07:18,979
multiplied it doesn't know there was a

1933
02:07:14,390 --> 02:07:23,270
secret over 255 in the mix it just says

1934
02:07:18,979 --> 02:07:25,009
255 times 255 and so if you get rid of

1935
02:07:23,270 --> 02:07:28,960
all of these divisors which is what will

1936
02:07:25,010 --> 02:07:33,350
happen in the CPU its 255 35 is it 255

1937
02:07:28,960 --> 02:07:43,090
25 times 255 right is that number we saw

1938
02:07:33,350 --> 02:07:46,070
before 6502 5 right you see what I mean

1939
02:07:43,090 --> 02:07:50,720
so every time you do a fixed point

1940
02:07:46,069 --> 02:07:53,299
operation you must yourself right you

1941
02:07:50,720 --> 02:07:56,390
must yourself do the multiplication of

1942
02:07:53,300 --> 02:08:01,940
the denominator which in this case also

1943
02:07:56,390 --> 02:08:05,030
comes out to 6502 5 right you must do

1944
02:08:01,939 --> 02:08:07,279
that and then you since you are

1945
02:08:05,029 --> 02:08:11,059
interpreting it as over to 5 you must

1946
02:08:07,279 --> 02:08:16,939
map that denominator back to 255 you

1947
02:08:11,060 --> 02:08:21,670
must do this equation 6 5 o2 5 right /

1948
02:08:16,939 --> 02:08:25,099
what so what is call that x equals 255

1949
02:08:21,670 --> 02:08:27,500
right and you must find that value and

1950
02:08:25,100 --> 02:08:32,210
in this case as you can see right that

1951
02:08:27,500 --> 02:08:36,069
value is going to be 25 right if you

1952
02:08:32,210 --> 02:08:36,069
solve for X here you get x equals 255

1953
02:08:36,159 --> 02:08:52,789
makes sense so yeah the reason you lose

1954
02:08:46,850 --> 02:08:55,039
a bit this is 502 5 divided by 2 to 5 is

1955
02:08:52,789 --> 02:08:57,829
be cut loops sorry

1956
02:08:55,039 --> 02:09:03,710
6 did I just type that right 6 5 oh I

1957
02:08:57,829 --> 02:09:06,680
think I did yeah the reason that you

1958
02:09:03,710 --> 02:09:10,069
lose a bit there right is because if I

1959
02:09:06,680 --> 02:09:11,780
was to actually divide by 255 which is

1960
02:09:10,069 --> 02:09:14,029
the what I want to do I would hack

1961
02:09:11,779 --> 02:09:15,279
should have to actually do an integer

1962
02:09:14,029 --> 02:09:17,439
divide here

1963
02:09:15,279 --> 02:09:20,319
I chose not to because a shift is faster

1964
02:09:17,439 --> 02:09:24,578
so I shifted down by eight which

1965
02:09:20,319 --> 02:09:27,519
actually divides by 256 so dividing by

1966
02:09:24,578 --> 02:09:29,649
256 is not the same as dividing by 255

1967
02:09:27,520 --> 02:09:33,849
so you lose that one bit of precision

1968
02:09:29,649 --> 02:09:35,769
when you do it that way so now your

1969
02:09:33,849 --> 02:09:39,460
recommendation was why can't you just

1970
02:09:35,770 --> 02:09:40,770
and with Oh X F F well what would that

1971
02:09:39,460 --> 02:09:46,779
do

1972
02:09:40,770 --> 02:09:49,570
shifting by eight right is the same as

1973
02:09:46,779 --> 02:09:52,630
dividing by 255 I'm sorry

1974
02:09:49,569 --> 02:09:56,439
256 which is very close to what I wanted

1975
02:09:52,630 --> 02:10:00,429
to do which was divided by 256 I'm sorry

1976
02:09:56,439 --> 02:10:06,428
to 55 ending with Oh X F F is nothing

1977
02:10:00,429 --> 02:10:08,920
like that that is mod 256 so rather if

1978
02:10:06,429 --> 02:10:13,210
you look at what happens rather than

1979
02:10:08,920 --> 02:10:16,270
take here's our 16-bit value the color

1980
02:10:13,210 --> 02:10:18,939
that we want is up here and there's 200

1981
02:10:16,270 --> 02:10:21,309
there's a 8 bits of fractional right

1982
02:10:18,939 --> 02:10:24,069
because we multiplied 25 by 25 we got

1983
02:10:21,309 --> 02:10:25,630
the colors up here with and we've got a

1984
02:10:24,069 --> 02:10:26,948
bunch of fractional precision down here

1985
02:10:25,630 --> 02:10:29,409
that we're trying to throw away this

1986
02:10:26,948 --> 02:10:33,009
shift moves the color back into the

1987
02:10:29,408 --> 02:10:35,348
position we want the the and we'll just

1988
02:10:33,010 --> 02:10:36,909
get the fractional precision so all

1989
02:10:35,349 --> 02:10:40,328
you're gonna get is a fractional

1990
02:10:36,908 --> 02:10:43,269
precision of how close in between those

1991
02:10:40,328 --> 02:10:44,590
two values between the lower color on

1992
02:10:43,270 --> 02:10:46,929
the higher color that we can actually

1993
02:10:44,590 --> 02:10:49,059
present where you were in there so an

1994
02:10:46,929 --> 02:10:50,770
and is exactly the wrong thing here

1995
02:10:49,059 --> 02:10:55,000
because we're trying to divide to move

1996
02:10:50,770 --> 02:10:57,630
our value back into the range hopefully

1997
02:10:55,000 --> 02:10:57,630
that makes some sense

1998
02:11:05,649 --> 02:11:09,969
can you briefly explain how the binary

1999
02:11:07,960 --> 02:11:13,239
reverse works you in fronted last week

2000
02:11:09,970 --> 02:11:16,210
uh it's just it's totally dumb it

2001
02:11:13,239 --> 02:11:18,699
doesn't do anything it's it's the

2002
02:11:16,210 --> 02:11:21,939
dumbest possible thing we literally just

2003
02:11:18,699 --> 02:11:25,539
have like if we have a number like this

2004
02:11:21,939 --> 02:11:28,899
we literally just go through we hand out

2005
02:11:25,539 --> 02:11:30,939
one of the bits we see if it's 1 or 0 we

2006
02:11:28,899 --> 02:11:33,069
get that value and we and it into the

2007
02:11:30,939 --> 02:11:35,439
opposite position so we just we

2008
02:11:33,069 --> 02:11:37,449
literally just swap bits that's all

2009
02:11:35,439 --> 02:11:43,239
weird it's like the dumbest possible

2010
02:11:37,449 --> 02:11:46,960
thing we we don't do anything smart

2011
02:11:43,239 --> 02:11:55,090
there at all actually let me see where

2012
02:11:46,960 --> 02:12:02,109
that actually is there spits where is

2013
02:11:55,090 --> 02:12:05,350
that here it is this should not be in

2014
02:12:02,109 --> 02:12:08,710
the stream that should actually be in

2015
02:12:05,350 --> 02:12:10,420
the pantry um so you can see it's right

2016
02:12:08,710 --> 02:12:14,439
here we just loop through the bit count

2017
02:12:10,420 --> 02:12:17,800
right we say look grab out that bit and

2018
02:12:14,439 --> 02:12:21,099
let's put it back we'll flip it to the

2019
02:12:17,800 --> 02:12:24,369
opposition since we know this is a

2020
02:12:21,100 --> 02:12:27,670
symmetric operation let's also just take

2021
02:12:24,369 --> 02:12:29,439
wear whatever the bit was in the flipped

2022
02:12:27,670 --> 02:12:32,350
position and flip that one as well so

2023
02:12:29,439 --> 02:12:33,969
basically we swap right we read this one

2024
02:12:32,350 --> 02:12:38,380
in this one and we switch their

2025
02:12:33,970 --> 02:12:40,720
positions right that and that's all this

2026
02:12:38,380 --> 02:12:43,119
is doing this grabs out the two

2027
02:12:40,720 --> 02:12:44,530
different bits on either side and this

2028
02:12:43,119 --> 02:12:46,899
slides them up you can see these are

2029
02:12:44,529 --> 02:12:49,599
symmetric right we grab the bit that's

2030
02:12:46,899 --> 02:12:51,549
at bit index and we shove it up to the

2031
02:12:49,600 --> 02:12:53,770
position that's the opposite of that and

2032
02:12:51,550 --> 02:12:55,690
then we grab the bit that's at the

2033
02:12:53,770 --> 02:12:57,280
position that's the opposite and we put

2034
02:12:55,689 --> 02:12:59,919
it into the one that we just grabbed

2035
02:12:57,279 --> 02:13:02,349
right so we're just swapping them in the

2036
02:12:59,920 --> 02:13:04,449
or allows us to build up the value

2037
02:13:02,350 --> 02:13:06,490
periodically there's probably way

2038
02:13:04,449 --> 02:13:10,569
smarter ways to reverse the bits than

2039
02:13:06,489 --> 02:13:13,359
that I'm guessing I think we look some

2040
02:13:10,569 --> 02:13:14,979
up on stream but we just don't care like

2041
02:13:13,359 --> 02:13:16,509
we don't care we only use it for

2042
02:13:14,979 --> 02:13:19,289
building the Huffman table so it don't

2043
02:13:16,510 --> 02:13:19,289
have to be fast

2044
02:13:25,319 --> 02:13:35,308
alright looks like we're all done okay

2045
02:13:40,349 --> 02:13:45,190
alright thank you everybody for joining

2046
02:13:43,569 --> 02:13:47,018
me for another episode of handmade hero

2047
02:13:45,189 --> 02:13:49,419
it's been a pleasure coding with you as

2048
02:13:47,019 --> 02:13:51,219
always if you would like to follow along

2049
02:13:49,420 --> 02:13:53,979
with this series at home you can always

2050
02:13:51,219 --> 02:13:55,448
peer to the game on handmade hero it up

2051
02:13:53,979 --> 02:13:57,130
or come to the source code so you can

2052
02:13:55,448 --> 02:13:58,988
follow along with it and if you want to

2053
02:13:57,130 --> 02:14:00,400
be up-to-date on what we're doing at

2054
02:13:58,988 --> 02:14:01,988
Molly rocket including handmade hero

2055
02:14:00,399 --> 02:14:04,420
stuff you can always drop your email

2056
02:14:01,988 --> 02:14:05,618
into our mailing list it's finally up

2057
02:14:04,420 --> 02:14:06,998
they did the hammer here web page so

2058
02:14:05,618 --> 02:14:09,670
it's cop the mailing with sign up on it

2059
02:14:06,998 --> 02:14:12,069
and subscribe we send out email only

2060
02:14:09,670 --> 02:14:14,559
when we've got something to say so it

2061
02:14:12,069 --> 02:14:16,599
will clog up your inbox that's it for

2062
02:14:14,559 --> 02:14:18,670
this week I will be back I'm sorry

2063
02:14:16,599 --> 02:14:21,880
that's it for today I'll be back

2064
02:14:18,670 --> 02:14:24,908
tomorrow we are not done for the week

2065
02:14:21,880 --> 02:14:26,590
where we'll finish that stream buffering

2066
02:14:24,908 --> 02:14:29,649
for the errors and then we'll try to

2067
02:14:26,590 --> 02:14:32,880
move the PNG reader into handmade hero

2068
02:14:29,649 --> 02:14:34,929
proper so we can just load that art and

2069
02:14:32,880 --> 02:14:37,300
from there we'll start to figure out how

2070
02:14:34,929 --> 02:14:39,969
we want to do like testing to make sure

2071
02:14:37,300 --> 02:14:40,809
we can detect when art changes and stuff

2072
02:14:39,969 --> 02:14:42,939
like that

2073
02:14:40,809 --> 02:14:45,130
so we'll be going from there again this

2074
02:14:42,939 --> 02:14:46,868
is gonna be a couple weeks of work for

2075
02:14:45,130 --> 02:14:50,440
sure because we kind of are making a

2076
02:14:46,868 --> 02:14:52,210
whole system for ingesting these aren't

2077
02:14:50,439 --> 02:14:53,348
files but you know I think it'll be

2078
02:14:52,210 --> 02:14:55,479
pretty smooth saying there's not too

2079
02:14:53,349 --> 02:14:56,650
much complex stuff in there it's a

2080
02:14:55,479 --> 02:14:57,729
pretty straightforward process we're

2081
02:14:56,649 --> 02:14:59,828
doing there's just a couple different

2082
02:14:57,729 --> 02:15:01,150
things we got touched so we'll be doing

2083
02:14:59,828 --> 02:15:03,998
that hope see you back here for that

2084
02:15:01,149 --> 02:15:05,439
until tomorrow have fun programming and

2085
02:15:03,998 --> 02:15:08,010
I'll see everyone on the Internet take

2086
02:15:05,439 --> 02:15:08,009
it easy everybody

