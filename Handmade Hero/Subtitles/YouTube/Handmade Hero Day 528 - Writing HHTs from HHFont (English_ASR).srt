1
00:00:00,030 --> 00:00:04,980
hello everyone and welcome to handmade

2
00:00:01,860 --> 00:00:06,690
hero this is the show where we code a

3
00:00:04,980 --> 00:00:10,859
complete game live on stream although

4
00:00:06,690 --> 00:00:12,990
today what we're actually coding is the

5
00:00:10,859 --> 00:00:14,759
thing that will produce font bitmaps for

6
00:00:12,990 --> 00:00:19,350
our game so technically it's not in the

7
00:00:14,759 --> 00:00:21,210
game it's little offline utility to

8
00:00:19,350 --> 00:00:24,810
shove fonts into bitmaps so that we

9
00:00:21,210 --> 00:00:25,679
don't have to do it ourselves I mean I

10
00:00:24,809 --> 00:00:26,820
guess technically we're doing it

11
00:00:25,679 --> 00:00:29,849
ourselves because we're writing the

12
00:00:26,820 --> 00:00:32,609
utility but you get the idea so the the

13
00:00:29,849 --> 00:00:35,399
point here is pretty basic it's just to

14
00:00:32,609 --> 00:00:37,469
say that look we need fonts in the game

15
00:00:35,399 --> 00:00:39,689
we want to be able to have those fonts

16
00:00:37,469 --> 00:00:42,030
edited in a normal font editing package

17
00:00:39,689 --> 00:00:44,250
so that either we can just take free

18
00:00:42,030 --> 00:00:46,980
fonts that we want or purchase a font

19
00:00:44,250 --> 00:00:49,469
from a font foundry that's been made by

20
00:00:46,979 --> 00:00:51,328
a professional font designer and then

21
00:00:49,469 --> 00:00:55,890
turn it into art assets we can use in

22
00:00:51,329 --> 00:00:58,198
the game or we would like to be able to

23
00:00:55,890 --> 00:01:02,100
make our own fonts in a font creation

24
00:00:58,198 --> 00:01:05,009
utility but either or we want to

25
00:01:02,100 --> 00:01:06,478
leverage that existing technology and

26
00:01:05,010 --> 00:01:08,579
not have to make like our own font

27
00:01:06,478 --> 00:01:11,640
editors or force our artists to create

28
00:01:08,579 --> 00:01:13,349
some heinous list of font text markup

29
00:01:11,640 --> 00:01:15,450
something for kerning who knows what

30
00:01:13,349 --> 00:01:17,489
right we want to use the existing tools

31
00:01:15,450 --> 00:01:21,240
so what we need to be able to do is take

32
00:01:17,489 --> 00:01:23,129
a TTF file or an O TF file and turn it

33
00:01:21,239 --> 00:01:25,259
into a series of bitmaps automatically

34
00:01:23,129 --> 00:01:27,780
and remember all the kerning information

35
00:01:25,259 --> 00:01:30,030
that goes with it so the goal of this

36
00:01:27,780 --> 00:01:33,750
font utility is just to take that

37
00:01:30,030 --> 00:01:36,060
information dump it out so that it can

38
00:01:33,750 --> 00:01:38,700
then be loaded on demand as any other

39
00:01:36,060 --> 00:01:40,680
art asset would and packed into hh8

40
00:01:38,700 --> 00:01:46,680
files as necessary as any other art

41
00:01:40,680 --> 00:01:49,200
asset would and that is our goal so if

42
00:01:46,680 --> 00:01:50,640
we go ahead and load up where we were

43
00:01:49,200 --> 00:01:53,159
because we actually did a bunch of this

44
00:01:50,640 --> 00:01:54,899
work last weekend I think we took a day

45
00:01:53,159 --> 00:01:56,880
to do it or two days to do it I remember

46
00:01:54,899 --> 00:01:59,399
how long we've worked on this it was

47
00:01:56,879 --> 00:02:01,228
either one or two days but point being

48
00:01:59,399 --> 00:02:02,790
if we go look at where we were at I

49
00:02:01,228 --> 00:02:06,420
think we got right to the point where

50
00:02:02,790 --> 00:02:09,659
we're just sort of did the flow of the

51
00:02:06,420 --> 00:02:11,489
code and you can see this utility here

52
00:02:09,659 --> 00:02:13,979
it's pretty tiny right and then probably

53
00:02:11,489 --> 00:02:15,300
I'm hoping it won't be too bad

54
00:02:13,979 --> 00:02:18,628
because there's not that much stuff that

55
00:02:15,300 --> 00:02:19,890
it needs to do but if you run it on the

56
00:02:18,628 --> 00:02:22,049
command line you can see that we've

57
00:02:19,889 --> 00:02:24,659
we've gotten the basics started it it

58
00:02:22,050 --> 00:02:27,900
lists how it's used you run the HH font

59
00:02:24,659 --> 00:02:30,539
utility and then you say which TTF file

60
00:02:27,900 --> 00:02:32,340
you want what the font name was inside

61
00:02:30,539 --> 00:02:33,719
that TTF file because I think TDF files

62
00:02:32,340 --> 00:02:36,360
can can even potentially hold more than

63
00:02:33,719 --> 00:02:39,419
one but either way we kind of have to do

64
00:02:36,360 --> 00:02:40,950
that because windows doesn't really let

65
00:02:39,419 --> 00:02:43,229
us figure out what the fonts are and at

66
00:02:40,949 --> 00:02:45,479
ETF I don't think we have to basically

67
00:02:43,229 --> 00:02:48,689
say load this TTFN and then query a font

68
00:02:45,479 --> 00:02:50,879
by name out of the system we can then go

69
00:02:48,689 --> 00:02:52,560
to the next frame which is pixel height

70
00:02:50,879 --> 00:02:56,519
which says okay how big did you want to

71
00:02:52,560 --> 00:02:58,379
generate this font because obviously TTF

72
00:02:56,519 --> 00:03:00,780
file store vector fonts so they're not

73
00:02:58,379 --> 00:03:02,759
at a particular pixel height most of the

74
00:03:00,780 --> 00:03:05,939
time right you can't store bitmap fonts

75
00:03:02,759 --> 00:03:08,129
but nobody does anymore and then finally

76
00:03:05,939 --> 00:03:10,289
we have the care set and that's just a

77
00:03:08,129 --> 00:03:13,259
thing that we have defined ourselves and

78
00:03:10,289 --> 00:03:15,328
what that is is that's a keyword and you

79
00:03:13,259 --> 00:03:18,000
can see it listed here test is the one

80
00:03:15,329 --> 00:03:20,519
we have defined so far and what that is

81
00:03:18,000 --> 00:03:23,699
is says which characters to extract out

82
00:03:20,519 --> 00:03:27,239
of the font because remember depending

83
00:03:23,699 --> 00:03:30,659
on who's using this and we're let's say

84
00:03:27,239 --> 00:03:33,599
that a Chinese person wants to extract a

85
00:03:30,659 --> 00:03:36,870
font for Cantonese or Mandarin or

86
00:03:33,599 --> 00:03:38,729
something right or I don't know maybe

87
00:03:36,870 --> 00:03:41,430
simplified Chinese is the thing that

88
00:03:38,729 --> 00:03:43,048
everyone standardized on now right but

89
00:03:41,430 --> 00:03:44,150
point being they want to extract those

90
00:03:43,049 --> 00:03:46,650
glyphs

91
00:03:44,150 --> 00:03:48,030
now those glyphs are a different set of

92
00:03:46,650 --> 00:03:49,969
code points than the glyphs you would

93
00:03:48,030 --> 00:03:52,919
extract if you were say German and

94
00:03:49,969 --> 00:03:57,659
wanted all of the German glyphs out of a

95
00:03:52,919 --> 00:03:59,608
font right and those would be you know

96
00:03:57,659 --> 00:04:02,068
the standard characters that we use in

97
00:03:59,609 --> 00:04:03,540
English and then also some of the you

98
00:04:02,068 --> 00:04:05,009
know diacritical marks and things that

99
00:04:03,539 --> 00:04:06,539
are you know accents and things like

100
00:04:05,009 --> 00:04:11,310
that that German has that we don't for

101
00:04:06,539 --> 00:04:14,098
example in English so you need a way of

102
00:04:11,310 --> 00:04:16,500
extending the font utility to say what

103
00:04:14,098 --> 00:04:20,488
ranges from a font you want to extract

104
00:04:16,500 --> 00:04:22,019
and that's what that keyword does at the

105
00:04:20,488 --> 00:04:23,189
start we're just gonna support English

106
00:04:22,019 --> 00:04:25,168
because that's the only language I

107
00:04:23,189 --> 00:04:26,069
really know my Japanese is terrible

108
00:04:25,168 --> 00:04:29,339
and my French

109
00:04:26,069 --> 00:04:32,759
is you know also terrible probably not

110
00:04:29,339 --> 00:04:34,889
as terrible as my Japanese and so I'm

111
00:04:32,759 --> 00:04:37,170
not gonna try to do any foreign language

112
00:04:34,889 --> 00:04:38,610
support beyond simply making sure there

113
00:04:37,170 --> 00:04:41,610
are font system supports for people who

114
00:04:38,610 --> 00:04:43,020
do want to do it and then we can you

115
00:04:41,610 --> 00:04:45,360
know move on from there knowing that

116
00:04:43,019 --> 00:04:47,189
when the time comes if we want to

117
00:04:45,360 --> 00:04:49,259
localize handmade hero into some other

118
00:04:47,189 --> 00:04:51,300
language we haven't shot ourselves in

119
00:04:49,259 --> 00:04:54,269
the foot by hard coding our entire

120
00:04:51,300 --> 00:04:56,520
system to only extract one language as

121
00:04:54,269 --> 00:04:59,339
fonts whichever whatever those you know

122
00:04:56,519 --> 00:05:01,199
might be so that's the goal there is to

123
00:04:59,339 --> 00:05:04,199
make it extensible so that as you want

124
00:05:01,199 --> 00:05:07,019
to localize things from country to

125
00:05:04,199 --> 00:05:08,420
country you can easily extend the set of

126
00:05:07,019 --> 00:05:10,469
glyphs that are extracted from a font

127
00:05:08,420 --> 00:05:12,960
pretty trivially so that's what we're

128
00:05:10,470 --> 00:05:15,240
trying to do here and furthermore we can

129
00:05:12,959 --> 00:05:16,859
use different fonts so you know it's

130
00:05:15,240 --> 00:05:18,420
highly likely that the font that we use

131
00:05:16,860 --> 00:05:19,650
for English language wouldn't

132
00:05:18,420 --> 00:05:21,060
necessarily be the same font that we

133
00:05:19,649 --> 00:05:23,549
might want to use for Japanese language

134
00:05:21,060 --> 00:05:26,280
and so on because we probably will find

135
00:05:23,550 --> 00:05:27,870
you know certain fonts are better for

136
00:05:26,279 --> 00:05:29,819
certain languages because the person who

137
00:05:27,870 --> 00:05:31,649
made that font was make was targeting a

138
00:05:29,819 --> 00:05:33,269
particular language for it right and

139
00:05:31,649 --> 00:05:35,399
this is especially true of other things

140
00:05:33,269 --> 00:05:38,159
you know I mean most fonts for example

141
00:05:35,399 --> 00:05:40,469
that are made to be english-language

142
00:05:38,160 --> 00:05:43,439
fonts probably don't have any glyphs at

143
00:05:40,470 --> 00:05:45,750
all for Thailand you know for Thai

144
00:05:43,439 --> 00:05:50,389
language or you know like let's say

145
00:05:45,750 --> 00:05:52,350
glyphs for Vietnamese or Korean right

146
00:05:50,389 --> 00:05:54,419
they're not going to go out of their way

147
00:05:52,350 --> 00:05:55,439
to create characters for languages that

148
00:05:54,420 --> 00:05:57,120
they weren't targeting cuz they probably

149
00:05:55,439 --> 00:05:58,560
don't even know how to read those

150
00:05:57,120 --> 00:06:01,199
languages or what would make a good font

151
00:05:58,560 --> 00:06:03,899
so you probably have to pick different

152
00:06:01,199 --> 00:06:07,019
fonts for different languages if you

153
00:06:03,899 --> 00:06:08,669
want high quality glyphs there are some

154
00:06:07,019 --> 00:06:11,339
fonts out there that are designed to

155
00:06:08,670 --> 00:06:12,900
support all languages but those might

156
00:06:11,339 --> 00:06:15,560
not be the style that you want right so

157
00:06:12,899 --> 00:06:17,639
you kind of need to be able to go and

158
00:06:15,560 --> 00:06:19,530
pick different fonts for different

159
00:06:17,639 --> 00:06:21,539
languages and you don't want your system

160
00:06:19,529 --> 00:06:24,509
you can strain such that it has to use

161
00:06:21,540 --> 00:06:26,220
just one font and that has to cover all

162
00:06:24,509 --> 00:06:29,399
the languages because that may limit

163
00:06:26,220 --> 00:06:31,350
your options for creating richly styled

164
00:06:29,399 --> 00:06:33,599
fonts in various languages or you know

165
00:06:31,350 --> 00:06:35,430
the people who try to read you know your

166
00:06:33,600 --> 00:06:37,950
game in Farsi or something or like this

167
00:06:35,430 --> 00:06:39,300
font looks terrible and you'd want to be

168
00:06:37,949 --> 00:06:39,668
able to fix that but you can't because

169
00:06:39,300 --> 00:06:42,310
you

170
00:06:39,668 --> 00:06:43,959
only use one language one font for all

171
00:06:42,310 --> 00:06:45,579
languages so you got to keep it to like

172
00:06:43,959 --> 00:06:48,638
the few fonts actually support them all

173
00:06:45,579 --> 00:06:51,758
at Sarah Ted etc right so the goal here

174
00:06:48,639 --> 00:06:53,918
is to allow that to be flexible so that

175
00:06:51,759 --> 00:06:56,319
basically as we want to localize the

176
00:06:53,918 --> 00:06:58,508
game should that occur we can make

177
00:06:56,319 --> 00:07:00,430
intelligent decisions based on feedback

178
00:06:58,509 --> 00:07:02,949
from people who are actually native

179
00:07:00,430 --> 00:07:04,418
speakers to that language and if they

180
00:07:02,949 --> 00:07:06,430
say you know this font looks a lot

181
00:07:04,418 --> 00:07:08,258
better we can use that font for their

182
00:07:06,430 --> 00:07:10,180
language and some other font for someone

183
00:07:08,259 --> 00:07:12,158
else's language without having to make

184
00:07:10,180 --> 00:07:13,658
that trade-off of well it gets worse for

185
00:07:12,158 --> 00:07:18,668
one better for the other bla bla bla

186
00:07:13,658 --> 00:07:20,680
right so that's the idea there and let's

187
00:07:18,668 --> 00:07:21,698
go ahead and see where we're at so if

188
00:07:20,680 --> 00:07:23,319
you look at what's going on in this

189
00:07:21,699 --> 00:07:27,158
utility what's happening is when you

190
00:07:23,319 --> 00:07:30,370
pass all those things we first run that

191
00:07:27,158 --> 00:07:32,740
care set like we made it easy to add

192
00:07:30,370 --> 00:07:34,528
those care sets we run those that care

193
00:07:32,740 --> 00:07:37,838
set code which basically says look

194
00:07:34,528 --> 00:07:39,310
putting these ranges of characters you

195
00:07:37,838 --> 00:07:42,569
can see here we include the space

196
00:07:39,310 --> 00:07:46,718
character we include the full set of

197
00:07:42,569 --> 00:07:49,180
typical ASCII right and then we also

198
00:07:46,718 --> 00:07:51,370
added some special code points these

199
00:07:49,180 --> 00:07:53,860
code points are for the kanji characters

200
00:07:51,370 --> 00:07:56,949
for owl and that was just testing to

201
00:07:53,860 --> 00:07:59,649
make sure that we could handle high like

202
00:07:56,949 --> 00:08:01,509
16-bit UTF you can see these are these

203
00:07:59,649 --> 00:08:04,870
are values that require the full 16-bit

204
00:08:01,509 --> 00:08:07,750
range of utf-16 so we want to make sure

205
00:08:04,870 --> 00:08:09,278
that we could actually call some 16-bit

206
00:08:07,750 --> 00:08:10,990
characters out of Windows and get them

207
00:08:09,278 --> 00:08:12,819
obviously we can't use anything higher

208
00:08:10,990 --> 00:08:14,860
than utf-16 because Windows doesn't

209
00:08:12,819 --> 00:08:16,750
support it although Windows 10 might

210
00:08:14,860 --> 00:08:19,088
start supporting it soon I don't really

211
00:08:16,750 --> 00:08:20,829
know but anyway to be able to extract

212
00:08:19,088 --> 00:08:25,478
those fonts out that's what we were

213
00:08:20,829 --> 00:08:26,829
trying to do there getting that done was

214
00:08:25,478 --> 00:08:29,769
just a test to make sure our system

215
00:08:26,829 --> 00:08:33,549
worked for those fonts so this will

216
00:08:29,769 --> 00:08:36,038
create a mask that says here all the

217
00:08:33,549 --> 00:08:37,629
glyphs you should export that then

218
00:08:36,038 --> 00:08:39,788
allows us to call our extract font

219
00:08:37,629 --> 00:08:42,250
routine and our extract font routine if

220
00:08:39,788 --> 00:08:46,389
you look at it here goes through each

221
00:08:42,250 --> 00:08:48,610
individual group Jimmy goes through each

222
00:08:46,389 --> 00:08:51,250
individual glyph and tries to extract it

223
00:08:48,610 --> 00:08:52,778
now what we haven't done yet is actually

224
00:08:51,250 --> 00:08:53,559
do anything with this data so you can

225
00:08:52,778 --> 00:08:55,688
see right

226
00:08:53,559 --> 00:08:58,688
we've done a load with bitmap that

227
00:08:55,688 --> 00:09:02,588
actually rasterized the font we have the

228
00:08:58,688 --> 00:09:05,349
font ready in thought bits to export we

229
00:09:02,589 --> 00:09:07,389
also have filled out our entire

230
00:09:05,350 --> 00:09:10,808
horizontal advance table by the time we

231
00:09:07,389 --> 00:09:14,558
get to into here so technically when I

232
00:09:10,808 --> 00:09:17,039
do this if I was to run this and say hey

233
00:09:14,558 --> 00:09:19,299
and I think we had a thing down here

234
00:09:17,039 --> 00:09:23,019
that actually sort of gave an example

235
00:09:19,299 --> 00:09:25,120
command line so if I was to actually do

236
00:09:23,019 --> 00:09:26,259
you know let me let me extract I don't

237
00:09:25,120 --> 00:09:30,159
actually know what works dragons

238
00:09:26,259 --> 00:09:32,379
liberation mono I don't know so if I was

239
00:09:30,159 --> 00:09:35,769
to actually follow the instructions here

240
00:09:32,379 --> 00:09:40,539
and actually supply you know one of

241
00:09:35,769 --> 00:09:42,639
these things here that in theory should

242
00:09:40,539 --> 00:09:45,248
actually do the full flaunt extraction

243
00:09:42,639 --> 00:09:45,610
so in theory this is actually doing it

244
00:09:45,249 --> 00:09:48,519
now

245
00:09:45,610 --> 00:09:52,149
so all we need to now add to our system

246
00:09:48,519 --> 00:09:53,649
is actually export the data now the

247
00:09:52,149 --> 00:09:56,589
easiest thing for us to do would be to

248
00:09:53,649 --> 00:09:58,750
steal the bitmap writing code right out

249
00:09:56,589 --> 00:10:00,459
bitmaps and then just have a thing that

250
00:09:58,750 --> 00:10:02,589
writes out the HHA that corresponds to

251
00:10:00,458 --> 00:10:04,958
those bitmaps we're gonna start with

252
00:10:02,589 --> 00:10:07,420
that I don't want to leave it that way

253
00:10:04,958 --> 00:10:08,679
and if I get that all done today and it

254
00:10:07,419 --> 00:10:12,219
seems to be working then what we'll do

255
00:10:08,679 --> 00:10:13,659
is tomorrow we'll start on PNG export

256
00:10:12,220 --> 00:10:16,269
because I'd like to do is just keep

257
00:10:13,659 --> 00:10:17,740
these all in p.m. geez so if the game

258
00:10:16,269 --> 00:10:20,198
doesn't have to have to export past one

259
00:10:17,740 --> 00:10:22,058
for BMP one for PNG right so I'd like

260
00:10:20,198 --> 00:10:24,969
our utility to export pngs

261
00:10:22,058 --> 00:10:28,299
not BMPs we don't have to compress them

262
00:10:24,970 --> 00:10:30,639
we can leave them uncompressed but we

263
00:10:28,299 --> 00:10:33,039
should write them out so if you look

264
00:10:30,639 --> 00:10:35,500
here you can see the extraction it says

265
00:10:33,039 --> 00:10:37,360
I'm gonna start 200 glyphs the largest

266
00:10:35,500 --> 00:10:40,089
code point is 3 to 820 that's gonna

267
00:10:37,360 --> 00:10:44,829
correspond to like probably this one

268
00:10:40,089 --> 00:10:47,079
here right a t-33 there uh so you know

269
00:10:44,828 --> 00:10:48,909
but make of that what you will

270
00:10:47,078 --> 00:10:50,859
in theory that actually did all the

271
00:10:48,909 --> 00:10:53,980
extractions but we never actually wrote

272
00:10:50,860 --> 00:10:56,649
them anywhere and so that's kind of

273
00:10:53,980 --> 00:11:00,389
where we're at now so let's start by

274
00:10:56,649 --> 00:11:03,578
trying to dump these bitmaps somewhere

275
00:11:00,389 --> 00:11:05,049
what I'd like to do is expand you know I

276
00:11:03,578 --> 00:11:07,029
know it's already kind of way too many

277
00:11:05,049 --> 00:11:08,799
character way too many pram

278
00:11:07,029 --> 00:11:10,659
this thing but hey that's just how it

279
00:11:08,799 --> 00:11:12,669
goes sometimes what I'd like to do is

280
00:11:10,659 --> 00:11:15,549
create two more pieces of information

281
00:11:12,669 --> 00:11:18,240
that go along with this I'd like to say

282
00:11:15,549 --> 00:11:21,219
I want to know where to write the output

283
00:11:18,240 --> 00:11:23,980
so you know a desk

284
00:11:21,220 --> 00:11:26,889
HHA file I'm sorry I know that's a trade

285
00:11:23,980 --> 00:11:31,779
a file I just hht files so like what tag

286
00:11:26,889 --> 00:11:33,460
file you want it to write out and then

287
00:11:31,779 --> 00:11:35,769
like what directory do you want to dump

288
00:11:33,460 --> 00:11:37,990
the pings you know what I mean so this

289
00:11:35,769 --> 00:11:42,990
way in here I can say give me all of

290
00:11:37,990 --> 00:11:45,970
that so I want to know two things here

291
00:11:42,990 --> 00:11:50,019
from five and six I want to know the

292
00:11:45,970 --> 00:11:53,889
like hht a file name and I want to know

293
00:11:50,019 --> 00:11:56,139
the PNG der name and right now we will

294
00:11:53,889 --> 00:11:58,409
be writing out not pansies but actually

295
00:11:56,139 --> 00:12:00,789
bitmaps but we'll change the p.m. geez

296
00:11:58,409 --> 00:12:04,000
when we when we have a chance to finish

297
00:12:00,789 --> 00:12:07,449
to do that code so if we call extract

298
00:12:04,000 --> 00:12:12,159
font here this is going to need to to

299
00:12:07,450 --> 00:12:15,370
take care of that I might save the

300
00:12:12,159 --> 00:12:18,909
opening and writing of that hht perhaps

301
00:12:15,370 --> 00:12:22,690
two out here so maybe we'll first try to

302
00:12:18,909 --> 00:12:26,769
ensure that we can actually get it so if

303
00:12:22,690 --> 00:12:31,720
I was to say like H of T file equals F

304
00:12:26,769 --> 00:12:33,699
open and in Cure I'd say that I wanted

305
00:12:31,720 --> 00:12:35,290
to do a binary write of this file

306
00:12:33,700 --> 00:12:38,050
not technically we're actually writing

307
00:12:35,289 --> 00:12:39,789
it in text but I hate the text mode in

308
00:12:38,049 --> 00:12:42,759
the C runtime library so I just never

309
00:12:39,789 --> 00:12:44,919
open things in text mode so what I want

310
00:12:42,759 --> 00:12:46,929
to do here is say look give me the hht

311
00:12:44,919 --> 00:12:49,089
file names file there we're gonna F oh

312
00:12:46,929 --> 00:12:50,679
that's not what I wanted we're gonna

313
00:12:49,090 --> 00:12:52,960
open that up

314
00:12:50,679 --> 00:12:58,839
assuming that we could get it then we'll

315
00:12:52,960 --> 00:13:00,100
just pass just the handle two to this so

316
00:12:58,840 --> 00:13:01,810
that instead of passing the filename

317
00:13:00,100 --> 00:13:04,450
will actually just pass a file that's

318
00:13:01,809 --> 00:13:05,709
ready to be written to I just like

319
00:13:04,450 --> 00:13:08,020
handling that outside a little bit

320
00:13:05,710 --> 00:13:09,790
better and then finally we'll pass that

321
00:13:08,019 --> 00:13:11,409
PMG dur name so we will pass that

322
00:13:09,789 --> 00:13:13,809
because it's gonna have to generate file

323
00:13:11,409 --> 00:13:18,459
names in there continuously one for each

324
00:13:13,809 --> 00:13:19,750
bitmap as it goes so I need to print out

325
00:13:18,460 --> 00:13:20,528
an error because we may not be able to

326
00:13:19,750 --> 00:13:22,749
open that file

327
00:13:20,528 --> 00:13:30,058
so I need to be able to do like error

328
00:13:22,749 --> 00:13:34,689
unable to open hht file this for writing

329
00:13:30,058 --> 00:13:36,908
and so agency file name and that just

330
00:13:34,688 --> 00:13:38,528
lets the user know if there was some

331
00:13:36,908 --> 00:13:41,349
problem with writing to the place they

332
00:13:38,528 --> 00:13:43,239
told us to write the hht and then i

333
00:13:41,349 --> 00:13:44,739
could go up here and inside the

334
00:13:43,239 --> 00:13:46,989
extraction code that's trying to

335
00:13:44,739 --> 00:13:48,908
actually strike this font I can have the

336
00:13:46,989 --> 00:13:50,908
hht out

337
00:13:48,908 --> 00:13:55,538
so that'll have to be how that's written

338
00:13:50,908 --> 00:13:59,558
and the PNG der write where that's going

339
00:13:55,538 --> 00:14:00,489
to be now we don't really need to close

340
00:13:59,558 --> 00:14:02,588
this file because it get closed

341
00:14:00,489 --> 00:14:04,298
automatically but you know I'd like to

342
00:14:02,589 --> 00:14:06,399
just keep it clear what's happening here

343
00:14:04,298 --> 00:14:09,278
so I'm gonna go ahead and do an F close

344
00:14:06,399 --> 00:14:10,928
on this just for good measure again

345
00:14:09,278 --> 00:14:14,048
don't really need to do that technically

346
00:14:10,928 --> 00:14:15,999
but we should i and just to make sure

347
00:14:14,048 --> 00:14:17,379
it's flushed right I mean now I don't

348
00:14:15,999 --> 00:14:18,879
really know what the rules are I don't

349
00:14:17,379 --> 00:14:21,759
know if it auto flushes streams when you

350
00:14:18,879 --> 00:14:25,239
when you close but you know just in case

351
00:14:21,759 --> 00:14:26,678
it doesn't so now coming through here

352
00:14:25,239 --> 00:14:31,269
this is where we want to start doing

353
00:14:26,678 --> 00:14:32,948
that work and so we need to start naming

354
00:14:31,269 --> 00:14:35,438
these and I think what we want to do

355
00:14:32,948 --> 00:14:37,478
primarily is just give them names that

356
00:14:35,438 --> 00:14:40,028
probably are associated with the font I

357
00:14:37,479 --> 00:14:45,158
would guess and so if you look in here

358
00:14:40,028 --> 00:14:47,499
you know you can you can imagine some

359
00:14:45,158 --> 00:14:49,448
ways we could name it I'm guessing what

360
00:14:47,499 --> 00:14:52,479
we should probably do is use the stem

361
00:14:49,448 --> 00:14:56,288
name from the TTFN so maybe like just

362
00:14:52,479 --> 00:14:57,399
this like this part of the name we could

363
00:14:56,288 --> 00:14:59,038
use this part of the name but the

364
00:14:57,399 --> 00:15:04,629
problem is that might have spaces in it

365
00:14:59,038 --> 00:15:07,708
now we could sort of we could get around

366
00:15:04,629 --> 00:15:11,109
that by replacing those with underscores

367
00:15:07,708 --> 00:15:16,888
that seems probably more reasonable so

368
00:15:11,109 --> 00:15:20,259
maybe after we actually create that font

369
00:15:16,889 --> 00:15:24,899
maybe that's how we want to do it that

370
00:15:20,259 --> 00:15:24,899
seems kind of reasonable to me

371
00:15:28,289 --> 00:15:35,519
I think that's probably how it should go

372
00:15:32,479 --> 00:15:38,040
so coming up here if you imagine how we

373
00:15:35,519 --> 00:15:40,470
would do that once we enter enter here

374
00:15:38,039 --> 00:15:42,448
we have the font name and what we would

375
00:15:40,470 --> 00:15:45,479
like to do is create sort of like a font

376
00:15:42,448 --> 00:15:49,019
stem name there or I don't know how you

377
00:15:45,479 --> 00:15:56,038
want to phrase that exactly but I would

378
00:15:49,019 --> 00:15:58,558
like to be able to create something like

379
00:15:56,038 --> 00:16:00,389
this named stem so all I'm gonna do is

380
00:15:58,558 --> 00:16:03,808
I'm just gonna create a buffer that

381
00:16:00,389 --> 00:16:06,418
happens to be the same length as the

382
00:16:03,808 --> 00:16:10,818
font name itself and then what I'm gonna

383
00:16:06,418 --> 00:16:10,818
do is I'm gonna force that to be like

384
00:16:11,749 --> 00:16:17,100
something that doesn't have any spaces

385
00:16:13,769 --> 00:16:19,198
or anything else in it at all right

386
00:16:17,100 --> 00:16:22,379
and so what I want to do is say take the

387
00:16:19,198 --> 00:16:25,558
font name and like pass it through to

388
00:16:22,379 --> 00:16:29,519
the name stem here so that we know that

389
00:16:25,558 --> 00:16:31,889
you know it's it's all it's all cool so

390
00:16:29,519 --> 00:16:37,139
let's just do something real quick here

391
00:16:31,889 --> 00:16:42,600
where we say you know source best and

392
00:16:37,139 --> 00:16:51,659
all I want to do is just say well I

393
00:16:42,600 --> 00:16:54,720
guess I can even do it this way yeah I

394
00:16:51,659 --> 00:16:58,730
guess I'll just do it this way I guess

395
00:16:54,720 --> 00:17:02,038
I'll just say look while the source

396
00:16:58,730 --> 00:17:07,078
equals something we'll just copy it

397
00:17:02,038 --> 00:17:09,359
right now I don't quite want to do it

398
00:17:07,078 --> 00:17:12,119
exactly that way because I need I'm

399
00:17:09,359 --> 00:17:14,278
gonna need to be able to check in here I

400
00:17:12,119 --> 00:17:15,658
would like to make sure that we copy the

401
00:17:14,278 --> 00:17:17,038
null terminator I mean one way I could

402
00:17:15,659 --> 00:17:19,379
do this and since I know it's null at

403
00:17:17,038 --> 00:17:21,119
that point I'll just write it but while

404
00:17:19,378 --> 00:17:25,078
we're doing this sanitize pass what I

405
00:17:21,119 --> 00:17:33,658
want to do here is say look if the

406
00:17:25,078 --> 00:17:35,119
destination is you know is how I want to

407
00:17:33,659 --> 00:17:37,880
put this

408
00:17:35,119 --> 00:17:39,798
I think okay so I think what I'd like to

409
00:17:37,880 --> 00:17:41,419
do is let's just convert it to lowercase

410
00:17:39,798 --> 00:17:43,339
first right

411
00:17:41,419 --> 00:17:47,500
so we'll we'll make sure it's lowercase

412
00:17:43,339 --> 00:17:52,369
and then if it's not in the range of

413
00:17:47,500 --> 00:17:55,130
like things we accept so meaning if you

414
00:17:52,369 --> 00:18:03,019
know star dest is greater than or equal

415
00:17:55,130 --> 00:18:06,409
to a or I should say and Stardust is

416
00:18:03,019 --> 00:18:11,028
less than or equal to Z right so if it's

417
00:18:06,409 --> 00:18:14,390
within the range here and you know what

418
00:18:11,028 --> 00:18:22,159
let's even do this a little bit a little

419
00:18:14,390 --> 00:18:23,809
bit squink here what if we do this so

420
00:18:22,159 --> 00:18:25,909
what I'm going to do is say all right if

421
00:18:23,808 --> 00:18:33,129
you're within the range of characters

422
00:18:25,909 --> 00:18:33,130
that I accept so if you're like this or

423
00:18:34,990 --> 00:18:44,599
this then I will allow it if you're not

424
00:18:42,048 --> 00:18:46,548
and I don't know why I didn't just use

425
00:18:44,599 --> 00:18:49,548
the character that I extracted that's

426
00:18:46,548 --> 00:18:52,339
what I wanted so if you're in the range

427
00:18:49,548 --> 00:18:54,408
of characters that I accept then we will

428
00:18:52,339 --> 00:18:57,139
use you directly otherwise we will stick

429
00:18:54,409 --> 00:18:59,480
an underscore in there and that way we

430
00:18:57,140 --> 00:19:02,538
have a name that we know is kind of

431
00:18:59,480 --> 00:19:04,610
completely without weird stuff for

432
00:19:02,538 --> 00:19:06,619
spaces or anything so it just gets

433
00:19:04,609 --> 00:19:08,148
cleaned up and that way all the names

434
00:19:06,619 --> 00:19:11,629
are our bitmaps don't have like weird

435
00:19:08,148 --> 00:19:13,639
garbage in them or whatever so what I'd

436
00:19:11,630 --> 00:19:16,850
like to do now is just say all right

437
00:19:13,640 --> 00:19:19,009
let's say we sanitize that name now what

438
00:19:16,849 --> 00:19:23,629
we can do is produce bitmap names on

439
00:19:19,009 --> 00:19:26,808
demand we know like roughly how big we

440
00:19:23,630 --> 00:19:29,350
need that to be meaning we know that

441
00:19:26,808 --> 00:19:34,099
we're just gonna use the sanitized name

442
00:19:29,349 --> 00:19:37,129
plus the PNG destr plus you know like

443
00:19:34,099 --> 00:19:39,278
the code point number and so on right so

444
00:19:37,130 --> 00:19:42,230
we know how big this thing needs to be

445
00:19:39,278 --> 00:19:45,048
in order to make a buffer that can hold

446
00:19:42,230 --> 00:19:48,980
our file names so you know we know that

447
00:19:45,048 --> 00:19:51,710
we need some some size here

448
00:19:48,980 --> 00:19:57,500
that's going to be the size of the name

449
00:19:51,710 --> 00:20:01,340
stem plus the size of the PNG destr

450
00:19:57,500 --> 00:20:03,980
right plus we're gonna need a slash and

451
00:20:01,339 --> 00:20:06,169
we're gonna need dot PNG and we're gonna

452
00:20:03,980 --> 00:20:08,839
need all that stuff right so let's just

453
00:20:06,170 --> 00:20:10,670
give ourselves plenty of pad right

454
00:20:08,839 --> 00:20:12,919
there's no chance to exceed that so

455
00:20:10,670 --> 00:20:17,390
we're just good to go now anytime we

456
00:20:12,920 --> 00:20:21,259
want we can just say fine let's sprint F

457
00:20:17,390 --> 00:20:23,750
into the PNG out name what our name

458
00:20:21,259 --> 00:20:27,859
would be and we know that it will look

459
00:20:23,750 --> 00:20:30,710
like this right it'll be % s % u dot PNG

460
00:20:27,859 --> 00:20:32,959
right and we may want to do this into

461
00:20:30,710 --> 00:20:36,019
two buffers because we may well I guess

462
00:20:32,960 --> 00:20:38,500
we can just use an address for this so I

463
00:20:36,019 --> 00:20:40,879
guess we don't really need to do that so

464
00:20:38,500 --> 00:20:42,980
we'll get to that in a second but so if

465
00:20:40,880 --> 00:20:46,700
we do the PNG out name here what we want

466
00:20:42,980 --> 00:20:49,549
to do is just say okay we'll do the PNG

467
00:20:46,700 --> 00:20:53,930
out name we'll create that by saying

468
00:20:49,549 --> 00:20:56,629
whatever the whatever the dester is we

469
00:20:53,930 --> 00:20:59,029
start with that we then go to the name

470
00:20:56,630 --> 00:21:00,170
stem which allows us to fill in you know

471
00:20:59,029 --> 00:21:02,990
what the start of the name should be

472
00:21:00,170 --> 00:21:07,880
then we would have the code point and

473
00:21:02,990 --> 00:21:10,549
off we would go right now if we want

474
00:21:07,880 --> 00:21:13,400
this to be padded we could also say that

475
00:21:10,549 --> 00:21:15,589
which probably makes sense so maybe

476
00:21:13,400 --> 00:21:18,110
we'll just leave it that way this is

477
00:21:15,589 --> 00:21:20,779
going to be per glyph so here's us going

478
00:21:18,109 --> 00:21:23,000
through each individual glyph to write

479
00:21:20,779 --> 00:21:25,789
it out so once we get that code point

480
00:21:23,000 --> 00:21:29,720
out this would be what would create the

481
00:21:25,789 --> 00:21:33,289
actual name here furthermore I think we

482
00:21:29,720 --> 00:21:36,769
probably also want to do like a PNG stem

483
00:21:33,289 --> 00:21:38,809
the PNG stem actually is just the length

484
00:21:36,769 --> 00:21:40,819
of this thing right

485
00:21:38,809 --> 00:21:44,029
so whatever PNG out name is it's just

486
00:21:40,819 --> 00:21:46,849
the length of can G destr plus 1 because

487
00:21:44,029 --> 00:21:48,940
you're gonna skip that that slash so we

488
00:21:46,849 --> 00:21:52,490
probably could just do this as well

489
00:21:48,940 --> 00:21:57,340
right so here we just say this is the

490
00:21:52,490 --> 00:21:57,339
part that's like not the derp right

491
00:21:57,480 --> 00:22:01,630
maybe that and we're gonna need that for

492
00:22:01,000 --> 00:22:04,690
writing to our

493
00:22:01,630 --> 00:22:07,990
hht so what I want to do now is just

494
00:22:04,690 --> 00:22:09,970
start testing this out a little bit so

495
00:22:07,990 --> 00:22:12,549
what I'd like to do at first is let's

496
00:22:09,970 --> 00:22:14,799
just write out we know what this should

497
00:22:12,549 --> 00:22:18,339
look like right let's write out

498
00:22:14,799 --> 00:22:21,579
something that that is commensurate with

499
00:22:18,339 --> 00:22:24,399
how we have done our H HTS in the past

500
00:22:21,579 --> 00:22:28,000
so here's our tags files here's our H

501
00:22:24,400 --> 00:22:29,530
HTS right this is what they look like so

502
00:22:28,000 --> 00:22:32,440
what we need to be able to do here is

503
00:22:29,529 --> 00:22:34,420
just put all of our bitmaps in here so

504
00:22:32,440 --> 00:22:36,880
what we want to do is maybe call these

505
00:22:34,420 --> 00:22:38,140
glyphs so that the loader knows that

506
00:22:36,880 --> 00:22:41,350
they don't need to be marked up by

507
00:22:38,140 --> 00:22:45,090
anything so in here we would say okay

508
00:22:41,349 --> 00:22:50,250
you know we want to output a glyph and

509
00:22:45,089 --> 00:22:54,039
then we want to output that base name

510
00:22:50,250 --> 00:22:58,779
like so and so we're gonna print this

511
00:22:54,039 --> 00:23:03,970
out to a file it's gonna look something

512
00:22:58,779 --> 00:23:10,089
like that and this has to go to our hht

513
00:23:03,970 --> 00:23:15,039
file right sorry H of T out so I think

514
00:23:10,089 --> 00:23:18,189
that's correct there yep so we don't

515
00:23:15,039 --> 00:23:20,889
really need anything in the brackets so

516
00:23:18,190 --> 00:23:24,460
I think the glyphs can just literally be

517
00:23:20,890 --> 00:23:27,070
that so we just say glyph name and then

518
00:23:24,460 --> 00:23:32,710
nothing that lets it know that it's

519
00:23:27,069 --> 00:23:34,059
supposed to be imported probably I guess

520
00:23:32,710 --> 00:23:43,049
we may need something in here that says

521
00:23:34,059 --> 00:23:45,250
which code point it is I'm not sure

522
00:23:43,049 --> 00:23:48,700
let's just say that we have to do that

523
00:23:45,250 --> 00:23:52,240
so maybe we'll do glyph index equals %

524
00:23:48,700 --> 00:23:55,660
you and so in here we will we will put

525
00:23:52,240 --> 00:23:59,680
whatever that glyph index actually is so

526
00:23:55,660 --> 00:24:01,750
it basically just says hey this is for a

527
00:23:59,680 --> 00:24:05,799
particular font this is going to be this

528
00:24:01,750 --> 00:24:08,349
particular glyph index right and we also

529
00:24:05,799 --> 00:24:11,710
could associate this with a specific

530
00:24:08,349 --> 00:24:14,169
font I guess is another way to do it

531
00:24:11,710 --> 00:24:16,059
in fact we probably should do that so

532
00:24:14,170 --> 00:24:19,150
maybe we put the font name in here as

533
00:24:16,059 --> 00:24:22,059
well right just so we know what that

534
00:24:19,150 --> 00:24:23,980
font name actually is so that seems like

535
00:24:22,059 --> 00:24:27,250
another good thing to do so maybe in

536
00:24:23,980 --> 00:24:35,319
here we have like font or name stem

537
00:24:27,250 --> 00:24:37,329
right so that name stem right here gives

538
00:24:35,319 --> 00:24:42,750
us that information I think that would

539
00:24:37,329 --> 00:24:46,569
work so then what we can do is you know

540
00:24:42,750 --> 00:24:48,460
push all those glyphs in there and again

541
00:24:46,569 --> 00:24:50,200
I really don't know what the best way to

542
00:24:48,460 --> 00:24:53,819
do the packing for this is I mean

543
00:24:50,200 --> 00:24:53,819
there's another way we could do it you

544
00:24:55,500 --> 00:25:00,579
know maybe this is better see what you

545
00:24:58,180 --> 00:25:04,090
think of this so what if we said oh

546
00:25:00,579 --> 00:25:09,720
here's a font and we tell you what the

547
00:25:04,089 --> 00:25:21,429
font is right so we say it's this font

548
00:25:09,720 --> 00:25:28,180
oops then we say inside the font we list

549
00:25:21,430 --> 00:25:29,650
the glyphs you know I don't know if that

550
00:25:28,180 --> 00:25:32,310
makes more sense because they're so

551
00:25:29,650 --> 00:25:32,310
specialized

552
00:25:38,599 --> 00:25:50,319
and that would look like this and I

553
00:25:46,579 --> 00:25:57,859
really don't care what this is right now

554
00:25:50,319 --> 00:25:59,779
you know I think we can adjust this

555
00:25:57,859 --> 00:26:02,149
pretty easily once we go to do the

556
00:25:59,779 --> 00:26:04,730
reader for it so I'm just gonna do

557
00:26:02,150 --> 00:26:08,480
whatever here let's just say this will

558
00:26:04,730 --> 00:26:12,558
work so here's the glyph index there's

559
00:26:08,480 --> 00:26:14,329
the PNG file only bit right that just

560
00:26:12,558 --> 00:26:15,829
lifts all the glyphs and then we close

561
00:26:14,329 --> 00:26:21,288
it out and that's the end of the font

562
00:26:15,829 --> 00:26:23,928
right so that seems good to me and and

563
00:26:21,288 --> 00:26:28,400
then we can also if we want to we can

564
00:26:23,929 --> 00:26:33,288
put this in here like maybe when we

565
00:26:28,400 --> 00:26:34,909
start writing this thing out before you

566
00:26:33,288 --> 00:26:37,298
know when we actually create it here

567
00:26:34,909 --> 00:26:37,299
oops

568
00:26:38,480 --> 00:26:42,640
maybe we can do something where we just

569
00:26:40,099 --> 00:26:42,639
do

570
00:27:06,450 --> 00:27:13,720
so that'll just print a boilerplate in

571
00:27:09,130 --> 00:27:16,500
there and since we don't really know

572
00:27:13,720 --> 00:27:19,089
what the copyright of this would be I

573
00:27:16,500 --> 00:27:20,619
don't even know if anyone knows what the

574
00:27:19,089 --> 00:27:23,048
copyright of that would be that would be

575
00:27:20,619 --> 00:27:29,139
interesting cuz you can't copyright

576
00:27:23,048 --> 00:27:31,778
fonts so extracted fonts I don't think

577
00:27:29,140 --> 00:27:33,700
you could claim that you copyrighted it

578
00:27:31,778 --> 00:27:35,619
because you haven't done anything I mean

579
00:27:33,700 --> 00:27:36,639
so presumably it's still not copyrighted

580
00:27:35,619 --> 00:27:40,089
but I don't know

581
00:27:36,638 --> 00:27:49,509
so anyway point being this would just

582
00:27:40,089 --> 00:27:54,939
kind of you know put a header in there

583
00:27:49,509 --> 00:28:08,919
for us and off we would go

584
00:27:54,940 --> 00:28:11,639
and maybe we could even do this so what

585
00:28:08,919 --> 00:28:17,409
exactly was the name of this font again

586
00:28:11,638 --> 00:28:22,418
is that it's that Molly bean it's that

587
00:28:17,409 --> 00:28:27,490
Molly bean come on up come on up come on

588
00:28:22,419 --> 00:28:33,639
oh come on you can eat such a small jump

589
00:28:27,490 --> 00:28:37,630
there you go hello how's it going what's

590
00:28:33,638 --> 00:28:40,599
you up to huh did you come to help with

591
00:28:37,630 --> 00:28:44,860
the code are you gonna help with the

592
00:28:40,599 --> 00:28:48,069
code what do you think what do you think

593
00:28:44,859 --> 00:28:49,869
of this code do you think it sucks yeah

594
00:28:48,069 --> 00:28:53,319
you don't like it do you it's not good

595
00:28:49,869 --> 00:28:55,099
enough do you want to look out the

596
00:28:53,319 --> 00:29:00,099
window

597
00:28:55,099 --> 00:29:00,099
there you go you look out the window

598
00:29:05,769 --> 00:29:12,379
alright so the if you take a look on

599
00:29:10,819 --> 00:29:14,269
here right we're just basically saying

600
00:29:12,380 --> 00:29:16,880
let's go ahead and go you know what and

601
00:29:14,269 --> 00:29:19,549
this this can probably bacon the actual

602
00:29:16,880 --> 00:29:21,320
name as well so this would be our zero

603
00:29:19,549 --> 00:29:24,200
right that's the name of the actual

604
00:29:21,319 --> 00:29:26,689
program so as this goes through you know

605
00:29:24,200 --> 00:29:29,120
it should now write out like the data

606
00:29:26,690 --> 00:29:31,279
for the font and furthermore like in

607
00:29:29,119 --> 00:29:33,500
here as we're writing these glyphs out

608
00:29:31,279 --> 00:29:38,329
we're building up the horizontal advance

609
00:29:33,500 --> 00:29:41,089
table we can then dump that table when

610
00:29:38,329 --> 00:29:43,129
we get to the end so we should be able

611
00:29:41,089 --> 00:30:01,669
to say okay here's our horizontal

612
00:29:43,130 --> 00:30:07,330
advance table like so and this is just

613
00:30:01,670 --> 00:30:07,330
you know this would just go in and I

614
00:30:10,180 --> 00:30:15,680
guess it's what is it a squared table so

615
00:30:14,119 --> 00:30:21,559
we should be able to just write it out

616
00:30:15,680 --> 00:30:23,690
as one giant list right so yeah it's

617
00:30:21,559 --> 00:30:30,559
just glyph count cut so so you know I

618
00:30:23,690 --> 00:30:31,820
might store that so that we can just

619
00:30:30,559 --> 00:30:33,589
know that if we're gonna write out

620
00:30:31,819 --> 00:30:36,950
everything in the font it would look

621
00:30:33,589 --> 00:30:47,869
like that and so here I just say like

622
00:30:36,950 --> 00:30:50,380
alright and and write them all out so I

623
00:30:47,869 --> 00:30:53,839
think these are floating-point scaled

624
00:30:50,380 --> 00:30:56,000
actual advance numbers I don't know how

625
00:30:53,839 --> 00:30:57,529
much precision we want there but I'm

626
00:30:56,000 --> 00:31:01,039
gonna go ahead and say we probably only

627
00:30:57,529 --> 00:31:03,440
want three digits of precision there

628
00:31:01,039 --> 00:31:07,359
this is not something that we could

629
00:31:03,440 --> 00:31:07,360
really use beyond that I don't think

630
00:31:08,000 --> 00:31:15,980
if index we need to print well actually

631
00:31:13,069 --> 00:31:18,649
I'll just do it this way the height of

632
00:31:15,980 --> 00:31:22,190
laziness ladies and gentlemen I'll just

633
00:31:18,650 --> 00:31:27,320
say if index then put comma otherwise

634
00:31:22,190 --> 00:31:28,460
don't that'll keep comma separated and

635
00:31:27,319 --> 00:31:32,329
then we just need to say all right

636
00:31:28,460 --> 00:31:34,220
horizontal advance of index print that

637
00:31:32,329 --> 00:31:36,349
out we get to the end we'll stick a

638
00:31:34,220 --> 00:31:43,940
semicolon and the carriage return and

639
00:31:36,349 --> 00:31:45,379
we'll be done right Molly and I don't we

640
00:31:43,940 --> 00:31:48,259
don't scratch the molding

641
00:31:45,380 --> 00:31:57,740
okay that's unproductive won't you go to

642
00:31:48,259 --> 00:32:00,740
your tree here there you go I gotta

643
00:31:57,740 --> 00:32:03,710
brush you I gotta brush you look at you

644
00:32:00,740 --> 00:32:06,620
shedding brush you so much the other day

645
00:32:03,710 --> 00:32:09,470
too you just I think it's your new coats

646
00:32:06,619 --> 00:32:11,989
coming in you get rid of your undercoat

647
00:32:09,470 --> 00:32:18,140
you can't leave your undercoat for the

648
00:32:11,990 --> 00:32:20,559
springtime gonna be nice and cool for

649
00:32:18,140 --> 00:32:20,560
the summertime

650
00:32:24,859 --> 00:32:27,759
that's good

651
00:32:28,150 --> 00:32:36,250
you spot some crows maybe a seagull let

652
00:32:33,308 --> 00:32:39,399
me see much out there but maybe there'll

653
00:32:36,250 --> 00:32:43,798
be something later all right so that's

654
00:32:39,400 --> 00:32:47,380
really all we need to get started and

655
00:32:43,798 --> 00:32:59,769
oops so to lower what's the problem here

656
00:32:47,380 --> 00:33:05,110
oh right this comes in as an int so see

657
00:32:59,769 --> 00:33:07,509
what else we got that needs a file so

658
00:33:05,109 --> 00:33:09,519
that should start now giving us at least

659
00:33:07,509 --> 00:33:11,859
something we can start working on so if

660
00:33:09,519 --> 00:33:14,980
I say this it should give me an error

661
00:33:11,859 --> 00:33:19,089
and now I can say like okay do I have a

662
00:33:14,980 --> 00:33:24,069
temp directory here yeah so let's make

663
00:33:19,089 --> 00:33:27,819
dirt temp font and we'll just say like

664
00:33:24,069 --> 00:33:31,538
okay we need to provide a desk HT HT so

665
00:33:27,819 --> 00:33:36,009
we'll say temp font test h HT and then

666
00:33:31,538 --> 00:33:39,879
here we'll say temp font and we'll hit

667
00:33:36,009 --> 00:33:50,500
return we'll see what we get right so

668
00:33:39,880 --> 00:33:56,440
now if I for example do W temp font test

669
00:33:50,500 --> 00:33:59,500
HH see here's our font file so there's

670
00:33:56,440 --> 00:34:04,860
all of our glyphs doesn't look where's

671
00:33:59,500 --> 00:34:04,859
the that might have been because of the

672
00:34:04,919 --> 00:34:10,740
fact that it's not actually a tab file

673
00:34:07,740 --> 00:34:14,409
yeah there we go

674
00:34:10,739 --> 00:34:19,779
so here's all our horizontal advance

675
00:34:14,409 --> 00:34:23,619
table right so I'm not so it looks like

676
00:34:19,780 --> 00:34:26,379
this is always in even pixels for some

677
00:34:23,619 --> 00:34:30,940
reason why why would that be should not

678
00:34:26,378 --> 00:34:34,500
have been a floating-point value that

679
00:34:30,940 --> 00:34:34,500
seems a little strange

680
00:34:35,989 --> 00:34:43,878
I mean aren't we scaling that value by

681
00:34:42,349 --> 00:34:53,359
something or are we literally never

682
00:34:43,878 --> 00:34:58,969
scaling it that's pretty interesting so

683
00:34:53,358 --> 00:35:08,900
I guess we don't I guess we don't ever

684
00:34:58,969 --> 00:35:13,449
scale it so that's always a pixel value

685
00:35:08,900 --> 00:35:13,450
looks like we're not scaling down which

686
00:35:14,079 --> 00:35:21,170
so are we not scaling at all oh so I

687
00:35:19,010 --> 00:35:25,240
guess we're letting it do anti-aliasing

688
00:35:21,170 --> 00:35:29,720
for us fascinating

689
00:35:25,239 --> 00:35:32,750
well all right then I guess I guess just

690
00:35:29,719 --> 00:35:34,759
don't need to do that didn't realize

691
00:35:32,750 --> 00:35:36,588
that we were always on pixel boundaries

692
00:35:34,760 --> 00:35:40,359
here so I guess we're actually just

693
00:35:36,588 --> 00:35:42,799
doing that and I don't know why we're

694
00:35:40,358 --> 00:35:46,029
we're storing floats in the first place

695
00:35:42,800 --> 00:35:46,030
I guess just you know

696
00:36:02,469 --> 00:36:07,489
um so I guess we don't really have to

697
00:36:04,940 --> 00:36:09,259
worry about that and that's fine so this

698
00:36:07,489 --> 00:36:11,358
looks like it's all outputting exactly

699
00:36:09,259 --> 00:36:12,978
what we want so I think now we can move

700
00:36:11,358 --> 00:36:16,248
on to just worrying about putting the

701
00:36:12,978 --> 00:36:18,348
bitmaps out right now this is not a

702
00:36:16,248 --> 00:36:20,179
particularly pretty way to print this

703
00:36:18,349 --> 00:36:23,719
and one might argue that we should

704
00:36:20,179 --> 00:36:26,208
probably try to make it look nicer and

705
00:36:23,719 --> 00:36:29,059
we certainly could do that so if we

706
00:36:26,208 --> 00:36:34,429
wanted to do that we could just go ahead

707
00:36:29,059 --> 00:36:37,670
and do some kind of a you know strided

708
00:36:34,429 --> 00:36:41,538
version of this so for example we could

709
00:36:37,670 --> 00:36:47,209
say something like you know if index and

710
00:36:41,539 --> 00:36:51,229
index mod 16 equals zero so like every

711
00:36:47,208 --> 00:36:57,919
16 times through the loop we will

712
00:36:51,228 --> 00:37:01,518
actually do a F printf and you know what

713
00:36:57,920 --> 00:37:11,838
we could do this even takes away some of

714
00:37:01,518 --> 00:37:15,528
my fun but you know and what this would

715
00:37:11,838 --> 00:37:17,659
do is say alright look let's every 16

716
00:37:15,528 --> 00:37:22,268
numbers instead of doing this what I was

717
00:37:17,659 --> 00:37:25,129
doing here let's get rid of that and

718
00:37:22,268 --> 00:37:27,468
what we'll do instead is say okay every

719
00:37:25,130 --> 00:37:30,048
16 times will actually print a carriage

720
00:37:27,469 --> 00:37:33,469
return and start printing on another

721
00:37:30,048 --> 00:37:37,849
line right so here we'll do comma and

722
00:37:33,469 --> 00:37:40,999
then carriage return 1 2 3 4 1 2 3 4 and

723
00:37:37,849 --> 00:37:45,979
here we'll just do you know just the

724
00:37:40,998 --> 00:37:47,929
comma right and you may be asking why I

725
00:37:45,978 --> 00:37:50,149
felt the need to put that up up here

726
00:37:47,929 --> 00:37:52,338
well yeah I mean I guess I didn't really

727
00:37:50,150 --> 00:37:54,920
have to I probably could have still kept

728
00:37:52,338 --> 00:37:59,088
it in a more inline way but I felt like

729
00:37:54,920 --> 00:38:01,548
I shouldn't so I didn't anyway so that

730
00:37:59,088 --> 00:38:03,528
would be like a just a nicer print out

731
00:38:01,548 --> 00:38:05,480
it's all that's doing it's not changing

732
00:38:03,528 --> 00:38:09,619
it wouldn't change what would happen

733
00:38:05,480 --> 00:38:13,250
but then you know if I if I run it here

734
00:38:09,619 --> 00:38:17,450
and then type that out now type W temp

735
00:38:13,250 --> 00:38:20,619
font shht you can kind of see right it's

736
00:38:17,449 --> 00:38:23,719
just like out putting it in in a block

737
00:38:20,619 --> 00:38:25,430
of text and you know we could make sure

738
00:38:23,719 --> 00:38:27,049
the block always lines up to by just

739
00:38:25,429 --> 00:38:30,139
saying like look make sure all these are

740
00:38:27,050 --> 00:38:31,910
always two because that's generally what

741
00:38:30,139 --> 00:38:33,618
we have for advance we could even make

742
00:38:31,909 --> 00:38:35,420
them three if we wanted to leave some

743
00:38:33,619 --> 00:38:38,329
space for larger fonts which we probably

744
00:38:35,420 --> 00:38:39,800
will have at some point right and so

745
00:38:38,329 --> 00:38:42,079
there's like now it's just printing it

746
00:38:39,800 --> 00:38:44,050
out in a block and that's just like a

747
00:38:42,079 --> 00:38:48,760
little nicer to read that's all that is

748
00:38:44,050 --> 00:38:51,470
and so that's like probably it right

749
00:38:48,760 --> 00:38:53,359
this is probably legible I'm gonna make

750
00:38:51,469 --> 00:39:02,959
this horizontal advance do a carriage

751
00:38:53,358 --> 00:39:08,929
turn that's actually we could we could

752
00:39:02,960 --> 00:39:10,338
sort of factor that out I guess we

753
00:39:08,929 --> 00:39:15,649
probably the easiest way to do it is

754
00:39:10,338 --> 00:39:17,269
literally just do it here instead right

755
00:39:15,650 --> 00:39:18,650
we could just do it like that I think

756
00:39:17,269 --> 00:39:21,159
that might look a little better let's

757
00:39:18,650 --> 00:39:21,160
try that

758
00:39:29,780 --> 00:39:34,119
yeah

759
00:39:31,750 --> 00:39:36,039
so that seems good right there's our

760
00:39:34,119 --> 00:39:37,750
horizontal dancer a so now that whole

761
00:39:36,039 --> 00:39:41,880
thing is just in there

762
00:39:37,750 --> 00:39:46,539
this needs a closing semicolon I think

763
00:39:41,880 --> 00:39:49,059
right so that should be there and that's

764
00:39:46,539 --> 00:39:51,820
it so now I think we can move on to just

765
00:39:49,059 --> 00:39:53,579
outputting the bitmaps we know where

766
00:39:51,820 --> 00:39:55,960
we're gonna put them which is right here

767
00:39:53,579 --> 00:40:00,250
so now we need like a thing that's like

768
00:39:55,960 --> 00:40:02,858
right PNG and the glyph result that we

769
00:40:00,250 --> 00:40:06,429
have here that should tell us like

770
00:40:02,858 --> 00:40:10,630
that's this right here that should tell

771
00:40:06,429 --> 00:40:13,539
us what we actually need now this extra

772
00:40:10,630 --> 00:40:20,320
data has to be stored into the glyphs

773
00:40:13,539 --> 00:40:26,409
somehow right so I look I think that a

774
00:40:20,320 --> 00:40:27,609
line percentage has to be in there but I

775
00:40:26,409 --> 00:40:30,789
think that's the only piece of

776
00:40:27,608 --> 00:40:37,960
information right it's just the aligned

777
00:40:30,789 --> 00:40:42,809
percentage so that would have to come in

778
00:40:37,960 --> 00:40:42,809
here meaning it would have to be like I

779
00:40:44,969 --> 00:40:51,309
know how to do this but would have to be

780
00:40:48,070 --> 00:40:53,890
something like that right and I don't

781
00:40:51,309 --> 00:40:55,150
know I don't really remember how we were

782
00:40:53,889 --> 00:41:03,219
looking at that piece of information

783
00:40:55,150 --> 00:41:05,769
before but that is something that has to

784
00:41:03,219 --> 00:41:09,250
sort of be written out the align

785
00:41:05,769 --> 00:41:11,739
percentage has to be put back into the

786
00:41:09,250 --> 00:41:15,070
file when it's actually being exported

787
00:41:11,739 --> 00:41:16,689
right so let's just do it this way for

788
00:41:15,070 --> 00:41:20,140
now we'll see what we want to do later

789
00:41:16,690 --> 00:41:24,369
but that's a line percentage x + glyph a

790
00:41:20,139 --> 00:41:28,358
line percentage why that's the alignment

791
00:41:24,369 --> 00:41:30,760
of these of this particular glyph that

792
00:41:28,358 --> 00:41:33,670
seems fine and then we now need to

793
00:41:30,760 --> 00:41:35,380
actually write the PNG out this glyph

794
00:41:33,670 --> 00:41:37,659
result doesn't actually give us what we

795
00:41:35,380 --> 00:41:40,088
need for that so we need to actually

796
00:41:37,659 --> 00:41:42,309
return that as part of this load with

797
00:41:40,088 --> 00:41:44,199
bitmap unless we pass the writing

798
00:41:42,309 --> 00:41:45,068
context to it but I don't think we want

799
00:41:44,199 --> 00:41:47,918
to bother with that

800
00:41:45,068 --> 00:41:53,349
so we want to be able to say here write

801
00:41:47,918 --> 00:41:55,748
a PNG to this file name right and we

802
00:41:53,349 --> 00:42:01,059
want to be able to say what the width is

803
00:41:55,748 --> 00:42:04,028
right we want to be able to say what the

804
00:42:01,059 --> 00:42:09,579
height is and then we want a pointer to

805
00:42:04,028 --> 00:42:11,349
the pixels so we need like you know we

806
00:42:09,579 --> 00:42:13,089
probably would also need a stride

807
00:42:11,349 --> 00:42:14,380
although we may not need a stride I'm

808
00:42:13,088 --> 00:42:19,179
not sure if these things are tightly

809
00:42:14,380 --> 00:42:21,278
packed or not so we probably can just

810
00:42:19,179 --> 00:42:25,028
look first and see whether we need to

811
00:42:21,278 --> 00:42:27,880
whether we need to support a stride or

812
00:42:25,028 --> 00:42:32,679
not so let's take a look and see how

813
00:42:27,880 --> 00:42:35,068
this gets packed out pitch is it no it's

814
00:42:32,679 --> 00:42:38,499
packed so we don't actually need that

815
00:42:35,068 --> 00:42:42,608
and then that out that piece of

816
00:42:38,498 --> 00:42:47,858
information there for the out where is

817
00:42:42,608 --> 00:42:51,278
that actually coming from so we're just

818
00:42:47,858 --> 00:42:53,798
malloc the memory for that right and

819
00:42:51,278 --> 00:42:55,358
it's it's this right here now there's

820
00:42:53,798 --> 00:42:58,989
really no need for us to malloc that

821
00:42:55,358 --> 00:43:01,328
every time that's just dumb we could

822
00:42:58,989 --> 00:43:03,938
just have one piece of memory that we

823
00:43:01,329 --> 00:43:05,709
pass in and I would think I would

824
00:43:03,938 --> 00:43:07,389
probably prefer that because there's no

825
00:43:05,708 --> 00:43:09,969
like there doesn't need to be any

826
00:43:07,389 --> 00:43:13,929
Malik's in here at least I don't think

827
00:43:09,969 --> 00:43:16,900
so if we look at if we look at where the

828
00:43:13,929 --> 00:43:18,939
Malik's are yeah there doesn't need to

829
00:43:16,900 --> 00:43:21,699
be any Malik's in here so what I'd

830
00:43:18,938 --> 00:43:24,188
rather do is say okay let's go ahead and

831
00:43:21,699 --> 00:43:25,959
have out memory be passed in out memory

832
00:43:24,188 --> 00:43:29,139
can just be like the biggest the thing

833
00:43:25,958 --> 00:43:32,228
could possibly be at any particular

834
00:43:29,139 --> 00:43:35,768
point in time and you can kind of see

835
00:43:32,228 --> 00:43:37,598
like max like we know that this is the

836
00:43:35,768 --> 00:43:39,368
only size we have for writing to the

837
00:43:37,599 --> 00:43:41,859
bitmap in the first place so it doesn't

838
00:43:39,369 --> 00:43:45,548
really make any sense to do anything

839
00:43:41,858 --> 00:43:46,538
other than that right that's just that

840
00:43:45,548 --> 00:43:49,418
just doesn't make any sense

841
00:43:46,539 --> 00:43:53,699
so whatever the max glim glyph Tim is

842
00:43:49,418 --> 00:43:57,150
that's all we need for our actual size

843
00:43:53,699 --> 00:43:58,930
now the font bits presumably were

844
00:43:57,150 --> 00:44:01,180
getting created here

845
00:43:58,929 --> 00:44:03,879
yeah here they are so all we really need

846
00:44:01,179 --> 00:44:05,379
to do is say look the out memory is just

847
00:44:03,880 --> 00:44:08,019
going to be whatever the size the font

848
00:44:05,380 --> 00:44:13,298
bits is right because that's also that

849
00:44:08,019 --> 00:44:15,130
size and so when we create the what that

850
00:44:13,298 --> 00:44:16,630
Maxim has to be and we know what the

851
00:44:15,130 --> 00:44:20,890
maximum is because we're passing it

852
00:44:16,630 --> 00:44:22,240
right we're passing max glyph Tim so we

853
00:44:20,889 --> 00:44:24,519
must be setting that somewhere rats

854
00:44:22,239 --> 00:44:26,919
right here so here's the max cliff Tim

855
00:44:24,519 --> 00:44:28,869
right so immediately after that we

856
00:44:26,920 --> 00:44:31,599
should be able to say well just take the

857
00:44:28,869 --> 00:44:34,358
max cliff Tim x times the max lift in Y

858
00:44:31,599 --> 00:44:38,260
times whatever the size of the pixel is

859
00:44:34,358 --> 00:44:40,000
and that's it right you're done so at

860
00:44:38,260 --> 00:44:46,210
that point you can just say all right

861
00:44:40,000 --> 00:44:47,679
let's go ahead and and pass that every

862
00:44:46,210 --> 00:44:50,048
time we extract a glyph and now we're

863
00:44:47,679 --> 00:44:54,940
not allocating memory every time for no

864
00:44:50,048 --> 00:44:56,769
reason right all right so at that point

865
00:44:54,940 --> 00:44:58,720
I think we don't even really need to

866
00:44:56,769 --> 00:45:00,670
know what the pixel pointer actually is

867
00:44:58,719 --> 00:45:02,318
because we already kind of know it but

868
00:45:00,670 --> 00:45:04,480
I'm gonna say let's return it anyway

869
00:45:02,318 --> 00:45:07,088
just because why not

870
00:45:04,480 --> 00:45:09,400
so in here we'll say the glyph result

871
00:45:07,088 --> 00:45:12,639
includes the pixels and it includes the

872
00:45:09,400 --> 00:45:14,950
width and the height of the thing then

873
00:45:12,639 --> 00:45:17,920
inside this particular function up here

874
00:45:14,949 --> 00:45:23,078
where we're going to pass the results we

875
00:45:17,920 --> 00:45:29,500
just need to fill those out that's

876
00:45:23,079 --> 00:45:33,490
irrelevant and this should all just be

877
00:45:29,500 --> 00:45:35,949
known so where do we get all this stuff

878
00:45:33,489 --> 00:45:37,239
from so this is how we computed our

879
00:45:35,949 --> 00:45:38,528
width and height and all the stuff I'm

880
00:45:37,239 --> 00:45:40,719
gonna go ahead and say look this is

881
00:45:38,528 --> 00:45:45,460
outlived its usefulness so this is

882
00:45:40,719 --> 00:45:47,618
actually gonna go up above now which I'd

883
00:45:45,460 --> 00:45:52,059
kind of toy but doing before so that'll

884
00:45:47,619 --> 00:45:54,880
go here and then this stuff can just be

885
00:45:52,059 --> 00:45:56,740
filled out inside so when we do this you

886
00:45:54,880 --> 00:46:00,010
know there's the out without height out

887
00:45:56,739 --> 00:46:03,759
pitch we clear the memory and so on and

888
00:46:00,010 --> 00:46:10,028
and all that nonsense so what we want to

889
00:46:03,760 --> 00:46:12,740
do now is say that it's got the out

890
00:46:10,028 --> 00:46:15,400
memory got the out with

891
00:46:12,739 --> 00:46:17,959
right so now we have all of that data

892
00:46:15,400 --> 00:46:20,269
and then we just need a function that

893
00:46:17,960 --> 00:46:30,230
actually writes the PNG you know I'm

894
00:46:20,269 --> 00:46:33,829
saying so that function oops it's not

895
00:46:30,230 --> 00:46:37,639
gonna do anything fancy it's just gonna

896
00:46:33,829 --> 00:46:42,579
take a width and a height and a pointer

897
00:46:37,639 --> 00:46:42,579
to the pixels and the desk file name

898
00:46:42,849 --> 00:46:56,500
obviously it'll try to open that and if

899
00:46:55,250 --> 00:46:59,840
it doesn't

900
00:46:56,500 --> 00:47:12,710
so like that file can't be opened that's

901
00:46:59,840 --> 00:47:13,579
an error so like will tell the user just

902
00:47:12,710 --> 00:47:15,679
so they know it failed

903
00:47:13,579 --> 00:47:18,400
maybe they typed a director that doesn't

904
00:47:15,679 --> 00:47:21,079
exist for the destination or something

905
00:47:18,400 --> 00:47:24,950
so that's all we need here now we just

906
00:47:21,079 --> 00:47:27,170
need to actually write the PNG out and

907
00:47:24,949 --> 00:47:29,480
in order to do that well I mean we could

908
00:47:27,170 --> 00:47:31,700
do any number of things right but I'd

909
00:47:29,480 --> 00:47:36,380
rather start by just taking we've we've

910
00:47:31,699 --> 00:47:39,889
got in HHA edit we actually have the

911
00:47:36,380 --> 00:47:43,700
thing for dumping the the bitmaps in

912
00:47:39,889 --> 00:47:46,339
here somewhere I think I hope I'm

913
00:47:43,699 --> 00:47:48,829
actually no other is here it is so in

914
00:47:46,340 --> 00:47:54,200
here we can just say look let's take

915
00:47:48,829 --> 00:47:57,858
this header dump that in here you know

916
00:47:54,199 --> 00:48:02,480
any of that here's the right image to

917
00:47:57,858 --> 00:48:05,539
top down RGBA nonsense with the pixel

918
00:48:02,480 --> 00:48:07,960
ops nonsense and let's just go ahead and

919
00:48:05,539 --> 00:48:07,960
run that

920
00:48:17,190 --> 00:48:21,869
I don't think we need to touch it at all

921
00:48:19,199 --> 00:48:24,480
though do we cuz we've already done all

922
00:48:21,869 --> 00:48:37,079
this so we can actually just kind of do

923
00:48:24,480 --> 00:48:47,818
this there we go we don't need any of

924
00:48:37,079 --> 00:48:50,700
this stuff because these are monochrome

925
00:48:47,818 --> 00:48:54,000
right so we don't care about inverting

926
00:48:50,699 --> 00:48:56,838
we don't need to do any other stuff with

927
00:48:54,000 --> 00:49:01,018
them so we're literally just writing

928
00:48:56,838 --> 00:49:04,018
these out one at a time in fact this

929
00:49:01,018 --> 00:49:06,028
whole loop this this whole thing is not

930
00:49:04,018 --> 00:49:08,909
necessary right we don't we don't need

931
00:49:06,028 --> 00:49:11,778
to do any of this so we can literally

932
00:49:08,909 --> 00:49:15,659
shorten this I believe down to just that

933
00:49:11,778 --> 00:49:17,818
so we can just say look write these two

934
00:49:15,659 --> 00:49:20,578
things and be done with it

935
00:49:17,818 --> 00:49:22,650
so I think that should do it and of

936
00:49:20,579 --> 00:49:26,910
course this won't be writing a PNG it's

937
00:49:22,650 --> 00:49:31,139
actually a BMP but we can start there

938
00:49:26,909 --> 00:49:33,598
right so now let's actually try this and

939
00:49:31,139 --> 00:49:37,038
see if everything just dies a horrible

940
00:49:33,599 --> 00:49:41,009
death if I go into that temp directory

941
00:49:37,039 --> 00:49:42,299
and I look at the fonts here then I mean

942
00:49:41,009 --> 00:49:44,909
you can you can base to see that it

943
00:49:42,298 --> 00:49:48,480
worked okay I mean there's the font

944
00:49:44,909 --> 00:49:51,778
right so I think we're good to go that's

945
00:49:48,480 --> 00:49:53,849
all the stuff that we had wanted and I

946
00:49:51,778 --> 00:49:55,588
don't know if this is looks like this is

947
00:49:53,849 --> 00:49:58,380
a one of them is probably had nothing in

948
00:49:55,588 --> 00:50:01,500
it but that looks like all the stuff in

949
00:49:58,380 --> 00:50:04,140
the font I you know I don't see anything

950
00:50:01,500 --> 00:50:06,690
weird going on there so that all seems

951
00:50:04,139 --> 00:50:08,639
fine and you know in theory we should be

952
00:50:06,690 --> 00:50:09,659
able to you know what change a size or

953
00:50:08,639 --> 00:50:11,429
something and it should get

954
00:50:09,659 --> 00:50:15,629
significantly larger so like let's say I

955
00:50:11,429 --> 00:50:17,489
did this you know and restore that you

956
00:50:15,630 --> 00:50:20,220
know there's there's bigger fonts right

957
00:50:17,489 --> 00:50:21,899
dumped out in there and looking at it

958
00:50:20,219 --> 00:50:23,209
you know it it looks like I guess

959
00:50:21,900 --> 00:50:29,278
roughly what we would expect to see

960
00:50:23,210 --> 00:50:30,659
maybe right so that seems fine now what

961
00:50:29,278 --> 00:50:34,230
we need to do is

962
00:50:30,659 --> 00:50:37,739
we need to actually write out a PNG

963
00:50:34,230 --> 00:50:40,829
because this is a BMP and so I don't

964
00:50:37,739 --> 00:50:42,568
know how much time I've got left

965
00:50:40,829 --> 00:50:45,539
actually I guess I have quite a bit I

966
00:50:42,568 --> 00:50:51,750
think I'd like 45 minutes so I may go

967
00:50:45,539 --> 00:50:53,640
ahead and actually start on that so in

968
00:50:51,750 --> 00:50:55,858
order to write a PNG what we need to do

969
00:50:53,639 --> 00:50:58,739
is reverse the PNG spec that we were

970
00:50:55,858 --> 00:51:01,739
using before and instead of trying to

971
00:50:58,739 --> 00:51:04,949
read one we now need to write one so I'm

972
00:51:01,739 --> 00:51:09,659
gonna go ahead and you know open up our

973
00:51:04,949 --> 00:51:13,500
PNG reader here and just look at what we

974
00:51:09,659 --> 00:51:17,159
read right and see what's up

975
00:51:13,500 --> 00:51:21,059
so if we look at the actual routine you

976
00:51:17,159 --> 00:51:23,068
know what's it expecting to see so we're

977
00:51:21,059 --> 00:51:25,859
gonna come in here and say okay let's

978
00:51:23,068 --> 00:51:29,639
read a PNG header that seems easy to

979
00:51:25,858 --> 00:51:35,338
replicate we're going to start reading

980
00:51:29,639 --> 00:51:39,298
chunks the chunks are endian is swapped

981
00:51:35,338 --> 00:51:40,409
it looks like I which which is really

982
00:51:39,298 --> 00:51:43,588
unfortunate

983
00:51:40,409 --> 00:51:47,338
I forgot that PNG is that really true so

984
00:51:43,588 --> 00:51:52,528
P and G is always ending wrong where's

985
00:51:47,338 --> 00:52:00,000
Indian swap yeah so it's just always

986
00:51:52,528 --> 00:52:01,858
wrong that's unfortunate anyway so we

987
00:52:00,000 --> 00:52:03,000
got an Indian swap all our stuff before

988
00:52:01,858 --> 00:52:04,409
you write it out because it's all gonna

989
00:52:03,000 --> 00:52:10,699
be wrong it's all gonna be the wrong

990
00:52:04,409 --> 00:52:15,358
Indian but then we get I it looks like

991
00:52:10,699 --> 00:52:22,038
chunks we need one that's an AI header

992
00:52:15,358 --> 00:52:24,579
and then one that's an AI datte and

993
00:52:22,039 --> 00:52:27,869
hopefully that's it

994
00:52:24,579 --> 00:52:27,869
[Music]

995
00:52:35,800 --> 00:52:44,269
I'm assuming we should be able to set

996
00:52:39,289 --> 00:52:49,210
the compression size to nothing so is

997
00:52:44,269 --> 00:52:49,210
there an uncompressed compression method

998
00:52:59,239 --> 00:53:10,419
let's see what structure was this called

999
00:53:02,719 --> 00:53:10,419
again it's called the AI header

1000
00:53:14,090 --> 00:53:18,030
[Music]

1001
00:53:20,108 --> 00:53:33,799
oh okay so technically we have to we

1002
00:53:27,349 --> 00:53:37,070
have to have a compression method is

1003
00:53:33,800 --> 00:53:41,089
that really true so wait is this sick so

1004
00:53:37,070 --> 00:53:43,160
if I want to write a PNG alright forget

1005
00:53:41,088 --> 00:53:46,670
it if that's the case I might just add

1006
00:53:43,159 --> 00:53:50,149
BMP and just say forget it

1007
00:53:46,670 --> 00:53:52,579
right because if that's really I don't

1008
00:53:50,150 --> 00:53:54,740
really want to have to write out all of

1009
00:53:52,579 --> 00:53:58,460
this nonsense for no reason

1010
00:53:54,739 --> 00:54:02,769
that just seems dumb like reading a BMP

1011
00:53:58,460 --> 00:54:02,769
is not hard so

1012
00:54:06,608 --> 00:54:11,989
cuz I don't really want to write out a

1013
00:54:09,070 --> 00:54:13,670
fake Z lib stream that basically I mean

1014
00:54:11,989 --> 00:54:14,689
it's not that hard because you just

1015
00:54:13,670 --> 00:54:19,159
write out as either the stream that's

1016
00:54:14,690 --> 00:54:21,490
uncompressed right but it's still kind

1017
00:54:19,159 --> 00:54:21,489
of annoying

1018
00:54:46,829 --> 00:54:51,569
yeah so it looks like

1019
00:55:04,150 --> 00:55:28,130
so the b-type cannot be what's what's be

1020
00:55:19,280 --> 00:55:34,870
type-0 is there an OB type-0 what's the

1021
00:55:28,130 --> 00:55:34,869
what's the pair it is

1022
00:55:39,380 --> 00:55:47,400
so it looks like if we just did be type

1023
00:55:42,329 --> 00:55:51,809
zero blocks that's just that's just

1024
00:55:47,400 --> 00:56:00,019
pixel data right so in theory we could

1025
00:55:51,809 --> 00:56:12,539
do a thing that said the B type is zero

1026
00:56:00,019 --> 00:56:14,159
so there's no Huffman on it right so I

1027
00:56:12,539 --> 00:56:16,949
guess we could do this pretty easy

1028
00:56:14,159 --> 00:56:19,259
because if it looks like B type zero

1029
00:56:16,949 --> 00:56:22,529
goes doesn't have any Huffman on it at

1030
00:56:19,260 --> 00:56:29,550
all so in theory we should be able to

1031
00:56:22,530 --> 00:56:34,320
say what's that actually where's that

1032
00:56:29,550 --> 00:56:37,920
actually coming from P type is consumed

1033
00:56:34,320 --> 00:56:42,720
it's the comp data this is in the the

1034
00:56:37,920 --> 00:56:44,400
actual idaite header right after the I

1035
00:56:42,719 --> 00:56:46,409
Det header is the actual data where's

1036
00:56:44,400 --> 00:56:50,119
the where's the jumpable part here come

1037
00:56:46,409 --> 00:56:50,118
on let's see

1038
00:57:05,980 --> 00:57:09,190
here we go

1039
00:57:19,849 --> 00:57:25,429
so yeah I think all we do is just store

1040
00:57:22,760 --> 00:57:26,900
them as be type zero so all right I'm

1041
00:57:25,429 --> 00:57:29,239
I'm okay with that

1042
00:57:26,900 --> 00:57:31,610
it's a little bit of a pain in the butt

1043
00:57:29,239 --> 00:57:34,009
but it's not such a huge pain in the

1044
00:57:31,610 --> 00:57:37,849
butt that I'm not willing to do it so

1045
00:57:34,010 --> 00:57:41,810
let's give it a try if we know we've got

1046
00:57:37,849 --> 00:57:43,969
a file that has these specs out maybe

1047
00:57:41,809 --> 00:57:47,000
I'll just go ahead and try to include it

1048
00:57:43,969 --> 00:57:52,629
so if I come up here like can I just do

1049
00:57:47,000 --> 00:57:57,219
this and say you know give us the stuff

1050
00:57:52,630 --> 00:57:57,220
it looks like that needs memory Arenas

1051
00:57:59,050 --> 00:58:07,539
why are those in here these really have

1052
00:58:02,630 --> 00:58:07,539
to be in here like why can't they be

1053
00:58:08,110 --> 00:58:15,579
is there a reason these can't be like

1054
00:58:11,199 --> 00:58:18,579
down here does everything get destroyed

1055
00:58:15,579 --> 00:58:18,579
oops

1056
00:58:28,170 --> 00:58:42,599
it doesn't seem like it so we should be

1057
00:58:30,780 --> 00:58:46,110
able to do this this takes a stream as

1058
00:58:42,599 --> 00:58:48,269
an actual hard-coded thing so it looks

1059
00:58:46,110 --> 00:58:56,510
like it does sort of need at least a

1060
00:58:48,269 --> 00:58:56,509
definition of that it seems fine

1061
00:59:06,530 --> 00:59:14,240
all right we're all good

1062
00:59:15,460 --> 00:59:22,539
okay so let's give this a shot we need

1063
00:59:20,409 --> 00:59:24,489
to start out by writing one of these

1064
00:59:22,539 --> 00:59:29,190
things out that's the first thing we

1065
00:59:24,489 --> 00:59:32,229
need to do so we've got the file header

1066
00:59:29,190 --> 00:59:35,829
and that thing needs to have the

1067
00:59:32,230 --> 00:59:37,329
signature be that that bit I guess

1068
00:59:35,829 --> 00:59:39,550
there's actually no reason to really do

1069
00:59:37,329 --> 00:59:40,780
it this way I guess the right way to do

1070
00:59:39,550 --> 00:59:43,150
it and let me just get rid of all this

1071
00:59:40,780 --> 00:59:45,569
garbage I guess the right way to do it

1072
00:59:43,150 --> 00:59:52,050
is actually just look just write this

1073
00:59:45,568 --> 00:59:56,230
right so write that out the whole thing

1074
00:59:52,050 --> 00:59:58,568
that gives us a PNG signature right and

1075
00:59:56,230 --> 01:00:01,179
I'm just gonna work backwards here and

1076
00:59:58,568 --> 01:00:05,889
try to produce this thing let's go ahead

1077
01:00:01,179 --> 01:00:08,409
and look at the reader code and just try

1078
01:00:05,889 --> 01:00:10,629
to do the opposite of what the reader

1079
01:00:08,409 --> 01:00:13,509
code does right so just gonna write out

1080
01:00:10,630 --> 01:00:15,430
whatever this thing reads so it's gonna

1081
01:00:13,510 --> 01:00:17,920
consume a PNG header that's what we just

1082
01:00:15,429 --> 01:00:20,108
wrote out it's then gonna try to start

1083
01:00:17,920 --> 01:00:23,260
reading and it's gonna read a chunk

1084
01:00:20,108 --> 01:00:26,588
header right so let's just start by

1085
01:00:23,260 --> 01:00:39,369
writing that out so we know we need a

1086
01:00:26,588 --> 01:00:41,500
chunk header here the question is what

1087
01:00:39,369 --> 01:00:44,440
goes in the chunk header and the answer

1088
01:00:41,500 --> 01:00:47,469
is well a bunch of Indian swap nonsense

1089
01:00:44,440 --> 01:00:53,619
right so we need to basically ende and

1090
01:00:47,469 --> 01:00:57,159
swap these two things off of it and we

1091
01:00:53,619 --> 01:00:59,670
need to set them to something who knows

1092
01:00:57,159 --> 01:00:59,670
what that is

1093
01:01:01,199 --> 01:01:08,289
or that then it's gonna try and read a

1094
01:01:05,949 --> 01:01:13,179
chunk footer and it's going to swap the

1095
01:01:08,289 --> 01:01:15,190
CRC now we don't actually use the CRC so

1096
01:01:13,179 --> 01:01:22,029
we don't have to write it correctly but

1097
01:01:15,190 --> 01:01:23,710
we may want to try anyway just to be

1098
01:01:22,030 --> 01:01:27,250
able to be read by other programs that

1099
01:01:23,710 --> 01:01:30,088
do check the CRC but for our own ingress

1100
01:01:27,250 --> 01:01:30,088
we wouldn't have to

1101
01:01:30,210 --> 01:01:35,980
all right so that chunk header is gonna

1102
01:01:33,639 --> 01:01:40,328
read the data for the chunk which is

1103
01:01:35,980 --> 01:01:43,298
some length long right and the only

1104
01:01:40,329 --> 01:01:47,470
things we actually need are these two

1105
01:01:43,298 --> 01:01:52,809
chunks so we should then be able to

1106
01:01:47,469 --> 01:01:54,389
write them and their footer right so you

1107
01:01:52,809 --> 01:02:00,579
know this is what we've actually got

1108
01:01:54,389 --> 01:02:03,338
Jimmy one of them's a ping I had her and

1109
01:02:00,579 --> 01:02:07,900
one of them is just the i dot chunk

1110
01:02:03,338 --> 01:02:12,998
right so this would be the i dot chunk

1111
01:02:07,900 --> 01:02:18,068
here and this would be the AI header

1112
01:02:12,998 --> 01:02:19,929
chunk here so this which I didn't even

1113
01:02:18,068 --> 01:02:21,369
know you could do until handmade here oh

1114
01:02:19,929 --> 01:02:23,528
right I don't know if you guys remember

1115
01:02:21,369 --> 01:02:26,528
like I was like oh you can do that I

1116
01:02:23,528 --> 01:02:28,568
didn't know um like that that's so cool

1117
01:02:26,528 --> 01:02:30,730
I had no idea you could do that I just

1118
01:02:28,568 --> 01:02:34,538
don't know when Z added that but that's

1119
01:02:30,730 --> 01:02:38,019
pretty awesome that you can do it now um

1120
01:02:34,539 --> 01:02:41,849
so in here we need to specify a length

1121
01:02:38,018 --> 01:02:44,768
that's going to be one of these long

1122
01:02:41,849 --> 01:02:49,480
right so we've got a ping I header this

1123
01:02:44,768 --> 01:02:50,048
is the ihdr that we're gonna fill out

1124
01:02:49,480 --> 01:02:55,269
ourselves

1125
01:02:50,048 --> 01:02:58,028
so we need this thing to be that long

1126
01:02:55,268 --> 01:03:00,429
this needs to be the type those two

1127
01:02:58,028 --> 01:03:03,969
things need to get Indian swapped so

1128
01:03:00,429 --> 01:03:06,278
because we need to write them out in the

1129
01:03:03,969 --> 01:03:10,538
opposite Indianness because things I

1130
01:03:06,278 --> 01:03:13,719
guess are Mac native or something or

1131
01:03:10,539 --> 01:03:15,759
were so we got to swap the endianness

1132
01:03:13,719 --> 01:03:18,939
which is a bummer but we do so we do

1133
01:03:15,759 --> 01:03:21,998
that and then we write it out right and

1134
01:03:18,940 --> 01:03:27,970
so we're gonna f write the chunk header

1135
01:03:21,998 --> 01:03:30,298
then the IDR and then we need the chunk

1136
01:03:27,969 --> 01:03:30,298
footer

1137
01:03:32,530 --> 01:03:39,300
and the chunk footer looks like all it's

1138
01:03:36,250 --> 01:03:46,210
got does it have anything else in it

1139
01:03:39,300 --> 01:03:48,640
oops it doesn't so basically we need a

1140
01:03:46,210 --> 01:03:52,960
CRC we're gonna need a thing that does

1141
01:03:48,639 --> 01:03:54,699
this that computes the CRC in order to

1142
01:03:52,960 --> 01:03:56,320
write that out properly because we don't

1143
01:03:54,699 --> 01:03:58,989
have any way to do that right now but we

1144
01:03:56,320 --> 01:04:07,390
can but anyway then we would write out

1145
01:03:58,989 --> 01:04:16,329
the chunk footer uh so this is just

1146
01:04:07,389 --> 01:04:19,359
gonna be this oops right there's some

1147
01:04:16,329 --> 01:04:23,380
CRC here that we have to compute then we

1148
01:04:19,360 --> 01:04:26,140
would ND and swap it so that it comes

1149
01:04:23,380 --> 01:04:33,390
out right and then we would write it and

1150
01:04:26,139 --> 01:04:33,389
that would be the complete chunk right I

1151
01:04:37,650 --> 01:04:43,030
don't know what the CRC is supposed to

1152
01:04:39,909 --> 01:04:44,500
CRC presumably just the chunk data but I

1153
01:04:43,030 --> 01:04:50,110
don't actually know so we'll have to

1154
01:04:44,500 --> 01:04:53,050
actually do that then we need to endian

1155
01:04:50,110 --> 01:04:55,269
swap any parts of the IDR that actually

1156
01:04:53,050 --> 01:04:57,670
matter which looks like a bunch of them

1157
01:04:55,269 --> 01:05:00,630
so we're gonna have to set all this

1158
01:04:57,670 --> 01:05:00,630
nonsense here

1159
01:05:16,239 --> 01:05:19,969
now thankfully we've got a little cheat

1160
01:05:18,498 --> 01:05:22,009
code here because we basically know that

1161
01:05:19,969 --> 01:05:24,048
we want filter method zero and

1162
01:05:22,009 --> 01:05:27,259
interlaced method zero and compression

1163
01:05:24,048 --> 01:05:34,849
method zero and color type six bit depth

1164
01:05:27,259 --> 01:05:37,548
eight so all that's fine and then we

1165
01:05:34,849 --> 01:05:40,669
also know that we need the width and

1166
01:05:37,548 --> 01:05:45,199
height to be swapped because we

1167
01:05:40,668 --> 01:05:47,989
obviously have those in larger in the

1168
01:05:45,199 --> 01:05:52,159
other endian rather so up here we would

1169
01:05:47,989 --> 01:05:54,559
say okay let's prepare the eye header so

1170
01:05:52,159 --> 01:06:04,998
there's the eye header preparation right

1171
01:05:54,559 --> 01:06:10,849
there and there's the swap here's the

1172
01:06:04,998 --> 01:06:12,438
chunk header I guess that has to be done

1173
01:06:10,849 --> 01:06:16,459
below here because it actually needs to

1174
01:06:12,438 --> 01:06:25,788
know the size of is there right and

1175
01:06:16,458 --> 01:06:28,308
there's the chunk footer we then write

1176
01:06:25,789 --> 01:06:30,169
those out header data footer and that's

1177
01:06:28,309 --> 01:06:31,548
the complete header information that we

1178
01:06:30,168 --> 01:06:34,038
need so really the only thing that's

1179
01:06:31,548 --> 01:06:35,719
probably wrong is this let's make sure

1180
01:06:34,039 --> 01:06:38,749
we filled out this whole thing yeah we

1181
01:06:35,719 --> 01:06:41,838
did so then what we need is we need the

1182
01:06:38,748 --> 01:06:46,118
ID at to actually contain the data like

1183
01:06:41,838 --> 01:06:49,248
for the actual file so we need to put

1184
01:06:46,119 --> 01:06:51,858
the pixels into an Ida and we need the

1185
01:06:49,248 --> 01:06:54,348
Ida to have the right Z Lib header that

1186
01:06:51,858 --> 01:06:58,759
tells it like hey this is uncompressed

1187
01:06:54,349 --> 01:07:00,939
there's nothing in it right so in order

1188
01:06:58,759 --> 01:07:06,079
to do that we need to do this again

1189
01:07:00,938 --> 01:07:09,348
right we need to do another one of of

1190
01:07:06,079 --> 01:07:12,109
these F right nonsenses here that's got

1191
01:07:09,349 --> 01:07:14,890
the header I the you know header data

1192
01:07:12,108 --> 01:07:17,989
footer right it's got to look like that

1193
01:07:14,889 --> 01:07:19,980
so now we need to do the same thing we

1194
01:07:17,989 --> 01:07:23,039
did before which is the chunk

1195
01:07:19,980 --> 01:07:33,630
now needs to be set up to be eyed at

1196
01:07:23,039 --> 01:07:38,639
instead right and the yeah and the

1197
01:07:33,630 --> 01:07:40,380
length is not that so we got to think

1198
01:07:38,639 --> 01:07:42,299
about what the length is gonna be right

1199
01:07:40,380 --> 01:07:44,608
because we got to actually put its the

1200
01:07:42,300 --> 01:07:47,910
pixel data so it's gonna have however

1201
01:07:44,608 --> 01:07:51,539
its however big it is right so then

1202
01:07:47,909 --> 01:07:54,539
we've got like the chunk header weight

1203
01:07:51,539 --> 01:07:56,159
this needs to get there we go so then

1204
01:07:54,539 --> 01:07:58,230
we've got the trunk footer needs to have

1205
01:07:56,159 --> 01:07:59,699
the CRC computed again and so then the

1206
01:07:58,230 --> 01:08:01,650
main thing we need to do now is fill out

1207
01:07:59,699 --> 01:08:05,219
the actual i dot stuff that's going to

1208
01:08:01,650 --> 01:08:08,220
be in there and that is going to require

1209
01:08:05,219 --> 01:08:12,000
us to figure out yeah what that actually

1210
01:08:08,219 --> 01:08:14,279
looks like so at the very least we need

1211
01:08:12,000 --> 01:08:16,409
the ID at header and the i dot footer

1212
01:08:14,280 --> 01:08:19,529
stuff to be correct

1213
01:08:16,409 --> 01:08:33,449
i'm guessing that this looks something

1214
01:08:19,529 --> 01:08:36,600
like i don't know so let's go back to

1215
01:08:33,449 --> 01:08:38,729
the reader and see what happens so it's

1216
01:08:36,600 --> 01:08:40,680
reading the i dot chunks out of here and

1217
01:08:38,729 --> 01:08:48,209
it's literally just stuffing what's in

1218
01:08:40,680 --> 01:08:50,930
the chunk it doesn't look like it's

1219
01:08:48,210 --> 01:08:50,930
doing anything else

1220
01:08:59,599 --> 01:09:06,239
so this just stuffs these onto the

1221
01:09:02,639 --> 01:09:09,659
stream that's all it does right then we

1222
01:09:06,238 --> 01:09:11,368
eat them out of here so in theory we

1223
01:09:09,658 --> 01:09:14,219
should be able just do it all in one and

1224
01:09:11,368 --> 01:09:16,288
not have to do anything fancier I hope

1225
01:09:14,219 --> 01:09:18,118
because this is to support people

1226
01:09:16,288 --> 01:09:20,188
breaking the file into pieces but we

1227
01:09:18,118 --> 01:09:21,118
don't actually need to do that for any

1228
01:09:20,189 --> 01:09:27,869
particular reason

1229
01:09:21,118 --> 01:09:30,618
so this ID here just needs this garbage

1230
01:09:27,868 --> 01:09:35,098
to be set in some way that makes sense

1231
01:09:30,618 --> 01:09:35,938
right so we just need it to come through

1232
01:09:35,099 --> 01:09:38,429
and see

1233
01:09:35,939 --> 01:09:41,459
we basically need to see B final to be 0

1234
01:09:38,429 --> 01:09:42,989
and B type to be 0 so like the CM the

1235
01:09:41,458 --> 01:09:45,420
scene fo they have to check the F dict

1236
01:09:42,988 --> 01:09:48,028
and the F level just need to be like set

1237
01:09:45,420 --> 01:09:51,569
to something that works and so it looks

1238
01:09:48,029 --> 01:09:55,289
like we're only supporting CM 8f dick 0

1239
01:09:51,569 --> 01:09:57,239
so we would just set that right so like

1240
01:09:55,288 --> 01:10:01,099
whatever this needs to be for that to

1241
01:09:57,238 --> 01:10:04,678
happen is all we needed to actually do

1242
01:10:01,099 --> 01:10:15,269
right the additional flags like F nicked

1243
01:10:04,679 --> 01:10:18,300
here is 0 F level is that even used so F

1244
01:10:15,269 --> 01:10:20,519
levels not even used so F nicked an F

1245
01:10:18,300 --> 01:10:23,748
level so additional flag could just be 0

1246
01:10:20,519 --> 01:10:28,829
zealand method is a composite of these

1247
01:10:23,748 --> 01:10:34,139
things here right these two what is the

1248
01:10:28,828 --> 01:10:35,518
F check you don't look at that I'm gonna

1249
01:10:34,139 --> 01:10:40,409
have to bounce back here and see what

1250
01:10:35,519 --> 01:10:42,659
the F check is cuz I have no idea it's

1251
01:10:40,408 --> 01:10:44,339
just the Z Lib stuff so this is the zeal

1252
01:10:42,658 --> 01:10:50,420
of stuff so unfortunately we need the we

1253
01:10:44,340 --> 01:10:50,420
need the actual Z live info here

1254
01:10:53,109 --> 01:10:56,109
oops

1255
01:11:03,000 --> 01:11:06,469
guess it's not named to that

1256
01:11:31,300 --> 01:11:36,739
so this stuff is all irrelevant we just

1257
01:11:34,609 --> 01:11:38,869
need to know like what the so what are

1258
01:11:36,739 --> 01:11:42,369
those flags are the flags are those

1259
01:11:38,869 --> 01:11:42,369
flags actually let's find the PNG or not

1260
01:11:59,579 --> 01:12:06,630
so it does look like maybe those are in

1261
01:12:02,380 --> 01:12:06,630
here so where's the I - um

1262
01:12:16,079 --> 01:12:23,470
so I'm not sure what that value actually

1263
01:12:19,329 --> 01:12:29,619
means so there's the zealand method

1264
01:12:23,470 --> 01:12:30,250
flags and the additional flags that's

1265
01:12:29,619 --> 01:12:36,220
this

1266
01:12:30,250 --> 01:12:40,449
okay so deflate compression and some zi

1267
01:12:36,220 --> 01:12:42,369
lib nonsense we don't care about so what

1268
01:12:40,449 --> 01:12:52,619
are the what are the additional flags in

1269
01:12:42,369 --> 01:12:52,619
the check code like what what are this

1270
01:12:56,100 --> 01:13:11,730
so it just does not say so I'm not

1271
01:13:08,020 --> 01:13:11,730
really sure what we should set these two

1272
01:13:12,960 --> 01:13:17,529
we'll have to find out because we're

1273
01:13:16,090 --> 01:13:19,659
probably going to write this out wrong

1274
01:13:17,529 --> 01:13:23,380
so I guess I'm gonna have to say like

1275
01:13:19,659 --> 01:13:27,970
look we know that the Z lab method for

1276
01:13:23,380 --> 01:13:30,579
CM has got to be eight we don't know

1277
01:13:27,970 --> 01:13:32,949
what see info should be because we don't

1278
01:13:30,579 --> 01:13:34,359
use it so we have to look up like what

1279
01:13:32,949 --> 01:13:37,179
that should actually say because I don't

1280
01:13:34,359 --> 01:13:40,889
know but it looks like we want to set

1281
01:13:37,180 --> 01:13:40,890
that to eight to do

1282
01:13:58,829 --> 01:14:03,340
so we want to find something in the spec

1283
01:14:01,149 --> 01:14:05,799
we should look a little harder after we

1284
01:14:03,340 --> 01:14:08,500
kind of get through this just to find

1285
01:14:05,800 --> 01:14:10,060
out like what else is supposed to be

1286
01:14:08,500 --> 01:14:12,488
there like because probably we should

1287
01:14:10,060 --> 01:14:13,810
set those things to line up properly

1288
01:14:12,488 --> 01:14:15,519
with what we're trying to do you know

1289
01:14:13,810 --> 01:14:18,520
and I'm just not sure exactly what that

1290
01:14:15,520 --> 01:14:20,770
should be yet so we have an IDOT header

1291
01:14:18,520 --> 01:14:33,659
that goes in there and then all we've

1292
01:14:20,770 --> 01:14:39,250
got looks like is we consume one bit

1293
01:14:33,658 --> 01:14:43,299
literally a single bit and then two more

1294
01:14:39,250 --> 01:14:48,039
bits and that should be zero so we want

1295
01:14:43,300 --> 01:14:52,800
be final to be 1 right because we want

1296
01:14:48,039 --> 01:14:55,238
to end so we want to set the first bit

1297
01:14:52,800 --> 01:14:56,560
that gets consumed and we'll have to go

1298
01:14:55,238 --> 01:14:58,109
see whether it cuz we've got the bottom

1299
01:14:56,560 --> 01:15:00,670
of the top because I don't actually know

1300
01:14:58,109 --> 01:15:01,929
and then we need to set the b-type so

1301
01:15:00,670 --> 01:15:07,359
the rest of the thing needs to be zero

1302
01:15:01,929 --> 01:15:10,179
so we're either looking at setting the

1303
01:15:07,359 --> 01:15:12,339
highest bit and everything else to zero

1304
01:15:10,179 --> 01:15:15,520
or setting the lowest bit so it's either

1305
01:15:12,340 --> 01:15:20,650
gonna be that oops it's not what I

1306
01:15:15,520 --> 01:15:24,760
wanted it's either going to be just one

1307
01:15:20,649 --> 01:15:26,439
or it's gonna be the highest bit set so

1308
01:15:24,760 --> 01:15:29,409
it would be like eighty right it would

1309
01:15:26,439 --> 01:15:31,479
be like you know like that right and I'm

1310
01:15:29,408 --> 01:15:34,569
not sure which it is so we got to go

1311
01:15:31,479 --> 01:15:36,369
look at how bits are consumed and figure

1312
01:15:34,569 --> 01:15:41,349
that out but that's the first thing we

1313
01:15:36,369 --> 01:15:44,908
want that basically says you know the

1314
01:15:41,350 --> 01:15:44,909
whole thing I'm Jimmy

1315
01:15:45,100 --> 01:15:49,300
the whole thing we're writing out is

1316
01:15:46,840 --> 01:15:52,779
going to be one chunk and this is and

1317
01:15:49,300 --> 01:15:54,670
it's not compressed so have a party so

1318
01:15:52,779 --> 01:15:56,198
we then have a 16 bit length which is

1319
01:15:54,670 --> 01:15:58,149
just going to be our width times our

1320
01:15:56,198 --> 01:16:02,908
height and I I assume

1321
01:15:58,149 --> 01:16:02,908
for I don't actually know if that's true

1322
01:16:04,679 --> 01:16:11,319
yeah so just a width times height times

1323
01:16:07,479 --> 01:16:14,289
four it looks like these are written out

1324
01:16:11,319 --> 01:16:16,420
in just a stupid way that's meant for

1325
01:16:14,289 --> 01:16:20,019
checking for no apparent reason that I

1326
01:16:16,420 --> 01:16:22,060
could necessarily predict so I have no

1327
01:16:20,020 --> 01:16:25,120
idea what the point of that is but

1328
01:16:22,060 --> 01:16:27,850
that's fine so we basically have a Len

1329
01:16:25,119 --> 01:16:33,369
here that's going to be width times

1330
01:16:27,850 --> 01:16:44,670
height times four and then we've got n

1331
01:16:33,369 --> 01:16:44,670
Lin which is just that right so those I

1332
01:16:49,679 --> 01:16:56,800
you know that can't write out something

1333
01:16:52,420 --> 01:16:58,300
that's too large so meaning you know we

1334
01:16:56,800 --> 01:16:59,890
may have to break this into multiple

1335
01:16:58,300 --> 01:17:03,039
chunks if the thing was too large don't

1336
01:16:59,890 --> 01:17:04,960
know if we need to support but that's

1337
01:17:03,039 --> 01:17:07,960
the maximum we could do divided by four

1338
01:17:04,960 --> 01:17:11,140
is that so if we then square root it

1339
01:17:07,960 --> 01:17:14,109
that means 128 528 is the largest bitmap

1340
01:17:11,140 --> 01:17:19,449
we could write out if it was square and

1341
01:17:14,109 --> 01:17:22,149
it could change obviously if we don't

1342
01:17:19,448 --> 01:17:25,389
multi pass this so if we don't write out

1343
01:17:22,149 --> 01:17:27,309
like multiple chunks so I'm gonna put it

1344
01:17:25,390 --> 01:17:30,550
to do in here just to make sure we know

1345
01:17:27,310 --> 01:17:33,510
that in fact I could put an if in here

1346
01:17:30,550 --> 01:17:33,510
but I must do for now

1347
01:17:47,300 --> 01:17:55,500
why they chose to write the length twice

1348
01:17:50,970 --> 01:17:57,810
and have you compare the two I have no

1349
01:17:55,500 --> 01:17:59,159
idea incident is having a 32-bit length

1350
01:17:57,810 --> 01:18:01,980
which would have allowed you to write

1351
01:17:59,159 --> 01:18:04,139
the bits out directly I have no idea it

1352
01:18:01,979 --> 01:18:10,439
seems incredibly stupid but I'm sure

1353
01:18:04,140 --> 01:18:12,390
they had some reason for it I hope I

1354
01:18:10,439 --> 01:18:14,549
don't know

1355
01:18:12,390 --> 01:18:18,660
I would ask Molly about a fish you might

1356
01:18:14,550 --> 01:18:20,159
be asleep anyway so if we then say okay

1357
01:18:18,659 --> 01:18:21,930
we're gonna write out the length that's

1358
01:18:20,159 --> 01:18:25,760
how many there need to be then we just

1359
01:18:21,930 --> 01:18:25,760
kind of dump this out I think that's it

1360
01:18:28,579 --> 01:18:33,479
and then that should just be it I don't

1361
01:18:32,100 --> 01:18:38,480
think there's anything else at anything

1362
01:18:33,479 --> 01:18:38,479
else so we need to write these two right

1363
01:18:38,840 --> 01:18:47,460
Lennon in line and then we need to write

1364
01:18:44,880 --> 01:18:58,470
out the pixel data and off we go

1365
01:18:47,460 --> 01:19:00,560
so don't know what this is it's one or

1366
01:18:58,470 --> 01:19:00,560
the other

1367
01:19:03,859 --> 01:19:07,649
so we'll deal with that later but we

1368
01:19:06,239 --> 01:19:12,090
have to write the stream byte then we

1369
01:19:07,649 --> 01:19:14,099
have to write Len then n Len then we

1370
01:19:12,090 --> 01:19:19,409
have to write the pixels and then we

1371
01:19:14,100 --> 01:19:21,750
have to write the the footer right okay

1372
01:19:19,409 --> 01:19:24,569
so now we get to the thing we're aware

1373
01:19:21,750 --> 01:19:28,920
that the length has to be included in

1374
01:19:24,569 --> 01:19:31,079
here and I don't know how big that's

1375
01:19:28,920 --> 01:19:33,210
supposed to be because I don't know what

1376
01:19:31,079 --> 01:19:35,609
it's supposed to include like does it

1377
01:19:33,210 --> 01:19:39,439
include the header and the stream by

1378
01:19:35,609 --> 01:19:42,059
nanny and everything else and then the

1379
01:19:39,439 --> 01:19:43,079
chunk header and footer or does it skip

1380
01:19:42,060 --> 01:19:45,390
the chunk header and footer because you

1381
01:19:43,079 --> 01:19:46,890
already read those we should be able to

1382
01:19:45,390 --> 01:19:48,869
figure that out by looking at how we

1383
01:19:46,890 --> 01:19:51,360
were processing it here so what it looks

1384
01:19:48,869 --> 01:19:52,260
like is we actually take the chunk data

1385
01:19:51,359 --> 01:19:54,859
here

1386
01:19:52,260 --> 01:19:54,860
which is

1387
01:19:55,639 --> 01:20:01,519
separate from the header right

1388
01:20:17,699 --> 01:20:24,609
so I think it does not include anything

1389
01:20:21,520 --> 01:20:25,990
other than this interior part so the

1390
01:20:24,609 --> 01:20:37,420
length that we're writing out is

1391
01:20:25,989 --> 01:20:39,729
literally stream byte and then the

1392
01:20:37,420 --> 01:20:44,710
actual length right which we just

1393
01:20:39,729 --> 01:20:47,679
computed right here I think that's what

1394
01:20:44,710 --> 01:20:52,920
we're talking about where we essentially

1395
01:20:47,680 --> 01:20:52,920
do like okay you know take the ID at

1396
01:20:53,039 --> 01:20:57,279
feed all the rest of this crap into it

1397
01:20:55,449 --> 01:20:59,529
and that's what we're going to be

1398
01:20:57,279 --> 01:21:03,069
writing out so then we need to figure

1399
01:20:59,529 --> 01:21:04,750
out the CRC obviously which we haven't

1400
01:21:03,069 --> 01:21:06,369
done yet and then we just need to write

1401
01:21:04,750 --> 01:21:08,739
everything out so we need to write out

1402
01:21:06,369 --> 01:21:10,689
literally what I just said oh and we

1403
01:21:08,739 --> 01:21:25,599
want this to we want the ID out header I

1404
01:21:10,689 --> 01:21:27,659
think no yes yes that's also included so

1405
01:21:25,600 --> 01:21:31,090
the ida header also has to go in there

1406
01:21:27,659 --> 01:21:33,760
in addition to everything else so then

1407
01:21:31,090 --> 01:21:36,670
we just have a giant nonsense set of

1408
01:21:33,760 --> 01:21:37,840
this crap where we say like okay and I

1409
01:21:36,670 --> 01:21:40,270
could have built destruct out of this

1410
01:21:37,840 --> 01:21:41,710
maybe I should so it's a little bit

1411
01:21:40,270 --> 01:21:43,150
simpler but basically I just have to

1412
01:21:41,710 --> 01:21:45,220
write these in order so you write the I

1413
01:21:43,149 --> 01:21:50,769
dot then you write the screen bite then

1414
01:21:45,220 --> 01:21:53,970
you write the Len the n Len and then you

1415
01:21:50,770 --> 01:21:53,970
write the actual pixels

1416
01:22:05,828 --> 01:22:10,698
and then we stick the footer on there

1417
01:22:08,750 --> 01:22:12,529
and in theory you're done now in order

1418
01:22:10,698 --> 01:22:16,069
to actually determine when we're done

1419
01:22:12,529 --> 01:22:19,038
here looking at this you can see like we

1420
01:22:16,069 --> 01:22:20,988
do a while loop until it's there's no

1421
01:22:19,038 --> 01:22:25,849
more room in the file so it looks like

1422
01:22:20,988 --> 01:22:28,308
there is no closing chunk at least not

1423
01:22:25,849 --> 01:22:30,500
that we cared about now in the spec I

1424
01:22:28,309 --> 01:22:32,480
think there was one meaning there was

1425
01:22:30,500 --> 01:22:34,279
like an eye end chunk or some crap like

1426
01:22:32,479 --> 01:22:36,379
this that we're just not paying

1427
01:22:34,279 --> 01:22:38,658
attention to I don't think but there

1428
01:22:36,380 --> 01:22:45,859
might be one and so we might want to

1429
01:22:38,658 --> 01:22:50,960
stick that in there for compliance yeah

1430
01:22:45,859 --> 01:22:54,170
so just to be like a little more proper

1431
01:22:50,960 --> 01:22:57,230
about it I think we want to just dump

1432
01:22:54,170 --> 01:23:03,739
out a completely empty one here I don't

1433
01:22:57,229 --> 01:23:06,279
know if it needs a if it's gonna have a

1434
01:23:03,738 --> 01:23:06,279
footer

1435
01:23:15,699 --> 01:23:19,750
let's take a quick look here

1436
01:23:45,960 --> 01:23:51,600
so it sounds like it a four byte CRC

1437
01:23:50,039 --> 01:23:53,489
calculated on the presetting bytes and

1438
01:23:51,600 --> 01:23:55,740
the chunk including the chunk type field

1439
01:23:53,489 --> 01:24:05,279
and chunk data fields but not including

1440
01:23:55,739 --> 01:24:08,279
the length field okay why not I mean you

1441
01:24:05,279 --> 01:24:11,519
knew the length I guess it's because you

1442
01:24:08,279 --> 01:24:13,109
want to write the thing in CRC as you go

1443
01:24:11,520 --> 01:24:15,870
and since the length came at the

1444
01:24:13,109 --> 01:24:23,750
beginning they want you to not have to

1445
01:24:15,869 --> 01:24:26,609
have known it ahead of time I guess it's

1446
01:24:23,750 --> 01:24:33,329
stupid because you'd want to see our

1447
01:24:26,609 --> 01:24:35,039
Sivan yeah anyway so anyway it looks

1448
01:24:33,329 --> 01:24:37,140
like we would need a CRC on that one as

1449
01:24:35,039 --> 01:24:39,710
well so if we wanted to write that out

1450
01:24:37,140 --> 01:24:43,050
we'd be doing this again

1451
01:24:39,710 --> 01:24:45,210
like so and there just wouldn't be any

1452
01:24:43,050 --> 01:24:47,750
data in it so we would say the chunk

1453
01:24:45,210 --> 01:24:57,439
header the length is zero

1454
01:24:47,750 --> 01:25:01,529
the type is ions and the footer dot CRC

1455
01:24:57,439 --> 01:25:03,210
goes there we would then and you know

1456
01:25:01,529 --> 01:25:04,619
what I might start writing this a little

1457
01:25:03,210 --> 01:25:06,949
differently like maybe we write it like

1458
01:25:04,619 --> 01:25:06,949
that

1459
01:25:14,310 --> 01:25:20,140
right because these the things that you

1460
01:25:16,479 --> 01:25:22,649
need to fill out uh so I think that

1461
01:25:20,140 --> 01:25:22,650
should be good

1462
01:25:22,890 --> 01:25:34,660
and off we would go that in theory

1463
01:25:29,470 --> 01:25:37,510
writes a PNG II we need access to the nd

1464
01:25:34,659 --> 01:25:41,050
and swapping code that this is using but

1465
01:25:37,510 --> 01:25:43,900
that seems pretty tame so what I might

1466
01:25:41,050 --> 01:25:45,010
do is go ahead and put that up here so

1467
01:25:43,899 --> 01:25:55,049
that everyone can use it

1468
01:25:45,010 --> 01:25:55,050
right did we also have it yeah we do

1469
01:25:57,569 --> 01:26:04,899
type it that in the math library um

1470
01:26:01,829 --> 01:26:08,619
alright so who knows what this will do

1471
01:26:04,899 --> 01:26:11,139
probably nothing good but you know hey

1472
01:26:08,619 --> 01:26:14,380
we got started and so tomorrow that puts

1473
01:26:11,140 --> 01:26:15,970
us in a good position to start to

1474
01:26:14,380 --> 01:26:17,409
bugging that and getting it working and

1475
01:26:15,970 --> 01:26:18,789
because we only got about like ten

1476
01:26:17,409 --> 01:26:20,409
minutes left so we probably won't get

1477
01:26:18,789 --> 01:26:22,090
anywhere on getting this working but at

1478
01:26:20,409 --> 01:26:30,819
least we've got the like it we've got it

1479
01:26:22,090 --> 01:26:32,140
sketched out right um so here it so

1480
01:26:30,819 --> 01:26:33,880
interesting enough it looks like we've

1481
01:26:32,140 --> 01:26:38,650
got some of it right right because you

1482
01:26:33,880 --> 01:26:40,869
have like the looks like the sizes are

1483
01:26:38,649 --> 01:26:46,479
kind of correct so we're not like

1484
01:26:40,869 --> 01:26:48,430
totally off so you know we're yeah so

1485
01:26:46,479 --> 01:26:50,379
you know it looks like our ID at chunk

1486
01:26:48,430 --> 01:26:52,119
is wrong but our eye header chunk is

1487
01:26:50,380 --> 01:26:56,770
correct probably something like that

1488
01:26:52,119 --> 01:26:59,739
meaning we got like halfway there so

1489
01:26:56,770 --> 01:27:03,280
that's good so you know this this

1490
01:26:59,739 --> 01:27:04,599
probably came through correctly but the

1491
01:27:03,279 --> 01:27:07,539
rest of it didn't you know like

1492
01:27:04,600 --> 01:27:09,130
something something went wrong there I

1493
01:27:07,539 --> 01:27:10,390
it would be nice if there was a way I

1494
01:27:09,130 --> 01:27:12,340
don't know if someone would complain

1495
01:27:10,390 --> 01:27:14,619
about errors in the stream properly like

1496
01:27:12,340 --> 01:27:17,170
camp or somebody probably not but no

1497
01:27:14,619 --> 01:27:18,840
once no one's probably gonna say what's

1498
01:27:17,170 --> 01:27:21,100
wrong with the stream unfortunately

1499
01:27:18,840 --> 01:27:24,220
right it's yeah it's just gonna say it's

1500
01:27:21,100 --> 01:27:26,020
corrupted so unfortunately we may have

1501
01:27:24,220 --> 01:27:27,110
to go look at our own reader code to

1502
01:27:26,020 --> 01:27:28,940
determine

1503
01:27:27,109 --> 01:27:34,489
call our own reader code and see what

1504
01:27:28,939 --> 01:27:40,909
happens which actually can we do that by

1505
01:27:34,489 --> 01:27:45,699
the way let's do a Hail Mary first who

1506
01:27:40,909 --> 01:27:45,699
knows maybe it's right it's not gonna be

1507
01:27:48,909 --> 01:27:54,769
yeah

1508
01:27:50,180 --> 01:27:57,289
unsurprisingly um so I think we actually

1509
01:27:54,770 --> 01:27:59,570
can use our code can tweet because we've

1510
01:27:57,289 --> 01:28:02,779
got one of these things in here like

1511
01:27:59,569 --> 01:28:04,819
test PNG which we could build and then

1512
01:28:02,779 --> 01:28:07,279
run it on one of these things and you

1513
01:28:04,819 --> 01:28:10,099
know step through a nice simple case

1514
01:28:07,279 --> 01:28:11,509
there I don't actually remember where

1515
01:28:10,100 --> 01:28:14,660
that is but I thought we had something

1516
01:28:11,510 --> 01:28:20,119
like that yeah this thing we just maybe

1517
01:28:14,659 --> 01:28:23,630
build this thing I don't remember what

1518
01:28:20,119 --> 01:28:30,680
that does but absolutely there's yeah

1519
01:28:23,630 --> 01:28:33,199
here it is right so in theory if we call

1520
01:28:30,680 --> 01:28:35,690
this thing on one of the bitmaps that we

1521
01:28:33,199 --> 01:28:37,429
like you know pulled out we should be

1522
01:28:35,689 --> 01:28:40,489
able to like step through the code and

1523
01:28:37,430 --> 01:28:42,050
see like if we can read it so because

1524
01:28:40,489 --> 01:28:44,059
the first step would be let's get us

1525
01:28:42,050 --> 01:28:47,449
reading it because that we should be

1526
01:28:44,060 --> 01:28:49,100
able to do directly and then we can go

1527
01:28:47,449 --> 01:28:50,750
find out what other stuff that maybe

1528
01:28:49,100 --> 01:28:52,640
we're not paying attention to because we

1529
01:28:50,750 --> 01:28:53,750
don't care if the PNG is correct we just

1530
01:28:52,640 --> 01:28:56,000
care if it has the stuff in it that we

1531
01:28:53,750 --> 01:28:58,609
look for then we could figure out what

1532
01:28:56,000 --> 01:29:00,020
of that is not in there and then we're

1533
01:28:58,609 --> 01:29:01,819
done because then you know we were

1534
01:29:00,020 --> 01:29:03,170
writing out things that can be loaded by

1535
01:29:01,819 --> 01:29:07,309
a third-party tool which we would like

1536
01:29:03,170 --> 01:29:08,869
to do that we've an artist needs to go

1537
01:29:07,310 --> 01:29:10,100
in and edit like one of the font bitmaps

1538
01:29:08,869 --> 01:29:11,720
or something or if we just wanted like

1539
01:29:10,100 --> 01:29:13,220
to plug it by open it and or

1540
01:29:11,720 --> 01:29:14,720
something we can do we don't we don't

1541
01:29:13,220 --> 01:29:18,740
want to be the only people who can read

1542
01:29:14,720 --> 01:29:19,850
it right so let's go ahead and make that

1543
01:29:18,739 --> 01:29:23,000
happen

1544
01:29:19,850 --> 01:29:26,680
I'm gonna do a build of everything there

1545
01:29:23,000 --> 01:29:31,609
and then I'm going to open up remedy

1546
01:29:26,680 --> 01:29:32,180
let's go ahead and and set the debug to

1547
01:29:31,609 --> 01:29:33,460
be

1548
01:29:32,180 --> 01:29:37,360
[Music]

1549
01:29:33,460 --> 01:29:40,390
Tess P&amp;G the command-line arguments for

1550
01:29:37,359 --> 01:29:42,309
what again okay so RGB and alpha out so

1551
01:29:40,390 --> 01:29:48,480
we just need like what's a what's an

1552
01:29:42,310 --> 01:29:48,480
example file in in W temp thought oops

1553
01:29:48,539 --> 01:29:57,430
so we've got liberation mono Oh a like 1

1554
01:29:54,069 --> 01:30:01,799
1 1 1 right so there's an input Oh temp

1555
01:29:57,430 --> 01:30:08,110
font and then we just need a temp font

1556
01:30:01,800 --> 01:30:11,890
out RGB dot BMP and W temp font out

1557
01:30:08,109 --> 01:30:15,789
alpha dot BMP let's go ahead and save

1558
01:30:11,890 --> 01:30:17,860
that into our debug directory so that we

1559
01:30:15,789 --> 01:30:27,880
can you know switch to it again as

1560
01:30:17,859 --> 01:30:30,460
necessary loading up there it is so

1561
01:30:27,880 --> 01:30:32,319
running it we should get okay so great

1562
01:30:30,460 --> 01:30:34,060
you know we air out which is exactly

1563
01:30:32,319 --> 01:30:36,009
what we want so hopefully we can just

1564
01:30:34,060 --> 01:30:37,770
now step through here and like let's see

1565
01:30:36,010 --> 01:30:46,380
how far we get

1566
01:30:37,770 --> 01:30:49,950
oops I was meant to step into that yeah

1567
01:30:46,380 --> 01:30:52,659
so in here we're gonna load the header

1568
01:30:49,949 --> 01:30:58,539
let's take a look at the header see what

1569
01:30:52,659 --> 01:31:00,639
it says chunk header there's the eye

1570
01:30:58,539 --> 01:31:04,510
header chunk it's backwards cuz Indians

1571
01:31:00,640 --> 01:31:06,460
swapped remember from what we would

1572
01:31:04,510 --> 01:31:09,280
normally think of it as we're gonna

1573
01:31:06,460 --> 01:31:11,560
consume the chunk footer we're gonna

1574
01:31:09,279 --> 01:31:13,449
look at this and get all that garbage

1575
01:31:11,560 --> 01:31:15,820
looks like that so I'll print it out

1576
01:31:13,449 --> 01:31:18,039
flips print it out for us hasn't been

1577
01:31:15,819 --> 01:31:18,579
flushed yet though so let's look at it

1578
01:31:18,039 --> 01:31:21,159
ourselves

1579
01:31:18,579 --> 01:31:22,960
here's eye header the width and height

1580
01:31:21,159 --> 01:31:26,079
the bit depth the color type that all

1581
01:31:22,960 --> 01:31:28,480
looks good so if we think it's supported

1582
01:31:26,079 --> 01:31:30,340
and that's good so now we're gonna go

1583
01:31:28,479 --> 01:31:32,319
here and see the eye that chunk

1584
01:31:30,340 --> 01:31:33,850
hopefully let's take a look at that

1585
01:31:32,319 --> 01:31:35,880
chunk header and just see what the size

1586
01:31:33,850 --> 01:31:35,880
is

1587
01:31:39,260 --> 01:31:49,940
that looks okay this should be the end

1588
01:31:46,460 --> 01:31:51,649
of chunk and we should now be done so

1589
01:31:49,939 --> 01:31:53,629
now we're gonna start consuming stuff

1590
01:31:51,649 --> 01:31:56,179
there's an IDOT header that comes first

1591
01:31:53,630 --> 01:31:56,900
so let's take a look at what that looks

1592
01:31:56,180 --> 01:32:05,920
like

1593
01:31:56,899 --> 01:32:05,920
oops no okay there we go right ahead

1594
01:32:06,500 --> 01:32:13,069
we've got a Z lib method flags of eight

1595
01:32:08,479 --> 01:32:14,119
and an additional flags of zero I think

1596
01:32:13,069 --> 01:32:18,259
that's what we want

1597
01:32:14,119 --> 01:32:20,599
yep and now we'll come through here and

1598
01:32:18,260 --> 01:32:22,190
try to allocate memory for everything

1599
01:32:20,600 --> 01:32:25,340
that should be trivial because the width

1600
01:32:22,189 --> 01:32:27,559
and height looked fine we read the first

1601
01:32:25,340 --> 01:32:30,050
chunk so we're gonna load in B final

1602
01:32:27,560 --> 01:32:35,420
what does it say it's a zero that's

1603
01:32:30,050 --> 01:32:37,310
totally wrong I wanted it to be one so I

1604
01:32:35,420 --> 01:32:39,289
guess that's a screw-up

1605
01:32:37,310 --> 01:32:43,039
so that's the first thing we need to go

1606
01:32:39,289 --> 01:32:45,340
fix and then we're gonna can consume B

1607
01:32:43,039 --> 01:32:51,380
type I think I forgot to write that

1608
01:32:45,340 --> 01:32:55,090
entirely so let's go fix that and then

1609
01:32:51,380 --> 01:32:58,130
we'll restart so looking back at our

1610
01:32:55,090 --> 01:33:01,449
nonsense here I'm gonna go ahead and say

1611
01:32:58,130 --> 01:33:04,579
that that argues 401 as the screen byte

1612
01:33:01,449 --> 01:33:08,449
in here then we've got is it what is it

1613
01:33:04,579 --> 01:33:11,329
another what do we consume 4/4 beat for

1614
01:33:08,449 --> 01:33:18,139
beat type it's two bits so for some

1615
01:33:11,329 --> 01:33:20,390
reason the type here is two bits so you

1616
01:33:18,140 --> 01:33:22,039
know who knows I guess you know this is

1617
01:33:20,390 --> 01:33:25,510
actually let's just call this what it

1618
01:33:22,039 --> 01:33:25,510
actually is on the other side right

1619
01:33:30,198 --> 01:33:36,719
so right after B final we actually need

1620
01:33:33,208 --> 01:33:43,920
B type to be written as well so we need

1621
01:33:36,719 --> 01:33:46,769
like to keep this going here so this

1622
01:33:43,920 --> 01:33:52,800
stream bite thing that's the final and

1623
01:33:46,769 --> 01:33:56,489
that's B type and in here we just need

1624
01:33:52,800 --> 01:33:59,429
to now write that one out as an

1625
01:33:56,488 --> 01:34:04,919
additional value okay

1626
01:33:59,429 --> 01:34:06,569
so let's save that off and rerun the

1627
01:34:04,920 --> 01:34:08,578
program because remember we have to

1628
01:34:06,569 --> 01:34:12,268
actually run the thing to update those

1629
01:34:08,578 --> 01:34:14,759
those pngs before we try to debug again

1630
01:34:12,269 --> 01:34:18,150
because otherwise they won't actually

1631
01:34:14,760 --> 01:34:20,610
have been changed so let's jump now

1632
01:34:18,149 --> 01:34:22,279
directly down here since we suspect most

1633
01:34:20,609 --> 01:34:24,899
of the other things are working so far

1634
01:34:22,279 --> 01:34:27,630
let's go ahead and consume be final and

1635
01:34:24,899 --> 01:34:30,118
we want that to be one it is that's good

1636
01:34:27,630 --> 01:34:36,389
let's consume B type we want B type to

1637
01:34:30,118 --> 01:34:41,639
be zero it is we now need to oh but wait

1638
01:34:36,389 --> 01:34:44,760
but wait this is just totally not

1639
01:34:41,639 --> 01:34:50,849
correct I was why did I freak out there

1640
01:34:44,760 --> 01:34:55,099
this is one bit and two bits I'm just an

1641
01:34:50,849 --> 01:34:55,099
idiot I did it right the first time

1642
01:35:02,659 --> 01:35:12,750
so that was not incorrect I'm just an

1643
01:35:06,180 --> 01:35:17,700
idiot so it's it's actually that that's

1644
01:35:12,750 --> 01:35:21,180
what's supposed to be right so no I was

1645
01:35:17,699 --> 01:35:22,800
I was not I was I was right that this

1646
01:35:21,180 --> 01:35:24,990
has to be changed but I shouldn't have

1647
01:35:22,800 --> 01:35:25,470
changed that other part okay so let's do

1648
01:35:24,989 --> 01:35:29,699
that again

1649
01:35:25,470 --> 01:35:32,310
in a less stupid way so let's go ahead

1650
01:35:29,699 --> 01:35:34,109
and step through here now again be type

1651
01:35:32,310 --> 01:35:36,570
and be final should be 1 and 0 and they

1652
01:35:34,109 --> 01:35:39,210
are it should now flush to the end of

1653
01:35:36,569 --> 01:35:41,159
the byte which is why again I saying

1654
01:35:39,210 --> 01:35:43,980
these these are bit level values not

1655
01:35:41,159 --> 01:35:45,869
byte values let's see what the Len value

1656
01:35:43,979 --> 01:35:48,839
is that we read in let's see what the

1657
01:35:45,869 --> 01:35:53,909
end Len value is that we read in those

1658
01:35:48,840 --> 01:35:58,170
are ok we now have to put that out put

1659
01:35:53,909 --> 01:36:02,189
that source out there I'm gonna have to

1660
01:35:58,170 --> 01:36:03,720
actually jump forward to here there's

1661
01:36:02,189 --> 01:36:07,819
not a row there is a run to cursor does

1662
01:36:03,720 --> 01:36:07,820
that work oh nice ok great

1663
01:36:16,060 --> 01:36:20,800
doesn't make a lot of sense does it

1664
01:36:35,630 --> 01:36:48,430
oh so this is not encoded the way I

1665
01:36:39,020 --> 01:36:48,430
thought it was what

1666
01:36:48,479 --> 01:36:52,159
if you have a Len

1667
01:37:03,609 --> 01:37:08,679
all right so I see what I did wrong this

1668
01:37:06,340 --> 01:37:12,430
loop is actually totally weird it's not

1669
01:37:08,680 --> 01:37:14,110
just let me grab some specific amount of

1670
01:37:12,430 --> 01:37:18,570
data it's a little bit more confusing

1671
01:37:14,109 --> 01:37:27,489
than that so we do a while length here

1672
01:37:18,569 --> 01:37:29,199
and we actually read in so we say this

1673
01:37:27,489 --> 01:37:31,599
this just allows us to clamp so we don't

1674
01:37:29,199 --> 01:37:35,550
actually read outside the boundaries but

1675
01:37:31,600 --> 01:37:39,720
then we actually consume that much data

1676
01:37:35,550 --> 01:37:41,949
however much we wanted here and we I

1677
01:37:39,720 --> 01:37:43,990
guess we're just using well no I guess

1678
01:37:41,949 --> 01:37:48,189
that that is what that's doing so like

1679
01:37:43,989 --> 01:37:49,840
why what happened there why did our I'm

1680
01:37:48,189 --> 01:37:51,129
gonna reset that so what what happened

1681
01:37:49,840 --> 01:37:53,829
something weird happened there I

1682
01:37:51,130 --> 01:37:55,090
understand so it was just what I thought

1683
01:37:53,829 --> 01:37:58,710
it was but for some reason something

1684
01:37:55,090 --> 01:38:03,720
weird happened so if I come through here

1685
01:37:58,710 --> 01:38:19,409
I've got a Len oops

1686
01:38:03,720 --> 01:38:19,409
of 61 6 right I set use Len oops

1687
01:38:19,500 --> 01:38:32,229
to be that we consume that much right

1688
01:38:24,340 --> 01:38:34,690
eye that's gonna like copy all this

1689
01:38:32,229 --> 01:38:36,759
stuff and then when we get to the end

1690
01:38:34,689 --> 01:38:44,319
this is not gonna go down look at all

1691
01:38:36,760 --> 01:38:50,619
right what what happened was this even

1692
01:38:44,319 --> 01:38:52,359
working before did we screw up this code

1693
01:38:50,619 --> 01:38:55,380
path I mean look at that how is that

1694
01:38:52,359 --> 01:38:55,380
possibly right

1695
01:39:18,899 --> 01:39:24,509
I mean there's just no way that's right

1696
01:39:21,560 --> 01:39:26,750
that code has to look like this doesn't

1697
01:39:24,510 --> 01:39:26,750
it

1698
01:39:30,439 --> 01:39:45,199
where's my where's that that code has to

1699
01:39:35,069 --> 01:39:48,630
look like this right I mean it's gotta

1700
01:39:45,199 --> 01:39:52,939
there's no there's no way that the that

1701
01:39:48,630 --> 01:39:52,940
could have been correct I argue

1702
01:40:10,340 --> 01:40:16,350
yeah that's what it should do right

1703
01:40:14,119 --> 01:40:23,430
maybe I'm wrong about that but I think

1704
01:40:16,350 --> 01:40:25,829
that's correct all right so it looks

1705
01:40:23,430 --> 01:40:27,630
like we still have a problem here which

1706
01:40:25,829 --> 01:40:29,100
is that we didn't end up at the

1707
01:40:27,630 --> 01:40:37,920
destination where we thought we were

1708
01:40:29,100 --> 01:40:40,020
gonna so we're still we're a little bit

1709
01:40:37,920 --> 01:40:43,710
off look we didn't fill all the pixels

1710
01:40:40,020 --> 01:40:46,560
that we thought that we should write so

1711
01:40:43,710 --> 01:40:49,439
whatever that Len is the Lyn does not

1712
01:40:46,560 --> 01:40:52,890
appear to be correct for the number of

1713
01:40:49,439 --> 01:40:56,369
pixels that we thought we had so for

1714
01:40:52,890 --> 01:41:02,480
example like it was what 62 16 or

1715
01:40:56,369 --> 01:41:02,479
whatever oops

1716
01:41:04,189 --> 01:41:08,000
that does seem correct

1717
01:41:18,899 --> 01:41:29,009
Oh but we need to leave room for the

1718
01:41:22,189 --> 01:41:32,000
filter because every row has an

1719
01:41:29,010 --> 01:41:35,310
additional value stuck in it for PNG

1720
01:41:32,000 --> 01:41:40,880
right I'm actually starting to remember

1721
01:41:35,310 --> 01:41:43,620
how this works now so every row has that

1722
01:41:40,880 --> 01:41:45,329
you know that thing that's at the start

1723
01:41:43,619 --> 01:41:52,140
of the row that says which filter mode

1724
01:41:45,329 --> 01:41:53,550
it uses specifically filter mode zero is

1725
01:41:52,140 --> 01:41:55,400
what we want which is to say that you

1726
01:41:53,550 --> 01:41:57,989
don't have to do anything to the pixels

1727
01:41:55,399 --> 01:42:00,500
but you still need that on every row

1728
01:41:57,989 --> 01:42:03,090
even if you're not compressing and

1729
01:42:00,500 --> 01:42:05,939
there's no way to tell it not to do that

1730
01:42:03,090 --> 01:42:08,940
so we actually do need a thing here

1731
01:42:05,939 --> 01:42:11,309
that's gonna actually this this nonsense

1732
01:42:08,939 --> 01:42:14,759
and in fact that kind of makes me want

1733
01:42:11,310 --> 01:42:16,740
to write these out in a way that would

1734
01:42:14,760 --> 01:42:22,770
allow us to do things a little bit

1735
01:42:16,739 --> 01:42:24,449
better anyway so for example Jimmy we

1736
01:42:22,770 --> 01:42:26,370
could just move this for loop widen this

1737
01:42:24,449 --> 01:42:28,829
for loop a little bit later and then not

1738
01:42:26,369 --> 01:42:30,720
actually have this problem so okay so

1739
01:42:28,829 --> 01:42:34,170
that might be fine all right so let's

1740
01:42:30,720 --> 01:42:37,170
just cheese this out for now though and

1741
01:42:34,170 --> 01:42:39,359
then we can we can play with it a little

1742
01:42:37,170 --> 01:42:41,130
bit more so I'm gonna go ahead and do a

1743
01:42:39,359 --> 01:42:45,359
thing here that actually writes the oops

1744
01:42:41,130 --> 01:42:48,720
that writes these out in a for loop just

1745
01:42:45,359 --> 01:42:51,319
for a second so this is the why we're

1746
01:42:48,720 --> 01:42:54,360
gonna go through the entire thing

1747
01:42:51,319 --> 01:42:57,659
writing out the pixels here and we're

1748
01:42:54,359 --> 01:42:59,189
gonna write those out as whip times for

1749
01:42:57,659 --> 01:43:02,670
right so we're going to write out those

1750
01:42:59,189 --> 01:43:05,339
in rows and each time we do before we do

1751
01:43:02,670 --> 01:43:07,949
we're going to write out like basically

1752
01:43:05,340 --> 01:43:11,460
a garbage byte right that's just a like

1753
01:43:07,949 --> 01:43:16,260
no filter so we're gonna say like write

1754
01:43:11,460 --> 01:43:19,350
out no filter then write out this the

1755
01:43:16,260 --> 01:43:21,900
pixels for that row and that's actually

1756
01:43:19,350 --> 01:43:24,539
going to be the the data that we use for

1757
01:43:21,899 --> 01:43:26,009
pixels and then we can broaden this out

1758
01:43:24,539 --> 01:43:27,659
and make it so that we write like one

1759
01:43:26,010 --> 01:43:31,199
row per I dad or something that allow us

1760
01:43:27,659 --> 01:43:32,750
to have arbitrarily large images so that

1761
01:43:31,199 --> 01:43:34,399
seems fine to me

1762
01:43:32,750 --> 01:43:42,470
and that would get us out of the

1763
01:43:34,399 --> 01:43:45,439
business there hopefully yeah that would

1764
01:43:42,470 --> 01:43:47,270
get us out of the business of having to

1765
01:43:45,439 --> 01:43:48,319
insert those into the image or something

1766
01:43:47,270 --> 01:43:50,150
weird like that because that way we just

1767
01:43:48,319 --> 01:43:52,939
write a write them out like interleaved

1768
01:43:50,149 --> 01:43:54,549
with the filtering mode I think that

1769
01:43:52,939 --> 01:43:59,599
would do it

1770
01:43:54,550 --> 01:44:00,529
the only problem there is well actually

1771
01:43:59,600 --> 01:44:05,810
don't think there is a problem I think

1772
01:44:00,529 --> 01:44:08,079
that's it right all right so there's

1773
01:44:05,810 --> 01:44:12,530
that version now let's try this again

1774
01:44:08,079 --> 01:44:16,699
and see where we end up I don't know

1775
01:44:12,529 --> 01:44:18,019
where did we end up there we go

1776
01:44:16,699 --> 01:44:21,220
so we still look like we're under

1777
01:44:18,020 --> 01:44:23,360
flowing here somewhere

1778
01:44:21,220 --> 01:44:26,300
looks like we're under flowing in the

1779
01:44:23,359 --> 01:44:29,469
actual chunk reboot did I mess up the

1780
01:44:26,300 --> 01:44:29,470
size calculation there somehow

1781
01:44:33,748 --> 01:44:36,710
I did

1782
01:44:54,939 --> 01:45:01,719
okay uh let's see here this should now

1783
01:44:58,329 --> 01:45:04,090
actually fill the length and hopefully

1784
01:45:01,720 --> 01:45:10,449
stop at the correct place let's see if

1785
01:45:04,090 --> 01:45:13,300
it actually does there we go alright so

1786
01:45:10,449 --> 01:45:16,689
now we can look and see if our reader

1787
01:45:13,300 --> 01:45:21,970
can at least read our writer which is a

1788
01:45:16,689 --> 01:45:23,559
good start um let's see now it doesn't

1789
01:45:21,970 --> 01:45:25,570
look right right I don't see the data

1790
01:45:23,560 --> 01:45:28,690
there so we're still screwing something

1791
01:45:25,569 --> 01:45:32,130
up there right although I don't know

1792
01:45:28,689 --> 01:45:35,019
maybe we've we may have improved the

1793
01:45:32,130 --> 01:45:38,260
usability of this in terms of errors in

1794
01:45:35,020 --> 01:45:39,820
the stream though nope not quite so

1795
01:45:38,260 --> 01:45:40,390
we're still a little bit off but we're

1796
01:45:39,819 --> 01:45:43,239
getting closer

1797
01:45:40,390 --> 01:45:45,820
alright so I'll leave it there and we

1798
01:45:43,239 --> 01:45:47,139
will go to tomorrow will do with the

1799
01:45:45,819 --> 01:45:48,609
debugging but we should be able to get

1800
01:45:47,140 --> 01:45:50,710
it working that's mostly everything

1801
01:45:48,609 --> 01:45:54,119
right so now we just have to go through

1802
01:45:50,710 --> 01:45:56,859
and and be a little bit more diligent

1803
01:45:54,119 --> 01:45:58,449
about actually getting all of the stuff

1804
01:45:56,859 --> 01:46:00,159
written out properly so I'm sure there's

1805
01:45:58,449 --> 01:46:04,809
just some stupid stuff that's happening

1806
01:46:00,159 --> 01:46:06,699
in here Oh for example every time we

1807
01:46:04,810 --> 01:46:10,870
write out a line we have to advance this

1808
01:46:06,699 --> 01:46:14,069
so this is actually whatever the pixel

1809
01:46:10,869 --> 01:46:16,869
pointer is actually pixels is 32-bit

1810
01:46:14,069 --> 01:46:23,529
okay so I can just do this it's actually

1811
01:46:16,869 --> 01:46:26,949
gonna do that so that may actually have

1812
01:46:23,529 --> 01:46:30,630
been the majority of that bug there let

1813
01:46:26,949 --> 01:46:30,630
me let me double check let's just see

1814
01:46:32,550 --> 01:46:40,449
hmm let's see if that improve anything

1815
01:46:36,810 --> 01:46:42,100
just not appear to have but you saw with

1816
01:46:40,449 --> 01:46:45,579
the bug was there right like we were

1817
01:46:42,100 --> 01:46:47,910
writing out rows but those rows were not

1818
01:46:45,579 --> 01:46:50,260
actually didn't didn't actually advance

1819
01:46:47,909 --> 01:46:52,359
so we have to make sure that we move the

1820
01:46:50,260 --> 01:46:55,210
pixel pointer forwards each time that we

1821
01:46:52,359 --> 01:46:58,029
actually write it right in order to have

1822
01:46:55,210 --> 01:47:00,819
anything show up in the file why we

1823
01:46:58,029 --> 01:47:04,029
don't see anything I'm not sure because

1824
01:47:00,819 --> 01:47:06,009
it looks like we are actually processing

1825
01:47:04,029 --> 01:47:08,349
that stuff out

1826
01:47:06,010 --> 01:47:10,720
but for some reason we're not actually

1827
01:47:08,350 --> 01:47:13,480
getting we're not actually seeing any

1828
01:47:10,720 --> 01:47:16,060
data they're not even garbage so

1829
01:47:13,479 --> 01:47:20,849
something is still a little bit off in a

1830
01:47:16,060 --> 01:47:20,850
way that that data's being pushed

1831
01:47:28,979 --> 01:47:33,779
just trying to think if there's anything

1832
01:47:30,760 --> 01:47:33,780
stupid we're doing though

1833
01:47:40,498 --> 01:47:53,998
I don't think so that still that seems

1834
01:47:47,399 --> 01:47:55,649
mostly correct to me alright so like I

1835
01:47:53,998 --> 01:48:04,198
said I'll go ahead into the Q&amp;A and then

1836
01:47:55,649 --> 01:48:06,029
we will wrap it up looks like info bot

1837
01:48:04,198 --> 01:48:06,448
still doesn't doesn't listen to me on

1838
01:48:06,029 --> 01:48:11,158
this

1839
01:48:06,448 --> 01:48:13,439
and then that never likes listen to me

1840
01:48:11,158 --> 01:48:17,429
on that on that channel I have to do

1841
01:48:13,439 --> 01:48:19,939
have to do it on the on the handmade

1842
01:48:17,429 --> 01:48:19,940
network Channel

1843
01:48:39,779 --> 01:48:45,529
the iron footer is missing some swaps ah

1844
01:48:42,719 --> 01:48:45,529
yes you're right it is

1845
01:48:49,859 --> 01:48:54,809
unfortunately that's not our problem

1846
01:49:03,408 --> 01:49:07,549
spatial free I love that vertical header

1847
01:49:05,868 --> 01:49:11,509
peak in your for creditor is it a

1848
01:49:07,550 --> 01:49:20,329
default feature how can I get it no I

1849
01:49:11,510 --> 01:49:23,628
wrote that myself I don't know when or

1850
01:49:20,328 --> 01:49:25,688
if how that would be available more

1851
01:49:23,628 --> 01:49:25,689
broadly

1852
01:50:13,680 --> 01:50:22,780
is the rgba the same for bitmaps and

1853
01:50:16,869 --> 01:50:26,289
pngs um I don't remember I think the

1854
01:50:22,779 --> 01:50:28,539
answer is no but I just don't recall in

1855
01:50:26,289 --> 01:50:33,819
this particular case we literally don't

1856
01:50:28,539 --> 01:50:37,479
care because it's monochrome so we don't

1857
01:50:33,819 --> 01:50:39,479
have to actually know but we did have to

1858
01:50:37,479 --> 01:50:44,589
know when we actually did it originally

1859
01:50:39,479 --> 01:50:46,329
well you know the easiest way to tell

1860
01:50:44,590 --> 01:50:56,940
just me to look at our code so here's

1861
01:50:46,329 --> 01:51:02,680
the test PNG code yeah it's got swap are

1862
01:50:56,939 --> 01:51:08,009
in there so I think they're they're

1863
01:51:02,680 --> 01:51:08,010
swapped so being BMP is swapped from PNG

1864
01:51:22,538 --> 01:51:28,000
do you think machine learning can be

1865
01:51:24,738 --> 01:51:42,618
useful in games if yes in what way

1866
01:51:28,000 --> 01:51:44,270
mm-hmm I guess I'm not sure like I I

1867
01:51:42,618 --> 01:51:45,889
mean yeah I'm sure there'll be some

1868
01:51:44,270 --> 01:51:52,909
things you can do interesting with it

1869
01:51:45,889 --> 01:51:56,270
right the problem is I don't know to

1870
01:51:52,908 --> 01:52:00,198
what extent you really want learning in

1871
01:51:56,270 --> 01:52:01,219
games you know like I would think it

1872
01:52:00,198 --> 01:52:03,738
would probably something that is it's

1873
01:52:01,219 --> 01:52:05,989
more used like offline so like you know

1874
01:52:03,738 --> 01:52:10,968
you you might use machine learning

1875
01:52:05,988 --> 01:52:14,538
algorithms like outside of the game to

1876
01:52:10,969 --> 01:52:16,038
generate stuff for the game but then you

1877
01:52:14,538 --> 01:52:17,828
would probably not really want to do a

1878
01:52:16,038 --> 01:52:20,868
lot of machine learning at run time

1879
01:52:17,828 --> 01:52:23,359
because one of the things that makes

1880
01:52:20,868 --> 01:52:25,639
games fun are that there are like simple

1881
01:52:23,359 --> 01:52:29,328
understandable patterns that players can

1882
01:52:25,639 --> 01:52:31,460
learn about how the game works and if

1883
01:52:29,328 --> 01:52:37,308
the game is constantly like learning and

1884
01:52:31,460 --> 01:52:39,230
adapting that creates a less fun like

1885
01:52:37,309 --> 01:52:41,480
like I don't think there's a lot of use

1886
01:52:39,229 --> 01:52:44,269
for that in most games because most

1887
01:52:41,479 --> 01:52:47,468
games don't want to adapt to the player

1888
01:52:44,270 --> 01:52:53,750
that's like unsatisfying for the player

1889
01:52:47,469 --> 01:52:56,448
so in a sense I could see you wanting

1890
01:52:53,750 --> 01:52:59,029
that in certain games where if like the

1891
01:52:56,448 --> 01:53:03,488
whole point of your game is that you

1892
01:52:59,029 --> 01:53:03,488
want the AI to feel more like a human

1893
01:53:03,520 --> 01:53:08,300
but in most games you don't in most

1894
01:53:06,500 --> 01:53:10,368
games you don't want the AI to feel like

1895
01:53:08,300 --> 01:53:13,610
a human you want the ad to feel like an

1896
01:53:10,368 --> 01:53:15,469
AI right and so for most games I think

1897
01:53:13,609 --> 01:53:18,558
you might want more of an offline

1898
01:53:15,469 --> 01:53:20,630
learning it's what you would use and

1899
01:53:18,559 --> 01:53:24,170
then only in those circumstances where

1900
01:53:20,630 --> 01:53:26,960
you were trying to make the AI feel like

1901
01:53:24,170 --> 01:53:29,690
it learned then you could possibly

1902
01:53:26,960 --> 01:53:32,750
employ those techniques more like at the

1903
01:53:29,689 --> 01:53:34,779
actual time when the game is executing

1904
01:53:32,750 --> 01:53:34,779
right

1905
01:53:37,079 --> 01:53:40,829
we'll be able to get your current for

1906
01:53:38,850 --> 01:53:42,630
coder with the new version coming out

1907
01:53:40,829 --> 01:53:47,399
and maybe the sources for yours on the

1908
01:53:42,630 --> 01:53:51,869
handmade hero files so know the problem

1909
01:53:47,399 --> 01:53:55,019
is my for coder config as of like a

1910
01:53:51,869 --> 01:53:56,909
couple weeks ago I now just build it

1911
01:53:55,020 --> 01:54:00,600
directly into the Mali rocket codebase

1912
01:53:56,909 --> 01:54:04,109
so it's not distributable anymore I also

1913
01:54:00,600 --> 01:54:08,670
don't know like I don't think I'll

1914
01:54:04,109 --> 01:54:10,738
probably really even be using like it's

1915
01:54:08,670 --> 01:54:13,109
mostly just untethered now like I ended

1916
01:54:10,738 --> 01:54:15,449
up rewriting like almost all the edit

1917
01:54:13,109 --> 01:54:17,488
stuff to be what I wanted and so now I

1918
01:54:15,449 --> 01:54:19,349
can just really call my own renderer and

1919
01:54:17,488 --> 01:54:21,479
it's probably gonna be pretty pretty

1920
01:54:19,350 --> 01:54:27,180
divorced from for coder as a code base

1921
01:54:21,479 --> 01:54:30,679
so you know Allen will probably be doing

1922
01:54:27,180 --> 01:54:34,380
a lot of the stuff that we did together

1923
01:54:30,680 --> 01:54:37,110
that stuff will be shipping but I won't

1924
01:54:34,380 --> 01:54:38,579
be shipping an editor anymore because

1925
01:54:37,109 --> 01:54:41,759
it's just too hard for me to do that

1926
01:54:38,579 --> 01:54:43,469
that would be like another job for me to

1927
01:54:41,760 --> 01:54:45,239
try and like like I'd have to start

1928
01:54:43,469 --> 01:54:49,260
shipping my own editor basically which

1929
01:54:45,238 --> 01:54:51,779
is not something I'm going to do if that

1930
01:54:49,260 --> 01:54:53,430
makes sense because I'm not gonna like

1931
01:54:51,779 --> 01:54:59,279
support an editor or anything like that

1932
01:54:53,430 --> 01:55:01,500
like I'm not gonna do that so I would

1933
01:54:59,279 --> 01:55:04,649
say that like these you know a lot of

1934
01:55:01,500 --> 01:55:06,659
the stuff that you see coming into for

1935
01:55:04,649 --> 01:55:11,219
coder that I made will you know I

1936
01:55:06,659 --> 01:55:12,569
contributed the code back so that stuff

1937
01:55:11,219 --> 01:55:15,029
should make its way into the mainline

1938
01:55:12,569 --> 01:55:18,179
code over time but in terms of me

1939
01:55:15,029 --> 01:55:21,319
shipping my own editor version that

1940
01:55:18,180 --> 01:55:21,320
that's not gonna happen anymore

1941
01:55:34,510 --> 01:55:37,900
I see quite a lot of people moving into

1942
01:55:36,699 --> 01:55:40,059
more program software engineering

1943
01:55:37,899 --> 01:55:42,519
related jobs after doing some Academical

1944
01:55:40,060 --> 01:55:46,360
research not at all focused on Cee

1945
01:55:42,520 --> 01:55:48,370
related things physics chemistry etc do

1946
01:55:46,359 --> 01:55:50,170
you have any experience working with

1947
01:55:48,369 --> 01:55:51,729
people that didn't focus on coding for a

1948
01:55:50,170 --> 01:55:52,989
long time possibly not having any real

1949
01:55:51,729 --> 01:55:53,919
training in it what's the biggest

1950
01:55:52,989 --> 01:55:54,789
difference with people that have a

1951
01:55:53,920 --> 01:55:57,100
degree in Cee

1952
01:55:54,789 --> 01:56:01,350
or focused on programming from a young

1953
01:55:57,100 --> 01:56:05,050
age no I actually haven't ever really

1954
01:56:01,350 --> 01:56:10,620
worked with anyone at gas powered games

1955
01:56:05,050 --> 01:56:13,029
a long time ago in like 99 I briefly

1956
01:56:10,619 --> 01:56:16,420
only tangentially but briefly worked

1957
01:56:13,029 --> 01:56:20,019
with someone who was an English major

1958
01:56:16,420 --> 01:56:27,340
originally and I think switched to CS at

1959
01:56:20,020 --> 01:56:29,680
some point other than him I don't recall

1960
01:56:27,340 --> 01:56:32,699
working with anyone who wasn't pretty

1961
01:56:29,680 --> 01:56:32,700
much always a programmer

1962
01:56:37,350 --> 01:56:42,280
yeah I'm sorry III I have no I haven't

1963
01:56:40,600 --> 01:56:44,680
had any any personal experience with

1964
01:56:42,279 --> 01:56:47,429
that so I couldn't really say what the

1965
01:56:44,680 --> 01:56:47,430
differences would be

1966
01:56:51,828 --> 01:56:55,279
do you feel like explicit languages make

1967
01:56:53,868 --> 01:56:56,598
people more productive compared to

1968
01:56:55,279 --> 01:56:58,389
expressive language is I think

1969
01:56:56,599 --> 01:57:07,578
functional programmers program just for

1970
01:56:58,389 --> 01:57:13,039
masturbatory purposes um so I think

1971
01:57:07,578 --> 01:57:14,539
you're right for starters but I guess I

1972
01:57:13,039 --> 01:57:19,069
what I would say is it's a complicated

1973
01:57:14,539 --> 01:57:21,198
issue on the one hand if you design your

1974
01:57:19,069 --> 01:57:26,238
language to not be particularly

1975
01:57:21,198 --> 01:57:29,328
expressive then what you guarantee is

1976
01:57:26,238 --> 01:57:35,269
that the programmer can't do anything

1977
01:57:29,328 --> 01:57:37,519
too stupid right if you're gonna program

1978
01:57:35,270 --> 01:57:41,630
in straight C it's pretty hard to make a

1979
01:57:37,520 --> 01:57:44,780
program that's that bad at you know

1980
01:57:41,630 --> 01:57:47,270
mapping to the cpu because you have to

1981
01:57:44,779 --> 01:57:51,259
work pretty hard to create ridiculous

1982
01:57:47,270 --> 01:57:54,380
crap right on the other hand in

1983
01:57:51,260 --> 01:57:56,480
something like yeah ml or something you

1984
01:57:54,380 --> 01:57:59,210
can type probably ten lines of code and

1985
01:57:56,479 --> 01:58:00,589
create something that like is impossible

1986
01:57:59,210 --> 01:58:05,510
for a normal CPU to run efficiently

1987
01:58:00,590 --> 01:58:07,578
right so there's definitely something to

1988
01:58:05,510 --> 01:58:09,320
be said for thinking about the degree to

1989
01:58:07,578 --> 01:58:12,229
which your language allows programmers

1990
01:58:09,319 --> 01:58:21,828
to create things that are simply bad for

1991
01:58:12,229 --> 01:58:25,549
a CPU so you're not wrong that does

1992
01:58:21,828 --> 01:58:28,189
exist the problem is that you do need

1993
01:58:25,550 --> 01:58:31,969
ways for experienced programmers to use

1994
01:58:28,189 --> 01:58:34,129
less code to create more complex things

1995
01:58:31,969 --> 01:58:35,689
that they have specifically thought

1996
01:58:34,130 --> 01:58:41,770
about how they should work and have a

1997
01:58:35,689 --> 01:58:44,238
good idea for write C is to inexpressive

1998
01:58:41,770 --> 01:58:49,119
to allow those programmers to be

1999
01:58:44,238 --> 01:58:51,649
efficient and so you ideally want

2000
01:58:49,118 --> 01:58:53,899
something that's kind of in between the

2001
01:58:51,649 --> 01:58:56,719
two that no one's made yet but maybe

2002
01:58:53,899 --> 01:59:00,769
someday someone will that's kind of like

2003
01:58:56,719 --> 01:59:03,230
hey this language is still very good at

2004
01:59:00,770 --> 01:59:05,360
expressing things that CPU should do and

2005
01:59:03,229 --> 01:59:07,519
saying how they should do them

2006
01:59:05,359 --> 01:59:09,799
but it also allows the programmer to

2007
01:59:07,520 --> 01:59:11,900
start lofting up those concepts into

2008
01:59:09,800 --> 01:59:15,110
more complicated instructions that allow

2009
01:59:11,899 --> 01:59:16,729
the the compiler to do a lot of the

2010
01:59:15,109 --> 01:59:18,259
things that the programmer would have

2011
01:59:16,729 --> 01:59:21,619
had to have done by hand that are just

2012
01:59:18,260 --> 01:59:23,030
wrote and and that it doesn't need the

2013
01:59:21,619 --> 01:59:40,099
programmer doesn't need to specify how

2014
01:59:23,029 --> 01:59:41,599
they happen every time right you've

2015
01:59:40,100 --> 01:59:42,890
talked in the past about understand the

2016
01:59:41,600 --> 01:59:45,410
trade-offs and Safran elements such as

2017
01:59:42,890 --> 01:59:46,880
optimizing increasing complexity time

2018
01:59:45,409 --> 01:59:49,010
constraint in the context of readability

2019
01:59:46,880 --> 01:59:50,270
versus futures implemented there are

2020
01:59:49,010 --> 01:59:53,449
other things you keep in mind when

2021
01:59:50,270 --> 01:59:55,130
deciding how to spend your time um not

2022
01:59:53,449 --> 01:59:57,679
really you know I'm not a particularly

2023
01:59:55,130 --> 02:00:02,079
good programmer as far as like spending

2024
01:59:57,680 --> 02:00:04,400
time on like the highest priority stuff

2025
02:00:02,079 --> 02:00:06,199
that stems largely because I'm too

2026
02:00:04,399 --> 02:00:08,929
interested in solving problems a lot of

2027
02:00:06,199 --> 02:00:10,970
times which I don't really think is a

2028
02:00:08,930 --> 02:00:14,440
bad thing it just means that like I

2029
02:00:10,970 --> 02:00:19,430
wouldn't necessarily take my advice on

2030
02:00:14,439 --> 02:00:21,109
on prioritization right I think you want

2031
02:00:19,430 --> 02:00:23,060
people who tend to go off and try to

2032
02:00:21,109 --> 02:00:26,960
sort like the concept of Jack shaving

2033
02:00:23,060 --> 02:00:31,880
right I think actually you really want

2034
02:00:26,960 --> 02:00:34,130
people who like to do yak shaving but

2035
02:00:31,880 --> 02:00:36,710
you you only want the ones who come up

2036
02:00:34,130 --> 02:00:38,869
with something right so the reason that

2037
02:00:36,710 --> 02:00:40,340
a lot of times I think stuff like you

2038
02:00:38,869 --> 02:00:41,659
know going down rat holes gets a bad

2039
02:00:40,340 --> 02:00:43,819
name is because the people who go down

2040
02:00:41,659 --> 02:00:46,279
rat holes never actually do anything

2041
02:00:43,819 --> 02:00:47,689
down in the rat hole so they just wasted

2042
02:00:46,279 --> 02:00:49,159
their time right whereas people who

2043
02:00:47,689 --> 02:00:50,569
actually rattle on stuff and then come

2044
02:00:49,159 --> 02:00:52,010
up with a new way of doing things that's

2045
02:00:50,569 --> 02:00:54,469
really awesome those people I think are

2046
02:00:52,010 --> 02:00:56,500
pretty valuable and so I think you know

2047
02:00:54,470 --> 02:01:00,050
it's it's worth drawing that distinction

2048
02:00:56,500 --> 02:01:01,880
but in general I wouldn't say that you

2049
02:01:00,050 --> 02:01:02,840
want people who are good at like rat

2050
02:01:01,880 --> 02:01:05,000
holding and coming up with something

2051
02:01:02,840 --> 02:01:06,110
really cool at the end of it those

2052
02:01:05,000 --> 02:01:07,520
people are not necessarily the people

2053
02:01:06,109 --> 02:01:08,630
you want giving advice for the rest of

2054
02:01:07,520 --> 02:01:10,490
the team about like where to spend their

2055
02:01:08,630 --> 02:01:13,190
time though right so I think I'm a bad

2056
02:01:10,489 --> 02:01:14,960
person to ask about that because I'm

2057
02:01:13,189 --> 02:01:18,069
more of an rng kind of person and I'd

2058
02:01:14,960 --> 02:01:18,069
like to do those sorts of things

2059
02:01:19,270 --> 02:01:24,550
but you know that you only need so many

2060
02:01:21,970 --> 02:01:25,690
people doing that and you only need

2061
02:01:24,550 --> 02:01:28,420
people who actually come up with

2062
02:01:25,689 --> 02:01:30,189
something when they go do stuff you

2063
02:01:28,420 --> 02:01:35,699
don't really need people doing that who

2064
02:01:30,189 --> 02:01:38,079
just waste their time right so that's I

2065
02:01:35,699 --> 02:01:39,399
think probably how you would draw it you

2066
02:01:38,079 --> 02:01:41,789
know how you would talk about that

2067
02:01:39,399 --> 02:01:41,789
distinction

2068
02:02:04,609 --> 02:02:12,439
yeah George I don't know when yak

2069
02:02:07,819 --> 02:02:16,188
shaving became a thing rat holing was

2070
02:02:12,439 --> 02:02:18,499
kind of more the phrase that I used to

2071
02:02:16,189 --> 02:02:23,959
hear around that but yak shaving kind of

2072
02:02:18,498 --> 02:02:25,639
I assume I because it's kind of trying

2073
02:02:23,958 --> 02:02:28,398
to talk about a slightly different thing

2074
02:02:25,639 --> 02:02:32,179
so you know rat Holdings like oh I got a

2075
02:02:28,399 --> 02:02:33,559
you know do this PNG writer and then I

2076
02:02:32,179 --> 02:02:35,538
end up like spending a ton of time like

2077
02:02:33,559 --> 02:02:39,708
researching the origins of PNG and how

2078
02:02:35,538 --> 02:02:41,898
they worked and whatever so you know yak

2079
02:02:39,708 --> 02:02:43,668
shaving is kind of a term that that came

2080
02:02:41,899 --> 02:02:44,780
up to sort of talk about something a

2081
02:02:43,668 --> 02:02:46,639
little bit slightly different than that

2082
02:02:44,779 --> 02:02:48,498
I mean you don't really need another

2083
02:02:46,639 --> 02:02:49,729
term but you know it's worth noting that

2084
02:02:48,498 --> 02:02:51,019
there's a different thing there and so

2085
02:02:49,729 --> 02:02:54,079
what you actually means trying to refer

2086
02:02:51,019 --> 02:02:56,269
to is like the concept that in order to

2087
02:02:54,078 --> 02:02:59,378
do something you kept having other

2088
02:02:56,269 --> 02:03:03,109
things you needed to do first and so

2089
02:02:59,378 --> 02:03:05,358
someone comes in like you know two weeks

2090
02:03:03,109 --> 02:03:09,320
ago they were like we need to write this

2091
02:03:05,359 --> 02:03:12,019
PNG reader or writer and then two weeks

2092
02:03:09,319 --> 02:03:16,969
later they come back and you're working

2093
02:03:12,019 --> 02:03:19,609
on like a new device driver for the hard

2094
02:03:16,969 --> 02:03:22,338
drive right or something right and

2095
02:03:19,609 --> 02:03:24,260
they're like what happened and you're

2096
02:03:22,338 --> 02:03:26,269
like well you know I started running the

2097
02:03:24,260 --> 02:03:27,918
PNG writer but then I noticed that there

2098
02:03:26,269 --> 02:03:29,449
were these problems when I was actually

2099
02:03:27,918 --> 02:03:30,918
running things out I wasn't getting the

2100
02:03:29,448 --> 02:03:32,538
performance throughput that I thought I

2101
02:03:30,918 --> 02:03:33,948
should get so then I started profiling

2102
02:03:32,538 --> 02:03:35,179
the hard drive and I realized that the

2103
02:03:33,948 --> 02:03:36,948
hard drive was like writing things

2104
02:03:35,179 --> 02:03:38,149
really slowly and not exactly the speed

2105
02:03:36,948 --> 02:03:39,348
that it should have been and so then I

2106
02:03:38,149 --> 02:03:40,579
looked at why that was happening it

2107
02:03:39,349 --> 02:03:42,739
turns out you know blah blah blah blah

2108
02:03:40,578 --> 02:03:45,438
blah the reason they came from yak

2109
02:03:42,738 --> 02:03:47,208
shaving is because it's like they told

2110
02:03:45,439 --> 02:03:48,559
you to write a PNG reader and they come

2111
02:03:47,208 --> 02:03:51,198
back in two weeks and they see you just

2112
02:03:48,559 --> 02:03:52,820
like shaving a gak and you're like what

2113
02:03:51,198 --> 02:03:55,098
are you doing right and so it's just

2114
02:03:52,819 --> 02:03:56,779
this notion that like from something

2115
02:03:55,099 --> 02:03:58,639
that should have been relatively

2116
02:03:56,779 --> 02:04:01,338
straightforward they came back and found

2117
02:03:58,639 --> 02:04:04,519
you doing something totally unrelated to

2118
02:04:01,338 --> 02:04:08,510
anything but you have some coherent

2119
02:04:04,519 --> 02:04:10,010
explanation of like how you went through

2120
02:04:08,510 --> 02:04:12,309
the steps that actually got you there

2121
02:04:10,010 --> 02:04:12,309
right

2122
02:04:31,840 --> 02:04:35,980
we don't use libraries on the stream

2123
02:04:34,779 --> 02:04:38,979
everything has to be written from

2124
02:04:35,979 --> 02:04:41,049
scratch so you could certainly use SUV

2125
02:04:38,979 --> 02:04:43,719
image or something else to write a PNG

2126
02:04:41,050 --> 02:04:45,279
but you know the whole point of the

2127
02:04:43,720 --> 02:04:47,110
stream is to show how to write code if

2128
02:04:45,279 --> 02:04:49,809
all I show you how to do is download a

2129
02:04:47,109 --> 02:04:51,880
library well bad news folks

2130
02:04:49,810 --> 02:04:55,750
you'll be replaced by a is in about ten

2131
02:04:51,880 --> 02:04:57,760
years the AI that just uses Stack

2132
02:04:55,750 --> 02:05:00,670
Overflow and cut and paste the code is

2133
02:04:57,760 --> 02:05:04,739
gonna replace like 90% of programmers in

2134
02:05:00,670 --> 02:05:07,810
ten years I guarantee you it's coming

2135
02:05:04,739 --> 02:05:09,369
because like a lot of people who are you

2136
02:05:07,810 --> 02:05:11,770
know nominally programmers these days

2137
02:05:09,369 --> 02:05:13,960
are just a glorified cut and paste

2138
02:05:11,770 --> 02:05:15,370
engine and they really don't know how to

2139
02:05:13,960 --> 02:05:19,600
do anything other than like pipe

2140
02:05:15,369 --> 02:05:22,569
libraries together and cross their

2141
02:05:19,600 --> 02:05:25,960
fingers and that is gonna be automatable

2142
02:05:22,569 --> 02:05:29,590
I mean we're already getting the point

2143
02:05:25,960 --> 02:05:33,130
where programming systems are going to

2144
02:05:29,590 --> 02:05:36,250
be able to understand api's and wire

2145
02:05:33,130 --> 02:05:39,609
them together that's not gonna be that

2146
02:05:36,250 --> 02:05:41,350
big of a deal and so I think they're

2147
02:05:39,609 --> 02:05:42,699
gonna get there and so the only

2148
02:05:41,350 --> 02:05:44,289
programmers I think that'll be all that

2149
02:05:42,699 --> 02:05:48,550
useful are people who actually know how

2150
02:05:44,289 --> 02:05:52,239
to do something you know at the lower

2151
02:05:48,550 --> 02:05:53,529
level so I try to teach as much as

2152
02:05:52,239 --> 02:05:54,550
possible how to do that because I think

2153
02:05:53,529 --> 02:05:57,130
those are the only programmers gonna

2154
02:05:54,550 --> 02:06:02,590
remain valuable people who are literally

2155
02:05:57,130 --> 02:06:05,130
just like wiring stuff together I just

2156
02:06:02,590 --> 02:06:07,600
don't think they're gonna be necessary

2157
02:06:05,130 --> 02:06:09,699
you know if you go back and look at sort

2158
02:06:07,600 --> 02:06:14,470
of what happened as you know robots

2159
02:06:09,699 --> 02:06:15,939
automated away manufacturing you know

2160
02:06:14,470 --> 02:06:18,400
there's just not as many people

2161
02:06:15,939 --> 02:06:20,139
necessary to to build stuff anymore

2162
02:06:18,399 --> 02:06:21,429
and that's gonna be true of programming

2163
02:06:20,140 --> 02:06:24,130
right as soon as people start automating

2164
02:06:21,430 --> 02:06:25,630
it huge swaths of people who are

2165
02:06:24,130 --> 02:06:27,279
literally just the dude who puts the

2166
02:06:25,630 --> 02:06:29,079
bolt on the thing which is like the

2167
02:06:27,279 --> 02:06:31,840
equivalent of like I went and looked on

2168
02:06:29,079 --> 02:06:34,510
Stack Overflow and then I like used like

2169
02:06:31,840 --> 02:06:36,369
15 packages to print a stupid integer or

2170
02:06:34,510 --> 02:06:38,530
something right like those people are

2171
02:06:36,369 --> 02:06:40,539
just gone I mean that there's no y-you

2172
02:06:38,529 --> 02:06:41,829
know you don't need those people for

2173
02:06:40,539 --> 02:06:43,149
anything because they're not doing

2174
02:06:41,829 --> 02:06:43,630
anything right they're just doing what

2175
02:06:43,149 --> 02:06:50,079
an AI

2176
02:06:43,630 --> 02:06:51,400
and I think you know I don't know what

2177
02:06:50,079 --> 02:06:53,380
percentage of programmers that is but

2178
02:06:51,399 --> 02:06:55,479
it's it's pretty high nowadays because

2179
02:06:53,380 --> 02:06:57,310
there's just you know in in the in the

2180
02:06:55,479 --> 02:06:58,209
80s or something the percentage of

2181
02:06:57,310 --> 02:07:01,090
programmers who were doing something

2182
02:06:58,210 --> 02:07:02,408
like that is was incredibly low today I

2183
02:07:01,090 --> 02:07:04,270
think the percentage of printers that

2184
02:07:02,408 --> 02:07:05,829
are doing that is very very high because

2185
02:07:04,270 --> 02:07:08,230
there's thousands of programmers working

2186
02:07:05,829 --> 02:07:10,090
on things like Twitter which is you know

2187
02:07:08,229 --> 02:07:11,769
a very minor program or something like

2188
02:07:10,090 --> 02:07:14,489
that and so you just like what are all

2189
02:07:11,770 --> 02:07:15,659
these people doing you know they're not

2190
02:07:14,489 --> 02:07:17,710
[Music]

2191
02:07:15,658 --> 02:07:19,629
doing like you know all kinds of

2192
02:07:17,710 --> 02:07:20,739
hardcore super amazing programming where

2193
02:07:19,630 --> 02:07:22,150
they're doing just the stuff that you

2194
02:07:20,738 --> 02:07:24,309
can't possibly conceive of how any I

2195
02:07:22,149 --> 02:07:25,988
could ever do it it's like that's not

2196
02:07:24,310 --> 02:07:27,280
what's happening right and just the

2197
02:07:25,988 --> 02:07:28,839
number of them that there are you know

2198
02:07:27,279 --> 02:07:31,599
there aren't that many good programmers

2199
02:07:28,840 --> 02:07:35,190
right it's just not the case and so at

2200
02:07:31,600 --> 02:07:39,100
some point I think that that huge slack

2201
02:07:35,189 --> 02:07:40,569
just gets optimized away because there's

2202
02:07:39,100 --> 02:07:42,610
really just no meat I mean you just

2203
02:07:40,569 --> 02:07:46,090
don't need people who are just pushing

2204
02:07:42,609 --> 02:07:48,009
libraries around there's there's no

2205
02:07:46,090 --> 02:07:49,719
point the people who are interfacing

2206
02:07:48,010 --> 02:07:51,610
with those programmers will simply skip

2207
02:07:49,719 --> 02:07:56,619
the programmers and use some kind of

2208
02:07:51,609 --> 02:07:59,469
automatic generative tool to produce the

2209
02:07:56,619 --> 02:08:02,349
combination of stuff that they want and

2210
02:07:59,469 --> 02:08:05,020
they they won't need a programmer in the

2211
02:08:02,350 --> 02:08:06,520
loop at all right and so then the only

2212
02:08:05,020 --> 02:08:08,889
people I think that will still be around

2213
02:08:06,520 --> 02:08:11,889
are the people who are creating like new

2214
02:08:08,889 --> 02:08:13,329
stuff the engine maintainer z' the

2215
02:08:11,889 --> 02:08:16,920
people who are writing new languages the

2216
02:08:13,329 --> 02:08:18,819
people who are working on those AIS I

2217
02:08:16,920 --> 02:08:20,920
think that's really all you got left

2218
02:08:18,819 --> 02:08:23,069
because you just don't need people who

2219
02:08:20,920 --> 02:08:24,969
are just reconfiguring existing code

2220
02:08:23,069 --> 02:08:26,769
reconfiguring existing code to do

2221
02:08:24,969 --> 02:08:28,270
something else that that code could have

2222
02:08:26,770 --> 02:08:30,159
done but that no one had actually piped

2223
02:08:28,270 --> 02:08:33,090
together in a particular way that a eyes

2224
02:08:30,158 --> 02:08:37,539
will have that under control

2225
02:08:33,090 --> 02:08:38,679
that's my prediction anyway and the only

2226
02:08:37,539 --> 02:08:40,479
reason I say that is because that's what

2227
02:08:38,679 --> 02:08:42,100
happens to every other industry so it's

2228
02:08:40,479 --> 02:08:44,009
kind of I don't know why it wouldn't

2229
02:08:42,100 --> 02:08:46,480
happen to ours right

2230
02:08:44,010 --> 02:08:48,130
you know everyone probably always thinks

2231
02:08:46,479 --> 02:08:49,329
that their job is the one that only they

2232
02:08:48,130 --> 02:08:51,100
could do and you know

2233
02:08:49,329 --> 02:08:56,829
of course anything I can't do my job

2234
02:08:51,100 --> 02:08:58,770
it's like mal really you know every

2235
02:08:56,829 --> 02:09:01,479
industry that has no robots in it

2236
02:08:58,770 --> 02:09:02,410
eventually gets to be some percentage

2237
02:09:01,479 --> 02:09:06,119
robots

2238
02:09:02,409 --> 02:09:06,119
you really think ours is gonna be 0%

2239
02:09:07,199 --> 02:09:10,769
it's a pretty big wager

2240
02:09:25,979 --> 02:09:39,399
there's there's too much stuff in here I

2241
02:09:27,969 --> 02:09:41,050
my voice is getting sore yeah well I've

2242
02:09:39,399 --> 02:09:43,238
read the sequel I mean you know if you

2243
02:09:41,050 --> 02:09:49,739
want a really future-proof job I would

2244
02:09:43,238 --> 02:09:54,359
work on cogent man I mean cuz that's I I

2245
02:09:49,738 --> 02:09:54,359
that's where I think it's going you know

2246
02:09:57,448 --> 02:10:01,329
you know I would either specialize in

2247
02:09:59,710 --> 02:10:05,380
something that's gonna be very hard for

2248
02:10:01,329 --> 02:10:08,019
a eyes to do like maybe operating

2249
02:10:05,380 --> 02:10:09,310
systems development hard core engine

2250
02:10:08,020 --> 02:10:11,949
programming you know that sort of stuff

2251
02:10:09,310 --> 02:10:14,199
that'll probably be like further you

2252
02:10:11,948 --> 02:10:17,259
know it'll be later it'll take longer to

2253
02:10:14,198 --> 02:10:18,638
automate those away or I'd just get on

2254
02:10:17,260 --> 02:10:21,969
the automation penguin and say I'm gonna

2255
02:10:18,639 --> 02:10:24,130
make the stuff that replaces the you

2256
02:10:21,969 --> 02:10:25,420
know 50% of programmers who are just

2257
02:10:24,130 --> 02:10:27,909
googling Stock Exchange and then cutting

2258
02:10:25,420 --> 02:10:30,100
and pasting crap I'm just making piles

2259
02:10:27,908 --> 02:10:33,129
of crap and be like I'm gonna make the

2260
02:10:30,100 --> 02:10:34,360
crap pile program and you can just give

2261
02:10:33,130 --> 02:10:35,889
it these high-level directives and say

2262
02:10:34,359 --> 02:10:37,479
make me a crap pile that does this thing

2263
02:10:35,889 --> 02:10:39,460
and it's like how about this and you're

2264
02:10:37,479 --> 02:10:41,559
like sure probably out less bugs and

2265
02:10:39,460 --> 02:10:45,300
then the people we're replacing would

2266
02:10:41,560 --> 02:10:45,300
have put in there so off we go right

2267
02:10:46,979 --> 02:10:56,079
because I just like I don't I just don't

2268
02:10:52,929 --> 02:10:57,819
see any way that probably 90% of the web

2269
02:10:56,079 --> 02:10:59,369
things I interact with I don't see any

2270
02:10:57,819 --> 02:11:06,460
way those couldn't been made by an AI

2271
02:10:59,369 --> 02:11:07,750
right like you know the code for Gmail

2272
02:11:06,460 --> 02:11:09,069
could have easily been made by an AI and

2273
02:11:07,750 --> 02:11:13,750
it would have been better than the code

2274
02:11:09,069 --> 02:11:15,729
that that is up there now right the just

2275
02:11:13,750 --> 02:11:18,698
the front end right or like you know

2276
02:11:15,729 --> 02:11:19,959
that the more much much easier than that

2277
02:11:18,698 --> 02:11:23,979
would be like something even simpler

2278
02:11:19,960 --> 02:11:26,649
that the page the web page for my bank

2279
02:11:23,979 --> 02:11:28,839
my credit-card company right it's just

2280
02:11:26,649 --> 02:11:31,869
garbage right it's just it could have

2281
02:11:28,840 --> 02:11:32,650
taken a very high-level directive of

2282
02:11:31,869 --> 02:11:35,920
what that page

2283
02:11:32,649 --> 02:11:37,809
like and generated that code right and

2284
02:11:35,920 --> 02:11:40,960
it would have just spit out the same

2285
02:11:37,810 --> 02:11:43,510
stupid jQuery garbage into a giant

2286
02:11:40,960 --> 02:11:45,369
bloated web page that takes forever to

2287
02:11:43,510 --> 02:11:48,250
load and is slow but guess what that's

2288
02:11:45,369 --> 02:11:50,260
what I'm using right now so how hard is

2289
02:11:48,250 --> 02:11:55,420
that could that AI possibly be to make

2290
02:11:50,260 --> 02:11:58,960
right and so I feel like all that stuff

2291
02:11:55,420 --> 02:12:00,760
is super automatable now and it just

2292
02:11:58,960 --> 02:12:02,590
isn't because no one's doing it but I

2293
02:12:00,760 --> 02:12:04,090
think you could easily do that and then

2294
02:12:02,590 --> 02:12:06,100
you could just go around and like every

2295
02:12:04,090 --> 02:12:08,829
bank and say here you go here's the

2296
02:12:06,100 --> 02:12:11,890
webpage here's the entire web front-end

2297
02:12:08,829 --> 02:12:13,630
maker for you and you don't have to do

2298
02:12:11,890 --> 02:12:16,750
anything else right

2299
02:12:13,630 --> 02:12:18,010
and then you can just keep growing it

2300
02:12:16,750 --> 02:12:20,020
from there and it's like oh let's add

2301
02:12:18,010 --> 02:12:22,449
every let's add restaurant websites

2302
02:12:20,020 --> 02:12:24,640
let's add this that's a bat right eye

2303
02:12:22,448 --> 02:12:26,439
and you know people are already sort of

2304
02:12:24,640 --> 02:12:27,429
doing a version of this like Squarespace

2305
02:12:26,439 --> 02:12:30,549
or something like that that's just like

2306
02:12:27,429 --> 02:12:33,550
these templates right how hard is it to

2307
02:12:30,550 --> 02:12:35,529
go from that to whatever the rest of the

2308
02:12:33,550 --> 02:12:41,230
stuff is people normally pay programmers

2309
02:12:35,529 --> 02:12:43,210
to do with their back-end right um you

2310
02:12:41,229 --> 02:12:48,279
know I'm saying like it can't be that

2311
02:12:43,210 --> 02:12:50,829
hard to just start extending those

2312
02:12:48,279 --> 02:12:53,649
template base things so just having some

2313
02:12:50,829 --> 02:12:56,019
AI that's like hey now I can just make

2314
02:12:53,649 --> 02:12:57,519
my own stuff I don't need to do like it

2315
02:12:56,020 --> 02:12:59,830
doesn't have to all be templatized right

2316
02:12:57,520 --> 02:13:01,270
it can actually think a bunch about how

2317
02:12:59,829 --> 02:13:03,670
to like combine multiple things together

2318
02:13:01,270 --> 02:13:06,070
into making a new thing and then you

2319
02:13:03,670 --> 02:13:09,520
just you know off you go right so I just

2320
02:13:06,069 --> 02:13:11,198
I don't think you need most of the

2321
02:13:09,520 --> 02:13:12,909
programmers who are doing those things I

2322
02:13:11,198 --> 02:13:17,529
think you could just get rid of most of

2323
02:13:12,908 --> 02:13:20,799
them right by just starting to build

2324
02:13:17,529 --> 02:13:22,809
things that do the modicum of actual

2325
02:13:20,800 --> 02:13:28,539
real work they do just do it automatic

2326
02:13:22,810 --> 02:13:31,380
automatically you know I just don't

2327
02:13:28,539 --> 02:13:31,380
think that's going to be that hard

2328
02:14:06,329 --> 02:14:10,979
do you have a standard vector dynamic

2329
02:14:08,340 --> 02:14:14,579
array replacement akru also not using

2330
02:14:10,979 --> 02:14:17,489
standard we are not using standard for

2331
02:14:14,579 --> 02:14:20,909
anything in fact we do not include any

2332
02:14:17,489 --> 02:14:27,719
standard library stuff from the c++ side

2333
02:14:20,909 --> 02:14:31,590
of things we don't use any dynamic

2334
02:14:27,720 --> 02:14:33,390
arrays though either I don't think so we

2335
02:14:31,590 --> 02:14:34,289
never wrote a replacement for standard

2336
02:14:33,390 --> 02:14:37,470
vector because we just don't use

2337
02:14:34,289 --> 02:14:41,479
standard vector semantics anywhere

2338
02:14:37,470 --> 02:14:41,480
anyway that makes up

2339
02:14:46,078 --> 02:14:50,698
I wish you see 99 with MS vici but heard

2340
02:14:49,408 --> 02:14:52,170
it is not so well supported Microsoft's

2341
02:14:50,698 --> 02:14:54,928
could it be an issue for programming and

2342
02:14:52,170 --> 02:14:58,349
see with Windows um I don't know I

2343
02:14:54,929 --> 02:14:59,760
thought I thought MS BC now supports you

2344
02:14:58,349 --> 02:15:02,969
99 pretty well actually

2345
02:14:59,760 --> 02:15:06,869
but what I would say is window clang

2346
02:15:02,969 --> 02:15:08,550
works on Windows now totally fine right

2347
02:15:06,868 --> 02:15:11,639
out of the box you can just go download

2348
02:15:08,550 --> 02:15:13,590
clang for Windows and it supports C 99

2349
02:15:11,639 --> 02:15:16,469
and every other flavor see you might

2350
02:15:13,590 --> 02:15:19,889
want and it outputs pdbs and eggsy's in

2351
02:15:16,469 --> 02:15:21,840
native window format so you can just

2352
02:15:19,889 --> 02:15:26,210
skip the whole MS vc thing if you want

2353
02:15:21,840 --> 02:15:26,210
to I guess is what I would say

2354
02:15:32,628 --> 02:15:38,328
I mean here okay so guys here's another

2355
02:15:35,658 --> 02:15:39,978
thing just make your AI anytime it can't

2356
02:15:38,328 --> 02:15:41,299
figure something out just make it post a

2357
02:15:39,979 --> 02:15:46,399
Stack Overflow and wait for someone

2358
02:15:41,300 --> 02:15:47,628
answer the question right I mean again

2359
02:15:46,399 --> 02:15:49,280
that's what a lot of programmers do they

2360
02:15:47,628 --> 02:15:50,899
just like you know they don't know how

2361
02:15:49,279 --> 02:15:51,858
to do even basic stuff so they post on

2362
02:15:50,899 --> 02:15:52,579
Stack Exchange and they wait for a

2363
02:15:51,859 --> 02:15:54,820
printer actually knows what they're

2364
02:15:52,578 --> 02:15:58,069
doing to tell them so just do that

2365
02:15:54,819 --> 02:16:00,590
there's an AI that's a sellable AI right

2366
02:15:58,069 --> 02:16:02,288
just make an AI it tries it's best to

2367
02:16:00,590 --> 02:16:06,189
solve the thing that you asked it to do

2368
02:16:02,288 --> 02:16:09,259
any step it doesn't know it posts on

2369
02:16:06,189 --> 02:16:11,389
Stack Overflow the question if someone

2370
02:16:09,260 --> 02:16:15,168
closes the duplicate it looks at the one

2371
02:16:11,389 --> 02:16:18,639
it was told to look at and tries to grab

2372
02:16:15,168 --> 02:16:31,569
the code from there and weld it in right

2373
02:16:18,639 --> 02:16:31,569
get working on it do it right

2374
02:16:41,639 --> 02:16:45,469
I mean in savate I'll be there soon

2375
02:16:55,600 --> 02:16:59,760
alright I'm gonna call it quits

2376
02:17:13,558 --> 02:17:17,679
if some guy in twitch is writing is VI M

2377
02:17:15,909 --> 02:17:19,510
plug-in that you asked questions to and

2378
02:17:17,679 --> 02:17:21,549
it would look on Google or in a database

2379
02:17:19,510 --> 02:17:25,840
for code and paste it in on your cursor

2380
02:17:21,549 --> 02:17:27,129
yeah I mean right because there's plenty

2381
02:17:25,840 --> 02:17:28,779
of things that are just too complicated

2382
02:17:27,129 --> 02:17:30,848
and that it's not gonna work for but a

2383
02:17:28,779 --> 02:17:32,469
lot of those things aren't things that

2384
02:17:30,849 --> 02:17:34,058
programmers are being asked to do right

2385
02:17:32,468 --> 02:17:35,949
I mean you're talking about like

2386
02:17:34,058 --> 02:17:37,929
fizzbuzz as an interview question kind

2387
02:17:35,950 --> 02:17:39,340
of nonsense that's the bar we're talking

2388
02:17:37,929 --> 02:17:41,859
about for a lot of programming jobs

2389
02:17:39,340 --> 02:17:45,340
there's no way you couldn't make an ai

2390
02:17:41,859 --> 02:17:48,639
ai to replace some of those jobs I mean

2391
02:17:45,340 --> 02:17:51,159
there's no way like we will make those a

2392
02:17:48,638 --> 02:17:58,000
eyes we just haven't figured it out yet

2393
02:17:51,159 --> 02:17:59,978
but we will right and and yeah just like

2394
02:17:58,000 --> 02:18:04,058
make the thing have the ability to post

2395
02:17:59,978 --> 02:18:06,489
questions to the Internet like that's

2396
02:18:04,058 --> 02:18:10,420
part of the I can ask to see if other

2397
02:18:06,489 --> 02:18:11,769
people will post code for it right do it

2398
02:18:10,420 --> 02:18:14,558
get started

2399
02:18:11,769 --> 02:18:16,450
someone will make it and you know you'll

2400
02:18:14,558 --> 02:18:19,539
be doing the world a favor because we

2401
02:18:16,450 --> 02:18:22,059
won't be having like you know sort of

2402
02:18:19,540 --> 02:18:22,929
this this weird like layer of

2403
02:18:22,058 --> 02:18:24,759
programmers who aren't really

2404
02:18:22,929 --> 02:18:27,210
programmers or whatever who are like

2405
02:18:24,760 --> 02:18:29,620
kind of clogging up the economy by

2406
02:18:27,209 --> 02:18:32,799
sucking down huge amounts of money which

2407
02:18:29,620 --> 02:18:34,090
then creates like income inequality for

2408
02:18:32,799 --> 02:18:35,108
people who are really not doing anything

2409
02:18:34,090 --> 02:18:39,189
that couldn't have just been done by

2410
02:18:35,109 --> 02:18:41,109
robot right so it would be nice it just

2411
02:18:39,189 --> 02:18:43,269
kind of like even that out and not have

2412
02:18:41,109 --> 02:18:46,559
there be like so many really high-paying

2413
02:18:43,269 --> 02:18:51,670
jobs in this weird like concentrated

2414
02:18:46,558 --> 02:18:55,148
sort of situation another way to say it

2415
02:18:51,670 --> 02:18:57,068
would be it helps create a world where

2416
02:18:55,148 --> 02:18:59,648
everyone's in the same boat if there

2417
02:18:57,068 --> 02:19:07,028
aren't magically a few jobs that can't

2418
02:18:59,648 --> 02:19:08,739
be automated right you know because as

2419
02:19:07,029 --> 02:19:11,679
long as there's like a sector of people

2420
02:19:08,739 --> 02:19:13,929
with automatable jobs and then everyone

2421
02:19:11,679 --> 02:19:15,700
else has automatable jobs you're just

2422
02:19:13,929 --> 02:19:17,710
gonna like the money just the money

2423
02:19:15,700 --> 02:19:19,230
funnel just points straight at the

2424
02:19:17,709 --> 02:19:24,119
people with the unavailable job

2425
02:19:19,229 --> 02:19:27,539
right and so you just you know that's

2426
02:19:24,120 --> 02:19:28,200
just not a good recipe for stable

2427
02:19:27,540 --> 02:19:30,330
society

2428
02:19:28,200 --> 02:19:31,590
having a bunch of people who can make

2429
02:19:30,329 --> 02:19:33,479
infinite money and then a bunch of

2430
02:19:31,590 --> 02:19:36,930
people who can't make any it's not gonna

2431
02:19:33,479 --> 02:19:39,659
be not gonna be great right so the

2432
02:19:36,930 --> 02:19:42,180
sooner we have everyone afraid that

2433
02:19:39,659 --> 02:19:47,299
their jobs will be automated probably

2434
02:19:42,180 --> 02:19:50,159
the better you know I feel like that's a

2435
02:19:47,299 --> 02:19:54,810
good idea and so the number of

2436
02:19:50,159 --> 02:19:56,969
programmers who were around in in like

2437
02:19:54,810 --> 02:19:59,190
the 1980s wouldn't create enough of a

2438
02:19:56,969 --> 02:20:00,719
disruption so if you could even just you

2439
02:19:59,190 --> 02:20:04,110
don't have to automate all the brilliant

2440
02:20:00,719 --> 02:20:08,159
jobs just automate 50% right automate

2441
02:20:04,110 --> 02:20:10,980
75% you don't have to made 100 right but

2442
02:20:08,159 --> 02:20:15,351
just get it up there and that's good

2443
02:20:10,979 --> 02:20:20,369
enough because that creates the fear and

2444
02:20:15,351 --> 02:20:22,710
that puts everyone into the same mental

2445
02:20:20,370 --> 02:20:24,240
category because I mean not all

2446
02:20:22,709 --> 02:20:25,770
manufacturing jobs are automatable

2447
02:20:24,239 --> 02:20:30,869
either right there are still people

2448
02:20:25,771 --> 02:20:32,670
working on assembly lines so you don't

2449
02:20:30,870 --> 02:20:36,079
have to be a hundred percent just make

2450
02:20:32,670 --> 02:20:40,310
sure that they don't feel like they're

2451
02:20:36,079 --> 02:20:42,810
untouchable by the wave of automation

2452
02:20:40,310 --> 02:20:46,229
make sure we're all a little bit worried

2453
02:20:42,810 --> 02:20:48,449
about that because then we will all

2454
02:20:46,229 --> 02:20:51,449
probably hopefully I mean that you know

2455
02:20:48,450 --> 02:20:53,550
maybe this is a this is assuming too

2456
02:20:51,450 --> 02:20:55,230
much for Humanity but assuming that most

2457
02:20:53,549 --> 02:20:58,890
people are in the same boat then they

2458
02:20:55,229 --> 02:21:01,789
will presumably act together more than

2459
02:20:58,890 --> 02:21:04,649
if you have a hard delineation between

2460
02:21:01,790 --> 02:21:07,080
like a large number of people who don't

2461
02:21:04,649 --> 02:21:10,640
have to worry about this thing and then

2462
02:21:07,079 --> 02:21:12,060
another large number of people who do I

2463
02:21:10,640 --> 02:21:13,560
haven't thought that through

2464
02:21:12,060 --> 02:21:16,500
particularly well so take it with a

2465
02:21:13,560 --> 02:21:18,869
grain of salt but it just seems like we

2466
02:21:16,500 --> 02:21:21,569
want automation to be everywhere because

2467
02:21:18,870 --> 02:21:25,681
since it's going to be certain segments

2468
02:21:21,569 --> 02:21:27,209
quite a bit we probably want to make

2469
02:21:25,681 --> 02:21:29,540
sure it's going to be everywhere so that

2470
02:21:27,209 --> 02:21:32,640
people are affected more uniformly and

2471
02:21:29,540 --> 02:21:32,970
we'll want to take steps to make sure

2472
02:21:32,640 --> 02:21:37,609
the

2473
02:21:32,969 --> 02:21:37,608
society doesn't like implode as a result

2474
02:21:50,059 --> 02:21:53,420
all right

2475
02:22:03,431 --> 02:22:06,341
okay thank you everyone for joining me

2476
02:22:05,079 --> 02:22:07,450
for the lips on a handmade hero it's

2477
02:22:06,341 --> 02:22:08,950
been a pleasure coding with you as

2478
02:22:07,450 --> 02:22:10,301
always if you would like to follow along

2479
02:22:08,950 --> 02:22:11,860
series at home you can always peer to

2480
02:22:10,300 --> 02:22:14,380
the game on handmade hero org and it

2481
02:22:11,860 --> 02:22:15,579
comes with a source code so you can play

2482
02:22:14,380 --> 02:22:19,209
around with it

2483
02:22:15,579 --> 02:22:21,011
we mostly made the PNG writer today we

2484
02:22:19,209 --> 02:22:24,159
just kind of slapped it in there but

2485
02:22:21,011 --> 02:22:25,810
it's probably mostly done so one good

2486
02:22:24,159 --> 02:22:28,329
exercise you could do over the weekend

2487
02:22:25,810 --> 02:22:30,880
before I do it tomorrow morning is go

2488
02:22:28,329 --> 02:22:33,569
debug why it's writing out the stuff

2489
02:22:30,880 --> 02:22:36,819
incorrectly and get it writing correctly

2490
02:22:33,569 --> 02:22:40,029
that would be one thing you could pretty

2491
02:22:36,819 --> 02:22:41,380
easily do that would be a fun exercise

2492
02:22:40,030 --> 02:22:42,700
right because we've got the whole

2493
02:22:41,380 --> 02:22:44,819
structure there so now you just got to

2494
02:22:42,700 --> 02:22:48,190
go look at it and see what it's doing

2495
02:22:44,819 --> 02:22:50,050
wrong so I would recommend giving them a

2496
02:22:48,190 --> 02:22:52,030
try if you're up for doing some work

2497
02:22:50,050 --> 02:22:53,229
today that that might be educational to

2498
02:22:52,030 --> 02:22:54,610
you if you're the kind of programmer

2499
02:22:53,229 --> 02:22:56,170
who's still working on stuff like that

2500
02:22:54,610 --> 02:22:58,750
obviously if you're an expert this is

2501
02:22:56,170 --> 02:23:00,399
nonsense what I'm saying but you know if

2502
02:22:58,750 --> 02:23:01,899
you're interested in some beginners kind

2503
02:23:00,399 --> 02:23:04,390
of stuff to do try to bugging that that

2504
02:23:01,899 --> 02:23:06,159
would be a good exercise I'll be back

2505
02:23:04,390 --> 02:23:07,390
tomorrow to debug it myself and then we

2506
02:23:06,159 --> 02:23:09,851
can see what was wrong with it all

2507
02:23:07,390 --> 02:23:11,619
together until then have fun program

2508
02:23:09,851 --> 02:23:15,040
everyone and I'll see on the Internet

2509
02:23:11,620 --> 02:23:17,221
take it easy easy everybody and I'll see

2510
02:23:15,040 --> 02:23:17,221
you tomorrow

