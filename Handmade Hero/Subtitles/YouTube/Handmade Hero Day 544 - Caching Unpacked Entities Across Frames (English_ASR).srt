1
00:00:00,800 --> 00:00:05,669
hello everyone and welcome to handmade

2
00:00:03,270 --> 00:00:09,179
Hero show recode a complete-game live on

3
00:00:05,669 --> 00:00:11,099
stream yesterday despite the fact that I

4
00:00:09,179 --> 00:00:16,500
had an out of shame situation where I

5
00:00:11,099 --> 00:00:21,179
had actually put the displacement for

6
00:00:16,500 --> 00:00:23,070
our for our world entity tracking into

7
00:00:21,179 --> 00:00:24,719
the wrong line of code thus causing us

8
00:00:23,070 --> 00:00:27,768
like literally fifteen minutes and about

9
00:00:24,719 --> 00:00:30,750
you we didn't have to to uh-huh

10
00:00:27,768 --> 00:00:33,058
everything went smoothly otherwise and

11
00:00:30,750 --> 00:00:36,899
so the thing that we were attempting to

12
00:00:33,058 --> 00:00:39,269
do which is to move our entity unpacked

13
00:00:36,899 --> 00:00:42,480
storage into sort of a secondary cache

14
00:00:39,270 --> 00:00:45,359
that operates on in front of our world

15
00:00:42,479 --> 00:00:47,000
access it seems to be going just fine

16
00:00:45,359 --> 00:00:50,969
and so what I want to do today is just

17
00:00:47,000 --> 00:00:54,750
actually finish the next part of that

18
00:00:50,969 --> 00:00:56,750
which is instead of always creating and

19
00:00:54,750 --> 00:00:59,789
destroying all the entities every frame

20
00:00:56,750 --> 00:01:03,600
in the unpacked state I want to actually

21
00:00:59,789 --> 00:01:07,109
just leave them around so we any time we

22
00:01:03,600 --> 00:01:08,820
kind of go to do unpacking entities we

23
00:01:07,109 --> 00:01:10,769
only unpack ones that aren't already

24
00:01:08,819 --> 00:01:12,688
unpacked and we leave ones that are

25
00:01:10,769 --> 00:01:14,789
unpacked unpacked now I don't anticipate

26
00:01:12,688 --> 00:01:16,949
that taking really any time at all

27
00:01:14,790 --> 00:01:19,469
that's probably quite simple because all

28
00:01:16,950 --> 00:01:22,618
it really involves is not doing some

29
00:01:19,469 --> 00:01:23,969
work we're currently doing so why do I

30
00:01:22,618 --> 00:01:25,228
think we need two hours to do it well

31
00:01:23,969 --> 00:01:27,329
the reason I think we need two hours to

32
00:01:25,228 --> 00:01:29,640
do it is because the other end of it

33
00:01:27,329 --> 00:01:32,328
actually is relatively difficult because

34
00:01:29,640 --> 00:01:36,150
it's unclear exactly how you would do it

35
00:01:32,328 --> 00:01:38,849
and that is packing them back up again

36
00:01:36,150 --> 00:01:41,790
so if we unpack our entities into sort

37
00:01:38,849 --> 00:01:44,158
of a cache they get operated on I and

38
00:01:41,790 --> 00:01:45,630
they just stay in that cache and keep

39
00:01:44,159 --> 00:01:46,079
getting operated on as long as they're

40
00:01:45,629 --> 00:01:48,719
needed

41
00:01:46,078 --> 00:01:51,269
the thing that is unclear is what how do

42
00:01:48,719 --> 00:01:54,840
we know when to pack them back up right

43
00:01:51,269 --> 00:01:58,319
and so what we're looking for is we need

44
00:01:54,840 --> 00:01:59,909
some kind of a way of remembering what

45
00:01:58,319 --> 00:02:02,008
are all the world chunks that have been

46
00:01:59,909 --> 00:02:06,500
unpacked and could be repacked or

47
00:02:02,009 --> 00:02:09,409
something like this and we need to

48
00:02:06,500 --> 00:02:11,509
only repack entities when it seems like

49
00:02:09,409 --> 00:02:14,359
they're not actually being used and so

50
00:02:11,509 --> 00:02:16,849
on and so what we really need to start

51
00:02:14,360 --> 00:02:19,040
taking a look at is some way when we do

52
00:02:16,849 --> 00:02:22,239
our updating of our entities we need to

53
00:02:19,039 --> 00:02:24,919
look at some way we can logically deduce

54
00:02:22,240 --> 00:02:28,070
when is the right time to take those

55
00:02:24,919 --> 00:02:31,669
entities and pack them back up and it's

56
00:02:28,069 --> 00:02:33,530
kind of tricky because I mean honestly

57
00:02:31,669 --> 00:02:38,239
like the only thing can really think of

58
00:02:33,530 --> 00:02:40,789
to do is not particularly efficient and

59
00:02:38,240 --> 00:02:43,400
that is to just say as we do a pass over

60
00:02:40,789 --> 00:02:47,359
our entities the entities that are

61
00:02:43,400 --> 00:02:52,550
actually inside entities that are

62
00:02:47,360 --> 00:02:55,280
outside of the active region can look to

63
00:02:52,550 --> 00:02:57,710
see if their world chunk is also outside

64
00:02:55,280 --> 00:03:01,009
the active region and if it is you pack

65
00:02:57,710 --> 00:03:04,099
it back up as I'm saying that it

66
00:03:01,009 --> 00:03:05,989
actually doesn't sound as stupid as as I

67
00:03:04,099 --> 00:03:08,210
thought it was so maybe that is what

68
00:03:05,990 --> 00:03:14,780
we'll do but either way that looking at

69
00:03:08,210 --> 00:03:17,390
that sort of aspect of the system is

70
00:03:14,780 --> 00:03:18,530
really the part that then is the part

71
00:03:17,389 --> 00:03:20,929
that will require the finesse so

72
00:03:18,530 --> 00:03:23,060
unpacking entities is easy because we

73
00:03:20,930 --> 00:03:24,920
get called explicitly to do it knowing

74
00:03:23,060 --> 00:03:26,900
if entities are unpacked is also easy

75
00:03:24,919 --> 00:03:29,208
because world chunks get removed from

76
00:03:26,900 --> 00:03:31,400
the system entirely when their impact so

77
00:03:29,209 --> 00:03:32,989
it just wouldn't ever happen they just

78
00:03:31,400 --> 00:03:36,610
stay in the set so the thing that's

79
00:03:32,989 --> 00:03:39,560
really going to take our time I think is

80
00:03:36,610 --> 00:03:43,360
figuring out exactly what to do about

81
00:03:39,560 --> 00:03:46,459
that sort of other that the other

82
00:03:43,360 --> 00:03:48,260
repacking step so let's go ahead and

83
00:03:46,459 --> 00:03:49,939
just dive in here there's a couple

84
00:03:48,259 --> 00:03:51,319
things we can do to get started that

85
00:03:49,939 --> 00:03:53,870
really don't require any finesse at all

86
00:03:51,319 --> 00:03:56,269
they're just cleaning up code that now

87
00:03:53,870 --> 00:03:58,580
we don't probably need or want because

88
00:03:56,269 --> 00:04:00,170
of the changes that we're making let me

89
00:03:58,580 --> 00:04:01,969
just go ahead and rerun to make sure

90
00:04:00,169 --> 00:04:03,859
that we're all on the same page here but

91
00:04:01,969 --> 00:04:06,530
I think we're good we left it in a good

92
00:04:03,860 --> 00:04:09,680
state yesterday here's the game running

93
00:04:06,530 --> 00:04:13,879
everything's fine just as it normally is

94
00:04:09,680 --> 00:04:19,000
so no no big deal there so if we go into

95
00:04:13,879 --> 00:04:21,759
the world set here and we guess I'm open

96
00:04:19,000 --> 00:04:23,740
on this side I'm gonna open up the pass

97
00:04:21,759 --> 00:04:26,349
that goes through the sim region here

98
00:04:23,740 --> 00:04:28,900
and how we do sort of those entity

99
00:04:26,350 --> 00:04:30,610
references and that stuff I want to take

100
00:04:28,899 --> 00:04:34,479
a look at something I put it to do in

101
00:04:30,610 --> 00:04:37,360
for which was the traversable reference

102
00:04:34,480 --> 00:04:39,970
and the entity reference stuff I think

103
00:04:37,360 --> 00:04:42,689
they all use enemy reference yeah so

104
00:04:39,970 --> 00:04:46,000
this stuff here where we sort of have a

105
00:04:42,689 --> 00:04:47,829
pointer index dichotomy I think what we

106
00:04:46,000 --> 00:04:53,949
want to do here is change entity

107
00:04:47,829 --> 00:04:55,629
references to just be entity IDs I don't

108
00:04:53,949 --> 00:04:57,610
think we really want this anymore

109
00:04:55,629 --> 00:05:00,009
I think we want to just reference by ID

110
00:04:57,610 --> 00:05:01,810
always and anytime you want to get an ID

111
00:05:00,009 --> 00:05:06,339
from now on I think what you want to do

112
00:05:01,810 --> 00:05:08,589
is just ask the hash to give you back

113
00:05:06,339 --> 00:05:11,289
whoever that particular idea is that

114
00:05:08,589 --> 00:05:12,668
you're talking about right and so I want

115
00:05:11,290 --> 00:05:14,830
to get rid of that because we sort of

116
00:05:12,668 --> 00:05:18,609
have this this nonsense going on right

117
00:05:14,829 --> 00:05:20,859
now where when we were sort of filtering

118
00:05:18,610 --> 00:05:24,790
this stuff through we we have this

119
00:05:20,860 --> 00:05:26,350
let's see repack we have this nonsense

120
00:05:24,790 --> 00:05:28,390
going on here where we have to do this

121
00:05:26,350 --> 00:05:30,580
like pack and unpack these references

122
00:05:28,389 --> 00:05:33,459
and stuff and it's just looking at it

123
00:05:30,579 --> 00:05:35,620
you're like why are you doing that every

124
00:05:33,459 --> 00:05:37,569
time on these entities when all you're

125
00:05:35,620 --> 00:05:39,220
saving is like a hash table lookup which

126
00:05:37,569 --> 00:05:41,560
probably isn't particularly expensive

127
00:05:39,220 --> 00:05:46,360
especially since this hash table is

128
00:05:41,560 --> 00:05:47,829
probably mostly hot it just it doesn't

129
00:05:46,360 --> 00:05:50,169
make a lot of sense to me so it just

130
00:05:47,829 --> 00:05:51,609
seems like a much ado about nothing it's

131
00:05:50,168 --> 00:05:53,740
packing something that probably just

132
00:05:51,610 --> 00:05:55,750
shouldn't ever actually be unpacked at

133
00:05:53,740 --> 00:05:57,790
all it should just stay the way it is

134
00:05:55,750 --> 00:06:00,759
and so I'd like to go ahead and make

135
00:05:57,790 --> 00:06:02,410
that change and get that going so the

136
00:06:00,759 --> 00:06:05,500
first thing I'm going to do there is I'm

137
00:06:02,410 --> 00:06:07,840
just gonna get rid of entity reference

138
00:06:05,500 --> 00:06:10,600
and I'm gonna see what happens when I do

139
00:06:07,839 --> 00:06:14,079
that so I'm gonna I'm gonna delete that

140
00:06:10,600 --> 00:06:16,180
and I'm gonna have an entity ID replaced

141
00:06:14,079 --> 00:06:18,159
there so we just say look when you want

142
00:06:16,180 --> 00:06:21,189
a reference identity you just use an

143
00:06:18,160 --> 00:06:24,610
entity ID there isn't anything else that

144
00:06:21,189 --> 00:06:26,649
goes on there and so when you do like is

145
00:06:24,610 --> 00:06:28,780
equal on these things you can just

146
00:06:26,649 --> 00:06:31,209
actually call this is equal over here

147
00:06:28,779 --> 00:06:32,199
you don't do references or equal you

148
00:06:31,209 --> 00:06:34,509
just say that

149
00:06:32,199 --> 00:06:36,159
and so that's the change we're gonna

150
00:06:34,509 --> 00:06:38,259
propagate through the code and that's

151
00:06:36,160 --> 00:06:40,600
all I'm gonna do first so that's gonna

152
00:06:38,259 --> 00:06:43,990
require anyone who is previously using

153
00:06:40,600 --> 00:06:46,930
the reference as a pointer is going to

154
00:06:43,990 --> 00:06:48,759
have to now use it as a hash table

155
00:06:46,930 --> 00:06:51,100
lookup so we do have to fix that one

156
00:06:48,759 --> 00:06:53,170
part in repack entities as necessary

157
00:06:51,100 --> 00:06:54,550
that was the only region this reason the

158
00:06:53,170 --> 00:06:56,860
sim region was being packed

159
00:06:54,550 --> 00:07:00,009
I'm sorry past so we're going to get rid

160
00:06:56,860 --> 00:07:02,639
of that parameter as well and I'm gonna

161
00:07:00,009 --> 00:07:04,870
delete the packed reversible Skol

162
00:07:02,639 --> 00:07:08,829
correspondingly when we registered

163
00:07:04,870 --> 00:07:11,709
entities back in the old system oops I

164
00:07:08,829 --> 00:07:13,149
don't know what that just did when we

165
00:07:11,709 --> 00:07:14,529
were registering entities here what we

166
00:07:13,149 --> 00:07:16,449
would do is we add them to the hash

167
00:07:14,529 --> 00:07:18,849
string register entity and then we had a

168
00:07:16,449 --> 00:07:21,279
second pass where the entire thing we

169
00:07:18,850 --> 00:07:25,230
were doing here was sort of doing this

170
00:07:21,279 --> 00:07:28,719
occupier traversable reference nonsense

171
00:07:25,230 --> 00:07:31,600
that was happening here and so what we

172
00:07:28,720 --> 00:07:34,510
want to do is clean that out like we

173
00:07:31,600 --> 00:07:38,230
want all of this stuff to now just work

174
00:07:34,509 --> 00:07:40,389
directly off of entity IDs so this loop

175
00:07:38,230 --> 00:07:42,790
also needs to go away

176
00:07:40,389 --> 00:07:45,310
so we need to again to simplify this

177
00:07:42,790 --> 00:07:46,689
code down because it seems clear to me

178
00:07:45,310 --> 00:07:49,120
now that we've put it out there that

179
00:07:46,689 --> 00:07:51,009
it's just a wait it's just nonsense it

180
00:07:49,120 --> 00:07:52,740
doesn't need to be there and we're just

181
00:07:51,009 --> 00:07:55,719
adding complexity and failure

182
00:07:52,740 --> 00:07:57,610
possibilities for no reason so we want

183
00:07:55,720 --> 00:07:59,470
these things to the extent that they end

184
00:07:57,610 --> 00:08:02,290
up persisting in the game if they do to

185
00:07:59,470 --> 00:08:05,860
all be entity IDs that you just referred

186
00:08:02,290 --> 00:08:08,740
to and so both the traversable reference

187
00:08:05,860 --> 00:08:11,710
itself in the two places where that's

188
00:08:08,740 --> 00:08:12,910
used and then the entity IDs I'm sorry

189
00:08:11,709 --> 00:08:14,889
for the occupying that came from there

190
00:08:12,910 --> 00:08:18,130
those are now in of the IDs as well and

191
00:08:14,889 --> 00:08:19,779
so all of that stuff I think I think

192
00:08:18,129 --> 00:08:21,699
that probably cover all of it and so now

193
00:08:19,779 --> 00:08:23,619
we just have to change the usage code to

194
00:08:21,699 --> 00:08:26,219
be aware of that it can't use pointers

195
00:08:23,620 --> 00:08:30,639
anymore when it calls things it has to

196
00:08:26,220 --> 00:08:35,800
actually use sort of a lookup into the

197
00:08:30,639 --> 00:08:40,299
hash table all right so when we do it

198
00:08:35,799 --> 00:08:42,219
get traversable here get entity by ID I

199
00:08:40,299 --> 00:08:44,859
think is the function that we need and

200
00:08:42,220 --> 00:08:45,820
it's it's already it pretty much just

201
00:08:44,860 --> 00:08:48,879
does exactly what

202
00:08:45,820 --> 00:08:50,560
want so there's not a lot here that we

203
00:08:48,879 --> 00:08:53,500
have to do other than string to thread

204
00:08:50,559 --> 00:08:56,109
you know we got to thread our function

205
00:08:53,500 --> 00:08:59,019
calls with access to the hash table so

206
00:08:56,110 --> 00:09:00,399
the real only annoying part is like this

207
00:08:59,019 --> 00:09:03,340
is gonna have to happen in a couple

208
00:09:00,399 --> 00:09:05,769
places because in order to get the hash

209
00:09:03,340 --> 00:09:08,879
you have to know where the hash table is

210
00:09:05,769 --> 00:09:11,110
in the first place and so this part is

211
00:09:08,879 --> 00:09:13,450
gonna be a little annoying but other

212
00:09:11,110 --> 00:09:15,730
than that other than providing that

213
00:09:13,450 --> 00:09:18,040
access I think that's really all we

214
00:09:15,730 --> 00:09:21,340
would need so again that's just kind of

215
00:09:18,039 --> 00:09:24,399
pushing this down a little bit it looks

216
00:09:21,340 --> 00:09:26,500
like looks like most of this stuff

217
00:09:24,399 --> 00:09:27,789
doesn't really need it though so here we

218
00:09:26,500 --> 00:09:31,629
would need it again get some space

219
00:09:27,789 --> 00:09:34,419
reversible for this we would need this

220
00:09:31,629 --> 00:09:38,470
part this needs to be a good hash by the

221
00:09:34,419 --> 00:09:44,039
again right so right here dub use the

222
00:09:38,470 --> 00:09:44,040
same region there we go

223
00:09:45,600 --> 00:09:55,930
okay and what's the problem there none

224
00:09:52,029 --> 00:09:58,350
of the two overloads get reversible do

225
00:09:55,929 --> 00:09:58,349
we have

226
00:09:59,799 --> 00:10:07,359
I meant get finiti by ID don't ask me

227
00:10:04,480 --> 00:10:11,949
why I put get hash by ID that's not what

228
00:10:07,360 --> 00:10:13,808
I wanted at all okay and that looks like

229
00:10:11,948 --> 00:10:16,318
that's not actually advertised anywhere

230
00:10:13,808 --> 00:10:18,488
so I'm gonna go ahead and pull that up

231
00:10:16,318 --> 00:10:21,159
now that everyone's gonna have to call

232
00:10:18,489 --> 00:10:23,649
it I'm gonna put in the H file so

233
00:10:21,159 --> 00:10:31,708
everyone can see it

234
00:10:23,649 --> 00:10:31,708
so see where else we've got

235
00:10:34,230 --> 00:10:39,100
so when we do lieutenant ereference or

236
00:10:36,999 --> 00:10:41,199
load traversable reference i think those

237
00:10:39,100 --> 00:10:43,058
are just for unpacking so i think i'm

238
00:10:41,198 --> 00:10:45,338
just gonna delete them entirely those

239
00:10:43,058 --> 00:10:46,838
should really never happen at all now no

240
00:10:45,339 --> 00:10:48,970
one should be calling them because you

241
00:10:46,839 --> 00:10:53,529
can just load directly and it's fine

242
00:10:48,970 --> 00:10:54,970
right all right so same is true of this

243
00:10:53,528 --> 00:10:56,919
stuff we don't need to pack these

244
00:10:54,970 --> 00:10:59,259
anymore so again this just cleans up the

245
00:10:56,919 --> 00:11:02,438
code it's just it's just code that that

246
00:10:59,259 --> 00:11:12,548
was doing unnecessary work that i don't

247
00:11:02,438 --> 00:11:14,740
want to do okay so again couple more

248
00:11:12,548 --> 00:11:17,078
calls here you can see these calls are

249
00:11:14,740 --> 00:11:18,600
not provided with the sim region so

250
00:11:17,078 --> 00:11:21,099
again this is really just gonna be me

251
00:11:18,600 --> 00:11:24,220
threading that access to the hash table

252
00:11:21,100 --> 00:11:26,290
through here and it's fine you know you

253
00:11:24,220 --> 00:11:28,298
don't have to it's it's totally fine to

254
00:11:26,289 --> 00:11:30,039
provide access to some more things as

255
00:11:28,298 --> 00:11:32,078
things are necessary you'll notice I

256
00:11:30,039 --> 00:11:34,389
tend to not provide access to things if

257
00:11:32,078 --> 00:11:36,248
I don't need them and that's just to

258
00:11:34,389 --> 00:11:38,980
keep the code more functional more

259
00:11:36,249 --> 00:11:41,048
narrowly scoped and so I try to only

260
00:11:38,980 --> 00:11:43,990
provide access to stuff once I see that

261
00:11:41,048 --> 00:11:46,360
somebody's actually doing something and

262
00:11:43,990 --> 00:11:48,220
so in this case I can see why it needs

263
00:11:46,360 --> 00:11:50,079
to happen and so it's happening but

264
00:11:48,220 --> 00:11:51,939
until then I tend not to do that and

265
00:11:50,078 --> 00:11:53,708
that's why these have never taken the

266
00:11:51,938 --> 00:11:55,298
same region simply because they didn't

267
00:11:53,708 --> 00:11:58,539
need it even though they sort of are in

268
00:11:55,298 --> 00:12:01,838
the same region domain of functions all

269
00:11:58,539 --> 00:12:05,738
right excuse me

270
00:12:01,839 --> 00:12:09,059
so here when we're packing this

271
00:12:05,739 --> 00:12:11,230
reference in here we have the entity and

272
00:12:09,058 --> 00:12:12,578
before we were creating a reference out

273
00:12:11,230 --> 00:12:13,690
of it by putting the two things in there

274
00:12:12,578 --> 00:12:15,250
but of course now there's only

275
00:12:13,690 --> 00:12:23,680
thing in there so this is really just

276
00:12:15,250 --> 00:12:26,710
going to store the ID excuse me and

277
00:12:23,679 --> 00:12:29,559
that's it same is true here if we didn't

278
00:12:26,710 --> 00:12:32,110
find it then the result index is just

279
00:12:29,559 --> 00:12:35,500
zero of course in this case it's unclear

280
00:12:32,110 --> 00:12:39,100
to me why we didn't just set it to that

281
00:12:35,500 --> 00:12:41,590
in the first place why result is not

282
00:12:39,100 --> 00:12:45,029
just set to zero at the top and then we

283
00:12:41,590 --> 00:12:47,769
don't have to track anything in fact

284
00:12:45,029 --> 00:12:50,169
yeah I mean looking at this I kind of

285
00:12:47,769 --> 00:12:50,679
want to say that it doesn't make a lot

286
00:12:50,169 --> 00:12:57,490
of sense

287
00:12:50,679 --> 00:12:59,979
so the yeah I mean rather than checking

288
00:12:57,490 --> 00:13:02,019
on that it seems like that would make

289
00:12:59,980 --> 00:13:04,899
more sense wouldn't it because there's

290
00:13:02,019 --> 00:13:06,730
no really no found never gets unset so

291
00:13:04,899 --> 00:13:08,980
it just seems like that's just a little

292
00:13:06,730 --> 00:13:11,379
bit easier so it's like hey there you go

293
00:13:08,980 --> 00:13:13,899
off you go now

294
00:13:11,379 --> 00:13:16,360
I also don't know why we need to return

295
00:13:13,899 --> 00:13:20,590
that because it seems like we could have

296
00:13:16,360 --> 00:13:24,639
just returned this but yeah I don't know

297
00:13:20,590 --> 00:13:28,360
also one thing I would say is why we

298
00:13:24,639 --> 00:13:32,199
aren't setting the results entity to be

299
00:13:28,360 --> 00:13:34,509
the no entity ID I don't know that's a

300
00:13:32,200 --> 00:13:38,440
little bit weird - in fact let me just

301
00:13:34,509 --> 00:13:40,960
look we're we doing that oh I see so

302
00:13:38,440 --> 00:13:42,880
really let's do that I think that's what

303
00:13:40,960 --> 00:13:46,030
we actually want to do there if that

304
00:13:42,879 --> 00:13:49,379
makes sense just to make sure I don't

305
00:13:46,029 --> 00:13:52,509
know what this see actually hasn't it I

306
00:13:49,379 --> 00:13:55,570
just value so if we just want to clear

307
00:13:52,509 --> 00:13:57,460
that right what I would probably just

308
00:13:55,570 --> 00:13:58,930
looks like maybe I wouldn't write it

309
00:13:57,460 --> 00:14:01,660
quite the same way at this point I

310
00:13:58,929 --> 00:14:09,399
probably would return this traversable

311
00:14:01,659 --> 00:14:10,539
reference as the return value now so I'm

312
00:14:09,399 --> 00:14:12,610
not gonna make that change through the

313
00:14:10,539 --> 00:14:16,360
middle out changes but I might just say

314
00:14:12,610 --> 00:14:22,500
to do Casey why doesn't this just return

315
00:14:16,360 --> 00:14:26,070
a traversable reference so

316
00:14:22,500 --> 00:14:29,159
we'll have to look at that later all

317
00:14:26,070 --> 00:14:31,530
right so let's keep going in here where

318
00:14:29,159 --> 00:14:34,110
we've got naught is equal we've got a

319
00:14:31,529 --> 00:14:40,769
traversable reference here and the body

320
00:14:34,110 --> 00:14:43,560
occupying there I'm not sure why that's

321
00:14:40,769 --> 00:14:45,960
not working because it looks like that

322
00:14:43,559 --> 00:14:53,519
should be traversable references in both

323
00:14:45,960 --> 00:14:55,550
cases it was an entity reference that I

324
00:14:53,519 --> 00:14:57,840
replaced right

325
00:14:55,549 --> 00:15:04,439
those weren't traversable references

326
00:14:57,840 --> 00:15:06,810
before were they in here oh they were

327
00:15:04,440 --> 00:15:12,740
all right I don't know why I replaced

328
00:15:06,809 --> 00:15:12,739
those then just being stupid forget that

329
00:15:13,669 --> 00:15:18,599
yeah that's so that's fine if those were

330
00:15:16,169 --> 00:15:20,639
traversal of references I don't know why

331
00:15:18,600 --> 00:15:25,019
I did that that was just dumb all right

332
00:15:20,639 --> 00:15:30,659
so let's see here transactional

333
00:15:25,019 --> 00:15:35,730
occupying wants the sim region now which

334
00:15:30,659 --> 00:15:43,679
we have so does this want that all of

335
00:15:35,730 --> 00:15:47,730
these want them and looks like we're

336
00:15:43,679 --> 00:15:49,889
still going and this is going to be the

337
00:15:47,730 --> 00:15:51,899
same thing here all of these just need

338
00:15:49,889 --> 00:15:53,960
the sim region so this is really just

339
00:15:51,899 --> 00:15:57,629
again threading access to the hash table

340
00:15:53,960 --> 00:16:00,200
through the call chain but not actually

341
00:15:57,629 --> 00:16:00,200
changing the code

342
00:16:06,240 --> 00:16:17,560
really really simple stuff um so let's

343
00:16:12,820 --> 00:16:19,480
see again and I don't think anything

344
00:16:17,559 --> 00:16:24,809
here that's really just adding that

345
00:16:19,480 --> 00:16:29,560
parameter same here and here

346
00:16:24,809 --> 00:16:32,289
and so for this again that pointer

347
00:16:29,559 --> 00:16:35,500
doesn't exist anymore so we're really

348
00:16:32,289 --> 00:16:38,589
just talking about that as the only

349
00:16:35,500 --> 00:16:42,190
thing that happens also we need to pass

350
00:16:38,590 --> 00:16:45,060
the the region for the gets in today's

351
00:16:42,190 --> 00:16:53,770
reversible now to look in the hash table

352
00:16:45,059 --> 00:16:58,869
same thing here with the entity ID and I

353
00:16:53,769 --> 00:17:03,429
think that's mostly what we're dealing

354
00:16:58,870 --> 00:17:05,019
with and so that is I think all we

355
00:17:03,429 --> 00:17:08,190
really need to do and now I just got a

356
00:17:05,019 --> 00:17:11,680
cleanup errors that we've got here

357
00:17:08,190 --> 00:17:13,420
so okay first of all gotta switch to a

358
00:17:11,680 --> 00:17:19,330
debug build so I can actually see what's

359
00:17:13,420 --> 00:17:23,080
going on let me just change the debug

360
00:17:19,329 --> 00:17:26,559
build there and I suspect we also will

361
00:17:23,079 --> 00:17:28,389
have a some issues here with not maybe

362
00:17:26,559 --> 00:17:32,049
clearing some things we needed to clear

363
00:17:28,390 --> 00:17:34,570
because we sort of changed the rules as

364
00:17:32,049 --> 00:17:40,210
to what was going on here I also don't

365
00:17:34,569 --> 00:17:42,309
know I may have accidentally by changing

366
00:17:40,210 --> 00:17:44,559
these the wrong way I may have made some

367
00:17:42,309 --> 00:17:46,990
mistakes so I might also before I start

368
00:17:44,559 --> 00:17:49,119
debugging take a quick look at all the

369
00:17:46,990 --> 00:17:50,890
places that those were being used just

370
00:17:49,119 --> 00:17:55,500
to make sure I didn't screw anything up

371
00:17:50,890 --> 00:17:55,500
there so if that all looks fine to me

372
00:17:56,099 --> 00:18:05,099
that looks fine that all looks good

373
00:18:01,960 --> 00:18:05,100
totally fine

374
00:18:05,200 --> 00:18:11,069
yeah these these look good you know I

375
00:18:07,869 --> 00:18:11,069
don't see any issues there

376
00:18:19,640 --> 00:18:27,679
this all looks totally fine so I don't

377
00:18:23,509 --> 00:18:29,480
think I created any problems using the

378
00:18:27,679 --> 00:18:32,600
occupying and came from part of things

379
00:18:29,480 --> 00:18:33,980
so I think that's all fine there so now

380
00:18:32,599 --> 00:18:35,808
we just got to kind of go through and

381
00:18:33,980 --> 00:18:39,079
figure out did I ruin anything you know

382
00:18:35,808 --> 00:18:41,808
did I did I ruin anything in that change

383
00:18:39,079 --> 00:18:43,269
that causes that causes problems let's

384
00:18:41,808 --> 00:18:46,548
take a look and since we're getting a

385
00:18:43,269 --> 00:18:49,250
hard error there I guess I we are but

386
00:18:46,548 --> 00:18:53,269
I'm not really entirely certain what the

387
00:18:49,250 --> 00:18:54,740
actual problem is okay so it looks like

388
00:18:53,269 --> 00:18:56,690
actually this probably isn't an error

389
00:18:54,740 --> 00:18:59,569
this is just something that we kind of

390
00:18:56,690 --> 00:19:02,380
want to handle and currently aren't so

391
00:18:59,569 --> 00:19:06,109
in here where we do get entity by ID

392
00:19:02,380 --> 00:19:08,210
this is assuming that the entity handle

393
00:19:06,109 --> 00:19:10,939
is always valid and we don't want that

394
00:19:08,210 --> 00:19:12,769
we just want zero back when it's not and

395
00:19:10,940 --> 00:19:15,350
so what I'm going to do there is I'm

396
00:19:12,769 --> 00:19:18,168
gonna just go in to get entity by ID and

397
00:19:15,349 --> 00:19:22,159
I'm going to say look assume that you

398
00:19:18,169 --> 00:19:26,150
get back zero here unless the ID value

399
00:19:22,160 --> 00:19:29,630
is actually valid right and so that's

400
00:19:26,150 --> 00:19:32,570
really what we want I also don't know

401
00:19:29,630 --> 00:19:36,110
why get hash ID from ID whatever produce

402
00:19:32,569 --> 00:19:37,099
a zero oh because it's not in the set so

403
00:19:36,109 --> 00:19:43,250
that'd be fine too

404
00:19:37,099 --> 00:19:45,740
um so I messed that up in fact let me

405
00:19:43,250 --> 00:19:47,808
just show you what I did there I deleted

406
00:19:45,740 --> 00:19:58,730
the wrong part didn't mean to make that

407
00:19:47,808 --> 00:20:01,789
change what I meant to do was this right

408
00:19:58,730 --> 00:20:03,169
so I want to get the hash entry only in

409
00:20:01,789 --> 00:20:05,539
the case where the value is actually

410
00:20:03,169 --> 00:20:07,880
valid if it's not then it's just a zero

411
00:20:05,539 --> 00:20:10,819
so like this person isn't chasing

412
00:20:07,880 --> 00:20:16,490
somebody or isn't occupying a square so

413
00:20:10,819 --> 00:20:18,619
zero is an eval advanced oh that's all I

414
00:20:16,490 --> 00:20:20,390
was trying to do there so taking a look

415
00:20:18,619 --> 00:20:22,579
at this it looks like we're back to good

416
00:20:20,390 --> 00:20:24,049
and so I think that's really all we need

417
00:20:22,579 --> 00:20:25,699
to do for that clean up I don't think

418
00:20:24,048 --> 00:20:27,319
there's much to it I'm gonna hop around

419
00:20:25,700 --> 00:20:28,910
for a little while to make sure that we

420
00:20:27,319 --> 00:20:31,369
didn't introduce any other breakage but

421
00:20:28,910 --> 00:20:32,779
I think that should be fine and again

422
00:20:31,369 --> 00:20:33,308
that just gets us out of the business of

423
00:20:32,779 --> 00:20:35,710
needing to

424
00:20:33,308 --> 00:20:38,558
do any work really on that pack unpacked

425
00:20:35,710 --> 00:20:40,028
side of things because that that work

426
00:20:38,558 --> 00:20:42,009
really just shouldn't have had to be

427
00:20:40,028 --> 00:20:44,048
done as you can see it was a pretty

428
00:20:42,009 --> 00:20:45,548
minimal change so it was really like

429
00:20:44,048 --> 00:20:47,679
much ado about nothing

430
00:20:45,548 --> 00:20:49,480
and it was wasting a bunch of our like

431
00:20:47,679 --> 00:20:51,159
sort of wasting a bunch of code

432
00:20:49,480 --> 00:20:54,700
complexity on something that absolutely

433
00:20:51,159 --> 00:21:01,509
didn't need to be there um so I think

434
00:20:54,700 --> 00:21:04,090
we're good everything seems fine let me

435
00:21:01,509 --> 00:21:08,169
check to make sure the little hopper

436
00:21:04,089 --> 00:21:14,109
dudes down here or hoppin still there we

437
00:21:08,169 --> 00:21:16,149
go yeah so now we've got that out of the

438
00:21:14,109 --> 00:21:19,388
way if we take a look at what's

439
00:21:16,148 --> 00:21:22,538
happening for example in the unpack its

440
00:21:19,388 --> 00:21:25,148
I'm sorry in the begin world change it's

441
00:21:22,538 --> 00:21:28,028
much nicer now right as you can kind of

442
00:21:25,148 --> 00:21:31,239
see because the ensure region is

443
00:21:28,028 --> 00:21:36,759
unpacked call is the only thing we

444
00:21:31,240 --> 00:21:39,399
actually do there isn't this separate

445
00:21:36,759 --> 00:21:42,339
pass happening afterward to link up

446
00:21:39,398 --> 00:21:43,178
these pointers for no reason and so

447
00:21:42,339 --> 00:21:45,368
that's good

448
00:21:43,179 --> 00:21:47,320
similarly on in world change all we do

449
00:21:45,368 --> 00:21:50,278
is just do the basic repack and that

450
00:21:47,319 --> 00:21:54,548
basic repacked isn't doing anything

451
00:21:50,278 --> 00:21:56,829
weird either right so that's really good

452
00:21:54,548 --> 00:22:00,220
so this is just a better position to be

453
00:21:56,829 --> 00:22:04,359
in as we start this next sweep so now

454
00:22:00,220 --> 00:22:07,690
what I want to do is I want to figure

455
00:22:04,359 --> 00:22:10,689
out some way of not repacking all of

456
00:22:07,690 --> 00:22:13,808
these entities every time what I'd like

457
00:22:10,690 --> 00:22:19,090
to do is pack only those entities that

458
00:22:13,808 --> 00:22:22,168
belong to world chunks which are no

459
00:22:19,089 --> 00:22:25,778
longer necessary that's what I'd like

460
00:22:22,169 --> 00:22:29,470
and so I need to do a couple things to

461
00:22:25,778 --> 00:22:31,929
make that work the only complicated one

462
00:22:29,470 --> 00:22:37,720
like I said is figuring out which world

463
00:22:31,929 --> 00:22:41,889
chunks those are and so yeah I'm not

464
00:22:37,720 --> 00:22:44,829
entirely certain but I think I can make

465
00:22:41,888 --> 00:22:47,219
some educated guesses so if you take a

466
00:22:44,829 --> 00:22:49,109
look at what's happening when you ensure

467
00:22:47,220 --> 00:22:51,150
has unpacked what it does is it loops

468
00:22:49,109 --> 00:22:53,819
through and it actually pulls these

469
00:22:51,150 --> 00:22:59,910
world chunks out of the world entirely

470
00:22:53,819 --> 00:23:03,359
that's actually great so if I were to to

471
00:22:59,910 --> 00:23:07,320
sort of put this in terms of traditional

472
00:23:03,359 --> 00:23:09,149
CPU architecture uh if you think about

473
00:23:07,319 --> 00:23:15,559
the way a memory hierarchy is typically

474
00:23:09,150 --> 00:23:18,300
set up in CPU lands you have sort of

475
00:23:15,559 --> 00:23:21,539
rings of storage that get increasingly

476
00:23:18,299 --> 00:23:24,990
further away from the processing core

477
00:23:21,539 --> 00:23:27,000
right so I've got the CPU core and then

478
00:23:24,990 --> 00:23:29,309
I have like an well I have a register

479
00:23:27,000 --> 00:23:30,750
file right which is the closest possible

480
00:23:29,309 --> 00:23:34,710
thing stores the actual values of

481
00:23:30,750 --> 00:23:39,210
registers but then I've got outside of

482
00:23:34,710 --> 00:23:42,950
that an l1 cache an l2 cache oftentimes

483
00:23:39,210 --> 00:23:45,240
an l3 cache and then main memory right

484
00:23:42,950 --> 00:23:46,529
and you can even include like hard drive

485
00:23:45,240 --> 00:23:48,660
and so on after that right so there's

486
00:23:46,529 --> 00:23:52,379
like these sort of like expanding waves

487
00:23:48,660 --> 00:23:54,600
of memory and what we're doing here is

488
00:23:52,380 --> 00:23:58,740
essentially making what amounts to the

489
00:23:54,599 --> 00:24:01,109
l1 cache of our system in a sense so

490
00:23:58,740 --> 00:24:05,579
we've got the sim region which is like

491
00:24:01,109 --> 00:24:06,750
the processing core and we've got the l1

492
00:24:05,579 --> 00:24:09,449
cache sitting on it which is the

493
00:24:06,750 --> 00:24:12,180
unpacked entities and then we've got

494
00:24:09,450 --> 00:24:14,490
what is effectively the l2 cache or main

495
00:24:12,180 --> 00:24:17,220
memory depending how I look at it it's

496
00:24:14,490 --> 00:24:20,670
the one after the next one out is the

497
00:24:17,220 --> 00:24:22,589
actual chunked world storage now in CPU

498
00:24:20,670 --> 00:24:24,750
architecture when you talk about caches

499
00:24:22,589 --> 00:24:27,269
there's a notion of whether they're

500
00:24:24,750 --> 00:24:29,759
inclusive or exclusive of each other and

501
00:24:27,269 --> 00:24:31,769
what that means is if I have an l1 cache

502
00:24:29,759 --> 00:24:33,660
and an l2 cache these are places where

503
00:24:31,769 --> 00:24:35,670
information can be stored but the

504
00:24:33,660 --> 00:24:38,430
information can be the same information

505
00:24:35,670 --> 00:24:41,640
right so if I ask for a particular part

506
00:24:38,430 --> 00:24:44,640
of main memory and I ask for it from the

507
00:24:41,640 --> 00:24:47,190
l1 cache the l1 cache may say I don't

508
00:24:44,640 --> 00:24:49,290
have that I eat ask the l2 cache the l2

509
00:24:47,190 --> 00:24:51,539
cache says I may not have that it asked

510
00:24:49,289 --> 00:24:54,299
main memory that main memory may now

511
00:24:51,539 --> 00:24:56,009
come back to the l2 cache reside in the

512
00:24:54,299 --> 00:24:59,490
l2 cache come back to the l1 cache

513
00:24:56,009 --> 00:25:01,048
reside in the l1 cache as well and then

514
00:24:59,490 --> 00:25:04,288
get handed to the processor right

515
00:25:01,048 --> 00:25:06,808
and now that same piece of information

516
00:25:04,288 --> 00:25:09,450
the copy of whatever was in the main

517
00:25:06,808 --> 00:25:12,898
memory at that location I asked for that

518
00:25:09,450 --> 00:25:15,960
cache line is now filled in l2 and l1

519
00:25:12,898 --> 00:25:17,748
right if that sort of thing happens in

520
00:25:15,960 --> 00:25:21,058
your cache our key it's called an

521
00:25:17,749 --> 00:25:23,368
inclusive cache right meaning that

522
00:25:21,058 --> 00:25:26,118
things that are in the l1 can be

523
00:25:23,368 --> 00:25:28,349
included in the l2 and vice versa

524
00:25:26,118 --> 00:25:30,569
but there's also the concept of an

525
00:25:28,349 --> 00:25:33,449
exclusive cache which is to say that a

526
00:25:30,569 --> 00:25:36,960
particular cache line is either in l1 or

527
00:25:33,450 --> 00:25:39,720
in l2 and if I fill l1 with a cache line

528
00:25:36,960 --> 00:25:48,058
it moves out of l2 and does not exist

529
00:25:39,720 --> 00:25:49,649
there any longer right and so in our

530
00:25:48,058 --> 00:25:52,319
case the kind of a structure we're

531
00:25:49,648 --> 00:25:54,388
building is an exclusive structure we

532
00:25:52,319 --> 00:25:57,178
are storing our world information in

533
00:25:54,388 --> 00:25:59,998
world chunks we're going to be storing

534
00:25:57,179 --> 00:26:03,960
them only when they are not in this

535
00:25:59,999 --> 00:26:06,600
local cache where they're expanded so

536
00:26:03,960 --> 00:26:07,798
just keeping that in mind that's the way

537
00:26:06,599 --> 00:26:09,028
it's currently set up right now I think

538
00:26:07,798 --> 00:26:10,769
we want to keep it that way

539
00:26:09,028 --> 00:26:13,108
so what happens is when we ask the

540
00:26:10,769 --> 00:26:14,849
unpackage chunk we remove that entire

541
00:26:13,108 --> 00:26:17,999
chunks contents from the system it's

542
00:26:14,849 --> 00:26:20,519
gone and it's all unpacked into the

543
00:26:17,999 --> 00:26:23,489
local cache like fast unpacked entity

544
00:26:20,519 --> 00:26:25,980
store and then later if we're going to

545
00:26:23,489 --> 00:26:27,929
repack a chunk it's basically it's it's

546
00:26:25,980 --> 00:26:30,628
almost like not repacking the chunk it's

547
00:26:27,929 --> 00:26:32,190
like creating the chunk wholly new right

548
00:26:30,628 --> 00:26:38,638
where it's like making a totally new

549
00:26:32,190 --> 00:26:42,239
chunk to pack right okay so what we want

550
00:26:38,638 --> 00:26:45,898
to do here is we want to figure out how

551
00:26:42,239 --> 00:26:47,519
to know what chunks to repack and if you

552
00:26:45,898 --> 00:26:51,628
look at the way we're doing it currently

553
00:26:47,519 --> 00:26:53,730
we just pack our chunks all of them

554
00:26:51,628 --> 00:26:57,079
right so when we loop through here we

555
00:26:53,730 --> 00:27:00,028
say if this thing wasn't deleted right

556
00:26:57,079 --> 00:27:02,519
because you can delete an entity if this

557
00:27:00,028 --> 00:27:04,558
thing wasn't deleted then we met then we

558
00:27:02,519 --> 00:27:05,970
pack it back into the chunks and then at

559
00:27:04,558 --> 00:27:09,450
the end we say we've got no entities

560
00:27:05,970 --> 00:27:12,450
what we want is a way of conditionally

561
00:27:09,450 --> 00:27:14,710
calling this code in here instead of

562
00:27:12,450 --> 00:27:17,080
just always calling in for anything

563
00:27:14,710 --> 00:27:20,409
wasn't deleted we want to call it for

564
00:27:17,079 --> 00:27:24,808
anything that wasn't deleted and isn't

565
00:27:20,409 --> 00:27:27,159
likely to be used next frame right

566
00:27:24,808 --> 00:27:30,759
that's what we're actually trying to do

567
00:27:27,159 --> 00:27:33,039
here and that is why I say this is the

568
00:27:30,759 --> 00:27:34,509
part that's really confusing right this

569
00:27:33,038 --> 00:27:38,470
is the part that's hard to figure out

570
00:27:34,509 --> 00:27:40,750
how we want to do it and so one way we

571
00:27:38,470 --> 00:27:42,970
could do it is to just see whether or

572
00:27:40,750 --> 00:27:45,849
not the end EES lie outside the active

573
00:27:42,970 --> 00:27:48,240
region and then if they do we pack them

574
00:27:45,849 --> 00:27:48,240
back up

575
00:27:53,079 --> 00:27:56,210
[Music]

576
00:28:00,299 --> 00:28:05,680
so when I'm saying that it sounds like

577
00:28:02,859 --> 00:28:07,029
ridiculously stupidly easy and I was

578
00:28:05,680 --> 00:28:13,779
like this is gonna be the complicated

579
00:28:07,029 --> 00:28:18,299
part but I'm like is that just it do we

580
00:28:13,779 --> 00:28:21,000
just pass a region and say here's the

581
00:28:18,299 --> 00:28:23,289
here's what I expect to be unpacking

582
00:28:21,000 --> 00:28:32,529
next frame anything that's not close to

583
00:28:23,289 --> 00:28:37,529
this just just repack it I think it is

584
00:28:32,529 --> 00:28:50,920
that simple because we're spatial so I

585
00:28:37,529 --> 00:28:52,990
think that just works I honestly think

586
00:28:50,920 --> 00:28:58,000
that that may be all there is to it so

587
00:28:52,990 --> 00:29:04,089
if you imagine just saying expected been

588
00:28:58,000 --> 00:29:06,130
jumpy expected max chunk P I think I

589
00:29:04,089 --> 00:29:08,349
made a huge deal out of something that

590
00:29:06,130 --> 00:29:13,660
literally is just completely brain-dead

591
00:29:08,349 --> 00:29:16,149
stupid if we just pass essentially what

592
00:29:13,660 --> 00:29:19,720
we either just passed the same region

593
00:29:16,150 --> 00:29:23,230
already or what that we use to unpack or

594
00:29:19,720 --> 00:29:28,150
we just pass what we think the next

595
00:29:23,230 --> 00:29:33,539
frames one would be then I think we can

596
00:29:28,150 --> 00:29:36,780
just just repack those entities and

597
00:29:33,539 --> 00:29:36,779
that's it

598
00:29:40,829 --> 00:29:46,048
not only that but we can do it only if

599
00:29:43,599 --> 00:29:49,119
our entity load is currently over a

600
00:29:46,048 --> 00:29:52,450
threshold invaluable so we can basically

601
00:29:49,119 --> 00:30:02,229
just only repack when we feel like we

602
00:29:52,450 --> 00:30:05,528
need to repack and not otherwise I don't

603
00:30:02,230 --> 00:30:05,860
know man I think that's all there is to

604
00:30:05,528 --> 00:30:10,778
it

605
00:30:05,859 --> 00:30:14,500
so when we produce this entity P here so

606
00:30:10,778 --> 00:30:15,909
what we could do is say look we've got a

607
00:30:14,500 --> 00:30:18,429
couple of different cases we have to

608
00:30:15,909 --> 00:30:21,850
handle now so the first thing is we have

609
00:30:18,429 --> 00:30:25,840
to handle we do have to handle deleting

610
00:30:21,849 --> 00:30:29,019
entities right so so that's actually has

611
00:30:25,839 --> 00:30:33,250
to happen and we don't want to repack

612
00:30:29,019 --> 00:30:34,990
things when we delete entities and so

613
00:30:33,250 --> 00:30:43,990
what I want to do here is probably

614
00:30:34,990 --> 00:30:47,159
something like this I probably want to

615
00:30:43,990 --> 00:30:49,899
keep a thing that's like removed from

616
00:30:47,159 --> 00:30:52,269
unpacked which is not the same as

617
00:30:49,898 --> 00:30:59,609
deleted and so I probably want to do

618
00:30:52,269 --> 00:31:04,950
something like look at the end of this

619
00:30:59,609 --> 00:31:08,648
we're gonna process this slot because we

620
00:31:04,950 --> 00:31:11,048
you know we probably want to reuse this

621
00:31:08,648 --> 00:31:12,668
slot as sort of a free list for

622
00:31:11,048 --> 00:31:15,369
unpacking entities so we're probably

623
00:31:12,669 --> 00:31:18,278
going to maintain a chain that we use

624
00:31:15,369 --> 00:31:23,888
for allocating new entities through the

625
00:31:18,278 --> 00:31:27,548
slots right I and so I think all we

626
00:31:23,888 --> 00:31:30,278
really need to do here is say if we're

627
00:31:27,548 --> 00:31:33,128
gonna delete it then we remove it from

628
00:31:30,278 --> 00:31:36,638
unpacked and we don't do any actual

629
00:31:33,128 --> 00:31:41,168
packing that will just get rid of it in

630
00:31:36,638 --> 00:31:43,119
here we will say if some criteria that

631
00:31:41,169 --> 00:31:46,288
we're about to invoke let me move it

632
00:31:43,119 --> 00:31:49,918
over here so my head's not in the way

633
00:31:46,288 --> 00:31:51,019
then we have packed it and we will say

634
00:31:49,919 --> 00:31:55,970
remove

635
00:31:51,019 --> 00:32:00,679
from unpacked right and here we probably

636
00:31:55,970 --> 00:32:03,769
want to do total entity packs - unpacks

637
00:32:00,679 --> 00:32:05,480
would go here because it's it's every

638
00:32:03,769 --> 00:32:07,369
time we remove one that would happen you

639
00:32:05,480 --> 00:32:09,019
know that deleted part that might

640
00:32:07,369 --> 00:32:10,279
actually if we ever delete entities I

641
00:32:09,019 --> 00:32:12,139
don't remember if we do but that might

642
00:32:10,279 --> 00:32:14,178
have been why we had a differing pack

643
00:32:12,140 --> 00:32:17,509
and unpack to remember those numbers

644
00:32:14,179 --> 00:32:20,090
were slightly different I don't know if

645
00:32:17,509 --> 00:32:21,920
we ever delete entities so do we I think

646
00:32:20,089 --> 00:32:25,549
we do I don't think we ever delete any

647
00:32:21,920 --> 00:32:27,100
entities but anyway so if we take a look

648
00:32:25,549 --> 00:32:29,349
at what's going on in here

649
00:32:27,099 --> 00:32:31,759
the first thing that we want to do

650
00:32:29,349 --> 00:32:33,259
before we actually you know this is this

651
00:32:31,759 --> 00:32:36,230
has to get implemented right so this is

652
00:32:33,259 --> 00:32:48,679
the thing but what we want to do here at

653
00:32:36,230 --> 00:32:49,789
Polk and also this is the thing so I

654
00:32:48,679 --> 00:32:53,000
think what we want to do here is say

655
00:32:49,789 --> 00:32:56,599
look if this entity placement world

656
00:32:53,000 --> 00:33:01,339
position let's just see does it fall

657
00:32:56,599 --> 00:33:04,369
within these if it doesn't then I think

658
00:33:01,339 --> 00:33:08,539
we want to pack it if it does then we

659
00:33:04,369 --> 00:33:13,428
don't right so let's take a look do we

660
00:33:08,539 --> 00:33:16,909
have a way of actually doing that right

661
00:33:13,429 --> 00:33:19,070
so you know we've got these s 32s here

662
00:33:16,910 --> 00:33:21,980
and what I really want to do is just say

663
00:33:19,069 --> 00:33:23,210
are we inside some you know in fact it's

664
00:33:21,980 --> 00:33:27,579
one of these right

665
00:33:23,210 --> 00:33:30,920
it's a min/max pose thing of like a

666
00:33:27,579 --> 00:33:34,308
compound's like an interval right I just

667
00:33:30,920 --> 00:33:36,920
don't know if we have anything that like

668
00:33:34,308 --> 00:33:40,220
checks for a range like is this inside

669
00:33:36,920 --> 00:33:43,330
of these two things and I just want to

670
00:33:40,220 --> 00:33:46,329
see right if it does or if it doesn't

671
00:33:43,329 --> 00:33:46,329
and

672
00:33:50,720 --> 00:33:54,319
I don't see any so I think I'm gonna

673
00:33:52,878 --> 00:33:59,769
have to just write it it's a very simple

674
00:33:54,319 --> 00:33:59,769
function but I I don't see it right yeah

675
00:34:00,519 --> 00:34:04,638
I'd also like to change all these in

676
00:34:03,288 --> 00:34:08,030
lines I don't know why we still have

677
00:34:04,638 --> 00:34:09,710
these in lines here so in line should

678
00:34:08,030 --> 00:34:11,510
just be internal we don't really use in

679
00:34:09,710 --> 00:34:14,480
line anymore it's it's not it's kind of

680
00:34:11,510 --> 00:34:16,520
an old-school thing in line used to do

681
00:34:14,480 --> 00:34:18,199
stuff it doesn't do stuff anymore so

682
00:34:16,519 --> 00:34:21,918
it's just kind of a stupid keyword to

683
00:34:18,199 --> 00:34:23,148
have around it's just distracting you

684
00:34:21,918 --> 00:34:24,769
know I used to use it kind of to remind

685
00:34:23,148 --> 00:34:26,210
myself what was me in line map but it's

686
00:34:24,769 --> 00:34:27,918
really just kind of distracting at this

687
00:34:26,210 --> 00:34:29,869
point because it's like the compiler

688
00:34:27,918 --> 00:34:31,519
does whatever it wants to do and unless

689
00:34:29,869 --> 00:34:34,789
you actually try to force it in line

690
00:34:31,519 --> 00:34:35,838
things yeah it can just decide not to it

691
00:34:34,789 --> 00:34:37,909
doesn't matter whether you put in line

692
00:34:35,838 --> 00:34:40,489
in front of it or not so here in world

693
00:34:37,909 --> 00:34:42,108
position entity P this is the part where

694
00:34:40,489 --> 00:34:46,368
I want to do a check so I'm gonna just

695
00:34:42,108 --> 00:34:50,298
see like if there's an is but you know

696
00:34:46,369 --> 00:34:53,169
isn't contained something like that and

697
00:34:50,298 --> 00:34:57,769
so I want to do an expected min chunk P

698
00:34:53,168 --> 00:34:59,598
n VP expected max chunk P like that and

699
00:34:57,769 --> 00:35:03,048
I want to do like an is contained

700
00:34:59,599 --> 00:35:05,359
function that'll just do the check like

701
00:35:03,048 --> 00:35:12,440
greater than or equal to or whatever on

702
00:35:05,358 --> 00:35:18,679
that set of bounds and you know maybe

703
00:35:12,440 --> 00:35:20,240
like in volume something like that I

704
00:35:18,679 --> 00:35:22,308
don't know I'm not really sure how to

705
00:35:20,239 --> 00:35:26,269
say it well but something like this and

706
00:35:22,309 --> 00:35:28,700
so if we actually say you know this can

707
00:35:26,269 --> 00:35:33,559
change can is contain in chunk volume

708
00:35:28,699 --> 00:35:40,759
and we did like a min or min chunk

709
00:35:33,559 --> 00:35:42,829
max chunk and test chunk like that then

710
00:35:40,760 --> 00:35:45,349
what I want to do is create sort of

711
00:35:42,829 --> 00:35:48,619
giant relation here as my result and

712
00:35:45,349 --> 00:35:50,420
return it and this is just going to be

713
00:35:48,619 --> 00:35:52,548
checking greater than or equal to for

714
00:35:50,420 --> 00:35:56,180
each of these things right so the min

715
00:35:52,548 --> 00:36:00,590
chunk these are actually what chunk X

716
00:35:56,179 --> 00:36:03,239
chunk why's it like that yeah

717
00:36:00,590 --> 00:36:05,850
so basically what I want to say is look

718
00:36:03,239 --> 00:36:10,019
the test chunk chunk X has to be greater

719
00:36:05,849 --> 00:36:15,719
than equal to the Mensch unk of each of

720
00:36:10,019 --> 00:36:17,099
these y&amp;z y and z right and then it

721
00:36:15,719 --> 00:36:25,259
needs to be less than or equal to the

722
00:36:17,099 --> 00:36:27,480
max junk oops and I think that's the way

723
00:36:25,260 --> 00:36:28,980
we've been doing it like I think when we

724
00:36:27,480 --> 00:36:30,690
pass these it's it's less wrinkled look

725
00:36:28,980 --> 00:36:32,670
I'm just going to take a really quick

726
00:36:30,690 --> 00:36:33,900
second to check to see if that was the

727
00:36:32,670 --> 00:36:35,849
convention that I've generally been

728
00:36:33,900 --> 00:36:38,910
using not that we've been using it much

729
00:36:35,849 --> 00:36:43,730
here but yet you can see right we tend

730
00:36:38,909 --> 00:36:47,129
to use an inclusive outer bound on there

731
00:36:43,730 --> 00:36:50,039
so there's our R check we just look to

732
00:36:47,130 --> 00:36:53,039
see if the test is in between the min

733
00:36:50,039 --> 00:36:57,210
and the max including being on on one of

734
00:36:53,039 --> 00:37:00,809
those exactly and once we've done that

735
00:36:57,210 --> 00:37:03,030
what we want to do is use that check to

736
00:37:00,809 --> 00:37:05,610
determine whether or not this thing is

737
00:37:03,030 --> 00:37:08,760
packed now in the case where it is

738
00:37:05,610 --> 00:37:12,120
contained we actually don't want to

739
00:37:08,760 --> 00:37:14,400
check it out to pack it right so we want

740
00:37:12,119 --> 00:37:16,139
to not there because the case that we're

741
00:37:14,400 --> 00:37:18,480
when we're actually packing entities

742
00:37:16,139 --> 00:37:21,449
into chunks is we're packing them into

743
00:37:18,480 --> 00:37:23,039
chunks when they're outside of the

744
00:37:21,449 --> 00:37:30,919
region we expect to simulate not when

745
00:37:23,039 --> 00:37:33,949
they're inside it all right

746
00:37:30,920 --> 00:37:36,048
um so taking a look at this this is just

747
00:37:33,949 --> 00:37:40,159
again the the this is just the standard

748
00:37:36,048 --> 00:37:45,048
packing that we were doing before this

749
00:37:40,159 --> 00:37:47,389
packs it up in there and we really don't

750
00:37:45,048 --> 00:37:51,429
have to do much else than that I think

751
00:37:47,389 --> 00:37:54,139
that's gonna be basically it so I think

752
00:37:51,429 --> 00:37:55,669
all the stuff I was like this is gonna

753
00:37:54,139 --> 00:37:57,768
be really difficult and blah blah blah

754
00:37:55,670 --> 00:38:02,690
it actually I think turns out to really

755
00:37:57,768 --> 00:38:03,949
not be difficult at all so off we go so

756
00:38:02,690 --> 00:38:07,789
the other thing that I think we want to

757
00:38:03,949 --> 00:38:10,578
do here is inside the world we want this

758
00:38:07,789 --> 00:38:13,519
cash to be fairly like intelligent I

759
00:38:10,579 --> 00:38:15,680
think so in here where we've got max

760
00:38:13,518 --> 00:38:21,018
unpacked nd count and unpack sanity

761
00:38:15,679 --> 00:38:24,278
count I think what I want to do is track

762
00:38:21,018 --> 00:38:32,209
these things a little bit more

763
00:38:24,278 --> 00:38:37,219
specifically so that I know when I'm in

764
00:38:32,210 --> 00:38:44,119
a more pressured scenario right and we

765
00:38:37,219 --> 00:38:47,239
don't have to I essentially don't want

766
00:38:44,119 --> 00:38:51,019
to be packing things if I don't have to

767
00:38:47,239 --> 00:38:53,679
might be the way to say it so in other

768
00:38:51,018 --> 00:38:57,379
words until I actually hit a certain

769
00:38:53,679 --> 00:39:00,608
thresholds I don't want to bother

770
00:38:57,380 --> 00:39:00,608
packing up entities

771
00:39:05,090 --> 00:39:23,309
I'm not sure exactly how I want to track

772
00:39:07,920 --> 00:39:26,269
that but in imagine this right so I

773
00:39:23,309 --> 00:39:31,320
essentially want something like current

774
00:39:26,269 --> 00:39:34,829
unpacked entity count and like unpack

775
00:39:31,320 --> 00:39:35,849
identity like well to be honest we can

776
00:39:34,829 --> 00:39:37,159
kind of get rid of this and probably

777
00:39:35,849 --> 00:39:41,340
just thread it to begin with so

778
00:39:37,159 --> 00:39:44,279
something like this where we have

779
00:39:41,340 --> 00:39:46,740
current unpacked entity count and what I

780
00:39:44,280 --> 00:39:51,740
want to do is something where in here we

781
00:39:46,739 --> 00:39:56,159
would say look while the current

782
00:39:51,739 --> 00:40:05,719
unpacked entity count is greater than

783
00:39:56,159 --> 00:40:05,719
like our threshold alike

784
00:40:07,130 --> 00:40:11,088
I'm almost making another parameter

785
00:40:14,989 --> 00:40:23,848
something like this then we would pack

786
00:40:20,159 --> 00:40:25,920
so in other words if this criteria if

787
00:40:23,849 --> 00:40:29,910
we've exceeded the number of currently

788
00:40:25,920 --> 00:40:32,338
unpacked entities then we want to pack

789
00:40:29,909 --> 00:40:33,838
otherwise we just don't so even if these

790
00:40:32,338 --> 00:40:35,730
things are really far away we don't care

791
00:40:33,838 --> 00:40:38,909
we'll just leave them unpack because we

792
00:40:35,730 --> 00:40:41,940
want to use all of our cash space and

793
00:40:38,909 --> 00:40:46,710
not waste work so when we come through

794
00:40:41,940 --> 00:40:49,230
here then we say alright this current

795
00:40:46,710 --> 00:40:52,588
unpacked entity counts this thing goes

796
00:40:49,230 --> 00:40:54,389
down every time that happens and it goes

797
00:40:52,588 --> 00:41:02,750
up every time this happens and that's

798
00:40:54,389 --> 00:41:02,750
our actual that's our actual number

799
00:41:06,900 --> 00:41:14,200
and so here we will assert that the this

800
00:41:12,519 --> 00:41:16,179
number is greater than zero because you

801
00:41:14,199 --> 00:41:18,129
shouldn't ever be able to pack out more

802
00:41:16,179 --> 00:41:22,960
than the total number that exists and

803
00:41:18,130 --> 00:41:25,539
here when we unpack we're gonna add that

804
00:41:22,960 --> 00:41:27,789
in there now

805
00:41:25,539 --> 00:41:30,009
when we add an entity this actually

806
00:41:27,789 --> 00:41:32,110
occurs as well and so I think what we

807
00:41:30,010 --> 00:41:34,950
kind of want to do here is we want to

808
00:41:32,110 --> 00:41:38,710
track the creation of the entity that

809
00:41:34,949 --> 00:41:40,659
here this may also been a source of our

810
00:41:38,710 --> 00:41:43,360
off of our numbers being off in fact

811
00:41:40,659 --> 00:41:46,239
this probably was when we do a create

812
00:41:43,360 --> 00:41:49,030
entity here and we use one of these

813
00:41:46,239 --> 00:41:51,089
slots then we want to do this now I

814
00:41:49,030 --> 00:41:54,460
think we can actually make these things

815
00:41:51,090 --> 00:41:56,350
more commensurate utz because what we

816
00:41:54,460 --> 00:41:58,179
could do is when we actually create

817
00:41:56,349 --> 00:42:01,960
enemies I think what we want to do here

818
00:41:58,179 --> 00:42:04,960
is call this every time so this is gonna

819
00:42:01,960 --> 00:42:08,470
be more like a allocate an entity slot

820
00:42:04,960 --> 00:42:10,449
you know and it'll get called by this so

821
00:42:08,469 --> 00:42:13,779
this code right here I think what we

822
00:42:10,449 --> 00:42:17,460
want is like not that actually we want

823
00:42:13,780 --> 00:42:22,870
something like a you know acquire entity

824
00:42:17,460 --> 00:42:25,990
unpacked and then a slot call right and

825
00:42:22,869 --> 00:42:28,329
so you know this sort of this thing will

826
00:42:25,989 --> 00:42:29,349
be doing something along these lines who

827
00:42:28,329 --> 00:42:31,750
knows what that's going to be doing

828
00:42:29,349 --> 00:42:33,579
something like that but will be

829
00:42:31,750 --> 00:42:36,730
acquiring an entity slot here for this

830
00:42:33,579 --> 00:42:43,869
and then we would also acquire a entity

831
00:42:36,730 --> 00:42:46,329
slot the same way during a call to

832
00:42:43,869 --> 00:42:48,309
create entity right

833
00:42:46,329 --> 00:42:52,090
in fact I guess creativity would just do

834
00:42:48,309 --> 00:42:53,829
it directly so yes so this call here is

835
00:42:52,090 --> 00:42:56,230
actually gonna be a choir unpacked

836
00:42:53,829 --> 00:42:58,239
entity slot it's not going to be called

837
00:42:56,230 --> 00:43:01,210
create entity because that's not what it

838
00:42:58,239 --> 00:43:05,799
actually does if that makes sense

839
00:43:01,210 --> 00:43:08,800
I think I think that's what we want and

840
00:43:05,800 --> 00:43:10,810
then when you call create entity on the

841
00:43:08,800 --> 00:43:14,320
actual sim region which is where people

842
00:43:10,809 --> 00:43:15,440
normally call it this is presumably the

843
00:43:14,320 --> 00:43:19,250
place where this would I

844
00:43:15,440 --> 00:43:22,099
really happen right so in here you would

845
00:43:19,250 --> 00:43:27,139
create you would you know acquire an

846
00:43:22,099 --> 00:43:29,179
unpacked entity slot and then this would

847
00:43:27,139 --> 00:43:31,489
zero it because it wants to create a new

848
00:43:29,179 --> 00:43:35,539
one but most of the time you wouldn't be

849
00:43:31,489 --> 00:43:40,429
doing that right so I think that's more

850
00:43:35,539 --> 00:43:42,469
what we want here and we just need a

851
00:43:40,429 --> 00:43:43,849
free list and I think we're good so in

852
00:43:42,469 --> 00:43:45,709
here we're gonna say look let's acquire

853
00:43:43,849 --> 00:43:47,630
an unpacked enemy slot then we fill it

854
00:43:45,710 --> 00:43:50,090
up with whatever the heck we want to

855
00:43:47,630 --> 00:43:51,590
fill it up with don't ask me why we're

856
00:43:50,090 --> 00:43:53,240
asserting the source here because the

857
00:43:51,590 --> 00:43:55,610
source literally came from something

858
00:43:53,239 --> 00:43:58,489
that you could literally like the way to

859
00:43:55,610 --> 00:43:58,970
make this not be zero would be extremely

860
00:43:58,489 --> 00:44:00,949
difficult

861
00:43:58,969 --> 00:44:04,189
you'd have to back this up by the entity

862
00:44:00,949 --> 00:44:06,919
index from the end of zero like negative

863
00:44:04,190 --> 00:44:10,960
that's I don't that doesn't need to be

864
00:44:06,920 --> 00:44:10,960
there I don't know why that was there so

865
00:44:11,019 --> 00:44:16,909
yeah looking at this I'm just gonna

866
00:44:13,489 --> 00:44:19,219
clean this up looking at that you also

867
00:44:16,909 --> 00:44:21,079
see well this is going to happen during

868
00:44:19,219 --> 00:44:23,739
this so if that's probably fine

869
00:44:21,079 --> 00:44:26,569
so we're literally just looking at this

870
00:44:23,739 --> 00:44:28,909
right we just move the source in and

871
00:44:26,570 --> 00:44:29,990
then we we update that chunk Delta so

872
00:44:28,909 --> 00:44:31,759
again

873
00:44:29,989 --> 00:44:33,229
simplifying the code more and more and

874
00:44:31,760 --> 00:44:34,880
you can see that eventually this is

875
00:44:33,230 --> 00:44:36,860
going to be an actual unpack and not

876
00:44:34,880 --> 00:44:39,860
just a copy so we're really kind of

877
00:44:36,860 --> 00:44:42,800
getting down to two what we need and I

878
00:44:39,860 --> 00:44:47,390
think this is gonna go away

879
00:44:42,800 --> 00:44:50,080
and also this part right here is also

880
00:44:47,389 --> 00:44:50,079
going to go away

881
00:44:56,998 --> 00:45:04,838
all right so yeah this stuff I don't

882
00:45:00,338 --> 00:45:06,400
know if we really want to handle this in

883
00:45:04,838 --> 00:45:07,659
fact I don't think we do I think we're

884
00:45:06,400 --> 00:45:08,950
just gonna do this we're gonna start

885
00:45:07,659 --> 00:45:10,268
that up in here and we're gonna make

886
00:45:08,949 --> 00:45:12,608
sure this is big enough that we can

887
00:45:10,268 --> 00:45:15,669
never really create enough to flood it I

888
00:45:12,608 --> 00:45:19,690
guess what we're gonna do I think that

889
00:45:15,670 --> 00:45:23,528
looks fine uh so I think that's all good

890
00:45:19,690 --> 00:45:25,240
um I don't think there's anything else

891
00:45:23,528 --> 00:45:28,028
we really need to worry about there I

892
00:45:25,239 --> 00:45:32,379
think that's all good fine I like it

893
00:45:28,028 --> 00:45:33,849
it's happy it's it's good yeah so now

894
00:45:32,380 --> 00:45:37,690
what I need to do is kind of clean up

895
00:45:33,849 --> 00:45:40,420
how we're doing the entity unpacked

896
00:45:37,690 --> 00:45:43,568
enemy slot stuff and we just need to

897
00:45:40,420 --> 00:45:45,130
kind of make this sensible so I don't

898
00:45:43,568 --> 00:45:46,329
really want to bother with two different

899
00:45:45,130 --> 00:45:47,829
ways of doing this so I think I might

900
00:45:46,329 --> 00:45:50,740
just string these ahead of time and

901
00:45:47,829 --> 00:45:53,289
here's how we're gonna do that so when

902
00:45:50,739 --> 00:45:55,268
we've got entities if we look at the

903
00:45:53,289 --> 00:45:58,499
entity struct right you can kind of see

904
00:45:55,268 --> 00:46:01,719
in here is just a big bag of garbage

905
00:45:58,498 --> 00:46:04,028
what I want to do is just say look I'm

906
00:46:01,719 --> 00:46:06,848
gonna treat when these things are empty

907
00:46:04,028 --> 00:46:09,009
I'm gonna treat this as actually sort of

908
00:46:06,849 --> 00:46:12,999
a different kind of struct one that just

909
00:46:09,009 --> 00:46:15,248
has like a chain through it of entities

910
00:46:12,998 --> 00:46:17,318
so that I actually can store the free

911
00:46:15,248 --> 00:46:18,969
list using the space that we would

912
00:46:17,318 --> 00:46:22,630
normally use to store MV information

913
00:46:18,969 --> 00:46:25,179
because obviously I can write and that's

914
00:46:22,630 --> 00:46:27,430
pretty easy and there's a lot of ways I

915
00:46:25,179 --> 00:46:32,108
could do that but probably the easiest

916
00:46:27,429 --> 00:46:34,598
one would be to just use this ID value

917
00:46:32,108 --> 00:46:38,650
to just store whatever the next slot is

918
00:46:34,599 --> 00:46:40,150
or something like that that's probably

919
00:46:38,650 --> 00:46:44,579
the most straightforward way to do it

920
00:46:40,150 --> 00:46:44,579
the other way I could do it is this way

921
00:46:50,969 --> 00:46:56,139
so basically I could just chain these

922
00:46:53,579 --> 00:46:57,579
like that now the reason I don't love

923
00:46:56,139 --> 00:46:59,739
that it's cuz this is bigger than this

924
00:46:57,579 --> 00:47:01,869
so really ideally you would want to do

925
00:46:59,739 --> 00:47:06,399
it on something that was also eight

926
00:47:01,869 --> 00:47:09,339
bytes wide and something like that so

927
00:47:06,400 --> 00:47:10,960
you know not the the cleanest thing in

928
00:47:09,340 --> 00:47:13,059
the world we can't of course just put it

929
00:47:10,960 --> 00:47:16,119
somewhere else where it would be but

930
00:47:13,059 --> 00:47:17,380
again I really don't know how I want

931
00:47:16,119 --> 00:47:20,440
that to play out

932
00:47:17,380 --> 00:47:25,050
I really couldn't tell you so I feel

933
00:47:20,440 --> 00:47:25,050
like probably the way I'm gonna do it is

934
00:47:25,079 --> 00:47:33,610
this instead and we're just gonna

935
00:47:31,539 --> 00:47:36,759
pretend that it's a different type when

936
00:47:33,610 --> 00:47:39,160
we are keeping our free list right and

937
00:47:36,760 --> 00:47:44,140
so in here what I'm going to do is say

938
00:47:39,159 --> 00:47:45,730
in you know in this sort of world of

939
00:47:44,139 --> 00:47:52,029
unpacked entities and all this sort of

940
00:47:45,730 --> 00:47:55,059
stuff we've got first free entity like

941
00:47:52,030 --> 00:47:56,769
that and I'm gonna get rid of unpacked

942
00:47:55,059 --> 00:48:00,429
entity count we're not gonna have that

943
00:47:56,769 --> 00:48:04,139
anymore we're just gonna have this when

944
00:48:00,429 --> 00:48:08,139
we actually create the worlds in here

945
00:48:04,139 --> 00:48:10,029
when we're not gonna lies this when we

946
00:48:08,139 --> 00:48:11,710
create our array of unpacked entities we

947
00:48:10,030 --> 00:48:15,519
are gonna do a loop through all of them

948
00:48:11,710 --> 00:48:18,639
and the maximum region entity counts is

949
00:48:15,519 --> 00:48:24,940
not going to be what we use here so if

950
00:48:18,639 --> 00:48:26,980
we look at that value whatever that is

951
00:48:24,940 --> 00:48:29,950
right maybe that's the most it could be

952
00:48:26,980 --> 00:48:32,860
in a sim region I don't really know but

953
00:48:29,949 --> 00:48:37,929
the max unpacked entity count and in

954
00:48:32,860 --> 00:48:42,910
fact this value I don't even know who's

955
00:48:37,929 --> 00:48:45,039
using that it's just this right yeah so

956
00:48:42,909 --> 00:48:47,529
for any given sim region that's sort of

957
00:48:45,039 --> 00:48:48,880
the what the hash table lookups can be I

958
00:48:47,530 --> 00:48:50,560
don't even know if we're gonna need that

959
00:48:48,880 --> 00:48:53,860
anymore we might be able to just get rid

960
00:48:50,559 --> 00:48:55,719
of that but point being in here when we

961
00:48:53,860 --> 00:48:58,240
initialize this regardless of what this

962
00:48:55,719 --> 00:49:00,149
thing actually ever is and maybe we make

963
00:48:58,239 --> 00:49:02,459
that something like this

964
00:49:00,150 --> 00:49:05,068
then in here we want this to probably be

965
00:49:02,460 --> 00:49:07,108
significantly larger right because

966
00:49:05,068 --> 00:49:09,719
there's no reason for us not to store a

967
00:49:07,108 --> 00:49:11,730
ton of unpacked entities because it's

968
00:49:09,719 --> 00:49:13,649
just a cache and we can choose to make

969
00:49:11,730 --> 00:49:16,260
that cache as large as or as small as we

970
00:49:13,650 --> 00:49:18,000
want it to be so I don't know what we

971
00:49:16,260 --> 00:49:19,859
want that value to be right now but

972
00:49:18,000 --> 00:49:22,019
let's say it's gonna be something like

973
00:49:19,858 --> 00:49:31,500
that and then in here we have our

974
00:49:22,019 --> 00:49:34,949
threshold and our unpacked entity

975
00:49:31,500 --> 00:49:38,789
threshold is just how when we are

976
00:49:34,949 --> 00:49:42,028
nervous right and so maybe we say like

977
00:49:38,789 --> 00:49:45,750
look and you know that could even do

978
00:49:42,028 --> 00:49:47,608
this this way when we get so many

979
00:49:45,750 --> 00:49:49,440
entities that we get up close to how

980
00:49:47,608 --> 00:49:50,250
many there would be in a sim region is

981
00:49:49,440 --> 00:49:52,950
the Headroom

982
00:49:50,250 --> 00:49:54,358
let's left then we start repacking

983
00:49:52,949 --> 00:49:58,500
things to try and make sure we always

984
00:49:54,358 --> 00:50:03,659
have plenty of headroom right for what's

985
00:49:58,500 --> 00:50:06,088
happening seems reasonable to me uh and

986
00:50:03,659 --> 00:50:08,009
the other thing about it is if we ever

987
00:50:06,088 --> 00:50:12,028
run out we can always try to pack at

988
00:50:08,010 --> 00:50:15,839
that time so you know we could sort of

989
00:50:12,028 --> 00:50:19,588
say you know when you run out try to do

990
00:50:15,838 --> 00:50:23,068
an emergency pack and pack as much as

991
00:50:19,588 --> 00:50:25,619
you can back in to the space we could

992
00:50:23,068 --> 00:50:27,088
try something that I'm gonna not deal

993
00:50:25,619 --> 00:50:29,670
with that kind of stuff just yet but we

994
00:50:27,088 --> 00:50:32,179
could certainly try it so let's take a

995
00:50:29,670 --> 00:50:38,608
look here so if we loop through these

996
00:50:32,179 --> 00:50:42,210
for our empty index zero and the index

997
00:50:38,608 --> 00:50:51,750
is less than world max impact entity

998
00:50:42,210 --> 00:50:53,309
counts we can grab each of these by

999
00:50:51,750 --> 00:50:55,619
basically just casting so we can say

1000
00:50:53,309 --> 00:50:58,559
look we've got the unpack end of the

1001
00:50:55,619 --> 00:51:00,660
array and we're gonna go forward by this

1002
00:50:58,559 --> 00:51:04,019
mini and then we're gonna treat it as if

1003
00:51:00,659 --> 00:51:05,429
it was a free entity right and so what

1004
00:51:04,019 --> 00:51:09,469
I'm going to do is say that free entity

1005
00:51:05,429 --> 00:51:09,469
has an X pointer right

1006
00:51:11,019 --> 00:51:19,039
that's right here and so I'm just gonna

1007
00:51:15,349 --> 00:51:22,039
chain all of these together right I'm

1008
00:51:19,039 --> 00:51:25,820
going to say that you know each one of

1009
00:51:22,039 --> 00:51:28,759
these one this each one of these points

1010
00:51:25,820 --> 00:51:33,490
to whatever the next one would have been

1011
00:51:28,760 --> 00:51:33,490
so you know something like this

1012
00:51:34,340 --> 00:51:39,019
now obviously the very last one we don't

1013
00:51:37,550 --> 00:51:50,180
want to do that oh you know what I could

1014
00:51:39,019 --> 00:51:52,039
do this in backwards order to so

1015
00:51:50,179 --> 00:51:53,839
something like this right where we

1016
00:51:52,039 --> 00:51:56,389
basically say live through each of these

1017
00:51:53,840 --> 00:51:57,890
for each one of them I want its next

1018
00:51:56,389 --> 00:51:59,420
pointer to point to whoever was before

1019
00:51:57,889 --> 00:52:00,559
it which will be zero on the first one

1020
00:51:59,420 --> 00:52:02,750
but then the rest of them will kind of

1021
00:52:00,559 --> 00:52:05,090
just point to each other and then at the

1022
00:52:02,750 --> 00:52:08,179
very end I'm just gonna say the first

1023
00:52:05,090 --> 00:52:10,519
free entity it's gonna be whatever that

1024
00:52:08,179 --> 00:52:13,879
prove was so now I just have a chain of

1025
00:52:10,519 --> 00:52:16,369
all the entities right in the entire

1026
00:52:13,880 --> 00:52:18,230
thing and so if I want to actually

1027
00:52:16,369 --> 00:52:20,480
initialize one of them all I have to do

1028
00:52:18,230 --> 00:52:21,889
is pop one of those off and use it just

1029
00:52:20,480 --> 00:52:26,139
the way that we always do

1030
00:52:21,889 --> 00:52:29,480
and so in here where we do

1031
00:52:26,139 --> 00:52:31,969
whereas our there it is when we do a

1032
00:52:29,480 --> 00:52:34,400
choir unpacked entity slot we now no

1033
00:52:31,969 --> 00:52:36,439
longer ever reference this array instead

1034
00:52:34,400 --> 00:52:44,838
what we do is we just say here's the

1035
00:52:36,440 --> 00:52:49,820
first free entity right we say the three

1036
00:52:44,838 --> 00:52:53,210
enemy pop equals that we pop off a free

1037
00:52:49,820 --> 00:52:57,800
entity here and we say look did we get

1038
00:52:53,210 --> 00:53:02,480
one right if we didn't we're in big

1039
00:52:57,800 --> 00:53:04,839
trouble but we can still process the we

1040
00:53:02,480 --> 00:53:07,280
can still avoid crashing probably maybe

1041
00:53:04,838 --> 00:53:09,679
by saying look we've gotten no entity

1042
00:53:07,280 --> 00:53:12,530
we'll return it right but this is

1043
00:53:09,679 --> 00:53:14,000
basically game over at this point so we

1044
00:53:12,530 --> 00:53:16,220
pop one off and we better have one

1045
00:53:14,000 --> 00:53:17,929
assuming that we do we then say that the

1046
00:53:16,219 --> 00:53:20,509
first three entities whatever the next

1047
00:53:17,929 --> 00:53:23,029
one was on here and then we say the

1048
00:53:20,510 --> 00:53:25,840
resulting entity that we're trying to

1049
00:53:23,030 --> 00:53:31,940
you know that we're trying to provide

1050
00:53:25,840 --> 00:53:34,760
that entity is going to be this one that

1051
00:53:31,940 --> 00:53:38,659
we pop just cast into an entity right so

1052
00:53:34,760 --> 00:53:40,220
now we've got it make sense we just

1053
00:53:38,659 --> 00:53:42,409
return that and the only other thing we

1054
00:53:40,219 --> 00:53:45,579
need to do is make sure that we would

1055
00:53:42,409 --> 00:53:48,679
you know record the fact that we have

1056
00:53:45,579 --> 00:53:49,880
another entity in the system that

1057
00:53:48,679 --> 00:53:55,129
someone's actually using a slot for

1058
00:53:49,880 --> 00:53:56,690
right so then that'll just automatically

1059
00:53:55,130 --> 00:53:58,519
happened when we flow through here and

1060
00:53:56,690 --> 00:54:00,530
also when people call community when we

1061
00:53:58,519 --> 00:54:03,380
go to delete entities again delete

1062
00:54:00,530 --> 00:54:05,390
entities only sort of happens here so in

1063
00:54:03,380 --> 00:54:07,670
the remove from unpacked side of things

1064
00:54:05,389 --> 00:54:09,559
when we start getting rid of entities

1065
00:54:07,670 --> 00:54:11,539
what we want to do here is say alright

1066
00:54:09,559 --> 00:54:14,750
when we're gonna remove an entity from

1067
00:54:11,539 --> 00:54:18,050
unpacked then what we do is we say the

1068
00:54:14,750 --> 00:54:20,809
entity in question which is this has to

1069
00:54:18,050 --> 00:54:24,440
go onto the free list so we say free

1070
00:54:20,809 --> 00:54:26,179
entity free end equals free entity right

1071
00:54:24,440 --> 00:54:27,530
so we just say look let's start looking

1072
00:54:26,179 --> 00:54:29,449
at this entity as if it was one of these

1073
00:54:27,530 --> 00:54:33,410
free Hannity which is just a pointer

1074
00:54:29,449 --> 00:54:35,689
chain we say that's next pointer equals

1075
00:54:33,409 --> 00:54:41,750
the first free and the first free equals

1076
00:54:35,690 --> 00:54:43,519
it now it's on the list and we record

1077
00:54:41,750 --> 00:54:46,309
the fact that it's on the list by

1078
00:54:43,519 --> 00:54:48,019
reducing that packed and a big count so

1079
00:54:46,309 --> 00:54:51,920
the count goes up here and down there

1080
00:54:48,019 --> 00:54:53,599
and so now we have the ability to sort

1081
00:54:51,920 --> 00:54:55,789
of just move things in and out of the

1082
00:54:53,599 --> 00:54:57,589
set and we don't really ever pack them

1083
00:54:55,789 --> 00:55:00,170
up again unless we think we really have

1084
00:54:57,590 --> 00:55:03,110
to and they're outside of the region we

1085
00:55:00,170 --> 00:55:06,380
expect to be using in here where we say

1086
00:55:03,110 --> 00:55:11,440
syntax missing we are just basically not

1087
00:55:06,380 --> 00:55:11,440
pre declaring that so that's not in here

1088
00:55:14,800 --> 00:55:23,750
what else we got unpacked entity counts

1089
00:55:20,119 --> 00:55:28,119
ah so when we run through our Envy's

1090
00:55:23,750 --> 00:55:28,119
here and we're looping over all of them

1091
00:55:31,369 --> 00:55:39,300
having to sort of adjust our entities

1092
00:55:34,500 --> 00:55:40,500
each time it would be yeah I don't think

1093
00:55:39,300 --> 00:55:42,059
there's really anything we can do about

1094
00:55:40,500 --> 00:55:44,519
that I think we just have to loop over

1095
00:55:42,059 --> 00:55:46,410
all of them and and actually operate on

1096
00:55:44,519 --> 00:55:56,009
them like this has to kind of be this

1097
00:55:46,409 --> 00:55:58,588
right and if the entity exists then

1098
00:55:56,010 --> 00:56:00,089
that's fine we could just check the

1099
00:55:58,588 --> 00:56:03,568
flags to see if it's deleted or not

1100
00:56:00,088 --> 00:56:05,808
right and just not update ones that are

1101
00:56:03,568 --> 00:56:05,808
deleted

1102
00:56:14,710 --> 00:56:18,970
I mean I yeah I guess I don't know what

1103
00:56:17,349 --> 00:56:23,519
we want to do here there's two options

1104
00:56:18,969 --> 00:56:40,719
we have because since we do have to

1105
00:56:23,519 --> 00:56:43,360
adjust origins for people since we do

1106
00:56:40,719 --> 00:56:44,709
have to do adjust origins for people the

1107
00:56:43,360 --> 00:56:48,400
problem that we're going to run into

1108
00:56:44,710 --> 00:56:50,710
here is just that either we loop over

1109
00:56:48,400 --> 00:56:52,480
everybody and check the flags or just do

1110
00:56:50,710 --> 00:56:54,130
the operation I mean we don't care if

1111
00:56:52,480 --> 00:56:56,289
it's deleted we can still do it in fact

1112
00:56:54,130 --> 00:57:00,269
you might want you to avoid the if so

1113
00:56:56,289 --> 00:57:02,469
you just always do the add add add um oh

1114
00:57:00,269 --> 00:57:03,969
but I guess register enmity you would

1115
00:57:02,469 --> 00:57:07,230
want yeah so I mean basically what you

1116
00:57:03,969 --> 00:57:07,230
have to do here is this right

1117
00:57:20,358 --> 00:57:27,318
and it's not really great right because

1118
00:57:23,838 --> 00:57:29,358
the problem with this is no matter how

1119
00:57:27,318 --> 00:57:31,338
many entities we have in here we have to

1120
00:57:29,358 --> 00:57:33,348
loop over the entire array every time

1121
00:57:31,338 --> 00:57:38,779
which I guess is okay but just it's a

1122
00:57:33,349 --> 00:57:48,740
lot right and we really wish we didn't

1123
00:57:38,780 --> 00:57:51,950
have to do that and again this kind of

1124
00:57:48,739 --> 00:57:54,078
gets back to like these entity and also

1125
00:57:51,949 --> 00:57:56,088
this entity if it's not inside the

1126
00:57:54,079 --> 00:58:00,019
bounds doesn't want to be registered

1127
00:57:56,088 --> 00:58:05,539
either right so we kind of have a

1128
00:58:00,019 --> 00:58:10,759
problem here where when we look at the

1129
00:58:05,539 --> 00:58:12,650
entity let me see what happens here yeah

1130
00:58:10,760 --> 00:58:16,809
so when we look at this entity and we

1131
00:58:12,650 --> 00:58:25,700
look at active versus inactive here

1132
00:58:16,809 --> 00:58:32,119
again essentially that that check kind

1133
00:58:25,699 --> 00:58:34,699
of wants to go up in here because we

1134
00:58:32,119 --> 00:58:38,180
don't really want to be processing

1135
00:58:34,699 --> 00:58:40,568
entities that aren't in the in the right

1136
00:58:38,179 --> 00:58:40,568
area

1137
00:58:58,478 --> 00:59:03,669
so I'm really not sure how to handle

1138
00:59:00,949 --> 00:59:03,669
that part

1139
00:59:24,599 --> 00:59:34,298
hmm

1140
00:59:26,518 --> 00:59:36,638
hmm I say so here's what I'm gonna do

1141
00:59:34,298 --> 00:59:38,759
but again I don't know we may have to

1142
00:59:36,639 --> 00:59:41,528
think a little harder about this and see

1143
00:59:38,759 --> 00:59:45,239
but all I'm really gonna do right now is

1144
00:59:41,528 --> 00:59:49,329
say when you actually create the world's

1145
00:59:45,239 --> 00:59:52,539
I am gonna actually go ahead and

1146
00:59:49,329 --> 00:59:59,849
initialize these to have the deleted

1147
00:59:52,539 --> 01:00:02,278
flag set right so basically the flags

1148
00:59:59,849 --> 01:00:18,219
will be guaranteed to be there

1149
01:00:02,278 --> 01:00:20,858
effectively and we'll just say this so

1150
01:00:18,219 --> 01:00:22,989
everybody starts out marked as deleted

1151
01:00:20,858 --> 01:00:25,509
so they won't get touched and they're on

1152
01:00:22,989 --> 01:00:27,548
the free list we loop over every one

1153
01:00:25,509 --> 01:00:31,739
every time and then when we do a

1154
01:00:27,548 --> 01:00:36,599
register entity on people like this I

1155
01:00:31,739 --> 01:00:39,219
can also set the P values to be nonsense

1156
01:00:36,599 --> 01:00:41,369
when we first do our initialization as

1157
01:00:39,219 --> 01:00:41,369
well

1158
01:00:48,380 --> 01:00:54,858
so yeah effectively what would happen is

1159
01:00:52,190 --> 01:00:57,858
this does a check to see whether this

1160
01:00:54,858 --> 01:01:02,210
entity is actually going to get used it

1161
01:00:57,858 --> 01:01:05,259
all and so it would be a check oops it

1162
01:01:02,210 --> 01:01:12,858
would be a check here where we say if

1163
01:01:05,259 --> 01:01:19,429
this entity overlaps the entire set for

1164
01:01:12,858 --> 01:01:21,920
the sim region which is this then we

1165
01:01:19,429 --> 01:01:27,469
would use it and so when we register the

1166
01:01:21,920 --> 01:01:29,269
entity here right like we call register

1167
01:01:27,469 --> 01:01:31,988
on everybody but a lot of people just

1168
01:01:29,268 --> 01:01:35,498
won't get registered and that's fine

1169
01:01:31,989 --> 01:01:35,499
it's not great

1170
01:01:35,869 --> 01:01:41,420
I can't we're not gonna win any awards

1171
01:01:37,699 --> 01:01:44,659
for this of course they don't really

1172
01:01:41,420 --> 01:01:47,059
give out awards for programming but if

1173
01:01:44,659 --> 01:01:52,278
they did handmade heroes not gonna win

1174
01:01:47,059 --> 01:01:59,869
them but I we can at least do something

1175
01:01:52,278 --> 01:02:02,358
and see how how it how it goes right so

1176
01:01:59,869 --> 01:02:04,219
yeah as we go through here okay so

1177
01:02:02,358 --> 01:02:06,228
another issue here we would have in fact

1178
01:02:04,219 --> 01:02:11,950
entity flag deleted almost we almost

1179
01:02:06,228 --> 01:02:15,889
need something more stringent there

1180
01:02:11,949 --> 01:02:21,348
because when we actually do the the pack

1181
01:02:15,889 --> 01:02:22,998
back on that thing we are we don't have

1182
01:02:21,349 --> 01:02:25,099
any marker that says this thing is

1183
01:02:22,998 --> 01:02:28,028
actually like literally gone that

1184
01:02:25,099 --> 01:02:32,180
deleted is like so we almost need like

1185
01:02:28,028 --> 01:02:34,518
vacant or free right

1186
01:02:32,179 --> 01:02:36,768
and down here we would say when we

1187
01:02:34,518 --> 01:02:41,058
actually pack this thing in we would say

1188
01:02:36,768 --> 01:02:43,689
entity flags or equals free or equals

1189
01:02:41,059 --> 01:02:43,690
three

1190
01:02:46,059 --> 01:02:49,420
and so then up here instead of setting

1191
01:02:47,739 --> 01:02:51,848
these to deleted we would just set them

1192
01:02:49,420 --> 01:02:53,470
to the fact that they were free not

1193
01:02:51,849 --> 01:02:54,818
deleted and similarly I guess like

1194
01:02:53,469 --> 01:02:57,608
really everywhere that we were using

1195
01:02:54,818 --> 01:02:58,838
deleted that's that's the it's actually

1196
01:02:57,608 --> 01:03:05,259
free that we care about

1197
01:02:58,838 --> 01:03:07,150
right so in here when we yeah when we

1198
01:03:05,260 --> 01:03:13,869
check it's free there that's for here

1199
01:03:07,150 --> 01:03:16,480
yeah so yeah again not really great not

1200
01:03:13,869 --> 01:03:21,028
sure not sure what we want to say about

1201
01:03:16,480 --> 01:03:26,559
that other than it's not really great

1202
01:03:21,028 --> 01:03:28,119
but off you go so we could do this the

1203
01:03:26,559 --> 01:03:31,660
other thing we could do potentially is

1204
01:03:28,119 --> 01:03:33,010
use 0 as that thing and we'll see how

1205
01:03:31,659 --> 01:03:35,048
that goes

1206
01:03:33,010 --> 01:03:36,789
so for now what I'm going to do is I'm

1207
01:03:35,048 --> 01:03:40,750
going to take this and I'm just gonna

1208
01:03:36,789 --> 01:03:46,089
use this exact same information we were

1209
01:03:40,750 --> 01:03:48,309
using before as the min chunk P and the

1210
01:03:46,088 --> 01:03:51,068
max chunk P but I'm gonna put to do in

1211
01:03:48,309 --> 01:03:55,259
here that says maybe use the new

1212
01:03:51,068 --> 01:04:01,588
expected camera position here instead

1213
01:03:55,259 --> 01:04:05,250
just so we can maybe get a little bit

1214
01:04:01,588 --> 01:04:05,250
better coverage there

1215
01:04:16,340 --> 01:04:26,490
all right so we're gonna need some way

1216
01:04:25,170 --> 01:04:27,570
and first so we're gonna have to debug

1217
01:04:26,489 --> 01:04:28,919
this stuff but we're also gonna need

1218
01:04:27,570 --> 01:04:32,369
some way to make sure this is actually

1219
01:04:28,920 --> 01:04:35,510
working by tracking that value of what's

1220
01:04:32,369 --> 01:04:35,510
unpacked and what's not

1221
01:04:35,599 --> 01:04:39,869
and a whole bunch of other stuff so we

1222
01:04:38,340 --> 01:04:41,010
have a ton of work we've got to do here

1223
01:04:39,869 --> 01:04:43,320
the fact that nothing shows up on the

1224
01:04:41,010 --> 01:04:47,130
screen is always a just a ring

1225
01:04:43,320 --> 01:04:50,160
nice encouraging sign there so that's

1226
01:04:47,130 --> 01:04:51,539
not great but anyway let's go ahead and

1227
01:04:50,159 --> 01:04:52,920
sort of walk through this a little bit

1228
01:04:51,539 --> 01:04:53,820
more carefully here first

1229
01:04:52,920 --> 01:04:55,470
I don't really want to start debugging

1230
01:04:53,820 --> 01:04:56,849
this until I actually check all the

1231
01:04:55,469 --> 01:04:59,579
stuff I have done because it was a

1232
01:04:56,849 --> 01:05:01,890
little bit crazy so the first thing that

1233
01:04:59,579 --> 01:05:04,309
happens here is we take all the unpacked

1234
01:05:01,889 --> 01:05:08,819
entities and we make those into a chain

1235
01:05:04,309 --> 01:05:10,949
like this so we basically just have a

1236
01:05:08,820 --> 01:05:13,800
big string of entities and all of those

1237
01:05:10,949 --> 01:05:15,598
entities are marked as as being free so

1238
01:05:13,800 --> 01:05:16,950
they don't really actually exist in the

1239
01:05:15,599 --> 01:05:18,510
world and then we have that first vanity

1240
01:05:16,949 --> 01:05:21,449
that points to the head of the chain and

1241
01:05:18,510 --> 01:05:24,900
each one points to sort of the one

1242
01:05:21,449 --> 01:05:26,969
previous one now when you create an

1243
01:05:24,900 --> 01:05:29,670
entity what you're doing is you're

1244
01:05:26,969 --> 01:05:32,189
calling acquire unpacked entity slots so

1245
01:05:29,670 --> 01:05:33,930
that is gonna be in here you're gonna

1246
01:05:32,190 --> 01:05:35,970
get one of these things right and you're

1247
01:05:33,929 --> 01:05:38,579
gonna clear it out and they're gonna do

1248
01:05:35,969 --> 01:05:41,489
stuff with it right and that's just how

1249
01:05:38,579 --> 01:05:43,829
that rolls so when you do that that

1250
01:05:41,489 --> 01:05:48,029
should be fine you pop one of these

1251
01:05:43,829 --> 01:05:50,159
things off you write and we may be in

1252
01:05:48,030 --> 01:05:53,280
here when we do that thing we might want

1253
01:05:50,159 --> 01:05:55,379
to do like Flags equals zero just in

1254
01:05:53,280 --> 01:05:58,890
case somebody didn't clear it on the way

1255
01:05:55,380 --> 01:06:02,519
out we know that that one's not free

1256
01:05:58,889 --> 01:06:05,219
anymore it actually exists and then we

1257
01:06:02,519 --> 01:06:07,559
track that number so then when we do

1258
01:06:05,219 --> 01:06:10,368
ensure region is unpacked we loop over

1259
01:06:07,559 --> 01:06:14,880
all of the entities that there are and

1260
01:06:10,369 --> 01:06:16,619
we say if the thing is not free we

1261
01:06:14,880 --> 01:06:20,400
assume that it's something we actually

1262
01:06:16,619 --> 01:06:22,490
have to use right so we asked it to be

1263
01:06:20,400 --> 01:06:29,880
registered

1264
01:06:22,489 --> 01:06:32,009
into the system um in order to register

1265
01:06:29,880 --> 01:06:35,430
an entity we just look to see whether or

1266
01:06:32,010 --> 01:06:38,340
not that entity is inside the volume for

1267
01:06:35,429 --> 01:06:40,679
this particular simulation region and if

1268
01:06:38,340 --> 01:06:44,300
it is then we are gonna process it now I

1269
01:06:40,679 --> 01:06:46,739
don't actually know if that's gonna work

1270
01:06:44,300 --> 01:06:50,370
because I don't know if we were counting

1271
01:06:46,739 --> 01:06:52,979
on some things getting unpacked into the

1272
01:06:50,369 --> 01:06:54,210
region that don't have bounds but I

1273
01:06:52,980 --> 01:06:57,900
don't think they could because they

1274
01:06:54,210 --> 01:07:03,019
wouldn't exist in chunks really so I

1275
01:06:57,900 --> 01:07:05,630
don't know about that we'll have to see

1276
01:07:03,019 --> 01:07:08,340
anyway that's only for things that

1277
01:07:05,630 --> 01:07:10,140
previously existed in the world for

1278
01:07:08,340 --> 01:07:12,600
things that haven't been unpacked yet

1279
01:07:10,139 --> 01:07:15,329
we're gonna do that here so we take the

1280
01:07:12,599 --> 01:07:17,460
art you know we take a chunk out we loop

1281
01:07:15,329 --> 01:07:19,739
over that chunks entities and for each

1282
01:07:17,460 --> 01:07:21,619
one of them we acquire the unpacked and

1283
01:07:19,739 --> 01:07:26,129
any slot that we're going to put it into

1284
01:07:21,619 --> 01:07:28,319
we copy the value of it and we offset it

1285
01:07:26,130 --> 01:07:32,000
to update it to where that would be

1286
01:07:28,320 --> 01:07:32,000
relative to the chunk right

1287
01:07:32,369 --> 01:07:37,049
we then requested to get registered with

1288
01:07:34,559 --> 01:07:42,719
the system in the exact same way as it

1289
01:07:37,050 --> 01:07:45,260
was before and then we yeah and then we

1290
01:07:42,719 --> 01:07:45,259
we're done

1291
01:07:49,489 --> 01:07:54,028
yeah I don't see anything particularly

1292
01:07:51,719 --> 01:07:57,328
weird there when we go to repack

1293
01:07:54,028 --> 01:07:59,518
entities we say alright we're gonna

1294
01:07:57,329 --> 01:08:04,019
track whether or not these things are or

1295
01:07:59,518 --> 01:08:05,489
aren't going to get deleted if somebody

1296
01:08:04,018 --> 01:08:06,629
tried to delete this entity then we're

1297
01:08:05,489 --> 01:08:09,568
definitely gonna remove it from the

1298
01:08:06,630 --> 01:08:10,829
impact set otherwise we may not and so

1299
01:08:09,568 --> 01:08:12,690
then we come in through here and we say

1300
01:08:10,829 --> 01:08:16,529
look let's find out where this entity

1301
01:08:12,690 --> 01:08:18,630
actually is in you know in space and

1302
01:08:16,529 --> 01:08:20,040
then we say if the current unpacked

1303
01:08:18,630 --> 01:08:23,509
entity count is greater than the

1304
01:08:20,039 --> 01:08:27,479
threshold we set up for repacking and

1305
01:08:23,509 --> 01:08:29,929
this entity's location isn't inside the

1306
01:08:27,479 --> 01:08:32,459
area that we expect to use next frame

1307
01:08:29,929 --> 01:08:34,980
then we're going to just repack it let

1308
01:08:32,460 --> 01:08:37,109
me do it this way right and we say by

1309
01:08:34,979 --> 01:08:39,119
the way go ahead and remove that from

1310
01:08:37,109 --> 01:08:42,779
the set because we're no longer going to

1311
01:08:39,119 --> 01:08:45,059
use this entity anymore so then we say

1312
01:08:42,779 --> 01:08:47,040
if that actually happens we're going to

1313
01:08:45,060 --> 01:08:50,009
set this entity to be free we're gonna

1314
01:08:47,039 --> 01:08:52,588
use it now we assert that we can

1315
01:08:50,009 --> 01:08:54,899
actually decrement here so we assert

1316
01:08:52,588 --> 01:08:58,079
that somebody actually acquired this

1317
01:08:54,899 --> 01:09:00,658
many slots before we put it on the free

1318
01:08:58,079 --> 01:09:07,880
list and then we decrement that unpack

1319
01:09:00,658 --> 01:09:09,710
count right that looks about right

1320
01:09:07,880 --> 01:09:12,779
[Music]

1321
01:09:09,710 --> 01:09:24,798
so I don't see anything like obviously

1322
01:09:12,779 --> 01:09:24,799
super stupid there I don't think

1323
01:09:26,609 --> 01:09:39,088
yeah it seems alright to me curious

1324
01:09:40,679 --> 01:09:48,389
how do we get to our or do we not have

1325
01:09:44,439 --> 01:09:48,388
start Global's display

1326
01:09:53,939 --> 01:09:59,729
yeah it looks like we only have like

1327
01:09:56,369 --> 01:10:02,130
renderer lighting memory and we don't

1328
01:09:59,729 --> 01:10:04,349
have just our regular Global's which is

1329
01:10:02,130 --> 01:10:10,829
annoying because I want to see what that

1330
01:10:04,350 --> 01:10:13,340
number is and I can't write and that's

1331
01:10:10,829 --> 01:10:13,340
not so good

1332
01:10:26,310 --> 01:10:35,800
the fact that we're not getting any

1333
01:10:28,750 --> 01:10:38,920
entities visible is a little strange I'm

1334
01:10:35,800 --> 01:10:43,989
going to start by doing this I'm just

1335
01:10:38,920 --> 01:10:48,760
curious what happens if we sort of

1336
01:10:43,989 --> 01:10:56,619
always have the entities entered into

1337
01:10:48,760 --> 01:11:01,409
the working set that's unexpected so

1338
01:10:56,619 --> 01:11:01,409
what's the actual error there

1339
01:11:17,829 --> 01:11:22,519
it occurs to me too that I wonder if we

1340
01:11:20,689 --> 01:11:30,169
should just be using entity chains in

1341
01:11:22,520 --> 01:11:34,130
general because I suppose there's no

1342
01:11:30,170 --> 01:11:35,600
reason we can't just I use MD change

1343
01:11:34,130 --> 01:11:39,819
just in the general case I don't know I

1344
01:11:35,600 --> 01:11:39,820
haven't really thought of it much but

1345
01:11:43,390 --> 01:11:54,050
this is particularly strange I'm not

1346
01:11:45,979 --> 01:11:58,029
sure why end block this looks like an

1347
01:11:54,050 --> 01:12:02,659
assertion right because we're moving

1348
01:11:58,029 --> 01:12:05,300
explicit zero to explicit zero but we're

1349
01:12:02,659 --> 01:12:09,309
not actually on an assertion here so I'm

1350
01:12:05,300 --> 01:12:09,310
not sure what the assertion actually is

1351
01:12:16,869 --> 01:12:25,539
according to this it's in a remove world

1352
01:12:19,300 --> 01:12:28,060
chunk and I guess I don't know what the

1353
01:12:25,539 --> 01:12:37,090
call to end ticket mutex actually looks

1354
01:12:28,060 --> 01:12:42,880
like but I'm going to take a look so it

1355
01:12:37,090 --> 01:12:44,140
would be pretty hard for that to I mean

1356
01:12:42,880 --> 01:12:48,190
that's not going to cause an assertion

1357
01:12:44,140 --> 01:12:52,930
so who is asserting their I don't know

1358
01:12:48,189 --> 01:12:59,979
what's going on because we're presumably

1359
01:12:52,930 --> 01:13:07,539
somewhere like around here can we get

1360
01:12:59,979 --> 01:13:10,829
any more information about this so the

1361
01:13:07,539 --> 01:13:10,829
chunk pointer

1362
01:13:18,529 --> 01:13:22,609
it's actually zero so the result we're

1363
01:13:20,720 --> 01:13:25,850
gonna return here would be zero but that

1364
01:13:22,609 --> 01:13:33,529
should be fine right

1365
01:13:25,850 --> 01:13:37,039
I mean that's not illegal so I'm not

1366
01:13:33,529 --> 01:13:50,359
sure why we're getting I'm not sure why

1367
01:13:37,039 --> 01:13:52,609
we would be getting an error there so

1368
01:13:50,359 --> 01:13:54,439
it's not like one of the early times

1369
01:13:52,609 --> 01:14:00,699
that this happens it takes quite some

1370
01:13:54,439 --> 01:14:00,699
time for this to actually get grumpy

1371
01:14:07,270 --> 01:14:11,790
like it pretty much has to start siming

1372
01:14:12,029 --> 01:14:20,619
it looks like before that's the case I'm

1373
01:14:15,279 --> 01:14:24,369
assuming this is actually in begin Sam

1374
01:14:20,619 --> 01:14:29,949
yeah so is this the first time that we

1375
01:14:24,369 --> 01:14:32,819
do a simulation or is it do we actually

1376
01:14:29,949 --> 01:14:37,500
simulate more than once before the crash

1377
01:14:32,819 --> 01:14:37,500
that's I'm curious to know

1378
01:14:43,399 --> 01:14:53,009
interesting so it actually takes a while

1379
01:14:49,500 --> 01:14:54,800
of simulation for this to go haywire

1380
01:14:53,010 --> 01:14:58,230
which is which is even more interesting

1381
01:14:54,800 --> 01:15:02,190
so you can see here the current unpacked

1382
01:14:58,229 --> 01:15:05,969
nd count as we run is actually holding

1383
01:15:02,189 --> 01:15:08,489
steady until we hit this which is

1384
01:15:05,970 --> 01:15:14,610
particularly strange so I'm not really

1385
01:15:08,489 --> 01:15:16,639
sure what I'm looking at there what I

1386
01:15:14,609 --> 01:15:22,199
think I want to do now rather than

1387
01:15:16,640 --> 01:15:24,800
actually debug that error is I think I

1388
01:15:22,199 --> 01:15:30,420
just want to make a slightly more

1389
01:15:24,800 --> 01:15:33,750
defensive more self-contained set of

1390
01:15:30,420 --> 01:15:36,480
code for this so that I have a higher

1391
01:15:33,750 --> 01:15:40,350
chance of hitting some useful assertions

1392
01:15:36,479 --> 01:15:42,599
I think that would make it easier for me

1393
01:15:40,350 --> 01:15:45,600
to track it down sometimes when I just

1394
01:15:42,600 --> 01:15:48,210
wing something like that and it's kind

1395
01:15:45,600 --> 01:15:49,950
of a little stringy I sometimes I'm like

1396
01:15:48,210 --> 01:15:51,630
well I could spend a bunch of time to

1397
01:15:49,949 --> 01:15:54,750
bugging it and find out what the problem

1398
01:15:51,630 --> 01:15:58,170
is but what I'd rather do is maybe add

1399
01:15:54,750 --> 01:16:00,960
code that the code finds the problem

1400
01:15:58,170 --> 01:16:03,869
because I want that code in there anyway

1401
01:16:00,960 --> 01:16:05,789
in order to catch errors and so I think

1402
01:16:03,869 --> 01:16:07,829
what I'm gonna do is maybe take that

1403
01:16:05,789 --> 01:16:10,890
route if that makes sense also this we

1404
01:16:07,829 --> 01:16:12,630
now know we don't want so I think I'd

1405
01:16:10,890 --> 01:16:15,180
like something more like that something

1406
01:16:12,630 --> 01:16:18,409
that maybe is a little bit more specific

1407
01:16:15,180 --> 01:16:18,409
about what's going on here

1408
01:16:45,810 --> 01:16:50,410
I'm not sure whether I want these to be

1409
01:16:48,640 --> 01:16:53,289
stored into linked lists as well that I

1410
01:16:50,409 --> 01:17:04,090
just basically moved between free and

1411
01:16:53,289 --> 01:17:05,680
not free and actually you know there's

1412
01:17:04,090 --> 01:17:07,360
another way we could do this which is we

1413
01:17:05,680 --> 01:17:10,420
could just perform what is effectively

1414
01:17:07,359 --> 01:17:12,099
heap compaction in the sense that

1415
01:17:10,420 --> 01:17:15,279
whenever you free an entity we just move

1416
01:17:12,100 --> 01:17:21,190
one from the end of the list into the

1417
01:17:15,279 --> 01:17:26,859
current location and that would keep

1418
01:17:21,189 --> 01:17:29,819
things compact as well I kind of wonder

1419
01:17:26,859 --> 01:17:29,819
if we want to do that

1420
01:17:38,088 --> 01:17:43,760
I think I might want to do that because

1421
01:17:41,988 --> 01:17:45,648
if we did this via a heap compaction

1422
01:17:43,760 --> 01:17:52,010
then it would keep the code simpler as

1423
01:17:45,649 --> 01:17:58,909
well meaning if I do if I do restore

1424
01:17:52,010 --> 01:18:00,708
this behavior right and I say instead of

1425
01:17:58,908 --> 01:18:03,018
keeping a free list we're just gonna

1426
01:18:00,708 --> 01:18:08,868
make it so that we compact entities down

1427
01:18:03,019 --> 01:18:11,659
right I don't think we pay much for that

1428
01:18:08,868 --> 01:18:16,969
it's just copying only when we actually

1429
01:18:11,658 --> 01:18:19,759
want to free entities and I feel like

1430
01:18:16,969 --> 01:18:22,510
that would allow me to keep it simpler

1431
01:18:19,760 --> 01:18:25,609
by still getting basically the same

1432
01:18:22,510 --> 01:18:35,269
rough behavior so meaning if we just

1433
01:18:25,609 --> 01:18:37,039
don't do this and we do that instead so

1434
01:18:35,269 --> 01:18:40,579
we say that this is our unpacked entity

1435
01:18:37,038 --> 01:18:42,878
account we allocate you know the empty

1436
01:18:40,578 --> 01:18:50,058
array and and we just call it a today

1437
01:18:42,878 --> 01:18:55,998
also we don't have this and we don't

1438
01:18:50,059 --> 01:18:58,248
have that then as we go through and

1439
01:18:55,998 --> 01:19:00,198
actually work with these things when we

1440
01:18:58,248 --> 01:19:02,300
acquire an unpacked entity slot it's

1441
01:19:00,198 --> 01:19:03,678
literally going to do just the thing

1442
01:19:02,300 --> 01:19:08,628
that it was doing before which is that

1443
01:19:03,679 --> 01:19:11,739
you take the world entities well we're

1444
01:19:08,628 --> 01:19:11,738
still gonna have to do it here

1445
01:19:18,469 --> 01:19:27,079
so in here when we say let's grab an

1446
01:19:21,390 --> 01:19:37,110
entity we just do unpacked entities +

1447
01:19:27,079 --> 01:19:37,559
unpacked and accounts like so and that's

1448
01:19:37,109 --> 01:19:44,599
it

1449
01:19:37,560 --> 01:19:48,239
I think yeah that's it

1450
01:19:44,600 --> 01:19:51,420
and people who who allocate those can

1451
01:19:48,238 --> 01:19:53,189
clear them if they if they desire then

1452
01:19:51,420 --> 01:19:56,190
in here we would always just use

1453
01:19:53,189 --> 01:19:58,738
unpacked entity counts and as we loop

1454
01:19:56,189 --> 01:20:09,079
over these we're always going to update

1455
01:19:58,738 --> 01:20:11,309
and register that's complete nonsense

1456
01:20:09,079 --> 01:20:19,619
that wasn't really supposed to be there

1457
01:20:11,310 --> 01:20:23,880
that was a bug in here we don't really

1458
01:20:19,619 --> 01:20:25,829
need that free list stuff at all but we

1459
01:20:23,880 --> 01:20:28,739
still do need to process one of these

1460
01:20:25,829 --> 01:20:31,380
entities and so the way that that has to

1461
01:20:28,738 --> 01:20:33,269
happen if you think about it is we sort

1462
01:20:31,380 --> 01:20:37,940
of have you know we still have this loop

1463
01:20:33,270 --> 01:20:40,680
here and it still looks mostly the same

1464
01:20:37,939 --> 01:20:43,229
but the big difference is that when we

1465
01:20:40,680 --> 01:20:45,900
get down to the end here if we're trying

1466
01:20:43,229 --> 01:20:50,250
to remove this thing then we're not

1467
01:20:45,899 --> 01:20:53,849
going to actually advance right so oh

1468
01:20:50,250 --> 01:20:56,789
and also obviously we Oh may weep over

1469
01:20:53,850 --> 01:20:59,910
this number so when we come down in here

1470
01:20:56,789 --> 01:21:02,310
we say all right you know we want to

1471
01:20:59,909 --> 01:21:05,279
advance our entity pointer or whatever

1472
01:21:02,310 --> 01:21:09,390
else we're doing here and track our

1473
01:21:05,279 --> 01:21:12,149
handy index but if we're going to remove

1474
01:21:09,390 --> 01:21:14,579
one we instead of actually advancing

1475
01:21:12,149 --> 01:21:17,789
past this slot we're just gonna grab the

1476
01:21:14,579 --> 01:21:21,420
last person in the array and copy them

1477
01:21:17,789 --> 01:21:24,779
into this slot right so in other words

1478
01:21:21,420 --> 01:21:26,399
we're just gonna bulk move whatever the

1479
01:21:24,779 --> 01:21:28,050
entity was at the end of the array in

1480
01:21:26,399 --> 01:21:30,750
here to fill the hole

1481
01:21:28,050 --> 01:21:33,090
does that make sense but then we don't

1482
01:21:30,750 --> 01:21:36,359
want to move past it because that person

1483
01:21:33,090 --> 01:21:40,020
may also have been deleted and so we

1484
01:21:36,359 --> 01:21:41,759
want to check again and not you know not

1485
01:21:40,020 --> 01:21:43,230
advanced now there's more efficient ways

1486
01:21:41,760 --> 01:21:46,020
we could do this we could walk backwards

1487
01:21:43,229 --> 01:21:48,719
from the end to see everyone who's

1488
01:21:46,020 --> 01:21:51,330
deleted and copy the first free non

1489
01:21:48,720 --> 01:21:52,770
deleted person which would be a little

1490
01:21:51,329 --> 01:21:54,390
bit more efficient but I'm not gonna do

1491
01:21:52,770 --> 01:21:57,420
that right now I'm gonna do this more

1492
01:21:54,390 --> 01:21:59,970
straightforward way which is simpler and

1493
01:21:57,420 --> 01:22:01,890
all that is is saying look into the slot

1494
01:21:59,970 --> 01:22:06,199
that we're currently at I want to write

1495
01:22:01,890 --> 01:22:06,200
whatever the unpacked entities are

1496
01:22:08,390 --> 01:22:13,100
whoever is in the very very last slot

1497
01:22:16,159 --> 01:22:23,609
right so I'm basically gonna say who's

1498
01:22:21,720 --> 01:22:25,470
ever in that very last slot and that's

1499
01:22:23,609 --> 01:22:27,420
I'm packin II cannot remember if I index

1500
01:22:25,470 --> 01:22:29,909
with acts actual unpacked entity count

1501
01:22:27,420 --> 01:22:31,440
I'd be one past the end of the array but

1502
01:22:29,909 --> 01:22:34,409
what am i doing said is decrement the

1503
01:22:31,439 --> 01:22:37,229
unpacked entity count first which moves

1504
01:22:34,409 --> 01:22:38,609
me into the actual last slot while also

1505
01:22:37,229 --> 01:22:40,589
recording the fact that I deleted

1506
01:22:38,609 --> 01:22:44,099
somebody and then I'm going to take that

1507
01:22:40,590 --> 01:22:45,539
information and romp it into the empty

1508
01:22:44,100 --> 01:22:54,480
slot we're currently on and then we're

1509
01:22:45,539 --> 01:22:59,010
gonna move forward right and I think

1510
01:22:54,479 --> 01:23:01,559
that's mostly all I wanted to do and

1511
01:22:59,010 --> 01:23:03,720
that's it all right so now we're not

1512
01:23:01,560 --> 01:23:05,720
keeping a free list around Tina so

1513
01:23:03,720 --> 01:23:08,940
that's simplified that code quite a bit

1514
01:23:05,720 --> 01:23:10,560
and we should only be messing with

1515
01:23:08,939 --> 01:23:14,789
unpacked entity count

1516
01:23:10,560 --> 01:23:19,550
I only just a little bit right we should

1517
01:23:14,789 --> 01:23:22,380
only be looking at that value when we

1518
01:23:19,550 --> 01:23:29,449
either here this is annoying because

1519
01:23:22,380 --> 01:23:29,449
it's my head is in the way

1520
01:23:29,729 --> 01:23:35,349
so looking at that right we're only

1521
01:23:32,500 --> 01:23:35,920
really doing something here we started

1522
01:23:35,350 --> 01:23:37,929
at zero

1523
01:23:35,920 --> 01:23:41,770
we only increment it when we actually

1524
01:23:37,929 --> 01:23:44,710
are putting one onto the array and then

1525
01:23:41,770 --> 01:23:46,540
when we process we always look through

1526
01:23:44,710 --> 01:23:48,779
just the unpacked entities so we don't

1527
01:23:46,539 --> 01:23:50,829
have to deal with that part anyway and

1528
01:23:48,779 --> 01:23:52,899
here if we're going to actually

1529
01:23:50,829 --> 01:23:54,519
decrement them we decrement the amount

1530
01:23:52,899 --> 01:23:56,738
only here so it's like more

1531
01:23:54,520 --> 01:23:58,389
self-contained and just simpler so I

1532
01:23:56,738 --> 01:24:00,729
like that a little bit better and then

1533
01:23:58,389 --> 01:24:03,760
we also aren't chasing chains or

1534
01:24:00,729 --> 01:24:06,519
skipping people all the time which is I

1535
01:24:03,760 --> 01:24:08,320
think it's just better now when we're

1536
01:24:06,520 --> 01:24:11,469
actually in the sim region we still have

1537
01:24:08,319 --> 01:24:15,189
the problem in here that we want to test

1538
01:24:11,469 --> 01:24:16,989
this part so I'm gonna first run it

1539
01:24:15,189 --> 01:24:19,509
without that test but then I'm also

1540
01:24:16,988 --> 01:24:21,339
gonna run it with that test and see now

1541
01:24:19,510 --> 01:24:23,889
if we if the error pops up in a

1542
01:24:21,340 --> 01:24:28,239
different place at all I'm just again

1543
01:24:23,889 --> 01:24:32,560
trying to see what's going wrong because

1544
01:24:28,238 --> 01:24:35,589
I don't really know yeah I don't really

1545
01:24:32,560 --> 01:24:38,619
know what the problem is so I'm gonna

1546
01:24:35,590 --> 01:24:41,429
sort of progressively try to refine down

1547
01:24:38,618 --> 01:24:43,689
to to see who's who's causing it

1548
01:24:41,429 --> 01:24:45,190
assuming that if we implemented the code

1549
01:24:43,689 --> 01:24:47,019
correctly before we get the same error

1550
01:24:45,189 --> 01:24:51,279
so it looks right so this we're getting

1551
01:24:47,020 --> 01:24:53,739
a same error with two totally different

1552
01:24:51,279 --> 01:24:56,079
implementations of that allocation set

1553
01:24:53,738 --> 01:24:58,658
right and so that's a pretty interesting

1554
01:24:56,079 --> 01:25:01,300
piece of information it suggests that

1555
01:24:58,658 --> 01:25:03,939
there's a logic error not an actual like

1556
01:25:01,300 --> 01:25:05,469
code here if that makes sense

1557
01:25:03,939 --> 01:25:08,109
and what you can see here is our

1558
01:25:05,469 --> 01:25:10,739
unpacked entity count is somewhat high

1559
01:25:08,109 --> 01:25:15,189
but not even high enough to trigger the

1560
01:25:10,738 --> 01:25:18,459
packing which would be here so it's

1561
01:25:15,189 --> 01:25:23,469
pretty hard to say why we're seeing this

1562
01:25:18,460 --> 01:25:25,929
this error at all right and again we're

1563
01:25:23,469 --> 01:25:29,560
getting it in a really weird place that

1564
01:25:25,929 --> 01:25:36,179
I don't super understand I can't really

1565
01:25:29,560 --> 01:25:40,830
quite tell what that piece of code is

1566
01:25:36,179 --> 01:25:40,829
and just looking at it

1567
01:25:40,899 --> 01:25:45,289
yeah it really looks like an assertion

1568
01:25:43,310 --> 01:25:50,200
but I'm not sure how an assertion would

1569
01:25:45,289 --> 01:25:53,420
be occurring in this timed block region

1570
01:25:50,199 --> 01:25:55,689
looking at that time function part of

1571
01:25:53,420 --> 01:25:55,690
things

1572
01:26:05,050 --> 01:26:34,340
I'm also not sure like what are we

1573
01:26:07,369 --> 01:26:38,000
looking at here for the chunk regions so

1574
01:26:34,340 --> 01:26:49,610
I guess what I would say about that is

1575
01:26:38,000 --> 01:26:52,569
that looks suspiciously huge I don't

1576
01:26:49,609 --> 01:26:57,469
know why we would hit an assertion

1577
01:26:52,569 --> 01:27:02,359
necessarily in the location that we're

1578
01:26:57,470 --> 01:27:04,610
seeing but it doesn't make a whole lot

1579
01:27:02,359 --> 01:27:12,489
of sense why the sim region would be

1580
01:27:04,609 --> 01:27:14,539
that large so that is a little bit

1581
01:27:12,489 --> 01:27:22,369
confusing

1582
01:27:14,539 --> 01:27:28,220
to say the least and I don't really know

1583
01:27:22,369 --> 01:27:31,269
what's going on there so can we get some

1584
01:27:28,220 --> 01:27:31,270
more information about that

1585
01:27:38,939 --> 01:27:50,979
so if we look at what our minimum is

1586
01:27:41,979 --> 01:27:54,339
here versus our maximum so in our world

1587
01:27:50,979 --> 01:27:57,429
like one unit is one meter and so this

1588
01:27:54,340 --> 01:28:05,199
is asking for a six kilometer region of

1589
01:27:57,430 --> 01:28:11,590
the world 11 kilometer by six kilometer

1590
01:28:05,199 --> 01:28:12,340
am I reading that right which makes like

1591
01:28:11,590 --> 01:28:16,210
no sense

1592
01:28:12,340 --> 01:28:20,079
so things have gone massively off the

1593
01:28:16,210 --> 01:28:22,029
rails here and I have no idea how so my

1594
01:28:20,079 --> 01:28:25,269
first question is where are we getting

1595
01:28:22,029 --> 01:28:27,699
those numbers from like can someone tell

1596
01:28:25,270 --> 01:28:34,710
me constructively who came up with that

1597
01:28:27,699 --> 01:28:34,710
value if we look at the symbols here I

1598
01:28:38,039 --> 01:28:44,949
guess the world camera rect and because

1599
01:28:42,189 --> 01:28:48,399
this is creating a union we must be in a

1600
01:28:44,949 --> 01:28:52,389
situation where the sim bounds and the

1601
01:28:48,399 --> 01:28:56,559
world camera rect are like totally

1602
01:28:52,390 --> 01:28:59,140
different I guess that's the only thing

1603
01:28:56,560 --> 01:29:00,910
I could think of so we must have gotten

1604
01:28:59,140 --> 01:29:08,380
way off track here so if we look at

1605
01:29:00,909 --> 01:29:10,630
world camera rect can kind of see the

1606
01:29:08,380 --> 01:29:13,180
world camera rect is off in its own sort

1607
01:29:10,630 --> 01:29:16,900
of orbit there and then we look at what

1608
01:29:13,180 --> 01:29:20,430
the sim bans themselves well they've

1609
01:29:16,899 --> 01:29:20,429
been kind of destroyed at this point

1610
01:29:33,658 --> 01:29:38,329
I mean it just looks like the camera is

1611
01:29:36,479 --> 01:29:42,319
totally divorced from where the sim

1612
01:29:38,329 --> 01:29:42,319
region is I guess

1613
01:29:53,889 --> 01:29:58,350
I mean that's just what it looks like

1614
01:30:29,328 --> 01:30:34,948
so I suppose that one thing that could

1615
01:30:32,609 --> 01:30:36,868
be happening here is we're just exposing

1616
01:30:34,948 --> 01:30:42,178
some bugs that we had that we're sort of

1617
01:30:36,868 --> 01:30:48,359
not occurring when we didn't have

1618
01:30:42,179 --> 01:30:51,779
enemies cached in this way I am a little

1619
01:30:48,359 --> 01:30:56,609
bit curious here so if we run the game

1620
01:30:51,779 --> 01:30:58,228
and we do prevent anybody from being

1621
01:30:56,609 --> 01:31:00,509
added when they're not inside the

1622
01:30:58,229 --> 01:31:03,329
simulation region we don't get the crash

1623
01:31:00,510 --> 01:31:06,659
and I'm curious to know how many

1624
01:31:03,328 --> 01:31:08,849
entities we actually register if any or

1625
01:31:06,658 --> 01:31:11,429
where our simulation region actually

1626
01:31:08,849 --> 01:31:13,649
even is because I guess it occurs to me

1627
01:31:11,429 --> 01:31:16,889
that we don't have a particularly solid

1628
01:31:13,649 --> 01:31:19,169
understanding of how this startup

1629
01:31:16,889 --> 01:31:20,668
process actually works in terms of

1630
01:31:19,168 --> 01:31:22,918
placing the camera somewhere in the

1631
01:31:20,668 --> 01:31:24,719
world to begin with and so I wonder if

1632
01:31:22,918 --> 01:31:26,819
we've got some startup be kinds of bugs

1633
01:31:24,719 --> 01:31:28,168
there that just happened to work because

1634
01:31:26,819 --> 01:31:32,158
the way the same region was working

1635
01:31:28,168 --> 01:31:33,479
before or something weird like that so I

1636
01:31:32,158 --> 01:31:36,118
want to investigate this a little bit

1637
01:31:33,479 --> 01:31:41,729
further here and what I want to see is

1638
01:31:36,118 --> 01:31:45,148
is anybody actually abled yeah does

1639
01:31:41,729 --> 01:31:47,610
anyone ever get at it okay so somebody

1640
01:31:45,149 --> 01:31:56,329
actually gets added to the sim region

1641
01:31:47,609 --> 01:31:56,328
which is good right who by the way

1642
01:32:04,590 --> 01:32:08,078
[Music]

1643
01:32:13,319 --> 01:32:18,869
just some random set of people they do

1644
01:32:17,100 --> 01:32:20,940
appear to be kind of coherent so they're

1645
01:32:18,869 --> 01:32:33,359
probably off in the same room this makes

1646
01:32:20,939 --> 01:32:35,250
some sense what's their p-value so their

1647
01:32:33,359 --> 01:32:37,559
p-values actually seemed somewhat

1648
01:32:35,250 --> 01:32:46,800
reasonable but maybe quite a bit off to

1649
01:32:37,560 --> 01:32:48,480
the side so can't quite tell the closer

1650
01:32:46,800 --> 01:32:52,320
to 0 0 0 the more closer you're out of

1651
01:32:48,479 --> 01:32:53,399
the target right although that may not

1652
01:32:52,319 --> 01:32:55,409
be in hundreds century I don't know if

1653
01:32:53,399 --> 01:32:57,420
the targets actually offset if I don't

1654
01:32:55,409 --> 01:33:01,949
remember the camera the targets at 0 0 0

1655
01:32:57,420 --> 01:33:03,569
and remember how we chose to do that it

1656
01:33:01,949 --> 01:33:10,380
feels like these things should sort of

1657
01:33:03,569 --> 01:33:13,639
be seen at this point so I'm wondering

1658
01:33:10,380 --> 01:33:13,640
why we're not seeing anybody

1659
01:33:20,810 --> 01:33:23,960
you know

1660
01:33:25,479 --> 01:33:30,449
like if all these people with those

1661
01:33:27,430 --> 01:33:32,980
p-values which are pretty close by

1662
01:33:30,449 --> 01:33:41,789
what's the actual problem so let's take

1663
01:33:32,979 --> 01:33:41,789
a look once everyone's been unpacked

1664
01:33:53,420 --> 01:34:03,340
so the problem is the camera entity

1665
01:33:57,460 --> 01:34:08,590
cannot be found so we have not unpacked

1666
01:34:03,340 --> 01:34:08,590
the I mean the actual player

1667
01:34:25,010 --> 01:34:30,750
that seems kind of like what you would

1668
01:34:27,840 --> 01:34:32,579
expect because the players entity would

1669
01:34:30,750 --> 01:34:34,229
be added close to the end since it only

1670
01:34:32,579 --> 01:34:38,760
gets added when you actually start the

1671
01:34:34,229 --> 01:34:41,729
game so you create the whole world first

1672
01:34:38,760 --> 01:34:44,850
and then you add it so that's what you

1673
01:34:41,729 --> 01:34:52,049
would probably expect I'm curious let's

1674
01:34:44,850 --> 01:34:59,070
just see what actually happens during

1675
01:34:52,050 --> 01:35:05,300
this process so when we go to add one of

1676
01:34:59,069 --> 01:35:05,299
these players in here what's going on

1677
01:35:06,319 --> 01:35:13,649
what's my p-value so so here's what I'm

1678
01:35:09,180 --> 01:35:18,450
like trying to set this player to right

1679
01:35:13,649 --> 01:35:20,519
we're gonna make this nonsense happen we

1680
01:35:18,449 --> 01:35:23,220
set it up so that the entity that's

1681
01:35:20,520 --> 01:35:28,950
being followed by the camera is in fact

1682
01:35:23,220 --> 01:35:32,100
this entity which seems good and that

1683
01:35:28,949 --> 01:35:32,849
all seems fine right so totally

1684
01:35:32,100 --> 01:35:36,450
reasonable

1685
01:35:32,850 --> 01:35:46,230
so once we've added that player into the

1686
01:35:36,449 --> 01:35:47,609
worlds wait a second I want to run that

1687
01:35:46,229 --> 01:35:49,759
one more time show me that one more time

1688
01:35:47,609 --> 01:35:49,759
please

1689
01:35:56,498 --> 01:36:03,760
okay so I'm gonna look at body um I'm

1690
01:36:01,809 --> 01:36:10,329
gonna look at this identity call

1691
01:36:03,760 --> 01:36:12,820
so when we call create entity here we're

1692
01:36:10,328 --> 01:36:15,609
gonna allocate an ID that seems fine

1693
01:36:12,819 --> 01:36:18,670
we're gonna call acquire unpack and any

1694
01:36:15,609 --> 01:36:23,939
slot that should give us a new slot

1695
01:36:18,670 --> 01:36:27,010
right which it does and that seems fine

1696
01:36:23,939 --> 01:36:31,859
we're gonna clear it we're going to mark

1697
01:36:27,010 --> 01:36:31,860
it we're going to add it to the system

1698
01:36:39,408 --> 01:36:47,319
and we're not actually marking it as

1699
01:36:41,389 --> 01:36:47,319
active but I suppose that's okay

1700
01:36:54,189 --> 01:37:11,960
so that's all fine seems good so now

1701
01:37:07,670 --> 01:37:14,359
when we go to get the end of the least

1702
01:37:11,960 --> 01:37:16,579
this time it should definitely be there

1703
01:37:14,359 --> 01:37:19,099
unless we screwed something up so I want

1704
01:37:16,579 --> 01:37:23,269
to see what's happening here when we

1705
01:37:19,100 --> 01:37:37,579
call get entity by ID we should now find

1706
01:37:23,270 --> 01:37:39,800
it in the hash for sure right yeah so

1707
01:37:37,579 --> 01:37:42,079
now that we've got the camera entity we

1708
01:37:39,800 --> 01:37:46,310
should be able to actually do this call

1709
01:37:42,079 --> 01:37:48,170
correctly and figure out where the you

1710
01:37:46,310 --> 01:37:51,650
know world is it's going to be looking

1711
01:37:48,170 --> 01:37:53,359
right so we're we've got the camera to

1712
01:37:51,649 --> 01:37:56,420
eat we call in here and we say update

1713
01:37:53,359 --> 01:37:58,909
camera d4 I'm sorry update camera

1714
01:37:56,420 --> 01:38:01,520
friendiy movement and we're looping

1715
01:37:58,909 --> 01:38:03,789
through here to find like rooms I guess

1716
01:38:01,520 --> 01:38:03,790
right

1717
01:38:08,609 --> 01:38:24,449
I wonder if the problem is we can't find

1718
01:38:11,159 --> 01:38:32,930
any rooms let's find out no we found a

1719
01:38:24,449 --> 01:38:39,649
room that the players in so we're gonna

1720
01:38:32,930 --> 01:38:39,650
remember that ask the trunk space right

1721
01:38:46,189 --> 01:38:50,000
so that seems fine

1722
01:38:55,119 --> 01:39:07,720
here's where we're now looking target

1723
01:39:00,770 --> 01:39:07,720
wise that doesn't seem weird

1724
01:39:08,529 --> 01:39:27,679
what's our Delta P totally fine so now

1725
01:39:26,539 --> 01:39:31,329
if we take a look at what the actual

1726
01:39:27,680 --> 01:39:31,329
camera came out to be there

1727
01:39:41,229 --> 01:39:49,039
so I guess I would not have expected oh

1728
01:39:46,989 --> 01:39:53,019
yeah because the camera is like hovering

1729
01:39:49,039 --> 01:39:55,609
up above things so yeah chunk chunk P

1730
01:39:53,020 --> 01:39:57,320
that does seem to be where you would

1731
01:39:55,609 --> 01:40:00,589
expect the camera to be you know four

1732
01:39:57,319 --> 01:40:02,630
chunks above where it's viewing maybe so

1733
01:40:00,590 --> 01:40:05,350
assuming that's what that means that

1734
01:40:02,630 --> 01:40:05,350
seems okay

1735
01:40:20,359 --> 01:40:27,500
so I'm really just not seeing a lot of

1736
01:40:24,109 --> 01:40:27,500
weirdness here

1737
01:40:36,920 --> 01:40:44,980
so I guess I'm gonna have to maybe look

1738
01:40:39,439 --> 01:40:44,979
at the end of think the end

1739
01:40:59,729 --> 01:41:04,389
yeah I'm a semantic advanced music I

1740
01:41:02,198 --> 01:41:06,369
don't know I that actually looked pretty

1741
01:41:04,390 --> 01:41:08,020
sane so I think I'm looking for

1742
01:41:06,369 --> 01:41:10,539
something relatively subtle I thought I

1743
01:41:08,020 --> 01:41:12,550
might see you know I didn't know if I

1744
01:41:10,539 --> 01:41:15,729
would have some really weird like

1745
01:41:12,550 --> 01:41:17,320
totally out of bounds values or things

1746
01:41:15,729 --> 01:41:20,678
like that where it's been like oh man

1747
01:41:17,319 --> 01:41:22,029
that just got totally borked I hadn't

1748
01:41:20,679 --> 01:41:23,350
seen anything like that so now I'm

1749
01:41:22,029 --> 01:41:25,689
wondering if it's just like a subtle

1750
01:41:23,350 --> 01:41:28,090
positional packing unpacking problem

1751
01:41:25,689 --> 01:41:29,979
something like this when we come through

1752
01:41:28,090 --> 01:41:33,069
here and do our insurer region is

1753
01:41:29,979 --> 01:41:36,009
unpacked right we've got that that

1754
01:41:33,069 --> 01:41:38,609
concept of the unpack origin right where

1755
01:41:36,010 --> 01:41:43,090
we say we need to apply this Delta

1756
01:41:38,609 --> 01:41:46,029
because whatever the sim region says the

1757
01:41:43,090 --> 01:41:51,610
origin should be we need to move it move

1758
01:41:46,029 --> 01:41:53,619
everything right that's that's to make

1759
01:41:51,609 --> 01:41:58,569
it correctly be placed around that

1760
01:41:53,619 --> 01:42:00,369
origin you know what I mean and so the

1761
01:41:58,569 --> 01:42:01,869
first time we call and show regional

1762
01:42:00,369 --> 01:42:06,789
impact there wouldn't be anything

1763
01:42:01,869 --> 01:42:09,250
unpacked anyway and then we call create

1764
01:42:06,789 --> 01:42:11,859
entity which would put things into place

1765
01:42:09,250 --> 01:42:15,939
around the origin in some way or another

1766
01:42:11,859 --> 01:42:21,130
and then we would repack our entities

1767
01:42:15,939 --> 01:42:24,009
which is fine or leave them up right so

1768
01:42:21,130 --> 01:42:26,109
they're either just not gonna get

1769
01:42:24,010 --> 01:42:29,400
touched at all or they're going to be

1770
01:42:26,109 --> 01:42:31,539
you know packed in this in this way here

1771
01:42:29,399 --> 01:42:33,399
when they get packed in this way I'm

1772
01:42:31,539 --> 01:42:34,988
assuming and maybe we've got a bug or

1773
01:42:33,399 --> 01:42:37,629
something but when we get packed in this

1774
01:42:34,988 --> 01:42:40,928
way I'm assuming because we've set

1775
01:42:37,630 --> 01:42:42,880
removed from unpacked to true then in

1776
01:42:40,929 --> 01:42:45,250
here we'll just get compacted so it

1777
01:42:42,880 --> 01:42:49,750
shouldn't be there any more to be used

1778
01:42:45,250 --> 01:42:55,229
it would have to come out of this pack

1779
01:42:49,750 --> 01:42:57,279
state next time so I would assume my

1780
01:42:55,229 --> 01:42:59,279
furthermore my assumption is this

1781
01:42:57,279 --> 01:43:02,679
probably isn't ever getting called

1782
01:42:59,279 --> 01:43:05,309
because our actual total entities state

1783
01:43:02,679 --> 01:43:07,510
number of entities we can keep unpacked

1784
01:43:05,310 --> 01:43:09,940
is less than the total number of

1785
01:43:07,510 --> 01:43:12,430
entities we create in the world right

1786
01:43:09,939 --> 01:43:14,019
and so I'm assuming that we

1787
01:43:12,430 --> 01:43:15,250
don't even really need to consider this

1788
01:43:14,020 --> 01:43:17,530
part of the code because I don't think

1789
01:43:15,250 --> 01:43:20,800
this ever gets called I suppose I can

1790
01:43:17,529 --> 01:43:22,539
check that as well meaning at this point

1791
01:43:20,800 --> 01:43:24,730
because we have a small enough world

1792
01:43:22,539 --> 01:43:28,359
everything fits in the cache and it

1793
01:43:24,729 --> 01:43:37,299
shouldn't matter right and let me just

1794
01:43:28,359 --> 01:43:40,389
verify that that's true on a second so

1795
01:43:37,300 --> 01:43:44,820
if I run I'm guessing that that just

1796
01:43:40,390 --> 01:43:44,820
never happens like ever

1797
01:43:49,970 --> 01:44:00,390
right so we know that our bug exists

1798
01:43:56,180 --> 01:44:02,250
entirely I would say unless this is

1799
01:44:00,390 --> 01:44:03,570
happening because of this or something

1800
01:44:02,250 --> 01:44:05,640
but that you know you have to set the

1801
01:44:03,569 --> 01:44:07,380
flag to be deleted to ever have that

1802
01:44:05,640 --> 01:44:09,119
happen I don't and let you know I get we

1803
01:44:07,380 --> 01:44:19,619
could even see is that ever getting

1804
01:44:09,119 --> 01:44:21,119
called right does this path hit ever so

1805
01:44:19,619 --> 01:44:24,210
this is whether or not we ever get

1806
01:44:21,119 --> 01:44:26,760
packed at all or delete yeah we don't so

1807
01:44:24,210 --> 01:44:29,520
we're never actually exercising this

1808
01:44:26,760 --> 01:44:32,310
code path so the bug can't really be in

1809
01:44:29,520 --> 01:44:33,870
this code I'm the only way we could have

1810
01:44:32,310 --> 01:44:36,990
a bug as if that was supposed to be

1811
01:44:33,869 --> 01:44:40,979
called and wasn't right but that's it

1812
01:44:36,989 --> 01:44:43,859
so we should literally never call any of

1813
01:44:40,979 --> 01:44:47,250
this in fact that means we should never

1814
01:44:43,859 --> 01:44:49,199
have to call this either right because

1815
01:44:47,250 --> 01:44:55,829
there are no world chunks we've never

1816
01:44:49,199 --> 01:45:01,189
packed any up yeah so our bug exists

1817
01:44:55,829 --> 01:45:05,340
entirely in here you know I'm saying

1818
01:45:01,189 --> 01:45:11,099
this is where we're having our issue in

1819
01:45:05,340 --> 01:45:13,980
here and of course you know the this

1820
01:45:11,100 --> 01:45:18,440
code that's you know doing sort of the

1821
01:45:13,979 --> 01:45:18,439
the sort of pre checking on this stuff

1822
01:45:18,949 --> 01:45:24,960
this is the entirety of it so what's

1823
01:45:24,119 --> 01:45:27,300
wrong

1824
01:45:24,960 --> 01:45:33,289
right like what's going on weird there

1825
01:45:27,300 --> 01:45:37,369
and I yeah I honestly couldn't say week

1826
01:45:33,289 --> 01:45:39,720
whenever you do one of these unpacks

1827
01:45:37,369 --> 01:45:43,949
which you know we're doing here and like

1828
01:45:39,720 --> 01:45:45,860
begin world change anytime you're

1829
01:45:43,949 --> 01:45:49,050
actually doing one of those unpacks

1830
01:45:45,859 --> 01:45:53,069
you're passing in whatever the sim

1831
01:45:49,050 --> 01:45:56,100
origin was and it's using that origin as

1832
01:45:53,069 --> 01:45:57,840
a new unpack origin which means it looks

1833
01:45:56,100 --> 01:46:01,280
to see what the difference was between

1834
01:45:57,840 --> 01:46:03,710
the last time it did anything and now in

1835
01:46:01,279 --> 01:46:05,658
updates all of those positional all

1836
01:46:03,710 --> 01:46:08,750
those entity positions relative to

1837
01:46:05,658 --> 01:46:11,238
whatever that origin change was so the

1838
01:46:08,750 --> 01:46:16,729
all entities are now relative to the

1839
01:46:11,238 --> 01:46:18,919
origin at all times right I do think

1840
01:46:16,729 --> 01:46:20,569
there is something we do need to sort of

1841
01:46:18,920 --> 01:46:22,849
do here which is that if it entity was

1842
01:46:20,569 --> 01:46:24,259
too far away it really does need to get

1843
01:46:22,849 --> 01:46:52,699
unpacked because otherwise it would

1844
01:46:24,260 --> 01:46:55,699
shift too much so I feel like in here so

1845
01:46:52,698 --> 01:46:58,399
we do want to pack things back up

1846
01:46:55,698 --> 01:47:01,939
sometimes and we want to do that because

1847
01:46:58,399 --> 01:47:06,469
again the whole reason we sort of keep

1848
01:47:01,939 --> 01:47:08,210
things and floats relative to local

1849
01:47:06,469 --> 01:47:11,300
origins is to avoid floating point

1850
01:47:08,210 --> 01:47:12,649
issues you know you get to you can do

1851
01:47:11,300 --> 01:47:14,510
things one of two ways

1852
01:47:12,649 --> 01:47:17,299
either you can do that which is more

1853
01:47:14,510 --> 01:47:20,840
work but can potentially be more

1854
01:47:17,300 --> 01:47:23,090
performant or you have to use doubles

1855
01:47:20,840 --> 01:47:25,550
but that's really all you can do if you

1856
01:47:23,090 --> 01:47:28,389
want large worlds because floats aren't

1857
01:47:25,550 --> 01:47:34,369
big enough to store really large worlds

1858
01:47:28,389 --> 01:47:35,809
anyway so yeah we know we're not calling

1859
01:47:34,368 --> 01:47:37,698
that code path we know we're only

1860
01:47:35,809 --> 01:47:39,619
calling this code path but I don't see

1861
01:47:37,698 --> 01:47:41,500
any actual issues with this code path

1862
01:47:39,618 --> 01:47:44,630
because that looks like it's doing

1863
01:47:41,500 --> 01:47:48,170
exactly what we would expect now I don't

1864
01:47:44,630 --> 01:47:50,569
know if maybe I guess one thing we would

1865
01:47:48,170 --> 01:47:52,730
like to see is how many entities got

1866
01:47:50,569 --> 01:47:54,288
registered in a particular sin marina we

1867
01:47:52,729 --> 01:47:56,238
should probably track that value and

1868
01:47:54,288 --> 01:47:57,738
print out both of those but we do know

1869
01:47:56,238 --> 01:48:00,439
at least some are getting registered

1870
01:47:57,738 --> 01:48:02,299
right and it seems like what the problem

1871
01:48:00,439 --> 01:48:04,399
is that mainly we're having is somehow

1872
01:48:02,300 --> 01:48:06,079
the camera the entity we're following

1873
01:48:04,399 --> 01:48:08,238
with the camera itself doesn't get

1874
01:48:06,078 --> 01:48:13,029
registered which doesn't make a lot of

1875
01:48:08,238 --> 01:48:13,029
sense but apparently is the case right

1876
01:48:14,958 --> 01:48:24,569
this so yeah sort of puzzled

1877
01:48:22,010 --> 01:48:26,458
I'd like to track it down but I'm afraid

1878
01:48:24,569 --> 01:48:28,529
it's gonna take too long so I may leave

1879
01:48:26,458 --> 01:48:33,840
this for next weekend this what we will

1880
01:48:28,529 --> 01:48:41,759
do is we'll go find the bug so yeah you

1881
01:48:33,840 --> 01:48:46,650
can even see there's our world kind of

1882
01:48:41,760 --> 01:48:52,469
off in the distance right but the

1883
01:48:46,649 --> 01:48:54,748
cameras in nonsense town and it's

1884
01:48:52,469 --> 01:48:57,118
actually buggy as well so you can see

1885
01:48:54,748 --> 01:49:00,538
that it was having trouble like finding

1886
01:48:57,118 --> 01:49:04,498
where entities were like look at all the

1887
01:49:00,538 --> 01:49:08,639
stuff that's stacked on top of itself so

1888
01:49:04,498 --> 01:49:10,559
we do know we've got a positional bug we

1889
01:49:08,639 --> 01:49:13,550
just don't know where it is

1890
01:49:10,559 --> 01:49:16,708
right but we do know that that is

1891
01:49:13,550 --> 01:49:20,849
effectively our problem so when we're

1892
01:49:16,708 --> 01:49:23,788
setting up these p-values when we loop

1893
01:49:20,849 --> 01:49:26,279
over our entities to update them we're

1894
01:49:23,788 --> 01:49:29,998
screwing up somehow

1895
01:49:26,279 --> 01:49:31,618
and the question is just how since it's

1896
01:49:29,998 --> 01:49:34,019
so simple you think we'd be able to see

1897
01:49:31,618 --> 01:49:35,969
it but it must be just maybe a little

1898
01:49:34,019 --> 01:49:41,179
bit subtle because like I said there's

1899
01:49:35,969 --> 01:49:41,179
not really a whole lot going on here

1900
01:49:42,139 --> 01:49:50,248
this doesn't touch the bounds this will

1901
01:49:48,448 --> 01:49:52,018
always update it whether or not you're

1902
01:49:50,248 --> 01:49:55,559
in the bounds are not so it should keep

1903
01:49:52,019 --> 01:49:57,239
those positions coherent whether or not

1904
01:49:55,559 --> 01:50:01,110
you fall inside here right we're not

1905
01:49:57,238 --> 01:50:08,448
looking at that criteria to see whether

1906
01:50:01,109 --> 01:50:08,448
we update or not so I don't really see

1907
01:50:27,510 --> 01:50:31,860
maybe this math is wrong

1908
01:50:37,369 --> 01:50:45,710
like for example this could be backwards

1909
01:50:40,720 --> 01:50:49,460
right so maybe we need to think this

1910
01:50:45,710 --> 01:50:51,500
through is this adjustment backwards we

1911
01:50:49,460 --> 01:50:54,319
wouldn't have known because this code

1912
01:50:51,500 --> 01:50:59,140
never got executed before because we

1913
01:50:54,319 --> 01:51:05,929
always packed everything back up right

1914
01:50:59,140 --> 01:51:07,610
so we couldn't have said oh well that

1915
01:51:05,930 --> 01:51:09,409
can't be true because it was working

1916
01:51:07,609 --> 01:51:11,630
last time but it never would have

1917
01:51:09,409 --> 01:51:14,420
touched this code because everybody got

1918
01:51:11,630 --> 01:51:18,560
packed back up so it was only ever doing

1919
01:51:14,420 --> 01:51:20,390
this code here so we know that this code

1920
01:51:18,560 --> 01:51:23,390
is correct but who cares because that

1921
01:51:20,390 --> 01:51:27,020
code never gets called anymore

1922
01:51:23,390 --> 01:51:32,000
so if we look at this and we say is that

1923
01:51:27,020 --> 01:51:34,040
origin adjustment correct so let's do

1924
01:51:32,000 --> 01:51:36,050
the math on that and see if it actually

1925
01:51:34,039 --> 01:51:38,689
is because maybe we just reversed the

1926
01:51:36,050 --> 01:51:41,390
polarity there but I don't want to just

1927
01:51:38,689 --> 01:51:43,759
go flipping signs around and hoping we

1928
01:51:41,390 --> 01:51:47,740
get it right I'd rather take a look so

1929
01:51:43,760 --> 01:51:47,739
here we are on day 5 44

1930
01:51:54,179 --> 01:52:05,230
and so what we essentially have going on

1931
01:51:57,340 --> 01:52:07,599
here is we have on frame n minus 1 which

1932
01:52:05,229 --> 01:52:11,049
is the previous frame we have a

1933
01:52:07,599 --> 01:52:14,260
simulation region and we have an origin

1934
01:52:11,050 --> 01:52:17,079
right and then there's a p for an entity

1935
01:52:14,260 --> 01:52:21,429
so this is our origin here sorry I've

1936
01:52:17,078 --> 01:52:22,808
got to get this on a flatter surface not

1937
01:52:21,429 --> 01:52:26,230
that my handwriting is good even then

1938
01:52:22,809 --> 01:52:28,360
but if we have an origin here and we've

1939
01:52:26,229 --> 01:52:33,789
got an offset value which is P here

1940
01:52:28,359 --> 01:52:35,078
right and then we move to frame n which

1941
01:52:33,789 --> 01:52:39,099
is the frame were on now

1942
01:52:35,078 --> 01:52:42,849
and what we're seeing is that the origin

1943
01:52:39,099 --> 01:52:45,130
has actually moved so we had an origin

1944
01:52:42,849 --> 01:52:49,420
on frame n minus 1 so we'll call that Oh

1945
01:52:45,130 --> 01:52:52,420
n minus 1 right and it was here but now

1946
01:52:49,420 --> 01:52:56,590
the origin is over here at O n right so

1947
01:52:52,420 --> 01:53:00,399
this this has moved and we previously

1948
01:52:56,590 --> 01:53:03,520
had a location P that was relative to

1949
01:53:00,399 --> 01:53:06,219
this origin that now we want this right

1950
01:53:03,520 --> 01:53:10,270
so we effectively want this was P n

1951
01:53:06,219 --> 01:53:11,800
minus 1 this is now P n right and so if

1952
01:53:10,270 --> 01:53:14,320
we were to write the equations for these

1953
01:53:11,800 --> 01:53:16,750
what we would say is they look the

1954
01:53:14,319 --> 01:53:19,960
absolute world space location for P

1955
01:53:16,750 --> 01:53:22,539
right so P in world space which is never

1956
01:53:19,960 --> 01:53:26,289
supposed to change it's just in a fixed

1957
01:53:22,539 --> 01:53:30,670
location in the world in an absolute

1958
01:53:26,289 --> 01:53:35,289
sense is going to be equal to the origin

1959
01:53:30,670 --> 01:53:40,300
of n minus 1 plus P at n minus 1 right

1960
01:53:35,289 --> 01:53:45,210
it's this it is also supposed to be

1961
01:53:40,300 --> 01:53:48,579
equal to the origin n plus P at end

1962
01:53:45,210 --> 01:53:51,939
which means that if we take these two

1963
01:53:48,578 --> 01:53:56,019
and equate them we say that n o n minus

1964
01:53:51,939 --> 01:54:00,488
1 plus P n minus 1 right has to be equal

1965
01:53:56,020 --> 01:54:05,679
to o n plus P N and what we want to know

1966
01:54:00,488 --> 01:54:08,979
is this we know all of these right

1967
01:54:05,679 --> 01:54:11,230
but we want to know what the new P is so

1968
01:54:08,979 --> 01:54:12,609
if we were to solve for the new P we

1969
01:54:11,229 --> 01:54:14,500
would have to transfer this to the other

1970
01:54:12,609 --> 01:54:18,609
side and we would end up with this

1971
01:54:14,500 --> 01:54:25,090
equation Oh n minus 1 plus P and minus 1

1972
01:54:18,609 --> 01:54:28,269
minus o n right refactoring the terms we

1973
01:54:25,090 --> 01:54:31,179
get P and minus 1 and we have these two

1974
01:54:28,270 --> 01:54:35,409
terms here so we would add oh and minus

1975
01:54:31,179 --> 01:54:38,380
1 minus Oh N and that right is our

1976
01:54:35,408 --> 01:54:41,259
update equation to find our new P n we

1977
01:54:38,380 --> 01:54:46,140
take our old P N and we add n minus 1 to

1978
01:54:41,260 --> 01:54:50,920
n this means the old one is positive and

1979
01:54:46,140 --> 01:54:57,369
the new one is negative and I want to

1980
01:54:50,920 --> 01:54:59,408
say although I don't remember that if we

1981
01:54:57,369 --> 01:55:01,090
look at who gets the positive and who

1982
01:54:59,408 --> 01:55:01,710
gets the negative it's the wrong way

1983
01:55:01,090 --> 01:55:04,119
around

1984
01:55:01,710 --> 01:55:10,300
the new one is supposed to have the

1985
01:55:04,119 --> 01:55:12,369
negative right that's the new one and

1986
01:55:10,300 --> 01:55:18,520
the old one is supposed to have the

1987
01:55:12,369 --> 01:55:21,130
positive so yeah we had a negative we

1988
01:55:18,520 --> 01:55:22,390
had our sign flipped there and I don't

1989
01:55:21,130 --> 01:55:24,100
know if that's the problem but that was

1990
01:55:22,390 --> 01:55:26,140
definitely a problem because I don't

1991
01:55:24,100 --> 01:55:28,179
think I messed up that math I don't know

1992
01:55:26,140 --> 01:55:28,739
and hey lo and behold that was the

1993
01:55:28,179 --> 01:55:35,020
problem

1994
01:55:28,738 --> 01:55:37,089
so yeah math is hard let's go shopping I

1995
01:55:35,020 --> 01:55:44,679
don't actually remember what that

1996
01:55:37,090 --> 01:55:45,600
particular Barbie said you know let's be

1997
01:55:44,679 --> 01:55:48,250
honest

1998
01:55:45,600 --> 01:55:51,880
Barbie wasn't wrong math is hard

1999
01:55:48,250 --> 01:55:53,408
shopping is easy but hey math can be

2000
01:55:51,880 --> 01:55:57,010
more rewarding than shopping sometimes

2001
01:55:53,408 --> 01:55:59,920
and so that's why we do it right so now

2002
01:55:57,010 --> 01:56:01,659
I think we're often a good space here

2003
01:55:59,920 --> 01:56:04,719
and hey we can now leave our code in a

2004
01:56:01,658 --> 01:56:07,869
good state for the week that was the

2005
01:56:04,719 --> 01:56:10,210
update I wanted to make and I think now

2006
01:56:07,869 --> 01:56:12,908
we're mostly done the only thing that we

2007
01:56:10,210 --> 01:56:17,590
really do need to do here is we just

2008
01:56:12,908 --> 01:56:19,509
want a check on distance so you know

2009
01:56:17,590 --> 01:56:25,390
probably what we should say

2010
01:56:19,510 --> 01:56:30,390
is something like you know distance from

2011
01:56:25,390 --> 01:56:30,390
origin equals length squared entity P

2012
01:56:30,960 --> 01:56:39,060
and we just want to say look if this

2013
01:56:34,300 --> 01:56:44,079
distance from origin is too high so like

2014
01:56:39,060 --> 01:56:49,270
max allowed distance you know I don't

2015
01:56:44,079 --> 01:56:57,340
know but don't get more than a hundred

2016
01:56:49,270 --> 01:57:00,070
meters from the center I don't know what

2017
01:56:57,340 --> 01:57:02,590
you want there so you know fundamentally

2018
01:57:00,069 --> 01:57:06,670
speaking we have 24 bits of precision in

2019
01:57:02,590 --> 01:57:08,829
a floating point value right so I feel

2020
01:57:06,670 --> 01:57:10,420
like I don't really want things that are

2021
01:57:08,829 --> 01:57:12,340
gonna be you know if I talk about the

2022
01:57:10,420 --> 01:57:15,430
number 16 million and I talk about

2023
01:57:12,340 --> 01:57:19,960
shifting that around I probably would

2024
01:57:15,430 --> 01:57:21,970
say you know fractional maybe we would

2025
01:57:19,960 --> 01:57:24,310
be talking about thirty two thousand

2026
01:57:21,970 --> 01:57:25,930
sixteen thousand something family so I

2027
01:57:24,310 --> 01:57:28,710
would probably say maybe maybe a

2028
01:57:25,930 --> 01:57:32,650
thousand is actually so one kilometer

2029
01:57:28,710 --> 01:57:35,010
away from the origin is probably okay I

2030
01:57:32,649 --> 01:57:45,460
don't know how safe we want to be there

2031
01:57:35,010 --> 01:57:48,190
so I'll say because we can actually tune

2032
01:57:45,460 --> 01:57:49,390
that value to whatever we want but after

2033
01:57:48,189 --> 01:57:50,799
we compute this distance from origin

2034
01:57:49,390 --> 01:57:53,560
what we would be doing here is saying

2035
01:57:50,800 --> 01:57:55,090
look if this thing is too far from the

2036
01:57:53,560 --> 01:57:57,420
center we're just gonna unpack it

2037
01:57:55,090 --> 01:58:00,789
because at that point things have gotten

2038
01:57:57,420 --> 01:58:05,800
into a bad state and so and we don't

2039
01:58:00,789 --> 01:58:08,488
really want to yeah we don't really want

2040
01:58:05,800 --> 01:58:08,489
at that point

2041
01:58:16,579 --> 01:58:23,300
you know what I just realized we don't

2042
01:58:20,569 --> 01:58:26,409
have to do this here either

2043
01:58:23,300 --> 01:58:26,409
do we

2044
01:58:31,060 --> 01:58:39,450
this is really pretty awesome okay so

2045
01:58:35,279 --> 01:58:44,829
actually now that we've done all this

2046
01:58:39,449 --> 01:58:47,019
you never have to call end because we

2047
01:58:44,829 --> 01:58:53,619
could just do this at the beginning

2048
01:58:47,020 --> 01:58:58,000
right so rather than you estimating what

2049
01:58:53,619 --> 01:59:06,840
this is we can just make this be some of

2050
01:58:58,000 --> 01:59:11,829
yeah oh oh that's much better

2051
01:59:06,840 --> 01:59:21,810
right so actually forget everything I

2052
01:59:11,829 --> 01:59:21,809
said all we really need to do is this

2053
01:59:22,409 --> 01:59:35,019
forget this what we really wanted is to

2054
01:59:30,159 --> 01:59:38,199
just do this loop right where we are

2055
01:59:35,020 --> 01:59:41,280
doing the removal we just want to do

2056
01:59:38,199 --> 01:59:43,739
that the next time you ask us to unpack

2057
01:59:41,279 --> 01:59:46,420
because then we actually know exactly

2058
01:59:43,739 --> 01:59:50,949
what the min and Max chunks are because

2059
01:59:46,420 --> 01:59:54,270
you're handing them to us right and if

2060
01:59:50,949 --> 01:59:57,519
somebody would have been placed outside

2061
01:59:54,270 --> 02:00:01,180
we can literally enforce our precision

2062
01:59:57,520 --> 02:00:04,540
exactly by saying if the update Delta

2063
02:00:01,180 --> 02:00:08,590
right would have placed this person

2064
02:00:04,539 --> 02:00:13,239
outside of the correct area then we will

2065
02:00:08,590 --> 02:00:18,520
pack them right so we can do this we can

2066
02:00:13,239 --> 02:00:22,449
say look we're gonna update this this

2067
02:00:18,520 --> 02:00:26,260
this unpack origin here right and when

2068
02:00:22,449 --> 02:00:27,880
we do this update we can just say if you

2069
02:00:26,260 --> 02:00:29,530
would have crossed that side we'll pack

2070
02:00:27,880 --> 02:00:31,210
you we can even do it a little bit

2071
02:00:29,529 --> 02:00:32,139
better I'm gonna doing two steps just to

2072
02:00:31,210 --> 02:00:36,909
make sure I don't screw up because we're

2073
02:00:32,140 --> 02:00:38,500
kind of out of time here but what we

2074
02:00:36,909 --> 02:00:42,159
should be able to do is say all right in

2075
02:00:38,500 --> 02:00:44,590
the case where this thing is potentially

2076
02:00:42,159 --> 02:00:48,519
going to be repacked

2077
02:00:44,590 --> 02:00:51,760
and we just say oh you know pack it if

2078
02:00:48,520 --> 02:01:05,650
you're gonna otherwise register I think

2079
02:00:51,760 --> 02:01:07,739
that's it that's way better because now

2080
02:01:05,649 --> 02:01:11,259
you just do one pass over the entities

2081
02:01:07,738 --> 02:01:21,669
to do your unpack and that also repacks

2082
02:01:11,260 --> 02:01:23,829
them if you needed to right yeah and so

2083
02:01:21,670 --> 02:01:27,099
what I want to do there is also say here

2084
02:01:23,829 --> 02:01:28,448
in this case where we do this this guy

2085
02:01:27,099 --> 02:01:31,469
and we haven't really tested this code

2086
02:01:28,448 --> 02:01:34,329
fast so we kind of have to do that but

2087
02:01:31,469 --> 02:01:36,760
when we're gonna repack this stuff what

2088
02:01:34,329 --> 02:01:38,618
we want to do here is say look don't

2089
02:01:36,760 --> 02:01:40,840
actually do this math because we know

2090
02:01:38,618 --> 02:01:43,719
that everyone is cool is is correctly

2091
02:01:40,840 --> 02:01:44,949
near the sim region right because nobody

2092
02:01:43,719 --> 02:01:46,750
could have been unpacked they weren't

2093
02:01:44,948 --> 02:01:48,638
near the sim region what we're now going

2094
02:01:46,750 --> 02:01:50,829
to do is apply an offset from the old

2095
02:01:48,639 --> 02:01:53,590
sim region to the new sim region right

2096
02:01:50,829 --> 02:01:56,289
but we don't want to actually apply that

2097
02:01:53,590 --> 02:01:58,960
update if it would create too much of a

2098
02:01:56,289 --> 02:02:02,649
distance so instead what we actually

2099
02:01:58,960 --> 02:02:06,520
want is this update the person in this

2100
02:02:02,649 --> 02:02:09,579
case don't update the person in this

2101
02:02:06,520 --> 02:02:12,130
case so if the unpack origin would have

2102
02:02:09,579 --> 02:02:16,029
made you too far from right would have

2103
02:02:12,130 --> 02:02:19,349
put you outside of our safe of our safe

2104
02:02:16,029 --> 02:02:22,389
like floating-point precision zone right

2105
02:02:19,349 --> 02:02:24,400
then we need to pack you for sure like

2106
02:02:22,389 --> 02:02:26,340
you must be packed at that point it's a

2107
02:02:24,399 --> 02:02:29,229
requirement

2108
02:02:26,340 --> 02:02:32,770
so if wait where do we even put that

2109
02:02:29,229 --> 02:02:35,859
check in their head wait so if distance

2110
02:02:32,770 --> 02:02:44,849
from origin is greater than max allowed

2111
02:02:35,859 --> 02:02:47,019
distance or should have been in for or

2112
02:02:44,849 --> 02:02:50,289
the unpack identity count is greater

2113
02:02:47,020 --> 02:02:55,900
than the unpack threshold or or it sorry

2114
02:02:50,289 --> 02:02:58,909
and and this person isn't contained

2115
02:02:55,899 --> 02:03:02,599
so this is a requirement you have to

2116
02:02:58,909 --> 02:03:04,069
pack otherwise if this is over then you

2117
02:03:02,600 --> 02:03:09,260
should pack anyone who's not inside

2118
02:03:04,069 --> 02:03:11,329
right makes sense so then when we come

2119
02:03:09,260 --> 02:03:19,730
through here we would say all right

2120
02:03:11,329 --> 02:03:20,930
maybe we assert this as well and then so

2121
02:03:19,729 --> 02:03:22,369
when we come in here we say all right

2122
02:03:20,930 --> 02:03:26,329
because we know that this should never

2123
02:03:22,369 --> 02:03:28,760
happen now we need to pack this guy but

2124
02:03:26,329 --> 02:03:35,199
the problem is we actually don't want to

2125
02:03:28,760 --> 02:03:35,199
pack the world position of this entity

2126
02:03:45,470 --> 02:03:52,210
am I missing where do we add the the

2127
02:03:49,010 --> 02:03:52,210
world space in here though

2128
02:04:04,020 --> 02:04:11,190
so this code looks like it did I mess it

2129
02:04:08,279 --> 02:04:15,139
up before when I was changing it around

2130
02:04:11,189 --> 02:04:15,139
because where do we actually pack

2131
02:04:24,658 --> 02:04:33,539
oh no it's because of this map into

2132
02:04:27,300 --> 02:04:35,460
chunks face bit here right yeah yeah so

2133
02:04:33,539 --> 02:04:40,859
when we do map into chunks face with

2134
02:04:35,460 --> 02:04:43,350
this right here we don't actually want

2135
02:04:40,859 --> 02:04:45,089
to use the world unpack origin well I

2136
02:04:43,350 --> 02:04:48,270
guess we do we just don't want to update

2137
02:04:45,090 --> 02:04:56,069
this until afterward right so we want to

2138
02:04:48,270 --> 02:04:59,610
essentially do this right oops this so

2139
02:04:56,069 --> 02:05:02,158
in here we want to say hey anyone that

2140
02:04:59,609 --> 02:05:04,710
we were gonna repack we repack them

2141
02:05:02,158 --> 02:05:07,559
using the old origin because we're not

2142
02:05:04,710 --> 02:05:10,408
gonna update their Delta that should

2143
02:05:07,560 --> 02:05:12,719
pack them properly right and then but

2144
02:05:10,408 --> 02:05:14,549
once we've processed everybody from the

2145
02:05:12,719 --> 02:05:19,250
old origin then we update to the new

2146
02:05:14,550 --> 02:05:21,810
origin right I think that's correct

2147
02:05:19,250 --> 02:05:24,869
furthermore I don't need this to be

2148
02:05:21,810 --> 02:05:33,030
doing it's nonsense anymore I'm just

2149
02:05:24,869 --> 02:05:35,219
going to do it this way all right so I

2150
02:05:33,029 --> 02:05:38,250
think that's all we need and now that

2151
02:05:35,219 --> 02:05:39,929
code is is much better and we can tune

2152
02:05:38,250 --> 02:05:45,689
that as we actually get world's large

2153
02:05:39,929 --> 02:05:51,408
enough to matter we can fix that looks

2154
02:05:45,689 --> 02:05:51,408
like what's the problem here

2155
02:06:13,588 --> 02:06:18,510
so that could should only happen in this

2156
02:06:16,889 --> 02:06:22,399
case I'm going to break this out a

2157
02:06:18,510 --> 02:06:30,929
little bit like too far for precision

2158
02:06:22,399 --> 02:06:46,050
I'm going to call that this and then I'm

2159
02:06:30,929 --> 02:06:58,408
going to call this outside volume and

2160
02:06:46,050 --> 02:07:02,849
that way I can write this and say okay

2161
02:06:58,408 --> 02:07:11,248
compute you know all of this and say if

2162
02:07:02,849 --> 02:07:14,878
it's too far for the precision or it's

2163
02:07:11,248 --> 02:07:16,469
outside the volume and we're over the

2164
02:07:14,878 --> 02:07:19,279
acquired entity limit and in fact maybe

2165
02:07:16,469 --> 02:07:19,279
I'll make that one too

2166
02:07:25,560 --> 02:07:30,300
and this is just so I can expect these

2167
02:07:27,630 --> 02:07:33,000
in the debugger conveniently so what I

2168
02:07:30,300 --> 02:07:36,270
want to say is if we're too far for the

2169
02:07:33,000 --> 02:07:39,149
precision or we exceeded our count and

2170
02:07:36,270 --> 02:07:42,420
we're outside the volume that we expect

2171
02:07:39,149 --> 02:07:43,649
to use then we assert in here that we're

2172
02:07:42,420 --> 02:07:47,250
outside the volume because you shouldn't

2173
02:07:43,649 --> 02:07:51,779
be able to be too far away from the

2174
02:07:47,250 --> 02:07:58,079
origin right that shouldn't be possible

2175
02:07:51,779 --> 02:08:06,179
when we do this operation here and so

2176
02:07:58,079 --> 02:08:09,149
let's just make sure that's true all

2177
02:08:06,180 --> 02:08:11,010
right so let me see so now we come

2178
02:08:09,149 --> 02:08:14,539
through here I should be able to did I

2179
02:08:11,010 --> 02:08:18,780
and I probably didn't put this into

2180
02:08:14,539 --> 02:08:20,640
debug build what we really need to do is

2181
02:08:18,779 --> 02:08:26,460
just have the lighting turn off I never

2182
02:08:20,640 --> 02:08:28,770
really need to be in release mode I just

2183
02:08:26,460 --> 02:08:33,480
need to turn the lighting off so if we

2184
02:08:28,770 --> 02:08:40,350
then look too far for precision it's

2185
02:08:33,479 --> 02:08:42,869
true count exceeded is zero is outside

2186
02:08:40,350 --> 02:08:44,280
volume is zero all right so how did we

2187
02:08:42,869 --> 02:08:48,269
end up in that situation what's the

2188
02:08:44,279 --> 02:08:55,739
distance from origin oh I didn't square

2189
02:08:48,270 --> 02:08:57,720
up we're using the length squared we

2190
02:08:55,739 --> 02:09:01,819
need to square our max allowed distance

2191
02:08:57,720 --> 02:09:01,820
as well so that's actually that

2192
02:09:08,779 --> 02:09:14,279
all right so it looks like that was just

2193
02:09:10,920 --> 02:09:16,800
a slip of the lip of the square as they

2194
02:09:14,279 --> 02:09:18,599
tell it say and so I think we're fine

2195
02:09:16,800 --> 02:09:20,520
and again I don't really know what that

2196
02:09:18,600 --> 02:09:21,719
value should be we can revisit that when

2197
02:09:20,520 --> 02:09:23,730
we're sort of doing any kind of

2198
02:09:21,719 --> 02:09:25,289
numerical tuning pass on this code but

2199
02:09:23,729 --> 02:09:28,199
now I think we're in good shape let's go

2200
02:09:25,289 --> 02:09:29,880
to a brief QA I'm pretty happy with how

2201
02:09:28,199 --> 02:09:33,329
that turned out that's exactly what I

2202
02:09:29,880 --> 02:09:36,719
wanted we are now in fact it's better

2203
02:09:33,329 --> 02:09:37,260
than what I wanted so that like that's

2204
02:09:36,719 --> 02:09:39,930
great

2205
02:09:37,260 --> 02:09:41,880
now we don't copy entities anymore when

2206
02:09:39,930 --> 02:09:43,500
they're still in the cache and yet we

2207
02:09:41,880 --> 02:09:44,819
can still have worlds that have like

2208
02:09:43,500 --> 02:09:47,279
billions of entities in them if we

2209
02:09:44,819 --> 02:09:48,689
wanted to and it would be fine I mean

2210
02:09:47,279 --> 02:09:52,789
we'd have to write something that pages

2211
02:09:48,689 --> 02:09:52,789
to disk if we truly wanted billions

2212
02:10:29,059 --> 02:10:39,949
would you do Linux programming if you

2213
02:10:30,859 --> 02:10:41,988
had a remedy GPG on Linux um so I guess

2214
02:10:39,948 --> 02:10:45,259
what I would say is I would certainly

2215
02:10:41,988 --> 02:10:47,598
consider trying it at some point again

2216
02:10:45,260 --> 02:10:52,639
because the main thing I don't like

2217
02:10:47,599 --> 02:11:00,190
about Linux is the debugger so I would

2218
02:10:52,639 --> 02:11:02,630
consider it on desktop anyway Linux just

2219
02:11:00,189 --> 02:11:04,158
totally dives on every laptop I've ever

2220
02:11:02,630 --> 02:11:06,170
had because it doesn't handle Optimus

2221
02:11:04,158 --> 02:11:08,299
graphics particularly well which I've

2222
02:11:06,170 --> 02:11:10,190
always kind of had the Nvidia ones you

2223
02:11:08,300 --> 02:11:12,409
know so I don't know that I would ever

2224
02:11:10,189 --> 02:11:14,178
try on a laptop but on the desktop I

2225
02:11:12,408 --> 02:11:19,908
would consider trying it if I had remedy

2226
02:11:14,179 --> 02:11:22,279
sure will there be a memory difference

2227
02:11:19,908 --> 02:11:27,948
with too far from precision versus no

2228
02:11:22,279 --> 02:11:32,319
too far from precision well I it doesn't

2229
02:11:27,948 --> 02:11:32,319
really affect the memory usages at all

2230
02:11:33,460 --> 02:11:43,038
really pretty much at all I mean it sort

2231
02:11:37,429 --> 02:11:49,489
of has a very like a really really sort

2232
02:11:43,038 --> 02:11:51,979
of tangential effect would be that you

2233
02:11:49,488 --> 02:11:54,738
will pack a few more entities sometimes

2234
02:11:51,979 --> 02:11:56,149
if they were way out so you'll pack them

2235
02:11:54,738 --> 02:12:00,578
earlier than you would have packed them

2236
02:11:56,149 --> 02:12:00,578
but it's not going to affect the memory

2237
02:12:09,389 --> 02:12:12,909
I'm working on a product where the

2238
02:12:11,408 --> 02:12:14,710
client has written some prototype

2239
02:12:12,908 --> 02:12:16,569
mathematics code in MATLAB I've

2240
02:12:14,710 --> 02:12:18,099
translated most of it however I have

2241
02:12:16,569 --> 02:12:19,420
some discrepancies at the output and I

2242
02:12:18,099 --> 02:12:22,029
can't figure out if there's a better way

2243
02:12:19,420 --> 02:12:41,020
to debug the problem then a whole bunch

2244
02:12:22,029 --> 02:12:45,729
of printf debugging thoughts I mean not

2245
02:12:41,020 --> 02:12:47,679
really I feel like most of the time when

2246
02:12:45,729 --> 02:12:49,750
you end up in that situation you kind of

2247
02:12:47,679 --> 02:12:51,550
just have to make checkpoints where you

2248
02:12:49,750 --> 02:12:54,969
dump the state and you see where it has

2249
02:12:51,550 --> 02:12:58,270
gone wrong right the only thing I would

2250
02:12:54,969 --> 02:13:00,760
mention is make sure comparing apples to

2251
02:12:58,270 --> 02:13:02,710
apples right if MATLAB is doing all of

2252
02:13:00,760 --> 02:13:05,289
its computations and like extended

2253
02:13:02,710 --> 02:13:07,149
arithmetic or something and you're doing

2254
02:13:05,289 --> 02:13:08,769
all your computations in float well

2255
02:13:07,149 --> 02:13:11,198
that's a pretty obvious place you could

2256
02:13:08,770 --> 02:13:14,860
diverge right so make sure you're both

2257
02:13:11,198 --> 02:13:21,339
using I Triple E same bit level floating

2258
02:13:14,859 --> 02:13:22,658
point matchup right blah blah blah but

2259
02:13:21,340 --> 02:13:24,400
then yeah you usually what you have to

2260
02:13:22,658 --> 02:13:27,158
do is define some checkpoints I would

2261
02:13:24,399 --> 02:13:31,750
recommend a sort of a general branch and

2262
02:13:27,158 --> 02:13:33,789
bound kind of approach so you know start

2263
02:13:31,750 --> 02:13:35,649
by dumping the state in the middle of

2264
02:13:33,789 --> 02:13:38,229
the routine in both of them and see if

2265
02:13:35,649 --> 02:13:40,929
it diverges if it's not divergent then

2266
02:13:38,229 --> 02:13:42,428
dump jump halfway in between the

2267
02:13:40,929 --> 02:13:43,329
remaining code and do it otherwise jump

2268
02:13:42,429 --> 02:13:45,670
back up halfway

2269
02:13:43,329 --> 02:13:48,099
so basically binary search your code to

2270
02:13:45,670 --> 02:13:52,118
avoid having to dump state more than you

2271
02:13:48,099 --> 02:13:56,340
need to but that's about all I can

2272
02:13:52,118 --> 02:13:56,339
recommend without any more details

2273
02:14:00,198 --> 02:14:03,229
when you're hopping around in a large

2274
02:14:01,698 --> 02:14:05,419
room it appears when you're hopping up

2275
02:14:03,229 --> 02:14:08,419
it seems that the outer area is lighter

2276
02:14:05,420 --> 02:14:14,230
than the area around the player is this

2277
02:14:08,420 --> 02:14:14,230
on purpose lighter that the area

2278
02:14:29,658 --> 02:14:34,369
oh are you maybe you might be just

2279
02:14:31,639 --> 02:14:36,230
talking about the lighting region are

2280
02:14:34,369 --> 02:14:37,460
you talking about I'm not sure what

2281
02:14:36,229 --> 02:14:43,149
you're talking about but I'm gonna say

2282
02:14:37,460 --> 02:14:46,069
so are you talking about like this

2283
02:14:43,149 --> 02:14:48,198
square area that's because we right now

2284
02:14:46,069 --> 02:14:50,500
just have a bound in there that only

2285
02:14:48,198 --> 02:14:54,589
computes lighting in a region but that's

2286
02:14:50,500 --> 02:14:56,658
yeah that will go away when we go finish

2287
02:14:54,590 --> 02:15:02,739
the lighting code which is coming up

2288
02:14:56,658 --> 02:15:05,179
soon actually ground cover and lighting

2289
02:15:02,738 --> 02:15:06,738
because I now that we've got the cash

2290
02:15:05,179 --> 02:15:08,480
stuff working properly I feel like it'd

2291
02:15:06,738 --> 02:15:11,169
be pretty easy to add that stuff in here

2292
02:15:08,479 --> 02:15:11,169
right

2293
02:15:25,500 --> 02:15:35,170
how large a world does the float

2294
02:15:27,520 --> 02:15:37,600
precision allow in this case do you mean

2295
02:15:35,170 --> 02:15:40,690
how large of a world does the float

2296
02:15:37,600 --> 02:15:42,730
precision allow in handmade hero in

2297
02:15:40,689 --> 02:15:44,819
general we don't have any float

2298
02:15:42,729 --> 02:15:47,979
precision problems in handmade hero so

2299
02:15:44,819 --> 02:15:49,630
they wouldn't be the limiting factor the

2300
02:15:47,979 --> 02:15:54,399
limiting factor would be the fact that

2301
02:15:49,630 --> 02:15:57,940
we use a 32-bit XYZ index for our

2302
02:15:54,399 --> 02:16:00,899
spatial partition so the limiting size

2303
02:15:57,939 --> 02:16:08,079
of the world is actually that not floats

2304
02:16:00,899 --> 02:16:15,488
so if you go look at this part here the

2305
02:16:08,079 --> 02:16:17,800
chunk size which you can set I'm sad to

2306
02:16:15,488 --> 02:16:21,159
say I don't actually remember what that

2307
02:16:17,800 --> 02:16:25,750
is chunked in in meters so let's take a

2308
02:16:21,159 --> 02:16:29,349
break point there and I'll tell you so

2309
02:16:25,750 --> 02:16:31,539
if we took a look at the worlds and we

2310
02:16:29,350 --> 02:16:40,179
look at the chunk dim in meters

2311
02:16:31,539 --> 02:16:42,388
here it is why is there an an how is our

2312
02:16:40,179 --> 02:16:44,829
code even working if there's a man Oh

2313
02:16:42,388 --> 02:16:47,489
duh because we can't

2314
02:16:44,829 --> 02:16:50,679
as always you can't inspect anything

2315
02:16:47,489 --> 02:16:53,218
when you're in a release build let's try

2316
02:16:50,679 --> 02:16:53,219
that one more time

2317
02:16:56,409 --> 02:17:02,800
so yeah so if we look at what the chunk

2318
02:17:00,671 --> 02:17:07,239
diamond is the meters here it is right

2319
02:17:02,800 --> 02:17:12,389
and so if we multiply those out by the

2320
02:17:07,239 --> 02:17:14,860
s32 maximum figure you're talking about

2321
02:17:12,389 --> 02:17:16,840
either 2 or 4 billion depending how you

2322
02:17:14,860 --> 02:17:21,370
want to look at it let's say that on the

2323
02:17:16,841 --> 02:17:25,381
low-end 2 billion so we would be talking

2324
02:17:21,370 --> 02:17:36,400
about something like 46 billion meters

2325
02:17:25,380 --> 02:17:40,510
would be the span there so 46 million

2326
02:17:36,399 --> 02:17:45,040
kilometers by 24 million kilometers by

2327
02:17:40,510 --> 02:17:50,770
10 million kilometers would be the world

2328
02:17:45,040 --> 02:17:54,069
size so it's it's impossibly huge I mean

2329
02:17:50,770 --> 02:17:57,131
you could if you started hopping in one

2330
02:17:54,069 --> 02:17:58,960
direction for the rest of your life even

2331
02:17:57,130 --> 02:18:00,399
if you were the oldest living human and

2332
02:17:58,960 --> 02:18:05,889
you started when you were zero you'd

2333
02:18:00,399 --> 02:18:07,389
know you'd never get there right I mean

2334
02:18:05,889 --> 02:18:09,510
it's bigger than way bigger than the

2335
02:18:07,389 --> 02:18:09,510
earth

2336
02:18:13,920 --> 02:18:19,079
the assertion that we didn't find was a

2337
02:18:16,679 --> 02:18:20,519
dude debug table assertion assert macro

2338
02:18:19,079 --> 02:18:22,500
and side record work oh okay

2339
02:18:20,519 --> 02:18:25,769
can't put a message box insert marriage

2340
02:18:22,500 --> 02:18:28,468
- kind of story easily no not really

2341
02:18:25,769 --> 02:18:36,988
heard about posits better precision and

2342
02:18:28,468 --> 02:18:38,579
faster than normal floats Oh I sort of

2343
02:18:36,988 --> 02:18:40,138
heard of those but I haven't actually

2344
02:18:38,579 --> 02:18:47,609
looked at them I don't know how legit

2345
02:18:40,138 --> 02:18:50,339
they are right like I would have to wait

2346
02:18:47,609 --> 02:18:52,199
till people who I who know more

2347
02:18:50,340 --> 02:18:54,658
numerical analysis than I do said they

2348
02:18:52,199 --> 02:19:00,779
were good so I haven't looked at them

2349
02:18:54,658 --> 02:19:02,459
but I had heard of them yeah at least I

2350
02:19:00,779 --> 02:19:04,199
think so maybe it's something else there

2351
02:19:02,459 --> 02:19:10,049
was sort of I remember this coming up

2352
02:19:04,199 --> 02:19:12,710
before but let me take a look maybe this

2353
02:19:10,049 --> 02:19:12,709
is a different thing

2354
02:19:43,600 --> 02:19:50,771
oh no so it's from 2017 yes so yes I did

2355
02:19:48,250 --> 02:19:54,790
sort of see this I had not really looked

2356
02:19:50,771 --> 02:19:57,221
at it and I don't know it's not my area

2357
02:19:54,790 --> 02:19:59,110
of expertise so whether or not it's like

2358
02:19:57,220 --> 02:20:02,129
a snake oily kind of thing or whether it

2359
02:19:59,110 --> 02:20:02,130
actually is good

2360
02:20:09,399 --> 02:20:12,760
you have time to explain on the zooming

2361
02:20:11,351 --> 02:20:15,220
towards the mouse position and how it

2362
02:20:12,760 --> 02:20:18,819
can be implemented I thought I went over

2363
02:20:15,219 --> 02:20:20,920
this I thought I literally went over

2364
02:20:18,819 --> 02:20:23,489
this last week didn't you ask me about

2365
02:20:20,920 --> 02:20:23,489
this last week

2366
02:20:41,380 --> 02:20:44,770
you have any advice and I'm sure the

2367
02:20:43,030 --> 02:20:47,110
uniqueness of UI element IDs in an

2368
02:20:44,771 --> 02:20:48,461
immediate mode UI in a setting in which

2369
02:20:47,110 --> 02:20:52,120
the number of elements changes from

2370
02:20:48,460 --> 02:20:55,449
frame to frame yeah so there's a lot of

2371
02:20:52,120 --> 02:20:59,381
ways you can do it but the way to think

2372
02:20:55,450 --> 02:21:04,421
about it is just first of all immediate

2373
02:20:59,380 --> 02:21:09,300
mode you eyes don't require this concept

2374
02:21:04,421 --> 02:21:11,711
a lot of people again like I don't know

2375
02:21:09,300 --> 02:21:13,540
I've never taken the time to really

2376
02:21:11,710 --> 02:21:15,220
explain everything you should probably

2377
02:21:13,540 --> 02:21:17,590
know if you want to know how to do

2378
02:21:15,220 --> 02:21:19,779
immediate mode gooeys and it people

2379
02:21:17,591 --> 02:21:25,331
managed to get so tangled up in knots

2380
02:21:19,780 --> 02:21:28,751
it's nuts but assuming because they're

2381
02:21:25,331 --> 02:21:31,149
two separate concepts there's the

2382
02:21:28,751 --> 02:21:33,610
concept that you don't want to store

2383
02:21:31,149 --> 02:21:38,081
information on the client-side about

2384
02:21:33,610 --> 02:21:40,001
particular elements in which case you

2385
02:21:38,081 --> 02:21:43,720
need a way to generate IDs without

2386
02:21:40,001 --> 02:21:44,979
storage right that's just a separate

2387
02:21:43,720 --> 02:21:46,511
algorithm that has nothing to do with

2388
02:21:44,979 --> 02:21:47,800
the immediate mode you can still do

2389
02:21:46,511 --> 02:21:49,931
immediate mode where you actually

2390
02:21:47,800 --> 02:21:53,710
remember labels for things right

2391
02:21:49,931 --> 02:21:56,021
that's totally a thing you can do so I

2392
02:21:53,710 --> 02:21:58,989
could store the labels on my side and

2393
02:21:56,021 --> 02:22:00,489
just send them down to the system and

2394
02:21:58,989 --> 02:22:02,380
say this is the label I want you to use

2395
02:22:00,489 --> 02:22:05,021
and I'm allocating labels on my side

2396
02:22:02,380 --> 02:22:08,229
that's still immediate mode right the

2397
02:22:05,021 --> 02:22:14,891
point is just the library isn't the one

2398
02:22:08,229 --> 02:22:17,261
telling you what they are right but it

2399
02:22:14,890 --> 02:22:19,600
is a valuable thing to understand how to

2400
02:22:17,261 --> 02:22:22,120
generate ideas for things in ways that

2401
02:22:19,601 --> 02:22:23,711
allow you to not have to store them

2402
02:22:22,120 --> 02:22:26,051
because that's just sometimes more

2403
02:22:23,710 --> 02:22:28,449
efficient and makes for easier code to

2404
02:22:26,050 --> 02:22:30,399
not to do that and so the way to think

2405
02:22:28,450 --> 02:22:33,940
about it is to think about traces

2406
02:22:30,399 --> 02:22:36,369
through your code path right and you

2407
02:22:33,940 --> 02:22:39,181
need to think about when I go through a

2408
02:22:36,370 --> 02:22:42,041
particular code path how can I identify

2409
02:22:39,181 --> 02:22:44,711
items that I'm visiting in a way that's

2410
02:22:42,040 --> 02:22:47,500
unique and oftentimes with that boils

2411
02:22:44,710 --> 02:22:50,229
down to is bundling two IDs together

2412
02:22:47,501 --> 02:22:52,001
which I often will do so for example you

2413
02:22:50,229 --> 02:22:55,118
may have a situation where you say well

2414
02:22:52,001 --> 02:22:58,869
okay I've got like

2415
02:22:55,119 --> 02:23:00,879
you know this list of things and I could

2416
02:22:58,869 --> 02:23:02,609
use the like pointer to where I'm

2417
02:23:00,879 --> 02:23:07,020
storing them in memory as a unique ID

2418
02:23:02,609 --> 02:23:08,890
but I've got two separate times I'm

2419
02:23:07,020 --> 02:23:11,890
displaying them in two different places

2420
02:23:08,889 --> 02:23:13,930
and they're different UI elements so

2421
02:23:11,889 --> 02:23:15,698
what I typically do in that case is I

2422
02:23:13,930 --> 02:23:17,529
just bundle two ideas together the ID

2423
02:23:15,699 --> 02:23:20,588
the pointer is part of the ID and the

2424
02:23:17,529 --> 02:23:21,939
other part is like some ID for the code

2425
02:23:20,588 --> 02:23:24,189
change it could even be a pointer to the

2426
02:23:21,939 --> 02:23:25,779
function that is the route through this

2427
02:23:24,189 --> 02:23:29,918
thing right or whatever else you want

2428
02:23:25,779 --> 02:23:34,539
and so typically what I do is I use some

2429
02:23:29,918 --> 02:23:35,828
kind of a trace like that and it doesn't

2430
02:23:34,539 --> 02:23:38,560
really have a name because no one's

2431
02:23:35,828 --> 02:23:39,939
created a name I probably should have

2432
02:23:38,559 --> 02:23:43,148
created a name for it because I created

2433
02:23:39,939 --> 02:23:45,100
the name for immediate mode GUI but I

2434
02:23:43,148 --> 02:23:48,088
just never created a name for what that

2435
02:23:45,100 --> 02:23:51,539
is called but it's basically a unique

2436
02:23:48,088 --> 02:23:53,859
trace through the code path that says

2437
02:23:51,539 --> 02:23:55,569
you know something about a particular

2438
02:23:53,859 --> 02:23:57,010
location that you don't want to have to

2439
02:23:55,568 --> 02:23:58,448
store and there's lots of ways you can

2440
02:23:57,010 --> 02:24:00,760
do it but basically bundling is the

2441
02:23:58,449 --> 02:24:02,020
biggest one combine multiple ideas

2442
02:24:00,760 --> 02:24:04,289
together to create something that's

2443
02:24:02,020 --> 02:24:04,289
unique

2444
02:24:13,978 --> 02:24:17,170
it's the most effective way of testing

2445
02:24:16,059 --> 02:24:18,549
code I come from web development

2446
02:24:17,170 --> 02:24:19,960
background and there's a very heavy

2447
02:24:18,549 --> 02:24:22,059
focus on unit testing and test-driven

2448
02:24:19,959 --> 02:24:23,379
development I'm not sold on the dogma of

2449
02:24:22,059 --> 02:24:24,579
that and I don't think it's really used

2450
02:24:23,379 --> 02:24:26,759
in game development which makes me

2451
02:24:24,579 --> 02:24:29,469
curious as to how you do test and game

2452
02:24:26,760 --> 02:24:31,779
development effectively um you might

2453
02:24:29,469 --> 02:24:33,340
want to take a look I've sort of talked

2454
02:24:31,779 --> 02:24:34,930
about this like many many many times

2455
02:24:33,340 --> 02:24:37,870
before so you might want to just go

2456
02:24:34,930 --> 02:24:39,609
watch like an existing one rather than

2457
02:24:37,870 --> 02:24:43,680
me repeating myself if you just go down

2458
02:24:39,609 --> 02:24:46,510
here and type in test-driven development

2459
02:24:43,680 --> 02:24:50,609
you can see some answers that I already

2460
02:24:46,510 --> 02:24:52,590
have that you can see if those sort of

2461
02:24:50,609 --> 02:24:56,470
answer it for you

2462
02:24:52,590 --> 02:25:00,250
the broad-stroke version of it once

2463
02:24:56,469 --> 02:25:01,510
again is just that testing is just like

2464
02:25:00,250 --> 02:25:04,238
any other kind of development

2465
02:25:01,510 --> 02:25:08,020
it's basically a trade off like

2466
02:25:04,238 --> 02:25:09,670
everything else of time versus results

2467
02:25:08,020 --> 02:25:11,220
literally everything you do in

2468
02:25:09,670 --> 02:25:13,988
programming can be stated this way

2469
02:25:11,219 --> 02:25:16,329
testing is just another thing and so

2470
02:25:13,988 --> 02:25:19,059
like everything else at anytime whether

2471
02:25:16,329 --> 02:25:20,978
you're on games or web or anything what

2472
02:25:19,059 --> 02:25:22,389
you should be asking yourself and what

2473
02:25:20,978 --> 02:25:24,789
almost no one does but what you should

2474
02:25:22,389 --> 02:25:28,869
be asking yourself is can I save

2475
02:25:24,790 --> 02:25:32,350
development time in toto by writing

2476
02:25:28,870 --> 02:25:34,649
tests or by not writing tests and that's

2477
02:25:32,350 --> 02:25:38,079
always the thing you should be doing

2478
02:25:34,648 --> 02:25:41,289
some systems it is very clear that you

2479
02:25:38,079 --> 02:25:44,109
could save a lot of headaches by writing

2480
02:25:41,290 --> 02:25:45,819
some tests to bulletproof them because a

2481
02:25:44,109 --> 02:25:47,738
the test could be easy and

2482
02:25:45,818 --> 02:25:49,148
straightforward to write B they would

2483
02:25:47,738 --> 02:25:52,209
have good coverage on what you actually

2484
02:25:49,148 --> 02:25:53,680
need and C the system is subtle so tests

2485
02:25:52,209 --> 02:25:56,858
are likely to find bugs you couldn't

2486
02:25:53,680 --> 02:25:58,180
find easily any other way right that's a

2487
02:25:56,859 --> 02:26:01,510
system that should have a test written

2488
02:25:58,180 --> 02:26:04,180
for it another system like the user

2489
02:26:01,510 --> 02:26:05,710
input handling in a game forget it how

2490
02:26:04,180 --> 02:26:09,100
are you ever gonna write testing for it

2491
02:26:05,709 --> 02:26:10,478
it's never gonna happen right so unit

2492
02:26:09,100 --> 02:26:13,149
testing is completely out of the

2493
02:26:10,478 --> 02:26:14,858
question but sometimes you may be able

2494
02:26:13,148 --> 02:26:16,510
to find other ways of testing the code

2495
02:26:14,859 --> 02:26:18,880
creatively so for example one things we

2496
02:26:16,510 --> 02:26:21,309
do in game element is we do randomized

2497
02:26:18,879 --> 02:26:22,509
user interpret it user input testing so

2498
02:26:21,309 --> 02:26:24,609
at least we can find out if the code

2499
02:26:22,510 --> 02:26:27,398
crashes or gets to unusual States we get

2500
02:26:24,609 --> 02:26:30,340
a speed random input to it right and may

2501
02:26:27,398 --> 02:26:31,988
you'd find something in the future we'll

2502
02:26:30,340 --> 02:26:34,209
probably have AI driven

2503
02:26:31,988 --> 02:26:36,368
input testing right where we may be

2504
02:26:34,209 --> 02:26:38,619
trained a eyes on things that players do

2505
02:26:36,369 --> 02:26:43,239
somehow and then run it and see what

2506
02:26:38,619 --> 02:26:45,100
happens right so you know there's other

2507
02:26:43,238 --> 02:26:47,139
ways of testing but the most crucial

2508
02:26:45,100 --> 02:26:49,119
thing to ask yourself anytime any any

2509
02:26:47,139 --> 02:26:50,889
time it's just is this saving time

2510
02:26:49,119 --> 02:26:52,300
because if actually what's ending it

2511
02:26:50,889 --> 02:26:54,309
happening is you're writing tests and

2512
02:26:52,299 --> 02:26:56,648
writing the test is taking a lot longer

2513
02:26:54,309 --> 02:26:58,898
and not finding enough bugs then if you

2514
02:26:56,648 --> 02:27:02,038
just haven't done the testing then

2515
02:26:58,898 --> 02:27:05,680
you're actually making a worse product

2516
02:27:02,039 --> 02:27:08,140
period that's not even arguable that's

2517
02:27:05,680 --> 02:27:10,720
just true right if you could have spent

2518
02:27:08,139 --> 02:27:12,578
that time making more features or doing

2519
02:27:10,719 --> 02:27:14,469
other kinds of debugging that would have

2520
02:27:12,578 --> 02:27:17,020
found more bugs than the testing found

2521
02:27:14,469 --> 02:27:19,538
you are literally making a worse product

2522
02:27:17,020 --> 02:27:21,789
so dog was always bad because what it

2523
02:27:19,539 --> 02:27:24,220
does what Dogma does is it gets rid of

2524
02:27:21,789 --> 02:27:26,409
the reason why you did something right

2525
02:27:24,219 --> 02:27:29,198
and so you always have to remember the

2526
02:27:26,408 --> 02:27:31,449
reason why you write a test is because

2527
02:27:29,199 --> 02:27:34,149
you think it will help you find bugs you

2528
02:27:31,449 --> 02:27:38,078
either a couldn't have found or B would

2529
02:27:34,148 --> 02:27:41,858
have taken you longer to find write you

2530
02:27:38,078 --> 02:27:43,658
know that so apply that logic every time

2531
02:27:41,859 --> 02:27:49,418
don't just write the test think is that

2532
02:27:43,658 --> 02:27:50,708
going to happen here yes or no right so

2533
02:27:49,418 --> 02:27:52,568
the reason that we don't do a lot of

2534
02:27:50,709 --> 02:27:54,010
unit testing gaming usually is because

2535
02:27:52,568 --> 02:27:56,528
the systems are too dynamic and the

2536
02:27:54,010 --> 02:27:59,380
output is not well-defined is this

2537
02:27:56,529 --> 02:28:01,988
particle system working properly I don't

2538
02:27:59,379 --> 02:28:04,238
know did it look good right so one of

2539
02:28:01,988 --> 02:28:06,279
the reasons that we oftentimes have to

2540
02:28:04,238 --> 02:28:09,279
do a lot less unit testing than maybe

2541
02:28:06,279 --> 02:28:11,168
even we would like to do because maybe I

2542
02:28:09,279 --> 02:28:13,539
would like more unit testing to be sure

2543
02:28:11,168 --> 02:28:16,809
that something's working we just don't

2544
02:28:13,539 --> 02:28:23,470
have a lot we can test right that's kind

2545
02:28:16,809 --> 02:28:26,168
of the the real data right and so I

2546
02:28:23,469 --> 02:28:27,488
think that's the that's the real

2547
02:28:26,168 --> 02:28:31,328
difference is it in the web world

2548
02:28:27,488 --> 02:28:34,958
sometimes you can forget that that's a

2549
02:28:31,328 --> 02:28:36,458
very simplified problem space where you

2550
02:28:34,959 --> 02:28:39,130
know you have really clearly defined

2551
02:28:36,459 --> 02:28:41,320
inputs and outputs a lot of time and so

2552
02:28:39,129 --> 02:28:43,629
that testing you can do

2553
02:28:41,319 --> 02:28:45,250
in the game world it's really hard to do

2554
02:28:43,629 --> 02:28:50,649
testing because typically the actual

2555
02:28:45,250 --> 02:28:52,209
output is ill-defined right and so the

2556
02:28:50,649 --> 02:28:53,949
things we typically end up doing unit

2557
02:28:52,209 --> 02:28:56,680
testing for to the extent we do them are

2558
02:28:53,950 --> 02:29:02,620
really low-level things maybe the memory

2559
02:28:56,681 --> 02:29:07,420
allocator sine and cosine outputs you

2560
02:29:02,620 --> 02:29:09,641
know do they handle the range basic

2561
02:29:07,420 --> 02:29:11,261
graphics operations does blit work

2562
02:29:09,640 --> 02:29:15,220
properly and produce the right things

2563
02:29:11,261 --> 02:29:17,521
when we give it known inputs right stuff

2564
02:29:15,220 --> 02:29:17,520
like that

2565
02:29:30,969 --> 02:29:34,000
you said last week that you explained

2566
02:29:32,530 --> 02:29:40,630
the zooming towards the mouse point on

2567
02:29:34,000 --> 02:29:47,500
the whiteboard I did say that I didn't

2568
02:29:40,629 --> 02:29:49,599
mean to say that I guess I'm just not

2569
02:29:47,500 --> 02:29:52,389
sure how to explain it in any way other

2570
02:29:49,600 --> 02:30:01,200
than what I already explained just in

2571
02:29:52,389 --> 02:30:03,608
terms of so I mean I I even just

2572
02:30:01,200 --> 02:30:05,920
literally just said it even earlier on

2573
02:30:03,609 --> 02:30:13,870
the stream I guess so I don't know I can

2574
02:30:05,920 --> 02:30:15,370
try to give you a rehash of this but I

2575
02:30:13,870 --> 02:30:16,990
would really say what you wanna do is go

2576
02:30:15,370 --> 02:30:18,910
back and watch earlier episodes of

2577
02:30:16,989 --> 02:30:22,180
Hannah here when we talk about this sort

2578
02:30:18,909 --> 02:30:28,228
of stuff so let's just talk about a

2579
02:30:22,180 --> 02:30:35,229
basic operation okay I have a function

2580
02:30:28,228 --> 02:30:38,739
called stretch right and I'm not call it

2581
02:30:35,228 --> 02:30:42,929
and let's say that this function allows

2582
02:30:38,739 --> 02:30:50,500
me to supply to it as parameters a

2583
02:30:42,930 --> 02:30:55,210
p-value which is the minimum corner and

2584
02:30:50,500 --> 02:30:57,370
an S value that is the scale okay that's

2585
02:30:55,209 --> 02:31:04,889
what I'm gonna do and these are

2586
02:30:57,370 --> 02:31:11,350
interpreted as drawing a shape that

2587
02:31:04,889 --> 02:31:18,159
starts at P right and goes to s times

2588
02:31:11,350 --> 02:31:20,950
width this way and s times height this

2589
02:31:18,159 --> 02:31:24,609
way okay that's a image scaling

2590
02:31:20,950 --> 02:31:26,859
operation like you were talking about so

2591
02:31:24,609 --> 02:31:28,568
fundamentally I have some origin and a

2592
02:31:26,859 --> 02:31:31,479
coordinate system over here right and

2593
02:31:28,568 --> 02:31:33,549
we're talking about drawing stretching

2594
02:31:31,478 --> 02:31:35,799
an image and I've got a function that's

2595
02:31:33,549 --> 02:31:37,989
going to do that I'm gonna pass it these

2596
02:31:35,799 --> 02:31:39,709
two values I have a width and a height

2597
02:31:37,989 --> 02:31:42,318
of an image that I'm drawn

2598
02:31:39,709 --> 02:31:45,198
and that's known but I'm gonna supply

2599
02:31:42,318 --> 02:31:51,398
the s and the P to like place this thing

2600
02:31:45,199 --> 02:31:55,520
somewhere and scale it right makes sense

2601
02:31:51,398 --> 02:31:58,068
so what you're asking and how I'm what

2602
02:31:55,520 --> 02:32:02,079
I'm assuming you're asking is like okay

2603
02:31:58,068 --> 02:32:04,879
so the user like flicks the mouse wheel

2604
02:32:02,079 --> 02:32:08,629
okay and I've got something in my code

2605
02:32:04,879 --> 02:32:11,238
that's like alright s plus equals some

2606
02:32:08,629 --> 02:32:13,728
map you know mouse wheel or something

2607
02:32:11,238 --> 02:32:18,139
right like something here you know DD

2608
02:32:13,728 --> 02:32:20,389
mouse wheel DT right x times time or

2609
02:32:18,139 --> 02:32:23,318
times the times the wheel Delta I don't

2610
02:32:20,389 --> 02:32:26,119
know right this is what you're asking I

2611
02:32:23,318 --> 02:32:28,609
you know I've I've increased my scale

2612
02:32:26,120 --> 02:32:31,960
value and so then what I see on the

2613
02:32:28,609 --> 02:32:35,510
screen is this thing gets larger right

2614
02:32:31,959 --> 02:32:39,049
but the mouse cursor was like here and

2615
02:32:35,510 --> 02:32:41,870
it always gets larger around this base

2616
02:32:39,049 --> 02:32:44,869
point let's say instead of around this

2617
02:32:41,870 --> 02:32:46,520
point here and what I want is I want if

2618
02:32:44,870 --> 02:32:48,410
this was where the mouse cursor is I

2619
02:32:46,520 --> 02:32:50,120
want it to get larger around this point

2620
02:32:48,409 --> 02:32:51,409
so it should actually expand outward

2621
02:32:50,120 --> 02:32:52,970
that way as well instead of just

2622
02:32:51,409 --> 02:32:55,600
expanding outward this way this is what

2623
02:32:52,969 --> 02:32:55,599
we're talking about

2624
02:33:04,250 --> 02:33:11,270
is that what we're talking about okay so

2625
02:33:08,540 --> 02:33:14,569
again just write the math of what you

2626
02:33:11,270 --> 02:33:19,040
want first and see what you can see from

2627
02:33:14,568 --> 02:33:21,738
that so let's start with our state

2628
02:33:19,040 --> 02:33:24,649
change we are going from one state to

2629
02:33:21,738 --> 02:33:26,539
another right we effectively like I said

2630
02:33:24,648 --> 02:33:32,090
before we have an N minus 1 so I'm gonna

2631
02:33:26,540 --> 02:33:35,000
label these we have frame and minus 1

2632
02:33:32,090 --> 02:33:37,279
I'm gonna call that a ok

2633
02:33:35,000 --> 02:33:41,329
we are going to apply the mouse wheel

2634
02:33:37,279 --> 02:33:43,729
and that puts us on frame N and I'm

2635
02:33:41,329 --> 02:33:45,469
gonna call that B so fundamentally what

2636
02:33:43,728 --> 02:33:48,608
we're talking about here is a transition

2637
02:33:45,469 --> 02:33:52,778
from A to B we're saying our s is fixed

2638
02:33:48,609 --> 02:33:56,750
so somebody you sin thues iasts is

2639
02:33:52,779 --> 02:34:02,109
changing the S value and so our entire

2640
02:33:56,750 --> 02:34:04,430
responsibility here right is moving P

2641
02:34:02,109 --> 02:34:06,380
that's all we have to do we just have to

2642
02:34:04,430 --> 02:34:09,439
figure out how do we move P because

2643
02:34:06,379 --> 02:34:11,089
that's the only thing we can do right we

2644
02:34:09,439 --> 02:34:13,189
don't we have no control over anything

2645
02:34:11,090 --> 02:34:15,139
else the scale is now what the scale is

2646
02:34:13,189 --> 02:34:17,898
based on the mouse wheel equation that

2647
02:34:15,139 --> 02:34:20,689
you've written whatever it is and so now

2648
02:34:17,898 --> 02:34:22,219
we need to know how do we change P to

2649
02:34:20,689 --> 02:34:24,170
put this in the correct location sucked

2650
02:34:22,219 --> 02:34:29,199
at this point up here is fixed to the

2651
02:34:24,170 --> 02:34:32,148
viewer right that's what we're doing so

2652
02:34:29,200 --> 02:34:35,210
we fundamentally have a situation where

2653
02:34:32,148 --> 02:34:40,189
here's all the variables we have we have

2654
02:34:35,209 --> 02:34:49,549
P a right this is the location of the

2655
02:34:40,189 --> 02:34:56,930
blit you know on a we have P B the

2656
02:34:49,549 --> 02:35:00,769
location on B right we have s a this is

2657
02:34:56,930 --> 02:35:04,340
the old scale and we have s B this is

2658
02:35:00,770 --> 02:35:08,200
the new scale right I should just call

2659
02:35:04,340 --> 02:35:08,200
this old and new but you get it

2660
02:35:09,279 --> 02:35:16,460
right this these are our parameters and

2661
02:35:13,329 --> 02:35:17,568
furthermore we know width and height so

2662
02:35:16,459 --> 02:35:25,608
we know the width and height of the

2663
02:35:17,568 --> 02:35:27,769
image right and we know Mouse we know

2664
02:35:25,609 --> 02:35:39,109
the mouse position right so we know like

2665
02:35:27,770 --> 02:35:41,359
m right okay so Mouse position doesn't

2666
02:35:39,109 --> 02:35:46,729
change image dim doesn't change these

2667
02:35:41,359 --> 02:35:49,729
are given and they're constant right so

2668
02:35:46,728 --> 02:35:51,799
we just these are just like numbers they

2669
02:35:49,728 --> 02:35:54,049
don't have any relationship to anything

2670
02:35:51,799 --> 02:35:55,759
we need to solve for or care about

2671
02:35:54,049 --> 02:35:57,829
they're just gonna be constants that

2672
02:35:55,760 --> 02:35:59,180
feed in they don't change over the

2673
02:35:57,829 --> 02:36:01,609
course of the two frames that we're

2674
02:35:59,180 --> 02:36:05,500
talking about here and they are just

2675
02:36:01,609 --> 02:36:09,649
values we know we're given them right

2676
02:36:05,500 --> 02:36:14,359
okay the same effectively in a sense is

2677
02:36:09,648 --> 02:36:16,608
true for these right they're not

2678
02:36:14,359 --> 02:36:19,279
constant in a sense they change but

2679
02:36:16,609 --> 02:36:21,529
we're these are all given so this is our

2680
02:36:19,279 --> 02:36:23,569
only unknown this is the only thing

2681
02:36:21,529 --> 02:36:25,579
we're trying to figure out is PB we have

2682
02:36:23,568 --> 02:36:28,519
all the rest of the information is being

2683
02:36:25,579 --> 02:36:30,469
given to us right that's a good

2684
02:36:28,520 --> 02:36:33,560
situation being we have one little tiny

2685
02:36:30,469 --> 02:36:35,000
thing that we want to know all right so

2686
02:36:33,559 --> 02:36:37,760
let's write out the math for what we

2687
02:36:35,000 --> 02:36:43,100
want we're looking at the screen this is

2688
02:36:37,760 --> 02:36:48,200
our screen space right and what we want

2689
02:36:43,100 --> 02:36:52,130
is we want to produce a situation where

2690
02:36:48,200 --> 02:36:54,319
our PA which is here and our PB which is

2691
02:36:52,129 --> 02:37:00,750
some fictional point after the scaling

2692
02:36:54,318 --> 02:37:03,778
right whatever it is

2693
02:37:00,750 --> 02:37:08,459
we want to produce a situation where the

2694
02:37:03,779 --> 02:37:13,859
mouse point maps to the same location in

2695
02:37:08,459 --> 02:37:15,169
the image in both cases right makes

2696
02:37:13,859 --> 02:37:18,689
sense

2697
02:37:15,170 --> 02:37:22,200
so another way to say that would be the

2698
02:37:18,689 --> 02:37:25,950
offset from the mouse 2p should be

2699
02:37:22,200 --> 02:37:29,609
exactly the same both times except for

2700
02:37:25,950 --> 02:37:33,120
obviously the scale will change right

2701
02:37:29,609 --> 02:37:34,800
because we're scaling it up and down so

2702
02:37:33,120 --> 02:37:36,720
we could write out the entire equation

2703
02:37:34,799 --> 02:37:38,219
from mapping this into the image face

2704
02:37:36,719 --> 02:37:40,318
and back but we can probably

2705
02:37:38,219 --> 02:37:44,488
short-circuit that process by just

2706
02:37:40,318 --> 02:37:46,949
saying well whatever this mouse point

2707
02:37:44,488 --> 02:37:49,199
here is since I know what it is I can

2708
02:37:46,950 --> 02:37:52,950
produce this arm here for the mouse

2709
02:37:49,200 --> 02:37:55,319
cursor point and say that the point P is

2710
02:37:52,950 --> 02:37:59,870
just going to be whatever the opposite

2711
02:37:55,318 --> 02:38:02,879
direction of that was this value here if

2712
02:37:59,870 --> 02:38:04,829
I want to produce the new offset from

2713
02:38:02,879 --> 02:38:06,929
the mouse location to where P should be

2714
02:38:04,829 --> 02:38:10,559
it should be directly related to this

2715
02:38:06,930 --> 02:38:12,210
scale right so the first thing I'm

2716
02:38:10,559 --> 02:38:14,129
tempted to do to simplify the problem

2717
02:38:12,209 --> 02:38:15,568
down rather than half the map because I

2718
02:38:14,129 --> 02:38:17,969
could write the equations to map it

2719
02:38:15,568 --> 02:38:19,789
which would be the 100% math way to do

2720
02:38:17,969 --> 02:38:22,108
it and maybe we'll do that second but

2721
02:38:19,790 --> 02:38:23,819
what I would like to do here is just say

2722
02:38:22,109 --> 02:38:29,460
let's change the problem to just be

2723
02:38:23,818 --> 02:38:32,879
written around M right so let's do that

2724
02:38:29,459 --> 02:38:38,938
so the first thing we would say is P of

2725
02:38:32,879 --> 02:38:42,778
a right which we know is which is this

2726
02:38:38,939 --> 02:38:47,029
this point here we want to write that in

2727
02:38:42,779 --> 02:38:50,220
terms of M so we have this new sort of

2728
02:38:47,029 --> 02:38:54,420
value which I guess I'll call P maybe

2729
02:38:50,219 --> 02:38:57,449
I'll call it P Pam pa in mouse space

2730
02:38:54,420 --> 02:39:02,340
right that's going to be equal to

2731
02:38:57,450 --> 02:39:07,271
whatever PA is - my mouse location right

2732
02:39:02,340 --> 02:39:09,101
and so that's this vector here

2733
02:39:07,271 --> 02:39:10,780
and now I'm saying that I want to center

2734
02:39:09,101 --> 02:39:13,360
around the map so I'm also gonna say

2735
02:39:10,780 --> 02:39:16,570
well we've got PBM and that's gonna be

2736
02:39:13,360 --> 02:39:19,391
PB - the mouse right and remember our

2737
02:39:16,569 --> 02:39:21,640
goal is to find this so since we know

2738
02:39:19,390 --> 02:39:26,859
this we could alternatively just find

2739
02:39:21,640 --> 02:39:29,409
this and we've got what we want right

2740
02:39:26,860 --> 02:39:31,391
because we can find the PB by just if we

2741
02:39:29,409 --> 02:39:35,140
solve for this we can just do this plus

2742
02:39:31,390 --> 02:39:37,989
M is PB right so we're talking about

2743
02:39:35,140 --> 02:39:39,670
these two offsets and what we want to do

2744
02:39:37,989 --> 02:39:44,739
now this is known this we can just

2745
02:39:39,670 --> 02:39:46,840
compute right what we want to do is find

2746
02:39:44,739 --> 02:39:50,619
this because this is known and if we

2747
02:39:46,840 --> 02:39:52,810
know that then this becomes trivial okay

2748
02:39:50,620 --> 02:39:56,021
so how would we do that well since we

2749
02:39:52,810 --> 02:40:03,060
know what this is right we know PA minus

2750
02:39:56,021 --> 02:40:06,760
M we know that for our given scale right

2751
02:40:03,060 --> 02:40:10,181
that we started with si right we know

2752
02:40:06,760 --> 02:40:12,310
that this is some distance into the

2753
02:40:10,181 --> 02:40:17,110
image whatever that would have been at a

2754
02:40:12,310 --> 02:40:18,670
unit scale times that scale right I'm

2755
02:40:17,110 --> 02:40:24,909
not sure if I'm saying that particularly

2756
02:40:18,670 --> 02:40:28,120
clearly but it draw it here again so we

2757
02:40:24,909 --> 02:40:31,149
know that if this is the mouse the mouse

2758
02:40:28,120 --> 02:40:35,079
cursor location right inside my image

2759
02:40:31,149 --> 02:40:38,079
and this is the the base value where

2760
02:40:35,079 --> 02:40:42,640
we're doing our blit then we know that

2761
02:40:38,079 --> 02:40:45,851
this vector here is this if this were

2762
02:40:42,640 --> 02:40:49,720
width and height the normal amount not

2763
02:40:45,851 --> 02:40:52,989
scaled by anything right then if I apply

2764
02:40:49,720 --> 02:40:56,500
a scale to this I would also apply the

2765
02:40:52,989 --> 02:41:02,110
scale to this right so whatever the

2766
02:40:56,500 --> 02:41:05,560
scale amount is I know that my P am

2767
02:41:02,110 --> 02:41:09,989
value right my PA m value is effectively

2768
02:41:05,560 --> 02:41:12,549
equal to my scale value right tying some

2769
02:41:09,989 --> 02:41:14,649
original vector that would have been the

2770
02:41:12,549 --> 02:41:17,319
size of this vector had we not scaled it

2771
02:41:14,649 --> 02:41:21,898
so at unit scale right so effectively

2772
02:41:17,319 --> 02:41:26,369
the P unit Mouse right

2773
02:41:21,898 --> 02:41:30,608
does that make sense and we know that

2774
02:41:26,370 --> 02:41:33,010
PBM which is the new one that we're

2775
02:41:30,609 --> 02:41:34,300
talking about right that one and I'm

2776
02:41:33,010 --> 02:41:38,130
sorry I should have called this a

2777
02:41:34,299 --> 02:41:42,489
because this is the scale for a is

2778
02:41:38,129 --> 02:41:46,568
whatever this value is right times the B

2779
02:41:42,489 --> 02:41:50,139
scale so I know that effectively P a.m.

2780
02:41:46,568 --> 02:41:52,648
is sa P um and I know that BM is SB p um

2781
02:41:50,139 --> 02:42:03,719
right

2782
02:41:52,648 --> 02:42:03,719
are you with me so far I'm asking

2783
02:42:07,299 --> 02:42:15,818
okay so I know that my mouse offset can

2784
02:42:13,209 --> 02:42:17,618
be represented as some offset from

2785
02:42:15,818 --> 02:42:18,939
something I don't even know and this was

2786
02:42:17,619 --> 02:42:20,800
the part I was saying is I'm gonna take

2787
02:42:18,939 --> 02:42:22,389
a shortcut I could have written the

2788
02:42:20,799 --> 02:42:23,618
equation for that we could have tried

2789
02:42:22,389 --> 02:42:25,299
and solved it and gotten to this point

2790
02:42:23,619 --> 02:42:28,510
but I'm just pre getting to this point

2791
02:42:25,299 --> 02:42:31,028
and saying look I know that there was

2792
02:42:28,510 --> 02:42:34,148
some vector in the unscaled case if I

2793
02:42:31,029 --> 02:42:36,220
scale it by a I get a M if I scale it by

2794
02:42:34,148 --> 02:42:38,948
B I get B it what does this allow me to

2795
02:42:36,219 --> 02:42:41,828
do who cares well I can solve this now

2796
02:42:38,949 --> 02:42:44,560
right I can solve this in terms of BM

2797
02:42:41,828 --> 02:42:46,658
because I know si I know s B I know am

2798
02:42:44,559 --> 02:42:50,260
all I don't know is this a term that

2799
02:42:46,658 --> 02:42:53,199
appears in both of them so the heck with

2800
02:42:50,260 --> 02:42:56,078
it right let's just simplify this if I

2801
02:42:53,199 --> 02:42:58,750
take P am equals s AP um right I know

2802
02:42:56,078 --> 02:43:01,719
that equation I want to basically write

2803
02:42:58,750 --> 02:43:03,549
this BM equation in terms of SB I just

2804
02:43:01,719 --> 02:43:05,049
need something to substitute in here so

2805
02:43:03,549 --> 02:43:08,170
what I'm gonna do is solve this equation

2806
02:43:05,049 --> 02:43:14,198
for P um and then plug it in right so if

2807
02:43:08,170 --> 02:43:15,969
I do the divide right you said I did

2808
02:43:14,199 --> 02:43:19,750
that I just divided this out try the

2809
02:43:15,969 --> 02:43:22,599
scale out now I can plug in P um into

2810
02:43:19,750 --> 02:43:25,529
this equation so I get PBM equals SB

2811
02:43:22,600 --> 02:43:32,408
times this right here

2812
02:43:25,529 --> 02:43:34,810
pa m over si lo and behold right what I

2813
02:43:32,408 --> 02:43:37,238
get is an equation with no unknowns

2814
02:43:34,809 --> 02:43:45,760
anymore other than the one I wanted

2815
02:43:37,238 --> 02:43:48,459
right sb over si times P am right now

2816
02:43:45,760 --> 02:43:50,889
what is this look at that it's just the

2817
02:43:48,459 --> 02:43:52,738
scale factor that I applied right it's

2818
02:43:50,889 --> 02:43:58,599
just the change in scale

2819
02:43:52,738 --> 02:44:00,988
sb over si right is this the change in

2820
02:43:58,600 --> 02:44:00,988
scale

2821
02:44:02,931 --> 02:44:11,450
from A to B see I'm saying so all I have

2822
02:44:08,420 --> 02:44:13,761
to do to find this new vector is to just

2823
02:44:11,450 --> 02:44:17,061
multiply by the change in scale of the

2824
02:44:13,761 --> 02:44:20,780
one that I had already right that leads

2825
02:44:17,060 --> 02:44:23,539
us to a trivial update step all we have

2826
02:44:20,780 --> 02:44:25,790
to do is say all right I've got my mouse

2827
02:44:23,540 --> 02:44:29,200
right I know that that's a given

2828
02:44:25,790 --> 02:44:36,230
so all I have to do to update is say

2829
02:44:29,200 --> 02:44:40,659
take the P that I have produce P am by

2830
02:44:36,229 --> 02:44:43,850
saying P a which I know - my mouse right

2831
02:44:40,659 --> 02:44:47,450
assign this now I have this variable

2832
02:44:43,851 --> 02:44:51,230
right I need to know what my new P is so

2833
02:44:47,450 --> 02:44:54,440
let me compute that by taking SB over si

2834
02:44:51,229 --> 02:44:58,489
and multiplying it by my P am which I

2835
02:44:54,440 --> 02:45:00,560
now have right this is really simple

2836
02:44:58,489 --> 02:45:04,190
right the location I did the blip before

2837
02:45:00,560 --> 02:45:06,199
and the mouse cursor all I'm doing is

2838
02:45:04,190 --> 02:45:07,730
subtracting those two producing that

2839
02:45:06,200 --> 02:45:10,700
then I'm multiplying by the change of

2840
02:45:07,729 --> 02:45:14,659
scale that's my new one and so now where

2841
02:45:10,700 --> 02:45:17,181
will I draw my new blip where will the

2842
02:45:14,659 --> 02:45:19,550
new blit be well I have the equation for

2843
02:45:17,181 --> 02:45:27,230
PBM right all the way back up here it's

2844
02:45:19,550 --> 02:45:29,119
this so PB well PB M equals PB minus m

2845
02:45:27,229 --> 02:45:30,770
solve this equation for what I want

2846
02:45:29,120 --> 02:45:34,521
which is the location of the new blip

2847
02:45:30,771 --> 02:45:40,280
right location of the new blit just move

2848
02:45:34,521 --> 02:45:42,051
the M to the other side is that so

2849
02:45:40,280 --> 02:45:45,801
writing in the entire thing out we know

2850
02:45:42,050 --> 02:45:53,199
that the PBM is this right so writing

2851
02:45:45,800 --> 02:45:57,979
this out I have P B equals P B M plus M

2852
02:45:53,200 --> 02:45:59,659
right in this case so up here if I just

2853
02:45:57,979 --> 02:46:00,859
substitute B this entire thing in I can

2854
02:45:59,659 --> 02:46:02,119
make this equate just one equation

2855
02:46:00,860 --> 02:46:05,780
that's simple right

2856
02:46:02,120 --> 02:46:08,079
so my PBM is the change of scale times p

2857
02:46:05,780 --> 02:46:08,079
am

2858
02:46:09,120 --> 02:46:22,500
doing this here right make sense so the

2859
02:46:19,319 --> 02:46:26,398
new location is the change of scale

2860
02:46:22,500 --> 02:46:28,260
times the Delta that Delta vector plus

2861
02:46:26,398 --> 02:46:34,500
the mouse cursor I can keep going

2862
02:46:28,260 --> 02:46:43,880
what's P a.m. right let's P AM PM is PA

2863
02:46:34,500 --> 02:46:43,879
minus M right so put it in

2864
02:46:51,379 --> 02:46:56,879
make sense right I'm just substituting

2865
02:46:54,148 --> 02:47:04,829
PA em back into this equation that I had

2866
02:46:56,879 --> 02:47:12,299
before I may have gone too far but we'll

2867
02:47:04,829 --> 02:47:22,219
see so multiplying this out you get SB

2868
02:47:12,299 --> 02:47:22,219
over s a PA minus SB / SI m plus M

2869
02:47:27,800 --> 02:47:34,609
and so changing this variable so I can

2870
02:47:31,130 --> 02:47:39,831
do the subtract it would be si over si

2871
02:47:34,610 --> 02:47:54,591
right so that is going to be plus si

2872
02:47:39,831 --> 02:48:01,490
minus SB over a times M so looking at

2873
02:47:54,591 --> 02:48:05,031
what you've got I think I probably

2874
02:48:01,490 --> 02:48:06,890
wouldn't expand it out you can see some

2875
02:48:05,031 --> 02:48:09,291
intuition here potentially if the change

2876
02:48:06,890 --> 02:48:12,020
in scale you're gonna change in scale

2877
02:48:09,290 --> 02:48:15,100
the doublet location from last time

2878
02:48:12,021 --> 02:48:20,091
right and then you're gonna offset it by

2879
02:48:15,101 --> 02:48:23,541
the mouse location using the change in

2880
02:48:20,091 --> 02:48:26,091
the like inverse change in scale me and

2881
02:48:23,540 --> 02:48:31,460
I'm saying I probably wouldn't bother

2882
02:48:26,091 --> 02:48:38,990
right I would probably stick to this or

2883
02:48:31,460 --> 02:48:42,040
this right but that's that's what we're

2884
02:48:38,990 --> 02:48:42,040
doing does that help

2885
02:48:49,818 --> 02:48:54,299
and fundamentally speaking I mean I

2886
02:48:53,219 --> 02:48:56,278
don't know we'd have to go check my math

2887
02:48:54,299 --> 02:48:57,659
makes ready to make a mistake right I

2888
02:48:56,279 --> 02:49:02,790
mean because math is easy to make a

2889
02:48:57,659 --> 02:49:05,670
mistake but understand that process

2890
02:49:02,790 --> 02:49:07,020
right just you have to be willing to

2891
02:49:05,670 --> 02:49:08,728
write out the math because you know

2892
02:49:07,020 --> 02:49:09,899
fundamentally speaking the only thing

2893
02:49:08,728 --> 02:49:11,789
you can change is the location of the

2894
02:49:09,898 --> 02:49:14,159
blit so the question is how do I get

2895
02:49:11,790 --> 02:49:17,399
some map that tells me how the blit

2896
02:49:14,159 --> 02:49:20,369
location changes with respect to the

2897
02:49:17,398 --> 02:49:21,539
scale and since you're already telling

2898
02:49:20,370 --> 02:49:24,449
me you want centered around the map

2899
02:49:21,540 --> 02:49:28,020
mouse that's just what I assume I'm

2900
02:49:24,449 --> 02:49:30,300
going to want to do right alright so

2901
02:49:28,020 --> 02:49:33,449
let's talk about this slightly more

2902
02:49:30,299 --> 02:49:35,639
cerebrally just for the last thing cuz

2903
02:49:33,449 --> 02:49:39,120
that's just like grind the math off it

2904
02:49:35,639 --> 02:49:44,789
goes conceptually speaking another way

2905
02:49:39,120 --> 02:49:49,470
to think about it is what is scale right

2906
02:49:44,790 --> 02:49:53,609
what does scale mean so scale in our

2907
02:49:49,469 --> 02:49:55,349
world is a multiplied and multiplies

2908
02:49:53,609 --> 02:49:58,350
work around in origin

2909
02:49:55,350 --> 02:50:02,100
right so if I have the number 5 and I

2910
02:49:58,350 --> 02:50:05,068
multiply it by the number 6 I get 6

2911
02:50:02,100 --> 02:50:08,670
times further away from the origin

2912
02:50:05,068 --> 02:50:11,039
as 5 or 5 times further away from the

2913
02:50:08,670 --> 02:50:13,738
origin s 6 right but it's always around

2914
02:50:11,040 --> 02:50:15,750
the origin so on the number line right

2915
02:50:13,738 --> 02:50:19,139
if 5 is here and I multiply it by 6 I'm

2916
02:50:15,750 --> 02:50:21,329
going 6 times further away right and if

2917
02:50:19,139 --> 02:50:23,340
it was negative 5 I'd be going 6 times

2918
02:50:21,329 --> 02:50:25,109
further away just to dist in the other

2919
02:50:23,340 --> 02:50:28,920
direction but I'm always going around

2920
02:50:25,109 --> 02:50:31,859
the origin so if you said I want to

2921
02:50:28,920 --> 02:50:37,590
scale around the mouse cursor another

2922
02:50:31,859 --> 02:50:46,090
way to think of it would be make the

2923
02:50:37,590 --> 02:50:48,728
mouse the origin temporarily right

2924
02:50:46,090 --> 02:50:52,238
because what's actually happening well

2925
02:50:48,728 --> 02:50:56,170
here's my actual origin and here's my

2926
02:50:52,238 --> 02:50:58,840
p-value if I just freaking say s times P

2927
02:50:56,170 --> 02:51:02,109
right if my P prime equals s times P or

2928
02:50:58,840 --> 02:51:07,719
the way I've been writing it is PA equal

2929
02:51:02,109 --> 02:51:12,220
I'm sorry PB right equals s times PA

2930
02:51:07,719 --> 02:51:14,099
right so I'm changing this scale around

2931
02:51:12,219 --> 02:51:16,868
or whatever right that's happening

2932
02:51:14,100 --> 02:51:20,109
another way to look at it is like look

2933
02:51:16,869 --> 02:51:21,790
forget all of that stuff what's the

2934
02:51:20,109 --> 02:51:25,000
actual change in scale that I'm going to

2935
02:51:21,790 --> 02:51:27,010
do right however much I want I could

2936
02:51:25,000 --> 02:51:30,818
call that s if I want to but we've been

2937
02:51:27,010 --> 02:51:34,059
calling it s B over si which is like the

2938
02:51:30,818 --> 02:51:35,920
change in scale right because my

2939
02:51:34,059 --> 02:51:39,219
previous scale was something I've got a

2940
02:51:35,920 --> 02:51:42,969
new scale now right does that make sense

2941
02:51:39,219 --> 02:51:44,500
and so in that particular case I'm just

2942
02:51:42,969 --> 02:51:47,170
talking about the difference in scale so

2943
02:51:44,500 --> 02:51:52,148
what do I need to do to my P location to

2944
02:51:47,170 --> 02:51:54,250
update it right and in this case we just

2945
02:51:52,148 --> 02:51:54,728
say look if you want it to scale around

2946
02:51:54,250 --> 02:51:56,049
the origin

2947
02:51:54,728 --> 02:51:59,228
just make it relative to the origin

2948
02:51:56,049 --> 02:52:05,049
first right so I can just say all right

2949
02:51:59,228 --> 02:52:08,438
let's do a change in in variables here

2950
02:52:05,049 --> 02:52:13,148
right let's make P relative to M how do

2951
02:52:08,439 --> 02:52:14,949
I do that well I say P you know minus M

2952
02:52:13,148 --> 02:52:18,129
whatever that is right and this is I

2953
02:52:14,949 --> 02:52:19,479
guess a right and I need that variable

2954
02:52:18,129 --> 02:52:21,938
right so I'm going to call that

2955
02:52:19,478 --> 02:52:24,099
something P a.m. right and I'm just

2956
02:52:21,939 --> 02:52:27,609
changing my thing now I'm gonna apply my

2957
02:52:24,100 --> 02:52:30,790
scale right so I want a new thing which

2958
02:52:27,609 --> 02:52:33,340
is like my p BM right some new things so

2959
02:52:30,790 --> 02:52:36,069
this is step one step two I want to

2960
02:52:33,340 --> 02:52:38,318
scale by the change so this is the

2961
02:52:36,068 --> 02:52:44,978
change I'm gonna scale it and I know

2962
02:52:38,318 --> 02:52:49,059
that it scales I know that it scales

2963
02:52:44,978 --> 02:52:51,219
around my origin right and then finally

2964
02:52:49,059 --> 02:52:53,350
I want to produce my new point which has

2965
02:52:51,219 --> 02:52:55,929
to be relative to this origin so I need

2966
02:52:53,350 --> 02:52:59,130
to add the origin I was using back in

2967
02:52:55,930 --> 02:52:59,130
you know I'm saying

2968
02:53:00,700 --> 02:53:09,110
right and lo and behold just doing that

2969
02:53:06,459 --> 02:53:11,180
conceptual process right make it

2970
02:53:09,110 --> 02:53:16,090
relative to the mouse scale it then

2971
02:53:11,181 --> 02:53:16,090
unmake it relative to the mouse right

2972
02:53:17,140 --> 02:53:30,229
relative to mouse scaled on relative to

2973
02:53:24,979 --> 02:53:33,579
Mouse you know I'm saying hey if I just

2974
02:53:30,229 --> 02:53:33,579
expand this out look what I get

2975
02:53:43,450 --> 02:53:46,721
look familiar it's literally that right

2976
02:53:45,909 --> 02:53:58,899
there right

2977
02:53:46,720 --> 02:54:00,671
SP over si pay M plus M so you can do it

2978
02:53:58,899 --> 02:54:03,069
a couple different ways this is just the

2979
02:54:00,671 --> 02:54:04,390
purely conceptual way and that's just

2980
02:54:03,069 --> 02:54:06,060
saying look make it relatively thing you

2981
02:54:04,390 --> 02:54:08,591
want to scale scale it and unreal ative

2982
02:54:06,060 --> 02:54:10,120
this way up here is the plugin the math

2983
02:54:08,591 --> 02:54:12,280
and just say what you want and grind

2984
02:54:10,120 --> 02:54:15,370
they both end up with the same answer

2985
02:54:12,280 --> 02:54:18,190
and they both can suit you in different

2986
02:54:15,370 --> 02:54:21,359
cases I tend to prefer doing this way

2987
02:54:18,190 --> 02:54:24,121
when I can think of it because it's just

2988
02:54:21,360 --> 02:54:27,251
conceptually geometric is easier for me

2989
02:54:24,120 --> 02:54:29,680
but this way is good to practice it's

2990
02:54:27,251 --> 02:54:31,181
good to do this because sometimes you

2991
02:54:29,681 --> 02:54:36,159
will be in cases that you cannot

2992
02:54:31,181 --> 02:54:37,601
conceptualize right and somebody just

2993
02:54:36,159 --> 02:54:38,800
asked could you make a matrix out of all

2994
02:54:37,601 --> 02:54:41,739
of this and plug the coordinates of the

2995
02:54:38,800 --> 02:54:45,729
mouse and scale and yes absolutely this

2996
02:54:41,739 --> 02:54:47,140
is a matrix which translates to negative

2997
02:54:45,729 --> 02:54:48,761
M so if you imagined

2998
02:54:47,140 --> 02:54:50,501
if you imagine each of these three steps

2999
02:54:48,761 --> 02:54:52,271
as matrices it's trivial in two

3000
02:54:50,501 --> 02:54:53,229
dimensions right you have a three

3001
02:54:52,271 --> 02:54:54,251
dimensional matrix because you need to

3002
02:54:53,229 --> 02:54:56,439
be a modular so you can't represent

3003
02:54:54,251 --> 02:55:00,489
translation so you would literally have

3004
02:54:56,440 --> 02:55:01,331
the unit matrix here right oops the

3005
02:55:00,489 --> 02:55:03,251
identity matrix

3006
02:55:01,331 --> 02:55:06,341
you need your negative M so it's

3007
02:55:03,251 --> 02:55:08,081
negative M X negative my that this is

3008
02:55:06,341 --> 02:55:13,511
the matrix that translates to the origin

3009
02:55:08,081 --> 02:55:17,800
right we'll call that I don't know what

3010
02:55:13,511 --> 02:55:19,810
we'll call that we'll call that nothing

3011
02:55:17,800 --> 02:55:25,229
I'm not calling anything right now we'll

3012
02:55:19,810 --> 02:55:25,229
call that X we'll call that you

3013
02:55:25,681 --> 02:55:32,110
transform that's it I'll call it t1 for

3014
02:55:29,140 --> 02:55:33,431
a transform for step one scale we know

3015
02:55:32,110 --> 02:55:38,591
what that is right

3016
02:55:33,431 --> 02:55:42,940
si over SB si over s be zero zero one

3017
02:55:38,591 --> 02:55:45,251
zero zero zero zero right it's a scale

3018
02:55:42,940 --> 02:55:49,511
matrix just with this loop sorry

3019
02:55:45,251 --> 02:55:52,171
it's SB over si right again just the

3020
02:55:49,511 --> 02:55:55,091
amount of scale you wanted to apply and

3021
02:55:52,171 --> 02:55:56,889
then we want to put it back we want to

3022
02:55:55,091 --> 02:55:59,829
we want to translate it back

3023
02:55:56,889 --> 02:56:02,349
there's our transform - here's our final

3024
02:55:59,829 --> 02:56:07,379
one again identity doesn't touch

3025
02:56:02,350 --> 02:56:11,079
anything except the position MX my right

3026
02:56:07,379 --> 02:56:13,060
there's our three matrices one two three

3027
02:56:11,079 --> 02:56:15,010
we want to apply them in order to

3028
02:56:13,060 --> 02:56:17,260
produce this effect so basically we're

3029
02:56:15,010 --> 02:56:19,930
going to say what is our total matrix so

3030
02:56:17,260 --> 02:56:24,310
this is the total matrix for the entire

3031
02:56:19,930 --> 02:56:26,710
transform from A to B what's that going

3032
02:56:24,310 --> 02:56:28,539
to be well remember if they get replied

3033
02:56:26,709 --> 02:56:30,279
from right to left because the point

3034
02:56:28,540 --> 02:56:33,450
ends up on the right so for example you

3035
02:56:30,280 --> 02:56:35,680
know you're gonna do something like this

3036
02:56:33,450 --> 02:56:37,450
right where I've got a bunch of matrices

3037
02:56:35,680 --> 02:56:39,149
times the point to produce a new point

3038
02:56:37,450 --> 02:56:41,021
right mm-hmm

3039
02:56:39,149 --> 02:56:44,109
we want to know what this total matrix

3040
02:56:41,021 --> 02:56:47,140
is total matrix is going to be t1 times

3041
02:56:44,110 --> 02:56:48,760
the thing plus t2 t3 right that so that

3042
02:56:47,139 --> 02:56:50,920
applies them in this order first do this

3043
02:56:48,760 --> 02:56:52,271
then do this then do this what does that

3044
02:56:50,920 --> 02:56:55,569
end up equaling if we actually multiply

3045
02:56:52,271 --> 02:56:57,730
them out well we need to multiply these

3046
02:56:55,569 --> 02:57:01,690
matrices together first of all so let's

3047
02:56:57,729 --> 02:57:08,139
take them in sequence I have my T one on

3048
02:57:01,690 --> 02:57:10,569
this side 1 0 MX 0 1 and y 0 0 1 I want

3049
02:57:08,139 --> 02:57:12,189
to multiply by this SASB matrix I'm

3050
02:57:10,569 --> 02:57:14,649
gonna save myself a little bit of time

3051
02:57:12,190 --> 02:57:17,230
and just call this s because we only

3052
02:57:14,649 --> 02:57:22,840
have it there so SB over si is just s

3053
02:57:17,229 --> 02:57:24,430
right sorry SB over si right so we want

3054
02:57:22,840 --> 02:57:31,149
to multiply that by this matrix it's

3055
02:57:24,430 --> 02:57:34,649
just SS scale multiplying this out what

3056
02:57:31,149 --> 02:57:37,209
do I get right these two here I'm going

3057
02:57:34,649 --> 02:57:37,779
santa-san term H multiplication column

3058
02:57:37,209 --> 02:57:41,889
by row

3059
02:57:37,780 --> 02:57:45,670
there's my s right 1 0 0 s 0 0 0 s 0

3060
02:57:41,889 --> 02:57:48,129
nothing happens here 0 0 nothing happens

3061
02:57:45,670 --> 02:57:50,649
here move to the next one nothing again

3062
02:57:48,129 --> 02:57:53,560
move to the next one the S comes through

3063
02:57:50,649 --> 02:57:57,090
again nothing happens here multiply here

3064
02:57:53,560 --> 02:58:02,289
what do I see well I got a negative s MX

3065
02:57:57,090 --> 02:58:04,810
right see that come in there then I got

3066
02:58:02,290 --> 02:58:09,760
to multiply this here what do I get in

3067
02:58:04,810 --> 02:58:10,209
this column again negative s my right

3068
02:58:09,760 --> 02:58:13,930
and then

3069
02:58:10,209 --> 02:58:16,898
and then here we just get a one okay so

3070
02:58:13,930 --> 02:58:21,068
here's our first matrix now we need to

3071
02:58:16,898 --> 02:58:23,228
multiply this guy who's now taking up

3072
02:58:21,068 --> 02:58:25,659
this spot we need to multiply on the

3073
02:58:23,228 --> 02:58:30,519
left again so I'm gonna drop this down

3074
02:58:25,659 --> 02:58:32,100
here like this and we need this rt3

3075
02:58:30,520 --> 02:58:40,329
right this term

3076
02:58:32,100 --> 02:58:42,579
oops so here's our T 3 1 1 1 0 0 0 0 MX

3077
02:58:40,329 --> 02:58:45,789
and why want to do the same

3078
02:58:42,579 --> 02:58:48,370
multiplication again let's do it here we

3079
02:58:45,790 --> 02:58:49,390
just get our s again right because it's

3080
02:58:48,370 --> 02:58:52,540
just gonna get multiplied through

3081
02:58:49,389 --> 02:58:55,000
directly here we get nothing here we do

3082
02:58:52,540 --> 02:59:05,470
get something right stuff starts to

3083
02:58:55,000 --> 02:59:09,389
happen negative s MX in the first term

3084
02:59:05,469 --> 02:59:12,488
then 0 knocks that out and then MX here

3085
02:59:09,389 --> 02:59:15,219
right coming through again same thing

3086
02:59:12,488 --> 02:59:18,100
here nothing there this gets multiplied

3087
02:59:15,219 --> 02:59:20,379
by the 1 and then again we get some

3088
02:59:18,100 --> 02:59:24,130
values coming here negative s my and

3089
02:59:20,379 --> 02:59:28,119
then our plus my 0 0 1 finishes off the

3090
02:59:24,129 --> 02:59:35,379
matrix and here we are right so that's

3091
02:59:28,120 --> 02:59:40,870
our final matrix right it is expanding

3092
02:59:35,379 --> 02:59:47,409
out SB over sa SB over si in those two

3093
02:59:40,870 --> 02:59:50,229
slots and then here we have our in this

3094
02:59:47,409 --> 02:59:52,959
part of the the point equation this is

3095
02:59:50,228 --> 02:59:56,228
at M and an M right we can think of this

3096
02:59:52,959 --> 02:59:59,709
as as an actual vector right so what

3097
02:59:56,228 --> 03:00:07,238
we've got there is we've got M minus SB

3098
02:59:59,709 --> 03:00:10,439
/ s a times M right so that's that's

3099
03:00:07,238 --> 03:00:12,909
what we're actually multiplying in

3100
03:00:10,440 --> 03:00:14,620
so then if we want to see what this

3101
03:00:12,909 --> 03:00:16,569
actually does well this term can be

3102
03:00:14,620 --> 03:00:21,120
simplified because that's just inverting

3103
03:00:16,569 --> 03:00:26,709
right that's like saying you know M

3104
03:00:21,120 --> 03:00:30,641
minus SB / SI m it's just the same as

3105
03:00:26,709 --> 03:00:32,379
saying well si over si and I can just do

3106
03:00:30,640 --> 03:00:35,379
this actual subtract because these two

3107
03:00:32,379 --> 03:00:43,709
terms are the same so it's sa minus SB /

3108
03:00:35,379 --> 03:00:43,709
SI times M right and that's all that is

3109
03:00:44,790 --> 03:00:49,510
all right so that's the matrix that we

3110
03:00:48,068 --> 03:00:51,549
would end up with I believe unless I

3111
03:00:49,510 --> 03:00:52,719
messed up my matrix multiplication and

3112
03:00:51,549 --> 03:00:55,329
so then you have to ask yourself well

3113
03:00:52,719 --> 03:01:03,639
does that do the same thing right so if

3114
03:00:55,329 --> 03:01:08,799
I actually have SB / SI 0 0 SB / SI 0 0

3115
03:01:03,639 --> 03:01:14,829
right this is a just a scale and then

3116
03:01:08,799 --> 03:01:16,509
I've got my sa minus SB / SI m 1 what

3117
03:01:14,829 --> 03:01:18,728
happens if I actually multiply it by

3118
03:01:16,510 --> 03:01:21,010
something so in this case I want to

3119
03:01:18,728 --> 03:01:24,129
transform my original point right I want

3120
03:01:21,010 --> 03:01:26,590
to transform PA as a vector so su PA x

3121
03:01:24,129 --> 03:01:29,139
PA Y right I want to transform this

3122
03:01:26,590 --> 03:01:30,488
vector by this matrix well it's pretty

3123
03:01:29,139 --> 03:01:34,000
straightforward and of course there's

3124
03:01:30,488 --> 03:01:35,409
the one here because I'm doing my I'm

3125
03:01:34,000 --> 03:01:38,170
was doing it in homogeneous coordinates

3126
03:01:35,409 --> 03:01:41,439
but if we imagine multiplying this well

3127
03:01:38,170 --> 03:01:42,818
the SBS a is in the scale location so

3128
03:01:41,439 --> 03:01:46,898
we're just going to end up but the first

3129
03:01:42,818 --> 03:01:50,289
thing is just going to be SB / SI x PA

3130
03:01:46,898 --> 03:01:52,329
right that's pretty obvious and then the

3131
03:01:50,290 --> 03:01:55,810
next thing that we're going to get is

3132
03:01:52,329 --> 03:01:58,299
this times this right oh sorry naught

3133
03:01:55,809 --> 03:02:00,430
times this is times 1 so we're going to

3134
03:01:58,299 --> 03:02:06,369
add that to it so we're going to add sa

3135
03:02:00,430 --> 03:02:10,148
minus SB / SI times M right and that's

3136
03:02:06,370 --> 03:02:12,329
the update step that we would actually

3137
03:02:10,148 --> 03:02:12,329
do

3138
03:02:15,549 --> 03:02:20,470
now is that actually correct I don't

3139
03:02:17,918 --> 03:02:23,998
remember easily could have made a

3140
03:02:20,469 --> 03:02:28,269
mistake there yep it's exactly direct

3141
03:02:23,998 --> 03:02:31,119
spr SI x PA + sa minus SB SI / m right

3142
03:02:28,270 --> 03:02:31,779
so the matrix version does exactly what

3143
03:02:31,119 --> 03:02:33,279
you would expect

3144
03:02:31,779 --> 03:02:45,369
Entei I didn't make any mistakes

3145
03:02:33,279 --> 03:02:53,470
apparently all right hopefully that's

3146
03:02:45,369 --> 03:02:57,879
everything if there's anything you don't

3147
03:02:53,469 --> 03:03:07,708
understand in that we could try the

3148
03:02:57,879 --> 03:03:09,579
chance if that makes sense

3149
03:03:07,709 --> 03:03:10,959
hopefully that's like a ton of different

3150
03:03:09,578 --> 03:03:12,189
ways you're gonna get this problem go

3151
03:03:10,959 --> 03:03:19,949
work them out yourself

3152
03:03:12,189 --> 03:03:19,949
now go do all of that yourself study

3153
03:03:20,009 --> 03:03:24,779
until you can get it right because

3154
03:03:22,568 --> 03:03:27,158
that's the only way to train your brain

3155
03:03:24,779 --> 03:03:29,859
nobody starts out being able to do that

3156
03:03:27,158 --> 03:03:34,180
you just have to do it a lot and then

3157
03:03:29,859 --> 03:03:36,189
you can write and so you should be able

3158
03:03:34,180 --> 03:03:41,049
to work out all of those that's you know

3159
03:03:36,189 --> 03:03:44,139
that's all just that's all just like

3160
03:03:41,049 --> 03:03:46,270
what a graphics or generally physics C

3161
03:03:44,139 --> 03:03:47,918
programmer should just you should just

3162
03:03:46,270 --> 03:03:50,640
always be doing stuff like that just to

3163
03:03:47,918 --> 03:03:52,389
keep yourself brain going and

3164
03:03:50,639 --> 03:03:54,519
understanding all those relationships

3165
03:03:52,389 --> 03:03:56,228
because if you don't you'll never dull

3166
03:03:54,520 --> 03:03:59,020
never really sink in you got to do it

3167
03:03:56,228 --> 03:04:01,478
don't just take the answer like do it

3168
03:03:59,020 --> 03:04:03,459
you know work it out yourself on a piece

3169
03:04:01,478 --> 03:04:06,128
of paper you'll get it wrong a bunch of

3170
03:04:03,459 --> 03:04:07,329
times that's totally fine you even on

3171
03:04:06,129 --> 03:04:10,140
stream you watch me do it on the

3172
03:04:07,328 --> 03:04:16,148
blackboard I'll get them wrong so

3173
03:04:10,139 --> 03:04:18,248
totally fine do not panic it's just

3174
03:04:16,148 --> 03:04:21,278
practice it's like anything else it's

3175
03:04:18,248 --> 03:04:23,529
just practice you got to do it and with

3176
03:04:21,279 --> 03:04:25,569
math it's careless areas are easy so you

3177
03:04:23,529 --> 03:04:27,998
just got to check your work or use a

3178
03:04:25,568 --> 03:04:29,020
computer algebra package to check your

3179
03:04:27,998 --> 03:04:38,619
work

3180
03:04:29,021 --> 03:04:40,860
and help you but with that I'm going to

3181
03:04:38,620 --> 03:04:40,860
end

3182
03:04:51,720 --> 03:04:56,591
all right thank you everyone for joining

3183
03:04:54,819 --> 03:04:58,001
me for lips at a handmade hero it's been

3184
03:04:56,591 --> 03:05:00,131
a pleasure coding with you as always if

3185
03:04:58,001 --> 03:05:01,810
you would like to follow along with the

3186
03:05:00,130 --> 03:05:05,710
stream at home you can always peer to

3187
03:05:01,810 --> 03:05:07,119
the game on handmade hero org the game

3188
03:05:05,710 --> 03:05:08,890
comes with the source code even right

3189
03:05:07,120 --> 03:05:13,591
now so you can play around with it and

3190
03:05:08,890 --> 03:05:15,729
have fun with your own math solving

3191
03:05:13,591 --> 03:05:19,030
don't forget to try solving math

3192
03:05:15,729 --> 03:05:21,819
yourself I was horrible at math in high

3193
03:05:19,030 --> 03:05:23,641
school and grade school and stuff keep

3194
03:05:21,819 --> 03:05:26,560
that in mind

3195
03:05:23,640 --> 03:05:28,539
math is about practice and diligence and

3196
03:05:26,560 --> 03:05:30,039
using a computer to help you with things

3197
03:05:28,540 --> 03:05:34,271
that you have trouble with to visualize

3198
03:05:30,040 --> 03:05:36,221
and so on not that kinds of crap that

3199
03:05:34,271 --> 03:05:38,021
you learned in school which is taught

3200
03:05:36,220 --> 03:05:39,789
poorly and focuses on the wrong things

3201
03:05:38,021 --> 03:05:41,711
and makes you do things on tests in a

3202
03:05:39,790 --> 03:05:43,330
time pressure environment which is the

3203
03:05:41,710 --> 03:05:49,720
absolute worst place to ever do math

3204
03:05:43,329 --> 03:05:51,729
ever so keep that in mind I will see

3205
03:05:49,720 --> 03:05:53,171
everyone back here next week I believe

3206
03:05:51,729 --> 03:05:55,630
unless I'm wrong about that

3207
03:05:53,171 --> 03:05:58,450
pretty sure next week I'll update the

3208
03:05:55,630 --> 03:06:00,130
schedule at which point we will start

3209
03:05:58,450 --> 03:06:02,290
adding ground cover and lighting fixes

3210
03:06:00,130 --> 03:06:05,369
into the game because we now have the

3211
03:06:02,290 --> 03:06:07,721
caching and so hopefully that should

3212
03:06:05,370 --> 03:06:10,091
open up the door for us to do all kinds

3213
03:06:07,720 --> 03:06:13,359
of fun stuff now to finish up the sort

3214
03:06:10,091 --> 03:06:15,011
of look of the game which is really I

3215
03:06:13,360 --> 03:06:16,601
what I'm kind of trying out finally I

3216
03:06:15,011 --> 03:06:19,931
want to kind of get us looking kind of

3217
03:06:16,601 --> 03:06:21,461
final so that we can then just I guess

3218
03:06:19,931 --> 03:06:22,511
we just do game play which I hate and

3219
03:06:21,460 --> 03:06:26,430
then off we go

3220
03:06:22,511 --> 03:06:26,431
all right tick news everybody

3221
03:06:29,250 --> 03:06:31,309
you

