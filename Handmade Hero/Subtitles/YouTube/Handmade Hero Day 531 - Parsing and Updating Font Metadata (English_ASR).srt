1
00:00:01,010 --> 00:00:08,009
hello everybody and welcome to handmade

2
00:00:05,370 --> 00:00:11,460
hero this is the show where we code a

3
00:00:08,009 --> 00:00:14,870
complete game live on stream so long as

4
00:00:11,460 --> 00:00:17,339
all of the certificates that certify our

5
00:00:14,869 --> 00:00:21,089
certification are continued to be

6
00:00:17,339 --> 00:00:23,160
certified and don't expire obviously

7
00:00:21,089 --> 00:00:25,259
sometimes you have certificates that

8
00:00:23,160 --> 00:00:29,039
expire with their expiration which

9
00:00:25,260 --> 00:00:30,929
causes of course the expiration of the

10
00:00:29,039 --> 00:00:33,500
certificates that were signed with those

11
00:00:30,928 --> 00:00:37,379
certificates leading to a certificate

12
00:00:33,500 --> 00:00:38,759
expiration at which point I mean all

13
00:00:37,380 --> 00:00:40,469
bets are off because without

14
00:00:38,759 --> 00:00:42,769
certificates you would not be able to

15
00:00:40,469 --> 00:00:45,929
certify that the certificates that are

16
00:00:42,770 --> 00:00:47,609
certifying your certificate are in fact

17
00:00:45,929 --> 00:00:50,549
themselves certified because they could

18
00:00:47,609 --> 00:00:52,769
be expired so one of the things that we

19
00:00:50,549 --> 00:00:55,229
like to do on handmade hero obviously is

20
00:00:52,770 --> 00:00:57,870
just remind everyone out there before

21
00:00:55,229 --> 00:01:01,019
trying to program anything during the

22
00:00:57,869 --> 00:01:04,170
day or evening actually really pretty

23
00:01:01,020 --> 00:01:05,609
much time independent except for of

24
00:01:04,170 --> 00:01:08,909
course if that time is an expiration

25
00:01:05,609 --> 00:01:10,319
date for the certificate to just go

26
00:01:08,909 --> 00:01:12,000
through and check all of your

27
00:01:10,319 --> 00:01:14,298
certificates and make sure that the

28
00:01:12,000 --> 00:01:18,359
expiration dates on the certificates

29
00:01:14,299 --> 00:01:20,430
that you have are not about to expire

30
00:01:18,359 --> 00:01:22,650
because if those certificates expired

31
00:01:20,430 --> 00:01:25,618
then obviously all of the certificates

32
00:01:22,650 --> 00:01:28,259
that were certified using this those

33
00:01:25,618 --> 00:01:30,569
certificates will also themselves expire

34
00:01:28,259 --> 00:01:31,739
which would lead to any certificates

35
00:01:30,569 --> 00:01:33,629
certified with the certificates that

36
00:01:31,739 --> 00:01:36,000
expired from this from the expiration of

37
00:01:33,629 --> 00:01:38,310
the certificate those will also expire

38
00:01:36,000 --> 00:01:41,938
and at that point mostly what you have

39
00:01:38,310 --> 00:01:43,649
is certificates that expired because of

40
00:01:41,938 --> 00:01:46,529
previous certificate expiration

41
00:01:43,649 --> 00:01:48,719
certificate expirations just want to

42
00:01:46,530 --> 00:01:50,849
make sure that's clear just you know a

43
00:01:48,719 --> 00:01:52,140
little that sometimes people explain in

44
00:01:50,849 --> 00:01:52,919
a confusing way it's just wanted to put

45
00:01:52,140 --> 00:01:56,579
it out there in a way that was really

46
00:01:52,920 --> 00:01:57,930
easy to understand that's just kind of a

47
00:01:56,578 --> 00:01:59,879
public service announcement because if

48
00:01:57,930 --> 00:02:01,439
you don't always make sure that you have

49
00:01:59,879 --> 00:02:02,548
the certificates that certify the

50
00:02:01,438 --> 00:02:04,169
certificates that certify the

51
00:02:02,549 --> 00:02:06,420
certificates that are you're using for

52
00:02:04,170 --> 00:02:08,098
certification then one of those things

53
00:02:06,420 --> 00:02:10,739
could expire which would lead to

54
00:02:08,098 --> 00:02:12,479
expiration so I'm going to go ahead and

55
00:02:10,739 --> 00:02:13,409
just assume that everything's certified

56
00:02:12,479 --> 00:02:15,209
today

57
00:02:13,409 --> 00:02:16,229
if we have to recertify some of the

58
00:02:15,210 --> 00:02:19,620
certificates that were used for

59
00:02:16,229 --> 00:02:21,989
certifying the certification certificate

60
00:02:19,620 --> 00:02:24,180
we can do that certainly if you know

61
00:02:21,990 --> 00:02:25,409
either way but for right now I'm just

62
00:02:24,180 --> 00:02:27,000
going to assume that everything's

63
00:02:25,409 --> 00:02:29,039
certified and we'll go from there and if

64
00:02:27,000 --> 00:02:31,560
there's any expirations that happen with

65
00:02:29,039 --> 00:02:33,109
the with you know with handmade hero

66
00:02:31,560 --> 00:02:36,379
we'll we'll address them as we go

67
00:02:33,110 --> 00:02:39,360
all right so yesterday we finished

68
00:02:36,379 --> 00:02:41,310
working around some some Windows issues

69
00:02:39,360 --> 00:02:43,770
that we had because we were using

70
00:02:41,310 --> 00:02:46,949
Windows to extract some font data from

71
00:02:43,770 --> 00:02:50,790
TTF files to put them into our asset

72
00:02:46,949 --> 00:02:52,289
packing system the unfortunate aspect of

73
00:02:50,789 --> 00:02:55,560
Windows is font extraction that we came

74
00:02:52,289 --> 00:02:57,449
across was that for whatever reason it

75
00:02:55,560 --> 00:02:59,250
doesn't like to anti-alias fonts that

76
00:02:57,449 --> 00:03:03,959
are larger than I think it was we tested

77
00:02:59,250 --> 00:03:05,789
it 353 pixels high and so we made a

78
00:03:03,960 --> 00:03:08,189
thing that would automatically do down

79
00:03:05,789 --> 00:03:11,789
sampling of larger fonts to produce an

80
00:03:08,189 --> 00:03:14,159
anti aliased output we do anything fancy

81
00:03:11,789 --> 00:03:15,329
just a simple box filter but we just

82
00:03:14,159 --> 00:03:16,770
used that to make sure we could always

83
00:03:15,330 --> 00:03:18,450
get anti aliased fonts even if those

84
00:03:16,770 --> 00:03:20,460
thoughts were happen to be fairly large

85
00:03:18,449 --> 00:03:22,139
because I don't really know whether we

86
00:03:20,460 --> 00:03:23,580
want to use large fonts or not I didn't

87
00:03:22,139 --> 00:03:25,949
want to leave some kind of mess in there

88
00:03:23,580 --> 00:03:27,600
where if we asked for a large font with

89
00:03:25,949 --> 00:03:28,459
and you know we wouldn't get it or

90
00:03:27,599 --> 00:03:32,460
whatever

91
00:03:28,460 --> 00:03:34,349
so um we went ahead and did all that

92
00:03:32,460 --> 00:03:36,719
which means we now have the ability to

93
00:03:34,349 --> 00:03:39,239
export fonts what we don't have right

94
00:03:36,719 --> 00:03:40,889
now is anything that reads the font text

95
00:03:39,240 --> 00:03:42,510
that we output and that's the only thing

96
00:03:40,889 --> 00:03:44,789
stopping us from having completely

97
00:03:42,509 --> 00:03:48,149
refreshable art path meaning we can

98
00:03:44,789 --> 00:03:50,219
start from raw inputs and reproduce an

99
00:03:48,150 --> 00:03:52,379
entire set of packs that has everything

100
00:03:50,219 --> 00:03:57,389
in it that we might want streaming audio

101
00:03:52,379 --> 00:03:59,479
music spritesheet sound graphics stuff

102
00:03:57,389 --> 00:04:02,279
whatever and all the font information

103
00:03:59,479 --> 00:04:05,489
markup alignment points we got all that

104
00:04:02,280 --> 00:04:07,830
stuff but we just don't have now a way

105
00:04:05,490 --> 00:04:09,689
to read the like glyph positioning

106
00:04:07,830 --> 00:04:11,940
information so we want to do is go in

107
00:04:09,689 --> 00:04:16,410
and add that to our import and then I

108
00:04:11,939 --> 00:04:18,149
think we can sort of do some testing of

109
00:04:16,410 --> 00:04:21,780
the art packing system to make sure that

110
00:04:18,149 --> 00:04:23,909
everything's good where we're at so I'm

111
00:04:21,779 --> 00:04:27,059
going to go into handmade here I'm going

112
00:04:23,910 --> 00:04:29,250
go ahead and load everything up in sign

113
00:04:27,060 --> 00:04:31,500
handmade hero the place where this stuff

114
00:04:29,250 --> 00:04:34,889
happens is in the import file handmade

115
00:04:31,500 --> 00:04:37,889
imports EPP um I would mention just

116
00:04:34,889 --> 00:04:41,729
really quickly we've got someone was was

117
00:04:37,889 --> 00:04:43,319
worried on the github I don't know how

118
00:04:41,730 --> 00:04:45,480
to write I don't know how to get this

119
00:04:43,319 --> 00:04:50,099
thing going here nope that's not there

120
00:04:45,480 --> 00:04:52,740
it is if I look at the issues someone

121
00:04:50,100 --> 00:04:56,030
was worried because the space character

122
00:04:52,740 --> 00:04:58,079
produced corrupt PNG for the space left

123
00:04:56,029 --> 00:05:00,179
what's happening here you have to

124
00:04:58,079 --> 00:05:02,039
remember we didn't make the ping spec

125
00:05:00,180 --> 00:05:04,050
the ping spec is someone else suspect

126
00:05:02,040 --> 00:05:05,340
and there's some weird issues with it I

127
00:05:04,050 --> 00:05:07,770
replied to it here just so the person

128
00:05:05,339 --> 00:05:10,619
would know what's going on according to

129
00:05:07,769 --> 00:05:13,049
the PNG specification it's actually not

130
00:05:10,620 --> 00:05:16,889
legal to make a PNG with a width and

131
00:05:13,050 --> 00:05:19,710
height of 0 now I don't know why because

132
00:05:16,889 --> 00:05:23,279
that's a valid image right like if

133
00:05:19,709 --> 00:05:27,269
you're trying to specify hey what's the

134
00:05:23,279 --> 00:05:29,159
image for the space character right the

135
00:05:27,269 --> 00:05:32,399
answer is there isn't one there's no

136
00:05:29,160 --> 00:05:34,470
data it's empty right so specifying a

137
00:05:32,399 --> 00:05:36,629
PNG with a width and height of 0 is the

138
00:05:34,470 --> 00:05:38,930
right way to do that if we were to

139
00:05:36,629 --> 00:05:41,490
specify it with a width and height of 1

140
00:05:38,930 --> 00:05:44,579
that would imply that there was a pixels

141
00:05:41,490 --> 00:05:46,439
worth of data but there isn't right so

142
00:05:44,579 --> 00:05:50,609
it's not the way I would choose to do it

143
00:05:46,439 --> 00:05:52,589
because it's actually not correct I'm

144
00:05:50,610 --> 00:05:55,460
not sure how we would want to solve this

145
00:05:52,589 --> 00:05:59,609
problem we can't really do much about it

146
00:05:55,459 --> 00:06:03,029
and our reader will correctly read this

147
00:05:59,610 --> 00:06:04,530
PNG so it's okay that the width and

148
00:06:03,029 --> 00:06:06,989
height would be set to 0 for our

149
00:06:04,529 --> 00:06:08,549
purposes so the only question is do we

150
00:06:06,990 --> 00:06:11,280
want to do something about it for the

151
00:06:08,550 --> 00:06:12,449
other programs out there which wouldn't

152
00:06:11,279 --> 00:06:15,509
know how to deal with the width and

153
00:06:12,449 --> 00:06:17,339
height of 0 and therefore interpret the

154
00:06:15,509 --> 00:06:18,870
PNG is corrupted which is correct

155
00:06:17,339 --> 00:06:21,239
according the spec because you're not

156
00:06:18,870 --> 00:06:23,100
allowed to do that but I just don't know

157
00:06:21,240 --> 00:06:25,350
what the other option is one is that we

158
00:06:23,100 --> 00:06:28,230
just don't output a glyph for that

159
00:06:25,350 --> 00:06:30,360
character and so what that would mean is

160
00:06:28,230 --> 00:06:33,509
that we would literally like compact the

161
00:06:30,360 --> 00:06:35,580
table so that you

162
00:06:33,509 --> 00:06:37,259
there's just no bitmap for it like we

163
00:06:35,579 --> 00:06:37,560
have to leave space because we need the

164
00:06:37,259 --> 00:06:39,750
space

165
00:06:37,560 --> 00:06:43,918
the information so it has to be in the

166
00:06:39,750 --> 00:06:51,540
table as an actual glyph entry we just

167
00:06:43,918 --> 00:06:54,418
wouldn't have an image for it I don't

168
00:06:51,540 --> 00:06:56,580
know what to make of it um so we have to

169
00:06:54,418 --> 00:06:58,949
think about that a little bit I don't

170
00:06:56,579 --> 00:07:00,389
I'll leave this up but I don't really

171
00:06:58,949 --> 00:07:02,159
want to do anything about it just yet

172
00:07:00,389 --> 00:07:06,060
because I'm just not sure what the right

173
00:07:02,160 --> 00:07:08,639
answer is here like like I said we need

174
00:07:06,060 --> 00:07:11,459
to leave space for it and so maybe we

175
00:07:08,639 --> 00:07:15,000
can do is just not output any PNG at all

176
00:07:11,459 --> 00:07:16,918
and then inside the actual text file

177
00:07:15,000 --> 00:07:19,319
that we output with all of the glyph

178
00:07:16,918 --> 00:07:22,978
information we'll just leave it as an

179
00:07:19,319 --> 00:07:25,019
empty slot that doesn't specify any

180
00:07:22,978 --> 00:07:28,500
input bitmap and then maybe we can just

181
00:07:25,019 --> 00:07:31,589
make our text processor understand what

182
00:07:28,500 --> 00:07:33,810
to do when it is when it is not given a

183
00:07:31,589 --> 00:07:37,560
glyph for one of the slots in the glyph

184
00:07:33,810 --> 00:07:42,870
table right that's that's all we got

185
00:07:37,560 --> 00:07:44,668
okay so let's go ahead and go into how

186
00:07:42,870 --> 00:07:48,120
this is going to work here I'm gonna

187
00:07:44,668 --> 00:07:50,159
load up one of those files that we

188
00:07:48,120 --> 00:07:52,889
outputted that's just a tenth it's just

189
00:07:50,160 --> 00:07:54,330
a test we did of the font code so if we

190
00:07:52,889 --> 00:07:56,639
look in here you can see all the font

191
00:07:54,329 --> 00:07:58,829
bitmaps there's also an hht that it

192
00:07:56,639 --> 00:08:00,329
outputs and it looks like this we

193
00:07:58,829 --> 00:08:03,120
haven't thought at all about what we

194
00:08:00,329 --> 00:08:05,519
want this to look like we can obviously

195
00:08:03,120 --> 00:08:08,879
totally change this text file to

196
00:08:05,519 --> 00:08:12,180
anything we want and so this is just a

197
00:08:08,879 --> 00:08:14,269
like rough sketch of what it might be so

198
00:08:12,180 --> 00:08:17,430
what I'd like to do is go through and

199
00:08:14,269 --> 00:08:20,668
actually write the reader and then go

200
00:08:17,430 --> 00:08:24,620
back to the writer and modify the output

201
00:08:20,668 --> 00:08:27,449
to fit what we actually decide to read

202
00:08:24,620 --> 00:08:29,310
does that make sense this looks pretty

203
00:08:27,449 --> 00:08:31,379
good but I suspect we need some things

204
00:08:29,310 --> 00:08:34,349
up at the front like we'd like to see

205
00:08:31,379 --> 00:08:36,719
the glyph count probably and we'd like

206
00:08:34,349 --> 00:08:39,240
to see some of that space confirmation

207
00:08:36,719 --> 00:08:41,490
if I remember correctly oops that's not

208
00:08:39,240 --> 00:08:43,649
what I wanted inside the file format if

209
00:08:41,490 --> 00:08:45,730
you actually go look at what a font has

210
00:08:43,649 --> 00:08:51,470
in it

211
00:08:45,730 --> 00:08:52,600
what's going on there font no no there

212
00:08:51,470 --> 00:08:54,950
it is

213
00:08:52,600 --> 00:08:57,740
if you actually look what a font has any

214
00:08:54,950 --> 00:08:59,090
it's got the glyph hat the glyph one

215
00:08:57,740 --> 00:09:00,230
path slash gunpoint glyph can't be

216
00:08:59,090 --> 00:09:02,480
sender height to sender height and

217
00:09:00,230 --> 00:09:03,769
external letting we're not writing any

218
00:09:02,480 --> 00:09:09,580
of that out yet so I think at a minimum

219
00:09:03,769 --> 00:09:14,240
we would want to get that data into our

220
00:09:09,580 --> 00:09:16,220
our system I and maybe that has to be

221
00:09:14,240 --> 00:09:18,860
specified like along with the font you

222
00:09:16,220 --> 00:09:21,440
know or something like this so that's

223
00:09:18,860 --> 00:09:22,700
what I'd like to do here if we look at

224
00:09:21,440 --> 00:09:26,810
what happens when we're doing our

225
00:09:22,700 --> 00:09:29,210
parsing you can see inside this set up

226
00:09:26,809 --> 00:09:31,669
here where we do a parse top-level block

227
00:09:29,210 --> 00:09:33,920
you can see us sort of doing the parsing

228
00:09:31,669 --> 00:09:36,289
for for things like whether it's default

229
00:09:33,919 --> 00:09:41,870
music sound blockhead whatever that

230
00:09:36,289 --> 00:09:44,120
needs to have a thing for fonts shoved

231
00:09:41,870 --> 00:09:46,700
into it probably that's my assumption

232
00:09:44,120 --> 00:09:48,889
but if you actually go look at how this

233
00:09:46,700 --> 00:09:50,509
routine works it kind of argues that we

234
00:09:48,889 --> 00:09:52,429
may have to start breaking it apart and

235
00:09:50,509 --> 00:09:54,590
the reason for that is if you look at

236
00:09:52,429 --> 00:09:57,409
how we've set it up pretty much this

237
00:09:54,590 --> 00:10:01,370
thing is is set up only to really import

238
00:09:57,409 --> 00:10:04,279
like one thing at a time right so it's

239
00:10:01,370 --> 00:10:06,620
gonna go read like one file but we need

240
00:10:04,279 --> 00:10:10,069
it to read like lots of files you know

241
00:10:06,620 --> 00:10:12,620
I'm saying we need it to check and read

242
00:10:10,070 --> 00:10:16,150
a whole set of files and so really this

243
00:10:12,620 --> 00:10:18,860
code right here that reads like a single

244
00:10:16,149 --> 00:10:22,370
you know a single import like let's say

245
00:10:18,860 --> 00:10:29,269
this right here or this right here that

246
00:10:22,370 --> 00:10:31,820
code needs to be we need to be able to

247
00:10:29,269 --> 00:10:34,129
call that like multiple times from

248
00:10:31,820 --> 00:10:38,360
inside a single block if we're going to

249
00:10:34,129 --> 00:10:40,399
do this right so I'm not sure exactly

250
00:10:38,360 --> 00:10:43,370
how I want to attack this but what I

251
00:10:40,399 --> 00:10:46,250
might do first is try to make it so that

252
00:10:43,370 --> 00:10:49,220
maybe we've got separate paths for

253
00:10:46,250 --> 00:10:51,559
separate elements here so that for

254
00:10:49,220 --> 00:10:55,000
example we know the difference between

255
00:10:51,559 --> 00:10:57,979
using you know between things that have

256
00:10:55,000 --> 00:10:59,570
arrays of alignment points versus things

257
00:10:57,980 --> 00:11:01,970
that only have one

258
00:10:59,570 --> 00:11:04,610
or other things like that and so that we

259
00:11:01,970 --> 00:11:06,170
can call like update asset metadata you

260
00:11:04,610 --> 00:11:08,480
know we would call that for each

261
00:11:06,169 --> 00:11:09,979
individual glyph in the font rather than

262
00:11:08,480 --> 00:11:14,480
just having one call like it's doing

263
00:11:09,980 --> 00:11:16,190
here and stuff like this right so I feel

264
00:11:14,480 --> 00:11:17,870
like that's more what we want to do and

265
00:11:16,190 --> 00:11:21,910
in order to do that what we would need

266
00:11:17,870 --> 00:11:25,669
is something that allows us to treat

267
00:11:21,909 --> 00:11:28,219
parts of blocks uniformly such as like

268
00:11:25,669 --> 00:11:30,169
the shared information in blocks so for

269
00:11:28,220 --> 00:11:34,160
example the things that say like what

270
00:11:30,169 --> 00:11:35,659
the name is or what you know like we've

271
00:11:34,159 --> 00:11:37,579
got sort of these things in blocks that

272
00:11:35,659 --> 00:11:41,959
are they're suitable for default parsing

273
00:11:37,580 --> 00:11:46,009
like author description and name or tags

274
00:11:41,960 --> 00:11:51,740
right all of that stuff we need or we

275
00:11:46,009 --> 00:11:55,789
want to be able to be parsed easily by

276
00:11:51,740 --> 00:11:57,200
any of our parsing operations so instead

277
00:11:55,789 --> 00:11:59,899
of having to keep everything in the same

278
00:11:57,200 --> 00:12:03,860
routine what I think we might want to do

279
00:11:59,899 --> 00:12:07,220
is just have us something that handles

280
00:12:03,860 --> 00:12:10,639
those externalities so for example let's

281
00:12:07,220 --> 00:12:12,980
say we took all of this stuff here and

282
00:12:10,639 --> 00:12:17,840
we went down to the end and said look

283
00:12:12,980 --> 00:12:23,360
this group could maybe all be handled by

284
00:12:17,840 --> 00:12:25,490
like a else if handle common fields

285
00:12:23,360 --> 00:12:29,210
right like that

286
00:12:25,490 --> 00:12:32,509
and assuming this was handled by common

287
00:12:29,210 --> 00:12:34,190
fields we just do you know we just let

288
00:12:32,509 --> 00:12:36,200
that handle it in fact we could just say

289
00:12:34,190 --> 00:12:38,150
look if it's not handled by common

290
00:12:36,200 --> 00:12:41,720
fields at that point then we have to

291
00:12:38,149 --> 00:12:43,939
issue an error you know then what I can

292
00:12:41,720 --> 00:12:50,240
do is pull this stuff out which starts

293
00:12:43,940 --> 00:12:52,280
to get me in a better position for where

294
00:12:50,240 --> 00:12:53,990
am I going here for being able to make

295
00:12:52,279 --> 00:12:56,149
multiple of these right because by

296
00:12:53,990 --> 00:12:57,440
getting that code out now I don't have

297
00:12:56,149 --> 00:13:00,500
to leave everything in the same routine

298
00:12:57,440 --> 00:13:02,360
I can just call this from several

299
00:13:00,500 --> 00:13:06,250
different routines and not have to worry

300
00:13:02,360 --> 00:13:06,250
about the paths diverging right

301
00:13:06,299 --> 00:13:10,979
so if we had something like this that

302
00:13:08,460 --> 00:13:15,300
was like handle common fields then what

303
00:13:10,980 --> 00:13:21,240
I would need to do is say okay have a

304
00:13:15,299 --> 00:13:23,009
handle here like that

305
00:13:21,240 --> 00:13:25,799
and then in here I could say handled

306
00:13:23,009 --> 00:13:27,509
equals true so we'll assume we handle it

307
00:13:25,799 --> 00:13:29,370
if nothing gets handled will say handled

308
00:13:27,509 --> 00:13:33,450
equals false up at the top here where we

309
00:13:29,370 --> 00:13:35,700
do handle com of handle common fields we

310
00:13:33,450 --> 00:13:38,700
would need to pass it for example an h

311
00:13:35,700 --> 00:13:44,759
HT fields target - like for it to feel

312
00:13:38,700 --> 00:13:47,190
fill out right and that works for most

313
00:13:44,759 --> 00:13:48,720
of the things we need right so if we

314
00:13:47,190 --> 00:13:50,090
have that we would just need like the

315
00:13:48,720 --> 00:13:54,000
tokenizer

316
00:13:50,090 --> 00:13:56,399
the token and the fields and most of

317
00:13:54,000 --> 00:14:00,419
this stuff would work so like here that

318
00:13:56,399 --> 00:14:03,120
would work here would work here would

319
00:14:00,419 --> 00:14:05,789
work and so the only thing we really

320
00:14:03,120 --> 00:14:08,850
have now is the append tags tag list

321
00:14:05,789 --> 00:14:11,129
that's the thing doesn't work well why

322
00:14:08,850 --> 00:14:14,210
don't we just make that part of it right

323
00:14:11,129 --> 00:14:17,309
why don't we just make the append tags

324
00:14:14,210 --> 00:14:19,350
be part of the fields and then off we

325
00:14:17,309 --> 00:14:21,839
would go right I mean that seems pretty

326
00:14:19,350 --> 00:14:23,490
straightforward and that might allow us

327
00:14:21,840 --> 00:14:26,759
to do some other things with tags later

328
00:14:23,490 --> 00:14:29,279
on in addition maybe if we wanted to I'm

329
00:14:26,759 --> 00:14:32,850
not sure how sensible that really is as

330
00:14:29,279 --> 00:14:39,779
something to do but you know we could

331
00:14:32,850 --> 00:14:42,540
see so if in here we take the attack

332
00:14:39,779 --> 00:14:44,879
that maybe hht fields has that append

333
00:14:42,539 --> 00:14:46,319
tags in it I mean the first question

334
00:14:44,879 --> 00:14:48,509
right is like what is the Pentax you can

335
00:14:46,320 --> 00:14:51,120
see it's just a tag array with nothing

336
00:14:48,509 --> 00:14:52,350
here right so I mean we could make the

337
00:14:51,120 --> 00:14:54,360
part of fields the other thing we could

338
00:14:52,350 --> 00:14:56,730
do is just say well meat you know maybe

339
00:14:54,360 --> 00:15:01,320
that gets passed as well right if this

340
00:14:56,730 --> 00:15:05,250
were like that then we could just have a

341
00:15:01,320 --> 00:15:07,379
pen tags and off you go right so it

342
00:15:05,250 --> 00:15:10,830
seems pretty straightforward for us to

343
00:15:07,379 --> 00:15:13,439
be able to do this and I think that you

344
00:15:10,830 --> 00:15:16,290
know that right there is an easy enough

345
00:15:13,440 --> 00:15:18,060
routine that we can just now call that

346
00:15:16,289 --> 00:15:18,990
you know call that part of the problem

347
00:15:18,059 --> 00:15:20,199
solved

348
00:15:18,990 --> 00:15:23,769
all we would do

349
00:15:20,200 --> 00:15:31,629
the you know tokenizer token the append

350
00:15:23,769 --> 00:15:37,240
tags and the fields right now there's

351
00:15:31,629 --> 00:15:39,279
some nuance here I think we would need

352
00:15:37,240 --> 00:15:42,639
the assets for it so we do need the

353
00:15:39,279 --> 00:15:44,500
context of the hht context past year but

354
00:15:42,639 --> 00:15:46,090
that's not the end of the world

355
00:15:44,500 --> 00:15:48,759
we obviously already bundled that stuff

356
00:15:46,090 --> 00:15:50,320
up for a reason so we would need one

357
00:15:48,759 --> 00:15:51,879
additional field there that's just so it

358
00:15:50,320 --> 00:15:54,190
has some place to talk to the you know

359
00:15:51,879 --> 00:15:57,370
it can have a route to get to the asset

360
00:15:54,190 --> 00:16:00,070
system so not a big deal there so I'll

361
00:15:57,370 --> 00:16:02,019
just put that in there and now we've got

362
00:16:00,070 --> 00:16:06,340
that extracted as something that we can

363
00:16:02,019 --> 00:16:08,769
share for multiple things right so what

364
00:16:06,340 --> 00:16:10,990
that allows me to do is say well okay

365
00:16:08,769 --> 00:16:15,309
now we can start to treat these things

366
00:16:10,990 --> 00:16:20,230
potentially as separate paths right

367
00:16:15,309 --> 00:16:24,279
I could choose instead of having parse

368
00:16:20,230 --> 00:16:29,289
top-level block as a thing I could start

369
00:16:24,279 --> 00:16:32,860
to peel off some of these operations

370
00:16:29,289 --> 00:16:36,339
right so if we look at what happens for

371
00:16:32,860 --> 00:16:38,980
example with is default what you can see

372
00:16:36,340 --> 00:16:42,850
is we're like intentionally avoiding

373
00:16:38,980 --> 00:16:47,170
most of the work that we were doing for

374
00:16:42,850 --> 00:16:50,860
is default we just say don't don't do it

375
00:16:47,169 --> 00:16:54,399
right so I might start by saying what if

376
00:16:50,860 --> 00:16:57,250
we just peeled the default part out of

377
00:16:54,399 --> 00:17:01,209
here and said that's no longer a thing

378
00:16:57,250 --> 00:17:04,950
we're gonna handle that back where we

379
00:17:01,210 --> 00:17:04,950
called parcel up top level block

380
00:17:09,838 --> 00:17:16,569
sorry typing errors I'm still split

381
00:17:13,328 --> 00:17:18,279
unlike my editor it's different on my

382
00:17:16,569 --> 00:17:19,629
work machine now than the one here which

383
00:17:18,279 --> 00:17:22,180
is a little bit crazy

384
00:17:19,630 --> 00:17:25,300
we'll fix that eventually but it causes

385
00:17:22,180 --> 00:17:27,339
me no end to the typing problems so

386
00:17:25,299 --> 00:17:29,649
anyway on parse top level block here's

387
00:17:27,338 --> 00:17:32,619
where we actually call that code what

388
00:17:29,650 --> 00:17:35,350
I'd rather do I think here is just say

389
00:17:32,619 --> 00:17:37,659
okay let's do a little bit more work

390
00:17:35,349 --> 00:17:42,879
here to see whether or not we're setting

391
00:17:37,660 --> 00:17:45,250
the default or not right so if this

392
00:17:42,880 --> 00:17:47,320
thing was the default then we're gonna

393
00:17:45,250 --> 00:17:50,380
do one thing if it's not the default

394
00:17:47,319 --> 00:17:55,049
we're gonna do another and that sets us

395
00:17:50,380 --> 00:17:55,050
up to start being able to actually like

396
00:17:57,630 --> 00:18:08,010
notice realized we could also do this

397
00:18:03,970 --> 00:18:18,730
without knowing the HHA right so

398
00:18:08,009 --> 00:18:20,379
actually I think I think this may be

399
00:18:18,730 --> 00:18:23,620
actually better than what we were doing

400
00:18:20,380 --> 00:18:26,980
because we don't need the HHA to parse

401
00:18:23,619 --> 00:18:34,349
that parse the default block so actually

402
00:18:26,980 --> 00:18:36,940
this code can actually can do this and

403
00:18:34,349 --> 00:18:39,129
now we can allow default blocks to

404
00:18:36,940 --> 00:18:41,289
happen without even having an HHA

405
00:18:39,130 --> 00:18:44,110
specified yet and that's actually more

406
00:18:41,289 --> 00:18:47,230
powerful so that's an improvement over

407
00:18:44,109 --> 00:18:48,849
what we had so if we wanted to do that

408
00:18:47,230 --> 00:18:51,539
what we could do now is called parse

409
00:18:48,849 --> 00:18:51,539
default

410
00:18:55,700 --> 00:18:59,420
and that would allow us and I guess we

411
00:18:57,799 --> 00:19:03,109
don't really even need to pass the token

412
00:18:59,420 --> 00:19:10,850
there that would allow us to make this

413
00:19:03,109 --> 00:19:13,729
routine be a little more sensible so in

414
00:19:10,849 --> 00:19:20,149
here we could say all right here's you

415
00:19:13,730 --> 00:19:21,589
know what we're doing we're going to do

416
00:19:20,150 --> 00:19:24,050
exactly what we're doing before where we

417
00:19:21,589 --> 00:19:26,750
grab the default fields we're gonna loop

418
00:19:24,049 --> 00:19:28,879
over the contents of this block and then

419
00:19:26,750 --> 00:19:31,279
we're going to automatically do the

420
00:19:28,880 --> 00:19:34,280
thing that we were only doing on is

421
00:19:31,279 --> 00:19:42,920
default here right so that case goes

422
00:19:34,279 --> 00:19:44,750
away and now we can just do a check on

423
00:19:42,920 --> 00:19:45,860
the if parsing for the tokenizer and say

424
00:19:44,750 --> 00:19:47,900
look

425
00:19:45,859 --> 00:19:49,879
assuming that we didn't have any errors

426
00:19:47,900 --> 00:19:53,600
go ahead and set the default fields to

427
00:19:49,880 --> 00:19:55,640
whatever we parsed right um so now I can

428
00:19:53,599 --> 00:19:58,159
actually go in here and start pulling

429
00:19:55,640 --> 00:19:59,960
out those is default parts we know that

430
00:19:58,160 --> 00:20:05,120
this will never happen now because it

431
00:19:59,960 --> 00:20:07,100
doesn't exist as a code path so in here

432
00:20:05,119 --> 00:20:10,129
what we can do is actually do the block

433
00:20:07,099 --> 00:20:13,609
parsing part of this I'm gonna go ahead

434
00:20:10,130 --> 00:20:15,800
and just make that out of pieces if that

435
00:20:13,609 --> 00:20:20,629
makes sense so in parse default block

436
00:20:15,799 --> 00:20:27,169
here we're gonna do while parsing we're

437
00:20:20,630 --> 00:20:30,020
going to do exactly this I think right

438
00:20:27,170 --> 00:20:34,660
we need to be able to parse an open

439
00:20:30,019 --> 00:20:34,660
brace though there it is

440
00:20:35,710 --> 00:20:42,049
and we never rewrite this so I think

441
00:20:39,289 --> 00:20:44,690
it's sufficient I believe for us to

442
00:20:42,049 --> 00:20:48,409
literally just parse like to do a copy

443
00:20:44,690 --> 00:20:52,900
of everything that exists in the entire

444
00:20:48,410 --> 00:20:55,460
token stream if that makes sense so

445
00:20:52,900 --> 00:20:58,460
pretty much every time through we can do

446
00:20:55,460 --> 00:21:02,769
that where we and in fact I guess I

447
00:20:58,460 --> 00:21:02,769
could just do it up here right

448
00:21:03,038 --> 00:21:10,398
so if we ever hit the close race then

449
00:21:06,528 --> 00:21:12,349
what we do is require I don't know why

450
00:21:10,398 --> 00:21:13,368
was that an open brace finger fired

451
00:21:12,349 --> 00:21:15,079
there I don't know what was going on

452
00:21:13,368 --> 00:21:17,118
there sorry so we need to require that

453
00:21:15,079 --> 00:21:19,460
open brace I just want to do this copy

454
00:21:17,118 --> 00:21:27,678
here where we actually do everything up

455
00:21:19,460 --> 00:21:38,058
to the close brace token in fact I guess

456
00:21:27,679 --> 00:21:39,470
I could do it this way so this is just

457
00:21:38,058 --> 00:21:42,079
letting me say look I'm gonna parse

458
00:21:39,470 --> 00:21:45,048
everything that comes out of here I'm

459
00:21:42,079 --> 00:21:46,819
gonna get the the tokens sequentially if

460
00:21:45,048 --> 00:21:48,858
I see the closed brace then we're gonna

461
00:21:46,819 --> 00:21:51,288
finish and I'm just going to remember

462
00:21:48,858 --> 00:21:52,939
where that was so I can tell this thing

463
00:21:51,288 --> 00:21:55,759
to copy all of that into the output if

464
00:21:52,940 --> 00:21:57,649
we're rewriting the hht due to some like

465
00:21:55,759 --> 00:22:01,759
edit that our editor did or whenever it

466
00:21:57,648 --> 00:22:03,349
right so then inside here there isn't

467
00:22:01,759 --> 00:22:05,298
any like none of these things are

468
00:22:03,349 --> 00:22:07,368
relevant so it's only this one that

469
00:22:05,298 --> 00:22:10,249
we're doing so we really just have a

470
00:22:07,368 --> 00:22:11,808
close race and then if it wasn't the

471
00:22:10,249 --> 00:22:15,079
close race then we're just gonna try to

472
00:22:11,808 --> 00:22:17,079
handle any fields this append tags will

473
00:22:15,079 --> 00:22:21,319
be zero cuz we're not gonna allow tags

474
00:22:17,079 --> 00:22:26,628
inside here and that should do it

475
00:22:21,319 --> 00:22:29,450
I think I think that's it so at the end

476
00:22:26,628 --> 00:22:30,949
oh and I guess we require some ink alone

477
00:22:29,450 --> 00:22:35,980
so I guess we don't even need the closed

478
00:22:30,950 --> 00:22:35,980
brace here I guess we can even do this

479
00:22:38,400 --> 00:22:48,090
like that so that's even easier right

480
00:22:44,539 --> 00:22:50,460
that all seems good so we come in here

481
00:22:48,089 --> 00:22:52,470
we'd say part Steve a block grab that

482
00:22:50,460 --> 00:22:55,440
open brace we loop through everything

483
00:22:52,470 --> 00:22:57,240
that's in here one at a time if we ever

484
00:22:55,440 --> 00:22:59,220
see the close brace we're done if we

485
00:22:57,240 --> 00:23:01,589
don't we just assume it's a field we try

486
00:22:59,220 --> 00:23:05,430
to process it that way right up till the

487
00:23:01,589 --> 00:23:08,659
end we don't need this really this is

488
00:23:05,430 --> 00:23:11,160
just a require semicolon I believe

489
00:23:08,660 --> 00:23:13,620
because these don't actually ever ask

490
00:23:11,160 --> 00:23:15,900
for one as you can see so it's really

491
00:23:13,619 --> 00:23:18,928
just like every time through the loop we

492
00:23:15,900 --> 00:23:23,550
require semicolon that's just a hard

493
00:23:18,929 --> 00:23:26,640
fact right so I think that works you

494
00:23:23,549 --> 00:23:28,289
don't see any other issues with it so I

495
00:23:26,640 --> 00:23:30,929
think that's all we need and then we

496
00:23:28,289 --> 00:23:33,450
just need to make sure that in here we

497
00:23:30,929 --> 00:23:37,230
only allow the tags field if there was

498
00:23:33,450 --> 00:23:40,558
an append tags so for example in here we

499
00:23:37,230 --> 00:23:42,509
would do this because if a pen tags

500
00:23:40,558 --> 00:23:43,950
doesn't exist then we don't want to

501
00:23:42,509 --> 00:23:45,990
allow anyone to specify a tags field

502
00:23:43,950 --> 00:23:47,220
because obviously that's not allowed for

503
00:23:45,990 --> 00:23:52,920
the person who's calling us specifically

504
00:23:47,220 --> 00:23:55,829
in the default block right so that seems

505
00:23:52,920 --> 00:23:58,110
like it's all good yeah parse default

506
00:23:55,829 --> 00:23:59,609
block is supposed to take the token here

507
00:23:58,109 --> 00:24:00,928
I guess even though we don't really need

508
00:23:59,609 --> 00:24:05,609
to pass that I'm just keeping a symmetry

509
00:24:00,929 --> 00:24:07,259
with this and that's all good right so

510
00:24:05,609 --> 00:24:09,629
now that we've extracted default block

511
00:24:07,259 --> 00:24:12,319
it should also now be possible for us to

512
00:24:09,630 --> 00:24:15,690
extract a second block which is fonts

513
00:24:12,319 --> 00:24:18,359
and called those as a separate processor

514
00:24:15,690 --> 00:24:20,370
as well which is exactly what we want to

515
00:24:18,359 --> 00:24:22,529
do because our parsing is going to be

516
00:24:20,369 --> 00:24:24,149
really specialized in weird because it

517
00:24:22,529 --> 00:24:26,190
just has a ton of data that other things

518
00:24:24,150 --> 00:24:27,420
don't have and we don't really want to

519
00:24:26,190 --> 00:24:30,390
force it through the same path that

520
00:24:27,420 --> 00:24:32,670
everyone else was using so this is

521
00:24:30,390 --> 00:24:35,580
parsed font block the exact same things

522
00:24:32,670 --> 00:24:37,800
are going to happen here probably almost

523
00:24:35,579 --> 00:24:40,289
certainly right it's gonna look a lot

524
00:24:37,799 --> 00:24:44,250
like this but the interior here is going

525
00:24:40,289 --> 00:24:47,789
to be completely different so I think

526
00:24:44,250 --> 00:24:49,409
that's all fine the append tags is

527
00:24:47,789 --> 00:24:56,970
actually a thing now

528
00:24:49,409 --> 00:25:05,090
that we will have to have and yeah so I

529
00:24:56,970 --> 00:25:05,089
think we just want to grab that tagger a

530
00:25:05,929 --> 00:25:09,169
there it is

531
00:25:13,380 --> 00:25:20,520
I think we just want to do it like this

532
00:25:16,349 --> 00:25:24,659
right so what we need to do is add the

533
00:25:20,519 --> 00:25:27,048
fields here that we want for our font we

534
00:25:24,660 --> 00:25:30,269
can require them in a specific order

535
00:25:27,048 --> 00:25:33,779
because these are generated so if we

536
00:25:30,269 --> 00:25:35,759
want this thing to have specific stuff

537
00:25:33,779 --> 00:25:40,500
occur in specific order we can't just do

538
00:25:35,759 --> 00:25:42,569
that for example I don't know if we have

539
00:25:40,500 --> 00:25:48,240
a require call for identifiers but we

540
00:25:42,569 --> 00:25:53,569
might looks like we don't have a require

541
00:25:48,240 --> 00:25:53,569
to identifier I'm gonna add that though

542
00:25:53,808 --> 00:25:58,950
yeah so right here where we call require

543
00:25:56,880 --> 00:26:00,750
token what I want to do is I want to

544
00:25:58,950 --> 00:26:02,220
have a thing that's similar to that so I

545
00:26:00,750 --> 00:26:08,369
want to have a thing that's like require

546
00:26:02,220 --> 00:26:10,319
identifier that basically says I want it

547
00:26:08,369 --> 00:26:13,469
to be an identifier and I want its value

548
00:26:10,319 --> 00:26:15,178
to be this that way it's basically just

549
00:26:13,470 --> 00:26:17,190
calling it this and I guess since we're

550
00:26:15,179 --> 00:26:18,960
using Cara starts and we don't we can do

551
00:26:17,190 --> 00:26:23,548
it like this because we know that there

552
00:26:18,960 --> 00:26:26,460
are care stars always so inside the the

553
00:26:23,548 --> 00:26:28,259
tokenizer now we could just say I want

554
00:26:26,460 --> 00:26:35,940
an identifier so I want to be able to do

555
00:26:28,259 --> 00:26:39,058
require token and get me an in a fire

556
00:26:35,940 --> 00:26:43,230
for sure and then what I want to do is

557
00:26:39,058 --> 00:26:49,139
say also this I think is probably just

558
00:26:43,230 --> 00:26:52,140
that probably not all right so then what

559
00:26:49,140 --> 00:26:57,409
I want to do is say look if token equals

560
00:26:52,140 --> 00:26:59,159
ID match I think that's all I need right

561
00:26:57,409 --> 00:27:02,640
yeah

562
00:26:59,159 --> 00:27:06,770
if this is okay then we're good right if

563
00:27:02,640 --> 00:27:06,770
it's not then we're airing out

564
00:27:19,380 --> 00:27:26,470
right so this way we can say hey we

565
00:27:24,210 --> 00:27:29,230
needed to see this identifier at this

566
00:27:26,470 --> 00:27:31,210
exact time so and we didn't see it so

567
00:27:29,230 --> 00:27:34,750
that's just a hard error you know we're

568
00:27:31,210 --> 00:27:36,789
not gonna go any further so I think we

569
00:27:34,750 --> 00:27:43,349
can do that because now we can just say

570
00:27:36,789 --> 00:27:48,490
look require identifiers require token

571
00:27:43,349 --> 00:27:50,949
and then get the next token I guess

572
00:27:48,490 --> 00:27:53,769
require token like a number or whatever

573
00:27:50,950 --> 00:27:55,809
right and so we here we can say I know I

574
00:27:53,769 --> 00:27:58,000
want to see what were those things that

575
00:27:55,809 --> 00:28:00,579
we had inside our fonts there you know I

576
00:27:58,000 --> 00:28:02,980
want to see one past highest code point

577
00:28:00,579 --> 00:28:05,949
you know what I mean then I want to see

578
00:28:02,980 --> 00:28:07,299
an equal sign and then I want to see the

579
00:28:05,950 --> 00:28:09,580
value that we're talking about just

580
00:28:07,299 --> 00:28:12,309
hard-coded it's got to be these in this

581
00:28:09,579 --> 00:28:14,529
order just make sure we have them and

582
00:28:12,309 --> 00:28:16,179
then what we'd end up with is a bunch of

583
00:28:14,529 --> 00:28:19,509
things that look like this to read

584
00:28:16,180 --> 00:28:20,740
fields so we would say why can I not get

585
00:28:19,509 --> 00:28:25,660
to complete there there go

586
00:28:20,740 --> 00:28:30,210
so you know I want to see this then I

587
00:28:25,660 --> 00:28:33,490
want to see this and then I want to see

588
00:28:30,210 --> 00:28:37,600
and in an integer or whatever right so

589
00:28:33,490 --> 00:28:46,150
what I don't know what the value of that

590
00:28:37,599 --> 00:28:48,639
thing is number right now what you can

591
00:28:46,150 --> 00:28:51,070
see is we're gonna do this like a bunch

592
00:28:48,640 --> 00:28:55,720
of times right so there's you know we'd

593
00:28:51,069 --> 00:28:57,579
be doing this and stuff so you can see

594
00:28:55,720 --> 00:29:01,180
that this is basis a template for

595
00:28:57,579 --> 00:29:04,119
reading fields so what I want to do here

596
00:29:01,180 --> 00:29:09,940
is say why don't we just make that be

597
00:29:04,119 --> 00:29:14,229
its own thing I don't know if we want

598
00:29:09,940 --> 00:29:17,080
that in necessarily the tokenizer part

599
00:29:14,230 --> 00:29:21,970
of things itself but what we can do is

600
00:29:17,079 --> 00:29:24,009
say require field is out here you pass

601
00:29:21,970 --> 00:29:28,069
us a tokenizer

602
00:29:24,009 --> 00:29:31,368
you see what kind of token you wanted

603
00:29:28,069 --> 00:29:36,408
the field to be and what the name of it

604
00:29:31,368 --> 00:29:38,949
was right and that is all we need to do

605
00:29:36,409 --> 00:29:42,049
this entire process for every field we

606
00:29:38,950 --> 00:29:44,360
can then require whatever identifier is

607
00:29:42,048 --> 00:29:48,019
that you want to we can require the

608
00:29:44,359 --> 00:29:49,908
equals we can then require the you know

609
00:29:48,019 --> 00:29:52,220
type of token you want in the field to

610
00:29:49,909 --> 00:29:55,519
be and then we can return it and all of

611
00:29:52,220 --> 00:29:57,350
that just works so then we can say one

612
00:29:55,519 --> 00:29:59,149
past highest cone point equals require

613
00:29:57,349 --> 00:30:08,178
field oh and you know what we can also

614
00:29:59,148 --> 00:30:10,308
require the semicolon okay so in here we

615
00:30:08,179 --> 00:30:13,369
can then require every field that we

616
00:30:10,308 --> 00:30:17,749
want really simply with just one line

617
00:30:13,368 --> 00:30:19,459
say a bunch of those don't ask you why

618
00:30:17,749 --> 00:30:21,139
duplicated that word even though we're

619
00:30:19,460 --> 00:30:23,058
only gonna have it once so we can just

620
00:30:21,138 --> 00:30:26,238
say all right we want to read that we

621
00:30:23,058 --> 00:30:32,980
want to read the glyph count what else

622
00:30:26,239 --> 00:30:39,700
we got stuff in here what is it again

623
00:30:32,980 --> 00:30:50,259
sender descender right we want that bat

624
00:30:39,700 --> 00:30:50,259
pasting back here as well and externally

625
00:30:53,669 --> 00:30:58,538
so at that point you can see how easy it

626
00:30:56,618 --> 00:31:00,338
is for us to just make a template

627
00:30:58,538 --> 00:31:02,048
essentially that says everything's got

628
00:31:00,338 --> 00:31:03,999
to have this stuff at the top and we

629
00:31:02,048 --> 00:31:06,219
know that it's easy to do because our

630
00:31:03,999 --> 00:31:08,558
generator does it humans don't have to

631
00:31:06,219 --> 00:31:11,379
touch it so this part will just should

632
00:31:08,558 --> 00:31:14,888
just work right and we can put those

633
00:31:11,378 --> 00:31:16,478
things in there after those things

634
00:31:14,888 --> 00:31:20,228
you're welcome to put whatever you want

635
00:31:16,479 --> 00:31:23,019
but those have to be there right so that

636
00:31:20,229 --> 00:31:25,778
seems reasonable we could instead of

637
00:31:23,019 --> 00:31:28,690
going a different route and said like

638
00:31:25,778 --> 00:31:30,009
let's put a fixed like thing of like

639
00:31:28,690 --> 00:31:32,769
font data in there or something like

640
00:31:30,009 --> 00:31:34,479
that I don't really care we could do it

641
00:31:32,769 --> 00:31:37,419
either way I don't I don't really care

642
00:31:34,479 --> 00:31:39,548
one way or the other but here's that you

643
00:31:37,419 --> 00:31:41,369
know here's this version of it and we'll

644
00:31:39,548 --> 00:31:43,719
see how that goes

645
00:31:41,368 --> 00:31:51,458
all right so that'll parse the font

646
00:31:43,719 --> 00:31:53,078
template for us if we get past that then

647
00:31:51,459 --> 00:31:54,909
we can start to do work with it

648
00:31:53,078 --> 00:31:58,088
right we can create an array of that

649
00:31:54,909 --> 00:32:00,969
size to hold the glyphs that come in we

650
00:31:58,088 --> 00:32:06,818
can create a code point table for

651
00:32:00,969 --> 00:32:07,989
storing the horizontal advance stuff or

652
00:32:06,818 --> 00:32:11,288
other things like that right so we can

653
00:32:07,989 --> 00:32:13,088
we do whatever we want at this point I

654
00:32:11,288 --> 00:32:14,919
think the only thing we really need

655
00:32:13,088 --> 00:32:18,548
though is this I think everything else

656
00:32:14,919 --> 00:32:21,099
is pretty much not really that important

657
00:32:18,548 --> 00:32:24,668
to have up front and so one way to look

658
00:32:21,098 --> 00:32:27,158
at it is we could also make this part of

659
00:32:24,669 --> 00:32:30,519
the this part where we would do the

660
00:32:27,159 --> 00:32:32,769
require field thing we could also make

661
00:32:30,519 --> 00:32:34,358
that optional for these the order

662
00:32:32,769 --> 00:32:37,899
optional for these things and it's only

663
00:32:34,358 --> 00:32:39,489
glyph count that has to come first we

664
00:32:37,898 --> 00:32:40,778
could do that later too I don't know

665
00:32:39,489 --> 00:32:43,449
whether we care enough but it's just

666
00:32:40,778 --> 00:32:46,179
something to think about all right so

667
00:32:43,449 --> 00:32:48,609
when we're done here and we go to

668
00:32:46,179 --> 00:32:51,309
actually create this font we should be

669
00:32:48,608 --> 00:32:54,098
able to make one of these that gets kind

670
00:32:51,308 --> 00:32:56,378
of stuck into the you know in the font

671
00:32:54,098 --> 00:32:57,668
file so we're gonna presumably end up in

672
00:32:56,378 --> 00:32:59,708
a situation where you know we're not

673
00:32:57,669 --> 00:33:03,249
sending the default fields anymore

674
00:32:59,709 --> 00:33:05,080
we're parsing the font block here and so

675
00:33:03,249 --> 00:33:08,289
at some point I'm gonna have

676
00:33:05,079 --> 00:33:09,909
a thing that's like this right and we

677
00:33:08,289 --> 00:33:12,069
don't know you know how we're gonna

678
00:33:09,910 --> 00:33:14,529
write that out exactly but we do know

679
00:33:12,069 --> 00:33:17,019
that all of this stuff now can get set

680
00:33:14,529 --> 00:33:18,759
so like one past highest code point will

681
00:33:17,019 --> 00:33:20,440
equal something the glyph count will

682
00:33:18,759 --> 00:33:22,210
equal something the ascender height will

683
00:33:20,440 --> 00:33:28,240
equal something the D Center height will

684
00:33:22,210 --> 00:33:29,740
equal something right so I know I'm

685
00:33:28,240 --> 00:33:31,599
gonna need to fill that out and I'm

686
00:33:29,740 --> 00:33:33,430
gonna have to feel that out from these

687
00:33:31,599 --> 00:33:36,789
right all these things are gonna have to

688
00:33:33,430 --> 00:33:39,009
be filled out from here and the way that

689
00:33:36,789 --> 00:33:43,059
I'm gonna have to do that is the

690
00:33:39,009 --> 00:33:46,269
tokenizer has ways of actually getting

691
00:33:43,059 --> 00:33:47,559
the value out of it right you it will

692
00:33:46,269 --> 00:33:50,200
have filled these out already

693
00:33:47,559 --> 00:33:52,000
so in theory I should be able to come

694
00:33:50,200 --> 00:33:54,960
through here and say look just give me

695
00:33:52,000 --> 00:33:57,519
like whatever these things are and

696
00:33:54,960 --> 00:33:59,500
probably I'll have to validate them at

697
00:33:57,519 --> 00:34:00,970
least a little bit so we may want to

698
00:33:59,500 --> 00:34:03,130
like require that they're not negative

699
00:34:00,970 --> 00:34:05,380
numbers or you know whatever else but

700
00:34:03,130 --> 00:34:21,910
otherwise it's pretty straightforward to

701
00:34:05,380 --> 00:34:26,079
just do it's pretty straightforward to

702
00:34:21,909 --> 00:34:28,420
just pull those out so that would get us

703
00:34:26,079 --> 00:34:30,460
the top part of the font like the header

704
00:34:28,420 --> 00:34:32,320
information of it right which says all

705
00:34:30,460 --> 00:34:34,720
this stuff what it doesn't give us is

706
00:34:32,320 --> 00:34:37,900
the horizontal advance or the code point

707
00:34:34,719 --> 00:34:39,689
data that's basically like which you

708
00:34:37,900 --> 00:34:43,960
know what each of the code points

709
00:34:39,690 --> 00:34:46,000
actually is for each of our glyphs so we

710
00:34:43,960 --> 00:34:49,720
need to be able to write this data out

711
00:34:46,000 --> 00:34:51,579
to the file and in order to write down

712
00:34:49,719 --> 00:34:55,659
to the file we're gonna have to actually

713
00:34:51,579 --> 00:34:59,769
produce it ourselves so I think what we

714
00:34:55,659 --> 00:35:01,989
need here is something like this once we

715
00:34:59,769 --> 00:35:04,480
actually determine that we've got valid

716
00:35:01,989 --> 00:35:07,479
data I mean to the extent that we think

717
00:35:04,480 --> 00:35:10,719
we do you know maybe we do something

718
00:35:07,480 --> 00:35:12,130
like this where we say all right and I

719
00:35:10,719 --> 00:35:13,959
put the glyph count first here because

720
00:35:12,130 --> 00:35:17,220
these may we may move inside but this

721
00:35:13,960 --> 00:35:19,010
point this one we definitely never would

722
00:35:17,219 --> 00:35:21,289
so then I'm gonna say okay

723
00:35:19,010 --> 00:35:22,370
the glyph count equals the glyph count

724
00:35:21,289 --> 00:35:25,159
token s32

725
00:35:22,369 --> 00:35:26,809
when this actually gets specified we're

726
00:35:25,159 --> 00:35:30,739
gonna assert that it's like greater than

727
00:35:26,809 --> 00:35:33,969
zero basically right so we'll just say

728
00:35:30,739 --> 00:35:38,029
like if whiff count took necessary to

729
00:35:33,969 --> 00:35:47,539
its greater than zero and maybe we check

730
00:35:38,030 --> 00:35:51,470
the parsing level here as well it's like

731
00:35:47,539 --> 00:35:54,889
we must have lost the sauce beam not

732
00:35:51,469 --> 00:35:56,689
sure I heard her food dispenser go off

733
00:35:54,889 --> 00:35:57,440
so at that point you know she's not

734
00:35:56,690 --> 00:36:01,880
gonna be sticking around

735
00:35:57,440 --> 00:36:03,440
I don't know when she actually left so

736
00:36:01,880 --> 00:36:05,840
we've lost post power we have no more

737
00:36:03,440 --> 00:36:08,000
plus power we're programming on our own

738
00:36:05,840 --> 00:36:10,180
now which is less good but what are we

739
00:36:08,000 --> 00:36:12,579
gonna do yeah must you must persevere

740
00:36:10,179 --> 00:36:15,739
cats gotta eat sometime

741
00:36:12,579 --> 00:36:18,230
all right so we're gonna see the parsing

742
00:36:15,739 --> 00:36:20,000
here you know if the Toth if we if there

743
00:36:18,230 --> 00:36:22,250
are errors in the parse up to this point

744
00:36:20,000 --> 00:36:24,289
then don't bother working on this stuff

745
00:36:22,250 --> 00:36:26,900
assuming that we see the Douglas count

746
00:36:24,289 --> 00:36:28,519
token has a value that seems like it's

747
00:36:26,900 --> 00:36:31,099
going to be in range we'll go ahead and

748
00:36:28,519 --> 00:36:34,190
take that and then we'll try to actually

749
00:36:31,099 --> 00:36:36,710
process going forward so what we would

750
00:36:34,190 --> 00:36:40,070
need to do is allocate space for this

751
00:36:36,710 --> 00:36:43,929
storage using temporary storage here so

752
00:36:40,070 --> 00:36:43,930
first we would allocate the code points

753
00:36:44,440 --> 00:36:51,349
like so and in here we would say HS a

754
00:36:49,130 --> 00:36:54,470
font glyph right and we want this many

755
00:36:51,349 --> 00:36:57,579
of them same thing with this at the

756
00:36:54,469 --> 00:36:57,579
horizontal advance table

757
00:37:00,820 --> 00:37:06,500
I'm sure why we're still saying r32 and

758
00:37:04,369 --> 00:37:09,170
that's gonna be a square great so that's

759
00:37:06,500 --> 00:37:11,269
a that's an N squared table there that's

760
00:37:09,170 --> 00:37:13,700
actually holding for every glyph what

761
00:37:11,269 --> 00:37:17,960
every other glyphs advance would be for

762
00:37:13,699 --> 00:37:19,639
you know if they occur as a pair that

763
00:37:17,960 --> 00:37:22,190
would give us a space we need to store

764
00:37:19,639 --> 00:37:25,009
it and then we can parse each of these

765
00:37:22,190 --> 00:37:31,460
we're effectively looking for a token of

766
00:37:25,010 --> 00:37:33,260
type glyph and if we get that what we

767
00:37:31,460 --> 00:37:35,480
want to see is the code point and the

768
00:37:33,260 --> 00:37:39,620
horizontal advance I'm sorry just the

769
00:37:35,480 --> 00:37:42,050
code point and the bitmap ID for it if

770
00:37:39,619 --> 00:37:44,000
you look here I think we did we

771
00:37:42,050 --> 00:37:46,789
neglected as specify the code point so

772
00:37:44,000 --> 00:37:49,750
if you look here we we specified the

773
00:37:46,789 --> 00:37:56,179
bitmap we didn't specify

774
00:37:49,750 --> 00:37:59,750
unfortunately the we didn't specify the

775
00:37:56,179 --> 00:38:02,329
the code point only the alignment of the

776
00:37:59,750 --> 00:38:04,400
bitmap so we've got two out of the three

777
00:38:02,329 --> 00:38:06,099
things we need we'll have to add one

778
00:38:04,400 --> 00:38:08,269
here which is literally just a number

779
00:38:06,099 --> 00:38:09,559
that is the Unicode code point

780
00:38:08,269 --> 00:38:11,210
represented by this particular glyph

781
00:38:09,559 --> 00:38:15,619
because remember the glyphs are packed

782
00:38:11,210 --> 00:38:17,269
so if you use a total of 500 code points

783
00:38:15,619 --> 00:38:20,089
from the unicode code set unicode code

784
00:38:17,269 --> 00:38:22,880
set for a particular font then there are

785
00:38:20,090 --> 00:38:25,880
only 500 glyphs but there may be a very

786
00:38:22,880 --> 00:38:28,130
wide range of code points covered by

787
00:38:25,880 --> 00:38:32,930
those 500 glyphs so that's a very sparse

788
00:38:28,130 --> 00:38:36,349
array so what we want there is just a

789
00:38:32,929 --> 00:38:39,079
way of understanding for each glyph in

790
00:38:36,349 --> 00:38:43,789
the packed glyph array what's the actual

791
00:38:39,079 --> 00:38:47,539
code point that that glyph is you know

792
00:38:43,789 --> 00:38:52,400
it's mapped to at runtime when we go

793
00:38:47,539 --> 00:38:54,590
here to the you know glyph processing

794
00:38:52,400 --> 00:38:57,079
itself and we parse that stuff oh you

795
00:38:54,590 --> 00:38:59,960
know we load that stuff in what we need

796
00:38:57,079 --> 00:39:02,949
to do here is a little bit complicated

797
00:38:59,960 --> 00:39:06,170
we actually have to process the bitmaps

798
00:39:02,949 --> 00:39:09,649
separately so we have to issue a load

799
00:39:06,170 --> 00:39:12,769
bitmap at will an import bitmap call for

800
00:39:09,650 --> 00:39:13,550
every single one of these lines that's

801
00:39:12,769 --> 00:39:15,559
different than what we

802
00:39:13,550 --> 00:39:18,380
before because remember what we were

803
00:39:15,559 --> 00:39:21,429
doing before is we'd only do for every

804
00:39:18,380 --> 00:39:27,710
block one file ingest so files

805
00:39:21,429 --> 00:39:30,859
effectively mapped directly to the

806
00:39:27,710 --> 00:39:33,650
blocks themselves but here each file is

807
00:39:30,860 --> 00:39:37,970
mapped to a line not a particularly

808
00:39:33,650 --> 00:39:40,670
difficult or weird situation it's just

809
00:39:37,969 --> 00:39:50,449
that's what's going on we also know we

810
00:39:40,670 --> 00:39:51,800
have the horizontal advance so this is

811
00:39:50,449 --> 00:39:54,079
the thing that we're gonna have to parse

812
00:39:51,800 --> 00:39:58,610
an array of numbers out of so that's

813
00:39:54,079 --> 00:40:01,759
another thing we've got to do and so I

814
00:39:58,610 --> 00:40:05,000
probably say let's focus on the glyph

815
00:40:01,760 --> 00:40:06,500
part of things here just because that

816
00:40:05,000 --> 00:40:09,889
part's a little bit better understood at

817
00:40:06,500 --> 00:40:11,659
the moment I and this part is I should

818
00:40:09,889 --> 00:40:13,309
say I mean the opposite that part's a

819
00:40:11,659 --> 00:40:15,049
little less understood this is literally

820
00:40:13,309 --> 00:40:17,210
just gonna be calling the parser this

821
00:40:15,050 --> 00:40:20,720
many times right the N squared number of

822
00:40:17,210 --> 00:40:22,610
times to get that many integers in

823
00:40:20,719 --> 00:40:23,239
followed by a comma so that's you know

824
00:40:22,610 --> 00:40:28,400
that's nothing

825
00:40:23,239 --> 00:40:30,799
oh hello hello all right so I guess

826
00:40:28,400 --> 00:40:32,869
feeding time is over and we've restored

827
00:40:30,800 --> 00:40:35,630
plus power back to the programming

828
00:40:32,869 --> 00:40:41,000
stream which is very important hello

829
00:40:35,630 --> 00:40:43,849
Soph me how's it going do you have

830
00:40:41,000 --> 00:40:47,179
opinions on the code do you what do you

831
00:40:43,849 --> 00:40:51,349
think here let me show you what do you

832
00:40:47,179 --> 00:40:56,449
think of that code right there is it

833
00:40:51,349 --> 00:40:59,269
good to look up at the camera no all

834
00:40:56,449 --> 00:41:02,059
right you can just do your thing if you

835
00:40:59,269 --> 00:41:04,190
need to type you can just paw just paw

836
00:41:02,059 --> 00:41:07,519
at the keyboard at whatever you think is

837
00:41:04,190 --> 00:41:11,869
wrong with it just don't shut off the

838
00:41:07,519 --> 00:41:14,090
machine that has happened before she she

839
00:41:11,869 --> 00:41:17,650
definitely has shut off my laptop before

840
00:41:14,090 --> 00:41:17,650
when I was in the middle of something

841
00:41:18,739 --> 00:41:23,059
and that can be kind of a problem but

842
00:41:20,659 --> 00:41:24,250
you know maybe she didn't like what I

843
00:41:23,059 --> 00:41:29,329
was doing

844
00:41:24,250 --> 00:41:33,590
it's entirely possible all right soft

845
00:41:29,329 --> 00:41:36,199
bean okay all right so we're gonna be

846
00:41:33,590 --> 00:41:38,180
we're gonna be cat lap programming here

847
00:41:36,199 --> 00:41:49,189
which is definitely a little bit harder

848
00:41:38,179 --> 00:41:52,849
I don't know if you can see that's a

849
00:41:49,190 --> 00:41:57,130
good girl she's shedding her undercoat

850
00:41:52,849 --> 00:42:00,259
right now so she is like just literally

851
00:41:57,130 --> 00:42:04,550
producing a cat an entire extra cat's

852
00:42:00,260 --> 00:42:06,920
worth of fur like every day which which

853
00:42:04,550 --> 00:42:09,710
is kind of difficult to manage I

854
00:42:06,920 --> 00:42:12,230
probably I need to get like some more

855
00:42:09,710 --> 00:42:14,860
brushes in here so that like I have a

856
00:42:12,230 --> 00:42:19,719
brush all for whenever she's around

857
00:42:14,860 --> 00:42:19,720
because she really needs the brushing

858
00:42:19,840 --> 00:42:26,600
she's just shedding so much for it's

859
00:42:25,070 --> 00:42:29,539
just this has happens in the springtime

860
00:42:26,599 --> 00:42:31,309
because she get I think because she does

861
00:42:29,539 --> 00:42:33,800
sit in the Sun a lot I think she does do

862
00:42:31,309 --> 00:42:35,210
the coat cycle that you know an outdoor

863
00:42:33,800 --> 00:42:40,060
cat would do even though she's not an

864
00:42:35,210 --> 00:42:41,300
outdoor cat um so it's very okay okay

865
00:42:40,059 --> 00:42:43,039
all right

866
00:42:41,300 --> 00:42:44,900
do you want to programs you want to help

867
00:42:43,039 --> 00:42:48,469
program can you help us program we got

868
00:42:44,900 --> 00:42:50,050
to do this font routine okay we're gonna

869
00:42:48,469 --> 00:42:52,699
do the fun okay

870
00:42:50,050 --> 00:42:55,640
we're gonna do the font routine you can

871
00:42:52,699 --> 00:42:58,849
go look for won't you help us by keeping

872
00:42:55,639 --> 00:43:01,339
watch on the birds outside and then

873
00:42:58,849 --> 00:43:03,679
we'll write the font routine and you can

874
00:43:01,340 --> 00:43:07,880
check it when we're done and make sure

875
00:43:03,679 --> 00:43:09,369
it's good okay okay do you mean to put

876
00:43:07,880 --> 00:43:15,970
you in your seat do you need a lift

877
00:43:09,369 --> 00:43:15,969
gene lift yeah okay

878
00:43:21,199 --> 00:43:24,409
there you go

879
00:43:27,389 --> 00:43:40,049
there we go no all right okay you coming

880
00:43:33,329 --> 00:43:43,829
back over what's it what's the call so

881
00:43:40,050 --> 00:43:45,269
I'm not really sure what puss wants well

882
00:43:43,829 --> 00:43:48,630
she wants to eat my headphone cord and

883
00:43:45,269 --> 00:43:50,750
that's pretty common but I'm not sure do

884
00:43:48,630 --> 00:43:56,099
you want to sit there you want sit there

885
00:43:50,750 --> 00:44:03,289
is that good okay let's just go ahead

886
00:43:56,099 --> 00:44:03,289
and see what we can do here let's see

887
00:44:03,800 --> 00:44:17,070
we're not getting what do you want to do

888
00:44:12,800 --> 00:44:22,130
what's going on you're just you're very

889
00:44:17,070 --> 00:44:23,850
cuddly yeah is there something you need

890
00:44:22,130 --> 00:44:27,420
everything okay

891
00:44:23,849 --> 00:44:33,119
you just ate you just want a nap what do

892
00:44:27,420 --> 00:44:34,320
you want to do all right you take care

893
00:44:33,119 --> 00:44:36,329
of that and we're gonna we're gonna

894
00:44:34,320 --> 00:44:38,240
write this this cliff import routine

895
00:44:36,329 --> 00:44:41,219
here okay

896
00:44:38,239 --> 00:44:44,429
all right sue

897
00:44:41,219 --> 00:44:45,779
like we got a parse the glyphs and those

898
00:44:44,429 --> 00:44:47,879
lists are gonna give this bitmap code

899
00:44:45,780 --> 00:44:50,100
and the bitmap code needs to be imported

900
00:44:47,880 --> 00:44:52,950
separately so we're gonna have to do

901
00:44:50,099 --> 00:44:54,299
like an import glyph kind of a call here

902
00:44:52,949 --> 00:44:56,669
and it's gonna have to take you know

903
00:44:54,300 --> 00:44:58,320
like a bitmap name and that's gonna have

904
00:44:56,670 --> 00:44:59,490
to get loaded out of the file using the

905
00:44:58,320 --> 00:45:01,019
same techniques that we were using

906
00:44:59,489 --> 00:45:03,089
before to load things out of file which

907
00:45:01,019 --> 00:45:06,030
means that we're gonna want to pull that

908
00:45:03,090 --> 00:45:08,309
you know code that checks to see whether

909
00:45:06,030 --> 00:45:11,040
or not something is out of date and you

910
00:45:08,309 --> 00:45:13,349
know that kind of stuff we need to make

911
00:45:11,039 --> 00:45:16,320
sure that that stuff is happening inside

912
00:45:13,349 --> 00:45:18,869
of reusable routine so for every bitmap

913
00:45:16,320 --> 00:45:20,400
we can you know actually do that so

914
00:45:18,869 --> 00:45:22,559
we're going to pass that the bitmap name

915
00:45:20,400 --> 00:45:27,030
and we're gonna have to pass it the

916
00:45:22,559 --> 00:45:28,860
align point like v2 like whatever you

917
00:45:27,030 --> 00:45:34,470
know we're gonna have to pass it this

918
00:45:28,860 --> 00:45:36,300
thing right and for that I mean it's

919
00:45:34,469 --> 00:45:37,529
unfortunate but that you know that we're

920
00:45:36,300 --> 00:45:39,450
specifying these align points in two

921
00:45:37,530 --> 00:45:40,569
different ways it's a little bit janky

922
00:45:39,449 --> 00:45:42,879
there

923
00:45:40,568 --> 00:45:44,829
so you know we may want to write those

924
00:45:42,880 --> 00:45:48,160
out a little bit differently we may want

925
00:45:44,829 --> 00:45:52,749
to write those out as the sort of short

926
00:45:48,159 --> 00:45:55,358
values that we were using before I feel

927
00:45:52,748 --> 00:45:58,598
like that might be better so it might be

928
00:45:55,358 --> 00:46:01,389
nicer if this was instead an actual

929
00:45:58,599 --> 00:46:06,459
align point so maybe I will force it to

930
00:46:01,389 --> 00:46:09,958
be that more something so that we

931
00:46:06,458 --> 00:46:12,338
essentially have when this comes in

932
00:46:09,958 --> 00:46:17,348
notion of what the align points are

933
00:46:12,338 --> 00:46:22,058
actually going to be hard to say but I'm

934
00:46:17,349 --> 00:46:27,249
just gonna say like I think that's what

935
00:46:22,059 --> 00:46:29,079
we want I don't know so I think we want

936
00:46:27,248 --> 00:46:31,838
to do this where we just passed the

937
00:46:29,079 --> 00:46:34,359
align point in and maybe you know if

938
00:46:31,838 --> 00:46:36,759
this were structured to allow many align

939
00:46:34,358 --> 00:46:38,558
points for the bitmap because I don't

940
00:46:36,759 --> 00:46:39,998
know how exactly we want to do that but

941
00:46:38,559 --> 00:46:43,359
it would probably look something like

942
00:46:39,998 --> 00:46:45,608
this right so we have like that one a

943
00:46:43,358 --> 00:46:47,380
line point and and off its gonna go but

944
00:46:45,608 --> 00:46:49,958
we could pass more line points if we

945
00:46:47,380 --> 00:46:51,608
wanted to something like that so I don't

946
00:46:49,958 --> 00:46:53,348
really know but let's like sketch it out

947
00:46:51,608 --> 00:46:54,848
that way for now and we'll push forwards

948
00:46:53,349 --> 00:46:56,949
through it and see what happens when we

949
00:46:54,849 --> 00:47:00,640
actually get there so we know we have a

950
00:46:56,949 --> 00:47:02,739
bitmap file name right and that's gonna

951
00:47:00,639 --> 00:47:05,858
be just this you know thing with the

952
00:47:02,739 --> 00:47:08,528
ping on it that's gonna go get a path

953
00:47:05,858 --> 00:47:11,498
appended to it and then loaded so that's

954
00:47:08,528 --> 00:47:17,759
all fine but then what we also need here

955
00:47:11,498 --> 00:47:20,738
in addition is we're going to need to

956
00:47:17,759 --> 00:47:22,929
we're going to need to pass like the the

957
00:47:20,739 --> 00:47:24,548
context because it's going to need to do

958
00:47:22,929 --> 00:47:26,949
a bunch of asset work in order to import

959
00:47:24,548 --> 00:47:29,768
that bitmap file name so I think we need

960
00:47:26,949 --> 00:47:32,108
something like that and then we can read

961
00:47:29,768 --> 00:47:34,498
this stuff out as necessary so we would

962
00:47:32,108 --> 00:47:40,288
have like here you know a glyph index

963
00:47:34,498 --> 00:47:45,298
that we would produce by requiring a

964
00:47:40,289 --> 00:47:45,299
token here so in this case we would have

965
00:47:46,480 --> 00:47:52,210
a number that needs to get used a number

966
00:47:49,838 --> 00:47:55,210
that needs to get read we would check to

967
00:47:52,210 --> 00:47:58,480
see whether that glyph index is in range

968
00:47:55,210 --> 00:48:04,750
so it needs to fit inside the table

969
00:47:58,480 --> 00:48:06,519
right the universe realized one past

970
00:48:04,750 --> 00:48:08,710
highest code point we don't actually

971
00:48:06,519 --> 00:48:12,280
need to store because we're gonna know

972
00:48:08,710 --> 00:48:14,550
that information we know that like every

973
00:48:12,280 --> 00:48:18,790
time we see a code point we can just

974
00:48:14,550 --> 00:48:21,130
make this be one past it so like in here

975
00:48:18,789 --> 00:48:23,949
when we see the code point we can just

976
00:48:21,130 --> 00:48:26,140
do like if one past highest code point

977
00:48:23,949 --> 00:48:32,858
is less than or equal to the code point

978
00:48:26,139 --> 00:48:35,500
that we saw we can just bump it there

979
00:48:32,858 --> 00:48:37,539
you know I'm saying so I think we can

980
00:48:35,500 --> 00:48:39,159
avoid actually ever specifying that and

981
00:48:37,539 --> 00:48:41,108
just track it since we'll see all the

982
00:48:39,159 --> 00:48:44,019
code points when we go to write the

983
00:48:41,108 --> 00:48:49,449
thing out we're done um so these guys

984
00:48:44,019 --> 00:48:57,550
here look like they're probably pretty

985
00:48:49,449 --> 00:48:59,769
easy to to just use directly so I guess

986
00:48:57,550 --> 00:49:01,630
like I really can make this as simple as

987
00:48:59,769 --> 00:49:06,329
just requiring the glyph count to come

988
00:49:01,630 --> 00:49:06,329
first right everything else

989
00:49:13,659 --> 00:49:38,000
looks like we could do this way and so

990
00:49:35,210 --> 00:49:41,659
those allow us to parse these pieces

991
00:49:38,000 --> 00:49:46,579
here pretty easily and these are just

992
00:49:41,659 --> 00:49:53,539
like oh yeah I need an equal sign and

993
00:49:46,579 --> 00:50:13,369
then I need a number and that's pretty

994
00:49:53,539 --> 00:50:17,690
much it so I think that's all we need so

995
00:50:13,369 --> 00:50:20,179
I want these to persist outside so for

996
00:50:17,690 --> 00:50:23,630
each one of those I would just write it

997
00:50:20,179 --> 00:50:25,669
up here here's the sender height here's

998
00:50:23,630 --> 00:50:28,430
the descender height and here is the

999
00:50:25,670 --> 00:50:34,670
external letting there's the code point

1000
00:50:28,429 --> 00:50:38,719
these all get read in I think that's

1001
00:50:34,670 --> 00:50:40,940
pretty much it right so when we come

1002
00:50:38,719 --> 00:50:43,099
down through here at the end then this

1003
00:50:40,940 --> 00:50:44,929
is going to be like not it's gonna

1004
00:50:43,099 --> 00:50:48,619
exactly the same code it's just not

1005
00:50:44,929 --> 00:50:51,199
gonna have to do any of those export

1006
00:50:48,619 --> 00:50:52,489
those unpacks there it can just use them

1007
00:50:51,199 --> 00:50:55,519
directly because they're just values we

1008
00:50:52,489 --> 00:50:56,959
track now so I think we're pretty much

1009
00:50:55,519 --> 00:50:59,300
good to go

1010
00:50:56,960 --> 00:51:00,920
so that means the only requirement for a

1011
00:50:59,300 --> 00:51:03,710
font is that the glyph count appears

1012
00:51:00,920 --> 00:51:07,010
first that means if we wanted to we

1013
00:51:03,710 --> 00:51:08,929
could also put that in here somewhere as

1014
00:51:07,010 --> 00:51:10,340
a different thing if we wanted to I'm

1015
00:51:08,929 --> 00:51:12,259
not gonna bother right now let's just

1016
00:51:10,340 --> 00:51:15,110
say we require that and we'll just leave

1017
00:51:12,260 --> 00:51:17,540
it that way I don't really care when we

1018
00:51:15,110 --> 00:51:20,300
actually create these arrays also I'm

1019
00:51:17,539 --> 00:51:21,969
gonna just while we're here because you

1020
00:51:20,300 --> 00:51:24,460
know - well we got to do at some point

1021
00:51:21,969 --> 00:51:27,039
the context has this temporary

1022
00:51:24,460 --> 00:51:29,440
I'm gonna use that to just push the

1023
00:51:27,039 --> 00:51:31,090
memory on here because I don't want it

1024
00:51:29,440 --> 00:51:33,909
to stick around right it's just

1025
00:51:31,090 --> 00:51:35,230
temporary for during processing so we're

1026
00:51:33,909 --> 00:51:37,000
going to go ahead and push these arrays

1027
00:51:35,230 --> 00:51:40,570
on which allow us to have all the

1028
00:51:37,000 --> 00:51:42,639
information we need for processing so

1029
00:51:40,570 --> 00:51:45,039
then through here whatever we grab a

1030
00:51:42,639 --> 00:51:46,719
glyph we can now say well the code

1031
00:51:45,039 --> 00:51:50,730
points for the glyph equal the code

1032
00:51:46,719 --> 00:51:56,619
point right whatever that glyph index is

1033
00:51:50,730 --> 00:52:00,730
and the horizontal advance which will

1034
00:51:56,619 --> 00:52:05,349
come down here we can just read these in

1035
00:52:00,730 --> 00:52:07,179
in a loop right so what we want to do

1036
00:52:05,349 --> 00:52:11,440
here is say look we need to read one

1037
00:52:07,179 --> 00:52:17,129
horizontal advance for every glyph that

1038
00:52:11,440 --> 00:52:20,380
there is squared right so we've got the

1039
00:52:17,130 --> 00:52:22,680
you know effectively a read index and

1040
00:52:20,380 --> 00:52:26,470
we've got glyph count times flip count

1041
00:52:22,679 --> 00:52:28,980
we're gonna go through here reading each

1042
00:52:26,469 --> 00:52:32,559
of these into the horizontal advance

1043
00:52:28,980 --> 00:52:35,019
setting that value so we know from

1044
00:52:32,559 --> 00:52:37,750
looking at the actual age of T what that

1045
00:52:35,019 --> 00:52:39,820
thing will look like it's essentially

1046
00:52:37,750 --> 00:52:44,500
just alright we've got the horizontal

1047
00:52:39,820 --> 00:52:50,920
advance token read so we need to require

1048
00:52:44,500 --> 00:52:53,739
the equals token now and then we know

1049
00:52:50,920 --> 00:53:00,990
that we're just reading numbers so first

1050
00:52:53,739 --> 00:53:03,639
we do a require token oops

1051
00:53:00,989 --> 00:53:08,759
to get the actual number in and then we

1052
00:53:03,639 --> 00:53:08,759
do a require token comma

1053
00:53:09,099 --> 00:53:16,210
right now looking through here we know

1054
00:53:14,530 --> 00:53:19,780
that at the end it's actually a

1055
00:53:16,210 --> 00:53:22,530
semicolon not a comma so we really don't

1056
00:53:19,780 --> 00:53:27,730
want to do that if it's the last one

1057
00:53:22,530 --> 00:53:29,590
right so we only want to do that you

1058
00:53:27,730 --> 00:53:31,840
know if we're in between two what I

1059
00:53:29,590 --> 00:53:34,210
could do here is the glyph count times

1060
00:53:31,840 --> 00:53:36,130
glyph count say you know don't regret it

1061
00:53:34,210 --> 00:53:37,869
tokens again I don't really want to do

1062
00:53:36,130 --> 00:53:40,119
that because it's harder to check for

1063
00:53:37,869 --> 00:53:42,400
it's just more you know typing or

1064
00:53:40,119 --> 00:53:45,940
storage what I'd rather do is just hey

1065
00:53:42,400 --> 00:53:47,889
if it's not zero require the token

1066
00:53:45,940 --> 00:53:49,809
before you read a number so that way

1067
00:53:47,889 --> 00:53:51,309
right you can see that this is an easier

1068
00:53:49,809 --> 00:53:53,409
way to write that otherwise I would have

1069
00:53:51,309 --> 00:53:55,509
had to say if it works coming after I

1070
00:53:53,409 --> 00:53:58,299
would haven't said if read I read index

1071
00:53:55,510 --> 00:54:00,580
plus one is not equal to glyph count

1072
00:53:58,300 --> 00:54:02,050
times lift count it's just more or save

1073
00:54:00,579 --> 00:54:04,090
this value and use it right you know

1074
00:54:02,050 --> 00:54:06,610
it's just so this is nice and simple it

1075
00:54:04,090 --> 00:54:08,289
just keeps it easier because that way we

1076
00:54:06,610 --> 00:54:11,230
know look we only require the comma if

1077
00:54:08,289 --> 00:54:12,429
we already read at least one number but

1078
00:54:11,230 --> 00:54:19,300
the first number doesn't need the comma

1079
00:54:12,429 --> 00:54:20,769
right so I think that's all good that

1080
00:54:19,300 --> 00:54:23,470
seems fine so that reads our whole

1081
00:54:20,769 --> 00:54:24,759
horizontal advance table so now we just

1082
00:54:23,469 --> 00:54:27,429
need to finish off reading the glyph

1083
00:54:24,760 --> 00:54:29,800
assuming that the glyph index is okay

1084
00:54:27,429 --> 00:54:32,259
then we just need to deal with the code

1085
00:54:29,800 --> 00:54:34,060
points the name bitmap name you know

1086
00:54:32,260 --> 00:54:37,510
that kind of junk and read you know the

1087
00:54:34,059 --> 00:54:39,279
actual alignment thing here now I want

1088
00:54:37,510 --> 00:54:41,710
to look just really quickly because I

1089
00:54:39,280 --> 00:54:46,090
don't remember I want to go ahead and

1090
00:54:41,710 --> 00:54:49,210
load in to the editor here what is one

1091
00:54:46,090 --> 00:54:54,519
of those tag files look like in terms of

1092
00:54:49,210 --> 00:54:59,260
align points here it is so looking at

1093
00:54:54,519 --> 00:55:02,469
this I kind of just want to use the same

1094
00:54:59,260 --> 00:55:04,990
format I think probably for what you

1095
00:55:02,469 --> 00:55:07,989
know for what this thing is is actually

1096
00:55:04,989 --> 00:55:10,539
specifying so if you look at the align

1097
00:55:07,989 --> 00:55:13,719
point themselves if I if I go over to

1098
00:55:10,539 --> 00:55:18,670
the file format and we look at the align

1099
00:55:13,719 --> 00:55:21,059
point there it is you can see we've got

1100
00:55:18,670 --> 00:55:21,059
you know

1101
00:55:22,519 --> 00:55:31,230
P percent value is the size value and

1102
00:55:25,320 --> 00:55:35,880
the type value I don't really think we

1103
00:55:31,230 --> 00:55:37,710
need the size of the type for the font

1104
00:55:35,880 --> 00:55:40,590
so we're really just storing to you six

1105
00:55:37,710 --> 00:55:44,220
teens I think that's it so what I'd like

1106
00:55:40,590 --> 00:55:47,070
to do here is in that font hht I'm just

1107
00:55:44,219 --> 00:55:51,739
gonna I think I'm just gonna literally

1108
00:55:47,070 --> 00:55:53,970
store the to you six teens and then

1109
00:55:51,739 --> 00:55:56,509
assume the rest of the align point

1110
00:55:53,969 --> 00:56:00,629
values I think that's what I would like

1111
00:55:56,510 --> 00:56:03,260
so when we actually do this let's grab

1112
00:56:00,630 --> 00:56:07,289
all the tokens that we actually need so

1113
00:56:03,260 --> 00:56:15,360
we've got a name token or sorry I should

1114
00:56:07,289 --> 00:56:20,429
say a filing token we need this to have

1115
00:56:15,360 --> 00:56:26,190
a comma and this is just going to be a

1116
00:56:20,429 --> 00:56:27,599
giant list of requirements right so

1117
00:56:26,190 --> 00:56:30,630
we're basically saying look we need a

1118
00:56:27,599 --> 00:56:32,339
file name then we're gonna need and I

1119
00:56:30,630 --> 00:56:33,900
mean I guess I don't even need the word

1120
00:56:32,340 --> 00:56:36,059
token after it I could just say that's

1121
00:56:33,900 --> 00:56:38,340
the file name and then when we actually

1122
00:56:36,059 --> 00:56:40,259
go to pass this thing I can just say

1123
00:56:38,340 --> 00:56:41,940
like alright well it's just you know

1124
00:56:40,260 --> 00:56:44,280
it's it's whatever the value is I don't

1125
00:56:41,940 --> 00:56:46,679
remember in the tokenizer exactly what

1126
00:56:44,280 --> 00:56:49,620
that field is called it's just text

1127
00:56:46,679 --> 00:56:52,379
right so here we know we're gonna get

1128
00:56:49,619 --> 00:56:56,909
the file name we know we're gonna get

1129
00:56:52,380 --> 00:57:02,240
the code point and then we're gonna get

1130
00:56:56,909 --> 00:57:02,239
the aligned X and the line y

1131
00:57:03,780 --> 00:57:11,850
and that's the entirety of one of these

1132
00:57:09,170 --> 00:57:13,829
font specifiers so it's just the

1133
00:57:11,849 --> 00:57:14,809
filename the code point the align X in

1134
00:57:13,829 --> 00:57:17,009
the Alliant

1135
00:57:14,809 --> 00:57:18,719
all get rid in and they're not gonna get

1136
00:57:17,010 --> 00:57:20,910
rid of this float because float is just

1137
00:57:18,719 --> 00:57:27,599
Dicer to deal with so I'd rather not

1138
00:57:20,909 --> 00:57:30,629
write so after all of that we should

1139
00:57:27,599 --> 00:57:32,610
just be able to validate like you know

1140
00:57:30,630 --> 00:57:35,760
whether the glyph index is what we

1141
00:57:32,610 --> 00:57:57,510
thought it should be and so on I could

1142
00:57:35,760 --> 00:57:59,610
even do this right and so if I do that

1143
00:57:57,510 --> 00:58:04,440
then when we when we look at how those

1144
00:57:59,610 --> 00:58:07,140
align points are actually packed when we

1145
00:58:04,440 --> 00:58:10,349
put those together we can just make sure

1146
00:58:07,139 --> 00:58:16,349
that those values are within range so

1147
00:58:10,349 --> 00:58:19,230
what I can do is say you know if you

1148
00:58:16,349 --> 00:58:22,639
know the code point well the code point

1149
00:58:19,230 --> 00:58:28,019
doesn't really matter if the align X is

1150
00:58:22,639 --> 00:58:38,389
less than this and align Y is less than

1151
00:58:28,019 --> 00:58:38,389
this right not have an S 16 max

1152
00:58:39,829 --> 00:58:47,969
we do not we have a u16 max I guess

1153
00:58:44,550 --> 00:58:49,830
that's what we actually meant so we just

1154
00:58:47,969 --> 00:58:51,869
check to see make sure these are within

1155
00:58:49,829 --> 00:58:53,509
the ranges that they're allowed to be if

1156
00:58:51,869 --> 00:58:58,039
they're not will issue an error there

1157
00:58:53,510 --> 00:59:11,850
and if they are we're good to go we also

1158
00:58:58,039 --> 00:59:14,670
want to do a check for the glyph just

1159
00:59:11,849 --> 00:59:19,319
massages code around here so this is

1160
00:59:14,670 --> 00:59:36,090
also an error and so here what we want

1161
00:59:19,320 --> 00:59:39,030
to say is all right I if the token if

1162
00:59:36,090 --> 00:59:41,880
the glyph index for the token is wrong

1163
00:59:39,030 --> 00:59:43,980
and in here just looking at it I think I

1164
00:59:41,880 --> 00:59:46,170
want the token itself just for error

1165
00:59:43,980 --> 00:59:52,860
reporting purposes right so I think I

1166
00:59:46,170 --> 00:59:54,960
want to do this I want to be able to

1167
00:59:52,860 --> 00:59:56,940
report that error specifically on that

1168
00:59:54,960 --> 01:00:00,030
token so I want to be able to say like

1169
00:59:56,940 --> 01:00:03,889
look if the glyph was out of bounds

1170
01:00:00,030 --> 01:00:03,890
there's the error right like

1171
01:00:15,489 --> 01:00:21,139
something like that

1172
01:00:17,929 --> 01:00:23,899
I I don't know if we need do we actually

1173
01:00:21,139 --> 01:00:26,929
use character turns now we don't so I

1174
01:00:23,900 --> 01:00:29,059
can get rid of that and so here where we

1175
01:00:26,929 --> 01:00:30,919
have those errors I'm just gonna give it

1176
01:00:29,059 --> 01:00:33,829
all of the numbers we know so you know

1177
01:00:30,920 --> 01:00:35,659
here's our glyph index and here's our

1178
01:00:33,829 --> 01:00:38,000
glyph count so that way it should be

1179
01:00:35,659 --> 01:00:40,009
obvious like a something specifying like

1180
01:00:38,000 --> 01:00:41,119
an out of range whiff and we can't we

1181
01:00:40,010 --> 01:00:43,250
don't know what to do with that like

1182
01:00:41,119 --> 01:00:47,990
it's obviously corrupt font file font

1183
01:00:43,250 --> 01:00:51,170
markup rather so you know fix it so here

1184
01:00:47,989 --> 01:00:53,088
we also want sort of the same thing we

1185
01:00:51,170 --> 01:00:56,960
want to be able to testify the alignment

1186
01:00:53,088 --> 01:01:00,858
being broken and so in here I probably

1187
01:00:56,960 --> 01:01:03,619
want this to be the align token as well

1188
01:01:00,858 --> 01:01:06,019
I don't know exactly where we want to

1189
01:01:03,619 --> 01:01:08,930
air out on this we could air out on

1190
01:01:06,019 --> 01:01:12,409
either one individually but I don't

1191
01:01:08,929 --> 01:01:14,389
actually know if I care about that so we

1192
01:01:12,409 --> 01:01:20,649
may just maybe we'll use the same thing

1193
01:01:14,389 --> 01:01:26,659
here and just say glyph has bad

1194
01:01:20,650 --> 01:01:29,780
alignment values and again we really

1195
01:01:26,659 --> 01:01:31,848
don't expect ever to hit these but we'll

1196
01:01:29,780 --> 01:01:33,040
just you know leave them there just in

1197
01:01:31,849 --> 01:01:36,109
case

1198
01:01:33,039 --> 01:01:39,949
so assuming everything comes in okay

1199
01:01:36,108 --> 01:01:42,440
then we can set the code point two to be

1200
01:01:39,949 --> 01:01:47,149
correct which is what we want and we can

1201
01:01:42,440 --> 01:01:50,809
set the alignment to be what we want so

1202
01:01:47,150 --> 01:01:56,320
just a line point for example we can set

1203
01:01:50,809 --> 01:01:56,320
up here and so the align points

1204
01:02:01,940 --> 01:02:09,570
has to be set to probably default right

1205
01:02:06,559 --> 01:02:14,849
so up here we probably want to say look

1206
01:02:09,570 --> 01:02:17,338
the type of this thing is that and then

1207
01:02:14,849 --> 01:02:19,400
here we want to set the P percents and

1208
01:02:17,338 --> 01:02:21,750
the size and stuff like that right so

1209
01:02:19,400 --> 01:02:24,660
actually you know probably I'd like to

1210
01:02:21,750 --> 01:02:29,460
do is just do one of those set a line

1211
01:02:24,659 --> 01:02:31,799
point calls like this and say alright

1212
01:02:29,460 --> 01:02:36,269
set this a line point to be aligned to

1213
01:02:31,800 --> 01:02:39,089
this it's not going to be well it is a

1214
01:02:36,269 --> 01:02:43,619
two-parent right the size is going to be

1215
01:02:39,088 --> 01:02:45,659
1.0 and the alignment in terms of like

1216
01:02:43,619 --> 01:02:48,690
think where the point is gonna be the

1217
01:02:45,659 --> 01:02:51,659
center point and then we will overwrite

1218
01:02:48,690 --> 01:02:54,480
that assuming that we see one of these

1219
01:02:51,659 --> 01:02:56,489
other alignments here will overwrite the

1220
01:02:54,480 --> 01:03:02,760
P percent with the values that we

1221
01:02:56,489 --> 01:03:05,848
actually get right so that allows us to

1222
01:03:02,760 --> 01:03:07,319
import the entire thing in here and then

1223
01:03:05,849 --> 01:03:09,030
all we really need to do is start to

1224
01:03:07,318 --> 01:03:11,068
take out some of that bitmap code so we

1225
01:03:09,030 --> 01:03:14,640
can call it and say hey we need to

1226
01:03:11,068 --> 01:03:16,529
import this like dependent bitmap so

1227
01:03:14,639 --> 01:03:19,769
please make sure you've got it and when

1228
01:03:16,530 --> 01:03:23,519
we get it back by the way I need to know

1229
01:03:19,769 --> 01:03:26,818
the bitmap right cuz this right here

1230
01:03:23,519 --> 01:03:34,920
needs to be set so we'll set the code

1231
01:03:26,818 --> 01:03:37,170
points dot glyph index unicode code

1232
01:03:34,920 --> 01:03:47,079
point here and then we'll set the code

1233
01:03:37,170 --> 01:03:49,630
points bitmap here right

1234
01:03:47,079 --> 01:03:52,659
so that's the way that's got to work I

1235
01:03:49,630 --> 01:03:55,150
think so we'll expect import glyph to

1236
01:03:52,659 --> 01:03:57,129
tell us what that's going to be then

1237
01:03:55,150 --> 01:04:00,579
finally when we get to the very end of

1238
01:03:57,130 --> 01:04:03,820
it all down here and we're ready to

1239
01:04:00,579 --> 01:04:06,429
write everything back we can create the

1240
01:04:03,820 --> 01:04:08,380
font pretty easily now but we need some

1241
01:04:06,429 --> 01:04:10,149
way of like applying tags to it because

1242
01:04:08,380 --> 01:04:12,190
remember we got like a tag array and

1243
01:04:10,150 --> 01:04:13,869
stuff so we're like you know we're gonna

1244
01:04:12,190 --> 01:04:15,610
have to actually do some work here to

1245
01:04:13,869 --> 01:04:17,799
tag the metadata and that sort of thing

1246
01:04:15,610 --> 01:04:20,710
and so if we look down at what we're

1247
01:04:17,800 --> 01:04:23,200
actually doing here when we do all this

1248
01:04:20,710 --> 01:04:26,559
processing you can see we can call

1249
01:04:23,199 --> 01:04:29,349
update asset metadata right and that

1250
01:04:26,559 --> 01:04:30,699
would actually do what we need like you

1251
01:04:29,349 --> 01:04:33,400
know if you look at this it sets the

1252
01:04:30,699 --> 01:04:36,099
type and and difference the tags and all

1253
01:04:33,400 --> 01:04:40,030
that nonsense we need to do that right

1254
01:04:36,099 --> 01:04:43,119
so that pretty much takes care of that

1255
01:04:40,030 --> 01:04:47,680
matching for us so I think that part is

1256
01:04:43,119 --> 01:04:50,650
pretty good to go right what I don't

1257
01:04:47,679 --> 01:05:01,059
actually know is where is it getting the

1258
01:04:50,650 --> 01:05:04,230
data for the actual where is it getting

1259
01:05:01,059 --> 01:05:04,230
the data for the actual asset

1260
01:05:10,159 --> 01:05:21,088
so it looks like it's just using it the

1261
01:05:13,139 --> 01:05:26,608
asset index rate right here okay like

1262
01:05:21,088 --> 01:05:33,659
that seems totally fine uh so I think

1263
01:05:26,608 --> 01:05:35,969
what we want to do yeah I think I'm

1264
01:05:33,659 --> 01:05:47,029
right I think we want to do is just

1265
01:05:35,969 --> 01:05:50,338
break this out and this call

1266
01:05:47,030 --> 01:05:55,700
just needs a version that doesn't use a

1267
01:05:50,338 --> 01:05:55,699
grid that's just gonna do one asset and

1268
01:05:57,829 --> 01:06:05,369
update it that way so if we imagine we

1269
01:06:02,010 --> 01:06:07,559
were inside here what would we need so

1270
01:06:05,369 --> 01:06:10,798
if this went away right so this thing

1271
01:06:07,559 --> 01:06:13,950
has to call out to you know some other

1272
01:06:10,798 --> 01:06:17,190
function here right it's gonna call this

1273
01:06:13,949 --> 01:06:19,379
thing what else does it actually need to

1274
01:06:17,190 --> 01:06:22,170
know in order to produce that result

1275
01:06:19,380 --> 01:06:25,500
right and so from looking at it it seems

1276
01:06:22,170 --> 01:06:28,048
pretty clear well it means you know all

1277
01:06:25,500 --> 01:06:31,679
of the stuff that we were giving it here

1278
01:06:28,048 --> 01:06:33,769
right the assets the file and the fields

1279
01:06:31,679 --> 01:06:36,598
what we really need to do now is say

1280
01:06:33,769 --> 01:06:41,309
well we know that we're not taking a tag

1281
01:06:36,599 --> 01:06:43,170
grid so we can't pass that and we do

1282
01:06:41,309 --> 01:06:46,010
know that we want append tags because

1283
01:06:43,170 --> 01:06:51,150
obviously that needs to go down there

1284
01:06:46,010 --> 01:06:56,099
but we also need to pass the grid tags

1285
01:06:51,150 --> 01:06:57,568
and and the asset index right because

1286
01:06:56,099 --> 01:06:59,059
those are the parts that came out of

1287
01:06:57,568 --> 01:07:06,199
this

1288
01:06:59,059 --> 01:07:06,200
we should probably also pass well

1289
01:07:08,119 --> 01:07:16,710
actually I think that just comes out

1290
01:07:11,880 --> 01:07:20,039
here right so if we did that so now

1291
01:07:16,710 --> 01:07:23,338
we've got the the asset index here and

1292
01:07:20,039 --> 01:07:27,569
we've got the import tag array tags here

1293
01:07:23,338 --> 01:07:31,440
I think that allows us to make a call to

1294
01:07:27,568 --> 01:07:33,509
just update a single assets metadata in

1295
01:07:31,440 --> 01:07:35,309
the case where we are only doing one

1296
01:07:33,509 --> 01:07:39,298
which it which is like what we have with

1297
01:07:35,309 --> 01:07:41,759
the fonts we're parse font lock for

1298
01:07:39,298 --> 01:07:44,489
example when we get down here we want to

1299
01:07:41,759 --> 01:07:50,909
do that update asset made of data like

1300
01:07:44,489 --> 01:07:53,489
so right so we know we've got the game

1301
01:07:50,909 --> 01:07:56,730
assets here we know we have to pass a

1302
01:07:53,489 --> 01:07:58,679
source file of some kind so we don't

1303
01:07:56,730 --> 01:08:01,289
know what that is yet we're going to

1304
01:07:58,679 --> 01:08:03,389
have to to get it we should have the

1305
01:08:01,289 --> 01:08:05,460
fields because those exist already we

1306
01:08:03,389 --> 01:08:11,278
know what the append tags are so those

1307
01:08:05,460 --> 01:08:15,869
are fine I and I don't think we have

1308
01:08:11,278 --> 01:08:18,630
this because this came from the grid so

1309
01:08:15,869 --> 01:08:23,369
these extra tags just aren't they don't

1310
01:08:18,630 --> 01:08:26,119
exist right so I think we're down to

1311
01:08:23,369 --> 01:08:30,238
just this we need to be able to produce

1312
01:08:26,119 --> 01:08:33,960
the source file that that this stuff

1313
01:08:30,238 --> 01:08:39,088
comes from unfortunately I don't we

1314
01:08:33,960 --> 01:08:42,649
don't have one so I'm not really sure

1315
01:08:39,088 --> 01:08:42,649
how we would do that

1316
01:08:45,448 --> 01:08:51,638
because fonts don't come from a file

1317
01:08:47,738 --> 01:08:54,698
it's this file which I guess is okay if

1318
01:08:51,639 --> 01:08:55,960
we wanted to specify that so let's just

1319
01:08:54,698 --> 01:09:00,419
take a look at where that's actually

1320
01:08:55,960 --> 01:09:00,420
happening so file arrow right

1321
01:09:10,548 --> 01:09:25,039
it's really just used it's really just

1322
01:09:18,539 --> 01:09:29,989
used to get that destination file index

1323
01:09:25,039 --> 01:09:31,310
which I think we already know right so

1324
01:09:29,989 --> 01:09:34,588
[Music]

1325
01:09:31,310 --> 01:09:37,109
so do we actually if we were to get rid

1326
01:09:34,588 --> 01:09:39,689
of this well let's let's build first and

1327
01:09:37,109 --> 01:09:41,579
go from there and so I can use some

1328
01:09:39,689 --> 01:09:47,419
errors to guide us in this process a

1329
01:09:41,579 --> 01:09:52,318
little bit all right so this is actually

1330
01:09:47,420 --> 01:09:58,760
import like grid tag right so that was

1331
01:09:52,319 --> 01:09:58,760
wrong work grid tags Thanks

1332
01:10:07,039 --> 01:10:14,310
this needs to be told what kind of field

1333
01:10:09,420 --> 01:10:16,560
it was there this is probably the wrong

1334
01:10:14,310 --> 01:10:19,740
format what's our pusher raidCall again

1335
01:10:16,560 --> 01:10:24,050
it's the arena the count and then the

1336
01:10:19,739 --> 01:10:24,050
type so it's looks like this

1337
01:10:31,670 --> 01:10:35,180
[Music]

1338
01:10:36,149 --> 01:10:41,639
it's kept a horror of capitalization I

1339
01:10:43,529 --> 01:10:48,809
don't know if code point should be tap

1340
01:10:45,880 --> 01:10:48,810
inter capped or not

1341
01:10:53,529 --> 01:10:57,139
[Music]

1342
01:11:05,619 --> 01:11:12,829
so I think the main problem just looking

1343
01:11:08,779 --> 01:11:15,309
at it here what we've what we're running

1344
01:11:12,829 --> 01:11:15,309
into

1345
01:11:25,270 --> 01:11:38,360
is the fact that fonts don't come from a

1346
01:11:29,539 --> 01:11:41,630
file at the moment they're just reading

1347
01:11:38,359 --> 01:11:44,899
out of the hht and the hht always gets

1348
01:11:41,630 --> 01:11:46,489
parsed so in a sense we don't really

1349
01:11:44,899 --> 01:11:50,139
need to do the checking that we normally

1350
01:11:46,489 --> 01:11:52,519
do because we're always going to

1351
01:11:50,140 --> 01:11:54,289
effectively have an updated version so

1352
01:11:52,520 --> 01:11:55,850
it's just if they disk they need to be

1353
01:11:54,289 --> 01:11:58,189
outputted if they didn't if they don't

1354
01:11:55,850 --> 01:12:02,000
but we don't need to first check that

1355
01:11:58,189 --> 01:12:03,679
piece of information because they they

1356
01:12:02,000 --> 01:12:06,680
don't have an additional file that we

1357
01:12:03,680 --> 01:12:07,880
read so that's the part we're gonna have

1358
01:12:06,680 --> 01:12:11,240
to work around that's really just a

1359
01:12:07,880 --> 01:12:14,440
plumbing problem I think so we can kind

1360
01:12:11,239 --> 01:12:17,300
of go from there quickly let me just

1361
01:12:14,439 --> 01:12:18,829
sort of clean up any other as we have so

1362
01:12:17,300 --> 01:12:21,739
we don't really have many looks like we

1363
01:12:18,829 --> 01:12:23,779
fixed them so that's the part that I

1364
01:12:21,739 --> 01:12:27,050
need to kind of get away from here so

1365
01:12:23,779 --> 01:12:29,179
update single asset metadata let me just

1366
01:12:27,050 --> 01:12:32,029
look now at what I wanted to look at

1367
01:12:29,180 --> 01:12:38,030
before so let's suppose that asset

1368
01:12:32,029 --> 01:12:40,309
source file was not available and/or

1369
01:12:38,029 --> 01:12:42,469
asset file wasn't available like what

1370
01:12:40,310 --> 01:12:46,850
are these things actually being used for

1371
01:12:42,470 --> 01:12:53,539
right so first of all there's the

1372
01:12:46,850 --> 01:12:55,670
modified value right and then there's a

1373
01:12:53,539 --> 01:12:57,920
rent but that we know because we know

1374
01:12:55,670 --> 01:13:00,289
which asset file were writing to that's

1375
01:12:57,920 --> 01:13:03,319
something we could just supply so what

1376
01:13:00,289 --> 01:13:06,890
if we said this where we're like alright

1377
01:13:03,319 --> 01:13:10,009
that goes back here where it was and

1378
01:13:06,890 --> 01:13:13,970
then this actually passes asset file

1379
01:13:10,010 --> 01:13:19,909
right so it doesn't have the other file

1380
01:13:13,970 --> 01:13:24,409
it just has the asset file what would we

1381
01:13:19,909 --> 01:13:29,840
then not know right what what is the

1382
01:13:24,409 --> 01:13:31,279
problem there out of that so first of

1383
01:13:29,840 --> 01:13:33,650
all it looks like we don't know where to

1384
01:13:31,279 --> 01:13:35,969
put the errors so we could I mean

1385
01:13:33,649 --> 01:13:39,000
obviously we can't fix that

1386
01:13:35,969 --> 01:13:39,149
why can I not go backwards oh there we

1387
01:13:39,000 --> 01:13:42,050
go

1388
01:13:39,149 --> 01:13:42,049
all right

1389
01:13:48,960 --> 01:13:55,079
it looks like we don't know how to put

1390
01:13:52,829 --> 01:13:57,390
the source file in there so that would

1391
01:13:55,079 --> 01:14:03,539
be fine we just need to pass that would

1392
01:13:57,390 --> 01:14:05,520
be the name of the hht which is fine so

1393
01:14:03,539 --> 01:14:07,619
really it looks like mostly what we're

1394
01:14:05,520 --> 01:14:16,830
talking about here is just the error

1395
01:14:07,619 --> 01:14:21,269
stream it's just the air stream in the

1396
01:14:16,829 --> 01:14:23,369
name so again seems pretty

1397
01:14:21,270 --> 01:14:26,989
straightforward what we can do there is

1398
01:14:23,369 --> 01:14:39,238
say all right like pass the error stream

1399
01:14:26,988 --> 01:14:41,459
and the source file name right so if we

1400
01:14:39,238 --> 01:14:43,319
did that then we could take these out

1401
01:14:41,460 --> 01:14:44,730
and just say like the error stream there

1402
01:14:43,319 --> 01:14:49,439
I guess we'll call this errors for

1403
01:14:44,729 --> 01:14:52,859
simplicity that should allow us to say

1404
01:14:49,439 --> 01:14:57,059
okay if we pass those two things out

1405
01:14:52,859 --> 01:14:58,649
from inside update asset metadata so

1406
01:14:57,060 --> 01:15:02,150
that when we look in here and we're you

1407
01:14:58,649 --> 01:15:04,259
know sort of sending this nonsense down

1408
01:15:02,149 --> 01:15:06,929
right there

1409
01:15:04,260 --> 01:15:11,340
after the asset file will send the base

1410
01:15:06,929 --> 01:15:14,219
name and we'll send the errors I think

1411
01:15:11,340 --> 01:15:15,630
like that then in here we would not have

1412
01:15:14,219 --> 01:15:18,210
to do this anymore

1413
01:15:15,630 --> 01:15:21,719
all of these things would just go to

1414
01:15:18,210 --> 01:15:27,840
stuff that we passed directly and then

1415
01:15:21,719 --> 01:15:30,439
we don't have to worry about it what did

1416
01:15:27,840 --> 01:15:30,440
I call that

1417
01:15:31,739 --> 01:15:41,550
there and so that way that should give

1418
01:15:37,289 --> 01:15:45,539
us the ability to when we call update

1419
01:15:41,550 --> 01:15:48,449
single asset metadata here we only need

1420
01:15:45,539 --> 01:15:52,109
to pass like the destination file and

1421
01:15:48,449 --> 01:15:55,050
what that name would be so I think

1422
01:15:52,109 --> 01:16:02,339
that's okay like that seems like that

1423
01:15:55,050 --> 01:16:05,250
would work um I don't really see any

1424
01:16:02,340 --> 01:16:08,090
issues with that so when we come through

1425
01:16:05,250 --> 01:16:12,510
here we know which asset file we are

1426
01:16:08,090 --> 01:16:19,110
because this operation we can do right

1427
01:16:12,510 --> 01:16:21,060
in right in line so if we get to here we

1428
01:16:19,109 --> 01:16:25,199
can grab that by saying whatever the

1429
01:16:21,060 --> 01:16:30,390
context HHA index is that should give us

1430
01:16:25,199 --> 01:16:32,579
the asset file that we're targeting the

1431
01:16:30,390 --> 01:16:35,490
error stream probably would just be the

1432
01:16:32,579 --> 01:16:37,949
tokenizer Zehra stream so you know the

1433
01:16:35,489 --> 01:16:39,960
tokenizer itself right has an air stream

1434
01:16:37,949 --> 01:16:42,090
built into it that it's using that's the

1435
01:16:39,960 --> 01:16:46,460
one we would route all of our errors to

1436
01:16:42,090 --> 01:16:55,770
so in here we would just need to say

1437
01:16:46,460 --> 01:17:00,539
okay pass the asset file pass the error

1438
01:16:55,770 --> 01:17:02,010
stream from the tokenizer and then the

1439
01:17:00,539 --> 01:17:05,399
only thing we would need is that base

1440
01:17:02,010 --> 01:17:09,000
name the base name itself I think is

1441
01:17:05,399 --> 01:17:11,879
just this so I think the context itself

1442
01:17:09,000 --> 01:17:13,770
has that piece of information and I

1443
01:17:11,880 --> 01:17:14,970
think that's everything that we actually

1444
01:17:13,770 --> 01:17:19,170
need right

1445
01:17:14,970 --> 01:17:21,270
pretty sure anyway so when we call this

1446
01:17:19,170 --> 01:17:23,520
we need to get the game assets we

1447
01:17:21,270 --> 01:17:28,500
already have them they're just not put

1448
01:17:23,520 --> 01:17:31,140
into a convenient pointer so pretty

1449
01:17:28,500 --> 01:17:32,760
trivial they're the only other stuff we

1450
01:17:31,140 --> 01:17:34,380
now need to think about is how we're

1451
01:17:32,760 --> 01:17:36,270
actually gonna update the rest of the

1452
01:17:34,380 --> 01:17:40,409
phone info I think most of it is

1453
01:17:36,270 --> 01:17:42,600
otherwise fine uh contents is undeclared

1454
01:17:40,409 --> 01:17:47,579
identifier that's true I don't know

1455
01:17:42,600 --> 01:17:49,650
I said contents and this is the part

1456
01:17:47,579 --> 01:17:54,809
where now we need to figure out what the

1457
01:17:49,649 --> 01:17:57,029
asset index actually is going to be okay

1458
01:17:54,810 --> 01:18:00,750
so now I think we've come to the only

1459
01:17:57,029 --> 01:18:08,539
hard problem that we actually have and

1460
01:18:00,750 --> 01:18:12,359
it is as follows normally we use the

1461
01:18:08,539 --> 01:18:14,939
like normally we have a way of looking

1462
01:18:12,359 --> 01:18:18,389
up what the asset index was for the

1463
01:18:14,939 --> 01:18:23,069
import on a particular file but in this

1464
01:18:18,390 --> 01:18:26,010
case we don't know right look we have no

1465
01:18:23,069 --> 01:18:29,699
idea what the asset action index

1466
01:18:26,010 --> 01:18:41,010
actually was because we don't have

1467
01:18:29,699 --> 01:18:43,429
anywhere to put it right so we've got a

1468
01:18:41,010 --> 01:18:46,289
couple different ways we could do this

1469
01:18:43,430 --> 01:18:49,289
one is that we can introduce something

1470
01:18:46,289 --> 01:18:52,699
in the asset system that itself stores

1471
01:18:49,289 --> 01:18:57,359
the piece of information we needed like

1472
01:18:52,699 --> 01:19:00,720
hey there's a way to look up a font an

1473
01:18:57,359 --> 01:19:01,979
asset name and back comes the index for

1474
01:19:00,720 --> 01:19:03,930
that asset right so there's an

1475
01:19:01,979 --> 01:19:05,250
additional lookup I don't love that

1476
01:19:03,930 --> 01:19:08,720
because we're introducing code paths

1477
01:19:05,250 --> 01:19:16,350
just for the font handle which seems

1478
01:19:08,720 --> 01:19:19,110
less good right but my assumption here

1479
01:19:16,350 --> 01:19:23,160
is that we would rather go with

1480
01:19:19,109 --> 01:19:26,039
something simpler so I'm thinking maybe

1481
01:19:23,159 --> 01:19:31,319
what we would do is when we load the

1482
01:19:26,039 --> 01:19:34,350
glyphs instead of getting back to bitmap

1483
01:19:31,319 --> 01:19:40,159
ID maybe that import glyph routine

1484
01:19:34,350 --> 01:19:40,160
actually gives us back one of these

1485
01:19:45,170 --> 01:20:02,180
right um and we could store the the font

1486
01:19:53,819 --> 01:20:02,179
index in there just a thought

1487
01:20:06,590 --> 01:20:18,800
the reason that I don't love that is

1488
01:20:10,390 --> 01:20:23,740
because it wouldn't allow you to use the

1489
01:20:18,800 --> 01:20:29,810
same thought glyph in multiple fonts

1490
01:20:23,739 --> 01:20:40,309
which seems like a bad limitation so I'm

1491
01:20:29,810 --> 01:20:41,870
just not sure exactly where yeah I'm

1492
01:20:40,310 --> 01:20:45,560
just not sure exactly where that data

1493
01:20:41,869 --> 01:20:47,599
should come from it seems like we do

1494
01:20:45,560 --> 01:20:51,020
want to support the idea that you can

1495
01:20:47,600 --> 01:20:54,910
have multiple of these but I'm just not

1496
01:20:51,020 --> 01:20:54,910
sure where I would put the information

1497
01:21:18,238 --> 01:21:22,789
I really don't have a good idea for this

1498
01:21:20,460 --> 01:21:22,789
sorry

1499
01:21:28,890 --> 01:21:32,880
so I guess when we Oh

1500
01:21:36,519 --> 01:21:50,920
oh wait maybe I do have an idea you know

1501
01:21:48,158 --> 01:21:54,609
what I do have an idea I take it all

1502
01:21:50,920 --> 01:21:57,069
back this is actually much simpler we

1503
01:21:54,609 --> 01:21:59,439
all we have to do is introduce a

1504
01:21:57,069 --> 01:22:01,328
synthetic asset file because the asset

1505
01:21:59,439 --> 01:22:05,109
files are stored in the hhas

1506
01:22:01,328 --> 01:22:07,658
that they are packed into so actually

1507
01:22:05,109 --> 01:22:11,348
it's not that hard all we have to do is

1508
01:22:07,658 --> 01:22:15,609
say in the asset system when we actually

1509
01:22:11,349 --> 01:22:18,099
initialize one of the sources right this

1510
01:22:15,609 --> 01:22:21,368
code we just used the base name of the

1511
01:22:18,099 --> 01:22:22,840
font so I don't know why I was making

1512
01:22:21,368 --> 01:22:24,518
such a big deal out of that because

1513
01:22:22,840 --> 01:22:27,010
actually it's really just not that hard

1514
01:22:24,519 --> 01:22:29,949
all we have to do is say all right get

1515
01:22:27,010 --> 01:22:31,989
us you know font source file this is

1516
01:22:29,948 --> 01:22:34,448
synthetic doesn't actually exist there

1517
01:22:31,988 --> 01:22:38,319
is no actual source file but that's fine

1518
01:22:34,448 --> 01:22:40,210
we don't care we pass the game assets

1519
01:22:38,319 --> 01:22:44,139
and the base name the base name is

1520
01:22:40,210 --> 01:22:45,609
whatever that block token whatever the

1521
01:22:44,139 --> 01:22:47,618
name is that we get out of here so

1522
01:22:45,609 --> 01:22:50,078
before the open brace read I just forgot

1523
01:22:47,618 --> 01:22:55,859
that we have this there is a name this

1524
01:22:50,078 --> 01:22:55,859
is the font name right so that font name

1525
01:22:59,609 --> 01:23:05,768
should give us the asset source file we

1526
01:23:02,260 --> 01:23:09,039
need so here I'm gonna say get the

1527
01:23:05,769 --> 01:23:10,960
source file for this thing and then from

1528
01:23:09,038 --> 01:23:13,448
there we can create our font asset and

1529
01:23:10,960 --> 01:23:18,880
do all the rest of our work so it really

1530
01:23:13,448 --> 01:23:23,098
wasn't that hard after all we were just

1531
01:23:18,880 --> 01:23:26,260
being dumb so sorry about that all right

1532
01:23:23,099 --> 01:23:30,630
so then in here where we've got the font

1533
01:23:26,260 --> 01:23:30,630
source file we can now actually use this

1534
01:23:32,960 --> 01:23:41,390
ah there we go

1535
01:23:39,649 --> 01:23:44,599
what we want to do here is do that

1536
01:23:41,390 --> 01:23:46,700
remapping so like where we actually set

1537
01:23:44,600 --> 01:23:48,410
the target of this thing you can see it

1538
01:23:46,699 --> 01:23:50,479
here right where we say where is this

1539
01:23:48,409 --> 01:23:53,689
thing gonna go you know it's gonna go in

1540
01:23:50,479 --> 01:23:55,489
here or whatever right so this is all

1541
01:23:53,689 --> 01:23:57,529
we're gonna do we're just gonna say yep

1542
01:23:55,489 --> 01:24:00,619
let's let's go ahead and write that into

1543
01:23:57,529 --> 01:24:03,380
the asset file or asset source file I

1544
01:24:00,619 --> 01:24:06,079
should say so whatever the source file

1545
01:24:03,380 --> 01:24:08,390
is here you know it's gonna be written

1546
01:24:06,079 --> 01:24:13,340
to this HHA now mandatorily that's where

1547
01:24:08,390 --> 01:24:15,710
it goes right and once we do this

1548
01:24:13,340 --> 01:24:18,590
process this asset file will now have

1549
01:24:15,710 --> 01:24:21,920
the asset index in it as well so we can

1550
01:24:18,590 --> 01:24:28,310
look that up of course that asset file

1551
01:24:21,920 --> 01:24:32,029
index has to be updated I think now we

1552
01:24:28,310 --> 01:24:35,330
can move that logic though back into the

1553
01:24:32,029 --> 01:24:37,519
the single writer and just have that be

1554
01:24:35,329 --> 01:24:40,609
handled in the common case so here you

1555
01:24:37,520 --> 01:24:43,970
can see us doing this part here where

1556
01:24:40,609 --> 01:24:47,119
you get the asset index out of the file

1557
01:24:43,970 --> 01:24:49,400
and doing the tags so I guess it was

1558
01:24:47,119 --> 01:24:52,210
done somewhere else where is that

1559
01:24:49,399 --> 01:24:52,210
somewhere else

1560
01:25:06,699 --> 01:25:11,210
so I guess it's just in all of these

1561
01:25:08,960 --> 01:25:20,630
right where you see it says like hey get

1562
01:25:11,210 --> 01:25:23,659
me the asset index so this is where it's

1563
01:25:20,630 --> 01:25:25,340
been happening right it tries to get out

1564
01:25:23,659 --> 01:25:32,899
of the asset file whatever the asset

1565
01:25:25,340 --> 01:25:35,539
index was we and we either use it or

1566
01:25:32,899 --> 01:25:38,988
don't so I think this is fine the only

1567
01:25:35,539 --> 01:25:42,859
thing I don't know of here is like when

1568
01:25:38,988 --> 01:25:49,488
this asset data gets updated I am

1569
01:25:42,859 --> 01:25:52,189
assuming that that means we need to mark

1570
01:25:49,488 --> 01:25:57,139
it as modified but I guess that would

1571
01:25:52,189 --> 01:25:59,029
happen with the tags anyway so I think

1572
01:25:57,140 --> 01:26:01,250
we're fine so I think all we need to do

1573
01:25:59,029 --> 01:26:04,880
here is just say all right we've got the

1574
01:26:01,250 --> 01:26:06,439
HHA font information that's just a zero

1575
01:26:04,880 --> 01:26:07,640
thing that we're gonna fill out in a

1576
01:26:06,439 --> 01:26:20,629
second

1577
01:26:07,640 --> 01:26:24,369
when we finish yeah that can just be

1578
01:26:20,630 --> 01:26:24,369
read out of the asset I guess

1579
01:26:30,578 --> 01:26:40,090
I think that's all we need so we just

1580
01:26:38,380 --> 01:26:43,029
say look is there already one for this

1581
01:26:40,090 --> 01:26:45,489
thing it's gonna be in a 0-0 slot cuz

1582
01:26:43,029 --> 01:26:48,429
there's only one for a font if we don't

1583
01:26:45,488 --> 01:26:51,759
have one let's reserve one for the font

1584
01:26:48,429 --> 01:26:54,699
once we do we're good to go so we've got

1585
01:26:51,760 --> 01:26:59,469
the asset loaded out now so that means

1586
01:26:54,698 --> 01:27:02,678
the font is just the asset font we write

1587
01:26:59,469 --> 01:27:05,948
all the data into that and then we can

1588
01:27:02,679 --> 01:27:08,408
update it and be done right so I think

1589
01:27:05,948 --> 01:27:11,279
that's everything we need to do modulo

1590
01:27:08,408 --> 01:27:14,789
actually writing out the new asset

1591
01:27:11,279 --> 01:27:18,719
metadata like the glyphs and that stuff

1592
01:27:14,789 --> 01:27:21,158
so we do still need to do that one part

1593
01:27:18,719 --> 01:27:22,840
but otherwise I think we're okay the

1594
01:27:21,158 --> 01:27:24,609
fact that this requires a care star is

1595
01:27:22,840 --> 01:27:26,020
bad and we'll have to fix that in a

1596
01:27:24,609 --> 01:27:28,029
second because we want to be able to not

1597
01:27:26,020 --> 01:27:31,389
do that I'm surprised we're still doing

1598
01:27:28,029 --> 01:27:32,618
that honestly so I'm not sure what's

1599
01:27:31,389 --> 01:27:35,289
going on there

1600
01:27:32,618 --> 01:27:37,389
but we'll see in a second so the HHA

1601
01:27:35,289 --> 01:27:38,828
index here that's coastal comes out the

1602
01:27:37,389 --> 01:27:44,800
context I'm not sure why we're doing

1603
01:27:38,828 --> 01:27:47,359
that this year is

1604
01:27:44,800 --> 01:27:50,750
[Music]

1605
01:27:47,359 --> 01:27:56,639
font source file Oh God

1606
01:27:50,750 --> 01:28:00,380
looks like I've don't ask me why some

1607
01:27:56,639 --> 01:28:00,380
kind of weird screenshot just happened

1608
01:28:04,250 --> 01:28:10,250
all right

1609
01:28:06,020 --> 01:28:10,250
so yeah

1610
01:28:16,130 --> 01:28:27,420
so the asset we actually want to look at

1611
01:28:20,970 --> 01:28:29,730
the hij part of the font obviously but I

1612
01:28:27,420 --> 01:28:31,880
think that's it so now we just have to

1613
01:28:29,729 --> 01:28:33,959
look at update single asset metadata

1614
01:28:31,880 --> 01:28:36,810
make sure we're passing the right stuff

1615
01:28:33,960 --> 01:28:41,159
we need the assets the asset file the

1616
01:28:36,810 --> 01:28:43,470
base name the errors the fields the

1617
01:28:41,159 --> 01:28:48,389
append tags the asset index and the

1618
01:28:43,470 --> 01:28:57,289
extra tags and then I think we're just

1619
01:28:48,390 --> 01:29:00,750
about good right seems good

1620
01:28:57,289 --> 01:29:02,430
so that update single asset metadata

1621
01:29:00,750 --> 01:29:15,630
part there

1622
01:29:02,430 --> 01:29:18,630
I guess word I'm not sure what that's

1623
01:29:15,630 --> 01:29:20,279
good funny man I've got the asker this

1624
01:29:18,630 --> 01:29:24,329
fellow got the H is this Tim the

1625
01:29:20,279 --> 01:29:27,479
Airstream got the fields oh that's the

1626
01:29:24,329 --> 01:29:30,899
problem all right so I think we need to

1627
01:29:27,479 --> 01:29:33,659
actually now just do two more steps one

1628
01:29:30,899 --> 01:29:36,659
is to write the actual glyph import

1629
01:29:33,659 --> 01:29:39,420
which is really just fixing our existing

1630
01:29:36,659 --> 01:29:40,769
code so that it can get munched we just

1631
01:29:39,420 --> 01:29:42,480
reuse the stuff we already use for

1632
01:29:40,770 --> 01:29:46,080
loading a bitmap but the thing we need

1633
01:29:42,479 --> 01:29:48,839
to do here is we don't currently write

1634
01:29:46,079 --> 01:29:50,670
out our two arrays so we need to reserve

1635
01:29:48,840 --> 01:29:54,420
space for those and write them out if

1636
01:29:50,670 --> 01:29:58,140
they don't differ so right now what we

1637
01:29:54,420 --> 01:30:04,520
know is you know in this case here we

1638
01:29:58,140 --> 01:30:07,200
could do this right and test to see if

1639
01:30:04,520 --> 01:30:10,170
what's already in the file differs or

1640
01:30:07,199 --> 01:30:12,059
not and that's sort of what we need to

1641
01:30:10,170 --> 01:30:15,890
do here oh and another way to do this

1642
01:30:12,060 --> 01:30:15,890
would just be like okay

1643
01:30:28,800 --> 01:30:33,789
so what we need to do now it you know

1644
01:30:32,229 --> 01:30:36,609
when we grab this font out we would also

1645
01:30:33,789 --> 01:30:39,189
need to do a thing where we say hey make

1646
01:30:36,609 --> 01:30:44,439
sure we compare the existing font arrays

1647
01:30:39,189 --> 01:30:46,389
I that are that are in the that are in

1648
01:30:44,439 --> 01:30:50,679
the existing font data we need to make

1649
01:30:46,390 --> 01:30:55,090
sure that those are not different than

1650
01:30:50,680 --> 01:30:58,450
the ones we just computed right so how

1651
01:30:55,090 --> 01:31:02,289
we actually do that in this case it's a

1652
01:30:58,449 --> 01:31:10,779
little bit tricky because we don't know

1653
01:31:02,289 --> 01:31:13,029
whether or not we don't really know that

1654
01:31:10,779 --> 01:31:16,420
that's that those fonts have even been

1655
01:31:13,029 --> 01:31:18,729
loaded so we would have to compare it

1656
01:31:16,420 --> 01:31:21,399
with the file directly right because if

1657
01:31:18,729 --> 01:31:25,029
you look at what actually happens when

1658
01:31:21,399 --> 01:31:27,969
you do a load font you can see right

1659
01:31:25,029 --> 01:31:32,679
here like that's not not what I was

1660
01:31:27,970 --> 01:31:37,990
talking about when you do a load font

1661
01:31:32,680 --> 01:31:44,680
you can see that it it actually is a

1662
01:31:37,989 --> 01:31:48,130
page in that code point data and we need

1663
01:31:44,680 --> 01:31:51,220
to be able to know what's happening

1664
01:31:48,130 --> 01:31:54,400
there right we we have to be able to

1665
01:31:51,220 --> 01:31:57,190
compare that existing file data to know

1666
01:31:54,399 --> 01:32:01,089
whether we need to rewrite it you know

1667
01:31:57,189 --> 01:32:03,519
I'm saying so I think we're probably

1668
01:32:01,090 --> 01:32:12,190
looking at something where we would need

1669
01:32:03,520 --> 01:32:14,470
to do like literally this this load so

1670
01:32:12,189 --> 01:32:18,059
we would need to do something like okay

1671
01:32:14,470 --> 01:32:18,060
assuming that we

1672
01:32:20,649 --> 01:32:26,019
assuming that we think we don't need to

1673
01:32:22,929 --> 01:32:28,719
update what we need to do here is make

1674
01:32:26,020 --> 01:32:32,320
sure we can actually load the file in

1675
01:32:28,719 --> 01:32:36,969
right get this data and then do like a

1676
01:32:32,319 --> 01:32:38,948
compare right on that data and looking

1677
01:32:36,969 --> 01:32:42,639
at the way that this stuff works here

1678
01:32:38,948 --> 01:32:45,488
where we get the size total it's I feel

1679
01:32:42,639 --> 01:32:47,679
like we almost want to make this code be

1680
01:32:45,488 --> 01:32:52,598
shareable so that effectively what we

1681
01:32:47,679 --> 01:32:55,630
can do is do this the same way this is

1682
01:32:52,599 --> 01:32:58,569
doing it and make sure we fill those the

1683
01:32:55,630 --> 01:33:00,099
way they're being filled here something

1684
01:32:58,569 --> 01:33:02,859
like that so that we can actually test

1685
01:33:00,099 --> 01:33:06,069
them later I don't know it's kind of

1686
01:33:02,859 --> 01:33:07,899
hard to say but I suppose the other way

1687
01:33:06,069 --> 01:33:12,099
to do it is to read them separately and

1688
01:33:07,899 --> 01:33:14,259
then test them I don't know

1689
01:33:12,099 --> 01:33:16,449
again it's really annoying this is as

1690
01:33:14,260 --> 01:33:18,969
you can see by the amount of work we've

1691
01:33:16,448 --> 01:33:21,460
had to do for asset importing the

1692
01:33:18,969 --> 01:33:23,948
difference between an asset system that

1693
01:33:21,460 --> 01:33:26,319
allows dynamic updating and running from

1694
01:33:23,948 --> 01:33:28,988
PAC files that can be updated directly

1695
01:33:26,319 --> 01:33:31,809
the difference between that and the

1696
01:33:28,988 --> 01:33:34,509
stupid version which is just I can only

1697
01:33:31,810 --> 01:33:37,539
read things once and pack them once and

1698
01:33:34,510 --> 01:33:40,239
there's no dynamic updating is massive

1699
01:33:37,539 --> 01:33:47,859
right it's like a 10x complexity

1700
01:33:40,238 --> 01:33:52,439
increase to go from a I don't support

1701
01:33:47,859 --> 01:33:55,329
hot updating of the live files to I do

1702
01:33:52,439 --> 01:34:02,799
because 90% of this code is from that

1703
01:33:55,329 --> 01:34:07,689
right but that's why people license

1704
01:34:02,800 --> 01:34:09,670
engines or by asset system stuff like I

1705
01:34:07,689 --> 01:34:11,469
used to work on because it's a

1706
01:34:09,670 --> 01:34:14,590
tremendous amount of bookkeeping code

1707
01:34:11,469 --> 01:34:17,529
just way too much and most of it's just

1708
01:34:14,590 --> 01:34:19,710
because art tools aren't made to output

1709
01:34:17,529 --> 01:34:23,109
things games can run on directly so

1710
01:34:19,710 --> 01:34:25,658
you're doing this work every time or the

1711
01:34:23,109 --> 01:34:28,750
engine writer is but somebody is because

1712
01:34:25,658 --> 01:34:30,039
the tools don't do it so anyway we need

1713
01:34:28,750 --> 01:34:31,359
some way of knowing whether we need to

1714
01:34:30,039 --> 01:34:33,029
rewrite it because we don't really want

1715
01:34:31,359 --> 01:34:34,739
to rewrite it every time we

1716
01:34:33,029 --> 01:34:36,420
and import we only want to rewrite it if

1717
01:34:34,739 --> 01:34:38,699
we actually got different values than

1718
01:34:36,420 --> 01:34:41,069
the ones that we already stored so what

1719
01:34:38,699 --> 01:34:43,559
we'd like to do is say you know compare

1720
01:34:41,069 --> 01:35:00,269
those two things what I might say is

1721
01:34:43,560 --> 01:35:04,280
like let's just let's just do this so we

1722
01:35:00,270 --> 01:35:06,930
need to do a fill rebuild if we do or if

1723
01:35:04,279 --> 01:35:09,119
blocks in the file the two blocks in the

1724
01:35:06,930 --> 01:35:16,409
file that we actually have if those

1725
01:35:09,119 --> 01:35:28,859
blocks differ and so if the asset here

1726
01:35:16,409 --> 01:35:33,930
we just do this right like assets asset

1727
01:35:28,859 --> 01:35:36,689
file here we just say look let's write a

1728
01:35:33,930 --> 01:35:38,250
function that takes an asset file takes

1729
01:35:36,689 --> 01:35:43,409
a range of date in the asset file and

1730
01:35:38,250 --> 01:35:47,039
then an actual like array we would be

1731
01:35:43,409 --> 01:35:48,840
writing out right like the code points

1732
01:35:47,039 --> 01:35:51,569
are the horizontal advance in our case

1733
01:35:48,840 --> 01:35:55,909
and just returns whether or not we need

1734
01:35:51,569 --> 01:35:55,909
to so

1735
01:36:02,238 --> 01:36:06,549
so basically that way we can just do

1736
01:36:15,939 --> 01:36:21,589
something like this so we now know like

1737
01:36:19,460 --> 01:36:25,279
alright we know that we've got the code

1738
01:36:21,590 --> 01:36:27,050
point size and the horizont sees we know

1739
01:36:25,279 --> 01:36:28,279
we need to dip the ranges out here's

1740
01:36:27,050 --> 01:36:30,770
what we're going to be writing to them

1741
01:36:28,279 --> 01:36:32,840
if we need to let's make something that

1742
01:36:30,770 --> 01:36:35,000
can actually do that then we'll say all

1743
01:36:32,840 --> 01:36:37,119
right if we need a full rebuild then we

1744
01:36:35,000 --> 01:36:39,710
need to actually reserve that space

1745
01:36:37,119 --> 01:36:43,539
otherwise we don't actually have to do

1746
01:36:39,710 --> 01:36:46,340
that right we don't actually have to

1747
01:36:43,539 --> 01:36:48,319
rewrite the font if those things didn't

1748
01:36:46,340 --> 01:36:49,760
change cuz those are the only things

1749
01:36:48,319 --> 01:36:53,659
that actually would have depended on

1750
01:36:49,760 --> 01:37:00,409
this right so I think we should be able

1751
01:36:53,659 --> 01:37:04,039
to do that I'm guessing that would seem

1752
01:37:00,409 --> 01:37:07,519
logical to me but I yeah like I said I'm

1753
01:37:04,039 --> 01:37:10,640
not 100% certain so the other thing we

1754
01:37:07,520 --> 01:37:15,110
might have to do there is we might have

1755
01:37:10,640 --> 01:37:17,060
to compare these as well so yeah I mean

1756
01:37:15,109 --> 01:37:21,920
another thing we might want to do is say

1757
01:37:17,060 --> 01:37:26,600
okay if any of these things differed we

1758
01:37:21,920 --> 01:37:31,060
also need a full rebuild so that's just

1759
01:37:26,600 --> 01:37:31,060
an another annoying piece of nonsense

1760
01:37:32,680 --> 01:37:37,880
again this is where I think I kind of

1761
01:37:36,529 --> 01:37:42,079
want to be able to do something where I

1762
01:37:37,880 --> 01:37:44,539
say hmm here's the data we would write

1763
01:37:42,079 --> 01:37:46,309
just to finis entirety and we just like

1764
01:37:44,539 --> 01:37:48,619
write it and then there's a diff fat

1765
01:37:46,310 --> 01:37:51,200
that I put in it to do basically exactly

1766
01:37:48,619 --> 01:37:53,000
oh this you can see why it's just this

1767
01:37:51,199 --> 01:37:55,579
is very very annoying and complicated

1768
01:37:53,000 --> 01:37:59,750
and I feel like we could have gotten it

1769
01:37:55,579 --> 01:38:02,510
better I don't really want to have to go

1770
01:37:59,750 --> 01:38:04,579
down that road now but I do feel like

1771
01:38:02,510 --> 01:38:07,400
there's a something there and so if this

1772
01:38:04,579 --> 01:38:08,750
were like my day job I would definitely

1773
01:38:07,399 --> 01:38:14,769
go in and figure out how to make that

1774
01:38:08,750 --> 01:38:14,770
happen but you know it's not so we won't

1775
01:38:18,420 --> 01:38:24,149
something like that

1776
01:38:20,729 --> 01:38:24,149
yeah I'm saying

1777
01:38:33,609 --> 01:38:43,359
that seems reasonable not great but

1778
01:38:36,789 --> 01:38:45,039
reasonable hello cat is back so I think

1779
01:38:43,359 --> 01:38:46,359
all that's good I just now need

1780
01:38:45,039 --> 01:38:48,849
something that says what the sizes of

1781
01:38:46,359 --> 01:38:58,598
these things are which we kind of

1782
01:38:48,849 --> 01:39:06,809
already know right so this is how big

1783
01:38:58,599 --> 01:39:06,809
the code point size is this is how big

1784
01:39:09,270 --> 01:39:21,040
pearls Donald Vance size is and although

1785
01:39:18,520 --> 01:39:25,270
I don't love that you know I think that

1786
01:39:21,039 --> 01:39:27,039
probably is fine for our purposes again

1787
01:39:25,270 --> 01:39:28,929
this is not code that users would be

1788
01:39:27,039 --> 01:39:30,908
running so if it is kind of janky or

1789
01:39:28,929 --> 01:39:33,190
fragile or we have to debug it a bunch

1790
01:39:30,908 --> 01:39:35,828
it's not as bad because we don't

1791
01:39:33,189 --> 01:39:38,439
actually depend on it to be reliable

1792
01:39:35,828 --> 01:39:40,389
when we ship it that helps a little bit

1793
01:39:38,439 --> 01:39:43,808
but again like I said it doesn't really

1794
01:39:40,389 --> 01:39:45,309
meet kind of my my you know I would do

1795
01:39:43,809 --> 01:39:50,739
another round on it I guess is what I'd

1796
01:39:45,309 --> 01:39:56,800
say uh so looking at this we then if we

1797
01:39:50,738 --> 01:40:00,189
need to do the rebuild here I think

1798
01:39:56,800 --> 01:40:03,219
really when I'm saying that I suppose

1799
01:40:00,189 --> 01:40:06,848
this stuff can all happen just in

1800
01:40:03,219 --> 01:40:08,529
general that that stuff is fine so what

1801
01:40:06,849 --> 01:40:11,170
we're really looking at here is in needs

1802
01:40:08,529 --> 01:40:13,750
full rebuild that's just when we need to

1803
01:40:11,170 --> 01:40:17,489
actually write the font out itself and

1804
01:40:13,750 --> 01:40:22,929
so to do that we just need to follow the

1805
01:40:17,488 --> 01:40:25,629
sort of the lead of the reserve asset

1806
01:40:22,929 --> 01:40:29,679
like space or whatever we call that let

1807
01:40:25,630 --> 01:40:32,440
me just jump to reserve asset we just

1808
01:40:29,679 --> 01:40:36,880
need to do this where we reserved space

1809
01:40:32,439 --> 01:40:38,439
for each of these things now I I guess

1810
01:40:36,880 --> 01:40:41,440
we don't do it twice because we just do

1811
01:40:38,439 --> 01:40:42,789
it for the total size that we needed so

1812
01:40:41,439 --> 01:40:46,549
what we would be doing here is saying

1813
01:40:42,789 --> 01:40:55,609
that asset data

1814
01:40:46,550 --> 01:40:58,070
so this this asset data that we've got

1815
01:40:55,609 --> 01:41:02,539
here we need to make sure that that's

1816
01:40:58,069 --> 01:41:07,158
going to hold the entirety of what we're

1817
01:41:02,539 --> 01:41:09,439
going to write so we have to pass it the

1818
01:41:07,158 --> 01:41:19,189
data size of the code point size plus

1819
01:41:09,439 --> 01:41:21,828
the horizontal advance size once we know

1820
01:41:19,189 --> 01:41:25,339
that that's safe we're good to go

1821
01:41:21,828 --> 01:41:26,630
but there's sort of a one additional

1822
01:41:25,340 --> 01:41:41,328
thing here too I suppose

1823
01:41:26,630 --> 01:41:43,368
this needs to be checked as well so we

1824
01:41:41,328 --> 01:41:47,269
sort of need this to have been computed

1825
01:41:43,368 --> 01:41:55,279
already as you know sort of a secondary

1826
01:41:47,270 --> 01:41:57,500
piece of information right and so if the

1827
01:41:55,279 --> 01:41:59,238
data size was wrong or these things

1828
01:41:57,500 --> 01:42:00,710
don't match or the blocks themselves

1829
01:41:59,238 --> 01:42:02,319
don't match if any of those things is

1830
01:42:00,710 --> 01:42:06,859
true we need to just rewrite this thing

1831
01:42:02,319 --> 01:42:09,679
and so that's gonna set the the modified

1832
01:42:06,859 --> 01:42:11,479
stuff on these files and that'll happen

1833
01:42:09,679 --> 01:42:13,368
automatically which is nice right you

1834
01:42:11,479 --> 01:42:14,988
can kind of see that happening here why

1835
01:42:13,368 --> 01:42:17,719
this doesn't set modified I'm not

1836
01:42:14,988 --> 01:42:20,839
entirely sure but oh well and then

1837
01:42:17,719 --> 01:42:23,239
anyway we at that point need to write

1838
01:42:20,840 --> 01:42:26,150
these out which is fortunately not so

1839
01:42:23,238 --> 01:42:28,069
difficult we know that we've got the

1840
01:42:26,149 --> 01:42:30,589
code point size here I should I guess

1841
01:42:28,069 --> 01:42:33,130
I'm gonna have to make these be thirty

1842
01:42:30,590 --> 01:42:33,130
twos here

1843
01:42:39,238 --> 01:42:45,250
we don't support larger than 32 sides

1844
01:42:42,069 --> 01:42:47,649
for that data so when we write the asset

1845
01:42:45,250 --> 01:42:51,880
data out here what we would do is say

1846
01:42:47,649 --> 01:42:56,799
here's the asset file in question here's

1847
01:42:51,880 --> 01:43:08,460
the data offset here's the thing we're

1848
01:42:56,800 --> 01:43:11,020
writing oops go ahead and write that I

1849
01:43:08,460 --> 01:43:18,039
think it's that and then we've got a

1850
01:43:11,020 --> 01:43:19,719
horizontal advance size now this is

1851
01:43:18,039 --> 01:43:21,310
going to start where the code points

1852
01:43:19,719 --> 01:43:23,170
left off but other than that I think

1853
01:43:21,310 --> 01:43:23,830
we're okay that'll do all the writing

1854
01:43:23,170 --> 01:43:30,460
for us

1855
01:43:23,829 --> 01:43:32,800
and off we go again not pretty but I

1856
01:43:30,460 --> 01:43:41,230
think that's where we're at so that will

1857
01:43:32,800 --> 01:43:46,380
write the font stuff out and look we've

1858
01:43:41,229 --> 01:43:46,379
got one too many close friends there

1859
01:43:47,100 --> 01:43:52,150
looks a lot good and then we need to

1860
01:43:50,590 --> 01:43:53,560
actually implement that block difference

1861
01:43:52,149 --> 01:43:55,119
routines which doesn't look particularly

1862
01:43:53,560 --> 01:43:58,630
hard to write either so that should be

1863
01:43:55,119 --> 01:44:00,670
pretty easy and then we can just focus

1864
01:43:58,630 --> 01:44:02,680
next weekend I guess on what what is

1865
01:44:00,670 --> 01:44:04,859
this complaining about can I create

1866
01:44:02,680 --> 01:44:09,640
import group tag no used to find confuse

1867
01:44:04,859 --> 01:44:12,238
available argument eight tag array to

1868
01:44:09,640 --> 01:44:12,239
grid tag

1869
01:44:16,958 --> 01:44:27,010
all right so let's just quickly blast

1870
01:44:22,389 --> 01:44:29,979
this in here if we have comparator here

1871
01:44:27,010 --> 01:44:36,130
for a block then what we want to do is

1872
01:44:29,979 --> 01:44:42,249
say here's the game assets here's the

1873
01:44:36,130 --> 01:44:50,078
asset file here's the data offset and

1874
01:44:42,248 --> 01:44:56,019
the size and then the guess what we're

1875
01:44:50,078 --> 01:44:59,649
comparing it to right so we need to do

1876
01:44:56,019 --> 01:45:10,329
that read and then we need to do mmm

1877
01:44:59,649 --> 01:45:12,698
compare which I thought we had you have

1878
01:45:10,328 --> 01:45:15,630
something that does this I feel like we

1879
01:45:12,698 --> 01:45:15,629
wrote something like this

1880
01:45:27,189 --> 01:45:31,909
ha so we have something that says

1881
01:45:30,560 --> 01:45:33,710
whether the memory differs or not and

1882
01:45:31,909 --> 01:45:36,649
that's what we actually need in this

1883
01:45:33,710 --> 01:45:40,460
case so we should be able to do a memory

1884
01:45:36,649 --> 01:45:45,409
is equal call where we pass the buffer

1885
01:45:40,460 --> 01:45:48,109
you know the you know file value and the

1886
01:45:45,409 --> 01:45:52,399
test value I guess are the two things we

1887
01:45:48,109 --> 01:45:54,829
should be able to say that gives us our

1888
01:45:52,399 --> 01:45:59,029
result so the only thing we have to

1889
01:45:54,829 --> 01:46:01,399
worry about is how we would actually you

1890
01:45:59,029 --> 01:46:04,699
know how to actually get that data out

1891
01:46:01,399 --> 01:46:07,549
of the file so in order to do that I'm

1892
01:46:04,699 --> 01:46:09,920
just going to go and again look at that

1893
01:46:07,550 --> 01:46:11,570
part that we were just you know for the

1894
01:46:09,920 --> 01:46:15,430
load font call that I was looking at

1895
01:46:11,569 --> 01:46:23,059
before we're just going to do that same

1896
01:46:15,430 --> 01:46:32,810
operation so we say look soon the result

1897
01:46:23,060 --> 01:46:34,370
is false try to get the for whatever the

1898
01:46:32,810 --> 01:46:35,870
acid is that we're reading here so I

1899
01:46:34,369 --> 01:46:37,279
guess we could just pass the asset

1900
01:46:35,869 --> 01:46:46,909
actually because it looks like the asset

1901
01:46:37,279 --> 01:46:50,559
itself has the file index in it so can

1902
01:46:46,909 --> 01:46:55,059
even just do this right but I don't know

1903
01:46:50,560 --> 01:46:57,020
I'm gonna go with this for this asset

1904
01:46:55,060 --> 01:46:59,900
get the file handle that we're going to

1905
01:46:57,020 --> 01:47:04,070
use to load it for the data offset that

1906
01:46:59,899 --> 01:47:06,259
you're given go ahead and read that from

1907
01:47:04,069 --> 01:47:11,349
that file handle however much we told

1908
01:47:06,260 --> 01:47:13,340
you to and put that into our temp buffer

1909
01:47:11,350 --> 01:47:15,800
assuming that there weren't any errors

1910
01:47:13,340 --> 01:47:19,550
then go ahead and do the compare

1911
01:47:15,800 --> 01:47:21,230
otherwise assume that it failed now when

1912
01:47:19,550 --> 01:47:25,369
we do this we're gonna need a place to

1913
01:47:21,229 --> 01:47:27,889
put this you know the base of the

1914
01:47:25,369 --> 01:47:30,140
temporary and so what we'd like to do

1915
01:47:27,890 --> 01:47:33,179
here is we'd like to just be able to

1916
01:47:30,140 --> 01:47:36,699
have a scratch

1917
01:47:33,179 --> 01:47:37,510
right would be we'd like to be able to

1918
01:47:36,698 --> 01:47:39,419
do something we're going to say

1919
01:47:37,510 --> 01:47:48,539
temporary memory like begin temp

1920
01:47:39,420 --> 01:47:51,789
temporary memory because we don't care

1921
01:47:48,539 --> 01:47:54,130
about saving any of this we just want to

1922
01:47:51,789 --> 01:47:56,349
use it just for scratch so we should be

1923
01:47:54,130 --> 01:47:57,359
able to do that just fine here and that

1924
01:47:56,349 --> 01:48:00,789
means we should be able to allocate

1925
01:47:57,359 --> 01:48:03,308
basically a membe lock to use in this

1926
01:48:00,789 --> 01:48:09,039
particular circumstance so in order to

1927
01:48:03,309 --> 01:48:10,719
get that file value we can just do give

1928
01:48:09,039 --> 01:48:13,630
me something that's the size you said we

1929
01:48:10,719 --> 01:48:17,489
needed we don't need to do anything else

1930
01:48:13,630 --> 01:48:22,270
with it we also don't need to clear it

1931
01:48:17,488 --> 01:48:26,198
like we normally do so we can just say

1932
01:48:22,270 --> 01:48:27,309
hey don't don't clear that either so

1933
01:48:26,198 --> 01:48:30,988
that's pretty much the entirety the

1934
01:48:27,309 --> 01:48:34,809
block clears or a block difference call

1935
01:48:30,988 --> 01:48:36,879
we know we've got a temporary nough here

1936
01:48:34,809 --> 01:48:42,909
because there's just one sitting around

1937
01:48:36,880 --> 01:48:47,440
so we can just say whatever that temp

1938
01:48:42,908 --> 01:48:49,500
man was called temporary 'no i that

1939
01:48:47,439 --> 01:48:52,419
should do it

1940
01:48:49,500 --> 01:48:55,920
so i think that gives us the full

1941
01:48:52,420 --> 01:48:57,029
pipeline pretty much start to finish

1942
01:48:55,920 --> 01:48:59,760
[Music]

1943
01:48:57,029 --> 01:49:01,479
looks like get file handle for is not

1944
01:48:59,760 --> 01:49:03,909
declare its we're gonna have to push

1945
01:49:01,479 --> 01:49:07,658
that out there we need a version of get

1946
01:49:03,908 --> 01:49:11,769
of that get or create asset source file

1947
01:49:07,658 --> 01:49:17,289
that doesn't use a care estar so i'm not

1948
01:49:11,770 --> 01:49:20,050
sure why it's even using a care star

1949
01:49:17,289 --> 01:49:25,109
actually because that's kind of annoying

1950
01:49:20,050 --> 01:49:27,460
we want those to be using a name that's

1951
01:49:25,109 --> 01:49:31,929
that's a string so I think that's like

1952
01:49:27,460 --> 01:49:34,480
an older piece of code so we do want to

1953
01:49:31,929 --> 01:49:37,118
fix that but what else do we got here

1954
01:49:34,479 --> 01:49:39,459
and then we have to import implement the

1955
01:49:37,118 --> 01:49:42,848
import glyph there let's look at what

1956
01:49:39,460 --> 01:49:44,739
the problem is here Assaf odd asset so

1957
01:49:42,849 --> 01:49:46,000
in this case we know that it's just this

1958
01:49:44,738 --> 01:49:48,069
asset

1959
01:49:46,000 --> 01:49:50,920
we're creating this asset we need to set

1960
01:49:48,069 --> 01:49:53,590
the asset file so when the asset gets

1961
01:49:50,920 --> 01:49:55,810
reserved I'm not sure when this asset

1962
01:49:53,590 --> 01:49:57,819
file actually is supposed to get set

1963
01:49:55,810 --> 01:50:01,600
where it when the assets supposed to get

1964
01:49:57,819 --> 01:50:03,789
set so like when you do this reserve it

1965
01:50:01,600 --> 01:50:06,250
doesn't actually set the asset to

1966
01:50:03,789 --> 01:50:08,560
anything in particular so I'm curious to

1967
01:50:06,250 --> 01:50:11,109
know like when that piece of information

1968
01:50:08,560 --> 01:50:14,560
actually gets set because we need it to

1969
01:50:11,109 --> 01:50:16,750
be reliable if you look in here you can

1970
01:50:14,560 --> 01:50:19,870
see that it's got like a file index and

1971
01:50:16,750 --> 01:50:22,569
an asset index in file and so I just I

1972
01:50:19,869 --> 01:50:33,099
do not know who's actually setting those

1973
01:50:22,569 --> 01:50:36,969
things so that's only happening like out

1974
01:50:33,100 --> 01:50:39,160
here in write modifications to HHA so I

1975
01:50:36,970 --> 01:50:41,079
do feel like that means that that buffer

1976
01:50:39,159 --> 01:50:53,729
check has to take something more

1977
01:50:41,079 --> 01:50:56,079
specific so here in get file handle for

1978
01:50:53,729 --> 01:50:58,449
what we really need to do is just just

1979
01:50:56,079 --> 01:51:00,460
get this platform file handle so I think

1980
01:50:58,449 --> 01:51:02,739
what I'd want to do is inside block

1981
01:51:00,460 --> 01:51:10,960
differs just forget all of this garbage

1982
01:51:02,739 --> 01:51:15,130
entirely and actually just do this right

1983
01:51:10,960 --> 01:51:19,539
because we already have the asset file

1984
01:51:15,130 --> 01:51:21,279
in question when we're here so rather

1985
01:51:19,539 --> 01:51:22,930
than going through some roundabout

1986
01:51:21,279 --> 01:51:24,609
process to figure out what file we're

1987
01:51:22,930 --> 01:51:33,310
going through what I would much rather

1988
01:51:24,609 --> 01:51:36,969
do is in here say by the way the asset

1989
01:51:33,310 --> 01:51:42,000
file in question is this one here's the

1990
01:51:36,970 --> 01:51:42,000
handle you know I'm saying

1991
01:51:43,939 --> 01:51:58,979
all right um let's see here so I think

1992
01:51:54,569 --> 01:52:01,769
that's it I'm still a little cagey have

1993
01:51:58,979 --> 01:52:10,529
how this works how does it know where to

1994
01:52:01,770 --> 01:52:13,230
put these assets so like who is setting

1995
01:52:10,529 --> 01:52:18,238
that asset and Nixon files getting set

1996
01:52:13,229 --> 01:52:27,359
there but file index someone has to set

1997
01:52:18,238 --> 01:52:36,139
this right and that someone is kind of

1998
01:52:27,359 --> 01:52:36,139
us right

1999
01:52:36,979 --> 01:52:40,000
so I mean that just kind of has to

2000
01:52:38,569 --> 01:52:43,219
happen

2001
01:52:40,000 --> 01:52:43,220
[Music]

2002
01:53:05,670 --> 01:53:08,989
so I think we're okay

2003
01:53:13,460 --> 01:53:19,069
so I think that's basically it again

2004
01:53:16,310 --> 01:53:22,730
very very complicated lots of pretty

2005
01:53:19,069 --> 01:53:25,849
tricky stuff happening there and again I

2006
01:53:22,729 --> 01:53:28,579
think if we wanted to do a full another

2007
01:53:25,850 --> 01:53:31,220
full pass on the asset system we could

2008
01:53:28,579 --> 01:53:32,559
fix a lot of that I just don't know that

2009
01:53:31,220 --> 01:53:36,560
we will

2010
01:53:32,560 --> 01:53:39,410
so because going to a system that's more

2011
01:53:36,560 --> 01:53:41,570
generic in terms of how it prepares and

2012
01:53:39,409 --> 01:53:44,720
then diffs data is almost certainly the

2013
01:53:41,569 --> 01:53:46,759
right way to go but I we probably just

2014
01:53:44,720 --> 01:53:48,440
won't do that but that's where we would

2015
01:53:46,760 --> 01:53:51,369
that's how we would do the next

2016
01:53:48,439 --> 01:53:53,809
iteration to make further improvements

2017
01:53:51,369 --> 01:53:56,750
so for right now what I'm going to do is

2018
01:53:53,810 --> 01:53:58,580
I'm gonna finish up for today because

2019
01:53:56,750 --> 01:54:05,079
we're pretty much done we just now need

2020
01:53:58,579 --> 01:54:17,149
to to stuff out the import glyph call

2021
01:54:05,079 --> 01:54:25,159
which we don't actually have probably

2022
01:54:17,149 --> 01:54:28,279
just you there and yeah that's I don't

2023
01:54:25,159 --> 01:54:30,609
actually know what we want to pass there

2024
01:54:28,279 --> 01:54:30,609
yet

2025
01:54:44,729 --> 01:54:52,239
so that's what we need to implement but

2026
01:54:48,640 --> 01:54:54,250
at the moment it's not and then the only

2027
01:54:52,239 --> 01:54:55,779
other thing that we have here is we want

2028
01:54:54,250 --> 01:54:58,329
to be able to do a getter create asset

2029
01:54:55,779 --> 01:55:02,349
source file without needing a null

2030
01:54:58,329 --> 01:55:07,329
terminated string I am surprised that

2031
01:55:02,350 --> 01:55:14,140
that didn't already exist that's really

2032
01:55:07,329 --> 01:55:27,670
bizarre you can see here like you know

2033
01:55:14,140 --> 01:55:30,810
it's just yeah just looking at all the

2034
01:55:27,670 --> 01:55:30,810
places it's actually used

2035
01:55:45,618 --> 01:55:52,848
so you can even see in here like we had

2036
01:55:49,429 --> 01:55:55,789
to do a null terminator on here for no

2037
01:55:52,849 --> 01:55:58,130
reason right so that we could pass it as

2038
01:55:55,789 --> 01:56:00,829
a null terminator is trying to begin

2039
01:55:58,130 --> 01:56:09,409
with so I really do think we just want

2040
01:56:00,829 --> 01:56:12,109
that to be a string in general I mean

2041
01:56:09,408 --> 01:56:14,179
that's really all there is to it so I

2042
01:56:12,109 --> 01:56:16,549
think we do want that I'm gonna go ahead

2043
01:56:14,179 --> 01:56:19,300
and and make this happen this way

2044
01:56:16,550 --> 01:56:19,300
temporarily

2045
01:56:33,479 --> 01:56:38,849
and this will just make sure we can pile

2046
01:56:36,130 --> 01:56:38,850
okay for now

2047
01:56:50,279 --> 01:56:55,710
so what was it supposed to be taking

2048
01:56:52,979 --> 01:56:57,449
their on the bitmap ID because that's

2049
01:56:55,710 --> 01:56:59,939
the only thing we've got left

2050
01:56:57,449 --> 01:57:07,019
oh it is actually it's just an actual

2051
01:56:59,939 --> 01:57:09,419
bitmap ID which is kind of a little bit

2052
01:57:07,020 --> 01:57:16,380
weird because we don't really use IDs in

2053
01:57:09,420 --> 01:57:23,069
here otherwise so I don't love that I

2054
01:57:16,380 --> 01:57:24,840
think we want that to be a u-32 you know

2055
01:57:23,069 --> 01:57:27,139
not that that's not what it is but I

2056
01:57:24,840 --> 01:57:30,140
just think that should be like that

2057
01:57:27,140 --> 01:57:30,140
right

2058
01:57:51,109 --> 01:57:56,609
so I think that's good for now

2059
01:57:53,880 --> 01:58:00,449
that leaves us running okay so I think

2060
01:57:56,609 --> 01:58:04,799
that's pretty much all there is to it we

2061
01:58:00,449 --> 01:58:06,599
can go ahead to brief Q&amp;A now and next

2062
01:58:04,800 --> 01:58:08,360
time we'll do the import glyph next we

2063
01:58:06,600 --> 01:58:10,560
go through import glyph and debugging

2064
01:58:08,359 --> 01:58:15,479
import lyft will just be like basically

2065
01:58:10,560 --> 01:58:17,370
Riemann geing some some code there oh

2066
01:58:15,479 --> 01:58:24,109
sorry did I have a typo there

2067
01:58:17,369 --> 01:58:24,109
let me take a look yeah

2068
01:59:33,210 --> 01:59:36,619
looks like no questions

2069
02:00:00,630 --> 02:00:04,920
all right I've forgotten no questions

2070
02:00:02,729 --> 02:00:12,629
then I am done I will go ahead and wrap

2071
02:00:04,920 --> 02:00:14,609
it up thank you everyone for joining me

2072
02:00:12,630 --> 02:00:16,020
for another episode of handmade hero

2073
02:00:14,609 --> 02:00:17,699
it's been a pleasure coding with you as

2074
02:00:16,020 --> 02:00:18,810
always if you would like to follow in

2075
02:00:17,699 --> 02:00:21,420
series you can always peer to the game

2076
02:00:18,810 --> 02:00:23,039
on handmade hero org and it comes with a

2077
02:00:21,420 --> 02:00:25,980
source code so you can follow along at

2078
02:00:23,039 --> 02:00:28,619
home that's it for this weekend next

2079
02:00:25,979 --> 02:00:32,219
weekend I will just be doing cleanup

2080
02:00:28,619 --> 02:00:34,739
work so that we can check this off the

2081
02:00:32,220 --> 02:00:36,990
asset system off is being done basically

2082
02:00:34,739 --> 02:00:38,729
that involves pulling out that bitmap

2083
02:00:36,989 --> 02:00:41,639
import code so that it can work for

2084
02:00:38,729 --> 02:00:44,729
glyphs or for sprite sheets like it was

2085
02:00:41,640 --> 02:00:46,770
working currently and then just like

2086
02:00:44,729 --> 02:00:48,179
testing everything debugging you know

2087
02:00:46,770 --> 02:00:49,200
making sure we can rebuild your desk

2088
02:00:48,180 --> 02:00:52,470
that's just putting it through its paces

2089
02:00:49,199 --> 02:00:54,899
making sure everything's fine and and

2090
02:00:52,470 --> 02:00:57,750
then I think we're in good I think we're

2091
02:00:54,899 --> 02:00:59,279
in good shape I hope see you back here

2092
02:00:57,750 --> 02:01:01,140
for that until then have fun programming

2093
02:00:59,279 --> 02:01:03,920
and I'll see everyone on the Internet

2094
02:01:01,140 --> 02:01:03,920
tickety's everybody

