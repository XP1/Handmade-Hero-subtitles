1
00:00:04,878 --> 00:00:10,079
hello everybody and welcome to hand made

2
00:00:07,559 --> 00:00:12,119
here oh sure we cut a complete-game live

3
00:00:10,080 --> 00:00:13,530
on stream all right we already actually

4
00:00:12,119 --> 00:00:16,939
installed that in the pre stream so we

5
00:00:13,529 --> 00:00:22,259
don't need to I've updated to remedy to

6
00:00:16,940 --> 00:00:24,179
0.2 0.2 today and there really isn't

7
00:00:22,260 --> 00:00:26,820
probably anything you need to know about

8
00:00:24,179 --> 00:00:30,300
that other than it just fixes and

9
00:00:26,820 --> 00:00:32,250
improvements to the debugger it's in

10
00:00:30,300 --> 00:00:33,869
active development we switched from

11
00:00:32,250 --> 00:00:37,049
Visual Studio to remedy when Visual

12
00:00:33,869 --> 00:00:38,669
Studio refused to launch and we've had

13
00:00:37,049 --> 00:00:42,238
no worries with it so far it's been

14
00:00:38,670 --> 00:00:43,559
working great so hey I think we may be

15
00:00:42,238 --> 00:00:45,058
done with Visual Studio I think Visual

16
00:00:43,558 --> 00:00:48,179
Studio we may be able to take it out

17
00:00:45,058 --> 00:00:50,729
back behind the tool shed and put a put

18
00:00:48,179 --> 00:00:52,140
a bullet in the head and and good

19
00:00:50,729 --> 00:00:53,698
riddance to bad rubbish so thank you

20
00:00:52,140 --> 00:00:56,609
very much to gorge men horne for all his

21
00:00:53,698 --> 00:00:57,780
work on remedy it's it'd be pretty nice

22
00:00:56,609 --> 00:01:02,189
and never have to load Visual Studio

23
00:00:57,780 --> 00:01:03,808
again and all that that implies but who

24
00:01:02,189 --> 00:01:06,149
knows it's still early in remedies

25
00:01:03,808 --> 00:01:08,340
lifecycle so you know we're not asking

26
00:01:06,150 --> 00:01:09,359
for a miracle here so there may be some

27
00:01:08,340 --> 00:01:12,270
rough patches ahead and that's totally

28
00:01:09,359 --> 00:01:13,799
fine it's a brand new debugger so you

29
00:01:12,269 --> 00:01:16,890
know you got to cut it some slack but so

30
00:01:13,799 --> 00:01:19,920
far it's been real good kudos to George

31
00:01:16,890 --> 00:01:23,759
for all of that right now we are in a

32
00:01:19,920 --> 00:01:27,180
sort of testing position now we've we've

33
00:01:23,759 --> 00:01:28,739
got as far as we know and I we didn't

34
00:01:27,180 --> 00:01:30,509
really do too much with it because we

35
00:01:28,739 --> 00:01:31,859
sort of finished up just as time was

36
00:01:30,509 --> 00:01:33,900
running out

37
00:01:31,859 --> 00:01:35,549
last time but if you take a look at

38
00:01:33,900 --> 00:01:37,859
where we're at with our handmade hero

39
00:01:35,549 --> 00:01:40,979
builds we have done all of the debugging

40
00:01:37,859 --> 00:01:43,618
work to ensure that we are actually

41
00:01:40,978 --> 00:01:45,539
importing and we can even look at these

42
00:01:43,618 --> 00:01:47,310
if we go into the directory and look at

43
00:01:45,540 --> 00:01:49,618
the tech stumps but to ensure that we're

44
00:01:47,310 --> 00:01:54,600
actually importing sounds as part of our

45
00:01:49,618 --> 00:01:57,140
unified asset import system if I open up

46
00:01:54,599 --> 00:02:02,759
to have you from the bonus pack here

47
00:01:57,140 --> 00:02:07,049
intro cutscene dot txt what you can see

48
00:02:02,759 --> 00:02:09,419
is our assets are now can include audio

49
00:02:07,049 --> 00:02:11,580
and they can actually include chained

50
00:02:09,419 --> 00:02:13,530
audio assets so what you can see here is

51
00:02:11,580 --> 00:02:16,320
like the audio gets chained

52
00:02:13,530 --> 00:02:20,159
in chunks that can be read so really

53
00:02:16,319 --> 00:02:24,090
long audio like this music test piece

54
00:02:20,159 --> 00:02:26,370
here that go on for minutes we don't

55
00:02:24,090 --> 00:02:28,080
want to have to load that whole sound

56
00:02:26,370 --> 00:02:30,990
you necessarily we want to be able to

57
00:02:28,080 --> 00:02:32,730
stream it over time so that you know our

58
00:02:30,990 --> 00:02:33,990
streaming system has nice bite-sized

59
00:02:32,729 --> 00:02:35,629
chunks work with all the time and can

60
00:02:33,990 --> 00:02:39,570
keep the load just like it does with

61
00:02:35,629 --> 00:02:41,519
bitmap assets so that should be good

62
00:02:39,569 --> 00:02:44,569
what I'm noticing here just looking

63
00:02:41,520 --> 00:02:47,340
through it this is stored more than once

64
00:02:44,569 --> 00:02:50,150
which doesn't make a lot of sense right

65
00:02:47,340 --> 00:02:54,180
you can see that stored here and here

66
00:02:50,150 --> 00:02:57,629
and so I'm not sure why that's happening

67
00:02:54,180 --> 00:02:59,280
but that might in oh you know what that

68
00:02:57,629 --> 00:03:00,989
might because it's to channel so that

69
00:02:59,280 --> 00:03:05,520
might be fine let's take a look channel

70
00:03:00,989 --> 00:03:07,110
index 1 channel index 0 ok so that's

71
00:03:05,520 --> 00:03:09,300
just because it was stereo so even

72
00:03:07,110 --> 00:03:11,790
that's fine so I think we're good there

73
00:03:09,300 --> 00:03:13,980
and then we've got all of our other

74
00:03:11,789 --> 00:03:15,179
stuff here so you know one of the things

75
00:03:13,979 --> 00:03:17,548
that I think maybe we should shoot for

76
00:03:15,180 --> 00:03:21,599
is let's try to play this music test

77
00:03:17,549 --> 00:03:23,370
over the opening cutscene it doesn't go

78
00:03:21,599 --> 00:03:26,069
with the opening cutscene so it won't

79
00:03:23,370 --> 00:03:30,599
sound very good it's also just a random

80
00:03:26,069 --> 00:03:32,310
piano sample or something but we can

81
00:03:30,599 --> 00:03:35,159
just use that as our goal for getting

82
00:03:32,310 --> 00:03:36,719
the audio subsystem fleshed out and

83
00:03:35,159 --> 00:03:38,759
finished as well we kind of did that

84
00:03:36,719 --> 00:03:40,259
work to a certain extent for textures

85
00:03:38,759 --> 00:03:44,189
they're working kind of more like they

86
00:03:40,259 --> 00:03:45,599
should now in a more shippable way and

87
00:03:44,189 --> 00:03:47,969
so what we'd like to do is do that for

88
00:03:45,599 --> 00:03:50,639
music chunks now as well now we already

89
00:03:47,969 --> 00:03:52,109
had music working in the game so we

90
00:03:50,639 --> 00:03:53,339
don't have to do all the work of like

91
00:03:52,110 --> 00:03:55,829
writing a mixer and all that stuff

92
00:03:53,340 --> 00:03:58,439
that's already done but we didn't really

93
00:03:55,829 --> 00:04:01,230
have this kind of a finalized way for us

94
00:03:58,439 --> 00:04:03,650
to do our music streaming and I'd like

95
00:04:01,229 --> 00:04:07,798
to do that a little bit more cleanly now

96
00:04:03,650 --> 00:04:09,539
as we go so there's a lot of ways we can

97
00:04:07,799 --> 00:04:11,670
approach that but I think what I'd like

98
00:04:09,539 --> 00:04:14,609
to do is I think I'd like to keep it

99
00:04:11,669 --> 00:04:17,579
simple and just do it the same way for

100
00:04:14,610 --> 00:04:19,919
the most part that we're doing our art

101
00:04:17,579 --> 00:04:21,889
assets the way that we do it our do our

102
00:04:19,918 --> 00:04:25,889
art assets is there just 6 size chunks

103
00:04:21,889 --> 00:04:27,579
and we lay them out inside fixed size

104
00:04:25,889 --> 00:04:31,478
chunks right

105
00:04:27,579 --> 00:04:34,000
that's pretty much how it works and the

106
00:04:31,478 --> 00:04:36,668
only times that we don't do stuff like

107
00:04:34,000 --> 00:04:39,098
that is when we have like unusual like

108
00:04:36,668 --> 00:04:41,918
for example but intro cutscenes can have

109
00:04:39,098 --> 00:04:43,959
unusual big plate sizes but most

110
00:04:41,918 --> 00:04:46,089
everything else that's a sprite gets

111
00:04:43,959 --> 00:04:49,209
broken up into fixed sized chunks for

112
00:04:46,089 --> 00:04:50,978
audio since it's one-dimensional it's

113
00:04:49,209 --> 00:04:52,478
pretty free for us to just break these

114
00:04:50,978 --> 00:04:55,538
into fixed sized chunks as well and say

115
00:04:52,478 --> 00:04:59,918
look let's just pick us chunk size we

116
00:04:55,538 --> 00:05:02,468
sort of settled upon 20 56k let's just

117
00:04:59,918 --> 00:05:05,549
make a bunch of 2050 6k chunks and we'll

118
00:05:02,468 --> 00:05:08,288
just load audio into those as necessary

119
00:05:05,550 --> 00:05:10,509
that seems like the best way to do it to

120
00:05:08,288 --> 00:05:12,098
me we won't have that many sounds

121
00:05:10,509 --> 00:05:15,250
playing at a time anyway you know we

122
00:05:12,098 --> 00:05:16,990
don't have a huge budget for the a/v of

123
00:05:15,250 --> 00:05:18,399
this game so it's not like we're gonna

124
00:05:16,990 --> 00:05:20,889
have like hundreds of thousands of

125
00:05:18,399 --> 00:05:23,709
sounds playing all the time when you

126
00:05:20,889 --> 00:05:30,278
have a large budget for a V that can

127
00:05:23,709 --> 00:05:31,388
actually happen so I would like to draw

128
00:05:30,278 --> 00:05:33,908
a little bit of distinction there is we

129
00:05:31,389 --> 00:05:36,218
might want to be more creative about how

130
00:05:33,908 --> 00:05:37,839
we do things if we were trying to shoot

131
00:05:36,218 --> 00:05:39,639
for really large numbers of sound

132
00:05:37,839 --> 00:05:41,258
samples playing we would have to make

133
00:05:39,639 --> 00:05:43,930
concessions for that and think about

134
00:05:41,259 --> 00:05:45,310
that in the design we're never gonna get

135
00:05:43,930 --> 00:05:48,009
there on handmade here oh that's that's

136
00:05:45,310 --> 00:05:49,569
like only Triple A games get that kind

137
00:05:48,009 --> 00:05:50,979
of sound attention where there's

138
00:05:49,569 --> 00:05:53,050
literally hundreds of sounds playing

139
00:05:50,978 --> 00:05:54,399
like always like ambient things and all

140
00:05:53,050 --> 00:05:56,288
of this mixing for all of these

141
00:05:54,399 --> 00:05:58,149
different things you know we're not even

142
00:05:56,288 --> 00:05:59,978
gonna hat you know we'll have a thousand

143
00:05:58,149 --> 00:06:02,348
sounds total or something right probably

144
00:05:59,978 --> 00:06:05,348
in the game cuz that'll be what we can

145
00:06:02,348 --> 00:06:07,060
afford we're not gonna have like a sound

146
00:06:05,348 --> 00:06:09,028
designer that gets paid hundred thousand

147
00:06:07,060 --> 00:06:11,348
dollars a year or sound design team

148
00:06:09,028 --> 00:06:13,000
going through and adding like all of

149
00:06:11,348 --> 00:06:14,528
these sound effects to everything and

150
00:06:13,000 --> 00:06:16,718
layering everything and you know making

151
00:06:14,528 --> 00:06:20,889
these really rich sound scapes so it's

152
00:06:16,718 --> 00:06:22,718
worth noting that as you get more

153
00:06:20,889 --> 00:06:23,860
towards a triple-a sides of things there

154
00:06:22,718 --> 00:06:25,598
are different concessions you have to

155
00:06:23,860 --> 00:06:28,180
make you do have to start thinking about

156
00:06:25,598 --> 00:06:29,620
things in a more meticulous level we'll

157
00:06:28,180 --> 00:06:32,218
never get there on handmade hero so I

158
00:06:29,620 --> 00:06:35,319
think we don't want to over complicate

159
00:06:32,218 --> 00:06:37,209
that system without really knowing what

160
00:06:35,319 --> 00:06:39,060
those even would be and I wouldn't

161
00:06:37,209 --> 00:06:41,160
recommend us doing anything differently

162
00:06:39,060 --> 00:06:42,480
right now anyway I would take the same

163
00:06:41,160 --> 00:06:44,700
approach I take to a lot of things which

164
00:06:42,480 --> 00:06:46,650
is I'd want some people to actually

165
00:06:44,699 --> 00:06:48,569
start producing those soundscapes first

166
00:06:46,649 --> 00:06:50,668
and then start attacking what looked

167
00:06:48,569 --> 00:06:54,839
like our weak spots based on those

168
00:06:50,668 --> 00:06:56,519
profiles anyway so again don't try to

169
00:06:54,839 --> 00:06:58,229
over engineer something for use cases

170
00:06:56,519 --> 00:07:00,359
you don't have yet I guess it's the way

171
00:06:58,230 --> 00:07:01,889
I would put it so I always would focus

172
00:07:00,360 --> 00:07:04,069
on the ones we actually do have and in

173
00:07:01,889 --> 00:07:07,500
this case we kind of know what that is

174
00:07:04,069 --> 00:07:10,740
and it's just gonna be I think fine to

175
00:07:07,500 --> 00:07:13,949
say let's make 256k chunks we'll make

176
00:07:10,740 --> 00:07:16,110
some number of those so you know let's

177
00:07:13,949 --> 00:07:18,120
say we wanted to spend a quarter

178
00:07:16,110 --> 00:07:21,030
megabyte I'm sorry a quarter gigabyte on

179
00:07:18,120 --> 00:07:27,509
sound right if you wanted to say like

180
00:07:21,029 --> 00:07:32,629
okay we're gonna do 256 times 1024 x

181
00:07:27,509 --> 00:07:40,139
1024 x 1024 right that's a sorry that's

182
00:07:32,629 --> 00:07:41,668
that's not gonna work that's 1/4

183
00:07:40,139 --> 00:07:45,538
gigabyte so if you're gonna do 1/4

184
00:07:41,668 --> 00:07:49,139
gigabyte on sound right then we know

185
00:07:45,538 --> 00:07:52,769
that that's gonna be a power of 1024

186
00:07:49,139 --> 00:07:56,819
over like what we had right so we know

187
00:07:52,769 --> 00:07:59,849
that we could store 1,024 sound chunks

188
00:07:56,819 --> 00:08:01,800
at any given time if we dedicated 1/4

189
00:07:59,850 --> 00:08:03,930
gigabyte of the system RAM to it and

190
00:08:01,800 --> 00:08:05,939
that's not very much just Imran we could

191
00:08:03,930 --> 00:08:07,500
dedicate a lot more we're not doing very

192
00:08:05,939 --> 00:08:10,319
much the system Ram we just store our

193
00:08:07,500 --> 00:08:13,079
world spit estate and most machines

194
00:08:10,319 --> 00:08:17,399
today have gigabytes of memory you know

195
00:08:13,079 --> 00:08:18,870
for a 16 even consoles have something

196
00:08:17,399 --> 00:08:20,699
like 4 gigabytes of memory now which is

197
00:08:18,870 --> 00:08:23,280
nuts when you think about back in the

198
00:08:20,699 --> 00:08:25,349
day so we could even do like a whole

199
00:08:23,279 --> 00:08:27,689
gigabyte for sound which would mean we'd

200
00:08:25,350 --> 00:08:29,340
have like 4096 sound chunks active at

201
00:08:27,689 --> 00:08:32,370
any given time again that seems like

202
00:08:29,339 --> 00:08:35,278
more than enough for what we need so I

203
00:08:32,370 --> 00:08:37,729
think we should be totally fine with

204
00:08:35,278 --> 00:08:41,458
just doing a really basic chunk scheme

205
00:08:37,729 --> 00:08:43,560
and that gets us out of the the

206
00:08:41,458 --> 00:08:46,799
arbitrary memory management side of

207
00:08:43,559 --> 00:08:48,599
things as well right so if I pop into

208
00:08:46,799 --> 00:08:52,289
the asset system what you can see here

209
00:08:48,600 --> 00:08:52,800
is we kind of just left some sketches in

210
00:08:52,289 --> 00:08:55,558
place

211
00:08:52,799 --> 00:08:57,058
for how audio was gonna get loaded you

212
00:08:55,558 --> 00:08:59,519
can see in here we've got like a

213
00:08:57,058 --> 00:09:03,558
renderer texture loaded at sample index

214
00:08:59,519 --> 00:09:06,299
and a Luud font I'm not gonna do this

215
00:09:03,558 --> 00:09:08,519
load at sample index we had sketched out

216
00:09:06,299 --> 00:09:10,169
a way of doing things where we would

217
00:09:08,519 --> 00:09:14,009
like load things in at a particular

218
00:09:10,169 --> 00:09:16,139
sample play them till our load meter got

219
00:09:14,009 --> 00:09:18,028
like past where it needed to be and move

220
00:09:16,139 --> 00:09:23,249
them I don't really know that we need to

221
00:09:18,028 --> 00:09:28,308
do that we could I mean it's tempting to

222
00:09:23,249 --> 00:09:30,509
do but I just don't know if it's wise I

223
00:09:28,308 --> 00:09:33,088
just said we should just do a chunking

224
00:09:30,509 --> 00:09:40,139
seam and I feel like I should do that

225
00:09:33,089 --> 00:09:41,489
but yeah so what do you folks want to do

226
00:09:40,139 --> 00:09:42,989
I mean what do you think we should do do

227
00:09:41,489 --> 00:09:47,519
you think we should try the crazy low to

228
00:09:42,989 --> 00:09:49,739
that sample index game it seems maybe a

229
00:09:47,519 --> 00:09:51,839
little too crazy but I've never seen it

230
00:09:49,739 --> 00:09:53,278
discussed before so that usually is an

231
00:09:51,839 --> 00:09:55,170
argument for doing and I'm handmade hero

232
00:09:53,278 --> 00:09:56,759
because I like to draw things out and

233
00:09:55,169 --> 00:09:58,318
show you how we attack new problems

234
00:09:56,759 --> 00:10:00,808
that's pretty much the entire point of

235
00:09:58,318 --> 00:10:02,909
the series and so sometimes I'd like to

236
00:10:00,808 --> 00:10:04,708
sort of try things that I've never heard

237
00:10:02,909 --> 00:10:07,798
people try before just because it seems

238
00:10:04,708 --> 00:10:09,989
like that encourages you to experiment

239
00:10:07,798 --> 00:10:10,980
and see how programmers attack problems

240
00:10:09,990 --> 00:10:12,720
that they don't already know how to

241
00:10:10,980 --> 00:10:14,909
solve and obviously you already know how

242
00:10:12,720 --> 00:10:16,379
to solve the fixed-size reuse case we've

243
00:10:14,909 --> 00:10:19,289
done that many times in handmade hero in

244
00:10:16,379 --> 00:10:23,490
different ways so that's something to be

245
00:10:19,289 --> 00:10:25,110
said if we were gonna do that you can

246
00:10:23,490 --> 00:10:27,568
see here we've got a sample count in a

247
00:10:25,110 --> 00:10:29,490
sample buffer the idea here we would

248
00:10:27,568 --> 00:10:32,639
just set this to some large number let's

249
00:10:29,490 --> 00:10:34,139
say it we set it to the 256 megabytes or

250
00:10:32,639 --> 00:10:36,869
gigabyte

251
00:10:34,139 --> 00:10:39,778
we would then have a you 64 that was the

252
00:10:36,869 --> 00:10:42,298
sample buffer base index and that just

253
00:10:39,778 --> 00:10:45,720
goes up infinitely over the entire

254
00:10:42,298 --> 00:10:50,039
lifetime of the game every time we need

255
00:10:45,720 --> 00:10:54,778
to load a sound we load it there and we

256
00:10:50,039 --> 00:10:57,808
slide effectively the the buffer base

257
00:10:54,778 --> 00:10:59,220
around so we say look we need to load

258
00:10:57,808 --> 00:11:01,649
this much

259
00:10:59,220 --> 00:11:04,619
we either reset back to the beginning of

260
00:11:01,649 --> 00:11:06,179
the buffer if we couldn't fit it or we

261
00:11:04,619 --> 00:11:07,889
load it there if we could

262
00:11:06,179 --> 00:11:10,469
and it's just a circularbuffer that we

263
00:11:07,889 --> 00:11:13,230
fill and then every sound just remembers

264
00:11:10,470 --> 00:11:17,430
where it was and when the loaded base

265
00:11:13,230 --> 00:11:20,190
index moves past where you are your

266
00:11:17,429 --> 00:11:23,539
sound is no longer loaded and you have

267
00:11:20,190 --> 00:11:23,540
to load it again right

268
00:11:32,590 --> 00:11:37,509
so that's I mean that's it right that's

269
00:11:36,850 --> 00:11:39,879
all it is

270
00:11:37,509 --> 00:11:42,100
I don't know what sample buffer load

271
00:11:39,879 --> 00:11:47,710
index was I'm not sure why you would

272
00:11:42,100 --> 00:11:50,740
have needed that in this scheme in fact

273
00:11:47,710 --> 00:11:52,210
I'm not really sure you do since we

274
00:11:50,740 --> 00:11:53,740
obviously already put this in place I

275
00:11:52,210 --> 00:11:57,400
guess I'm gonna go back on my word after

276
00:11:53,740 --> 00:12:01,930
literally only just saying it and say

277
00:11:57,399 --> 00:12:08,199
that I maybe will try this

278
00:12:01,929 --> 00:12:09,789
can we get sample buffer base index did

279
00:12:08,200 --> 00:12:13,330
we ever do anything with that I don't

280
00:12:09,789 --> 00:12:16,719
think we did so let me go in here and

281
00:12:13,330 --> 00:12:19,210
see um let me give a quick overview of

282
00:12:16,720 --> 00:12:20,710
this just really quickly because it

283
00:12:19,210 --> 00:12:23,230
looks like we never implemented we just

284
00:12:20,710 --> 00:12:25,240
I remember I said what it was I'm just

285
00:12:23,230 --> 00:12:28,080
gonna say what it is again for the

286
00:12:25,240 --> 00:12:30,820
benefit of folks who didn't actually

287
00:12:28,080 --> 00:12:34,028
hear that and are gonna wash right now

288
00:12:30,820 --> 00:12:41,020
and not know what I'm doing and so if we

289
00:12:34,028 --> 00:12:48,309
take a look at today's day 256 and this

290
00:12:41,019 --> 00:12:50,529
is the crazy sound buffer I don't argue

291
00:12:48,309 --> 00:12:52,989
this is a good idea it was just an idea

292
00:12:50,529 --> 00:12:54,730
and I'd never heard it tried before so I

293
00:12:52,990 --> 00:12:59,230
thought I would try it I just made it up

294
00:12:54,730 --> 00:13:01,180
it's weird the idea is simple uh you

295
00:12:59,230 --> 00:13:03,550
know you basically just say look I've

296
00:13:01,179 --> 00:13:05,259
got a certain amount of memory that I'm

297
00:13:03,549 --> 00:13:07,240
gonna reserve for sound so let's say

298
00:13:05,259 --> 00:13:09,850
it's 256 megabytes but doesn't matter

299
00:13:07,240 --> 00:13:12,759
right this is just any number that you

300
00:13:09,850 --> 00:13:15,159
want to reserve you allocate that memory

301
00:13:12,759 --> 00:13:17,769
so this is 256 megabytes I need this to

302
00:13:15,159 --> 00:13:20,370
be more stable there we go you allocate

303
00:13:17,769 --> 00:13:23,350
256 megabytes of memory here it is

304
00:13:20,370 --> 00:13:26,350
and then what you do is you say I start

305
00:13:23,350 --> 00:13:28,330
loading sounds at zero and they just

306
00:13:26,350 --> 00:13:31,629
they just fill this up so here's sound a

307
00:13:28,330 --> 00:13:35,350
here's sound B here's sound see here's

308
00:13:31,629 --> 00:13:37,389
sound D and obviously with 2006 MIT

309
00:13:35,350 --> 00:13:39,730
let's say this was much lower for this

310
00:13:37,389 --> 00:13:41,740
example because traduz megabytes would

311
00:13:39,730 --> 00:13:44,830
fit way more sounds than that but you

312
00:13:41,740 --> 00:13:46,090
get the idea i loading the sounds when i

313
00:13:44,830 --> 00:13:48,250
get to the end of the

314
00:13:46,090 --> 00:13:50,410
buffer at some point I'm gonna ask you

315
00:13:48,250 --> 00:13:56,100
know eventually I'm gonna ask the load

316
00:13:50,409 --> 00:13:56,100
of sound and that sound is going to be a

317
00:13:58,470 --> 00:14:05,710
it sound is gonna not fit right so it's

318
00:14:03,610 --> 00:14:06,700
gonna have to be put like let's say here

319
00:14:05,710 --> 00:14:08,740
because I want the sound to be

320
00:14:06,700 --> 00:14:11,860
contiguous I I don't want to wrap the

321
00:14:08,740 --> 00:14:13,060
buffer right and even if I could I would

322
00:14:11,860 --> 00:14:14,919
need to put this part at the beginning

323
00:14:13,059 --> 00:14:17,500
at least so even if you treated it as a

324
00:14:14,919 --> 00:14:19,929
fully circular buffer you'd still have

325
00:14:17,500 --> 00:14:21,490
to use the beginning so what happens

326
00:14:19,929 --> 00:14:23,169
then is you just overwrite whatever

327
00:14:21,490 --> 00:14:25,480
sound was in there now and now this

328
00:14:23,169 --> 00:14:27,219
sound is considered evicted so if you

329
00:14:25,480 --> 00:14:35,529
wanted to play sound a again you have to

330
00:14:27,220 --> 00:14:39,279
load a again that's it the reason this

331
00:14:35,529 --> 00:14:42,250
is interesting is because it gets rid of

332
00:14:39,279 --> 00:14:45,089
any notion of any tracking at all for

333
00:14:42,250 --> 00:14:47,710
the sounds you don't have to keep an LRU

334
00:14:45,090 --> 00:14:51,100
you don't have to have an addiction

335
00:14:47,710 --> 00:14:52,600
scheme you don't even have to have a

336
00:14:51,100 --> 00:14:54,820
state that says where their sound is

337
00:14:52,600 --> 00:14:57,730
unloaded or loaded you just look at

338
00:14:54,820 --> 00:14:59,470
whatever it's you 64 index is and that

339
00:14:57,730 --> 00:15:06,460
tells you whether it's loaded and that's

340
00:14:59,470 --> 00:15:10,990
it right so that feels kind of

341
00:15:06,460 --> 00:15:14,320
compelling and I don't see a lot of

342
00:15:10,990 --> 00:15:16,870
downsides to it the reason that you

343
00:15:14,320 --> 00:15:19,450
might not want to do this the only

344
00:15:16,870 --> 00:15:21,690
downside I can think of is that if you

345
00:15:19,450 --> 00:15:24,790
have a sound that's played all the time

346
00:15:21,690 --> 00:15:27,700
like let's say there's just you know the

347
00:15:24,789 --> 00:15:31,149
sound of like the hero like like hopping

348
00:15:27,700 --> 00:15:33,520
so it's gonna be played all the time so

349
00:15:31,149 --> 00:15:37,209
you kind of never really want to evict

350
00:15:33,519 --> 00:15:40,319
it it's always gonna be a sound that you

351
00:15:37,210 --> 00:15:40,320
want in there

352
00:15:44,610 --> 00:15:49,560
this scheme will cause it to fall out

353
00:15:47,458 --> 00:15:52,500
and get reloaded all the time right

354
00:15:49,559 --> 00:15:55,500
because you know if you imagine you're

355
00:15:52,500 --> 00:15:57,899
doing like abcdefgh

356
00:15:55,500 --> 00:16:00,539
I blah blah blah blah blah if on average

357
00:15:57,899 --> 00:16:04,409
let's say that the totemism oh my buffer

358
00:16:00,539 --> 00:16:06,419
rolls over every two minutes or

359
00:16:04,409 --> 00:16:08,610
something right I don't know how many

360
00:16:06,419 --> 00:16:10,769
sounds will have and how many of them

361
00:16:08,610 --> 00:16:15,060
will play so I don't know how long this

362
00:16:10,769 --> 00:16:16,950
is but let's say it's two minutes if it

363
00:16:15,059 --> 00:16:19,559
rolls over every two minutes that means

364
00:16:16,950 --> 00:16:22,140
you're gonna have to load the like glove

365
00:16:19,559 --> 00:16:25,500
swipe sounds and the footfall sounds

366
00:16:22,139 --> 00:16:26,819
every two minutes right whereas if you

367
00:16:25,500 --> 00:16:29,399
had a scheme that was more intelligent

368
00:16:26,820 --> 00:16:31,320
you wouldn't have to well I even came up

369
00:16:29,399 --> 00:16:33,360
with an answer to that and I think

370
00:16:31,320 --> 00:16:36,000
that's what this was meant to sort of

371
00:16:33,360 --> 00:16:37,919
represent but I'm not sure we actually

372
00:16:36,000 --> 00:16:39,778
want it to be the way it is but we might

373
00:16:37,919 --> 00:16:41,099
there's a reason it might have been this

374
00:16:39,778 --> 00:16:42,450
way and we'll see that when we go but

375
00:16:41,100 --> 00:16:44,670
I'll tell you what the conceptual thing

376
00:16:42,450 --> 00:16:46,769
is either way the idea was simply that

377
00:16:44,669 --> 00:16:49,409
look if you know that you have a Twitter

378
00:16:46,769 --> 00:16:52,019
v6 mag buffer let's just dedicate a

379
00:16:49,409 --> 00:16:56,699
low-rate range of the buffer let's say

380
00:16:52,019 --> 00:16:59,389
64 megabytes that comes out of this well

381
00:16:56,700 --> 00:17:02,370
would actually be that much to scale

382
00:16:59,389 --> 00:17:07,019
let's just say there's a 64 megabyte

383
00:17:02,370 --> 00:17:10,318
bottom watermark essentially and if you

384
00:17:07,019 --> 00:17:13,879
go to play a sound and that sound is in

385
00:17:10,318 --> 00:17:17,849
the gutter part so that bottom part

386
00:17:13,880 --> 00:17:22,410
instead of actually playing the sound

387
00:17:17,849 --> 00:17:25,828
you copy the sound out into the buffer

388
00:17:22,410 --> 00:17:28,199
as a new sound so you don't have to

389
00:17:25,828 --> 00:17:31,619
reload it you just do a mem copy right

390
00:17:28,199 --> 00:17:33,929
so that has the effect of anybody who

391
00:17:31,619 --> 00:17:36,989
was getting close to being evicted from

392
00:17:33,929 --> 00:17:39,960
the sound buffer but who gets used on a

393
00:17:36,990 --> 00:17:47,490
recent frame does get pulled back into

394
00:17:39,960 --> 00:17:50,789
the active set right um again I have not

395
00:17:47,490 --> 00:17:55,349
done any analysis of this idea it's

396
00:17:50,789 --> 00:17:58,319
purely just a whimsical idea and I don't

397
00:17:55,349 --> 00:18:00,629
have any arguments for or against it

398
00:17:58,319 --> 00:18:03,539
it's just something I haven't seen tried

399
00:18:00,630 --> 00:18:05,190
for sound buffers and it offers you

400
00:18:03,539 --> 00:18:08,069
something that a fixed chunk scheme

401
00:18:05,190 --> 00:18:10,830
doesn't offer you what it offers you

402
00:18:08,069 --> 00:18:14,039
that a fixed chunk scheme can't is that

403
00:18:10,829 --> 00:18:16,710
instead of using memory paging where you

404
00:18:14,039 --> 00:18:23,159
need to say look maybe this sound is

405
00:18:16,710 --> 00:18:25,740
only you know 16,000 bytes but my chunk

406
00:18:23,160 --> 00:18:28,140
size is 32 thousand bytes you have to

407
00:18:25,740 --> 00:18:31,380
figure out how to avoid that waste right

408
00:18:28,140 --> 00:18:33,150
you can pack sounds together maybe and

409
00:18:31,380 --> 00:18:36,230
then hope that they get used at the same

410
00:18:33,150 --> 00:18:39,509
time which is just kind of a crapshoot

411
00:18:36,230 --> 00:18:42,599
you can just accept the waste and and

412
00:18:39,509 --> 00:18:44,430
not use that space for storage right but

413
00:18:42,599 --> 00:18:48,569
inherently you end up in a situation

414
00:18:44,430 --> 00:18:50,100
where you're wasting space right and so

415
00:18:48,569 --> 00:18:51,569
what this does is it says it doesn't

416
00:18:50,099 --> 00:18:53,250
matter because you're always loading

417
00:18:51,569 --> 00:18:55,799
things into the linear buffer you never

418
00:18:53,250 --> 00:18:57,690
waste any space the only thing you're

419
00:18:55,799 --> 00:18:59,970
really doing is if you want to implement

420
00:18:57,690 --> 00:19:01,920
this scheme is you end up with a little

421
00:18:59,970 --> 00:19:04,170
wasted space when you double copy but

422
00:19:01,920 --> 00:19:08,070
that space is presumably quickly filled

423
00:19:04,170 --> 00:19:09,750
up by new loads right away anyway so in

424
00:19:08,069 --> 00:19:11,639
theory you're really not wasting much

425
00:19:09,750 --> 00:19:14,789
space at all and you can always set it

426
00:19:11,640 --> 00:19:17,460
to a pretty low value to sort of balance

427
00:19:14,789 --> 00:19:19,799
how much you do redundant loads versus

428
00:19:17,460 --> 00:19:21,329
how much space you waste and and

429
00:19:19,799 --> 00:19:24,029
everything else in the buffer is always

430
00:19:21,329 --> 00:19:26,099
tightly packed right so anytime you're

431
00:19:24,029 --> 00:19:28,769
gonna load even if your sound is 32

432
00:19:26,099 --> 00:19:31,379
bytes long you're only using 32 bytes to

433
00:19:28,769 --> 00:19:33,450
store it and that's totally different

434
00:19:31,380 --> 00:19:37,680
than most schemes where you have to work

435
00:19:33,450 --> 00:19:39,360
out some other thing either you know

436
00:19:37,680 --> 00:19:41,820
you're doing that memory packing

437
00:19:39,359 --> 00:19:44,250
implicitly by letting malloc pack it for

438
00:19:41,819 --> 00:19:47,789
you or you're managing yourself and you

439
00:19:44,250 --> 00:19:50,339
have to do some kind of page merging but

440
00:19:47,789 --> 00:19:52,139
this scheme gets rid of all of that so

441
00:19:50,339 --> 00:19:55,319
it's the only thing I've ever really

442
00:19:52,140 --> 00:19:59,120
thought about that allows you to do

443
00:19:55,319 --> 00:20:02,220
optimally packed memory with no work

444
00:19:59,119 --> 00:20:04,199
like there's no work right we're not

445
00:20:02,220 --> 00:20:06,360
merging sounds we're not tracking

446
00:20:04,200 --> 00:20:08,400
lifetimes we're not keeping a queue

447
00:20:06,359 --> 00:20:10,500
we're not doing a malloc

448
00:20:08,400 --> 00:20:12,028
we're not managing memory we are

449
00:20:10,500 --> 00:20:17,269
literally just record

450
00:20:12,028 --> 00:20:17,269
one 64-bit integer and that's it

451
00:20:21,888 --> 00:20:27,178
so I'm gonna try it I said I wasn't

452
00:20:25,469 --> 00:20:29,219
gonna try it I said I was gonna do a

453
00:20:27,179 --> 00:20:31,169
simple scheme but I might try it anyway

454
00:20:29,219 --> 00:20:32,999
and to be fair this should be a very

455
00:20:31,169 --> 00:20:34,288
very simple scheme it might be a little

456
00:20:32,999 --> 00:20:35,159
tricky to get working because it's

457
00:20:34,288 --> 00:20:37,019
something I've never thought about

458
00:20:35,159 --> 00:20:38,909
before and so as you never thought about

459
00:20:37,019 --> 00:20:42,749
something you aren't aware of the

460
00:20:38,909 --> 00:20:45,899
subtleties so there's that but I think

461
00:20:42,749 --> 00:20:47,368
we're just gonna say look you know we're

462
00:20:45,898 --> 00:20:52,648
just gonna do it and we're gonna see

463
00:20:47,368 --> 00:20:56,848
what happens right okay so what I'd like

464
00:20:52,648 --> 00:20:59,128
to do here is say you know in a sense

465
00:20:56,848 --> 00:21:02,668
maybe hmm

466
00:20:59,128 --> 00:21:04,648
looking at this I also do wonder this is

467
00:21:02,669 --> 00:21:07,830
another I mean I probably won't do it

468
00:21:04,648 --> 00:21:10,189
now but I think you could also get rid

469
00:21:07,829 --> 00:21:14,999
of the atomic compare exchange and

470
00:21:10,190 --> 00:21:17,729
actually just use an atomic compare

471
00:21:14,999 --> 00:21:20,129
exchange exactly directly on the 64 bit

472
00:21:17,729 --> 00:21:22,830
offset so you could probably also

473
00:21:20,128 --> 00:21:25,528
simplify the lifetime of the

474
00:21:22,829 --> 00:21:27,598
multi-thread lifetime understanding that

475
00:21:25,528 --> 00:21:30,838
we currently have I think you could

476
00:21:27,598 --> 00:21:33,569
actually do that in one fell swoop which

477
00:21:30,838 --> 00:21:37,319
might be another argument for using this

478
00:21:33,569 --> 00:21:41,579
system for sound caching it's just a

479
00:21:37,319 --> 00:21:44,819
thought but anyway so here we go here is

480
00:21:41,579 --> 00:21:47,968
our sound loading code here's what we're

481
00:21:44,819 --> 00:21:49,950
doing we're taking the same tack as we

482
00:21:47,969 --> 00:21:52,588
were doing here basically

483
00:21:49,950 --> 00:21:54,929
but the begin task with memory sort of

484
00:21:52,588 --> 00:21:58,710
side of things I don't think we actually

485
00:21:54,929 --> 00:22:01,129
need so begin task with memory is the

486
00:21:58,710 --> 00:22:04,649
thing that actually uses some allocation

487
00:22:01,128 --> 00:22:07,228
and I don't actually know that we ever

488
00:22:04,648 --> 00:22:10,168
need that to happen so if you look at

489
00:22:07,229 --> 00:22:13,109
begin task with memory that's a thing

490
00:22:10,169 --> 00:22:15,869
that where the tasks actually have some

491
00:22:13,108 --> 00:22:17,368
like a memory arena that they can

492
00:22:15,868 --> 00:22:19,228
actually use for out their own

493
00:22:17,368 --> 00:22:21,598
allocation purposes and then it gets

494
00:22:19,229 --> 00:22:24,598
cleared when the task is done I think

495
00:22:21,598 --> 00:22:25,539
and I may be wrong about this but I

496
00:22:24,598 --> 00:22:28,450
think that

497
00:22:25,539 --> 00:22:30,339
actually not necessary anymore so I

498
00:22:28,450 --> 00:22:32,890
could be wrong about that but I think we

499
00:22:30,339 --> 00:22:35,649
may be able to remove begin tasks with

500
00:22:32,890 --> 00:22:38,440
memory entirely and literally never have

501
00:22:35,650 --> 00:22:42,460
that be a thing anymore so if I go ahead

502
00:22:38,440 --> 00:22:43,808
and do begin tasks with memory here and

503
00:22:42,460 --> 00:22:46,419
that would simplify things for us as

504
00:22:43,808 --> 00:22:48,789
well which is nice so here's our begin

505
00:22:46,419 --> 00:22:51,880
task the memory call can see it here I'm

506
00:22:48,789 --> 00:22:57,519
going to take a look at it so in in load

507
00:22:51,880 --> 00:22:59,950
bitmap does it actually use the memory I

508
00:22:57,519 --> 00:23:16,418
don't actually remember so let's see

509
00:22:59,950 --> 00:23:18,069
here I don't think it does so you can

510
00:23:16,419 --> 00:23:20,470
see that just using the texture op data

511
00:23:18,069 --> 00:23:26,500
here so it doesn't need so it literally

512
00:23:20,470 --> 00:23:28,779
doesn't need that arena at all and load

513
00:23:26,500 --> 00:23:32,619
asset work is all we would need to store

514
00:23:28,779 --> 00:23:37,029
in there so it's worth noting and I

515
00:23:32,619 --> 00:23:40,589
guess I don't know exactly when we would

516
00:23:37,029 --> 00:23:43,119
want to do this but from what I can see

517
00:23:40,589 --> 00:23:47,529
I'm just gonna put it to do in there

518
00:23:43,119 --> 00:23:51,308
right and say I think we can now safely

519
00:23:47,529 --> 00:23:56,379
remove begin task with memory I don't

520
00:23:51,308 --> 00:24:00,039
think it's actually going to be

521
00:23:56,380 --> 00:24:05,040
necessary anymore since textures and

522
00:24:00,039 --> 00:24:16,899
audio both read directly into unknown

523
00:24:05,039 --> 00:24:19,149
location with no temp store now I don't

524
00:24:16,900 --> 00:24:20,740
actually know that that's true maybe

525
00:24:19,150 --> 00:24:22,929
we'll find that we actually need that so

526
00:24:20,740 --> 00:24:26,259
I'm not gonna do the work of pulling it

527
00:24:22,929 --> 00:24:28,840
out now because it's in there it works

528
00:24:26,259 --> 00:24:30,789
will work for our purpose now there's no

529
00:24:28,839 --> 00:24:33,490
sense in removing a feature we already

530
00:24:30,789 --> 00:24:35,589
have working it's not really a problem

531
00:24:33,490 --> 00:24:37,359
it's just it's some cost and complexity

532
00:24:35,589 --> 00:24:38,428
we can remove from the system later if

533
00:24:37,359 --> 00:24:40,079
we that

534
00:24:38,429 --> 00:24:41,970
find that it never does anything for us

535
00:24:40,079 --> 00:24:44,220
we might as well we'll leave it in for

536
00:24:41,970 --> 00:24:47,460
now because we don't have to remove it

537
00:24:44,220 --> 00:24:49,019
right so what we're gonna do here is say

538
00:24:47,460 --> 00:24:52,259
alright we're coming through to load

539
00:24:49,019 --> 00:24:54,298
sound we're gonna do the atomic to make

540
00:24:52,259 --> 00:24:57,599
sure that we're actually sort of working

541
00:24:54,298 --> 00:24:59,940
with it properly and we're gonna do our

542
00:24:57,599 --> 00:25:02,609
load here is us grabbing that info out

543
00:24:59,940 --> 00:25:05,778
and what you can see is when we do asset

544
00:25:02,609 --> 00:25:08,998
memory size that was our old sort of way

545
00:25:05,778 --> 00:25:10,528
of and I think that should give us an

546
00:25:08,999 --> 00:25:12,839
error now right because we removed I

547
00:25:10,528 --> 00:25:15,240
think we removed that do we not remove

548
00:25:12,839 --> 00:25:19,259
that we still have asset memory size

549
00:25:15,240 --> 00:25:23,308
does that get used this was when we were

550
00:25:19,259 --> 00:25:24,990
doing stuff before yeah you can see that

551
00:25:23,308 --> 00:25:26,730
it's really only used for this one case

552
00:25:24,990 --> 00:25:28,200
right so we don't really need an asset

553
00:25:26,730 --> 00:25:30,569
memory size anymore that was when we

554
00:25:28,200 --> 00:25:32,129
were doing arbitrarily sized memory

555
00:25:30,569 --> 00:25:33,439
management and merging things and all

556
00:25:32,128 --> 00:25:35,638
that kind of nonsense

557
00:25:33,440 --> 00:25:37,048
now we've gotten rid of all of that I

558
00:25:35,638 --> 00:25:39,479
don't really need to worry about it

559
00:25:37,048 --> 00:25:41,778
anymore so we don't really need this but

560
00:25:39,480 --> 00:25:44,538
we probably do still want some of these

561
00:25:41,778 --> 00:25:46,798
pieces of information potentially

562
00:25:44,538 --> 00:25:48,749
although now I think about it we

563
00:25:46,798 --> 00:25:51,240
probably don't really have to do any

564
00:25:48,749 --> 00:25:53,339
calculations because channels are now

565
00:25:51,240 --> 00:25:57,089
separated so we don't load multi channel

566
00:25:53,339 --> 00:26:00,689
at a time and the the size of the data

567
00:25:57,089 --> 00:26:05,278
is actually stored directly in the asset

568
00:26:00,690 --> 00:26:06,899
HHA so this is how much we would be

569
00:26:05,278 --> 00:26:10,019
loading right I can't actually remember

570
00:26:06,898 --> 00:26:12,148
the exact name of that field but inside

571
00:26:10,019 --> 00:26:13,859
every asset we now actually store its

572
00:26:12,148 --> 00:26:16,109
footprint as an explicit value which we

573
00:26:13,859 --> 00:26:17,398
always should have done I don't know why

574
00:26:16,109 --> 00:26:21,359
I didn't do that but but there it is

575
00:26:17,398 --> 00:26:24,028
right so we know exactly how big this

576
00:26:21,359 --> 00:26:27,388
chunk is and so I think this part is

577
00:26:24,028 --> 00:26:29,548
really not necessary we know how many

578
00:26:27,388 --> 00:26:32,579
samples there are because we can divide

579
00:26:29,548 --> 00:26:34,319
so we could say in here I guess I'll do

580
00:26:32,579 --> 00:26:36,418
it this way we could say the sample

581
00:26:34,319 --> 00:26:40,168
count is just gonna be whatever this

582
00:26:36,419 --> 00:26:41,669
size is divided by the size of an S 16

583
00:26:40,169 --> 00:26:46,080
because we know we only support one

584
00:26:41,669 --> 00:26:47,038
sample kind and so if I want to I can do

585
00:26:46,079 --> 00:26:50,539
that pretty easily

586
00:26:47,038 --> 00:26:53,269
right I can do this I can do this

587
00:26:50,539 --> 00:26:57,409
and now we know exactly what we're

588
00:26:53,269 --> 00:27:00,950
dealing with here right so now if I say

589
00:26:57,410 --> 00:27:02,540
all right we've got you know asset

590
00:27:00,950 --> 00:27:05,779
memory acquire all this stuff that we

591
00:27:02,539 --> 00:27:06,678
used to do none of that's necessary at

592
00:27:05,779 --> 00:27:08,899
all

593
00:27:06,679 --> 00:27:11,600
and so we're really talking now about

594
00:27:08,900 --> 00:27:13,910
the much simpler version because we've

595
00:27:11,599 --> 00:27:16,699
gotten stuff you know we've gotten out

596
00:27:13,910 --> 00:27:18,650
of the the sort of arbitrary weirdness

597
00:27:16,700 --> 00:27:21,980
there and we know that our loaded at

598
00:27:18,650 --> 00:27:24,919
sample index this is the only thing that

599
00:27:21,980 --> 00:27:26,599
we actually need to worry about is

600
00:27:24,919 --> 00:27:30,679
setting that low to that sample index

601
00:27:26,599 --> 00:27:35,359
right okay so what we're gonna do here

602
00:27:30,679 --> 00:27:36,980
is say okay we've got this sort of stuff

603
00:27:35,359 --> 00:27:38,329
we were setting up on the sound we don't

604
00:27:36,980 --> 00:27:40,298
need that anymore it's going to access

605
00:27:38,329 --> 00:27:43,460
that directly out of the asset structure

606
00:27:40,298 --> 00:27:45,259
so that stuff doesn't have to happen we

607
00:27:43,460 --> 00:27:47,779
don't need any of this nonsense where

608
00:27:45,259 --> 00:27:49,910
we're doing any kind of channel layout

609
00:27:47,779 --> 00:27:52,759
like all of that's gone now right this

610
00:27:49,910 --> 00:27:54,558
is much better and simpler so when we

611
00:27:52,759 --> 00:27:57,169
actually set this up and we say okay

612
00:27:54,558 --> 00:27:59,690
here's the task here's the asset here's

613
00:27:57,169 --> 00:28:04,880
the file handle here's the offset here's

614
00:27:59,690 --> 00:28:07,789
the size again that's this can probably

615
00:28:04,880 --> 00:28:09,919
just not do any of this

616
00:28:07,789 --> 00:28:11,210
well I guess we do need that one thing

617
00:28:09,919 --> 00:28:15,110
there well I'll just get it out of work

618
00:28:11,210 --> 00:28:16,730
size probably so I think all of that

619
00:28:15,109 --> 00:28:20,209
goes away and we're literally just

620
00:28:16,730 --> 00:28:22,339
looking at this when we go for

621
00:28:20,210 --> 00:28:25,009
destination that's the one place now

622
00:28:22,339 --> 00:28:28,459
that we actually have some work to think

623
00:28:25,009 --> 00:28:31,160
about doing right and there's there is a

624
00:28:28,460 --> 00:28:34,900
subtlety here I'm not sure it's a

625
00:28:31,160 --> 00:28:34,900
subtlety we actually have to worry about

626
00:28:44,779 --> 00:28:55,629
I think I'll talk about it after I'm

627
00:28:47,029 --> 00:28:55,629
done because it's fairly I it's it's I

628
00:28:57,220 --> 00:29:04,370
don't want to say this so there is

629
00:29:02,329 --> 00:29:06,439
something we could choose to guard

630
00:29:04,369 --> 00:29:10,250
against or we could not choose to guard

631
00:29:06,440 --> 00:29:11,808
against it and it's the kind of thing

632
00:29:10,250 --> 00:29:14,720
where the worst case scenario is you get

633
00:29:11,808 --> 00:29:16,339
some corrupted sound playback where it

634
00:29:14,720 --> 00:29:19,940
plays back one sound instead of a

635
00:29:16,339 --> 00:29:23,199
different sound um I will explain that

636
00:29:19,940 --> 00:29:25,940
later if I don't remind me in the QA I

637
00:29:23,200 --> 00:29:27,650
probably just won't guard against it it

638
00:29:25,940 --> 00:29:30,380
wouldn't cause a crash or anything with

639
00:29:27,650 --> 00:29:32,990
that which is yet another reason why

640
00:29:30,380 --> 00:29:34,370
this scheme is kind of attractive and I

641
00:29:32,990 --> 00:29:35,569
just don't think it will ever happen in

642
00:29:34,369 --> 00:29:37,308
practice because in order for it to

643
00:29:35,569 --> 00:29:40,519
happen you would have to have like a

644
00:29:37,308 --> 00:29:41,839
catastrophic OS failure which isn't

645
00:29:40,519 --> 00:29:44,150
something that's out of the question

646
00:29:41,839 --> 00:29:45,500
but I just don't think it would be worth

647
00:29:44,150 --> 00:29:47,780
the complexity the guard against it cos

648
00:29:45,500 --> 00:29:49,609
who cares I just don't think it will

649
00:29:47,779 --> 00:29:51,259
ever happen and if it does the worst

650
00:29:49,609 --> 00:29:54,288
case scenario is you play a bit of the

651
00:29:51,259 --> 00:29:57,460
wrong sound um but it's always worth

652
00:29:54,288 --> 00:30:00,950
knowing right like you know it's it's

653
00:29:57,460 --> 00:30:06,500
better to know when something could

654
00:30:00,950 --> 00:30:08,090
happen and document it you don't want to

655
00:30:06,500 --> 00:30:10,429
just say yeah that'll never happen and

656
00:30:08,089 --> 00:30:12,319
then you know move on like like think it

657
00:30:10,429 --> 00:30:14,269
through or or you know at least know

658
00:30:12,319 --> 00:30:16,609
that it's you know get it in your head

659
00:30:14,269 --> 00:30:18,379
do the thinking through know that you've

660
00:30:16,609 --> 00:30:19,759
got these cases and document them or at

661
00:30:18,380 --> 00:30:22,760
least be aware of them in your head

662
00:30:19,759 --> 00:30:24,950
don't just like not think about it right

663
00:30:22,759 --> 00:30:27,140
I mean might be the way to say it so

664
00:30:24,950 --> 00:30:29,240
anyway as you can see literally all the

665
00:30:27,140 --> 00:30:31,880
stuff we need to do our asset work is

666
00:30:29,240 --> 00:30:35,599
here except for one thing which is where

667
00:30:31,880 --> 00:30:37,700
exactly we want to put this thing and

668
00:30:35,599 --> 00:30:39,408
like I said really all you have to do

669
00:30:37,700 --> 00:30:41,298
for that is to go well we've got a

670
00:30:39,409 --> 00:30:44,059
sample buffer we know it can contain

671
00:30:41,298 --> 00:30:46,908
however many samples art here we know

672
00:30:44,058 --> 00:30:48,710
this is the base index off of it and so

673
00:30:46,909 --> 00:30:52,190
what we should be able to do now is say

674
00:30:48,710 --> 00:30:55,250
what's the actual sample index so like

675
00:30:52,190 --> 00:30:58,190
what's the sample buffer index out of

676
00:30:55,250 --> 00:30:59,898
all of these right into

677
00:30:58,190 --> 00:31:02,028
certain extent when I'm looking at this

678
00:30:59,898 --> 00:31:03,918
what I'm seeing you know this doesn't

679
00:31:02,028 --> 00:31:05,690
really make a lot of sense to me because

680
00:31:03,919 --> 00:31:11,360
what I'm seeing here is I'm like why do

681
00:31:05,690 --> 00:31:13,788
I care about samples right like this is

682
00:31:11,359 --> 00:31:15,709
just a buffer if we eventually wanted to

683
00:31:13,788 --> 00:31:17,628
load sound samples that were 24-bit or

684
00:31:15,710 --> 00:31:22,909
something it would just work so I think

685
00:31:17,628 --> 00:31:26,599
what I'd rather do is say more like that

686
00:31:22,909 --> 00:31:29,750
you know and say look we're gonna have a

687
00:31:26,599 --> 00:31:33,138
sample buffers and it's gonna have some

688
00:31:29,750 --> 00:31:37,159
amount of data in it but I don't care or

689
00:31:33,138 --> 00:31:38,869
know how much what the like type sizes

690
00:31:37,159 --> 00:31:42,080
of samples are if you wanted to load

691
00:31:38,869 --> 00:31:44,178
some some 8-bit samples or some 24-bit

692
00:31:42,079 --> 00:31:45,859
samples or some 32-bit samples in there

693
00:31:44,179 --> 00:31:48,649
and some kind of weird mod to hand made

694
00:31:45,859 --> 00:31:51,229
here oh you know this scheme just

695
00:31:48,648 --> 00:31:52,819
supports that fine so let's stop talking

696
00:31:51,230 --> 00:31:58,009
about samples when we're loading and

697
00:31:52,819 --> 00:32:04,700
let's just talk about the the the bytes

698
00:31:58,009 --> 00:32:07,370
right so then when I'd say is okay we've

699
00:32:04,700 --> 00:32:10,730
got a sample buffer base and this is I

700
00:32:07,369 --> 00:32:13,908
guess really like a position it's or or

701
00:32:10,730 --> 00:32:15,679
an offset you know it's it's I don't

702
00:32:13,909 --> 00:32:17,840
know I mean I guess index maybe is the

703
00:32:15,679 --> 00:32:19,399
best term I'm not sure but the reason

704
00:32:17,839 --> 00:32:21,319
that I'm not gonna end up shying away

705
00:32:19,398 --> 00:32:22,638
from calling it a byte is because this

706
00:32:21,319 --> 00:32:24,829
is actually just a monotonically

707
00:32:22,638 --> 00:32:27,199
increasing 64-bit value that never gets

708
00:32:24,829 --> 00:32:29,599
smaller and it doesn't index into this

709
00:32:27,200 --> 00:32:32,000
buffer you have to mod it first to do so

710
00:32:29,599 --> 00:32:36,109
and so what we want to do is take this

711
00:32:32,000 --> 00:32:38,839
sample buffer index here that's coming

712
00:32:36,109 --> 00:32:41,658
off of the assets and we want to mod it

713
00:32:38,839 --> 00:32:44,569
into our actual ring so what we're doing

714
00:32:41,659 --> 00:32:47,570
is we're saying look do a divide here

715
00:32:44,569 --> 00:32:51,259
and tell me where in the buffer I would

716
00:32:47,569 --> 00:32:55,460
be if I was to load at the current base

717
00:32:51,259 --> 00:32:59,329
index right so what I want to do there

718
00:32:55,460 --> 00:33:00,620
is I'm just saying look this this value

719
00:32:59,329 --> 00:33:03,619
goes up forever

720
00:33:00,619 --> 00:33:06,648
I want to assume that it's mapped in a

721
00:33:03,619 --> 00:33:08,808
circular fashion into this tiny buffer

722
00:33:06,648 --> 00:33:10,459
that I've got tiny being 206 and

723
00:33:08,808 --> 00:33:11,960
megabytes was actually huge but not

724
00:33:10,460 --> 00:33:15,679
compared to a 64-bit number

725
00:33:11,960 --> 00:33:17,480
right map it into this rotating buffer

726
00:33:15,679 --> 00:33:19,548
and tell me where I would be in the

727
00:33:17,480 --> 00:33:23,089
buffer for all the revolutions that I

728
00:33:19,548 --> 00:33:25,999
maybe have done right so this mod can

729
00:33:23,089 --> 00:33:30,109
really if we want to make this B unknown

730
00:33:25,999 --> 00:33:32,778
value it could just be an and right and

731
00:33:30,109 --> 00:33:35,689
so in some sense we could make this be

732
00:33:32,778 --> 00:33:37,700
something that's at a compile time but

733
00:33:35,690 --> 00:33:39,700
at the moment I'm not going to do that

734
00:33:37,700 --> 00:33:42,470
because this mod happens almost never

735
00:33:39,700 --> 00:33:45,710
and so it really isn't the kind of thing

736
00:33:42,470 --> 00:33:50,210
that we would care about in that way

737
00:33:45,710 --> 00:33:51,889
right so I think we don't have to worry

738
00:33:50,210 --> 00:33:54,679
but if we wanted to we could speed this

739
00:33:51,888 --> 00:33:56,839
up by making this be something that's

740
00:33:54,679 --> 00:33:58,580
less extensive than a mod nowadays I'll

741
00:33:56,839 --> 00:34:00,918
be honest with you don't really know how

742
00:33:58,579 --> 00:34:06,798
much that does cost kind of interested

743
00:34:00,919 --> 00:34:08,659
to know one thing that I don't know if

744
00:34:06,798 --> 00:34:14,349
we've actually ever looked at on the

745
00:34:08,659 --> 00:34:16,460
stream is Agner fogs instruction tables

746
00:34:14,349 --> 00:34:19,220
you might say let's get those on the

747
00:34:16,460 --> 00:34:23,690
desktop I use them a lot more than they

748
00:34:19,219 --> 00:34:27,199
used to and they're kind of fun so if

749
00:34:23,690 --> 00:34:29,269
you look up Agner fog it's a is

750
00:34:27,199 --> 00:34:30,739
programmer that's I know that's probably

751
00:34:29,269 --> 00:34:36,019
a name that's unfamiliar to people who

752
00:34:30,739 --> 00:34:38,000
are you know maybe used to us names or

753
00:34:36,019 --> 00:34:39,858
stuff like that right like it's it's not

754
00:34:38,000 --> 00:34:41,329
a name that you may have heard as a

755
00:34:39,858 --> 00:34:43,159
common name in use that's just a

756
00:34:41,329 --> 00:34:44,210
person's name under fog I don't know how

757
00:34:43,159 --> 00:34:48,289
you pronounce it I've never heard it

758
00:34:44,210 --> 00:34:53,389
said but he did a lot of work with you

759
00:34:48,289 --> 00:34:55,818
know basically taking X 64 and X 30 x86

760
00:34:53,389 --> 00:34:57,349
CPUs and figuring out what the actual

761
00:34:55,818 --> 00:34:58,699
timings are for like various

762
00:34:57,349 --> 00:35:00,260
instructions things like that he

763
00:34:58,699 --> 00:35:02,088
publishes a guy it's pretty good

764
00:35:00,260 --> 00:35:03,859
sometimes it's inaccurate but a lot of

765
00:35:02,088 --> 00:35:07,578
times it is accurate and it's good for

766
00:35:03,858 --> 00:35:08,900
getting a rough estimate of things so

767
00:35:07,579 --> 00:35:11,450
look up at your father's instruction

768
00:35:08,900 --> 00:35:13,338
tables if you want that I do want that

769
00:35:11,449 --> 00:35:16,179
and if we go to our desktop now we've

770
00:35:13,338 --> 00:35:18,230
got it on there I'm gonna call it Agner

771
00:35:16,179 --> 00:35:20,690
instruction tables so we know what it is

772
00:35:18,230 --> 00:35:24,469
if we load this up here what we can do

773
00:35:20,690 --> 00:35:25,460
is it's broken down by processor so if

774
00:35:24,469 --> 00:35:26,929
we go to the

775
00:35:25,460 --> 00:35:32,088
sir family that we're on here which is

776
00:35:26,929 --> 00:35:34,549
like skylake in Scylla X if you look at

777
00:35:32,088 --> 00:35:37,279
the section on skylake what you can see

778
00:35:34,550 --> 00:35:39,260
is just a giant set of tables that tells

779
00:35:37,280 --> 00:35:41,540
you all sorts of things like how many

780
00:35:39,260 --> 00:35:45,560
cycles things take four throughput and

781
00:35:41,539 --> 00:35:46,460
latency and so on right now there's a

782
00:35:45,559 --> 00:35:49,369
lot of other stuff in here that's

783
00:35:46,460 --> 00:35:51,650
actually really good to know I and for

784
00:35:49,369 --> 00:35:53,690
example this port which tells you which

785
00:35:51,650 --> 00:35:56,119
ports of the processor and instruction

786
00:35:53,690 --> 00:35:57,829
can execute on it's pretty awesome to

787
00:35:56,119 --> 00:36:01,070
even tells you if something is going to

788
00:35:57,829 --> 00:36:03,170
execute on multiple ports it tells you

789
00:36:01,070 --> 00:36:05,630
they're broken down so for example

790
00:36:03,170 --> 00:36:07,460
here's a mob instruction if this is a

791
00:36:05,630 --> 00:36:10,220
mob instruction that goes between a

792
00:36:07,460 --> 00:36:14,389
register and memory in this case right

793
00:36:10,219 --> 00:36:16,879
the r8l I believe is the low eight bits

794
00:36:14,389 --> 00:36:18,559
of a register I think is what that means

795
00:36:16,880 --> 00:36:20,930
actually I don't really know I almost

796
00:36:18,559 --> 00:36:23,599
never read the r8 side of things but

797
00:36:20,929 --> 00:36:25,190
like our 32 or 64 right 32-bit register

798
00:36:23,599 --> 00:36:28,099
64 bits of the register because you know

799
00:36:25,190 --> 00:36:29,838
how Intel registers are 64 bits for the

800
00:36:28,099 --> 00:36:34,190
for the general registers but you get

801
00:36:29,838 --> 00:36:35,779
address 32 16 or 8 right and so that's

802
00:36:34,190 --> 00:36:39,108
what that's really telling you if you

803
00:36:35,780 --> 00:36:43,820
look here you can see for like this mob

804
00:36:39,108 --> 00:36:47,210
instruction doing that 16 bit load from

805
00:36:43,820 --> 00:36:49,369
a memory location takes either port 2 or

806
00:36:47,210 --> 00:36:51,199
3 that's what that means it'll use it

807
00:36:49,369 --> 00:36:54,039
can issue on either so will take either

808
00:36:51,199 --> 00:36:57,889
port 2 or 3 which base is saying this

809
00:36:54,039 --> 00:37:01,809
execution resource right there it's like

810
00:36:57,889 --> 00:37:04,909
0 through 6 I think or 7 yes 0 through 7

811
00:37:01,809 --> 00:37:06,858
it'll take either one of those ports it

812
00:37:04,909 --> 00:37:10,460
needs and then also one of these

813
00:37:06,858 --> 00:37:13,069
arithmetic ports 0 1 5 6 those are

814
00:37:10,460 --> 00:37:15,409
reports that actually do work 2 &amp; 3 are

815
00:37:13,070 --> 00:37:19,070
ports that do look memory load well you

816
00:37:15,409 --> 00:37:20,690
can see it right here right and we can

817
00:37:19,070 --> 00:37:22,670
go into this in greater detail later I'm

818
00:37:20,690 --> 00:37:24,769
giving you the real glossary version but

819
00:37:22,670 --> 00:37:26,659
if you remember when we went over the

820
00:37:24,769 --> 00:37:28,759
basic structure of an ecstacy for a

821
00:37:26,659 --> 00:37:31,460
processor it's got like the instruction

822
00:37:28,760 --> 00:37:34,070
decoding and caching and that sort of

823
00:37:31,460 --> 00:37:36,139
stuff into micro ops then it's got ports

824
00:37:34,070 --> 00:37:38,000
that can issue micro ops and each one of

825
00:37:36,139 --> 00:37:39,139
those micro reports can do certain kinds

826
00:37:38,000 --> 00:37:41,539
of operations but not other

827
00:37:39,139 --> 00:37:43,098
so you can see here I need one of the

828
00:37:41,539 --> 00:37:44,630
load ports because it's coming from

829
00:37:43,099 --> 00:37:46,818
memory right memory memory

830
00:37:44,630 --> 00:37:49,519
I need a load port but then if I'm

831
00:37:46,818 --> 00:37:51,829
supposed to be taking part of a register

832
00:37:49,518 --> 00:37:53,629
I oftentimes also need an arithmetic

833
00:37:51,829 --> 00:37:55,369
port because it's gonna like mask it to

834
00:37:53,630 --> 00:37:58,730
zeros or something or do something else

835
00:37:55,369 --> 00:38:00,499
that requires one of these right anyway

836
00:37:58,730 --> 00:38:02,719
all of this information is great cuz it

837
00:38:00,498 --> 00:38:04,368
can give you some ballpark ideas of what

838
00:38:02,719 --> 00:38:06,618
you're actually doing and how the

839
00:38:04,369 --> 00:38:09,068
processor is gonna struggle with it like

840
00:38:06,619 --> 00:38:11,450
what ways it's going to have to operate

841
00:38:09,068 --> 00:38:12,739
in order to get the job done and that

842
00:38:11,449 --> 00:38:15,980
can help you understand the performance

843
00:38:12,739 --> 00:38:21,259
of your routines and it's really kind of

844
00:38:15,980 --> 00:38:24,440
nice anyway so what I was saying is if

845
00:38:21,259 --> 00:38:26,539
we want to look at integer mod which

846
00:38:24,440 --> 00:38:28,429
actually I have no idea I don't think

847
00:38:26,539 --> 00:38:32,119
I've ever looked that up so I actually

848
00:38:28,429 --> 00:38:36,440
don't know what the speed is of integer

849
00:38:32,119 --> 00:38:38,028
mod and I have no idea what the

850
00:38:36,440 --> 00:38:39,920
instruction is I've never written it

851
00:38:38,028 --> 00:38:43,869
myself

852
00:38:39,920 --> 00:38:43,869
let me see what it's what it's called

853
00:38:56,380 --> 00:38:59,999
do they have that in here

854
00:39:08,019 --> 00:39:11,289
in other possibilities it doesn't have

855
00:39:09,610 --> 00:39:14,680
it you have to infinite yourself we

856
00:39:11,289 --> 00:39:15,880
would divide so I'm not sure which one

857
00:39:14,679 --> 00:39:17,079
you have to do right because if you do

858
00:39:15,880 --> 00:39:19,059
an integer to divide it and subtract

859
00:39:17,079 --> 00:39:22,449
that's a mod so I don't actually know if

860
00:39:19,059 --> 00:39:24,759
it even does that natively here's what I

861
00:39:22,449 --> 00:39:25,839
will say rather than belabor this point

862
00:39:24,760 --> 00:39:30,130
because this is really not what we're

863
00:39:25,840 --> 00:39:32,980
trying to do here if you look at what

864
00:39:30,130 --> 00:39:37,869
we're actually doing you can see that

865
00:39:32,980 --> 00:39:44,740
it's like a 36 cycle operation to do a

866
00:39:37,869 --> 00:39:46,960
div 64-bit wide right and so you know

867
00:39:44,739 --> 00:39:49,149
you can see the reciprocal throughput

868
00:39:46,960 --> 00:39:51,699
and the latency here it can be quite

869
00:39:49,150 --> 00:39:53,920
high right there's a up to an 88 cycle

870
00:39:51,699 --> 00:39:56,919
delay for that this is how many micro

871
00:39:53,920 --> 00:39:59,079
ops it takes right and some of those

872
00:39:56,920 --> 00:40:00,730
micro hops it looks like could spend

873
00:39:59,079 --> 00:40:02,860
more than a cycle doing their job

874
00:40:00,730 --> 00:40:06,000
because you can go from the micro op

875
00:40:02,860 --> 00:40:09,010
number out to a much larger number right

876
00:40:06,000 --> 00:40:10,599
so I don't actually yeah I mean you look

877
00:40:09,010 --> 00:40:16,330
at how expensive divet that's pretty

878
00:40:10,599 --> 00:40:18,429
vicious right um so just looking at that

879
00:40:16,329 --> 00:40:20,349
kind of destroyed me a little bit from

880
00:40:18,429 --> 00:40:22,629
using it so I think I will go the full

881
00:40:20,349 --> 00:40:24,339
full pull and actually do like thank-you

882
00:40:22,630 --> 00:40:26,650
Agner that gave me information I wanted

883
00:40:24,340 --> 00:40:27,970
I think I will go ahead and say we're

884
00:40:26,650 --> 00:40:30,130
not going to talk about sample buffer

885
00:40:27,969 --> 00:40:33,309
size per se what we're gonna say is

886
00:40:30,130 --> 00:40:38,260
we've got a mask right so we've got a

887
00:40:33,309 --> 00:40:40,630
sample buffer mapping mask right and

888
00:40:38,260 --> 00:40:43,600
what the sample buffer mapping mask does

889
00:40:40,630 --> 00:40:46,869
is it says look let's go ahead and take

890
00:40:43,599 --> 00:40:50,079
whatever it is that we're doing here and

891
00:40:46,869 --> 00:40:52,449
we're going to mask the incoming value

892
00:40:50,079 --> 00:40:54,159
against it and we just assume that

893
00:40:52,449 --> 00:40:56,799
someone has built a mask that will turn

894
00:40:54,159 --> 00:40:59,440
this in to a 32-bit value we can that's

895
00:40:56,800 --> 00:41:02,560
inside the buffer right and what we know

896
00:40:59,440 --> 00:41:04,900
is modulus right is an arbitrary

897
00:41:02,559 --> 00:41:08,409
operation that allows us to map to any

898
00:41:04,900 --> 00:41:11,110
range but if that range was a power of

899
00:41:08,409 --> 00:41:13,539
two then and and modulus are equivalent

900
00:41:11,110 --> 00:41:15,579
right because the power of two the

901
00:41:13,539 --> 00:41:19,360
remainder will just be whatever the

902
00:41:15,579 --> 00:41:20,679
bottom bits were right so this just says

903
00:41:19,360 --> 00:41:21,849
look when you create your sample of

904
00:41:20,679 --> 00:41:23,739
oversize we don't

905
00:41:21,849 --> 00:41:26,859
what it is but it better be a power of

906
00:41:23,739 --> 00:41:31,838
two and then when we do the end this

907
00:41:26,858 --> 00:41:33,239
just works right so good bye-bye auger

908
00:41:31,838 --> 00:41:36,518
thank you very much for telling me that

909
00:41:33,239 --> 00:41:37,929
modulus just looked too expensive we

910
00:41:36,518 --> 00:41:39,518
should double-check that there isn't a

911
00:41:37,929 --> 00:41:42,909
special purpose instruction for modulus

912
00:41:39,518 --> 00:41:44,258
but if a divide takes that long I would

913
00:41:42,909 --> 00:41:46,478
expect the modules to take that long

914
00:41:44,259 --> 00:41:47,829
that's just too long for me I don't like

915
00:41:46,478 --> 00:41:50,498
sticking something in there that could

916
00:41:47,829 --> 00:41:52,599
take up to 88 cycles that's a lot of

917
00:41:50,498 --> 00:41:55,028
cycles that's almost getting up towards

918
00:41:52,599 --> 00:41:56,920
memory access penalty range it's not

919
00:41:55,028 --> 00:41:58,478
quite a couple a couple hundred cycles

920
00:41:56,920 --> 00:42:02,170
for a memory ax penalty but it's well

921
00:41:58,478 --> 00:42:07,718
over any of the L caches so well over

922
00:42:02,170 --> 00:42:09,759
the cost of an l2 or l3 I hit I believe

923
00:42:07,719 --> 00:42:12,068
although l3 I don't know what the l3

924
00:42:09,759 --> 00:42:13,778
cache penalty is these days l2 is way

925
00:42:12,068 --> 00:42:16,239
faster than that it's like you know 16

926
00:42:13,778 --> 00:42:18,099
cycles or something isn't it I don't

927
00:42:16,239 --> 00:42:23,708
remember what it is but it's it's pretty

928
00:42:18,099 --> 00:42:23,949
darn low so anyway uh yeah what's the l2

929
00:42:23,708 --> 00:42:33,548
cache

930
00:42:23,949 --> 00:42:39,548
what's the l2 cache speed do we have

931
00:42:33,548 --> 00:42:43,798
that so eleven cycles in some cases it

932
00:42:39,548 --> 00:42:43,798
says so really fast right

933
00:42:47,860 --> 00:42:57,490
I mean so if you look here right here's

934
00:42:55,539 --> 00:43:00,489
all some estimated latency Xin skylake

935
00:42:57,489 --> 00:43:02,859
for the cash so even the L if you miss

936
00:43:00,489 --> 00:43:07,409
the l2 cache and have to hit the l3

937
00:43:02,860 --> 00:43:15,309
cache it's still faster than a mod right

938
00:43:07,409 --> 00:43:18,190
um it's that right oh there it is

939
00:43:15,309 --> 00:43:19,779
I'm like it can't be 42 cycles and then

940
00:43:18,190 --> 00:43:23,530
I'm like oh yeah there's the 51

941
00:43:19,780 --> 00:43:26,320
nanoseconds like the wires are long my

942
00:43:23,530 --> 00:43:28,690
friends okay so if you look at this it's

943
00:43:26,320 --> 00:43:31,450
just I was uncomfortable with the fact

944
00:43:28,690 --> 00:43:34,119
that that mod takes as long as a memory

945
00:43:31,449 --> 00:43:38,679
miss out to anything other than main

946
00:43:34,119 --> 00:43:41,049
memory so even out to l3 cache that's

947
00:43:38,679 --> 00:43:43,210
just no good so I'm gonna do it this way

948
00:43:41,050 --> 00:43:44,380
and use an actual and there to make sure

949
00:43:43,210 --> 00:43:47,199
that we're not having to do a real

950
00:43:44,380 --> 00:43:49,329
modulus there I just that's just bad um

951
00:43:47,199 --> 00:43:51,460
so here we get our sample buffer index

952
00:43:49,329 --> 00:43:53,789
pack now we know that we're gonna load

953
00:43:51,460 --> 00:43:56,769
into the sample buffer at that location

954
00:43:53,789 --> 00:43:58,420
but what we don't know is will it fit so

955
00:43:56,769 --> 00:44:00,400
what I do need to do now is say look

956
00:43:58,420 --> 00:44:02,079
what was the data size right because

957
00:44:00,400 --> 00:44:03,550
here it is and I'm gonna go ahead and

958
00:44:02,079 --> 00:44:09,309
pull that out like I was wanting to do

959
00:44:03,550 --> 00:44:12,789
before so there's our data size and

960
00:44:09,309 --> 00:44:15,159
we'll just jump that in here and what

961
00:44:12,789 --> 00:44:19,989
I'm gonna say is if the sample buffer

962
00:44:15,159 --> 00:44:23,379
index plus the data size is greater then

963
00:44:19,989 --> 00:44:26,829
however big the buffer actually is right

964
00:44:23,380 --> 00:44:28,840
meaning we would overflow then we have

965
00:44:26,829 --> 00:44:31,750
to wrap so what we need to do then is

966
00:44:28,840 --> 00:44:34,690
say look whatever the sample buffer base

967
00:44:31,750 --> 00:44:38,980
index is needs to move up to the next

968
00:44:34,690 --> 00:44:41,429
boundary and then our offsets going to

969
00:44:38,980 --> 00:44:43,510
be zero so our sample buffer index here

970
00:44:41,429 --> 00:44:44,829
will become zero we're gonna load you

971
00:44:43,510 --> 00:44:46,930
know we've gone off the end we're gonna

972
00:44:44,829 --> 00:44:48,849
sort going to load at the bottom and our

973
00:44:46,929 --> 00:44:54,429
sample buffer base index at that point

974
00:44:48,849 --> 00:44:58,569
needs to move up to the next like where

975
00:44:54,429 --> 00:45:00,069
the next even multiple of that value

976
00:44:58,570 --> 00:45:02,690
right

977
00:45:00,070 --> 00:45:05,539
so much like here we were doing this

978
00:45:02,690 --> 00:45:09,320
handoff right what we want to do now is

979
00:45:05,539 --> 00:45:11,719
take this sample buffer base index which

980
00:45:09,320 --> 00:45:14,660
we now know is you know needs to get

981
00:45:11,719 --> 00:45:16,099
moved one up we know that our data size

982
00:45:14,659 --> 00:45:18,079
is enough to do it

983
00:45:16,099 --> 00:45:23,259
so it seems to me like it's probably

984
00:45:18,079 --> 00:45:23,259
sufficient to just say look let's take

985
00:45:23,320 --> 00:45:29,539
whatever the sample buffer base index is

986
00:45:26,510 --> 00:45:32,120
let's upload you know pretend we loaded

987
00:45:29,539 --> 00:45:33,619
this at validation which we know pushes

988
00:45:32,119 --> 00:45:38,359
over the boundary because we just check

989
00:45:33,619 --> 00:45:43,400
and then let's and off that part that we

990
00:45:38,360 --> 00:45:45,140
had before so this mask let's say and it

991
00:45:43,400 --> 00:45:48,400
off just like we were doing before but

992
00:45:45,139 --> 00:45:54,500
it just happened why did that not copy

993
00:45:48,400 --> 00:45:56,630
copy there we go I know what was going

994
00:45:54,500 --> 00:45:59,210
on there something we weird

995
00:45:56,630 --> 00:46:04,400
but so let's go ahead and take what we

996
00:45:59,210 --> 00:46:06,619
now have and off that bottom part by

997
00:46:04,400 --> 00:46:09,440
saying whatever the mask was normally

998
00:46:06,619 --> 00:46:12,289
this ends off the top so if we not this

999
00:46:09,440 --> 00:46:14,659
right if we take the inverse that should

1000
00:46:12,289 --> 00:46:17,420
end off the bottom which is what we want

1001
00:46:14,659 --> 00:46:19,969
to do to get rid of any fractional

1002
00:46:17,420 --> 00:46:23,809
offset so this just basically re-centers

1003
00:46:19,969 --> 00:46:26,719
us to the bottom of the buffer right um

1004
00:46:23,809 --> 00:46:29,809
so that should completely solve our

1005
00:46:26,719 --> 00:46:31,939
problem I think meaning now we just

1006
00:46:29,809 --> 00:46:33,679
loaded the thing in we've done the

1007
00:46:31,940 --> 00:46:35,750
sample buffer science check we've

1008
00:46:33,679 --> 00:46:37,849
figured out we're going to load it and

1009
00:46:35,750 --> 00:46:40,900
now creating our destination is trivial

1010
00:46:37,849 --> 00:46:45,909
it's just whatever the sample buffer is

1011
00:46:40,900 --> 00:46:45,910
in that sort of sample buffer size there

1012
00:46:47,409 --> 00:46:52,569
whatever the sample buffer actually is

1013
00:46:49,579 --> 00:46:54,980
we're just going to take whatever the

1014
00:46:52,570 --> 00:46:56,630
the sample buffer index that we computed

1015
00:46:54,980 --> 00:47:01,579
we're just going to offset by that much

1016
00:46:56,630 --> 00:47:05,240
right now once we've done that which

1017
00:47:01,579 --> 00:47:08,630
we've saved here this also now needs to

1018
00:47:05,239 --> 00:47:12,949
go up by the actual data size so in

1019
00:47:08,630 --> 00:47:13,700
addition to doing this AB there which we

1020
00:47:12,949 --> 00:47:17,659
know

1021
00:47:13,699 --> 00:47:20,298
centers us we also have to load as much

1022
00:47:17,659 --> 00:47:22,789
as we were going to load right but we

1023
00:47:20,298 --> 00:47:24,980
need to do that in either case so the

1024
00:47:22,789 --> 00:47:26,509
base index after we compute which one

1025
00:47:24,980 --> 00:47:29,240
we're going to use we have to add

1026
00:47:26,510 --> 00:47:31,220
however much of our data we actually

1027
00:47:29,239 --> 00:47:35,328
loaded we have to add that much in so we

1028
00:47:31,219 --> 00:47:39,379
don't use that part anymore right so I

1029
00:47:35,329 --> 00:47:42,769
think that gives us our entire load that

1030
00:47:39,380 --> 00:47:46,298
loads our sounds now this has to be

1031
00:47:42,769 --> 00:47:46,298
simple science there we go

1032
00:47:47,420 --> 00:47:52,220
and the finalized operation I think we

1033
00:47:50,420 --> 00:47:53,960
may have gotten rid of is that true

1034
00:47:52,219 --> 00:47:59,919
because nobody actually needs

1035
00:47:53,960 --> 00:47:59,920
finalization anymore so that's just gone

1036
00:48:00,039 --> 00:48:07,099
yeah so what you can see here again

1037
00:48:04,670 --> 00:48:09,048
unless I'm missing something this is why

1038
00:48:07,099 --> 00:48:12,680
I say this scheme was interesting it's

1039
00:48:09,048 --> 00:48:17,420
so simple this is the entirety of the

1040
00:48:12,679 --> 00:48:19,969
code necessary to do your LRU you're you

1041
00:48:17,420 --> 00:48:21,858
you know variable size loading you're

1042
00:48:19,969 --> 00:48:23,058
screaming you're everything that's it

1043
00:48:21,858 --> 00:48:26,210
that was it

1044
00:48:23,059 --> 00:48:29,059
right um and the only thing we need to

1045
00:48:26,210 --> 00:48:33,289
do now to add like sort of an at least

1046
00:48:29,059 --> 00:48:37,640
recently used modifier to it is just add

1047
00:48:33,289 --> 00:48:39,980
one mem copy when we actually go to load

1048
00:48:37,639 --> 00:48:41,449
a sound like to play a sound if we so

1049
00:48:39,980 --> 00:48:43,548
desire and we don't even have to do that

1050
00:48:41,449 --> 00:48:48,429
but I think I would like to to minimize

1051
00:48:43,548 --> 00:48:51,170
the chances that we hit a sound that we

1052
00:48:48,429 --> 00:48:52,699
already have loaded and that fell out

1053
00:48:51,170 --> 00:48:55,519
because we just weren't tracking the

1054
00:48:52,699 --> 00:48:58,639
fact that we're playing in a lot so what

1055
00:48:55,519 --> 00:49:00,829
I want to do here is say look really all

1056
00:48:58,639 --> 00:49:04,670
this thing needed after all of this

1057
00:49:00,829 --> 00:49:08,809
nonsense all it really needs right is

1058
00:49:04,670 --> 00:49:11,180
this value so what I'd rather do here is

1059
00:49:08,809 --> 00:49:15,769
have an actual thing that's like hey

1060
00:49:11,179 --> 00:49:24,159
yeah maybe there's a void star that's

1061
00:49:15,769 --> 00:49:24,159
like allocate or reserve sound memory

1062
00:49:25,130 --> 00:49:37,220
and what I'd like to do is say I just

1063
00:49:27,980 --> 00:49:37,219
passed that a size and it will do this

1064
00:49:38,329 --> 00:49:45,949
so it basically says you know all of

1065
00:49:43,858 --> 00:49:49,799
that is something we can call as

1066
00:49:45,949 --> 00:49:53,649
necessary we just call a reserved sound

1067
00:49:49,800 --> 00:49:56,729
memory and we pass the data size here

1068
00:49:53,650 --> 00:49:56,729
[Music]

1069
00:49:58,940 --> 00:50:05,220
like so and that way that's something we

1070
00:50:02,760 --> 00:50:06,720
can do in the other team in the playback

1071
00:50:05,219 --> 00:50:08,759
routine as well so we never have to

1072
00:50:06,719 --> 00:50:10,379
rewrite that

1073
00:50:08,760 --> 00:50:12,000
which again gets us to the point where

1074
00:50:10,380 --> 00:50:13,230
I'm like saying that's the entirety the

1075
00:50:12,000 --> 00:50:16,019
code you have to write which is kind of

1076
00:50:13,230 --> 00:50:17,579
cool so this reserved sound memory

1077
00:50:16,019 --> 00:50:20,909
basically says look take the assets take

1078
00:50:17,579 --> 00:50:23,190
the data size get this stuff aligned

1079
00:50:20,909 --> 00:50:24,779
properly do all that and if there's bugs

1080
00:50:23,190 --> 00:50:28,260
in here this is good because it means we

1081
00:50:24,780 --> 00:50:30,590
left that debug them wants right um so

1082
00:50:28,260 --> 00:50:34,560
let's load this out just for clarity

1083
00:50:30,590 --> 00:50:37,108
there's that mask oops didn't mean

1084
00:50:34,559 --> 00:50:38,969
expand the console there um so this just

1085
00:50:37,108 --> 00:50:41,730
becomes an and with the mask

1086
00:50:38,969 --> 00:50:43,769
this becomes an end with not the mask

1087
00:50:41,730 --> 00:50:48,510
just makes this a little easier to read

1088
00:50:43,769 --> 00:50:54,480
right and I think that's all we really

1089
00:50:48,510 --> 00:50:56,430
need to do that all seems good so now to

1090
00:50:54,480 --> 00:50:58,230
produce the actual result we want we

1091
00:50:56,429 --> 00:51:02,899
have a void star result we're gonna take

1092
00:50:58,230 --> 00:51:02,900
the assets sample Boop's sample buffer

1093
00:51:02,960 --> 00:51:06,630
just called sample buffer right and then

1094
00:51:05,159 --> 00:51:09,440
we're going to add that sample buffer

1095
00:51:06,630 --> 00:51:09,440
index to it

1096
00:51:13,268 --> 00:51:16,909
having a lot of problems to type in

1097
00:51:15,108 --> 00:51:21,009
today and a good typing day for some

1098
00:51:16,909 --> 00:51:26,598
reason maybe the keyboard is off-center

1099
00:51:21,009 --> 00:51:30,259
um that should be able to take care of

1100
00:51:26,599 --> 00:51:33,469
both our load sound call and when we do

1101
00:51:30,259 --> 00:51:37,159
playback it should also work so I think

1102
00:51:33,469 --> 00:51:40,099
we're good to go and I just want to take

1103
00:51:37,159 --> 00:51:42,788
a look at where sound playback is

1104
00:51:40,099 --> 00:51:42,789
happening here

1105
00:51:47,619 --> 00:51:55,338
so this get sound samples that's really

1106
00:51:53,028 --> 00:51:58,518
what we would need to do the playback

1107
00:51:55,338 --> 00:52:00,528
here and so this is the place where we

1108
00:51:58,518 --> 00:52:04,848
would do any of that that sort of

1109
00:52:00,528 --> 00:52:07,219
adjustment work right so I think all I

1110
00:52:04,849 --> 00:52:10,939
need to do to make this thing complete

1111
00:52:07,219 --> 00:52:13,548
is just say well you know if this sound

1112
00:52:10,938 --> 00:52:17,558
is loaded and so you know we do the get

1113
00:52:13,548 --> 00:52:20,298
bitmap info I'm sorry get bitmap here

1114
00:52:17,559 --> 00:52:22,969
what we need to do is look and see

1115
00:52:20,298 --> 00:52:25,929
whether or not the actual sound is valid

1116
00:52:22,969 --> 00:52:28,309
so if in here we do get sound samples

1117
00:52:25,929 --> 00:52:34,338
what we would need to do is is actually

1118
00:52:28,309 --> 00:52:38,390
ask by the way is this where do we where

1119
00:52:34,338 --> 00:52:42,880
do we ask to load it so I guess it's in

1120
00:52:38,389 --> 00:52:42,879
load sound that that happens

1121
00:52:45,650 --> 00:52:53,700
here's load sound which is the thing we

1122
00:52:49,409 --> 00:52:55,108
just did so I guess that's all fine so I

1123
00:52:53,699 --> 00:52:57,629
guess the sound loader will just do it

1124
00:52:55,108 --> 00:52:59,369
seems fine so all we really need to do

1125
00:52:57,630 --> 00:53:03,930
here is is we need to say look we need

1126
00:52:59,369 --> 00:53:06,088
to get that that asset right so this

1127
00:53:03,929 --> 00:53:09,480
this asset that we've you know sort of

1128
00:53:06,088 --> 00:53:11,880
looked up here we need to look at what

1129
00:53:09,480 --> 00:53:15,480
it's loaded sounded Nexus so we need to

1130
00:53:11,880 --> 00:53:17,309
say that that value that we should have

1131
00:53:15,480 --> 00:53:24,838
set oh you know what we're not actually

1132
00:53:17,309 --> 00:53:27,680
setting it though either are we so I

1133
00:53:24,838 --> 00:53:31,078
guess this is a little bit off because

1134
00:53:27,679 --> 00:53:33,960
we actually need two values when we do

1135
00:53:31,079 --> 00:53:38,599
reserve sound memory we actually need

1136
00:53:33,960 --> 00:53:41,608
two we actually need to set on the sound

1137
00:53:38,599 --> 00:53:44,309
where it went and we don't have that

1138
00:53:41,608 --> 00:53:48,179
right now and we do have the asset here

1139
00:53:44,309 --> 00:53:50,759
so we can set it here right so what we

1140
00:53:48,179 --> 00:53:52,048
would want to do there is we want to

1141
00:53:50,759 --> 00:53:55,048
look to see whether this thing is loaded

1142
00:53:52,048 --> 00:54:01,259
and so I think what we want to do is say

1143
00:53:55,048 --> 00:54:06,179
look if you know this asset if it's

1144
00:54:01,259 --> 00:54:07,469
state is asset state loaded then we'll

1145
00:54:06,179 --> 00:54:07,798
give it back to you but otherwise we

1146
00:54:07,469 --> 00:54:09,538
won't

1147
00:54:07,798 --> 00:54:11,670
now we don't technically have to do that

1148
00:54:09,539 --> 00:54:14,099
but the reason that I'd like to make

1149
00:54:11,670 --> 00:54:15,269
sure that we do is because we want to

1150
00:54:14,099 --> 00:54:16,710
make sure that you don't try to play a

1151
00:54:15,268 --> 00:54:18,868
sound back that hasn't actually been

1152
00:54:16,710 --> 00:54:21,389
loaded yet if you want to play a sound

1153
00:54:18,869 --> 00:54:24,150
back that has been unloaded that will

1154
00:54:21,389 --> 00:54:26,338
actually get caught by the next check so

1155
00:54:24,150 --> 00:54:28,829
that part we don't really have to worry

1156
00:54:26,338 --> 00:54:30,929
about but the other thing where we

1157
00:54:28,829 --> 00:54:33,028
haven't finished the load yet we do need

1158
00:54:30,929 --> 00:54:36,179
to check for so this wants to look and

1159
00:54:33,028 --> 00:54:40,500
see hey make sure that someone set this

1160
00:54:36,179 --> 00:54:42,808
to loaded at some point right so then

1161
00:54:40,500 --> 00:54:50,489
what we're gonna do is say okay if the

1162
00:54:42,809 --> 00:54:54,089
asset there's the sound if the assets

1163
00:54:50,489 --> 00:54:57,778
loaded at sample index is greater or

1164
00:54:54,088 --> 00:54:58,619
equal to the assets basically high-water

1165
00:54:57,778 --> 00:55:01,018
mark

1166
00:54:58,619 --> 00:55:02,608
so in other words if we have reasonably

1167
00:55:01,018 --> 00:55:08,939
that this thing could actually be run

1168
00:55:02,608 --> 00:55:12,179
right and that is right here right so if

1169
00:55:08,940 --> 00:55:16,798
this thing is above where we said the

1170
00:55:12,179 --> 00:55:19,048
the base was going to be that's the

1171
00:55:16,798 --> 00:55:22,588
loading point though so we actually need

1172
00:55:19,048 --> 00:55:33,239
to be back by that much so we actually

1173
00:55:22,588 --> 00:55:37,739
need so that's really a bad name that's

1174
00:55:33,239 --> 00:55:44,899
actually a sound buffer top we should

1175
00:55:37,739 --> 00:55:44,899
really call this sound buffer and index

1176
00:55:46,548 --> 00:55:55,139
gin i'm santi i feel like it should

1177
00:55:53,429 --> 00:55:57,419
actually be bad so what you're actually

1178
00:55:55,139 --> 00:55:59,909
doing is saying look the base index is

1179
00:55:57,420 --> 00:56:04,079
whatever the top of this buffer is minus

1180
00:55:59,909 --> 00:56:06,690
the size right does that make sense so

1181
00:56:04,079 --> 00:56:10,259
we kind of know that there are two sound

1182
00:56:06,690 --> 00:56:11,940
ranges if you will and in fact we could

1183
00:56:10,259 --> 00:56:18,119
system it we could make those systemic

1184
00:56:11,940 --> 00:56:22,619
we could say struct sound buffer or like

1185
00:56:18,119 --> 00:56:24,630
asset sound buffer ranges or something

1186
00:56:22,619 --> 00:56:27,838
like this right and what we could do

1187
00:56:24,630 --> 00:56:32,759
there is say look give us back the sound

1188
00:56:27,838 --> 00:56:37,440
buffer base index and give us back the

1189
00:56:32,759 --> 00:56:43,588
sound buffer I don't want to call this

1190
00:56:37,440 --> 00:56:45,179
but like LRU index so like that thing

1191
00:56:43,588 --> 00:56:47,278
where I saying I want like a region

1192
00:56:45,179 --> 00:56:50,038
where we'll maybe consider a copy out if

1193
00:56:47,278 --> 00:56:52,230
you fall inside it give me back that one

1194
00:56:50,039 --> 00:56:56,609
too so here I would do something like

1195
00:56:52,230 --> 00:56:59,309
ranges equals get sound buffer ranges

1196
00:56:56,608 --> 00:57:01,230
and pass the assets I'm gonna assume

1197
00:56:59,309 --> 00:57:04,109
that we'll compute this for me I will

1198
00:57:01,230 --> 00:57:06,480
then say look if the asset is in range

1199
00:57:04,108 --> 00:57:09,989
that's great

1200
00:57:06,480 --> 00:57:14,260
so let's say

1201
00:57:09,989 --> 00:57:16,629
ranges da Gama for base index if it's

1202
00:57:14,260 --> 00:57:19,030
above the base we know it's loaded and

1203
00:57:16,630 --> 00:57:21,880
we can play it that's great

1204
00:57:19,030 --> 00:57:23,230
but we probably and and I guess we don't

1205
00:57:21,880 --> 00:57:28,750
really need a nails case here what we

1206
00:57:23,230 --> 00:57:31,329
really need is another case here um this

1207
00:57:28,750 --> 00:57:34,360
result will default to zero so if we we

1208
00:57:31,329 --> 00:57:38,650
don't need a catch-all for that so first

1209
00:57:34,360 --> 00:57:41,349
we want to actually check whether or not

1210
00:57:38,650 --> 00:57:45,059
it's above the LRU if it's above the LRU

1211
00:57:41,349 --> 00:57:48,099
we're just done so we could just say aye

1212
00:57:45,059 --> 00:57:54,789
wherever the sound is that's what we

1213
00:57:48,099 --> 00:57:57,880
would load right so here is just a I

1214
00:57:54,789 --> 00:58:17,259
guess I might do get sound buffer

1215
00:57:57,880 --> 00:58:19,710
pointer maybe and I just say great let's

1216
00:58:17,260 --> 00:58:21,880
load that in and I'm gonna pull this out

1217
00:58:19,710 --> 00:58:24,599
into a temporary so enough to keep

1218
00:58:21,880 --> 00:58:29,920
typing asset arrow so it's clearer there

1219
00:58:24,599 --> 00:58:32,769
right so great give that to me

1220
00:58:29,920 --> 00:58:35,349
if on the other hand we're in the low

1221
00:58:32,769 --> 00:58:38,710
region so this case would be we're not

1222
00:58:35,349 --> 00:58:40,809
above the LRU watermark so we actually

1223
00:58:38,710 --> 00:58:44,650
want to do a copy here's where you would

1224
00:58:40,809 --> 00:58:49,480
do that copy so we would call reserve in

1225
00:58:44,650 --> 00:58:50,130
this case and that reserve is up here

1226
00:58:49,480 --> 00:58:52,960
somewhere

1227
00:58:50,130 --> 00:58:59,230
reserve sound memory right I'm gonna add

1228
00:58:52,960 --> 00:59:01,860
this one in there too so this gets sound

1229
00:58:59,230 --> 00:59:01,860
buffer ranges

1230
00:59:06,690 --> 00:59:13,179
so that'll just be assets and buffer

1231
00:59:09,610 --> 00:59:23,140
ranges results and this will return

1232
00:59:13,179 --> 00:59:24,279
these two values by computing them so we

1233
00:59:23,139 --> 00:59:25,569
will need to do that a second that's

1234
00:59:24,280 --> 00:59:27,700
really easy routine the right so that

1235
00:59:25,570 --> 00:59:30,039
should be no no biggie and then we also

1236
00:59:27,699 --> 00:59:39,939
kind of want the get sound buffer memory

1237
00:59:30,039 --> 00:59:55,360
call so this is a white star and that

1238
00:59:39,940 --> 00:59:58,539
takes you 64 there we go so that all

1239
00:59:55,360 --> 01:00:00,460
seems pretty good I'm happy with all

1240
00:59:58,539 --> 01:00:02,440
that so then what I'm gonna do here is

1241
01:00:00,460 --> 01:00:04,900
say all right we'll implement these two

1242
01:00:02,440 --> 01:00:06,519
routines in a second and then what we

1243
01:00:04,900 --> 01:00:09,940
need to do is say in the case where we

1244
01:00:06,519 --> 01:00:12,460
want to do our LRU scheme what we're

1245
01:00:09,940 --> 01:00:16,030
gonna have to do is do a reserved where

1246
01:00:12,460 --> 01:00:19,420
we actually you know get more space for

1247
01:00:16,030 --> 01:00:21,790
this and then we're going to actually

1248
01:00:19,420 --> 01:00:23,980
move it from one place to another right

1249
01:00:21,789 --> 01:00:26,019
so what we need to do is figure out how

1250
01:00:23,980 --> 01:00:28,090
big the sound is again that's really

1251
01:00:26,019 --> 01:00:32,289
know no biggie because it says exactly

1252
01:00:28,090 --> 01:00:34,780
what it is in the size field so there's

1253
01:00:32,289 --> 01:00:38,949
our size and then we're just gonna use

1254
01:00:34,780 --> 01:00:41,650
that as the copy so here we have our you

1255
01:00:38,949 --> 01:00:43,689
know our desk pointer basically and our

1256
01:00:41,650 --> 01:00:46,200
source pointer is always going to be

1257
01:00:43,690 --> 01:00:48,730
this get sound buffer memory call

1258
01:00:46,199 --> 01:00:51,129
because that's where the sound was

1259
01:00:48,730 --> 01:00:52,960
regardless so you know we're gonna get

1260
01:00:51,130 --> 01:00:58,180
where it was we're gonna get where it

1261
01:00:52,960 --> 01:01:01,539
should be now and we're just gonna move

1262
01:00:58,179 --> 01:01:08,669
it right we're just gonna move it up now

1263
01:01:01,539 --> 01:01:08,670
we have an issue that's kind of

1264
01:01:11,070 --> 01:01:16,900
tricky yes so I think this can never

1265
01:01:14,590 --> 01:01:18,460
happen so it's okay I was gonna say if

1266
01:01:16,900 --> 01:01:20,050
we ever ended up with these regions

1267
01:01:18,460 --> 01:01:22,539
overlapping but they can't as long as

1268
01:01:20,050 --> 01:01:25,930
the size of the maximum sound chunk is

1269
01:01:22,539 --> 01:01:27,759
never bigger than half the buffer you

1270
01:01:25,929 --> 01:01:31,809
can never have this happen so it doesn't

1271
01:01:27,760 --> 01:01:33,460
matter so this is not relevant so I'm

1272
01:01:31,809 --> 01:01:36,730
pretty sure this will always work you

1273
01:01:33,460 --> 01:01:40,210
can just say look copy the memory from

1274
01:01:36,730 --> 01:01:44,829
the place that's going out of scope into

1275
01:01:40,210 --> 01:01:48,579
a place that would now be in scope most

1276
01:01:44,829 --> 01:01:52,779
recently and call it a day wait is that

1277
01:01:48,579 --> 01:01:58,269
true I'm just thinking this has to be

1278
01:01:52,780 --> 01:01:59,220
aware of overlap let's draw the case out

1279
01:01:58,269 --> 01:02:08,170
shall we

1280
01:01:59,219 --> 01:02:10,799
because I'm just not sure okay so here's

1281
01:02:08,170 --> 01:02:13,930
what I'm talking about

1282
01:02:10,800 --> 01:02:17,130
effectively what I'm saying is we have

1283
01:02:13,929 --> 01:02:20,529
some part and it could be anywhere right

1284
01:02:17,130 --> 01:02:24,820
but we've got some kind of a pointer

1285
01:02:20,530 --> 01:02:26,440
right which is this is the top and then

1286
01:02:24,820 --> 01:02:30,789
this is inside the circular buffer and

1287
01:02:26,440 --> 01:02:33,970
the sound is like here so here's sound a

1288
01:02:30,789 --> 01:02:38,920
right and what we're basically saying is

1289
01:02:33,969 --> 01:02:41,919
that this region is the lru region which

1290
01:02:38,920 --> 01:02:43,720
means in this region if we have a sound

1291
01:02:41,920 --> 01:02:45,369
that plays while it's here we want to

1292
01:02:43,719 --> 01:02:49,118
move it out because it's going to be

1293
01:02:45,369 --> 01:02:50,470
evicted soon and we don't want sounds

1294
01:02:49,119 --> 01:02:51,849
that are getting played frequently to

1295
01:02:50,469 --> 01:02:55,868
ever be in here because gonna get

1296
01:02:51,849 --> 01:02:58,690
evicted so what I'm saying is that well

1297
01:02:55,869 --> 01:03:01,660
in this case and I think I'm right in

1298
01:02:58,690 --> 01:03:03,909
this case these regions will overlap so

1299
01:03:01,659 --> 01:03:06,389
the new location for a which will then

1300
01:03:03,909 --> 01:03:11,769
move top above it so it'll be right here

1301
01:03:06,389 --> 01:03:14,920
the new location for a will be compacted

1302
01:03:11,769 --> 01:03:18,219
down and part of it will overlap since

1303
01:03:14,920 --> 01:03:21,460
copy proceeds from the low bytes on I

1304
01:03:18,219 --> 01:03:22,989
think we have no issue it's never gonna

1305
01:03:21,460 --> 01:03:25,199
look the other way

1306
01:03:22,989 --> 01:03:28,569
meaning we're never always I think

1307
01:03:25,199 --> 01:03:30,939
copying it either to disparate regions

1308
01:03:28,570 --> 01:03:33,280
that don't overlap or in regions that

1309
01:03:30,940 --> 01:03:34,690
only overlap the end of the destination

1310
01:03:33,280 --> 01:03:37,599
with the beginning of the source and

1311
01:03:34,690 --> 01:03:40,510
that should be fine famous last words

1312
01:03:37,599 --> 01:03:42,550
but I think the simple thing just works

1313
01:03:40,510 --> 01:03:43,990
let's hope so because my claim that this

1314
01:03:42,550 --> 01:03:46,119
is a simple algorithm starts to fall

1315
01:03:43,989 --> 01:03:49,899
apart if all of a sudden you don't have

1316
01:03:46,119 --> 01:03:51,640
the simple thing work but it well um so

1317
01:03:49,900 --> 01:03:53,320
I think this is all we need and now we

1318
01:03:51,639 --> 01:03:55,719
just need to implement these we do have

1319
01:03:53,320 --> 01:03:57,460
one thing we wanted to do here in order

1320
01:03:55,719 --> 01:03:59,259
to track that loaded at sample index

1321
01:03:57,460 --> 01:04:00,369
that loading that same place really

1322
01:03:59,260 --> 01:04:02,080
shouldn't be called that anymore right

1323
01:04:00,369 --> 01:04:05,320
there should be just be called load at

1324
01:04:02,079 --> 01:04:08,319
buffer in our loaded sound buffer index

1325
01:04:05,320 --> 01:04:12,400
right it is not a sample it is not a

1326
01:04:08,320 --> 01:04:13,838
sample we are just using byte offsets

1327
01:04:12,400 --> 01:04:15,480
there so it's just an index into the

1328
01:04:13,838 --> 01:04:18,519
buffer it has nothing to do with samples

1329
01:04:15,480 --> 01:04:23,519
so what I'm doing here is saying this is

1330
01:04:18,519 --> 01:04:27,909
gonna be a asset or a sound buffer

1331
01:04:23,519 --> 01:04:30,429
memory that you get back we're gonna

1332
01:04:27,909 --> 01:04:32,920
have the pointer to the memory and we're

1333
01:04:30,429 --> 01:04:36,608
going to have the sample or sorry the

1334
01:04:32,920 --> 01:04:39,220
buffer index to the memory come back and

1335
01:04:36,608 --> 01:04:42,179
again this is just because when we do

1336
01:04:39,219 --> 01:04:44,829
this in the sound buffer memory case

1337
01:04:42,179 --> 01:04:47,919
when we call gets an buffer memory or

1338
01:04:44,829 --> 01:04:50,079
reserve sound buffer memory what we want

1339
01:04:47,920 --> 01:04:54,460
to be able to do there is actually

1340
01:04:50,079 --> 01:04:58,980
reserve is actually return a more

1341
01:04:54,460 --> 01:05:03,099
complex piece of data so in both cases

1342
01:04:58,980 --> 01:05:06,820
when we call this we need this result to

1343
01:05:03,099 --> 01:05:09,580
give us back two things first of all the

1344
01:05:06,820 --> 01:05:10,269
pointer which we know we can get at all

1345
01:05:09,579 --> 01:05:15,969
times

1346
01:05:10,269 --> 01:05:17,800
this way right but in addition we need

1347
01:05:15,969 --> 01:05:19,959
whatever the index was that we were

1348
01:05:17,800 --> 01:05:22,450
going to feed into the buffer right and

1349
01:05:19,960 --> 01:05:25,300
we are not actually getting that yet so

1350
01:05:22,449 --> 01:05:29,949
what we need to do here is save before

1351
01:05:25,300 --> 01:05:34,450
we advance right we need to save what

1352
01:05:29,949 --> 01:05:43,009
that index would have been so

1353
01:05:34,449 --> 01:05:44,750
this value before incrementing right so

1354
01:05:43,010 --> 01:05:48,320
here we snap both of those things so

1355
01:05:44,750 --> 01:05:52,039
this is where the sound was right and

1356
01:05:48,320 --> 01:05:53,680
that's something we wanted and then we

1357
01:05:52,039 --> 01:05:57,050
also the pointer now if we want to be

1358
01:05:53,679 --> 01:06:00,230
Squinkie about it we could always get it

1359
01:05:57,050 --> 01:06:01,430
from get sound buffer memory um instead

1360
01:06:00,230 --> 01:06:04,670
what I'm gonna do is actually probably

1361
01:06:01,429 --> 01:06:06,049
just a cert that fact so because we

1362
01:06:04,670 --> 01:06:11,030
already know it I'm just gonna assert

1363
01:06:06,050 --> 01:06:13,849
that result pointer equals the get sound

1364
01:06:11,030 --> 01:06:15,260
buffer memory of the buffer index so I'm

1365
01:06:13,849 --> 01:06:20,210
just gonna assert the thing never

1366
01:06:15,260 --> 01:06:23,869
diverged and call it a day in this

1367
01:06:20,210 --> 01:06:28,460
routine we have the same thing so we've

1368
01:06:23,869 --> 01:06:30,710
got loaded app we've got assets sample

1369
01:06:28,460 --> 01:06:32,929
buffer and what we just want to do here

1370
01:06:30,710 --> 01:06:35,630
is take whatever the base is in the

1371
01:06:32,929 --> 01:06:39,440
sample buffer and we just want to load

1372
01:06:35,630 --> 01:06:43,930
in the version of this that's got modded

1373
01:06:39,440 --> 01:06:47,000
to the mask right so basically you know

1374
01:06:43,929 --> 01:06:51,139
chop off that top part put it to where

1375
01:06:47,000 --> 01:06:52,940
it should be and off we go right what

1376
01:06:51,139 --> 01:06:55,670
I'd also like to do here is maybe do an

1377
01:06:52,940 --> 01:06:58,608
assertion so when we get back

1378
01:06:55,670 --> 01:07:00,889
whatever this pointer is that we've

1379
01:06:58,608 --> 01:07:02,750
we've sort of received here what we

1380
01:07:00,889 --> 01:07:05,598
probably also want to do is assert that

1381
01:07:02,750 --> 01:07:07,190
the sound actually would fit in there so

1382
01:07:05,599 --> 01:07:12,440
one thing we could do here is say also

1383
01:07:07,190 --> 01:07:21,039
research assert that if we were to cast

1384
01:07:12,440 --> 01:07:24,170
this to a you ate that result pointer -

1385
01:07:21,039 --> 01:07:27,679
so that so that result pointer plus the

1386
01:07:24,170 --> 01:07:30,139
data science right is not going to be

1387
01:07:27,679 --> 01:07:32,569
over the total size of the buffer so

1388
01:07:30,139 --> 01:07:38,389
this sample buffer size plus the sample

1389
01:07:32,570 --> 01:07:44,278
buffer right so this must be less than

1390
01:07:38,389 --> 01:07:46,808
or equal to this

1391
01:07:44,278 --> 01:07:48,699
and that's just a double-check our

1392
01:07:46,809 --> 01:07:51,039
arithmetic like we want to make sure

1393
01:07:48,699 --> 01:07:52,778
that the thing we return it never

1394
01:07:51,039 --> 01:07:55,000
returns a pointer that couldn't actually

1395
01:07:52,778 --> 01:07:57,548
fit the size that you asked for because

1396
01:07:55,000 --> 01:07:59,500
you know based on the way we allocate

1397
01:07:57,548 --> 01:08:01,000
memory it may be that we could do that

1398
01:07:59,500 --> 01:08:02,349
and never know and we've been loading

1399
01:08:01,000 --> 01:08:04,088
off the end of a buffer and never know

1400
01:08:02,349 --> 01:08:07,028
so you want to make sure that we like

1401
01:08:04,088 --> 01:08:08,288
check that buffer math there and make

1402
01:08:07,028 --> 01:08:09,159
sure that whenever we gives one of these

1403
01:08:08,289 --> 01:08:10,778
things back

1404
01:08:09,159 --> 01:08:12,308
we don't do it something where we've

1405
01:08:10,778 --> 01:08:16,929
we've actually not left the room that

1406
01:08:12,309 --> 01:08:19,630
you know we've asked for right um so I

1407
01:08:16,929 --> 01:08:22,270
think that's mostly what we want in

1408
01:08:19,630 --> 01:08:25,000
terms of of those functions and so now

1409
01:08:22,270 --> 01:08:27,699
when we call reserve sound memory

1410
01:08:25,000 --> 01:08:31,838
they're like this we'd actually pull

1411
01:08:27,698 --> 01:08:35,559
that out and so we'd say sound memory or

1412
01:08:31,838 --> 01:08:41,948
you know just maybe memory equals this

1413
01:08:35,560 --> 01:08:46,839
call this takes the pointer and the

1414
01:08:41,948 --> 01:08:54,250
sound now gets that loaded at buffer

1415
01:08:46,838 --> 01:08:57,009
index or semaphore next that gets the

1416
01:08:54,250 --> 01:09:00,039
buffer index right so now we've set it

1417
01:08:57,009 --> 01:09:01,869
properly if we compile we should get an

1418
01:09:00,039 --> 01:09:03,429
error down below where we want to do the

1419
01:09:01,869 --> 01:09:04,899
exact same thing but haven't done it yet

1420
01:09:03,429 --> 01:09:07,539
oh and we should we should make those

1421
01:09:04,899 --> 01:09:10,388
work as well but the one I actually

1422
01:09:07,539 --> 01:09:14,710
wanted to talk about right now was this

1423
01:09:10,389 --> 01:09:16,119
one so here we want to get again we want

1424
01:09:14,710 --> 01:09:19,270
to do the same thing so that's sound

1425
01:09:16,119 --> 01:09:22,358
buffer memory this right here we want to

1426
01:09:19,270 --> 01:09:29,100
be able to call that and this will be

1427
01:09:22,359 --> 01:09:34,298
get the pointer and the asset right oops

1428
01:09:29,100 --> 01:09:39,969
the asset loaded at sound buffer index

1429
01:09:34,298 --> 01:09:43,939
will get the buffer index like so

1430
01:09:39,969 --> 01:09:45,439
right so that seems good

1431
01:09:43,939 --> 01:09:46,789
now these parts here where we're

1432
01:09:45,439 --> 01:09:49,879
creating these these should be pretty

1433
01:09:46,789 --> 01:09:51,319
easy to do and also all of this stuff

1434
01:09:49,880 --> 01:09:53,600
here where we were like sample buffer

1435
01:09:51,319 --> 01:09:56,650
base index that's actually sought sample

1436
01:09:53,600 --> 01:10:00,199
buffer top index now because like I said

1437
01:09:56,649 --> 01:10:02,059
that value isn't the base of the buffer

1438
01:10:00,198 --> 01:10:05,299
it's the top of the buffer base you know

1439
01:10:02,060 --> 01:10:07,160
the the top of the used region I don't

1440
01:10:05,300 --> 01:10:09,590
know how it's not a great word either

1441
01:10:07,159 --> 01:10:15,309
one they're both kind of wrong but the

1442
01:10:09,590 --> 01:10:17,300
top is less wrong than bottom maybe I

1443
01:10:15,310 --> 01:10:24,550
don't know if that's really true but

1444
01:10:17,300 --> 01:10:24,550
anyway so in here if we whoops the size

1445
01:10:27,039 --> 01:10:33,310
was supposed to be asset HHA data size I

1446
01:10:35,050 --> 01:10:45,050
think that's all good yeah so okay now

1447
01:10:38,988 --> 01:10:51,609
we just have loaded at sound buffer

1448
01:10:45,050 --> 01:10:51,610
index so this is the buffer index here I

1449
01:10:54,909 --> 01:10:58,599
think that's all good

1450
01:11:06,219 --> 01:11:12,050
and the only thing I'm not sure about

1451
01:11:09,849 --> 01:11:29,869
like there was an error there I'm not

1452
01:11:12,050 --> 01:11:31,909
sure what it is so I assume that

1453
01:11:29,868 --> 01:11:33,170
reserved sound memory it doesn't really

1454
01:11:31,908 --> 01:11:35,929
know what that is oh no it just doesn't

1455
01:11:33,170 --> 01:11:41,690
know what data size is so that just has

1456
01:11:35,929 --> 01:11:43,039
to go up there okay so I think that's a

1457
01:11:41,689 --> 01:11:46,098
full sketch of the routine

1458
01:11:43,039 --> 01:11:50,389
these are computed off of the top so if

1459
01:11:46,099 --> 01:11:58,670
you just go to the top index here which

1460
01:11:50,389 --> 01:12:01,279
should be this so the base index is

1461
01:11:58,670 --> 01:12:05,980
always just the top index you know minus

1462
01:12:01,279 --> 01:12:09,710
some number right so it's whatever the

1463
01:12:05,979 --> 01:12:11,388
in this case the sample buffer size is

1464
01:12:09,710 --> 01:12:16,158
that gets you down to the bottom of the

1465
01:12:11,389 --> 01:12:22,069
buffer right and the LRU rate is just

1466
01:12:16,158 --> 01:12:25,009
that plus something so I don't know what

1467
01:12:22,069 --> 01:12:29,269
we want to set that to but it can just

1468
01:12:25,010 --> 01:12:33,560
be a size like sample buffer LRU range

1469
01:12:29,270 --> 01:12:36,110
or something and that just gets added on

1470
01:12:33,560 --> 01:12:39,949
and that's it but that's all there is to

1471
01:12:36,109 --> 01:12:42,259
it so I think that's all we really want

1472
01:12:39,948 --> 01:12:45,319
to do I don't think there's anything

1473
01:12:42,260 --> 01:12:49,219
else particularly Squinkie going on here

1474
01:12:45,319 --> 01:12:51,500
I think that's it and so yeah that

1475
01:12:49,219 --> 01:12:54,078
should pretty much do it make sure we've

1476
01:12:51,500 --> 01:12:55,368
cleaned up our errors here so I think

1477
01:12:54,078 --> 01:12:57,380
the only thing we need to do to get

1478
01:12:55,368 --> 01:13:00,559
things started is in the actual

1479
01:12:57,380 --> 01:13:03,349
allocation the part of things where we

1480
01:13:00,560 --> 01:13:05,119
actually get things started here my

1481
01:13:03,349 --> 01:13:07,310
recollection is we don't do anything

1482
01:13:05,118 --> 01:13:08,899
with sounds at the moment right so if I

1483
01:13:07,310 --> 01:13:10,250
were to search for this sample buffer I

1484
01:13:08,899 --> 01:13:12,828
don't think anyone actually sets it up

1485
01:13:10,250 --> 01:13:14,840
right so you know we did all our work

1486
01:13:12,828 --> 01:13:17,779
here and that's great but you know yeah

1487
01:13:14,840 --> 01:13:18,300
you can see this is it it's just these

1488
01:13:17,779 --> 01:13:21,569
routines

1489
01:13:18,300 --> 01:13:25,140
here nobody actually creates anything

1490
01:13:21,569 --> 01:13:27,569
useful there so what I want to do there

1491
01:13:25,140 --> 01:13:30,300
is say alright let's do like in its

1492
01:13:27,569 --> 01:13:32,069
sound memory here and let's pass the

1493
01:13:30,300 --> 01:13:33,869
game ass that's in there and like

1494
01:13:32,069 --> 01:13:35,159
whatever the cursor up that's sorry

1495
01:13:33,869 --> 01:13:37,050
that's my internal name for things as

1496
01:13:35,159 --> 01:13:38,220
curse or usually so we actually want

1497
01:13:37,050 --> 01:13:40,860
memory arena I think it's what the

1498
01:13:38,220 --> 01:13:42,869
column here yeah so let's take the

1499
01:13:40,859 --> 01:13:46,920
memory arena there and we'll say here's

1500
01:13:42,869 --> 01:13:49,260
where the memory comes from right and

1501
01:13:46,920 --> 01:13:52,170
then we'll just expect this thing to set

1502
01:13:49,260 --> 01:13:58,430
that up and so what it'll do is probably

1503
01:13:52,170 --> 01:13:58,430
take the sample buffer size actually I

1504
01:13:58,760 --> 01:14:02,760
don't even know if I want to do that so

1505
01:14:01,500 --> 01:14:04,789
what we're gonna do here is say look the

1506
01:14:02,760 --> 01:14:08,270
sample buffer size is gonna be a power -

1507
01:14:04,789 --> 01:14:16,189
right so it's gonna be like 1024 x 1024

1508
01:14:08,270 --> 01:14:20,310
x what like 256 I think we said

1509
01:14:16,189 --> 01:14:22,169
something like that so maybe that's what

1510
01:14:20,310 --> 01:14:23,070
the size of the sample buffer is I don't

1511
01:14:22,170 --> 01:14:24,899
know what the size of sample of ur

1512
01:14:23,069 --> 01:14:27,299
should be but let's just say that's what

1513
01:14:24,899 --> 01:14:28,920
it is so then what I'm gonna do is say

1514
01:14:27,300 --> 01:14:32,489
alright let's go ahead and allocate that

1515
01:14:28,920 --> 01:14:33,690
memory off of this arena now you could

1516
01:14:32,489 --> 01:14:35,639
argue that this should just be its own

1517
01:14:33,689 --> 01:14:38,189
separate memory pool that just gets

1518
01:14:35,640 --> 01:14:39,930
allocated not on an arena but you know

1519
01:14:38,189 --> 01:14:42,329
that's a separate story and I don't

1520
01:14:39,930 --> 01:14:43,980
really going to think about that so what

1521
01:14:42,329 --> 01:14:45,329
I want to do instead is just say look

1522
01:14:43,979 --> 01:14:47,969
let's do a push size of the sample

1523
01:14:45,329 --> 01:14:54,949
buffer size off of this arena and that's

1524
01:14:47,970 --> 01:14:58,530
gonna be the memory in question right so

1525
01:14:54,949 --> 01:15:01,500
this gives us our sample buffer size and

1526
01:14:58,529 --> 01:15:04,769
maybe I will also record the size here

1527
01:15:01,500 --> 01:15:08,069
since we need that and then what I need

1528
01:15:04,770 --> 01:15:10,730
to do is make the mapping mask so if I

1529
01:15:08,069 --> 01:15:13,109
do the assets sample buffer mapping mask

1530
01:15:10,729 --> 01:15:14,339
all of this stuff and I'm gonna put that

1531
01:15:13,109 --> 01:15:17,969
down below because these are all like

1532
01:15:14,340 --> 01:15:20,190
derived values right so the sample

1533
01:15:17,970 --> 01:15:22,560
buffer mapping mask is just gonna be a

1534
01:15:20,189 --> 01:15:24,629
loft up of the sample buffer size and

1535
01:15:22,560 --> 01:15:27,539
then I'm just gonna subtract 1 right so

1536
01:15:24,630 --> 01:15:29,369
in 64-bit math if I just subtract 1

1537
01:15:27,539 --> 01:15:30,810
that'll get me just that bottom mask

1538
01:15:29,369 --> 01:15:31,859
because it'll knock out all the other

1539
01:15:30,810 --> 01:15:36,539
bits so that's

1540
01:15:31,859 --> 01:15:41,880
it's all I need then if I go in and set

1541
01:15:36,539 --> 01:15:44,698
the remaining values the top and X and

1542
01:15:41,880 --> 01:15:47,760
the LRU range the LRU range I don't know

1543
01:15:44,698 --> 01:15:51,569
what we want to call it maybe we'll call

1544
01:15:47,760 --> 01:15:53,179
it like the bottom 16 Meg's will just be

1545
01:15:51,569 --> 01:15:56,069
the place that will move stuff out of

1546
01:15:53,179 --> 01:15:59,609
that's necessary and then the sample

1547
01:15:56,069 --> 01:16:00,988
buffer top index so you know you could

1548
01:15:59,609 --> 01:16:02,639
set that to zero but what you have to

1549
01:16:00,988 --> 01:16:04,468
remember is we're creating we're

1550
01:16:02,639 --> 01:16:06,989
pretending that's the top of loaded

1551
01:16:04,469 --> 01:16:10,079
things I would rather have it start out

1552
01:16:06,988 --> 01:16:12,718
at the sample buffer size so that the

1553
01:16:10,079 --> 01:16:16,109
whole buffer like that whole first swap

1554
01:16:12,719 --> 01:16:19,439
of things I would like it to be so that

1555
01:16:16,109 --> 01:16:21,569
zero is out of the range so one way to

1556
01:16:19,439 --> 01:16:23,129
do it maybe would be to say we're gonna

1557
01:16:21,569 --> 01:16:25,109
start loading it like two times the

1558
01:16:23,130 --> 01:16:27,630
sample buffer size because this but this

1559
01:16:25,109 --> 01:16:29,609
can be anything we want right it's a

1560
01:16:27,630 --> 01:16:31,469
64-bit value that goes on forever so

1561
01:16:29,609 --> 01:16:33,750
what I'd rather do is I'd rather have

1562
01:16:31,469 --> 01:16:35,039
zero so if you just had a zero something

1563
01:16:33,750 --> 01:16:36,600
that was initialized to zero and you

1564
01:16:35,039 --> 01:16:40,649
never really like looked at it or what

1565
01:16:36,600 --> 01:16:42,869
it's doing I would rather have zero just

1566
01:16:40,649 --> 01:16:45,658
be out of the range way out of the range

1567
01:16:42,868 --> 01:16:48,899
so it's totally clear that zero isn't a

1568
01:16:45,658 --> 01:16:50,609
valid thing ever so that anyone who has

1569
01:16:48,899 --> 01:16:53,279
something set to zero knows that their

1570
01:16:50,609 --> 01:16:55,710
crap is not in the range whereas if I

1571
01:16:53,279 --> 01:16:59,279
actually had the sample buffer be less

1572
01:16:55,710 --> 01:17:01,408
than or equal to sample buffer size zero

1573
01:16:59,279 --> 01:17:03,779
would still think it was loaded right

1574
01:17:01,408 --> 01:17:05,219
and so we don't really need to do this

1575
01:17:03,779 --> 01:17:07,618
because we're tracking loaded as a

1576
01:17:05,219 --> 01:17:09,480
separate parameter but imagine a future

1577
01:17:07,618 --> 01:17:11,880
where we decide to get rid of that that

1578
01:17:09,479 --> 01:17:15,238
which we might want to do that and just

1579
01:17:11,880 --> 01:17:16,409
track that one value because I think we

1580
01:17:15,238 --> 01:17:18,118
can do everything with just that one

1581
01:17:16,408 --> 01:17:20,099
value I may want to try doing that

1582
01:17:18,118 --> 01:17:21,719
someday I don't want this to to come

1583
01:17:20,100 --> 01:17:24,659
back to bite me so I'm just gonna say

1584
01:17:21,719 --> 01:17:27,480
look let's just take that window move it

1585
01:17:24,658 --> 01:17:30,479
up so that no sounds that have a zero

1586
01:17:27,479 --> 01:17:32,549
value ever could in note at any time

1587
01:17:30,479 --> 01:17:34,319
during the run of the program until the

1588
01:17:32,550 --> 01:17:36,480
heat death of the universe could never

1589
01:17:34,319 --> 01:17:41,039
think they were loaded and so that's

1590
01:17:36,479 --> 01:17:43,618
what that tries to accomplish there so

1591
01:17:41,039 --> 01:17:44,760
that's what I think we want to try I'm

1592
01:17:43,618 --> 01:17:49,439
gonna go ahead

1593
01:17:44,760 --> 01:17:51,719
and go to the anit club here and say

1594
01:17:49,439 --> 01:17:56,428
that when we allocate the game assets

1595
01:17:51,719 --> 01:17:58,078
here the non restored memory is gonna be

1596
01:17:56,429 --> 01:17:59,969
I think where we want to get this out of

1597
01:17:58,078 --> 01:18:01,349
so I'm just gonna go ahead and say let's

1598
01:17:59,969 --> 01:18:03,989
an it the sound memory look right off

1599
01:18:01,349 --> 01:18:06,389
the bat because it doesn't really depend

1600
01:18:03,988 --> 01:18:08,069
on anything I don't think and will

1601
01:18:06,389 --> 01:18:12,538
allocate the arena there and I think

1602
01:18:08,069 --> 01:18:14,639
we're done with that I think we're good

1603
01:18:12,538 --> 01:18:16,679
to go now in order to start testing this

1604
01:18:14,639 --> 01:18:17,940
stuff we need to actually play some

1605
01:18:16,679 --> 01:18:20,279
sounds mean to have some sounds doing

1606
01:18:17,939 --> 01:18:23,328
something and so I think we actually

1607
01:18:20,279 --> 01:18:26,518
turn sound off here if I remember

1608
01:18:23,328 --> 01:18:31,439
correctly I actually don't really

1609
01:18:26,519 --> 01:18:33,269
remember what we did was sound because

1610
01:18:31,439 --> 01:18:34,919
it's all like it was all implemented and

1611
01:18:33,269 --> 01:18:37,230
stuff in here but I just don't remember

1612
01:18:34,920 --> 01:18:38,819
like when we decided to do

1613
01:18:37,229 --> 01:18:40,399
I thought we'd turned it off so it

1614
01:18:38,819 --> 01:18:43,939
wouldn't play while we were doing stuff

1615
01:18:40,399 --> 01:18:43,939
but I just don't remember

1616
01:18:58,099 --> 01:19:14,929
I don't remember if we turn this off or

1617
01:19:01,399 --> 01:19:24,759
if it's still going so are we still

1618
01:19:14,929 --> 01:19:24,760
doing sound this is it

1619
01:19:35,899 --> 01:19:51,989
so it doesn't look like any of this got

1620
01:19:41,600 --> 01:19:57,530
nerfed okay

1621
01:19:51,989 --> 01:20:03,659
I say hesitantly it looks like no one

1622
01:19:57,529 --> 01:20:15,840
literally ever calls play sound so I

1623
01:20:03,659 --> 01:20:18,090
guess we just start calling that I mean

1624
01:20:15,840 --> 01:20:19,529
I don't know it's been so long I start

1625
01:20:18,090 --> 01:20:20,750
remember I guess we didn't nerf it I

1626
01:20:19,529 --> 01:20:23,159
guess we're just not playing anything

1627
01:20:20,750 --> 01:20:26,909
I'm gonna look and see about the audio

1628
01:20:23,159 --> 01:20:30,599
state I mean here it is right and we

1629
01:20:26,909 --> 01:20:34,289
even have a music thing there and so I

1630
01:20:30,600 --> 01:20:39,650
don't know like oops did I do something

1631
01:20:34,289 --> 01:20:46,529
bad there I don't think so

1632
01:20:39,649 --> 01:20:48,539
so if I go ahead and do music doesn't

1633
01:20:46,529 --> 01:20:50,869
look like we ever did anything with that

1634
01:20:48,539 --> 01:20:50,869
either

1635
01:20:53,689 --> 01:21:00,179
yeah so I don't know I I guess I don't

1636
01:20:57,149 --> 01:21:01,319
really know what's going on here so

1637
01:21:00,180 --> 01:21:03,210
we're just gonna have to make it up as

1638
01:21:01,319 --> 01:21:05,039
we go along it looks like all the codes

1639
01:21:03,210 --> 01:21:06,390
still in place and it looks like maybe

1640
01:21:05,039 --> 01:21:11,430
the reason that we're not getting

1641
01:21:06,390 --> 01:21:16,050
anything in terms of music there is just

1642
01:21:11,430 --> 01:21:20,369
because we stopped we looked deleted any

1643
01:21:16,050 --> 01:21:22,470
calls that would have played it I I mean

1644
01:21:20,369 --> 01:21:25,500
I don't know what else to say I don't I

1645
01:21:22,470 --> 01:21:28,140
don't see any other nerfing like the

1646
01:21:25,500 --> 01:21:30,300
audio States getting initialized it

1647
01:21:28,140 --> 01:21:31,740
looks like we left it all in so I guess

1648
01:21:30,300 --> 01:21:35,909
the only thing we did is like stop

1649
01:21:31,739 --> 01:21:40,139
calling it right and so if I compile

1650
01:21:35,909 --> 01:21:42,439
this back in right my assumption is that

1651
01:21:40,140 --> 01:21:45,150
[Music]

1652
01:21:42,439 --> 01:21:46,829
my assumption is that yeah like we could

1653
01:21:45,149 --> 01:21:47,698
just make this work pretty trivially

1654
01:21:46,829 --> 01:21:50,939
here

1655
01:21:47,698 --> 01:21:53,099
the actual code to call like the play

1656
01:21:50,939 --> 01:21:56,069
sound on it we need to be able to get

1657
01:21:53,100 --> 01:22:02,810
that sound so if we look back at like

1658
01:21:56,069 --> 01:22:06,119
the asset calls for like load sound or

1659
01:22:02,810 --> 01:22:14,190
for get sound samples right

1660
01:22:06,119 --> 01:22:17,609
I don't really know so the audio system

1661
01:22:14,189 --> 01:22:19,979
as it stands presumably you ask for a

1662
01:22:17,609 --> 01:22:21,869
handle to one of those yeah so

1663
01:22:19,979 --> 01:22:24,000
presumably you know you would just do

1664
01:22:21,869 --> 01:22:26,159
something where you would say play sound

1665
01:22:24,000 --> 01:22:30,810
on this thing so I would do something

1666
01:22:26,159 --> 01:22:35,099
like you know if game stayed music

1667
01:22:30,810 --> 01:22:41,520
wasn't set up yet I would set it up so I

1668
01:22:35,100 --> 01:22:49,410
would say game stayed music equals play

1669
01:22:41,520 --> 01:22:51,780
sound like so and the audio state is the

1670
01:22:49,409 --> 01:22:54,448
one from here and the sound ID is one

1671
01:22:51,779 --> 01:22:57,300
that I would have to you know get right

1672
01:22:54,448 --> 01:23:00,599
so I'd have to do a search for that

1673
01:22:57,300 --> 01:23:04,890
sound ID by doing like a get a set call

1674
01:23:00,600 --> 01:23:07,880
so if I actually look at you know the

1675
01:23:04,890 --> 01:23:15,030
get a set call here or the get sound

1676
01:23:07,880 --> 01:23:20,789
asset call get that it's like best match

1677
01:23:15,029 --> 01:23:25,948
right get first first asset from get

1678
01:23:20,789 --> 01:23:28,279
best match asset from right so if I did

1679
01:23:25,948 --> 01:23:28,279
this

1680
01:23:30,899 --> 01:23:42,959
I guess what I want to do is say and is

1681
01:23:40,168 --> 01:23:44,969
there a get best match sound yeah there

1682
01:23:42,958 --> 01:23:47,248
is so what I want to do is I just want

1683
01:23:44,969 --> 01:23:51,899
to say look get me the best match sound

1684
01:23:47,248 --> 01:23:55,529
from the assets I'm gonna give you a

1685
01:23:51,899 --> 01:23:57,419
type ID for the category which I'll have

1686
01:23:55,529 --> 01:23:59,158
to look up what we even said those were

1687
01:23:57,418 --> 01:24:01,198
because I don't know that we really oops

1688
01:23:59,158 --> 01:24:03,839
I don't know that we really have many I

1689
01:24:01,198 --> 01:24:07,078
I think it might just be audio I don't

1690
01:24:03,840 --> 01:24:11,248
even think we have categories for those

1691
01:24:07,078 --> 01:24:14,639
I think they all go in here now so it'd

1692
01:24:11,248 --> 01:24:18,118
be more like that right and then I've

1693
01:24:14,639 --> 01:24:23,729
got an asset vector match and an asset

1694
01:24:18,118 --> 01:24:25,438
vector weight and again we're gonna redo

1695
01:24:23,729 --> 01:24:27,239
that part pretty soon because we're

1696
01:24:25,439 --> 01:24:32,329
almost done with all of our asset system

1697
01:24:27,238 --> 01:24:35,158
stuff so the way we do matching and and

1698
01:24:32,328 --> 01:24:37,078
store it and like quick searches on

1699
01:24:35,158 --> 01:24:40,768
matches is going to have to change

1700
01:24:37,078 --> 01:24:43,978
pretty soon because we will die in

1701
01:24:40,769 --> 01:24:48,599
search search land if we don't but for

1702
01:24:43,979 --> 01:24:52,918
the moment we're fine for testing

1703
01:24:48,599 --> 01:24:55,489
purposes personally so we just need a

1704
01:24:52,918 --> 01:24:59,279
way to look one up which we can do here

1705
01:24:55,488 --> 01:25:02,218
and then we need ways to play it which

1706
01:24:59,279 --> 01:25:05,819
we can do here so I'm gonna make like

1707
01:25:02,219 --> 01:25:07,828
let's say channel 0 ID there and in

1708
01:25:05,819 --> 01:25:10,529
order to match this we just need a way

1709
01:25:07,828 --> 01:25:15,538
to like load this thing and so what I

1710
01:25:10,529 --> 01:25:18,538
want to do is I want to look back at

1711
01:25:15,538 --> 01:25:20,938
what that music was tagged so I just

1712
01:25:18,538 --> 01:25:23,728
want to look at look at the actual tag

1713
01:25:20,939 --> 01:25:28,320
file right so what I want there is to

1714
01:25:23,729 --> 01:25:31,019
say okay in handmade tags I know in here

1715
01:25:28,319 --> 01:25:33,808
I think we put the tags for it so it's

1716
01:25:31,019 --> 01:25:36,389
just tag title screen and it's audio

1717
01:25:33,809 --> 01:25:41,059
state right so basically like I should

1718
01:25:36,389 --> 01:25:43,119
just be able to do tag title screen

1719
01:25:41,059 --> 01:25:47,380
equals 1

1720
01:25:43,119 --> 01:25:49,720
tag title screen equals one right match

1721
01:25:47,380 --> 01:25:54,550
that and the weight vector yeah also

1722
01:25:49,720 --> 01:25:57,730
want tag channel so I want to match that

1723
01:25:54,550 --> 01:26:00,539
properly and you know we could later

1724
01:25:57,729 --> 01:26:02,559
load the other ones so here on match

1725
01:26:00,539 --> 01:26:05,260
channel index I could change that to

1726
01:26:02,560 --> 01:26:11,260
channel one and I should get back the

1727
01:26:05,260 --> 01:26:13,600
channel one instead right I think that

1728
01:26:11,260 --> 01:26:17,890
would load everything that we wanted to

1729
01:26:13,600 --> 01:26:21,520
load and and go from there so oops it's

1730
01:26:17,890 --> 01:26:25,150
not supposed to say vector I'm supposed

1731
01:26:21,520 --> 01:26:28,240
to say wait I think that's really all we

1732
01:26:25,149 --> 01:26:34,929
need this stuff here I don't really

1733
01:26:28,239 --> 01:26:36,819
remember much about the weight of this

1734
01:26:34,930 --> 01:26:38,800
input stuff was working so I'm just

1735
01:26:36,819 --> 01:26:41,019
gonna look really quickly what we

1736
01:26:38,800 --> 01:26:43,810
changed that to we should be able to do

1737
01:26:41,020 --> 01:26:47,320
basically the same thing if you look in

1738
01:26:43,810 --> 01:26:49,470
here under game input you can see that

1739
01:26:47,319 --> 01:26:51,519
there's like a clip space Mouse PE I

1740
01:26:49,470 --> 01:26:53,800
think that means you don't need the

1741
01:26:51,520 --> 01:26:57,760
buffer width anymore so I'm pretty sure

1742
01:26:53,800 --> 01:27:02,610
we could do here is just do a clamp on

1743
01:26:57,760 --> 01:27:07,239
this so we could say like music volume I

1744
01:27:02,609 --> 01:27:09,460
guess this is for two channels what we

1745
01:27:07,239 --> 01:27:13,329
could say is the music volume here it's

1746
01:27:09,460 --> 01:27:16,539
just going to be a clamp from 0 to 1 in

1747
01:27:13,329 --> 01:27:21,399
fact I think we can just do clamp 0 1 of

1748
01:27:16,539 --> 01:27:27,579
whatever the clip space Mouse P is for

1749
01:27:21,399 --> 01:27:29,349
the x-axis right I think that's all we

1750
01:27:27,579 --> 01:27:30,850
would need there so that just that's

1751
01:27:29,350 --> 01:27:34,560
actually simpler than it used to be oh

1752
01:27:30,850 --> 01:27:34,560
and that's from the input

1753
01:27:39,920 --> 01:27:47,389
so now we just have a bunch of debugging

1754
01:27:41,689 --> 01:27:49,308
to do I don't think we we have much more

1755
01:27:47,389 --> 01:27:53,269
to think about maybe we do maybe I

1756
01:27:49,309 --> 01:27:54,800
missed something but I don't know so I'm

1757
01:27:53,269 --> 01:27:58,060
just gonna okay

1758
01:27:54,800 --> 01:27:58,060
[Music]

1759
01:27:58,640 --> 01:28:04,410
so it sounds like to me it all worked

1760
01:28:01,920 --> 01:28:06,119
great up until it had to do streaming

1761
01:28:04,409 --> 01:28:09,359
and it looks like the streaming didn't

1762
01:28:06,119 --> 01:28:11,279
work properly but hey good on us we

1763
01:28:09,359 --> 01:28:11,949
actually got quite a bit can you hear

1764
01:28:11,279 --> 01:28:15,179
that

1765
01:28:11,949 --> 01:28:23,590
[Music]

1766
01:28:15,180 --> 01:28:24,789
yeah um so we don't really know exactly

1767
01:28:23,590 --> 01:28:27,699
what's going on there but the first

1768
01:28:24,789 --> 01:28:30,488
thing to probably look at is we're gonna

1769
01:28:27,699 --> 01:28:33,069
want to go see how that streaming stuff

1770
01:28:30,488 --> 01:28:36,549
is working and we have to go make sure

1771
01:28:33,069 --> 01:28:37,719
that that you know it properly lose the

1772
01:28:36,550 --> 01:28:39,190
next chunks and that we probably got

1773
01:28:37,719 --> 01:28:42,489
them marked up and all that other sort

1774
01:28:39,189 --> 01:28:44,529
of stuff right so let's just go do some

1775
01:28:42,488 --> 01:28:45,549
due diligence on that I don't know a lot

1776
01:28:44,529 --> 01:28:48,939
of time to get that working today but

1777
01:28:45,550 --> 01:28:50,920
hey that was pretty great everything

1778
01:28:48,939 --> 01:28:52,269
just worked I heard sound and it was

1779
01:28:50,920 --> 01:28:53,800
playing and I could even change the

1780
01:28:52,270 --> 01:28:55,060
volume by moving the X I mean could

1781
01:28:53,800 --> 01:28:56,199
change the channel balance by moving the

1782
01:28:55,060 --> 01:28:58,900
X which is that what we tried to do

1783
01:28:56,199 --> 01:29:00,579
there and all that good stuff so let's

1784
01:28:58,899 --> 01:29:05,019
go into audio and see what's supposed to

1785
01:29:00,579 --> 01:29:06,579
happen when we're doing streaming so

1786
01:29:05,020 --> 01:29:10,060
here's that but playing sounds you can

1787
01:29:06,579 --> 01:29:11,738
see the code and in here what it's doing

1788
01:29:10,060 --> 01:29:14,800
is it's kind of looping over each one

1789
01:29:11,738 --> 01:29:17,379
and it's getting the sound samples for

1790
01:29:14,800 --> 01:29:19,869
those which is that function we just

1791
01:29:17,380 --> 01:29:22,600
wrote right and it's looking and saying

1792
01:29:19,869 --> 01:29:24,219
okay here's like the sound info for the

1793
01:29:22,600 --> 01:29:26,350
sound we're talking about here's the one

1794
01:29:24,219 --> 01:29:27,609
that would come next which we can go

1795
01:29:26,350 --> 01:29:29,829
look at this code to make sure it's

1796
01:29:27,609 --> 01:29:31,539
getting the right value there and it's

1797
01:29:29,829 --> 01:29:33,488
also doing a pre fetch on that next one

1798
01:29:31,539 --> 01:29:40,149
in case it needs to you know so it will

1799
01:29:33,488 --> 01:29:44,488
be pulled in quickly so we may want that

1800
01:29:40,149 --> 01:29:44,488
prefetch to actually well

1801
01:29:52,939 --> 01:30:09,059
so we may want prefetch to do the same

1802
01:29:56,640 --> 01:30:12,210
move this this move you know I'm saying

1803
01:30:09,060 --> 01:30:23,010
we might we may want prefetch to do that

1804
01:30:12,210 --> 01:30:31,739
if the sound is loaded so I think you

1805
01:30:23,010 --> 01:30:34,159
know I don't know I'm just gonna say we

1806
01:30:31,739 --> 01:30:34,159
get to do

1807
01:31:07,659 --> 01:31:16,909
right so I'm literally just gonna call

1808
01:31:13,550 --> 01:31:21,949
here get sound samples to force that to

1809
01:31:16,909 --> 01:31:24,050
happen right and that way it will move

1810
01:31:21,949 --> 01:31:27,500
it out of the eviction region if it was

1811
01:31:24,050 --> 01:31:29,329
going to be evicted soon and so that way

1812
01:31:27,500 --> 01:31:30,859
if you're telling it to prefetch a sound

1813
01:31:29,329 --> 01:31:33,199
it will make sure it's pre fetched into

1814
01:31:30,859 --> 01:31:34,609
the upper region not the eviction region

1815
01:31:33,199 --> 01:31:35,960
which i think is what we would want

1816
01:31:34,609 --> 01:31:37,489
because if someone specifically telling

1817
01:31:35,960 --> 01:31:39,199
you I'm going to need this sound we

1818
01:31:37,489 --> 01:31:41,449
probably want that to be the way that it

1819
01:31:39,199 --> 01:31:43,250
works don't actually know that that's

1820
01:31:41,449 --> 01:31:45,679
true but it just seems intuitively

1821
01:31:43,250 --> 01:31:48,319
correct to me all right

1822
01:31:45,680 --> 01:31:50,720
so we say get next sound in Shayne blah

1823
01:31:48,319 --> 01:32:01,849
blah blah we do like the sample chunk

1824
01:31:50,720 --> 01:32:05,020
here if you use the 1.9 F version gonna

1825
01:32:01,850 --> 01:32:10,850
be honest don't know what 1.9 F is oh

1826
01:32:05,020 --> 01:32:13,040
that so that looks like a bug we've

1827
01:32:10,850 --> 01:32:14,630
gotten here we should fix should

1828
01:32:13,039 --> 01:32:25,659
probably tighten up some of this code

1829
01:32:14,630 --> 01:32:25,659
just in general so how do we know

1830
01:32:29,989 --> 01:32:35,039
how do we know when to use next sound

1831
01:32:33,180 --> 01:32:37,909
and chain here there's the volume

1832
01:32:35,039 --> 01:32:37,909
computation

1833
01:32:48,590 --> 01:32:55,380
seconds for sample test face current

1834
01:32:51,239 --> 01:33:00,079
sample playing Sam D sample samples

1835
01:32:55,380 --> 01:33:00,079
played total chunks to mix

1836
01:33:09,229 --> 01:33:18,909
real checks for make it sound low sound

1837
01:33:10,969 --> 01:33:18,909
sample cups so this is wrong I think I

1838
01:33:21,760 --> 01:33:26,409
know

1839
01:33:23,229 --> 01:33:31,428
so the problem here is that loaded

1840
01:33:26,409 --> 01:33:32,559
loaded sounds sample count is well so I

1841
01:33:31,429 --> 01:33:35,750
don't actually know

1842
01:33:32,560 --> 01:33:37,910
so that sample count loaded sound sample

1843
01:33:35,750 --> 01:33:39,229
count is like well I guess that's right

1844
01:33:37,909 --> 01:33:41,059
that is how many are remaining in the

1845
01:33:39,229 --> 01:33:45,769
sound total but you may have to advance

1846
01:33:41,060 --> 01:33:47,989
to the next sample position - you know -

1847
01:33:45,770 --> 01:33:51,020
you may have to advance the next asset

1848
01:33:47,988 --> 01:33:53,678
so I just try got to see where do where

1849
01:33:51,020 --> 01:33:53,679
does anyone do that

1850
01:34:18,130 --> 01:34:24,730
so it looks like it's yeah so that looks

1851
01:34:21,939 --> 01:34:29,199
like it's wrong so I'm gonna say that

1852
01:34:24,729 --> 01:34:33,519
the sample count here is not accurate

1853
01:34:29,199 --> 01:34:35,019
like the sample count has to be so

1854
01:34:33,520 --> 01:34:40,330
there's a couple things in here that we

1855
01:34:35,020 --> 01:34:45,730
probably have to fix right and honestly

1856
01:34:40,329 --> 01:34:55,300
this routine this routine looks kind of

1857
01:34:45,729 --> 01:35:05,649
Squinkie for other reasons we may wanna

1858
01:34:55,300 --> 01:35:07,900
clean this up a little bit I'm not so

1859
01:35:05,649 --> 01:35:10,089
sure about this but anyway the point is

1860
01:35:07,899 --> 01:35:12,699
I think this sample account is therefore

1861
01:35:10,090 --> 01:35:16,119
wrong because this is the total number

1862
01:35:12,699 --> 01:35:19,300
of samples so if I do a quick search to

1863
01:35:16,119 --> 01:35:22,269
look for sample count here what you can

1864
01:35:19,300 --> 01:35:25,329
see is it really uses it the entire time

1865
01:35:22,270 --> 01:35:29,200
and it's not correct so the sample count

1866
01:35:25,329 --> 01:35:34,449
for this loaded sound is actually the

1867
01:35:29,199 --> 01:35:37,029
data size divided by the sample the

1868
01:35:34,449 --> 01:35:41,889
number of samples I'm the number of

1869
01:35:37,029 --> 01:35:45,029
bytes right so this actually should look

1870
01:35:41,890 --> 01:35:45,030
like that right

1871
01:35:49,149 --> 01:35:55,779
and I'm pretty sure that's at least one

1872
01:35:52,029 --> 01:36:02,949
issue also we actually need the asset

1873
01:35:55,779 --> 01:36:07,389
itself and we're not getting that we get

1874
01:36:02,949 --> 01:36:10,960
back in HHA sound but we actually want

1875
01:36:07,390 --> 01:36:15,039
the whole asset in its entirety

1876
01:36:10,960 --> 01:36:16,829
right so calling it sound info is not

1877
01:36:15,039 --> 01:36:20,850
really what we want because we need that

1878
01:36:16,829 --> 01:36:20,850
that data size I think

1879
01:36:28,579 --> 01:36:34,909
yeah because this only has a sample

1880
01:36:30,770 --> 01:36:38,000
count the channel count and the chain

1881
01:36:34,909 --> 01:36:38,000
[Music]

1882
01:36:38,560 --> 01:36:47,200
and I'm assuming that the channel count

1883
01:36:41,029 --> 01:36:47,199
here doesn't do anything right hoping

1884
01:36:50,229 --> 01:36:59,509
yeah so yeah I think this needs to get

1885
01:36:56,810 --> 01:37:02,080
the actual asset so this needs to be

1886
01:36:59,510 --> 01:37:02,079
like

1887
01:37:20,920 --> 01:37:24,069
something like that

1888
01:37:29,019 --> 01:37:32,380
let's take a look

1889
01:37:34,949 --> 01:37:38,069
yeah I mean I guess the other way we

1890
01:37:36,960 --> 01:37:40,800
could look at it is if we need that

1891
01:37:38,069 --> 01:37:45,689
piece of information maybe it should

1892
01:37:40,800 --> 01:37:47,250
come back with the get sound info cuz

1893
01:37:45,689 --> 01:37:49,799
maybe I don't want to be accessing the

1894
01:37:47,250 --> 01:37:52,380
asset directly so when you say get sound

1895
01:37:49,800 --> 01:37:54,960
info right and you do this thing here

1896
01:37:52,380 --> 01:38:01,800
maybe I just want you to get back an

1897
01:37:54,960 --> 01:38:03,060
actual asset value like like that you

1898
01:38:01,800 --> 01:38:05,279
know what I mean

1899
01:38:03,060 --> 01:38:14,370
and so maybe what I really want you to

1900
01:38:05,279 --> 01:38:16,529
do is this and I don't actually know

1901
01:38:14,369 --> 01:38:18,869
that I want like how often do we

1902
01:38:16,529 --> 01:38:20,699
actually use if I was going to just do

1903
01:38:18,869 --> 01:38:23,369
loaded sound here how often do we

1904
01:38:20,699 --> 01:38:27,859
actually get an error on using some part

1905
01:38:23,369 --> 01:38:27,859
of that that doesn't actually work right

1906
01:38:36,229 --> 01:38:46,229
cannot convert from sound to assets

1907
01:38:40,010 --> 01:38:56,460
agree with that get sound info getting X

1908
01:38:46,229 --> 01:39:02,849
and in shame that seems fine sample

1909
01:38:56,460 --> 01:39:06,810
count right so that is not we want

1910
01:39:02,850 --> 01:39:08,940
either so I think we're all good so the

1911
01:39:06,810 --> 01:39:12,180
sample count here which we actually

1912
01:39:08,939 --> 01:39:14,129
computed which is this that's the one we

1913
01:39:12,180 --> 01:39:16,680
want to use we would want to use it down

1914
01:39:14,130 --> 01:39:18,630
here so we would say assert that the

1915
01:39:16,680 --> 01:39:22,680
samples played is greater than or equal

1916
01:39:18,630 --> 01:39:27,470
to the sample count of the loaded sound

1917
01:39:22,680 --> 01:39:32,820
which is this and then we would say

1918
01:39:27,470 --> 01:39:34,770
subtract that amount away and that

1919
01:39:32,819 --> 01:39:40,380
should be fine I think that's what we

1920
01:39:34,770 --> 01:39:42,870
want there but don't quote me on that so

1921
01:39:40,380 --> 01:39:45,380
I think again that routine is not

1922
01:39:42,869 --> 01:39:45,380
fabulous

1923
01:39:46,399 --> 01:39:51,170
but now that we fixed it correctly knows

1924
01:39:49,469 --> 01:40:00,158
to advance

1925
01:39:51,170 --> 01:40:00,158
[Music]

1926
01:40:02,679 --> 01:40:09,559
but I think we're good now so sound bits

1927
01:40:06,800 --> 01:40:11,958
and gentlemen I think that's everything

1928
01:40:09,559 --> 01:40:13,788
we'll need to test that code a little

1929
01:40:11,958 --> 01:40:20,779
bit I think we want to make sure that we

1930
01:40:13,788 --> 01:40:23,840
actually have a little more visibility

1931
01:40:20,779 --> 01:40:27,728
into it working but I think that like

1932
01:40:23,840 --> 01:40:27,729
literally just works now for everything

1933
01:40:28,989 --> 01:40:44,849
[Music]

1934
01:40:47,229 --> 01:40:54,409
getting some playback shopping there I'm

1935
01:40:52,760 --> 01:41:01,039
not sure what's from again I think that

1936
01:40:54,409 --> 01:41:03,689
might be us having to I think that's us

1937
01:41:01,039 --> 01:41:06,810
missing our frame rate

1938
01:41:03,689 --> 01:41:06,809
[Music]

1939
01:41:11,069 --> 01:41:14,309
because we don't currently try to

1940
01:41:12,960 --> 01:41:16,220
protect against that yeah that's that's

1941
01:41:14,310 --> 01:41:40,910
just a frame right miss

1942
01:41:16,220 --> 01:41:43,920
[Music]

1943
01:41:40,909 --> 01:41:47,309
yeah that's just framing this alright so

1944
01:41:43,920 --> 01:41:49,619
I think we're good I don't actually

1945
01:41:47,310 --> 01:41:52,380
remember how much time we have left but

1946
01:41:49,619 --> 01:41:53,819
I think we're good here so I probably

1947
01:41:52,380 --> 01:41:55,670
don't want to do anything else right now

1948
01:41:53,819 --> 01:41:59,250
that was everything I wanted to do today

1949
01:41:55,670 --> 01:42:01,020
I so I think that's all good let's

1950
01:41:59,250 --> 01:42:02,460
double check since I do have a little

1951
01:42:01,020 --> 01:42:03,810
bit of time let me just tell a check

1952
01:42:02,460 --> 01:42:13,109
what do we do

1953
01:42:03,810 --> 01:42:26,280
you're just wondering if I go into if I

1954
01:42:13,109 --> 01:42:29,429
go into the audio code here and you want

1955
01:42:26,279 --> 01:42:35,670
to play a sound but you don't want to

1956
01:42:29,430 --> 01:42:42,119
keep a handle to the sound how does that

1957
01:42:35,670 --> 01:42:50,460
work look did we really I guess we

1958
01:42:42,119 --> 01:42:52,909
really didn't do anything here like what

1959
01:42:50,460 --> 01:42:52,909
happens

1960
01:43:02,289 --> 01:43:06,250
so basically

1961
01:43:15,628 --> 01:43:27,219
it looks like we really didn't quite

1962
01:43:20,828 --> 01:43:30,578
finish this part I mean we sort of did

1963
01:43:27,219 --> 01:43:37,838
but if you the answer is that I guess

1964
01:43:30,578 --> 01:43:39,969
you just you just never managed these at

1965
01:43:37,838 --> 01:43:41,019
all so meaning you could call the change

1966
01:43:39,969 --> 01:43:42,368
volume and you would actually change the

1967
01:43:41,019 --> 01:43:43,748
line with some other sound that used a

1968
01:43:42,368 --> 01:43:46,868
recycled handle from the one that you

1969
01:43:43,748 --> 01:43:48,398
had which I suppose is fine because if

1970
01:43:46,868 --> 01:43:51,458
you're playing music you should just

1971
01:43:48,399 --> 01:43:53,409
always have not you should always know

1972
01:43:51,458 --> 01:43:55,779
where you're at in it maybe I don't know

1973
01:43:53,408 --> 01:43:58,988
but you're still just a little weird so

1974
01:43:55,779 --> 01:44:03,338
we probably want to maybe make that do

1975
01:43:58,988 --> 01:44:04,808
something slightly different but in

1976
01:44:03,338 --> 01:44:06,069
terms of just testing out the sound

1977
01:44:04,809 --> 01:44:08,168
stuff a little bit more if we wanted to

1978
01:44:06,069 --> 01:44:10,988
make it so that every time that the hero

1979
01:44:08,168 --> 01:44:15,309
like hopped to someplace or something

1980
01:44:10,988 --> 01:44:16,838
maybe you know I just I just be

1981
01:44:15,309 --> 01:44:18,998
interested to play around that a little

1982
01:44:16,838 --> 01:44:22,179
bit just make sure that that stuff works

1983
01:44:18,998 --> 01:44:25,198
okay so I'm not really sure how that

1984
01:44:22,179 --> 01:44:25,199
should work

1985
01:44:39,100 --> 01:44:45,700
just trying to think if I want to do

1986
01:44:40,840 --> 01:44:48,810
anything here with that like for example

1987
01:44:45,699 --> 01:44:48,809
right here

1988
01:45:02,050 --> 01:45:07,900
I don't know that we really do anything

1989
01:45:03,939 --> 01:45:09,309
with the glove at the moment but I could

1990
01:45:07,899 --> 01:45:13,269
just make it so that that triggers a

1991
01:45:09,310 --> 01:45:19,000
sound I think so for example if here I

1992
01:45:13,270 --> 01:45:22,030
just wanted to do this I think you just

1993
01:45:19,000 --> 01:45:26,229
can so I don't know if the gamestate

1994
01:45:22,029 --> 01:45:30,960
comes through here though it does so if

1995
01:45:26,229 --> 01:45:33,399
I wanted to I could just say yeah like

1996
01:45:30,960 --> 01:45:37,539
why don't we just try playing a sound

1997
01:45:33,399 --> 01:45:40,779
here and we'll just do it you know match

1998
01:45:37,539 --> 01:45:49,329
on something I don't know what we

1999
01:45:40,779 --> 01:45:51,699
actually have four possibilities here

2000
01:45:49,329 --> 01:45:53,559
but we've got up some stupid sounds in

2001
01:45:51,699 --> 01:45:57,429
here so you know maybe we want to do

2002
01:45:53,560 --> 01:46:02,080
like one of these like bloop or

2003
01:45:57,430 --> 01:46:08,650
something so you know we say like get me

2004
01:46:02,079 --> 01:46:15,039
a bloop sound and then we're just going

2005
01:46:08,649 --> 01:46:16,599
to play the bloop sound right so I think

2006
01:46:15,039 --> 01:46:20,189
that would allow this test to make sure

2007
01:46:16,600 --> 01:46:20,190
we're like we can play sounds randomly

2008
01:46:21,229 --> 01:46:39,859
not curing anything there what is the

2009
01:46:35,670 --> 01:46:39,859
volume default to when you play a sound

2010
01:46:42,840 --> 01:46:50,610
it should default to on so this did not

2011
01:46:47,310 --> 01:46:50,610
work at all

2012
01:46:51,270 --> 01:46:56,700
assuming that we actually ever imported

2013
01:46:53,470 --> 01:47:01,369
those sounds which I assume we did

2014
01:46:56,699 --> 01:47:01,369
[Music]

2015
01:47:03,369 --> 01:47:06,880
[Music]

2016
01:47:07,359 --> 01:47:20,149
take a look yeah so these sounds should

2017
01:47:14,659 --> 01:47:21,529
be imported right here they are so we

2018
01:47:20,149 --> 01:47:22,849
should have some bloops in there and

2019
01:47:21,529 --> 01:47:24,380
we're not getting any bloops in there so

2020
01:47:22,850 --> 01:47:28,130
let's just take a look that gives us

2021
01:47:24,380 --> 01:47:33,069
something to debug here so that's in

2022
01:47:28,130 --> 01:47:33,069
handmade brain and that's in

2023
01:47:35,649 --> 01:47:46,920
execute brain Hira so inside this code

2024
01:47:43,920 --> 01:47:46,920
here

2025
01:47:50,220 --> 01:48:04,150
probably should have compiled in debug

2026
01:47:53,050 --> 01:48:07,659
mode but what happens that is not a

2027
01:48:04,149 --> 01:48:13,420
sound ID let's go ahead and end real

2028
01:48:07,659 --> 01:48:24,250
quick compound debug mode just so I can

2029
01:48:13,420 --> 01:48:26,619
see what's going on oh woops that's

2030
01:48:24,250 --> 01:48:35,439
playing every time I wanted it only on

2031
01:48:26,619 --> 01:48:48,130
attack first of all that should actually

2032
01:48:35,439 --> 01:48:51,509
be here oh no this is something we want

2033
01:48:48,130 --> 01:48:54,579
to report so if you are using remedy

2034
01:48:51,510 --> 01:48:57,699
please report bugs so we can get them

2035
01:48:54,579 --> 01:49:00,059
all of course I can't actually do this

2036
01:48:57,699 --> 01:49:00,059
can I

2037
01:49:06,859 --> 01:49:12,739
of course I can't even report the bug I

2038
01:49:09,109 --> 01:49:16,099
need to set like windbg or something as

2039
01:49:12,738 --> 01:49:21,408
my as my just-in-time - burger because

2040
01:49:16,099 --> 01:49:27,168
this thing's useless I need it to not be

2041
01:49:21,408 --> 01:49:31,698
so I can't capture the awesome so I

2042
01:49:27,168 --> 01:49:33,588
can't capture the crash since it got

2043
01:49:31,698 --> 01:49:37,098
sent to Microsoft I'm hoping that he can

2044
01:49:33,588 --> 01:49:38,658
get them from Microsoft but we need to

2045
01:49:37,099 --> 01:49:40,038
be able to save a mini dump which we

2046
01:49:38,658 --> 01:49:44,509
could do with windbag but of course

2047
01:49:40,038 --> 01:49:46,998
Visual Studio is is borked now so it it

2048
01:49:44,510 --> 01:49:49,579
screws with us I should set a to do two

2049
01:49:46,998 --> 01:49:51,260
like uninstall it and put windbag in

2050
01:49:49,578 --> 01:49:53,868
place for debug dumps just so we can

2051
01:49:51,260 --> 01:49:55,939
send remedy debug dumps to George which

2052
01:49:53,868 --> 01:50:02,378
we need to be able to do but at the

2053
01:49:55,939 --> 01:50:04,519
moment we can't because we couldn't

2054
01:50:02,378 --> 01:50:07,179
Visual Studio is the only other debugger

2055
01:50:04,519 --> 01:50:11,208
that's currently running on this machine

2056
01:50:07,179 --> 01:50:13,639
and so if remedy crashes it's the one

2057
01:50:11,208 --> 01:50:18,069
that's gonna get that that fault all

2058
01:50:13,639 --> 01:50:18,069
right so if I go ahead and run this now

2059
01:50:18,578 --> 01:50:26,299
I'm gonna go into that brain call

2060
01:50:22,448 --> 01:50:29,748
there's an acute brain zero I'm gonna

2061
01:50:26,300 --> 01:50:31,369
set a breakpoint down on that call and I

2062
01:50:29,748 --> 01:50:32,918
just want to see like what's going on

2063
01:50:31,368 --> 01:50:35,598
because I don't actually understand

2064
01:50:32,918 --> 01:50:41,618
what's happening so now we should get

2065
01:50:35,599 --> 01:50:41,619
one and

2066
01:50:47,349 --> 01:50:53,078
oh but you know what the weight is not

2067
01:50:51,550 --> 01:50:56,079
set to anything I wonder if that's just

2068
01:50:53,078 --> 01:51:02,019
again like our matching system is so bad

2069
01:50:56,078 --> 01:51:04,259
right now maybe that's all it was so it

2070
01:51:02,020 --> 01:51:06,670
looks like actually so this may be fine

2071
01:51:04,260 --> 01:51:09,429
because I think we can say what the bug

2072
01:51:06,670 --> 01:51:12,310
is it looks like the bug is just if you

2073
01:51:09,429 --> 01:51:16,840
try to rebuild the executable while

2074
01:51:12,310 --> 01:51:27,420
remedies running still is that right

2075
01:51:16,840 --> 01:51:30,039
so here's remedy let me load kill

2076
01:51:27,420 --> 01:51:41,849
rebuild we should be fine

2077
01:51:30,039 --> 01:51:41,849
and we are but if instead I run here

2078
01:51:42,420 --> 01:51:49,940
rebuild no crash

2079
01:51:46,710 --> 01:51:59,340
let's get and break it to the bugger

2080
01:51:49,939 --> 01:51:59,339
[Music]

2081
01:51:59,649 --> 01:52:23,149
what was that called execute brain here

2082
01:52:09,979 --> 01:52:24,678
oh wait why is this not breaking so I

2083
01:52:23,149 --> 01:52:28,429
think there's some kind of problem with

2084
01:52:24,679 --> 01:52:33,230
loading like our hop loading let's break

2085
01:52:28,429 --> 01:52:35,599
it is that right yeah I think that's

2086
01:52:33,229 --> 01:52:38,988
what's happening and then in here like

2087
01:52:35,599 --> 01:52:40,760
if I rebuild looks like we were getting

2088
01:52:38,988 --> 01:52:41,988
a crash but now I can't repro it so

2089
01:52:40,760 --> 01:52:58,610
that's unfortunate opening that was a

2090
01:52:41,988 --> 01:53:00,379
repro well I'm not really sure how to

2091
01:52:58,609 --> 01:53:04,189
get that to read for hours hoping we

2092
01:53:00,380 --> 01:53:08,498
could I couldn't anyway let's go ahead

2093
01:53:04,189 --> 01:53:08,498
here and see if we can debug this part

2094
01:53:08,618 --> 01:53:14,479
so I'm gonna look and see what we get

2095
01:53:10,969 --> 01:53:18,670
back as a bloop ID so the problem is

2096
01:53:14,479 --> 01:53:21,678
it's not finding that sound right so

2097
01:53:18,670 --> 01:53:24,769
matching on the bloop there for whatever

2098
01:53:21,679 --> 01:53:27,649
reason we're not getting back any bloops

2099
01:53:24,769 --> 01:53:29,630
at all and so I'm just gonna try and

2100
01:53:27,649 --> 01:53:34,729
figure out why aren't we getting any

2101
01:53:29,630 --> 01:53:38,118
bloops back so if we go into get best

2102
01:53:34,729 --> 01:53:40,998
match asset here I'm gonna try and look

2103
01:53:38,118 --> 01:53:43,969
to see for each individual asset I'm

2104
01:53:40,998 --> 01:53:49,550
gonna try to figure out like what it why

2105
01:53:43,969 --> 01:53:52,239
can't actually find those so here's the

2106
01:53:49,550 --> 01:53:52,239
tag array

2107
01:53:55,139 --> 01:54:03,150
I don't know if we can tell this cat so

2108
01:53:59,399 --> 01:54:05,519
can we tell this to be like an asset

2109
01:54:03,149 --> 01:54:19,259
type tag so that we can see what the

2110
01:54:05,520 --> 01:54:22,010
name of it is so if I do now just look

2111
01:54:19,260 --> 01:54:22,010
like I do that yet

2112
01:54:26,039 --> 01:54:34,479
can you do this so it looks like you

2113
01:54:30,069 --> 01:54:35,590
can't cast to our types maybe that would

2114
01:54:34,479 --> 01:54:36,909
be a nice thing to have I know the

2115
01:54:35,590 --> 01:54:38,920
expression parser is supposed to have

2116
01:54:36,909 --> 01:54:40,809
been upgraded that might be a nice thing

2117
01:54:38,920 --> 01:54:45,850
to look for I don't know if X 13 pixels

2118
01:54:40,810 --> 01:54:49,000
is with us today he might not be I'll

2119
01:54:45,850 --> 01:54:50,500
see him on the chat so probably not but

2120
01:54:49,000 --> 01:54:52,239
that that would be another nice thing we

2121
01:54:50,500 --> 01:54:56,399
could send is it'd be nice to be able to

2122
01:54:52,239 --> 01:54:59,859
cast to an enum type so that we could

2123
01:54:56,399 --> 01:55:01,449
know what those were offhand so like

2124
01:54:59,859 --> 01:55:05,769
because otherwise you know I don't know

2125
01:55:01,449 --> 01:55:08,559
which one 74 is right you know which one

2126
01:55:05,770 --> 01:55:13,510
of these that that is I have no idea and

2127
01:55:08,560 --> 01:55:15,820
I'm assuming we can't do this right so

2128
01:55:13,510 --> 01:55:18,810
we'd have really no way of getting that

2129
01:55:15,819 --> 01:55:21,789
piece of information

2130
01:55:18,810 --> 01:55:23,580
unfortunately now what we can do is we

2131
01:55:21,789 --> 01:55:29,800
can look at the match vector though

2132
01:55:23,579 --> 01:55:33,340
right and if we pull that out we can

2133
01:55:29,800 --> 01:55:37,900
actually see like 68 is the one in

2134
01:55:33,340 --> 01:55:42,520
question so I guess that means 74 is the

2135
01:55:37,899 --> 01:55:48,089
channel right so 68 is the one we're

2136
01:55:42,520 --> 01:55:48,090
actually looking for here so let's see

2137
01:56:00,960 --> 01:56:15,850
looking for 68 ID is 8 what one two

2138
01:56:12,789 --> 01:56:17,920
three four five six seven eight

2139
01:56:15,850 --> 01:56:26,380
well that's just the basic category so

2140
01:56:17,920 --> 01:56:31,029
that's fine too 67 so 67 is almost what

2141
01:56:26,380 --> 01:56:32,560
we want that's that's the music right so

2142
01:56:31,029 --> 01:56:34,899
it's correct that that shouldn't match

2143
01:56:32,560 --> 01:56:42,280
we don't want it to to come back with

2144
01:56:34,899 --> 01:56:43,750
that so that's actually not one that we

2145
01:56:42,279 --> 01:56:46,659
would want to match there and I also

2146
01:56:43,750 --> 01:56:49,810
don't know so what is like the bet did

2147
01:56:46,659 --> 01:56:51,939
that didn't find anything right yeah

2148
01:56:49,810 --> 01:56:55,180
so now let's look at what we're looking

2149
01:56:51,939 --> 01:56:58,750
at we've got ID 74

2150
01:56:55,180 --> 01:57:02,200
so that's channel and that's variant

2151
01:56:58,750 --> 01:57:10,109
rather right so we don't really care

2152
01:57:02,199 --> 01:57:11,369
about that eight is the basic type 67 is

2153
01:57:10,109 --> 01:57:17,439
[Music]

2154
01:57:11,369 --> 01:57:19,210
title screen again oh right and it's

2155
01:57:17,439 --> 01:57:24,479
like sorry that was the channel index

2156
01:57:19,210 --> 01:57:27,279
yep okay yep yep so it looks like audio

2157
01:57:24,479 --> 01:57:31,239
it looks like they're just those assets

2158
01:57:27,279 --> 01:57:36,069
aren't here like they didn't get pulled

2159
01:57:31,239 --> 01:57:41,489
in for some reason and I don't know what

2160
01:57:36,069 --> 01:57:41,489
that reason would be so

2161
01:57:55,449 --> 01:58:10,539
if I look to have you are they in here

2162
01:58:12,488 --> 01:58:17,019
so they are not in here

2163
01:58:22,159 --> 01:58:26,769
so why aren't they in here

2164
01:58:33,960 --> 01:58:39,210
yeah they are definitely not in the base

2165
01:58:36,569 --> 01:58:40,769
game HSA so I think that's going to be

2166
01:58:39,210 --> 01:58:42,779
our job for tomorrow I'm not going to

2167
01:58:40,770 --> 01:58:44,460
bug that now but it looks like our sound

2168
01:58:42,779 --> 01:58:47,340
playback and streaming and stuff that's

2169
01:58:44,460 --> 01:58:48,659
all working fine for the moment so what

2170
01:58:47,340 --> 01:58:50,699
we need to do tomorrow is find out

2171
01:58:48,659 --> 01:58:52,380
what's wrong with our asset import that

2172
01:58:50,699 --> 01:58:54,720
it's not properly triggering on those

2173
01:58:52,380 --> 01:58:57,480
sounds in the hht that are not there

2174
01:58:54,720 --> 01:58:59,190
those are definitely in the hht unless

2175
01:58:57,479 --> 01:59:04,199
I'm mistaken maybe there's an if block

2176
01:58:59,189 --> 01:59:06,539
around the Mount think there is you can

2177
01:59:04,199 --> 01:59:10,260
see that these are commented out but

2178
01:59:06,539 --> 01:59:16,560
these aren't so all of those sounds are

2179
01:59:10,260 --> 01:59:20,039
in right and I assume that the sound

2180
01:59:16,560 --> 01:59:21,150
block is working properly now maybe I'll

2181
01:59:20,039 --> 01:59:22,380
check really quickly just to make sure

2182
01:59:21,149 --> 01:59:26,449
it's not something we can just fix right

2183
01:59:22,380 --> 01:59:29,640
now and then it's more Compton map but

2184
01:59:26,449 --> 01:59:31,979
maybe the sound as opposed to music

2185
01:59:29,640 --> 01:59:36,210
block isn't working so let's go into

2186
01:59:31,979 --> 01:59:38,489
import and let's search for sound so if

2187
01:59:36,210 --> 01:59:42,480
we look at the two of these things here

2188
01:59:38,489 --> 01:59:44,849
we've got they both do audio they both

2189
01:59:42,479 --> 01:59:48,289
use channel tags one looks in music and

2190
01:59:44,850 --> 01:59:50,400
is audio one looks in sound and is audio

2191
01:59:48,289 --> 01:59:52,470
so I don't think there should be an

2192
01:59:50,399 --> 01:59:55,349
issue there I can double check that

2193
01:59:52,470 --> 01:59:56,840
they're in the right place because it's

2194
01:59:55,350 --> 02:00:00,030
possible that they're just not there I

2195
01:59:56,840 --> 02:00:02,930
suppose but I don't think so so if I

2196
02:00:00,029 --> 02:00:06,719
look under sources in base game sound

2197
02:00:02,930 --> 02:00:10,260
there they all are right and I assume

2198
02:00:06,720 --> 02:00:14,039
that these are explicitly listed so loop

2199
02:00:10,260 --> 02:00:16,350
0 0 dot web right there it is so there

2200
02:00:14,039 --> 02:00:18,239
could still be I mean I don't know but

2201
02:00:16,350 --> 02:00:23,070
there could be like errors involved here

2202
02:00:18,239 --> 02:00:27,269
that I'm not aware of that I couldn't

2203
02:00:23,069 --> 02:00:30,199
tell you so that's that's something that

2204
02:00:27,270 --> 02:00:30,200
we guess we could look at

2205
02:00:34,960 --> 02:00:47,560
I guess I'm not sure we never really

2206
02:00:46,180 --> 02:00:50,280
looked at at what errors there might

2207
02:00:47,560 --> 02:00:50,280
have been in the import

2208
02:00:54,130 --> 02:01:05,750
[Music]

2209
02:00:58,969 --> 02:01:08,698
so turns out we have bugs in our hht

2210
02:01:05,750 --> 02:01:10,078
which I didn't know about should

2211
02:01:08,698 --> 02:01:15,569
probably make those errors harder to

2212
02:01:10,078 --> 02:01:17,739
ignore so what is the bug the bug is

2213
02:01:15,569 --> 02:01:20,858
that that's not a field

2214
02:01:17,739 --> 02:01:20,858
[Music]

2215
02:01:30,279 --> 02:01:34,960
[Music]

2216
02:01:42,079 --> 02:01:47,039
all right so now we're fine although I

2217
02:01:45,300 --> 02:01:53,690
don't know why attacked gets played

2218
02:01:47,039 --> 02:01:53,689
repeatedly there I don't know what the

2219
02:01:59,279 --> 02:02:05,250
I don't know what that how that value is

2220
02:02:02,699 --> 02:02:11,519
getting set repeatedly in such a fashion

2221
02:02:05,250 --> 02:02:12,569
because that's a little bit odd let's

2222
02:02:11,520 --> 02:02:14,730
take a look at that real quick

2223
02:02:12,569 --> 02:02:17,929
but anyway so that was all we really

2224
02:02:14,729 --> 02:02:20,759
needed there rhh tees

2225
02:02:17,930 --> 02:02:24,000
we're just buggy and our error reporting

2226
02:02:20,760 --> 02:02:25,770
told us that which was nice but yeah so

2227
02:02:24,000 --> 02:02:27,569
let's go ahead and just jump back in

2228
02:02:25,770 --> 02:02:31,500
real quickly I might as well just just

2229
02:02:27,569 --> 02:02:35,849
fix that one last thing so if I load

2230
02:02:31,500 --> 02:02:37,890
handmade hero and go to the brain so

2231
02:02:35,850 --> 02:02:39,090
what was happening with that I mean we

2232
02:02:37,890 --> 02:02:48,750
don't care about this this code is

2233
02:02:39,090 --> 02:02:52,110
garbage anyway but how is that getting

2234
02:02:48,750 --> 02:03:00,510
like controller action key should only

2235
02:02:52,109 --> 02:03:03,109
be down does that like not get cleared

2236
02:03:00,510 --> 02:03:03,110
or something

2237
02:03:13,279 --> 02:03:20,029
like how is that how is that constantly

2238
02:03:16,729 --> 02:03:20,750
calling through there am I missing

2239
02:03:20,029 --> 02:03:24,250
something

2240
02:03:20,750 --> 02:03:27,529
I could see it getting triggered

2241
02:03:24,250 --> 02:03:29,989
repeatedly and I think this was meant to

2242
02:03:27,529 --> 02:03:32,809
prevent that so the part where it says

2243
02:03:29,989 --> 02:03:38,000
if the movement mode of the glove is not

2244
02:03:32,810 --> 02:03:39,380
movement movement mode floating because

2245
02:03:38,000 --> 02:03:42,079
it's supposed to switch for it to

2246
02:03:39,380 --> 02:03:47,180
movement mode attack angle swipe here so

2247
02:03:42,079 --> 02:03:48,680
it shouldn't be able to right - it

2248
02:03:47,180 --> 02:03:50,210
should only be able to do that once that

2249
02:03:48,680 --> 02:03:53,570
you do that you should transition one

2250
02:03:50,210 --> 02:03:55,039
time right so I'm not really sure how

2251
02:03:53,569 --> 02:04:07,549
that's doing what it's doing

2252
02:03:55,039 --> 02:04:08,960
it seems broken but I'm not sure see so

2253
02:04:07,550 --> 02:04:11,029
I'm not sure what's going on there like

2254
02:04:08,960 --> 02:04:12,079
why is that is it just because it's too

2255
02:04:11,029 --> 02:04:17,889
fast or something

2256
02:04:12,079 --> 02:04:19,840
[Music]

2257
02:04:17,889 --> 02:04:22,750
like what happens with attack angle

2258
02:04:19,840 --> 02:04:31,588
swipe inside the enemy code

2259
02:04:22,750 --> 02:04:31,588
[Music]

2260
02:04:31,908 --> 02:04:33,969
you

2261
02:04:39,979 --> 02:04:49,459
I need to see what happens if we change

2262
02:04:42,050 --> 02:04:51,650
this DT to something lower that should

2263
02:04:49,460 --> 02:04:53,300
swing like really slowly right so this

2264
02:04:51,649 --> 02:04:55,639
is just kind of nuts right now like

2265
02:04:53,300 --> 02:04:57,469
something is very wrong when we coming

2266
02:04:55,640 --> 02:04:59,390
through through movement attack angles

2267
02:04:57,469 --> 02:05:01,760
swipe and it just doesn't seem like it's

2268
02:04:59,390 --> 02:05:04,900
actually setting that up for anything is

2269
02:05:01,760 --> 02:05:04,900
the glove

2270
02:05:07,100 --> 02:05:18,039
[Music]

2271
02:05:15,328 --> 02:05:20,609
Bart's love

2272
02:05:18,039 --> 02:05:22,960
[Music]

2273
02:05:20,609 --> 02:05:24,849
yeah I don't know I don't know why that

2274
02:05:22,960 --> 02:05:26,590
would be this is code that obviously

2275
02:05:24,850 --> 02:05:29,440
we're gonna be going through when we do

2276
02:05:26,590 --> 02:05:31,360
the actual gameplay stuff so this is

2277
02:05:29,439 --> 02:05:33,009
kind of meaningless and there's not or

2278
02:05:31,359 --> 02:05:35,170
real points in debugging it but it just

2279
02:05:33,010 --> 02:05:37,590
I always get annoyed when there's

2280
02:05:35,170 --> 02:05:37,590
something

2281
02:05:40,569 --> 02:05:46,328
oh I see I see

2282
02:05:43,220 --> 02:05:46,329
[Music]

2283
02:05:48,819 --> 02:05:54,099
so I think I understand what's going on

2284
02:05:51,458 --> 02:05:56,828
here so what happens is when they come

2285
02:05:54,099 --> 02:05:58,809
up here to the glove code we're checking

2286
02:05:56,828 --> 02:06:03,458
to see if the movement mode is movement

2287
02:05:58,809 --> 02:06:04,479
mode floating and if it's not we turn

2288
02:06:03,458 --> 02:06:06,519
off the attack

2289
02:06:04,479 --> 02:06:11,079
that means we're immediately going to

2290
02:06:06,519 --> 02:06:15,639
reset this value to floating which is

2291
02:06:11,078 --> 02:06:18,908
not what we wanted to do we only want to

2292
02:06:15,639 --> 02:06:23,248
do that if the in fact I I guess we

2293
02:06:18,908 --> 02:06:25,719
don't know that we ever want to do that

2294
02:06:23,248 --> 02:06:27,969
but we definitely don't want to do that

2295
02:06:25,719 --> 02:06:30,010
if the glove was doing something right

2296
02:06:27,969 --> 02:06:34,599
so I think what we really want to do

2297
02:06:30,010 --> 02:06:37,989
here is say that you know this at least

2298
02:06:34,599 --> 02:06:52,260
would have to be checked again so you

2299
02:06:37,988 --> 02:06:52,259
know what's the default movement mode so

2300
02:06:52,948 --> 02:07:03,068
looking at this I think this really just

2301
02:07:00,248 --> 02:07:05,378
wants to be this and this is not good

2302
02:07:03,069 --> 02:07:12,519
like I don't like this code at all so I

2303
02:07:05,378 --> 02:07:15,010
think it's you know there we go that's

2304
02:07:12,519 --> 02:07:22,949
more what we were looking for where's

2305
02:07:15,010 --> 02:07:26,639
that just going to be back to that loops

2306
02:07:22,948 --> 02:07:28,478
all right so now we can go to the QA

2307
02:07:26,639 --> 02:07:29,918
sorry I took a little longer than

2308
02:07:28,479 --> 02:07:32,369
necessary I just wanted to clean up some

2309
02:07:29,918 --> 02:07:32,368
of that stuff

2310
02:07:33,949 --> 02:07:39,769
so it doesn't look like that defaulted

2311
02:07:36,569 --> 02:07:46,469
to planted cuz now it's not floating

2312
02:07:39,770 --> 02:07:47,760
which is a little weird again this is a

2313
02:07:46,469 --> 02:07:50,969
hack we'll just do it this way I guess

2314
02:07:47,760 --> 02:07:54,480
for now I really wish I could send this

2315
02:07:50,969 --> 02:07:56,310
bug report it wasn't running so it looks

2316
02:07:54,479 --> 02:07:58,049
like it happens when I rebuild when it's

2317
02:07:56,310 --> 02:08:01,110
not running there's something weird

2318
02:07:58,050 --> 02:08:05,310
going on there maybe due to foul

2319
02:08:01,109 --> 02:08:33,179
reloading and I'm not I'm not sure

2320
02:08:05,310 --> 02:08:37,650
what's going on there why that goes out

2321
02:08:33,180 --> 02:08:40,909
so far that's a pretty nice little

2322
02:08:37,649 --> 02:08:40,909
[Music]

2323
02:08:45,170 --> 02:08:48,920
probably have to count attacks

2324
02:08:51,210 --> 02:09:05,449
alright so sound is basically ready to

2325
02:08:54,238 --> 02:09:05,449
go yeah let's go to Q&amp;A

2326
02:09:39,859 --> 02:09:46,239
and the LRU copy path you may have

2327
02:09:42,738 --> 02:09:49,819
gotten a set result thank you

2328
02:09:46,238 --> 02:09:52,878
let me check that out we have to like we

2329
02:09:49,819 --> 02:09:54,078
haven't tested the actual buffer getting

2330
02:09:52,878 --> 02:09:57,198
to the end of the buffer because we

2331
02:09:54,078 --> 02:09:58,908
don't have enough sound yet for that so

2332
02:09:57,198 --> 02:10:00,799
all of that code could be completely

2333
02:09:58,908 --> 02:10:02,958
wrong there's not very much of it

2334
02:10:00,800 --> 02:10:04,668
thankfully so it's won't be hard to

2335
02:10:02,958 --> 02:10:08,779
debug when we get there I don't think

2336
02:10:04,668 --> 02:10:10,279
but it's definitely not actually tested

2337
02:10:08,779 --> 02:10:12,529
right because we haven't we haven't

2338
02:10:10,279 --> 02:10:14,088
wrapped the buffer or at least I don't

2339
02:10:12,529 --> 02:10:20,179
see how we could possibly have wrapped

2340
02:10:14,088 --> 02:10:25,779
the buffer all right so that's in play

2341
02:10:20,179 --> 02:10:29,149
sound or sorry get sound samples so

2342
02:10:25,779 --> 02:10:32,958
let's see ah yeah you're right so in

2343
02:10:29,149 --> 02:10:34,338
here we get the destination out but

2344
02:10:32,958 --> 02:10:38,358
really probably we should just call that

2345
02:10:34,338 --> 02:10:40,038
result right because that's what it

2346
02:10:38,359 --> 02:10:54,609
actually is and that that seems a little

2347
02:10:40,038 --> 02:10:54,608
better to me that seems good

2348
02:10:55,279 --> 02:10:59,849
started a new job that has a gargantuan

2349
02:10:57,479 --> 02:11:01,589
codebase in the millions of lines of

2350
02:10:59,849 --> 02:11:03,360
code and it's very hard to follow what's

2351
02:11:01,590 --> 02:11:05,130
going on do you have any general advice

2352
02:11:03,359 --> 02:11:06,719
or approach to gain an understanding of

2353
02:11:05,130 --> 02:11:09,989
what's going on in files that are part

2354
02:11:06,719 --> 02:11:11,368
of very large code bases also thanks

2355
02:11:09,988 --> 02:11:12,808
it's in large parts to handmade hero

2356
02:11:11,368 --> 02:11:14,630
that I'm actually on the job well that's

2357
02:11:12,809 --> 02:11:19,739
great news

2358
02:11:14,630 --> 02:11:30,300
congratulations for starters I guess

2359
02:11:19,738 --> 02:11:33,569
what I would say there is you probably

2360
02:11:30,300 --> 02:11:37,199
want two things

2361
02:11:33,569 --> 02:11:38,729
I mean first off when you have millions

2362
02:11:37,198 --> 02:11:43,558
of lines of code code bases they're

2363
02:11:38,729 --> 02:11:45,299
usually garbage code bases right there

2364
02:11:43,559 --> 02:11:47,159
aren't like good code bases that are

2365
02:11:45,300 --> 02:11:49,409
millions of lines of code for kind of

2366
02:11:47,158 --> 02:11:52,618
obvious reasons

2367
02:11:49,408 --> 02:11:56,250
it's very hard to scale like you

2368
02:11:52,618 --> 02:11:58,170
probably you're unlikely to even be able

2369
02:11:56,250 --> 02:12:00,569
to get enough good programmers to

2370
02:11:58,170 --> 02:12:02,788
generate millions of lines of code to

2371
02:12:00,569 --> 02:12:06,359
ever have any prayer of those lines of

2372
02:12:02,788 --> 02:12:08,069
codes being good you know so when you go

2373
02:12:06,359 --> 02:12:09,569
into a millions of lines of code code

2374
02:12:08,069 --> 02:12:11,399
base although there might be some parts

2375
02:12:09,569 --> 02:12:16,380
of it that are saying most of it will be

2376
02:12:11,399 --> 02:12:20,518
insane and so you have to go in prepared

2377
02:12:16,380 --> 02:12:24,690
for that and you have to be able to take

2378
02:12:20,519 --> 02:12:25,860
it you know bit by bit what I would

2379
02:12:24,689 --> 02:12:28,948
recommend is you need a couple things

2380
02:12:25,859 --> 02:12:31,229
one make sure you got a debugger that

2381
02:12:28,948 --> 02:12:35,158
you're comfortable with running and

2382
02:12:31,229 --> 02:12:37,738
spend time in it stepping through and

2383
02:12:35,158 --> 02:12:40,319
stepping into the disaster that is that

2384
02:12:37,738 --> 02:12:42,029
million line of code code base is very

2385
02:12:40,319 --> 02:12:45,658
important for you to get your you know

2386
02:12:42,029 --> 02:12:47,759
your head around it because you kinda

2387
02:12:45,658 --> 02:12:49,288
need to see the execution flow and the

2388
02:12:47,760 --> 02:12:53,849
debugger is kind of like a way to walk

2389
02:12:49,288 --> 02:12:55,559
you through that you know so you

2390
02:12:53,849 --> 02:13:00,269
definitely want a good debugger with a

2391
02:12:55,559 --> 02:13:01,889
good debug display you know and to walk

2392
02:13:00,269 --> 02:13:03,809
through it and be able to like so you

2393
02:13:01,889 --> 02:13:05,788
can see and spend time looking at code

2394
02:13:03,809 --> 02:13:07,649
that you're not even trying to bug just

2395
02:13:05,788 --> 02:13:12,359
use the debugger to help you figure out

2396
02:13:07,649 --> 02:13:15,419
what's happening and number two is try

2397
02:13:12,359 --> 02:13:18,418
to use or switch to an editor that

2398
02:13:15,418 --> 02:13:22,679
allows you to quickly jump to things by

2399
02:13:18,418 --> 02:13:24,689
name because if you're using an editor

2400
02:13:22,679 --> 02:13:26,788
that like for example in for coder right

2401
02:13:24,689 --> 02:13:30,899
if I don't know what get sound buffer

2402
02:13:26,788 --> 02:13:34,109
memory is I can just jump to it really

2403
02:13:30,899 --> 02:13:36,239
quickly you know and I can also do stuff

2404
02:13:34,109 --> 02:13:38,219
like just type in sound and see all of

2405
02:13:36,238 --> 02:13:43,109
the functions and types that have to do

2406
02:13:38,219 --> 02:13:45,328
with sound get an editor or something

2407
02:13:43,109 --> 02:13:47,908
that can do that so whatever editor

2408
02:13:45,328 --> 02:13:53,849
you're using if it doesn't have good

2409
02:13:47,908 --> 02:13:56,728
source inspection you want to switch

2410
02:13:53,849 --> 02:13:59,369
because that's gonna be really important

2411
02:13:56,729 --> 02:14:02,760
Visual Studio has like a browse info

2412
02:13:59,368 --> 02:14:04,168
thing if you can get that working where

2413
02:14:02,760 --> 02:14:08,070
you can like right-click on something

2414
02:14:04,168 --> 02:14:09,538
and say go to definition use that if

2415
02:14:08,069 --> 02:14:11,279
that's what you're using if you're using

2416
02:14:09,538 --> 02:14:13,908
an external editor make sure it's one

2417
02:14:11,279 --> 02:14:16,590
that has source indexing built into it

2418
02:14:13,908 --> 02:14:19,228
if it doesn't just switch to one that

2419
02:14:16,590 --> 02:14:20,458
does that's gonna be really important

2420
02:14:19,229 --> 02:14:22,559
because you don't want to have to

2421
02:14:20,458 --> 02:14:26,488
constantly be doing like greps of your

2422
02:14:22,559 --> 02:14:28,979
code base it just slows you down so get

2423
02:14:26,488 --> 02:14:33,928
something that can do like indexing well

2424
02:14:28,979 --> 02:14:36,149
write other than those two things it's

2425
02:14:33,929 --> 02:14:39,179
just a slog I mean there's not really

2426
02:14:36,149 --> 02:14:41,099
much I can recommend if you have a

2427
02:14:39,179 --> 02:14:42,809
chance to have lunch with one of the

2428
02:14:41,099 --> 02:14:44,639
like senior programmers or something ask

2429
02:14:42,809 --> 02:14:46,760
them to sort of give you a little

2430
02:14:44,639 --> 02:14:49,649
high-level overview that might help to

2431
02:14:46,760 --> 02:14:51,208
of different systems you know and over

2432
02:14:49,649 --> 02:14:52,619
time you can start to see oh here's how

2433
02:14:51,208 --> 02:14:53,998
those programmers are thinking about it

2434
02:14:52,618 --> 02:15:00,118
when they created this unholy

2435
02:14:53,998 --> 02:15:06,599
monstrosity you know that's about all I

2436
02:15:00,118 --> 02:15:12,089
can can say is there a name for that

2437
02:15:06,599 --> 02:15:19,729
type of buffer um you mean the one I did

2438
02:15:12,090 --> 02:15:19,729
for sound I don't think so

2439
02:15:22,829 --> 02:15:26,680
like there's nothing like super

2440
02:15:24,939 --> 02:15:30,939
revolutionary in it I mean fundamentally

2441
02:15:26,680 --> 02:15:37,780
it's just a circular buffer with that

2442
02:15:30,939 --> 02:15:39,909
LRU with copying out of the LRU region

2443
02:15:37,779 --> 02:15:44,199
or the copping out of the eviction

2444
02:15:39,909 --> 02:15:47,579
region to create an LRU scheme so it's

2445
02:15:44,199 --> 02:15:49,960
not I don't know that anyone ever a

2446
02:15:47,579 --> 02:15:52,510
tried that before but they might have

2447
02:15:49,960 --> 02:15:55,840
and B if they did I don't know that they

2448
02:15:52,510 --> 02:16:00,030
would have bothered to name it I'm not

2449
02:15:55,840 --> 02:16:00,029
even sure what I would name it a

2450
02:16:06,779 --> 02:16:12,000
circular buffer with copy forwarding

2451
02:16:15,300 --> 02:16:21,900
eviction preventing circular buffer I

2452
02:16:18,810 --> 02:16:21,900
don't know

2453
02:16:34,090 --> 02:16:48,130
John Carmack likes rust is rust better

2454
02:16:37,988 --> 02:16:58,988
than C++ so I don't know I don't know

2455
02:16:48,129 --> 02:17:01,778
enough rust you know I don't think John

2456
02:16:58,988 --> 02:17:03,398
Carmack's programming ideas align with

2457
02:17:01,779 --> 02:17:04,119
mine particularly well at least not

2458
02:17:03,398 --> 02:17:08,349
these days

2459
02:17:04,119 --> 02:17:11,078
so I don't know that you know if he

2460
02:17:08,349 --> 02:17:13,658
thinks rest is better than C++ and if he

2461
02:17:11,078 --> 02:17:15,459
generally thought exactly the same as I

2462
02:17:13,658 --> 02:17:16,959
do all the time then I might say well I

2463
02:17:15,459 --> 02:17:18,368
guess I don't need to look at it I'll

2464
02:17:16,959 --> 02:17:21,039
just assume that that's the conclusion I

2465
02:17:18,369 --> 02:17:22,300
would come to generally speaking I most

2466
02:17:21,040 --> 02:17:24,699
of the things that I see him talk about

2467
02:17:22,299 --> 02:17:25,959
these days I don't either don't really

2468
02:17:24,699 --> 02:17:28,300
tend to agree with or they tend to be

2469
02:17:25,959 --> 02:17:30,608
sort of it as a different direction so I

2470
02:17:28,299 --> 02:17:32,379
would say I don't know that that piece

2471
02:17:30,609 --> 02:17:33,790
of data is probably only useful for

2472
02:17:32,379 --> 02:17:38,138
people who are thinking more in line

2473
02:17:33,790 --> 02:17:41,260
with what he's thinking so I don't know

2474
02:17:38,138 --> 02:17:43,000
I you know one thing you could ask him

2475
02:17:41,260 --> 02:17:45,880
is like what are all the things he

2476
02:17:43,000 --> 02:17:47,920
thinks are better about it right what I

2477
02:17:45,879 --> 02:17:52,108
will say is that C++ is a lousy language

2478
02:17:47,920 --> 02:17:52,109
so it's not hard to be better than it

2479
02:17:52,738 --> 02:18:00,398
you know might be another way to say it

2480
02:17:54,818 --> 02:18:03,010
so you know most languages are probably

2481
02:18:00,398 --> 02:18:05,828
better than C++ if they don't require a

2482
02:18:03,010 --> 02:18:07,359
garbage collection and allow you to do

2483
02:18:05,828 --> 02:18:10,090
low-level pointer arithmetic they're

2484
02:18:07,359 --> 02:18:12,040
probably fine and they would hopefully

2485
02:18:10,090 --> 02:18:14,710
be better than C++ go see us less comic

2486
02:18:12,040 --> 02:18:17,769
the worst case but most languages don't

2487
02:18:14,709 --> 02:18:18,789
do those things so you know I'm assuming

2488
02:18:17,769 --> 02:18:20,978
that one of the reason people always

2489
02:18:18,790 --> 02:18:23,139
think about rust is because maybe it's

2490
02:18:20,978 --> 02:18:24,368
one of the few languages that actually

2491
02:18:23,138 --> 02:18:28,299
allows you to do those things but I

2492
02:18:24,369 --> 02:18:29,590
don't know but yeah if John Carmack has

2493
02:18:28,299 --> 02:18:31,028
supposed to like a bunch of reasons he

2494
02:18:29,590 --> 02:18:32,859
likes rust that might be a better way to

2495
02:18:31,029 --> 02:18:35,908
look at it like see if you agree with

2496
02:18:32,859 --> 02:18:35,908
those things you know

2497
02:18:40,679 --> 02:18:45,429
on interview I was given a debugging

2498
02:18:42,879 --> 02:18:46,509
task on a new piece of code this company

2499
02:18:45,429 --> 02:18:48,189
was actually generous enough to provide

2500
02:18:46,510 --> 02:18:49,659
feedback on for instance I would have

2501
02:18:48,189 --> 02:18:51,370
done better if I had to bugged more

2502
02:18:49,659 --> 02:18:54,159
systematically do you have any tips on

2503
02:18:51,370 --> 02:18:55,990
better debugging practices um well

2504
02:18:54,159 --> 02:18:57,728
you've seen how I do bugs so I don't

2505
02:18:55,989 --> 02:19:02,619
have tips really beyond what I show on

2506
02:18:57,728 --> 02:19:04,599
the stream but you know if since I

2507
02:19:02,620 --> 02:19:07,389
didn't see what you were doing I can't

2508
02:19:04,599 --> 02:19:11,319
really comment on it you know what I

2509
02:19:07,388 --> 02:19:12,759
mean if I'd seen you debug maybe I would

2510
02:19:11,319 --> 02:19:14,739
have some thoughts I'd be like oh yeah I

2511
02:19:12,760 --> 02:19:16,540
see you could have if you had first

2512
02:19:14,739 --> 02:19:17,949
eliminated this as a source of problems

2513
02:19:16,540 --> 02:19:20,189
then you wouldn't have had to do this

2514
02:19:17,950 --> 02:19:20,189
other thing

2515
02:19:33,290 --> 02:19:39,939
why can't we use the GF to p-8a a fine

2516
02:19:36,920 --> 02:19:42,439
inverse QB instruction all the time I

2517
02:19:39,939 --> 02:19:45,439
don't even know what that instruction is

2518
02:19:42,439 --> 02:19:46,818
is that an actual instruction it looks

2519
02:19:45,439 --> 02:19:48,920
like an actual instruction meaning the

2520
02:19:46,818 --> 02:19:52,600
construction of the instruction looks

2521
02:19:48,920 --> 02:19:52,600
about right I'm I'm curious

2522
02:20:04,729 --> 02:20:11,329
[Laughter]

2523
02:20:08,329 --> 02:20:11,329
awesome

2524
02:20:15,318 --> 02:20:25,500
now that's instruction Galois field

2525
02:20:20,068 --> 02:20:27,629
affine transformation inverse computes

2526
02:20:25,500 --> 02:20:34,859
the inverse affine transformation in the

2527
02:20:27,629 --> 02:20:36,509
finite field GF 2 to the 8th the inverse

2528
02:20:34,859 --> 02:20:37,318
of each byte is given in the following

2529
02:20:36,510 --> 02:20:46,859
table

2530
02:20:37,318 --> 02:20:51,629
I have absolutely no idea what that does

2531
02:20:46,859 --> 02:20:57,000
I tried to read Galois stream one time

2532
02:20:51,629 --> 02:21:02,969
and I like didn't get past like chapter

2533
02:20:57,000 --> 02:21:05,430
5 I think I so if you want me to tell

2534
02:21:02,969 --> 02:21:10,289
you what a Galois field is I am NOT

2535
02:21:05,430 --> 02:21:12,119
gonna be able to do it what I would say

2536
02:21:10,290 --> 02:21:14,609
is I'm guessing this must be for

2537
02:21:12,119 --> 02:21:19,560
encryption right I mean is there some

2538
02:21:14,609 --> 02:21:20,658
other use for a Galois field what would

2539
02:21:19,559 --> 02:21:23,519
you do with it

2540
02:21:20,658 --> 02:21:26,180
I'm assuming it's it's only really there

2541
02:21:23,520 --> 02:21:26,180
for cryptography

2542
02:21:46,459 --> 02:21:51,420
wait

2543
02:21:49,050 --> 02:21:55,199
the finite field of PN elements is

2544
02:21:51,421 --> 02:21:57,931
denoted GFP the N and is also called the

2545
02:21:55,200 --> 02:22:01,530
Galois field in honor of the founder of

2546
02:21:57,931 --> 02:22:03,721
the field every scale law ok GF P where

2547
02:22:01,530 --> 02:22:08,659
P is a prime number is simply the ring

2548
02:22:03,720 --> 02:22:08,659
of integers modulo P

2549
02:22:14,219 --> 02:22:20,420
that sounds just incredibly simple

2550
02:22:17,850 --> 02:22:20,420
though

2551
02:22:27,420 --> 02:22:32,430
I think I don't understand that sentence

2552
02:22:30,059 --> 02:22:37,170
properly cuz the way that doesn't sound

2553
02:22:32,430 --> 02:22:40,889
right this is what I was thinking of by

2554
02:22:37,170 --> 02:22:43,829
the way so GF 2 to the 8th for the

2555
02:22:40,889 --> 02:22:46,648
Rendell cipher or wait that's I

2556
02:22:43,829 --> 02:22:55,978
pronounce it rhyme doll I think is how

2557
02:22:46,648 --> 02:23:00,260
you pronounce it so this is the one that

2558
02:22:55,978 --> 02:23:02,849
they said they were doing right in here

2559
02:23:00,260 --> 02:23:07,889
they're saying GF 2 to the 8th right

2560
02:23:02,850 --> 02:23:12,029
which is which is this right here so

2561
02:23:07,889 --> 02:23:15,769
it's 8 X + that's all right X 8 plus X 4

2562
02:23:12,029 --> 02:23:15,770
plus X 3 plus X plus 1

2563
02:23:34,379 --> 02:23:38,180
I'd have to read this in more detail

2564
02:23:40,149 --> 02:23:45,279
so I think I don't really know this part

2565
02:23:42,729 --> 02:23:48,549
right the inverse affine transformation

2566
02:23:45,280 --> 02:23:52,989
part this is why it would have been good

2567
02:23:48,549 --> 02:23:54,909
to get through that entire book that is

2568
02:23:52,989 --> 02:23:58,500
a really crazy long name for an

2569
02:23:54,909 --> 02:24:02,549
instruction though like Wow

2570
02:23:58,500 --> 02:24:02,549
so how many of these do they have

2571
02:24:05,969 --> 02:24:13,600
they've got Galois field multiplied by

2572
02:24:09,729 --> 02:24:17,939
its what do they use these for besides

2573
02:24:13,601 --> 02:24:17,940
AES or is it only a yes

2574
02:24:59,700 --> 02:25:03,960
after reading about on after reading

2575
02:25:02,159 --> 02:25:05,430
here about on your website what does it

2576
02:25:03,959 --> 02:25:06,029
mean to be in gaming research and

2577
02:25:05,430 --> 02:25:07,110
development

2578
02:25:06,030 --> 02:25:08,610
what's your company's bread-and-butter

2579
02:25:07,110 --> 02:25:11,370
are you basically a consultant for other

2580
02:25:08,610 --> 02:25:14,520
game companies no not really

2581
02:25:11,370 --> 02:25:20,220
what I mean by that is that we don't so

2582
02:25:14,520 --> 02:25:22,800
a game development company is a company

2583
02:25:20,219 --> 02:25:25,409
that strictly just produces a game of

2584
02:25:22,799 --> 02:25:30,478
the forum that we already know how to do

2585
02:25:25,409 --> 02:25:37,978
right so you know for example maybe you

2586
02:25:30,478 --> 02:25:39,510
want to make a battle royale game so you

2587
02:25:37,978 --> 02:25:41,670
know probably you download the Unreal

2588
02:25:39,510 --> 02:25:44,100
Engine and you put some art assets in it

2589
02:25:41,670 --> 02:25:46,228
and you implement some code for like

2590
02:25:44,100 --> 02:25:49,439
whatever the gameplay mechanics are and

2591
02:25:46,228 --> 02:25:51,329
you know there's there's the game or if

2592
02:25:49,439 --> 02:25:53,100
you were really ambitious you make your

2593
02:25:51,329 --> 02:25:54,600
own engine but it's basically just kind

2594
02:25:53,100 --> 02:25:56,130
of like the Unreal Engine or something

2595
02:25:54,600 --> 02:26:01,170
and then you ship that and that's your

2596
02:25:56,129 --> 02:26:03,029
game right so not at no point in that

2597
02:26:01,170 --> 02:26:05,069
process were you trying to solve like an

2598
02:26:03,030 --> 02:26:07,409
unsolved problem or a problem that was

2599
02:26:05,069 --> 02:26:09,869
considered extremely hard or not super

2600
02:26:07,409 --> 02:26:14,309
well understood you're just shipping a

2601
02:26:09,870 --> 02:26:16,920
game now that's pretty hard so saying

2602
02:26:14,309 --> 02:26:20,939
just ship a game is making it sound

2603
02:26:16,920 --> 02:26:23,460
easier than it is but you're not really

2604
02:26:20,939 --> 02:26:25,800
trying to do anything new you're just

2605
02:26:23,459 --> 02:26:27,679
trying to ship something that we already

2606
02:26:25,799 --> 02:26:31,590
understand how to do with a different

2607
02:26:27,680 --> 02:26:34,530
spin on it right so you know maybe it's

2608
02:26:31,590 --> 02:26:37,079
because our battle royale game has giant

2609
02:26:34,530 --> 02:26:38,760
robots in it or something and yours

2610
02:26:37,079 --> 02:26:40,590
doesn't and so ours it's different but

2611
02:26:38,760 --> 02:26:43,110
other than that it's exactly the same

2612
02:26:40,590 --> 02:26:45,899
game that you've already seen in terms

2613
02:26:43,110 --> 02:26:50,280
of the engine really that you've seen a

2614
02:26:45,899 --> 02:26:52,079
million times before right so when I say

2615
02:26:50,280 --> 02:26:54,120
we're research and development as

2616
02:26:52,079 --> 02:26:57,478
opposed to just development what that

2617
02:26:54,120 --> 02:27:00,420
means is we really will only be shipping

2618
02:26:57,478 --> 02:27:03,209
games that have some pretty new thing in

2619
02:27:00,420 --> 02:27:05,460
them right so there's something that

2620
02:27:03,209 --> 02:27:09,449
there is no like you cannot clone the

2621
02:27:05,459 --> 02:27:11,389
game by buying components on the Unity

2622
02:27:09,450 --> 02:27:14,630
like you know

2623
02:27:11,389 --> 02:27:16,639
plug-in store or something it just isn't

2624
02:27:14,629 --> 02:27:18,859
possible like you would need special

2625
02:27:16,639 --> 02:27:20,869
technology that only we have in order to

2626
02:27:18,860 --> 02:27:23,960
clone the game so you would either have

2627
02:27:20,870 --> 02:27:27,620
to build a clone of the technology we're

2628
02:27:23,959 --> 02:27:29,539
building or just you can't make our game

2629
02:27:27,620 --> 02:27:31,579
right you have to make some crappy

2630
02:27:29,540 --> 02:27:34,640
version that doesn't have the stuff in

2631
02:27:31,579 --> 02:27:36,530
it that that's unique to ours so for our

2632
02:27:34,639 --> 02:27:38,420
first game which is 1935 that we're

2633
02:27:36,530 --> 02:27:40,250
working on right now it's got an

2634
02:27:38,420 --> 02:27:41,239
interactive story engine that's

2635
02:27:40,250 --> 02:27:43,370
completely different from anything

2636
02:27:41,239 --> 02:27:45,590
you've ever seen before in many ways and

2637
02:27:43,370 --> 02:27:48,440
it would be completely impossible to

2638
02:27:45,590 --> 02:27:50,360
clone without that you could make a

2639
02:27:48,440 --> 02:27:52,610
crappy version where the stories are

2640
02:27:50,360 --> 02:27:54,050
lousy or that's like a branching

2641
02:27:52,610 --> 02:27:55,430
narrative or something that tries to

2642
02:27:54,049 --> 02:27:58,719
kind of look like our game but it

2643
02:27:55,430 --> 02:28:00,920
wouldn't be anything like our game right

2644
02:27:58,719 --> 02:28:03,920
so that's what research and development

2645
02:28:00,920 --> 02:28:05,629
is it it means that there's new

2646
02:28:03,920 --> 02:28:09,521
components to the games when they ship

2647
02:28:05,629 --> 02:28:12,349
that literally no one has but us right

2648
02:28:09,521 --> 02:28:13,730
and those things can be really big let

2649
02:28:12,350 --> 02:28:16,489
the interactive story thing is pretty

2650
02:28:13,729 --> 02:28:17,930
big or sometimes they might be smaller

2651
02:28:16,489 --> 02:28:19,459
like for our next title we might do

2652
02:28:17,930 --> 02:28:23,420
something smaller that's more of a

2653
02:28:19,459 --> 02:28:24,979
artistic R&amp;D but I would say that this

2654
02:28:23,420 --> 02:28:34,549
is kind of similar in a lot of ways to

2655
02:28:24,979 --> 02:28:37,699
for example the early like the like the

2656
02:28:34,549 --> 02:28:41,060
early in software development right like

2657
02:28:37,700 --> 02:28:43,820
when they came out with doom like nobody

2658
02:28:41,060 --> 02:28:46,190
had anything that could do that right it

2659
02:28:43,819 --> 02:28:48,500
was like a new tech development and

2660
02:28:46,190 --> 02:28:52,130
people had to go clone what they did a

2661
02:28:48,500 --> 02:28:56,569
lot of people couldn't I think at least

2662
02:28:52,129 --> 02:28:57,739
like maybe one person maybe did but a

2663
02:28:56,569 --> 02:29:01,670
lot of people just had to license it

2664
02:28:57,739 --> 02:29:03,949
right because just nobody had that when

2665
02:29:01,670 --> 02:29:08,750
they came out with quake nobody had that

2666
02:29:03,950 --> 02:29:10,521
and then that was mostly the end of it

2667
02:29:08,750 --> 02:29:12,530
they they hadn't they never really did

2668
02:29:10,521 --> 02:29:15,230
anything after that that was something

2669
02:29:12,530 --> 02:29:19,790
pretty far beyond what people had but

2670
02:29:15,229 --> 02:29:22,189
that was two in a row you might argue

2671
02:29:19,790 --> 02:29:22,690
Wolfenstein was 2 but that depends on

2672
02:29:22,190 --> 02:29:25,420
how you

2673
02:29:22,690 --> 02:29:27,970
do it but definitely doom and quake mmm

2674
02:29:25,420 --> 02:29:30,729
you know it was just plain new

2675
02:29:27,969 --> 02:29:35,500
technology that no one else had and so

2676
02:29:30,729 --> 02:29:38,640
we aim to do that basically and so we're

2677
02:29:35,500 --> 02:29:40,959
trying to do that to a certain extent

2678
02:29:38,640 --> 02:29:43,119
and when we shut the game we try to have

2679
02:29:40,959 --> 02:29:46,299
an argument for why there's something

2680
02:29:43,120 --> 02:29:47,800
new in it that's you know an actual

2681
02:29:46,299 --> 02:29:50,159
technological achievement that you can't

2682
02:29:47,799 --> 02:29:50,159
just clone

2683
02:29:57,559 --> 02:30:01,430
and so I'll just close on last one

2684
02:29:59,869 --> 02:30:02,810
regarding story engines what sort of

2685
02:30:01,430 --> 02:30:05,949
advancements are in yours if you can

2686
02:30:02,809 --> 02:30:08,898
mention anything what does it achieve

2687
02:30:05,949 --> 02:30:11,270
yeah we won't really ever be talking

2688
02:30:08,898 --> 02:30:14,299
about it probably you'll see the game

2689
02:30:11,270 --> 02:30:15,738
when it comes out or rather you'll

2690
02:30:14,299 --> 02:30:17,750
probably see it earlier than that right

2691
02:30:15,738 --> 02:30:21,529
you'll see some you know demo footage

2692
02:30:17,750 --> 02:30:24,318
and stuff like this and it should be

2693
02:30:21,529 --> 02:30:28,130
pretty obvious at least in terms of what

2694
02:30:24,318 --> 02:30:30,528
the quality bar is and also the level of

2695
02:30:28,129 --> 02:30:32,028
interactivity which should both be

2696
02:30:30,529 --> 02:30:35,000
dramatically higher than what you've

2697
02:30:32,029 --> 02:30:35,988
seen before but we it's not gonna be

2698
02:30:35,000 --> 02:30:36,469
something that's ever gonna be talked

2699
02:30:35,988 --> 02:30:40,209
about

2700
02:30:36,469 --> 02:30:47,019
it's private tech and will remain so

2701
02:30:40,209 --> 02:30:47,019
sense all right close it down

2702
02:30:51,359 --> 02:30:55,029
all right thank you everyone for joining

2703
02:30:53,439 --> 02:30:56,350
me for the episode a handmade hero it's

2704
02:30:55,029 --> 02:30:58,060
been a pleasure coding with you as

2705
02:30:56,350 --> 02:31:00,250
always if you would like to follow along

2706
02:30:58,059 --> 02:31:01,809
the series at home you can always peer

2707
02:31:00,250 --> 02:31:03,670
to the game on Hamming here at work it

2708
02:31:01,809 --> 02:31:06,369
comes to the source code so you can

2709
02:31:03,670 --> 02:31:09,939
experiment with it maybe you would like

2710
02:31:06,370 --> 02:31:13,479
to go into the code and think about like

2711
02:31:09,939 --> 02:31:16,000
a good exercise to do now that we've got

2712
02:31:13,478 --> 02:31:19,599
the sound going is we may want to put in

2713
02:31:16,000 --> 02:31:22,478
protection or have a theory about how we

2714
02:31:19,600 --> 02:31:24,279
would prevent sound skipping in the case

2715
02:31:22,478 --> 02:31:25,239
where we can't hit our frame rate now I

2716
02:31:24,279 --> 02:31:26,260
don't really ever want to be in a

2717
02:31:25,239 --> 02:31:29,109
situation where we're not hitting our

2718
02:31:26,260 --> 02:31:31,359
frame rate so I'm not sure how much I

2719
02:31:29,109 --> 02:31:33,159
really want to do that but it sometimes

2720
02:31:31,359 --> 02:31:35,439
helps to just have a way to do that just

2721
02:31:33,159 --> 02:31:36,639
in case so that's something to think

2722
02:31:35,439 --> 02:31:37,659
about and you could play around with

2723
02:31:36,639 --> 02:31:40,239
that and think about how we might

2724
02:31:37,659 --> 02:31:44,619
accomplish that I'll be back tomorrow

2725
02:31:40,239 --> 02:31:46,449
for some more look at problem the audio

2726
02:31:44,620 --> 02:31:48,790
stuff we probably go through and clean

2727
02:31:46,450 --> 02:31:50,170
some stuff up maybe look it's I felt

2728
02:31:48,790 --> 02:31:51,670
like there was some clicking in there we

2729
02:31:50,170 --> 02:31:53,620
want to try and simplify the mixer a

2730
02:31:51,670 --> 02:31:54,850
little bit so I think we should just

2731
02:31:53,620 --> 02:31:56,979
made me do a little bit of audio cleanup

2732
02:31:54,850 --> 02:32:00,239
now that we've got it working I think

2733
02:31:56,978 --> 02:32:02,379
that would be a good thing for us to try

2734
02:32:00,239 --> 02:32:04,239
that's about it I'll be back here

2735
02:32:02,379 --> 02:32:05,619
tomorrow same time same place until then

2736
02:32:04,239 --> 02:32:09,299
have fun programming everyone and I'll

2737
02:32:05,620 --> 02:32:09,300
see you on the Internet to use everybody

