1
00:00:01,459 --> 00:00:05,669
hello everyone and welcome to handmade

2
00:00:03,509 --> 00:00:09,539
Hero show recode a complete game live on

3
00:00:05,669 --> 00:00:11,849
stream we finished up last week with all

4
00:00:09,539 --> 00:00:13,709
of the code in place but we haven't had

5
00:00:11,849 --> 00:00:15,539
a chance to really work through it and

6
00:00:13,710 --> 00:00:17,880
make sure that we've actually got

7
00:00:15,539 --> 00:00:19,589
anything working correctly so we've

8
00:00:17,879 --> 00:00:20,549
definitely got a bunch of debugging work

9
00:00:19,589 --> 00:00:23,160
to do this weekend

10
00:00:20,550 --> 00:00:25,589
and when I say debugging work I kind of

11
00:00:23,160 --> 00:00:27,599
mean two things one I mean like the

12
00:00:25,589 --> 00:00:30,329
actual act of debugging to fix problems

13
00:00:27,599 --> 00:00:32,250
in the code but also because we've done

14
00:00:30,329 --> 00:00:33,689
such a wide swath of stuff like we

15
00:00:32,250 --> 00:00:36,238
basically completely replace the Ray

16
00:00:33,689 --> 00:00:38,699
tracer and how it works almost

17
00:00:36,238 --> 00:00:42,269
completely like every last bit of it is

18
00:00:38,700 --> 00:00:43,890
different now we also kind of want to

19
00:00:42,270 --> 00:00:46,070
spend a little bit more time stepping

20
00:00:43,890 --> 00:00:49,739
through it just for our own like

21
00:00:46,070 --> 00:00:51,299
educational purposes when you write a

22
00:00:49,738 --> 00:00:52,738
bunch of code like that and you're like

23
00:00:51,299 --> 00:00:54,718
okay here so each piece is going to work

24
00:00:52,738 --> 00:00:56,218
and you do a whole replacement and now

25
00:00:54,719 --> 00:00:58,770
you've got different things happening at

26
00:00:56,219 --> 00:01:01,739
each stage of the process that you had

27
00:00:58,770 --> 00:01:03,840
then what you had originally it's pretty

28
00:01:01,738 --> 00:01:05,308
easy to miss a few things or to think

29
00:01:03,840 --> 00:01:06,570
something's working one way but it's

30
00:01:05,308 --> 00:01:08,069
actually not working that way and it's

31
00:01:06,569 --> 00:01:09,269
working another way and you may have

32
00:01:08,069 --> 00:01:10,889
forgotten especially when you're doing

33
00:01:09,269 --> 00:01:13,709
stuff like when we are where it's every

34
00:01:10,890 --> 00:01:15,719
week we program for like you know four

35
00:01:13,709 --> 00:01:19,109
hours or something that's it's not like

36
00:01:15,719 --> 00:01:20,489
we did this all in one day right and so

37
00:01:19,109 --> 00:01:22,469
what we really need to do is we need to

38
00:01:20,489 --> 00:01:24,959
make sure that a we understand that

39
00:01:22,469 --> 00:01:26,340
everything's happening that that we

40
00:01:24,959 --> 00:01:28,709
understand how everything's happening

41
00:01:26,340 --> 00:01:31,409
and we're not like missing some crucial

42
00:01:28,709 --> 00:01:32,969
things or failed to take advantage of

43
00:01:31,409 --> 00:01:34,350
certain synergy that would have been

44
00:01:32,969 --> 00:01:36,328
like brought about by these changes that

45
00:01:34,349 --> 00:01:37,589
we can then leverage in other parts of

46
00:01:36,328 --> 00:01:38,879
the code because we didn't really think

47
00:01:37,590 --> 00:01:40,200
of it you know or whatever because we

48
00:01:38,879 --> 00:01:43,140
weren't paying attention to that part at

49
00:01:40,200 --> 00:01:46,978
that particular moment and then we also

50
00:01:43,140 --> 00:01:49,349
need to get the basic flow correct so

51
00:01:46,978 --> 00:01:51,090
any bugs that are happening because we

52
00:01:49,349 --> 00:01:53,339
just like you know we put some lot of

53
00:01:51,090 --> 00:01:55,109
this code is very performance critical

54
00:01:53,340 --> 00:01:56,609
and it's very like TWiki right it's like

55
00:01:55,109 --> 00:01:59,489
okay we're doing all these crazy bit

56
00:01:56,609 --> 00:02:00,780
manipulation things and we're trying to

57
00:01:59,489 --> 00:02:02,968
make everything run as efficiently as

58
00:02:00,780 --> 00:02:05,189
possible so everything is a little bit

59
00:02:02,968 --> 00:02:07,828
delicate as a result it's it's not as

60
00:02:05,188 --> 00:02:10,079
simple as it could be it's it's more

61
00:02:07,828 --> 00:02:12,750
complex due to the performance concerns

62
00:02:10,080 --> 00:02:14,370
so everything's got to be happening wide

63
00:02:12,750 --> 00:02:16,020
and we have all kinds of like things

64
00:02:14,370 --> 00:02:17,759
where we're trying to minimize a number

65
00:02:16,020 --> 00:02:19,080
of operations we're doing so we're not

66
00:02:17,759 --> 00:02:21,419
doing things in the most verbose way

67
00:02:19,080 --> 00:02:23,730
possible and so on so all of those

68
00:02:21,419 --> 00:02:27,349
things also kind of combine right

69
00:02:23,729 --> 00:02:27,349
I don't know what

70
00:02:28,830 --> 00:02:35,340
so we basically need to do all of that

71
00:02:32,099 --> 00:02:39,150
process so let's go ahead and and see if

72
00:02:35,340 --> 00:02:41,310
we can't see if we can't get started on

73
00:02:39,150 --> 00:02:45,080
that process today and just sort like

74
00:02:41,310 --> 00:02:48,120
get through a little bit of that that's

75
00:02:45,080 --> 00:02:50,310
sort of slow process of just like making

76
00:02:48,120 --> 00:02:53,219
everything work properly and making sure

77
00:02:50,310 --> 00:02:55,530
that we understand it so let's start

78
00:02:53,219 --> 00:02:57,750
with the walkthrough of how the code is

79
00:02:55,530 --> 00:03:00,060
now supposed to work which again is a

80
00:02:57,750 --> 00:03:04,169
little bit different than it was working

81
00:03:00,060 --> 00:03:08,759
before so what we intend to do now is in

82
00:03:04,169 --> 00:03:10,619
addition to building a texture like two

83
00:03:08,759 --> 00:03:13,349
textures really but as far as the

84
00:03:10,620 --> 00:03:15,900
raycast is concerned we're talking

85
00:03:13,349 --> 00:03:17,609
primarily about one particular texture

86
00:03:15,900 --> 00:03:19,409
which is the diffuse texture that we

87
00:03:17,610 --> 00:03:21,239
sample from although we do write back

88
00:03:19,409 --> 00:03:24,959
into the specular one so both are in

89
00:03:21,239 --> 00:03:27,659
play so in addition to the voxels that

90
00:03:24,959 --> 00:03:29,789
these textures represent because each

91
00:03:27,659 --> 00:03:32,969
texture represents a voxel ization of

92
00:03:29,789 --> 00:03:35,129
the world I believe it's like 24 by 16

93
00:03:32,969 --> 00:03:38,519
by 16 or something like this right now I

94
00:03:35,129 --> 00:03:41,370
don't actually remember what it is but

95
00:03:38,519 --> 00:03:44,069
it's yeah 24 by 16 by 16 so if I take it

96
00:03:41,370 --> 00:03:47,280
back I do remember what it is I guess so

97
00:03:44,069 --> 00:03:48,959
each one of those textures represents a

98
00:03:47,280 --> 00:03:52,049
voxel ization of the world and each

99
00:03:48,959 --> 00:03:54,150
place in that voxel records an

100
00:03:52,049 --> 00:03:55,530
octahedral map that is the lighting

101
00:03:54,150 --> 00:03:58,140
either the specular or the diffuse

102
00:03:55,530 --> 00:03:59,819
lighting the specular is what we

103
00:03:58,139 --> 00:04:02,189
actually compute because specular is

104
00:03:59,819 --> 00:04:04,049
what happens along Ray's the diffuse is

105
00:04:02,189 --> 00:04:05,780
something we generate from the specular

106
00:04:04,049 --> 00:04:08,250
and that's just a way of basically

107
00:04:05,780 --> 00:04:10,169
convolving the specular map into

108
00:04:08,250 --> 00:04:12,209
something that has the sort of cosine

109
00:04:10,169 --> 00:04:16,129
reflectance fall-off that you would

110
00:04:12,209 --> 00:04:16,129
expect from a diffuse surface

111
00:04:20,319 --> 00:04:27,230
so when we get to that point we then say

112
00:04:25,850 --> 00:04:29,570
all right we need to be able to trace

113
00:04:27,230 --> 00:04:31,970
rays and so what we're doing here is

114
00:04:29,569 --> 00:04:36,560
we're saying we need to go through all

115
00:04:31,970 --> 00:04:40,880
of the actual all the actual locations

116
00:04:36,560 --> 00:04:43,639
in our voxel we need to cast rays out

117
00:04:40,879 --> 00:04:46,339
along the directions of the octahedral

118
00:04:43,639 --> 00:04:49,069
map and because we want to cover the

119
00:04:46,339 --> 00:04:50,810
whole area of the octahedral map since

120
00:04:49,069 --> 00:04:52,639
we don't really have a way of ray

121
00:04:50,810 --> 00:04:55,490
casting into the world and collecting

122
00:04:52,639 --> 00:04:57,379
all the light in an actual like frustum

123
00:04:55,490 --> 00:04:59,840
that would be implied by being able to

124
00:04:57,379 --> 00:05:02,269
cast out from the octahedral map what we

125
00:04:59,839 --> 00:05:04,669
do is we point sample it with rays and

126
00:05:02,269 --> 00:05:07,399
each frame we cast a different direction

127
00:05:04,670 --> 00:05:10,310
out of each place in the octahedral map

128
00:05:07,399 --> 00:05:14,419
so that we hope we cover the map in in

129
00:05:10,310 --> 00:05:17,780
general so this is the loop that does

130
00:05:14,420 --> 00:05:20,449
one slice a Y Z slice and we distribute

131
00:05:17,779 --> 00:05:22,639
X slices which of which there are 24

132
00:05:20,449 --> 00:05:24,680
across all the threads we have so you

133
00:05:22,639 --> 00:05:27,409
know in a perfect world we'd have 24

134
00:05:24,680 --> 00:05:29,360
threads one each one doing a different

135
00:05:27,410 --> 00:05:31,550
slice and if you happen to run this on

136
00:05:29,360 --> 00:05:33,800
like a thread ripper or something that's

137
00:05:31,550 --> 00:05:36,379
exactly what would happen but on most

138
00:05:33,800 --> 00:05:37,699
machines especially like Intel machines

139
00:05:36,379 --> 00:05:39,769
where they have a really hard time

140
00:05:37,699 --> 00:05:44,680
getting the core count up because they

141
00:05:39,769 --> 00:05:47,269
didn't go to multiple chips on one

142
00:05:44,680 --> 00:05:49,970
substrate approaches early enough you

143
00:05:47,269 --> 00:05:52,669
only have say eight cores to deal with

144
00:05:49,970 --> 00:05:54,320
most the time sometimes only four and so

145
00:05:52,670 --> 00:05:56,300
what we're actually doing is we're

146
00:05:54,319 --> 00:06:02,569
probably having each thread do several

147
00:05:56,300 --> 00:06:05,120
of these X slices in series so a thread

148
00:06:02,569 --> 00:06:06,920
will basically wake up at the lighting

149
00:06:05,120 --> 00:06:09,379
time it will start chewing through the

150
00:06:06,920 --> 00:06:11,449
list of work units that it needs to

151
00:06:09,379 --> 00:06:13,370
process in each work unit will be one of

152
00:06:11,449 --> 00:06:15,349
these slices it's an entire slice it

153
00:06:13,370 --> 00:06:16,699
rather than a single voxel cell just

154
00:06:15,350 --> 00:06:19,160
because we don't really want to spend a

155
00:06:16,699 --> 00:06:22,399
huge amount of time banging on that

156
00:06:19,160 --> 00:06:24,530
queue it's a single queue and you can't

157
00:06:22,399 --> 00:06:28,069
really have lots of threads banging on a

158
00:06:24,529 --> 00:06:30,559
single queue often if you do you will

159
00:06:28,069 --> 00:06:32,209
simply lock up the threads waiting for

160
00:06:30,560 --> 00:06:36,228
the queue mutex or

161
00:06:32,209 --> 00:06:37,909
the cash line if it's lock-free so again

162
00:06:36,228 --> 00:06:39,859
it's just worth thinking about this as

163
00:06:37,910 --> 00:06:44,569
you get more into multi-threaded

164
00:06:39,860 --> 00:06:45,939
programming it's just worth

165
00:06:44,569 --> 00:06:48,800
understanding what's going on there

166
00:06:45,939 --> 00:06:50,029
there's a single work cube and all of

167
00:06:48,800 --> 00:06:52,520
the threads just pull the work off that

168
00:06:50,029 --> 00:06:55,068
queue that's a model that only works

169
00:06:52,519 --> 00:06:57,529
when the work is heavyweight if there

170
00:06:55,069 --> 00:06:59,120
isn't a lot of work to do on each work

171
00:06:57,529 --> 00:07:01,609
unit that you pull off this would be a

172
00:06:59,120 --> 00:07:05,780
horrible design because everyone would

173
00:07:01,610 --> 00:07:11,330
just lock up in order waiting for that

174
00:07:05,779 --> 00:07:13,728
cache line to become unexcusable you

175
00:07:11,329 --> 00:07:15,709
would be doing for that so that's why we

176
00:07:13,728 --> 00:07:17,659
have a fairly large work unit if we

177
00:07:15,709 --> 00:07:19,250
wanted to start to generate a more

178
00:07:17,660 --> 00:07:22,789
granular approach to something like this

179
00:07:19,250 --> 00:07:24,199
we would do it differently so as we come

180
00:07:22,788 --> 00:07:26,839
through here we're pulling off entire

181
00:07:24,199 --> 00:07:29,569
slices and what we need to do here is we

182
00:07:26,839 --> 00:07:33,619
then need to say okay we're actually in

183
00:07:29,569 --> 00:07:35,329
our grid is this particular starting

184
00:07:33,620 --> 00:07:36,680
point because we're going to cast out of

185
00:07:35,329 --> 00:07:37,969
the center of these cells and we need to

186
00:07:36,680 --> 00:07:39,379
know where the starting point is so we

187
00:07:37,970 --> 00:07:41,270
create this thing called the initial

188
00:07:39,379 --> 00:07:44,810
grid index and what that is is it says

189
00:07:41,269 --> 00:07:47,209
all right in addition to the voxel

190
00:07:44,810 --> 00:07:49,579
itself which is the thing that's all

191
00:07:47,209 --> 00:07:51,468
right the textures themselves which is

192
00:07:49,579 --> 00:07:53,959
what we're writing and retrieving light

193
00:07:51,468 --> 00:07:56,060
data from we also in gretta have a

194
00:07:53,959 --> 00:07:57,288
spatial partition and because of

195
00:07:56,060 --> 00:07:58,788
constraints on the way that we're

196
00:07:57,288 --> 00:08:00,168
walking the spatial partition and the

197
00:07:58,788 --> 00:08:03,050
fact that we don't want to go outside of

198
00:08:00,168 --> 00:08:04,250
it not so much because of fetching out

199
00:08:03,050 --> 00:08:06,169
of bounds because we could easily

200
00:08:04,250 --> 00:08:07,639
protect against that but more just

201
00:08:06,168 --> 00:08:10,819
because we'd get incorrect results when

202
00:08:07,639 --> 00:08:12,079
we wrap around the voxel what we've done

203
00:08:10,819 --> 00:08:13,819
instead is we've said let's make a

204
00:08:12,079 --> 00:08:17,859
slightly larger voxel and this slightly

205
00:08:13,819 --> 00:08:21,379
larger voxel will have a one voxel cell

206
00:08:17,860 --> 00:08:23,180
apron around the outside that is just

207
00:08:21,379 --> 00:08:27,408
there to show you that you've walked

208
00:08:23,180 --> 00:08:30,639
outside it and that way our actual voxel

209
00:08:27,408 --> 00:08:34,929
casting routine can just go ahead and

210
00:08:30,639 --> 00:08:37,370
have us you know a simple exit criteria

211
00:08:34,929 --> 00:08:39,978
so what we do is we create an initial

212
00:08:37,370 --> 00:08:42,349
grid index that says okay let's take the

213
00:08:39,979 --> 00:08:44,449
voxel dimension with the apron which is

214
00:08:42,349 --> 00:08:45,649
that sort of extra piece that goes

215
00:08:44,448 --> 00:08:48,019
around it

216
00:08:45,649 --> 00:08:49,610
and let's go ahead and see where we'd be

217
00:08:48,019 --> 00:08:52,850
in there and of course we have to have

218
00:08:49,610 --> 00:08:55,639
plus one on each of our coordinates

219
00:08:52,850 --> 00:08:58,308
because this thing has a 1 wide apron so

220
00:08:55,639 --> 00:09:00,769
if you want to be in a specific tie a

221
00:08:58,308 --> 00:09:02,448
specific cell it's going to be plus one

222
00:09:00,769 --> 00:09:04,789
in all the dimensions to account for

223
00:09:02,448 --> 00:09:06,438
that apron as compared to the one that

224
00:09:04,789 --> 00:09:08,299
doesn't have the apron which is the way

225
00:09:06,438 --> 00:09:10,009
we're storing our textures and of course

226
00:09:08,299 --> 00:09:14,088
the textures don't need an apron because

227
00:09:10,009 --> 00:09:15,949
they never its size to the screen such

228
00:09:14,089 --> 00:09:18,290
that you never sample outside it anyway

229
00:09:15,948 --> 00:09:19,818
so we don't really have to worry about

230
00:09:18,289 --> 00:09:20,928
that and if you were to sample outside

231
00:09:19,818 --> 00:09:22,759
it we wouldn't care you could just

232
00:09:20,928 --> 00:09:27,019
return whatever you know the closest one

233
00:09:22,759 --> 00:09:28,730
was and it would be fine so we have that

234
00:09:27,019 --> 00:09:30,678
set up and we create this initial grid

235
00:09:28,730 --> 00:09:32,509
index we then go through and say alright

236
00:09:30,678 --> 00:09:34,220
there's a should compute here which is

237
00:09:32,509 --> 00:09:36,499
if we want to turn on sort of like a

238
00:09:34,220 --> 00:09:39,019
checkerboard based tiling to reduce the

239
00:09:36,499 --> 00:09:40,819
computation cost by further reducing the

240
00:09:39,019 --> 00:09:42,980
frequency of updates that we do we can

241
00:09:40,818 --> 00:09:44,269
we don't have that enabled right now but

242
00:09:42,980 --> 00:09:46,278
you know we may want to enable that

243
00:09:44,269 --> 00:09:49,068
especially on slower machines machines

244
00:09:46,278 --> 00:09:50,120
with less cores things like that so we

245
00:09:49,068 --> 00:09:51,349
leave that in there for now because

246
00:09:50,120 --> 00:09:54,169
we're not sure what we want to do with

247
00:09:51,350 --> 00:09:56,870
it we then go through and we have some

248
00:09:54,169 --> 00:09:58,490
test code here that we can do like this

249
00:09:56,870 --> 00:10:00,078
test sphere and so on that we were using

250
00:09:58,490 --> 00:10:00,948
for testing lighting but really we don't

251
00:10:00,078 --> 00:10:03,019
do that anymore

252
00:10:00,948 --> 00:10:04,609
it's just sort of a this digital remain

253
00:10:03,019 --> 00:10:06,110
that we don't maybe want to pull out

254
00:10:04,610 --> 00:10:07,550
just yet because we're still not quite

255
00:10:06,110 --> 00:10:09,409
sure we've got everything now down but

256
00:10:07,549 --> 00:10:10,789
we've got the tester in there but what

257
00:10:09,409 --> 00:10:13,789
we're really calling mostly is the full

258
00:10:10,789 --> 00:10:16,099
cast call the full cast calls what does

259
00:10:13,789 --> 00:10:18,078
the the actual ray tracing for a given

260
00:10:16,100 --> 00:10:20,178
octahedral cell so that's what we're

261
00:10:18,078 --> 00:10:22,549
going to be looking at primarily we then

262
00:10:20,178 --> 00:10:24,799
go on to this diffuse tile bit here

263
00:10:22,549 --> 00:10:26,599
where we take the diffuse texture and we

264
00:10:24,799 --> 00:10:29,419
write to it so you can see here we're

265
00:10:26,600 --> 00:10:31,428
writing to the diffuse texture and this

266
00:10:29,419 --> 00:10:33,019
is our single update step it's the only

267
00:10:31,428 --> 00:10:35,058
time we actually update the diffuse

268
00:10:33,019 --> 00:10:36,470
texture normally what we're doing is

269
00:10:35,058 --> 00:10:38,899
we're actually updating the speck

270
00:10:36,470 --> 00:10:40,639
texture because the specular texture is

271
00:10:38,899 --> 00:10:42,019
what records the result of raycast

272
00:10:40,639 --> 00:10:44,089
it's the thing that records the thing

273
00:10:42,019 --> 00:10:45,649
you see directly out in a line and

274
00:10:44,089 --> 00:10:47,329
that's what we can determine with ray

275
00:10:45,649 --> 00:10:49,458
casting we really have no idea when we

276
00:10:47,328 --> 00:10:51,428
do ray casting that doesn't give us any

277
00:10:49,458 --> 00:10:54,018
information about the diffuse

278
00:10:51,428 --> 00:10:56,620
reflectance in an area because diffuse

279
00:10:54,019 --> 00:10:59,240
reflectance is going to be blurred right

280
00:10:56,620 --> 00:11:01,310
it's going to be a summation of lots of

281
00:10:59,240 --> 00:11:02,990
specular casts so we compute the

282
00:11:01,309 --> 00:11:05,719
specular casts and then we produce a

283
00:11:02,990 --> 00:11:08,720
diffuse map by averaging specs the

284
00:11:05,720 --> 00:11:10,220
specular cast that we've done and we

285
00:11:08,720 --> 00:11:11,930
average those using cosine weighted

286
00:11:10,220 --> 00:11:13,700
fall-off and that's what this routine

287
00:11:11,929 --> 00:11:15,919
well it's not really a team this is what

288
00:11:13,700 --> 00:11:17,720
this loop here will do we then fill the

289
00:11:15,919 --> 00:11:19,099
borders and those are just there to make

290
00:11:17,720 --> 00:11:21,170
sure that we don't have wrapping

291
00:11:19,100 --> 00:11:22,730
artifacts so this is so that when you

292
00:11:21,169 --> 00:11:24,528
sample towards the edge of the

293
00:11:22,730 --> 00:11:26,300
octahedral map it properly samples

294
00:11:24,528 --> 00:11:28,309
basically around back to the other side

295
00:11:26,299 --> 00:11:29,899
which is what you would want it to do

296
00:11:28,309 --> 00:11:32,329
because you know this is supposed to

297
00:11:29,899 --> 00:11:34,549
cover a spherical region it doesn't have

298
00:11:32,330 --> 00:11:38,120
any actual seams so that's to hide those

299
00:11:34,549 --> 00:11:40,250
seams so we don't really care about this

300
00:11:38,120 --> 00:11:41,659
part of the code right now in fact we

301
00:11:40,250 --> 00:11:43,580
may change the way this part of the code

302
00:11:41,659 --> 00:11:45,409
works later it's totally separate from

303
00:11:43,580 --> 00:11:49,730
the raycasting part but that's what

304
00:11:45,409 --> 00:11:51,919
happens here right so all of that is

305
00:11:49,730 --> 00:11:54,649
probably working properly the only part

306
00:11:51,919 --> 00:11:56,149
that we've changed recently is this

307
00:11:54,649 --> 00:11:59,120
initial grid index is something that we

308
00:11:56,149 --> 00:12:00,649
added that could easily be a mistake or

309
00:11:59,120 --> 00:12:02,720
something wrong happening there but the

310
00:12:00,649 --> 00:12:04,339
rest of this code is the same for

311
00:12:02,720 --> 00:12:07,129
regardless of which raycast

312
00:12:04,339 --> 00:12:08,690
transport you tend to use so and we know

313
00:12:07,129 --> 00:12:10,519
it was working fine with the old one or

314
00:12:08,690 --> 00:12:12,649
at least it seemed to be working fine

315
00:12:10,519 --> 00:12:14,000
meaning we there were no visible errors

316
00:12:12,649 --> 00:12:15,470
with it so we wouldn't expect to be

317
00:12:14,000 --> 00:12:17,480
visible errors with this one either

318
00:12:15,470 --> 00:12:19,459
if the raycast is working properly so

319
00:12:17,480 --> 00:12:20,990
really what we're looking at although

320
00:12:19,458 --> 00:12:22,669
this initial grid index is something

321
00:12:20,990 --> 00:12:24,289
that we do have to take a look at and

322
00:12:22,669 --> 00:12:27,500
make sure that we're working with

323
00:12:24,289 --> 00:12:29,299
properly other than that one line

324
00:12:27,500 --> 00:12:30,649
everything else in this function could

325
00:12:29,299 --> 00:12:33,229
probably assume to be working well

326
00:12:30,649 --> 00:12:34,700
enough at the moment because we know

327
00:12:33,230 --> 00:12:36,920
that it worked okay with the previous

328
00:12:34,700 --> 00:12:38,778
ray transport so it's really the full

329
00:12:36,919 --> 00:12:40,519
cast routine that now we have to

330
00:12:38,778 --> 00:12:43,039
scrutinize and there's two parts to that

331
00:12:40,519 --> 00:12:45,949
there's what it calls because it calls

332
00:12:43,039 --> 00:12:47,449
this ray cast function and we have the

333
00:12:45,950 --> 00:12:49,670
new grid ray cast function which is what

334
00:12:47,450 --> 00:12:51,620
we replace that with and then we also

335
00:12:49,669 --> 00:12:53,778
have the full cast itself now again the

336
00:12:51,620 --> 00:12:55,009
full cast itself is not that suspicious

337
00:12:53,778 --> 00:13:00,078
because we know that it really doesn't

338
00:12:55,009 --> 00:13:02,828
do anything in particular but we do have

339
00:13:00,078 --> 00:13:06,379
to pay a little bit of attention to how

340
00:13:02,828 --> 00:13:07,309
it's working because we we have to make

341
00:13:06,379 --> 00:13:09,588
sure that things get passed through

342
00:13:07,309 --> 00:13:11,629
properly right so we have the initial

343
00:13:09,589 --> 00:13:12,920
grid index here and it eventually calls

344
00:13:11,629 --> 00:13:14,570
ray cast to do its work and

345
00:13:12,919 --> 00:13:15,979
can see that we've got initial grid

346
00:13:14,570 --> 00:13:18,050
index here getting passed through

347
00:13:15,980 --> 00:13:20,360
everything else gets passed the same

348
00:13:18,049 --> 00:13:22,219
regardless of whether you're using the

349
00:13:20,360 --> 00:13:24,110
old ray cast or the new one and in

350
00:13:22,220 --> 00:13:26,389
general this particular function will

351
00:13:24,110 --> 00:13:28,129
probably want to be modified in the

352
00:13:26,389 --> 00:13:29,629
future as we collapse things down we've

353
00:13:28,129 --> 00:13:31,129
got too many layers of cruft at this

354
00:13:29,629 --> 00:13:33,049
point and they're mostly there because

355
00:13:31,129 --> 00:13:34,189
of the experimentation so at some point

356
00:13:33,049 --> 00:13:35,870
we're going to want to collapse these

357
00:13:34,190 --> 00:13:37,699
down now is not the time to do that

358
00:13:35,870 --> 00:13:40,820
because we want to leave all of this

359
00:13:37,698 --> 00:13:42,409
sort of goop in place as we sort of work

360
00:13:40,820 --> 00:13:44,329
with different systems until we settle

361
00:13:42,409 --> 00:13:45,769
on exactly what we're doing hopefully

362
00:13:44,328 --> 00:13:48,109
that will be soon because hopefully our

363
00:13:45,769 --> 00:13:49,459
grid read caster is actually good and we

364
00:13:48,110 --> 00:13:50,720
can just standardize on it and then be

365
00:13:49,458 --> 00:13:51,679
done with it but you know you never

366
00:13:50,720 --> 00:13:53,028
really know when you're doing

367
00:13:51,679 --> 00:13:54,500
experimental code and trying to figure

368
00:13:53,028 --> 00:13:56,659
out the best way to do something you

369
00:13:54,500 --> 00:13:57,889
don't know ahead of time which answer

370
00:13:56,659 --> 00:14:00,649
you're going to end up with so you can't

371
00:13:57,889 --> 00:14:02,448
remove cruft too early because you don't

372
00:14:00,649 --> 00:14:05,000
know what is cruft and what is necessary

373
00:14:02,448 --> 00:14:08,299
that's just a basic problem with

374
00:14:05,000 --> 00:14:09,860
experimental code so if we take a look

375
00:14:08,299 --> 00:14:11,629
at the raycast call here you can see

376
00:14:09,860 --> 00:14:13,850
what we're doing is normally in the

377
00:14:11,629 --> 00:14:16,669
raycast call we actually kind of do the

378
00:14:13,850 --> 00:14:18,500
the work here and this was our old ray

379
00:14:16,669 --> 00:14:20,509
caster that's sitting here in place we

380
00:14:18,500 --> 00:14:22,639
actually had multiple versions of it

381
00:14:20,509 --> 00:14:25,879
that we tried we tried a KD stack one we

382
00:14:22,639 --> 00:14:28,490
tried a bak stack one and then right

383
00:14:25,879 --> 00:14:31,309
here we've got sort of if zeroing of

384
00:14:28,490 --> 00:14:33,230
them out and you can see that we sort of

385
00:14:31,309 --> 00:14:35,750
have a different version that will

386
00:14:33,230 --> 00:14:37,879
actually do a grid ray cast instead and

387
00:14:35,750 --> 00:14:40,578
so this is actually the code that we're

388
00:14:37,879 --> 00:14:44,088
running now and all of this code we

389
00:14:40,578 --> 00:14:46,039
expect or I should say we hope we will

390
00:14:44,089 --> 00:14:48,440
just delete meaning all of that code

391
00:14:46,039 --> 00:14:50,750
that was experimental us trying to get a

392
00:14:48,440 --> 00:14:52,399
good ray caster you know hopefully we'll

393
00:14:50,750 --> 00:14:56,208
just be able to settle on just this one

394
00:14:52,399 --> 00:14:59,659
here and we will just weld this grid ray

395
00:14:56,208 --> 00:15:01,219
cast into place at that point but again

396
00:14:59,659 --> 00:15:02,719
we don't know that that's just you know

397
00:15:01,220 --> 00:15:04,399
that's just our hope that's what we're

398
00:15:02,720 --> 00:15:06,980
hoping will happen as we test out the

399
00:15:04,399 --> 00:15:09,259
various algorithms so what you can see

400
00:15:06,980 --> 00:15:11,720
in here is what we do is we basically

401
00:15:09,259 --> 00:15:13,610
initialize the transfer PBS value and

402
00:15:11,720 --> 00:15:16,490
that's basically the photons per second

403
00:15:13,610 --> 00:15:18,050
which is a rough sort of arbitrary

404
00:15:16,490 --> 00:15:19,759
quantity we've defined as the thing

405
00:15:18,049 --> 00:15:22,129
we're gonna have to measure our light so

406
00:15:19,759 --> 00:15:25,679
it's basically a measure of the rate at

407
00:15:22,129 --> 00:15:27,879
which light is going through the system

408
00:15:25,679 --> 00:15:28,509
inside here where we have the grid

409
00:15:27,879 --> 00:15:31,059
raycast

410
00:15:28,509 --> 00:15:33,399
we are saying look please write to the

411
00:15:31,059 --> 00:15:35,559
transfer PPS for this so tell us you

412
00:15:33,399 --> 00:15:37,679
know what you think we are actually

413
00:15:35,559 --> 00:15:39,819
getting in terms of red green and blue

414
00:15:37,679 --> 00:15:42,250
wavelength photons coming back through

415
00:15:39,820 --> 00:15:44,530
here and then we pass in you know the

416
00:15:42,250 --> 00:15:46,480
basics we pass in where the origin is

417
00:15:44,529 --> 00:15:49,089
for the race or where we're casting from

418
00:15:46,480 --> 00:15:51,700
what direction we're casting what grid

419
00:15:49,090 --> 00:15:54,610
index we believe that to be in the table

420
00:15:51,700 --> 00:16:00,850
and then a table that we look up which

421
00:15:54,610 --> 00:16:08,019
says how to walk through the actual how

422
00:16:00,850 --> 00:16:09,909
to walk through the the grid as we go in

423
00:16:08,019 --> 00:16:11,559
the actual grid vidcaster itself I think

424
00:16:09,909 --> 00:16:13,319
we did a pretty good job of keeping it

425
00:16:11,559 --> 00:16:16,059
simple there's not a lot of code here

426
00:16:13,320 --> 00:16:17,920
and so what ends up happening to do a

427
00:16:16,059 --> 00:16:20,529
single array cast there's some

428
00:16:17,919 --> 00:16:23,319
initializations to record the values

429
00:16:20,529 --> 00:16:25,659
that are in question that we need to use

430
00:16:23,320 --> 00:16:27,550
to actually process a hit there's a

431
00:16:25,659 --> 00:16:29,199
shuffle table that we use which is just

432
00:16:27,549 --> 00:16:39,669
what we load constants from and we use

433
00:16:29,200 --> 00:16:44,470
this to actually do broadcasts to we use

434
00:16:39,669 --> 00:16:47,500
this to do broadcasts oh right right

435
00:16:44,470 --> 00:16:49,000
okay that's like but why and then I was

436
00:16:47,500 --> 00:16:52,419
like right because they're dynamic so

437
00:16:49,000 --> 00:16:54,190
one of the problems that you have when

438
00:16:52,419 --> 00:16:57,759
you're writing SSE code it's kind of a

439
00:16:54,190 --> 00:17:00,280
bummer is just that when you do an SSE

440
00:16:57,759 --> 00:17:04,799
dispatch you don't really have any way

441
00:17:00,279 --> 00:17:07,240
of doing any of the normal operations so

442
00:17:04,799 --> 00:17:08,740
shuffles and unpacks and all the things

443
00:17:07,240 --> 00:17:11,980
you would normally use to move data

444
00:17:08,740 --> 00:17:14,980
around they can't be dynamic in other

445
00:17:11,980 --> 00:17:19,059
words when you do a shuffle with the

446
00:17:14,980 --> 00:17:22,240
original say SSE shuffle or the SSE two

447
00:17:19,059 --> 00:17:26,289
shuffles those shuffles don't actually

448
00:17:22,240 --> 00:17:28,059
allow you to pass in any information you

449
00:17:26,289 --> 00:17:30,519
just have to say I want to do this

450
00:17:28,059 --> 00:17:32,200
particular shuffle because the shuffle

451
00:17:30,519 --> 00:17:34,900
pattern is an immediate that's welded

452
00:17:32,200 --> 00:17:37,240
into the instruction so short of

453
00:17:34,900 --> 00:17:38,910
self-modifying code or some other kind

454
00:17:37,240 --> 00:17:42,690
of really problem

455
00:17:38,910 --> 00:17:45,240
child things you could do there there'd

456
00:17:42,690 --> 00:17:48,870
be no way to say look based on say a

457
00:17:45,240 --> 00:17:50,970
comparison of elements inside one of my

458
00:17:48,869 --> 00:17:52,769
vectors I want to do this particular

459
00:17:50,970 --> 00:17:55,470
shuffle pattern the only way you could

460
00:17:52,769 --> 00:17:56,970
do that would be using a branch right

461
00:17:55,470 --> 00:17:59,039
we'll be using a switch statement or

462
00:17:56,970 --> 00:18:02,130
something like this let you know a jump

463
00:17:59,039 --> 00:18:04,230
in the assembly code and so what we've

464
00:18:02,130 --> 00:18:06,150
done instead is we've made a shuffle

465
00:18:04,230 --> 00:18:10,529
table because one thing that you can do

466
00:18:06,150 --> 00:18:13,560
in sse in I don't remember if it's SSE 4

467
00:18:10,529 --> 00:18:16,740
or 2 but I think it's for maybe 3 is

468
00:18:13,559 --> 00:18:19,710
there's a byte shuffle that does take a

469
00:18:16,740 --> 00:18:25,309
Scheffel input so basically what it does

470
00:18:19,710 --> 00:18:28,829
is it takes a it takes the the 16 byte

471
00:18:25,309 --> 00:18:32,279
value to shuffle register to shuffle and

472
00:18:28,829 --> 00:18:35,699
a 16 byte input that says where what to

473
00:18:32,279 --> 00:18:37,349
shuffle where and so you can have a

474
00:18:35,700 --> 00:18:39,690
dynamic input with that and so that's

475
00:18:37,349 --> 00:18:41,639
why you see us using that here it's

476
00:18:39,690 --> 00:18:43,890
because we don't have any other way of

477
00:18:41,640 --> 00:18:44,940
telling it to shuffle this is a very

478
00:18:43,890 --> 00:18:46,560
simple shuffle

479
00:18:44,940 --> 00:18:47,759
it's a shuffle that could trivially be

480
00:18:46,559 --> 00:18:49,980
done with the shuffle with the immediate

481
00:18:47,759 --> 00:18:51,660
the problem is that immediate SAR welded

482
00:18:49,980 --> 00:18:53,009
into the code if there was something

483
00:18:51,660 --> 00:18:54,360
that was simpler we could have done it

484
00:18:53,009 --> 00:18:56,099
we wouldn't have needed a whole table

485
00:18:54,359 --> 00:18:58,679
either way it's not the end of the world

486
00:18:56,099 --> 00:19:01,589
it's one cache line worth of stuff so

487
00:18:58,680 --> 00:19:06,900
you know it's not a disaster but that's

488
00:19:01,589 --> 00:19:09,659
why this is happening here ok so what we

489
00:19:06,900 --> 00:19:11,550
do is we start out by initializing the

490
00:19:09,660 --> 00:19:13,230
shuffle value to whatever the first

491
00:19:11,549 --> 00:19:14,190
shuffle is and the reason for that is

492
00:19:13,230 --> 00:19:15,630
because we don't know that we'll ever

493
00:19:14,190 --> 00:19:17,190
actually find a hit

494
00:19:15,630 --> 00:19:20,160
and we don't want all of our code at the

495
00:19:17,190 --> 00:19:21,990
end to fail if we don't we start at the

496
00:19:20,160 --> 00:19:23,730
grid index that is indicated by our

497
00:19:21,990 --> 00:19:25,470
caller so that grid index that we were

498
00:19:23,730 --> 00:19:28,110
we know we were stepping through that's

499
00:19:25,470 --> 00:19:30,240
where we start we also initialize a cost

500
00:19:28,109 --> 00:19:33,389
metric value and a t-- terminate value

501
00:19:30,240 --> 00:19:36,390
these are just there in case we run out

502
00:19:33,390 --> 00:19:37,830
of grid to walk or we feel like we've

503
00:19:36,390 --> 00:19:39,960
done too much work and want to stop

504
00:19:37,829 --> 00:19:42,509
early so these are here primarily for

505
00:19:39,960 --> 00:19:44,430
early termination in the event that we

506
00:19:42,509 --> 00:19:46,589
actually hit something we don't need

507
00:19:44,430 --> 00:19:48,480
these but we don't know that we actually

508
00:19:46,589 --> 00:19:49,649
will hit something or we don't know that

509
00:19:48,480 --> 00:19:51,220
we'll hit something within the

510
00:19:49,650 --> 00:19:55,540
computation

511
00:19:51,220 --> 00:19:57,910
budget that we allow we start by looking

512
00:19:55,539 --> 00:19:59,889
at the node that we start in and that's

513
00:19:57,910 --> 00:20:01,420
why grid index is initialized to initial

514
00:19:59,890 --> 00:20:04,930
green index and what we do is we say

515
00:20:01,420 --> 00:20:06,880
look if we hit a spatial node Terminator

516
00:20:04,930 --> 00:20:09,310
a grid node Terminator that just means

517
00:20:06,880 --> 00:20:10,450
we have hit the apron and we don't need

518
00:20:09,309 --> 00:20:13,929
to walk anymore because we're just

519
00:20:10,450 --> 00:20:15,730
walking out we've left the grid area so

520
00:20:13,930 --> 00:20:18,759
this is our termination condition for

521
00:20:15,730 --> 00:20:20,680
out of bounds we then look through all

522
00:20:18,759 --> 00:20:24,549
of the leaves that exist in this

523
00:20:20,680 --> 00:20:26,740
particular location so we look up the

524
00:20:24,549 --> 00:20:29,619
spatial grid leaf table the spatial grid

525
00:20:26,740 --> 00:20:33,750
leaf table it just is literally a table

526
00:20:29,619 --> 00:20:37,479
that says excuse me

527
00:20:33,750 --> 00:20:39,910
here are all of the things that exist at

528
00:20:37,480 --> 00:20:41,470
particular locations so another way to

529
00:20:39,910 --> 00:20:44,560
think of it would be it's basically a

530
00:20:41,470 --> 00:20:46,569
packed array with all of the boxes that

531
00:20:44,559 --> 00:20:49,599
you can hit all the occluders and the

532
00:20:46,569 --> 00:20:52,299
lights as well and then each of the

533
00:20:49,599 --> 00:20:54,639
nodes that we walk just says what chunk

534
00:20:52,299 --> 00:20:57,279
of that leaf table to use so we're

535
00:20:54,640 --> 00:20:59,410
looping over that leaf table and we're

536
00:20:57,279 --> 00:21:01,629
just pulling out all of the the things

537
00:20:59,410 --> 00:21:03,610
we might intersect with from there we're

538
00:21:01,630 --> 00:21:05,380
then doing the Box intersection and this

539
00:21:03,609 --> 00:21:09,189
code isn't new it's basically exactly

540
00:21:05,380 --> 00:21:11,410
the same as it was before so the box

541
00:21:09,190 --> 00:21:14,230
intersection code has been preserved it

542
00:21:11,410 --> 00:21:15,550
doesn't it didn't change because we

543
00:21:14,230 --> 00:21:17,259
already thought it was reasonably

544
00:21:15,549 --> 00:21:18,519
performant before we didn't think there

545
00:21:17,259 --> 00:21:21,129
was a way we could really make it go

546
00:21:18,519 --> 00:21:22,809
particularly faster so the only thing

547
00:21:21,130 --> 00:21:24,880
that we did differently here is we just

548
00:21:22,809 --> 00:21:27,129
preserve different values in the case

549
00:21:24,880 --> 00:21:29,530
where we do hit previously did we invert

550
00:21:27,130 --> 00:21:31,810
preserving the box min and box max

551
00:21:29,529 --> 00:21:34,599
instead now what we do is we preserve

552
00:21:31,809 --> 00:21:37,089
the T value that we thought was the

553
00:21:34,599 --> 00:21:38,529
actual hit and the reason that we're

554
00:21:37,089 --> 00:21:40,629
doing this is because this will let us

555
00:21:38,529 --> 00:21:43,329
pick out the correct value using our

556
00:21:40,630 --> 00:21:46,000
shuffle table later so that's what's

557
00:21:43,329 --> 00:21:47,649
going on there so as we come through

558
00:21:46,000 --> 00:21:49,240
here you can see that all we're really

559
00:21:47,650 --> 00:21:51,250
doing is we're just recording them

560
00:21:49,240 --> 00:21:53,470
information and we also build a mask

561
00:21:51,250 --> 00:21:55,390
over time that we can use for a future

562
00:21:53,470 --> 00:21:58,240
jump that basically says did we hit

563
00:21:55,390 --> 00:21:59,770
anything at all so if we did hit

564
00:21:58,240 --> 00:22:01,210
something we know that since we're

565
00:21:59,769 --> 00:22:03,220
walking the grid in order we can

566
00:22:01,210 --> 00:22:04,360
early-out at that point because we don't

567
00:22:03,220 --> 00:22:04,900
need to look any further if we've

568
00:22:04,359 --> 00:22:06,459
already

569
00:22:04,900 --> 00:22:08,860
something we can't possibly hit

570
00:22:06,460 --> 00:22:11,559
something sooner in a later grid cell

571
00:22:08,859 --> 00:22:13,119
and we ensured that when we built the

572
00:22:11,559 --> 00:22:15,669
actual grid because what we did is we

573
00:22:13,119 --> 00:22:17,289
clipped each of the boxes to the grid

574
00:22:15,670 --> 00:22:19,480
cell that it's in and so we know that

575
00:22:17,289 --> 00:22:21,549
there isn't any cases where you can go

576
00:22:19,480 --> 00:22:25,960
to a future grid cell and get an earlier

577
00:22:21,549 --> 00:22:27,369
hit that's no longer possible so we look

578
00:22:25,960 --> 00:22:28,600
to see whether or not we did hit

579
00:22:27,369 --> 00:22:30,279
something and if we did we're gonna

580
00:22:28,599 --> 00:22:32,230
terminate and the way that we terminate

581
00:22:30,279 --> 00:22:34,480
is we first say all right we need to

582
00:22:32,230 --> 00:22:37,509
look up to see which kind of shuffle

583
00:22:34,480 --> 00:22:39,490
we're actually going to do and you can

584
00:22:37,509 --> 00:22:44,440
see here that when we actually do this

585
00:22:39,490 --> 00:22:45,779
to to do the I'm sorry we don't quite do

586
00:22:44,440 --> 00:22:48,430
that yet that's actually happening here

587
00:22:45,779 --> 00:22:50,500
the first thing we have to do is we have

588
00:22:48,430 --> 00:22:53,500
to put all of our data in place to do a

589
00:22:50,500 --> 00:22:55,660
horizontal comparison so the way that we

590
00:22:53,500 --> 00:22:59,170
do this is you can see in here we've got

591
00:22:55,660 --> 00:23:01,960
our our data set up so that we're going

592
00:22:59,170 --> 00:23:03,519
to take the second and third the sixth

593
00:23:01,960 --> 00:23:06,610
and seventh the tenth and eleventh and

594
00:23:03,519 --> 00:23:08,079
the 14th and 15th values out and then

595
00:23:06,609 --> 00:23:10,329
we're also going to replicate this to

596
00:23:08,079 --> 00:23:11,769
the second and third values into the

597
00:23:10,329 --> 00:23:13,480
rest of the table we're gonna do that

598
00:23:11,769 --> 00:23:18,879
one shuffle and what that shuffle is

599
00:23:13,480 --> 00:23:24,069
doing is it's taking the highest part of

600
00:23:18,880 --> 00:23:27,000
each of our of each of our

601
00:23:24,069 --> 00:23:27,000
floating-point values

602
00:23:39,888 --> 00:23:51,709
so actually here's a question where we

603
00:23:43,950 --> 00:23:51,710
overly were we overly clever here though

604
00:23:52,339 --> 00:24:12,329
so so if you look at what's happening

605
00:24:09,929 --> 00:24:19,580
here we're trying to extract the minimum

606
00:24:12,329 --> 00:24:24,598
value so you know we just want to know

607
00:24:19,579 --> 00:24:27,358
which one of these 16-bit values is the

608
00:24:24,598 --> 00:24:34,200
lowest is what we're asking it for I

609
00:24:27,358 --> 00:24:36,778
mean that's what this is right and the

610
00:24:34,200 --> 00:24:43,528
thing that I don't quite understand is

611
00:24:36,778 --> 00:24:45,659
that we should have to compare the

612
00:24:43,528 --> 00:24:48,319
entire floating-point value in order to

613
00:24:45,659 --> 00:24:48,320
do that right

614
00:24:54,220 --> 00:25:04,298
I mean basically this is just ignoring

615
00:24:57,460 --> 00:25:06,429
16 bits of mantissa which I mean I guess

616
00:25:04,298 --> 00:25:08,200
is maybe you would just say that's okay

617
00:25:06,429 --> 00:25:13,330
because we just need to know roughly

618
00:25:08,200 --> 00:25:18,038
which one is the closest but it's a

619
00:25:13,329 --> 00:25:19,778
little odd right I mean it at the very

620
00:25:18,038 --> 00:25:24,000
least I think we probably needed to do

621
00:25:19,778 --> 00:25:24,000
in there because it just doesn't seem I

622
00:25:25,470 --> 00:25:28,720
mean out of the 32 bits of the

623
00:25:27,700 --> 00:25:30,639
floating-point value that we're

624
00:25:28,720 --> 00:25:32,889
comparing we're obviously comparing the

625
00:25:30,638 --> 00:25:34,359
best part to compare meaning we're

626
00:25:32,888 --> 00:25:37,240
comparing the part that's the exponent

627
00:25:34,359 --> 00:25:38,888
and the most significant bits so you

628
00:25:37,240 --> 00:25:45,990
know we're comparing like 8 bits of

629
00:25:38,888 --> 00:25:49,719
mantis or something and the exponent but

630
00:25:45,990 --> 00:25:52,179
I'm not sure that we're is that enough

631
00:25:49,720 --> 00:25:56,700
like I don't know that we know if that's

632
00:25:52,179 --> 00:25:59,250
enough or not you know what I mean

633
00:25:56,700 --> 00:26:02,590
like it may be that there's those

634
00:25:59,250 --> 00:26:05,528
remaining 16 bits of mantissa were

635
00:26:02,589 --> 00:26:08,619
important and we don't seem to care

636
00:26:05,528 --> 00:26:11,919
about that and I'm not sure that we

637
00:26:08,619 --> 00:26:13,028
actually did the work necessary to know

638
00:26:11,919 --> 00:26:17,070
that we don't care

639
00:26:13,028 --> 00:26:17,069
so it's a little odd

640
00:26:43,460 --> 00:26:48,600
I'm gonna just put it to do in there

641
00:26:46,109 --> 00:26:51,119
the downside of it it's not a

642
00:26:48,599 --> 00:26:52,589
catastrophic failure because all it

643
00:26:51,119 --> 00:26:54,869
would mean is that you pick a slightly

644
00:26:52,589 --> 00:27:00,990
different position to sample your

645
00:26:54,869 --> 00:27:03,719
lighting from but you know I don't know

646
00:27:00,990 --> 00:27:06,660
if that's again if we haven't really

647
00:27:03,720 --> 00:27:09,990
done any kind of analysis to determine

648
00:27:06,660 --> 00:27:12,630
that we don't care then we don't know if

649
00:27:09,990 --> 00:27:14,490
we don't care so I am a little nervous

650
00:27:12,630 --> 00:27:16,230
about that and I just want to put it to

651
00:27:14,490 --> 00:27:19,558
do in there because I'm not sure we

652
00:27:16,230 --> 00:27:22,308
really thought that through all the way

653
00:27:19,558 --> 00:27:24,928
it definitely will work I mean that's

654
00:27:22,308 --> 00:27:27,119
it's never gonna give like a completely

655
00:27:24,929 --> 00:27:28,798
ridiculous result doing that it will

656
00:27:27,119 --> 00:27:30,779
always give you roughly the correct hit

657
00:27:28,798 --> 00:27:33,058
but in the case where you had two hits

658
00:27:30,779 --> 00:27:35,308
that were very close together it will

659
00:27:33,058 --> 00:27:37,470
not correctly pick the closest one all

660
00:27:35,308 --> 00:27:39,480
the time it will just be kind of random

661
00:27:37,470 --> 00:27:40,890
which one it picks so sometimes it will

662
00:27:39,480 --> 00:27:41,640
pick the closest one and sometimes it

663
00:27:40,890 --> 00:27:44,460
will pick the one that's slightly

664
00:27:41,640 --> 00:27:46,530
further away and I don't know to what

665
00:27:44,460 --> 00:27:49,500
extent that could have a significant

666
00:27:46,529 --> 00:27:51,839
effect on the quality of the lighting in

667
00:27:49,500 --> 00:27:54,269
our particular case maybe it just almost

668
00:27:51,839 --> 00:27:56,038
never would because you don't really

669
00:27:54,269 --> 00:27:57,658
care about those kind of fine grain

670
00:27:56,038 --> 00:28:00,419
details in a game where you just have

671
00:27:57,659 --> 00:28:02,280
large sort of blocky Minecraft you

672
00:28:00,419 --> 00:28:04,620
looking sort of geometry that you're

673
00:28:02,279 --> 00:28:06,149
casting against so it's possible that it

674
00:28:04,619 --> 00:28:08,279
doesn't matter but I would least like to

675
00:28:06,150 --> 00:28:09,840
note this so that we could maybe take a

676
00:28:08,279 --> 00:28:13,399
look at in the lighting quality pass and

677
00:28:09,839 --> 00:28:13,399
see whether this is actually valid

678
00:28:44,900 --> 00:28:49,440
so it's really difficult to say and I

679
00:28:47,940 --> 00:28:51,750
think that's just a case where we should

680
00:28:49,440 --> 00:28:53,430
do some analysis on the actual numbers

681
00:28:51,750 --> 00:28:55,349
and see whether or not we have

682
00:28:53,430 --> 00:28:58,680
situations you know another one would be

683
00:28:55,349 --> 00:29:00,480
if we just wrote the laborious code here

684
00:28:58,680 --> 00:29:02,250
which tests it exactly what the right

685
00:29:00,480 --> 00:29:04,230
answer was and then counted how many

686
00:29:02,250 --> 00:29:06,480
times we were wrong I think that's

687
00:29:04,230 --> 00:29:08,789
something we should probably do just to

688
00:29:06,480 --> 00:29:11,210
make sure that we know exactly how

689
00:29:08,789 --> 00:29:13,470
inaccurate this is making us right

690
00:29:11,210 --> 00:29:15,329
that's really all I want to do there and

691
00:29:13,470 --> 00:29:17,009
then if we're sure that it's fairly

692
00:29:15,329 --> 00:29:19,799
minimal then it's probably still a great

693
00:29:17,009 --> 00:29:22,289
idea to do it this way anyway because we

694
00:29:19,799 --> 00:29:25,019
want to minimize the cost but it's just

695
00:29:22,289 --> 00:29:27,359
I don't since I don't think we really

696
00:29:25,019 --> 00:29:31,200
did that I'm not sure I'm comfortable

697
00:29:27,359 --> 00:29:33,509
with it anyway once we do do that if in

698
00:29:31,200 --> 00:29:36,420
fact that is okay then we get back a min

699
00:29:33,509 --> 00:29:38,579
test value here by using the min posi PU

700
00:29:36,420 --> 00:29:40,769
16 which will do the horizontal

701
00:29:38,579 --> 00:29:42,210
comparison of 16-bit values for us

702
00:29:40,769 --> 00:29:44,549
automatically and that's the entire

703
00:29:42,210 --> 00:29:46,590
reason that we did this was just because

704
00:29:44,549 --> 00:29:50,849
it's the one way we had that could

705
00:29:46,589 --> 00:29:52,379
actually do that comparison we didn't

706
00:29:50,849 --> 00:29:53,759
have a way of saying compare for

707
00:29:52,380 --> 00:29:56,400
floating-point values and give us the

708
00:29:53,759 --> 00:29:58,950
minimum the index of the minimum that

709
00:29:56,400 --> 00:30:01,470
wasn't a thing that that was available

710
00:29:58,950 --> 00:30:02,940
at least not that we could find and so

711
00:30:01,470 --> 00:30:04,319
the reason that we had to do the 16 bit

712
00:30:02,940 --> 00:30:05,580
compare was because it's the only thing

713
00:30:04,319 --> 00:30:09,000
we actually have that will do a

714
00:30:05,579 --> 00:30:10,319
horizontal compare across the lanes we

715
00:30:09,000 --> 00:30:12,299
then have this shuffle index which is

716
00:30:10,319 --> 00:30:16,379
what we extract out of that that's gonna

717
00:30:12,299 --> 00:30:18,119
tell us that answer we verify as we're

718
00:30:16,380 --> 00:30:21,120
running that it never gives us an answer

719
00:30:18,119 --> 00:30:23,369
that isn't less than four and the reason

720
00:30:21,119 --> 00:30:25,679
for that is just because we've padded

721
00:30:23,369 --> 00:30:28,500
this out in such a way as to make sure

722
00:30:25,680 --> 00:30:30,630
that we can't get it has to be what zero

723
00:30:28,500 --> 00:30:32,950
one two or three these are just copies

724
00:30:30,630 --> 00:30:35,500
of the original two values so

725
00:30:32,950 --> 00:30:37,569
you can't ever have one of those being

726
00:30:35,500 --> 00:30:40,000
less than this one and we looked and it

727
00:30:37,569 --> 00:30:41,888
does go in order so in the case where

728
00:30:40,000 --> 00:30:44,769
this is equal to this it should still

729
00:30:41,888 --> 00:30:45,879
return us the lower one which is zero so

730
00:30:44,769 --> 00:30:47,740
we just asserted that that's true

731
00:30:45,880 --> 00:30:49,419
because we wanted to make sure and then

732
00:30:47,740 --> 00:30:51,069
we go ahead and we look in the table and

733
00:30:49,419 --> 00:30:54,070
we grab out whatever the thing is that

734
00:30:51,069 --> 00:30:55,869
it told us it should be and that we grab

735
00:30:54,069 --> 00:30:59,408
out the shuffle that puts that thing

736
00:30:55,869 --> 00:31:01,479
everywhere so we then do our P chef to

737
00:30:59,409 --> 00:31:04,149
make sure our T ray just now has the

738
00:31:01,480 --> 00:31:06,190
correct value in all four positions and

739
00:31:04,148 --> 00:31:08,829
then we go ahead and do our computations

740
00:31:06,190 --> 00:31:11,288
to figure out the normal we take the

741
00:31:08,829 --> 00:31:12,939
sign bit of the ray direction and the

742
00:31:11,288 --> 00:31:15,099
reason that we do that is because we

743
00:31:12,940 --> 00:31:16,840
know that the normal has to be pointing

744
00:31:15,099 --> 00:31:18,308
in the same direction as the Ray or I

745
00:31:16,839 --> 00:31:20,138
should say in the opposite direction of

746
00:31:18,308 --> 00:31:22,690
the Ray because we can't hit something

747
00:31:20,138 --> 00:31:25,808
that's a back face of the of one of our

748
00:31:22,690 --> 00:31:31,720
occluders and then we go ahead and do

749
00:31:25,808 --> 00:31:33,519
our selection of x y&amp;z and this is why

750
00:31:31,720 --> 00:31:36,519
we changed what we're storing is because

751
00:31:33,519 --> 00:31:39,278
we figured out that if we just use which

752
00:31:36,519 --> 00:31:41,710
T value got selected the X one the Y one

753
00:31:39,278 --> 00:31:43,750
or the Z one we can then know whether or

754
00:31:41,710 --> 00:31:46,480
not we're an X normal a Y normal or Z

755
00:31:43,750 --> 00:31:48,250
normal so we can get the sign directly

756
00:31:46,480 --> 00:31:52,690
from the Ray direction and then we get

757
00:31:48,250 --> 00:31:55,929
the Y X Y or Z which one it is just

758
00:31:52,690 --> 00:31:57,639
based on which of the T values we

759
00:31:55,929 --> 00:31:59,259
selected and this was a very efficient

760
00:31:57,638 --> 00:32:01,058
way to create the normal compared to

761
00:31:59,259 --> 00:32:04,450
what we were doing before it's just a

762
00:32:01,058 --> 00:32:06,750
few bit operations and we get we get

763
00:32:04,450 --> 00:32:09,399
some accurate values out of it we think

764
00:32:06,750 --> 00:32:10,869
however we haven't tested it we could

765
00:32:09,398 --> 00:32:13,058
have slipped up in here we could have a

766
00:32:10,869 --> 00:32:14,439
typo or a bug or something and so we

767
00:32:13,058 --> 00:32:17,138
need to check check that we're actually

768
00:32:14,440 --> 00:32:19,298
producing good normals with this process

769
00:32:17,138 --> 00:32:21,579
when we actually finish producing the

770
00:32:19,298 --> 00:32:24,038
normals we extract them here down to

771
00:32:21,579 --> 00:32:26,619
singles in order to actually use because

772
00:32:24,038 --> 00:32:29,798
when we fall out of these loops we're

773
00:32:26,619 --> 00:32:31,689
going to do radiance calculations that

774
00:32:29,798 --> 00:32:33,038
need to look up into a specific place in

775
00:32:31,690 --> 00:32:37,360
the grid so things have to be dropped

776
00:32:33,038 --> 00:32:40,028
down to single so you know we can you

777
00:32:37,359 --> 00:32:43,000
know we can just see it's that to do

778
00:32:40,028 --> 00:32:45,038
still relevant it's not so we actually

779
00:32:43,000 --> 00:32:46,089
did the thing that this to do was

780
00:32:45,038 --> 00:32:48,148
talking about

781
00:32:46,089 --> 00:32:54,689
if you look here we now only have one

782
00:32:48,148 --> 00:32:59,579
irradiance computation not two so yeah

783
00:32:54,690 --> 00:32:59,580
anyway what you can see here is

784
00:32:59,700 --> 00:33:04,149
regardless of how you exit the loop we

785
00:33:02,319 --> 00:33:05,229
fill out these values and the reason for

786
00:33:04,148 --> 00:33:07,778
that is because these are the values

787
00:33:05,229 --> 00:33:10,569
that I actually get used you can see

788
00:33:07,778 --> 00:33:13,298
that in the case where we hit something

789
00:33:10,569 --> 00:33:14,798
we produce you know the normal and the

790
00:33:13,298 --> 00:33:17,798
sample direction and that sort of stuff

791
00:33:14,798 --> 00:33:19,658
we drop them in here and in the case

792
00:33:17,798 --> 00:33:21,398
where we just run out of time then what

793
00:33:19,659 --> 00:33:24,009
we do is we step the array forward to

794
00:33:21,398 --> 00:33:26,558
where we ran out and we just say this is

795
00:33:24,009 --> 00:33:28,808
where you're going to probe in the case

796
00:33:26,558 --> 00:33:31,479
where we hit nothing at all so we just

797
00:33:28,808 --> 00:33:36,249
miss entirely and we were still under

798
00:33:31,479 --> 00:33:39,879
budget at that point we just kind of say

799
00:33:36,249 --> 00:33:42,069
like hey we don't really know which is

800
00:33:39,878 --> 00:33:44,709
probably wrong I mean I would say that

801
00:33:42,069 --> 00:33:46,898
it might be the best idea probably you

802
00:33:44,710 --> 00:33:53,019
know possibly to just exit on the cost

803
00:33:46,898 --> 00:33:55,358
metric drop out and say you know we

804
00:33:53,019 --> 00:33:59,638
probably just want to do this operation

805
00:33:55,358 --> 00:33:59,638
when we run out of space as well

806
00:34:04,348 --> 00:34:13,028
hard to say that's kind of a to be

807
00:34:11,230 --> 00:34:14,889
continued I think when we do the

808
00:34:13,028 --> 00:34:16,088
lighting quality pass and we decide how

809
00:34:14,889 --> 00:34:18,068
we're actually going to be putting

810
00:34:16,088 --> 00:34:20,139
moonlight in here I think we're gonna

811
00:34:18,068 --> 00:34:22,798
probably want to say that if you leave

812
00:34:20,139 --> 00:34:22,798
the grid

813
00:34:28,070 --> 00:34:33,830
I mean ideally we'd just do like if you

814
00:34:32,449 --> 00:34:36,019
leave the grid I don't think anything

815
00:34:33,829 --> 00:34:39,980
happens so yeah I don't know this is

816
00:34:36,019 --> 00:34:42,469
probably fine so we then go and compute

817
00:34:39,980 --> 00:34:45,380
the voxel irradiance and we use where we

818
00:34:42,469 --> 00:34:49,399
are sampling which is what we determined

819
00:34:45,380 --> 00:34:52,880
up here right we pass that in we take

820
00:34:49,400 --> 00:34:55,099
that fall-off and we actually do the the

821
00:34:52,880 --> 00:34:56,570
fall-off based on the normal that we're

822
00:34:55,099 --> 00:34:59,539
reflecting off of and whatever the

823
00:34:56,570 --> 00:35:03,380
emission would have been we do some

824
00:34:59,539 --> 00:35:06,469
computations to get the RGB and emission

825
00:35:03,380 --> 00:35:09,769
to work properly and then we we pass

826
00:35:06,469 --> 00:35:12,529
those out so that's the complete rate

827
00:35:09,769 --> 00:35:14,509
caster and we want to step through here

828
00:35:12,530 --> 00:35:15,710
and verify that those things are

829
00:35:14,510 --> 00:35:17,330
actually working the way we think they

830
00:35:15,710 --> 00:35:19,280
are because like I said there's a lot of

831
00:35:17,329 --> 00:35:22,309
intricacy in there we've smacked a lot

832
00:35:19,280 --> 00:35:23,480
of things down to very few operations or

833
00:35:22,309 --> 00:35:25,130
I should say very few I'm sure we could

834
00:35:23,480 --> 00:35:27,230
get it lower than this but it's still

835
00:35:25,130 --> 00:35:31,340
pretty small I compared to what the

836
00:35:27,230 --> 00:35:33,409
verbose version would be and so we want

837
00:35:31,340 --> 00:35:34,750
to step through that now and see if it's

838
00:35:33,409 --> 00:35:37,190
actually working the way we think it is

839
00:35:34,750 --> 00:35:41,539
similarly we also have the grid

840
00:35:37,190 --> 00:35:43,909
construction code and that replaces the

841
00:35:41,539 --> 00:35:45,980
KD tree builder that we used to have so

842
00:35:43,909 --> 00:35:48,829
in spatial partition for lighting what

843
00:35:45,980 --> 00:35:50,659
you can see here is we had these things

844
00:35:48,829 --> 00:35:52,940
for building them we're now running this

845
00:35:50,659 --> 00:35:54,619
separate path we don't really care about

846
00:35:52,940 --> 00:35:57,829
any of this stuff anymore and eventually

847
00:35:54,619 --> 00:35:59,000
we will remove it entirely but what

848
00:35:57,829 --> 00:36:00,889
we're actually concerned with now is

849
00:35:59,000 --> 00:36:03,079
this part what we do is we say all right

850
00:36:00,889 --> 00:36:04,759
let's take a look at what we need for

851
00:36:03,079 --> 00:36:07,639
our array and we basically build the

852
00:36:04,760 --> 00:36:09,470
array on the fly so we say however big

853
00:36:07,639 --> 00:36:11,929
the lighting box is going to be let's

854
00:36:09,469 --> 00:36:14,869
build that we then loop through and we

855
00:36:11,929 --> 00:36:18,409
count how many leaves go into each

856
00:36:14,869 --> 00:36:20,569
square so this is literally just a pre

857
00:36:18,409 --> 00:36:23,149
pass for sizing so that we can keep

858
00:36:20,570 --> 00:36:25,430
everything aligned nicely where you

859
00:36:23,150 --> 00:36:26,930
don't have to jump around to figure out

860
00:36:25,429 --> 00:36:29,599
what you're intersecting with you'll

861
00:36:26,929 --> 00:36:33,440
actually just always have for every node

862
00:36:29,599 --> 00:36:38,860
in the grid you'll actually know exactly

863
00:36:33,440 --> 00:36:38,860
what the leaves are in a tight array

864
00:36:40,460 --> 00:36:51,420
excuse me I've been pretty sick lately I

865
00:36:45,199 --> 00:36:54,269
got some um antibiotics from the doctor

866
00:36:51,420 --> 00:36:58,559
because of course with kovat 19

867
00:36:54,269 --> 00:37:00,300
situations you actually can't safely go

868
00:36:58,559 --> 00:37:01,559
to a doctor and a lot of doctors were

869
00:37:00,300 --> 00:37:03,960
actually shut down so you can't actually

870
00:37:01,559 --> 00:37:06,960
get things like a throat culture or

871
00:37:03,960 --> 00:37:10,170
something so they basically were like

872
00:37:06,960 --> 00:37:13,260
well let's try to treatment things and

873
00:37:10,170 --> 00:37:16,079
see what ends up happening because that

874
00:37:13,260 --> 00:37:18,510
will be effectively a test right which

875
00:37:16,079 --> 00:37:20,759
normally you wouldn't do but in this

876
00:37:18,510 --> 00:37:22,109
particular case if you don't want to

877
00:37:20,760 --> 00:37:24,510
have to go to the like one or two

878
00:37:22,108 --> 00:37:28,319
clinics that are open where tons of

879
00:37:24,510 --> 00:37:31,910
kovat 19 people actually already are you

880
00:37:28,320 --> 00:37:34,320
don't really have a lot of choices yeah

881
00:37:31,909 --> 00:37:37,049
kind of annoying kind of a really

882
00:37:34,320 --> 00:37:40,140
annoying aspect of the way we do

883
00:37:37,050 --> 00:37:43,140
medicine where we don't trust people to

884
00:37:40,139 --> 00:37:45,118
do medicine so like a throat culture

885
00:37:43,139 --> 00:37:48,329
isn't a thing that would be that hard

886
00:37:45,119 --> 00:37:50,910
for people to do at home but of course

887
00:37:48,329 --> 00:37:52,348
we don't really not only do we not trust

888
00:37:50,909 --> 00:37:54,149
people but our society set up so that

889
00:37:52,349 --> 00:37:56,070
people who screw things up because

890
00:37:54,150 --> 00:37:58,680
they're stupid or incompetent like we'll

891
00:37:56,070 --> 00:38:01,710
sue you and create like litigious

892
00:37:58,679 --> 00:38:04,319
problems for circumstances that make it

893
00:38:01,710 --> 00:38:06,059
so that you'd never really want to be in

894
00:38:04,320 --> 00:38:09,660
the business of doing health care at

895
00:38:06,059 --> 00:38:11,880
home so even though really my problem

896
00:38:09,659 --> 00:38:14,969
could just be solved by me having

897
00:38:11,880 --> 00:38:21,690
someone like take a throat culture here

898
00:38:14,969 --> 00:38:26,549
and then mail that to a lab of course

899
00:38:21,690 --> 00:38:29,970
that's not on the table yeah

900
00:38:26,550 --> 00:38:33,890
medical science always a hundred years

901
00:38:29,969 --> 00:38:36,959
behind all right so let's go ahead and

902
00:38:33,889 --> 00:38:38,929
it's not the science it's the medical

903
00:38:36,960 --> 00:38:42,690
practice always a hundred years behind

904
00:38:38,929 --> 00:38:44,069
so let's go ahead and take a look at how

905
00:38:42,690 --> 00:38:45,570
this is built so you can see here that

906
00:38:44,070 --> 00:38:49,470
what we do is we grab the min and Max

907
00:38:45,570 --> 00:38:51,720
node for the place that this thing needs

908
00:38:49,469 --> 00:38:55,349
to be inserted and then we loop over the

909
00:38:51,719 --> 00:38:58,709
x y&amp;z of the spatial grid nodes and we

910
00:38:55,349 --> 00:38:59,940
basically say we're going to take this

911
00:38:58,710 --> 00:39:05,429
particular relief and we're going to

912
00:38:59,940 --> 00:39:07,139
insert it into this particular AABB so

913
00:39:05,429 --> 00:39:10,409
they include ER and we're gonna inserted

914
00:39:07,139 --> 00:39:12,509
into every node that it straddles so you

915
00:39:10,409 --> 00:39:14,099
know all the nodes that it possibly

916
00:39:12,510 --> 00:39:18,420
touches we're gonna put it in there so

917
00:39:14,099 --> 00:39:20,759
we're just counting and when we're done

918
00:39:18,420 --> 00:39:22,650
counting we then say okay we now know

919
00:39:20,760 --> 00:39:25,560
how many of these things were going to

920
00:39:22,650 --> 00:39:28,920
have so we loop through and we produce

921
00:39:25,559 --> 00:39:30,599
an actual total count by rounding up to

922
00:39:28,920 --> 00:39:33,180
four because we know we pack four at a

923
00:39:30,599 --> 00:39:34,139
time and we produce the count here and

924
00:39:33,179 --> 00:39:36,269
we produce the count

925
00:39:34,139 --> 00:39:41,039
Undivided by four so it's actually just

926
00:39:36,269 --> 00:39:43,139
the raw count right so we say here's

927
00:39:41,039 --> 00:39:46,320
where it would start and here's where it

928
00:39:43,139 --> 00:39:48,179
would end though I shouldn't say that

929
00:39:46,320 --> 00:39:49,860
here's where it would start and where it

930
00:39:48,179 --> 00:39:54,179
would end is set to zero so it's

931
00:39:49,860 --> 00:39:56,880
basically like a start in account we

932
00:39:54,179 --> 00:39:59,250
then go through and after creating room

933
00:39:56,880 --> 00:40:02,070
to store these we do the exact same loop

934
00:39:59,250 --> 00:40:04,230
as we did before but now we actually put

935
00:40:02,070 --> 00:40:06,330
each individual box in there and we do

936
00:40:04,230 --> 00:40:12,090
that by creating what we think the box

937
00:40:06,329 --> 00:40:14,880
actually is by creating the cell bounds

938
00:40:12,090 --> 00:40:18,750
for that particular location and then we

939
00:40:14,880 --> 00:40:21,360
clip the AABB to those bounds using the

940
00:40:18,750 --> 00:40:23,039
intersect call we put it into the leaf

941
00:40:21,360 --> 00:40:25,670
at the location that we believe it

942
00:40:23,039 --> 00:40:31,559
should go thus creating basically a

943
00:40:25,670 --> 00:40:34,829
packed xxx yyy ZZZ for later use by

944
00:40:31,559 --> 00:40:38,849
inserting into you know subsequent

945
00:40:34,829 --> 00:40:40,348
entries in that order when we're done

946
00:40:38,849 --> 00:40:44,998
with all of that

947
00:40:40,349 --> 00:40:46,979
we also loop through and do a post pass

948
00:40:44,998 --> 00:40:49,169
to correct all of the information that

949
00:40:46,978 --> 00:40:50,998
we had here so the first thing we do is

950
00:40:49,170 --> 00:40:52,318
we divide this tardiness by four because

951
00:40:50,998 --> 00:40:56,068
now we've packed everything in so

952
00:40:52,318 --> 00:40:57,568
everything is by fours and you can see

953
00:40:56,068 --> 00:40:59,248
that we sort of did that here as well

954
00:40:57,568 --> 00:41:01,108
right the primary index was always

955
00:40:59,248 --> 00:41:04,709
divided by four we actually inserted it

956
00:41:01,108 --> 00:41:06,659
in we then also come through here and we

957
00:41:04,710 --> 00:41:10,048
take the one passed last index and we

958
00:41:06,659 --> 00:41:13,649
also like put that in using the divide

959
00:41:10,048 --> 00:41:15,900
by four and we round it up so to make

960
00:41:13,650 --> 00:41:19,139
sure that we capture the correct number

961
00:41:15,900 --> 00:41:23,130
in there we then also say anybody who

962
00:41:19,139 --> 00:41:25,228
was actually erroneous so they were an

963
00:41:23,130 --> 00:41:27,509
apron they weren't actually supposed to

964
00:41:25,228 --> 00:41:31,588
contain anything we actually go through

965
00:41:27,509 --> 00:41:33,809
and check for any of that and if you are

966
00:41:31,588 --> 00:41:37,798
on the apron then we put in the grid

967
00:41:33,809 --> 00:41:40,229
Terminator bit or special value in the

968
00:41:37,798 --> 00:41:42,568
start index so that the routine knows

969
00:41:40,228 --> 00:41:47,460
right so that the grid that's how the

970
00:41:42,568 --> 00:41:50,759
Ray Kassar knows it's hit the end so

971
00:41:47,460 --> 00:41:52,019
again I think the logic is sound but we

972
00:41:50,759 --> 00:41:53,190
don't know we could have some bugs in

973
00:41:52,018 --> 00:41:55,409
there there's a fair number of

974
00:41:53,190 --> 00:41:57,108
operations that have to occur and we

975
00:41:55,409 --> 00:42:00,868
could have some part where we've got

976
00:41:57,108 --> 00:42:02,639
issues this part here is it to do that

977
00:42:00,869 --> 00:42:04,890
you know we now do and so I'm going to

978
00:42:02,639 --> 00:42:10,848
turn this to do into just a note I'm

979
00:42:04,889 --> 00:42:15,989
going to say we need to use intersect

980
00:42:10,849 --> 00:42:19,700
here because we cannot allow boxes to

981
00:42:15,989 --> 00:42:23,099
extend outside their node region

982
00:42:19,699 --> 00:42:28,558
otherwise early termination of the ray

983
00:42:23,099 --> 00:42:33,630
caster would not work since earlier T's

984
00:42:28,559 --> 00:42:42,420
could be worse or farther I should say

985
00:42:33,630 --> 00:42:47,548
farther hits compared to later T's so

986
00:42:42,420 --> 00:42:50,130
anyway so that's just a walk through the

987
00:42:47,548 --> 00:42:52,079
entire thing so let's go ahead and just

988
00:42:50,130 --> 00:42:54,450
start stepping through I'm gonna use

989
00:42:52,079 --> 00:42:58,510
debug build here

990
00:42:54,449 --> 00:43:01,210
mmm because I'm not so concerned about

991
00:42:58,510 --> 00:43:03,940
speed at the moment what I want to look

992
00:43:01,210 --> 00:43:06,220
at instead is just the behavior of the

993
00:43:03,940 --> 00:43:11,230
functions and to start looking for

994
00:43:06,219 --> 00:43:14,259
problems or issues that are not like

995
00:43:11,230 --> 00:43:16,480
where something's behaving contrary to

996
00:43:14,260 --> 00:43:18,480
how I think that it should have and so

997
00:43:16,480 --> 00:43:20,889
this is just for my own edification

998
00:43:18,480 --> 00:43:24,219
before I start debugging specific

999
00:43:20,889 --> 00:43:27,519
problems I just want to take that walk

1000
00:43:24,219 --> 00:43:31,659
through to see that we're not doing

1001
00:43:27,519 --> 00:43:34,150
anything obviously stupid what happened

1002
00:43:31,659 --> 00:43:46,649
there so a reason internal lighting core

1003
00:43:34,150 --> 00:43:46,650
did not get hit what's going on

1004
00:43:57,619 --> 00:44:04,210
do I not call that anymore what's going

1005
00:44:01,759 --> 00:44:04,210
on here

1006
00:44:16,480 --> 00:44:26,800
I mean here's internal letting car right

1007
00:44:20,159 --> 00:44:32,909
okay Wow not a great day for spelling

1008
00:44:26,800 --> 00:44:38,349
huh let's try yeah there we go

1009
00:44:32,909 --> 00:44:40,539
alright so here we go into the actual

1010
00:44:38,349 --> 00:44:43,269
ending code that we care about so this

1011
00:44:40,539 --> 00:44:45,659
is the actual spatial partition builds

1012
00:44:43,269 --> 00:44:47,800
that we just said this part is not

1013
00:44:45,659 --> 00:44:50,739
something we actually work with I don't

1014
00:44:47,800 --> 00:44:52,990
think but this part is so let's take a

1015
00:44:50,739 --> 00:44:55,929
look let's see what the max grid index

1016
00:44:52,989 --> 00:44:59,679
is just for our notification so there's

1017
00:44:55,929 --> 00:45:05,739
about 9,000 cells in the grid including

1018
00:44:59,679 --> 00:45:08,980
the apron the nominal size is 60 144 and

1019
00:45:05,739 --> 00:45:11,949
then if you look at like you know what

1020
00:45:08,980 --> 00:45:14,800
happens just to illustrate the +1 oops

1021
00:45:11,949 --> 00:45:17,649
it's 2 because on either side there'll

1022
00:45:14,800 --> 00:45:23,550
be a little bit of the apron you can see

1023
00:45:17,650 --> 00:45:27,420
what we would get up to that doesn't

1024
00:45:23,550 --> 00:45:27,420
seem right does it

1025
00:45:28,380 --> 00:45:41,349
hmm so that's a little wonky let me take

1026
00:45:37,690 --> 00:45:45,280
a look at what voxel dim is there so if

1027
00:45:41,349 --> 00:45:49,390
we did 26 times 18 times 18 yeah it's

1028
00:45:45,280 --> 00:45:54,690
doing the math right so where is 89 18

1029
00:45:49,389 --> 00:45:54,690
coming from voxel gym with apron

1030
00:45:59,900 --> 00:46:18,559
oh well not mm-hmm so I think that's a

1031
00:46:17,509 --> 00:46:22,130
little confusing

1032
00:46:18,559 --> 00:46:24,079
let's might just be a slow morning but

1033
00:46:22,130 --> 00:46:31,329
let's take a look at what's going on

1034
00:46:24,079 --> 00:46:33,499
there because I don't know all right so

1035
00:46:31,329 --> 00:46:36,440
here's the equation that we're actually

1036
00:46:33,498 --> 00:46:38,719
computing we're taking the X and we're

1037
00:46:36,440 --> 00:46:41,900
multiplying it by well I mean if you

1038
00:46:38,719 --> 00:46:50,328
pile this out it's x times y times z

1039
00:46:41,900 --> 00:46:52,869
plus x times y plus X right and I'm

1040
00:46:50,329 --> 00:46:52,869
wondering if maybe

1041
00:46:59,889 --> 00:47:08,869
so I guess the problem with that is this

1042
00:47:02,929 --> 00:47:12,529
is computing the actual cell like this

1043
00:47:08,869 --> 00:47:16,519
is if you could actually get to the

1044
00:47:12,530 --> 00:47:18,860
count as an actual index so really if

1045
00:47:16,519 --> 00:47:22,489
you wanted to know that count you'd have

1046
00:47:18,860 --> 00:47:26,660
to subtract one from each one so this

1047
00:47:22,489 --> 00:47:32,209
trick I mean it sort of is still okay

1048
00:47:26,659 --> 00:47:37,269
because when you do this you're just

1049
00:47:32,210 --> 00:47:37,269
want a value that's large enough right

1050
00:47:38,050 --> 00:47:43,670
so it's not an issue but it's also not

1051
00:47:40,789 --> 00:47:48,110
really what you would want right so

1052
00:47:43,670 --> 00:47:51,590
probably in order to make this be at

1053
00:47:48,110 --> 00:47:53,840
least a little less confusing for anyone

1054
00:47:51,590 --> 00:47:59,750
who was reading it you know we probably

1055
00:47:53,840 --> 00:48:01,130
want to do this at least you know what I

1056
00:47:59,750 --> 00:48:06,980
mean

1057
00:48:01,130 --> 00:48:09,079
oops so let's just do that just to make

1058
00:48:06,980 --> 00:48:10,490
sure that you know everyone understands

1059
00:48:09,079 --> 00:48:11,569
what's going on because it threw me for

1060
00:48:10,489 --> 00:48:13,729
a loop there real quick

1061
00:48:11,570 --> 00:48:15,260
and it was like you know it's not a

1062
00:48:13,730 --> 00:48:17,869
problem but it's just like you might as

1063
00:48:15,260 --> 00:48:20,150
well be clear so I think that's what

1064
00:48:17,869 --> 00:48:22,639
you'd actually want and in order to get

1065
00:48:20,150 --> 00:48:26,599
the count you would need to do plus one

1066
00:48:22,639 --> 00:48:28,670
so this is the max grid index but here

1067
00:48:26,599 --> 00:48:32,690
we're actually doing a grid count right

1068
00:48:28,670 --> 00:48:37,570
so I think you would want to do max grid

1069
00:48:32,690 --> 00:48:42,079
count or grid count something like that

1070
00:48:37,570 --> 00:48:44,240
and to be honest I'm not sure why we

1071
00:48:42,079 --> 00:48:52,849
just wouldn't do this with a get dim

1072
00:48:44,239 --> 00:48:54,589
call I guess we don't actually have one

1073
00:48:52,849 --> 00:48:57,319
that does this but you'd kind of just

1074
00:48:54,590 --> 00:49:02,590
want like get total size to happen with

1075
00:48:57,320 --> 00:49:02,590
this it's let's just do this

1076
00:49:02,929 --> 00:49:11,210
I mean that's just better right so I'm

1077
00:49:08,329 --> 00:49:13,220
gonna change this to grid camp so that

1078
00:49:11,210 --> 00:49:17,170
when we roll over these we're a little

1079
00:49:13,219 --> 00:49:20,989
bit clearer about what's going on and

1080
00:49:17,170 --> 00:49:28,940
you know I guess I don't necessarily

1081
00:49:20,989 --> 00:49:32,029
know that we care what type that is but

1082
00:49:28,940 --> 00:49:33,769
we do want to never have larger than we

1083
00:49:32,030 --> 00:49:37,099
can fit in 16-bit indices because we

1084
00:49:33,769 --> 00:49:41,269
don't really want to store large indices

1085
00:49:37,099 --> 00:49:46,220
into these things so now if I look at

1086
00:49:41,269 --> 00:49:51,019
the grid count hopefully I get an answer

1087
00:49:46,219 --> 00:49:52,969
that's more congruent there we go so

1088
00:49:51,019 --> 00:49:55,670
that seems better to me here's me

1089
00:49:52,969 --> 00:49:57,108
allocating those and then we're going to

1090
00:49:55,670 --> 00:49:59,960
loop over all the things we got to

1091
00:49:57,108 --> 00:50:02,389
insert in and so if we take a look at

1092
00:49:59,960 --> 00:50:04,068
what we actually get back when we do

1093
00:50:02,389 --> 00:50:06,679
these insertions we should be able to

1094
00:50:04,068 --> 00:50:08,929
see sort of how this works so you can

1095
00:50:06,679 --> 00:50:13,098
see here like it's basically getting

1096
00:50:08,929 --> 00:50:14,389
this is one that straddles you know as

1097
00:50:13,099 --> 00:50:18,769
you would expect most things will

1098
00:50:14,389 --> 00:50:22,190
probably straddle - it'll be a two by

1099
00:50:18,769 --> 00:50:26,568
two by two right I mean that seems like

1100
00:50:22,190 --> 00:50:28,429
mostly what will happen here right so as

1101
00:50:26,568 --> 00:50:30,380
we multiply out the two by two by two

1102
00:50:28,429 --> 00:50:33,710
you can see we just like adding it in

1103
00:50:30,380 --> 00:50:35,690
there right and we're just putting these

1104
00:50:33,710 --> 00:50:37,490
into the spatial grid nodes as they go I

1105
00:50:35,690 --> 00:50:45,079
don't think there's much to worry about

1106
00:50:37,489 --> 00:50:46,909
in that particular computation I mean it

1107
00:50:45,079 --> 00:50:49,599
seems like it should should just be fine

1108
00:50:46,909 --> 00:50:49,598
right

1109
00:50:54,349 --> 00:51:04,528
but I guess what I would say though is

1110
00:50:57,449 --> 00:51:09,028
this looks busted right so we need these

1111
00:51:04,528 --> 00:51:12,059
things to be inserted and that's just

1112
00:51:09,028 --> 00:51:14,630
gonna be garbage right I mean if you

1113
00:51:12,059 --> 00:51:17,819
look at what happens in here

1114
00:51:14,630 --> 00:51:21,630
this is expecting these to be inside the

1115
00:51:17,818 --> 00:51:30,028
voxel so things that are outside the

1116
00:51:21,630 --> 00:51:32,579
voxel cannot be inserted here and we're

1117
00:51:30,028 --> 00:51:34,409
not checking for that how this wasn't

1118
00:51:32,579 --> 00:51:36,539
absolutely destroying memory I have no

1119
00:51:34,409 --> 00:51:39,659
idea but I guess it's just because we

1120
00:51:36,539 --> 00:51:45,089
allocate things in a fairly consistent

1121
00:51:39,659 --> 00:51:47,368
way I mean you know right like this

1122
00:51:45,088 --> 00:51:52,588
should just been completely complete a

1123
00:51:47,369 --> 00:51:54,960
complete disaster let's make sure that

1124
00:51:52,588 --> 00:51:58,650
doesn't happen by protecting ourselves

1125
00:51:54,960 --> 00:52:02,970
from it so I'm gonna do an asserts that

1126
00:51:58,650 --> 00:52:07,259
the p-value is greater than zero in each

1127
00:52:02,969 --> 00:52:10,980
case greater than or equal to I should

1128
00:52:07,259 --> 00:52:14,659
say and I'm also going to assert that

1129
00:52:10,980 --> 00:52:14,659
it's less than the dim

1130
00:52:19,659 --> 00:52:24,670
so I think that's roughly what we want

1131
00:52:22,750 --> 00:52:28,838
to do now there's different ways that we

1132
00:52:24,670 --> 00:52:33,548
could go about doing this we could make

1133
00:52:28,838 --> 00:52:36,099
this voxel larger so like we can allow

1134
00:52:33,548 --> 00:52:38,798
casting outside and I don't know if we

1135
00:52:36,099 --> 00:52:41,349
actually do want to do that right so if

1136
00:52:38,798 --> 00:52:45,400
you look at what's going on in here when

1137
00:52:41,349 --> 00:52:47,349
we do these get voxel index for P we

1138
00:52:45,400 --> 00:52:49,269
could choose to have the Vox will be

1139
00:52:47,349 --> 00:52:52,900
offset so I'm gonna put it to do in here

1140
00:52:49,269 --> 00:53:01,170
that says do we want to support casting

1141
00:52:52,900 --> 00:53:06,150
on a wider voxel area than the lighting

1142
00:53:01,170 --> 00:53:09,670
because my my hunch is we probably do

1143
00:53:06,150 --> 00:53:12,338
meaning the lighting bounds are fairly

1144
00:53:09,670 --> 00:53:14,349
tight to the world and we probably want

1145
00:53:12,338 --> 00:53:15,578
to support lighting further out than

1146
00:53:14,349 --> 00:53:23,140
that in fact I'm just going to go ahead

1147
00:53:15,579 --> 00:53:28,359
and say like we do want that right so I

1148
00:53:23,139 --> 00:53:31,210
think what we want to do here is we want

1149
00:53:28,358 --> 00:53:35,429
to do some adjustment I mean you know we

1150
00:53:31,210 --> 00:53:38,429
probably still want something like this

1151
00:53:35,429 --> 00:53:38,429
but

1152
00:53:41,380 --> 00:53:49,000
I think what we want to do here is say

1153
00:53:44,079 --> 00:53:54,819
look we know that we have a specific

1154
00:53:49,000 --> 00:53:57,639
region that's covered by the lighting

1155
00:53:54,820 --> 00:54:00,490
voxels themselves but we probably don't

1156
00:53:57,639 --> 00:54:02,529
actually want to use that for the

1157
00:54:00,489 --> 00:54:04,329
collision because we want to be able to

1158
00:54:02,530 --> 00:54:06,880
capture things that are outside of that

1159
00:54:04,329 --> 00:54:09,429
and still be able to cast so that we can

1160
00:54:06,880 --> 00:54:11,410
capture lights that are off-screen and

1161
00:54:09,429 --> 00:54:12,849
stuff like that we don't want those

1162
00:54:11,409 --> 00:54:14,049
things to disappear just because they're

1163
00:54:12,849 --> 00:54:16,119
off-screen because the lighting will

1164
00:54:14,050 --> 00:54:19,450
behave in an obviously erroneous way

1165
00:54:16,119 --> 00:54:21,369
that we probably wouldn't like so what I

1166
00:54:19,449 --> 00:54:23,460
would say is voxel dim with apron

1167
00:54:21,369 --> 00:54:27,219
probably is going to be something

1168
00:54:23,460 --> 00:54:30,159
slightly different than it's gonna have

1169
00:54:27,219 --> 00:54:37,500
to be larger so if we look at voxel dim

1170
00:54:30,159 --> 00:54:37,500
with apron and the table

1171
00:54:50,130 --> 00:54:55,570
yeah so if you look at where this is

1172
00:54:52,630 --> 00:54:58,510
actually being used right we probably

1173
00:54:55,570 --> 00:55:00,280
just want this thing to be larger so you

1174
00:54:58,510 --> 00:55:03,990
can see here that we enlarged it just

1175
00:55:00,280 --> 00:55:07,630
with an apron but the apron is not

1176
00:55:03,989 --> 00:55:09,609
probably what we actually want so we

1177
00:55:07,630 --> 00:55:16,150
probably want to do another thing here

1178
00:55:09,610 --> 00:55:18,390
which is like the extra occlusion bounds

1179
00:55:16,150 --> 00:55:18,389
right

1180
00:55:19,440 --> 00:55:25,960
probably extra collusion radius and what

1181
00:55:23,679 --> 00:55:28,449
we would say here is like look maybe we

1182
00:55:25,960 --> 00:55:32,559
want to go you know an extra two grid

1183
00:55:28,449 --> 00:55:36,099
squares down and extra like eight grid

1184
00:55:32,559 --> 00:55:39,130
squares to either side and up and down

1185
00:55:36,099 --> 00:55:41,849
or something you know and so what we

1186
00:55:39,130 --> 00:55:44,710
want to do here is say like you know

1187
00:55:41,849 --> 00:55:49,329
let's make sure we build a much larger

1188
00:55:44,710 --> 00:55:52,480
thing and let's make sure that instead

1189
00:55:49,329 --> 00:55:56,409
of using like the hot corner which is

1190
00:55:52,480 --> 00:56:00,760
what we would normally use we use some

1191
00:55:56,409 --> 00:56:04,000
other corner right so we have like

1192
00:56:00,760 --> 00:56:07,270
occlusion corner or something like this

1193
00:56:04,000 --> 00:56:16,630
or what is this called

1194
00:56:07,269 --> 00:56:18,550
it's called spatial grid corner so we

1195
00:56:16,630 --> 00:56:20,500
would want that where we could say okay

1196
00:56:18,550 --> 00:56:23,010
the spatial grid corner is this thing

1197
00:56:20,500 --> 00:56:27,760
that we're going to be able to look up

1198
00:56:23,010 --> 00:56:30,310
in here and what we want to do is we

1199
00:56:27,760 --> 00:56:34,240
want to compute where that should be

1200
00:56:30,309 --> 00:56:36,340
based on the apron so when we compute

1201
00:56:34,239 --> 00:56:38,679
the hot corner which we've already done

1202
00:56:36,340 --> 00:56:42,400
at this point when we go to do the

1203
00:56:38,679 --> 00:56:44,589
spatial grid corner in the solution we

1204
00:56:42,400 --> 00:56:52,800
want to go ahead and compute that by

1205
00:56:44,590 --> 00:56:56,050
taking the hot corner so this thing here

1206
00:56:52,800 --> 00:56:57,340
and I guess I'll make this called a

1207
00:56:56,050 --> 00:56:59,890
midden corner as well just so it's clear

1208
00:56:57,340 --> 00:57:02,750
which one we're talking about

1209
00:56:59,889 --> 00:57:05,000
and what I want to do is I want to take

1210
00:57:02,750 --> 00:57:07,130
the voxel cell dim and I just want to

1211
00:57:05,000 --> 00:57:13,068
step backwards by the occlusion radius

1212
00:57:07,130 --> 00:57:15,528
right so we want to multiply whatever

1213
00:57:13,068 --> 00:57:18,108
the Vox seldom is buy that extra

1214
00:57:15,528 --> 00:57:19,548
occlusion radius and then we've aligned

1215
00:57:18,108 --> 00:57:28,278
this voxel so that it's just like a

1216
00:57:19,548 --> 00:57:32,358
larger version of the same right we

1217
00:57:28,278 --> 00:57:36,679
probably need this value because without

1218
00:57:32,358 --> 00:57:38,989
the extra occlusion radius and so on we

1219
00:57:36,679 --> 00:57:41,989
also wouldn't know I guess technically

1220
00:57:38,989 --> 00:57:45,919
the voxel dim with apron

1221
00:57:41,989 --> 00:57:47,479
I might roll that in there too because

1222
00:57:45,920 --> 00:57:52,430
at this point since now they're

1223
00:57:47,480 --> 00:57:55,429
basically separate voxels we probably

1224
00:57:52,429 --> 00:57:58,548
just want to say look here's the radius

1225
00:57:55,429 --> 00:58:03,588
and that's going to be the same value as

1226
00:57:58,548 --> 00:58:13,099
the offset right so in here we could

1227
00:58:03,588 --> 00:58:14,000
store this as that radius so I could say

1228
00:58:13,099 --> 00:58:15,890
like okay

1229
00:58:14,000 --> 00:58:18,559
you know this is what the offset

1230
00:58:15,889 --> 00:58:20,298
actually is and that way when people are

1231
00:58:18,559 --> 00:58:28,789
doing computations on it they'll use

1232
00:58:20,298 --> 00:58:31,489
that and they'll be correct so I think

1233
00:58:28,789 --> 00:58:33,559
most everything else stays the same we

1234
00:58:31,489 --> 00:58:35,929
just have to change how we're doing that

1235
00:58:33,559 --> 00:58:37,579
indexing so that will be a little bit

1236
00:58:35,929 --> 00:58:40,848
different now than it would have been

1237
00:58:37,579 --> 00:58:43,130
before so now when we come through here

1238
00:58:40,849 --> 00:58:46,190
and we do this spatial grid news grid

1239
00:58:43,130 --> 00:58:48,140
index from like this but here the

1240
00:58:46,190 --> 00:58:51,759
problem we're going to have is get voxel

1241
00:58:48,139 --> 00:58:54,259
index for P is not determinative anymore

1242
00:58:51,759 --> 00:58:57,740
so there's a couple different ways we

1243
00:58:54,259 --> 00:59:01,789
could choose to do this and it's unclear

1244
00:58:57,739 --> 00:59:04,459
like exactly which ones way we want to

1245
00:59:01,789 --> 00:59:07,069
do it but what you can see here is this

1246
00:59:04,460 --> 00:59:08,539
will adjust to the min hot corner but we

1247
00:59:07,068 --> 00:59:09,739
now know that there's like a different

1248
00:59:08,539 --> 00:59:12,410
corner that we might want to use

1249
00:59:09,739 --> 00:59:13,250
sometimes and so possibly what we should

1250
00:59:12,409 --> 00:59:16,940
say here is

1251
00:59:13,250 --> 00:59:19,519
instead of you loading that stuff up out

1252
00:59:16,940 --> 00:59:24,159
of there maybe we pass them in corner in

1253
00:59:19,519 --> 00:59:27,159
I don't know and we say something like

1254
00:59:24,159 --> 00:59:27,159
okay

1255
00:59:30,070 --> 00:59:37,370
send us the min corner and then the P

1256
00:59:33,199 --> 00:59:38,619
and so here we would say look at the min

1257
00:59:37,369 --> 00:59:41,989
corner and off we go

1258
00:59:38,619 --> 00:59:47,000
now we don't need to actually do this we

1259
00:59:41,989 --> 00:59:47,929
can just get the P directly it was

1260
00:59:47,000 --> 00:59:57,920
that's not what I meant

1261
00:59:47,929 --> 01:00:01,369
I just meant that right so in theory now

1262
00:59:57,920 --> 01:00:04,460
we should be able to just do get voxel

1263
01:00:01,369 --> 01:00:06,109
index for P and we can pass the min

1264
01:00:04,460 --> 01:00:14,150
corner that we actually want which is

1265
01:00:06,110 --> 01:00:16,220
the spatial grid min corner and you know

1266
01:00:14,150 --> 01:00:18,099
it it occurs to me that we probably

1267
01:00:16,219 --> 01:00:20,869
should have a data structure that's like

1268
01:00:18,099 --> 01:00:22,250
voxel that has like these things in it

1269
01:00:20,869 --> 01:00:24,170
and then you just pass which one you

1270
01:00:22,250 --> 01:00:26,090
actually wanted so we may want to make a

1271
01:00:24,170 --> 01:00:28,430
utility for that at some point I just

1272
01:00:26,090 --> 01:00:32,410
don't know that now is that point but

1273
01:00:28,429 --> 01:00:32,409
like you know

1274
01:00:44,710 --> 01:00:49,880
we'll look at that a little bit later so

1275
01:00:47,869 --> 01:00:51,710
now we come through here and we step

1276
01:00:49,880 --> 01:00:54,050
through this will now get grin as sees

1277
01:00:51,710 --> 01:00:56,900
that should always be in line if they're

1278
01:00:54,050 --> 01:00:58,370
inside the problem is we do know that we

1279
01:00:56,900 --> 01:01:00,430
can have geometry that could be outside

1280
01:00:58,369 --> 01:01:04,789
and so we really want to do is just say

1281
01:01:00,429 --> 01:01:07,419
look this stuff should be clipped or

1282
01:01:04,789 --> 01:01:09,920
clamped to the minimum and maximum

1283
01:01:07,420 --> 01:01:13,700
places that this thing can actually be

1284
01:01:09,920 --> 01:01:16,730
and so I think what we want to do first

1285
01:01:13,699 --> 01:01:20,349
before we do this is to take like the

1286
01:01:16,730 --> 01:01:26,630
box itself and clip it to the entire

1287
01:01:20,349 --> 01:01:30,079
voxel and if it's outside it will get

1288
01:01:26,630 --> 01:01:32,660
clipped in if it's literally like

1289
01:01:30,079 --> 01:01:35,539
completely outside we'll end up with a

1290
01:01:32,659 --> 01:01:39,009
box that doesn't have any volume and so

1291
01:01:35,539 --> 01:01:42,068
we can just kind of discount it right

1292
01:01:39,010 --> 01:01:42,069
[Music]

1293
01:01:42,940 --> 01:01:47,929
there are other ways we could choose to

1294
01:01:45,440 --> 01:01:51,139
handle that and I don't necessarily know

1295
01:01:47,929 --> 01:01:52,369
that any of them are good so I think we

1296
01:01:51,139 --> 01:01:54,469
probably just want to do that but it's

1297
01:01:52,369 --> 01:01:59,509
worth noting so for example if we wanted

1298
01:01:54,469 --> 01:02:05,349
to we could just say hey anyone who is

1299
01:01:59,510 --> 01:02:07,820
outside just gets thrown into the apron

1300
01:02:05,349 --> 01:02:09,619
because we know that we're about to romp

1301
01:02:07,820 --> 01:02:12,050
over the apron with a terminator start

1302
01:02:09,619 --> 01:02:13,969
index anyway so that would be fine

1303
01:02:12,050 --> 01:02:15,950
but it just doesn't make sense to spend

1304
01:02:13,969 --> 01:02:18,500
a lot of time on geometry that's outside

1305
01:02:15,949 --> 01:02:20,960
what we're looking for anyway

1306
01:02:18,500 --> 01:02:23,440
so I don't think I'm gonna do that but

1307
01:02:20,960 --> 01:02:26,059
it's worth noting that you could write

1308
01:02:23,440 --> 01:02:29,990
so what I'd like to do now is I'd like

1309
01:02:26,059 --> 01:02:35,420
to just go and create a rectangle 3 for

1310
01:02:29,989 --> 01:02:37,639
the actual voxel and you know I'm just

1311
01:02:35,420 --> 01:02:42,289
going to do it let's just make an actual

1312
01:02:37,639 --> 01:02:46,250
function in here I'm an actual thing you

1313
01:02:42,289 --> 01:02:48,320
know we've got the Atlas the hand made

1314
01:02:46,250 --> 01:02:52,539
light atlas right let's just make like a

1315
01:02:48,320 --> 01:02:55,430
handmade like box all right

1316
01:02:52,539 --> 01:02:57,619
and if we wanted to do this we kind of

1317
01:02:55,429 --> 01:03:05,528
already know what they would take right

1318
01:02:57,619 --> 01:03:10,250
I mean this is what we want in there and

1319
01:03:05,528 --> 01:03:12,739
so if we have a voxel grid or a voxel

1320
01:03:10,250 --> 01:03:15,318
dimension I guess you might say voxel

1321
01:03:12,739 --> 01:03:18,649
spec I don't know what do we call it in

1322
01:03:15,318 --> 01:03:21,170
the Atlas case we just called it light

1323
01:03:18,650 --> 01:03:23,960
atlas so let's just let's just say it's

1324
01:03:21,170 --> 01:03:25,460
a voxel I mean voxel is it's not the

1325
01:03:23,960 --> 01:03:31,460
right term stocks as a pixel so I guess

1326
01:03:25,460 --> 01:03:35,720
this is a voxel grid and I'm going to

1327
01:03:31,460 --> 01:03:38,088
say it so in here we could just say look

1328
01:03:35,719 --> 01:03:40,909
there's a rectangle three that's the

1329
01:03:38,088 --> 01:03:42,980
total bounds of the voxel and then

1330
01:03:40,909 --> 01:03:48,500
there's the actual dimension in the

1331
01:03:42,980 --> 01:03:51,259
inverse dimension and I think that's all

1332
01:03:48,500 --> 01:03:53,420
we need to produce like the correct

1333
01:03:51,259 --> 01:04:00,039
calls that give us all the information

1334
01:03:53,420 --> 01:04:00,039
we want to know you know out of this

1335
01:04:03,789 --> 01:04:08,409
I mean I think that's that's just

1336
01:04:05,559 --> 01:04:09,909
everything we need right so then if we

1337
01:04:08,409 --> 01:04:12,219
like take a look at all the things we're

1338
01:04:09,909 --> 01:04:15,250
actually trying to do here with these

1339
01:04:12,219 --> 01:04:18,579
voxels so you know we've got this sort

1340
01:04:15,250 --> 01:04:20,739
of stuff all of this is stuff that now

1341
01:04:18,579 --> 01:04:24,519
we should be able to to just put in here

1342
01:04:20,739 --> 01:04:28,449
and compute so all of the the previous

1343
01:04:24,519 --> 01:04:33,130
you know voxel II sorts of things that

1344
01:04:28,449 --> 01:04:35,409
we were doing we should be able to have

1345
01:04:33,130 --> 01:04:37,539
them all work off of one of those trucks

1346
01:04:35,409 --> 01:04:39,699
and that's better because then we're

1347
01:04:37,539 --> 01:04:41,710
just not sort of spamming those

1348
01:04:39,699 --> 01:04:44,769
calculations everywhere and possibly

1349
01:04:41,710 --> 01:04:49,090
getting them wrong you know which is not

1350
01:04:44,769 --> 01:04:52,900
what we want so I'm gonna pull these out

1351
01:04:49,090 --> 01:04:57,100
and I'm just gonna take a quick look

1352
01:04:52,900 --> 01:04:58,720
through the code at that point to sort

1353
01:04:57,099 --> 01:05:03,190
of clean it up and make it all call

1354
01:04:58,719 --> 01:05:06,730
through here directly and this probably

1355
01:05:03,190 --> 01:05:08,200
will break our ability to load our

1356
01:05:06,730 --> 01:05:09,940
lighting stuff so we're gonna have to

1357
01:05:08,199 --> 01:05:11,379
probably take a new lighting sample but

1358
01:05:09,940 --> 01:05:17,409
that's okay because that's kind of been

1359
01:05:11,380 --> 01:05:19,750
a long time coming anyway so let's see I

1360
01:05:17,409 --> 01:05:22,269
don't see anything else particularly

1361
01:05:19,750 --> 01:05:24,429
suspicious in there so you know assuming

1362
01:05:22,269 --> 01:05:29,170
that this is what we think we might want

1363
01:05:24,429 --> 01:05:33,069
to do here I'm just going to like sketch

1364
01:05:29,170 --> 01:05:35,860
these out so we think we have one that

1365
01:05:33,070 --> 01:05:38,980
wants to take the center for a

1366
01:05:35,860 --> 01:05:41,470
particular index and in all of these

1367
01:05:38,980 --> 01:05:44,380
cases we probably want to versions of

1368
01:05:41,469 --> 01:05:46,779
this like an absolute index and a

1369
01:05:44,380 --> 01:05:48,760
regular index so we'd probably have

1370
01:05:46,780 --> 01:05:54,970
something that does like these two

1371
01:05:48,760 --> 01:05:57,010
different versions you know and I mean I

1372
01:05:54,969 --> 01:05:59,609
guess another way to do that would just

1373
01:05:57,010 --> 01:05:59,610
be to say

1374
01:06:04,900 --> 01:06:08,959
I'm gonna hold off on that because it is

1375
01:06:07,489 --> 01:06:11,150
harder to do so I'm not going to produce

1376
01:06:08,958 --> 01:06:16,788
ones that we don't actually know if we

1377
01:06:11,150 --> 01:06:29,239
need right so so yeah let's let's not do

1378
01:06:16,789 --> 01:06:31,819
that quite yet so each of these works on

1379
01:06:29,239 --> 01:06:44,539
the blown out coordinates like XY and Z

1380
01:06:31,818 --> 01:06:46,900
and then this can be a world P and then

1381
01:06:44,539 --> 01:06:51,789
just this one produces the flat index

1382
01:06:46,900 --> 01:06:51,789
right so

1383
01:07:06,349 --> 01:07:14,190
so get cell center P get cell bounds get

1384
01:07:09,989 --> 01:07:17,848
index for P flat index from and then

1385
01:07:14,190 --> 01:07:19,230
maybe like a utility function to get the

1386
01:07:17,849 --> 01:07:20,400
total bounce I think they can just go

1387
01:07:19,230 --> 01:07:21,539
ahead and reach in there and get it

1388
01:07:20,400 --> 01:07:24,690
because I'm not going to want to change

1389
01:07:21,539 --> 01:07:26,430
that storage so I think we're fine so

1390
01:07:24,690 --> 01:07:33,990
let's go ahead and and put these in

1391
01:07:26,429 --> 01:07:35,639
place so get cell center P here all we

1392
01:07:33,989 --> 01:07:39,258
really need to do is say all right we've

1393
01:07:35,639 --> 01:07:48,409
got the total bounds oops

1394
01:07:39,259 --> 01:07:52,009
dot min and then the grid box seldom

1395
01:07:48,409 --> 01:07:55,230
times the index and the centroid offset

1396
01:07:52,009 --> 01:07:57,269
get voxels cell bounds is now just plain

1397
01:07:55,230 --> 01:07:58,289
get cell bounds because we know since

1398
01:07:57,268 --> 01:08:00,808
we're passing grid is the first

1399
01:07:58,289 --> 01:08:04,528
parameter that we know exactly what we

1400
01:08:00,809 --> 01:08:06,930
are asking for there so get cell bounds

1401
01:08:04,528 --> 01:08:14,639
just says look produce the cell bounds

1402
01:08:06,929 --> 01:08:18,568
by taking the grid total bounds min and

1403
01:08:14,639 --> 01:08:21,420
adding these two now I don't know why we

1404
01:08:18,569 --> 01:08:22,259
wrote it this way that doesn't really

1405
01:08:21,420 --> 01:08:25,079
make any sense

1406
01:08:22,259 --> 01:08:34,350
because after you've computed this why

1407
01:08:25,079 --> 01:08:36,179
wouldn't you just add hit him huh that

1408
01:08:34,350 --> 01:08:38,338
was a really convoluted way to do that

1409
01:08:36,179 --> 01:08:39,770
and doesn't really make any sense so

1410
01:08:38,338 --> 01:08:42,539
we're just not going to do that anymore

1411
01:08:39,770 --> 01:08:46,190
so this gets the cell bounds for us here

1412
01:08:42,539 --> 01:08:49,469
and then we've got the get index for P

1413
01:08:46,189 --> 01:08:53,278
this one is the reverse mapping so this

1414
01:08:49,469 --> 01:08:56,369
one is trying to figure out based on the

1415
01:08:53,279 --> 01:08:59,069
world P that you give it so in order to

1416
01:08:56,369 --> 01:09:03,329
do that we need again that minimum

1417
01:08:59,069 --> 01:09:06,060
corner total bounce min and we're using

1418
01:09:03,329 --> 01:09:09,109
the inverse dimension here and then

1419
01:09:06,060 --> 01:09:12,228
again we subtract out that center value

1420
01:09:09,109 --> 01:09:12,228
[Music]

1421
01:09:13,548 --> 01:09:19,948
which I thought we fixed this I guess we

1422
01:09:16,979 --> 01:09:23,459
didn't fix it because we were doing it

1423
01:09:19,948 --> 01:09:25,138
in two different places so kind of

1424
01:09:23,460 --> 01:09:27,230
another reason why this is you know

1425
01:09:25,139 --> 01:09:30,509
something you probably want to do a

1426
01:09:27,229 --> 01:09:33,149
little bit more centralized but if you

1427
01:09:30,509 --> 01:09:37,710
take a look here right this is wrong

1428
01:09:33,149 --> 01:09:40,649
because when you do the floor it's not

1429
01:09:37,710 --> 01:09:42,719
rounding its flooring so to create the

1430
01:09:40,649 --> 01:09:48,479
correct center value it should be that

1431
01:09:42,719 --> 01:09:49,889
right so we must have had some other bug

1432
01:09:48,479 --> 01:09:51,329
in there that's why we put in that

1433
01:09:49,889 --> 01:09:52,350
correction and we just didn't think it

1434
01:09:51,329 --> 01:09:54,600
through or something because that

1435
01:09:52,350 --> 01:09:57,659
shouldn't be the case once you subtract

1436
01:09:54,600 --> 01:10:00,810
them in then until you actually go up

1437
01:09:57,658 --> 01:10:04,198
above the seldom number until you go

1438
01:10:00,810 --> 01:10:06,780
above one you're in that cell so the

1439
01:10:04,198 --> 01:10:08,519
correct cell index in this case is this

1440
01:10:06,779 --> 01:10:09,929
and it may have been because we were

1441
01:10:08,520 --> 01:10:13,320
doing something else with it at that

1442
01:10:09,929 --> 01:10:15,329
time but you know the actual index for

1443
01:10:13,319 --> 01:10:18,289
the cell is always this so so I think

1444
01:10:15,329 --> 01:10:24,929
that was just you know again just a

1445
01:10:18,289 --> 01:10:27,479
screw-up on our part so we now have the

1446
01:10:24,929 --> 01:10:29,670
grid index from this is again something

1447
01:10:27,479 --> 01:10:32,459
that just needs to compute it needs to

1448
01:10:29,670 --> 01:10:36,029
be in bounds we can also produce a thing

1449
01:10:32,460 --> 01:10:40,639
that tells us that value so we can say

1450
01:10:36,029 --> 01:10:43,109
like is in bounds and we can use this as

1451
01:10:40,639 --> 01:10:45,420
the actual check and then here we can

1452
01:10:43,109 --> 01:10:48,779
just say assert that it's in the bounds

1453
01:10:45,420 --> 01:10:52,829
so we would just say for this Fox little

1454
01:10:48,779 --> 01:10:56,420
grid and this p-value this is actually

1455
01:10:52,829 --> 01:10:56,420
an index value not a p-value

1456
01:10:59,500 --> 01:11:03,880
so for that particular p-value off you

1457
01:11:03,460 --> 01:11:07,710
go

1458
01:11:03,880 --> 01:11:07,710
oh you know what else we need here is

1459
01:11:09,989 --> 01:11:17,469
the count so we need the cell count

1460
01:11:14,159 --> 01:11:19,510
right so these are the dimensions of the

1461
01:11:17,470 --> 01:11:21,430
thing that we didn't actually store how

1462
01:11:19,510 --> 01:11:22,050
many cells there were we do need to do

1463
01:11:21,430 --> 01:11:24,789
that

1464
01:11:22,050 --> 01:11:29,800
so in here this is actually cell conex

1465
01:11:24,789 --> 01:11:32,710
cell count Y and when we do in bounds

1466
01:11:29,800 --> 01:11:34,090
we're gonna be checking the cell now so

1467
01:11:32,710 --> 01:11:36,550
I'm going to pull the cell count out

1468
01:11:34,090 --> 01:11:44,710
here just for ease of my own referencing

1469
01:11:36,550 --> 01:11:46,630
so just grab that value like so and we

1470
01:11:44,710 --> 01:11:49,989
can now test if things are in bound by

1471
01:11:46,630 --> 01:11:52,600
testing the index and instead of

1472
01:11:49,989 --> 01:11:55,809
asserting these I'll just pull them in

1473
01:11:52,600 --> 01:11:59,140
to a function so the result of this

1474
01:11:55,810 --> 01:12:04,180
function is just going to be the ending

1475
01:11:59,140 --> 01:12:06,930
of all of these so if all of these

1476
01:12:04,180 --> 01:12:06,930
things are true

1477
01:12:17,439 --> 01:12:24,079
so if all of these things are true then

1478
01:12:20,569 --> 01:12:26,149
you get the results of it being inbound

1479
01:12:24,079 --> 01:12:28,460
if any one of them fails it means that

1480
01:12:26,149 --> 01:12:30,799
one of the indices indices is out of

1481
01:12:28,460 --> 01:12:36,170
range at which point it will return

1482
01:12:30,800 --> 01:12:37,699
false and fail so we can assert that

1483
01:12:36,170 --> 01:12:40,069
it's inbounds here and people can also

1484
01:12:37,699 --> 01:12:44,420
do the check for inbounds later we now

1485
01:12:40,069 --> 01:12:50,449
produce the flat index this is supposed

1486
01:12:44,420 --> 01:12:55,940
to be flat in next round and I think

1487
01:12:50,449 --> 01:12:58,670
that's what we want so now what we want

1488
01:12:55,939 --> 01:13:01,849
to do too is say okay we need a way to

1489
01:12:58,670 --> 01:13:04,970
create one of these so this is makefox

1490
01:13:01,850 --> 01:13:07,370
look grid it's going to return one of

1491
01:13:04,970 --> 01:13:09,440
these and what we're going to do is

1492
01:13:07,369 --> 01:13:11,210
initialize the values in it to various

1493
01:13:09,439 --> 01:13:12,919
things and we're going to make it as

1494
01:13:11,210 --> 01:13:15,289
easy as possible for people to construct

1495
01:13:12,920 --> 01:13:17,329
by computing all of these values based

1496
01:13:15,289 --> 01:13:24,350
off of just a few basic values that they

1497
01:13:17,329 --> 01:13:26,329
pass in so in terms of these actual

1498
01:13:24,350 --> 01:13:29,539
values all we really need is to sell

1499
01:13:26,329 --> 01:13:34,489
them so if you pass in the seldom and

1500
01:13:29,539 --> 01:13:36,319
then the count right so we have this

1501
01:13:34,489 --> 01:13:39,079
many of this thing or something like

1502
01:13:36,319 --> 01:13:41,529
that then from there we can initialize

1503
01:13:39,079 --> 01:13:44,180
this cell count and the seldom directly

1504
01:13:41,529 --> 01:13:53,019
also I don't know why I didn't just call

1505
01:13:44,180 --> 01:13:53,020
that seldom let's fix that

1506
01:14:01,948 --> 01:14:07,089
the other values can be computed from

1507
01:14:04,420 --> 01:14:10,359
that so you know the inverse seldom is

1508
01:14:07,090 --> 01:14:12,190
just one over the seldom right and the

1509
01:14:10,359 --> 01:14:17,109
total bounds is just going to be the

1510
01:14:12,189 --> 01:14:22,238
cell count times a seldom right so this

1511
01:14:17,109 --> 01:14:23,859
is a Hadamard product now we do need one

1512
01:14:22,238 --> 01:14:25,629
more piece of information because with

1513
01:14:23,859 --> 01:14:27,250
only this piece of information we

1514
01:14:25,630 --> 01:14:29,199
wouldn't actually know where it is so we

1515
01:14:27,250 --> 01:14:32,380
need to know what the minimum corner is

1516
01:14:29,198 --> 01:14:34,658
and we can add that in here so here they

1517
01:14:32,380 --> 01:14:36,429
just passed one corner how many cells

1518
01:14:34,658 --> 01:14:37,719
there are in it and what the dimension

1519
01:14:36,429 --> 01:14:40,449
of each cell is and then we'll fill in

1520
01:14:37,719 --> 01:14:43,239
all the dependent values based on that

1521
01:14:40,448 --> 01:14:44,859
okay so like the max and the inverse

1522
01:14:43,238 --> 01:14:46,000
which are computed off it we don't have

1523
01:14:44,859 --> 01:14:47,848
to they don't have to pass this in

1524
01:14:46,000 --> 01:14:50,679
because we can tell what those are so

1525
01:14:47,849 --> 01:14:54,190
that will make a voxel grid for us and

1526
01:14:50,679 --> 01:14:58,449
this will presumably allow us to you

1527
01:14:54,189 --> 01:15:01,238
know write some utility functions as

1528
01:14:58,448 --> 01:15:03,029
well that you know if we have two

1529
01:15:01,238 --> 01:15:05,888
different voxels and we want to

1530
01:15:03,029 --> 01:15:09,130
translate between indices and from one

1531
01:15:05,889 --> 01:15:11,460
to the other things like that presumably

1532
01:15:09,130 --> 01:15:14,980
we should be able to do that as well

1533
01:15:11,460 --> 01:15:17,109
we'll see so let's take a look at now

1534
01:15:14,979 --> 01:15:19,629
what happens in the lighting if we were

1535
01:15:17,109 --> 01:15:21,488
going to do this and move from here

1536
01:15:19,630 --> 01:15:23,230
what I want to do now is take a look at

1537
01:15:21,488 --> 01:15:26,079
how we would actually place this in the

1538
01:15:23,229 --> 01:15:28,658
lighting so let's go ahead and destroy

1539
01:15:26,079 --> 01:15:31,300
our ability to run the current sample

1540
01:15:28,658 --> 01:15:34,269
code because I mean let's face it it's

1541
01:15:31,300 --> 01:15:37,179
it's not gonna happen the box ref count

1542
01:15:34,270 --> 01:15:38,949
in the box of all this stuff is gone so

1543
01:15:37,179 --> 01:15:42,760
I'm gonna go ahead and say look we're

1544
01:15:38,948 --> 01:15:45,069
gonna end up with just this now I would

1545
01:15:42,760 --> 01:15:47,409
also say that like the scratch ABC

1546
01:15:45,069 --> 01:15:51,939
nonsense we can pull that out of here

1547
01:15:47,408 --> 01:15:54,519
too because even if we want to run the

1548
01:15:51,939 --> 01:15:57,250
spatial partition stuff that is still

1549
01:15:54,520 --> 01:16:00,280
using that information so you can see it

1550
01:15:57,250 --> 01:16:02,500
like using the scratch stuff what we can

1551
01:16:00,279 --> 01:16:04,809
do instead is just now push those on

1552
01:16:02,500 --> 01:16:06,579
here as array pushes

1553
01:16:04,810 --> 01:16:07,390
because they don't need to persist

1554
01:16:06,579 --> 01:16:11,079
outside

1555
01:16:07,390 --> 01:16:13,510
right so when we go through here and we

1556
01:16:11,079 --> 01:16:17,199
need like scratch a and scratch C and

1557
01:16:13,510 --> 01:16:19,020
all this garbage we should be able to

1558
01:16:17,199 --> 01:16:21,819
make that work without ever actually

1559
01:16:19,020 --> 01:16:24,670
having those you know having to keep

1560
01:16:21,819 --> 01:16:27,309
those inside the lighting solution so we

1561
01:16:24,670 --> 01:16:28,659
can have you know an effect I could just

1562
01:16:27,310 --> 01:16:31,840
do them like this but I probably don't

1563
01:16:28,659 --> 01:16:34,869
actually want to because of the size of

1564
01:16:31,840 --> 01:16:37,150
those I don't know if there's any

1565
01:16:34,869 --> 01:16:38,529
downside to me just doing a push I don't

1566
01:16:37,149 --> 01:16:43,599
think anyone does an array count on

1567
01:16:38,529 --> 01:16:45,729
those do they they don't so I should be

1568
01:16:43,600 --> 01:16:50,500
able to just literally do this where we

1569
01:16:45,729 --> 01:17:01,869
just do a push array here and each one

1570
01:16:50,500 --> 01:17:04,569
of these oops just creates the same

1571
01:17:01,869 --> 01:17:10,659
table that we used half but now it's

1572
01:17:04,569 --> 01:17:12,849
actually you know actually if it was me

1573
01:17:10,659 --> 01:17:17,649
which it was I probably would have put

1574
01:17:12,850 --> 01:17:19,960
the type second so we can just use the

1575
01:17:17,649 --> 01:17:21,579
temporary nough now that we passed that

1576
01:17:19,960 --> 01:17:23,260
through properly to for all of our

1577
01:17:21,579 --> 01:17:25,470
scratch space because we know that

1578
01:17:23,260 --> 01:17:29,590
doesn't need to persist frame-to-frame

1579
01:17:25,470 --> 01:17:33,760
so that's just you know a handy little

1580
01:17:29,590 --> 01:17:38,020
thing it looks like we accidentally

1581
01:17:33,760 --> 01:17:44,730
deleted something here though yeah we

1582
01:17:38,020 --> 01:17:44,730
did Miriam

1583
01:17:45,770 --> 01:17:50,490
so now we can start to collapse this

1584
01:17:47,880 --> 01:17:53,760
down a little bit so the scratch buffers

1585
01:17:50,489 --> 01:17:55,409
go away eventually like a lot of this

1586
01:17:53,760 --> 01:17:57,180
stuff will go away so the box count and

1587
01:17:55,409 --> 01:17:58,289
the boxes and the root box and all that

1588
01:17:57,180 --> 01:18:05,220
stuff

1589
01:17:58,289 --> 01:18:07,010
this will all go away as well none of

1590
01:18:05,220 --> 01:18:09,329
this stuff is necessary I don't think

1591
01:18:07,010 --> 01:18:10,890
because the boxes can just be passed

1592
01:18:09,329 --> 01:18:13,140
through directly so I think a lot of

1593
01:18:10,890 --> 01:18:19,920
that stuff will just get will just get

1594
01:18:13,140 --> 01:18:22,860
removed okay so looking through what we

1595
01:18:19,920 --> 01:18:25,079
actually have here again the the Vox mid

1596
01:18:22,859 --> 01:18:28,259
corner Selden this stuff here so we now

1597
01:18:25,079 --> 01:18:30,689
have two of these right we have the

1598
01:18:28,260 --> 01:18:32,550
Atlas grid which is how we're actually

1599
01:18:30,689 --> 01:18:35,909
storing the lighting information and

1600
01:18:32,550 --> 01:18:43,050
then we have the occluder grid or the

1601
01:18:35,909 --> 01:18:44,550
spatial grid I guess and I don't know

1602
01:18:43,050 --> 01:18:45,869
that those are the best names so we

1603
01:18:44,550 --> 01:18:48,449
might want to think about this a little

1604
01:18:45,869 --> 01:18:50,220
bit like there's the lighting atlas and

1605
01:18:48,449 --> 01:18:52,920
that has a grid associated with it and

1606
01:18:50,220 --> 01:18:55,800
then there's the like actual spatial

1607
01:18:52,920 --> 01:19:01,109
queries and so I don't know Atlas and

1608
01:18:55,800 --> 01:19:13,860
spatial might be the best or they might

1609
01:19:01,109 --> 01:19:16,259
not be so we'll see and I think that's

1610
01:19:13,859 --> 01:19:23,819
probably all we need so if you look at

1611
01:19:16,260 --> 01:19:25,800
like these things here we probably still

1612
01:19:23,819 --> 01:19:27,389
need that one because it's a non-obvious

1613
01:19:25,800 --> 01:19:29,670
thing that's a little bit difficult to

1614
01:19:27,390 --> 01:19:31,020
derive you wouldn't necessarily know

1615
01:19:29,670 --> 01:19:32,489
that these things are exactly offset

1616
01:19:31,020 --> 01:19:33,900
just by looking at them and you'd have

1617
01:19:32,489 --> 01:19:35,219
to do a floating-point comparison to

1618
01:19:33,899 --> 01:19:38,219
term and that's probably don't want that

1619
01:19:35,220 --> 01:19:45,270
to happen we don't need this we do need

1620
01:19:38,220 --> 01:19:46,770
the light sampling walk table and the

1621
01:19:45,270 --> 01:19:49,520
rest of this stuff looks like pretty

1622
01:19:46,770 --> 01:19:49,520
harmless right

1623
01:19:50,250 --> 01:19:55,239
the diffuse weight map is probably

1624
01:19:53,619 --> 01:19:59,460
something we want to generate offline as

1625
01:19:55,239 --> 01:19:59,460
well but you know

1626
01:20:04,300 --> 01:20:10,989
I would say nothing else here looks

1627
01:20:07,328 --> 01:20:17,229
particularly suspicious so I think this

1628
01:20:10,988 --> 01:20:18,549
is okay now all that looks fine and so

1629
01:20:17,229 --> 01:20:20,649
when I'm actually initializing this

1630
01:20:18,550 --> 01:20:24,130
stuff now I'm gonna have to change where

1631
01:20:20,649 --> 01:20:27,368
I'm actually asking for it right and so

1632
01:20:24,130 --> 01:20:29,828
I'm going to go into handmade well I

1633
01:20:27,368 --> 01:20:39,158
guess at the moment it be HH light prof

1634
01:20:29,828 --> 01:20:44,139
and I'm going to include that voxel and

1635
01:20:39,158 --> 01:20:48,908
we also need the CPP for it so we'll

1636
01:20:44,139 --> 01:20:51,900
include both of those and now we need to

1637
01:20:48,908 --> 01:20:53,189
just debug anything here that is

1638
01:20:51,899 --> 01:20:57,129
incorrect

1639
01:20:53,189 --> 01:21:00,638
I'm not sure what the problem is Oh so

1640
01:20:57,130 --> 01:21:04,059
the flat index from in this case I've

1641
01:21:00,639 --> 01:21:05,440
got the safe truncate to u16 I mean I

1642
01:21:04,059 --> 01:21:08,110
guess we'll let the person on the

1643
01:21:05,439 --> 01:21:09,368
outside do that because I mean hey if

1644
01:21:08,109 --> 01:21:10,509
someone does want to use this in

1645
01:21:09,368 --> 01:21:12,880
someplace where they've got like a

1646
01:21:10,510 --> 01:21:15,520
really large box or something there's

1647
01:21:12,880 --> 01:21:16,989
nearly no reason we have to do that here

1648
01:21:15,520 --> 01:21:19,480
because everything else in the system

1649
01:21:16,988 --> 01:21:21,549
supports it so it seems pretty

1650
01:21:19,479 --> 01:21:23,948
straightforward to just return it this

1651
01:21:21,550 --> 01:21:25,989
way and call it a day so I'm totally

1652
01:21:23,948 --> 01:21:29,888
fine with that the person on the outside

1653
01:21:25,988 --> 01:21:32,109
can verify the value so in this case

1654
01:21:29,889 --> 01:21:37,690
cell count we didn't actually pull it

1655
01:21:32,109 --> 01:21:39,339
out we should have in here we've got the

1656
01:21:37,689 --> 01:21:41,710
cell count and seldom Hadamard product

1657
01:21:39,340 --> 01:21:43,630
this needs to be lofted up to a float in

1658
01:21:41,710 --> 01:21:46,118
order to do that multiplied so that's

1659
01:21:43,630 --> 01:21:48,849
got to happen there and this total

1660
01:21:46,118 --> 01:21:50,589
bounds here I didn't quite specify it

1661
01:21:48,849 --> 01:21:53,520
properly but so what we really want to

1662
01:21:50,590 --> 01:21:58,328
do here is say that this is a rectangle

1663
01:21:53,520 --> 01:22:00,520
min dim so you know here's the minimum

1664
01:21:58,328 --> 01:22:03,219
corner and then here's the dimension of

1665
01:22:00,520 --> 01:22:07,360
it and that will create it for us I

1666
01:22:03,219 --> 01:22:09,069
believe so at that point now all the

1667
01:22:07,359 --> 01:22:11,589
things that we were calling before so

1668
01:22:09,069 --> 01:22:14,198
all of this stuff all wants to be

1669
01:22:11,590 --> 01:22:16,059
calling our new system now so we pretty

1670
01:22:14,198 --> 01:22:17,329
much just really you know honestly we

1671
01:22:16,059 --> 01:22:19,760
just want to vaporize this

1672
01:22:17,329 --> 01:22:22,430
thing and then we've got to think about

1673
01:22:19,760 --> 01:22:23,960
what we want to do for this and so the

1674
01:22:22,430 --> 01:22:26,450
reason that this is a little bit tricky

1675
01:22:23,960 --> 01:22:29,750
is because it actually needs the F chord

1676
01:22:26,449 --> 01:22:31,550
to produce the remainder and so I think

1677
01:22:29,750 --> 01:22:34,340
what we probably want to do here is

1678
01:22:31,550 --> 01:22:36,440
actually have a composite return that

1679
01:22:34,340 --> 01:22:38,449
gives this information back because you

1680
01:22:36,439 --> 01:22:39,409
know that this is something that you're

1681
01:22:38,449 --> 01:22:42,109
going to want

1682
01:22:39,409 --> 01:22:43,639
so like the UVW coordinates for example

1683
01:22:42,109 --> 01:22:48,469
are things that you often want to use

1684
01:22:43,640 --> 01:22:51,110
there and so although this B chord is

1685
01:22:48,470 --> 01:22:53,240
something that is unique to what's going

1686
01:22:51,109 --> 01:22:55,099
on here this is actually a computation

1687
01:22:53,239 --> 01:22:57,529
that's probably what you would want to

1688
01:22:55,100 --> 01:23:03,700
do anyway so I'm going to call that

1689
01:22:57,529 --> 01:23:03,699
something along the lines of like

1690
01:23:17,359 --> 01:23:28,409
I'm gonna call that something like Vox

1691
01:23:21,238 --> 01:23:31,769
soul relative P and it will just have

1692
01:23:28,409 --> 01:23:34,979
this information in it so inside here

1693
01:23:31,770 --> 01:23:37,500
what we'll do is we'll say alright so

1694
01:23:34,979 --> 01:23:38,399
there's an index that we're going to

1695
01:23:37,500 --> 01:23:43,979
return to you

1696
01:23:38,399 --> 01:23:45,509
and then there's a UVW and the beat

1697
01:23:43,979 --> 01:23:47,429
chord in this case doesn't get used

1698
01:23:45,510 --> 01:23:49,739
outside so we probably just won't return

1699
01:23:47,430 --> 01:23:54,750
that for now if someone actually ends up

1700
01:23:49,738 --> 01:23:58,699
needing it then we'll start passing it

1701
01:23:54,750 --> 01:24:02,399
so then in here where you actually call

1702
01:23:58,699 --> 01:24:04,139
functions like get index for P those

1703
01:24:02,399 --> 01:24:08,089
will actually go through a separate

1704
01:24:04,140 --> 01:24:08,090
thing that's like get fox or relativity

1705
01:24:13,310 --> 01:24:23,120
so when you when you call this function

1706
01:24:26,300 --> 01:24:37,260
to get the relative p value it's

1707
01:24:29,100 --> 01:24:38,430
actually gonna do this instead in this

1708
01:24:37,260 --> 01:24:40,020
case we know we're always filling out

1709
01:24:38,430 --> 01:24:43,020
the entire results so it's probably fine

1710
01:24:40,020 --> 01:24:47,040
to not initialize so here we're gonna

1711
01:24:43,020 --> 01:24:54,690
say look the result UVW and the result

1712
01:24:47,039 --> 01:24:58,470
index are computed here oops and we know

1713
01:24:54,689 --> 01:25:06,029
the in voxel dim and we know the total

1714
01:24:58,470 --> 01:25:09,060
bounds men and the world P goes here so

1715
01:25:06,029 --> 01:25:13,829
that's our entire think our entire thing

1716
01:25:09,060 --> 01:25:16,830
and now forget index for P what it can

1717
01:25:13,829 --> 01:25:20,659
do is just say well you know the result

1718
01:25:16,829 --> 01:25:20,659
is just get relative P

1719
01:25:20,840 --> 01:25:27,140
of this thing and just only take the

1720
01:25:24,289 --> 01:25:28,880
index so it's just a utility function at

1721
01:25:27,140 --> 01:25:31,970
that point which we don't really even

1722
01:25:28,880 --> 01:25:33,560
need to provide if we don't want to but

1723
01:25:31,970 --> 01:25:37,150
for now we just will keep it so people

1724
01:25:33,560 --> 01:25:37,150
who were calling that can still call it

1725
01:25:38,439 --> 01:25:45,289
all right so now this function can just

1726
01:25:41,329 --> 01:25:51,699
do voxel voxel relative P to get out the

1727
01:25:45,289 --> 01:25:55,340
like a rel p-value or a vox r LP - and

1728
01:25:51,699 --> 01:25:57,559
it'll pass the atlas grid which is what

1729
01:25:55,340 --> 01:26:00,199
it's using and the sample p which is

1730
01:25:57,560 --> 01:26:01,880
what its sampling it'll then have the

1731
01:26:00,199 --> 01:26:03,199
values it actually needs and we probably

1732
01:26:01,880 --> 01:26:04,699
want to leave those we don't have to

1733
01:26:03,199 --> 01:26:06,289
rewrite the rest this function because

1734
01:26:04,699 --> 01:26:08,689
they're just different names for the

1735
01:26:06,289 --> 01:26:10,340
same thing so what we can do here is say

1736
01:26:08,689 --> 01:26:13,009
well what we needed was a voxel index

1737
01:26:10,340 --> 01:26:19,670
and a UVW we have both of those two

1738
01:26:13,010 --> 01:26:21,140
things and here they are and the rest of

1739
01:26:19,670 --> 01:26:26,270
the function should be able to remain in

1740
01:26:21,140 --> 01:26:32,780
theory unchanged all right so that's all

1741
01:26:26,270 --> 01:26:34,940
fine and good later on in here what we

1742
01:26:32,779 --> 01:26:37,399
need to do now is figure out how we're

1743
01:26:34,939 --> 01:26:39,589
actually going to get the rest of these

1744
01:26:37,399 --> 01:26:41,629
values that we need so in this

1745
01:26:39,590 --> 01:26:43,460
particular case where we have voxel gym

1746
01:26:41,630 --> 01:26:46,489
with apron that's not going to exist

1747
01:26:43,460 --> 01:26:49,159
anymore in anything that we actually

1748
01:26:46,489 --> 01:26:53,059
need to look at what we're gonna do

1749
01:26:49,159 --> 01:26:55,069
instead here is probably just offset the

1750
01:26:53,060 --> 01:26:58,190
grid index value directly so probably

1751
01:26:55,069 --> 01:27:03,710
what we do is we'd say okay the grid

1752
01:26:58,189 --> 01:27:10,939
index that we're going to have what was

1753
01:27:03,710 --> 01:27:13,399
it called flat index we're gonna ask for

1754
01:27:10,939 --> 01:27:18,739
the flat index and we're gonna ask for

1755
01:27:13,399 --> 01:27:23,299
that in the spatial grid and what we're

1756
01:27:18,739 --> 01:27:26,300
gonna ask for is specifically the voxel

1757
01:27:23,300 --> 01:27:29,320
index that we're at in the voxel dem

1758
01:27:26,300 --> 01:27:33,739
we're actually using for our atlas right

1759
01:27:29,319 --> 01:27:34,670
for our spec atlas and we're just going

1760
01:27:33,739 --> 01:27:40,840
to go ahead

1761
01:27:34,670 --> 01:27:45,380
and take that and offset it by the

1762
01:27:40,840 --> 01:27:53,090
offset value we stored here right so I

1763
01:27:45,380 --> 01:27:56,779
guess what we'd call this is like Atlas

1764
01:27:53,090 --> 01:27:58,969
two spatial grid index offset so we're

1765
01:27:56,779 --> 01:28:01,340
going from the Atlas to the spatial grid

1766
01:27:58,969 --> 01:28:04,489
right so that would give us what we

1767
01:28:01,340 --> 01:28:08,390
expect this is going to have to be a

1768
01:28:04,488 --> 01:28:10,639
safe truncate because again the voxel

1769
01:28:08,390 --> 01:28:25,940
routines don't this is what is happening

1770
01:28:10,640 --> 01:28:35,020
there what the heck I do not know what

1771
01:28:25,939 --> 01:28:35,019
is wrong here okay

1772
01:28:42,579 --> 01:28:46,880
so I believe we have got rid of the bugs

1773
01:28:45,350 --> 01:28:49,370
but I don't know if or coder is very

1774
01:28:46,880 --> 01:29:01,430
unhappy about that so let's do it this

1775
01:28:49,369 --> 01:29:04,159
way so this way the initial grit index

1776
01:29:01,430 --> 01:29:06,829
is computed and stored as the 32-bit

1777
01:29:04,159 --> 01:29:12,099
value and then what I'll do is when I

1778
01:29:06,829 --> 01:29:15,619
was going to go use it which is here

1779
01:29:12,100 --> 01:29:19,220
I'll do a safe truncate there so that

1780
01:29:15,619 --> 01:29:22,670
way we just know like hey we'll down

1781
01:29:19,220 --> 01:29:25,100
shift to 16 and if somehow we blow out

1782
01:29:22,670 --> 01:29:28,399
the that outer space it'll assert and

1783
01:29:25,100 --> 01:29:30,470
we'll know so then we want to do the Box

1784
01:29:28,399 --> 01:29:39,170
entropy here you can see us doing like a

1785
01:29:30,470 --> 01:29:43,570
computation to get that this is not

1786
01:29:39,170 --> 01:29:47,930
necessary anymore so Vox Center P

1787
01:29:43,569 --> 01:29:50,239
presumably isn't a thing yeah so all we

1788
01:29:47,930 --> 01:29:58,750
need to do here is like get cell center

1789
01:29:50,239 --> 01:29:58,750
P and pass the Atlas grid and

1790
01:30:09,158 --> 01:30:24,109
so yeah like interestingly enough let's

1791
01:30:16,819 --> 01:30:26,058
look at this for a second so you can see

1792
01:30:24,109 --> 01:30:27,529
here we were constructing this index and

1793
01:30:26,059 --> 01:30:29,900
we needed this index up here so I think

1794
01:30:27,529 --> 01:30:32,478
what we want to do is like to say like

1795
01:30:29,899 --> 01:30:34,788
box index and I think we just want to

1796
01:30:32,479 --> 01:30:37,159
have this right cuz it looks like we

1797
01:30:34,788 --> 01:30:39,018
need it in a bunch of places so here's

1798
01:30:37,158 --> 01:30:46,638
our box index and what we can call us

1799
01:30:39,019 --> 01:30:48,619
this our Atlas index maybe so that way

1800
01:30:46,639 --> 01:30:59,479
when we do this we can you know just say

1801
01:30:48,618 --> 01:31:04,509
get cell center P solution Atlas atlas

1802
01:30:59,479 --> 01:31:08,199
grid and then use the Atlas index right

1803
01:31:04,510 --> 01:31:10,550
and that gets rid of all this code now

1804
01:31:08,198 --> 01:31:12,589
what you might notice is that like the

1805
01:31:10,550 --> 01:31:15,829
speck Atlas itself also has the

1806
01:31:12,590 --> 01:31:17,989
dimension in it so it feels like maybe

1807
01:31:15,828 --> 01:31:19,518
those things kind of want to be

1808
01:31:17,988 --> 01:31:21,138
regularized a little bit but

1809
01:31:19,519 --> 01:31:22,699
unfortunately I don't think you really

1810
01:31:21,139 --> 01:31:27,739
want to do that because they're sort of

1811
01:31:22,698 --> 01:31:30,438
a little bit separate it only cares what

1812
01:31:27,738 --> 01:31:33,228
the dimension of the voxel is in the in

1813
01:31:30,439 --> 01:31:35,329
the actual Atlas ease they don't care

1814
01:31:33,229 --> 01:31:36,650
about min corners so it'd be a little

1815
01:31:35,328 --> 01:31:37,938
bit weird for them to have their entire

1816
01:31:36,649 --> 01:31:39,498
voxel in there and you just have to

1817
01:31:37,939 --> 01:31:42,289
update them all the time which I don't

1818
01:31:39,498 --> 01:31:43,849
know that we really want now maybe we

1819
01:31:42,288 --> 01:31:45,319
would say well okay what what if we

1820
01:31:43,849 --> 01:31:52,578
maybe wanted to store them aligned

1821
01:31:45,319 --> 01:31:54,319
separately I mean I don't know that that

1822
01:31:52,578 --> 01:31:57,948
would even work because they need to be

1823
01:31:54,319 --> 01:31:59,808
transferred between but so it's hard to

1824
01:31:57,948 --> 01:32:02,118
say like maybe unify those eventually

1825
01:31:59,809 --> 01:32:05,269
maybe you don't certainly haven't seen

1826
01:32:02,118 --> 01:32:09,918
enough quite yet to know so I'm not

1827
01:32:05,269 --> 01:32:11,929
going to do that just yet but looks like

1828
01:32:09,918 --> 01:32:13,279
this is a u32 for some reason and I

1829
01:32:11,929 --> 01:32:15,609
don't know why because the rest of these

1830
01:32:13,279 --> 01:32:15,609
aren't

1831
01:32:16,078 --> 01:32:23,558
so let's keep going okay that doesn't

1832
01:32:19,599 --> 01:32:28,958
need the second close quote anymore

1833
01:32:23,559 --> 01:32:31,510
so okay so in here we've got the spatial

1834
01:32:28,958 --> 01:32:34,418
partition build for the KD tree in here

1835
01:32:31,510 --> 01:32:36,579
and we're building both of those I don't

1836
01:32:34,418 --> 01:32:38,078
really want this anymore I'm pretty sure

1837
01:32:36,578 --> 01:32:43,448
we're just never gonna use these again

1838
01:32:38,078 --> 01:32:47,259
so I'm not gonna port the KD tree build

1839
01:32:43,448 --> 01:32:48,908
it all I think it was just it was the

1840
01:32:47,260 --> 01:32:50,829
thing we went down that just didn't pan

1841
01:32:48,908 --> 01:32:55,288
out and isn't actually as good as the

1842
01:32:50,828 --> 01:32:57,969
grid version okay so in the box index

1843
01:32:55,288 --> 01:33:00,128
stuff here where we're doing the get

1844
01:32:57,969 --> 01:33:01,719
voxel in extra P these again are just

1845
01:33:00,128 --> 01:33:03,760
going to be get index trapeze and

1846
01:33:01,719 --> 01:33:05,739
they're going to be passing in this case

1847
01:33:03,760 --> 01:33:10,539
the one that we actually want so it's

1848
01:33:05,738 --> 01:33:12,098
going to be solution spatial grid and

1849
01:33:10,538 --> 01:33:13,599
now that's a lot cleaner like we can see

1850
01:33:12,099 --> 01:33:16,050
what's going on there and it's not weird

1851
01:33:13,599 --> 01:33:16,050
right

1852
01:33:24,130 --> 01:33:34,630
I'm not sure what the I'm not sure what

1853
01:33:30,219 --> 01:33:40,569
it doesn't like about that though why is

1854
01:33:34,630 --> 01:33:45,130
it complaining about that no it's not it

1855
01:33:40,569 --> 01:33:46,899
was just kind of old news all right all

1856
01:33:45,130 --> 01:33:49,239
right so now what we need is we need to

1857
01:33:46,899 --> 01:33:51,729
do the flat index from here where we say

1858
01:33:49,238 --> 01:33:54,968
that we want the flat index in the

1859
01:33:51,729 --> 01:33:57,609
spatial grid you know from this index

1860
01:33:54,969 --> 01:34:01,328
that we actually have I'm gonna make

1861
01:33:57,609 --> 01:34:07,299
that be a box index here right for

1862
01:34:01,328 --> 01:34:13,359
spatial index just so it's clear what's

1863
01:34:07,300 --> 01:34:16,690
going on there and what I'd like to do

1864
01:34:13,359 --> 01:34:18,519
here is I would like to add the code

1865
01:34:16,689 --> 01:34:20,919
that we were had been working on when I

1866
01:34:18,520 --> 01:34:23,650
went down this road of cleaning up the

1867
01:34:20,920 --> 01:34:25,359
voxels what I'd like to do here is just

1868
01:34:23,649 --> 01:34:31,960
make it so that these things are

1869
01:34:25,359 --> 01:34:36,389
properly clamped right so you know I'd

1870
01:34:31,960 --> 01:34:36,389
like to do something along the lines of

1871
01:34:39,539 --> 01:34:50,529
rectangle three clipped box equals you

1872
01:34:44,229 --> 01:34:53,229
know box box min box box max correct min

1873
01:34:50,529 --> 01:34:57,759
max so if we build a spacial rectangle

1874
01:34:53,229 --> 01:35:08,319
here and then I intersect this with the

1875
01:34:57,760 --> 01:35:12,039
solutions spatial grid total bounds now

1876
01:35:08,319 --> 01:35:16,779
I will have clipped the box so that now

1877
01:35:12,039 --> 01:35:19,658
we get you know a box that's guaranteed

1878
01:35:16,779 --> 01:35:26,859
to be inside our voxel and I can also

1879
01:35:19,658 --> 01:35:32,769
just do here like hey if this box is

1880
01:35:26,859 --> 01:35:35,198
actually didn't get entirely removed by

1881
01:35:32,770 --> 01:35:36,270
that clipping operation then we'll

1882
01:35:35,198 --> 01:35:40,250
insert it

1883
01:35:36,270 --> 01:35:45,060
and that to me seems like way better I

1884
01:35:40,250 --> 01:35:57,779
thought we had that guess we just still

1885
01:35:45,060 --> 01:36:03,330
call it has area so I think that's all

1886
01:35:57,779 --> 01:36:06,329
good let's try that again I'm not sure

1887
01:36:03,329 --> 01:36:07,739
I'm not sure why it does that double I

1888
01:36:06,329 --> 01:36:10,260
think that's maybe because it's later

1889
01:36:07,739 --> 01:36:11,909
compilation so I think the problem we're

1890
01:36:10,260 --> 01:36:15,360
having there is like we haven't actually

1891
01:36:11,909 --> 01:36:17,579
included this in here right in the

1892
01:36:15,359 --> 01:36:19,229
handmade build so it doesn't know what a

1893
01:36:17,579 --> 01:36:21,210
grid is when we get there so let me just

1894
01:36:19,229 --> 01:36:24,299
even though we're not working on the

1895
01:36:21,210 --> 01:36:27,949
handmade hero actual main body of code

1896
01:36:24,300 --> 01:36:27,949
here let's just put that in there okay

1897
01:36:34,460 --> 01:36:40,310
so the getfox will index 4p where we

1898
01:36:45,229 --> 01:36:52,349
where we pulled that out before we want

1899
01:36:48,960 --> 01:36:53,730
to do the same thing again so it's a

1900
01:36:52,350 --> 01:36:58,440
little annoying that we do this code

1901
01:36:53,729 --> 01:37:00,059
twice but I'm not really sure how else

1902
01:36:58,439 --> 01:37:02,669
we would do it because we do need to do

1903
01:37:00,060 --> 01:37:05,370
that counting procedure we've already

1904
01:37:02,670 --> 01:37:07,409
produced the box bounds here so another

1905
01:37:05,369 --> 01:37:10,140
thing we might do is just say well let's

1906
01:37:07,409 --> 01:37:16,979
make this unified so that it looks the

1907
01:37:10,140 --> 01:37:19,050
same right so now what we want to do is

1908
01:37:16,979 --> 01:37:21,839
we want to do the clipped box version

1909
01:37:19,050 --> 01:37:27,270
and you know we could just make this

1910
01:37:21,840 --> 01:37:27,869
here be box bounds in fact maybe that's

1911
01:37:27,270 --> 01:37:30,510
how we'll do it

1912
01:37:27,869 --> 01:37:34,349
so we'll just actually say look box

1913
01:37:30,510 --> 01:37:36,600
bounds is is this clipped version so

1914
01:37:34,350 --> 01:37:38,220
then in here where we do did box bounds

1915
01:37:36,600 --> 01:37:40,650
before we're not going to do it that way

1916
01:37:38,220 --> 01:37:42,990
we're going to do clipped bounds and

1917
01:37:40,649 --> 01:37:47,689
then we're going to check for the the

1918
01:37:42,989 --> 01:37:47,689
has area right and we can also do this

1919
01:37:48,159 --> 01:38:07,159
and this and then we just need to close

1920
01:38:03,109 --> 01:38:09,739
out that check so now I think it's okay

1921
01:38:07,159 --> 01:38:11,599
so we've got the box index we checked

1922
01:38:09,739 --> 01:38:15,500
the clip box make sure it's in there we

1923
01:38:11,600 --> 01:38:17,780
go through the loop to figure out where

1924
01:38:15,500 --> 01:38:22,609
we might actually hit oops this is box

1925
01:38:17,779 --> 01:38:24,739
bounce now and then assuming that it

1926
01:38:22,609 --> 01:38:29,420
actually can hit somewhere will actually

1927
01:38:24,739 --> 01:38:40,489
go through and insert it in right okay

1928
01:38:29,420 --> 01:38:42,230
now there may be some issues with

1929
01:38:40,489 --> 01:38:44,179
efficiency in that code because we're

1930
01:38:42,229 --> 01:38:45,559
not telling it about point or a listing

1931
01:38:44,180 --> 01:38:46,820
or anything like that but I don't really

1932
01:38:45,560 --> 01:38:48,650
care about the performance of this code

1933
01:38:46,819 --> 01:38:49,819
at the moment because this code probably

1934
01:38:48,649 --> 01:38:52,309
isn't really implicated much in the

1935
01:38:49,819 --> 01:38:53,389
performance just yet if we actually see

1936
01:38:52,310 --> 01:38:55,880
that it starts to be implicated in the

1937
01:38:53,390 --> 01:38:57,350
performance which it might then we would

1938
01:38:55,880 --> 01:39:00,079
look at maybe streamlining this because

1939
01:38:57,350 --> 01:39:01,640
it's not very well written at this point

1940
01:39:00,079 --> 01:39:04,479
for speed it's just kind of doing what

1941
01:39:01,640 --> 01:39:07,460
it needs to do and that's the end of it

1942
01:39:04,479 --> 01:39:11,599
all right so now as you can see we're

1943
01:39:07,460 --> 01:39:13,789
kind of going through doing this spatial

1944
01:39:11,600 --> 01:39:15,620
index one last time to clean some things

1945
01:39:13,789 --> 01:39:17,750
up so we want to do sort of the same

1946
01:39:15,619 --> 01:39:20,689
thing we were doing up there down here

1947
01:39:17,750 --> 01:39:24,890
rather than doing it this way otherwise

1948
01:39:20,689 --> 01:39:26,179
there isn't much else to say when we do

1949
01:39:24,890 --> 01:39:29,570
our letting initialization now we

1950
01:39:26,180 --> 01:39:33,470
actually want to do initialization of

1951
01:39:29,569 --> 01:39:35,389
these values properly so we want to be

1952
01:39:33,470 --> 01:39:37,010
able to take like the voxel dim and the

1953
01:39:35,390 --> 01:39:41,329
Inbox seldom and that stuff and set that

1954
01:39:37,010 --> 01:39:43,550
properly now to be honest at this point

1955
01:39:41,329 --> 01:39:47,720
I don't really think that we probably

1956
01:39:43,550 --> 01:39:52,400
need the init lighting code almost at

1957
01:39:47,720 --> 01:39:54,409
all really all we probably need there is

1958
01:39:52,399 --> 01:39:55,909
the random seed because the voxel dim

1959
01:39:54,409 --> 01:39:58,309
and the end of ox seldom are things that

1960
01:39:55,909 --> 01:39:59,760
we can just get every time we run

1961
01:39:58,310 --> 01:40:02,429
through

1962
01:39:59,760 --> 01:40:03,840
so honestly it's unclear how much the

1963
01:40:02,429 --> 01:40:16,559
innit lighting call really needs to

1964
01:40:03,840 --> 01:40:19,230
happen yeah that it just doesn't it

1965
01:40:16,559 --> 01:40:20,788
doesn't make a lot of sense so I think

1966
01:40:19,229 --> 01:40:23,189
what we probably would do here is we'd

1967
01:40:20,788 --> 01:40:26,429
probably pull this stuff out and we'd

1968
01:40:23,189 --> 01:40:29,879
probably go ahead and roll this into the

1969
01:40:26,429 --> 01:40:32,460
lighting computation stuff the solution

1970
01:40:29,880 --> 01:40:34,429
works here even I don't even know that

1971
01:40:32,460 --> 01:40:37,519
that needs to be there

1972
01:40:34,429 --> 01:40:39,960
so I think this comment is also correct

1973
01:40:37,519 --> 01:40:42,389
so if we go down and look at where we're

1974
01:40:39,960 --> 01:40:44,609
actually doing the dispatch I don't know

1975
01:40:42,389 --> 01:40:46,859
why we would not just do it here using

1976
01:40:44,609 --> 01:40:48,630
the temporary now before we didn't have

1977
01:40:46,859 --> 01:40:50,399
a temporary no we just hadn't thought

1978
01:40:48,630 --> 01:40:52,529
about that and we hadn't really done

1979
01:40:50,399 --> 01:40:53,908
that but it seems pretty clear at this

1980
01:40:52,529 --> 01:40:59,698
point that that's what you would do

1981
01:40:53,908 --> 01:41:02,368
right so like for example in here if we

1982
01:40:59,698 --> 01:41:08,908
were to just say look the there's just a

1983
01:41:02,368 --> 01:41:12,658
work array and we know how many there

1984
01:41:08,908 --> 01:41:18,469
should be because we computed it we'll

1985
01:41:12,658 --> 01:41:20,429
just push that on right here right

1986
01:41:18,469 --> 01:41:23,219
that's like way way better

1987
01:41:20,429 --> 01:41:24,840
it doesn't pollute the structure with

1988
01:41:23,219 --> 01:41:29,250
garbage doesn't need to stick around

1989
01:41:24,840 --> 01:41:31,019
because those values are only valid when

1990
01:41:29,250 --> 01:41:33,479
you're actually doing lighting work

1991
01:41:31,019 --> 01:41:35,070
anyway there's literally no reason for

1992
01:41:33,479 --> 01:41:38,488
them to ever actually be there in any

1993
01:41:35,069 --> 01:41:40,170
other circumstance so that totally gets

1994
01:41:38,488 --> 01:41:42,000
out of the business of bothering with

1995
01:41:40,170 --> 01:41:44,239
that garbage which i think is way way

1996
01:41:42,000 --> 01:41:47,729
better so I think that's good

1997
01:41:44,238 --> 01:41:50,819
and so again I think a lot of this stuff

1998
01:41:47,729 --> 01:41:52,759
can just go away the light sampling walk

1999
01:41:50,819 --> 01:41:54,658
table is is not so in they can go away

2000
01:41:52,760 --> 01:41:56,460
that's something that has to get

2001
01:41:54,658 --> 01:41:58,288
computed probably only once because it's

2002
01:41:56,460 --> 01:42:01,469
expensive to build and we don't probably

2003
01:41:58,288 --> 01:42:03,000
want to build it every frame so taking a

2004
01:42:01,469 --> 01:42:04,529
look at an init lighting now I think I'm

2005
01:42:03,000 --> 01:42:09,359
going to go ahead and move this stuff

2006
01:42:04,529 --> 01:42:11,908
all out of here so I don't know why

2007
01:42:09,359 --> 01:42:13,589
update debug lines is set to true I

2008
01:42:11,908 --> 01:42:16,138
guess just because in general we

2009
01:42:13,590 --> 01:42:19,079
update those we just don't put any on

2010
01:42:16,139 --> 01:42:20,579
there for not actually using it but

2011
01:42:19,079 --> 01:42:22,439
we're gonna leave that as it is and I'm

2012
01:42:20,579 --> 01:42:29,908
just gonna say alright this stuff is

2013
01:42:22,439 --> 01:42:31,589
gonna happen in here right oh well I

2014
01:42:29,908 --> 01:42:36,598
guess you know what the fundamental unit

2015
01:42:31,590 --> 01:42:38,190
though getting passed down I mean really

2016
01:42:36,599 --> 01:42:44,190
yeah again that can just be something

2017
01:42:38,189 --> 01:42:47,069
passed you know it really could just be

2018
01:42:44,189 --> 01:42:48,839
passed every time it doesn't need to be

2019
01:42:47,069 --> 01:42:50,519
in a nit lighting right like the

2020
01:42:48,840 --> 01:42:52,260
lighting doesn't really care what the

2021
01:42:50,520 --> 01:43:08,040
fundamental unit is it can change the

2022
01:42:52,260 --> 01:43:09,630
voxel dimensions if it needs to yeah so

2023
01:43:08,039 --> 01:43:13,039
I don't know that's a good question and

2024
01:43:09,630 --> 01:43:16,250
I'm not sure what should happen there I

2025
01:43:13,039 --> 01:43:16,250
guess I'll

2026
01:43:41,779 --> 01:43:46,319
I mean I guess I'll just leave it in

2027
01:43:44,179 --> 01:43:49,409
there

2028
01:43:46,319 --> 01:43:49,409
[Music]

2029
01:43:51,658 --> 01:44:03,549
let me go ahead and see where that's

2030
01:43:53,738 --> 01:44:05,589
actually called so here's where the

2031
01:44:03,550 --> 01:44:07,869
world mode fundamental unit thing comes

2032
01:44:05,590 --> 01:44:10,719
in and you can see it you know making

2033
01:44:07,868 --> 01:44:12,519
this call here and so you know if the

2034
01:44:10,719 --> 01:44:16,270
world mode fundamental unit is just is

2035
01:44:12,520 --> 01:44:17,889
just sitting there then you know we

2036
01:44:16,270 --> 01:44:20,380
could just pass it to begin lighting I

2037
01:44:17,889 --> 01:44:21,969
mean there's no reason not to so when we

2038
01:44:20,380 --> 01:44:26,039
do begin lighting computation we could

2039
01:44:21,969 --> 01:44:31,029
just say like hey yeah like you know

2040
01:44:26,039 --> 01:44:34,149
here's the fundamental unit and you can

2041
01:44:31,029 --> 01:44:40,719
have that so there's really no need for

2042
01:44:34,149 --> 01:44:42,849
this routine at all and mm-hmm I guess

2043
01:44:40,719 --> 01:44:45,510
mostly you know the only thing that's

2044
01:44:42,850 --> 01:44:48,639
really using here is is the random seed

2045
01:44:45,510 --> 01:44:53,530
so that that entropy unit you know needs

2046
01:44:48,639 --> 01:44:55,060
to be set somewhere but again I don't

2047
01:44:53,529 --> 01:45:02,198
think that's something that really would

2048
01:44:55,060 --> 01:45:05,860
weren't actually calling this so you

2049
01:45:02,198 --> 01:45:08,250
know maybe we just do something like

2050
01:45:05,859 --> 01:45:08,250
this

2051
01:45:20,300 --> 01:45:37,320
so the hoops that's not good so the

2052
01:45:33,149 --> 01:45:44,129
random series here where we do the the

2053
01:45:37,319 --> 01:45:46,079
random seed out I would think that we

2054
01:45:44,130 --> 01:45:47,819
could just do some kind of an

2055
01:45:46,079 --> 01:45:49,319
initialization check here like I mean

2056
01:45:47,819 --> 01:45:52,069
you know we could just do a thing where

2057
01:45:49,319 --> 01:45:58,979
we said like you know if we were gonna

2058
01:45:52,069 --> 01:46:02,488
initialize the voxel dim then we

2059
01:45:58,979 --> 01:46:04,289
initialized that stuff too right because

2060
01:46:02,488 --> 01:46:06,869
it just it's just like it's dumb to have

2061
01:46:04,289 --> 01:46:07,920
an init call that you have to make for

2062
01:46:06,869 --> 01:46:11,658
no reason

2063
01:46:07,920 --> 01:46:16,408
like who why bother making the people

2064
01:46:11,658 --> 01:46:18,089
who use this call init when we don't

2065
01:46:16,408 --> 01:46:21,238
really need to you know we can just

2066
01:46:18,090 --> 01:46:22,770
check some parameters and when we think

2067
01:46:21,238 --> 01:46:28,109
that we have to update we just update

2068
01:46:22,770 --> 01:46:30,840
everything right so let's let's do it

2069
01:46:28,109 --> 01:46:33,269
that way and let's say like ok so when

2070
01:46:30,840 --> 01:46:35,400
we come through here and we want to know

2071
01:46:33,270 --> 01:46:37,170
about the fundamental units and maybe

2072
01:46:35,399 --> 01:46:40,079
what we do is we just say like what's

2073
01:46:37,170 --> 01:46:42,210
the fundamental unit and we say if the

2074
01:46:40,079 --> 01:46:44,908
solution fundamental units it's not

2075
01:46:42,210 --> 01:46:47,039
equal to the fundamental unit then we

2076
01:46:44,908 --> 01:46:51,569
now make it that way

2077
01:46:47,039 --> 01:46:56,039
and we update all of our base

2078
01:46:51,569 --> 01:46:57,809
information right we could also make

2079
01:46:56,039 --> 01:46:59,760
this be sort of like a giant like

2080
01:46:57,810 --> 01:47:01,380
recompute kind of thing so we could say

2081
01:46:59,760 --> 01:47:02,940
it's like alright so if you change any

2082
01:47:01,380 --> 01:47:04,889
of the parameters of the lighting system

2083
01:47:02,939 --> 01:47:08,189
that are fundamental so if the

2084
01:47:04,889 --> 01:47:10,500
fundamental unit isn't the same or you

2085
01:47:08,189 --> 01:47:12,299
change the dimensions of the voxel so

2086
01:47:10,500 --> 01:47:16,350
now we're computing like higher

2087
01:47:12,300 --> 01:47:20,520
resolution lighting or something then we

2088
01:47:16,350 --> 01:47:23,159
just do you know all of this stuff over

2089
01:47:20,520 --> 01:47:24,900
again and I like that a lot better

2090
01:47:23,158 --> 01:47:26,879
because now we can just say look there's

2091
01:47:24,899 --> 01:47:28,469
one in it place that even if you know

2092
01:47:26,880 --> 01:47:30,150
you know if you're running and you

2093
01:47:28,469 --> 01:47:32,130
change you want to like eventually

2094
01:47:30,149 --> 01:47:33,339
support things like changing the

2095
01:47:32,130 --> 01:47:35,619
lighting resolution on the fly

2096
01:47:33,340 --> 01:47:37,300
this way we know that all of the reunit

2097
01:47:35,619 --> 01:47:38,590
stuff can just be done in one place and

2098
01:47:37,300 --> 01:47:41,430
we don't have to worry about exactly

2099
01:47:38,590 --> 01:47:45,550
what the heck is happening there right I

2100
01:47:41,430 --> 01:47:48,430
think that's way better that just seems

2101
01:47:45,550 --> 01:47:53,470
a lot nicer to me so then we can say

2102
01:47:48,430 --> 01:47:55,840
that we've got our table memory and our

2103
01:47:53,470 --> 01:47:59,860
temp memory those are basically sort of

2104
01:47:55,840 --> 01:48:01,630
split there and then we can just focus

2105
01:47:59,859 --> 01:48:04,239
on the rest of the stuff and make sure

2106
01:48:01,630 --> 01:48:07,500
that works alright I'm gonna move demote

2107
01:48:04,239 --> 01:48:10,479
all this old stuff down to the bottom

2108
01:48:07,500 --> 01:48:11,920
because that's going to go away so that

2109
01:48:10,479 --> 01:48:15,009
we can just focus on the things that we

2110
01:48:11,920 --> 01:48:18,190
actually have I don't actually know that

2111
01:48:15,010 --> 01:48:19,989
debug light P is really gonna be used

2112
01:48:18,189 --> 01:48:22,509
much at this point either so that'll

2113
01:48:19,989 --> 01:48:23,769
probably go away eventually but the rest

2114
01:48:22,510 --> 01:48:25,930
of the stuff here is stuff that we

2115
01:48:23,770 --> 01:48:29,020
actually believe we will probably be

2116
01:48:25,930 --> 01:48:33,550
using at some point the debug lines

2117
01:48:29,020 --> 01:48:35,920
obviously maybe will be a separate thing

2118
01:48:33,550 --> 01:48:37,779
but you know we'll we'll deal with those

2119
01:48:35,920 --> 01:48:42,090
a little bit later so the rest of this

2120
01:48:37,779 --> 01:48:42,090
stuff is stuff that we would expect to

2121
01:48:42,510 --> 01:48:49,119
actually preserve and so let's try and

2122
01:48:46,390 --> 01:48:52,840
put these where they belong so the light

2123
01:48:49,119 --> 01:48:55,750
sampling walk table and like the grids

2124
01:48:52,840 --> 01:48:59,170
like all this stuff is stuff that we

2125
01:48:55,750 --> 01:49:03,850
expect same with the series I guess in a

2126
01:48:59,170 --> 01:49:06,520
sense all of this stuff is stuff that we

2127
01:49:03,850 --> 01:49:08,920
expect to sort of have persistent and

2128
01:49:06,520 --> 01:49:10,960
that's initialized when we start up all

2129
01:49:08,920 --> 01:49:13,720
the rest of this stuff so like from here

2130
01:49:10,960 --> 01:49:15,819
down is stuff that we don't and I guess

2131
01:49:13,720 --> 01:49:18,850
the diffuse weight map would also be a

2132
01:49:15,819 --> 01:49:20,439
thing that would be that way and the

2133
01:49:18,850 --> 01:49:22,120
sampling spheres and that stuff so any

2134
01:49:20,439 --> 01:49:24,279
of this stuff would also be initialized

2135
01:49:22,119 --> 01:49:26,439
only once the rest of this stuff is

2136
01:49:24,279 --> 01:49:28,479
stuff that's kind of in flux so this is

2137
01:49:26,439 --> 01:49:31,779
all stuff that can just vary or that's

2138
01:49:28,479 --> 01:49:33,789
done temporarily the spatial grid nodes

2139
01:49:31,779 --> 01:49:37,329
and the leaves these are values that

2140
01:49:33,789 --> 01:49:40,390
don't persist over time but we don't

2141
01:49:37,329 --> 01:49:42,909
really necessarily want to have to pass

2142
01:49:40,390 --> 01:49:44,770
those around everywhere

2143
01:49:42,909 --> 01:49:47,840
so in other words normally what we would

2144
01:49:44,770 --> 01:49:50,900
do is we'd pass these down

2145
01:49:47,840 --> 01:49:54,469
and at the moment we're not doing that

2146
01:49:50,899 --> 01:49:56,299
primarily because it just seems like an

2147
01:49:54,469 --> 01:49:58,550
inefficiency to constantly be passing

2148
01:49:56,300 --> 01:50:04,729
them everywhere but what we could do is

2149
01:49:58,550 --> 01:50:09,619
say to do you know wrap these in in

2150
01:50:04,729 --> 01:50:12,619
their own things so we don't leave them

2151
01:50:09,618 --> 01:50:21,139
in the lighting solution since they're

2152
01:50:12,618 --> 01:50:23,420
allocated in the temp arena anyway you

2153
01:50:21,139 --> 01:50:25,429
know so that's kind of a separate issue

2154
01:50:23,420 --> 01:50:26,920
that we probably want to look at at some

2155
01:50:25,429 --> 01:50:29,510
point one way or the other

2156
01:50:26,920 --> 01:50:30,889
all right so looks like we're just about

2157
01:50:29,510 --> 01:50:32,958
out of time I'm going to go ahead and

2158
01:50:30,889 --> 01:50:34,279
just finish up a few more the compiler

2159
01:50:32,958 --> 01:50:38,599
parts here and then we'll go from there

2160
01:50:34,279 --> 01:50:40,880
so the table of oxygen is now really has

2161
01:50:38,599 --> 01:50:43,190
to be the same as the spatial grid so

2162
01:50:40,880 --> 01:50:49,639
what we want to do here is say look if

2163
01:50:43,189 --> 01:50:51,948
the voxel dim for the spec light atlas

2164
01:50:49,639 --> 01:50:55,069
we're gonna have to produce what we

2165
01:50:51,948 --> 01:51:00,319
would expect the spatial grid to be and

2166
01:50:55,069 --> 01:51:03,920
I thought we had that in here somewhere

2167
01:51:00,319 --> 01:51:06,819
we were doing the apron offset but I

2168
01:51:03,920 --> 01:51:06,819
don't know where that went

2169
01:51:09,519 --> 01:51:14,708
for Atlas - spatial

2170
01:51:17,170 --> 01:51:23,869
here so here in the internal letting

2171
01:51:20,899 --> 01:51:25,909
core like this is that stuff right and

2172
01:51:23,869 --> 01:51:28,099
we have the Vox of Timnath apron so this

2173
01:51:25,909 --> 01:51:29,989
stuff doesn't want to be done this way

2174
01:51:28,100 --> 01:51:32,600
probably now right so what we want to do

2175
01:51:29,989 --> 01:51:33,979
is we want to move this stuff out into

2176
01:51:32,600 --> 01:51:38,360
the begin lighting because everyone

2177
01:51:33,979 --> 01:51:45,169
wants to see it and then we want that

2178
01:51:38,359 --> 01:51:46,880
voxel dim with apron part to go away so

2179
01:51:45,170 --> 01:51:50,989
if I go back to begin lighting

2180
01:51:46,880 --> 01:51:53,090
computation then in here where we've got

2181
01:51:50,989 --> 01:51:54,739
this stuff happening we want it these

2182
01:51:53,090 --> 01:51:58,190
computations to happen upfront so that

2183
01:51:54,739 --> 01:51:58,960
we can then compare them and see whether

2184
01:51:58,189 --> 01:52:01,909
they're correct

2185
01:51:58,960 --> 01:52:03,230
so in bids fields for taste in builds

2186
01:52:01,909 --> 01:52:05,420
fish position for lighting the Fox

2187
01:52:03,229 --> 01:52:08,869
lagoon with apron should not actually be

2188
01:52:05,420 --> 01:52:16,100
happening anymore and so in begin

2189
01:52:08,869 --> 01:52:18,319
lighting I'm sorry in build it is in

2190
01:52:16,100 --> 01:52:19,940
build spatial partition box loading with

2191
01:52:18,319 --> 01:52:21,229
apron should just be something you now

2192
01:52:19,939 --> 01:52:25,099
get out of the solution because it's

2193
01:52:21,229 --> 01:52:26,269
like a known value right so in here when

2194
01:52:25,100 --> 01:52:28,789
we're talking about box loading with

2195
01:52:26,270 --> 01:52:30,980
apron everywhere that's just not

2196
01:52:28,789 --> 01:52:32,510
necessary anymore when you look at the

2197
01:52:30,979 --> 01:52:34,039
grid count here this could also be

2198
01:52:32,510 --> 01:52:35,960
something that we just call and get the

2199
01:52:34,039 --> 01:52:41,180
voxels so we could just say like get

2200
01:52:35,960 --> 01:52:43,279
total cell count and in here we wouldn't

2201
01:52:41,180 --> 01:52:47,390
be using box littered with apron we just

2202
01:52:43,279 --> 01:52:50,469
passed the spatial grid and so then in

2203
01:52:47,390 --> 01:52:54,920
our voxel code now we can just say hey

2204
01:52:50,470 --> 01:52:57,490
get total cell count and this will just

2205
01:52:54,920 --> 01:53:02,890
tell us the answer to that question

2206
01:52:57,489 --> 01:53:05,269
directly and again this is very simple

2207
01:53:02,890 --> 01:53:09,579
it's just the cell count next time -

2208
01:53:05,270 --> 01:53:09,580
cell count Y times cell count Z

2209
01:53:11,179 --> 01:53:26,029
right no big deal so at that point the

2210
01:53:22,698 --> 01:53:30,049
apron should not really be used in here

2211
01:53:26,029 --> 01:53:31,908
I don't think yeah so now the only thing

2212
01:53:30,050 --> 01:53:36,170
we need to adjust is when we're actually

2213
01:53:31,908 --> 01:53:38,719
looping over these this needs to loop

2214
01:53:36,170 --> 01:53:40,640
over the one from the actual spatial

2215
01:53:38,719 --> 01:53:45,140
grid so this is like solution spatial

2216
01:53:40,640 --> 01:53:54,530
grid and in here we have to do the cell

2217
01:53:45,140 --> 01:53:56,719
count Z right and it's worth noting that

2218
01:53:54,529 --> 01:54:05,269
there's like other ways that we could

2219
01:53:56,719 --> 01:54:08,779
actually do this so we don't need to

2220
01:54:05,270 --> 01:54:10,880
actually write the loops this way if we

2221
01:54:08,779 --> 01:54:12,979
don't want to we could instead write the

2222
01:54:10,880 --> 01:54:14,600
loops over the spatial index by just

2223
01:54:12,979 --> 01:54:16,609
declaring a thing that increments the

2224
01:54:14,600 --> 01:54:18,140
spatial index by incrementing the X and

2225
01:54:16,609 --> 01:54:22,880
if it rolls the X increment the Y

2226
01:54:18,140 --> 01:54:25,670
instead and so on and it's hard to say

2227
01:54:22,880 --> 01:54:28,630
like one of the things that si makes

2228
01:54:25,670 --> 01:54:32,750
very difficult is injection of that kind

2229
01:54:28,630 --> 01:54:35,350
cleanly it's kind of a long story it's

2230
01:54:32,750 --> 01:54:37,939
not worth going into right now but

2231
01:54:35,350 --> 01:54:42,590
languages in general do a bad job of of

2232
01:54:37,939 --> 01:54:43,908
loop insertion and you know so I'm

2233
01:54:42,590 --> 01:54:47,090
probably going to leave it the way it is

2234
01:54:43,908 --> 01:54:48,859
at the moment and just chalk it up to

2235
01:54:47,090 --> 01:54:56,630
kind of one of those unfortunate aspects

2236
01:54:48,859 --> 01:54:59,479
of things okay so moving along this

2237
01:54:56,630 --> 01:55:01,940
again is just the spatial grid cell

2238
01:54:59,479 --> 01:55:06,369
count and you know what I could do here

2239
01:55:01,939 --> 01:55:10,689
is just I could just pull cell count

2240
01:55:06,369 --> 01:55:10,689
just so this is a little easier to read

2241
01:55:20,859 --> 01:55:26,779
okay so now we just are left with the

2242
01:55:24,439 --> 01:55:29,149
anit code and we have to get the init

2243
01:55:26,779 --> 01:55:32,238
code right so what we want to do here is

2244
01:55:29,149 --> 01:55:34,638
say well alright the spatial grid index

2245
01:55:32,238 --> 01:55:36,709
offset also by the way like now there's

2246
01:55:34,639 --> 01:55:43,460
should be no calls to init lighting so

2247
01:55:36,710 --> 01:55:47,260
you know in a lighting that doesn't have

2248
01:55:43,460 --> 01:55:47,260
to occur anymore and that's nice too

2249
01:55:47,560 --> 01:55:54,980
alright so in here we're we're to me in

2250
01:55:53,868 --> 01:55:56,329
here where we're doing our pre

2251
01:55:54,979 --> 01:55:57,769
computation and we just want to make

2252
01:55:56,329 --> 01:55:59,300
sure that all of that works properly and

2253
01:55:57,770 --> 01:56:01,520
you can see that there's a lot of places

2254
01:55:59,300 --> 01:56:03,199
here where we're doing operations they

2255
01:56:01,520 --> 01:56:08,600
were previously looking directly out of

2256
01:56:03,198 --> 01:56:09,948
the that we're pulling values directly

2257
01:56:08,600 --> 01:56:13,369
out of the lighting that now should just

2258
01:56:09,948 --> 01:56:16,158
be based off of the voxel so the spatial

2259
01:56:13,368 --> 01:56:18,500
grid index offset now is not called that

2260
01:56:16,158 --> 01:56:21,019
but it is still a thing we want to keep

2261
01:56:18,500 --> 01:56:23,960
it's this right Atlas to spatial grid

2262
01:56:21,020 --> 01:56:26,300
index offset and so then what we want to

2263
01:56:23,960 --> 01:56:28,639
do is we want to generate our two grids

2264
01:56:26,300 --> 01:56:30,230
so here we've got an Atlas grid and a

2265
01:56:28,639 --> 01:56:32,659
spatial grid and we want those two to

2266
01:56:30,229 --> 01:56:34,819
both be initialized now the tricky part

2267
01:56:32,658 --> 01:56:37,460
here is that we want to make sure that

2268
01:56:34,819 --> 01:56:40,219
we detect changes to the grid so in

2269
01:56:37,460 --> 01:56:43,158
situations where we are getting a

2270
01:56:40,219 --> 01:56:45,139
different voxel dim than we had last

2271
01:56:43,158 --> 01:56:46,429
time we want to be able to detect that

2272
01:56:45,139 --> 01:56:49,130
and we should be able to do that fairly

2273
01:56:46,429 --> 01:56:54,829
straightforward by just saying look if

2274
01:56:49,130 --> 01:56:59,359
the Atlas dim from last time it's

2275
01:56:54,829 --> 01:57:02,960
different than the you know one that we

2276
01:56:59,359 --> 01:57:05,750
used last then if the thing we would be

2277
01:57:02,960 --> 01:57:07,850
using for the Atlas Tim is different now

2278
01:57:05,750 --> 01:57:10,069
like if it changed then we need to

2279
01:57:07,850 --> 01:57:11,989
trigger a readjustment of everything

2280
01:57:10,069 --> 01:57:15,259
just like we were doing before otherwise

2281
01:57:11,988 --> 01:57:17,448
we're fine so we do need to know the

2282
01:57:15,260 --> 01:57:18,949
Atlas spatial grid offset and we need to

2283
01:57:17,448 --> 01:57:20,569
set that but we don't need to set that

2284
01:57:18,948 --> 01:57:25,158
unless we're actually updating things

2285
01:57:20,569 --> 01:57:26,929
right so in here we can set this and set

2286
01:57:25,158 --> 01:57:30,109
these and let's just go ahead and make

2287
01:57:26,929 --> 01:57:31,789
those work so we need to initialize

2288
01:57:30,109 --> 01:57:34,389
these two grids

2289
01:57:31,789 --> 01:57:36,739
so we want to do that at some point here

2290
01:57:34,390 --> 01:57:38,930
you can see us computing a lot of the

2291
01:57:36,739 --> 01:57:41,090
dependent values so we want to do our

2292
01:57:38,930 --> 01:57:42,740
atlas grid that's the easiest one

2293
01:57:41,090 --> 01:57:45,289
because it's in line with what the

2294
01:57:42,739 --> 01:57:47,090
lights actually are and then we have the

2295
01:57:45,289 --> 01:57:49,970
spatial grid which is like the larger

2296
01:57:47,090 --> 01:57:51,650
one now if we look at what goes into

2297
01:57:49,970 --> 01:57:52,940
calling makefox LED red we've got the

2298
01:57:51,649 --> 01:57:54,889
min corner of the cell count and the

2299
01:57:52,939 --> 01:57:56,210
seldom so for each of those we have to

2300
01:57:54,890 --> 01:57:56,890
be able to figure out what that actually

2301
01:57:56,210 --> 01:58:00,739
is

2302
01:57:56,890 --> 01:58:03,440
now the min hot corner is actually

2303
01:58:00,739 --> 01:58:08,149
something that gets adjusted like as we

2304
01:58:03,439 --> 01:58:09,889
go to so it moves around right and you

2305
01:58:08,149 --> 01:58:16,000
can see here like how we're actually

2306
01:58:09,890 --> 01:58:20,060
creating that value can actually see it

2307
01:58:16,000 --> 01:58:23,869
getting computed here by using like the

2308
01:58:20,060 --> 01:58:26,140
origin positions and such right so we

2309
01:58:23,869 --> 01:58:29,059
still want this code to actually execute

2310
01:58:26,140 --> 01:58:31,070
and so what we're kind of going to do

2311
01:58:29,060 --> 01:58:34,789
here is probably just make it up as we

2312
01:58:31,069 --> 01:58:39,979
go because anytime that the solution

2313
01:58:34,789 --> 01:58:42,109
itself changes like this we kind of just

2314
01:58:39,979 --> 01:58:43,879
want to clear everything and restart the

2315
01:58:42,109 --> 01:58:46,159
lighting because we know that like we

2316
01:58:43,880 --> 01:58:48,140
can't really use any results that we had

2317
01:58:46,159 --> 01:58:50,899
from before because they're not going to

2318
01:58:48,140 --> 01:58:51,970
be valid anymore anyway so it probably

2319
01:58:50,899 --> 01:58:54,500
should be fine

2320
01:58:51,970 --> 01:58:57,260
so I'm guessing what we want to do here

2321
01:58:54,500 --> 01:59:00,319
is we want to set the Atlas grid and the

2322
01:58:57,260 --> 01:59:02,810
spatial grid but probably since the

2323
01:59:00,319 --> 01:59:04,939
spatial grid is always dependent we can

2324
01:59:02,810 --> 01:59:07,640
probably do that after we determine

2325
01:59:04,939 --> 01:59:10,089
where this grid at where the Atlas grid

2326
01:59:07,640 --> 01:59:13,189
actually goes right

2327
01:59:10,090 --> 01:59:13,189
[Music]

2328
01:59:17,949 --> 01:59:23,869
and I think for purposes of computing

2329
01:59:21,949 --> 01:59:26,329
the lock table we should still use the

2330
01:59:23,869 --> 01:59:28,699
old space the old Atlas grid dimensions

2331
01:59:26,329 --> 01:59:31,550
and the reason that I think that is

2332
01:59:28,699 --> 01:59:33,889
because I don't want anything to cast

2333
01:59:31,550 --> 01:59:36,140
all the way across the larger grid I

2334
01:59:33,890 --> 01:59:48,980
want the maximum size that you're ever

2335
01:59:36,140 --> 01:59:51,280
going to walk well so that is a bit

2336
01:59:48,979 --> 01:59:51,279
tough

2337
01:59:54,039 --> 01:59:57,800
these walk tables are just going to be

2338
01:59:56,090 --> 02:00:16,699
huge is the problem and I don't love

2339
01:59:57,800 --> 02:00:17,930
that so I guess for now all right so

2340
02:00:16,699 --> 02:00:20,300
here's what I think what we probably

2341
02:00:17,930 --> 02:00:23,869
want to do so looking back at the grid

2342
02:00:20,300 --> 02:00:26,029
ray caster right so the cost metric when

2343
02:00:23,869 --> 02:00:29,000
we run through here we Dec the cost

2344
02:00:26,029 --> 02:00:34,429
metric once each time so like the

2345
02:00:29,000 --> 02:00:37,039
maximum cost metric here is bounded so I

2346
02:00:34,430 --> 02:00:39,409
think actually this we could get rid of

2347
02:00:37,039 --> 02:00:41,420
when we go to compute walk table what we

2348
02:00:39,409 --> 02:00:45,500
can do instead is just have the maximum

2349
02:00:41,420 --> 02:00:48,199
cells visited as a thing so instead of

2350
02:00:45,500 --> 02:00:50,119
ever checking that value like instead of

2351
02:00:48,199 --> 02:00:55,220
this what we can do is just say did we

2352
02:00:50,119 --> 02:00:56,840
ever go that far right so that seems way

2353
02:00:55,220 --> 02:00:58,789
better because if we have that cost

2354
02:00:56,840 --> 02:01:00,560
metric in there then I think we because

2355
02:00:58,789 --> 02:01:02,149
because before we were thinking that we

2356
02:01:00,560 --> 02:01:05,050
wouldn't have to check the cost metric

2357
02:01:02,149 --> 02:01:05,049
and now we kind of do

2358
02:01:11,458 --> 02:01:17,859
so I think we'll be okay yeah so I think

2359
02:01:16,208 --> 02:01:20,380
what we want to do instead here is is

2360
02:01:17,859 --> 02:01:24,578
actually say what that's going to be so

2361
02:01:20,380 --> 02:01:27,849
I'm gonna say solution like max cost

2362
02:01:24,578 --> 02:01:29,768
metric here and I'm gonna set that to

2363
02:01:27,849 --> 02:01:31,389
something and you know at the moment

2364
02:01:29,769 --> 02:01:33,639
when we did our grid ray cast you know

2365
02:01:31,389 --> 02:01:44,949
what did we set it to it was like 16 or

2366
02:01:33,639 --> 02:01:49,630
something yeah so the cost metric here

2367
02:01:44,948 --> 02:01:53,648
so I'm gonna say like max cost you know

2368
02:01:49,630 --> 02:01:55,779
per Ray that sort of thing and we'll say

2369
02:01:53,649 --> 02:02:01,809
okay the max cost per Ray is going to be

2370
02:01:55,779 --> 02:02:04,538
16 and then we just need to tell the

2371
02:02:01,809 --> 02:02:07,059
walk table that that's what's going on

2372
02:02:04,538 --> 02:02:10,349
so it's gonna get that max cost for Ray

2373
02:02:07,059 --> 02:02:12,699
and it's going to go from there so

2374
02:02:10,349 --> 02:02:14,828
that'll be good because then we have

2375
02:02:12,698 --> 02:02:18,458
unified those two code paths and we know

2376
02:02:14,828 --> 02:02:26,768
what they should be so the max cost per

2377
02:02:18,458 --> 02:02:28,328
Ray it's here all right so I do want to

2378
02:02:26,769 --> 02:02:32,979
take a look at the compute lock table

2379
02:02:28,328 --> 02:02:37,500
code I also don't really know what it's

2380
02:02:32,979 --> 02:02:38,909
doing that for so that's kind of stupid

2381
02:02:37,500 --> 02:02:42,189
[Music]

2382
02:02:38,908 --> 02:02:47,828
so this is dumb and so probably what we

2383
02:02:42,189 --> 02:02:51,820
would rather do here right is do this so

2384
02:02:47,828 --> 02:02:53,380
that way you know we're we're just

2385
02:02:51,819 --> 02:02:56,109
computing the table and then returning

2386
02:02:53,380 --> 02:02:58,149
the table right so that way this doesn't

2387
02:02:56,109 --> 02:02:59,918
ever take the solution and it doesn't

2388
02:02:58,149 --> 02:03:01,510
even know what a solution is it just

2389
02:02:59,918 --> 02:03:02,189
takes some information and goes from

2390
02:03:01,510 --> 02:03:05,909
there

2391
02:03:02,189 --> 02:03:05,909
and then I can also

2392
02:03:07,720 --> 02:03:14,000
returned that tests because I don't

2393
02:03:10,729 --> 02:03:17,359
think desk gets updated right so it

2394
02:03:14,000 --> 02:03:20,300
should be okay so I think that's all

2395
02:03:17,359 --> 02:03:22,670
fine and now we can compute that table

2396
02:03:20,300 --> 02:03:23,840
and it'll work with the cost per race so

2397
02:03:22,670 --> 02:03:30,710
then what we'll do is we'll say all

2398
02:03:23,840 --> 02:03:36,319
right instead of the Vox seldom I'm

2399
02:03:30,710 --> 02:03:41,319
sorry instead of the voxel count we'll

2400
02:03:36,319 --> 02:03:44,210
just say what's the max cost per Ray and

2401
02:03:41,319 --> 02:03:47,269
when we loop through these and we try to

2402
02:03:44,210 --> 02:03:50,140
determine when we should stop what we'll

2403
02:03:47,270 --> 02:03:53,120
do here is instead of tracking span

2404
02:03:50,140 --> 02:04:01,039
which I don't know that we ever actually

2405
02:03:53,119 --> 02:04:04,760
need to track just take a look yeah so

2406
02:04:01,039 --> 02:04:06,859
span is only ever used in for that count

2407
02:04:04,760 --> 02:04:13,010
instead of that all we're gonna do is

2408
02:04:06,859 --> 02:04:20,750
say look if the cost at this point has

2409
02:04:13,010 --> 02:04:21,340
exceeded the max cost per Ray then we

2410
02:04:20,750 --> 02:04:26,510
stop

2411
02:04:21,340 --> 02:04:30,619
so in here each time as we go we'll say

2412
02:04:26,510 --> 02:04:36,560
like if the cost is greater than the max

2413
02:04:30,619 --> 02:04:38,659
cost per Ray then we stop alright so

2414
02:04:36,560 --> 02:04:42,140
that feels way better and it gets that

2415
02:04:38,659 --> 02:04:51,409
dependency out of the mix which i think

2416
02:04:42,140 --> 02:04:54,320
is good in the max discount now we know

2417
02:04:51,409 --> 02:04:57,649
it's just the max cost per Ray so we now

2418
02:04:54,319 --> 02:05:02,239
could just say look it's however much

2419
02:04:57,649 --> 02:05:04,759
that max cost is because that's what

2420
02:05:02,239 --> 02:05:08,750
we're stepping up to so if we ever

2421
02:05:04,760 --> 02:05:13,250
exceed that cost then we're done I guess

2422
02:05:08,750 --> 02:05:16,340
I should say if it's equal right so if

2423
02:05:13,250 --> 02:05:18,050
we're I mean I guess another way to say

2424
02:05:16,340 --> 02:05:20,739
this would be actually this is just a

2425
02:05:18,050 --> 02:05:23,440
while loop so this is

2426
02:05:20,738 --> 02:05:27,839
you know while cost is less than max

2427
02:05:23,439 --> 02:05:27,839
cost per a keep going

2428
02:05:28,750 --> 02:05:39,789
and we may want to pad that I don't know

2429
02:05:31,079 --> 02:05:41,920
so so like patted max cost per Ray or

2430
02:05:39,789 --> 02:05:45,039
something so we may want to let the

2431
02:05:41,920 --> 02:05:48,250
tables go a little bit further I don't

2432
02:05:45,039 --> 02:05:55,619
know if we want them to be exactly that

2433
02:05:48,250 --> 02:05:55,619
tight so let's just do it like that

2434
02:05:59,850 --> 02:06:10,180
wasn't quite done there here we go okay

2435
02:06:06,210 --> 02:06:18,579
so yeah

2436
02:06:10,180 --> 02:06:24,070
Oh No yeah all right so I take it back

2437
02:06:18,579 --> 02:06:28,529
because we use the step we flatten the

2438
02:06:24,069 --> 02:06:31,299
step down to just be a direct offset

2439
02:06:28,529 --> 02:06:33,090
there's not going to be any way around

2440
02:06:31,300 --> 02:06:36,199
it

2441
02:06:33,090 --> 02:06:36,199
[Music]

2442
02:06:40,019 --> 02:06:47,010
yes so that is going to have to be

2443
02:06:42,219 --> 02:06:47,010
dependent on that voxel dimension right

2444
02:06:49,170 --> 02:06:56,920
because there's because if we want to

2445
02:06:52,269 --> 02:07:16,329
bake the offset in directly there's no

2446
02:06:56,920 --> 02:07:18,399
other way to do it yeah hmm so that's

2447
02:07:16,328 --> 02:07:20,978
unfortunate but do ya I mean that does

2448
02:07:18,399 --> 02:07:23,078
look like what we would have to do there

2449
02:07:20,979 --> 02:07:27,789
so I guess voxel dim does have to be

2450
02:07:23,078 --> 02:07:29,408
there right and so when we actually pass

2451
02:07:27,788 --> 02:07:31,809
this in we're gonna have to be able to

2452
02:07:29,408 --> 02:07:40,268
we're gonna have to know what the total

2453
02:07:31,809 --> 02:07:46,300
cell count is right and that's pretty

2454
02:07:40,269 --> 02:07:48,130
much all there is to it I mean it's not

2455
02:07:46,300 --> 02:07:48,998
the end of the world but yeah it'd be

2456
02:07:48,130 --> 02:07:50,288
nice with us through things were

2457
02:07:48,998 --> 02:07:55,300
independent but I don't think they're

2458
02:07:50,288 --> 02:07:58,118
gonna be all right so we now know we

2459
02:07:55,300 --> 02:07:59,800
know what the voxel seldom is so we know

2460
02:07:58,118 --> 02:08:04,839
that whenever we set the fundamental

2461
02:07:59,800 --> 02:08:08,889
unit we can then make our voxels so our

2462
02:08:04,840 --> 02:08:11,110
atlas grid the Vox seldom and the inbox

2463
02:08:08,889 --> 02:08:14,769
seldom is at the moment anyway going to

2464
02:08:11,109 --> 02:08:16,988
be the same for both of these so the

2465
02:08:14,769 --> 02:08:18,760
voxel dim can be passed to both of these

2466
02:08:16,988 --> 02:08:20,529
functions and it's always going to be

2467
02:08:18,760 --> 02:08:23,380
the same we don't have to do anything

2468
02:08:20,529 --> 02:08:26,498
weird there the Vox will dim on the

2469
02:08:23,380 --> 02:08:29,739
other hand or the cell count as it might

2470
02:08:26,498 --> 02:08:34,179
be called is going to change so

2471
02:08:29,738 --> 02:08:36,968
basically like the the difference here

2472
02:08:34,179 --> 02:08:41,670
is going to be this fox logged in with

2473
02:08:36,969 --> 02:08:47,519
apron so you know these two are

2474
02:08:41,670 --> 02:08:47,519
different there so the

2475
02:08:48,949 --> 02:08:56,569
I'm gonna call this the cell count

2476
02:08:51,800 --> 02:09:01,110
instead of oxygen and I'm just gonna say

2477
02:08:56,569 --> 02:09:04,019
the cell the spatial cell count and the

2478
02:09:01,109 --> 02:09:12,359
Atlas cell count right are gonna be

2479
02:09:04,020 --> 02:09:14,040
different values so in the case where we

2480
02:09:12,359 --> 02:09:15,779
have to recreate these we know what the

2481
02:09:14,039 --> 02:09:18,000
cell dim is because it's always the same

2482
02:09:15,779 --> 02:09:19,710
and that'll never change just based on

2483
02:09:18,000 --> 02:09:21,659
the fundamental unit when we come

2484
02:09:19,710 --> 02:09:24,149
through here and we set the Atlas

2485
02:09:21,659 --> 02:09:26,220
spatial grid offset that is actually

2486
02:09:24,149 --> 02:09:28,439
something that's always the same so we

2487
02:09:26,220 --> 02:09:30,420
don't really need to initialize it here

2488
02:09:28,439 --> 02:09:33,449
although we might as well because why do

2489
02:09:30,420 --> 02:09:34,829
it more than once when we get the

2490
02:09:33,449 --> 02:09:36,779
spatial grid count we know what that

2491
02:09:34,829 --> 02:09:43,019
actually is it's going to be the Atlas

2492
02:09:36,779 --> 02:09:45,719
cell count plus that that spatial grid

2493
02:09:43,020 --> 02:09:47,010
index offset so it's plus this value

2494
02:09:45,720 --> 02:09:48,990
here and we want that on both sides

2495
02:09:47,010 --> 02:09:53,039
because it's a radius expansion

2496
02:09:48,989 --> 02:09:55,289
basically and then when we compute the

2497
02:09:53,039 --> 02:09:58,079
corners the corners are actually going

2498
02:09:55,289 --> 02:10:01,260
to be specified sort of down here right

2499
02:09:58,079 --> 02:10:02,430
so when we compute the corners those

2500
02:10:01,260 --> 02:10:06,000
that's probably going to happen in a

2501
02:10:02,430 --> 02:10:12,500
different place which also suggests to

2502
02:10:06,000 --> 02:10:12,500
the suggestible listener that make voxel

2503
02:10:14,210 --> 02:10:19,710
probably is not exactly what we want

2504
02:10:17,010 --> 02:10:22,770
right and again right the usage code

2505
02:10:19,710 --> 02:10:25,710
first this just happened to be something

2506
02:10:22,770 --> 02:10:28,200
that I threw in there it doesn't really

2507
02:10:25,710 --> 02:10:31,859
seem to be right so if you take a look

2508
02:10:28,199 --> 02:10:35,130
at how it actually works we want to be

2509
02:10:31,859 --> 02:10:37,289
able to rebase that fairly frequently so

2510
02:10:35,130 --> 02:10:45,930
probably what will actually happen is

2511
02:10:37,289 --> 02:10:48,840
this and the total bounds will actually

2512
02:10:45,930 --> 02:10:50,630
be recomputed fairly often so the min

2513
02:10:48,840 --> 02:10:57,720
corner will come in here and it won't

2514
02:10:50,630 --> 02:11:03,930
come in there that seems a lot more like

2515
02:10:57,720 --> 02:11:05,579
it's and again that's just based on

2516
02:11:03,930 --> 02:11:09,150
looking at how the usage code was

2517
02:11:05,579 --> 02:11:12,539
working and we want our API to like play

2518
02:11:09,149 --> 02:11:14,069
well with that usage code so this is

2519
02:11:12,539 --> 02:11:15,350
actually what it should have been and

2520
02:11:14,069 --> 02:11:17,969
now we know

2521
02:11:15,350 --> 02:11:20,039
so make voxel we'll only take the cell

2522
02:11:17,970 --> 02:11:23,600
count in the seldom and hey guess what

2523
02:11:20,039 --> 02:11:23,600
that's exactly what we happen to have

2524
02:11:23,659 --> 02:11:38,250
and now these two things have converged

2525
02:11:27,779 --> 02:11:39,509
nicely so I think that's good the rest

2526
02:11:38,250 --> 02:11:42,659
of this I'm gonna ignore real

2527
02:11:39,510 --> 02:11:47,909
temporarily here so the Vox seldom here

2528
02:11:42,659 --> 02:11:50,130
we can actually we can actually loft

2529
02:11:47,909 --> 02:11:52,920
this value like this is always going to

2530
02:11:50,130 --> 02:11:55,289
be the same so it's totally fine if

2531
02:11:52,920 --> 02:11:57,329
these all want to use the Vox sold in

2532
02:11:55,289 --> 02:11:59,250
like this

2533
02:11:57,329 --> 02:12:03,479
well this since are using in as well

2534
02:11:59,250 --> 02:12:07,319
like I'll just have it get them out of

2535
02:12:03,479 --> 02:12:16,519
here so in this case we're gonna talk

2536
02:12:07,319 --> 02:12:20,609
about the Atlas grid cell Jim and the in

2537
02:12:16,520 --> 02:12:25,500
Vox seldom is the Atlas grid in seldom

2538
02:12:20,609 --> 02:12:27,569
and again these are probably things that

2539
02:12:25,500 --> 02:12:31,529
we will want to play with a little bit

2540
02:12:27,569 --> 02:12:33,029
more later but I'm just gonna leave them

2541
02:12:31,529 --> 02:12:35,029
for now since I don't really want to get

2542
02:12:33,029 --> 02:12:37,500
into this part of the code at the moment

2543
02:12:35,029 --> 02:12:42,109
but all this is is just using those

2544
02:12:37,500 --> 02:12:42,109
values right

2545
02:12:49,319 --> 02:13:17,078
don't actually delete that okay what the

2546
02:12:56,380 --> 02:13:24,159
hey what the hey man okay so that just

2547
02:13:17,078 --> 02:13:26,078
about does it for the unit code let's

2548
02:13:24,158 --> 02:13:28,868
take a look at this now so what we want

2549
02:13:26,078 --> 02:13:31,960
to do now is call set min corner on our

2550
02:13:28,868 --> 02:13:36,308
two voxels so basically each voxel wants

2551
02:13:31,960 --> 02:13:39,368
to sort of have the ability to be placed

2552
02:13:36,309 --> 02:13:41,019
now into their correct location you can

2553
02:13:39,368 --> 02:13:42,339
see here that the spatial grid min

2554
02:13:41,019 --> 02:13:44,979
corner is going to be slightly different

2555
02:13:42,340 --> 02:13:47,469
because it has to use the extra

2556
02:13:44,979 --> 02:13:50,050
occlusion radius there so we know that

2557
02:13:47,469 --> 02:13:56,170
that is something we actually stored so

2558
02:13:50,050 --> 02:13:57,969
that's solution atlas to spatial so we

2559
02:13:56,170 --> 02:14:02,408
know what the offset is supposed to be

2560
02:13:57,969 --> 02:14:04,389
it's supposed to be this and so we know

2561
02:14:02,408 --> 02:14:08,618
how to produce the corner when we have

2562
02:14:04,389 --> 02:14:11,409
one and you you know we have one in the

2563
02:14:08,618 --> 02:14:13,179
other we're gonna want to be able to get

2564
02:14:11,408 --> 02:14:17,618
the minimum corner here

2565
02:14:13,179 --> 02:14:24,340
so in this voxel grid we want to be able

2566
02:14:17,618 --> 02:14:26,018
to do something like this so anyone who

2567
02:14:24,340 --> 02:14:27,969
wants to work with the min corner can do

2568
02:14:26,019 --> 02:14:30,039
that so we're gonna set the min corner

2569
02:14:27,969 --> 02:14:34,569
by getting them in corner you know of

2570
02:14:30,038 --> 02:14:41,429
the other one so the Atlas grid and then

2571
02:14:34,569 --> 02:14:48,759
we're gonna subtract that offset like so

2572
02:14:41,429 --> 02:14:50,170
I do not know what's going on here for

2573
02:14:48,760 --> 02:14:51,699
critters definitely having issues with

2574
02:14:50,170 --> 02:14:53,679
the indentation today for whatever

2575
02:14:51,698 --> 02:14:55,669
reason which is unusual because I don't

2576
02:14:53,679 --> 02:14:58,190
normally see a lot of that but

2577
02:14:55,670 --> 02:15:01,190
it's kind of weird I might also do this

2578
02:14:58,189 --> 02:15:13,659
so let's do spatial mid-corner and we'll

2579
02:15:01,189 --> 02:15:13,659
just compute that like so yeah and yeah

2580
02:15:14,409 --> 02:15:20,630
so that should be fine so if I want to

2581
02:15:18,050 --> 02:15:24,590
set the Atlas krinsman corner and the

2582
02:15:20,630 --> 02:15:28,779
spatial grits min corner I'll just do

2583
02:15:24,590 --> 02:15:28,779
spatial mid-corner and Atlas min corner

2584
02:15:34,420 --> 02:15:41,329
and I'm not sure what the hot voxel rect

2585
02:15:39,050 --> 02:15:52,039
is actually for I guess it's just to set

2586
02:15:41,329 --> 02:15:57,979
the bounds and you know in this case in

2587
02:15:52,039 --> 02:15:59,239
this case that stuff is probably stuff

2588
02:15:57,979 --> 02:16:02,029
you would just get from the voxel

2589
02:15:59,239 --> 02:16:05,840
normally right so I mean we can do it

2590
02:16:02,029 --> 02:16:08,619
this way if we want to but it's not

2591
02:16:05,840 --> 02:16:10,670
really necessary to do it quite this way

2592
02:16:08,619 --> 02:16:13,010
so we probably want to streamline this a

2593
02:16:10,670 --> 02:16:16,279
little bit but either way here's where

2594
02:16:13,010 --> 02:16:19,369
that Vox corner this is the actual value

2595
02:16:16,279 --> 02:16:23,050
we care about here so the Atlas min

2596
02:16:19,369 --> 02:16:23,050
corner is this

2597
02:16:25,420 --> 02:16:31,609
and this value is actually just going to

2598
02:16:28,670 --> 02:16:34,579
get done here automatically so we really

2599
02:16:31,609 --> 02:16:36,020
don't need to be doing that but again at

2600
02:16:34,579 --> 02:16:39,350
the moment I don't know that I actually

2601
02:16:36,020 --> 02:16:43,399
want to touch that because there's just

2602
02:16:39,350 --> 02:16:45,920
a lot of stuff going on here so I think

2603
02:16:43,399 --> 02:16:49,218
that's all good in here where we're

2604
02:16:45,920 --> 02:16:56,420
doing our test work here this this stuff

2605
02:16:49,218 --> 02:16:58,129
for the internal lighting core stuff in

2606
02:16:56,420 --> 02:17:00,829
this particular case where we've got the

2607
02:16:58,129 --> 02:17:02,509
work I don't know if we want to pass the

2608
02:17:00,829 --> 02:17:04,250
work into the internal lighting core

2609
02:17:02,510 --> 02:17:09,429
just so that we can sum it on the

2610
02:17:04,250 --> 02:17:13,549
outside that I really don't know I

2611
02:17:09,429 --> 02:17:16,469
suppose that's probably fine meaning the

2612
02:17:13,549 --> 02:17:19,578
work array would be passed in here but

2613
02:17:16,468 --> 02:17:19,578
[Music]

2614
02:17:27,000 --> 02:17:30,329
hard to say

2615
02:17:35,280 --> 02:17:40,270
since the work count is kind of comp is

2616
02:17:38,079 --> 02:17:42,879
kind of like computed in here this is

2617
02:17:40,270 --> 02:17:44,890
seems like a better place to do it and

2618
02:17:42,879 --> 02:17:46,989
since all you really want to do is take

2619
02:17:44,889 --> 02:17:48,849
the summation of these things it seems

2620
02:17:46,989 --> 02:17:51,399
like it the better idea would just be to

2621
02:17:48,850 --> 02:17:53,140
pass the summation out so that this

2622
02:17:51,399 --> 02:17:57,489
stuff is not happening in sort of

2623
02:17:53,139 --> 02:17:59,289
arbitrary and weird ways right so if

2624
02:17:57,489 --> 02:18:02,110
this is the actual summation that you're

2625
02:17:59,290 --> 02:18:04,150
trying to take like you know if this is

2626
02:18:02,110 --> 02:18:05,739
what we're actually trying to do then it

2627
02:18:04,149 --> 02:18:07,479
seems like a smarter thing to do would

2628
02:18:05,739 --> 02:18:10,300
just be like instead of leaking this

2629
02:18:07,479 --> 02:18:20,439
information out and having it be kind of

2630
02:18:10,300 --> 02:18:26,260
you know unpleasant right I'm not even

2631
02:18:20,440 --> 02:18:28,750
sure what I'm not even sure why we're

2632
02:18:26,260 --> 02:18:29,979
quite doing it this way there's a lot of

2633
02:18:28,750 --> 02:18:32,729
weird stuff happening in here we could

2634
02:18:29,979 --> 02:18:32,729
clean a lot of this up

2635
02:18:41,299 --> 02:18:50,090
yeah so this this should really look

2636
02:18:43,250 --> 02:18:51,408
like this right and really what we

2637
02:18:50,090 --> 02:18:53,988
should be doing here saying all right

2638
02:18:51,408 --> 02:18:55,269
this is doing a repeat where it's you

2639
02:18:53,988 --> 02:18:57,260
know

2640
02:18:55,269 --> 02:18:58,969
initializing these work things and

2641
02:18:57,260 --> 02:19:03,199
sending them off which it may do in a

2642
02:18:58,968 --> 02:19:06,759
loop or it may not right and what I'm

2643
02:19:03,199 --> 02:19:11,078
not sure about is why we did this I

2644
02:19:06,760 --> 02:19:11,078
guess the reason we did this is because

2645
02:19:15,908 --> 02:19:20,299
if we don't have a queue like calling in

2646
02:19:19,039 --> 02:19:21,920
the external code we don't want this

2647
02:19:20,299 --> 02:19:23,328
because otherwise you could just add the

2648
02:19:21,920 --> 02:19:24,558
entries and then this would just work

2649
02:19:23,328 --> 02:19:29,209
whether you were a single threaded or

2650
02:19:24,558 --> 02:19:30,468
multi-threaded right so kind of annoying

2651
02:19:29,209 --> 02:19:32,028
but it's fine

2652
02:19:30,468 --> 02:19:34,879
so anyway when this happens then this

2653
02:19:32,029 --> 02:19:37,399
will get some Aidid and then we'll we'll

2654
02:19:34,879 --> 02:19:38,750
end up being able to return that so the

2655
02:19:37,398 --> 02:19:40,760
only thing that I would say here is

2656
02:19:38,750 --> 02:19:42,738
instead of this internal lighting core

2657
02:19:40,760 --> 02:19:45,228
returning what its returning now we can

2658
02:19:42,738 --> 02:19:51,158
do instead is just take the work stuff

2659
02:19:45,228 --> 02:19:51,158
here and make this be like a stat

2660
02:19:57,100 --> 02:20:04,750
and that way we can just you know return

2661
02:20:01,180 --> 02:20:06,279
a lighting stats structure from this

2662
02:20:04,750 --> 02:20:09,430
routine and we can make this a little

2663
02:20:06,279 --> 02:20:21,850
cleaner later but for now we can just do

2664
02:20:09,430 --> 02:20:24,100
this right so now that data will just

2665
02:20:21,850 --> 02:20:25,510
come back automatically and we don't

2666
02:20:24,100 --> 02:20:28,180
have to deal with this weird like

2667
02:20:25,510 --> 02:20:30,309
nonsense where we're returning out the

2668
02:20:28,180 --> 02:20:31,510
work count and then like they're looping

2669
02:20:30,309 --> 02:20:33,818
over stuff that they don't have

2670
02:20:31,510 --> 02:20:39,969
necessarily I like this that was just

2671
02:20:33,818 --> 02:20:41,408
dumb right okay so coming back to the

2672
02:20:39,969 --> 02:20:42,789
way this was working before so now we

2673
02:20:41,408 --> 02:20:45,609
can just say alright the lighting stats

2674
02:20:42,790 --> 02:20:48,659
come back through here in a nice clean

2675
02:20:45,609 --> 02:20:52,300
way we can then just use those stats

2676
02:20:48,658 --> 02:21:03,029
directly as we were about to report them

2677
02:20:52,299 --> 02:21:11,709
so all of these are just spats dot oops

2678
02:21:03,029 --> 02:21:16,479
right and all of these are just sad stat

2679
02:21:11,709 --> 02:21:18,250
that seems like way better then in here

2680
02:21:16,478 --> 02:21:22,148
where we're actually like lofting up

2681
02:21:18,250 --> 02:21:23,500
these these things in order to basically

2682
02:21:22,148 --> 02:21:25,898
make stand-ins

2683
02:21:23,500 --> 02:21:27,639
we don't have to do this anymore so we

2684
02:21:25,898 --> 02:21:31,299
don't have to fake initialize the work

2685
02:21:27,639 --> 02:21:33,488
structures and furthermore we don't have

2686
02:21:31,299 --> 02:21:35,408
to do the computation after the fact so

2687
02:21:33,488 --> 02:21:39,779
this rolls up in there which is actually

2688
02:21:35,408 --> 02:21:39,779
a great that's way way way better

2689
02:21:39,869 --> 02:21:46,930
because now we can just do lighting

2690
02:21:42,369 --> 02:21:49,420
stats stats and off we go we can also

2691
02:21:46,930 --> 02:21:51,850
just pull these out and then not touch

2692
02:21:49,420 --> 02:21:54,658
the rest of the code if we want to which

2693
02:21:51,850 --> 02:21:54,658
also seems good

2694
02:22:01,771 --> 02:22:06,521
okay

2695
02:22:03,761 --> 02:22:08,079
the Katie nodes are going away we're not

2696
02:22:06,521 --> 02:22:12,521
going to touch that

2697
02:22:08,079 --> 02:22:14,591
and the table voxel dim stuff again

2698
02:22:12,521 --> 02:22:16,511
don't care about any of that and

2699
02:22:14,591 --> 02:22:19,050
shouldn't have to do that anymore

2700
02:22:16,511 --> 02:22:22,091
actually Shh

2701
02:22:19,050 --> 02:22:23,319
so we'll probably have to call no we

2702
02:22:22,091 --> 02:22:26,381
won't because all this stuff will

2703
02:22:23,319 --> 02:22:30,101
actually be in there I guess it won't be

2704
02:22:26,380 --> 02:22:32,369
because it won't quite be saved so yeah

2705
02:22:30,101 --> 02:22:43,601
this stuff is going to be a little bit

2706
02:22:32,370 --> 02:22:46,061
trickier so yeah one problem we're gonna

2707
02:22:43,601 --> 02:22:49,079
have a little bit here is calling the

2708
02:22:46,060 --> 02:22:52,180
begin lighting thing

2709
02:22:49,079 --> 02:22:52,180
[Music]

2710
02:22:54,059 --> 02:22:59,639
we may want to call the begin function

2711
02:22:57,119 --> 02:23:00,899
and let it do what it's going to do like

2712
02:22:59,639 --> 02:23:02,398
in other words we may want to call big

2713
02:23:00,898 --> 02:23:04,289
you may want to instead of calling

2714
02:23:02,398 --> 02:23:08,358
internal i t'ink or directly we may want

2715
02:23:04,290 --> 02:23:13,710
to actually call the full thing right

2716
02:23:08,359 --> 02:23:19,828
and maybe like this collapses down into

2717
02:23:13,709 --> 02:23:21,448
something that you know maybe this

2718
02:23:19,828 --> 02:23:23,068
collapses down into one call anyway

2719
02:23:21,449 --> 02:23:32,880
eventually effect let's take a look at

2720
02:23:23,068 --> 02:23:34,350
that so here's another question so the

2721
02:23:32,879 --> 02:23:36,389
other question is just yet so you can

2722
02:23:34,350 --> 02:23:38,100
kind of see here so the reason that we

2723
02:23:36,389 --> 02:23:41,939
need it the reason that there's even a

2724
02:23:38,100 --> 02:23:48,899
begin letting call at all is because of

2725
02:23:41,939 --> 02:23:51,090
the set light bounds saying so the

2726
02:23:48,898 --> 02:23:53,519
question is is like did we really need

2727
02:23:51,090 --> 02:23:56,939
that to be the case and I guess the rete

2728
02:23:53,520 --> 02:23:59,850
the thing is like the reason that has to

2729
02:23:56,939 --> 02:24:06,960
occur is just because if we don't call

2730
02:23:59,850 --> 02:24:09,359
set light bounds then the the pixel

2731
02:24:06,959 --> 02:24:14,009
shaders that operate in this part of the

2732
02:24:09,359 --> 02:24:17,040
code you know won't know how to look up

2733
02:24:14,010 --> 02:24:20,818
their lighting in the voxel right that's

2734
02:24:17,040 --> 02:24:22,409
the actual problem and so that's the

2735
02:24:20,818 --> 02:24:27,439
reason that this stuff is happening in

2736
02:24:22,408 --> 02:24:31,969
here but it seems like you know we could

2737
02:24:27,439 --> 02:24:35,148
just track the inputs to this and

2738
02:24:31,969 --> 02:24:37,948
actually just let all of this stuff run

2739
02:24:35,148 --> 02:24:41,689
that would be a better way of testing

2740
02:24:37,949 --> 02:24:41,689
this code I think

2741
02:24:53,559 --> 02:24:59,000
yeah I mean that would just be way

2742
02:24:55,728 --> 02:25:05,449
better right and that way you know we

2743
02:24:59,000 --> 02:25:10,790
can just we can just make this code be

2744
02:25:05,450 --> 02:25:12,470
like run in its entirety so I feel like

2745
02:25:10,790 --> 02:25:14,840
internal lighting core can just be

2746
02:25:12,469 --> 02:25:16,849
simplified into end lighting and we can

2747
02:25:14,840 --> 02:25:19,760
just call both of these so and what we

2748
02:25:16,850 --> 02:25:22,100
do is we just so if you look at what

2749
02:25:19,760 --> 02:25:26,420
would happen here where you call if you

2750
02:25:22,100 --> 02:25:30,170
look at where the render group actually

2751
02:25:26,420 --> 02:25:36,079
gets used in here it's just to figure

2752
02:25:30,170 --> 02:25:38,750
out what those what those basic values

2753
02:25:36,079 --> 02:25:41,239
are so it seems like it should be fairly

2754
02:25:38,750 --> 02:25:48,340
straightforward to do and it's a little

2755
02:25:41,239 --> 02:25:51,199
bit of a bummer like it does seem like

2756
02:25:48,340 --> 02:25:53,299
maybe the set light bands and enable

2757
02:25:51,200 --> 02:26:02,569
lighting stuff maybe should happen kind

2758
02:25:53,299 --> 02:26:05,420
of at one level above this in other

2759
02:26:02,568 --> 02:26:07,489
words it would probably be nice to sort

2760
02:26:05,420 --> 02:26:12,129
of separate these things out a little

2761
02:26:07,489 --> 02:26:12,129
bit and not have them actually be

2762
02:26:12,790 --> 02:26:17,450
retrieved directly from the game render

2763
02:26:15,559 --> 02:26:20,449
commands to keep this and the renderer

2764
02:26:17,450 --> 02:26:22,939
separate right because we're almost able

2765
02:26:20,450 --> 02:26:25,100
to do that and really all we need to

2766
02:26:22,939 --> 02:26:28,309
know is the atlases that we're supposed

2767
02:26:25,100 --> 02:26:28,970
to use we don't really need anything

2768
02:26:28,309 --> 02:26:30,889
else

2769
02:26:28,969 --> 02:26:33,099
and so if we were to move these things

2770
02:26:30,889 --> 02:26:33,099
up

2771
02:26:37,748 --> 02:26:45,588
that seems really desirable to me so I'm

2772
02:26:43,998 --> 02:26:58,728
going to do that so I think what we want

2773
02:26:45,588 --> 02:27:01,068
here is like set lighting values or

2774
02:26:58,728 --> 02:27:02,809
something so these things here where

2775
02:27:01,068 --> 02:27:06,948
we're calling into the group so this

2776
02:27:02,809 --> 02:27:14,568
stuff here this is what we would

2777
02:27:06,949 --> 02:27:16,879
actually do where we would set the

2778
02:27:14,568 --> 02:27:19,930
lighting enabled up here and then we'd

2779
02:27:16,879 --> 02:27:22,909
actually make the calls in this and

2780
02:27:19,930 --> 02:27:25,818
similarly like all of the stuff that was

2781
02:27:22,908 --> 02:27:28,430
operating on the group would happen in

2782
02:27:25,818 --> 02:27:36,219
here so that way you'd have the render

2783
02:27:28,430 --> 02:27:36,220
group in here and the lighting solution

2784
02:27:36,549 --> 02:27:43,369
you'd do these operations anytime you

2785
02:27:40,248 --> 02:27:47,628
wanted them done and you'd get the hot

2786
02:27:43,369 --> 02:27:51,819
voxel rect you'd actually get that in

2787
02:27:47,629 --> 02:27:51,819
here instead right and

2788
02:28:00,738 --> 02:28:08,719
yeah yeah yeah so in here what we do is

2789
02:28:05,068 --> 02:28:11,219
we'd say okay we can get these things we

2790
02:28:08,719 --> 02:28:13,228
we actually know we can get the total

2791
02:28:11,219 --> 02:28:16,049
bounds by just looking at the Atlas

2792
02:28:13,228 --> 02:28:17,969
itself so if the Atlas grade we could

2793
02:28:16,049 --> 02:28:20,789
just say what's the total bounds that's

2794
02:28:17,969 --> 02:28:22,769
that box we already know what that is

2795
02:28:20,790 --> 02:28:24,630
and then in order to get the actual

2796
02:28:22,770 --> 02:28:27,060
dimension of it because we need the

2797
02:28:24,629 --> 02:28:28,978
inverse then we can just say to get the

2798
02:28:27,059 --> 02:28:31,920
dimension of the hotbox lurex and then

2799
02:28:28,978 --> 02:28:34,289
we're done right so this can be a

2800
02:28:31,920 --> 02:28:39,029
self-contained function and we don't

2801
02:28:34,290 --> 02:28:40,410
actually need surprise that compiled we

2802
02:28:39,029 --> 02:28:44,220
don't actually need the render group

2803
02:28:40,409 --> 02:28:45,959
anywhere so then in here where we look

2804
02:28:44,219 --> 02:28:47,909
at what we actually needed the commands

2805
02:28:45,959 --> 02:28:50,728
for you can see that basically what we

2806
02:28:47,909 --> 02:28:52,500
need is we just need the two atlases so

2807
02:28:50,728 --> 02:28:54,389
what this actually should be doing here

2808
02:28:52,500 --> 02:28:56,909
instead of passing the render group at

2809
02:28:54,389 --> 02:29:00,809
all is it should probably be passing

2810
02:28:56,909 --> 02:29:07,139
more specifically it probably would need

2811
02:29:00,809 --> 02:29:13,769
to pass the the two atlases so we would

2812
02:29:07,139 --> 02:29:15,869
have one lighting Atlas it's a speck at

2813
02:29:13,770 --> 02:29:20,520
least one Atlas that's the diffuse Atlas

2814
02:29:15,870 --> 02:29:22,229
and so these are the two lighting

2815
02:29:20,520 --> 02:29:26,430
atlases that the renderer is using and

2816
02:29:22,228 --> 02:29:28,049
this will update that them so then you

2817
02:29:26,430 --> 02:29:31,670
wouldn't need the game render commands

2818
02:29:28,049 --> 02:29:31,670
you could just look at the spec atlas

2819
02:29:31,760 --> 02:29:38,210
and then down here where you actually

2820
02:29:35,010 --> 02:29:38,210
have to operate on those

2821
02:29:44,959 --> 02:30:01,739
you just do I think that's what we would

2822
02:29:56,250 --> 02:30:04,470
want so now that's kind of like you know

2823
02:30:01,739 --> 02:30:15,271
separated out and you need to call both

2824
02:30:04,470 --> 02:30:17,761
of these things right so you need to

2825
02:30:15,271 --> 02:30:20,851
call begin lighting computation because

2826
02:30:17,761 --> 02:30:23,450
you need to be able to you know figure

2827
02:30:20,851 --> 02:30:26,431
out where things are going to be and

2828
02:30:23,450 --> 02:30:28,700
really it's not begin lighting

2829
02:30:26,431 --> 02:30:35,280
computation that's probably a misnomer

2830
02:30:28,700 --> 02:30:36,450
right it's really like setting the

2831
02:30:35,280 --> 02:30:39,690
location of it

2832
02:30:36,450 --> 02:30:45,690
so what you're really doing is saying

2833
02:30:39,690 --> 02:30:47,340
more like set lighting region or

2834
02:30:45,690 --> 02:30:51,899
something or like compute lighting

2835
02:30:47,340 --> 02:30:53,220
region or change lighting region update

2836
02:30:51,899 --> 02:30:57,959
lighting region I don't know what you

2837
02:30:53,220 --> 02:31:04,560
want what it would be called set

2838
02:30:57,959 --> 02:31:06,000
lighting region bounds I don't know so

2839
02:31:04,560 --> 02:31:07,920
really what we're doing here is we're

2840
02:31:06,000 --> 02:31:13,709
we're doing something more like this

2841
02:31:07,920 --> 02:31:20,460
which is like setting up you know set up

2842
02:31:13,709 --> 02:31:22,079
lighting region and like you know push

2843
02:31:20,459 --> 02:31:24,299
lighting render values or something like

2844
02:31:22,079 --> 02:31:26,220
this you're not good names but I'm not

2845
02:31:24,299 --> 02:31:28,680
sure how you actually describe what's

2846
02:31:26,220 --> 02:31:33,329
happening here one is setting up sort of

2847
02:31:28,681 --> 02:31:36,360
where lighting is happening right and

2848
02:31:33,329 --> 02:31:38,700
the other is actually telling the

2849
02:31:36,360 --> 02:31:40,200
renderer what it needs to know so this

2850
02:31:38,700 --> 02:31:44,101
is just saying where the lighting is

2851
02:31:40,200 --> 02:31:48,120
going to happen we've got the render

2852
02:31:44,101 --> 02:31:50,550
group and this where we're pulling out

2853
02:31:48,120 --> 02:31:53,730
those lighting values in here right so

2854
02:31:50,549 --> 02:31:57,109
it's it's really this process where we

2855
02:31:53,729 --> 02:31:57,109
need to be able to send those things

2856
02:31:58,409 --> 02:32:03,840
so we need to be able to say here's the

2857
02:32:00,959 --> 02:32:06,478
diffuse atlas and here's the spec atlas

2858
02:32:03,840 --> 02:32:08,728
right and we need to send those down

2859
02:32:06,478 --> 02:32:24,778
because the lighting region needs to

2860
02:32:08,728 --> 02:32:29,519
know about them unfortunately so I'm not

2861
02:32:24,779 --> 02:32:34,760
sure what this is complaining about is

2862
02:32:29,520 --> 02:32:39,529
the render group that pointer yes it is

2863
02:32:34,760 --> 02:32:43,260
so getting closer to good still not

2864
02:32:39,529 --> 02:32:46,079
entirely fabulous you know but better

2865
02:32:43,260 --> 02:32:53,040
and then for end lighting computation

2866
02:32:46,079 --> 02:32:54,959
you know this has sort of the debug

2867
02:32:53,040 --> 02:32:58,290
output which could be split into a

2868
02:32:54,959 --> 02:33:01,379
separate path and the diffuse atlas and

2869
02:32:58,290 --> 02:33:04,109
spec atlas here could be passed again or

2870
02:33:01,379 --> 02:33:05,639
could be cached and i assume that may be

2871
02:33:04,109 --> 02:33:07,649
the right thing to do is to actually

2872
02:33:05,639 --> 02:33:09,299
cache those values when you set up the

2873
02:33:07,648 --> 02:33:12,829
lighting region because they can't

2874
02:33:09,299 --> 02:33:16,500
change like it would be very bad if you

2875
02:33:12,829 --> 02:33:23,478
switched which ones they were in the

2876
02:33:16,500 --> 02:33:25,920
middle of that so yeah like hard to say

2877
02:33:23,478 --> 02:33:29,429
but anyway when we do the end lighting

2878
02:33:25,920 --> 02:33:31,710
computation in here just taking a look

2879
02:33:29,430 --> 02:33:33,479
at what's happening this debug stuff

2880
02:33:31,709 --> 02:33:36,659
could definitely be in a separate piece

2881
02:33:33,478 --> 02:33:40,379
it doesn't need to be in there at the

2882
02:33:36,659 --> 02:33:44,789
moment so I'd also say maybe we could

2883
02:33:40,379 --> 02:33:48,059
have like push lighting debug values is

2884
02:33:44,790 --> 02:33:53,270
a separate thing and that way anything

2885
02:33:48,059 --> 02:33:53,269
that was operating kind of on you know

2886
02:33:54,590 --> 02:34:00,568
debug information and pushing that out

2887
02:33:58,350 --> 02:34:05,568
to the renderer can be done in a

2888
02:34:00,568 --> 02:34:05,568
separate place as well so basically like

2889
02:34:07,180 --> 02:34:14,090
push letting debug values oops

2890
02:34:10,190 --> 02:34:15,800
would be a separate thing I don't know

2891
02:34:14,090 --> 02:34:16,460
where the and letting computation is

2892
02:34:15,799 --> 02:34:24,459
there it is

2893
02:34:16,459 --> 02:34:26,659
so in here we'd say like yeah okay hmm

2894
02:34:24,459 --> 02:34:30,079
that's a separate thing you can do if

2895
02:34:26,659 --> 02:34:35,989
you want the debug stuff to happen but

2896
02:34:30,079 --> 02:34:38,659
it's not entirely necessary and I'm not

2897
02:34:35,989 --> 02:34:41,930
sure where the setup part comes in does

2898
02:34:38,659 --> 02:34:43,579
this actually use that it doesn't so

2899
02:34:41,930 --> 02:34:45,800
that isn't really necessary

2900
02:34:43,579 --> 02:34:48,680
and again the disputes out the suspect

2901
02:34:45,799 --> 02:34:51,590
list I guess for now I'll pass them in

2902
02:34:48,680 --> 02:34:53,000
but if we should like see what we

2903
02:34:51,590 --> 02:34:55,930
actually want to do about that because

2904
02:34:53,000 --> 02:34:55,930
I'm not entirely sure

2905
02:34:56,680 --> 02:35:01,521
maybe those just get cached those are

2906
02:35:00,021 --> 02:35:04,220
things that are kind of that bridge to

2907
02:35:01,521 --> 02:35:05,930
systems and so it's always a little bit

2908
02:35:04,219 --> 02:35:07,729
delicate when you have a situation like

2909
02:35:05,930 --> 02:35:09,139
that and as we're starting to clean this

2910
02:35:07,729 --> 02:35:13,039
code up it's something we can think

2911
02:35:09,139 --> 02:35:15,289
about how we really want to do that so

2912
02:35:13,040 --> 02:35:16,910
instead of an letting computation I'm

2913
02:35:15,290 --> 02:35:22,220
gonna call this update lighting because

2914
02:35:16,909 --> 02:35:25,310
that's what it actually is and off we go

2915
02:35:22,219 --> 02:35:29,659
so now we shouldn't need the commands

2916
02:35:25,310 --> 02:35:34,459
anymore here in terms of the boxes that

2917
02:35:29,659 --> 02:35:37,039
get passed through this stuff is now

2918
02:35:34,459 --> 02:35:39,049
part of like where we're actually doing

2919
02:35:37,040 --> 02:35:43,040
the yeah like all of this stuff where we

2920
02:35:39,049 --> 02:35:49,310
have the the boxes that come through

2921
02:35:43,040 --> 02:35:51,920
here that should actually be that should

2922
02:35:49,310 --> 02:35:57,940
actually be what gets passed to update

2923
02:35:51,920 --> 02:35:57,940
lighting right so these bits here

2924
02:36:08,751 --> 02:36:13,890
yeah

2925
02:36:11,210 --> 02:36:15,661
so these bits here we say update letting

2926
02:36:13,890 --> 02:36:17,640
so we say set the render region above

2927
02:36:15,661 --> 02:36:19,201
and then we say hey update the lighting

2928
02:36:17,640 --> 02:36:22,140
for this set of occluders and all that

2929
02:36:19,200 --> 02:36:25,800
stuff right and I think that's more or

2930
02:36:22,140 --> 02:36:27,540
less how that has to go if there's any

2931
02:36:25,800 --> 02:36:30,149
other way it's kind of nasty but you

2932
02:36:27,540 --> 02:36:31,529
have this like split problem where you

2933
02:36:30,149 --> 02:36:32,819
want things to be flowing in a

2934
02:36:31,530 --> 02:36:35,940
particular way and I don't think there's

2935
02:36:32,819 --> 02:36:39,149
any other way to do it okay so you get

2936
02:36:35,940 --> 02:36:45,631
the two atlases and then you get the

2937
02:36:39,149 --> 02:36:53,370
occluder account and the what are these

2938
02:36:45,630 --> 02:36:55,590
lighting box and the occluders you know

2939
02:36:53,370 --> 02:36:57,000
for now we're storing these but I'm not

2940
02:36:55,591 --> 02:36:59,161
sure they really should be in there

2941
02:36:57,001 --> 02:37:00,440
so as we clean this up though those may

2942
02:36:59,161 --> 02:37:14,130
go away as well

2943
02:37:00,440 --> 02:37:16,921
there's the occluder count in this case

2944
02:37:14,130 --> 02:37:28,501
render group it's never just called a

2945
02:37:16,921 --> 02:37:32,310
group and it looks like the platform

2946
02:37:28,501 --> 02:37:34,411
lighting queue for some reason didn't

2947
02:37:32,310 --> 02:37:37,171
get moved down to where I actually

2948
02:37:34,411 --> 02:37:41,680
wanted it in the parameter list which

2949
02:37:37,171 --> 02:37:44,600
was there all right

2950
02:37:41,680 --> 02:37:46,909
so I think that's good this is starting

2951
02:37:44,600 --> 02:37:55,220
to get more towards good I think that's

2952
02:37:46,909 --> 02:37:58,340
much better so I think these functions

2953
02:37:55,219 --> 02:38:01,608
at least now properly reflect what they

2954
02:37:58,340 --> 02:38:03,409
do which is good now we've got a bunch

2955
02:38:01,609 --> 02:38:05,840
of work left to do we'll pick it up

2956
02:38:03,409 --> 02:38:08,329
tomorrow we can go to a brief Q&amp;A for a

2957
02:38:05,840 --> 02:38:10,510
few minutes but we're already over time

2958
02:38:08,329 --> 02:38:14,799
so I'll keep it pretty brief

2959
02:38:10,510 --> 02:38:14,800
anyone have any on topic questions

2960
02:38:25,290 --> 02:38:30,930
oh yeah so we kind of didn't finish that

2961
02:38:28,799 --> 02:38:32,789
code yet unfortunately

2962
02:38:30,930 --> 02:38:37,290
that you're talking about there with the

2963
02:38:32,790 --> 02:38:38,850
Atlas min corner so I can kind of button

2964
02:38:37,290 --> 02:38:43,979
it up a little bit now but we kind of

2965
02:38:38,850 --> 02:38:46,340
need to to do it a little bit

2966
02:38:43,978 --> 02:38:46,340
differently

2967
02:38:54,979 --> 02:38:59,390
so this part is probably fine because

2968
02:38:57,560 --> 02:39:05,869
these will be set to zero initially and

2969
02:38:59,390 --> 02:39:07,959
then when we move through here yeah

2970
02:39:05,870 --> 02:39:16,000
you're right so we just want to use

2971
02:39:07,959 --> 02:39:16,000
Atlas min corner here like so

2972
02:39:20,860 --> 02:39:28,790
thanks for that catch that saves us the

2973
02:39:23,390 --> 02:39:34,000
trouble of finding him tomorrow I think

2974
02:39:28,790 --> 02:39:37,840
that's probably correct now in sohbat

2975
02:39:34,000 --> 02:39:37,840
that's very good in sohbat

2976
02:39:47,318 --> 02:39:58,010
yes so the reason that 603 and 604 are

2977
02:39:50,809 --> 02:40:03,078
not on YouTube yet oh sorry so 601 and

2978
02:39:58,010 --> 02:40:05,658
602 is because OBS is amazing and messed

2979
02:40:03,078 --> 02:40:07,760
up the recording on one of them and I

2980
02:40:05,658 --> 02:40:13,248
have to like go extract it from the

2981
02:40:07,760 --> 02:40:18,380
twitch stream properly so and OBS is a

2982
02:40:13,248 --> 02:40:19,958
real treasure I mean you get what you

2983
02:40:18,379 --> 02:40:22,958
pay for

2984
02:40:19,959 --> 02:40:22,959
right

2985
02:40:40,050 --> 02:40:49,859
max node in well max node index doesn't

2986
02:40:44,819 --> 02:40:52,520
exist anymore but I I know where you're

2987
02:40:49,860 --> 02:40:57,141
talking about you're talking about this

2988
02:40:52,521 --> 02:40:57,141
is this the part you're talking about

2989
02:41:08,450 --> 02:41:16,131
was the assert in bounds

2990
02:41:12,829 --> 02:41:16,130
this part

2991
02:41:21,940 --> 02:41:25,300
I'm not sure I know exactly what people

2992
02:41:23,771 --> 02:41:29,829
are asking here so you'll have to tell

2993
02:41:25,299 --> 02:41:30,909
me I think both parts both pieces of

2994
02:41:29,829 --> 02:41:34,289
code that you're talking about are now

2995
02:41:30,909 --> 02:41:34,289
on the screen so I'm not sure

2996
02:41:41,279 --> 02:42:01,930
it's missing the grid pointer you know

2997
02:41:51,010 --> 02:42:09,159
you're right how long have we left it

2998
02:42:01,930 --> 02:42:21,279
like that unbelievable that's a bit of

2999
02:42:09,159 --> 02:42:23,170
an owl shame there so hey now we have

3000
02:42:21,279 --> 02:42:27,069
our certs back they were turned off

3001
02:42:23,170 --> 02:42:29,500
there for a minute I was like how was

3002
02:42:27,068 --> 02:42:35,698
that compiling that's how it was

3003
02:42:29,500 --> 02:42:35,699
compiling yeah

3004
02:42:58,389 --> 02:43:02,029
so another thing I should do before we

3005
02:43:00,739 --> 02:43:07,639
go any further is I'm going to delete

3006
02:43:02,030 --> 02:43:11,620
the lighting record that we had so in

3007
02:43:07,639 --> 02:43:15,500
handmade debug we've got all these dumps

3008
02:43:11,620 --> 02:43:21,800
I'm gonna delete those because they're

3009
02:43:15,500 --> 02:43:24,680
wrong now so we're gonna want we're

3010
02:43:21,799 --> 02:43:26,869
gonna want to recapture and retest

3011
02:43:24,680 --> 02:43:31,850
everything tomorrow starting from

3012
02:43:26,870 --> 02:43:39,700
scratch right so I'm just gonna get

3013
02:43:31,850 --> 02:43:49,190
those out of there real quick all right

3014
02:43:39,700 --> 02:43:50,329
we'll pick this up tomorrow okay thank

3015
02:43:49,190 --> 02:43:51,800
you everyone for joining me for this on

3016
02:43:50,329 --> 02:43:53,840
handmade hero sort of pleasure coding

3017
02:43:51,799 --> 02:43:55,189
with you as always if you would like to

3018
02:43:53,840 --> 02:43:56,630
follow up series at home you can always

3019
02:43:55,190 --> 02:43:58,850
pre-order the game on handmade hear it

3020
02:43:56,629 --> 02:44:02,389
out or gonna come to the source code so

3021
02:43:58,850 --> 02:44:03,680
that you can follow along there's a

3022
02:44:02,389 --> 02:44:04,879
whole bunch of like debugging and

3023
02:44:03,680 --> 02:44:06,770
streamlining work that we're doing right

3024
02:44:04,879 --> 02:44:08,000
now so it's totally stuff that you could

3025
02:44:06,770 --> 02:44:11,510
try if you're looking for something to

3026
02:44:08,000 --> 02:44:13,129
practice at home that's what I'll be

3027
02:44:11,510 --> 02:44:16,309
doing tomorrow and you can try it

3028
02:44:13,129 --> 02:44:17,479
tonight and see how far you get that's

3029
02:44:16,309 --> 02:44:19,159
it for today I'll be back here tomorrow

3030
02:44:17,479 --> 02:44:20,840
until then have fun partnering everyone

3031
02:44:19,159 --> 02:44:23,139
and I'll see you in the Internet Dicky's

3032
02:44:20,840 --> 02:44:23,139
everybody

