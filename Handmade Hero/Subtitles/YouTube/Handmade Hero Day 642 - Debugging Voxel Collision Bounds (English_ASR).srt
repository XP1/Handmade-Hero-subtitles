1
00:00:00,080 --> 00:00:04,080
hello everybody and welcome to handmade

2
00:00:01,760 --> 00:00:05,040
hero uh show where we code a complete

3
00:00:04,080 --> 00:00:08,000
game

4
00:00:05,040 --> 00:00:10,719
live on stream uh you'll forgive me for

5
00:00:08,000 --> 00:00:12,240
being a little silly uh right now um

6
00:00:10,718 --> 00:00:13,359
someone sent me

7
00:00:12,240 --> 00:00:15,839
a clip we were talking about

8
00:00:13,359 --> 00:00:17,358
cryptocurrency

9
00:00:15,839 --> 00:00:22,000
the pre-stream

10
00:00:17,359 --> 00:00:22,000
and someone sent me a clip of john blow

11
00:00:22,800 --> 00:00:26,320
crashing well he didn't crash it but he

12
00:00:24,480 --> 00:00:28,320
was thinking about crashing garlic coin

13
00:00:26,320 --> 00:00:29,679
and it was cracking me up i didn't even

14
00:00:28,320 --> 00:00:30,800
know there was a garlic coin and neither

15
00:00:29,678 --> 00:00:35,199
did john

16
00:00:30,800 --> 00:00:35,200
um all right that was pretty good

17
00:00:37,200 --> 00:00:40,559
no okay

18
00:00:38,960 --> 00:00:43,359
um

19
00:00:40,558 --> 00:00:44,799
well uh nothing we're gonna do today is

20
00:00:43,359 --> 00:00:46,479
going to be as fun as crashing garlic

21
00:00:44,799 --> 00:00:48,159
coin um

22
00:00:46,479 --> 00:00:49,439
so

23
00:00:48,159 --> 00:00:51,839
so uh

24
00:00:49,439 --> 00:00:54,399
i don't know what to tell you um

25
00:00:51,840 --> 00:00:56,800
we're we're just going to be i i believe

26
00:00:54,399 --> 00:00:58,320
i wrote last times couple weeks ago

27
00:00:56,799 --> 00:00:59,679
because

28
00:00:58,320 --> 00:01:01,759
i didn't stream in a little bit well i

29
00:00:59,679 --> 00:01:03,198
streamed some stuff but it wasn't

30
00:01:01,759 --> 00:01:05,359
uh programming

31
00:01:03,198 --> 00:01:07,359
i so i

32
00:01:05,359 --> 00:01:09,680
we wanted to put in a collision detector

33
00:01:07,359 --> 00:01:12,319
that was you know more reliable because

34
00:01:09,680 --> 00:01:14,479
we're want to put in some combat code uh

35
00:01:12,319 --> 00:01:16,639
into the game and basically what we're

36
00:01:14,478 --> 00:01:19,280
doing here you can see the fist is

37
00:01:16,640 --> 00:01:20,799
stopped in place right now um the reason

38
00:01:19,280 --> 00:01:22,799
for that is we replaced the collision

39
00:01:20,799 --> 00:01:24,240
sector uh the reason for replacing the

40
00:01:22,799 --> 00:01:26,400
collision detector

41
00:01:24,239 --> 00:01:28,879
was we wrote a little voxel one that did

42
00:01:26,400 --> 00:01:30,880
incremental search uh just moving from

43
00:01:28,879 --> 00:01:32,959
voxel to voxel as it determined that it

44
00:01:30,879 --> 00:01:36,000
was okay for it to move there

45
00:01:32,959 --> 00:01:38,319
and unfortunately like i just wasn't

46
00:01:36,000 --> 00:01:40,799
it seemed pretty stable so like we

47
00:01:38,319 --> 00:01:42,719
didn't really have uh problems with

48
00:01:40,799 --> 00:01:43,680
things getting stuck

49
00:01:42,719 --> 00:01:46,879
but

50
00:01:43,680 --> 00:01:48,880
it it didn't roll off of corners the way

51
00:01:46,879 --> 00:01:49,920
i'd wanted to so it was pretty easy to

52
00:01:48,879 --> 00:01:52,478
like

53
00:01:49,920 --> 00:01:53,439
walk and have it like stop at like a

54
00:01:52,478 --> 00:01:54,959
corner

55
00:01:53,438 --> 00:01:57,599
and so what i wanted to do is be like

56
00:01:54,959 --> 00:01:58,718
smoother and kind of do roll off

57
00:01:57,599 --> 00:01:59,919
and one of the things that we noticed

58
00:01:58,718 --> 00:02:01,280
when we were looking at that kind of

59
00:01:59,920 --> 00:02:03,680
thing where we had like that kind of

60
00:02:01,280 --> 00:02:06,879
roll off effect

61
00:02:03,680 --> 00:02:10,000
uh is the rolling doesn't really work

62
00:02:06,879 --> 00:02:12,560
particularly well if you do incremental

63
00:02:10,000 --> 00:02:14,719
voxel search because even though the

64
00:02:12,560 --> 00:02:17,520
voxel search space that you probably

65
00:02:14,719 --> 00:02:19,439
should consider has a valid path that

66
00:02:17,520 --> 00:02:20,800
you would go to get to a place that's

67
00:02:19,439 --> 00:02:22,239
closer to the place you're trying to get

68
00:02:20,800 --> 00:02:24,239
to which indicates the clutch detector

69
00:02:22,239 --> 00:02:26,239
should allow you to move there

70
00:02:24,239 --> 00:02:29,280
it doesn't actually ever get to check

71
00:02:26,239 --> 00:02:31,120
that voxel because we only check voxels

72
00:02:29,280 --> 00:02:33,840
that would get you closer to where you

73
00:02:31,120 --> 00:02:35,920
were when you actually move into them

74
00:02:33,840 --> 00:02:38,159
and that does not allow you to move

75
00:02:35,919 --> 00:02:40,559
through an intermediate voxel to get to

76
00:02:38,159 --> 00:02:42,959
a closer voxel end so that doesn't come

77
00:02:40,560 --> 00:02:44,640
up very often except in the case of

78
00:02:42,959 --> 00:02:46,640
moving around corners so in order to get

79
00:02:44,639 --> 00:02:48,878
it nice and slippery so that you get a

80
00:02:46,639 --> 00:02:51,679
lot of nice slide in there

81
00:02:48,878 --> 00:02:54,239
this is kind of the uh baby oil edition

82
00:02:51,680 --> 00:02:56,879
of handmade hero uh you know it's kind

83
00:02:54,239 --> 00:02:59,680
of like a jean-claude van damme sort of

84
00:02:56,878 --> 00:03:01,199
greasing up for a 1980s action movie

85
00:02:59,680 --> 00:03:04,080
sort of a thing we're going for here

86
00:03:01,199 --> 00:03:05,359
where he will just slide right around

87
00:03:04,080 --> 00:03:07,120
the corners

88
00:03:05,360 --> 00:03:09,120
that is

89
00:03:07,120 --> 00:03:12,239
that requires us to do

90
00:03:09,120 --> 00:03:15,200
a more comprehensive voxel search now i

91
00:03:12,239 --> 00:03:17,439
already wrote it if i remember correctly

92
00:03:15,199 --> 00:03:21,280
so really what we're talking about today

93
00:03:17,439 --> 00:03:23,598
is debugging and i guess finishing at

94
00:03:21,280 --> 00:03:26,560
any part of the implementation

95
00:03:23,598 --> 00:03:29,199
that we hadn't already uh

96
00:03:26,560 --> 00:03:30,878
that we hadn't already implemented right

97
00:03:29,199 --> 00:03:34,479
and so i

98
00:03:30,878 --> 00:03:36,479
again don't really remember exactly

99
00:03:34,479 --> 00:03:39,199
what we had left to do but hopefully

100
00:03:36,479 --> 00:03:41,840
it's pretty obvious uh when we go

101
00:03:39,199 --> 00:03:43,439
through it uh you can kind of see here

102
00:03:41,840 --> 00:03:44,840
the way that we set up the code just

103
00:03:43,439 --> 00:03:48,878
looking at it really

104
00:03:44,840 --> 00:03:50,959
quickly uh you can kind of get a very

105
00:03:48,878 --> 00:03:52,959
very very broad

106
00:03:50,959 --> 00:03:55,438
uh idea about what's supposed to go on

107
00:03:52,959 --> 00:03:56,319
here you can see that we make a voxel

108
00:03:55,438 --> 00:03:59,359
grid

109
00:03:56,318 --> 00:04:01,438
right and the voxel grid is based on if

110
00:03:59,360 --> 00:04:04,239
you if you look here you can see

111
00:04:01,438 --> 00:04:06,318
uh we take the two places that we're

112
00:04:04,239 --> 00:04:07,280
trying to go so we're

113
00:04:06,318 --> 00:04:09,518
you know

114
00:04:07,280 --> 00:04:12,479
we have a location that the entity

115
00:04:09,519 --> 00:04:15,360
starts at and we have a location that is

116
00:04:12,479 --> 00:04:17,199
where the entity would end up if we did

117
00:04:15,360 --> 00:04:19,040
not apply collision detection right

118
00:04:17,199 --> 00:04:20,799
because we know those things trivially

119
00:04:19,040 --> 00:04:22,720
if we just turn off the collision vector

120
00:04:20,798 --> 00:04:24,719
then we know that you know we start out

121
00:04:22,720 --> 00:04:26,880
at wherever we were on the last frame we

122
00:04:24,720 --> 00:04:28,880
have a particular desired motion

123
00:04:26,879 --> 00:04:30,959
direction we have an amount of time and

124
00:04:28,879 --> 00:04:34,719
we have a velocity so it's trivial for

125
00:04:30,959 --> 00:04:36,079
us to figure out where we would end up

126
00:04:34,720 --> 00:04:37,759
so that basically gives us a line

127
00:04:36,079 --> 00:04:40,800
segment right

128
00:04:37,759 --> 00:04:42,400
so we know that line segment

129
00:04:40,800 --> 00:04:45,040
effectively gives us

130
00:04:42,399 --> 00:04:46,638
you know an approximate bounds on where

131
00:04:45,040 --> 00:04:48,639
we should be looking we don't have to

132
00:04:46,639 --> 00:04:50,720
look at the entire world to find out

133
00:04:48,639 --> 00:04:53,280
what the best place to put this entity

134
00:04:50,720 --> 00:04:55,840
is during collision section we know that

135
00:04:53,279 --> 00:04:58,000
we're going somewhere around that line

136
00:04:55,839 --> 00:04:58,799
segment you know we're there's not going

137
00:04:58,000 --> 00:05:00,399
to be

138
00:04:58,800 --> 00:05:02,800
any time where we want to pick something

139
00:05:00,399 --> 00:05:05,839
too far away from that line segment so

140
00:05:02,800 --> 00:05:09,280
if we merely turn that line segment into

141
00:05:05,839 --> 00:05:11,679
a voxel region a localized small voxel

142
00:05:09,279 --> 00:05:14,879
region that contains the line segment

143
00:05:11,680 --> 00:05:19,120
then that will allow us to proceed with

144
00:05:14,879 --> 00:05:21,519
the algorithm uh the algorithmic search

145
00:05:19,120 --> 00:05:23,360
so that's exactly what we do we create a

146
00:05:21,519 --> 00:05:25,680
maximum voxel dim which basically says

147
00:05:23,360 --> 00:05:27,680
okay if you were moving at a very high

148
00:05:25,680 --> 00:05:29,280
speed we're going to basically clamp

149
00:05:27,680 --> 00:05:32,800
your velocity like we're never going to

150
00:05:29,279 --> 00:05:35,038
let you move so fast that you you huge

151
00:05:32,800 --> 00:05:37,600
swaths of the voxel and that is really

152
00:05:35,038 --> 00:05:38,478
there just to ensure um sane behavior of

153
00:05:37,600 --> 00:05:41,360
the game

154
00:05:38,478 --> 00:05:44,000
we don't know for sure that the game

155
00:05:41,360 --> 00:05:45,680
play code will be non-buggy or even that

156
00:05:44,000 --> 00:05:47,600
we want to spend time making the

157
00:05:45,680 --> 00:05:49,199
gameplay code non-buggy and you remember

158
00:05:47,600 --> 00:05:50,160
me talking about this i talked about

159
00:05:49,199 --> 00:05:52,079
this

160
00:05:50,160 --> 00:05:53,600
specifically when talking about getting

161
00:05:52,079 --> 00:05:54,800
stuck in things

162
00:05:53,600 --> 00:05:56,720
one of the things that i said very

163
00:05:54,800 --> 00:05:59,600
specifically is we don't want to require

164
00:05:56,720 --> 00:06:02,400
that you never embed uh in inside

165
00:05:59,600 --> 00:06:04,400
objects like have two objects intersect

166
00:06:02,399 --> 00:06:06,159
because even though we could require

167
00:06:04,399 --> 00:06:08,000
that the collision detector never

168
00:06:06,160 --> 00:06:10,240
produced that invalid condition and we

169
00:06:08,000 --> 00:06:12,959
could do that code in fact we kind of

170
00:06:10,240 --> 00:06:12,960
did that code

171
00:06:13,038 --> 00:06:17,038
that is insufficient because the

172
00:06:14,478 --> 00:06:19,038
gameplay code you know might teleport

173
00:06:17,038 --> 00:06:21,199
somebody or do something like that and

174
00:06:19,038 --> 00:06:23,439
we don't want that code to have to be

175
00:06:21,199 --> 00:06:26,080
bug free because gameplay code tends to

176
00:06:23,439 --> 00:06:28,160
be sloppy it tends to be imaginative it

177
00:06:26,079 --> 00:06:30,879
doesn't you don't really want your

178
00:06:28,160 --> 00:06:33,759
gameplay code or in the case of where

179
00:06:30,879 --> 00:06:35,600
you know in a proper game the

180
00:06:33,759 --> 00:06:37,360
uh would be programmed by somebody else

181
00:06:35,600 --> 00:06:39,199
right like i'd be doing this collision

182
00:06:37,360 --> 00:06:41,280
detector but john blow would be doing

183
00:06:39,199 --> 00:06:42,319
the gameplay code right

184
00:06:41,279 --> 00:06:45,119
and

185
00:06:42,319 --> 00:06:48,560
you don't want to have to tell john

186
00:06:45,120 --> 00:06:50,160
to restrict all of the things he does to

187
00:06:48,560 --> 00:06:52,319
oh you want to implement this gameplay

188
00:06:50,160 --> 00:06:54,000
feature well slow down you've got to

189
00:06:52,319 --> 00:06:55,598
know all this numerical analysis

190
00:06:54,000 --> 00:06:57,120
relevant to the collision detector that

191
00:06:55,598 --> 00:06:59,360
i now have to explain to you and you

192
00:06:57,120 --> 00:07:01,519
have to get right every time or you will

193
00:06:59,360 --> 00:07:03,520
break the game right

194
00:07:01,519 --> 00:07:06,000
that is a horrible idea for game

195
00:07:03,519 --> 00:07:07,439
development right first of all if you

196
00:07:06,000 --> 00:07:09,519
don't have a programmer like john who's

197
00:07:07,439 --> 00:07:11,279
an expert at actual regular programming

198
00:07:09,519 --> 00:07:12,959
as well that's they're gonna have no

199
00:07:11,279 --> 00:07:15,198
idea what you're talking about so that's

200
00:07:12,959 --> 00:07:16,959
a problem but b even if you do happen to

201
00:07:15,199 --> 00:07:19,280
have someone like john who could do the

202
00:07:16,959 --> 00:07:21,519
numerical analysis stuff it's wasting

203
00:07:19,279 --> 00:07:24,079
all their time so rather than trying out

204
00:07:21,519 --> 00:07:25,279
imaginative features and progressing

205
00:07:24,079 --> 00:07:26,800
forward at the game design at the

206
00:07:25,279 --> 00:07:29,198
maximum speed that they can which is

207
00:07:26,800 --> 00:07:31,199
what you need for them to uh can you

208
00:07:29,199 --> 00:07:33,038
know maintain their creative momentum

209
00:07:31,199 --> 00:07:35,520
right you've basically just thrown a

210
00:07:33,038 --> 00:07:37,439
huge spanner wrench into the works by

211
00:07:35,519 --> 00:07:38,959
making every last little thing they do

212
00:07:37,439 --> 00:07:40,719
they have to think about whether or not

213
00:07:38,959 --> 00:07:42,799
this can be made numerically robust and

214
00:07:40,720 --> 00:07:44,639
blah blah right

215
00:07:42,800 --> 00:07:45,759
so the same thing is true of movement

216
00:07:44,639 --> 00:07:47,598
speed

217
00:07:45,759 --> 00:07:49,598
we don't want this thing to ever have to

218
00:07:47,598 --> 00:07:51,038
consider massive swaths of the of the

219
00:07:49,598 --> 00:07:53,038
area because it might be too uh

220
00:07:51,038 --> 00:07:54,399
computationally expensive or whatever

221
00:07:53,038 --> 00:07:55,759
but we also don't want gameplay

222
00:07:54,399 --> 00:07:57,359
designers to have to think about if they

223
00:07:55,759 --> 00:07:59,439
accidentally wrote equations that make

224
00:07:57,360 --> 00:08:01,598
things move way too quickly because

225
00:07:59,439 --> 00:08:03,839
really it's free for us to just clamp

226
00:08:01,598 --> 00:08:05,759
those maximum movement speeds before we

227
00:08:03,839 --> 00:08:07,038
do anything inside this routine and then

228
00:08:05,759 --> 00:08:08,720
it doesn't matter if they accidentally

229
00:08:07,038 --> 00:08:10,959
do that right things will just move a

230
00:08:08,720 --> 00:08:12,720
little slower if they do that then what

231
00:08:10,959 --> 00:08:14,000
they would have done otherwise and it

232
00:08:12,720 --> 00:08:15,759
was probably a bug that they did that

233
00:08:14,000 --> 00:08:17,279
anyway you don't want things like flying

234
00:08:15,759 --> 00:08:18,240
around the screen the player wouldn't

235
00:08:17,279 --> 00:08:19,839
even be able to see them so if they

236
00:08:18,240 --> 00:08:21,439
wanted to do that they probably

237
00:08:19,839 --> 00:08:23,119
should have written a teleport so most

238
00:08:21,439 --> 00:08:24,800
of the time if that happens it's a bug

239
00:08:23,120 --> 00:08:26,000
in their computation like they were

240
00:08:24,800 --> 00:08:26,960
trying to compute what the resulting

241
00:08:26,000 --> 00:08:28,800
speed of something would be and they

242
00:08:26,959 --> 00:08:30,719
totally screwed up and they just

243
00:08:28,800 --> 00:08:33,759
produced a really arbitrary like high

244
00:08:30,720 --> 00:08:35,918
number in this one case

245
00:08:33,759 --> 00:08:37,679
we want that to be okay we want to just

246
00:08:35,918 --> 00:08:40,879
solve that for them so that you know

247
00:08:37,679 --> 00:08:42,319
they they can just ignore it so that's

248
00:08:40,879 --> 00:08:43,679
part of what's going on here right we're

249
00:08:42,320 --> 00:08:46,240
trying to we're trying to smooth that

250
00:08:43,679 --> 00:08:49,838
out make sure all that uh is just easy

251
00:08:46,240 --> 00:08:51,759
for the gameplay the designer to just

252
00:08:49,839 --> 00:08:54,240
throw whatever they want in here and it

253
00:08:51,759 --> 00:08:57,439
won't explode uh that's part of our job

254
00:08:54,240 --> 00:08:57,440
when we write a collision detector

255
00:09:03,519 --> 00:09:05,440
okay

256
00:09:04,320 --> 00:09:07,680
so now

257
00:09:05,440 --> 00:09:09,519
if we go through here

258
00:09:07,679 --> 00:09:12,000
you can see the operation of it we build

259
00:09:09,519 --> 00:09:14,639
a voxel that's the size that we expect

260
00:09:12,000 --> 00:09:16,958
uh to want to search we clamp the size

261
00:09:14,639 --> 00:09:18,799
of that voxel to a maximum

262
00:09:16,958 --> 00:09:20,879
i don't know what that maximum is we set

263
00:09:18,799 --> 00:09:22,958
it presumably somewhere voxel stack dim

264
00:09:20,879 --> 00:09:25,919
is is i would assume set somewhere yeah

265
00:09:22,958 --> 00:09:28,479
so it's set to 16. so there's a 16 by 16

266
00:09:25,919 --> 00:09:30,399
by 16 maximum voxel size which is quite

267
00:09:28,480 --> 00:09:32,000
large uh and we just aren't going to

268
00:09:30,399 --> 00:09:33,839
allow because remember the game targets

269
00:09:32,000 --> 00:09:36,399
like at least 30 frames a second but

270
00:09:33,839 --> 00:09:37,839
usually 60 frames a second so in 60

271
00:09:36,399 --> 00:09:39,519
frames a second the amount that any

272
00:09:37,839 --> 00:09:42,160
entity should reasonably move is going

273
00:09:39,519 --> 00:09:43,759
to be small because you know if it was

274
00:09:42,159 --> 00:09:44,719
you know any larger you you wouldn't be

275
00:09:43,759 --> 00:09:46,319
able to see it

276
00:09:44,720 --> 00:09:47,360
move

277
00:09:46,320 --> 00:09:50,800
boop

278
00:09:47,360 --> 00:09:53,839
um so the max voxel dim is limited to a

279
00:09:50,799 --> 00:09:55,599
16 by 16 by 16 uh and we just clamp it

280
00:09:53,839 --> 00:09:58,399
right

281
00:09:55,600 --> 00:10:00,399
so we just say look uh after we

282
00:09:58,399 --> 00:10:02,399
uh produce this we've got a voxel size

283
00:10:00,399 --> 00:10:05,200
we make a grid that's going to hold

284
00:10:02,399 --> 00:10:07,120
information about this voxel uh we do

285
00:10:05,200 --> 00:10:10,000
some diagramming stuff this guy's

286
00:10:07,120 --> 00:10:11,440
this gets uh eliminated uh in release

287
00:10:10,000 --> 00:10:12,559
builds so that doesn't really affect the

288
00:10:11,440 --> 00:10:13,760
algorithm it's just for us to be able to

289
00:10:12,559 --> 00:10:15,679
see it

290
00:10:13,759 --> 00:10:19,200
uh we go through and we say all right

291
00:10:15,679 --> 00:10:21,759
we're gonna start in whichever voxel the

292
00:10:19,200 --> 00:10:23,278
uh entity was in when it first went

293
00:10:21,759 --> 00:10:25,519
there

294
00:10:23,278 --> 00:10:27,759
and we're gonna push that onto our voxel

295
00:10:25,519 --> 00:10:29,120
stack as a starting cell

296
00:10:27,759 --> 00:10:30,799
and then we're gonna do is we're just

297
00:10:29,120 --> 00:10:33,200
gonna loop you know we're just gonna

298
00:10:30,799 --> 00:10:35,278
keep looping and using this little voxel

299
00:10:33,200 --> 00:10:37,040
stack now why is there a stack all of a

300
00:10:35,278 --> 00:10:39,320
sudden because before there wasn't well

301
00:10:37,039 --> 00:10:41,759
the stack is really the thing that

302
00:10:39,320 --> 00:10:44,320
differentiates these two

303
00:10:41,759 --> 00:10:46,799
parts of what we're doing

304
00:10:44,320 --> 00:10:49,200
the voxel stack

305
00:10:46,799 --> 00:10:52,078
is there to tell us

306
00:10:49,200 --> 00:10:54,879
that we have or haven't

307
00:10:52,078 --> 00:10:56,879
looked at a particular series of cells

308
00:10:54,879 --> 00:11:00,399
it's like a flood fill algorithm we know

309
00:10:56,879 --> 00:11:03,919
we start in a particular voxel cell we

310
00:11:00,399 --> 00:11:07,200
know that we can move to any neighboring

311
00:11:03,919 --> 00:11:09,838
voxel cell if there was no collision in

312
00:11:07,200 --> 00:11:13,120
between them right so in other words if

313
00:11:09,839 --> 00:11:16,160
if the corners of the voxel were

314
00:11:13,120 --> 00:11:18,959
uh were not in colliding

315
00:11:16,159 --> 00:11:21,120
if any corner really was non-colliding

316
00:11:18,958 --> 00:11:24,319
that two cells share

317
00:11:21,120 --> 00:11:27,440
we can go through them right

318
00:11:24,320 --> 00:11:29,920
so what we do is we just

319
00:11:27,440 --> 00:11:31,519
start with the cell we see which cells

320
00:11:29,919 --> 00:11:32,639
could we move to we push them on the

321
00:11:31,519 --> 00:11:35,200
stack

322
00:11:32,639 --> 00:11:37,439
before we were just taking whichever one

323
00:11:35,200 --> 00:11:39,519
was closest to where we were going and

324
00:11:37,440 --> 00:11:41,600
that just wasn't enough of a search

325
00:11:39,519 --> 00:11:44,240
because that's basically like an a-star

326
00:11:41,600 --> 00:11:46,480
search without the backtracking right in

327
00:11:44,240 --> 00:11:49,120
a-star search is you always try the

328
00:11:46,480 --> 00:11:51,039
closest the we always try the grid

329
00:11:49,120 --> 00:11:52,720
movement that would get you closer to

330
00:11:51,039 --> 00:11:55,199
where you were going first

331
00:11:52,720 --> 00:11:57,759
and then when if that doesn't pan out

332
00:11:55,200 --> 00:12:00,480
you backtrack and try

333
00:11:57,759 --> 00:12:02,319
the next closest right so an astar

334
00:12:00,480 --> 00:12:03,600
search is basically just

335
00:12:02,320 --> 00:12:05,920
i'm sorry to throw these terms out there

336
00:12:03,600 --> 00:12:07,839
i know we haven't covered a star search

337
00:12:05,919 --> 00:12:09,679
in handmade hero but it's a very simple

338
00:12:07,839 --> 00:12:12,800
algorithm

339
00:12:09,679 --> 00:12:14,799
basically there's you know uh

340
00:12:12,799 --> 00:12:16,559
they're sort of the old school

341
00:12:14,799 --> 00:12:18,639
full grid search which basically

342
00:12:16,559 --> 00:12:21,599
requires visiting every node

343
00:12:18,639 --> 00:12:22,639
uh in a graph to produce the

344
00:12:21,600 --> 00:12:24,879
path

345
00:12:22,639 --> 00:12:27,039
between two things and then a star is

346
00:12:24,879 --> 00:12:27,429
just that exact same algorithm

347
00:12:27,039 --> 00:12:29,199
um

348
00:12:27,429 --> 00:12:31,759
[Music]

349
00:12:29,200 --> 00:12:34,240
uh what's the

350
00:12:31,759 --> 00:12:36,480
well you can tell i'm getting old

351
00:12:34,240 --> 00:12:36,480
uh

352
00:12:36,879 --> 00:12:41,519
that's really sad it's sad getting old

353
00:12:38,559 --> 00:12:42,638
your memory just goes um so the the grid

354
00:12:41,519 --> 00:12:44,480
algorithm

355
00:12:42,639 --> 00:12:47,278
it's named after the person who's a

356
00:12:44,480 --> 00:12:49,360
famous uh computer science person

357
00:12:47,278 --> 00:12:53,759
and like their name just like poofed out

358
00:12:49,360 --> 00:12:54,720
of my head right it's just like

359
00:12:53,759 --> 00:12:56,639
uh

360
00:12:54,720 --> 00:12:59,600
but the shortest path

361
00:12:56,639 --> 00:13:00,879
for a series of you know in a graph

362
00:12:59,600 --> 00:13:02,959
there's an algorithm for the shortest

363
00:13:00,879 --> 00:13:04,958
path and you basically visit all of the

364
00:13:02,958 --> 00:13:07,679
nodes in that graph

365
00:13:04,958 --> 00:13:10,799
and uh you

366
00:13:07,679 --> 00:13:12,319
produce the shortest path from the node

367
00:13:10,799 --> 00:13:13,519
a particular node that's the node you're

368
00:13:12,320 --> 00:13:14,959
starting at

369
00:13:13,519 --> 00:13:17,679
and it actually produces the shortest

370
00:13:14,958 --> 00:13:19,119
path to all nodes at the same time

371
00:13:17,679 --> 00:13:20,879
right so it's basically just like if you

372
00:13:19,120 --> 00:13:22,480
started from here here's the shortest

373
00:13:20,879 --> 00:13:24,078
path to all

374
00:13:22,480 --> 00:13:27,278
possible

375
00:13:24,078 --> 00:13:27,278
places right

376
00:13:27,440 --> 00:13:31,040
um

377
00:13:28,720 --> 00:13:31,040
and

378
00:13:31,360 --> 00:13:34,879
a star is literally just the same

379
00:13:33,120 --> 00:13:36,159
algorithm but instead of having to visit

380
00:13:34,879 --> 00:13:39,039
all the nodes

381
00:13:36,159 --> 00:13:40,078
uh you sort the order in which you check

382
00:13:39,039 --> 00:13:42,719
the nodes

383
00:13:40,078 --> 00:13:45,359
so that you always produce the shortest

384
00:13:42,720 --> 00:13:49,040
path as soon as you could

385
00:13:45,360 --> 00:13:51,199
if it was on a like if if you have an

386
00:13:49,039 --> 00:13:53,919
any accurate estimate

387
00:13:51,198 --> 00:13:56,000
of the distance between

388
00:13:53,919 --> 00:13:58,240
two nodes and you know two nodes in the

389
00:13:56,000 --> 00:14:00,879
graph that aren't directly connected so

390
00:13:58,240 --> 00:14:02,720
it's just a way of employing a metric to

391
00:14:00,879 --> 00:14:04,639
increase the chance that you find the

392
00:14:02,720 --> 00:14:06,560
path early now you can never find the

393
00:14:04,639 --> 00:14:08,799
path earlier in the worst case because

394
00:14:06,559 --> 00:14:11,278
the worst case is you just even for a

395
00:14:08,799 --> 00:14:14,078
star right you just create a grid

396
00:14:11,278 --> 00:14:17,679
uh or you create a graph in which

397
00:14:14,078 --> 00:14:20,319
there's no shorter path other than the

398
00:14:17,679 --> 00:14:22,879
one that you would try last because it

399
00:14:20,320 --> 00:14:24,879
actually is always the furthest away

400
00:14:22,879 --> 00:14:26,639
node that ends up getting to the place

401
00:14:24,879 --> 00:14:29,198
you're going right it's like a it's like

402
00:14:26,639 --> 00:14:30,799
a real like sort of

403
00:14:29,198 --> 00:14:33,599
um

404
00:14:30,799 --> 00:14:35,120
a real thwarting kind of thing and in

405
00:14:33,600 --> 00:14:36,959
that kind of a graph just to give you

406
00:14:35,120 --> 00:14:40,399
some examples what that kind of graph

407
00:14:36,958 --> 00:14:42,958
looks like is if you imagined um you

408
00:14:40,399 --> 00:14:45,278
know like a a

409
00:14:42,958 --> 00:14:48,559
a real path like in the real world

410
00:14:45,278 --> 00:14:51,360
where there was one really circuitous

411
00:14:48,559 --> 00:14:53,278
path like in a garden all the way around

412
00:14:51,360 --> 00:14:55,199
that kind of came in the back of the

413
00:14:53,278 --> 00:14:55,919
place that you were trying to get to

414
00:14:55,198 --> 00:14:57,679
and

415
00:14:55,919 --> 00:14:59,519
the rest of it was just a wide open

416
00:14:57,679 --> 00:15:01,599
field you could walk all the way through

417
00:14:59,519 --> 00:15:03,039
in any direction you wanted to

418
00:15:01,600 --> 00:15:04,959
up till the place you were actually

419
00:15:03,039 --> 00:15:06,559
trying to get and that was completely

420
00:15:04,958 --> 00:15:08,319
walled off except for that really long

421
00:15:06,559 --> 00:15:10,078
path around right

422
00:15:08,320 --> 00:15:11,680
and so you know the shortest path

423
00:15:10,078 --> 00:15:13,919
algorithms that use heuristics they all

424
00:15:11,679 --> 00:15:14,879
try like all the open field paths first

425
00:15:13,919 --> 00:15:16,719
because they're like well that goes

426
00:15:14,879 --> 00:15:18,720
directly there doesn't it and it never

427
00:15:16,720 --> 00:15:20,560
quite does and then it's like oh that

428
00:15:18,720 --> 00:15:22,079
one that makes you walk all the way

429
00:15:20,559 --> 00:15:23,838
outside the garden and all the way

430
00:15:22,078 --> 00:15:25,759
around and back in the other entrance it

431
00:15:23,839 --> 00:15:27,519
turns out that's the shortest path

432
00:15:25,759 --> 00:15:29,439
you try that one last and you're back to

433
00:15:27,519 --> 00:15:30,639
the worst case of visiting basically

434
00:15:29,440 --> 00:15:33,360
every node

435
00:15:30,639 --> 00:15:35,120
in the graph so you know there's no free

436
00:15:33,360 --> 00:15:37,839
lunch in those kind of graph uh

437
00:15:35,120 --> 00:15:40,078
traversal algorithms but

438
00:15:37,839 --> 00:15:42,720
something like a star finds the solution

439
00:15:40,078 --> 00:15:45,198
faster so before what we were doing is

440
00:15:42,720 --> 00:15:47,040
basically an a-star search without

441
00:15:45,198 --> 00:15:49,120
actually um

442
00:15:47,039 --> 00:15:50,719
having the back tracking so we were

443
00:15:49,120 --> 00:15:52,320
doing the thing where we would just walk

444
00:15:50,720 --> 00:15:53,440
straight across the field and try to get

445
00:15:52,320 --> 00:15:55,278
into the place we're trying to get to

446
00:15:53,440 --> 00:15:57,839
when we couldn't get in we wouldn't try

447
00:15:55,278 --> 00:15:59,759
any other paths right so we'd never find

448
00:15:57,839 --> 00:16:01,440
that path where you had to go a little

449
00:15:59,759 --> 00:16:05,278
further away first

450
00:16:01,440 --> 00:16:07,920
and then get uh go around

451
00:16:05,278 --> 00:16:10,159
a proper a-star search does that and

452
00:16:07,919 --> 00:16:12,639
that's sort of what we're adding here

453
00:16:10,159 --> 00:16:15,360
now we probably won't bother doing the

454
00:16:12,639 --> 00:16:17,519
a-star part of it the a-star part of it

455
00:16:15,360 --> 00:16:19,278
uh is

456
00:16:17,519 --> 00:16:21,519
well maybe we will i don't know

457
00:16:19,278 --> 00:16:23,198
um

458
00:16:21,519 --> 00:16:24,639
at the moment we're not sorting the

459
00:16:23,198 --> 00:16:26,159
order in which we insert these things

460
00:16:24,639 --> 00:16:28,639
into the graph

461
00:16:26,159 --> 00:16:30,078
uh we may find that it doesn't matter

462
00:16:28,639 --> 00:16:32,560
because we're remember considering a

463
00:16:30,078 --> 00:16:34,239
very small number of voxels so i don't

464
00:16:32,559 --> 00:16:36,159
know whether we'll actually want to

465
00:16:34,240 --> 00:16:38,000
bother doing that or not but we might

466
00:16:36,159 --> 00:16:39,838
because if you think about it a lot of

467
00:16:38,000 --> 00:16:41,278
the movements are straightforward

468
00:16:39,839 --> 00:16:42,639
movements a lot of the time the

469
00:16:41,278 --> 00:16:44,320
collision detector

470
00:16:42,639 --> 00:16:47,278
doesn't have to do anything at all

471
00:16:44,320 --> 00:16:50,399
there's nothing in the way of the thing

472
00:16:47,278 --> 00:16:54,320
being moved right um oh i just glanced

473
00:16:50,399 --> 00:16:56,320
the chat dijkstra thank you god

474
00:16:54,320 --> 00:17:00,240
it it's really sucks

475
00:16:56,320 --> 00:17:00,240
that i can't remember names anymore

476
00:17:02,078 --> 00:17:07,759
and yes uh zero i agree that dykstra's

477
00:17:05,038 --> 00:17:09,038
algorithm was a very bad name

478
00:17:07,759 --> 00:17:10,078
because

479
00:17:09,038 --> 00:17:11,359
he's

480
00:17:10,078 --> 00:17:13,678
a famous

481
00:17:11,359 --> 00:17:16,558
cs uh

482
00:17:13,679 --> 00:17:17,519
researcher who developed many algorithms

483
00:17:16,558 --> 00:17:20,399
so

484
00:17:17,519 --> 00:17:21,679
saying dijkstra's algorithm

485
00:17:20,400 --> 00:17:24,319
you're really not saying anything you

486
00:17:21,679 --> 00:17:25,839
have to say dijkstra's algorithm for

487
00:17:24,318 --> 00:17:28,240
shortest paths or something like you

488
00:17:25,838 --> 00:17:29,599
have to basically qualify it

489
00:17:28,240 --> 00:17:32,720
because

490
00:17:29,599 --> 00:17:34,399
if you didn't it'd be like which one of

491
00:17:32,720 --> 00:17:35,919
dijkstra's algorithms right so you kind

492
00:17:34,400 --> 00:17:37,519
of have to know the context when you say

493
00:17:35,919 --> 00:17:41,120
dyches diagram but thank you for that

494
00:17:37,519 --> 00:17:42,639
it's it's really frustrating um

495
00:17:41,119 --> 00:17:44,879
what they say about memory going when

496
00:17:42,640 --> 00:17:46,240
you get older is absolutely true

497
00:17:44,880 --> 00:17:48,480
i would never forget something like

498
00:17:46,240 --> 00:17:50,319
dijkstra's algorithm when i was 20.

499
00:17:48,480 --> 00:17:52,720
uh and i forget things like that all the

500
00:17:50,319 --> 00:17:54,079
time now so it's just like

501
00:17:52,720 --> 00:17:56,240
brain

502
00:17:54,079 --> 00:17:58,000
brain decay it's real

503
00:17:56,240 --> 00:17:59,440
um

504
00:17:58,000 --> 00:18:01,919
and i've heard john blows exactly the

505
00:17:59,440 --> 00:18:03,440
same thing uh

506
00:18:01,919 --> 00:18:04,640
maybe your memory doesn't go that bad if

507
00:18:03,440 --> 00:18:05,840
you didn't have a good memory to begin

508
00:18:04,640 --> 00:18:07,919
with i don't know

509
00:18:05,839 --> 00:18:09,678
um but i think people like myself and

510
00:18:07,919 --> 00:18:10,960
john have had pretty good memories when

511
00:18:09,679 --> 00:18:12,320
we were younger we remember lots of

512
00:18:10,960 --> 00:18:13,919
stuff and lots of papers and lots of

513
00:18:12,319 --> 00:18:16,240
things like that and you could really

514
00:18:13,919 --> 00:18:17,919
see when you go uh when you had a really

515
00:18:16,240 --> 00:18:19,359
good memory and you never forgot stuff

516
00:18:17,919 --> 00:18:21,120
like that where you could say like oh

517
00:18:19,359 --> 00:18:22,399
this was a cs paper it was by these

518
00:18:21,119 --> 00:18:24,079
people they're from this university

519
00:18:22,400 --> 00:18:25,919
right like a bunch of facts they were

520
00:18:24,079 --> 00:18:27,439
kind of all in there and then nowadays

521
00:18:25,919 --> 00:18:29,038
they're just like

522
00:18:27,440 --> 00:18:30,960
i'll read a paper and i'll forget even

523
00:18:29,038 --> 00:18:34,160
what the paper was even about

524
00:18:30,960 --> 00:18:35,840
uh you know um never mind like who wrote

525
00:18:34,160 --> 00:18:37,279
it and where they were from

526
00:18:35,839 --> 00:18:38,720
uh so it's just like you can tell your

527
00:18:37,279 --> 00:18:41,678
brain is just you know your brain is

528
00:18:38,720 --> 00:18:45,839
full as you get older the neurons

529
00:18:41,679 --> 00:18:46,960
uh they're they're like old and crusty

530
00:18:45,839 --> 00:18:48,159
and they don't want to move around

531
00:18:46,960 --> 00:18:50,079
anymore

532
00:18:48,160 --> 00:18:52,480
all right so uh

533
00:18:50,079 --> 00:18:54,720
let's go ahead and and take a look at

534
00:18:52,480 --> 00:18:57,200
what we actually wrote in here because

535
00:18:54,720 --> 00:18:59,839
this all seems fine like that seems like

536
00:18:57,200 --> 00:19:02,000
a reasonable set of things

537
00:18:59,839 --> 00:19:04,558
uh for this system to be doing

538
00:19:02,000 --> 00:19:05,919
so i don't think we need to really look

539
00:19:04,558 --> 00:19:07,599
at that code yet i mean we're probably

540
00:19:05,919 --> 00:19:08,720
gonna want to debug it and stuff but you

541
00:19:07,599 --> 00:19:11,038
know that looks like it's doing the

542
00:19:08,720 --> 00:19:12,480
right thing we push the initial cell

543
00:19:11,038 --> 00:19:13,759
onto the voxel stack and you can see

544
00:19:12,480 --> 00:19:15,200
then we're just going to loop until we

545
00:19:13,759 --> 00:19:16,319
run out of things to look at so we're

546
00:19:15,200 --> 00:19:18,160
basically just going to like search

547
00:19:16,319 --> 00:19:20,000
through this voxel

548
00:19:18,160 --> 00:19:21,519
uh and we're going to you know we're not

549
00:19:20,000 --> 00:19:23,038
going to stop until we don't have

550
00:19:21,519 --> 00:19:25,359
anything left to try

551
00:19:23,038 --> 00:19:27,359
uh and we may need to so if you look at

552
00:19:25,359 --> 00:19:29,599
the way this is written currently uh we

553
00:19:27,359 --> 00:19:32,558
definitely would want to fix uh sort of

554
00:19:29,599 --> 00:19:33,918
or add optimizations to it because this

555
00:19:32,558 --> 00:19:36,798
will uh

556
00:19:33,919 --> 00:19:38,480
visit all the voxels in the entire grid

557
00:19:36,798 --> 00:19:40,798
in the case of no collision which we

558
00:19:38,480 --> 00:19:42,880
probably don't want to do so at the very

559
00:19:40,798 --> 00:19:45,359
least we would want to early out when we

560
00:19:42,880 --> 00:19:47,360
find a voxel that contains like the

561
00:19:45,359 --> 00:19:48,319
point we're moving to

562
00:19:47,359 --> 00:19:49,519
because you know you can't get any

563
00:19:48,319 --> 00:19:51,519
closer than that

564
00:19:49,519 --> 00:19:52,879
um but we probably do also want to

565
00:19:51,519 --> 00:19:54,240
eventually put a sort in here to

566
00:19:52,880 --> 00:19:55,360
basically make this a proper a-star

567
00:19:54,240 --> 00:19:56,720
because there's not a lot of reason not

568
00:19:55,359 --> 00:19:57,678
to so we'll take a look at that a little

569
00:19:56,720 --> 00:19:59,120
bit later

570
00:19:57,679 --> 00:20:00,720
uh anyway we come in here and we say

571
00:19:59,119 --> 00:20:02,719
let's get the current cell out so what

572
00:20:00,720 --> 00:20:04,319
that does it says like whatever

573
00:20:02,720 --> 00:20:07,200
is on the top of the stack that's where

574
00:20:04,319 --> 00:20:09,439
we're searching from right now um and

575
00:20:07,200 --> 00:20:11,840
then we go ahead and say all right what

576
00:20:09,440 --> 00:20:15,038
is the actual extent of that cell so

577
00:20:11,839 --> 00:20:17,839
that produces for us a little box right

578
00:20:15,038 --> 00:20:19,839
that we're going to test we iterate over

579
00:20:17,839 --> 00:20:23,519
the corners and you can see you know i

580
00:20:19,839 --> 00:20:23,519
probably put a little to do in here

581
00:20:32,640 --> 00:20:37,840
we probably want to just store um a bit

582
00:20:36,000 --> 00:20:40,880
array that says which corners we've

583
00:20:37,839 --> 00:20:43,199
tested uh because if you think about it

584
00:20:40,880 --> 00:20:47,200
a lot of times any you know

585
00:20:43,200 --> 00:20:49,600
every cell in the voxel array uh shares

586
00:20:47,200 --> 00:20:52,319
corners with other cells in the vaxels

587
00:20:49,599 --> 00:20:54,399
array so when we iterate over those

588
00:20:52,319 --> 00:20:56,158
cells and test them we are really going

589
00:20:54,400 --> 00:20:59,600
to be retesting

590
00:20:56,159 --> 00:21:02,720
uh every cell will probably get tested

591
00:20:59,599 --> 00:21:07,759
in a complete voxel visit uh all of the

592
00:21:02,720 --> 00:21:09,120
exterior cells will be tested uh

593
00:21:07,759 --> 00:21:11,679
i guess it depends which exterior you're

594
00:21:09,119 --> 00:21:13,439
on so face exterior cells uh will be

595
00:21:11,679 --> 00:21:14,240
tested four times

596
00:21:13,440 --> 00:21:16,880
uh

597
00:21:14,240 --> 00:21:19,599
the corner cells when we tested once

598
00:21:16,880 --> 00:21:20,640
perimeter edge cells uh will be tested

599
00:21:19,599 --> 00:21:22,639
twice

600
00:21:20,640 --> 00:21:24,240
and interior cells will be in test will

601
00:21:22,640 --> 00:21:25,600
be tested

602
00:21:24,240 --> 00:21:27,839
um

603
00:21:25,599 --> 00:21:29,759
eight times right

604
00:21:27,839 --> 00:21:31,439
and so if you think about that's just a

605
00:21:29,759 --> 00:21:33,759
tremendous amount of waste because

606
00:21:31,440 --> 00:21:34,960
collides at p is not a cheap function

607
00:21:33,759 --> 00:21:36,558
right it's going to be a fairly

608
00:21:34,960 --> 00:21:38,720
expensive function it's not that

609
00:21:36,558 --> 00:21:41,200
expensive once we have spatial partition

610
00:21:38,720 --> 00:21:43,759
in here but it's still pretty expensive

611
00:21:41,200 --> 00:21:46,240
so we probably want to store just a bit

612
00:21:43,759 --> 00:21:48,240
at least that just says did we already

613
00:21:46,240 --> 00:21:49,279
compute this cell or not so instead of

614
00:21:48,240 --> 00:21:52,240
storing

615
00:21:49,279 --> 00:21:54,158
like uh just one single thing which is

616
00:21:52,240 --> 00:21:56,000
occupied or unoccupied

617
00:21:54,159 --> 00:21:57,360
we would also store a third thing which

618
00:21:56,000 --> 00:21:58,400
is you know third state which is

619
00:21:57,359 --> 00:22:00,079
untested

620
00:21:58,400 --> 00:22:01,440
and then we'll just look up

621
00:22:00,079 --> 00:22:03,439
you know what's the state of this grid

622
00:22:01,440 --> 00:22:06,400
cell if it's occupied or unoccupied we

623
00:22:03,440 --> 00:22:08,558
move forward if it's um untested we test

624
00:22:06,400 --> 00:22:10,400
it and re write the value

625
00:22:08,558 --> 00:22:12,240
of whether it's occupied or unoccupied

626
00:22:10,400 --> 00:22:13,840
right

627
00:22:12,240 --> 00:22:15,519
so that'd be a pretty easy optimization

628
00:22:13,839 --> 00:22:16,879
here too and we should probably do it uh

629
00:22:15,519 --> 00:22:19,119
we go through and we just check to see

630
00:22:16,880 --> 00:22:21,360
what collides uh and what doesn't

631
00:22:19,119 --> 00:22:23,279
collide and we produce an in embedding

632
00:22:21,359 --> 00:22:24,798
count while we're at it the reason for

633
00:22:23,279 --> 00:22:28,158
the embedding count is to see whether

634
00:22:24,798 --> 00:22:33,038
we're uh stuck at this time and i feel

635
00:22:28,159 --> 00:22:33,039
like really that should probably only um

636
00:22:38,720 --> 00:22:42,240
i i don't know um

637
00:22:42,558 --> 00:22:45,599
what we want to do about that

638
00:22:50,480 --> 00:22:54,038
sorry a bit stuffy

639
00:23:03,200 --> 00:23:07,519
what is the time

640
00:23:04,640 --> 00:23:08,960
photo lithography routine

641
00:23:07,519 --> 00:23:11,038
if you tell me your name and dated my

642
00:23:08,960 --> 00:23:11,038
brother

643
00:23:15,359 --> 00:23:19,038
how did you guys get from photo

644
00:23:16,960 --> 00:23:20,480
lithography machines

645
00:23:19,038 --> 00:23:22,798
i mean from from dijkstra to

646
00:23:20,480 --> 00:23:25,360
photolithography machines just because

647
00:23:22,798 --> 00:23:25,359
they're dutch

648
00:23:30,400 --> 00:23:33,360
dutch national pride

649
00:23:32,240 --> 00:23:34,720
gotcha

650
00:23:33,359 --> 00:23:36,399
well yeah i mean the dutch should be

651
00:23:34,720 --> 00:23:38,960
pretty proud because right now literally

652
00:23:36,400 --> 00:23:40,559
all the chips in the world all of them

653
00:23:38,960 --> 00:23:43,200
that i know about

654
00:23:40,558 --> 00:23:44,960
uh that are cutting edge are made on

655
00:23:43,200 --> 00:23:45,919
dutch machines

656
00:23:44,960 --> 00:23:49,120
right

657
00:23:45,919 --> 00:23:49,120
like i don't think there's any

658
00:23:49,599 --> 00:23:52,319
i don't think there are any

659
00:23:51,519 --> 00:23:55,278
like

660
00:23:52,319 --> 00:23:57,759
sub 10 10 nanometer chips being produced

661
00:23:55,278 --> 00:23:59,759
on non-dutch machines

662
00:23:57,759 --> 00:24:02,079
right

663
00:23:59,759 --> 00:24:04,480
like like the dutch

664
00:24:02,079 --> 00:24:06,639
are the only reason

665
00:24:04,480 --> 00:24:07,519
uh i guess it's not the dutch because i

666
00:24:06,640 --> 00:24:10,000
mean

667
00:24:07,519 --> 00:24:12,319
they're a multinational corporation but

668
00:24:10,000 --> 00:24:13,679
they're owned you know and were founded

669
00:24:12,319 --> 00:24:16,079
in

670
00:24:13,679 --> 00:24:16,960
or founded by dutch people

671
00:24:16,079 --> 00:24:19,359
um

672
00:24:16,960 --> 00:24:21,600
so yeah like there's

673
00:24:19,359 --> 00:24:24,959
basically there's no

674
00:24:21,599 --> 00:24:24,959
nobody else got

675
00:24:25,200 --> 00:24:32,960
uh got the like

676
00:24:28,400 --> 00:24:35,200
the process after 14 or 12 nanometer

677
00:24:32,960 --> 00:24:37,360
um no one else really was able to do it

678
00:24:35,200 --> 00:24:39,919
intel tried to do the 10 nanometer kind

679
00:24:37,359 --> 00:24:41,759
of failed i mean there are some limited

680
00:24:39,919 --> 00:24:43,600
10 nanometer chips they're producing but

681
00:24:41,759 --> 00:24:45,200
they're not really very good

682
00:24:43,599 --> 00:24:47,199
um and then

683
00:24:45,200 --> 00:24:49,679
basically the seven five and three

684
00:24:47,200 --> 00:24:51,120
nanometer nodes are all dutch everywhere

685
00:24:49,679 --> 00:24:53,360
else

686
00:24:51,119 --> 00:24:53,359
um

687
00:24:53,679 --> 00:24:55,919
right

688
00:24:56,000 --> 00:25:00,400
i mean am i wrong i i don't think anyone

689
00:24:58,640 --> 00:25:02,960
else has managed to ship an actual

690
00:25:00,400 --> 00:25:04,798
production node there are other people

691
00:25:02,960 --> 00:25:06,720
with extreme uv

692
00:25:04,798 --> 00:25:09,759
uh

693
00:25:06,720 --> 00:25:11,919
like technology but it's not it has not

694
00:25:09,759 --> 00:25:13,919
successfully done a commercial run if

695
00:25:11,919 --> 00:25:16,640
i'm if i'm not mistaken so i'm pretty

696
00:25:13,919 --> 00:25:19,278
sure the dutch are the only people

697
00:25:16,640 --> 00:25:21,679
or a dutch company is the only company

698
00:25:19,278 --> 00:25:24,319
who has successfully been able to ship

699
00:25:21,679 --> 00:25:25,278
lithography machines at that scale no

700
00:25:24,319 --> 00:25:27,759
one else

701
00:25:25,278 --> 00:25:30,159
that are actually commercially viable uh

702
00:25:27,759 --> 00:25:31,200
you know ibm or whatever you know that

703
00:25:30,159 --> 00:25:33,679
they've got

704
00:25:31,200 --> 00:25:35,038
crazy research machines that can do even

705
00:25:33,679 --> 00:25:36,400
deeper than that and all that stuff

706
00:25:35,038 --> 00:25:39,919
right so it's not like it's like some

707
00:25:36,400 --> 00:25:43,200
kind of like world record of how uh you

708
00:25:39,919 --> 00:25:44,720
know dense you can etch a transistor but

709
00:25:43,200 --> 00:25:46,798
no one cares about that i mean that's

710
00:25:44,720 --> 00:25:49,600
that's like you know just just research

711
00:25:46,798 --> 00:25:51,119
stuff uh it does it only comes into play

712
00:25:49,599 --> 00:25:52,719
later if you can actually commercialize

713
00:25:51,119 --> 00:25:54,719
it because you know

714
00:25:52,720 --> 00:25:57,038
nobody cares if you can put together a

715
00:25:54,720 --> 00:25:59,440
very very tiny transistor

716
00:25:57,038 --> 00:26:02,400
if you can't do it at scale and quickly

717
00:25:59,440 --> 00:26:03,919
right it has to be efficient otherwise

718
00:26:02,400 --> 00:26:05,759
it doesn't help you because they need to

719
00:26:03,919 --> 00:26:08,480
produce millions

720
00:26:05,759 --> 00:26:12,079
or tens of millions of chips not like

721
00:26:08,480 --> 00:26:13,038
one chip you know a day or something

722
00:26:12,079 --> 00:26:14,399
so

723
00:26:13,038 --> 00:26:17,519
anyway

724
00:26:14,400 --> 00:26:19,759
brief transgression yes if you are dutch

725
00:26:17,519 --> 00:26:21,359
uh you are saving

726
00:26:19,759 --> 00:26:22,720
mankind's

727
00:26:21,359 --> 00:26:26,399
uh

728
00:26:22,720 --> 00:26:26,400
semiconductor industry as we speak

729
00:26:34,400 --> 00:26:37,519
all right

730
00:26:35,278 --> 00:26:38,558
so the embed count part i i do think

731
00:26:37,519 --> 00:26:41,960
we're probably gonna have to look out a

732
00:26:38,558 --> 00:26:41,960
little bit more carefully

733
00:27:01,839 --> 00:27:04,079
so

734
00:27:04,880 --> 00:27:08,640
i suspect we'll have to track that

735
00:27:07,038 --> 00:27:10,079
because i expect we'll want to know

736
00:27:08,640 --> 00:27:12,400
things like

737
00:27:10,079 --> 00:27:13,678
did we enter this cell

738
00:27:12,400 --> 00:27:14,960
from a cell

739
00:27:13,679 --> 00:27:17,200
that

740
00:27:14,960 --> 00:27:19,919
where you were stuck so is this a stuck

741
00:27:17,200 --> 00:27:21,278
search or an unstuck search i suspect

742
00:27:19,919 --> 00:27:22,399
we'll want to take different actions

743
00:27:21,278 --> 00:27:23,919
depending

744
00:27:22,398 --> 00:27:26,000
but i'm not going to deal with that just

745
00:27:23,919 --> 00:27:27,759
yet

746
00:27:26,000 --> 00:27:30,000
because i want to think through the

747
00:27:27,759 --> 00:27:32,079
regular activity first before we start

748
00:27:30,000 --> 00:27:34,480
thinking through the activity uh in the

749
00:27:32,079 --> 00:27:35,759
case of actually being

750
00:27:34,480 --> 00:27:37,360
embedded and trying to get out of

751
00:27:35,759 --> 00:27:40,640
embedded

752
00:27:37,359 --> 00:27:44,639
uh so what we want to do here is we want

753
00:27:40,640 --> 00:27:46,080
to now see like what is the actual

754
00:27:44,640 --> 00:27:47,440
you can see like what is the actual

755
00:27:46,079 --> 00:27:48,960
activity

756
00:27:47,440 --> 00:27:51,120
um

757
00:27:48,960 --> 00:27:53,519
it looks like we wrote this to try and

758
00:27:51,119 --> 00:27:55,519
make it easier for us to

759
00:27:53,519 --> 00:27:58,158
quickly search through

760
00:27:55,519 --> 00:28:00,480
uh all of the places we were going to

761
00:27:58,159 --> 00:28:02,960
search with our voxel search or

762
00:28:00,480 --> 00:28:05,200
something

763
00:28:02,960 --> 00:28:05,200
um

764
00:28:05,599 --> 00:28:09,439
seems like all this is

765
00:28:08,000 --> 00:28:12,000
right

766
00:28:09,440 --> 00:28:13,840
uh we wanted to check

767
00:28:12,000 --> 00:28:16,319
i guess at least six

768
00:28:13,839 --> 00:28:18,240
we want to check at least six neighbors

769
00:28:16,319 --> 00:28:20,639
um instead of eight neighbors or

770
00:28:18,240 --> 00:28:20,640
something

771
00:28:20,720 --> 00:28:24,720
i don't know

772
00:28:21,839 --> 00:28:26,639
uh and so we just did a

773
00:28:24,720 --> 00:28:29,200
a simple loop that presumably get

774
00:28:26,640 --> 00:28:31,440
unrolled where it's just two

775
00:28:29,200 --> 00:28:35,440
checks one this set of three and then

776
00:28:31,440 --> 00:28:35,440
another that's a set of three right

777
00:28:35,519 --> 00:28:38,558
you can see it happening here

778
00:28:40,480 --> 00:28:45,278
um

779
00:28:42,720 --> 00:28:48,399
and that's it uh this just tries to find

780
00:28:45,278 --> 00:28:48,398
whichever one was closest

781
00:28:49,519 --> 00:28:51,839
all right

782
00:28:52,960 --> 00:28:59,079
so

783
00:28:53,759 --> 00:28:59,079
i guess i'm not immediately sure

784
00:29:01,679 --> 00:29:05,759
i guess i'm not immediately sure why

785
00:29:03,440 --> 00:29:07,840
this did not move

786
00:29:05,759 --> 00:29:08,210
at all

787
00:29:07,839 --> 00:29:10,558
um

788
00:29:08,210 --> 00:29:13,360
[Music]

789
00:29:10,558 --> 00:29:15,678
it could be

790
00:29:13,359 --> 00:29:15,678
uh

791
00:29:17,919 --> 00:29:22,640
it could be something to do with this

792
00:29:21,359 --> 00:29:25,759
push not

793
00:29:22,640 --> 00:29:29,600
working right like we're pushing on

794
00:29:25,759 --> 00:29:29,599
the wrong cells or something

795
00:29:36,798 --> 00:29:42,319
it could have to do

796
00:29:38,839 --> 00:29:44,879
with the way the push works like this is

797
00:29:42,319 --> 00:29:47,200
in bounds is wrong

798
00:29:44,880 --> 00:29:47,200
um

799
00:29:48,640 --> 00:29:54,120
uh it could have to do

800
00:29:51,119 --> 00:29:54,119
with

801
00:29:54,398 --> 00:29:57,599
yeah i don't know there there aren't

802
00:29:56,159 --> 00:29:59,278
that many ways that this would be

803
00:29:57,599 --> 00:30:01,359
failing so i'll be interested to see

804
00:29:59,278 --> 00:30:02,798
because it doesn't really look that

805
00:30:01,359 --> 00:30:05,439
broken

806
00:30:02,798 --> 00:30:06,480
um and so it's a little weird i also

807
00:30:05,440 --> 00:30:09,038
don't know

808
00:30:06,480 --> 00:30:09,919
uh one thing that's a bit odd

809
00:30:09,038 --> 00:30:11,359
uh

810
00:30:09,919 --> 00:30:14,399
is

811
00:30:11,359 --> 00:30:18,000
that like when we run this thing

812
00:30:14,398 --> 00:30:20,079
i'm not sure why i'm not seeing so like

813
00:30:18,000 --> 00:30:21,599
when i hop on here right you can see

814
00:30:20,079 --> 00:30:24,960
that it's doing the collision detector

815
00:30:21,599 --> 00:30:26,798
because when i move my head collision

816
00:30:24,960 --> 00:30:28,319
volume which at some point we should

817
00:30:26,798 --> 00:30:30,079
really change the size of because it

818
00:30:28,319 --> 00:30:31,759
should probably be a square but you know

819
00:30:30,079 --> 00:30:33,359
whatever it doesn't really matter you

820
00:30:31,759 --> 00:30:35,519
can see it runs a bunch of collision

821
00:30:33,359 --> 00:30:36,879
checks when i do that so it's definitely

822
00:30:35,519 --> 00:30:37,250
operational

823
00:30:36,880 --> 00:30:38,399
um

824
00:30:37,250 --> 00:30:40,558
[Music]

825
00:30:38,398 --> 00:30:43,359
so that's not a concern but what you can

826
00:30:40,558 --> 00:30:44,240
see here is like for example right here

827
00:30:43,359 --> 00:30:46,719
uh

828
00:30:44,240 --> 00:30:48,640
it it never really checks any more than

829
00:30:46,720 --> 00:30:51,679
one grid and interestingly you can see

830
00:30:48,640 --> 00:30:52,480
it it actually moves the glove

831
00:30:51,679 --> 00:30:57,278
uh

832
00:30:52,480 --> 00:30:59,120
somewhat correctly inside that um

833
00:30:57,278 --> 00:31:00,720
right you can you can see it move inside

834
00:30:59,119 --> 00:31:02,239
that cube i don't mean well maybe you

835
00:31:00,720 --> 00:31:03,919
can't this is twitch

836
00:31:02,240 --> 00:31:06,960
uh do you see there there's like a

837
00:31:03,919 --> 00:31:08,799
little like uh placement you can see it

838
00:31:06,960 --> 00:31:10,319
uh so it searches along the edge of the

839
00:31:08,798 --> 00:31:12,480
voxel properly

840
00:31:10,319 --> 00:31:15,599
but it doesn't seem to ever actually

841
00:31:12,480 --> 00:31:16,399
create a larger voxel

842
00:31:15,599 --> 00:31:18,639
right

843
00:31:16,398 --> 00:31:21,199
so it does not seem to search

844
00:31:18,640 --> 00:31:24,080
uh further than that

845
00:31:21,200 --> 00:31:26,240
and so one thing i would like to do

846
00:31:24,079 --> 00:31:28,000
uh in that case is

847
00:31:26,240 --> 00:31:30,000
just start looking at this code here

848
00:31:28,000 --> 00:31:32,720
because it seems like the voxel area

849
00:31:30,000 --> 00:31:34,000
doesn't really get

850
00:31:32,720 --> 00:31:34,880
labeled

851
00:31:34,000 --> 00:31:36,640
uh

852
00:31:34,880 --> 00:31:38,720
properly or something

853
00:31:36,640 --> 00:31:41,120
one thing i can do here that i think

854
00:31:38,720 --> 00:31:44,640
maybe i i possibly should do

855
00:31:41,119 --> 00:31:47,278
is rather than only showing this uh

856
00:31:44,640 --> 00:31:49,200
showing the voxel

857
00:31:47,278 --> 00:31:51,599
rather than only showing like where i

858
00:31:49,200 --> 00:31:55,120
search i should probably also show the

859
00:31:51,599 --> 00:31:58,240
entire bounds of the voxel right

860
00:31:55,119 --> 00:32:01,038
um so like erect min max

861
00:31:58,240 --> 00:32:04,000
that has the voxel min corner in it and

862
00:32:01,038 --> 00:32:05,278
the voxel max corner in it um

863
00:32:04,000 --> 00:32:06,240
might be nice

864
00:32:05,278 --> 00:32:07,679
uh

865
00:32:06,240 --> 00:32:08,798
just to start with

866
00:32:07,679 --> 00:32:10,720
and

867
00:32:08,798 --> 00:32:13,038
we may want to do

868
00:32:10,720 --> 00:32:16,079
i guess we may want to do a min dim

869
00:32:13,038 --> 00:32:16,079
because we clamp

870
00:32:16,720 --> 00:32:20,240
excuse me

871
00:32:18,000 --> 00:32:22,960
we clamp it as well so what we might

872
00:32:20,240 --> 00:32:25,038
want to do is say okay let's reproduce

873
00:32:22,960 --> 00:32:29,840
the span from

874
00:32:25,038 --> 00:32:29,839
uh the voxel dim here uh

875
00:32:30,319 --> 00:32:32,879
yeah like

876
00:32:33,759 --> 00:32:39,359
so basically like when we do the mo when

877
00:32:36,079 --> 00:32:40,879
we do the uh cell dim voxel dim here

878
00:32:39,359 --> 00:32:42,719
we're gonna make a

879
00:32:40,880 --> 00:32:44,559
excuse me

880
00:32:42,720 --> 00:32:47,038
um we're going to make a voxel grid when

881
00:32:44,558 --> 00:32:48,798
we do make voxel grid if we look at what

882
00:32:47,038 --> 00:32:51,038
that gives us there's a total bounds

883
00:32:48,798 --> 00:32:53,200
right in there so i guess i i can just

884
00:32:51,038 --> 00:32:54,640
not even bother

885
00:32:53,200 --> 00:32:56,640
creating

886
00:32:54,640 --> 00:32:58,159
a rectangle for this i can just draw the

887
00:32:56,640 --> 00:32:59,278
one that's in the grid and that's better

888
00:32:58,159 --> 00:33:01,120
because then i that's the one it's

889
00:32:59,278 --> 00:33:03,679
actually using anyway so then there's no

890
00:33:01,119 --> 00:33:06,959
risk that i screw it up right

891
00:33:03,679 --> 00:33:08,960
um so supposing we draw like just a gray

892
00:33:06,960 --> 00:33:11,120
um

893
00:33:08,960 --> 00:33:13,200
we'll just draw a gray box there

894
00:33:11,119 --> 00:33:15,918
so that i can see it right

895
00:33:13,200 --> 00:33:17,600
um and now we can look and see like

896
00:33:15,919 --> 00:33:20,320
what's the bounds

897
00:33:17,599 --> 00:33:22,079
so you can see here that there's uh you

898
00:33:20,319 --> 00:33:24,879
know at least

899
00:33:22,079 --> 00:33:29,359
from the boundary that we're looking at

900
00:33:24,880 --> 00:33:29,360
um i i don't necessarily know

901
00:33:29,440 --> 00:33:34,640
i i couldn't say for sure

902
00:33:31,919 --> 00:33:36,799
whether those bounds are correct based

903
00:33:34,640 --> 00:33:38,240
on the movement yet because i guess the

904
00:33:36,798 --> 00:33:40,079
other thing i didn't draw was the start

905
00:33:38,240 --> 00:33:41,839
and end so i think i'll draw the start

906
00:33:40,079 --> 00:33:44,000
and end as well

907
00:33:41,839 --> 00:33:44,959
but what i can say is already it looks

908
00:33:44,000 --> 00:33:47,679
buggy

909
00:33:44,960 --> 00:33:49,600
uh the search anyway because if this is

910
00:33:47,679 --> 00:33:52,640
the bounds we should have been able to

911
00:33:49,599 --> 00:33:55,759
search through at least these other

912
00:33:52,640 --> 00:33:58,000
um you know you can see that this whole

913
00:33:55,759 --> 00:34:00,079
slice of the voxel here would have been

914
00:33:58,000 --> 00:34:02,240
closer to the target uh that we're

915
00:34:00,079 --> 00:34:04,839
moving towards so it already seems like

916
00:34:02,240 --> 00:34:08,239
the search is a little bit broken um

917
00:34:04,839 --> 00:34:12,239
but before we get into that i would like

918
00:34:08,239 --> 00:34:14,319
to also draw a like diagram um

919
00:34:12,239 --> 00:34:17,279
line basically

920
00:34:14,320 --> 00:34:20,639
so i'd like to draw a line that we see

921
00:34:17,280 --> 00:34:22,879
the from p and the frumpy and the 2p

922
00:34:20,639 --> 00:34:25,519
uh i'd like to see the frumpy and the 2p

923
00:34:22,878 --> 00:34:27,598
uh because that tells me whether or not

924
00:34:25,519 --> 00:34:28,960
we got the right bounds based on the

925
00:34:27,599 --> 00:34:30,000
input that we were given which is

926
00:34:28,960 --> 00:34:32,320
important

927
00:34:30,000 --> 00:34:35,519
um so i want to look here and take a

928
00:34:32,320 --> 00:34:37,200
look at what the that uh stretch is so

929
00:34:35,519 --> 00:34:38,559
if that's the frumpy

930
00:34:37,199 --> 00:34:39,439
2p

931
00:34:38,559 --> 00:34:41,918
right

932
00:34:39,440 --> 00:34:45,838
um at least it seems like it

933
00:34:41,918 --> 00:34:45,838
uh that seems really broken

934
00:34:46,838 --> 00:34:51,199
right um

935
00:34:49,199 --> 00:34:54,239
we know that our voxel dimension was

936
00:34:51,199 --> 00:34:56,158
supposed to be like 16 16 16.

937
00:34:54,239 --> 00:34:58,319
and here we are we're stretching this

938
00:34:56,159 --> 00:35:01,039
thing out that far

939
00:34:58,320 --> 00:35:04,880
uh and yet we only encompassed a two by

940
00:35:01,039 --> 00:35:07,519
two by two voxel right so we obviously

941
00:35:04,880 --> 00:35:10,400
screwed this up somehow

942
00:35:07,519 --> 00:35:13,358
uh and we should fix it right

943
00:35:10,400 --> 00:35:13,358
i might also just

944
00:35:13,519 --> 00:35:18,960
make that gray as well

945
00:35:16,400 --> 00:35:21,119
so let's debug this because obviously we

946
00:35:18,960 --> 00:35:22,000
don't know what we're doing here

947
00:35:21,119 --> 00:35:25,280
um

948
00:35:22,000 --> 00:35:30,000
we take the voxel starting corner

949
00:35:25,280 --> 00:35:32,720
and in fact i guess if i look here uh

950
00:35:30,000 --> 00:35:32,719
don't really know

951
00:35:40,559 --> 00:35:44,880
so that all looks fine because this is

952
00:35:42,159 --> 00:35:46,960
just computing a starting cell

953
00:35:44,880 --> 00:35:49,440
uh

954
00:35:46,960 --> 00:35:52,159
which actually what do we do with this

955
00:35:49,440 --> 00:35:52,159
starting cell

956
00:35:55,199 --> 00:35:58,919
so this is ignored

957
00:35:59,480 --> 00:36:04,800
entirely

958
00:36:01,440 --> 00:36:06,639
so we we got some work to do here so the

959
00:36:04,800 --> 00:36:07,519
cell dim we need

960
00:36:06,639 --> 00:36:08,719
this

961
00:36:07,519 --> 00:36:12,880
i

962
00:36:08,719 --> 00:36:14,719
looks like we kind of didn't really do

963
00:36:12,880 --> 00:36:17,838
what we were supposed to do here

964
00:36:14,719 --> 00:36:20,000
we don't use it you can see initial cell

965
00:36:17,838 --> 00:36:23,279
is actually coming from here now

966
00:36:20,000 --> 00:36:24,559
um so really this should be moved up

967
00:36:23,280 --> 00:36:27,680
here

968
00:36:24,559 --> 00:36:29,358
and this uh starting cell should be

969
00:36:27,679 --> 00:36:31,759
labeled with that so this is just old

970
00:36:29,358 --> 00:36:34,078
code from before

971
00:36:31,760 --> 00:36:37,119
and this uh should be removed because

972
00:36:34,079 --> 00:36:40,720
that's a misleading diagram now i think

973
00:36:37,119 --> 00:36:42,559
right um

974
00:36:40,719 --> 00:36:45,559
to a certain extent

975
00:36:42,559 --> 00:36:45,559
um

976
00:36:56,000 --> 00:36:58,400
i think i think that's a misleading

977
00:36:57,358 --> 00:37:00,480
diagram

978
00:36:58,400 --> 00:37:01,599
so when we produce the voxel starting

979
00:37:00,480 --> 00:37:02,400
corner

980
00:37:01,599 --> 00:37:05,119
um

981
00:37:02,400 --> 00:37:08,119
here and we use that to create

982
00:37:05,119 --> 00:37:08,119
the

983
00:37:09,280 --> 00:37:13,040
yeah like this is so weird

984
00:37:11,199 --> 00:37:14,559
this is totally wrong like i don't know

985
00:37:13,039 --> 00:37:15,440
what this is doing

986
00:37:14,559 --> 00:37:18,159
because

987
00:37:15,440 --> 00:37:20,720
we want the from p to be the thing that

988
00:37:18,159 --> 00:37:21,759
we're going towards here

989
00:37:20,719 --> 00:37:24,078
so

990
00:37:21,760 --> 00:37:26,400
really corner b is not the cell

991
00:37:24,079 --> 00:37:29,519
dimension times the direction

992
00:37:26,400 --> 00:37:32,559
it's just from p isn't it

993
00:37:29,519 --> 00:37:34,800
um i mean 2 2 p

994
00:37:32,559 --> 00:37:37,119
furthermore

995
00:37:34,800 --> 00:37:39,119
i guess i don't really even know why

996
00:37:37,119 --> 00:37:42,000
we're doing it this way because

997
00:37:39,119 --> 00:37:42,000
when we call

998
00:37:43,679 --> 00:37:48,118
uh make voxel grid

999
00:37:50,000 --> 00:37:54,880
we do the setman corner the setman

1000
00:37:51,920 --> 00:37:57,880
corner is just the floor

1001
00:37:54,880 --> 00:37:57,880
um

1002
00:38:04,880 --> 00:38:07,760
yeah uh

1003
00:38:08,880 --> 00:38:12,320
i i mean to me look

1004
00:38:13,920 --> 00:38:17,440
to me i feel like this is just this is

1005
00:38:16,079 --> 00:38:19,599
just broken

1006
00:38:17,440 --> 00:38:22,079
right uh

1007
00:38:19,599 --> 00:38:24,480
i i think we just want this

1008
00:38:22,079 --> 00:38:26,640
like these are the two

1009
00:38:24,480 --> 00:38:28,000
uh places we're going to

1010
00:38:26,639 --> 00:38:29,920
right

1011
00:38:28,000 --> 00:38:34,320
and

1012
00:38:29,920 --> 00:38:37,440
we just want to take the entire area of

1013
00:38:34,320 --> 00:38:40,000
these so we we want you know them to be

1014
00:38:37,440 --> 00:38:42,480
expanded because we floor this we've

1015
00:38:40,000 --> 00:38:44,400
already expanded into the

1016
00:38:42,480 --> 00:38:48,880
uh the downward direction

1017
00:38:44,400 --> 00:38:50,800
the voxel uh here we want to expand one

1018
00:38:48,880 --> 00:38:52,640
plus yeah you can see we're already

1019
00:38:50,800 --> 00:38:55,039
doing it um

1020
00:38:52,639 --> 00:38:57,440
so i think we want

1021
00:38:55,039 --> 00:38:57,440
this

1022
00:38:58,719 --> 00:39:02,000
i think

1023
00:39:00,639 --> 00:39:04,559
um

1024
00:39:02,000 --> 00:39:05,519
and you know i'm not sure but i i

1025
00:39:04,559 --> 00:39:07,920
believe

1026
00:39:05,519 --> 00:39:08,960
that's what we're actually looking for

1027
00:39:07,920 --> 00:39:09,760
here

1028
00:39:08,960 --> 00:39:12,400
so

1029
00:39:09,760 --> 00:39:13,520
yeah we want to do the initial cell it

1030
00:39:12,400 --> 00:39:15,039
well we don't even need to do the

1031
00:39:13,519 --> 00:39:17,838
initial cell because that's going to get

1032
00:39:15,039 --> 00:39:20,159
drawn in here anyway so i don't actually

1033
00:39:17,838 --> 00:39:21,679
even know that we need that right so i

1034
00:39:20,159 --> 00:39:23,759
think this is more what we're looking

1035
00:39:21,679 --> 00:39:26,399
for this is

1036
00:39:23,760 --> 00:39:27,440
and i i i we must have just kind of like

1037
00:39:26,400 --> 00:39:31,119
hacked that in there and not really

1038
00:39:27,440 --> 00:39:33,920
thought about didn't look correct right

1039
00:39:31,119 --> 00:39:35,200
um so now that looks much

1040
00:39:33,920 --> 00:39:37,680
more sane

1041
00:39:35,199 --> 00:39:40,639
right uh now work

1042
00:39:37,679 --> 00:39:42,960
you know if that's the motion we were ax

1043
00:39:40,639 --> 00:39:44,480
axed that's good asked

1044
00:39:42,960 --> 00:39:46,720
to produce

1045
00:39:44,480 --> 00:39:47,920
now we're like properly bounding that

1046
00:39:46,719 --> 00:39:49,118
region

1047
00:39:47,920 --> 00:39:50,639
right

1048
00:39:49,119 --> 00:39:52,640
because you can see now that we're

1049
00:39:50,639 --> 00:39:55,358
trying to hit the target

1050
00:39:52,639 --> 00:39:58,319
by enclosing the motion inside the voxel

1051
00:39:55,358 --> 00:40:00,639
area which is what we wanted

1052
00:39:58,320 --> 00:40:01,760
so now we can start the search uh

1053
00:40:00,639 --> 00:40:03,279
figuring out why our search isn't

1054
00:40:01,760 --> 00:40:05,520
working

1055
00:40:03,280 --> 00:40:08,160
and so let's take a look at that so we

1056
00:40:05,519 --> 00:40:10,639
know that the only criteria for entering

1057
00:40:08,159 --> 00:40:14,159
the search right is that the stack not

1058
00:40:10,639 --> 00:40:16,078
be empty so here's the stack

1059
00:40:14,159 --> 00:40:18,000
not empty part

1060
00:40:16,079 --> 00:40:19,680
and that just means the depth has to be

1061
00:40:18,000 --> 00:40:22,559
greater than zero now we know the depth

1062
00:40:19,679 --> 00:40:23,679
should not be zero uh when we enter the

1063
00:40:22,559 --> 00:40:24,400
routine

1064
00:40:23,679 --> 00:40:26,960
because

1065
00:40:24,400 --> 00:40:28,400
we have just done a push voxel stack

1066
00:40:26,960 --> 00:40:29,838
which should have

1067
00:40:28,400 --> 00:40:32,880
incremented the depth and you can see it

1068
00:40:29,838 --> 00:40:35,119
incrementing the depth here

1069
00:40:32,880 --> 00:40:35,119
we

1070
00:40:35,760 --> 00:40:39,760
we shouldn't be able to hit either of

1071
00:40:37,599 --> 00:40:42,640
these unless this is saying that we're

1072
00:40:39,760 --> 00:40:44,400
not in the bounds like that could happen

1073
00:40:42,639 --> 00:40:45,920
if we screwed up

1074
00:40:44,400 --> 00:40:48,318
the alignment of the voxel or something

1075
00:40:45,920 --> 00:40:48,318
like that

1076
00:40:48,639 --> 00:40:51,519
so if we

1077
00:40:50,239 --> 00:40:53,039
we could look at that

1078
00:40:51,519 --> 00:40:55,119
but the first thing i also want to know

1079
00:40:53,039 --> 00:40:57,519
is we look in here

1080
00:40:55,119 --> 00:40:58,800
uh we're never drawing the actual

1081
00:40:57,519 --> 00:41:00,318
uh

1082
00:40:58,800 --> 00:41:02,720
voxel we're on

1083
00:41:00,318 --> 00:41:07,838
and so i'd like to now put that code in

1084
00:41:02,719 --> 00:41:10,879
here to show the voxels as we test them

1085
00:41:07,838 --> 00:41:12,239
so when we come in here and we say uh

1086
00:41:10,880 --> 00:41:14,000
you know

1087
00:41:12,239 --> 00:41:16,078
let's draw this thing

1088
00:41:14,000 --> 00:41:19,358
you know maybe we'll do it like this

1089
00:41:16,079 --> 00:41:20,560
where i'm just going to set the color

1090
00:41:19,358 --> 00:41:23,358
based on

1091
00:41:20,559 --> 00:41:26,719
you know whether it was closer or not

1092
00:41:23,358 --> 00:41:29,920
so if it wasn't closer or if it was

1093
00:41:26,719 --> 00:41:32,480
uh we'll just like set these uh colors

1094
00:41:29,920 --> 00:41:34,318
and then we'll draw whatever the voxel

1095
00:41:32,480 --> 00:41:36,318
was that we actually tested because you

1096
00:41:34,318 --> 00:41:38,719
can see here we get

1097
00:41:36,318 --> 00:41:40,000
the cell that we're on here so it's free

1098
00:41:38,719 --> 00:41:42,799
for us to just pass that to the

1099
00:41:40,000 --> 00:41:45,119
diagrammer and say hey draw the cell

1100
00:41:42,800 --> 00:41:48,560
so this way i can see like what cells do

1101
00:41:45,119 --> 00:41:50,640
we test um and which cells you know you

1102
00:41:48,559 --> 00:41:52,000
know which are basically participating

1103
00:41:50,639 --> 00:41:54,480
in the solve

1104
00:41:52,000 --> 00:41:58,480
uh so if we look here you can see that

1105
00:41:54,480 --> 00:42:00,880
we test exactly one cell it does find a

1106
00:41:58,480 --> 00:42:04,079
placement um in it that says that it's

1107
00:42:00,880 --> 00:42:05,838
closer and then we test no further cells

1108
00:42:04,079 --> 00:42:07,920
so that gives us a pretty clear

1109
00:42:05,838 --> 00:42:09,440
indication of who

1110
00:42:07,920 --> 00:42:11,680
is not working

1111
00:42:09,440 --> 00:42:13,679
so inside this flip

1112
00:42:11,679 --> 00:42:18,480
routine

1113
00:42:13,679 --> 00:42:21,919
where we try zero uh and a one

1114
00:42:18,480 --> 00:42:25,119
we are never pushing this voxel stack

1115
00:42:21,920 --> 00:42:28,000
uh for whatever reason right

1116
00:42:25,119 --> 00:42:30,880
so our side computation here where we

1117
00:42:28,000 --> 00:42:32,309
figure out what direction we're going

1118
00:42:30,880 --> 00:42:35,389
right

1119
00:42:32,309 --> 00:42:35,389
[Music]

1120
00:42:38,559 --> 00:42:42,639
for whatever reason this code never

1121
00:42:41,039 --> 00:42:44,639
produces

1122
00:42:42,639 --> 00:42:47,199
any actual pushes

1123
00:42:44,639 --> 00:42:47,199
it would seem

1124
00:42:47,519 --> 00:42:51,599
right

1125
00:42:48,639 --> 00:42:54,960
uh because if it ever pushed anything on

1126
00:42:51,599 --> 00:42:57,200
we would loop around and at least draw

1127
00:42:54,960 --> 00:42:59,760
one more of these

1128
00:42:57,199 --> 00:43:01,279
so why doesn't that work what's wrong

1129
00:42:59,760 --> 00:43:03,599
with this code

1130
00:43:01,280 --> 00:43:03,599
um

1131
00:43:08,079 --> 00:43:15,359
and i can't say i see any

1132
00:43:11,400 --> 00:43:18,358
obvious wrong thing in here

1133
00:43:15,358 --> 00:43:18,358
um

1134
00:43:31,039 --> 00:43:34,719
i can't say i see anything obviously

1135
00:43:32,719 --> 00:43:36,399
wrong with this

1136
00:43:34,719 --> 00:43:37,679
so

1137
00:43:36,400 --> 00:43:39,519
i think i'm gonna have to step through

1138
00:43:37,679 --> 00:43:40,480
it and see it's probably something

1139
00:43:39,519 --> 00:43:43,039
stupid

1140
00:43:40,480 --> 00:43:45,838
uh but i'm just not seeing

1141
00:43:43,039 --> 00:43:48,639
what the stupid thing is

1142
00:43:45,838 --> 00:43:50,318
uh it could be that this is like never

1143
00:43:48,639 --> 00:43:52,480
firing

1144
00:43:50,318 --> 00:43:54,639
or always firing like it's always saying

1145
00:43:52,480 --> 00:43:56,559
it's occupied or something

1146
00:43:54,639 --> 00:43:58,799
um but that doesn't seem likely so i

1147
00:43:56,559 --> 00:44:00,960
don't know i i don't know

1148
00:43:58,800 --> 00:44:05,440
what's going on there so i'm just gonna

1149
00:44:00,960 --> 00:44:09,280
go ahead and uh turn it to a debug build

1150
00:44:05,440 --> 00:44:11,358
um and then i'm gonna set a breakpoint

1151
00:44:09,280 --> 00:44:13,359
inside move entity

1152
00:44:11,358 --> 00:44:13,849
uh so that we'll get a stop

1153
00:44:13,358 --> 00:44:14,960
whenever

1154
00:44:13,849 --> 00:44:17,598
[Music]

1155
00:44:14,960 --> 00:44:18,318
we try to move anything

1156
00:44:17,599 --> 00:44:20,000
so

1157
00:44:18,318 --> 00:44:22,079
um

1158
00:44:20,000 --> 00:44:25,358
excuse me

1159
00:44:22,079 --> 00:44:25,359
i'm now going to go ahead and look

1160
00:44:25,679 --> 00:44:29,118
just at that part

1161
00:44:27,599 --> 00:44:30,480
so i just want to watch it go through

1162
00:44:29,119 --> 00:44:32,000
this routine

1163
00:44:30,480 --> 00:44:34,838
um so that i can have some idea of

1164
00:44:32,000 --> 00:44:36,400
what's going on so here's occupied

1165
00:44:34,838 --> 00:44:37,279
um

1166
00:44:36,400 --> 00:44:39,280
oh

1167
00:44:37,280 --> 00:44:42,000
yeah duh

1168
00:44:39,280 --> 00:44:43,119
you guys probably all saw that right

1169
00:44:42,000 --> 00:44:44,960
before me

1170
00:44:43,119 --> 00:44:46,640
uh it's the wrong way around

1171
00:44:44,960 --> 00:44:48,000
it's it's supposed to be if it's not

1172
00:44:46,639 --> 00:44:49,440
occupied

1173
00:44:48,000 --> 00:44:51,119
right

1174
00:44:49,440 --> 00:44:53,679
um

1175
00:44:51,119 --> 00:44:57,680
we gotta update our four coder

1176
00:44:53,679 --> 00:44:59,919
my understanding was that at some point

1177
00:44:57,679 --> 00:45:03,199
that indent bug got fixed i also wanted

1178
00:44:59,920 --> 00:45:05,920
to try that new there's that new 10x

1179
00:45:03,199 --> 00:45:06,879
ide coder thing

1180
00:45:05,920 --> 00:45:08,480
um

1181
00:45:06,880 --> 00:45:10,079
that's being worked on which i love the

1182
00:45:08,480 --> 00:45:12,400
idea of like i love the fact that it's

1183
00:45:10,079 --> 00:45:14,160
just like a performance focused ide so

1184
00:45:12,400 --> 00:45:15,039
i'd like to test that out at some point

1185
00:45:14,159 --> 00:45:16,879
too

1186
00:45:15,039 --> 00:45:18,159
um maybe we'll do a subscribers only

1187
00:45:16,880 --> 00:45:19,838
stream at some point where we play

1188
00:45:18,159 --> 00:45:22,159
around with that

1189
00:45:19,838 --> 00:45:22,159
um

1190
00:45:22,480 --> 00:45:25,199
all right so now we should be pushing

1191
00:45:23,920 --> 00:45:28,240
these okay so i knew it was something

1192
00:45:25,199 --> 00:45:31,039
stupid and it was i just didn't

1193
00:45:28,239 --> 00:45:31,039
see it uh

1194
00:45:31,199 --> 00:45:36,318
off off the bat like i should have

1195
00:45:33,679 --> 00:45:37,358
um so now we're doing our search

1196
00:45:36,318 --> 00:45:40,000
and

1197
00:45:37,358 --> 00:45:42,400
uh i think

1198
00:45:40,000 --> 00:45:44,880
i think now that would probably be the

1199
00:45:42,400 --> 00:45:47,440
only bug we were seeing there so we now

1200
00:45:44,880 --> 00:45:48,318
have to look at other bugs uh find other

1201
00:45:47,440 --> 00:45:51,200
bugs

1202
00:45:48,318 --> 00:45:53,039
so you can see we can uh do like some

1203
00:45:51,199 --> 00:45:54,318
punching we're embedding into that wall

1204
00:45:53,039 --> 00:45:56,559
too far

1205
00:45:54,318 --> 00:45:58,079
uh and i'm not sure why so we probably

1206
00:45:56,559 --> 00:45:59,519
want to look at some of these things and

1207
00:45:58,079 --> 00:46:02,480
see it looks like there's some bugs in

1208
00:45:59,519 --> 00:46:05,119
that um that we want to get rid of

1209
00:46:02,480 --> 00:46:05,838
and again i think

1210
00:46:05,119 --> 00:46:08,640
so

1211
00:46:05,838 --> 00:46:10,559
my suspicion not knowing is that the

1212
00:46:08,639 --> 00:46:13,358
reason we can embed now

1213
00:46:10,559 --> 00:46:15,279
uh is because we are

1214
00:46:13,358 --> 00:46:17,759
allowing that

1215
00:46:15,280 --> 00:46:19,280
remember we just allow you to use

1216
00:46:17,760 --> 00:46:21,839
embedded cubes

1217
00:46:19,280 --> 00:46:25,280
uh and we don't want that anymore we

1218
00:46:21,838 --> 00:46:28,239
only want to allow embedded uh voxels if

1219
00:46:25,280 --> 00:46:30,079
you got there from an embedded voxel

1220
00:46:28,239 --> 00:46:32,318
we don't want you to start in unembedded

1221
00:46:30,079 --> 00:46:33,920
voxels and allow you to place yourself

1222
00:46:32,318 --> 00:46:37,279
in embedded voxels

1223
00:46:33,920 --> 00:46:38,960
um so we you know it's an issue uh so

1224
00:46:37,280 --> 00:46:41,359
what we wanna do now is work on these

1225
00:46:38,960 --> 00:46:42,639
bugs uh we wanna work on like that and

1226
00:46:41,358 --> 00:46:44,000
then we want to work on getting this

1227
00:46:42,639 --> 00:46:45,598
working because this is the whole reason

1228
00:46:44,000 --> 00:46:48,159
we added a more

1229
00:46:45,599 --> 00:46:49,920
um thorough search space here so like we

1230
00:46:48,159 --> 00:46:51,358
we may need to do some stuff for like

1231
00:46:49,920 --> 00:46:52,639
our corner roll

1232
00:46:51,358 --> 00:46:55,199
uh to

1233
00:46:52,639 --> 00:46:58,000
for example widen the voxel so that it

1234
00:46:55,199 --> 00:47:00,399
searches uh outside as well

1235
00:46:58,000 --> 00:47:01,760
uh like like a larger region for example

1236
00:47:00,400 --> 00:47:04,480
we might be able to fix the corner roll

1237
00:47:01,760 --> 00:47:06,480
off already by just adding inflating the

1238
00:47:04,480 --> 00:47:08,960
voxel size right

1239
00:47:06,480 --> 00:47:11,599
a little bit

1240
00:47:08,960 --> 00:47:13,280
from where it is so for example uh in in

1241
00:47:11,599 --> 00:47:16,240
this kind of thing here

1242
00:47:13,280 --> 00:47:19,839
we could do something where we say

1243
00:47:16,239 --> 00:47:22,239
uh the you know the optimal dim is like

1244
00:47:19,838 --> 00:47:25,119
two more than it was

1245
00:47:22,239 --> 00:47:27,759
and the min corner

1246
00:47:25,119 --> 00:47:30,079
um is like

1247
00:47:27,760 --> 00:47:32,319
you know

1248
00:47:30,079 --> 00:47:32,318
uh

1249
00:47:34,318 --> 00:47:40,960
the mid corner is like one seldom back

1250
00:47:38,318 --> 00:47:44,239
from where it should be

1251
00:47:40,960 --> 00:47:47,119
in fact i guess we don't really have to

1252
00:47:44,239 --> 00:47:48,558
to do that

1253
00:47:47,119 --> 00:47:50,559
right we could probably just subtract

1254
00:47:48,559 --> 00:47:52,160
the cell dim there

1255
00:47:50,559 --> 00:47:54,559
so that we're always searching like an

1256
00:47:52,159 --> 00:47:55,598
additional cell wide

1257
00:47:54,559 --> 00:47:58,319
uh

1258
00:47:55,599 --> 00:47:59,359
and and you know that might fix yeah it

1259
00:47:58,318 --> 00:48:02,000
does

1260
00:47:59,358 --> 00:48:03,920
um so i think that fixes the corner roll

1261
00:48:02,000 --> 00:48:06,000
off and so now i think the main thing we

1262
00:48:03,920 --> 00:48:08,400
have to change is just the embedding

1263
00:48:06,000 --> 00:48:10,000
problem and then also we have to fix

1264
00:48:08,400 --> 00:48:12,318
like the performance right because right

1265
00:48:10,000 --> 00:48:14,079
now it's absurdly expensive we're

1266
00:48:12,318 --> 00:48:16,800
checking all the entities in the world

1267
00:48:14,079 --> 00:48:18,880
for every corner of this glove

1268
00:48:16,800 --> 00:48:20,960
for every voxel square it's just it's

1269
00:48:18,880 --> 00:48:22,640
you know it's a testament to modern

1270
00:48:20,960 --> 00:48:25,199
computing that this runs as fast as it

1271
00:48:22,639 --> 00:48:26,318
does it's nuts that it's that fast uh

1272
00:48:25,199 --> 00:48:29,519
but hey

1273
00:48:26,318 --> 00:48:31,519
that's modern computing

1274
00:48:29,519 --> 00:48:34,239
uh so the embedding stuff is not gonna

1275
00:48:31,519 --> 00:48:38,000
fly uh so what we probably need to do

1276
00:48:34,239 --> 00:48:38,879
here is just say look it we start out

1277
00:48:38,000 --> 00:48:40,800
um

1278
00:48:38,880 --> 00:48:43,760
and we'll find out you know whether or

1279
00:48:40,800 --> 00:48:46,760
not we're embedded on the initial cell

1280
00:48:43,760 --> 00:48:46,760
um

1281
00:48:56,480 --> 00:49:01,159
so

1282
00:48:57,199 --> 00:49:01,159
we need something like

1283
00:49:02,000 --> 00:49:05,358
ah gosh i don't know

1284
00:49:09,920 --> 00:49:13,119
i'm not sure exactly how to freeze this

1285
00:49:11,760 --> 00:49:16,119
one

1286
00:49:13,119 --> 00:49:16,119
um

1287
00:49:20,559 --> 00:49:23,839
but it's probably like

1288
00:49:25,119 --> 00:49:28,480
you know i i probably want to do this

1289
00:49:26,639 --> 00:49:31,440
slightly differently

1290
00:49:28,480 --> 00:49:33,280
so this call here probably wants to be

1291
00:49:31,440 --> 00:49:35,280
something

1292
00:49:33,280 --> 00:49:37,760
uh that we do

1293
00:49:35,280 --> 00:49:41,599
as a function call

1294
00:49:37,760 --> 00:49:45,440
and we probably want to be able to do it

1295
00:49:41,599 --> 00:49:46,640
yeah in multiple places so

1296
00:49:45,440 --> 00:49:47,920
i think i'm going to do a couple things

1297
00:49:46,639 --> 00:49:51,519
here

1298
00:49:47,920 --> 00:49:53,838
the first i'm going to do is reduce the

1299
00:49:51,519 --> 00:49:56,000
i'm going to put in the thing

1300
00:49:53,838 --> 00:49:58,719
where we know whether we've tested a

1301
00:49:56,000 --> 00:50:00,559
particular voxel corner or not

1302
00:49:58,719 --> 00:50:00,809
um and then the other thing i'm going to

1303
00:50:00,559 --> 00:50:02,000
do

1304
00:50:00,809 --> 00:50:03,039
[Music]

1305
00:50:02,000 --> 00:50:05,039
is

1306
00:50:03,039 --> 00:50:06,558
i'm then going to like track the

1307
00:50:05,039 --> 00:50:12,519
embedding

1308
00:50:06,559 --> 00:50:12,519
so that the embedding is like known

1309
00:50:24,559 --> 00:50:27,040
like i think what i want to do is say

1310
00:50:26,079 --> 00:50:30,480
okay

1311
00:50:27,039 --> 00:50:33,679
once we have a an embedding type we

1312
00:50:30,480 --> 00:50:34,719
never allow you to move to a cell

1313
00:50:33,679 --> 00:50:36,960
uh

1314
00:50:34,719 --> 00:50:36,959
that

1315
00:50:37,920 --> 00:50:42,240
we we never allow you to move to a cell

1316
00:50:44,719 --> 00:50:46,959
that

1317
00:50:47,280 --> 00:50:52,319
is embedded if you have been embedded

1318
00:50:52,838 --> 00:50:57,759
right i'm sorry if you haven't been

1319
00:50:55,280 --> 00:50:59,599
embedded uh because this is the prop

1320
00:50:57,760 --> 00:51:01,359
this is the code that's the problem here

1321
00:50:59,599 --> 00:51:03,359
right so in other words if you turned

1322
00:51:01,358 --> 00:51:06,000
this off

1323
00:51:03,358 --> 00:51:09,920
my my argument is you will no longer

1324
00:51:06,000 --> 00:51:11,920
embed into walls that's my argument

1325
00:51:09,920 --> 00:51:13,920
you know we'll see maybe i'm i'm totally

1326
00:51:11,920 --> 00:51:17,240
wrong

1327
00:51:13,920 --> 00:51:17,240
about that

1328
00:51:22,559 --> 00:51:25,519
i guess i am totally wrong about that

1329
00:51:24,318 --> 00:51:27,519
hmm

1330
00:51:25,519 --> 00:51:29,519
all right so i guess i've got more

1331
00:51:27,519 --> 00:51:32,159
investigation to do here because this is

1332
00:51:29,519 --> 00:51:33,920
the thing that allows you to to uh that

1333
00:51:32,159 --> 00:51:36,159
i thought was the only reason you would

1334
00:51:33,920 --> 00:51:38,960
be allowed to embed so we have some

1335
00:51:36,159 --> 00:51:41,199
other problem here where we're allowing

1336
00:51:38,960 --> 00:51:43,280
embedding into things that probably we

1337
00:51:41,199 --> 00:51:44,719
shouldn't be allowing you to bet into

1338
00:51:43,280 --> 00:51:46,960
and i don't actually know where that's

1339
00:51:44,719 --> 00:51:48,799
coming from

1340
00:51:46,960 --> 00:51:51,838
it could be that this is getting checked

1341
00:51:48,800 --> 00:51:51,839
improperly somehow

1342
00:51:52,159 --> 00:51:57,039
that's certainly a possibility

1343
00:51:54,639 --> 00:51:59,199
meaning we're checking something we're

1344
00:51:57,039 --> 00:52:01,119
allowing you to move in a way that we

1345
00:51:59,199 --> 00:52:02,838
didn't actually check

1346
00:52:01,119 --> 00:52:06,318
that would be one

1347
00:52:02,838 --> 00:52:08,318
possibility so an example would be if we

1348
00:52:06,318 --> 00:52:09,838
checked a certain set of corners but

1349
00:52:08,318 --> 00:52:12,960
then allowed you to move in a direction

1350
00:52:09,838 --> 00:52:15,279
that did not inc that was uh using a

1351
00:52:12,960 --> 00:52:17,519
different set of corners right

1352
00:52:15,280 --> 00:52:19,920
so that would cause the problem it

1353
00:52:17,519 --> 00:52:20,880
doesn't really look like that

1354
00:52:19,920 --> 00:52:22,079
though

1355
00:52:20,880 --> 00:52:25,358
so

1356
00:52:22,079 --> 00:52:27,839
uh you know i'm not sure

1357
00:52:25,358 --> 00:52:29,679
why we would end up there for the

1358
00:52:27,838 --> 00:52:32,400
embedding part right you can see that

1359
00:52:29,679 --> 00:52:34,000
you know this would all be set you would

1360
00:52:32,400 --> 00:52:37,599
get this in bed count set if it was

1361
00:52:34,000 --> 00:52:39,599
going to uh here i so i don't

1362
00:52:37,599 --> 00:52:42,079
without clearing these i don't see how

1363
00:52:39,599 --> 00:52:45,559
you get into a voxel

1364
00:52:42,079 --> 00:52:45,559
that's closed

1365
00:52:52,239 --> 00:52:56,519
how does that happen

1366
00:53:00,719 --> 00:53:04,159
how does that happen

1367
00:53:11,358 --> 00:53:15,400
i do not know the answer

1368
00:53:25,440 --> 00:53:28,440
oh

1369
00:53:30,800 --> 00:53:34,160
well do i no i guess i don't

1370
00:53:38,079 --> 00:53:42,160
so there is one thing that happens here

1371
00:53:43,440 --> 00:53:48,318
which is that

1372
00:53:46,000 --> 00:53:51,119
if you ever did check

1373
00:53:48,318 --> 00:53:53,838
a square that was completely

1374
00:53:51,119 --> 00:53:56,720
embedded it will allow you to move

1375
00:53:53,838 --> 00:53:57,679
inside that square and maybe that's a

1376
00:53:56,719 --> 00:53:59,439
bug

1377
00:53:57,679 --> 00:54:01,519
but you shouldn't have ever considered

1378
00:53:59,440 --> 00:54:03,039
the square in the first place

1379
00:54:01,519 --> 00:54:04,880
so that part

1380
00:54:03,039 --> 00:54:06,480
seems a bit odd

1381
00:54:04,880 --> 00:54:08,720
um

1382
00:54:06,480 --> 00:54:11,719
but like for example

1383
00:54:08,719 --> 00:54:11,719
um

1384
00:54:17,440 --> 00:54:21,679
i can remove that from consideration by

1385
00:54:19,679 --> 00:54:23,440
adding this if statement so if for some

1386
00:54:21,679 --> 00:54:26,480
reason that were y

1387
00:54:23,440 --> 00:54:27,440
it was allowing that embedding to occur

1388
00:54:26,480 --> 00:54:30,000
uh

1389
00:54:27,440 --> 00:54:31,599
then now it won't i don't think that

1390
00:54:30,000 --> 00:54:32,559
should have been it though

1391
00:54:31,599 --> 00:54:34,079
so

1392
00:54:32,559 --> 00:54:35,440
i'm not expecting this to fix the

1393
00:54:34,079 --> 00:54:37,599
problem

1394
00:54:35,440 --> 00:54:39,358
but i feel like i should test it yeah so

1395
00:54:37,599 --> 00:54:40,160
you can clearly go straight on through

1396
00:54:39,358 --> 00:54:42,239
right

1397
00:54:40,159 --> 00:54:44,159
so what's going on there like how is it

1398
00:54:42,239 --> 00:54:46,558
able to walk through there i need to

1399
00:54:44,159 --> 00:54:48,318
like set up a good diagram here so i can

1400
00:54:46,559 --> 00:54:50,240
see what's going on because i'm not sure

1401
00:54:48,318 --> 00:54:51,440
the other weird thing is it does stop

1402
00:54:50,239 --> 00:54:54,239
the glove

1403
00:54:51,440 --> 00:54:56,639
so it it just weirdly like stops the

1404
00:54:54,239 --> 00:54:56,639
glove

1405
00:54:57,599 --> 00:54:59,920
inside

1406
00:54:58,880 --> 00:55:01,680
right

1407
00:54:59,920 --> 00:55:03,838
um i don't know if that means i've got

1408
00:55:01,679 --> 00:55:04,960
some kind of a like displacement error

1409
00:55:03,838 --> 00:55:07,440
here

1410
00:55:04,960 --> 00:55:09,920
um

1411
00:55:07,440 --> 00:55:11,440
but that's pretty strange right like i

1412
00:55:09,920 --> 00:55:13,760
don't know

1413
00:55:11,440 --> 00:55:15,679
i literally have no idea why that would

1414
00:55:13,760 --> 00:55:19,680
be the case because

1415
00:55:15,679 --> 00:55:21,519
we didn't change this collision function

1416
00:55:19,679 --> 00:55:22,639
possible that we're just checking the

1417
00:55:21,519 --> 00:55:23,838
wrong

1418
00:55:22,639 --> 00:55:25,679
places

1419
00:55:23,838 --> 00:55:28,000
seems odd though

1420
00:55:25,679 --> 00:55:28,000
um

1421
00:55:28,480 --> 00:55:33,199
so yeah i really

1422
00:55:30,318 --> 00:55:37,039
don't quite know

1423
00:55:33,199 --> 00:55:37,039
i i don't understand

1424
00:55:39,519 --> 00:55:44,079
oh yes i do wow yeah this code is

1425
00:55:42,239 --> 00:55:46,239
totally broken

1426
00:55:44,079 --> 00:55:47,519
so yeah this is busted here right

1427
00:55:46,239 --> 00:55:49,519
because

1428
00:55:47,519 --> 00:55:52,239
it's it's not vox

1429
00:55:49,519 --> 00:55:53,119
it's not voxel in corner right

1430
00:55:52,239 --> 00:55:56,159
um

1431
00:55:53,119 --> 00:55:56,160
it's cell dot min

1432
00:55:56,880 --> 00:56:03,838
right um so that that's also i don't

1433
00:56:00,079 --> 00:56:03,839
know how that ever worked

1434
00:56:07,199 --> 00:56:09,439
i

1435
00:56:08,000 --> 00:56:10,480
yeah that that doesn't really make any

1436
00:56:09,440 --> 00:56:13,480
sense

1437
00:56:10,480 --> 00:56:13,480
um

1438
00:56:19,519 --> 00:56:24,480
uh okay well yeah i mean that was an

1439
00:56:22,159 --> 00:56:26,558
easy bug to fix so

1440
00:56:24,480 --> 00:56:27,519
hey surprise surprise now we don't embed

1441
00:56:26,559 --> 00:56:29,040
anymore

1442
00:56:27,519 --> 00:56:30,639
um all right so we still have a ton of

1443
00:56:29,039 --> 00:56:32,880
work to do though i mean just because we

1444
00:56:30,639 --> 00:56:34,480
fixed that um

1445
00:56:32,880 --> 00:56:36,880
now there's at least no mystery there i

1446
00:56:34,480 --> 00:56:37,838
wonder if we can do roll off here but

1447
00:56:36,880 --> 00:56:39,039
yeah

1448
00:56:37,838 --> 00:56:40,639
yeah we can

1449
00:56:39,039 --> 00:56:43,279
um although that looks like someone got

1450
00:56:40,639 --> 00:56:45,838
stuck there

1451
00:56:43,280 --> 00:56:45,839
what happened there

1452
00:56:52,000 --> 00:56:56,960
so that doesn't make a lot of sense i'm

1453
00:56:54,318 --> 00:56:58,079
not sure why that's stuck

1454
00:56:56,960 --> 00:57:01,440
so we still have some additional

1455
00:56:58,079 --> 00:57:01,440
problems there like that doesn't look

1456
00:57:04,719 --> 00:57:07,598
that doesn't look like a problem at all

1457
00:57:06,239 --> 00:57:08,879
like it should seems like it should be

1458
00:57:07,599 --> 00:57:10,079
able to search

1459
00:57:08,880 --> 00:57:11,200
just fine

1460
00:57:10,079 --> 00:57:13,680
right

1461
00:57:11,199 --> 00:57:15,039
um

1462
00:57:13,679 --> 00:57:16,719
so that looks like it that looks like

1463
00:57:15,039 --> 00:57:18,960
there was a problem where it did put it

1464
00:57:16,719 --> 00:57:19,919
inside something maybe i don't know so

1465
00:57:18,960 --> 00:57:21,679
it's like we still have a couple

1466
00:57:19,920 --> 00:57:22,798
problems there i'm not not comfortable

1467
00:57:21,679 --> 00:57:25,759
with that because that should not have

1468
00:57:22,798 --> 00:57:28,239
happened even at this stage so we still

1469
00:57:25,760 --> 00:57:30,160
got some nastiness going on here i would

1470
00:57:28,239 --> 00:57:31,838
wager

1471
00:57:30,159 --> 00:57:33,118
um

1472
00:57:31,838 --> 00:57:34,239
okay

1473
00:57:33,119 --> 00:57:36,240
so

1474
00:57:34,239 --> 00:57:41,039
uh this

1475
00:57:36,239 --> 00:57:42,479
probably can come back in now so don't

1476
00:57:41,039 --> 00:57:44,159
think you should ever get to one where

1477
00:57:42,480 --> 00:57:46,880
you're embedded

1478
00:57:44,159 --> 00:57:48,558
uh unless you started out there

1479
00:57:46,880 --> 00:57:49,920
and uh

1480
00:57:48,559 --> 00:57:52,000
i think we should probably fix some

1481
00:57:49,920 --> 00:57:52,880
performance things now really quickly we

1482
00:57:52,000 --> 00:57:54,880
probably don't have to do the full

1483
00:57:52,880 --> 00:57:57,920
spatial partition part

1484
00:57:54,880 --> 00:57:58,798
um but yeah like we should probably

1485
00:57:57,920 --> 00:58:00,960
uh

1486
00:57:58,798 --> 00:58:03,679
we should probably at least try

1487
00:58:00,960 --> 00:58:06,480
to only test those voxels once so that

1488
00:58:03,679 --> 00:58:08,879
it's not so sluggish because like we're

1489
00:58:06,480 --> 00:58:10,719
testing so many corners at that point uh

1490
00:58:08,880 --> 00:58:12,559
that it could become pretty expensive

1491
00:58:10,719 --> 00:58:14,798
right

1492
00:58:12,559 --> 00:58:17,680
we could also decide to reduce the total

1493
00:58:14,798 --> 00:58:19,358
number from like maybe like 16 by 16 is

1494
00:58:17,679 --> 00:58:21,679
is way too much right you can see how

1495
00:58:19,358 --> 00:58:23,358
large of a region that is uh and maybe

1496
00:58:21,679 --> 00:58:25,039
that's just a bad idea but there's so

1497
00:58:23,358 --> 00:58:26,639
many things we can do performance wise

1498
00:58:25,039 --> 00:58:29,279
here that i'm not sure we need to really

1499
00:58:26,639 --> 00:58:31,440
worry about that because once we uh put

1500
00:58:29,280 --> 00:58:33,119
in yeah like look at that so you can see

1501
00:58:31,440 --> 00:58:35,440
that that get got stuck there i don't

1502
00:58:33,119 --> 00:58:36,798
know what's going on there i like that

1503
00:58:35,440 --> 00:58:38,639
there's a weird

1504
00:58:36,798 --> 00:58:40,318
sticking thing that happens in this

1505
00:58:38,639 --> 00:58:41,838
doorway that doesn't make a lot of sense

1506
00:58:40,318 --> 00:58:43,920
to me so we gotta take a look at what's

1507
00:58:41,838 --> 00:58:46,159
happening there um because that because

1508
00:58:43,920 --> 00:58:47,039
i don't know right

1509
00:58:46,159 --> 00:58:49,920
um

1510
00:58:47,039 --> 00:58:53,318
but otherwise the other parts of it seem

1511
00:58:49,920 --> 00:58:53,318
pretty good

1512
00:59:15,920 --> 00:59:20,880
so i think it's all fine uh

1513
00:59:18,639 --> 00:59:22,960
uh other than that one weirdness there

1514
00:59:20,880 --> 00:59:24,880
the rest looks fine so i guess we just

1515
00:59:22,960 --> 00:59:26,880
continued down this road and let's start

1516
00:59:24,880 --> 00:59:27,760
to try and clean up

1517
00:59:26,880 --> 00:59:29,039
uh

1518
00:59:27,760 --> 00:59:30,960
the rest of the stuff we've got here

1519
00:59:29,039 --> 00:59:33,440
that's kind of janky

1520
00:59:30,960 --> 00:59:35,760
um so the first thing that we could do

1521
00:59:33,440 --> 00:59:36,880
like i said is we could push this stuff

1522
00:59:35,760 --> 00:59:39,119
um

1523
00:59:36,880 --> 00:59:42,079
in a better order

1524
00:59:39,119 --> 00:59:42,079
the problem with that

1525
00:59:44,400 --> 00:59:47,838
the only problem with that is

1526
00:59:49,519 --> 00:59:53,599
i'd have to make sure i have to think

1527
00:59:51,599 --> 00:59:55,760
about it but i think because it's a push

1528
00:59:53,599 --> 00:59:57,599
stack i think that's okay we should be

1529
00:59:55,760 --> 01:00:01,799
able to just as long as we push things

1530
00:59:57,599 --> 01:00:01,798
in the order we want to try them

1531
01:00:03,119 --> 01:00:06,400
i think it should just work

1532
01:00:08,079 --> 01:00:11,680
so so i think

1533
01:00:10,239 --> 01:00:16,639
if we

1534
01:00:11,679 --> 01:00:16,639
if we change this here um

1535
01:00:18,400 --> 01:00:22,079
if we just change this to like

1536
01:00:25,679 --> 01:00:29,838
well no

1537
01:00:26,719 --> 01:00:29,838
i'm trying to think

1538
01:00:31,838 --> 01:00:35,679
so if we if we do what we have written

1539
01:00:34,318 --> 01:00:37,440
now might just try them in the right

1540
01:00:35,679 --> 01:00:38,239
order to begin with

1541
01:00:37,440 --> 01:00:40,880
so

1542
01:00:38,239 --> 01:00:44,719
uh the only thing we would need to do

1543
01:00:40,880 --> 01:00:46,480
here is we would need to early out if we

1544
01:00:44,719 --> 01:00:48,399
actually found the location we were

1545
01:00:46,480 --> 01:00:51,119
going right

1546
01:00:48,400 --> 01:00:53,599
so if the best distance squared

1547
01:00:51,119 --> 01:00:56,640
like drops to zero then we would just

1548
01:00:53,599 --> 01:00:58,000
exit right so like if best distance

1549
01:00:56,639 --> 01:01:01,118
squared

1550
01:00:58,000 --> 01:01:01,119
is uh zero

1551
01:01:01,679 --> 01:01:03,679
um

1552
01:01:02,030 --> 01:01:06,480
[Music]

1553
01:01:03,679 --> 01:01:06,480
or even like

1554
01:01:09,679 --> 01:01:13,440
yeah i mean i don't know exactly what we

1555
01:01:11,519 --> 01:01:15,838
want to do it maybe even something

1556
01:01:13,440 --> 01:01:17,679
higher than zero is okay but anything

1557
01:01:15,838 --> 01:01:20,480
close enough like that

1558
01:01:17,679 --> 01:01:22,078
um we could probably just stop at that

1559
01:01:20,480 --> 01:01:24,559
point right

1560
01:01:22,079 --> 01:01:25,760
um so if you can find the location that

1561
01:01:24,559 --> 01:01:28,559
you're going to you don't have to

1562
01:01:25,760 --> 01:01:30,640
continue to check places right

1563
01:01:28,559 --> 01:01:32,400
um

1564
01:01:30,639 --> 01:01:34,000
it also seems like we're kind of allowed

1565
01:01:32,400 --> 01:01:35,200
to get embedded in the hero a little bit

1566
01:01:34,000 --> 01:01:36,559
there so it's like again there's some

1567
01:01:35,199 --> 01:01:39,118
really weird stuff going on so i think

1568
01:01:36,559 --> 01:01:40,960
we've still got more bugs

1569
01:01:39,119 --> 01:01:44,358
that we need to work on but

1570
01:01:40,960 --> 01:01:44,358
you know we'll see

1571
01:01:52,960 --> 01:01:56,960
like so in that you can see an example

1572
01:01:55,039 --> 01:01:58,160
of kind of what's a little weird here

1573
01:01:56,960 --> 01:02:00,559
and this is why i'm saying i think

1574
01:01:58,159 --> 01:02:02,000
there's some

1575
01:02:00,559 --> 01:02:04,839
jankiness so like

1576
01:02:02,000 --> 01:02:06,559
if you look at what's happening there

1577
01:02:04,838 --> 01:02:09,119
right

1578
01:02:06,559 --> 01:02:11,599
um and in fact i think we have you know

1579
01:02:09,119 --> 01:02:13,920
we have better ways of looking at this

1580
01:02:11,599 --> 01:02:13,920
uh

1581
01:02:16,079 --> 01:02:20,240
i want to say we can do that

1582
01:02:18,639 --> 01:02:22,318
yeah

1583
01:02:20,239 --> 01:02:25,358
um so if you take a look at what's

1584
01:02:22,318 --> 01:02:27,920
happening here you can see why like i'm

1585
01:02:25,358 --> 01:02:30,000
pretty sure something's broken

1586
01:02:27,920 --> 01:02:32,159
and the reason for that is this is a

1587
01:02:30,000 --> 01:02:34,400
straight linear move

1588
01:02:32,159 --> 01:02:36,558
it doesn't really need to look at

1589
01:02:34,400 --> 01:02:38,480
any of these other cells

1590
01:02:36,559 --> 01:02:40,720
right it can just look at the ones as it

1591
01:02:38,480 --> 01:02:41,920
goes and then it gets to a place where

1592
01:02:40,719 --> 01:02:44,879
it's

1593
01:02:41,920 --> 01:02:48,079
basically as close as it can so

1594
01:02:44,880 --> 01:02:50,480
you know once you're outside it so here

1595
01:02:48,079 --> 01:02:52,400
now i could understand why it's not

1596
01:02:50,480 --> 01:02:54,798
because if you're trying to place it

1597
01:02:52,400 --> 01:02:57,039
outside

1598
01:02:54,798 --> 01:02:58,960
uh then it would get here and go oh well

1599
01:02:57,039 --> 01:03:01,119
i haven't reached zero just you know

1600
01:02:58,960 --> 01:03:03,358
difference in destination

1601
01:03:01,119 --> 01:03:04,798
um you know so i'll keep going or

1602
01:03:03,358 --> 01:03:07,038
something like that

1603
01:03:04,798 --> 01:03:08,639
uh but

1604
01:03:07,039 --> 01:03:10,960
you know even in that i could change the

1605
01:03:08,639 --> 01:03:12,798
the criteria to fix that but

1606
01:03:10,960 --> 01:03:14,798
if we look at the rest of these it's

1607
01:03:12,798 --> 01:03:16,239
like why are we testing all of these we

1608
01:03:14,798 --> 01:03:19,038
shouldn't ever have had to if we're

1609
01:03:16,239 --> 01:03:20,399
actually going in that stepping order

1610
01:03:19,039 --> 01:03:21,760
um

1611
01:03:20,400 --> 01:03:24,160
and so if you look at this it's like

1612
01:03:21,760 --> 01:03:27,280
well the problem here is that we don't

1613
01:03:24,159 --> 01:03:31,038
actually go towards sort of the most

1614
01:03:27,280 --> 01:03:32,079
like we push these three in really any

1615
01:03:31,039 --> 01:03:34,400
order

1616
01:03:32,079 --> 01:03:36,318
uh so we may always push like the

1617
01:03:34,400 --> 01:03:38,639
leftward moving one which we would

1618
01:03:36,318 --> 01:03:41,838
because it's side x is first

1619
01:03:38,639 --> 01:03:43,199
if it's a y move we push the x one first

1620
01:03:41,838 --> 01:03:44,480
that's going to go

1621
01:03:43,199 --> 01:03:46,879
in a direction we didn't actually need

1622
01:03:44,480 --> 01:03:46,880
it to go

1623
01:04:07,280 --> 01:04:10,960
and so the problem is we're then going

1624
01:04:08,639 --> 01:04:14,239
to search off of that search for the

1625
01:04:10,960 --> 01:04:16,159
whole time so we need a better way

1626
01:04:14,239 --> 01:04:19,279
of pushing these on there that pushes

1627
01:04:16,159 --> 01:04:20,639
the one that's going to be like closest

1628
01:04:19,280 --> 01:04:21,599
first

1629
01:04:20,639 --> 01:04:24,719
um

1630
01:04:21,599 --> 01:04:27,519
instead of the other way round you know

1631
01:04:24,719 --> 01:04:29,598
what i'm saying um so we probably want

1632
01:04:27,519 --> 01:04:31,679
to fix that as well and we'll take a

1633
01:04:29,599 --> 01:04:34,480
look at how to do that in a second

1634
01:04:31,679 --> 01:04:36,639
in the meantime what i'd like to do is

1635
01:04:34,480 --> 01:04:38,480
when we do this check i feel like this

1636
01:04:36,639 --> 01:04:39,679
could probably be done better as well

1637
01:04:38,480 --> 01:04:42,400
instead of looking at the best distance

1638
01:04:39,679 --> 01:04:45,358
squared perhaps the thing to do would be

1639
01:04:42,400 --> 01:04:45,358
to look at like

1640
01:04:45,920 --> 01:04:52,318
the distance from the actual cell

1641
01:04:50,880 --> 01:04:55,200
like

1642
01:04:52,318 --> 01:04:57,519
you know there's going to be an ending

1643
01:04:55,199 --> 01:04:57,519
cell

1644
01:05:00,719 --> 01:05:08,358
so get index for p

1645
01:05:03,760 --> 01:05:08,359
um in the voxel grid

1646
01:05:14,719 --> 01:05:19,759
it looks like this doesn't actually

1647
01:05:16,719 --> 01:05:19,759
clamp though

1648
01:05:20,400 --> 01:05:25,200
so we'd we probably want to clamp that

1649
01:05:30,318 --> 01:05:32,318
yeah i'm not sure i feel like that

1650
01:05:31,440 --> 01:05:34,880
anyway

1651
01:05:32,318 --> 01:05:36,719
um when we look at like the places that

1652
01:05:34,880 --> 01:05:39,200
we're going to end up so you know we did

1653
01:05:36,719 --> 01:05:40,558
the initial p here right

1654
01:05:39,199 --> 01:05:44,960
um and

1655
01:05:40,559 --> 01:05:44,960
we would have like a target cell eye

1656
01:05:47,760 --> 01:05:52,880
and like we would want to clamp this so

1657
01:05:50,480 --> 01:05:54,798
like we want to clamp this to

1658
01:05:52,880 --> 01:05:56,720
the voxel

1659
01:05:54,798 --> 01:05:58,639
you know what i mean

1660
01:05:56,719 --> 01:06:02,159
um and i don't know

1661
01:05:58,639 --> 01:06:02,159
like i don't actually see

1662
01:06:03,599 --> 01:06:07,519
a function for that

1663
01:06:05,519 --> 01:06:10,519
which we would want

1664
01:06:07,519 --> 01:06:10,519
so

1665
01:06:24,079 --> 01:06:26,880
yeah i mean

1666
01:06:31,280 --> 01:06:34,798
so i think i would want one in here

1667
01:06:32,798 --> 01:06:37,199
which is like

1668
01:06:34,798 --> 01:06:40,400
clamped to

1669
01:06:37,199 --> 01:06:40,399
boxeldem or something

1670
01:06:42,480 --> 01:06:46,760
where you pass in an index

1671
01:06:46,880 --> 01:06:51,960
and

1672
01:06:47,920 --> 01:06:51,960
it just clamps the index

1673
01:07:06,239 --> 01:07:10,078
i would like one of these

1674
01:07:08,639 --> 01:07:14,960
that

1675
01:07:10,079 --> 01:07:16,798
was s32 yeah so you can see here right

1676
01:07:14,960 --> 01:07:19,039
we should just be able to do

1677
01:07:16,798 --> 01:07:19,038
like

1678
01:07:22,000 --> 01:07:25,480
something like this

1679
01:07:31,119 --> 01:07:33,760
cell count

1680
01:07:39,519 --> 01:07:43,838
so here i can just clamp this thing

1681
01:07:44,639 --> 01:07:49,440
and know that it's inside

1682
01:07:46,960 --> 01:07:51,389
and i feel like we want that right so we

1683
01:07:49,440 --> 01:07:53,920
want to do a clamp to voxel dim

1684
01:07:51,389 --> 01:07:55,440
[Music]

1685
01:07:53,920 --> 01:07:59,519
when we're doing the simulation so we

1686
01:07:55,440 --> 01:07:59,519
can just do like clamp to voxel dim

1687
01:08:00,239 --> 01:08:03,919
right

1688
01:08:01,440 --> 01:08:04,798
on both of these

1689
01:08:03,920 --> 01:08:06,639
so

1690
01:08:04,798 --> 01:08:08,079
we don't really need to clamp the from p

1691
01:08:06,639 --> 01:08:10,798
because we know it was included but the

1692
01:08:08,079 --> 01:08:12,240
2p might be outside and we want to we

1693
01:08:10,798 --> 01:08:13,679
want to clamp that

1694
01:08:12,239 --> 01:08:14,479
right

1695
01:08:13,679 --> 01:08:15,519
so

1696
01:08:14,480 --> 01:08:16,719
uh

1697
01:08:15,519 --> 01:08:21,119
we do

1698
01:08:16,719 --> 01:08:24,560
and then we can check for equivalence

1699
01:08:21,119 --> 01:08:26,399
so basically like when we're in here

1700
01:08:24,560 --> 01:08:27,520
we should be able to say

1701
01:08:26,399 --> 01:08:28,798
all right

1702
01:08:27,520 --> 01:08:31,440
if

1703
01:08:28,798 --> 01:08:31,439
r equal

1704
01:08:32,158 --> 01:08:36,479
the target cell i and the best cell i

1705
01:08:36,838 --> 01:08:41,359
um we'll just say that that's good

1706
01:08:39,439 --> 01:08:43,198
enough for terminating the search

1707
01:08:41,359 --> 01:08:44,640
and maybe it is maybe it isn't maybe we

1708
01:08:43,198 --> 01:08:46,158
shouldn't really do that

1709
01:08:44,640 --> 01:08:47,679
um we'll have to look

1710
01:08:46,158 --> 01:08:50,479
uh and see

1711
01:08:47,679 --> 01:08:52,399
um but you know hopefully it is

1712
01:08:50,479 --> 01:08:54,718
uh and you can see like already even

1713
01:08:52,399 --> 01:08:57,039
just that it does produce

1714
01:08:54,719 --> 01:08:58,560
some reduced ones in ones where they

1715
01:08:57,039 --> 01:09:00,319
happen to push in the right order you

1716
01:08:58,560 --> 01:09:03,039
can see there are some there that only

1717
01:09:00,319 --> 01:09:05,039
do that don't do the whole thick uh

1718
01:09:03,039 --> 01:09:08,238
testing right

1719
01:09:05,039 --> 01:09:08,238
so so that's a start

1720
01:09:08,479 --> 01:09:12,079
it's not an end

1721
01:09:11,039 --> 01:09:14,238
um

1722
01:09:12,079 --> 01:09:16,559
so a couple of the things that problems

1723
01:09:14,238 --> 01:09:18,879
we have here i i don't know

1724
01:09:16,560 --> 01:09:20,880
i need to make sure that this is always

1725
01:09:18,880 --> 01:09:22,000
so flumpy now yeah

1726
01:09:20,880 --> 01:09:24,319
i need to make sure this is always

1727
01:09:22,000 --> 01:09:26,798
producing the same voxel regions

1728
01:09:24,319 --> 01:09:26,798
properly

1729
01:09:33,198 --> 01:09:36,559
which i think it should do

1730
01:09:47,600 --> 01:09:49,838
um

1731
01:10:00,399 --> 01:10:03,839
so i think that's a more correct way to

1732
01:10:02,079 --> 01:10:06,640
phrase that

1733
01:10:03,840 --> 01:10:08,640
so we we take and we produce the you

1734
01:10:06,640 --> 01:10:10,880
know the minimum sort of including area

1735
01:10:08,640 --> 01:10:10,880
there

1736
01:10:10,960 --> 01:10:17,198
uh but it's inflated by one

1737
01:10:14,238 --> 01:10:18,319
right

1738
01:10:17,198 --> 01:10:21,198
yeah

1739
01:10:18,319 --> 01:10:23,920
um so i mean like yeah like how does

1740
01:10:21,198 --> 01:10:25,759
that happen i have no idea right so

1741
01:10:23,920 --> 01:10:26,880
we've got some pretty serious bugs in

1742
01:10:25,760 --> 01:10:27,920
here

1743
01:10:26,880 --> 01:10:31,840
um

1744
01:10:27,920 --> 01:10:31,840
that we're gonna have to roll through

1745
01:10:32,079 --> 01:10:35,909
because i have no idea

1746
01:10:34,000 --> 01:10:37,198
so we then want to

1747
01:10:35,909 --> 01:10:39,760
[Music]

1748
01:10:37,198 --> 01:10:43,439
yeah so we've got the initial cell i

1749
01:10:39,760 --> 01:10:45,360
and the target cell i those are both

1750
01:10:43,439 --> 01:10:48,479
those are both fine

1751
01:10:45,359 --> 01:10:50,559
uh and we start in that initial cell

1752
01:10:48,479 --> 01:10:52,559
and that's also our best cell because

1753
01:10:50,560 --> 01:10:56,080
you know that's we assume that you don't

1754
01:10:52,560 --> 01:10:57,280
move if we don't find anything better

1755
01:10:56,079 --> 01:11:00,319
um

1756
01:10:57,279 --> 01:11:04,319
so yeah so now i don't really know

1757
01:11:00,319 --> 01:11:06,399
uh i don't know how we're producing

1758
01:11:04,319 --> 01:11:07,679
uh

1759
01:11:06,399 --> 01:11:08,719
how we're producing like those

1760
01:11:07,679 --> 01:11:10,960
embeddings

1761
01:11:08,719 --> 01:11:13,439
i really wish i could tell and again you

1762
01:11:10,960 --> 01:11:15,359
know it's a it's a problem of debugging

1763
01:11:13,439 --> 01:11:17,759
code where like we just don't have a lot

1764
01:11:15,359 --> 01:11:19,679
of time on handmade hero to produce

1765
01:11:17,760 --> 01:11:21,360
things that you know

1766
01:11:19,679 --> 01:11:23,440
would tell us much about what was going

1767
01:11:21,359 --> 01:11:25,359
on here right but you can see it allowed

1768
01:11:23,439 --> 01:11:27,519
it to put it all the way over there i've

1769
01:11:25,359 --> 01:11:29,039
no idea how that's possible it doesn't

1770
01:11:27,520 --> 01:11:30,800
even

1771
01:11:29,039 --> 01:11:33,119
it means we've got like just a severe

1772
01:11:30,800 --> 01:11:35,039
typo or something because the actual

1773
01:11:33,119 --> 01:11:36,960
activity of the algorithm should never

1774
01:11:35,039 --> 01:11:37,760
be able to produce anything like that

1775
01:11:36,960 --> 01:11:39,760
um

1776
01:11:37,760 --> 01:11:42,640
it should be basically impossible

1777
01:11:39,760 --> 01:11:44,800
so we know we've got a fairly severe

1778
01:11:42,640 --> 01:11:47,039
problem going on in here

1779
01:11:44,800 --> 01:11:50,039
we just don't know what it is

1780
01:11:47,039 --> 01:11:50,039
and

1781
01:12:03,920 --> 01:12:06,920
um

1782
01:12:19,279 --> 01:12:22,399
you know the thing that would really

1783
01:12:20,719 --> 01:12:24,560
help again is if there was some way i

1784
01:12:22,399 --> 01:12:27,039
could reproduce this and i suppose there

1785
01:12:24,560 --> 01:12:29,360
is in a sense

1786
01:12:27,039 --> 01:12:29,359
um

1787
01:12:33,600 --> 01:12:36,800
but again we just don't have like on the

1788
01:12:35,279 --> 01:12:38,158
witness i made really good tools for

1789
01:12:36,800 --> 01:12:41,119
this that was the only reason i was able

1790
01:12:38,158 --> 01:12:42,158
to get that system really nice and

1791
01:12:41,119 --> 01:12:43,840
good

1792
01:12:42,158 --> 01:12:46,319
um because what you need is you need the

1793
01:12:43,840 --> 01:12:47,360
ability to record and then single step

1794
01:12:46,319 --> 01:12:51,279
through

1795
01:12:47,359 --> 01:12:52,719
uh and we just don't have that um

1796
01:12:51,279 --> 01:12:54,079
you need to be able to see like what

1797
01:12:52,719 --> 01:12:55,920
just happened there

1798
01:12:54,079 --> 01:12:57,920
right so you can step through and see

1799
01:12:55,920 --> 01:12:59,840
each individual one and it's always

1800
01:12:57,920 --> 01:13:00,880
something stupid it's usually not hard

1801
01:12:59,840 --> 01:13:02,319
to fix

1802
01:13:00,880 --> 01:13:03,679
but without being able to step through

1803
01:13:02,319 --> 01:13:05,279
it's almost impossible to tell what the

1804
01:13:03,679 --> 01:13:07,039
heck is going on

1805
01:13:05,279 --> 01:13:08,960
uh in each individual thing now we do

1806
01:13:07,039 --> 01:13:11,119
have the ability to to single step

1807
01:13:08,960 --> 01:13:13,119
without recording but that's not really

1808
01:13:11,119 --> 01:13:14,158
going to help us here right

1809
01:13:13,119 --> 01:13:17,359
um

1810
01:13:14,158 --> 01:13:20,319
i mean maybe it will

1811
01:13:17,359 --> 01:13:22,399
um i'm not really sure

1812
01:13:20,319 --> 01:13:26,000
but i can try it

1813
01:13:22,399 --> 01:13:28,399
so if i turn on single stepping here

1814
01:13:26,000 --> 01:13:31,039
and i push into you can see it doesn't

1815
01:13:28,399 --> 01:13:31,039
really

1816
01:13:31,520 --> 01:13:36,440
produce much there

1817
01:13:33,439 --> 01:13:36,439
um

1818
01:13:51,840 --> 01:13:56,239
that's zoom

1819
01:13:53,679 --> 01:13:56,239
what the heck

1820
01:13:56,399 --> 01:14:01,839
i thought zoom was does rotate what's

1821
01:13:58,880 --> 01:14:01,840
going on here

1822
01:14:04,319 --> 01:14:07,679
how did that end up being rotate

1823
01:14:07,920 --> 01:14:11,520
so confused about the camera controls

1824
01:14:09,279 --> 01:14:14,759
right now i thought alt

1825
01:14:11,520 --> 01:14:14,760
was rotate

1826
01:14:29,039 --> 01:14:32,479
what did i do

1827
01:14:30,640 --> 01:14:36,840
so i've managed to completely forget

1828
01:14:32,479 --> 01:14:36,839
what our keys even are

1829
01:14:42,158 --> 01:14:45,359
oh weird okay

1830
01:14:46,640 --> 01:14:51,039
i see yeah told you you get old you

1831
01:14:49,039 --> 01:14:53,359
forget things um

1832
01:14:51,039 --> 01:14:55,600
anyway

1833
01:14:53,359 --> 01:14:57,439
uh so looking at this right uh from the

1834
01:14:55,600 --> 01:15:00,400
side here

1835
01:14:57,439 --> 01:15:02,960
and if i switch to

1836
01:15:00,399 --> 01:15:02,960
single step

1837
01:15:04,880 --> 01:15:07,920
like you can see there like like what

1838
01:15:06,560 --> 01:15:09,039
even happened

1839
01:15:07,920 --> 01:15:11,840
right

1840
01:15:09,039 --> 01:15:11,840
um

1841
01:15:15,520 --> 01:15:21,600
it's it's totally like incorrect

1842
01:15:18,238 --> 01:15:25,279
in many ways right so you can see that

1843
01:15:21,600 --> 01:15:27,840
like it picked this square

1844
01:15:25,279 --> 01:15:28,719
as the starting square as far as i can

1845
01:15:27,840 --> 01:15:30,640
tell

1846
01:15:28,719 --> 01:15:33,520
but the rule is that the voxel is

1847
01:15:30,640 --> 01:15:36,079
supposed to be one bigger than

1848
01:15:33,520 --> 01:15:38,320
right it's supposed to be one more on

1849
01:15:36,079 --> 01:15:40,158
the side of the starting square and

1850
01:15:38,319 --> 01:15:42,479
totally isn't

1851
01:15:40,158 --> 01:15:42,479
um

1852
01:15:43,119 --> 01:15:47,840
so this is just like completely wrong

1853
01:15:45,520 --> 01:15:50,840
and i have no idea why

1854
01:15:47,840 --> 01:15:50,840
um

1855
01:15:54,319 --> 01:15:58,960
i guess one reason why is this probably

1856
01:15:56,719 --> 01:16:02,480
shouldn't be a floor

1857
01:15:58,960 --> 01:16:02,480
it should probably be around

1858
01:16:04,079 --> 01:16:07,840
of course i don't know if we have that

1859
01:16:30,479 --> 01:16:34,319
so we actually

1860
01:16:32,079 --> 01:16:37,279
have it we just only have it if we round

1861
01:16:34,319 --> 01:16:40,079
to integer for no reason

1862
01:16:37,279 --> 01:16:40,079
so you know

1863
01:16:41,840 --> 01:16:45,760
we could

1864
01:16:44,399 --> 01:16:47,519
just have it

1865
01:16:45,760 --> 01:16:51,000
which we should

1866
01:16:47,520 --> 01:16:51,000
so there you go

1867
01:17:02,560 --> 01:17:05,840
now i don't really remember

1868
01:17:10,880 --> 01:17:15,440
to be honest i don't remember

1869
01:17:13,520 --> 01:17:18,239
for round ss

1870
01:17:15,439 --> 01:17:21,198
i don't remember what the actual

1871
01:17:18,238 --> 01:17:24,639
uh thing you pass is because it's like a

1872
01:17:21,198 --> 01:17:26,879
weird like mm round thing

1873
01:17:24,640 --> 01:17:28,960
uh that

1874
01:17:26,880 --> 01:17:31,840
you know the intel

1875
01:17:28,960 --> 01:17:31,840
uh

1876
01:17:32,158 --> 01:17:36,639
naming scheme for these things are is so

1877
01:17:34,800 --> 01:17:38,000
bad that it's like impossible to

1878
01:17:36,640 --> 01:17:40,239
remember

1879
01:17:38,000 --> 01:17:42,000
um and i don't even know if it's

1880
01:17:40,238 --> 01:17:43,279
documented in here

1881
01:17:42,000 --> 01:17:45,039
we may have to look it up somewhere else

1882
01:17:43,279 --> 01:17:47,840
no it is there we go

1883
01:17:45,039 --> 01:17:50,000
um so we want basically like this

1884
01:17:47,840 --> 01:17:51,360
rounding mode which is rounding to

1885
01:17:50,000 --> 01:17:53,600
nearest

1886
01:17:51,359 --> 01:17:53,599
um

1887
01:17:56,000 --> 01:18:00,319
i believe we just want that

1888
01:17:58,880 --> 01:18:01,119
for the way that we're producing the

1889
01:18:00,319 --> 01:18:02,479
cell

1890
01:18:01,119 --> 01:18:04,479
boundaries

1891
01:18:02,479 --> 01:18:05,678
right

1892
01:18:04,479 --> 01:18:10,000
um

1893
01:18:05,679 --> 01:18:10,000
so i guess there is there no round ss

1894
01:18:10,079 --> 01:18:13,840
it's right there

1895
01:18:11,279 --> 01:18:15,920
all right um so that's fine uh and i

1896
01:18:13,840 --> 01:18:18,719
guess we gotta pass the like

1897
01:18:15,920 --> 01:18:20,079
uh set zero

1898
01:18:18,719 --> 01:18:21,679
to this thing

1899
01:18:20,079 --> 01:18:24,800
uh as well

1900
01:18:21,679 --> 01:18:27,440
so i think that's all good

1901
01:18:24,800 --> 01:18:29,760
that would be our rounding function

1902
01:18:27,439 --> 01:18:29,759
um

1903
01:18:36,800 --> 01:18:39,039
yeah

1904
01:18:39,119 --> 01:18:42,399
that all seems good

1905
01:18:40,479 --> 01:18:46,319
uh so all we need then is we just need

1906
01:18:42,399 --> 01:18:47,839
to like actually export this value uh so

1907
01:18:46,319 --> 01:18:49,679
we would need a

1908
01:18:47,840 --> 01:18:51,679
yeah um

1909
01:18:49,679 --> 01:18:54,880
an mm convert

1910
01:18:51,679 --> 01:18:56,319
ss f32 to extract it out of the register

1911
01:18:54,880 --> 01:18:58,239
even though it doesn't come out of the

1912
01:18:56,319 --> 01:19:02,319
register because it's floating point

1913
01:18:58,238 --> 01:19:04,879
just stupid um it's fine

1914
01:19:02,319 --> 01:19:07,759
floats in c are now stored in the ssc

1915
01:19:04,880 --> 01:19:09,440
registers anyway so i don't know why

1916
01:19:07,760 --> 01:19:11,280
you know it's just a dumb

1917
01:19:09,439 --> 01:19:15,519
c is now more cumbersome than assembly

1918
01:19:11,279 --> 01:19:15,519
language like congratulations guys

1919
01:19:16,319 --> 01:19:19,519
it's way easier to program ssc in

1920
01:19:18,158 --> 01:19:23,719
assembly language than it is in c that's

1921
01:19:19,520 --> 01:19:23,719
how bad the c support is

1922
01:19:24,560 --> 01:19:27,120
so stupid

1923
01:19:27,760 --> 01:19:30,719
um

1924
01:19:28,880 --> 01:19:32,640
all right so you know in here we're

1925
01:19:30,719 --> 01:19:34,239
doing

1926
01:19:32,640 --> 01:19:37,600
uh

1927
01:19:34,238 --> 01:19:39,119
this this round function in both cases i

1928
01:19:37,600 --> 01:19:40,800
think that's what we want it's just to

1929
01:19:39,119 --> 01:19:43,119
round to whatever they are

1930
01:19:40,800 --> 01:19:45,440
uh i don't know what this is uh i cannot

1931
01:19:43,119 --> 01:19:47,119
convert from v3 to okay so there's just

1932
01:19:45,439 --> 01:19:48,799
uh like a floor

1933
01:19:47,119 --> 01:19:50,479
uh that distributes

1934
01:19:48,800 --> 01:19:51,840
two v threes

1935
01:19:50,479 --> 01:19:54,479
um

1936
01:19:51,840 --> 01:19:54,480
not that one

1937
01:19:54,719 --> 01:19:57,760
that one

1938
01:19:55,920 --> 01:20:00,399
uh so we probably just want one that we

1939
01:19:57,760 --> 01:20:00,400
can distribute

1940
01:20:00,960 --> 01:20:04,760
to v3s as well

1941
01:20:07,520 --> 01:20:09,700
all right

1942
01:20:09,359 --> 01:20:12,799
um

1943
01:20:09,699 --> 01:20:12,800
[Music]

1944
01:20:15,840 --> 01:20:20,079
so i think that should always produce

1945
01:20:17,359 --> 01:20:22,319
aligned voxels and i

1946
01:20:20,079 --> 01:20:24,319
i want to now see why we're not always

1947
01:20:22,319 --> 01:20:27,439
getting a larger voxel than where the

1948
01:20:24,319 --> 01:20:29,279
thing uh thinks it should be

1949
01:20:27,439 --> 01:20:31,599
but we're definitely not and it's really

1950
01:20:29,279 --> 01:20:33,198
strange that we're not so something's up

1951
01:20:31,600 --> 01:20:36,960
there

1952
01:20:33,198 --> 01:20:39,839
and i don't know what that something is

1953
01:20:36,960 --> 01:20:39,840
but i guess we'll see

1954
01:20:45,520 --> 01:20:48,880
okay

1955
01:20:46,639 --> 01:20:51,039
uh so you can see there at least now

1956
01:20:48,880 --> 01:20:54,639
we're starting off

1957
01:20:51,039 --> 01:20:56,880
in uh well even that's wrong

1958
01:20:54,639 --> 01:20:59,520
like those are not aligned

1959
01:20:56,880 --> 01:21:00,880
so what what is going on i think this is

1960
01:20:59,520 --> 01:21:03,120
just like

1961
01:21:00,880 --> 01:21:03,119
yeah

1962
01:21:03,600 --> 01:21:08,079
too many sparse days of working on code

1963
01:21:06,079 --> 01:21:09,600
like this doesn't really work like this

1964
01:21:08,079 --> 01:21:11,920
is something you do in eight hours you

1965
01:21:09,600 --> 01:21:13,920
don't do it in like you know

1966
01:21:11,920 --> 01:21:15,679
two hour chunks spread across seven

1967
01:21:13,920 --> 01:21:18,800
months or something

1968
01:21:15,679 --> 01:21:20,960
um anyway uh so if we take a look at

1969
01:21:18,800 --> 01:21:22,639
what this size is here and we say like

1970
01:21:20,960 --> 01:21:24,079
okay we're going to take the front p and

1971
01:21:22,639 --> 01:21:26,400
the 2p we're going to round them and

1972
01:21:24,079 --> 01:21:28,639
multiply them by that size the starting

1973
01:21:26,399 --> 01:21:30,319
and ending corners should then be like

1974
01:21:28,639 --> 01:21:31,359
they should be aligned to the voxel

1975
01:21:30,319 --> 01:21:32,238
though

1976
01:21:31,359 --> 01:21:34,079
right

1977
01:21:32,238 --> 01:21:35,678
um because you did the divide and then

1978
01:21:34,079 --> 01:21:37,519
you got an even number and then you

1979
01:21:35,679 --> 01:21:39,199
multiply the number out by the

1980
01:21:37,520 --> 01:21:40,159
displacement size

1981
01:21:39,198 --> 01:21:42,879
so

1982
01:21:40,158 --> 01:21:45,039
that should give you

1983
01:21:42,880 --> 01:21:48,400
i mean shouldn't that always produce an

1984
01:21:45,039 --> 01:21:48,399
aligned value i'm not sure

1985
01:21:48,639 --> 01:21:53,679
i get it

1986
01:21:50,560 --> 01:21:55,199
um but we'll see so we set a corner a

1987
01:21:53,679 --> 01:21:56,880
here this

1988
01:21:55,198 --> 01:21:58,638
wouldn't really be

1989
01:21:56,880 --> 01:22:00,960
[Music]

1990
01:21:58,639 --> 01:22:00,960
um

1991
01:22:08,158 --> 01:22:11,359
so i guess

1992
01:22:09,359 --> 01:22:13,119
yeah i mean i guess technically so the

1993
01:22:11,359 --> 01:22:15,759
way they think about this is

1994
01:22:13,119 --> 01:22:17,359
you need them to have been biased first

1995
01:22:15,760 --> 01:22:18,800
in order for a round to work that's the

1996
01:22:17,359 --> 01:22:23,039
only problem there

1997
01:22:18,800 --> 01:22:26,480
so maybe i'm kind of wrong about that

1998
01:22:23,039 --> 01:22:26,479
like you want them to be

1999
01:22:26,960 --> 01:22:29,600
yeah

2000
01:22:27,840 --> 01:22:32,000
you want them to

2001
01:22:29,600 --> 01:22:33,360
uh be expanded after that so i suppose

2002
01:22:32,000 --> 01:22:36,000
it is right

2003
01:22:33,359 --> 01:22:36,880
to do a floor like we were doing

2004
01:22:36,000 --> 01:22:39,279
um

2005
01:22:36,880 --> 01:22:40,639
then first figure out what order they go

2006
01:22:39,279 --> 01:22:42,399
in

2007
01:22:40,639 --> 01:22:45,199
right

2008
01:22:42,399 --> 01:22:46,960
um so whichever one is the minimum

2009
01:22:45,198 --> 01:22:49,279
you you put here

2010
01:22:46,960 --> 01:22:50,719
uh and you subtract one i suppose this

2011
01:22:49,279 --> 01:22:52,719
was our problem

2012
01:22:50,719 --> 01:22:54,639
is that this is supposed to be twice the

2013
01:22:52,719 --> 01:22:56,480
cell dim

2014
01:22:54,639 --> 01:22:59,440
right because

2015
01:22:56,479 --> 01:23:02,000
you floored so the minimum corner is in

2016
01:22:59,439 --> 01:23:04,000
the correct place so if you subtract one

2017
01:23:02,000 --> 01:23:06,560
cell dimension from it you now have

2018
01:23:04,000 --> 01:23:08,560
expanded the minimum size by one cell

2019
01:23:06,560 --> 01:23:11,440
which is what we were trying to do

2020
01:23:08,560 --> 01:23:13,199
the maximum size on the other hand

2021
01:23:11,439 --> 01:23:15,519
um you didn't

2022
01:23:13,198 --> 01:23:18,000
right because you floored it so if you

2023
01:23:15,520 --> 01:23:19,679
only add one you're just encompassing it

2024
01:23:18,000 --> 01:23:20,399
so if it's on the mac side you then need

2025
01:23:19,679 --> 01:23:22,960
to do

2026
01:23:20,399 --> 01:23:26,158
uh two times to get past that in order

2027
01:23:22,960 --> 01:23:26,158
to have the correct dimension

2028
01:23:26,560 --> 01:23:30,560
um so i guess that's okay

2029
01:23:29,198 --> 01:23:31,359
so that's really what i should have done

2030
01:23:30,560 --> 01:23:32,719
there

2031
01:23:31,359 --> 01:23:34,799
we didn't really need the round function

2032
01:23:32,719 --> 01:23:36,319
that was a bad way to think about it

2033
01:23:34,800 --> 01:23:38,000
but let me take a look and see now what

2034
01:23:36,319 --> 01:23:39,119
we've got because i still don't really

2035
01:23:38,000 --> 01:23:41,039
know

2036
01:23:39,119 --> 01:23:42,880
if we've got the right thing and this

2037
01:23:41,039 --> 01:23:44,719
code is just just terrible now i don't

2038
01:23:42,880 --> 01:23:47,520
know what i did but i really screwed it

2039
01:23:44,719 --> 01:23:49,600
up so it's in a horrible state

2040
01:23:47,520 --> 01:23:51,440
and we're going to have to clean it up

2041
01:23:49,600 --> 01:23:53,679
one by one but the first things first is

2042
01:23:51,439 --> 01:23:57,439
make sure the voxel size is correct

2043
01:23:53,679 --> 01:23:57,440
so i want to do at least that

2044
01:23:58,319 --> 01:24:02,319
at first right

2045
01:24:00,960 --> 01:24:04,560
and and i guess the thing is it's just

2046
01:24:02,319 --> 01:24:06,559
too slow even now to even really test

2047
01:24:04,560 --> 01:24:09,199
right so let's try something a little

2048
01:24:06,560 --> 01:24:11,280
bit uh simpler first i'm gonna reduce

2049
01:24:09,198 --> 01:24:14,000
this voxel uh

2050
01:24:11,279 --> 01:24:16,238
maximum to like be smaller

2051
01:24:14,000 --> 01:24:19,198
uh and i'm also gonna make sure that we

2052
01:24:16,238 --> 01:24:21,039
like when we draw the 2p and the from p

2053
01:24:19,198 --> 01:24:22,479
and all that stuff um

2054
01:24:21,039 --> 01:24:24,399
well it'll actually be okay because we

2055
01:24:22,479 --> 01:24:26,319
know that the the 2p can be outside of

2056
01:24:24,399 --> 01:24:27,198
it and that'll be clear

2057
01:24:26,319 --> 01:24:30,158
um

2058
01:24:27,198 --> 01:24:33,359
but let's just see here uh what happens

2059
01:24:30,158 --> 01:24:34,879
so uh if we now look at this voxel size

2060
01:24:33,359 --> 01:24:37,679
hopefully

2061
01:24:34,880 --> 01:24:40,400
i'm hoping we will see

2062
01:24:37,679 --> 01:24:40,399
that it is

2063
01:24:40,560 --> 01:24:45,840
aligned properly which is the only thing

2064
01:24:42,319 --> 01:24:45,840
i was trying to do here

2065
01:24:47,760 --> 01:24:53,440
so it should be such that now

2066
01:24:50,880 --> 01:24:55,199
you get the correct sizing i don't know

2067
01:24:53,439 --> 01:24:57,198
why we're seeing that extra because like

2068
01:24:55,198 --> 01:24:58,879
i said that two

2069
01:24:57,198 --> 01:25:00,319
the two that's in there should not

2070
01:24:58,880 --> 01:25:01,520
actually be

2071
01:25:00,319 --> 01:25:03,439
uh

2072
01:25:01,520 --> 01:25:05,120
a problem there i don't know what we're

2073
01:25:03,439 --> 01:25:07,359
seeing there

2074
01:25:05,119 --> 01:25:08,719
probably just the uh the fact that it

2075
01:25:07,359 --> 01:25:10,399
resets the

2076
01:25:08,719 --> 01:25:11,600
step every time

2077
01:25:10,399 --> 01:25:14,079
um

2078
01:25:11,600 --> 01:25:16,639
but yeah so like if you look

2079
01:25:14,079 --> 01:25:21,039
at the voxels

2080
01:25:16,639 --> 01:25:21,039
just trying to see if i can get um

2081
01:25:21,359 --> 01:25:27,079
any kind of an indication that we're

2082
01:25:22,960 --> 01:25:27,079
properly sizing them now

2083
01:25:27,600 --> 01:25:30,719
it at least looks a little bit better

2084
01:25:29,600 --> 01:25:33,520
right

2085
01:25:30,719 --> 01:25:33,520
but i'm not sure

2086
01:25:34,238 --> 01:25:37,039
i'm not seeing those cases where we're

2087
01:25:36,079 --> 01:25:38,399
like

2088
01:25:37,039 --> 01:25:41,119
um

2089
01:25:38,399 --> 01:25:44,000
you know incorrectly uh seeing one on

2090
01:25:41,119 --> 01:25:45,760
the edge right

2091
01:25:44,000 --> 01:25:49,119
but

2092
01:25:45,760 --> 01:25:51,119
so i mean what is happening there

2093
01:25:49,119 --> 01:25:52,960
i just

2094
01:25:51,119 --> 01:25:55,840
oh right

2095
01:25:52,960 --> 01:25:55,840
okay wow

2096
01:25:55,920 --> 01:26:02,000
so the other problem we have

2097
01:25:59,039 --> 01:26:03,760
is that we aren't

2098
01:26:02,000 --> 01:26:05,359
wow yeah this is this is actually harder

2099
01:26:03,760 --> 01:26:07,280
than this is this is surprisingly

2100
01:26:05,359 --> 01:26:09,119
difficult okay

2101
01:26:07,279 --> 01:26:11,279
so the other problem we have is that if

2102
01:26:09,119 --> 01:26:14,559
we clamp the size of the voxel we have

2103
01:26:11,279 --> 01:26:16,479
to make sure it still includes

2104
01:26:14,560 --> 01:26:17,760
the starting point

2105
01:26:16,479 --> 01:26:20,759
right

2106
01:26:17,760 --> 01:26:20,760
um

2107
01:26:27,359 --> 01:26:30,479
so i feel like we just need to do this

2108
01:26:28,880 --> 01:26:33,119
in a fundamentally different way like i

2109
01:26:30,479 --> 01:26:35,359
need to first clamp the distance vector

2110
01:26:33,119 --> 01:26:37,840
and then just do this directly like this

2111
01:26:35,359 --> 01:26:37,839
doesn't work

2112
01:26:38,639 --> 01:26:41,440
right

2113
01:26:39,760 --> 01:26:43,119
like like that's just not going to cut

2114
01:26:41,439 --> 01:26:45,039
it we can't clamp it there and if we

2115
01:26:43,119 --> 01:26:46,960
because if we do we risk moving the

2116
01:26:45,039 --> 01:26:48,399
voxel so that it doesn't even contain

2117
01:26:46,960 --> 01:26:50,158
the starting point

2118
01:26:48,399 --> 01:26:54,399
so i think what we have to actually do

2119
01:26:50,158 --> 01:26:57,679
instead is first clamp this

2120
01:26:54,399 --> 01:26:59,920
so that the 2p gets truncated earlier

2121
01:26:57,679 --> 01:26:59,920
right

2122
01:27:00,158 --> 01:27:04,799
um so basically we would say something

2123
01:27:02,479 --> 01:27:04,799
like

2124
01:27:12,880 --> 01:27:18,000
the starting corners computation can

2125
01:27:15,439 --> 01:27:19,359
remain the same but the ending corners

2126
01:27:18,000 --> 01:27:22,479
computation

2127
01:27:19,359 --> 01:27:26,960
has to be a thing that first does

2128
01:27:22,479 --> 01:27:28,879
a max on so we first have to convert

2129
01:27:26,960 --> 01:27:30,719
the delta p

2130
01:27:28,880 --> 01:27:34,000
right

2131
01:27:30,719 --> 01:27:35,679
itself using the same algorithm so the

2132
01:27:34,000 --> 01:27:37,920
delta p

2133
01:27:35,679 --> 01:27:39,600
would basically be you take you take the

2134
01:27:37,920 --> 01:27:41,920
delta

2135
01:27:39,600 --> 01:27:43,120
uh and you figure out

2136
01:27:41,920 --> 01:27:46,840
what its

2137
01:27:43,119 --> 01:27:46,840
displacement is

2138
01:27:48,880 --> 01:27:52,159
so

2139
01:27:49,600 --> 01:27:57,120
however big that is we convert it to a

2140
01:27:52,158 --> 01:27:57,119
motion displacement size movement right

2141
01:27:57,520 --> 01:28:00,520
um

2142
01:28:00,800 --> 01:28:04,800
we then clamp that

2143
01:28:05,279 --> 01:28:08,960
uh in fact i guess this is

2144
01:28:13,679 --> 01:28:19,440
more like this so we convert the delta p

2145
01:28:16,639 --> 01:28:21,520
itself to a voxel-based movement

2146
01:28:19,439 --> 01:28:23,359
we would then clamp

2147
01:28:21,520 --> 01:28:26,840
the

2148
01:28:23,359 --> 01:28:28,399
the this the size of this

2149
01:28:26,840 --> 01:28:33,199
right

2150
01:28:28,399 --> 01:28:34,319
um so we clamp it to within min or max

2151
01:28:33,198 --> 01:28:36,479
of that

2152
01:28:34,319 --> 01:28:40,960
that value i don't know

2153
01:28:36,479 --> 01:28:42,319
if we have a clamp function for v3 s's

2154
01:28:40,960 --> 01:28:43,520
because i don't know that we ever wrote

2155
01:28:42,319 --> 01:28:46,158
one of those

2156
01:28:43,520 --> 01:28:48,639
but either way

2157
01:28:46,158 --> 01:28:51,198
it doesn't really matter um

2158
01:28:48,639 --> 01:28:52,880
we can just say look the delta p clamp s

2159
01:28:51,198 --> 01:28:56,238
equals a clamp

2160
01:28:52,880 --> 01:28:59,520
uh between the max voxel dim

2161
01:28:56,238 --> 01:28:59,519
in either direction

2162
01:29:05,760 --> 01:29:11,119
so this clamps the motion so that the

2163
01:29:08,238 --> 01:29:12,238
motion can't be more than

2164
01:29:11,119 --> 01:29:14,319
whatever

2165
01:29:12,238 --> 01:29:16,158
you know the search space

2166
01:29:14,319 --> 01:29:19,279
can't be more than the maximum voxel in

2167
01:29:16,158 --> 01:29:23,198
either direction and then we just take

2168
01:29:19,279 --> 01:29:26,079
whatever that delta p clamp was

2169
01:29:23,198 --> 01:29:27,919
and we say like the ending corner

2170
01:29:26,079 --> 01:29:32,079
is actually now going to be computed by

2171
01:29:27,920 --> 01:29:34,319
from p plus the delta p clamp

2172
01:29:32,079 --> 01:29:34,319
right

2173
01:29:34,800 --> 01:29:37,800
um

2174
01:29:45,039 --> 01:29:49,238
i'm going to call this delta p i

2175
01:29:56,000 --> 01:29:59,279
uh and then that way i can compute delta

2176
01:29:57,840 --> 01:30:02,279
p clamp

2177
01:29:59,279 --> 01:30:02,279
oops

2178
01:30:06,800 --> 01:30:12,000
by taking this and multiplying it by the

2179
01:30:08,880 --> 01:30:12,000
motion displacement size

2180
01:30:15,119 --> 01:30:17,519
okay

2181
01:30:18,479 --> 01:30:21,359
um i suppose we don't even need to do

2182
01:30:20,079 --> 01:30:24,960
that though

2183
01:30:21,359 --> 01:30:24,960
now to think about it um

2184
01:30:25,520 --> 01:30:29,360
because really you're already gonna

2185
01:30:27,119 --> 01:30:30,559
you're just dividing by that

2186
01:30:29,359 --> 01:30:34,399
here

2187
01:30:30,560 --> 01:30:35,520
um so if instead we just took

2188
01:30:34,399 --> 01:30:36,638
uh

2189
01:30:35,520 --> 01:30:39,760
sorry

2190
01:30:36,639 --> 01:30:42,719
if instead we just took and added it

2191
01:30:39,760 --> 01:30:46,320
afterwards right

2192
01:30:42,719 --> 01:30:49,840
we don't have to bother multiplying it

2193
01:30:46,319 --> 01:30:49,840
um i suppose

2194
01:30:50,560 --> 01:30:53,280
so in other words we would and and

2195
01:30:52,238 --> 01:30:53,719
really

2196
01:30:53,279 --> 01:30:55,439
um

2197
01:30:53,720 --> 01:30:56,960
[Music]

2198
01:30:55,439 --> 01:30:59,599
i i guess we could do it slightly

2199
01:30:56,960 --> 01:31:02,399
differently and just say well you know

2200
01:30:59,600 --> 01:31:03,679
the motion displacement size uh if we

2201
01:31:02,399 --> 01:31:04,879
did multiply it out there then we

2202
01:31:03,679 --> 01:31:07,119
wouldn't even do any of this we'd just

2203
01:31:04,880 --> 01:31:09,279
say it's the voxel starting corner plus

2204
01:31:07,119 --> 01:31:11,519
the delta plea clamp

2205
01:31:09,279 --> 01:31:11,519
right

2206
01:31:11,920 --> 01:31:14,800
and then

2207
01:31:12,960 --> 01:31:18,399
yeah we just do

2208
01:31:14,800 --> 01:31:20,719
the computation we were doing before

2209
01:31:18,399 --> 01:31:20,719
and

2210
01:31:22,880 --> 01:31:29,239
this is just the voxel oops

2211
01:31:24,880 --> 01:31:29,239
this is just the voxel dim now

2212
01:31:31,920 --> 01:31:35,600
so maybe that's a little bit cleaner

2213
01:31:36,079 --> 01:31:39,679
right

2214
01:31:37,359 --> 01:31:39,679
um

2215
01:31:42,000 --> 01:31:45,439
and now we can maybe clean up the string

2216
01:31:43,359 --> 01:31:48,319
because that yeah that code was really

2217
01:31:45,439 --> 01:31:50,319
uh screwing us up there quite a bit

2218
01:31:48,319 --> 01:31:51,840
um so let me see while it's embedded

2219
01:31:50,319 --> 01:31:53,599
because right now the the glove starts

2220
01:31:51,840 --> 01:31:55,520
off embedded so it can't move if we

2221
01:31:53,600 --> 01:31:58,239
don't until we re-enable that embedding

2222
01:31:55,520 --> 01:32:00,320
code until the hero moves and we can

2223
01:31:58,238 --> 01:32:02,000
actually use that to our advantage here

2224
01:32:00,319 --> 01:32:04,319
so that i can look and see

2225
01:32:02,000 --> 01:32:06,158
you know do i feel like this is doing

2226
01:32:04,319 --> 01:32:06,569
roughly the correct thing

2227
01:32:06,158 --> 01:32:09,439
um

2228
01:32:06,569 --> 01:32:13,840
[Music]

2229
01:32:09,439 --> 01:32:13,839
and it does look pretty good now

2230
01:32:14,479 --> 01:32:19,678
that looks a lot better than it was

2231
01:32:17,279 --> 01:32:21,920
um probably still not great

2232
01:32:19,679 --> 01:32:24,480
but it's better right

2233
01:32:21,920 --> 01:32:27,199
um so that seems good

2234
01:32:24,479 --> 01:32:28,799
uh the embedding prop thing like not

2235
01:32:27,198 --> 01:32:30,638
having embedding support is a huge

2236
01:32:28,800 --> 01:32:32,159
problem and the speed is now terrible

2237
01:32:30,639 --> 01:32:33,679
which is exactly what you'd expect so

2238
01:32:32,158 --> 01:32:34,960
that's fine

2239
01:32:33,679 --> 01:32:36,158
um

2240
01:32:34,960 --> 01:32:37,679
but

2241
01:32:36,158 --> 01:32:40,158
uh

2242
01:32:37,679 --> 01:32:42,639
we at least now have the correct bounds

2243
01:32:40,158 --> 01:32:44,238
i also am noticing i'm not getting stuck

2244
01:32:42,639 --> 01:32:46,159
into things like we were before so i

2245
01:32:44,238 --> 01:32:47,919
wonder if actually the picking the voxel

2246
01:32:46,158 --> 01:32:49,679
bounds incorrectly

2247
01:32:47,920 --> 01:32:51,840
might have been the reason why we were

2248
01:32:49,679 --> 01:32:56,560
getting some of those embeddings that we

2249
01:32:51,840 --> 01:32:59,920
should not have had right um

2250
01:32:56,560 --> 01:33:02,159
so that's great uh no complaints there

2251
01:32:59,920 --> 01:33:04,719
and also now um

2252
01:33:02,158 --> 01:33:07,719
i don't actually know

2253
01:33:04,719 --> 01:33:07,719
uh

2254
01:33:11,760 --> 01:33:17,920
i want to say we could now put in a

2255
01:33:15,119 --> 01:33:17,920
thing that's like

2256
01:33:20,719 --> 01:33:23,719
this

2257
01:33:27,920 --> 01:33:31,440
or something

2258
01:33:30,158 --> 01:33:33,359
um

2259
01:33:31,439 --> 01:33:37,479
where we have like

2260
01:33:33,359 --> 01:33:37,479
what we did with the corner

2261
01:33:38,479 --> 01:33:41,279
something like that

2262
01:33:49,279 --> 01:33:53,840
uh and so what we could do here is now

2263
01:33:51,520 --> 01:33:57,880
try to pull out the code where we're

2264
01:33:53,840 --> 01:33:57,880
doing our uh

2265
01:34:07,279 --> 01:34:10,079
yeah uh so now we can do is try to pull

2266
01:34:09,198 --> 01:34:11,919
out the code where we're doing that

2267
01:34:10,079 --> 01:34:14,319
check uh so one thing we could do here

2268
01:34:11,920 --> 01:34:16,480
is just say

2269
01:34:14,319 --> 01:34:20,238
uh all right

2270
01:34:16,479 --> 01:34:22,718
instead of doing this um on the interior

2271
01:34:20,238 --> 01:34:25,759
we will uh just

2272
01:34:22,719 --> 01:34:27,760
you know we'll just populate this vector

2273
01:34:25,760 --> 01:34:30,079
using lookups

2274
01:34:27,760 --> 01:34:30,079
and

2275
01:34:30,719 --> 01:34:34,158
i don't know exactly how i want to do

2276
01:34:33,119 --> 01:34:35,840
that

2277
01:34:34,158 --> 01:34:38,638
long term

2278
01:34:35,840 --> 01:34:39,920
um but basically what i'm talking about

2279
01:34:38,639 --> 01:34:44,600
here

2280
01:34:39,920 --> 01:34:44,600
is something like this

2281
01:34:46,639 --> 01:34:49,639
um

2282
01:35:07,198 --> 01:35:12,638
we call a function

2283
01:35:09,600 --> 01:35:14,960
that's like get occupied 4

2284
01:35:12,639 --> 01:35:17,359
or something

2285
01:35:14,960 --> 01:35:20,319
it will perform

2286
01:35:17,359 --> 01:35:20,319
basically this

2287
01:35:27,118 --> 01:35:30,238
so we won't do that anymore it will do

2288
01:35:29,118 --> 01:35:35,000
that

2289
01:35:30,238 --> 01:35:35,000
it will also perform this

2290
01:35:47,118 --> 01:35:52,079
so that really this uh

2291
01:35:49,600 --> 01:35:54,880
this part here we'll just do like

2292
01:35:52,079 --> 01:35:57,118
we'll just check on the boolean

2293
01:35:54,880 --> 01:35:58,880
how it wants to do that when we go to

2294
01:35:57,118 --> 01:36:00,880
re-enable that code path so that will

2295
01:35:58,880 --> 01:36:02,880
also get handled up here the embed count

2296
01:36:00,880 --> 01:36:05,279
stuff or how that wants to

2297
01:36:02,880 --> 01:36:07,760
uh be handled who cares

2298
01:36:05,279 --> 01:36:11,599
um so this will happen out here in a

2299
01:36:07,760 --> 01:36:12,800
function that's like you know um

2300
01:36:11,600 --> 01:36:13,760
check

2301
01:36:12,800 --> 01:36:16,880
or

2302
01:36:13,760 --> 01:36:18,400
update corners or something right

2303
01:36:16,880 --> 01:36:19,760
um i don't know what i decided to call

2304
01:36:18,399 --> 01:36:21,679
it down here

2305
01:36:19,760 --> 01:36:23,440
this is probably a bad name get occupied

2306
01:36:21,679 --> 01:36:24,800
for let's like check corners or

2307
01:36:23,439 --> 01:36:25,919
something is probably a better name

2308
01:36:24,800 --> 01:36:26,880
right

2309
01:36:25,920 --> 01:36:29,920
um

2310
01:36:26,880 --> 01:36:32,639
so we'll call this thing like

2311
01:36:29,920 --> 01:36:32,639
check corners

2312
01:36:33,359 --> 01:36:39,000
and it will need

2313
01:36:35,359 --> 01:36:39,000
the voxel grid

2314
01:36:40,800 --> 01:36:45,440
i assume

2315
01:36:42,800 --> 01:36:47,679
we'll need the voxel stack

2316
01:36:45,439 --> 01:36:49,439
um

2317
01:36:47,679 --> 01:36:51,920
it really doesn't need very much right

2318
01:36:49,439 --> 01:36:53,198
mostly it just needs to produce these

2319
01:36:51,920 --> 01:36:54,079
values

2320
01:36:53,198 --> 01:36:55,759
um

2321
01:36:54,079 --> 01:36:57,359
and so now we could do is say well all

2322
01:36:55,760 --> 01:36:59,039
right let's take

2323
01:36:57,359 --> 01:37:01,279
uh in fact maybe we take all of these

2324
01:36:59,039 --> 01:37:05,880
and we just wrap them up in a in like a

2325
01:37:01,279 --> 01:37:05,880
little struct and that's what it does

2326
01:37:08,800 --> 01:37:12,560
so there's something that looks like

2327
01:37:10,238 --> 01:37:12,559
this

2328
01:37:18,000 --> 01:37:22,960
and we produced one of these from

2329
01:37:21,600 --> 01:37:24,079
uh anywhere

2330
01:37:22,960 --> 01:37:26,079
you know

2331
01:37:24,079 --> 01:37:27,198
uh in the system we can produce one of

2332
01:37:26,079 --> 01:37:29,920
these

2333
01:37:27,198 --> 01:37:31,678
so we then want to do this iterator

2334
01:37:29,920 --> 01:37:34,560
thing and it's the cell

2335
01:37:31,679 --> 01:37:36,639
that we care about in particular so

2336
01:37:34,560 --> 01:37:40,000
uh we need to be able to look up we need

2337
01:37:36,639 --> 01:37:43,359
to know like the absolute cell index

2338
01:37:40,000 --> 01:37:47,118
um so this piece of code here

2339
01:37:43,359 --> 01:37:49,839
uh probably wants to be like part of

2340
01:37:47,118 --> 01:37:49,839
this

2341
01:37:51,520 --> 01:37:54,080
like so

2342
01:37:55,920 --> 01:37:58,920
and

2343
01:38:04,479 --> 01:38:09,198
when you call this function you just

2344
01:38:06,399 --> 01:38:11,359
give it the

2345
01:38:09,198 --> 01:38:11,359
cell

2346
01:38:14,840 --> 01:38:18,480
index so it'll start out by getting the

2347
01:38:17,118 --> 01:38:20,799
cell bounds

2348
01:38:18,479 --> 01:38:22,319
uh it'll then iterate over the corners

2349
01:38:20,800 --> 01:38:25,119
of this voxel

2350
01:38:22,319 --> 01:38:26,960
testing each individual one of them

2351
01:38:25,118 --> 01:38:29,118
like this

2352
01:38:26,960 --> 01:38:30,560
and what we want to do now because this

2353
01:38:29,118 --> 01:38:32,319
is all fine

2354
01:38:30,560 --> 01:38:34,239
uh but we want like some of this stuff

2355
01:38:32,319 --> 01:38:36,000
like the field repulsion all that stuff

2356
01:38:34,238 --> 01:38:37,519
we now just want

2357
01:38:36,000 --> 01:38:38,319
this stuff

2358
01:38:37,520 --> 01:38:42,159
to

2359
01:38:38,319 --> 01:38:44,079
operate on codes that we pull out of the

2360
01:38:42,158 --> 01:38:48,000
stack

2361
01:38:44,079 --> 01:38:49,359
um so this right here the corner code

2362
01:38:48,000 --> 01:38:50,960
the embed dir

2363
01:38:49,359 --> 01:38:52,880
we want those

2364
01:38:50,960 --> 01:38:55,920
to basically

2365
01:38:52,880 --> 01:38:58,239
update themselves inside this routine so

2366
01:38:55,920 --> 01:39:00,319
we never call this function which is the

2367
01:38:58,238 --> 01:39:02,399
x really expensive part

2368
01:39:00,319 --> 01:39:04,399
if we've already called it so this just

2369
01:39:02,399 --> 01:39:06,238
it's just a simple way of speeding this

2370
01:39:04,399 --> 01:39:07,599
up by about 8x

2371
01:39:06,238 --> 01:39:09,279
before we actually do any real

2372
01:39:07,600 --> 01:39:10,800
optimization just getting rid of the

2373
01:39:09,279 --> 01:39:12,639
fact that you call you're doing the same

2374
01:39:10,800 --> 01:39:15,639
thing eight times for no reason

2375
01:39:12,639 --> 01:39:15,639
right

2376
01:39:26,158 --> 01:39:30,399
so if we go through here and we say

2377
01:39:30,479 --> 01:39:34,158
uh okay so the

2378
01:39:33,039 --> 01:39:38,639
uh

2379
01:39:34,158 --> 01:39:41,359
the corner i is gonna be the cell i plus

2380
01:39:38,639 --> 01:39:43,440
uh the vox it or i

2381
01:39:41,359 --> 01:39:46,479
um that's the lookup

2382
01:39:43,439 --> 01:39:49,279
uh let's do an assertion here

2383
01:39:46,479 --> 01:39:51,519
where we first just verify that you know

2384
01:39:49,279 --> 01:39:54,519
it's

2385
01:39:51,520 --> 01:39:54,520
um

2386
01:39:57,279 --> 01:40:00,880
not fetching out of bounds

2387
01:40:01,279 --> 01:40:05,559
so we'll just say or like

2388
01:40:09,760 --> 01:40:14,079
so maybe i can just call this because

2389
01:40:11,600 --> 01:40:15,360
that's really all we well i can't really

2390
01:40:14,079 --> 01:40:18,319
call that because it's it's going to be

2391
01:40:15,359 --> 01:40:20,158
one plus the cell count

2392
01:40:18,319 --> 01:40:23,158
so that's not really right

2393
01:40:20,158 --> 01:40:23,158
um

2394
01:40:32,719 --> 01:40:36,800
so actually is an array bounds would

2395
01:40:34,719 --> 01:40:39,279
work unfortunately that's we we've never

2396
01:40:36,800 --> 01:40:40,719
unified our gen v3 and our v3s so at

2397
01:40:39,279 --> 01:40:42,319
some point that might want to happen

2398
01:40:40,719 --> 01:40:44,079
because then this would work

2399
01:40:42,319 --> 01:40:45,759
so i don't know what we want to do there

2400
01:40:44,079 --> 01:40:46,800
i'm i'm going to like ignore that for a

2401
01:40:45,760 --> 01:40:49,679
second

2402
01:40:46,800 --> 01:40:51,920
uh and what i'm going to say is okay

2403
01:40:49,679 --> 01:40:57,359
uh i'm just going to do this manually

2404
01:40:51,920 --> 01:40:57,359
and assert that this stuff is correct

2405
01:40:58,560 --> 01:41:02,560
so i just i want to make sure that we're

2406
01:41:00,158 --> 01:41:06,479
never fetching outside of the array

2407
01:41:02,560 --> 01:41:08,239
i could also assert that like

2408
01:41:06,479 --> 01:41:10,079
um it's greater than or equal to zero

2409
01:41:08,238 --> 01:41:12,158
but i don't really know that that's a

2410
01:41:10,079 --> 01:41:14,880
case that probably won't happen uh this

2411
01:41:12,158 --> 01:41:16,559
one we could easily have an off by one

2412
01:41:14,880 --> 01:41:20,719
thing that we screw up so i feel like

2413
01:41:16,560 --> 01:41:23,360
that's a good one uh to check right

2414
01:41:20,719 --> 01:41:26,319
uh okay so

2415
01:41:23,359 --> 01:41:26,319
that's our corner

2416
01:41:30,840 --> 01:41:35,119
um so what i want to do now is set all

2417
01:41:33,600 --> 01:41:39,280
the values in here so the first thing we

2418
01:41:35,118 --> 01:41:39,279
need to do is set this one

2419
01:41:39,679 --> 01:41:45,600
uh which is just what we're actually

2420
01:41:41,920 --> 01:41:46,399
testing we then need to do our tests

2421
01:41:45,600 --> 01:41:49,440
and

2422
01:41:46,399 --> 01:41:49,439
to do the tests

2423
01:41:52,800 --> 01:41:55,920
we should probably just make sure okay

2424
01:41:54,960 --> 01:41:58,239
so

2425
01:41:55,920 --> 01:42:00,880
the voxel grid has that in it right so

2426
01:41:58,238 --> 01:42:02,079
stack

2427
01:42:00,880 --> 01:42:04,079
oops

2428
01:42:02,079 --> 01:42:06,319
grid dim

2429
01:42:04,079 --> 01:42:06,319
um

2430
01:42:08,158 --> 01:42:11,920
in order to do the tests we're going to

2431
01:42:09,679 --> 01:42:13,600
need the sim region and the entity

2432
01:42:11,920 --> 01:42:16,239
so those are the two things that we

2433
01:42:13,600 --> 01:42:19,440
didn't get

2434
01:42:16,238 --> 01:42:19,439
so let's grab those here

2435
01:42:20,238 --> 01:42:24,479
uh

2436
01:42:21,439 --> 01:42:28,638
and then we just yeah like

2437
01:42:24,479 --> 01:42:30,238
the unembed d is just a thing that yeah

2438
01:42:28,639 --> 01:42:31,760
we had down here that we set to zero

2439
01:42:30,238 --> 01:42:33,279
before we started right it's just a

2440
01:42:31,760 --> 01:42:37,600
summation

2441
01:42:33,279 --> 01:42:40,559
um so the unembed d can just be there

2442
01:42:37,600 --> 01:42:42,639
um and well i guess actually we can just

2443
01:42:40,560 --> 01:42:44,719
set it to zero here

2444
01:42:42,639 --> 01:42:47,118
uh so all we would need to do here is

2445
01:42:44,719 --> 01:42:51,198
say result unembed d

2446
01:42:47,118 --> 01:42:51,198
um equals you know clear

2447
01:42:52,319 --> 01:42:57,238
um

2448
01:42:53,359 --> 01:42:57,238
we can also say

2449
01:42:58,319 --> 01:43:03,639
yeah i i assume we just want to do this

2450
01:43:10,560 --> 01:43:14,800
so we'll just check to see if the count

2451
01:43:12,319 --> 01:43:16,479
is correct uh and if the count is

2452
01:43:14,800 --> 01:43:19,360
correct we'll clear it so that you can

2453
01:43:16,479 --> 01:43:23,118
move right so if it's embedded

2454
01:43:19,359 --> 01:43:24,559
uh we just clear it i assume

2455
01:43:23,118 --> 01:43:26,158
again i'm not really sure what we want

2456
01:43:24,560 --> 01:43:30,119
to do there so we'll we'll take a look

2457
01:43:26,158 --> 01:43:30,118
at that a little bit later

2458
01:43:40,639 --> 01:43:44,480
um

2459
01:43:42,158 --> 01:43:44,479
so

2460
01:43:47,279 --> 01:43:52,079
we now want to rewrite this part of the

2461
01:43:49,279 --> 01:43:53,679
routine

2462
01:43:52,079 --> 01:43:55,359
uh to do some

2463
01:43:53,679 --> 01:43:56,399
things that are a little bit different

2464
01:43:55,359 --> 01:43:57,920
right

2465
01:43:56,399 --> 01:43:59,599
we now want to rewrite this part of the

2466
01:43:57,920 --> 01:44:01,679
routine to

2467
01:43:59,600 --> 01:44:04,320
you know have a slightly different yeah

2468
01:44:01,679 --> 01:44:05,679
slightly different feel to it

2469
01:44:04,319 --> 01:44:08,399
uh

2470
01:44:05,679 --> 01:44:11,118
it looks like the collision field

2471
01:44:08,399 --> 01:44:11,118
part of this

2472
01:44:12,639 --> 01:44:18,319
is actually just the thing we actually

2473
01:44:14,399 --> 01:44:21,279
wanted so maybe i wrote this

2474
01:44:18,319 --> 01:44:22,639
uh

2475
01:44:21,279 --> 01:44:24,319
not quite right

2476
01:44:22,639 --> 01:44:26,880
you know instead of having two of these

2477
01:44:24,319 --> 01:44:28,399
maybe what we actually wanted

2478
01:44:26,880 --> 01:44:31,118
um

2479
01:44:28,399 --> 01:44:31,118
was

2480
01:44:32,000 --> 01:44:36,639
like a collision field well probably not

2481
01:44:34,960 --> 01:44:38,158
so i think what i'm going to do is i'm

2482
01:44:36,639 --> 01:44:40,480
just going to say we have a collision

2483
01:44:38,158 --> 01:44:40,479
field

2484
01:44:41,279 --> 01:44:44,719
and one way to produce it is to do this

2485
01:44:43,279 --> 01:44:45,920
the other way to produce it is to do

2486
01:44:44,719 --> 01:44:48,319
something else that we'll do in a second

2487
01:44:45,920 --> 01:44:50,960
but either way after we're done uh so

2488
01:44:48,319 --> 01:44:53,039
we're basically gonna have like um

2489
01:44:50,960 --> 01:44:54,000
an if here right

2490
01:44:53,039 --> 01:44:56,079
uh

2491
01:44:54,000 --> 01:44:57,840
where we produce the collision field in

2492
01:44:56,079 --> 01:45:02,000
one of two ways

2493
01:44:57,840 --> 01:45:04,159
um one way is we produce it the old way

2494
01:45:02,000 --> 01:45:05,840
by calling the actual collides at p and

2495
01:45:04,158 --> 01:45:07,118
the other way is we produce it by just

2496
01:45:05,840 --> 01:45:10,239
doing a lookup so we'll put the

2497
01:45:07,118 --> 01:45:11,198
repulsion uh and the occupied

2498
01:45:10,238 --> 01:45:12,479
uh

2499
01:45:11,198 --> 01:45:15,118
stuff

2500
01:45:12,479 --> 01:45:16,718
we'll pull those out

2501
01:45:15,118 --> 01:45:18,399
of

2502
01:45:16,719 --> 01:45:20,639
the corner code part

2503
01:45:18,399 --> 01:45:21,679
and we'll set the corner code part

2504
01:45:20,639 --> 01:45:26,880
as well

2505
01:45:21,679 --> 01:45:29,039
so if we look at you know the stack here

2506
01:45:26,880 --> 01:45:30,800
and we do the corner code

2507
01:45:29,039 --> 01:45:32,560
if we look up the corner codes here it

2508
01:45:30,800 --> 01:45:35,279
doesn't even matter how we really index

2509
01:45:32,560 --> 01:45:36,719
these because it whatever it is as long

2510
01:45:35,279 --> 01:45:39,359
as we're consistent

2511
01:45:36,719 --> 01:45:40,639
it's fine um maybe i'll say like the

2512
01:45:39,359 --> 01:45:42,399
corner code

2513
01:45:40,639 --> 01:45:44,719
is a pointer

2514
01:45:42,399 --> 01:45:46,960
to the corner code here

2515
01:45:44,719 --> 01:45:48,239
and we just look up the corner code

2516
01:45:46,960 --> 01:45:50,639
using

2517
01:45:48,238 --> 01:45:53,519
uh exactly what you would expect

2518
01:45:50,639 --> 01:45:56,239
so corner i z corner i

2519
01:45:53,520 --> 01:45:59,119
y corner i x

2520
01:45:56,238 --> 01:46:02,238
and we then say look if the corner code

2521
01:45:59,118 --> 01:46:05,439
equals zero we haven't tested it yet

2522
01:46:02,238 --> 01:46:07,919
um so test it uh and then set it to

2523
01:46:05,439 --> 01:46:07,919
something

2524
01:46:08,000 --> 01:46:14,238
uh and then otherwise pull the value out

2525
01:46:11,359 --> 01:46:16,559
of the corner code that we actually want

2526
01:46:14,238 --> 01:46:16,559
right

2527
01:46:16,960 --> 01:46:20,639
it may actually even be like slightly

2528
01:46:18,639 --> 01:46:22,239
simpler than that

2529
01:46:20,639 --> 01:46:25,440
uh

2530
01:46:22,238 --> 01:46:27,439
it could be that we just set the field

2531
01:46:25,439 --> 01:46:31,039
to what's in there either way so it

2532
01:46:27,439 --> 01:46:31,039
could be that we just do this

2533
01:46:38,079 --> 01:46:41,279
let's let's

2534
01:46:39,520 --> 01:46:43,119
maybe maybe we do this even a little bit

2535
01:46:41,279 --> 01:46:45,359
differently uh so maybe maybe we

2536
01:46:43,118 --> 01:46:46,880
actually just do this

2537
01:46:45,359 --> 01:46:49,279
and

2538
01:46:46,880 --> 01:46:49,279
this

2539
01:46:51,520 --> 01:46:55,679
um

2540
01:46:52,800 --> 01:46:57,440
okay so so field maybe goes away and

2541
01:46:55,679 --> 01:47:00,239
sits there right

2542
01:46:57,439 --> 01:47:03,439
so we check the corner code uh

2543
01:47:00,238 --> 01:47:06,319
and we just say if the corner code

2544
01:47:03,439 --> 01:47:09,839
equals zero uh then we go in here and we

2545
01:47:06,319 --> 01:47:09,840
set the corner code

2546
01:47:10,399 --> 01:47:14,719
equal to

2547
01:47:11,600 --> 01:47:17,600
like either two or one so one is now the

2548
01:47:14,719 --> 01:47:18,960
cleared value and two is the non-cleared

2549
01:47:17,600 --> 01:47:20,159
value

2550
01:47:18,960 --> 01:47:23,198
uh

2551
01:47:20,158 --> 01:47:25,519
we then come in here and we say

2552
01:47:23,198 --> 01:47:26,799
uh that the occupied value so the thing

2553
01:47:25,520 --> 01:47:30,560
we're using before

2554
01:47:26,800 --> 01:47:30,560
is just the corner code minus one

2555
01:47:31,039 --> 01:47:35,760
um and that just just converts it back

2556
01:47:33,520 --> 01:47:36,880
to a true referral value we couldn't use

2557
01:47:35,760 --> 01:47:39,280
the trend values here because we need

2558
01:47:36,880 --> 01:47:41,359
zero which is the cleared state uh to

2559
01:47:39,279 --> 01:47:42,479
indicate that we haven't tested yet

2560
01:47:41,359 --> 01:47:46,238
right

2561
01:47:42,479 --> 01:47:47,279
and then what we need is in the actual

2562
01:47:46,238 --> 01:47:48,559
uh

2563
01:47:47,279 --> 01:47:50,960
in the case where you're embedded we

2564
01:47:48,560 --> 01:47:53,840
need that repulsion vector

2565
01:47:50,960 --> 01:47:56,158
um so the repulsion vector would get set

2566
01:47:53,840 --> 01:47:58,800
in here as well

2567
01:47:56,158 --> 01:48:01,920
so like that uh

2568
01:47:58,800 --> 01:48:01,920
i don't even know what we called it

2569
01:48:03,039 --> 01:48:08,399
we called it

2570
01:48:05,439 --> 01:48:08,399
embedder

2571
01:48:09,679 --> 01:48:13,760
right

2572
01:48:11,118 --> 01:48:14,960
so in here we would look uh and grab

2573
01:48:13,760 --> 01:48:17,119
these out

2574
01:48:14,960 --> 01:48:19,600
and just say okay

2575
01:48:17,118 --> 01:48:22,479
that's the new embedder

2576
01:48:19,600 --> 01:48:25,360
and uh we're gonna store whatever the

2577
01:48:22,479 --> 01:48:28,000
the field you know kicked us back

2578
01:48:25,359 --> 01:48:28,000
at that point

2579
01:48:28,319 --> 01:48:31,920
should probably name them equivalently

2580
01:48:30,000 --> 01:48:34,000
so you know maybe maybe we should have

2581
01:48:31,920 --> 01:48:36,399
just done this

2582
01:48:34,000 --> 01:48:39,600
um repulsion

2583
01:48:36,399 --> 01:48:42,319
right repulsion

2584
01:48:39,600 --> 01:48:45,320
repulsion uh

2585
01:48:42,319 --> 01:48:45,319
oops

2586
01:48:48,719 --> 01:48:52,000
so

2587
01:48:49,439 --> 01:48:53,678
that way you can at least tell like what

2588
01:48:52,000 --> 01:48:55,920
are these things

2589
01:48:53,679 --> 01:48:57,719
they like line up right so occupied and

2590
01:48:55,920 --> 01:49:00,880
repulsion line up with occupied and

2591
01:48:57,719 --> 01:49:03,439
repulsion um and

2592
01:49:00,880 --> 01:49:04,719
you know it's clear like how that code

2593
01:49:03,439 --> 01:49:07,118
flows through instead of it being sort

2594
01:49:04,719 --> 01:49:08,319
of you know arbitrary and weird

2595
01:49:07,118 --> 01:49:10,799
because i was just kind of naming them

2596
01:49:08,319 --> 01:49:12,960
off the cuff

2597
01:49:10,800 --> 01:49:15,840
uh as we went

2598
01:49:12,960 --> 01:49:15,840
so

2599
01:49:18,800 --> 01:49:25,239
where is that

2600
01:49:21,118 --> 01:49:25,238
grid part of things

2601
01:49:31,118 --> 01:49:33,759
there we go

2602
01:49:32,880 --> 01:49:35,679
um

2603
01:49:33,760 --> 01:49:37,760
so in here i just change this to

2604
01:49:35,679 --> 01:49:40,079
repulsion now

2605
01:49:37,760 --> 01:49:43,520
uh and it should be good to go and so

2606
01:49:40,079 --> 01:49:46,960
when we uh look up all this stuff now

2607
01:49:43,520 --> 01:49:49,199
uh all we're gonna do is just say okay

2608
01:49:46,960 --> 01:49:50,480
you know and and maybe i should have the

2609
01:49:49,198 --> 01:49:52,960
repulsion

2610
01:49:50,479 --> 01:49:55,959
uh pointer here

2611
01:49:52,960 --> 01:49:55,960
um

2612
01:49:56,639 --> 01:49:59,760
snapped the same way

2613
01:50:00,399 --> 01:50:07,118
like so

2614
01:50:02,000 --> 01:50:07,118
uh and so we just say like okay uh the

2615
01:50:07,359 --> 01:50:11,158
the repulsion vector

2616
01:50:11,198 --> 01:50:15,039
we're going to sum

2617
01:50:13,359 --> 01:50:18,319
like so

2618
01:50:15,039 --> 01:50:19,019
and we're going to write to it here oops

2619
01:50:18,319 --> 01:50:22,219
repulsion

2620
01:50:19,020 --> 01:50:22,219
[Music]

2621
01:50:22,840 --> 01:50:26,400
uh

2622
01:50:24,399 --> 01:50:27,920
and then i think we've got roughly what

2623
01:50:26,399 --> 01:50:31,118
we want right

2624
01:50:27,920 --> 01:50:33,760
uh so now we just do this computation

2625
01:50:31,118 --> 01:50:35,839
uh of check corners

2626
01:50:33,760 --> 01:50:39,520
it produces all the stuff we need but in

2627
01:50:35,840 --> 01:50:43,279
theory it also caches the values

2628
01:50:39,520 --> 01:50:43,280
so that we don't have this problem

2629
01:50:43,439 --> 01:50:46,960
where we're computing everything over

2630
01:50:45,359 --> 01:50:49,039
and over and over and over and over and

2631
01:50:46,960 --> 01:50:51,439
over and over and over again

2632
01:50:49,039 --> 01:50:53,039
even though we already know the answer

2633
01:50:51,439 --> 01:50:55,359
which again is just a way of like

2634
01:50:53,039 --> 01:50:56,719
alleviating some of the stress before we

2635
01:50:55,359 --> 01:50:58,399
actually do the optimization of a

2636
01:50:56,719 --> 01:50:59,359
spatial partition which we desperately

2637
01:50:58,399 --> 01:51:00,158
need

2638
01:50:59,359 --> 01:51:02,238
um

2639
01:51:00,158 --> 01:51:03,279
so we'll go from there

2640
01:51:02,238 --> 01:51:07,439
the

2641
01:51:03,279 --> 01:51:09,679
stack needs an address uh

2642
01:51:07,439 --> 01:51:12,879
what else so now

2643
01:51:09,679 --> 01:51:13,760
um we have the problem of

2644
01:51:12,880 --> 01:51:16,400
we

2645
01:51:13,760 --> 01:51:17,760
need to actually use this corners part

2646
01:51:16,399 --> 01:51:20,759
now

2647
01:51:17,760 --> 01:51:20,760
um

2648
01:51:21,279 --> 01:51:24,319
when we do our lookups

2649
01:51:22,960 --> 01:51:26,079
so

2650
01:51:24,319 --> 01:51:28,158
that kind of thing

2651
01:51:26,079 --> 01:51:29,519
uh and in here i don't know if we want

2652
01:51:28,158 --> 01:51:31,279
to pull this out or not if we probably

2653
01:51:29,520 --> 01:51:34,480
don't have to so we can probably just do

2654
01:51:31,279 --> 01:51:36,238
it this way if four coder will let us

2655
01:51:34,479 --> 01:51:38,399
um

2656
01:51:36,238 --> 01:51:38,399
go

2657
01:51:40,560 --> 01:51:43,679
and that's all we should really need to

2658
01:51:41,760 --> 01:51:45,280
do

2659
01:51:43,679 --> 01:51:47,840
should probably just let it indent this

2660
01:51:45,279 --> 01:51:50,960
however it wants

2661
01:51:47,840 --> 01:51:50,960
since that's what it wants

2662
01:51:56,639 --> 01:51:59,800
all right

2663
01:52:02,158 --> 01:52:04,399
um

2664
01:52:05,359 --> 01:52:08,479
no

2665
01:52:06,158 --> 01:52:08,479
real

2666
01:52:10,800 --> 01:52:16,480
other things to do now i think uh so

2667
01:52:14,880 --> 01:52:18,800
we should be good

2668
01:52:16,479 --> 01:52:21,439
uh and

2669
01:52:18,800 --> 01:52:23,760
this has to actually return its result

2670
01:52:21,439 --> 01:52:27,919
but i think that's roughly what we want

2671
01:52:23,760 --> 01:52:28,880
and now it will cache those result codes

2672
01:52:27,920 --> 01:52:32,000
uh

2673
01:52:28,880 --> 01:52:33,199
correctly now we need to

2674
01:52:32,000 --> 01:52:34,479
make sure we actually set everything in

2675
01:52:33,198 --> 01:52:36,559
here those are the only two fields we

2676
01:52:34,479 --> 01:52:37,029
set those i think it's okay

2677
01:52:36,560 --> 01:52:40,200
um

2678
01:52:37,029 --> 01:52:40,199
[Music]

2679
01:52:42,880 --> 01:52:48,960
the embedded part we set at the bottom

2680
01:52:45,840 --> 01:52:50,719
so yeah i think it's all set now

2681
01:52:48,960 --> 01:52:53,279
um so we should probably step through

2682
01:52:50,719 --> 01:52:55,118
that uh but but it's basically the

2683
01:52:53,279 --> 01:52:56,960
correct thing now right

2684
01:52:55,118 --> 01:52:59,039
okay so see you can see why i asserted

2685
01:52:56,960 --> 01:53:00,880
this right we've got a problem here so

2686
01:52:59,039 --> 01:53:01,760
the corner i

2687
01:53:00,880 --> 01:53:04,639
is

2688
01:53:01,760 --> 01:53:06,960
exceeds its authority there

2689
01:53:04,639 --> 01:53:06,960
um

2690
01:53:09,920 --> 01:53:16,800
i'm not sure

2691
01:53:12,800 --> 01:53:17,679
what we want to do with that

2692
01:53:16,800 --> 01:53:19,840
um

2693
01:53:17,679 --> 01:53:22,319
or how that actually happened i should

2694
01:53:19,840 --> 01:53:24,639
probably uh go into debug to check that

2695
01:53:22,319 --> 01:53:27,599
but you can see here like where it it's

2696
01:53:24,639 --> 01:53:29,760
asking

2697
01:53:27,599 --> 01:53:30,960
for something that's clearly out of

2698
01:53:29,760 --> 01:53:32,320
bounds

2699
01:53:30,960 --> 01:53:33,599
uh

2700
01:53:32,319 --> 01:53:37,799
you know another way to write this that

2701
01:53:33,599 --> 01:53:37,800
probably was smarter was like this

2702
01:53:40,560 --> 01:53:44,800
right

2703
01:53:41,359 --> 01:53:44,799
it's a little bit easier to read

2704
01:53:45,039 --> 01:53:49,118
um

2705
01:53:47,319 --> 01:53:52,479
[Music]

2706
01:53:49,118 --> 01:53:52,479
oh the stretching

2707
01:53:52,840 --> 01:53:56,319
okay so

2708
01:54:06,399 --> 01:54:09,839
so i'm not sure

2709
01:54:13,840 --> 01:54:16,079
i

2710
01:54:14,639 --> 01:54:20,039
i'm not sure

2711
01:54:16,079 --> 01:54:20,039
why is this 2-2-2

2712
01:54:22,158 --> 01:54:28,319
shouldn't this be one one one

2713
01:54:25,599 --> 01:54:31,840
that's probably the bug

2714
01:54:28,319 --> 01:54:32,479
we were like over testing

2715
01:54:31,840 --> 01:54:35,199
the thing

2716
01:54:32,479 --> 01:54:37,759
[Music]

2717
01:54:35,198 --> 01:54:38,879
no i guess it is two two two because

2718
01:54:37,760 --> 01:54:40,639
it's

2719
01:54:38,880 --> 01:54:43,599
one one one would only test the zero

2720
01:54:40,639 --> 01:54:46,880
point so it means it has zero and one

2721
01:54:43,599 --> 01:54:49,440
um so so that's fine

2722
01:54:46,880 --> 01:54:51,760
and we should always so let's see let's

2723
01:54:49,439 --> 01:54:53,759
put in a different assertion here

2724
01:54:51,760 --> 01:54:56,239
um so let's assert

2725
01:54:53,760 --> 01:54:56,239
this one

2726
01:54:57,039 --> 01:55:01,198
on the outside that the cell that we

2727
01:54:59,920 --> 01:55:02,880
pass in

2728
01:55:01,198 --> 01:55:04,479
isn't incorrect

2729
01:55:02,880 --> 01:55:06,000
because we don't really know like it

2730
01:55:04,479 --> 01:55:08,079
could be that there's a bug in the

2731
01:55:06,000 --> 01:55:09,520
interior of the routine

2732
01:55:08,079 --> 01:55:11,760
uh but let's

2733
01:55:09,520 --> 01:55:13,599
but you know the presumable reason that

2734
01:55:11,760 --> 01:55:14,880
this fails is because someone passes a

2735
01:55:13,599 --> 01:55:19,840
bogus

2736
01:55:14,880 --> 01:55:19,840
value so let's take a look at that first

2737
01:55:22,158 --> 01:55:24,879
chris i don't actually know okay there

2738
01:55:23,439 --> 01:55:25,839
we go

2739
01:55:24,880 --> 01:55:27,679
um

2740
01:55:25,840 --> 01:55:29,920
so you can see it's as i expected which

2741
01:55:27,679 --> 01:55:31,199
is okay so our check corners routine is

2742
01:55:29,920 --> 01:55:33,279
fine

2743
01:55:31,198 --> 01:55:35,439
um it's not the thing causing the

2744
01:55:33,279 --> 01:55:37,439
problem the thing causing the problem is

2745
01:55:35,439 --> 01:55:39,198
that somebody here

2746
01:55:37,439 --> 01:55:42,238
is allowing a value to get pushed in

2747
01:55:39,198 --> 01:55:44,000
that is outside the bounds

2748
01:55:42,238 --> 01:55:46,158
of what's allowed now what's weird about

2749
01:55:44,000 --> 01:55:49,599
that is i thought

2750
01:55:46,158 --> 01:55:49,598
that the push voxel stack

2751
01:55:51,118 --> 01:55:53,359
um

2752
01:55:53,840 --> 01:55:58,960
would have prevented that from happening

2753
01:55:56,800 --> 01:56:00,400
so like

2754
01:55:58,960 --> 01:56:02,639
we're checking to see

2755
01:56:00,399 --> 01:56:03,759
if it's in is in bounds

2756
01:56:02,639 --> 01:56:04,480
right

2757
01:56:03,760 --> 01:56:08,800
uh

2758
01:56:04,479 --> 01:56:11,799
which is is looking at that cell count

2759
01:56:08,800 --> 01:56:11,800
um

2760
01:56:16,000 --> 01:56:22,319
so i guess the problem okay so the

2761
01:56:19,439 --> 01:56:22,319
problem we have

2762
01:56:23,439 --> 01:56:31,039
must then be that this process can

2763
01:56:27,039 --> 01:56:35,039
produce a one larger version

2764
01:56:31,039 --> 01:56:35,039
yeah and it can actually

2765
01:56:38,238 --> 01:56:41,959
that's actually true

2766
01:56:42,319 --> 01:56:46,840
so i suppose that this

2767
01:56:56,719 --> 01:57:01,760
i suppose that the problem here is that

2768
01:56:59,039 --> 01:57:03,760
this actually always has to be one less

2769
01:57:01,760 --> 01:57:05,280
than the voxel dam

2770
01:57:03,760 --> 01:57:06,699
right

2771
01:57:05,279 --> 01:57:08,639
because we're expanding

2772
01:57:06,699 --> 01:57:09,679
[Music]

2773
01:57:08,639 --> 01:57:12,079
uh

2774
01:57:09,679 --> 01:57:13,840
we expand that in fact it has to be two

2775
01:57:12,079 --> 01:57:17,599
less than the voxel dim

2776
01:57:13,840 --> 01:57:19,360
because we expand the voxel

2777
01:57:17,599 --> 01:57:22,079
here

2778
01:57:19,359 --> 01:57:23,039
um by one on either side

2779
01:57:22,079 --> 01:57:26,079
so

2780
01:57:23,039 --> 01:57:27,920
this has to be clamped

2781
01:57:26,079 --> 01:57:30,319
to

2782
01:57:27,920 --> 01:57:32,560
underneath that size

2783
01:57:30,319 --> 01:57:32,559
right

2784
01:57:33,599 --> 01:57:37,920
um otherwise it easily could do that i

2785
01:57:36,319 --> 01:57:41,279
would think um of course it's still

2786
01:57:37,920 --> 01:57:41,279
doing it which is weird yeah

2787
01:57:41,760 --> 01:57:49,000
um

2788
01:57:44,000 --> 01:57:49,000
so that has to be clamped for sure

2789
01:58:02,800 --> 01:58:06,560
and i guess i don't know now how that

2790
01:58:04,880 --> 01:58:08,000
would produce the bet so that was my

2791
01:58:06,560 --> 01:58:09,199
only hypothesis there so i guess we'll

2792
01:58:08,000 --> 01:58:10,800
have to investigate further because you

2793
01:58:09,198 --> 01:58:14,319
look at this

2794
01:58:10,800 --> 01:58:16,239
it's like okay quarter a b or min corner

2795
01:58:14,319 --> 01:58:18,559
you know we produce the thing we check

2796
01:58:16,238 --> 01:58:21,559
we do the span we round i suppose the

2797
01:58:18,560 --> 01:58:21,560
rounding

2798
01:58:29,118 --> 01:58:32,719
could also do that

2799
01:58:31,039 --> 01:58:35,519
uh so we probably have to eliminate the

2800
01:58:32,719 --> 01:58:36,880
rounding as well but that's probably

2801
01:58:35,520 --> 01:58:39,040
still not enough yeah you can see it

2802
01:58:36,880 --> 01:58:42,319
doesn't it does it like immediately

2803
01:58:39,039 --> 01:58:44,158
right so it's wrong immediately

2804
01:58:42,319 --> 01:58:45,599
which means we've got some like really

2805
01:58:44,158 --> 01:58:51,238
bad bug in here that i'm just not

2806
01:58:45,599 --> 01:58:51,239
thinking of what it exactly is um

2807
01:59:03,920 --> 01:59:06,920
hmm

2808
01:59:24,719 --> 01:59:29,679
uh so this should fault whenever we get

2809
01:59:27,198 --> 01:59:31,678
this problem okay so z what is the voxel

2810
01:59:29,679 --> 01:59:35,639
dim in fact let me run in debug mode so

2811
01:59:31,679 --> 01:59:35,639
we can just inspect these values

2812
01:59:51,198 --> 01:59:57,079
so

2813
01:59:52,319 --> 01:59:57,079
let's take a look at voxel dim

2814
01:59:58,000 --> 02:00:01,679
uh

2815
01:59:59,760 --> 02:00:04,400
and you can see there like a yeah i mean

2816
02:00:01,679 --> 02:00:07,520
so the voxel dim sac dim is eight

2817
02:00:04,399 --> 02:00:08,719
right and we're already at z8 so how did

2818
02:00:07,520 --> 02:00:10,080
this happen

2819
02:00:08,719 --> 02:00:12,639
let's

2820
02:00:10,079 --> 02:00:14,880
take a look at these values here so the

2821
02:00:12,639 --> 02:00:17,199
voxel starting corner

2822
02:00:14,880 --> 02:00:17,199
oops

2823
02:00:19,118 --> 02:00:20,880
um

2824
02:00:19,449 --> 02:00:23,359
[Music]

2825
02:00:20,880 --> 02:00:23,359
you know

2826
02:00:23,920 --> 02:00:28,319
seems like a voxel starting corner to me

2827
02:00:27,439 --> 02:00:30,799
uh

2828
02:00:28,319 --> 02:00:32,479
the delta p clamp

2829
02:00:30,800 --> 02:00:34,800
is what

2830
02:00:32,479 --> 02:00:34,799
um

2831
02:00:35,439 --> 02:00:40,759
i guess let me look at the delta p i

2832
02:00:37,760 --> 02:00:40,760
first

2833
02:00:45,039 --> 02:00:51,118
so kind of surprising

2834
02:00:47,439 --> 02:00:55,359
because based on that

2835
02:00:51,118 --> 02:00:56,238
all of those values are clean

2836
02:00:55,359 --> 02:00:58,880
like

2837
02:00:56,238 --> 02:01:01,839
they're properly clamped to below

2838
02:00:58,880 --> 02:01:01,840
a span of eight

2839
02:01:03,920 --> 02:01:06,158
so

2840
02:01:06,238 --> 02:01:09,839
kind of confused

2841
02:01:11,840 --> 02:01:17,679
um

2842
02:01:13,118 --> 02:01:17,679
all right so what's the voxel span

2843
02:01:20,960 --> 02:01:26,319
the voxel span is seven three eight so

2844
02:01:23,520 --> 02:01:28,560
it is wrong it's corner a

2845
02:01:26,319 --> 02:01:31,559
corner b

2846
02:01:28,560 --> 02:01:31,560
um

2847
02:01:46,639 --> 02:01:49,639
hmm

2848
02:01:54,079 --> 02:01:57,599
oh

2849
02:01:55,760 --> 02:02:00,560
wow

2850
02:01:57,599 --> 02:02:03,599
i'm stupid i'm looking at the dim so

2851
02:02:00,560 --> 02:02:05,440
this is actually totally allowed right

2852
02:02:03,599 --> 02:02:07,840
um so that's fine

2853
02:02:05,439 --> 02:02:08,638
that was not the case i cared about

2854
02:02:07,840 --> 02:02:11,199
uh

2855
02:02:08,639 --> 02:02:13,118
my bad there i i care about the case

2856
02:02:11,198 --> 02:02:14,799
where it's greater than eight in the

2857
02:02:13,118 --> 02:02:16,639
case of the dimension

2858
02:02:14,800 --> 02:02:18,800
uh not the case where it's less than

2859
02:02:16,639 --> 02:02:21,520
eight so so this is actually what we

2860
02:02:18,800 --> 02:02:21,520
wanted to look at

2861
02:02:21,920 --> 02:02:25,679
not the other one

2862
02:02:23,520 --> 02:02:29,440
so here we have an x of nine

2863
02:02:25,679 --> 02:02:33,118
uh so the delta p i here is negative six

2864
02:02:29,439 --> 02:02:34,799
uh and so the question is how did we get

2865
02:02:33,118 --> 02:02:36,158
that value

2866
02:02:34,800 --> 02:02:37,440
um

2867
02:02:36,158 --> 02:02:41,479
so

2868
02:02:37,439 --> 02:02:41,479
yeah so negative 0.125

2869
02:02:42,158 --> 02:02:49,920
um 0.625 if we add these together

2870
02:02:47,439 --> 02:02:52,158
we get .75

2871
02:02:49,920 --> 02:02:54,560
which is a span of

2872
02:02:52,158 --> 02:02:54,559
six

2873
02:02:55,039 --> 02:02:58,880
so i guess where this is coming from is

2874
02:02:57,359 --> 02:03:02,479
we add

2875
02:02:58,880 --> 02:03:04,880
one on the seldom side and two

2876
02:03:02,479 --> 02:03:07,879
on the other side for expansion

2877
02:03:04,880 --> 02:03:07,880
um

2878
02:03:15,198 --> 02:03:20,879
so i suppose the only real problem here

2879
02:03:18,238 --> 02:03:23,839
is is that the negative two

2880
02:03:20,880 --> 02:03:25,199
if you clamp to six you can still add

2881
02:03:23,840 --> 02:03:27,520
three

2882
02:03:25,198 --> 02:03:29,279
here and here in the worst case

2883
02:03:27,520 --> 02:03:31,280
so is it really just the case that this

2884
02:03:29,279 --> 02:03:33,039
just should be a negative three i mean i

2885
02:03:31,279 --> 02:03:34,800
guess i'm not sure but it seems like

2886
02:03:33,039 --> 02:03:37,359
that's actually the case

2887
02:03:34,800 --> 02:03:39,840
so i don't know maybe that was actually

2888
02:03:37,359 --> 02:03:42,079
the only problem

2889
02:03:39,840 --> 02:03:44,239
i'm still not super happy with this code

2890
02:03:42,079 --> 02:03:46,719
i feel like we need to have a better way

2891
02:03:44,238 --> 02:03:48,718
it's close it's closer than it was

2892
02:03:46,719 --> 02:03:50,960
but that voxel-bound code still is kind

2893
02:03:48,719 --> 02:03:52,560
of feels just sloppy right it doesn't

2894
02:03:50,960 --> 02:03:54,639
really feel right

2895
02:03:52,560 --> 02:03:56,560
um so i don't know

2896
02:03:54,639 --> 02:03:59,199
but let's give it a try now that with

2897
02:03:56,560 --> 02:04:02,639
that clamping in place just to see

2898
02:03:59,198 --> 02:04:04,559
um if we're still having that problem

2899
02:04:02,639 --> 02:04:07,440
but you can see why those asserts are so

2900
02:04:04,560 --> 02:04:08,320
valuable right like a lot of times i

2901
02:04:07,439 --> 02:04:10,879
know

2902
02:04:08,319 --> 02:04:12,639
where the risk is

2903
02:04:10,880 --> 02:04:14,000
but by inspecting the code you can't

2904
02:04:12,639 --> 02:04:16,480
necessarily tell when you're going to

2905
02:04:14,000 --> 02:04:18,238
hit the risk right so the really great

2906
02:04:16,479 --> 02:04:19,839
part about assertions is they allow you

2907
02:04:18,238 --> 02:04:21,439
to use your intuition about what's

2908
02:04:19,840 --> 02:04:24,000
probably going to fail

2909
02:04:21,439 --> 02:04:26,879
um to actually catch the failures before

2910
02:04:24,000 --> 02:04:28,880
they cause really serious problems right

2911
02:04:26,880 --> 02:04:30,560
um because you'll get assertions rather

2912
02:04:28,880 --> 02:04:32,400
than your code just like dying at some

2913
02:04:30,560 --> 02:04:34,159
point you don't know why

2914
02:04:32,399 --> 02:04:35,679
um

2915
02:04:34,158 --> 02:04:37,359
uh so yeah

2916
02:04:35,679 --> 02:04:38,158
um so

2917
02:04:37,359 --> 02:04:39,839
uh

2918
02:04:38,158 --> 02:04:41,359
you know actually it's looking better

2919
02:04:39,840 --> 02:04:43,199
now you can see we still got a corner

2920
02:04:41,359 --> 02:04:45,359
cut catch there

2921
02:04:43,198 --> 02:04:46,960
uh so we've got a bug you know we've

2922
02:04:45,359 --> 02:04:47,759
still got some bugs

2923
02:04:46,960 --> 02:04:49,760
um

2924
02:04:47,760 --> 02:04:50,880
but it is looking a little bit better uh

2925
02:04:49,760 --> 02:04:52,719
so you see like we've got some kind of

2926
02:04:50,880 --> 02:04:54,078
an embed bug right it got caught in that

2927
02:04:52,719 --> 02:04:55,359
corner

2928
02:04:54,078 --> 02:04:57,039
um

2929
02:04:55,359 --> 02:04:58,960
fortunately we now do corner rolling

2930
02:04:57,039 --> 02:05:00,319
properly in the case that we were trying

2931
02:04:58,960 --> 02:05:02,399
to solve

2932
02:05:00,319 --> 02:05:03,679
both sides which is good

2933
02:05:02,399 --> 02:05:04,879
so we're getting closer but i think

2934
02:05:03,679 --> 02:05:06,800
we're going to need another day of

2935
02:05:04,880 --> 02:05:08,800
debugging here to like clean this stuff

2936
02:05:06,800 --> 02:05:10,159
up and then we also need to put back in

2937
02:05:08,800 --> 02:05:13,520
the embed

2938
02:05:10,158 --> 02:05:15,679
code because the embed code is necessary

2939
02:05:13,520 --> 02:05:16,800
it's pretty easy for us to do now i

2940
02:05:15,679 --> 02:05:19,800
think

2941
02:05:16,800 --> 02:05:19,800
um

2942
02:05:21,359 --> 02:05:25,039
we just have to augment the stack to

2943
02:05:23,118 --> 02:05:26,319
have the embed code in it uh so that's

2944
02:05:25,039 --> 02:05:27,840
not that bad

2945
02:05:26,319 --> 02:05:29,840
right um

2946
02:05:27,840 --> 02:05:31,840
but so you know honestly we're getting

2947
02:05:29,840 --> 02:05:34,800
close uh the code's still just a little

2948
02:05:31,840 --> 02:05:37,119
ugly we gotta fix some of it um

2949
02:05:34,800 --> 02:05:39,119
and and we can definitely do that

2950
02:05:37,118 --> 02:05:40,319
uh but you know yeah it's still a little

2951
02:05:39,118 --> 02:05:42,639
bit off

2952
02:05:40,319 --> 02:05:42,639
um

2953
02:05:42,719 --> 02:05:47,118
but it's definitely feeling much nicer

2954
02:05:44,800 --> 02:05:47,119
now

2955
02:05:47,198 --> 02:05:50,238
you can see how nice and slippery that

2956
02:05:48,719 --> 02:05:51,118
is

2957
02:05:50,238 --> 02:05:53,279
um

2958
02:05:51,118 --> 02:05:56,158
and so so we just have we have a little

2959
02:05:53,279 --> 02:05:58,158
bit of a problem i think with with

2960
02:05:56,158 --> 02:06:00,000
how those bounds are picked

2961
02:05:58,158 --> 02:06:01,519
still is not perfect

2962
02:06:00,000 --> 02:06:03,920
we'll fix the embed stuff but we're

2963
02:06:01,520 --> 02:06:06,159
getting much better right

2964
02:06:03,920 --> 02:06:06,158
um

2965
02:06:07,599 --> 02:06:10,480
so that seems really good

2966
02:06:09,439 --> 02:06:12,078
um

2967
02:06:10,479 --> 02:06:14,078
the definitely positive improvements

2968
02:06:12,078 --> 02:06:18,479
there so you can see that stick right

2969
02:06:14,078 --> 02:06:18,479
like that's an actual bug um

2970
02:06:18,880 --> 02:06:22,239
where you can get in a position in the

2971
02:06:20,399 --> 02:06:23,519
corner where you can't escape

2972
02:06:22,238 --> 02:06:25,118
uh

2973
02:06:23,520 --> 02:06:27,679
and i

2974
02:06:25,118 --> 02:06:29,279
think that's just because of the we have

2975
02:06:27,679 --> 02:06:31,760
a bug that allows you get embedded and

2976
02:06:29,279 --> 02:06:33,439
then we don't have the unembedding

2977
02:06:31,760 --> 02:06:35,760
um so we definitely still have some bugs

2978
02:06:33,439 --> 02:06:37,519
in there like the unembedding code now

2979
02:06:35,760 --> 02:06:39,520
is not actually that

2980
02:06:37,520 --> 02:06:42,480
not not very difficult because we have

2981
02:06:39,520 --> 02:06:43,440
the ability to call check corners early

2982
02:06:42,479 --> 02:06:46,559
um

2983
02:06:43,439 --> 02:06:50,000
so like if you looked at how the embed

2984
02:06:46,560 --> 02:06:50,000
stuff worked you could say

2985
02:06:50,719 --> 02:06:53,719
um

2986
02:07:04,560 --> 02:07:09,440
you could do an initial check

2987
02:07:07,359 --> 02:07:10,880
i i'm gonna say this for next week uh

2988
02:07:09,439 --> 02:07:14,078
but you could do an initial check here

2989
02:07:10,880 --> 02:07:16,400
where you just do like you know

2990
02:07:14,078 --> 02:07:18,799
do initial check uh to see if we're

2991
02:07:16,399 --> 02:07:18,799
embedded

2992
02:07:19,039 --> 02:07:21,920
and use that

2993
02:07:20,719 --> 02:07:24,880
to

2994
02:07:21,920 --> 02:07:27,118
allow or disallow

2995
02:07:24,880 --> 02:07:28,319
stack um but i think probably what we'd

2996
02:07:27,118 --> 02:07:30,158
need

2997
02:07:28,319 --> 02:07:32,158
uh is in here

2998
02:07:30,158 --> 02:07:35,439
this would probably be need

2999
02:07:32,158 --> 02:07:36,799
this would probably be necessary

3000
02:07:35,439 --> 02:07:39,039
uh

3001
02:07:36,800 --> 02:07:41,679
to create it

3002
02:07:39,039 --> 02:07:44,880
as a are we embedded

3003
02:07:41,679 --> 02:07:47,118
flag that goes with the stack

3004
02:07:44,880 --> 02:07:47,118
right

3005
02:07:52,319 --> 02:07:57,359
all right we can do some brief cues and

3006
02:07:55,198 --> 02:08:00,000
a's here do i still have the ability to

3007
02:07:57,359 --> 02:08:00,000
type this

3008
02:08:06,719 --> 02:08:10,880
insobot is like a national treasure

3009
02:08:13,118 --> 02:08:16,920
i think we can all agree

3010
02:09:24,158 --> 02:09:28,279
insobot's question is fantastic

3011
02:10:30,319 --> 02:10:33,039
i've been real down i'm programming

3012
02:10:31,599 --> 02:10:35,360
lately have you ever had a phase where

3013
02:10:33,039 --> 02:10:36,479
you were just totally over computers uh

3014
02:10:35,359 --> 02:10:37,519
no

3015
02:10:36,479 --> 02:10:39,759
so

3016
02:10:37,520 --> 02:10:42,480
i will say that i hate

3017
02:10:39,760 --> 02:10:44,719
programming publicly now like i do not

3018
02:10:42,479 --> 02:10:46,078
like doing

3019
02:10:44,719 --> 02:10:49,118
uh

3020
02:10:46,078 --> 02:10:52,238
like like i would if i could rewind

3021
02:10:49,118 --> 02:10:54,078
and ha and know what the current state

3022
02:10:52,238 --> 02:10:55,759
of programming

3023
02:10:54,078 --> 02:10:57,759
and like the development community would

3024
02:10:55,760 --> 02:10:59,599
be today

3025
02:10:57,760 --> 02:11:01,599
i would never have done handmade hero

3026
02:10:59,599 --> 02:11:03,119
and i definitely would not have started

3027
02:11:01,599 --> 02:11:04,800
my own company

3028
02:11:03,118 --> 02:11:06,559
um

3029
02:11:04,800 --> 02:11:07,760
i would just go take a research and

3030
02:11:06,560 --> 02:11:09,520
development position somewhere where i

3031
02:11:07,760 --> 02:11:12,079
don't have to ever interact or have a

3032
02:11:09,520 --> 02:11:13,360
twitter profile or any of those things

3033
02:11:12,078 --> 02:11:16,719
right

3034
02:11:13,359 --> 02:11:19,279
um so development community absolutely

3035
02:11:16,719 --> 02:11:21,198
um the difference between

3036
02:11:19,279 --> 02:11:25,198
interacting with developers 30 years ago

3037
02:11:21,198 --> 02:11:26,238
and interacting with them today it is

3038
02:11:25,198 --> 02:11:27,598
there's no

3039
02:11:26,238 --> 02:11:30,479
i can't even describe to you how much

3040
02:11:27,599 --> 02:11:32,239
worse it is um

3041
02:11:30,479 --> 02:11:35,198
it's

3042
02:11:32,238 --> 02:11:37,118
it's indescribably worse

3043
02:11:35,198 --> 02:11:40,158
uh

3044
02:11:37,118 --> 02:11:42,559
so that part yeah but the programming

3045
02:11:40,158 --> 02:11:43,920
computers is awesome still even to to

3046
02:11:42,560 --> 02:11:44,719
this day

3047
02:11:43,920 --> 02:11:46,800
um

3048
02:11:44,719 --> 02:11:49,039
and to the extent that you

3049
02:11:46,800 --> 02:11:49,039
uh

3050
02:11:49,359 --> 02:11:52,479
to the extent that you don't want to do

3051
02:11:50,800 --> 02:11:54,079
it as a job i can totally understand

3052
02:11:52,479 --> 02:11:56,000
because a lot of jobs out there are

3053
02:11:54,078 --> 02:11:57,359
terrible because they involve exactly

3054
02:11:56,000 --> 02:11:59,439
all the things that i'm referring to

3055
02:11:57,359 --> 02:12:02,319
when i say interacting with

3056
02:11:59,439 --> 02:12:03,118
developers sucks

3057
02:12:02,319 --> 02:12:04,479
so

3058
02:12:03,118 --> 02:12:07,198
i could understand not wanting to do it

3059
02:12:04,479 --> 02:12:08,799
as a job but not wanting to do it at all

3060
02:12:07,198 --> 02:12:10,559
doesn't really make much sense to me

3061
02:12:08,800 --> 02:12:12,480
because uh

3062
02:12:10,560 --> 02:12:14,960
you know i mean you can buy a raspberry

3063
02:12:12,479 --> 02:12:15,839
pi for forty dollars

3064
02:12:14,960 --> 02:12:18,719
um

3065
02:12:15,840 --> 02:12:21,039
and like program your own os for it and

3066
02:12:18,719 --> 02:12:24,000
just go to town man like there's so many

3067
02:12:21,039 --> 02:12:26,158
opportunities today for so cheap i used

3068
02:12:24,000 --> 02:12:27,359
to cost like thousands of dollars to get

3069
02:12:26,158 --> 02:12:28,960
a computer

3070
02:12:27,359 --> 02:12:31,839
that was powerful enough to do things

3071
02:12:28,960 --> 02:12:33,118
like rendering or whatever right

3072
02:12:31,840 --> 02:12:36,078
um

3073
02:12:33,118 --> 02:12:37,359
and so so i really think it's important

3074
02:12:36,078 --> 02:12:40,719
to

3075
02:12:37,359 --> 02:12:40,719
mentally distinguish

3076
02:12:40,880 --> 02:12:47,118
between the parts of being a developer

3077
02:12:43,279 --> 02:12:50,639
that suck because the modern

3078
02:12:47,118 --> 02:12:51,679
because the modern ideology broadly

3079
02:12:50,639 --> 02:12:53,440
speaking

3080
02:12:51,679 --> 02:12:56,800
in development and probably pretty much

3081
02:12:53,439 --> 02:12:57,159
everywhere is terrible and isn't good

3082
02:12:56,800 --> 02:12:58,560
um

3083
02:12:57,159 --> 02:13:01,198
[Music]

3084
02:12:58,560 --> 02:13:03,119
and is icky and gross

3085
02:13:01,198 --> 02:13:06,238
distinguishing that

3086
02:13:03,118 --> 02:13:08,559
from whether the act of programming when

3087
02:13:06,238 --> 02:13:11,839
you take the humans out of it is good or

3088
02:13:08,560 --> 02:13:13,520
bad is important because to me

3089
02:13:11,840 --> 02:13:14,840
programming today actually is still

3090
02:13:13,520 --> 02:13:16,400
really good

3091
02:13:14,840 --> 02:13:17,279
uh

3092
02:13:16,399 --> 02:13:19,598
it's

3093
02:13:17,279 --> 02:13:22,158
the fact that you probably don't really

3094
02:13:19,599 --> 02:13:23,520
get an opportunity to do it

3095
02:13:22,158 --> 02:13:24,559
without

3096
02:13:23,520 --> 02:13:25,840
um

3097
02:13:24,560 --> 02:13:27,520
you know

3098
02:13:25,840 --> 02:13:29,920
all of the crap

3099
02:13:27,520 --> 02:13:32,960
uh the the terrible ideology at most

3100
02:13:29,920 --> 02:13:35,039
companies the terrible ideology of most

3101
02:13:32,960 --> 02:13:37,520
developers

3102
02:13:35,039 --> 02:13:39,279
the terrible ideology of colleges or

3103
02:13:37,520 --> 02:13:40,400
universities

3104
02:13:39,279 --> 02:13:42,800
um

3105
02:13:40,399 --> 02:13:45,439
all of that it's important to understand

3106
02:13:42,800 --> 02:13:48,400
that is a temporal anomaly it is a

3107
02:13:45,439 --> 02:13:50,078
symptom of things like a failing society

3108
02:13:48,399 --> 02:13:50,960
right

3109
02:13:50,078 --> 02:13:54,000
um

3110
02:13:50,960 --> 02:13:55,920
it is not a symptom of a failing

3111
02:13:54,000 --> 02:13:58,078
computer

3112
02:13:55,920 --> 02:13:59,440
the act of using the computer is still

3113
02:13:58,078 --> 02:14:01,359
pretty great

3114
02:13:59,439 --> 02:14:03,839
and you can even if you are in a

3115
02:14:01,359 --> 02:14:06,078
position to do so you can even bypass

3116
02:14:03,840 --> 02:14:07,599
the parts that really suck like the you

3117
02:14:06,078 --> 02:14:09,840
know windows operating system or

3118
02:14:07,599 --> 02:14:11,360
something

3119
02:14:09,840 --> 02:14:12,960
and even the windows operating system

3120
02:14:11,359 --> 02:14:14,559
isn't that bad to use if you unplug it

3121
02:14:12,960 --> 02:14:16,560
from the internet if you just install

3122
02:14:14,560 --> 02:14:18,560
windows once unplug the computer from

3123
02:14:16,560 --> 02:14:20,000
the internet and program on it it's

3124
02:14:18,560 --> 02:14:21,840
actually fine

3125
02:14:20,000 --> 02:14:24,800
right

3126
02:14:21,840 --> 02:14:27,039
uh and you've also got linux so you can

3127
02:14:24,800 --> 02:14:29,920
and linux is totally fine too if you do

3128
02:14:27,039 --> 02:14:32,000
a similar thing if you find one

3129
02:14:29,920 --> 02:14:33,840
machine whose hardware linux runs on and

3130
02:14:32,000 --> 02:14:35,359
you install it once and then forget

3131
02:14:33,840 --> 02:14:37,279
about ever updating it again or using a

3132
02:14:35,359 --> 02:14:39,759
package manager and just go program on

3133
02:14:37,279 --> 02:14:42,399
it and and enjoy yourself

3134
02:14:39,760 --> 02:14:45,119
again that takes all of that garbage out

3135
02:14:42,399 --> 02:14:46,319
of there right

3136
02:14:45,118 --> 02:14:48,399
um

3137
02:14:46,319 --> 02:14:50,158
so i think

3138
02:14:48,399 --> 02:14:52,158
you know

3139
02:14:50,158 --> 02:14:54,078
i think that those are really important

3140
02:14:52,158 --> 02:14:55,519
things to separate i think computers are

3141
02:14:54,078 --> 02:14:57,198
still a lot of fun to program and i

3142
02:14:55,520 --> 02:14:58,480
think there's still a lot of fun

3143
02:14:57,198 --> 02:15:01,279
to use

3144
02:14:58,479 --> 02:15:05,839
if you are using them in the same way

3145
02:15:01,279 --> 02:15:07,759
that you used to use them in 1986

3146
02:15:05,840 --> 02:15:10,960
right

3147
02:15:07,760 --> 02:15:13,920
the problem is if you start to associate

3148
02:15:10,960 --> 02:15:16,319
computing with all of the bad ideologies

3149
02:15:13,920 --> 02:15:18,158
that have now infected computing as of

3150
02:15:16,319 --> 02:15:23,439
2020

3151
02:15:18,158 --> 02:15:26,799
you don't have to do that right um

3152
02:15:23,439 --> 02:15:29,279
if you can if you can't find a job

3153
02:15:26,800 --> 02:15:31,119
that allows you to not do that

3154
02:15:29,279 --> 02:15:33,679
then please still don't blame it on

3155
02:15:31,118 --> 02:15:37,198
computing just take a different job

3156
02:15:33,679 --> 02:15:41,118
right uh go find a different job to do

3157
02:15:37,198 --> 02:15:43,118
and do computing as your hobby right

3158
02:15:41,118 --> 02:15:43,920
and wait until

3159
02:15:43,118 --> 02:15:45,839
uh

3160
02:15:43,920 --> 02:15:47,760
you know the the

3161
02:15:45,840 --> 02:15:49,360
eventual reset or collapse of the

3162
02:15:47,760 --> 02:15:50,719
current uh

3163
02:15:49,359 --> 02:15:52,000
system

3164
02:15:50,719 --> 02:15:53,359
and

3165
02:15:52,000 --> 02:15:55,279
you know

3166
02:15:53,359 --> 02:15:57,198
maybe computing will be a job again some

3167
02:15:55,279 --> 02:15:59,118
some day but maybe it won't right so i

3168
02:15:57,198 --> 02:16:01,839
don't know go go

3169
02:15:59,118 --> 02:16:03,279
consider a different career path

3170
02:16:01,840 --> 02:16:05,360
that you'll be happy doing during the

3171
02:16:03,279 --> 02:16:09,559
day and you can still program on the

3172
02:16:05,359 --> 02:16:09,559
weekends that's what i would say

3173
02:16:24,800 --> 02:16:29,840
do you think it's safe to assume if a

3174
02:16:26,158 --> 02:16:32,000
cpu has avx-2 it has fma

3175
02:16:29,840 --> 02:16:35,679
oh no

3176
02:16:32,000 --> 02:16:37,120
it absolutely doesn't have fma

3177
02:16:35,679 --> 02:16:40,638
um

3178
02:16:37,120 --> 02:16:41,679
avx-2 cpus don't have fma

3179
02:16:40,638 --> 02:16:44,638
uh

3180
02:16:41,679 --> 02:16:46,799
as far as i know that if if avx2 cpus

3181
02:16:44,638 --> 02:16:49,839
have fma that's news to me

3182
02:16:46,799 --> 02:16:50,879
fma is an avx-512 extension as far as i

3183
02:16:49,840 --> 02:16:51,239
know

3184
02:16:50,879 --> 02:16:52,398
um

3185
02:16:51,239 --> 02:16:53,679
[Music]

3186
02:16:52,398 --> 02:16:55,920
i didn't think there was a fused

3187
02:16:53,679 --> 02:16:57,679
multiplier accumulate

3188
02:16:55,920 --> 02:17:02,000
um

3189
02:16:57,679 --> 02:17:05,280
in in avx2 uh other than for like 16-bit

3190
02:17:02,000 --> 02:17:07,200
integers there's like a 16-bit integer

3191
02:17:05,280 --> 02:17:09,599
f-mat or something

3192
02:17:07,200 --> 02:17:11,519
but but i don't think so

3193
02:17:09,599 --> 02:17:12,880
i could be wrong i mean

3194
02:17:11,519 --> 02:17:16,000
i i

3195
02:17:12,879 --> 02:17:18,239
very rarely do floating point work on

3196
02:17:16,000 --> 02:17:20,239
guaranteed avx ii com

3197
02:17:18,239 --> 02:17:22,000
parts because most time if i'm doing

3198
02:17:20,239 --> 02:17:24,558
floating point work it's for client code

3199
02:17:22,000 --> 02:17:26,840
and client code doesn't have avx2

3200
02:17:24,558 --> 02:17:28,478
usually you can usually only assume like

3201
02:17:26,840 --> 02:17:29,840
sse4

3202
02:17:28,478 --> 02:17:30,638
you know sometimes you don't even assume

3203
02:17:29,840 --> 02:17:34,000
that

3204
02:17:30,638 --> 02:17:36,879
uh depending on on it but

3205
02:17:34,000 --> 02:17:38,799
um if you look at the mad

3206
02:17:36,879 --> 02:17:43,518
listings here right so these are

3207
02:17:38,799 --> 02:17:46,159
multiply add instructions right um

3208
02:17:43,519 --> 02:17:48,639
you know uh which ones you have and

3209
02:17:46,159 --> 02:17:50,959
don't have so you can start to to check

3210
02:17:48,638 --> 02:17:52,959
things off so if you just want to say

3211
02:17:50,959 --> 02:17:54,638
um you were gonna limit yourself to the

3212
02:17:52,959 --> 02:17:57,759
things that were

3213
02:17:54,638 --> 02:18:01,279
uh prior to

3214
02:17:57,760 --> 02:18:04,159
uh avx 512 it's basically this list here

3215
02:18:01,280 --> 02:18:07,120
um you know maybe you could say uh some

3216
02:18:04,159 --> 02:18:08,159
of these but who knows right so if we're

3217
02:18:07,120 --> 02:18:10,319
just going to check yourself this you

3218
02:18:08,159 --> 02:18:13,200
can see this is what i was trying to say

3219
02:18:10,318 --> 02:18:14,799
when i said except if you count 16 bit

3220
02:18:13,200 --> 02:18:18,639
you can kind of see that there really

3221
02:18:14,799 --> 02:18:20,638
isn't any uh fused multiply add

3222
02:18:18,638 --> 02:18:25,119
uh available

3223
02:18:20,638 --> 02:18:26,879
in in pre avx 512 instruction sets

3224
02:18:25,120 --> 02:18:28,479
so so unless i misunderstood your

3225
02:18:26,879 --> 02:18:29,679
question

3226
02:18:28,478 --> 02:18:32,398
uh

3227
02:18:29,679 --> 02:18:33,840
to the best of my knowledge an avx-2

3228
02:18:32,398 --> 02:18:35,920
cpu

3229
02:18:33,840 --> 02:18:38,799
definitely doesn't have

3230
02:18:35,920 --> 02:18:43,120
a fused multiply accumulate you would

3231
02:18:38,799 --> 02:18:44,000
have to check the avx 512 support first

3232
02:18:43,120 --> 02:18:47,120
um

3233
02:18:44,000 --> 02:18:48,079
and if you check the avx 512 support

3234
02:18:47,120 --> 02:18:51,439
that

3235
02:18:48,079 --> 02:18:54,079
might indicate it but it also might not

3236
02:18:51,439 --> 02:18:56,079
so typically what you do is you don't

3237
02:18:54,079 --> 02:18:59,280
check any of these anyway if you want

3238
02:18:56,079 --> 02:18:59,280
fused multiply add

3239
02:19:00,959 --> 02:19:06,678
you just check directly for the fma flag

3240
02:19:07,120 --> 02:19:12,800
it has nothing to do with avx2 like avx2

3241
02:19:10,000 --> 02:19:16,000
just doesn't have multiply accumulate

3242
02:19:12,799 --> 02:19:16,799
um except for for 16 bit like i said

3243
02:19:16,000 --> 02:19:18,079
so

3244
02:19:16,799 --> 02:19:20,159
uh

3245
02:19:18,079 --> 02:19:22,079
and it's not even really like it's 16

3246
02:19:20,159 --> 02:19:23,760
it's not even really it it's not like a

3247
02:19:22,079 --> 02:19:26,239
terniary instruction

3248
02:19:23,760 --> 02:19:27,840
um it it's paired

3249
02:19:26,239 --> 02:19:30,638
right uh

3250
02:19:27,840 --> 02:19:33,200
it so it's a it's a very specific it's a

3251
02:19:30,638 --> 02:19:35,839
different it's for different stuff

3252
02:19:33,200 --> 02:19:35,840
right

3253
02:19:49,920 --> 02:19:53,920
uh does that does that make sense mine

3254
02:19:51,359 --> 02:19:56,159
mark 42 i i mean all i'm trying to say

3255
02:19:53,920 --> 02:19:58,318
here uh if you didn't already know is

3256
02:19:56,159 --> 02:19:59,840
that avx2 has nothing to do with with

3257
02:19:58,318 --> 02:20:03,119
fused multiply add

3258
02:19:59,840 --> 02:20:05,920
so so checking the av x2 support of a

3259
02:20:03,120 --> 02:20:08,079
processor just doesn't tell you anything

3260
02:20:05,920 --> 02:20:11,040
about whether it has fuse multiply add

3261
02:20:08,079 --> 02:20:13,280
they're they're completely independent

3262
02:20:11,040 --> 02:20:16,640
um

3263
02:20:13,280 --> 02:20:19,040
the avx2 support is just is just not

3264
02:20:16,639 --> 02:20:22,879
relevant to whether it has

3265
02:20:19,040 --> 02:20:24,399
uh fma it's the fma flags that tell you

3266
02:20:22,879 --> 02:20:26,559
if it has fma

3267
02:20:24,398 --> 02:20:29,358
right

3268
02:20:26,559 --> 02:20:31,279
uh and or or you can check avx 512 and

3269
02:20:29,359 --> 02:20:33,920
cross your fingers but my my

3270
02:20:31,280 --> 02:20:36,399
recollection is that avx 512 doesn't

3271
02:20:33,920 --> 02:20:37,600
have to have fma maybe it does but i

3272
02:20:36,398 --> 02:20:40,559
don't think it does

3273
02:20:37,600 --> 02:20:42,880
so i'm pretty sure that like

3274
02:20:40,559 --> 02:20:47,439
avx 512

3275
02:20:42,879 --> 02:20:47,438
can also exist without the fma part

3276
02:20:47,520 --> 02:20:50,319
don't quote me on that that might not be

3277
02:20:49,120 --> 02:20:52,399
true

3278
02:20:50,318 --> 02:20:54,318
um so so i don't know so i did i just

3279
02:20:52,398 --> 02:20:56,799
don't think the avx 2 part makes any

3280
02:20:54,318 --> 02:20:59,199
difference just check the fma

3281
02:20:56,799 --> 02:21:02,519
um

3282
02:20:59,200 --> 02:21:02,520
and you're good

3283
02:21:19,359 --> 02:21:24,840
no i'm pretty sure avx-2 cpus often

3284
02:21:22,639 --> 02:21:26,719
don't have fma

3285
02:21:24,840 --> 02:21:29,040
extensions uh

3286
02:21:26,719 --> 02:21:30,159
i could be wrong about that

3287
02:21:29,040 --> 02:21:31,760
but

3288
02:21:30,159 --> 02:21:36,439
uh

3289
02:21:31,760 --> 02:21:36,439
so i wanna say that like

3290
02:21:40,000 --> 02:21:44,959
so suppose that you took

3291
02:21:42,000 --> 02:21:44,959
like uh

3292
02:21:46,159 --> 02:21:49,600
suppose that you took the fma extension

3293
02:21:48,478 --> 02:21:51,920
here

3294
02:21:49,600 --> 02:21:54,559
um and we looked at at what it was

3295
02:21:51,920 --> 02:21:54,559
listed under

3296
02:21:56,478 --> 02:21:58,639
me

3297
02:22:02,639 --> 02:22:05,519
trying to think of how

3298
02:22:07,600 --> 02:22:10,399
we would know

3299
02:22:21,359 --> 02:22:24,640
uh

3300
02:22:22,559 --> 02:22:26,478
okay so

3301
02:22:24,639 --> 02:22:29,519
let's find out

3302
02:22:26,478 --> 02:22:32,000
so let's take one of these uh well

3303
02:22:29,520 --> 02:22:33,920
doubles you know maybe isn't the best

3304
02:22:32,000 --> 02:22:35,200
uh test so let's take the simplest one

3305
02:22:33,920 --> 02:22:37,520
we might want

3306
02:22:35,200 --> 02:22:40,079
which is the fmad

3307
02:22:37,520 --> 02:22:42,159
for floats right

3308
02:22:40,079 --> 02:22:44,398
uh and let's just take a look

3309
02:22:42,159 --> 02:22:44,398
at

3310
02:22:44,719 --> 02:22:50,639
what uops.info

3311
02:22:47,439 --> 02:22:53,520
thinks it has or doesn't have right uh

3312
02:22:50,639 --> 02:22:55,039
so we know this is an fma flag

3313
02:22:53,520 --> 02:22:57,359
um

3314
02:22:55,040 --> 02:22:59,600
and so you know

3315
02:22:57,359 --> 02:23:01,760
we can look and see

3316
02:22:59,600 --> 02:23:04,479
but

3317
02:23:01,760 --> 02:23:05,680
so i don't know you you could be right

3318
02:23:04,478 --> 02:23:08,079
uh you could be right because i'm

3319
02:23:05,680 --> 02:23:08,960
looking at it here

3320
02:23:08,079 --> 02:23:13,520
uh

3321
02:23:08,959 --> 02:23:13,519
and it looks like maybe you're right

3322
02:23:13,600 --> 02:23:18,720
yeah

3323
02:23:15,840 --> 02:23:20,159
um

3324
02:23:18,719 --> 02:23:21,679
because it seems to think that it

3325
02:23:20,159 --> 02:23:22,719
measured one

3326
02:23:21,680 --> 02:23:24,239
on like

3327
02:23:22,719 --> 02:23:25,840
older

3328
02:23:24,239 --> 02:23:28,639
parts

3329
02:23:25,840 --> 02:23:28,639
so you might be right

3330
02:23:29,520 --> 02:23:32,520
um

3331
02:23:33,359 --> 02:23:37,920
so it doesn't exist on ivy bridge

3332
02:23:39,040 --> 02:23:42,720
you can see

3333
02:23:40,799 --> 02:23:45,438
it not existing there

3334
02:23:42,719 --> 02:23:47,438
uh so i guess the question is does any

3335
02:23:45,439 --> 02:23:48,720
uh avx2

3336
02:23:47,439 --> 02:23:51,200
operation

3337
02:23:48,719 --> 02:23:53,519
exist on iv bridge

3338
02:23:51,200 --> 02:23:53,520
right

3339
02:23:53,920 --> 02:23:59,840
um so let's take a look uh if we

3340
02:23:57,520 --> 02:24:02,720
pick a avx2

3341
02:23:59,840 --> 02:24:03,680
op here so like

3342
02:24:02,719 --> 02:24:05,840
whatever

3343
02:24:03,680 --> 02:24:05,840
uh

3344
02:24:06,000 --> 02:24:10,318
are these really avx-2 only operations

3345
02:24:12,719 --> 02:24:20,159
i guess so so avx2 like okay like 64-bit

3346
02:24:16,478 --> 02:24:22,398
integer add apparently was avx2

3347
02:24:20,159 --> 02:24:24,478
um

3348
02:24:22,398 --> 02:24:27,599
so let's take a look

3349
02:24:24,478 --> 02:24:29,358
does iv bridge have

3350
02:24:27,600 --> 02:24:30,640
adq

3351
02:24:29,359 --> 02:24:31,010
right

3352
02:24:30,639 --> 02:24:34,068
um

3353
02:24:31,010 --> 02:24:34,068
[Music]

3354
02:24:34,478 --> 02:24:37,199
no

3355
02:24:35,840 --> 02:24:39,760
so you could be right

3356
02:24:37,200 --> 02:24:42,560
um because if even if they're separate

3357
02:24:39,760 --> 02:24:45,120
flags if in practice

3358
02:24:42,559 --> 02:24:46,639
as soon as they added avx2 they also

3359
02:24:45,120 --> 02:24:49,200
always added

3360
02:24:46,639 --> 02:24:49,199
fma

3361
02:24:55,120 --> 02:24:59,280
i'm not sure how to check in any way

3362
02:24:57,200 --> 02:25:00,960
other than this is the only problem so i

3363
02:24:59,280 --> 02:25:02,880
don't know that this is particularly

3364
02:25:00,959 --> 02:25:06,559
dispositive one way or the other like

3365
02:25:02,879 --> 02:25:10,159
this is a pretty crude way of looking

3366
02:25:06,559 --> 02:25:13,039
so i don't know that's intel signed um

3367
02:25:10,159 --> 02:25:14,318
we could also look at uh

3368
02:25:13,040 --> 02:25:16,560
you know

3369
02:25:14,318 --> 02:25:16,559
um

3370
02:25:17,359 --> 02:25:20,399
parts that came from amd

3371
02:25:19,439 --> 02:25:24,720
right

3372
02:25:20,398 --> 02:25:26,959
so there's it doing a vp adq

3373
02:25:24,719 --> 02:25:28,719
and what was that fma one

3374
02:25:26,959 --> 02:25:31,438
i wish i could list multiples of these

3375
02:25:28,719 --> 02:25:31,438
at the same time

3376
02:25:37,600 --> 02:25:40,800
how come i can't go back

3377
02:25:42,159 --> 02:25:45,760
you can't go back

3378
02:25:43,600 --> 02:25:47,040
apparently back buttons just are not a

3379
02:25:45,760 --> 02:25:52,760
thing

3380
02:25:47,040 --> 02:25:52,760
uh it is v f a

3381
02:25:55,840 --> 02:25:59,760
so i don't know

3382
02:25:57,920 --> 02:26:01,760
it could be

3383
02:25:59,760 --> 02:26:04,559
it could be that if you've guaranteed

3384
02:26:01,760 --> 02:26:06,880
avx-2 support no one ever shipped a part

3385
02:26:04,559 --> 02:26:09,279
that didn't have it um i mean we're

3386
02:26:06,879 --> 02:26:11,759
looking at it here and that seems yeah

3387
02:26:09,280 --> 02:26:11,760
likely

3388
02:26:18,398 --> 02:26:22,318
i don't know i i wouldn't recommend it

3389
02:26:20,559 --> 02:26:23,920
as i guess all i can say

3390
02:26:22,318 --> 02:26:26,559
if they're separate flags i wouldn't

3391
02:26:23,920 --> 02:26:27,359
recommend doing that um because i don't

3392
02:26:26,559 --> 02:26:29,199
know

3393
02:26:27,359 --> 02:26:30,318
it sounds scary

3394
02:26:29,200 --> 02:26:31,600
but

3395
02:26:30,318 --> 02:26:34,000
it could be

3396
02:26:31,600 --> 02:26:38,079
it could be i almost never have the

3397
02:26:34,000 --> 02:26:40,318
ability to ship things on avx-2 cpus

3398
02:26:38,079 --> 02:26:42,318
unless it's server code and server code

3399
02:26:40,318 --> 02:26:45,039
usually doesn't need floating point it's

3400
02:26:42,318 --> 02:26:48,478
usually only integer so i've literally

3401
02:26:45,040 --> 02:26:49,520
never had an occasion to use an fmad

3402
02:26:48,478 --> 02:26:52,959
um

3403
02:26:49,520 --> 02:26:52,960
in those circumstances

3404
02:26:53,680 --> 02:26:55,840
i

3405
02:26:54,799 --> 02:26:58,398
so

3406
02:26:55,840 --> 02:27:00,880
you know i i've never

3407
02:26:58,398 --> 02:27:02,879
i i just never have looked at that so i

3408
02:27:00,879 --> 02:27:04,559
really couldn't tell you uh from any

3409
02:27:02,879 --> 02:27:06,879
kind of experience

3410
02:27:04,559 --> 02:27:08,559
i just i would still be kind of nervous

3411
02:27:06,879 --> 02:27:10,879
about it but you know

3412
02:27:08,559 --> 02:27:10,879
um

3413
02:27:11,520 --> 02:27:16,720
the spot check on ups.info it seems like

3414
02:27:14,559 --> 02:27:18,799
if you've got avx2 they've got they've

3415
02:27:16,719 --> 02:27:19,840
got the fmat so

3416
02:27:18,799 --> 02:27:21,549
i don't know

3417
02:27:19,840 --> 02:27:22,799
you can see here that the fma

3418
02:27:21,549 --> 02:27:24,639
[Music]

3419
02:27:22,799 --> 02:27:25,920
extensions right they're all floating

3420
02:27:24,639 --> 02:27:28,398
point

3421
02:27:25,920 --> 02:27:31,840
so that you know like i said like

3422
02:27:28,398 --> 02:27:31,840
on a server you don't

3423
02:27:32,159 --> 02:27:34,478
you know

3424
02:27:36,398 --> 02:27:41,358
on a server you don't get that

3425
02:27:39,040 --> 02:27:41,359
uh

3426
02:27:42,239 --> 02:27:45,239
so

3427
02:27:46,478 --> 02:27:51,438
what's the time for fuse multiply add um

3428
02:27:51,760 --> 02:27:55,040
oh wow that's really good too

3429
02:27:55,439 --> 02:28:00,079
that's really cool uh it's cool to know

3430
02:27:57,760 --> 02:28:02,719
that if we ever get up to avx-2 support

3431
02:28:00,079 --> 02:28:04,639
on client machines

3432
02:28:02,719 --> 02:28:07,119
uh that you can have a four

3433
02:28:04,639 --> 02:28:08,879
four cycle latency because so normally

3434
02:28:07,120 --> 02:28:11,120
if you do

3435
02:28:08,879 --> 02:28:13,519
a multiply followed by an add it's it

3436
02:28:11,120 --> 02:28:17,120
would be five cycles so you actually

3437
02:28:13,520 --> 02:28:19,200
save a cycle in addition to having

3438
02:28:17,120 --> 02:28:21,600
a more accurate result

3439
02:28:19,200 --> 02:28:23,120
one of the reasons you usually do fused

3440
02:28:21,600 --> 02:28:26,120
multiply ads is because they're more

3441
02:28:23,120 --> 02:28:26,120
accurate

3442
02:28:26,799 --> 02:28:32,719
right you you if you do a multiply and

3443
02:28:29,840 --> 02:28:35,040
then an add you first have to like

3444
02:28:32,719 --> 02:28:37,199
round the intermediate results right

3445
02:28:35,040 --> 02:28:38,720
which loses precision and then you do

3446
02:28:37,200 --> 02:28:42,319
the add and then you round that result

3447
02:28:38,719 --> 02:28:44,318
which also loses precision right so

3448
02:28:42,318 --> 02:28:45,359
if you can combine those two operations

3449
02:28:44,318 --> 02:28:48,799
you

3450
02:28:45,359 --> 02:28:48,800
don't have to worry about

3451
02:28:48,959 --> 02:28:54,799
losing those bits in the middle

3452
02:28:52,159 --> 02:28:56,959
um so usually you do you do

3453
02:28:54,799 --> 02:28:59,920
fuse multiply ads because

3454
02:28:56,959 --> 02:29:01,679
uh they're more accurate

3455
02:28:59,920 --> 02:29:03,600
so i didn't know if it would be the same

3456
02:29:01,680 --> 02:29:04,880
cost like five

3457
02:29:03,600 --> 02:29:06,800
cycles

3458
02:29:04,879 --> 02:29:08,639
uh but just more accurate but it turns

3459
02:29:06,799 --> 02:29:11,039
out it's actually also faster so that's

3460
02:29:08,639 --> 02:29:11,039
great too

3461
02:29:12,398 --> 02:29:15,639
very nice

3462
02:29:22,398 --> 02:29:26,079
all right

3463
02:29:23,359 --> 02:29:27,920
um so like

3464
02:29:26,079 --> 02:29:30,318
i think we're done

3465
02:29:27,920 --> 02:29:30,318
um

3466
02:29:32,000 --> 02:29:35,959
are we done we're done right

3467
02:29:49,840 --> 02:29:54,079
i mean no one's objecting to us being

3468
02:29:51,200 --> 02:29:54,079
done so i think we're done

3469
02:29:54,879 --> 02:29:58,079
okay

3470
02:29:56,959 --> 02:30:00,559
thank you everyone for joining me for

3471
02:29:58,079 --> 02:30:02,639
another episode of handmade hero uh it

3472
02:30:00,559 --> 02:30:03,840
has been a pleasure coding with you as

3473
02:30:02,639 --> 02:30:05,199
always if you would like to follow along

3474
02:30:03,840 --> 02:30:07,200
the series at home you can always go to

3475
02:30:05,200 --> 02:30:09,359
handmade hero.org and pre-order the game

3476
02:30:07,200 --> 02:30:10,720
it comes with the source code

3477
02:30:09,359 --> 02:30:11,760
um

3478
02:30:10,719 --> 02:30:13,199
the collision detector was feeling a

3479
02:30:11,760 --> 02:30:14,719
little dicey there with that

3480
02:30:13,200 --> 02:30:16,000
but then we kind of like straightened

3481
02:30:14,719 --> 02:30:19,039
out the bounce checking now it's feeling

3482
02:30:16,000 --> 02:30:20,159
pretty good actually so i think we might

3483
02:30:19,040 --> 02:30:21,840
be

3484
02:30:20,159 --> 02:30:23,439
almost done uh we have to put in a

3485
02:30:21,840 --> 02:30:25,120
spatial audition

3486
02:30:23,439 --> 02:30:26,639
uh and i think we probably still got

3487
02:30:25,120 --> 02:30:27,760
some bugs in there

3488
02:30:26,639 --> 02:30:30,840
so we're gonna have to go through it

3489
02:30:27,760 --> 02:30:32,398
with with a little bit more diligence

3490
02:30:30,840 --> 02:30:33,920
but

3491
02:30:32,398 --> 02:30:35,119
uh

3492
02:30:33,920 --> 02:30:37,439
that's looking pretty good and we're

3493
02:30:35,120 --> 02:30:39,120
getting the nice edge roll off now

3494
02:30:37,439 --> 02:30:42,479
um so i think when we kind of go through

3495
02:30:39,120 --> 02:30:44,240
it one more time maybe one more weekend

3496
02:30:42,478 --> 02:30:45,679
i think it'll be in pretty good shape

3497
02:30:44,239 --> 02:30:47,520
we'll then have to spend a weekend after

3498
02:30:45,680 --> 02:30:49,280
that and put the spatial partition in

3499
02:30:47,520 --> 02:30:51,200
for sure because otherwise it's just

3500
02:30:49,280 --> 02:30:53,520
always going to be too slow

3501
02:30:51,200 --> 02:30:55,520
uh so we need to make the

3502
02:30:53,520 --> 02:30:56,880
you know we need to do a uh some work

3503
02:30:55,520 --> 02:31:00,560
there and that'll that'll be like at

3504
02:30:56,879 --> 02:31:02,000
least another another day of coding

3505
02:31:00,559 --> 02:31:03,760
so we'll go ahead and do those things

3506
02:31:02,000 --> 02:31:05,359
but then i think we have a nice really

3507
02:31:03,760 --> 02:31:07,200
smooth feeling

3508
02:31:05,359 --> 02:31:11,200
collision system

3509
02:31:07,200 --> 02:31:12,560
and i suspect at that point

3510
02:31:11,200 --> 02:31:15,200
combat

3511
02:31:12,559 --> 02:31:16,799
will be implementable nicely

3512
02:31:15,200 --> 02:31:18,159
uh

3513
02:31:16,799 --> 02:31:19,840
not that i know how to implement it

3514
02:31:18,159 --> 02:31:22,719
because of course that's a game design

3515
02:31:19,840 --> 02:31:23,600
thing so not really my thing

3516
02:31:22,719 --> 02:31:25,039
um

3517
02:31:23,600 --> 02:31:26,079
but you know we'll put we'll put

3518
02:31:25,040 --> 02:31:27,520
something in there

3519
02:31:26,079 --> 02:31:29,840
for combat

3520
02:31:27,520 --> 02:31:31,040
you hit the thing and it takes away a

3521
02:31:29,840 --> 02:31:32,719
heart

3522
02:31:31,040 --> 02:31:34,800
that's that's

3523
02:31:32,719 --> 02:31:36,239
that'll be the combat system

3524
02:31:34,799 --> 02:31:39,438
um

3525
02:31:36,239 --> 02:31:40,398
so we'll put that in there and uh

3526
02:31:39,439 --> 02:31:42,398
you know

3527
02:31:40,398 --> 02:31:44,478
maybe we'll try to try to tweak it uh

3528
02:31:42,398 --> 02:31:46,079
we'll do what we can

3529
02:31:44,478 --> 02:31:48,159
uh so we'll see you back here next week

3530
02:31:46,079 --> 02:31:50,079
for that i updated the schedule so it's

3531
02:31:48,159 --> 02:31:51,520
up there now um

3532
02:31:50,079 --> 02:31:52,559
and i think we'll be on sundays for a

3533
02:31:51,520 --> 02:31:54,079
while now

3534
02:31:52,559 --> 02:31:56,559
uh because i have some recording stuff i

3535
02:31:54,079 --> 02:31:58,719
have to do on saturdays so

3536
02:31:56,559 --> 02:32:00,398
that'll be it uh so until then have fun

3537
02:31:58,719 --> 02:32:01,599
program everyone and i'll see you on the

3538
02:32:00,398 --> 02:32:07,000
internet

3539
02:32:01,600 --> 02:32:07,000
take it easy uh one thing i might do

