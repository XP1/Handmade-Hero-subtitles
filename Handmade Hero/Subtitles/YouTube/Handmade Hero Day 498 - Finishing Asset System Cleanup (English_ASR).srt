1
00:00:00,000 --> 00:00:03,089
hello everyone welcome to handmade Hiro

2
00:00:01,350 --> 00:00:05,939
sure we caught a complete-game live on

3
00:00:03,089 --> 00:00:08,160
stream we are gonna do some some

4
00:00:05,940 --> 00:00:10,469
nitty-gritty programming right now I

5
00:00:08,160 --> 00:00:12,690
wanted to clean up some of the stuff in

6
00:00:10,468 --> 00:00:14,399
our asset system I've been wanting to do

7
00:00:12,689 --> 00:00:17,039
it for a while you've seen me put some -

8
00:00:14,400 --> 00:00:19,469
dues in there and and earlier today I

9
00:00:17,039 --> 00:00:20,730
just decided it's time and the thing

10
00:00:19,469 --> 00:00:22,229
that really pushed me over the edge was

11
00:00:20,730 --> 00:00:24,379
I want to be able to do stuff like flush

12
00:00:22,230 --> 00:00:27,089
textures and so on and it was just like

13
00:00:24,379 --> 00:00:29,009
look I'm not gonna go add new features

14
00:00:27,089 --> 00:00:30,300
to this thing when most of what's in

15
00:00:29,010 --> 00:00:32,009
there now is not really that necessary

16
00:00:30,300 --> 00:00:33,509
right you used to do a little bit more

17
00:00:32,009 --> 00:00:36,960
heavy lifting than it did doesn't really

18
00:00:33,509 --> 00:00:38,968
need to do that anymore so I'm just

19
00:00:36,960 --> 00:00:42,299
going to go ahead and take this

20
00:00:38,969 --> 00:00:44,399
opportunity to really like streamline it

21
00:00:42,299 --> 00:00:46,859
and just get it into a simpler more

22
00:00:44,399 --> 00:00:49,829
direct State now that we know what it

23
00:00:46,859 --> 00:00:52,439
needs to do it shouldn't be that hard so

24
00:00:49,829 --> 00:00:54,808
if I take a look at where I don't really

25
00:00:52,439 --> 00:00:56,789
know exactly what we're doing in terms

26
00:00:54,808 --> 00:01:00,089
of texture ops right now I think they're

27
00:00:56,789 --> 00:01:04,260
pretty basic in terms of who does what

28
00:01:00,090 --> 00:01:06,900
with them and when so I don't know let

29
00:01:04,260 --> 00:01:08,760
me just do a quick yeah so I think I

30
00:01:06,900 --> 00:01:11,460
think this is really all that happens

31
00:01:08,760 --> 00:01:14,189
right now is we get the open gel managed

32
00:01:11,459 --> 00:01:19,129
textures thing happening there and and

33
00:01:14,188 --> 00:01:24,000
so really I think most of the texture op

34
00:01:19,129 --> 00:01:25,649
actual work he's done in here right so

35
00:01:24,000 --> 00:01:29,280
there's a call to an it texture queue

36
00:01:25,650 --> 00:01:30,840
and what that does is it says here's

37
00:01:29,280 --> 00:01:33,599
some memory that we're going to use for

38
00:01:30,840 --> 00:01:35,490
these texture ops and then it actually

39
00:01:33,599 --> 00:01:40,469
creates the texture ops inside the

40
00:01:35,489 --> 00:01:45,929
memory that you gave it and I think

41
00:01:40,469 --> 00:01:47,700
that's that's probably fine in other

42
00:01:45,930 --> 00:01:50,490
words this part probably doesn't

43
00:01:47,700 --> 00:01:53,219
actually have to change but what is

44
00:01:50,489 --> 00:01:56,578
gonna have to change is when we go you

45
00:01:53,219 --> 00:01:58,890
know when you actually look in what we

46
00:01:56,578 --> 00:02:02,089
wanted to do in terms of texture ops we

47
00:01:58,890 --> 00:02:04,978
wanted to change this add up bit here

48
00:02:02,090 --> 00:02:06,899
and you can see we have a ticket mutex

49
00:02:04,978 --> 00:02:10,169
it says look when you're accessing the

50
00:02:06,899 --> 00:02:12,090
render texture to it locks up so that

51
00:02:10,169 --> 00:02:13,229
nobody else is gonna do anything to look

52
00:02:12,090 --> 00:02:16,640
you while you're while you're

53
00:02:13,229 --> 00:02:19,199
they're specifically like inside the

54
00:02:16,639 --> 00:02:22,199
OpenGL Manesh textures we've got this DQ

55
00:02:19,199 --> 00:02:27,149
pending thing the DQ pending thing well

56
00:02:22,199 --> 00:02:28,348
I don't know where it actually is don't

57
00:02:27,150 --> 00:02:30,450
ask me why we didn't just forward to

58
00:02:28,348 --> 00:02:33,419
clear it but we actually have the whole

59
00:02:30,449 --> 00:02:35,548
thing on here I don't know why but you

60
00:02:33,419 --> 00:02:37,768
know we do so you know there it is is

61
00:02:35,549 --> 00:02:39,269
there can we move that out of here does

62
00:02:37,769 --> 00:02:41,310
that need to be here for some particular

63
00:02:39,269 --> 00:02:42,539
reason it doesn't really seem like it

64
00:02:41,310 --> 00:02:43,920
should have to be there right it seems

65
00:02:42,539 --> 00:02:45,209
like it should be able to go down here

66
00:02:43,919 --> 00:02:50,699
was there really a reason we couldn't

67
00:02:45,209 --> 00:02:52,560
put it down here right I mean this this

68
00:02:50,699 --> 00:02:54,959
needs to know about it but does it

69
00:02:52,560 --> 00:02:58,170
actually need to you know does it

70
00:02:54,959 --> 00:03:01,759
actually actually need to be done that

71
00:02:58,169 --> 00:03:01,759
way can't we just can't we just do this

72
00:03:03,348 --> 00:03:16,828
yeah it seems fine uh where did that go

73
00:03:09,689 --> 00:03:19,789
there where's oh so I guess well no so

74
00:03:16,829 --> 00:03:19,790
why was that

75
00:03:20,479 --> 00:03:30,030
but why was my was just not picked up I

76
00:03:25,639 --> 00:03:34,620
mean that's that's it right oh I guess

77
00:03:30,030 --> 00:03:37,079
because it has to be done this way is it

78
00:03:34,620 --> 00:03:38,129
actually external I see so that's why we

79
00:03:37,079 --> 00:03:39,900
put it there all right we did have a

80
00:03:38,129 --> 00:03:42,539
good reason we had a good reason I'm

81
00:03:39,900 --> 00:03:46,650
okay with that we wanted to be compiled

82
00:03:42,539 --> 00:03:50,219
into both cases so all right fine I'll

83
00:03:46,650 --> 00:03:52,169
take that but anyway so you can see here

84
00:03:50,219 --> 00:03:54,629
we've got really just these two cases

85
00:03:52,169 --> 00:03:58,069
where we're doing the DQ pending in the

86
00:03:54,629 --> 00:04:00,299
NQ free need to take the ticket

87
00:03:58,068 --> 00:04:02,250
excuse me

88
00:04:00,299 --> 00:04:03,599
and then add up when it actually puts

89
00:04:02,250 --> 00:04:05,068
something on so those are the three

90
00:04:03,598 --> 00:04:09,268
things that actually do something with

91
00:04:05,068 --> 00:04:12,810
the list what we want to do here is we

92
00:04:09,269 --> 00:04:15,060
want to change this around a little bit

93
00:04:12,810 --> 00:04:18,930
such that we have some other steps

94
00:04:15,060 --> 00:04:22,228
involved in the process as well and you

95
00:04:18,930 --> 00:04:23,519
know you can you can kind of imagine how

96
00:04:22,228 --> 00:04:26,918
this needs to work it's a little bit

97
00:04:23,519 --> 00:04:29,378
complicated because we

98
00:04:26,918 --> 00:04:31,389
we want this to be in this part of the

99
00:04:29,379 --> 00:04:35,229
code because we want to potentially

100
00:04:31,389 --> 00:04:38,829
allocate space for our texture ops that

101
00:04:35,228 --> 00:04:40,389
will be for lack of better term flexible

102
00:04:38,829 --> 00:04:42,818
in terms of where they are placed in

103
00:04:40,389 --> 00:04:44,590
memories so for example if we want to in

104
00:04:42,819 --> 00:04:48,218
the future if we were using a more

105
00:04:44,589 --> 00:04:50,109
direct memory model for our like even

106
00:04:48,218 --> 00:04:52,658
our OpenGL transfers or you know if you

107
00:04:50,110 --> 00:04:56,199
were implementing a Vulcan direct3d 11

108
00:04:52,658 --> 00:04:57,668
or 12 or a metal platform layer and you

109
00:04:56,199 --> 00:04:59,848
wanted to basically say here's the

110
00:04:57,668 --> 00:05:02,468
aperture put the texture in there and go

111
00:04:59,848 --> 00:05:05,168
what we want to be able to do is call to

112
00:05:02,468 --> 00:05:07,478
the renderer and say renderer tell us

113
00:05:05,168 --> 00:05:09,668
where to put this stuff right now we're

114
00:05:07,478 --> 00:05:11,050
passing the data in to the renderer we

115
00:05:09,668 --> 00:05:12,728
don't necessarily want to do that we

116
00:05:11,050 --> 00:05:16,329
might want to like create a buffer

117
00:05:12,728 --> 00:05:18,938
that's known mapped into the GPU address

118
00:05:16,329 --> 00:05:21,008
space copied in there and then let the

119
00:05:18,939 --> 00:05:22,838
transfer go you know it's hard to say

120
00:05:21,009 --> 00:05:24,610
what really depends on what platform

121
00:05:22,838 --> 00:05:26,319
whether that stuff matters

122
00:05:24,610 --> 00:05:29,169
you know sometimes that stuff is

123
00:05:26,319 --> 00:05:31,270
pointless doesn't really matter and so

124
00:05:29,168 --> 00:05:35,889
in this case we're really more talking

125
00:05:31,269 --> 00:05:38,378
about putting it on the right side of

126
00:05:35,889 --> 00:05:40,329
the API boundary so that when it does

127
00:05:38,379 --> 00:05:41,650
matter we can do it but I'm not

128
00:05:40,329 --> 00:05:43,418
suggesting it's actually going to matter

129
00:05:41,649 --> 00:05:45,870
for us at the moment it's probably not

130
00:05:43,418 --> 00:05:49,389
an issue for us at the moment

131
00:05:45,870 --> 00:05:52,120
so when we call complete texture up and

132
00:05:49,389 --> 00:05:54,038
we pass it an OP that's actually gonna

133
00:05:52,120 --> 00:05:54,968
be the new place where this stuff

134
00:05:54,038 --> 00:05:57,490
happens right

135
00:05:54,968 --> 00:05:59,439
meaning when we have an OP and we need

136
00:05:57,490 --> 00:06:01,750
to put it on the queue it's still gonna

137
00:05:59,439 --> 00:06:03,338
do basically this so I don't think we

138
00:06:01,750 --> 00:06:05,680
really need to adjust this code too

139
00:06:03,338 --> 00:06:08,978
terribly much this probably looks the

140
00:06:05,680 --> 00:06:10,538
same here and so the nice part is the

141
00:06:08,978 --> 00:06:10,930
the soft failure case we're running out

142
00:06:10,538 --> 00:06:13,588
of opt

143
00:06:10,930 --> 00:06:17,019
we're getting rid of that nastiness now

144
00:06:13,588 --> 00:06:20,110
because instead of actually having this

145
00:06:17,019 --> 00:06:22,568
copy the OP from now on when we do

146
00:06:20,110 --> 00:06:26,968
complete texture up this is an actual OP

147
00:06:22,569 --> 00:06:30,338
weak mq so this actually goes away and

148
00:06:26,968 --> 00:06:33,310
that DQ process in fact I can put it

149
00:06:30,338 --> 00:06:36,610
kind of up in a separate space here

150
00:06:33,310 --> 00:06:40,800
right this process will now work much

151
00:06:36,610 --> 00:06:43,658
more nicely if that makes sense

152
00:06:40,800 --> 00:06:46,598
so when this texture up comes in here

153
00:06:43,658 --> 00:06:48,848
it just gets linked in and that's linked

154
00:06:46,598 --> 00:06:51,308
in of course the networking service by

155
00:06:48,848 --> 00:06:55,928
Microsoft where you can go find other

156
00:06:51,309 --> 00:06:58,629
people who work on web 2.0 or whatever

157
00:06:55,928 --> 00:07:02,918
1.3 or whatever web version we're on now

158
00:06:58,629 --> 00:07:04,419
web squared but so when we complete a

159
00:07:02,918 --> 00:07:06,490
texture off we can link it in the sack

160
00:07:04,418 --> 00:07:08,709
same ways we're looking in iam ofor but

161
00:07:06,490 --> 00:07:10,838
we now have we want to split out that

162
00:07:08,709 --> 00:07:12,218
part where we get the actual ops and the

163
00:07:10,838 --> 00:07:13,959
reason we want to do that is because now

164
00:07:12,218 --> 00:07:15,848
we want that to be able to fail because

165
00:07:13,959 --> 00:07:17,860
remember now we actually handle failure

166
00:07:15,848 --> 00:07:19,959
cases if we run out of like we're trying

167
00:07:17,860 --> 00:07:22,360
to just do too many textures at once and

168
00:07:19,959 --> 00:07:24,699
we run out of texture ops to do the

169
00:07:22,360 --> 00:07:26,889
transfers that's actually fine because

170
00:07:24,699 --> 00:07:28,569
now what'll happen and actually this can

171
00:07:26,889 --> 00:07:29,379
go away right this whole routine is

172
00:07:28,569 --> 00:07:32,468
gonna go away

173
00:07:29,379 --> 00:07:34,749
in fact I'll just delete it because all

174
00:07:32,468 --> 00:07:37,778
of this stuff this is all actually all

175
00:07:34,749 --> 00:07:41,289
of this code is not necessary like all

176
00:07:37,778 --> 00:07:47,800
of this it's not necessary it's all it's

177
00:07:41,288 --> 00:07:49,899
all done goodbye so anyway yeah the

178
00:07:47,800 --> 00:07:51,939
point is when we actually come in here

179
00:07:49,899 --> 00:07:54,579
and and actually want to do a load so

180
00:07:51,939 --> 00:07:56,169
for example if we do load bitmap when we

181
00:07:54,579 --> 00:07:58,058
ask for the texture up what we're gonna

182
00:07:56,168 --> 00:08:01,748
do is say okay if we could get the

183
00:07:58,059 --> 00:08:03,819
texture up then we'll use it and if we

184
00:08:01,749 --> 00:08:05,528
can't then we just won't and and we'll

185
00:08:03,819 --> 00:08:08,229
just force the person to try and load it

186
00:08:05,528 --> 00:08:09,699
again right and so when it comes through

187
00:08:08,228 --> 00:08:11,258
here it'll say well be cued it up for a

188
00:08:09,699 --> 00:08:14,468
load and then we go in and we're like oh

189
00:08:11,259 --> 00:08:17,050
actually we can't load it so we'll just

190
00:08:14,468 --> 00:08:19,449
we just won't right we'll just we'll

191
00:08:17,050 --> 00:08:22,360
we'll reset it so in here what we want

192
00:08:19,449 --> 00:08:25,300
to do is say basically like any time you

193
00:08:22,360 --> 00:08:26,979
can't finish up what you were doing like

194
00:08:25,300 --> 00:08:28,809
in this case we can't do it now the

195
00:08:26,978 --> 00:08:31,240
tasks got checked up here so I don't

196
00:08:28,809 --> 00:08:32,949
really know any reason why we still have

197
00:08:31,240 --> 00:08:36,668
to check it that way right so this stuff

198
00:08:32,948 --> 00:08:39,519
can actually be placed a little bit more

199
00:08:36,668 --> 00:08:45,399
succinctly this cancel texture app can

200
00:08:39,519 --> 00:08:49,299
actually go in here like so so that's

201
00:08:45,399 --> 00:08:51,039
all good and I think that's the the

202
00:08:49,299 --> 00:08:52,699
entirety of the failure handling there

203
00:08:51,039 --> 00:08:57,769
right that's all we really needed to

204
00:08:52,700 --> 00:09:01,250
happen so it's it's just fine all of

205
00:08:57,769 --> 00:09:04,250
this is fine and that all that all feels

206
00:09:01,250 --> 00:09:05,690
reasonable to me right uh when we look

207
00:09:04,250 --> 00:09:07,490
at what's happening here I don't

208
00:09:05,690 --> 00:09:17,900
actually know why we do the task work

209
00:09:07,490 --> 00:09:20,389
equals work think here I I don't get it

210
00:09:17,899 --> 00:09:24,519
like I don't see why we wouldn't just

211
00:09:20,389 --> 00:09:24,519
assign it that way to begin with like I

212
00:09:25,480 --> 00:09:31,220
think it was probably because oh I know

213
00:09:29,509 --> 00:09:33,169
why because we had previously wanted to

214
00:09:31,220 --> 00:09:34,850
be able to call an immediate so since we

215
00:09:33,169 --> 00:09:37,610
don't want to call an immediate anymore

216
00:09:34,850 --> 00:09:39,980
we can actually just do this as well so

217
00:09:37,610 --> 00:09:41,419
again you can see there's just a lot of

218
00:09:39,980 --> 00:09:43,370
simplification that can happen in this

219
00:09:41,419 --> 00:09:45,469
code now that we know we don't need a

220
00:09:43,370 --> 00:09:47,210
lot of the things that we originally had

221
00:09:45,470 --> 00:09:49,220
to have when we were making it work

222
00:09:47,210 --> 00:09:51,139
originally because we just didn't have

223
00:09:49,220 --> 00:09:53,720
as much other stuff in in terms of

224
00:09:51,139 --> 00:09:56,389
support so now if we look at what

225
00:09:53,720 --> 00:09:57,830
actually happens it's pretty pretty easy

226
00:09:56,389 --> 00:10:01,879
for us to condense a lot of this stuff

227
00:09:57,830 --> 00:10:03,830
down you know what I mean so if we look

228
00:10:01,879 --> 00:10:06,200
at what has to happen here again we need

229
00:10:03,830 --> 00:10:09,470
this function now and this is gonna be

230
00:10:06,200 --> 00:10:11,390
where the real fun begins right this is

231
00:10:09,470 --> 00:10:15,350
where we have to actually start thinking

232
00:10:11,389 --> 00:10:17,539
about stuff and so these texture ups

233
00:10:15,350 --> 00:10:18,560
we're probably gonna have a lot less of

234
00:10:17,539 --> 00:10:20,299
them and the reason we're gonna have

235
00:10:18,559 --> 00:10:23,329
less of them is because we probably

236
00:10:20,299 --> 00:10:25,939
don't want to have quite so much memory

237
00:10:23,330 --> 00:10:29,870
sitting around being wasted on just

238
00:10:25,940 --> 00:10:31,220
transfer stuff but you know in general

239
00:10:29,870 --> 00:10:32,779
we're still you know we're still doing

240
00:10:31,220 --> 00:10:36,019
what we're doing so in here where we say

241
00:10:32,779 --> 00:10:40,610
begin texture up and we've got the asset

242
00:10:36,019 --> 00:10:46,639
queue like so and we have a width width

243
00:10:40,610 --> 00:10:51,889
and height then what I think we can do

244
00:10:46,639 --> 00:10:53,840
here is just every time we want to work

245
00:10:51,889 --> 00:10:58,519
with one of these I think we can use the

246
00:10:53,840 --> 00:11:06,200
free list here and just you know do the

247
00:10:58,519 --> 00:11:08,899
exact same situation we know we have a

248
00:11:06,200 --> 00:11:11,930
actual we don't have to do an assert

249
00:11:08,899 --> 00:11:14,240
right we can look at that first free and

250
00:11:11,929 --> 00:11:31,250
we can actually see if we got one you

251
00:11:14,240 --> 00:11:33,769
know what I mean like this and looking

252
00:11:31,250 --> 00:11:35,929
here I think when we queue this in every

253
00:11:33,769 --> 00:11:37,879
time when we bring one back we want to

254
00:11:35,929 --> 00:11:42,139
make the next point equal to zero so I'm

255
00:11:37,879 --> 00:11:48,200
gonna in here also assert that the ops

256
00:11:42,139 --> 00:11:49,490
next pointer is zero she's looking at

257
00:11:48,200 --> 00:11:50,690
what's gonna happen here right so we're

258
00:11:49,490 --> 00:11:52,970
gonna come in here we're gonna say look

259
00:11:50,690 --> 00:11:55,190
we need to do a transfer to the card of

260
00:11:52,970 --> 00:11:57,560
a texture that's here this much you know

261
00:11:55,190 --> 00:12:00,800
this big right a width by height there

262
00:11:57,559 --> 00:12:02,299
it is so what I need you to do is I need

263
00:12:00,799 --> 00:12:04,549
you to give me back an OP it's got that

264
00:12:02,299 --> 00:12:06,620
much memory so what's gonna happen here

265
00:12:04,549 --> 00:12:09,289
when we actually pull out whatever the

266
00:12:06,620 --> 00:12:11,330
first free thing is on the queue we need

267
00:12:09,289 --> 00:12:13,699
that thing to have enough memory and

268
00:12:11,330 --> 00:12:15,320
there's two cases either there's one

269
00:12:13,700 --> 00:12:17,240
case where the result exists but it's

270
00:12:15,320 --> 00:12:19,820
not enough memory another case is when

271
00:12:17,240 --> 00:12:21,560
there's no result at all and what we

272
00:12:19,820 --> 00:12:22,970
could say is if there's no result at all

273
00:12:21,559 --> 00:12:24,769
that'll just be a straight-up failure

274
00:12:22,970 --> 00:12:26,090
case if there's a result that the result

275
00:12:24,769 --> 00:12:27,559
doesn't have enough memory then what we

276
00:12:26,090 --> 00:12:31,610
want to do is basically reallocate that

277
00:12:27,559 --> 00:12:34,309
to be bigger I think there's two schools

278
00:12:31,610 --> 00:12:37,759
of thought here let me kind of tell you

279
00:12:34,309 --> 00:12:40,729
what they are so if we look at how our

280
00:12:37,759 --> 00:12:43,189
transfers are gonna work we're gonna

281
00:12:40,730 --> 00:12:46,460
have two different sized textures and I

282
00:12:43,190 --> 00:12:48,470
guess I don't know where we yes so you

283
00:12:46,460 --> 00:12:50,629
can see here so we've got two different

284
00:12:48,470 --> 00:12:54,350
kinds of textures I don't know if we

285
00:12:50,629 --> 00:12:59,600
really want 512 by 512 as our size for

286
00:12:54,350 --> 00:13:01,580
things do we really want that hey look

287
00:12:59,600 --> 00:13:04,990
this is what we did last time it's one

288
00:13:01,580 --> 00:13:09,070
megabyte per and so we'd only get like

289
00:13:04,990 --> 00:13:09,070
256 are those

290
00:13:13,240 --> 00:13:17,558
guess I don't know how many things would

291
00:13:15,578 --> 00:13:21,368
probably be on the screen at one time in

292
00:13:17,558 --> 00:13:23,588
terms of sprites but like I I do wonder

293
00:13:21,369 --> 00:13:33,939
if 512 by 512 maybe a little aggressive

294
00:13:23,589 --> 00:13:35,319
right but I don't know I mean if you

295
00:13:33,938 --> 00:13:37,389
figure a modern graphics card it's like

296
00:13:35,318 --> 00:13:39,039
a gigabyte of memory then I suppose on

297
00:13:37,389 --> 00:13:40,769
the high end maybe you do want to do

298
00:13:39,039 --> 00:13:42,969
that right I mean you can always do less

299
00:13:40,769 --> 00:13:44,318
so you could always have a mobile

300
00:13:42,970 --> 00:13:46,059
rescale it down so I guess we do want to

301
00:13:44,318 --> 00:13:47,889
start with 512 by 512 and then just say

302
00:13:46,058 --> 00:13:49,448
look we're gonna have a thousand of them

303
00:13:47,889 --> 00:13:52,119
so you better have a gigabyte in your

304
00:13:49,448 --> 00:13:53,438
graphics card and if you don't well

305
00:13:52,119 --> 00:13:57,850
you're gonna have to wait till we do the

306
00:13:53,438 --> 00:14:05,649
lower res switch and then we'll run on

307
00:13:57,850 --> 00:14:08,019
smaller so anyway looking at at this

308
00:14:05,649 --> 00:14:12,278
what I wanted to try and say there was

309
00:14:08,019 --> 00:14:15,519
just that look if we if we look at how

310
00:14:12,278 --> 00:14:18,100
much memory we need in terms of transfer

311
00:14:15,519 --> 00:14:21,249
space then really what we've got is

312
00:14:18,100 --> 00:14:24,220
we've got 512 by 512 by 4 transfers and

313
00:14:21,249 --> 00:14:26,920
we've got 2048 by 2048 by 4 transfers

314
00:14:24,220 --> 00:14:30,129
this one's 16 megabytes and this one's 1

315
00:14:26,919 --> 00:14:32,169
megabyte we don't really want all of our

316
00:14:30,129 --> 00:14:35,619
transfer buffers to be 16 megabytes

317
00:14:32,169 --> 00:14:43,088
because if they were we would end up in

318
00:14:35,619 --> 00:14:44,980
a situation where you know we you know

319
00:14:43,089 --> 00:14:46,720
if they all were that big then we'd end

320
00:14:44,980 --> 00:14:48,699
up in a situation where we're wasting us

321
00:14:46,720 --> 00:14:50,769
a ton of memory think about here I

322
00:14:48,698 --> 00:14:52,208
suppose a circularbuffer would be fine

323
00:14:50,769 --> 00:14:55,178
in this case because you know the

324
00:14:52,208 --> 00:14:58,208
transfers generally kind of go out in

325
00:14:55,178 --> 00:15:00,338
order and we don't really need them to

326
00:14:58,208 --> 00:15:02,469
worry about completing out of order too

327
00:15:00,339 --> 00:15:03,730
much I mean there will be some out of

328
00:15:02,470 --> 00:15:06,339
order nough stew it because they won't

329
00:15:03,730 --> 00:15:14,278
fill in necessarily in a in a proper way

330
00:15:06,339 --> 00:15:14,279
there but you know we could

331
00:15:16,940 --> 00:15:21,140
I don't think I really want to yeah I

332
00:15:19,490 --> 00:15:22,370
don't know yeah that's a tough one

333
00:15:21,139 --> 00:15:23,929
because we could just use a

334
00:15:22,370 --> 00:15:25,820
circularbuffer for it too and just say

335
00:15:23,929 --> 00:15:27,739
look there's 64 Meg's to transfer space

336
00:15:25,820 --> 00:15:31,879
available you just fill it up as you go

337
00:15:27,740 --> 00:15:35,269
around and you can't use more until you

338
00:15:31,879 --> 00:15:36,889
retire up through the you know it

339
00:15:35,269 --> 00:15:38,149
retires in order even if the things

340
00:15:36,889 --> 00:15:39,350
complete out of order so you might have

341
00:15:38,149 --> 00:15:40,340
to wait a little longer to get the

342
00:15:39,350 --> 00:15:42,830
memory back than you would have

343
00:15:40,340 --> 00:15:44,000
otherwise but that's probably fine you

344
00:15:42,830 --> 00:15:47,030
know we could do something like that

345
00:15:44,000 --> 00:15:50,289
just thinking about what that would

346
00:15:47,029 --> 00:15:50,289
actually mean

347
00:16:00,220 --> 00:16:04,330
yeah I'm gonna I'm gonna go ahead and

348
00:16:02,210 --> 00:16:06,769
say that's what we're doing

349
00:16:04,330 --> 00:16:09,650
that just seems better that just seems

350
00:16:06,769 --> 00:16:11,539
way better and so when we look at how

351
00:16:09,649 --> 00:16:14,179
these texture apps work I think then we

352
00:16:11,539 --> 00:16:18,289
we rewrite this part too to be even

353
00:16:14,179 --> 00:16:21,199
simpler than it was before as well so

354
00:16:18,289 --> 00:16:22,279
when we when we do these texture apps we

355
00:16:21,200 --> 00:16:24,530
don't really need to do these as

356
00:16:22,279 --> 00:16:27,949
complicated as they were either when

357
00:16:24,529 --> 00:16:32,240
we're running through those apps those

358
00:16:27,950 --> 00:16:35,690
ops can really just be a instead of a

359
00:16:32,240 --> 00:16:39,070
list they can just be in order so it

360
00:16:35,690 --> 00:16:42,500
could just be a circular buffer right so

361
00:16:39,070 --> 00:16:45,740
the texture list is really just

362
00:16:42,500 --> 00:16:51,320
something that says look I have the

363
00:16:45,740 --> 00:16:54,710
transfer memory right and I have the

364
00:16:51,320 --> 00:16:58,760
transfer memory size and then I have the

365
00:16:54,710 --> 00:17:03,680
transfer memory app and this in general

366
00:16:58,759 --> 00:17:05,180
is just going to roll around and we'll

367
00:17:03,679 --> 00:17:06,919
put in whatever we need there to keep

368
00:17:05,180 --> 00:17:10,250
track of it but we don't need this

369
00:17:06,920 --> 00:17:12,890
anymore and you know each one of these

370
00:17:10,250 --> 00:17:16,369
texture apps then it does have a data

371
00:17:12,890 --> 00:17:18,709
pointer but it also would know in

372
00:17:16,369 --> 00:17:20,239
addition to its data pointer it would

373
00:17:18,709 --> 00:17:23,240
know where and the transfer buffer it

374
00:17:20,240 --> 00:17:26,509
actually was so you would know what you

375
00:17:23,240 --> 00:17:27,680
could free up to when it was done you

376
00:17:26,509 --> 00:17:30,259
know what I mean

377
00:17:27,680 --> 00:17:32,620
and again the Ops would just go in order

378
00:17:30,259 --> 00:17:34,819
so then you would just have a texture op

379
00:17:32,619 --> 00:17:37,609
thing here where it's like look there

380
00:17:34,819 --> 00:17:40,339
can only be this many outstanding at a

381
00:17:37,609 --> 00:17:42,139
time or something like that that's

382
00:17:40,339 --> 00:17:44,449
probably way more than we actually need

383
00:17:42,140 --> 00:17:46,100
but you know who knows so then when we

384
00:17:44,450 --> 00:17:48,289
have our texture ops they don't have

385
00:17:46,099 --> 00:17:52,039
next pointers and you're really just

386
00:17:48,289 --> 00:17:56,930
rolling around in here and looking at

387
00:17:52,039 --> 00:17:59,299
how many there are outstanding right so

388
00:17:56,930 --> 00:18:01,880
this is the opt-out and this is the base

389
00:17:59,299 --> 00:18:05,419
off this is the first off index and

390
00:18:01,880 --> 00:18:06,950
that's it I think that's really it so as

391
00:18:05,420 --> 00:18:08,360
you push them on here you just fill

392
00:18:06,950 --> 00:18:10,190
those out and then when it goes to

393
00:18:08,359 --> 00:18:12,319
actually retire them it just retires

394
00:18:10,190 --> 00:18:14,538
them in order and I think

395
00:18:12,319 --> 00:18:18,168
that's all there is to it this we could

396
00:18:14,538 --> 00:18:19,879
say we could have this happen on two

397
00:18:18,169 --> 00:18:21,288
threads I don't think we need to but if

398
00:18:19,880 --> 00:18:23,740
we wanted to this would be much easier

399
00:18:21,288 --> 00:18:26,690
to have happen on two threads as well

400
00:18:23,740 --> 00:18:30,950
and so that's kind of a nicer thing to

401
00:18:26,690 --> 00:18:32,509
be able to do they're all so right so in

402
00:18:30,950 --> 00:18:34,548
here we just say look here's the texture

403
00:18:32,509 --> 00:18:38,058
op and so on and then all we need to

404
00:18:34,548 --> 00:18:46,490
remember in here is we need to remember

405
00:18:38,058 --> 00:18:49,720
like the the two parameters are told

406
00:18:46,490 --> 00:18:51,980
it's like how big this thing was right

407
00:18:49,720 --> 00:18:53,929
really we only need one parameter here

408
00:18:51,980 --> 00:18:56,509
which is what we will retire to so in

409
00:18:53,929 --> 00:18:58,159
some sense since we have the data we

410
00:18:56,509 --> 00:19:02,750
wouldn't necessary need that but what

411
00:18:58,159 --> 00:19:04,549
I'm gonna do here is say yeah I think I

412
00:19:02,750 --> 00:19:06,798
may just say all right you know really

413
00:19:04,548 --> 00:19:13,849
what what we want to have happen here is

414
00:19:06,798 --> 00:19:20,148
just something that says the I guess

415
00:19:13,849 --> 00:19:22,759
like re up to memory at or something so

416
00:19:20,148 --> 00:19:24,859
basically like that's where as we're

417
00:19:22,759 --> 00:19:27,110
talking about where the like high-water

418
00:19:24,859 --> 00:19:33,769
mark is of this stuff that we have to

419
00:19:27,109 --> 00:19:36,138
sort of advance around that is you know

420
00:19:33,769 --> 00:19:42,500
that is the the value we would we would

421
00:19:36,138 --> 00:19:43,729
advance up to um we could do this in a

422
00:19:42,500 --> 00:19:46,009
way that would be a little easier on

423
00:19:43,730 --> 00:19:47,659
ourselves and maybe I would like to do

424
00:19:46,009 --> 00:19:50,360
it that way right we could just make

425
00:19:47,659 --> 00:19:52,278
these vu 64's and then we just mod them

426
00:19:50,359 --> 00:19:54,168
into the transfer memory size so you

427
00:19:52,278 --> 00:19:58,519
know we would do something like this so

428
00:19:54,169 --> 00:20:02,659
we'd say you know that what's the bottom

429
00:19:58,519 --> 00:20:05,179
three part and what's the top unused

430
00:20:02,659 --> 00:20:06,200
part you know what I mean so we could do

431
00:20:05,179 --> 00:20:08,090
something like that I'm trying to think

432
00:20:06,200 --> 00:20:13,460
if that's easier or harder it might be

433
00:20:08,089 --> 00:20:15,528
easier because that's going to be the

434
00:20:13,460 --> 00:20:17,980
entirety of the complexity there is just

435
00:20:15,528 --> 00:20:17,980
you know

436
00:20:23,929 --> 00:20:32,100
it's just gonna be like do we have

437
00:20:28,829 --> 00:20:38,058
enough free space given the wrapping

438
00:20:32,099 --> 00:20:38,058
point so yeah

439
00:20:48,940 --> 00:20:59,400
I'm not sure does anyone have any

440
00:20:56,799 --> 00:20:59,399
opinions on this

441
00:21:19,599 --> 00:21:34,119
I guess I'll be the u6 start for you

442
00:21:22,569 --> 00:21:36,189
sixty-four us from now I'm going to call

443
00:21:34,119 --> 00:21:37,329
it first used and then I'm going to you

444
00:21:36,190 --> 00:21:41,380
know called a used count so we're just

445
00:21:37,329 --> 00:21:42,909
going to talk about the range and and

446
00:21:41,380 --> 00:21:44,920
that's you know we'll just work with it

447
00:21:42,910 --> 00:21:46,230
from there so you know we'll do that's

448
00:21:44,920 --> 00:21:48,670
what we'll do

449
00:21:46,230 --> 00:21:50,529
and then you hear for texture up we're

450
00:21:48,670 --> 00:21:54,880
just gonna say well you know when this

451
00:21:50,529 --> 00:21:57,420
thing is done then the the last used is

452
00:21:54,880 --> 00:22:01,570
this right

453
00:21:57,420 --> 00:22:11,590
and that'll be used to essentially free

454
00:22:01,569 --> 00:22:15,189
up to that point so that's all we're

455
00:22:11,589 --> 00:22:18,129
talking about here and the renderer

456
00:22:15,190 --> 00:22:20,019
texture cue now and in fact I can just I

457
00:22:18,130 --> 00:22:24,370
don't need the opera's to be what it was

458
00:22:20,019 --> 00:22:26,349
here I'll just make it be that right and

459
00:22:24,369 --> 00:22:28,779
that way there's no free list there's no

460
00:22:26,349 --> 00:22:31,209
nothing that's the entirety of the whole

461
00:22:28,779 --> 00:22:36,099
thing and it does all of the operations

462
00:22:31,210 --> 00:22:39,220
that way right so then it's much easier

463
00:22:36,099 --> 00:22:43,750
when we do complete texture up versus

464
00:22:39,220 --> 00:22:46,690
cancel texture up the only real thing we

465
00:22:43,750 --> 00:22:48,670
need to do here is like mark when these

466
00:22:46,690 --> 00:22:50,170
are completed and when they're not right

467
00:22:48,670 --> 00:22:51,940
we just need to know if they're

468
00:22:50,170 --> 00:22:56,860
completed so we just need a thing that's

469
00:22:51,940 --> 00:22:59,799
here like that's it you know what I mean

470
00:22:56,859 --> 00:23:02,139
and so if we have these various texture

471
00:22:59,799 --> 00:23:04,149
ops like okay there's complete texture

472
00:23:02,140 --> 00:23:07,740
op and there's like you know cancel

473
00:23:04,150 --> 00:23:10,180
texture up I think with the other one so

474
00:23:07,740 --> 00:23:12,460
cancel texture op is just saying that

475
00:23:10,180 --> 00:23:16,960
it's completed without ever ever without

476
00:23:12,460 --> 00:23:21,519
ever actually having it you know get

477
00:23:16,960 --> 00:23:24,329
issued when we do begin texture up and

478
00:23:21,519 --> 00:23:26,889
you know I think we probably need to

479
00:23:24,329 --> 00:23:28,710
since we know that we again this is

480
00:23:26,890 --> 00:23:30,670
stuff that always happens synchronously

481
00:23:28,710 --> 00:23:33,370
basically all this stuff happens

482
00:23:30,670 --> 00:23:34,509
synchronously we don't

483
00:23:33,369 --> 00:23:36,129
you have to do anything more complicated

484
00:23:34,509 --> 00:23:38,470
like we don't need a thing here that

485
00:23:36,130 --> 00:23:43,300
says like is it in flight or in progress

486
00:23:38,470 --> 00:23:46,390
because that's that's all gonna happen

487
00:23:43,299 --> 00:23:48,099
completely synchronously and and unless

488
00:23:46,390 --> 00:23:49,870
we later decide to make it asynchronous

489
00:23:48,099 --> 00:23:51,279
for some reason then we would add the

490
00:23:49,869 --> 00:23:55,329
tracking then but up until then we

491
00:23:51,279 --> 00:23:58,569
really just don't need to at all so I

492
00:23:55,329 --> 00:24:01,750
think complete text your app actually

493
00:23:58,569 --> 00:24:04,149
doesn't do anything meaning it's a call

494
00:24:01,750 --> 00:24:08,619
and we probably want the call to be

495
00:24:04,150 --> 00:24:15,070
there but we don't actually need the

496
00:24:08,619 --> 00:24:25,389
call to do anything at all so when we do

497
00:24:15,069 --> 00:24:27,519
begin texture up I'm trying to even

498
00:24:25,390 --> 00:24:30,300
figure out why we even care about this

499
00:24:27,519 --> 00:24:30,299
at all so

500
00:24:36,130 --> 00:24:41,380
so maybe we do need one think about it

501
00:24:38,079 --> 00:24:43,569
that just says hey it's ready cuz we we

502
00:24:41,380 --> 00:24:45,160
make this and then we're gonna you know

503
00:24:43,569 --> 00:24:47,500
fill it out but it's not ready to use

504
00:24:45,160 --> 00:24:49,298
yet and so we need to wait until this

505
00:24:47,500 --> 00:24:52,450
gets called to know that it's ready I

506
00:24:49,298 --> 00:24:54,609
guess so I guess we do need one piece of

507
00:24:52,450 --> 00:25:01,620
state information here which is like is

508
00:24:54,609 --> 00:25:01,619
it ready so we really need like this

509
00:25:17,159 --> 00:25:22,570
something like that so we would sort of

510
00:25:20,230 --> 00:25:28,720
say yeah like you know what there's a

511
00:25:22,569 --> 00:25:31,450
state value the state value is is

512
00:25:28,720 --> 00:25:33,700
something that generally can get done

513
00:25:31,450 --> 00:25:36,250
asynchronously so like this is a

514
00:25:33,700 --> 00:25:37,808
volatile value in a sense you don't

515
00:25:36,250 --> 00:25:39,490
really have to read it volatile but if

516
00:25:37,808 --> 00:25:42,399
someone were to spin on it you would

517
00:25:39,490 --> 00:25:45,579
want it to be when we cancel a texture

518
00:25:42,400 --> 00:25:51,159
up we would set the state here to be

519
00:25:45,579 --> 00:25:55,048
empty when we complete a texture up that

520
00:25:51,159 --> 00:25:55,049
says that it's ready to be transferred

521
00:25:57,359 --> 00:26:02,699
and when we begin one its pending load

522
00:26:03,569 --> 00:26:08,619
now when we begin the ticket mutex on

523
00:26:06,279 --> 00:26:11,710
here like again I'm trying to think now

524
00:26:08,619 --> 00:26:15,699
I don't think we ever actually need the

525
00:26:11,710 --> 00:26:22,210
mutex anymore like I think we're wait

526
00:26:15,700 --> 00:26:22,509
free now in a sense cuz all we do is

527
00:26:22,210 --> 00:26:24,519
just

528
00:26:22,509 --> 00:26:26,109
hey we transfer stuff when it's ready

529
00:26:24,519 --> 00:26:30,009
and until it's ready we don't and

530
00:26:26,109 --> 00:26:34,178
threads don't care so I think that may

531
00:26:30,009 --> 00:26:35,140
eliminate a ticket entirely possibly and

532
00:26:34,179 --> 00:26:38,669
don't quote me on that because

533
00:26:35,140 --> 00:26:38,669
multi-threaded programming is very hard

534
00:26:38,788 --> 00:26:45,069
so you know I don't want to say that

535
00:26:42,038 --> 00:26:47,230
that's necessarily true yet but anyway

536
00:26:45,069 --> 00:26:48,000
so in here we would essentially say look

537
00:26:47,230 --> 00:26:51,660
okay this

538
00:26:48,000 --> 00:26:53,400
state is that we're pending a load so we

539
00:26:51,660 --> 00:26:55,170
don't want do anything if you cancel it

540
00:26:53,400 --> 00:26:57,630
we just set it to empty and move on if

541
00:26:55,170 --> 00:27:01,500
you are ready to transfer then we are

542
00:26:57,630 --> 00:27:03,900
ready to transfer right and everything's

543
00:27:01,500 --> 00:27:05,730
fine so in order to get one of these

544
00:27:03,900 --> 00:27:08,100
again it's still going to be the same

545
00:27:05,730 --> 00:27:10,319
was before meaning we do have a soft

546
00:27:08,099 --> 00:27:12,689
failure case that failure case is when

547
00:27:10,319 --> 00:27:16,200
the OP count has exceeded the number

548
00:27:12,690 --> 00:27:20,250
that we could support right so if we

549
00:27:16,200 --> 00:27:22,200
come in here and we see that the OP

550
00:27:20,250 --> 00:27:28,980
count cannot support it right we would

551
00:27:22,200 --> 00:27:33,120
say if the Q op count is less than the

552
00:27:28,980 --> 00:27:35,670
ops then we can Q otherwise we cannot Q

553
00:27:33,119 --> 00:27:37,769
you know what I mean so we look and say

554
00:27:35,670 --> 00:27:42,390
look can we queue if we can cute let's

555
00:27:37,769 --> 00:27:46,139
go further forward here when we do this

556
00:27:42,390 --> 00:27:50,460
we want to say it's gonna be whichever

557
00:27:46,140 --> 00:27:52,860
one is the queue off count plus plus now

558
00:27:50,460 --> 00:27:54,720
this is not actually quite right because

559
00:27:52,859 --> 00:27:57,899
again we got this first off index and

560
00:27:54,720 --> 00:28:01,110
that's a wrapping value so actually what

561
00:27:57,900 --> 00:28:02,880
we would do here is say well if we're

562
00:28:01,109 --> 00:28:06,899
gonna use one of these then we need to

563
00:28:02,880 --> 00:28:09,420
move it forward one and so that you know

564
00:28:06,900 --> 00:28:13,190
definitely does that but in terms of

565
00:28:09,420 --> 00:28:16,620
where we are we need to take this value

566
00:28:13,190 --> 00:28:18,990
like op index we need to start at the

567
00:28:16,619 --> 00:28:22,469
first up index and then add however much

568
00:28:18,990 --> 00:28:25,319
we have there that then needs to get

569
00:28:22,470 --> 00:28:30,539
wrapped around so we then need to say

570
00:28:25,319 --> 00:28:34,519
opt index you know mod array count Q ops

571
00:28:30,539 --> 00:28:37,170
to get the you know to get us into the

572
00:28:34,519 --> 00:28:40,920
circular buffer in the right place once

573
00:28:37,170 --> 00:28:44,070
we have that we're ready to go and we

574
00:28:40,920 --> 00:28:48,269
can proceed as as necessary right so we

575
00:28:44,069 --> 00:28:49,950
can say here's the the text for handle

576
00:28:48,269 --> 00:28:51,389
well I guess they're gonna fill out the

577
00:28:49,950 --> 00:28:54,299
texture handle we don't care about that

578
00:28:51,390 --> 00:28:58,740
so we would say here's the data to fill

579
00:28:54,299 --> 00:29:01,039
in the transfer memory last used and the

580
00:28:58,740 --> 00:29:01,039
state

581
00:29:02,429 --> 00:29:09,490
and all this stuff goes away right uh so

582
00:29:07,298 --> 00:29:11,139
that's you know again pretty nice and

583
00:29:09,490 --> 00:29:13,690
clean but now we have an additional

584
00:29:11,140 --> 00:29:16,659
check we have to make so really it's

585
00:29:13,690 --> 00:29:18,460
it's not just this we also have to make

586
00:29:16,659 --> 00:29:20,230
sure that the memory that you're asking

587
00:29:18,460 --> 00:29:32,500
for is memory that we actually have

588
00:29:20,230 --> 00:29:35,440
right because we might not have right we

589
00:29:32,500 --> 00:29:37,480
might not have the memory now there's

590
00:29:35,440 --> 00:29:39,100
two ways we can because this is a

591
00:29:37,480 --> 00:29:41,230
wrapping buffer there's two ways we can

592
00:29:39,099 --> 00:29:43,000
do this one way is to actually use split

593
00:29:41,230 --> 00:29:46,000
loads and so what would happen there is

594
00:29:43,000 --> 00:29:48,759
if you asked for say the 16 megabyte

595
00:29:46,000 --> 00:29:50,169
large download but you were right at the

596
00:29:48,759 --> 00:29:52,929
end of the buffer and there is only one

597
00:29:50,169 --> 00:29:54,669
megabyte of transfer space left it would

598
00:29:52,929 --> 00:29:56,559
give you that megabyte and then 50

599
00:29:54,669 --> 00:29:59,288
megabytes in the beginning you'd split

600
00:29:56,558 --> 00:30:01,808
load into the two halves then when it

601
00:29:59,288 --> 00:30:04,089
goes to to do the texture update it

602
00:30:01,808 --> 00:30:06,519
would actually split update using the

603
00:30:04,089 --> 00:30:11,168
two halves as well right

604
00:30:06,519 --> 00:30:12,519
so crazytown that's if we wanted to be

605
00:30:11,169 --> 00:30:13,899
super efficient we would just do the

606
00:30:12,519 --> 00:30:17,200
extra code there because you totally

607
00:30:13,898 --> 00:30:19,119
could not really worth our time I don't

608
00:30:17,200 --> 00:30:20,470
think in this case because it's only for

609
00:30:19,119 --> 00:30:22,269
the end of the buffer it doesn't really

610
00:30:20,470 --> 00:30:23,710
matter so what I'm gonna say here is

611
00:30:22,269 --> 00:30:26,230
we're just gonna look at how much memory

612
00:30:23,710 --> 00:30:30,308
we have left before the end of the

613
00:30:26,230 --> 00:30:31,839
buffer and how much memory we would have

614
00:30:30,308 --> 00:30:34,629
if we reset to the beginning of the

615
00:30:31,839 --> 00:30:36,730
buffer if either of those two things is

616
00:30:34,630 --> 00:30:38,140
enough we go ahead if we don't then we

617
00:30:36,730 --> 00:30:40,740
just say no you can't do it yet you got

618
00:30:38,140 --> 00:30:46,090
to wait till some of the ops finish

619
00:30:40,740 --> 00:30:50,019
right very simple so here's the size

620
00:30:46,089 --> 00:30:53,949
that we need it's the width times the

621
00:30:50,019 --> 00:30:55,569
height times the pixel density right so

622
00:30:53,950 --> 00:30:58,000
when you do begin texture up we're gonna

623
00:30:55,569 --> 00:30:59,889
ask for this we will maybe ask for more

624
00:30:58,000 --> 00:31:02,140
than that later when we need to start

625
00:30:59,890 --> 00:31:04,240
transferring MIT maps so this could get

626
00:31:02,140 --> 00:31:06,070
more complicated so we want it boil it

627
00:31:04,240 --> 00:31:08,190
down to a science requested because we

628
00:31:06,069 --> 00:31:10,418
want to be able to change this later

629
00:31:08,190 --> 00:31:13,480
we're gonna look at the size requested

630
00:31:10,419 --> 00:31:14,269
we're gonna say first of all if we look

631
00:31:13,480 --> 00:31:17,239
at how much member

632
00:31:14,269 --> 00:31:20,450
we've got you know we've got the the

633
00:31:17,239 --> 00:31:22,548
amount that's used so in here we kinda

634
00:31:20,450 --> 00:31:24,979
have to say we need this actually have

635
00:31:22,548 --> 00:31:30,168
we and we don't have here how much total

636
00:31:24,979 --> 00:31:31,519
trance remember there is so what we want

637
00:31:30,169 --> 00:31:34,278
to do is say alright there's two

638
00:31:31,519 --> 00:31:35,628
possible ways we can load this one is we

639
00:31:34,278 --> 00:31:39,079
can reset to the beginning of the buffer

640
00:31:35,628 --> 00:31:41,628
the other is we can load from where we

641
00:31:39,079 --> 00:31:44,928
are right now and so in order to do that

642
00:31:41,628 --> 00:31:49,819
we have to compute a temporary set of

643
00:31:44,929 --> 00:31:56,719
values right in here so what we need to

644
00:31:49,819 --> 00:31:58,450
do is say well if we were to load if we

645
00:31:56,719 --> 00:32:09,919
were to load at the current location

646
00:31:58,450 --> 00:32:18,459
then that would be that would be here

647
00:32:09,919 --> 00:32:21,769
and this is wrapped by this value right

648
00:32:18,459 --> 00:32:24,788
so you know if we were to do this then

649
00:32:21,769 --> 00:32:34,159
this right here is sort of a wrapped

650
00:32:24,788 --> 00:32:35,719
value so yeah like you need to you need

651
00:32:34,159 --> 00:32:37,789
to mod by whatever the size of it's

652
00:32:35,719 --> 00:32:39,229
gonna be here and I mean and we could

653
00:32:37,788 --> 00:32:40,878
make that a power of two if we had to if

654
00:32:39,229 --> 00:32:42,499
this was like really heavy pressure but

655
00:32:40,878 --> 00:32:44,898
it's not gonna be so doesn't super

656
00:32:42,499 --> 00:32:46,848
matter but anyway so we do the memory at

657
00:32:44,898 --> 00:32:49,338
here we say look whatever this is

658
00:32:46,848 --> 00:32:53,078
wrapped that's where the memory actually

659
00:32:49,338 --> 00:33:00,979
starts so that's the location that means

660
00:32:53,078 --> 00:33:01,819
that there are sort of two sizes if we

661
00:33:00,979 --> 00:33:05,479
start there

662
00:33:01,819 --> 00:33:07,249
we know we can go to either first used

663
00:33:05,479 --> 00:33:11,209
or the end depending on which of the

664
00:33:07,249 --> 00:33:13,129
cases we have and if first used is in

665
00:33:11,209 --> 00:33:15,259
front of us or behind us that sort of

666
00:33:13,128 --> 00:33:17,569
tells us which wrapping scenario we've

667
00:33:15,259 --> 00:33:19,719
got right so let me just draw that for

668
00:33:17,569 --> 00:33:19,718
you

669
00:33:29,069 --> 00:33:37,799
so if you imagine that we have it in our

670
00:33:34,619 --> 00:33:42,899
buffer we've got a particular point and

671
00:33:37,799 --> 00:33:45,299
we've got a particular size then the

672
00:33:42,900 --> 00:33:51,030
total amount we could load is either

673
00:33:45,299 --> 00:33:54,049
this amount or this amount right so we

674
00:33:51,029 --> 00:33:57,269
can either load this much or this much

675
00:33:54,049 --> 00:33:59,269
but if instead you know and this was the

676
00:33:57,269 --> 00:34:05,099
start pointer so this is the used amount

677
00:33:59,269 --> 00:34:12,440
if instead it looks like this then this

678
00:34:05,099 --> 00:34:16,529
part is technically back here right and

679
00:34:12,440 --> 00:34:19,289
so in that case we can only use just the

680
00:34:16,530 --> 00:34:22,409
part that's in between so we have two

681
00:34:19,289 --> 00:34:25,980
different cases to look at one is if we

682
00:34:22,409 --> 00:34:28,769
wrap and one is if we do not wrap and I

683
00:34:25,980 --> 00:34:31,889
think those are the only two cases right

684
00:34:28,769 --> 00:34:37,349
so either we've got to or we've just got

685
00:34:31,889 --> 00:34:39,530
one that's my story and I'm sticking to

686
00:34:37,349 --> 00:34:39,529
it

687
00:34:40,429 --> 00:34:44,010
and so what we need to do is

688
00:34:42,570 --> 00:34:45,629
differentiate between those two cases

689
00:34:44,010 --> 00:34:47,700
and we can tell which one it is by

690
00:34:45,628 --> 00:34:49,710
whether or not we wrapped so what I

691
00:34:47,699 --> 00:34:52,888
could do is actually do it this way and

692
00:34:49,710 --> 00:34:54,720
say look if memory AK is greater than or

693
00:34:52,889 --> 00:34:57,000
equal to the count

694
00:34:54,719 --> 00:34:59,609
you know like meaning we've gotten to

695
00:34:57,000 --> 00:35:06,329
the point where we would have to wrap

696
00:34:59,610 --> 00:35:13,010
around this is like the used space wraps

697
00:35:06,329 --> 00:35:13,009
around otherwise

698
00:35:23,380 --> 00:35:27,710
so in the case where it wraps around

699
00:35:25,548 --> 00:35:30,019
that's actually easier case because then

700
00:35:27,710 --> 00:35:32,298
what we know is it's just where ever we

701
00:35:30,019 --> 00:35:35,710
would have been right so then when we do

702
00:35:32,298 --> 00:35:38,480
the mod right so we do like memory at

703
00:35:35,710 --> 00:35:42,230
minus equals transfer memory count so

704
00:35:38,480 --> 00:35:45,108
now we know like this we know this

705
00:35:42,230 --> 00:35:53,030
location here and we can just say the

706
00:35:45,108 --> 00:35:59,298
max size you know the max size in that

707
00:35:53,030 --> 00:36:05,059
case is just wherever the used space is

708
00:35:59,298 --> 00:36:06,619
being started - where we are at right so

709
00:36:05,059 --> 00:36:08,450
that's where we're at and here's how

710
00:36:06,619 --> 00:36:12,470
much we could do here's how much we

711
00:36:08,449 --> 00:36:14,808
could use in the other case where the

712
00:36:12,469 --> 00:36:17,209
use space is just one chunk that means

713
00:36:14,809 --> 00:36:22,460
we have two spaces so you say perhaps

714
00:36:17,210 --> 00:36:24,798
around one continuous usable space the

715
00:36:22,460 --> 00:36:32,829
new space is contained so this is the

716
00:36:24,798 --> 00:36:39,500
used space is you know it doesn't wrap

717
00:36:32,829 --> 00:36:42,650
to useable spaces on either side so what

718
00:36:39,500 --> 00:36:45,170
we want to do there is say let's get the

719
00:36:42,650 --> 00:36:47,690
size available by saying wherever the

720
00:36:45,170 --> 00:36:52,338
memory at is we want to take the total

721
00:36:47,690 --> 00:36:54,170
size in this case look at you know we

722
00:36:52,338 --> 00:36:57,798
want to look at that size now that we

723
00:36:54,170 --> 00:37:01,099
know how much available there is we are

724
00:36:57,798 --> 00:37:04,489
ready to go if however that's too small

725
00:37:01,099 --> 00:37:06,859
we could instead try also the other one

726
00:37:04,489 --> 00:37:09,649
which is starting from the beginning and

727
00:37:06,858 --> 00:37:14,259
looking up to a memory app so if size

728
00:37:09,650 --> 00:37:14,260
available is too small so meaning this

729
00:37:14,650 --> 00:37:21,710
right then what we can do is compute it

730
00:37:18,500 --> 00:37:24,199
differently and say okay memory at is

731
00:37:21,710 --> 00:37:25,519
actually going to be instead equal to

732
00:37:24,199 --> 00:37:27,798
two zero

733
00:37:25,519 --> 00:37:30,469
we're gonna start at the bottom and the

734
00:37:27,798 --> 00:37:39,179
size available is going to be

735
00:37:30,469 --> 00:37:42,149
computed this way know what I mean

736
00:37:39,179 --> 00:37:45,568
which actually cook it happens to be the

737
00:37:42,150 --> 00:37:49,318
same computation as here you know what I

738
00:37:45,568 --> 00:37:51,199
mean so that's fine we could simplify

739
00:37:49,318 --> 00:37:56,608
this computation a little bit by just

740
00:37:51,199 --> 00:37:59,338
having actually having the memory stop

741
00:37:56,608 --> 00:38:00,630
location be a thing that we pass out I'm

742
00:37:59,338 --> 00:38:04,529
not gonna do that I think that's fine

743
00:38:00,630 --> 00:38:09,539
it's perfectly legible the way it is so

744
00:38:04,530 --> 00:38:10,890
that's how that would work right so then

745
00:38:09,539 --> 00:38:12,420
we come down here and say whatever we

746
00:38:10,889 --> 00:38:15,480
work we know we did the best we could

747
00:38:12,420 --> 00:38:19,050
there so if the science requested will

748
00:38:15,480 --> 00:38:20,730
fit right and and I guess I could phrase

749
00:38:19,050 --> 00:38:23,339
it the same way as I phrased it at the

750
00:38:20,730 --> 00:38:26,400
top there just to be clear so if we can

751
00:38:23,338 --> 00:38:28,078
fit the thing that we want and there

752
00:38:26,400 --> 00:38:29,608
actually is room in the opto and

753
00:38:28,079 --> 00:38:31,589
probably I should do this in the other

754
00:38:29,608 --> 00:38:32,969
order because honestly why bother with

755
00:38:31,588 --> 00:38:34,828
all this work if there aren't any ops

756
00:38:32,969 --> 00:38:36,449
available anyway right that seems like a

757
00:38:34,829 --> 00:38:38,060
force that's why I do that like don't

758
00:38:36,449 --> 00:38:40,318
bother actually spending all your time

759
00:38:38,059 --> 00:38:41,759
computing where to put this thing if you

760
00:38:40,318 --> 00:38:43,829
know you can't actually issue the

761
00:38:41,760 --> 00:38:45,720
operation anyway so assuming we could

762
00:38:43,829 --> 00:38:48,300
issue the operation and there's room

763
00:38:45,719 --> 00:38:56,159
then we're done now all we have to do is

764
00:38:48,300 --> 00:38:59,160
say all right going here get the up in

765
00:38:56,159 --> 00:39:00,838
question get ready to fill it out we

766
00:38:59,159 --> 00:39:05,699
know where the data is it's just the

767
00:39:00,838 --> 00:39:08,279
transfer memory of the q plus the

768
00:39:05,699 --> 00:39:10,019
location at where we want to put it we

769
00:39:08,280 --> 00:39:11,849
know exactly where the transfer memory

770
00:39:10,019 --> 00:39:16,108
last years is going to be it's just

771
00:39:11,849 --> 00:39:18,539
gonna be this memory at location plus

772
00:39:16,108 --> 00:39:25,670
the total size that we were requested

773
00:39:18,539 --> 00:39:25,670
and that's it right that's the end of it

774
00:39:31,650 --> 00:39:36,280
so unless I screwed something up like

775
00:39:34,300 --> 00:39:37,330
that in tot which I probably did but you

776
00:39:36,280 --> 00:39:39,540
know hopefully I'm not missing anything

777
00:39:37,329 --> 00:39:42,670
major and we'll just be able to bug it

778
00:39:39,539 --> 00:39:45,219
that entire thing is that asynchronous

779
00:39:42,670 --> 00:39:46,840
like texture transfer q4 variable size

780
00:39:45,219 --> 00:39:48,219
texture things that would just work and

781
00:39:46,840 --> 00:39:49,600
could be done multi-threaded if you

782
00:39:48,219 --> 00:39:51,849
wanted to we don't have multiple threads

783
00:39:49,599 --> 00:39:54,400
that can issue texture requests at the

784
00:39:51,849 --> 00:39:56,429
moment we do we just have multiple

785
00:39:54,400 --> 00:39:58,858
threads that can finish texture requests

786
00:39:56,429 --> 00:40:01,179
but I think that just does everything

787
00:39:58,858 --> 00:40:02,730
right and it could transfer arbitrary

788
00:40:01,179 --> 00:40:05,440
size texture is just fine

789
00:40:02,730 --> 00:40:08,199
so then all we need to do now we say

790
00:40:05,440 --> 00:40:10,210
well all right now we just you know when

791
00:40:08,199 --> 00:40:11,980
we set up these things we do have one

792
00:40:10,210 --> 00:40:13,829
more thing that we need to do also by

793
00:40:11,980 --> 00:40:16,269
the way in it texture Q is now

794
00:40:13,829 --> 00:40:20,949
incredibly trivial and doesn't require

795
00:40:16,269 --> 00:40:22,239
any memory either for the texture ops

796
00:40:20,949 --> 00:40:27,969
although what we probably want to do

797
00:40:22,239 --> 00:40:34,569
here is act as make it so that that we

798
00:40:27,969 --> 00:40:37,108
probably want to make it so that what's

799
00:40:34,570 --> 00:40:37,109
the word I'm looking for

800
00:40:43,449 --> 00:40:48,460
I'm drawing a blank oh we probably want

801
00:40:46,420 --> 00:40:49,900
to make it so that that they can pass in

802
00:40:48,460 --> 00:40:52,510
what they're using for the transfer

803
00:40:49,900 --> 00:40:54,639
memory maybe or like how much they want

804
00:40:52,510 --> 00:40:56,320
but I feel like we probably need to

805
00:40:54,639 --> 00:40:58,659
allocate it because it's kind of coming

806
00:40:56,320 --> 00:41:06,340
it might come from the graphics layer

807
00:40:58,659 --> 00:41:10,389
itself you know what I mean so you can

808
00:41:06,340 --> 00:41:14,769
see why I'm a little like I think maybe

809
00:41:10,389 --> 00:41:18,779
you're not you really shouldn't have it

810
00:41:14,769 --> 00:41:18,780
be passed in like that anymore

811
00:41:18,960 --> 00:41:21,960
yeah

812
00:41:29,190 --> 00:41:34,190
so I think maybe we're just gonna want

813
00:41:31,349 --> 00:41:40,170
to do something like okay you know

814
00:41:34,190 --> 00:41:40,619
requested transfer buffer sighs you know

815
00:41:40,170 --> 00:41:42,809
what I mean

816
00:41:40,619 --> 00:41:44,670
and so then in here we would just say

817
00:41:42,809 --> 00:41:47,970
well you know none of this stuff happens

818
00:41:44,670 --> 00:41:49,710
anymore or that's just not true we go in

819
00:41:47,969 --> 00:41:52,618
here to the queue and we say well the

820
00:41:49,710 --> 00:41:54,960
transfer memory counts is going to be

821
00:41:52,619 --> 00:41:58,380
the requested transfer buffer size the

822
00:41:54,960 --> 00:42:03,088
transfer memory first used 0 the

823
00:41:58,380 --> 00:42:05,910
transfer memory used count is zero and

824
00:42:03,088 --> 00:42:07,650
the transfer memory is like some kind of

825
00:42:05,909 --> 00:42:09,989
something where we get graphics card

826
00:42:07,650 --> 00:42:10,470
memory maybe or we don't or who knows

827
00:42:09,989 --> 00:42:14,909
what

828
00:42:10,469 --> 00:42:20,909
right the OP count zero the first ops

829
00:42:14,909 --> 00:42:22,949
zero and that's all there is right so I

830
00:42:20,909 --> 00:42:24,868
think then if we look at what happens

831
00:42:22,949 --> 00:42:26,759
here this it's really just the transfer

832
00:42:24,869 --> 00:42:29,849
memory piece that's a little bit

833
00:42:26,760 --> 00:42:33,630
Squinkie and so what we want to do is we

834
00:42:29,849 --> 00:42:36,750
want to look inside the open gel side of

835
00:42:33,630 --> 00:42:40,528
things here and we want to probably

836
00:42:36,750 --> 00:42:43,048
supply that memory access or in here you

837
00:42:40,528 --> 00:42:45,298
know what I mean so when you actually do

838
00:42:43,048 --> 00:42:48,329
the init texture cue it would need some

839
00:42:45,298 --> 00:42:50,608
way of getting like it needs a way to

840
00:42:48,329 --> 00:42:55,339
access this I'm going to go ahead and

841
00:42:50,608 --> 00:42:55,338
turn back on our render or testbed

842
00:43:01,980 --> 00:43:06,730
because I think that'll be a good way to

843
00:43:04,298 --> 00:43:08,619
test this stuff out and also we want to

844
00:43:06,730 --> 00:43:10,929
make sure that still compiles you know

845
00:43:08,619 --> 00:43:13,780
what I mean in fact what I could do is I

846
00:43:10,929 --> 00:43:15,818
can even I can REM out even the game if

847
00:43:13,780 --> 00:43:19,240
we wanted to but you know at the moment

848
00:43:15,818 --> 00:43:21,489
we can just focus on this part this

849
00:43:19,239 --> 00:43:23,169
stuff DQ pending in NQ free now go away

850
00:43:21,489 --> 00:43:27,250
by the way they're just gone entirely

851
00:43:23,170 --> 00:43:28,990
they don't have to do anything and so

852
00:43:27,250 --> 00:43:31,349
really what we're focused in that on now

853
00:43:28,989 --> 00:43:35,379
here is like the OpenGL managed textures

854
00:43:31,349 --> 00:43:38,200
bit of things and so in terms of getting

855
00:43:35,380 --> 00:43:40,210
like buffer memory to transfer this

856
00:43:38,199 --> 00:43:45,368
stuff like I said I don't know that we

857
00:43:40,210 --> 00:43:47,199
actually want to do that per se we could

858
00:43:45,369 --> 00:43:49,030
later but at the moment I don't I think

859
00:43:47,199 --> 00:43:51,519
we want to just not take on that

860
00:43:49,030 --> 00:43:53,530
additional ball of wax because that's a

861
00:43:51,519 --> 00:43:54,969
graphic GPU programming issue that we

862
00:43:53,530 --> 00:43:56,650
probably just want to leave to a

863
00:43:54,969 --> 00:43:58,959
separate time and that's when we think

864
00:43:56,650 --> 00:44:00,780
we want to play with is how to most

865
00:43:58,960 --> 00:44:02,920
efficiently get those transfer buffers

866
00:44:00,780 --> 00:44:04,660
so what I would want to do here is have

867
00:44:02,920 --> 00:44:10,930
a way that we can allocate memory that

868
00:44:04,659 --> 00:44:12,788
actually just works in terms of yeah

869
00:44:10,929 --> 00:44:14,588
like in terms of how this this texture

870
00:44:12,789 --> 00:44:16,480
queue is initialized and it sort of

871
00:44:14,588 --> 00:44:17,739
needs it needs to be able to thunk

872
00:44:16,480 --> 00:44:19,719
through like needs to be

873
00:44:17,739 --> 00:44:21,159
platform-specific potentially do you

874
00:44:19,719 --> 00:44:22,598
know what I mean and that's a little

875
00:44:21,159 --> 00:44:24,818
unfortunate because it complicates that

876
00:44:22,599 --> 00:44:26,500
code but like if we really want to be

877
00:44:24,818 --> 00:44:30,278
serious and say that you know you could

878
00:44:26,500 --> 00:44:32,650
go implement a serious renderer in here

879
00:44:30,278 --> 00:44:37,139
somewhere I just don't see any way to

880
00:44:32,650 --> 00:44:39,309
not do that like you're gonna have to do

881
00:44:37,139 --> 00:44:42,368
you're gonna have to allow it to

882
00:44:39,309 --> 00:44:45,609
allocate the transfer memory that's just

883
00:44:42,369 --> 00:44:49,180
it's not plausible to claim that this

884
00:44:45,608 --> 00:44:50,980
would be a a real render layer if it

885
00:44:49,179 --> 00:44:55,690
couldn't do that because you know that's

886
00:44:50,980 --> 00:44:57,400
gonna happen on most platforms so if we

887
00:44:55,690 --> 00:45:02,079
look at how the renderer gets loaded

888
00:44:57,400 --> 00:45:03,900
here again I think that means that the

889
00:45:02,079 --> 00:45:05,980
way that we're doing texture queues we

890
00:45:03,900 --> 00:45:08,230
vacillated a little bit with how we were

891
00:45:05,980 --> 00:45:09,760
doing the texture queues I really think

892
00:45:08,230 --> 00:45:13,449
what that means is that in it texture

893
00:45:09,760 --> 00:45:15,400
queue call is is really gonna have to

894
00:45:13,449 --> 00:45:18,759
move into the platform specific

895
00:45:15,400 --> 00:45:20,710
part of this right another way to say

896
00:45:18,760 --> 00:45:22,900
that would be you could still do this

897
00:45:20,710 --> 00:45:27,400
meaning you could still say how big this

898
00:45:22,900 --> 00:45:28,900
was and pass the memory here but it

899
00:45:27,400 --> 00:45:31,480
really should be something that gets

900
00:45:28,900 --> 00:45:34,470
done inside the renderer side of things

901
00:45:31,480 --> 00:45:42,909
so I think we can probably still do this

902
00:45:34,469 --> 00:45:44,828
but I think we're gonna have to I think

903
00:45:42,909 --> 00:45:46,618
we're gonna have to move this stuff into

904
00:45:44,829 --> 00:45:50,890
the platform specific side eventually

905
00:45:46,619 --> 00:45:53,650
you know maybe not this part this could

906
00:45:50,889 --> 00:45:55,538
be shared but the actual it would be a

907
00:45:53,650 --> 00:45:59,588
thunk and the actual one would do a

908
00:45:55,539 --> 00:46:02,890
buffer lock around it if that makes

909
00:45:59,588 --> 00:46:06,038
sense and a buffer unlock here

910
00:46:02,889 --> 00:46:08,009
potentially so I think we're gonna have

911
00:46:06,039 --> 00:46:10,569
to do that move and I'm okay with that

912
00:46:08,010 --> 00:46:13,539
but you know off we go

913
00:46:10,568 --> 00:46:16,538
so so I think in it texture cue is fine

914
00:46:13,539 --> 00:46:18,099
like that now so and we'll like make

915
00:46:16,539 --> 00:46:21,910
sure we call that with with more space

916
00:46:18,099 --> 00:46:32,980
so like for example I'm here where we do

917
00:46:21,909 --> 00:46:34,598
in it texture cue so in here and we've

918
00:46:32,980 --> 00:46:36,400
got like Tex cue membrane whatever

919
00:46:34,599 --> 00:46:39,039
nonsense is going on here like this is

920
00:46:36,400 --> 00:46:42,789
not what we want anymore at all so that

921
00:46:39,039 --> 00:46:44,380
you know would go away and this is

922
00:46:42,789 --> 00:46:46,390
probably not how you would want to do

923
00:46:44,380 --> 00:46:48,068
that either you'd probably want to just

924
00:46:46,389 --> 00:46:49,868
get the pointer you know actually

925
00:46:48,068 --> 00:46:51,940
haven't allocate you know you would get

926
00:46:49,869 --> 00:46:54,400
a texture through out of this and so

927
00:46:51,940 --> 00:46:55,869
when we call like win32 init default

928
00:46:54,400 --> 00:46:59,740
renderer here and we get back the

929
00:46:55,869 --> 00:47:05,380
platform renderer you know inside that

930
00:46:59,739 --> 00:47:10,479
platform renderer where is that platform

931
00:47:05,380 --> 00:47:12,670
renderer so inside that platform render

932
00:47:10,480 --> 00:47:13,869
I think you know it gets what I'm trying

933
00:47:12,670 --> 00:47:16,298
to say is I think what we're getting at

934
00:47:13,869 --> 00:47:19,119
is the texture cue is just gonna be look

935
00:47:16,298 --> 00:47:23,858
in there right like when you get that

936
00:47:19,119 --> 00:47:27,880
you're gonna get that back from win32 in

937
00:47:23,858 --> 00:47:29,230
a default renderer and so you know it's

938
00:47:27,880 --> 00:47:34,349
it's not gonna look like this any

939
00:47:29,230 --> 00:47:38,099
more it's gonna look more like this and

940
00:47:34,349 --> 00:47:38,099
I'm not sure

941
00:47:38,789 --> 00:47:53,009
so inside win32 handmade renderer we

942
00:47:48,909 --> 00:47:53,009
call win32 load up in jail renderer and

943
00:47:58,409 --> 00:48:03,029
how does it actually allocate the memory

944
00:48:00,750 --> 00:48:06,309
it's close once we do render Alek

945
00:48:03,030 --> 00:48:06,700
alright so I think that's how it's gonna

946
00:48:06,309 --> 00:48:08,079
go

947
00:48:06,699 --> 00:48:09,579
you're gonna pull the texture cue out of

948
00:48:08,079 --> 00:48:10,929
there you're not gonna call this anymore

949
00:48:09,579 --> 00:48:13,500
you got to get the textview out of the

950
00:48:10,929 --> 00:48:16,868
platform renderer and so again I

951
00:48:13,500 --> 00:48:17,769
actually love that that I mean that's

952
00:48:16,869 --> 00:48:20,380
great

953
00:48:17,769 --> 00:48:23,409
the reason I really really like that is

954
00:48:20,380 --> 00:48:26,050
because if you look at what has to

955
00:48:23,409 --> 00:48:28,029
happen now the users of the code don't

956
00:48:26,050 --> 00:48:30,310
really have to super understand what's

957
00:48:28,030 --> 00:48:34,800
going on there anymore right it's just

958
00:48:30,309 --> 00:48:34,799
kind of like I don't know you know I

959
00:48:37,019 --> 00:48:41,409
know there's a text to cue and I know

960
00:48:39,309 --> 00:48:47,469
it's set up for me somewhere somehow

961
00:48:41,409 --> 00:48:48,759
right like right and so I think like the

962
00:48:47,469 --> 00:48:50,980
only thing we would really want to do

963
00:48:48,760 --> 00:48:54,220
there is maybe pass down how big we want

964
00:48:50,980 --> 00:48:58,329
that to be and so in here we would say

965
00:48:54,219 --> 00:49:01,029
oops something like you know I when we

966
00:48:58,329 --> 00:49:02,799
do max Claude camp for frame you know at

967
00:49:01,030 --> 00:49:04,300
the end maybe at the end of all that we

968
00:49:02,800 --> 00:49:09,690
would say like the texture transfer

969
00:49:04,300 --> 00:49:14,430
sighs so handmade textured transfer

970
00:49:09,690 --> 00:49:18,730
buffer size like that and then you know

971
00:49:14,429 --> 00:49:21,029
who knows remember where we specify that

972
00:49:18,730 --> 00:49:21,030
stuff

973
00:49:29,920 --> 00:49:35,300
it's just an handed platform so in here

974
00:49:32,750 --> 00:49:36,858
you know these yeah weak these could be

975
00:49:35,300 --> 00:49:38,960
things that are gonna be set more

976
00:49:36,858 --> 00:49:40,130
dynamically in the future but so I want

977
00:49:38,960 --> 00:49:41,690
them pass through because I they're not

978
00:49:40,130 --> 00:49:43,099
gonna probably be pound to fines forever

979
00:49:41,690 --> 00:49:46,280
they'll they'll be something that's a

980
00:49:43,099 --> 00:49:49,309
little bit more dynamic um so you know I

981
00:49:46,280 --> 00:49:50,720
don't know maybe we say that there's you

982
00:49:49,309 --> 00:49:52,779
know a pretty large amount of texture

983
00:49:50,719 --> 00:49:57,579
transfer space for now because why not

984
00:49:52,780 --> 00:49:57,580
that would allow us to transfer 64

985
00:49:57,969 --> 00:50:10,730
sprites per frame which is seems maybe a

986
00:50:04,250 --> 00:50:13,659
little low but you know maybe we want

987
00:50:10,730 --> 00:50:15,650
more than that ideally I'm not sure

988
00:50:13,659 --> 00:50:17,259
maybe we want to do more like hundred

989
00:50:15,650 --> 00:50:20,660
twenty-eight sprites for frame optimally

990
00:50:17,260 --> 00:50:22,460
again the bandwidth to the graphs card I

991
00:50:20,659 --> 00:50:24,019
don't really know what the balance of

992
00:50:22,460 --> 00:50:25,460
this graphics card is anyway so I'm not

993
00:50:24,019 --> 00:50:32,030
sure what's realistic to expect there

994
00:50:25,460 --> 00:50:33,800
but either way so anyway that's all well

995
00:50:32,030 --> 00:50:35,450
and good everyone's happy and smiling

996
00:50:33,800 --> 00:50:37,160
and everything's great and you know

997
00:50:35,449 --> 00:50:40,189
little kids are dancing around a lot

998
00:50:37,159 --> 00:50:43,009
stuff and whatever they do and so now I

999
00:50:40,190 --> 00:50:44,840
want to be able to pull out that so when

1000
00:50:43,010 --> 00:50:48,260
we actually have the texture cue right

1001
00:50:44,840 --> 00:50:49,850
the texture cube goes through the game

1002
00:50:48,260 --> 00:50:52,609
memory there and we do that the process

1003
00:50:49,849 --> 00:50:54,440
texture cue the thing I like about that

1004
00:50:52,608 --> 00:50:58,039
is you don't have to call this anymore I

1005
00:50:54,440 --> 00:51:00,769
don't think so in other words this call

1006
00:50:58,039 --> 00:51:03,199
goes away too so I think all you have to

1007
00:51:00,769 --> 00:51:08,509
do is pass it you would you don't have

1008
00:51:03,199 --> 00:51:10,009
to call that function that's my argument

1009
00:51:08,510 --> 00:51:13,040
anyway that's that's what I'm going to

1010
00:51:10,010 --> 00:51:14,720
claim and so you really just have to go

1011
00:51:13,039 --> 00:51:16,190
oh yeah the texture cue is in there

1012
00:51:14,719 --> 00:51:18,349
somewhere I'll you know that'll be

1013
00:51:16,190 --> 00:51:18,740
whatever I'll do that it's great it's

1014
00:51:18,349 --> 00:51:24,500
good

1015
00:51:18,739 --> 00:51:28,909
no one cares and that means like in the

1016
00:51:24,500 --> 00:51:30,739
code that again like if we take a look

1017
00:51:28,909 --> 00:51:33,618
at our usage code here where we do like

1018
00:51:30,739 --> 00:51:35,599
texture cues and stuff that now doesn't

1019
00:51:33,619 --> 00:51:38,358
have to actually happen so again it's

1020
00:51:35,599 --> 00:51:40,539
really great it simplifies the texture

1021
00:51:38,358 --> 00:51:40,539
cue

1022
00:51:40,809 --> 00:51:44,360
entirely because we don't have that

1023
00:51:43,190 --> 00:51:48,050
problem anymore

1024
00:51:44,360 --> 00:51:53,800
right so this stuff processed texture

1025
00:51:48,050 --> 00:51:57,590
cue can just not happen right ever

1026
00:51:53,800 --> 00:51:59,390
it just happens automatically and I

1027
00:51:57,590 --> 00:52:02,780
think that's much much much much better

1028
00:51:59,389 --> 00:52:05,179
right so I love all that that's all

1029
00:52:02,780 --> 00:52:07,610
really good it also means that up here

1030
00:52:05,179 --> 00:52:09,589
right this stuff gets simpler now we

1031
00:52:07,610 --> 00:52:14,240
don't care about that and so we've got

1032
00:52:09,590 --> 00:52:18,920
the max texture count and we also have

1033
00:52:14,239 --> 00:52:21,409
the texture transfer buffer size and you

1034
00:52:18,920 --> 00:52:25,570
know who knows what that is but in this

1035
00:52:21,409 --> 00:52:25,569
app it's probably smaller right

1036
00:52:26,440 --> 00:52:33,679
who knows

1037
00:52:28,519 --> 00:52:37,099
and so texture transfer buffer size that

1038
00:52:33,679 --> 00:52:40,489
all looks good and then we don't have to

1039
00:52:37,099 --> 00:52:42,440
do any of this so again it just makes

1040
00:52:40,489 --> 00:52:44,329
our render even better because now it's

1041
00:52:42,440 --> 00:52:46,700
like all that stuff that you were

1042
00:52:44,329 --> 00:52:49,159
worrying about before not only can it

1043
00:52:46,699 --> 00:52:50,750
now be done on the hardware side if you

1044
00:52:49,159 --> 00:52:56,109
want to so we can lock a memory that's

1045
00:52:50,750 --> 00:52:58,940
actually aperture mapped properly but

1046
00:52:56,110 --> 00:53:00,590
you also don't have to know about it so

1047
00:52:58,940 --> 00:53:03,470
anyone who uses the renderer is just

1048
00:53:00,590 --> 00:53:04,970
free to have a party without ever even

1049
00:53:03,469 --> 00:53:07,369
knowing what a texture transfer buffer

1050
00:53:04,969 --> 00:53:10,339
is and the only thing they really have

1051
00:53:07,369 --> 00:53:11,900
to do is have some idea of how much

1052
00:53:10,340 --> 00:53:14,059
textures they're trying to push through

1053
00:53:11,900 --> 00:53:18,230
it per frame so they don't set this

1054
00:53:14,059 --> 00:53:19,789
number too low right that's all they

1055
00:53:18,230 --> 00:53:21,800
really have to understand and they don't

1056
00:53:19,789 --> 00:53:23,869
really even have to understand that if

1057
00:53:21,800 --> 00:53:25,640
the default values are set particularly

1058
00:53:23,869 --> 00:53:30,049
well you know then it should be fine

1059
00:53:25,639 --> 00:53:32,119
right um so that seems pretty good to me

1060
00:53:30,050 --> 00:53:34,370
and I think that that just makes

1061
00:53:32,119 --> 00:53:36,139
everything better so I'm a huge fan

1062
00:53:34,369 --> 00:53:39,380
and I claim that that's what should

1063
00:53:36,139 --> 00:53:41,000
happen now when we actually are in open

1064
00:53:39,380 --> 00:53:43,789
jail here and we'd go to do our manage

1065
00:53:41,000 --> 00:53:47,360
textures we want to do the manage

1066
00:53:43,789 --> 00:53:49,190
textures probably like on end frame

1067
00:53:47,360 --> 00:53:51,700
before we do anything we'll try to kick

1068
00:53:49,190 --> 00:53:51,700
off those

1069
00:53:52,719 --> 00:54:03,318
we'll try to kick off those ops so

1070
00:53:56,809 --> 00:54:07,910
open-field allocate texture you know

1071
00:54:03,318 --> 00:54:10,159
does this bit right here I'm gonna say

1072
00:54:07,909 --> 00:54:12,409
let's go ahead and bring that in I don't

1073
00:54:10,159 --> 00:54:16,909
know why that's outside I don't think it

1074
00:54:12,409 --> 00:54:21,739
really should be I think we probably

1075
00:54:16,909 --> 00:54:23,598
want that in here because this asked

1076
00:54:21,739 --> 00:54:28,269
this all has to happen together it can't

1077
00:54:23,599 --> 00:54:28,269
really be spread out if that makes sense

1078
00:54:40,989 --> 00:54:44,099
[Music]

1079
00:54:48,000 --> 00:54:52,710
so this isn't gonna do what this isn't

1080
00:54:51,420 --> 00:54:54,329
gonna work this way anymore because

1081
00:54:52,710 --> 00:54:55,769
remember we don't actually have a linked

1082
00:54:54,329 --> 00:54:57,269
list anymore so we know that this is

1083
00:54:55,769 --> 00:54:59,730
what we want to do on each individual

1084
00:54:57,269 --> 00:55:01,739
texture as we spin through it what we

1085
00:54:59,730 --> 00:55:04,469
don't really understand yet is what we

1086
00:55:01,739 --> 00:55:07,409
need to do to actually process the

1087
00:55:04,469 --> 00:55:09,239
stream and up put that aside for a

1088
00:55:07,409 --> 00:55:13,920
moment and just say when we do open gel

1089
00:55:09,239 --> 00:55:16,858
manage textures here inside em frame I

1090
00:55:13,920 --> 00:55:19,019
would do that automatically so when we

1091
00:55:16,858 --> 00:55:20,789
come through here and we do it we after

1092
00:55:19,019 --> 00:55:23,250
we process the changes that change the

1093
00:55:20,789 --> 00:55:25,800
settings we're gonna kick off any text

1094
00:55:23,250 --> 00:55:27,570
or downloads we can write because we

1095
00:55:25,800 --> 00:55:28,890
know we're gonna need them soon possibly

1096
00:55:27,570 --> 00:55:32,910
on this frame but you know not

1097
00:55:28,889 --> 00:55:35,219
necessarily so we want to go ahead and

1098
00:55:32,909 --> 00:55:37,559
get that cue going what I don't remember

1099
00:55:35,219 --> 00:55:39,659
is the OpenGL part of things what is

1100
00:55:37,559 --> 00:55:42,509
that is that it's OpenGL yeah open oh

1101
00:55:39,659 --> 00:55:44,969
yeah this right here so the platform

1102
00:55:42,510 --> 00:55:47,910
render here it's got it in there so I

1103
00:55:44,969 --> 00:55:49,739
think it's to get the cue like again you

1104
00:55:47,909 --> 00:55:53,608
don't even have to pass it in it's just

1105
00:55:49,739 --> 00:55:57,059
here so there's the texture cue you know

1106
00:55:53,608 --> 00:55:58,409
problem solved and so every time here we

1107
00:55:57,059 --> 00:56:00,570
can just like kick off our textures

1108
00:55:58,409 --> 00:56:01,500
before we go to actually do anything

1109
00:56:00,570 --> 00:56:03,539
else

1110
00:56:01,500 --> 00:56:05,159
with the actual render buffer and we can

1111
00:56:03,539 --> 00:56:06,659
change the settings first so if we need

1112
00:56:05,159 --> 00:56:12,389
to reallocate texture buffers that'll

1113
00:56:06,659 --> 00:56:14,608
happen here so when we do OpenGL manage

1114
00:56:12,389 --> 00:56:16,739
textures now we need to do is we need to

1115
00:56:14,608 --> 00:56:19,319
actually have some maybe utility

1116
00:56:16,739 --> 00:56:21,868
function probably in the renderer side

1117
00:56:19,320 --> 00:56:24,180
of things they can get you know as we go

1118
00:56:21,869 --> 00:56:25,829
through they can get our ops off in a

1119
00:56:24,179 --> 00:56:29,489
way that that's easier for us to work

1120
00:56:25,829 --> 00:56:33,719
with right and so what we want to do is

1121
00:56:29,489 --> 00:56:37,139
in here when we dequeue one of these we

1122
00:56:33,719 --> 00:56:39,569
want to do the right updates to these

1123
00:56:37,139 --> 00:56:41,699
transient values to make them still be

1124
00:56:39,570 --> 00:56:43,470
consistent and so that's really what

1125
00:56:41,699 --> 00:56:46,710
we're trying to do here when we do the

1126
00:56:43,469 --> 00:56:49,439
DQ so what we know we want to do first

1127
00:56:46,710 --> 00:56:52,588
is just say look we're only gonna run

1128
00:56:49,440 --> 00:56:55,019
this thing while there are some ops in

1129
00:56:52,588 --> 00:56:58,079
the queue so the very first thing we can

1130
00:56:55,019 --> 00:57:00,000
say is just you know don't do anything

1131
00:56:58,079 --> 00:57:01,838
if there aren't any office in the queue

1132
00:57:00,000 --> 00:57:03,579
because that's a totally valid

1133
00:57:01,838 --> 00:57:05,318
situation rested begin we don't know

1134
00:57:03,579 --> 00:57:08,680
that somebody asked to download textures

1135
00:57:05,318 --> 00:57:12,849
so the off count maybes just zero there

1136
00:57:08,679 --> 00:57:14,798
may be no ops at all so if there is an

1137
00:57:12,849 --> 00:57:16,989
op then that's when we would start

1138
00:57:14,798 --> 00:57:18,728
actually looking at things so if we

1139
00:57:16,989 --> 00:57:20,969
wanted to look at what was going on we

1140
00:57:18,728 --> 00:57:23,348
would say alright there's a texture op

1141
00:57:20,969 --> 00:57:26,440
the OP in question that we're going to

1142
00:57:23,349 --> 00:57:30,249
look at first it's going to be the ops

1143
00:57:26,440 --> 00:57:34,088
array plus whatever the first op index

1144
00:57:30,248 --> 00:57:36,848
is so we give that one out right now we

1145
00:57:34,088 --> 00:57:40,268
need to see is can we process this one

1146
00:57:36,849 --> 00:57:47,068
right you know can we even process this

1147
00:57:40,268 --> 00:57:53,558
one so we look and we say well okay if

1148
00:57:47,068 --> 00:57:56,528
we look it and see what its state is we

1149
00:57:53,559 --> 00:58:01,900
want to look and go if it's empty

1150
00:57:56,528 --> 00:58:05,338
then we would skip it right so we kind

1151
00:58:01,900 --> 00:58:10,358
of want to have this part of the routine

1152
00:58:05,338 --> 00:58:16,778
only occur if we're actually saying it's

1153
00:58:10,358 --> 00:58:18,548
time to transfer right so if this thing

1154
00:58:16,778 --> 00:58:21,400
says ready to transfer we want to

1155
00:58:18,548 --> 00:58:23,619
actually send the data down if it

1156
00:58:21,400 --> 00:58:25,630
doesn't say ready to transfer then what

1157
00:58:23,619 --> 00:58:30,160
we have to do is say well what if it

1158
00:58:25,630 --> 00:58:33,960
said stop right what if it said I'm not

1159
00:58:30,159 --> 00:58:37,739
actually loaded yet so I can't actually

1160
00:58:33,960 --> 00:58:40,269
tell what I should be doing here right

1161
00:58:37,739 --> 00:58:43,659
and if that's the case then I can't

1162
00:58:40,268 --> 00:58:47,828
advance any further right I can't do

1163
00:58:43,659 --> 00:58:51,818
this actual OP um I think we want to

1164
00:58:47,829 --> 00:58:56,079
check that first meaning if we can't

1165
00:58:51,818 --> 00:58:58,298
then we just break otherwise we look to

1166
00:58:56,079 --> 00:59:00,249
see if it's ready to transfer and if

1167
00:58:58,298 --> 00:59:01,900
it's ready to transfer then we do the

1168
00:59:00,248 --> 00:59:04,988
transfer if it's not that means it must

1169
00:59:01,900 --> 00:59:10,298
be empty so we can actually assert here

1170
00:59:04,989 --> 00:59:12,039
that it's empty because it's not either

1171
00:59:10,298 --> 00:59:13,210
of these it has to be this I don't think

1172
00:59:12,039 --> 00:59:16,630
there's a race condition there because

1173
00:59:13,210 --> 00:59:19,869
you can't set something

1174
00:59:16,630 --> 00:59:23,500
from pending load to empty or from ready

1175
00:59:19,869 --> 00:59:31,109
to transfer to empty so if it was empty

1176
00:59:23,500 --> 00:59:32,559
I guess well no that's not entirely true

1177
00:59:31,110 --> 00:59:34,720
no okay

1178
00:59:32,559 --> 00:59:36,340
the only it can only go the only thing

1179
00:59:34,719 --> 00:59:38,649
can do asynchronously is go from pending

1180
00:59:36,340 --> 00:59:41,730
load to ready to transfer so it's gotta

1181
00:59:38,650 --> 00:59:44,740
be one of these two always

1182
00:59:41,730 --> 00:59:46,719
asynchronously so asserting for this is

1183
00:59:44,739 --> 00:59:49,000
always valid because the only thread

1184
00:59:46,719 --> 00:59:50,829
that could have said it to this is us so

1185
00:59:49,000 --> 00:59:54,250
we know we aren't setting it behind our

1186
00:59:50,829 --> 00:59:56,440
backs to empty so I I stand by that if

1187
00:59:54,250 --> 00:59:58,750
we move this to be completely

1188
00:59:56,440 --> 01:00:00,429
asynchronous so that multiple threads

1189
00:59:58,750 --> 01:00:02,710
could be requesting textures at the same

1190
01:00:00,429 --> 01:00:04,210
time while it's doing the texture

1191
01:00:02,710 --> 01:00:06,760
retirement here then it's a different

1192
01:00:04,210 --> 01:00:08,679
ballgame but that's not what we do the

1193
01:00:06,760 --> 01:00:10,300
only thing that we do asynchronously is

1194
01:00:08,679 --> 01:00:12,849
move something from a pending load to a

1195
01:00:10,300 --> 01:00:14,920
ready to transfer that's it so as long

1196
01:00:12,849 --> 01:00:16,719
as we make sure that this ready to

1197
01:00:14,920 --> 01:00:24,309
transfer thing is at least a little bit

1198
01:00:16,719 --> 01:00:26,589
fenced do I have any other of these yeah

1199
01:00:24,309 --> 01:00:28,889
so as long as I make sure that that I

1200
01:00:26,590 --> 01:00:35,680
don't actually read these out of order

1201
01:00:28,889 --> 01:00:38,699
we're probably okay so I think that

1202
01:00:35,679 --> 01:00:38,699
probably should be fine

1203
01:00:41,280 --> 01:00:46,810
all right so in here I think that's all

1204
01:00:43,869 --> 01:00:48,190
good and we issue the transfer I don't

1205
01:00:46,809 --> 01:00:49,719
even really know if I need this because

1206
01:00:48,190 --> 01:00:51,610
if you ever could have gotten this in

1207
01:00:49,719 --> 01:00:53,529
the first place then when you go to

1208
01:00:51,610 --> 01:00:56,170
actually use this it's the data pointer

1209
01:00:53,530 --> 01:00:57,580
can't be stale it's so it's actually the

1210
01:00:56,170 --> 01:01:00,180
other in fact I'm not even gonna bother

1211
01:00:57,579 --> 01:01:03,639
with that because if you think about it

1212
01:01:00,179 --> 01:01:05,829
all of this stuff that data was set long

1213
01:01:03,639 --> 01:01:08,949
ago long before we even issued the read

1214
01:01:05,829 --> 01:01:10,509
so this it's only the GPU that would

1215
01:01:08,949 --> 01:01:12,549
have to worry about the data being stale

1216
01:01:10,510 --> 01:01:15,480
it's um in some sense right so forget

1217
01:01:12,550 --> 01:01:18,070
that you're not gonna do that

1218
01:01:15,480 --> 01:01:19,690
so all this transfer stuff works exactly

1219
01:01:18,070 --> 01:01:22,510
the same way that it does so the only

1220
01:01:19,690 --> 01:01:25,720
thing that we now need to do in here is

1221
01:01:22,510 --> 01:01:27,940
we need to make sure that when you are

1222
01:01:25,719 --> 01:01:30,279
either like when you pending load you

1223
01:01:27,940 --> 01:01:33,220
we stop we don't go any further but when

1224
01:01:30,280 --> 01:01:36,670
we transfer or are just looking at a

1225
01:01:33,219 --> 01:01:39,459
null op then what we do is we have to

1226
01:01:36,670 --> 01:01:42,608
actually move these these around right

1227
01:01:39,460 --> 01:01:45,099
so that's the big part of the circular

1228
01:01:42,608 --> 01:01:46,630
buffer so when we want to move them

1229
01:01:45,099 --> 01:01:49,420
around we have to do is say all right

1230
01:01:46,630 --> 01:01:51,640
first of all we're gonna take the OP

1231
01:01:49,420 --> 01:01:54,789
count and we're going to decrease that

1232
01:01:51,639 --> 01:01:56,858
by 1 because we did retire an op right

1233
01:01:54,789 --> 01:01:59,470
we did move past one we're gonna

1234
01:01:56,858 --> 01:02:02,259
increment the first OP index cuz we are

1235
01:01:59,469 --> 01:02:04,929
moving forwards and then if that first

1236
01:02:02,260 --> 01:02:09,940
op index is greater than equal to the

1237
01:02:04,929 --> 01:02:11,858
total amount that we have we're gonna

1238
01:02:09,940 --> 01:02:15,460
reset the beginning of the list so we're

1239
01:02:11,858 --> 01:02:17,108
gonna bop backwards and and go back to

1240
01:02:15,460 --> 01:02:18,670
the very first op and start you know

1241
01:02:17,108 --> 01:02:20,440
plowing through through them that way

1242
01:02:18,670 --> 01:02:22,568
right so we go off the end come back

1243
01:02:20,440 --> 01:02:24,639
around so that's a pretty weight easy

1244
01:02:22,568 --> 01:02:26,259
way to retire the OP that is I think

1245
01:02:24,639 --> 01:02:28,029
just done like I don't think there's

1246
01:02:26,260 --> 01:02:30,130
much else to worry about there this

1247
01:02:28,030 --> 01:02:31,869
parts more complicated so now we have to

1248
01:02:30,130 --> 01:02:34,119
do is worry about the transfer memory

1249
01:02:31,869 --> 01:02:36,278
because now we have to move the transfer

1250
01:02:34,119 --> 01:02:40,000
memory forwards to coincide with where

1251
01:02:36,278 --> 01:02:44,108
it should be based on on retiring this

1252
01:02:40,000 --> 01:02:46,750
texture op right that actually might

1253
01:02:44,108 --> 01:02:48,608
just be trivial because we set ourselves

1254
01:02:46,750 --> 01:02:51,400
up for success by saying each texture op

1255
01:02:48,608 --> 01:02:54,009
just remembers where where the end of

1256
01:02:51,400 --> 01:02:57,190
the memory needed to use was so we can

1257
01:02:54,010 --> 01:02:59,950
advance this forward now granted if you

1258
01:02:57,190 --> 01:03:01,690
look at what happens here really what we

1259
01:02:59,949 --> 01:03:05,919
would need to do is set up what's called

1260
01:03:01,690 --> 01:03:08,588
a fence on the GL side of things if we

1261
01:03:05,920 --> 01:03:11,139
were using a mapped buffer since we're

1262
01:03:08,588 --> 01:03:14,828
not using a map buffer the copy occurs

1263
01:03:11,139 --> 01:03:19,179
here from our memory to GPU aperture

1264
01:03:14,829 --> 01:03:21,700
space the that CPU to CPU copy happens

1265
01:03:19,179 --> 01:03:25,960
here which means we can immediately free

1266
01:03:21,699 --> 01:03:30,669
up the memory right now we would

1267
01:03:25,960 --> 01:03:33,670
probably add another like tracker in

1268
01:03:30,670 --> 01:03:36,130
here for fenced memory transfer so that

1269
01:03:33,670 --> 01:03:40,659
in the future we could overlap those

1270
01:03:36,130 --> 01:03:41,890
transfers better without a copy we're

1271
01:03:40,659 --> 01:03:43,598
not going to do that now but if we

1272
01:03:41,889 --> 01:03:45,879
wanted to make this more efficient GPU

1273
01:03:43,599 --> 01:03:48,969
wise you know we would be looking at

1274
01:03:45,880 --> 01:03:50,559
that alright so I think that in here

1275
01:03:48,969 --> 01:03:55,170
once you retire this off all we really

1276
01:03:50,559 --> 01:03:55,170
have to do is say the transfer memory

1277
01:03:57,208 --> 01:04:06,788
first used now becomes transfer memory

1278
01:04:01,838 --> 01:04:08,920
last used of the app right and so the

1279
01:04:06,789 --> 01:04:12,369
only complicated thing here that we've

1280
01:04:08,920 --> 01:04:14,318
got to do and it is a little tricky is

1281
01:04:12,369 --> 01:04:16,479
we we want to be able to reduce the

1282
01:04:14,318 --> 01:04:18,068
total amount of memory used by that now

1283
01:04:16,478 --> 01:04:21,998
maybe I should just make things easy on

1284
01:04:18,068 --> 01:04:25,239
myself and just say transfer memory

1285
01:04:21,998 --> 01:04:42,038
count here and so then if I did that I

1286
01:04:25,239 --> 01:04:43,568
could just do this I'm all in favor for

1287
01:04:42,039 --> 01:04:45,160
making it easier a little bit there yeah

1288
01:04:43,568 --> 01:04:48,159
we got a saw an extra you 32

1289
01:04:45,159 --> 01:04:50,708
no one will care about that there just

1290
01:04:48,159 --> 01:04:52,509
aren't enough ops as compared to the

1291
01:04:50,708 --> 01:04:54,489
footprint of textures that they're

1292
01:04:52,509 --> 01:04:57,130
actually transferring so it's like don't

1293
01:04:54,489 --> 01:04:58,929
be penny wise pound foolish there ain't

1294
01:04:57,130 --> 01:05:02,048
gonna make a difference to our footprint

1295
01:04:58,929 --> 01:05:05,018
at all so so that's gonna be totally

1296
01:05:02,048 --> 01:05:07,599
fine for now so in here what I'm gonna

1297
01:05:05,018 --> 01:05:10,448
say is look I'm just gonna say transfer

1298
01:05:07,599 --> 01:05:12,400
memory count in here it's just gonna be

1299
01:05:10,449 --> 01:05:13,479
that size requested and then and then

1300
01:05:12,400 --> 01:05:14,650
we're you know we're done with that

1301
01:05:13,478 --> 01:05:16,718
right

1302
01:05:14,650 --> 01:05:20,499
I can also assert here this is within

1303
01:05:16,719 --> 01:05:23,170
the range that it should be so I can say

1304
01:05:20,498 --> 01:05:28,238
you know I really want to make sure that

1305
01:05:23,170 --> 01:05:33,239
pointer is you know less than you know

1306
01:05:28,239 --> 01:05:38,318
one of these the the transfer memory

1307
01:05:33,239 --> 01:05:39,818
plus the transfer memory count like

1308
01:05:38,318 --> 01:05:42,458
basically like when you actually

1309
01:05:39,818 --> 01:05:43,989
complete one of these things and are

1310
01:05:42,458 --> 01:05:47,078
ready to cue it off let's make sure that

1311
01:05:43,989 --> 01:05:49,690
we're not put you know passing totally

1312
01:05:47,079 --> 01:05:52,209
bogus nonsense here but I think that's

1313
01:05:49,690 --> 01:05:53,920
that's basically we want so this right

1314
01:05:52,208 --> 01:05:55,449
here now we'll just do all of our

1315
01:05:53,920 --> 01:05:57,550
texture transfers

1316
01:05:55,449 --> 01:06:00,609
and off we go again no need for free

1317
01:05:57,550 --> 01:06:02,260
lists no need for any of that stuff this

1318
01:06:00,610 --> 01:06:15,039
is all off the queue so I got to go

1319
01:06:02,260 --> 01:06:22,810
ahead and throw a Q star on there and if

1320
01:06:15,039 --> 01:06:35,139
I got them all that's not gonna let me

1321
01:06:22,809 --> 01:06:52,779
do that is it that's fine I could do it

1322
01:06:35,139 --> 01:06:54,639
like this right just verify that the

1323
01:06:52,780 --> 01:06:56,170
memory app is within there and the last

1324
01:06:54,639 --> 01:06:59,190
one we used is within there like nobody

1325
01:06:56,170 --> 01:07:02,139
wrapped around like it's all good yeah

1326
01:06:59,190 --> 01:07:09,090
all right let's keep on truckin

1327
01:07:02,139 --> 01:07:09,089
so we got our state here this is on op

1328
01:07:10,800 --> 01:07:22,269
what else you got for me so when we call

1329
01:07:18,010 --> 01:07:24,940
an it texture Q here someone's gonna

1330
01:07:22,269 --> 01:07:28,380
have to actually do this work so that's

1331
01:07:24,940 --> 01:07:28,380
a little bit Squinkie

1332
01:07:28,469 --> 01:07:37,769
so in here where we doin it texture Q

1333
01:07:32,550 --> 01:07:37,769
that's gonna have to be routed properly

1334
01:07:38,309 --> 01:07:46,599
like so you know in here when we

1335
01:07:41,739 --> 01:07:51,009
actually do one of these render Alex we

1336
01:07:46,599 --> 01:07:53,730
would have to do the emit texture Q in

1337
01:07:51,010 --> 01:07:53,730
the same way

1338
01:07:54,599 --> 01:08:04,329
and the pointer to process texture q can

1339
01:07:59,170 --> 01:08:06,490
go away too so actually also this gets

1340
01:08:04,329 --> 01:08:09,069
simpler right that is not a thing

1341
01:08:06,489 --> 01:08:10,899
anymore so it's really only the

1342
01:08:09,070 --> 01:08:15,789
frame so yeah this just keeps getting

1343
01:08:10,900 --> 01:08:27,190
better if you think about it it's pretty

1344
01:08:15,789 --> 01:08:31,720
great now it's literally just those you

1345
01:08:27,189 --> 01:08:32,949
know so I that's just fantastic I'm just

1346
01:08:31,720 --> 01:08:36,970
loving how this is coming together it's

1347
01:08:32,949 --> 01:08:39,429
very very satisfying okay so in here

1348
01:08:36,970 --> 01:08:42,460
we've got render texture Q we know we've

1349
01:08:39,430 --> 01:08:46,869
got it so because we know it's it's just

1350
01:08:42,460 --> 01:08:51,130
this but we need to initialize it and so

1351
01:08:46,869 --> 01:08:52,659
what we want here is the requested the

1352
01:08:51,130 --> 01:08:54,190
the requested transfer buffer size is

1353
01:08:52,659 --> 01:08:58,239
actually you know something we're gonna

1354
01:08:54,189 --> 01:09:00,069
have to put in here and we need to

1355
01:08:58,239 --> 01:09:04,929
actually allocate that memory so it's

1356
01:09:00,069 --> 01:09:06,579
it's really just gonna be this and in

1357
01:09:04,930 --> 01:09:09,159
the future like I said we can maybe do

1358
01:09:06,579 --> 01:09:10,930
that a little more cleverly and actually

1359
01:09:09,159 --> 01:09:13,689
get buffers that we you know

1360
01:09:10,930 --> 01:09:16,690
specifically want there but now I'll

1361
01:09:13,689 --> 01:09:20,500
unwind that those calls and make sure

1362
01:09:16,689 --> 01:09:21,789
that these we don't need that and make

1363
01:09:20,500 --> 01:09:27,010
sure that everyone passes the right

1364
01:09:21,789 --> 01:09:29,649
stuff so in it texture cue is now in

1365
01:09:27,010 --> 01:09:32,020
that unhappy place where that's like you

1366
01:09:29,649 --> 01:09:36,210
know a thing that's again part of sort

1367
01:09:32,020 --> 01:09:41,580
of a it's an it's in a weird place but

1368
01:09:36,210 --> 01:09:41,579
I'll stick it like so

1369
01:09:48,149 --> 01:09:54,939
when we do the load and this is the

1370
01:09:51,840 --> 01:09:57,779
transfer the texture transfer of

1371
01:09:54,939 --> 01:10:05,379
emphasize that goes in here so that

1372
01:09:57,779 --> 01:10:09,609
win32 oops that winter to load now has

1373
01:10:05,380 --> 01:10:18,039
that in it and it gets passed through

1374
01:10:09,609 --> 01:10:20,829
here we should really consider bundling

1375
01:10:18,039 --> 01:10:22,659
those you know when you look at it now

1376
01:10:20,829 --> 01:10:24,659
it seems like that should be a bundle

1377
01:10:22,659 --> 01:10:30,359
while I'm in here I may just bundle them

1378
01:10:24,659 --> 01:10:30,359
that seems you know better

1379
01:10:43,738 --> 01:10:47,439
because now you used to look at all this

1380
01:10:45,698 --> 01:10:50,229
stuff that has to change why bother

1381
01:10:47,439 --> 01:10:55,539
right why not just go up here and say

1382
01:10:50,229 --> 01:10:58,569
look the parameter to this system going

1383
01:10:55,539 --> 01:11:09,010
to struct so in here when you're going

1384
01:10:58,569 --> 01:11:18,639
to call one of these there's something

1385
01:11:09,010 --> 01:11:24,310
like this or that you know and maybe

1386
01:11:18,639 --> 01:11:39,550
limits something like that and all these

1387
01:11:24,310 --> 01:11:42,639
things just sit in there so now you know

1388
01:11:39,550 --> 01:11:44,560
you just pass one of those along and we

1389
01:11:42,639 --> 01:11:47,199
don't really have to deal with it

1390
01:11:44,560 --> 01:11:49,060
anymore like all of these things that

1391
01:11:47,198 --> 01:11:53,698
that do pass throughs they don't have to

1392
01:11:49,060 --> 01:11:53,699
keep changing which is you know nice

1393
01:11:53,969 --> 01:11:58,510
they just pass through that and then if

1394
01:11:56,500 --> 01:12:03,099
things get added to that then it gets

1395
01:11:58,510 --> 01:12:07,199
passed through automatically right and

1396
01:12:03,099 --> 01:12:15,630
that seems a lot nicer to me

1397
01:12:07,198 --> 01:12:15,629
certainly all right

1398
01:12:35,010 --> 01:12:42,219
okay so I think that's just gonna create

1399
01:12:39,760 --> 01:12:44,710
some typing for us here to actually put

1400
01:12:42,219 --> 01:12:47,849
in that change but other than that I

1401
01:12:44,710 --> 01:12:47,849
think we're in good shape

1402
01:12:52,590 --> 01:13:10,860
oops all right so platform renderer

1403
01:13:08,380 --> 01:13:10,859
limits

1404
01:13:36,689 --> 01:13:45,579
okay so yeah let's see what else we got

1405
01:13:41,889 --> 01:13:46,868
here so we need to change the way that

1406
01:13:45,578 --> 01:13:55,748
the textures are getting submitted in

1407
01:13:46,868 --> 01:13:59,018
here when we initialize our test scene

1408
01:13:55,748 --> 01:14:01,988
we need to submit those textures and you

1409
01:13:59,019 --> 01:14:04,719
can see here we need to actually do the

1410
01:14:01,988 --> 01:14:08,738
operation the the new way of doing the

1411
01:14:04,719 --> 01:14:11,319
operation which thankfully is very very

1412
01:14:08,738 --> 01:14:13,928
simple so really all we have to do is

1413
01:14:11,319 --> 01:14:16,198
say I would like to begin a texture up

1414
01:14:13,929 --> 01:14:16,199
please

1415
01:14:16,469 --> 01:14:30,219
here is my texture Q which is texture op

1416
01:14:22,238 --> 01:14:42,879
Q and then I will tell you how big it is

1417
01:14:30,219 --> 01:14:48,908
like so I will then set the texture

1418
01:14:42,880 --> 01:14:52,229
handle but the data is already set on it

1419
01:14:48,908 --> 01:14:59,098
right so in here we don't actually do

1420
01:14:52,229 --> 01:14:59,099
any of this we would just say complete

1421
01:15:03,719 --> 01:15:14,998
no I'm saying this yes so this actually

1422
01:15:21,640 --> 01:15:31,060
I think that means we don't have to

1423
01:15:25,689 --> 01:15:44,729
allocate anything here either so

1424
01:15:31,060 --> 01:15:48,220
actually this yeah this would just work

1425
01:15:44,729 --> 01:15:51,909
we can write directly into there if we

1426
01:15:48,220 --> 01:15:58,500
want to so what we can do here right you

1427
01:15:51,909 --> 01:15:58,500
see the pixels we do this nonsense so

1428
01:16:00,720 --> 01:16:06,520
you know it it's too bad we have to do a

1429
01:16:03,430 --> 01:16:13,750
copy here because we could maybe just

1430
01:16:06,520 --> 01:16:15,250
load it in directly but I'm just gonna

1431
01:16:13,750 --> 01:16:20,920
do this so here's what I'm going to do

1432
01:16:15,250 --> 01:16:31,630
I'm going to take this we'll just stick

1433
01:16:20,920 --> 01:16:35,949
that there and my guess actually I'm

1434
01:16:31,630 --> 01:16:41,859
gonna call that the result and I'm gonna

1435
01:16:35,949 --> 01:16:44,079
say I'm gonna say all of these things

1436
01:16:41,859 --> 01:16:45,460
cuz we don't actually need to return

1437
01:16:44,079 --> 01:16:47,890
those I'm gonna change the way this

1438
01:16:45,460 --> 01:16:50,529
routine works a bit and just say once we

1439
01:16:47,890 --> 01:16:52,150
get down here we can actually yeah we

1440
01:16:50,529 --> 01:16:55,679
don't need the pitch or any of that

1441
01:16:52,149 --> 01:17:00,309
stuff so in here we can just actually do

1442
01:16:55,680 --> 01:17:03,700
the texture up properly we can say where

1443
01:17:00,310 --> 01:17:08,130
was that begin to die accidentally

1444
01:17:03,699 --> 01:17:08,130
delete the begin that was not smart

1445
01:17:14,890 --> 01:17:21,410
there it is

1446
01:17:17,238 --> 01:17:28,099
so in here yeah I'm just gonna say let's

1447
01:17:21,409 --> 01:17:32,449
put this stuff right here will actually

1448
01:17:28,100 --> 01:17:49,880
make this copy into the texture queue we

1449
01:17:32,449 --> 01:17:51,760
will refer to the texture here and I

1450
01:17:49,880 --> 01:17:54,500
think that's all we really needed there

1451
01:17:51,760 --> 01:17:59,539
here and I mean then the destination

1452
01:17:54,500 --> 01:18:01,250
will be this thing so the only thing we

1453
01:17:59,539 --> 01:18:03,979
want to do is make sure that begin

1454
01:18:01,250 --> 01:18:11,829
texture up if it fails we don't actually

1455
01:18:03,979 --> 01:18:11,829
try to complete the transfer here

1456
01:18:16,939 --> 01:18:21,009
I don't know if we got error reporting

1457
01:18:38,229 --> 01:18:42,139
and again that can't really happen in

1458
01:18:40,310 --> 01:18:43,880
this Tesco but just so people who were

1459
01:18:42,140 --> 01:18:45,650
looking at the test code didn't think

1460
01:18:43,880 --> 01:18:52,219
they could just count on the OP coming

1461
01:18:45,649 --> 01:18:55,250
back properly that's all so I think

1462
01:18:52,219 --> 01:18:57,350
that's all good and so in here instead

1463
01:18:55,250 --> 01:19:03,229
of source test what we want to do is

1464
01:18:57,350 --> 01:19:04,670
actually have an actual desk um I don't

1465
01:19:03,229 --> 01:19:08,869
know why that looks like that but you

1466
01:19:04,670 --> 01:19:11,960
know it would be like this so you know

1467
01:19:08,869 --> 01:19:18,170
we would look at the source and then we

1468
01:19:11,960 --> 01:19:24,609
would have the desk like so and I think

1469
01:19:18,170 --> 01:19:24,609
that's really all there is to it right

1470
01:19:26,380 --> 01:19:32,869
now why we're using you int instead of I

1471
01:19:30,469 --> 01:19:34,760
don't know why we're we don't have those

1472
01:19:32,869 --> 01:19:38,198
as our standard type sir but I guess

1473
01:19:34,760 --> 01:19:38,199
that's just the way the cookie crumbled

1474
01:19:45,909 --> 01:19:56,359
um that's all good and so yeah in this

1475
01:19:50,960 --> 01:20:01,550
case texture up result just needs to

1476
01:19:56,359 --> 01:20:04,029
always be returnable there even if you

1477
01:20:01,550 --> 01:20:04,029
didn't get one

1478
01:20:07,329 --> 01:20:14,800
alright so renderer test is now good to

1479
01:20:10,670 --> 01:20:19,399
go I think so I think that means we can

1480
01:20:14,800 --> 01:20:24,770
go ahead and try debugging that method

1481
01:20:19,399 --> 01:20:28,099
of trip that method of texture transfer

1482
01:20:24,770 --> 01:20:32,750
just so we know that it is working at

1483
01:20:28,100 --> 01:20:36,500
all you know what I mean we can switch

1484
01:20:32,750 --> 01:20:41,239
to the renderer test app here and debug

1485
01:20:36,500 --> 01:20:42,859
build as well and then this is kind of

1486
01:20:41,239 --> 01:20:46,059
nice having the testbed because it means

1487
01:20:42,859 --> 01:20:54,009
we can debug in a much simpler scenario

1488
01:20:46,060 --> 01:20:54,010
then we would have had to do otherwise

1489
01:20:55,899 --> 01:20:59,809
so this is great now we can go see like

1490
01:20:58,789 --> 01:21:02,060
what's going on with the texture

1491
01:20:59,810 --> 01:21:04,640
transfers and why are they broken and

1492
01:21:02,060 --> 01:21:09,110
whatever else is going on right so we'll

1493
01:21:04,640 --> 01:21:11,630
start there let me just see what's up

1494
01:21:09,109 --> 01:21:14,089
all right so clearly tell anything by

1495
01:21:11,630 --> 01:21:16,369
that let's let's step in and watch the

1496
01:21:14,090 --> 01:21:19,909
texture transfers fail and where they

1497
01:21:16,369 --> 01:21:22,099
fail and how and so on so we can get

1498
01:21:19,909 --> 01:21:25,250
some kind of an idea of what's going on

1499
01:21:22,100 --> 01:21:26,480
what is that little that just mean

1500
01:21:25,250 --> 01:21:31,550
that's the start of a function or

1501
01:21:26,479 --> 01:21:36,709
something okay great can't wait to see

1502
01:21:31,550 --> 01:21:41,829
what's in there so I'm gonna go ahead

1503
01:21:36,710 --> 01:21:41,829
and let's see jump to

1504
01:21:42,500 --> 01:21:52,369
something something good where my

1505
01:21:49,140 --> 01:21:56,340
where's my load BMP okay here we go

1506
01:21:52,369 --> 01:21:58,769
so I'm gonna jump down here I want to

1507
01:21:56,340 --> 01:22:00,989
look and see like just the basics you

1508
01:21:58,770 --> 01:22:02,550
know just get everything in here working

1509
01:22:00,988 --> 01:22:09,059
so first of all you know did it even get

1510
01:22:02,550 --> 01:22:11,130
initialized right so looking at the size

1511
01:22:09,060 --> 01:22:15,030
of this I don't remember what we said

1512
01:22:11,130 --> 01:22:19,350
for how big it was supposed to be what

1513
01:22:15,029 --> 01:22:21,809
did we say did we say this I'm hoping is

1514
01:22:19,350 --> 01:22:25,829
that we said no what did we say 16 times

1515
01:22:21,810 --> 01:22:28,500
it maybe what what did we say we'll

1516
01:22:25,829 --> 01:22:31,189
start there what did I actually ask for

1517
01:22:28,500 --> 01:22:31,189
I don't even remember

1518
01:22:37,750 --> 01:22:41,939
oh I mean they're in the wrong file -

1519
01:22:42,329 --> 01:22:47,590
there we go um so I just wanted to see

1520
01:22:45,579 --> 01:22:49,359
like I don't remember what we asked for

1521
01:22:47,590 --> 01:22:50,500
for the texture transfer size and so I

1522
01:22:49,359 --> 01:22:54,489
want to make sure that that's actually

1523
01:22:50,500 --> 01:22:59,859
getting set properly so that doesn't

1524
01:22:54,489 --> 01:23:01,269
look right so I think we're already a

1525
01:22:59,859 --> 01:23:07,170
little wrong so I'm just going to step

1526
01:23:01,270 --> 01:23:09,280
in here so if I look at the limits

1527
01:23:07,170 --> 01:23:10,960
that's the number of the spectrum you

1528
01:23:09,279 --> 01:23:14,019
see so this this is the numbers I

1529
01:23:10,960 --> 01:23:16,300
respecting let's jump in here so if we

1530
01:23:14,020 --> 01:23:17,950
go into a nip default renderer you can

1531
01:23:16,300 --> 01:23:19,840
see us grabbing the actual renderer that

1532
01:23:17,949 --> 01:23:26,429
we want here and then we jump in here

1533
01:23:19,840 --> 01:23:28,960
and start the initialization of opengl

1534
01:23:26,430 --> 01:23:30,159
so we've got the text of transfer of

1535
01:23:28,960 --> 01:23:32,800
oversize we're passing that in both

1536
01:23:30,159 --> 01:23:36,430
cases so I'm gonna look in texture queue

1537
01:23:32,800 --> 01:23:41,289
there and I want to see what's going on

1538
01:23:36,430 --> 01:23:46,510
so here we are in the transfer Q so we

1539
01:23:41,289 --> 01:23:51,329
initialize that properly that all looks

1540
01:23:46,510 --> 01:23:51,329
right what did i do today

1541
01:24:05,529 --> 01:24:12,159
so this doesn't properly increment the

1542
01:24:10,220 --> 01:24:17,690
used count does it

1543
01:24:12,159 --> 01:24:20,930
so the transfer the queue in this case

1544
01:24:17,689 --> 01:24:30,109
we add an OP but we don't actually add

1545
01:24:20,930 --> 01:24:37,060
the memory so this actually should be

1546
01:24:30,109 --> 01:24:41,449
queue transfer memory used count right

1547
01:24:37,060 --> 01:24:47,030
that should actually go up by the amount

1548
01:24:41,449 --> 01:24:57,409
we used I think everything else can stay

1549
01:24:47,029 --> 01:24:59,929
the same but that can't right because

1550
01:24:57,409 --> 01:25:04,460
this stays in the same place this has to

1551
01:24:59,930 --> 01:25:06,140
go up so I think that's correct so we

1552
01:25:04,460 --> 01:25:08,060
you know we advanced by that size that

1553
01:25:06,140 --> 01:25:10,940
we've requested so I think that's what

1554
01:25:08,060 --> 01:25:16,810
we want there that looks fine to me

1555
01:25:10,939 --> 01:25:22,569
but what I'm not sure about is then on

1556
01:25:16,810 --> 01:25:22,570
cleanup when we come through here

1557
01:25:26,630 --> 01:25:32,699
that that also but that also does look

1558
01:25:29,399 --> 01:25:35,158
okay alright so now I want to I want to

1559
01:25:32,698 --> 01:25:39,598
read rerun through here

1560
01:25:35,158 --> 01:25:41,670
and and because that was wrong but again

1561
01:25:39,599 --> 01:25:45,630
so after a knit texture cubed jump in

1562
01:25:41,670 --> 01:25:51,920
here just want to see what's going on

1563
01:25:45,630 --> 01:25:51,920
so there's the queue it looks looks good

1564
01:25:54,109 --> 01:26:06,920
and if I look at this I just want to see

1565
01:26:04,498 --> 01:26:06,920
what's up

1566
01:26:15,229 --> 01:26:25,739
functions the old opengl party so that

1567
01:26:21,179 --> 01:26:27,599
all looks pretty good actually we come

1568
01:26:25,738 --> 01:26:32,908
down through here let's see what the

1569
01:26:27,599 --> 01:26:35,279
renderer thinks of things that all looks

1570
01:26:32,908 --> 01:26:39,988
right so it looks like we're starting

1571
01:26:35,279 --> 01:26:44,300
off good we try loading a bitmap here so

1572
01:26:39,988 --> 01:26:44,299
you know now we're gonna come down here

1573
01:26:44,340 --> 01:26:48,349
what's the texture up cue have to say

1574
01:26:51,439 --> 01:27:01,078
that all looks good so now we can get

1575
01:26:56,788 --> 01:27:02,819
started alright so can we get an op we

1576
01:27:01,078 --> 01:27:05,728
should because we should have all of our

1577
01:27:02,819 --> 01:27:09,868
ops free how much do we want we want

1578
01:27:05,729 --> 01:27:11,579
that much size right and so now we got

1579
01:27:09,868 --> 01:27:12,929
to see how much we can actually get so

1580
01:27:11,578 --> 01:27:14,748
we look at where the memory is memory is

1581
01:27:12,929 --> 01:27:17,340
that zero right because nothing's used

1582
01:27:14,748 --> 01:27:21,059
so now we have to see is the memory at

1583
01:27:17,340 --> 01:27:23,788
higher than you know is it would it have

1584
01:27:21,059 --> 01:27:26,038
wrapped right and the answer is no

1585
01:27:23,788 --> 01:27:27,359
correctly so the slides available is

1586
01:27:26,038 --> 01:27:33,328
like the full size of the transfer

1587
01:27:27,359 --> 01:27:35,308
buffer so that's actually fine that

1588
01:27:33,328 --> 01:27:36,899
means we can get we can do this if we

1589
01:27:35,309 --> 01:27:39,380
want to so the size available inside is

1590
01:27:36,899 --> 01:27:39,379
requested

1591
01:27:39,750 --> 01:27:48,829
oh that's yeah that's backwards well

1592
01:27:45,989 --> 01:27:48,829
that answers that question

1593
01:27:51,350 --> 01:27:54,180
that's how I wanted to write it the

1594
01:27:53,100 --> 01:27:55,050
first time I don't know why I didn't do

1595
01:27:54,180 --> 01:27:58,940
that I was like oh we should keep

1596
01:27:55,050 --> 01:28:06,180
consistent that that's a different check

1597
01:27:58,939 --> 01:28:08,129
so let's try that one more time so we

1598
01:28:06,180 --> 01:28:09,990
find that yeah we can't actually use

1599
01:28:08,130 --> 01:28:11,970
this thing so here's our op index it's

1600
01:28:09,989 --> 01:28:15,329
zero now the OP count should be one and

1601
01:28:11,970 --> 01:28:18,270
it is we then come through and say

1602
01:28:15,329 --> 01:28:19,680
alright we've got a result so this

1603
01:28:18,270 --> 01:28:21,000
result is the one we're actually gonna

1604
01:28:19,680 --> 01:28:24,930
fill out right here's our texture

1605
01:28:21,000 --> 01:28:26,399
transfer so we set the data equal to

1606
01:28:24,930 --> 01:28:27,720
point two what should basically be the

1607
01:28:26,399 --> 01:28:30,389
transfer memory writes the base the

1608
01:28:27,720 --> 01:28:32,369
transfer memory yep we say the amount is

1609
01:28:30,390 --> 01:28:33,720
however that was the last used is going

1610
01:28:32,369 --> 01:28:39,619
to be that same value because that's

1611
01:28:33,720 --> 01:28:39,619
where you would move to afterwards I

1612
01:28:40,489 --> 01:28:46,139
think that's okay so depending load

1613
01:28:43,350 --> 01:28:48,630
which it is we use that much of the

1614
01:28:46,140 --> 01:28:51,990
memory we then assert that everything's

1615
01:28:48,630 --> 01:28:55,430
okay in this case we got the OP loaded

1616
01:28:51,989 --> 01:29:02,460
properly so we pack the texture in there

1617
01:28:55,430 --> 01:29:05,010
and then we complete the OP that's just

1618
01:29:02,460 --> 01:29:06,270
doing the copy complete texture up just

1619
01:29:05,010 --> 01:29:09,260
kicks it off it says it's ready to

1620
01:29:06,270 --> 01:29:13,650
transfer and so we're all good right

1621
01:29:09,260 --> 01:29:17,570
that should just be that then when we go

1622
01:29:13,649 --> 01:29:21,059
into you know the actual rendering code

1623
01:29:17,569 --> 01:29:24,079
what we want to do in there is look and

1624
01:29:21,060 --> 01:29:26,160
see when we do end frame which is here

1625
01:29:24,079 --> 01:29:30,029
let's make sure that the renderer

1626
01:29:26,159 --> 01:29:31,819
actually does that stuff properly with

1627
01:29:30,029 --> 01:29:34,380
the with the sending the textures down

1628
01:29:31,819 --> 01:29:36,210
so here's the manage textures call there

1629
01:29:34,380 --> 01:29:40,369
should be one for every texture and

1630
01:29:36,210 --> 01:29:43,920
there is we come in here we grab one off

1631
01:29:40,369 --> 01:29:47,550
this is it we should also look here and

1632
01:29:43,920 --> 01:29:51,029
we can see how much is used blah blah

1633
01:29:47,550 --> 01:29:52,829
blah so in here we look to see you know

1634
01:29:51,029 --> 01:29:53,309
is it pending load what is it you know

1635
01:29:52,829 --> 01:29:54,600
what

1636
01:29:53,310 --> 01:29:56,220
here well they all should be ready to

1637
01:29:54,600 --> 01:29:58,770
transfer because this ain't asynchronous

1638
01:29:56,220 --> 01:30:00,570
so everything should be loaded so we

1639
01:29:58,770 --> 01:30:02,010
should hop right to this case and we do

1640
01:30:00,569 --> 01:30:03,269
so that's good there's the data we're

1641
01:30:02,010 --> 01:30:04,680
going to transfer it's not a special

1642
01:30:03,270 --> 01:30:08,070
texture because it's actually small

1643
01:30:04,680 --> 01:30:09,360
enough so we drop it down and then the

1644
01:30:08,069 --> 01:30:11,969
question is like do we handle this right

1645
01:30:09,359 --> 01:30:13,979
so let's see so the first thing we need

1646
01:30:11,970 --> 01:30:15,600
to do is we need to reduce the amount of

1647
01:30:13,979 --> 01:30:18,509
memory used by the memory that we got

1648
01:30:15,600 --> 01:30:20,990
here and so that looks like it worked

1649
01:30:18,510 --> 01:30:24,270
properly then we need to move it up to

1650
01:30:20,989 --> 01:30:26,729
so that the first used is now past that

1651
01:30:24,270 --> 01:30:28,860
right and that we do we reduce the OP

1652
01:30:26,729 --> 01:30:30,719
count down and we move the next you know

1653
01:30:28,859 --> 01:30:32,639
so we will be looking at the next stop

1654
01:30:30,720 --> 01:30:34,320
and then we just look to see whether or

1655
01:30:32,640 --> 01:30:36,270
not we've wrapped and in this case we

1656
01:30:34,319 --> 01:30:39,599
definitely have not wrapped right so we

1657
01:30:36,270 --> 01:30:43,070
haven't actually gone over the total of

1658
01:30:39,600 --> 01:30:46,230
the array so we can just keep on going

1659
01:30:43,069 --> 01:30:50,489
we keep doing this and it should just

1660
01:30:46,229 --> 01:30:51,419
work I think right and at the end when

1661
01:30:50,489 --> 01:30:53,909
we're all done

1662
01:30:51,420 --> 01:30:54,960
when we get to the last stop you know

1663
01:30:53,909 --> 01:31:02,729
we're looking at the OP can't there's

1664
01:30:54,960 --> 01:31:04,710
two and here's more and now that we're

1665
01:31:02,729 --> 01:31:07,399
done when we look at the queue we should

1666
01:31:04,710 --> 01:31:10,760
find that there's no memory used right

1667
01:31:07,399 --> 01:31:14,639
and that's accurate

1668
01:31:10,760 --> 01:31:15,989
so that looked good and hey if we look

1669
01:31:14,640 --> 01:31:18,600
at this that looks great

1670
01:31:15,989 --> 01:31:21,239
look so so hey good we only made one

1671
01:31:18,600 --> 01:31:26,870
mistake that that is the only thing we

1672
01:31:21,239 --> 01:31:30,569
screwed up would it worked first time ah

1673
01:31:26,869 --> 01:31:32,430
what are you gonna do so that looks like

1674
01:31:30,569 --> 01:31:34,279
the renderer test everything in there

1675
01:31:32,430 --> 01:31:40,650
this looks totally fine so I think we

1676
01:31:34,279 --> 01:31:44,099
don't have to worry about that problem

1677
01:31:40,649 --> 01:31:46,139
now so the next question is what if we

1678
01:31:44,100 --> 01:31:48,810
tried to stress out the system a little

1679
01:31:46,140 --> 01:31:52,970
so you know there's probably bugs there

1680
01:31:48,810 --> 01:31:56,580
in the wrapping so what if instead of

1681
01:31:52,970 --> 01:31:58,470
giving it the easy case what if we said

1682
01:31:56,579 --> 01:32:01,019
hey you know what you only get three

1683
01:31:58,470 --> 01:32:03,300
well it can't really do the wrap because

1684
01:32:01,020 --> 01:32:04,950
we don't call process textures so you

1685
01:32:03,300 --> 01:32:07,550
can transfer that but instead of the

1686
01:32:04,949 --> 01:32:09,929
transfer memory here

1687
01:32:07,550 --> 01:32:12,929
yeah I guess we can't relate times I'm

1688
01:32:09,929 --> 01:32:15,090
sorry I can't test that here we should

1689
01:32:12,929 --> 01:32:18,260
create a test case for that here because

1690
01:32:15,090 --> 01:32:18,260
it would be easier to debug it

1691
01:32:18,618 --> 01:32:28,649
but yeah you can't really yeah we can't

1692
01:32:26,130 --> 01:32:30,078
we can't really test that here in a

1693
01:32:28,649 --> 01:32:35,488
meaningful way so I guess we just won't

1694
01:32:30,078 --> 01:32:37,710
can do that later okay so now we can

1695
01:32:35,488 --> 01:32:39,538
take the game code and now that we have

1696
01:32:37,710 --> 01:32:42,389
a different texture transfer stuff set

1697
01:32:39,538 --> 01:32:48,238
up now that we should be able to make

1698
01:32:42,389 --> 01:32:49,710
this the asset system we should make the

1699
01:32:48,238 --> 01:32:51,899
asset system work with that texture

1700
01:32:49,710 --> 01:32:55,319
transfer code and that shouldn't be too

1701
01:32:51,899 --> 01:32:57,689
hard we can stub out the sound stuff for

1702
01:32:55,319 --> 01:33:00,599
the moment because we updated both of

1703
01:32:57,689 --> 01:33:03,808
them and then we can do the sound stuff

1704
01:33:00,599 --> 01:33:08,489
in in a separate pass so taking a look

1705
01:33:03,809 --> 01:33:10,440
here at a loaded bitmap we know we got

1706
01:33:08,488 --> 01:33:13,109
rid of that and so this stuff that's

1707
01:33:10,439 --> 01:33:19,408
happening here again not just really

1708
01:33:13,109 --> 01:33:21,899
just not necessary so we can kind of we

1709
01:33:19,408 --> 01:33:24,448
can kind of just ignore it the asset

1710
01:33:21,899 --> 01:33:26,609
itself has the texture handle in it you

1711
01:33:24,448 --> 01:33:29,939
know what I mean so it really looks more

1712
01:33:26,609 --> 01:33:31,670
like this if that makes sense we don't

1713
01:33:29,939 --> 01:33:35,609
need the loaded bitmap into him anymore

1714
01:33:31,670 --> 01:33:38,760
in terms of the size of the read that's

1715
01:33:35,609 --> 01:33:42,328
happening here the read size is just

1716
01:33:38,760 --> 01:33:49,559
gonna be whatever the bitmap size is in

1717
01:33:42,328 --> 01:33:52,408
total so I think we could also just make

1718
01:33:49,559 --> 01:33:54,840
the OP we could we could use the OP to

1719
01:33:52,408 --> 01:33:56,578
give us that back in a sense I don't

1720
01:33:54,840 --> 01:33:58,590
know that we really want to do that but

1721
01:33:56,578 --> 01:34:01,649
we could meaning this right here has

1722
01:33:58,590 --> 01:34:03,150
already computed that but I'm not going

1723
01:34:01,649 --> 01:34:04,679
to do that because the read size could

1724
01:34:03,149 --> 01:34:07,408
actually differ from that in the future

1725
01:34:04,679 --> 01:34:09,118
so instead here I'm just gonna say look

1726
01:34:07,408 --> 01:34:11,250
the read size is going to be bitmap

1727
01:34:09,118 --> 01:34:14,569
width times bitmap height times four

1728
01:34:11,250 --> 01:34:14,569
because that's what it actually is

1729
01:34:15,659 --> 01:34:21,389
um texture up memory in this case for

1730
01:34:18,989 --> 01:34:25,889
destination it's just data it's not

1731
01:34:21,390 --> 01:34:28,200
memory we changed the name of that the

1732
01:34:25,890 --> 01:34:33,270
finalized operation parameter is is not

1733
01:34:28,199 --> 01:34:35,639
a thing anymore it went away so now

1734
01:34:33,270 --> 01:34:37,110
inside load sound what I'm going to do

1735
01:34:35,640 --> 01:34:39,180
inside load sound is just say you can't

1736
01:34:37,109 --> 01:34:41,789
load sounds any more and then we'll come

1737
01:34:39,180 --> 01:34:45,960
back in here and we'll implement the

1738
01:34:41,789 --> 01:34:49,769
sound loader in a cooler way and that'll

1739
01:34:45,960 --> 01:34:55,260
be the end of it okay so when we do a

1740
01:34:49,770 --> 01:34:58,770
load font we need to actually get the

1741
01:34:55,260 --> 01:35:00,239
asset in question here it looks like

1742
01:34:58,770 --> 01:35:01,860
we're just proceeding under the

1743
01:35:00,239 --> 01:35:05,609
assumption that we already accessed it

1744
01:35:01,859 --> 01:35:10,109
but we definitely didn't right and so

1745
01:35:05,609 --> 01:35:11,210
that needs to be put in here yeah there

1746
01:35:10,109 --> 01:35:20,009
we go

1747
01:35:11,210 --> 01:35:23,520
acquire asset memory again not really

1748
01:35:20,010 --> 01:35:25,949
necessary so this is a different when

1749
01:35:23,520 --> 01:35:29,160
we're doing asset memory allocations

1750
01:35:25,949 --> 01:35:30,929
here these are things that I don't think

1751
01:35:29,159 --> 01:35:33,840
we ever actually have to worry about

1752
01:35:30,930 --> 01:35:36,990
multiple threads pulling on those at

1753
01:35:33,840 --> 01:35:41,520
once so I think what we want to do there

1754
01:35:36,989 --> 01:35:43,789
is we want to by the way how much time

1755
01:35:41,520 --> 01:35:43,790
do we have

1756
01:35:44,569 --> 01:35:51,239
I might want to take a quick break and

1757
01:35:47,220 --> 01:35:54,980
come back to do this because it goes I

1758
01:35:51,239 --> 01:35:54,979
might want to spend another hour on this

1759
01:36:01,719 --> 01:36:09,529
I can't decide I think I might want to

1760
01:36:06,248 --> 01:36:12,380
come back to this a little bit later but

1761
01:36:09,529 --> 01:36:14,090
we'll see and like because I don't know

1762
01:36:12,380 --> 01:36:16,219
if I want spend another hour on this and

1763
01:36:14,090 --> 01:36:19,420
if I do I might want to take a break and

1764
01:36:16,219 --> 01:36:21,979
refill Mike my waters out and everything

1765
01:36:19,420 --> 01:36:23,208
yeah let's do that let's I don't want to

1766
01:36:21,979 --> 01:36:24,590
I don't want to rush this part because

1767
01:36:23,208 --> 01:36:25,998
we're about to do the rest of this so

1768
01:36:24,590 --> 01:36:28,219
I'm gonna say let's take a quick break

1769
01:36:25,998 --> 01:36:30,198
and we'll come back so I'll start up the

1770
01:36:28,219 --> 01:36:32,779
screen again in a second I'm gonna go

1771
01:36:30,198 --> 01:36:37,038
ahead and I'm gonna go ahead and stop

1772
01:36:32,779 --> 01:36:38,748
the recording okay we have brac we have

1773
01:36:37,038 --> 01:36:40,639
had a snack we have refilled the water

1774
01:36:38,748 --> 01:36:44,269
we are good to go

1775
01:36:40,639 --> 01:36:50,989
we are not in entire our voice is not in

1776
01:36:44,269 --> 01:36:54,679
dire need of hydration dihydrogen

1777
01:36:50,988 --> 01:36:58,578
monoxide we have we have increased our

1778
01:36:54,679 --> 01:37:01,699
dihydrogen monoxide take so that's good

1779
01:36:58,578 --> 01:37:03,978
all right so a choir asset memory in

1780
01:37:01,698 --> 01:37:08,089
this case is just a situation where we

1781
01:37:03,979 --> 01:37:09,769
have font data and we don't really want

1782
01:37:08,090 --> 01:37:12,288
to load all of the font data that we

1783
01:37:09,769 --> 01:37:13,610
have so even though font data doesn't

1784
01:37:12,288 --> 01:37:16,038
really need to get evicted because it's

1785
01:37:13,609 --> 01:37:17,389
small we if you imagine the case where

1786
01:37:16,038 --> 01:37:19,189
you have 30 different fonts because

1787
01:37:17,389 --> 01:37:21,889
maybe you had lots of language

1788
01:37:19,189 --> 01:37:24,319
localization you don't want to load them

1789
01:37:21,889 --> 01:37:26,420
all so you still want to actually just

1790
01:37:24,319 --> 01:37:29,630
be careful about you know how much

1791
01:37:26,420 --> 01:37:34,670
you're using there in the non restored

1792
01:37:29,630 --> 01:37:36,529
memory pool there so we don't really

1793
01:37:34,670 --> 01:37:38,958
need require acquire asset memory I

1794
01:37:36,529 --> 01:37:41,569
don't think we can pretty much do a

1795
01:37:38,958 --> 01:37:44,599
direct push so we can we can pretty much

1796
01:37:41,569 --> 01:37:46,969
just say look give us this much out of

1797
01:37:44,599 --> 01:37:49,578
the out of the NAM restored memory pool

1798
01:37:46,969 --> 01:37:51,948
and we'll just go from there so I think

1799
01:37:49,578 --> 01:37:53,868
that's good enough for the fonts like I

1800
01:37:51,948 --> 01:37:55,669
said we're just gonna load those at the

1801
01:37:53,868 --> 01:37:57,228
outset for the ones we actually care

1802
01:37:55,670 --> 01:37:57,769
about and then be done for a given

1803
01:37:57,229 --> 01:38:01,130
situation

1804
01:37:57,769 --> 01:38:02,719
we can get fancier and allow eviction of

1805
01:38:01,130 --> 01:38:04,038
fonts in the future if we really find

1806
01:38:02,719 --> 01:38:09,800
that we need to but for the moment I

1807
01:38:04,038 --> 01:38:10,969
just doesn't seem relevant okay so yeah

1808
01:38:09,800 --> 01:38:12,260
in

1809
01:38:10,970 --> 01:38:15,949
here we're just getting rid of the

1810
01:38:12,260 --> 01:38:18,050
concept that we have the work asset

1811
01:38:15,949 --> 01:38:20,750
stuff to begin with because now we just

1812
01:38:18,050 --> 01:38:23,539
don't have that happening anymore in

1813
01:38:20,750 --> 01:38:25,430
here I guess I'm not sure what we would

1814
01:38:23,539 --> 01:38:27,590
do in the case where the font doesn't

1815
01:38:25,430 --> 01:38:31,940
actually get loaded other than give the

1816
01:38:27,590 --> 01:38:33,829
memory back and so you know we could try

1817
01:38:31,939 --> 01:38:37,279
to be a little bit better behaved there

1818
01:38:33,829 --> 01:38:39,890
and just say well you know when we're

1819
01:38:37,279 --> 01:38:43,279
gonna we want to be able to mark the the

1820
01:38:39,890 --> 01:38:47,270
location so in the future if we want to

1821
01:38:43,279 --> 01:38:49,939
rewind back to it we could do so so

1822
01:38:47,270 --> 01:38:53,480
looking you know how that works you can

1823
01:38:49,939 --> 01:38:56,389
see it doing the rewind here and we kind

1824
01:38:53,479 --> 01:39:00,229
of have this temp count so what we can

1825
01:38:56,390 --> 01:39:03,050
do is say let's pretend we're going to

1826
01:39:00,229 --> 01:39:12,109
start a temporary memory block like so

1827
01:39:03,050 --> 01:39:14,840
so we just say yeah memory point begin

1828
01:39:12,109 --> 01:39:17,779
temporary memory so here we can just say

1829
01:39:14,840 --> 01:39:20,680
look we're gonna try to do some stuff

1830
01:39:17,779 --> 01:39:24,139
with this memory but you know if we fail

1831
01:39:20,680 --> 01:39:31,970
then we will rewind it so you know end

1832
01:39:24,140 --> 01:39:36,070
temporary memory we will do here so if

1833
01:39:31,970 --> 01:39:38,090
we can't actually get the font set up

1834
01:39:36,069 --> 01:39:43,609
then forget it

1835
01:39:38,090 --> 01:39:47,360
we'll we'll unwind but if we can then we

1836
01:39:43,609 --> 01:39:49,489
will try to load it right so that's

1837
01:39:47,359 --> 01:39:53,109
really all I wanted to do there is just

1838
01:39:49,489 --> 01:39:55,880
make sure that that path works okay and

1839
01:39:53,109 --> 01:39:57,649
we won't set the asset state to load it

1840
01:39:55,880 --> 01:40:00,619
unless we were actually able to do it

1841
01:39:57,649 --> 01:40:02,359
right so we we do this again this is

1842
01:40:00,619 --> 01:40:04,550
synchronous that's not a big deal so in

1843
01:40:02,359 --> 01:40:08,719
the case we actually can load it what we

1844
01:40:04,550 --> 01:40:12,079
want to do is say like you know hey you

1845
01:40:08,720 --> 01:40:16,909
know what I decided actually you know

1846
01:40:12,079 --> 01:40:18,460
just kidding I would like to keep the

1847
01:40:16,909 --> 01:40:23,000
temporary memory going

1848
01:40:18,460 --> 01:40:24,619
III changed my mind about that so you

1849
01:40:23,000 --> 01:40:27,949
know sorry

1850
01:40:24,619 --> 01:40:30,260
but it turn it just turned out that I

1851
01:40:27,949 --> 01:40:33,229
really like the memory so much I'm going

1852
01:40:30,260 --> 01:40:36,920
to keep it and so they're all we have to

1853
01:40:33,229 --> 01:40:38,539
do is just not do this right all we have

1854
01:40:36,920 --> 01:40:41,449
to do is just say all right the temp

1855
01:40:38,539 --> 01:40:44,750
count goes down we can assert that the

1856
01:40:41,449 --> 01:40:46,880
temp count is greater than zero and we

1857
01:40:44,750 --> 01:40:49,069
can also do this which is to say if

1858
01:40:46,880 --> 01:40:53,869
there was any in the first place

1859
01:40:49,069 --> 01:40:56,269
now the temp count here it seems like

1860
01:40:53,869 --> 01:40:58,069
this temp count greater than zero really

1861
01:40:56,270 --> 01:40:59,690
should have been like that because if

1862
01:40:58,069 --> 01:41:01,609
you're gonna subtract away you'd better

1863
01:40:59,689 --> 01:41:03,319
check so I'm not sure why that wasn't

1864
01:41:01,609 --> 01:41:05,119
happening in here

1865
01:41:03,319 --> 01:41:06,889
so really we're just doing the exact

1866
01:41:05,119 --> 01:41:09,590
same thing right weird but we're not

1867
01:41:06,890 --> 01:41:10,640
doing any of the actual clearing so that

1868
01:41:09,590 --> 01:41:12,319
would allow us to give the memory back

1869
01:41:10,640 --> 01:41:14,000
in the case we're like the file read

1870
01:41:12,319 --> 01:41:15,590
fails because file reads can fail right

1871
01:41:14,000 --> 01:41:18,560
we don't know that if the faleri it's

1872
01:41:15,590 --> 01:41:21,590
going to succeed and so in this case I

1873
01:41:18,560 --> 01:41:25,430
think we want to keep it working

1874
01:41:21,590 --> 01:41:28,159
properly okay so that was all I wanted

1875
01:41:25,430 --> 01:41:30,800
to say about that we can get the font

1876
01:41:28,159 --> 01:41:32,420
here so that's all good I don't know

1877
01:41:30,800 --> 01:41:34,810
what else has to happen here that we're

1878
01:41:32,420 --> 01:41:34,810
not doing

1879
01:41:35,119 --> 01:41:44,239
yeah asset font ooh that is loaded font

1880
01:41:41,630 --> 01:41:45,289
here so I what am I actually doing the

1881
01:41:44,239 --> 01:41:48,289
font or we're just looking at the glyphs

1882
01:41:45,289 --> 01:41:49,100
in here so in terms of this part right

1883
01:41:48,289 --> 01:41:51,439
here

1884
01:41:49,100 --> 01:41:55,310
I feel like this can really just be

1885
01:41:51,439 --> 01:41:57,679
blocked off the fog lifts stuff where we

1886
01:41:55,310 --> 01:41:59,510
do the load trying to think of what I

1887
01:41:57,680 --> 01:42:01,310
really want to do there cuz I do want to

1888
01:41:59,510 --> 01:42:03,530
get at the load so maybe I have to

1889
01:42:01,310 --> 01:42:05,360
actually literally call that HHA font I

1890
01:42:03,529 --> 01:42:07,309
don't know but you know if we look in

1891
01:42:05,359 --> 01:42:17,750
here where those two things are

1892
01:42:07,310 --> 01:42:20,780
happening Oh duh it's the same fun do

1893
01:42:17,750 --> 01:42:21,319
anything so that all looks pretty good

1894
01:42:20,779 --> 01:42:25,309
to me

1895
01:42:21,319 --> 01:42:27,229
inside allocate game assets this stuff

1896
01:42:25,310 --> 01:42:36,860
here is gonna have to change a little

1897
01:42:27,229 --> 01:42:39,469
bit so there's a couple things that

1898
01:42:36,859 --> 01:42:41,689
we're gonna have to do with because

1899
01:42:39,470 --> 01:42:43,340
remember we weren't tracking free

1900
01:42:41,689 --> 01:42:47,059
texture handles before we're going to

1901
01:42:43,340 --> 01:42:48,289
actually have to do that and so yeah

1902
01:42:47,060 --> 01:42:50,090
like you know there's a couple different

1903
01:42:48,289 --> 01:42:53,300
ways we could do that and let's decide

1904
01:42:50,090 --> 01:42:55,880
exactly how but the rest of this code

1905
01:42:53,300 --> 01:43:00,170
can go away if I go into the audio layer

1906
01:42:55,880 --> 01:43:02,840
and we look at the get sound situation

1907
01:43:00,170 --> 01:43:04,640
here so we're not going to be able to do

1908
01:43:02,840 --> 01:43:08,119
get sound anymore but almost everything

1909
01:43:04,640 --> 01:43:10,490
else in this code all will work the only

1910
01:43:08,119 --> 01:43:12,829
difference is that the when we go to get

1911
01:43:10,489 --> 01:43:15,889
the samples the samples don't come out

1912
01:43:12,829 --> 01:43:17,930
of the loaded sound anymore so it's

1913
01:43:15,890 --> 01:43:21,520
actually the samples that you get back

1914
01:43:17,930 --> 01:43:28,310
and the info for the sound comes like

1915
01:43:21,520 --> 01:43:30,170
out of this so there's an HHA sound here

1916
01:43:28,310 --> 01:43:37,310
and you know and i know i could do it

1917
01:43:30,170 --> 01:43:39,289
this way and this kind of thing right so

1918
01:43:37,310 --> 01:43:42,260
when we actually get the sound samples

1919
01:43:39,289 --> 01:43:43,609
back we're gonna play those out of here

1920
01:43:42,260 --> 01:43:46,039
they're not gonna come out a load of

1921
01:43:43,609 --> 01:43:48,250
time where everything else though will

1922
01:43:46,039 --> 01:43:53,260
work so this is just get sound in

1923
01:43:48,250 --> 01:43:56,140
right it's just this and so everything

1924
01:43:53,260 --> 01:43:57,789
else would work just fine and if we need

1925
01:43:56,140 --> 01:43:59,200
to actually get those samples now the

1926
01:43:57,789 --> 01:44:00,760
only difference right when you look at

1927
01:43:59,199 --> 01:44:04,029
what we're doing all throughout all of

1928
01:44:00,760 --> 01:44:06,579
this stuff is when we get down to the

1929
01:44:04,029 --> 01:44:10,059
very end and we want to actually mix

1930
01:44:06,579 --> 01:44:13,840
something then you're gonna want to go

1931
01:44:10,060 --> 01:44:17,170
and you're you're gonna want to go in

1932
01:44:13,840 --> 01:44:20,710
and use that sample buffer there so if I

1933
01:44:17,170 --> 01:44:25,930
look and see where we getting that from

1934
01:44:20,710 --> 01:44:28,079
melodious sound yes so you see that load

1935
01:44:25,930 --> 01:44:33,579
and sound samples and the bracket

1936
01:44:28,079 --> 01:44:38,890
nonsense there right you can kind of see

1937
01:44:33,579 --> 01:44:41,319
all this happen samples I don't totally

1938
01:44:38,890 --> 01:44:46,539
understand why we're using a bracket 0

1939
01:44:41,319 --> 01:44:51,819
there were we was this code like somehow

1940
01:44:46,539 --> 01:44:54,430
looking at at something for two channels

1941
01:44:51,819 --> 01:44:57,329
and then only did the zero sample here

1942
01:44:54,430 --> 01:44:57,329
like I don't know why

1943
01:45:02,880 --> 01:45:14,940
I don't know why it's really written

1944
01:45:05,158 --> 01:45:20,819
like that you know what I mean let me

1945
01:45:14,939 --> 01:45:24,928
take a look because excuse me in terms

1946
01:45:20,819 --> 01:45:26,130
of what that returns I don't see why we

1947
01:45:24,929 --> 01:45:29,369
would have done the channel pointed that

1948
01:45:26,130 --> 01:45:32,130
way let's just take a quick look so

1949
01:45:29,369 --> 01:45:35,719
inside the asset system when it was

1950
01:45:32,130 --> 01:45:39,119
actually going to go do the sound load

1951
01:45:35,719 --> 01:45:42,389
so in this code which we if zero it out

1952
01:45:39,119 --> 01:45:45,479
but that still exists right so in here

1953
01:45:42,389 --> 01:45:50,550
you can see when we get the memory we're

1954
01:45:45,479 --> 01:45:56,279
setting the sound sample pointers so

1955
01:45:50,550 --> 01:45:59,550
that they're strided along samples so I

1956
01:45:56,279 --> 01:46:03,529
guess what I don't know is what were we

1957
01:45:59,550 --> 01:46:03,529
planning to do there like

1958
01:46:10,319 --> 01:46:29,880
I mean this this never appears to do the

1959
01:46:23,189 --> 01:46:31,828
channels differently does it like if

1960
01:46:29,880 --> 01:46:34,650
that's the channel index

1961
01:46:31,828 --> 01:46:36,509
well it's only ever set to zero so it's

1962
01:46:34,649 --> 01:46:45,299
not exactly doing a very good job

1963
01:46:36,510 --> 01:46:47,340
loading by Norrell samples so I'm

1964
01:46:45,300 --> 01:46:49,380
assuming the oh yeah and there's a

1965
01:46:47,340 --> 01:46:56,520
handle stereo to do right here right so

1966
01:46:49,380 --> 01:47:01,050
so this is actually just nonsense and we

1967
01:46:56,520 --> 01:47:02,940
can you know we can fix this code I

1968
01:47:01,050 --> 01:47:04,469
guess later by just calling it twice in

1969
01:47:02,939 --> 01:47:06,269
the loop I'm not sure why we didn't do

1970
01:47:04,469 --> 01:47:09,029
that so you know I guess that doesn't

1971
01:47:06,270 --> 01:47:10,520
matter at all the point being when we

1972
01:47:09,029 --> 01:47:15,389
call it get sound and we get a sample

1973
01:47:10,520 --> 01:47:19,710
handle back here we can if we want to we

1974
01:47:15,389 --> 01:47:22,429
could actually imitate Jimmy we can

1975
01:47:19,710 --> 01:47:25,139
actually imitate what's going on in that

1976
01:47:22,429 --> 01:47:28,679
loaded sample we could do that if we

1977
01:47:25,139 --> 01:47:32,520
wanted to priestly actually we could

1978
01:47:28,679 --> 01:47:35,069
keep the loaded sound and when you

1979
01:47:32,520 --> 01:47:37,440
actually return the samples you could

1980
01:47:35,069 --> 01:47:43,559
return them in that so you know we could

1981
01:47:37,439 --> 01:47:46,618
do loaded sound and actually have you

1982
01:47:43,560 --> 01:47:49,889
know something like this where we

1983
01:47:46,618 --> 01:47:55,139
actually do have that block of pointers

1984
01:47:49,889 --> 01:47:58,650
there and you can use use them it seems

1985
01:47:55,139 --> 01:48:01,920
dumb because it's not like you don't

1986
01:47:58,649 --> 01:48:05,929
know where the memory is so I feel like

1987
01:48:01,920 --> 01:48:09,779
I'm just not going to do that because

1988
01:48:05,929 --> 01:48:14,158
since we can always stride based on how

1989
01:48:09,779 --> 01:48:16,408
big each individual channel is at most

1990
01:48:14,158 --> 01:48:20,789
what I would do here is return a channel

1991
01:48:16,408 --> 01:48:25,009
size like at absolute most so I would

1992
01:48:20,789 --> 01:48:25,010
just say this is just gonna be this

1993
01:48:29,659 --> 01:48:38,609
and and that's pretty much the end of it

1994
01:48:33,630 --> 01:48:42,150
right like I'm not gonna do any more you

1995
01:48:38,609 --> 01:48:44,130
know work than that and we will just

1996
01:48:42,149 --> 01:48:46,109
advance the sample pointer by the

1997
01:48:44,130 --> 01:48:48,270
channel size when we go to do the next

1998
01:48:46,109 --> 01:48:50,849
one cuz it just seems dumb to do

1999
01:48:48,270 --> 01:48:53,600
anything else I mean it's a fixed size

2000
01:48:50,850 --> 01:48:56,340
thing there's no it's just silly

2001
01:48:53,600 --> 01:49:00,930
at some level to do anything else I

2002
01:48:56,340 --> 01:49:03,000
would I would argue so okay so again

2003
01:49:00,930 --> 01:49:04,950
like we're getting down to like very few

2004
01:49:03,000 --> 01:49:07,969
actual things here what does it get

2005
01:49:04,949 --> 01:49:10,409
sound samples it's a call now right yeah

2006
01:49:07,969 --> 01:49:12,719
so we're getting down to very few actual

2007
01:49:10,409 --> 01:49:14,760
things that have to happen here now

2008
01:49:12,719 --> 01:49:16,079
remember we changed this to say that

2009
01:49:14,760 --> 01:49:18,000
there's flat form render limits now

2010
01:49:16,079 --> 01:49:21,090
which is just a more convenient way of

2011
01:49:18,000 --> 01:49:23,789
passing this stuff along and so all of

2012
01:49:21,090 --> 01:49:25,710
this stuff that was sort of being passed

2013
01:49:23,789 --> 01:49:27,390
piecemeal before it's gonna go in here

2014
01:49:25,710 --> 01:49:28,949
and guess it's to facilitate the fact

2015
01:49:27,390 --> 01:49:30,869
that this is like a conduit problem

2016
01:49:28,949 --> 01:49:32,039
right you've got sort of a bunch of

2017
01:49:30,869 --> 01:49:34,769
things that are getting passed through

2018
01:49:32,039 --> 01:49:36,329
several places not because we would

2019
01:49:34,770 --> 01:49:38,250
really want that to happen but because

2020
01:49:36,329 --> 01:49:40,109
we have to go through gyrations for

2021
01:49:38,250 --> 01:49:42,810
dynamic loading right because remember

2022
01:49:40,109 --> 01:49:44,819
we've got the renderer is actually

2023
01:49:42,810 --> 01:49:46,289
loaded out of a DLL switch so that

2024
01:49:44,819 --> 01:49:48,449
people can swap in different renderers

2025
01:49:46,289 --> 01:49:53,729
if they want to so we really don't want

2026
01:49:48,449 --> 01:49:55,679
to force them to have to update that if

2027
01:49:53,729 --> 01:49:58,319
we decide them to conduit more stuff

2028
01:49:55,680 --> 01:50:02,219
through there so we really want to just

2029
01:49:58,319 --> 01:50:03,719
fill out the limits now from for the

2030
01:50:02,219 --> 01:50:07,500
parameters exactly as they were before

2031
01:50:03,719 --> 01:50:10,170
if I go into the the renderer and look

2032
01:50:07,500 --> 01:50:12,659
up those differences there I've got the

2033
01:50:10,170 --> 01:50:15,869
max texture count and I've got the

2034
01:50:12,659 --> 01:50:18,930
special texture count and the buffer

2035
01:50:15,869 --> 01:50:25,619
size they're all that stuff seems pretty

2036
01:50:18,930 --> 01:50:27,780
good and let's see here yeah we're down

2037
01:50:25,619 --> 01:50:29,010
to just a few things the Sentinels are

2038
01:50:27,779 --> 01:50:31,590
not here anymore

2039
01:50:29,010 --> 01:50:34,020
we don't need insert block assets

2040
01:50:31,590 --> 01:50:36,390
Sentinel none of that stuff is here all

2041
01:50:34,020 --> 01:50:37,860
that stuff can be removed so yeah

2042
01:50:36,390 --> 01:50:39,510
looking through here we can just

2043
01:50:37,859 --> 01:50:42,299
you know visually just inspect that

2044
01:50:39,510 --> 01:50:43,710
there's no no more of that stuff still

2045
01:50:42,300 --> 01:50:48,270
hanging around because we don't really

2046
01:50:43,710 --> 01:50:51,118
want it it's not useful so then we're

2047
01:50:48,270 --> 01:50:52,949
left with just a very very few things in

2048
01:50:51,118 --> 01:50:55,349
here so you can see we've got update

2049
01:50:52,948 --> 01:50:59,250
here we we're trying to send out a

2050
01:50:55,350 --> 01:51:02,369
single pixel texture that's our fallback

2051
01:50:59,250 --> 01:51:03,960
white pixel texture and that's just

2052
01:51:02,368 --> 01:51:05,519
there if the only reason that there is

2053
01:51:03,960 --> 01:51:08,609
because we kind of have this fall by

2054
01:51:05,520 --> 01:51:10,380
case of non textured things and the

2055
01:51:08,609 --> 01:51:12,299
question is you know is there a better

2056
01:51:10,380 --> 01:51:14,329
way to do that do we want to do that in

2057
01:51:12,300 --> 01:51:16,500
some other way you know there's probably

2058
01:51:14,329 --> 01:51:18,988
things we can do but I'm gonna leave

2059
01:51:16,500 --> 01:51:20,939
that as it is right now I'm gonna let

2060
01:51:18,988 --> 01:51:24,269
that just go through the normal process

2061
01:51:20,939 --> 01:51:27,359
that it would go through and we'll we'll

2062
01:51:24,270 --> 01:51:32,460
go ahead and let that up actually play

2063
01:51:27,359 --> 01:51:34,319
itself out so again if we want to do

2064
01:51:32,460 --> 01:51:36,149
that it's again really simple

2065
01:51:34,319 --> 01:51:39,118
I like this API a lot I feel like we've

2066
01:51:36,149 --> 01:51:41,539
done a good job here getting down to

2067
01:51:39,118 --> 01:51:44,698
something that's pretty straightforward

2068
01:51:41,539 --> 01:51:46,439
so if we look at our render or testbed

2069
01:51:44,698 --> 01:51:48,118
here we actually did basically what I

2070
01:51:46,439 --> 01:51:50,039
want to do down in here right we just

2071
01:51:48,118 --> 01:51:52,738
did a really simple thing where we said

2072
01:51:50,039 --> 01:51:54,630
like you know let's make sure we can do

2073
01:51:52,738 --> 01:51:57,198
an op here where we where we set this up

2074
01:51:54,630 --> 01:51:58,889
we're gonna require that it be completed

2075
01:51:57,198 --> 01:52:01,919
but that's about it

2076
01:51:58,889 --> 01:52:03,929
so the assets white pixel pointer that's

2077
01:52:01,920 --> 01:52:05,730
not actually got like what's kind of

2078
01:52:03,929 --> 01:52:08,908
it's kind of nice here we don't really

2079
01:52:05,729 --> 01:52:12,178
need these anymore it doesn't need to be

2080
01:52:08,908 --> 01:52:15,960
stored because we can write it in to the

2081
01:52:12,179 --> 01:52:17,940
OP itself you know what I mean so we can

2082
01:52:15,960 --> 01:52:20,760
make this texture op stuff a little

2083
01:52:17,939 --> 01:52:26,988
cleaner as well so we can just say all

2084
01:52:20,760 --> 01:52:30,119
right the the OP data is just gonna be

2085
01:52:26,988 --> 01:52:32,459
the the white pixel and then we'll

2086
01:52:30,118 --> 01:52:34,079
complete it and that's it right so this

2087
01:52:32,460 --> 01:52:35,630
doesn't actually have to happen like

2088
01:52:34,079 --> 01:52:38,399
that anymore

2089
01:52:35,630 --> 01:52:40,340
so now I think we're in a position where

2090
01:52:38,399 --> 01:52:42,420
we're more or less doing the right thing

2091
01:52:40,340 --> 01:52:44,610
but now we got to go do bug it because

2092
01:52:42,420 --> 01:52:46,739
remember we stripped out a ton of code

2093
01:52:44,609 --> 01:52:50,189
there right this just got like way

2094
01:52:46,738 --> 01:52:51,089
simpler than it was and so when we're

2095
01:52:50,189 --> 01:52:53,488
looking at like what

2096
01:52:51,090 --> 01:52:55,230
happening here there's a lot of things

2097
01:52:53,488 --> 01:52:56,250
that we could have screwed up in there

2098
01:52:55,229 --> 01:52:58,859
and so we want to go through and

2099
01:52:56,250 --> 01:53:01,679
actually make sure that we know at all

2100
01:52:58,859 --> 01:53:03,238
what's going on one of the issues one

2101
01:53:01,679 --> 01:53:05,579
additional thing that I would say here

2102
01:53:03,238 --> 01:53:08,069
is this could stand to be a little bit

2103
01:53:05,579 --> 01:53:10,469
more systemic at this point when we're

2104
01:53:08,069 --> 01:53:12,299
actually going in and and doing the

2105
01:53:10,469 --> 01:53:14,609
texture handle stuff this bitmap width

2106
01:53:12,300 --> 01:53:17,279
and height is is really should possibly

2107
01:53:14,609 --> 01:53:19,079
be set by the texture op call itself

2108
01:53:17,279 --> 01:53:20,488
just to make sure that people don't

2109
01:53:19,079 --> 01:53:23,368
accidentally set the width and height

2110
01:53:20,488 --> 01:53:25,979
wrong when they're doing that thing that

2111
01:53:23,368 --> 01:53:27,448
texture handle usage so I feel like

2112
01:53:25,979 --> 01:53:28,488
there's probably a little bit we could

2113
01:53:27,448 --> 01:53:33,448
be doing there

2114
01:53:28,488 --> 01:53:35,279
that would clean that up and I might go

2115
01:53:33,448 --> 01:53:37,979
look at that but but first before I do

2116
01:53:35,279 --> 01:53:42,289
anything else right I just want to get

2117
01:53:37,979 --> 01:53:47,029
that basic you know the basic first pass

2118
01:53:42,289 --> 01:53:50,460
debugging done clear out all the the

2119
01:53:47,029 --> 01:53:53,219
failure cases and whatnot and kind of go

2120
01:53:50,460 --> 01:53:57,420
from there okay so let's see what we

2121
01:53:53,219 --> 01:54:02,020
started off with here we've got a we've

2122
01:53:57,420 --> 01:54:05,899
got an assert texture empty it's nice

2123
01:54:02,020 --> 01:54:10,110
[Laughter]

2124
01:54:05,899 --> 01:54:11,908
that's a pretty good that's a pretty

2125
01:54:10,109 --> 01:54:17,509
good assertion I guess we just thought

2126
01:54:11,908 --> 01:54:17,509
we'd assert just a flag that's why not

2127
01:54:18,250 --> 01:54:20,510
[Music]

2128
01:54:19,079 --> 01:54:25,460
[Laughter]

2129
01:54:20,510 --> 01:54:29,039
okay so that's that's pretty funny

2130
01:54:25,460 --> 01:54:32,340
where's our OpenGL renderer there there

2131
01:54:29,039 --> 01:54:34,439
it is so I don't know what I was

2132
01:54:32,340 --> 01:54:37,829
thinking there that's not what I meant I

2133
01:54:34,439 --> 01:54:45,059
meant that right so uh let's let's try

2134
01:54:37,829 --> 01:54:46,710
that one more time yes pretty silly all

2135
01:54:45,060 --> 01:54:47,369
right so let's take a look at what's

2136
01:54:46,710 --> 01:54:49,289
going on

2137
01:54:47,368 --> 01:54:52,500
here we're in update and render entities

2138
01:54:49,289 --> 01:54:56,279
we're getting a bitmap ID okay so here

2139
01:54:52,500 --> 01:54:57,810
in this case the bitmap ID is zero we

2140
01:54:56,279 --> 01:55:02,039
probably want to handle that case

2141
01:54:57,810 --> 01:55:04,590
meaning in here if the asset that you

2142
01:55:02,039 --> 01:55:06,989
asked for is zero we probably don't

2143
01:55:04,590 --> 01:55:13,010
want to get we want to give you back the

2144
01:55:06,989 --> 01:55:22,529
null asset in all cases now I don't know

2145
01:55:13,010 --> 01:55:26,909
yeah like it seems like in some sense it

2146
01:55:22,529 --> 01:55:30,329
should be possible to always count on

2147
01:55:26,909 --> 01:55:32,569
that like I'm just trying to think

2148
01:55:30,329 --> 01:55:35,699
through in my head

2149
01:55:32,569 --> 01:55:38,849
if this asset is always set everywhere

2150
01:55:35,699 --> 01:55:40,829
to know then the texture handle will

2151
01:55:38,850 --> 01:55:43,560
also be null so it's fine to return that

2152
01:55:40,829 --> 01:55:46,920
so this assertion what we probably can

2153
01:55:43,560 --> 01:55:53,580
do is just actually allow that case just

2154
01:55:46,920 --> 01:55:56,670
fine and what we would want is like when

2155
01:55:53,579 --> 01:55:59,640
we do this assertion assert that either

2156
01:55:56,670 --> 01:56:01,470
the value is zero or that it was a

2157
01:55:59,640 --> 01:56:09,840
bitmap because anyone is actually

2158
01:56:01,470 --> 01:56:13,440
allowed to get to get the 0 value out so

2159
01:56:09,840 --> 01:56:15,710
you know it's more like this sort of a

2160
01:56:13,439 --> 01:56:15,710
thing

2161
01:56:25,229 --> 01:56:32,459
so I think that's fine you know famous

2162
01:56:30,539 --> 01:56:36,539
last words but I think that's probably

2163
01:56:32,460 --> 01:56:38,010
okay all right so now we want to

2164
01:56:36,539 --> 01:56:39,149
actually debug like what's going on

2165
01:56:38,010 --> 01:56:40,949
because now we're actually running

2166
01:56:39,149 --> 01:56:45,059
straight through okay but we do need to

2167
01:56:40,949 --> 01:56:46,739
make sure that when we trigger our asset

2168
01:56:45,060 --> 01:56:48,600
loads they actually get loaded and

2169
01:56:46,739 --> 01:56:53,449
somebody will actually like download

2170
01:56:48,600 --> 01:56:58,050
them right so we need to make sure we

2171
01:56:53,449 --> 01:57:01,139
make sure we actually have that whole

2172
01:56:58,050 --> 01:57:03,600
pipeline flowing properly so if I drop

2173
01:57:01,140 --> 01:57:04,829
into the asset code here what we know is

2174
01:57:03,600 --> 01:57:07,260
you know we're you know we're we're

2175
01:57:04,829 --> 01:57:10,739
kicking off an asset and we know we're

2176
01:57:07,260 --> 01:57:12,600
we're retiring the assets so this inside

2177
01:57:10,739 --> 01:57:14,609
load asset work right which is the

2178
01:57:12,600 --> 01:57:16,410
callback to tapping an async that waits

2179
01:57:14,609 --> 01:57:19,170
for the read to complete and after it's

2180
01:57:16,409 --> 01:57:22,500
complete you know we we head in here and

2181
01:57:19,170 --> 01:57:24,690
do the texture up retirement so we know

2182
01:57:22,500 --> 01:57:26,220
that that code path needs to get hit

2183
01:57:24,689 --> 01:57:27,809
otherwise we won't ever download the

2184
01:57:26,220 --> 01:57:29,789
texture we also know that our load

2185
01:57:27,810 --> 01:57:33,330
bitmap code has to get hit or we won't

2186
01:57:29,789 --> 01:57:35,789
ever load the texture either and so what

2187
01:57:33,329 --> 01:57:38,909
we want to look for is this code path

2188
01:57:35,789 --> 01:57:40,409
working properly so we want to come in

2189
01:57:38,909 --> 01:57:41,849
here and take a look and see what

2190
01:57:40,409 --> 01:57:46,559
happens so here we're trying to load a

2191
01:57:41,850 --> 01:57:48,180
512 by 512 bitmap and we want to make

2192
01:57:46,560 --> 01:57:50,160
sure that this all works properly so

2193
01:57:48,180 --> 01:57:52,860
when we come in here to the 512 by 512

2194
01:57:50,159 --> 01:57:56,309
case we want to see that we actually do

2195
01:57:52,859 --> 01:57:57,750
get an OP we do get an up and that OP is

2196
01:57:56,310 --> 01:58:00,150
going to be in the pending load State

2197
01:57:57,750 --> 01:58:02,760
which is exactly what it should be and

2198
01:58:00,149 --> 01:58:04,859
then when we come through here and we

2199
01:58:02,760 --> 01:58:07,409
start up the task that we're supposed to

2200
01:58:04,859 --> 01:58:09,059
kick off what we want to do is set up

2201
01:58:07,409 --> 01:58:12,180
that texture handle right so we should

2202
01:58:09,060 --> 01:58:16,110
now see an index and a size that that

2203
01:58:12,180 --> 01:58:18,180
looks you know roughly correct and then

2204
01:58:16,109 --> 01:58:21,630
when we come through here and we start

2205
01:58:18,180 --> 01:58:23,610
the you know we get that asset work out

2206
01:58:21,630 --> 01:58:27,569
of the tasks arena here to actually

2207
01:58:23,609 --> 01:58:30,599
start this task going we set up all of

2208
01:58:27,569 --> 01:58:33,439
the pointers and it looks pretty good

2209
01:58:30,600 --> 01:58:33,440
right like

2210
01:58:35,930 --> 01:58:44,230
you know there's the load it's it's

2211
01:58:38,840 --> 01:58:47,150
happening in the right spot looks like

2212
01:58:44,229 --> 01:58:49,339
the texture ops getting set the queue is

2213
01:58:47,149 --> 01:58:54,159
set we're gonna stuff it in the low

2214
01:58:49,340 --> 01:58:54,159
priority queue for being handled later

2215
01:58:56,079 --> 01:59:00,890
you know that looks fine so I guess what

2216
01:58:59,659 --> 01:59:03,920
I would say is that you know that

2217
01:59:00,890 --> 01:59:07,789
doesn't look too too concerning what

2218
01:59:03,920 --> 01:59:11,119
about this is this maybe we're stuffs

2219
01:59:07,789 --> 01:59:12,859
not getting set properly I don't know so

2220
01:59:11,119 --> 01:59:16,369
here we've we've hit the completion

2221
01:59:12,859 --> 01:59:18,399
state we look at the texture op we're

2222
01:59:16,369 --> 01:59:21,289
gonna step into a complete texture op

2223
01:59:18,399 --> 01:59:25,699
and all that does is to say hey this is

2224
01:59:21,289 --> 01:59:33,560
ready to transfer right and then we also

2225
01:59:25,699 --> 01:59:35,269
double check the sizes there so you know

2226
01:59:33,560 --> 01:59:39,440
what there's one thing that's not really

2227
01:59:35,270 --> 01:59:45,910
right here this would have to do a

2228
01:59:39,439 --> 01:59:49,399
cancel if it didn't do a complete right

2229
01:59:45,909 --> 01:59:57,260
so that actually has to be moved down

2230
01:59:49,399 --> 01:59:59,239
here in a sense I mean I don't even

2231
01:59:57,260 --> 02:00:01,730
think in a sense I think it just has to

2232
01:59:59,239 --> 02:00:04,069
be moved down here that's not what's

2233
02:00:01,729 --> 02:00:07,789
failing now but that needs to happen we

2234
02:00:04,069 --> 02:00:10,340
set the state here too loaded and I feel

2235
02:00:07,789 --> 02:00:14,300
like that should have worked right

2236
02:00:10,340 --> 02:00:15,860
there's the offset in the file there's a

2237
02:00:14,300 --> 02:00:19,520
size there it's destination that all

2238
02:00:15,859 --> 02:00:21,439
seems reasonable so those states are

2239
02:00:19,520 --> 02:00:23,690
loaded so you know that seems pretty

2240
02:00:21,439 --> 02:00:26,899
good I'm not sure what the problem is it

2241
02:00:23,689 --> 02:00:29,569
might be in our buffer reading code that

2242
02:00:26,899 --> 02:00:31,460
has somehow it stalls out and can't make

2243
02:00:29,569 --> 02:00:32,869
forward progress so we can go take a

2244
02:00:31,460 --> 02:00:34,640
look at what's going on in there and

2245
02:00:32,869 --> 02:00:36,349
second before I do anything else though

2246
02:00:34,640 --> 02:00:38,780
I really don't think that piece of code

2247
02:00:36,350 --> 02:00:41,480
is correct so you know even though we're

2248
02:00:38,779 --> 02:00:43,309
not really testing or trying to work on

2249
02:00:41,479 --> 02:00:45,679
this part right now I don't actually

2250
02:00:43,310 --> 02:00:48,630
want to do this I think what I want to

2251
02:00:45,680 --> 02:00:56,400
do here is this and so

2252
02:00:48,630 --> 02:01:12,960
what we would say is I think probably

2253
02:00:56,399 --> 02:01:15,149
here and then this probably so if we

2254
02:01:12,960 --> 02:01:17,158
were unable to actually get it we're

2255
02:01:15,149 --> 02:01:21,000
gonna clear it we'll just send down a

2256
02:01:17,158 --> 02:01:23,759
zero texture and we will set the state

2257
02:01:21,000 --> 02:01:26,340
to load it even though it failed we

2258
02:01:23,760 --> 02:01:29,369
could choose to regress and set that the

2259
02:01:26,340 --> 02:01:36,350
state to unloaded

2260
02:01:29,369 --> 02:01:41,519
I don't know how Squinkie that makes us

2261
02:01:36,350 --> 02:01:52,159
you know but but we certainly could so

2262
02:01:41,520 --> 02:01:52,159
we could say something like final state

2263
02:01:56,899 --> 02:02:03,869
like this and we can say look we're

2264
02:02:01,710 --> 02:02:06,359
gonna assume that we regress to unloaded

2265
02:02:03,869 --> 02:02:09,899
and then if there were no file errors at

2266
02:02:06,359 --> 02:02:20,639
all then we'll say that we regress that

2267
02:02:09,899 --> 02:02:23,609
we progress up to loaded you know we can

2268
02:02:20,639 --> 02:02:26,520
do that the thing that I'm not 100% sure

2269
02:02:23,609 --> 02:02:31,109
about is again how we're gonna exactly

2270
02:02:26,520 --> 02:02:33,150
manage the idea of which texture handles

2271
02:02:31,109 --> 02:02:36,439
are free and which texture handles

2272
02:02:33,149 --> 02:02:39,238
aren't free so that's gonna be a more

2273
02:02:36,439 --> 02:02:44,369
finicky process we'll have to know

2274
02:02:39,238 --> 02:02:45,629
across that bridge let me come to it so

2275
02:02:44,369 --> 02:02:46,948
I must step do that one more time just

2276
02:02:45,630 --> 02:02:48,420
to make sure everything's kosher there

2277
02:02:46,948 --> 02:02:50,099
so you know there's us reading the data

2278
02:02:48,420 --> 02:02:51,750
from the file assuming that we're no

2279
02:02:50,100 --> 02:02:54,719
errors we're gonna set the resulting

2280
02:02:51,750 --> 02:02:57,270
state to loaded otherwise we'll

2281
02:02:54,719 --> 02:03:00,719
aggressive back to unloaded when we do

2282
02:02:57,270 --> 02:03:01,650
our complete texture up that will set

2283
02:03:00,719 --> 02:03:02,908
the state of the text

2284
02:03:01,649 --> 02:03:07,259
up and then we'll set the state of the

2285
02:03:02,908 --> 02:03:09,619
asset at the end and off we go right now

2286
02:03:07,260 --> 02:03:12,060
what I'm not sure about like I said is

2287
02:03:09,619 --> 02:03:13,380
I'm not sure about the thing where we're

2288
02:03:12,060 --> 02:03:15,360
actually okay we're already in debug

2289
02:03:13,380 --> 02:03:17,190
mode so that's good I'm not sure about

2290
02:03:15,359 --> 02:03:19,619
where we're actually going to peel those

2291
02:03:17,189 --> 02:03:21,599
off so I'm gonna look inside went

2292
02:03:19,619 --> 02:03:23,819
through your hand made I'm sorry

2293
02:03:21,600 --> 02:03:25,770
actually just hand made open jail just

2294
02:03:23,819 --> 02:03:27,809
to OpenGL rendering part things I want

2295
02:03:25,770 --> 02:03:29,280
to see what's going on in here I want to

2296
02:03:27,810 --> 02:03:32,460
know what's up with that so when we

2297
02:03:29,279 --> 02:03:34,948
actually get an OP count here when we

2298
02:03:32,460 --> 02:03:37,020
get it ready to transfer you know what's

2299
02:03:34,948 --> 02:03:38,789
going on so if I look at you know what's

2300
02:03:37,020 --> 02:03:41,010
the texture index there's the texture

2301
02:03:38,789 --> 02:03:42,810
index zero this should be that white

2302
02:03:41,010 --> 02:03:46,670
texture that we that you know we

2303
02:03:42,810 --> 02:03:46,670
specified in theory anyway

2304
02:03:46,819 --> 02:03:52,229
let me verify that we're actually

2305
02:03:48,719 --> 02:03:53,429
getting that well you know what I don't

2306
02:03:52,229 --> 02:03:54,988
really care about that I guess not think

2307
02:03:53,429 --> 02:03:58,319
about it let's just look and see what

2308
02:03:54,988 --> 02:04:00,629
happens on the next time around so we

2309
02:03:58,319 --> 02:04:04,979
know we did actually we actually filled

2310
02:04:00,630 --> 02:04:06,960
all 128 elements of the queue on the

2311
02:04:04,979 --> 02:04:10,169
first frame right so we had tons of

2312
02:04:06,960 --> 02:04:11,880
textures coming in so we're stressing it

2313
02:04:10,170 --> 02:04:15,090
in a way that we don't normally stress

2314
02:04:11,880 --> 02:04:17,579
it right or that we didn't in the test

2315
02:04:15,090 --> 02:04:18,810
app it's also I mean so when we get

2316
02:04:17,579 --> 02:04:20,519
something that's ready to transfer let's

2317
02:04:18,810 --> 02:04:23,010
see now we keep going what do we got

2318
02:04:20,520 --> 02:04:25,620
here what's our texture 512 by 512

2319
02:04:23,010 --> 02:04:27,390
that's like that first one we saw it's

2320
02:04:25,619 --> 02:04:30,890
not special so it's gonna just look at

2321
02:04:27,390 --> 02:04:33,539
which texture it was gonna update that I

2322
02:04:30,890 --> 02:04:36,329
don't know we should probably look at

2323
02:04:33,539 --> 02:04:40,850
the data pointer oops

2324
02:04:36,329 --> 02:04:40,850
you know is that is it good data

2325
02:04:48,309 --> 02:04:53,260
no officially this can't view images

2326
02:04:51,279 --> 02:04:58,838
unless you install a plugin hilariously

2327
02:04:53,260 --> 02:05:03,280
I need that I need them Nix lift cos

2328
02:04:58,838 --> 02:05:04,359
debugger that had image viewing in it

2329
02:05:03,279 --> 02:05:05,219
and stuff like that remember it was

2330
02:05:04,359 --> 02:05:11,739
awesome

2331
02:05:05,219 --> 02:05:17,408
anyway so in here that that looks you

2332
02:05:11,738 --> 02:05:20,588
know okay so I'm not 100% certain what

2333
02:05:17,408 --> 02:05:28,858
the issue is because I'm not seeing an

2334
02:05:20,588 --> 02:05:38,559
immediate error there so I'm not sure

2335
02:05:28,859 --> 02:05:41,349
why we have nothing on the screen one

2336
02:05:38,559 --> 02:05:43,479
thing it could be is if I forgot when I

2337
02:05:41,349 --> 02:05:48,128
did my loading to write the text or

2338
02:05:43,479 --> 02:05:50,829
handle back into the asset that might be

2339
02:05:48,128 --> 02:05:53,050
a little too easy so I'm gonna go ahead

2340
02:05:50,828 --> 02:05:55,719
and guess it's not that but I'm going to

2341
02:05:53,050 --> 02:05:57,550
check anyway so in here you know we get

2342
02:05:55,719 --> 02:05:59,859
the texture up and then we produce the

2343
02:05:57,550 --> 02:06:02,109
texture handle but you can see us to

2344
02:05:59,859 --> 02:06:04,749
refer to texture here so then we've got

2345
02:06:02,109 --> 02:06:09,069
the asset and well you know what I'm

2346
02:06:04,748 --> 02:06:10,958
right I mean there's the asset I don't

2347
02:06:09,069 --> 02:06:13,689
know why we're refined in the asset here

2348
02:06:10,958 --> 02:06:17,828
when we already have the asset so that's

2349
02:06:13,689 --> 02:06:22,588
kind of neither here nor there but um so

2350
02:06:17,828 --> 02:06:22,588
that's probably what happened right this

2351
02:06:24,238 --> 02:06:32,918
texture here wants to be set you know

2352
02:06:31,359 --> 02:06:36,219
what I mean

2353
02:06:32,918 --> 02:06:39,578
so we that that is what we needed and we

2354
02:06:36,219 --> 02:06:46,179
weren't doing that so we kind of want to

2355
02:06:39,578 --> 02:06:48,099
make sure that all looks good I'm

2356
02:06:46,179 --> 02:06:52,868
guessing we'll probably have more bugs

2357
02:06:48,099 --> 02:06:56,529
than just that one you know I would be

2358
02:06:52,868 --> 02:06:59,318
surprised but we'll see so you know it

2359
02:06:56,529 --> 02:07:01,448
looks to me like we're at least looting

2360
02:06:59,319 --> 02:07:03,460
basic stuff okay there

2361
02:07:01,448 --> 02:07:08,738
like all of these fonts loaded through

2362
02:07:03,460 --> 02:07:10,029
that path and they look okay so it looks

2363
02:07:08,738 --> 02:07:14,549
like the white texture

2364
02:07:10,029 --> 02:07:17,409
amusingly enough didn't come through so

2365
02:07:14,550 --> 02:07:20,550
hilariously the easiest thing for us to

2366
02:07:17,409 --> 02:07:22,929
download we screwed up

2367
02:07:20,550 --> 02:07:26,170
oops

2368
02:07:22,929 --> 02:07:28,390
so I guess I'll take that vote because

2369
02:07:26,170 --> 02:07:31,029
that's a lot better than the alternative

2370
02:07:28,390 --> 02:07:35,980
so let's debug the white texture why

2371
02:07:31,029 --> 02:07:37,869
didn't that go down properly so here's

2372
02:07:35,979 --> 02:07:40,479
this beginning the texture up on the

2373
02:07:37,869 --> 02:07:43,510
texture op Q we set a one one oh it we

2374
02:07:40,479 --> 02:07:46,000
just didn't set the texture handle so on

2375
02:07:43,510 --> 02:07:49,810
this OP again we want to set that

2376
02:07:46,000 --> 02:07:53,859
texture handle refer to texture and we

2377
02:07:49,810 --> 02:08:03,250
want to do that so again same bug in

2378
02:07:53,859 --> 02:08:09,729
both places what what is the actual

2379
02:08:03,250 --> 02:08:12,340
called err just texture yeah uh so that

2380
02:08:09,729 --> 02:08:14,379
gives us our right back and so that's

2381
02:08:12,340 --> 02:08:17,650
good so now you can see yeah that

2382
02:08:14,380 --> 02:08:20,409
working just fine and so now if I go

2383
02:08:17,649 --> 02:08:22,719
back to the build and turn on optimized

2384
02:08:20,409 --> 02:08:31,779
you know we're we're back in in good

2385
02:08:22,719 --> 02:08:34,810
shape I think yeah so that all works

2386
02:08:31,779 --> 02:08:35,289
just fine it looks like and yeah off we

2387
02:08:34,810 --> 02:08:37,360
go

2388
02:08:35,289 --> 02:08:39,698
so now the last thing that we wanted to

2389
02:08:37,359 --> 02:08:42,309
do as part of this suite of things we're

2390
02:08:39,698 --> 02:08:44,169
not allocating texture handles still we

2391
02:08:42,310 --> 02:08:46,090
just use the pool and when we're out I

2392
02:08:44,170 --> 02:08:48,779
think we just recycle ones and they'll

2393
02:08:46,090 --> 02:08:51,940
just be chaos so we're gonna have to

2394
02:08:48,779 --> 02:08:53,469
make that work for real right we got to

2395
02:08:51,939 --> 02:08:58,389
actually make that code not be

2396
02:08:53,469 --> 02:08:59,619
completely broken um but to end this

2397
02:08:58,390 --> 02:09:03,130
particular stream because we've pretty

2398
02:08:59,619 --> 02:09:04,809
much used up all the time and I will

2399
02:09:03,130 --> 02:09:06,340
undo a little cue Nate I want to do the

2400
02:09:04,810 --> 02:09:09,100
thing that I said I wanted to do with

2401
02:09:06,340 --> 02:09:11,619
the very outset which was allow us to

2402
02:09:09,100 --> 02:09:14,770
re-import and so when you change a file

2403
02:09:11,619 --> 02:09:15,279
just re-import not have to restart the

2404
02:09:14,770 --> 02:09:17,139
app so

2405
02:09:15,279 --> 02:09:18,670
I want to flush those texture handles

2406
02:09:17,139 --> 02:09:21,940
out you know what I mean

2407
02:09:18,670 --> 02:09:23,139
so if we want to do that we now have the

2408
02:09:21,939 --> 02:09:26,529
ability to do that pretty easily

2409
02:09:23,139 --> 02:09:29,469
actually if if I go back into the asset

2410
02:09:26,529 --> 02:09:31,269
and make a really simple way of of

2411
02:09:29,469 --> 02:09:35,559
rotating through the assets so you can

2412
02:09:31,270 --> 02:09:36,909
see here like when we rotate through you

2413
02:09:35,559 --> 02:09:39,969
can see here when we're when we're

2414
02:09:36,908 --> 02:09:42,698
coming through the list when we do the

2415
02:09:39,969 --> 02:09:45,609
free handle account we would just assert

2416
02:09:42,698 --> 02:09:48,839
when we run out and so what I want to do

2417
02:09:45,609 --> 02:09:53,198
is make it so that we will reload assets

2418
02:09:48,840 --> 02:09:55,510
when we when we update a particular

2419
02:09:53,198 --> 02:09:58,928
asset we can say flushes texture handle

2420
02:09:55,510 --> 02:10:02,050
and reload right so what that requires

2421
02:09:58,929 --> 02:10:05,319
of us is we need some way here of saying

2422
02:10:02,050 --> 02:10:08,909
look unload a texture you know flush a

2423
02:10:05,319 --> 02:10:15,670
texture when when when we hit that case

2424
02:10:08,908 --> 02:10:18,848
and so in order to do that I really just

2425
02:10:15,670 --> 02:10:21,609
need yeah I think I just need a thing

2426
02:10:18,849 --> 02:10:23,800
that's like unload you know so we've got

2427
02:10:21,609 --> 02:10:32,799
load bitmap I really just need a thing

2428
02:10:23,800 --> 02:10:37,809
that's like unload bitmap any here it

2429
02:10:32,800 --> 02:10:40,440
would just say look if I can get rid of

2430
02:10:37,809 --> 02:10:40,440
this bitmap

2431
02:10:45,238 --> 02:10:49,348
and in that case what I want to do is I

2432
02:10:47,219 --> 02:10:51,029
want to take it from you know I'm going

2433
02:10:49,349 --> 02:10:53,550
to do basically the symmetric operation

2434
02:10:51,029 --> 02:10:57,630
of this where I take it from loaded to

2435
02:10:53,550 --> 02:11:00,179
unloaded rather than taking it from

2436
02:10:57,630 --> 02:11:02,489
unloaded to loaded so all I'm going to

2437
02:11:00,179 --> 02:11:08,599
do there say look try to change the

2438
02:11:02,488 --> 02:11:16,078
state from loaded to unloaded right

2439
02:11:08,599 --> 02:11:17,788
actually Q I should say so you know it's

2440
02:11:16,078 --> 02:11:20,939
got to be in a loaded State and we got

2441
02:11:17,788 --> 02:11:23,609
to change it to queued okay if it

2442
02:11:20,939 --> 02:11:26,908
actually does if it was queued right if

2443
02:11:23,609 --> 02:11:29,670
it was ready to go then I'm sorry if it

2444
02:11:26,908 --> 02:11:32,879
was loaded to begin with state loaded

2445
02:11:29,670 --> 02:11:34,979
there we go then that means we did in

2446
02:11:32,880 --> 02:11:41,578
fact change it to cubed which means now

2447
02:11:34,979 --> 02:11:45,239
we can change it directly to s at state

2448
02:11:41,578 --> 02:11:48,960
unloaded but not before flushing it's

2449
02:11:45,238 --> 02:11:50,638
texture handle right and so here's where

2450
02:11:48,960 --> 02:11:53,038
we would give the actual texture handle

2451
02:11:50,639 --> 02:12:04,279
back for now we're not even going to do

2452
02:11:53,038 --> 02:12:09,179
that though we're just gonna do this and

2453
02:12:04,279 --> 02:12:10,259
we're not gonna give it back right so

2454
02:12:09,179 --> 02:12:12,029
we're clear the texture handle no

2455
02:12:10,260 --> 02:12:13,860
texture handle yep now we're unloaded

2456
02:12:12,029 --> 02:12:16,498
you can't use it anymore sorry about

2457
02:12:13,859 --> 02:12:17,848
your luck so when we do that unload

2458
02:12:16,498 --> 02:12:19,170
bitmap then you're done and you can't

2459
02:12:17,849 --> 02:12:20,400
use the bitmap anymore and we have to

2460
02:12:19,170 --> 02:12:20,819
load it again if you want to use it

2461
02:12:20,399 --> 02:12:23,129
again

2462
02:12:20,819 --> 02:12:25,799
now what's gonna happen when we come in

2463
02:12:23,130 --> 02:12:28,260
here is again that clear and this state

2464
02:12:25,800 --> 02:12:33,929
change we kind of want those to be a

2465
02:12:28,260 --> 02:12:35,610
little bit more fenced probably again

2466
02:12:33,929 --> 02:12:42,479
not clear that we really care that they

2467
02:12:35,609 --> 02:12:44,189
are but just in case you go

2468
02:12:42,479 --> 02:12:45,630
we just fenced the two of those so we

2469
02:12:44,189 --> 02:12:47,788
can make sure that the clear completes

2470
02:12:45,630 --> 02:12:50,400
before this does so that the processor

2471
02:12:47,788 --> 02:12:52,139
doesn't write them out of order right

2472
02:12:50,399 --> 02:12:55,498
not the processor but the compiler

2473
02:12:52,139 --> 02:12:56,969
doesn't switch the order and so that's

2474
02:12:55,498 --> 02:12:57,898
just keeping the compiler in line there

2475
02:12:56,969 --> 02:13:00,208
so we won't get any

2476
02:12:57,899 --> 02:13:01,289
unexpected reorganizations of the order

2477
02:13:00,208 --> 02:13:02,849
which those things do and the right

2478
02:13:01,288 --> 02:13:05,188
consistency on this platform should make

2479
02:13:02,849 --> 02:13:06,300
that happen now on another platform you

2480
02:13:05,189 --> 02:13:08,909
may have to make that be more stringent

2481
02:13:06,300 --> 02:13:10,918
but right ordering occurs properly on

2482
02:13:08,908 --> 02:13:12,748
Intel so I think you're pretty much just

2483
02:13:10,918 --> 02:13:16,109
good to go you just need a compiler to

2484
02:13:12,748 --> 02:13:17,488
not step in and mess you up um so we

2485
02:13:16,109 --> 02:13:20,069
can't unload a bitmap now which means

2486
02:13:17,488 --> 02:13:23,158
that anytime we change a bitmap we can

2487
02:13:20,069 --> 02:13:26,549
call the flush on it and so what we can

2488
02:13:23,158 --> 02:13:30,118
do there is just say hey yeah if if we

2489
02:13:26,550 --> 02:13:31,649
do an import so on and HHA you know we

2490
02:13:30,118 --> 02:13:35,719
go in there and say alright we're gonna

2491
02:13:31,649 --> 02:13:38,610
update one of these one of these images

2492
02:13:35,719 --> 02:13:40,918
then when it gets that asset out you can

2493
02:13:38,609 --> 02:13:43,259
see it get it here I want to flush the

2494
02:13:40,918 --> 02:13:45,929
bitmap if there was a bitmap loaded

2495
02:13:43,260 --> 02:13:48,599
right so like first things first just

2496
02:13:45,929 --> 02:13:52,288
just unload it like it's gone like get

2497
02:13:48,599 --> 02:13:55,979
rid of it okay so there's the assets

2498
02:13:52,288 --> 02:13:59,158
there's the asset index and so I just

2499
02:13:55,979 --> 02:14:03,479
want to like you know make sure no one

2500
02:13:59,158 --> 02:14:06,348
tries to use the old image for this one

2501
02:14:03,479 --> 02:14:08,189
that we've updated here and I mean

2502
02:14:06,349 --> 02:14:13,559
pretty straightforward

2503
02:14:08,189 --> 02:14:16,260
so I need cheetah to a bitmap id don't

2504
02:14:13,559 --> 02:14:19,979
really care about that I mean because a

2505
02:14:16,260 --> 02:14:21,809
bitmap id just is the asset index we

2506
02:14:19,979 --> 02:14:23,189
probably eventually we should probably

2507
02:14:21,809 --> 02:14:25,199
eventually just get rid of the notion of

2508
02:14:23,189 --> 02:14:27,030
a bitmap ID altogether because it's just

2509
02:14:25,198 --> 02:14:30,089
not actually really all that relevant

2510
02:14:27,029 --> 02:14:32,908
anymore but a little bit of type safety

2511
02:14:30,090 --> 02:14:35,489
there maybe helps sometimes who knows so

2512
02:14:32,908 --> 02:14:40,069
now what we should see is that yeah like

2513
02:14:35,488 --> 02:14:42,328
you know we we run this stuff the HHA

2514
02:14:40,069 --> 02:14:43,978
you know that's got the line through it

2515
02:14:42,328 --> 02:14:45,478
there I want to be able to update it

2516
02:14:43,979 --> 02:14:49,649
let's see

2517
02:14:45,479 --> 02:14:50,878
unload bitmap let's see if we can to can

2518
02:14:49,649 --> 02:14:52,169
make that stuff work it's the last thing

2519
02:14:50,878 --> 02:15:00,179
we do on the stream so let's say I do

2520
02:14:52,168 --> 02:15:05,998
import and save okay that worked but it

2521
02:15:00,179 --> 02:15:07,479
didn't hit my breakpoint did I spell it

2522
02:15:05,998 --> 02:15:14,828
wrong

2523
02:15:07,479 --> 02:15:18,699
I guess it was just because the compiler

2524
02:15:14,828 --> 02:15:21,518
inlined it no.2 sucked up all right well

2525
02:15:18,698 --> 02:15:26,678
hey that's what I wanted right that's

2526
02:15:21,519 --> 02:15:29,739
what I've wanted so now hot loading of

2527
02:15:26,679 --> 02:15:32,288
textures just works and everyone's happy

2528
02:15:29,738 --> 02:15:34,198
so we still need to allocate we need to

2529
02:15:32,288 --> 02:15:42,130
keep a free list for the texture handles

2530
02:15:34,198 --> 02:15:43,238
so you know yeah you get the idea so I

2531
02:15:42,130 --> 02:15:46,538
think we're right where we want to be

2532
02:15:43,238 --> 02:15:50,379
tomorrow which I probably will do a

2533
02:15:46,538 --> 02:15:52,509
stream tomorrow we can go in and fix we

2534
02:15:50,380 --> 02:15:54,670
can now go in and add the save load for

2535
02:15:52,510 --> 02:15:56,409
those align points so but that was

2536
02:15:54,670 --> 02:15:58,449
pretty good that was a grid blitz we got

2537
02:15:56,408 --> 02:15:59,679
all the stuff done I'm pretty happy with

2538
02:15:58,448 --> 02:16:01,299
it so I'm gonna go ahead and go to the

2539
02:15:59,679 --> 02:16:03,510
QA and then I'm gonna go home and go to

2540
02:16:01,300 --> 02:16:03,510
bed

2541
02:16:43,379 --> 02:16:48,639
what is going on in your optimize build

2542
02:16:45,850 --> 02:16:50,500
what do you mean what is going on the

2543
02:16:48,639 --> 02:16:58,389
same thing that's going on in the debug

2544
02:16:50,500 --> 02:17:04,179
build I guess what can you be more

2545
02:16:58,389 --> 02:17:05,829
specific I can't can't say I know by

2546
02:17:04,179 --> 02:17:11,040
that particular question but I can try

2547
02:17:05,829 --> 02:17:11,039
to answer it if you can elaborate

2548
02:17:22,909 --> 02:17:32,968
are you optimizing assets I just want to

2549
02:17:27,148 --> 02:17:38,608
know what it looks like uh so I guess

2550
02:17:32,968 --> 02:17:40,438
what I would say is oh do you mean what

2551
02:17:38,609 --> 02:17:42,469
is the difference between the optimized

2552
02:17:40,439 --> 02:17:49,170
ah

2553
02:17:42,468 --> 02:17:51,299
so really the problem is that the the

2554
02:17:49,170 --> 02:17:57,478
visual studio compiler seems to have a

2555
02:17:51,299 --> 02:18:03,090
lot of trouble with some fairly basic

2556
02:17:57,478 --> 02:18:04,619
stuff and I think I mean I guess I can't

2557
02:18:03,090 --> 02:18:07,049
really say that's true so it's not it's

2558
02:18:04,620 --> 02:18:09,029
fault it's just we have some heavy-duty

2559
02:18:07,049 --> 02:18:11,670
lighting stuff in there that probably

2560
02:18:09,029 --> 02:18:15,659
needs to be algorithm we optimized a bit

2561
02:18:11,670 --> 02:18:18,510
and that's really what is causing that

2562
02:18:15,659 --> 02:18:21,959
difference so if you take a look at the

2563
02:18:18,510 --> 02:18:24,960
debug builds and you look at where the

2564
02:18:21,959 --> 02:18:26,698
time is being spent right so here's the

2565
02:18:24,959 --> 02:18:28,289
difference in frame time right you can

2566
02:18:26,699 --> 02:18:30,989
see it's it's like dramatically

2567
02:18:28,290 --> 02:18:32,849
different right but if you actually look

2568
02:18:30,988 --> 02:18:34,888
at what where that time is going it's

2569
02:18:32,849 --> 02:18:37,558
it's not like the whole build is slower

2570
02:18:34,888 --> 02:18:41,429
it's all just one function it's just

2571
02:18:37,558 --> 02:18:43,318
compute light propagation right so it's

2572
02:18:41,429 --> 02:18:45,290
only the compute light propagation call

2573
02:18:43,318 --> 02:18:49,049
that's actually causing the problem and

2574
02:18:45,290 --> 02:18:51,029
for whatever reason the I don't know

2575
02:18:49,049 --> 02:18:53,009
that I've looked too carefully at what

2576
02:18:51,029 --> 02:18:54,840
the actual difference is but it's

2577
02:18:53,010 --> 02:18:59,909
probably just a case of a lot of

2578
02:18:54,840 --> 02:19:02,699
inlining there's probably like a lot of

2579
02:18:59,909 --> 02:19:05,010
function calls in that code that are

2580
02:19:02,699 --> 02:19:08,040
happening because it's a math heavy code

2581
02:19:05,010 --> 02:19:09,750
and so it's calling actual functions for

2582
02:19:08,040 --> 02:19:11,399
things like adding two vectors together

2583
02:19:09,750 --> 02:19:13,738
instead of just inlining the math ops

2584
02:19:11,398 --> 02:19:17,750
and when you add all of that overhead

2585
02:19:13,738 --> 02:19:20,609
it's like you know way way slower

2586
02:19:17,750 --> 02:19:22,170
because instead of just issuing a couple

2587
02:19:20,609 --> 02:19:23,760
multiplies and a couple adds it's

2588
02:19:22,170 --> 02:19:25,290
actually like setting up a stack calling

2589
02:19:23,760 --> 02:19:26,939
the function returning from the function

2590
02:19:25,290 --> 02:19:29,099
setting up another stack calling the

2591
02:19:26,939 --> 02:19:31,979
function returning the function right so

2592
02:19:29,099 --> 02:19:33,568
you know even though it seems like they

2593
02:19:31,978 --> 02:19:35,698
shouldn't be that different they really

2594
02:19:33,568 --> 02:19:38,179
are because it's such a heavy workload

2595
02:19:35,699 --> 02:19:38,179
loop

2596
02:19:43,699 --> 02:19:52,890
that's really all it is if you want by

2597
02:19:50,488 --> 02:19:56,100
the way for folks who want a moderated

2598
02:19:52,889 --> 02:20:08,389
chat experience TM there is a moderated

2599
02:19:56,100 --> 02:20:08,390
chat that you can go to and it is here

2600
02:20:10,760 --> 02:20:17,699
so you can actually just IRC to the

2601
02:20:15,449 --> 02:20:20,029
moderated chat which is on handmade

2602
02:20:17,699 --> 02:20:20,029
Network

2603
02:20:29,170 --> 02:20:33,350
so MSP C just doesn't do all the

2604
02:20:31,879 --> 02:20:34,578
inlining stuff by default sorry I'm more

2605
02:20:33,350 --> 02:20:42,170
of a web dev and don't get this little

2606
02:20:34,578 --> 02:20:46,010
stuff yeah I mean there are some things

2607
02:20:42,170 --> 02:20:48,590
that are good about what it does and

2608
02:20:46,010 --> 02:20:51,408
some things are that are bad and the way

2609
02:20:48,590 --> 02:20:52,850
that I would explain it so if it you

2610
02:20:51,408 --> 02:20:54,288
know again if you're a web dev and

2611
02:20:52,850 --> 02:20:57,529
you're not used to the low-level stuff

2612
02:20:54,289 --> 02:20:59,869
let me just give you a small example of

2613
02:20:57,529 --> 02:21:03,470
what I mean here in terms of what's

2614
02:20:59,869 --> 02:21:04,970
actually going on right so I let's say I

2615
02:21:03,469 --> 02:21:10,090
want to look at that compute lighting

2616
02:21:04,969 --> 02:21:12,260
compute light propagation call all right

2617
02:21:10,090 --> 02:21:13,850
so here's the compute light propagation

2618
02:21:12,260 --> 02:21:17,180
call we're talking about the actual

2619
02:21:13,850 --> 02:21:20,300
parts of it that matter you know it sets

2620
02:21:17,180 --> 02:21:22,119
up its multi-threaded so it sets up a

2621
02:21:20,299 --> 02:21:24,349
work queue of stuff that needs to happen

2622
02:21:22,119 --> 02:21:26,390
and then the stuff that happens here is

2623
02:21:24,350 --> 02:21:30,470
actually you know it's actually these

2624
02:21:26,389 --> 02:21:33,920
little thread le'ts are sitting there

2625
02:21:30,469 --> 02:21:37,158
doing the work okay and so this is the

2626
02:21:33,920 --> 02:21:39,408
actual majority of what is this is this

2627
02:21:37,158 --> 02:21:45,078
is all the time in our entire app goes

2628
02:21:39,408 --> 02:21:48,590
right here right so you know this is the

2629
02:21:45,078 --> 02:21:52,369
this is the the problem so if you take a

2630
02:21:48,590 --> 02:21:55,728
look at what this code does in the two

2631
02:21:52,369 --> 02:21:57,439
different modes here's a loop that's the

2632
02:21:55,728 --> 02:22:01,099
outer loop and an inner loop with the

2633
02:21:57,439 --> 02:22:02,960
Ray indexes and and so on right if I set

2634
02:22:01,100 --> 02:22:06,170
a breakpoint like right there for

2635
02:22:02,959 --> 02:22:09,948
example just as a place to look and I

2636
02:22:06,170 --> 02:22:13,850
jump to that line of the code here in

2637
02:22:09,949 --> 02:22:15,590
the optimize builds I actually which one

2638
02:22:13,850 --> 02:22:17,960
we're debug build here in the debug

2639
02:22:15,590 --> 02:22:19,850
build if I actually look at what the

2640
02:22:17,959 --> 02:22:22,429
processor were executed so what I've

2641
02:22:19,850 --> 02:22:22,908
done here again if you're unfamiliar

2642
02:22:22,430 --> 02:22:25,130
with it

2643
02:22:22,908 --> 02:22:28,488
what if I'm here is I've just said look

2644
02:22:25,129 --> 02:22:32,448
show me what the CPU is actually going

2645
02:22:28,488 --> 02:22:35,898
to receive as instructions okay then

2646
02:22:32,449 --> 02:22:38,810
what you can see is as we sort of step

2647
02:22:35,898 --> 02:22:41,809
through this code you can see all of the

2648
02:22:38,809 --> 02:22:42,409
things that are going to happen so here

2649
02:22:41,809 --> 02:22:45,619
is

2650
02:22:42,409 --> 02:22:50,479
it loading some of this data out right

2651
02:22:45,620 --> 02:22:52,670
of an array and here is it's starting to

2652
02:22:50,479 --> 02:22:55,729
do some math now what you can see is

2653
02:22:52,670 --> 02:22:58,819
right off the bat it sets up a stack

2654
02:22:55,729 --> 02:23:01,189
frame and okay didn't want to click that

2655
02:22:58,819 --> 02:23:04,279
it's test of a stack frame and right

2656
02:23:01,190 --> 02:23:06,319
here it's actually doing a call right so

2657
02:23:04,280 --> 02:23:08,630
it's actually gonna call out to this

2658
02:23:06,319 --> 02:23:12,079
operator star which is the thing that

2659
02:23:08,629 --> 02:23:14,539
does this multiply okay and that jumps

2660
02:23:12,079 --> 02:23:17,030
me all the way here I've got to set up a

2661
02:23:14,540 --> 02:23:18,590
stack frame for this function so this is

2662
02:23:17,030 --> 02:23:21,561
actually just preparing a stack frame

2663
02:23:18,590 --> 02:23:23,450
here I'm doing this multiply in the

2664
02:23:21,560 --> 02:23:27,170
longest possible way I'm moving things

2665
02:23:23,450 --> 02:23:30,101
in I'm oh it's even worse right we

2666
02:23:27,170 --> 02:23:32,899
implemented this as a series of calls

2667
02:23:30,101 --> 02:23:35,510
themselves so they actually have to do

2668
02:23:32,899 --> 02:23:36,770
calls because this is some Cindy stuff

2669
02:23:35,510 --> 02:23:39,110
that we did it's single instruction

2670
02:23:36,771 --> 02:23:40,940
multiple data I won't go to what that is

2671
02:23:39,110 --> 02:23:44,090
but we actually have two levels oh so we

2672
02:23:40,940 --> 02:23:47,390
got a call again right and then finally

2673
02:23:44,090 --> 02:23:49,069
here is the actual call that's the I'm

2674
02:23:47,390 --> 02:23:50,840
not to call the actual instruction this

2675
02:23:49,069 --> 02:23:52,760
is the only thing we actually wanted to

2676
02:23:50,840 --> 02:23:54,530
execute and look at how many

2677
02:23:52,760 --> 02:23:58,670
instructions we had to plow through

2678
02:23:54,530 --> 02:24:00,920
right it's nuts okay now what does what

2679
02:23:58,670 --> 02:24:03,260
happens if I look at the code that the

2680
02:24:00,920 --> 02:24:05,590
CPU has to execute in the optimized

2681
02:24:03,260 --> 02:24:05,590
build

2682
02:24:11,399 --> 02:24:17,520
so here's the code for the optimized

2683
02:24:13,829 --> 02:24:21,629
build here's this is it one two three

2684
02:24:17,521 --> 02:24:25,079
four five six seven eight nine we're

2685
02:24:21,629 --> 02:24:30,659
already at the mall no calls no nothing

2686
02:24:25,079 --> 02:24:32,579
there's the multiply right so all of

2687
02:24:30,659 --> 02:24:35,039
that crazy stuff you were waiting

2688
02:24:32,579 --> 02:24:37,590
through it's just this this is all you

2689
02:24:35,040 --> 02:24:38,880
were trying to do and now it all happens

2690
02:24:37,590 --> 02:24:40,560
so you can see there's the mall the mall

2691
02:24:38,879 --> 02:24:42,839
the mall the mall the mall all those

2692
02:24:40,560 --> 02:24:44,789
multiplies every single one of those

2693
02:24:42,840 --> 02:24:46,771
multipliers was that giant call stack

2694
02:24:44,790 --> 02:24:48,720
had to happen again it's just so you

2695
02:24:46,771 --> 02:24:55,500
just flooding all of these instructions

2696
02:24:48,719 --> 02:24:58,829
in there and so you know that's just the

2697
02:24:55,500 --> 02:25:00,569
way compilers work they when they're not

2698
02:24:58,829 --> 02:25:03,090
trying to generate optimized code they

2699
02:25:00,569 --> 02:25:05,940
just insert the boilerplate thing you

2700
02:25:03,090 --> 02:25:08,489
would do oh he overloaded operators star

2701
02:25:05,940 --> 02:25:10,590
so call operator star set up a stack

2702
02:25:08,489 --> 02:25:13,229
frame call operator star what does that

2703
02:25:10,590 --> 02:25:14,969
do okay that's another function I'm not

2704
02:25:13,229 --> 02:25:18,359
gonna inline it right I'm not gonna try

2705
02:25:14,969 --> 02:25:20,429
and eliminate redundant reads or

2706
02:25:18,360 --> 02:25:23,010
anything right so that's just how it

2707
02:25:20,430 --> 02:25:24,300
works and I wish there were some ways to

2708
02:25:23,010 --> 02:25:27,329
get around that like I wish you could

2709
02:25:24,299 --> 02:25:29,699
say look this is just some syntactic

2710
02:25:27,329 --> 02:25:31,469
sugar just replace it always I don't

2711
02:25:29,700 --> 02:25:35,220
ever want you to actually call this

2712
02:25:31,469 --> 02:25:39,060
thing like just you know insert the mole

2713
02:25:35,219 --> 02:25:39,799
directly we don't really have tools for

2714
02:25:39,060 --> 02:25:42,449
doing that

2715
02:25:39,799 --> 02:25:44,600
so either you turn on inlining or you

2716
02:25:42,450 --> 02:25:44,601
don't

2717
02:25:51,318 --> 02:25:55,590
newbee question wouldn't inlining every

2718
02:25:53,728 --> 02:25:56,578
function call speeds things up does the

2719
02:25:55,590 --> 02:25:59,850
compiler do that when you turn

2720
02:25:56,578 --> 02:26:04,500
optimizations on No

2721
02:25:59,850 --> 02:26:07,770
so actually in lining a function is is

2722
02:26:04,500 --> 02:26:16,398
not always a win in lining a function is

2723
02:26:07,770 --> 02:26:20,130
only a win in certain circumstances so

2724
02:26:16,398 --> 02:26:21,689
what you have to remember is that code

2725
02:26:20,129 --> 02:26:25,849
doesn't magically appear out of thin air

2726
02:26:21,689 --> 02:26:30,270
it has to come from somewhere right so

2727
02:26:25,850 --> 02:26:31,859
inside the the processor there's a

2728
02:26:30,270 --> 02:26:34,738
number of things that have to happen in

2729
02:26:31,859 --> 02:26:36,619
order to execute an instruction and the

2730
02:26:34,738 --> 02:26:40,948
number one thing that has to happen as

2731
02:26:36,619 --> 02:26:43,078
silly as it is to say is it has to know

2732
02:26:40,949 --> 02:26:45,239
what the instruction is right I mean

2733
02:26:43,078 --> 02:26:46,619
it's got to know what the instruction

2734
02:26:45,238 --> 02:26:50,609
you're trying to execute is before it

2735
02:26:46,619 --> 02:26:51,479
can execute it so logical question where

2736
02:26:50,609 --> 02:26:53,789
did it come from

2737
02:26:51,478 --> 02:26:55,709
well the answer is that inside the

2738
02:26:53,789 --> 02:26:58,380
processor it has a set of registers and

2739
02:26:55,709 --> 02:26:59,818
one of those registers says where the to

2740
02:26:58,379 --> 02:27:04,978
get the next instruction from it's

2741
02:26:59,818 --> 02:27:07,859
called our IP right and that address is

2742
02:27:04,978 --> 02:27:10,858
the location that it needs to read the

2743
02:27:07,859 --> 02:27:12,600
next instruction from right now you may

2744
02:27:10,859 --> 02:27:14,430
already know this but it's important to

2745
02:27:12,600 --> 02:27:16,050
mention it again because it sets up the

2746
02:27:14,430 --> 02:27:21,300
reason why you don't always want to

2747
02:27:16,049 --> 02:27:23,038
inline things okay so if the processor

2748
02:27:21,299 --> 02:27:26,938
has to fetch the instruction from there

2749
02:27:23,039 --> 02:27:29,460
well what do we know about processors

2750
02:27:26,939 --> 02:27:31,318
fetching things they have to actually

2751
02:27:29,459 --> 02:27:34,259
get them out of the memory of the

2752
02:27:31,318 --> 02:27:36,420
computer right and we know that the

2753
02:27:34,260 --> 02:27:39,210
memory of the computer is not as simple

2754
02:27:36,420 --> 02:27:42,299
as just saying oh I go and get it and

2755
02:27:39,209 --> 02:27:43,618
it's fine right there's a whole host of

2756
02:27:42,299 --> 02:27:45,988
things that have to happen there and

2757
02:27:43,619 --> 02:27:49,319
some of them can be very slow main

2758
02:27:45,988 --> 02:27:51,809
memory on a processor is very slow if I

2759
02:27:49,318 --> 02:27:54,988
had to go all the way out to main memory

2760
02:27:51,809 --> 02:27:57,180
and all the way back every time just to

2761
02:27:54,988 --> 02:28:00,270
find out what the next instruction would

2762
02:27:57,180 --> 02:28:05,189
be processors would run about 300 times

2763
02:28:00,270 --> 02:28:08,220
slower or worse right so we can't do

2764
02:28:05,189 --> 02:28:09,479
that so what we do is the same thing the

2765
02:28:08,219 --> 02:28:12,510
processor does the same thing it would

2766
02:28:09,478 --> 02:28:15,358
do with data it has caches right

2767
02:28:12,510 --> 02:28:18,090
it has caches so instead of just main

2768
02:28:15,359 --> 02:28:20,818
memory it has these caches and one of

2769
02:28:18,090 --> 02:28:22,949
the caches is called the eye cash and

2770
02:28:20,818 --> 02:28:23,609
that cash is responsible restoring

2771
02:28:22,949 --> 02:28:27,630
instructions

2772
02:28:23,609 --> 02:28:30,630
it's an l1 cache so there's a data side

2773
02:28:27,629 --> 02:28:32,519
and an instruction side of your l1 cache

2774
02:28:30,629 --> 02:28:34,920
you know what this is right

2775
02:28:32,520 --> 02:28:38,578
hopefully I'm not I'm not using terms

2776
02:28:34,920 --> 02:28:40,709
that are super out to lunch here but you

2777
02:28:38,578 --> 02:28:42,869
know just like I said web dev I don't

2778
02:28:40,709 --> 02:28:44,999
know what the stuff is that you would

2779
02:28:42,869 --> 02:28:49,350
necessarily know but you know when you

2780
02:28:44,998 --> 02:28:52,219
go to buy a processor right when you go

2781
02:28:49,350 --> 02:28:55,229
to buy one of these they've got specs

2782
02:28:52,219 --> 02:28:57,059
you know and we looked at this the other

2783
02:28:55,228 --> 02:28:58,078
just just maybe even this morning I

2784
02:28:57,059 --> 02:29:00,868
don't even remember when we looked at it

2785
02:28:58,078 --> 02:29:04,260
but was recently um they got caches

2786
02:29:00,869 --> 02:29:06,930
right and these caches are faster memory

2787
02:29:04,260 --> 02:29:09,510
that's closer to the processor and

2788
02:29:06,930 --> 02:29:12,600
easier for it to access right so here

2789
02:29:09,510 --> 02:29:14,609
they are you've got an l3 cache that's

2790
02:29:12,600 --> 02:29:16,619
the biggest cash it's closest to main

2791
02:29:14,609 --> 02:29:18,328
memory furthest from the CPU it's the

2792
02:29:16,619 --> 02:29:20,359
slowest one of the caches but still

2793
02:29:18,328 --> 02:29:24,568
faster than memory got the l2 cache

2794
02:29:20,359 --> 02:29:26,578
smaller only one megabyte right total

2795
02:29:24,568 --> 02:29:30,658
and these are divided per core so it's

2796
02:29:26,578 --> 02:29:31,978
actually 256 K one for each of the four

2797
02:29:30,658 --> 02:29:32,689
cores but you don't have to think about

2798
02:29:31,978 --> 02:29:35,129
that right now

2799
02:29:32,689 --> 02:29:36,720
then we got the l1 cache and that's

2800
02:29:35,129 --> 02:29:40,379
split into two halves once for

2801
02:29:36,719 --> 02:29:44,179
instructions once for data okay now look

2802
02:29:40,379 --> 02:29:47,608
at how tiny this instruction cache is

2803
02:29:44,180 --> 02:29:51,029
each of my cores each of my four cores

2804
02:29:47,609 --> 02:29:53,010
on this chip and I 777 okay a good chip

2805
02:29:51,029 --> 02:29:55,699
is an expensive chip so they're not

2806
02:29:53,010 --> 02:30:00,889
skimping on the on the cache here

2807
02:29:55,699 --> 02:30:08,239
it only has 32 K of instruction cache

2808
02:30:00,889 --> 02:30:11,608
only 3 2 K so what does that mean well

2809
02:30:08,238 --> 02:30:13,379
when we need to fetch an instruction we

2810
02:30:11,609 --> 02:30:15,689
don't want to go to main memory so what

2811
02:30:13,379 --> 02:30:18,818
the processor first does is it looks at

2812
02:30:15,689 --> 02:30:20,918
what's in the eye cache if

2813
02:30:18,818 --> 02:30:23,889
the next instruction is in the I cache

2814
02:30:20,918 --> 02:30:25,748
it runs it if it's not in the I cache

2815
02:30:23,889 --> 02:30:27,668
whoo boy we're in trouble

2816
02:30:25,748 --> 02:30:30,578
now we have to sit around and the

2817
02:30:27,668 --> 02:30:32,828
processor just has to stall until it can

2818
02:30:30,578 --> 02:30:36,908
actually get an answer from either the

2819
02:30:32,828 --> 02:30:45,488
l2 cache the l3 cache or god forbid main

2820
02:30:36,908 --> 02:30:48,788
memory right so if you want your code to

2821
02:30:45,488 --> 02:30:52,838
run quickly it is absolutely critical

2822
02:30:48,789 --> 02:30:56,199
that the hot loops of your code remain

2823
02:30:52,838 --> 02:30:58,600
inside the I cache you under no

2824
02:30:56,199 --> 02:31:02,020
circumstances want to have to be

2825
02:30:58,600 --> 02:31:05,800
spending time waiting for instructions

2826
02:31:02,020 --> 02:31:08,379
to come in that's exactly what will

2827
02:31:05,799 --> 02:31:10,478
happen if you inlined

2828
02:31:08,379 --> 02:31:12,729
everything in your code because now

2829
02:31:10,478 --> 02:31:14,588
every single thing you do just gets

2830
02:31:12,728 --> 02:31:16,679
bigger and bigger and bigger and bigger

2831
02:31:14,588 --> 02:31:19,779
and bigger size-wise

2832
02:31:16,680 --> 02:31:22,270
so the I cache this tiny little I cache

2833
02:31:19,779 --> 02:31:24,279
and then the l2 cache as well and the l3

2834
02:31:22,270 --> 02:31:26,709
cache all of those start to just get

2835
02:31:24,279 --> 02:31:29,439
blown all the time they can't keep your

2836
02:31:26,709 --> 02:31:30,939
code in it your code is so huge and

2837
02:31:29,439 --> 02:31:33,039
you're running through so much of it

2838
02:31:30,939 --> 02:31:36,970
that you're constantly waiting on I

2839
02:31:33,039 --> 02:31:38,560
cache fills right and it gets worse not

2840
02:31:36,969 --> 02:31:42,519
only just waiting to fill the I cache

2841
02:31:38,559 --> 02:31:45,519
hurt you the l2 and l3 are shared caches

2842
02:31:42,520 --> 02:31:48,729
so the data the actual data that you're

2843
02:31:45,520 --> 02:31:50,260
waiting on that data you're loading not

2844
02:31:48,728 --> 02:31:52,510
the instructions but the data you're

2845
02:31:50,260 --> 02:31:54,908
trying to operate on it's getting

2846
02:31:52,510 --> 02:31:58,418
evicted from the l2 and l3 caches to

2847
02:31:54,908 --> 02:32:00,760
make room for your code right so the

2848
02:31:58,418 --> 02:32:03,029
more code you have the worse off you are

2849
02:32:00,760 --> 02:32:07,180
for performance you want your code to be

2850
02:32:03,029 --> 02:32:10,629
absolutely as tiny as possible so the

2851
02:32:07,180 --> 02:32:12,789
actual answer is if possible you want to

2852
02:32:10,629 --> 02:32:15,249
minimize how many functions you in line

2853
02:32:12,789 --> 02:32:19,029
and so the only time you really want to

2854
02:32:15,248 --> 02:32:22,029
actually in line calls is when it's so

2855
02:32:19,029 --> 02:32:25,869
time critical and you can save so many

2856
02:32:22,029 --> 02:32:29,078
instructions that that bloat is worth it

2857
02:32:25,869 --> 02:32:32,229
right and in this case what you can see

2858
02:32:29,078 --> 02:32:32,739
is you can also save code size sometimes

2859
02:32:32,228 --> 02:32:34,989
by

2860
02:32:32,739 --> 02:32:38,079
inlining if a lot of what the inline

2861
02:32:34,989 --> 02:32:40,209
function was doing was boilerplate so if

2862
02:32:38,079 --> 02:32:42,309
it was really a meaningless function and

2863
02:32:40,209 --> 02:32:44,469
it's just like one line of code in

2864
02:32:42,309 --> 02:32:46,239
lining it actually saves code space

2865
02:32:44,469 --> 02:32:48,279
potentially because the amount of work

2866
02:32:46,239 --> 02:32:50,409
necessary to set up the call and finish

2867
02:32:48,280 --> 02:32:52,810
the call is more than if you just done

2868
02:32:50,409 --> 02:32:54,850
the instructions that's a no-brainer

2869
02:32:52,809 --> 02:32:58,260
and so when the compiler sees that it

2870
02:32:54,850 --> 02:33:01,479
will inline it pretty much automatically

2871
02:32:58,260 --> 02:33:03,819
but when the functions are larger in

2872
02:33:01,478 --> 02:33:06,699
linings not so good it's worth spending

2873
02:33:03,819 --> 02:33:08,799
that boilerplate love those few calls on

2874
02:33:06,700 --> 02:33:11,140
the top and the bottom to jump into a

2875
02:33:08,799 --> 02:33:12,759
large function because you don't want to

2876
02:33:11,139 --> 02:33:16,680
be duplicating that everywhere it's

2877
02:33:12,760 --> 02:33:16,680
called does that make sense

2878
02:33:20,129 --> 02:33:23,789
hopefully that makes sense

2879
02:33:41,049 --> 02:33:47,920
and by the way it's worth noting that

2880
02:33:46,299 --> 02:33:52,988
the compiler is generally the thing that

2881
02:33:47,920 --> 02:33:55,328
makes the inlining assumption so I'll

2882
02:33:52,988 --> 02:34:00,879
just close on a couple brief points and

2883
02:33:55,328 --> 02:34:02,709
then we'll wrap up the stream if you put

2884
02:34:00,879 --> 02:34:04,719
in line in front of a function it

2885
02:34:02,709 --> 02:34:06,759
doesn't matter the compiler doesn't care

2886
02:34:04,719 --> 02:34:08,938
if you told it to inline it the compiler

2887
02:34:06,760 --> 02:34:12,130
will decide to inline it or not itself

2888
02:34:08,939 --> 02:34:14,170
so whether you put in line in front of

2889
02:34:12,129 --> 02:34:15,879
something or or not it's not gonna

2890
02:34:14,170 --> 02:34:18,158
change whether it's inline on most

2891
02:34:15,879 --> 02:34:20,920
modern compilers maybe in the old days

2892
02:34:18,158 --> 02:34:22,719
it would have it doesn't now so there

2893
02:34:20,920 --> 02:34:23,799
are some things you can do to forcing

2894
02:34:22,719 --> 02:34:26,318
about inline sometimes there's like a

2895
02:34:23,799 --> 02:34:30,278
force inline keyword the compiler

2896
02:34:26,318 --> 02:34:33,549
defines specific to the compiler and if

2897
02:34:30,279 --> 02:34:35,078
you do that it will inline it and the

2898
02:34:33,549 --> 02:34:36,788
other thing you can do is just you

2899
02:34:35,078 --> 02:34:40,750
manually inline it you may only cut and

2900
02:34:36,789 --> 02:34:43,510
paste the code in right and so what I

2901
02:34:40,750 --> 02:34:45,939
would say is generally speaking let the

2902
02:34:43,510 --> 02:34:47,920
compiler make the decision it will make

2903
02:34:45,939 --> 02:34:50,529
a reasonable decision in the average

2904
02:34:47,920 --> 02:34:53,439
case so just let it do it

2905
02:34:50,529 --> 02:34:56,229
don't try to manhandle it just mark

2906
02:34:53,439 --> 02:34:58,479
while your code is static or nothing

2907
02:34:56,228 --> 02:35:00,728
don't bother putting inline on it it

2908
02:34:58,478 --> 02:35:02,738
doesn't matter it's not gonna matter let

2909
02:35:00,728 --> 02:35:04,719
the compiler do its thing when you're

2910
02:35:02,738 --> 02:35:06,908
actually working on the most important

2911
02:35:04,719 --> 02:35:09,459
loops of your code when it comes time to

2912
02:35:06,908 --> 02:35:11,379
really hand optimize though just move

2913
02:35:09,459 --> 02:35:13,750
the code that you want in yourself don't

2914
02:35:11,379 --> 02:35:15,599
rely on the inlining and you're gonna

2915
02:35:13,750 --> 02:35:18,568
want to organize that stuff yourself

2916
02:35:15,600 --> 02:35:21,818
only for your very most important loops

2917
02:35:18,568 --> 02:35:23,709
that's generally what happens and you're

2918
02:35:21,818 --> 02:35:25,359
gonna want to be doing that in the

2919
02:35:23,709 --> 02:35:27,578
context of profiling so you make sure

2920
02:35:25,359 --> 02:35:28,720
you're not making a mistake by moving

2921
02:35:27,578 --> 02:35:31,209
something in that should have stayed

2922
02:35:28,719 --> 02:35:32,920
outside again because knowing if you're

2923
02:35:31,209 --> 02:35:35,469
blowing the I cache or things like that

2924
02:35:32,920 --> 02:35:38,170
you can't tell that without getting

2925
02:35:35,469 --> 02:35:40,090
profiler data back either looking at

2926
02:35:38,170 --> 02:35:41,770
performance counters or seeing if

2927
02:35:40,090 --> 02:35:44,380
something gets slower faster and so on

2928
02:35:41,770 --> 02:35:45,699
and so you at least need to put timing

2929
02:35:44,379 --> 02:35:48,309
blocks around your code and look at

2930
02:35:45,699 --> 02:35:49,779
those results to know whether you're

2931
02:35:48,309 --> 02:35:52,328
making a difference there don't just

2932
02:35:49,779 --> 02:35:54,189
guess if it's a critical loop don't just

2933
02:35:52,328 --> 02:35:54,619
go add an O in lines probably better and

2934
02:35:54,189 --> 02:35:58,790
I in line

2935
02:35:54,620 --> 02:36:02,561
like like figure it out right by by

2936
02:35:58,790 --> 02:36:02,561
making good timing testbed in check

2937
02:36:09,430 --> 02:36:13,859
so alright I'm gonna close it down

2938
02:36:25,369 --> 02:36:28,560
thank you for joining me for the episode

2939
02:36:27,449 --> 02:36:31,498
of handmade hero sort of pleasure

2940
02:36:28,559 --> 02:36:33,238
cutting with you as always I love those

2941
02:36:31,498 --> 02:36:37,708
asset system changes oh it's so much

2942
02:36:33,238 --> 02:36:38,759
simpler now it's great we'll reuse the

2943
02:36:37,709 --> 02:36:41,249
texture handles maybe I'll do that

2944
02:36:38,759 --> 02:36:42,328
tomorrow because that's not that hard so

2945
02:36:41,248 --> 02:36:43,770
we'll go ahead and throw that in there

2946
02:36:42,328 --> 02:36:45,208
and then we're pretty good to go we can

2947
02:36:43,770 --> 02:36:48,029
play with the sound loading maybe we'll

2948
02:36:45,209 --> 02:36:49,499
put sounds back in tomorrow and we'll

2949
02:36:48,029 --> 02:36:52,350
actually start playing sounds that

2950
02:36:49,498 --> 02:36:54,600
sounds like a good idea too we got so

2951
02:36:52,350 --> 02:36:55,979
much cool stuff to do we'll put the

2952
02:36:54,600 --> 02:36:57,719
saving in we got tons of stuff

2953
02:36:55,978 --> 02:36:59,038
tomorrow's gonna be fun I'm looking

2954
02:36:57,718 --> 02:37:01,408
forward to it

2955
02:36:59,039 --> 02:37:03,209
no no one will do it whenever I get a

2956
02:37:01,408 --> 02:37:06,059
chance my schedules been kind of crazy

2957
02:37:03,209 --> 02:37:07,409
lately so we'll see but thank you for

2958
02:37:06,059 --> 02:37:08,908
joining me if you want to follow along

2959
02:37:07,408 --> 02:37:10,288
series at home of course as always if

2960
02:37:08,908 --> 02:37:11,968
you want to you can pre-order the game

2961
02:37:10,289 --> 02:37:14,338
on handmade here or get comes all the

2962
02:37:11,968 --> 02:37:16,078
source code right now so you can go

2963
02:37:14,338 --> 02:37:17,338
ahead and play around with it if you

2964
02:37:16,078 --> 02:37:18,119
want to try experimenting with the sort

2965
02:37:17,338 --> 02:37:20,548
of stuff we're talking about in the

2966
02:37:18,119 --> 02:37:21,930
series that's about it

2967
02:37:20,549 --> 02:37:23,399
hope to see you back here for the next

2968
02:37:21,930 --> 02:37:25,738
surprise dream I will post schedule

2969
02:37:23,398 --> 02:37:26,878
sometime soon until then have fun

2970
02:37:25,738 --> 02:37:30,109
programming and I'll see you everyone on

2971
02:37:26,879 --> 02:37:30,109
the Internet take it easy everybody

