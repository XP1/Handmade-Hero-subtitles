1
00:00:00,000 --> 00:00:04,318
stop recording start recording hello

2
00:00:02,638 --> 00:00:06,059
everyone and welcome to handmade Hero

3
00:00:04,318 --> 00:00:10,589
the show where we code a complete game

4
00:00:06,059 --> 00:00:11,879
live on stream if you are somebody who

5
00:00:10,589 --> 00:00:14,548
pre-ordered the game and falls along

6
00:00:11,880 --> 00:00:17,130
with the source code today is day 206 so

7
00:00:14,548 --> 00:00:19,079
you wanna unpack day 205 source code

8
00:00:17,129 --> 00:00:21,629
into a directory that is the source code

9
00:00:19,079 --> 00:00:23,038
that I am starting with now and that is

10
00:00:21,629 --> 00:00:24,750
the source code that you would want to

11
00:00:23,039 --> 00:00:27,630
start with if you want to follow along

12
00:00:24,750 --> 00:00:31,618
with me so grab that out of the source

13
00:00:27,629 --> 00:00:35,070
code zip and yeah and then you can code

14
00:00:31,618 --> 00:00:38,009
along so where we left things the other

15
00:00:35,070 --> 00:00:40,710
day I was kind of thinking we were

16
00:00:38,009 --> 00:00:42,030
talking about this a bit and you know

17
00:00:40,710 --> 00:00:43,620
where we left things the other day I was

18
00:00:42,030 --> 00:00:45,058
talking about well we built this sort of

19
00:00:43,619 --> 00:00:46,649
debug stuff and we've got a little bit

20
00:00:45,058 --> 00:00:51,229
more stuff to do on it but I kind of

21
00:00:46,649 --> 00:00:54,359
wanted a way to to sort of show like I

22
00:00:51,229 --> 00:00:55,619
wanted a way to to sort of show entity

23
00:00:54,359 --> 00:00:57,179
data and we made this little thing where

24
00:00:55,619 --> 00:00:58,589
we could pick entities you know with the

25
00:00:57,179 --> 00:01:00,869
mouse we could kind of move over them

26
00:00:58,590 --> 00:01:02,940
all of our weird you know a little torso

27
00:01:00,869 --> 00:01:05,368
person or the little hero and whatever

28
00:01:02,939 --> 00:01:07,530
you know else is going on so we've got

29
00:01:05,368 --> 00:01:09,209
all that stuff and we wanted to be able

30
00:01:07,530 --> 00:01:10,618
to show like enemy data so maybe I could

31
00:01:09,209 --> 00:01:12,929
like select that entity and just see

32
00:01:10,618 --> 00:01:15,359
like what its state was because as we

33
00:01:12,930 --> 00:01:16,350
move into coding like game logic systems

34
00:01:15,359 --> 00:01:18,299
and stuff like that

35
00:01:16,349 --> 00:01:20,699
we're undoubtedly going to have a bunch

36
00:01:18,299 --> 00:01:23,070
of scenarios where we don't know why

37
00:01:20,700 --> 00:01:25,280
Andy's doing something right and we're

38
00:01:23,069 --> 00:01:28,279
gonna want to like be able to inspect it

39
00:01:25,280 --> 00:01:31,290
right and so where we left off yesterday

40
00:01:28,280 --> 00:01:33,719
was I kind of said well let's figure out

41
00:01:31,290 --> 00:01:36,930
a way to sort of dump that entity data

42
00:01:33,719 --> 00:01:40,769
and so what we what we did is I sort of

43
00:01:36,930 --> 00:01:42,990
put in what I kind of wanted to be like

44
00:01:40,769 --> 00:01:46,438
how that would look right I wanted to do

45
00:01:42,989 --> 00:01:49,109
something like this right where I sort

46
00:01:46,438 --> 00:01:50,819
of say hey diva you know begin the thing

47
00:01:49,109 --> 00:01:53,849
that we're talking about output these

48
00:01:50,819 --> 00:01:56,398
values and then end right and I kind of

49
00:01:53,849 --> 00:01:58,319
wanted that to just be you know autumn I

50
00:01:56,399 --> 00:01:59,759
wanted that to just be all we would have

51
00:01:58,319 --> 00:02:02,250
to type and then all that stuff would

52
00:01:59,759 --> 00:02:03,959
come out automatically in the debug UI

53
00:02:02,250 --> 00:02:06,170
system and you know we wouldn't have to

54
00:02:03,959 --> 00:02:09,389
fuss with it or anything else like that

55
00:02:06,170 --> 00:02:12,030
and so there's a couple things that you

56
00:02:09,389 --> 00:02:13,709
know we could do regarding that and I

57
00:02:12,030 --> 00:02:15,300
was trying to think of since this is f3

58
00:02:13,710 --> 00:02:16,950
three Mathon and we wanted to kind of

59
00:02:15,300 --> 00:02:18,990
maybe do something a little bit

60
00:02:16,949 --> 00:02:21,119
self-contained for that I thought that

61
00:02:18,990 --> 00:02:23,490
maybe since people ask me about this all

62
00:02:21,120 --> 00:02:27,270
the time on handmade hero like all all

63
00:02:23,490 --> 00:02:29,730
all the time right about how to do like

64
00:02:27,270 --> 00:02:31,260
metaprogramming stuff and it's not

65
00:02:29,729 --> 00:02:33,149
really something we're gonna get to in

66
00:02:31,259 --> 00:02:34,500
handy here much I thought I thought

67
00:02:33,150 --> 00:02:36,240
maybe what we do for the Deaf stream is

68
00:02:34,500 --> 00:02:37,560
on since handmade here at any of our

69
00:02:36,240 --> 00:02:38,909
code heavy stream and I don't want to

70
00:02:37,560 --> 00:02:40,949
give people the wrong impression

71
00:02:38,909 --> 00:02:43,829
I figured we do a very code heavy thing

72
00:02:40,949 --> 00:02:46,619
and maybe I'll show you how to make this

73
00:02:43,830 --> 00:02:49,740
process automated so if you look and

74
00:02:46,620 --> 00:02:53,219
you're going here to handmade sim region

75
00:02:49,740 --> 00:02:57,360
for example we have a thing where we've

76
00:02:53,219 --> 00:03:00,479
got this sim entity and you can see

77
00:02:57,360 --> 00:03:02,220
looking at the sim entity right you can

78
00:03:00,479 --> 00:03:03,899
kind of see that it's got all of these

79
00:03:02,219 --> 00:03:05,849
things in it it was this is our test

80
00:03:03,900 --> 00:03:07,379
enemy right that we made when we were

81
00:03:05,849 --> 00:03:08,310
kind of getting our simulation systems

82
00:03:07,379 --> 00:03:09,750
up and running and all that sort of

83
00:03:08,310 --> 00:03:11,729
stuff and it's just got all this stuff

84
00:03:09,750 --> 00:03:14,069
in there and in order to output it to

85
00:03:11,729 --> 00:03:16,469
the debug system I have to type all this

86
00:03:14,069 --> 00:03:18,090
stuff in manually right and what that

87
00:03:16,469 --> 00:03:20,129
means is every time I change something

88
00:03:18,090 --> 00:03:22,710
in here I have to go change it in here

89
00:03:20,129 --> 00:03:25,379
as well and it's just kind of a pain

90
00:03:22,710 --> 00:03:27,060
right so what I thought I'd do is just

91
00:03:25,379 --> 00:03:29,609
show you if you didn't want to do that

92
00:03:27,060 --> 00:03:33,569
how would I make a very simple basic

93
00:03:29,610 --> 00:03:36,000
system that would add to C++ what the

94
00:03:33,569 --> 00:03:38,250
Standards Committee somehow in 30 years

95
00:03:36,000 --> 00:03:39,449
never managed to actually add even

96
00:03:38,250 --> 00:03:40,889
though it's like the most obvious thing

97
00:03:39,449 --> 00:03:43,019
you would ever add to a programming

98
00:03:40,889 --> 00:03:48,059
language if you ever programmed a

99
00:03:43,020 --> 00:03:49,350
program in your life introspection so if

100
00:03:48,060 --> 00:03:50,550
we wanted to introspect something I'm

101
00:03:49,349 --> 00:03:52,019
just going to show you how to do that

102
00:03:50,550 --> 00:03:55,740
I'll try to get it done in an hour it's

103
00:03:52,020 --> 00:03:57,930
a bit of a big thing to to sort of put

104
00:03:55,740 --> 00:03:59,100
out there but I'll give it a shot I know

105
00:03:57,930 --> 00:04:00,480
it's something people have asked about a

106
00:03:59,099 --> 00:04:02,009
lot and so let's just do it

107
00:04:00,479 --> 00:04:03,449
so in order to do that what we're going

108
00:04:02,009 --> 00:04:06,629
to need is we're going to need a program

109
00:04:03,449 --> 00:04:09,659
that we can run that will sort of you

110
00:04:06,629 --> 00:04:11,609
know take a look at our at our files

111
00:04:09,659 --> 00:04:13,530
here and output something we can use

112
00:04:11,610 --> 00:04:16,020
that looks kind of like this right and

113
00:04:13,530 --> 00:04:17,970
so that's you know we're gonna need like

114
00:04:16,019 --> 00:04:19,409
a little utility and in order to make a

115
00:04:17,970 --> 00:04:21,239
little utility that shouldn't be too

116
00:04:19,410 --> 00:04:22,590
much of a big deal I'll just make a

117
00:04:21,238 --> 00:04:25,859
thing in here which is just going to be

118
00:04:22,589 --> 00:04:27,029
like you know you know simple

119
00:04:25,860 --> 00:04:28,860
preprocessor or something

120
00:04:27,029 --> 00:04:31,138
like this right it's just going to be

121
00:04:28,860 --> 00:04:32,730
our little simple preprocessor see and

122
00:04:31,139 --> 00:04:34,650
again this is something that you can

123
00:04:32,730 --> 00:04:37,139
just feel free to use whatever you want

124
00:04:34,649 --> 00:04:39,089
for because like I said on handmade Hiro

125
00:04:37,139 --> 00:04:40,800
the proper the engine

126
00:04:39,089 --> 00:04:43,229
we don't use any libraries or anything

127
00:04:40,800 --> 00:04:45,990
like that we write everything from

128
00:04:43,230 --> 00:04:47,910
scratch but for this you know it does

129
00:04:45,990 --> 00:04:50,280
not matter so I'm totally fine with you

130
00:04:47,910 --> 00:04:52,169
just using anything you want to use here

131
00:04:50,279 --> 00:04:54,388
right so I'm gonna just say let's say

132
00:04:52,168 --> 00:04:57,180
you used a standard i/o or whatever to

133
00:04:54,389 --> 00:04:58,829
do file read and write because that way

134
00:04:57,180 --> 00:05:00,540
it'll work everywhere and we don't care

135
00:04:58,829 --> 00:05:02,189
about learning how to do that we already

136
00:05:00,540 --> 00:05:04,260
show it on handmade hero how to load

137
00:05:02,189 --> 00:05:06,509
files and whatever else right

138
00:05:04,259 --> 00:05:08,668
so using that I'll show you how to build

139
00:05:06,509 --> 00:05:09,839
the rest of the stuff from scratch and

140
00:05:08,668 --> 00:05:11,969
of course if you want to do this

141
00:05:09,839 --> 00:05:13,560
entirely from scratch yourself you can

142
00:05:11,970 --> 00:05:15,930
always just instead use the file

143
00:05:13,560 --> 00:05:17,370
routines that we use in handmade hero or

144
00:05:15,930 --> 00:05:18,780
something like that but I don't really

145
00:05:17,370 --> 00:05:23,728
want to bother reporting them out here

146
00:05:18,779 --> 00:05:27,449
at the moment right well I mean I guess

147
00:05:23,728 --> 00:05:29,219
now that I think about it well now I

148
00:05:27,449 --> 00:05:30,659
won't I'll just do it this way I always

149
00:05:29,220 --> 00:05:31,950
had this tendency to let go like well

150
00:05:30,660 --> 00:05:32,550
why not just not do it because we've got

151
00:05:31,949 --> 00:05:34,289
them already there

152
00:05:32,550 --> 00:05:35,579
forget about it let's write him this way

153
00:05:34,290 --> 00:05:37,410
it'll be fine

154
00:05:35,579 --> 00:05:40,769
I'll get over it it doesn't matter

155
00:05:37,410 --> 00:05:42,510
alright anyway so here we go with a

156
00:05:40,769 --> 00:05:44,038
totally standard C program so everyone's

157
00:05:42,509 --> 00:05:45,959
familiar with this right it's very very

158
00:05:44,038 --> 00:05:48,389
straightforward and if we want to use

159
00:05:45,959 --> 00:05:50,489
they're kind of weird file systems to

160
00:05:48,389 --> 00:05:53,038
load things that's actually pretty easy

161
00:05:50,490 --> 00:05:55,560
as well all we have to do is just open

162
00:05:53,038 --> 00:05:57,839
you know a file handle like you do and

163
00:05:55,560 --> 00:05:59,339
see here is our our simple file right

164
00:05:57,839 --> 00:06:00,929
whatever it is we're gonna f open it

165
00:05:59,339 --> 00:06:02,310
assuming that we got it we'll do

166
00:06:00,930 --> 00:06:03,720
something with it and then when we're

167
00:06:02,310 --> 00:06:05,100
done with it we'll close it right it's

168
00:06:03,720 --> 00:06:07,020
extremely trivial that's how that works

169
00:06:05,100 --> 00:06:08,250
it's not as nice as our file API where

170
00:06:07,019 --> 00:06:09,839
you just say read the whole file and

171
00:06:08,250 --> 00:06:12,478
you're done but what are you gonna do

172
00:06:09,839 --> 00:06:14,038
right and so for now we'll just say

173
00:06:12,478 --> 00:06:15,659
we're gonna Road handmade sim region

174
00:06:14,038 --> 00:06:18,319
which is the thing that we want to

175
00:06:15,660 --> 00:06:22,950
pre-process right and we'll load that in

176
00:06:18,319 --> 00:06:26,939
and we will go ahead and in and parse it

177
00:06:22,949 --> 00:06:29,519
right okay so if we wanted to do that I

178
00:06:26,939 --> 00:06:31,500
would prefer again to keep the library

179
00:06:29,519 --> 00:06:34,079
used to a minimum because you know again

180
00:06:31,500 --> 00:06:36,300
if it were me I would just you know be

181
00:06:34,079 --> 00:06:39,269
writing on top of an existing code

182
00:06:36,300 --> 00:06:40,879
probably so I'm gonna keep this as sort

183
00:06:39,269 --> 00:06:42,199
of a separate thing which works

184
00:06:40,879 --> 00:06:44,449
exactly like all the rest of the stuff

185
00:06:42,199 --> 00:06:46,459
that we did in hammer a hero where it's

186
00:06:44,449 --> 00:06:48,920
just going to load the entire file right

187
00:06:46,459 --> 00:06:53,299
so I just want a read entire file into

188
00:06:48,920 --> 00:06:55,520
memory and null terminate right this is

189
00:06:53,300 --> 00:06:57,379
a pretty handy function I always have it

190
00:06:55,519 --> 00:06:59,419
in my libraries whenever I'm programming

191
00:06:57,379 --> 00:07:01,219
and basically what this does right is

192
00:06:59,420 --> 00:07:03,379
you take the file name and what it's

193
00:07:01,220 --> 00:07:05,570
designed to do is just open the entire

194
00:07:03,379 --> 00:07:07,550
file read the entire file and write and

195
00:07:05,569 --> 00:07:09,290
and then add a null terminator at the

196
00:07:07,550 --> 00:07:11,090
end so that you know that the the file

197
00:07:09,290 --> 00:07:13,189
ends with a zero right because a lot of

198
00:07:11,089 --> 00:07:14,449
things and see they like to have strings

199
00:07:13,189 --> 00:07:16,699
that are terminated with zeros that's

200
00:07:14,449 --> 00:07:18,500
how you know where the end is right so

201
00:07:16,699 --> 00:07:20,659
here's the file contents I'm gonna look

202
00:07:18,500 --> 00:07:22,040
loaded up by saying read entire file

203
00:07:20,660 --> 00:07:24,170
into memory and they'll terminate I'm

204
00:07:22,040 --> 00:07:26,150
gonna pass in just handmade sim region

205
00:07:24,170 --> 00:07:28,280
dot H cuz that's the file that I want to

206
00:07:26,149 --> 00:07:29,899
parse right now and then when I do this

207
00:07:28,279 --> 00:07:31,669
read entire file into memory and I'll

208
00:07:29,899 --> 00:07:33,739
terminate what I have to do is I have to

209
00:07:31,670 --> 00:07:35,960
figure out the end like I figure out how

210
00:07:33,740 --> 00:07:37,220
big the file is right so I need a thing

211
00:07:35,959 --> 00:07:39,379
here where I could just say like what's

212
00:07:37,220 --> 00:07:40,790
the file size and there's a pretty easy

213
00:07:39,379 --> 00:07:42,769
way to do that and see it's a little

214
00:07:40,790 --> 00:07:44,420
wonky it would be nice if it was it was

215
00:07:42,769 --> 00:07:46,069
not as wonky but what you can do is you

216
00:07:44,420 --> 00:07:49,160
can use a function called F seek which

217
00:07:46,069 --> 00:07:52,629
moves the cursor around the file and you

218
00:07:49,160 --> 00:07:54,950
can say that you want to go somewhere

219
00:07:52,629 --> 00:07:55,909
relative to the end of the file so I'm

220
00:07:54,949 --> 00:07:57,740
going to do is I'm going to seek to the

221
00:07:55,910 --> 00:08:00,500
end of the file I can find out how big

222
00:07:57,740 --> 00:08:02,449
it is then right by just saying hey C

223
00:08:00,500 --> 00:08:04,819
runtime library tell me where you are in

224
00:08:02,449 --> 00:08:07,310
the file and that would actually just

225
00:08:04,819 --> 00:08:09,709
tell me what the actual file size of the

226
00:08:07,310 --> 00:08:12,589
file is right then I can just seek back

227
00:08:09,709 --> 00:08:15,529
to the beginning and then I can I'll

228
00:08:12,589 --> 00:08:17,839
have the fought in entire file right so

229
00:08:15,529 --> 00:08:20,329
that's the entire file size all I need

230
00:08:17,839 --> 00:08:23,989
to do now is load it so I can go ahead

231
00:08:20,329 --> 00:08:26,300
and you know I should probably also this

232
00:08:23,990 --> 00:08:30,590
right so what I can do just say alright

233
00:08:26,300 --> 00:08:32,210
I want to return this just a big like

234
00:08:30,589 --> 00:08:33,709
sort of chunk of memory that's just

235
00:08:32,210 --> 00:08:36,168
going to be the thing so now I know the

236
00:08:33,710 --> 00:08:39,379
final size I can just say all right the

237
00:08:36,168 --> 00:08:44,329
the results write equals a malloc of

238
00:08:39,379 --> 00:08:46,939
that file size so now I've got it

239
00:08:44,330 --> 00:08:50,420
and then when I F read in I'm going to F

240
00:08:46,940 --> 00:08:53,180
read in something of well actually every

241
00:08:50,419 --> 00:08:54,419
takes the buffer first just just because

242
00:08:53,179 --> 00:08:58,138
it does

243
00:08:54,419 --> 00:08:58,889
F read in that file size and and that'll

244
00:08:58,139 --> 00:09:01,740
be the end of it

245
00:08:58,889 --> 00:09:03,659
right so that's what I need to do to

246
00:09:01,740 --> 00:09:06,389
read the entire file into memory and

247
00:09:03,659 --> 00:09:08,219
let's just go ahead and check to see how

248
00:09:06,389 --> 00:09:11,100
that goes let's make sure that that

249
00:09:08,220 --> 00:09:12,269
actually makes some sense right so okay

250
00:09:11,100 --> 00:09:14,759
first thing I'm gonna do is add it to

251
00:09:12,269 --> 00:09:17,269
our build up that so here we go

252
00:09:14,759 --> 00:09:20,458
we already have a thing here where we

253
00:09:17,269 --> 00:09:22,470
compile our test asset builder right and

254
00:09:20,458 --> 00:09:26,338
so what I'd like to do there is just go

255
00:09:22,470 --> 00:09:28,800
ahead and compile this right so REM is

256
00:09:26,339 --> 00:09:31,170
our simple preprocessor star example

257
00:09:28,799 --> 00:09:36,169
here and so what I'm gonna do is just go

258
00:09:31,169 --> 00:09:40,860
ahead and compile a simple preprocessor

259
00:09:36,169 --> 00:09:43,588
dot CPP okay and now that we'll just in

260
00:09:40,860 --> 00:09:45,839
theory compile that for me and it looks

261
00:09:43,589 --> 00:09:47,550
like it did just fine and so now what

262
00:09:45,839 --> 00:09:49,920
I'm going to do is I'm going to actually

263
00:09:47,549 --> 00:09:51,750
step into it in the debugger and verify

264
00:09:49,919 --> 00:09:54,059
that it actually worked at all it did

265
00:09:51,750 --> 00:09:58,289
anything that I wanted it to do right

266
00:09:54,059 --> 00:10:00,989
which would be a nice change okay so I'm

267
00:09:58,289 --> 00:10:03,299
gonna open this up I'm gonna set it to

268
00:10:00,990 --> 00:10:05,789
operate in that directory where our code

269
00:10:03,299 --> 00:10:07,319
is right in handmade code so it can find

270
00:10:05,789 --> 00:10:09,299
the code which of course you know we can

271
00:10:07,320 --> 00:10:10,740
find that file that I want to parse I'm

272
00:10:09,299 --> 00:10:12,838
gonna go ahead and step into it here

273
00:10:10,740 --> 00:10:15,750
here we are I'm going to step in to read

274
00:10:12,839 --> 00:10:18,089
it entire file into memory and I'll

275
00:10:15,750 --> 00:10:20,220
terminate you can see me open the file

276
00:10:18,089 --> 00:10:22,140
it got the file just fine which is nice

277
00:10:20,220 --> 00:10:25,350
let's see what it thinks the file size

278
00:10:22,139 --> 00:10:26,759
is the file size is 33 1 3 that's 3 3 1

279
00:10:25,350 --> 00:10:29,220
6 that's a totally regional number of

280
00:10:26,759 --> 00:10:31,110
bytes for that file we're gonna F seek

281
00:10:29,220 --> 00:10:32,579
to the beginning right and then we're

282
00:10:31,110 --> 00:10:35,519
going to malloc something of that size

283
00:10:32,578 --> 00:10:38,159
and F read into it and let's see if what

284
00:10:35,519 --> 00:10:40,440
we got was the con to the file there it

285
00:10:38,159 --> 00:10:42,958
is right that's the file sure sure

286
00:10:40,440 --> 00:10:45,449
enough right and you can see at the end

287
00:10:42,958 --> 00:10:47,068
here it just kind of becomes garbage the

288
00:10:45,448 --> 00:10:48,659
reason for that of course is that we

289
00:10:47,068 --> 00:10:50,219
have not actually done the null

290
00:10:48,659 --> 00:10:53,159
termination part but that's pretty

291
00:10:50,220 --> 00:10:54,810
straightforward ok so that loads the

292
00:10:53,159 --> 00:10:56,879
entire file into memory again really

293
00:10:54,809 --> 00:10:59,159
really simple so all I want to do now is

294
00:10:56,879 --> 00:11:01,078
I want to go ahead and allocate a little

295
00:10:59,159 --> 00:11:03,179
bit more space right just one more bite

296
00:11:01,078 --> 00:11:04,919
for that null terminator and then after

297
00:11:03,179 --> 00:11:05,879
we do the read in I'm just gonna say at

298
00:11:04,919 --> 00:11:07,769
the very end of the file

299
00:11:05,879 --> 00:11:08,039
put that null terminator in so now I've

300
00:11:07,769 --> 00:11:09,600
got

301
00:11:08,039 --> 00:11:10,860
terminated file right I got a null

302
00:11:09,600 --> 00:11:12,600
terminated the comments the file mil

303
00:11:10,860 --> 00:11:14,310
terminated and so now what I want to do

304
00:11:12,600 --> 00:11:15,870
is I want to parse this thing right I

305
00:11:14,309 --> 00:11:18,629
want to go through it and I want to find

306
00:11:15,870 --> 00:11:20,879
whatever is in there that I want to pull

307
00:11:18,629 --> 00:11:22,828
out now there's a problem with this and

308
00:11:20,879 --> 00:11:24,088
the problem with this is that it could

309
00:11:22,828 --> 00:11:25,979
get pretty nasty in here there could be

310
00:11:24,089 --> 00:11:27,569
lots of stuff and I may not want it to

311
00:11:25,980 --> 00:11:29,490
pay attention to all these things right

312
00:11:27,568 --> 00:11:31,169
I may not want it to actually pay

313
00:11:29,490 --> 00:11:33,028
attention to something like move speck

314
00:11:31,169 --> 00:11:34,919
or entity type or whatever a hit point I

315
00:11:33,028 --> 00:11:36,448
may not want it to parse these trucks I

316
00:11:34,919 --> 00:11:38,539
may not want it to do anything with

317
00:11:36,448 --> 00:11:41,750
these and so I need some way of

318
00:11:38,539 --> 00:11:45,028
annotating right mm-hmm

319
00:11:41,750 --> 00:11:47,490
what these guys are and so what I'm

320
00:11:45,028 --> 00:11:50,458
gonna do is I'm gonna go into handmade H

321
00:11:47,490 --> 00:11:51,899
right and up here in handmade H when

322
00:11:50,458 --> 00:11:54,869
we're talking actually I couldn't even

323
00:11:51,899 --> 00:11:57,089
put it here any platform um well yeah

324
00:11:54,870 --> 00:11:59,310
I'll just put it here at the top of

325
00:11:57,089 --> 00:12:01,290
handmade H before anything else happens

326
00:11:59,309 --> 00:12:03,268
I'm gonna define a little bit of markup

327
00:12:01,289 --> 00:12:05,009
and what I do typically for this sort of

328
00:12:03,269 --> 00:12:07,620
thing is I just define some macros that

329
00:12:05,009 --> 00:12:14,028
compile away right so what I'll do is

330
00:12:07,620 --> 00:12:14,028
I'll define something such as you know

331
00:12:14,269 --> 00:12:20,159
introspection right something like this

332
00:12:18,120 --> 00:12:23,129
I don't know

333
00:12:20,159 --> 00:12:25,078
and params some I don't know something

334
00:12:23,129 --> 00:12:26,879
like this right I'll just something and

335
00:12:25,078 --> 00:12:28,409
the key part here is that it doesn't

336
00:12:26,879 --> 00:12:31,409
expand to anything it's a macro that

337
00:12:28,409 --> 00:12:34,019
just literally vanishes right and so

338
00:12:31,409 --> 00:12:36,000
then you can do something like okay this

339
00:12:34,019 --> 00:12:38,909
struct right here I want this dark could

340
00:12:36,000 --> 00:12:40,708
be like a introspected struct right

341
00:12:38,909 --> 00:12:43,318
and maybe that's introspection done

342
00:12:40,708 --> 00:12:44,729
maybe just introspect right and I just

343
00:12:43,318 --> 00:12:49,009
say like oh the category for

344
00:12:44,730 --> 00:12:52,019
introspection you know is brown butter

345
00:12:49,009 --> 00:12:54,720
right that's I don't know why brown

346
00:12:52,019 --> 00:12:56,639
butter because you know it's tastier

347
00:12:54,720 --> 00:12:57,870
than regular blacks did like regular

348
00:12:56,639 --> 00:12:59,730
butter so you know what let's just say

349
00:12:57,870 --> 00:13:01,409
regular butter for now regular butter is

350
00:12:59,730 --> 00:13:03,688
pretty tasty like you get it back

351
00:13:01,409 --> 00:13:05,669
getting regular butter it's pretty good

352
00:13:03,688 --> 00:13:07,948
if the butter is good and the baguette

353
00:13:05,669 --> 00:13:09,269
is both good like I can just say I can

354
00:13:07,948 --> 00:13:09,990
see where the French are coming from on

355
00:13:09,269 --> 00:13:12,328
that right

356
00:13:09,990 --> 00:13:13,438
you know I'm American but still you know

357
00:13:12,328 --> 00:13:14,849
it's like I was never one of those

358
00:13:13,438 --> 00:13:17,909
people who called it freedom fries I

359
00:13:14,850 --> 00:13:19,259
guess is my point so anyway if I go

360
00:13:17,909 --> 00:13:20,578
ahead and compile handmade hero now

361
00:13:19,259 --> 00:13:21,990
you'll notice this doesn't do anything

362
00:13:20,578 --> 00:13:24,809
isn't create a problem for us

363
00:13:21,990 --> 00:13:27,029
if basic allows us to inject code that's

364
00:13:24,809 --> 00:13:28,589
only for our preprocessor and that's

365
00:13:27,029 --> 00:13:29,789
crucial it's crucial to understand how

366
00:13:28,590 --> 00:13:32,940
important that is that's the thing you

367
00:13:29,789 --> 00:13:34,319
you definitely need to know in order to

368
00:13:32,940 --> 00:13:35,400
start marking up that code so we've got

369
00:13:34,320 --> 00:13:37,340
that in there now we've got the file

370
00:13:35,399 --> 00:13:40,409
contents and what we're going to do now

371
00:13:37,340 --> 00:13:42,170
is we're going to start parsing the file

372
00:13:40,409 --> 00:13:44,909
now in order to start parsing the file

373
00:13:42,169 --> 00:13:46,860
what you want to do is you want to build

374
00:13:44,909 --> 00:13:48,689
a relatively traditional parser

375
00:13:46,860 --> 00:13:52,080
structure and the way that that works is

376
00:13:48,690 --> 00:13:53,610
to two phases essentially the first part

377
00:13:52,080 --> 00:13:56,940
of looking at the file involves what's

378
00:13:53,610 --> 00:13:58,740
called lexing it means breaking up the

379
00:13:56,940 --> 00:14:03,120
stream instead of just being a bunch of

380
00:13:58,740 --> 00:14:03,720
individual characters you try to in two

381
00:14:03,120 --> 00:14:06,029
pieces

382
00:14:03,720 --> 00:14:08,279
that means something a little bit more

383
00:14:06,029 --> 00:14:12,089
and so for example you might think about

384
00:14:08,279 --> 00:14:15,089
the tokens in this right here as being

385
00:14:12,090 --> 00:14:16,670
things like the lexicographical tokens I

386
00:14:15,090 --> 00:14:20,430
should have said they're called tokens

387
00:14:16,669 --> 00:14:24,990
that that lexing process is about

388
00:14:20,429 --> 00:14:27,029
binding the letters InP ro SP ECT into

389
00:14:24,990 --> 00:14:30,659
an identifier token like this is or or

390
00:14:27,029 --> 00:14:32,669
you know like a set of words right then

391
00:14:30,659 --> 00:14:34,319
I've got a parentheses token right which

392
00:14:32,669 --> 00:14:36,719
is grammatical then I've got a category

393
00:14:34,320 --> 00:14:39,570
token but I've got a colon then I've got

394
00:14:36,720 --> 00:14:41,160
a string right open quote whatever and

395
00:14:39,570 --> 00:14:42,570
so instead of just looking at this

396
00:14:41,159 --> 00:14:44,100
that's just a big bag of characters

397
00:14:42,570 --> 00:14:45,629
which can be a little bit daunting we've

398
00:14:44,100 --> 00:14:47,460
said start looking at it as a bag of

399
00:14:45,629 --> 00:14:49,230
tokens and that will make it a little

400
00:14:47,460 --> 00:14:51,060
bit easier for us to parse so the first

401
00:14:49,230 --> 00:14:54,300
thing we want to do is make a thing that

402
00:14:51,059 --> 00:14:59,879
allows us to get tokens out of the file

403
00:14:54,299 --> 00:15:01,439
right so let's do that here we go what

404
00:14:59,879 --> 00:15:03,809
we want to do is define something like a

405
00:15:01,440 --> 00:15:05,840
token structure we want the token

406
00:15:03,809 --> 00:15:08,279
structure to tell us something about

407
00:15:05,840 --> 00:15:10,560
where it was so weak rivalled probably

408
00:15:08,279 --> 00:15:11,789
want something like what the text was

409
00:15:10,559 --> 00:15:13,559
what you know what that what the

410
00:15:11,789 --> 00:15:16,559
contents of the token was we probably

411
00:15:13,559 --> 00:15:19,199
want us to say how long it was right so

412
00:15:16,559 --> 00:15:21,149
this is the length of the token right mm

413
00:15:19,200 --> 00:15:22,770
that's the region for it and then we're

414
00:15:21,149 --> 00:15:26,279
probably gonna have something like a

415
00:15:22,769 --> 00:15:28,740
token type right and that is what kind

416
00:15:26,279 --> 00:15:30,899
of token this this thing was right and

417
00:15:28,740 --> 00:15:34,500
so one might be an identifier like I

418
00:15:30,899 --> 00:15:35,909
said we got other stuff in there right

419
00:15:34,500 --> 00:15:37,769
we just got a bunch of things

420
00:15:35,909 --> 00:15:39,089
oops that was not very good not a very

421
00:15:37,769 --> 00:15:42,120
good cut and paste job there

422
00:15:39,090 --> 00:15:43,290
mr. Mira Tori if I do say so myself so

423
00:15:42,120 --> 00:15:45,090
we're gonna want things like you know

424
00:15:43,289 --> 00:15:47,789
okay we've got an identifier we've got a

425
00:15:45,090 --> 00:15:49,470
parenthesis you know open paren we've

426
00:15:47,789 --> 00:15:53,849
got you know :

427
00:15:49,470 --> 00:15:57,779
we've got string we've got close friend

428
00:15:53,850 --> 00:16:04,200
we've got semicolons in there

429
00:15:57,779 --> 00:16:06,889
we've got asterisks we have do we have

430
00:16:04,200 --> 00:16:16,020
anything else we've got open brackets

431
00:16:06,889 --> 00:16:19,710
right we've got open braces right things

432
00:16:16,019 --> 00:16:21,360
like this so we got something like this

433
00:16:19,710 --> 00:16:22,590
we're gonna want these tokens to come

434
00:16:21,360 --> 00:16:25,350
back and we're gonna want them to look

435
00:16:22,590 --> 00:16:26,850
like that right and so what I'd like to

436
00:16:25,350 --> 00:16:28,320
do is I'd like to be able to start

437
00:16:26,850 --> 00:16:29,879
writing code that just looks like this

438
00:16:28,320 --> 00:16:31,890
it's just like token taupe you know

439
00:16:29,879 --> 00:16:33,000
token nickels get token right and then

440
00:16:31,889 --> 00:16:35,129
of course I guess we should also have

441
00:16:33,000 --> 00:16:37,409
token end like the end of the thing

442
00:16:35,129 --> 00:16:39,500
right like end of file or whatever end

443
00:16:37,409 --> 00:16:42,509
of stream something like that right and

444
00:16:39,500 --> 00:16:44,490
sweet and so what I want to do is

445
00:16:42,509 --> 00:16:47,220
something I'm like okay let's just do a

446
00:16:44,490 --> 00:16:49,799
for I loop we'll go in here and we'll

447
00:16:47,220 --> 00:16:51,180
keep grabbing tokens until we can't grab

448
00:16:49,799 --> 00:16:53,189
tokens anymore

449
00:16:51,179 --> 00:16:55,409
so we'll do a switch on the token type

450
00:16:53,190 --> 00:16:58,920
right I should probably put an actual

451
00:16:55,409 --> 00:17:02,850
token type in there right we'll switch

452
00:16:58,919 --> 00:17:04,470
on the token type we'll do a case where

453
00:17:02,850 --> 00:17:08,910
we say okay it's gonna be one of these

454
00:17:04,470 --> 00:17:09,959
things right like so I guess we don't

455
00:17:08,910 --> 00:17:12,569
actually have to do a switch on the case

456
00:17:09,959 --> 00:17:14,250
quite yet we should probably just keep

457
00:17:12,568 --> 00:17:15,779
things a little simple at first I will

458
00:17:14,250 --> 00:17:19,529
just say okay give it to the end of

459
00:17:15,779 --> 00:17:21,029
stream we need to stop right we're gonna

460
00:17:19,529 --> 00:17:22,410
be done should probably do something

461
00:17:21,029 --> 00:17:24,088
like this - since we're inside a switch

462
00:17:22,410 --> 00:17:25,620
statement so we've got a bool here

463
00:17:24,088 --> 00:17:27,539
that's like you know parsing equals true

464
00:17:25,619 --> 00:17:29,669
and we'll just say well we're parsing

465
00:17:27,539 --> 00:17:31,079
now so then when we want to end the part

466
00:17:29,670 --> 00:17:33,570
you can just say the parsing is done

467
00:17:31,079 --> 00:17:34,859
it's over and we'll break out right so

468
00:17:33,569 --> 00:17:36,480
assuming that we're not hitting the end

469
00:17:34,859 --> 00:17:38,639
of the stream then what I want to do is

470
00:17:36,480 --> 00:17:40,500
I want to say what we actually found so

471
00:17:38,640 --> 00:17:42,450
I'll just do a thing where I say like

472
00:17:40,500 --> 00:17:45,029
you know what the token type was maybe

473
00:17:42,450 --> 00:17:46,890
and then what the string was that was

474
00:17:45,029 --> 00:17:49,369
there now one of the weird things about

475
00:17:46,890 --> 00:17:49,370
strings

476
00:17:49,440 --> 00:17:54,900
I don't remember there's a crazy syntax

477
00:17:52,049 --> 00:17:57,750
you can do to print out length strings I

478
00:17:54,900 --> 00:18:00,780
can't remember it you specify the width

479
00:17:57,750 --> 00:18:02,730
of the thing and you specify an indirect

480
00:18:00,779 --> 00:18:04,980
with specifier it's like the craziest

481
00:18:02,730 --> 00:18:08,870
thing ever but you can do it

482
00:18:04,980 --> 00:18:13,110
printf in direct width specification

483
00:18:08,869 --> 00:18:16,409
trust me this is a real thing it's kind

484
00:18:13,109 --> 00:18:18,990
of absurd I just want the actual def it

485
00:18:16,410 --> 00:18:20,370
here it is there it is that's it right

486
00:18:18,990 --> 00:18:24,329
there actually you can see it's that

487
00:18:20,369 --> 00:18:25,949
star right the wisp specification an int

488
00:18:24,329 --> 00:18:28,679
argument for the Argos specifies the

489
00:18:25,950 --> 00:18:30,480
value right so you can actually do this

490
00:18:28,680 --> 00:18:33,600
with strings where you're actually

491
00:18:30,480 --> 00:18:35,099
specifying the width to printout and the

492
00:18:33,599 --> 00:18:36,539
reason I care about this right is

493
00:18:35,099 --> 00:18:38,879
because our tokens are specified as a

494
00:18:36,539 --> 00:18:41,279
length and a pointer so I can't just

495
00:18:38,880 --> 00:18:43,740
pass right I can't just pass this

496
00:18:41,279 --> 00:18:45,899
because by default printf will read

497
00:18:43,740 --> 00:18:47,940
until the null terminator or slightly

498
00:18:45,900 --> 00:18:49,050
probably pass as well we'll just read

499
00:18:47,940 --> 00:18:51,360
till the null terminator that string and

500
00:18:49,049 --> 00:18:52,680
it'll just go off into no-man's land and

501
00:18:51,359 --> 00:18:54,209
crash or who knows what it'll do right

502
00:18:52,680 --> 00:18:57,060
print of different garbage until it's a

503
00:18:54,210 --> 00:18:59,009
zero by luck whatever so what I want to

504
00:18:57,059 --> 00:19:00,690
do is I want to specify an INT there I

505
00:18:59,009 --> 00:19:02,160
want to be able to specify that text

506
00:19:00,690 --> 00:19:04,710
line right I want something more like

507
00:19:02,160 --> 00:19:10,560
that and so I forget if I have to

508
00:19:04,710 --> 00:19:15,710
specify a dot for that or not so we'll

509
00:19:10,559 --> 00:19:19,829
find out here let's see printf string

510
00:19:15,710 --> 00:19:23,009
indirect string with it's something like

511
00:19:19,829 --> 00:19:24,359
that and it's it's just kind of crazy we

512
00:19:23,009 --> 00:19:26,369
could probably just sort of muddle

513
00:19:24,359 --> 00:19:28,500
through it as well but I'll try just

514
00:19:26,369 --> 00:19:31,500
present star s for now but I thinking

515
00:19:28,500 --> 00:19:34,079
you might have to put % dot star s this

516
00:19:31,500 --> 00:19:35,940
is the vagaries of C you'll have to

517
00:19:34,079 --> 00:19:38,730
forgive me I don't use this I don't

518
00:19:35,940 --> 00:19:41,009
really use printf anymore so it's it's

519
00:19:38,730 --> 00:19:44,339
it's not something that I have kind of

520
00:19:41,009 --> 00:19:47,609
at the you know at the top of my M of my

521
00:19:44,339 --> 00:19:49,649
brain stack of things of things to do so

522
00:19:47,609 --> 00:19:50,849
let's see here in a single by characters

523
00:19:49,650 --> 00:19:53,190
weight up to the first letter until the

524
00:19:50,849 --> 00:19:56,399
precision value so there it is right so

525
00:19:53,190 --> 00:19:57,870
it's with dot precision right is usually

526
00:19:56,400 --> 00:19:59,400
it's like width up precision is the way

527
00:19:57,869 --> 00:20:01,079
it goes so we do need that dot in there

528
00:19:59,400 --> 00:20:02,490
to say it's the precision value we're

529
00:20:01,079 --> 00:20:02,879
specifying we're specifying here with

530
00:20:02,490 --> 00:20:04,940
the star

531
00:20:02,880 --> 00:20:08,880
so read it off the stream ants a string

532
00:20:04,940 --> 00:20:11,910
crazytown c++ printf crazytown welcome

533
00:20:08,880 --> 00:20:14,340
to it okay so that's how we're gonna do

534
00:20:11,910 --> 00:20:15,390
our little print out thing everything

535
00:20:14,339 --> 00:20:17,099
should be working here except for the

536
00:20:15,390 --> 00:20:19,440
fact that we don't have a get token

537
00:20:17,099 --> 00:20:21,449
thing and so what I want to do here is I

538
00:20:19,440 --> 00:20:23,279
want to have a thing like called

539
00:20:21,450 --> 00:20:24,750
tokenizer or something to store the

540
00:20:23,279 --> 00:20:27,119
state of this just so we know where

541
00:20:24,750 --> 00:20:28,950
we're at something like this right

542
00:20:27,119 --> 00:20:30,569
it might store some other things later I

543
00:20:28,950 --> 00:20:32,340
don't know but I just want a thing that

544
00:20:30,569 --> 00:20:34,049
we pass around for state so what we're

545
00:20:32,339 --> 00:20:36,809
gonna do is say that we have a tokenizer

546
00:20:34,049 --> 00:20:39,119
the tokenizer is is just going to be

547
00:20:36,809 --> 00:20:41,039
initialized to have just that app

548
00:20:39,119 --> 00:20:43,049
pointer pointing at our file contents

549
00:20:41,039 --> 00:20:46,259
like so and then we're gonna say go

550
00:20:43,049 --> 00:20:49,319
ahead get a token from this tokenizer

551
00:20:46,259 --> 00:20:54,000
thingy that I've created and that get

552
00:20:49,319 --> 00:20:57,450
token it just expected to do whatever it

553
00:20:54,000 --> 00:21:00,630
needs to do right okay so here we go how

554
00:20:57,450 --> 00:21:03,840
do we actually do that well at first of

555
00:21:00,630 --> 00:21:06,180
all we probably want to do some basic

556
00:21:03,839 --> 00:21:07,740
things that tokenizer x' or and i guess

557
00:21:06,180 --> 00:21:09,330
this is technically lexing i guess at

558
00:21:07,740 --> 00:21:12,480
this point right we want to do something

559
00:21:09,329 --> 00:21:15,480
that lexer is typically do we want to

560
00:21:12,480 --> 00:21:16,769
eat up any white space because typically

561
00:21:15,480 --> 00:21:18,870
in programming languages like the one

562
00:21:16,769 --> 00:21:21,210
we're using here white space dust does

563
00:21:18,869 --> 00:21:25,289
not matter right so what we want to do

564
00:21:21,210 --> 00:21:27,390
is do something like hmm you know eat a

565
00:21:25,289 --> 00:21:29,099
white space or something like this where

566
00:21:27,390 --> 00:21:30,960
we just say like before we do anything

567
00:21:29,099 --> 00:21:32,339
else get rid of any white space that's

568
00:21:30,960 --> 00:21:34,590
in there because we just simply don't

569
00:21:32,339 --> 00:21:36,869
want it right and so here's the art eat

570
00:21:34,589 --> 00:21:41,250
all white space we have our tokenizer

571
00:21:36,869 --> 00:21:44,159
and what we will simply do is go okay

572
00:21:41,250 --> 00:21:46,980
while the tokenizer at you know while

573
00:21:44,160 --> 00:21:49,800
this this app thing while we look at

574
00:21:46,980 --> 00:21:52,170
what it is equal to and what it's equal

575
00:21:49,799 --> 00:21:53,519
to you know is white space so we can do

576
00:21:52,170 --> 00:21:55,860
that pretty easily in fact we could even

577
00:21:53,519 --> 00:21:57,690
make a little query for it like this we

578
00:21:55,859 --> 00:22:00,059
could say well that's white space we

579
00:21:57,690 --> 00:22:01,710
want to go ahead and advance it right so

580
00:22:00,059 --> 00:22:03,629
we're just literally moving past any

581
00:22:01,710 --> 00:22:07,170
white space that's in there again really

582
00:22:03,630 --> 00:22:10,100
trivial probably for anyone to write as

583
00:22:07,170 --> 00:22:12,480
well that is white space function pretty

584
00:22:10,099 --> 00:22:15,000
straightforward that just takes some

585
00:22:12,480 --> 00:22:16,440
care whatever it is right I'll guess

586
00:22:15,000 --> 00:22:19,049
we'll call it C and it just

587
00:22:16,440 --> 00:22:21,930
is going to return this result and that

588
00:22:19,049 --> 00:22:25,680
C equals basically any of the whitespace

589
00:22:21,930 --> 00:22:28,680
stuff that we know of right so if it's

590
00:22:25,680 --> 00:22:31,970
that if it's a space if it's a tab or

591
00:22:28,680 --> 00:22:39,960
something like this if it's a new line

592
00:22:31,970 --> 00:22:43,110
right then we want to say that it's

593
00:22:39,960 --> 00:22:45,390
whitespace right so that's it so while

594
00:22:43,109 --> 00:22:47,039
that's happening we're gonna advance by

595
00:22:45,390 --> 00:22:49,110
the whitespace then what we're gonna do

596
00:22:47,039 --> 00:22:51,750
is take a look at see what character

597
00:22:49,109 --> 00:22:54,649
we're actually on and then we're gonna

598
00:22:51,750 --> 00:22:58,049
do something with that character right

599
00:22:54,650 --> 00:22:59,670
and so let's just see what all the stuff

600
00:22:58,049 --> 00:23:03,690
is that I said we were gonna purse and

601
00:22:59,670 --> 00:23:06,390
let's grab it like so and so I'll just

602
00:23:03,690 --> 00:23:13,350
say okay if the token is an identifier

603
00:23:06,390 --> 00:23:16,800
oh that's right we don't know that yet

604
00:23:13,349 --> 00:23:19,139
that's not what I want to do it all we

605
00:23:16,799 --> 00:23:20,700
want a way to determine yeah all right

606
00:23:19,140 --> 00:23:23,490
brain getting a little brained

607
00:23:20,700 --> 00:23:24,990
it's true in order to figure out if

608
00:23:23,490 --> 00:23:26,220
something is an identifier that's gonna

609
00:23:24,990 --> 00:23:27,809
be a bit of a catch-all because that's

610
00:23:26,220 --> 00:23:29,400
like anything could really be identifier

611
00:23:27,809 --> 00:23:31,649
so really what we want to do is focus on

612
00:23:29,400 --> 00:23:34,259
these guys first right if we see an open

613
00:23:31,650 --> 00:23:37,019
paren we pretty much know what we're

614
00:23:34,259 --> 00:23:40,230
dealing with here right our token dot

615
00:23:37,019 --> 00:23:42,660
type equals an open paren and we're done

616
00:23:40,230 --> 00:23:44,579
right so I think basically you know

617
00:23:42,660 --> 00:23:46,200
these guys should be really really

618
00:23:44,579 --> 00:23:48,329
straightforward in fact like it even I

619
00:23:46,200 --> 00:23:49,140
could probably compress this down with

620
00:23:48,329 --> 00:23:51,659
something really straightforward

621
00:23:49,140 --> 00:23:53,130
something that looks like this right and

622
00:23:51,660 --> 00:23:55,410
so here's the other ones we've got here

623
00:23:53,130 --> 00:23:56,610
we've got closed paren that's going to

624
00:23:55,410 --> 00:23:58,920
be this guy

625
00:23:56,609 --> 00:24:02,009
we've got semicolon that's going to be

626
00:23:58,920 --> 00:24:04,380
this dude right here right

627
00:24:02,009 --> 00:24:12,240
we've got asterisk that's gonna do this

628
00:24:04,380 --> 00:24:14,820
guy yeah we've got Open bracket right

629
00:24:12,240 --> 00:24:15,750
OOP that was not where that goes not

630
00:24:14,819 --> 00:24:19,649
where that goes

631
00:24:15,750 --> 00:24:23,490
not at all so Open bracket close bracket

632
00:24:19,650 --> 00:24:25,830
I don't know why those braces got got

633
00:24:23,490 --> 00:24:29,430
plurals on them they were a little bit

634
00:24:25,829 --> 00:24:30,319
too too ready to go should be only open

635
00:24:29,430 --> 00:24:35,750
brace

636
00:24:30,319 --> 00:24:38,119
all right open brace close brace so

637
00:24:35,750 --> 00:24:39,799
there's that go right so that would just

638
00:24:38,119 --> 00:24:41,119
determine what we were looking at when

639
00:24:39,799 --> 00:24:42,079
we're looking at something relatively

640
00:24:41,119 --> 00:24:45,579
straightforward

641
00:24:42,079 --> 00:24:49,099
I forgot the : one there there we go

642
00:24:45,579 --> 00:24:50,539
okay so that's you know all we really

643
00:24:49,099 --> 00:24:52,219
need for all of these guys but then

644
00:24:50,539 --> 00:24:53,899
we've got the string and the identifier

645
00:24:52,220 --> 00:24:55,400
one and in fact you know what I'll do is

646
00:24:53,900 --> 00:24:57,019
I'll move those guys down here so we can

647
00:24:55,400 --> 00:25:01,220
kind of see like you know here's our

648
00:24:57,019 --> 00:25:04,009
string you know here's our sort of our

649
00:25:01,220 --> 00:25:06,769
simple guys versus complex guys right

650
00:25:04,009 --> 00:25:08,900
and similarly at the end we also kind of

651
00:25:06,769 --> 00:25:11,119
know in fact we could even do it here

652
00:25:08,900 --> 00:25:14,000
where we say you know if if we see the

653
00:25:11,119 --> 00:25:15,859
null terminator right as part of the

654
00:25:14,000 --> 00:25:23,359
character as well that's going to be

655
00:25:15,859 --> 00:25:26,209
token end of stream right so yeah so all

656
00:25:23,359 --> 00:25:28,849
we need to do here is just assume that

657
00:25:26,210 --> 00:25:31,279
our result token right let's just assume

658
00:25:28,849 --> 00:25:33,529
that the result tokens text length is

659
00:25:31,279 --> 00:25:37,399
one and we'll assume that the tokens

660
00:25:33,529 --> 00:25:38,839
text is where we are at and that will

661
00:25:37,400 --> 00:25:41,630
just make it so that all of these this

662
00:25:38,839 --> 00:25:43,789
the multiplicity of cases here is just a

663
00:25:41,630 --> 00:25:46,400
trivial assignment of the type and then

664
00:25:43,789 --> 00:25:47,629
we return and we're done right and so

665
00:25:46,400 --> 00:25:49,610
then all we have to do is start

666
00:25:47,630 --> 00:25:54,260
implementing these more complicated

667
00:25:49,609 --> 00:25:56,929
cases here like let's say we see one of

668
00:25:54,259 --> 00:25:59,299
these quotes right or something like

669
00:25:56,930 --> 00:26:01,730
that or let's say we get some other

670
00:25:59,299 --> 00:26:06,799
thing here and we're gonna treat it as

671
00:26:01,730 --> 00:26:08,750
an identifier right okay so what we want

672
00:26:06,799 --> 00:26:10,909
to do now is we want to say okay if we

673
00:26:08,750 --> 00:26:13,190
get a string we just want to read

674
00:26:10,910 --> 00:26:15,740
through the entire string till we get to

675
00:26:13,190 --> 00:26:18,410
the next like quote right that's all we

676
00:26:15,740 --> 00:26:20,690
really want to be able to do so in order

677
00:26:18,410 --> 00:26:22,820
to do that all we would say is okay you

678
00:26:20,690 --> 00:26:24,710
know while you know we're just gonna

679
00:26:22,819 --> 00:26:30,589
advance the tokenizer we're just gonna

680
00:26:24,710 --> 00:26:31,970
say okay skip over that quote because we

681
00:26:30,589 --> 00:26:34,369
don't want the quote to actually come

682
00:26:31,970 --> 00:26:37,460
out in the string value right so skip

683
00:26:34,369 --> 00:26:40,489
over that quote and then let's say that

684
00:26:37,460 --> 00:26:44,150
the tokens text is equal to where we're

685
00:26:40,490 --> 00:26:46,309
at now then we just want to keep going

686
00:26:44,150 --> 00:26:47,840
until we see a close quote so we

687
00:26:46,309 --> 00:26:53,269
basically want to say you know while

688
00:26:47,839 --> 00:26:56,269
tokenizer at is not equal to a closing

689
00:26:53,269 --> 00:26:57,889
quote and we also want to make sure that

690
00:26:56,269 --> 00:26:59,089
it's not the null terminator because we

691
00:26:57,890 --> 00:27:01,280
might at the end it might just be an

692
00:26:59,089 --> 00:27:03,649
invalid you know program whatever while

693
00:27:01,279 --> 00:27:05,629
these are happening we just want to keep

694
00:27:03,650 --> 00:27:07,759
you know we want to keep advancing so in

695
00:27:05,630 --> 00:27:09,530
here we want to do you know a simple

696
00:27:07,759 --> 00:27:11,930
advance like that now since this is C

697
00:27:09,529 --> 00:27:14,750
and C allows you to escape with a

698
00:27:11,930 --> 00:27:17,000
backslash things like the quote inside a

699
00:27:14,750 --> 00:27:18,710
string we probably also want to just do

700
00:27:17,000 --> 00:27:20,269
a little bit something extra here and

701
00:27:18,710 --> 00:27:22,640
say that if the tokenizer

702
00:27:20,269 --> 00:27:26,539
at happens to be a backspace like it

703
00:27:22,640 --> 00:27:28,670
just happens to be right then we will

704
00:27:26,539 --> 00:27:31,279
actually advance the tokenizer

705
00:27:28,670 --> 00:27:34,610
past the next character whatever it is

706
00:27:31,279 --> 00:27:37,460
right so we'd say something like if the

707
00:27:34,609 --> 00:27:40,699
token eyes are at zero equals the

708
00:27:37,460 --> 00:27:43,100
backslash and you know the tokenizer at

709
00:27:40,700 --> 00:27:44,779
one the next character is not equal to

710
00:27:43,099 --> 00:27:47,000
the null terminator so that it's not

711
00:27:44,779 --> 00:27:49,039
like the end of the stream then at that

712
00:27:47,000 --> 00:27:51,230
point we'll just say skip skip two

713
00:27:49,039 --> 00:27:53,779
characters right otherwise we only skip

714
00:27:51,230 --> 00:27:55,339
one and so that allows us to keep parity

715
00:27:53,779 --> 00:27:58,849
with C so if there's quotes and strings

716
00:27:55,339 --> 00:28:00,949
if someone quoted out if someone that

717
00:27:58,849 --> 00:28:02,480
quoted a quote ate a double quotation we

718
00:28:00,950 --> 00:28:04,730
won't end the string prematurely and

719
00:28:02,480 --> 00:28:07,130
fall out of phase with the C way of

720
00:28:04,730 --> 00:28:09,289
parsing things right so okay so we've

721
00:28:07,130 --> 00:28:11,810
got that and now we just need a way to

722
00:28:09,289 --> 00:28:14,210
parse identifiers right and so inside

723
00:28:11,809 --> 00:28:15,710
our processing for identifiers you know

724
00:28:14,210 --> 00:28:17,029
we've got this default case we pretty

725
00:28:15,710 --> 00:28:19,730
much got two things we might want to

726
00:28:17,029 --> 00:28:22,579
look at right one is is this thing

727
00:28:19,730 --> 00:28:25,490
alphanumeric right so so basically is

728
00:28:22,579 --> 00:28:26,750
this thing like is it an isn't an

729
00:28:25,490 --> 00:28:29,240
alphabetical character I guess what I'm

730
00:28:26,750 --> 00:28:30,500
saying so is alphabetical if it is then

731
00:28:29,240 --> 00:28:33,410
it could be the start of an identifier

732
00:28:30,500 --> 00:28:38,180
right and so whatever the tokenizer app

733
00:28:33,410 --> 00:28:40,630
value is if that's alphabetical then I

734
00:28:38,180 --> 00:28:45,140
want a person identifier here right

735
00:28:40,630 --> 00:28:47,870
otherwise if it's a number right or is

736
00:28:45,140 --> 00:28:48,800
is numeric I should say something like

737
00:28:47,869 --> 00:28:52,119
that

738
00:28:48,799 --> 00:28:52,119
then we might want to parse the number

739
00:28:55,609 --> 00:29:00,029
okay and that's really all we would need

740
00:28:58,650 --> 00:29:01,019
to do here we haven't implemented those

741
00:29:00,029 --> 00:29:02,670
yet so we're gonna have to think about

742
00:29:01,019 --> 00:29:06,000
this but there's one other thing we need

743
00:29:02,670 --> 00:29:08,370
to do here which is if we end up in a

744
00:29:06,000 --> 00:29:09,990
case where we see a slash we have a

745
00:29:08,369 --> 00:29:11,909
little more work to do right because

746
00:29:09,990 --> 00:29:13,920
there's comments in C code and we want

747
00:29:11,910 --> 00:29:15,240
to bypass the comments so we actually

748
00:29:13,920 --> 00:29:16,470
also have one more thing that has

749
00:29:15,240 --> 00:29:19,230
nothing to do with the training a token

750
00:29:16,470 --> 00:29:23,490
it's just about skipping over dead space

751
00:29:19,230 --> 00:29:26,069
right and for that matter we could put

752
00:29:23,490 --> 00:29:28,470
that in the whitespace eater as well

753
00:29:26,069 --> 00:29:31,500
right so in the thing that does eat all

754
00:29:28,470 --> 00:29:34,019
what whitespace I hope how far were you

755
00:29:31,500 --> 00:29:35,220
guys gonna let me get in that I can't

756
00:29:34,019 --> 00:29:37,769
really blame because I'm not looking at

757
00:29:35,220 --> 00:29:41,150
the chat in the thing that does eat all

758
00:29:37,769 --> 00:29:43,710
whitespace we also might want to do

759
00:29:41,150 --> 00:29:44,820
sucking up of comments because comments

760
00:29:43,710 --> 00:29:47,670
are basically considered whitespace and

761
00:29:44,819 --> 00:29:50,250
we don't want them right so while the

762
00:29:47,670 --> 00:29:52,289
thing is whitespace right we want to

763
00:29:50,250 --> 00:29:54,240
advance but actually probably what we

764
00:29:52,289 --> 00:29:56,549
want to do here is something a little

765
00:29:54,240 --> 00:30:00,059
more sort of drawed where we do

766
00:29:56,549 --> 00:30:03,419
something like okay keep going for a

767
00:30:00,059 --> 00:30:06,869
while if it's whitespace right then we

768
00:30:03,420 --> 00:30:11,220
skip over it else if it's one of these

769
00:30:06,869 --> 00:30:12,959
guys right let's say it's that then we

770
00:30:11,220 --> 00:30:14,759
want to potentially parse a comment

771
00:30:12,960 --> 00:30:23,009
right so we would do something like okay

772
00:30:14,759 --> 00:30:25,349
like this right so that's gonna be a

773
00:30:23,009 --> 00:30:29,490
comment right that's gonna be a C style

774
00:30:25,349 --> 00:30:31,259
comment VAR c style comment and

775
00:30:29,490 --> 00:30:33,480
furthermore we also have the same

776
00:30:31,259 --> 00:30:36,089
situation happened here where we might

777
00:30:33,480 --> 00:30:39,000
have something that opens I'm sorry that

778
00:30:36,089 --> 00:30:44,329
pass was a C++ style comment I misspoke

779
00:30:39,000 --> 00:30:44,329
and here is the C style comment right

780
00:30:46,130 --> 00:30:54,240
something like that okay so assuming

781
00:30:51,779 --> 00:30:56,910
that none of those is true then we're

782
00:30:54,240 --> 00:31:00,058
done no more white space to be eaten

783
00:30:56,910 --> 00:31:01,950
right so now we've got our work cut out

784
00:31:00,058 --> 00:31:04,230
for us we've got all the stuff in there

785
00:31:01,950 --> 00:31:06,000
for the most part for some reason I

786
00:31:04,230 --> 00:31:08,190
insist on typing tokenizer dot even

787
00:31:06,000 --> 00:31:09,929
those tokenizer arrow I will rectify

788
00:31:08,190 --> 00:31:15,269
that with a little search and replace

789
00:31:09,929 --> 00:31:17,370
and done and then we just have a bunch

790
00:31:15,269 --> 00:31:19,980
of things here that aren't actually

791
00:31:17,369 --> 00:31:25,439
implemented yet right so let's do parse

792
00:31:19,980 --> 00:31:28,529
the seesaw comment all all that needs to

793
00:31:25,440 --> 00:31:33,179
do right is it just needs to go until it

794
00:31:28,529 --> 00:31:34,500
sees star slash so we can assume in cure

795
00:31:33,179 --> 00:31:39,390
I guess we'll just say that the

796
00:31:34,500 --> 00:31:42,710
tokenizer at right we just skip over in

797
00:31:39,390 --> 00:31:46,169
either case we skip over that part right

798
00:31:42,710 --> 00:31:49,079
and I think actually now that I think

799
00:31:46,169 --> 00:31:50,700
about it we can probably we I don't even

800
00:31:49,079 --> 00:31:52,889
know why I bothered putting these in

801
00:31:50,700 --> 00:31:54,150
here they're pretty straightforward so I

802
00:31:52,890 --> 00:31:56,040
wonder if maybe I should just write them

803
00:31:54,150 --> 00:32:02,150
in line write all that all that they

804
00:31:56,039 --> 00:32:09,750
actually do is you know while tokenizer

805
00:32:02,150 --> 00:32:12,059
at you know is not equal to and and

806
00:32:09,750 --> 00:32:15,000
tokenize radicals are so while it's not

807
00:32:12,058 --> 00:32:16,379
a an end-of-line right and i could

808
00:32:15,000 --> 00:32:19,230
actually do something to even here

809
00:32:16,380 --> 00:32:21,540
that's like is end of line kind of a

810
00:32:19,230 --> 00:32:25,829
thing I could just even have a function

811
00:32:21,539 --> 00:32:27,470
that tells me that right and something

812
00:32:25,829 --> 00:32:31,470
like that

813
00:32:27,470 --> 00:32:32,940
right that makes sense so yeah if I want

814
00:32:31,470 --> 00:32:37,140
to do something like that I can just do

815
00:32:32,940 --> 00:32:37,890
like while not is end of line on the

816
00:32:37,140 --> 00:32:44,090
tokenizer

817
00:32:37,890 --> 00:32:44,090
at zero let's just go ahead and advance

818
00:32:46,210 --> 00:32:52,210
right so that just eats everything till

819
00:32:48,878 --> 00:32:53,709
the end of the line and of course I also

820
00:32:52,210 --> 00:32:55,329
again want to check to make sure we're

821
00:32:53,710 --> 00:32:57,639
not null so you know while there is a

822
00:32:55,329 --> 00:33:00,460
character to read and it's not the end

823
00:32:57,638 --> 00:33:01,449
of the line then keep going and just eat

824
00:33:00,460 --> 00:33:05,649
it eat it all up

825
00:33:01,450 --> 00:33:09,909
right the same exact thing will happen

826
00:33:05,648 --> 00:33:11,709
here right and and that's like after we

827
00:33:09,909 --> 00:33:17,700
skip over this guy we just keep going

828
00:33:11,710 --> 00:33:21,970
and say okay while we do not hit hmm

829
00:33:17,700 --> 00:33:26,340
sort of that the stop the the the

830
00:33:21,970 --> 00:33:36,069
closing part right so while we don't get

831
00:33:26,339 --> 00:33:37,269
basically this guy that makes sense so

832
00:33:36,069 --> 00:33:42,038
we're basically saying while there's a

833
00:33:37,269 --> 00:33:47,169
character to read and the I should say

834
00:33:42,038 --> 00:33:50,829
this way while I nice is a little

835
00:33:47,169 --> 00:33:54,038
boolean logic for you there while that

836
00:33:50,829 --> 00:33:58,329
whole thing is not true right

837
00:33:54,038 --> 00:34:01,359
while the the star slash is not exactly

838
00:33:58,329 --> 00:34:04,118
what comes next right then we can

839
00:34:01,359 --> 00:34:06,368
advance ahead right when we break out of

840
00:34:04,118 --> 00:34:10,659
that if the thing that we're looking at

841
00:34:06,368 --> 00:34:13,058
is the star right then we are going to

842
00:34:10,659 --> 00:34:14,349
want to advance past it because that

843
00:34:13,059 --> 00:34:15,790
means that we didn't run out of

844
00:34:14,349 --> 00:34:18,179
characters and we want to skip the star

845
00:34:15,789 --> 00:34:21,639
in the slash which we ended on right

846
00:34:18,179 --> 00:34:24,760
okay so that's really it for those guys

847
00:34:21,639 --> 00:34:28,960
now we just have a few more note we got

848
00:34:24,760 --> 00:34:31,270
to fix the errant plural there now we

849
00:34:28,960 --> 00:34:33,579
just have to do our sort of more

850
00:34:31,269 --> 00:34:34,898
complicated person here where we're

851
00:34:33,579 --> 00:34:37,240
going to sort of try to pull out these

852
00:34:34,898 --> 00:34:39,398
other sorts of things so we've got two

853
00:34:37,239 --> 00:34:41,078
things we've got is alpha so you want

854
00:34:39,398 --> 00:34:43,269
something that tells us whether this is

855
00:34:41,079 --> 00:34:44,589
an alphabetical character we also want

856
00:34:43,269 --> 00:34:46,418
something that's going to tell us you

857
00:34:44,588 --> 00:34:48,730
know is it numeric is it gonna be a new

858
00:34:46,418 --> 00:34:50,828
number thing and for right now I think

859
00:34:48,730 --> 00:34:54,250
we can probably just just use Falls for

860
00:34:50,829 --> 00:34:56,740
that because we'll get to that maybe a

861
00:34:54,250 --> 00:34:59,329
little bit later on right

862
00:34:56,739 --> 00:35:03,909
how exactly we'd want to do that

863
00:34:59,329 --> 00:35:07,699
so this is you know to do kc once we do

864
00:35:03,909 --> 00:35:11,929
numbers do this right although I suppose

865
00:35:07,699 --> 00:35:14,989
you know we can probably guess if we

866
00:35:11,929 --> 00:35:18,109
wanted to that's like you know if C is

867
00:35:14,989 --> 00:35:21,229
greater than equal to 0 and C is less

868
00:35:18,110 --> 00:35:24,260
than or equal to 9 then it's a digit

869
00:35:21,230 --> 00:35:26,329
right if that makes sense and there's

870
00:35:24,260 --> 00:35:29,300
probably like a dot that would also be

871
00:35:26,329 --> 00:35:31,789
another one in there and like the F and

872
00:35:29,300 --> 00:35:33,500
an O X right so there's probably some

873
00:35:31,789 --> 00:35:35,000
things but for now we'll just use that

874
00:35:33,500 --> 00:35:36,829
one and we'll go a little bit further

875
00:35:35,000 --> 00:35:39,889
when we need when we actually need to

876
00:35:36,829 --> 00:35:41,929
write these alphas really simple that's

877
00:35:39,889 --> 00:35:44,989
just going to check to see whether were

878
00:35:41,929 --> 00:35:49,210
in the alphabetic range of the ASCII

879
00:35:44,989 --> 00:35:52,929
character set right so here is that

880
00:35:49,210 --> 00:35:58,849
that's for lowercase and we can do that

881
00:35:52,929 --> 00:36:00,139
or uppercase okay so that you know test

882
00:35:58,849 --> 00:36:03,170
those two right that's whether or not

883
00:36:00,139 --> 00:36:05,299
South with your merit we can now get

884
00:36:03,170 --> 00:36:07,039
that sort of information back and so we

885
00:36:05,300 --> 00:36:09,800
just need now to be able to do the two

886
00:36:07,039 --> 00:36:12,079
parses parse number we don't really need

887
00:36:09,800 --> 00:36:13,970
yet because we don't care about that so

888
00:36:12,079 --> 00:36:15,650
really what we could do here is just

889
00:36:13,969 --> 00:36:17,359
sort of like I said wait a second on

890
00:36:15,650 --> 00:36:18,920
this one and we'll kind of look at that

891
00:36:17,360 --> 00:36:21,140
one a little bit later when we actually

892
00:36:18,920 --> 00:36:23,389
care about it so for now all we'll do is

893
00:36:21,139 --> 00:36:25,940
when we get to a default thing we'll

894
00:36:23,389 --> 00:36:28,159
probably just say like okay we don't

895
00:36:25,940 --> 00:36:30,200
know what this token actually was so

896
00:36:28,159 --> 00:36:32,599
maybe we just say at that point we throw

897
00:36:30,199 --> 00:36:36,500
it out right so we just say like okay

898
00:36:32,599 --> 00:36:38,839
this token dot type equals token unknown

899
00:36:36,500 --> 00:36:42,579
or something like that right so there's

900
00:36:38,840 --> 00:36:42,579
just some kind of thing like this token

901
00:36:43,210 --> 00:36:48,829
okay and what we'll do here is we'll

902
00:36:47,090 --> 00:36:51,410
also say that you know in the case where

903
00:36:48,829 --> 00:36:57,110
the token is unknown right we could also

904
00:36:51,409 --> 00:36:58,549
do something where we skip those right

905
00:36:57,110 --> 00:37:00,920
so we won't print those that will only

906
00:36:58,550 --> 00:37:02,930
print tokens that we know for now so

907
00:37:00,920 --> 00:37:04,730
that seems hopefully pretty basic all

908
00:37:02,929 --> 00:37:06,710
that seems good parse identifiers

909
00:37:04,730 --> 00:37:08,360
actually now I think about it it's

910
00:37:06,710 --> 00:37:10,190
really not that complicated either I

911
00:37:08,360 --> 00:37:11,809
mean all we really have to do is say

912
00:37:10,190 --> 00:37:13,070
okay the token starts where it took

913
00:37:11,809 --> 00:37:14,449
where it started

914
00:37:13,070 --> 00:37:15,740
and so we just need to do the lengths we

915
00:37:14,449 --> 00:37:17,480
should also do that for our string by

916
00:37:15,739 --> 00:37:19,219
the way here at the end of our string

917
00:37:17,480 --> 00:37:21,170
when we do all of our string parsing we

918
00:37:19,219 --> 00:37:23,750
picked up what the string text was right

919
00:37:21,170 --> 00:37:25,789
but we need to to set the length which

920
00:37:23,750 --> 00:37:28,369
we didn't do and we also need to set the

921
00:37:25,789 --> 00:37:31,940
type right which is the token string so

922
00:37:28,369 --> 00:37:34,339
we need to say this a string and then we

923
00:37:31,940 --> 00:37:36,470
also need to set the end of it right so

924
00:37:34,340 --> 00:37:38,690
at the end of all of this once the thing

925
00:37:36,469 --> 00:37:41,539
has gotten to the end what we want to do

926
00:37:38,690 --> 00:37:43,760
is say okay at this point we should be

927
00:37:41,539 --> 00:37:45,650
sitting on the actual you know the

928
00:37:43,760 --> 00:37:47,660
actual stopping point so we should be

929
00:37:45,650 --> 00:37:51,760
able to say whatever the distance is

930
00:37:47,659 --> 00:37:54,710
between the app function right and

931
00:37:51,760 --> 00:37:59,330
whatever that place we started and where

932
00:37:54,710 --> 00:38:00,800
we began right which we saved sorry the

933
00:37:59,329 --> 00:38:02,659
place that we're at now and the place

934
00:38:00,800 --> 00:38:03,800
that we began if we subtract the two of

935
00:38:02,659 --> 00:38:05,239
them we should get the length of the

936
00:38:03,800 --> 00:38:07,039
token right so with the first part of

937
00:38:05,239 --> 00:38:08,419
the string the first character string we

938
00:38:07,039 --> 00:38:09,829
know where that was that's token text

939
00:38:08,420 --> 00:38:12,260
the last character string we're sitting

940
00:38:09,829 --> 00:38:13,880
on it now right and it's that closing

941
00:38:12,260 --> 00:38:16,220
quote so we track those two what we're

942
00:38:13,880 --> 00:38:18,260
done but we also want to do is skip that

943
00:38:16,219 --> 00:38:20,839
closing quote because we're still

944
00:38:18,260 --> 00:38:22,580
sitting on it right so assuming that we

945
00:38:20,840 --> 00:38:23,870
actually found the closing quote and

946
00:38:22,579 --> 00:38:26,029
it's not that we hit the null terminator

947
00:38:23,869 --> 00:38:27,079
and like you know it was an unclothed

948
00:38:26,030 --> 00:38:29,360
string or something

949
00:38:27,079 --> 00:38:31,730
assuming we hit that closing quote then

950
00:38:29,360 --> 00:38:36,079
we want to skip the closing quote make

951
00:38:31,730 --> 00:38:38,840
sense okay so that's really pretty basic

952
00:38:36,079 --> 00:38:40,549
and again this stuff I could I guess

953
00:38:38,840 --> 00:38:41,720
I'll expand this detector be a size feel

954
00:38:40,550 --> 00:38:44,570
though we're never gonna be parsing

955
00:38:41,719 --> 00:38:48,259
files that are that big I'll say it's a

956
00:38:44,570 --> 00:38:52,220
size T for now very good okay so press

957
00:38:48,260 --> 00:38:54,110
identifier oops mistake

958
00:38:52,219 --> 00:38:57,980
thank you compiler for catching that um

959
00:38:54,110 --> 00:39:00,970
so for parsing this guy an identifier is

960
00:38:57,980 --> 00:39:03,110
just a collection of alpha and numeric

961
00:39:00,969 --> 00:39:03,739
things plus the ability to have an

962
00:39:03,110 --> 00:39:05,360
underscore

963
00:39:03,739 --> 00:39:07,819
so really all we're gonna do here for

964
00:39:05,360 --> 00:39:09,349
this is we're just gonna say while

965
00:39:07,820 --> 00:39:12,830
tokenizer at zero

966
00:39:09,349 --> 00:39:21,339
you know while that whatever that is is

967
00:39:12,829 --> 00:39:21,340
alpha or it could be is numeric

968
00:39:21,610 --> 00:39:31,309
or it's an underscore right and I think

969
00:39:29,119 --> 00:39:33,799
I'm gonna say is number because now

970
00:39:31,309 --> 00:39:36,380
we're actually using that for reals

971
00:39:33,800 --> 00:39:38,030
right so I think I actually want to call

972
00:39:36,380 --> 00:39:40,190
this is number because that's a little

973
00:39:38,030 --> 00:39:42,470
clearer then that's the things we can

974
00:39:40,190 --> 00:39:44,059
put in identifiers in our code that's

975
00:39:42,469 --> 00:39:46,129
all the things we ever use for them

976
00:39:44,059 --> 00:39:47,599
so while that's the case we'll go ahead

977
00:39:46,130 --> 00:39:50,269
and advance the tokenizer

978
00:39:47,599 --> 00:39:54,710
at at the end of this again we will just

979
00:39:50,269 --> 00:39:56,269
have that tokenizer at be specifying the

980
00:39:54,710 --> 00:39:59,659
link this way so it's wherever it

981
00:39:56,269 --> 00:40:01,940
started versus where it ended so I think

982
00:39:59,659 --> 00:40:05,329
that's everything at the end we return

983
00:40:01,940 --> 00:40:08,300
the token that we got and we continue

984
00:40:05,329 --> 00:40:10,460
right so that's pretty straightforward

985
00:40:08,300 --> 00:40:11,360
so let's see what we've got here let's

986
00:40:10,460 --> 00:40:12,409
go ahead and step through this we

987
00:40:11,360 --> 00:40:14,120
probably have a bunch of bugs that's a

988
00:40:12,409 --> 00:40:15,349
lot of code to type in at once like I

989
00:40:14,119 --> 00:40:17,509
said I went pretty fast as I wanted to

990
00:40:15,349 --> 00:40:18,589
kind of compress it down just because

991
00:40:17,510 --> 00:40:21,230
it's something that we're kind of doing

992
00:40:18,590 --> 00:40:23,600
a weird stream not like we normally do

993
00:40:21,230 --> 00:40:25,849
but anyway here's our tokenizer in

994
00:40:23,599 --> 00:40:28,579
action our lexer basically the first

995
00:40:25,849 --> 00:40:30,409
part of the tokenizing so here we are

996
00:40:28,579 --> 00:40:31,880
looking at this stuff so we're gonna

997
00:40:30,409 --> 00:40:33,769
have some things we don't understand

998
00:40:31,880 --> 00:40:36,410
like that pound we don't know what that

999
00:40:33,769 --> 00:40:38,179
is so we should go in here and and get

1000
00:40:36,409 --> 00:40:40,069
an unknown token which we did

1001
00:40:38,179 --> 00:40:41,960
let's see now this token should be an

1002
00:40:40,070 --> 00:40:43,820
identifier basically we're gonna go in

1003
00:40:41,960 --> 00:40:45,050
here to eat all whitespace we're gonna

1004
00:40:43,820 --> 00:40:46,760
look at this thing and it's none of

1005
00:40:45,050 --> 00:40:48,289
these right so we're gonna exit out of

1006
00:40:46,760 --> 00:40:51,680
there we're gonna start by assuming that

1007
00:40:48,289 --> 00:40:54,500
we have a token length of 1 here is the

1008
00:40:51,679 --> 00:40:59,269
token text right we're starts on that

1009
00:40:54,500 --> 00:41:02,300
pound Oh aha we do have a bug already

1010
00:40:59,269 --> 00:41:04,730
token unknown when it sets that needs to

1011
00:41:02,300 --> 00:41:07,880
skip over right these guys need to skip

1012
00:41:04,730 --> 00:41:10,579
over the token app so none of these guys

1013
00:41:07,880 --> 00:41:13,670
I guess that's sort of the thing these

1014
00:41:10,579 --> 00:41:17,779
guys don't skip over that first that

1015
00:41:13,670 --> 00:41:19,190
first guy right and that's a that's a

1016
00:41:17,780 --> 00:41:25,190
problem so how do we want to deal with

1017
00:41:19,190 --> 00:41:26,840
that right how do we want to how do we

1018
00:41:25,190 --> 00:41:28,130
want to make it so that these can be

1019
00:41:26,840 --> 00:41:32,600
convenient you know because I can do

1020
00:41:28,130 --> 00:41:33,920
this but it seems a little bit annoying

1021
00:41:32,599 --> 00:41:37,219
for me to kind of have

1022
00:41:33,920 --> 00:41:38,510
do it every time like that I don't know

1023
00:41:37,219 --> 00:41:43,759
doesn't that seem like kind of a pain

1024
00:41:38,510 --> 00:41:45,380
maybe it's not a pain but for these

1025
00:41:43,760 --> 00:41:48,290
hand-coded guys you know I mean you

1026
00:41:45,380 --> 00:41:50,030
could always back it up I suppose we

1027
00:41:48,289 --> 00:41:51,380
could do something ridiculous right we

1028
00:41:50,030 --> 00:41:54,920
could do something like this where we

1029
00:41:51,380 --> 00:41:58,099
say you know by default go go past it or

1030
00:41:54,920 --> 00:42:00,889
something like this so we do like care C

1031
00:41:58,099 --> 00:42:03,109
equals tokenizer at wow this could be a

1032
00:42:00,889 --> 00:42:05,629
real bad idea but we could do something

1033
00:42:03,108 --> 00:42:07,159
like that so that all of these work and

1034
00:42:05,630 --> 00:42:08,420
then this guy of course this would just

1035
00:42:07,159 --> 00:42:10,940
work because he already wanted to

1036
00:42:08,420 --> 00:42:12,769
advance by the quote so that's fine so

1037
00:42:10,940 --> 00:42:15,740
it's really this guy who needs to know

1038
00:42:12,769 --> 00:42:17,389
what's going on here right so this guy

1039
00:42:15,739 --> 00:42:22,279
says something like all right assuming

1040
00:42:17,389 --> 00:42:24,500
that C was alpha right then we're gonna

1041
00:42:22,280 --> 00:42:25,579
run through these guys while it's still

1042
00:42:24,500 --> 00:42:27,650
their work you know we're gonna kind of

1043
00:42:25,579 --> 00:42:29,990
add to it and I think the rest of this

1044
00:42:27,650 --> 00:42:31,869
sort of works so let's let's just see

1045
00:42:29,989 --> 00:42:35,929
how that goes right

1046
00:42:31,869 --> 00:42:37,880
okay so let's see what we get here let's

1047
00:42:35,929 --> 00:42:40,039
get back our first token there's our

1048
00:42:37,880 --> 00:42:41,720
token it's a token unknown it's one

1049
00:42:40,039 --> 00:42:43,759
length of one it's that pound right

1050
00:42:41,719 --> 00:42:46,219
there which is what we expect so that's

1051
00:42:43,760 --> 00:42:49,609
good let's now see what the next token

1052
00:42:46,219 --> 00:42:52,009
is the Lexx token is token of length two

1053
00:42:49,608 --> 00:42:53,838
but that's specified as unknown as well

1054
00:42:52,010 --> 00:42:56,630
I think that's just because again that

1055
00:42:53,838 --> 00:42:59,779
was just me forgetting in here we've got

1056
00:42:56,630 --> 00:43:02,119
to set the token type right - token

1057
00:42:59,780 --> 00:43:04,309
identifier but that should have that

1058
00:43:02,119 --> 00:43:05,568
shoulda parsed okay right in fact I

1059
00:43:04,309 --> 00:43:07,250
should probably do that look right at

1060
00:43:05,568 --> 00:43:08,659
the top when we do them for the most

1061
00:43:07,250 --> 00:43:13,519
part just so I can see that I actually

1062
00:43:08,659 --> 00:43:16,308
do it there okay all right so there we

1063
00:43:13,519 --> 00:43:18,619
go there's our token unknown now we

1064
00:43:16,309 --> 00:43:20,599
should get a token identifier and hey we

1065
00:43:18,619 --> 00:43:23,568
did it's text length too so we're going

1066
00:43:20,599 --> 00:43:25,970
to print it out to the console and

1067
00:43:23,568 --> 00:43:27,048
there's the output right from it oh well

1068
00:43:25,969 --> 00:43:28,578
actually know the outputs over here

1069
00:43:27,048 --> 00:43:31,400
because it's a console app so there's an

1070
00:43:28,579 --> 00:43:34,099
eleven there was our if and so as we run

1071
00:43:31,400 --> 00:43:36,349
I think we'll probably be okay so I can

1072
00:43:34,099 --> 00:43:39,190
probably just actually run this guy on

1073
00:43:36,349 --> 00:43:43,490
handmade code now and actually get it to

1074
00:43:39,190 --> 00:43:45,318
to work right so there it is right and

1075
00:43:43,489 --> 00:43:46,879
you can already see that just from this

1076
00:43:45,318 --> 00:43:48,019
you can see that we're kind of already

1077
00:43:46,880 --> 00:43:49,519
parsing what we need

1078
00:43:48,019 --> 00:43:51,110
parce right do you see how this has

1079
00:43:49,519 --> 00:43:53,360
already kind of lined up into what we

1080
00:43:51,110 --> 00:43:55,250
need right I mean you saw how simple

1081
00:43:53,360 --> 00:43:58,070
that was what I just typed in and now

1082
00:43:55,250 --> 00:44:00,679
we've got a really straightforward kind

1083
00:43:58,070 --> 00:44:02,360
of a situation here for being able to

1084
00:44:00,679 --> 00:44:03,889
pull these guys out right so we're

1085
00:44:02,360 --> 00:44:05,570
starting we're starting to get there how

1086
00:44:03,889 --> 00:44:06,889
much time you got left we have 15

1087
00:44:05,570 --> 00:44:09,800
minutes left I don't know if we'll quite

1088
00:44:06,889 --> 00:44:12,019
make it in time but we'll see all right

1089
00:44:09,800 --> 00:44:14,060
so let's start by trying to identify

1090
00:44:12,019 --> 00:44:17,030
that part that we actually wanted to

1091
00:44:14,059 --> 00:44:19,940
grab there so as we're doing this this

1092
00:44:17,030 --> 00:44:22,940
tokenizing what I want to do is I want

1093
00:44:19,940 --> 00:44:25,220
to go ahead into handmade sim region

1094
00:44:22,940 --> 00:44:26,809
here and take a look that is the key

1095
00:44:25,219 --> 00:44:28,789
that we're looking for we're looking for

1096
00:44:26,809 --> 00:44:31,219
this introspect and we want to go ahead

1097
00:44:28,789 --> 00:44:33,500
and grab that out right so what I want

1098
00:44:31,219 --> 00:44:37,639
to do here is go okay if I hit a token

1099
00:44:33,500 --> 00:44:39,380
identifier okay so I've seen an

1100
00:44:37,639 --> 00:44:40,639
identifier what I want to do is that you

1101
00:44:39,380 --> 00:44:42,710
want to know is the identifier

1102
00:44:40,639 --> 00:44:44,480
introspect right so I want to do is say

1103
00:44:42,710 --> 00:44:48,740
if token equals something like this

1104
00:44:44,480 --> 00:44:52,039
right introspect something like this

1105
00:44:48,739 --> 00:44:55,219
then I want to parse an introspection

1106
00:44:52,039 --> 00:44:57,259
right you know or int respectable

1107
00:44:55,219 --> 00:44:59,299
something like that right so I'm at a

1108
00:44:57,260 --> 00:45:01,670
person is respectable I need to pass the

1109
00:44:59,300 --> 00:45:03,500
tokenizer to it and that's how we know

1110
00:45:01,670 --> 00:45:06,769
we're gonna start parsing one of these

1111
00:45:03,500 --> 00:45:08,780
special structures something that you

1112
00:45:06,769 --> 00:45:10,429
know has been marked up especially for

1113
00:45:08,780 --> 00:45:13,100
us so we know that it's something that

1114
00:45:10,429 --> 00:45:15,230
we want to use in in our you know in our

1115
00:45:13,099 --> 00:45:17,449
pre pass or whatever right so there's

1116
00:45:15,230 --> 00:45:19,490
the tokenizing that's gonna happen there

1117
00:45:17,449 --> 00:45:21,859
and and what I'll do is I'll just

1118
00:45:19,489 --> 00:45:23,809
suppress this printf for the default now

1119
00:45:21,860 --> 00:45:26,660
and what I'll do here is I'll just

1120
00:45:23,809 --> 00:45:28,699
printf our introspective all at this

1121
00:45:26,659 --> 00:45:31,009
point right mobile start will start in

1122
00:45:28,699 --> 00:45:33,529
there okay so what I need first of all

1123
00:45:31,010 --> 00:45:34,910
is I need that token equals to be a

1124
00:45:33,530 --> 00:45:37,070
thing because we haven't written that

1125
00:45:34,909 --> 00:45:39,230
yet and so here what I want to do is I

1126
00:45:37,070 --> 00:45:41,059
want to make an inline that returns a

1127
00:45:39,230 --> 00:45:42,679
bool and what it does is it takes

1128
00:45:41,059 --> 00:45:46,130
whatever the token is you know whatever

1129
00:45:42,679 --> 00:45:49,460
that token was and then it takes a care

1130
00:45:46,130 --> 00:45:51,950
star that's like you know the string the

1131
00:45:49,460 --> 00:45:55,039
mat and it just sees whether or not it

1132
00:45:51,949 --> 00:45:57,649
matches right and so what it's going to

1133
00:45:55,039 --> 00:46:00,079
do is it's going to say okay I know that

1134
00:45:57,650 --> 00:46:01,250
the token is a certain length right I

1135
00:46:00,079 --> 00:46:03,519
know that it's text length

1136
00:46:01,250 --> 00:46:10,579
so I'm going to go through and say okay

1137
00:46:03,519 --> 00:46:14,539
from zero to token length like so I want

1138
00:46:10,579 --> 00:46:18,619
to make sure that match of that index

1139
00:46:14,539 --> 00:46:21,079
and token text of that index I want to

1140
00:46:18,619 --> 00:46:24,200
make sure they're equal right so if

1141
00:46:21,079 --> 00:46:30,890
they're not equal it's over it's false

1142
00:46:24,199 --> 00:46:34,730
right make sense

1143
00:46:30,889 --> 00:46:40,789
and similarly I want to make sure that

1144
00:46:34,730 --> 00:46:42,500
if the match index right I should

1145
00:46:40,789 --> 00:46:44,869
actually say also here just do this up

1146
00:46:42,500 --> 00:46:46,699
first so if the match of index if that

1147
00:46:44,869 --> 00:46:48,349
equals zero so it's the null right the

1148
00:46:46,699 --> 00:46:51,169
null terminator that kind of thing right

1149
00:46:48,349 --> 00:46:58,369
it's just zero if the match index is

1150
00:46:51,170 --> 00:47:01,000
zero or they don't match then return

1151
00:46:58,369 --> 00:47:03,440
false otherwise

1152
00:47:01,000 --> 00:47:08,150
the result of this function is just

1153
00:47:03,440 --> 00:47:11,960
going to be whether I'm gonna need this

1154
00:47:08,150 --> 00:47:14,450
index on time mmm is going to be whether

1155
00:47:11,960 --> 00:47:15,829
or not we got to the end of match so I'm

1156
00:47:14,449 --> 00:47:22,159
gonna need something well you know what

1157
00:47:15,829 --> 00:47:25,250
I can do let's just do this right so as

1158
00:47:22,159 --> 00:47:30,379
we go through this we just say okay if

1159
00:47:25,250 --> 00:47:35,059
you know start at start at something

1160
00:47:30,380 --> 00:47:36,818
like that right then advance them in

1161
00:47:35,059 --> 00:47:39,529
fact I can't even put that right in here

1162
00:47:36,818 --> 00:47:42,619
so just run along match check it against

1163
00:47:39,530 --> 00:47:45,530
the thing when we get to the end if star

1164
00:47:42,619 --> 00:47:47,599
at happens to be equal to the null

1165
00:47:45,530 --> 00:47:50,269
terminator we know we got they both

1166
00:47:47,599 --> 00:47:52,670
ended at the same time and so we know

1167
00:47:50,269 --> 00:47:56,139
that we can say that that it was

1168
00:47:52,670 --> 00:47:58,280
actually true otherwise it's false so

1169
00:47:56,139 --> 00:48:03,650
that's just a little like string compare

1170
00:47:58,280 --> 00:48:06,400
thing that we have there and we can go

1171
00:48:03,650 --> 00:48:10,309
ahead and test it so let me go ahead and

1172
00:48:06,400 --> 00:48:11,599
come down here right and so let's go

1173
00:48:10,309 --> 00:48:13,730
ahead and see what happens

1174
00:48:11,599 --> 00:48:14,920
if I step in here and now the token

1175
00:48:13,730 --> 00:48:16,990
itself right

1176
00:48:14,920 --> 00:48:19,180
is obviously going to be equal to

1177
00:48:16,989 --> 00:48:20,019
something totally not that it's like if

1178
00:48:19,179 --> 00:48:22,358
right

1179
00:48:20,019 --> 00:48:24,699
and so our app is pokey beginning here

1180
00:48:22,358 --> 00:48:27,338
we go to through the index the index is

1181
00:48:24,699 --> 00:48:33,460
zero these two won't match so we should

1182
00:48:27,338 --> 00:48:36,789
return or not Oh idiot because it's an

1183
00:48:33,460 --> 00:48:38,440
eye alright so actually they will match

1184
00:48:36,789 --> 00:48:40,029
on the first one then they won't match

1185
00:48:38,440 --> 00:48:42,400
on the second one and it should return

1186
00:48:40,030 --> 00:48:44,440
false so off it goes but then eventually

1187
00:48:42,400 --> 00:48:46,630
we should get to one that returns true

1188
00:48:44,440 --> 00:48:48,068
if we done it correctly but I don't know

1189
00:48:46,630 --> 00:48:49,240
if we actually did doesn't look like we

1190
00:48:48,068 --> 00:48:52,480
did because we never actually got to a

1191
00:48:49,239 --> 00:48:55,058
token that equals that so now we got to

1192
00:48:52,480 --> 00:48:58,210
go and actually see let's double check

1193
00:48:55,059 --> 00:49:02,319
here when we get to a token I guess what

1194
00:48:58,210 --> 00:49:07,568
I'll do is I'll say if I just want to be

1195
00:49:02,318 --> 00:49:15,719
able to plug this code if token text

1196
00:49:07,568 --> 00:49:25,179
zero equals I and token text 1 equals n

1197
00:49:15,719 --> 00:49:27,608
write something like this and so this

1198
00:49:25,179 --> 00:49:30,480
way I can just I'll only have to look at

1199
00:49:27,608 --> 00:49:34,808
the ones that actually have some thing

1200
00:49:30,480 --> 00:49:38,650
related to introspect and then we'll you

1201
00:49:34,809 --> 00:49:40,540
know go from there ok so here we go

1202
00:49:38,650 --> 00:49:41,920
let's see if we've gotten to a token

1203
00:49:40,539 --> 00:49:43,389
that's relevant there it is that's a

1204
00:49:41,920 --> 00:49:45,639
token we want so we hit getting the

1205
00:49:43,389 --> 00:49:48,159
token equals we take a look at what's

1206
00:49:45,639 --> 00:49:50,469
happening with our matching so now let's

1207
00:49:48,159 --> 00:49:53,679
see where we're at and at and where we

1208
00:49:50,469 --> 00:49:58,058
aren't index is 0 so we advance through

1209
00:49:53,679 --> 00:50:06,219
these guys we're advancing through as we

1210
00:49:58,059 --> 00:50:10,450
would expect right and what happened

1211
00:50:06,219 --> 00:50:14,009
there what is the token length one two

1212
00:50:10,449 --> 00:50:16,750
three four five six seven eight nine ten

1213
00:50:14,010 --> 00:50:23,619
but that yeah and the token like this

1214
00:50:16,750 --> 00:50:25,858
ten but our start at what happened there

1215
00:50:23,619 --> 00:50:25,858
Oh

1216
00:50:26,570 --> 00:50:34,340
oh that's just a typo well we almost did

1217
00:50:30,139 --> 00:50:35,000
it right we almost did it right that's

1218
00:50:34,340 --> 00:50:38,360
pretty funny

1219
00:50:35,000 --> 00:50:41,539
all right there we go so now hopefully

1220
00:50:38,360 --> 00:50:43,550
we're back in business there we go

1221
00:50:41,539 --> 00:50:46,250
so here we are parsing and respectable

1222
00:50:43,550 --> 00:50:48,050
so now we have to do is actually do some

1223
00:50:46,250 --> 00:50:51,909
gathering of the stuff from there and

1224
00:50:48,050 --> 00:50:55,160
let's see if we can do that right okay

1225
00:50:51,909 --> 00:50:58,039
so what we want to do in parse it's

1226
00:50:55,159 --> 00:51:00,469
respectable is we want to just like read

1227
00:50:58,039 --> 00:51:01,969
out exactly what this thing is right so

1228
00:51:00,469 --> 00:51:03,949
we know that we've gotten a token for

1229
00:51:01,969 --> 00:51:05,329
introspect so now we want to do is we

1230
00:51:03,949 --> 00:51:08,210
want to basically like get the

1231
00:51:05,329 --> 00:51:09,920
parenthetical phrase there so I'm gonna

1232
00:51:08,210 --> 00:51:11,599
kind of do this very straightforwardly

1233
00:51:09,920 --> 00:51:13,849
because again we only have about ten

1234
00:51:11,599 --> 00:51:15,710
minutes left so I'm going to do sort of

1235
00:51:13,849 --> 00:51:17,750
the base version and then maybe Monday

1236
00:51:15,710 --> 00:51:19,670
since if people found this useful or

1237
00:51:17,750 --> 00:51:22,340
interesting I'll show how to do a little

1238
00:51:19,670 --> 00:51:23,269
bit better right but it would look

1239
00:51:22,340 --> 00:51:27,890
something like this

1240
00:51:23,269 --> 00:51:35,389
right you know something like if require

1241
00:51:27,889 --> 00:51:37,699
token tokenizer token open paren write

1242
00:51:35,389 --> 00:51:40,400
something like that then what we'd want

1243
00:51:37,699 --> 00:51:42,049
to do is just kind of I guess I don't

1244
00:51:40,400 --> 00:51:43,400
care about this very much but what we

1245
00:51:42,050 --> 00:51:46,130
well yeah let's just do it

1246
00:51:43,400 --> 00:51:51,769
right then we do something like okay we

1247
00:51:46,130 --> 00:51:56,390
do parse purse introspection params

1248
00:51:51,769 --> 00:51:57,739
something like that right and we could

1249
00:51:56,389 --> 00:52:00,259
almost even do this where we didn't

1250
00:51:57,739 --> 00:52:02,719
actually have to do that but you know we

1251
00:52:00,260 --> 00:52:04,640
should do it anyway right and here you

1252
00:52:02,719 --> 00:52:07,789
know we do something like a printf you

1253
00:52:04,639 --> 00:52:10,960
know f2 standard error we'd say

1254
00:52:07,789 --> 00:52:13,909
something like error missing parentheses

1255
00:52:10,960 --> 00:52:15,650
right and we'd want to kind of do a

1256
00:52:13,909 --> 00:52:16,699
better error for these schemes can I say

1257
00:52:15,650 --> 00:52:19,160
I'm doing but I'm doing this sort of

1258
00:52:16,699 --> 00:52:21,079
bare minimum thing here rather than

1259
00:52:19,159 --> 00:52:22,940
anything fancy so okay we require the

1260
00:52:21,079 --> 00:52:25,429
token we do parse introspection for Rams

1261
00:52:22,940 --> 00:52:28,369
assuming that we actually get those out

1262
00:52:25,429 --> 00:52:31,250
right then we would do something where

1263
00:52:28,369 --> 00:52:33,799
we go OK token token equals get token

1264
00:52:31,250 --> 00:52:37,760
and this is probably like struct token

1265
00:52:33,800 --> 00:52:39,340
right so we go or or you know type token

1266
00:52:37,760 --> 00:52:41,890
like what's the thing we're going to do

1267
00:52:39,340 --> 00:52:43,240
let's see so we do get token on the

1268
00:52:41,889 --> 00:52:48,879
tokenizer right

1269
00:52:43,239 --> 00:52:50,469
if token equals you know struct then we

1270
00:52:48,880 --> 00:52:57,519
know we're parsing a struct so we do

1271
00:52:50,469 --> 00:53:04,750
like parse struct otherwise we do an

1272
00:52:57,519 --> 00:53:09,309
error introspection is only supported or

1273
00:53:04,750 --> 00:53:13,090
a structs right now sadface right

1274
00:53:09,309 --> 00:53:15,250
something like this okay so if we do

1275
00:53:13,090 --> 00:53:17,230
that we need these two things right we

1276
00:53:15,250 --> 00:53:20,349
need static void parsons inspection

1277
00:53:17,230 --> 00:53:21,639
params and there's our tokenizer and all

1278
00:53:20,349 --> 00:53:24,909
i'm going to do there is I'm just gonna

1279
00:53:21,639 --> 00:53:27,549
do like token I'm just gonna have this

1280
00:53:24,909 --> 00:53:30,909
eat everything for now right and so I'm

1281
00:53:27,550 --> 00:53:34,930
just gonna do token equals get token and

1282
00:53:30,909 --> 00:53:41,460
I'm gonna say like you know if token dot

1283
00:53:34,929 --> 00:53:46,379
type equals token close friend right or

1284
00:53:41,460 --> 00:53:48,190
token type equals token and a stream

1285
00:53:46,380 --> 00:53:49,720
then it's over

1286
00:53:48,190 --> 00:53:51,820
otherwise we eat everything so

1287
00:53:49,719 --> 00:53:53,079
eventually we'll like parse the actual

1288
00:53:51,820 --> 00:53:55,240
things in there but for now we won't

1289
00:53:53,079 --> 00:53:58,150
bother if we see a struct will parse

1290
00:53:55,239 --> 00:54:02,699
obstruct and what we do to parse a

1291
00:53:58,150 --> 00:54:07,170
struct is going to be something like

1292
00:54:02,699 --> 00:54:07,169
okay we need to get the name first

1293
00:54:10,440 --> 00:54:14,980
right that's the name of our struct then

1294
00:54:13,389 --> 00:54:16,868
we need to parse all the members of the

1295
00:54:14,980 --> 00:54:21,750
struct well actually then we need to do

1296
00:54:16,869 --> 00:54:25,630
a require token on an open brace right

1297
00:54:21,750 --> 00:54:27,400
we need open brace and then we need to

1298
00:54:25,630 --> 00:54:30,250
come in to sit here and wait till we

1299
00:54:27,400 --> 00:54:33,130
find a closed brace right so we need to

1300
00:54:30,250 --> 00:54:37,329
sit here and go like you know member

1301
00:54:33,130 --> 00:54:39,400
token equals get token tokenizer and

1302
00:54:37,329 --> 00:54:41,739
then what we do is say like okay we look

1303
00:54:39,400 --> 00:54:48,820
at that member token if the member token

1304
00:54:41,739 --> 00:54:52,868
type equals token close brace then we're

1305
00:54:48,820 --> 00:54:54,280
done right and that's that's basically

1306
00:54:52,869 --> 00:54:58,559
what we're that's basically what we're

1307
00:54:54,280 --> 00:54:58,560
after otherwise we'd parse it

1308
00:54:59,940 --> 00:55:06,329
five-minute warning getting close so you

1309
00:55:03,730 --> 00:55:08,500
know we get the token the member token

1310
00:55:06,329 --> 00:55:12,579
and then what we do is we do something

1311
00:55:08,500 --> 00:55:14,889
like parse member and pass it that

1312
00:55:12,579 --> 00:55:24,369
member so can that we got and that would

1313
00:55:14,889 --> 00:55:26,199
do whatever it's gonna do right so not

1314
00:55:24,369 --> 00:55:28,510
that complicated you can kind of see how

1315
00:55:26,199 --> 00:55:30,039
this is going and we'll see if we can

1316
00:55:28,510 --> 00:55:31,349
get most of it done in the next five

1317
00:55:30,039 --> 00:55:35,650
minutes

1318
00:55:31,349 --> 00:55:38,980
oops that supposed to be tokenizer so we

1319
00:55:35,650 --> 00:55:42,608
just need the choir token parser parse

1320
00:55:38,980 --> 00:55:46,920
member takes the member token this is

1321
00:55:42,608 --> 00:55:49,920
like the type token probably number type

1322
00:55:46,920 --> 00:55:54,608
so that's really all we need to look at

1323
00:55:49,920 --> 00:55:56,200
and inside the parse member basically we

1324
00:55:54,608 --> 00:55:57,549
can also do the same thing for this one

1325
00:55:56,199 --> 00:56:03,750
right now we can just eat till the

1326
00:55:57,550 --> 00:56:06,910
semicolon right and that should do it

1327
00:56:03,750 --> 00:56:10,000
okay so let's just quickly write require

1328
00:56:06,909 --> 00:56:12,219
token all require token is again very

1329
00:56:10,000 --> 00:56:17,199
very straightforward is instead of doing

1330
00:56:12,219 --> 00:56:22,149
a get token what require token does is

1331
00:56:17,199 --> 00:56:25,058
it gets the token from the screen stream

1332
00:56:22,150 --> 00:56:27,190
and then sets the results of the you

1333
00:56:25,059 --> 00:56:29,289
know that it's going to return to be

1334
00:56:27,190 --> 00:56:34,900
whether or not that token type equaled

1335
00:56:29,289 --> 00:56:36,819
the desired type right and it's just so

1336
00:56:34,900 --> 00:56:38,559
that's just shorthand it's just an easy

1337
00:56:36,818 --> 00:56:42,308
way to say the only thing I allow your

1338
00:56:38,559 --> 00:56:49,329
is this so I just require it right so

1339
00:56:42,309 --> 00:56:51,069
there we go and let's see so there we go

1340
00:56:49,329 --> 00:56:53,380
I'm gonna just quick run that it's not

1341
00:56:51,068 --> 00:56:54,730
gonna do anything right but I just want

1342
00:56:53,380 --> 00:56:56,230
to make sure we don't crash or loop or

1343
00:56:54,730 --> 00:56:57,490
hang or anything like that so now we

1344
00:56:56,230 --> 00:57:00,219
want to do is you want to get this out

1345
00:56:57,489 --> 00:57:02,618
putting something reasonable so okay so

1346
00:57:00,219 --> 00:57:04,989
we have our little weird magical printf

1347
00:57:02,619 --> 00:57:07,119
thing here that prints out you know sort

1348
00:57:04,989 --> 00:57:08,618
of token sizes so what I want to do here

1349
00:57:07,119 --> 00:57:10,390
is when we get to our introspection

1350
00:57:08,619 --> 00:57:12,579
struct for every member I just want to

1351
00:57:10,389 --> 00:57:14,618
print out right this you could see what

1352
00:57:12,579 --> 00:57:16,509
the code was I was trying to do I want

1353
00:57:14,619 --> 00:57:18,278
to print this out so what I'm gonna do

1354
00:57:16,509 --> 00:57:20,318
here is I'm gonna do something where we

1355
00:57:18,278 --> 00:57:21,579
can print out like this debug value

1356
00:57:20,318 --> 00:57:23,650
thing or something like that just for

1357
00:57:21,579 --> 00:57:25,359
just for show right that's all we're

1358
00:57:23,650 --> 00:57:26,680
gonna do all I want to do just to make

1359
00:57:25,358 --> 00:57:28,900
sure that we've got something resembling

1360
00:57:26,679 --> 00:57:32,548
anything is I'm gonna make this parse

1361
00:57:28,900 --> 00:57:36,190
number thing do that mm-hmm okay

1362
00:57:32,548 --> 00:57:38,469
so here we go inside parse number I have

1363
00:57:36,190 --> 00:57:40,929
my number type token and as you can see

1364
00:57:38,469 --> 00:57:42,159
in here right we've got you know these

1365
00:57:40,929 --> 00:57:43,808
are the member types that kind of come

1366
00:57:42,159 --> 00:57:45,429
down the side here you can see them but

1367
00:57:43,809 --> 00:57:46,869
sometimes they've got a pointer like

1368
00:57:45,429 --> 00:57:49,449
this old chunk thing here it's got a

1369
00:57:46,869 --> 00:57:51,249
pointer right and then sometimes like

1370
00:57:49,449 --> 00:57:54,098
that like array stuff at the end of them

1371
00:57:51,248 --> 00:57:55,929
too right but for now we can kind of

1372
00:57:54,099 --> 00:57:57,548
ignore some of that so what I could say

1373
00:57:55,929 --> 00:58:00,368
here is all right I got my member type

1374
00:57:57,548 --> 00:58:02,619
token I get this token here I want to

1375
00:58:00,369 --> 00:58:03,940
see what type this token is right and

1376
00:58:02,619 --> 00:58:06,630
I'm going to switch to the parsing

1377
00:58:03,940 --> 00:58:06,630
method here again

1378
00:58:09,340 --> 00:58:16,720
so I can switch on whatever the type is

1379
00:58:12,369 --> 00:58:17,799
so when I get the token out of this it

1380
00:58:16,719 --> 00:58:24,250
could be one of two different things

1381
00:58:17,800 --> 00:58:31,840
really well it could be its it could be

1382
00:58:24,250 --> 00:58:34,329
an asterisk right and it could be an

1383
00:58:31,840 --> 00:58:37,090
identifier those are the two things that

1384
00:58:34,329 --> 00:58:38,889
were there right so what I want to do is

1385
00:58:37,090 --> 00:58:41,230
say okay I got my remember type token

1386
00:58:38,889 --> 00:58:43,059
and right now we're only handling things

1387
00:58:41,230 --> 00:58:45,070
where this is just a regular identifier

1388
00:58:43,059 --> 00:58:47,079
on the phone that's the first thing and

1389
00:58:45,070 --> 00:58:48,280
then I want to say like okay is it an

1390
00:58:47,079 --> 00:58:48,670
asterisk around in a fryer that comes

1391
00:58:48,280 --> 00:58:50,350
next

1392
00:58:48,670 --> 00:58:53,320
in fact probably actually what I would

1393
00:58:50,349 --> 00:58:58,779
want to do here say if the token type

1394
00:58:53,320 --> 00:59:01,360
equals an asterisk then this thing is a

1395
00:58:58,780 --> 00:59:03,550
pointer right we don't really care about

1396
00:59:01,360 --> 00:59:06,550
that yet but we'll just say like is

1397
00:59:03,550 --> 00:59:08,680
pointer equals true or something like

1398
00:59:06,550 --> 00:59:13,360
that so you know it's a pointer and then

1399
00:59:08,679 --> 00:59:16,419
get the next token all right something

1400
00:59:13,360 --> 00:59:18,700
like that so if it's a pointer it's a

1401
00:59:16,420 --> 00:59:21,010
pointer and we could even say that

1402
00:59:18,699 --> 00:59:23,349
that's sort of gonna be a thing you know

1403
00:59:21,010 --> 00:59:25,540
we could even move that out here so we

1404
00:59:23,349 --> 00:59:27,400
just say like okay well parsing token

1405
00:59:25,539 --> 00:59:28,840
get token if the token is an asterisk

1406
00:59:27,400 --> 00:59:31,809
we'll say it's a pointer something like

1407
00:59:28,840 --> 00:59:33,579
that any I guess now I think about it

1408
00:59:31,809 --> 00:59:35,650
the original ways probably better for

1409
00:59:33,579 --> 00:59:36,759
the shorthand way we probably want to do

1410
00:59:35,650 --> 00:59:38,289
this a little bit a little bit

1411
00:59:36,760 --> 00:59:42,940
differently if we were gonna have more

1412
00:59:38,289 --> 00:59:45,159
than a few seconds to implement it hmm

1413
00:59:42,940 --> 00:59:46,300
but assuming its identifier now we have

1414
00:59:45,159 --> 00:59:48,519
all the information that we actually

1415
00:59:46,300 --> 00:59:50,110
need to print this thing out right and

1416
00:59:48,519 --> 00:59:51,639
we I guess we also want to still have

1417
00:59:50,110 --> 00:59:53,920
these two cases here where if it's the

1418
00:59:51,639 --> 00:59:59,469
semicolon or if it's the end of the

1419
00:59:53,920 --> 01:00:00,220
stream we would stop parsing right oh

1420
00:59:59,469 --> 01:00:03,519
man

1421
01:00:00,219 --> 01:00:05,409
okay hold on one second

1422
01:00:03,519 --> 01:00:09,489
I just want to put this printf in here

1423
01:00:05,409 --> 01:00:11,049
there we go so this would just be like

1424
01:00:09,489 --> 01:00:13,809
that we had here before I just want to

1425
01:00:11,050 --> 01:00:17,530
put debug value in here where I print

1426
01:00:13,809 --> 01:00:19,449
out that name and that's going to be

1427
01:00:17,530 --> 01:00:21,190
again this token assuming is asterisk

1428
01:00:19,449 --> 01:00:22,569
it's going to be setting its pointer so

1429
01:00:21,190 --> 01:00:24,340
nice identifier

1430
01:00:22,570 --> 01:00:25,809
I'm gonna assume that it's the name for

1431
01:00:24,340 --> 01:00:27,370
now that's not really the way that we

1432
01:00:25,809 --> 01:00:28,750
want to do it because it's not it

1433
01:00:27,369 --> 01:00:30,639
doesn't parse everything that we might

1434
01:00:28,750 --> 01:00:32,739
want to parse and see but it's pretty

1435
01:00:30,639 --> 01:00:34,629
close for now so there we go let's go

1436
01:00:32,739 --> 01:00:36,159
ahead and compile that oops and that's

1437
01:00:34,630 --> 01:00:37,809
not supposed to do break that's supposed

1438
01:00:36,159 --> 01:00:40,149
to be a oops

1439
01:00:37,809 --> 01:00:44,889
oh my goodness I know what that does

1440
01:00:40,150 --> 01:00:46,480
parsing equals pulse all right so let's

1441
01:00:44,889 --> 01:00:50,549
run this and see what happens

1442
01:00:46,480 --> 01:00:52,929
Hey look so this as you can see is

1443
01:00:50,550 --> 01:00:57,090
pretty much exactly what we wanted to do

1444
01:00:52,929 --> 01:00:59,319
so if we come back here to handmade CPP

1445
01:00:57,090 --> 01:01:02,860
you can see that we now something that

1446
01:00:59,320 --> 01:01:05,320
we were doing manually and we automated

1447
01:01:02,860 --> 01:01:06,940
it right and there's a bunch of things

1448
01:01:05,320 --> 01:01:08,650
we could do now to this if we wanted to

1449
01:01:06,940 --> 01:01:10,599
we probably don't want to output this

1450
01:01:08,650 --> 01:01:11,889
this way we've got a lot of cooler stuff

1451
01:01:10,599 --> 01:01:13,809
we could do with this if we wanted to

1452
01:01:11,889 --> 01:01:16,319
but there you go

1453
01:01:13,809 --> 01:01:18,250
so that's introspection in an hour

1454
01:01:16,320 --> 01:01:20,519
there's some more stuff you know we'd

1455
01:01:18,250 --> 01:01:23,829
want to flesh this out a little bit more

1456
01:01:20,519 --> 01:01:26,800
but yeah one hours worth of code you got

1457
01:01:23,829 --> 01:01:29,699
an introspective going and you can take

1458
01:01:26,800 --> 01:01:34,810
it pretty far from there if you want to

1459
01:01:29,699 --> 01:01:36,519
staying on schedule here I want to try

1460
01:01:34,809 --> 01:01:37,960
and keep because this is the dev stream

1461
01:01:36,519 --> 01:01:39,969
Athan I don't want to be our normal

1462
01:01:37,960 --> 01:01:41,349
cells where we go nuts and potentially

1463
01:01:39,969 --> 01:01:43,629
go off schedule or do whatever with the

1464
01:01:41,349 --> 01:01:46,659
Q&amp;A so I'm keeping on time 30 minutes of

1465
01:01:43,630 --> 01:01:50,070
QA and then coming up after me also is

1466
01:01:46,659 --> 01:01:52,509
going to be the salt and sanctuary

1467
01:01:50,070 --> 01:01:53,740
stream so if you're interested in that

1468
01:01:52,510 --> 01:02:00,070
game and you're on the dev stream it's

1469
01:01:53,739 --> 01:02:01,899
on that's coming so all right let's go

1470
01:02:00,070 --> 01:02:03,910
ahead the Q&amp;A if you could please if you

1471
01:02:01,900 --> 01:02:06,130
want to ask a question please put Q

1472
01:02:03,909 --> 01:02:07,719
colon in front of it and I'd be happy to

1473
01:02:06,130 --> 01:02:09,550
go over anything I know like I said we

1474
01:02:07,719 --> 01:02:11,049
kind of wanted to do something weird so

1475
01:02:09,550 --> 01:02:12,370
I picked that one because people always

1476
01:02:11,050 --> 01:02:15,220
ask me about how to do it on the stream

1477
01:02:12,369 --> 01:02:18,429
so now you know and like you saw it's

1478
01:02:15,219 --> 01:02:19,809
real real easy you know you can make a

1479
01:02:18,429 --> 01:02:22,599
much better one that what I've done if

1480
01:02:19,809 --> 01:02:25,289
you spend more than 30 60 minutes and

1481
01:02:22,599 --> 01:02:29,279
aren't talking the whole time

1482
01:02:25,289 --> 01:02:29,279
but you get the idea

1483
01:02:39,789 --> 01:02:48,278
q : I see no Q Cullen's somebody posts a

1484
01:02:44,619 --> 01:02:51,659
Q : for me to answer if there is one if

1485
01:02:48,278 --> 01:02:51,659
not we can all just chill out

1486
01:02:51,748 --> 01:02:56,168
Paul Smith it seems like you are doing

1487
01:02:53,949 --> 01:02:58,349
recursive descent parsing is that how

1488
01:02:56,168 --> 01:03:02,618
you would describe it yes absolutely I

1489
01:02:58,349 --> 01:03:04,689
probably should mention that so

1490
01:03:02,619 --> 01:03:08,469
basically there's a number of ways you

1491
01:03:04,688 --> 01:03:09,728
can write parsers and and you know since

1492
01:03:08,469 --> 01:03:12,239
there aren't I don't see a lot of Q

1493
01:03:09,728 --> 01:03:16,498
colons here I'll just you know I'll

1494
01:03:12,239 --> 01:03:22,119
start with like just a little bit of

1495
01:03:16,498 --> 01:03:23,728
explanation here oops how do I get my

1496
01:03:22,119 --> 01:03:30,179
little uh how do I get my little

1497
01:03:23,728 --> 01:03:32,678
interface back here where's the way

1498
01:03:30,179 --> 01:03:34,829
where did the little where did the

1499
01:03:32,679 --> 01:03:41,829
little interface go oh there it is okay

1500
01:03:34,829 --> 01:03:45,729
so here we are de 206 and I'll just

1501
01:03:41,829 --> 01:03:47,439
mention briefly so for parsing yeah what

1502
01:03:45,728 --> 01:03:57,278
I wrote is definitely considered a

1503
01:03:47,438 --> 01:03:59,739
recursive descent parser and you know to

1504
01:03:57,278 --> 01:04:01,989
be fair actually what I wrote is just a

1505
01:03:59,739 --> 01:04:04,958
descent parser we didn't actually use

1506
01:04:01,989 --> 01:04:06,880
the recursion yet now we would if we had

1507
01:04:04,958 --> 01:04:08,408
done you know if we were doing spending

1508
01:04:06,880 --> 01:04:09,999
two hours on it and getting a little

1509
01:04:08,409 --> 01:04:12,519
more of the type parsing in there we

1510
01:04:09,998 --> 01:04:14,408
would have but what you saw me do is

1511
01:04:12,518 --> 01:04:16,328
just to get it going a little faster I

1512
01:04:14,409 --> 01:04:18,789
used a lot of these while parsing blocks

1513
01:04:16,329 --> 01:04:20,919
so technically the way this works you

1514
01:04:18,789 --> 01:04:22,239
wouldn't do it this way the reason it's

1515
01:04:20,918 --> 01:04:23,949
called a recursive descent parser at the

1516
01:04:22,239 --> 01:04:25,449
recursive part is because normally what

1517
01:04:23,949 --> 01:04:27,699
you do is you look at what you got if

1518
01:04:25,449 --> 01:04:30,759
you got an asterisk you then call parse

1519
01:04:27,699 --> 01:04:33,039
member again on whatever comes next and

1520
01:04:30,759 --> 01:04:34,659
you build like a tree that way so I just

1521
01:04:33,039 --> 01:04:36,699
did it I did it kind of in a more fast

1522
01:04:34,659 --> 01:04:38,229
and loose way but like you know if

1523
01:04:36,699 --> 01:04:39,909
Monday we go back if people want to see

1524
01:04:38,228 --> 01:04:41,739
me expanded a little if Monday we go

1525
01:04:39,909 --> 01:04:43,869
back you would see a little more of the

1526
01:04:41,739 --> 01:04:45,130
recursion that you didn't see because I

1527
01:04:43,869 --> 01:04:47,139
was just kind of short handing it so I

1528
01:04:45,130 --> 01:04:49,329
made things in loops that really

1529
01:04:47,139 --> 01:04:51,959
traditionally in a traditional cursive

1530
01:04:49,329 --> 01:04:51,959
descent parser

1531
01:04:51,989 --> 01:04:55,059
sorry

1532
01:04:53,170 --> 01:05:01,539
I didn't pack enough water for this

1533
01:04:55,059 --> 01:05:03,599
train so my voice is going yeah it can

1534
01:05:01,539 --> 01:05:06,400
just be a smooth jazz stream from now on

1535
01:05:03,599 --> 01:05:08,530
um so yes so if you take a look at that

1536
01:05:06,400 --> 01:05:09,730
ass that like that Astor's think that

1537
01:05:08,530 --> 01:05:11,109
would have been a case where recursion

1538
01:05:09,730 --> 01:05:13,780
would have happened the traditional

1539
01:05:11,108 --> 01:05:15,759
recursion and and that's how that would

1540
01:05:13,780 --> 01:05:17,319
have worked right and I can even I can

1541
01:05:15,760 --> 01:05:18,130
even show you kind of more like what

1542
01:05:17,318 --> 01:05:20,858
that would look like

1543
01:05:18,130 --> 01:05:22,480
you know you could imagine in fact you

1544
01:05:20,858 --> 01:05:25,239
know you could just imagine with this if

1545
01:05:22,480 --> 01:05:27,190
you took out the the wild parsing thing

1546
01:05:25,239 --> 01:05:35,289
so you know I'll just I'll give you the

1547
01:05:27,190 --> 01:05:38,019
the more sort of complete example right

1548
01:05:35,289 --> 01:05:40,329
so assuming that we did it the more

1549
01:05:38,019 --> 01:05:42,250
recursive way what we would do is

1550
01:05:40,329 --> 01:05:46,630
something more like this where we say

1551
01:05:42,250 --> 01:05:48,940
okay just get the token whatever the

1552
01:05:46,630 --> 01:05:51,099
token type is we'll handle it if it's an

1553
01:05:48,940 --> 01:06:00,608
asterisk I just want to do parse number

1554
01:05:51,099 --> 01:06:06,039
again right something like this and so

1555
01:06:00,608 --> 01:06:07,509
that's exactly the same thing right but

1556
01:06:06,039 --> 01:06:08,769
it's a little like you know it's a

1557
01:06:07,510 --> 01:06:10,990
little cleaner it's a little nicer

1558
01:06:08,769 --> 01:06:13,329
potentially and so if I you know if I

1559
01:06:10,989 --> 01:06:14,469
wasn't kind of being a little more

1560
01:06:13,329 --> 01:06:16,089
compressed there if this was a regular

1561
01:06:14,469 --> 01:06:17,709
hammer measures were like let's spend

1562
01:06:16,088 --> 01:06:18,670
this week on metaprogramming I probably

1563
01:06:17,710 --> 01:06:20,079
would have thought it through a little

1564
01:06:18,670 --> 01:06:24,130
more and had something a little bit more

1565
01:06:20,079 --> 01:06:29,220
that way right so yeah if you take a

1566
01:06:24,130 --> 01:06:33,818
look at how this works do that and

1567
01:06:29,219 --> 01:06:35,769
that's right so that's like a recursive

1568
01:06:33,818 --> 01:06:38,199
sort of thing where you we kind of go

1569
01:06:35,769 --> 01:06:39,608
down like that and so now if we if we

1570
01:06:38,199 --> 01:06:41,679
run it you seem to get the same output

1571
01:06:39,608 --> 01:06:43,449
but you know I just I was just kind of

1572
01:06:41,679 --> 01:06:45,818
like I said I was playing it pretty fast

1573
01:06:43,449 --> 01:06:46,989
and loose so this is a little bit nicer

1574
01:06:45,818 --> 01:06:48,489
and you know that's probably the one I

1575
01:06:46,989 --> 01:06:50,679
would leave in there as well so you know

1576
01:06:48,489 --> 01:06:52,209
that's just better that's where the

1577
01:06:50,679 --> 01:06:54,669
recursive part of recursive descent

1578
01:06:52,210 --> 01:06:57,068
comes in so just just want to clear that

1579
01:06:54,670 --> 01:06:58,568
up okay so recursive descent parser

1580
01:06:57,068 --> 01:07:00,489
that's where the recursive part is is

1581
01:06:58,568 --> 01:07:02,230
this that you assume that instead of

1582
01:07:00,489 --> 01:07:04,358
like doing while loops to parse things

1583
01:07:02,230 --> 01:07:07,769
that can have multiple components you

1584
01:07:04,358 --> 01:07:11,079
use recursion and the stack to do

1585
01:07:07,769 --> 01:07:13,509
descent is because we're going down the

1586
01:07:11,079 --> 01:07:15,759
stack and up right so you can see that

1587
01:07:13,510 --> 01:07:18,010
we start at like the outermost shell and

1588
01:07:15,760 --> 01:07:21,880
we look at what the tokens are there and

1589
01:07:18,010 --> 01:07:23,800
when we get a token we say okay descend

1590
01:07:21,880 --> 01:07:25,660
one level down the stack and look at it

1591
01:07:23,800 --> 01:07:27,400
a little bit more carefully decide what

1592
01:07:25,659 --> 01:07:29,139
you want to do with it there look at it

1593
01:07:27,400 --> 01:07:30,849
again go a little more carefully right

1594
01:07:29,139 --> 01:07:32,739
we just send down so you kind of like

1595
01:07:30,849 --> 01:07:34,779
you're winnowing down the options as you

1596
01:07:32,739 --> 01:07:40,269
go until you finally decide what it is

1597
01:07:34,780 --> 01:07:42,820
you actually parsed right so that's a

1598
01:07:40,269 --> 01:07:45,159
very traditional type of handwritten

1599
01:07:42,820 --> 01:07:46,600
parser right so typically if you're

1600
01:07:45,159 --> 01:07:49,000
writing a person by hand like we just

1601
01:07:46,599 --> 01:07:50,618
did you write it this way

1602
01:07:49,000 --> 01:07:52,300
they're very nice because they're very

1603
01:07:50,619 --> 01:07:53,470
flexible you could do anything you want

1604
01:07:52,300 --> 01:07:55,420
with them

1605
01:07:53,469 --> 01:07:56,469
you can put an ad hoc code to do

1606
01:07:55,420 --> 01:07:58,389
anything you need to do

1607
01:07:56,469 --> 01:08:00,159
they're very understandable it was

1608
01:07:58,389 --> 01:08:01,420
probably I'm guessing pretty easy even

1609
01:08:00,159 --> 01:08:03,129
though I went for a faster that for you

1610
01:08:01,420 --> 01:08:05,108
to understand what was happening you

1611
01:08:03,130 --> 01:08:07,090
didn't just see like a big bunch of

1612
01:08:05,108 --> 01:08:10,179
gobbledygook where it's like a what's

1613
01:08:07,090 --> 01:08:13,000
happening but there are other types of

1614
01:08:10,179 --> 01:08:14,980
parsers right there's like shift reduce

1615
01:08:13,000 --> 01:08:16,838
parser x' and things like this and

1616
01:08:14,980 --> 01:08:19,060
oftentimes these other kinds of parsers

1617
01:08:16,838 --> 01:08:21,130
they use like rolling arrays and stacks

1618
01:08:19,060 --> 01:08:23,190
and things and they have jump tables

1619
01:08:21,130 --> 01:08:25,480
that are pre you know made on stuff and

1620
01:08:23,189 --> 01:08:27,729
what they're typically for is there for

1621
01:08:25,479 --> 01:08:31,179
generation so typically what happens is

1622
01:08:27,729 --> 01:08:33,608
if you write a parser generator so like

1623
01:08:31,180 --> 01:08:36,250
yak or bison if you've ever heard of

1624
01:08:33,609 --> 01:08:39,160
these tools they will spit out sometimes

1625
01:08:36,250 --> 01:08:41,170
other types of parsers which are machine

1626
01:08:39,159 --> 01:08:42,789
they look like sort of machine table

1627
01:08:41,170 --> 01:08:44,940
driven kinds of things they're not

1628
01:08:42,789 --> 01:08:48,000
really so much for writing by hand

1629
01:08:44,939 --> 01:08:51,278
although you could they're just not as

1630
01:08:48,000 --> 01:08:54,520
human natural I found what you'd first

1631
01:08:51,279 --> 01:08:56,200
write you know and so yes what we what

1632
01:08:54,520 --> 01:08:58,330
we did on this dream was a recursive

1633
01:08:56,199 --> 01:09:00,068
descent parser it's a parser that's very

1634
01:08:58,329 --> 01:09:02,079
traditional in that way very traditional

1635
01:09:00,069 --> 01:09:04,720
hand-drawn top-down recursive descent

1636
01:09:02,079 --> 01:09:10,199
parser one token look-ahead kind of

1637
01:09:04,720 --> 01:09:10,199
thing very very straightforward

1638
01:09:16,850 --> 01:09:23,069
sudonym 73 can you please satisfy my C

1639
01:09:20,009 --> 01:09:27,140
standard anal retention by accepting /v

1640
01:09:23,069 --> 01:09:30,930
and /f as white space mm-hmm

1641
01:09:27,140 --> 01:09:33,900
because I like pseudonym 73 quite a bit

1642
01:09:30,930 --> 01:09:43,670
I am more than happy to honor that

1643
01:09:33,899 --> 01:09:43,670
request for you that is no problem

1644
01:09:45,289 --> 01:09:49,979
although to be honest I don't know is

1645
01:09:48,659 --> 01:09:53,099
there anything in particular I have to

1646
01:09:49,979 --> 01:09:55,349
do like there's nobody all end of lines

1647
01:09:53,100 --> 01:09:57,150
on all three platforms are /m r / r

1648
01:09:55,350 --> 01:10:00,180
right is to see ever let you end the

1649
01:09:57,149 --> 01:10:04,189
line with anything like that doesn't

1650
01:10:00,180 --> 01:10:04,190
tell me I've never used one of those so

1651
01:10:09,868 --> 01:10:13,688
Guerry Johansson asks have you have you

1652
01:10:13,149 --> 01:10:17,828
an opinion

1653
01:10:13,689 --> 01:10:19,689
OpenCL see I I've never really used

1654
01:10:17,828 --> 01:10:26,679
OpenCL and I definitely don't know what

1655
01:10:19,689 --> 01:10:28,539
OpenCL see is but but yeah so I'm sorry

1656
01:10:26,679 --> 01:10:33,219
I know I don't have it I don't know what

1657
01:10:28,538 --> 01:10:34,809
OpenCL see is how would you handle

1658
01:10:33,219 --> 01:10:36,578
errors if you were deep in the recursion

1659
01:10:34,809 --> 01:10:40,538
is checking return to us everywhere the

1660
01:10:36,578 --> 01:10:42,549
best way so error handling usually what

1661
01:10:40,538 --> 01:10:44,319
you do it depends on the circumstance

1662
01:10:42,550 --> 01:10:45,820
but usually the reason why error

1663
01:10:44,319 --> 01:10:47,590
handling is so bad and compares is

1664
01:10:45,819 --> 01:10:49,359
because it is a bit tricky and so

1665
01:10:47,590 --> 01:10:51,610
usually what I do is when I encounter an

1666
01:10:49,359 --> 01:10:53,380
error I typically do something like I

1667
01:10:51,609 --> 01:10:56,109
try to put it enough logic into the

1668
01:10:53,380 --> 01:10:57,578
parser for my needs but you can go more

1669
01:10:56,109 --> 01:11:00,069
nuts with it and usually what I do is I

1670
01:10:57,578 --> 01:11:04,389
have an error token - you know so you'd

1671
01:11:00,069 --> 01:11:06,488
have like token error that people can

1672
01:11:04,389 --> 01:11:08,498
like pass off the chain and I also have

1673
01:11:06,488 --> 01:11:11,049
a tokenizer on the tokenizer you call

1674
01:11:08,498 --> 01:11:13,538
error and put errors into the tokenizer

1675
01:11:11,050 --> 01:11:14,349
that it like stacks up that's usually

1676
01:11:13,538 --> 01:11:20,349
the sort of thing I do

1677
01:11:14,349 --> 01:11:24,909
I showed a slate can you explain what

1678
01:11:20,349 --> 01:11:25,929
introspection is sure so actually

1679
01:11:24,908 --> 01:11:27,279
technically there's different words

1680
01:11:25,929 --> 01:11:29,368
there's introspection and there's

1681
01:11:27,279 --> 01:11:32,889
reflection and there's different levels

1682
01:11:29,368 --> 01:11:35,438
at which these things happen but

1683
01:11:32,889 --> 01:11:37,420
basically what we're talking about is in

1684
01:11:35,439 --> 01:11:42,189
most programming languages you typically

1685
01:11:37,420 --> 01:11:43,479
have well obviously a programming

1686
01:11:42,189 --> 01:11:45,610
language is all about specifying

1687
01:11:43,479 --> 01:11:47,499
structure of some kind right you

1688
01:11:45,609 --> 01:11:49,029
expressing the structure of data you're

1689
01:11:47,498 --> 01:11:50,139
expressing the structure of code you're

1690
01:11:49,029 --> 01:11:53,228
expressing all of these sort of

1691
01:11:50,139 --> 01:11:54,639
structures right and they could be

1692
01:11:53,229 --> 01:11:55,958
literal structures I can see it's a

1693
01:11:54,639 --> 01:11:57,699
struct it's literally just a collection

1694
01:11:55,958 --> 01:11:59,769
of data it could be a function write a

1695
01:11:57,698 --> 01:12:03,009
series of things to execute with loops

1696
01:11:59,769 --> 01:12:05,139
and whatever and the compiler for your

1697
01:12:03,010 --> 01:12:07,090
language knows what these things are it

1698
01:12:05,139 --> 01:12:10,479
has to because it has to then turn that

1699
01:12:07,090 --> 01:12:11,969
into working code right and so the the

1700
01:12:10,479 --> 01:12:14,949
key thing to understand is that

1701
01:12:11,969 --> 01:12:17,439
structure actually has a semantics form

1702
01:12:14,948 --> 01:12:20,348
somewhere inside the compiler while it's

1703
01:12:17,439 --> 01:12:22,369
compiling the code now languages that

1704
01:12:20,349 --> 01:12:25,010
have a clue

1705
01:12:22,368 --> 01:12:26,439
languages that were made by people who

1706
01:12:25,010 --> 01:12:29,239
know what they're doing

1707
01:12:26,439 --> 01:12:32,388
that's not even true languages that just

1708
01:12:29,238 --> 01:12:34,908
any language should have this but C++

1709
01:12:32,389 --> 01:12:36,699
doesn't because it's just not maintained

1710
01:12:34,908 --> 01:12:39,710
by people who know what they're doing so

1711
01:12:36,698 --> 01:12:42,948
C++ lacks a very crucial feature that

1712
01:12:39,710 --> 01:12:45,408
most modern languages have and that

1713
01:12:42,948 --> 01:12:48,678
feature is the ability to look at those

1714
01:12:45,408 --> 01:12:50,269
structures from within the code right so

1715
01:12:48,679 --> 01:12:54,380
the structures that the compiler knows

1716
01:12:50,270 --> 01:12:56,449
about inherently you can get them during

1717
01:12:54,380 --> 01:12:59,810
the compilation phase and do things with

1718
01:12:56,448 --> 01:13:01,908
them that allow you to work with your

1719
01:12:59,810 --> 01:13:05,090
code in very powerful ways so for

1720
01:13:01,908 --> 01:13:06,529
example here is our entity structure

1721
01:13:05,090 --> 01:13:10,579
that we were playing around with on

1722
01:13:06,529 --> 01:13:12,109
handmade hero right it has these fields

1723
01:13:10,579 --> 01:13:18,229
in it I would like to print them out

1724
01:13:12,109 --> 01:13:20,238
there is no way in C or C++ to say tell

1725
01:13:18,229 --> 01:13:21,649
me all the members of the cemento t

1726
01:13:20,238 --> 01:13:24,408
structure so that I can print them out

1727
01:13:21,649 --> 01:13:27,079
you can do it in other languages you can

1728
01:13:24,408 --> 01:13:28,759
do it in JavaScript even you know you

1729
01:13:27,079 --> 01:13:32,300
can you can do it in all these languages

1730
01:13:28,760 --> 01:13:34,310
C let's can't do it and that basic

1731
01:13:32,300 --> 01:13:35,659
ability is called introspection it's

1732
01:13:34,310 --> 01:13:36,920
also sometimes called reflection which

1733
01:13:35,658 --> 01:13:38,658
is if you have the ability I think to

1734
01:13:36,920 --> 01:13:40,940
like work to actually do more

1735
01:13:38,658 --> 01:13:42,289
complicated operations than that it's

1736
01:13:40,939 --> 01:13:44,359
it's sort of a it's it's a thing that

1737
01:13:42,289 --> 01:13:46,010
it's a it's a more stringent requirement

1738
01:13:44,359 --> 01:13:49,130
I think on top of it but point being

1739
01:13:46,010 --> 01:13:50,389
whatever you call it what we're talking

1740
01:13:49,130 --> 01:13:52,340
about here on the stream is the ability

1741
01:13:50,389 --> 01:13:53,599
to do that sealless else doesn't have it

1742
01:13:52,340 --> 01:13:55,969
so what I showed on tonight's dream is

1743
01:13:53,599 --> 01:13:57,980
how to implement it right how to put it

1744
01:13:55,969 --> 01:13:59,389
back in there because the c-plus welcome

1745
01:13:57,979 --> 01:14:02,598
is obviously never gonna get around to

1746
01:13:59,389 --> 01:14:03,980
it so you need to write and so that's

1747
01:14:02,599 --> 01:14:06,050
what we wrote this is just a very simple

1748
01:14:03,979 --> 01:14:08,089
little preprocessor then we can run on

1749
01:14:06,050 --> 01:14:09,920
our code and you know here is that

1750
01:14:08,090 --> 01:14:12,440
struct right that's the manatees truck

1751
01:14:09,920 --> 01:14:14,510
and you can see when I go ahead and run

1752
01:14:12,439 --> 01:14:17,059
this right if I could I'll bring it up

1753
01:14:14,510 --> 01:14:19,699
on here here's my sim region code and

1754
01:14:17,060 --> 01:14:21,800
here's we ran our preprocessor and you

1755
01:14:19,698 --> 01:14:23,779
can see it printed out the members right

1756
01:14:21,800 --> 01:14:25,429
old junk storage index right that sort

1757
01:14:23,779 --> 01:14:26,868
of stuff and we've got some bugs here

1758
01:14:25,429 --> 01:14:30,618
like this guy right you can kind of see

1759
01:14:26,868 --> 01:14:33,380
even what happened oh you know what I

1760
01:14:30,618 --> 01:14:35,238
introduced a bug actually you can see

1761
01:14:33,380 --> 01:14:35,390
that we did it correctly before but when

1762
01:14:35,238 --> 01:14:37,579
I

1763
01:14:35,390 --> 01:14:42,170
did that code just now for the recursive

1764
01:14:37,579 --> 01:14:43,609
descent spoke a little too soon so if

1765
01:14:42,170 --> 01:14:46,279
you look at that code for the recursive

1766
01:14:43,609 --> 01:14:49,519
descent there is sort of a nasty problem

1767
01:14:46,279 --> 01:14:51,739
with it which is if you look at these

1768
01:14:49,520 --> 01:14:53,390
two guys this one handled the semicolon

1769
01:14:51,739 --> 01:14:56,000
end of stream thing it would properly

1770
01:14:53,390 --> 01:14:56,990
eat till the semicolon but a recursive

1771
01:14:56,000 --> 01:14:58,850
descent thing didn't

1772
01:14:56,989 --> 01:15:00,739
so really until we do that I guess I

1773
01:14:58,850 --> 01:15:03,140
can't quite switch to that and I'll put

1774
01:15:00,739 --> 01:15:09,019
in I didn't mean to undue pseudonym 73's

1775
01:15:03,140 --> 01:15:11,539
thing here yeah so it would not have

1776
01:15:09,020 --> 01:15:12,560
worked properly the way that we were

1777
01:15:11,539 --> 01:15:26,239
doing it before oops

1778
01:15:12,560 --> 01:15:28,760
that's I'm in the wrong place okay so

1779
01:15:26,239 --> 01:15:30,170
yeah our original one worked worked

1780
01:15:28,760 --> 01:15:32,659
better I knew I must have had a reason

1781
01:15:30,170 --> 01:15:33,680
for doing that that way but anyway so

1782
01:15:32,659 --> 01:15:35,119
you can see that we printed them out

1783
01:15:33,680 --> 01:15:38,510
here we got old chunk storage index

1784
01:15:35,119 --> 01:15:41,090
updatable type Flags PDP distance limit

1785
01:15:38,510 --> 01:15:43,550
collision facing direction t Bob D AB

1786
01:15:41,090 --> 01:15:46,069
style hit point max hit point soared

1787
01:15:43,550 --> 01:15:47,989
walkable dim and welcome al height right

1788
01:15:46,069 --> 01:15:50,149
and so basically what we did there is

1789
01:15:47,989 --> 01:15:52,010
add that introspection back in so now

1790
01:15:50,149 --> 01:15:54,109
inside our preprocessor we can do

1791
01:15:52,010 --> 01:15:56,090
whatever we want with those things right

1792
01:15:54,109 --> 01:15:56,539
and that's what that's exactly what we

1793
01:15:56,090 --> 01:16:00,190
needed

1794
01:15:56,539 --> 01:16:00,189
and what C++ doesn't give us

1795
01:16:22,158 --> 01:16:32,899
ah let's see do you well it just says do

1796
01:16:29,779 --> 01:16:36,279
you if John does metaprogramming for his

1797
01:16:32,899 --> 01:16:39,228
language I assume you mean do you know

1798
01:16:36,279 --> 01:16:41,208
if John does Matt a program for a night

1799
01:16:39,229 --> 01:16:43,849
do you mean does does it have a program

1800
01:16:41,208 --> 01:16:44,929
the answer is yes he showed actually for

1801
01:16:43,849 --> 01:16:52,849
the first time the meta programming

1802
01:16:44,929 --> 01:16:54,168
features like Wednesday night just this

1803
01:16:52,849 --> 01:16:57,288
past Wednesday he showed for the first

1804
01:16:54,168 --> 01:17:00,559
time some of some meta programming

1805
01:16:57,288 --> 01:17:01,698
features he's added so I think it

1806
01:17:00,559 --> 01:17:03,079
probably will be pretty good language

1807
01:17:01,698 --> 01:17:04,728
for meta programming based on how it's

1808
01:17:03,078 --> 01:17:06,228
going so far certainly much better than

1809
01:17:04,729 --> 01:17:13,699
C++ which doesn't support meta program

1810
01:17:06,229 --> 01:17:14,749
at all insofar as regretting errors

1811
01:17:13,698 --> 01:17:17,288
again would this be a place for

1812
01:17:14,748 --> 01:17:20,658
exceptions would actually be useful no

1813
01:17:17,288 --> 01:17:21,889
exceptions are never useful I've

1814
01:17:20,658 --> 01:17:23,988
literally never found a single

1815
01:17:21,889 --> 01:17:28,400
programming problem where exceptions are

1816
01:17:23,988 --> 01:17:29,899
better than not exceptions you know your

1817
01:17:28,399 --> 01:17:31,819
mileage may vary if you like him you

1818
01:17:29,899 --> 01:17:33,408
like him but I I literally cannot tell

1819
01:17:31,819 --> 01:17:34,488
you a single time when I've ever thought

1820
01:17:33,408 --> 01:17:39,078
that exceptions were the right way to

1821
01:17:34,488 --> 01:17:40,518
program something in my whole life there

1822
01:17:39,078 --> 01:17:41,630
was a time when I thought that

1823
01:17:40,519 --> 01:17:44,719
exceptions were a good idea because

1824
01:17:41,630 --> 01:17:46,248
that's what I've been told but if I look

1825
01:17:44,719 --> 01:17:48,408
back at all the programming that I've

1826
01:17:46,248 --> 01:17:49,938
ever done with my current brain I

1827
01:17:48,408 --> 01:17:51,529
literally can't think of a single time I

1828
01:17:49,939 --> 01:17:52,699
would ever say to use them they are

1829
01:17:51,529 --> 01:17:57,649
never good

1830
01:17:52,698 --> 01:18:01,188
I literally don't know of a single time

1831
01:17:57,649 --> 01:18:02,569
I would use them everywhere now that we

1832
01:18:01,189 --> 01:18:04,729
have the preprocessor do you plan to

1833
01:18:02,569 --> 01:18:07,488
make more use of it going forward in

1834
01:18:04,729 --> 01:18:09,769
handmade hero I don't know I mean will

1835
01:18:07,488 --> 01:18:11,958
at least output the debug will output

1836
01:18:09,769 --> 01:18:14,179
the annotation right it'll only take us

1837
01:18:11,958 --> 01:18:17,889
a day to switch that to an annotator so

1838
01:18:14,179 --> 01:18:20,208
we might as well we've got it right

1839
01:18:17,889 --> 01:18:21,739
Hogan long who is John and what language

1840
01:18:20,208 --> 01:18:23,510
talking about talking about Jonathan

1841
01:18:21,738 --> 01:18:25,129
Blow designer of braid and the witness

1842
01:18:23,510 --> 01:18:27,469
and the lead programmer on both of those

1843
01:18:25,130 --> 01:18:28,969
products as well he's writing a new

1844
01:18:27,469 --> 01:18:30,319
programming language called jei which is

1845
01:18:28,969 --> 01:18:33,349
actually pretty far along and it's quite

1846
01:18:30,319 --> 01:18:34,908
nice you can take a look at his YouTube

1847
01:18:33,349 --> 01:18:36,400
channel Jonathan Blow just search for

1848
01:18:34,908 --> 01:18:38,969
Jonathan Blow you too

1849
01:18:36,399 --> 01:18:41,170
and you can you could find it about that

1850
01:18:38,970 --> 01:18:42,550
Cu voucher I'm writing a parcel looks

1851
01:18:41,170 --> 01:18:44,619
pretty similar to this but it runs on

1852
01:18:42,550 --> 01:18:46,570
multi gigabyte files which takes a while

1853
01:18:44,619 --> 01:18:48,039
any common approaches to use simony

1854
01:18:46,569 --> 01:18:49,509
multi-threading to speed up text parsing

1855
01:18:48,039 --> 01:18:51,460
seems more difficult since the

1856
01:18:49,510 --> 01:18:56,530
characters aren't independent in the way

1857
01:18:51,460 --> 01:19:01,210
pixels are you know there's a lot of

1858
01:18:56,529 --> 01:19:03,340
ways to speed up parsing certainly so I

1859
01:19:01,210 --> 01:19:05,829
suspect that probably you could do some

1860
01:19:03,340 --> 01:19:09,699
interesting things there but honestly I

1861
01:19:05,829 --> 01:19:12,369
have never done parsing for bigger than

1862
01:19:09,699 --> 01:19:17,319
just my codebase and even like just this

1863
01:19:12,369 --> 01:19:18,970
method of doing it is always like many

1864
01:19:17,319 --> 01:19:21,069
orders of magnitude faster than the

1865
01:19:18,970 --> 01:19:23,650
compiler actually compiles it so I've

1866
01:19:21,069 --> 01:19:25,960
never had to optimize one of these ever

1867
01:19:23,649 --> 01:19:28,089
they're always the fastest part of the

1868
01:19:25,960 --> 01:19:30,430
pipeline for me because like Microsoft C

1869
01:19:28,090 --> 01:19:35,050
compiler is so slow

1870
01:19:30,430 --> 01:19:37,480
that pretty much nothing I ever do it

1871
01:19:35,050 --> 01:19:38,710
becomes a compilation bottleneck so if

1872
01:19:37,479 --> 01:19:41,649
you're talking about more like you said

1873
01:19:38,710 --> 01:19:44,560
multi gigabyte files I do appreciate the

1874
01:19:41,649 --> 01:19:46,988
fact that that would necessitate some

1875
01:19:44,560 --> 01:19:51,610
serious thought there but I just don't

1876
01:19:46,988 --> 01:19:54,988
know I just don't have the experience

1877
01:19:51,609 --> 01:19:57,819
with it to know like what you know I

1878
01:19:54,988 --> 01:19:59,079
guess what I'm saying is in my head I

1879
01:19:57,819 --> 01:20:00,279
can sort of think of things like okay

1880
01:19:59,079 --> 01:20:01,869
how would I start to approach it right

1881
01:20:00,279 --> 01:20:03,609
but they're just fully speculative and

1882
01:20:01,869 --> 01:20:05,109
and I just I just don't know I would

1883
01:20:03,609 --> 01:20:06,519
have to actually go tackle that program

1884
01:20:05,109 --> 01:20:08,529
prime myself to have it really in the

1885
01:20:06,520 --> 01:20:11,730
opinion because it doesn't it's just not

1886
01:20:08,529 --> 01:20:11,729
something I ever had to think about

1887
01:20:18,500 --> 01:20:22,979
to Sophos the stream makes me feel like

1888
01:20:21,149 --> 01:20:26,939
an extremely inferior and incompetent

1889
01:20:22,979 --> 01:20:32,129
programmer do you approve of this not

1890
01:20:26,939 --> 01:20:35,929
really I mean I guess I would just have

1891
01:20:32,130 --> 01:20:35,930
to ask the question like you know

1892
01:20:36,050 --> 01:20:41,760
hopefully you know if you look at what I

1893
01:20:39,149 --> 01:20:43,349
did there it's not that complicated

1894
01:20:41,760 --> 01:20:44,550
right like there's not that many moving

1895
01:20:43,350 --> 01:20:45,780
parts - it's very simple it's just

1896
01:20:44,550 --> 01:20:48,000
something that takes a look at

1897
01:20:45,779 --> 01:20:50,639
characters in a stream and make some

1898
01:20:48,000 --> 01:20:53,039
simple decisions about it right and so

1899
01:20:50,640 --> 01:20:54,480
you know if you look at that and go wow

1900
01:20:53,039 --> 01:20:56,609
he like did that really fast or

1901
01:20:54,479 --> 01:21:00,829
something uh you know I've been

1902
01:20:56,609 --> 01:21:03,630
programming for like for like oh my god

1903
01:21:00,829 --> 01:21:06,390
32 years I've been forgiving for 32

1904
01:21:03,630 --> 01:21:08,579
years I've written you know five six

1905
01:21:06,390 --> 01:21:12,660
parsers seven parsers something like

1906
01:21:08,579 --> 01:21:14,909
this mm-hmm so one of the reasons that

1907
01:21:12,659 --> 01:21:16,170
was so fast it's cuz I just already know

1908
01:21:14,909 --> 01:21:19,170
basically how it works

1909
01:21:16,170 --> 01:21:20,520
right and so it's just it's just very

1910
01:21:19,170 --> 01:21:23,640
like second nature for me to type that

1911
01:21:20,520 --> 01:21:25,620
out and so you know I would kind of

1912
01:21:23,640 --> 01:21:27,119
discount that part of it so what I would

1913
01:21:25,619 --> 01:21:29,159
focus on it's like say can you

1914
01:21:27,119 --> 01:21:30,779
understand what I did if you just spend

1915
01:21:29,159 --> 01:21:33,569
some time look at it and practice a

1916
01:21:30,779 --> 01:21:35,460
little bit and if the answer is yes then

1917
01:21:33,569 --> 01:21:36,569
you're as good a programmer as I am the

1918
01:21:35,460 --> 01:21:40,710
only difference is you haven't written

1919
01:21:36,569 --> 01:21:42,479
six of these right and a lot of times

1920
01:21:40,710 --> 01:21:44,579
that's a big part of the difference

1921
01:21:42,479 --> 01:21:45,539
right the reason that somebody looks

1922
01:21:44,579 --> 01:21:46,649
like a good programmer when they're

1923
01:21:45,539 --> 01:21:50,760
programming is because they just have a

1924
01:21:46,649 --> 01:21:52,500
lot of experience you know the first

1925
01:21:50,760 --> 01:21:53,880
couple times I tried to parse tough it

1926
01:21:52,500 --> 01:21:55,829
was a disaster I didn't even know about

1927
01:21:53,880 --> 01:21:58,310
tokenizing I'd never read a book on

1928
01:21:55,829 --> 01:22:00,539
parsing and it was like they're awful

1929
01:21:58,310 --> 01:22:02,340
they were like oh he's scared for things

1930
01:22:00,539 --> 01:22:06,300
and I remember the first time someone

1931
01:22:02,340 --> 01:22:07,500
like told me hmm you should like do a

1932
01:22:06,300 --> 01:22:09,000
lexer you should have a thing that

1933
01:22:07,500 --> 01:22:12,840
breaks my tokens it's like this huge

1934
01:22:09,000 --> 01:22:15,119
eye-opener for me right so I feel like

1935
01:22:12,840 --> 01:22:16,350
yeah like don't get discouraged when you

1936
01:22:15,119 --> 01:22:18,689
see someone who's been programming

1937
01:22:16,350 --> 01:22:22,620
forever like who's an ancient like old

1938
01:22:18,689 --> 01:22:24,210
crotchety cane like and I'm not even

1939
01:22:22,619 --> 01:22:26,430
making that up like I am on crutches

1940
01:22:24,210 --> 01:22:28,529
right now like here are my crutches I I

1941
01:22:26,430 --> 01:22:29,250
crushed over to this to do this Deb

1942
01:22:28,529 --> 01:22:30,899
stream

1943
01:22:29,250 --> 01:22:33,659
and I will crutch out to the other room

1944
01:22:30,899 --> 01:22:34,949
when I'm done when you see someone who's

1945
01:22:33,659 --> 01:22:36,899
been programming so long if they're on

1946
01:22:34,949 --> 01:22:40,559
crutches at this point and they're old

1947
01:22:36,899 --> 01:22:42,539
and invalid don't look at that and go

1948
01:22:40,560 --> 01:22:45,270
like oh I can't program that well it's

1949
01:22:42,539 --> 01:22:50,100
like well duh but that doesn't mean you

1950
01:22:45,270 --> 01:22:51,480
won't thirty years from now right it's

1951
01:22:50,100 --> 01:22:53,039
just a question of programming every day

1952
01:22:51,479 --> 01:22:54,599
and like actually doing the practice you

1953
01:22:53,039 --> 01:22:57,199
just get better and eventually you can

1954
01:22:54,600 --> 01:22:57,200
program quickly

1955
01:22:57,439 --> 01:23:00,809
how does meta programming change your

1956
01:22:59,819 --> 01:23:02,279
workflow can you talk about

1957
01:23:00,810 --> 01:23:04,470
incorporating generated code with the

1958
01:23:02,279 --> 01:23:06,059
regular C files yes so the way they

1959
01:23:04,470 --> 01:23:08,670
typically works is exactly what you just

1960
01:23:06,060 --> 01:23:10,830
saw basically what we do is we'll take

1961
01:23:08,670 --> 01:23:12,960
this and we'll have it start to output

1962
01:23:10,829 --> 01:23:15,390
some things that are meant to be read as

1963
01:23:12,960 --> 01:23:17,159
standing C structures so for example

1964
01:23:15,390 --> 01:23:20,250
what I would probably do right is

1965
01:23:17,159 --> 01:23:22,199
instead of outputting this debug value

1966
01:23:20,250 --> 01:23:25,260
thing what I would said output is

1967
01:23:22,199 --> 01:23:27,179
something like you know here is the the

1968
01:23:25,260 --> 01:23:31,770
name you know the the field of the thing

1969
01:23:27,180 --> 01:23:35,360
or whatever as a string right and and

1970
01:23:31,770 --> 01:23:35,360
I'd wrap that in something like this

1971
01:23:35,539 --> 01:23:41,310
right and so this is more what we'd

1972
01:23:39,060 --> 01:23:42,870
start to do and now you can sort of see

1973
01:23:41,310 --> 01:23:44,700
like okay this starts to be something we

1974
01:23:42,869 --> 01:23:46,590
could just insert in a C file right and

1975
01:23:44,699 --> 01:23:48,300
so then maybe we're like okay well now

1976
01:23:46,590 --> 01:23:49,920
you know we want to insert the sin of C

1977
01:23:48,300 --> 01:23:52,020
file we've got this press truck thing we

1978
01:23:49,920 --> 01:23:54,510
get the name token out all right so now

1979
01:23:52,020 --> 01:23:57,690
it just becomes like let's go ahead and

1980
01:23:54,510 --> 01:24:02,699
print out what destruct is right so

1981
01:23:57,689 --> 01:24:08,369
we'll say something like hmm carest are

1982
01:24:02,699 --> 01:24:11,090
members of right and then we just output

1983
01:24:08,369 --> 01:24:15,989
that that thing like members of blah

1984
01:24:11,090 --> 01:24:20,090
brackets equals and just going to go

1985
01:24:15,989 --> 01:24:20,090
ahead and give you what the idea is here

1986
01:24:21,750 --> 01:24:36,819
right right and so you can start to see

1987
01:24:34,510 --> 01:24:38,770
how this starts to become like actual C

1988
01:24:36,819 --> 01:24:40,359
code and so then you would just do

1989
01:24:38,770 --> 01:24:45,190
something you'd imagine you have like

1990
01:24:40,359 --> 01:24:47,199
member definition or something right and

1991
01:24:45,189 --> 01:24:50,259
then up here when we when we actually

1992
01:24:47,199 --> 01:24:52,539
output this thing we would also do like

1993
01:24:50,260 --> 01:24:56,739
some kind of type field or something

1994
01:24:52,539 --> 01:24:58,449
like this so you know member type token

1995
01:24:56,738 --> 01:25:03,968
would be here as well so it would be

1996
01:24:58,449 --> 01:25:09,969
something like you know type underscore

1997
01:25:03,969 --> 01:25:15,219
or percent dot star s member type token

1998
01:25:09,969 --> 01:25:17,199
text length member type token text and

1999
01:25:15,219 --> 01:25:19,239
it's not going to work quite right yet

2000
01:25:17,199 --> 01:25:22,840
but you can kind of see so this starts

2001
01:25:19,238 --> 01:25:25,119
to now right be kind of close to

2002
01:25:22,840 --> 01:25:28,569
something we could just read in code and

2003
01:25:25,119 --> 01:25:33,039
know exactly what our struct layout

2004
01:25:28,569 --> 01:25:35,409
looked like right so basically we do is

2005
01:25:33,039 --> 01:25:37,630
we just take that we output that to a C

2006
01:25:35,409 --> 01:25:39,729
file and we compile that C file in with

2007
01:25:37,630 --> 01:25:42,069
the rest of our C files now we have

2008
01:25:39,729 --> 01:25:44,379
introspection data the kind of the C++

2009
01:25:42,069 --> 01:25:46,960
spec should have been giving us for the

2010
01:25:44,380 --> 01:25:49,180
past two decades and wasn't right so

2011
01:25:46,960 --> 01:25:53,520
it's just about getting that in there in

2012
01:25:49,180 --> 01:25:56,079
a way we can use so all right so that's

2013
01:25:53,520 --> 01:25:57,910
that's pretty much all the time I've got

2014
01:25:56,079 --> 01:26:00,189
I don't think I got any more time for

2015
01:25:57,909 --> 01:26:01,960
questions so I'm just going to go ahead

2016
01:26:00,189 --> 01:26:04,149
and wrap up because if you're watching

2017
01:26:01,960 --> 01:26:06,699
the dev stream Athan then you are going

2018
01:26:04,149 --> 01:26:11,920
to want to it's gonna roll over here in

2019
01:26:06,699 --> 01:26:14,859
five minutes to the Salt sanctuary I

2020
01:26:11,920 --> 01:26:17,109
believe is the the next the next step on

2021
01:26:14,859 --> 01:26:21,119
the stream so I'm just going to go ahead

2022
01:26:17,109 --> 01:26:23,199
and save this out and close down and say

2023
01:26:21,119 --> 01:26:25,899
thank you for joining me to this special

2024
01:26:23,199 --> 01:26:27,760
edition of handmade hero it's been a

2025
01:26:25,899 --> 01:26:30,789
pleasure coding with you as always I

2026
01:26:27,760 --> 01:26:32,560
hope that satisfied some people's desire

2027
01:26:30,789 --> 01:26:34,090
to see how meta programming how you sort

2028
01:26:32,560 --> 01:26:37,719
of start to get that working

2029
01:26:34,090 --> 01:26:40,150
that is the basics of it like I said you

2030
01:26:37,719 --> 01:26:41,590
saw it can happen in an hour and of

2031
01:26:40,149 --> 01:26:43,329
course now it's in the hand made your a

2032
01:26:41,590 --> 01:26:45,039
code base so if you're somebody who

2033
01:26:43,329 --> 01:26:46,420
wants to play around with it

2034
01:26:45,039 --> 01:26:47,738
hand me here org you can always

2035
01:26:46,420 --> 01:26:49,239
pre-order the game and it comes with the

2036
01:26:47,738 --> 01:26:50,439
full source code so you can just

2037
01:26:49,238 --> 01:26:52,899
download the source code and play around

2038
01:26:50,439 --> 01:26:54,819
with it and see how that works if you

2039
01:26:52,899 --> 01:26:56,679
are still a little confused about how

2040
01:26:54,819 --> 01:26:57,698
the meta partner stuff works and maybe

2041
01:26:56,679 --> 01:26:59,670
we'll do some more of it on handmade

2042
01:26:57,698 --> 01:27:02,319
hero in future streams as well if people

2043
01:26:59,670 --> 01:27:03,940
feel like they just want to see like a

2044
01:27:02,319 --> 01:27:04,679
little bit more of how that sort of

2045
01:27:03,939 --> 01:27:07,629
thing works

2046
01:27:04,679 --> 01:27:09,429
so that's about it

2047
01:27:07,630 --> 01:27:11,500
until next time oh yeah if you want to

2048
01:27:09,429 --> 01:27:13,300
catch the stream live again please do

2049
01:27:11,500 --> 01:27:15,579
remember also that we have a little

2050
01:27:13,300 --> 01:27:17,560
tweet bot here so if you want to see the

2051
01:27:15,579 --> 01:27:19,179
schedule you can see the schedule so

2052
01:27:17,560 --> 01:27:20,949
hand made here org you can just go there

2053
01:27:19,179 --> 01:27:22,630
and there's a little tweet bot it'll

2054
01:27:20,948 --> 01:27:24,039
tweet out the schedule at you and you

2055
01:27:22,630 --> 01:27:25,569
can see that it's just like you know

2056
01:27:24,039 --> 01:27:27,488
every week it'll it has a little thing

2057
01:27:25,569 --> 01:27:29,500
here which will say like here's what the

2058
01:27:27,488 --> 01:27:31,509
stream times are gonna be and then every

2059
01:27:29,500 --> 01:27:33,279
day it just tweets out a little thing

2060
01:27:31,510 --> 01:27:34,989
that tells you what the time is that day

2061
01:27:33,279 --> 01:27:37,569
if you're wondering so it's a pretty

2062
01:27:34,988 --> 01:27:39,609
handy little guy that's about it for me

2063
01:27:37,569 --> 01:27:42,908
if you're watching the dev stream of

2064
01:27:39,609 --> 01:27:46,960
thumb it's twitch.tv slash dev stream of

2065
01:27:42,908 --> 01:27:48,429
thumb like I said it goes I think for 24

2066
01:27:46,960 --> 01:27:50,560
hours I think it started a few hours ago

2067
01:27:48,429 --> 01:27:53,770
so it's going all night and it'll go all

2068
01:27:50,560 --> 01:27:58,090
day tomorrow as well there's a bunch of

2069
01:27:53,770 --> 01:27:59,860
devs on there doing stuff so definitely

2070
01:27:58,090 --> 01:28:01,779
check that out if you're someone who

2071
01:27:59,859 --> 01:28:03,639
just came for the handmade hero and

2072
01:28:01,779 --> 01:28:04,118
hasn't had enough live coding for one

2073
01:28:03,639 --> 01:28:06,849
evening

2074
01:28:04,118 --> 01:28:09,158
you've got more so you can go ahead and

2075
01:28:06,849 --> 01:28:12,130
switch over to that and I guess I'll

2076
01:28:09,158 --> 01:28:13,388
just keep talking until 10 p.m. because

2077
01:28:12,130 --> 01:28:15,730
I don't know when they'll actually

2078
01:28:13,389 --> 01:28:21,969
switch over the stream I hopefully at 10

2079
01:28:15,729 --> 01:28:23,529
p.m. exactly so there we go and I guess

2080
01:28:21,969 --> 01:28:26,079
I'll take this opportunity also to say

2081
01:28:23,529 --> 01:28:27,908
thank you to everyone for tuning in as

2082
01:28:26,079 --> 01:28:30,250
always all the handmade hero guys it's

2083
01:28:27,908 --> 01:28:31,960
great to see you here every day it makes

2084
01:28:30,250 --> 01:28:33,908
it a lot less lonely to code knowing

2085
01:28:31,960 --> 01:28:39,189
that there are so many people who come

2086
01:28:33,908 --> 01:28:40,598
to visit and yeah I hope you enjoyed

2087
01:28:39,189 --> 01:28:41,979
that metaprogramming it was the thing I

2088
01:28:40,599 --> 01:28:43,480
had been thinking all week about what I

2089
01:28:41,979 --> 01:28:46,149
thought we should probably do and I was

2090
01:28:43,479 --> 01:28:47,138
like well we could do you know people

2091
01:28:46,149 --> 01:28:47,920
had mentioned me we do some lighting

2092
01:28:47,139 --> 01:28:49,210
stuff and me

2093
01:28:47,920 --> 01:28:50,679
you do some animation stuff and I think

2094
01:28:49,210 --> 01:28:51,698
those were all good ideas but what I

2095
01:28:50,679 --> 01:28:54,369
thought at the end of the day is I was

2096
01:28:51,698 --> 01:28:55,750
like well you know handmade hero is what

2097
01:28:54,369 --> 01:28:57,729
it is you know it's a stream about

2098
01:28:55,750 --> 01:28:59,948
actual like very serious programming and

2099
01:28:57,729 --> 01:29:01,119
it's about the programming and so I felt

2100
01:28:59,948 --> 01:29:02,439
like people who are watching for the

2101
01:29:01,119 --> 01:29:03,789
Destry Mathon I didn't want to do

2102
01:29:02,439 --> 01:29:05,979
something that would give them the wrong

2103
01:29:03,789 --> 01:29:07,869
idea about the sorts of things that we

2104
01:29:05,979 --> 01:29:09,729
do here like we do very low level stuff

2105
01:29:07,869 --> 01:29:13,269
that's that's what we're about we're not

2106
01:29:09,729 --> 01:29:15,009
about like you know making a game we're

2107
01:29:13,270 --> 01:29:16,030
about learning to program a game and

2108
01:29:15,010 --> 01:29:18,579
those are two very different things

2109
01:29:16,029 --> 01:29:19,988
right and so I thought that something

2110
01:29:18,579 --> 01:29:21,789
like that would be a good example it's a

2111
01:29:19,988 --> 01:29:23,049
self-contained thing I knew I could do

2112
01:29:21,789 --> 01:29:24,880
it pretty quickly I've written so many

2113
01:29:23,050 --> 01:29:26,380
metaprogramming things in my life I knew

2114
01:29:24,880 --> 01:29:28,179
it was something that you know it was we

2115
01:29:26,380 --> 01:29:30,279
had a chance again done an hour as luck

2116
01:29:28,179 --> 01:29:32,170
would have it we did that was not afford

2117
01:29:30,279 --> 01:29:33,698
to have a conclusion and certainly we

2118
01:29:32,170 --> 01:29:37,989
you know it was right down to the wire

2119
01:29:33,698 --> 01:29:38,889
but as you saw you know that's kind of

2120
01:29:37,988 --> 01:29:40,839
the sort of thing that I feel like

2121
01:29:38,890 --> 01:29:41,800
typifies handmade hero is that kind of

2122
01:29:40,840 --> 01:29:43,000
programming and so I thought that would

2123
01:29:41,800 --> 01:29:44,860
be a good example and also something

2124
01:29:43,000 --> 01:29:46,719
that people who watch am a hero every

2125
01:29:44,859 --> 01:29:48,069
day would also be entertained by because

2126
01:29:46,719 --> 01:29:51,069
I know that a lot of people have asked

2127
01:29:48,069 --> 01:29:53,519
for that in the past and you know that

2128
01:29:51,069 --> 01:29:57,149
they would want to see that so that's it

2129
01:29:53,520 --> 01:30:01,540
thanks everyone for joining me and I

2130
01:29:57,149 --> 01:30:02,619
hopefully everyone will will stay tuned

2131
01:30:01,539 --> 01:30:04,659
for some of those dead students on

2132
01:30:02,619 --> 01:30:06,159
things let me know how that is I'll

2133
01:30:04,659 --> 01:30:08,319
probably go switch over and take a

2134
01:30:06,159 --> 01:30:10,269
little bit of a look at it myself so

2135
01:30:08,319 --> 01:30:11,829
take it easy everyone and have fun

2136
01:30:10,270 --> 01:30:14,640
coding I'll see you guys back here on

2137
01:30:11,829 --> 01:30:14,640
Monday

