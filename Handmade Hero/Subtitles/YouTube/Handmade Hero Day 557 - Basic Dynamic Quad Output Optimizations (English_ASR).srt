1
00:00:00,030 --> 00:00:03,119
hello everybody welcome to hand made

2
00:00:01,679 --> 00:00:04,830
here oh sure we code a complete game

3
00:00:03,120 --> 00:00:06,150
live on stream before we get started

4
00:00:04,830 --> 00:00:09,210
today I wanna just make everyone aware

5
00:00:06,150 --> 00:00:11,550
as I will for the next few streams we do

6
00:00:09,210 --> 00:00:13,440
have a discord now it is very active I

7
00:00:11,550 --> 00:00:14,490
think we've got over 600 people on there

8
00:00:13,439 --> 00:00:18,329
already even though it's been up for

9
00:00:14,490 --> 00:00:20,519
only a couple days we are trying this

10
00:00:18,329 --> 00:00:21,839
out because so far you know I hat wasn't

11
00:00:20,519 --> 00:00:24,149
thrilled with twitch chat it's kind of

12
00:00:21,839 --> 00:00:25,140
cumbersome it's less permanent it's just

13
00:00:24,149 --> 00:00:27,288
not that useful

14
00:00:25,140 --> 00:00:30,268
I don't like Twitter it's a trash fire

15
00:00:27,289 --> 00:00:32,910
and so I just wanted some place that we

16
00:00:30,268 --> 00:00:36,299
could manage and it made it easier for

17
00:00:32,909 --> 00:00:37,679
me to basically like moderate right so

18
00:00:36,299 --> 00:00:39,289
we have a discord now if you want to

19
00:00:37,679 --> 00:00:42,179
join it we'll be putting links up to it

20
00:00:39,289 --> 00:00:45,149
soon as well but if you just go to

21
00:00:42,179 --> 00:00:47,369
discord GG slash Molly Rocket that'll

22
00:00:45,149 --> 00:00:50,009
take you right to the invite you can

23
00:00:47,369 --> 00:00:52,948
join up we're close to 700 now nevermind

24
00:00:50,009 --> 00:00:54,359
and I would HIGHLY encourage people to

25
00:00:52,948 --> 00:00:57,030
check it out it's been good people have

26
00:00:54,359 --> 00:00:59,369
been very civil on there and I am kind

27
00:00:57,030 --> 00:01:01,590
of popping in from time to time to

28
00:00:59,369 --> 00:01:03,929
enforce it being civil we have a strict

29
00:01:01,590 --> 00:01:05,250
no politics rule there no twitter

30
00:01:03,929 --> 00:01:07,650
outrage and no politics

31
00:01:05,250 --> 00:01:09,299
soon as I see something like that I'm

32
00:01:07,650 --> 00:01:10,740
gonna ban it I haven't had to yet which

33
00:01:09,299 --> 00:01:12,330
has been great thank you for everyone

34
00:01:10,739 --> 00:01:13,739
for being on the best behavior but I'm

35
00:01:12,329 --> 00:01:15,629
sure inevitably some people won't be on

36
00:01:13,739 --> 00:01:19,349
their best behavior and we will

37
00:01:15,629 --> 00:01:21,810
eliminate this so unlike Twitter you can

38
00:01:19,349 --> 00:01:23,519
come there and be guaranteed that you

39
00:01:21,810 --> 00:01:24,600
will have a much more civil experience

40
00:01:23,519 --> 00:01:27,179
and if for some reason it becomes

41
00:01:24,599 --> 00:01:29,459
uncivil I will step in at my earliest

42
00:01:27,180 --> 00:01:32,009
convenience to make sure that that gets

43
00:01:29,459 --> 00:01:34,228
rectified alright

44
00:01:32,009 --> 00:01:35,759
that's all I wanted to mention there's a

45
00:01:34,228 --> 00:01:37,109
pound live channel on there for

46
00:01:35,759 --> 00:01:38,640
interacting with the show so you can

47
00:01:37,109 --> 00:01:40,679
just use that from now on and forget

48
00:01:38,640 --> 00:01:42,450
about the Twitter chat just use that

49
00:01:40,680 --> 00:01:44,280
pound live channel and I will scan it

50
00:01:42,450 --> 00:01:46,109
and answer questions from it during the

51
00:01:44,280 --> 00:01:47,489
stream so there's really no need for the

52
00:01:46,109 --> 00:01:48,959
trish chat anymore if you don't like it

53
00:01:47,489 --> 00:01:51,359
or just want something a little more

54
00:01:48,959 --> 00:01:53,879
easy to use on your phone you can just

55
00:01:51,359 --> 00:01:55,769
use the discord pound live channel and I

56
00:01:53,879 --> 00:01:57,718
will be watching it so thanks everyone

57
00:01:55,769 --> 00:02:01,500
for making that a good place already and

58
00:01:57,718 --> 00:02:03,780
I will be keeping a pretty close watch

59
00:02:01,500 --> 00:02:07,319
on it to make sure it remains so alright

60
00:02:03,780 --> 00:02:09,750
let's get to it today we've got to do

61
00:02:07,319 --> 00:02:11,549
some last little cleanup I was surprised

62
00:02:09,750 --> 00:02:12,610
I was thinking about how the stream went

63
00:02:11,550 --> 00:02:15,580
Friday night and I

64
00:02:12,610 --> 00:02:18,910
really actually surprised at how well it

65
00:02:15,580 --> 00:02:21,520
went again I'm not a GPU guy it's not

66
00:02:18,909 --> 00:02:24,370
what I spend most of my time doing I do

67
00:02:21,520 --> 00:02:28,270
do some GPU programming but it's more

68
00:02:24,370 --> 00:02:30,759
functional and less like aggressive so

69
00:02:28,270 --> 00:02:33,460
you know I'm kind of a person to come to

70
00:02:30,759 --> 00:02:36,519
if you want to know like how do you do

71
00:02:33,460 --> 00:02:38,110
really well optimized X on a GPU yeah I

72
00:02:36,520 --> 00:02:39,219
don't really know right I don't spend my

73
00:02:38,110 --> 00:02:40,930
time doing that I don't have a lot of

74
00:02:39,219 --> 00:02:44,259
insight to it I just kind of know what

75
00:02:40,930 --> 00:02:46,000
everyone else knows right um and so when

76
00:02:44,259 --> 00:02:47,949
we were looking at the fact that our

77
00:02:46,000 --> 00:02:49,300
multisample resolve was taking a long

78
00:02:47,949 --> 00:02:51,159
time you know I didn't really know how

79
00:02:49,300 --> 00:02:53,170
to solve that problem and I asked around

80
00:02:51,159 --> 00:02:55,000
I was like is there any way for me to

81
00:02:53,169 --> 00:02:57,519
find out if there's multiple samples in

82
00:02:55,000 --> 00:02:59,530
a bucket or not and people were like

83
00:02:57,520 --> 00:03:02,200
nope you know apparently on iOS you can

84
00:02:59,530 --> 00:03:03,849
in a limited sense but that's pretty

85
00:03:02,199 --> 00:03:04,958
much the only place so metals like the

86
00:03:03,849 --> 00:03:07,419
only thing that actually exposes that

87
00:03:04,959 --> 00:03:09,370
metal on phones is the only thing that

88
00:03:07,419 --> 00:03:13,509
that actually exposes that so just to

89
00:03:09,370 --> 00:03:16,209
give you some perspective on how limited

90
00:03:13,509 --> 00:03:17,439
that is and so I was like oh that's a

91
00:03:16,209 --> 00:03:19,420
bummer I guess we can't really speed

92
00:03:17,439 --> 00:03:21,519
this up but then when we actually took a

93
00:03:19,419 --> 00:03:24,159
look at it and I was like oh well what

94
00:03:21,519 --> 00:03:25,480
if we just kept track of when we need to

95
00:03:24,159 --> 00:03:27,069
and when we don't need a sample from

96
00:03:25,479 --> 00:03:29,409
these things putting in those

97
00:03:27,069 --> 00:03:30,729
optimizations like drastically reduced

98
00:03:29,409 --> 00:03:32,500
the amount of time we were spending in

99
00:03:30,729 --> 00:03:32,979
those multi sample resolves so we did a

100
00:03:32,500 --> 00:03:35,500
great job

101
00:03:32,979 --> 00:03:37,689
accidentally right I wasn't expecting

102
00:03:35,500 --> 00:03:39,129
much going into it but we can all give

103
00:03:37,689 --> 00:03:40,449
ourselves a pat on the back if you're

104
00:03:39,129 --> 00:03:42,430
out there right now reach over and give

105
00:03:40,449 --> 00:03:43,479
yourself a pat on the back for what we

106
00:03:42,430 --> 00:03:45,459
were able to accomplish in the last

107
00:03:43,479 --> 00:03:47,469
dream because honestly for non GPU

108
00:03:45,459 --> 00:03:49,599
people I think we did pretty good I'm

109
00:03:47,469 --> 00:03:52,330
sure that GPU people could do better no

110
00:03:49,599 --> 00:03:54,039
question about that but I think we did a

111
00:03:52,330 --> 00:03:55,959
pretty good job attacking a problem when

112
00:03:54,039 --> 00:03:57,759
honestly it was a pretty esoteric and

113
00:03:55,959 --> 00:03:59,950
weird thing we had to do but we we

114
00:03:57,759 --> 00:04:01,120
worked around it pretty well I think

115
00:03:59,949 --> 00:04:03,069
we'll probably able to do more in the

116
00:04:01,120 --> 00:04:04,810
future as we learn a little bit more

117
00:04:03,069 --> 00:04:06,729
about what's going on there and profile

118
00:04:04,810 --> 00:04:08,289
more aggressively but I I was pretty

119
00:04:06,729 --> 00:04:10,449
happy with how we were able to attack

120
00:04:08,289 --> 00:04:11,979
that and we sped up our death appeals as

121
00:04:10,449 --> 00:04:14,439
well so I think we've done a nice job

122
00:04:11,979 --> 00:04:18,159
there we've effectively got what amounts

123
00:04:14,439 --> 00:04:20,620
to now more or less a pretty good

124
00:04:18,160 --> 00:04:23,010
deferred rendering pipeline for the

125
00:04:20,620 --> 00:04:26,079
depth peeling stuff because we now know

126
00:04:23,009 --> 00:04:28,509
in the def peel part we

127
00:04:26,079 --> 00:04:30,008
really evaluate hardly anything we only

128
00:04:28,509 --> 00:04:31,840
evaluate things that actually need to

129
00:04:30,009 --> 00:04:34,120
get evaluated it's that as good as a

130
00:04:31,839 --> 00:04:36,279
full deferred render and the reason for

131
00:04:34,120 --> 00:04:38,978
that is because right now we still

132
00:04:36,279 --> 00:04:40,718
inside a single def peel we left the

133
00:04:38,978 --> 00:04:44,288
depth buffer tell us what should be

134
00:04:40,718 --> 00:04:46,899
there and so we still do multiple

135
00:04:44,288 --> 00:04:49,688
evaluations for no reason what that says

136
00:04:46,899 --> 00:04:52,718
to me is that you know eventually we may

137
00:04:49,689 --> 00:04:54,968
want to do a little bit more of a

138
00:04:52,718 --> 00:04:57,098
deferred render since we have the Deaf

139
00:04:54,968 --> 00:04:57,399
feel it probably is the right thing to

140
00:04:57,098 --> 00:04:59,500
do

141
00:04:57,399 --> 00:05:01,209
rather than putting colors into those

142
00:04:59,500 --> 00:05:03,519
buffers just putting an ID into those

143
00:05:01,209 --> 00:05:06,430
buffers it tells us what to render might

144
00:05:03,519 --> 00:05:08,859
be a better idea long term because again

145
00:05:06,430 --> 00:05:11,379
it would save us costly for pixel

146
00:05:08,860 --> 00:05:13,300
evaluations might be something we want

147
00:05:11,379 --> 00:05:15,639
to do I don't know yet

148
00:05:13,300 --> 00:05:17,680
we'll see but that's just my guess

149
00:05:15,639 --> 00:05:19,509
because as we start to layer lighting on

150
00:05:17,680 --> 00:05:21,848
top of this the main thing that we're

151
00:05:19,509 --> 00:05:23,590
gonna see is that the lighting

152
00:05:21,848 --> 00:05:25,089
computations will dominate our shader

153
00:05:23,589 --> 00:05:26,619
performance because we don't really do

154
00:05:25,089 --> 00:05:28,060
anything else in our shader right all we

155
00:05:26,620 --> 00:05:29,319
do in our shader is pulled from a

156
00:05:28,060 --> 00:05:31,658
texture and put it on the screen whereas

157
00:05:29,319 --> 00:05:33,580
sprite oriented game we don't have a lot

158
00:05:31,658 --> 00:05:36,069
of complexity going on in those shaders

159
00:05:33,579 --> 00:05:38,978
so it's very very fast for us to execute

160
00:05:36,069 --> 00:05:41,199
our shaders and so what's gonna end up

161
00:05:38,978 --> 00:05:42,430
being very slow in our shaders is that

162
00:05:41,199 --> 00:05:44,710
lighting the lighting is gonna have to

163
00:05:42,430 --> 00:05:46,418
grab from multiple sources it's gonna

164
00:05:44,709 --> 00:05:47,859
have to integrate those sources and then

165
00:05:46,418 --> 00:05:51,068
it's got to produce a light reflection

166
00:05:47,860 --> 00:05:53,740
value even though that may not be a huge

167
00:05:51,069 --> 00:05:55,870
deal it's gonna be way more of a deal

168
00:05:53,740 --> 00:05:58,060
than the super simple just pull from a

169
00:05:55,870 --> 00:06:01,088
texture that we're doing now and so

170
00:05:58,060 --> 00:06:03,098
that's really why I think we have to be

171
00:06:01,088 --> 00:06:04,538
aware of that and have to start to think

172
00:06:03,098 --> 00:06:07,449
about that shader is something that

173
00:06:04,538 --> 00:06:09,189
maybe needs to be deferred just the

174
00:06:07,449 --> 00:06:10,960
lighting part anyway ought to be

175
00:06:09,189 --> 00:06:13,389
deferred and so we might do that and the

176
00:06:10,959 --> 00:06:15,489
good news is for that is that all we

177
00:06:13,389 --> 00:06:17,468
would really need is a little bit of

178
00:06:15,490 --> 00:06:19,990
extra data just a little tiny bit of

179
00:06:17,468 --> 00:06:23,459
extra data into the def peel so we would

180
00:06:19,990 --> 00:06:26,408
need you know really just one more

181
00:06:23,459 --> 00:06:32,318
render target probably when we do our

182
00:06:26,408 --> 00:06:33,968
resolve would probably sufficient to get

183
00:06:32,319 --> 00:06:35,348
one more render in target in there I

184
00:06:33,968 --> 00:06:38,110
think I don't know it might be copyable

185
00:06:35,348 --> 00:06:39,870
see but tracking the lighting and doing

186
00:06:38,110 --> 00:06:41,970
the lighting at the end

187
00:06:39,870 --> 00:06:43,288
would probably not be too hard oh we

188
00:06:41,970 --> 00:06:46,560
would really need to know is what the

189
00:06:43,288 --> 00:06:48,060
normal is right because we already know

190
00:06:46,560 --> 00:06:49,740
the position so we really would only

191
00:06:48,060 --> 00:06:51,478
need to know what the normal is that's

192
00:06:49,740 --> 00:06:52,860
the only thing we would need and then

193
00:06:51,478 --> 00:06:54,269
when we do our lighting we could do it

194
00:06:52,860 --> 00:06:58,620
on the depth peel itself effectively

195
00:06:54,269 --> 00:07:01,500
right and so I think we're in good shape

196
00:06:58,620 --> 00:07:06,209
for that I don't love the idea of having

197
00:07:01,500 --> 00:07:09,589
to store the normal multi sampled and so

198
00:07:06,209 --> 00:07:12,359
the the tricky thing and I think we'll

199
00:07:09,589 --> 00:07:14,638
I'm pretty sure that what we will need

200
00:07:12,360 --> 00:07:16,590
to do let's put this way is I'm pretty

201
00:07:14,639 --> 00:07:18,300
sure what we need to do is kind of store

202
00:07:16,589 --> 00:07:20,189
some information in a side buffer and

203
00:07:18,300 --> 00:07:21,780
then what we multi sample would have to

204
00:07:20,189 --> 00:07:23,250
be just to look up into that side buffer

205
00:07:21,779 --> 00:07:25,589
I'm pretty sure that's the only way we'd

206
00:07:23,250 --> 00:07:27,329
really be able to make it work and then

207
00:07:25,589 --> 00:07:29,810
during that resolve we would pull out of

208
00:07:27,329 --> 00:07:31,769
that buffer and right into our targets

209
00:07:29,810 --> 00:07:34,019
something like that is probably what

210
00:07:31,769 --> 00:07:35,848
we'll have to do I don't know but that's

211
00:07:34,019 --> 00:07:37,469
my guess and so that would be a pretty

212
00:07:35,848 --> 00:07:39,629
big step we'll save that to the very

213
00:07:37,470 --> 00:07:41,280
last thing we do because we'll have to

214
00:07:39,629 --> 00:07:43,348
see how attentive that lighting actually

215
00:07:41,279 --> 00:07:45,658
is but my guess is that that's gonna be

216
00:07:43,348 --> 00:07:47,218
an issue there's other ways to solve

217
00:07:45,658 --> 00:07:50,339
that problem obviously we could also

218
00:07:47,218 --> 00:07:52,019
attack it by doing a depth pre pass but

219
00:07:50,339 --> 00:07:53,489
again because we've got the multi sample

220
00:07:52,019 --> 00:07:55,769
buffer and the most embargoes really

221
00:07:53,490 --> 00:07:57,658
expensive I'm not sure we wanted really

222
00:07:55,769 --> 00:08:00,418
do pre passes and then have to go back

223
00:07:57,658 --> 00:08:03,300
over them it's all very complicated I

224
00:08:00,418 --> 00:08:05,569
know but that's that's where we're at so

225
00:08:03,300 --> 00:08:07,770
we could choose to do a depth free pass

226
00:08:05,569 --> 00:08:09,959
if we didn't get the free pass then

227
00:08:07,769 --> 00:08:12,478
basically what we would do is do the

228
00:08:09,959 --> 00:08:15,629
multi sample buffer as depth only no

229
00:08:12,478 --> 00:08:17,189
lighting no color just depth we would

230
00:08:15,629 --> 00:08:19,259
resolve that we would then have our

231
00:08:17,189 --> 00:08:22,769
resolved buffer and we would render once

232
00:08:19,259 --> 00:08:24,900
using that depth pre pass as an equals

233
00:08:22,769 --> 00:08:27,750
operator to figure out what we're gonna

234
00:08:24,899 --> 00:08:28,459
render we could do it that way as I say

235
00:08:27,750 --> 00:08:31,319
that out loud

236
00:08:28,459 --> 00:08:34,168
it kind of sounds like the right answer

237
00:08:31,319 --> 00:08:35,430
actually so maybe I should take that guy

238
00:08:34,168 --> 00:08:39,478
understood and said maybe that's what we

239
00:08:35,429 --> 00:08:40,978
will do so that's what we want to move

240
00:08:39,479 --> 00:08:42,990
towards the thing we're going to be

241
00:08:40,979 --> 00:08:45,149
doing today is putting our ground cover

242
00:08:42,990 --> 00:08:48,089
back in and that's basically going to be

243
00:08:45,149 --> 00:08:49,799
about optimizing that output I want to

244
00:08:48,089 --> 00:08:52,920
verify that if the output that's taking

245
00:08:49,799 --> 00:08:54,750
the time and not the rendering of the

246
00:08:52,919 --> 00:08:56,309
because the ways that we would address

247
00:08:54,750 --> 00:08:57,509
those two problems are different so

248
00:08:56,309 --> 00:08:59,159
that's we're gonna be doing today

249
00:08:57,509 --> 00:09:01,100
is checking out what's going on with the

250
00:08:59,159 --> 00:09:03,870
ground cover I'm assuming it's just

251
00:09:01,100 --> 00:09:07,860
because our code that actually outputs

252
00:09:03,870 --> 00:09:09,539
it is not particularly well written and

253
00:09:07,860 --> 00:09:11,310
then all we need to do is improve that

254
00:09:09,539 --> 00:09:13,230
part of the code if that turns out not

255
00:09:11,309 --> 00:09:14,969
to be the case our method of attack it

256
00:09:13,230 --> 00:09:17,550
would be different we would instead be

257
00:09:14,970 --> 00:09:20,278
trying to cache that ground cover and

258
00:09:17,549 --> 00:09:22,588
reuse it already on the card if it turns

259
00:09:20,278 --> 00:09:24,149
out to be a transmission bottleneck so

260
00:09:22,589 --> 00:09:27,329
that's really what I want you to focus

261
00:09:24,149 --> 00:09:29,159
on today that difference there so again

262
00:09:27,328 --> 00:09:31,319
a lot of talk just trying to set the

263
00:09:29,159 --> 00:09:32,819
stage there I apologize that I had to

264
00:09:31,320 --> 00:09:34,920
say so many things hopefully all those

265
00:09:32,820 --> 00:09:36,660
things made good sense to you but again

266
00:09:34,919 --> 00:09:38,039
we're kind of in a relatively complex

267
00:09:36,659 --> 00:09:40,139
space right now so you have to keep that

268
00:09:38,039 --> 00:09:41,490
in mind all right so looking at the

269
00:09:40,139 --> 00:09:42,720
screen as it stands right now you can

270
00:09:41,490 --> 00:09:44,159
see we're getting a very nice frame

271
00:09:42,720 --> 00:09:46,740
right here that's because our graphics

272
00:09:44,159 --> 00:09:49,139
pipe is actually quite well optimized at

273
00:09:46,740 --> 00:09:51,028
this point and I think we're well below

274
00:09:49,139 --> 00:09:55,350
any amount of time we might actually

275
00:09:51,028 --> 00:09:57,059
take if we actually look here at the

276
00:09:55,350 --> 00:10:00,329
total time we're taking we're actually

277
00:09:57,059 --> 00:10:03,659
well below even 60 frames a second

278
00:10:00,328 --> 00:10:05,519
amount time used so at 60 frames a

279
00:10:03,659 --> 00:10:08,219
second we will be using 60 milliseconds

280
00:10:05,519 --> 00:10:10,019
we're not even using that and and this

281
00:10:08,220 --> 00:10:11,699
is without even the full optimization on

282
00:10:10,019 --> 00:10:14,278
we love all of our certs in here right

283
00:10:11,698 --> 00:10:15,838
and that's with debug collation if we

284
00:10:14,278 --> 00:10:18,870
actually turn off debug collation we

285
00:10:15,839 --> 00:10:21,269
would get several milliseconds back and

286
00:10:18,870 --> 00:10:23,789
most of that time is spent in the GPU at

287
00:10:21,269 --> 00:10:26,009
the moment it looks like as well so

288
00:10:23,789 --> 00:10:28,620
we're really doing pretty good here so

289
00:10:26,009 --> 00:10:30,569
that's the that's a pretty good number

290
00:10:28,620 --> 00:10:32,690
that's a pretty good number because this

291
00:10:30,570 --> 00:10:36,120
just goes away in our shipping version

292
00:10:32,690 --> 00:10:38,130
we're sitting pretty here I would say

293
00:10:36,120 --> 00:10:41,759
and if you take a look at our frames you

294
00:10:38,129 --> 00:10:43,379
can see they're they're mostly again if

295
00:10:41,759 --> 00:10:45,958
you look in here you've got the game

296
00:10:43,379 --> 00:10:48,028
update which is pretty reliable you've

297
00:10:45,958 --> 00:10:50,129
got the frame display in here you got

298
00:10:48,028 --> 00:10:52,169
the debug collation here you can see

299
00:10:50,129 --> 00:10:53,490
that we get some weird offsetting a lot

300
00:10:52,169 --> 00:10:55,979
of what that is I think is the

301
00:10:53,490 --> 00:10:59,370
unreliability of whether or not we hit

302
00:10:55,980 --> 00:11:01,110
or miss the windows display stuff which

303
00:10:59,370 --> 00:11:02,310
it's kind of out of our hands with the

304
00:11:01,110 --> 00:11:04,740
weird setup we're using right now which

305
00:11:02,309 --> 00:11:05,659
has to go to the HDMI as well as the

306
00:11:04,740 --> 00:11:07,070
monitor and

307
00:11:05,659 --> 00:11:08,659
stuff like that some point I should

308
00:11:07,070 --> 00:11:11,390
probably get a splitter so we don't have

309
00:11:08,659 --> 00:11:12,709
this problem but anyway that's what

310
00:11:11,389 --> 00:11:15,139
we're looking at right now and that's

311
00:11:12,710 --> 00:11:17,389
all fine so I think we're in good shape

312
00:11:15,139 --> 00:11:19,279
but what we're gonna do now is take a

313
00:11:17,389 --> 00:11:21,769
look at what happens to these timings

314
00:11:19,279 --> 00:11:24,799
once we put in that ground cover so you

315
00:11:21,769 --> 00:11:26,509
know we take a look at the actual have

316
00:11:24,799 --> 00:11:28,129
any output right now there's kind of a

317
00:11:26,509 --> 00:11:30,200
crappy routine we threw in there for

318
00:11:28,129 --> 00:11:32,120
outputting ground cover you can see

319
00:11:30,200 --> 00:11:35,930
right here during fill unpacked entity

320
00:11:32,120 --> 00:11:37,879
we put that ground cover in but we never

321
00:11:35,929 --> 00:11:42,339
actually render it and you can see that

322
00:11:37,879 --> 00:11:42,340
the reason we don't render it is

323
00:11:43,000 --> 00:11:48,950
actually I'm right in thinking that does

324
00:11:47,179 --> 00:11:50,829
get called right yeah is because I

325
00:11:48,950 --> 00:11:54,820
believe there's a separate function

326
00:11:50,830 --> 00:11:58,009
there it is called jump draw again cover

327
00:11:54,820 --> 00:12:00,590
which when we encounter an entity we are

328
00:11:58,009 --> 00:12:02,210
spooling out to this function to take

329
00:12:00,590 --> 00:12:04,580
the ground cover that's specified as

330
00:12:02,210 --> 00:12:06,440
being on that entity and we're dumping

331
00:12:04,580 --> 00:12:08,900
it to the graphics card by putting it

332
00:12:06,440 --> 00:12:11,000
into the buffer you can see here what

333
00:12:08,899 --> 00:12:13,309
happens is we look at what bitmaps are

334
00:12:11,000 --> 00:12:16,429
used for any particular piece of ground

335
00:12:13,309 --> 00:12:19,309
cover and we we push a sprite out for

336
00:12:16,429 --> 00:12:20,839
that and what happens if we turn this on

337
00:12:19,309 --> 00:12:23,500
so I'm just gonna turn it on here and

338
00:12:20,840 --> 00:12:27,019
you can look at what happens in the game

339
00:12:23,500 --> 00:12:30,230
when we do so is that once we turn that

340
00:12:27,019 --> 00:12:33,259
on you can see that we have a 17% kit

341
00:12:30,230 --> 00:12:35,360
here for render ground cover and you can

342
00:12:33,259 --> 00:12:38,960
see that our timing does jump up

343
00:12:35,360 --> 00:12:41,840
dramatically right so it we get a much

344
00:12:38,960 --> 00:12:43,519
worse performance profile when we dump a

345
00:12:41,840 --> 00:12:46,790
ton of ground cover in there which is

346
00:12:43,519 --> 00:12:48,980
what I've just done so if we draw out if

347
00:12:46,789 --> 00:12:51,319
we you know pull back a little bit here

348
00:12:48,980 --> 00:12:53,269
what you can see is you've got all of

349
00:12:51,320 --> 00:12:56,270
this ground covered that we've spammed

350
00:12:53,269 --> 00:12:57,949
out there and my question the first

351
00:12:56,269 --> 00:13:01,549
thing that I wanted to ask is our saying

352
00:12:57,950 --> 00:13:03,980
before my question I want answered is to

353
00:13:01,549 --> 00:13:07,279
what extent is the ground cover based on

354
00:13:03,980 --> 00:13:10,519
the rendering right like to what extent

355
00:13:07,279 --> 00:13:14,089
is it based on the GPU is that what's

356
00:13:10,519 --> 00:13:16,460
causing us to be costly here or is it

357
00:13:14,090 --> 00:13:17,990
the fact that we're taking too long to

358
00:13:16,460 --> 00:13:21,290
actually push it out

359
00:13:17,990 --> 00:13:24,649
right and so if we go back to our frames

360
00:13:21,289 --> 00:13:26,029
like here I can see that here you can

361
00:13:24,649 --> 00:13:27,860
see here we've got the debug collation

362
00:13:26,029 --> 00:13:30,259
and the frame display I'm gonna go over

363
00:13:27,860 --> 00:13:31,879
here to the game update and in game

364
00:13:30,259 --> 00:13:35,389
update and render what you can see here

365
00:13:31,879 --> 00:13:37,519
is we've kind of got a breakdown begin

366
00:13:35,389 --> 00:13:38,899
world change lighting test right these

367
00:13:37,519 --> 00:13:40,039
things are not really taking time cuz

368
00:13:38,899 --> 00:13:41,079
they're you know this one doesn't do

369
00:13:40,039 --> 00:13:43,490
anything and this one's not really

370
00:13:41,080 --> 00:13:46,340
operational at the moment we jump in

371
00:13:43,490 --> 00:13:46,759
here and there's too many things counted

372
00:13:46,340 --> 00:13:48,320
in there

373
00:13:46,759 --> 00:13:51,319
looks like we need bigger vertex buffers

374
00:13:48,320 --> 00:13:53,360
maybe I should have out maybe I should

375
00:13:51,320 --> 00:13:57,230
update how big those vertex buffers

376
00:13:53,360 --> 00:13:58,940
actually are holos again of course the

377
00:13:57,230 --> 00:14:00,830
problem is this is not a very fair test

378
00:13:58,940 --> 00:14:04,610
because the debug collation would show

379
00:14:00,830 --> 00:14:06,860
those differently but let's hold that

380
00:14:04,610 --> 00:14:09,470
thought so if we were to give ourselves

381
00:14:06,860 --> 00:14:10,909
more space like this is much more than

382
00:14:09,470 --> 00:14:12,590
we need for actually running obviously

383
00:14:10,909 --> 00:14:14,269
but if we're gonna give ourselves more

384
00:14:12,590 --> 00:14:17,269
space so we can output lots of little

385
00:14:14,269 --> 00:14:19,970
things to the debug system let's go

386
00:14:17,269 --> 00:14:29,480
ahead and take a look here at where that

387
00:14:19,970 --> 00:14:31,100
vertex buffer actually gets allocated so

388
00:14:29,480 --> 00:14:33,950
we should have some render limits here

389
00:14:31,100 --> 00:14:36,680
you can see let's see where that's

390
00:14:33,950 --> 00:14:38,810
coming in here so here's our limits Max

391
00:14:36,679 --> 00:14:41,539
quad-cam per frame that's pretty much

392
00:14:38,809 --> 00:14:45,099
what's going to do it right and so I can

393
00:14:41,539 --> 00:14:48,199
update that a little bit we'll see

394
00:14:45,100 --> 00:14:50,409
it might be getting a bit large at this

395
00:14:48,200 --> 00:14:50,410
point

396
00:14:52,809 --> 00:14:56,319
but if I give ourselves a much larger

397
00:14:54,429 --> 00:14:59,139
vertex buffer we should then be able to

398
00:14:56,320 --> 00:15:12,430
output something larger right I would

399
00:14:59,139 --> 00:15:14,230
think so again fling down to the game

400
00:15:12,429 --> 00:15:15,669
update I just want to look at the

401
00:15:14,230 --> 00:15:17,320
entities it looks like that

402
00:15:15,669 --> 00:15:19,059
for whatever reason it looks like that's

403
00:15:17,320 --> 00:15:21,010
just outputting too many things but I

404
00:15:19,059 --> 00:15:23,769
don't know why are we counting way too

405
00:15:21,009 --> 00:15:24,819
many things somewhere here I might be

406
00:15:23,769 --> 00:15:26,860
misinterpreting that error we should

407
00:15:24,820 --> 00:15:28,660
find out what it's saying that we're out

408
00:15:26,860 --> 00:15:31,360
of space to submit that to the graphics

409
00:15:28,659 --> 00:15:33,009
card but I'm not sure why that would be

410
00:15:31,360 --> 00:15:37,509
so I'm wondering how we're ending up

411
00:15:33,009 --> 00:15:38,590
with so many calls you know what we

412
00:15:37,509 --> 00:15:40,059
should be able to look at we should be

413
00:15:38,590 --> 00:15:44,139
able to see that pretty easily in here

414
00:15:40,059 --> 00:15:46,959
right why do I keep looking at the

415
00:15:44,139 --> 00:15:48,730
memory so I guess it's because of stuff

416
00:15:46,960 --> 00:15:50,560
like this render ground cover is getting

417
00:15:48,730 --> 00:15:52,180
called that many times maybe what we

418
00:15:50,559 --> 00:15:53,739
should do is just take a look at that as

419
00:15:52,179 --> 00:15:55,929
being something that doesn't get opened

420
00:15:53,740 --> 00:15:58,090
and closed as many times but yeah if you

421
00:15:55,929 --> 00:16:03,339
look here you've got so many of these

422
00:15:58,090 --> 00:16:05,410
things opened every time I can see why

423
00:16:03,340 --> 00:16:09,430
that's too many right I mean that's that

424
00:16:05,409 --> 00:16:12,459
is just tens of thousands of those zones

425
00:16:09,429 --> 00:16:14,829
and it would be nice to not actually do

426
00:16:12,460 --> 00:16:17,290
that it would be nice if we didn't have

427
00:16:14,830 --> 00:16:19,389
to open actual zones for that we just

428
00:16:17,289 --> 00:16:22,809
did a summation but yeah at the moment

429
00:16:19,389 --> 00:16:24,580
maybe that's a little bit hard to do so

430
00:16:22,809 --> 00:16:27,509
yeah if you look in here the way that

431
00:16:24,580 --> 00:16:29,950
we're timing it just not not great right

432
00:16:27,509 --> 00:16:32,679
and we could time it a little bit

433
00:16:29,950 --> 00:16:34,900
differently like and so on I'm gonna get

434
00:16:32,679 --> 00:16:37,569
rid of things like timing each of these

435
00:16:34,899 --> 00:16:39,490
individually for now and we can open

436
00:16:37,570 --> 00:16:41,820
that back up again if if one of them

437
00:16:39,490 --> 00:16:46,799
starts to be a particular problem right

438
00:16:41,820 --> 00:16:48,820
but let's just get rid of those for now

439
00:16:46,799 --> 00:16:50,500
because we're counting them for every

440
00:16:48,820 --> 00:16:53,190
entity game is just not constructive

441
00:16:50,500 --> 00:16:53,190
right

442
00:16:59,429 --> 00:17:04,269
so if I was to actually get rid of all

443
00:17:02,198 --> 00:17:08,220
of those right and we just looked at

444
00:17:04,269 --> 00:17:08,220
update and render identities by itself

445
00:17:12,028 --> 00:17:16,209
that should take a lot more stress off

446
00:17:14,409 --> 00:17:17,470
of that debug system in terms of how

447
00:17:16,209 --> 00:17:19,870
many things that ask to collate every

448
00:17:17,470 --> 00:17:22,028
frame which of course would be good and

449
00:17:19,869 --> 00:17:24,278
so anyway if I go in and look at the

450
00:17:22,028 --> 00:17:26,380
frames now and in fact you can see that

451
00:17:24,278 --> 00:17:29,380
right you can see the debug collation

452
00:17:26,380 --> 00:17:31,059
got a lot cheaper right and the reason

453
00:17:29,380 --> 00:17:33,159
for that is because we're not dumping

454
00:17:31,058 --> 00:17:34,898
you know tens of thousands of zones and

455
00:17:33,159 --> 00:17:38,799
do it every frame but it has to account

456
00:17:34,898 --> 00:17:40,689
for so you look up now you can see that

457
00:17:38,798 --> 00:17:43,210
mostly this this thing is the only thing

458
00:17:40,690 --> 00:17:45,548
that's really getting pounded on get

459
00:17:43,210 --> 00:17:47,019
best match asset from we do need to

460
00:17:45,548 --> 00:17:49,538
start looking at that a bit more remove

461
00:17:47,019 --> 00:17:51,220
world chunks pretty modest and so that

462
00:17:49,538 --> 00:17:52,690
should make it a lot easier to drill

463
00:17:51,220 --> 00:17:54,669
down here and see these things without

464
00:17:52,690 --> 00:17:56,950
too much fuss I would think

465
00:17:54,669 --> 00:17:59,049
Wow still not so I think this must be a

466
00:17:56,950 --> 00:18:00,460
bug how is it it doesn't seem like it

467
00:17:59,048 --> 00:18:02,619
would really be possible that we're

468
00:18:00,460 --> 00:18:04,450
getting this error here let's take a

469
00:18:02,619 --> 00:18:06,849
look and see can we look at commands at

470
00:18:04,450 --> 00:18:08,830
all no we can't let me take a look at

471
00:18:06,849 --> 00:18:10,689
what's going on there that just bothers

472
00:18:08,829 --> 00:18:12,939
me at this point we should be I mean

473
00:18:10,690 --> 00:18:15,130
with that much vertex space something's

474
00:18:12,940 --> 00:18:17,798
up so I think we just got a bug or

475
00:18:15,130 --> 00:18:20,080
something let's go exploring I want to

476
00:18:17,798 --> 00:18:22,028
know what's going on there I don't like

477
00:18:20,079 --> 00:18:23,288
that hitting that Headroom doesn't make

478
00:18:22,028 --> 00:18:30,429
a lot of sense to me not sure why that

479
00:18:23,288 --> 00:18:32,230
would be happening so here we are

480
00:18:30,429 --> 00:18:33,840
running the debug obviously that cost a

481
00:18:32,230 --> 00:18:36,220
lot more

482
00:18:33,839 --> 00:18:39,428
let's take a look oops let's take a look

483
00:18:36,220 --> 00:18:41,259
at the frame display you can see now if

484
00:18:39,429 --> 00:18:42,460
all this stuff got a lot slower as you

485
00:18:41,259 --> 00:18:45,548
would expect because it's all debug

486
00:18:42,460 --> 00:18:47,288
compiled now if I hop into update and

487
00:18:45,548 --> 00:18:48,519
render world here this is the place

488
00:18:47,288 --> 00:18:51,099
we're getting the crash before when I

489
00:18:48,519 --> 00:18:52,839
click on this so when I try to open up

490
00:18:51,099 --> 00:18:56,319
update and render entities we get this

491
00:18:52,839 --> 00:18:59,230
nasty error hitting us the question is

492
00:18:56,319 --> 00:19:01,119
why right so let's inspect what's

493
00:18:59,230 --> 00:19:03,130
actually happening maybe it's a

494
00:19:01,119 --> 00:19:05,199
erroneous assumption that I'm making

495
00:19:03,130 --> 00:19:07,080
about who's causing this problem maybe

496
00:19:05,200 --> 00:19:08,370
we just have a bug and we could

497
00:19:07,079 --> 00:19:10,949
the bug and then not have this problem

498
00:19:08,369 --> 00:19:12,599
right so what you can see here is we're

499
00:19:10,950 --> 00:19:14,370
getting a bug inside draw frame bar

500
00:19:12,599 --> 00:19:16,079
graph and that is what we would expect

501
00:19:14,369 --> 00:19:19,528
to see in the case where we would draw

502
00:19:16,079 --> 00:19:21,148
too many things so I you know it's not

503
00:19:19,528 --> 00:19:22,259
looking good because it looks like it is

504
00:19:21,148 --> 00:19:24,869
actually something where we're just

505
00:19:22,259 --> 00:19:26,579
drawing too many of these uh and I don't

506
00:19:24,869 --> 00:19:28,739
know exactly how many of them we've

507
00:19:26,579 --> 00:19:30,750
drawn but let's take a look inside where

508
00:19:28,740 --> 00:19:34,380
we're actually erroring out and see what

509
00:19:30,750 --> 00:19:35,970
the command table says right so if we

510
00:19:34,380 --> 00:19:38,250
take a look at our max vertex count in

511
00:19:35,970 --> 00:19:42,298
our vertex count we are actually sinking

512
00:19:38,250 --> 00:19:44,490
four million vertices in this case and

513
00:19:42,298 --> 00:19:47,609
that's just way too many as you might

514
00:19:44,490 --> 00:19:50,130
expect right so why we're thinking that

515
00:19:47,609 --> 00:19:53,158
mini is hard to say but I guess it's

516
00:19:50,130 --> 00:19:56,190
because we have 256 frames to display

517
00:19:53,159 --> 00:19:59,519
and in those 256 let's just do the math

518
00:19:56,190 --> 00:20:02,639
right we were doing about 2,000 of these

519
00:19:59,519 --> 00:20:04,740
things if you look at 512 the number of

520
00:20:02,638 --> 00:20:08,099
vertices we're sinking for those is

521
00:20:04,740 --> 00:20:10,589
probably gonna be like at least six but

522
00:20:08,099 --> 00:20:12,658
probably more like twelve there's our

523
00:20:10,589 --> 00:20:14,459
four million right there so you can see

524
00:20:12,659 --> 00:20:17,909
that that frame display is just way too

525
00:20:14,460 --> 00:20:20,009
costly for us unfortunately just again

526
00:20:17,909 --> 00:20:21,690
because of how many it draws when you

527
00:20:20,009 --> 00:20:26,220
start to have too many zones piling up

528
00:20:21,690 --> 00:20:28,590
like that right and so if we take a look

529
00:20:26,220 --> 00:20:30,690
inside the asset query there that was

530
00:20:28,589 --> 00:20:33,240
the thing that was really hurting us

531
00:20:30,690 --> 00:20:37,139
right the the thing that was saying we

532
00:20:33,240 --> 00:20:40,700
got to do this is how many this right

533
00:20:37,138 --> 00:20:44,308
here get best match bitmap from right

534
00:20:40,700 --> 00:20:46,080
and so what we kind of need you know in

535
00:20:44,308 --> 00:20:47,759
the best and the best of all possible

536
00:20:46,079 --> 00:20:50,519
worlds and maybe we should do this at

537
00:20:47,759 --> 00:20:52,888
some point but we kind of need a way of

538
00:20:50,519 --> 00:20:55,740
timing zones that doesn't incur such a

539
00:20:52,888 --> 00:20:57,209
bad overhead right and we don't really

540
00:20:55,740 --> 00:20:58,769
have a way of doing that at the moment

541
00:20:57,210 --> 00:21:01,829
but maybe just things that do general

542
00:20:58,769 --> 00:21:03,720
sums that don't create as much work for

543
00:21:01,829 --> 00:21:05,819
us in that sense you know maybe that's

544
00:21:03,720 --> 00:21:07,710
the best way to do it I don't know but

545
00:21:05,819 --> 00:21:11,460
you can see that basically our problem

546
00:21:07,710 --> 00:21:13,019
is this right here because that's the

547
00:21:11,460 --> 00:21:15,659
last thing that gets called way too many

548
00:21:13,019 --> 00:21:18,179
times right but it's difficult to say

549
00:21:15,659 --> 00:21:20,670
because you know it means that we don't

550
00:21:18,179 --> 00:21:22,798
get much insight now so now

551
00:21:20,670 --> 00:21:24,808
we're probably fine in fact I can

552
00:21:22,798 --> 00:21:27,150
probably switch off of this but it looks

553
00:21:24,808 --> 00:21:30,990
like there was no bug it's just really

554
00:21:27,150 --> 00:21:32,970
too much data to display for how much

555
00:21:30,990 --> 00:21:34,890
space we actually allocated for

556
00:21:32,970 --> 00:21:41,850
ourselves I don't know how to work

557
00:21:34,890 --> 00:21:43,380
around that problem I'm not sure what to

558
00:21:41,849 --> 00:21:45,058
do about that you know one way is just

559
00:21:43,380 --> 00:21:46,140
to make a much bigger vertex buffer in

560
00:21:45,058 --> 00:21:48,509
debug mode

561
00:21:46,140 --> 00:21:50,850
I don't really know it's a tough one

562
00:21:48,509 --> 00:21:52,980
it's a tough call anyway if I look at

563
00:21:50,849 --> 00:21:55,109
the frames now presumably the bug should

564
00:21:52,980 --> 00:21:56,849
be gone but of course we also have the

565
00:21:55,109 --> 00:22:01,678
problem now we don't get any visibility

566
00:21:56,849 --> 00:22:04,500
right so it's kind of an issue in that

567
00:22:01,679 --> 00:22:06,840
regard because what we would like to do

568
00:22:04,500 --> 00:22:08,308
is we would like to be able to have our

569
00:22:06,839 --> 00:22:11,759
cake and eat it too right we'd like to

570
00:22:08,308 --> 00:22:15,720
be able to see inside here you know

571
00:22:11,759 --> 00:22:18,029
what's taking at the time so you know

572
00:22:15,720 --> 00:22:20,910
sixty one half dozen of the other

573
00:22:18,029 --> 00:22:23,339
but at least now we can all sort of also

574
00:22:20,910 --> 00:22:24,750
say look if we take a look at update and

575
00:22:23,339 --> 00:22:27,480
render entities we can see how much time

576
00:22:24,750 --> 00:22:30,329
it's taking we can take a look at the

577
00:22:27,480 --> 00:22:32,069
differential of that and if we do the

578
00:22:30,329 --> 00:22:33,869
ground cover and we can probably do one

579
00:22:32,069 --> 00:22:35,970
better than that which is to say that

580
00:22:33,869 --> 00:22:37,829
look iterating over the entities is

581
00:22:35,970 --> 00:22:39,900
probably not the worst thing in the

582
00:22:37,829 --> 00:22:41,548
world so if we wanted to we could

583
00:22:39,900 --> 00:22:44,640
probably also do something where we

584
00:22:41,548 --> 00:22:47,308
grout draw the ground cover after right

585
00:22:44,640 --> 00:22:49,890
so like in theory right if you wanted to

586
00:22:47,308 --> 00:22:53,308
you could do something like this where

587
00:22:49,890 --> 00:22:55,380
you do like a second pass afterward and

588
00:22:53,308 --> 00:22:58,500
draw the ground cover there just for

589
00:22:55,380 --> 00:23:00,270
purposes of easy timing so you can know

590
00:22:58,500 --> 00:23:02,630
that you're not timing like the function

591
00:23:00,269 --> 00:23:04,769
call overhead or something like that

592
00:23:02,630 --> 00:23:09,059
that would be a pretty easy thing to do

593
00:23:04,769 --> 00:23:11,759
as well and so if we take a look in say

594
00:23:09,058 --> 00:23:15,389
here and look at how the ground cover

595
00:23:11,759 --> 00:23:18,869
was getting output just take a look at

596
00:23:15,390 --> 00:23:21,330
how that's working draw ground cover you

597
00:23:18,869 --> 00:23:24,178
can see here that there's really not

598
00:23:21,329 --> 00:23:26,250
much information that it needs and so if

599
00:23:24,179 --> 00:23:29,610
we wanted to we could just get rid of

600
00:23:26,250 --> 00:23:31,990
that right like this and then in here to

601
00:23:29,609 --> 00:23:35,139
say all right want you go ahead and

602
00:23:31,990 --> 00:23:38,349
and draw that right so that is one

603
00:23:35,140 --> 00:23:40,210
solution to the problem and if we want

604
00:23:38,349 --> 00:23:43,899
to solve the problem that way then we

605
00:23:40,210 --> 00:23:46,840
can at our discretion make the begin and

606
00:23:43,900 --> 00:23:50,170
end block situation here a little more

607
00:23:46,839 --> 00:23:52,539
concrete so what I could say is instead

608
00:23:50,170 --> 00:23:55,509
of this update and render entity's time

609
00:23:52,539 --> 00:23:58,470
function here what I could say is like

610
00:23:55,509 --> 00:24:02,349
okay let's do a begin block end block

611
00:23:58,470 --> 00:24:07,839
around just this part here and see how

612
00:24:02,349 --> 00:24:12,759
bad it is so let's do begin block ground

613
00:24:07,839 --> 00:24:18,909
cover and block with that I think that's

614
00:24:12,759 --> 00:24:21,429
all we need to do right so and now it'll

615
00:24:18,910 --> 00:24:24,910
only get called once and we can actually

616
00:24:21,429 --> 00:24:27,009
see it without stressing the debug

617
00:24:24,910 --> 00:24:30,190
system we can you know see it pretty

618
00:24:27,009 --> 00:24:32,558
clearly right uh so if you take a look

619
00:24:30,190 --> 00:24:33,880
now at what we're looking at and you and

620
00:24:32,558 --> 00:24:35,649
you don't have the function call

621
00:24:33,880 --> 00:24:38,470
overhead in there of calling it every

622
00:24:35,650 --> 00:24:41,019
time then we can see a more pure

623
00:24:38,470 --> 00:24:45,460
estimate of the cost of just doing drunk

624
00:24:41,019 --> 00:24:48,190
around cover you can see it's bad right

625
00:24:45,460 --> 00:24:50,980
so I don't know if it's the only cause

626
00:24:48,190 --> 00:24:53,620
of badness but it's a significant cause

627
00:24:50,980 --> 00:24:56,170
of badness right and if we were to go

628
00:24:53,619 --> 00:24:58,689
look at what's happening to our frame

629
00:24:56,170 --> 00:25:02,410
times strictly on the GPU side of things

630
00:24:58,690 --> 00:25:05,620
we could get another clue as to whether

631
00:25:02,410 --> 00:25:06,940
or not this is really an issue right let

632
00:25:05,619 --> 00:25:10,299
me go ahead and load this up and render

633
00:25:06,940 --> 00:25:14,230
dock I'm gonna launch here's our frame

634
00:25:10,299 --> 00:25:15,940
I'm gonna capture that frame and then

635
00:25:14,230 --> 00:25:17,470
I'm gonna ask it for the you know kind

636
00:25:15,940 --> 00:25:19,870
of bogus timings but at least give us a

637
00:25:17,470 --> 00:25:22,690
little bit of proportion and what you

638
00:25:19,869 --> 00:25:24,279
can see here is that while it does cost

639
00:25:22,690 --> 00:25:26,950
more to draw these things because

640
00:25:24,279 --> 00:25:29,950
there's a lot more going on in them it's

641
00:25:26,950 --> 00:25:33,130
not the end of the world right these

642
00:25:29,950 --> 00:25:35,170
numbers are not so huge they're not even

643
00:25:33,130 --> 00:25:36,820
in the thousands a lot of these which is

644
00:25:35,170 --> 00:25:39,730
what we were paying before just for the

645
00:25:36,819 --> 00:25:41,289
multi sample resolve so honestly and if

646
00:25:39,730 --> 00:25:43,660
you look at the smallest of them

647
00:25:41,289 --> 00:25:45,579
remember each of these has to process

648
00:25:43,660 --> 00:25:48,639
all of that ground cover

649
00:25:45,579 --> 00:25:52,210
it's still not even up to a millisecond

650
00:25:48,638 --> 00:25:54,488
of time for each pass that has to

651
00:25:52,210 --> 00:25:57,879
process all of them so it looks you know

652
00:25:54,489 --> 00:26:01,259
it looks to me like the GPU is never

653
00:25:57,878 --> 00:26:06,248
really struggling particularly hard on

654
00:26:01,259 --> 00:26:09,460
this level of vertex through put down

655
00:26:06,249 --> 00:26:11,499
the PCI pipe so it doesn't look to me

656
00:26:09,460 --> 00:26:14,528
like I'm too stressed about it in

657
00:26:11,499 --> 00:26:17,980
general right so what that suggests to

658
00:26:14,528 --> 00:26:19,778
me is that this is the problem not just

659
00:26:17,980 --> 00:26:22,628
how much we're drawing that's what I

660
00:26:19,778 --> 00:26:25,358
thought was true and it's what I hoped

661
00:26:22,628 --> 00:26:28,238
was true because it's much easier for us

662
00:26:25,358 --> 00:26:30,128
to optimize this than it is to optimize

663
00:26:28,239 --> 00:26:34,149
the other part of the probe the process

664
00:26:30,128 --> 00:26:36,638
right right so taking a look at draw

665
00:26:34,148 --> 00:26:38,858
ground cover the first thing that I want

666
00:26:36,638 --> 00:26:42,219
to know is which part of it is slow

667
00:26:38,858 --> 00:26:44,349
right so I want to know whether this is

668
00:26:42,220 --> 00:26:46,058
causing us a problem or whether this is

669
00:26:44,349 --> 00:26:48,248
causing us a problem just get bitmap

670
00:26:46,058 --> 00:26:50,108
call and if you take a look at the get

671
00:26:48,249 --> 00:26:52,480
bitmap call it gives us a little bit of

672
00:26:50,108 --> 00:26:54,548
insight into what's happening you can

673
00:26:52,480 --> 00:26:56,378
see here that what we're doing is we're

674
00:26:54,548 --> 00:26:58,690
checking when we call this get asset

675
00:26:56,378 --> 00:27:00,099
right let's take a look at that you can

676
00:26:58,690 --> 00:27:03,788
see it just like doing a direct

677
00:27:00,099 --> 00:27:05,918
reference here but you can see that

678
00:27:03,788 --> 00:27:07,450
what's happening is if it's valid we do

679
00:27:05,919 --> 00:27:10,359
a little bit of work on it and if it's

680
00:27:07,450 --> 00:27:12,669
not we don't the question is how much

681
00:27:10,358 --> 00:27:15,939
does this cost how much does this cost

682
00:27:12,669 --> 00:27:18,429
how much does this cost this cost this

683
00:27:15,940 --> 00:27:21,820
cost right there's a bunch of things

684
00:27:18,429 --> 00:27:24,850
we're doing here and I don't know which

685
00:27:21,819 --> 00:27:28,450
ones are costing us the time so what I'd

686
00:27:24,849 --> 00:27:32,199
like to know is a little bit more about

687
00:27:28,450 --> 00:27:35,200
that process and whether or not we

688
00:27:32,200 --> 00:27:36,960
should be worried about it right so

689
00:27:35,200 --> 00:27:42,278
here's the first thing I want to do I

690
00:27:36,960 --> 00:27:44,200
would like to remove the I would like to

691
00:27:42,278 --> 00:27:46,419
remove the calculation portion and

692
00:27:44,200 --> 00:27:47,919
because that's an easy thing for me to

693
00:27:46,419 --> 00:27:50,609
remove I'd like to remove the

694
00:27:47,919 --> 00:27:53,590
calculation from part of the process and

695
00:27:50,608 --> 00:27:56,048
enable myself to just do a simple like

696
00:27:53,589 --> 00:27:58,418
block copy of the data that I actually

697
00:27:56,048 --> 00:27:59,379
need so for example if I take a look at

698
00:27:58,419 --> 00:28:01,360
push bright

699
00:27:59,380 --> 00:28:04,990
what you'll see about push right it's

700
00:28:01,359 --> 00:28:07,149
incredibly expensive all of the crap

701
00:28:04,990 --> 00:28:09,460
that's going on here first we have to do

702
00:28:07,150 --> 00:28:13,470
this then we have to compute this then

703
00:28:09,460 --> 00:28:17,288
we have to do all of this nonsense right

704
00:28:13,470 --> 00:28:18,880
it's a lot of garbage there's just a lot

705
00:28:17,288 --> 00:28:21,990
of garbage going on there look at push

706
00:28:18,880 --> 00:28:21,990
quad oops

707
00:28:23,490 --> 00:28:30,460
here's push quad right look at all this

708
00:28:26,619 --> 00:28:35,199
crap look at everything that that's

709
00:28:30,460 --> 00:28:36,880
doing right there's just a phenomenal

710
00:28:35,200 --> 00:28:39,279
amount of work going on in here just a

711
00:28:36,880 --> 00:28:41,890
phenomenal amount of work right way way

712
00:28:39,279 --> 00:28:46,089
way too much and so if you take a look

713
00:28:41,890 --> 00:28:49,480
at what's going on there might my

714
00:28:46,089 --> 00:28:52,359
inclination my first thought is maybe

715
00:28:49,480 --> 00:28:56,519
all we really need to do is just compute

716
00:28:52,359 --> 00:28:56,519
this stuff first and cache it right

717
00:29:02,190 --> 00:29:06,700
because if I could do that if I could

718
00:29:04,808 --> 00:29:09,460
compute this stuff first and just cache

719
00:29:06,700 --> 00:29:13,048
the information then all I really need

720
00:29:09,460 --> 00:29:17,620
to do is just block copy this right

721
00:29:13,048 --> 00:29:19,119
these indices and these vertices these I

722
00:29:17,619 --> 00:29:21,699
can write out fresh every time because

723
00:29:19,119 --> 00:29:24,519
they're trivial right these which cost

724
00:29:21,700 --> 00:29:27,460
everything that all the cost was in here

725
00:29:24,519 --> 00:29:30,970
I just saved the values block copy those

726
00:29:27,460 --> 00:29:33,480
for our vertices in that would save 90%

727
00:29:30,970 --> 00:29:36,370
of the CPU work that's happening here

728
00:29:33,480 --> 00:29:39,038
would that be enough to get us out of

729
00:29:36,369 --> 00:29:42,069
the danger zone and into a happier space

730
00:29:39,038 --> 00:29:44,890
right I don't know but again that's my

731
00:29:42,069 --> 00:29:46,990
first inclination so what I would like

732
00:29:44,890 --> 00:29:49,150
to do is say let's start to attack that

733
00:29:46,990 --> 00:29:52,120
problem there's two ways I can attack it

734
00:29:49,150 --> 00:29:55,690
one is I can try to separately profile

735
00:29:52,119 --> 00:29:57,939
the cost of doing the computation versus

736
00:29:55,690 --> 00:30:01,000
doing the other part of the process

737
00:29:57,940 --> 00:30:06,029
right the problem is that's a little bit

738
00:30:01,000 --> 00:30:08,619
difficult because it would require me to

739
00:30:06,029 --> 00:30:12,190
somehow be able to time these things in

740
00:30:08,619 --> 00:30:13,148
a more fine-grained manner now I can try

741
00:30:12,190 --> 00:30:17,798
to do that

742
00:30:13,148 --> 00:30:20,588
right if I look at get bitmap info I can

743
00:30:17,798 --> 00:30:24,579
see that like it's just kind of a lookup

744
00:30:20,588 --> 00:30:26,558
right in this process so don't think

745
00:30:24,579 --> 00:30:29,319
that should be too bad so if I wanted to

746
00:30:26,558 --> 00:30:33,690
I could basically say look let's split

747
00:30:29,319 --> 00:30:36,668
this off and just say this is the

748
00:30:33,690 --> 00:30:38,769
computation it's not great because now

749
00:30:36,669 --> 00:30:41,710
there's overhead getting counted against

750
00:30:38,769 --> 00:30:43,358
the outer routine but at least it would

751
00:30:41,710 --> 00:30:45,608
give me some idea if my suspicion is

752
00:30:43,358 --> 00:30:47,079
correct before I go spend time try and

753
00:30:45,608 --> 00:30:50,079
solve the problem so now if we take a

754
00:30:47,079 --> 00:30:52,960
look at what's going on what you can see

755
00:30:50,079 --> 00:30:55,538
here is that the draw ground-cover

756
00:30:52,960 --> 00:30:57,399
function itself doesn't seem to be

757
00:30:55,538 --> 00:30:58,929
taking very much time right I don't know

758
00:30:57,398 --> 00:31:02,709
if you can see that there it's only

759
00:30:58,929 --> 00:31:04,719
hovering around 5% whereas the function

760
00:31:02,710 --> 00:31:05,829
that's actually I'm sorry the part

761
00:31:04,719 --> 00:31:07,869
that's actually eating all the time that

762
00:31:05,829 --> 00:31:10,329
computation let me pause so it's not

763
00:31:07,868 --> 00:31:13,388
flickering for you you can see here that

764
00:31:10,329 --> 00:31:17,138
the 20% of the entire frame time is

765
00:31:13,388 --> 00:31:19,449
spent just doing just that computation

766
00:31:17,138 --> 00:31:22,028
this is probably even much less because

767
00:31:19,450 --> 00:31:25,989
the overhead of getting these blocks

768
00:31:22,028 --> 00:31:28,358
started 44,000 of them is counted

769
00:31:25,989 --> 00:31:30,190
against ground cover in this case and so

770
00:31:28,358 --> 00:31:32,439
this is probably even less when you when

771
00:31:30,190 --> 00:31:34,869
you take that out of it so I do think

772
00:31:32,440 --> 00:31:37,179
that computation I think it's safe for

773
00:31:34,868 --> 00:31:39,218
me without going out on too much of a

774
00:31:37,179 --> 00:31:41,469
limb it's safe for me to say look that

775
00:31:39,219 --> 00:31:45,399
computation is really bad how do we

776
00:31:41,469 --> 00:31:48,190
address it right okay so let's try to

777
00:31:45,398 --> 00:31:52,209
start addressing it slowly

778
00:31:48,190 --> 00:31:56,739
ok so let's suppose that I was to go

779
00:31:52,210 --> 00:31:58,569
over to the way that the place we're

780
00:31:56,739 --> 00:32:01,210
storing these actual entities so we go

781
00:31:58,569 --> 00:32:03,460
look here and what you can see is that

782
00:32:01,210 --> 00:32:06,999
our enemies kind of have a ground cover

783
00:32:03,460 --> 00:32:09,879
thing here and it's this entity max

784
00:32:06,999 --> 00:32:11,950
ground cover nonsense right and the

785
00:32:09,878 --> 00:32:14,918
question is what's going on with that

786
00:32:11,950 --> 00:32:17,739
right and so if we take a look at the

787
00:32:14,919 --> 00:32:20,889
ground cover the way that that works

788
00:32:17,739 --> 00:32:23,348
it's basically a bitmap a position of

789
00:32:20,888 --> 00:32:25,478
color and a scale and we're using that

790
00:32:23,348 --> 00:32:27,088
we're like decompressing that every time

791
00:32:25,479 --> 00:32:30,569
basically

792
00:32:27,088 --> 00:32:34,618
to produce you know this this

793
00:32:30,569 --> 00:32:37,439
information now what I would rather do

794
00:32:34,618 --> 00:32:39,478
is I would rather figure out a way of

795
00:32:37,440 --> 00:32:41,489
storing the react ever in the form that

796
00:32:39,479 --> 00:32:43,889
it's directly like how it's directly

797
00:32:41,489 --> 00:32:46,889
used that'll take up more space in my

798
00:32:43,888 --> 00:32:48,748
entity for sure but there's ways of

799
00:32:46,888 --> 00:32:51,718
getting around that and we already have

800
00:32:48,749 --> 00:32:54,209
a caching system that means that when we

801
00:32:51,719 --> 00:32:56,099
add we can add arbitrarily large stuff

802
00:32:54,209 --> 00:32:57,808
to our entities and we only pay for that

803
00:32:56,098 --> 00:33:00,028
for the entities that are actually

804
00:32:57,808 --> 00:33:02,398
active at any given time we don't

805
00:33:00,028 --> 00:33:03,959
actually pay that cost for the

806
00:33:02,398 --> 00:33:06,028
potentially millions of entities we

807
00:33:03,959 --> 00:33:09,778
could have in the world because they are

808
00:33:06,028 --> 00:33:11,548
not in the cache so it's not that bad to

809
00:33:09,778 --> 00:33:12,808
make our enemies fat because we've

810
00:33:11,548 --> 00:33:15,358
already done the work to make sure that

811
00:33:12,808 --> 00:33:16,979
they stay lean in the bad case where

812
00:33:15,358 --> 00:33:25,408
there's you know millions and millions

813
00:33:16,979 --> 00:33:27,509
or billions of them so when we take a

814
00:33:25,409 --> 00:33:29,579
look at the ground cover here what I

815
00:33:27,509 --> 00:33:32,098
want to do is see what can I say what

816
00:33:29,578 --> 00:33:35,368
can I you know change about this process

817
00:33:32,098 --> 00:33:38,908
well looking at the render itself we get

818
00:33:35,368 --> 00:33:40,678
an idea for what we actually output to

819
00:33:38,909 --> 00:33:46,259
these vertices right

820
00:33:40,679 --> 00:33:48,690
I remember where we've placed that there

821
00:33:46,259 --> 00:33:51,239
it is so here's our textured vertex

822
00:33:48,690 --> 00:33:53,129
right and you can see we've got the

823
00:33:51,239 --> 00:33:55,679
information here for each vertex stored

824
00:33:53,128 --> 00:33:59,458
it's a little bit large it's got a p

825
00:33:55,679 --> 00:34:00,989
value and n value UV and color then it's

826
00:33:59,459 --> 00:34:03,479
got a texture and a mission and a

827
00:34:00,989 --> 00:34:04,949
reserved right so it's a bit large if

828
00:34:03,479 --> 00:34:08,818
you look at how big it actually is it's

829
00:34:04,949 --> 00:34:11,429
a bit large and if we think about how

830
00:34:08,818 --> 00:34:13,588
big it is compared to one of these let's

831
00:34:11,429 --> 00:34:15,599
just count it up right so it's to

832
00:34:13,588 --> 00:34:18,659
effectively if we count Fitzhugh 32 with

833
00:34:15,599 --> 00:34:22,169
this v4 here we've got 2 v4 s or two

834
00:34:18,659 --> 00:34:25,679
four by fours right so that's 8 by 4

835
00:34:22,168 --> 00:34:28,199
let's jump over to speed calc so we know

836
00:34:25,679 --> 00:34:29,490
just to make that explicit we've got I

837
00:34:28,199 --> 00:34:31,918
can in fact I can just write it out

838
00:34:29,489 --> 00:34:35,489
regular we've got a 4 times 4 plus the 3

839
00:34:31,918 --> 00:34:40,230
times 4 plus a 2 times 4 plus a 4 single

840
00:34:35,489 --> 00:34:44,219
4 plus a 2 plus a 1 plus a 1 that

841
00:34:40,230 --> 00:34:48,030
aren't total size so a textured vertex

842
00:34:44,219 --> 00:34:50,279
is 44 we know we need four of those so

843
00:34:48,030 --> 00:34:54,000
this is the entire size we would be

844
00:34:50,280 --> 00:34:56,369
taking 176 we would take that per

845
00:34:54,000 --> 00:34:58,530
ground-cover element now what we were

846
00:34:56,369 --> 00:35:04,550
storing over here was a bitmap ID which

847
00:34:58,530 --> 00:35:08,540
is four long a 3 x 4 a 3 x 4 and a 4

848
00:35:04,550 --> 00:35:11,190
that's only 32 and so we will be

849
00:35:08,539 --> 00:35:13,789
exacerbating the problem of the storage

850
00:35:11,190 --> 00:35:17,250
by blowing it out no question about that

851
00:35:13,789 --> 00:35:19,920
but we have to ask ourselves how much of

852
00:35:17,250 --> 00:35:22,349
this do we actually need because to a

853
00:35:19,920 --> 00:35:24,900
large extent we probably don't actually

854
00:35:22,349 --> 00:35:27,299
need to store all of this a lot of it is

855
00:35:24,900 --> 00:35:29,519
redundant now what we do know is the

856
00:35:27,300 --> 00:35:31,890
normal probably going to be the same

857
00:35:29,519 --> 00:35:34,139
texture index probably going to be the

858
00:35:31,889 --> 00:35:36,269
same emission probably going to be the

859
00:35:34,139 --> 00:35:39,449
same reserved probably going to be the

860
00:35:36,269 --> 00:35:42,000
same or nothing right color probably

861
00:35:39,449 --> 00:35:44,219
going to be the same so when we look at

862
00:35:42,000 --> 00:35:48,000
what we actually had to do computation

863
00:35:44,219 --> 00:35:50,189
on it's mostly P &amp; UV right so my

864
00:35:48,000 --> 00:35:55,889
thinking is we can probably get this

865
00:35:50,190 --> 00:35:58,829
down to / ground cover actually storing

866
00:35:55,889 --> 00:36:02,159
something much more simple right we

867
00:35:58,829 --> 00:36:04,349
probably don't need to store it x 4 for

868
00:36:02,159 --> 00:36:06,750
all of these things we can probably get

869
00:36:04,349 --> 00:36:09,659
away with our x for only being the P

870
00:36:06,750 --> 00:36:13,829
plus the UV which is 6 times 4 times 4

871
00:36:09,659 --> 00:36:15,358
or 96 that's a lot less of an increase

872
00:36:13,829 --> 00:36:17,670
than we would have been suffering

873
00:36:15,358 --> 00:36:19,108
otherwise and for all I know we don't

874
00:36:17,670 --> 00:36:20,550
really need to store that completely

875
00:36:19,108 --> 00:36:22,679
either because we might be able to store

876
00:36:20,550 --> 00:36:25,710
a quicker way of getting that produced

877
00:36:22,679 --> 00:36:28,108
so when we go to look at it we really do

878
00:36:25,710 --> 00:36:31,400
have options for keeping this more under

879
00:36:28,108 --> 00:36:34,259
control so I think we're gonna be okay

880
00:36:31,400 --> 00:36:36,358
let's take a more worst-case approach to

881
00:36:34,260 --> 00:36:38,160
it at the moment and say that this

882
00:36:36,358 --> 00:36:40,619
ground cover that's getting generated in

883
00:36:38,159 --> 00:36:43,079
here let's maybe say we want this to be

884
00:36:40,619 --> 00:36:45,180
a little more straightforward and so

885
00:36:43,079 --> 00:36:46,559
instead of storing the things exactly as

886
00:36:45,179 --> 00:36:48,329
we were we're going to store them a

887
00:36:46,559 --> 00:36:50,519
little bit differently first of all we

888
00:36:48,329 --> 00:36:52,500
will pre-pack our color that's something

889
00:36:50,519 --> 00:36:53,969
that we can do pretty easily that gets

890
00:36:52,500 --> 00:36:54,570
us out of the business of having to take

891
00:36:53,969 --> 00:36:55,859
this v3

892
00:36:54,570 --> 00:36:58,140
you color in there and it takes less

893
00:36:55,860 --> 00:37:00,140
space anyway so it's just a good idea to

894
00:36:58,139 --> 00:37:02,789
begin with then we know we've got these

895
00:37:00,139 --> 00:37:03,509
p-values in here that were those are the

896
00:37:02,789 --> 00:37:05,460
things that are probably pretty

897
00:37:03,510 --> 00:37:07,530
expensive to compute so at the very

898
00:37:05,460 --> 00:37:09,269
least let's store the four key values

899
00:37:07,530 --> 00:37:11,910
that we're actually going to use instead

900
00:37:09,269 --> 00:37:13,800
of just some value that we use to create

901
00:37:11,909 --> 00:37:16,319
them which was p+ scale that was how we

902
00:37:13,800 --> 00:37:19,320
were creating them before and then we

903
00:37:16,320 --> 00:37:20,760
will maybe take the normal and say the

904
00:37:19,320 --> 00:37:23,190
normals gonna be constant so we're

905
00:37:20,760 --> 00:37:24,690
probably not going to do anything with

906
00:37:23,190 --> 00:37:27,450
that we're just gonna stuff that

907
00:37:24,690 --> 00:37:28,530
normally and similarly the texture index

908
00:37:27,449 --> 00:37:30,480
is something that's going to come from

909
00:37:28,530 --> 00:37:32,400
the bitmap so that's probably something

910
00:37:30,480 --> 00:37:34,050
we can't really work around at the

911
00:37:32,400 --> 00:37:36,180
immediate moment although maybe some

912
00:37:34,050 --> 00:37:39,180
things we can do to make that be a

913
00:37:36,179 --> 00:37:41,039
little bit better in the future but

914
00:37:39,179 --> 00:37:43,259
either way so these are sort of the

915
00:37:41,039 --> 00:37:44,159
constants these are the I mean the

916
00:37:43,260 --> 00:37:45,600
things that are constant across all

917
00:37:44,159 --> 00:37:49,799
vertices these are the things that

918
00:37:45,599 --> 00:37:52,469
change per vertex of output same thing

919
00:37:49,800 --> 00:37:54,000
with things like admission that's

920
00:37:52,469 --> 00:37:56,519
probably something we can also put in

921
00:37:54,000 --> 00:37:58,590
there right so this emission value can

922
00:37:56,519 --> 00:38:01,619
probably historic and we've read my

923
00:37:58,590 --> 00:38:03,450
source some other things as well so the

924
00:38:01,619 --> 00:38:05,670
only question now is what do we need to

925
00:38:03,449 --> 00:38:07,529
store for UV my guess is we don't really

926
00:38:05,670 --> 00:38:09,780
use store much for UV because probably

927
00:38:07,530 --> 00:38:11,880
we're just gonna have a zero value for

928
00:38:09,780 --> 00:38:14,760
the base of the UV so my suspicion is we

929
00:38:11,880 --> 00:38:17,400
actually only need one UV value as well

930
00:38:14,760 --> 00:38:20,400
which is how it stretches out along the

931
00:38:17,400 --> 00:38:24,690
texture so I think we're really gonna be

932
00:38:20,400 --> 00:38:27,150
able to get away with going from this so

933
00:38:24,690 --> 00:38:30,769
previously let me make this a little

934
00:38:27,150 --> 00:38:34,110
more explicit I think we can get away

935
00:38:30,769 --> 00:38:35,340
with something like that so I think we

936
00:38:34,110 --> 00:38:36,750
can go from something that was storing

937
00:38:35,340 --> 00:38:39,030
this to something that was storing this

938
00:38:36,750 --> 00:38:41,280
I don't think that's a huge deal let's

939
00:38:39,030 --> 00:38:42,510
do the comparison just so we have a

940
00:38:41,280 --> 00:38:45,630
little bit of perspective on the subject

941
00:38:42,510 --> 00:38:48,960
if we take a look at how much that costs

942
00:38:45,630 --> 00:38:51,450
we've got a three times four right three

943
00:38:48,960 --> 00:38:55,530
floats for the v3 three floats for the

944
00:38:51,449 --> 00:38:58,559
color and then one float right for the

945
00:38:55,530 --> 00:39:01,710
scale so that's a twenty eight was how

946
00:38:58,559 --> 00:39:04,049
much that cost we then have four bytes

947
00:39:01,710 --> 00:39:07,380
for the year thirty two three times four

948
00:39:04,050 --> 00:39:07,740
for the N and we weren't storing that in

949
00:39:07,380 --> 00:39:09,630
with

950
00:39:07,739 --> 00:39:11,069
or so I don't know but what we were kind

951
00:39:09,630 --> 00:39:13,470
of generating so maybe that counts so

952
00:39:11,070 --> 00:39:17,070
four plus three times four then we've

953
00:39:13,469 --> 00:39:18,750
got our UV which is two times four we've

954
00:39:17,070 --> 00:39:22,440
got our emission which is just one byte

955
00:39:18,750 --> 00:39:28,460
and then we've got our p4 which is going

956
00:39:22,440 --> 00:39:31,050
to be four times four times three right

957
00:39:28,460 --> 00:39:32,639
seventy-three now this probably should

958
00:39:31,050 --> 00:39:33,810
be stuck at the end I don't know if we

959
00:39:32,639 --> 00:39:35,129
really need a mission because ground

960
00:39:33,809 --> 00:39:36,840
cover doesn't have a mission so maybe

961
00:39:35,130 --> 00:39:38,579
we'll get rid of that and just say at 72

962
00:39:36,840 --> 00:39:41,490
72 times

963
00:39:38,579 --> 00:39:42,900
I mean divided by 28 we're up we're

964
00:39:41,489 --> 00:39:45,539
making it about two and a half times

965
00:39:42,900 --> 00:39:47,190
larger that again not the end of the

966
00:39:45,539 --> 00:39:48,750
world I'm not gonna lose sleep over that

967
00:39:47,190 --> 00:39:50,700
certainly not in this part of the code

968
00:39:48,750 --> 00:39:53,219
anyway so I think we're okay there and

969
00:39:50,699 --> 00:39:55,618
this would allow us to generate the

970
00:39:53,219 --> 00:39:57,359
ground cover much more quickly why would

971
00:39:55,619 --> 00:39:59,039
it allow us to do that well if we now

972
00:39:57,360 --> 00:40:01,320
pop back to the enemy system and look at

973
00:39:59,039 --> 00:40:02,759
what was actually going on if we assume

974
00:40:01,320 --> 00:40:05,940
now that we're taking a look at this

975
00:40:02,760 --> 00:40:07,560
drug ground cover function and we're

976
00:40:05,940 --> 00:40:10,470
looking at what we would have to do in

977
00:40:07,559 --> 00:40:12,869
order to output our sprite we can pretty

978
00:40:10,469 --> 00:40:18,299
much say that this is an f0 around here

979
00:40:12,869 --> 00:40:20,309
now and we can do an else call this is

980
00:40:18,300 --> 00:40:22,380
stuff we're going to do in the code

981
00:40:20,309 --> 00:40:24,750
where we generate the ground cover which

982
00:40:22,380 --> 00:40:26,730
remember is much cheaper because it only

983
00:40:24,750 --> 00:40:29,550
happens when the entity comes into the

984
00:40:26,730 --> 00:40:31,559
cache so we pay that cost only as

985
00:40:29,550 --> 00:40:36,180
enemies come into the cache which

986
00:40:31,559 --> 00:40:37,619
happens like in a slower rate right and

987
00:40:36,179 --> 00:40:39,569
not only does happen in a slower rate

988
00:40:37,619 --> 00:40:41,940
but we can manage it if we needed to we

989
00:40:39,570 --> 00:40:44,039
could trickle charge it if we want to so

990
00:40:41,940 --> 00:40:46,740
basically if too many entities entered

991
00:40:44,039 --> 00:40:48,840
in one frame we could trickle them out

992
00:40:46,739 --> 00:40:52,579
over a course of frames because they

993
00:40:48,840 --> 00:40:56,608
tend to move in on the apron right not

994
00:40:52,579 --> 00:41:01,469
all into the view at once and so we

995
00:40:56,608 --> 00:41:06,358
could also you know help mitigate some

996
00:41:01,469 --> 00:41:09,719
of that issue by putting in flow control

997
00:41:06,358 --> 00:41:12,090
or rate control to avoid having too much

998
00:41:09,719 --> 00:41:13,349
of a hiccup on any given frame so I

999
00:41:12,090 --> 00:41:15,480
think we also have a lot of options

1000
00:41:13,349 --> 00:41:18,089
there in addition to it right so I think

1001
00:41:15,480 --> 00:41:19,500
it's gonna be there were you know easy

1002
00:41:18,090 --> 00:41:21,570
to mitigate that

1003
00:41:19,500 --> 00:41:22,860
problem so that's what we're trying to

1004
00:41:21,570 --> 00:41:24,360
do we're trying to move code from

1005
00:41:22,860 --> 00:41:25,890
something ask them every frame saying

1006
00:41:24,360 --> 00:41:34,250
that only has to happen when enemies

1007
00:41:25,889 --> 00:41:37,079
change their active set so here we go

1008
00:41:34,250 --> 00:41:39,030
if we now want to write a quat out here

1009
00:41:37,079 --> 00:41:42,480
essentially what we need is a like push

1010
00:41:39,030 --> 00:41:44,400
magical quad or something right we need

1011
00:41:42,480 --> 00:41:47,280
some function that allows us to push our

1012
00:41:44,400 --> 00:41:48,860
quads out cleanly and we don't really

1013
00:41:47,280 --> 00:41:50,970
have a way of doing that right now

1014
00:41:48,860 --> 00:41:53,730
unfortunately but that's something that

1015
00:41:50,969 --> 00:41:57,389
we need to be able to fix and so if I

1016
00:41:53,730 --> 00:42:00,539
was to go to push quad what you can see

1017
00:41:57,389 --> 00:42:01,049
in the push quad code here right here

1018
00:42:00,539 --> 00:42:03,869
anyway

1019
00:42:01,050 --> 00:42:07,500
right you can see it getting this sort

1020
00:42:03,869 --> 00:42:09,539
of quad stuff out doing a bunch of

1021
00:42:07,500 --> 00:42:12,210
garbage here looking at special textures

1022
00:42:09,539 --> 00:42:14,070
all this sort of stuff right this is

1023
00:42:12,210 --> 00:42:16,590
precisely the stuff that we want to

1024
00:42:14,070 --> 00:42:18,840
avoid we don't want to have to do any of

1025
00:42:16,590 --> 00:42:22,920
this stuff we want this to be a lot

1026
00:42:18,840 --> 00:42:25,530
simpler and that's part of the rendering

1027
00:42:22,920 --> 00:42:27,659
optimization is taking code that was

1028
00:42:25,530 --> 00:42:29,100
just written to do whatever because it's

1029
00:42:27,659 --> 00:42:31,139
whatever we thought of at the time and

1030
00:42:29,099 --> 00:42:32,339
it's just the easiest thing to do which

1031
00:42:31,139 --> 00:42:34,099
again you always do want to do because

1032
00:42:32,340 --> 00:42:35,940
you don't want to make matters

1033
00:42:34,099 --> 00:42:37,710
complicated for yourself and so you know

1034
00:42:35,940 --> 00:42:39,690
what actually cost you the time and what

1035
00:42:37,710 --> 00:42:42,210
actually is important so certainly not

1036
00:42:39,690 --> 00:42:44,670
an issue I'm not blaming past us for

1037
00:42:42,210 --> 00:42:46,139
doing anything wrong we did but when it

1038
00:42:44,670 --> 00:42:47,639
does come time to start thinking about

1039
00:42:46,139 --> 00:42:49,619
how you're gonna streamline that process

1040
00:42:47,639 --> 00:42:51,659
now is the time to start looking at that

1041
00:42:49,619 --> 00:42:53,759
and so what I want to do here is I want

1042
00:42:51,659 --> 00:42:56,159
to create a good way for me to

1043
00:42:53,760 --> 00:42:59,160
effectively do this right so I want I

1044
00:42:56,159 --> 00:43:02,909
want my code here to be able to do this

1045
00:42:59,159 --> 00:43:06,000
right and what I want to be able to do

1046
00:43:02,909 --> 00:43:07,949
is at the outset since I know how much

1047
00:43:06,000 --> 00:43:09,300
ground cover we have I want to

1048
00:43:07,949 --> 00:43:11,489
effectively be able to make a call

1049
00:43:09,300 --> 00:43:14,990
that's like I'm gonna push this many

1050
00:43:11,489 --> 00:43:18,689
vertices on so this is going to be like

1051
00:43:14,989 --> 00:43:21,299
indexed vertex output or something like

1052
00:43:18,690 --> 00:43:27,059
that right I want to be able to make a

1053
00:43:21,300 --> 00:43:29,460
call which is like output quads and I

1054
00:43:27,059 --> 00:43:31,889
want to be raw so I just say look I'm

1055
00:43:29,460 --> 00:43:33,318
gonna output this many quads give me

1056
00:43:31,889 --> 00:43:38,028
back the information that I

1057
00:43:33,318 --> 00:43:41,268
need to do that please right and so then

1058
00:43:38,028 --> 00:43:44,179
what I want to do is say okay I've got

1059
00:43:41,268 --> 00:43:45,889
you know this output function that

1060
00:43:44,179 --> 00:43:48,528
should allow me to do this very cleanly

1061
00:43:45,889 --> 00:43:50,088
and now I'm just gonna push vertices on

1062
00:43:48,528 --> 00:43:53,179
it so I'm just gonna do like a push

1063
00:43:50,088 --> 00:43:56,409
vertex here and I want to be able to put

1064
00:43:53,179 --> 00:44:01,219
put on these pieces of information right

1065
00:43:56,409 --> 00:44:04,429
okay so first things first we need to be

1066
00:44:01,219 --> 00:44:06,440
able to figure out what these p-values

1067
00:44:04,429 --> 00:44:07,879
are well guess what we're saying we're

1068
00:44:06,440 --> 00:44:10,670
computing those ahead of time so that's

1069
00:44:07,880 --> 00:44:14,630
gonna be easy right so our p-value is

1070
00:44:10,670 --> 00:44:16,639
very simple it's just whatever the

1071
00:44:14,630 --> 00:44:19,130
ground cover said it was right our n

1072
00:44:16,639 --> 00:44:21,588
value is also simple because it's stored

1073
00:44:19,130 --> 00:44:23,180
in there our UV is a little more

1074
00:44:21,588 --> 00:44:27,108
complicated because as you can see we

1075
00:44:23,179 --> 00:44:28,639
have like a bunch of you V's they get

1076
00:44:27,108 --> 00:44:31,548
pushed in here and we don't really know

1077
00:44:28,639 --> 00:44:33,440
what they should be right so that's a

1078
00:44:31,548 --> 00:44:35,599
little bit harder so we effectively have

1079
00:44:33,440 --> 00:44:37,429
some set of UVs that we're going to have

1080
00:44:35,599 --> 00:44:39,680
to work with and maybe we'll keep the

1081
00:44:37,429 --> 00:44:41,268
naming the same as they were inside our

1082
00:44:39,679 --> 00:44:42,679
quads or something like this so I don't

1083
00:44:41,268 --> 00:44:43,939
know what we'll do with that we'll talk

1084
00:44:42,679 --> 00:44:46,190
about that in one second but we're gonna

1085
00:44:43,940 --> 00:44:51,798
push on a UV there right and then

1086
00:44:46,190 --> 00:44:52,969
finally we're going to have in our we're

1087
00:44:51,798 --> 00:44:54,469
gonna have a color value so you see it

1088
00:44:52,969 --> 00:44:55,818
could be modulated we're gonna have a

1089
00:44:54,469 --> 00:44:57,559
color value and we've already specified

1090
00:44:55,818 --> 00:45:02,869
with that color value is as well

1091
00:44:57,559 --> 00:45:04,459
oops didn't mean to make that cover and

1092
00:45:02,869 --> 00:45:06,259
so we're gonna have a color value there

1093
00:45:04,458 --> 00:45:08,868
which specifies what the color is for

1094
00:45:06,259 --> 00:45:09,949
our vertex texture index we don't know

1095
00:45:08,869 --> 00:45:11,630
what it is yet so we're gonna have to

1096
00:45:09,949 --> 00:45:15,259
push that but then we're done right

1097
00:45:11,630 --> 00:45:17,150
that's all the things we need okay so

1098
00:45:15,259 --> 00:45:19,579
now we just do this for every vertex

1099
00:45:17,150 --> 00:45:21,108
that we have right and so you can look

1100
00:45:19,579 --> 00:45:23,449
here actually I guess the way this was

1101
00:45:21,108 --> 00:45:24,708
doing is the p3 was pushed first I don't

1102
00:45:23,449 --> 00:45:26,719
know that we really want this to be

1103
00:45:24,708 --> 00:45:28,848
doing that weird winding so maybe we'll

1104
00:45:26,719 --> 00:45:30,139
just do it this way right we'll start to

1105
00:45:28,849 --> 00:45:31,880
clean this up a little bit and not do it

1106
00:45:30,139 --> 00:45:34,548
the way it was being done before so

1107
00:45:31,880 --> 00:45:37,009
we'll do something like this right and

1108
00:45:34,548 --> 00:45:40,429
that will be sort of the clean way of

1109
00:45:37,009 --> 00:45:43,068
putting those vertices in place right

1110
00:45:40,429 --> 00:45:45,288
now there is something a little bit

1111
00:45:43,068 --> 00:45:46,550
unnecessary about this something I don't

1112
00:45:45,289 --> 00:45:48,080
super like and I don't

1113
00:45:46,550 --> 00:45:49,539
really know what looking pilers going to

1114
00:45:48,079 --> 00:45:52,699
do with it and so I'm just gonna mention

1115
00:45:49,539 --> 00:45:54,889
that we sort of have an issue here the

1116
00:45:52,699 --> 00:45:59,409
issue that we have is I don't know what

1117
00:45:54,889 --> 00:46:04,069
the compiler is going to do about

1118
00:45:59,409 --> 00:46:06,969
indexing off of the pointer let me just

1119
00:46:04,070 --> 00:46:08,780
explain to you what I mean by that I and

1120
00:46:06,969 --> 00:46:13,250
because it's kind of a little bit

1121
00:46:08,780 --> 00:46:14,960
relevant so inside your CPU right it's

1122
00:46:13,250 --> 00:46:17,449
got a bunch of logic in it that deals

1123
00:46:14,960 --> 00:46:19,240
with memory and the way that it uses

1124
00:46:17,449 --> 00:46:22,489
this logic is that it has

1125
00:46:19,239 --> 00:46:24,799
special-purpose routines hard-coded

1126
00:46:22,489 --> 00:46:25,939
directly into the arithmetic logic units

1127
00:46:24,800 --> 00:46:26,840
well they're not really into the

1128
00:46:25,940 --> 00:46:28,309
earth-mother if they're getting this

1129
00:46:26,840 --> 00:46:32,800
special unit that's made for memory but

1130
00:46:28,309 --> 00:46:36,440
that's not here there it has special

1131
00:46:32,800 --> 00:46:38,870
special circuitry that's designed just

1132
00:46:36,440 --> 00:46:42,110
to do things like array offsets right

1133
00:46:38,869 --> 00:46:44,210
and so there's two things that your CPU

1134
00:46:42,110 --> 00:46:47,329
can do at any given time so it wants to

1135
00:46:44,210 --> 00:46:50,059
access memory one is it can like you

1136
00:46:47,329 --> 00:46:53,779
know take a register like a pointer

1137
00:46:50,059 --> 00:46:56,690
right and say get memory at pointer

1138
00:46:53,780 --> 00:46:59,030
right it can like do that or store

1139
00:46:56,690 --> 00:47:03,740
memory at pointer right that's the thing

1140
00:46:59,030 --> 00:47:05,480
can do and that kind of a thing is just

1141
00:47:03,739 --> 00:47:07,459
called a mob instruction usually so

1142
00:47:05,480 --> 00:47:11,300
you'll see things like mob and it'll say

1143
00:47:07,460 --> 00:47:13,309
oh I want to take some particular

1144
00:47:11,300 --> 00:47:16,070
pointer so there's a register

1145
00:47:13,309 --> 00:47:18,289
you know register with pointer it'll

1146
00:47:16,070 --> 00:47:20,510
take some radish or the pointer and will

1147
00:47:18,289 --> 00:47:21,440
move something there and then it says

1148
00:47:20,510 --> 00:47:22,850
like well what did you want to move

1149
00:47:21,440 --> 00:47:25,190
there and it'll be like this floating

1150
00:47:22,849 --> 00:47:27,710
point value right so some register with

1151
00:47:25,190 --> 00:47:29,720
a value so you can do stuff like that

1152
00:47:27,710 --> 00:47:31,340
right and that's like the bread and

1153
00:47:29,719 --> 00:47:34,099
butter of how you move things off to

1154
00:47:31,340 --> 00:47:39,400
where a pointer is but you can also do

1155
00:47:34,099 --> 00:47:43,569
things like this and this operation is

1156
00:47:39,400 --> 00:47:47,450
free it costs you nothing to do it's

1157
00:47:43,570 --> 00:47:50,890
100% free basically that's probably an

1158
00:47:47,449 --> 00:47:53,889
overstatement but it's almost free

1159
00:47:50,889 --> 00:47:53,889
however

1160
00:47:54,179 --> 00:48:06,509
this is not free so if you take a look

1161
00:48:04,349 --> 00:48:07,950
at what these two things what the

1162
00:48:06,510 --> 00:48:11,339
difference is between these two things

1163
00:48:07,949 --> 00:48:17,548
one code set looks like this another

1164
00:48:11,338 --> 00:48:20,338
code set looks like this right these two

1165
00:48:17,548 --> 00:48:22,588
things do not cost the same this one is

1166
00:48:20,338 --> 00:48:24,179
cheaper than this one is and the reason

1167
00:48:22,588 --> 00:48:26,880
that this one is cheaper than this one

1168
00:48:24,179 --> 00:48:27,719
is is because the components are the

1169
00:48:26,880 --> 00:48:31,048
Natha compiler

1170
00:48:27,719 --> 00:48:36,480
these CPU can do that plus 12 for free

1171
00:48:31,048 --> 00:48:38,278
and so the compiler in many cases is

1172
00:48:36,480 --> 00:48:40,528
smart enough to look at your usage

1173
00:48:38,278 --> 00:48:49,798
pattern and know when it can do offsets

1174
00:48:40,528 --> 00:48:52,230
so if you tell it something like this if

1175
00:48:49,798 --> 00:49:02,929
you tell it something like this inside a

1176
00:48:52,230 --> 00:49:02,929
loop it's often smart enough to do this

1177
00:49:16,420 --> 00:49:23,090
right so I'm ignoring the values here

1178
00:49:19,460 --> 00:49:26,030
but point being I it's often smart

1179
00:49:23,090 --> 00:49:28,579
enough to say oh they're just writing

1180
00:49:26,030 --> 00:49:31,280
two sequential locations in this loop so

1181
00:49:28,579 --> 00:49:32,719
I can just use hard-coded offsets

1182
00:49:31,280 --> 00:49:34,460
because there are size that I know I

1183
00:49:32,719 --> 00:49:37,579
know what this is pointing to let's say

1184
00:49:34,460 --> 00:49:40,340
right and then I only need to do one add

1185
00:49:37,579 --> 00:49:42,440
at the end of the loop to move the

1186
00:49:40,340 --> 00:49:44,900
pointer up by the total number that I've

1187
00:49:42,440 --> 00:49:47,119
written so it's often smart enough to

1188
00:49:44,900 --> 00:49:53,950
aggregate those things to things for you

1189
00:49:47,119 --> 00:49:53,949
but this is what you wanted and this is

1190
00:50:06,159 --> 00:50:10,789
not right

1191
00:50:08,210 --> 00:50:13,929
that's the way to think of it I did want

1192
00:50:10,789 --> 00:50:16,639
this I did not want that right and

1193
00:50:13,929 --> 00:50:19,819
there's a lot of complexity here because

1194
00:50:16,639 --> 00:50:21,109
actually right literally this and this

1195
00:50:19,820 --> 00:50:24,170
it doesn't matter which one you choose

1196
00:50:21,110 --> 00:50:26,269
because of the way the CPU actually

1197
00:50:24,170 --> 00:50:28,159
executes with ports it's probably the

1198
00:50:26,269 --> 00:50:29,509
case that this is no more expensive than

1199
00:50:28,159 --> 00:50:31,190
this and there's a lot of other things

1200
00:50:29,510 --> 00:50:34,430
we could talk about that have to do with

1201
00:50:31,190 --> 00:50:36,559
that but once you start adding way more

1202
00:50:34,429 --> 00:50:37,940
of these mobs on there and so on you

1203
00:50:36,559 --> 00:50:39,440
start to get into a situation where it

1204
00:50:37,940 --> 00:50:41,780
does actually matter and so on and so

1205
00:50:39,440 --> 00:50:44,420
you want to make it easy for the

1206
00:50:41,780 --> 00:50:47,840
compiler to output this and not this

1207
00:50:44,420 --> 00:50:50,269
right and so sometimes when I'm down in

1208
00:50:47,840 --> 00:50:51,890
here in the nitty-gritty and I'm

1209
00:50:50,269 --> 00:50:53,449
thinking about how to output stuff

1210
00:50:51,889 --> 00:50:55,969
quickly and I want the compiler to

1211
00:50:53,449 --> 00:50:56,509
output the correct set of code for

1212
00:50:55,969 --> 00:51:00,169
something

1213
00:50:56,510 --> 00:51:04,570
I will intentionally make life a little

1214
00:51:00,170 --> 00:51:04,570
bit harder for me and write this

1215
00:51:09,838 --> 00:51:19,558
rather than this just because I want it

1216
00:51:17,400 --> 00:51:22,338
to be really easy for the compiler to

1217
00:51:19,559 --> 00:51:22,339
see what I'm doing

1218
00:51:32,150 --> 00:51:48,989
maybe that's do that alright so again

1219
00:51:47,518 --> 00:51:52,228
I'm just trying to give you some

1220
00:51:48,989 --> 00:51:59,969
perspective here on what I'm doing but I

1221
00:51:52,228 --> 00:52:02,518
may want our fast output maybe I'll call

1222
00:51:59,969 --> 00:52:12,119
it out vertex something like that or

1223
00:52:02,518 --> 00:52:14,399
vertex out so I may want to look more

1224
00:52:12,119 --> 00:52:17,278
like this where we do a bunch of these

1225
00:52:14,400 --> 00:52:19,829
as many as you want to do and then once

1226
00:52:17,278 --> 00:52:23,608
they're out you do in advance write

1227
00:52:19,829 --> 00:52:25,380
something like that rather than just

1228
00:52:23,608 --> 00:52:26,848
letting this increment the pointer so

1229
00:52:25,380 --> 00:52:29,039
that way it gets incremented only once

1230
00:52:26,849 --> 00:52:29,969
at the end of an aquatic foot rather

1231
00:52:29,039 --> 00:52:31,799
than something a little bit more

1232
00:52:29,969 --> 00:52:33,619
granular and again the reason for that

1233
00:52:31,798 --> 00:52:36,358
is so that you can have more control

1234
00:52:33,619 --> 00:52:39,599
over what's going on there that's like

1235
00:52:36,358 --> 00:52:43,259
the goal right and so here we would

1236
00:52:39,599 --> 00:52:45,869
basically say look the the index out is

1237
00:52:43,259 --> 00:52:47,900
just going to be you know draw these

1238
00:52:45,869 --> 00:52:50,548
things in order or whatever right and

1239
00:52:47,900 --> 00:52:53,219
I'm gonna use the basis value for that

1240
00:52:50,548 --> 00:52:56,159
as well just so I can make sure that in

1241
00:52:53,219 --> 00:52:58,679
we can also make those be striated if we

1242
00:52:56,159 --> 00:53:01,678
want to produce more indices than one at

1243
00:52:58,679 --> 00:53:03,929
a given time but that's more what I want

1244
00:53:01,679 --> 00:53:06,179
to see when I look at that that's like

1245
00:53:03,929 --> 00:53:10,229
sort of more what I'm looking that's

1246
00:53:06,179 --> 00:53:11,910
more what I'm looking for right so I

1247
00:53:10,228 --> 00:53:13,498
want to see something like this this is

1248
00:53:11,909 --> 00:53:15,719
what I want to make and that way I can

1249
00:53:13,498 --> 00:53:18,478
stream these vertices out really

1250
00:53:15,719 --> 00:53:20,568
aggressively and not have to worry about

1251
00:53:18,478 --> 00:53:22,828
how much time it takes

1252
00:53:20,568 --> 00:53:23,608
because I know the CPU code will be like

1253
00:53:22,829 --> 00:53:27,059
very

1254
00:53:23,608 --> 00:53:28,978
optimized in that case and the slow park

1255
00:53:27,059 --> 00:53:30,989
will now be this garbage here which

1256
00:53:28,978 --> 00:53:32,458
maybe we try to optimize in some way or

1257
00:53:30,989 --> 00:53:37,588
maybe we don't if it just doesn't matter

1258
00:53:32,458 --> 00:53:39,478
that much right okay so that's what I'd

1259
00:53:37,588 --> 00:53:42,478
like to do it's pretty easy for me to

1260
00:53:39,478 --> 00:53:43,919
write this and I will but then we need

1261
00:53:42,478 --> 00:53:46,439
to look at the opposite side of this

1262
00:53:43,920 --> 00:53:48,329
which is that this code here still needs

1263
00:53:46,440 --> 00:53:51,179
to happen and it needs to come from

1264
00:53:48,329 --> 00:53:53,099
somewhere so this texture index here I

1265
00:53:51,179 --> 00:53:56,338
need a way of getting that texture index

1266
00:53:53,099 --> 00:53:58,798
if I go look at the push blog call right

1267
00:53:56,338 --> 00:54:02,068
I should be able to see how we were

1268
00:53:58,798 --> 00:54:05,608
getting it in here you can see here we

1269
00:54:02,068 --> 00:54:07,318
do texture index from this texture so I

1270
00:54:05,608 --> 00:54:09,268
should be able to do something like that

1271
00:54:07,318 --> 00:54:10,199
I believe sprite values for upright is

1272
00:54:09,268 --> 00:54:13,169
probably the thing that's doing that

1273
00:54:10,199 --> 00:54:15,028
right now but if you take a look at how

1274
00:54:13,170 --> 00:54:18,420
this is happening right it's just doing

1275
00:54:15,028 --> 00:54:18,900
this downcast here and all that should

1276
00:54:18,420 --> 00:54:21,950
be good

1277
00:54:18,900 --> 00:54:24,959
so I probably want some thing that

1278
00:54:21,949 --> 00:54:35,518
converts this for me probably something

1279
00:54:24,958 --> 00:54:39,389
that looks like this I something like

1280
00:54:35,518 --> 00:54:40,679
this I think I probably want a like non

1281
00:54:39,389 --> 00:54:42,659
special effect

1282
00:54:40,679 --> 00:54:45,509
you know I'm looking at this why do we

1283
00:54:42,659 --> 00:54:52,489
even have to like shouldn't this just

1284
00:54:45,509 --> 00:54:52,489
return a 16-bit value hold on a second

1285
00:54:54,289 --> 00:54:58,709
yeah I mean I feel like this should just

1286
00:54:56,518 --> 00:55:02,968
return a 16-bit value the texture

1287
00:54:58,708 --> 00:55:04,618
special bit I feel like this should

1288
00:55:02,969 --> 00:55:07,829
really just be returning a 16-bit value

1289
00:55:04,619 --> 00:55:11,070
to begin with probably

1290
00:55:07,829 --> 00:55:11,069
[Music]

1291
00:55:13,300 --> 00:55:25,750
I mean technically if you it's really

1292
00:55:21,070 --> 00:55:30,910
whether or not you know so I'll just do

1293
00:55:25,750 --> 00:55:32,349
it this way so we're gonna go ahead and

1294
00:55:30,909 --> 00:55:35,019
grab out this and we're gonna make sure

1295
00:55:32,349 --> 00:55:36,369
that it's the 16 bitten index as we go

1296
00:55:35,019 --> 00:55:38,710
but that's pretty much all we needed to

1297
00:55:36,369 --> 00:55:41,170
do and so then we can just out with this

1298
00:55:38,710 --> 00:55:45,550
stuff and really now our goal is to move

1299
00:55:41,170 --> 00:55:47,650
this code that we have here right we're

1300
00:55:45,550 --> 00:55:54,700
gonna try and move this code sort of out

1301
00:55:47,650 --> 00:55:57,730
right and don't ask me why did that I

1302
00:55:54,699 --> 00:55:59,199
didn't mean to and so let's go take a

1303
00:55:57,730 --> 00:56:01,690
look at where that code goes and how

1304
00:55:59,199 --> 00:56:04,210
we're gonna adjust that code so taking a

1305
00:56:01,690 --> 00:56:06,099
look at this streaming out that uh looks

1306
00:56:04,210 --> 00:56:08,470
like finding me you can see how much

1307
00:56:06,099 --> 00:56:10,480
simpler that is no function calls just

1308
00:56:08,469 --> 00:56:12,339
really streamlined it's just a bunch of

1309
00:56:10,480 --> 00:56:14,170
block copies these are just gonna be

1310
00:56:12,340 --> 00:56:16,690
inline function that just block copy

1311
00:56:14,170 --> 00:56:18,280
that data in order and the only reason

1312
00:56:16,690 --> 00:56:19,840
I'm not doing that manually is because

1313
00:56:18,280 --> 00:56:22,120
that makes it easier for me to change

1314
00:56:19,840 --> 00:56:25,269
the vertex format and know who's using

1315
00:56:22,119 --> 00:56:28,269
it where right okay

1316
00:56:25,269 --> 00:56:30,960
so when we go fill our ground cover up

1317
00:56:28,269 --> 00:56:33,519
here you can see us doing it like this

1318
00:56:30,960 --> 00:56:35,829
when we actually produce this sort of

1319
00:56:33,519 --> 00:56:39,429
information and do our kind of like work

1320
00:56:35,829 --> 00:56:42,309
to get our best map get our best match

1321
00:56:39,429 --> 00:56:45,399
bitmaps basically what I want to do is

1322
00:56:42,309 --> 00:56:47,590
not fill in this stuff this way I want

1323
00:56:45,400 --> 00:56:49,090
to fill it in this way and we kind of

1324
00:56:47,590 --> 00:56:52,000
have some work to do because this

1325
00:56:49,090 --> 00:56:54,130
information is now stuff that you know

1326
00:56:52,000 --> 00:56:56,800
we want to kind of capture right we want

1327
00:56:54,130 --> 00:56:57,490
to kind of get this information out in a

1328
00:56:56,800 --> 00:57:06,490
different way

1329
00:56:57,489 --> 00:57:08,889
so we're gonna do that in a second okay

1330
00:57:06,489 --> 00:57:11,109
and looking at this right this can still

1331
00:57:08,889 --> 00:57:13,269
the cover bitmap can still be written

1332
00:57:11,110 --> 00:57:15,010
out that way but the other stuff needs

1333
00:57:13,269 --> 00:57:17,289
to be written out differently so let's

1334
00:57:15,010 --> 00:57:18,850
just go ahead and take a look at all of

1335
00:57:17,289 --> 00:57:20,289
the parts that we have here and let's

1336
00:57:18,849 --> 00:57:23,079
make sure that we're writing out all of

1337
00:57:20,289 --> 00:57:25,960
them so now we do have a color much like

1338
00:57:23,079 --> 00:57:27,250
we have here but we want to kind of make

1339
00:57:25,960 --> 00:57:30,070
this color be something

1340
00:57:27,250 --> 00:57:31,869
that someone could set like later on

1341
00:57:30,070 --> 00:57:33,369
when they're trying to do like varying

1342
00:57:31,869 --> 00:57:35,440
color like maybe there's a randomization

1343
00:57:33,369 --> 00:57:38,380
the color but they set it as a v3 then

1344
00:57:35,440 --> 00:57:42,608
we want to do is pack that back up right

1345
00:57:38,380 --> 00:57:44,980
so we want to do like a pack of the RGB

1346
00:57:42,608 --> 00:57:46,449
I don't remember where this is in fact

1347
00:57:44,980 --> 00:57:48,099
I'm not even going to try and remember

1348
00:57:46,449 --> 00:57:49,659
what I'm gonna do instead is just take a

1349
00:57:48,099 --> 00:57:54,190
look at how this was doing this here

1350
00:57:49,659 --> 00:57:57,159
right you can see on push bright that's

1351
00:57:54,190 --> 00:57:58,539
probably where we're doing it in fact

1352
00:57:57,159 --> 00:58:01,539
you can see it right here we have an RGB

1353
00:57:58,539 --> 00:58:04,509
pack four by eight and we do the Primo

1354
00:58:01,539 --> 00:58:06,639
on there right like this so you can see

1355
00:58:04,510 --> 00:58:09,760
this process here that we're doing with

1356
00:58:06,639 --> 00:58:13,118
the store color I don't love the way

1357
00:58:09,760 --> 00:58:16,450
we're doing this exactly it's a little

1358
00:58:13,119 --> 00:58:19,000
bit annoying when when we look at how

1359
00:58:16,449 --> 00:58:20,529
that's supposed to happen I kind of feel

1360
00:58:19,000 --> 00:58:23,230
like that should be a little bit more

1361
00:58:20,530 --> 00:58:26,290
straightforward and so I think what I

1362
00:58:23,230 --> 00:58:28,329
want to do is maybe change the way the

1363
00:58:26,289 --> 00:58:29,380
store color is working to be sort of an

1364
00:58:28,329 --> 00:58:31,598
all-in-one call

1365
00:58:29,380 --> 00:58:33,730
so the way store color works currently

1366
00:58:31,599 --> 00:58:36,580
it just does the pre mul there for us I

1367
00:58:33,730 --> 00:58:41,740
think what I want to do here is make our

1368
00:58:36,579 --> 00:58:46,869
own function that's more like finalized

1369
00:58:41,739 --> 00:58:50,858
color something like that and so we take

1370
00:58:46,869 --> 00:58:54,579
the input here and our like unfree

1371
00:58:50,858 --> 00:58:59,159
multiplied we pass that through store

1372
00:58:54,579 --> 00:58:59,159
color and then we pack it down right

1373
00:59:05,150 --> 00:59:09,528
and again that's what this is doing

1374
00:59:07,278 --> 00:59:10,489
again what I'm trying to do here is not

1375
00:59:09,528 --> 00:59:12,259
nothing fancy

1376
00:59:10,489 --> 00:59:16,399
right nothing nothing weird is going on

1377
00:59:12,259 --> 00:59:19,278
here I'm just trying to make a systemic

1378
00:59:16,400 --> 00:59:21,950
way that everyone who ever does this can

1379
00:59:19,278 --> 00:59:27,159
just call this function and know that no

1380
00:59:21,949 --> 00:59:34,489
matter what random you know crazy way

1381
00:59:27,159 --> 00:59:35,838
that people are using color stuff I just

1382
00:59:34,489 --> 00:59:38,149
want there to be a way they know they

1383
00:59:35,838 --> 00:59:41,929
can just call this with a normal non

1384
00:59:38,150 --> 00:59:43,940
premultiplied color and crap will happen

1385
00:59:41,929 --> 00:59:47,298
and you'll get back the right you 32

1386
00:59:43,940 --> 00:59:49,338
right so that way nobody on the outside

1387
00:59:47,298 --> 00:59:51,889
is thinking about how colors are encoded

1388
00:59:49,338 --> 00:59:53,449
they don't care they just need to know

1389
00:59:51,889 --> 00:59:55,670
that they can pass it through finalized

1390
00:59:53,449 --> 00:59:57,469
color and they'll get the right answer

1391
00:59:55,670 --> 00:59:58,849
and that's all they need to know which

1392
00:59:57,469 --> 01:00:00,199
is good because I don't want people to

1393
00:59:58,849 --> 01:00:03,230
have to know because what if I change it

1394
01:00:00,199 --> 01:00:05,838
later right because it's a bunch of

1395
01:00:03,230 --> 01:00:07,039
hairy crap that has to happen and maybe

1396
01:00:05,838 --> 01:00:08,838
I want it different right

1397
01:00:07,039 --> 01:00:15,019
so the finalized color is just going to

1398
01:00:08,838 --> 01:00:17,150
be done this way like that and then

1399
01:00:15,018 --> 01:00:18,979
anyone can call that with the color that

1400
01:00:17,150 --> 01:00:20,778
they generated and know that it gets

1401
01:00:18,980 --> 01:00:24,199
packed down properly that's all we need

1402
01:00:20,778 --> 01:00:25,940
to do for that for the normals we're not

1403
01:00:24,199 --> 01:00:26,960
really doing lighting yet so it's kind

1404
01:00:25,940 --> 01:00:29,509
of difficult to say what the lighting

1405
01:00:26,960 --> 01:00:30,858
should be but for the most part I think

1406
01:00:29,509 --> 01:00:32,809
these things are things that are

1407
01:00:30,858 --> 01:00:34,909
supposed to be sort of front-facing so I

1408
01:00:32,809 --> 01:00:37,339
suspect the normal for our intents for

1409
01:00:34,909 --> 01:00:39,230
our intentions at this point are gonna

1410
01:00:37,338 --> 01:00:40,818
be things probably like that but we

1411
01:00:39,230 --> 01:00:43,699
don't really know so I'm gonna put it to

1412
01:00:40,818 --> 01:00:48,768
do in here and say you know adjust this

1413
01:00:43,699 --> 01:00:51,169
once lighting is you know working so

1414
01:00:48,768 --> 01:00:55,189
we're actually lighting sprites we'll

1415
01:00:51,170 --> 01:00:57,200
see what that has to be right okay

1416
01:00:55,190 --> 01:00:59,960
so then we've got the UV and the

1417
01:00:57,199 --> 01:01:02,899
p-values that's really most of what we

1418
01:00:59,960 --> 01:01:06,349
actually have to do now is compute where

1419
01:01:02,900 --> 01:01:08,690
these p-values should actually go and we

1420
01:01:06,349 --> 01:01:10,099
know we have a point from UV W things

1421
01:01:08,690 --> 01:01:13,190
happening in the collision volume sure

1422
01:01:10,099 --> 01:01:16,789
that gives us the base P but we don't

1423
01:01:13,190 --> 01:01:18,389
know what to do after that right so now

1424
01:01:16,789 --> 01:01:20,309
we've got a bunch of crap

1425
01:01:18,389 --> 01:01:22,139
has to happen here you can see it

1426
01:01:20,309 --> 01:01:24,539
happening here and we probably still

1427
01:01:22,139 --> 01:01:26,400
need to do this stuff but then we we

1428
01:01:24,539 --> 01:01:29,039
kind of want our sprite values for up

1429
01:01:26,400 --> 01:01:32,160
right call to be the last thing we do we

1430
01:01:29,039 --> 01:01:34,500
don't want to push the sprite on so we

1431
01:01:32,159 --> 01:01:37,078
want to generate all the rest of the

1432
01:01:34,500 --> 01:01:39,420
stuff that this thing would have done we

1433
01:01:37,079 --> 01:01:41,430
want to generate that ourselves so that

1434
01:01:39,420 --> 01:01:44,838
push sprite call is kind of now

1435
01:01:41,429 --> 01:01:44,838
something that's a little bit suspicious

1436
01:01:45,420 --> 01:01:52,920
what we would like to do is take that

1437
01:01:47,489 --> 01:01:54,689
code and use our own computations to do

1438
01:01:52,920 --> 01:01:55,710
something smart there and by the way we

1439
01:01:54,690 --> 01:01:58,318
can make this a little bit more

1440
01:01:55,710 --> 01:02:01,019
optimized as well by calling finalize

1441
01:01:58,318 --> 01:02:04,048
color and not optimized cleaner less

1442
01:02:01,018 --> 01:02:06,028
work to maintain by reusing that code

1443
01:02:04,048 --> 01:02:07,440
that we were using before and doing this

1444
01:02:06,028 --> 01:02:08,880
that way we know that those are both

1445
01:02:07,440 --> 01:02:11,639
going through the same path now and

1446
01:02:08,880 --> 01:02:13,170
there's not multiple people sort of

1447
01:02:11,639 --> 01:02:17,159
falling over themselves doing weird

1448
01:02:13,170 --> 01:02:19,769
store color antics so anyway in here now

1449
01:02:17,159 --> 01:02:23,190
you can see this does these operations

1450
01:02:19,768 --> 01:02:25,558
right you can see how it's unpacking

1451
01:02:23,190 --> 01:02:28,318
that and what we'd like to do is make

1452
01:02:25,559 --> 01:02:30,269
that push sprite again I want that to be

1453
01:02:28,318 --> 01:02:32,818
something that now could work better

1454
01:02:30,268 --> 01:02:37,038
with faster flowing code now one of the

1455
01:02:32,818 --> 01:02:37,038
things that you'll notice is that that

1456
01:02:39,318 --> 01:02:44,518
it's really not doing much with the

1457
01:02:42,480 --> 01:02:46,619
other pieces of the code right it's

1458
01:02:44,518 --> 01:02:48,538
mostly just computing the P and the UV

1459
01:02:46,619 --> 01:02:50,670
values if you look at there if you look

1460
01:02:48,539 --> 01:02:53,190
in there what it's doing it's computing

1461
01:02:50,670 --> 01:02:55,079
P values and UV values but everything

1462
01:02:53,190 --> 01:02:58,710
else is a pass through the texture is a

1463
01:02:55,079 --> 01:03:00,920
pass through the normals are not even

1464
01:02:58,710 --> 01:03:05,068
mentioned the color is a pass through

1465
01:03:00,920 --> 01:03:07,440
it's just the P n UV values so again I

1466
01:03:05,068 --> 01:03:11,038
think we can take a step backwards here

1467
01:03:07,440 --> 01:03:15,809
and say let's make this this push bright

1468
01:03:11,039 --> 01:03:18,809
call be even more amenable to pre

1469
01:03:15,809 --> 01:03:21,329
calculation so if we take a look at that

1470
01:03:18,809 --> 01:03:24,660
compute what was it called compute

1471
01:03:21,329 --> 01:03:26,490
sprite values or write values for

1472
01:03:24,659 --> 01:03:29,399
upright that I don't remember this thing

1473
01:03:26,489 --> 01:03:30,719
right so if you take a look at one of

1474
01:03:29,400 --> 01:03:32,220
these things we've got these sprite

1475
01:03:30,719 --> 01:03:33,539
values here let's

1476
01:03:32,219 --> 01:03:35,279
go ahead and make there be a thing

1477
01:03:33,539 --> 01:03:37,259
called quad values or something like

1478
01:03:35,280 --> 01:03:39,720
that that's the equivalent of it and

1479
01:03:37,260 --> 01:03:43,080
let's get this stuff out of there so

1480
01:03:39,719 --> 01:03:46,108
let's get these up in here right so we

1481
01:03:43,079 --> 01:03:48,630
got a p4 there right and then let's get

1482
01:03:46,108 --> 01:03:51,329
that UV working so you can see how this

1483
01:03:48,630 --> 01:03:53,460
thing gets output right the min min max

1484
01:03:51,329 --> 01:03:56,519
right that nonsense you can see that

1485
01:03:53,460 --> 01:04:00,840
getting passed down here right let's

1486
01:03:56,519 --> 01:04:03,389
make that be something that well and you

1487
01:04:00,840 --> 01:04:07,619
know what now I'm looking at it just

1488
01:04:03,389 --> 01:04:11,969
even looking at that I think for the

1489
01:04:07,619 --> 01:04:12,900
most part that doesn't need to really be

1490
01:04:11,969 --> 01:04:15,719
there either

1491
01:04:12,900 --> 01:04:18,630
right it's mostly just this is the

1492
01:04:15,719 --> 01:04:20,699
calculation and this other stuff is just

1493
01:04:18,630 --> 01:04:26,190
exactly what you would have expected it

1494
01:04:20,699 --> 01:04:29,250
to be and so yeah let's not worry about

1495
01:04:26,190 --> 01:04:31,470
that at the moment so if this right here

1496
01:04:29,250 --> 01:04:34,108
is getting done with this quad values

1497
01:04:31,469 --> 01:04:37,230
thing then we know that we don't have to

1498
01:04:34,108 --> 01:04:38,848
compute that anymore that can must be

1499
01:04:37,230 --> 01:04:41,280
generated directly off the sprite values

1500
01:04:38,849 --> 01:04:42,869
and similarly these things for all these

1501
01:04:41,280 --> 01:04:44,190
movies those could be generated directly

1502
01:04:42,869 --> 01:04:48,390
on the sprite fires as well but those

1503
01:04:44,190 --> 01:04:51,179
are so wrote at that point I'm just not

1504
01:04:48,389 --> 01:04:53,098
sure we even want to store those because

1505
01:04:51,179 --> 01:04:56,279
you can see that the min and the max UV

1506
01:04:53,099 --> 01:04:58,588
and that ma'am UV is probably 0 most of

1507
01:04:56,280 --> 01:05:01,530
the time as well so that even that is

1508
01:04:58,588 --> 01:05:03,630
kind of absurd the way that that's

1509
01:05:01,530 --> 01:05:05,880
working so just again trying to step

1510
01:05:03,630 --> 01:05:08,940
back a little bit from how this is

1511
01:05:05,880 --> 01:05:12,329
happening and make this be a little bit

1512
01:05:08,940 --> 01:05:13,800
more systemic I'm not sure I'm gonna go

1513
01:05:12,329 --> 01:05:15,750
ahead and push forward a little bit on

1514
01:05:13,800 --> 01:05:19,349
just making this be custom so I'm gonna

1515
01:05:15,750 --> 01:05:21,059
do this here instead so you take a look

1516
01:05:19,349 --> 01:05:27,869
at at what we're actually passing down

1517
01:05:21,059 --> 01:05:31,108
here this is the min P value right so

1518
01:05:27,869 --> 01:05:33,088
that's the min P the scaled x-axis and

1519
01:05:31,108 --> 01:05:34,949
scaled y-axis are just the things that

1520
01:05:33,088 --> 01:05:37,250
came out of sprite right so these are

1521
01:05:34,949 --> 01:05:37,250
these

1522
01:05:39,639 --> 01:05:44,659
so that's fine and then the rest of this

1523
01:05:42,349 --> 01:05:45,920
stuff is irrelevant right so here are

1524
01:05:44,659 --> 01:05:47,989
the p-values we actually were you

1525
01:05:45,920 --> 01:05:50,329
writing so you can see us like write

1526
01:05:47,989 --> 01:05:53,059
those directly out this way if we want

1527
01:05:50,329 --> 01:06:05,900
we can just you know get rid of the

1528
01:05:53,059 --> 01:06:08,570
middleman here and again those p-values

1529
01:06:05,900 --> 01:06:10,639
there they don't actually need because

1530
01:06:08,570 --> 01:06:12,350
we're not using that Z bias anymore we

1531
01:06:10,639 --> 01:06:13,940
can really actually get rid of the Z

1532
01:06:12,349 --> 01:06:15,380
bias entirely from our system at this

1533
01:06:13,940 --> 01:06:18,260
point I don't think we actually ever

1534
01:06:15,380 --> 01:06:20,059
need it so we can get rid of that Z bias

1535
01:06:18,260 --> 01:06:22,070
now I think that means that basically

1536
01:06:20,059 --> 01:06:24,199
this can just be written this way

1537
01:06:22,070 --> 01:06:27,260
because we don't actually need to store

1538
01:06:24,199 --> 01:06:29,000
for element stuff we're not using it and

1539
01:06:27,260 --> 01:06:30,860
it'll probably just go away so we can

1540
01:06:29,000 --> 01:06:32,690
pretty much get rid of all the notion of

1541
01:06:30,860 --> 01:06:38,030
the v4 in there and leave it like this

1542
01:06:32,690 --> 01:06:40,639
right so that leaves us with just the UV

1543
01:06:38,030 --> 01:06:44,750
right that's all we actually need here

1544
01:06:40,639 --> 01:06:47,389
is just the UV at that point and so now

1545
01:06:44,750 --> 01:06:49,429
the only question I have is what's the

1546
01:06:47,389 --> 01:06:51,769
most efficient way to encode that UV and

1547
01:06:49,429 --> 01:06:54,259
so if we go into push quad remember push

1548
01:06:51,769 --> 01:06:55,820
quad is the thing that's actually doing

1549
01:06:54,260 --> 01:06:58,130
the work for the UV and you can see what

1550
01:06:55,820 --> 01:07:00,890
it does here is it takes the input

1551
01:06:58,130 --> 01:07:03,769
movies and it actually does the mapping

1552
01:07:00,889 --> 01:07:06,710
to figure out how those things exist

1553
01:07:03,769 --> 01:07:08,809
based on the texture size so I don't if

1554
01:07:06,710 --> 01:07:12,619
you can see that happening here right

1555
01:07:08,809 --> 01:07:14,900
but you can see as it goes to get this

1556
01:07:12,619 --> 01:07:17,659
in V inverse UV right you can see that

1557
01:07:14,900 --> 01:07:19,550
being calculated here and so that's

1558
01:07:17,659 --> 01:07:22,279
something that we want to again

1559
01:07:19,550 --> 01:07:26,750
similarly make systemic based on the

1560
01:07:22,280 --> 01:07:28,670
texture we we know that this is never

1561
01:07:26,750 --> 01:07:30,469
going to be a rectangular texture we're

1562
01:07:28,670 --> 01:07:32,570
not using rectangular textures in our

1563
01:07:30,469 --> 01:07:34,549
fast path they're just for cutscenes so

1564
01:07:32,570 --> 01:07:36,830
we know that we really don't need to do

1565
01:07:34,550 --> 01:07:39,140
any switches we don't need to test to

1566
01:07:36,829 --> 01:07:42,789
see what's going on here so what we want

1567
01:07:39,139 --> 01:07:46,699
to do is in here where we go in and set

1568
01:07:42,789 --> 01:07:49,159
this UV scale scaling value basically is

1569
01:07:46,699 --> 01:07:51,139
all we really want to know is what is

1570
01:07:49,159 --> 01:07:55,149
this we just need to

1571
01:07:51,139 --> 01:08:03,588
know what this is going to be versus the

1572
01:07:55,150 --> 01:08:06,380
war is it here versus the texture within

1573
01:08:03,588 --> 01:08:09,558
- three width and height which we

1574
01:08:06,380 --> 01:08:12,349
already have so that's really all we

1575
01:08:09,559 --> 01:08:14,660
need right that's really all we need and

1576
01:08:12,349 --> 01:08:16,489
so if we assume that the ground cover

1577
01:08:14,659 --> 01:08:17,899
always draws the complete thing which we

1578
01:08:16,488 --> 01:08:20,298
don't actually know so we may have to

1579
01:08:17,899 --> 01:08:22,388
adjust this later and have to UVs like a

1580
01:08:20,298 --> 01:08:25,399
minute of max right

1581
01:08:22,389 --> 01:08:27,350
if we want to pull out of chunks of a

1582
01:08:25,399 --> 01:08:28,849
thing for example but assuming we don't

1583
01:08:27,350 --> 01:08:31,159
want to do that then all we really need

1584
01:08:28,850 --> 01:08:33,588
here is to just say look all right we

1585
01:08:31,158 --> 01:08:36,469
need you to do we need to compute this

1586
01:08:33,588 --> 01:08:38,778
thing right so we need that value there

1587
01:08:36,469 --> 01:08:42,020
and we could make that be something

1588
01:08:38,779 --> 01:08:44,029
that's again systemic in a way that lets

1589
01:08:42,020 --> 01:08:47,900
us do that easily so basically get

1590
01:08:44,029 --> 01:08:55,179
scaled texture coordinates or something

1591
01:08:47,899 --> 01:08:57,948
like this or scale UV to texture right

1592
01:08:55,179 --> 01:09:00,190
and all you need to do there is just do

1593
01:08:57,948 --> 01:09:00,189
this

1594
01:09:06,789 --> 01:09:15,409
so I guess we don't want to call Celia

1595
01:09:09,229 --> 01:09:16,789
we just want to do like get UV scale or

1596
01:09:15,409 --> 01:09:22,010
texture it's probably the right way to

1597
01:09:16,789 --> 01:09:24,289
do it that's better

1598
01:09:22,010 --> 01:09:25,989
and so in this case you have to pass the

1599
01:09:24,289 --> 01:09:29,779
texture but that's all you need to pass

1600
01:09:25,989 --> 01:09:32,119
and and we probably want to specify like

1601
01:09:29,779 --> 01:09:34,670
regular texture because it doesn't work

1602
01:09:32,119 --> 01:09:36,559
if the texture is special so in here we

1603
01:09:34,670 --> 01:09:39,770
just say alright we've got our inverse

1604
01:09:36,560 --> 01:09:42,530
UV that's gonna be true for any time you

1605
01:09:39,770 --> 01:09:44,780
use this particular texture regular

1606
01:09:42,529 --> 01:09:49,130
texture texture okay and so we're gonna

1607
01:09:44,779 --> 01:09:50,719
return the result like so right so that

1608
01:09:49,130 --> 01:09:51,500
goes ahead and gives us back this in a

1609
01:09:50,720 --> 01:09:54,350
reliable way

1610
01:09:51,500 --> 01:09:58,069
that anyone can now use so you get UV

1611
01:09:54,350 --> 01:10:01,610
scale for regular texture is all we need

1612
01:09:58,069 --> 01:10:03,590
there that can then be called here get

1613
01:10:01,609 --> 01:10:06,500
UV schoo for regular texture and that's

1614
01:10:03,590 --> 01:10:08,510
actually all we need to store right so

1615
01:10:06,500 --> 01:10:11,689
for whatever this texture actually was

1616
01:10:08,510 --> 01:10:15,590
that we ended up using that's the thing

1617
01:10:11,689 --> 01:10:22,009
we need to that's the thing that we need

1618
01:10:15,590 --> 01:10:23,900
to store the scale for right now we

1619
01:10:22,010 --> 01:10:25,730
didn't actually grab the texture so we

1620
01:10:23,899 --> 01:10:33,079
need to grab the texture and get that

1621
01:10:25,729 --> 01:10:36,129
piece of information out of it so this

1622
01:10:33,079 --> 01:10:38,059
here if we didn't actually load it yet

1623
01:10:36,130 --> 01:10:40,609
we can't actually get that piece of

1624
01:10:38,060 --> 01:10:42,860
information the bummer dragged about

1625
01:10:40,609 --> 01:10:45,619
that is that we kind of need it right

1626
01:10:42,859 --> 01:10:47,449
but the good news is we should be able

1627
01:10:45,619 --> 01:10:50,029
to do this without loading the texture

1628
01:10:47,449 --> 01:10:52,099
right in here if we looked at what the

1629
01:10:50,029 --> 01:10:56,479
bitmap was that would tell us the scale

1630
01:10:52,100 --> 01:10:58,400
right so in theory even if we haven't

1631
01:10:56,479 --> 01:11:00,679
loaded it yet we should be able to do

1632
01:10:58,399 --> 01:11:02,179
this the other way round we should be

1633
01:11:00,680 --> 01:11:07,990
able to make a call but something like

1634
01:11:02,180 --> 01:11:07,990
this right

1635
01:11:08,500 --> 01:11:15,639
or maybe even that where we just say

1636
01:11:12,618 --> 01:11:20,448
look we got the bitmap info

1637
01:11:15,639 --> 01:11:22,130
compute the scale using that because

1638
01:11:20,448 --> 01:11:23,569
that's what you actually needed you just

1639
01:11:22,130 --> 01:11:24,800
need the texture width and height you

1640
01:11:23,569 --> 01:11:26,299
know what those are going to be once you

1641
01:11:24,800 --> 01:11:27,860
see the bitmap info we don't have to

1642
01:11:26,300 --> 01:11:29,600
actually have the thing paged into

1643
01:11:27,859 --> 01:11:31,639
memory to do all the work which is what

1644
01:11:29,600 --> 01:11:33,260
we want because when I create this I

1645
01:11:31,639 --> 01:11:35,750
don't care if it's loaded into memory

1646
01:11:33,260 --> 01:11:37,909
I'm not gonna draw it so we should let

1647
01:11:35,750 --> 01:11:39,500
the background loading routines have way

1648
01:11:37,908 --> 01:11:46,519
more time than this they shouldn't have

1649
01:11:39,500 --> 01:11:48,469
to be pressured in that way so what I

1650
01:11:46,520 --> 01:11:51,409
want here is a way to get this

1651
01:11:48,469 --> 01:11:53,090
information without knowing what the

1652
01:11:51,408 --> 01:11:56,929
actual texture is so let's implement

1653
01:11:53,090 --> 01:11:59,239
that as well if you have an HSA bitmap

1654
01:11:56,929 --> 01:12:02,690
again inside the renderer it's basically

1655
01:11:59,238 --> 01:12:08,899
this exact call which is get you know UV

1656
01:12:02,689 --> 01:12:18,529
scale for bitmap and there's a bitmap

1657
01:12:08,899 --> 01:12:19,118
info right and that bitmap what's it

1658
01:12:18,529 --> 01:12:23,658
called

1659
01:12:19,118 --> 01:12:26,179
HHA bitmaps are so there's the info

1660
01:12:23,658 --> 01:12:28,368
right and if I look at HHA bitmap

1661
01:12:26,179 --> 01:12:30,710
I can see that in here I've got a dim

1662
01:12:28,368 --> 01:12:33,559
and an org dim I have the information

1663
01:12:30,710 --> 01:12:35,600
that I actually want when I stored the

1664
01:12:33,560 --> 01:12:38,510
bitmap I know what's actually going on

1665
01:12:35,600 --> 01:12:40,969
right and so when I look at for example

1666
01:12:38,510 --> 01:12:44,780
when we submit these textures so inside

1667
01:12:40,969 --> 01:12:46,880
load bitmap right what we actually do is

1668
01:12:44,779 --> 01:12:49,759
we use that width and height to see

1669
01:12:46,880 --> 01:12:52,639
what's up right we see what's going on

1670
01:12:49,760 --> 01:12:55,460
there so if I wanted to I could do this

1671
01:12:52,639 --> 01:13:01,989
I don't know why we have to act past the

1672
01:12:55,460 --> 01:13:05,329
assets for that dream my I do not know

1673
01:13:01,988 --> 01:13:09,799
why that's being passed there possibly

1674
01:13:05,329 --> 01:13:11,149
because of this but I don't love that

1675
01:13:09,800 --> 01:13:13,130
because I'm not sure why you would need

1676
01:13:11,149 --> 01:13:16,039
the assets there so I'm gonna eliminate

1677
01:13:13,130 --> 01:13:18,440
that for now and in the future we can

1678
01:13:16,039 --> 01:13:18,779
put it back in if we really need it but

1679
01:13:18,439 --> 01:13:21,210
I don't

1680
01:13:18,779 --> 01:13:30,960
wanna do that so in here I can say look

1681
01:13:21,210 --> 01:13:32,399
if you needed this then we do one thing

1682
01:13:30,960 --> 01:13:33,960
otherwise we do the other thing but

1683
01:13:32,399 --> 01:13:35,788
we'll always produce the right result

1684
01:13:33,960 --> 01:13:39,210
for you either way right we'll always

1685
01:13:35,788 --> 01:13:43,198
produce the correct value no matter what

1686
01:13:39,210 --> 01:13:44,730
and so if we do get UV scale for bitmap

1687
01:13:43,198 --> 01:13:47,399
and really if you look at this we don't

1688
01:13:44,729 --> 01:13:49,348
even need that we just need the dim for

1689
01:13:47,399 --> 01:13:52,229
it right we just need you to tell us

1690
01:13:49,349 --> 01:13:55,800
like what this what it is right so we

1691
01:13:52,229 --> 01:13:57,448
really just need like that it's all we

1692
01:13:55,800 --> 01:13:59,760
really needed you to tell us and then we

1693
01:13:57,448 --> 01:14:01,109
can compute the value so in here where

1694
01:13:59,760 --> 01:14:02,670
we do dimensional cross special texture

1695
01:14:01,109 --> 01:14:05,098
we can pass the width and height if they

1696
01:14:02,670 --> 01:14:07,920
do then the UV scale is just nothing

1697
01:14:05,099 --> 01:14:09,989
right if it's just one one but I'll go

1698
01:14:07,920 --> 01:14:12,118
double-check that that's true and so

1699
01:14:09,988 --> 01:14:14,399
really we only have this case where we

1700
01:14:12,118 --> 01:14:17,519
need to know if this thing doesn't

1701
01:14:14,399 --> 01:14:19,769
require a special texture if the texture

1702
01:14:17,520 --> 01:14:21,449
is effectively regular then what we want

1703
01:14:19,770 --> 01:14:24,059
to do is compute these two values so we

1704
01:14:21,448 --> 01:14:26,098
want to compute the x value as being the

1705
01:14:24,059 --> 01:14:28,529
width divided by that texture array

1706
01:14:26,099 --> 01:14:31,949
dimension and then in you know same

1707
01:14:28,529 --> 01:14:34,109
thing here like so and off we go now

1708
01:14:31,948 --> 01:14:36,328
again I don't know whether or not we

1709
01:14:34,109 --> 01:14:37,649
want this thing probably the reason and

1710
01:14:36,328 --> 01:14:40,408
you know I could keep this go and it

1711
01:14:37,649 --> 01:14:41,908
doesn't really matter right if we wanted

1712
01:14:40,408 --> 01:14:44,279
to make it this way we're just

1713
01:14:41,908 --> 01:14:46,859
protecting ourselves effectively for

1714
01:14:44,279 --> 01:14:48,840
needing to make that dynamic this value

1715
01:14:46,859 --> 01:14:51,210
so we would look it up inside the assets

1716
01:14:48,840 --> 01:14:52,920
maybe we want to keep that I don't know

1717
01:14:51,210 --> 01:14:54,868
I'm willing to say that we might and

1718
01:14:52,920 --> 01:14:59,788
it's pretty easy for me to pass it

1719
01:14:54,868 --> 01:15:01,139
around so sure right whatever if we go

1720
01:14:59,788 --> 01:15:02,969
back and look in here you can see that

1721
01:15:01,139 --> 01:15:04,618
that is in fact what we do you can see

1722
01:15:02,969 --> 01:15:06,960
us doing the one at point O in there so

1723
01:15:04,618 --> 01:15:09,058
that's all fine so this basically gives

1724
01:15:06,960 --> 01:15:10,380
us the thing that we needed when we're

1725
01:15:09,059 --> 01:15:12,630
actually calling this in the entity

1726
01:15:10,380 --> 01:15:14,130
output so here where I'm doing get UV

1727
01:15:12,630 --> 01:15:20,099
scale for bitmap and I passed device

1728
01:15:14,130 --> 01:15:21,690
info I really want to do this but other

1729
01:15:20,099 --> 01:15:26,069
than that is exactly what I said it was

1730
01:15:21,689 --> 01:15:28,049
right so now when we get further through

1731
01:15:26,069 --> 01:15:29,429
here let's see what's going on here

1732
01:15:28,050 --> 01:15:33,420
rubes

1733
01:15:29,430 --> 01:15:37,860
and asked me why I wrote that wrong it's

1734
01:15:33,420 --> 01:15:39,359
not what that's supposed to be doing so

1735
01:15:37,859 --> 01:15:41,159
now we just need to go ahead and clean

1736
01:15:39,359 --> 01:15:48,659
up all of the mess we made if we look in

1737
01:15:41,159 --> 01:15:50,039
here about the v4 do that that was not

1738
01:15:48,659 --> 01:15:52,109
what I was expecting to look at let's go

1739
01:15:50,039 --> 01:15:54,090
look at that that's it there we go

1740
01:15:52,109 --> 01:15:58,339
so in dimensions require a special

1741
01:15:54,090 --> 01:16:00,720
texture we need that to be exposed now

1742
01:15:58,340 --> 01:16:10,770
we want that to be like up here

1743
01:16:00,720 --> 01:16:17,970
basically people can call it oh is this

1744
01:16:10,770 --> 01:16:24,030
done inside looks like maybe we don't

1745
01:16:17,970 --> 01:16:34,970
want this here if this needs to be in

1746
01:16:24,029 --> 01:16:37,319
here all right okay so now we're down to

1747
01:16:34,970 --> 01:16:39,360
basically what I thought we should be

1748
01:16:37,319 --> 01:16:40,439
although well let me double check some

1749
01:16:39,359 --> 01:16:42,359
things so this is the part that we

1750
01:16:40,439 --> 01:16:44,009
hadn't we haven't put that actual index

1751
01:16:42,359 --> 01:16:46,529
for tips output thing in there but let's

1752
01:16:44,010 --> 01:16:48,210
just do you bug this for a second cover

1753
01:16:46,529 --> 01:16:49,289
scale is wrong weird now don't store

1754
01:16:48,210 --> 01:16:51,480
that in the cover which is going to be

1755
01:16:49,289 --> 01:16:53,069
doing it only at compute time we've got

1756
01:16:51,479 --> 01:16:54,839
these sprite values for up right here

1757
01:16:53,069 --> 01:17:00,659
we're passing the render group down I

1758
01:16:54,840 --> 01:17:03,360
don't know why it looks like because of

1759
01:17:00,659 --> 01:17:07,380
this stuff right so it needs to be it

1760
01:17:03,359 --> 01:17:09,689
needs to know what the x and y axes are

1761
01:17:07,380 --> 01:17:12,779
for the camera and stuff like that and

1762
01:17:09,689 --> 01:17:15,719
so we kind of need some way of getting

1763
01:17:12,779 --> 01:17:18,840
that information passed down in here in

1764
01:17:15,720 --> 01:17:19,800
a more convenient way we will do that in

1765
01:17:18,840 --> 01:17:23,220
a second

1766
01:17:19,800 --> 01:17:24,630
finally we need in here we need like the

1767
01:17:23,220 --> 01:17:27,119
positions for the entities and stuff

1768
01:17:24,630 --> 01:17:30,600
like that so you can see that that's one

1769
01:17:27,119 --> 01:17:32,939
thing I can't quite do so this value

1770
01:17:30,600 --> 01:17:35,340
right here kind of has to go away and it

1771
01:17:32,939 --> 01:17:37,469
has to be reconstituted that's actually

1772
01:17:35,340 --> 01:17:41,279
fine that's not a huge deal if we go

1773
01:17:37,470 --> 01:17:43,349
back to our push vertex oops raw ground

1774
01:17:41,279 --> 01:17:45,569
cover rather where we're pushing our

1775
01:17:43,349 --> 01:17:48,359
Sahn that just means that it has to go

1776
01:17:45,569 --> 01:17:49,889
in here it's fine to do one ad in there

1777
01:17:48,359 --> 01:17:51,749
that's not gonna kill us that's just

1778
01:17:49,889 --> 01:17:53,909
moving it to wherever the entity is on

1779
01:17:51,748 --> 01:17:55,769
this frame so that's pretty easy right

1780
01:17:53,908 --> 01:17:57,388
it's just a simple little transform not

1781
01:17:55,769 --> 01:17:59,189
to push it forward so that's pretty

1782
01:17:57,389 --> 01:18:02,939
simple that gets that out of there but

1783
01:17:59,189 --> 01:18:04,889
we do have that one problem still where

1784
01:18:02,939 --> 01:18:05,969
is if we look at you know again this is

1785
01:18:04,889 --> 01:18:07,199
just because we haven't implemented it

1786
01:18:05,969 --> 01:18:09,208
yet so those aren't errors those are

1787
01:18:07,198 --> 01:18:10,228
fine we do have this one problem still

1788
01:18:09,208 --> 01:18:12,179
where we have to kind of think about

1789
01:18:10,229 --> 01:18:18,449
what we want to have happen here

1790
01:18:12,179 --> 01:18:20,368
why is that's not covered P where is

1791
01:18:18,448 --> 01:18:27,708
that value what's called base P

1792
01:18:20,368 --> 01:18:31,408
basically so I think that's all good and

1793
01:18:27,708 --> 01:18:33,538
so this is really our only issue where

1794
01:18:31,408 --> 01:18:39,299
sprite values for upright with the

1795
01:18:33,538 --> 01:18:41,429
render group there that's an issue it

1796
01:18:39,300 --> 01:18:43,529
doesn't need it for anything too subtle

1797
01:18:41,429 --> 01:18:46,828
it needs it for the y axis and the x

1798
01:18:43,529 --> 01:18:49,319
axis right and so it needs to know

1799
01:18:46,828 --> 01:18:52,368
what's the actual up value for the

1800
01:18:49,319 --> 01:18:54,748
camera right like what's the what's

1801
01:18:52,368 --> 01:19:00,839
pointing upward as far as the camera is

1802
01:18:54,748 --> 01:19:02,688
concerned and then it needs the it needs

1803
01:19:00,840 --> 01:19:05,519
to know what the world up axis is right

1804
01:19:02,689 --> 01:19:07,349
answer the problem that we have here is

1805
01:19:05,519 --> 01:19:13,079
again it's a little bit of like a

1806
01:19:07,349 --> 01:19:14,849
partial evaluation issue if we look at

1807
01:19:13,078 --> 01:19:18,090
where the world up is being you well

1808
01:19:14,849 --> 01:19:20,069
actually let's look if we look at where

1809
01:19:18,090 --> 01:19:21,809
the world up is being used we don't care

1810
01:19:20,069 --> 01:19:23,759
about that because that's a constant we

1811
01:19:21,809 --> 01:19:26,909
don't change the world up it's just what

1812
01:19:23,760 --> 01:19:30,149
it is right so really the problem we

1813
01:19:26,908 --> 01:19:32,368
have is with the y-axis h-here you can

1814
01:19:30,149 --> 01:19:36,359
see that when we look at what's going on

1815
01:19:32,368 --> 01:19:38,248
that y axis H that has the camera up

1816
01:19:36,359 --> 01:19:39,479
sort of lurked in there because it's how

1817
01:19:38,248 --> 01:19:43,099
we make our sprites be more

1818
01:19:39,479 --> 01:19:43,099
forward-facing you know I'm sad

1819
01:19:46,630 --> 01:19:52,940
now thankfully the y-axis is usually the

1820
01:19:50,840 --> 01:19:54,890
same so what we could do is just pretend

1821
01:19:52,939 --> 01:19:56,839
that that's not going to change now it

1822
01:19:54,890 --> 01:19:59,660
is going to change because if we move

1823
01:19:56,840 --> 01:20:01,310
the cameras like sort of focus level it

1824
01:19:59,659 --> 01:20:02,389
will change a little bit but we could

1825
01:20:01,310 --> 01:20:05,030
just say well it's not gonna change

1826
01:20:02,390 --> 01:20:07,340
enough right for us to care so we'll

1827
01:20:05,029 --> 01:20:09,769
just use it as it is we could do that

1828
01:20:07,340 --> 01:20:11,390
the other thing we could do is recognize

1829
01:20:09,770 --> 01:20:14,360
that well we could just reconstitute

1830
01:20:11,390 --> 01:20:16,460
just this part at runtime I'm gonna say

1831
01:20:14,359 --> 01:20:18,469
let's go whole hog let's pass these

1832
01:20:16,460 --> 01:20:20,090
values down and so in order to do that

1833
01:20:18,470 --> 01:20:22,970
I'm going to take this sprite values for

1834
01:20:20,090 --> 01:20:24,860
up right I'm gonna create a separate

1835
01:20:22,970 --> 01:20:27,409
version of it and I'm gonna say we're

1836
01:20:24,859 --> 01:20:29,239
gonna have this be a two-tiered call so

1837
01:20:27,409 --> 01:20:31,849
the first tier is going to be where you

1838
01:20:29,239 --> 01:20:33,800
pass these things in and there's no need

1839
01:20:31,850 --> 01:20:47,539
for the render group so the first tier

1840
01:20:33,800 --> 01:20:51,079
is this world up camera up x axis H

1841
01:20:47,539 --> 01:20:55,000
right and this year I guess I should

1842
01:20:51,079 --> 01:20:57,920
have put these in the opposite order and

1843
01:20:55,000 --> 01:21:00,289
this deer is the one that actually does

1844
01:20:57,920 --> 01:21:02,659
the work so I get rid of these lookups

1845
01:21:00,289 --> 01:21:05,510
in to render group and I just have you

1846
01:21:02,659 --> 01:21:07,670
passed us down directly then the second

1847
01:21:05,510 --> 01:21:09,949
tier is that you call this thing with

1848
01:21:07,670 --> 01:21:11,869
just a render group and it unpacks the

1849
01:21:09,949 --> 01:21:14,319
render group into the call that way

1850
01:21:11,869 --> 01:21:16,880
people who don't want to do that right

1851
01:21:14,319 --> 01:21:18,769
don't have to they don't have to pass a

1852
01:21:16,880 --> 01:21:23,029
render group if they don't want to so

1853
01:21:18,770 --> 01:21:25,880
then we end up with this world up camera

1854
01:21:23,029 --> 01:21:33,439
up x-axis H and then these other pushes

1855
01:21:25,880 --> 01:21:39,170
world dim align P X axis to Y axis to T

1856
01:21:33,439 --> 01:21:41,809
camera right so that's how that works

1857
01:21:39,170 --> 01:21:44,270
and now we can do these in two different

1858
01:21:41,810 --> 01:21:45,650
waves so now instead of passing a render

1859
01:21:44,270 --> 01:21:47,180
group here we can actually just pass

1860
01:21:45,649 --> 01:21:49,729
what we want to use for these other

1861
01:21:47,180 --> 01:21:52,130
pieces of information right world up

1862
01:21:49,729 --> 01:21:54,219
camera x-axis H world dim the line P or

1863
01:21:52,130 --> 01:21:56,690
whatever else I'm sorry

1864
01:21:54,220 --> 01:21:58,280
just these three world up camera app X

1865
01:21:56,689 --> 01:22:00,479
action stage

1866
01:21:58,279 --> 01:22:02,189
and so we get rid of the render group

1867
01:22:00,479 --> 01:22:05,119
here and we say well what's the world up

1868
01:22:02,189 --> 01:22:09,449
access well we know what the world up is

1869
01:22:05,119 --> 01:22:12,479
right before you specify that that's

1870
01:22:09,449 --> 01:22:16,319
always this what's the camera up access

1871
01:22:12,479 --> 01:22:17,579
well hard to say right that's one that

1872
01:22:16,319 --> 01:22:18,269
we probably want to specify a little

1873
01:22:17,579 --> 01:22:21,238
more carefully

1874
01:22:18,270 --> 01:22:22,890
what's the x-axis well that's really

1875
01:22:21,238 --> 01:22:26,309
simple we know we don't allow the camera

1876
01:22:22,890 --> 01:22:28,140
that to rotate so in this case we know

1877
01:22:26,310 --> 01:22:30,270
that that's actually always the y-axis

1878
01:22:28,140 --> 01:22:32,160
so it's really just this value that's

1879
01:22:30,270 --> 01:22:34,500
the one that we you know maybe want to

1880
01:22:32,159 --> 01:22:38,880
know and if we want to know like okay so

1881
01:22:34,500 --> 01:22:41,090
what's camera up what's pointing back or

1882
01:22:38,880 --> 01:22:45,480
rather what's pointing along the screen

1883
01:22:41,090 --> 01:22:49,039
y-axis if you will we know that's just a

1884
01:22:45,479 --> 01:22:52,049
subtly tilted version of the regular

1885
01:22:49,039 --> 01:22:55,890
y-axis but the question is well how

1886
01:22:52,050 --> 01:22:59,010
tilted right and so when we go to update

1887
01:22:55,890 --> 01:23:01,770
and render entities when we look and see

1888
01:22:59,010 --> 01:23:06,230
what those values actually are up sorry

1889
01:23:01,770 --> 01:23:10,320
I didn't mean that update in the render

1890
01:23:06,229 --> 01:23:13,259
world we know that we're doing our

1891
01:23:10,319 --> 01:23:16,619
rotation using the pitch of the camera

1892
01:23:13,260 --> 01:23:18,869
here to do a certain amount of rotation

1893
01:23:16,619 --> 01:23:20,279
so we know in the world mode that

1894
01:23:18,869 --> 01:23:23,219
there's a certain amount of camera pitch

1895
01:23:20,279 --> 01:23:26,189
and that camera pitch is really the

1896
01:23:23,219 --> 01:23:29,189
thing that determines what that tilt is

1897
01:23:26,189 --> 01:23:31,859
this value here is therefore sort of a

1898
01:23:29,189 --> 01:23:33,839
magic value for us it's a value that we

1899
01:23:31,859 --> 01:23:36,059
want to actually expose to people who

1900
01:23:33,840 --> 01:23:41,789
want to precache sprites because it's

1901
01:23:36,060 --> 01:23:46,440
the level of tilt that we want to most

1902
01:23:41,789 --> 01:23:49,019
of the time use right so that's really

1903
01:23:46,439 --> 01:23:51,899
the the value that we we kind of needed

1904
01:23:49,020 --> 01:23:53,280
to know and so at the moment you know we

1905
01:23:51,899 --> 01:23:55,170
kind of it's a little nasty because

1906
01:23:53,279 --> 01:23:58,439
we're like well what's that value really

1907
01:23:55,170 --> 01:24:00,569
gonna look like right and I don't know

1908
01:23:58,439 --> 01:24:02,429
where we really want to place that but

1909
01:24:00,569 --> 01:24:03,869
for now we can be cheesy and just

1910
01:24:02,430 --> 01:24:08,190
actually have this be something to

1911
01:24:03,869 --> 01:24:11,210
specify default camera pitch right is

1912
01:24:08,189 --> 01:24:11,210
this value here

1913
01:24:12,850 --> 01:24:20,510
right and then as a result we can also

1914
01:24:15,949 --> 01:24:24,010
do default camera up right and we can

1915
01:24:20,510 --> 01:24:27,739
also specify what that value actually is

1916
01:24:24,010 --> 01:24:29,239
and so that backwards pitch there that

1917
01:24:27,739 --> 01:24:32,359
we're actually getting we can

1918
01:24:29,239 --> 01:24:38,179
pre-compute whatever the rotation value

1919
01:24:32,359 --> 01:24:40,579
actually is of our camera up vector and

1920
01:24:38,180 --> 01:24:43,670
then once those two things match you

1921
01:24:40,579 --> 01:24:45,229
know we can be a happy camper right so

1922
01:24:43,670 --> 01:24:52,909
what I'd like to do is say all right

1923
01:24:45,229 --> 01:24:54,559
this thing is something right we'll

1924
01:24:52,909 --> 01:24:56,239
compute what it is and we'll just say

1925
01:24:54,560 --> 01:25:02,390
that we'll make these two things cost us

1926
01:24:56,239 --> 01:25:11,050
that we actually specify somewhere like

1927
01:25:02,390 --> 01:25:14,600
that then in here we say happy birthday

1928
01:25:11,050 --> 01:25:18,010
everyone's you know in a good mode and

1929
01:25:14,600 --> 01:25:18,010
then I think we're good to go

1930
01:25:23,130 --> 01:25:42,199
this has to take all of the values I

1931
01:25:29,729 --> 01:25:42,199
just said and then I think we're clean

1932
01:25:44,000 --> 01:26:00,720
all right so now oops where's my where's

1933
01:25:52,560 --> 01:26:02,400
that Depot camera up there's so now I

1934
01:26:00,720 --> 01:26:03,960
think we're good and I just need to

1935
01:26:02,399 --> 01:26:06,599
implement the actual output layer and

1936
01:26:03,960 --> 01:26:07,949
that's pretty easy to do and something

1937
01:26:06,600 --> 01:26:11,730
that I want to have been wanting to do

1938
01:26:07,949 --> 01:26:13,920
for a while so inside the renderer here

1939
01:26:11,729 --> 01:26:16,049
in the H file I wanted to find that that

1940
01:26:13,920 --> 01:26:17,810
little vertex output thing right and

1941
01:26:16,050 --> 01:26:26,430
what that's going to be is just a way of

1942
01:26:17,810 --> 01:26:28,710
outputting quads and vertices so it's

1943
01:26:26,430 --> 01:26:33,770
literally just going to be like a you

1944
01:26:28,710 --> 01:26:33,770
know face index

1945
01:26:46,260 --> 01:26:51,730
something like this so basically

1946
01:26:48,609 --> 01:26:54,460
something that says which index are we

1947
01:26:51,729 --> 01:26:56,139
on for vertices because that's we're

1948
01:26:54,460 --> 01:26:59,980
gonna have to sort of latch that forward

1949
01:26:56,140 --> 01:27:02,200
and see what I mean by that but then we

1950
01:26:59,979 --> 01:27:04,509
just need this to understand like okay

1951
01:27:02,199 --> 01:27:06,099
when you output vertices they go here

1952
01:27:04,510 --> 01:27:08,800
when your output indices they go here

1953
01:27:06,100 --> 01:27:10,780
and then as we advance things forward we

1954
01:27:08,800 --> 01:27:12,730
update this value so we know how our

1955
01:27:10,779 --> 01:27:14,710
indices should be adjusted to line up

1956
01:27:12,729 --> 01:27:18,219
with the actual vertex buffer that we're

1957
01:27:14,710 --> 01:27:21,850
submitting right uh and so we just need

1958
01:27:18,220 --> 01:27:34,539
some way of making that work and off we

1959
01:27:21,850 --> 01:27:36,880
go now I think that's probably it don't

1960
01:27:34,539 --> 01:27:47,560
quote me on that but if we now go ahead

1961
01:27:36,880 --> 01:27:49,359
and specify these actual functions yeah

1962
01:27:47,560 --> 01:27:51,010
if we now go ahead and testify these

1963
01:27:49,359 --> 01:27:52,509
actual functions you can see where we've

1964
01:27:51,010 --> 01:27:59,170
what we've got we've got one that's

1965
01:27:52,510 --> 01:28:01,840
called output quads like so let me get

1966
01:27:59,170 --> 01:28:08,279
that up behind my head there that takes

1967
01:28:01,840 --> 01:28:19,119
the render group and the quad count so

1968
01:28:08,279 --> 01:28:24,729
we then have a vertex tab and index out

1969
01:28:19,119 --> 01:28:27,359
and in advance like so right so now if I

1970
01:28:24,729 --> 01:28:31,599
want to do this I just have to say okay

1971
01:28:27,359 --> 01:28:32,589
the vertex output it just writes a

1972
01:28:31,600 --> 01:28:35,190
vertex so doesn't have to return

1973
01:28:32,590 --> 01:28:37,539
anything it takes an index vertex output

1974
01:28:35,189 --> 01:28:41,259
pointer that's like this sort of output

1975
01:28:37,539 --> 01:28:45,850
pram basically it has the vertex offset

1976
01:28:41,260 --> 01:28:50,770
here and then it has a p value and n

1977
01:28:45,850 --> 01:28:53,349
value a UV value a color value and a

1978
01:28:50,770 --> 01:28:58,130
texture value

1979
01:28:53,349 --> 01:29:00,349
it's going to write those out and then

1980
01:28:58,130 --> 01:29:10,038
we have a similar function for writing

1981
01:29:00,349 --> 01:29:13,788
indices like so and it's really just

1982
01:29:10,038 --> 01:29:19,988
taking the indices you wanted to grab

1983
01:29:13,788 --> 01:29:29,328
for your quad finally we have an advance

1984
01:29:19,988 --> 01:29:31,518
and the advance just says how far

1985
01:29:29,328 --> 01:29:33,018
forward did you want to go

1986
01:29:31,519 --> 01:29:37,750
now that you've outputted some stuff

1987
01:29:33,019 --> 01:29:37,750
right and that kind of wants to be that

1988
01:29:38,529 --> 01:29:46,399
this also wants to be that as well

1989
01:29:43,750 --> 01:29:47,960
probably but we're gonna leave it like

1990
01:29:46,399 --> 01:29:53,899
this in assert probably is what we're

1991
01:29:47,960 --> 01:29:56,179
gonna do as well all right so that's all

1992
01:29:53,899 --> 01:29:58,069
the functions we need and in theory now

1993
01:29:56,179 --> 01:30:00,170
we will get basically just like a

1994
01:29:58,069 --> 01:30:04,250
compile that doesn't actually work right

1995
01:30:00,170 --> 01:30:15,078
I of course we haven't computed these

1996
01:30:04,250 --> 01:30:17,029
yet so we should so we need to actually

1997
01:30:15,078 --> 01:30:17,868
figure out what we're gonna do here that

1998
01:30:17,029 --> 01:30:20,300
shouldn't be too hard

1999
01:30:17,868 --> 01:30:22,969
these UVs are just gonna be like well

2000
01:30:20,300 --> 01:30:24,559
okay like that maybe is zero zero right

2001
01:30:22,969 --> 01:30:28,460
or something

2002
01:30:24,559 --> 01:30:32,510
this is like the min UV right so this is

2003
01:30:28,460 --> 01:30:37,760
going to be like cover UV x this is

2004
01:30:32,510 --> 01:30:41,090
gonna be like cover UV x cover UV Y and

2005
01:30:37,760 --> 01:30:43,639
that's gonna be you know zero cover UV

2006
01:30:41,090 --> 01:30:44,719
wire you know we don't really care well

2007
01:30:43,639 --> 01:30:46,159
let's get that working and then if these

2008
01:30:44,719 --> 01:30:49,300
things are rotated around or flipped or

2009
01:30:46,158 --> 01:30:49,299
whatever we don't like there but we've

2010
01:30:50,050 --> 01:30:54,038
basically got what we want there

2011
01:30:54,930 --> 01:31:01,710
and now we need to actually implement

2012
01:30:58,829 --> 01:31:04,619
the streaming and so let's go ahead and

2013
01:31:01,710 --> 01:31:05,850
do that you can see we don't have any

2014
01:31:04,619 --> 01:31:07,500
errors anymore except for the fact that

2015
01:31:05,850 --> 01:31:09,720
we didn't actually write the functions

2016
01:31:07,500 --> 01:31:11,699
that we said we were going to also this

2017
01:31:09,720 --> 01:31:13,230
should not be a pointer I don't know why

2018
01:31:11,699 --> 01:31:16,109
I made it a pointer we want that to just

2019
01:31:13,229 --> 01:31:18,629
return an actual little utility that you

2020
01:31:16,109 --> 01:31:21,809
use and so that should really look more

2021
01:31:18,630 --> 01:31:23,730
like this right we don't need to

2022
01:31:21,810 --> 01:31:24,750
allocate any memory or you know keep

2023
01:31:23,729 --> 01:31:27,209
that around that can just be something

2024
01:31:24,750 --> 01:31:29,220
that's on the stack of the caller and so

2025
01:31:27,210 --> 01:31:30,989
that's really what we actually wanted

2026
01:31:29,220 --> 01:31:34,100
and so now the question is basically

2027
01:31:30,989 --> 01:31:34,099
like what do these things look like

2028
01:31:36,529 --> 01:31:40,619
imma stub this out because this could be

2029
01:31:38,579 --> 01:31:42,119
the more complicated one these are the

2030
01:31:40,619 --> 01:31:44,699
ones that are very simple so let's do

2031
01:31:42,119 --> 01:31:47,159
them we know if we're going to try and

2032
01:31:44,699 --> 01:31:48,479
output a vertex you can see us we've got

2033
01:31:47,159 --> 01:31:50,609
our information here that's very

2034
01:31:48,479 --> 01:31:52,949
straightforward we know we just want to

2035
01:31:50,609 --> 01:31:56,009
use and if we again we go look at the

2036
01:31:52,949 --> 01:31:57,899
index vertex output structure here you

2037
01:31:56,010 --> 01:31:59,850
can see what we've actually got we know

2038
01:31:57,899 --> 01:32:02,189
we're trying to write a vertex at vertex

2039
01:31:59,850 --> 01:32:03,960
at something so it's going to be this

2040
01:32:02,189 --> 01:32:07,379
offset that we're getting passed in here

2041
01:32:03,960 --> 01:32:11,399
right and then we want to write some

2042
01:32:07,380 --> 01:32:13,260
part of this thing right and there's a

2043
01:32:11,399 --> 01:32:16,259
bunch of these that's what we're doing

2044
01:32:13,260 --> 01:32:18,570
right so we want to write each of the

2045
01:32:16,260 --> 01:32:22,170
things that goes in a in a textured

2046
01:32:18,569 --> 01:32:27,509
vertex to make sure we've got them all

2047
01:32:22,170 --> 01:32:35,699
so we need a P and N a UV color texture

2048
01:32:27,510 --> 01:32:39,239
index and emission value and reserve

2049
01:32:35,699 --> 01:32:41,340
value right that's everything we're

2050
01:32:39,239 --> 01:32:42,479
assuming that these aren't set at the

2051
01:32:41,340 --> 01:32:44,730
moment because we don't know what they

2052
01:32:42,479 --> 01:32:46,409
are or how they work so we're not doing

2053
01:32:44,729 --> 01:32:48,500
them the rest of these are straight

2054
01:32:46,409 --> 01:32:48,500
ahead

2055
01:32:53,300 --> 01:32:59,310
and so that's everything that we need to

2056
01:32:57,149 --> 01:33:01,469
fill out for a textured vertex so that's

2057
01:32:59,310 --> 01:33:04,140
pretty much it right that's all we're

2058
01:33:01,470 --> 01:33:06,119
doing for index outs now we have to

2059
01:33:04,140 --> 01:33:08,039
output our indices those indices are

2060
01:33:06,119 --> 01:33:09,269
into the global vertex array so we want

2061
01:33:08,039 --> 01:33:11,550
to make sure we know what they actually

2062
01:33:09,270 --> 01:33:14,760
should be and so in this case we need to

2063
01:33:11,550 --> 01:33:16,680
say all right the index offset here

2064
01:33:14,760 --> 01:33:19,020
we've got an index add we're writing

2065
01:33:16,680 --> 01:33:21,450
this one and we're doing plus zero

2066
01:33:19,020 --> 01:33:27,030
equals zero right we're doing basically

2067
01:33:21,449 --> 01:33:28,619
this so we're just streaming out what

2068
01:33:27,029 --> 01:33:30,239
those indices are supposed to be but

2069
01:33:28,619 --> 01:33:31,979
what you can see is these are not gonna

2070
01:33:30,239 --> 01:33:33,300
be those indices are not going to be

2071
01:33:31,979 --> 01:33:36,750
correct when you stream them out they're

2072
01:33:33,300 --> 01:33:39,720
wrong why because whoever wrote this

2073
01:33:36,750 --> 01:33:42,539
right they don't know we're in the

2074
01:33:39,720 --> 01:33:44,460
global vertex buffer they are they just

2075
01:33:42,539 --> 01:33:46,319
know where they are relative to when

2076
01:33:44,460 --> 01:33:48,029
they started outputting so when they say

2077
01:33:46,319 --> 01:33:50,789
zero one two three what they actually

2078
01:33:48,029 --> 01:33:53,340
mean is zero plus some base value right

2079
01:33:50,789 --> 01:33:55,769
and that's exactly where the thing that

2080
01:33:53,340 --> 01:33:58,170
I added in there and said we'll talk

2081
01:33:55,770 --> 01:34:00,630
about that later comes in it's this

2082
01:33:58,170 --> 01:34:03,060
right here and so that needs to be added

2083
01:34:00,630 --> 01:34:10,260
in right so what we really need is

2084
01:34:03,060 --> 01:34:12,630
basically this so all of those indices

2085
01:34:10,260 --> 01:34:15,030
get you know shifted up to the base

2086
01:34:12,630 --> 01:34:17,069
value that the person thinks like in

2087
01:34:15,029 --> 01:34:19,079
terms of right the person who's calling

2088
01:34:17,069 --> 01:34:20,250
this is thinking in terms of some base i

2089
01:34:19,079 --> 01:34:22,199
they don't know what it is they don't

2090
01:34:20,250 --> 01:34:24,149
know where in the you know run of the

2091
01:34:22,199 --> 01:34:25,559
program they're executing they just know

2092
01:34:24,149 --> 01:34:27,599
they're starting to output some vertices

2093
01:34:25,560 --> 01:34:29,280
and there could have been any number of

2094
01:34:27,600 --> 01:34:31,170
vertices already in the stream so that's

2095
01:34:29,279 --> 01:34:33,359
just letting them not care that you can

2096
01:34:31,170 --> 01:34:35,520
just give us indices that are relative

2097
01:34:33,359 --> 01:34:37,920
to their starting position and have it

2098
01:34:35,520 --> 01:34:39,600
work so then when we advance we want to

2099
01:34:37,920 --> 01:34:42,840
do the same thing we want to take our

2100
01:34:39,600 --> 01:34:46,230
base index and we want to update that by

2101
01:34:42,840 --> 01:34:50,550
the count that we're advancing similarly

2102
01:34:46,229 --> 01:34:54,899
we need to that's in terms of a clot out

2103
01:34:50,550 --> 01:34:56,310
yes so that's in terms of quads now that

2104
01:34:54,899 --> 01:35:00,449
I think about it so we actually need

2105
01:34:56,310 --> 01:35:02,160
probably two yeah we need to multiply

2106
01:35:00,449 --> 01:35:04,500
that in two different ways I should be

2107
01:35:02,159 --> 01:35:06,000
more explicit so this right here is a

2108
01:35:04,500 --> 01:35:07,619
quad count

2109
01:35:06,000 --> 01:35:09,930
that's how many quads you're advancing

2110
01:35:07,619 --> 01:35:11,880
by so that means that the vertex at

2111
01:35:09,930 --> 01:35:13,380
right is going to go up by the quad

2112
01:35:11,880 --> 01:35:15,150
count times what

2113
01:35:13,380 --> 01:35:17,100
well how many vertices are there per

2114
01:35:15,149 --> 01:35:21,119
quad we know that there are four

2115
01:35:17,100 --> 01:35:23,160
vertices for quad however you know we

2116
01:35:21,119 --> 01:35:24,960
could make two versus this two one that

2117
01:35:23,159 --> 01:35:27,000
does that more so right now we're

2118
01:35:24,960 --> 01:35:29,220
assuming you're outputting indices and

2119
01:35:27,000 --> 01:35:32,310
quads adversities together if you were

2120
01:35:29,220 --> 01:35:34,199
reusing them we would have a second set

2121
01:35:32,310 --> 01:35:35,850
of these that you give two different

2122
01:35:34,199 --> 01:35:37,920
values how many vertices you want how

2123
01:35:35,850 --> 01:35:40,440
many quads you want right and the same

2124
01:35:37,920 --> 01:35:43,170
would be true up here and so maybe in

2125
01:35:40,439 --> 01:35:45,119
anticipation of wanting that what we may

2126
01:35:43,170 --> 01:35:47,039
want to do is actually sort of split

2127
01:35:45,119 --> 01:35:48,479
this out so there's one you pass a quad

2128
01:35:47,039 --> 01:35:55,350
count there's one where you do vertex

2129
01:35:48,479 --> 01:35:56,849
count index count right and so here

2130
01:35:55,350 --> 01:36:01,200
where we actually do that advance we

2131
01:35:56,850 --> 01:36:03,270
would say okay we want to make this be

2132
01:36:01,199 --> 01:36:07,349
something where we call our sub advance

2133
01:36:03,270 --> 01:36:08,850
here with Vlad count times however many

2134
01:36:07,350 --> 01:36:11,220
vertices we think there would be that

2135
01:36:08,850 --> 01:36:12,780
would be for how many indices we think

2136
01:36:11,220 --> 01:36:16,280
there would be that would actually be

2137
01:36:12,779 --> 01:36:20,119
six don't ask me why this is doing this

2138
01:36:16,279 --> 01:36:24,569
we need to change that in a second

2139
01:36:20,119 --> 01:36:26,189
because that should be six right correct

2140
01:36:24,569 --> 01:36:28,380
me if I'm wrong but that's the that's

2141
01:36:26,189 --> 01:36:30,449
the we don't have a way about putting

2142
01:36:28,380 --> 01:36:40,050
just quads so I'm pretty sure when we do

2143
01:36:30,449 --> 01:36:49,369
our our push squad call yeah right

2144
01:36:40,050 --> 01:36:49,369
so actually we need something like this

2145
01:36:54,439 --> 01:36:57,439
oops

2146
01:36:57,710 --> 01:37:07,100
and so here where we take that base

2147
01:37:01,789 --> 01:37:07,100
index right same exact code

2148
01:37:19,989 --> 01:37:38,689
nettles good to me I think that's really

2149
01:37:35,810 --> 01:37:41,000
all we need because this is just an onus

2150
01:37:38,689 --> 01:37:44,409
whistle pattern that we use and so I

2151
01:37:41,000 --> 01:37:44,409
think we can just keep it like that

2152
01:37:47,710 --> 01:37:53,480
right all right so I'm gonna change to

2153
01:37:51,949 --> 01:37:55,220
using that because I think that's a

2154
01:37:53,479 --> 01:37:57,289
little bit better I don't want to have

2155
01:37:55,220 --> 01:37:59,659
to worry too much about that so I think

2156
01:37:57,289 --> 01:38:01,640
that's better then in here we can just

2157
01:37:59,659 --> 01:38:03,949
say well we know it's four and six per

2158
01:38:01,640 --> 01:38:05,750
and so that's good and then when we do

2159
01:38:03,949 --> 01:38:08,750
our advanced here we will just say

2160
01:38:05,750 --> 01:38:10,279
alright we know we have a certain number

2161
01:38:08,750 --> 01:38:11,750
of vertices so we're gonna move four but

2162
01:38:10,279 --> 01:38:13,309
that many vertices we know we have a

2163
01:38:11,750 --> 01:38:15,619
certain number of indices and we're

2164
01:38:13,310 --> 01:38:17,510
gonna go that number of indices and then

2165
01:38:15,619 --> 01:38:19,699
finally we have a base index here and so

2166
01:38:17,510 --> 01:38:21,650
we know we want to update the base index

2167
01:38:19,699 --> 01:38:24,109
by however many vertices we move forward

2168
01:38:21,649 --> 01:38:25,819
right and so that's really all the

2169
01:38:24,109 --> 01:38:27,799
information we would need to track so it

2170
01:38:25,819 --> 01:38:29,630
gets us down to basically just this

2171
01:38:27,800 --> 01:38:32,659
function is the only function we

2172
01:38:29,630 --> 01:38:35,869
actually care about we do know we kind

2173
01:38:32,659 --> 01:38:38,720
of want both ways so we want this right

2174
01:38:35,869 --> 01:38:43,460
and then in here we would just say oh

2175
01:38:38,720 --> 01:38:45,770
yeah much like we did this other thing

2176
01:38:43,460 --> 01:38:47,600
we're just gonna say there's a version

2177
01:38:45,770 --> 01:38:51,200
you call with quad counts if that's what

2178
01:38:47,600 --> 01:38:52,970
you wanted but you don't have to so if

2179
01:38:51,199 --> 01:38:55,510
you wanted to output something that

2180
01:38:52,970 --> 01:38:57,949
isn't gonna just be strictly based on

2181
01:38:55,510 --> 01:38:59,210
unique quads all the time if you wanted

2182
01:38:57,949 --> 01:39:01,340
to do something like the cubes where

2183
01:38:59,210 --> 01:39:03,409
there are shared vertices you just can

2184
01:39:01,340 --> 01:39:05,480
and you would call the other version of

2185
01:39:03,409 --> 01:39:09,349
it so then we just need really this

2186
01:39:05,479 --> 01:39:10,549
where we set the result of the in the

2187
01:39:09,350 --> 01:39:12,500
you know the thing that we're gonna use

2188
01:39:10,550 --> 01:39:18,800
for outputting we need to be able to set

2189
01:39:12,500 --> 01:39:20,779
that effectively somehow and push quad

2190
01:39:18,800 --> 01:39:23,119
is our key because that's the thing that

2191
01:39:20,779 --> 01:39:24,319
that is doing all this kind of work so

2192
01:39:23,119 --> 01:39:27,710
when we look at what's gonna happen

2193
01:39:24,319 --> 01:39:29,630
there you can see how that works how

2194
01:39:27,710 --> 01:39:31,579
it's getting what it needs to get and

2195
01:39:29,630 --> 01:39:32,900
how it's doing what it needs to do but

2196
01:39:31,579 --> 01:39:36,289
you can see here where the

2197
01:39:32,899 --> 01:39:38,479
pase vertex index comes from it's that

2198
01:39:36,289 --> 01:39:41,000
right you can see it doing this

2199
01:39:38,479 --> 01:39:43,939
subtraction where it looks at how it's

2200
01:39:41,000 --> 01:39:50,350
going to offset those so we effectively

2201
01:39:43,939 --> 01:39:58,908
have a vert index which is where's that

2202
01:39:50,350 --> 01:40:00,590
here right so we have a vertex index and

2203
01:39:58,908 --> 01:40:02,089
an index index you can see us kind of

2204
01:40:00,590 --> 01:40:04,130
getting those things out here in effect

2205
01:40:02,090 --> 01:40:06,739
if you look at how we want to do this we

2206
01:40:04,130 --> 01:40:09,560
can probably just do this exactly as we

2207
01:40:06,738 --> 01:40:10,968
are doing it here effectively you know

2208
01:40:09,560 --> 01:40:12,170
we can basically just take this code and

2209
01:40:10,969 --> 01:40:14,840
say look this is what we're actually

2210
01:40:12,170 --> 01:40:21,949
doing here commands in this case needs

2211
01:40:14,840 --> 01:40:23,329
to come out of here right so then we're

2212
01:40:21,948 --> 01:40:25,460
taking a look at this we're getting this

2213
01:40:23,329 --> 01:40:27,859
information out we know we then need to

2214
01:40:25,460 --> 01:40:29,869
advance these by however much we're

2215
01:40:27,859 --> 01:40:31,099
saying we're going to eat up and then

2216
01:40:29,869 --> 01:40:32,658
we're saying we need to make sure that

2217
01:40:31,100 --> 01:40:35,150
we didn't overflow right and that all

2218
01:40:32,658 --> 01:40:36,889
seems fine as well

2219
01:40:35,149 --> 01:40:41,559
finally then here we're saying all right

2220
01:40:36,890 --> 01:40:44,810
we've got our I don't know what quad max

2221
01:40:41,560 --> 01:40:47,170
wad texture count is really doing

2222
01:40:44,810 --> 01:40:47,170
anymore

2223
01:40:51,399 --> 01:40:55,988
is anyone using that

2224
01:40:58,829 --> 01:41:04,470
yes so so quad texture count is is only

2225
01:41:02,520 --> 01:41:08,310
something that that people are using for

2226
01:41:04,470 --> 01:41:11,579
special textures right and I'll be

2227
01:41:08,310 --> 01:41:13,980
honest I don't really care about that at

2228
01:41:11,579 --> 01:41:15,510
all in here right so when we do output

2229
01:41:13,979 --> 01:41:17,909
clods we're just assuming that that's

2230
01:41:15,510 --> 01:41:20,220
not occurring because quad textures are

2231
01:41:17,909 --> 01:41:22,920
just not something we're managing right

2232
01:41:20,220 --> 01:41:24,780
we're not we're not we're not using this

2233
01:41:22,920 --> 01:41:29,010
for outputting like the cutscenes that's

2234
01:41:24,779 --> 01:41:30,569
not happening right so when we come

2235
01:41:29,010 --> 01:41:33,060
through here and we grab out the rest of

2236
01:41:30,569 --> 01:41:35,039
this stuff this is how we're finding out

2237
01:41:33,060 --> 01:41:38,310
where we're actually starting right like

2238
01:41:35,039 --> 01:41:40,340
so this puts us at the start of the

2239
01:41:38,310 --> 01:41:48,240
things that we actually needed to check

2240
01:41:40,340 --> 01:41:50,340
and then we you know we we just need to

2241
01:41:48,239 --> 01:41:52,469
take a look at these offsets here and

2242
01:41:50,340 --> 01:41:54,210
make sure those are all okay now the

2243
01:41:52,470 --> 01:41:56,940
other thing we need to do is the get

2244
01:41:54,210 --> 01:42:03,689
quads call in this case I think that's

2245
01:41:56,939 --> 01:42:06,960
what's called anyway where is that

2246
01:42:03,689 --> 01:42:12,259
there's like a thing we used to have for

2247
01:42:06,960 --> 01:42:14,579
checking our pushing get current quads

2248
01:42:12,260 --> 01:42:19,680
so if you look at how get current quads

2249
01:42:14,579 --> 01:42:22,739
works you can see how it kind of does

2250
01:42:19,680 --> 01:42:24,930
the work necessary to set us up for

2251
01:42:22,739 --> 01:42:27,119
outputting things as necessary and you

2252
01:42:24,930 --> 01:42:29,670
can see in here we say how many quads we

2253
01:42:27,119 --> 01:42:32,670
think we're gonna need at maximum and

2254
01:42:29,670 --> 01:42:34,319
that just as a probe to check to make

2255
01:42:32,670 --> 01:42:36,690
sure that we are going to have enough

2256
01:42:34,319 --> 01:42:39,359
room to output what we said that we're

2257
01:42:36,689 --> 01:42:43,259
going to output right so we want to

2258
01:42:39,359 --> 01:42:45,599
actually do that we want to the even

2259
01:42:43,260 --> 01:42:47,010
though we don't really use it much

2260
01:42:45,600 --> 01:42:49,620
because we actually end up using the

2261
01:42:47,010 --> 01:42:51,989
vertex arrays directly we don't really

2262
01:42:49,619 --> 01:42:56,699
do much of this stuff at all it's just

2263
01:42:51,989 --> 01:42:59,250
the quad count we use we need to make

2264
01:42:56,699 --> 01:43:01,579
that call now does push quad do that I

2265
01:42:59,250 --> 01:43:01,579
don't know

2266
01:43:07,180 --> 01:43:13,400
it does so it uses the get current quads

2267
01:43:11,510 --> 01:43:15,020
here in asserts that we have one we

2268
01:43:13,399 --> 01:43:17,179
don't really want to do that we want to

2269
01:43:15,020 --> 01:43:19,190
actually call get current quads because

2270
01:43:17,180 --> 01:43:21,289
when we've come in here we need to make

2271
01:43:19,189 --> 01:43:24,039
sure that we're going to have enough

2272
01:43:21,289 --> 01:43:26,810
quads covered right

2273
01:43:24,039 --> 01:43:31,039
okay so when we come in here we want to

2274
01:43:26,810 --> 01:43:36,020
say all right let's get this from get

2275
01:43:31,039 --> 01:43:38,029
current quads oops we want to be able to

2276
01:43:36,020 --> 01:43:43,970
call get current quads we want to pass

2277
01:43:38,029 --> 01:43:45,679
the render group the index count and the

2278
01:43:43,970 --> 01:43:47,329
texture that we're actually using in

2279
01:43:45,680 --> 01:43:51,170
this case we don't really want to supply

2280
01:43:47,329 --> 01:43:53,390
because again that varies per batch and

2281
01:43:51,170 --> 01:43:56,029
so in here we really we really would

2282
01:43:53,390 --> 01:43:57,770
wish that we didn't have to do this we

2283
01:43:56,029 --> 01:43:59,449
probably need to start simplifying this

2284
01:43:57,770 --> 01:44:00,920
code as well it's too complicated now

2285
01:43:59,449 --> 01:44:03,319
because it's doing way more than what we

2286
01:44:00,920 --> 01:44:05,390
actually wanted to do and so when it

2287
01:44:03,319 --> 01:44:07,039
does is special texture I think we want

2288
01:44:05,390 --> 01:44:15,079
to do is just pass in an old texture

2289
01:44:07,039 --> 01:44:17,060
here but again not great so back from

2290
01:44:15,079 --> 01:44:19,100
this code is not good and we should fix

2291
01:44:17,060 --> 01:44:21,110
it and then here we know we have six

2292
01:44:19,100 --> 01:44:23,450
four quads so we can just do this but

2293
01:44:21,109 --> 01:44:25,579
again we shouldn't be doing this anymore

2294
01:44:23,449 --> 01:44:29,449
we should simplify this to start

2295
01:44:25,579 --> 01:44:36,279
thinking in terms of more efficient less

2296
01:44:29,449 --> 01:44:45,050
for those things to do right all right

2297
01:44:36,279 --> 01:44:47,929
so let's keep going for firt index minus

2298
01:44:45,050 --> 01:44:50,060
vertex array offset this entry here

2299
01:44:47,930 --> 01:44:51,920
where we're getting our textured quads I

2300
01:44:50,060 --> 01:44:55,789
think this just needs to be safely

2301
01:44:51,920 --> 01:44:58,520
truncated back to a you you at 16 and

2302
01:44:55,789 --> 01:45:01,010
otherwise I think it's fine the output

2303
01:44:58,520 --> 01:45:02,690
quads call here is supposed to be

2304
01:45:01,010 --> 01:45:04,460
passing the render group but for some

2305
01:45:02,689 --> 01:45:07,239
reason I put the out in there and not

2306
01:45:04,460 --> 01:45:11,230
sure why that was not supposed to happen

2307
01:45:07,239 --> 01:45:11,229
but it did happen

2308
01:45:11,368 --> 01:45:19,799
and finally his base index the u16 it is

2309
01:45:16,710 --> 01:45:23,130
so actually that code didn't need to

2310
01:45:19,800 --> 01:45:26,060
look like it it was written at all

2311
01:45:23,130 --> 01:45:32,699
actually so we can actually change that

2312
01:45:26,060 --> 01:45:34,889
this is all irrelevant okay if I just

2313
01:45:32,698 --> 01:45:37,618
need to pop back and change a few things

2314
01:45:34,889 --> 01:45:39,920
here in this case we just need to do an

2315
01:45:37,618 --> 01:45:39,920
assertion

2316
01:45:56,279 --> 01:46:00,000
not sure the best way to do this but I

2317
01:45:58,500 --> 01:46:04,050
guess what we want to do is effectively

2318
01:46:00,000 --> 01:46:09,149
this assert that if you were to add

2319
01:46:04,050 --> 01:46:13,289
these two things together I guess like

2320
01:46:09,149 --> 01:46:18,239
that if that assert that that is less

2321
01:46:13,289 --> 01:46:20,519
than you 16 max right so assert that

2322
01:46:18,239 --> 01:46:34,800
that's not going to overflow

2323
01:46:20,520 --> 01:46:36,660
our situation then we're okay and

2324
01:46:34,800 --> 01:46:38,130
hopefully that'll do the right thing

2325
01:46:36,659 --> 01:46:41,430
the seeking power is always a little bit

2326
01:46:38,130 --> 01:46:44,310
Squinkie finally this is just I think it

2327
01:46:41,430 --> 01:46:46,680
squat index out and again that's just

2328
01:46:44,310 --> 01:46:48,960
gonna do those swizzles for us so I

2329
01:46:46,680 --> 01:46:50,340
think that's it we did a lot of code

2330
01:46:48,960 --> 01:46:52,529
here be nice to test it but we're pretty

2331
01:46:50,340 --> 01:46:54,300
much out of time so at this point we're

2332
01:46:52,529 --> 01:46:56,639
probably just gonna have to do some very

2333
01:46:54,300 --> 01:46:58,500
light debugging and then save it for

2334
01:46:56,640 --> 01:47:01,170
next week which is fine we've done all

2335
01:46:58,500 --> 01:47:03,680
the heavy lifting but now we have to

2336
01:47:01,170 --> 01:47:06,060
deal with the subtleties and it also may

2337
01:47:03,680 --> 01:47:08,159
inspire us to clean this code up a

2338
01:47:06,060 --> 01:47:11,670
little bit now that we kind of know

2339
01:47:08,159 --> 01:47:13,019
what's up there and that's good too I'm

2340
01:47:11,670 --> 01:47:14,520
not sure what this is complaining about

2341
01:47:13,020 --> 01:47:16,620
at the moment but I think that's because

2342
01:47:14,520 --> 01:47:18,510
I'd really it's probably just asserting

2343
01:47:16,619 --> 01:47:21,000
about something that we're doing I'm so

2344
01:47:18,510 --> 01:47:22,800
I would like to quickly switch back to

2345
01:47:21,000 --> 01:47:24,180
debug mode here just so I can get a

2346
01:47:22,800 --> 01:47:27,869
little bit perspective on what's going

2347
01:47:24,180 --> 01:47:31,280
wrong and see if I want to tackle it now

2348
01:47:27,869 --> 01:47:31,279
or wait till next time

2349
01:47:34,750 --> 01:47:41,800
so it looks like here we're getting some

2350
01:47:37,689 --> 01:47:48,189
kind of a output problem with our vertex

2351
01:47:41,800 --> 01:47:51,449
indices let me see what's going on so I

2352
01:47:48,189 --> 01:47:51,448
think that Oh

2353
01:48:06,670 --> 01:48:12,340
so we should probably this is sort of

2354
01:48:09,880 --> 01:48:15,310
separated we should probably fix that if

2355
01:48:12,340 --> 01:48:17,170
we go to output quads and they give us a

2356
01:48:15,310 --> 01:48:19,390
value of zero we should probably give

2357
01:48:17,170 --> 01:48:23,430
them back a value of zero as well so if

2358
01:48:19,390 --> 01:48:30,789
the index count or if the vertex count

2359
01:48:23,430 --> 01:48:39,880
equals zero and the index count equals

2360
01:48:30,789 --> 01:48:44,289
zero or I guess we should say in this

2361
01:48:39,880 --> 01:48:46,600
case then we go ahead right otherwise we

2362
01:48:44,289 --> 01:48:53,050
just give you back nothing because we

2363
01:48:46,600 --> 01:48:55,270
shouldn't ever probe there all right

2364
01:48:53,050 --> 01:48:57,460
let's now take a look at the next error

2365
01:48:55,270 --> 01:49:00,160
or well whatever they are actually good

2366
01:48:57,460 --> 01:49:01,600
okay so in this case in theory unless I

2367
01:49:00,159 --> 01:49:03,189
just screwed up that check now we should

2368
01:49:01,600 --> 01:49:06,280
actually be asking for some actual

2369
01:49:03,189 --> 01:49:07,809
indices yeah good um and so we gotta

2370
01:49:06,279 --> 01:49:09,279
make sure this code works properly I

2371
01:49:07,810 --> 01:49:11,289
kind of just like packed it together and

2372
01:49:09,279 --> 01:49:13,239
it's probably wrong but you can see here

2373
01:49:11,289 --> 01:49:15,010
we got the commands vertex count and

2374
01:49:13,239 --> 01:49:20,099
we're updating it I think the problem

2375
01:49:15,010 --> 01:49:20,100
here is that this entry

2376
01:49:30,719 --> 01:49:45,689
it looks kind of bogus oops it looks

2377
01:49:43,050 --> 01:49:47,519
like really bogus so if that's the

2378
01:49:45,689 --> 01:49:50,369
vertex and in x-rays offsets and there

2379
01:49:47,519 --> 01:49:57,360
at the base then how the heck could we

2380
01:49:50,368 --> 01:50:00,359
be that far in on the vertices in the in

2381
01:49:57,359 --> 01:50:03,688
the command stream right like that just

2382
01:50:00,359 --> 01:50:05,458
seems totally wrong and so that's just

2383
01:50:03,689 --> 01:50:07,409
suggest that something's busted here

2384
01:50:05,458 --> 01:50:10,529
right like it suggests that like I just

2385
01:50:07,408 --> 01:50:12,208
you know the way I'm thinking of this

2386
01:50:10,529 --> 01:50:16,469
thing is working is not correct right

2387
01:50:12,208 --> 01:50:18,868
because these things should be in order

2388
01:50:16,469 --> 01:50:20,429
for this to be true these things would

2389
01:50:18,868 --> 01:50:23,098
have to be quite different than they

2390
01:50:20,429 --> 01:50:25,918
were right because this is already

2391
01:50:23,099 --> 01:50:29,219
greater than it should be able to be in

2392
01:50:25,918 --> 01:50:30,599
that 65536 would have been a top value

2393
01:50:29,219 --> 01:50:32,550
before these things would have had to

2394
01:50:30,599 --> 01:50:34,110
advance and so the fact that those

2395
01:50:32,550 --> 01:50:36,090
things didn't advance doesn't really

2396
01:50:34,109 --> 01:50:38,998
make any sense and that's really the

2397
01:50:36,090 --> 01:50:40,739
part that that seems kind of strange so

2398
01:50:38,998 --> 01:50:42,988
given the index count was actually

2399
01:50:40,738 --> 01:50:45,928
passed something valid here I'm just not

2400
01:50:42,988 --> 01:50:52,319
sure what happened in there right if we

2401
01:50:45,929 --> 01:50:54,779
take a look inside that there we go if

2402
01:50:52,319 --> 01:50:57,599
we look inside here and see what's going

2403
01:50:54,779 --> 01:51:00,319
on you can see us sort of figuring out

2404
01:50:57,599 --> 01:51:00,319
what's going on

2405
01:51:11,630 --> 01:51:15,039
it doesn't look like

2406
01:51:31,878 --> 01:51:44,748
so I'll be honest I don't quite see how

2407
01:51:41,069 --> 01:51:44,748
this was supposed to work

2408
01:51:55,510 --> 01:52:04,420
so this is just wrong

2409
01:51:59,350 --> 01:52:06,989
and I guess I guess we just never hit

2410
01:52:04,420 --> 01:52:06,989
this case

2411
01:52:12,840 --> 01:52:21,639
I'm I'm not sure what's going on there

2412
01:52:16,630 --> 01:52:32,409
but this is actually pretty strange so

2413
01:52:21,639 --> 01:52:33,819
if you look at well okay mmm-hmm I guess

2414
01:52:32,408 --> 01:52:35,769
maybe I shouldn't say that maybe that

2415
01:52:33,819 --> 01:52:41,079
check is good enough I have to think

2416
01:52:35,770 --> 01:52:42,370
about it um no you know I don't think it

2417
01:52:41,079 --> 01:52:44,079
is so let's talk about that for a second

2418
01:52:42,369 --> 01:52:45,670
cuz I'm pretty sure that's just wrong um

2419
01:52:44,079 --> 01:52:47,500
so if you look at what happens during

2420
01:52:45,670 --> 01:52:49,149
get current clods you can see where

2421
01:52:47,500 --> 01:52:50,920
we're doing our check right here we're

2422
01:52:49,149 --> 01:52:55,869
saying look if we don't have a batch yet

2423
01:52:50,920 --> 01:52:58,179
start one basically right cuz that

2424
01:52:55,869 --> 01:52:59,800
that's happening here so if we do have a

2425
01:52:58,179 --> 01:53:01,539
batch take a look to see whether you

2426
01:52:59,800 --> 01:53:03,639
think we can fit these quads in the

2427
01:53:01,539 --> 01:53:10,810
batch or not but all we're looking to do

2428
01:53:03,639 --> 01:53:12,760
is say is the number of of quads that

2429
01:53:10,810 --> 01:53:14,770
we're pushing down this thing do we

2430
01:53:12,760 --> 01:53:17,230
think that's going to be you know higher

2431
01:53:14,770 --> 01:53:20,260
than then do we think it's gonna be too

2432
01:53:17,229 --> 01:53:21,519
high right and so if we look at how

2433
01:53:20,260 --> 01:53:23,710
we're computing that we're saying the

2434
01:53:21,520 --> 01:53:28,300
max number of quads or could be in a

2435
01:53:23,710 --> 01:53:30,698
batch is whatever the maximum 16-bit

2436
01:53:28,300 --> 01:53:32,079
value is divided by four because the

2437
01:53:30,698 --> 01:53:38,229
assumption is that's when the indices

2438
01:53:32,079 --> 01:53:41,469
would start to overflow right and I mean

2439
01:53:38,229 --> 01:53:45,579
I guess that's okay but it assumes that

2440
01:53:41,469 --> 01:53:47,649
we've never wasted any although I guess

2441
01:53:45,579 --> 01:53:50,229
that maybe is true so I don't know I

2442
01:53:47,649 --> 01:53:52,119
guess that is kind of true you shouldn't

2443
01:53:50,229 --> 01:53:55,448
if you didn't waste any you shouldn't be

2444
01:53:52,119 --> 01:53:57,039
able to exceed this but it's a little

2445
01:53:55,448 --> 01:53:59,099
dicey I'm gonna run it one more time and

2446
01:53:57,039 --> 01:54:01,569
see if I can see what's going on there

2447
01:53:59,100 --> 01:54:03,370
it's not really checking the thing I we

2448
01:54:01,569 --> 01:54:06,099
actually care about but it may be

2449
01:54:03,369 --> 01:54:10,599
sufficient so it's hard to say if we

2450
01:54:06,100 --> 01:54:12,610
take a look at output quads here that's

2451
01:54:10,600 --> 01:54:14,909
right on the crash you can see that

2452
01:54:12,609 --> 01:54:19,299
we're doing a safe truncate here and

2453
01:54:14,908 --> 01:54:22,119
when we look at what this value actually

2454
01:54:19,300 --> 01:54:25,000
is again the we're trying to compute the

2455
01:54:22,119 --> 01:54:28,630
base vertex value

2456
01:54:25,000 --> 01:54:32,020
and so how many quads do we actually

2457
01:54:28,630 --> 01:54:36,550
think we have sunk right the quad count

2458
01:54:32,020 --> 01:54:39,610
is 76 70 so the number of vertices

2459
01:54:36,550 --> 01:54:42,489
you know naively would be half that

2460
01:54:39,609 --> 01:54:44,409
right so I guess the question is well if

2461
01:54:42,489 --> 01:54:46,779
we then go and look at how many vertices

2462
01:54:44,409 --> 01:54:50,170
we've sunk it's way more than that so

2463
01:54:46,779 --> 01:54:52,029
the first question is why right so did

2464
01:54:50,170 --> 01:54:55,029
we mess something up so maybe we messed

2465
01:54:52,029 --> 01:54:56,979
something up and that's the answer but

2466
01:54:55,029 --> 01:54:59,289
let's take a look so when we're doing

2467
01:54:56,979 --> 01:55:00,909
vertex out and when we do our offsets

2468
01:54:59,289 --> 01:55:03,340
here is there something weird that's

2469
01:55:00,909 --> 01:55:05,590
happening where we're just recording way

2470
01:55:03,340 --> 01:55:07,029
too many vertices so you can see here

2471
01:55:05,590 --> 01:55:09,010
where we call advance we take however

2472
01:55:07,029 --> 01:55:12,609
many quads we think we did and we

2473
01:55:09,010 --> 01:55:14,680
multiply by six or by four four indices

2474
01:55:12,609 --> 01:55:17,229
and vertices that looks about correct

2475
01:55:14,680 --> 01:55:19,240
the same thing happens here we do output

2476
01:55:17,229 --> 01:55:21,339
quads we multiply by four and by 6 for

2477
01:55:19,239 --> 01:55:23,439
our vertex count and our index count and

2478
01:55:21,340 --> 01:55:25,840
you can see that happening here

2479
01:55:23,439 --> 01:55:28,089
so that again seems pretty reasonable

2480
01:55:25,840 --> 01:55:29,440
when we say get current quads what we

2481
01:55:28,090 --> 01:55:31,090
really should be doing is passing these

2482
01:55:29,439 --> 01:55:32,139
two values down so I guess if I say we

2483
01:55:31,090 --> 01:55:33,279
want to streamline this code a little

2484
01:55:32,140 --> 01:55:35,740
more but you can see if doing this

2485
01:55:33,279 --> 01:55:36,849
accent calculation we were doing here so

2486
01:55:35,739 --> 01:55:41,789
I really don't see that as being

2487
01:55:36,850 --> 01:55:47,400
particularly an issue so again I'm not

2488
01:55:41,789 --> 01:55:47,399
sure why we would be worried about this

2489
01:56:01,609 --> 01:56:07,849
so I'm not sure I'm seeing how we're

2490
01:56:04,670 --> 01:56:16,449
pushing that many how we're causing it

2491
01:56:07,850 --> 01:56:16,450
to to increase the number in such a way

2492
01:56:26,689 --> 01:56:32,070
this code isn't great and we should just

2493
01:56:29,519 --> 01:56:33,689
fix it but I still want to just see if I

2494
01:56:32,069 --> 01:56:38,698
can see what's wrong first before I

2495
01:56:33,689 --> 01:56:40,320
clean it up look I still don't see why

2496
01:56:38,698 --> 01:56:44,248
we're not getting a vertex or a offset

2497
01:56:40,319 --> 01:56:48,748
that increases it's like we're doing

2498
01:56:44,248 --> 01:57:06,149
something that somehow bypasses the

2499
01:56:48,748 --> 01:57:09,090
actual check so in draw a ground cover

2500
01:57:06,149 --> 01:57:12,478
right we call this once we Sam any quads

2501
01:57:09,090 --> 01:57:18,599
are which is correct once through each

2502
01:57:12,479 --> 01:57:22,369
of these we output the quad and then we

2503
01:57:18,599 --> 01:57:22,369
bail right

2504
01:57:28,529 --> 01:57:36,829
and I really don't see why that would be

2505
01:57:31,500 --> 01:57:40,680
causing a problem oh yes I do

2506
01:57:36,829 --> 01:57:43,859
so that right there is an advance on a

2507
01:57:40,680 --> 01:57:46,230
quad count it should have been one so

2508
01:57:43,859 --> 01:57:54,000
that's that's pretty much it so that was

2509
01:57:46,229 --> 01:57:57,449
just our our bad the implementation code

2510
01:57:54,000 --> 01:57:59,699
was not at fault we were all right

2511
01:57:57,449 --> 01:58:05,849
so still getting the same bug though so

2512
01:57:59,699 --> 01:58:08,639
we haven't fixed the problem that's a

2513
01:58:05,850 --> 01:58:10,230
bit weird how do we end up with good eye

2514
01:58:08,640 --> 01:58:14,940
not where you can do that not actually

2515
01:58:10,229 --> 01:58:17,659
rerun how do we end up with the same bug

2516
01:58:14,939 --> 01:58:17,659
with a different

2517
01:58:22,578 --> 01:58:25,939
right because that should have been

2518
01:58:24,198 --> 01:58:27,049
totally different should've got a very

2519
01:58:25,939 --> 01:58:28,879
different which should I got very

2520
01:58:27,050 --> 01:58:34,119
different numbers between those two so

2521
01:58:28,880 --> 01:58:34,118
that's a bit weird to say the least

2522
01:58:39,829 --> 01:58:46,369
right because correct me if I'm wrong

2523
01:58:41,609 --> 01:58:49,559
but that's like exactly the same values

2524
01:58:46,369 --> 01:58:53,069
which is ridiculous that should not be

2525
01:58:49,560 --> 01:58:54,600
possible between those two changes we

2526
01:58:53,069 --> 01:58:57,389
should have seen something something

2527
01:58:54,600 --> 01:59:05,210
change and the fact that we didn't is is

2528
01:58:57,390 --> 01:59:05,210
very perplexing so I think if we look at

2529
01:59:06,079 --> 01:59:15,960
what's going on in here for our advance

2530
01:59:08,970 --> 01:59:17,970
there although I guess all right I guess

2531
01:59:15,960 --> 01:59:20,760
that's not true because the advance is

2532
01:59:17,970 --> 01:59:21,300
only doing inside this so I guess that

2533
01:59:20,760 --> 01:59:24,869
makes sense

2534
01:59:21,300 --> 01:59:26,610
that was a bug but it's not V bug right

2535
01:59:24,869 --> 01:59:30,809
because this is the only thing that's

2536
01:59:26,609 --> 01:59:32,279
actually doing any advancing here so I

2537
01:59:30,810 --> 01:59:33,420
guess that makes sense and then this

2538
01:59:32,279 --> 01:59:36,420
code right here is the thing that

2539
01:59:33,420 --> 01:59:38,940
actually is doing that advance and so in

2540
01:59:36,420 --> 01:59:41,130
theory this should always match up with

2541
01:59:38,939 --> 01:59:43,379
what this thing is thinking but that's

2542
01:59:41,130 --> 01:59:47,789
really the only thing that we would

2543
01:59:43,380 --> 01:59:50,279
expect to have to check right so let's

2544
01:59:47,789 --> 01:59:55,859
take a look at whether that's actually

2545
01:59:50,279 --> 01:59:57,719
true each time through so if we take a

2546
01:59:55,859 --> 02:00:00,439
look at the entry it's the first time

2547
01:59:57,720 --> 02:00:03,050
through that we've done this right and

2548
02:00:00,439 --> 02:00:05,849
if we take a look at the commands here

2549
02:00:03,050 --> 02:00:09,300
and we look at how many indices were

2550
02:00:05,850 --> 02:00:12,150
actually we've actually gone you can see

2551
02:00:09,300 --> 02:00:16,250
that the first time we get in here we're

2552
02:00:12,149 --> 02:00:16,250
at 36 80 right

2553
02:00:22,079 --> 02:00:32,979
we're trying to add 256 vertices and 384

2554
02:00:27,670 --> 02:00:35,649
indices so we're gonna do that right and

2555
02:00:32,979 --> 02:00:38,949
we've done that and now this code

2556
02:00:35,649 --> 02:00:40,809
actually should work right because we're

2557
02:00:38,949 --> 02:00:48,729
gonna get a base index that's totally

2558
02:00:40,810 --> 02:00:53,830
reasonable there right so that all seems

2559
02:00:48,729 --> 02:00:55,119
fine and it's only gonna be the time I

2560
02:00:53,829 --> 02:00:58,409
guess where we come through where we

2561
02:00:55,119 --> 02:01:04,149
actually wrap it that this thing is not

2562
02:00:58,409 --> 02:01:07,569
properly producing the change you would

2563
02:01:04,149 --> 02:01:09,269
expect so as we come through here we

2564
02:01:07,569 --> 02:01:12,729
actually are streaming out vertices

2565
02:01:09,270 --> 02:01:15,820
possibly even correctly for quite some

2566
02:01:12,729 --> 02:01:19,559
time and then it's only when we actually

2567
02:01:15,819 --> 02:01:22,569
get to the one that would overflow right

2568
02:01:19,560 --> 02:01:27,700
do-do-do-do to do that we actually

2569
02:01:22,569 --> 02:01:29,829
trigger that that case and so it does

2570
02:01:27,699 --> 02:01:31,619
look like this is the problem of us and

2571
02:01:29,829 --> 02:01:34,720
get Garrett quads are not agreeing

2572
02:01:31,619 --> 02:01:35,949
because get current quads here is the

2573
02:01:34,720 --> 02:01:37,659
thing that needs to actually do this

2574
02:01:35,949 --> 02:01:39,010
work now we should merge these two

2575
02:01:37,659 --> 02:01:40,389
pieces of code is actually what should

2576
02:01:39,010 --> 02:01:44,050
be going on here but I wanted to buy it

2577
02:01:40,390 --> 02:01:46,150
first and then merge them next week so

2578
02:01:44,050 --> 02:01:50,170
the question is why is this not

2579
02:01:46,149 --> 02:01:56,489
triggering and oh do we just never

2580
02:01:50,170 --> 02:01:56,489
update that that's probably why

2581
02:02:03,809 --> 02:02:08,829
that's all so since it's triggering off

2582
02:02:06,969 --> 02:02:12,399
of the quad cap and we were just never

2583
02:02:08,828 --> 02:02:13,748
updating the clock out now you can see

2584
02:02:12,399 --> 02:02:15,339
how ugly this is because we're

2585
02:02:13,748 --> 02:02:17,380
constantly talking about quas we don't

2586
02:02:15,340 --> 02:02:19,300
actually care about quads we just care

2587
02:02:17,380 --> 02:02:20,590
about indices and vertices so we want to

2588
02:02:19,300 --> 02:02:22,920
kind of simplify that down so I keep

2589
02:02:20,590 --> 02:02:48,029
saying we should just fix this right

2590
02:02:22,920 --> 02:02:56,408
oops that's what I actually wanted right

2591
02:02:48,029 --> 02:02:57,849
and so yeah we just weren't updating the

2592
02:02:56,408 --> 02:02:59,288
quad count and the quad counts to think

2593
02:02:57,849 --> 02:03:00,788
that it actually cared about but we kind

2594
02:02:59,288 --> 02:03:02,498
of want to get away from that and so I

2595
02:03:00,788 --> 02:03:04,359
think we want to merge those code bases

2596
02:03:02,498 --> 02:03:05,679
those those code paths and just be

2597
02:03:04,359 --> 02:03:07,448
talking about vertices in indices from

2598
02:03:05,679 --> 02:03:09,399
now on because hey this thing could

2599
02:03:07,448 --> 02:03:12,518
render triangles just fine for the most

2600
02:03:09,399 --> 02:03:15,129
part and so we don't want to have it be

2601
02:03:12,519 --> 02:03:17,079
like requiring that okay so you can see

2602
02:03:15,130 --> 02:03:18,969
that we're now running correctly but we

2603
02:03:17,078 --> 02:03:21,038
don't actually get the output that we

2604
02:03:18,969 --> 02:03:22,868
expect and so there's a little more to

2605
02:03:21,038 --> 02:03:24,368
it than what we've got I'll take a quick

2606
02:03:22,868 --> 02:03:26,348
look at the debug but then we'll go to

2607
02:03:24,368 --> 02:03:28,779
questions because we could debug this

2608
02:03:26,349 --> 02:03:29,860
next week so the first thing I want to

2609
02:03:28,779 --> 02:03:32,380
take a look at is what are we actually

2610
02:03:29,859 --> 02:03:33,698
getting here for you know me you know

2611
02:03:32,380 --> 02:03:35,800
maybe the problem is in the actual

2612
02:03:33,698 --> 02:03:37,208
output but maybe the problem is that we

2613
02:03:35,800 --> 02:03:39,248
actually as computed complete crap

2614
02:03:37,208 --> 02:03:41,170
values for our ground cover and if

2615
02:03:39,248 --> 02:03:42,998
they're not actually in places we would

2616
02:03:41,170 --> 02:03:44,199
ever see and so the first thing I want

2617
02:03:42,998 --> 02:03:46,380
to check is just what are we sending

2618
02:03:44,198 --> 02:03:48,428
down right like what does that look like

2619
02:03:46,380 --> 02:03:50,050
so I'm gonna go ahead and take a look at

2620
02:03:48,429 --> 02:03:53,170
the drug ground cover and I'm just gonna

2621
02:03:50,050 --> 02:03:55,650
stop it right here and I'm gonna look at

2622
02:03:53,170 --> 02:03:57,788
what it actually sees you can see that

2623
02:03:55,649 --> 02:03:59,408
some of the times the texture handle

2624
02:03:57,788 --> 02:04:00,670
isn't valid so I'll stop on one where we

2625
02:03:59,408 --> 02:04:03,938
know we're actually getting a texture

2626
02:04:00,670 --> 02:04:07,149
handle right and then I'll stop kind of

2627
02:04:03,939 --> 02:04:08,829
right here so what what can we learn

2628
02:04:07,149 --> 02:04:13,438
from this like is the texture index

2629
02:04:08,828 --> 02:04:13,438
reasonable it is how are the UV values

2630
02:04:22,270 --> 02:04:28,869
UV values look totally fine well I mean

2631
02:04:25,899 --> 02:04:30,609
they look okay right I can't vouch for

2632
02:04:28,868 --> 02:04:32,170
them but they look like the kinds of

2633
02:04:30,609 --> 02:04:36,098
values we might see not sure what's

2634
02:04:32,170 --> 02:04:38,199
going on with the Watchmen no they're um

2635
02:04:36,099 --> 02:04:42,069
so that seems fine let's take a look at

2636
02:04:38,198 --> 02:04:43,238
the general cover struct itself we don't

2637
02:04:42,069 --> 02:04:45,880
really care at the normal is but it

2638
02:04:43,238 --> 02:04:48,448
looks right the bitmap we kind of know

2639
02:04:45,880 --> 02:04:51,868
was okay that's all that's just white

2640
02:04:48,448 --> 02:04:54,960
which is a fine you know non modulated

2641
02:04:51,868 --> 02:04:56,920
color so you know can't really be wrong

2642
02:04:54,960 --> 02:05:02,698
and then if we look at these p-values

2643
02:04:56,920 --> 02:05:02,699
here you know

2644
02:05:08,760 --> 02:05:21,750
um I don't think they're quite what I

2645
02:05:13,710 --> 02:05:23,850
expect them to be I'm okay I mean

2646
02:05:21,750 --> 02:05:24,329
they're not like obviously right they're

2647
02:05:23,850 --> 02:05:26,760
not

2648
02:05:24,329 --> 02:05:29,460
why would I expected I I might want to

2649
02:05:26,760 --> 02:05:36,329
take a quick look at what's going on

2650
02:05:29,460 --> 02:05:39,689
with those p-values so oops I want it to

2651
02:05:36,329 --> 02:05:44,309
feel unpacked entity I might just take a

2652
02:05:39,689 --> 02:05:46,169
look why is this is are these things

2653
02:05:44,310 --> 02:05:48,030
like upside down or something this this

2654
02:05:46,170 --> 02:05:51,720
should not and in fact that doesn't make

2655
02:05:48,029 --> 02:05:54,599
any sense that's not the way I was due

2656
02:05:51,720 --> 02:05:56,850
wanted these to get output so like this

2657
02:05:54,600 --> 02:05:59,789
is wrong it's not wrong in a way that

2658
02:05:56,850 --> 02:06:02,550
would cause the bug that we saw so you

2659
02:05:59,789 --> 02:06:06,029
know that's definitely something to keep

2660
02:06:02,550 --> 02:06:12,810
in mind but I actually wanted it to be

2661
02:06:06,029 --> 02:06:14,099
this so we're gonna do it that way now

2662
02:06:12,810 --> 02:06:15,120
it doesn't matter what those four points

2663
02:06:14,100 --> 02:06:17,489
are but you know that's what I was gonna

2664
02:06:15,119 --> 02:06:21,390
do so all right I don't know for a fact

2665
02:06:17,488 --> 02:06:23,939
that was not part of the problem but it

2666
02:06:21,390 --> 02:06:26,329
probably wasn't so we'll double-check

2667
02:06:23,939 --> 02:06:29,069
but I think that was just a minor

2668
02:06:26,329 --> 02:06:31,109
winding change nope that was apparently

2669
02:06:29,069 --> 02:06:32,909
pretty important all right so if you

2670
02:06:31,109 --> 02:06:35,219
look now it looks like our ground cover

2671
02:06:32,909 --> 02:06:37,139
is actually totally correct other than

2672
02:06:35,220 --> 02:06:39,510
the fact that the camera up Vector is

2673
02:06:37,140 --> 02:06:42,090
not right at the moment so we do need to

2674
02:06:39,510 --> 02:06:44,159
go set that but then I think we'll be in

2675
02:06:42,090 --> 02:06:46,470
good shape if we take a look at what our

2676
02:06:44,159 --> 02:06:48,539
clocks are now what we can see is that

2677
02:06:46,470 --> 02:06:51,510
well draw a ground cover is still pretty

2678
02:06:48,539 --> 02:06:54,000
expensive but remember this is in debug

2679
02:06:51,510 --> 02:06:56,489
mode so what I do want to do is just do

2680
02:06:54,000 --> 02:07:00,840
a quick Oh - and just see if we've

2681
02:06:56,488 --> 02:07:02,279
eliminated any of the problem and then

2682
02:07:00,840 --> 02:07:04,640
we can talk about the ground cover up

2683
02:07:02,279 --> 02:07:04,639
vector

2684
02:07:09,899 --> 02:07:14,409
okay so now you can see draw ground

2685
02:07:12,488 --> 02:07:17,198
cover is it's quite a bit better than it

2686
02:07:14,409 --> 02:07:19,448
was it's still not perfect right it's

2687
02:07:17,198 --> 02:07:22,210
still taking a little more time than I

2688
02:07:19,448 --> 02:07:25,419
would like but you can see that our

2689
02:07:22,210 --> 02:07:28,869
total time is actually quite a bit

2690
02:07:25,420 --> 02:07:30,850
better it's if we pause here you can see

2691
02:07:28,869 --> 02:07:32,948
that it's actually down where it used to

2692
02:07:30,850 --> 02:07:34,660
be and so even though this is taking

2693
02:07:32,948 --> 02:07:37,329
more time than I would like it to take

2694
02:07:34,659 --> 02:07:41,439
it's way faster than it was before it

2695
02:07:37,329 --> 02:07:44,050
was like quite a bit slower right so

2696
02:07:41,439 --> 02:07:45,339
we've sort of succeeded we got to change

2697
02:07:44,050 --> 02:07:47,920
the orientation of those things that

2698
02:07:45,340 --> 02:07:50,230
we've sort of succeeded partially we

2699
02:07:47,920 --> 02:07:52,440
probably could still do more than what

2700
02:07:50,229 --> 02:07:56,079
we've done but we're in good shape right

2701
02:07:52,439 --> 02:07:59,439
we're in pretty good shape alright so

2702
02:07:56,079 --> 02:08:02,229
we'll talk about the up Vector for now

2703
02:07:59,439 --> 02:08:05,649
what we can do is we'll cheese it I'll

2704
02:08:02,229 --> 02:08:06,819
just do this we'll run the game and

2705
02:08:05,649 --> 02:08:09,969
we'll just copy and whatever the up

2706
02:08:06,819 --> 02:08:11,409
Vector actually was right that's not a

2707
02:08:09,969 --> 02:08:13,500
good way to do it but we'll do that for

2708
02:08:11,409 --> 02:08:13,500
now

2709
02:08:19,270 --> 02:08:23,960
so here an update render worlds you can

2710
02:08:22,189 --> 02:08:25,369
see us producing our render group and

2711
02:08:23,960 --> 02:08:27,500
then we're gonna go down here and like

2712
02:08:25,369 --> 02:08:28,699
do some stuff and set the camera

2713
02:08:27,500 --> 02:08:31,279
transfer and then we're gonna actually

2714
02:08:28,699 --> 02:08:34,069
render the entities right so at some

2715
02:08:31,279 --> 02:08:37,239
point you know way down the line we'll

2716
02:08:34,069 --> 02:08:42,699
we do stuff like you know here let's say

2717
02:08:37,239 --> 02:08:45,649
and we would know that the camera up is

2718
02:08:42,699 --> 02:08:49,130
just gonna be whatever it is in here

2719
02:08:45,649 --> 02:08:50,989
right and so in the game X form I assume

2720
02:08:49,130 --> 02:08:52,489
that was this value right I don't

2721
02:08:50,989 --> 02:08:56,920
actually remember but you know what we

2722
02:08:52,489 --> 02:08:56,920
can just look so if we do get sprite

2723
02:08:58,180 --> 02:09:02,210
those are called sprite values for up

2724
02:09:00,710 --> 02:09:03,949
right yeah so if we go look at spray

2725
02:09:02,210 --> 02:09:06,560
graph right you can see the camera is

2726
02:09:03,949 --> 02:09:08,149
coming from game X from Y so really

2727
02:09:06,560 --> 02:09:11,050
we're just talking about game X form Y

2728
02:09:08,149 --> 02:09:13,339
this so it's it's this value literally

2729
02:09:11,050 --> 02:09:15,079
and so we can just go ahead and copy

2730
02:09:13,340 --> 02:09:21,590
those right so I can just copy that

2731
02:09:15,079 --> 02:09:25,159
value and say that you know it's that

2732
02:09:21,590 --> 02:09:27,140
and I can copy this value and say it's

2733
02:09:25,159 --> 02:09:30,199
that and now we actually have the

2734
02:09:27,140 --> 02:09:33,500
correct camera up vector in there right

2735
02:09:30,199 --> 02:09:36,649
and so now if we rebuild this in theory

2736
02:09:33,500 --> 02:09:39,500
when we run what we'll find is that we

2737
02:09:36,649 --> 02:09:40,819
should have the correct facing values

2738
02:09:39,500 --> 02:09:43,489
first rights although there could have

2739
02:09:40,819 --> 02:09:45,199
been another air in there right so we're

2740
02:09:43,489 --> 02:09:48,019
at least but that at least isn't the

2741
02:09:45,199 --> 02:09:50,659
problem anymore so presumably that's

2742
02:09:48,020 --> 02:09:53,060
correct now I looking at it I think it's

2743
02:09:50,659 --> 02:09:55,819
still a little wrong you can see it

2744
02:09:53,060 --> 02:09:57,710
looks a little sheared like do you see

2745
02:09:55,819 --> 02:09:59,899
how it looks a little sheared across the

2746
02:09:57,710 --> 02:10:04,130
top there so I think what's going on

2747
02:09:59,899 --> 02:10:07,279
there is our index output mmm it looks

2748
02:10:04,130 --> 02:10:09,170
like one of our quads is backwards and

2749
02:10:07,279 --> 02:10:11,809
so that you know we could also probably

2750
02:10:09,170 --> 02:10:13,220
fix fix that honestly let's take a look

2751
02:10:11,810 --> 02:10:14,660
at how those indices are being output

2752
02:10:13,220 --> 02:10:17,300
but that that's probably the only issue

2753
02:10:14,659 --> 02:10:20,029
there so I think we're almost there I'm

2754
02:10:17,300 --> 02:10:23,029
gonna set the debug out here I'm gonna

2755
02:10:20,029 --> 02:10:25,179
look at index out I just take a look at

2756
02:10:23,029 --> 02:10:25,179
it

2757
02:10:29,229 --> 02:10:42,829
that is not the way I set it up so it

2758
02:10:32,619 --> 02:10:46,180
actually should be that let's take a

2759
02:10:42,829 --> 02:10:46,180
look at that improves the situation

2760
02:10:47,680 --> 02:11:06,220
still looks wrong with those indices 0 1

2761
02:10:52,850 --> 02:11:10,250
2 3 4 5 that looks right that looks

2762
02:11:06,220 --> 02:11:13,480
right like what I would expect I do I

2763
02:11:10,250 --> 02:11:18,159
guess one of our P's could also be wrong

2764
02:11:13,479 --> 02:11:18,159
in which case that would explain the

2765
02:11:19,390 --> 02:11:26,240
that would explain that the problem but

2766
02:11:23,949 --> 02:11:28,250
yeah I'm not sure it really looks like

2767
02:11:26,239 --> 02:11:29,779
we're sheared there like we're missing

2768
02:11:28,250 --> 02:11:32,800
one of our things I wonder if one of our

2769
02:11:29,779 --> 02:11:32,800
p-value is wrong

2770
02:11:38,409 --> 02:11:41,898
[Music]

2771
02:11:48,179 --> 02:11:53,630
I don't immediately see it

2772
02:12:01,180 --> 02:12:16,750
I don't immediately see it oh yes I do

2773
02:12:12,720 --> 02:12:18,520
so again just the type of so yeah not

2774
02:12:16,750 --> 02:12:22,689
bad for a day's work I think we pretty

2775
02:12:18,520 --> 02:12:24,910
much got it and we kept that on the fast

2776
02:12:22,689 --> 02:12:26,349
path now so now our ground cover pretty

2777
02:12:24,909 --> 02:12:29,079
much looks the way it used to look I

2778
02:12:26,350 --> 02:12:32,140
don't see really any difference at the

2779
02:12:29,079 --> 02:12:34,149
moment and it's getting output in a nice

2780
02:12:32,140 --> 02:12:36,520
streamlined fashion so now like we're

2781
02:12:34,149 --> 02:12:38,429
not hurting for ground cover we're

2782
02:12:36,520 --> 02:12:41,110
getting a real nice throughput there and

2783
02:12:38,430 --> 02:12:43,450
if we look at our you know frame timings

2784
02:12:41,109 --> 02:12:49,769
they're they're really nice we're

2785
02:12:43,449 --> 02:12:49,769
keeping you know we're almost getting a

2786
02:12:51,000 --> 02:12:57,369
we could actually do a 120 Hertz at this

2787
02:12:54,489 --> 02:12:59,710
you know at this level so that's really

2788
02:12:57,369 --> 02:13:02,199
good at this stage when we haven't

2789
02:12:59,710 --> 02:13:05,020
pushed the optimization too hard so I'm

2790
02:13:02,199 --> 02:13:07,210
pretty happy about that and hopefully

2791
02:13:05,020 --> 02:13:09,240
that'll that'll stay one thing I'm not

2792
02:13:07,210 --> 02:13:12,069
happy about is it looks like our our

2793
02:13:09,239 --> 02:13:14,340
computation for where the word world

2794
02:13:12,069 --> 02:13:17,319
gets paged in isn't great it's too far

2795
02:13:14,340 --> 02:13:19,239
afield so we probably should adjust that

2796
02:13:17,319 --> 02:13:20,739
few region but that's not really

2797
02:13:19,239 --> 02:13:23,229
completely irrelevant

2798
02:13:20,739 --> 02:13:23,949
so anyway I think all that's looking

2799
02:13:23,229 --> 02:13:25,449
pretty good

2800
02:13:23,949 --> 02:13:27,819
I'm pretty happy with that let's go

2801
02:13:25,449 --> 02:13:30,210
ahead and go to the QA again I would

2802
02:13:27,819 --> 02:13:32,199
encourage you to try out the discord

2803
02:13:30,210 --> 02:13:33,939
instead of the twitch chat it's just

2804
02:13:32,199 --> 02:13:35,079
usually easier it's it's easier for

2805
02:13:33,939 --> 02:13:37,059
everybody and it's kind of more

2806
02:13:35,079 --> 02:13:39,630
permanent so you can use it offline

2807
02:13:37,060 --> 02:13:44,050
easier if you want to ask a question

2808
02:13:39,630 --> 02:13:45,880
head over to discord GG / Mali rocket if

2809
02:13:44,050 --> 02:13:48,070
you have a discord you can just go ahead

2810
02:13:45,880 --> 02:13:53,319
and join up there's a pound live Channel

2811
02:13:48,069 --> 02:13:55,769
and you could ask you know ask your

2812
02:13:53,319 --> 02:13:55,769
question there

2813
02:13:59,128 --> 02:14:06,668
all right so X 13 pixels actually that's

2814
02:14:03,788 --> 02:14:09,609
the fellow who wrote the debugger you

2815
02:14:06,668 --> 02:14:11,349
saw me use on Spain he's asking if

2816
02:14:09,609 --> 02:14:13,118
output quad should use an and rather

2817
02:14:11,349 --> 02:14:14,800
than an or or like what's the deal with

2818
02:14:13,118 --> 02:14:17,889
that and just to show you what he's

2819
02:14:14,800 --> 02:14:25,659
talking about um sorry it's this code

2820
02:14:17,889 --> 02:14:32,409
right here and uh yes so the answer

2821
02:14:25,658 --> 02:14:35,978
there is that I since I don't know how

2822
02:14:32,408 --> 02:14:38,828
this is about to be used no I wanted an

2823
02:14:35,979 --> 02:14:40,360
or the reason for that is what if

2824
02:14:38,828 --> 02:14:43,509
someone just wants to put some vertices

2825
02:14:40,359 --> 02:14:45,279
in the vertex stream and later they're

2826
02:14:43,510 --> 02:14:46,719
going to put indices that refer to those

2827
02:14:45,279 --> 02:14:50,559
and they just know what they're doing

2828
02:14:46,719 --> 02:14:52,418
right so while it's highly likely that

2829
02:14:50,559 --> 02:14:56,909
an and is probably something that we

2830
02:14:52,418 --> 02:14:59,800
could just do and it wouldn't matter I

2831
02:14:56,908 --> 02:15:03,069
don't really want to do that yet because

2832
02:14:59,800 --> 02:15:04,989
I don't feel super confident that I know

2833
02:15:03,069 --> 02:15:07,658
what we're gonna be doing so I just kept

2834
02:15:04,988 --> 02:15:11,618
it with the least intrusive one but yes

2835
02:15:07,658 --> 02:15:13,448
it totally would be fine right Balbus

2836
02:15:11,618 --> 02:15:15,158
asks so would the next step be to

2837
02:15:13,448 --> 02:15:17,918
instance the rendering of the ground

2838
02:15:15,158 --> 02:15:20,618
cover so there's a couple different

2839
02:15:17,918 --> 02:15:25,208
tacks you could take that depends on

2840
02:15:20,618 --> 02:15:28,558
what you want to do but basically yeah

2841
02:15:25,208 --> 02:15:32,438
if you wanted to make this even faster

2842
02:15:28,559 --> 02:15:36,189
because you started to run into problems

2843
02:15:32,439 --> 02:15:38,349
with transferring then in other words

2844
02:15:36,189 --> 02:15:40,749
right now we've taken a step of

2845
02:15:38,349 --> 02:15:43,899
optimizing just our handing this to the

2846
02:15:40,748 --> 02:15:45,609
graphics card right so we try to really

2847
02:15:43,899 --> 02:15:46,959
quickly write it into the vertex buffer

2848
02:15:45,609 --> 02:15:48,698
that's the dynamic for just buffer that

2849
02:15:46,958 --> 02:15:50,288
we render per frame but obviously

2850
02:15:48,698 --> 02:15:52,538
there's more information that really

2851
02:15:50,288 --> 02:15:55,090
needs to be there because frame to frame

2852
02:15:52,538 --> 02:15:59,529
we don't really change this stuff very

2853
02:15:55,090 --> 02:16:01,208
much right all we're really doing is

2854
02:15:59,529 --> 02:16:03,188
moving it based on where the entity

2855
02:16:01,208 --> 02:16:04,929
moves so if the enemy moves we offset it

2856
02:16:03,189 --> 02:16:07,840
but if that's just really one three

2857
02:16:04,929 --> 02:16:09,868
float value so we really could just send

2858
02:16:07,840 --> 02:16:11,729
just that three float value down

2859
02:16:09,868 --> 02:16:14,518
and so yeah if you were really concerned

2860
02:16:11,729 --> 02:16:16,019
about the transfer bandwidth of sending

2861
02:16:14,519 --> 02:16:17,820
down all the vertices for those clauses

2862
02:16:16,019 --> 02:16:21,030
to the graphics card the next thing you

2863
02:16:17,819 --> 02:16:23,368
would do is try to cache that stuff on

2864
02:16:21,029 --> 02:16:25,018
the graphics card so you'd create a

2865
02:16:23,368 --> 02:16:28,799
vertex buffer resident on the graphics

2866
02:16:25,019 --> 02:16:30,958
card when an entity came in and we undid

2867
02:16:28,800 --> 02:16:32,549
the unpack we would write the things

2868
02:16:30,958 --> 02:16:34,318
directly onto the graphics card and

2869
02:16:32,549 --> 02:16:36,028
leave them there and then when we go to

2870
02:16:34,318 --> 02:16:39,028
render we would just push on a thing

2871
02:16:36,029 --> 02:16:41,429
that says hey go render that thing and

2872
02:16:39,029 --> 02:16:43,738
here's the offset now there's a good

2873
02:16:41,429 --> 02:16:46,469
reason why don't do that right now it's

2874
02:16:43,738 --> 02:16:49,109
because that also does break up batches

2875
02:16:46,468 --> 02:16:50,698
right because at the moment we would

2876
02:16:49,109 --> 02:16:52,619
have to break up our batches to do that

2877
02:16:50,699 --> 02:16:55,019
and so if you really did want to move to

2878
02:16:52,619 --> 02:16:57,059
that system it's not as simple as I just

2879
02:16:55,019 --> 02:16:58,978
made it sound we would also have to

2880
02:16:57,058 --> 02:17:04,500
start moving to a system where we have a

2881
02:16:58,978 --> 02:17:08,329
fast indirect batch centralized dip loop

2882
02:17:04,500 --> 02:17:13,859
right so that you're always pushing down

2883
02:17:08,329 --> 02:17:16,260
like large chunks of two indices that

2884
02:17:13,859 --> 02:17:18,809
are like how many things to render with

2885
02:17:16,260 --> 02:17:20,760
what offset and it's like an indirect

2886
02:17:18,808 --> 02:17:23,398
rendering batch system so that we're not

2887
02:17:20,760 --> 02:17:26,130
hitting the API front-end too hard again

2888
02:17:23,398 --> 02:17:27,808
right because otherwise every every

2889
02:17:26,129 --> 02:17:29,339
sixty four quads we're switching our

2890
02:17:27,808 --> 02:17:30,420
batch for the ground cover and we don't

2891
02:17:29,340 --> 02:17:32,219
want that either

2892
02:17:30,420 --> 02:17:34,170
right so this as soon as you would

2893
02:17:32,218 --> 02:17:36,629
switch to the in test instance rendering

2894
02:17:34,170 --> 02:17:38,460
you're also then also creating a new

2895
02:17:36,629 --> 02:17:43,218
problem yourself that you would have to

2896
02:17:38,459 --> 02:17:47,938
solve right so you you kind of have to

2897
02:17:43,218 --> 02:17:49,318
be aware of that right and prime master

2898
02:17:47,939 --> 02:17:50,429
related question which is maybe it'll be

2899
02:17:49,318 --> 02:17:52,138
easier to do the upright sprite

2900
02:17:50,429 --> 02:17:56,969
calculation in the vertex shader instead

2901
02:17:52,138 --> 02:17:59,039
again same thing yes you can totally go

2902
02:17:56,968 --> 02:18:01,919
that route but you're gonna take on a

2903
02:17:59,040 --> 02:18:03,359
bunch of new work as well it's not as

2904
02:18:01,920 --> 02:18:05,040
simple as just in the vertex shader

2905
02:18:03,359 --> 02:18:07,079
because if you're doing in the vertex

2906
02:18:05,040 --> 02:18:10,290
shader that implies you've already got a

2907
02:18:07,079 --> 02:18:12,869
fast way of doing the dispatch that

2908
02:18:10,290 --> 02:18:15,179
allows you to switch those things Perce

2909
02:18:12,869 --> 02:18:17,489
right because that's changing Perce

2910
02:18:15,179 --> 02:18:20,340
right so and whether or not it even

2911
02:18:17,488 --> 02:18:23,369
happens is is curring per sprite so

2912
02:18:20,340 --> 02:18:25,739
again totally possible but not

2913
02:18:23,370 --> 02:18:27,090
you have to actually there's a bunch of

2914
02:18:25,739 --> 02:18:28,920
work involved which is why I'm not doing

2915
02:18:27,090 --> 02:18:31,439
it because until I know that we actually

2916
02:18:28,920 --> 02:18:32,939
want that it's we're inheriting a bunch

2917
02:18:31,439 --> 02:18:44,219
of work if we do that that we wouldn't

2918
02:18:32,939 --> 02:18:45,389
otherwise need right Ryan asks speaking

2919
02:18:44,218 --> 02:18:47,069
of getting the compiler to output the

2920
02:18:45,388 --> 02:18:48,898
right instructions I've been toying with

2921
02:18:47,069 --> 02:18:50,909
a lower level language assembly without

2922
02:18:48,898 --> 02:18:53,849
the friction really would love to hear

2923
02:18:50,909 --> 02:18:54,929
your thoughts I I really like the sound

2924
02:18:53,849 --> 02:18:57,380
of that

2925
02:18:54,929 --> 02:19:00,090
I'm not sure I can give it much thought

2926
02:18:57,379 --> 02:19:02,879
on spur of the moment but I could

2927
02:19:00,090 --> 02:19:08,269
certainly look at it offline here's

2928
02:19:02,879 --> 02:19:08,268
pastebin.com ml two TL e 8f

2929
02:19:46,889 --> 02:19:53,209
I would say it looks nice actually

2930
02:19:55,998 --> 02:19:59,828
I like where this is going

2931
02:20:00,340 --> 02:20:04,279
the only thing that came to mind when I

2932
02:20:02,539 --> 02:20:09,770
was looking at it was I was gonna say

2933
02:20:04,279 --> 02:20:14,658
don't be afraid of in fix notation right

2934
02:20:09,770 --> 02:20:18,498
the reason that see in fix notation

2935
02:20:14,658 --> 02:20:19,969
sucks is not because it's in fix

2936
02:20:18,498 --> 02:20:21,978
notation in fixed citation is a lot

2937
02:20:19,969 --> 02:20:23,590
easier to read than having to do like

2938
02:20:21,978 --> 02:20:26,868
all of this right

2939
02:20:23,590 --> 02:20:29,449
the reason see in fix notation sucks is

2940
02:20:26,869 --> 02:20:32,600
because it doesn't freaking define what

2941
02:20:29,449 --> 02:20:36,560
the assembly language is for it right so

2942
02:20:32,600 --> 02:20:38,600
one way you could think about it is I'd

2943
02:20:36,559 --> 02:20:40,038
forget C just forget I mean I'm talking

2944
02:20:38,600 --> 02:20:43,279
about C I'm just pointing it out it's

2945
02:20:40,039 --> 02:20:46,189
like a point of reference this is kind

2946
02:20:43,279 --> 02:20:48,709
of a little bit hard to read when does

2947
02:20:46,189 --> 02:20:51,828
it really need to be could you just have

2948
02:20:48,709 --> 02:20:54,829
a nice infix notation that cleanly maps

2949
02:20:51,828 --> 02:20:56,958
to these two a known set of things here

2950
02:20:54,828 --> 02:20:58,939
that would be easier to read so I don't

2951
02:20:56,959 --> 02:21:01,579
have to read like add Mull okay that's

2952
02:20:58,939 --> 02:21:03,498
do it right like join I'm saying so I

2953
02:21:01,578 --> 02:21:05,898
would encourage you to think about like

2954
02:21:03,498 --> 02:21:07,430
how do you make this easier to read what

2955
02:21:05,898 --> 02:21:10,608
it's actually doing while still

2956
02:21:07,430 --> 02:21:13,100
preserving an exact knowledge that it is

2957
02:21:10,609 --> 02:21:15,229
to mob's them all in an ad in this order

2958
02:21:13,100 --> 02:21:17,270
right because I think you can do that

2959
02:21:15,228 --> 02:21:19,248
you just have to be rigorous with the

2960
02:21:17,270 --> 02:21:21,350
way you specify how your operators work

2961
02:21:19,248 --> 02:21:23,389
in infix notation you can even have

2962
02:21:21,350 --> 02:21:28,158
these beading in fix notation like Mull

2963
02:21:23,389 --> 02:21:29,719
as opposed to x right so I'd say I like

2964
02:21:28,158 --> 02:21:31,100
where this is going maybe like I would

2965
02:21:29,719 --> 02:21:33,049
encourage you to think about can you

2966
02:21:31,100 --> 02:21:35,840
make it easier to read without taking

2967
02:21:33,049 --> 02:21:37,429
away any of the specificity because

2968
02:21:35,840 --> 02:21:39,260
that's where C really fell down they

2969
02:21:37,430 --> 02:21:41,420
made it a lot easier to read and as a

2970
02:21:39,260 --> 02:21:43,369
result it's much easier to type in but

2971
02:21:41,420 --> 02:21:44,869
you lose a lot of the guarantee because

2972
02:21:43,369 --> 02:21:45,949
a good pilot could do anything at once I

2973
02:21:44,869 --> 02:21:47,959
don't want the goodbye or anything it

2974
02:21:45,949 --> 02:21:49,609
wants I wanted to do what I want and we

2975
02:21:47,959 --> 02:21:53,840
lost that ability so the question would

2976
02:21:49,609 --> 02:21:56,899
be can you add a layer of readability on

2977
02:21:53,840 --> 02:21:59,359
top of this at you know maybe even keep

2978
02:21:56,898 --> 02:22:00,889
exact keep it so you can do exactly what

2979
02:21:59,359 --> 02:22:02,300
you've got here but is there a way to

2980
02:22:00,889 --> 02:22:04,519
also be able to write an infix

2981
02:22:02,299 --> 02:22:06,259
expression that's easier to read but

2982
02:22:04,520 --> 02:22:08,420
that someone who understands the

2983
02:22:06,260 --> 02:22:09,829
language knows exactly what it comes out

2984
02:22:08,420 --> 02:22:11,840
to be in

2985
02:22:09,829 --> 02:22:13,399
assembly that would be a really nice

2986
02:22:11,840 --> 02:22:15,469
addition to and somewhere that you could

2987
02:22:13,399 --> 02:22:17,090
add that that's a good value act right

2988
02:22:15,469 --> 02:22:18,799
that'd be my first thoughts I'm looking

2989
02:22:17,090 --> 02:22:20,270
at it that's all I've got off-the-cuff

2990
02:22:18,799 --> 02:22:23,329
for you but I like what you're doing I

2991
02:22:20,270 --> 02:22:24,829
think that's a great idea you know I

2992
02:22:23,329 --> 02:22:27,770
would love a better assembly language

2993
02:22:24,829 --> 02:22:29,329
because yeah register allocation not

2994
02:22:27,770 --> 02:22:31,280
really that important when we've got

2995
02:22:29,329 --> 02:22:36,530
sixteen registers flying around these

2996
02:22:31,280 --> 02:22:39,470
days right in X 32 I'm sorry in x86 x86

2997
02:22:36,530 --> 02:22:41,270
32 register allocation was a huge deal

2998
02:22:39,469 --> 02:22:43,129
and how you worked that out was a big

2999
02:22:41,270 --> 02:22:44,930
deal a lot of times now you've got

3000
02:22:43,129 --> 02:22:46,459
enough registers it's not clear how much

3001
02:22:44,930 --> 02:22:49,430
value there is to manually assigning

3002
02:22:46,459 --> 02:22:50,869
them most of the time right so should

3003
02:22:49,430 --> 02:22:52,489
there probably be a fallback in your

3004
02:22:50,870 --> 02:22:54,440
language for I want to explicitly assign

3005
02:22:52,489 --> 02:22:56,090
registers yes do we need them all the

3006
02:22:54,440 --> 02:22:57,710
time no and assembly language

3007
02:22:56,090 --> 02:22:59,059
unfortunately forced us to do it so what

3008
02:22:57,709 --> 02:23:01,250
you're the problem you're attacking here

3009
02:22:59,059 --> 02:23:02,389
I think is a good one let's get a little

3010
02:23:01,250 --> 02:23:03,860
bit of the cruft out of assembly

3011
02:23:02,389 --> 02:23:06,489
language but let's keep the good parts

3012
02:23:03,860 --> 02:23:13,000
great idea

3013
02:23:06,489 --> 02:23:13,000
I'm thumbs up any of their questions

3014
02:23:33,030 --> 02:23:36,460
do you ever feel like the veracity of

3015
02:23:35,020 --> 02:23:38,649
passing around and often use pointer

3016
02:23:36,459 --> 02:23:40,119
like game assets in hmmh is too much

3017
02:23:38,649 --> 02:23:43,920
hassle or do you find it's more

3018
02:23:40,120 --> 02:23:43,920
beneficial in the long run over a global

3019
02:23:47,728 --> 02:23:53,559
you know I'm I'm glad you asked that

3020
02:23:50,530 --> 02:24:01,780
question and I think the real answer is

3021
02:23:53,559 --> 02:24:13,600
that it is the answer is yes and yes the

3022
02:24:01,780 --> 02:24:16,239
answer is yes in general C and C++ have

3023
02:24:13,600 --> 02:24:25,899
a very hard time providing you the tools

3024
02:24:16,239 --> 02:24:34,500
that you actually need to to track how

3025
02:24:25,899 --> 02:24:34,500
things are used right a global variable

3026
02:24:35,670 --> 02:24:42,010
versus a function parameter are weak

3027
02:24:39,520 --> 02:24:44,649
ways of saying something about the

3028
02:24:42,010 --> 02:24:48,639
program and they conflate two different

3029
02:24:44,649 --> 02:24:50,559
things one is whether or not I want to

3030
02:24:48,639 --> 02:24:56,019
have to actually manually pass stuff

3031
02:24:50,559 --> 02:24:57,789
around in typing it in the other is

3032
02:24:56,020 --> 02:24:59,470
whether I want the compiler to pass it

3033
02:24:57,790 --> 02:25:04,300
for me right

3034
02:24:59,469 --> 02:25:06,639
and so C++ added only one extremely weak

3035
02:25:04,299 --> 02:25:08,409
version of this which is that in classes

3036
02:25:06,639 --> 02:25:11,260
that this pointer is automatically

3037
02:25:08,409 --> 02:25:13,539
passed for you why was that the only

3038
02:25:11,260 --> 02:25:15,880
thing that can be implicitly passed why

3039
02:25:13,540 --> 02:25:18,670
can't I just say that assets are

3040
02:25:15,879 --> 02:25:20,500
implicitly freaking passed right in my

3041
02:25:18,670 --> 02:25:26,020
game through functions that need them up

3042
02:25:20,500 --> 02:25:27,850
the call chain right and the answer is

3043
02:25:26,020 --> 02:25:28,750
because the people who write these specs

3044
02:25:27,850 --> 02:25:30,850
don't really know what they're doing

3045
02:25:28,750 --> 02:25:33,489
right they don't think through what is a

3046
02:25:30,850 --> 02:25:35,500
feature versus what is a specific use

3047
02:25:33,489 --> 02:25:37,059
case somewhere and so what they tend to

3048
02:25:35,500 --> 02:25:39,069
implement as language features are

3049
02:25:37,059 --> 02:25:43,119
actually specific use cases not language

3050
02:25:39,069 --> 02:25:44,559
features and that's why you get this

3051
02:25:43,120 --> 02:25:46,479
thing of like should this be a global

3052
02:25:44,559 --> 02:25:48,100
should it not up

3053
02:25:46,478 --> 02:25:51,038
written language would never have to ask

3054
02:25:48,100 --> 02:25:53,828
that question right you would never have

3055
02:25:51,039 --> 02:25:56,680
really anything be global unless you

3056
02:25:53,828 --> 02:25:58,420
didn't want to compute the address of it

3057
02:25:56,680 --> 02:26:03,369
off a pointer so it would be about

3058
02:25:58,420 --> 02:26:06,609
performance right not about whether it

3059
02:26:03,369 --> 02:26:08,380
was a hassle to type or not so really

3060
02:26:06,609 --> 02:26:10,449
the answer to your question is that I

3061
02:26:08,379 --> 02:26:13,299
tend to pass things around because I

3062
02:26:10,449 --> 02:26:15,340
would like to know about the chains in

3063
02:26:13,299 --> 02:26:17,288
which they are used it's sort of like a

3064
02:26:15,340 --> 02:26:18,578
functional programming style that's not

3065
02:26:17,289 --> 02:26:20,640
really functional programming but it's

3066
02:26:18,578 --> 02:26:22,658
part of it right

3067
02:26:20,639 --> 02:26:26,068
should the language have made that

3068
02:26:22,658 --> 02:26:27,998
easier yes did it no and here we are I

3069
02:26:26,068 --> 02:26:30,248
think you may have missed progress

3070
02:26:27,998 --> 02:26:33,248
question or maybe I missed the answer

3071
02:26:30,248 --> 02:26:35,379
you missed the answer platen 21 how

3072
02:26:33,248 --> 02:26:37,568
would you go about breakable surfaces

3073
02:26:35,379 --> 02:26:41,078
not like an evocative style that's

3074
02:26:37,568 --> 02:26:44,038
pretty off topic and depends quite a bit

3075
02:26:41,078 --> 02:26:44,038
on what you're talking about

3076
02:26:45,090 --> 02:26:54,039
breakable surfaces there's many many

3077
02:26:50,228 --> 02:26:55,090
things you can move mean by that and it

3078
02:26:54,039 --> 02:26:56,770
really depends on what you're trying to

3079
02:26:55,090 --> 02:26:58,689
do there are many many research papers

3080
02:26:56,770 --> 02:27:00,939
on this topic I would encourage you

3081
02:26:58,689 --> 02:27:02,439
probably to read them there was one

3082
02:27:00,939 --> 02:27:08,889
pretty recently that was pretty cool

3083
02:27:02,439 --> 02:27:11,998
actually I don't know if you saw it it

3084
02:27:08,889 --> 02:27:11,998
was cold

3085
02:27:47,200 --> 02:27:58,620
oh man I wish the web were good

3086
02:28:04,379 --> 02:28:06,409
Oh

3087
02:28:44,568 --> 02:28:54,498
they're my mechanical that's what I

3088
02:28:47,119 --> 02:28:56,600
wanted never remember the names of these

3089
02:28:54,498 --> 02:29:04,998
things any marks my my brain is too old

3090
02:28:56,600 --> 02:29:06,109
it's weird how you look I used to

3091
02:29:04,998 --> 02:29:07,430
remember everything and now I remember

3092
02:29:06,109 --> 02:29:10,430
very few things it's it's unfortunate

3093
02:29:07,430 --> 02:29:13,039
that's just how your brain goes here

3094
02:29:10,430 --> 02:29:14,960
yeah in this paper we present a material

3095
02:29:13,039 --> 02:29:17,390
point method for visual simulations of

3096
02:29:14,959 --> 02:29:20,118
baking bread cookies pancakes and

3097
02:29:17,389 --> 02:29:22,908
similar materials our model is capable

3098
02:29:20,119 --> 02:29:24,529
of capturing characteristic dynamics of

3099
02:29:22,908 --> 02:29:27,889
materials under baking or cooking

3100
02:29:24,529 --> 02:29:31,670
process such as melting rising cracking

3101
02:29:27,889 --> 02:29:33,379
and solidification here we show baking 3

3102
02:29:31,670 --> 02:29:35,689
loaves of bread with different slip

3103
02:29:33,379 --> 02:29:37,578
patterns or with no slit the dough

3104
02:29:35,689 --> 02:29:44,720
expands and the slits open up during

3105
02:29:37,578 --> 02:29:50,209
baking and now we tear one of them open

3106
02:29:44,719 --> 02:29:51,920
in this example we bake a tray of

3107
02:29:50,209 --> 02:29:55,809
cookies with varying amounts of

3108
02:29:51,920 --> 02:29:55,809
leavening agent and oven temperatures

3109
02:29:56,859 --> 02:30:02,149
now we pour pancake batter into a pen

3110
02:29:59,869 --> 02:30:07,670
cook it and then flip when the bottom of

3111
02:30:02,148 --> 02:30:09,858
the pancake is solidified in this

3112
02:30:07,670 --> 02:30:12,559
example we roast a marshmallow on the

3113
02:30:09,859 --> 02:30:14,988
stovetop the marshmallow is initialized

3114
02:30:12,559 --> 02:30:17,090
as a homogeneous material and we're able

3115
02:30:14,988 --> 02:30:18,889
to result the distinct textures of its

3116
02:30:17,090 --> 02:30:25,639
solid crust and melted Center after

3117
02:30:18,889 --> 02:30:28,309
roasting we model the material as a

3118
02:30:25,639 --> 02:30:30,049
solid water and gas mixture and keep

3119
02:30:28,309 --> 02:30:32,180
track of the heat transfer water

3120
02:30:30,049 --> 02:30:33,528
diffusion as well as chemical reaction

3121
02:30:32,180 --> 02:30:36,979
that take place during the baking

3122
02:30:33,529 --> 02:30:40,488
process the solid phase is modeled as a

3123
02:30:36,978 --> 02:30:42,469
thermal viscoelastic plastic material we

3124
02:30:40,488 --> 02:30:44,618
use a modified temperature and porosity

3125
02:30:42,469 --> 02:30:47,358
dependent chemical a yield condition a

3126
02:30:44,619 --> 02:30:49,819
more porous solid mixture it will have a

3127
02:30:47,359 --> 02:30:52,399
smaller cohesion limit and in the limit

3128
02:30:49,818 --> 02:30:55,519
of zero porosity we get a von Mises type

3129
02:30:52,398 --> 02:30:57,709
yield condition visco plasticity

3130
02:30:55,520 --> 02:30:58,069
replaces the hard constraint that the

3131
02:30:57,709 --> 02:31:00,198
straw

3132
02:30:58,068 --> 02:31:02,930
cannot be outside the yield surface to a

3133
02:31:00,199 --> 02:31:05,060
penalty term instead instead of

3134
02:31:02,930 --> 02:31:07,100
projecting the trial stresses back on to

3135
02:31:05,059 --> 02:31:09,049
the yield surface they are projected

3136
02:31:07,100 --> 02:31:11,959
along the same directions but only a

3137
02:31:09,049 --> 02:31:13,849
portion of the distance we demonstrate

3138
02:31:11,959 --> 02:31:16,399
the effect of viscosity with a dough

3139
02:31:13,850 --> 02:31:18,738
stretching and twisting example higher

3140
02:31:16,398 --> 02:31:21,019
viscosity makes the mixture more sticky

3141
02:31:18,738 --> 02:31:25,100
which matches the rheological properties

3142
02:31:21,020 --> 02:31:27,109
of dough here we demonstrate one of so

3143
02:31:25,100 --> 02:31:31,309
anyway you can go watch this in its

3144
02:31:27,109 --> 02:31:33,770
entirety but not suggesting you probably

3145
02:31:31,309 --> 02:31:34,878
want to do most of that in real time

3146
02:31:33,770 --> 02:31:36,550
because you're probably gonna have your

3147
02:31:34,879 --> 02:31:40,039
work cut out for you but point being

3148
02:31:36,549 --> 02:31:42,618
there's tons of these the research

3149
02:31:40,039 --> 02:31:45,939
community publishes many many many many

3150
02:31:42,619 --> 02:31:49,609
many papers on breakable surfaces and

3151
02:31:45,939 --> 02:31:51,318
the bottom line is what you need and how

3152
02:31:49,609 --> 02:31:52,609
complex that has to be depends a lot on

3153
02:31:51,318 --> 02:31:54,350
what you're trying to simulate if you

3154
02:31:52,609 --> 02:31:56,988
just want things to fracture in any old

3155
02:31:54,350 --> 02:32:00,168
random way you can just split them with

3156
02:31:56,988 --> 02:32:02,628
a plane and many times as you want right

3157
02:32:00,168 --> 02:32:04,128
carve them up and then use those chunks

3158
02:32:02,629 --> 02:32:05,829
it's a constructive solid geometry kind

3159
02:32:04,129 --> 02:32:08,149
of operation and you could do it right

3160
02:32:05,828 --> 02:32:10,398
if you actually want some kind of

3161
02:32:08,148 --> 02:32:12,168
simulation as to this is supposed to

3162
02:32:10,398 --> 02:32:14,448
behave like an actual material like with

3163
02:32:12,168 --> 02:32:16,520
brittle fracture and cracks that spread

3164
02:32:14,449 --> 02:32:18,439
and all that sort of stuff then you're

3165
02:32:16,520 --> 02:32:19,430
in the finite element methods and

3166
02:32:18,439 --> 02:32:22,129
there's a lot of different ways you can

3167
02:32:19,430 --> 02:32:24,588
do them but you need to start learning

3168
02:32:22,129 --> 02:32:26,119
some real physics and you know you have

3169
02:32:24,588 --> 02:32:27,350
to scale back the problem based on what

3170
02:32:26,119 --> 02:32:29,359
you can actually do in real time I was

3171
02:32:27,350 --> 02:32:31,640
because for games different than in a

3172
02:32:29,359 --> 02:32:33,050
research paper but that's the basic idea

3173
02:32:31,639 --> 02:32:34,128
and I think I said there's a lot of them

3174
02:32:33,049 --> 02:32:38,498
that was a recent one that came out that

3175
02:32:34,129 --> 02:32:42,609
was pretty cool but basically you know

3176
02:32:38,498 --> 02:32:42,609
it depends what you want

3177
02:32:46,591 --> 02:32:49,899
early in the series said you want to try

3178
02:32:48,851 --> 02:32:52,001
to make your own math up since we've

3179
02:32:49,899 --> 02:32:54,761
gotten around doing that yet I only sine

3180
02:32:52,001 --> 02:32:58,120
and cosine still remain we those are the

3181
02:32:54,761 --> 02:33:00,881
only two things we call and we

3182
02:32:58,120 --> 02:33:02,829
eventually will replace them but I just

3183
02:33:00,880 --> 02:33:04,239
haven't been motivated to go look at

3184
02:33:02,829 --> 02:33:05,501
that because we just had much bigger

3185
02:33:04,239 --> 02:33:06,671
things to worry about

3186
02:33:05,501 --> 02:33:08,319
whereas those are kind of a known

3187
02:33:06,671 --> 02:33:09,819
quantity it's like you can always

3188
02:33:08,319 --> 02:33:11,289
replace sine and cosine

3189
02:33:09,819 --> 02:33:12,579
I mean you can even just cut and paste

3190
02:33:11,290 --> 02:33:14,561
one off the web there's so many of them

3191
02:33:12,579 --> 02:33:16,091
so I know that won't be much of an issue

3192
02:33:14,560 --> 02:33:17,890
when we go to do it but we will have to

3193
02:33:16,091 --> 02:33:20,110
discuss it a bunch because we're gonna

3194
02:33:17,890 --> 02:33:21,489
have to do it from scratch right and so

3195
02:33:20,110 --> 02:33:23,079
I just haven't been motivated to

3196
02:33:21,489 --> 02:33:25,181
actually spend the time on that as

3197
02:33:23,079 --> 02:33:27,521
opposed to other things but those are

3198
02:33:25,181 --> 02:33:29,230
the only two functions that we didn't

3199
02:33:27,521 --> 02:33:31,480
implement ourselves everything else we

3200
02:33:29,229 --> 02:33:32,921
did so we're still calling the old sine

3201
02:33:31,479 --> 02:33:34,390
and cosine and we'll call the new sine

3202
02:33:32,921 --> 02:33:37,649
and cosine

3203
02:33:34,390 --> 02:33:37,649
once we implement them

3204
02:33:49,530 --> 02:33:57,989
all righty I think that's about it let's

3205
02:33:54,840 --> 02:33:59,250
wrap it up here thank you everyone for

3206
02:33:57,989 --> 02:34:00,510
joining me for this on a handmade hero

3207
02:33:59,250 --> 02:34:02,280
sort of pleasure coating with you as

3208
02:34:00,510 --> 02:34:03,630
always if you would like to follow along

3209
02:34:02,280 --> 02:34:06,060
with series at home you can always peer

3210
02:34:03,629 --> 02:34:07,649
to the game on handmade hero org and it

3211
02:34:06,059 --> 02:34:10,170
comes with a source code so that you can

3212
02:34:07,649 --> 02:34:12,659
play around with it yourself and do your

3213
02:34:10,170 --> 02:34:14,460
own experimentation we also have a

3214
02:34:12,659 --> 02:34:17,760
discard now I'll be putting some links

3215
02:34:14,459 --> 02:34:18,809
to that up as we go but if you do want

3216
02:34:17,760 --> 02:34:21,120
to go to the discord

3217
02:34:18,809 --> 02:34:22,889
that's just discord GG slash Molly

3218
02:34:21,120 --> 02:34:26,820
Rocket it's got all of our stuff on

3219
02:34:22,889 --> 02:34:29,369
there and you can go ahead and log on to

3220
02:34:26,819 --> 02:34:30,719
that and chat offline as well it's a lot

3221
02:34:29,370 --> 02:34:31,860
better than the Twitter chat because it

3222
02:34:30,719 --> 02:34:33,629
kind of persists and there's also

3223
02:34:31,860 --> 02:34:34,860
different channels in there so if you're

3224
02:34:33,629 --> 02:34:36,539
trying to talk about something general

3225
02:34:34,860 --> 02:34:37,470
you can go to the general tab we're

3226
02:34:36,540 --> 02:34:38,940
going to talk about something general

3227
02:34:37,469 --> 02:34:40,199
technical lingo the technical tab if

3228
02:34:38,940 --> 02:34:42,569
you're trying to ask questions live go

3229
02:34:40,200 --> 02:34:43,890
to the live tab it just helps it's a lot

3230
02:34:42,569 --> 02:34:46,709
better than the twitch chat for

3231
02:34:43,889 --> 02:34:48,750
interacting with the folks and also I

3232
02:34:46,709 --> 02:34:51,119
pop on there to moderate it from time to

3233
02:34:48,750 --> 02:34:52,709
time to keep things civil which i think

3234
02:34:51,120 --> 02:34:55,680
is also a good thing just to make sure

3235
02:34:52,709 --> 02:34:57,000
that everything is it's Pleasant so I'd

3236
02:34:55,680 --> 02:34:58,920
highly recommend you check that out to

3237
02:34:57,000 --> 02:35:00,899
been working pretty well so far and we'd

3238
02:34:58,920 --> 02:35:02,159
like to get that to a point where it's

3239
02:35:00,899 --> 02:35:05,190
nice and stable and everyone's happy

3240
02:35:02,159 --> 02:35:08,670
with it so do pop in there and give us

3241
02:35:05,190 --> 02:35:10,230
our feedback as necessary I noticed

3242
02:35:08,670 --> 02:35:11,729
someone was mentioning that discord is

3243
02:35:10,229 --> 02:35:13,529
great but we can't live without in sebat

3244
02:35:11,729 --> 02:35:14,939
I agree it would be nice if in Cevat

3245
02:35:13,530 --> 02:35:17,340
became a discord bought at some point

3246
02:35:14,940 --> 02:35:18,960
but you know beggars can't be choosers

3247
02:35:17,340 --> 02:35:20,760
so we'll see what happens

3248
02:35:18,959 --> 02:35:22,409
that's it for today I'll be back here

3249
02:35:20,760 --> 02:35:25,409
next week when we're going to take a

3250
02:35:22,409 --> 02:35:27,329
look at putting lighting in we've

3251
02:35:25,409 --> 02:35:28,319
finished streamlining that process so

3252
02:35:27,329 --> 02:35:30,270
now we're gonna put in some lighting

3253
02:35:28,319 --> 02:35:33,090
evaluators into our pixel shaders we're

3254
02:35:30,270 --> 02:35:34,680
gonna see how much cost we incur from

3255
02:35:33,090 --> 02:35:35,850
doing that that'll start to go summer

3256
02:35:34,680 --> 02:35:38,670
perspective on what we're gonna have to

3257
02:35:35,850 --> 02:35:40,739
do because now unlike the previous pass

3258
02:35:38,670 --> 02:35:41,700
and lighting that we did this pass on

3259
02:35:40,739 --> 02:35:42,899
lighting is literally gonna light

3260
02:35:41,700 --> 02:35:46,829
everything it's gonna light all the

3261
02:35:42,899 --> 02:35:48,750
sprites as well as the rooms so we're

3262
02:35:46,829 --> 02:35:51,899
really gonna be stressing that lighting

3263
02:35:48,750 --> 02:35:53,309
path a lot a lot more than we were and

3264
02:35:51,899 --> 02:35:54,359
we're gonna have to see how that affects

3265
02:35:53,309 --> 02:35:56,129
our performance and we're gonna have to

3266
02:35:54,360 --> 02:35:57,210
take the corrective actions necessary to

3267
02:35:56,129 --> 02:35:59,069
make sure that everything still runs

3268
02:35:57,209 --> 02:36:00,739
smoothly we want this game to run around

3269
02:35:59,069 --> 02:36:03,229
60 frames a second on a good

3270
02:36:00,739 --> 02:36:05,209
gene so we need to keep our you know

3271
02:36:03,229 --> 02:36:08,899
within the budget for that that's about

3272
02:36:05,209 --> 02:36:11,720
it until next time thanks for joining us

3273
02:36:08,899 --> 02:36:14,379
and I will see everyone on the Internet

3274
02:36:11,720 --> 02:36:14,379
take it easy everybody

