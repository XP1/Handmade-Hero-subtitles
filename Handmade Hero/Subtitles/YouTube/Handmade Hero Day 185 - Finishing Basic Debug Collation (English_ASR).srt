1
00:00:00,350 --> 00:00:04,379
hello everyone and welcome to handmade

2
00:00:02,669 --> 00:00:09,839
Hero the show where we could a complete

3
00:00:04,379 --> 00:00:11,669
game live on Twitch you know today I'm

4
00:00:09,839 --> 00:00:15,030
hoping that we can do something kind of

5
00:00:11,669 --> 00:00:17,879
fun with our with our debug system

6
00:00:15,029 --> 00:00:19,259
because we had to do a bunch of work we

7
00:00:17,879 --> 00:00:21,239
were making something to analyze the

8
00:00:19,260 --> 00:00:22,529
running of our program and you know we

9
00:00:21,239 --> 00:00:24,268
kind of did something that I think is

10
00:00:22,528 --> 00:00:26,789
pretty cool we're actually now tracking

11
00:00:24,268 --> 00:00:29,879
a heck of a lot of information about the

12
00:00:26,789 --> 00:00:31,710
running of the program and we sort of on

13
00:00:29,879 --> 00:00:33,600
Friday just did the work to kind of

14
00:00:31,710 --> 00:00:35,340
start collating it but we haven't had a

15
00:00:33,600 --> 00:00:37,530
chance to really see what that data

16
00:00:35,340 --> 00:00:39,920
actually says because we only just got

17
00:00:37,530 --> 00:00:41,850
the basics of collation in and we

18
00:00:39,920 --> 00:00:43,890
essentially collect a ton of information

19
00:00:41,850 --> 00:00:45,390
but don't have much in the way of any

20
00:00:43,890 --> 00:00:47,489
kind of visualization to see what it all

21
00:00:45,390 --> 00:00:49,530
means and so I'm kind of looking forward

22
00:00:47,488 --> 00:00:52,049
to this week because I think this you

23
00:00:49,530 --> 00:00:54,058
know we kind of had to do a bunch of

24
00:00:52,049 --> 00:00:56,578
work to under the hood to make it all of

25
00:00:54,058 --> 00:00:58,378
the actual data get collected properly

26
00:00:56,579 --> 00:00:59,878
and so now I think this will be kind of

27
00:00:58,378 --> 00:01:01,558
a more fun part where we get to start

28
00:00:59,878 --> 00:01:04,649
seeing a little bit more about how our

29
00:01:01,558 --> 00:01:06,359
program is working and kind of get the

30
00:01:04,650 --> 00:01:09,060
payoffs of having done that work if you

31
00:01:06,359 --> 00:01:11,700
will I'm gonna go ahead and get started

32
00:01:09,060 --> 00:01:14,189
if you want to follow along today is day

33
00:01:11,700 --> 00:01:17,129
185 and so if you want to follow along

34
00:01:14,188 --> 00:01:19,199
day 184 a source code is the source code

35
00:01:17,129 --> 00:01:20,459
that you want to unpack if you're

36
00:01:19,200 --> 00:01:25,859
someone who has spirit of the game on

37
00:01:20,459 --> 00:01:27,769
handmade here at work so taking a look

38
00:01:25,859 --> 00:01:31,289
at where we left off we had just sort of

39
00:01:27,769 --> 00:01:33,298
we typed in some collation code but I

40
00:01:31,290 --> 00:01:35,400
don't think we'd ever actually run it or

41
00:01:33,299 --> 00:01:37,500
check to see if it was at all valid I

42
00:01:35,400 --> 00:01:39,150
don't actually remember to be honest

43
00:01:37,500 --> 00:01:42,719
with you I do not remember what we did

44
00:01:39,150 --> 00:01:45,630
on Friday I don't even know if we ran it

45
00:01:42,719 --> 00:01:47,548
maybe we ran it yeah so it looks like we

46
00:01:45,629 --> 00:01:50,459
have not actually ran it yet we would

47
00:01:47,549 --> 00:01:53,610
have assuredly saw that it looks like

48
00:01:50,459 --> 00:01:57,059
our current frame is zero-- here and so

49
00:01:53,609 --> 00:01:58,859
yeah obviously this this bit where we

50
00:01:57,060 --> 00:02:02,009
actually get a new frame for collation

51
00:01:58,859 --> 00:02:03,599
we have not actually we have not

52
00:02:02,009 --> 00:02:05,759
actually done the work to actually have

53
00:02:03,599 --> 00:02:08,280
any anything in that frame so frames is

54
00:02:05,759 --> 00:02:10,259
0 so whenever we get a new frame from

55
00:02:08,280 --> 00:02:11,340
there it's it's going to be garbage and

56
00:02:10,258 --> 00:02:13,539
then we're going to write to it which is

57
00:02:11,340 --> 00:02:16,090
going to crash so a

58
00:02:13,539 --> 00:02:17,858
this point we just want to kind of again

59
00:02:16,090 --> 00:02:20,468
no mystery here we just want to go in

60
00:02:17,859 --> 00:02:22,420
and just finish the code we you know

61
00:02:20,468 --> 00:02:23,019
like I said we had started it it's not

62
00:02:22,419 --> 00:02:25,149
done yet

63
00:02:23,019 --> 00:02:26,109
and so we kind of want to finish up the

64
00:02:25,150 --> 00:02:27,218
code which is easier said than done

65
00:02:26,109 --> 00:02:31,150
because of course I don't remember what

66
00:02:27,218 --> 00:02:32,650
we were doing it's been a while yeah had

67
00:02:31,150 --> 00:02:34,658
a lot of work to do over the weekend and

68
00:02:32,650 --> 00:02:37,900
so and then work to do today and so it's

69
00:02:34,658 --> 00:02:39,878
been you know it's been paged out but

70
00:02:37,900 --> 00:02:43,658
here is our debug frame frames and if

71
00:02:39,878 --> 00:02:46,090
you remember what we decided to do is we

72
00:02:43,658 --> 00:02:48,128
have essentially a debug scratchpad a

73
00:02:46,090 --> 00:02:50,200
bunch of memory we can just use to do

74
00:02:48,128 --> 00:02:52,179
whatever we want in and it just gets

75
00:02:50,199 --> 00:02:54,009
thrown away every frame so we can just

76
00:02:52,180 --> 00:02:56,980
we just do it everyone at party on it

77
00:02:54,009 --> 00:02:59,199
and then it just gets reset basically so

78
00:02:56,979 --> 00:03:01,899
when we're in there when we initialize

79
00:02:59,199 --> 00:03:04,149
everything right at the beginning right

80
00:03:01,900 --> 00:03:05,680
here we begin the temporary memory and

81
00:03:04,150 --> 00:03:07,450
then we call collate debug records

82
00:03:05,680 --> 00:03:09,188
collate debug records has the ability to

83
00:03:07,449 --> 00:03:11,018
basically use that memory however it

84
00:03:09,188 --> 00:03:12,729
wants and you can see it sets frame

85
00:03:11,019 --> 00:03:15,669
count to zero but what it doesn't do is

86
00:03:12,729 --> 00:03:18,068
actually initially initialize frames in

87
00:03:15,669 --> 00:03:19,900
any actual way and so what we want to do

88
00:03:18,068 --> 00:03:21,039
there is we can just go ahead and say

89
00:03:19,900 --> 00:03:24,459
let's get some frames

90
00:03:21,039 --> 00:03:25,900
oops or fangs as the case may be those

91
00:03:24,459 --> 00:03:29,590
are always good those are of course a

92
00:03:25,900 --> 00:03:31,870
very close relative of the frame a Fang

93
00:03:29,590 --> 00:03:34,539
so what we can do here is just do a push

94
00:03:31,870 --> 00:03:36,939
array since we have that that collation

95
00:03:34,539 --> 00:03:39,400
arena we can do whatever we want with it

96
00:03:36,939 --> 00:03:41,560
so if I want to push an array on here I

97
00:03:39,400 --> 00:03:43,658
can say that however many frames we are

98
00:03:41,560 --> 00:03:44,979
going to have and of course we know how

99
00:03:43,658 --> 00:03:48,250
many we're going to have right because

100
00:03:44,979 --> 00:03:51,099
we have a certain a bit of storage for

101
00:03:48,250 --> 00:03:52,900
that of course so for some reason I

102
00:03:51,098 --> 00:03:57,728
don't actually see it being used here at

103
00:03:52,900 --> 00:04:02,319
all which is a bit odd so that's that's

104
00:03:57,729 --> 00:04:04,120
a bit weird but I guess do we ever even

105
00:04:02,318 --> 00:04:06,908
define it I guess we wouldn't have to

106
00:04:04,120 --> 00:04:09,699
have but let's take a look so we do have

107
00:04:06,908 --> 00:04:12,758
max debug frame count here so we can go

108
00:04:09,699 --> 00:04:14,590
ahead and use that as well like so

109
00:04:12,758 --> 00:04:16,658
although the other thing that we could

110
00:04:14,590 --> 00:04:18,189
do is since we're using a scratch pad we

111
00:04:16,658 --> 00:04:20,560
could do something like daisy chained

112
00:04:18,189 --> 00:04:22,569
the frames together and if we do change

113
00:04:20,560 --> 00:04:24,949
the frames together then we actually

114
00:04:22,569 --> 00:04:29,599
wouldn't have to do anything like that

115
00:04:24,949 --> 00:04:37,310
we wouldn't have to we wouldn't have to

116
00:04:29,600 --> 00:04:38,270
do anything where we yeah we wouldn't

117
00:04:37,310 --> 00:04:39,560
have to do anything where we guess that

118
00:04:38,269 --> 00:04:41,299
my knee would just be how much memory we

119
00:04:39,560 --> 00:04:43,579
have now it occurs to me though that

120
00:04:41,300 --> 00:04:45,079
because max debug frame count is being

121
00:04:43,579 --> 00:04:47,300
used here in the event count the

122
00:04:45,079 --> 00:04:49,370
interesting thing about it is that

123
00:04:47,300 --> 00:04:52,460
assumes that we only issue one frame end

124
00:04:49,370 --> 00:04:54,110
event every time because otherwise

125
00:04:52,459 --> 00:04:56,089
yeah the event counts we wouldn't be

126
00:04:54,110 --> 00:04:58,189
able to hold enough event arrays to

127
00:04:56,089 --> 00:05:01,459
actually count any more frames than that

128
00:04:58,189 --> 00:05:03,589
but technically inside the frames we

129
00:05:01,459 --> 00:05:05,479
could actually have tons of those frame

130
00:05:03,589 --> 00:05:08,209
end events if you wanted to so it's kind

131
00:05:05,480 --> 00:05:10,550
of weird like max debug frame count is

132
00:05:08,209 --> 00:05:13,279
not really probably the best word for

133
00:05:10,550 --> 00:05:15,259
that it's really event array counts and

134
00:05:13,279 --> 00:05:19,309
technically those things are not really

135
00:05:15,259 --> 00:05:21,139
coupled like you don't have to have

136
00:05:19,310 --> 00:05:25,490
those two things be related it's a

137
00:05:21,139 --> 00:05:27,949
little bit weird right it's hard to say

138
00:05:25,490 --> 00:05:30,259
but you know it's just it's just a

139
00:05:27,949 --> 00:05:32,300
little odd so technically you know we

140
00:05:30,259 --> 00:05:34,069
could say well you know it's technically

141
00:05:32,300 --> 00:05:35,960
let's say that it's something like we

142
00:05:34,069 --> 00:05:38,180
can't have any more than two or four of

143
00:05:35,959 --> 00:05:40,069
those four frame or who knows what and

144
00:05:38,180 --> 00:05:41,540
technically we should only have the same

145
00:05:40,069 --> 00:05:43,159
number as those but there isn't anything

146
00:05:41,540 --> 00:05:45,710
preventing the code from outputting

147
00:05:43,160 --> 00:05:47,689
multiple frame and events inside a

148
00:05:45,709 --> 00:05:50,089
single event array which would lead to

149
00:05:47,689 --> 00:05:51,860
more frames than event arrays if that

150
00:05:50,089 --> 00:05:54,829
makes sense hopefully it makes some

151
00:05:51,860 --> 00:05:56,600
sense so anyway what we want to do is

152
00:05:54,829 --> 00:05:59,149
again just allocate some debug frames

153
00:05:56,600 --> 00:06:00,680
here so let me go ahead and do that that

154
00:05:59,149 --> 00:06:03,439
allocates just an array for storing

155
00:06:00,680 --> 00:06:08,120
those guys again max debug frame count

156
00:06:03,439 --> 00:06:10,610
here not what we want that we want event

157
00:06:08,120 --> 00:06:12,889
array count like so and as we kind of go

158
00:06:10,610 --> 00:06:17,000
through like I said current frame is

159
00:06:12,889 --> 00:06:18,709
getting used every time we every time we

160
00:06:17,000 --> 00:06:21,230
see one of those frame markers we

161
00:06:18,709 --> 00:06:23,060
advance it to a new pointer and when we

162
00:06:21,230 --> 00:06:24,710
do that now we're gonna actually have

163
00:06:23,060 --> 00:06:27,649
valid memory for it but when we have

164
00:06:24,709 --> 00:06:29,539
that valid memory again if you look here

165
00:06:27,649 --> 00:06:30,889
we've got these debug frame regions

166
00:06:29,540 --> 00:06:34,040
which is something that we're going to

167
00:06:30,889 --> 00:06:35,810
want to start writing into and so we

168
00:06:34,040 --> 00:06:36,390
need some way of actually allocating

169
00:06:35,810 --> 00:06:38,759
enough

170
00:06:36,389 --> 00:06:40,649
those regions we want to allocate a set

171
00:06:38,759 --> 00:06:44,039
of those regions so we can kind of show

172
00:06:40,649 --> 00:06:45,179
where they are right and so we got to

173
00:06:44,040 --> 00:06:46,800
start thinking about how we're going to

174
00:06:45,180 --> 00:06:48,000
do that and in order to have some memory

175
00:06:46,800 --> 00:06:52,500
for that we're also going to probably

176
00:06:48,000 --> 00:06:54,000
want right to to allocate space in that

177
00:06:52,500 --> 00:06:57,029
current frame for the region

178
00:06:54,000 --> 00:07:00,079
so we'd have current frame regions and

179
00:06:57,029 --> 00:07:04,619
in there we would say something like

180
00:07:00,079 --> 00:07:07,289
push array we could also actually again

181
00:07:04,620 --> 00:07:10,170
do it where we didn't do push array like

182
00:07:07,290 --> 00:07:11,970
that but we could for now I'm gonna go

183
00:07:10,170 --> 00:07:13,830
ahead and just do it that way where we

184
00:07:11,970 --> 00:07:16,860
then say I don't know how much we

185
00:07:13,829 --> 00:07:18,689
allocated into a frame let's see here

186
00:07:16,860 --> 00:07:20,250
probably something like I don't know if

187
00:07:18,689 --> 00:07:23,339
max debug event count is probably a

188
00:07:20,250 --> 00:07:25,439
little too large so I'll do it on the

189
00:07:23,339 --> 00:07:27,659
order of this for now but again these

190
00:07:25,439 --> 00:07:29,100
are kind of just arbitrary and we may

191
00:07:27,660 --> 00:07:30,689
want to switch to a thing where we just

192
00:07:29,100 --> 00:07:32,610
use the memory that we need as we go

193
00:07:30,689 --> 00:07:34,170
rather than kind of doing these array

194
00:07:32,610 --> 00:07:35,610
based ones because I don't know that we

195
00:07:34,170 --> 00:07:37,560
actually need a raise for any particular

196
00:07:35,610 --> 00:07:39,210
reason so I'm gonna do it like this for

197
00:07:37,560 --> 00:07:44,189
now but I think we may want to do it a

198
00:07:39,209 --> 00:07:45,359
little bit more conservatively just cuz

199
00:07:44,189 --> 00:07:46,740
we don't really know much about what's

200
00:07:45,360 --> 00:07:48,420
going on here and so maybe just daisy

201
00:07:46,740 --> 00:07:52,769
chaining together would be the smarter

202
00:07:48,420 --> 00:07:55,410
way to go so yeah if we go ahead and and

203
00:07:52,769 --> 00:07:57,149
put these recent since sure now we have

204
00:07:55,410 --> 00:07:59,160
place to store the regions and I can

205
00:07:57,149 --> 00:08:02,489
compile this and that's probably fine

206
00:07:59,160 --> 00:08:04,230
and I could probably run it okay so we

207
00:08:02,490 --> 00:08:06,300
do like I said we do run out of space

208
00:08:04,230 --> 00:08:08,610
they're part of that I don't know how

209
00:08:06,300 --> 00:08:10,350
much memory we actually reserved for

210
00:08:08,610 --> 00:08:12,750
debugging probably not as much as we

211
00:08:10,350 --> 00:08:14,580
might want let me take a look here yeah

212
00:08:12,750 --> 00:08:18,750
so debug storage size is actually quite

213
00:08:14,579 --> 00:08:20,669
small as the case may be so in terms of

214
00:08:18,750 --> 00:08:22,230
just storing these massive numbers of

215
00:08:20,670 --> 00:08:24,569
events or something like that it's not

216
00:08:22,230 --> 00:08:26,040
going to be able to do it so I don't

217
00:08:24,569 --> 00:08:31,230
know exactly again what we want to do

218
00:08:26,040 --> 00:08:32,580
there but probably something hmm for now

219
00:08:31,230 --> 00:08:34,740
I might actually say that let's just do

220
00:08:32,580 --> 00:08:37,139
something kind of tiny just for just for

221
00:08:34,740 --> 00:08:39,629
a temporary thing I'm gonna see how much

222
00:08:37,139 --> 00:08:42,419
we can do so we can't really do very

223
00:08:39,629 --> 00:08:45,979
much at all with that size of arena I'm

224
00:08:42,419 --> 00:08:45,978
gonna go ahead and do that

225
00:08:49,289 --> 00:08:58,659
what is it complaining about their

226
00:08:53,039 --> 00:09:00,578
current frame region cat looks like I

227
00:08:58,659 --> 00:09:03,730
did not allocate this properly is that

228
00:09:00,578 --> 00:09:07,599
correct we've got our debug frames how

229
00:09:03,730 --> 00:09:10,990
many frames do we have let's see here

230
00:09:07,600 --> 00:09:12,550
frame count oh my so we're doing

231
00:09:10,990 --> 00:09:13,629
something a little bit odd here it looks

232
00:09:12,549 --> 00:09:15,669
like we've got some kind of a bug

233
00:09:13,629 --> 00:09:19,240
because there should not nearly be that

234
00:09:15,669 --> 00:09:22,889
many frames right so it looks like it

235
00:09:19,240 --> 00:09:26,438
looks like we've done something bad

236
00:09:22,889 --> 00:09:34,240
let's see what's our event rate index is

237
00:09:26,438 --> 00:09:35,740
3 I rent a valid event it's 1 so it

238
00:09:34,240 --> 00:09:39,129
doesn't feel like we should have gotten

239
00:09:35,740 --> 00:09:40,629
up that high it's a bit odd I'm gonna

240
00:09:39,129 --> 00:09:42,670
I'm gonna take out just a quick gander

241
00:09:40,629 --> 00:09:43,750
here what's going on I don't like the

242
00:09:42,669 --> 00:09:46,208
looks of that at all

243
00:09:43,750 --> 00:09:50,259
so as we roll through these events here

244
00:09:46,208 --> 00:09:55,558
here we are adding one in how are there

245
00:09:50,259 --> 00:09:55,558
that many of these this is bizarre ah

246
00:09:55,919 --> 00:10:02,409
that's the problem this is totally bogus

247
00:10:00,458 --> 00:10:04,088
we need to actually only loop through

248
00:10:02,409 --> 00:10:08,610
the event indices that are actually

249
00:10:04,089 --> 00:10:15,069
there so that's that's just wrong right

250
00:10:08,610 --> 00:10:17,019
we actually need to do this so that we

251
00:10:15,068 --> 00:10:19,719
can loop over the amount of events that

252
00:10:17,019 --> 00:10:23,169
are actually present so that that's just

253
00:10:19,720 --> 00:10:26,740
a bug and so now we should be in a much

254
00:10:23,169 --> 00:10:31,929
better position to see about the memory

255
00:10:26,740 --> 00:10:34,688
usage all right ok so now we're at least

256
00:10:31,929 --> 00:10:36,878
in in reasonable running shape so let's

257
00:10:34,688 --> 00:10:38,318
continue on with with doing some of this

258
00:10:36,879 --> 00:10:39,699
collation because I want to work out how

259
00:10:38,318 --> 00:10:41,759
we actually have to collate this stuff

260
00:10:39,698 --> 00:10:45,008
since it's a little bit tricky I think

261
00:10:41,759 --> 00:10:46,839
so let's take a look so what's gonna

262
00:10:45,009 --> 00:10:51,180
happen here is we've got these debug

263
00:10:46,839 --> 00:10:53,740
events and the debug events themselves

264
00:10:51,179 --> 00:10:56,528
they we don't even really know how much

265
00:10:53,740 --> 00:10:59,698
time a particular debugger event takes

266
00:10:56,528 --> 00:11:02,489
right because we don't have any

267
00:10:59,698 --> 00:11:05,248
when it actually ends so when we see a

268
00:11:02,489 --> 00:11:07,470
debug event we see like it's begin block

269
00:11:05,249 --> 00:11:11,249
we don't know when we're going to see

270
00:11:07,470 --> 00:11:14,548
the end block right so we have kind of a

271
00:11:11,249 --> 00:11:18,058
nasty problem where we have to start

272
00:11:14,548 --> 00:11:20,458
pairing these things up together and we

273
00:11:18,058 --> 00:11:23,399
do have the debug record index which is

274
00:11:20,458 --> 00:11:27,178
something that allows us to figure that

275
00:11:23,399 --> 00:11:29,879
out but we need some way of actually

276
00:11:27,178 --> 00:11:33,600
creating a like a collation space where

277
00:11:29,879 --> 00:11:37,079
this can happen so we know that any

278
00:11:33,600 --> 00:11:39,058
given debug record index you know we can

279
00:11:37,078 --> 00:11:41,608
we can have I'm gonna go ahead and draw

280
00:11:39,058 --> 00:11:46,318
this out here for any given debug record

281
00:11:41,609 --> 00:11:48,418
index looks like we zoomed out see

282
00:11:46,318 --> 00:11:54,418
that's more what it typically looks like

283
00:11:48,418 --> 00:12:00,838
now all right so this is fairly

284
00:11:54,418 --> 00:12:05,220
complicated right J 185 so the way that

285
00:12:00,839 --> 00:12:07,230
this would work is we've got a set of

286
00:12:05,220 --> 00:12:10,379
functions we've got a set set of blocks

287
00:12:07,230 --> 00:12:11,879
in the code and each block you know I

288
00:12:10,379 --> 00:12:14,938
don't know we've got some code in here

289
00:12:11,879 --> 00:12:19,918
right and each block is gonna have that

290
00:12:14,938 --> 00:12:21,838
begin in that endpoint but we don't know

291
00:12:19,918 --> 00:12:24,208
very much about the circumstances under

292
00:12:21,839 --> 00:12:26,850
which one of these could be called so

293
00:12:24,208 --> 00:12:29,399
for example if this isn't some kind of a

294
00:12:26,850 --> 00:12:32,970
function right so this is in some

295
00:12:29,399 --> 00:12:35,519
function called foo in fact let me just

296
00:12:32,970 --> 00:12:38,160
go ahead and say write it here so let's

297
00:12:35,519 --> 00:12:41,759
suppose we have a function called foo

298
00:12:38,159 --> 00:12:45,178
and in that function it calls itself

299
00:12:41,759 --> 00:12:47,730
recursively so even just in this simple

300
00:12:45,178 --> 00:12:50,578
scenario we know that in a single

301
00:12:47,730 --> 00:12:53,850
invocation of foo we may end up re

302
00:12:50,578 --> 00:12:56,578
invoking foo itself and thereby opening

303
00:12:53,850 --> 00:12:58,769
one of these begin blocks multiple times

304
00:12:56,578 --> 00:13:00,238
before we ever see an end block and so

305
00:12:58,769 --> 00:13:02,129
what that's going to write out in the

306
00:13:00,239 --> 00:13:05,389
log is it's gonna write out something

307
00:13:02,129 --> 00:13:08,100
like you know begin foo begin foo and

308
00:13:05,389 --> 00:13:12,009
let's say just goes too deep so then it

309
00:13:08,100 --> 00:13:17,769
goes n foo and foo

310
00:13:12,009 --> 00:13:20,129
you know so that is how this would look

311
00:13:17,769 --> 00:13:24,309
and these are paired thusly

312
00:13:20,129 --> 00:13:26,379
you know we would see begin foo and then

313
00:13:24,309 --> 00:13:29,199
we would see begin foo again we would

314
00:13:26,379 --> 00:13:31,360
know that we can't begin foo a second

315
00:13:29,200 --> 00:13:34,300
time if we've already begun at once

316
00:13:31,360 --> 00:13:35,680
without seeing an end unless it's a sub

317
00:13:34,299 --> 00:13:37,359
invocation so we would know that

318
00:13:35,679 --> 00:13:40,139
somewhere down the line foo called

319
00:13:37,360 --> 00:13:44,500
itself either directly or indirectly

320
00:13:40,139 --> 00:13:52,299
right now this is true only insofar as

321
00:13:44,500 --> 00:13:54,240
the thread index is the same because at

322
00:13:52,299 --> 00:13:56,469
the same time on a separate thread

323
00:13:54,240 --> 00:14:00,580
somebody might have called begin foo

324
00:13:56,470 --> 00:14:03,160
here like might have called through and

325
00:14:00,580 --> 00:14:05,350
maybe how to begin in an end pair and so

326
00:14:03,159 --> 00:14:08,049
what we could see is something like this

327
00:14:05,350 --> 00:14:10,629
I'm gonna put thread numbers here so the

328
00:14:08,049 --> 00:14:13,870
thread the thread ID is here and this is

329
00:14:10,629 --> 00:14:18,429
the event so the thread ID on thread 0

330
00:14:13,870 --> 00:14:21,909
might do begin foo the thread ID on

331
00:14:18,429 --> 00:14:25,569
thread 1 might then do a begin foo then

332
00:14:21,909 --> 00:14:27,669
the thread ID 0 might do an end foo then

333
00:14:25,570 --> 00:14:32,700
thread ID 1 might do another begin foo

334
00:14:27,669 --> 00:14:35,379
and then thread ID 1 might do an end foo

335
00:14:32,700 --> 00:14:38,610
and then throw out a 1 dozen other hand

336
00:14:35,379 --> 00:14:42,269
foo now the naive parse of this right is

337
00:14:38,610 --> 00:14:47,680
that it would look like this

338
00:14:42,269 --> 00:14:50,399
begin and this begin look like this this

339
00:14:47,679 --> 00:14:53,349
one part pairs to that and this one

340
00:14:50,399 --> 00:14:55,809
pairs to that right that's what it would

341
00:14:53,350 --> 00:14:57,970
look like but it's not true because

342
00:14:55,809 --> 00:14:59,949
there's two different threads in play so

343
00:14:57,970 --> 00:15:01,450
they can only pair if they're on the

344
00:14:59,950 --> 00:15:02,560
same thread because obviously throw in

345
00:15:01,450 --> 00:15:05,560
two different threads than the beginning

346
00:15:02,559 --> 00:15:08,559
the end o match so we only look at 0

347
00:15:05,559 --> 00:15:10,869
right and we say oh ok there's a pairing

348
00:15:08,559 --> 00:15:12,819
there then we only look at one and we

349
00:15:10,870 --> 00:15:15,100
say oh ok there's the pairing there and

350
00:15:12,820 --> 00:15:16,960
there is the pairing there that's the

351
00:15:15,100 --> 00:15:20,769
actual operations that we need to do and

352
00:15:16,960 --> 00:15:23,920
that would tell us how these things are

353
00:15:20,769 --> 00:15:25,569
grouped up so in order to do that as

354
00:15:23,919 --> 00:15:27,360
we're reading through these things

355
00:15:25,570 --> 00:15:30,660
right as we kind of read through them

356
00:15:27,360 --> 00:15:33,789
for every one that we get of these guys

357
00:15:30,659 --> 00:15:36,100
we need to tennis a alright so we have

358
00:15:33,789 --> 00:15:38,110
the location right because that that is

359
00:15:36,100 --> 00:15:41,470
the counter index we know the counter

360
00:15:38,110 --> 00:15:45,250
index we have a way to index it off of

361
00:15:41,470 --> 00:15:47,230
its got a unique ID right so we have a

362
00:15:45,250 --> 00:15:49,360
unique ID and that plus the thread ID

363
00:15:47,230 --> 00:15:52,990
gives us essentially a completely unique

364
00:15:49,360 --> 00:15:55,060
ID and then the same is true for the end

365
00:15:52,990 --> 00:15:58,299
so we're really looking for the thread

366
00:15:55,059 --> 00:16:00,299
ID plus the counter ID right and I

367
00:15:58,299 --> 00:16:03,009
shouldn't say plus it's more like

368
00:16:00,299 --> 00:16:06,219
appended to right it's it's almost like

369
00:16:03,009 --> 00:16:09,039
the thread ID dot the counter ID you

370
00:16:06,220 --> 00:16:10,660
know it's like a grouped number what

371
00:16:09,039 --> 00:16:16,480
we're doing is we're looking for paired

372
00:16:10,659 --> 00:16:18,730
versions of that and so I don't know the

373
00:16:16,480 --> 00:16:20,800
best way to do this I'm going to do it

374
00:16:18,730 --> 00:16:22,149
as a simple stack for now because I feel

375
00:16:20,799 --> 00:16:25,029
like the number of these that can be

376
00:16:22,149 --> 00:16:27,250
open at a time it's not that high and so

377
00:16:25,029 --> 00:16:30,309
I feel like doing a giant opening open

378
00:16:27,250 --> 00:16:32,289
like a dressing kind of a scheme where I

379
00:16:30,309 --> 00:16:36,159
have like some giant thing which is like

380
00:16:32,289 --> 00:16:37,990
thread IDs this way see IDs this way and

381
00:16:36,159 --> 00:16:40,329
each one of these guys is some linked

382
00:16:37,990 --> 00:16:43,240
list of open things that get closed off

383
00:16:40,330 --> 00:16:46,120
or something I think I'd rather avoid

384
00:16:43,240 --> 00:16:49,840
doing that entirely I don't think that's

385
00:16:46,120 --> 00:16:51,700
a good use of anyone's time because in

386
00:16:49,840 --> 00:16:53,680
general any time you see an end it's

387
00:16:51,700 --> 00:16:57,780
going to match the most recent begin on

388
00:16:53,679 --> 00:17:01,629
that particular channel right and

389
00:16:57,779 --> 00:17:03,669
furthermore beginning ends kind of end

390
00:17:01,629 --> 00:17:05,170
up being paired most of the time so you

391
00:17:03,669 --> 00:17:06,938
shouldn't have to look back very far

392
00:17:05,170 --> 00:17:08,110
most of the time and end block pairs

393
00:17:06,939 --> 00:17:12,670
with the thing that was the most

394
00:17:08,109 --> 00:17:14,559
recently opened you know and so I think

395
00:17:12,670 --> 00:17:18,670
what I'd like to do is just per thread

396
00:17:14,559 --> 00:17:21,909
so per thread ID I will keep a linked

397
00:17:18,670 --> 00:17:23,380
list of what blocks are open and I'll

398
00:17:21,910 --> 00:17:25,720
just search that linked list from the

399
00:17:23,380 --> 00:17:28,390
end back towards the beginning if that

400
00:17:25,720 --> 00:17:29,710
makes sense to see what closed and if

401
00:17:28,390 --> 00:17:33,940
something closes out you know I'll

402
00:17:29,710 --> 00:17:36,039
remove it if we wanted a special case it

403
00:17:33,940 --> 00:17:39,190
and say that we don't allow anything to

404
00:17:36,039 --> 00:17:39,819
be overlapped on the same thread meaning

405
00:17:39,190 --> 00:17:44,039
we don't

406
00:17:39,819 --> 00:17:49,450
someone to go begin foo on thread zero

407
00:17:44,039 --> 00:17:55,450
begin bar also on thread zero then end

408
00:17:49,450 --> 00:17:58,450
foo on thread zero and bar on thread

409
00:17:55,450 --> 00:18:00,670
zero you see how that does like this hop

410
00:17:58,450 --> 00:18:02,500
it does like an inter leave its like it

411
00:18:00,670 --> 00:18:05,710
begins one thing begins another then

412
00:18:02,500 --> 00:18:10,539
ends not the one that's most interior

413
00:18:05,710 --> 00:18:13,000
but the exterior like that if we didn't

414
00:18:10,539 --> 00:18:17,139
allow that then you would always match

415
00:18:13,000 --> 00:18:18,609
the last one right you never have a

416
00:18:17,140 --> 00:18:20,710
circumstance where the thing that gets

417
00:18:18,609 --> 00:18:21,969
matched isn't the very last one so we

418
00:18:20,710 --> 00:18:23,980
could also make that restriction without

419
00:18:21,970 --> 00:18:25,930
really much of a loss of generality but

420
00:18:23,980 --> 00:18:27,940
because it's not too hard probably to

421
00:18:25,930 --> 00:18:30,460
search through the linked list in the

422
00:18:27,940 --> 00:18:32,259
rare case where that's not true we might

423
00:18:30,460 --> 00:18:33,700
as well just support it because I'm not

424
00:18:32,259 --> 00:18:36,129
sure there's that much a reason not to

425
00:18:33,700 --> 00:18:41,470
it may ruin some kind of like stacking

426
00:18:36,130 --> 00:18:43,270
notion that we have it makes it kind of

427
00:18:41,470 --> 00:18:45,970
hard to draw bars because the bars can

428
00:18:43,269 --> 00:18:47,920
overlap even on the same thread you know

429
00:18:45,970 --> 00:18:50,230
like if you're looking at a thread and

430
00:18:47,920 --> 00:18:52,000
and we wanted to draw like bars like we

431
00:18:50,230 --> 00:18:54,160
were saying where we have thread 0 and

432
00:18:52,000 --> 00:18:56,289
thread 1 if we want to draw these kind

433
00:18:54,160 --> 00:18:58,330
of bars in there

434
00:18:56,289 --> 00:19:00,759
it's kind of weird because now you might

435
00:18:58,329 --> 00:19:03,490
get a bar where this is the time for a

436
00:19:00,759 --> 00:19:06,220
foo and this is the time for bar here

437
00:19:03,490 --> 00:19:09,009
but actually it kind of penetrates a bit

438
00:19:06,220 --> 00:19:12,100
into there so it's kind of hard to draw

439
00:19:09,009 --> 00:19:14,289
that too right because they overlap and

440
00:19:12,099 --> 00:19:17,589
so it's almost like you need as many

441
00:19:14,289 --> 00:19:19,029
lanes as you have open things and that's

442
00:19:17,589 --> 00:19:21,819
again it makes it difficult

443
00:19:19,029 --> 00:19:23,230
visualization wise so it may be that

444
00:19:21,819 --> 00:19:25,059
there's just a good reason to say we

445
00:19:23,230 --> 00:19:26,349
just don't allow that and we consider

446
00:19:25,059 --> 00:19:28,269
that an error and then when you're doing

447
00:19:26,349 --> 00:19:30,819
your block timing you always you should

448
00:19:28,269 --> 00:19:34,930
never always use like a time block that

449
00:19:30,819 --> 00:19:36,279
you know closes in order because I don't

450
00:19:34,930 --> 00:19:37,870
know that we'd give up anything for that

451
00:19:36,279 --> 00:19:39,609
and it does ensure that our

452
00:19:37,869 --> 00:19:41,079
visualization will be easier and it's

453
00:19:39,609 --> 00:19:42,969
easier for us to see what's going on

454
00:19:41,079 --> 00:19:45,939
rather than having to try and invent

455
00:19:42,970 --> 00:19:47,860
some visualization that's not that that

456
00:19:45,940 --> 00:19:49,960
doesn't obey the standard scoping rules

457
00:19:47,859 --> 00:19:52,059
of like see where you know things get

458
00:19:49,960 --> 00:19:54,809
closed out in the order that they get

459
00:19:52,059 --> 00:19:54,809
opened and stuff like

460
00:19:56,420 --> 00:20:03,259
okay

461
00:19:58,799 --> 00:20:09,210
so let's see so I need some storage for

462
00:20:03,259 --> 00:20:14,400
I just need like you know open like an

463
00:20:09,210 --> 00:20:16,769
open block an open debug block and the

464
00:20:14,400 --> 00:20:18,720
open debug block would have some kind of

465
00:20:16,769 --> 00:20:21,359
like a pointer to its the previous

466
00:20:18,720 --> 00:20:24,990
blocker or the parent I suppose right

467
00:20:21,359 --> 00:20:26,939
like whoever was above me and the

468
00:20:24,990 --> 00:20:30,210
information in here I think would be the

469
00:20:26,940 --> 00:20:33,450
same information roughly as would be in

470
00:20:30,210 --> 00:20:34,920
the debug event structure so I would say

471
00:20:33,450 --> 00:20:36,720
that what we'll do is we just say let's

472
00:20:34,920 --> 00:20:42,140
point to the debug event structure

473
00:20:36,720 --> 00:20:45,240
itself so this is the opening event and

474
00:20:42,140 --> 00:20:46,860
that that is presumably all we need and

475
00:20:45,240 --> 00:20:48,150
we get to the end event we then would

476
00:20:46,859 --> 00:20:49,939
have the beginning and the end events

477
00:20:48,150 --> 00:20:52,019
and we can then collapse them and do

478
00:20:49,940 --> 00:20:52,950
whatever it is that we want to do with

479
00:20:52,019 --> 00:20:54,059
that information because we would have

480
00:20:52,950 --> 00:21:00,480
all the information that we actually

481
00:20:54,059 --> 00:21:09,149
need right hmm she's me I think that

482
00:21:00,480 --> 00:21:10,319
would be fine yeah so then we would just

483
00:21:09,150 --> 00:21:15,630
have to have one of these for every

484
00:21:10,319 --> 00:21:22,980
thread so we have like open block for

485
00:21:15,630 --> 00:21:24,750
thread and you know again I don't mind

486
00:21:22,980 --> 00:21:27,720
having a lot of max values in here

487
00:21:24,750 --> 00:21:29,190
because again I don't we can it's just

488
00:21:27,720 --> 00:21:31,650
for our own purposes it's not something

489
00:21:29,190 --> 00:21:32,400
that ever runs on the end-users machine

490
00:21:31,650 --> 00:21:34,110
or anything like that

491
00:21:32,400 --> 00:21:37,380
and plus I guess we could say some

492
00:21:34,109 --> 00:21:41,429
ridiculous number that we will never

493
00:21:37,380 --> 00:21:42,690
have the luxury of having because I

494
00:21:41,430 --> 00:21:45,480
don't know that handmade hero could

495
00:21:42,690 --> 00:21:46,940
really make use of 256 threads but in

496
00:21:45,480 --> 00:21:50,089
the future there will certainly be

497
00:21:46,940 --> 00:21:53,519
computers that can do 206 threads I mean

498
00:21:50,089 --> 00:21:55,980
you know Xeon Phi someday probably will

499
00:21:53,519 --> 00:21:56,279
do 60 will do 206 threads in a couple

500
00:21:55,980 --> 00:22:00,150
years

501
00:21:56,279 --> 00:22:05,220
I would think potentially seems

502
00:22:00,150 --> 00:22:06,390
reasonable anyway I mean obviously you

503
00:22:05,220 --> 00:22:06,890
could make turn of reducers threads on

504
00:22:06,390 --> 00:22:09,380
anything

505
00:22:06,890 --> 00:22:13,250
I mean Tori's threads that actually are

506
00:22:09,380 --> 00:22:15,980
all doing work at the same time so if I

507
00:22:13,250 --> 00:22:20,619
have that open block for thread then

508
00:22:15,980 --> 00:22:20,620
what I should be able to do is put in

509
00:22:20,799 --> 00:22:24,769
and I could probably use this for the

510
00:22:23,599 --> 00:22:26,419
thread ID stuff as well

511
00:22:24,769 --> 00:22:30,410
so what I could probably do is say all

512
00:22:26,420 --> 00:22:34,420
right for the thread IDs I'll also go in

513
00:22:30,410 --> 00:22:34,420
here to where we keep the talk of that

514
00:22:34,509 --> 00:22:40,250
junior this is technically not a thread

515
00:22:38,480 --> 00:22:42,620
index is the thread ID we should

516
00:22:40,250 --> 00:22:44,690
probably note it as such and then I'll

517
00:22:42,619 --> 00:22:46,009
come in here to the debug open block and

518
00:22:44,690 --> 00:22:49,279
I'll do something like say that we've

519
00:22:46,009 --> 00:22:52,879
got a thread ID on there and then when

520
00:22:49,279 --> 00:22:56,420
we initialize these at the start of the

521
00:22:52,880 --> 00:23:04,180
debugging process as they might say in

522
00:22:56,420 --> 00:23:08,180
Canada I will do a open block for thread

523
00:23:04,180 --> 00:23:10,570
in fact I suppose I can actually just do

524
00:23:08,180 --> 00:23:10,570
it this way

525
00:23:19,380 --> 00:23:27,130
you know what I might even do it

526
00:23:22,779 --> 00:23:29,049
slightly differently I might say like

527
00:23:27,130 --> 00:23:31,090
debug thread or something like that and

528
00:23:29,049 --> 00:23:34,419
I might actually put the thread ID in

529
00:23:31,089 --> 00:23:39,129
here and the first open debug block in

530
00:23:34,420 --> 00:23:41,110
here like so and then I will just say

531
00:23:39,130 --> 00:23:42,760
that we've got an array of debug threads

532
00:23:41,109 --> 00:23:45,009
and that way I can sort of add more

533
00:23:42,759 --> 00:23:49,809
information in there for the collation

534
00:23:45,009 --> 00:23:52,359
walk as we go I also don't know that we

535
00:23:49,809 --> 00:23:54,759
need this in the actual debug state

536
00:23:52,359 --> 00:23:56,679
itself so what I might do too is I might

537
00:23:54,759 --> 00:23:59,920
say that at least for now until I have

538
00:23:56,680 --> 00:24:02,850
like a real reason not to I might put it

539
00:23:59,920 --> 00:24:06,160
up here as well so I do something like

540
00:24:02,849 --> 00:24:07,959
we've got our debug threads here and our

541
00:24:06,160 --> 00:24:13,810
debug threads is just going to do a push

542
00:24:07,960 --> 00:24:16,480
array and that's gonna do the thing to

543
00:24:13,809 --> 00:24:21,970
get us some storage for the number that

544
00:24:16,480 --> 00:24:25,900
there are mass debug Redcat so if i push

545
00:24:21,970 --> 00:24:30,069
those on there i can then run through

546
00:24:25,900 --> 00:24:31,590
them and initialize them to whatever i

547
00:24:30,069 --> 00:24:37,960
would like them to be

548
00:24:31,589 --> 00:24:39,549
u3 - mm-hmm and i guess the other thing

549
00:24:37,960 --> 00:24:42,009
to think about is when we do get lane

550
00:24:39,549 --> 00:24:47,950
from thread i can kind of collapse these

551
00:24:42,009 --> 00:24:49,269
down so get lane from thread since like

552
00:24:47,950 --> 00:24:50,950
entering them in order I guess we don't

553
00:24:49,269 --> 00:24:52,839
even need max debug thread now I think

554
00:24:50,950 --> 00:24:56,170
about it we could just change these if

555
00:24:52,839 --> 00:24:58,029
we wanted to it's kind of a little bit

556
00:24:56,170 --> 00:24:59,470
janky err but they're all going to be

557
00:24:58,029 --> 00:25:01,899
relatively close to each other

558
00:24:59,470 --> 00:25:04,660
potentially I'll know that Matt I'm torn

559
00:25:01,900 --> 00:25:05,950
I'm touring a little bit I'll leave it

560
00:25:04,660 --> 00:25:07,600
this way for now but we don't really

561
00:25:05,950 --> 00:25:09,279
even need to do that first to some

562
00:25:07,599 --> 00:25:11,980
degree we could we could actually avoid

563
00:25:09,279 --> 00:25:13,420
having there be any fixed number so

564
00:25:11,980 --> 00:25:14,860
maybe I'll just do it that way and we'll

565
00:25:13,420 --> 00:25:16,810
see if there's any real penalty for

566
00:25:14,859 --> 00:25:19,119
doing it that way but if I have a debug

567
00:25:16,809 --> 00:25:22,089
thread like so and then I just do like a

568
00:25:19,119 --> 00:25:23,979
next on there I can do something much

569
00:25:22,089 --> 00:25:28,308
more simple which is I can just say

570
00:25:23,980 --> 00:25:31,490
debug thread first thread

571
00:25:28,308 --> 00:25:36,178
right and I guess that goes here

572
00:25:31,490 --> 00:25:39,750
so if I did that then we don't clear or

573
00:25:36,179 --> 00:25:40,920
do anything at all at the outset and the

574
00:25:39,750 --> 00:25:42,089
same would have been true for frames

575
00:25:40,920 --> 00:25:43,800
that's why I saying maybe I should have

576
00:25:42,089 --> 00:25:46,259
just been doing that kind of policy and

577
00:25:43,799 --> 00:25:48,690
so when that happens in here what we

578
00:25:46,259 --> 00:25:50,308
would do is when we say when we call it

579
00:25:48,690 --> 00:25:52,890
to this function that's like get lane

580
00:25:50,308 --> 00:25:55,470
from thread index instead of doing it

581
00:25:52,890 --> 00:26:00,570
that way what I'd rather do is something

582
00:25:55,470 --> 00:26:04,500
more like debug thread get thread or get

583
00:26:00,569 --> 00:26:08,960
debug thread something like that so that

584
00:26:04,500 --> 00:26:11,190
we can get it back this we'd pass in

585
00:26:08,960 --> 00:26:12,900
instead of the debug state which is not

586
00:26:11,190 --> 00:26:16,769
what we want we would just pass in that

587
00:26:12,900 --> 00:26:19,050
first thread pointer you know that's

588
00:26:16,769 --> 00:26:20,339
that's all we would need there so if I

589
00:26:19,049 --> 00:26:21,509
pass in the first thread pointer I

590
00:26:20,339 --> 00:26:24,209
assume the debug code we'll get that

591
00:26:21,509 --> 00:26:27,539
back for me now when I have that thread

592
00:26:24,210 --> 00:26:29,579
as a thing the lane index presumably can

593
00:26:27,539 --> 00:26:31,019
just be retrieved directly from there

594
00:26:29,579 --> 00:26:34,710
you know what I'm saying

595
00:26:31,019 --> 00:26:41,029
so on here on the debug thread it would

596
00:26:34,710 --> 00:26:43,079
just have a lane index on it now I

597
00:26:41,029 --> 00:26:44,460
there's gonna be a couple of different

598
00:26:43,079 --> 00:26:46,439
things that kind of need to be there

599
00:26:44,460 --> 00:26:49,920
which is one reason why maybe on debug

600
00:26:46,440 --> 00:26:52,590
state we might want to put it there but

601
00:26:49,920 --> 00:26:56,940
frame bar lane count actually I guess is

602
00:26:52,589 --> 00:26:59,220
the thing so if we pass if I pass debug

603
00:26:56,940 --> 00:27:01,679
state into this I suppose I can just use

604
00:26:59,220 --> 00:27:02,970
that and still keep it this way I'm just

605
00:27:01,679 --> 00:27:06,690
trying to figure out whether I want the

606
00:27:02,970 --> 00:27:09,929
threads I probably do so I'll just go

607
00:27:06,690 --> 00:27:12,450
ahead and stick it here there we go

608
00:27:09,929 --> 00:27:14,730
so that does the collation it'll do like

609
00:27:12,450 --> 00:27:16,769
first thread equals zero and just clear

610
00:27:14,730 --> 00:27:18,420
it out and then from then on out it'll

611
00:27:16,769 --> 00:27:21,539
it'll use it there I'll just leave it

612
00:27:18,420 --> 00:27:24,330
that way okay so when I grab that thread

613
00:27:21,539 --> 00:27:26,159
out I then have the ability to search to

614
00:27:24,329 --> 00:27:31,889
see what's going on with this guy

615
00:27:26,160 --> 00:27:35,250
and so inside here when we do our begin

616
00:27:31,890 --> 00:27:36,780
block and unblock pairs what I should be

617
00:27:35,250 --> 00:27:38,429
able to do is say well for the begin

618
00:27:36,779 --> 00:27:40,678
block we know we're always going to

619
00:27:38,429 --> 00:27:41,050
create a new open block every time we

620
00:27:40,679 --> 00:27:43,780
see

621
00:27:41,049 --> 00:27:48,490
begin block you know so we're always

622
00:27:43,779 --> 00:27:50,109
gonna have like for every for every one

623
00:27:48,490 --> 00:27:53,440
of these when I come through here I've

624
00:27:50,109 --> 00:27:56,949
got a debug block I'm going to do a push

625
00:27:53,440 --> 00:27:59,640
struct onto the debug arena and I'm just

626
00:27:56,950 --> 00:28:03,880
going to push on a new one of these open

627
00:27:59,640 --> 00:28:05,920
guys although I probably will want to

628
00:28:03,880 --> 00:28:09,340
recycle those since we pop these guys

629
00:28:05,920 --> 00:28:11,920
off but we can do that in a second

630
00:28:09,339 --> 00:28:13,569
in fact I guess I could well I guess I

631
00:28:11,920 --> 00:28:15,730
could do it now again pretty

632
00:28:13,569 --> 00:28:19,689
straightforward open debug block first

633
00:28:15,730 --> 00:28:25,480
free block so what I would do there

634
00:28:19,690 --> 00:28:27,580
again is when I initially do these guys

635
00:28:25,480 --> 00:28:29,829
here when we sort of initialize

636
00:28:27,579 --> 00:28:34,740
everything at the beginning we just set

637
00:28:29,829 --> 00:28:40,659
those both to zero and that's all fine

638
00:28:34,740 --> 00:28:42,190
so in here when I do my push block

639
00:28:40,660 --> 00:28:43,870
instead what I can do is just say

640
00:28:42,190 --> 00:28:48,160
alright let's set it equal to the first

641
00:28:43,869 --> 00:28:50,679
free block first so we'll just set it to

642
00:28:48,160 --> 00:28:54,580
the debug state first free block and

643
00:28:50,680 --> 00:28:56,730
then assuming that we got one we would

644
00:28:54,579 --> 00:29:04,629
set the bug block first free block to be

645
00:28:56,730 --> 00:29:07,690
our next right which I suppose we would

646
00:29:04,630 --> 00:29:11,470
just do something like this we don't

647
00:29:07,690 --> 00:29:15,160
really care right seems simple enough

648
00:29:11,470 --> 00:29:19,089
and then we've got our debug block but

649
00:29:15,160 --> 00:29:20,920
if we don't have one of those then we

650
00:29:19,089 --> 00:29:24,039
need to make a new one so if we don't

651
00:29:20,920 --> 00:29:27,960
have one of those we just go okay the

652
00:29:24,039 --> 00:29:36,430
debug block equals the push struct and

653
00:29:27,960 --> 00:29:38,350
we grab one once we have a debug block

654
00:29:36,430 --> 00:29:40,920
we need to set the values to whatever it

655
00:29:38,349 --> 00:29:43,329
is that we're actually trying to record

656
00:29:40,920 --> 00:29:46,360
and so if we take a look at where that

657
00:29:43,329 --> 00:29:48,039
is we have the opening event we know

658
00:29:46,359 --> 00:29:50,949
what that that is the event that we're

659
00:29:48,039 --> 00:29:54,369
on right now so that's just the event

660
00:29:50,950 --> 00:29:56,710
pointer that we're processing we know

661
00:29:54,369 --> 00:29:59,729
or that open diva buck what its parent

662
00:29:56,710 --> 00:30:04,029
was and the parent was whatever was

663
00:29:59,730 --> 00:30:07,329
previously on this stack like whatever

664
00:30:04,029 --> 00:30:10,389
the open blocks were whatever is on this

665
00:30:07,329 --> 00:30:14,099
thread stack so since we have the thread

666
00:30:10,390 --> 00:30:17,020
we would just say whatever the first

667
00:30:14,099 --> 00:30:18,369
open block is that's the person who must

668
00:30:17,019 --> 00:30:20,379
have called us because that's the last

669
00:30:18,369 --> 00:30:24,729
thing that was opened before we got

670
00:30:20,380 --> 00:30:27,400
before we got hit and then finally we

671
00:30:24,730 --> 00:30:29,558
know that now we are that new block so

672
00:30:27,400 --> 00:30:32,380
we're kind of just jay-z training these

673
00:30:29,558 --> 00:30:35,019
guys together right and that's that's

674
00:30:32,380 --> 00:30:36,640
all there is on there we can also set

675
00:30:35,019 --> 00:30:38,529
the next three equal to zero though that

676
00:30:36,640 --> 00:30:40,179
doesn't really matter because no one's

677
00:30:38,529 --> 00:30:43,029
gonna be looking at that pointer but we

678
00:30:40,179 --> 00:30:44,500
can set it that way just for fun so

679
00:30:43,029 --> 00:30:46,660
that's all that would happen there when

680
00:30:44,500 --> 00:30:49,450
we end a block we're going to do the

681
00:30:46,660 --> 00:30:51,100
opposite set of events so what we want

682
00:30:49,450 --> 00:30:53,860
to do here is we want to go ahead and

683
00:30:51,099 --> 00:30:56,289
pull off the matching block for this

684
00:30:53,859 --> 00:30:58,829
block now in order to do that we have to

685
00:30:56,289 --> 00:31:01,480
figure out what block actually is

686
00:30:58,829 --> 00:31:04,359
matching ours which should be the last

687
00:31:01,480 --> 00:31:06,400
one on our thread and so what we could

688
00:31:04,359 --> 00:31:10,209
do again is we could assert that they

689
00:31:06,400 --> 00:31:12,940
match and not actually ever do any other

690
00:31:10,210 --> 00:31:14,440
processing but we could also write

691
00:31:12,940 --> 00:31:15,610
something that searches for them and so

692
00:31:14,440 --> 00:31:17,500
I'm gonna write the thing that asserts

693
00:31:15,609 --> 00:31:19,689
for now so you can see if we have any of

694
00:31:17,500 --> 00:31:21,970
those but it would be fairly easy to

695
00:31:19,690 --> 00:31:26,740
search through the list and find the one

696
00:31:21,970 --> 00:31:29,769
that matches either way but so we hit

697
00:31:26,740 --> 00:31:31,210
the end block we come through here and I

698
00:31:29,769 --> 00:31:33,339
suppose you know the other thing too is

699
00:31:31,210 --> 00:31:34,960
there might not be an end block it might

700
00:31:33,339 --> 00:31:37,599
just be an open block now that I think

701
00:31:34,960 --> 00:31:40,960
about it because it may be that the open

702
00:31:37,599 --> 00:31:42,899
block happened many frames ago and those

703
00:31:40,960 --> 00:31:46,539
frames have fallen out of the event or

704
00:31:42,900 --> 00:31:48,400
array you know so it's possible that we

705
00:31:46,539 --> 00:31:49,629
just don't have one and so the other

706
00:31:48,400 --> 00:31:50,950
thing we could do is we could just say

707
00:31:49,630 --> 00:31:53,770
that like at that point it's just an

708
00:31:50,950 --> 00:31:54,700
indeterminate léo pin' block so maybe

709
00:31:53,769 --> 00:31:57,549
I'll do that

710
00:31:54,700 --> 00:32:00,610
we'll just see so first of all I'll say

711
00:31:57,549 --> 00:32:04,690
you know assuming that the thread has an

712
00:32:00,609 --> 00:32:07,809
open block then we'll say all right if

713
00:32:04,690 --> 00:32:13,420
the threads first open block

714
00:32:07,809 --> 00:32:16,029
opening events if that matches and in

715
00:32:13,420 --> 00:32:18,519
order to match it needs to have a couple

716
00:32:16,029 --> 00:32:21,700
things be true first of all it would

717
00:32:18,519 --> 00:32:26,759
need the thread ID to match our thread

718
00:32:21,700 --> 00:32:29,259
editing oops

719
00:32:26,759 --> 00:32:31,629
then it would need and you know what I'm

720
00:32:29,259 --> 00:32:34,119
gonna I'm gonna pull this out into a

721
00:32:31,630 --> 00:32:37,270
closing event just so I don't have to

722
00:32:34,119 --> 00:32:38,949
keep I'm sorry into opening event so I

723
00:32:37,269 --> 00:32:41,250
don't have to keep doing that giant

724
00:32:38,950 --> 00:32:45,910
dereference it's just a lot of typing

725
00:32:41,250 --> 00:32:52,269
like so so we have the thread ID we have

726
00:32:45,910 --> 00:32:59,860
the debug record index and then finally

727
00:32:52,269 --> 00:33:02,319
we have the translation unit if all of

728
00:32:59,859 --> 00:33:04,359
those things are the same then we know

729
00:33:02,319 --> 00:33:06,490
that these two events match if they

730
00:33:04,359 --> 00:33:08,409
don't we know that this event ended but

731
00:33:06,490 --> 00:33:10,059
there was no beginning to it and how we

732
00:33:08,410 --> 00:33:19,360
choose to record that is going to be up

733
00:33:10,059 --> 00:33:21,009
to us probably what we'd wanna do is put

734
00:33:19,359 --> 00:33:23,589
in a bar that kind of stretches back to

735
00:33:21,009 --> 00:33:25,779
the beginning of time you know at the

736
00:33:23,589 --> 00:33:27,189
beginning of the chart but we're not

737
00:33:25,779 --> 00:33:29,019
really quite up to that point yet in

738
00:33:27,190 --> 00:33:32,320
terms of even having a handle on the

739
00:33:29,019 --> 00:33:34,269
visualization but so assuming that we

740
00:33:32,319 --> 00:33:37,689
get a match we now know that these two

741
00:33:34,269 --> 00:33:40,779
events close right these two events line

742
00:33:37,690 --> 00:33:45,309
up with each other and so what I'd like

743
00:33:40,779 --> 00:33:47,829
to know I suppose is what event I'm

744
00:33:45,309 --> 00:33:51,009
sorry what frame we were actually on

745
00:33:47,829 --> 00:33:52,689
when we did our begin because if the

746
00:33:51,009 --> 00:33:55,059
frame that we're beginning on was not

747
00:33:52,690 --> 00:33:57,519
the frame that we were ending on then we

748
00:33:55,059 --> 00:33:59,710
kind of have some work to do in terms of

749
00:33:57,519 --> 00:34:03,430
recording how this actually went down

750
00:33:59,710 --> 00:34:09,398
and so I feel like in here we probably

751
00:34:03,430 --> 00:34:13,269
want some way of saying not there in

752
00:34:09,398 --> 00:34:18,329
here we want some way of saying for the

753
00:34:13,269 --> 00:34:18,329
open event what was the frame index

754
00:34:19,168 --> 00:34:25,778
you know so that in here when we're

755
00:34:23,498 --> 00:34:29,969
looking through in fact I'll go ahead

756
00:34:25,778 --> 00:34:29,969
and say we have a frame index like so

757
00:34:30,838 --> 00:34:35,739
and looking through we've got you know

758
00:34:33,338 --> 00:34:38,288
the frame count stuff and all of that so

759
00:34:35,739 --> 00:34:39,759
as that happens I guess we don't really

760
00:34:38,289 --> 00:34:44,190
need frame index because it's actually

761
00:34:39,759 --> 00:34:46,628
specified right here to some degree

762
00:34:44,190 --> 00:34:48,878
whatever that frame count is that's the

763
00:34:46,628 --> 00:34:51,368
thing so we could just do it could just

764
00:34:48,878 --> 00:34:53,348
do it like this and record that frame

765
00:34:51,369 --> 00:34:58,980
count it's really the frame count minus

766
00:34:53,349 --> 00:34:58,980
one is the only thing but you know

767
00:35:00,150 --> 00:35:06,039
that's certainly something we could do

768
00:35:02,380 --> 00:35:08,259
if we wanted to so if that's the frame

769
00:35:06,039 --> 00:35:11,278
index then while we're in here we can

770
00:35:08,259 --> 00:35:15,278
just say whatever the opening event is

771
00:35:11,278 --> 00:35:17,980
when we do this this open debug block we

772
00:35:15,278 --> 00:35:20,349
can say that we know that the frame

773
00:35:17,980 --> 00:35:23,528
index or this you know starting frame

774
00:35:20,349 --> 00:35:27,730
index is equal to whatever the frame

775
00:35:23,528 --> 00:35:31,150
index was at that time and so here we

776
00:35:27,730 --> 00:35:40,329
could do a test to see so we could say

777
00:35:31,150 --> 00:35:42,309
if the debug block starting frame index

778
00:35:40,329 --> 00:35:45,519
equals whatever frame digs X we're on

779
00:35:42,309 --> 00:35:48,849
then we would you know do sort of the

780
00:35:45,518 --> 00:35:51,548
standard span otherwise we would have to

781
00:35:48,849 --> 00:35:53,528
do something where we like do two halves

782
00:35:51,548 --> 00:35:55,599
of a span on the starting and ending

783
00:35:53,528 --> 00:35:57,248
frames and full spans all the way in

784
00:35:55,599 --> 00:35:59,259
between so again that's going to require

785
00:35:57,248 --> 00:36:02,578
a little bit more work on our part in

786
00:35:59,259 --> 00:36:07,119
terms of recording in fact I'll just say

787
00:36:02,579 --> 00:36:14,109
record span that goes to the beginning

788
00:36:07,119 --> 00:36:19,259
of the frame series this is record all

789
00:36:14,108 --> 00:36:22,778
frames in between and begin and spans

790
00:36:19,259 --> 00:36:24,309
and then this is the standard case this

791
00:36:22,778 --> 00:36:25,748
is the case for most of our stuff where

792
00:36:24,309 --> 00:36:29,109
we're just inside one frame we're

793
00:36:25,748 --> 00:36:31,239
putting in one of those bars and so here

794
00:36:29,108 --> 00:36:33,610
what we can do is we can actually add a

795
00:36:31,239 --> 00:36:35,559
debug region which is what we're

796
00:36:33,610 --> 00:36:39,369
actually drawing and so if we wanted to

797
00:36:35,559 --> 00:36:42,340
draw this debug region we would say you

798
00:36:39,369 --> 00:36:45,490
know add region I don't actually know

799
00:36:42,340 --> 00:36:53,680
how we do that exactly but you know

800
00:36:45,489 --> 00:36:56,919
debug state and current frame it's where

801
00:36:53,679 --> 00:36:59,829
we're trying to add it so when we add

802
00:36:56,920 --> 00:37:02,440
one of these in we can then specify this

803
00:36:59,829 --> 00:37:06,159
stuff so the lane index we know is

804
00:37:02,440 --> 00:37:07,780
whatever the the lane index of the

805
00:37:06,159 --> 00:37:09,569
thread that we're on because all of the

806
00:37:07,780 --> 00:37:12,430
things in this thread go into that Lane

807
00:37:09,570 --> 00:37:15,880
we know in addition to the lane index

808
00:37:12,429 --> 00:37:19,779
the min and Max T are just us sort of

809
00:37:15,880 --> 00:37:23,950
mapping the beginning end clocks which

810
00:37:19,780 --> 00:37:26,550
we now know mapping those into the total

811
00:37:23,949 --> 00:37:30,129
time region for this particular frame

812
00:37:26,550 --> 00:37:33,789
and how we map those in I don't remember

813
00:37:30,130 --> 00:37:35,789
if this is 0 to 1 I don't remember how

814
00:37:33,789 --> 00:37:38,730
we did the drawing I suppose we could

815
00:37:35,789 --> 00:37:47,940
take a look at how that was done

816
00:37:38,730 --> 00:37:50,829
perhaps separately Oh tired Katie hmm I

817
00:37:47,940 --> 00:37:53,320
don't have a lot of energy it's true

818
00:37:50,829 --> 00:37:54,639
that's because i overate i overate

819
00:37:53,320 --> 00:37:58,510
yesterday there was a lot of food

820
00:37:54,639 --> 00:38:01,389
consumed just not really the right

821
00:37:58,510 --> 00:38:08,440
amount of food for for a single kc to be

822
00:38:01,389 --> 00:38:12,460
eating so we inside the debug code where

823
00:38:08,440 --> 00:38:17,230
we draw this how did we choose to do it

824
00:38:12,460 --> 00:38:20,230
we do scale and scale is whatever the

825
00:38:17,230 --> 00:38:23,019
frame bar scale actually is so I guess

826
00:38:20,230 --> 00:38:27,190
we don't know it's it's entirely up to

827
00:38:23,019 --> 00:38:29,409
us what we wish to do so I suppose the

828
00:38:27,190 --> 00:38:36,340
way that to do that is just allow our T

829
00:38:29,409 --> 00:38:39,759
values to kind of be crazy our DTSC

830
00:38:36,340 --> 00:38:41,980
based stuff that seems like probably

831
00:38:39,760 --> 00:38:44,250
what we would want to do I don't know if

832
00:38:41,980 --> 00:38:45,338
we want to store our 64's as a result

833
00:38:44,250 --> 00:38:47,380
but

834
00:38:45,338 --> 00:38:50,108
we can think about that a little bit

835
00:38:47,380 --> 00:38:54,789
separately but in terms of these here

836
00:38:50,108 --> 00:38:57,848
then for min T max teeth and so on what

837
00:38:54,789 --> 00:39:01,210
I can do there is say all right the

838
00:38:57,849 --> 00:39:05,499
opening event and then the closing event

839
00:39:01,210 --> 00:39:07,509
which is us we know where those are in

840
00:39:05,498 --> 00:39:10,868
time because we have the clock value can

841
00:39:07,509 --> 00:39:13,420
you see 2 4 o'clock value and so if I

842
00:39:10,869 --> 00:39:16,778
cast that to an R 64 so I can do some

843
00:39:13,420 --> 00:39:20,019
operations on it right I could then

844
00:39:16,778 --> 00:39:21,579
choose to sort of regularize that a

845
00:39:20,018 --> 00:39:23,108
little bit like for example you know

846
00:39:21,579 --> 00:39:27,039
what I could do I could use a floating

847
00:39:23,108 --> 00:39:28,659
point value to store it and this is kind

848
00:39:27,039 --> 00:39:31,119
of inaccurate again I don't know if I

849
00:39:28,659 --> 00:39:33,429
love this but we have that relative

850
00:39:31,119 --> 00:39:36,489
clock concept which is just whatever the

851
00:39:33,429 --> 00:39:38,558
start of the frame was so we know that

852
00:39:36,489 --> 00:39:40,059
we could take that out and now we have

853
00:39:38,559 --> 00:39:41,829
like a much smaller number to deal with

854
00:39:40,059 --> 00:39:43,719
we know that it would this this number

855
00:39:41,829 --> 00:39:47,318
would only be you know roughly on the

856
00:39:43,719 --> 00:39:50,739
order of a couple hundred thousand I'm

857
00:39:47,318 --> 00:39:52,659
sorry a couple hundred million right and

858
00:39:50,739 --> 00:39:56,920
so that's not too bad to represent

859
00:39:52,659 --> 00:39:58,478
potentially in an r32 yeah but again we

860
00:39:56,920 --> 00:40:00,999
might want it we might want to do a

861
00:39:58,478 --> 00:40:03,998
little bit more something a little bit

862
00:40:00,998 --> 00:40:06,368
nicer there I'm not sure okay so if we

863
00:40:03,998 --> 00:40:08,169
do that we now have the ability to sort

864
00:40:06,369 --> 00:40:10,119
of categorize things in the lanes

865
00:40:08,170 --> 00:40:12,579
properly and now we know like roughly

866
00:40:10,119 --> 00:40:16,269
where they are as well we could also do

867
00:40:12,579 --> 00:40:19,568
something where we don't if if the total

868
00:40:16,268 --> 00:40:22,409
size of something is not large enough we

869
00:40:19,568 --> 00:40:26,288
wouldn't maybe consider it so directly

870
00:40:22,409 --> 00:40:27,940
and furthermore we kind of have a

871
00:40:26,289 --> 00:40:30,130
situation where we may want to do

872
00:40:27,940 --> 00:40:34,150
fancier things where we're talking about

873
00:40:30,130 --> 00:40:36,068
a time range a specific time range where

874
00:40:34,150 --> 00:40:38,858
like the current frame is not really

875
00:40:36,068 --> 00:40:41,170
what our time basis wants to be talking

876
00:40:38,858 --> 00:40:43,389
about if that makes sense

877
00:40:41,170 --> 00:40:44,318
so we have some more things to do I'm

878
00:40:43,389 --> 00:40:49,239
gonna leave it like this just

879
00:40:44,318 --> 00:40:50,679
temporarily but yeah but afterwards

880
00:40:49,239 --> 00:40:51,849
we'll kind of we'll kind of look at that

881
00:40:50,679 --> 00:40:55,808
a little bit more in a little bit more

882
00:40:51,849 --> 00:40:56,829
detail in fact now that I think about it

883
00:40:55,809 --> 00:40:59,260
we probably want to address this a

884
00:40:56,829 --> 00:41:01,210
little bit a little bit more

885
00:40:59,260 --> 00:41:02,380
correctly even at the start because like

886
00:41:01,210 --> 00:41:04,240
I said what I kind of want to do

887
00:41:02,380 --> 00:41:07,510
originally was make it so it drills down

888
00:41:04,239 --> 00:41:09,549
kind of gradually and so in order to

889
00:41:07,510 --> 00:41:15,610
make it so it drills down what I would

890
00:41:09,550 --> 00:41:17,560
want to do is I would want to have the

891
00:41:15,610 --> 00:41:19,660
notion that I'm only looking at say

892
00:41:17,559 --> 00:41:22,329
things that are one level deep in the

893
00:41:19,659 --> 00:41:23,799
stack or that are there one level deep

894
00:41:22,329 --> 00:41:26,139
in the stack under something in

895
00:41:23,800 --> 00:41:29,500
particular and that's actually not that

896
00:41:26,139 --> 00:41:31,869
hard to do actually with the way that

897
00:41:29,500 --> 00:41:34,090
we're doing things here so it's actually

898
00:41:31,869 --> 00:41:36,130
pretty straightforward to to make

899
00:41:34,090 --> 00:41:38,530
something like that and I guess I like I

900
00:41:36,130 --> 00:41:40,150
said I don't have to do it just yet but

901
00:41:38,530 --> 00:41:42,340
that is kind of what I would rather aim

902
00:41:40,150 --> 00:41:45,039
for now let's do it let's just do that

903
00:41:42,340 --> 00:41:48,930
so in order to do that what we'd want to

904
00:41:45,039 --> 00:41:53,860
do is see okay for this particular thing

905
00:41:48,929 --> 00:41:56,769
I only want things that are going to be

906
00:41:53,860 --> 00:41:58,660
at the like quote unquote top level but

907
00:41:56,769 --> 00:42:01,389
top level might be differently defined

908
00:41:58,659 --> 00:42:03,009
and so I'll start by doing the simplest

909
00:42:01,389 --> 00:42:04,900
form on top level which is actual top

910
00:42:03,010 --> 00:42:09,460
level which is to say that I'm only

911
00:42:04,900 --> 00:42:11,349
going to record a debug block as taking

912
00:42:09,460 --> 00:42:14,559
up space on our chart meaning as an

913
00:42:11,349 --> 00:42:17,289
actual face in the region if the opening

914
00:42:14,559 --> 00:42:20,469
event right on the on the first open

915
00:42:17,289 --> 00:42:23,559
block right so this this thing here if

916
00:42:20,469 --> 00:42:28,569
that first open block doesn't have any

917
00:42:23,559 --> 00:42:33,880
one above it yeah so if we take a look

918
00:42:28,570 --> 00:42:35,950
at what that means here so remember

919
00:42:33,880 --> 00:42:38,440
we're keeping a list of these and they

920
00:42:35,949 --> 00:42:40,869
have parents so if the parent of the

921
00:42:38,440 --> 00:42:43,170
open block equals zero then I know it's

922
00:42:40,869 --> 00:42:47,230
a top level function that's being called

923
00:42:43,170 --> 00:42:48,789
right if it's parent was something but

924
00:42:47,230 --> 00:42:51,240
that something didn't have a parent I

925
00:42:48,789 --> 00:42:54,159
would know it was two functions deep and

926
00:42:51,239 --> 00:42:55,959
so I'm gonna do some things where we

927
00:42:54,159 --> 00:42:58,719
kind of like get a little progressively

928
00:42:55,960 --> 00:43:02,889
fancier there on how we do this but for

929
00:42:58,719 --> 00:43:06,369
now that would that would do it right so

930
00:43:02,889 --> 00:43:08,230
I think if you excuse me for a second I

931
00:43:06,369 --> 00:43:10,329
just have to quickly I changed that to

932
00:43:08,230 --> 00:43:11,130
being called thread ID so I need to

933
00:43:10,329 --> 00:43:14,219
change

934
00:43:11,130 --> 00:43:18,599
here to be that so we need to implement

935
00:43:14,219 --> 00:43:22,969
get debug thread first free block should

936
00:43:18,599 --> 00:43:22,969
be off of debug state it's just a typo

937
00:43:24,230 --> 00:43:30,179
yeah okay

938
00:43:26,159 --> 00:43:32,779
so that's all good if Tebow block

939
00:43:30,179 --> 00:43:38,879
starting frame and x equals frame index

940
00:43:32,780 --> 00:43:42,930
that would be red so what I actually

941
00:43:38,880 --> 00:43:51,570
need here is our matching block I guess

942
00:43:42,929 --> 00:43:59,549
I want to call it debug open block so

943
00:43:51,570 --> 00:44:04,050
this is our matching block so so what I

944
00:43:59,550 --> 00:44:05,430
want to say here is matching look so I

945
00:44:04,050 --> 00:44:08,780
need to blur those two functions the

946
00:44:05,429 --> 00:44:12,539
thing I need to do is once we actually

947
00:44:08,780 --> 00:44:14,580
find an ending for something so we're

948
00:44:12,539 --> 00:44:17,000
here and we now know that we actually

949
00:44:14,579 --> 00:44:21,119
matched this thing you know what I mean

950
00:44:17,000 --> 00:44:23,219
we need to remove it that that block

951
00:44:21,119 --> 00:44:26,339
this matching block structure is like

952
00:44:23,219 --> 00:44:29,009
sitting there you know and it needs to

953
00:44:26,340 --> 00:44:30,240
be yanked off of the sack so that we

954
00:44:29,010 --> 00:44:32,940
don't keep growing the stack at

955
00:44:30,239 --> 00:44:35,609
infinitum so we want to have the thread

956
00:44:32,940 --> 00:44:39,030
first open block equal matching block

957
00:44:35,610 --> 00:44:43,019
next right or parent I should say so

958
00:44:39,030 --> 00:44:48,330
that it pulls off and thread first open

959
00:44:43,019 --> 00:44:57,480
block itself we would want to put that

960
00:44:48,329 --> 00:44:58,619
on to the free stack like so so yeah so

961
00:44:57,480 --> 00:45:01,050
that's basically what we're talking

962
00:44:58,619 --> 00:45:03,389
about thread first open block the next

963
00:45:01,050 --> 00:45:05,190
free it's gonna be equal to whatever was

964
00:45:03,389 --> 00:45:08,339
there before and then we just we've

965
00:45:05,190 --> 00:45:13,440
popped it off right so we need to

966
00:45:08,340 --> 00:45:17,070
implement these guys because they're not

967
00:45:13,440 --> 00:45:18,240
going to implement themselves and I'm

968
00:45:17,070 --> 00:45:20,720
not sure what we want to do about add

969
00:45:18,239 --> 00:45:20,719
region

970
00:45:24,018 --> 00:45:31,189
how we want that to work exactly but get

971
00:45:27,630 --> 00:45:34,559
debug thread is pretty straightforward

972
00:45:31,190 --> 00:45:35,849
so that's going to take a thread ID and

973
00:45:34,559 --> 00:45:39,479
it's gonna look to see if it could find

974
00:45:35,849 --> 00:45:42,809
it so remember we've got this concept of

975
00:45:39,478 --> 00:45:45,348
the debug thread and we know that our

976
00:45:42,809 --> 00:45:47,910
debug state has you know a list of those

977
00:45:45,349 --> 00:45:50,999
so we can just loop over them really

978
00:45:47,909 --> 00:45:57,889
trivially and say that you know starting

979
00:45:50,998 --> 00:46:06,748
from that starting from that thread and

980
00:45:57,889 --> 00:46:10,608
while it's still equal to something if

981
00:46:06,748 --> 00:46:10,608
we find a thread with this thread ID

982
00:46:15,409 --> 00:46:19,728
then we know that was the thread we

983
00:46:17,429 --> 00:46:19,728
wanted

984
00:46:24,199 --> 00:46:30,328
if we don't so if we get down here and

985
00:46:28,048 --> 00:46:32,369
result has never been set to anything

986
00:46:30,329 --> 00:46:35,010
then we know we need to make another one

987
00:46:32,369 --> 00:46:37,200
of these guys and so in order to do that

988
00:46:35,010 --> 00:46:42,950
again we can just we can just go ahead

989
00:46:37,199 --> 00:46:42,949
and grab that push array and we can

990
00:46:48,409 --> 00:46:55,980
change it to a fish truck so now we've

991
00:46:53,670 --> 00:46:57,809
got a new one and when we get the new

992
00:46:55,980 --> 00:46:59,789
one again we want to add it to that list

993
00:46:57,809 --> 00:47:04,079
so it'll be there so we've got our first

994
00:46:59,789 --> 00:47:10,200
thread oops our debug state our first

995
00:47:04,079 --> 00:47:13,589
thread just needs to get single chains

996
00:47:10,199 --> 00:47:16,409
on there so now we're tracking that

997
00:47:13,588 --> 00:47:17,788
properly and that's good but we need to

998
00:47:16,409 --> 00:47:21,239
figure out some way to add region and we

999
00:47:17,789 --> 00:47:27,150
still have not done that and yeah in

1000
00:47:21,239 --> 00:47:29,368
order to do that we would need to figure

1001
00:47:27,150 --> 00:47:36,950
out where we're gonna put it so here's

1002
00:47:29,369 --> 00:47:36,950
debug frame region result Tran results

1003
00:47:37,309 --> 00:47:41,400
and for now we can just do like the

1004
00:47:39,869 --> 00:47:47,130
cheesy way I'm thought about really how

1005
00:47:41,400 --> 00:47:49,318
we want these to be going hmm but for

1006
00:47:47,130 --> 00:47:51,298
now since we kind of are saying that

1007
00:47:49,318 --> 00:47:53,278
they're all stored in something that

1008
00:47:51,298 --> 00:47:56,699
looks like this really all we would

1009
00:47:53,278 --> 00:47:59,849
doing is saying you know assert that the

1010
00:47:56,699 --> 00:48:02,460
current frame region count is less than

1011
00:47:59,849 --> 00:48:05,490
however many of these regions we

1012
00:48:02,460 --> 00:48:13,380
typically have right so if we do this

1013
00:48:05,489 --> 00:48:14,848
you know max regions per frame and

1014
00:48:13,380 --> 00:48:17,849
that's I said they're just a lot of max

1015
00:48:14,849 --> 00:48:19,769
ish things in here which seems a little

1016
00:48:17,849 --> 00:48:21,088
unnecessary and so that's why I saying

1017
00:48:19,769 --> 00:48:23,190
it might want to just kind of daisy

1018
00:48:21,088 --> 00:48:26,460
chain these things so that we don't have

1019
00:48:23,190 --> 00:48:28,440
to care about that it's just a thought

1020
00:48:26,460 --> 00:48:31,108
it doesn't really matter which way we do

1021
00:48:28,440 --> 00:48:34,048
it it's debug code so as long as it runs

1022
00:48:31,108 --> 00:48:36,529
okay for us we don't have to care we

1023
00:48:34,048 --> 00:48:38,869
never have to battle proof it for an act

1024
00:48:36,530 --> 00:48:40,640
and users machines so at some level you

1025
00:48:38,869 --> 00:48:42,710
can just do whatever is expedient and it

1026
00:48:40,639 --> 00:48:44,210
won't really matter but we do want to

1027
00:48:42,710 --> 00:48:46,250
make sure that it doesn't end up slowing

1028
00:48:44,210 --> 00:48:47,929
our frame time down too much because

1029
00:48:46,250 --> 00:48:50,119
then we won't use it as much and that's

1030
00:48:47,929 --> 00:48:52,449
always bad so we do want to make sure

1031
00:48:50,119 --> 00:48:54,349
we're at least you know somewhat

1032
00:48:52,449 --> 00:48:57,919
conscientious of how this is going to

1033
00:48:54,349 --> 00:48:59,630
work at some level but anyway so if we

1034
00:48:57,920 --> 00:49:01,700
go ahead and just do the standard thing

1035
00:48:59,630 --> 00:49:03,289
here when we get back one of these

1036
00:49:01,699 --> 00:49:05,689
regions all of this stuff is going to

1037
00:49:03,289 --> 00:49:08,090
get initialized sighs I assume but so

1038
00:49:05,690 --> 00:49:12,289
we'll just leave it as it is and let's

1039
00:49:08,090 --> 00:49:14,480
go ahead and compile that so now we have

1040
00:49:12,289 --> 00:49:16,309
everything implemented the only thing

1041
00:49:14,480 --> 00:49:19,099
that we don't do at the moment is our

1042
00:49:16,309 --> 00:49:21,440
frame bar scale is still not such

1043
00:49:19,099 --> 00:49:23,779
anything in particular in order to set

1044
00:49:21,440 --> 00:49:25,639
that I'm not sure what the smartest

1045
00:49:23,780 --> 00:49:26,750
thing to do there would be for the

1046
00:49:25,639 --> 00:49:28,369
moment I'm going to do something that's

1047
00:49:26,750 --> 00:49:30,559
not terribly good for our visualization

1048
00:49:28,369 --> 00:49:33,199
but there will at least let us see what

1049
00:49:30,559 --> 00:49:35,449
we want to see and that is every time we

1050
00:49:33,199 --> 00:49:37,909
see a frame marker I'm going to look to

1051
00:49:35,449 --> 00:49:40,730
see if there was a current frame you can

1052
00:49:37,909 --> 00:49:41,989
see how we do it here and we get the end

1053
00:49:40,730 --> 00:49:43,820
clock so that every frame has the

1054
00:49:41,989 --> 00:49:46,129
beginning an end clock what I'd like to

1055
00:49:43,820 --> 00:49:54,530
do is say all right if I take the begin

1056
00:49:46,130 --> 00:49:57,280
clock and the end clock then I kind of

1057
00:49:54,530 --> 00:49:57,280
have a clock range

1058
00:50:03,880 --> 00:50:09,920
that makes sense so this is like the the

1059
00:50:07,009 --> 00:50:11,929
the total amount of time that's taking

1060
00:50:09,920 --> 00:50:15,380
up and so the frame bar scale if I

1061
00:50:11,929 --> 00:50:16,308
wanted to map that into a range from

1062
00:50:15,380 --> 00:50:19,390
zero to one

1063
00:50:16,309 --> 00:50:22,369
I would just do 1.0 over the clock range

1064
00:50:19,389 --> 00:50:24,018
so I'll just say assuming that the clock

1065
00:50:22,369 --> 00:50:26,358
range is greater than zero so that there

1066
00:50:24,018 --> 00:50:28,818
was some time taken by the frame we'll

1067
00:50:26,358 --> 00:50:30,108
set it up like that okay so I've got

1068
00:50:28,818 --> 00:50:32,318
about ten minutes left on the clock

1069
00:50:30,108 --> 00:50:36,170
because we started a little late today

1070
00:50:32,318 --> 00:50:38,449
so I would like to go ahead and see if I

1071
00:50:36,170 --> 00:50:44,509
get this working that's something which

1072
00:50:38,449 --> 00:50:46,098
I did not do off the bat looks like I

1073
00:50:44,509 --> 00:50:48,498
did it kind of a dumb thing here with

1074
00:50:46,099 --> 00:50:50,209
the with the debug thread affiliation

1075
00:50:48,498 --> 00:50:58,669
which is fine it's fine

1076
00:50:50,208 --> 00:50:59,958
don't worry about it so let's see what

1077
00:50:58,670 --> 00:51:01,548
did I do

1078
00:50:59,958 --> 00:51:11,858
I accidently Boop a thread back on

1079
00:51:01,548 --> 00:51:11,858
itself I did well

1080
00:51:12,320 --> 00:51:18,820
ah so that's not what happened

1081
00:51:16,699 --> 00:51:21,409
I just never initialized the thread ID

1082
00:51:18,820 --> 00:51:25,130
so yeah that's a bit of mistake

1083
00:51:21,409 --> 00:51:26,299
admit that okay it's true obviously if

1084
00:51:25,130 --> 00:51:29,269
you're going to try to look these things

1085
00:51:26,300 --> 00:51:31,130
up you kind of gotta actually set the

1086
00:51:29,269 --> 00:51:32,860
values to something you can't just let

1087
00:51:31,130 --> 00:51:35,480
them be their default values or zero

1088
00:51:32,860 --> 00:51:37,780
because they actually need to match now

1089
00:51:35,480 --> 00:51:40,760
so yeah we need to set that ID properly

1090
00:51:37,780 --> 00:51:42,380
we want to probably set the first open

1091
00:51:40,760 --> 00:51:43,610
block to zero which we didn't do so we

1092
00:51:42,380 --> 00:51:45,140
just kind of received the switcher we

1093
00:51:43,610 --> 00:51:48,950
didn't do any of the stuff that we

1094
00:51:45,139 --> 00:51:52,339
actually need to do on startup the lane

1095
00:51:48,949 --> 00:51:55,609
index is just I think gonna probably be

1096
00:51:52,340 --> 00:51:58,579
frame bar lane count so debug state

1097
00:51:55,610 --> 00:52:00,289
frame bar lane cat will just increment

1098
00:51:58,579 --> 00:52:06,739
that so that each thread gets the

1099
00:52:00,289 --> 00:52:08,119
successive lane index and that's fine so

1100
00:52:06,739 --> 00:52:15,189
let's see here

1101
00:52:08,119 --> 00:52:18,170
how many regions there were I want

1102
00:52:15,190 --> 00:52:22,250
how many regions were there sixty-four

1103
00:52:18,170 --> 00:52:23,900
regions that seems so I think we've got

1104
00:52:22,250 --> 00:52:25,369
another bug here I guess it's been a

1105
00:52:23,900 --> 00:52:27,200
sleepy day so I wouldn't be surprised

1106
00:52:25,369 --> 00:52:31,039
you have a bunch of bugs seems pretty

1107
00:52:27,199 --> 00:52:33,829
fair but I feel like there shouldn't be

1108
00:52:31,039 --> 00:52:35,539
that many regions at the top level of

1109
00:52:33,829 --> 00:52:36,949
any given frame and the reason for that

1110
00:52:35,539 --> 00:52:39,170
is because we're only yeah we're only

1111
00:52:36,949 --> 00:52:40,730
looking at just the top level so how

1112
00:52:39,170 --> 00:52:43,220
many of things can open and close just

1113
00:52:40,730 --> 00:52:45,110
just at the top level I don't know if

1114
00:52:43,219 --> 00:52:46,669
it's gonna be that many now I could be

1115
00:52:45,110 --> 00:52:50,050
wrong about that because I guess that

1116
00:52:46,670 --> 00:52:52,610
could include sort of the other threads

1117
00:52:50,050 --> 00:52:53,060
which are not really inside anything

1118
00:52:52,610 --> 00:52:56,059
else

1119
00:52:53,059 --> 00:53:00,469
so maybe ones that that do like open and

1120
00:52:56,059 --> 00:53:02,840
close more often may be good I don't

1121
00:53:00,469 --> 00:53:06,649
know it seems unlikely I'm a little bit

1122
00:53:02,840 --> 00:53:09,050
a little bit weary of this but I'm gonna

1123
00:53:06,650 --> 00:53:10,849
let it ride just for a second just so we

1124
00:53:09,050 --> 00:53:14,810
can get a little bit more reconnaissance

1125
00:53:10,849 --> 00:53:16,130
on where we are at but it doesn't feel

1126
00:53:14,809 --> 00:53:19,989
me

1127
00:53:16,130 --> 00:53:23,320
with a with a warm sort of fuzzy glowy

1128
00:53:19,989 --> 00:53:25,759
happy bouncy feeling if that makes sense

1129
00:53:23,320 --> 00:53:29,300
so let's take a look

1130
00:53:25,760 --> 00:53:33,170
max regions per frame if I was to set

1131
00:53:29,300 --> 00:53:38,920
that up to something high what would

1132
00:53:33,170 --> 00:53:41,930
happen so it actually does work

1133
00:53:38,920 --> 00:53:44,869
incredibly incredibly slowly I would

1134
00:53:41,929 --> 00:53:46,849
point out so we're taking a time time in

1135
00:53:44,869 --> 00:53:49,549
the debug because this if you turn the

1136
00:53:46,849 --> 00:53:53,659
debug off runs in real time you can see

1137
00:53:49,550 --> 00:53:55,730
how kind of how slow it is already but

1138
00:53:53,659 --> 00:53:58,699
we are actually running so that's

1139
00:53:55,730 --> 00:54:00,139
interesting to some degree so what we

1140
00:53:58,699 --> 00:54:03,259
want to do now is we want to see if we

1141
00:54:00,139 --> 00:54:05,779
can get these things working properly in

1142
00:54:03,260 --> 00:54:07,250
order to do that I'm gonna have to step

1143
00:54:05,780 --> 00:54:09,890
in and see where we're at

1144
00:54:07,250 --> 00:54:12,650
for how the collation goes so I'm going

1145
00:54:09,889 --> 00:54:16,219
to try stepping in here and seeing what

1146
00:54:12,650 --> 00:54:18,320
happens so when we actually start up

1147
00:54:16,219 --> 00:54:20,000
frame things I want to see let's start

1148
00:54:18,320 --> 00:54:22,010
by just seeing what the frame bar scale

1149
00:54:20,000 --> 00:54:27,530
is because that'll give us a little bit

1150
00:54:22,010 --> 00:54:29,600
oh well you know what that was kind of a

1151
00:54:27,530 --> 00:54:32,990
dumb thing that I did now that I think

1152
00:54:29,599 --> 00:54:34,789
about it too so one of the stupid things

1153
00:54:32,989 --> 00:54:38,119
I just one of the things I was thinking

1154
00:54:34,789 --> 00:54:41,210
is I was meant to keep whatever the

1155
00:54:38,119 --> 00:54:44,000
largest one of this was whatever the

1156
00:54:41,210 --> 00:54:44,780
largest clock range was and I did not do

1157
00:54:44,000 --> 00:54:47,750
that

1158
00:54:44,780 --> 00:54:51,350
that was kind of dumb and so I'm gonna

1159
00:54:47,750 --> 00:54:57,800
go ahead and assume something more like

1160
00:54:51,349 --> 00:55:00,349
this here where we just go okay this

1161
00:54:57,800 --> 00:55:01,730
will be the frame bar scale and I'm only

1162
00:55:00,349 --> 00:55:11,949
gonna keep it I'm going to say if the

1163
00:55:01,730 --> 00:55:16,550
frame bar scale right if this guy here

1164
00:55:11,949 --> 00:55:19,429
is greater than this then I'll keep it

1165
00:55:16,550 --> 00:55:23,570
so I'll allow it to get kind of you know

1166
00:55:19,429 --> 00:55:25,519
progressively wider who wants to that's

1167
00:55:23,570 --> 00:55:27,650
what I meant to do otherwise what it's

1168
00:55:25,519 --> 00:55:30,469
going to do is just take the last frames

1169
00:55:27,650 --> 00:55:31,940
time and make it do that and so just

1170
00:55:30,469 --> 00:55:33,439
wanted to fix that while we're still in

1171
00:55:31,940 --> 00:55:37,130
there again not really probably what we

1172
00:55:33,440 --> 00:55:38,298
want to do at the end of things but

1173
00:55:37,130 --> 00:55:41,298
we'll do it

1174
00:55:38,298 --> 00:55:43,849
wait for now okay so I'm just want to

1175
00:55:41,298 --> 00:55:46,338
see what our frame bar scale ends up

1176
00:55:43,849 --> 00:55:50,329
being at the end of all of this so I'm

1177
00:55:46,338 --> 00:55:52,518
gonna go ahead and set it to here I'll

1178
00:55:50,329 --> 00:55:54,079
just step out and then I'm going to take

1179
00:55:52,518 --> 00:55:55,608
a look at like what I'm just gonna

1180
00:55:54,079 --> 00:55:57,318
inspect some of these values so I can

1181
00:55:55,608 --> 00:55:59,869
get a little bit of a feel for what's

1182
00:55:57,318 --> 00:56:01,639
going on so the frame bar scale I'm

1183
00:55:59,869 --> 00:56:03,709
gonna look at what one over the frame

1184
00:56:01,639 --> 00:56:07,188
bar scale is which will give me some

1185
00:56:03,708 --> 00:56:11,808
notion of what its size is so that's

1186
00:56:07,188 --> 00:56:14,328
about 47 million that's the totally

1187
00:56:11,809 --> 00:56:18,289
reasonable value because remember these

1188
00:56:14,329 --> 00:56:21,199
are TTS CSR in clocks so I that seems

1189
00:56:18,289 --> 00:56:22,969
okay I'm like okay with that value and

1190
00:56:21,199 --> 00:56:26,838
so if we take a look at the frames

1191
00:56:22,969 --> 00:56:29,269
themselves if I see I'm like okay so

1192
00:56:26,838 --> 00:56:30,708
there's 62 regions there's two what

1193
00:56:29,268 --> 00:56:32,568
looked like fairly reasonable begin and

1194
00:56:30,708 --> 00:56:35,178
end clock times here are the regions

1195
00:56:32,568 --> 00:56:38,108
themselves there's 62 of them here's

1196
00:56:35,179 --> 00:56:41,749
laying index 0 it goes from here to here

1197
00:56:38,108 --> 00:56:44,298
again that seems like okay like that

1198
00:56:41,748 --> 00:56:46,909
doesn't seem that doesn't seem

1199
00:56:44,298 --> 00:56:48,679
ridiculous so it doesn't look like we're

1200
00:56:46,909 --> 00:56:50,868
computing anything ridiculous right now

1201
00:56:48,679 --> 00:56:53,150
so let's go ahead and take a look at the

1202
00:56:50,869 --> 00:56:55,548
drawing of this when we actually go to

1203
00:56:53,150 --> 00:56:58,249
draw it so I can see because we're not

1204
00:56:55,548 --> 00:56:59,719
seeing anything right now so you know we

1205
00:56:58,248 --> 00:57:01,608
never we don't have any tested drawing

1206
00:56:59,719 --> 00:57:03,469
code for it either so it could just be

1207
00:57:01,608 --> 00:57:06,139
that I did something stupid here or

1208
00:57:03,469 --> 00:57:08,588
wasn't really thinking through how it

1209
00:57:06,139 --> 00:57:11,328
goes or how it should go

1210
00:57:08,588 --> 00:57:15,259
so let's take a look here we are at our

1211
00:57:11,329 --> 00:57:16,509
first region that we're going to draw so

1212
00:57:15,259 --> 00:57:22,969
I'm gonna go ahead and look at what it

1213
00:57:16,509 --> 00:57:27,278
includes here's the min T here is the

1214
00:57:22,969 --> 00:57:31,159
max T again our frame bar scale oops

1215
00:57:27,278 --> 00:57:35,239
debug state oh well I already pulled it

1216
00:57:31,159 --> 00:57:38,949
out into scale so there we go so let's

1217
00:57:35,239 --> 00:57:43,789
take a look at one point no F over scale

1218
00:57:38,949 --> 00:57:49,130
that seems wrong that doesn't seem like

1219
00:57:43,789 --> 00:57:50,749
what I what I saw before right it was a

1220
00:57:49,130 --> 00:57:51,950
much more reasonable value when I looked

1221
00:57:50,748 --> 00:58:02,028
at it just moments ago

1222
00:57:51,949 --> 00:58:24,679
so where is that coming from I would

1223
00:58:02,028 --> 00:58:26,809
like to know hmm I say so it must have

1224
00:58:24,679 --> 00:58:42,528
just only been the first frame that it

1225
00:58:26,809 --> 00:58:44,900
was sensible I suppose it's also

1226
00:58:42,528 --> 00:58:47,420
possible that since we were in the debug

1227
00:58:44,900 --> 00:58:52,778
timing code it would be different

1228
00:58:47,420 --> 00:58:52,778
ah you know what else is true we don't

1229
00:58:53,048 --> 00:58:56,858
well no that's not true either

1230
00:58:58,539 --> 00:59:10,309
hmm so I want to take a closer look at

1231
00:59:07,849 --> 00:59:12,740
that but in the interest of focusing on

1232
00:59:10,309 --> 00:59:14,750
other things first I'm gonna set this to

1233
00:59:12,739 --> 00:59:17,598
a hard-coded value so that I know that

1234
00:59:14,750 --> 00:59:19,400
it will not be part of the issue if you

1235
00:59:17,599 --> 00:59:29,530
will so I'm just going to assume

1236
00:59:19,400 --> 00:59:35,820
something like 50 million right

1237
00:59:29,530 --> 00:59:38,590
I'm gonna sue Mike 50 million per frame

1238
00:59:35,820 --> 00:59:41,200
jimena cycles because if you think about

1239
00:59:38,590 --> 00:59:43,300
like how many cycles there might be if

1240
00:59:41,199 --> 00:59:46,269
you're doing say 30 frames a second and

1241
00:59:43,300 --> 00:59:58,920
you're on a 2 gigahertz machine or

1242
00:59:46,269 --> 01:00:03,670
something like that that's gonna be that

1243
00:59:58,920 --> 01:00:07,750
right which is you know 60 million or

1244
01:00:03,670 --> 01:00:11,200
something like this so that seems

1245
01:00:07,750 --> 01:00:12,940
totally fine as a value so I'm gonna set

1246
01:00:11,199 --> 01:00:14,379
it to that so that we just have some

1247
01:00:12,940 --> 01:00:15,700
known base and we could take it out and

1248
01:00:14,380 --> 01:00:18,360
then we can worry about calculating our

1249
01:00:15,699 --> 01:00:24,189
scale a little bit later yeah so let's

1250
01:00:18,360 --> 01:00:26,079
break that all right so the question is

1251
01:00:24,190 --> 01:00:27,400
why aren't we getting some more

1252
01:00:26,079 --> 01:00:28,869
reasonable values you can actually see

1253
01:00:27,400 --> 01:00:32,170
that there were some values there but

1254
01:00:28,869 --> 01:00:35,109
there just be with little blips so let's

1255
01:00:32,170 --> 01:00:38,050
go ahead and and take a look again let's

1256
01:00:35,110 --> 01:00:39,309
sort of step into that got a well we're

1257
01:00:38,050 --> 01:00:40,990
just about out of time so I'm just going

1258
01:00:39,309 --> 01:00:42,279
to step through this one time with the

1259
01:00:40,989 --> 01:00:44,169
drawing so I can take a look at what

1260
01:00:42,280 --> 01:00:46,500
it's actually doing and then we'll pick

1261
01:00:44,170 --> 01:00:46,500
this up tomorrow

1262
01:00:53,088 --> 01:01:00,389
okay so here we are with our first

1263
01:00:56,550 --> 01:01:02,849
region we have a region index which is

1264
01:01:00,389 --> 01:01:06,210
just which number it is we grab out

1265
01:01:02,849 --> 01:01:07,440
whatever color is happening there should

1266
01:01:06,210 --> 01:01:11,730
probably get the colors in a better way

1267
01:01:07,440 --> 01:01:15,539
too but and so that's fine we take a

1268
01:01:11,730 --> 01:01:20,099
look at what the this min Y and this max

1269
01:01:15,539 --> 01:01:21,539
Y are and they're relatively same value

1270
01:01:20,099 --> 01:01:23,280
same problem is the clock values are

1271
01:01:21,539 --> 01:01:32,239
small enough that they don't span any

1272
01:01:23,280 --> 01:01:32,240
actual space right and then we draw them

1273
01:01:32,659 --> 01:01:37,289
so the question is are all of our values

1274
01:01:35,429 --> 01:01:44,579
coming out that way so let's take a look

1275
01:01:37,289 --> 01:01:46,469
as we come through the next time yeah so

1276
01:01:44,579 --> 01:01:49,009
these just don't take up very much time

1277
01:01:46,469 --> 01:01:49,009
at all right

1278
01:01:56,199 --> 01:01:59,899
so I don't know if that just means I'm

1279
01:01:58,579 --> 01:02:01,340
being overzealous with the amount of

1280
01:01:59,900 --> 01:02:05,269
cycles but it should be counting the

1281
01:02:01,340 --> 01:02:07,100
entire outside cycles which means it

1282
01:02:05,269 --> 01:02:10,280
should have been somewhat close to that

1283
01:02:07,099 --> 01:02:12,799
value that I was suggesting there but it

1284
01:02:10,280 --> 01:02:17,120
clearly isn't so I'm not sure why we'll

1285
01:02:12,800 --> 01:02:19,310
have to take a look and find out which

1286
01:02:17,119 --> 01:02:22,099
indeed yeah so we're almost at the end

1287
01:02:19,309 --> 01:02:25,130
of the regions so yeah I don't know why

1288
01:02:22,099 --> 01:02:26,469
we are so far off there that doesn't

1289
01:02:25,130 --> 01:02:28,789
really make a whole lot of sense to me

1290
01:02:26,469 --> 01:02:33,139
because I feel like this scale should be

1291
01:02:28,789 --> 01:02:35,000
roughly correct if that makes sense I

1292
01:02:33,139 --> 01:02:36,559
also don't know why there's so many of

1293
01:02:35,000 --> 01:02:38,030
those so that also suggests that we

1294
01:02:36,559 --> 01:02:41,179
probably have a different we probably

1295
01:02:38,030 --> 01:02:44,600
have a bug in there as well because

1296
01:02:41,179 --> 01:02:47,899
there shouldn't probably be 64 different

1297
01:02:44,599 --> 01:02:51,440
things open and closing that doesn't

1298
01:02:47,900 --> 01:02:54,619
really you know honest on a single on a

1299
01:02:51,440 --> 01:02:55,130
single frame I don't know doesn't seem

1300
01:02:54,619 --> 01:02:56,960
that likely

1301
01:02:55,130 --> 01:03:00,260
I guess across all the threads maybe

1302
01:02:56,960 --> 01:03:03,170
that's maybe that's possible across all

1303
01:03:00,260 --> 01:03:11,210
the threads maybe but I doesn't sound

1304
01:03:03,170 --> 01:03:16,610
right so if we take a look here opening

1305
01:03:11,210 --> 01:03:18,650
clock - begin clock event clock - we can

1306
01:03:16,610 --> 01:03:24,410
clock that looks like the right values

1307
01:03:18,650 --> 01:03:27,590
to me still and so the only thing that I

1308
01:03:24,409 --> 01:03:30,440
don't know about is is is this is the

1309
01:03:27,590 --> 01:03:34,550
frame bar scale incorrect and I don't

1310
01:03:30,440 --> 01:03:36,139
know oh well it occurs to me though that

1311
01:03:34,550 --> 01:03:39,380
we don't ever multiply by the height

1312
01:03:36,139 --> 01:03:42,079
here so our scale factor is actually

1313
01:03:39,380 --> 01:03:44,180
missing this value so maybe it's

1314
01:03:42,079 --> 01:03:46,400
actually fine right because it needs to

1315
01:03:44,179 --> 01:03:48,440
divide by the the bar scale and then

1316
01:03:46,400 --> 01:03:49,869
multiply out to the chart height so

1317
01:03:48,440 --> 01:03:53,179
actually that could have just been

1318
01:03:49,869 --> 01:03:55,369
largely chalked up to that bug which

1319
01:03:53,179 --> 01:03:59,629
which does seem like like an oversight

1320
01:03:55,369 --> 01:04:01,750
however let's let's go ahead and we go

1321
01:03:59,630 --> 01:04:14,059
through here

1322
01:04:01,750 --> 01:04:16,699
yeah um so yeah looking at this we still

1323
01:04:14,059 --> 01:04:17,840
are getting fairly nonsensical results

1324
01:04:16,699 --> 01:04:20,839
out of this though because we should be

1325
01:04:17,840 --> 01:04:25,970
seeing a bar for every frame and we're

1326
01:04:20,840 --> 01:04:29,090
totally not seeing that right like this

1327
01:04:25,969 --> 01:04:32,089
is this is clearly not making any sense

1328
01:04:29,090 --> 01:04:36,289
in terms of of the individual frames

1329
01:04:32,090 --> 01:04:37,789
themselves yeah so I'm gonna leave that

1330
01:04:36,289 --> 01:04:42,039
because like I said we're out of time

1331
01:04:37,789 --> 01:04:46,309
I'm gonna go to the QA and I believe I

1332
01:04:42,039 --> 01:04:48,259
believe tomorrow we should it should be

1333
01:04:46,309 --> 01:04:52,099
relatively trivial for us to just debug

1334
01:04:48,260 --> 01:04:54,020
that part and get it up into a good

1335
01:04:52,099 --> 01:04:56,150
shape which would be nice because I

1336
01:04:54,019 --> 01:04:58,219
think that's mostly it for getting

1337
01:04:56,150 --> 01:04:59,960
something good on the screen and then we

1338
01:04:58,219 --> 01:05:03,589
can just start focusing on how we want

1339
01:04:59,960 --> 01:05:04,789
to like you know be able to pick from

1340
01:05:03,590 --> 01:05:06,230
the data and like switch between a

1341
01:05:04,789 --> 01:05:07,639
couple of different ways of viewing it

1342
01:05:06,230 --> 01:05:09,019
so that we can see what's going on and

1343
01:05:07,639 --> 01:05:12,159
that's where stuff which I think will be

1344
01:05:09,019 --> 01:05:14,929
nice all right so that's pretty good

1345
01:05:12,159 --> 01:05:16,849
assuming we can do it tomorrow I'm gonna

1346
01:05:14,929 --> 01:05:24,169
go ahead and go to the QA and see if

1347
01:05:16,849 --> 01:05:27,108
people have questions if you have a

1348
01:05:24,170 --> 01:05:29,059
question about what we are doing please

1349
01:05:27,108 --> 01:05:31,480
put Q : the front of it so that I can

1350
01:05:29,059 --> 01:05:31,480
see it

1351
01:05:38,318 --> 01:05:42,858
insofar as is there going to be debug

1352
01:05:41,150 --> 01:05:44,750
visualization of the asset memory chunks

1353
01:05:42,858 --> 01:05:47,838
yeah I would like to do the same thing

1354
01:05:44,750 --> 01:05:50,838
for memory as we're doing for time so

1355
01:05:47,838 --> 01:05:52,759
that we can see not not necessarily just

1356
01:05:50,838 --> 01:06:01,940
the memory asset memory chunks but also

1357
01:05:52,760 --> 01:06:02,990
the other memory chunks as well said -

1358
01:06:01,940 --> 01:06:04,789
can you make a mini episode about

1359
01:06:02,989 --> 01:06:06,858
project management outsourcing freelance

1360
01:06:04,789 --> 01:06:08,839
hiring programming is great but making

1361
01:06:06,858 --> 01:06:13,058
game takes more if not can you point to

1362
01:06:08,838 --> 01:06:16,639
good resource on the topic that's not my

1363
01:06:13,059 --> 01:06:19,960
expertise that you'd have to ask someone

1364
01:06:16,639 --> 01:06:22,219
who does that sort of thing for a living

1365
01:06:19,960 --> 01:06:23,539
do use the same memory model as in

1366
01:06:22,219 --> 01:06:25,068
hammer here when writing utilities or

1367
01:06:23,539 --> 01:06:26,630
meta programs or do you just malloc and

1368
01:06:25,068 --> 01:06:31,099
it wouldn't matter because the thing

1369
01:06:26,630 --> 01:06:32,568
runs once does its thing and closes so

1370
01:06:31,099 --> 01:06:37,548
when you're metaprogramming you

1371
01:06:32,568 --> 01:06:40,068
basically so the point of meta

1372
01:06:37,548 --> 01:06:42,230
programming is to get all the benefits

1373
01:06:40,068 --> 01:06:44,778
that you normally get from going to sort

1374
01:06:42,230 --> 01:06:47,119
of like uploaded crappy thing like

1375
01:06:44,778 --> 01:06:49,969
templates or something without the

1376
01:06:47,119 --> 01:06:51,500
bloated crappiness so actually what you

1377
01:06:49,969 --> 01:06:53,778
do in meta programming is you just have

1378
01:06:51,500 --> 01:06:56,659
all of the stuff that you want for a

1379
01:06:53,778 --> 01:06:59,298
memory allocation and data structures so

1380
01:06:56,659 --> 01:07:02,058
like you know do you want bite you know

1381
01:06:59,298 --> 01:07:05,288
AVL tree do you want hash table do you

1382
01:07:02,059 --> 01:07:08,329
want a Reena allocator do you want

1383
01:07:05,289 --> 01:07:09,890
reference County allocator I mean heck

1384
01:07:08,329 --> 01:07:12,589
if you even you want garbage collection

1385
01:07:09,889 --> 01:07:14,989
whatever you want you can implement

1386
01:07:12,588 --> 01:07:16,250
those systems and then since your meta

1387
01:07:14,989 --> 01:07:18,439
programming it's free for you to just

1388
01:07:16,250 --> 01:07:21,260
basically wave a magic wand and say bonk

1389
01:07:18,440 --> 01:07:24,380
this section works like this and the

1390
01:07:21,260 --> 01:07:26,480
Medeco just generates that thing for you

1391
01:07:24,380 --> 01:07:30,858
because I I daddy is the right way to

1392
01:07:26,480 --> 01:07:34,429
program in my opinion I you know my my

1393
01:07:30,858 --> 01:07:36,108
objection to C++ programming with

1394
01:07:34,429 --> 01:07:38,210
templates like that is that templates

1395
01:07:36,108 --> 01:07:40,818
are fundamentally a bad meta programming

1396
01:07:38,210 --> 01:07:42,619
system it's not that you don't want to

1397
01:07:40,818 --> 01:07:44,900
be able to just write a linked list once

1398
01:07:42,619 --> 01:07:46,548
and then use it that's exactly what you

1399
01:07:44,900 --> 01:07:48,079
want to do in programming the problem is

1400
01:07:46,548 --> 01:07:49,909
see much less doesn't give you any way

1401
01:07:48,079 --> 01:07:55,009
because it's so lousy as a language

1402
01:07:49,909 --> 01:07:56,088
right so when you say like what kind of

1403
01:07:55,009 --> 01:07:58,519
every man should use when you remember

1404
01:07:56,088 --> 01:08:00,469
metaprogramming well you just you pick

1405
01:07:58,518 --> 01:08:02,328
whatever is appropriate for the job and

1406
01:08:00,469 --> 01:08:03,679
it's a lot easier than what I'm doing

1407
01:08:02,329 --> 01:08:06,528
here where I have to hand code things

1408
01:08:03,679 --> 01:08:09,139
because I don't once you do it on a meta

1409
01:08:06,528 --> 01:08:11,059
scale you don't have to worry about how

1410
01:08:09,139 --> 01:08:12,349
expensive it is to implement you only

1411
01:08:11,059 --> 01:08:15,289
have to worry about how expensive it is

1412
01:08:12,349 --> 01:08:17,449
to run and you can pick the thing that

1413
01:08:15,289 --> 01:08:19,609
is the least expensive to run in that

1414
01:08:17,448 --> 01:08:21,348
case that does the thing that you want

1415
01:08:19,609 --> 01:08:25,159
and that's fundamentally how programming

1416
01:08:21,349 --> 01:08:33,170
should but does not work because we

1417
01:08:25,158 --> 01:08:34,670
don't have good languages clover fly

1418
01:08:33,170 --> 01:08:36,199
what are the pros and cons of viewing

1419
01:08:34,670 --> 01:08:37,368
debug information real time versus

1420
01:08:36,198 --> 01:08:45,348
logging them and viewing them after the

1421
01:08:37,368 --> 01:08:48,439
fact speed is number one as we've

1422
01:08:45,349 --> 01:08:49,788
already seen you know it takes up a

1423
01:08:48,439 --> 01:08:51,169
significant amount of the frame time

1424
01:08:49,788 --> 01:08:52,759
potentially to run through all this

1425
01:08:51,170 --> 01:08:54,859
debug information because we're dumping

1426
01:08:52,759 --> 01:08:56,389
lots and lots of debug events at the

1427
01:08:54,859 --> 01:09:01,579
moment and you want to be able to dump a

1428
01:08:56,389 --> 01:09:06,798
lot of them so speed is one for lack of

1429
01:09:01,578 --> 01:09:09,170
a better term accessibility on the on

1430
01:09:06,798 --> 01:09:12,109
the developers workstation not sure how

1431
01:09:09,170 --> 01:09:14,838
else to put it but a typical situation

1432
01:09:12,109 --> 01:09:17,239
in professional game development is that

1433
01:09:14,838 --> 01:09:19,818
I may not be running the game on the

1434
01:09:17,238 --> 01:09:21,608
same machine that I'm that is that I'm

1435
01:09:19,819 --> 01:09:24,529
working that the game that I'm like

1436
01:09:21,609 --> 01:09:25,579
actively developing on so the example

1437
01:09:24,529 --> 01:09:27,469
would be like if I'm going to develop

1438
01:09:25,578 --> 01:09:29,028
this game for PlayStation 4 so your

1439
01:09:27,469 --> 01:09:33,109
drilling campaign here hero PlayStation

1440
01:09:29,029 --> 01:09:36,289
4 well the PlayStation 4 dev kit thing

1441
01:09:33,109 --> 01:09:37,639
may not have like a mouse and keyboard

1442
01:09:36,288 --> 01:09:39,559
hooked up to it or any way of

1443
01:09:37,639 --> 01:09:44,210
interacting with it in a good way right

1444
01:09:39,559 --> 01:09:46,279
and so if you have a way of just sending

1445
01:09:44,210 --> 01:09:49,189
all of those debug events over the

1446
01:09:46,279 --> 01:09:50,929
network so that they can come off of the

1447
01:09:49,189 --> 01:09:53,448
target platform and onto your dev

1448
01:09:50,929 --> 01:09:55,670
machine where you can then view them in

1449
01:09:53,448 --> 01:09:57,018
a nice little application that isn't you

1450
01:09:55,670 --> 01:09:59,440
know some kind of janky thing you have

1451
01:09:57,019 --> 01:10:01,400
to use a gamepad to view right that's

1452
01:09:59,439 --> 01:10:03,618
really

1453
01:10:01,399 --> 01:10:05,299
and so we don't have that situation hey

1454
01:10:03,618 --> 01:10:06,559
I mean hero but you could understand how

1455
01:10:05,300 --> 01:10:08,300
in a professional game development

1456
01:10:06,560 --> 01:10:10,550
setting you may be in a situation where

1457
01:10:08,300 --> 01:10:11,210
that was true so that's that's the

1458
01:10:10,550 --> 01:10:13,989
second thing

1459
01:10:11,210 --> 01:10:16,550
the third thing is historical analysis

1460
01:10:13,988 --> 01:10:18,019
so if we're just keeping the things in

1461
01:10:16,550 --> 01:10:22,639
memory and we're not dumping them out to

1462
01:10:18,020 --> 01:10:24,830
disk this isn't so much a benefit or a

1463
01:10:22,639 --> 01:10:27,020
drawback to doing it real time it's more

1464
01:10:24,829 --> 01:10:28,819
like why might you want to dump them to

1465
01:10:27,020 --> 01:10:30,619
disk even if you did like even if you

1466
01:10:28,819 --> 01:10:31,670
still are viewing them real time you

1467
01:10:30,618 --> 01:10:33,259
might want to dump into this because

1468
01:10:31,670 --> 01:10:36,859
then you can look if you have a

1469
01:10:33,260 --> 01:10:39,949
particular run of the program that you

1470
01:10:36,859 --> 01:10:41,868
think is weird come you know but you're

1471
01:10:39,948 --> 01:10:44,598
not sure you could maybe look and

1472
01:10:41,868 --> 01:10:46,639
compare it to another run and go you

1473
01:10:44,599 --> 01:10:48,469
know was this thing that I that I'm

1474
01:10:46,639 --> 01:10:50,239
seeing is it really that unusual or it

1475
01:10:48,469 --> 01:10:52,189
maybe was in previous runs like how long

1476
01:10:50,238 --> 01:10:53,299
has it's been happening how long do

1477
01:10:52,189 --> 01:10:56,269
these things typically take you know

1478
01:10:53,300 --> 01:11:00,560
that sort of stuff so historical

1479
01:10:56,270 --> 01:11:03,440
analysis either across a long run of the

1480
01:11:00,560 --> 01:11:05,690
same across a long timeline for the same

1481
01:11:03,439 --> 01:11:08,359
run or across multiple timelines for

1482
01:11:05,689 --> 01:11:10,539
multiple revisions of the program are

1483
01:11:08,359 --> 01:11:13,689
both reasons you may want that

1484
01:11:10,539 --> 01:11:15,679
historical data those are probably not

1485
01:11:13,689 --> 01:11:17,089
none of those are probably super

1486
01:11:15,679 --> 01:11:19,429
compelling reasons for us to do it on

1487
01:11:17,090 --> 01:11:22,610
him a hero because we probably won't

1488
01:11:19,429 --> 01:11:24,500
need that much of that but you could see

1489
01:11:22,609 --> 01:11:29,000
again in a professional game development

1490
01:11:24,500 --> 01:11:31,579
setting sometimes you have circumstances

1491
01:11:29,000 --> 01:11:33,469
that are going to be different that can

1492
01:11:31,579 --> 01:11:36,829
warrant wanting these things like

1493
01:11:33,469 --> 01:11:38,539
developing it for a console like having

1494
01:11:36,829 --> 01:11:40,219
play test data that's happening remotely

1495
01:11:38,539 --> 01:11:42,560
right things that we're probably not

1496
01:11:40,219 --> 01:11:44,210
going to encounter I am a hero which

1497
01:11:42,560 --> 01:11:46,070
mean that it we won't get we would not

1498
01:11:44,210 --> 01:11:48,020
get married very much value potentially

1499
01:11:46,069 --> 01:11:49,759
out of it money something like that

1500
01:11:48,020 --> 01:11:51,290
versus the time it would take a simple

1501
01:11:49,760 --> 01:11:53,539
minute so on handmade hero might be a

1502
01:11:51,289 --> 01:11:55,250
bad decision to go make that or if you

1503
01:11:53,539 --> 01:11:56,569
know if you're making an indie game it

1504
01:11:55,250 --> 01:11:59,420
might be a bad decision for you to do

1505
01:11:56,569 --> 01:12:02,000
that if you're talking about a game

1506
01:11:59,420 --> 01:12:03,710
development scenario where you're on a

1507
01:12:02,000 --> 01:12:05,420
team of 50 people and there's a QA

1508
01:12:03,710 --> 01:12:08,389
department and god knows what else is

1509
01:12:05,420 --> 01:12:10,329
going on you know sometimes these these

1510
01:12:08,389 --> 01:12:12,050
things then become valuable to do

1511
01:12:10,329 --> 01:12:14,500
because of these like other

1512
01:12:12,050 --> 01:12:22,970
circumstances that aren't similar

1513
01:12:14,500 --> 01:12:24,439
hmm Abner Cumbre people want you to

1514
01:12:22,970 --> 01:12:26,180
actually drink chocolate wine sometime

1515
01:12:24,439 --> 01:12:28,039
are you up for it yeah I mean I'm going

1516
01:12:26,180 --> 01:12:29,450
to drink chocolate wine at some time but

1517
01:12:28,039 --> 01:12:31,250
I can't promise that I'm going to

1518
01:12:29,449 --> 01:12:33,739
actually even drink a glass of it I mean

1519
01:12:31,250 --> 01:12:35,859
I may drink like a smallest tiny sip and

1520
01:12:33,739 --> 01:12:38,389
go that was absolutely disgusting

1521
01:12:35,859 --> 01:12:40,189
because remember I think wine is awful

1522
01:12:38,390 --> 01:12:41,539
so it's possible that I'll drink

1523
01:12:40,189 --> 01:12:43,279
chocolate wine and decide that chocolate

1524
01:12:41,539 --> 01:12:45,260
wine is actually good but it's also

1525
01:12:43,279 --> 01:12:46,759
possible that I'll think chocolate wine

1526
01:12:45,260 --> 01:12:51,020
tastes too much like regular wine which

1527
01:12:46,760 --> 01:12:53,300
I don't like are you going to indicate

1528
01:12:51,020 --> 01:13:04,610
in clever city no would you recommend it

1529
01:12:53,300 --> 01:13:06,079
I don't know I've never been Elvan

1530
01:13:04,609 --> 01:13:07,399
thanks for mentioning see mere addresses

1531
01:13:06,079 --> 01:13:08,809
a lot of my issues directly and as much

1532
01:13:07,399 --> 01:13:10,250
more human readable what was the get

1533
01:13:08,810 --> 01:13:11,720
token written for for config files

1534
01:13:10,250 --> 01:13:13,640
doesn't seem like 4c code yeah it's for

1535
01:13:11,720 --> 01:13:16,610
config files so it's for stuff that's

1536
01:13:13,640 --> 01:13:19,970
like through equals you know number

1537
01:13:16,609 --> 01:13:22,489
semicolon foo equals string comma

1538
01:13:19,970 --> 01:13:26,980
another string comma number semicolon

1539
01:13:22,489 --> 01:13:30,590
right so like little like expressions

1540
01:13:26,979 --> 01:13:32,679
but no like functions or things like

1541
01:13:30,590 --> 01:13:32,680
that

1542
01:13:44,810 --> 01:13:56,130
how will you do bug the OpenGL direct3d

1543
01:13:47,698 --> 01:13:58,138
stuff when you will ship so are you

1544
01:13:56,130 --> 01:14:00,449
talking about so we don't use any OpenGL

1545
01:13:58,139 --> 01:14:03,480
directory at the moment are you talking

1546
01:14:00,448 --> 01:14:04,319
about once we do once we write OpenGL

1547
01:14:03,479 --> 01:14:07,919
directory stuff

1548
01:14:04,319 --> 01:14:10,439
the answer to how we debug it is you

1549
01:14:07,920 --> 01:14:15,389
know the same way you debug anything on

1550
01:14:10,439 --> 01:14:17,488
a GPU is like ad hoc man debugging on

1551
01:14:15,389 --> 01:14:19,260
GPUs is awful it's it's one of the

1552
01:14:17,488 --> 01:14:23,638
reasons I really don't like GPUs I wish

1553
01:14:19,260 --> 01:14:26,820
we didn't have them it's just the case

1554
01:14:23,639 --> 01:14:29,460
that that you have to do a lot of

1555
01:14:26,819 --> 01:14:32,819
malarkey sometimes you can use some

1556
01:14:29,460 --> 01:14:35,939
tools that sometimes work there's you

1557
01:14:32,819 --> 01:14:38,399
know there's there was pics there's you

1558
01:14:35,939 --> 01:14:41,609
know insight debugger and there was you

1559
01:14:38,399 --> 01:14:43,829
know Grem ADIZ thing and there's the GL

1560
01:14:41,609 --> 01:14:45,868
trace that valve made for linux there's

1561
01:14:43,829 --> 01:14:48,210
there's tools you can use that may help

1562
01:14:45,868 --> 01:14:51,960
you but a lot of times the way I do it

1563
01:14:48,210 --> 01:14:54,630
is just old-fashioned like test you know

1564
01:14:51,960 --> 01:14:55,980
set some things test to see I know that

1565
01:14:54,630 --> 01:14:57,300
I should see this if this happens I

1566
01:14:55,979 --> 01:14:59,729
don't see that okay so I know that this

1567
01:14:57,300 --> 01:15:02,579
isn't working it's just you know a lot

1568
01:14:59,729 --> 01:15:04,738
of times debugging GPU code is it's

1569
01:15:02,579 --> 01:15:08,309
really annoying because you can't step

1570
01:15:04,738 --> 01:15:11,250
into it and and I don't like that i

1571
01:15:08,310 --> 01:15:13,320
think it's lousy I complain about GPUs

1572
01:15:11,250 --> 01:15:15,770
all the time and I mean it I think

1573
01:15:13,319 --> 01:15:17,819
they're a bad thing for programming

1574
01:15:15,770 --> 01:15:18,989
they're sloppy they don't have and I

1575
01:15:17,819 --> 01:15:20,309
said they don't have real debugging

1576
01:15:18,988 --> 01:15:22,349
they're just a bad thing for programming

1577
01:15:20,310 --> 01:15:28,800
they're not CPUs are good and GPUs are

1578
01:15:22,350 --> 01:15:30,420
bad generally and so you know I hope

1579
01:15:28,800 --> 01:15:32,639
that maybe someday that gets rectified

1580
01:15:30,420 --> 01:15:34,859
and and things are more like a CPU that

1581
01:15:32,639 --> 01:15:36,029
have proper debugging support and you

1582
01:15:34,859 --> 01:15:37,259
know like I said sometimes you can get a

1583
01:15:36,029 --> 01:15:38,729
tool depending on your platform

1584
01:15:37,260 --> 01:15:40,170
depending on what card you add depending

1585
01:15:38,729 --> 01:15:41,479
on this depending on depending on

1586
01:15:40,170 --> 01:15:44,368
depending on depending on depending on

1587
01:15:41,479 --> 01:15:45,868
you may be able to get some tools that

1588
01:15:44,368 --> 01:15:49,170
you can use that are shipped by either

1589
01:15:45,868 --> 01:15:52,198
the vendor or some third party which

1590
01:15:49,170 --> 01:15:54,239
will allow you to get some semblance of

1591
01:15:52,198 --> 01:15:56,759
debugging maybe not like actually

1592
01:15:54,238 --> 01:15:58,779
stepping through things but some summits

1593
01:15:56,760 --> 01:16:01,000
of debugging for your GPU

1594
01:15:58,779 --> 01:16:03,759
and sometimes sometimes you won't have

1595
01:16:01,000 --> 01:16:06,930
that and you just have to roll up your

1596
01:16:03,760 --> 01:16:06,930
sleeves into it the old-fashioned way

1597
01:16:13,310 --> 01:16:17,090
TV with Thomas 426 did I misunderstand

1598
01:16:15,590 --> 01:16:18,560
Molly record of character or should

1599
01:16:17,090 --> 01:16:20,659
there be a comic today having something

1600
01:16:18,560 --> 01:16:21,800
to do with your project oh man so you

1601
01:16:20,659 --> 01:16:23,649
actually I didn't know anyone was

1602
01:16:21,800 --> 01:16:26,630
actually going to Molly rocket there's

1603
01:16:23,649 --> 01:16:29,149
no there is a test thing up there I

1604
01:16:26,630 --> 01:16:30,590
didn't know anyone went to it yet there

1605
01:16:29,149 --> 01:16:33,079
is a test page up there but actually

1606
01:16:30,590 --> 01:16:36,550
it'll probably be this coming Monday

1607
01:16:33,079 --> 01:16:39,470
that the that the updates will start

1608
01:16:36,550 --> 01:16:44,090
this was homie for testing I didn't know

1609
01:16:39,470 --> 01:16:46,630
anyone went to my rocket oh sorry but

1610
01:16:44,090 --> 01:16:49,579
yes you interpreted it roughly correctly

1611
01:16:46,630 --> 01:16:52,460
actually the first announcements will

1612
01:16:49,579 --> 01:16:54,350
actually be about handmade hero but then

1613
01:16:52,460 --> 01:16:56,420
there will be information about our

1614
01:16:54,350 --> 01:16:59,960
project so yes starting this coming

1615
01:16:56,420 --> 01:17:02,149
Monday I'm still ironing out CSS issues

1616
01:16:59,960 --> 01:17:04,250
this this is also not actually quite

1617
01:17:02,149 --> 01:17:08,809
what the site looks like yet like I said

1618
01:17:04,250 --> 01:17:11,569
it's a test page the site is a little

1619
01:17:08,810 --> 01:17:14,270
more designed now and has some

1620
01:17:11,569 --> 01:17:16,909
navigation and stuff in it so I was kind

1621
01:17:14,270 --> 01:17:20,210
of working that stuff out so this coming

1622
01:17:16,909 --> 01:17:21,739
Monday will be the first post and then

1623
01:17:20,210 --> 01:17:25,609
every Monday thereafter there'll be a

1624
01:17:21,739 --> 01:17:27,939
new post with information on stuff that

1625
01:17:25,609 --> 01:17:27,939
we're doing

1626
01:17:37,060 --> 01:17:42,090
let me see if there any mark topics

1627
01:17:39,159 --> 01:17:42,090
about what we were looking on

1628
01:17:51,059 --> 01:17:54,639
okay so I don't see any other questions

1629
01:17:53,170 --> 01:17:56,679
that are specifically about what we were

1630
01:17:54,639 --> 01:17:58,359
doing so since we're roughly out of time

1631
01:17:56,679 --> 01:18:08,670
I'm going to go ahead and wrap up here

1632
01:17:58,359 --> 01:18:15,308
it looks like anything else just yeah

1633
01:18:08,670 --> 01:18:17,408
okay so yeah anyway if you if you do

1634
01:18:15,309 --> 01:18:18,969
want sorry I again like I said I didn't

1635
01:18:17,408 --> 01:18:21,698
realize that anyone looks at this page

1636
01:18:18,969 --> 01:18:24,489
yet I was going to announce it as soon

1637
01:18:21,698 --> 01:18:27,158
as we had the the website design done we

1638
01:18:24,488 --> 01:18:28,629
have the content ready for it so we

1639
01:18:27,158 --> 01:18:31,359
could have actually posted the thing

1640
01:18:28,630 --> 01:18:33,429
today and started our updates today but

1641
01:18:31,359 --> 01:18:35,198
web development being what it is I'm

1642
01:18:33,429 --> 01:18:38,230
still not really done with all of this

1643
01:18:35,198 --> 01:18:41,158
stuff that's necessary for like you know

1644
01:18:38,229 --> 01:18:43,928
the CSS awesomeness and all that stuff

1645
01:18:41,158 --> 01:18:45,518
but yeah it will start the updates and

1646
01:18:43,929 --> 01:18:48,760
like I said the first one will actually

1647
01:18:45,519 --> 01:18:50,349
the first one possibly two will actually

1648
01:18:48,760 --> 01:18:51,760
be about handmade hero because there's

1649
01:18:50,349 --> 01:18:53,969
some announcements I have to make about

1650
01:18:51,760 --> 01:18:56,579
that that have kind of been backed up

1651
01:18:53,969 --> 01:19:00,670
because we did we didn't have a website

1652
01:18:56,578 --> 01:19:03,219
and then we'll start a little article

1653
01:19:00,670 --> 01:19:04,840
series about the game we're doing at my

1654
01:19:03,219 --> 01:19:09,179
rocket that'll kind of like lead up to

1655
01:19:04,840 --> 01:19:13,029
an announcement of that as well so yeah

1656
01:19:09,179 --> 01:19:18,059
alright but that said we go ahead and

1657
01:19:13,029 --> 01:19:20,738
wind down the stream here save this guy

1658
01:19:18,059 --> 01:19:22,090
all right thank you everyone for joining

1659
01:19:20,738 --> 01:19:23,319
me for another episode of hand made here

1660
01:19:22,090 --> 01:19:25,690
it's been a pleasure coding with you as

1661
01:19:23,319 --> 01:19:27,189
always if you want to follow along at

1662
01:19:25,689 --> 01:19:29,379
home with the source code you always can

1663
01:19:27,189 --> 01:19:31,328
pre-order the actual game and it comes

1664
01:19:29,380 --> 01:19:32,469
to the source code if so if you want to

1665
01:19:31,328 --> 01:19:33,578
kind of like do your own experiments

1666
01:19:32,469 --> 01:19:37,300
where they'd learn from it and stuff

1667
01:19:33,578 --> 01:19:38,529
like that you could do that and I update

1668
01:19:37,300 --> 01:19:39,969
source code every night so you can

1669
01:19:38,529 --> 01:19:42,219
always stay up to date with whatever I'm

1670
01:19:39,969 --> 01:19:43,300
doing we also have a patreon page if you

1671
01:19:42,219 --> 01:19:44,980
just want to support the video series

1672
01:19:43,300 --> 01:19:46,748
you can subscribe to that we have a

1673
01:19:44,979 --> 01:19:50,078
forum site you can go to if you want to

1674
01:19:46,748 --> 01:19:51,519
ask questions or like look at an

1675
01:19:50,078 --> 01:19:52,779
annotated episode guide that people have

1676
01:19:51,519 --> 01:19:55,210
put together that's pretty cool that

1677
01:19:52,779 --> 01:19:56,828
kind of stuff it's all up there I highly

1678
01:19:55,210 --> 01:19:58,090
recommend checking it out we also have a

1679
01:19:56,828 --> 01:19:58,988
tweet bot that tweets the schedule at

1680
01:19:58,090 --> 01:20:00,159
you so if you want to know when the

1681
01:19:58,988 --> 01:20:03,808
streams gonna be live you want to catch

1682
01:20:00,158 --> 01:20:06,029
it live that's the place to go for that

1683
01:20:03,809 --> 01:20:09,300
I will be back here tomorrow 5:00 p.m.

1684
01:20:06,029 --> 01:20:10,559
Pacific Daylight Time where we will play

1685
01:20:09,300 --> 01:20:11,849
around with our charts and kind of get

1686
01:20:10,559 --> 01:20:13,139
the charts working I think we pretty

1687
01:20:11,849 --> 01:20:14,279
much did all the work that needs to

1688
01:20:13,139 --> 01:20:16,800
happen today so I think we're just

1689
01:20:14,279 --> 01:20:18,300
basically out of debugging and then from

1690
01:20:16,800 --> 01:20:19,889
there we can sort of start to build a

1691
01:20:18,300 --> 01:20:21,418
little bit of a UI on there so we can

1692
01:20:19,889 --> 01:20:23,429
kind of like have a way to you know

1693
01:20:21,418 --> 01:20:24,958
click through things and inspect things

1694
01:20:23,429 --> 01:20:26,279
hover over something and see what

1695
01:20:24,958 --> 01:20:28,318
function it is that's taking the time

1696
01:20:26,279 --> 01:20:31,918
that sort of stuff so we'll give that a

1697
01:20:28,319 --> 01:20:35,999
shot and play around the business a

1698
01:20:31,918 --> 01:20:38,908
little bit that's about it so until then

1699
01:20:35,998 --> 01:20:40,529
I hope that everyone has oops that was

1700
01:20:38,908 --> 01:20:42,568
supposed to be closed until then I hope

1701
01:20:40,529 --> 01:20:44,099
everyone has fun programming and I'll

1702
01:20:42,569 --> 01:20:46,579
see you guys on the Internet take it

1703
01:20:44,099 --> 01:20:46,578
easy everyone

