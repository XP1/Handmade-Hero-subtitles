1
00:00:00,000 --> 00:00:03,928
there we go hello everyone and welcome

2
00:00:02,370 --> 00:00:06,660
to handmade hero the show recode a

3
00:00:03,928 --> 00:00:10,169
complete game live on stream no engines

4
00:00:06,660 --> 00:00:12,120
do libraries it's just us and we do all

5
00:00:10,169 --> 00:00:13,949
of the programming on the game so every

6
00:00:12,119 --> 00:00:15,869
last little bit anything in the game

7
00:00:13,949 --> 00:00:18,960
that needs to get done we do it and we

8
00:00:15,869 --> 00:00:20,399
show exactly how it gets done so what

9
00:00:18,960 --> 00:00:22,469
we're doing right now is we're actually

10
00:00:20,399 --> 00:00:24,419
working on kind of the last piece of our

11
00:00:22,469 --> 00:00:26,579
asset system it's the memory management

12
00:00:24,420 --> 00:00:28,740
and I talked a little bit yesterday

13
00:00:26,579 --> 00:00:32,909
about the kinds of things that we need

14
00:00:28,739 --> 00:00:34,469
to do with this asset system and today I

15
00:00:32,909 --> 00:00:35,968
wanted to kind of do a very simple

16
00:00:34,469 --> 00:00:38,160
implementation of it just so people

17
00:00:35,969 --> 00:00:41,129
could kind of see the very basic nature

18
00:00:38,159 --> 00:00:43,229
of it and then from there we'll kind of

19
00:00:41,128 --> 00:00:44,878
move on to what we sort of think we

20
00:00:43,229 --> 00:00:48,000
might need to do for a more serious

21
00:00:44,878 --> 00:00:49,378
shipping version right and so yesterday

22
00:00:48,000 --> 00:00:50,759
I kind of prep the code for it and today

23
00:00:49,378 --> 00:00:56,939
I'll just go ahead and do sort of the

24
00:00:50,759 --> 00:00:58,289
obvious thing and off we go all right if

25
00:00:56,939 --> 00:01:00,929
you would like to code along with me

26
00:00:58,289 --> 00:01:03,660
today is day 1 58 you can go ahead and

27
00:01:00,929 --> 00:01:05,760
unzipped a 157 source code into a

28
00:01:03,659 --> 00:01:09,209
directory and that is the source code

29
00:01:05,760 --> 00:01:13,740
that I'm starting with today and so I

30
00:01:09,209 --> 00:01:15,030
will go ahead and get started and what

31
00:01:13,739 --> 00:01:16,530
we can do today you know there are some

32
00:01:15,030 --> 00:01:18,060
questions in the pre stream someone was

33
00:01:16,530 --> 00:01:20,849
asking if you can just use virtual

34
00:01:18,060 --> 00:01:22,680
memory to solve this problem with of the

35
00:01:20,849 --> 00:01:25,709
of the address spaces and so on and I

36
00:01:22,680 --> 00:01:28,409
was saying that well you know if you if

37
00:01:25,709 --> 00:01:31,169
you want to require a 64-bit address

38
00:01:28,409 --> 00:01:34,890
space for the game that's totally you

39
00:01:31,170 --> 00:01:37,439
know that that could be but if not then

40
00:01:34,890 --> 00:01:38,969
you run the risk of blowing out the page

41
00:01:37,438 --> 00:01:40,469
table like like running out of space in

42
00:01:38,969 --> 00:01:42,840
the in the virtual page table and

43
00:01:40,469 --> 00:01:44,908
windows you've got like other issues to

44
00:01:42,840 --> 00:01:46,618
worry about in 32-bit that make it maybe

45
00:01:44,909 --> 00:01:49,350
potentially not such a good idea now

46
00:01:46,618 --> 00:01:51,450
we've never decided that we have to ship

47
00:01:49,349 --> 00:01:54,328
a 32-bit version of handmade hero right

48
00:01:51,450 --> 00:01:56,520
so I don't want to say oh you know don't

49
00:01:54,328 --> 00:01:58,379
do that or or whatever because we need

50
00:01:56,519 --> 00:02:00,030
to ship 3d vision I don't know you know

51
00:01:58,379 --> 00:02:01,949
when it comes time to ship handmade hero

52
00:02:00,030 --> 00:02:03,659
we can you know sort of think about

53
00:02:01,950 --> 00:02:08,429
things like that so what guess what I'd

54
00:02:03,659 --> 00:02:10,229
say there is you know we could decide to

55
00:02:08,429 --> 00:02:12,180
just program primarily 260 for a bit and

56
00:02:10,229 --> 00:02:13,690
then worry about downgrading to 32-bit

57
00:02:12,180 --> 00:02:15,010
at the end of the

58
00:02:13,689 --> 00:02:16,659
logically we want to ship it if we

59
00:02:15,009 --> 00:02:18,310
decide we need to you know that's not

60
00:02:16,659 --> 00:02:20,319
the end of the world you can do that

61
00:02:18,310 --> 00:02:22,750
sort of stuff our code will not be

62
00:02:20,319 --> 00:02:26,469
architected in such a way as to make

63
00:02:22,750 --> 00:02:27,729
that an impossible thing to do but like

64
00:02:26,469 --> 00:02:29,500
I said I don't know you know I don't

65
00:02:27,729 --> 00:02:32,199
know if we want to do that or not it's

66
00:02:29,500 --> 00:02:35,110
certainly something that's a plausible

67
00:02:32,199 --> 00:02:37,479
decision these days like you could very

68
00:02:35,110 --> 00:02:40,150
well make reasonable money on a game

69
00:02:37,479 --> 00:02:42,459
that only supported 64 a bit operating

70
00:02:40,150 --> 00:02:45,490
systems but at the same time it's like

71
00:02:42,460 --> 00:02:46,870
well you know are you willing to

72
00:02:45,490 --> 00:02:48,189
potentially give up a certain segment of

73
00:02:46,870 --> 00:02:50,409
the market who just simply can't play

74
00:02:48,189 --> 00:02:51,579
the game now because it's it's only 32

75
00:02:50,409 --> 00:02:53,439
bit right because we know it's out there

76
00:02:51,580 --> 00:02:55,780
we know fifteen percent of the Steam

77
00:02:53,439 --> 00:02:58,810
users don't have 64 bit operating

78
00:02:55,780 --> 00:03:00,759
systems right and so it's just something

79
00:02:58,810 --> 00:03:02,770
to think about there but what I could

80
00:03:00,759 --> 00:03:06,250
show here since i already said like I

81
00:03:02,770 --> 00:03:08,080
want to do one version of the system

82
00:03:06,250 --> 00:03:09,879
that's very basic just so you can kind

83
00:03:08,080 --> 00:03:12,880
of see what the idea is what i could do

84
00:03:09,879 --> 00:03:16,030
is show you how to do it doing it that

85
00:03:12,879 --> 00:03:16,900
way with the 64 bit memory face that you

86
00:03:16,030 --> 00:03:18,280
know something that would work with

87
00:03:16,900 --> 00:03:20,500
64-bit memory space for sure but that

88
00:03:18,280 --> 00:03:22,539
probably wouldn't work so well in 32-bit

89
00:03:20,500 --> 00:03:24,159
and then you know we can maybe move on

90
00:03:22,539 --> 00:03:25,719
from there that way people who want to

91
00:03:24,159 --> 00:03:27,579
do it that way you can see how to do it

92
00:03:25,719 --> 00:03:29,349
it's very very straightforward you've

93
00:03:27,580 --> 00:03:30,969
already seen the virtual alec call and

94
00:03:29,349 --> 00:03:33,699
that's really all you really need is

95
00:03:30,969 --> 00:03:34,930
virtual alec and virtual free so i can

96
00:03:33,699 --> 00:03:36,250
show you how to do that and maybe that's

97
00:03:34,930 --> 00:03:38,020
what to do today because like i said we

98
00:03:36,250 --> 00:03:42,219
need to build the simple version first

99
00:03:38,020 --> 00:03:45,340
anyway so here's where we're at here's

100
00:03:42,219 --> 00:03:47,680
the asset system right and if we run the

101
00:03:45,340 --> 00:03:49,539
asset system I've intentionally oops we

102
00:03:47,680 --> 00:03:51,640
already loaded that I've intentionally

103
00:03:49,539 --> 00:03:53,799
made it so that we really constrained

104
00:03:51,639 --> 00:03:56,079
the memory for the asset system so that

105
00:03:53,800 --> 00:03:57,250
because it's not capable of doing any of

106
00:03:56,080 --> 00:03:59,709
this virtual memory stuff that I've

107
00:03:57,250 --> 00:04:01,360
talked about what happens now is as soon

108
00:03:59,709 --> 00:04:02,979
as i try to instantiate a hero we

109
00:04:01,360 --> 00:04:05,230
immediately hit the assertion that says

110
00:04:02,979 --> 00:04:07,629
we're out of space in the asset system

111
00:04:05,229 --> 00:04:09,789
right you can see here this it's on a

112
00:04:07,629 --> 00:04:11,319
push size call in the arena so basically

113
00:04:09,789 --> 00:04:13,060
what happens is the load bitmap call

114
00:04:11,319 --> 00:04:15,009
tries to load in some of the hero assets

115
00:04:13,060 --> 00:04:16,660
it goes to do the push size and it's

116
00:04:15,009 --> 00:04:20,039
just plain out of memory in the arena

117
00:04:16,660 --> 00:04:24,180
like that's the end of it right and so

118
00:04:20,040 --> 00:04:24,180
what are you gonna do right

119
00:04:26,529 --> 00:04:32,538
so if we want to try to address that

120
00:04:29,569 --> 00:04:34,460
problem what we would need to do is we

121
00:04:32,538 --> 00:04:36,500
need to start coming up with ways of

122
00:04:34,459 --> 00:04:38,180
seeing whether or not we're running out

123
00:04:36,500 --> 00:04:41,240
of memory and if we are running out of

124
00:04:38,180 --> 00:04:43,879
memory we have to evict assets you know

125
00:04:41,240 --> 00:04:47,210
older assets or something so that we can

126
00:04:43,879 --> 00:04:49,158
ensure that we always have enough memory

127
00:04:47,209 --> 00:04:52,609
to load in new assets that we know that

128
00:04:49,158 --> 00:04:55,189
we're going to need shortly right so

129
00:04:52,610 --> 00:04:56,930
let's go ahead and change first to doing

130
00:04:55,189 --> 00:04:58,399
an allocation scheme that just gets the

131
00:04:56,930 --> 00:05:00,019
memory from the operating system and

132
00:04:58,399 --> 00:05:02,120
then releases the memory back to the

133
00:05:00,019 --> 00:05:05,478
operating system every time that we want

134
00:05:02,120 --> 00:05:07,158
to load an asset okay because we can do

135
00:05:05,478 --> 00:05:09,500
that very easily by going through

136
00:05:07,158 --> 00:05:11,120
handmade platform and on a 64-bit

137
00:05:09,500 --> 00:05:12,560
operating system this is probably

138
00:05:11,120 --> 00:05:14,598
something you could just go ahead and

139
00:05:12,560 --> 00:05:16,579
ship like I don't suspect you would have

140
00:05:14,598 --> 00:05:19,598
a lot of problems with it virtual Alex

141
00:05:16,579 --> 00:05:22,788
should probably be reasonably fast on

142
00:05:19,598 --> 00:05:24,259
you know on on Windows I would think I

143
00:05:22,788 --> 00:05:26,240
don't know we could certainly time it

144
00:05:24,259 --> 00:05:27,710
and make sure that that's the case but

145
00:05:26,240 --> 00:05:29,180
if we wanted to hear right we could just

146
00:05:27,709 --> 00:05:31,008
go ahead and say that our platform api

147
00:05:29,180 --> 00:05:32,718
was going to get the ability to

148
00:05:31,009 --> 00:05:34,340
generically get memory from the

149
00:05:32,718 --> 00:05:36,709
operating system and return memory from

150
00:05:34,339 --> 00:05:38,839
the operating system right and that

151
00:05:36,709 --> 00:05:41,239
would look something like platform you

152
00:05:38,839 --> 00:05:44,658
know allocate memory and platform

153
00:05:41,240 --> 00:05:46,728
deallocate memory and we could actually

154
00:05:44,658 --> 00:05:48,620
leave these in here as well for another

155
00:05:46,728 --> 00:05:50,839
reason which is that one thing we might

156
00:05:48,620 --> 00:05:52,430
want to do a little later on when I kind

157
00:05:50,839 --> 00:05:54,829
of wrap up memory stuff because we're

158
00:05:52,430 --> 00:05:56,528
going to go over a few things sort of

159
00:05:54,829 --> 00:05:58,848
towards the end of the engine work

160
00:05:56,528 --> 00:06:01,848
another thing I can show you how to do

161
00:05:58,848 --> 00:06:03,560
once we have the concept of platform

162
00:06:01,848 --> 00:06:07,939
allocate memory and dll cape memory

163
00:06:03,560 --> 00:06:10,009
right is we can go ahead and make it so

164
00:06:07,939 --> 00:06:12,019
that instead of allocating all the

165
00:06:10,009 --> 00:06:14,060
memory up front in the game we can make

166
00:06:12,019 --> 00:06:15,978
it so that it just grows ad infinitum so

167
00:06:14,060 --> 00:06:17,269
that if you want to do a run of handmade

168
00:06:15,978 --> 00:06:18,918
here where you just say you know what

169
00:06:17,269 --> 00:06:21,589
use as much memory as you want just keep

170
00:06:18,918 --> 00:06:28,189
on going have a party we could do that

171
00:06:21,589 --> 00:06:30,049
right it's actually really easy we

172
00:06:28,189 --> 00:06:33,860
wouldn't we don't have to change any of

173
00:06:30,050 --> 00:06:35,088
the code that we've got it will all just

174
00:06:33,860 --> 00:06:36,468
work there just a couple of minor

175
00:06:35,088 --> 00:06:37,639
modifications and since I know that

176
00:06:36,468 --> 00:06:40,490
people ask about that a lot

177
00:06:37,639 --> 00:06:42,889
it's something I could show so I'm not

178
00:06:40,490 --> 00:06:44,658
even going to call these debug because

179
00:06:42,889 --> 00:06:46,879
I'm just going to say that we may just

180
00:06:44,658 --> 00:06:50,478
allow them to be actual platform calls

181
00:06:46,879 --> 00:06:53,028
and you know whether we actually ship a

182
00:06:50,478 --> 00:06:54,769
version that allows it to ever call it I

183
00:06:53,028 --> 00:06:57,348
don't know if we'll do that or not but

184
00:06:54,769 --> 00:06:59,418
point being it'll be fine with me either

185
00:06:57,348 --> 00:07:00,498
way so let me show you how these would

186
00:06:59,418 --> 00:07:02,299
work they're really really

187
00:07:00,499 --> 00:07:03,409
straightforward most of you probably

188
00:07:02,300 --> 00:07:08,860
already know what that's going to look

189
00:07:03,408 --> 00:07:12,740
like really all this is is we would take

190
00:07:08,860 --> 00:07:16,009
and an ad in here some kind of a

191
00:07:12,740 --> 00:07:18,620
platform allocate memory call and all it

192
00:07:16,009 --> 00:07:22,460
would do was return you a pointer when

193
00:07:18,620 --> 00:07:23,978
you pass it a size right so you would

194
00:07:22,459 --> 00:07:32,299
call in and you would pass it a size

195
00:07:23,978 --> 00:07:34,668
like so that and then we would obviously

196
00:07:32,300 --> 00:07:37,699
need the corresponding deallocate call

197
00:07:34,668 --> 00:07:39,348
which just does a standard free right so

198
00:07:37,699 --> 00:07:42,740
here we go this is going to be platform

199
00:07:39,348 --> 00:07:45,110
okay memory and we're going to need the

200
00:07:42,740 --> 00:07:47,210
same thing for deallocate memory right

201
00:07:45,110 --> 00:07:52,939
and all that's going to do is take that

202
00:07:47,209 --> 00:07:56,088
pointer and create the corresponding

203
00:07:52,939 --> 00:07:58,129
call right so if we wanted to be able to

204
00:07:56,088 --> 00:07:59,990
get more memory for the operating system

205
00:07:58,129 --> 00:08:02,270
on demand that's the only thing that

206
00:07:59,990 --> 00:08:03,829
really needs to happen it's very very

207
00:08:02,269 --> 00:08:05,508
straightforward and in order to

208
00:08:03,829 --> 00:08:08,418
implement that in windows again you've

209
00:08:05,509 --> 00:08:11,210
pretty much already seen the call the

210
00:08:08,418 --> 00:08:12,799
calls happen that we would need they are

211
00:08:11,209 --> 00:08:14,478
also really straightforward so again

212
00:08:12,800 --> 00:08:15,588
this is really just for everyone who's

213
00:08:14,478 --> 00:08:17,000
watched handmade hero since the

214
00:08:15,588 --> 00:08:18,740
beginning this should be a total walk in

215
00:08:17,000 --> 00:08:20,990
the park really really really

216
00:08:18,740 --> 00:08:23,478
straightforward so if you take a look at

217
00:08:20,990 --> 00:08:27,588
how this works we'd have our platform

218
00:08:23,478 --> 00:08:31,818
allocate memory platform deallocate

219
00:08:27,588 --> 00:08:36,490
memory and there they are win32 allocate

220
00:08:31,819 --> 00:08:39,050
memory and then to to deallocate memory

221
00:08:36,490 --> 00:08:40,788
and so we really don't even have to do

222
00:08:39,049 --> 00:08:45,500
anything new you've already seen it it's

223
00:08:40,788 --> 00:08:47,629
just this virtual Alec idea right and I

224
00:08:45,500 --> 00:08:49,269
assume we also did virtual free at some

225
00:08:47,629 --> 00:08:51,730
point yes we did

226
00:08:49,269 --> 00:08:53,949
okay and so if you take a look at how

227
00:08:51,730 --> 00:08:56,680
these work again super super basic we

228
00:08:53,950 --> 00:08:59,350
just have a call to the operating system

229
00:08:56,679 --> 00:09:02,620
that says we would like to allocate some

230
00:08:59,350 --> 00:09:08,740
virtual memory we go ahead and you know

231
00:09:02,620 --> 00:09:11,649
ask what the size of it is we know that

232
00:09:08,740 --> 00:09:14,110
that's been passed in now so just

233
00:09:11,649 --> 00:09:17,409
whatever the user asked for we can

234
00:09:14,110 --> 00:09:19,120
commit it right and then we return that

235
00:09:17,409 --> 00:09:20,439
and if it fails it fails we return a

236
00:09:19,120 --> 00:09:22,330
null pointer doesn't matter it still

237
00:09:20,440 --> 00:09:23,470
works just fine the caller that knows

238
00:09:22,330 --> 00:09:24,940
they couldn't get anymore remember from

239
00:09:23,470 --> 00:09:27,639
the operating system which is what we

240
00:09:24,940 --> 00:09:28,870
would want same is true for D allocating

241
00:09:27,639 --> 00:09:32,169
memory and again these are just so

242
00:09:28,870 --> 00:09:33,789
simple there's nothing to them we don't

243
00:09:32,169 --> 00:09:35,949
even need to think about this API it's

244
00:09:33,789 --> 00:09:37,149
just totally basic and there's really

245
00:09:35,950 --> 00:09:40,030
much yeah there's really absolutely

246
00:09:37,149 --> 00:09:42,459
nothing to it so we've got the virtual

247
00:09:40,029 --> 00:09:45,370
free virtual free takes whatever the

248
00:09:42,460 --> 00:09:47,350
memory is and releases it right that's

249
00:09:45,370 --> 00:09:48,820
it and we could double check there I

250
00:09:47,350 --> 00:09:51,009
don't know if virtual free allows you to

251
00:09:48,820 --> 00:09:56,980
pass 0 pointers but we could double

252
00:09:51,009 --> 00:09:59,169
check that's all she wrote really really

253
00:09:56,980 --> 00:10:02,830
straightforward so if you come in here

254
00:09:59,169 --> 00:10:05,889
and add those to our platform api table

255
00:10:02,830 --> 00:10:11,110
we've got allocate memory empty allocate

256
00:10:05,889 --> 00:10:15,279
memory 32 allocate memory and through to

257
00:10:11,110 --> 00:10:17,950
deallocate memory right and that would

258
00:10:15,279 --> 00:10:18,970
be all we would need to do now we can

259
00:10:17,950 --> 00:10:22,540
just go ahead and allocate and

260
00:10:18,970 --> 00:10:27,850
deallocate memory all we want and off

261
00:10:22,539 --> 00:10:32,769
you go so there's a couple things to

262
00:10:27,850 --> 00:10:35,590
think about here right temporarily if we

263
00:10:32,769 --> 00:10:37,870
did this we would no longer be able to

264
00:10:35,590 --> 00:10:41,590
use our looped live co-editing correctly

265
00:10:37,870 --> 00:10:44,919
right because when we do those virtual

266
00:10:41,590 --> 00:10:46,450
Alex virtual freeze those pieces of

267
00:10:44,919 --> 00:10:54,370
memory are not going to get written out

268
00:10:46,450 --> 00:10:56,530
right if you think about it so when we

269
00:10:54,370 --> 00:11:00,279
reload memory the memory is going to be

270
00:10:56,529 --> 00:11:03,159
the same as it was at the end of the

271
00:11:00,279 --> 00:11:06,100
loop point right so that's something

272
00:11:03,159 --> 00:11:07,149
think about just just for a second I'm

273
00:11:06,100 --> 00:11:08,528
going to push forward because you don't

274
00:11:07,149 --> 00:11:09,789
care about that particular thing right

275
00:11:08,528 --> 00:11:13,269
now but that's going to be something

276
00:11:09,789 --> 00:11:15,549
that we have to address in a little bit

277
00:11:13,269 --> 00:11:17,980
if we decided to keep this scheme going

278
00:11:15,549 --> 00:11:19,448
if we replace the scheme with a block

279
00:11:17,980 --> 00:11:20,709
allocator like I was sort of saying then

280
00:11:19,448 --> 00:11:22,958
we don't care because it just gets

281
00:11:20,708 --> 00:11:24,878
written that properly so just keep that

282
00:11:22,958 --> 00:11:26,739
in the back of your mind that this would

283
00:11:24,879 --> 00:11:29,019
break loop live code editing because

284
00:11:26,740 --> 00:11:30,970
we're not saving these buffers out now

285
00:11:29,019 --> 00:11:33,759
it's still pretty easy for us to fix

286
00:11:30,970 --> 00:11:37,839
that and you know that's sort of a

287
00:11:33,759 --> 00:11:40,750
separate issue but yeah all right so

288
00:11:37,839 --> 00:11:44,709
here we go let's go into our handmade

289
00:11:40,750 --> 00:11:46,958
asset stuff and show what we would do

290
00:11:44,708 --> 00:11:48,568
now to start to sort of a to start to

291
00:11:46,958 --> 00:11:54,729
address the problem that we were having

292
00:11:48,568 --> 00:11:57,188
so when we do our load bitmap call again

293
00:11:54,730 --> 00:11:59,680
we end up in a situation where doing the

294
00:11:57,188 --> 00:12:01,208
load bitmap call we need to make sure

295
00:11:59,679 --> 00:12:03,549
that we can actually get the amount of

296
00:12:01,208 --> 00:12:06,578
memory that we need and at the moment we

297
00:12:03,549 --> 00:12:07,659
don't really know very much about well

298
00:12:06,578 --> 00:12:14,258
we don't really know much about any of

299
00:12:07,659 --> 00:12:16,778
this we don't really know what we can

300
00:12:14,259 --> 00:12:18,100
safely free all we know is how much

301
00:12:16,778 --> 00:12:19,659
memory we're actually going to need and

302
00:12:18,100 --> 00:12:21,970
so what I talked about at the end of

303
00:12:19,659 --> 00:12:23,740
last stream is that what we need to do

304
00:12:21,970 --> 00:12:26,528
here is we need to make there be a safe

305
00:12:23,740 --> 00:12:28,120
way we can free enough memory to allow

306
00:12:26,528 --> 00:12:31,750
us to load the bitmap that we want to

307
00:12:28,120 --> 00:12:35,620
load and so the question becomes how

308
00:12:31,750 --> 00:12:37,600
much of that you know how do we want to

309
00:12:35,620 --> 00:12:39,429
approach that problem we can't just

310
00:12:37,600 --> 00:12:41,709
start freeing memory inside load bitmap

311
00:12:39,429 --> 00:12:44,379
because load bitmap is called in the

312
00:12:41,708 --> 00:12:46,299
middle of frames which may be using some

313
00:12:44,379 --> 00:12:49,240
of the bitmaps that are on our list

314
00:12:46,299 --> 00:12:51,399
right so we can't very well go and just

315
00:12:49,240 --> 00:12:52,808
free some memory arbitrarily because if

316
00:12:51,399 --> 00:12:55,568
we were going to free memory arbitrarily

317
00:12:52,808 --> 00:12:58,899
like that we would end up in a bit of a

318
00:12:55,568 --> 00:13:02,198
bind so we have a couple different

319
00:12:58,899 --> 00:13:05,188
options certainly we have a couple ways

320
00:13:02,198 --> 00:13:07,958
we could choose to try to address that

321
00:13:05,188 --> 00:13:10,058
but you know i'm not sure what would be

322
00:13:07,958 --> 00:13:11,948
the most efficacious way one way to

323
00:13:10,058 --> 00:13:13,688
address that would be to buffer up all

324
00:13:11,948 --> 00:13:15,129
the requests to load bitmaps another one

325
00:13:13,688 --> 00:13:16,939
would be and i talked about both these

326
00:13:15,129 --> 00:13:18,860
would be to always key

327
00:13:16,940 --> 00:13:21,550
some amount of memory free that's like

328
00:13:18,860 --> 00:13:24,919
roughly commensurate you know basically

329
00:13:21,549 --> 00:13:26,359
always making sure that we kind of do

330
00:13:24,919 --> 00:13:28,279
the allocates and then do the freeze

331
00:13:26,360 --> 00:13:30,110
later and since we're just showing the

332
00:13:28,279 --> 00:13:31,939
simplest possible way to do that I'm

333
00:13:30,110 --> 00:13:33,950
going to take the approach that we're

334
00:13:31,940 --> 00:13:35,420
not going to hit a hard limit just yet

335
00:13:33,950 --> 00:13:38,390
we're going to have basically a soft

336
00:13:35,419 --> 00:13:41,360
limit if that makes sense so let me show

337
00:13:38,389 --> 00:13:43,370
you how to do that inside the asset

338
00:13:41,360 --> 00:13:45,500
system what I'm going to do is I'm going

339
00:13:43,370 --> 00:13:47,899
to start tracking how much memory it's

340
00:13:45,500 --> 00:13:50,120
actually using right so going to make it

341
00:13:47,899 --> 00:13:56,269
in you 60 for here that's like total

342
00:13:50,120 --> 00:14:01,279
memory used okay and when we start up i

343
00:13:56,269 --> 00:14:06,110
am going to initialize that so that

344
00:14:01,279 --> 00:14:09,319
assets total member used is 0 right

345
00:14:06,110 --> 00:14:12,850
pretty straightforward what I will then

346
00:14:09,320 --> 00:14:16,790
do is every time we load something I'm

347
00:14:12,850 --> 00:14:18,680
going to have it go through a call that

348
00:14:16,789 --> 00:14:21,980
actually accounts for the memory that

349
00:14:18,679 --> 00:14:26,569
it's going to get right so something

350
00:14:21,980 --> 00:14:32,120
like you know allocate or acquire asset

351
00:14:26,570 --> 00:14:35,720
memory right and in that call you'll

352
00:14:32,120 --> 00:14:40,460
pass like the game assets thing and you

353
00:14:35,720 --> 00:14:42,410
will pass the size that you wanted and

354
00:14:40,460 --> 00:14:44,509
then what we'll do is we'll just do the

355
00:14:42,409 --> 00:14:47,029
allocation there and we'll increment the

356
00:14:44,509 --> 00:14:51,200
amount of memory used by the size right

357
00:14:47,029 --> 00:14:57,589
so we do something like result equals

358
00:14:51,200 --> 00:15:00,620
flat allocate memory at that size and

359
00:14:57,590 --> 00:15:02,300
then we will add the size and I guess we

360
00:15:00,620 --> 00:15:05,139
should assume that only if we actually

361
00:15:02,299 --> 00:15:08,240
allocate it you know return that size

362
00:15:05,139 --> 00:15:11,049
okay so that's that's pretty

363
00:15:08,240 --> 00:15:11,049
straightforward right

364
00:15:14,070 --> 00:15:18,790
okay so that'll do you acquire asset

365
00:15:17,620 --> 00:15:21,399
memory and then what we want to do here

366
00:15:18,789 --> 00:15:25,000
is do something where we release memory

367
00:15:21,399 --> 00:15:26,350
so we'll do a release asset memory and

368
00:15:25,000 --> 00:15:28,000
give it back to the system so what we'll

369
00:15:26,350 --> 00:15:31,750
do there is say okay we'll call that

370
00:15:28,000 --> 00:15:33,490
here is our void pointer right and the

371
00:15:31,750 --> 00:15:35,649
problem that will have here is we

372
00:15:33,490 --> 00:15:37,659
actually need to be able to know what

373
00:15:35,649 --> 00:15:40,750
the size of that memory actually was

374
00:15:37,659 --> 00:15:43,240
right so we need to pass the size into

375
00:15:40,750 --> 00:15:45,070
our freeing function as well which is

376
00:15:43,240 --> 00:15:46,840
kind of a little janky but you know we

377
00:15:45,070 --> 00:15:48,640
just that's what we need to track it so

378
00:15:46,840 --> 00:15:50,860
for now we'll just actually go ahead and

379
00:15:48,639 --> 00:15:55,649
pass that in and so what that will do is

380
00:15:50,860 --> 00:15:58,149
that will call platform release memory

381
00:15:55,649 --> 00:16:02,980
right oops sorry deallocate memory

382
00:15:58,149 --> 00:16:06,399
rather with the memory and assuming that

383
00:16:02,980 --> 00:16:09,610
memory was non zero right we'd also do

384
00:16:06,399 --> 00:16:14,949
assets total memory used minus equal

385
00:16:09,610 --> 00:16:16,840
size right now since this is always

386
00:16:14,950 --> 00:16:18,400
going to be is this is not gonna be

387
00:16:16,840 --> 00:16:19,990
threaded at the moment we don't have to

388
00:16:18,399 --> 00:16:21,039
worry about that fact but if we were

389
00:16:19,990 --> 00:16:22,480
going to start calling from multiple

390
00:16:21,039 --> 00:16:27,490
threads we would have to make sure that

391
00:16:22,480 --> 00:16:30,490
we actually did sort of a atomic add or

392
00:16:27,490 --> 00:16:31,870
atomic decrement for these but since we

393
00:16:30,490 --> 00:16:34,990
don't currently have any plans to do

394
00:16:31,870 --> 00:16:36,580
that that's actually okay but just keep

395
00:16:34,990 --> 00:16:38,139
that in mind that you know that would

396
00:16:36,580 --> 00:16:40,780
not be safe if we started calling it

397
00:16:38,139 --> 00:16:43,600
from like up in here it with load asset

398
00:16:40,779 --> 00:16:47,079
work started to do you know stuff with

399
00:16:43,600 --> 00:16:49,090
that or that sort of thing if that makes

400
00:16:47,080 --> 00:16:52,389
sense um you know what's kind of

401
00:16:49,090 --> 00:16:56,250
interesting here is should also put it

402
00:16:52,389 --> 00:17:00,519
to do in here to do Casey this doesn't

403
00:16:56,250 --> 00:17:06,759
actually handle the file stream down

404
00:17:00,519 --> 00:17:10,119
case does it because the memory stays

405
00:17:06,759 --> 00:17:12,609
and so on so I feel like this actually

406
00:17:10,119 --> 00:17:13,779
needs to be something I feel like I feel

407
00:17:12,609 --> 00:17:16,509
like this kind of needs to happen

408
00:17:13,779 --> 00:17:17,470
regardless or something like that in

409
00:17:16,509 --> 00:17:19,420
fact you know what I'm just going to do

410
00:17:17,470 --> 00:17:22,360
this I think what we actually wanted is

411
00:17:19,420 --> 00:17:25,630
this it's the final state but assuming

412
00:17:22,359 --> 00:17:26,409
that the file read failed we would do

413
00:17:25,630 --> 00:17:28,600
something here where

414
00:17:26,410 --> 00:17:30,190
were like you know if there was an error

415
00:17:28,599 --> 00:17:31,809
reading the file we should put a bogus

416
00:17:30,190 --> 00:17:34,110
data in there whatever right like maybe

417
00:17:31,809 --> 00:17:39,819
just zero the memory something like that

418
00:17:34,109 --> 00:17:45,339
you know this I feel like that's the

419
00:17:39,819 --> 00:17:52,629
same thing to do zero size do we have a

420
00:17:45,339 --> 00:17:59,199
zero size like we do we do anyway moving

421
00:17:52,630 --> 00:18:01,480
on so inside platt what is that actually

422
00:17:59,200 --> 00:18:03,370
called they're inside platt we should

423
00:18:01,480 --> 00:18:06,750
have that pointer obviously we don't

424
00:18:03,369 --> 00:18:11,529
know it's called platform sorry platform

425
00:18:06,750 --> 00:18:13,089
there we go okay so here we've got a

426
00:18:11,529 --> 00:18:14,139
thing that will allocate memory for us

427
00:18:13,089 --> 00:18:16,990
and here we've got to think that will

428
00:18:14,140 --> 00:18:20,259
release memory for us right and so what

429
00:18:16,990 --> 00:18:24,910
we can do is we can do something that

430
00:18:20,259 --> 00:18:28,000
allows us to quickly allocate free our

431
00:18:24,910 --> 00:18:31,509
memory so what we can do here is say

432
00:18:28,000 --> 00:18:33,759
okay in this case when we want bitmap

433
00:18:31,509 --> 00:18:35,410
memory instead of doing this push sighs

434
00:18:33,759 --> 00:18:38,049
we'll just do an acquire asset memory

435
00:18:35,410 --> 00:18:41,470
will pass it the game assets and the

436
00:18:38,049 --> 00:18:43,899
memory size all right and the same thing

437
00:18:41,470 --> 00:18:46,450
would be true inside our sound thing

438
00:18:43,900 --> 00:18:50,019
instead of doing the push size we just

439
00:18:46,450 --> 00:18:52,090
do a acquire asset memory and we pass it

440
00:18:50,019 --> 00:18:56,019
the assets and the size that we actually

441
00:18:52,089 --> 00:18:57,549
wanted right and that's pretty

442
00:18:56,019 --> 00:18:59,410
straightforward he now our game would

443
00:18:57,549 --> 00:19:01,450
just run and it would just get more

444
00:18:59,410 --> 00:19:02,800
memory from the operating system so now

445
00:19:01,450 --> 00:19:04,509
everything just kind of works and we

446
00:19:02,799 --> 00:19:06,250
don't have a problem anymore but we

447
00:19:04,509 --> 00:19:07,990
still do have the problem of we're

448
00:19:06,250 --> 00:19:10,450
actually just taking in our returning

449
00:19:07,990 --> 00:19:13,990
amount of memory right which is not what

450
00:19:10,450 --> 00:19:18,069
we wanted certainly so let's go continue

451
00:19:13,990 --> 00:19:20,680
down this path so now what we need to do

452
00:19:18,069 --> 00:19:23,470
is we need to take a look at that actual

453
00:19:20,680 --> 00:19:25,450
amount of asset memory that we have that

454
00:19:23,470 --> 00:19:27,430
we are actually using and potentially

455
00:19:25,450 --> 00:19:29,259
start to free things in the case where

456
00:19:27,430 --> 00:19:31,900
it gets a little bit too high right and

457
00:19:29,259 --> 00:19:33,579
so how would we do that well what we'd

458
00:19:31,900 --> 00:19:35,470
want to do is do this at a control point

459
00:19:33,579 --> 00:19:38,769
during a frame where we know that we

460
00:19:35,470 --> 00:19:41,230
don't have any risk of anyone using

461
00:19:38,769 --> 00:19:42,639
any of the assets for hot like being you

462
00:19:41,230 --> 00:19:45,460
know currently working with any of the

463
00:19:42,640 --> 00:19:49,090
assets right so if we if we went into

464
00:19:45,460 --> 00:19:50,920
handmade cpp and we basically you know

465
00:19:49,089 --> 00:19:53,439
at the end of the frame when everything

466
00:19:50,920 --> 00:19:54,910
is all said and done and we end all the

467
00:19:53,440 --> 00:19:57,430
temporary memory and everything's kind

468
00:19:54,910 --> 00:19:59,830
of cleaned up right what we can do at

469
00:19:57,430 --> 00:20:01,690
that point is say okay now would be a

470
00:19:59,829 --> 00:20:03,849
good time for the asset system to

471
00:20:01,690 --> 00:20:05,500
jettison any assets that it thinks it

472
00:20:03,849 --> 00:20:08,980
needs to to get it back down to a

473
00:20:05,500 --> 00:20:13,359
reasonable working set size right so we

474
00:20:08,980 --> 00:20:16,799
could do like free assets as necessary

475
00:20:13,359 --> 00:20:20,819
right or like evict assets as necessary

476
00:20:16,799 --> 00:20:23,759
and we would call that the trans state

477
00:20:20,819 --> 00:20:27,490
assets we would just do it like that

478
00:20:23,759 --> 00:20:29,609
right and so what we are essentially

479
00:20:27,490 --> 00:20:32,440
doing is creating a fixed point in time

480
00:20:29,609 --> 00:20:34,149
so that we can again avoid having to

481
00:20:32,440 --> 00:20:36,100
make everything super multi threaded

482
00:20:34,150 --> 00:20:37,840
blocking light stuff for no apparent

483
00:20:36,099 --> 00:20:39,009
reason we can just make it so there's a

484
00:20:37,839 --> 00:20:40,389
particular point in time after

485
00:20:39,009 --> 00:20:42,970
everything all's been done for the frame

486
00:20:40,390 --> 00:20:45,550
where we just allow the asset system a

487
00:20:42,970 --> 00:20:47,230
little bit of quiet time for itself to

488
00:20:45,549 --> 00:20:50,829
come in here and evict assets as

489
00:20:47,230 --> 00:20:52,210
necessary right so that's it and what if

490
00:20:50,829 --> 00:20:53,649
Vic tacit says necessary is going to do

491
00:20:52,210 --> 00:20:56,100
is it's just going to sit in the loop

492
00:20:53,650 --> 00:21:00,660
right it's just going to sit in the loop

493
00:20:56,099 --> 00:21:05,199
trying to figure out how it can get

494
00:21:00,660 --> 00:21:07,390
below total memory used right so while

495
00:21:05,200 --> 00:21:10,230
total memory used is greater than

496
00:21:07,390 --> 00:21:13,060
whatever the the target memory is right

497
00:21:10,230 --> 00:21:16,059
target memory used like some some amount

498
00:21:13,059 --> 00:21:17,919
of memory we specify right while it's

499
00:21:16,059 --> 00:21:20,109
greater than that we try to free an

500
00:21:17,920 --> 00:21:22,450
asset right we tried it to free

501
00:21:20,109 --> 00:21:25,329
something and will you know assuming we

502
00:21:22,450 --> 00:21:27,039
could free it than we do if not we break

503
00:21:25,329 --> 00:21:28,240
and it's like an illegal code path

504
00:21:27,039 --> 00:21:35,409
that's like this should never happen

505
00:21:28,240 --> 00:21:36,960
right but you know if it should for some

506
00:21:35,410 --> 00:21:39,009
reason happen we want to know about it

507
00:21:36,960 --> 00:21:41,740
so we could fix it because that's

508
00:21:39,009 --> 00:21:44,289
obviously a bug so what we need to do

509
00:21:41,740 --> 00:21:46,569
here is basically get the least recently

510
00:21:44,289 --> 00:21:50,470
used asset right so we need something

511
00:21:46,569 --> 00:21:53,700
cure that's like a something like you

512
00:21:50,470 --> 00:21:56,380
know the assets lot right

513
00:21:53,700 --> 00:21:58,900
something that would be like get least

514
00:21:56,380 --> 00:22:02,640
recently used asset or maybe it's a slot

515
00:21:58,900 --> 00:22:07,390
index right get least recently used

516
00:22:02,640 --> 00:22:09,850
asset you know we would call that and it

517
00:22:07,390 --> 00:22:12,400
would return us the slot index of

518
00:22:09,849 --> 00:22:14,529
something that we could free so assuming

519
00:22:12,400 --> 00:22:16,450
that that slot index comes back as

520
00:22:14,529 --> 00:22:22,170
something other than the zero asset we

521
00:22:16,450 --> 00:22:28,539
would then grab that slot right and say

522
00:22:22,170 --> 00:22:30,910
asset scoops we would say that that

523
00:22:28,539 --> 00:22:33,009
particular slot we would like to

524
00:22:30,910 --> 00:22:35,440
basically shut that asset down so like

525
00:22:33,009 --> 00:22:38,079
free the memory associated with that

526
00:22:35,440 --> 00:22:42,160
asset so we would say evict asset right

527
00:22:38,079 --> 00:22:44,740
I guess we would just do a victor ectly

528
00:22:42,160 --> 00:22:46,380
of slot index and then that would

529
00:22:44,740 --> 00:22:50,470
probably all be in one thing right

530
00:22:46,380 --> 00:22:52,810
internal void evict asset and this just

531
00:22:50,470 --> 00:22:56,529
gets the asset out of the system right

532
00:22:52,809 --> 00:23:02,559
it just says go away mr. asset you know

533
00:22:56,529 --> 00:23:05,079
yupz you don't really belong you don't

534
00:23:02,559 --> 00:23:07,389
belong anymore it's kind of like you

535
00:23:05,079 --> 00:23:08,559
know Rudolph the red-nosed reindeer this

536
00:23:07,390 --> 00:23:13,120
assets not allowed to play with the

537
00:23:08,559 --> 00:23:17,099
reindeer games anymore on account of his

538
00:23:13,119 --> 00:23:20,079
horrible nose mutation cetera et cetera

539
00:23:17,099 --> 00:23:22,809
anyway so we pass in the slot that we

540
00:23:20,079 --> 00:23:25,359
want here and then this evict asset call

541
00:23:22,809 --> 00:23:27,129
will take care of getting an asset from

542
00:23:25,359 --> 00:23:30,129
a state of being loaded to a state of

543
00:23:27,130 --> 00:23:32,860
being freed right and what we would want

544
00:23:30,130 --> 00:23:37,270
to do there is we want to say okay the

545
00:23:32,859 --> 00:23:42,159
assets slots let's grab out whatever the

546
00:23:37,269 --> 00:23:45,579
slot is this is where that asset lives

547
00:23:42,160 --> 00:23:48,850
we want to check its state to assert

548
00:23:45,579 --> 00:23:51,099
that the state is in fact loaded because

549
00:23:48,849 --> 00:23:54,549
there is no other state that is actually

550
00:23:51,099 --> 00:23:56,439
allowed to be evicted locked assets

551
00:23:54,549 --> 00:24:01,299
can't be evicted cute assets are not

552
00:23:56,440 --> 00:24:03,160
very unloving scheduled to be there so

553
00:24:01,299 --> 00:24:05,210
at the very least it's going to be an

554
00:24:03,160 --> 00:24:11,298
error to try to evict an asset

555
00:24:05,210 --> 00:24:13,220
that isn't even loaded right so assuming

556
00:24:11,298 --> 00:24:15,288
the slot state is loaded really all we

557
00:24:13,220 --> 00:24:18,140
need to do is transition the slot state

558
00:24:15,288 --> 00:24:21,740
to being unloaded and free the memory

559
00:24:18,140 --> 00:24:24,980
right so in order to do that all we have

560
00:24:21,740 --> 00:24:27,440
to do is again use that release asset

561
00:24:24,980 --> 00:24:29,298
memory call and so our problem here is

562
00:24:27,440 --> 00:24:31,730
going to be we don't actually know how

563
00:24:29,298 --> 00:24:33,379
big of an asset this actually was when

564
00:24:31,730 --> 00:24:35,599
we release it so we want to do something

565
00:24:33,380 --> 00:24:38,360
that makes it easy for us to pass this

566
00:24:35,599 --> 00:24:40,668
size parameter here right memory is

567
00:24:38,359 --> 00:24:42,229
pretty easy for us to pass because we

568
00:24:40,669 --> 00:24:44,090
kind of know that whichever kind of

569
00:24:42,230 --> 00:24:45,409
asset it was we you know we have the

570
00:24:44,089 --> 00:24:48,558
memory in there and you know the other

571
00:24:45,409 --> 00:24:49,940
thing we can do too is we can kind of

572
00:24:48,558 --> 00:24:53,000
make that a little easier on ourselves

573
00:24:49,940 --> 00:24:55,730
by by making the assets lot memory

574
00:24:53,000 --> 00:25:02,839
situation a little more regular that's

575
00:24:55,730 --> 00:25:06,288
something we probably should do I kind

576
00:25:02,839 --> 00:25:11,569
of feel like we should unify the way the

577
00:25:06,288 --> 00:25:12,950
memory goes in here I I kind of want to

578
00:25:11,569 --> 00:25:14,599
do that so let's actually do that as

579
00:25:12,950 --> 00:25:17,440
well so what I want to do is say okay

580
00:25:14,599 --> 00:25:20,599
will free the slot memory like this and

581
00:25:17,440 --> 00:25:22,038
there we just need to know I guess what

582
00:25:20,599 --> 00:25:24,349
the size actually would have been and

583
00:25:22,038 --> 00:25:26,509
here we can have had this problem to of

584
00:25:24,349 --> 00:25:28,189
like not again we kind of get back into

585
00:25:26,509 --> 00:25:30,079
a situation where we want to know

586
00:25:28,190 --> 00:25:31,759
whether this thing is a bitmap or a

587
00:25:30,079 --> 00:25:33,949
sound because we kind of want to know

588
00:25:31,759 --> 00:25:35,419
where the memory would be and if we just

589
00:25:33,950 --> 00:25:37,399
knew which one it was we could just do

590
00:25:35,419 --> 00:25:49,970
it instead of having to unify them any

591
00:25:37,398 --> 00:25:52,158
further mm-hmm I say so it's a little

592
00:25:49,970 --> 00:25:55,399
bit frustrating right it's a little bit

593
00:25:52,159 --> 00:26:01,580
frustrating to me just because I'm not

594
00:25:55,398 --> 00:26:03,288
entirely certain I'm not entirely

595
00:26:01,579 --> 00:26:05,928
certain how I want to approach that

596
00:26:03,288 --> 00:26:10,669
let's take a look at the file formats I

597
00:26:05,929 --> 00:26:12,970
want to see how it's actually done in

598
00:26:10,669 --> 00:26:12,970
here

599
00:26:13,210 --> 00:26:18,740
so it just stores the data set but

600
00:26:15,920 --> 00:26:20,779
that's it of the data in the file and

601
00:26:18,740 --> 00:26:23,539
then we always where we always like

602
00:26:20,779 --> 00:26:29,660
compute the rest of the information from

603
00:26:23,539 --> 00:26:36,799
residual stuff and you know I I just

604
00:26:29,660 --> 00:26:38,750
don't know what I want to do about about

605
00:26:36,799 --> 00:26:41,089
this aspect of it I feel like there's

606
00:26:38,750 --> 00:26:45,079
been enough thing so far that we just

607
00:26:41,089 --> 00:26:46,519
want to be able to you know we want to

608
00:26:45,079 --> 00:26:48,049
be able to know whether something is a

609
00:26:46,519 --> 00:26:50,779
bitmap or a sound and I'd kind of

610
00:26:48,049 --> 00:26:52,069
studiously avoided that so far but it

611
00:26:50,779 --> 00:26:54,410
seems like something that we would like

612
00:26:52,069 --> 00:26:55,639
to take care of you know it seems like

613
00:26:54,410 --> 00:26:57,130
something that it would just be nice to

614
00:26:55,640 --> 00:27:00,470
know anytime you look at an asset slot

615
00:26:57,130 --> 00:27:02,420
which one is going to be and I don't

616
00:27:00,470 --> 00:27:05,990
really know like you know we could even

617
00:27:02,420 --> 00:27:08,019
packed that stayed in here right so we

618
00:27:05,990 --> 00:27:12,529
have these we could also do assets they

619
00:27:08,019 --> 00:27:14,930
sound and ss8 sound could be like you

620
00:27:12,529 --> 00:27:16,940
know just one of the high bits of the

621
00:27:14,930 --> 00:27:19,820
thing an asset state bitmap could be one

622
00:27:16,940 --> 00:27:21,620
of the highest states of the thing and

623
00:27:19,819 --> 00:27:23,299
it's just it's a little janky because

624
00:27:21,619 --> 00:27:26,179
then people have to remember to actually

625
00:27:23,299 --> 00:27:27,799
set these when they transition to load

626
00:27:26,180 --> 00:27:33,769
it or locked they don't need to try and

627
00:27:27,799 --> 00:27:38,339
do it any other time but it seems like

628
00:27:33,769 --> 00:27:41,259
something it seems like something

629
00:27:38,339 --> 00:27:43,538
let's take a look let's just see what

630
00:27:41,259 --> 00:27:45,700
would happen if we were going to do that

631
00:27:43,538 --> 00:27:47,679
right because you can kind of see that

632
00:27:45,700 --> 00:27:50,080
it's only in these two places right and

633
00:27:47,679 --> 00:27:53,110
so the final state would just be like oh

634
00:27:50,079 --> 00:27:55,028
you know it's a bitmap or a sound and

635
00:27:53,109 --> 00:27:57,250
when we load the final state now we know

636
00:27:55,028 --> 00:27:59,548
what's actually in there and we don't

637
00:27:57,250 --> 00:28:02,888
have to do you know any other kind of

638
00:27:59,548 --> 00:28:05,319
monkey business right we just kind of

639
00:28:02,888 --> 00:28:10,000
know so I don't know that does seem kind

640
00:28:05,319 --> 00:28:13,178
of interesting right and maybe I'll

641
00:28:10,000 --> 00:28:16,648
leave it that way and so nobody else

642
00:28:13,179 --> 00:28:18,669
ever looks at asset State loaded right

643
00:28:16,648 --> 00:28:21,638
besides the people who actually get the

644
00:28:18,669 --> 00:28:24,820
thing out so all we would have to do is

645
00:28:21,638 --> 00:28:29,589
is make sure that in here we just mask

646
00:28:24,819 --> 00:28:35,918
it off right so we do something like get

647
00:28:29,589 --> 00:28:41,109
state that of the slot and we would make

648
00:28:35,919 --> 00:28:44,830
in line 30 to get state from an asset

649
00:28:41,109 --> 00:28:48,668
slot would just return whatever the slot

650
00:28:44,829 --> 00:28:52,148
state was masked out by whatever the

651
00:28:48,669 --> 00:28:56,440
those bits were right so instead we

652
00:28:52,148 --> 00:29:00,699
would do you know just take the bottom

653
00:28:56,440 --> 00:29:03,129
bits like so so that's certainly

654
00:29:00,700 --> 00:29:05,288
something we could do again I don't know

655
00:29:03,128 --> 00:29:08,319
that it's a good idea but it's certainly

656
00:29:05,288 --> 00:29:11,950
an idea and we could just say that you

657
00:29:08,319 --> 00:29:15,579
know asset state mask even we could just

658
00:29:11,950 --> 00:29:17,889
say that the bottom eight is that asset

659
00:29:15,579 --> 00:29:23,648
state and then the top is for whatever

660
00:29:17,888 --> 00:29:26,769
we want right so yeah a little janky

661
00:29:23,648 --> 00:29:28,479
right but gets the job done so there we

662
00:29:26,769 --> 00:29:30,579
go we would have a way now of knowing

663
00:29:28,480 --> 00:29:33,190
which one it's going to be and so we

664
00:29:30,579 --> 00:29:34,928
could just now checked see it's acetate

665
00:29:33,190 --> 00:29:37,080
loaded assuming it is we unload it and

666
00:29:34,929 --> 00:29:39,909
then really all we have to do now is

667
00:29:37,079 --> 00:29:42,699
figure out how much memory it takes for

668
00:29:39,909 --> 00:29:46,330
this particular slot and and release

669
00:29:42,700 --> 00:29:49,899
that memory right so in order to do that

670
00:29:46,329 --> 00:29:51,289
we need to compute that size so we want

671
00:29:49,898 --> 00:29:54,889
to do something like yet

672
00:29:51,289 --> 00:29:57,470
sighs of asset and that would take you

673
00:29:54,890 --> 00:30:00,830
know whatever the asset index actually

674
00:29:57,470 --> 00:30:03,680
is like this and maybe we would also

675
00:30:00,829 --> 00:30:06,699
pass when we do get size of asset we

676
00:30:03,680 --> 00:30:10,130
would pass whichever one it actually is

677
00:30:06,700 --> 00:30:13,940
right so we'd go ahead and say like oh

678
00:30:10,130 --> 00:30:16,190
okay we've got asset sound and asset

679
00:30:13,940 --> 00:30:18,710
bitmap right so what we would do is we'd

680
00:30:16,190 --> 00:30:21,019
say there'd be another thing which is

681
00:30:18,710 --> 00:30:23,990
asset state like type mask or something

682
00:30:21,019 --> 00:30:27,019
like this which we can use to just grab

683
00:30:23,990 --> 00:30:32,630
just that part right so we can say all

684
00:30:27,019 --> 00:30:36,259
right you know get type of slot so we

685
00:30:32,630 --> 00:30:40,250
also have the ability to get that there

686
00:30:36,259 --> 00:30:44,420
we go and Tim made file formats not what

687
00:30:40,250 --> 00:30:47,690
I wanted but I wanted this and I wanted

688
00:30:44,420 --> 00:30:49,730
to add that call there we go so you

689
00:30:47,690 --> 00:30:51,620
could say get type of s of the assets

690
00:30:49,730 --> 00:30:54,319
lot and that's just the asset slot type

691
00:30:51,619 --> 00:30:56,179
mass there and this could be the state

692
00:30:54,319 --> 00:30:58,839
mask just to make them a little bit more

693
00:30:56,180 --> 00:31:02,299
explicit about which was which right

694
00:30:58,839 --> 00:31:07,609
pretty straightforward stuff yes tech

695
00:31:02,299 --> 00:31:09,319
cleats all that okay so i'm not totally

696
00:31:07,609 --> 00:31:13,159
unhappy with that I just don't love it

697
00:31:09,319 --> 00:31:15,950
but you know you don't always love all

698
00:31:13,160 --> 00:31:19,460
the code right that's not the way that

699
00:31:15,950 --> 00:31:24,440
goes that's not how programming usually

700
00:31:19,460 --> 00:31:26,420
goes so anyway if we go ahead and make

701
00:31:24,440 --> 00:31:28,759
its size of asset be something that can

702
00:31:26,420 --> 00:31:31,580
tell us that you know for a specific

703
00:31:28,759 --> 00:31:34,460
assets lot you know how big it actually

704
00:31:31,579 --> 00:31:38,240
is based on you know assuming that you

705
00:31:34,460 --> 00:31:41,509
actually know what the type is right we

706
00:31:38,240 --> 00:31:43,549
can go ahead and do this where we say

707
00:31:41,509 --> 00:31:45,200
alright let's take a look at the type I

708
00:31:43,549 --> 00:31:48,349
guess we only have to type so we just

709
00:31:45,200 --> 00:31:51,019
say you know if the type is a sound

710
00:31:48,349 --> 00:31:53,389
it'll compute it one way else it'll

711
00:31:51,019 --> 00:31:55,609
computer the other way and will assert

712
00:31:53,390 --> 00:31:57,020
you know the type is a bitmap at that

713
00:31:55,609 --> 00:31:58,639
point in case we add something else and

714
00:31:57,019 --> 00:32:00,470
like forget to fix this or something at

715
00:31:58,640 --> 00:32:02,930
least that way we'll get an assertion in

716
00:32:00,470 --> 00:32:05,210
there and it'll be fine so what we'd

717
00:32:02,930 --> 00:32:07,580
want to do is we want to do exactly the

718
00:32:05,210 --> 00:32:09,230
the stuff that happens here right we'd

719
00:32:07,579 --> 00:32:12,019
want to be able to do a thing that

720
00:32:09,230 --> 00:32:14,538
computes the memory size like so so we'd

721
00:32:12,019 --> 00:32:18,200
have a memory index memory size and then

722
00:32:14,538 --> 00:32:23,990
we would have it do whatever the correct

723
00:32:18,200 --> 00:32:26,600
things are for sound vs vs bitmap okay

724
00:32:23,990 --> 00:32:30,288
and so looking at what how that actually

725
00:32:26,599 --> 00:32:34,788
works it's it's just going to be you

726
00:32:30,288 --> 00:32:39,079
know this code for the bitmap where is

727
00:32:34,788 --> 00:32:41,058
that at there it is it's just going to

728
00:32:39,079 --> 00:32:45,038
be this code for the bitmap so we're

729
00:32:41,058 --> 00:32:52,778
going to get you know that info Jim

730
00:32:45,038 --> 00:32:52,778
times the other info dim x 4 right oops

731
00:32:53,048 --> 00:32:59,569
that's really oh that's even computing

732
00:32:56,450 --> 00:33:03,319
so pretty straightforward and I just

733
00:32:59,569 --> 00:33:04,668
need to be able to get that info so it

734
00:33:03,319 --> 00:33:06,950
would just be something that kind of

735
00:33:04,669 --> 00:33:11,149
works like this right so we'd go ahead

736
00:33:06,950 --> 00:33:14,269
and take the slot index of the asset we

737
00:33:11,148 --> 00:33:18,709
would then grab the bitmap out of that

738
00:33:14,269 --> 00:33:20,119
and compute it very simple and we can

739
00:33:18,710 --> 00:33:23,450
also make sure that that's always what

740
00:33:20,119 --> 00:33:25,759
we actually use here as well right we

741
00:33:23,450 --> 00:33:29,090
can always do something where we would

742
00:33:25,759 --> 00:33:32,929
do memory index memory size equals you

743
00:33:29,089 --> 00:33:34,939
know get size of asset so that we kind

744
00:33:32,929 --> 00:33:37,190
of already always know that we're

745
00:33:34,940 --> 00:33:39,528
dealing with with the asset directly so

746
00:33:37,190 --> 00:33:40,940
we do get size of asset we would pass it

747
00:33:39,528 --> 00:33:44,298
the slot index that we're talking about

748
00:33:40,940 --> 00:33:45,710
here which is just I devalue we or we

749
00:33:44,298 --> 00:33:47,359
always know that we're dealing with a

750
00:33:45,710 --> 00:33:49,880
bitmap so we don't actually need to do

751
00:33:47,359 --> 00:33:51,229
any determination there and so that we

752
00:33:49,880 --> 00:33:53,960
could just always use so we know that

753
00:33:51,230 --> 00:33:56,690
the size is the same that we're not like

754
00:33:53,960 --> 00:33:58,370
doing two different computations of what

755
00:33:56,690 --> 00:34:00,110
that size is which is kind of nice right

756
00:33:58,369 --> 00:34:04,009
and so here it would be the same thing

757
00:34:00,109 --> 00:34:06,109
right we'd go ahead and replace that so

758
00:34:04,009 --> 00:34:07,669
in here we'd actually do the channel

759
00:34:06,109 --> 00:34:10,338
count times the channel size sort of a

760
00:34:07,669 --> 00:34:12,440
thing and I don't know if channel size

761
00:34:10,338 --> 00:34:15,139
channel so I've even used and it is yet

762
00:34:12,440 --> 00:34:18,588
okay so we would do something up here

763
00:34:15,139 --> 00:34:20,028
where we would compute those but

764
00:34:18,588 --> 00:34:22,518
we would do when we actually go do the

765
00:34:20,028 --> 00:34:25,309
memory size is we would call get size of

766
00:34:22,518 --> 00:34:26,959
asset and that's what we would use for

767
00:34:25,309 --> 00:34:31,489
the memory size going forwards and it

768
00:34:26,960 --> 00:34:34,789
would be sound right so doing that we

769
00:34:31,489 --> 00:34:39,259
would just do again grabbing that info

770
00:34:34,789 --> 00:34:42,229
out HHA sound and there's the sound

771
00:34:39,259 --> 00:34:47,329
again so in order to compute the memory

772
00:34:42,228 --> 00:34:50,088
size we just need to figure out I guess

773
00:34:47,329 --> 00:34:54,048
we don't know that's just info in both

774
00:34:50,088 --> 00:34:56,599
cases yeah so same exact thing is the

775
00:34:54,048 --> 00:35:00,349
bitmap case use the info that we look up

776
00:34:56,599 --> 00:35:02,778
oops to figure that out and we can do

777
00:35:00,349 --> 00:35:04,609
something here you know again I don't

778
00:35:02,778 --> 00:35:06,228
want to be doing lots of computations

779
00:35:04,608 --> 00:35:08,449
that I don't know if they're being done

780
00:35:06,228 --> 00:35:10,278
in the same the same way in multiple

781
00:35:08,449 --> 00:35:12,199
places it just makes me a little bit

782
00:35:10,278 --> 00:35:14,449
nervous right you can see that the

783
00:35:12,199 --> 00:35:16,068
channel size is is getting used in

784
00:35:14,449 --> 00:35:18,288
multiple places here and kind of the

785
00:35:16,068 --> 00:35:21,219
pitch was being used the same way there

786
00:35:18,289 --> 00:35:23,930
too and so one thing that that kind of

787
00:35:21,219 --> 00:35:26,329
you know suggests to me is that may be

788
00:35:23,929 --> 00:35:27,858
what you would want to do is you'd want

789
00:35:26,329 --> 00:35:31,519
to have a thing that's like you know

790
00:35:27,858 --> 00:35:33,768
asset memory size or something like this

791
00:35:31,518 --> 00:35:36,468
that actually returns a little bit more

792
00:35:33,768 --> 00:35:38,778
so it's like you know total size is one

793
00:35:36,469 --> 00:35:41,630
of the things but then like you know

794
00:35:38,778 --> 00:35:43,190
something like a row size like that's

795
00:35:41,630 --> 00:35:46,999
that's up and that would return like the

796
00:35:43,190 --> 00:35:48,950
pitch in that case or whatever something

797
00:35:46,998 --> 00:35:51,018
like that or the channel size in the

798
00:35:48,949 --> 00:35:52,728
case of a sound that seems like maybe a

799
00:35:51,018 --> 00:35:55,308
little bit slightly better idea to me

800
00:35:52,728 --> 00:35:56,868
right and we can you know before we were

801
00:35:55,309 --> 00:35:58,369
saying you 30 tues for these so maybe

802
00:35:56,869 --> 00:36:00,259
we'll keep it to that and say that they

803
00:35:58,369 --> 00:36:03,229
have to be you 32s instead of being able

804
00:36:00,259 --> 00:36:05,210
to 60 for a bit but so if we did that we

805
00:36:03,228 --> 00:36:06,649
could say okay asset memory size the

806
00:36:05,210 --> 00:36:08,929
result of the asset memory size

807
00:36:06,650 --> 00:36:15,650
computation is going to include these

808
00:36:08,929 --> 00:36:17,298
other things right so here we go and so

809
00:36:15,650 --> 00:36:19,278
now we could actually do something more

810
00:36:17,298 --> 00:36:21,920
like this where you know we get the

811
00:36:19,278 --> 00:36:23,778
bitmap out and then we say all right I

812
00:36:21,920 --> 00:36:26,059
you know I guess we don't care about the

813
00:36:23,778 --> 00:36:27,889
width and the height so much but we do

814
00:36:26,059 --> 00:36:30,229
care about computing the pitch so what

815
00:36:27,889 --> 00:36:33,009
we'd say is the result row size is going

816
00:36:30,228 --> 00:36:35,059
to be that that sort of

817
00:36:33,010 --> 00:36:36,830
could even call something a little bit

818
00:36:35,059 --> 00:36:38,750
better like section size or something

819
00:36:36,829 --> 00:36:41,960
like that right so the thing has

820
00:36:38,750 --> 00:36:44,269
multiple pieces that computes that so we

821
00:36:41,960 --> 00:36:48,740
do section size we go ahead and do that

822
00:36:44,269 --> 00:36:53,239
that safe truncate for the width and the

823
00:36:48,739 --> 00:36:57,199
height like so right and then when we do

824
00:36:53,239 --> 00:37:00,589
section size we can just use the width

825
00:36:57,199 --> 00:37:02,469
from that and then when we do total size

826
00:37:00,590 --> 00:37:06,920
it's just going to be the section size

827
00:37:02,469 --> 00:37:09,379
times the height right so that allows us

828
00:37:06,920 --> 00:37:13,430
to do that computation in a way that now

829
00:37:09,380 --> 00:37:16,099
when we return that as a result we can

830
00:37:13,429 --> 00:37:18,649
actually just rely on that to do all of

831
00:37:16,099 --> 00:37:20,630
the stuff that we actually wanted it to

832
00:37:18,650 --> 00:37:22,849
do in terms of the memory layout which

833
00:37:20,630 --> 00:37:26,690
is a little bit better in my opinion

834
00:37:22,849 --> 00:37:29,239
right so now we call this when we get

835
00:37:26,690 --> 00:37:32,289
the information back we can set the

836
00:37:29,239 --> 00:37:37,069
pitch equal to the section size right

837
00:37:32,289 --> 00:37:41,269
and we can set the the memory size equal

838
00:37:37,070 --> 00:37:45,039
to the total size I guess we don't need

839
00:37:41,269 --> 00:37:47,780
size because we already know it's a size

840
00:37:45,039 --> 00:37:49,190
right so that's just you see what i did

841
00:37:47,780 --> 00:37:50,810
there like I just I just wasn't

842
00:37:49,190 --> 00:37:52,159
comfortable having that kind of

843
00:37:50,809 --> 00:37:54,529
duplicated code because i was afraid

844
00:37:52,159 --> 00:37:56,239
that there might be times when that

845
00:37:54,530 --> 00:37:58,070
would cause an error like somebody would

846
00:37:56,239 --> 00:37:59,779
you know maybe go in and change that

847
00:37:58,070 --> 00:38:01,640
code not realize that it was done in two

848
00:37:59,780 --> 00:38:03,590
different places and you know you just

849
00:38:01,639 --> 00:38:05,569
over time you kind of try to take those

850
00:38:03,590 --> 00:38:07,130
things out one by one because it just

851
00:38:05,570 --> 00:38:09,019
makes the code just more reliable as you

852
00:38:07,130 --> 00:38:11,750
go you don't need to be paranoid about

853
00:38:09,019 --> 00:38:14,570
it right but you do kind of want to swap

854
00:38:11,750 --> 00:38:16,250
those things and just take care of them

855
00:38:14,570 --> 00:38:18,440
when you see them because tends to pay

856
00:38:16,250 --> 00:38:20,539
back later if you're if you're kind of

857
00:38:18,440 --> 00:38:23,389
you know you're kind of helping yourself

858
00:38:20,539 --> 00:38:27,559
out basically right so there's that

859
00:38:23,389 --> 00:38:29,299
section sighs and that's going to be the

860
00:38:27,559 --> 00:38:31,340
the sample count times the size of a

861
00:38:29,300 --> 00:38:32,900
sample and then the total size is just

862
00:38:31,340 --> 00:38:37,850
going to be however main channels there

863
00:38:32,900 --> 00:38:40,610
are times that section size right

864
00:38:37,849 --> 00:38:42,650
so that's about it I think that's all we

865
00:38:40,610 --> 00:38:45,170
really need to do there I'm just going

866
00:38:42,650 --> 00:38:48,400
to go down here and again change this to

867
00:38:45,170 --> 00:38:50,990
do asset memory size like so and then

868
00:38:48,400 --> 00:38:53,720
channel size can just be driven off of

869
00:38:50,989 --> 00:38:57,799
that so that's going to be size section

870
00:38:53,719 --> 00:39:00,619
like so and then the the memory size

871
00:38:57,800 --> 00:39:04,250
would be the same memory size equal size

872
00:39:00,619 --> 00:39:05,839
total like that and I think that's a

873
00:39:04,250 --> 00:39:08,989
that's kind of a more sane way to do

874
00:39:05,840 --> 00:39:13,250
that okay let's take a look at how this

875
00:39:08,989 --> 00:39:18,709
goes i don't know why i typed slate

876
00:39:13,250 --> 00:39:20,630
there but it has been fixed let's see

877
00:39:18,710 --> 00:39:23,750
conversion viewers who converted from

878
00:39:20,630 --> 00:39:27,070
you 32 2 s 16 so this is actually i

879
00:39:23,750 --> 00:39:32,139
guess a safe truncate 2 u16 right

880
00:39:27,070 --> 00:39:32,140
although wait conversion from to s 16

881
00:39:32,739 --> 00:39:38,509
guess we don't really have a safe

882
00:39:35,780 --> 00:39:43,880
truncate for that do we I don't feel

883
00:39:38,510 --> 00:39:47,840
like we do platform safe truncate yeah

884
00:39:43,880 --> 00:39:49,460
we don't I have 14 truncating to an s 16

885
00:39:47,840 --> 00:39:51,230
I wonder why we didn't do that before

886
00:39:49,460 --> 00:39:53,720
seems like you would want to do that

887
00:39:51,230 --> 00:39:56,269
right so I'm going to go ahead and

888
00:39:53,719 --> 00:39:58,459
define that there where we can actually

889
00:39:56,269 --> 00:40:01,759
you know do something that's going to do

890
00:39:58,460 --> 00:40:05,300
a safe truncate and in order to do that

891
00:40:01,760 --> 00:40:08,960
again I'll just do 65536 divided by two

892
00:40:05,300 --> 00:40:11,660
so i'll do the two bounds there why did

893
00:40:08,960 --> 00:40:20,179
it not leave that up leave that up there

894
00:40:11,659 --> 00:40:22,009
we go 65536 / to paste so what I want to

895
00:40:20,179 --> 00:40:25,699
do here is I just want to say like okay

896
00:40:22,010 --> 00:40:28,550
as long as it's within the bounds of in

897
00:40:25,699 --> 00:40:31,369
a you know and in 16 you can go ahead

898
00:40:28,550 --> 00:40:33,830
and in truncate it and we never expect

899
00:40:31,369 --> 00:40:36,130
our pitch to be that big but we just

900
00:40:33,829 --> 00:40:36,130
want to make sure

901
00:40:37,480 --> 00:40:52,329
okay so if we go that gets done yeah we

902
00:40:49,809 --> 00:40:54,849
need to make sure that the state objects

903
00:40:52,329 --> 00:40:56,829
i guess since they're going to be bored

904
00:40:54,849 --> 00:41:02,759
together there now actually not asset

905
00:40:56,829 --> 00:41:02,759
state values let's see get size of asset

906
00:41:05,489 --> 00:41:11,739
this is going to be asset memory size

907
00:41:08,559 --> 00:41:15,820
now and we do sighs total so we can free

908
00:41:11,739 --> 00:41:19,179
it and the slot memory is now the only

909
00:41:15,820 --> 00:41:22,119
thing that we don't have let's see

910
00:41:19,179 --> 00:41:25,118
anything else target memory used is a

911
00:41:22,119 --> 00:41:28,180
functional assets and so let's go up

912
00:41:25,119 --> 00:41:30,280
here to and set a target memory used to

913
00:41:28,179 --> 00:41:34,149
something reasonable what guess we'll

914
00:41:30,280 --> 00:41:37,869
call that size there we go and so now

915
00:41:34,150 --> 00:41:39,910
really all i have to do is is fix fix

916
00:41:37,869 --> 00:41:42,309
this guy so that we know where the

917
00:41:39,909 --> 00:41:44,289
actual memory is and in order to do that

918
00:41:42,309 --> 00:41:47,079
i think i can just do a get type of the

919
00:41:44,289 --> 00:41:49,900
slot right and figure out where the

920
00:41:47,079 --> 00:41:54,779
memory is like like this right i can

921
00:41:49,900 --> 00:42:00,220
just say like okay if get type slot

922
00:41:54,780 --> 00:42:07,630
equals sound then we know that the the

923
00:42:00,219 --> 00:42:14,819
slot sound dot channels for samples 0 is

924
00:42:07,630 --> 00:42:19,750
the start of the memory and if if not

925
00:42:14,820 --> 00:42:21,000
it's just a bitmap memory right so i'm

926
00:42:19,750 --> 00:42:25,929
going to do an assertion here as well

927
00:42:21,000 --> 00:42:30,369
i'll do an assertion that just ensures

928
00:42:25,929 --> 00:42:32,019
that whatever the hmm you know a case we

929
00:42:30,369 --> 00:42:34,450
add against something and this doesn't

930
00:42:32,019 --> 00:42:36,280
work we want to make sure that's k so

931
00:42:34,449 --> 00:42:37,929
now we have only one really problem

932
00:42:36,280 --> 00:42:40,720
remaining which is get least recently

933
00:42:37,929 --> 00:42:42,039
used asset doesn't actually you know we

934
00:42:40,719 --> 00:42:43,449
don't actually know what that's going to

935
00:42:42,039 --> 00:42:45,550
do so i'm going to go ahead temporarily

936
00:42:43,449 --> 00:42:48,039
just disable that because i want to test

937
00:42:45,550 --> 00:42:49,509
all that those changes we made and make

938
00:42:48,039 --> 00:42:52,119
sure that nothing is going

939
00:42:49,509 --> 00:42:54,458
be wrong because sometimes things go

940
00:42:52,119 --> 00:42:57,028
horribly wrong but we look okay here

941
00:42:54,458 --> 00:43:02,648
everything still seems you loading okay

942
00:42:57,028 --> 00:43:05,079
and it's all good so there we go so now

943
00:43:02,648 --> 00:43:09,098
we need to do is last thing we need to

944
00:43:05,079 --> 00:43:10,749
do is we need to take the we need to add

945
00:43:09,099 --> 00:43:12,189
something to our asset system that lets

946
00:43:10,748 --> 00:43:15,608
us know what the least recently used

947
00:43:12,188 --> 00:43:16,778
asset is so I'm going to start again by

948
00:43:15,608 --> 00:43:18,338
doing the simplest possible thing

949
00:43:16,778 --> 00:43:21,849
because this is kind of the the low end

950
00:43:18,338 --> 00:43:24,449
version of the system we're kind of

951
00:43:21,849 --> 00:43:27,130
doing everything as simple as possible

952
00:43:24,449 --> 00:43:31,568
so all I'm going to do is I'm going to

953
00:43:27,130 --> 00:43:33,849
introduce basically like a sort of a

954
00:43:31,568 --> 00:43:35,528
doubly linked list kind of a scheme to

955
00:43:33,849 --> 00:43:37,989
go through our assets and this is not a

956
00:43:35,528 --> 00:43:40,329
particularly good way of doing this so

957
00:43:37,989 --> 00:43:44,048
we're going to have to look at something

958
00:43:40,329 --> 00:43:46,359
a little bit saner well you know what i

959
00:43:44,048 --> 00:43:49,929
could start i could probably start by

960
00:43:46,358 --> 00:43:54,278
doing something saner to be honest it's

961
00:43:49,929 --> 00:43:58,809
not actually entirely out of the

962
00:43:54,278 --> 00:44:03,099
question let's think about that for a

963
00:43:58,809 --> 00:44:06,639
second I mean fundamentally what I want

964
00:44:03,099 --> 00:44:11,099
to do here right is I want to know when

965
00:44:06,639 --> 00:44:13,479
we have an asset that is you know

966
00:44:11,099 --> 00:44:15,729
whatever the asset that was least

967
00:44:13,478 --> 00:44:18,009
recently asked for in a call to say load

968
00:44:15,728 --> 00:44:18,879
bitmap or load sound right so we're

969
00:44:18,009 --> 00:44:21,338
looking for something that's

970
00:44:18,880 --> 00:44:24,429
fundamentally like a heap kind of a data

971
00:44:21,338 --> 00:44:26,708
structure where you've just got up you

972
00:44:24,429 --> 00:44:33,039
can pull out somebody who's sort of

973
00:44:26,708 --> 00:44:34,538
number is is the worst right and I'm

974
00:44:33,039 --> 00:44:37,479
just trying to think of like what the

975
00:44:34,539 --> 00:44:39,659
easiest way would be to go about doing

976
00:44:37,478 --> 00:44:39,658
that

977
00:44:44,230 --> 00:44:49,150
and you know my my gut instinct for the

978
00:44:47,858 --> 00:44:50,889
simplest way to do it it should just

979
00:44:49,150 --> 00:44:52,630
thread some a linked list through it but

980
00:44:50,889 --> 00:44:54,429
the problem with doing that is it takes

981
00:44:52,630 --> 00:44:57,820
a lot more memory than we really need it

982
00:44:54,429 --> 00:45:01,690
to you know it's definitely kind of

983
00:44:57,820 --> 00:45:03,309
wasteful but I suppose it's not a big

984
00:45:01,690 --> 00:45:04,809
deal if we actually only did it for the

985
00:45:03,309 --> 00:45:06,400
assets that were actually loaded which

986
00:45:04,809 --> 00:45:11,980
of course are the only ones we actually

987
00:45:06,400 --> 00:45:14,200
need so one thing that we could do is we

988
00:45:11,980 --> 00:45:15,490
could make it so that the assets had a

989
00:45:14,199 --> 00:45:18,309
little bit of a header on them that

990
00:45:15,489 --> 00:45:22,500
allows that that threading to occur

991
00:45:18,309 --> 00:45:25,690
right so what I could do is I could do

992
00:45:22,500 --> 00:45:26,769
something like this and in fact I

993
00:45:25,690 --> 00:45:28,389
suppose this would have been something

994
00:45:26,769 --> 00:45:30,190
we could have used to to store the size

995
00:45:28,389 --> 00:45:31,539
of the asset memory as well if we didn't

996
00:45:30,190 --> 00:45:32,829
want to have to compute it but it seems

997
00:45:31,539 --> 00:45:35,920
like you should just compute it because

998
00:45:32,829 --> 00:45:38,409
since we know it there's no point in in

999
00:45:35,920 --> 00:45:39,760
storing it but basically what i'm

1000
00:45:38,409 --> 00:45:42,489
thinking is okay so let's do the

1001
00:45:39,760 --> 00:45:47,050
simplest possible thing here if i was to

1002
00:45:42,489 --> 00:45:50,799
go ahead and introduce a loaded asset

1003
00:45:47,050 --> 00:45:53,200
list right or i guess i'll call it a

1004
00:45:50,800 --> 00:45:54,519
sentinel here so what I'm going to do is

1005
00:45:53,199 --> 00:45:56,500
I'm going to make a doubly linked list

1006
00:45:54,519 --> 00:45:58,150
that just runs through our assets and

1007
00:45:56,500 --> 00:45:59,440
we're literally going to do the dumbest

1008
00:45:58,150 --> 00:46:00,519
possible thing which is that every time

1009
00:45:59,440 --> 00:46:01,869
an asset to use we're going to move it

1010
00:46:00,519 --> 00:46:04,059
to the front of the list which means

1011
00:46:01,869 --> 00:46:08,309
that the end of the list will always be

1012
00:46:04,059 --> 00:46:12,989
our least recently used asset right

1013
00:46:08,309 --> 00:46:15,489
super super simple again really really

1014
00:46:12,989 --> 00:46:16,868
nothing nothing to it and you know it

1015
00:46:15,489 --> 00:46:18,699
kind of even looks like memory could

1016
00:46:16,869 --> 00:46:20,289
have gone right here so I don't know if

1017
00:46:18,699 --> 00:46:21,639
we keep this it may be really stupid for

1018
00:46:20,289 --> 00:46:22,869
me to have introduced that like

1019
00:46:21,639 --> 00:46:25,779
computation thing because we could

1020
00:46:22,869 --> 00:46:28,420
probably just not do that but what are

1021
00:46:25,780 --> 00:46:29,710
you gonna do programming is not the kind

1022
00:46:28,420 --> 00:46:32,230
of thing where you always know exactly

1023
00:46:29,710 --> 00:46:33,340
what you should do when you start you

1024
00:46:32,230 --> 00:46:38,380
got to kind of get in there and take a

1025
00:46:33,340 --> 00:46:41,890
look so anyway if I was to do that all I

1026
00:46:38,380 --> 00:46:45,059
would really have to do is when you go

1027
00:46:41,889 --> 00:46:47,529
ahead and do asset memory size right

1028
00:46:45,059 --> 00:46:50,199
when it actually does that computation I

1029
00:46:47,530 --> 00:46:52,810
just go ahead and add to the total right

1030
00:46:50,199 --> 00:46:57,549
the size of one of these asset memory

1031
00:46:52,809 --> 00:47:01,029
headers and now I just know that anytime

1032
00:46:57,550 --> 00:47:02,710
after you know any time i allocate one

1033
00:47:01,030 --> 00:47:04,930
of these things i can just stick the

1034
00:47:02,710 --> 00:47:06,730
acid memory header at the end of this

1035
00:47:04,929 --> 00:47:09,429
thing and be done with it right and it's

1036
00:47:06,730 --> 00:47:14,019
and it's pretty straightforward so what

1037
00:47:09,429 --> 00:47:15,460
I could do for example is when we do you

1038
00:47:14,019 --> 00:47:17,500
know this acquire asset memory think

1039
00:47:15,460 --> 00:47:23,550
here right what i could do is say all

1040
00:47:17,500 --> 00:47:28,449
right let's also say that in the oops

1041
00:47:23,550 --> 00:47:33,940
where do we actually load this guy choir

1042
00:47:28,449 --> 00:47:36,489
esic memory memory size right there so

1043
00:47:33,940 --> 00:47:39,929
what I want to do is I want to I guess I

1044
00:47:36,489 --> 00:47:44,979
want to make this kind of like total

1045
00:47:39,929 --> 00:47:48,639
data and section so that actually total

1046
00:47:44,980 --> 00:47:51,550
is going to equal result data plus that

1047
00:47:48,639 --> 00:47:53,469
extra header size right so I want to

1048
00:47:51,550 --> 00:47:54,880
make it so because I I want to be able

1049
00:47:53,469 --> 00:47:57,129
to know how much I'm actually supposed

1050
00:47:54,880 --> 00:47:58,570
to load as opposed to the little part at

1051
00:47:57,130 --> 00:48:00,640
the end that's just for the asset memory

1052
00:47:58,570 --> 00:48:05,950
header right so instead it's going to

1053
00:48:00,639 --> 00:48:08,500
look like this there you go and when I

1054
00:48:05,949 --> 00:48:10,269
do this it'll actually just load that

1055
00:48:08,500 --> 00:48:12,880
memory size fit in there so instead of

1056
00:48:10,269 --> 00:48:14,980
size total what it's going to load is

1057
00:48:12,880 --> 00:48:16,300
just the data right and in fact what i

1058
00:48:14,980 --> 00:48:17,590
could do is now just kind of get rid of

1059
00:48:16,300 --> 00:48:19,360
that concept of memory size all together

1060
00:48:17,590 --> 00:48:22,390
and actually just access the size thing

1061
00:48:19,360 --> 00:48:26,320
directly with that right and what i can

1062
00:48:22,389 --> 00:48:27,789
do is like and then say okay i can add a

1063
00:48:26,320 --> 00:48:31,019
thing to the work structure which is

1064
00:48:27,789 --> 00:48:42,369
like the header for this thing you know

1065
00:48:31,019 --> 00:48:44,619
is going to be yeah the header for this

1066
00:48:42,369 --> 00:48:46,509
thing is going to be wherever you know

1067
00:48:44,619 --> 00:48:48,639
the thing actually was plus however big

1068
00:48:46,510 --> 00:48:52,090
the data was right so it's just going to

1069
00:48:48,639 --> 00:48:56,230
be if i take that the sort of the bitmap

1070
00:48:52,090 --> 00:48:57,700
memory right and I advance past all the

1071
00:48:56,230 --> 00:49:02,500
data that's where the header is going to

1072
00:48:57,699 --> 00:49:04,119
be right that's basically it so pretty

1073
00:49:02,500 --> 00:49:06,610
straightforward nothing particularly

1074
00:49:04,119 --> 00:49:09,909
fancy there but that gives me a header

1075
00:49:06,610 --> 00:49:13,450
if I want one and the same would be true

1076
00:49:09,909 --> 00:49:15,098
for the sound right so if I then go

1077
00:49:13,449 --> 00:49:17,529
ahead and say okay you know i take the

1078
00:49:15,099 --> 00:49:20,470
memory advance by the size now I've got

1079
00:49:17,530 --> 00:49:22,839
a header and so now this guy this work

1080
00:49:20,469 --> 00:49:26,529
at you know this this load asset work

1081
00:49:22,838 --> 00:49:28,869
thing this guy can now have an acid

1082
00:49:26,530 --> 00:49:31,480
memory pointer in it which is just going

1083
00:49:28,869 --> 00:49:32,980
to be the header and so now there's just

1084
00:49:31,480 --> 00:49:37,088
a header that we can use for that sort

1085
00:49:32,980 --> 00:49:39,250
of thing okay so the problem the thing

1086
00:49:37,088 --> 00:49:43,058
that makes this not super easy

1087
00:49:39,250 --> 00:49:44,619
unfortunately is we do have one sort of

1088
00:49:43,059 --> 00:49:46,510
caveat which is that since a lot of

1089
00:49:44,619 --> 00:49:50,769
these things are since this thing that's

1090
00:49:46,510 --> 00:49:56,200
loading the assets in since we don't

1091
00:49:50,769 --> 00:49:58,179
actually know I guess since this thing

1092
00:49:56,199 --> 00:50:00,848
itself is not really the thing that

1093
00:49:58,179 --> 00:50:02,828
wants to add stuff to the list when the

1094
00:50:00,849 --> 00:50:07,990
thing comes into existence I guess

1095
00:50:02,829 --> 00:50:09,339
there's really no I guess now I think

1096
00:50:07,989 --> 00:50:10,689
about there's really no reason to

1097
00:50:09,338 --> 00:50:12,699
actually store that in the asset work

1098
00:50:10,690 --> 00:50:15,579
it's really just something that we use

1099
00:50:12,699 --> 00:50:17,259
directly here right when we add the

1100
00:50:15,579 --> 00:50:19,059
entry in it's really just something

1101
00:50:17,260 --> 00:50:22,539
where we're like okay you know what the

1102
00:50:19,059 --> 00:50:25,000
asset memory header is just a thing that

1103
00:50:22,539 --> 00:50:27,010
we need to then fill out right and we

1104
00:50:25,000 --> 00:50:32,559
can already add the asset memory header

1105
00:50:27,010 --> 00:50:34,059
to the list if we want to so yeah so I

1106
00:50:32,559 --> 00:50:35,950
think we're I think we're okay I think

1107
00:50:34,059 --> 00:50:37,778
this is fine I think what we really want

1108
00:50:35,949 --> 00:50:41,108
to do is just something like this add

1109
00:50:37,778 --> 00:50:43,150
asset header to list or something like

1110
00:50:41,108 --> 00:50:48,219
that we're just going to go ahead and

1111
00:50:43,150 --> 00:50:49,599
say right when we do it we want to to go

1112
00:50:48,219 --> 00:50:54,489
ahead and make that happen so we'll just

1113
00:50:49,599 --> 00:50:57,210
do something like this right we'll say

1114
00:50:54,489 --> 00:51:00,009
there's the memory there's the size

1115
00:50:57,210 --> 00:51:02,949
structure and here's the assets

1116
00:51:00,010 --> 00:51:04,420
structure so yeah I think that's what I

1117
00:51:02,949 --> 00:51:06,009
actually want to because I don't want it

1118
00:51:04,420 --> 00:51:07,930
to be happening in a multi-threaded

1119
00:51:06,010 --> 00:51:10,028
context I think that would be bad

1120
00:51:07,929 --> 00:51:11,739
because you don't want a doubly linked

1121
00:51:10,028 --> 00:51:13,510
list happening in the middle of

1122
00:51:11,739 --> 00:51:16,509
multi-threaded stuff it's just a

1123
00:51:13,510 --> 00:51:20,799
painting the BET and error error prone

1124
00:51:16,510 --> 00:51:22,390
so let's go ahead and do it this way and

1125
00:51:20,798 --> 00:51:30,778
then we'll just have

1126
00:51:22,389 --> 00:51:30,778
up here internal void add asset to list

1127
00:51:31,920 --> 00:51:39,150
and so there we've got our game assets

1128
00:51:34,630 --> 00:51:39,150
and we have our asset memory header

1129
00:51:40,588 --> 00:51:46,659
which is constructed by taking the

1130
00:51:43,690 --> 00:51:54,579
memory and adding size so that's going

1131
00:51:46,659 --> 00:52:02,578
to be void star memory and asset size is

1132
00:51:54,579 --> 00:52:06,039
it called again asset memory size right

1133
00:52:02,579 --> 00:52:07,930
and that will do that computation when

1134
00:52:06,039 --> 00:52:09,880
we find one of these headers adding it

1135
00:52:07,929 --> 00:52:11,949
is pretty straightforward if you've

1136
00:52:09,880 --> 00:52:14,019
never done a doubly linked list before

1137
00:52:11,949 --> 00:52:15,818
it's really pretty easy it's just a

1138
00:52:14,018 --> 00:52:18,548
little bit weird I think we may have

1139
00:52:15,818 --> 00:52:23,318
talked about this on the stream at one

1140
00:52:18,548 --> 00:52:30,788
point or another but basically like a

1141
00:52:23,318 --> 00:52:32,858
doubly linked list is is really just a

1142
00:52:30,789 --> 00:52:35,920
list where you have a piece of memory

1143
00:52:32,858 --> 00:52:38,440
and it's got a previous and a next

1144
00:52:35,920 --> 00:52:44,858
pointer in it rank and you just got all

1145
00:52:38,440 --> 00:52:47,528
these links like so and the previous

1146
00:52:44,858 --> 00:52:50,409
pointer just points to the previous

1147
00:52:47,528 --> 00:52:52,409
thing so you know you've kind of kind of

1148
00:52:50,409 --> 00:52:55,899
got these things that look like this

1149
00:52:52,409 --> 00:52:57,969
right and the next pointer just points

1150
00:52:55,900 --> 00:52:59,858
to the one that comes after it right and

1151
00:52:57,969 --> 00:53:01,389
the reason that you use a doubly linked

1152
00:52:59,858 --> 00:53:02,920
list instead of a singly linked list or

1153
00:53:01,389 --> 00:53:05,018
some other data structure is if you just

1154
00:53:02,920 --> 00:53:08,108
have if you just want to move items

1155
00:53:05,018 --> 00:53:09,459
around in the list a lot aw linked list

1156
00:53:08,108 --> 00:53:11,619
gives you all the information that you

1157
00:53:09,460 --> 00:53:13,778
actually need in order to remove

1158
00:53:11,619 --> 00:53:16,028
something when all you have is just the

1159
00:53:13,778 --> 00:53:17,829
link itself right because it tells you

1160
00:53:16,028 --> 00:53:19,690
who is before it so you know you can

1161
00:53:17,829 --> 00:53:21,400
patch this pointer to like point to the

1162
00:53:19,690 --> 00:53:22,599
next guy and it tells you who is after

1163
00:53:21,400 --> 00:53:24,338
it so you know you can point this point

1164
00:53:22,599 --> 00:53:25,690
pointer to point to the next guy right

1165
00:53:24,338 --> 00:53:27,940
so you have all the information you need

1166
00:53:25,690 --> 00:53:29,440
where is in a singly linked list right

1167
00:53:27,940 --> 00:53:33,460
if you're just looking at something like

1168
00:53:29,440 --> 00:53:36,130
this if I give you this guy and I say

1169
00:53:33,460 --> 00:53:38,590
remove him you have no idea how

1170
00:53:36,130 --> 00:53:40,480
get back to this dude right because

1171
00:53:38,590 --> 00:53:42,490
there is no pointer that goes back to

1172
00:53:40,480 --> 00:53:45,340
the previous one so W linked lists are

1173
00:53:42,489 --> 00:53:46,239
kind of this like you know overkill kind

1174
00:53:45,340 --> 00:53:47,800
of data structure where it's just like

1175
00:53:46,239 --> 00:53:49,539
yet you don't even know anything just

1176
00:53:47,800 --> 00:53:51,519
get a link and you can do whatever you

1177
00:53:49,539 --> 00:53:53,559
want you can like walk backwards walk

1178
00:53:51,519 --> 00:53:56,710
forwards remove it do whatever you want

1179
00:53:53,559 --> 00:54:01,329
right so if I wanted to insert this

1180
00:53:56,710 --> 00:54:03,639
right I've got my asset memory header so

1181
00:54:01,329 --> 00:54:04,989
what I chose to do is I chose you

1182
00:54:03,639 --> 00:54:07,629
something called a sensible which is to

1183
00:54:04,989 --> 00:54:10,269
just have a dummy header and I include

1184
00:54:07,630 --> 00:54:12,400
that dummy header one that is not

1185
00:54:10,269 --> 00:54:15,190
attached to any asset I include that

1186
00:54:12,400 --> 00:54:17,559
dummy header in my actual a structure so

1187
00:54:15,190 --> 00:54:20,260
it's always there right it's just always

1188
00:54:17,559 --> 00:54:24,309
there and so what I can do is say okay

1189
00:54:20,260 --> 00:54:28,390
we've got the sentinel loops which is

1190
00:54:24,309 --> 00:54:30,279
this guy and what I want to do is I want

1191
00:54:28,389 --> 00:54:31,839
to insert this guy as the first person

1192
00:54:30,280 --> 00:54:34,600
list so the Sentinels next pointer

1193
00:54:31,840 --> 00:54:37,090
should point to this guy right so

1194
00:54:34,599 --> 00:54:38,940
Sentinel next should point to this guy

1195
00:54:37,090 --> 00:54:41,920
that's what I want to have happen right

1196
00:54:38,940 --> 00:54:44,200
what that also means is that if Sentinel

1197
00:54:41,920 --> 00:54:46,659
next whoever Sentinel next was pointing

1198
00:54:44,199 --> 00:54:48,539
to previously whatever then whatever the

1199
00:54:46,659 --> 00:54:51,909
guy after the central next was before

1200
00:54:48,539 --> 00:54:54,190
his previous pointer had also better

1201
00:54:51,909 --> 00:54:55,629
point to be right because I'm putting

1202
00:54:54,190 --> 00:54:57,460
someone in I need the next pointer of

1203
00:54:55,630 --> 00:54:59,230
the central budget and whoever was

1204
00:54:57,460 --> 00:55:02,289
previously in that slot needs to point

1205
00:54:59,230 --> 00:55:05,769
back right so I need to hook up the guy

1206
00:55:02,289 --> 00:55:07,869
this way like so and see how that would

1207
00:55:05,769 --> 00:55:10,000
work right looking at it a little bit

1208
00:55:07,869 --> 00:55:11,440
differently we could say that if we want

1209
00:55:10,000 --> 00:55:12,940
this guy to come after the sentinel on

1210
00:55:11,440 --> 00:55:15,250
the list we'd say that his previous

1211
00:55:12,940 --> 00:55:17,829
pointer is the Sentinel right and his

1212
00:55:15,250 --> 00:55:19,690
next pointer is whoever the Sentinels

1213
00:55:17,829 --> 00:55:21,309
other next point it would have been

1214
00:55:19,690 --> 00:55:23,409
right you can kind of see what i'm doing

1215
00:55:21,309 --> 00:55:26,170
here right I've got a guy who's like

1216
00:55:23,409 --> 00:55:29,589
kind of job it is to be my main link

1217
00:55:26,170 --> 00:55:31,570
right here is a sentinel and what I want

1218
00:55:29,590 --> 00:55:33,010
to do is that Sentinel right has a

1219
00:55:31,570 --> 00:55:34,750
previous pointer that points to somebody

1220
00:55:33,010 --> 00:55:36,880
I don't care about back here and it's

1221
00:55:34,750 --> 00:55:39,579
got a next pointer that points to this

1222
00:55:36,880 --> 00:55:41,800
guy right here yeah and what I want to

1223
00:55:39,579 --> 00:55:43,360
do is I want to insert this thing and by

1224
00:55:41,800 --> 00:55:45,250
the way this previous pointer right

1225
00:55:43,360 --> 00:55:48,280
sorry this previous pointer points back

1226
00:55:45,250 --> 00:55:49,539
to the Sentinel right so what I want to

1227
00:55:48,280 --> 00:55:49,960
do if I want to insert someone here is I

1228
00:55:49,539 --> 00:55:52,750
need to set

1229
00:55:49,960 --> 00:55:55,389
this pointer to point to me right this

1230
00:55:52,750 --> 00:55:56,949
is the new guy who's coming in I just at

1231
00:55:55,389 --> 00:56:01,059
this point to me but I also need to set

1232
00:55:56,949 --> 00:56:06,250
this pointer to point to me right so I

1233
00:56:01,059 --> 00:56:08,199
need to set up a bunch of pointers first

1234
00:56:06,250 --> 00:56:09,880
I need to set up this guy's next in

1235
00:56:08,199 --> 00:56:11,739
previous right so the previous points of

1236
00:56:09,880 --> 00:56:13,809
the Sentinel the next points to whoever

1237
00:56:11,739 --> 00:56:15,789
the next guy was in the list originally

1238
00:56:13,809 --> 00:56:19,599
but then I need to fix up these two

1239
00:56:15,789 --> 00:56:21,969
pointers right like I service was

1240
00:56:19,599 --> 00:56:23,588
showing here so how could I do that

1241
00:56:21,969 --> 00:56:25,149
though in a slightly more convenient way

1242
00:56:23,588 --> 00:56:26,619
so I've got header previous that equals

1243
00:56:25,150 --> 00:56:28,630
the Sentinel I've got header next that

1244
00:56:26,619 --> 00:56:30,099
equals that whoever was next what I can

1245
00:56:28,630 --> 00:56:31,660
do now is just say well I can just

1246
00:56:30,099 --> 00:56:33,309
semantically say what I want to have

1247
00:56:31,659 --> 00:56:35,319
happen right my next and previous

1248
00:56:33,309 --> 00:56:36,789
pointers are now both correct the only

1249
00:56:35,320 --> 00:56:38,920
thing that's not correct is that they

1250
00:56:36,789 --> 00:56:41,170
don't point back to me so what I can do

1251
00:56:38,920 --> 00:56:43,389
instead is say well the whoever's next

1252
00:56:41,170 --> 00:56:45,190
whoever is ahead of me their previous

1253
00:56:43,389 --> 00:56:47,319
pointer should point to me and who's

1254
00:56:45,190 --> 00:56:49,570
ever before me their next pointer should

1255
00:56:47,320 --> 00:56:52,510
point to me so I can kind of just write

1256
00:56:49,570 --> 00:56:54,220
it like I want it to work and not have

1257
00:56:52,510 --> 00:56:55,750
to think about it much beyond that so

1258
00:56:54,219 --> 00:56:57,848
really all I have to do to insert a guy

1259
00:56:55,750 --> 00:56:59,588
is set their previous and next pointers

1260
00:56:57,849 --> 00:57:02,010
to point to the people who are on either

1261
00:56:59,588 --> 00:57:04,389
side of them and then this little

1262
00:57:02,010 --> 00:57:06,460
nonsense here right takes care of the

1263
00:57:04,389 --> 00:57:07,569
rest it goes who is next okay their

1264
00:57:06,460 --> 00:57:09,130
previous foreigner needs to point to me

1265
00:57:07,570 --> 00:57:13,289
who is previous ok its next brain is

1266
00:57:09,130 --> 00:57:15,579
going to me right pretty straightforward

1267
00:57:13,289 --> 00:57:17,289
so that's really all that is and we

1268
00:57:15,579 --> 00:57:19,960
could you know I could show you here how

1269
00:57:17,289 --> 00:57:24,789
to write the remove asset header from

1270
00:57:19,960 --> 00:57:26,949
list as well right so remove asset

1271
00:57:24,789 --> 00:57:29,440
headers pretty basic remove asset header

1272
00:57:26,949 --> 00:57:30,399
from list it just needs to take it

1273
00:57:29,440 --> 00:57:32,679
doesn't even need to take any of this

1274
00:57:30,400 --> 00:57:35,800
stuff right it just needs to take that

1275
00:57:32,679 --> 00:57:38,169
asset memory header so if you have that

1276
00:57:35,800 --> 00:57:39,970
asset memory header and you want to

1277
00:57:38,170 --> 00:57:41,440
remove it from the list again you can

1278
00:57:39,969 --> 00:57:44,949
just say what you want to have happen

1279
00:57:41,440 --> 00:57:47,530
right I have a guy who's before me in

1280
00:57:44,949 --> 00:57:49,838
the list right that's my previous the

1281
00:57:47,530 --> 00:57:52,810
guy who's before me I want his next

1282
00:57:49,838 --> 00:57:55,088
pointer to point to whoever's after me

1283
00:57:52,809 --> 00:57:57,849
so it skips over me now right and

1284
00:57:55,088 --> 00:57:59,980
similarly I would want my next who's

1285
00:57:57,849 --> 00:58:02,140
ever after me I'd want their previous

1286
00:57:59,980 --> 00:58:03,119
pointer to point Devers before me but

1287
00:58:02,139 --> 00:58:05,519
that's it

1288
00:58:03,119 --> 00:58:10,529
right that totally takes me out of the

1289
00:58:05,519 --> 00:58:12,030
list nothing to it right so if we want

1290
00:58:10,530 --> 00:58:14,130
to now we can make it so that okay we

1291
00:58:12,030 --> 00:58:16,769
have things we add asset header to list

1292
00:58:14,130 --> 00:58:20,849
which we've got we've got remove asset

1293
00:58:16,769 --> 00:58:23,489
header from list as well so now we could

1294
00:58:20,849 --> 00:58:25,049
actually do well honestly we can pretty

1295
00:58:23,489 --> 00:58:26,879
much finish up I don't we want to go

1296
00:58:25,050 --> 00:58:28,710
maybe five minutes over and just finish

1297
00:58:26,880 --> 00:58:31,670
up and just not do the debugging will do

1298
00:58:28,710 --> 00:58:34,500
the debugging on the next stream right

1299
00:58:31,670 --> 00:58:36,809
but basically that's it so what we could

1300
00:58:34,500 --> 00:58:39,030
do here is we could come back in to our

1301
00:58:36,809 --> 00:58:41,460
Vic tacit when we go to evict the asset

1302
00:58:39,030 --> 00:58:43,260
right before we release the memory right

1303
00:58:41,460 --> 00:58:47,220
we would do remove asset header from

1304
00:58:43,260 --> 00:58:49,050
list and we would again pass that that

1305
00:58:47,219 --> 00:58:52,619
asset header and really what we would be

1306
00:58:49,050 --> 00:58:54,240
doing on a victor I suspect is instead

1307
00:58:52,619 --> 00:58:55,889
of a victim asset now what we would do

1308
00:58:54,239 --> 00:58:57,239
is we'd actually just have the header

1309
00:58:55,889 --> 00:58:59,009
because the header is the thing that

1310
00:58:57,239 --> 00:59:01,109
we're going to have anyway so we have

1311
00:58:59,010 --> 00:59:05,280
the asset memory header there's the

1312
00:59:01,110 --> 00:59:09,590
header the slot index is actually just

1313
00:59:05,280 --> 00:59:12,330
going to come from that header right and

1314
00:59:09,590 --> 00:59:14,190
and so when we do get least recently

1315
00:59:12,329 --> 00:59:18,440
used asset what that's actually going to

1316
00:59:14,190 --> 00:59:22,110
give us is asset memory header star

1317
00:59:18,440 --> 00:59:24,030
asset right and assuming that asset is

1318
00:59:22,110 --> 00:59:26,940
not know and in this case what will say

1319
00:59:24,030 --> 00:59:31,170
is assuming the asset is not equal to

1320
00:59:26,940 --> 00:59:33,119
the to that to that Sentinel I'll show

1321
00:59:31,170 --> 00:59:35,099
you why that is in a second loaded asset

1322
00:59:33,119 --> 00:59:38,099
Sentinel so assuming that the asset

1323
00:59:35,099 --> 00:59:39,599
isn't you know basically our our one

1324
00:59:38,099 --> 00:59:45,110
that just stays there and serves as our

1325
00:59:39,599 --> 00:59:47,549
base point we evict it right so that's

1326
00:59:45,110 --> 00:59:50,190
again pretty straightforward we'll go

1327
00:59:47,550 --> 00:59:52,050
ahead and evict assets that way and get

1328
00:59:50,190 --> 00:59:53,880
recently used asset now no longer has to

1329
00:59:52,050 --> 00:59:55,830
really be anything fancy it's just going

1330
00:59:53,880 --> 00:59:57,780
to be whatever the last thing was so

1331
00:59:55,829 --> 00:59:59,400
it's whatever that Sentinel was its

1332
00:59:57,780 --> 01:00:01,620
whatever its previous pointer was that's

1333
00:59:59,400 --> 01:00:04,920
the last thing in the list right really

1334
01:00:01,619 --> 01:00:08,190
really basic so we just go ahead and do

1335
01:00:04,920 --> 01:00:11,039
that and now our viction code is is a

1336
01:00:08,190 --> 01:00:12,990
lot simpler so when we do our ad asset

1337
01:00:11,039 --> 01:00:15,480
header to list though one thing that I

1338
01:00:12,989 --> 01:00:16,239
should force it to do is it needs to set

1339
01:00:15,480 --> 01:00:18,039
in a

1340
01:00:16,239 --> 01:00:19,750
mission to the previous and next we

1341
01:00:18,039 --> 01:00:20,800
would like it to set that slot index so

1342
01:00:19,750 --> 01:00:22,599
we can make sure that that's always

1343
01:00:20,800 --> 01:00:25,120
valid so what I want to do here is just

1344
01:00:22,599 --> 01:00:27,369
introduce also the slot index maybe I'll

1345
01:00:25,119 --> 01:00:30,069
put it right here that way everyone who

1346
01:00:27,369 --> 01:00:31,359
calls that has to put that slot index in

1347
01:00:30,070 --> 01:00:32,680
here so that we make sure that it gets

1348
01:00:31,360 --> 01:00:35,200
initialized and that's just a little

1349
01:00:32,679 --> 01:00:44,169
like insurance policy there so that we

1350
01:00:35,199 --> 01:00:48,219
don't forget yeah so now there's really

1351
01:00:44,170 --> 01:00:51,070
only one thing that we need to do which

1352
01:00:48,219 --> 01:00:53,529
is we need to have it reinsert assets

1353
01:00:51,070 --> 01:00:56,280
into the list whenever they are used so

1354
01:00:53,530 --> 01:00:58,180
whenever someone does a get sound right

1355
01:00:56,280 --> 01:01:02,040
what we would want to do at that point

1356
01:00:58,179 --> 01:01:05,049
is make sure that we move so you know

1357
01:01:02,039 --> 01:01:09,099
move asset to front or something like

1358
01:01:05,050 --> 01:01:12,970
this right or mark asset as recently

1359
01:01:09,099 --> 01:01:15,429
used and we would go ahead and give that

1360
01:01:12,969 --> 01:01:18,369
ID value in the header and whatever else

1361
01:01:15,429 --> 01:01:22,119
right of the thing we would go ahead and

1362
01:01:18,369 --> 01:01:23,469
have that that work here right I'll hold

1363
01:01:22,119 --> 01:01:26,289
off on that we've covered a little bit

1364
01:01:23,469 --> 01:01:29,169
too much ground I think today so I don't

1365
01:01:26,289 --> 01:01:31,420
really want to quite do that yet so let

1366
01:01:29,170 --> 01:01:33,670
me just take care of any crash eNOS that

1367
01:01:31,420 --> 01:01:37,329
we have here let's go ahead and fix that

1368
01:01:33,670 --> 01:01:38,710
first and mm oh right I have to

1369
01:01:37,329 --> 01:01:40,719
initialize all essential there and then

1370
01:01:38,710 --> 01:01:42,699
I'll kind of go over that stuff a little

1371
01:01:40,719 --> 01:01:48,909
bit in the QA so that everyone is on the

1372
01:01:42,699 --> 01:01:52,960
same page so again because i'm using

1373
01:01:48,909 --> 01:01:54,460
this sentinel here all of my operations

1374
01:01:52,960 --> 01:01:56,110
were written assuming that the linked

1375
01:01:54,460 --> 01:01:58,329
list always has something in it which is

1376
01:01:56,110 --> 01:02:00,309
at least the sentinel so at startup what

1377
01:01:58,329 --> 01:02:02,619
we need to do is we need to make sure

1378
01:02:00,309 --> 01:02:05,529
that the sentinel always points back to

1379
01:02:02,619 --> 01:02:09,269
itself right so basically what I'm doing

1380
01:02:05,530 --> 01:02:15,730
here just to avoid any kind of

1381
01:02:09,269 --> 01:02:18,610
difficulty oops yeah in order to avoid

1382
01:02:15,730 --> 01:02:20,469
any kind of more coding complexity what

1383
01:02:18,610 --> 01:02:22,269
I'm doing a start-up right is I'm

1384
01:02:20,469 --> 01:02:24,489
starting us up with a list that just

1385
01:02:22,269 --> 01:02:28,030
points to itself right so here's our

1386
01:02:24,489 --> 01:02:29,599
Sentinel and we've got an extant

1387
01:02:28,030 --> 01:02:32,180
previous pointer and all

1388
01:02:29,599 --> 01:02:34,880
here saying okay the previous pointer

1389
01:02:32,179 --> 01:02:37,250
points back to me the next pointer also

1390
01:02:34,880 --> 01:02:39,940
points back to me and that way when we

1391
01:02:37,250 --> 01:02:42,559
go to insert something it all just works

1392
01:02:39,940 --> 01:02:44,840
because our previous pointer will point

1393
01:02:42,559 --> 01:02:46,489
back to this thing and our next pointer

1394
01:02:44,840 --> 01:02:48,769
will point to whatever the Sentinels

1395
01:02:46,489 --> 01:02:50,779
next pointer was which was itself which

1396
01:02:48,769 --> 01:02:53,480
is exactly what we want and so the list

1397
01:02:50,780 --> 01:02:55,610
always maintains that nice integrity if

1398
01:02:53,480 --> 01:02:58,130
you just have sort of that dummy value

1399
01:02:55,610 --> 01:02:59,720
there by contrast if I wasn't to use

1400
01:02:58,130 --> 01:03:02,630
that Sentinel we would have had this

1401
01:02:59,719 --> 01:03:04,399
nasty thing happen we're basically we

1402
01:03:02,630 --> 01:03:05,900
always have to check to see if previous

1403
01:03:04,400 --> 01:03:07,940
an extra null because there might be

1404
01:03:05,900 --> 01:03:09,740
nothing in the list right and so this

1405
01:03:07,940 --> 01:03:11,690
gets us out of that by making the list

1406
01:03:09,739 --> 01:03:13,339
oh we circular like that where it's got

1407
01:03:11,690 --> 01:03:15,860
this Sentinel that always completes the

1408
01:03:13,340 --> 01:03:21,050
list it just gets you out of a bunch of

1409
01:03:15,860 --> 01:03:25,370
checking but yeah alright so let's see

1410
01:03:21,050 --> 01:03:27,460
what we've got here load bitmap what

1411
01:03:25,369 --> 01:03:35,329
happened there it did not like that

1412
01:03:27,460 --> 01:03:39,380
header that is not a very good header to

1413
01:03:35,329 --> 01:03:41,900
say the very least oh I know why that is

1414
01:03:39,380 --> 01:03:43,789
a very simple typo and that is because

1415
01:03:41,900 --> 01:03:46,070
when I was doing the allocation I forgot

1416
01:03:43,789 --> 01:03:48,019
to account for that let's go ahead and

1417
01:03:46,070 --> 01:03:54,140
make that acquire asset memory that's

1418
01:03:48,019 --> 01:03:59,150
total right all right like so sighs

1419
01:03:54,139 --> 01:04:07,759
total memory size goes away and this guy

1420
01:03:59,150 --> 01:04:09,800
is size data so there we go this is not

1421
01:04:07,760 --> 01:04:11,780
particularly useful yet you can even see

1422
01:04:09,800 --> 01:04:14,870
the flashing can you see the flashing

1423
01:04:11,780 --> 01:04:17,300
happening that's our asset system just

1424
01:04:14,869 --> 01:04:19,699
evicting assets randomly not in any

1425
01:04:17,300 --> 01:04:20,950
particularly good order but randomly

1426
01:04:19,699 --> 01:04:22,989
evicted assets

1427
01:04:20,949 --> 01:04:24,699
keep itself under the megabyte goal

1428
01:04:22,989 --> 01:04:30,399
right or whatever it was that we set

1429
01:04:24,699 --> 01:04:33,759
right oh and one other thing I wanted to

1430
01:04:30,400 --> 01:04:35,500
mention right on cue the other thing

1431
01:04:33,760 --> 01:04:37,570
that we have to do is we have locked

1432
01:04:35,500 --> 01:04:38,980
assets which are assets that aren't

1433
01:04:37,570 --> 01:04:40,180
allowed to get evicted because we

1434
01:04:38,980 --> 01:04:41,949
already planned for that which is that

1435
01:04:40,179 --> 01:04:44,230
the background when background working

1436
01:04:41,949 --> 01:04:45,909
tests are using them and so one other

1437
01:04:44,230 --> 01:04:48,460
thing that we want to do is when we do

1438
01:04:45,909 --> 01:04:50,108
add asset header to list what we want to

1439
01:04:48,460 --> 01:04:52,690
do there is make sure that we're never

1440
01:04:50,108 --> 01:04:54,909
adding a locked asset right an asset

1441
01:04:52,690 --> 01:04:56,440
whose final state is going to be locked

1442
01:04:54,909 --> 01:05:00,639
and so what we want to do is just pass

1443
01:04:56,440 --> 01:05:04,659
that final state along in fact you know

1444
01:05:00,639 --> 01:05:07,539
what when do we set that when when we're

1445
01:05:04,659 --> 01:05:13,149
resetting the locked were we never

1446
01:05:07,539 --> 01:05:15,130
actually setting that correct me if I'm

1447
01:05:13,150 --> 01:05:17,650
wrong because we planned for this we

1448
01:05:15,130 --> 01:05:19,809
said we wanted to do that right and we

1449
01:05:17,650 --> 01:05:23,550
had a locked but I kind of feel like we

1450
01:05:19,809 --> 01:05:23,549
never actually set anything to lock

1451
01:05:30,949 --> 01:05:39,199
right it never gets used so we actually

1452
01:05:35,809 --> 01:05:43,730
need the ability to set those things to

1453
01:05:39,199 --> 01:05:48,348
locked I guess we'll leave that for

1454
01:05:43,730 --> 01:05:50,838
tomorrow but that is exactly what i was

1455
01:05:48,349 --> 01:05:54,460
talking about let me see if i can get

1456
01:05:50,838 --> 01:06:00,259
that to happen again there we go uh

1457
01:05:54,460 --> 01:06:03,530
let's see here so in right here is Phil

1458
01:06:00,260 --> 01:06:05,960
ground chunk work Phil ground chunk is

1459
01:06:03,530 --> 01:06:08,119
just on a separate thread so if we were

1460
01:06:05,960 --> 01:06:10,429
to evict the memory that it was using it

1461
01:06:08,119 --> 01:06:12,289
will just straight up crash right so we

1462
01:06:10,429 --> 01:06:13,429
can't ever allow that to happen which we

1463
01:06:12,289 --> 01:06:14,929
talked about when we did it and we

1464
01:06:13,429 --> 01:06:16,789
introduced the asset state luck thing

1465
01:06:14,929 --> 01:06:20,000
but what we need to do and this should

1466
01:06:16,789 --> 01:06:21,289
be tomorrow's task for sure is we need

1467
01:06:20,000 --> 01:06:23,539
to make sure that we actually lock

1468
01:06:21,289 --> 01:06:25,670
assets down that are being used by the

1469
01:06:23,539 --> 01:06:28,400
background task right that's just kind

1470
01:06:25,670 --> 01:06:30,349
of an obvious that's just kind of an

1471
01:06:28,400 --> 01:06:31,730
obvious thing that needs to happen and

1472
01:06:30,349 --> 01:06:33,440
so what we could do you know there's a

1473
01:06:31,730 --> 01:06:41,318
pretty easy way I guess that we could do

1474
01:06:33,440 --> 01:06:41,318
that too which is that we can inside our

1475
01:06:42,010 --> 01:06:46,839
inside our are well you know what we're

1476
01:06:44,750 --> 01:06:51,230
way over time I'm going to go to the QA

1477
01:06:46,838 --> 01:06:52,759
but i will i'll talk about that a little

1478
01:06:51,230 --> 01:06:54,349
bit later how we're going to do that

1479
01:06:52,760 --> 01:06:57,290
i'll talk about that on tomorrow stream

1480
01:06:54,349 --> 01:06:58,849
so yeah I would say tomorrow that's what

1481
01:06:57,289 --> 01:07:06,338
we're going to do I'll even write it

1482
01:06:58,849 --> 01:07:06,338
down tomorrow Asset locking

1483
01:07:16,980 --> 01:07:25,659
okay all right Q&amp;A time q colon in front

1484
01:07:23,590 --> 01:07:28,090
of them we kind of breeze through a lot

1485
01:07:25,659 --> 01:07:29,829
of stuff on that stream I just kind of

1486
01:07:28,090 --> 01:07:32,680
in the mood so we maybe went a little

1487
01:07:29,829 --> 01:07:33,880
bit fast I'm just going to talk about

1488
01:07:32,679 --> 01:07:36,429
the link listing a little bit here in

1489
01:07:33,880 --> 01:07:41,490
the QA but basically so for a doubly

1490
01:07:36,429 --> 01:07:48,269
linked list there's really two flavors

1491
01:07:41,489 --> 01:07:50,829
there's Sentinel and non Sentinel right

1492
01:07:48,269 --> 01:07:53,860
and sewn on centinall just has like a

1493
01:07:50,829 --> 01:07:56,500
first at a last pointer somewhere and

1494
01:07:53,860 --> 01:07:58,599
the first in the last pointer point to

1495
01:07:56,500 --> 01:08:02,820
some part of the list right so you could

1496
01:07:58,599 --> 01:08:02,819
imagine like okay I've got my list right

1497
01:08:06,840 --> 01:08:09,840
oops

1498
01:08:15,539 --> 01:08:18,199
right

1499
01:08:19,630 --> 01:08:27,069
and what happens is the previous pointer

1500
01:08:24,069 --> 01:08:30,130
of the first link points to know and the

1501
01:08:27,069 --> 01:08:32,048
next link of the last the next point of

1502
01:08:30,130 --> 01:08:33,730
the last link points to know and then

1503
01:08:32,048 --> 01:08:35,319
first and last point to where they are

1504
01:08:33,729 --> 01:08:37,750
right that's one way to do a doubly

1505
01:08:35,319 --> 01:08:40,839
linked list and that's just a lot more

1506
01:08:37,750 --> 01:08:42,100
work right it's a lot more code to do

1507
01:08:40,838 --> 01:08:44,229
that because you got to constantly check

1508
01:08:42,100 --> 01:08:46,420
for the if if know if not know all that

1509
01:08:44,229 --> 01:08:48,789
other stuff right The Sentinel way is

1510
01:08:46,420 --> 01:08:51,100
way easier all that is is just says okay

1511
01:08:48,789 --> 01:08:53,920
there's a sentinel it's always there it

1512
01:08:51,100 --> 01:08:58,810
can't ever leave however big the list is

1513
01:08:53,920 --> 01:08:59,829
right however big the list is you just

1514
01:08:58,810 --> 01:09:02,589
have exactly what you would expect

1515
01:08:59,829 --> 01:09:04,329
always everything points to its

1516
01:09:02,588 --> 01:09:07,869
neighbors so exactly the same structure

1517
01:09:04,329 --> 01:09:09,460
as before no difference is the only time

1518
01:09:07,869 --> 01:09:11,889
that something actually changes is the

1519
01:09:09,460 --> 01:09:15,310
last pointer where this was no it just

1520
01:09:11,889 --> 01:09:18,730
points back to the Sentinel and the pre

1521
01:09:15,310 --> 01:09:21,699
pointer on the Sentinel points all the

1522
01:09:18,729 --> 01:09:24,009
way back to that last link right and

1523
01:09:21,698 --> 01:09:26,919
that makes the links the list circular

1524
01:09:24,009 --> 01:09:28,960
so now addition and removal is always

1525
01:09:26,920 --> 01:09:31,179
the same it's always looking at a case

1526
01:09:28,960 --> 01:09:32,649
that looks exactly like this because

1527
01:09:31,179 --> 01:09:35,529
there's never a case that can't look

1528
01:09:32,649 --> 01:09:38,798
like this it's always has a full set of

1529
01:09:35,529 --> 01:09:40,750
pointers and then the first and last

1530
01:09:38,798 --> 01:09:42,369
pointers are just implicit in the

1531
01:09:40,750 --> 01:09:44,908
Sentinel they are the previous and next

1532
01:09:42,369 --> 01:09:47,380
pointer the first pointer is that is

1533
01:09:44,908 --> 01:09:49,358
sorry the first pointer is the next

1534
01:09:47,380 --> 01:09:51,130
pointer of the Sentinel the last pointer

1535
01:09:49,359 --> 01:09:52,838
is the previous pointer right because

1536
01:09:51,130 --> 01:09:54,369
hey if that's the Sentinel the previous

1537
01:09:52,838 --> 01:09:57,039
pointer always points back to that end

1538
01:09:54,369 --> 01:09:58,119
of the list and if it's the you know if

1539
01:09:57,039 --> 01:09:59,380
you want the first you just look at the

1540
01:09:58,119 --> 01:10:05,710
next because that's what ever that was

1541
01:09:59,380 --> 01:10:07,900
right so pretty straightforward what

1542
01:10:05,710 --> 01:10:13,239
function owns the pointer to the head of

1543
01:10:07,899 --> 01:10:17,559
the linked list owns the pointer I'm not

1544
01:10:13,238 --> 01:10:19,149
sure to invite owns the pointer isn't a

1545
01:10:17,560 --> 01:10:21,900
linked list what you're always told not

1546
01:10:19,149 --> 01:10:26,769
to do if you care about the cash at all

1547
01:10:21,899 --> 01:10:29,170
yeah basically like if this is something

1548
01:10:26,770 --> 01:10:32,560
that you're heavily trafficking you

1549
01:10:29,170 --> 01:10:33,369
would not want to do that right are we

1550
01:10:32,560 --> 01:10:36,640
going to have athlete's

1551
01:10:33,369 --> 01:10:38,920
heavily traffic it probably not but

1552
01:10:36,640 --> 01:10:40,240
we'll find out and like I said linked

1553
01:10:38,920 --> 01:10:43,480
list I don't know that this is what will

1554
01:10:40,239 --> 01:10:45,159
actually use and there's a number of

1555
01:10:43,479 --> 01:10:50,169
ways that we can make it easier on

1556
01:10:45,159 --> 01:10:52,300
ourselves cash wise to if that makes

1557
01:10:50,170 --> 01:10:53,500
sense so like for example if it turns

1558
01:10:52,300 --> 01:10:55,449
out that we really care about the cash

1559
01:10:53,500 --> 01:10:57,520
here instead of allocating the linked

1560
01:10:55,449 --> 01:11:00,399
lists here we just allocate a block of

1561
01:10:57,520 --> 01:11:04,440
the links and use them in one nice big

1562
01:11:00,399 --> 01:11:06,519
block that's all cash friendly but again

1563
01:11:04,439 --> 01:11:08,399
you don't really want to worry about

1564
01:11:06,520 --> 01:11:11,350
whether your code is cash friendly if

1565
01:11:08,399 --> 01:11:14,319
you don't even know if that code is

1566
01:11:11,350 --> 01:11:18,340
actually running very often right so

1567
01:11:14,319 --> 01:11:19,599
it's best you know you want to use data

1568
01:11:18,340 --> 01:11:21,159
structures that are appropriate for the

1569
01:11:19,600 --> 01:11:22,720
code that you're using and you don't

1570
01:11:21,159 --> 01:11:23,739
really want to try and optimize them

1571
01:11:22,720 --> 01:11:27,480
until you know what you're actually

1572
01:11:23,739 --> 01:11:29,500
doing right and so you'd want to I

1573
01:11:27,479 --> 01:11:30,789
wouldn't discourage people from using

1574
01:11:29,500 --> 01:11:33,399
linked lists I'd say use link that's

1575
01:11:30,789 --> 01:11:35,199
anytime you want when you find that that

1576
01:11:33,399 --> 01:11:37,359
code is slow replace the linked list

1577
01:11:35,199 --> 01:11:39,960
with something that's designed for

1578
01:11:37,359 --> 01:11:46,239
whatever the thing is that you're doing

1579
01:11:39,960 --> 01:11:47,590
designed to be faster right could the

1580
01:11:46,239 --> 01:11:49,090
platform allocate function allocate a

1581
01:11:47,590 --> 01:11:50,230
few bites more than requested and store

1582
01:11:49,090 --> 01:11:53,350
the slides there to avoid it being

1583
01:11:50,229 --> 01:11:54,609
passed it to the free function yes but I

1584
01:11:53,350 --> 01:11:56,320
don't really like doing that because

1585
01:11:54,609 --> 01:11:59,409
usually you do know the size like in

1586
01:11:56,319 --> 01:12:02,759
this case we did right so I felt like

1587
01:11:59,409 --> 01:12:02,760
that's maybe the easier way to go

1588
01:12:06,828 --> 01:12:10,500
having a list header at the end of each

1589
01:12:09,118 --> 01:12:11,759
SS struct wouldn't that invalidate the

1590
01:12:10,500 --> 01:12:13,500
cache a lot when processing the list

1591
01:12:11,760 --> 01:12:15,300
since assets trucks are potentially

1592
01:12:13,500 --> 01:12:18,420
large well it doesn't really matter how

1593
01:12:15,300 --> 01:12:25,110
big the asus trucks are the cache is

1594
01:12:18,420 --> 01:12:26,908
based on little chunks right and so you

1595
01:12:25,109 --> 01:12:28,109
know touching a link that's at the end

1596
01:12:26,908 --> 01:12:29,939
of the assets truck is no different than

1597
01:12:28,109 --> 01:12:31,408
touching it anywhere else so if you

1598
01:12:29,939 --> 01:12:33,059
wanted to make this more cash friendly

1599
01:12:31,408 --> 01:12:34,769
the only thing you would really do for

1600
01:12:33,060 --> 01:12:36,690
the linked list is you just put the

1601
01:12:34,770 --> 01:12:43,010
links together so basically like right

1602
01:12:36,689 --> 01:12:50,098
now it looks like this asset data link

1603
01:12:43,010 --> 01:12:51,840
asset data link right and so all you

1604
01:12:50,099 --> 01:12:53,550
would do if you wanted to make this more

1605
01:12:51,840 --> 01:12:55,260
cash friendly is you just grab all these

1606
01:12:53,550 --> 01:12:57,179
links and instead just have it an

1607
01:12:55,260 --> 01:13:00,469
out-of-band thing like a separate buffer

1608
01:12:57,179 --> 01:13:03,389
that's just link link link link link

1609
01:13:00,469 --> 01:13:05,868
right and that way you know you'd fit

1610
01:13:03,389 --> 01:13:10,639
multiple of those in one cache line

1611
01:13:05,868 --> 01:13:10,639
right but that's it

1612
01:13:14,470 --> 01:13:18,289
and remove a sigh there from lifts but

1613
01:13:16,880 --> 01:13:19,159
it makes sense to zero out the previous

1614
01:13:18,289 --> 01:13:21,340
points of the header that's being

1615
01:13:19,159 --> 01:13:24,349
removed or as I just a necessary cleanup

1616
01:13:21,340 --> 01:13:27,770
it's unnecessary but there's no reason

1617
01:13:24,350 --> 01:13:29,870
you couldn't do it just for like

1618
01:13:27,770 --> 01:13:32,660
debugging purposes right so what we

1619
01:13:29,869 --> 01:13:34,729
could do right is is in here say okay

1620
01:13:32,659 --> 01:13:36,529
header next equals header previoulsy row

1621
01:13:34,729 --> 01:13:38,329
and that's just like a way for us to

1622
01:13:36,529 --> 01:13:41,800
double check you know because it's not

1623
01:13:38,329 --> 01:13:43,789
this is not a high frequency operation

1624
01:13:41,800 --> 01:13:45,050
because if it turns out to be a high

1625
01:13:43,789 --> 01:13:46,670
frequency operation like I said we'd

1626
01:13:45,050 --> 01:13:48,310
probably want to not use a linked list

1627
01:13:46,670 --> 01:13:50,930
if it turned out to be like a bottleneck

1628
01:13:48,310 --> 01:13:53,450
so i would i would say that in general

1629
01:13:50,930 --> 01:13:57,650
you know doing that's a fine way to do

1630
01:13:53,449 --> 01:13:58,909
extra sort of debug checking will there

1631
01:13:57,649 --> 01:14:00,409
be a fountain of head somewhere in the

1632
01:13:58,909 --> 01:14:04,369
actual game possibly as a halloween item

1633
01:14:00,409 --> 01:14:08,119
it does seem like a good idea is twitch

1634
01:14:04,369 --> 01:14:09,829
my full-time job know how will you

1635
01:14:08,119 --> 01:14:13,039
re-enable the LiveCode reloading after

1636
01:14:09,829 --> 01:14:15,470
this is done well it's pretty easy to

1637
01:14:13,039 --> 01:14:18,319
enable it even if we want to stick with

1638
01:14:15,470 --> 01:14:24,350
this scheme all you do is you have the

1639
01:14:18,319 --> 01:14:26,799
the the loop live code editing the

1640
01:14:24,350 --> 01:14:29,750
platform code just keeps a set of

1641
01:14:26,800 --> 01:14:34,010
headers on the virtual Alex that thread

1642
01:14:29,750 --> 01:14:36,800
them and when you do the save you just

1643
01:14:34,010 --> 01:14:40,970
go ahead and pull those you write those

1644
01:14:36,800 --> 01:14:44,449
out to disk but I might actually even

1645
01:14:40,970 --> 01:14:47,090
suggest not doing that and instead just

1646
01:14:44,449 --> 01:14:48,739
invalidating the asset cash entirely

1647
01:14:47,090 --> 01:14:50,690
whenever you do leap loop live code

1648
01:14:48,739 --> 01:14:55,099
editing so that way we don't even have

1649
01:14:50,689 --> 01:14:58,339
to store the transient arena so there's

1650
01:14:55,100 --> 01:14:59,930
a lot of ways we could do it but all

1651
01:14:58,340 --> 01:15:01,190
that depends on us not actually just

1652
01:14:59,930 --> 01:15:02,630
doing something slightly different than

1653
01:15:01,189 --> 01:15:04,819
this anyway eventually which is like

1654
01:15:02,630 --> 01:15:08,199
just doing a block allocator so you know

1655
01:15:04,819 --> 01:15:08,199
I wouldn't worry about that quite yet

1656
01:15:12,569 --> 01:15:21,429
can you briefly go over inline functions

1657
01:15:17,939 --> 01:15:23,409
well I don't know that there's that much

1658
01:15:21,430 --> 01:15:25,180
to go over if if you don't have a

1659
01:15:23,409 --> 01:15:27,550
specific question I mean inline function

1660
01:15:25,180 --> 01:15:29,710
is just a function that you've told the

1661
01:15:27,550 --> 01:15:31,360
compiler you would you it's like a hint

1662
01:15:29,710 --> 01:15:32,590
to the compiler of it says this is

1663
01:15:31,359 --> 01:15:33,939
probably something small that should

1664
01:15:32,590 --> 01:15:35,590
just be embedded where it's called

1665
01:15:33,939 --> 01:15:38,169
instead of actually making a function

1666
01:15:35,590 --> 01:15:40,449
call to it and that just allows the

1667
01:15:38,170 --> 01:15:41,890
compiler like it's a suggestion the

1668
01:15:40,449 --> 01:15:44,170
compiler to take a look at it and then

1669
01:15:41,890 --> 01:15:45,579
cut power takes a look at it it will say

1670
01:15:44,170 --> 01:15:47,079
oh maybe I can do a bunch of

1671
01:15:45,579 --> 01:15:48,939
optimizations by embedding this code

1672
01:15:47,079 --> 01:15:50,609
into where it's called rather than

1673
01:15:48,939 --> 01:15:53,409
having it have to be a separate function

1674
01:15:50,609 --> 01:15:55,000
but it's unclear that really like in

1675
01:15:53,409 --> 01:15:56,529
line just a hint it doesn't force the

1676
01:15:55,000 --> 01:15:58,060
compiler to alignment so these days it's

1677
01:15:56,529 --> 01:15:59,769
unclear like if you ever if you even

1678
01:15:58,060 --> 01:16:02,470
really care I don't the compiler can

1679
01:15:59,770 --> 01:16:05,170
choose or not to inline or not based on

1680
01:16:02,470 --> 01:16:06,670
its own subjective judgment and unless

1681
01:16:05,170 --> 01:16:08,680
you use other December cue ball called

1682
01:16:06,670 --> 01:16:11,409
force in line which makes it mandatory

1683
01:16:08,680 --> 01:16:13,480
to do so to the compiler unless you do

1684
01:16:11,409 --> 01:16:15,340
that the compilers actually is able to

1685
01:16:13,479 --> 01:16:16,719
use its discretion so when I type in

1686
01:16:15,340 --> 01:16:21,190
line it doesn't even mean the function

1687
01:16:16,720 --> 01:16:22,659
gets in mind which classic data

1688
01:16:21,189 --> 01:16:31,089
structure do you enjoy implementing the

1689
01:16:22,659 --> 01:16:32,619
most purely subjective um honestly

1690
01:16:31,090 --> 01:16:35,500
singly linked list is my favorite

1691
01:16:32,619 --> 01:16:38,470
because it's so darn easy it's kind of

1692
01:16:35,500 --> 01:16:40,720
so breezy and fun and even like some of

1693
01:16:38,470 --> 01:16:46,570
the operations even just work with

1694
01:16:40,720 --> 01:16:49,110
atomic exchange removal doesn't i think

1695
01:16:46,569 --> 01:16:51,519
removal requires atomic exchange and add

1696
01:16:49,109 --> 01:16:55,988
when I looked at that before but like

1697
01:16:51,520 --> 01:16:57,640
adding to a linked list singly linked

1698
01:16:55,988 --> 01:17:00,089
list is it just an atomic exchange which

1699
01:16:57,640 --> 01:17:00,090
is kind of cool

1700
01:17:07,350 --> 01:17:13,720
does will the system support hot loading

1701
01:17:10,539 --> 01:17:16,539
of assets apologies if this has already

1702
01:17:13,720 --> 01:17:19,060
been covered and I missed it no the

1703
01:17:16,539 --> 01:17:23,289
system will not support that strictly

1704
01:17:19,060 --> 01:17:29,560
because we don't have any artists that

1705
01:17:23,289 --> 01:17:31,869
work on this during the stream so I mean

1706
01:17:29,560 --> 01:17:33,820
I guess I shouldn't really say it that

1707
01:17:31,869 --> 01:17:35,559
way it certainly does support hot

1708
01:17:33,819 --> 01:17:38,229
loading if you wanted it to support hot

1709
01:17:35,560 --> 01:17:40,420
loading because you just have you just

1710
01:17:38,229 --> 01:17:45,039
have some way that you wanted to grab

1711
01:17:40,420 --> 01:17:46,300
like a bitmap I guess externally but

1712
01:17:45,039 --> 01:17:48,670
yeah I have no interest in supporting

1713
01:17:46,300 --> 01:17:49,710
that for this for the asset files

1714
01:17:48,670 --> 01:17:52,060
because the asset files are all

1715
01:17:49,710 --> 01:17:55,630
basically come to me in batches from the

1716
01:17:52,060 --> 01:17:58,780
artist right so we have no need for hot

1717
01:17:55,630 --> 01:18:00,609
loading of any kind but if you want to

1718
01:17:58,779 --> 01:18:02,199
do it it's trivial to do so right i mean

1719
01:18:00,609 --> 01:18:05,139
it should be really obvious how you

1720
01:18:02,199 --> 01:18:07,149
would do it basically like the stuff

1721
01:18:05,140 --> 01:18:08,650
that loads a bitmap we already had code

1722
01:18:07,149 --> 01:18:10,779
in here before that loaded a bitmap fit

1723
01:18:08,649 --> 01:18:14,529
from a BMP so all you'd have to do is

1724
01:18:10,779 --> 01:18:18,579
just add the ability to say okay the

1725
01:18:14,529 --> 01:18:23,079
asset file records the names of files it

1726
01:18:18,579 --> 01:18:24,430
should look for and then when you go to

1727
01:18:23,079 --> 01:18:26,260
load a bitmap you check to see if that

1728
01:18:24,430 --> 01:18:28,840
file exists and if so you load it from

1729
01:18:26,260 --> 01:18:29,800
that instead but I don't have any

1730
01:18:28,840 --> 01:18:31,779
interests in doing that because we don't

1731
01:18:29,800 --> 01:18:39,340
have a use case for it but you could do

1732
01:18:31,779 --> 01:18:43,079
that if you wanted let's see does it

1733
01:18:39,340 --> 01:18:47,829
make sense to write your own non block

1734
01:18:43,079 --> 01:18:50,649
non block dynamic allocator instead of

1735
01:18:47,829 --> 01:18:51,670
using the memory system of the Oz well

1736
01:18:50,649 --> 01:18:53,559
like I said at the beginning of the

1737
01:18:51,670 --> 01:18:56,289
stream I don't know that we're going to

1738
01:18:53,560 --> 01:18:58,930
use the AUSA's one if in 64-bit you

1739
01:18:56,289 --> 01:19:01,630
probably just can I don't really know

1740
01:18:58,930 --> 01:19:03,460
though I haven't tried in 32-bit I just

1741
01:19:01,630 --> 01:19:05,590
think it'd be pretty dicey so I suspect

1742
01:19:03,460 --> 01:19:06,819
that that's that you know like i said i

1743
01:19:05,590 --> 01:19:10,270
just wanted to show how to get this

1744
01:19:06,819 --> 01:19:13,090
working before having to tackle the

1745
01:19:10,270 --> 01:19:14,530
memory placement part of it because like

1746
01:19:13,090 --> 01:19:16,750
you saw today there's a bunch of other

1747
01:19:14,529 --> 01:19:21,069
kind of futzing around that has to

1748
01:19:16,750 --> 01:19:26,229
happen so i would say

1749
01:19:21,069 --> 01:19:28,719
you know I would say there's a very high

1750
01:19:26,229 --> 01:19:30,789
probability chance that that we would

1751
01:19:28,719 --> 01:19:32,739
not actually call the platform's

1752
01:19:30,789 --> 01:19:34,300
allocator you know by friday i think

1753
01:19:32,738 --> 01:19:38,559
we'll probably be doing our own right is

1754
01:19:34,300 --> 01:19:40,239
my assumption but you know you don't

1755
01:19:38,560 --> 01:19:41,800
have to do that if you wanted to you

1756
01:19:40,238 --> 01:19:53,138
could try to ship a game that just did

1757
01:19:41,800 --> 01:19:57,000
it this way you know so all right if

1758
01:19:53,139 --> 01:20:03,400
there are no further questions I will

1759
01:19:57,000 --> 01:20:05,380
serve the remainder of my time okay um

1760
01:20:03,399 --> 01:20:06,638
so yeah we've got a bunch more stuff to

1761
01:20:05,380 --> 01:20:09,730
do we've only just gotten started on

1762
01:20:06,639 --> 01:20:12,400
this but the week is young we've got

1763
01:20:09,729 --> 01:20:15,848
Wednesday Thursday and Friday to tackle

1764
01:20:12,399 --> 01:20:18,158
this problem so that is a good thing

1765
01:20:15,849 --> 01:20:23,159
right so let's go ahead and close things

1766
01:20:18,158 --> 01:20:23,158
down here go ahead and save

1767
01:20:27,100 --> 01:20:34,520
close all right thank you everyone for

1768
01:20:33,590 --> 01:20:35,719
joining me for another episode of

1769
01:20:34,520 --> 01:20:38,090
handmade hero it's been a pleasure

1770
01:20:35,719 --> 01:20:39,380
coding with you as always if you would

1771
01:20:38,090 --> 01:20:40,639
like to follow along at home you can

1772
01:20:39,380 --> 01:20:42,829
always get the source code by

1773
01:20:40,639 --> 01:20:44,329
pre-ordering the game it comes to the

1774
01:20:42,829 --> 01:20:45,738
source code and I updated every night so

1775
01:20:44,329 --> 01:20:46,698
you can stay current and play around

1776
01:20:45,738 --> 01:20:48,709
with the current state of the source

1777
01:20:46,698 --> 01:20:51,049
code experiment and you know it's a good

1778
01:20:48,710 --> 01:20:52,550
way to learn we also have a patreon page

1779
01:20:51,050 --> 01:20:54,289
if you want to support the video series

1780
01:20:52,550 --> 01:20:55,579
you can subscribe there if you would

1781
01:20:54,289 --> 01:20:57,800
like to ask questions we have a forum

1782
01:20:55,579 --> 01:21:00,679
site and it also has community ports to

1783
01:20:57,800 --> 01:21:02,179
mac and linux and it's got an anti

1784
01:21:00,679 --> 01:21:03,139
episode guide done by the community all

1785
01:21:02,179 --> 01:21:04,130
kinds of good stuff so if you're trying

1786
01:21:03,139 --> 01:21:06,079
to learn for the series that's a good

1787
01:21:04,130 --> 01:21:07,429
place to go and we also have a tweet bot

1788
01:21:06,079 --> 01:21:09,529
so if you want to catch the series live

1789
01:21:07,429 --> 01:21:11,090
check out the tweet bot it always tweets

1790
01:21:09,529 --> 01:21:13,300
the schedule so you can keep up to date

1791
01:21:11,090 --> 01:21:19,520
with when we're going to be on the air

1792
01:21:13,300 --> 01:21:21,619
if was it gonna say I'll go say

1793
01:21:19,520 --> 01:21:22,780
something I remember what it was you

1794
01:21:21,618 --> 01:21:25,579
know what guess it doesn't matter

1795
01:21:22,779 --> 01:21:28,130
alright so that's about it will be back

1796
01:21:25,579 --> 01:21:31,010
here 5 p.m. pacific standard sorry

1797
01:21:28,130 --> 01:21:32,600
pacific daylight time tomorrow 5pm 6

1798
01:21:31,010 --> 01:21:35,090
daily time here on twitch so if you'd

1799
01:21:32,600 --> 01:21:37,280
like to see some more asset system work

1800
01:21:35,090 --> 01:21:39,650
we'll be doing that tomorrow getting the

1801
01:21:37,279 --> 01:21:41,329
locked asset stuff working and doing

1802
01:21:39,649 --> 01:21:44,029
some more sort of cleanup of how we're

1803
01:21:41,329 --> 01:21:46,368
doing stuff in the asset system as we go

1804
01:21:44,029 --> 01:21:48,349
towards getting ready to probably do our

1805
01:21:46,368 --> 01:21:50,389
own block allocator so that we don't

1806
01:21:48,350 --> 01:21:52,579
call into the operating system for each

1807
01:21:50,389 --> 01:21:55,039
allocation which is I really I just

1808
01:21:52,579 --> 01:21:56,149
don't think that's what we should do but

1809
01:21:55,039 --> 01:21:58,850
again like I said if that's what you

1810
01:21:56,149 --> 01:22:00,469
want to do at least on 64-bit systems I

1811
01:21:58,850 --> 01:22:02,630
think you should have no problem doing

1812
01:22:00,469 --> 01:22:04,039
the code like we did it today but I just

1813
01:22:02,630 --> 01:22:06,800
feel like there's you know maybe that's

1814
01:22:04,039 --> 01:22:08,840
not the best idea going for 32-bit we

1815
01:22:06,800 --> 01:22:11,270
could test it though anyway that's about

1816
01:22:08,840 --> 01:22:14,810
it for today so hope see you back here

1817
01:22:11,270 --> 01:22:16,760
at 5pm tomorrow until then please have

1818
01:22:14,810 --> 01:22:19,989
fun coding and I'll see you guys on the

1819
01:22:16,760 --> 01:22:19,989
internet take it easy everyone

