1
00:00:00,740 --> 00:00:04,620
hello everybody and welcome to handmade

2
00:00:03,089 --> 00:00:08,609
Hero the shore we could a complete game

3
00:00:04,620 --> 00:00:10,500
live on stream we are almost at the

4
00:00:08,609 --> 00:00:12,058
point I realized and I should so I've

5
00:00:10,500 --> 00:00:16,378
kind of sighted today I should probably

6
00:00:12,058 --> 00:00:20,640
finish this up we've reached the point

7
00:00:16,379 --> 00:00:24,060
where we could rebuild all of our source

8
00:00:20,640 --> 00:00:25,439
input files using entirely just the game

9
00:00:24,059 --> 00:00:27,689
engine meaning you run the game and it

10
00:00:25,439 --> 00:00:31,859
could rebuild its entire like run time

11
00:00:27,689 --> 00:00:35,308
pack information I we can do that now

12
00:00:31,859 --> 00:00:37,739
for both our art assets and our sound

13
00:00:35,308 --> 00:00:41,429
assets the only thing we can't do it for

14
00:00:37,738 --> 00:00:43,229
right now is fonts and so what I was

15
00:00:41,429 --> 00:00:46,350
thinking is what we should probably do

16
00:00:43,229 --> 00:00:48,359
today is try to put font building into

17
00:00:46,350 --> 00:00:50,520
the game as well again we already have

18
00:00:48,359 --> 00:00:52,350
the code for it it's just in an external

19
00:00:50,520 --> 00:00:54,390
utility and then we would be completely

20
00:00:52,350 --> 00:00:58,590
ready to just say look we can now just

21
00:00:54,390 --> 00:01:00,270
ship a directory full of unn like full

22
00:00:58,590 --> 00:01:03,180
of source assets that are completely

23
00:01:00,270 --> 00:01:05,308
unprocessed and then we can run the game

24
00:01:03,179 --> 00:01:08,129
and the game will just pack them all up

25
00:01:05,308 --> 00:01:11,429
for you one time and then you can just

26
00:01:08,129 --> 00:01:15,629
go forever right and so I think that

27
00:01:11,430 --> 00:01:17,460
would probably be the best thing to do I

28
00:01:15,629 --> 00:01:19,530
think it would be the best thing to do

29
00:01:17,459 --> 00:01:23,039
because then we can ship a definitive

30
00:01:19,530 --> 00:01:25,460
version as something on the like on the

31
00:01:23,040 --> 00:01:28,740
sundial page or whatever for people who

32
00:01:25,459 --> 00:01:31,379
appear to the game and try to build at

33
00:01:28,739 --> 00:01:33,359
home we could finally produce something

34
00:01:31,379 --> 00:01:34,920
that's like really easy for them to get

35
00:01:33,359 --> 00:01:36,989
started if they haven't been following

36
00:01:34,920 --> 00:01:38,700
the series at all it's just like look

37
00:01:36,989 --> 00:01:40,500
you download this directory structure

38
00:01:38,700 --> 00:01:41,969
and then you just get whatever the

39
00:01:40,500 --> 00:01:43,769
latest source code is you run it and

40
00:01:41,969 --> 00:01:45,060
it'll build all the hhas for you

41
00:01:43,769 --> 00:01:46,739
automatically you don't have to download

42
00:01:45,060 --> 00:01:48,899
anything

43
00:01:46,739 --> 00:01:51,780
beyond that right and then you're good

44
00:01:48,899 --> 00:01:54,329
to go from then on so that seems to me

45
00:01:51,780 --> 00:02:01,109
like a good way to go I don't know but

46
00:01:54,328 --> 00:02:03,089
that's my that's my current thinking and

47
00:02:01,109 --> 00:02:05,849
so I think that's how we would probably

48
00:02:03,090 --> 00:02:09,719
want to do it one of the nasty things

49
00:02:05,849 --> 00:02:12,150
about that is we do use win32 to build

50
00:02:09,719 --> 00:02:13,770
our fonts because that's where the fonts

51
00:02:12,150 --> 00:02:18,569
come from like right now we load

52
00:02:13,770 --> 00:02:21,270
them out of win32 and so you know we

53
00:02:18,569 --> 00:02:23,129
have an ST B font path in there too but

54
00:02:21,270 --> 00:02:24,659
we tried to do things without libraries

55
00:02:23,129 --> 00:02:27,750
on handmade Hira so we were calling the

56
00:02:24,659 --> 00:02:32,099
operations directly for that stuff and

57
00:02:27,750 --> 00:02:33,810
so doing those fonts this way I don't

58
00:02:32,099 --> 00:02:36,299
know it seems like a reasonable way to

59
00:02:33,810 --> 00:02:39,060
go I'm not sure but there's another

60
00:02:36,300 --> 00:02:41,340
thing that we could do and so this part

61
00:02:39,060 --> 00:02:42,900
is something that I'm you know I don't

62
00:02:41,340 --> 00:02:45,180
know whether it's the right call or not

63
00:02:42,900 --> 00:02:47,430
it's hard to say but another thing that

64
00:02:45,180 --> 00:02:49,379
I was thinking we could do is in order

65
00:02:47,430 --> 00:02:52,409
to maintain sort of more of a

66
00:02:49,379 --> 00:02:57,960
cross-platform feel of things another

67
00:02:52,409 --> 00:03:01,379
option we could consider is if we took

68
00:02:57,960 --> 00:03:02,550
the fonts and we actually bake them into

69
00:03:01,379 --> 00:03:05,579
pngs

70
00:03:02,550 --> 00:03:07,080
that we then load then when we

71
00:03:05,580 --> 00:03:10,640
distribute the pngs

72
00:03:07,080 --> 00:03:13,800
then we would by default have the fonts

73
00:03:10,639 --> 00:03:18,689
working on all platforms so in other

74
00:03:13,800 --> 00:03:21,719
words you wouldn't extract fonts out of

75
00:03:18,689 --> 00:03:23,729
the OS or anywhere else when you

76
00:03:21,719 --> 00:03:25,830
actually run the game you would just

77
00:03:23,729 --> 00:03:29,969
have pngs that are loaded through the

78
00:03:25,830 --> 00:03:34,650
normal PNG path right and baked into the

79
00:03:29,969 --> 00:03:36,930
ehh A's so I don't really know what the

80
00:03:34,650 --> 00:03:42,120
right tack is to take there it's tough

81
00:03:36,930 --> 00:03:44,640
to say the reason that the that the PNG

82
00:03:42,120 --> 00:03:47,550
baking path is a little bit trickier is

83
00:03:44,639 --> 00:03:51,929
because that path actually requires us

84
00:03:47,550 --> 00:03:56,130
to do a little bit of footwork because

85
00:03:51,930 --> 00:03:57,840
we would need inside the hht file we

86
00:03:56,129 --> 00:04:00,780
would need to store all of the

87
00:03:57,840 --> 00:04:04,229
additional information that the font has

88
00:04:00,780 --> 00:04:06,050
by default so we would need to basically

89
00:04:04,229 --> 00:04:10,079
have a thing in there that says look

90
00:04:06,050 --> 00:04:11,310
you're gonna load this PNG but man

91
00:04:10,080 --> 00:04:12,959
there's all these other pieces of

92
00:04:11,310 --> 00:04:14,670
information that go with it like here's

93
00:04:12,959 --> 00:04:20,310
the kerning between all the different

94
00:04:14,669 --> 00:04:22,168
character pairs or whatever right so the

95
00:04:20,310 --> 00:04:23,939
nice part about getting it from you know

96
00:04:22,168 --> 00:04:25,680
sort of a thought building process is

97
00:04:23,939 --> 00:04:27,459
all of that stuff is stored in the font

98
00:04:25,680 --> 00:04:31,300
file directly and it becomes pretty

99
00:04:27,459 --> 00:04:33,638
easy to just make that work right but

100
00:04:31,300 --> 00:04:35,470
the nice part about going the P&amp;G route

101
00:04:33,639 --> 00:04:37,000
is then we can just create art assets

102
00:04:35,470 --> 00:04:38,949
that we upload that's like here's a

103
00:04:37,000 --> 00:04:42,699
bitmap that is the fonts or whatever

104
00:04:38,949 --> 00:04:44,919
right and you know we can adjust in the

105
00:04:42,699 --> 00:04:48,098
hht file we can say like here's how we

106
00:04:44,918 --> 00:04:50,049
would adjust each individual you know

107
00:04:48,098 --> 00:04:51,490
kerning pair or stuff like that and you

108
00:04:50,050 --> 00:04:53,978
know it's easy enough for us to add data

109
00:04:51,490 --> 00:04:56,288
to those hht files but I just don't know

110
00:04:53,978 --> 00:05:00,699
if that's yeah I mean I really I wish I

111
00:04:56,288 --> 00:05:03,788
had a better I wish I had a better

112
00:05:00,699 --> 00:05:07,439
suggestion for what the right answer is

113
00:05:03,788 --> 00:05:09,819
here I don't have a good feeling for it

114
00:05:07,439 --> 00:05:11,560
so what I'd like to do today is explore

115
00:05:09,819 --> 00:05:14,560
that because I want to basically figure

116
00:05:11,560 --> 00:05:17,500
out what we should be doing here and get

117
00:05:14,560 --> 00:05:19,478
a path towards actually doing it if we

118
00:05:17,500 --> 00:05:22,360
load up handmade here oh so I'm just

119
00:05:19,478 --> 00:05:24,069
gonna load it up here and I'm gonna go

120
00:05:22,360 --> 00:05:25,870
to the file formats and just take a look

121
00:05:24,069 --> 00:05:27,668
at the font like what are we actually

122
00:05:25,870 --> 00:05:30,728
storing in here you know for those

123
00:05:27,668 --> 00:05:33,399
currently just so we have some idea of

124
00:05:30,728 --> 00:05:37,899
what's happening so if you look in here

125
00:05:33,399 --> 00:05:40,929
when we've got the main HHA font

126
00:05:37,899 --> 00:05:44,079
structure what you can see is that we

127
00:05:40,930 --> 00:05:45,639
store pretty basic information this

128
00:05:44,079 --> 00:05:47,889
would be really trivial to encode in our

129
00:05:45,639 --> 00:05:49,360
tag files right because the ascender

130
00:05:47,889 --> 00:05:52,810
height the descender height and the

131
00:05:49,360 --> 00:05:55,330
external letting those are just you know

132
00:05:52,810 --> 00:05:59,019
trivial values that we can just put into

133
00:05:55,329 --> 00:06:01,329
a tag I mean a knot tag a block in the H

134
00:05:59,019 --> 00:06:02,709
of T file right here's the font here's

135
00:06:01,329 --> 00:06:05,788
the ascender height descender height

136
00:06:02,709 --> 00:06:09,370
external lighting right so super simple

137
00:06:05,788 --> 00:06:11,079
and then if you look at what else is in

138
00:06:09,370 --> 00:06:13,120
there you can see we have an N squared

139
00:06:11,079 --> 00:06:14,620
table that you just look up in to see

140
00:06:13,120 --> 00:06:18,579
how far you should advance for any

141
00:06:14,620 --> 00:06:20,530
character pair right and again that's

142
00:06:18,579 --> 00:06:22,689
something we can store pretty easily we

143
00:06:20,529 --> 00:06:26,619
can just have you list all the pairs and

144
00:06:22,689 --> 00:06:28,718
we assume that there's no that there's

145
00:06:26,620 --> 00:06:31,360
just like a default for anything in the

146
00:06:28,718 --> 00:06:37,028
table that isn't what you won you

147
00:06:31,360 --> 00:06:40,330
manually specify and then anyone you do

148
00:06:37,028 --> 00:06:40,959
specify that's what that that's what

149
00:06:40,329 --> 00:06:44,948
that pair again

150
00:06:40,959 --> 00:06:47,978
right so similarly the one past highest

151
00:06:44,949 --> 00:06:49,449
code point is just something that says

152
00:06:47,978 --> 00:06:50,620
look here's how many of the Unicode

153
00:06:49,449 --> 00:06:53,860
characters were actually going to

154
00:06:50,620 --> 00:06:55,629
represent in here and so if somebody

155
00:06:53,860 --> 00:06:56,949
does want to like do some localization

156
00:06:55,629 --> 00:06:58,839
work on the game or something like this

157
00:06:56,949 --> 00:07:00,160
so that eventually we would we would

158
00:06:58,839 --> 00:07:01,629
have you know like let's say we want to

159
00:07:00,160 --> 00:07:05,130
look at Japanese localized version of

160
00:07:01,629 --> 00:07:09,399
the game so we need a bunch of extra

161
00:07:05,129 --> 00:07:11,038
code points in there that say here's you

162
00:07:09,399 --> 00:07:14,228
know code point this code point that

163
00:07:11,038 --> 00:07:18,129
that tells us you know which which ones

164
00:07:14,228 --> 00:07:20,199
we have right and you know not all of

165
00:07:18,129 --> 00:07:21,909
them have to actually be filled right so

166
00:07:20,199 --> 00:07:25,629
we can have zeros in there four code

167
00:07:21,910 --> 00:07:28,949
points that we didn't store any you know

168
00:07:25,629 --> 00:07:32,139
any actual bitmap for so that's fine too

169
00:07:28,949 --> 00:07:36,939
and I think well so looking at this - it

170
00:07:32,139 --> 00:07:38,168
looks like we actually compress it - so

171
00:07:36,939 --> 00:07:39,579
we don't even have to do that it looks

172
00:07:38,168 --> 00:07:41,469
like the way this is stored as it tells

173
00:07:39,579 --> 00:07:44,050
you what Unicode code point goes with

174
00:07:41,470 --> 00:07:46,060
which bitmap in a big old list right and

175
00:07:44,050 --> 00:07:48,340
then one past highest code point just

176
00:07:46,060 --> 00:07:50,168
tells you look when you expand this out

177
00:07:48,339 --> 00:07:57,459
into a lookup table this is how big the

178
00:07:50,168 --> 00:07:59,859
table would have to be right so that all

179
00:07:57,459 --> 00:08:01,329
seems really good right and I think

180
00:07:59,860 --> 00:08:02,740
we're storing these well I think that's

181
00:08:01,329 --> 00:08:03,399
just fine we don't need to do anything

182
00:08:02,740 --> 00:08:07,269
else

183
00:08:03,399 --> 00:08:10,629
fancy there so really the question is

184
00:08:07,269 --> 00:08:13,180
just how do we get the data in beyond

185
00:08:10,629 --> 00:08:15,069
just this HHA font and like I said it

186
00:08:13,180 --> 00:08:21,519
seems really easy here to just put it in

187
00:08:15,069 --> 00:08:23,649
hhd and just have that work right so I

188
00:08:21,519 --> 00:08:26,168
think what we would want to do is say

189
00:08:23,649 --> 00:08:29,198
okay how are we gonna get all of these

190
00:08:26,168 --> 00:08:34,598
bitmaps in there you know do we export

191
00:08:29,199 --> 00:08:36,849
them all as separate PN G's is that just

192
00:08:34,599 --> 00:08:39,520
ridiculous or is that fine I mean I

193
00:08:36,849 --> 00:08:43,479
don't know that might be totally fine

194
00:08:39,519 --> 00:08:45,250
you know what's an extra hundred PM g's

195
00:08:43,479 --> 00:08:49,089
in there I guess and then you just load

196
00:08:45,250 --> 00:08:50,889
them all in at process time you pack

197
00:08:49,089 --> 00:08:53,490
them in the HHA and off you go

198
00:08:50,889 --> 00:08:53,490
right

199
00:08:55,149 --> 00:09:01,370
and that would obviously be the simplest

200
00:08:58,850 --> 00:09:05,000
way to go because then like you just you

201
00:09:01,370 --> 00:09:09,159
have one per and there's really not

202
00:09:05,000 --> 00:09:09,159
anything else you need to do right

203
00:09:18,159 --> 00:09:24,309
I don't know I really don't know the

204
00:09:22,389 --> 00:09:25,779
thing that would be annoying is that if

205
00:09:24,309 --> 00:09:29,439
an artist actually one of the entities

206
00:09:25,779 --> 00:09:31,029
so if an artist is making them I mean

207
00:09:29,440 --> 00:09:33,340
maybe the answer is an artist never does

208
00:09:31,029 --> 00:09:38,679
make them you know like an artist

209
00:09:33,340 --> 00:09:42,389
doesn't make fonts as PNG s an artist

210
00:09:38,679 --> 00:09:46,120
like uses a font package or something

211
00:09:42,389 --> 00:09:52,029
and then the font package just gets

212
00:09:46,120 --> 00:09:54,070
exported into pngs and the h HT like

213
00:09:52,029 --> 00:09:59,549
block that specifies all of the kerning

214
00:09:54,070 --> 00:10:09,520
and stuff right I mean who knows I

215
00:09:59,549 --> 00:10:11,589
really couldn't tell you so I mean I

216
00:10:09,519 --> 00:10:13,210
guess what I'll say is let's try that I

217
00:10:11,590 --> 00:10:15,639
guess because I don't really have a

218
00:10:13,210 --> 00:10:17,500
better idea and I guess you know maybe

219
00:10:15,639 --> 00:10:22,210
we could try that and so what I'm

220
00:10:17,500 --> 00:10:26,590
suggesting here is you know let's say we

221
00:10:22,210 --> 00:10:29,139
wanted to make this stuff work the way

222
00:10:26,590 --> 00:10:32,920
that I sort of just described so inside

223
00:10:29,139 --> 00:10:39,220
sources maybe we've got a thing that's

224
00:10:32,919 --> 00:10:43,539
like you know like instrumentation or

225
00:10:39,220 --> 00:10:45,490
you know developer or something and in

226
00:10:43,539 --> 00:10:47,889
here you know we would have anything

227
00:10:45,490 --> 00:10:52,330
that's a resource that only the

228
00:10:47,889 --> 00:10:54,730
developers would care about right and so

229
00:10:52,330 --> 00:10:58,360
in there we would have like a fonts

230
00:10:54,730 --> 00:11:01,810
directory and the fonts directory would

231
00:10:58,360 --> 00:11:04,570
just have like all of the bitmaps that

232
00:11:01,809 --> 00:11:08,799
were being used for that purpose right

233
00:11:04,570 --> 00:11:11,650
for font purpose and then the hht file

234
00:11:08,799 --> 00:11:16,629
would just be something that's you know

235
00:11:11,649 --> 00:11:19,539
in in the tags section here we would

236
00:11:16,629 --> 00:11:21,519
have like a developer dot hht it would

237
00:11:19,539 --> 00:11:25,480
list all of the stuff that's necessary

238
00:11:21,519 --> 00:11:30,120
for packing up that font and off we

239
00:11:25,480 --> 00:11:30,120
would go that's what I'm proposing

240
00:11:30,279 --> 00:11:38,919
Yeah right I don't have I don't have

241
00:11:35,860 --> 00:11:41,710
anything more concrete to say so let's

242
00:11:38,919 --> 00:11:44,229
suppose we were gonna do that and so if

243
00:11:41,710 --> 00:11:48,180
we looked at you know what we've got for

244
00:11:44,230 --> 00:11:50,980
code here in the handmade code directory

245
00:11:48,179 --> 00:11:52,959
we've got the ela guess it's already

246
00:11:50,980 --> 00:11:56,470
loaded that we've got the test a set

247
00:11:52,960 --> 00:11:58,330
builder and the test a set builder is

248
00:11:56,470 --> 00:12:01,450
what we've been pulling the code out of

249
00:11:58,330 --> 00:12:06,520
right that that goes into handmade

250
00:12:01,450 --> 00:12:08,590
heroes asset import layer and so what

251
00:12:06,519 --> 00:12:11,319
I'm suggesting is maybe we just take

252
00:12:08,590 --> 00:12:14,950
this code that we have for test asset

253
00:12:11,320 --> 00:12:20,860
builder and we know we've already sort

254
00:12:14,950 --> 00:12:25,390
of shelled it but maybe we just make a

255
00:12:20,860 --> 00:12:28,720
thing that's called like font or like HH

256
00:12:25,389 --> 00:12:31,000
font right and instead of it doing

257
00:12:28,720 --> 00:12:33,129
something like here where it says hey

258
00:12:31,000 --> 00:12:37,330
there's this font I want you to pack

259
00:12:33,129 --> 00:12:40,210
right like right here you can see this

260
00:12:37,330 --> 00:12:43,870
thing doing like a font loading nonsense

261
00:12:40,210 --> 00:12:45,820
thing right I and it it like says which

262
00:12:43,870 --> 00:12:50,529
characters are supposed to be used and

263
00:12:45,820 --> 00:12:55,200
that kind of thing so if we just took

264
00:12:50,529 --> 00:12:58,088
this and then we bring that into a

265
00:12:55,200 --> 00:13:04,930
routine that basically you know writes

266
00:12:58,089 --> 00:13:07,780
out these things as as bitmaps in a

267
00:13:04,929 --> 00:13:09,729
directory and as one hht that just has

268
00:13:07,779 --> 00:13:14,169
like all of the definition of the font

269
00:13:09,730 --> 00:13:17,100
in it you know is that is that

270
00:13:14,169 --> 00:13:21,099
sufficient right does that work for us

271
00:13:17,100 --> 00:13:23,529
so that's what I'm thinking I don't have

272
00:13:21,100 --> 00:13:25,839
any better ideas but I think that's just

273
00:13:23,529 --> 00:13:28,779
I guess what we should try at this point

274
00:13:25,839 --> 00:13:33,450
to see if we can do anything reasonable

275
00:13:28,779 --> 00:13:33,449
and you can see here where we're sort of

276
00:13:33,690 --> 00:13:38,560
defining the two fonts that we loaded we

277
00:13:36,100 --> 00:13:44,519
could try to generate the output for

278
00:13:38,559 --> 00:13:44,519
those two fonts and then that would be

279
00:13:46,490 --> 00:13:51,959
we would expect our font utility to

280
00:13:49,589 --> 00:13:54,690
basically load those fonts dump all

281
00:13:51,958 --> 00:13:56,939
those bitmaps in the hht out and then we

282
00:13:54,690 --> 00:14:01,709
can you know harvest them and put them

283
00:13:56,940 --> 00:14:04,709
into the sources directories and go from

284
00:14:01,708 --> 00:14:08,099
there right so that's like the best idea

285
00:14:04,708 --> 00:14:10,198
I have it's not a great idea but I don't

286
00:14:08,100 --> 00:14:13,069
see much in the way of other clean ways

287
00:14:10,198 --> 00:14:15,629
to do this or reasonable ways to do this

288
00:14:13,068 --> 00:14:17,370
the only other thing to think of that we

289
00:14:15,629 --> 00:14:19,559
would want to do maybe is like pack them

290
00:14:17,370 --> 00:14:21,209
into P and G's in some weird way or

291
00:14:19,559 --> 00:14:22,919
something else I don't know but that

292
00:14:21,208 --> 00:14:24,629
just adds yet more complexity to our

293
00:14:22,919 --> 00:14:35,009
code path that I'm not really sure that

294
00:14:24,629 --> 00:14:38,970
we want it and yeah I mean in the in

295
00:14:35,009 --> 00:14:42,419
theory I guess we could just expand the

296
00:14:38,970 --> 00:14:45,028
total number like so right now we we

297
00:14:42,419 --> 00:14:50,099
allow grids to be a certain size we

298
00:14:45,028 --> 00:14:52,528
could allow grids to be larger so we

299
00:14:50,100 --> 00:14:55,459
could make you know the sort of the grid

300
00:14:52,528 --> 00:14:59,309
system probably do what we needed to do

301
00:14:55,458 --> 00:15:01,818
where you know the grids maybe can be up

302
00:14:59,309 --> 00:15:03,989
to like 64 by 64 or something like this

303
00:15:01,818 --> 00:15:06,500
and then you could store like all your

304
00:15:03,990 --> 00:15:10,549
fonts just in one bitmap that was packed

305
00:15:06,500 --> 00:15:10,549
again I just I don't know

306
00:15:13,990 --> 00:15:19,049
I really just don't have

307
00:15:23,169 --> 00:15:28,748
I really just I mean I wish I had a more

308
00:15:26,708 --> 00:15:31,238
coherent idea about how this should work

309
00:15:28,749 --> 00:15:34,089
but it just don't this is one of those

310
00:15:31,239 --> 00:15:35,949
places where you know there is no simple

311
00:15:34,089 --> 00:15:38,739
answer to how you would do fonts and the

312
00:15:35,948 --> 00:15:41,438
reason for that is pretty simple it's

313
00:15:38,739 --> 00:15:43,569
it's the core reason why most asset

314
00:15:41,438 --> 00:15:45,338
processing systems are lousy and why

315
00:15:43,568 --> 00:15:49,208
it's just a hard problem in general and

316
00:15:45,339 --> 00:15:51,009
that's because when you're dealing with

317
00:15:49,208 --> 00:15:53,289
a very simple art asset like a bitmap

318
00:15:51,009 --> 00:15:56,589
that doesn't really have anything to do

319
00:15:53,289 --> 00:15:58,238
with anything like for example our title

320
00:15:56,589 --> 00:16:00,790
screen bitmap is just a lone bitmap that

321
00:15:58,239 --> 00:16:02,439
sits there it's pretty easy in your code

322
00:16:00,789 --> 00:16:04,208
to just say alright we just load a

323
00:16:02,438 --> 00:16:06,488
bitmap and we put it on the screen right

324
00:16:04,208 --> 00:16:07,958
and there's just not a lot of complexity

325
00:16:06,489 --> 00:16:10,778
there so there's not a lot of complexity

326
00:16:07,958 --> 00:16:13,358
in the asset path where the complexity

327
00:16:10,778 --> 00:16:15,850
comes is when assets have complex

328
00:16:13,359 --> 00:16:17,949
interrelations and structures inside

329
00:16:15,850 --> 00:16:20,259
themselves with data that depends on

330
00:16:17,948 --> 00:16:22,868
those structures and fonts are a great

331
00:16:20,259 --> 00:16:24,938
example of that not only do they have

332
00:16:22,869 --> 00:16:27,069
the notion that there's like one sort of

333
00:16:24,938 --> 00:16:29,139
asset which is a font that itself

334
00:16:27,068 --> 00:16:31,688
contains many assets which are glyph

335
00:16:29,139 --> 00:16:34,269
bitmaps but there's also data that

336
00:16:31,688 --> 00:16:36,818
happens among and between these assets

337
00:16:34,269 --> 00:16:39,129
themselves so the kerning table is a way

338
00:16:36,818 --> 00:16:41,469
of saying that between two of these

339
00:16:39,129 --> 00:16:45,879
assets here's a value that I need the

340
00:16:41,470 --> 00:16:47,889
program to know right and so as you get

341
00:16:45,879 --> 00:16:50,019
into more complex interrelationships

342
00:16:47,889 --> 00:16:52,360
between things that's where the

343
00:16:50,019 --> 00:16:53,889
complexity in asset processing comes and

344
00:16:52,360 --> 00:16:57,129
it gets more and more complicated as you

345
00:16:53,889 --> 00:16:58,869
go you can even see like every year at

346
00:16:57,129 --> 00:17:00,970
the GDC there's like asset pipeline

347
00:16:58,869 --> 00:17:02,678
talks how are there still asset pipeline

348
00:17:00,970 --> 00:17:04,720
talks right it's because these are very

349
00:17:02,678 --> 00:17:06,278
hard problems they're problems people

350
00:17:04,720 --> 00:17:07,870
underestimate and they caused huge

351
00:17:06,278 --> 00:17:10,480
headaches for studios because you end up

352
00:17:07,869 --> 00:17:12,338
having huge amounts of data with huge

353
00:17:10,480 --> 00:17:16,288
amounts of assets and huge amounts of

354
00:17:12,338 --> 00:17:19,028
inter relation between these assets and

355
00:17:16,288 --> 00:17:21,038
fonts are the place where we will see it

356
00:17:19,028 --> 00:17:24,398
the most because they're the assets that

357
00:17:21,038 --> 00:17:26,230
have the most structure for what we are

358
00:17:24,398 --> 00:17:28,989
actually doing in our game which is a

359
00:17:26,230 --> 00:17:31,240
very limited version of the kind of

360
00:17:28,990 --> 00:17:32,980
pipeline we would have to employ if we

361
00:17:31,240 --> 00:17:37,329
were gonna do you know Red Dead

362
00:17:32,980 --> 00:17:39,640
Redemption right where you you know you

363
00:17:37,329 --> 00:17:47,980
talk about taking these things to the

364
00:17:39,640 --> 00:17:51,570
enth degree so I don't really know I'm

365
00:17:47,980 --> 00:17:54,339
just gonna start with the simplest case

366
00:17:51,569 --> 00:17:57,519
and I'm gonna try my best to work out

367
00:17:54,339 --> 00:17:59,769
from there and make something reasonable

368
00:17:57,519 --> 00:18:02,710
that's just you know I think that's the

369
00:17:59,769 --> 00:18:06,759
best I can do in this case so I'm just

370
00:18:02,710 --> 00:18:09,130
gonna try that and we'll see if we can

371
00:18:06,759 --> 00:18:11,349
you know more easily if we can

372
00:18:09,130 --> 00:18:15,280
relatively straight you know we can do a

373
00:18:11,349 --> 00:18:18,639
relatively straightforward load of these

374
00:18:15,279 --> 00:18:20,349
tags into something that works okay so

375
00:18:18,640 --> 00:18:22,270
the first thing that I'm gonna do is I'm

376
00:18:20,349 --> 00:18:27,189
just gonna create a new file I'm gonna

377
00:18:22,269 --> 00:18:28,930
create like an H H font which is just a

378
00:18:27,190 --> 00:18:31,690
gonna be a command-line utility exactly

379
00:18:28,930 --> 00:18:35,080
like this one I'm literally gonna copy

380
00:18:31,690 --> 00:18:37,930
the whole thing in here and then I'm

381
00:18:35,079 --> 00:18:40,240
just gonna clip out most of it right so

382
00:18:37,930 --> 00:18:42,930
I'm gonna start by just getting rid of

383
00:18:40,240 --> 00:18:45,849
almost everything that there is in here

384
00:18:42,930 --> 00:18:48,220
and then we're just gonna go from there

385
00:18:45,849 --> 00:18:52,389
so we know that we don't have to load

386
00:18:48,220 --> 00:18:54,279
sounds so that can go we probably don't

387
00:18:52,390 --> 00:18:55,990
even need read entire file because we

388
00:18:54,279 --> 00:18:57,639
won't be loading any files we're asking

389
00:18:55,990 --> 00:19:00,039
the operating system to load them for us

390
00:18:57,640 --> 00:19:04,210
I think so I'm just gonna cut all of

391
00:19:00,039 --> 00:19:05,710
that out we don't need to load BMPs so

392
00:19:04,210 --> 00:19:08,769
really we're just talking about this

393
00:19:05,710 --> 00:19:12,490
right you can see us doing a create font

394
00:19:08,769 --> 00:19:14,470
a add resource month this is us asking

395
00:19:12,490 --> 00:19:16,900
the operating system to you know get

396
00:19:14,470 --> 00:19:19,930
fonts for us right so this is our font

397
00:19:16,900 --> 00:19:21,160
code that does its you know does it's a

398
00:19:19,930 --> 00:19:23,380
little dance

399
00:19:21,160 --> 00:19:25,720
we've got the font stuff all through

400
00:19:23,380 --> 00:19:30,220
here with the DC and the glyph

401
00:19:25,720 --> 00:19:33,940
processing and all that stuff I don't

402
00:19:30,220 --> 00:19:35,950
know what oh this part was for the STB

403
00:19:33,940 --> 00:19:37,840
path right which we're not doing that

404
00:19:35,950 --> 00:19:41,500
was just one day I showed how to use

405
00:19:37,839 --> 00:19:45,039
that path we don't care about that so we

406
00:19:41,500 --> 00:19:48,309
can get rid of that so it's pretty much

407
00:19:45,039 --> 00:19:49,599
just this we can then get rid of all

408
00:19:48,309 --> 00:19:51,049
this stuff because this was our sound

409
00:19:49,599 --> 00:19:53,089
stuff and we obviously already

410
00:19:51,049 --> 00:19:55,399
that copied into our game the way that

411
00:19:53,089 --> 00:19:57,409
we wanted it as well we don't need any

412
00:19:55,400 --> 00:19:59,150
of this asset type stuff or any of this

413
00:19:57,410 --> 00:20:00,620
stuff because again we're not really

414
00:19:59,150 --> 00:20:03,620
going to have to do any of that

415
00:20:00,619 --> 00:20:05,209
I'm gonna save ad font asset not because

416
00:20:03,619 --> 00:20:06,559
we actually need it but because I just

417
00:20:05,210 --> 00:20:08,420
wanted to see you know what we were

418
00:20:06,559 --> 00:20:11,720
getting for these values we'll want to

419
00:20:08,420 --> 00:20:13,519
persist the that idea forward so we want

420
00:20:11,720 --> 00:20:16,100
to keep though like how we were getting

421
00:20:13,519 --> 00:20:17,750
it out of the loaded font stuff there

422
00:20:16,099 --> 00:20:20,599
and where those were getting recorded

423
00:20:17,750 --> 00:20:23,420
and crap like that so we'll we'll look

424
00:20:20,599 --> 00:20:25,579
at that in a second but otherwise we

425
00:20:23,420 --> 00:20:28,340
don't really need this stuff we don't

426
00:20:25,579 --> 00:20:30,710
need the ability to write hhas that's

427
00:20:28,339 --> 00:20:32,659
not necessary so really all we were

428
00:20:30,710 --> 00:20:37,100
looking at here is just the thing that

429
00:20:32,660 --> 00:20:39,920
does the font part of this so in here we

430
00:20:37,099 --> 00:20:43,549
will we will need this part so you know

431
00:20:39,920 --> 00:20:45,440
when we do the font loading that we

432
00:20:43,549 --> 00:20:48,589
don't need any of this and then we're

433
00:20:45,440 --> 00:20:53,769
back down to just the stuff where we

434
00:20:48,589 --> 00:20:53,769
actually do the font style stuff alright

435
00:20:55,779 --> 00:21:02,599
just keep that in there for now so

436
00:21:00,200 --> 00:21:05,690
here's where we do the font creation

437
00:21:02,599 --> 00:21:08,179
stuff the hero here we did that and the

438
00:21:05,690 --> 00:21:11,299
non hero and the sounds all that stuff

439
00:21:08,180 --> 00:21:12,799
was just old code we don't care about so

440
00:21:11,299 --> 00:21:15,500
let's go ahead and grab that out of here

441
00:21:12,799 --> 00:21:19,730
and then what we can do is say let's

442
00:21:15,500 --> 00:21:23,809
just focus on this stuff now it looks

443
00:21:19,730 --> 00:21:26,240
like the way this was going is yeah so

444
00:21:23,809 --> 00:21:30,619
you know like the right HHA part that

445
00:21:26,240 --> 00:21:35,000
was this so you know this part here it

446
00:21:30,619 --> 00:21:38,149
just kind of comes down in here this

447
00:21:35,000 --> 00:21:39,410
part here was the initialization side of

448
00:21:38,150 --> 00:21:42,650
things

449
00:21:39,410 --> 00:21:46,570
and so you know that's probably this

450
00:21:42,650 --> 00:21:48,800
this part will probably come down here

451
00:21:46,569 --> 00:21:50,750
temporarily there we go

452
00:21:48,799 --> 00:21:52,399
we're gonna move that probably out to

453
00:21:50,750 --> 00:21:56,269
some kind of a well I guess we're gonna

454
00:21:52,400 --> 00:21:58,650
call the thing ourselves probably from

455
00:21:56,269 --> 00:22:02,359
like the command line or something

456
00:21:58,650 --> 00:22:05,250
so this ad font asset here this part

457
00:22:02,359 --> 00:22:07,199
looks like it kind of needs you to

458
00:22:05,250 --> 00:22:10,410
already have loaded the font maybe I

459
00:22:07,200 --> 00:22:14,670
don't know but I'm gonna put that right

460
00:22:10,410 --> 00:22:17,300
here for now and then we're just gonna

461
00:22:14,670 --> 00:22:21,058
take a quick look here what's happening

462
00:22:17,299 --> 00:22:22,680
we've kind of got our okay so we don't

463
00:22:21,058 --> 00:22:24,119
really care about any of this like I

464
00:22:22,680 --> 00:22:26,610
don't care about freeing the font

465
00:22:24,119 --> 00:22:31,919
because this thing doesn't need to ever

466
00:22:26,609 --> 00:22:33,329
do that yeah so we really don't care

467
00:22:31,920 --> 00:22:34,800
about freeing the memory or any of this

468
00:22:33,329 --> 00:22:37,199
stuff because we're just gonna do one

469
00:22:34,799 --> 00:22:38,369
font and leave and if you want to do

470
00:22:37,200 --> 00:22:42,210
multiple fonts you can just call it

471
00:22:38,369 --> 00:22:49,469
multiple times so I think all this is

472
00:22:42,210 --> 00:23:00,299
fine I don't know if there's any let's

473
00:22:49,470 --> 00:23:05,970
see that all seems fine finalized font

474
00:23:00,299 --> 00:23:07,519
kerning feel like that can just be done

475
00:23:05,970 --> 00:23:19,620
[Music]

476
00:23:07,519 --> 00:23:21,299
maybe in here directly which is fine so

477
00:23:19,619 --> 00:23:22,289
we get rid of that stuff again I'm just

478
00:23:21,299 --> 00:23:23,250
trying to make this as simple as

479
00:23:22,289 --> 00:23:26,039
possible and then hopefully we can

480
00:23:23,250 --> 00:23:30,839
collapse a lot of this down initialize

481
00:23:26,039 --> 00:23:32,670
font DC I'm not really sure where that

482
00:23:30,839 --> 00:23:39,919
is happening at the moment probably in

483
00:23:32,670 --> 00:23:39,920
here somewhere where is that happening

484
00:23:43,160 --> 00:23:48,990
so it looks like that's just something

485
00:23:45,480 --> 00:23:54,269
that happens as a matter of course and

486
00:23:48,990 --> 00:23:57,630
only has to occur once so that I think

487
00:23:54,269 --> 00:24:01,799
is something we could just do inside the

488
00:23:57,630 --> 00:24:07,590
routine again directly so if I just that

489
00:24:01,799 --> 00:24:10,919
can just start out that way and then

490
00:24:07,589 --> 00:24:12,869
what's going on here so this load font

491
00:24:10,920 --> 00:24:16,650
is just that yeah it's just the way we

492
00:24:12,869 --> 00:24:19,979
get the font out of here so that this

493
00:24:16,650 --> 00:24:22,890
also is something that could be done

494
00:24:19,980 --> 00:24:26,910
directly so we really I think only have

495
00:24:22,890 --> 00:24:29,640
one function the function is load glyph

496
00:24:26,910 --> 00:24:33,630
bitmap I think that's it

497
00:24:29,640 --> 00:24:36,680
I think everything else is all just one

498
00:24:33,630 --> 00:24:39,510
big long glob of do this then do that

499
00:24:36,680 --> 00:24:43,830
that doesn't really need to be done more

500
00:24:39,509 --> 00:24:46,950
than once right so I think this should

501
00:24:43,829 --> 00:24:50,429
all be fine and we can probably weld

502
00:24:46,950 --> 00:24:54,660
this all together and be done with it so

503
00:24:50,430 --> 00:25:02,009
if I get rid of this code and put in

504
00:24:54,660 --> 00:25:05,490
here the loading code right there then I

505
00:25:02,009 --> 00:25:08,940
think we're ready to make this thing you

506
00:25:05,490 --> 00:25:13,250
know do its do its thing we can kind of

507
00:25:08,940 --> 00:25:17,789
go from here so I'm gonna save this

508
00:25:13,250 --> 00:25:19,769
information just as knowledge of what we

509
00:25:17,789 --> 00:25:21,599
were using for fonts cuz I don't

510
00:25:19,769 --> 00:25:24,420
remember what it was that we did at the

511
00:25:21,599 --> 00:25:27,299
time so that we can actually call it

512
00:25:24,420 --> 00:25:30,029
with that from like the command line or

513
00:25:27,299 --> 00:25:32,519
something and see if we can reproduce

514
00:25:30,029 --> 00:25:36,389
the same data that we had before for

515
00:25:32,519 --> 00:25:39,660
example but for now what I want to do is

516
00:25:36,390 --> 00:25:44,340
say look what we know we need is we know

517
00:25:39,660 --> 00:25:48,420
we know we need a TTF file name we know

518
00:25:44,339 --> 00:25:52,619
we need a font name and we know we need

519
00:25:48,420 --> 00:25:55,620
a like a value that says how how

520
00:25:52,619 --> 00:26:00,389
they you know how how what the point

521
00:25:55,619 --> 00:26:03,389
size of that font should be so we know

522
00:26:00,390 --> 00:26:06,240
that we need these things and we need to

523
00:26:03,390 --> 00:26:09,650
get all of them so we kind of just want

524
00:26:06,240 --> 00:26:13,140
to say look if the arg count isn't for

525
00:26:09,650 --> 00:26:17,700
this thing ain't gonna work so we should

526
00:26:13,140 --> 00:26:20,309
just say look if you don't give us that

527
00:26:17,700 --> 00:26:21,778
we are going to give you an error and

528
00:26:20,308 --> 00:26:27,710
we're going to tell you that the way to

529
00:26:21,778 --> 00:26:27,710
run this thing is to say you know

530
00:26:28,038 --> 00:26:37,548
TTF file name fontname point size right

531
00:26:39,259 --> 00:26:44,730
so that will allow it to print out the

532
00:26:42,778 --> 00:26:46,288
usage for people who don't know what

533
00:26:44,730 --> 00:26:49,769
they're doing or for me when I forget

534
00:26:46,288 --> 00:26:52,769
what the you know what the actual values

535
00:26:49,769 --> 00:26:54,179
are and then if we assume that we

536
00:26:52,769 --> 00:26:56,190
actually got that then what we're gonna

537
00:26:54,179 --> 00:26:58,798
do is say well the first one was the

538
00:26:56,190 --> 00:27:02,669
TTFN the second one was the font and

539
00:26:58,798 --> 00:27:06,658
then we'll ask for the point size like

540
00:27:02,669 --> 00:27:08,730
this or something right and that'll be

541
00:27:06,659 --> 00:27:12,600
you know that'll be sufficient for our

542
00:27:08,730 --> 00:27:15,960
purposes once we get those things then

543
00:27:12,599 --> 00:27:18,750
what we want to do is inside this call

544
00:27:15,960 --> 00:27:22,679
here we're gonna call the right fonts

545
00:27:18,750 --> 00:27:26,669
call with this information so we would

546
00:27:22,679 --> 00:27:28,080
do or you know maybe it's called extract

547
00:27:26,669 --> 00:27:31,679
font that's sort of more what we're

548
00:27:28,079 --> 00:27:33,178
doing here so here's the file name

549
00:27:31,679 --> 00:27:37,620
here's the font name here's the point

550
00:27:33,179 --> 00:27:46,528
size and then extract font is the new

551
00:27:37,619 --> 00:27:52,168
name of this thing so if I then sort of

552
00:27:46,528 --> 00:27:53,759
get this stuff out of the way then we've

553
00:27:52,169 --> 00:27:57,890
got you know we're sort of ready to go

554
00:27:53,759 --> 00:28:01,109
here we're gonna need Windows so we can

555
00:27:57,890 --> 00:28:03,809
we can pre say you know since we're

556
00:28:01,109 --> 00:28:06,099
extracting it here we're gonna need like

557
00:28:03,808 --> 00:28:07,809
you know obviously standard IO dot H

558
00:28:06,099 --> 00:28:09,579
but we're also gonna need like Windows H

559
00:28:07,809 --> 00:28:11,259
right because we're extracting these

560
00:28:09,579 --> 00:28:14,470
things from Windows so that's you know

561
00:28:11,259 --> 00:28:17,069
we've got to get that from somewhere and

562
00:28:14,470 --> 00:28:19,690
we'll have to include you know I I guess

563
00:28:17,069 --> 00:28:22,509
what's it what is it platform or is it

564
00:28:19,690 --> 00:28:25,660
types handmade types so it looks like

565
00:28:22,509 --> 00:28:32,980
handmade types is what we would want to

566
00:28:25,660 --> 00:28:36,009
for all of our types cuz I want like all

567
00:28:32,980 --> 00:28:39,490
of my normal stuff in here right and and

568
00:28:36,009 --> 00:28:42,789
we don't really know yet exactly whether

569
00:28:39,490 --> 00:28:44,349
we're gonna use we probably won't be

570
00:28:42,789 --> 00:28:47,170
dumping bitmaps we'll probably try to

571
00:28:44,349 --> 00:28:49,509
write out a PNG just because that's what

572
00:28:47,170 --> 00:28:51,550
our game load path is built around so

573
00:28:49,509 --> 00:28:54,609
rather than add a BMP loader which

574
00:28:51,549 --> 00:28:57,039
admittedly would be trivial we might as

575
00:28:54,609 --> 00:28:58,539
well just like dump an uncompressed PNG

576
00:28:57,039 --> 00:29:01,329
since you can do that it probably

577
00:28:58,539 --> 00:29:03,579
wouldn't be very hard to just write one

578
00:29:01,329 --> 00:29:09,669
of those directly so we would probably

579
00:29:03,579 --> 00:29:13,149
do that looking at this code now let's

580
00:29:09,670 --> 00:29:15,700
just try and make this make sense for a

581
00:29:13,150 --> 00:29:19,750
load glyph bitmap and we'll see what's

582
00:29:15,700 --> 00:29:22,930
happening there so we need a glyph index

583
00:29:19,750 --> 00:29:25,059
so we need some idea of like what glyph

584
00:29:22,930 --> 00:29:27,860
index it's going to be that seems like

585
00:29:25,059 --> 00:29:29,639
that might actually be somewhat tricky

586
00:29:27,859 --> 00:29:31,779
[Music]

587
00:29:29,640 --> 00:29:36,370
I'm not sure if we maybe want to pass

588
00:29:31,779 --> 00:29:38,619
that in so we've got this thing called

589
00:29:36,369 --> 00:29:41,769
Global font bits that we must have

590
00:29:38,619 --> 00:29:44,639
allocated somewhere here oops

591
00:29:41,769 --> 00:29:44,639
that's not what I wanted

592
00:29:46,720 --> 00:29:56,110
so it looks like that what's happening

593
00:29:53,619 --> 00:30:02,219
is that gets created in the this call

594
00:29:56,109 --> 00:30:05,769
here right so inside here we're actually

595
00:30:02,220 --> 00:30:08,940
using this device context and we can

596
00:30:05,769 --> 00:30:12,400
have our font bits pointer as well so

597
00:30:08,940 --> 00:30:15,490
why don't actually know where that is

598
00:30:12,400 --> 00:30:15,990
where is our global font bits there it

599
00:30:15,490 --> 00:30:23,980
is

600
00:30:15,990 --> 00:30:28,259
so that was just a void star so here's

601
00:30:23,980 --> 00:30:32,019
our font bits we would create that here

602
00:30:28,259 --> 00:30:40,240
and then we are selecting these things

603
00:30:32,019 --> 00:30:43,089
in there the bitmap and the color all

604
00:30:40,240 --> 00:30:46,359
that looks fine right so this sets up

605
00:30:43,089 --> 00:30:48,789
our windows you know this sets up what

606
00:30:46,359 --> 00:30:49,719
we need to do for windows it basically

607
00:30:48,789 --> 00:30:55,240
looks like that

608
00:30:49,720 --> 00:31:02,370
right so let's just call this like set

609
00:30:55,240 --> 00:31:05,980
up our windows rendering rendering

610
00:31:02,369 --> 00:31:08,289
buffer I guess

611
00:31:05,980 --> 00:31:11,049
and so font bits becomes the place where

612
00:31:08,289 --> 00:31:13,000
these things would actually be loaded we

613
00:31:11,049 --> 00:31:14,710
then are gonna malloc a loaded font I'm

614
00:31:13,000 --> 00:31:15,910
gonna ignore that for now and we'll

615
00:31:14,710 --> 00:31:20,170
figure out what we want to do with that

616
00:31:15,910 --> 00:31:21,850
later we have the font file name here so

617
00:31:20,170 --> 00:31:25,810
we're gonna you know we know what that

618
00:31:21,849 --> 00:31:27,519
is looks like this this is apparently

619
00:31:25,809 --> 00:31:31,230
not the point size this is the pixel

620
00:31:27,519 --> 00:31:35,410
height so I guess I want to say here

621
00:31:31,230 --> 00:31:37,210
that's actually pixel height that's good

622
00:31:35,410 --> 00:31:41,710
cuz I don't really care about point size

623
00:31:37,210 --> 00:31:45,180
as a dumb name anyway so that's a little

624
00:31:41,710 --> 00:31:48,579
bit clearer what's happening there so

625
00:31:45,180 --> 00:31:51,100
let's see if we pass in the pixel height

626
00:31:48,579 --> 00:31:54,369
then this will do what we want it to do

627
00:31:51,099 --> 00:31:57,089
still right so this basically this loads

628
00:31:54,369 --> 00:31:57,089
the font right

629
00:32:00,868 --> 00:32:06,730
and I suppose in here because this is a

630
00:32:04,480 --> 00:32:08,499
command-line utility we probably want to

631
00:32:06,730 --> 00:32:12,099
issue an error message if for some

632
00:32:08,499 --> 00:32:14,980
reason we cannot acquire the font as we

633
00:32:12,099 --> 00:32:17,230
expect now I don't really know the best

634
00:32:14,980 --> 00:32:21,128
way because since this is a font mapping

635
00:32:17,230 --> 00:32:23,200
kind of thing there's a lot of issues

636
00:32:21,128 --> 00:32:24,699
that happen here and I don't know what

637
00:32:23,200 --> 00:32:33,778
all the marks I don't usually work with

638
00:32:24,700 --> 00:32:37,600
the windows font system so for example I

639
00:32:33,778 --> 00:32:39,579
don't know if you told it to load a font

640
00:32:37,599 --> 00:32:43,449
that was already loaded I don't know

641
00:32:39,579 --> 00:32:46,839
what this would tell you right so if we

642
00:32:43,450 --> 00:32:48,639
said like load this Arial TTFN it's like

643
00:32:46,839 --> 00:32:50,769
I already have that loaded I don't know

644
00:32:48,638 --> 00:32:53,558
if this was return of zero and so I'm

645
00:32:50,769 --> 00:32:58,628
not sure if checking that is the right

646
00:32:53,558 --> 00:33:00,849
thing to do and furthermore this like if

647
00:32:58,628 --> 00:33:03,128
this thing can't add it because it was

648
00:33:00,849 --> 00:33:06,608
already added I'm assuming this would

649
00:33:03,128 --> 00:33:08,439
then load that existing font so I don't

650
00:33:06,608 --> 00:33:09,908
think there's like I don't know if

651
00:33:08,440 --> 00:33:12,519
there's any way in Windows to say I'm

652
00:33:09,909 --> 00:33:16,210
trying to render this specific TTF file

653
00:33:12,519 --> 00:33:18,190
load it and render it I don't you know

654
00:33:16,210 --> 00:33:21,929
because when Windows in their

655
00:33:18,190 --> 00:33:24,249
infinitesimal wisdom doesn't have that

656
00:33:21,929 --> 00:33:27,519
functionality in their API I don't think

657
00:33:24,249 --> 00:33:30,308
so I'm not sure how we want to do this

658
00:33:27,519 --> 00:33:36,249
it may be the case that we just have to

659
00:33:30,308 --> 00:33:40,470
use create font a and assume for our

660
00:33:36,249 --> 00:33:43,149
purposes that when we're doing this

661
00:33:40,470 --> 00:33:45,639
whatever comes back from here is the

662
00:33:43,148 --> 00:33:48,638
thing that will check for error it's not

663
00:33:45,638 --> 00:33:51,339
perfect but I'm guessing that's the best

664
00:33:48,638 --> 00:33:54,118
thing to do so if we get in back no

665
00:33:51,339 --> 00:33:54,118
right

666
00:34:00,250 --> 00:34:18,469
then we should stop and so we'll just

667
00:34:15,559 --> 00:34:26,630
print out the TTF file name and the font

668
00:34:18,469 --> 00:34:29,449
name here and call it a day so that's

669
00:34:26,630 --> 00:34:34,840
all I'm gonna do there when we get down

670
00:34:29,449 --> 00:34:41,149
to here we want to just select this font

671
00:34:34,840 --> 00:34:45,530
I'm not sure what this text metric bit

672
00:34:41,150 --> 00:34:51,920
is here that that was coming from where

673
00:34:45,530 --> 00:34:55,370
is that other code here so who actually

674
00:34:51,920 --> 00:34:57,710
loaded like who set up that text metric

675
00:34:55,369 --> 00:35:00,679
oh I see

676
00:34:57,710 --> 00:35:03,170
we're actually requesting it so I should

677
00:35:00,679 --> 00:35:07,969
be able to have that let me let me grab

678
00:35:03,170 --> 00:35:11,000
that out of here so I should be able to

679
00:35:07,969 --> 00:35:12,919
actually fetch that here and then be

680
00:35:11,000 --> 00:35:16,820
good to go so this will select it in

681
00:35:12,920 --> 00:35:19,760
there this will get the metrics for it

682
00:35:16,820 --> 00:35:21,769
so that we're good to go the rest of

683
00:35:19,760 --> 00:35:25,810
this stuff now I'm gonna just say

684
00:35:21,769 --> 00:35:37,190
alright let's you know oops

685
00:35:25,809 --> 00:35:42,130
do a min code point max code point these

686
00:35:37,190 --> 00:35:47,740
can just be done this way I like this

687
00:35:42,130 --> 00:35:51,140
always good so once we get here one past

688
00:35:47,739 --> 00:35:53,209
one past max font code point to be

689
00:35:51,139 --> 00:35:55,460
honest I assume we selected that because

690
00:35:53,210 --> 00:35:59,389
that's the highest Unicode code point we

691
00:35:55,460 --> 00:36:01,010
ever would want to look for so I guess

692
00:35:59,389 --> 00:36:02,059
what I would say there is I just say I

693
00:36:01,010 --> 00:36:05,800
don't know that early needs to be a

694
00:36:02,059 --> 00:36:08,340
pound of fine that could just be you 32

695
00:36:05,800 --> 00:36:20,550
uh

696
00:36:08,340 --> 00:36:25,539
so I might just say this and and do that

697
00:36:20,550 --> 00:36:26,800
right that seems reasonable to me and

698
00:36:25,539 --> 00:36:29,469
we'll just leave it like that

699
00:36:26,800 --> 00:36:38,019
so glyph index from code point then

700
00:36:29,469 --> 00:36:40,539
becomes a local like so and we allocate

701
00:36:38,019 --> 00:36:45,820
however big we wanted that to be and we

702
00:36:40,539 --> 00:36:47,829
clear it right and again just because

703
00:36:45,820 --> 00:36:50,019
we're now just doing this entirely local

704
00:36:47,829 --> 00:36:51,639
into one like flat simple routine that

705
00:36:50,019 --> 00:36:53,320
extracts the fonts we don't really need

706
00:36:51,639 --> 00:36:54,879
to store these things in any kind of

707
00:36:53,320 --> 00:36:59,110
external structure we can just keep them

708
00:36:54,880 --> 00:37:03,630
all you know where they should go now

709
00:36:59,110 --> 00:37:07,960
HHA font glyph we don't really need and

710
00:37:03,630 --> 00:37:11,500
so I think we may want to just sort of I

711
00:37:07,960 --> 00:37:13,360
mean we could keep it there for now but

712
00:37:11,500 --> 00:37:16,000
we don't really need to call it that so

713
00:37:13,360 --> 00:37:19,000
I don't know how I feel about this at

714
00:37:16,000 --> 00:37:22,059
the immediate moment I'm gonna leave it

715
00:37:19,000 --> 00:37:26,670
in like I said the present time but I

716
00:37:22,059 --> 00:37:29,889
you know this probably isn't something

717
00:37:26,670 --> 00:37:31,269
that I would keep named this way I would

718
00:37:29,889 --> 00:37:33,099
probably just call it font cliff or

719
00:37:31,269 --> 00:37:35,409
something right because we do need to

720
00:37:33,099 --> 00:37:37,509
remember this information but we don't

721
00:37:35,409 --> 00:37:41,409
need to write it out into an HHA we're

722
00:37:37,510 --> 00:37:47,160
just gonna dump a text file and so yeah

723
00:37:41,409 --> 00:37:50,339
you get the idea alright so I think

724
00:37:47,159 --> 00:37:53,538
that's reasonable

725
00:37:50,340 --> 00:37:53,539
[Music]

726
00:37:56,369 --> 00:38:09,119
that all seems fine so the glyphs would

727
00:38:01,858 --> 00:38:16,608
go here that's all fine and that all

728
00:38:09,119 --> 00:38:22,650
seems fine the max glyph count it's fine

729
00:38:16,608 --> 00:38:30,449
the horizontal advance is fine all this

730
00:38:22,650 --> 00:38:33,210
is fine oops so that's going to be

731
00:38:30,449 --> 00:38:36,449
something that we want to copy what's

732
00:38:33,210 --> 00:38:45,139
happening here clearing that seems fine

733
00:38:36,449 --> 00:38:45,139
to all this seems reasonable

734
00:38:46,639 --> 00:38:53,159
yeah all right so the glyph count as it

735
00:38:50,489 --> 00:38:57,079
turns out we want to start at one we

736
00:38:53,159 --> 00:38:59,308
want the the initial stuff to be cleared

737
00:38:57,079 --> 00:39:01,499
it looks like then we're sort of going

738
00:38:59,309 --> 00:39:04,499
to start filling out the basic asset

739
00:39:01,498 --> 00:39:09,649
data at the moment again we really don't

740
00:39:04,498 --> 00:39:11,968
need to write any of this out this way

741
00:39:09,650 --> 00:39:15,079
this will all be tracked automatically

742
00:39:11,969 --> 00:39:18,479
so mostly all we need to do here is

743
00:39:15,079 --> 00:39:20,700
remember what these are these can this

744
00:39:18,478 --> 00:39:21,748
could really be done anywhere because we

745
00:39:20,699 --> 00:39:24,328
can get it directly on the test

746
00:39:21,748 --> 00:39:26,879
semester's if we want to but for right

747
00:39:24,329 --> 00:39:30,298
now I'm just gonna say let's let's do it

748
00:39:26,880 --> 00:39:35,068
like this so that we can access it

749
00:39:30,298 --> 00:39:37,978
easily as we go forward so that's all

750
00:39:35,068 --> 00:39:41,989
fine we don't care about this we don't

751
00:39:37,978 --> 00:39:50,460
care about this we don't care about that

752
00:39:41,989 --> 00:39:52,949
so really what we need to know here so

753
00:39:50,460 --> 00:39:58,108
this part I'm really not sure how we

754
00:39:52,949 --> 00:40:00,868
want to proceed I guess what we probably

755
00:39:58,108 --> 00:40:02,880
want to do is just provide some

756
00:40:00,869 --> 00:40:09,479
information about what kind of thought

757
00:40:02,880 --> 00:40:10,260
extraction you are doing so for now we

758
00:40:09,478 --> 00:40:13,739
only have

759
00:40:10,260 --> 00:40:16,890
American English right in the future

760
00:40:13,739 --> 00:40:19,589
let's say you want to localize so you

761
00:40:16,889 --> 00:40:21,839
want to do a character set from a single

762
00:40:19,590 --> 00:40:24,360
font that has a bunch of European

763
00:40:21,840 --> 00:40:28,019
language support as well so maybe you've

764
00:40:24,360 --> 00:40:29,430
got you know cedilha and stuff for you

765
00:40:28,019 --> 00:40:32,159
know see with cedilha

766
00:40:29,429 --> 00:40:35,849
or you want to do an umlaut or something

767
00:40:32,159 --> 00:40:38,549
like this right so these are basically

768
00:40:35,849 --> 00:40:41,250
collections of code points that you want

769
00:40:38,550 --> 00:40:44,630
to extract and so we kind of need

770
00:40:41,250 --> 00:40:47,550
something that says what those should be

771
00:40:44,630 --> 00:40:50,570
we basically need an array of like here

772
00:40:47,550 --> 00:40:53,370
or all the code points we expect to have

773
00:40:50,570 --> 00:40:55,920
and so that's sort of a separate thing

774
00:40:53,369 --> 00:40:58,349
that I'm gonna pull out and figure out

775
00:40:55,920 --> 00:40:59,940
how to feed in here so that there's like

776
00:40:58,349 --> 00:41:06,230
an additional command line parameter

777
00:40:59,940 --> 00:41:06,230
that's like which font set did you want

778
00:41:06,349 --> 00:41:12,630
does that make sense and that way then

779
00:41:11,219 --> 00:41:14,459
later like I said you know someone wants

780
00:41:12,630 --> 00:41:16,140
to do a Korean localized version or

781
00:41:14,460 --> 00:41:17,639
Japanese localized version or someone's

782
00:41:16,139 --> 00:41:20,039
trying to add support for Farsi or

783
00:41:17,639 --> 00:41:21,750
whatever else there's gonna be all these

784
00:41:20,039 --> 00:41:25,079
extra Unicode code points that you need

785
00:41:21,750 --> 00:41:27,179
and you might not want like if you're

786
00:41:25,079 --> 00:41:28,650
gonna be doing like a Farsi version that

787
00:41:27,179 --> 00:41:31,319
may come from a font that doesn't have

788
00:41:28,650 --> 00:41:33,150
any you know Roman letters in it because

789
00:41:31,320 --> 00:41:34,800
the Roman letters are going to be coming

790
00:41:33,150 --> 00:41:37,110
from a different font if you're using

791
00:41:34,800 --> 00:41:39,570
them so you only care about this font

792
00:41:37,110 --> 00:41:42,690
for Farsi or you only care about this

793
00:41:39,570 --> 00:41:45,780
font for you know Mandarin and so

794
00:41:42,690 --> 00:41:48,030
assuming that you have it broken down

795
00:41:45,780 --> 00:41:50,640
like that we need a way for the font

796
00:41:48,030 --> 00:41:56,190
utility to basically take like a key

797
00:41:50,639 --> 00:41:58,500
word that says which types of glyphs are

798
00:41:56,190 --> 00:42:02,070
we trying to extract here and so that

799
00:41:58,500 --> 00:42:04,650
over time if we want to we can add more

800
00:42:02,070 --> 00:42:08,730
of those as we choose to add like

801
00:42:04,650 --> 00:42:11,460
language support so that's what I want

802
00:42:08,730 --> 00:42:14,969
to do here I want to add another thing

803
00:42:11,460 --> 00:42:16,829
here there's gonna be a lot of arguments

804
00:42:14,969 --> 00:42:18,959
this thing so there's gonna be pixel

805
00:42:16,829 --> 00:42:21,860
height there's gonna be like care set

806
00:42:18,960 --> 00:42:21,860
right

807
00:42:30,690 --> 00:42:37,990
and we're just gonna have to go through

808
00:42:33,730 --> 00:42:40,809
here and have some set of like names for

809
00:42:37,989 --> 00:42:42,879
these things so we're gonna need like a

810
00:42:40,809 --> 00:42:57,219
thing that's you know something like

811
00:42:42,880 --> 00:42:59,260
this let's say so it would have like a

812
00:42:57,219 --> 00:43:01,689
name like what do you want this care set

813
00:42:59,260 --> 00:43:04,090
to be called and then it would have a

814
00:43:01,690 --> 00:43:05,260
function right so there'd be some kind

815
00:43:04,090 --> 00:43:09,190
of a callback here

816
00:43:05,260 --> 00:43:12,850
that's like what's the care set in

817
00:43:09,190 --> 00:43:19,389
question so it would be like yeah care

818
00:43:12,849 --> 00:43:22,210
set creator name and the name is the

819
00:43:19,389 --> 00:43:23,650
function in this case something gets

820
00:43:22,210 --> 00:43:26,289
called here that we don't know what it

821
00:43:23,650 --> 00:43:29,889
is but we'll fill it out later and then

822
00:43:26,289 --> 00:43:32,259
we have a you know a pipe def here where

823
00:43:29,889 --> 00:43:36,789
we say this is a care set creator

824
00:43:32,260 --> 00:43:41,710
callback right or function something

825
00:43:36,789 --> 00:43:43,840
like that so that's all we need then we

826
00:43:41,710 --> 00:43:47,110
can have this have you know whatever the

827
00:43:43,840 --> 00:43:49,870
function is that you call and so when we

828
00:43:47,110 --> 00:43:53,380
go through here what we can do is print

829
00:43:49,869 --> 00:43:56,019
out all of those so we can make a little

830
00:43:53,380 --> 00:44:02,400
you know a little thing here where we

831
00:43:56,019 --> 00:44:06,039
say oops there we go

832
00:44:02,400 --> 00:44:13,780
so I don't know what this is maybe this

833
00:44:06,039 --> 00:44:15,730
is just like basic English right so this

834
00:44:13,780 --> 00:44:19,150
is like I just our test like basic

835
00:44:15,730 --> 00:44:20,760
English or basic test

836
00:44:19,150 --> 00:44:23,680
I don't even yeah maybe it's just test

837
00:44:20,760 --> 00:44:25,300
right so we don't even it like it's got

838
00:44:23,679 --> 00:44:26,739
the kanji owl in there it's not basic

839
00:44:25,300 --> 00:44:28,450
English it's got some other stuff in

840
00:44:26,739 --> 00:44:29,979
there so we're just we're not even

841
00:44:28,449 --> 00:44:32,859
pretending that it's a real character

842
00:44:29,980 --> 00:44:35,849
set it's not something that really maps

843
00:44:32,860 --> 00:44:39,760
to anything that you particularly need

844
00:44:35,849 --> 00:44:42,309
um I'll just do static here although

845
00:44:39,760 --> 00:44:46,960
what do we have what do we have there

846
00:44:42,309 --> 00:44:49,740
global global variable so we've got a

847
00:44:46,960 --> 00:44:57,059
care set creator here that's gonna be

848
00:44:49,739 --> 00:45:00,098
all of our care sets looks like that and

849
00:44:57,059 --> 00:45:02,630
maybe just global yeah that's what is

850
00:45:00,099 --> 00:45:03,960
and each of these is gonna have a name

851
00:45:02,630 --> 00:45:08,619
[Music]

852
00:45:03,960 --> 00:45:13,389
and a pointer right so I guess I'll just

853
00:45:08,619 --> 00:45:16,690
call this test test and these can then

854
00:45:13,389 --> 00:45:20,710
be looped over and print it out so I can

855
00:45:16,690 --> 00:45:27,010
do like care set index is less than

856
00:45:20,710 --> 00:45:36,210
array account care sets don't ask me why

857
00:45:27,010 --> 00:45:36,210
this isn't this way because it should be

858
00:45:41,818 --> 00:45:47,489
that seems good and then you know we'll

859
00:45:45,159 --> 00:45:52,078
just loop over these and we print out

860
00:45:47,489 --> 00:46:00,338
what they actually were so we would say

861
00:45:52,079 --> 00:46:03,400
there's maybe I'm feeling really

862
00:46:00,338 --> 00:46:05,558
generous and so each of these things

863
00:46:03,400 --> 00:46:10,838
where we've got these care sets we would

864
00:46:05,559 --> 00:46:13,290
say care set index dot name and I'll

865
00:46:10,838 --> 00:46:16,259
even throw in for you

866
00:46:13,289 --> 00:46:18,670
because I'm just that nice a guy

867
00:46:16,260 --> 00:46:20,980
description so that you know you don't

868
00:46:18,670 --> 00:46:26,068
have to guess what kinds of characters

869
00:46:20,980 --> 00:46:26,068
are involved there maybe it just says

870
00:46:37,329 --> 00:46:46,630
right so this way we can have a sort of

871
00:46:42,920 --> 00:46:49,759
a way of doing a rudimentary sort of

872
00:46:46,630 --> 00:46:51,559
extends extension service so that anyone

873
00:46:49,759 --> 00:46:53,809
who wants to like add new care sets just

874
00:46:51,559 --> 00:46:55,569
defines a new karasek creator and will

875
00:46:53,809 --> 00:46:58,849
make this code in here pretty easy to do

876
00:46:55,568 --> 00:47:03,829
and that way it's you know it's trivial

877
00:46:58,849 --> 00:47:05,240
to make that an actual you know you know

878
00:47:03,829 --> 00:47:06,650
you want to add a new language you just

879
00:47:05,239 --> 00:47:08,118
kind of add a new care set crater and

880
00:47:06,650 --> 00:47:11,088
you know takes ten seconds and off

881
00:47:08,119 --> 00:47:13,250
you're off and running because the code

882
00:47:11,088 --> 00:47:15,588
inside handmade hero doesn't care at all

883
00:47:13,250 --> 00:47:17,539
about how you address those fonts so you

884
00:47:15,588 --> 00:47:19,849
know if you want to be creative and hey

885
00:47:17,539 --> 00:47:21,980
we're gonna specialize vertical printed

886
00:47:19,849 --> 00:47:24,950
traditional Japanese right-to-left

887
00:47:21,980 --> 00:47:26,750
reading you know go nuts right and this

888
00:47:24,949 --> 00:47:28,308
would let you extract you could put in

889
00:47:26,750 --> 00:47:31,460
like what the character ranges are that

890
00:47:28,309 --> 00:47:33,829
you want and you know just go from there

891
00:47:31,460 --> 00:47:35,480
and I think the code in the game would

892
00:47:33,829 --> 00:47:38,660
then just support it just fine

893
00:47:35,480 --> 00:47:40,548
so if we do that then what we need is in

894
00:47:38,659 --> 00:47:44,058
here we need some way of actually

895
00:47:40,548 --> 00:47:46,009
calling one of those functions so what I

896
00:47:44,059 --> 00:47:52,119
want to do is introduce a boolean that's

897
00:47:46,009 --> 00:47:55,690
like you know print usage or something

898
00:47:52,119 --> 00:47:59,390
and so what I'd rather do is have this

899
00:47:55,690 --> 00:48:00,619
immediate and and maybe actually I do it

900
00:47:59,389 --> 00:48:05,078
the other way around now I'm thinking

901
00:48:00,619 --> 00:48:05,079
about it maybe I do it like this like

902
00:48:08,139 --> 00:48:14,659
that and that way we could do by default

903
00:48:13,130 --> 00:48:17,088
print out the usage if everything goes

904
00:48:14,659 --> 00:48:18,949
like perfectly then great but otherwise

905
00:48:17,088 --> 00:48:20,900
we're going to print this out

906
00:48:18,949 --> 00:48:25,818
and so in here what we do is we'll loop

907
00:48:20,900 --> 00:48:28,789
over these again and I'll just grab this

908
00:48:25,818 --> 00:48:30,349
out and say look we're gonna try and

909
00:48:28,789 --> 00:48:31,099
match the string so we're gonna do a

910
00:48:30,349 --> 00:48:37,039
string comp

911
00:48:31,099 --> 00:48:40,338
on this to see if the care sets care set

912
00:48:37,039 --> 00:48:44,259
index and maybe I'll actually pull this

913
00:48:40,338 --> 00:48:44,259
out like so

914
00:48:44,539 --> 00:48:52,400
we'll just look and see does this

915
00:48:46,800 --> 00:48:59,359
particular character set match the name

916
00:48:52,400 --> 00:48:59,358
that was given on the command line right

917
00:48:59,420 --> 00:49:06,659
so that's that

918
00:49:03,838 --> 00:49:08,358
so I'll test that if I find one then

919
00:49:06,659 --> 00:49:11,909
we're in good shape and we'll call it

920
00:49:08,358 --> 00:49:15,659
and we can say that we found the care

921
00:49:11,909 --> 00:49:22,739
set and everyone's happy so maybe do it

922
00:49:15,659 --> 00:49:24,328
this way so I'll just remember which one

923
00:49:22,739 --> 00:49:26,549
it is here this should probably be

924
00:49:24,329 --> 00:49:28,410
called test actually this should be

925
00:49:26,550 --> 00:49:30,300
called peleset care set creator just to

926
00:49:28,409 --> 00:49:33,809
be supposed about what's going on there

927
00:49:30,300 --> 00:49:36,720
so we'll test each of these if we find

928
00:49:33,809 --> 00:49:39,328
one then we remember which one it was

929
00:49:36,719 --> 00:49:41,608
so then later what we could say is look

930
00:49:39,329 --> 00:49:44,670
did we find a karasek creator because i

931
00:49:41,608 --> 00:49:52,529
don't know also the care set name should

932
00:49:44,670 --> 00:49:58,559
come in here it's as args 4 and the care

933
00:49:52,530 --> 00:50:00,750
set name in this case will be matched

934
00:49:58,559 --> 00:50:03,059
when it matches if it matches we get

935
00:50:00,750 --> 00:50:08,608
that if we see that we'll try to extract

936
00:50:03,059 --> 00:50:15,750
otherwise we won't and we'll say you

937
00:50:08,608 --> 00:50:19,608
know error could not match character set

938
00:50:15,750 --> 00:50:19,608
or unrecognized character set

939
00:50:25,190 --> 00:50:28,929
and we'll say look man I don't know what

940
00:50:27,409 --> 00:50:36,288
you're talking about

941
00:50:28,929 --> 00:50:39,169
right so that's will allow us to have

942
00:50:36,289 --> 00:50:40,640
sort of a easy system for just extending

943
00:50:39,170 --> 00:50:42,079
which character sets you can extract

944
00:50:40,639 --> 00:50:43,400
using this utility because the utility

945
00:50:42,079 --> 00:50:44,510
doesn't care and the game doesn't care

946
00:50:43,400 --> 00:50:46,670
so we might as well have a good way to

947
00:50:44,510 --> 00:50:48,859
do that and so really then all we need

948
00:50:46,670 --> 00:50:51,230
to do is call that function so in here

949
00:50:48,858 --> 00:50:53,568
we would say the karasek creator that

950
00:50:51,230 --> 00:50:55,130
you talked about we'll call it before we

951
00:50:53,568 --> 00:50:56,690
try to extract the font

952
00:50:55,130 --> 00:51:00,858
that'll make sure that we can actually

953
00:50:56,690 --> 00:51:03,048
you know and I mean we can even just

954
00:51:00,858 --> 00:51:09,288
pass in the karasek creator to be honest

955
00:51:03,048 --> 00:51:11,989
I suppose that would work too but either

956
00:51:09,289 --> 00:51:13,280
way so we'll do whatever we have to do

957
00:51:11,989 --> 00:51:14,929
here to make sure that works and then

958
00:51:13,280 --> 00:51:16,940
we'll come through and extract the fonts

959
00:51:14,929 --> 00:51:18,558
given whatever that character set ends

960
00:51:16,940 --> 00:51:20,329
up being we'll figure out what that

961
00:51:18,559 --> 00:51:24,670
looks like in a second and that'll

962
00:51:20,329 --> 00:51:28,130
determine what this looks like right so

963
00:51:24,670 --> 00:51:30,858
coming through here what do we want to

964
00:51:28,130 --> 00:51:33,710
do now in extract ok so you can see in

965
00:51:30,858 --> 00:51:36,259
here let's get back to where we were at

966
00:51:33,710 --> 00:51:38,510
we sort of malloc some memory for

967
00:51:36,260 --> 00:51:41,809
processing here we went through and

968
00:51:38,510 --> 00:51:43,910
started doing our thing this stuff we

969
00:51:41,809 --> 00:51:48,200
don't care about at all because someone

970
00:51:43,909 --> 00:51:49,519
else is gonna add that stuff right so we

971
00:51:48,199 --> 00:51:51,649
don't care about any of that we don't

972
00:51:49,519 --> 00:51:53,088
care about this we also don't care about

973
00:51:51,650 --> 00:51:54,769
that because that's actually already

974
00:51:53,088 --> 00:51:56,150
happening right here no one's touching

975
00:51:54,769 --> 00:51:59,239
the Weisse context so that's just

976
00:51:56,150 --> 00:52:07,420
redundant in here where we get the

977
00:51:59,239 --> 00:52:09,528
kerning pairs out that all looks fine I

978
00:52:07,420 --> 00:52:12,559
don't see anything special happening

979
00:52:09,528 --> 00:52:15,769
there to you it seems fine to me we run

980
00:52:12,559 --> 00:52:18,798
through the kerning pairs so so this one

981
00:52:15,769 --> 00:52:22,639
pass mass font code point bit there

982
00:52:18,798 --> 00:52:27,599
right we're just going to make sure that

983
00:52:22,639 --> 00:52:32,279
those get sort of clipped

984
00:52:27,599 --> 00:52:36,119
that all looks fine and we're filling

985
00:52:32,280 --> 00:52:39,930
out the horizontal advance table so that

986
00:52:36,119 --> 00:52:42,269
all looks looks totally fine I don't see

987
00:52:39,929 --> 00:52:43,489
anything weird happening there when we

988
00:52:42,269 --> 00:52:46,530
come through here

989
00:52:43,489 --> 00:52:48,869
this is just our way of writing out all

990
00:52:46,530 --> 00:52:51,720
of our glyphs we're not going to do it

991
00:52:48,869 --> 00:52:53,069
that way anymore right because we're

992
00:52:51,719 --> 00:52:59,069
gonna actually have to put these into a

993
00:52:53,070 --> 00:53:04,280
hht tag file that we dump out the

994
00:52:59,070 --> 00:53:04,280
horizontal advanced part of things here

995
00:53:06,440 --> 00:53:12,389
so the horizontal advanced slicing thing

996
00:53:09,809 --> 00:53:14,099
that's just again not going to matter

997
00:53:12,389 --> 00:53:17,789
because that's something that we're

998
00:53:14,099 --> 00:53:20,480
gonna export into text so we don't have

999
00:53:17,789 --> 00:53:24,659
to deal with that at all

1000
00:53:20,480 --> 00:53:26,699
so that all seems fine I must have

1001
00:53:24,659 --> 00:53:29,489
missed when I was copying the code out

1002
00:53:26,699 --> 00:53:37,849
the part where we actually try to export

1003
00:53:29,489 --> 00:53:37,849
one of these is it this it's not

1004
00:53:40,760 --> 00:53:53,050
so how do we actually end up calling

1005
00:53:43,699 --> 00:53:53,049
load with bitmap yeah I'm saying to you

1006
00:54:02,199 --> 00:54:09,919
huh

1007
00:54:04,510 --> 00:54:18,830
so you're telling me we never call load

1008
00:54:09,920 --> 00:54:20,980
glyph bitmap what am I missing

1009
00:54:18,829 --> 00:54:20,980
oops

1010
00:54:23,210 --> 00:54:32,150
that seems weird would you not agree

1011
00:54:28,400 --> 00:54:36,110
with that like shouldn't someone be

1012
00:54:32,150 --> 00:54:46,940
calling load glyph bitmap at some point

1013
00:54:36,110 --> 00:54:56,210
here was there was there not oh that's

1014
00:54:46,940 --> 00:55:00,579
good I'm in the wrong file there we go

1015
00:54:56,210 --> 00:55:03,470
so if we look at what's going on here

1016
00:55:00,579 --> 00:55:05,960
these got added as bitmaps and we just

1017
00:55:03,469 --> 00:55:10,119
called them with this that's literally

1018
00:55:05,960 --> 00:55:12,769
all we did so that's pretty boring and

1019
00:55:10,119 --> 00:55:14,630
like exactly what we'd expect so there

1020
00:55:12,769 --> 00:55:15,409
there wasn't anything I mean it's good

1021
00:55:14,630 --> 00:55:17,269
news I guess

1022
00:55:15,409 --> 00:55:19,909
there isn't anything we have to do

1023
00:55:17,269 --> 00:55:24,440
besides basically this you know for

1024
00:55:19,909 --> 00:55:27,619
every font in the system there right we

1025
00:55:24,440 --> 00:55:31,039
would have to do that so I think that's

1026
00:55:27,619 --> 00:55:36,380
it and that data is going to be coming

1027
00:55:31,039 --> 00:55:36,860
from the like whatever our care set

1028
00:55:36,380 --> 00:55:38,869
creator

1029
00:55:36,860 --> 00:55:40,640
however we specify how that dumps out

1030
00:55:38,869 --> 00:55:45,440
what those code points are that's the

1031
00:55:40,639 --> 00:55:47,359
part that we have to do there right so

1032
00:55:45,440 --> 00:55:52,789
we'll want to make that work in some

1033
00:55:47,360 --> 00:55:55,550
reasonable way let's see so

1034
00:55:52,789 --> 00:56:01,039
part so one thing I'm a little hazy on

1035
00:55:55,550 --> 00:56:06,320
here is we we allocate space for the max

1036
00:56:01,039 --> 00:56:09,739
glyph count but like we should know how

1037
00:56:06,320 --> 00:56:11,059
many glyphs were doing because we should

1038
00:56:09,739 --> 00:56:12,319
be able to just say like this is how

1039
00:56:11,059 --> 00:56:15,259
many glyphs there are so I don't know

1040
00:56:12,320 --> 00:56:18,559
why the max glyph count nonsense

1041
00:56:15,260 --> 00:56:26,120
is happening so I think what I would

1042
00:56:18,559 --> 00:56:29,360
prefer is I think the the code for care

1043
00:56:26,119 --> 00:56:32,719
set creator should spit out here's how

1044
00:56:29,360 --> 00:56:35,180
many characters we expect because it

1045
00:56:32,719 --> 00:56:37,869
knows how many it wants mapped so I feel

1046
00:56:35,179 --> 00:56:44,589
like max lifts count is just dumb and

1047
00:56:37,869 --> 00:56:44,589
doesn't need to happen at all right I

1048
00:56:45,820 --> 00:56:52,420
just I just don't see the point of that

1049
00:56:49,900 --> 00:56:55,070
to me that there's there's no point

1050
00:56:52,420 --> 00:56:57,320
because if we looking here at how that's

1051
00:56:55,070 --> 00:57:05,900
actually used right it's just used to

1052
00:56:57,320 --> 00:57:13,400
specula allocate you know if it's just

1053
00:57:05,900 --> 00:57:16,190
there for no real reason so so I I don't

1054
00:57:13,400 --> 00:57:17,900
I don't see the point so I think what

1055
00:57:16,190 --> 00:57:20,900
I'd rather do is say look there's a

1056
00:57:17,900 --> 00:57:23,450
glyph count and that's something we're

1057
00:57:20,900 --> 00:57:25,880
actually going to be supplied with so

1058
00:57:23,449 --> 00:57:28,279
like this is how many glyphs and here's

1059
00:57:25,880 --> 00:57:32,680
the array of what their code points are

1060
00:57:28,280 --> 00:57:38,810
that should just be supplied so you know

1061
00:57:32,679 --> 00:57:40,789
something like this so you basically say

1062
00:57:38,809 --> 00:57:42,739
here's many glyphs there are here's what

1063
00:57:40,789 --> 00:57:50,860
the code points are for each individual

1064
00:57:42,739 --> 00:57:53,629
glyph so glyph index you know this right

1065
00:57:50,860 --> 00:57:56,900
glyph index from code point has to be

1066
00:57:53,630 --> 00:57:59,390
allocated like really wide because it's

1067
00:57:56,900 --> 00:58:01,670
trying to map a glyph I'm sorry it's

1068
00:57:59,389 --> 00:58:05,179
trying to matter code point back to a

1069
00:58:01,670 --> 00:58:06,710
glyph but the glyph count which is our

1070
00:58:05,179 --> 00:58:09,679
compacted array that

1071
00:58:06,710 --> 00:58:13,610
we just know so there's no point in

1072
00:58:09,679 --> 00:58:16,460
putting a 5,000 glyph limit on it when

1073
00:58:13,610 --> 00:58:20,390
we can just say here's how many we

1074
00:58:16,460 --> 00:58:22,369
wanted and be done so everything else in

1075
00:58:20,389 --> 00:58:30,199
here should be able to just go from the

1076
00:58:22,369 --> 00:58:32,599
glyph count directly so this right that

1077
00:58:30,199 --> 00:58:34,460
should be sufficient and then all the

1078
00:58:32,599 --> 00:58:38,719
rest of this stuff can work exactly as

1079
00:58:34,460 --> 00:58:42,490
it was this doesn't matter that is good

1080
00:58:38,719 --> 00:58:44,599
because we do need this to be you know

1081
00:58:42,489 --> 00:58:46,909
zeroed out or however you want to say

1082
00:58:44,599 --> 00:58:48,349
that but everything else here should

1083
00:58:46,909 --> 00:58:52,039
just work off the back lift count

1084
00:58:48,349 --> 00:58:54,069
directly so all this stuff seems fine

1085
00:58:52,039 --> 00:58:56,750
[Music]

1086
00:58:54,070 --> 00:58:58,550
again no max lift count necessary the

1087
00:58:56,750 --> 00:59:01,940
glyph count is exactly what it should be

1088
00:58:58,550 --> 00:59:05,030
there and so all that stuff should just

1089
00:59:01,940 --> 00:59:08,000
work then we should be able to literally

1090
00:59:05,030 --> 00:59:09,800
write this routine directly to now where

1091
00:59:08,000 --> 00:59:12,260
we can just say look here's the glyph

1092
00:59:09,800 --> 00:59:14,240
index we wanted we don't need to write

1093
00:59:12,260 --> 00:59:17,300
out zero because we know that that's not

1094
00:59:14,239 --> 00:59:19,669
an actual valid glyph index we'll go

1095
00:59:17,300 --> 00:59:22,730
from one to the glyph count in here

1096
00:59:19,670 --> 00:59:26,300
we'll say the glyph oops

1097
00:59:22,730 --> 00:59:28,280
with code point we know that it's

1098
00:59:26,300 --> 00:59:31,730
whatever the glyph index is in that

1099
00:59:28,280 --> 00:59:33,050
array gives us what we want this I don't

1100
00:59:31,730 --> 00:59:35,449
know what we're gonna do with right now

1101
00:59:33,050 --> 00:59:37,430
so we'll deal with that in a second but

1102
00:59:35,449 --> 00:59:43,789
looking at what this routine actually

1103
00:59:37,429 --> 00:59:46,460
needs to take we should be able to

1104
00:59:43,789 --> 00:59:51,349
simplify it a little bit now right so

1105
00:59:46,460 --> 00:59:54,650
the glyph index shouldn't be necessary I

1106
00:59:51,349 --> 00:59:57,789
don't think in fact why is that even

1107
00:59:54,650 --> 00:59:57,789
being asked for

1108
01:00:05,110 --> 01:00:12,460
so that's the reason it's doing that is

1109
01:00:08,150 --> 01:00:12,460
just for the horizontal advance table

1110
01:00:26,108 --> 01:00:30,139
which we could probably do on the

1111
01:00:28,309 --> 01:00:31,819
outside so you can see what's happening

1112
01:00:30,139 --> 01:00:35,958
there it's taking whatever the character

1113
01:00:31,818 --> 01:00:37,940
advance amount was there and it's kind

1114
01:00:35,958 --> 01:00:47,088
of like stuffing that in to the

1115
01:00:37,940 --> 01:00:54,139
horizontal advance table again that all

1116
01:00:47,088 --> 01:00:55,788
just seems pretty easy so I think we can

1117
01:00:54,139 --> 01:00:58,818
probably move that actually to the

1118
01:00:55,789 --> 01:01:00,829
outside so the return value of this

1119
01:00:58,818 --> 01:01:02,630
could just include that and we can

1120
01:01:00,829 --> 01:01:06,940
return we could we can move this to the

1121
01:01:02,630 --> 01:01:12,349
outside right like all of this stuff

1122
01:01:06,940 --> 01:01:16,338
just needs that care advance so at least

1123
01:01:12,349 --> 01:01:18,680
I think that's true so meaning in here

1124
01:01:16,338 --> 01:01:22,099
there's a notion of a kerning change

1125
01:01:18,679 --> 01:01:23,778
which comes out of here and it happens

1126
01:01:22,099 --> 01:01:27,559
if the other glyph index is not zero

1127
01:01:23,778 --> 01:01:29,539
right so that's on that first one then

1128
01:01:27,559 --> 01:01:31,759
everything else takes that care advance

1129
01:01:29,539 --> 01:01:33,799
and puts that in there so if those two

1130
01:01:31,759 --> 01:01:36,588
things were just something that came out

1131
01:01:33,798 --> 01:01:40,278
of the load glyph bitmap you know

1132
01:01:36,588 --> 01:01:43,219
operation then this is something we can

1133
01:01:40,278 --> 01:01:45,528
just do right in here you know what I'm

1134
01:01:43,219 --> 01:01:49,458
saying so we just need those values to

1135
01:01:45,528 --> 01:01:51,048
kind of pop out from that and I mean in

1136
01:01:49,458 --> 01:01:56,239
fact they can just they don't need to be

1137
01:01:51,048 --> 01:01:59,958
here anymore right so I think we just

1138
01:01:56,239 --> 01:02:02,329
need to translate this into something

1139
01:01:59,958 --> 01:02:05,208
that stores more than just a loaded

1140
01:02:02,329 --> 01:02:07,009
bitmap it actually just gives us all of

1141
01:02:05,208 --> 01:02:08,629
the glyph information that we need and

1142
01:02:07,009 --> 01:02:15,559
then on the outside we can just process

1143
01:02:08,630 --> 01:02:20,119
it that way right the max font with max

1144
01:02:15,559 --> 01:02:21,979
font height stuff what are we doing

1145
01:02:20,119 --> 01:02:27,079
there so that's just the biggest

1146
01:02:21,978 --> 01:02:29,208
character we can handle right again to

1147
01:02:27,079 --> 01:02:32,170
me that sort of seems like it should be

1148
01:02:29,208 --> 01:02:35,958
maybe more based on the pixel height

1149
01:02:32,170 --> 01:02:37,550
probably like you know if you told us

1150
01:02:35,958 --> 01:02:40,190
that the biggest pixel high

1151
01:02:37,550 --> 01:02:41,390
was blah we would say I mean you know

1152
01:02:40,190 --> 01:02:43,940
and the other question I have is can we

1153
01:02:41,389 --> 01:02:45,799
just get that from Windows do the text

1154
01:02:43,940 --> 01:02:48,380
metrics tell us anything like that so we

1155
01:02:45,800 --> 01:02:50,390
wouldn't have to guess or have limits

1156
01:02:48,380 --> 01:02:51,890
where we could we could we just ask it

1157
01:02:50,389 --> 01:02:56,269
what's the biggest thing that's ever

1158
01:02:51,889 --> 01:02:58,069
gonna happen in terms of an actual glyph

1159
01:02:56,269 --> 01:02:58,969
size because you you probably should

1160
01:02:58,070 --> 01:03:01,130
know that right

1161
01:02:58,969 --> 01:03:07,969
so just me where's the search bar there

1162
01:03:01,130 --> 01:03:12,130
it is so here's that get text metrics

1163
01:03:07,969 --> 01:03:16,868
function and here's what it returns so

1164
01:03:12,130 --> 01:03:19,960
you know looking at it here that is

1165
01:03:16,869 --> 01:03:24,730
probably what we would need to know like

1166
01:03:19,960 --> 01:03:24,730
you know for though for the width right

1167
01:03:26,650 --> 01:03:31,099
and we can even like double it or

1168
01:03:29,360 --> 01:03:32,809
something right we could we could put in

1169
01:03:31,099 --> 01:03:34,429
a safety factor there too if we think

1170
01:03:32,809 --> 01:03:36,829
this might be reported a little bit

1171
01:03:34,429 --> 01:03:39,169
Squinkie we could try to pad it out as

1172
01:03:36,829 --> 01:03:39,799
well but that gives us something to work

1173
01:03:39,170 --> 01:03:45,530
with

1174
01:03:39,800 --> 01:03:47,180
right and then the height value again if

1175
01:03:45,530 --> 01:03:50,000
we took the height value and padded it

1176
01:03:47,179 --> 01:03:52,368
that should also probably tell us so I

1177
01:03:50,000 --> 01:03:54,469
don't really know what those values will

1178
01:03:52,369 --> 01:03:57,970
correspond to I don't know how good they

1179
01:03:54,469 --> 01:03:57,969
would be what's what's overhang

1180
01:04:09,599 --> 01:04:25,440
so we may want to include that overhang

1181
01:04:12,510 --> 01:04:30,020
as well just to be safe so I'm gonna try

1182
01:04:25,440 --> 01:04:33,179
basing it off these things I'm gonna say

1183
01:04:30,019 --> 01:04:37,170
look let's try and get the text metrics

1184
01:04:33,179 --> 01:04:42,299
out of this thing and then we'll worry

1185
01:04:37,170 --> 01:04:44,639
about the you know the and then we'll

1186
01:04:42,300 --> 01:04:47,789
worry about allocating everything so if

1187
01:04:44,639 --> 01:04:54,659
I did this where I create the compatible

1188
01:04:47,789 --> 01:04:57,210
DC first and then we sort of do this

1189
01:04:54,659 --> 01:04:59,399
part of the process right so in here I'm

1190
01:04:57,210 --> 01:05:02,849
going to say create the device context

1191
01:04:59,400 --> 01:05:09,960
and try to load it reverse the order in

1192
01:05:02,849 --> 01:05:12,480
which we do these things so create a

1193
01:05:09,960 --> 01:05:15,630
compatible DC try to load the font into

1194
01:05:12,480 --> 01:05:17,849
it come down into this routine here

1195
01:05:15,630 --> 01:05:21,599
where we're ready to start doing stuff

1196
01:05:17,849 --> 01:05:24,750
with our fonts and this this field here

1197
01:05:21,599 --> 01:05:26,909
now maybe we can get rid of these so

1198
01:05:24,750 --> 01:05:31,619
that we don't have to like guess about

1199
01:05:26,909 --> 01:05:33,629
what's gonna happen in terms of how big

1200
01:05:31,619 --> 01:05:35,849
we would need things to be to properly

1201
01:05:33,630 --> 01:05:39,000
support it so to do that I would just

1202
01:05:35,849 --> 01:05:42,119
say all right you know select the font

1203
01:05:39,000 --> 01:05:46,400
right there get the text metrics out of

1204
01:05:42,119 --> 01:05:49,880
it and now we can use those to create

1205
01:05:46,400 --> 01:05:49,880
those two values

1206
01:05:54,989 --> 01:06:05,500
okay so then in here we'll pass those in

1207
01:06:00,329 --> 01:06:08,049
as the sizes and these can come directly

1208
01:06:05,500 --> 01:06:11,469
out of the tech symmetric now so the

1209
01:06:08,050 --> 01:06:22,000
text metric itself we can do you know TM

1210
01:06:11,469 --> 01:06:23,919
height and TM max care with I think we

1211
01:06:22,000 --> 01:06:25,119
want to add that overhang but I don't

1212
01:06:23,920 --> 01:06:27,220
know

1213
01:06:25,119 --> 01:06:29,769
and then we probably want a padding

1214
01:06:27,219 --> 01:06:31,359
factor I'm I don't know but I'm just

1215
01:06:29,769 --> 01:06:36,670
gonna I'm just gonna double it because I

1216
01:06:31,360 --> 01:06:39,370
have no idea how inaccurate mm windows

1217
01:06:36,670 --> 01:06:44,130
might be with this so I'm gonna just do

1218
01:06:39,369 --> 01:06:44,130
some like ridiculous nonsense here

1219
01:07:03,159 --> 01:07:08,659
so since there's not a lot of penalty

1220
01:07:06,528 --> 01:07:11,088
for us to just allocate a bigger buffer

1221
01:07:08,659 --> 01:07:12,739
than we need I feel like it's pretty

1222
01:07:11,088 --> 01:07:14,358
safe for us to do something ridiculous

1223
01:07:12,739 --> 01:07:18,409
here right in fact you know whatever

1224
01:07:14,358 --> 01:07:20,148
right so I don't think there's any harm

1225
01:07:18,409 --> 01:07:21,949
in doing that we can see later if it's

1226
01:07:20,148 --> 01:07:23,808
actually necessary and if we care but

1227
01:07:21,949 --> 01:07:26,389
you know that at least gives us some

1228
01:07:23,809 --> 01:07:29,359
padding and we can kind of move on from

1229
01:07:26,389 --> 01:07:36,949
there so if we Alec actually do that

1230
01:07:29,358 --> 01:07:42,288
then we can like I like that with here's

1231
01:07:36,949 --> 01:07:43,969
the thing called cheese point so as we

1232
01:07:42,289 --> 01:07:48,380
kind of move on here what you can see is

1233
01:07:43,969 --> 01:07:52,099
we've got some some garbage we're doing

1234
01:07:48,380 --> 01:07:53,599
here you can see our pre step X so

1235
01:07:52,099 --> 01:07:55,399
actually I'm right to pad this because

1236
01:07:53,599 --> 01:08:00,559
we actually leave a bunch of room don't

1237
01:07:55,398 --> 01:08:03,558
we it appears so you know that's

1238
01:08:00,559 --> 01:08:04,909
probably a good thing so you can see us

1239
01:08:03,559 --> 01:08:07,009
sort of bounding this stuff here so

1240
01:08:04,909 --> 01:08:11,499
we're gonna need these values when we

1241
01:08:07,009 --> 01:08:13,789
come into the program so that it knows

1242
01:08:11,498 --> 01:08:15,318
you know what the actual boundaries are

1243
01:08:13,789 --> 01:08:21,159
it's supposed to be keeping itself

1244
01:08:15,318 --> 01:08:26,298
aligned to which shouldn't be hard

1245
01:08:21,158 --> 01:08:28,698
looking at the rest of this stuff yeah I

1246
01:08:26,298 --> 01:08:30,889
don't I don't see anything else too

1247
01:08:28,698 --> 01:08:33,828
weird going on there um so maybe what

1248
01:08:30,889 --> 01:08:36,828
I'll do in our types file do we have V

1249
01:08:33,828 --> 01:08:39,439
to use in here I think we do yeah we do

1250
01:08:36,828 --> 01:08:41,929
so what I might say is like maybe the

1251
01:08:39,439 --> 01:08:45,518
way we'll do this is will actually say

1252
01:08:41,929 --> 01:08:48,980
that there's a V to u called max cliff

1253
01:08:45,519 --> 01:08:53,409
dimension you know and that's going to

1254
01:08:48,979 --> 01:08:53,408
be this nonsense here

1255
01:08:57,140 --> 01:09:13,680
and then these can just be passed that

1256
01:09:08,789 --> 01:09:18,180
way and then so when they come in to not

1257
01:09:13,680 --> 01:09:21,298
that when we come into here when we do

1258
01:09:18,180 --> 01:09:23,970
loaded fonts to our font code point

1259
01:09:21,298 --> 01:09:25,920
right then what we can do in here is say

1260
01:09:23,970 --> 01:09:28,770
look let's start passing things like

1261
01:09:25,920 --> 01:09:30,810
what's the max glyph dimension

1262
01:09:28,770 --> 01:09:32,370
that'll be passed in here I don't know

1263
01:09:30,810 --> 01:09:34,710
what order these things are going but

1264
01:09:32,369 --> 01:09:37,849
let's say that there's that there so now

1265
01:09:34,710 --> 01:09:42,359
everything that was doing max font with

1266
01:09:37,850 --> 01:09:45,859
so or an max font height like that what

1267
01:09:42,359 --> 01:09:50,910
we could do is say you know max glyph

1268
01:09:45,859 --> 01:09:59,670
Jim X x max with Tim Y right

1269
01:09:50,909 --> 01:10:02,488
and that seems fine same here nowhere

1270
01:09:59,670 --> 01:10:04,590
else these are used so yeah that mmm

1271
01:10:02,488 --> 01:10:09,109
looks like we're just kind of monkeying

1272
01:10:04,590 --> 01:10:09,110
around here that's the height right yeah

1273
01:10:11,800 --> 01:10:15,239
[Music]

1274
01:10:15,970 --> 01:10:22,000
whoa that was weird my second screen

1275
01:10:20,409 --> 01:10:25,809
here that's the capture machine just

1276
01:10:22,000 --> 01:10:27,699
blanked is the stream still alive looks

1277
01:10:25,810 --> 01:10:30,930
like it's still alive I don't see any

1278
01:10:27,699 --> 01:10:30,929
dropped frames reporting

1279
01:10:35,310 --> 01:10:55,770
so good alright um okay so max fought

1280
01:10:46,859 --> 01:10:57,210
with again it's just just this so I

1281
01:10:55,770 --> 01:11:07,080
think these can all just be done this

1282
01:10:57,210 --> 01:11:09,750
way and that should just do it so we can

1283
01:11:07,079 --> 01:11:12,029
pass that in pretty trivially the glyph

1284
01:11:09,750 --> 01:11:13,920
index and the code point can both be

1285
01:11:12,029 --> 01:11:18,050
passed in here if for some reason we

1286
01:11:13,920 --> 01:11:18,050
need it but I don't actually think we do

1287
01:11:19,670 --> 01:11:25,260
so so this isn't a non-issue now this

1288
01:11:23,850 --> 01:11:29,570
also doesn't have to happen because

1289
01:11:25,260 --> 01:11:31,949
that's always the case and so I think

1290
01:11:29,569 --> 01:11:35,759
this stuff can now just run straight

1291
01:11:31,949 --> 01:11:37,649
through all of this is fine there's

1292
01:11:35,760 --> 01:11:42,170
nothing weird going on there

1293
01:11:37,649 --> 01:11:42,170
this device context will just pass in

1294
01:11:46,130 --> 01:11:59,989
like so I don't know does this stuff so

1295
01:11:56,069 --> 01:12:02,219
does this sex the set text color call I

1296
01:11:59,989 --> 01:12:04,529
don't know that anyone ever actually

1297
01:12:02,220 --> 01:12:06,480
sets it to anything else so I would

1298
01:12:04,529 --> 01:12:09,300
assume that that's also something that

1299
01:12:06,479 --> 01:12:11,250
doesn't actually have to yeah so that

1300
01:12:09,300 --> 01:12:13,699
could actually just be done here where

1301
01:12:11,250 --> 01:12:18,149
we set the background and the text color

1302
01:12:13,699 --> 01:12:19,559
as a separate permanent things they

1303
01:12:18,149 --> 01:12:21,210
don't have to really be done here

1304
01:12:19,560 --> 01:12:22,770
apparently this doesn't have to happen

1305
01:12:21,210 --> 01:12:24,659
either I guess we tried that at one

1306
01:12:22,770 --> 01:12:28,110
point and didn't really need it so it

1307
01:12:24,659 --> 01:12:32,220
looks like we're just doing that let's

1308
01:12:28,109 --> 01:12:33,839
see here so these are actually I don't

1309
01:12:32,220 --> 01:12:36,780
know why these are set to like these

1310
01:12:33,840 --> 01:12:40,409
numbers I assume that this should

1311
01:12:36,779 --> 01:12:42,109
actually be set to this and this should

1312
01:12:40,409 --> 01:12:48,359
be set to

1313
01:12:42,109 --> 01:12:50,248
or rather I assume

1314
01:12:48,359 --> 01:12:53,518
famous last words maybe I just broke the

1315
01:12:50,248 --> 01:12:54,179
entire thing you know I don't know but

1316
01:12:53,519 --> 01:12:59,699
off we go

1317
01:12:54,179 --> 01:13:02,309
so this stuff and that's just we're just

1318
01:12:59,698 --> 01:13:04,859
reading out of the font bits there so we

1319
01:13:02,309 --> 01:13:10,469
would need to have that passed in for us

1320
01:13:04,859 --> 01:13:13,130
but that's pretty straightforward too so

1321
01:13:10,469 --> 01:13:13,130
that seems fine

1322
01:13:13,948 --> 01:13:22,319
bitmap bytes per pixel I'm pretty sure

1323
01:13:18,719 --> 01:13:24,208
that's just always for like did we

1324
01:13:22,319 --> 01:13:24,779
actually support anything else besides

1325
01:13:24,208 --> 01:13:41,609
that

1326
01:13:24,779 --> 01:13:44,578
I like this that's good stuff

1327
01:13:41,609 --> 01:13:46,978
so bitmap bytes for pic per pixel I

1328
01:13:44,578 --> 01:13:49,978
don't I don't have any idea where that

1329
01:13:46,979 --> 01:13:51,329
if some is gonna what for her to find it

1330
01:13:49,979 --> 01:13:53,579
for me

1331
01:13:51,328 --> 01:13:55,590
yes so that's just that's just always

1332
01:13:53,578 --> 01:13:57,058
four so I'm gonna put that in there I

1333
01:13:55,590 --> 01:13:58,439
don't I don't know what we were really

1334
01:13:57,059 --> 01:14:00,239
playing out there it's not like that

1335
01:13:58,439 --> 01:14:01,380
code would probably really work if we

1336
01:14:00,238 --> 01:14:06,029
weren't doing that like we don't really

1337
01:14:01,380 --> 01:14:07,979
support you know arbitrary bytes per

1338
01:14:06,029 --> 01:14:11,130
pixel for bitmaps or anything like that

1339
01:14:07,979 --> 01:14:15,229
so that's kind of a one of those things

1340
01:14:11,130 --> 01:14:15,229
that's maybe not not really quite true

1341
01:14:20,319 --> 01:14:25,639
so I'm not sure why that that looks like

1342
01:14:23,210 --> 01:14:27,409
that because I mean like even just look

1343
01:14:25,640 --> 01:14:29,000
up at this code here you know we're

1344
01:14:27,409 --> 01:14:30,500
we're just assuming that there's four

1345
01:14:29,000 --> 01:14:31,969
bytes four pixels so that's you know we

1346
01:14:30,500 --> 01:14:33,229
didn't really write code that's you know

1347
01:14:31,969 --> 01:14:35,750
supposed to be flexible in that way so I

1348
01:14:33,229 --> 01:14:39,769
really don't know what the point is of

1349
01:14:35,750 --> 01:14:41,359
that so if we look in here we've got the

1350
01:14:39,770 --> 01:14:44,120
stuff where we want to actually create

1351
01:14:41,359 --> 01:14:45,469
the bitmap in question this that's what

1352
01:14:44,119 --> 01:14:49,550
this is doing you know this is like

1353
01:14:45,469 --> 01:14:52,219
packing these texels so we we malloc

1354
01:14:49,550 --> 01:14:56,239
this as the thing that we're gonna

1355
01:14:52,219 --> 01:14:57,890
return but again I we don't actually

1356
01:14:56,238 --> 01:14:59,629
have to do that because I think what

1357
01:14:57,890 --> 01:15:02,840
we're gonna want to do is write it out

1358
01:14:59,630 --> 01:15:04,550
right here so I think we probably want

1359
01:15:02,840 --> 01:15:20,360
to do instead is something more like

1360
01:15:04,550 --> 01:15:22,690
this where we have like something like

1361
01:15:20,359 --> 01:15:22,689
this

1362
01:15:27,779 --> 01:15:42,109
and so in here this way we can write

1363
01:15:37,618 --> 01:15:45,118
this out in into a file when we're ready

1364
01:15:42,109 --> 01:15:49,549
and otherwise not really bother anybody

1365
01:15:45,118 --> 01:15:54,979
so I think that's all fine that's fine

1366
01:15:49,550 --> 01:15:54,980
we're gonna need these helper functions

1367
01:15:55,189 --> 01:16:03,988
this is basically just something we're

1368
01:15:57,328 --> 01:16:07,229
using to do our premultiplied alpha that

1369
01:16:03,988 --> 01:16:12,439
all seems fine and then this is us

1370
01:16:07,229 --> 01:16:15,419
computing the align percentage so that's

1371
01:16:12,439 --> 01:16:19,558
some pretty Squinkie stuff there but you

1372
01:16:15,420 --> 01:16:31,319
know that's this just somewhere to store

1373
01:16:19,559 --> 01:16:33,449
it and this is out height the TM descent

1374
01:16:31,319 --> 01:16:36,058
is something that we would need to pass

1375
01:16:33,448 --> 01:16:46,828
in here so you know I guess we'll pass

1376
01:16:36,059 --> 01:16:49,920
that in I don't know what bound height

1377
01:16:46,828 --> 01:16:53,158
is I guess that's something that we

1378
01:16:49,920 --> 01:16:55,559
found in here right like that's what we

1379
01:16:53,158 --> 01:16:59,250
found in terms of like the total area of

1380
01:16:55,559 --> 01:17:00,570
the thing that we looked through so

1381
01:16:59,250 --> 01:17:06,179
we're just like flipping things around

1382
01:17:00,569 --> 01:17:08,819
and doing whatever nonsense there this

1383
01:17:06,179 --> 01:17:10,649
actually also I don't know that that can

1384
01:17:08,819 --> 01:17:13,078
ever actually be float right because

1385
01:17:10,649 --> 01:17:16,589
it's it's gonna be a yeah it's gonna be

1386
01:17:13,078 --> 01:17:18,840
a regular value so really you know it's

1387
01:17:16,590 --> 01:17:22,980
more like that this whole thing gets

1388
01:17:18,840 --> 01:17:25,500
converted after being computed and then

1389
01:17:22,979 --> 01:17:28,719
we can go from there so all that stuff

1390
01:17:25,500 --> 01:17:32,288
seems fine this seems fine too

1391
01:17:28,720 --> 01:17:32,289
[Music]

1392
01:17:33,689 --> 01:17:43,229
I think that's basically it so really

1393
01:17:39,899 --> 01:17:45,869
all we need to do here is actually you

1394
01:17:43,229 --> 01:17:48,509
know this has to do it to do of right

1395
01:17:45,869 --> 01:17:51,539
out of PNG right we need something that

1396
01:17:48,510 --> 01:17:53,360
can can put this to disk but that's

1397
01:17:51,539 --> 01:17:55,619
really all we need to do and then we can

1398
01:17:53,359 --> 01:17:58,710
delete the memory that we were using to

1399
01:17:55,619 --> 01:18:04,289
house it if we were less Squinkie we

1400
01:17:58,710 --> 01:18:09,779
could actually just write it out

1401
01:18:04,289 --> 01:18:11,880
directly and that might be a more

1402
01:18:09,779 --> 01:18:13,349
reasonable thing to do but for now I'm

1403
01:18:11,880 --> 01:18:17,579
just gonna use the code path as it was

1404
01:18:13,350 --> 01:18:21,300
rather than you know fuss with it so I

1405
01:18:17,579 --> 01:18:24,390
think that's what we're looking at we

1406
01:18:21,300 --> 01:18:27,119
don't really have a loaded bitmap per se

1407
01:18:24,390 --> 01:18:33,380
so what we want here and we don't need

1408
01:18:27,119 --> 01:18:33,380
that what we want here is like a

1409
01:18:34,250 --> 01:18:42,300
something that we can return the results

1410
01:18:36,689 --> 01:18:45,629
in so like this would be like a glyph

1411
01:18:42,300 --> 01:18:47,130
result or something and so we want to

1412
01:18:45,630 --> 01:18:48,600
return one of these and we want to

1413
01:18:47,130 --> 01:18:51,840
return the stuff that we would actually

1414
01:18:48,600 --> 01:18:56,190
need on the outside to like write this

1415
01:18:51,840 --> 01:18:57,510
thing into a text file properly you know

1416
01:18:56,189 --> 01:18:58,889
we could also just write it out

1417
01:18:57,510 --> 01:19:01,409
ourselves but that just doesn't seem

1418
01:18:58,890 --> 01:19:04,560
necessary so you know let's say we got

1419
01:19:01,409 --> 01:19:10,170
the align percentage here that needs to

1420
01:19:04,560 --> 01:19:11,880
be stored and we've got what was some of

1421
01:19:10,170 --> 01:19:15,829
the other stuff here we needed kerning

1422
01:19:11,880 --> 01:19:15,829
change and care advance

1423
01:19:22,100 --> 01:19:29,490
so we want to record these and send them

1424
01:19:25,949 --> 01:19:32,369
back to whoever's listening so once we

1425
01:19:29,489 --> 01:19:33,479
come in here what we want to do in fact

1426
01:19:32,369 --> 01:19:37,189
I guess I don't even really need to

1427
01:19:33,479 --> 01:19:40,349
define it there I can put it down here

1428
01:19:37,189 --> 01:19:48,979
probably and say all right so the things

1429
01:19:40,350 --> 01:19:48,980
that are happening is that that and that

1430
01:19:51,739 --> 01:20:08,130
so this yeah I guess maybe I do want it

1431
01:20:00,720 --> 01:20:11,670
this way now let's give it away all

1432
01:20:08,130 --> 01:20:16,579
right so this will just be actually

1433
01:20:11,670 --> 01:20:16,579
calling a v2 now and doing its thing and

1434
01:20:22,760 --> 01:20:28,739
then this will assign it so up here

1435
01:20:26,369 --> 01:20:30,119
we'll just say and you know I mean we

1436
01:20:28,739 --> 01:20:37,380
don't really have to do it that way we

1437
01:20:30,119 --> 01:20:39,269
could do it some other way think the

1438
01:20:37,380 --> 01:20:42,300
default is always this so I'll continue

1439
01:20:39,270 --> 01:20:43,980
defaulting to that for now but I think

1440
01:20:42,300 --> 01:20:45,390
that's what we want now I would like to

1441
01:20:43,979 --> 01:20:47,099
start trying to build this we won't have

1442
01:20:45,390 --> 01:20:49,590
time today because we only got a you

1443
01:20:47,100 --> 01:20:51,450
know maybe 15 minutes 20 minutes left to

1444
01:20:49,590 --> 01:20:55,350
get all of this working properly but I

1445
01:20:51,449 --> 01:21:01,019
would like to go ahead and make this

1446
01:20:55,350 --> 01:21:03,240
actually get called these I don't know

1447
01:21:01,020 --> 01:21:07,380
why these are getting built at the

1448
01:21:03,239 --> 01:21:09,529
moment so we don't need them to be so I

1449
01:21:07,380 --> 01:21:09,529
think

1450
01:21:20,670 --> 01:21:27,020
yeah I think all this is fine except

1451
01:21:22,949 --> 01:21:41,899
instead of test a set builder cpp here

1452
01:21:27,020 --> 01:21:46,200
we just want to build HH font and

1453
01:21:41,899 --> 01:21:50,089
that'll let us just builds yep the

1454
01:21:46,199 --> 01:21:52,710
simple command-line utility I don't know

1455
01:21:50,090 --> 01:21:54,539
so I guess if you don't put subsystem

1456
01:21:52,710 --> 01:21:55,859
windows in there then it will just do

1457
01:21:54,539 --> 01:21:57,989
console automatically that's probably

1458
01:21:55,859 --> 01:22:00,149
the rule so we should that should

1459
01:21:57,989 --> 01:22:02,579
produce a command line executable I

1460
01:22:00,149 --> 01:22:03,299
would think we'll cross that bridge when

1461
01:22:02,579 --> 01:22:05,789
we come to it

1462
01:22:03,300 --> 01:22:08,789
so let me go ahead and go through get

1463
01:22:05,789 --> 01:22:12,420
rid of some of the errors here I'm just

1464
01:22:08,789 --> 01:22:13,769
gonna go ahead and well so I don't know

1465
01:22:12,420 --> 01:22:16,170
if we want these do we want these to be

1466
01:22:13,770 --> 01:22:20,730
s 32s do we actually use negative values

1467
01:22:16,170 --> 01:22:23,880
for them I don't think we should but I

1468
01:22:20,729 --> 01:22:31,349
guess if we're stepping s 32s here we

1469
01:22:23,880 --> 01:22:34,199
would have to so let's think about that

1470
01:22:31,350 --> 01:22:37,020
so the min would be this and the max

1471
01:22:34,199 --> 01:22:39,389
would be zero I think that's how that

1472
01:22:37,020 --> 01:22:42,450
would work and then all of these would

1473
01:22:39,390 --> 01:22:44,460
be you 32s because we can't we're never

1474
01:22:42,449 --> 01:22:48,539
going to be you can't step outside the

1475
01:22:44,460 --> 01:22:50,909
bitmap right I don't think so all of

1476
01:22:48,539 --> 01:22:54,140
these should be u-32 a bowl I think but

1477
01:22:50,909 --> 01:22:54,139
that's again famous last words

1478
01:22:59,859 --> 01:23:07,969
but yeah I mean this looks like it's

1479
01:23:02,119 --> 01:23:11,180
written that way already right because

1480
01:23:07,970 --> 01:23:13,820
if this this would fetch outside the the

1481
01:23:11,180 --> 01:23:15,860
legal area if you were fitting it-

1482
01:23:13,819 --> 01:23:16,699
members so that's just not you know

1483
01:23:15,859 --> 01:23:22,819
that's not something that was

1484
01:23:16,699 --> 01:23:25,189
contemplated about to it anyway now

1485
01:23:22,819 --> 01:23:33,170
let's see what else we got here that's

1486
01:23:25,189 --> 01:23:38,960
that so these we need to get from

1487
01:23:33,170 --> 01:23:39,770
somewhere else see here what's the

1488
01:23:38,960 --> 01:23:41,840
problem

1489
01:23:39,770 --> 01:23:45,140
TM descent that's true we don't have

1490
01:23:41,840 --> 01:23:50,949
that and we need to know it so in here

1491
01:23:45,140 --> 01:23:50,950
we would have to pass damn descents

1492
01:23:51,369 --> 01:23:57,019
we're gonna have to load those in there

1493
01:23:54,260 --> 01:24:00,190
what is the problem here Oh cuz we

1494
01:23:57,020 --> 01:24:03,920
aren't including the math library yet

1495
01:24:00,189 --> 01:24:06,049
that's fine so this needs to be just

1496
01:24:03,920 --> 01:24:09,130
device context it would have been here -

1497
01:24:06,050 --> 01:24:24,020
but we're not compiling that code pace

1498
01:24:09,130 --> 01:24:26,600
or code path rather so these can these

1499
01:24:24,020 --> 01:24:28,670
this can't be negative can they hope the

1500
01:24:26,600 --> 01:24:34,000
camp I'm not sure what would happen if

1501
01:24:28,670 --> 01:24:34,000
they were but hopefully they can't be

1502
01:24:34,479 --> 01:24:38,929
one thing we could do here is if we

1503
01:24:36,890 --> 01:24:41,780
don't know we could add overhang to both

1504
01:24:38,930 --> 01:24:44,380
because we don't know whether that

1505
01:24:41,779 --> 01:24:48,109
overhang is for vertical or horizontal

1506
01:24:44,380 --> 01:24:51,520
they didn't specify I don't think maybe

1507
01:24:48,109 --> 01:24:51,519
they did but I didn't see it

1508
01:24:53,399 --> 01:24:59,949
all right so then we've got basically

1509
01:24:56,170 --> 01:25:02,289
just this code to get trapper and then

1510
01:24:59,949 --> 01:25:04,329
and then we're good to go all right so

1511
01:25:02,289 --> 01:25:07,119
you know we're pretty close here there's

1512
01:25:04,329 --> 01:25:09,430
not that much to do to just get it

1513
01:25:07,119 --> 01:25:13,119
working to up to the point where we're

1514
01:25:09,430 --> 01:25:14,440
running font extraction and actually

1515
01:25:13,119 --> 01:25:15,729
pulling all the glyphs out and the

1516
01:25:14,439 --> 01:25:18,009
information we need we're just not

1517
01:25:15,729 --> 01:25:19,869
actually writing them anywhere which is

1518
01:25:18,010 --> 01:25:21,400
fine I think that would be a good place

1519
01:25:19,869 --> 01:25:23,260
to get to

1520
01:25:21,399 --> 01:25:24,819
and then next weekend we can focus on

1521
01:25:23,260 --> 01:25:31,630
writing them out and reading them back

1522
01:25:24,819 --> 01:25:33,759
in during asset update and then I think

1523
01:25:31,630 --> 01:25:35,319
we're I think that leaves us at a point

1524
01:25:33,760 --> 01:25:39,730
where we can just do full rebuilds

1525
01:25:35,319 --> 01:25:42,569
anytime we want no no weirdness so if I

1526
01:25:39,729 --> 01:25:45,759
were to include the math side of things

1527
01:25:42,569 --> 01:25:56,739
I think that's what happens here I don't

1528
01:25:45,760 --> 01:25:59,170
remember how to get those functions yeah

1529
01:25:56,739 --> 01:26:01,479
so if I include the math side of things

1530
01:25:59,170 --> 01:26:03,940
basically we get all of the stuff up

1531
01:26:01,479 --> 01:26:07,629
there will work now and we're really

1532
01:26:03,939 --> 01:26:09,609
just down to this side of things and so

1533
01:26:07,630 --> 01:26:11,890
you know for each of these we want to

1534
01:26:09,609 --> 01:26:13,869
call the load lift bitmap routine so

1535
01:26:11,890 --> 01:26:17,220
let's actually try to call that properly

1536
01:26:13,869 --> 01:26:20,260
so here's here's what happened there

1537
01:26:17,220 --> 01:26:22,150
you know maybe we do this and we say

1538
01:26:20,260 --> 01:26:24,670
okay there's the device context the font

1539
01:26:22,149 --> 01:26:31,059
bits we need the code point so that's

1540
01:26:24,670 --> 01:26:33,940
this right that's the code point we're

1541
01:26:31,060 --> 01:26:39,940
talking about the max left in we already

1542
01:26:33,939 --> 01:26:44,979
have the TM descent is again coming from

1543
01:26:39,939 --> 01:26:46,719
those text metrics so that's something

1544
01:26:44,979 --> 01:26:49,509
we can just pull out here because we

1545
01:26:46,720 --> 01:26:52,180
know that the bitmap nonsense like needs

1546
01:26:49,510 --> 01:26:56,619
to to fuss with that when it's doing its

1547
01:26:52,180 --> 01:26:59,829
extraction so assuming that that call is

1548
01:26:56,619 --> 01:27:03,729
fine then we need to loop over the other

1549
01:26:59,829 --> 01:27:06,039
glyphs that we have which is this and

1550
01:27:03,729 --> 01:27:06,819
fill out the horizontal advance table by

1551
01:27:06,039 --> 01:27:13,210
looking at the

1552
01:27:06,819 --> 01:27:16,119
if index were on and for every entry in

1553
01:27:13,210 --> 01:27:18,460
the table for our glyph we need to add

1554
01:27:16,119 --> 01:27:20,829
this information that comes back and it

1555
01:27:18,460 --> 01:27:24,850
needs to depend on you know what's

1556
01:27:20,829 --> 01:27:35,109
what's happening here why this looks

1557
01:27:24,850 --> 01:27:38,980
like this I don't know I guess that's

1558
01:27:35,109 --> 01:27:40,719
saying if this font is following itself

1559
01:27:38,979 --> 01:27:42,219
so that's what's happening here it's

1560
01:27:40,720 --> 01:27:48,369
saying like if this font is following

1561
01:27:42,220 --> 01:27:51,460
itself here's what you have to do is

1562
01:27:48,369 --> 01:27:55,809
that right oh no I see what it's saying

1563
01:27:51,460 --> 01:27:58,750
it's saying the other side's advance for

1564
01:27:55,810 --> 01:28:01,960
me has to be adjusted by whatever the

1565
01:27:58,750 --> 01:28:05,289
kerning change is yeah this stuff is

1566
01:28:01,960 --> 01:28:08,619
nuts I've never liked the way kerning

1567
01:28:05,289 --> 01:28:10,600
was reported in Windows and yeah and I

1568
01:28:08,619 --> 01:28:12,939
still don't

1569
01:28:10,600 --> 01:28:15,039
so this just tells me how I need to

1570
01:28:12,939 --> 01:28:16,479
update this these both come out of the

1571
01:28:15,039 --> 01:28:20,949
glyph which should make it pretty

1572
01:28:16,479 --> 01:28:26,339
trivial right it's just that and so I

1573
01:28:20,949 --> 01:28:26,340
think that's basically it

1574
01:28:31,380 --> 01:28:42,369
does font bits actually need to be au8

1575
01:28:35,229 --> 01:28:46,629
can it just be a void here so that gets

1576
01:28:42,369 --> 01:28:53,199
us down to almost completed all we have

1577
01:28:46,630 --> 01:28:57,699
to do now is we good all we have to do

1578
01:28:53,199 --> 01:29:00,189
now is actually decide how our font like

1579
01:28:57,699 --> 01:29:03,609
this code that says what font is

1580
01:29:00,189 --> 01:29:06,369
happening where we need that to to now

1581
01:29:03,609 --> 01:29:08,409
like have a more specific like we need a

1582
01:29:06,369 --> 01:29:10,599
definition of how that works you can see

1583
01:29:08,409 --> 01:29:14,519
here that we want to do a glyph count in

1584
01:29:10,600 --> 01:29:14,520
a glyph code point so we need like this

1585
01:29:15,000 --> 01:29:22,630
right and so what we need to do here is

1586
01:29:19,060 --> 01:29:26,910
have some way of saying hey care set

1587
01:29:22,630 --> 01:29:29,770
creator like you need to return to us

1588
01:29:26,909 --> 01:29:33,609
whatever that piece of information is

1589
01:29:29,770 --> 01:29:37,870
right so like you need to tell us how

1590
01:29:33,609 --> 01:29:40,479
many of these things there are right so

1591
01:29:37,869 --> 01:29:47,470
maybe what we could do is we could say

1592
01:29:40,479 --> 01:29:51,489
something like the glyph count is set

1593
01:29:47,470 --> 01:29:55,560
here right so you know well but that

1594
01:29:51,489 --> 01:29:55,559
makes it harder for people to use so

1595
01:29:56,489 --> 01:30:00,369
maybe we won't do that

1596
01:29:58,720 --> 01:30:01,750
maybe we will try to make a little

1597
01:30:00,369 --> 01:30:05,649
utility that lets you do this more

1598
01:30:01,750 --> 01:30:09,069
easily so let's try that first so let's

1599
01:30:05,649 --> 01:30:12,819
say we were gonna do this this obviously

1600
01:30:09,069 --> 01:30:16,739
is nonsense and doesn't matter so what

1601
01:30:12,819 --> 01:30:20,319
we tried to do here is said okay add

1602
01:30:16,739 --> 01:30:23,139
this character range add these specific

1603
01:30:20,319 --> 01:30:25,769
characters right so what we're kind of

1604
01:30:23,140 --> 01:30:28,119
doing here is saying something like

1605
01:30:25,770 --> 01:30:30,930
because like imagine this was the thing

1606
01:30:28,119 --> 01:30:30,930
that looked like this

1607
01:30:33,090 --> 01:30:50,078
or like that

1608
01:30:47,889 --> 01:30:52,328
so imagine me we're doing something more

1609
01:30:50,078 --> 01:31:00,099
like that and then here we would just

1610
01:30:52,328 --> 01:31:05,819
say okay include code-point include or

1611
01:31:00,099 --> 01:31:05,819
include maybe we make this really easy

1612
01:31:06,630 --> 01:31:19,409
so we just say okay include you know

1613
01:31:11,889 --> 01:31:19,409
this include from here to here include

1614
01:31:22,618 --> 01:31:37,058
these you know something like this right

1615
01:31:35,260 --> 01:31:40,539
so we want to be able to say like

1616
01:31:37,059 --> 01:31:42,400
include these ranges or these

1617
01:31:40,538 --> 01:31:46,059
punctuation x' or this specific

1618
01:31:42,399 --> 01:31:47,618
character and blah blah blah so if we

1619
01:31:46,059 --> 01:31:50,469
want to do something like that then what

1620
01:31:47,618 --> 01:31:51,880
we want to be able to do is we want to

1621
01:31:50,469 --> 01:31:53,618
be able to first count how many there

1622
01:31:51,880 --> 01:31:56,739
are and then we want to be able to like

1623
01:31:53,618 --> 01:32:00,029
set a thing that says what they all

1624
01:31:56,738 --> 01:32:00,029
would be right

1625
01:32:03,970 --> 01:32:15,460
I also think maybe I don't need to have

1626
01:32:12,250 --> 01:32:20,500
any maximums in this at all because if

1627
01:32:15,460 --> 01:32:26,230
you look at the one past max font code

1628
01:32:20,500 --> 01:32:31,539
point that could just be passed in as

1629
01:32:26,229 --> 01:32:35,829
the actual maximum code point that you

1630
01:32:31,539 --> 01:32:37,510
asked for right so we don't really need

1631
01:32:35,829 --> 01:32:40,659
to have a hard-coded maximum because

1632
01:32:37,510 --> 01:32:47,020
whatever they like the furthest one you

1633
01:32:40,659 --> 01:32:48,639
asked for was that's the end of it so I

1634
01:32:47,020 --> 01:32:51,310
think what I'm going to do is I'm going

1635
01:32:48,640 --> 01:33:02,350
to say all right let's say we have a

1636
01:32:51,310 --> 01:33:05,230
like code point code point mass I don't

1637
01:33:02,350 --> 01:33:12,940
know so there's something like okay

1638
01:33:05,229 --> 01:33:19,659
there's a glyph count there's a like

1639
01:33:12,939 --> 01:33:25,299
code point for glyph or you know code

1640
01:33:19,659 --> 01:33:28,300
point from glyph map and there's then

1641
01:33:25,300 --> 01:33:37,539
there's like a max code point or one

1642
01:33:28,300 --> 01:33:39,909
passed last code point so like this

1643
01:33:37,539 --> 01:33:42,670
would let you know everything that you

1644
01:33:39,909 --> 01:33:44,979
needed to when you get this you don't

1645
01:33:42,670 --> 01:33:47,500
have to guess anymore so you don't have

1646
01:33:44,979 --> 01:33:49,149
to have any hard-coded maximums right so

1647
01:33:47,500 --> 01:33:57,220
in here we would say all right

1648
01:33:49,149 --> 01:33:58,899
give us the code point mask and the code

1649
01:33:57,220 --> 01:34:02,050
point mask will tell us all the other

1650
01:33:58,899 --> 01:34:07,659
things that we needed to know so instead

1651
01:34:02,050 --> 01:34:10,000
of getting passed in a glyph count and a

1652
01:34:07,659 --> 01:34:12,729
one pass max amount code point like this

1653
01:34:10,000 --> 01:34:15,899
stuff right these will just get

1654
01:34:12,729 --> 01:34:15,899
extracted out of here

1655
01:34:26,448 --> 01:34:34,229
so the end I guess we also needed the

1656
01:34:30,118 --> 01:34:45,149
what was it like code point for our

1657
01:34:34,229 --> 01:34:46,919
glyph code points like that so this

1658
01:34:45,149 --> 01:34:49,859
would tell us everything that we needed

1659
01:34:46,920 --> 01:34:55,618
to know and that's what we will try to

1660
01:34:49,859 --> 01:34:57,899
make work as far as as far as like a

1661
01:34:55,618 --> 01:35:01,259
convenient way to make that happen from

1662
01:34:57,899 --> 01:35:04,859
our from our character range generators

1663
01:35:01,260 --> 01:35:10,949
and I think one really easy way to do

1664
01:35:04,859 --> 01:35:14,549
this is we could cheese out like super

1665
01:35:10,948 --> 01:35:16,049
Squinkie we could do some super squeaky

1666
01:35:14,550 --> 01:35:19,860
cheese on this where we basically said

1667
01:35:16,050 --> 01:35:23,099
all right look you pass in a mask you

1668
01:35:19,859 --> 01:35:30,769
know I'm saying I and so this thing gets

1669
01:35:23,099 --> 01:35:35,279
a mask and it just does this right and

1670
01:35:30,770 --> 01:35:40,739
what we do is we say inside the include

1671
01:35:35,279 --> 01:35:43,130
and include range right and include just

1672
01:35:40,738 --> 01:35:43,129
like this

1673
01:35:49,460 --> 01:36:11,279
maybe again this is just for making it

1674
01:36:08,189 --> 01:36:16,439
convenient so that people you know can

1675
01:36:11,279 --> 01:36:18,659
just have these not people they can just

1676
01:36:16,439 --> 01:36:20,339
use them tribulation have to make like a

1677
01:36:18,659 --> 01:36:23,369
raise and pass like a rate counts or

1678
01:36:20,340 --> 01:36:24,930
nonsense like this again it's just

1679
01:36:23,369 --> 01:36:27,779
working around C++ being a garbage

1680
01:36:24,930 --> 01:36:31,320
language so in here you know I want to

1681
01:36:27,779 --> 01:36:35,569
do my include stuff and we can even sort

1682
01:36:31,319 --> 01:36:38,549
of do the super crappy version here

1683
01:36:35,569 --> 01:36:44,549
where we call down to this other

1684
01:36:38,550 --> 01:36:47,039
function as well right so I think what

1685
01:36:44,550 --> 01:36:50,880
we would want to do is just make this

1686
01:36:47,039 --> 01:36:53,819
work in a way that based on whether the

1687
01:36:50,880 --> 01:36:56,430
mask is initialized or not you either

1688
01:36:53,819 --> 01:37:17,189
just record the maximum or you actually

1689
01:36:56,430 --> 01:37:20,940
build the array and so you know I a lot

1690
01:37:17,189 --> 01:37:24,409
of purple flashes today so if we were to

1691
01:37:20,939 --> 01:37:27,839
proceed here we just do like B index

1692
01:37:24,409 --> 01:37:30,510
index is less than a red count II plus

1693
01:37:27,840 --> 01:37:34,860
plus index so for each of these we would

1694
01:37:30,510 --> 01:37:37,890
just say okay if the mask code point

1695
01:37:34,859 --> 01:37:40,829
from glyph is set then we are quit

1696
01:37:37,890 --> 01:37:44,210
poking into the mask so we're gonna say

1697
01:37:40,829 --> 01:37:50,069
the code point from glyph of E e index

1698
01:37:44,210 --> 01:37:56,539
equals well this code point from glyph

1699
01:37:50,069 --> 01:37:56,539
so we actually need it to be that

1700
01:37:57,260 --> 01:38:03,930
right so we're saying all right the the

1701
01:38:01,170 --> 01:38:05,069
glyph count will advance and we'll store

1702
01:38:03,930 --> 01:38:08,220
which one we're going to store in there

1703
01:38:05,069 --> 01:38:11,759
if instead the code point from glyph is

1704
01:38:08,220 --> 01:38:13,530
not set then really all we had to do was

1705
01:38:11,760 --> 01:38:15,270
increment the glyph count and I guess

1706
01:38:13,529 --> 01:38:16,170
that happens either way so we could just

1707
01:38:15,270 --> 01:38:18,660
leave that on the outside

1708
01:38:16,170 --> 01:38:22,289
in fact I guess these both can happen

1709
01:38:18,659 --> 01:38:27,840
either way so we might just say look the

1710
01:38:22,289 --> 01:38:33,750
code point is that store it and then say

1711
01:38:27,840 --> 01:38:36,720
if the one past max code point is

1712
01:38:33,750 --> 01:38:41,779
actually less than or equal to the code

1713
01:38:36,720 --> 01:38:41,780
point then you need to set it right

1714
01:38:45,050 --> 01:38:51,680
so that's we'll do both functions which

1715
01:38:48,899 --> 01:38:54,539
means now if we want this thing to work

1716
01:38:51,680 --> 01:38:56,579
in this nice simple way where anyone who

1717
01:38:54,539 --> 01:38:59,220
wants to do a care set can literally

1718
01:38:56,579 --> 01:39:01,619
just define this garbage right here and

1719
01:38:59,220 --> 01:39:05,159
have it work then all we would have to

1720
01:39:01,619 --> 01:39:08,579
do is call it twice so the first time we

1721
01:39:05,159 --> 01:39:12,319
call it we say oh we've got a code point

1722
01:39:08,579 --> 01:39:15,630
mask and the code point mask is nothing

1723
01:39:12,319 --> 01:39:17,369
so go ahead and fill that out now we

1724
01:39:15,630 --> 01:39:20,069
won't have a code point that has the

1725
01:39:17,369 --> 01:39:22,800
maximum Xand stuff in it properly so

1726
01:39:20,069 --> 01:39:24,479
what we can then do is say all right or

1727
01:39:22,800 --> 01:39:26,310
it you know and this could be our

1728
01:39:24,479 --> 01:39:28,799
counter mask so we could literally just

1729
01:39:26,310 --> 01:39:31,110
call it and remember that we can then

1730
01:39:28,800 --> 01:39:35,190
say okay here's the actual mask that

1731
01:39:31,109 --> 01:39:39,659
we're going to use please fill that out

1732
01:39:35,189 --> 01:39:42,329
oops and all we're going to do is right

1733
01:39:39,659 --> 01:39:46,460
before then the actual array that's in

1734
01:39:42,329 --> 01:39:49,800
there that we you know that we want to

1735
01:39:46,460 --> 01:39:54,270
to fill out all we're gonna do is we're

1736
01:39:49,800 --> 01:39:56,279
gonna malloc vat array right so all

1737
01:39:54,270 --> 01:39:58,610
we're doing is saying take whatever the

1738
01:39:56,279 --> 01:40:06,630
counter mass says the glyph count was

1739
01:39:58,609 --> 01:40:09,589
and go from there now we don't want the

1740
01:40:06,630 --> 01:40:12,538
person to have to include zero

1741
01:40:09,590 --> 01:40:17,059
so in order to make this work we

1742
01:40:12,538 --> 01:40:18,538
actually want to always reserve space

1743
01:40:17,059 --> 01:40:21,090
like this

1744
01:40:18,538 --> 01:40:23,849
which is not you know maybe the nicest

1745
01:40:21,090 --> 01:40:29,369
thing in the world to have to do but

1746
01:40:23,849 --> 01:40:32,130
it's fine right so I think that's fine

1747
01:40:29,368 --> 01:40:33,988
and then when we actually call this it

1748
01:40:32,130 --> 01:40:35,400
will fill it out because now there is an

1749
01:40:33,988 --> 01:40:39,448
actual pointer there and so it'll know

1750
01:40:35,399 --> 01:40:42,210
what it should actually extract right so

1751
01:40:39,448 --> 01:40:53,698
I think that should be fine let's see if

1752
01:40:42,210 --> 01:40:53,909
we've got this down here that is total

1753
01:40:53,698 --> 01:41:01,529
garbage

1754
01:40:53,909 --> 01:41:01,529
[Music]

1755
01:41:02,809 --> 01:41:11,309
all right so that built and so now we've

1756
01:41:07,710 --> 01:41:16,880
got our utility done but not you know

1757
01:41:11,309 --> 01:41:23,029
debugged at least I think so is that not

1758
01:41:16,880 --> 01:41:23,029
that should have built an X

1759
01:41:31,380 --> 01:41:39,909
so it's our built I guess our build

1760
01:41:35,469 --> 01:41:41,409
directory isn't in the bin so let's take

1761
01:41:39,909 --> 01:41:52,300
care of that too while we're at it

1762
01:41:41,409 --> 01:41:54,488
oops sue if I come through here and I'm

1763
01:41:52,300 --> 01:41:56,560
assuming that HHA it's there yes so we

1764
01:41:54,488 --> 01:41:58,869
just want one of these right but we want

1765
01:41:56,560 --> 01:42:02,320
this for the font file so we want like h

1766
01:41:58,869 --> 01:42:04,269
h font bat and we want that to look like

1767
01:42:02,319 --> 01:42:09,849
this so that we can call it from

1768
01:42:04,270 --> 01:42:12,550
anywhere there we go so now if I do this

1769
01:42:09,850 --> 01:42:16,150
yeah it should say like hey this is the

1770
01:42:12,550 --> 01:42:21,070
usage and here are the Kara set values

1771
01:42:16,149 --> 01:42:22,869
that you can actually supply in theory I

1772
01:42:21,069 --> 01:42:25,719
can actually call this something and it

1773
01:42:22,869 --> 01:42:28,300
will you know presumably roll over and

1774
01:42:25,719 --> 01:42:31,600
die or something but we can't actually

1775
01:42:28,300 --> 01:42:34,230
make it run so if I wanted to will and

1776
01:42:31,600 --> 01:42:37,840
will like to bug it and stuff next time

1777
01:42:34,229 --> 01:42:41,549
but if we take a quick look here let me

1778
01:42:37,840 --> 01:42:44,440
say I pass like one of these things I

1779
01:42:41,550 --> 01:42:46,060
should print out - what we're like what

1780
01:42:44,439 --> 01:42:48,399
we're looking at here so maybe like a

1781
01:42:46,060 --> 01:42:51,580
little bit of status would be nice why I

1782
01:42:48,399 --> 01:42:52,839
did that how did that compile I must

1783
01:42:51,579 --> 01:42:56,829
have accidentally deleted it with a

1784
01:42:52,840 --> 01:43:00,909
errant keystroke there so when we're

1785
01:42:56,829 --> 01:43:06,460
doing this I might go ahead and do just

1786
01:43:00,909 --> 01:43:09,869
a printf that says hey like here's what

1787
01:43:06,460 --> 01:43:19,840
I'm trying to extract right like

1788
01:43:09,869 --> 01:43:27,369
extracting font you know blob and it'll

1789
01:43:19,840 --> 01:43:30,029
say like you know this mini glyphs code

1790
01:43:27,369 --> 01:43:30,029
points

1791
01:43:30,119 --> 01:43:33,119
right

1792
01:43:44,069 --> 01:43:47,500
something like that I don't know this is

1793
01:43:46,000 --> 01:43:49,389
really crappy way to print that out

1794
01:43:47,500 --> 01:43:54,908
I don't really super care what it says I

1795
01:43:49,389 --> 01:43:58,150
just wanted to put these in here and

1796
01:43:54,908 --> 01:43:59,948
then you know when we're done we're done

1797
01:43:58,149 --> 01:44:02,789
I don't know why that says true that's

1798
01:43:59,948 --> 01:44:02,789
supposed to say false

1799
01:44:07,649 --> 01:44:14,738
so yeah in theory you know this will do

1800
01:44:11,349 --> 01:44:17,460
something resembling something we need

1801
01:44:14,738 --> 01:44:25,359
to pass the font name there which is

1802
01:44:17,460 --> 01:44:27,849
what name yeah so if I call this with

1803
01:44:25,359 --> 01:44:34,509
some actual like one of these that we

1804
01:44:27,849 --> 01:44:42,190
had here so if I just like pass all of

1805
01:44:34,510 --> 01:44:44,800
that yeah that looks fine and that's

1806
01:44:42,189 --> 01:44:46,988
what's still error because it should not

1807
01:44:44,800 --> 01:44:51,639
have a care set so if I pass it a care

1808
01:44:46,988 --> 01:44:52,988
set yeah okay so we got a debug --it and

1809
01:44:51,639 --> 01:44:54,670
who knows what's going on there

1810
01:44:52,988 --> 01:44:55,750
I mean maybe we should do a little of

1811
01:44:54,670 --> 01:44:57,429
that right now because we started a

1812
01:44:55,750 --> 01:45:01,840
little bit late so maybe I should you

1813
01:44:57,429 --> 01:45:05,349
know at least UNCHR ashes

1814
01:45:01,840 --> 01:45:08,889
but other than that we're probably done

1815
01:45:05,349 --> 01:45:11,829
for the day so if I go into the bill

1816
01:45:08,889 --> 01:45:14,889
directory and make an actual startup for

1817
01:45:11,829 --> 01:45:18,158
this here is the command line that in

1818
01:45:14,889 --> 01:45:20,980
theory does something let's put those in

1819
01:45:18,158 --> 01:45:24,969
there working directory doesn't really

1820
01:45:20,979 --> 01:45:28,419
matter at the moment so let's go ahead

1821
01:45:24,969 --> 01:45:30,489
and save that into our build directory I

1822
01:45:28,420 --> 01:45:35,380
think that's in having into our debug

1823
01:45:30,488 --> 01:45:36,519
directory as ehh font dot r DB g and

1824
01:45:35,380 --> 01:45:38,230
that way they could switch between these

1825
01:45:36,520 --> 01:45:39,580
really quickly right you know what we're

1826
01:45:38,229 --> 01:45:41,829
devoting whether it's the font thing or

1827
01:45:39,579 --> 01:45:45,368
whatever so just show me I just want

1828
01:45:41,829 --> 01:45:47,859
this to show me where I crashed so it

1829
01:45:45,368 --> 01:45:52,509
looks like we're crashing inside some

1830
01:45:47,859 --> 01:45:54,289
kind of a malloc they're not sure why I

1831
01:45:52,510 --> 01:45:58,909
can't

1832
01:45:54,289 --> 01:45:58,908
so recent I can't get source here is

1833
01:46:01,399 --> 01:46:06,929
that so I can step in just fine I guess

1834
01:46:05,908 --> 01:46:16,679
it just doesn't know where I am

1835
01:46:06,929 --> 01:46:18,779
let me compile in debug mode and we'll

1836
01:46:16,679 --> 01:46:24,960
just take a look and see if it can give

1837
01:46:18,779 --> 01:46:29,460
us a better better handle all right okay

1838
01:46:24,960 --> 01:46:37,500
so let's see where we're at here what is

1839
01:46:29,460 --> 01:46:42,170
the value of mask sorry what is the

1840
01:46:37,500 --> 01:46:42,170
value of mask here

1841
01:46:48,349 --> 01:46:53,900
she's

1842
01:46:51,149 --> 01:46:53,899
all right

1843
01:46:54,229 --> 01:47:10,749
so we're in here that seems fine let's

1844
01:47:06,260 --> 01:47:10,748
take a look here at TTF file name oh

1845
01:47:11,859 --> 01:47:21,098
that's just garbage it's weird that that

1846
01:47:15,920 --> 01:47:21,099
didn't give me an error but oh well oh

1847
01:47:24,069 --> 01:47:28,880
no it's not no it's not that's actually

1848
01:47:28,309 --> 01:47:31,159
fine

1849
01:47:28,880 --> 01:47:36,949
so is it this this printf that's giving

1850
01:47:31,158 --> 01:47:38,538
us the the issue yeah so what's the

1851
01:47:36,948 --> 01:47:40,219
problem there is there something weird

1852
01:47:38,538 --> 01:47:44,800
about what we're printing extracting

1853
01:47:40,219 --> 01:47:46,670
font % s % u % u so what's the font name

1854
01:47:44,800 --> 01:47:54,349
that seems fine

1855
01:47:46,670 --> 01:48:06,260
what's the glyph count seems fine what's

1856
01:47:54,349 --> 01:48:10,279
the one pass the max code point hmm so

1857
01:48:06,260 --> 01:48:12,139
what's the what's the issue there we're

1858
01:48:10,279 --> 01:48:14,408
seriously having a crash in there what

1859
01:48:12,139 --> 01:48:14,409
am I missing

1860
01:48:19,458 --> 01:48:25,609
we're hitting some kind of a breakpoint

1861
01:48:21,469 --> 01:48:28,760
there like it doesn't like something but

1862
01:48:25,609 --> 01:48:30,880
I'm not sure what it is I must just be

1863
01:48:28,760 --> 01:48:30,880
tired

1864
01:48:42,289 --> 01:48:45,130
hmm

1865
01:48:49,050 --> 01:48:52,449
so I suppose one thing that could be

1866
01:48:51,369 --> 01:49:02,979
happening there is if we were doing

1867
01:48:52,449 --> 01:49:05,289
something stupid like when we actually

1868
01:49:02,979 --> 01:49:06,759
do this initialization of course the

1869
01:49:05,289 --> 01:49:09,039
other thing I forgot is we didn't clear

1870
01:49:06,760 --> 01:49:10,030
this we expect this to be cleared that

1871
01:49:09,039 --> 01:49:27,899
has nothing to do that because we're not

1872
01:49:10,029 --> 01:49:30,279
getting to that point but this

1873
01:49:27,899 --> 01:49:33,489
definitely wants to happen there so that

1874
01:49:30,279 --> 01:49:35,769
you know we get that nice and cleared so

1875
01:49:33,489 --> 01:49:40,840
I'm not sure yeah like if we were over

1876
01:49:35,770 --> 01:49:42,160
writing something maybe where this was

1877
01:49:40,840 --> 01:49:44,770
concerning us we kind of threw that in

1878
01:49:42,159 --> 01:49:46,809
there pretty hastily the way that this

1879
01:49:44,770 --> 01:49:49,270
actually works when it's writing in

1880
01:49:46,810 --> 01:49:54,910
there it's just running into the glyph

1881
01:49:49,270 --> 01:49:56,470
count plus plus oh that pretty much

1882
01:49:54,909 --> 01:49:59,889
everything you need to know right there

1883
01:49:56,470 --> 01:50:03,390
I was supposed to delete that plus plus

1884
01:49:59,890 --> 01:50:05,710
when we added this and I didn't

1885
01:50:03,390 --> 01:50:07,869
so that should probably solve our

1886
01:50:05,710 --> 01:50:11,170
problem yeah it does so that was boring

1887
01:50:07,869 --> 01:50:11,529
and stupid so I think we're good to go

1888
01:50:11,170 --> 01:50:14,890
now

1889
01:50:11,529 --> 01:50:20,139
looks like we're fine so I think we can

1890
01:50:14,890 --> 01:50:23,230
go ahead and go to QA yeah

1891
01:50:20,140 --> 01:50:26,289
so that does a glyph extraction and off

1892
01:50:23,229 --> 01:50:28,389
it goes I will say that the number of

1893
01:50:26,289 --> 01:50:29,979
glyphs listed there doesn't really make

1894
01:50:28,390 --> 01:50:32,000
any sense so I feel like I must have

1895
01:50:29,979 --> 01:50:35,068
screwed something up

1896
01:50:32,000 --> 01:50:35,069
[Music]

1897
01:50:40,139 --> 01:50:47,940
yes if you're not checking to make sure

1898
01:50:45,960 --> 01:50:53,609
that we don't include glyphs that are

1899
01:50:47,939 --> 01:50:57,238
zero so that's actually fine

1900
01:50:53,609 --> 01:50:58,769
we can also mmm so we might also want to

1901
01:50:57,238 --> 01:51:01,439
make sure we don't include code points

1902
01:50:58,770 --> 01:51:03,929
that already exists so we could have I

1903
01:51:01,439 --> 01:51:05,839
suppose gonna look up there but I'm not

1904
01:51:03,929 --> 01:51:10,739
really gonna worry about that so much

1905
01:51:05,840 --> 01:51:13,980
that could be someone else's problem but

1906
01:51:10,738 --> 01:51:15,868
I think we want this there we go a

1907
01:51:13,979 --> 01:51:19,649
hundred glyphs is more of what I would

1908
01:51:15,868 --> 01:51:21,750
have expected to see like meeting the

1909
01:51:19,649 --> 01:51:25,379
ASCII care set plus some of those kanji

1910
01:51:21,750 --> 01:51:27,479
that seems good all right so I think

1911
01:51:25,380 --> 01:51:32,100
we're good to go and next weekend we can

1912
01:51:27,479 --> 01:51:34,888
just merge that in how come I can't how

1913
01:51:32,100 --> 01:51:38,219
come I can't make in sohbat listen to me

1914
01:51:34,889 --> 01:51:40,859
on the main twitch channel how come

1915
01:51:38,219 --> 01:51:45,750
you'll only listen to me if I do it in

1916
01:51:40,859 --> 01:51:51,779
the in the handmade network one so I

1917
01:51:45,750 --> 01:51:53,579
don't know what to make of that but are

1918
01:51:51,779 --> 01:51:56,309
you going to implement the PNG writer

1919
01:51:53,579 --> 01:51:58,319
yeah well I think we probably will we'll

1920
01:51:56,310 --> 01:52:00,150
just do it uncompressed cuz it's really

1921
01:51:58,319 --> 01:52:02,460
not I shouldn't be unless I'm forgetting

1922
01:52:00,149 --> 01:52:04,349
something it shouldn't be really any

1923
01:52:02,460 --> 01:52:08,189
harder to implement a PNG writer that's

1924
01:52:04,350 --> 01:52:10,260
uncompressed then it's just basically

1925
01:52:08,189 --> 01:52:13,138
you'll be similar to a bitmap right if

1926
01:52:10,260 --> 01:52:16,920
we wanted to do a compressor then you've

1927
01:52:13,139 --> 01:52:18,118
got a bunch of work you have to do but

1928
01:52:16,920 --> 01:52:20,569
we don't have to do that for any

1929
01:52:18,118 --> 01:52:20,569
particular reason

1930
01:52:23,960 --> 01:52:26,020
you

1931
01:53:12,128 --> 01:53:18,340
yes the windows API does use Hungarian

1932
01:53:14,859 --> 01:53:23,889
notation that's why it's called

1933
01:53:18,340 --> 01:53:29,378
Hungarian notation right isn't isn't it

1934
01:53:23,889 --> 01:53:31,929
Charleston money's like being having

1935
01:53:29,378 --> 01:53:35,128
been Hungarian that is the reason why it

1936
01:53:31,929 --> 01:53:35,128
is called Hungarian notation

1937
01:53:45,760 --> 01:53:48,390
yeah

1938
01:53:48,899 --> 01:54:05,828
and he you know was Hungarian and so

1939
01:53:54,310 --> 01:54:07,300
there you go right Reese Erlich we had a

1940
01:54:05,828 --> 01:54:09,039
yellow for coulda flashed a do we know

1941
01:54:07,300 --> 01:54:10,570
about that color flash already I don't

1942
01:54:09,039 --> 01:54:21,130
really know what's up with for coders

1943
01:54:10,569 --> 01:54:23,920
renderer but this one I don't I guess

1944
01:54:21,130 --> 01:54:35,650
this version mmm I think this version

1945
01:54:23,920 --> 01:54:37,449
has the green flash code in it but maybe

1946
01:54:35,649 --> 01:54:38,888
it doesn't I don't know I don't know

1947
01:54:37,448 --> 01:54:40,839
what's up with four coders rendering

1948
01:54:38,889 --> 01:54:44,190
stuff I don't know what where those come

1949
01:54:40,840 --> 01:54:44,190
from I've never really looked at it

1950
01:54:53,439 --> 01:54:56,499
do you think you still improve a lot as

1951
01:54:55,179 --> 01:54:58,059
a programmer as post when you first

1952
01:54:56,498 --> 01:54:59,498
started I'd be curious to know if there

1953
01:54:58,059 --> 01:55:05,050
are specific things you work on to keep

1954
01:54:59,498 --> 01:55:11,550
improving um so I guess what I would say

1955
01:55:05,050 --> 01:55:14,010
is I feel like there's a like very

1956
01:55:11,550 --> 01:55:23,469
there's I feel like there's a really

1957
01:55:14,010 --> 01:55:26,110
long I feel like there's a massive

1958
01:55:23,469 --> 01:55:30,939
amount of improvement I could do in

1959
01:55:26,109 --> 01:55:34,448
terms of my programming ability 99% of

1960
01:55:30,939 --> 01:55:37,510
which is not possible in C++ or C C++

1961
01:55:34,448 --> 01:55:40,448
right so basically like I feel like I

1962
01:55:37,510 --> 01:55:45,639
probably am now about as good as I can

1963
01:55:40,448 --> 01:55:47,859
get in this language which is crap so

1964
01:55:45,639 --> 01:55:49,179
that's not saying much if that makes

1965
01:55:47,859 --> 01:55:53,938
sense

1966
01:55:49,179 --> 01:55:53,939
for general programming purposes right

1967
01:55:55,229 --> 01:56:02,739
so I feel like I could get really way

1968
01:55:59,918 --> 01:56:04,538
further down the line towards being good

1969
01:56:02,738 --> 01:56:12,578
at programming if I had a better

1970
01:56:04,538 --> 01:56:14,438
language and so you know I think that

1971
01:56:12,578 --> 01:56:16,179
just involves making a language or

1972
01:56:14,439 --> 01:56:21,729
waiting for someone to make a language

1973
01:56:16,179 --> 01:56:23,229
that's any good but basically like so if

1974
01:56:21,729 --> 01:56:25,570
I wanted to improve as a programmer

1975
01:56:23,229 --> 01:56:27,639
without getting a new language I think

1976
01:56:25,569 --> 01:56:28,899
mostly what you have to focus on because

1977
01:56:27,639 --> 01:56:30,279
there's plenty of ways I could become a

1978
01:56:28,899 --> 01:56:32,768
better programmer without getting a new

1979
01:56:30,279 --> 01:56:36,759
language but they don't really involve

1980
01:56:32,769 --> 01:56:39,219
coding they involve external knowledge

1981
01:56:36,760 --> 01:56:42,820
so like I could learn a lot of different

1982
01:56:39,219 --> 01:56:45,158
math things I don't know plenty of

1983
01:56:42,819 --> 01:56:48,488
there's always math you don't know right

1984
01:56:45,158 --> 01:56:51,488
and so I could go learn that and that

1985
01:56:48,488 --> 01:56:53,049
would improve my programming ability in

1986
01:56:51,488 --> 01:56:56,888
in the areas where that math is

1987
01:56:53,050 --> 01:56:59,050
applicable tremendously but like

1988
01:56:56,889 --> 01:57:01,239
improving just the actual act of

1989
01:56:59,050 --> 01:57:04,479
day-to-day coding all the things I could

1990
01:57:01,238 --> 01:57:06,399
do right now that I'm not doing in terms

1991
01:57:04,479 --> 01:57:09,039
of like making the code quo

1992
01:57:06,399 --> 01:57:13,960
better they all require a different

1993
01:57:09,039 --> 01:57:15,550
language that's just and people claim

1994
01:57:13,960 --> 01:57:18,010
that there's other better things you can

1995
01:57:15,550 --> 01:57:20,409
do in C++ like here's this new way to

1996
01:57:18,010 --> 01:57:21,699
program this thing they're all I don't

1997
01:57:20,409 --> 01:57:26,349
agree with any of them I think they're

1998
01:57:21,699 --> 01:57:28,649
all just garbage ideas there are clearly

1999
01:57:26,350 --> 01:57:31,360
way better ways we could be programming

2000
01:57:28,649 --> 01:57:34,719
we do not have the languages to support

2001
01:57:31,359 --> 01:57:39,189
them that's what I would say I think

2002
01:57:34,720 --> 01:57:42,070
John for what it's worth is potentially

2003
01:57:39,189 --> 01:57:44,589
enabling us to start pushing on that

2004
01:57:42,069 --> 01:57:48,909
stuff by having really like hardcore

2005
01:57:44,590 --> 01:57:51,400
meta programming pre phases in JI

2006
01:57:48,909 --> 01:57:55,149
because if you think about like what we

2007
01:57:51,399 --> 01:57:57,789
need to do language wise is we need more

2008
01:57:55,149 --> 01:58:00,879
people to be able to do experiments with

2009
01:57:57,789 --> 01:58:03,069
more language constructs and the way to

2010
01:58:00,880 --> 01:58:04,480
do that is not to make some stupid

2011
01:58:03,069 --> 01:58:06,639
language decisions at a meeting every

2012
01:58:04,479 --> 01:58:08,289
year like C++ does and then force

2013
01:58:06,640 --> 01:58:09,730
everyone to use it like that doesn't do

2014
01:58:08,289 --> 01:58:13,510
anything that's a waste of everyone's

2015
01:58:09,729 --> 01:58:15,639
time the way you need to do things to

2016
01:58:13,510 --> 01:58:17,289
find new language constructs that

2017
01:58:15,640 --> 01:58:19,869
actually work and produce good quality

2018
01:58:17,289 --> 01:58:22,359
code is you need a lot of people

2019
01:58:19,869 --> 01:58:30,909
experimenting to find what those things

2020
01:58:22,359 --> 01:58:34,839
are right and so I think that that's a

2021
01:58:30,909 --> 01:58:38,380
pretty good start and so I think that

2022
01:58:34,840 --> 01:58:42,069
that having maybe something like ji

2023
01:58:38,380 --> 01:58:45,909
where people can work on their own meta

2024
01:58:42,069 --> 01:58:47,949
programming stuff and when we find good

2025
01:58:45,909 --> 01:58:49,569
ones they can be kind of like pointed to

2026
01:58:47,949 --> 01:58:50,979
and say here's a language feature that

2027
01:58:49,569 --> 01:58:54,069
seems like it really creates some really

2028
01:58:50,979 --> 01:58:55,599
nice code with not very much effort on

2029
01:58:54,069 --> 01:59:00,069
the part of the programmer or whatever

2030
01:58:55,600 --> 01:59:02,610
that's more what we need and a lot less

2031
01:59:00,069 --> 01:59:05,739
of this like let's get a bunch of people

2032
01:59:02,609 --> 01:59:07,539
who think it's actually worth their time

2033
01:59:05,739 --> 01:59:09,039
to go to a committee meeting where

2034
01:59:07,539 --> 01:59:11,199
everyone will argue about stuff and

2035
01:59:09,039 --> 01:59:12,399
nothing gets done and then we adopt some

2036
01:59:11,199 --> 01:59:16,269
really crappy standard which is

2037
01:59:12,399 --> 01:59:17,799
basically how C++ involves I mean that's

2038
01:59:16,270 --> 01:59:19,780
just it's obviously doesn't work like

2039
01:59:17,800 --> 01:59:20,079
you can see the past 30 years can tell

2040
01:59:19,779 --> 01:59:21,759
you that

2041
01:59:20,079 --> 01:59:24,550
that doesn't work so I think there are

2042
01:59:21,760 --> 01:59:28,350
way better ways to do it and I'm hoping

2043
01:59:24,550 --> 01:59:28,350
that maybe J I will open up one of those

2044
01:59:29,939 --> 01:59:38,319
is it hard to write a level editor no

2045
01:59:35,979 --> 01:59:41,769
it's not that hard there are more things

2046
01:59:38,319 --> 01:59:43,269
you have to worry about but we already

2047
01:59:41,770 --> 01:59:46,180
had to worry about some of those like

2048
01:59:43,270 --> 01:59:47,400
you know and handmade hero if you run it

2049
01:59:46,180 --> 01:59:55,570
[Music]

2050
01:59:47,399 --> 01:59:58,059
so you know you're you know if you run

2051
01:59:55,569 --> 02:00:11,019
handmade hero I should probably do the

2052
01:59:58,060 --> 02:00:13,180
full build here so you know if you just

2053
02:00:11,020 --> 02:00:14,740
wrote just a game engine you could

2054
02:00:13,180 --> 02:00:16,570
probably avoid writing the stuff but

2055
02:00:14,739 --> 02:00:19,149
since we actually have some of that

2056
02:00:16,569 --> 02:00:21,460
support in here you know some of the

2057
02:00:19,149 --> 02:00:23,500
harder stuff to do like the picking and

2058
02:00:21,460 --> 02:00:26,640
stuff we actually already implemented so

2059
02:00:23,500 --> 02:00:26,640
you know

2060
02:00:29,119 --> 02:00:35,970
some of this stuff where I can like

2061
02:00:31,500 --> 02:00:40,619
select individual things by clicking on

2062
02:00:35,970 --> 02:00:43,680
them with the mouse like that that's the

2063
02:00:40,619 --> 02:00:45,539
sort of thing that you need to add that

2064
02:00:43,680 --> 02:00:48,060
you wouldn't have had to add otherwise I

2065
02:00:45,539 --> 02:00:52,949
don't actually know if that's something

2066
02:00:48,060 --> 02:00:54,240
that is all that hard but having to

2067
02:00:52,949 --> 02:00:56,639
unprotect the mouse and that sort of

2068
02:00:54,239 --> 02:00:58,260
stuff as an example but there's not a

2069
02:00:56,640 --> 02:01:00,329
whole lot more to it than that we showed

2070
02:00:58,260 --> 02:01:01,110
how to do like little ad hoc you eyes

2071
02:01:00,329 --> 02:01:02,729
here

2072
02:01:01,109 --> 02:01:04,380
we didn't go overboard with it so

2073
02:01:02,729 --> 02:01:06,809
they're kind of crappy but you know

2074
02:01:04,380 --> 02:01:08,970
making a better one is not a huge effort

2075
02:01:06,810 --> 02:01:14,190
it's just spending some time polishing

2076
02:01:08,970 --> 02:01:16,619
these things so you know I mean really

2077
02:01:14,189 --> 02:01:18,359
with this and this you should be able to

2078
02:01:16,619 --> 02:01:19,559
more or less make a level editor in hand

2079
02:01:18,359 --> 02:01:22,079
in here without a whole lot of effort

2080
02:01:19,560 --> 02:01:23,490
right we have block picking in there but

2081
02:01:22,079 --> 02:01:25,829
we're not doing that anymore I think

2082
02:01:23,489 --> 02:01:27,329
because we shunted the path that renders

2083
02:01:25,829 --> 02:01:29,909
the blocks into a different thing that

2084
02:01:27,329 --> 02:01:31,890
no longer calls the picking code but I

2085
02:01:29,909 --> 02:01:33,800
think that's not hard to add that so you

2086
02:01:31,890 --> 02:01:37,789
could have I think you could have done

2087
02:01:33,800 --> 02:01:37,789
that was working before

2088
02:01:38,810 --> 02:01:41,949
[Music]

2089
02:02:20,100 --> 02:02:26,190
um alright so there's a lot of stuff in

2090
02:02:25,109 --> 02:02:35,099
here probably not gonna get to all of

2091
02:02:26,189 --> 02:02:36,599
these what do you mean by a better

2092
02:02:35,100 --> 02:02:40,560
language I just mean a language that

2093
02:02:36,600 --> 02:02:42,930
provides more ability for the programmer

2094
02:02:40,560 --> 02:02:47,150
to quickly specify what it is they

2095
02:02:42,930 --> 02:02:47,150
intended to have the CPU do right

2096
02:02:48,590 --> 02:02:55,949
you know I it's hard to go into too much

2097
02:02:54,539 --> 02:02:57,090
more detail than that without designing

2098
02:02:55,949 --> 02:02:59,369
a whole language and saying like look

2099
02:02:57,090 --> 02:03:00,840
here's the better language but that's

2100
02:02:59,369 --> 02:03:02,579
the point

2101
02:03:00,840 --> 02:03:05,730
language design is inherently a

2102
02:03:02,579 --> 02:03:08,789
compression problem the output is known

2103
02:03:05,729 --> 02:03:10,949
right we can sit there and go here's the

2104
02:03:08,789 --> 02:03:12,600
optimal assembly language code for

2105
02:03:10,949 --> 02:03:15,269
pretty much anything like we know how to

2106
02:03:12,600 --> 02:03:16,620
do that right we can get a bunch of

2107
02:03:15,270 --> 02:03:18,510
expert assembly language programmers in

2108
02:03:16,619 --> 02:03:21,239
here and we can say this is the output

2109
02:03:18,510 --> 02:03:24,539
that we wanted right if we absolutely

2110
02:03:21,239 --> 02:03:26,880
took every little thing and did it 100%

2111
02:03:24,539 --> 02:03:29,189
correctly the goal of a programming

2112
02:03:26,880 --> 02:03:30,989
language is figure out the lowest amount

2113
02:03:29,189 --> 02:03:35,669
of text that you need to enter to get

2114
02:03:30,989 --> 02:03:37,289
that thing to be generated right

2115
02:03:35,670 --> 02:03:39,960
not only is nobody working on that

2116
02:03:37,289 --> 02:03:43,560
problem nobody even frames it is that

2117
02:03:39,960 --> 02:03:45,149
problem which is terrible but we haven't

2118
02:03:43,560 --> 02:03:49,050
really made any progress in that

2119
02:03:45,149 --> 02:03:52,139
direction since see that I know of

2120
02:03:49,050 --> 02:03:54,360
so I can't even point to a thing that

2121
02:03:52,140 --> 02:03:56,340
we've done since C that actually gets

2122
02:03:54,359 --> 02:03:59,670
you closer to that goal right

2123
02:03:56,340 --> 02:04:03,390
most of what I see languages do is they

2124
02:03:59,670 --> 02:04:08,300
trade the ability to create good code

2125
02:04:03,390 --> 02:04:11,789
meaning like efficient CPU output and

2126
02:04:08,300 --> 02:04:14,820
what they do is they say in how about

2127
02:04:11,789 --> 02:04:17,039
you accept the code getting crappier in

2128
02:04:14,819 --> 02:04:19,469
order for you to do less work to specify

2129
02:04:17,039 --> 02:04:22,319
it but I am not really that interested

2130
02:04:19,470 --> 02:04:24,780
in that like that seems like just being

2131
02:04:22,319 --> 02:04:32,039
really defeatist when you start off with

2132
02:04:24,779 --> 02:04:33,880
it right and so you know I just that's

2133
02:04:32,039 --> 02:04:38,590
what I mean by better language we have

2134
02:04:33,880 --> 02:04:43,090
really gotten very far C++ is absolutely

2135
02:04:38,590 --> 02:04:44,409
terrible with that you know I would

2136
02:04:43,090 --> 02:04:46,840
throw the entire thing away if I were

2137
02:04:44,408 --> 02:04:50,619
starting I would I would scrap 100% of

2138
02:04:46,840 --> 02:04:54,900
what C++ added to C and you know you'd

2139
02:04:50,619 --> 02:04:54,899
start at C and go forward from there I

2140
02:04:55,920 --> 02:04:58,929
really like your programming style

2141
02:04:57,670 --> 02:05:01,000
returning a struct from a function I've

2142
02:04:58,929 --> 02:05:02,829
been using it a lot is it true that it

2143
02:05:01,000 --> 02:05:06,880
was not possible to turn a struct from a

2144
02:05:02,829 --> 02:05:08,920
function at the early days of C I'm not

2145
02:05:06,880 --> 02:05:14,909
really an expert in the early days of C

2146
02:05:08,920 --> 02:05:18,310
but what I can tell you is that you know

2147
02:05:14,908 --> 02:05:21,399
if you think about what the compiler was

2148
02:05:18,310 --> 02:05:24,190
originally sort of set up to do

2149
02:05:21,399 --> 02:05:27,039
you could easily have imagined the

2150
02:05:24,189 --> 02:05:28,629
initial C compilers as just saying a

2151
02:05:27,039 --> 02:05:37,329
return value is like something that's

2152
02:05:28,630 --> 02:05:38,529
left in a register right I don't know if

2153
02:05:37,329 --> 02:05:42,279
that's how it was implanted originally

2154
02:05:38,529 --> 02:05:44,859
but that's a pretty good guess at how it

2155
02:05:42,279 --> 02:05:46,869
probably was and so if that was the way

2156
02:05:44,859 --> 02:05:48,698
that it was done originally then you

2157
02:05:46,869 --> 02:05:50,529
could see why strux would not really

2158
02:05:48,698 --> 02:05:52,629
have been returnable because there's

2159
02:05:50,529 --> 02:05:54,609
more instructive impe in one register

2160
02:05:52,630 --> 02:05:56,920
and so the entire compiler just wouldn't

2161
02:05:54,609 --> 02:05:59,170
work so my assumption is that at some

2162
02:05:56,920 --> 02:06:02,100
point they expanded the notion of the

2163
02:05:59,170 --> 02:06:04,989
binary interface like you know the ABI

2164
02:06:02,100 --> 02:06:07,060
to say hey if the return value of a

2165
02:06:04,988 --> 02:06:09,158
function doesn't fit in a register like

2166
02:06:07,060 --> 02:06:11,500
here's the rules for how we will return

2167
02:06:09,158 --> 02:06:13,869
it right and then that just got added

2168
02:06:11,500 --> 02:06:16,000
and then from then on you could so I

2169
02:06:13,869 --> 02:06:19,569
don't really know when that happened I

2170
02:06:16,000 --> 02:06:23,590
don't remember anything like that but

2171
02:06:19,569 --> 02:06:25,630
that's probably you know probably what

2172
02:06:23,590 --> 02:06:29,469
happened would be Mike if I had to like

2173
02:06:25,630 --> 02:06:31,569
randomly work backwards from knowing how

2174
02:06:29,469 --> 02:06:33,460
things typically happen in during

2175
02:06:31,569 --> 02:06:37,869
development my guess would be the first

2176
02:06:33,460 --> 02:06:40,210
compiler for C probably were all about

2177
02:06:37,869 --> 02:06:41,619
register Returns and it wasn't probably

2178
02:06:40,210 --> 02:06:42,698
until sometime later that someone said

2179
02:06:41,619 --> 02:06:44,889
it would be nice if we could return

2180
02:06:42,698 --> 02:06:47,148
anything we wanted and then they made a

2181
02:06:44,889 --> 02:06:53,130
way to do that

2182
02:06:47,149 --> 02:06:55,469
using the stack right if you're making a

2183
02:06:53,130 --> 02:06:57,059
game with a lot of on-screen text what

2184
02:06:55,469 --> 02:07:01,828
text rendering technique would you think

2185
02:06:57,059 --> 02:07:05,909
you'd go for I mean again if that's

2186
02:07:01,828 --> 02:07:08,639
really not super relevant on-screen text

2187
02:07:05,908 --> 02:07:11,398
is not the thing that makes text

2188
02:07:08,639 --> 02:07:15,359
interesting or not I mean it's not I

2189
02:07:11,399 --> 02:07:17,639
should say whether or not there's a lot

2190
02:07:15,359 --> 02:07:20,038
of text on screen doesn't really have

2191
02:07:17,639 --> 02:07:22,800
anything to do with how you would render

2192
02:07:20,038 --> 02:07:26,458
it it's more about the nature of that

2193
02:07:22,800 --> 02:07:28,769
text right it's exactly the same as

2194
02:07:26,458 --> 02:07:31,109
asking the question you've got a lot of

2195
02:07:28,769 --> 02:07:33,780
grass in the game how would you render

2196
02:07:31,109 --> 02:07:35,639
it and you need to answer a bunch of

2197
02:07:33,779 --> 02:07:39,238
questions before you know what the most

2198
02:07:35,639 --> 02:07:42,059
efficient way is does the grass need to

2199
02:07:39,238 --> 02:07:45,208
move around does it need to move in a

2200
02:07:42,059 --> 02:07:48,570
way that isn't really possible to be

2201
02:07:45,208 --> 02:07:50,578
baked down to a procedural function do

2202
02:07:48,569 --> 02:07:52,349
different parts of grass like as their

2203
02:07:50,578 --> 02:07:56,458
level of detail do i zoom in and out on

2204
02:07:52,349 --> 02:07:59,399
it right all of that stuff is important

2205
02:07:56,458 --> 02:08:01,648
to answer because all of those would

2206
02:07:59,399 --> 02:08:03,659
affect if you were trying to say look I

2207
02:08:01,649 --> 02:08:06,929
want to really optimize my text

2208
02:08:03,658 --> 02:08:08,938
rendering it's more about all of these

2209
02:08:06,929 --> 02:08:11,069
other things and not about how much of

2210
02:08:08,939 --> 02:08:12,300
it you have obviously if you don't have

2211
02:08:11,069 --> 02:08:13,828
very much of it you don't have to care

2212
02:08:12,300 --> 02:08:15,869
at all because you probably whatever you

2213
02:08:13,828 --> 02:08:17,038
do will be fine but if you do have a lot

2214
02:08:15,868 --> 02:08:18,988
of it then you have to answer a lot of

2215
02:08:17,038 --> 02:08:21,029
other questions am I going to zoom all

2216
02:08:18,988 --> 02:08:23,368
the way in until the top of a tee is

2217
02:08:21,029 --> 02:08:24,688
taking up the entire screen am I going

2218
02:08:23,368 --> 02:08:26,130
to zoom all the way out so that there

2219
02:08:24,689 --> 02:08:27,570
are billions and billions of words on

2220
02:08:26,130 --> 02:08:29,639
the screen at once that are all just

2221
02:08:27,569 --> 02:08:31,078
like a pixel wide like you know like

2222
02:08:29,639 --> 02:08:32,550
what are what are your actual

2223
02:08:31,078 --> 02:08:33,898
requirements and then you can start

2224
02:08:32,550 --> 02:08:37,019
talking about what actually has to

2225
02:08:33,899 --> 02:08:38,130
happen but until then it's kind of a

2226
02:08:37,019 --> 02:08:39,570
meaningless question because there's

2227
02:08:38,130 --> 02:08:43,769
just tons of different ways you could

2228
02:08:39,569 --> 02:08:45,299
and imagined to do it how do you

2229
02:08:43,769 --> 02:08:46,349
visualize your logic so easily sometimes

2230
02:08:45,300 --> 02:08:48,269
I'll write a complicated function it

2231
02:08:46,349 --> 02:08:49,649
will take me potentially hours to debug

2232
02:08:48,269 --> 02:08:53,399
or fully understand but it never seems

2233
02:08:49,649 --> 02:08:55,550
to be a problem for you I guess I would

2234
02:08:53,399 --> 02:08:58,469
say there's two sites that what are two

2235
02:08:55,550 --> 02:08:59,949
answers that one is probably just

2236
02:08:58,469 --> 02:09:01,810
experienced as part of it

2237
02:08:59,949 --> 02:09:05,470
I mean having programmed since I was

2238
02:09:01,810 --> 02:09:07,240
seven years old right like at some point

2239
02:09:05,470 --> 02:09:08,920
you just build up neurological pathways

2240
02:09:07,239 --> 02:09:10,659
that make it easier for you to do stuff

2241
02:09:08,920 --> 02:09:12,609
it's just the same it's like you know

2242
02:09:10,659 --> 02:09:14,019
how does somebody you know dribble a

2243
02:09:12,609 --> 02:09:16,179
basketball or whatever it's like well

2244
02:09:14,020 --> 02:09:18,610
after you've done it enough times you

2245
02:09:16,180 --> 02:09:22,600
can just sort of do it and that gives

2246
02:09:18,609 --> 02:09:23,949
you a pretty good you know leg up on

2247
02:09:22,600 --> 02:09:25,780
someone who's only been programming five

2248
02:09:23,949 --> 02:09:29,289
years or even ten years you know

2249
02:09:25,779 --> 02:09:33,579
programming thirty plus years is more

2250
02:09:29,289 --> 02:09:35,560
than that right and that's all so some

2251
02:09:33,579 --> 02:09:38,229
of its just practice that just

2252
02:09:35,560 --> 02:09:39,760
eventually you know you get better the

2253
02:09:38,229 --> 02:09:41,739
other side of it is there are conscious

2254
02:09:39,760 --> 02:09:42,820
things I'm doing that help I have a lot

2255
02:09:41,739 --> 02:09:44,710
of like sort of rules that I follow

2256
02:09:42,819 --> 02:09:46,750
you'll notice the way I structure my

2257
02:09:44,710 --> 02:09:49,390
routines tends to look very regular I

2258
02:09:46,750 --> 02:09:51,909
tend to not have a lot of return points

2259
02:09:49,390 --> 02:09:54,880
I tend to declare things right when I

2260
02:09:51,909 --> 02:09:57,670
actually have a value for them I tend to

2261
02:09:54,880 --> 02:09:59,949
do my if handling as nested blocks where

2262
02:09:57,670 --> 02:10:03,010
the else's are the errors right and

2263
02:09:59,949 --> 02:10:04,050
those things are just ways that I help

2264
02:10:03,010 --> 02:10:08,230
myself

2265
02:10:04,050 --> 02:10:10,600
eliminate the need to remember what I

2266
02:10:08,229 --> 02:10:12,369
did because if there's only one way that

2267
02:10:10,600 --> 02:10:14,860
you tend to do something you don't have

2268
02:10:12,369 --> 02:10:17,289
to remember which one you did you can

2269
02:10:14,859 --> 02:10:20,769
just assume that you did it right and

2270
02:10:17,289 --> 02:10:21,519
that the bonus of that cannot really be

2271
02:10:20,770 --> 02:10:22,900
overstated

2272
02:10:21,520 --> 02:10:25,030
when I was programming on the witness

2273
02:10:22,899 --> 02:10:26,229
which is a code base it does everything

2274
02:10:25,029 --> 02:10:29,500
differently than the way I do it

2275
02:10:26,229 --> 02:10:31,689
I had like way more bugs per day because

2276
02:10:29,500 --> 02:10:35,140
anytime I would interface with the

2277
02:10:31,689 --> 02:10:36,309
external code I would like make silent

2278
02:10:35,140 --> 02:10:37,840
assumptions in my head that I didn't

2279
02:10:36,310 --> 02:10:40,420
even know I was making about how one

2280
02:10:37,840 --> 02:10:43,420
would do something and those things were

2281
02:10:40,420 --> 02:10:45,100
just not the same it wasn't that they

2282
02:10:43,420 --> 02:10:48,340
were worse they were just different

2283
02:10:45,100 --> 02:10:50,200
right and so the assumptions I made

2284
02:10:48,340 --> 02:10:51,640
about how some other piece of code would

2285
02:10:50,199 --> 02:10:54,039
have handled something are wrong and

2286
02:10:51,640 --> 02:10:55,630
then I had to debug that right and so

2287
02:10:54,039 --> 02:10:59,319
those silent assumptions that you make

2288
02:10:55,630 --> 02:11:00,609
when you create a policy are important

2289
02:10:59,319 --> 02:11:03,460
it's important to understand that that

2290
02:11:00,609 --> 02:11:05,619
gives you a bonus and so if you can

2291
02:11:03,460 --> 02:11:06,640
create an environment where you and any

2292
02:11:05,619 --> 02:11:09,220
other programmers that you're working

2293
02:11:06,640 --> 02:11:10,600
with can all agree on some basic ground

2294
02:11:09,220 --> 02:11:12,909
rules of how to do things

2295
02:11:10,600 --> 02:11:14,619
doesn't matter what those ground rules

2296
02:11:12,908 --> 02:11:17,558
or if they're any good just even having

2297
02:11:14,618 --> 02:11:24,518
some does allow people to be more

2298
02:11:17,559 --> 02:11:25,719
efficient right se5a one says I keep

2299
02:11:24,519 --> 02:11:27,369
running into problems that I cannot

2300
02:11:25,719 --> 02:11:29,408
figure out but if I drop it and come

2301
02:11:27,368 --> 02:11:31,089
back to it a later date I can sometimes

2302
02:11:29,408 --> 02:11:32,228
figure out what's going wrong within ten

2303
02:11:31,090 --> 02:11:34,569
minutes any suggestions on how to

2304
02:11:32,229 --> 02:11:35,849
improve my problem-solving in this

2305
02:11:34,569 --> 02:11:43,238
regard

2306
02:11:35,849 --> 02:11:44,739
hmm I think I would probably have to see

2307
02:11:43,238 --> 02:11:50,918
the kinds of problems you're working on

2308
02:11:44,738 --> 02:11:53,259
and what you're missing right I'll start

2309
02:11:50,918 --> 02:11:56,229
with the obvious statement which is that

2310
02:11:53,260 --> 02:11:59,708
for a sufficiently hard problem what you

2311
02:11:56,229 --> 02:12:01,539
described is just what happens so it

2312
02:11:59,708 --> 02:12:03,969
doesn't matter how good of a programming

2313
02:12:01,538 --> 02:12:06,399
you are or how much you've experienced

2314
02:12:03,969 --> 02:12:08,618
you have if you're fighting a very hard

2315
02:12:06,399 --> 02:12:10,538
problem sometimes going away for a while

2316
02:12:08,618 --> 02:12:11,978
and coming back to it is the only way

2317
02:12:10,538 --> 02:12:14,288
that your brain can really grapple with

2318
02:12:11,979 --> 02:12:16,150
it because either you've become too

2319
02:12:14,288 --> 02:12:19,630
enmeshed in a set of assumptions that

2320
02:12:16,149 --> 02:12:22,328
need time to fade or there's too much

2321
02:12:19,630 --> 02:12:24,219
newness there and your brain hasn't had

2322
02:12:22,328 --> 02:12:26,649
the background time necessary to really

2323
02:12:24,219 --> 02:12:29,349
chew through it and condense it down

2324
02:12:26,649 --> 02:12:31,478
into operable like neuron pathways and

2325
02:12:29,349 --> 02:12:34,059
when you give it that time and then come

2326
02:12:31,479 --> 02:12:36,189
back to it they light back up in a much

2327
02:12:34,059 --> 02:12:38,288
more simplified way than when it was all

2328
02:12:36,189 --> 02:12:41,199
new and now you can make forward

2329
02:12:38,288 --> 02:12:43,929
progress right and so one thing to

2330
02:12:41,198 --> 02:12:45,668
remember is it's not necessarily a sign

2331
02:12:43,929 --> 02:12:47,590
you're doing something wrong if you're

2332
02:12:45,668 --> 02:12:49,359
fighting that you may just be at the

2333
02:12:47,590 --> 02:12:51,809
limits of human intelligence at that

2334
02:12:49,359 --> 02:12:54,339
point and that's just the way it goes I

2335
02:12:51,809 --> 02:12:55,689
don't think there are programmers who

2336
02:12:54,340 --> 02:12:57,880
are so awesome

2337
02:12:55,689 --> 02:13:00,849
that they never have what you're

2338
02:12:57,880 --> 02:13:04,300
describing happen right certainly I have

2339
02:13:00,849 --> 02:13:07,840
this I know good programmers out there

2340
02:13:04,300 --> 02:13:09,788
who have this happen I don't know of

2341
02:13:07,840 --> 02:13:11,309
good programmers that are so awesome

2342
02:13:09,788 --> 02:13:13,840
that they don't have that happen I just

2343
02:13:11,309 --> 02:13:19,779
maybe there are some ount know who they

2344
02:13:13,840 --> 02:13:22,260
are who they would be as for if these

2345
02:13:19,779 --> 02:13:24,578
problems are actually relatively simple

2346
02:13:22,260 --> 02:13:25,689
to an experienced programmer who would

2347
02:13:24,578 --> 02:13:26,149
have just come in and gotten the ten

2348
02:13:25,689 --> 02:13:27,739
minute

2349
02:13:26,149 --> 02:13:30,460
sir just fine and don't really need to

2350
02:13:27,738 --> 02:13:37,069
sleep on it or spend weeks or months

2351
02:13:30,460 --> 02:13:40,448
ruminating again I think that just comes

2352
02:13:37,069 --> 02:13:42,738
from a certain level of experience and

2353
02:13:40,448 --> 02:13:45,339
having worked through enough problems

2354
02:13:42,738 --> 02:13:47,569
that you start to have sort of generic

2355
02:13:45,340 --> 02:13:49,579
problem-solving structures in your head

2356
02:13:47,569 --> 02:13:52,609
that generally work for the simpler

2357
02:13:49,579 --> 02:13:54,890
problems right and you just haven't

2358
02:13:52,609 --> 02:13:57,920
built up enough of those yet but you

2359
02:13:54,890 --> 02:13:59,900
will if you keep working at it right

2360
02:13:57,920 --> 02:14:02,989
your brain will continue to learn

2361
02:13:59,899 --> 02:14:05,139
shortcuts to problem-solving that allow

2362
02:14:02,988 --> 02:14:07,819
it to attack problems more quickly and

2363
02:14:05,140 --> 02:14:10,449
eventually there'll be less and less of

2364
02:14:07,819 --> 02:14:14,448
those problems that take you a

2365
02:14:10,448 --> 02:14:19,009
significant amount of of dead time to

2366
02:14:14,448 --> 02:14:23,059
approach I don't necessarily have a lot

2367
02:14:19,010 --> 02:14:24,590
of ways of saying well you know here's

2368
02:14:23,060 --> 02:14:27,380
how you get better at that more quickly

2369
02:14:24,590 --> 02:14:33,020
but what I would say is just keep doing

2370
02:14:27,380 --> 02:14:35,350
it is probably the only real requirement

2371
02:14:33,020 --> 02:14:37,730
right keep forcing yourself to solve

2372
02:14:35,350 --> 02:14:39,920
problems that you find difficult and

2373
02:14:37,729 --> 02:14:42,408
they should start to get easier over

2374
02:14:39,920 --> 02:14:46,069
time as your brain builds up that extra

2375
02:14:42,408 --> 02:14:48,889
circuitry if you just don't if you just

2376
02:14:46,069 --> 02:14:51,279
say ask too hard and stop that's

2377
02:14:48,890 --> 02:14:55,400
probably the only real way that you will

2378
02:14:51,279 --> 02:15:00,319
not you know improve over time and get

2379
02:14:55,399 --> 02:15:01,849
and get quicker would be my guess what

2380
02:15:00,319 --> 02:15:03,829
font do you recommend for a native

2381
02:15:01,850 --> 02:15:05,920
desktop app a font that looks pleasant

2382
02:15:03,829 --> 02:15:08,329
to the eyes of a hard time finding one

2383
02:15:05,920 --> 02:15:12,408
thanks to your help

2384
02:15:08,329 --> 02:15:14,269
I don't know Roboto is pretty good from

2385
02:15:12,408 --> 02:15:18,609
the Google you can get that from the

2386
02:15:14,270 --> 02:15:20,960
Google free font set might be an Apache

2387
02:15:18,609 --> 02:15:28,250
or an open font I don't know what it is

2388
02:15:20,960 --> 02:15:30,819
Roboto is pretty good droid sans I think

2389
02:15:28,250 --> 02:15:30,819
was pretty good

2390
02:15:33,960 --> 02:15:39,329
yeah I don't I don't really remember

2391
02:15:36,010 --> 02:15:44,320
which ones I'm sorry I don't know but I

2392
02:15:39,329 --> 02:15:45,579
agree it's hard to find what's the

2393
02:15:44,319 --> 02:15:47,769
hardest program problem you found

2394
02:15:45,579 --> 02:15:50,868
yourself dealing with

2395
02:15:47,770 --> 02:15:50,869
[Music]

2396
02:15:57,238 --> 02:16:06,018
I don't really know how to answer that

2397
02:15:59,729 --> 02:16:09,360
question sorry Jeffrey use Waldron's

2398
02:16:06,019 --> 02:16:12,748
would you recommend it for C code is

2399
02:16:09,359 --> 02:16:17,759
there a decent Windows alternative

2400
02:16:12,748 --> 02:16:22,279
I haven't myself used it I do think

2401
02:16:17,760 --> 02:16:22,280
those types of utilities tend to be good

2402
02:16:32,569 --> 02:16:39,139
I guess I would say does LLVM address

2403
02:16:35,780 --> 02:16:41,301
sanitizer work on windows probably I

2404
02:16:39,139 --> 02:16:45,229
think it does that might be something to

2405
02:16:41,300 --> 02:16:47,960
look at I'm not sure if it does or not

2406
02:16:45,229 --> 02:16:49,189
though um one of the things you can do

2407
02:16:47,960 --> 02:16:50,899
is like what we didn't hand made here

2408
02:16:49,190 --> 02:16:52,131
where you can force allocations to go

2409
02:16:50,899 --> 02:16:53,930
through a thing that lines them up at

2410
02:16:52,130 --> 02:16:57,109
the ends of buffers that's something you

2411
02:16:53,930 --> 02:16:58,610
can do with just your own code right and

2412
02:16:57,110 --> 02:17:00,440
we did that handmade here oh and that's

2413
02:16:58,610 --> 02:17:02,211
one way to find those buffer overruns

2414
02:17:00,440 --> 02:17:04,610
that I think works pretty well and it's

2415
02:17:02,210 --> 02:17:06,409
pretty easy to implement just make your

2416
02:17:04,610 --> 02:17:08,030
own always call your own memory

2417
02:17:06,409 --> 02:17:10,940
allocator and then thunk it through to

2418
02:17:08,030 --> 02:17:12,560
whatever you were using in normal code

2419
02:17:10,940 --> 02:17:14,989
but when you want to run in protected

2420
02:17:12,559 --> 02:17:20,139
code you can make it so that it randomly

2421
02:17:14,989 --> 02:17:22,639
picks under or overflow protection and

2422
02:17:20,139 --> 02:17:24,319
aligns it with a buffer with a mem with

2423
02:17:22,639 --> 02:17:26,000
an unmapped page right next to it so

2424
02:17:24,319 --> 02:17:27,889
it'll fault and we did that on handmade

2425
02:17:26,000 --> 02:17:30,889
heroes so that's you can go look at how

2426
02:17:27,889 --> 02:17:33,590
we did that that's one way to provide

2427
02:17:30,889 --> 02:17:35,300
some some extra protection there if

2428
02:17:33,591 --> 02:17:37,729
you're on a platform that you don't have

2429
02:17:35,300 --> 02:17:39,350
an automated utility to do it for you

2430
02:17:37,729 --> 02:17:43,939
it's not that hard to make your own for

2431
02:17:39,350 --> 02:17:45,890
that what language environment do you

2432
02:17:43,940 --> 02:17:52,341
recommend for introducing young kids to

2433
02:17:45,889 --> 02:17:53,359
programming um I don't really know you

2434
02:17:52,341 --> 02:17:56,120
know like maybe like something like

2435
02:17:53,360 --> 02:17:58,250
JavaScript or something would be a good

2436
02:17:56,120 --> 02:18:01,190
start and the reason I say that is is

2437
02:17:58,250 --> 02:18:03,171
yet it's kind of a crapped language but

2438
02:18:01,190 --> 02:18:04,850
you know so was basic and that's what a

2439
02:18:03,171 --> 02:18:07,639
lot of us from the old days learned on

2440
02:18:04,850 --> 02:18:08,631
you know basics of crap language but

2441
02:18:07,639 --> 02:18:10,430
you're just trying to get your feet wet

2442
02:18:08,630 --> 02:18:14,199
so you know if the reason I'd say

2443
02:18:10,430 --> 02:18:14,200
JavaScript is it has a lot of the same

2444
02:18:16,421 --> 02:18:23,630
it has a lot of the same aspects of

2445
02:18:19,489 --> 02:18:26,569
basic from the old days which is that

2446
02:18:23,630 --> 02:18:29,539
you it's on everything so you know you

2447
02:18:26,569 --> 02:18:31,639
just if you have your kid knows how to

2448
02:18:29,540 --> 02:18:34,100
use a web browser you can just teach

2449
02:18:31,639 --> 02:18:36,289
them how to hit f12 and start looking at

2450
02:18:34,100 --> 02:18:37,850
the code right which is exactly the way

2451
02:18:36,290 --> 02:18:39,410
like old basic used to be like on an

2452
02:18:37,850 --> 02:18:41,329
apple to write use feel just like hit a

2453
02:18:39,409 --> 02:18:44,559
key and it would just dump you into a

2454
02:18:41,329 --> 02:18:44,559
basic shell right

2455
02:18:45,559 --> 02:18:51,800
and the other thing is you can just

2456
02:18:49,340 --> 02:18:56,569
tweak the existing stuff and see the

2457
02:18:51,800 --> 02:18:58,670
results on the webpage right and so I

2458
02:18:56,569 --> 02:19:03,889
feel like that barrier to entry being

2459
02:18:58,670 --> 02:19:06,079
basically zero is probably the right

2460
02:19:03,889 --> 02:19:07,399
place to start it doesn't have datatype

2461
02:19:06,079 --> 02:19:11,600
so they don't have to understand what

2462
02:19:07,399 --> 02:19:13,069
that means they can just like do simple

2463
02:19:11,600 --> 02:19:18,739
stuff like putting the file name of a

2464
02:19:13,069 --> 02:19:23,239
picture right so I would say javascript

2465
02:19:18,739 --> 02:19:26,180
is a good thing to start with and you

2466
02:19:23,239 --> 02:19:28,729
know don't try to start kids off with a

2467
02:19:26,180 --> 02:19:31,510
good quote unquote language because

2468
02:19:28,729 --> 02:19:34,309
you're not trying to teach them like

2469
02:19:31,510 --> 02:19:35,389
good programming habits or something

2470
02:19:34,309 --> 02:19:37,159
like that you're just trying to get them

2471
02:19:35,389 --> 02:19:40,250
to understand like what code even is

2472
02:19:37,159 --> 02:19:44,770
right and then once they can sort of get

2473
02:19:40,250 --> 02:19:44,770
the hang of like the JavaScript stuff

2474
02:19:45,250 --> 02:19:49,399
then I'd say try to move them over into

2475
02:19:47,780 --> 02:19:50,960
something a little bit more real right

2476
02:19:49,399 --> 02:19:52,609
where they could start thinking about

2477
02:19:50,959 --> 02:19:56,839
types and and something that has a

2478
02:19:52,610 --> 02:19:59,659
memory like C would be good but I

2479
02:19:56,840 --> 02:20:02,601
wouldn't start them there because it's

2480
02:19:59,659 --> 02:20:11,739
just it's too much right it's if they

2481
02:20:02,601 --> 02:20:14,150
won't have enough mental traction and I

2482
02:20:11,739 --> 02:20:15,440
think they just get discouraged if you

2483
02:20:14,149 --> 02:20:18,489
try to teach them see right off the bat

2484
02:20:15,440 --> 02:20:18,489
I think they just get too discouraged

2485
02:20:20,319 --> 02:20:24,890
that's just bestest my my thinking I

2486
02:20:23,000 --> 02:20:26,409
don't know I'm a la I don't teach kids

2487
02:20:24,890 --> 02:20:28,579
how to program so I don't really know

2488
02:20:26,409 --> 02:20:31,970
you should probably ask someone who's

2489
02:20:28,579 --> 02:20:34,129
tried you know there's people who try to

2490
02:20:31,970 --> 02:20:36,229
work on like early you know how do we

2491
02:20:34,129 --> 02:20:39,260
teach you know 10 year-olds to code or

2492
02:20:36,229 --> 02:20:43,310
something and and see like what they've

2493
02:20:39,261 --> 02:20:45,590
found is the most useful ways of getting

2494
02:20:43,310 --> 02:20:48,310
kids to start and stick with it and I'm

2495
02:20:45,590 --> 02:20:48,310
not sure

2496
02:20:50,079 --> 02:20:54,229
but like most people I know from my

2497
02:20:52,521 --> 02:20:56,271
generation probably started with basic

2498
02:20:54,229 --> 02:20:58,279
at least a little bit right and it's not

2499
02:20:56,271 --> 02:20:59,840
like you did it for long you know so I'm

2500
02:20:58,280 --> 02:21:02,210
not saying program JavaScript for like

2501
02:20:59,840 --> 02:21:04,010
seven years right but just a couple

2502
02:21:02,209 --> 02:21:06,109
months of you get learning how to

2503
02:21:04,010 --> 02:21:07,790
program at all or what programming even

2504
02:21:06,110 --> 02:21:14,750
is I think you want something really

2505
02:21:07,790 --> 02:21:17,000
basic and really really like trivial to

2506
02:21:14,750 --> 02:21:23,780
just see what happens when you tweak

2507
02:21:17,000 --> 02:21:25,159
things do you think learning to program

2508
02:21:23,780 --> 02:21:29,480
a C is a bad idea

2509
02:21:25,159 --> 02:21:31,369
yeah I kind of do I think C is maybe a

2510
02:21:29,479 --> 02:21:35,420
good second language to learn because

2511
02:21:31,370 --> 02:21:37,010
you should learn memory management and

2512
02:21:35,420 --> 02:21:40,760
you should be able to look at like

2513
02:21:37,010 --> 02:21:44,300
direct azzam output from what you do as

2514
02:21:40,760 --> 02:21:47,170
like the next thing you learn but but as

2515
02:21:44,299 --> 02:21:52,789
a first language it's just it's too much

2516
02:21:47,170 --> 02:21:55,760
I mean you could do it but I just I

2517
02:21:52,790 --> 02:22:01,040
don't think it makes a lot of sense you

2518
02:21:55,760 --> 02:22:02,271
know I'm saying how often do you work on

2519
02:22:01,040 --> 02:22:03,890
random sub products that aren't work

2520
02:22:02,271 --> 02:22:09,530
related

2521
02:22:03,889 --> 02:22:11,539
I don't really sometimes I do like meow

2522
02:22:09,530 --> 02:22:15,800
hash I tried to break off as a separate

2523
02:22:11,540 --> 02:22:17,510
thing but again that's I needed that

2524
02:22:15,799 --> 02:22:21,739
like I needed to hash or what I was

2525
02:22:17,510 --> 02:22:23,271
doing so yeah I wasn't like just sitting

2526
02:22:21,739 --> 02:22:25,521
around going oh I'm gonna make a hash

2527
02:22:23,271 --> 02:22:28,271
function just because I can and I don't

2528
02:22:25,521 --> 02:22:31,159
actually need it for anything

2529
02:22:28,271 --> 02:22:35,500
so most time I have a reason like I make

2530
02:22:31,159 --> 02:22:35,500
the thing cuz I needed it you know

2531
02:22:39,649 --> 02:22:45,229
all right um go ahead and close down

2532
02:22:53,459 --> 02:22:57,159
okay thank you everyone for joining me

2533
02:22:55,659 --> 02:22:59,109
for those two the hand made hero it's

2534
02:22:57,159 --> 02:23:00,549
Ana pleasure coding with you as always

2535
02:22:59,109 --> 02:23:02,770
if you would like to follow along with

2536
02:23:00,549 --> 02:23:04,148
the series you can always pre-order the

2537
02:23:02,770 --> 02:23:06,040
game from handmade here at out or gonna

2538
02:23:04,148 --> 02:23:10,148
come to the source code so you can

2539
02:23:06,040 --> 02:23:11,950
follow along online you can also always

2540
02:23:10,148 --> 02:23:13,239
click on the handmade hero head if you

2541
02:23:11,950 --> 02:23:15,250
want to get the rest of the my rocket

2542
02:23:13,239 --> 02:23:17,648
sites if you want to find out what I'm

2543
02:23:15,250 --> 02:23:21,760
working on these days it's all up here

2544
02:23:17,648 --> 02:23:25,148
check it out I will be back next week

2545
02:23:21,760 --> 02:23:28,568
when we will get the font stuff probably

2546
02:23:25,148 --> 02:23:29,978
hopefully yeah you know obviously

2547
02:23:28,568 --> 02:23:32,439
speaking I think next weekend we could

2548
02:23:29,978 --> 02:23:37,840
finish that up at which point I think

2549
02:23:32,439 --> 02:23:41,170
that means we are sort of code complete

2550
02:23:37,840 --> 02:23:43,059
on being able to just rebuild all of our

2551
02:23:41,170 --> 02:23:46,359
assets from a directory flow stuff that

2552
02:23:43,059 --> 02:23:48,670
anyone can now edit who wants to so you

2553
02:23:46,359 --> 02:23:54,550
can basically build a completely own

2554
02:23:48,670 --> 02:23:56,409
version of all of our art assets replace

2555
02:23:54,549 --> 02:23:59,590
them with your own do whatever you want

2556
02:23:56,409 --> 02:24:01,420
add as many new ones as you want and so

2557
02:23:59,590 --> 02:24:04,389
that's a good place to be I'm pretty

2558
02:24:01,420 --> 02:24:05,799
happy with that and we've so so we're

2559
02:24:04,389 --> 02:24:09,219
rapidly closing in on that there'll be a

2560
02:24:05,799 --> 02:24:11,709
nice milestone so maybe we'll hit that

2561
02:24:09,219 --> 02:24:13,119
next weekend hopefully we will hope see

2562
02:24:11,709 --> 02:24:14,709
you back here for that till then have

2563
02:24:13,120 --> 02:24:17,200
fun programming everyone and I'll see

2564
02:24:14,709 --> 02:24:19,619
you all on the Internet take you use

2565
02:24:17,200 --> 02:24:19,620
everybody

