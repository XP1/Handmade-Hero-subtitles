1
00:00:04,400 --> 00:00:08,699
hello everyone and welcome to handmade

2
00:00:06,929 --> 00:00:11,370
hero the show recode a complete game

3
00:00:08,699 --> 00:00:13,259
live on stream yesterday we tested out a

4
00:00:11,369 --> 00:00:15,209
potential method for doing sorting but

5
00:00:13,259 --> 00:00:17,278
don't think it's going to work we just

6
00:00:15,210 --> 00:00:18,929
kind of playing with some suggestions so

7
00:00:17,278 --> 00:00:20,730
I think I'm gonna go ahead and do what

8
00:00:18,929 --> 00:00:23,609
we had originally planned to do which is

9
00:00:20,730 --> 00:00:25,890
just to do a full grass sort because

10
00:00:23,609 --> 00:00:27,929
well honestly I don't know that there's

11
00:00:25,890 --> 00:00:29,550
that much of a reason not to it seems

12
00:00:27,929 --> 00:00:34,500
like a totally legitimate thing to do

13
00:00:29,550 --> 00:00:37,259
and you know it's you know it's worth

14
00:00:34,500 --> 00:00:38,730
having some craft code in our game

15
00:00:37,259 --> 00:00:40,710
probably will probably have more of it

16
00:00:38,729 --> 00:00:42,238
getting a little used to writing some

17
00:00:40,710 --> 00:00:44,340
graph based code doesn't seem like a bad

18
00:00:42,238 --> 00:00:45,570
idea because I'm sure we'll have to do a

19
00:00:44,340 --> 00:00:48,180
little bit more of that when we do world

20
00:00:45,570 --> 00:00:50,579
generation possibly pathfinding and

21
00:00:48,179 --> 00:00:52,019
things like that so graphs are a pretty

22
00:00:50,579 --> 00:00:53,579
common thing to want to be able to work

23
00:00:52,020 --> 00:00:56,430
with and we really haven't had a lot of

24
00:00:53,579 --> 00:00:58,198
a cult cause to use them yet so it seems

25
00:00:56,429 --> 00:01:01,109
like it's a totally reasonable thing to

26
00:00:58,198 --> 00:01:03,448
do here to go ahead and and take a look

27
00:01:01,109 --> 00:01:05,609
at that so I'm going to go ahead and get

28
00:01:03,448 --> 00:01:08,280
started here it is day 3 04 so you're

29
00:01:05,609 --> 00:01:09,688
going to want to unpack day 303 source

30
00:01:08,280 --> 00:01:12,780
code if you're trying to follow along

31
00:01:09,688 --> 00:01:15,269
with me at home because that is what I'm

32
00:01:12,780 --> 00:01:22,099
starting with today so let's go ahead

33
00:01:15,269 --> 00:01:29,629
and get our project up here and made

34
00:01:22,099 --> 00:01:33,750
there we go I and let's open up the sort

35
00:01:29,629 --> 00:01:34,920
so we sort of did this alternative

36
00:01:33,750 --> 00:01:36,989
version of the merge store here we

37
00:01:34,920 --> 00:01:40,368
determined and actually this was thanks

38
00:01:36,989 --> 00:01:42,929
to an excellent diagram poo shoes made

39
00:01:40,368 --> 00:01:44,728
it there seems to be pretty clear cases

40
00:01:42,930 --> 00:01:47,159
where this won't work so I think we have

41
00:01:44,728 --> 00:01:50,219
to just determine that this is not going

42
00:01:47,159 --> 00:01:52,290
to be something that we can use and so

43
00:01:50,219 --> 00:01:54,899
you know this all of this code is

44
00:01:52,290 --> 00:01:56,100
basically not not useful right this is

45
00:01:54,899 --> 00:01:59,549
this is code that's not going to be

46
00:01:56,099 --> 00:02:03,929
useful for us so we need something else

47
00:01:59,549 --> 00:02:07,618
here and what we need here is some kind

48
00:02:03,930 --> 00:02:11,640
of a an algorithm that will sort these

49
00:02:07,618 --> 00:02:12,909
in terms of semantics sort by who

50
00:02:11,639 --> 00:02:15,549
overlaps who and it

51
00:02:12,909 --> 00:02:17,710
just take sprites that overlap it'll try

52
00:02:15,550 --> 00:02:19,840
to do sorting around those sprites and

53
00:02:17,710 --> 00:02:23,050
sprites that don't overlap it won't try

54
00:02:19,840 --> 00:02:26,289
to sort those rights so it's kind of a

55
00:02:23,050 --> 00:02:28,390
you know very a very localized very

56
00:02:26,289 --> 00:02:29,799
semantic process and hopefully that will

57
00:02:28,389 --> 00:02:32,289
get us to the point where we can sort of

58
00:02:29,800 --> 00:02:33,969
get that working smoothly and then we'll

59
00:02:32,289 --> 00:02:36,009
be able to put in whatever kinds of

60
00:02:33,969 --> 00:02:38,439
operations we want right we'll be able

61
00:02:36,009 --> 00:02:40,389
to say okay we can now just make

62
00:02:38,439 --> 00:02:42,159
arbitrary rules about what goes in front

63
00:02:40,389 --> 00:02:44,229
of what and then hopefully we'll have a

64
00:02:42,159 --> 00:02:46,900
nice clean way of always having those

65
00:02:44,229 --> 00:02:48,969
come out with the best possible sort

66
00:02:46,900 --> 00:02:50,469
given the constraints by just pushing

67
00:02:48,969 --> 00:02:53,259
them through our graph sorting routine

68
00:02:50,469 --> 00:02:55,050
that's the hope anyway so you can see

69
00:02:53,259 --> 00:02:57,009
here we had a build sprite graph

70
00:02:55,050 --> 00:02:58,719
function that we started sketching out

71
00:02:57,009 --> 00:03:00,819
and if you remember this was about three

72
00:02:58,719 --> 00:03:03,460
weeks ago because I broke the microphone

73
00:03:00,819 --> 00:03:05,349
and we were off for two weeks but before

74
00:03:03,460 --> 00:03:07,719
that you can see we went in here and

75
00:03:05,349 --> 00:03:10,659
said okay we're going to go through all

76
00:03:07,719 --> 00:03:12,280
of the nodes pairwise and we're going to

77
00:03:10,659 --> 00:03:15,789
see whether they intersect in screen

78
00:03:12,280 --> 00:03:18,550
area and if they do intersect in screen

79
00:03:15,789 --> 00:03:20,679
area we're going to use our is in front

80
00:03:18,550 --> 00:03:23,580
of to add an edge between them which

81
00:03:20,680 --> 00:03:26,050
which now says hey there's this bright

82
00:03:23,580 --> 00:03:29,170
has to go in front of this right or vice

83
00:03:26,050 --> 00:03:30,910
versa right so if a is in front of B

84
00:03:29,169 --> 00:03:34,089
then we're going to add an edge it says

85
00:03:30,909 --> 00:03:35,379
a's in front of be if it's it goes the

86
00:03:34,090 --> 00:03:39,509
other way around we're going to add an

87
00:03:35,379 --> 00:03:42,250
edge that says B is in front of a okay

88
00:03:39,509 --> 00:03:44,620
so this is actually pretty reasonable

89
00:03:42,250 --> 00:03:47,469
pseudocode it's it's actually almost

90
00:03:44,620 --> 00:03:48,909
real code but you know we're going to

91
00:03:47,469 --> 00:03:51,039
want to do a bunch stuff for the n plus

92
00:03:48,909 --> 00:03:54,069
it's it's N squared as you can see here

93
00:03:51,039 --> 00:03:55,539
so we're also going to want to do some

94
00:03:54,069 --> 00:03:56,919
work there with spatial partitioning to

95
00:03:55,539 --> 00:03:58,239
make sure that we don't actually go n

96
00:03:56,919 --> 00:04:00,579
squared because the number of sprites we

97
00:03:58,239 --> 00:04:02,289
have is pretty high like 2,000 or 3,000

98
00:04:00,580 --> 00:04:03,850
we don't want something going n squared

99
00:04:02,289 --> 00:04:06,729
on that that we would see that in our

100
00:04:03,849 --> 00:04:07,989
frame rate for sure and well I'm sure

101
00:04:06,729 --> 00:04:12,399
we'll implement it n square at first and

102
00:04:07,989 --> 00:04:16,180
you will see it in the frame rate you

103
00:04:12,400 --> 00:04:19,060
shouldn't have to take my word for it so

104
00:04:16,180 --> 00:04:21,850
taking a look at this what we need to do

105
00:04:19,060 --> 00:04:25,639
here is just go okay now that we have a

106
00:04:21,850 --> 00:04:29,100
graph after this piece of pseudocode

107
00:04:25,639 --> 00:04:32,250
runs we're going to have the information

108
00:04:29,100 --> 00:04:34,410
that we need to to do the sort but we

109
00:04:32,250 --> 00:04:36,420
haven't actually done the sort yet so

110
00:04:34,410 --> 00:04:39,750
the next thing we need to do is we need

111
00:04:36,420 --> 00:04:44,009
to just determine what should be drawn

112
00:04:39,750 --> 00:04:47,660
first right and so if you imagine and

113
00:04:44,009 --> 00:04:47,659
I'll just pop over really quickly here

114
00:04:47,750 --> 00:04:58,879
to mr. Milton see there we go here we

115
00:04:53,579 --> 00:04:58,879
are here we go

116
00:05:08,040 --> 00:05:12,879
so if you think about what's going to

117
00:05:10,329 --> 00:05:22,180
happen here and i suppose i should also

118
00:05:12,879 --> 00:05:24,310
title this graph sort so if you think

119
00:05:22,180 --> 00:05:26,889
about what's going to happen here we

120
00:05:24,310 --> 00:05:32,740
have sprites and those rights are going

121
00:05:26,889 --> 00:05:34,569
to be you know something like this we're

122
00:05:32,740 --> 00:05:36,129
going to see that they overlap in screen

123
00:05:34,569 --> 00:05:38,560
space and our rule is going to tell us

124
00:05:36,129 --> 00:05:40,089
you know this one has to come behind

125
00:05:38,560 --> 00:05:42,310
this one or whatever right or more

126
00:05:40,089 --> 00:05:44,889
specifically a comes in front of be

127
00:05:42,310 --> 00:05:47,530
right and so what we're going to do when

128
00:05:44,889 --> 00:05:53,319
we have all of these here and I guess we

129
00:05:47,529 --> 00:05:55,539
should also maybe make one more and so

130
00:05:53,319 --> 00:05:58,019
in this case we kind of know all right

131
00:05:55,540 --> 00:06:00,879
this is going to produce a graph and

132
00:05:58,019 --> 00:06:05,289
that graph is going to have three nodes

133
00:06:00,879 --> 00:06:06,790
in it right a B and C and what we know

134
00:06:05,290 --> 00:06:08,170
is that every time we determine that

135
00:06:06,790 --> 00:06:10,180
something is in front of something else

136
00:06:08,170 --> 00:06:12,100
we add an edge from the thing that's in

137
00:06:10,180 --> 00:06:14,980
front to the thing that's behind so in

138
00:06:12,100 --> 00:06:20,500
this case a is in front of B &amp; B is in

139
00:06:14,980 --> 00:06:23,140
front of C right so I'll state the

140
00:06:20,500 --> 00:06:25,209
obvious thing first because you haven't

141
00:06:23,139 --> 00:06:28,360
worked at grass before it's probably not

142
00:06:25,209 --> 00:06:31,870
that obvious the obvious thing is if we

143
00:06:28,360 --> 00:06:35,879
then wanted to draw these sprites such

144
00:06:31,870 --> 00:06:40,240
that we drew the furthest one back first

145
00:06:35,879 --> 00:06:41,949
right well if we knew that we didn't

146
00:06:40,240 --> 00:06:45,430
have cycles and remember we talked about

147
00:06:41,949 --> 00:06:47,170
cycles if we knew that we didn't have

148
00:06:45,430 --> 00:06:49,360
cycles and cycles would be like if we

149
00:06:47,170 --> 00:06:52,240
had a one from here to here right so if

150
00:06:49,360 --> 00:06:54,819
we don't have cycles then what we can

151
00:06:52,240 --> 00:06:56,860
say about this graph traversal is that

152
00:06:54,819 --> 00:06:59,439
there's a really pretty straightforward

153
00:06:56,860 --> 00:07:02,350
ways of us determine who to draw first

154
00:06:59,439 --> 00:07:05,230
and who to draw last and so on all we

155
00:07:02,350 --> 00:07:07,030
have to do is pick any random sprite it

156
00:07:05,230 --> 00:07:09,640
doesn't matter which one we just pick a

157
00:07:07,029 --> 00:07:11,889
random sprite and we follow its edges

158
00:07:09,639 --> 00:07:15,129
until we can't follow edges anymore

159
00:07:11,889 --> 00:07:16,899
right we just go doodoo and there's no

160
00:07:15,129 --> 00:07:19,569
edges out of this guy so we know he is a

161
00:07:16,899 --> 00:07:20,750
back most sprite and we can draw him we

162
00:07:19,569 --> 00:07:24,379
know there are no

163
00:07:20,750 --> 00:07:26,509
other requirements to his being drawn so

164
00:07:24,379 --> 00:07:27,980
we can be drawn at any time as long as

165
00:07:26,509 --> 00:07:29,120
there are no edges coming out of him

166
00:07:27,980 --> 00:07:31,460
that say that there's someone else who's

167
00:07:29,120 --> 00:07:34,129
in front of them right that's just a net

168
00:07:31,459 --> 00:07:36,739
definition of our edge so if we wanted

169
00:07:34,129 --> 00:07:40,069
to draw all this rights in back to front

170
00:07:36,740 --> 00:07:43,819
order all we really have to do is just

171
00:07:40,069 --> 00:07:46,370
go well start with the first sprite

172
00:07:43,819 --> 00:07:49,939
follow the edges until we can't follow

173
00:07:46,370 --> 00:07:53,750
them anymore draw that's right right go

174
00:07:49,939 --> 00:07:55,310
back follow any other edges we didn't

175
00:07:53,750 --> 00:07:58,220
follow out of that node all the way to

176
00:07:55,310 --> 00:08:00,379
the end draw that right and just keep

177
00:07:58,220 --> 00:08:01,820
following all the paths until we can't

178
00:08:00,379 --> 00:08:04,550
follow any more paths once we draw on

179
00:08:01,819 --> 00:08:06,769
all of those we've completely drawn that

180
00:08:04,550 --> 00:08:08,629
connected subgraph and i could set

181
00:08:06,769 --> 00:08:10,459
connected sub graph which if i haven't

182
00:08:08,629 --> 00:08:16,668
already stated it is if there were more

183
00:08:10,459 --> 00:08:18,289
nodes over here there's two connected

184
00:08:16,668 --> 00:08:19,729
sub graphs here right these guys are all

185
00:08:18,290 --> 00:08:22,129
connected and these guys are connected

186
00:08:19,730 --> 00:08:24,470
but they are not connected to each other

187
00:08:22,129 --> 00:08:27,649
right so each one of this is a sub graph

188
00:08:24,470 --> 00:08:34,330
we could say like this with sub graph 0

189
00:08:27,649 --> 00:08:37,429
you know and this is sub graph one right

190
00:08:34,330 --> 00:08:38,750
so once i do that i know i've drawn

191
00:08:37,429 --> 00:08:41,629
everything in this connected sub graph

192
00:08:38,750 --> 00:08:43,279
right and so then all i have to do is

193
00:08:41,629 --> 00:08:44,809
just make sure there are no other sub

194
00:08:43,279 --> 00:08:46,819
graphs well how do i do that well it's

195
00:08:44,809 --> 00:08:47,899
pretty easy again and I don't know that

196
00:08:46,820 --> 00:08:49,730
this is the method will use but you

197
00:08:47,899 --> 00:08:51,319
could imagine a pretty trivial way of

198
00:08:49,730 --> 00:08:53,420
doing this which is every time we draw

199
00:08:51,320 --> 00:08:55,550
someone we just mark them as having been

200
00:08:53,419 --> 00:08:56,809
drawn so we mark this guys having to

201
00:08:55,549 --> 00:08:58,909
draw and mark this guy's I mean draw

202
00:08:56,809 --> 00:09:01,250
marks Kaiser named Ron now we just go to

203
00:08:58,909 --> 00:09:02,870
the second sprite and we do the same

204
00:09:01,250 --> 00:09:04,460
thing we do it the first right but when

205
00:09:02,870 --> 00:09:05,810
we look at the first right this I guess

206
00:09:04,460 --> 00:09:07,009
right rather we see it's already been

207
00:09:05,809 --> 00:09:08,479
drawn so we know we don't need consider

208
00:09:07,009 --> 00:09:10,279
it let me move on to the third sprite

209
00:09:08,480 --> 00:09:12,379
it's already been drawn move on to the

210
00:09:10,279 --> 00:09:14,779
you know the for sprite ah this one

211
00:09:12,379 --> 00:09:16,460
hasn't been done yet redo the edge

212
00:09:14,779 --> 00:09:17,990
following drawing algorithm which will

213
00:09:16,460 --> 00:09:19,519
draw this right and then this right move

214
00:09:17,990 --> 00:09:23,629
on to the fifth right it's already been

215
00:09:19,519 --> 00:09:26,210
drawn and we're done so just by looping

216
00:09:23,629 --> 00:09:28,309
over all this rights following their

217
00:09:26,210 --> 00:09:31,009
edges to the end and drawing them in

218
00:09:28,309 --> 00:09:34,278
that reverse order we would be able to

219
00:09:31,009 --> 00:09:38,838
trivially take our graph and draw it

220
00:09:34,278 --> 00:09:40,938
back to front very very simple so the

221
00:09:38,839 --> 00:09:43,970
only thing that we really have to worry

222
00:09:40,938 --> 00:09:46,519
about is the case where we end up with a

223
00:09:43,970 --> 00:09:49,610
cycle because there's nothing that says

224
00:09:46,519 --> 00:09:51,860
that we won't get cycles and if we have

225
00:09:49,610 --> 00:09:53,419
a cycle then we have a problem because

226
00:09:51,860 --> 00:09:55,339
if a is supposed to be drawn in front of

227
00:09:53,419 --> 00:09:56,539
B &amp; B is supposed to be drawn Trent of C

228
00:09:55,339 --> 00:09:58,879
but see you supposed to be drawn in

229
00:09:56,539 --> 00:10:01,990
front of a then we will have a

230
00:09:58,879 --> 00:10:06,199
circumstance where there is no actual

231
00:10:01,990 --> 00:10:09,499
correct draw order for these sprites we

232
00:10:06,198 --> 00:10:12,859
created an impossible scenario but the

233
00:10:09,499 --> 00:10:15,079
problem is that could happen in the

234
00:10:12,860 --> 00:10:16,789
world of games in two and a half d where

235
00:10:15,078 --> 00:10:18,528
we're kind of fudging it and saying well

236
00:10:16,789 --> 00:10:19,938
we're just trying to take to the artwork

237
00:10:18,528 --> 00:10:21,588
and make it look like it's sort of

238
00:10:19,938 --> 00:10:24,110
existing in 3d but we really know it's

239
00:10:21,589 --> 00:10:25,819
actually 2d we're making stuff up as we

240
00:10:24,110 --> 00:10:27,169
go along and we're making rules up like

241
00:10:25,818 --> 00:10:28,009
this so we asked me in front of this and

242
00:10:27,169 --> 00:10:31,039
this always ask me for this because

243
00:10:28,009 --> 00:10:33,139
that's what looks nicer right but what

244
00:10:31,039 --> 00:10:35,659
looks nicer does it necessarily produce

245
00:10:33,139 --> 00:10:37,459
a consistent ordering so at some point

246
00:10:35,659 --> 00:10:40,909
we will have to figure out a way to

247
00:10:37,458 --> 00:10:42,250
break these cycles when they occur the

248
00:10:40,909 --> 00:10:45,318
first thing we could do is just

249
00:10:42,250 --> 00:10:48,049
arbitrarily break cycles and the way we

250
00:10:45,318 --> 00:10:50,479
could do that is again by marking as we

251
00:10:48,049 --> 00:10:53,628
go and if we ever hit something that's

252
00:10:50,480 --> 00:10:56,120
on our path again we just consider that

253
00:10:53,629 --> 00:10:58,879
path over that's a trivial cycle break

254
00:10:56,120 --> 00:11:00,589
it just says ignore the first cycle that

255
00:10:58,879 --> 00:11:02,990
would cause the actual loop to occur

256
00:11:00,589 --> 00:11:05,149
that's probably not the final one will

257
00:11:02,990 --> 00:11:06,620
want to use if we do find we have a lot

258
00:11:05,149 --> 00:11:08,720
of cycles if we rarely if ever have a

259
00:11:06,620 --> 00:11:10,068
cycle we may not care but if we often

260
00:11:08,720 --> 00:11:11,028
have cycles due to our rules we probably

261
00:11:10,068 --> 00:11:13,308
going to want something as more

262
00:11:11,028 --> 00:11:16,909
intelligent about what kind of an edge

263
00:11:13,308 --> 00:11:19,370
it added and to break to prefer breaking

264
00:11:16,909 --> 00:11:23,469
edges of certain kinds that we think are

265
00:11:19,370 --> 00:11:26,470
less likely to produce incorrect sorts

266
00:11:23,470 --> 00:11:26,470
okay

267
00:11:28,730 --> 00:11:32,190
so hopefully that I'll make some sense

268
00:11:30,809 --> 00:11:34,019
for you since this is the first time

269
00:11:32,190 --> 00:11:35,370
we've worked on a graph algorithm I

270
00:11:34,019 --> 00:11:37,769
handmade here at least the Tiber claw

271
00:11:35,370 --> 00:11:40,110
I'm going to take this in simple steps

272
00:11:37,769 --> 00:11:42,090
so that everyone will be comfortable

273
00:11:40,110 --> 00:11:43,620
with it so the first thing we're going

274
00:11:42,090 --> 00:11:46,259
to do is we're going to build the graph

275
00:11:43,620 --> 00:11:47,730
and we've written sort of that pseudo

276
00:11:46,259 --> 00:11:48,990
code that's very obvious pseudo code

277
00:11:47,730 --> 00:11:51,240
right we've written the obvious

278
00:11:48,990 --> 00:11:52,950
pseudocode for it but we're going to

279
00:11:51,240 --> 00:11:57,840
actually do the work of really building

280
00:11:52,950 --> 00:12:03,960
the graph structure okay then we are

281
00:11:57,840 --> 00:12:04,980
going to find cycles so we're not going

282
00:12:03,960 --> 00:12:06,090
to do anything when I'm going to try to

283
00:12:04,980 --> 00:12:07,620
draw with it we're not gonna do anything

284
00:12:06,090 --> 00:12:11,250
with this graph at all we're just going

285
00:12:07,620 --> 00:12:14,580
to ask ourselves can we detect where all

286
00:12:11,250 --> 00:12:16,649
the cycles actually are right and you

287
00:12:14,580 --> 00:12:19,139
know in so doing maybe we can remove

288
00:12:16,649 --> 00:12:21,899
edges from the graph that have cycles so

289
00:12:19,139 --> 00:12:28,379
you know you know we could say a sub 1

290
00:12:21,899 --> 00:12:31,199
of this is remove them you know and then

291
00:12:28,379 --> 00:12:35,120
finally we will actually do the step of

292
00:12:31,200 --> 00:12:35,120
drawing the graph in order

293
00:12:40,870 --> 00:12:46,009
so that's basically what what I'm going

294
00:12:43,429 --> 00:12:48,620
to do in in series there and that way

295
00:12:46,009 --> 00:12:50,689
you know we'll take it 17 we won't try

296
00:12:48,620 --> 00:12:52,580
to do everything in kind of one pass

297
00:12:50,690 --> 00:12:54,620
we'll sort of take it one step at a time

298
00:12:52,580 --> 00:12:57,800
and you can sort of see how these sorts

299
00:12:54,620 --> 00:12:59,480
of algorithms progress right and I'm not

300
00:12:57,799 --> 00:13:01,039
going to use any fancy algorithms I'm

301
00:12:59,480 --> 00:13:03,500
not going to use any fancy graph theory

302
00:13:01,039 --> 00:13:05,480
here I'm literally just viewing the most

303
00:13:03,500 --> 00:13:08,330
basic kind of graph work that the least

304
00:13:05,480 --> 00:13:10,759
that I ever do which is to just just

305
00:13:08,330 --> 00:13:12,139
tagging nodes right so the whole way

306
00:13:10,759 --> 00:13:13,519
that we would be doing anything here is

307
00:13:12,139 --> 00:13:16,338
we're just just putting a little marker

308
00:13:13,519 --> 00:13:19,100
in those nodes and you'll see that's a

309
00:13:16,339 --> 00:13:21,200
very that's very often a simple way to

310
00:13:19,100 --> 00:13:22,820
approach prout graph problems that works

311
00:13:21,200 --> 00:13:24,040
for a surprising number of different

312
00:13:22,820 --> 00:13:28,670
ways you might want to diverse them

313
00:13:24,039 --> 00:13:31,429
there is however a whole huge big field

314
00:13:28,669 --> 00:13:33,110
of graph theory that has all kinds of

315
00:13:31,429 --> 00:13:34,759
algorithms in it and so when we're done

316
00:13:33,110 --> 00:13:36,919
with this we may find ourselves in a

317
00:13:34,759 --> 00:13:38,689
situation where we want to apply some

318
00:13:36,919 --> 00:13:41,838
heavier firepower if that turns out to

319
00:13:38,690 --> 00:13:43,850
be the case we will but at first I just

320
00:13:41,839 --> 00:13:45,440
want to show you the very very basics of

321
00:13:43,850 --> 00:13:47,930
working with graphs and we're not going

322
00:13:45,440 --> 00:13:52,000
to try and fit our our algorithm into

323
00:13:47,929 --> 00:13:55,039
some other kind of category right okay

324
00:13:52,000 --> 00:13:57,708
so here we go we know we have a list of

325
00:13:55,039 --> 00:14:01,699
sprite nodes and so when we do this sort

326
00:13:57,708 --> 00:14:03,229
of a be thing here in fact looks like we

327
00:14:01,700 --> 00:14:07,520
have a bug in our pseudocode that should

328
00:14:03,230 --> 00:14:10,370
be bound a bound be and when we do at

329
00:14:07,519 --> 00:14:11,838
edge we're passing a and B there and so

330
00:14:10,370 --> 00:14:15,110
what we want to do here is we've got

331
00:14:11,839 --> 00:14:16,730
these sprite nodes and we want to

332
00:14:15,110 --> 00:14:20,600
actually build out these sprite nodes

333
00:14:16,730 --> 00:14:24,528
now the problem with this is as you'll

334
00:14:20,600 --> 00:14:26,870
see if we want our our graph to be

335
00:14:24,528 --> 00:14:28,189
optimized for walking which is what

336
00:14:26,870 --> 00:14:31,278
we're doing like we're trying to get

337
00:14:28,190 --> 00:14:33,980
from one you know place to another then

338
00:14:31,278 --> 00:14:37,759
we kind of need some quick way to get

339
00:14:33,980 --> 00:14:42,320
from a node to an edge right we need

340
00:14:37,759 --> 00:14:44,720
some way of doing that so probably we're

341
00:14:42,320 --> 00:14:48,140
going to need our sprite node to keep

342
00:14:44,720 --> 00:14:50,389
that in mind now I don't know if we want

343
00:14:48,139 --> 00:14:51,860
indices here or not I'm guessing that we

344
00:14:50,389 --> 00:14:54,080
might not I'm not one hundred percent

345
00:14:51,860 --> 00:14:56,149
sure but

346
00:14:54,080 --> 00:15:00,230
if we take a look at what we've got for

347
00:14:56,149 --> 00:15:02,959
sprite bound or or what is it where is

348
00:15:00,230 --> 00:15:04,340
that guy yet here it is so we take a

349
00:15:02,960 --> 00:15:06,139
look at what we have for sorts right

350
00:15:04,340 --> 00:15:09,230
bound here right you can see we have

351
00:15:06,139 --> 00:15:10,819
like this sort key and then we have the

352
00:15:09,230 --> 00:15:12,259
index and the index is the thing we're

353
00:15:10,820 --> 00:15:13,790
trying to draw and we have the sort key

354
00:15:12,259 --> 00:15:17,059
which is the thing that tells us how

355
00:15:13,789 --> 00:15:18,799
we're supposed to sort this thing and

356
00:15:17,059 --> 00:15:21,169
what I would say is we don't really need

357
00:15:18,799 --> 00:15:23,089
a node structure per se because we can

358
00:15:21,169 --> 00:15:24,169
just use those nodes that we have we

359
00:15:23,090 --> 00:15:25,910
don't need to create new ones we could

360
00:15:24,169 --> 00:15:28,339
just use those sword entries that we

361
00:15:25,909 --> 00:15:31,600
have so really what we need to do is

362
00:15:28,340 --> 00:15:34,519
just kind of import this this stuff here

363
00:15:31,600 --> 00:15:36,889
into what we've got right so I think we

364
00:15:34,519 --> 00:15:39,860
want to come out here and say okay if

365
00:15:36,889 --> 00:15:42,470
what we need for our for our sort key is

366
00:15:39,860 --> 00:15:44,720
the screen area and then these other

367
00:15:42,470 --> 00:15:46,730
bounds here or whatever then that's what

368
00:15:44,720 --> 00:15:48,920
a sprite bound is now and then inside

369
00:15:46,730 --> 00:15:50,180
our sort sprite bound this is where

370
00:15:48,919 --> 00:15:53,569
we're going to sort of have this edge

371
00:15:50,179 --> 00:15:55,699
concept here and I don't know that we

372
00:15:53,570 --> 00:15:58,040
need indices for the edges it seems like

373
00:15:55,700 --> 00:15:59,210
we could probably use pointers but i

374
00:15:58,039 --> 00:16:01,309
don't really know which one of those is

375
00:15:59,210 --> 00:16:02,690
going to be more efficient for now i

376
00:16:01,309 --> 00:16:03,859
guess we can just use indices because we

377
00:16:02,690 --> 00:16:05,810
will be able to look up directly so

378
00:16:03,860 --> 00:16:09,289
that's probably fine but what I do want

379
00:16:05,809 --> 00:16:11,419
to do is inside the sort sprite bound in

380
00:16:09,289 --> 00:16:12,860
here i'm just going to chain these edges

381
00:16:11,419 --> 00:16:17,299
together so i'm just going to make it so

382
00:16:12,860 --> 00:16:19,909
that we have a next edge structure and

383
00:16:17,299 --> 00:16:23,509
then in here we just have a first edge

384
00:16:19,909 --> 00:16:25,579
structure so now when we're doing our

385
00:16:23,509 --> 00:16:28,189
sprite sorting we know that we have the

386
00:16:25,580 --> 00:16:30,460
sort key as well as the edge list here

387
00:16:28,190 --> 00:16:33,140
and so then every time we want to add

388
00:16:30,460 --> 00:16:36,940
something to it we can just go ahead and

389
00:16:33,139 --> 00:16:36,939
use use those edge structures

390
00:16:39,990 --> 00:16:48,570
okay so let's go ahead and start to make

391
00:16:46,169 --> 00:16:55,559
that happen at let's actually make these

392
00:16:48,570 --> 00:16:58,740
work to move this above here so here's

393
00:16:55,559 --> 00:17:00,539
our sword entries function and so in

394
00:16:58,740 --> 00:17:03,089
store dead trees we'd assume we would be

395
00:17:00,539 --> 00:17:05,970
calling builds the the build sprite

396
00:17:03,089 --> 00:17:09,750
graph you can see us calling merge sort

397
00:17:05,970 --> 00:17:11,220
with these two pieces of information and

398
00:17:09,750 --> 00:17:13,380
so if I come in here and I say okay

399
00:17:11,220 --> 00:17:21,990
let's build the sprite graph here's the

400
00:17:13,380 --> 00:17:24,270
count here's the entries and we no

401
00:17:21,990 --> 00:17:26,459
longer have this input nodes an input

402
00:17:24,269 --> 00:17:34,769
node count situation although I guess I

403
00:17:26,459 --> 00:17:36,870
could just do it this way all right so

404
00:17:34,769 --> 00:17:38,940
assuming that we have some input we'll

405
00:17:36,869 --> 00:17:42,808
go through them for each pair we will

406
00:17:38,940 --> 00:17:44,308
check to see whether they intersect and

407
00:17:42,808 --> 00:17:47,339
sprite node is not what it is it's

408
00:17:44,308 --> 00:17:50,460
called sort sprite bound now that's what

409
00:17:47,339 --> 00:17:52,169
it was and we grabbed out whichever ones

410
00:17:50,460 --> 00:17:54,900
we're talking about here we check to see

411
00:17:52,170 --> 00:17:57,058
if they intersect and I believe this is

412
00:17:54,900 --> 00:17:58,590
technically a sort key although I guess

413
00:17:57,058 --> 00:18:00,529
no it's not now that I think about it

414
00:17:58,589 --> 00:18:04,349
it's not really part of the sort key

415
00:18:00,529 --> 00:18:09,000
that's not true it really is just part

416
00:18:04,349 --> 00:18:10,919
of this the check to see whether we want

417
00:18:09,000 --> 00:18:15,630
to sort things so technically it

418
00:18:10,920 --> 00:18:16,980
probably should be in there okay so then

419
00:18:15,630 --> 00:18:19,320
we check whether or not they intersect

420
00:18:16,980 --> 00:18:21,509
assuming that they do intersect we then

421
00:18:19,319 --> 00:18:25,049
go ahead and sort their sprite bounds

422
00:18:21,509 --> 00:18:27,359
and I guess we're doing this is not

423
00:18:25,049 --> 00:18:28,769
really i don't i don't know that we

424
00:18:27,359 --> 00:18:30,089
really want to do this this way so i'm

425
00:18:28,769 --> 00:18:38,940
going to go ahead and say let's do this

426
00:18:30,089 --> 00:18:42,449
right and then our ad edge stuff is

427
00:18:38,940 --> 00:18:44,400
correct so since we add an edge every

428
00:18:42,450 --> 00:18:46,259
time I don't know that I need to do this

429
00:18:44,400 --> 00:18:48,720
kind of a switch statement sort of a

430
00:18:46,259 --> 00:18:51,480
thing so I think we could say something

431
00:18:48,720 --> 00:18:53,220
more like if is in front of I think we

432
00:18:51,480 --> 00:18:56,130
could just swap the two right

433
00:18:53,220 --> 00:18:59,788
we could just say like swap a and B does

434
00:18:56,130 --> 00:19:01,770
that make sense and I guess I don't even

435
00:18:59,788 --> 00:19:08,970
need to swap them I can just swap their

436
00:19:01,769 --> 00:19:12,150
pointers right so i can just say like

437
00:19:08,970 --> 00:19:15,210
okay now we know that if a is in front

438
00:19:12,150 --> 00:19:17,280
of be and I guess we to make it easy on

439
00:19:15,210 --> 00:19:19,769
ourselves maybe we'll say well okay I'll

440
00:19:17,279 --> 00:19:22,500
do it this way we'll just say that if a

441
00:19:19,769 --> 00:19:24,569
is in front of B will switch it seems

442
00:19:22,500 --> 00:19:27,240
weird let's let's keep a in front to be

443
00:19:24,569 --> 00:19:36,029
so if B is in front of a we swap them so

444
00:19:27,240 --> 00:19:38,250
we know a is always in front of B now

445
00:19:36,029 --> 00:19:50,428
one thing that we could do and I'll put

446
00:19:38,250 --> 00:19:52,159
it to do here is I don't know what we

447
00:19:50,429 --> 00:19:55,798
want to do if the sort keys are

448
00:19:52,159 --> 00:19:58,770
equivalent I guess to tell you the truth

449
00:19:55,798 --> 00:20:00,418
we couldn't not add an edge so we still

450
00:19:58,769 --> 00:20:02,369
have to add an edge because otherwise

451
00:20:00,419 --> 00:20:05,809
you'd end up with the graph wouldn't

452
00:20:02,369 --> 00:20:05,808
work properly I don't think

453
00:20:11,089 --> 00:20:15,230
I don't really know that we'd have to

454
00:20:13,670 --> 00:20:17,300
think about I'm not sure about that one

455
00:20:15,230 --> 00:20:19,670
but anyway at this point we know that

456
00:20:17,299 --> 00:20:21,589
we've kind of got an edge from A to B

457
00:20:19,670 --> 00:20:25,550
because we've swapped them if that

458
00:20:21,589 --> 00:20:27,679
wasn't the case right all right so how

459
00:20:25,549 --> 00:20:30,740
do i add an edge from A to B and I

460
00:20:27,680 --> 00:20:35,420
suppose actually die thing about since

461
00:20:30,740 --> 00:20:38,200
the also since the edges are I really

462
00:20:35,420 --> 00:20:43,420
only need to sort the node index I think

463
00:20:38,200 --> 00:20:43,420
right I think I can really just do this

464
00:20:51,339 --> 00:20:55,669
right because i actually am only going

465
00:20:54,470 --> 00:20:57,019
to use this particular piece of

466
00:20:55,670 --> 00:20:59,720
information so i don't know that i

467
00:20:57,019 --> 00:21:03,200
really need to swap a and B in this

468
00:20:59,720 --> 00:21:05,390
particular case but I so let's take a

469
00:21:03,200 --> 00:21:10,370
look here so now I need to add an edge

470
00:21:05,390 --> 00:21:13,070
and so oops and so if I take a look at

471
00:21:10,369 --> 00:21:16,129
at what our edge structure is here right

472
00:21:13,069 --> 00:21:17,869
I want to add one of these so I need to

473
00:21:16,130 --> 00:21:19,940
do some kind of a thing where i'm going

474
00:21:17,869 --> 00:21:22,250
to have storage space for a sprite edge

475
00:21:19,940 --> 00:21:27,410
so a sprite edge needs to happen here

476
00:21:22,250 --> 00:21:30,140
and then once i have the sprite edge I

477
00:21:27,410 --> 00:21:32,180
need some stuff I need to know what is

478
00:21:30,140 --> 00:21:34,190
the next edge going to be I need to know

479
00:21:32,180 --> 00:21:36,470
what's the front part of the edge and

480
00:21:34,190 --> 00:21:40,100
what's the behind part of the edge right

481
00:21:36,470 --> 00:21:43,730
and so in this case I know that front

482
00:21:40,099 --> 00:21:50,059
and behind i know that a is in front and

483
00:21:43,730 --> 00:21:51,799
i know that that b is behind yes so the

484
00:21:50,059 --> 00:21:54,710
only thing that I need to know is who

485
00:21:51,799 --> 00:21:58,009
the next edge is going to be well what I

486
00:21:54,710 --> 00:21:59,650
said was I want to chain and I should

487
00:21:58,009 --> 00:22:02,779
probably label these a little more

488
00:21:59,650 --> 00:22:06,970
specifically so for a particular edge

489
00:22:02,779 --> 00:22:09,529
what I want is the first edge with me

490
00:22:06,970 --> 00:22:10,940
you know with whichever sprite we're

491
00:22:09,529 --> 00:22:14,119
talking about here whichever sprite

492
00:22:10,940 --> 00:22:18,110
bound this is I want the first edge with

493
00:22:14,119 --> 00:22:19,879
me as the front right because i'm not

494
00:22:18,109 --> 00:22:24,199
going to point to edges that have me

495
00:22:19,880 --> 00:22:25,940
behind because i want to traverse from

496
00:22:24,200 --> 00:22:28,429
something that's in front to something

497
00:22:25,940 --> 00:22:30,798
that's behind I never need to go the

498
00:22:28,429 --> 00:22:33,350
other way right I never need to walk

499
00:22:30,798 --> 00:22:35,869
backwards I only need to walk forwards

500
00:22:33,349 --> 00:22:38,509
and so or i should say four words i

501
00:22:35,869 --> 00:22:40,369
always want to walk from the frontmost

502
00:22:38,509 --> 00:22:42,048
sprites to the backmost sprites because

503
00:22:40,369 --> 00:22:43,879
we're drawing back to front and we'd

504
00:22:42,048 --> 00:22:49,369
swap that if we wanted to draw the other

505
00:22:43,880 --> 00:22:51,980
order right okay so I want the first

506
00:22:49,369 --> 00:22:54,048
edge with me as front and then I this

507
00:22:51,980 --> 00:22:57,649
would be next edge with same front right

508
00:22:54,048 --> 00:22:59,480
with the same front value and it well

509
00:22:57,648 --> 00:23:03,829
that's not exactly true it's the fur

510
00:22:59,480 --> 00:23:07,159
it's the next edge yeah now that's right

511
00:23:03,829 --> 00:23:09,589
if the next edge whose front index is

512
00:23:07,159 --> 00:23:20,299
the same right because in the case where

513
00:23:09,589 --> 00:23:23,058
I have something like this I'm going to

514
00:23:20,298 --> 00:23:24,648
want to walk through all of these right

515
00:23:23,058 --> 00:23:26,569
so I'm going to want to do this and then

516
00:23:24,648 --> 00:23:28,788
this and then this and then this so I

517
00:23:26,569 --> 00:23:31,189
want to know all of the edges that come

518
00:23:28,788 --> 00:23:32,869
out of a front node towards all the

519
00:23:31,190 --> 00:23:39,139
other nodes that they're marked as being

520
00:23:32,869 --> 00:23:40,518
in front of right okay so when I push an

521
00:23:39,138 --> 00:23:42,949
edge on since I don't care about the

522
00:23:40,519 --> 00:23:46,659
order of edges what I want to do now is

523
00:23:42,950 --> 00:23:49,610
I just want to know who knowed a is

524
00:23:46,659 --> 00:23:53,630
right so I basically want to know my

525
00:23:49,609 --> 00:23:57,319
front node is input nodes plus note

526
00:23:53,630 --> 00:24:00,230
index a and so my front node has been

527
00:23:57,319 --> 00:24:02,859
next I'm sorry a first edge with me as

528
00:24:00,230 --> 00:24:06,950
front and I want to go ahead and take

529
00:24:02,859 --> 00:24:08,719
that and put it as as changing onto the

530
00:24:06,950 --> 00:24:10,788
end of my next and this is again just a

531
00:24:08,720 --> 00:24:13,850
singly linked list let's go say now make

532
00:24:10,788 --> 00:24:17,419
the edge that we just made be part of it

533
00:24:13,849 --> 00:24:19,398
right so here we fill in the data here

534
00:24:17,419 --> 00:24:22,700
we add it to the list and now we've

535
00:24:19,398 --> 00:24:25,038
created basically our graph right that's

536
00:24:22,700 --> 00:24:26,870
all we really need for our graph here's

537
00:24:25,038 --> 00:24:32,509
all the edges now we can walk them if we

538
00:24:26,869 --> 00:24:34,788
want to that's all we need okay so if

539
00:24:32,509 --> 00:24:37,158
this builds the sprite graph then the

540
00:24:34,788 --> 00:24:38,000
next question is well okay how would we

541
00:24:37,159 --> 00:24:41,390
actually

542
00:24:38,000 --> 00:24:45,880
iterate the sprite graph and so if i do

543
00:24:41,390 --> 00:24:49,160
that let's do a walks right graph here

544
00:24:45,880 --> 00:24:51,530
and remember that all we really want to

545
00:24:49,160 --> 00:24:54,320
do like i said here is we just want to

546
00:24:51,529 --> 00:24:57,529
find the cycles so what I want to do is

547
00:24:54,319 --> 00:25:01,069
say okay we pass the exact same piece of

548
00:24:57,529 --> 00:25:03,109
information we just assume that it's

549
00:25:01,069 --> 00:25:05,419
been built already let's get out from

550
00:25:03,109 --> 00:25:06,949
behind my head so we assume that we've

551
00:25:05,420 --> 00:25:08,960
already built this fri crap and now we

552
00:25:06,950 --> 00:25:10,400
have to walk the sprite graph like i

553
00:25:08,960 --> 00:25:11,600
said before all we're going to do is

554
00:25:10,400 --> 00:25:13,940
we're just going to go over each

555
00:25:11,599 --> 00:25:17,119
individual one like i was planning to

556
00:25:13,940 --> 00:25:18,680
before tax same exact same thing we did

557
00:25:17,119 --> 00:25:20,659
only this time we're going to go over

558
00:25:18,680 --> 00:25:22,430
all of them because we're not doing any

559
00:25:20,660 --> 00:25:23,990
kind of pairwise stuff so we're just

560
00:25:22,430 --> 00:25:25,730
gonna we're not doing any kind of an N

561
00:25:23,990 --> 00:25:29,230
squared comparison you know what we need

562
00:25:25,730 --> 00:25:35,509
to like get some more room here we go

563
00:25:29,230 --> 00:25:38,710
all right so if we're going to walk the

564
00:25:35,509 --> 00:25:41,269
sprite graph we need to start at a node

565
00:25:38,710 --> 00:25:43,460
and presumably what we want to do here

566
00:25:41,269 --> 00:25:44,930
is is probably do this recursively at

567
00:25:43,460 --> 00:25:46,430
first and we might not want to do

568
00:25:44,930 --> 00:25:50,210
recursively eventually because usually

569
00:25:46,430 --> 00:25:52,430
recursive is slower than than not and

570
00:25:50,210 --> 00:25:53,930
since this might be performance before

571
00:25:52,430 --> 00:25:56,509
12 I think maybe not I don't know we'll

572
00:25:53,930 --> 00:25:58,160
see probably it's the the part where

573
00:25:56,509 --> 00:26:00,799
we're doing the trying to figure out who

574
00:25:58,160 --> 00:26:01,640
it's it's this N squared loop that's the

575
00:26:00,799 --> 00:26:03,349
one that we're probably gonna have to

576
00:26:01,640 --> 00:26:04,580
concentrate on so actually to be honest

577
00:26:03,349 --> 00:26:06,259
with you I don't think this part will

578
00:26:04,579 --> 00:26:11,689
really be that big of a deal but we'll

579
00:26:06,259 --> 00:26:12,829
find out all right so anyway I have to

580
00:26:11,690 --> 00:26:14,900
walk this right graphic gonna do that

581
00:26:12,829 --> 00:26:21,710
recursively at first so I'm going to do

582
00:26:14,900 --> 00:26:25,240
a recursive front to back and all I need

583
00:26:21,710 --> 00:26:32,960
to pass here is I'm just going to pass a

584
00:26:25,240 --> 00:26:36,980
the input node array and the one we're

585
00:26:32,960 --> 00:26:39,350
currently at right so what I want to do

586
00:26:36,980 --> 00:26:41,569
here is I want to go I want to follow

587
00:26:39,349 --> 00:26:45,289
all the edges recursively of this thing

588
00:26:41,569 --> 00:26:47,000
and kind of fan outwards so again we've

589
00:26:45,289 --> 00:26:48,710
set it up when we built the graph so

590
00:26:47,000 --> 00:26:51,109
that the chains are easy to follow in

591
00:26:48,710 --> 00:26:54,140
this order so I can do

592
00:26:51,109 --> 00:26:56,689
a sprite edge and I can say well start

593
00:26:54,140 --> 00:26:59,480
with ats you know first edge with me as

594
00:26:56,690 --> 00:27:02,210
front as long as there is an edge follow

595
00:26:59,480 --> 00:27:05,058
that that chain right just follow that

596
00:27:02,210 --> 00:27:08,509
chain through and as we follow that

597
00:27:05,058 --> 00:27:10,460
chain each time we walk one we are then

598
00:27:08,509 --> 00:27:11,990
going to be in a position to actually do

599
00:27:10,460 --> 00:27:14,450
something with it what do we want to do

600
00:27:11,990 --> 00:27:16,880
with it well we want to call recursive

601
00:27:14,450 --> 00:27:18,500
back to front again right so we're going

602
00:27:16,880 --> 00:27:20,390
to again pass the input node arrayed

603
00:27:18,500 --> 00:27:24,190
down through it and actually know it i

604
00:27:20,390 --> 00:27:31,460
could put that here as well there we go

605
00:27:24,190 --> 00:27:32,900
input nodes load index I and what we

606
00:27:31,460 --> 00:27:34,970
could do here is note that when we do

607
00:27:32,900 --> 00:27:36,500
this recursive typically we're going to

608
00:27:34,970 --> 00:27:38,210
be passing the index actually because

609
00:27:36,500 --> 00:27:39,619
that's what the person starts with so

610
00:27:38,210 --> 00:27:41,870
what I could do is I could just say well

611
00:27:39,619 --> 00:27:50,178
let's actually just do input nodes +

612
00:27:41,869 --> 00:27:51,979
index right that way we don't have to do

613
00:27:50,179 --> 00:27:58,070
it here and we don't have to do it here

614
00:27:51,980 --> 00:28:00,048
either we just flash edge back right and

615
00:27:58,069 --> 00:28:02,539
we could also assert here the edge front

616
00:28:00,048 --> 00:28:04,490
equals at index so make sure that we

617
00:28:02,539 --> 00:28:06,019
legitimately have built the graph

618
00:28:04,490 --> 00:28:07,789
correctly so that we don't have edges

619
00:28:06,019 --> 00:28:10,339
linked off somebody who really wasn't

620
00:28:07,789 --> 00:28:12,889
the edge that wasn't the the starting

621
00:28:10,339 --> 00:28:14,808
node so you can see us what we're doing

622
00:28:12,890 --> 00:28:17,660
here right we pick out the one the node

623
00:28:14,808 --> 00:28:19,700
that we're on from our array of nodes we

624
00:28:17,660 --> 00:28:22,040
iterate over all its check its edge

625
00:28:19,700 --> 00:28:24,080
chain and for each one we dispatch a

626
00:28:22,039 --> 00:28:28,639
recursive call for front to back and

627
00:28:24,079 --> 00:28:30,529
that's it right that's absolutely it so

628
00:28:28,640 --> 00:28:32,090
now we could actually make this stuff

629
00:28:30,529 --> 00:28:34,369
happen of course we've got some stuff

630
00:28:32,089 --> 00:28:35,509
that we haven't done yet that would need

631
00:28:34,369 --> 00:28:38,479
to happen in order for this to actually

632
00:28:35,509 --> 00:28:40,369
do anything useful but you can sort of

633
00:28:38,480 --> 00:28:43,029
see how it's about to happen right it

634
00:28:40,369 --> 00:28:43,029
would look like this

635
00:28:45,869 --> 00:28:59,279
count countries and then like this so

636
00:28:57,509 --> 00:29:09,930
there we have that and now what we need

637
00:28:59,279 --> 00:29:11,879
to do as well is actually do some work

638
00:29:09,930 --> 00:29:15,120
in here right as it is right now we just

639
00:29:11,880 --> 00:29:17,730
crawl the entire graph but if there was

640
00:29:15,119 --> 00:29:19,109
a cycle we'd loop forever right we would

641
00:29:17,730 --> 00:29:20,099
just keep on looping and looping and

642
00:29:19,109 --> 00:29:21,599
looping and looping and since it's a

643
00:29:20,099 --> 00:29:24,269
recursive function eventually would run

644
00:29:21,599 --> 00:29:26,069
out of stack space and crash right it

645
00:29:24,269 --> 00:29:27,750
would it would just go to the end and

646
00:29:26,069 --> 00:29:28,980
and it would be would just go until it

647
00:29:27,750 --> 00:29:32,460
ran out of stack space for the thread

648
00:29:28,980 --> 00:29:34,799
and crash so what we want to do in here

649
00:29:32,460 --> 00:29:36,480
is actually do some work right we now

650
00:29:34,799 --> 00:29:37,919
need to actually do some work in here

651
00:29:36,480 --> 00:29:41,039
and so that we can have a termination

652
00:29:37,920 --> 00:29:43,259
criteria on the case where it cycles so

653
00:29:41,039 --> 00:29:44,639
let's take a look at what we recorded

654
00:29:43,259 --> 00:29:48,029
here for sprite bound and sprite edge

655
00:29:44,640 --> 00:29:49,470
here they are now we probably don't

656
00:29:48,029 --> 00:29:51,269
really need to mark the edges with

657
00:29:49,470 --> 00:29:54,539
anything at the moment because it's the

658
00:29:51,269 --> 00:29:56,129
nodes we care about cycling right so

659
00:29:54,539 --> 00:29:58,889
what we can do here is we can set

660
00:29:56,130 --> 00:30:06,540
something up where we just say flags it

661
00:29:58,890 --> 00:30:10,080
gives us something to mark and maybe we

662
00:30:06,539 --> 00:30:15,589
can call this a sprite flag and so we've

663
00:30:10,079 --> 00:30:18,509
got you know sprite in this case visited

664
00:30:15,589 --> 00:30:20,970
and sprite drawn like the examples of

665
00:30:18,509 --> 00:30:23,759
stuff we probably want to know and so

666
00:30:20,970 --> 00:30:26,009
now we know that we as we walk these

667
00:30:23,759 --> 00:30:27,420
guys and we could clear those here if we

668
00:30:26,009 --> 00:30:29,009
want to as well although we could also

669
00:30:27,420 --> 00:30:31,850
clear them elsewhere so I'm not sure

670
00:30:29,009 --> 00:30:35,940
really how we want that to work exactly

671
00:30:31,849 --> 00:30:39,029
but we could for example assert that

672
00:30:35,940 --> 00:30:40,440
they're clear as we're building so well

673
00:30:39,029 --> 00:30:42,750
we kind of come through here we could do

674
00:30:40,440 --> 00:30:48,220
something where we said like oh yeah you

675
00:30:42,750 --> 00:30:53,720
know as we come through here

676
00:30:48,220 --> 00:30:58,490
hmm you don't us realized this is not

677
00:30:53,720 --> 00:31:14,409
going to work because this part needs to

678
00:30:58,490 --> 00:31:14,409
keep this index so sad really about this

679
00:31:19,898 --> 00:31:23,689
so in that case we've got the front

680
00:31:22,130 --> 00:31:26,360
index in the back index and then if it

681
00:31:23,690 --> 00:31:28,519
turns out that they're in the wrong

682
00:31:26,359 --> 00:31:32,199
order so the B is actually the one in

683
00:31:28,519 --> 00:31:43,519
front then we could swap the front index

684
00:31:32,200 --> 00:31:46,909
and the back index like so and then here

685
00:31:43,519 --> 00:31:51,278
we just say like okay we know that this

686
00:31:46,909 --> 00:31:51,278
is the front index is at the back index

687
00:31:51,909 --> 00:31:58,149
and there's no Maureen be right

688
00:32:03,440 --> 00:32:10,920
better I think so so anyway when we come

689
00:32:08,700 --> 00:32:12,750
through here when we grab out a we could

690
00:32:10,920 --> 00:32:14,190
also sort of choice that up here right

691
00:32:12,750 --> 00:32:15,690
because regret this a is going to be the

692
00:32:14,190 --> 00:32:17,580
same for the entire time and so when we

693
00:32:15,690 --> 00:32:23,789
grab out a there what we could also do

694
00:32:17,579 --> 00:32:27,839
is just assert the A's what was that

695
00:32:23,789 --> 00:32:33,809
thing flags 40 right that seems pretty

696
00:32:27,839 --> 00:32:36,899
pretty straightforward okay so all that

697
00:32:33,809 --> 00:32:38,789
all that being good what we now need to

698
00:32:36,900 --> 00:32:41,160
do is when we do the actual walking of

699
00:32:38,789 --> 00:32:42,659
this right we know when we do recursive

700
00:32:41,160 --> 00:32:44,640
back to front when we do this call we

701
00:32:42,660 --> 00:32:46,740
pull out what the sprite is what we can

702
00:32:44,640 --> 00:32:50,910
do here is say well okay if the flags

703
00:32:46,740 --> 00:32:56,970
that we're looking at here if these

704
00:32:50,910 --> 00:33:02,370
flags are set so that it looks like we

705
00:32:56,970 --> 00:33:05,370
visited this guy then we wouldn't want

706
00:33:02,369 --> 00:33:07,369
to do this lip loop right if we've

707
00:33:05,369 --> 00:33:11,759
already been here it's that make sense

708
00:33:07,369 --> 00:33:15,119
and of course when we go in here we're

709
00:33:11,759 --> 00:33:16,890
going to have to set the flag but this

710
00:33:15,119 --> 00:33:19,229
is of critical importance the question

711
00:33:16,890 --> 00:33:20,190
is where do we set the flag because we

712
00:33:19,230 --> 00:33:22,079
could set the flag in two different

713
00:33:20,190 --> 00:33:24,690
places we could set the flag right here

714
00:33:22,079 --> 00:33:26,759
or we could set the flag right here and

715
00:33:24,690 --> 00:33:28,590
which one do we want to do sometimes it

716
00:33:26,759 --> 00:33:30,539
doesn't matter in this case it does why

717
00:33:28,589 --> 00:33:34,169
does it matter well the recursive call

718
00:33:30,539 --> 00:33:37,170
is happening here right so if we set the

719
00:33:34,170 --> 00:33:40,259
flag down here it might not do us any

720
00:33:37,170 --> 00:33:42,300
good right because this recursion could

721
00:33:40,259 --> 00:33:44,730
just go ahead and do its little loop and

722
00:33:42,299 --> 00:33:46,710
nobody ever gets marked as visited so

723
00:33:44,730 --> 00:33:48,599
this will never actually happen so we

724
00:33:46,710 --> 00:33:51,329
have to make sure we mark it as visited

725
00:33:48,599 --> 00:33:53,669
first so that if this recursion path

726
00:33:51,329 --> 00:34:03,409
happens to hit the sprite again it will

727
00:33:53,670 --> 00:34:06,029
stop right so that's that's that right

728
00:34:03,410 --> 00:34:10,559
and so this is a simple one of just

729
00:34:06,029 --> 00:34:12,059
making sure that we never get that we

730
00:34:10,559 --> 00:34:13,710
never sort of get into an infinite loop

731
00:34:12,059 --> 00:34:16,199
while we are looping

732
00:34:13,710 --> 00:34:21,628
now the problem here is at least thus

733
00:34:16,199 --> 00:34:23,368
far we don't actually know we don't

734
00:34:21,628 --> 00:34:26,789
really know much about cycles in fact I

735
00:34:23,369 --> 00:34:30,000
guess I might have almost I I guess I

736
00:34:26,789 --> 00:34:32,579
was perhaps not thinking ahead enough

737
00:34:30,000 --> 00:34:35,398
when I wrote these down because actually

738
00:34:32,579 --> 00:34:38,398
what we just did is a draw a graph and

739
00:34:35,398 --> 00:34:40,739
order algorithm this would do graph

740
00:34:38,398 --> 00:34:43,559
drawing in order but without intelligent

741
00:34:40,739 --> 00:34:45,209
breaking of cycles so really this now I

742
00:34:43,559 --> 00:34:47,878
think about it is a little more advanced

743
00:34:45,210 --> 00:34:50,220
I need an ID for my recursion to detect

744
00:34:47,878 --> 00:34:52,289
the cycles and I don't need that for

745
00:34:50,219 --> 00:34:54,858
what I'm doing right now so I guess

746
00:34:52,289 --> 00:34:57,269
really this is this is the simpler one

747
00:34:54,858 --> 00:35:03,088
and that one's going to be a little more

748
00:34:57,269 --> 00:35:04,920
complicated potentially but oops so

749
00:35:03,088 --> 00:35:06,299
anyway hopefully you can see how this

750
00:35:04,920 --> 00:35:07,440
works as we go we're just kind of

751
00:35:06,300 --> 00:35:09,869
leaving a little mark that says we

752
00:35:07,440 --> 00:35:11,970
visited so that we don't ever go and

753
00:35:09,869 --> 00:35:14,640
process that note again so now if we

754
00:35:11,969 --> 00:35:18,779
wanted to we could go ahead and do work

755
00:35:14,639 --> 00:35:20,819
here right this is where we would

756
00:35:18,780 --> 00:35:27,269
actually draw something if that makes

757
00:35:20,820 --> 00:35:30,630
sense so you know that's that's all

758
00:35:27,269 --> 00:35:32,009
there is to it not a whole lot else so

759
00:35:30,630 --> 00:35:35,220
if we wanted to we could actually go

760
00:35:32,010 --> 00:35:37,050
ahead and do that now I suppose so we

761
00:35:35,219 --> 00:35:39,029
could do the walk spy craft and what we

762
00:35:37,050 --> 00:35:45,269
need to do here is we need to have some

763
00:35:39,030 --> 00:35:47,970
place to put you know the we need to

764
00:35:45,269 --> 00:35:52,079
take those sword entries those sordid

765
00:35:47,969 --> 00:35:54,629
entries that we will suppose way we need

766
00:35:52,079 --> 00:35:56,789
to take our graph traversal and since

767
00:35:54,630 --> 00:35:58,289
the graph traversal will be figuring out

768
00:35:56,789 --> 00:36:00,150
what the order is that we should draw

769
00:35:58,289 --> 00:36:03,539
things we need a place to sort of output

770
00:36:00,150 --> 00:36:05,400
that data to write so I have to add to

771
00:36:03,539 --> 00:36:08,009
my recursive back to front I need to add

772
00:36:05,400 --> 00:36:10,349
some sort of a print out here like some

773
00:36:08,010 --> 00:36:12,750
some output pointer right if that makes

774
00:36:10,349 --> 00:36:16,920
sense so we need something like sort

775
00:36:12,750 --> 00:36:18,539
spray bound you know out or right but I

776
00:36:16,920 --> 00:36:19,889
don't want to pass it that way and the

777
00:36:18,539 --> 00:36:21,989
reason I don't want to pass it that way

778
00:36:19,889 --> 00:36:24,809
is because I need to be able to modify

779
00:36:21,989 --> 00:36:26,909
that all the way back and forth on the

780
00:36:24,809 --> 00:36:27,568
chain so I can't just pass a pointer

781
00:36:26,909 --> 00:36:29,368
because a point

782
00:36:27,568 --> 00:36:32,009
gets passed by value and I need the

783
00:36:29,369 --> 00:36:33,449
pointer to essentially be passed by

784
00:36:32,009 --> 00:36:35,608
reference so that I can update the

785
00:36:33,449 --> 00:36:38,400
pointer as it moves and so what I'm

786
00:36:35,608 --> 00:36:46,458
going to do here is I'm going to do like

787
00:36:38,400 --> 00:36:50,999
a graph walk just a sort of a context

788
00:36:46,458 --> 00:36:58,618
which I can put in both the input nodes

789
00:36:50,998 --> 00:37:01,078
if I want to and the sorted output right

790
00:36:58,619 --> 00:37:02,670
and in this case there's some

791
00:37:01,079 --> 00:37:07,920
interesting there's there's a little bit

792
00:37:02,670 --> 00:37:10,229
of there's a little bit of reason why we

793
00:37:07,920 --> 00:37:12,900
probably want to modify our routine here

794
00:37:10,228 --> 00:37:15,748
right because if this is the sort

795
00:37:12,900 --> 00:37:17,900
information I don't actually need to

796
00:37:15,748 --> 00:37:21,149
report back that sort information

797
00:37:17,900 --> 00:37:23,219
because it's way too much right I don't

798
00:37:21,150 --> 00:37:25,650
need to write back the sprite bounds or

799
00:37:23,219 --> 00:37:28,170
copy ances all I need is an index list

800
00:37:25,650 --> 00:37:30,479
at the end and so probably what we would

801
00:37:28,170 --> 00:37:32,369
want to do here when we do sort entries

802
00:37:30,478 --> 00:37:35,248
is we would probably now that we're

803
00:37:32,369 --> 00:37:36,599
going from a large sort structure that

804
00:37:35,248 --> 00:37:39,828
has a bunch of information necessary for

805
00:37:36,599 --> 00:37:43,798
sorting down to just the draw order list

806
00:37:39,829 --> 00:37:49,469
what we want to do is you know is have

807
00:37:43,798 --> 00:37:51,768
an output here you know I'm saying so

808
00:37:49,469 --> 00:37:54,059
that we can write those things in there

809
00:37:51,768 --> 00:37:57,028
and then that is what we would

810
00:37:54,059 --> 00:37:58,829
eventually want to pass so when we come

811
00:37:57,028 --> 00:38:00,539
up through here we have our out index

812
00:37:58,829 --> 00:38:05,039
list we're going to want to write into

813
00:38:00,539 --> 00:38:06,749
that as we go and so then I'm just going

814
00:38:05,039 --> 00:38:10,979
to say all right let's pass that sort

815
00:38:06,748 --> 00:38:14,848
graph walk down here and then in this

816
00:38:10,978 --> 00:38:16,889
case in this case we just say okay the

817
00:38:14,849 --> 00:38:18,900
input nodes of the walk there we go and

818
00:38:16,889 --> 00:38:20,009
then when we want to actually do

819
00:38:18,900 --> 00:38:22,229
something well the thing that we're

820
00:38:20,009 --> 00:38:25,228
going to do here is say okay the lock

821
00:38:22,228 --> 00:38:29,389
has an out index that out index is going

822
00:38:25,228 --> 00:38:29,389
to be this one that we're on

823
00:38:33,079 --> 00:38:40,440
right so that's actually the entire

824
00:38:37,170 --> 00:38:41,849
routine I know it may seem a little

825
00:38:40,440 --> 00:38:43,470
surprising if you've never worked with

826
00:38:41,849 --> 00:38:45,299
graph stuff before but that's basically

827
00:38:43,469 --> 00:38:47,309
all we're going to need for the simple

828
00:38:45,300 --> 00:38:49,350
in order draw because all we do like I

829
00:38:47,309 --> 00:38:51,389
said is just chase it and then as we

830
00:38:49,349 --> 00:38:53,730
unwind the stack right this recursive

831
00:38:51,389 --> 00:38:55,529
thing as we return return each one of

832
00:38:53,730 --> 00:38:58,320
those guys just pushes see on then

833
00:38:55,530 --> 00:39:00,360
beyond than a on it just adds them to

834
00:38:58,320 --> 00:39:03,030
that draw order and so when we're done

835
00:39:00,360 --> 00:39:05,370
we just have the order walk that says

836
00:39:03,030 --> 00:39:07,380
only people who had no edges coming out

837
00:39:05,369 --> 00:39:09,210
of them or who had cycles are going to

838
00:39:07,380 --> 00:39:11,190
get drawn first and then you know

839
00:39:09,210 --> 00:39:16,369
everyone after them in an advancing

840
00:39:11,190 --> 00:39:19,619
front that comes closer and that's it

841
00:39:16,369 --> 00:39:21,839
now unfortunately we can't just run it

842
00:39:19,619 --> 00:39:23,819
because we have a bunch of dependencies

843
00:39:21,840 --> 00:39:24,840
that we haven't satisfied yet right

844
00:39:23,820 --> 00:39:27,380
there's a number of things that we

845
00:39:24,840 --> 00:39:29,309
haven't actually done we expanded our

846
00:39:27,380 --> 00:39:31,349
conceptualization of what's happening to

847
00:39:29,309 --> 00:39:33,000
include an index list that gets written

848
00:39:31,349 --> 00:39:35,789
out we haven't done anything with that

849
00:39:33,000 --> 00:39:39,030
yet we also haven't done anything to

850
00:39:35,789 --> 00:39:42,389
address the situation with needing to

851
00:39:39,030 --> 00:39:43,710
use sort of push memory although we do

852
00:39:42,389 --> 00:39:45,000
have 10 memory so we should be able to

853
00:39:43,710 --> 00:39:46,199
actually do that relatively easily

854
00:39:45,000 --> 00:39:48,059
although we have to make sure that we

855
00:39:46,199 --> 00:39:50,460
size that temp memory appropriately

856
00:39:48,059 --> 00:39:53,159
which is probably easier said than done

857
00:39:50,460 --> 00:39:56,940
in this case and then we also have the

858
00:39:53,159 --> 00:39:59,039
problem of not actually ever filling out

859
00:39:56,940 --> 00:40:01,320
the structures that we actually need

860
00:39:59,039 --> 00:40:03,750
because where is it you're here it is

861
00:40:01,320 --> 00:40:05,880
we've got this rectangles intersex

862
00:40:03,750 --> 00:40:11,369
situation happening well nobody ever

863
00:40:05,880 --> 00:40:14,910
actually made any screen area no one

864
00:40:11,369 --> 00:40:16,889
ever actually computed that for our

865
00:40:14,909 --> 00:40:18,929
sprites as far as I know so we're

866
00:40:16,889 --> 00:40:20,670
comparing fields that nobody ever filled

867
00:40:18,929 --> 00:40:22,230
out and so before this is going to work

868
00:40:20,670 --> 00:40:23,730
at all we also have to go upstream and

869
00:40:22,230 --> 00:40:27,590
make sure somebody actually writes down

870
00:40:23,730 --> 00:40:27,590
the screen area of the sprites

871
00:40:32,048 --> 00:40:39,528
hopefully that makes some sense all

872
00:40:35,239 --> 00:40:40,788
right so otherwise I think we're in

873
00:40:39,528 --> 00:40:44,059
relatively good shape so let's go ahead

874
00:40:40,789 --> 00:40:45,829
and get this compiling a sprite edge

875
00:40:44,059 --> 00:40:48,589
yeah we don't have any way of doing that

876
00:40:45,829 --> 00:40:51,500
stuff just yet that is what I'm going to

877
00:40:48,588 --> 00:40:55,940
have to do later this got changed its

878
00:40:51,500 --> 00:41:00,980
name to that and what have we got here

879
00:40:55,940 --> 00:41:06,470
right edge illegal use of this type I

880
00:41:00,980 --> 00:41:10,699
know that one sort graph walk undeclared

881
00:41:06,469 --> 00:41:12,768
identifier it is sprite craft walk there

882
00:41:10,699 --> 00:41:14,659
we can input nodes an undeclared

883
00:41:12,768 --> 00:41:15,649
identifier that is true and that is

884
00:41:14,659 --> 00:41:17,058
actually not what you're supposed to

885
00:41:15,650 --> 00:41:21,318
pass you're supposed to pass the walk

886
00:41:17,059 --> 00:41:27,849
there in this case we need that that

887
00:41:21,318 --> 00:41:30,980
walk so here is the sprite craft walk

888
00:41:27,849 --> 00:41:35,150
and in this case I want the walk in put

889
00:41:30,980 --> 00:41:39,469
knows to be input nodes block out index

890
00:41:35,150 --> 00:41:43,309
equals out index list would I call that

891
00:41:39,469 --> 00:41:51,980
I should be a ray it's not really a list

892
00:41:43,309 --> 00:41:53,298
is it I mean it's just a nerd I and so

893
00:41:51,980 --> 00:41:58,190
now when we call this we got to pass

894
00:41:53,298 --> 00:42:01,420
that down okay so yeah I think we've got

895
00:41:58,190 --> 00:42:08,059
most of stuff we want uh is it behind

896
00:42:01,420 --> 00:42:09,829
there we go recursive back to front

897
00:42:08,059 --> 00:42:13,778
still passing input nodes not what we

898
00:42:09,829 --> 00:42:17,420
want we want that what else we get

899
00:42:13,778 --> 00:42:19,969
sprite edge okay so I think we're done

900
00:42:17,420 --> 00:42:21,650
so I think now all we have to do is

901
00:42:19,969 --> 00:42:23,058
actually clean up the sort of

902
00:42:21,650 --> 00:42:24,920
surrounding code and figure out how

903
00:42:23,059 --> 00:42:27,798
we're going to get ourselves some

904
00:42:24,920 --> 00:42:30,409
reasonable temp memory here so I feel

905
00:42:27,798 --> 00:42:34,150
like in this case can we do we have

906
00:42:30,409 --> 00:42:34,149
memory arenas support in here

907
00:42:36,869 --> 00:42:42,039
we do so if we want to we could we could

908
00:42:40,539 --> 00:42:44,440
go ahead and have a memory arena which i

909
00:42:42,039 --> 00:42:45,789
think is what we want because we already

910
00:42:44,440 --> 00:42:47,320
have all the code for making these

911
00:42:45,789 --> 00:42:55,029
things work so I think we want to do

912
00:42:47,320 --> 00:42:57,760
something like this right yeah and so

913
00:42:55,030 --> 00:42:59,830
now since we're doing all of that and

914
00:42:57,760 --> 00:43:02,140
we're going to call sort entries I think

915
00:42:59,829 --> 00:43:05,699
instead of passing sort memory we're

916
00:43:02,139 --> 00:43:05,699
just going to pass a memory arena here

917
00:43:06,599 --> 00:43:12,159
and that way when we do the build spread

918
00:43:09,699 --> 00:43:15,399
graph we can pass that temporary net to

919
00:43:12,159 --> 00:43:16,719
use and that way we know that we're

920
00:43:15,400 --> 00:43:18,190
going through something a little safer

921
00:43:16,719 --> 00:43:21,519
that's at least going to warn us if we

922
00:43:18,190 --> 00:43:24,789
screw up and you know all that stuff all

923
00:43:21,519 --> 00:43:27,420
that good stuff so I guess we do a push

924
00:43:24,789 --> 00:43:30,789
struct here is that we called that yeah

925
00:43:27,420 --> 00:43:32,950
so that all seems pretty good the

926
00:43:30,789 --> 00:43:34,840
problem of course is when we come

927
00:43:32,949 --> 00:43:37,719
through here we probably don't have the

928
00:43:34,840 --> 00:43:39,789
push stuff defined in the platform layer

929
00:43:37,719 --> 00:43:44,469
I guess which of course is actually

930
00:43:39,789 --> 00:43:45,869
including some of this sort stuff and I

931
00:43:44,469 --> 00:43:53,709
don't know what we want to do about that

932
00:43:45,869 --> 00:43:57,819
one problem I I mean my my thinking here

933
00:43:53,710 --> 00:44:00,070
is that I don't know that we want this

934
00:43:57,820 --> 00:44:01,690
code to keep running inside the platform

935
00:44:00,070 --> 00:44:04,330
layer it doesn't really make any sense

936
00:44:01,690 --> 00:44:06,099
that it was down in there you know we

937
00:44:04,329 --> 00:44:09,159
move the renderer in there but it ends

938
00:44:06,099 --> 00:44:12,179
up just being duplicated code so what I

939
00:44:09,159 --> 00:44:15,190
think we want to do is is hoist this up

940
00:44:12,179 --> 00:44:17,019
a little bit and instead when we do our

941
00:44:15,190 --> 00:44:19,599
render group stuff I think what we want

942
00:44:17,019 --> 00:44:22,780
to do is call the sort before we

943
00:44:19,599 --> 00:44:25,299
actually ever finalize that stuff and I

944
00:44:22,780 --> 00:44:30,250
I don't know that we have a good place

945
00:44:25,300 --> 00:44:34,840
to do that you know part of the problem

946
00:44:30,250 --> 00:44:36,909
is just that we don't part of the

947
00:44:34,840 --> 00:44:38,710
problem is that we made concessions to

948
00:44:36,909 --> 00:44:42,279
make our debug stuff all flow through

949
00:44:38,710 --> 00:44:44,380
the same pipe and in doing so we ended

950
00:44:42,280 --> 00:44:46,630
up in a situation which is not

951
00:44:44,380 --> 00:44:49,220
necessarily bad but it is the case uh

952
00:44:46,630 --> 00:44:50,960
that you know I guess I

953
00:44:49,219 --> 00:44:53,289
should should illustrate it in here if

954
00:44:50,960 --> 00:44:55,970
we go down and look at how stuff

955
00:44:53,289 --> 00:44:59,059
finalizes you can see that when we get

956
00:44:55,969 --> 00:45:01,909
down to the the code that actually needs

957
00:44:59,059 --> 00:45:04,250
to sort of produce the final rendering

958
00:45:01,909 --> 00:45:10,159
information here you know cure is where

959
00:45:04,250 --> 00:45:12,260
it is right and so the problem is what

960
00:45:10,159 --> 00:45:16,339
we actually would want to do is we would

961
00:45:12,260 --> 00:45:18,740
want to do that before we ever did our d

962
00:45:16,340 --> 00:45:20,690
but like before we ever got out of the

963
00:45:18,739 --> 00:45:24,529
platform specific code so we'd really

964
00:45:20,690 --> 00:45:27,858
want that to happen you know more you

965
00:45:24,530 --> 00:45:30,050
know more like up I don't know where is

966
00:45:27,858 --> 00:45:32,000
a good place for that we'd want that to

967
00:45:30,050 --> 00:45:34,880
be here right where we do game update

968
00:45:32,000 --> 00:45:36,280
and render we'd want to sort in here but

969
00:45:34,880 --> 00:45:38,960
we can't sort in there at the moment

970
00:45:36,280 --> 00:45:41,780
because we have the debug system come in

971
00:45:38,960 --> 00:45:43,579
and it does it and so we would need yet

972
00:45:41,780 --> 00:45:44,869
another thing at the end that calls back

973
00:45:43,579 --> 00:45:49,579
into the platform layer to do that

974
00:45:44,869 --> 00:45:52,369
sorting so what I think is possibly the

975
00:45:49,579 --> 00:45:55,989
better way to go with this is to make

976
00:45:52,369 --> 00:45:59,059
that sorting happen in pieces that don't

977
00:45:55,989 --> 00:46:00,858
interfere with each other right meaning

978
00:45:59,059 --> 00:46:04,219
instead of having it so that you plough

979
00:46:00,858 --> 00:46:07,250
everything into the render list and then

980
00:46:04,219 --> 00:46:09,319
you have at the end someone who sorts

981
00:46:07,250 --> 00:46:11,929
everything together including all the

982
00:46:09,320 --> 00:46:13,039
stuff from the debug system I'm thinking

983
00:46:11,929 --> 00:46:16,098
that the smarter thing to do would be

984
00:46:13,039 --> 00:46:18,440
that sort is actually inside the render

985
00:46:16,099 --> 00:46:19,670
like when you produce a section of the

986
00:46:18,440 --> 00:46:22,190
render code so that when the game

987
00:46:19,670 --> 00:46:24,019
produces it's stuff that's sorted and

988
00:46:22,190 --> 00:46:25,400
then the debug system produces its and

989
00:46:24,019 --> 00:46:27,050
that doesn't really even have to be

990
00:46:25,400 --> 00:46:28,490
sorted potentially we could make it so

991
00:46:27,050 --> 00:46:33,380
the debug system just always draws an

992
00:46:28,489 --> 00:46:35,989
order or does something else who knows

993
00:46:33,380 --> 00:46:38,119
or the debug system also calls disorder

994
00:46:35,989 --> 00:46:41,059
either way I don't care but I think

995
00:46:38,119 --> 00:46:42,380
that's what we want right so I think

996
00:46:41,059 --> 00:46:44,380
what we want to have happen is we want

997
00:46:42,380 --> 00:46:51,289
that sort to happen in a different place

998
00:46:44,380 --> 00:46:53,450
make sense so yeah so okay so that's

999
00:46:51,289 --> 00:46:56,719
what we would like to do and

1000
00:46:53,449 --> 00:46:58,429
unfortunately you know all this stuff is

1001
00:46:56,719 --> 00:47:00,618
not going to happen in the next 10

1002
00:46:58,429 --> 00:47:01,328
minutes necessarily which i think is how

1003
00:47:00,619 --> 00:47:05,410
much time we've got

1004
00:47:01,329 --> 00:47:09,849
but we can do a bunch more stuff with it

1005
00:47:05,409 --> 00:47:11,828
right we can we can do sweet we can get

1006
00:47:09,849 --> 00:47:13,298
ourselves closer so that maybe tomorrow

1007
00:47:11,829 --> 00:47:16,420
we could finish it up and start

1008
00:47:13,298 --> 00:47:20,650
debugging all right so let's start with

1009
00:47:16,420 --> 00:47:23,950
some obvious stuff let's go to render

1010
00:47:20,650 --> 00:47:31,680
group so here's how the render group

1011
00:47:23,949 --> 00:47:31,679
works currently where are you push entry

1012
00:47:36,028 --> 00:47:42,338
push render element so you can see how

1013
00:47:40,150 --> 00:47:43,989
this works right you remember we push at

1014
00:47:42,338 --> 00:47:45,670
the beginning in the end and at the end

1015
00:47:43,989 --> 00:47:49,088
we push sword entries right and they

1016
00:47:45,670 --> 00:47:53,349
kind of stack down in there that's where

1017
00:47:49,088 --> 00:47:55,328
this stuff is right so we know that

1018
00:47:53,349 --> 00:47:56,859
we've got a bunch of sword entries and

1019
00:47:55,329 --> 00:48:00,099
we know that those sword entries exist

1020
00:47:56,858 --> 00:48:02,650
at the end of the list so what we should

1021
00:48:00,099 --> 00:48:06,219
be able to do is we should be able to

1022
00:48:02,650 --> 00:48:08,588
sort those sort of individually right

1023
00:48:06,219 --> 00:48:11,369
meaning if what's currently happening is

1024
00:48:08,588 --> 00:48:26,048
a relatively straightforward process of

1025
00:48:11,369 --> 00:48:28,979
ok here is the element data and here is

1026
00:48:26,048 --> 00:48:28,978
the sort data

1027
00:48:29,690 --> 00:48:35,760
we've filled up this buffer and now all

1028
00:48:33,059 --> 00:48:39,570
we really need to do is replace this

1029
00:48:35,760 --> 00:48:42,180
sort data with the actual order we want

1030
00:48:39,570 --> 00:48:45,990
to draw things in right but we can do

1031
00:48:42,179 --> 00:48:49,440
that at any time there's no reason we

1032
00:48:45,989 --> 00:48:51,239
have to do that you know there's no

1033
00:48:49,440 --> 00:48:53,849
reason we have to wait I guess is what

1034
00:48:51,239 --> 00:48:56,339
I'm saying because here's like the game

1035
00:48:53,849 --> 00:49:04,049
sort data right and here's the debug

1036
00:48:56,340 --> 00:49:06,809
sort data and there's no reason we have

1037
00:49:04,050 --> 00:49:10,019
to wait on those right we can produce

1038
00:49:06,809 --> 00:49:12,750
multiple ones of these and then run them

1039
00:49:10,019 --> 00:49:17,610
right weekends week that's well within

1040
00:49:12,750 --> 00:49:21,119
our ability to do and so that seems like

1041
00:49:17,610 --> 00:49:24,240
a reasonable idea to me the other thing

1042
00:49:21,119 --> 00:49:26,779
we could do and I'll have to think about

1043
00:49:24,239 --> 00:49:33,269
this but the other thing we could do is

1044
00:49:26,780 --> 00:49:35,310
not actually we could think of these as

1045
00:49:33,269 --> 00:49:38,070
being more separate so we could have

1046
00:49:35,309 --> 00:49:40,019
like to push buffers or something where

1047
00:49:38,070 --> 00:49:43,800
we push in elements and then sort data

1048
00:49:40,019 --> 00:49:44,969
and then sort data you know the element

1049
00:49:43,800 --> 00:49:47,220
buffer just towards everything that

1050
00:49:44,969 --> 00:49:49,319
we're going to need to draw these kind

1051
00:49:47,219 --> 00:49:53,129
of get baked down into lists or i should

1052
00:49:49,320 --> 00:49:55,530
say arrays of indices back into the

1053
00:49:53,130 --> 00:49:57,690
element data and those arrays of indices

1054
00:49:55,530 --> 00:49:59,820
are what we then pass down to draw and

1055
00:49:57,690 --> 00:50:04,280
we have one for the game you know and

1056
00:49:59,820 --> 00:50:09,140
one for the debug and so I'm not sure

1057
00:50:04,280 --> 00:50:09,140
I'm not sure how I want this to go

1058
00:50:19,559 --> 00:50:23,279
think about that a little bit

1059
00:50:25,539 --> 00:50:32,289
it would seem to me that either way

1060
00:50:30,639 --> 00:50:34,509
we're going to need some sort of

1061
00:50:32,289 --> 00:50:37,329
additional information here because for

1062
00:50:34,510 --> 00:50:39,550
example if you have multiple people who

1063
00:50:37,329 --> 00:50:41,110
all pushed into this buffer and you're

1064
00:50:39,550 --> 00:50:43,660
saying we're not going to sort these

1065
00:50:41,110 --> 00:50:46,539
guys against each other then you end up

1066
00:50:43,659 --> 00:50:48,819
in a circumstance certainly where the

1067
00:50:46,539 --> 00:50:51,239
you'd at least have to say that this

1068
00:50:48,820 --> 00:50:53,920
stuff gets drawn on top of this stuff

1069
00:50:51,239 --> 00:50:57,279
right because the debug information has

1070
00:50:53,920 --> 00:51:00,039
to be drawn on top of the game and so if

1071
00:50:57,280 --> 00:51:02,910
they didn't get sorted together you know

1072
00:51:00,039 --> 00:51:02,909
you would end up in that situation

1073
00:51:27,840 --> 00:51:42,039
I'm not sure what I want to do about

1074
00:51:30,039 --> 00:51:47,289
that I would say that the other thing

1075
00:51:42,039 --> 00:51:51,250
and it's not really obvious to me why we

1076
00:51:47,289 --> 00:51:55,000
didn't already do this is I'm not sure

1077
00:51:51,250 --> 00:51:56,860
why we don't draw in two passes like the

1078
00:51:55,000 --> 00:51:59,170
other way to do this is we just draw the

1079
00:51:56,860 --> 00:52:01,240
game data once in the debug data in the

1080
00:51:59,170 --> 00:52:02,769
second pass and maybe the reason we

1081
00:52:01,239 --> 00:52:06,489
didn't do that is because we wanted to

1082
00:52:02,769 --> 00:52:10,800
be able to integrate debug elements into

1083
00:52:06,489 --> 00:52:10,799
the game so that they sort inside I

1084
00:52:14,519 --> 00:52:19,750
don't know that that makes a whole lot

1085
00:52:16,599 --> 00:52:21,159
of sense as a as a goal though so you

1086
00:52:19,750 --> 00:52:22,480
know do you see kind of what I'm saying

1087
00:52:21,159 --> 00:52:24,190
there where I feel like we could do

1088
00:52:22,480 --> 00:52:30,309
something where we just do begin and end

1089
00:52:24,190 --> 00:52:41,980
pair and then begin an n pair in a way

1090
00:52:30,309 --> 00:52:43,059
that's cleaner than that you know hmm so

1091
00:52:41,980 --> 00:52:44,909
let me just kind of make that a little

1092
00:52:43,059 --> 00:52:47,259
bit more directly illustrative for you

1093
00:52:44,909 --> 00:52:48,429
so I guess what I'm saying here is if

1094
00:52:47,260 --> 00:52:53,010
you take a look at what happens with the

1095
00:52:48,429 --> 00:52:53,009
win32 stuff you can see that we have

1096
00:52:55,829 --> 00:52:59,829
let's go ahead and drop the runner

1097
00:52:58,119 --> 00:53:02,409
commands you can see here that we make

1098
00:52:59,829 --> 00:53:06,130
our render commands right and we come

1099
00:53:02,409 --> 00:53:07,839
through here and we give the game the

1100
00:53:06,130 --> 00:53:10,390
ability to add to those render commands

1101
00:53:07,840 --> 00:53:14,110
there's nothing to stop us from right

1102
00:53:10,389 --> 00:53:18,960
here issuing those render commands right

1103
00:53:14,110 --> 00:53:25,980
and then creating another one of these

1104
00:53:18,960 --> 00:53:25,980
that we then have occur down here

1105
00:53:27,960 --> 00:53:44,608
right where is it right here so I don't

1106
00:53:38,849 --> 00:53:45,900
know let's take a look inside I would

1107
00:53:44,608 --> 00:53:58,710
like to know what what is the clip

1108
00:53:45,900 --> 00:54:01,190
memory used for I'm just curious like

1109
00:53:58,710 --> 00:54:04,019
where do we actually use clip memory

1110
00:54:01,190 --> 00:54:12,300
because we pass clip memory when we call

1111
00:54:04,019 --> 00:54:14,219
win32 play buffer and window like

1112
00:54:12,300 --> 00:54:16,320
there's clip memory and we do linearized

1113
00:54:14,219 --> 00:54:20,399
clip Rex there so okay so we're just

1114
00:54:16,320 --> 00:54:21,690
pulling stuff out of of we're just

1115
00:54:20,400 --> 00:54:25,320
trying to make a linear version of the

1116
00:54:21,690 --> 00:54:29,460
clip Rex so that that is also something

1117
00:54:25,320 --> 00:54:32,460
that could have been done by the other

1118
00:54:29,460 --> 00:54:34,230
code right so there's just a lot of

1119
00:54:32,460 --> 00:54:35,940
leakage here where we're getting stuff

1120
00:54:34,230 --> 00:54:37,199
out into the platform layer that doesn't

1121
00:54:35,940 --> 00:54:38,250
really need to be there and just because

1122
00:54:37,199 --> 00:54:40,409
it's more convenient to do it that way

1123
00:54:38,250 --> 00:54:41,880
the time which is fine but like I said

1124
00:54:40,409 --> 00:54:44,279
this is kind of a situation where I'm

1125
00:54:41,880 --> 00:54:47,300
thinking to myself do I want to take a

1126
00:54:44,280 --> 00:54:49,680
step here and smooth that out where

1127
00:54:47,300 --> 00:54:52,470
we're that's actually done in the platen

1128
00:54:49,679 --> 00:54:54,289
the platform independent layer and so

1129
00:54:52,469 --> 00:54:59,250
that we have the sort and the linearize

1130
00:54:54,289 --> 00:55:03,838
happen there and then the game code is

1131
00:54:59,250 --> 00:55:05,849
only responsible for doing the the basic

1132
00:55:03,838 --> 00:55:09,570
operation of iterator of the draw list

1133
00:55:05,849 --> 00:55:10,980
and i think i do i think i do so i think

1134
00:55:09,570 --> 00:55:13,019
what i'm going to do is when a doctor i

1135
00:55:10,980 --> 00:55:15,838
do that right now because i think that's

1136
00:55:13,019 --> 00:55:17,969
going to be too much probably for right

1137
00:55:15,838 --> 00:55:22,409
now so what I'm going to do instead is

1138
00:55:17,969 --> 00:55:26,639
I'm gonna probably go ahead and and and

1139
00:55:22,409 --> 00:55:30,069
leave this mmm a little bit gimped at

1140
00:55:26,639 --> 00:55:39,029
the moment let's see here

1141
00:55:30,070 --> 00:55:43,890
push oops where is my push there it is

1142
00:55:39,030 --> 00:55:43,890
so I'm going to go ahead and and do my

1143
00:55:50,880 --> 00:55:56,079
make sure that works and then when we

1144
00:55:54,130 --> 00:56:07,210
call sort entries here I'll just pass 0

1145
00:55:56,079 --> 00:56:10,179
and this will just be well I guess it's

1146
00:56:07,210 --> 00:56:14,610
actually move this into plot from civic

1147
00:56:10,179 --> 00:56:20,049
fair protect you know what I could do

1148
00:56:14,610 --> 00:56:21,519
let's do that so now I think actually

1149
00:56:20,050 --> 00:56:24,370
we'd still run and our entries just

1150
00:56:21,519 --> 00:56:26,769
won't be sorted so there you go all

1151
00:56:24,369 --> 00:56:27,849
right so we won't crash so I think I'm

1152
00:56:26,769 --> 00:56:29,380
going to end it there and then what I'm

1153
00:56:27,849 --> 00:56:31,029
gonna do tomorrow is I'm going to move

1154
00:56:29,380 --> 00:56:33,910
that stuff inside and we'll keep the

1155
00:56:31,030 --> 00:56:37,330
sorting inside and then we will go ahead

1156
00:56:33,909 --> 00:56:38,799
and finish up our graph stuff and yeah

1157
00:56:37,329 --> 00:56:41,860
and that I think will be good so let's

1158
00:56:38,800 --> 00:56:44,280
go ahead and go to the QA case anyone

1159
00:56:41,860 --> 00:56:44,280
has any

1160
00:57:10,059 --> 00:57:15,519
questions does anyone have questions

1161
00:57:49,829 --> 00:57:54,180
was enabled did you discuss why you are

1162
00:57:52,498 --> 00:57:57,659
using recursion and any concerns with

1163
00:57:54,179 --> 00:58:00,419
stack overflows yes actually when I type

1164
00:57:57,659 --> 00:58:02,909
that in I said we probably won't use

1165
00:58:00,420 --> 00:58:04,409
recursion actually so the recursion is

1166
00:58:02,909 --> 00:58:09,989
just there because it's the easiest one

1167
00:58:04,409 --> 00:58:11,759
to see first but I don't know that I'm

1168
00:58:09,989 --> 00:58:14,429
necessarily concerned with stack

1169
00:58:11,759 --> 00:58:16,380
overflow I'm more concerned about the

1170
00:58:14,429 --> 00:58:20,669
performance overhead because I've had

1171
00:58:16,380 --> 00:58:22,979
bad experiences in the past with relying

1172
00:58:20,670 --> 00:58:24,989
on recursive functions they just they

1173
00:58:22,978 --> 00:58:27,208
take longer than you'd think they would

1174
00:58:24,989 --> 00:58:28,769
or maybe I shouldn't said they take as

1175
00:58:27,208 --> 00:58:30,719
long as you would think there's an extra

1176
00:58:28,768 --> 00:58:33,358
function call every essentially

1177
00:58:30,719 --> 00:58:38,099
iteration of a loop which is just a ton

1178
00:58:33,358 --> 00:58:44,009
of wasted work right and so I would say

1179
00:58:38,099 --> 00:58:46,259
that my my inclination is that there

1180
00:58:44,009 --> 00:58:49,259
will probably be enough fussing around

1181
00:58:46,259 --> 00:58:52,789
in here that we will not want to use a

1182
00:58:49,259 --> 00:58:52,789
recursive function for traversing

1183
00:59:03,949 --> 00:59:08,819
Brian wag working with grass can be

1184
00:59:07,230 --> 00:59:10,440
difficult do you have any techniques for

1185
00:59:08,820 --> 00:59:12,090
debugging them other than observing

1186
00:59:10,440 --> 00:59:17,340
screen renders or is that mostly

1187
00:59:12,090 --> 00:59:20,430
sufficient um so I guess what I would

1188
00:59:17,340 --> 00:59:23,519
say is in this case the out what we're

1189
00:59:20,429 --> 00:59:25,559
doing is is pretty straightforward so

1190
00:59:23,519 --> 00:59:28,860
it's possible that we'll be able to do

1191
00:59:25,559 --> 00:59:31,500
it with just with just observing screen

1192
00:59:28,860 --> 00:59:34,559
renders but I would say no in general

1193
00:59:31,500 --> 00:59:36,420
that is not sufficient so it might be

1194
00:59:34,559 --> 00:59:38,849
sufficient this time around I don't know

1195
00:59:36,420 --> 00:59:40,680
that it would be sufficient most of the

1196
00:59:38,849 --> 00:59:42,150
time certainly I've had times when graph

1197
00:59:40,679 --> 00:59:44,639
things are more complicated and it's not

1198
00:59:42,150 --> 00:59:46,200
sufficient and what I can say is there's

1199
00:59:44,639 --> 00:59:47,129
typically two approaches there one is

1200
00:59:46,199 --> 00:59:51,960
you just make something that draws a

1201
00:59:47,130 --> 00:59:54,720
graph yourself so you can watch it and

1202
00:59:51,960 --> 00:59:56,550
the other one is that you dumped to a

1203
00:59:54,719 --> 01:00:02,250
data format and then feed it into a

1204
00:59:56,550 --> 01:00:05,490
graph drawing tool right and so you know

1205
01:00:02,250 --> 01:00:08,519
if we end up in having trouble debugging

1206
01:00:05,489 --> 01:00:11,719
our graph stuff will employ something

1207
01:00:08,519 --> 01:00:14,759
like this one of one of those techniques

1208
01:00:11,719 --> 01:00:18,059
if we don't we won't but yeah I would

1209
01:00:14,760 --> 01:00:20,250
say that it depends on what you're doing

1210
01:00:18,059 --> 01:00:22,590
the techniques that I'm contemplating

1211
01:00:20,250 --> 01:00:24,510
using here aren't that complicated so we

1212
01:00:22,590 --> 01:00:27,240
might not ever run into a circumstance

1213
01:00:24,510 --> 01:00:29,370
complicated enough to warrant more

1214
01:00:27,239 --> 01:00:30,659
advanced grafton buggin techniques but

1215
01:00:29,369 --> 01:00:32,639
if you're doing complex things with

1216
01:00:30,659 --> 01:00:36,779
graphs you often can run into that for

1217
01:00:32,639 --> 01:00:40,039
sure and it is not and you typically do

1218
01:00:36,780 --> 01:00:40,040
need a visualization for that

1219
01:00:45,318 --> 01:00:52,639
Rome says did we address the possibility

1220
01:00:47,818 --> 01:00:55,889
for intersecting sprites we won't allow

1221
01:00:52,639 --> 01:01:00,389
intersecting sprites so that's just

1222
01:00:55,889 --> 01:01:02,038
considered not a thing right meaning if

1223
01:01:00,389 --> 01:01:05,179
sprites intersect whatever happens

1224
01:01:02,039 --> 01:01:05,180
happens to them as far as I'm concerned

1225
01:01:10,010 --> 01:01:14,730
Lumine Ian when I code I use the mass a

1226
01:01:12,869 --> 01:01:16,260
lot you seem to be using a lot of

1227
01:01:14,730 --> 01:01:18,409
shortcuts to jump here and there could

1228
01:01:16,260 --> 01:01:22,650
you tell me more about your shortcuts

1229
01:01:18,409 --> 01:01:28,858
yeah I think I documented them all on

1230
01:01:22,650 --> 01:01:31,528
the four coder stream I mean basically

1231
01:01:28,858 --> 01:01:35,548
if you if you have pre-ordered handmade

1232
01:01:31,528 --> 01:01:37,829
hero in the source code inside the

1233
01:01:35,548 --> 01:01:40,858
source code zips they're actually all in

1234
01:01:37,829 --> 01:01:50,880
there too for kodir casey has them all

1235
01:01:40,858 --> 01:01:52,679
they're right here whereas here it is so

1236
01:01:50,880 --> 01:02:00,289
like these are these are all the

1237
01:01:52,679 --> 01:02:00,288
shortcuts and what they're bound to

1238
01:02:01,690 --> 01:02:09,369
do you know the dev Gary Numan no I

1239
01:02:05,570 --> 01:02:09,370
don't think I do

1240
01:02:39,980 --> 01:02:46,340
yeah Sean I'm sort of snooping the chat

1241
01:02:43,949 --> 01:02:48,960
right now since there are no questions I

1242
01:02:46,340 --> 01:02:51,600
really wish razor would not make you

1243
01:02:48,960 --> 01:02:53,309
have an account I wish the drivers were

1244
01:02:51,599 --> 01:02:54,960
just on the stupid web page and you

1245
01:02:53,309 --> 01:02:59,070
could download them easily and all that

1246
01:02:54,960 --> 01:03:00,599
sort of stuff but yeah I've been meaning

1247
01:02:59,070 --> 01:03:03,720
to tweet at them about that because i

1248
01:03:00,599 --> 01:03:13,349
really like their hardware what's that

1249
01:03:03,719 --> 01:03:15,449
shirt this this is this is a vowel it's

1250
01:03:13,349 --> 01:03:21,750
a cool owl it was given to me by my

1251
01:03:15,449 --> 01:03:24,480
friend Matt Cornell he's given me the

1252
01:03:21,750 --> 01:03:28,139
only I only have two cool shirts and

1253
01:03:24,480 --> 01:03:29,969
this is one of them and Matt actually

1254
01:03:28,139 --> 01:03:32,909
gave me both of them the other one is a

1255
01:03:29,969 --> 01:03:37,319
is a blue shell from mario kart but done

1256
01:03:32,909 --> 01:03:41,239
in the style of a da Vinci look at like

1257
01:03:37,320 --> 01:03:41,240
a Da Vinci uber weapon sketch

1258
01:03:59,769 --> 01:04:09,449
all right there's no more puke Owens I

1259
01:04:02,380 --> 01:04:13,300
will wind it down I will bind it down

1260
01:04:09,449 --> 01:04:14,469
and you know what I should do to since

1261
01:04:13,300 --> 01:04:17,410
we have a little extra timer I should

1262
01:04:14,469 --> 01:04:19,629
download the new version of Milton so

1263
01:04:17,409 --> 01:04:22,359
maybe I'll do that as soon as I wrap up

1264
01:04:19,630 --> 01:04:23,590
here all right thank you everyone for

1265
01:04:22,360 --> 01:04:24,970
joining me for an episode of handmade

1266
01:04:23,590 --> 01:04:26,920
hero it's and a pleasure coding with you

1267
01:04:24,969 --> 01:04:28,209
as always if you would like to follow

1268
01:04:26,920 --> 01:04:29,950
along at home you can always pro2 the

1269
01:04:28,210 --> 01:04:34,030
game on handmade hero or get comes with

1270
01:04:29,949 --> 01:04:35,639
a source code even as we develop it you

1271
01:04:34,030 --> 01:04:37,630
can also go to our forum site which has

1272
01:04:35,639 --> 01:04:39,489
questions and answers and all kinds of

1273
01:04:37,630 --> 01:04:41,079
good stuff like that we have a patreon

1274
01:04:39,489 --> 01:04:43,239
page and go do from a sport the video

1275
01:04:41,079 --> 01:04:44,259
series a schedule bot you can go to if

1276
01:04:43,239 --> 01:04:46,839
you want to know when we're going to be

1277
01:04:44,260 --> 01:04:49,510
live in a Saudi I'd for trying to catch

1278
01:04:46,840 --> 01:04:52,360
up on old parts of the series if you're

1279
01:04:49,510 --> 01:04:53,920
if you're coming in New that's about it

1280
01:04:52,360 --> 01:04:58,000
for today I will be back here tomorrow

1281
01:04:53,920 --> 01:04:59,829
at eight tomorrow 8pm pacific daylight

1282
01:04:58,000 --> 01:05:02,289
time hope see you all here for that

1283
01:04:59,829 --> 01:05:03,699
until then have fun programming and I'll

1284
01:05:02,289 --> 01:05:06,059
see you guys on the internet take it

1285
01:05:03,699 --> 01:05:06,059
easy everyone

