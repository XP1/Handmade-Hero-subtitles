1
00:00:01,520 --> 00:00:06,359
hello everybody and welcome to handmade

2
00:00:04,290 --> 00:00:09,000
Hero show we code a complete game live

3
00:00:06,359 --> 00:00:14,309
on stream we may take a brief digression

4
00:00:09,000 --> 00:00:18,089
here at the opening of of handmade hero

5
00:00:14,308 --> 00:00:19,589
because we wanted to see last night I

6
00:00:18,089 --> 00:00:21,750
was playing children of Merida which

7
00:00:19,589 --> 00:00:23,339
came out recently and one of the things

8
00:00:21,750 --> 00:00:26,969
that I noticed a lot of times when I

9
00:00:23,339 --> 00:00:30,528
play at least unity games that are pixel

10
00:00:26,969 --> 00:00:33,179
art games they have this this sort of

11
00:00:30,528 --> 00:00:36,269
problem where the shaders are not

12
00:00:33,179 --> 00:00:38,429
written properly I don't know if this is

13
00:00:36,270 --> 00:00:40,170
just a problem with unity or what the

14
00:00:38,429 --> 00:00:43,890
problem is exactly like why they don't

15
00:00:40,170 --> 00:00:46,289
have proper shaders but basically what

16
00:00:43,890 --> 00:00:50,308
ends up happening is you don't actually

17
00:00:46,289 --> 00:00:52,500
get to see the pixel art in all of its

18
00:00:50,308 --> 00:00:56,339
beautiful glory because they haven't

19
00:00:52,500 --> 00:01:01,980
done sub pixel sampling of the pixel art

20
00:00:56,340 --> 00:01:05,728
itself so it's it's really kind of it's

21
00:01:01,979 --> 00:01:08,250
really kind of sad because it's

22
00:01:05,728 --> 00:01:10,950
literally just a little bit of change to

23
00:01:08,250 --> 00:01:15,329
a shader and you get way better results

24
00:01:10,950 --> 00:01:19,350
than you would have gotten if you you

25
00:01:15,329 --> 00:01:21,658
know if you do it the way that it

26
00:01:19,349 --> 00:01:23,188
happens in unity so I was curious to

27
00:01:21,659 --> 00:01:25,859
take a look at that today so I thought

28
00:01:23,188 --> 00:01:28,258
what we might do today is just play with

29
00:01:25,859 --> 00:01:30,180
insight a little to see I don't know if

30
00:01:28,259 --> 00:01:32,099
we can but I figured it might just be

31
00:01:30,180 --> 00:01:34,350
fun as something we don't normally do on

32
00:01:32,099 --> 00:01:36,449
handmade hero to do a little reverse

33
00:01:34,349 --> 00:01:39,059
engineering potentially to see if

34
00:01:36,450 --> 00:01:41,609
there's any way we could fix the shaders

35
00:01:39,060 --> 00:01:44,040
in children of morta without actually

36
00:01:41,609 --> 00:01:48,299
having access to the source code to make

37
00:01:44,040 --> 00:01:51,000
it so that it was actually rendering the

38
00:01:48,299 --> 00:01:54,630
pixel art properly kind of try and fix

39
00:01:51,000 --> 00:01:57,299
unities code for them I don't know maybe

40
00:01:54,629 --> 00:01:59,129
I should ask them to pay me but what I'd

41
00:01:57,299 --> 00:02:01,590
like to do is just see if that's at all

42
00:01:59,129 --> 00:02:03,658
possible so the first thing I'm going to

43
00:02:01,590 --> 00:02:07,079
do here is just see if it's possible to

44
00:02:03,659 --> 00:02:08,819
attach n sight to a running Unity game

45
00:02:07,078 --> 00:02:11,068
and get anything meaningful out of it

46
00:02:08,818 --> 00:02:12,988
now I'm going to kind of explain how

47
00:02:11,068 --> 00:02:13,769
this works and if nothing else if this

48
00:02:12,989 --> 00:02:15,270
part works

49
00:02:13,770 --> 00:02:17,939
well at least get to show how to

50
00:02:15,270 --> 00:02:19,530
deconstruct a games rendering pipeline

51
00:02:17,939 --> 00:02:21,859
which i think is interesting anyway

52
00:02:19,530 --> 00:02:26,640
because it's a good thing for people to

53
00:02:21,860 --> 00:02:28,230
know how to to do in general because you

54
00:02:26,639 --> 00:02:30,989
can learn things about graphics

55
00:02:28,229 --> 00:02:32,669
programming and how people accomplish

56
00:02:30,990 --> 00:02:33,900
certain things a game like children of

57
00:02:32,669 --> 00:02:35,819
mordor probably isn't one you'd normally

58
00:02:33,900 --> 00:02:38,129
do because it's not really a graphics

59
00:02:35,819 --> 00:02:41,009
game but you know if you have something

60
00:02:38,129 --> 00:02:42,990
like the latest Unreal Engine game on

61
00:02:41,009 --> 00:02:44,609
your machine and you're playing it

62
00:02:42,990 --> 00:02:45,420
you're like wow how did they do those

63
00:02:44,610 --> 00:02:47,670
graphic effects

64
00:02:45,419 --> 00:02:50,669
well reverse engineering the graphics is

65
00:02:47,669 --> 00:02:53,639
something that is a very easy way to go

66
00:02:50,669 --> 00:02:56,399
look at how they're accomplishing the

67
00:02:53,639 --> 00:02:59,069
rendering passes that that they do to

68
00:02:56,400 --> 00:03:00,750
create those effects that you see so

69
00:02:59,069 --> 00:03:03,930
what I'm gonna do is I'm just gonna

70
00:03:00,750 --> 00:03:05,909
launch the game as I normally would so

71
00:03:03,930 --> 00:03:09,840
I'm gonna go ahead and see if I can just

72
00:03:05,909 --> 00:03:11,639
launch it here directly it looks like I

73
00:03:09,840 --> 00:03:14,849
can't so I may have to just run it

74
00:03:11,639 --> 00:03:24,209
through Steam yeah so I'm gonna go ahead

75
00:03:14,849 --> 00:03:26,129
and run steam here or try to there it is

76
00:03:24,210 --> 00:03:31,980
so my Steam is now running I'm gonna

77
00:03:26,129 --> 00:03:38,129
click on children of morta and have it

78
00:03:31,979 --> 00:03:43,739
run and then what I'm gonna do is once

79
00:03:38,129 --> 00:03:48,780
it's running I'm gonna try to get to a

80
00:03:43,740 --> 00:03:51,080
point where I can see sort of the the

81
00:03:48,780 --> 00:03:53,699
issues with the pixel art happening

82
00:03:51,080 --> 00:03:55,290
which may be hard for you to see because

83
00:03:53,699 --> 00:04:01,679
the video compressor on Twitch

84
00:03:55,289 --> 00:04:03,509
compresses it into a real mush but but

85
00:04:01,680 --> 00:04:05,250
hopefully I can get to a point where you

86
00:04:03,509 --> 00:04:08,849
know at least I can see it hopefully you

87
00:04:05,250 --> 00:04:11,419
can see it too and then we're gonna go

88
00:04:08,849 --> 00:04:11,419
ahead and take a look

89
00:04:17,560 --> 00:04:22,870
all right I don't know if we can

90
00:04:19,220 --> 00:04:22,870
actually skip this I hope so

91
00:04:24,569 --> 00:04:28,529
all right I don't know if we can skip it

92
00:04:27,149 --> 00:04:31,169
so I'm gonna go ahead here and while

93
00:04:28,529 --> 00:04:35,729
that's playing in the background I'm

94
00:04:31,170 --> 00:04:40,199
gonna go ahead and open up insight all

95
00:04:35,730 --> 00:04:45,180
right Margot awoke startled a cold sweat

96
00:04:40,199 --> 00:04:48,899
clinging to her she gathered her

97
00:04:45,180 --> 00:04:50,900
thoughts I guess this is a fine location

98
00:04:48,899 --> 00:04:53,948
for it

99
00:04:50,899 --> 00:04:56,888
[Music]

100
00:04:53,949 --> 00:04:58,900
I really don't want to watch just

101
00:04:56,889 --> 00:05:02,370
cutscene but I can't find any way to go

102
00:04:58,899 --> 00:05:02,370
there to school to be like there we go

103
00:05:05,819 --> 00:05:15,009
that's what I wanted so you can see I

104
00:05:13,990 --> 00:05:17,079
don't know if you can see it but there's

105
00:05:15,009 --> 00:05:20,580
all kinds of artifacting just as I'm

106
00:05:17,079 --> 00:05:24,639
like zooming in it's super artifacting

107
00:05:20,579 --> 00:05:27,038
and in fact I want to say I think we

108
00:05:24,639 --> 00:05:29,889
might actually be seeing it just in the

109
00:05:27,038 --> 00:05:31,949
I can just move the mouse and see it but

110
00:05:29,889 --> 00:05:34,210
I think probably if they're doing this

111
00:05:31,949 --> 00:05:38,139
procedurally meaning they're moving like

112
00:05:34,209 --> 00:05:39,968
this a actual which we'll be able to see

113
00:05:38,139 --> 00:05:42,158
when we deconstruct the frame when we

114
00:05:39,968 --> 00:05:45,848
when it's moving like this we'll be able

115
00:05:42,158 --> 00:05:47,649
to see the pixel problems in here I can

116
00:05:45,848 --> 00:05:49,569
see them right now hopefully you can't -

117
00:05:47,649 --> 00:05:52,778
where it's just like stuttering across

118
00:05:49,569 --> 00:05:55,120
pixels and you can also see the sort of

119
00:05:52,778 --> 00:05:58,209
shimmering that happens as I move around

120
00:05:55,120 --> 00:06:00,509
the mouse because all of the background

121
00:05:58,209 --> 00:06:03,158
is also being sampled improperly as well

122
00:06:00,509 --> 00:06:04,538
again don't know if I'll be able to help

123
00:06:03,158 --> 00:06:07,088
with any of this because I only have a

124
00:06:04,538 --> 00:06:09,788
limited ability to do so doing reverse

125
00:06:07,088 --> 00:06:11,769
engineering but what I'm going to do is

126
00:06:09,788 --> 00:06:13,389
just going to end site and anyone could

127
00:06:11,769 --> 00:06:15,098
download insight you can literally we've

128
00:06:13,389 --> 00:06:18,129
done it on the m8 here oh we downloaded

129
00:06:15,098 --> 00:06:19,300
it live I think so if you don't know how

130
00:06:18,129 --> 00:06:20,468
to do that you can look for my stream on

131
00:06:19,300 --> 00:06:22,838
it but really all you have to do is just

132
00:06:20,468 --> 00:06:24,370
go to Nvidia's website they actually got

133
00:06:22,838 --> 00:06:25,838
rid of the having to have an account

134
00:06:24,370 --> 00:06:29,288
which is awesome so you can go to

135
00:06:25,838 --> 00:06:32,168
invidious website you can go to the

136
00:06:29,288 --> 00:06:35,978
insight page just type in Nvidia insight

137
00:06:32,168 --> 00:06:37,750
on like Google or something download it

138
00:06:35,978 --> 00:06:39,699
as long as you have the your drivers

139
00:06:37,750 --> 00:06:40,810
up-to-date it should just work you

140
00:06:39,699 --> 00:06:42,968
should be able just launch it like I

141
00:06:40,810 --> 00:06:45,939
have it here and then we're gonna create

142
00:06:42,968 --> 00:06:48,189
a new project and just hit OK and then

143
00:06:45,939 --> 00:06:50,259
we're gonna try now you look at here

144
00:06:48,189 --> 00:06:51,729
again I'll try to explain this in a sort

145
00:06:50,259 --> 00:06:53,408
of a beginner friendly way so don't know

146
00:06:51,728 --> 00:06:55,149
who might watch the stream about reverse

147
00:06:53,408 --> 00:06:57,278
engineering at some point what we're

148
00:06:55,149 --> 00:06:59,860
doing here is insight is essentially a

149
00:06:57,278 --> 00:07:02,139
utility that allows us to capture what a

150
00:06:59,860 --> 00:07:04,180
application is sending to the graphics

151
00:07:02,139 --> 00:07:06,550
card right because it has to send it

152
00:07:04,180 --> 00:07:07,540
through known EPISD through the 11-12

153
00:07:06,550 --> 00:07:08,949
OpenGL

154
00:07:07,540 --> 00:07:10,270
Volken right you can see them right here

155
00:07:08,949 --> 00:07:14,310
these are the ones that might be running

156
00:07:10,269 --> 00:07:17,139
on Windows what this app allows to do is

157
00:07:14,310 --> 00:07:19,060
insert ourselves into that pipeline and

158
00:07:17,139 --> 00:07:21,969
capture the commands that were sent via

159
00:07:19,060 --> 00:07:24,189
OpenGL or D 3d or whatever it was right

160
00:07:21,970 --> 00:07:25,930
now there's two ways we can do it one is

161
00:07:24,189 --> 00:07:27,730
we can launch the executable ourselves

162
00:07:25,930 --> 00:07:30,879
right I can put children of morta in

163
00:07:27,730 --> 00:07:32,830
here as an executable and launch it via

164
00:07:30,879 --> 00:07:36,550
insight insight will then run the exe

165
00:07:32,829 --> 00:07:37,899
and capture it that way I'm not going to

166
00:07:36,550 --> 00:07:39,189
do that this time the reason I'm not

167
00:07:37,899 --> 00:07:42,099
going to do that is because children

168
00:07:39,189 --> 00:07:44,110
morta is a steam application the way

169
00:07:42,100 --> 00:07:46,510
that I have it installed now I bought it

170
00:07:44,110 --> 00:07:48,460
on Steam so it runs through Steam what

171
00:07:46,509 --> 00:07:51,670
that means is although the children of

172
00:07:48,459 --> 00:07:54,159
Morda executable exists on the actual

173
00:07:51,670 --> 00:07:56,590
hard drive you can go see it it's in the

174
00:07:54,160 --> 00:07:59,740
steam apps directory under you know C

175
00:07:56,589 --> 00:08:01,299
program files steam steamapps or

176
00:07:59,740 --> 00:08:03,430
something like that I don't remember

177
00:08:01,300 --> 00:08:05,319
exactly the path well you know what I'll

178
00:08:03,430 --> 00:08:06,730
show you the path this is this is meant

179
00:08:05,319 --> 00:08:08,349
to be a beginner friendly stream here so

180
00:08:06,730 --> 00:08:12,610
I'll show you I'm talking about if you

181
00:08:08,350 --> 00:08:14,530
actually open up your your okay so say

182
00:08:12,610 --> 00:08:16,090
in x86 if you open up your Program Files

183
00:08:14,529 --> 00:08:18,099
x86 directory you can see there's a

184
00:08:16,089 --> 00:08:20,109
steam directory inside there there's a

185
00:08:18,100 --> 00:08:21,850
steam apps directory inside there

186
00:08:20,110 --> 00:08:26,110
there's a common directory and here's

187
00:08:21,850 --> 00:08:28,030
all your games right so if I go into a

188
00:08:26,110 --> 00:08:30,069
particular game in this case children of

189
00:08:28,029 --> 00:08:32,079
morta you can see that the unity

190
00:08:30,069 --> 00:08:34,450
distribution is just sitting there so

191
00:08:32,080 --> 00:08:37,479
it's not magic I can run it directly

192
00:08:34,450 --> 00:08:40,210
from here right but what typically

193
00:08:37,479 --> 00:08:42,280
happens at the startup of a standard

194
00:08:40,210 --> 00:08:44,740
Steam application if I remember

195
00:08:42,279 --> 00:08:46,600
correctly it's been a while is that the

196
00:08:44,740 --> 00:08:49,299
first thing they do is check to see if

197
00:08:46,600 --> 00:08:52,300
steam is running and if steam is running

198
00:08:49,299 --> 00:08:55,059
they actually thunk back to Steam tell

199
00:08:52,299 --> 00:08:56,919
steam to run them through steam so they

200
00:08:55,059 --> 00:08:58,839
get the overlay the steam overlay in the

201
00:08:56,919 --> 00:09:01,779
communication with friends lists and all

202
00:08:58,840 --> 00:09:04,030
that stuff and then they exit so the

203
00:09:01,779 --> 00:09:06,399
children were to eggsy actually just

204
00:09:04,029 --> 00:09:08,199
becomes a steam launcher that launches

205
00:09:06,399 --> 00:09:10,059
steam and tells steam to run children

206
00:09:08,200 --> 00:09:11,620
amorta okay and that's a little

207
00:09:10,059 --> 00:09:13,479
confusing but you have to remember

208
00:09:11,620 --> 00:09:15,250
players when they run a particular game

209
00:09:13,480 --> 00:09:17,259
and they want to have that Steam

210
00:09:15,250 --> 00:09:18,730
experience right they want to have the

211
00:09:17,259 --> 00:09:20,230
like voice chat and they want to have

212
00:09:18,730 --> 00:09:20,560
the steam friends list and they want to

213
00:09:20,230 --> 00:09:22,329
have

214
00:09:20,559 --> 00:09:25,659
achievements and all this other stuff

215
00:09:22,328 --> 00:09:27,638
that comes with steam and so typically

216
00:09:25,659 --> 00:09:29,438
when there's a steam game it installs an

217
00:09:27,639 --> 00:09:32,259
executable at the front of the

218
00:09:29,438 --> 00:09:35,019
executable it says is steam running is

219
00:09:32,259 --> 00:09:38,649
or is installed in this machine if it is

220
00:09:35,019 --> 00:09:40,629
then just tell send a message to seem to

221
00:09:38,649 --> 00:09:43,389
say run childen amorta and it is exit

222
00:09:40,629 --> 00:09:45,579
right and that ensures that you're

223
00:09:43,389 --> 00:09:47,769
always running a steam game through

224
00:09:45,578 --> 00:09:49,269
steam because that's presumably what the

225
00:09:47,769 --> 00:09:52,389
player wanted otherwise they wouldn't

226
00:09:49,269 --> 00:09:54,730
have bought it on Steam right so just

227
00:09:52,389 --> 00:09:57,188
keep that in mind so the reason that I'm

228
00:09:54,730 --> 00:09:58,720
not going to do the launch here and we

229
00:09:57,188 --> 00:10:00,789
might try it later but the reason I'm

230
00:09:58,720 --> 00:10:02,949
not starting with that is because I'm a

231
00:10:00,789 --> 00:10:04,990
concerned that that won't do anything

232
00:10:02,948 --> 00:10:06,609
basically what will happen is it will

233
00:10:04,990 --> 00:10:08,019
launch the executable and the executable

234
00:10:06,610 --> 00:10:09,850
will just send a message to steam in the

235
00:10:08,019 --> 00:10:10,839
exit and then we'll have children more

236
00:10:09,850 --> 00:10:11,949
to running but we won't be able to

237
00:10:10,839 --> 00:10:14,860
capture it because it's actually a

238
00:10:11,948 --> 00:10:16,628
different instance of that executable so

239
00:10:14,860 --> 00:10:18,610
what I'm going to do instead is use the

240
00:10:16,629 --> 00:10:24,039
second way that you can attach insight

241
00:10:18,610 --> 00:10:25,750
to a process and that is to oh nevermind

242
00:10:24,039 --> 00:10:28,328
I guess so I can't do that only updates

243
00:10:25,750 --> 00:10:31,470
lost from Anniston come here oh well I

244
00:10:28,328 --> 00:10:33,399
guess we could try I was gonna say

245
00:10:31,470 --> 00:10:34,720
hopefully I can attach it here but it

246
00:10:33,399 --> 00:10:36,730
looks like you can't actually do that

247
00:10:34,720 --> 00:10:38,620
within sight or you can't do it anymore

248
00:10:36,730 --> 00:10:39,759
so I can't actually do it that way I'm

249
00:10:38,620 --> 00:10:42,240
gonna have to find a way to actually

250
00:10:39,759 --> 00:10:46,600
launch children of morta directly

251
00:10:42,240 --> 00:10:48,938
without steam being involved we'll try

252
00:10:46,600 --> 00:10:51,670
it it's pretty dicey what I could do is

253
00:10:48,938 --> 00:10:54,759
launch steam through insight that might

254
00:10:51,669 --> 00:10:56,438
work but I don't actually know if it

255
00:10:54,759 --> 00:10:57,818
will so this is gonna be harder than I

256
00:10:56,438 --> 00:10:58,899
thought it was gonna be but we'll give

257
00:10:57,818 --> 00:11:02,558
it a shot

258
00:10:58,899 --> 00:11:05,860
let's go out here and and exit steam and

259
00:11:02,558 --> 00:11:08,139
I must see what I might be able to do in

260
00:11:05,860 --> 00:11:10,750
that regard just to see what we just to

261
00:11:08,139 --> 00:11:12,490
see what we can come up with so the

262
00:11:10,750 --> 00:11:15,159
first thing I'm going to do is I showed

263
00:11:12,490 --> 00:11:17,678
you that that launch directory here I

264
00:11:15,159 --> 00:11:19,870
want to see if I'm right about it

265
00:11:17,678 --> 00:11:22,028
thunking esteem it may or may not do

266
00:11:19,870 --> 00:11:24,129
that I'm not sure but I'm gonna see

267
00:11:22,028 --> 00:11:26,078
first what actually happens so if I

268
00:11:24,129 --> 00:11:28,269
double click on the executable let's see

269
00:11:26,078 --> 00:11:29,979
what goes on here does it try to thunk

270
00:11:28,269 --> 00:11:33,889
through steam or doesn't it and I'm not

271
00:11:29,980 --> 00:11:35,659
sure it looks like it didn't

272
00:11:33,889 --> 00:11:37,458
so I'm hoping that that just means

273
00:11:35,659 --> 00:11:39,319
that's not something that this app will

274
00:11:37,458 --> 00:11:41,028
actually do and if that's the case we're

275
00:11:39,320 --> 00:11:42,050
in luck we don't have to worry about the

276
00:11:41,028 --> 00:11:45,679
thing that I was talking about because

277
00:11:42,049 --> 00:11:47,838
they didn't do it right so I'm just go

278
00:11:45,679 --> 00:11:49,729
ahead and go ahead and try launching

279
00:11:47,839 --> 00:11:51,620
this executable directly so what I'm

280
00:11:49,730 --> 00:11:53,959
doing is pasting in the full path to the

281
00:11:51,620 --> 00:11:55,820
executable here and I'm also gonna

282
00:11:53,958 --> 00:11:57,828
launch it from its directory just in

283
00:11:55,820 --> 00:11:59,540
case it needs that because I don't know

284
00:11:57,828 --> 00:12:01,729
what it's expecting but I'm assuming

285
00:11:59,539 --> 00:12:03,379
that it aspects to be launched in the

286
00:12:01,730 --> 00:12:04,940
directory of its executable we're not

287
00:12:03,379 --> 00:12:06,528
gonna pass any command-line arguments or

288
00:12:04,940 --> 00:12:08,089
set any environment variables because as

289
00:12:06,528 --> 00:12:11,059
far as we know it should just work

290
00:12:08,089 --> 00:12:13,040
hopefully this creates a project for us

291
00:12:11,059 --> 00:12:15,469
right I'm hoping I can just save that

292
00:12:13,039 --> 00:12:17,149
project and save these so that then if

293
00:12:15,470 --> 00:12:18,829
we a crash or something we'll be able to

294
00:12:17,149 --> 00:12:22,578
load it back up and then I'm just gonna

295
00:12:18,828 --> 00:12:27,559
say launch and we're gonna quit we're

296
00:12:22,578 --> 00:12:29,149
just crossing our fingers right so it

297
00:12:27,559 --> 00:12:32,179
looks like it's using something called

298
00:12:29,149 --> 00:12:36,379
child resources which it says it doesn't

299
00:12:32,179 --> 00:12:38,208
necessarily support which is and it also

300
00:12:36,379 --> 00:12:40,850
says I'm toward OS detected so we're

301
00:12:38,208 --> 00:12:45,250
yeah we're I guess we're gonna in a

302
00:12:40,850 --> 00:12:45,250
little bit of a a rough spot here

303
00:12:50,830 --> 00:12:56,680
so it looks like insights very unhappy

304
00:12:53,830 --> 00:12:58,570
with this capture we may have to try

305
00:12:56,679 --> 00:13:02,739
render doc again all we're trying to do

306
00:12:58,570 --> 00:13:04,149
here is just just get a general capture

307
00:13:02,740 --> 00:13:20,549
of this thing it's looking pretty

308
00:13:04,149 --> 00:13:20,549
difficult to do but we'll see

309
00:13:21,870 --> 00:13:28,379
oops I didn't mean to do what I just did

310
00:13:30,580 --> 00:13:35,110
so I'm just gonna try and skip these

311
00:13:32,220 --> 00:13:38,830
cutscenes here I don't know if I can or

312
00:13:35,110 --> 00:13:40,330
can looks like I can I don't know why

313
00:13:38,830 --> 00:13:42,550
sometimes holding escape skips a

314
00:13:40,330 --> 00:13:44,350
cutscene sometimes with death but I

315
00:13:42,549 --> 00:13:46,389
guess I don't care the question is does

316
00:13:44,350 --> 00:13:49,810
the think it's running it doesn't I'll

317
00:13:46,389 --> 00:13:51,610
get the lok startled so it's gonna allow

318
00:13:49,809 --> 00:13:52,959
me to attack because I didn't launches

319
00:13:51,610 --> 00:13:54,669
in here so I'm gonna go ahead and try to

320
00:13:52,960 --> 00:13:56,500
attach a frame debugger to it but I'm

321
00:13:54,669 --> 00:14:00,579
gonna wait till we get to the point

322
00:13:56,500 --> 00:14:02,740
where I actually want to try capture so

323
00:14:00,580 --> 00:14:05,440
we'll see but again not looking

324
00:14:02,740 --> 00:14:10,450
particularly not looking particularly

325
00:14:05,440 --> 00:14:12,070
happy alright so if I can get a frame

326
00:14:10,450 --> 00:14:13,450
capture anywhere in here I'm gonna be

327
00:14:12,070 --> 00:14:16,060
happy so I'm just gonna go ahead and try

328
00:14:13,450 --> 00:14:18,360
and attach it and see we'll see what we

329
00:14:16,059 --> 00:14:18,359
can do

330
00:14:25,120 --> 00:14:33,350
so it looks like it's sort of attached

331
00:14:28,899 --> 00:14:34,970
looks like it don't know but since we've

332
00:14:33,350 --> 00:14:37,430
got an attachment I'm just gonna try it

333
00:14:34,970 --> 00:14:39,080
so I'm using alt tab right now to switch

334
00:14:37,429 --> 00:14:40,759
back and forth and normally if you have

335
00:14:39,080 --> 00:14:42,080
two monitors you would put inside on one

336
00:14:40,759 --> 00:14:44,990
monitor and you put the game on the

337
00:14:42,080 --> 00:14:48,139
other but that's you know all kind of a

338
00:14:44,990 --> 00:14:49,700
separate issue so here is our frame that

339
00:14:48,139 --> 00:14:51,590
we're gonna try and capture what I'm

340
00:14:49,700 --> 00:14:53,120
gonna go and do is go into children ward

341
00:14:51,590 --> 00:14:54,950
I hit frame divider capture for live

342
00:14:53,120 --> 00:14:58,669
analysis and cross my fingers that it's

343
00:14:54,950 --> 00:14:59,870
able to capture any of this stuff even

344
00:14:58,669 --> 00:15:02,089
though it keeps complaining about all

345
00:14:59,870 --> 00:15:05,269
sorts of API errors I don't really know

346
00:15:02,090 --> 00:15:08,720
exactly what that's about but we'll see

347
00:15:05,269 --> 00:15:10,819
so now you can kind of see we've got a

348
00:15:08,720 --> 00:15:13,490
frame capture who knows if it's correct

349
00:15:10,820 --> 00:15:15,980
or not but as we go through here what we

350
00:15:13,490 --> 00:15:19,340
can see is that it did actually capture

351
00:15:15,980 --> 00:15:20,600
a d3 D 11 stream so the first thing we

352
00:15:19,340 --> 00:15:23,060
know about this game is it doesn't use

353
00:15:20,600 --> 00:15:25,250
d3 212 use d3 11 that's just something

354
00:15:23,059 --> 00:15:26,839
we now know that makes sense because

355
00:15:25,250 --> 00:15:29,509
this is a game that probably wouldn't

356
00:15:26,840 --> 00:15:32,509
benefit much from d3 d 12 and d3 a 12

357
00:15:29,509 --> 00:15:35,419
only runs on a subset of systems this

358
00:15:32,509 --> 00:15:37,220
here is if you look at the the different

359
00:15:35,419 --> 00:15:38,839
panels here again trying to make this

360
00:15:37,220 --> 00:15:40,639
somewhat beginner friendly we've done

361
00:15:38,840 --> 00:15:42,860
this on handmade hero so I don't want to

362
00:15:40,639 --> 00:15:45,110
belabor the point too much but what you

363
00:15:42,860 --> 00:15:46,460
can see in this layout is we now have

364
00:15:45,110 --> 00:15:48,050
the ability to kind of look at what's

365
00:15:46,460 --> 00:15:51,710
happening during a frame now this window

366
00:15:48,049 --> 00:15:54,139
here the scrubber view tells me what's

367
00:15:51,710 --> 00:15:56,930
happening in the frame over time and

368
00:15:54,139 --> 00:16:00,319
what you can see is and when I say time

369
00:15:56,929 --> 00:16:03,919
I mean time of a single frames execute a

370
00:16:00,320 --> 00:16:07,160
P eye state right so if you imagine that

371
00:16:03,919 --> 00:16:09,889
this is essentially all of the calls to

372
00:16:07,159 --> 00:16:12,829
the API that have happened and all of

373
00:16:09,889 --> 00:16:15,949
these lines here are ones that actually

374
00:16:12,830 --> 00:16:17,840
issued like a rendering call because

375
00:16:15,950 --> 00:16:20,210
remember graphics API is they typically

376
00:16:17,840 --> 00:16:22,759
set a bunch of state and then do an

377
00:16:20,210 --> 00:16:25,370
issue of a call so you do like set the

378
00:16:22,759 --> 00:16:28,250
viewport set some texturing up and then

379
00:16:25,370 --> 00:16:30,049
like sync a bunch of triangles that sync

380
00:16:28,250 --> 00:16:32,448
a bunch of triangles actually now does

381
00:16:30,049 --> 00:16:34,008
work those previous commands didn't

382
00:16:32,448 --> 00:16:36,438
do any work they were just setting state

383
00:16:34,009 --> 00:16:38,869
up in order to do the work so all of

384
00:16:36,438 --> 00:16:41,149
these empty areas in here are things

385
00:16:38,869 --> 00:16:42,769
that were setting up stuff and all of

386
00:16:41,149 --> 00:16:45,289
these notches are things that actually

387
00:16:42,769 --> 00:16:47,600
did work what this scrubber view lets me

388
00:16:45,289 --> 00:16:50,118
do is jump anywhere that there was work

389
00:16:47,600 --> 00:16:52,249
and see what got rendered so here you

390
00:16:50,119 --> 00:16:55,428
can see rendered some kind of a circular

391
00:16:52,249 --> 00:16:57,769
region and you can see in here the color

392
00:16:55,428 --> 00:17:01,188
buffer I'm not sure what that actually

393
00:16:57,769 --> 00:17:02,989
was if we jump to the end of the frame I

394
00:17:01,188 --> 00:17:05,328
don't know if if there's maybe some kind

395
00:17:02,989 --> 00:17:08,568
of I don't know what's actually there if

396
00:17:05,328 --> 00:17:10,099
I look maybe right before yeah I don't

397
00:17:08,568 --> 00:17:13,459
know if that's some kind of fogging

398
00:17:10,099 --> 00:17:14,838
bloom or something it's hard to say but

399
00:17:13,459 --> 00:17:17,899
what you can see is it's pretty nice as

400
00:17:14,838 --> 00:17:20,509
I jump around here you can see if I

401
00:17:17,898 --> 00:17:22,099
actually expand this out wait so you can

402
00:17:20,509 --> 00:17:24,109
it one of the unfortunate things is it

403
00:17:22,099 --> 00:17:26,509
doesn't subsample these marks well so

404
00:17:24,109 --> 00:17:28,188
there's actually marks you can't see if

405
00:17:26,509 --> 00:17:32,599
you zoomed in more you would see them I

406
00:17:28,189 --> 00:17:39,350
don't know if we kind of zoom in like

407
00:17:32,599 --> 00:17:42,769
this right here you can sort of see

408
00:17:39,349 --> 00:17:44,509
where those actual marks all are so each

409
00:17:42,769 --> 00:17:46,638
of these blue ones is something that

410
00:17:44,509 --> 00:17:49,519
actually synced some some render you

411
00:17:46,638 --> 00:17:51,229
know something that could render so what

412
00:17:49,519 --> 00:17:53,990
it looks like here it looks like they're

413
00:17:51,230 --> 00:17:56,240
rendering some kind of like fog in there

414
00:17:53,990 --> 00:17:59,329
right you can kind of see it happening

415
00:17:56,240 --> 00:18:01,429
if I if I pull back out and maybe get

416
00:17:59,329 --> 00:18:04,278
this window a little bit bigger here so

417
00:18:01,429 --> 00:18:06,559
you can see it you can sort of see as it

418
00:18:04,278 --> 00:18:10,839
comes through all of those render

419
00:18:06,558 --> 00:18:10,839
commands it looks like maybe that's fog

420
00:18:10,960 --> 00:18:20,139
it could also be like texturing ground

421
00:18:13,819 --> 00:18:20,138
passes I'm not sure hard to say

422
00:18:22,430 --> 00:18:31,860
you can see here we're tiling the ground

423
00:18:27,240 --> 00:18:33,509
with stuff there I guess not sure where

424
00:18:31,859 --> 00:18:35,579
we lay down the actual ground splats

425
00:18:33,509 --> 00:18:37,369
okay so those are ground splats so you

426
00:18:35,579 --> 00:18:40,199
can kind of see what's happening I guess

427
00:18:37,369 --> 00:18:43,169
this right here laid down a base coat on

428
00:18:40,200 --> 00:18:45,360
the ground it looks like and now we're

429
00:18:43,170 --> 00:18:48,240
splatting down ground textures if I go

430
00:18:45,359 --> 00:18:50,809
ahead and and take a look at this guy I

431
00:18:48,240 --> 00:18:53,720
don't know if I can zoom this in at all

432
00:18:50,809 --> 00:18:59,879
looks like I can't for whatever reason

433
00:18:53,720 --> 00:19:02,640
that's too bad my frame image I can't

434
00:18:59,880 --> 00:19:04,110
really zoom this in much so I I'm gonna

435
00:19:02,640 --> 00:19:07,080
maybe try just make it bigger here so

436
00:19:04,109 --> 00:19:09,569
you can see it you can see that it sort

437
00:19:07,079 --> 00:19:12,000
of rendered a base repeating pattern

438
00:19:09,569 --> 00:19:13,349
onto the ground that's very dim I'm not

439
00:19:12,000 --> 00:19:14,549
sure what that was meant to do it might

440
00:19:13,349 --> 00:19:16,619
have something to do with other types of

441
00:19:14,549 --> 00:19:18,240
rendering would happen but you can see

442
00:19:16,619 --> 00:19:20,279
these ground slats there's a ground

443
00:19:18,240 --> 00:19:22,680
splat there's a ground splat so what the

444
00:19:20,279 --> 00:19:27,539
game is doing right here is it's laying

445
00:19:22,680 --> 00:19:29,730
down those initial ground patterns in a

446
00:19:27,539 --> 00:19:31,950
way that blends them together so it's

447
00:19:29,730 --> 00:19:33,990
just doing a lot of overdraw there to

448
00:19:31,950 --> 00:19:36,870
splat the ground together into something

449
00:19:33,990 --> 00:19:41,099
so it's not fog it's just placing ground

450
00:19:36,869 --> 00:19:43,889
right placing ground tiles you can see

451
00:19:41,099 --> 00:19:46,169
it doing that we're now rendering that

452
00:19:43,890 --> 00:19:48,000
right there is the player marker so for

453
00:19:46,170 --> 00:19:50,160
whatever reason the player marker got

454
00:19:48,000 --> 00:19:51,809
rendered this time that may just be

455
00:19:50,160 --> 00:19:55,620
happenstance it's hard to know why

456
00:19:51,809 --> 00:19:58,200
because the texture in the terrain

457
00:19:55,619 --> 00:20:00,809
hasn't been so here's probably why it

458
00:19:58,200 --> 00:20:02,930
got rendered at that time if that makes

459
00:20:00,809 --> 00:20:02,929
sense

460
00:20:07,339 --> 00:20:11,970
it looks like they've broken up into two

461
00:20:09,990 --> 00:20:13,829
passes rendering a flat ground plane

462
00:20:11,970 --> 00:20:17,400
then putting stuff on the ground plane

463
00:20:13,829 --> 00:20:18,869
then putting stuff over it right so it

464
00:20:17,400 --> 00:20:20,310
probably got rendered because it's just

465
00:20:18,869 --> 00:20:22,049
part of the flat ground plane that

466
00:20:20,309 --> 00:20:24,240
marker is sort of supposed to be sitting

467
00:20:22,049 --> 00:20:25,919
where the player is sitting right and so

468
00:20:24,240 --> 00:20:28,230
now we're putting like trees and other

469
00:20:25,920 --> 00:20:31,230
sprites on there that we need to kind of

470
00:20:28,230 --> 00:20:34,559
stack up for the player to experience

471
00:20:31,230 --> 00:20:36,630
right and you can kinda see

472
00:20:34,559 --> 00:20:38,730
a little bit of bugginess there that

473
00:20:36,630 --> 00:20:40,440
probably isn't I mean it might be but it

474
00:20:38,730 --> 00:20:41,730
probably isn't in the actual game that's

475
00:20:40,440 --> 00:20:44,160
probably because of some of the API

476
00:20:41,730 --> 00:20:45,539
capture bugs we were seeing before that

477
00:20:44,160 --> 00:20:47,040
was warning us about that's probably

478
00:20:45,539 --> 00:20:48,509
just or you know it might just be an

479
00:20:47,039 --> 00:20:50,519
artifact of how it's redrawing cuz you

480
00:20:48,509 --> 00:20:52,049
can see it's not there when we go in

481
00:20:50,519 --> 00:20:53,339
here so I don't know what's happening

482
00:20:52,049 --> 00:20:55,259
there exactly but those those are

483
00:20:53,339 --> 00:20:56,069
probably not things to be concerned

484
00:20:55,259 --> 00:20:59,369
about

485
00:20:56,069 --> 00:21:01,980
probably just artifacting from the

486
00:20:59,369 --> 00:21:03,389
capture here you can see drawing the

487
00:21:01,980 --> 00:21:06,210
dude you can see that we're composing

488
00:21:03,390 --> 00:21:08,550
the world upside down by the way the

489
00:21:06,210 --> 00:21:10,620
dude is standing upside down from where

490
00:21:08,549 --> 00:21:13,529
they are and those trees are upside down

491
00:21:10,619 --> 00:21:15,359
but anyway if we now look in here let's

492
00:21:13,529 --> 00:21:17,250
take a look at one of these trees

493
00:21:15,359 --> 00:21:19,079
specifically because this is an example

494
00:21:17,250 --> 00:21:23,359
of the kind of shader that we wanted to

495
00:21:19,079 --> 00:21:28,169
look at where is that large there it is

496
00:21:23,359 --> 00:21:31,559
so this tree here if I if I look at it

497
00:21:28,170 --> 00:21:34,380
in more detail I don't know if I can

498
00:21:31,559 --> 00:21:35,759
zoom in on this so anyway to zoom in on

499
00:21:34,380 --> 00:21:37,560
that I don't think I can zoom in on this

500
00:21:35,759 --> 00:21:42,029
view unfortunately I can zoom in on the

501
00:21:37,559 --> 00:21:44,250
texture like here right so we can zoom

502
00:21:42,029 --> 00:21:45,839
in on this thing and one of the nice

503
00:21:44,250 --> 00:21:47,430
things about it too is you know they've

504
00:21:45,839 --> 00:21:49,169
made the check boxes that we actually

505
00:21:47,430 --> 00:21:50,519
want you can see where they've got flip

506
00:21:49,170 --> 00:21:53,519
image because they know a lot of times

507
00:21:50,519 --> 00:21:55,319
things get rendered upside down so we

508
00:21:53,519 --> 00:21:57,079
can sort of see that this was one of the

509
00:21:55,319 --> 00:22:00,149
things that was flickery when it moved

510
00:21:57,079 --> 00:22:02,549
and it's hard to say to what extent

511
00:22:00,150 --> 00:22:04,830
they're shifting this but you can see

512
00:22:02,549 --> 00:22:08,639
that it is for whatever reason more than

513
00:22:04,829 --> 00:22:13,859
one triangle pair for that it's not just

514
00:22:08,640 --> 00:22:16,560
a quad I'm not sure I'm really just not

515
00:22:13,859 --> 00:22:19,619
sure exactly why I don't quite know

516
00:22:16,559 --> 00:22:23,730
what's happening there why it looks like

517
00:22:19,619 --> 00:22:25,619
that it may have to do with something in

518
00:22:23,730 --> 00:22:28,529
the way unity works I don't I don't

519
00:22:25,619 --> 00:22:30,689
really know but anyway I'm gonna stop

520
00:22:28,529 --> 00:22:32,759
there and I'm gonna go look at what

521
00:22:30,690 --> 00:22:34,830
shader was used to draw this to see if I

522
00:22:32,759 --> 00:22:37,470
can gain any insight and whether we will

523
00:22:34,829 --> 00:22:41,189
be able to improve the sampling quality

524
00:22:37,470 --> 00:22:45,750
of the pixel art here so if I go into

525
00:22:41,190 --> 00:22:47,759
pixel shader and I take a look at what's

526
00:22:45,750 --> 00:22:50,490
going on here

527
00:22:47,759 --> 00:22:54,690
I can see all of the stuff that's

528
00:22:50,490 --> 00:22:57,960
happening in in the you know in the

529
00:22:54,690 --> 00:23:00,029
pixels trading pipeline right if we step

530
00:22:57,960 --> 00:23:02,039
through this list I guess I should again

531
00:23:00,029 --> 00:23:03,720
just to be clear for folks who have

532
00:23:02,039 --> 00:23:05,819
never used a utility like this before

533
00:23:03,720 --> 00:23:09,000
this API inspector view is basically

534
00:23:05,819 --> 00:23:10,889
once I've dialed in up top here once

535
00:23:09,000 --> 00:23:14,700
I've dialed in that's the particular

536
00:23:10,890 --> 00:23:16,650
render call that I want to inspect and

537
00:23:14,700 --> 00:23:19,650
by the way we didn't mention it but this

538
00:23:16,650 --> 00:23:21,000
right here updates to match this this is

539
00:23:19,650 --> 00:23:24,210
just a listing of what the api's

540
00:23:21,000 --> 00:23:25,289
actually were so on this issuance this

541
00:23:24,210 --> 00:23:27,900
was the command

542
00:23:25,289 --> 00:23:30,359
this was the direct3d 11 command that

543
00:23:27,900 --> 00:23:33,269
was being called draw index it's drawing

544
00:23:30,359 --> 00:23:37,649
12 indices it's just this tree right

545
00:23:33,269 --> 00:23:40,019
it's a very small batch render issue and

546
00:23:37,650 --> 00:23:41,910
you can see anything else you want to

547
00:23:40,019 --> 00:23:43,379
see about the particular call we don't

548
00:23:41,910 --> 00:23:45,360
care about that right now what we care

549
00:23:43,380 --> 00:23:47,190
about is all the state that was set for

550
00:23:45,359 --> 00:23:49,409
the call specifically up here you can

551
00:23:47,190 --> 00:23:52,170
see it's setting up the shaders and the

552
00:23:49,410 --> 00:23:53,759
samplers by the way crazy how much

553
00:23:52,170 --> 00:23:55,410
overhead there is here I would have

554
00:23:53,759 --> 00:23:57,210
expected unity be more optimized than

555
00:23:55,410 --> 00:23:59,400
this this is kind of ridiculously bad

556
00:23:57,210 --> 00:24:01,140
far far worse than handmade hero which

557
00:23:59,400 --> 00:24:04,230
is something that we did on a stream by

558
00:24:01,140 --> 00:24:06,570
ourselves that is not meant to be a

559
00:24:04,230 --> 00:24:07,890
reusable engine that I just don't

560
00:24:06,569 --> 00:24:10,619
understand how it's that looking that

561
00:24:07,890 --> 00:24:12,270
bad but it is there's a map on map

562
00:24:10,619 --> 00:24:14,489
before every single one of these this is

563
00:24:12,269 --> 00:24:16,440
to update these constant but like

564
00:24:14,490 --> 00:24:18,240
there's no batching at all from what I

565
00:24:16,440 --> 00:24:20,970
can see it literally draws a little

566
00:24:18,240 --> 00:24:22,920
chunk at a time really really bad not

567
00:24:20,970 --> 00:24:24,329
sure whose fault that is but you know

568
00:24:22,920 --> 00:24:28,230
maybe that's why unity games are so slow

569
00:24:24,329 --> 00:24:32,879
all the time anyway moving back over

570
00:24:28,230 --> 00:24:36,059
here taking a look at this this issuance

571
00:24:32,880 --> 00:24:39,390
here this window the API inspector view

572
00:24:36,059 --> 00:24:40,829
is basically a break out of the

573
00:24:39,390 --> 00:24:42,570
information for the thing that we're

574
00:24:40,829 --> 00:24:44,849
stepped to so remember we're stepped

575
00:24:42,569 --> 00:24:47,519
here at 5:22 and then get back there

576
00:24:44,849 --> 00:24:49,409
we're here on this call this API

577
00:24:47,519 --> 00:24:51,240
inspector view is a breakout view of

578
00:24:49,410 --> 00:24:54,259
everything that happened on that call

579
00:24:51,240 --> 00:24:58,079
again allows us to see what's going on

580
00:24:54,259 --> 00:25:01,259
if we take a look at this this list here

581
00:24:58,079 --> 00:25:03,359
these are the stages of rendering

582
00:25:01,259 --> 00:25:06,539
as they occur logically not necessarily

583
00:25:03,359 --> 00:25:08,759
on the chip but logically so here is the

584
00:25:06,539 --> 00:25:11,190
input assembler what that's saying is

585
00:25:08,759 --> 00:25:13,589
what are all the inputs to this command

586
00:25:11,190 --> 00:25:15,630
that are relevant you can see here this

587
00:25:13,589 --> 00:25:18,240
tells us how the vertices were coming in

588
00:25:15,630 --> 00:25:19,920
there's a position a normal a color four

589
00:25:18,240 --> 00:25:23,099
sets of texture coordinates and a

590
00:25:19,920 --> 00:25:24,750
tangent frame why on earth you would

591
00:25:23,099 --> 00:25:25,919
need all that for a single batch of

592
00:25:24,750 --> 00:25:27,930
something that needs none of those

593
00:25:25,920 --> 00:25:30,090
things it's probably only this one this

594
00:25:27,930 --> 00:25:35,730
one in this one actually who knows again

595
00:25:30,089 --> 00:25:39,149
just largesse from unity who knows

596
00:25:35,730 --> 00:25:41,519
so probably looking at the fact that

597
00:25:39,150 --> 00:25:43,290
these are all it offsets zero it looks

598
00:25:41,519 --> 00:25:45,210
like maybe they just forgot to turn them

599
00:25:43,289 --> 00:25:48,149
off or maybe there's no cost to leaving

600
00:25:45,210 --> 00:25:50,759
them on because the shader doesn't fetch

601
00:25:48,150 --> 00:25:53,070
them I'm not sure so that's fine but

602
00:25:50,759 --> 00:25:55,410
it's using probably at least these two

603
00:25:53,069 --> 00:25:56,939
so you know what I take it back

604
00:25:55,410 --> 00:25:58,410
there might not be any largesse here it

605
00:25:56,940 --> 00:25:59,519
looks like they're offsets are properly

606
00:25:58,410 --> 00:26:02,640
set to zero for all these so they're

607
00:25:59,519 --> 00:26:04,559
enabled in some way but not actually

608
00:26:02,640 --> 00:26:06,240
being read I would suspect so it's not

609
00:26:04,559 --> 00:26:07,710
actually wasteful it looks like it's

610
00:26:06,240 --> 00:26:09,839
only using position colored text cord

611
00:26:07,710 --> 00:26:13,230
which is what it should have so no bad

612
00:26:09,839 --> 00:26:15,029
there all right here are the vertex

613
00:26:13,230 --> 00:26:16,589
buffers that are coming in it looks like

614
00:26:15,029 --> 00:26:17,849
there's some kind of global sampling

615
00:26:16,589 --> 00:26:19,859
buffer coming in here this is a

616
00:26:17,849 --> 00:26:21,299
secondary vertex buffer this looks like

617
00:26:19,859 --> 00:26:23,339
the primary vertex buffer we're actually

618
00:26:21,299 --> 00:26:25,409
sampling from this one has a stride of

619
00:26:23,339 --> 00:26:28,619
zero and so it looks like this is just

620
00:26:25,410 --> 00:26:30,450
constants that are coming in here as a

621
00:26:28,619 --> 00:26:32,639
perfect buffer instead of as a constant

622
00:26:30,450 --> 00:26:34,019
buffer same thing with the index buffer

623
00:26:32,640 --> 00:26:35,850
so these are the two buffers we're

624
00:26:34,019 --> 00:26:37,109
actually looking at here we don't care

625
00:26:35,849 --> 00:26:39,299
about those because we don't need to

626
00:26:37,109 --> 00:26:41,879
adjust what's being drawn we have seem

627
00:26:39,299 --> 00:26:44,490
to be adjust how it's being drawn so

628
00:26:41,880 --> 00:26:46,140
those really won't concern us this so I

629
00:26:44,490 --> 00:26:47,880
just walking you through this but we

630
00:26:46,140 --> 00:26:50,550
don't care about the input assembly

631
00:26:47,880 --> 00:26:52,740
stage pretty much at all at the vertex

632
00:26:50,549 --> 00:26:54,750
shading stage probably same thing I

633
00:26:52,740 --> 00:26:56,759
won't really have to modify the vertex

634
00:26:54,750 --> 00:26:57,839
shader but if you did have to look at

635
00:26:56,759 --> 00:27:00,599
the what was going on the vertex shader

636
00:26:57,839 --> 00:27:03,269
this is the place to do it here I

637
00:27:00,599 --> 00:27:05,609
believe is how you would actually look

638
00:27:03,269 --> 00:27:07,170
at those shaders you can see in here

639
00:27:05,609 --> 00:27:11,069
you've got the disassembly of the shader

640
00:27:07,170 --> 00:27:13,920
and the statistics and so on right and

641
00:27:11,069 --> 00:27:15,179
so you know that's that's what's

642
00:27:13,920 --> 00:27:17,970
happening the vertex shader if

643
00:27:15,180 --> 00:27:20,400
we pop out the disassembly you can see

644
00:27:17,970 --> 00:27:23,730
here what's going on in the actual a

645
00:27:20,400 --> 00:27:30,830
shader what I don't know is if there's

646
00:27:23,730 --> 00:27:34,319
any way so this this is pretty much what

647
00:27:30,829 --> 00:27:36,269
what's going to stop us right so that

648
00:27:34,319 --> 00:27:39,569
answers our question whether we can fix

649
00:27:36,269 --> 00:27:45,809
what's going on in the shader if I can't

650
00:27:39,569 --> 00:27:49,889
edit the HLSL bytecode or produce source

651
00:27:45,809 --> 00:27:52,169
and then change it then then there's

652
00:27:49,890 --> 00:27:53,460
really not much I can do right because

653
00:27:52,170 --> 00:27:56,100
what I want to be able to do is edit

654
00:27:53,460 --> 00:28:02,400
this shader not this one specifically I

655
00:27:56,099 --> 00:28:04,409
want to be able to edit that I wanted to

656
00:28:02,400 --> 00:28:08,070
be able to edit that that pixel shader

657
00:28:04,410 --> 00:28:09,960
so let's take a look let me close this

658
00:28:08,069 --> 00:28:11,750
actually I don't really know how to

659
00:28:09,960 --> 00:28:13,769
close that probably there we go

660
00:28:11,750 --> 00:28:14,789
so let me finish walking through this

661
00:28:13,769 --> 00:28:16,379
and then we'll see if there's any way we

662
00:28:14,789 --> 00:28:21,210
can coax this thing into a mode where we

663
00:28:16,380 --> 00:28:23,550
actually could somehow use it so we look

664
00:28:21,210 --> 00:28:25,590
here you've got a few more things these

665
00:28:23,549 --> 00:28:27,569
are stages that we're not using so these

666
00:28:25,589 --> 00:28:29,250
are not enabled in the game right now so

667
00:28:27,569 --> 00:28:31,109
you can see you've got like the geometry

668
00:28:29,250 --> 00:28:33,539
shader dimension these are not being

669
00:28:31,109 --> 00:28:35,969
used so that's why they're grayed out

670
00:28:33,539 --> 00:28:38,220
we then get to the rasterization stage

671
00:28:35,970 --> 00:28:39,450
the rasterization stage is just a thing

672
00:28:38,220 --> 00:28:41,069
that basically tells you how it

673
00:28:39,450 --> 00:28:42,960
determines which pixels were filled

674
00:28:41,069 --> 00:28:45,240
there isn't a shader that operates at

675
00:28:42,960 --> 00:28:46,680
this stage on the Nvidia part and so

676
00:28:45,240 --> 00:28:48,029
really all you've got are settings and

677
00:28:46,680 --> 00:28:49,590
these are those settings there are

678
00:28:48,029 --> 00:28:51,410
things like whether it was solid or

679
00:28:49,589 --> 00:28:53,579
wireframe fill or things like that

680
00:28:51,410 --> 00:28:55,230
whether or not there was culling turned

681
00:28:53,579 --> 00:28:58,109
on for back face culling things like

682
00:28:55,230 --> 00:28:59,880
that you can see it's not turned on that

683
00:28:58,109 --> 00:29:02,279
sort of stuff again don't need to change

684
00:28:59,880 --> 00:29:04,050
any of that here's the money this is

685
00:29:02,279 --> 00:29:05,759
what we actually wanted to edit doesn't

686
00:29:04,049 --> 00:29:06,930
look like we'll be able to because if I

687
00:29:05,759 --> 00:29:08,579
go to the disassembly here I'm assuming

688
00:29:06,930 --> 00:29:10,049
you'll say the same thing which is that

689
00:29:08,579 --> 00:29:13,379
I can't edit it and what I would like to

690
00:29:10,049 --> 00:29:15,359
be able to do is edit it and change the

691
00:29:13,380 --> 00:29:19,050
way that it's actually doing its

692
00:29:15,359 --> 00:29:20,789
sampling to get me better results now I

693
00:29:19,049 --> 00:29:25,159
can't do that so we're gonna have to

694
00:29:20,789 --> 00:29:27,579
transfer in a way that we could actually

695
00:29:25,160 --> 00:29:31,379
change that that shade

696
00:29:27,579 --> 00:29:34,470
so looking in here at what's going on

697
00:29:31,378 --> 00:29:36,548
you can see the pixel shading happening

698
00:29:34,470 --> 00:29:38,589
this is all the information that was

699
00:29:36,548 --> 00:29:40,028
going into the pixel shader again we

700
00:29:38,589 --> 00:29:41,288
don't really care because everything

701
00:29:40,028 --> 00:29:43,239
that's going in is what we want the

702
00:29:41,288 --> 00:29:45,519
texture and so on but if you were trying

703
00:29:43,239 --> 00:29:49,179
to figure out like you know which well

704
00:29:45,519 --> 00:29:52,450
you can see actually also in here

705
00:29:49,179 --> 00:29:56,139
information about what was happening

706
00:29:52,450 --> 00:29:58,330
with the sampling you can see that it's

707
00:29:56,138 --> 00:29:59,829
just doing point sampling on everything

708
00:29:58,329 --> 00:30:03,608
which is why you're getting that Chris

709
00:29:59,829 --> 00:30:06,089
penis instead of like bilinear which you

710
00:30:03,608 --> 00:30:09,638
know makes makes perfect sense obviously

711
00:30:06,089 --> 00:30:10,898
so anyway the bummer is we can't edit

712
00:30:09,638 --> 00:30:12,038
the shader so we're gonna have to try

713
00:30:10,898 --> 00:30:13,808
and figure out some way to coax it into

714
00:30:12,038 --> 00:30:15,460
allowing us to edit that shader I don't

715
00:30:13,808 --> 00:30:17,648
know if maybe render doc would let us do

716
00:30:15,460 --> 00:30:18,759
it or not but there is another way we

717
00:30:17,648 --> 00:30:21,699
might be able to do it I don't think

718
00:30:18,759 --> 00:30:24,278
there's any way to tell unity to run in

719
00:30:21,700 --> 00:30:26,109
opengl mode but maybe there is and if

720
00:30:24,278 --> 00:30:29,378
there was that might help us because

721
00:30:26,108 --> 00:30:31,509
OpenGL doesn't really allow you except

722
00:30:29,378 --> 00:30:33,248
with extensions to submit compiled

723
00:30:31,509 --> 00:30:36,429
bytecode so I'm wondering if there is

724
00:30:33,249 --> 00:30:38,950
some way to force open jail on a unity

725
00:30:36,429 --> 00:30:40,840
executable I'm not sure but that's where

726
00:30:38,950 --> 00:30:43,028
we're at now if we actually were to look

727
00:30:40,839 --> 00:30:45,249
at this disassembly here I think if we

728
00:30:43,028 --> 00:30:50,638
could have edited it we would actually

729
00:30:45,249 --> 00:30:52,808
have so anyway to get this there it is

730
00:30:50,638 --> 00:30:56,738
it's like I wanted this to be a pop-out

731
00:30:52,808 --> 00:30:58,329
window um so if we actually looked at

732
00:30:56,739 --> 00:31:00,909
this you can see the disassembly of the

733
00:30:58,329 --> 00:31:03,489
shader you can see here that there's

734
00:31:00,909 --> 00:31:05,889
basically an if clause that stops the

735
00:31:03,489 --> 00:31:10,298
actual shading from occurring here and

736
00:31:05,888 --> 00:31:13,898
just dumps a standard like value out to

737
00:31:10,298 --> 00:31:15,638
the stream and skips the shading here we

738
00:31:13,898 --> 00:31:18,398
have another one of those happening here

739
00:31:15,638 --> 00:31:20,168
right and so if we take a look at what's

740
00:31:18,398 --> 00:31:25,238
going on you can see that there's

741
00:31:20,169 --> 00:31:34,929
samples being taken from s 1 and s 0 and

742
00:31:25,239 --> 00:31:36,308
s 2 and so if I look at my actual try I

743
00:31:34,929 --> 00:31:38,200
don't want this thing to dock there you

744
00:31:36,308 --> 00:31:39,668
go if I look at what's actually coming

745
00:31:38,200 --> 00:31:41,039
in on those slots that should give me

746
00:31:39,669 --> 00:31:43,530
some idea of who

747
00:31:41,039 --> 00:31:44,899
I actually would need to update here so

748
00:31:43,529 --> 00:31:48,779
let's take a look at those three

749
00:31:44,900 --> 00:31:55,380
textures in order so here is the first

750
00:31:48,779 --> 00:32:04,740
texture this first okay so this just

751
00:31:55,380 --> 00:32:06,540
looks like the map honestly yeah so for

752
00:32:04,740 --> 00:32:12,240
some reason the map is active in slot

753
00:32:06,539 --> 00:32:16,589
zero if we look at what texture might be

754
00:32:12,240 --> 00:32:17,579
sampled in slot zero just to get some go

755
00:32:16,589 --> 00:32:20,369
ahead and make this a little bit more

756
00:32:17,579 --> 00:32:23,399
more visible if we were to look at

757
00:32:20,369 --> 00:32:26,549
what's which texture operations were

758
00:32:23,400 --> 00:32:33,540
targeting that if we look your sampler

759
00:32:26,549 --> 00:32:36,750
zero I I believe there's nothing special

760
00:32:33,539 --> 00:32:38,129
about any of these samplers and if we

761
00:32:36,750 --> 00:32:41,250
look at the samplers here

762
00:32:38,130 --> 00:32:43,230
here are the the textures that went into

763
00:32:41,250 --> 00:32:46,500
those slots which I believe are just

764
00:32:43,230 --> 00:32:47,610
bound per sampler so I believe like this

765
00:32:46,500 --> 00:32:49,259
would be sample zero this would be

766
00:32:47,609 --> 00:32:52,829
sampler one of this would be sampler - I

767
00:32:49,259 --> 00:32:55,769
believe so if we look at where those are

768
00:32:52,829 --> 00:32:59,099
actually getting sampled if we pull down

769
00:32:55,769 --> 00:33:01,319
to places that sample from slot 0 which

770
00:32:59,099 --> 00:33:05,750
is the map you can see that there's

771
00:33:01,319 --> 00:33:08,279
really it's it's kind of out in here

772
00:33:05,750 --> 00:33:11,400
same with this other texture that looks

773
00:33:08,279 --> 00:33:14,490
like some kind of a bloom effect maybe

774
00:33:11,400 --> 00:33:17,490
that's some kind of lighting or you know

775
00:33:14,490 --> 00:33:20,370
some kind of special effect that's going

776
00:33:17,490 --> 00:33:23,250
on there that maybe got rendered for

777
00:33:20,369 --> 00:33:25,769
lighting purposes those two are getting

778
00:33:23,250 --> 00:33:28,170
sampled in the top branch I'm sorry the

779
00:33:25,769 --> 00:33:30,750
bottom branch and what you'll notice is

780
00:33:28,170 --> 00:33:33,360
the actual sprite itself is not being

781
00:33:30,750 --> 00:33:35,460
sampled here so this looks like

782
00:33:33,359 --> 00:33:39,299
something we wouldn't really care about

783
00:33:35,460 --> 00:33:42,600
because it's not actually sampling us

784
00:33:39,299 --> 00:33:45,059
right this looks like it is the thing

785
00:33:42,599 --> 00:33:50,929
that sampling was right and if we take a

786
00:33:45,059 --> 00:33:52,730
look at that texture here you can see

787
00:33:50,930 --> 00:33:56,539
yes

788
00:33:52,730 --> 00:34:01,130
I almost want to say the animation is

789
00:33:56,539 --> 00:34:03,670
baked in is there any way to flip this

790
00:34:01,130 --> 00:34:03,670
guy around

791
00:34:08,159 --> 00:34:16,679
guess I could do it in the shader I was

792
00:34:10,498 --> 00:34:18,298
hoping there was a nice little I was

793
00:34:16,679 --> 00:34:20,729
hoping there was a way to just do a

794
00:34:18,298 --> 00:34:22,619
one-click flip like we were doing and

795
00:34:20,728 --> 00:34:26,878
the other one there it looks like there

796
00:34:22,619 --> 00:34:36,419
isn't but anyway if I look at these the

797
00:34:26,878 --> 00:34:38,639
so a couple things about them really

798
00:34:36,418 --> 00:34:43,108
kind of confused right now as I look at

799
00:34:38,639 --> 00:34:47,460
this I'm not sure what to make of it for

800
00:34:43,108 --> 00:34:49,498
a number of reasons so I'll to start and

801
00:34:47,460 --> 00:34:52,409
I'll go through them kind of kind of all

802
00:34:49,498 --> 00:34:55,138
together here so the first thing is it

803
00:34:52,409 --> 00:35:00,588
looks like that waving was actually just

804
00:34:55,139 --> 00:35:04,019
done in an external application so I

805
00:35:00,588 --> 00:35:07,699
can't actually fix this stuff it looks

806
00:35:04,018 --> 00:35:11,788
like the bad pixel sampling is built in

807
00:35:07,699 --> 00:35:15,808
to the actual image which is unfortunate

808
00:35:11,789 --> 00:35:18,180
right but maybe that's okay because hey

809
00:35:15,809 --> 00:35:21,059
the panning and zooming part I could fix

810
00:35:18,179 --> 00:35:22,679
right but looking at it that that's

811
00:35:21,059 --> 00:35:24,539
definitely a problem the other thing I

812
00:35:22,679 --> 00:35:26,190
would say is looks like this game

813
00:35:24,539 --> 00:35:28,380
couldn't have mipmapping turned on

814
00:35:26,190 --> 00:35:30,088
without it a bunch of work as well so

815
00:35:28,380 --> 00:35:32,759
that was another big source of the

816
00:35:30,088 --> 00:35:34,949
sparkles the reason is because it's not

817
00:35:32,759 --> 00:35:36,179
using premultiplied alpha so the reason

818
00:35:34,949 --> 00:35:38,098
I can tell that it's not using

819
00:35:36,179 --> 00:35:40,558
premultiplied alpha is you can see that

820
00:35:38,099 --> 00:35:44,190
the colors are smeared right they're

821
00:35:40,559 --> 00:35:48,180
smeared out and what that means is that

822
00:35:44,190 --> 00:35:51,539
if I look at how the Alpha Channel looks

823
00:35:48,179 --> 00:35:54,528
I'm not sure how to get the Alpha

824
00:35:51,539 --> 00:35:54,528
Channel

825
00:35:55,960 --> 00:36:01,159
probably oh it does have flip upside

826
00:36:00,260 --> 00:36:05,360
down just didn't know where I was

827
00:36:01,159 --> 00:36:07,519
looking so there's our upright actual

828
00:36:05,360 --> 00:36:11,269
plant so if I look at the Alpha Channel

829
00:36:07,519 --> 00:36:12,980
with the Alpha Channel on you can see

830
00:36:11,269 --> 00:36:14,949
that if this was using a premultiplied

831
00:36:12,980 --> 00:36:18,019
texture people apply to alpha texture

832
00:36:14,949 --> 00:36:19,879
then when I clicked this all of this

833
00:36:18,019 --> 00:36:21,530
would be black and the reason we black

834
00:36:19,880 --> 00:36:25,039
is because if the Alpha is zero

835
00:36:21,530 --> 00:36:26,990
somewhere then when you do premultiplied

836
00:36:25,039 --> 00:36:29,059
alpha it means that your RGB channels

837
00:36:26,989 --> 00:36:31,039
are multiplied by the Alpha Channel so

838
00:36:29,059 --> 00:36:32,989
everywhere that there's no alpha there

839
00:36:31,039 --> 00:36:34,820
would be black in the color channels

840
00:36:32,989 --> 00:36:37,269
that's not what's happening so I know

841
00:36:34,820 --> 00:36:39,860
that this is not a premultiplied alpha

842
00:36:37,269 --> 00:36:43,670
texture which means it cannot be MIT

843
00:36:39,860 --> 00:36:49,340
mapped properly without an additional

844
00:36:43,670 --> 00:36:51,710
shader so I wouldn't really be able to

845
00:36:49,340 --> 00:36:55,490
fix that part either without doing

846
00:36:51,710 --> 00:36:57,019
multiple samples from the texture I

847
00:36:55,489 --> 00:36:58,729
wouldn't be able to use the MIT mapping

848
00:36:57,019 --> 00:37:00,440
hardware which is kind of a bummer but

849
00:36:58,730 --> 00:37:03,619
that's not the end of the world I could

850
00:37:00,440 --> 00:37:09,320
just add those extra samples get slower

851
00:37:03,619 --> 00:37:13,369
but get correct mipmapping on my on my

852
00:37:09,320 --> 00:37:14,960
plants here so yeah let's take a look

853
00:37:13,369 --> 00:37:16,969
though we know that that is the thing

854
00:37:14,960 --> 00:37:20,599
that's actually being sampled as the

855
00:37:16,969 --> 00:37:23,689
sprite we go in here and we look at all

856
00:37:20,599 --> 00:37:26,900
the samples taken and you know there's a

857
00:37:23,690 --> 00:37:30,440
heck of a lot of information in this

858
00:37:26,900 --> 00:37:33,139
side of the sampler I'm not sure what it

859
00:37:30,440 --> 00:37:36,019
all does and it might be a bit laborious

860
00:37:33,139 --> 00:37:37,009
to go through the whole thing but you

861
00:37:36,019 --> 00:37:38,420
know we're gonna have to try and at

862
00:37:37,010 --> 00:37:40,090
least make some sense of if we want to

863
00:37:38,420 --> 00:37:43,970
understand how we would necessarily

864
00:37:40,090 --> 00:37:47,450
modify it so you know coming in here

865
00:37:43,969 --> 00:37:50,779
we've got some registers that are you

866
00:37:47,449 --> 00:37:53,029
know getting used here I assume those

867
00:37:50,780 --> 00:37:55,550
registers are just scratch registers

868
00:37:53,030 --> 00:37:58,370
probably you can see them being used

869
00:37:55,550 --> 00:38:00,620
here and then we've got like our vertex

870
00:37:58,369 --> 00:38:02,480
inputs you can see like vertex input

871
00:38:00,619 --> 00:38:04,900
happening here and then we've got like a

872
00:38:02,480 --> 00:38:07,369
constant buffer happening here and so on

873
00:38:04,900 --> 00:38:08,800
so if you take a look at what's

874
00:38:07,369 --> 00:38:11,940
happening with this

875
00:38:08,800 --> 00:38:14,590
sampling in this part of things I'm

876
00:38:11,940 --> 00:38:16,650
guessing just looking at what's going on

877
00:38:14,590 --> 00:38:16,650
here

878
00:38:18,039 --> 00:38:22,989
and this is taxing my I'm not a reverse

879
00:38:20,380 --> 00:38:25,420
engineer so my brain is not like sort of

880
00:38:22,989 --> 00:38:28,389
set up too quickly guess correctly

881
00:38:25,420 --> 00:38:30,010
what's going on in a lot of cases but

882
00:38:28,389 --> 00:38:33,129
I'm guessing what we're sort of seeing

883
00:38:30,010 --> 00:38:35,320
here in terms of taking these samples

884
00:38:33,130 --> 00:38:37,450
the fact that we're taking multiple

885
00:38:35,320 --> 00:38:42,600
samples is a little confusing because

886
00:38:37,449 --> 00:38:42,599
I'm not sure why we would be doing that

887
00:38:42,869 --> 00:38:46,659
in order to take multiple samples you

888
00:38:45,460 --> 00:38:48,639
would think we would have to be doing

889
00:38:46,659 --> 00:38:52,659
some filtering but I'm not seeing any

890
00:38:48,639 --> 00:38:55,960
filtering right if I jump back to the

891
00:38:52,659 --> 00:38:59,529
actual children of morta well I guess I

892
00:38:55,960 --> 00:39:00,880
can't necessarily maybe if I do resume I

893
00:38:59,530 --> 00:39:03,180
don't know if that will destroy my frame

894
00:39:00,880 --> 00:39:03,180
though

895
00:39:15,190 --> 00:39:20,829
I don't know to what extent exporting

896
00:39:17,380 --> 00:39:22,240
this as a C++ capture would actually

897
00:39:20,829 --> 00:39:25,179
work it would be interesting to see if

898
00:39:22,239 --> 00:39:28,109
if that did work that would it allow us

899
00:39:25,179 --> 00:39:30,369
to potentially edit the shaders as well

900
00:39:28,110 --> 00:39:33,519
so maybe we could do something like that

901
00:39:30,369 --> 00:39:38,319
I'm not sure anyway the point is I

902
00:39:33,519 --> 00:39:39,989
wanted to kind of show you the sort of

903
00:39:38,320 --> 00:39:42,940
the Chris penis that I was seeing there

904
00:39:39,989 --> 00:39:45,879
but the fact that I'm seeing all that

905
00:39:42,940 --> 00:39:47,409
flickering and Chris penis I don't

906
00:39:45,880 --> 00:39:48,490
understand what all of these samples

907
00:39:47,409 --> 00:39:50,799
could be because if you're taking

908
00:39:48,489 --> 00:39:55,500
multiple samples you should be getting

909
00:39:50,800 --> 00:39:58,900
at least some filtering if you're only

910
00:39:55,500 --> 00:40:01,710
getting completely unfiltered results

911
00:39:58,900 --> 00:40:07,030
why are we taking so many samples of

912
00:40:01,710 --> 00:40:16,329
that texture and I really don't know so

913
00:40:07,030 --> 00:40:18,640
that's a real puzzler that's a real

914
00:40:16,329 --> 00:40:21,819
puzzler let's try to take a look here so

915
00:40:18,639 --> 00:40:27,819
the first thing we're doing is we're

916
00:40:21,820 --> 00:40:29,860
taking an input from v2 right and you

917
00:40:27,820 --> 00:40:31,600
can you can look here and you can see

918
00:40:29,860 --> 00:40:35,410
that these are the inputs from the

919
00:40:31,599 --> 00:40:37,630
vertex shader right here's our textures

920
00:40:35,409 --> 00:40:41,139
right I'm sorry

921
00:40:37,630 --> 00:40:42,820
here's our texture coordinates yeah

922
00:40:41,139 --> 00:40:44,529
here's our texture coordinates I don't

923
00:40:42,820 --> 00:40:46,510
normally use D 3ds so it's hard for me

924
00:40:44,530 --> 00:40:50,290
sometimes to back map here's our

925
00:40:46,510 --> 00:40:52,630
samplers SCR s1 s2 it's s1 that we care

926
00:40:50,289 --> 00:40:55,869
about as far as I know unless maybe I'm

927
00:40:52,630 --> 00:40:58,570
reading this wrong and s1 doesn't map to

928
00:40:55,869 --> 00:41:00,730
this texture I mean it could be but I'm

929
00:40:58,570 --> 00:41:03,490
not sure how else to interpret this

930
00:41:00,730 --> 00:41:06,579
because you have the samplers in slot 0

931
00:41:03,489 --> 00:41:08,199
1 2 I believe slot 0 1 2 here

932
00:41:06,579 --> 00:41:11,019
corresponds to the samplers which means

933
00:41:08,199 --> 00:41:13,659
that anywhere you're using sampler 1 you

934
00:41:11,019 --> 00:41:16,780
are sampling from this texture as far as

935
00:41:13,659 --> 00:41:18,819
I know unless I miss reading the D 3d

936
00:41:16,780 --> 00:41:21,760
there but I think that's how this would

937
00:41:18,820 --> 00:41:23,559
look and so I believe that this is the

938
00:41:21,760 --> 00:41:28,510
only thing we actually care about is

939
00:41:23,559 --> 00:41:30,900
this T 1 s 1 I believe although actually

940
00:41:28,510 --> 00:41:30,900
the team

941
00:41:35,219 --> 00:41:42,129
so looking at this we're doing sample oh

942
00:41:39,539 --> 00:41:44,769
no no no no no no no no no I'm reading

943
00:41:42,130 --> 00:41:49,300
the d3d wrong so that's yeah lesson

944
00:41:44,769 --> 00:41:51,670
learned I believe that actually it's

945
00:41:49,300 --> 00:41:56,260
pairing the samplers are being paired

946
00:41:51,670 --> 00:41:57,159
dynamically prob mystery solved okay you

947
00:41:56,260 --> 00:41:58,960
learn something every day

948
00:41:57,159 --> 00:42:01,329
so if we look in here what we can see is

949
00:41:58,960 --> 00:42:03,760
the DVD disassembly the samplers are the

950
00:42:01,329 --> 00:42:05,549
S is the textures are the t's that's how

951
00:42:03,760 --> 00:42:08,200
this disassembly is being looked at

952
00:42:05,550 --> 00:42:10,090
that's just my bad again I don't

953
00:42:08,199 --> 00:42:11,859
normally use DVDs so I have no idea how

954
00:42:10,090 --> 00:42:14,710
to read these readouts I kind of know

955
00:42:11,860 --> 00:42:16,240
how the graphics cards work but I don't

956
00:42:14,710 --> 00:42:17,380
know how to necessary map that to it so

957
00:42:16,239 --> 00:42:20,169
that was just a piece of the puzzle here

958
00:42:17,380 --> 00:42:23,829
all right so these slots and these slots

959
00:42:20,170 --> 00:42:25,510
are being paired using this Naumann clay

960
00:42:23,829 --> 00:42:27,599
Chur that means actually what we're

961
00:42:25,510 --> 00:42:30,850
looking for is people who sample T one

962
00:42:27,599 --> 00:42:32,529
that makes things so much better because

963
00:42:30,849 --> 00:42:35,799
what that means is that anywhere we were

964
00:42:32,530 --> 00:42:39,730
seeing T zero here and you can see T 0 T

965
00:42:35,800 --> 00:42:42,550
0 T 0 T 0 T 0 in this first branch

966
00:42:39,730 --> 00:42:44,829
that's actually sampling the map that

967
00:42:42,550 --> 00:42:50,080
sampling from texture 0 it's just using

968
00:42:44,829 --> 00:42:52,659
sampler 1 which again is is this one so

969
00:42:50,079 --> 00:42:55,840
it's sampler 1 pit paired with texture 0

970
00:42:52,659 --> 00:42:58,239
just throwing you for a loop there big

971
00:42:55,840 --> 00:42:59,769
deal we figured it out so it is the

972
00:42:58,239 --> 00:43:02,169
simpler case that we're looking at and

973
00:42:59,769 --> 00:43:04,210
that makes so much more sense cuz like I

974
00:43:02,170 --> 00:43:05,889
said I could not figure out why we would

975
00:43:04,210 --> 00:43:07,329
be sampling 4 times now I still don't

976
00:43:05,889 --> 00:43:08,949
know why we're sampling the map 4 times

977
00:43:07,329 --> 00:43:10,539
but that's kind of a separate issue

978
00:43:08,949 --> 00:43:12,549
maybe this isn't the map maybe this is

979
00:43:10,539 --> 00:43:14,739
some kind of an assembly thing that they

980
00:43:12,550 --> 00:43:18,910
act who knows what that's worth maybe

981
00:43:14,739 --> 00:43:21,009
it's a depth I really don't know doesn't

982
00:43:18,909 --> 00:43:22,599
matter because we don't care this is the

983
00:43:21,010 --> 00:43:25,090
branch we actually care about it only

984
00:43:22,599 --> 00:43:25,900
does sample once which is exactly what I

985
00:43:25,090 --> 00:43:27,820
was expecting

986
00:43:25,900 --> 00:43:29,200
based on the results I saw so you can

987
00:43:27,820 --> 00:43:30,820
see why I was nervous that my god I

988
00:43:29,199 --> 00:43:32,529
don't know what this would really need

989
00:43:30,820 --> 00:43:34,059
to do for the output I was seeing

990
00:43:32,530 --> 00:43:35,830
doesn't make a lot of sense now it makes

991
00:43:34,059 --> 00:43:37,269
a lot more sense here we can see our

992
00:43:35,829 --> 00:43:40,299
texture samples and we can interpret

993
00:43:37,269 --> 00:43:42,108
them properly t1 and t2 are these two

994
00:43:40,300 --> 00:43:43,489
textures right here we

995
00:43:42,108 --> 00:43:45,558
don't care so much about the t2 that

996
00:43:43,489 --> 00:43:49,039
looks like a lighting overlay some kind

997
00:43:45,559 --> 00:43:50,119
of a light contribution sample that we

998
00:43:49,039 --> 00:43:52,190
don't really care about

999
00:43:50,119 --> 00:43:54,380
so this t2 sample we can effectively

1000
00:43:52,190 --> 00:43:57,528
ignore r2 we don't care about this is

1001
00:43:54,380 --> 00:43:59,960
the sample we care about sample r1 and

1002
00:43:57,528 --> 00:44:02,268
this multiplied here basically what

1003
00:43:59,960 --> 00:44:04,460
that's doing that multiplied is probably

1004
00:44:02,268 --> 00:44:06,858
applying a vertex color channel so it's

1005
00:44:04,460 --> 00:44:08,568
probably saying hey I might want to

1006
00:44:06,858 --> 00:44:10,578
change the color of this thing you know

1007
00:44:08,568 --> 00:44:14,588
maybe it's if I'm flashing it or

1008
00:44:10,579 --> 00:44:20,089
whatever oh we got a push we got a push

1009
00:44:14,588 --> 00:44:22,759
hello how's it going what's up today we

1010
00:44:20,088 --> 00:44:26,960
saw the prime puss on a little bit

1011
00:44:22,759 --> 00:44:28,880
earlier on the stream and the puss has

1012
00:44:26,960 --> 00:44:30,108
rejoined us I think the puss wants to

1013
00:44:28,880 --> 00:44:32,509
look out the window so I'm gonna put her

1014
00:44:30,108 --> 00:44:35,768
in her little feet there you go puss

1015
00:44:32,509 --> 00:44:38,989
there you go pull this look out oh

1016
00:44:35,768 --> 00:44:40,459
there's so much good nature today so

1017
00:44:38,989 --> 00:44:45,380
much good nature out there isn't that

1018
00:44:40,460 --> 00:44:46,849
true yeah that's a good place alright so

1019
00:44:45,380 --> 00:44:51,019
I'm hoping the puss will maybe just make

1020
00:44:46,849 --> 00:44:52,460
herself comfortable and enjoy some of

1021
00:44:51,018 --> 00:44:54,288
the outdoor sites I don't know she might

1022
00:44:52,460 --> 00:44:54,789
want attention in which case we might be

1023
00:44:54,289 --> 00:44:57,859
in trouble

1024
00:44:54,789 --> 00:45:00,380
alright so again I think this is just

1025
00:44:57,858 --> 00:45:03,048
taking and doing some colorization of

1026
00:45:00,380 --> 00:45:05,358
the sample so this is sampling the

1027
00:45:03,048 --> 00:45:08,329
sprite this is coloring the sprite using

1028
00:45:05,358 --> 00:45:10,548
an input and then a bunch of stuff here

1029
00:45:08,329 --> 00:45:13,489
you know looking at this we got a DP 3

1030
00:45:10,548 --> 00:45:17,449
on here that's probably used for some

1031
00:45:13,489 --> 00:45:19,940
kind of well no it's not because it's

1032
00:45:17,449 --> 00:45:22,699
hard-coded so it's probably not actually

1033
00:45:19,940 --> 00:45:26,349
doing that so we got two DP 3s this

1034
00:45:22,699 --> 00:45:26,348
might be a lighting one might not be

1035
00:45:26,380 --> 00:45:29,059
hard to say I don't know exactly what

1036
00:45:28,429 --> 00:45:33,440
they're doing that they're trying to

1037
00:45:29,059 --> 00:45:35,269
pick out some some channels of the color

1038
00:45:33,440 --> 00:45:36,409
there so I don't know so this stuff we

1039
00:45:35,268 --> 00:45:38,268
don't necessarily care about this is

1040
00:45:36,409 --> 00:45:40,548
like the post filtering doing some

1041
00:45:38,268 --> 00:45:41,778
presumably working with how these two

1042
00:45:40,548 --> 00:45:43,759
samples want to get combined or

1043
00:45:41,778 --> 00:45:45,949
something like this so all we would

1044
00:45:43,759 --> 00:45:51,380
really need to edit is right here you

1045
00:45:45,949 --> 00:45:55,219
can see that T 1 X Y Z W right and you

1046
00:45:51,380 --> 00:45:55,970
can see on how we're taking the sample

1047
00:45:55,219 --> 00:46:00,108
this one

1048
00:45:55,969 --> 00:46:01,730
sample coming from texture one because

1049
00:46:00,108 --> 00:46:03,469
we're only taking one sample from it and

1050
00:46:01,730 --> 00:46:05,869
bilinear and mipmapping or both turned

1051
00:46:03,469 --> 00:46:09,469
off it means we will get no filtering

1052
00:46:05,869 --> 00:46:13,130
right so all we would really need to do

1053
00:46:09,469 --> 00:46:17,269
is expand this sample this line right

1054
00:46:13,130 --> 00:46:22,010
here to first figure out some more

1055
00:46:17,269 --> 00:46:23,929
places to take a sample from and then we

1056
00:46:22,010 --> 00:46:26,119
would sample it multiple times now

1057
00:46:23,929 --> 00:46:28,879
normally you can be a lot cheaper than

1058
00:46:26,119 --> 00:46:32,030
that normally if you turn mipmapping on

1059
00:46:28,880 --> 00:46:34,400
which we can't do because we're not in

1060
00:46:32,030 --> 00:46:37,040
control of the unity pipeline because we

1061
00:46:34,400 --> 00:46:38,690
don't on source code you can just take

1062
00:46:37,039 --> 00:46:40,489
one sample and what you do is you

1063
00:46:38,690 --> 00:46:42,530
precondition your UV coordinates and

1064
00:46:40,489 --> 00:46:44,059
then take a single bilinear sample and

1065
00:46:42,530 --> 00:46:50,390
that gives you perfect pixel art

1066
00:46:44,059 --> 00:46:53,420
upscaling but we can't do that but we

1067
00:46:50,389 --> 00:46:55,759
can't approximate it by just forcing the

1068
00:46:53,420 --> 00:46:57,920
GeForce to do a crap ton of extra

1069
00:46:55,760 --> 00:46:59,359
texture samples now fortunately they're

1070
00:46:57,920 --> 00:47:00,619
all from exactly the same place in the

1071
00:46:59,358 --> 00:47:02,449
texture so they're very very fast

1072
00:47:00,619 --> 00:47:03,619
texture samples but again you still

1073
00:47:02,449 --> 00:47:06,679
wouldn't want to do this you'd want to

1074
00:47:03,619 --> 00:47:09,140
just use the bilinear hardware and so

1075
00:47:06,679 --> 00:47:11,838
all I would really need to do is update

1076
00:47:09,139 --> 00:47:13,338
this sample line and what I would do is

1077
00:47:11,838 --> 00:47:15,230
I would take the sampling from the

1078
00:47:13,338 --> 00:47:17,929
texture and I would take the UV

1079
00:47:15,230 --> 00:47:22,088
coordinates and I would just add the

1080
00:47:17,929 --> 00:47:26,629
differential UV offset for sampling

1081
00:47:22,088 --> 00:47:28,309
inside the pixel I'm in right and let me

1082
00:47:26,630 --> 00:47:30,588
draw on the whiteboard what I would be

1083
00:47:28,309 --> 00:47:36,949
doing and then we can try to figure out

1084
00:47:30,588 --> 00:47:38,779
a way to coax our coax unity or somebody

1085
00:47:36,949 --> 00:47:42,139
to let us actually edit this shader

1086
00:47:38,780 --> 00:47:45,230
somehow and I don't know how to how best

1087
00:47:42,139 --> 00:47:47,629
to do that if this were an OpenGL app or

1088
00:47:45,230 --> 00:47:49,490
if they had shipped HLSL source somehow

1089
00:47:47,630 --> 00:47:51,530
we would probably just be able to do

1090
00:47:49,489 --> 00:47:53,419
that I don't think they did I think

1091
00:47:51,530 --> 00:47:55,760
those are like packed into the unity

1092
00:47:53,420 --> 00:47:57,680
files if you go out here you know the

1093
00:47:55,760 --> 00:48:00,710
best-case scenario is there just sitting

1094
00:47:57,679 --> 00:48:02,239
in some directory here but I'm pretty

1095
00:48:00,710 --> 00:48:04,159
sure they're not I'm pretty sure they're

1096
00:48:02,239 --> 00:48:08,399
like you know stuffed into this stuff

1097
00:48:04,159 --> 00:48:10,199
somewhere you know who knows where

1098
00:48:08,400 --> 00:48:11,338
but I'm pretty sure they're just kind of

1099
00:48:10,199 --> 00:48:15,889
you know they're probably in here

1100
00:48:11,338 --> 00:48:17,969
somewhere and and I don't know to what

1101
00:48:15,889 --> 00:48:19,858
to what extent we would ever have access

1102
00:48:17,969 --> 00:48:22,828
them I don't think for example there's

1103
00:48:19,858 --> 00:48:24,598
just an HLSL file sitting around because

1104
00:48:22,829 --> 00:48:26,640
they probably just compiled them unity

1105
00:48:24,599 --> 00:48:29,250
probably just compiles them and shoves

1106
00:48:26,639 --> 00:48:31,769
them in to the executable that's my

1107
00:48:29,250 --> 00:48:32,929
assumption I don't use unity so I don't

1108
00:48:31,769 --> 00:48:35,460
know

1109
00:48:32,929 --> 00:48:37,739
anyway let me pop over to the to the

1110
00:48:35,460 --> 00:48:39,059
blackboard for a second and just kind of

1111
00:48:37,739 --> 00:48:42,028
give you a sense

1112
00:48:39,059 --> 00:48:43,470
I accidentally hit the zoom there I

1113
00:48:42,028 --> 00:48:46,710
don't know I don't want to zoom in too

1114
00:48:43,469 --> 00:48:51,419
much see where we were at probably right

1115
00:48:46,710 --> 00:48:53,900
about there yeah let me go ahead and and

1116
00:48:51,420 --> 00:48:53,900
show you

1117
00:49:10,380 --> 00:49:14,680
so if we want a sample pixel-art

1118
00:49:13,239 --> 00:49:14,949
properly like I said there's two ways to

1119
00:49:14,679 --> 00:49:16,868
do it

1120
00:49:14,949 --> 00:49:18,278
I'll cover the brute force way first cuz

1121
00:49:16,869 --> 00:49:20,410
that's the only one we would really I

1122
00:49:18,278 --> 00:49:22,900
think be able to inject in the children

1123
00:49:20,409 --> 00:49:24,489
in Ward a best-case scenario and then we

1124
00:49:22,900 --> 00:49:25,690
can also just briefly mention what you

1125
00:49:24,489 --> 00:49:28,929
would do for the more efficient version

1126
00:49:25,690 --> 00:49:30,849
if you are grading your own game so what

1127
00:49:28,929 --> 00:49:33,399
happens with pixel are up sampling well

1128
00:49:30,849 --> 00:49:36,190
what happens is normally we you know

1129
00:49:33,400 --> 00:49:38,349
when we talk about a texture we pretend

1130
00:49:36,190 --> 00:49:39,909
that the texture is basically a capture

1131
00:49:38,349 --> 00:49:41,950
of something that had like infinite

1132
00:49:39,909 --> 00:49:43,750
resolution right we pretend that we were

1133
00:49:41,949 --> 00:49:45,578
taking like a photograph or something

1134
00:49:43,750 --> 00:49:46,989
and then we're trying to reconstruct

1135
00:49:45,579 --> 00:49:48,519
what that photograph will look like it

1136
00:49:46,989 --> 00:49:50,169
was stamped onto something in the world

1137
00:49:48,519 --> 00:49:52,389
like for example if we took a photograph

1138
00:49:50,170 --> 00:49:55,510
of a brick wall and then stamped it on a

1139
00:49:52,389 --> 00:49:57,190
flat polygon in our game we want to look

1140
00:49:55,510 --> 00:49:59,740
like a brick wall what that means is

1141
00:49:57,190 --> 00:50:02,650
when we reconstructed we assumed that

1142
00:49:59,739 --> 00:50:05,528
the points that we have the texels that

1143
00:50:02,650 --> 00:50:07,568
we have in our texture are actually just

1144
00:50:05,528 --> 00:50:09,519
sample points of something that was

1145
00:50:07,568 --> 00:50:11,788
actually much more resolute to begin

1146
00:50:09,519 --> 00:50:15,159
with that picture of the brick wall

1147
00:50:11,789 --> 00:50:17,380
might have only been 1024 by 1024 or

1148
00:50:15,159 --> 00:50:19,480
something but in the real world atoms

1149
00:50:17,380 --> 00:50:21,519
are much much smaller than that we

1150
00:50:19,480 --> 00:50:23,679
should have had a 80 billion by 80

1151
00:50:21,519 --> 00:50:25,989
billion picture of the of the brick wall

1152
00:50:23,679 --> 00:50:27,639
and so when we go to sample it we just

1153
00:50:25,989 --> 00:50:29,469
assume that well what's in between the

1154
00:50:27,639 --> 00:50:30,670
pixels is just maybe some smooth blend

1155
00:50:29,469 --> 00:50:32,618
between the two because we don't

1156
00:50:30,670 --> 00:50:35,528
actually have the extra detail but we

1157
00:50:32,619 --> 00:50:38,289
know there was extra detail pixel art is

1158
00:50:35,528 --> 00:50:40,960
not that way pixel art is sort of like

1159
00:50:38,289 --> 00:50:43,329
saying there is no extra detail the

1160
00:50:40,960 --> 00:50:45,429
point is you can see the pixels there

1161
00:50:43,329 --> 00:50:47,710
are big blocks there isn't anything in

1162
00:50:45,429 --> 00:50:50,588
between them they are not samples of

1163
00:50:47,710 --> 00:50:53,108
some more high-resolution signal

1164
00:50:50,588 --> 00:50:55,989
underneath they are the whole signal

1165
00:50:53,108 --> 00:50:59,230
what that means is that if you take some

1166
00:50:55,989 --> 00:51:01,449
piece of pixel art that I make let's say

1167
00:50:59,230 --> 00:51:06,338
I make something that looks like this

1168
00:51:01,449 --> 00:51:08,828
right when I go to draw that on the

1169
00:51:06,338 --> 00:51:13,659
screen if my screen is like way more

1170
00:51:08,829 --> 00:51:15,339
resolute so you know maybe I'm drawing

1171
00:51:13,659 --> 00:51:17,288
it on a screen that's way more resolute

1172
00:51:15,338 --> 00:51:20,409
as the case of pixel art I'm gonna map

1173
00:51:17,289 --> 00:51:24,059
this thing and let's say onto the screen

1174
00:51:20,409 --> 00:51:24,058
it maps quite large

1175
00:51:24,210 --> 00:51:37,480
maybe a little too large right so this

1176
00:51:32,489 --> 00:51:38,859
maps to this square here right I'll try

1177
00:51:37,480 --> 00:51:44,969
to draw that a little better so you can

1178
00:51:38,860 --> 00:51:47,260
see it here's my pixel my pixel art and

1179
00:51:44,969 --> 00:51:49,949
so I'm gonna change my terminology a

1180
00:51:47,260 --> 00:51:53,530
little bit I'm gonna call it Texel art

1181
00:51:49,949 --> 00:51:56,109
temporarily to determine to

1182
00:51:53,530 --> 00:51:58,570
differentiate between the pixels on the

1183
00:51:56,110 --> 00:52:01,240
screen and the texels in our texture

1184
00:51:58,570 --> 00:52:03,340
right so the pixel artist is really a

1185
00:52:01,239 --> 00:52:04,839
Texel artist nowadays they're not

1186
00:52:03,340 --> 00:52:06,610
drawing pixels because pixels are things

1187
00:52:04,840 --> 00:52:08,410
on the screen they're drawing texels

1188
00:52:06,610 --> 00:52:10,420
which are things in the texture map and

1189
00:52:08,409 --> 00:52:12,969
those texels are getting put on the

1190
00:52:10,420 --> 00:52:14,980
screen and ideally what we want is we

1191
00:52:12,969 --> 00:52:16,629
want them to look like little blocks

1192
00:52:14,980 --> 00:52:19,599
this is different than pretty much

1193
00:52:16,630 --> 00:52:21,640
anything else we do in graphics we never

1194
00:52:19,599 --> 00:52:23,710
want our textures to look like little

1195
00:52:21,639 --> 00:52:26,879
blocks that's considered ugly and bad

1196
00:52:23,710 --> 00:52:29,740
most of the time in pixel art games

1197
00:52:26,880 --> 00:52:31,329
let's call them textile art games we

1198
00:52:29,739 --> 00:52:34,539
actually want to look like blocks so

1199
00:52:31,329 --> 00:52:36,460
what that means is we can't just turn on

1200
00:52:34,539 --> 00:52:38,230
naive bilinear filtering why because

1201
00:52:36,460 --> 00:52:40,329
let's see what that will do let's

1202
00:52:38,230 --> 00:52:42,670
suppose we turned on naive bilinear

1203
00:52:40,329 --> 00:52:45,849
filtering and we looked what happened to

1204
00:52:42,670 --> 00:52:49,900
this grid of pixels here on the screen

1205
00:52:45,849 --> 00:52:52,029
well this pixel here would have gotten

1206
00:52:49,900 --> 00:52:53,889
basically just this color because it's

1207
00:52:52,030 --> 00:52:57,220
gonna hit the border and clamp out here

1208
00:52:53,889 --> 00:52:59,230
this pixel here would start to blend it

1209
00:52:57,219 --> 00:53:03,059
would blend between this pixel and this

1210
00:52:59,230 --> 00:53:05,889
pixel here because it is some distance

1211
00:53:03,059 --> 00:53:06,460
towards this side right as well actually

1212
00:53:05,889 --> 00:53:07,449
that's not true

1213
00:53:06,460 --> 00:53:08,949
I'd have to probably cause the center

1214
00:53:07,449 --> 00:53:11,409
line first let's talk about this pixel

1215
00:53:08,949 --> 00:53:14,019
in this pixel as I got to this pixel I

1216
00:53:11,409 --> 00:53:17,230
would start to blend between this and

1217
00:53:14,019 --> 00:53:18,940
this right so instead of getting solid

1218
00:53:17,230 --> 00:53:21,269
let's say this is red and this is black

1219
00:53:18,940 --> 00:53:23,470
instead of getting a solid red color

1220
00:53:21,269 --> 00:53:25,840
which is what I probably want for my

1221
00:53:23,469 --> 00:53:27,489
textile art right instead of a solid red

1222
00:53:25,840 --> 00:53:29,440
color I get a blend between red and

1223
00:53:27,489 --> 00:53:31,329
black and then here I get even more

1224
00:53:29,440 --> 00:53:35,320
black until finally when I'm here I get

1225
00:53:31,329 --> 00:53:36,429
complete black right that is not what I

1226
00:53:35,320 --> 00:53:38,650
wanted at all

1227
00:53:36,429 --> 00:53:41,259
this because this is a text alert game

1228
00:53:38,650 --> 00:53:44,260
this should have been full read right

1229
00:53:41,260 --> 00:53:47,530
because we're talking about blowing this

1230
00:53:44,260 --> 00:53:51,280
entire Texel up so that it looks like a

1231
00:53:47,530 --> 00:53:56,410
solid rectangle right so anything all of

1232
00:53:51,280 --> 00:53:57,790
these all of these pixels here should

1233
00:53:56,409 --> 00:54:00,250
have been solid red

1234
00:53:57,789 --> 00:54:02,409
even though bilinear filtering says that

1235
00:54:00,250 --> 00:54:05,110
it should be a blend between here and

1236
00:54:02,409 --> 00:54:13,239
here it probably would be about let's

1237
00:54:05,110 --> 00:54:14,860
say 15 percent black 85 percent red that

1238
00:54:13,239 --> 00:54:17,589
is what this would have been right and

1239
00:54:14,860 --> 00:54:20,860
that's precisely why turning on bilinear

1240
00:54:17,590 --> 00:54:23,320
filtering looks so bad with with Texel

1241
00:54:20,860 --> 00:54:25,390
art with pixel art right games he's

1242
00:54:23,320 --> 00:54:27,550
because you get this smearing effect

1243
00:54:25,389 --> 00:54:30,489
because it's pretending that there was a

1244
00:54:27,550 --> 00:54:33,070
signal in between you know that we just

1245
00:54:30,489 --> 00:54:37,799
weren't sampling where it wasn't just a

1246
00:54:33,070 --> 00:54:37,800
hard step from red to black it wasn't

1247
00:54:38,789 --> 00:54:48,940
this right red there black here this is

1248
00:54:45,940 --> 00:54:52,599
Texel art right this is bilinear

1249
00:54:48,940 --> 00:54:55,570
filtering so we want that hard step to

1250
00:54:52,599 --> 00:54:57,039
actually appear right so what most games

1251
00:54:55,570 --> 00:54:58,870
new and what children of mordor does if

1252
00:54:57,039 --> 00:55:02,320
they just turn it off right

1253
00:54:58,869 --> 00:55:04,389
so they take bilinear filtering and they

1254
00:55:02,320 --> 00:55:05,680
just turn it off they turn off MIT

1255
00:55:04,389 --> 00:55:08,679
mapping as well but that's a separate

1256
00:55:05,679 --> 00:55:10,449
thing we could timeout a second turning

1257
00:55:08,679 --> 00:55:13,859
off by linear means now there's no

1258
00:55:10,449 --> 00:55:16,899
filtering no filtering whatsoever right

1259
00:55:13,860 --> 00:55:18,910
so what happens in this case once you

1260
00:55:16,900 --> 00:55:20,349
turn off bilinear filtering well if you

1261
00:55:18,909 --> 00:55:21,730
turn off bilinear filtering that what

1262
00:55:20,349 --> 00:55:24,429
happens is it just picks the nearest

1263
00:55:21,730 --> 00:55:26,170
neighbor it means this will probably be

1264
00:55:24,429 --> 00:55:29,679
red because it looks like the center is

1265
00:55:26,170 --> 00:55:32,260
maybe on the red side right and this

1266
00:55:29,679 --> 00:55:36,009
will definitely be black problem solved

1267
00:55:32,260 --> 00:55:36,730
right problem is not solved not by a

1268
00:55:36,010 --> 00:55:39,190
long shot

1269
00:55:36,730 --> 00:55:41,530
why isn't the problem solved well the

1270
00:55:39,190 --> 00:55:44,409
problem is these pixels along the edge

1271
00:55:41,530 --> 00:55:46,630
turning off by linear does make this get

1272
00:55:44,409 --> 00:55:50,139
the correct result which is solid red it

1273
00:55:46,630 --> 00:55:52,619
does not make this get this

1274
00:55:50,139 --> 00:55:56,078
result why because there is now no

1275
00:55:52,619 --> 00:55:58,778
sub-pixel sampling now you could just

1276
00:55:56,079 --> 00:56:00,339
turn on some kind of over sampling on

1277
00:55:58,778 --> 00:56:06,699
your whole screen and solve the problem

1278
00:56:00,338 --> 00:56:09,159
that way but we can do much better let's

1279
00:56:06,699 --> 00:56:19,500
take a look at what's going on all right

1280
00:56:09,159 --> 00:56:23,048
so here's my pixel grid I should add two

1281
00:56:19,500 --> 00:56:25,358
to Milton because it's open-source I

1282
00:56:23,048 --> 00:56:27,880
believe I should add something to Milton

1283
00:56:25,358 --> 00:56:31,420
that allows me to just drop down a

1284
00:56:27,880 --> 00:56:34,180
rectangular grid anyone who wants to do

1285
00:56:31,420 --> 00:56:36,039
something cool add a tool to Milton

1286
00:56:34,179 --> 00:56:39,788
allows you just drag a rectangle grid

1287
00:56:36,039 --> 00:56:42,069
right it would be so useful like

1288
00:56:39,789 --> 00:56:43,510
rectangle grid and lines and stuff if

1289
00:56:42,068 --> 00:56:45,400
there were quick hotkeys you could just

1290
00:56:43,510 --> 00:56:47,109
hold down a hotkey draw a thing and it

1291
00:56:45,400 --> 00:56:49,990
draws a grid or something and then goes

1292
00:56:47,108 --> 00:56:54,788
back to regular pen mode so good right

1293
00:56:49,989 --> 00:56:55,828
so good anyway so here's what's gonna

1294
00:56:54,789 --> 00:57:03,599
happen

1295
00:56:55,829 --> 00:57:08,048
I've got this pixel Texel art right and

1296
00:57:03,599 --> 00:57:12,759
the problem that we have is it's not

1297
00:57:08,048 --> 00:57:15,159
going to it's not going to stay in one

1298
00:57:12,759 --> 00:57:16,990
place if it was it would probably be

1299
00:57:15,159 --> 00:57:22,239
okay but what's gonna happen is the

1300
00:57:16,989 --> 00:57:24,068
camera and the objects are moving very

1301
00:57:22,239 --> 00:57:26,768
smoothly through the world they're

1302
00:57:24,068 --> 00:57:28,058
moving at very high resolution higher

1303
00:57:26,768 --> 00:57:30,669
than the pixel grid through the world

1304
00:57:28,059 --> 00:57:33,548
and so what happens is they end up in

1305
00:57:30,670 --> 00:57:37,088
places that are at sub pixel locations

1306
00:57:33,548 --> 00:57:41,159
on the grid so for example let's take a

1307
00:57:37,088 --> 00:57:41,159
look at what happens right here

1308
00:57:44,278 --> 00:57:48,429
there and then I'm gonna draw another

1309
00:57:46,659 --> 00:57:50,608
one that's what happens when it's

1310
00:57:48,429 --> 00:57:52,629
perfectly aligned

1311
00:57:50,608 --> 00:57:54,400
so I'm flitting this to two places

1312
00:57:52,630 --> 00:57:56,338
you'll have to apologize I have to

1313
00:57:54,400 --> 00:57:59,858
apologize for my terrible pixel grid

1314
00:57:56,338 --> 00:58:01,210
right turn off by linear sampling and

1315
00:57:59,858 --> 00:58:05,528
then look at what happens when I'm

1316
00:58:01,210 --> 00:58:09,579
exactly aligned to the pixel right and I

1317
00:58:05,528 --> 00:58:14,039
get exactly my Texel art back this is

1318
00:58:09,579 --> 00:58:18,010
what you know you wanted and it happened

1319
00:58:14,039 --> 00:58:20,770
but shift it a half pixel over and all

1320
00:58:18,010 --> 00:58:25,450
of a sudden were in a really really bad

1321
00:58:20,769 --> 00:58:28,088
state this is exactly a half pixel over

1322
00:58:25,449 --> 00:58:29,379
then I'm probably going to be outside

1323
00:58:28,088 --> 00:58:31,028
the pixel center here because of the

1324
00:58:29,380 --> 00:58:34,140
rounding rule so it's gonna happen is

1325
00:58:31,028 --> 00:58:37,179
this is gonna not have anything right

1326
00:58:34,139 --> 00:58:39,489
this if you look at which ones we're

1327
00:58:37,179 --> 00:58:41,980
picking up here so I look at what this

1328
00:58:39,489 --> 00:58:48,578
actually looks like right and it looks

1329
00:58:41,980 --> 00:58:53,528
like something like this as I overlay it

1330
00:58:48,579 --> 00:58:56,230
right so if I were to actually fill this

1331
00:58:53,528 --> 00:59:00,298
in this is the part of the of the thing

1332
00:58:56,230 --> 00:59:04,960
that's filled in at a half pixel offset

1333
00:59:00,298 --> 00:59:08,349
right and so what happens at the half

1334
00:59:04,960 --> 00:59:14,108
pixel offset exactly at the half pixel

1335
00:59:08,349 --> 00:59:15,940
offset right is that I jump from having

1336
00:59:14,108 --> 00:59:17,588
my sample like this sample right here

1337
00:59:15,940 --> 00:59:20,019
would probably go this way and this

1338
00:59:17,588 --> 00:59:29,338
sample would go this way I now feel at

1339
00:59:20,019 --> 00:59:32,259
the half pixel right I feel one movement

1340
00:59:29,338 --> 00:59:36,849
to the right so as this thing is sliding

1341
00:59:32,260 --> 00:59:40,778
over separately at 0.5 offset right half

1342
00:59:36,849 --> 00:59:46,630
a pixel I jump one just immediately jump

1343
00:59:40,778 --> 00:59:49,269
one right and at 0.0 I'm on the previous

1344
00:59:46,630 --> 00:59:52,568
one right so at point five I would jump

1345
00:59:49,269 --> 00:59:54,460
I would then travel another entire the

1346
00:59:52,568 --> 00:59:57,289
next time that would happen would be at

1347
00:59:54,460 --> 00:59:58,849
one point five right because that one I

1348
00:59:57,289 --> 01:00:01,250
still then I'm aligned with the grid

1349
00:59:58,849 --> 01:00:07,279
again so I'm still here and then at 0.5

1350
01:00:01,250 --> 01:00:09,500
I jump onto the side right now if we

1351
01:00:07,280 --> 01:00:12,860
just turned off bilinear and then we're

1352
01:00:09,500 --> 01:00:14,809
totally pixel aligned all the time here

1353
01:00:12,860 --> 01:00:16,490
but just moving around sub-pixel that's

1354
01:00:14,809 --> 01:00:18,409
what you would see you would see just

1355
01:00:16,489 --> 01:00:20,209
shift you know and slowly jerk the

1356
01:00:18,409 --> 01:00:23,539
pixels around right you would just see

1357
01:00:20,210 --> 01:00:25,760
the pixels roll that's not too

1358
01:00:23,539 --> 01:00:27,079
objectionable it's better than what's

1359
01:00:25,760 --> 01:00:28,580
happening in children of morta because

1360
01:00:27,079 --> 01:00:30,199
I'll talk about that the next step now

1361
01:00:28,579 --> 01:00:32,630
that makes things look really bad right

1362
01:00:30,199 --> 01:00:35,449
but it's still not great because it

1363
01:00:32,630 --> 01:00:37,970
means that I see this for the entire

1364
01:00:35,449 --> 01:00:40,369
time right I see that for the entire

1365
01:00:37,969 --> 01:00:42,619
time right up till I hit point five and

1366
01:00:40,369 --> 01:00:45,469
then it slaps over one so what I would

1367
01:00:42,619 --> 01:00:48,380
rather have done is when we're sampling

1368
01:00:45,469 --> 01:00:50,719
this pixel I would have rather pretended

1369
01:00:48,380 --> 01:00:53,690
that I actually had more resolution and

1370
01:00:50,719 --> 01:00:57,529
say let's take the blend inside this

1371
01:00:53,690 --> 01:01:00,289
pixel right let's take the blend and say

1372
01:00:57,530 --> 01:01:02,240
let me sample between these two in the

1373
01:01:00,289 --> 01:01:03,949
way that I would have for bilinear and i

1374
01:01:02,239 --> 01:01:06,259
would have gotten a better result here

1375
01:01:03,949 --> 01:01:07,759
right as it slid i would have seen this

1376
01:01:06,260 --> 01:01:09,290
pixel get darker and this pixel get

1377
01:01:07,760 --> 01:01:10,670
brighter and it would have appeared that

1378
01:01:09,289 --> 01:01:14,779
the thing would would slide slowly

1379
01:01:10,670 --> 01:01:17,690
across right okay so hopefully that

1380
01:01:14,780 --> 01:01:19,580
makes some sense if i now go to the case

1381
01:01:17,690 --> 01:01:22,130
of children amorta which is the bad case

1382
01:01:19,579 --> 01:01:25,309
what we actually have is something much

1383
01:01:22,130 --> 01:01:27,619
worse and that same sort of jumping at

1384
01:01:25,309 --> 01:01:33,650
point 5s becomes a really objectionable

1385
01:01:27,619 --> 01:01:36,559
artifact what we actually have is the

1386
01:01:33,650 --> 01:01:38,869
textile art is much larger but not by an

1387
01:01:36,559 --> 01:01:40,309
even factor so what happens skin does

1388
01:01:38,869 --> 01:01:41,779
this we've got a zooming camera right so

1389
01:01:40,309 --> 01:01:43,570
there's a continuous change of size

1390
01:01:41,780 --> 01:01:46,400
relative to the pixel grid on the screen

1391
01:01:43,570 --> 01:01:49,100
so if here are my pixels what I actually

1392
01:01:46,400 --> 01:01:53,079
end up with is I actually end up with

1393
01:01:49,099 --> 01:01:53,079
this pixel art here that I drew before

1394
01:01:54,489 --> 01:02:00,679
mapping to something totally unaware

1395
01:01:57,849 --> 01:02:03,699
so now what happens is I get something

1396
01:02:00,679 --> 01:02:03,699
more like this

1397
01:02:12,530 --> 01:02:18,200
trying to actually count this in some

1398
01:02:15,650 --> 01:02:20,269
way that I can draw it reasonably again

1399
01:02:18,199 --> 01:02:24,460
those pixel grid somebody add that to

1400
01:02:20,269 --> 01:02:24,460
Milton Milton please it would be so good

1401
01:02:29,440 --> 01:02:34,400
okay

1402
01:02:31,539 --> 01:02:36,019
so now what you can see is the true

1403
01:02:34,400 --> 01:02:37,880
problem that we're seeing why we're

1404
01:02:36,019 --> 01:02:39,139
seeing all these sort of weird like it

1405
01:02:37,880 --> 01:02:41,030
looks like things are kind of made out

1406
01:02:39,139 --> 01:02:43,608
of jell-o and they mush together as the

1407
01:02:41,030 --> 01:02:46,190
camera pans and stuff the problem comes

1408
01:02:43,608 --> 01:02:49,119
when a single Texel which we're trying

1409
01:02:46,190 --> 01:02:52,369
to enlarge and this is even not as

1410
01:02:49,119 --> 01:02:53,630
they're much larger like on children

1411
01:02:52,369 --> 01:02:55,309
Morda they probably take up several

1412
01:02:53,630 --> 01:02:57,858
pixels right they're probably more like

1413
01:02:55,309 --> 01:03:01,190
you know that big or something but just

1414
01:02:57,858 --> 01:03:03,710
for sake of easy illustration here what

1415
01:03:01,190 --> 01:03:07,300
ends up happening is a single Texel

1416
01:03:03,710 --> 01:03:11,480
actually maps to multiple pixels but as

1417
01:03:07,300 --> 01:03:13,519
this Texel slides what you can see is it

1418
01:03:11,480 --> 01:03:15,500
and you can see this just in the fact

1419
01:03:13,519 --> 01:03:18,039
that I've got two of them already these

1420
01:03:15,500 --> 01:03:22,550
are both the same size but this one

1421
01:03:18,039 --> 01:03:25,190
occupies at least like you know several

1422
01:03:22,550 --> 01:03:28,310
texels here this one's like four by four

1423
01:03:25,190 --> 01:03:31,570
right but this one because of how the

1424
01:03:28,309 --> 01:03:35,900
grids happen to a line only maps to one

1425
01:03:31,570 --> 01:03:39,140
right so instead of being too wide and

1426
01:03:35,900 --> 01:03:42,369
too tall which is what my first Texel is

1427
01:03:39,139 --> 01:03:46,909
this one's only one wide and one tall

1428
01:03:42,369 --> 01:03:49,700
right as it moves across it will

1429
01:03:46,909 --> 01:03:53,569
constantly alternate between those two

1430
01:03:49,699 --> 01:03:56,598
as this slides into position here it

1431
01:03:53,570 --> 01:03:59,300
will become too wide and then as it

1432
01:03:56,599 --> 01:04:02,300
slides out of position here again it

1433
01:03:59,300 --> 01:04:05,359
will go back to one wide so as it slides

1434
01:04:02,300 --> 01:04:07,310
across all your sprites go to wide line

1435
01:04:05,358 --> 01:04:08,900
one wide line to wide line one line line

1436
01:04:07,309 --> 01:04:11,389
to line line one and you get this like

1437
01:04:08,900 --> 01:04:13,190
rubber bear right and that's happening

1438
01:04:11,389 --> 01:04:15,348
at two dimensions at once so you're

1439
01:04:13,190 --> 01:04:18,920
getting this weird like fractured thing

1440
01:04:15,349 --> 01:04:21,470
as it moves through the world again no

1441
01:04:18,920 --> 01:04:24,349
reason for this to happen all we have to

1442
01:04:21,469 --> 01:04:26,269
do is recognize that we're just trying

1443
01:04:24,349 --> 01:04:30,289
to do sub-pixel rendering again

1444
01:04:26,269 --> 01:04:33,530
with something that is Texel art okay so

1445
01:04:30,289 --> 01:04:36,469
all we want to do is when we sample

1446
01:04:33,530 --> 01:04:39,410
these pixels we just look is the entire

1447
01:04:36,469 --> 01:04:42,949
pixel covered by the Texel art of one

1448
01:04:39,409 --> 01:04:44,089
texel if it is don't bilinear blend cuz

1449
01:04:42,949 --> 01:04:45,919
that's the thing that gives us the

1450
01:04:44,090 --> 01:04:48,350
artifacts that we don't want right so

1451
01:04:45,920 --> 01:04:51,050
for it because for example let's suppose

1452
01:04:48,349 --> 01:04:53,900
we took a look at what should happen on

1453
01:04:51,050 --> 01:04:56,269
this Texel here if we just turn on

1454
01:04:53,900 --> 01:04:59,210
bilinear filtering we would get a nasty

1455
01:04:56,269 --> 01:05:02,690
smear we would get a smear of like 75%

1456
01:04:59,210 --> 01:05:05,840
of this thing we don't want that what we

1457
01:05:02,690 --> 01:05:09,349
want is a smear of only the percentage

1458
01:05:05,840 --> 01:05:11,510
coverage that that Texel is on this

1459
01:05:09,349 --> 01:05:16,009
pixel which is not what we would get

1460
01:05:11,510 --> 01:05:20,360
right because remember if we look at

1461
01:05:16,010 --> 01:05:27,860
this in 1d we want this right and if

1462
01:05:20,360 --> 01:05:32,150
these are our pixels okay we don't want

1463
01:05:27,860 --> 01:05:37,400
that line this is this right here this

1464
01:05:32,150 --> 01:05:39,260
line that's by linear filtering or in

1465
01:05:37,400 --> 01:05:40,160
this case just linear filtering because

1466
01:05:39,260 --> 01:05:45,530
we're looking at it in one dimension

1467
01:05:40,159 --> 01:05:49,339
right and this is what we wanted turning

1468
01:05:45,530 --> 01:05:52,190
off all filtering means that you simply

1469
01:05:49,340 --> 01:05:54,470
pick either the min value or the max

1470
01:05:52,190 --> 01:05:56,869
value right either the Texel that's

1471
01:05:54,469 --> 01:06:02,569
filled or the Texel next to it right you

1472
01:05:56,869 --> 01:06:05,750
know either this or this I get one of

1473
01:06:02,570 --> 01:06:07,609
the other right turning a linear

1474
01:06:05,750 --> 01:06:10,429
filtering means I sample the line

1475
01:06:07,608 --> 01:06:14,239
between them I want neither what I want

1476
01:06:10,429 --> 01:06:17,089
is this pixel to pick this value this

1477
01:06:14,239 --> 01:06:18,409
pixel to pick this value so I don't want

1478
01:06:17,090 --> 01:06:20,570
the line at all and I don't want any

1479
01:06:18,409 --> 01:06:24,799
filtering on those and then when I'm in

1480
01:06:20,570 --> 01:06:27,050
between instead of sampling the line at

1481
01:06:24,800 --> 01:06:29,660
the center point of the pixel which is

1482
01:06:27,050 --> 01:06:33,800
what linear filtering would do I instead

1483
01:06:29,659 --> 01:06:36,829
want to say how much of the pixel is

1484
01:06:33,800 --> 01:06:39,980
covered so I want to know what is this

1485
01:06:36,829 --> 01:06:43,869
percentage what percentage of the pixel

1486
01:06:39,980 --> 01:06:48,440
is covered by this thing makes sense

1487
01:06:43,869 --> 01:06:50,600
that's what we're trying to do now the

1488
01:06:48,440 --> 01:06:52,550
easiest way to do that and the way

1489
01:06:50,599 --> 01:06:55,699
that's the least efficient is just spam

1490
01:06:52,550 --> 01:06:57,230
a ton of samples right so let's say we

1491
01:06:55,699 --> 01:06:59,659
turn off linear filtering so we're not

1492
01:06:57,230 --> 01:07:01,309
sampling the line anymore just sample a

1493
01:06:59,659 --> 01:07:04,670
ton of samples and average them together

1494
01:07:01,309 --> 01:07:06,920
right that way I'll get you know let's

1495
01:07:04,670 --> 01:07:09,170
say I go sample 16 samples on this thing

1496
01:07:06,920 --> 01:07:12,470
all 16 will come back with this color

1497
01:07:09,170 --> 01:07:13,940
exactly results I wanted most will come

1498
01:07:12,469 --> 01:07:15,858
back with the color but some will come

1499
01:07:13,940 --> 01:07:17,720
with the with the neighboring color so

1500
01:07:15,858 --> 01:07:20,779
you know maybe it's you know something

1501
01:07:17,719 --> 01:07:22,579
like 12 and 4 again exactly what I want

1502
01:07:20,780 --> 01:07:24,560
a Burrage those together as it slides

1503
01:07:22,579 --> 01:07:27,949
through it gets darker as you go by the

1504
01:07:24,559 --> 01:07:31,639
samples right and then finally here I

1505
01:07:27,949 --> 01:07:36,618
get all this color so if I want to do

1506
01:07:31,639 --> 01:07:38,629
what is basically a you know some kind

1507
01:07:36,619 --> 01:07:40,550
of a grid let's say I did this would be

1508
01:07:38,630 --> 01:07:43,190
way too many samples but let's say did 8

1509
01:07:40,550 --> 01:07:46,970
by 8 right that's 64 samples way too

1510
01:07:43,190 --> 01:07:50,210
many samples oh well so if I did an 8x8

1511
01:07:46,969 --> 01:07:54,349
grid of samples in my pixel so I just

1512
01:07:50,210 --> 01:08:02,869
like you know sample 8x8 let me actually

1513
01:07:54,349 --> 01:08:08,509
draw it for you so if I actually do 8 by

1514
01:08:02,869 --> 01:08:11,510
8 samples right if I actually do 64

1515
01:08:08,510 --> 01:08:14,450
samples inside my pixel with the correct

1516
01:08:11,510 --> 01:08:17,659
offset on the pixel average those

1517
01:08:14,449 --> 01:08:20,929
results together that gives me a 64

1518
01:08:17,659 --> 01:08:23,028
shade right sample right which is not

1519
01:08:20,930 --> 01:08:25,759
great but it's a lot better than not

1520
01:08:23,029 --> 01:08:28,040
doing it so that's one thing to do you

1521
01:08:25,759 --> 01:08:30,350
could crank those up to 256 samples if

1522
01:08:28,039 --> 01:08:31,670
you want to again really getting very

1523
01:08:30,350 --> 01:08:33,319
expensive for the graphics card so you

1524
01:08:31,670 --> 01:08:35,359
don't want to do this but then that

1525
01:08:33,319 --> 01:08:37,819
would give you a full two and a six

1526
01:08:35,359 --> 01:08:39,500
shade sample but only 16 in either

1527
01:08:37,819 --> 01:08:42,289
direction right so that means you would

1528
01:08:39,500 --> 01:08:43,579
still see a 16 step stare as the thing

1529
01:08:42,289 --> 01:08:46,939
moves from one to the other which is not

1530
01:08:43,579 --> 01:08:49,369
as good right but it's probably the best

1531
01:08:46,939 --> 01:08:53,828
we can do if we have to inject ourselves

1532
01:08:49,369 --> 01:08:57,139
into somebody's pipeline right now

1533
01:08:53,828 --> 01:09:05,210
how would we do this really well so that

1534
01:08:57,139 --> 01:09:10,009
it's both basically free almost and

1535
01:09:05,210 --> 01:09:11,929
perfect right how do we do this well if

1536
01:09:10,009 --> 01:09:15,649
we're in control of the pipeline if we

1537
01:09:11,929 --> 01:09:16,880
write this game right then it's really

1538
01:09:15,649 --> 01:09:19,098
easy for us to solve this problem

1539
01:09:16,880 --> 01:09:21,739
because all we do is leave linear

1540
01:09:19,099 --> 01:09:24,020
filtering turned on because bilinear

1541
01:09:21,738 --> 01:09:26,750
filtering does exactly what we want it

1542
01:09:24,020 --> 01:09:28,699
blends the two colors from the two

1543
01:09:26,750 --> 01:09:30,738
neighboring texels the only problem is

1544
01:09:28,698 --> 01:09:31,368
it doesn't blend them at the right ratio

1545
01:09:30,738 --> 01:09:35,809
right

1546
01:09:31,368 --> 01:09:38,389
what's linear filtering what is it

1547
01:09:35,810 --> 01:09:41,210
right well linear filtering is pretty

1548
01:09:38,389 --> 01:09:43,969
simple it's just computing some blend

1549
01:09:41,210 --> 01:09:46,429
coefficient right and it's saying one

1550
01:09:43,969 --> 01:09:48,739
minus the blend coefficient times color

1551
01:09:46,429 --> 01:09:50,960
zero plus the blend coefficient times

1552
01:09:48,738 --> 01:09:52,818
color one this is the entire code this

1553
01:09:50,960 --> 01:09:58,460
is the entire thing right if this is my

1554
01:09:52,819 --> 01:10:00,829
blend coefficient right that's exactly

1555
01:09:58,460 --> 01:10:04,310
what we want remember if I was to take a

1556
01:10:00,828 --> 01:10:07,219
huge number of samples a million samples

1557
01:10:04,310 --> 01:10:10,429
one billion trillion samples inside my

1558
01:10:07,219 --> 01:10:13,069
pixel right and then I averaged all the

1559
01:10:10,429 --> 01:10:17,090
samples together what do I know about

1560
01:10:13,069 --> 01:10:21,198
that result well all of the samples are

1561
01:10:17,090 --> 01:10:24,760
coming from in between to some texels on

1562
01:10:21,198 --> 01:10:29,029
my texture map if this is my texture map

1563
01:10:24,760 --> 01:10:31,520
this pixel maps to something in here

1564
01:10:29,029 --> 01:10:34,328
that is only because I remember this is

1565
01:10:31,520 --> 01:10:37,489
pixel art it's big it's blocky right

1566
01:10:34,328 --> 01:10:39,889
it's coming from for total samples

1567
01:10:37,488 --> 01:10:42,678
there's only four total texture places

1568
01:10:39,889 --> 01:10:44,000
to sample from for any given pixel a lot

1569
01:10:42,679 --> 01:10:45,679
of times there might only be two or

1570
01:10:44,000 --> 01:10:48,078
something right if it's if it's like

1571
01:10:45,679 --> 01:10:50,840
that pixel there or something right so I

1572
01:10:48,078 --> 01:10:53,719
know that my entire thing comes down to

1573
01:10:50,840 --> 01:10:55,639
one bilinear sample and no matter how

1574
01:10:53,719 --> 01:10:59,078
many samples I took took I'm always

1575
01:10:55,639 --> 01:11:01,699
hitting one of these colors right

1576
01:10:59,078 --> 01:11:03,469
so for bilinear right we're talking

1577
01:11:01,698 --> 01:11:06,710
about two of these it's U and V right so

1578
01:11:03,469 --> 01:11:08,980
for bilinear i've got u equals my

1579
01:11:06,710 --> 01:11:14,300
horrors on

1580
01:11:08,979 --> 01:11:21,919
coefficient and V equals my vertical

1581
01:11:14,300 --> 01:11:25,550
coefficient right and so all I need to

1582
01:11:21,920 --> 01:11:27,319
know is that if I was going to apply by

1583
01:11:25,550 --> 01:11:28,789
law you're sampling right which by

1584
01:11:27,319 --> 01:11:30,799
linear sampling is just saying all right

1585
01:11:28,789 --> 01:11:33,619
I want to do linear sampling I want to

1586
01:11:30,800 --> 01:11:35,300
do it on four things at once so here's

1587
01:11:33,619 --> 01:11:37,159
my color zero here's my color one here's

1588
01:11:35,300 --> 01:11:39,800
my Clara - here's my color three right

1589
01:11:37,159 --> 01:11:41,989
I'm just gonna blend between two of them

1590
01:11:39,800 --> 01:11:44,600
first and then blend between the results

1591
01:11:41,989 --> 01:11:48,710
of those right how do I do that will I

1592
01:11:44,600 --> 01:11:51,230
say okay 1 minus u times C 0 plus u

1593
01:11:48,710 --> 01:11:53,810
times C 1 that's the linear blend it's

1594
01:11:51,229 --> 01:11:57,409
blending smoothly as you goes from 0 to

1595
01:11:53,810 --> 01:11:59,210
1 it blends between 0 0 and Z 1 in a

1596
01:11:57,409 --> 01:12:01,869
linear fashion right

1597
01:11:59,210 --> 01:12:06,909
just a regular straightforward fade I

1598
01:12:01,869 --> 01:12:09,710
would do the same thing with C 2 and C 3

1599
01:12:06,909 --> 01:12:12,260
these are my two intermediate colors

1600
01:12:09,710 --> 01:12:14,270
right so this is like essentially

1601
01:12:12,260 --> 01:12:18,500
creating to intermediate blended colors

1602
01:12:14,270 --> 01:12:20,960
I'll call those b0 and b1 right and then

1603
01:12:18,500 --> 01:12:24,920
I make my by linear filter by filtering

1604
01:12:20,960 --> 01:12:28,699
those so I say 1 minus B times B 0 plus

1605
01:12:24,920 --> 01:12:31,159
V times B 1 and this is my final color

1606
01:12:28,699 --> 01:12:33,649
that's the pixel right or I should say

1607
01:12:31,159 --> 01:12:36,979
it's the output of the blend sample so

1608
01:12:33,649 --> 01:12:39,639
it's the sample right that's the texture

1609
01:12:36,979 --> 01:12:43,189
sample this is by linear filter

1610
01:12:39,640 --> 01:12:45,200
filtering if I multiply this out we can

1611
01:12:43,189 --> 01:12:46,759
see what happens right I've got an

1612
01:12:45,199 --> 01:12:48,710
equation here that's actually written in

1613
01:12:46,760 --> 01:12:51,140
terms of this these other equations

1614
01:12:48,710 --> 01:12:56,060
let's just fill it in I've got 1 minus V

1615
01:12:51,140 --> 01:13:00,860
times my B 0 which is 1 minus u times C

1616
01:12:56,060 --> 01:13:05,030
0 plus u times C 1 added to the same

1617
01:13:00,859 --> 01:13:07,329
exact thing right 1 - you should make

1618
01:13:05,029 --> 01:13:07,329
sure that's

1619
01:13:10,460 --> 01:13:18,989
get my using please confirm sorry

1620
01:13:12,750 --> 01:13:20,488
one minus V I always draw these poorly

1621
01:13:18,988 --> 01:13:21,948
and and you have to draw them well

1622
01:13:20,488 --> 01:13:28,138
because they look the same if you don't

1623
01:13:21,948 --> 01:13:33,869
one minus V times 1 minus u c0 plus you

1624
01:13:28,139 --> 01:13:36,300
see one added to V times the same

1625
01:13:33,869 --> 01:13:44,609
equation but with the other sees 1 minus

1626
01:13:36,300 --> 01:13:46,800
u c2 plus you see 3 ok what can you see

1627
01:13:44,609 --> 01:13:49,589
about this equation well if I was to

1628
01:13:46,800 --> 01:13:53,400
multiply it through it's very clear that

1629
01:13:49,590 --> 01:13:56,550
it becomes just four colors added with

1630
01:13:53,399 --> 01:13:58,198
four weights what are the weights what

1631
01:13:56,550 --> 01:14:00,570
just distributive property just like

1632
01:13:58,198 --> 01:14:02,759
boring highschool math right it's

1633
01:14:00,569 --> 01:14:05,488
actually free huh yeah junior high

1634
01:14:02,760 --> 01:14:07,860
school math really right I multiply this

1635
01:14:05,488 --> 01:14:10,468
through 1 minus 3 times 1 times u that

1636
01:14:07,859 --> 01:14:14,460
becomes my C 0 coefficient 1 minus V

1637
01:14:10,469 --> 01:14:18,270
plus 1 minus V times you see one that's

1638
01:14:14,460 --> 01:14:20,969
my C 1 coefficient V 1 minus u times C -

1639
01:14:18,270 --> 01:14:25,889
that's my C 2 coefficient and then V U

1640
01:14:20,969 --> 01:14:29,779
is my C 3 coefficient right right these

1641
01:14:25,889 --> 01:14:32,550
are all just constants they're just

1642
01:14:29,779 --> 01:14:33,029
values that are two scalars multiplied

1643
01:14:32,550 --> 01:14:35,850
together

1644
01:14:33,029 --> 01:14:37,679
so really I could just say alright I've

1645
01:14:35,850 --> 01:14:41,579
got a blend value it's equal to that

1646
01:14:37,679 --> 01:14:43,590
times C 0 plus another blend value right

1647
01:14:41,579 --> 01:14:47,488
it's equal to that times C 1 plus

1648
01:14:43,590 --> 01:14:51,750
another blend value times C 2 it's that

1649
01:14:47,488 --> 01:14:56,579
one that one right and finally a third

1650
01:14:51,750 --> 01:15:00,979
blend value times 2 3 ok this is the

1651
01:14:56,579 --> 01:15:00,979
final equation for a bilinear sample

1652
01:15:03,880 --> 01:15:10,550
that bilinear sample is computed by

1653
01:15:07,489 --> 01:15:12,739
using this exact kind of math the 1

1654
01:15:10,550 --> 01:15:16,460
minus v1 minus U you know that linear

1655
01:15:12,739 --> 01:15:18,590
plan on the graphics card by using the

1656
01:15:16,460 --> 01:15:21,529
UV coordinates of the texture that you

1657
01:15:18,590 --> 01:15:24,440
sample right when I actually go to

1658
01:15:21,529 --> 01:15:26,689
sample from that texture like that one I

1659
01:15:24,439 --> 01:15:27,649
had right this was the texture we were

1660
01:15:26,689 --> 01:15:29,479
talking about before

1661
01:15:27,649 --> 01:15:31,729
oops suddenly I had an extra row in

1662
01:15:29,479 --> 01:15:35,839
there pretend that doesn't exist um when

1663
01:15:31,729 --> 01:15:37,549
I go to sample from my texture where do

1664
01:15:35,840 --> 01:15:40,520
these blend coefficients come from well

1665
01:15:37,550 --> 01:15:42,680
wherever I'm gonna sample right is given

1666
01:15:40,520 --> 01:15:44,690
to me and I probably should have you

1667
01:15:42,680 --> 01:15:46,250
know I used UV here because that's how

1668
01:15:44,689 --> 01:15:47,449
you normally write a bilinear blend it's

1669
01:15:46,250 --> 01:15:49,279
gonna be a little confusing because you

1670
01:15:47,449 --> 01:15:51,109
also have UV coordinates for your

1671
01:15:49,279 --> 01:15:52,309
texture I'm gonna call those UV

1672
01:15:51,109 --> 01:15:54,199
coordinates something a little bit

1673
01:15:52,310 --> 01:15:56,300
different so I'm gonna say like the UV

1674
01:15:54,199 --> 01:15:57,800
coordinates which are something a little

1675
01:15:56,300 --> 01:16:01,460
bit different right the UV coordinates

1676
01:15:57,800 --> 01:16:03,430
I'm gonna call those something else for

1677
01:16:01,460 --> 01:16:06,949
now right I'm gonna call those like a

1678
01:16:03,430 --> 01:16:08,240
comma B or something right so that's the

1679
01:16:06,949 --> 01:16:12,979
coordinates into the texture that I'm

1680
01:16:08,239 --> 01:16:16,579
sampling wherever I'm sampling let's say

1681
01:16:12,979 --> 01:16:19,489
it's right here in my texture uh

1682
01:16:16,579 --> 01:16:21,920
depending on how the texture sampling is

1683
01:16:19,489 --> 01:16:23,359
going to compute those UV coordinates

1684
01:16:21,920 --> 01:16:27,710
I believe it usually does them protect

1685
01:16:23,359 --> 01:16:29,210
from Texel sam Texel centers but i'd

1686
01:16:27,710 --> 01:16:30,800
have to go back and you have to actually

1687
01:16:29,210 --> 01:16:32,359
go back and look at the exact math every

1688
01:16:30,800 --> 01:16:34,070
time because I always forget exactly how

1689
01:16:32,359 --> 01:16:35,869
God starts used to implement Ghatak

1690
01:16:34,069 --> 01:16:38,029
starts don't sample textures the way I

1691
01:16:35,869 --> 01:16:40,130
would have sampled textures so it's

1692
01:16:38,029 --> 01:16:41,659
always a mental shift especially

1693
01:16:40,130 --> 01:16:43,039
mipmapping doesn't work the way I would

1694
01:16:41,659 --> 01:16:44,269
have done it so it's it's always I got

1695
01:16:43,039 --> 01:16:45,319
to go back and rember wait how did they

1696
01:16:44,270 --> 01:16:47,090
decide to do it in graphs codes again

1697
01:16:45,319 --> 01:16:49,399
and then go oh I don't like that but

1698
01:16:47,090 --> 01:16:52,100
anyway point being it's going to have

1699
01:16:49,399 --> 01:16:53,899
some reference where if you sampled at

1700
01:16:52,100 --> 01:16:58,190
that reference point you would get

1701
01:16:53,899 --> 01:16:59,899
exactly zero for u and V right so this

1702
01:16:58,189 --> 01:17:04,069
point in the center of the textile let's

1703
01:16:59,899 --> 01:17:06,920
say is exactly zero zero for the U and V

1704
01:17:04,069 --> 01:17:13,099
in the above equations what that means

1705
01:17:06,920 --> 01:17:17,710
is one minus U is always 1 and U is

1706
01:17:13,100 --> 01:17:19,990
always zero right what would happen

1707
01:17:17,710 --> 01:17:22,750
to my equation in that case well this is

1708
01:17:19,989 --> 01:17:26,229
zero so you don't get I'm sorry this is

1709
01:17:22,750 --> 01:17:27,909
1 because it's 1 times 1 right this is 0

1710
01:17:26,229 --> 01:17:30,009
because there's a u in it which is 0

1711
01:17:27,909 --> 01:17:31,779
this is 0 because there's a V in it

1712
01:17:30,010 --> 01:17:34,390
which is 0 and this is 0 because of V

1713
01:17:31,779 --> 01:17:36,789
and EU in it so it's 0 that means we

1714
01:17:34,390 --> 01:17:38,530
would just have color 0 that's the

1715
01:17:36,789 --> 01:17:40,329
center of the Texel it's when you're

1716
01:17:38,529 --> 01:17:42,130
specifically sampling it directly and

1717
01:17:40,329 --> 01:17:44,380
even with bilinear filtering turned on

1718
01:17:42,130 --> 01:17:45,940
you get the exact result of just that

1719
01:17:44,380 --> 01:17:50,319
texture color it's gonna be important

1720
01:17:45,939 --> 01:17:52,869
later remember that right anywhere else

1721
01:17:50,319 --> 01:17:55,689
inside this rectangle sample I'm going

1722
01:17:52,869 --> 01:17:58,449
to actually have different values let's

1723
01:17:55,689 --> 01:18:01,659
say it's right here where it's 0.5 0.5

1724
01:17:58,449 --> 01:18:05,019
right would be the U and V you can see

1725
01:18:01,659 --> 01:18:08,170
how it does it if I map into the textile

1726
01:18:05,020 --> 01:18:10,870
grid and I say how far am i from the

1727
01:18:08,170 --> 01:18:13,630
closest floor right the closest textile

1728
01:18:10,869 --> 01:18:16,779
I would floor to so anywhere in this in

1729
01:18:13,630 --> 01:18:19,029
this square of sampling I go to the min

1730
01:18:16,779 --> 01:18:21,250
value the minimum integer value of

1731
01:18:19,029 --> 01:18:23,619
sampling I could do to my textile right

1732
01:18:21,250 --> 01:18:27,250
where is that thing and then how far

1733
01:18:23,619 --> 01:18:29,349
away am i from it right so here would be

1734
01:18:27,250 --> 01:18:31,659
point 5 point 5 because I'm halfway in

1735
01:18:29,350 --> 01:18:35,170
both U and V to the next textile center

1736
01:18:31,659 --> 01:18:37,180
right well then all of these values

1737
01:18:35,170 --> 01:18:40,810
would get a value and what value do they

1738
01:18:37,180 --> 01:18:42,250
get the same value 0.5 1 minus 0.5 1

1739
01:18:40,810 --> 01:18:47,560
minus point five that's 0.5 times point

1740
01:18:42,250 --> 01:18:51,699
5 so at 0.25 0.25 0.25 0.25 it's the

1741
01:18:47,560 --> 01:18:56,860
average of all the colors right - I'm

1742
01:18:51,699 --> 01:18:59,590
saying so on and so forth I know how the

1743
01:18:56,859 --> 01:19:01,869
graphics card will do this right it will

1744
01:18:59,590 --> 01:19:05,699
map the UV coordinates in exactly this

1745
01:19:01,869 --> 01:19:05,699
way it will take the floor

1746
01:19:10,340 --> 01:19:13,500
step one you'll take the place where

1747
01:19:13,050 --> 01:19:14,970
it's at

1748
01:19:13,500 --> 01:19:21,239
it'll floor it to the closest tough

1749
01:19:14,970 --> 01:19:24,420
Texel step to find the offset right

1750
01:19:21,239 --> 01:19:26,460
that's saying okay I floored to this

1751
01:19:24,420 --> 01:19:28,170
zero zero here how far away from my

1752
01:19:26,460 --> 01:19:32,909
front from it Oh point five point five

1753
01:19:28,170 --> 01:19:34,340
right so you V equals that offset step

1754
01:19:32,909 --> 01:19:42,559
three

1755
01:19:34,340 --> 01:19:47,369
compute blend coefficients and step four

1756
01:19:42,560 --> 01:19:50,760
blend right so I know that I can't

1757
01:19:47,369 --> 01:19:53,880
control these two but I can control

1758
01:19:50,760 --> 01:19:59,369
these two because when I pass in my UV

1759
01:19:53,880 --> 01:20:00,720
value it's whatever I say it is this is

1760
01:19:59,369 --> 01:20:03,090
this is the world of programmable

1761
01:20:00,720 --> 01:20:04,860
graphics hardware that sampler it's

1762
01:20:03,090 --> 01:20:09,960
going to get exactly the UV coordinates

1763
01:20:04,859 --> 01:20:11,969
that I tell it right so the only thing

1764
01:20:09,960 --> 01:20:14,640
you have to do if you want perfect

1765
01:20:11,970 --> 01:20:17,940
pixels sampling smooth sub-pixel

1766
01:20:14,640 --> 01:20:20,430
rendering on your pixel art games with

1767
01:20:17,939 --> 01:20:23,969
no smearing just perfect textile

1768
01:20:20,430 --> 01:20:26,930
filtering right all you have to do is

1769
01:20:23,970 --> 01:20:35,970
recognize the fact that you can

1770
01:20:26,930 --> 01:20:42,960
precondition your UV coordinates in the

1771
01:20:35,970 --> 01:20:45,180
pixel sampler this is it please for the

1772
01:20:42,960 --> 01:20:47,670
love of God if anyone at Unity ever

1773
01:20:45,180 --> 01:20:51,180
watches this thing add it to your engine

1774
01:20:47,670 --> 01:20:55,440
I place so many unity 2d games that just

1775
01:20:51,180 --> 01:20:57,210
hurt my eyes make this a check box for

1776
01:20:55,439 --> 01:21:02,279
the love of God make it a check box

1777
01:20:57,210 --> 01:21:04,170
please I don't know how to beg you

1778
01:21:02,279 --> 01:21:07,800
enough whoever is out there

1779
01:21:04,170 --> 01:21:10,170
unity devs just add some proper sampling

1780
01:21:07,800 --> 01:21:11,640
to your 2d stuff I mean how hard I can't

1781
01:21:10,170 --> 01:21:13,409
be that hard there's so many there's

1782
01:21:11,640 --> 01:21:16,950
more 2d game ship than unity than 3d

1783
01:21:13,409 --> 01:21:20,988
games probably just just please but

1784
01:21:16,949 --> 01:21:23,538
anyway so

1785
01:21:20,988 --> 01:21:26,779
all you need to do is precondition your

1786
01:21:23,538 --> 01:21:28,219
UV coordinates right let's go back and

1787
01:21:26,779 --> 01:21:30,800
just take it one dimension at a time

1788
01:21:28,219 --> 01:21:33,019
because we can actually do this on both

1789
01:21:30,800 --> 01:21:34,969
dimensions separately we don't need to

1790
01:21:33,019 --> 01:21:39,860
take into account the 2d nature of it at

1791
01:21:34,969 --> 01:21:42,319
all right so again looking back at it in

1792
01:21:39,859 --> 01:21:46,578
one dimensions in one dimensions that's

1793
01:21:42,319 --> 01:21:48,529
good in one dimension I I guess I don't

1794
01:21:46,578 --> 01:21:51,259
even have to do in one dimension I know

1795
01:21:48,529 --> 01:21:54,228
that the linear filtering will basically

1796
01:21:51,260 --> 01:21:56,300
say it's going to compute some T value

1797
01:21:54,229 --> 01:22:00,320
right and that T value is going to be

1798
01:21:56,300 --> 01:22:05,360
the floored offset in texture space

1799
01:22:00,319 --> 01:22:08,779
right so I'm looking at something like

1800
01:22:05,359 --> 01:22:10,819
this here's a 1d representation of just

1801
01:22:08,779 --> 01:22:13,340
one dimension of my texture right so

1802
01:22:10,819 --> 01:22:14,569
it's just one row of texels in fact let

1803
01:22:13,340 --> 01:22:21,769
me just draw it that way to make it

1804
01:22:14,569 --> 01:22:24,429
simple one row of texels you know I've

1805
01:22:21,769 --> 01:22:28,458
got some different things in here

1806
01:22:24,429 --> 01:22:30,949
different colors right this is my pixel

1807
01:22:28,458 --> 01:22:33,679
art I know what's going to happen is

1808
01:22:30,948 --> 01:22:36,018
whatever coordinate I pass in on the

1809
01:22:33,679 --> 01:22:39,109
number line here's my one dimension

1810
01:22:36,019 --> 01:22:41,300
right whatever number I pass in on the

1811
01:22:39,109 --> 01:22:42,589
number line and I can use using v's now

1812
01:22:41,300 --> 01:22:44,809
because I'll use T as the blend so we'll

1813
01:22:42,590 --> 01:22:47,869
say U is the incoming you coordinate T

1814
01:22:44,809 --> 01:22:50,360
will be the Florida the T will be the

1815
01:22:47,868 --> 01:22:52,759
blend coefficient so I'm gonna pass in

1816
01:22:50,359 --> 01:22:55,698
AU coordinate that you coordinate is

1817
01:22:52,760 --> 01:22:59,030
somewhere like this right that's the new

1818
01:22:55,698 --> 01:23:02,478
coordinate right I know it's going to

1819
01:22:59,029 --> 01:23:04,578
take the span between the two texels

1820
01:23:02,479 --> 01:23:07,130
it's gonna figure out where this is and

1821
01:23:04,578 --> 01:23:08,420
it's going to produce a T value based on

1822
01:23:07,130 --> 01:23:10,340
that so it's gonna floor and then

1823
01:23:08,420 --> 01:23:13,158
produce the offset and that's my T value

1824
01:23:10,340 --> 01:23:16,578
then it's gonna do 1 minus T times the

1825
01:23:13,158 --> 01:23:19,518
pixel on this side right let's see 0

1826
01:23:16,578 --> 01:23:22,788
plus T times the pixel on the other side

1827
01:23:19,519 --> 01:23:25,519
right this is the blend I need it to do

1828
01:23:22,788 --> 01:23:28,518
but it's using the wrong T value it's

1829
01:23:25,519 --> 01:23:31,550
using that smearing T value so I don't

1830
01:23:28,519 --> 01:23:34,130
get good for pixel art it looks ugly it

1831
01:23:31,550 --> 01:23:34,849
looks like it's all fuzzy right I don't

1832
01:23:34,130 --> 01:23:38,090
want that

1833
01:23:34,849 --> 01:23:40,099
all I want is some pixel correction so

1834
01:23:38,090 --> 01:23:42,199
that at the place where the pixel art

1835
01:23:40,099 --> 01:23:44,630
actually goes from one block to another

1836
01:23:42,198 --> 01:23:46,729
block I get it nice and smoothly sampled

1837
01:23:44,630 --> 01:23:51,260
as if I had really good anti-aliasing on

1838
01:23:46,729 --> 01:23:54,589
right okay so how do I do that well all

1839
01:23:51,260 --> 01:23:58,310
I have to do is say where does this

1840
01:23:54,590 --> 01:24:01,250
pixel fall in texture space right

1841
01:23:58,310 --> 01:24:04,039
because remember in my pixel shader now

1842
01:24:01,250 --> 01:24:07,010
I'm talking about rendering a pixel that

1843
01:24:04,039 --> 01:24:09,109
land somewhere in texture space most of

1844
01:24:07,010 --> 01:24:10,550
the time because this is pixel art so

1845
01:24:09,109 --> 01:24:12,439
it's bigger than the resolution in the

1846
01:24:10,550 --> 01:24:18,380
screen most the time most of the time

1847
01:24:12,439 --> 01:24:21,559
I'm a small span like this sampling only

1848
01:24:18,380 --> 01:24:24,139
one pixel so what I want to do is

1849
01:24:21,560 --> 01:24:26,270
basically have effectively what amounts

1850
01:24:24,139 --> 01:24:30,469
to an if in my shader although it can

1851
01:24:26,270 --> 01:24:34,010
also be done as non if but what I want

1852
01:24:30,469 --> 01:24:35,448
to do is say if I'm in one will probably

1853
01:24:34,010 --> 01:24:35,810
do it as like clamps and stuff is all

1854
01:24:35,448 --> 01:24:44,348
I'm saying

1855
01:24:35,810 --> 01:24:44,349
but if I the pixel is entirely contained

1856
01:24:44,679 --> 01:24:50,719
right so the first step is if the pixel

1857
01:24:47,810 --> 01:24:53,150
is entirely contained within one texel

1858
01:24:50,719 --> 01:24:55,429
right because I know that I know that

1859
01:24:53,149 --> 01:25:01,219
answer if the pixel is entirely

1860
01:24:55,429 --> 01:25:03,560
contained then floor myself right just

1861
01:25:01,219 --> 01:25:06,439
do the floor myself so in the pixel

1862
01:25:03,560 --> 01:25:10,070
shader I will adjust my you coordinate

1863
01:25:06,439 --> 01:25:12,198
tool and exactly at the pixel center so

1864
01:25:10,069 --> 01:25:16,069
in this case I'll adjust it so it's

1865
01:25:12,198 --> 01:25:20,689
exactly here right so I know for example

1866
01:25:16,069 --> 01:25:26,719
if this thing was 256 pixels or sorry

1867
01:25:20,689 --> 01:25:30,109
texels right if I know my texture is 256

1868
01:25:26,719 --> 01:25:34,599
texels wide let's say then I know that I

1869
01:25:30,109 --> 01:25:40,000
want to floor to exactly you know

1870
01:25:34,599 --> 01:25:44,449
stepping in by from 0 to 1 to 2 right I

1871
01:25:40,000 --> 01:25:48,628
want to do two times one over 256 right

1872
01:25:44,448 --> 01:25:55,368
Plus that 0.5 offset you know I'm saying

1873
01:25:48,628 --> 01:26:00,538
so it's actually sorry 2 plus 0.5 times

1874
01:25:55,368 --> 01:26:04,799
one over 256 right so I just get 2.5

1875
01:26:00,538 --> 01:26:07,918
over 256 that is the exact location that

1876
01:26:04,800 --> 01:26:11,219
I want to be for sampling that second

1877
01:26:07,918 --> 01:26:13,439
Texel exactly even in linear blending

1878
01:26:11,219 --> 01:26:16,198
mode because I'm right in the center

1879
01:26:13,439 --> 01:26:18,809
right so I'll get exactly the right

1880
01:26:16,198 --> 01:26:23,638
result so if the pixel is entirely

1881
01:26:18,809 --> 01:26:25,320
contained I do the exact flooring that

1882
01:26:23,639 --> 01:26:27,569
the texture sampler is going to do

1883
01:26:25,319 --> 01:26:29,639
anyway so that when it does the floor it

1884
01:26:27,569 --> 01:26:33,029
gets the same answer and the offsets

1885
01:26:29,639 --> 01:26:35,399
zero that makes the linear go away it

1886
01:26:33,029 --> 01:26:39,179
gives me back entirely see zero and I'm

1887
01:26:35,399 --> 01:26:40,979
done right so how would I do that how

1888
01:26:39,179 --> 01:26:43,349
would I make that happen

1889
01:26:40,979 --> 01:26:46,050
right well it's pretty simple I know

1890
01:26:43,349 --> 01:26:48,599
what my incoming UV coordinates are and

1891
01:26:46,050 --> 01:26:51,269
I can pretty trivially produce this

1892
01:26:48,599 --> 01:26:53,128
number from them knowing the width of

1893
01:26:51,269 --> 01:26:55,139
the texture which I always do because

1894
01:26:53,128 --> 01:26:56,698
it's actually just provided in modern

1895
01:26:55,139 --> 01:26:58,409
samplers you know what the width of the

1896
01:26:56,698 --> 01:26:59,998
texture is but even if you didn't you

1897
01:26:58,408 --> 01:27:01,888
could send it down as part of either the

1898
01:26:59,998 --> 01:27:03,389
vertex data or the constants tour so

1899
01:27:01,889 --> 01:27:04,889
it's pretty easy to just get that

1900
01:27:03,389 --> 01:27:07,469
information in even if you didn't have

1901
01:27:04,889 --> 01:27:11,429
it readily available from a texture but

1902
01:27:07,469 --> 01:27:13,469
you do right so when we look at this and

1903
01:27:11,429 --> 01:27:15,029
we say all right we need to do this

1904
01:27:13,469 --> 01:27:17,429
first step of the process we need to be

1905
01:27:15,029 --> 01:27:21,059
able to do a route where we're actually

1906
01:27:17,429 --> 01:27:24,359
going to clamp sort of a floor this this

1907
01:27:21,059 --> 01:27:27,538
sample to exactly what it is all we have

1908
01:27:24,359 --> 01:27:28,949
to do is produce these values and this

1909
01:27:27,538 --> 01:27:30,148
you know I won't go over the most

1910
01:27:28,948 --> 01:27:31,858
optimal to do it cuz I have to sit here

1911
01:27:30,149 --> 01:27:33,419
and actually work it through but you can

1912
01:27:31,859 --> 01:27:35,820
imagine just doing it the reverse way

1913
01:27:33,418 --> 01:27:38,788
the the most simpler way to do it is

1914
01:27:35,819 --> 01:27:40,168
just an ample element to emulate exactly

1915
01:27:38,788 --> 01:27:44,868
what the texture sample is gonna do I

1916
01:27:40,168 --> 01:27:48,448
get a u value I know my I know my

1917
01:27:44,868 --> 01:27:50,368
texture riff so let's say I have a w

1918
01:27:48,448 --> 01:27:52,589
value that's the width of my texture and

1919
01:27:50,368 --> 01:27:54,598
an H value right and maybe I'll be more

1920
01:27:52,590 --> 01:27:56,550
specific about those so I'll say we have

1921
01:27:54,599 --> 01:27:58,529
a texture with it's a little bit bad

1922
01:27:56,550 --> 01:28:02,538
because I wanted to be my blend so maybe

1923
01:27:58,529 --> 01:28:02,538
we'll do something a little bit

1924
01:28:03,550 --> 01:28:14,170
can I change this well I I need more

1925
01:28:12,429 --> 01:28:15,908
values here because I don't want to step

1926
01:28:14,170 --> 01:28:18,158
on my own toes so I want the texture

1927
01:28:15,908 --> 01:28:21,399
width and height here so I'm gonna do it

1928
01:28:18,158 --> 01:28:24,879
this way WT height T for width and

1929
01:28:21,399 --> 01:28:27,369
height the texture and we'll just call

1930
01:28:24,880 --> 01:28:29,920
it that so let's start we come in here

1931
01:28:27,369 --> 01:28:32,079
we have au coordinate this is the actual

1932
01:28:29,920 --> 01:28:34,569
you coordinate that comes in from the

1933
01:28:32,079 --> 01:28:36,369
vertex shader right and that's where we

1934
01:28:34,569 --> 01:28:38,649
would be sampling and we've got bilinear

1935
01:28:36,369 --> 01:28:41,380
turned on so if we just let that flew

1936
01:28:38,649 --> 01:28:42,779
through and we sample right we're just

1937
01:28:41,380 --> 01:28:45,760
gonna get a smear that's gonna be ugly

1938
01:28:42,779 --> 01:28:48,009
so first step multiply out by the width

1939
01:28:45,760 --> 01:28:49,510
where are we right so the first thing

1940
01:28:48,010 --> 01:28:51,940
you want to do is find out where we are

1941
01:28:49,510 --> 01:28:54,579
in actual Texel space so it's basically

1942
01:28:51,939 --> 01:28:58,269
like our exposition in the texture right

1943
01:28:54,579 --> 01:29:00,729
that's gonna be u times that width okay

1944
01:28:58,270 --> 01:29:02,530
so that goes from something that looks

1945
01:29:00,729 --> 01:29:04,809
like just a random you coordinate like

1946
01:29:02,529 --> 01:29:06,460
you know Oh point you know oh one two

1947
01:29:04,810 --> 01:29:08,140
five blah blah blah it's something that

1948
01:29:06,460 --> 01:29:11,649
we can actually use like oh it's two

1949
01:29:08,140 --> 01:29:13,750
point seven right so that's two pixels

1950
01:29:11,649 --> 01:29:18,779
in and then point seven of the way to

1951
01:29:13,750 --> 01:29:23,560
the next pixel right okay makes sense

1952
01:29:18,779 --> 01:29:26,380
and so then I can also if I want to I

1953
01:29:23,560 --> 01:29:29,350
can think about this a little bit more

1954
01:29:26,380 --> 01:29:32,469
broadly and say well that's where I'm

1955
01:29:29,350 --> 01:29:35,969
actually sampling but I really would

1956
01:29:32,469 --> 01:29:39,579
like to know more specifically right I

1957
01:29:35,969 --> 01:29:42,219
really would like to know the span of

1958
01:29:39,579 --> 01:29:45,010
the sample because this doesn't really

1959
01:29:42,219 --> 01:29:47,619
tell me that so what I'd like to do is

1960
01:29:45,010 --> 01:29:49,539
know what the minimum and maximum values

1961
01:29:47,619 --> 01:29:51,158
actually are for my sample remember I

1962
01:29:49,539 --> 01:29:54,510
want to know if I'm completely covered

1963
01:29:51,158 --> 01:29:57,849
so here and here right I've got those

1964
01:29:54,510 --> 01:30:01,869
I've got those two points I want to know

1965
01:29:57,850 --> 01:30:04,210
how much of that span falls within the

1966
01:30:01,869 --> 01:30:06,609
pixel so just taking the center point

1967
01:30:04,210 --> 01:30:08,020
which is here isn't that useful for me

1968
01:30:06,609 --> 01:30:11,710
I'd rather have the min/max

1969
01:30:08,020 --> 01:30:13,330
right so what I need in addition is

1970
01:30:11,710 --> 01:30:14,800
something that you actually get you get

1971
01:30:13,329 --> 01:30:15,130
texture gradients which are basically

1972
01:30:14,800 --> 01:30:19,480
like

1973
01:30:15,130 --> 01:30:21,670
d u DX and DV DX you get these in the

1974
01:30:19,479 --> 01:30:26,319
shaders and what they say is if I was to

1975
01:30:21,670 --> 01:30:27,399
step one pixel right if I was to SEP 24

1976
01:30:26,319 --> 01:30:30,039
word or one pixel back

1977
01:30:27,399 --> 01:30:31,988
how much would my U value change so

1978
01:30:30,039 --> 01:30:33,908
really what I want to do is do something

1979
01:30:31,988 --> 01:30:37,479
a little bit more broadly what I want to

1980
01:30:33,908 --> 01:30:40,658
do is make a Yuman value right u min is

1981
01:30:37,479 --> 01:30:44,349
gonna be stepping a half pixel backwards

1982
01:30:40,658 --> 01:30:47,879
and a half pixel forwards right so what

1983
01:30:44,350 --> 01:31:00,010
I wanted to say u plus like you know 0.5

1984
01:30:47,880 --> 01:31:06,100
D u DX I'm sorry I mean minus minus 0.5

1985
01:31:00,010 --> 01:31:10,110
T u DX right and u max is going to be

1986
01:31:06,100 --> 01:31:14,739
equal to u plus 0.5 D u DX right and

1987
01:31:10,109 --> 01:31:19,119
then I can do an X min x max so my X min

1988
01:31:14,738 --> 01:31:23,109
is going to be my human x WT and my x

1989
01:31:19,119 --> 01:31:26,050
max is going to be my u max times WT and

1990
01:31:23,109 --> 01:31:28,059
this gives me the exact span so it would

1991
01:31:26,050 --> 01:31:31,570
say something like oh we are sampling

1992
01:31:28,060 --> 01:31:34,179
from two point five to two point you

1993
01:31:31,569 --> 01:31:36,969
know nine right that's where we're

1994
01:31:34,179 --> 01:31:39,130
sampling so now if you actually wanted

1995
01:31:36,969 --> 01:31:41,469
to implement implement it with an if

1996
01:31:39,130 --> 01:31:48,340
statement you just could you'd say if

1997
01:31:41,469 --> 01:31:51,389
you know floor or round doesn't matter

1998
01:31:48,340 --> 01:31:59,110
which one you use here if floor of X min

1999
01:31:51,389 --> 01:32:03,100
equals floor of X Max then we want to

2000
01:31:59,109 --> 01:32:05,619
set our u value to actually be the floor

2001
01:32:03,100 --> 01:32:07,300
right and we'll talk about what that

2002
01:32:05,619 --> 01:32:09,189
computation is it's really simple right

2003
01:32:07,300 --> 01:32:14,199
now that we have this it's literally

2004
01:32:09,189 --> 01:32:17,289
just take this value here this u WT all

2005
01:32:14,198 --> 01:32:19,569
we really wanted to do is floor that

2006
01:32:17,289 --> 01:32:25,329
value so you would literally just do the

2007
01:32:19,569 --> 01:32:27,039
floor of u WT / the texture with to map

2008
01:32:25,329 --> 01:32:28,769
it back into texture coordinate space

2009
01:32:27,039 --> 01:32:31,479
right

2010
01:32:28,769 --> 01:32:34,748
makes sense so if you actually wanted to

2011
01:32:31,479 --> 01:32:36,399
do it with an if you just could so let's

2012
01:32:34,748 --> 01:32:38,679
pretend we did that then all we need

2013
01:32:36,399 --> 01:32:41,018
here to finish is just our else we need

2014
01:32:38,679 --> 01:32:44,078
to know what to do when we're not in the

2015
01:32:41,019 --> 01:32:49,389
same Texel right so now what we have is

2016
01:32:44,078 --> 01:32:52,238
some kind of information about where we

2017
01:32:49,389 --> 01:32:54,460
actually fall in the range of textures

2018
01:32:52,238 --> 01:32:56,859
right so what we're gonna have here is

2019
01:32:54,460 --> 01:32:59,019
something that doesn't look like 2.5 to

2020
01:32:56,859 --> 01:33:05,009
2.9 maybe it looks like something like

2021
01:32:59,019 --> 01:33:10,030
2.6 to 3.1 right something like that

2022
01:33:05,010 --> 01:33:14,559
makes sense and so you know as opposed

2023
01:33:10,029 --> 01:33:19,300
to sampling direct a sampling only

2024
01:33:14,559 --> 01:33:21,760
inside that that one texel there that

2025
01:33:19,300 --> 01:33:23,650
second Texel we're sampling a little bit

2026
01:33:21,760 --> 01:33:26,440
of the third Texel but you can see here

2027
01:33:23,649 --> 01:33:28,658
we're still mostly in this one so we

2028
01:33:26,439 --> 01:33:31,299
want to do the computation that figures

2029
01:33:28,658 --> 01:33:33,729
out exactly how much of each of them we

2030
01:33:31,300 --> 01:33:35,860
want to sample well what is the actual

2031
01:33:33,729 --> 01:33:37,689
value that we're looking for here well

2032
01:33:35,859 --> 01:33:40,479
you can kind of see how we would

2033
01:33:37,689 --> 01:33:45,578
construct it if we were to floor this

2034
01:33:40,479 --> 01:33:47,738
thing to the correct 2.5 there right and

2035
01:33:45,578 --> 01:33:50,078
I should I should add that we want to be

2036
01:33:47,738 --> 01:33:53,468
I kind of left out a step here we

2037
01:33:50,078 --> 01:33:57,340
actually want this thing to be looking

2038
01:33:53,469 --> 01:34:00,248
at how it is arranged around the point

2039
01:33:57,340 --> 01:34:02,110
fives so we actually when we're in here

2040
01:34:00,248 --> 01:34:04,389
I probably shouldn't have written it

2041
01:34:02,109 --> 01:34:07,210
this way because we don't have a good

2042
01:34:04,389 --> 01:34:09,730
way of flooring to 0.5 so what we want

2043
01:34:07,210 --> 01:34:11,828
to do is do the adjustment that makes us

2044
01:34:09,729 --> 01:34:14,709
actually be around the pixel centers

2045
01:34:11,828 --> 01:34:16,960
anyway right so what we want to do is

2046
01:34:14,710 --> 01:34:19,059
actually add in here probably this bias

2047
01:34:16,960 --> 01:34:21,038
right that centers us around the pixel

2048
01:34:19,059 --> 01:34:23,050
the Texel centers so we don't have to

2049
01:34:21,038 --> 01:34:24,670
worry we can actually just use floor so

2050
01:34:23,050 --> 01:34:26,739
we probably want it to look like this

2051
01:34:24,670 --> 01:34:33,038
and then what we're looking at here is

2052
01:34:26,738 --> 01:34:34,748
not is what I was saying here was more

2053
01:34:33,038 --> 01:34:37,538
accurate right when we're entirely

2054
01:34:34,748 --> 01:34:40,149
inside too as our first thing we're fine

2055
01:34:37,538 --> 01:34:41,649
right and so when we're inside here now

2056
01:34:40,149 --> 01:34:45,099
we're looking at saying that spans

2057
01:34:41,649 --> 01:34:49,179
make sense okay so if we wanted to know

2058
01:34:45,100 --> 01:34:51,880
what the difference is here right how

2059
01:34:49,180 --> 01:34:54,539
much we should blend between these two

2060
01:34:51,880 --> 01:34:59,020
values well if you look at what we're

2061
01:34:54,539 --> 01:35:00,130
getting for sampling we can compute the

2062
01:34:59,020 --> 01:35:02,260
exact coverage

2063
01:35:00,130 --> 01:35:04,180
how much is in one texel how much is in

2064
01:35:02,260 --> 01:35:06,970
the other how do we do that well take

2065
01:35:04,180 --> 01:35:11,430
the max and floor it right so we can

2066
01:35:06,970 --> 01:35:16,390
just say whatever this value is here

2067
01:35:11,430 --> 01:35:20,380
this is our U max value whatever are you

2068
01:35:16,390 --> 01:35:23,260
up sorry our x max value whatever our x

2069
01:35:20,380 --> 01:35:27,279
max value is if we take our x max value

2070
01:35:23,260 --> 01:35:30,789
and floor it right that would give us

2071
01:35:27,279 --> 01:35:35,079
our three we then know the amount that's

2072
01:35:30,789 --> 01:35:37,810
in the other the the three Texel is just

2073
01:35:35,079 --> 01:35:41,409
going to be however far the max was away

2074
01:35:37,810 --> 01:35:45,130
from that right so we would say the x

2075
01:35:41,409 --> 01:35:46,720
max value minus that floor value right

2076
01:35:45,130 --> 01:35:49,359
that's going to be equal to the point

2077
01:35:46,720 --> 01:35:51,460
one that we had and then on the other

2078
01:35:49,359 --> 01:35:54,909
side we know the opposite is also true

2079
01:35:51,460 --> 01:35:57,520
the floor value minus the x max value

2080
01:35:54,909 --> 01:35:59,949
I'm sorry minus the X min value this

2081
01:35:57,520 --> 01:36:02,110
value here right that's going to be

2082
01:35:59,949 --> 01:36:05,199
equal to how much is in that one and so

2083
01:36:02,109 --> 01:36:07,509
that would be point four right we then

2084
01:36:05,199 --> 01:36:09,550
know that if we set up the ratio between

2085
01:36:07,510 --> 01:36:11,680
these two we know how to blend between

2086
01:36:09,550 --> 01:36:15,789
them we want point one of this one and

2087
01:36:11,680 --> 01:36:18,490
point four of that one right makes sense

2088
01:36:15,789 --> 01:36:20,590
so in order to figure out where to

2089
01:36:18,489 --> 01:36:22,689
sample this thing we know that we just

2090
01:36:20,590 --> 01:36:26,020
need to sample it at a point one two

2091
01:36:22,689 --> 01:36:28,569
point four ratio which we should be able

2092
01:36:26,020 --> 01:36:32,650
to normalize out so I'll crank the math

2093
01:36:28,569 --> 01:36:34,989
here but again not so good with with

2094
01:36:32,649 --> 01:36:36,279
grinding math on on stream it's kind of

2095
01:36:34,989 --> 01:36:38,829
tough to do I'm not good at granny math

2096
01:36:36,279 --> 01:36:40,630
anyway but point being so we just need

2097
01:36:38,829 --> 01:36:43,029
to know how we would normalize this out

2098
01:36:40,630 --> 01:36:44,739
and how would you do that so if you have

2099
01:36:43,029 --> 01:36:46,659
a point one point four and you want

2100
01:36:44,739 --> 01:36:48,639
these things to sum to one right I want

2101
01:36:46,659 --> 01:36:52,710
to do a total blend so I want these

2102
01:36:48,640 --> 01:36:52,710
things to sum to one again

2103
01:36:53,300 --> 01:36:57,260
Euclidean 1-norm we've talked about on

2104
01:36:56,059 --> 01:36:58,909
handmade here I'll look it up if we

2105
01:36:57,260 --> 01:36:59,989
don't know what it is look at norms on

2106
01:36:58,908 --> 01:37:01,488
handmade here we can talk about it more

2107
01:36:59,988 --> 01:37:04,098
but what we knew about the Euclidean 1

2108
01:37:01,488 --> 01:37:06,589
norm if we want our blend coefficients

2109
01:37:04,099 --> 01:37:08,150
to sum to 1 which we do we need to

2110
01:37:06,590 --> 01:37:09,980
normalize by the 1 norm what do you do

2111
01:37:08,149 --> 01:37:12,198
for that add up all the values and

2112
01:37:09,979 --> 01:37:13,848
divide right very very simple it's very

2113
01:37:12,198 --> 01:37:15,738
much like the Qt and 2 norm where you

2114
01:37:13,849 --> 01:37:17,690
add the squared values square root and

2115
01:37:15,738 --> 01:37:19,848
divide this is Euclidean 1 norm it's for

2116
01:37:17,689 --> 01:37:23,899
summing to 1 rather than having a length

2117
01:37:19,849 --> 01:37:25,389
of 1 in space so you can just briefly

2118
01:37:23,899 --> 01:37:28,638
touch on that that's what the norms are

2119
01:37:25,389 --> 01:37:33,920
all right so if we add these up what we

2120
01:37:28,639 --> 01:37:41,510
get is x max minus F plus X I'm going to

2121
01:37:33,920 --> 01:37:44,748
do that littler X max minus F plus F

2122
01:37:41,510 --> 01:37:47,719
minus X min now do you see something

2123
01:37:44,748 --> 01:37:51,710
interesting about this ahrefs cancel

2124
01:37:47,719 --> 01:37:55,189
right and we just get x max minus X min

2125
01:37:51,710 --> 01:37:57,980
okay so if I want to sum up these values

2126
01:37:55,189 --> 01:38:00,649
the F is just kind of sitting there so

2127
01:37:57,979 --> 01:38:02,748
it goes away drops out of that part of

2128
01:38:00,649 --> 01:38:04,670
the term now I said I needed to divide

2129
01:38:02,748 --> 01:38:08,059
to find out what I actually wanted my

2130
01:38:04,670 --> 01:38:10,340
answer to be right so if I want to

2131
01:38:08,059 --> 01:38:12,019
divide to get my T value right to get a

2132
01:38:10,340 --> 01:38:15,529
value that smoothly blends between them

2133
01:38:12,019 --> 01:38:17,809
and remember for a T value this value is

2134
01:38:15,529 --> 01:38:20,300
always going to be 1 minus whatever the

2135
01:38:17,809 --> 01:38:22,429
other value is once I make them sum to 1

2136
01:38:20,300 --> 01:38:24,288
so I can kind of ignore it I can just

2137
01:38:22,429 --> 01:38:27,170
use one of them let's say it's f minus X

2138
01:38:24,288 --> 01:38:32,149
min in this case then what I can say is

2139
01:38:27,170 --> 01:38:35,059
all right F minus X F minus x-min and

2140
01:38:32,149 --> 01:38:37,848
x-max was the floor that's going to give

2141
01:38:35,059 --> 01:38:40,489
us an equation that has an X min and x

2142
01:38:37,849 --> 01:38:42,559
max in it I don't really want to do that

2143
01:38:40,488 --> 01:38:44,178
necessarily so I think what I want to do

2144
01:38:42,559 --> 01:38:46,219
is equation with 2x Max's so I'm going

2145
01:38:44,179 --> 01:38:49,248
to pick this one which is actually the 1

2146
01:38:46,219 --> 01:38:59,029
minus value but that's okay so looking

2147
01:38:49,248 --> 01:39:02,260
at this if I said x max minus 4 of x max

2148
01:38:59,029 --> 01:39:04,460
right so I'm doing here

2149
01:39:02,260 --> 01:39:10,199
normalized

2150
01:39:04,460 --> 01:39:12,359
xmax minus X man makes sense

2151
01:39:10,199 --> 01:39:13,559
oh you know what I've got an x-men in

2152
01:39:12,359 --> 01:39:15,000
here anyway though and there's really no

2153
01:39:13,560 --> 01:39:16,860
way I'm getting around that so let's get

2154
01:39:15,000 --> 01:39:19,489
rid of that let me let me pretend friend

2155
01:39:16,859 --> 01:39:19,489
I never said that

2156
01:39:21,510 --> 01:39:26,850
let's just do this one the way I wanted

2157
01:39:22,859 --> 01:39:35,489
to originally so I have F minus X min

2158
01:39:26,850 --> 01:39:36,810
over X max nice x-men right and if we

2159
01:39:35,489 --> 01:39:39,119
take a look at what happens here this

2160
01:39:36,810 --> 01:39:46,190
right here is just floor x max so what

2161
01:39:39,119 --> 01:39:51,809
I've got is floor x max minus X min over

2162
01:39:46,189 --> 01:39:56,309
X max minus X man very very simple

2163
01:39:51,810 --> 01:39:58,440
equation that is the actual T value we

2164
01:39:56,310 --> 01:40:00,750
want to do for our blend which means if

2165
01:39:58,439 --> 01:40:03,089
we want the gravit start to do it all we

2166
01:40:00,750 --> 01:40:05,729
have to do is put it back into texture

2167
01:40:03,090 --> 01:40:08,069
space in the correct place now how would

2168
01:40:05,729 --> 01:40:12,959
we do that well we're gonna add right

2169
01:40:08,069 --> 01:40:15,000
back in our floor of X Max and then

2170
01:40:12,960 --> 01:40:17,220
we're gonna do our divide that means in

2171
01:40:15,000 --> 01:40:18,689
order to put this back into texture

2172
01:40:17,220 --> 01:40:20,220
space and there's a couple ways I could

2173
01:40:18,689 --> 01:40:22,889
have done it I wonder if I should have

2174
01:40:20,220 --> 01:40:26,579
done it instead by flooring x-men I

2175
01:40:22,890 --> 01:40:28,260
don't know that's kind of a that's kind

2176
01:40:26,579 --> 01:40:29,519
of an interesting question if I'm I

2177
01:40:28,260 --> 01:40:30,930
probably should have done it with floor

2178
01:40:29,520 --> 01:40:33,000
X min let's do that really quickly that

2179
01:40:30,930 --> 01:40:35,490
way as well again you know we've just

2180
01:40:33,000 --> 01:40:37,319
got this diagram basically you know I'm

2181
01:40:35,489 --> 01:40:39,029
saying and what we're doing is we're

2182
01:40:37,319 --> 01:40:40,170
saying well we've got a texture sample

2183
01:40:39,029 --> 01:40:43,050
that's going to come in here somewhere

2184
01:40:40,170 --> 01:40:46,020
let's say it comes in here right we know

2185
01:40:43,050 --> 01:40:47,670
that this is the center of the texels

2186
01:40:46,020 --> 01:40:50,700
this is that like 0.5 so this might be

2187
01:40:47,670 --> 01:40:54,510
like 1.5 this right here might be like

2188
01:40:50,699 --> 01:40:57,269
0.5 that would be like 2.5 right we know

2189
01:40:54,510 --> 01:40:59,670
we want a sample right here this value

2190
01:40:57,270 --> 01:41:01,320
right here is gonna be where we would

2191
01:40:59,670 --> 01:41:02,850
floor - and we're not flooring exactly

2192
01:41:01,319 --> 01:41:04,649
at 1.5 because we're shifting our pixel

2193
01:41:02,850 --> 01:41:06,510
grid over just a floor will work that's

2194
01:41:04,649 --> 01:41:07,739
basically all we're doing right if we

2195
01:41:06,510 --> 01:41:10,140
floored ex-movie floored - x max before

2196
01:41:07,739 --> 01:41:12,059
we Florida X min we can still do the

2197
01:41:10,140 --> 01:41:15,600
same computation right we can still

2198
01:41:12,060 --> 01:41:16,940
figure out how much is in each one of

2199
01:41:15,600 --> 01:41:19,909
these

2200
01:41:16,939 --> 01:41:23,419
pretty easily I think I don't think we

2201
01:41:19,908 --> 01:41:26,359
would have too much trouble looks like I

2202
01:41:23,420 --> 01:41:27,440
can't imagine why hmm because you don't

2203
01:41:26,359 --> 01:41:29,059
really even know which one you're

2204
01:41:27,439 --> 01:41:30,408
crossing anyway you're just trying to

2205
01:41:29,060 --> 01:41:31,750
figure out how much is on one side and

2206
01:41:30,408 --> 01:41:34,939
how much is on the other side of

2207
01:41:31,750 --> 01:41:36,619
whatever whatever bound for your

2208
01:41:34,939 --> 01:41:38,629
crossing and you know that each one is

2209
01:41:36,619 --> 01:41:41,389
in a different textile because otherwise

2210
01:41:38,630 --> 01:41:43,969
you would have you would have just not

2211
01:41:41,389 --> 01:41:45,440
hit that branch of the if right so

2212
01:41:43,969 --> 01:41:47,029
anyway if I was to do it with floor

2213
01:41:45,439 --> 01:41:48,829
x-men's who are producing this value

2214
01:41:47,029 --> 01:41:52,340
here right then all I really want to

2215
01:41:48,829 --> 01:41:55,908
know is how far is it from the floor

2216
01:41:52,340 --> 01:41:57,829
decks men to here right then from here

2217
01:41:55,908 --> 01:41:58,969
to here and then from here to here right

2218
01:41:57,829 --> 01:42:04,550
I'm trying to figure out what these two

2219
01:41:58,969 --> 01:42:06,590
spans right there look like and again if

2220
01:42:04,550 --> 01:42:08,960
you one of the reasons it's a little bit

2221
01:42:06,590 --> 01:42:10,550
better to floor to the xmax is I think

2222
01:42:08,960 --> 01:42:12,319
that always gives you the midline which

2223
01:42:10,550 --> 01:42:15,050
is a little bit easier to do but we

2224
01:42:12,319 --> 01:42:16,880
always know that this is point five away

2225
01:42:15,050 --> 01:42:19,760
from this so it's not really

2226
01:42:16,880 --> 01:42:22,340
particularly difficult I don't think to

2227
01:42:19,760 --> 01:42:23,600
work that math through either that's my

2228
01:42:22,340 --> 01:42:25,969
guess

2229
01:42:23,600 --> 01:42:31,610
so I don't know as I'm looking at it I

2230
01:42:25,969 --> 01:42:32,569
guess I don't know I guess it's not easy

2231
01:42:31,609 --> 01:42:34,069
that way so I'll just keep going with

2232
01:42:32,569 --> 01:42:35,929
what I was going alright so if this is

2233
01:42:34,069 --> 01:42:37,908
what we have here now what we want to do

2234
01:42:35,929 --> 01:42:39,500
since we have floor x max minus X min x

2235
01:42:37,908 --> 01:42:41,059
max minus X min this is our blend

2236
01:42:39,500 --> 01:42:42,500
coefficient remember that just gives us

2237
01:42:41,060 --> 01:42:44,719
the T value so it's a value that goes

2238
01:42:42,500 --> 01:42:47,238
from zero to one what we want to do now

2239
01:42:44,719 --> 01:42:50,119
is we've got this u value we want to

2240
01:42:47,238 --> 01:42:51,769
readjust our U value right our sample

2241
01:42:50,119 --> 01:42:53,329
value maybe was here or whatever right

2242
01:42:51,770 --> 01:42:55,280
we want to adjust that so that the

2243
01:42:53,329 --> 01:42:57,649
gravis card will do the correct bilinear

2244
01:42:55,279 --> 01:42:59,090
blend that computes how much pixel

2245
01:42:57,649 --> 01:43:02,420
coverage there was for this particular

2246
01:42:59,090 --> 01:43:04,819
for each side of the Texel the Texel on

2247
01:43:02,420 --> 01:43:06,139
this side and the Texel on this side of

2248
01:43:04,819 --> 01:43:07,279
our pixel boundary which is like

2249
01:43:06,139 --> 01:43:10,609
sampling bear or something

2250
01:43:07,279 --> 01:43:12,229
right so when we look at how we have to

2251
01:43:10,609 --> 01:43:16,729
do that what we want to do is first

2252
01:43:12,229 --> 01:43:18,229
create the u value in expanded space for

2253
01:43:16,729 --> 01:43:20,599
the x coordinate that we'd actually need

2254
01:43:18,229 --> 01:43:23,238
so our X sample right I'll just call

2255
01:43:20,600 --> 01:43:26,870
that XS right what we want to do is say

2256
01:43:23,238 --> 01:43:32,019
this is the T value this offset here is

2257
01:43:26,869 --> 01:43:32,019
basically telling us how

2258
01:43:32,140 --> 01:43:41,180
how much we want a sample away from our

2259
01:43:36,470 --> 01:43:43,579
x-men right so this X sample position is

2260
01:43:41,180 --> 01:43:47,030
going to be whatever our x-men was which

2261
01:43:43,579 --> 01:43:49,369
we know I'm sorry not our x-men it's

2262
01:43:47,029 --> 01:43:51,679
going to be however far off of the flow

2263
01:43:49,369 --> 01:43:56,359
of the texture sample for our floored

2264
01:43:51,680 --> 01:43:58,520
x-men right so our floored x-men here we

2265
01:43:56,359 --> 01:44:00,769
know we want to be that far forward from

2266
01:43:58,520 --> 01:44:02,390
it but since we already floored our xmax

2267
01:44:00,770 --> 01:44:05,980
we could also think of it as being how

2268
01:44:02,390 --> 01:44:08,510
far backwards from that we want right so

2269
01:44:05,979 --> 01:44:11,239
if we look at our floor x max which

2270
01:44:08,510 --> 01:44:15,050
we've already computed that's out here

2271
01:44:11,239 --> 01:44:19,159
we just want to say that floored x max

2272
01:44:15,050 --> 01:44:22,100
value we want to sample 1 minus this

2273
01:44:19,159 --> 01:44:27,819
value behind it right so we just want to

2274
01:44:22,100 --> 01:44:27,820
subtract 1 minus this expression here

2275
01:44:28,119 --> 01:44:32,920
again we only have to compute that floor

2276
01:44:30,319 --> 01:44:32,920
x max once

2277
01:44:38,500 --> 01:44:43,939
right so we know this is the equation we

2278
01:44:42,560 --> 01:44:45,170
actually want to compute for the

2279
01:44:43,939 --> 01:44:48,169
location we're going to sample we're

2280
01:44:45,170 --> 01:44:50,270
taking the pixel center of the far Texel

2281
01:44:48,170 --> 01:44:52,130
and we're moving backwards by the amount

2282
01:44:50,270 --> 01:44:55,940
we want to force the graphics card to

2283
01:44:52,130 --> 01:44:57,980
blend what does that end up being who

2284
01:44:55,939 --> 01:45:00,019
knows this this may be there may be some

2285
01:44:57,979 --> 01:45:02,419
sloppy math errors in here but you would

2286
01:45:00,020 --> 01:45:05,750
grind this through maybe use a computer

2287
01:45:02,420 --> 01:45:07,730
algebra system to help you but we're

2288
01:45:05,750 --> 01:45:08,960
going to want to multiply this out in

2289
01:45:07,729 --> 01:45:11,389
fact let me just start by mapping out

2290
01:45:08,960 --> 01:45:14,179
one minus this value that's gonna be

2291
01:45:11,390 --> 01:45:15,590
minus distribute to the one then a minus

2292
01:45:14,179 --> 01:45:19,520
tribute to this will cause us to be a

2293
01:45:15,590 --> 01:45:25,100
plus then we've got our four x max minus

2294
01:45:19,520 --> 01:45:28,160
X min over X max minus X min right this

2295
01:45:25,100 --> 01:45:31,390
is the actual equation now as it stands

2296
01:45:28,159 --> 01:45:34,969
if I want to start combining terms here

2297
01:45:31,390 --> 01:45:38,420
I could I would multiply through by x

2298
01:45:34,969 --> 01:45:48,219
max minus X min so that would give me a

2299
01:45:38,420 --> 01:45:50,949
floor x max times X max minus X min over

2300
01:45:48,219 --> 01:45:58,179
well the whole thing is going to be over

2301
01:45:50,948 --> 01:46:06,349
x max X min right minus one same thing

2302
01:45:58,179 --> 01:46:08,929
I'm sorry minus x max - my win like so

2303
01:46:06,350 --> 01:46:16,130
and then plus the remainder of the

2304
01:46:08,929 --> 01:46:19,219
equation for x max minus X min okay I so

2305
01:46:16,130 --> 01:46:22,880
what you can see here is we basically

2306
01:46:19,219 --> 01:46:25,100
have this big distribution to do now if

2307
01:46:22,880 --> 01:46:27,230
we look at what the actual values come

2308
01:46:25,100 --> 01:46:30,980
out to be we've got a minus X min in

2309
01:46:27,229 --> 01:46:33,589
here so we've got two of those right if

2310
01:46:30,979 --> 01:46:38,089
I start to group terms right this is a

2311
01:46:33,590 --> 01:46:40,250
minus two X min here I've got a minus x

2312
01:46:38,090 --> 01:46:42,650
max this will distribute out so

2313
01:46:40,250 --> 01:46:51,539
basically the floor x max it's going to

2314
01:46:42,649 --> 01:46:58,509
be floor x max times x max minus floor

2315
01:46:51,539 --> 01:47:05,469
x max times x min minus x max plus floor

2316
01:46:58,510 --> 01:47:07,270
x max minus 2x max right I've probably

2317
01:47:05,469 --> 01:47:09,779
already made so many math errors

2318
01:47:07,270 --> 01:47:13,630
this is one I would definitely want

2319
01:47:09,779 --> 01:47:15,729
computer algebra for but for what it's

2320
01:47:13,630 --> 01:47:17,619
worth so if you look at how this

2321
01:47:15,729 --> 01:47:19,959
actually works out these two x max is

2322
01:47:17,619 --> 01:47:23,109
also kind of coalesce and so we get

2323
01:47:19,960 --> 01:47:25,420
minus 2x max in here and 2 x max with

2324
01:47:23,109 --> 01:47:27,759
the floor x max so if we grouped all

2325
01:47:25,420 --> 01:47:33,730
those terms together we would actually

2326
01:47:27,760 --> 01:47:42,940
get I believe floor x max right if you

2327
01:47:33,729 --> 01:47:50,529
look at this we've got to don't we don't

2328
01:47:42,939 --> 01:47:53,939
remind that may be it so that may be it

2329
01:47:50,529 --> 01:47:53,939
for simplification that we can do there

2330
01:47:54,300 --> 01:48:00,130
that was a min not a max so that may be

2331
01:47:58,899 --> 01:48:01,509
all we can do for simplification by

2332
01:48:00,130 --> 01:48:02,889
multiplying out I don't really know that

2333
01:48:01,510 --> 01:48:04,360
we would want to necessarily do that

2334
01:48:02,889 --> 01:48:05,260
doesn't look particularly good I was

2335
01:48:04,359 --> 01:48:06,789
just looking to see if there's any

2336
01:48:05,260 --> 01:48:09,369
cancellation cuz this is pretty simple

2337
01:48:06,789 --> 01:48:12,698
to compute right here it's like very

2338
01:48:09,369 --> 01:48:15,099
very very it's it's a you know you

2339
01:48:12,698 --> 01:48:17,439
compute the floor once then you do a few

2340
01:48:15,100 --> 01:48:19,120
minuses and one divide

2341
01:48:17,439 --> 01:48:20,488
so it's pretty pretty strict it's pretty

2342
01:48:19,119 --> 01:48:23,050
straightforward there's not a lot to it

2343
01:48:20,488 --> 01:48:25,869
this would be our X sample value we

2344
01:48:23,050 --> 01:48:27,969
would then add the 0.5 offset back in

2345
01:48:25,869 --> 01:48:32,649
and divide by the texture width and we

2346
01:48:27,969 --> 01:48:37,090
be done right make sense now one of the

2347
01:48:32,649 --> 01:48:39,698
things that may be true is this may now

2348
01:48:37,090 --> 01:48:41,590
take care of our if for us as well so if

2349
01:48:39,698 --> 01:48:45,488
you look at what's going to happen if X

2350
01:48:41,590 --> 01:48:46,929
min and x max is 0 right it would be

2351
01:48:45,488 --> 01:48:49,238
nice if we could figure out a way to get

2352
01:48:46,929 --> 01:48:51,789
that into a multiply and we might

2353
01:48:49,238 --> 01:48:52,779
actually be able to do that I feel like

2354
01:48:51,789 --> 01:48:54,969
we should dig in a little bit further

2355
01:48:52,779 --> 01:48:56,979
here because if we did then we would be

2356
01:48:54,969 --> 01:48:59,670
able to just make that be a coefficient

2357
01:48:56,979 --> 01:49:02,229
which drops out to 0 right

2358
01:48:59,670 --> 01:49:04,840
so let's try and phrase this in terms of

2359
01:49:02,229 --> 01:49:07,869
a differential in some way

2360
01:49:04,840 --> 01:49:10,360
right let's try to make this something

2361
01:49:07,869 --> 01:49:11,890
that we just go ahead and add in a way

2362
01:49:10,359 --> 01:49:13,689
that will give us some kind of a

2363
01:49:11,890 --> 01:49:18,460
coefficient that we actually can use

2364
01:49:13,689 --> 01:49:22,389
that's not going to be a one over right

2365
01:49:18,460 --> 01:49:31,539
in this particular case so how would I

2366
01:49:22,390 --> 01:49:32,829
do that I think because there should be

2367
01:49:31,539 --> 01:49:36,189
a way to grind this math out

2368
01:49:32,829 --> 01:49:38,019
I would think having never looked at

2369
01:49:36,189 --> 01:49:40,000
this really before I think there's a

2370
01:49:38,020 --> 01:49:43,140
probably way that I could do this a

2371
01:49:40,000 --> 01:49:46,180
little bit more straightforward right

2372
01:49:43,140 --> 01:49:48,369
what I want to do here is basically say

2373
01:49:46,180 --> 01:49:51,100
is there a freight a change of reference

2374
01:49:48,369 --> 01:49:53,229
that I can do that just says how much is

2375
01:49:51,100 --> 01:49:57,220
the offset that I actually need to go

2376
01:49:53,229 --> 01:49:59,500
from my original you in order to get

2377
01:49:57,220 --> 01:50:01,510
there and if I was to assume that this

2378
01:49:59,500 --> 01:50:04,930
was correct then what I could do I

2379
01:50:01,510 --> 01:50:07,270
suppose is say we know my original you

2380
01:50:04,930 --> 01:50:12,100
write the original you value that I

2381
01:50:07,270 --> 01:50:19,540
started with is actually going to be a

2382
01:50:12,100 --> 01:50:25,740
value we know it's going to be X it's

2383
01:50:19,539 --> 01:50:30,819
going to be 0.5 times x max minus X min

2384
01:50:25,739 --> 01:50:35,409
right plus X min we know where it is

2385
01:50:30,819 --> 01:50:38,199
effectively right so if we were to

2386
01:50:35,409 --> 01:50:41,019
phrase the this as we want the

2387
01:50:38,199 --> 01:50:44,050
difference between this point and this

2388
01:50:41,020 --> 01:50:50,580
point right so we actually want our

2389
01:50:44,050 --> 01:51:02,670
sample value but to be that right I want

2390
01:50:50,579 --> 01:51:02,670
for X max minus 1 plus 4

2391
01:51:02,680 --> 01:51:13,079
xmax minus X manner plus X plus X men

2392
01:51:07,779 --> 01:51:19,659
probably what was it 4x X minus X man

2393
01:51:13,079 --> 01:51:23,769
over X max minus X Men right so the

2394
01:51:19,659 --> 01:51:27,639
total with x max minus X men also is

2395
01:51:23,770 --> 01:51:29,980
just one pixels size in texture space so

2396
01:51:27,640 --> 01:51:33,400
we kind of already know what that is as

2397
01:51:29,979 --> 01:51:38,619
well it's a pretty straightforward value

2398
01:51:33,399 --> 01:51:40,329
so you know now that I think about it we

2399
01:51:38,619 --> 01:51:42,699
don't really need to ever worry about

2400
01:51:40,329 --> 01:51:45,220
that because it's a known value X max

2401
01:51:42,699 --> 01:51:47,769
minus X min in this case is just one

2402
01:51:45,220 --> 01:51:54,730
pixel in texture space and is actually

2403
01:51:47,770 --> 01:51:59,140
just the D U value right so DX D u I'm

2404
01:51:54,729 --> 01:52:01,509
sorry D u DX in the pixel shader would

2405
01:51:59,140 --> 01:52:03,520
actually map directly to this so this

2406
01:52:01,510 --> 01:52:05,560
because that is one pixels wide because

2407
01:52:03,520 --> 01:52:09,430
we know that Max and min are one pixel

2408
01:52:05,560 --> 01:52:11,530
wide so really this doesn't exist this

2409
01:52:09,430 --> 01:52:16,420
is just a multiplication I'm sorry I

2410
01:52:11,529 --> 01:52:19,449
divide by the D you value that we get in

2411
01:52:16,420 --> 01:52:21,690
the pixel shader right so that's

2412
01:52:19,449 --> 01:52:25,840
actually quite simple

2413
01:52:21,689 --> 01:52:29,289
we know that floor x max minus one in

2414
01:52:25,840 --> 01:52:34,750
this case also so that we actually also

2415
01:52:29,289 --> 01:52:41,380
know that we actually also know right

2416
01:52:34,750 --> 01:52:43,750
because x max - floor x max minus one is

2417
01:52:41,380 --> 01:52:45,430
just moving us one texel backwards right

2418
01:52:43,750 --> 01:52:47,380
so that's always constant Florrick's

2419
01:52:45,430 --> 01:52:53,500
actually got in both places and the

2420
01:52:47,380 --> 01:52:55,949
x-men so really it's just it's just this

2421
01:52:53,500 --> 01:52:55,949
part

2422
01:53:09,429 --> 01:53:17,480
really it's just that part and if we got

2423
01:53:12,920 --> 01:53:19,699
that part it's just a sea move so really

2424
01:53:17,479 --> 01:53:21,649
you know I think there's probably a

2425
01:53:19,698 --> 01:53:23,359
subtler way to do this and maybe

2426
01:53:21,649 --> 01:53:24,799
tomorrow what we should do is dedicate a

2427
01:53:23,359 --> 01:53:28,579
stream just working out all the math

2428
01:53:24,800 --> 01:53:33,739
exactly but basically all you're doing

2429
01:53:28,579 --> 01:53:35,479
is just adjusting this value right you

2430
01:53:33,738 --> 01:53:36,919
can just probably see move that value

2431
01:53:35,479 --> 01:53:39,889
because this entire equation is just all

2432
01:53:36,920 --> 01:53:46,658
known stuff and so what you could do is

2433
01:53:39,890 --> 01:53:52,520
just say look set your X min to either

2434
01:53:46,658 --> 01:53:56,329
exactly B to either just be the offset

2435
01:53:52,520 --> 01:53:58,760
of from the from because your floor x

2436
01:53:56,329 --> 01:54:00,350
max right is is going to be the value

2437
01:53:58,760 --> 01:54:02,989
you want so actually you can just set

2438
01:54:00,350 --> 01:54:06,679
this to be zero in that if case so our

2439
01:54:02,988 --> 01:54:09,109
if is just X min right equals the actual

2440
01:54:06,679 --> 01:54:11,329
xmin we computed that's what we do yeah

2441
01:54:09,109 --> 01:54:16,609
it's pretty simple actually

2442
01:54:11,329 --> 01:54:19,309
where was that too much math so mm-hmm

2443
01:54:16,609 --> 01:54:23,750
this value here all we actually have to

2444
01:54:19,310 --> 01:54:26,870
do is say set this value to zero if this

2445
01:54:23,750 --> 01:54:30,408
is true right so it's just a C move

2446
01:54:26,869 --> 01:54:32,029
almost free right so all we do is say if

2447
01:54:30,408 --> 01:54:35,029
the floor of X main equals the floor of

2448
01:54:32,029 --> 01:54:36,769
X Max X min equals zero otherwise X min

2449
01:54:35,029 --> 01:54:44,469
stays the same then we compute this

2450
01:54:36,770 --> 01:54:44,469
equation and we're done right

2451
01:54:44,600 --> 01:54:51,660
then we get exact sampling in all cases

2452
01:54:48,510 --> 01:54:57,239
we do that for both ru and RV again not

2453
01:54:51,659 --> 01:54:59,069
it's a few multiplies and a div the divs

2454
01:54:57,238 --> 01:55:02,218
not great but it could be approximate I

2455
01:54:59,069 --> 01:55:03,809
don't know if we can get rid of it the

2456
01:55:02,219 --> 01:55:07,350
good news is it's constant across the

2457
01:55:03,810 --> 01:55:09,510
pixel shader for a particular texture so

2458
01:55:07,350 --> 01:55:10,980
actually we could set it this could be

2459
01:55:09,510 --> 01:55:12,329
set in the constant store and we

2460
01:55:10,979 --> 01:55:21,179
wouldn't actually do divide you could do

2461
01:55:12,329 --> 01:55:22,738
multiply right so again pretty simple

2462
01:55:21,180 --> 01:55:24,239
stuff if we actually work this out in

2463
01:55:22,738 --> 01:55:25,949
the pixel shader it's only if you know

2464
01:55:24,238 --> 01:55:29,009
it's it's a handful of instructions that

2465
01:55:25,949 --> 01:55:31,079
we would issue and it would solve all of

2466
01:55:29,010 --> 01:55:32,550
the sampling problems now there's a

2467
01:55:31,079 --> 01:55:33,750
little more you would want to do here if

2468
01:55:32,550 --> 01:55:36,119
you're going to MIT map but we're out of

2469
01:55:33,750 --> 01:55:37,350
time for today and in the case of

2470
01:55:36,119 --> 01:55:40,109
children of Morden most of what I'm

2471
01:55:37,350 --> 01:55:44,460
seeing is not MIT map errors it's it's

2472
01:55:40,109 --> 01:55:46,139
this so this needs to be fixed and again

2473
01:55:44,460 --> 01:55:49,770
it's in unity it's I guess it's unities

2474
01:55:46,140 --> 01:55:54,739
problem but before I leave I want to see

2475
01:55:49,770 --> 01:55:59,330
on the chat it looks like it looks like

2476
01:55:54,738 --> 01:56:04,919
it looks like we can set - force GL core

2477
01:55:59,329 --> 01:56:07,680
inside as a launch parameter for tank

2478
01:56:04,920 --> 01:56:09,930
potentially in children of morta and if

2479
01:56:07,680 --> 01:56:12,989
that's true we may be able to actually

2480
01:56:09,930 --> 01:56:16,200
edit the shader so before we end for the

2481
01:56:12,988 --> 01:56:20,119
day let's just try and see if we can do

2482
01:56:16,199 --> 01:56:20,119
that oops

2483
01:56:22,310 --> 01:56:25,890
okay

2484
01:56:23,520 --> 01:56:29,219
um so what I'm gonna do now is see if I

2485
01:56:25,890 --> 01:56:31,140
can add that as a launch parameter I

2486
01:56:29,219 --> 01:56:33,630
don't know that it would go here I may

2487
01:56:31,140 --> 01:56:36,690
have to go into steam and set it so I

2488
01:56:33,630 --> 01:56:37,140
may have to do I don't know that this

2489
01:56:36,689 --> 01:56:39,449
will work

2490
01:56:37,140 --> 01:56:40,920
so we'll try it but we may have to just

2491
01:56:39,449 --> 01:56:42,988
go into steam and set additional

2492
01:56:40,920 --> 01:56:45,739
parameters there we'll give it a shot

2493
01:56:42,988 --> 01:56:45,738
here and just see what happens

2494
01:56:47,000 --> 01:56:51,510
looks like that did work because

2495
01:56:49,738 --> 01:56:57,169
initialized graphics engine said it

2496
01:56:51,510 --> 01:56:57,170
failed so that suggests to me that that

2497
01:56:57,220 --> 01:57:06,270
that it did work but it didn't actually

2498
01:56:59,020 --> 01:57:06,270
help maybe GL core isn't supported

2499
01:57:19,988 --> 01:57:31,449
so I don't know it looks like that just

2500
01:57:29,439 --> 01:57:33,309
may not have gotten ship it may be

2501
01:57:31,449 --> 01:57:35,469
because there's no source code for the

2502
01:57:33,310 --> 01:57:37,180
shaders so it may be that they just pre

2503
01:57:35,469 --> 01:57:40,890
compiled them and they only exist free

2504
01:57:37,180 --> 01:57:40,890
compiled you know what I mean

2505
01:57:41,189 --> 01:57:56,259
but yeah so sadly not much we can really

2506
01:57:50,229 --> 01:57:59,139
do here I wish we could edit those those

2507
01:57:56,260 --> 01:58:02,560
shader parameters but it doesn't look

2508
01:57:59,140 --> 01:58:04,329
like we can if I pop back to two n site

2509
01:58:02,560 --> 01:58:06,250
here I'll do one more thing before we

2510
01:58:04,329 --> 01:58:11,309
stop oops

2511
01:58:06,250 --> 01:58:11,310
I'm gonna load up that children amorta

2512
01:58:11,880 --> 01:58:16,020
I'm gonna go ahead and try and launch

2513
01:58:16,859 --> 01:58:21,269
I'm gonna have to go through this little

2514
01:58:18,760 --> 01:58:21,270
dance here

2515
01:58:35,630 --> 01:58:42,350
there's that steam thunk I wonder if

2516
01:58:39,500 --> 01:58:46,000
there's a unity parameter to disable

2517
01:58:42,350 --> 01:58:46,000
scheme that would also help

2518
01:59:12,670 --> 01:59:16,670
so basically I'm just gonna go ahead and

2519
01:59:15,140 --> 01:59:18,789
try and capture a frame in and save it

2520
01:59:16,670 --> 01:59:18,789
out

2521
01:59:19,550 --> 01:59:22,619
[Music]

2522
01:59:40,369 --> 01:59:46,979
all right and so if we take a look here

2523
01:59:44,420 --> 01:59:52,170
all I want to do is get another one of

2524
01:59:46,979 --> 01:59:54,659
those frame captures in the mix and so

2525
01:59:52,170 --> 01:59:58,640
I'm going to pop back over here I'm

2526
01:59:54,659 --> 02:00:04,529
gonna try to do the attach like so and

2527
01:59:58,640 --> 02:00:08,670
looks like so okay I'm gonna capture for

2528
02:00:04,529 --> 02:00:10,800
a live analysis and let it kind of fail

2529
02:00:08,670 --> 02:00:12,569
a bit but it still does get us a frame

2530
02:00:10,800 --> 02:00:15,029
we can use weeks it seemed like it does

2531
02:00:12,569 --> 02:00:21,059
I'm then gonna go ahead and just save

2532
02:00:15,029 --> 02:00:23,670
out export C++ capture I don't know what

2533
02:00:21,060 --> 02:00:27,120
this will actually do and whether that

2534
02:00:23,670 --> 02:00:31,079
will let us actually do anything with it

2535
02:00:27,119 --> 02:00:34,170
but we'll we'll try and then I'm gonna

2536
02:00:31,079 --> 02:00:36,809
go ahead and and exit out of insight and

2537
02:00:34,170 --> 02:00:40,800
we'll just see I'm gonna go ahead and

2538
02:00:36,810 --> 02:00:48,380
also close my children amorta as well or

2539
02:00:40,800 --> 02:00:55,529
try to anyway don't seem to be able to

2540
02:00:48,380 --> 02:00:59,279
let's try it through here so what I

2541
02:00:55,529 --> 02:01:01,109
would like to do now is just take a

2542
02:00:59,279 --> 02:01:02,869
quick look at what that actually dumped

2543
02:01:01,109 --> 02:01:05,130
out because I don't know to what extent

2544
02:01:02,869 --> 02:01:08,189
that gives us anything we could use I

2545
02:01:05,130 --> 02:01:15,179
just wanted to see what that actually

2546
02:01:08,189 --> 02:01:19,529
puts in my directory here so here is

2547
02:01:15,179 --> 02:01:21,279
some C code it's got a big ol hunk of

2548
02:01:19,529 --> 02:01:24,349
binary data

2549
02:01:21,279 --> 02:01:24,349
[Music]

2550
02:01:27,479 --> 02:01:31,379
it looks like

2551
02:01:35,729 --> 02:01:42,369
unfortunately I want to say I don't

2552
02:01:38,470 --> 02:01:46,869
think it actually gave us something we

2553
02:01:42,369 --> 02:01:53,979
could really use because it doesn't have

2554
02:01:46,869 --> 02:01:56,260
the shaders in here I don't think yeah

2555
02:01:53,979 --> 02:01:58,869
so you can kind of see like I think what

2556
02:01:56,260 --> 02:02:02,949
they do is they just bundle all the

2557
02:01:58,869 --> 02:02:04,630
shaders up into this data bin file here

2558
02:02:02,949 --> 02:02:08,889
so they're probably in there along with

2559
02:02:04,630 --> 02:02:11,529
all of the actual data we could still go

2560
02:02:08,890 --> 02:02:13,630
ahead and try to intercept what that

2561
02:02:11,529 --> 02:02:15,699
shader was and then replace it with a

2562
02:02:13,630 --> 02:02:17,680
different one when it gets submitted the

2563
02:02:15,699 --> 02:02:19,059
problem with that is that's gonna take a

2564
02:02:17,680 --> 02:02:20,680
while for us to hunt down so I'm not

2565
02:02:19,060 --> 02:02:23,860
gonna do that today we could try doing

2566
02:02:20,680 --> 02:02:28,690
it tomorrow right

2567
02:02:23,859 --> 02:02:30,369
and and see how we go all right I'm

2568
02:02:28,689 --> 02:02:32,669
gonna go ahead and quickly go to Q&amp;A and

2569
02:02:30,369 --> 02:02:32,670
we'll just

2570
02:03:17,619 --> 02:03:29,000
someone says someone says here's a good

2571
02:03:27,350 --> 02:03:31,700
side-by-side sample of the artifacts are

2572
02:03:29,000 --> 02:03:34,238
talking about at shader toy okay that

2573
02:03:31,699 --> 02:03:34,238
would be nice

2574
02:03:41,899 --> 02:03:53,059
yeah that those are exactly the ones I'm

2575
02:03:48,409 --> 02:03:55,489
talking about you can see all that

2576
02:03:53,060 --> 02:03:57,350
shimmering there's no need for any of

2577
02:03:55,489 --> 02:03:59,239
that you can just it can just look

2578
02:03:57,350 --> 02:04:03,500
perfectly smooth and you would never

2579
02:03:59,239 --> 02:04:04,909
know that it was using filtering at all

2580
02:04:03,500 --> 02:04:07,069
it just you wouldn't see those

2581
02:04:04,909 --> 02:04:10,399
objectionable artifacts those shimmery

2582
02:04:07,069 --> 02:04:12,049
artifacts as it moves around and you

2583
02:04:10,399 --> 02:04:15,349
know what while we've got this here I

2584
02:04:12,050 --> 02:04:16,159
can I probably should in fact maybe this

2585
02:04:15,350 --> 02:04:18,650
is what we'll do tomorrow

2586
02:04:16,159 --> 02:04:22,880
if we just do it here we can fix it in

2587
02:04:18,649 --> 02:04:25,189
here instead and and then hopefully

2588
02:04:22,880 --> 02:04:28,069
maybe someone at unity will add it or

2589
02:04:25,189 --> 02:04:29,960
something it just it just sucks to play

2590
02:04:28,069 --> 02:04:32,599
so many games with this artifact for no

2591
02:04:29,960 --> 02:04:34,279
reason it's just it's just it's and it's

2592
02:04:32,600 --> 02:04:36,740
free once you work out the rest of the

2593
02:04:34,279 --> 02:04:38,179
math it's it's even simpler than what I

2594
02:04:36,739 --> 02:04:39,649
did because I just did the first path to

2595
02:04:38,180 --> 02:04:41,600
show you how to work out the math the

2596
02:04:39,649 --> 02:04:43,339
basic idea behind it but if you actually

2597
02:04:41,600 --> 02:04:45,650
sit down and have a whole day that you

2598
02:04:43,340 --> 02:04:47,539
spend looking at this you could probably

2599
02:04:45,649 --> 02:04:50,149
get it down to something incredibly

2600
02:04:47,539 --> 02:04:55,609
small right just like really really

2601
02:04:50,149 --> 02:05:01,069
really small if that makes sense alright

2602
02:04:55,609 --> 02:05:07,880
so what is this actually doing though

2603
02:05:01,069 --> 02:05:12,019
this is this is not this is doing

2604
02:05:07,880 --> 02:05:16,090
something slightly different because

2605
02:05:12,020 --> 02:05:21,070
this is not the same as turning off the

2606
02:05:16,090 --> 02:05:21,069
bilinear filtering which

2607
02:05:52,708 --> 02:05:58,219
so I'm a little confused this looks like

2608
02:05:55,260 --> 02:06:04,610
they're actually doing the update but

2609
02:05:58,219 --> 02:06:07,609
this looks shimmery to me so I'm super

2610
02:06:04,609 --> 02:06:07,609
confused

2611
02:06:28,149 --> 02:06:35,339
oh I see it's divided oh yeah okay so

2612
02:06:31,239 --> 02:06:35,340
that's the good version okay perfect

2613
02:06:35,760 --> 02:06:40,420
never mind yeah you're right

2614
02:06:38,229 --> 02:06:42,369
so they how do they do this in shader

2615
02:06:40,420 --> 02:06:45,279
toy I don't know shader toy very well

2616
02:06:42,369 --> 02:06:47,340
how are they making it so that it has

2617
02:06:45,279 --> 02:06:53,439
like two separate shaders one for each

2618
02:06:47,340 --> 02:06:55,270
side of the thing but yeah a perfect so

2619
02:06:53,439 --> 02:06:56,439
I guess I don't know why I was got too

2620
02:06:55,270 --> 02:06:58,510
carried away I was looking at it like it

2621
02:06:56,439 --> 02:07:00,929
looks like they're doing the fix-up so

2622
02:06:58,510 --> 02:07:04,000
here you can see the difference I mean

2623
02:07:00,930 --> 02:07:05,680
it's just not there's no reason you

2624
02:07:04,000 --> 02:07:06,369
would ever want to see this it's not an

2625
02:07:05,680 --> 02:07:09,039
aesthetic choice

2626
02:07:06,369 --> 02:07:16,149
it just looks wrong you always want the

2627
02:07:09,039 --> 02:07:17,680
one on the right side I mean that's what

2628
02:07:16,149 --> 02:07:19,029
you want and the right one is doing the

2629
02:07:17,680 --> 02:07:20,110
fix-up I was talking about it's not

2630
02:07:19,029 --> 02:07:22,659
quite doing it I don't think the same

2631
02:07:20,109 --> 02:07:26,279
way I would do it after working it

2632
02:07:22,659 --> 02:07:26,279
through but it's it's doing it right and

2633
02:07:26,699 --> 02:07:31,359
so this is just always wrong and this is

2634
02:07:29,529 --> 02:07:32,710
the what this is what happens like this

2635
02:07:31,359 --> 02:07:34,719
is what children amorta or generally

2636
02:07:32,710 --> 02:07:36,399
unity games do and you always want this

2637
02:07:34,720 --> 02:07:38,619
one because it's free it's it's really

2638
02:07:36,399 --> 02:07:40,239
no slower it's it's like slightly

2639
02:07:38,619 --> 02:07:41,979
there's a little more arithmetic in the

2640
02:07:40,239 --> 02:07:43,389
shader but very very little and

2641
02:07:41,979 --> 02:07:45,759
especially you saw that children of

2642
02:07:43,390 --> 02:07:47,200
mortis shader it was huge so we're

2643
02:07:45,760 --> 02:07:51,600
talking about a little tiny you know a

2644
02:07:47,199 --> 02:07:51,599
few additions here right

2645
02:07:57,139 --> 02:08:02,449
I don't so again I don't really know how

2646
02:08:00,738 --> 02:08:05,629
to use shader toy so I'm not sure I

2647
02:08:02,448 --> 02:08:06,859
understand how to have two sides screen

2648
02:08:05,630 --> 02:08:11,060
to other stuff I guess what they're

2649
02:08:06,859 --> 02:08:12,259
doing here probably is just looking at

2650
02:08:11,060 --> 02:08:13,880
which side of the screen you're on and

2651
02:08:12,260 --> 02:08:15,440
then picking one of those so it's

2652
02:08:13,880 --> 02:08:21,139
probably a selector in here somewhere

2653
02:08:15,439 --> 02:08:23,388
so yeah okay so it's right here so if I

2654
02:08:21,139 --> 02:08:25,909
dot X greater than center X that's

2655
02:08:23,389 --> 02:08:28,310
what's giving us that divide dividing

2656
02:08:25,908 --> 02:08:29,479
line right so if I wanted the whole

2657
02:08:28,310 --> 02:08:32,989
image to be right

2658
02:08:29,479 --> 02:08:35,299
I could I could do if the other way

2659
02:08:32,988 --> 02:08:38,209
around right this is what puts in the

2660
02:08:35,300 --> 02:08:47,690
black bar in the center I could make it

2661
02:08:38,210 --> 02:08:50,989
larger right um so now I can clear it

2662
02:08:47,689 --> 02:08:53,928
more clearly see it on the stream so the

2663
02:08:50,988 --> 02:08:56,089
EF statements doing that and and you

2664
02:08:53,929 --> 02:08:58,100
don't need so shader toy isn't doing a

2665
02:08:56,090 --> 02:09:00,560
thing there they that was just someone

2666
02:08:58,100 --> 02:09:04,039
doing it for illustration purposes so if

2667
02:09:00,560 --> 02:09:06,770
we look we're talking only about these

2668
02:09:04,039 --> 02:09:08,658
lines of code here that happened inside

2669
02:09:06,770 --> 02:09:10,790
the if these are prepping it and then

2670
02:09:08,658 --> 02:09:13,069
these are actually doing the fractional

2671
02:09:10,789 --> 02:09:15,260
offset there this is just adding the

2672
02:09:13,069 --> 02:09:17,029
black bar so if we got rid of it

2673
02:09:15,260 --> 02:09:20,440
it would still be exactly the same image

2674
02:09:17,029 --> 02:09:20,439
it's just now you can't see

2675
02:09:28,649 --> 02:09:36,420
why can't I delete that line that should

2676
02:09:30,599 --> 02:09:41,840
only be the black bar right what's the

2677
02:09:36,420 --> 02:09:41,840
problem oh because the else

2678
02:09:46,109 --> 02:09:53,109
so looking at this now we have just the

2679
02:09:50,979 --> 02:09:58,389
left side is still wrong I can remove

2680
02:09:53,109 --> 02:10:00,609
this right and now we just have the

2681
02:09:58,390 --> 02:10:03,430
proper way that you know a Unity game

2682
02:10:00,609 --> 02:10:04,929
would look if they have these if they

2683
02:10:03,430 --> 02:10:11,560
have the correct shaders and that just

2684
02:10:04,930 --> 02:10:13,420
looks so much nicer right so again like

2685
02:10:11,560 --> 02:10:16,330
looking at this you can see how simple

2686
02:10:13,420 --> 02:10:18,789
this is and it's you can see the floor

2687
02:10:16,329 --> 02:10:20,739
and you can see the clamping they're

2688
02:10:18,789 --> 02:10:25,750
going on so this has worked out it looks

2689
02:10:20,739 --> 02:10:27,369
like this has worked out pretty clean so

2690
02:10:25,750 --> 02:10:29,739
you can see if you do grind that master

2691
02:10:27,369 --> 02:10:32,140
you get a much better result than what

2692
02:10:29,739 --> 02:10:34,389
we stopped on because we still have the

2693
02:10:32,140 --> 02:10:37,510
if they're doing the if is the in this

2694
02:10:34,390 --> 02:10:40,680
clamp right here so you can just get it

2695
02:10:37,510 --> 02:10:46,239
into a clamp like I had sort of win-wins

2696
02:10:40,680 --> 02:10:48,340
whimsically stated so again very very

2697
02:10:46,239 --> 02:10:49,989
straightforward if we look in and see

2698
02:10:48,340 --> 02:10:51,850
what's going on here this stuff is just

2699
02:10:49,989 --> 02:10:53,319
because they need you know it's it's

2700
02:10:51,850 --> 02:10:56,440
shader toys have to build everything in

2701
02:10:53,319 --> 02:11:01,359
here so all of the motion and zooming

2702
02:10:56,439 --> 02:11:03,009
and stuff is sort of baked into these

2703
02:11:01,359 --> 02:11:05,109
lines of code so we don't really care

2704
02:11:03,010 --> 02:11:07,770
about those this is where you would this

2705
02:11:05,109 --> 02:11:10,149
is what you'd actually be doing inside

2706
02:11:07,770 --> 02:11:14,200
your shader and actually this part right

2707
02:11:10,149 --> 02:11:16,809
here is just preparing the texture

2708
02:11:14,199 --> 02:11:22,899
coordinates anyway so really we're

2709
02:11:16,810 --> 02:11:24,640
talking mostly about this right so in

2710
02:11:22,899 --> 02:11:26,920
here you can see the first step of the

2711
02:11:24,640 --> 02:11:30,000
process is we're taking wherever we

2712
02:11:26,920 --> 02:11:35,680
wanted to sample inside our texture and

2713
02:11:30,000 --> 02:11:38,020
we're flooring the the value again if

2714
02:11:35,680 --> 02:11:39,340
you look at this these are coming in in

2715
02:11:38,020 --> 02:11:40,960
in pix currents so you would have to

2716
02:11:39,340 --> 02:11:43,840
first multiply by the size of your

2717
02:11:40,960 --> 02:11:48,880
texture because that's baked in here you

2718
02:11:43,840 --> 02:11:52,300
can see in here this stuff is is baking

2719
02:11:48,880 --> 02:11:54,220
in that that pixel size so that's the

2720
02:11:52,300 --> 02:11:55,630
size that's that's the size of the

2721
02:11:54,220 --> 02:11:58,389
pixels in your texture how big you

2722
02:11:55,630 --> 02:12:03,399
wanted them to be right so they that

2723
02:11:58,389 --> 02:12:05,168
they baked that in there hmm so in here

2724
02:12:03,399 --> 02:12:07,269
what we want to do is say alright we've

2725
02:12:05,168 --> 02:12:09,279
got the UV coordinates we're flooring

2726
02:12:07,269 --> 02:12:10,719
where we're looking up and we're adding

2727
02:12:09,279 --> 02:12:13,238
that point five remember I said we

2728
02:12:10,719 --> 02:12:15,760
wanted to shift everything over so it

2729
02:12:13,238 --> 02:12:17,888
would floor down properly we're then

2730
02:12:15,760 --> 02:12:20,289
taking the UV coordinates and we're

2731
02:12:17,889 --> 02:12:21,130
doing again that sampling backwards from

2732
02:12:20,288 --> 02:12:23,168
the max here

2733
02:12:21,130 --> 02:12:25,748
so we're doing a minus of the clamp

2734
02:12:23,168 --> 02:12:29,469
that's the fractional value of J is the

2735
02:12:25,748 --> 02:12:32,288
X min minus X max I'm sorry the floor at

2736
02:12:29,469 --> 02:12:36,849
floor X minus X to get that fractional

2737
02:12:32,288 --> 02:12:42,478
value the scale value here is probably

2738
02:12:36,849 --> 02:12:42,479
just the how big you wanted things to be

2739
02:12:42,658 --> 02:12:50,948
yeah and then we're just gonna sample

2740
02:12:44,788 --> 02:12:52,359
normally right so so really everything

2741
02:12:50,948 --> 02:12:53,888
they're using for sampling is wrapped up

2742
02:12:52,359 --> 02:12:56,288
in here this isn't probably how you

2743
02:12:53,889 --> 02:12:57,639
would write it this is assuming some

2744
02:12:56,288 --> 02:12:59,738
stuff about the way you're sampling

2745
02:12:57,639 --> 02:13:09,219
textures that isn't as generic as you

2746
02:12:59,738 --> 02:13:11,018
would want I don't think she just they

2747
02:13:09,219 --> 02:13:13,418
didn't put rotation in here and I think

2748
02:13:11,019 --> 02:13:16,059
this is kind of I guess you could do it

2749
02:13:13,418 --> 02:13:17,738
this way with rotation still but we

2750
02:13:16,059 --> 02:13:19,119
should probably write a shader toy that

2751
02:13:17,738 --> 02:13:23,009
does the correct thing with just a

2752
02:13:19,118 --> 02:13:29,038
regular texture sampling rather than

2753
02:13:23,010 --> 02:13:29,039
moving it in like this but either way

2754
02:13:38,579 --> 02:13:41,619
children of amor looks like a fairly

2755
02:13:40,449 --> 02:13:43,210
ambitious game why do you think they

2756
02:13:41,619 --> 02:13:45,640
didn't bother to implement proper prefix

2757
02:13:43,210 --> 02:13:48,489
of rendering again because that's not

2758
02:13:45,640 --> 02:13:49,810
their job the reason they license unity

2759
02:13:48,489 --> 02:13:52,300
is it supposed to be the graphics engine

2760
02:13:49,810 --> 02:13:54,730
right so they probably don't have a

2761
02:13:52,300 --> 02:13:57,250
bunch of expert graphics programmers on

2762
02:13:54,729 --> 02:13:58,359
the children of morta team that's if

2763
02:13:57,250 --> 02:14:05,470
they did they would have written their

2764
02:13:58,359 --> 02:14:09,939
own engine potentially right so I kind

2765
02:14:05,470 --> 02:14:12,010
of feel like that's the problem it's not

2766
02:14:09,939 --> 02:14:15,460
really children of mortis fault it's

2767
02:14:12,010 --> 02:14:16,989
unities fault how do you learn about

2768
02:14:15,460 --> 02:14:19,510
this artifact how do you figure out the

2769
02:14:16,989 --> 02:14:21,670
cause well it's just it's not really a

2770
02:14:19,510 --> 02:14:23,199
new artifact it's the same artifact we

2771
02:14:21,670 --> 02:14:25,000
always have which is sub-pixel rendering

2772
02:14:23,199 --> 02:14:26,800
and the old days games didn't have the

2773
02:14:25,000 --> 02:14:30,850
horsepower to sub-pixel rendering that's

2774
02:14:26,800 --> 02:14:32,529
why you go look at really early games

2775
02:14:30,850 --> 02:14:34,990
and they're very crispy as thing moves

2776
02:14:32,529 --> 02:14:38,319
around you get all those artifacts but

2777
02:14:34,989 --> 02:14:41,289
as we've gotten more understanding of

2778
02:14:38,319 --> 02:14:43,269
how graphics works and we have more

2779
02:14:41,289 --> 02:14:44,649
horsepower we generally think about

2780
02:14:43,270 --> 02:14:46,570
things from the perspective of subjects

2781
02:14:44,649 --> 02:14:50,069
surrendering so this is just basic

2782
02:14:46,569 --> 02:14:50,069
sub-pixel rendering that's all it is

2783
02:14:57,590 --> 02:15:02,449
oh wow this Tori's by D seven

2784
02:14:59,659 --> 02:15:04,960
samurai Thank You D seven Thanks for

2785
02:15:02,449 --> 02:15:04,960
writing it

2786
02:15:13,039 --> 02:15:20,760
someone posted a link before saying

2787
02:15:15,420 --> 02:15:23,359
unity has a pixel perfect 2d package so

2788
02:15:20,760 --> 02:15:23,360
what is that

2789
02:15:44,779 --> 02:15:47,869
[Music]

2790
02:16:35,609 --> 02:16:41,380
so I can't tell if this actually helps

2791
02:16:39,068 --> 02:16:43,448
though this sounds more like it just

2792
02:16:41,379 --> 02:16:46,058
snaps sprites to the nearest pixel

2793
02:16:43,449 --> 02:16:50,469
coordinate which is not would not help

2794
02:16:46,058 --> 02:16:53,018
you right because you're trying to get

2795
02:16:50,468 --> 02:16:59,888
smooth motion of the sprites and you're

2796
02:16:53,019 --> 02:17:02,170
not going to get that right so I don't

2797
02:16:59,888 --> 02:17:04,000
know I don't use your use I couldn't

2798
02:17:02,170 --> 02:17:06,099
tell you but it's not clear from the

2799
02:17:04,000 --> 02:17:07,478
explanation here whether this would

2800
02:17:06,099 --> 02:17:09,510
actually do what we're talking about or

2801
02:17:07,478 --> 02:17:09,510
not

2802
02:17:33,270 --> 02:17:38,290
and you know what this is totally wrong

2803
02:17:36,370 --> 02:17:41,950
yes so this is this is nothing like what

2804
02:17:38,290 --> 02:17:43,450
we're talking about so and and this is

2805
02:17:41,950 --> 02:17:46,740
ridiculous I don't know why you'd ever

2806
02:17:43,450 --> 02:17:46,740
do this that doesn't even make any sense

2807
02:17:47,968 --> 02:17:54,359
so no that that's not that's not

2808
02:17:51,069 --> 02:17:54,360
relevant at all

2809
02:18:01,579 --> 02:18:05,568
is any extra work required for oblique

2810
02:18:03,978 --> 02:18:08,478
viewing no because this is all in

2811
02:18:05,568 --> 02:18:10,939
texture space right so it has nothing to

2812
02:18:08,478 --> 02:18:14,119
do with whether it's rotated or scaled

2813
02:18:10,939 --> 02:18:17,030
or moved or anything it's just how you

2814
02:18:14,120 --> 02:18:20,750
sample a texture if you want the texture

2815
02:18:17,030 --> 02:18:23,510
to be a step function instead of a

2816
02:18:20,750 --> 02:18:25,909
linear function right but everything

2817
02:18:23,510 --> 02:18:29,179
else just works so all you're trying to

2818
02:18:25,909 --> 02:18:29,599
do is do the step function and off you

2819
02:18:29,179 --> 02:18:34,909
go

2820
02:18:29,599 --> 02:18:36,620
right how is pal function implemented

2821
02:18:34,909 --> 02:18:38,808
how would you go about implementing an

2822
02:18:36,620 --> 02:18:43,760
efficient power function all of those

2823
02:18:38,808 --> 02:18:45,949
tend to just be basically fit you always

2824
02:18:43,760 --> 02:18:48,439
just fit some kind of like a you know

2825
02:18:45,950 --> 02:18:50,780
Taylor series or pal function you know

2826
02:18:48,439 --> 02:18:52,068
modern modern numerical programming is

2827
02:18:50,780 --> 02:18:53,090
probably Taylor series it's like old

2828
02:18:52,068 --> 02:18:56,119
news

2829
02:18:53,090 --> 02:19:00,019
so you just fit you fit quadrat you fit

2830
02:18:56,120 --> 02:19:01,790
not quadratics you fit equations to the

2831
02:19:00,019 --> 02:19:03,769
power function and you evaluate those

2832
02:19:01,790 --> 02:19:05,359
equations iterally till you iteratively

2833
02:19:03,769 --> 02:19:07,728
to you get the desired bit precision

2834
02:19:05,359 --> 02:19:11,300
that's how all of that stuff works how

2835
02:19:07,728 --> 02:19:14,019
sine and cosine works you know you could

2836
02:19:11,299 --> 02:19:14,018
look

2837
02:19:23,829 --> 02:19:34,189
isn't it called sleeve you can just look

2838
02:19:31,370 --> 02:19:36,349
at a generic you know math library out

2839
02:19:34,189 --> 02:19:38,360
somewhere out there that's set up for

2840
02:19:36,349 --> 02:19:40,639
this sort of thing

2841
02:19:38,360 --> 02:19:42,229
and you can go ahead and look at sort of

2842
02:19:40,638 --> 02:19:46,629
roughly the way they're doing it it's

2843
02:19:42,228 --> 02:19:50,750
not very it doesn't really explain much

2844
02:19:46,629 --> 02:20:14,299
how it's actually working I so I do

2845
02:19:50,750 --> 02:20:16,728
apologize for that but here you go so if

2846
02:20:14,299 --> 02:20:19,819
you look at how these things tend to be

2847
02:20:16,728 --> 02:20:22,909
implemented you can see that generally

2848
02:20:19,819 --> 02:20:26,809
speaking they've got some fit function

2849
02:20:22,909 --> 02:20:28,579
here so for example here this is the

2850
02:20:26,809 --> 02:20:31,670
thing that actually does the work so

2851
02:20:28,579 --> 02:20:34,870
every numerical function because

2852
02:20:31,670 --> 02:20:37,610
remember these libraries have to in

2853
02:20:34,870 --> 02:20:40,460
these libraries have to implement proper

2854
02:20:37,610 --> 02:20:42,649
handling of these functions they can't

2855
02:20:40,459 --> 02:20:44,839
just poop it out so they've got to look

2856
02:20:42,648 --> 02:20:47,209
for things like infinities and Mane's

2857
02:20:44,840 --> 02:20:49,549
and stuff so basically what you'll have

2858
02:20:47,209 --> 02:20:52,188
is you'll see something like this this

2859
02:20:49,549 --> 02:20:54,469
is the preconditioning then it will call

2860
02:20:52,189 --> 02:20:57,530
something that is basically like a

2861
02:20:54,469 --> 02:21:01,309
series of its basic functions so in this

2862
02:20:57,530 --> 02:21:05,329
case it uses an ABS a log a mall and an

2863
02:21:01,309 --> 02:21:07,670
X to implement it and here is an example

2864
02:21:05,329 --> 02:21:10,370
of one of the implementations so here is

2865
02:21:07,670 --> 02:21:12,439
an XP k2f and what you can see is it's

2866
02:21:10,370 --> 02:21:15,079
just a series expansion

2867
02:21:12,439 --> 02:21:17,960
so somebody fit some series to this

2868
02:21:15,079 --> 02:21:21,020
thing and they basically just do a bunch

2869
02:21:17,959 --> 02:21:24,978
of like FS or f mads or whatever you're

2870
02:21:21,020 --> 02:21:27,829
going to do multiplications that's all

2871
02:21:24,978 --> 02:21:31,519
anyone ever does that I've ever seen so

2872
02:21:27,829 --> 02:21:33,289
basically the process is you take the

2873
02:21:31,520 --> 02:21:36,260
function you're trying to simulate like

2874
02:21:33,290 --> 02:21:39,439
POW or anything else you figure out what

2875
02:21:36,260 --> 02:21:41,239
range you care about it you can put in a

2876
02:21:39,439 --> 02:21:43,309
bunch of things to try and like cabin

2877
02:21:41,239 --> 02:21:44,629
the range and precondition the number

2878
02:21:43,309 --> 02:21:46,010
and handle infinities if you want that

2879
02:21:44,629 --> 02:21:47,929
stuff but if you're just using something

2880
02:21:46,010 --> 02:21:53,898
where you know your inputs pretty

2881
02:21:47,930 --> 02:21:56,930
intimately you then fit that range to a

2882
02:21:53,898 --> 02:21:58,219
function somehow right and sometimes you

2883
02:21:56,930 --> 02:21:59,840
have to do that by breaking it into

2884
02:21:58,219 --> 02:22:01,069
multiple steps like multiple functions

2885
02:21:59,840 --> 02:22:03,889
sometimes you can just do it directly

2886
02:22:01,069 --> 02:22:08,228
then you compute that approximated

2887
02:22:03,889 --> 02:22:08,228
function and that's your result

2888
02:22:09,770 --> 02:22:15,989
and that's it you can see here there's

2889
02:22:13,739 --> 02:22:18,059
typically stuff where you do use the

2890
02:22:15,989 --> 02:22:20,180
exponent and the mantissa separately

2891
02:22:18,059 --> 02:22:23,068
that's a very common technique as well

2892
02:22:20,180 --> 02:22:25,109
because sometimes you can compute stuff

2893
02:22:23,068 --> 02:22:28,529
on just the mantissa and then do you

2894
02:22:25,109 --> 02:22:30,120
don't have to worry about thick problems

2895
02:22:28,530 --> 02:22:31,770
that have to do with where the exponent

2896
02:22:30,120 --> 02:22:34,050
is and so on so yeah there's a lot of

2897
02:22:31,770 --> 02:22:40,590
stuff like that but that's all anyone

2898
02:22:34,049 --> 02:22:43,469
ever does and sleep I think is a you

2899
02:22:40,590 --> 02:22:45,389
know I doubt it's particularly great or

2900
02:22:43,469 --> 02:22:50,629
anything but it's a pretty easy place to

2901
02:22:45,389 --> 02:22:50,629
go I think it's pretty open licensed

2902
02:23:02,090 --> 02:23:09,260
so basically you just have to provide a

2903
02:23:04,610 --> 02:23:11,810
slight notice that you used it is it

2904
02:23:09,260 --> 02:23:14,149
right so you know you can you can cut

2905
02:23:11,810 --> 02:23:16,569
and paste code from here and go nuts if

2906
02:23:14,149 --> 02:23:16,569
you want to

2907
02:23:37,229 --> 02:23:43,149
so for sine or for cosine and sine yet

2908
02:23:41,860 --> 02:23:46,260
some point I'd like to replace them I

2909
02:23:43,149 --> 02:23:46,260
just haven't gotten around to it yet

2910
02:23:46,560 --> 02:23:53,529
the problem is sine and cosine or power

2911
02:23:51,159 --> 02:23:56,021
any of those things is questions about

2912
02:23:53,530 --> 02:23:58,570
like should we use a table lookup or

2913
02:23:56,021 --> 02:24:00,040
should we do whatever I have no idea I

2914
02:23:58,569 --> 02:24:02,500
don't spend a lot of time working on

2915
02:24:00,040 --> 02:24:07,540
these sorts of numerical replacement

2916
02:24:02,500 --> 02:24:13,060
sort of stuff possibly right I have like

2917
02:24:07,540 --> 02:24:16,150
a hair in my face probably Molly here so

2918
02:24:13,060 --> 02:24:20,069
I really just don't know off the top of

2919
02:24:16,149 --> 02:24:25,229
my head whether it's better or worse to

2920
02:24:20,069 --> 02:24:28,750
use tables in the case of sine or cosine

2921
02:24:25,229 --> 02:24:32,920
what I will say is that often times

2922
02:24:28,750 --> 02:24:37,569
table driving and algorithm in this day

2923
02:24:32,920 --> 02:24:41,140
and age is made is oftentimes not what

2924
02:24:37,569 --> 02:24:42,970
you want not because there's some really

2925
02:24:41,140 --> 02:24:45,369
bad thing about looking up stuff in a

2926
02:24:42,970 --> 02:24:46,869
table because if it's a small table and

2927
02:24:45,370 --> 02:24:50,079
you're doing a lot of it the cash

2928
02:24:46,870 --> 02:24:55,090
probably has your back you know so small

2929
02:24:50,079 --> 02:24:58,629
tables are very fast the problem is you

2930
02:24:55,090 --> 02:25:02,170
cannot do wide operations if you are

2931
02:24:58,629 --> 02:25:05,409
using a table lookup right because up

2932
02:25:02,170 --> 02:25:09,549
until avx-512 which is barely in any

2933
02:25:05,409 --> 02:25:13,420
processors right now you cannot do for

2934
02:25:09,549 --> 02:25:15,310
wide table lookups so what happens is if

2935
02:25:13,420 --> 02:25:17,530
you actually try the table drive

2936
02:25:15,310 --> 02:25:20,159
something if you try to do if you're

2937
02:25:17,530 --> 02:25:22,360
trying to do is four or eight wide Cindy

2938
02:25:20,159 --> 02:25:24,129
tables become extraordinarily expensive

2939
02:25:22,360 --> 02:25:26,771
because all of the elements have to be

2940
02:25:24,129 --> 02:25:28,629
extracted from their lanes you then have

2941
02:25:26,771 --> 02:25:32,351
to do all the lookups and then you do

2942
02:25:28,629 --> 02:25:34,329
four separate loads and a packs to get

2943
02:25:32,351 --> 02:25:42,480
them back into lanes that can then be

2944
02:25:34,329 --> 02:25:47,979
used so table driving is pretty rough

2945
02:25:42,479 --> 02:25:49,659
these days and you know the hope I think

2946
02:25:47,979 --> 02:25:53,319
and I mean I guess I don't know

2947
02:25:49,659 --> 02:25:58,180
can't speak for everybody but the hope

2948
02:25:53,319 --> 02:26:03,640
would be that someday when avx-512 maybe

2949
02:25:58,180 --> 02:26:07,829
is more prevalent that penalty would go

2950
02:26:03,640 --> 02:26:10,209
away so if you have Lane based gather

2951
02:26:07,829 --> 02:26:12,750
then all of a sudden there wouldn't be a

2952
02:26:10,209 --> 02:26:15,339
penalty anymore for table driving and so

2953
02:26:12,750 --> 02:26:18,310
you know what I'm saying so I feel like

2954
02:26:15,340 --> 02:26:21,340
table driving at the moment is actually

2955
02:26:18,310 --> 02:26:28,029
very difficult to do and make it run

2956
02:26:21,340 --> 02:26:30,040
fast if you have to be wide right so I

2957
02:26:28,030 --> 02:26:31,811
doubt we would do our sine and cosine

2958
02:26:30,040 --> 02:26:37,780
with the table because we probably want

2959
02:26:31,810 --> 02:26:40,090
to be able to do four at a time that's

2960
02:26:37,780 --> 02:26:41,500
that's just my my feeling on it so most

2961
02:26:40,090 --> 02:26:43,960
of these math functions I don't really

2962
02:26:41,500 --> 02:26:46,989
like table driving them for that for

2963
02:26:43,959 --> 02:26:48,520
only that reason so if you can get away

2964
02:26:46,989 --> 02:26:50,680
with not table driving it in this day

2965
02:26:48,521 --> 02:26:52,870
and age it's usually a benefit not for

2966
02:26:50,680 --> 02:26:54,130
the reason people say because a lot of

2967
02:26:52,870 --> 02:26:56,050
people say don't table drive things

2968
02:26:54,129 --> 02:26:58,060
because the memory cost is high it's

2969
02:26:56,049 --> 02:27:02,049
probably not that's probably a lie

2970
02:26:58,060 --> 02:27:05,069
what's not a lie is that if you have to

2971
02:27:02,049 --> 02:27:05,069
be wide you're in trouble

2972
02:27:09,620 --> 02:27:13,640
long bullion says is there ever a reason

2973
02:27:11,898 --> 02:27:16,939
not to compute your pixels this way is

2974
02:27:13,639 --> 02:27:18,529
this a 2t only thing so you only want to

2975
02:27:16,939 --> 02:27:19,939
do this if the original function was

2976
02:27:18,530 --> 02:27:22,430
supposed to be a bunch of little squares

2977
02:27:19,939 --> 02:27:24,050
right if the original function is

2978
02:27:22,430 --> 02:27:25,489
supposed to be samples of a continuous

2979
02:27:24,049 --> 02:27:27,319
image then bilinear filtering is

2980
02:27:25,489 --> 02:27:29,719
actually more correct as an up sampler

2981
02:27:27,319 --> 02:27:31,728
so actually the default bilinear

2982
02:27:29,719 --> 02:27:36,619
sampling is what you want most of the

2983
02:27:31,728 --> 02:27:39,228
time right but when you're dealing with

2984
02:27:36,620 --> 02:27:41,359
pixel art it's this unique case where

2985
02:27:39,228 --> 02:27:43,489
the art itself is supposed to be made up

2986
02:27:41,359 --> 02:27:45,290
of tiny little squares and at that point

2987
02:27:43,489 --> 02:27:50,959
the sampling you want is very different

2988
02:27:45,290 --> 02:27:52,250
than bilinear filtering it seems that

2989
02:27:50,959 --> 02:27:53,779
this artifact is quite well known at

2990
02:27:52,250 --> 02:27:56,090
least in your circle is there a name for

2991
02:27:53,780 --> 02:27:58,790
it I don't have a name for it I don't

2992
02:27:56,090 --> 02:28:07,069
know if there is a name for it let's

2993
02:27:58,790 --> 02:28:09,109
make up a name for it let's call it so

2994
02:28:07,069 --> 02:28:12,139
since it's it's like all unity games

2995
02:28:09,109 --> 02:28:15,559
seem to have this artifact all the time

2996
02:28:12,139 --> 02:28:19,939
I'm going to call it the unity artifact

2997
02:28:15,559 --> 02:28:24,549
or Yuna fact so we'll call this u n--

2998
02:28:19,939 --> 02:28:24,550
effect this is a unit factor

2999
02:28:25,750 --> 02:28:29,030
actually maybe it shouldn't because

3000
02:28:27,469 --> 02:28:32,179
you're gonna say this something artifact

3001
02:28:29,030 --> 02:28:36,409
so maybe it should be the unity pixel

3002
02:28:32,180 --> 02:28:38,329
art artifact or u part artifact or I

3003
02:28:36,409 --> 02:28:41,780
guess we wouldn't put the artifact on I

3004
02:28:38,329 --> 02:28:47,079
need a pixel art so be the unit pics

3005
02:28:41,780 --> 02:28:47,079
Yuna picks artifact that'd be right

3006
02:28:49,658 --> 02:28:59,779
so that's going to be the name we're

3007
02:28:58,039 --> 02:29:02,539
gonna say that something looks unit pick

3008
02:28:59,779 --> 02:29:05,049
see if it's kind of like doing that

3009
02:29:02,539 --> 02:29:05,049
shimmering

3010
02:29:11,699 --> 02:29:15,759
nikka cite media the shader can only

3011
02:29:14,049 --> 02:29:18,310
address artifacting within the texture

3012
02:29:15,759 --> 02:29:20,049
but cannot address sub pixel occlusion

3013
02:29:18,309 --> 02:29:22,689
artifacting ie the shimmer is still

3014
02:29:20,049 --> 02:29:26,379
present exterior edge pixels that is not

3015
02:29:22,689 --> 02:29:31,679
true it actually addresses it everywhere

3016
02:29:26,379 --> 02:29:33,759
so what happens is when you create your

3017
02:29:31,679 --> 02:29:35,770
when your when you create your textures

3018
02:29:33,759 --> 02:29:38,168
and you saw us do this on handmade hero

3019
02:29:35,770 --> 02:29:42,699
when you create your textures you leave

3020
02:29:38,168 --> 02:29:46,059
a one pixel wide border around the

3021
02:29:42,699 --> 02:29:49,509
texture that is completely blank

3022
02:29:46,059 --> 02:29:52,328
so it's alpha zero everywhere then what

3023
02:29:49,509 --> 02:29:55,179
happens is when you are sampling there

3024
02:29:52,328 --> 02:29:59,529
you get the correct alpha coverage value

3025
02:29:55,179 --> 02:30:06,059
out from your sample and you do it there

3026
02:29:59,529 --> 02:30:11,850
is no shimmering so so it is 100%

3027
02:30:06,059 --> 02:30:11,850
correct everywhere even on border pixels

3028
02:30:22,439 --> 02:30:27,970
Brian is asking I was surprised to see

3029
02:30:25,478 --> 02:30:29,828
how much latency was on division square

3030
02:30:27,969 --> 02:30:32,170
root seems to have a similar latency but

3031
02:30:29,828 --> 02:30:33,699
reciprocal square root is as quick as

3032
02:30:32,170 --> 02:30:36,158
multiplied with just half the throughput

3033
02:30:33,699 --> 02:30:38,078
why is reciprocal square root square

3034
02:30:36,158 --> 02:30:40,208
root much faster than a regular square

3035
02:30:38,078 --> 02:30:49,478
root the answer is because they're at

3036
02:30:40,209 --> 02:30:53,529
different levels of precision just give

3037
02:30:49,478 --> 02:30:57,818
you a little bit more information about

3038
02:30:53,529 --> 02:31:00,130
that so here is square root and what you

3039
02:30:57,818 --> 02:31:02,799
can see here is there's no

3040
02:31:00,129 --> 02:31:04,568
qualifications in the statement here so

3041
02:31:02,799 --> 02:31:06,248
when Intel says they compute the square

3042
02:31:04,568 --> 02:31:07,420
root of packs of packed single precision

3043
02:31:06,248 --> 02:31:09,158
three two bit floating-point elements in

3044
02:31:07,420 --> 02:31:10,809
a what they mean is they're actually

3045
02:31:09,158 --> 02:31:12,879
computing the whole square root so the

3046
02:31:10,809 --> 02:31:16,420
mantissa is accurate out to like the

3047
02:31:12,879 --> 02:31:18,639
last bit possibly even with a additional

3048
02:31:16,420 --> 02:31:21,459
bit of rounding precision built in there

3049
02:31:18,639 --> 02:31:25,420
so it's a pretty precise answer as far

3050
02:31:21,459 --> 02:31:27,039
as can be ascertained so if we look at

3051
02:31:25,420 --> 02:31:29,078
reciprocal square root what you can see

3052
02:31:27,039 --> 02:31:33,819
is there's a very specific disclaimer

3053
02:31:29,078 --> 02:31:36,699
you can see here that actually it

3054
02:31:33,818 --> 02:31:39,038
doesn't guarantee that it's producing an

3055
02:31:36,699 --> 02:31:41,709
accurate result even as far as the

3056
02:31:39,039 --> 02:31:43,479
thirteenth bit of the mantissa now

3057
02:31:41,709 --> 02:31:45,130
there's 24 bits in a mantissa so it's

3058
02:31:43,478 --> 02:31:48,608
actually a significant number of the

3059
02:31:45,129 --> 02:31:58,809
trailing bits of the value are wrong or

3060
02:31:48,609 --> 02:32:00,578
possibly wrong and so you know you can

3061
02:31:58,809 --> 02:32:02,139
be faster if you're less accurate and

3062
02:32:00,578 --> 02:32:05,010
that's exactly what they've done here

3063
02:32:02,139 --> 02:32:08,519
they're giving you a really fast

3064
02:32:05,010 --> 02:32:11,738
basically a really fast approximate

3065
02:32:08,520 --> 02:32:14,260
reciprocal square root not an exact

3066
02:32:11,738 --> 02:32:16,538
value and hence it takes less time

3067
02:32:14,260 --> 02:32:18,609
because there aren't there probably in

3068
02:32:16,539 --> 02:32:22,439
the actual thing that produces the

3069
02:32:18,609 --> 02:32:25,270
actual square root there's probably a

3070
02:32:22,439 --> 02:32:29,738
bunch of stuff in there that's actually

3071
02:32:25,270 --> 02:32:31,479
that's doing like refining like it's

3072
02:32:29,738 --> 02:32:34,359
taking multiple steps to refine the

3073
02:32:31,478 --> 02:32:35,349
value or something right so this is like

3074
02:32:34,359 --> 02:32:38,979
the minim

3075
02:32:35,350 --> 02:32:40,658
quick and dirty version of computing a

3076
02:32:38,978 --> 02:32:42,849
square root and specifically one over a

3077
02:32:40,658 --> 02:32:43,958
square root whereas the square root

3078
02:32:42,850 --> 02:32:46,748
functions actually doing the whole

3079
02:32:43,959 --> 02:32:55,449
square root all the way out till you run

3080
02:32:46,748 --> 02:32:57,850
out of bits is there a less precise

3081
02:32:55,449 --> 02:33:01,119
version of square root then yes it's

3082
02:32:57,850 --> 02:33:02,890
called R square the reason that they

3083
02:33:01,119 --> 02:33:04,748
chose this breakdown is because

3084
02:33:02,889 --> 02:33:07,299
typically speaking if you're looking for

3085
02:33:04,748 --> 02:33:08,529
fast and dirty oftentimes the the thing

3086
02:33:07,299 --> 02:33:10,269
you're going to do with the square root

3087
02:33:08,529 --> 02:33:12,879
immediately after you take it is take

3088
02:33:10,270 --> 02:33:14,020
its reciprocal so that's why it computes

3089
02:33:12,879 --> 02:33:15,310
the reciprocal of the square root

3090
02:33:14,020 --> 02:33:16,359
instead of the square root because if

3091
02:33:15,309 --> 02:33:18,100
you're looking for quick and dirty

3092
02:33:16,359 --> 02:33:19,238
reciprocal square root is actually

3093
02:33:18,100 --> 02:33:21,279
probably what you want cuz you're

3094
02:33:19,238 --> 02:33:25,770
probably normalizing something using the

3095
02:33:21,279 --> 02:33:25,770
Euclidean to norm right

3096
02:33:34,190 --> 02:33:38,390
should you son do something similar

3097
02:33:36,351 --> 02:33:40,460
inspection with some ue4 game and the

3098
02:33:38,390 --> 02:33:42,440
engine we're for good I don't know if

3099
02:33:40,459 --> 02:33:44,329
there is an engine war I mean people get

3100
02:33:42,440 --> 02:33:45,800
very there's very different reasons why

3101
02:33:44,329 --> 02:33:47,110
you would use unity your unreal or

3102
02:33:45,799 --> 02:33:49,399
something right

3103
02:33:47,110 --> 02:33:51,739
unity should just fix this problem I

3104
02:33:49,399 --> 02:33:53,779
don't think it they should just do this

3105
02:33:51,739 --> 02:33:55,399
sampling properly I feel like they

3106
02:33:53,780 --> 02:33:56,989
should be able to put in something that

3107
02:33:55,399 --> 02:33:58,879
can do that

3108
02:33:56,989 --> 02:34:00,530
there's a lot of graphics programmers at

3109
02:33:58,879 --> 02:34:02,949
Unity I don't know why they haven't

3110
02:34:00,530 --> 02:34:02,950
fixed that

3111
02:34:22,700 --> 02:34:27,770
so the artifacting is still present here

3112
02:34:26,030 --> 02:34:29,630
is because there's no border pixel what

3113
02:34:27,770 --> 02:34:33,110
artifacting are you talking about I

3114
02:34:29,629 --> 02:34:36,369
don't see any artifacting here

3115
02:34:33,110 --> 02:34:46,010
so what artifact are you talking about

3116
02:34:36,370 --> 02:34:52,460
Giga sight media there is one other

3117
02:34:46,010 --> 02:34:54,950
place you can get edge artifacting by

3118
02:34:52,459 --> 02:34:57,379
the way but it's not really on edges per

3119
02:34:54,950 --> 02:34:59,750
se it's on neighboring pixels with a

3120
02:34:57,379 --> 02:35:03,978
high difference between them and that's

3121
02:34:59,750 --> 02:35:07,189
if you have gamma or perceptual gamma

3122
02:35:03,978 --> 02:35:11,539
problems with the blend so technically

3123
02:35:07,189 --> 02:35:13,189
you need to be gamma aware when you're

3124
02:35:11,540 --> 02:35:16,490
actually doing this work if you really

3125
02:35:13,189 --> 02:35:18,500
want it to be correct but you know I'm

3126
02:35:16,489 --> 02:35:20,860
not seeing any artifacts in this one

3127
02:35:18,500 --> 02:35:20,860
right now

3128
02:35:25,190 --> 02:35:33,200
maybe you can perceive a little bit of a

3129
02:35:29,950 --> 02:35:35,990
little tiny blur on the edge once in a

3130
02:35:33,200 --> 02:35:37,870
while but I can't really barely see it

3131
02:35:35,989 --> 02:35:41,271
at all

3132
02:35:37,870 --> 02:35:43,610
but what I would say is yet like you do

3133
02:35:41,271 --> 02:35:46,970
have to be careful about gamma at the

3134
02:35:43,610 --> 02:35:50,000
edges when you're doing your all of your

3135
02:35:46,969 --> 02:35:54,549
work and this shader toy isn't so it's

3136
02:35:50,000 --> 02:35:57,620
possible that even that bit would be

3137
02:35:54,549 --> 02:35:59,000
fixed but that is not an edge pixels

3138
02:35:57,620 --> 02:36:00,860
that has nothing to do with edge pixels

3139
02:35:59,000 --> 02:36:02,750
the only reason it looks like it's on

3140
02:36:00,860 --> 02:36:05,480
edge pixels is because the edge pixels

3141
02:36:02,750 --> 02:36:08,149
are black and the the background is

3142
02:36:05,479 --> 02:36:09,709
white so it's the highest difference

3143
02:36:08,149 --> 02:36:13,329
between pixel values which means it's

3144
02:36:09,709 --> 02:36:15,350
where you will see errors in linearity

3145
02:36:13,329 --> 02:36:22,610
show up the most because it's the

3146
02:36:15,351 --> 02:36:27,170
biggest jump right does that help and so

3147
02:36:22,610 --> 02:36:29,300
that's really where you're getting any

3148
02:36:27,170 --> 02:36:32,601
visual shimmer there I think it's just

3149
02:36:29,299 --> 02:36:35,149
going to be in gamma because you've got

3150
02:36:32,601 --> 02:36:39,200
that not only your ramp and you've got

3151
02:36:35,149 --> 02:36:41,619
to correctly account for that through

3152
02:36:39,200 --> 02:36:41,620
that ramp

3153
02:36:55,829 --> 02:36:59,879
so the other thing too is this isn't

3154
02:36:58,228 --> 02:37:05,219
implementing mipmapping so if we go down

3155
02:36:59,879 --> 02:37:06,659
below one pixel we would have a problem

3156
02:37:05,219 --> 02:37:09,688
here

3157
02:37:06,659 --> 02:37:11,459
and mipmapping pixel art is kind of a

3158
02:37:09,689 --> 02:37:12,689
separate issue because then you have to

3159
02:37:11,459 --> 02:37:15,389
actually think about how you want to

3160
02:37:12,689 --> 02:37:17,398
downsample your things as well

3161
02:37:15,389 --> 02:37:20,119
which is kind of a whole another ball of

3162
02:37:17,398 --> 02:37:20,119
wax but

3163
02:37:42,510 --> 02:37:47,728
so yeah any shimmering you see at this

3164
02:37:45,340 --> 02:37:50,829
point is almost certainly either just

3165
02:37:47,728 --> 02:37:53,738
gamma or at some point when you get one

3166
02:37:50,829 --> 02:37:56,920
to one you're going to have a little bit

3167
02:37:53,738 --> 02:37:59,859
of limitation just because monitors are

3168
02:37:56,920 --> 02:38:02,469
a limited resolution right so typically

3169
02:37:59,859 --> 02:38:06,370
a pixel art game wants to be at least at

3170
02:38:02,469 --> 02:38:08,019
two to one because you know it's pixel

3171
02:38:06,370 --> 02:38:12,460
arts worth to be big pixels so generally

3172
02:38:08,020 --> 02:38:24,670
you don't really want to go you know all

3173
02:38:12,459 --> 02:38:30,219
the way down but but yeah all right I'm

3174
02:38:24,670 --> 02:38:31,420
gonna wrap it up thank you everyone for

3175
02:38:30,219 --> 02:38:32,648
joining me flip side of handmade he

3176
02:38:31,420 --> 02:38:33,818
wrote so the pleasure coating with you

3177
02:38:32,648 --> 02:38:35,318
as always

3178
02:38:33,818 --> 02:38:38,079
we weren't really cutting today we were

3179
02:38:35,318 --> 02:38:39,850
just taking a look at what we could see

3180
02:38:38,079 --> 02:38:41,228
if there's a way to replace the shaders

3181
02:38:39,850 --> 02:38:44,439
and children of Merida because we were

3182
02:38:41,228 --> 02:38:48,188
gonna try and hack one in that correctly

3183
02:38:44,439 --> 02:38:49,870
did the pixel sampling but unfortunately

3184
02:38:48,189 --> 02:38:51,880
we weren't really able to do that so

3185
02:38:49,870 --> 02:38:53,470
maybe tomorrow I don't know we'll see

3186
02:38:51,879 --> 02:38:56,738
how we're feeling maybe tomorrow we'll

3187
02:38:53,469 --> 02:38:57,879
just write our own we could do it inside

3188
02:38:56,738 --> 02:38:59,948
handmade hero

3189
02:38:57,879 --> 02:39:02,528
pretty easily right or maybe we'll just

3190
02:38:59,949 --> 02:39:05,020
go back to working on our lighting

3191
02:39:02,529 --> 02:39:06,010
system either way not sure what we'll do

3192
02:39:05,020 --> 02:39:07,029
but I want to take a look at that

3193
02:39:06,010 --> 02:39:08,079
because I think it would be pretty cool

3194
02:39:07,029 --> 02:39:10,630
if we could have hacked in the shader

3195
02:39:08,079 --> 02:39:12,039
normally you can sort of intercept the

3196
02:39:10,629 --> 02:39:13,988
shaders and replace them in this case we

3197
02:39:12,040 --> 02:39:16,060
couldn't really do it there might be a

3198
02:39:13,988 --> 02:39:18,430
way of doing it by using some kind of

3199
02:39:16,059 --> 02:39:19,329
driver extension where we you know

3200
02:39:18,430 --> 02:39:21,909
because you could imagine us

3201
02:39:19,329 --> 02:39:23,978
intercepting the shaders as they go down

3202
02:39:21,909 --> 02:39:26,350
and just like replace that shader with

3203
02:39:23,978 --> 02:39:28,510
our own shader and that would you know

3204
02:39:26,350 --> 02:39:31,329
people people do mods like that all the

3205
02:39:28,510 --> 02:39:32,889
time there's like you know drivers you

3206
02:39:31,329 --> 02:39:34,629
can install like that would do that for

3207
02:39:32,889 --> 02:39:39,159
you so unfortunately weren't able to do

3208
02:39:34,629 --> 02:39:40,568
that but I don't know maybe maybe the

3209
02:39:39,159 --> 02:39:42,488
children of Merida team would let us

3210
02:39:40,568 --> 02:39:43,689
just replace changers for them I don't

3211
02:39:42,488 --> 02:39:47,770
know if you're allowed to do that in

3212
02:39:43,689 --> 02:39:49,090
unity probably you are but but we could

3213
02:39:47,770 --> 02:39:51,989
work out what the correct thing to add

3214
02:39:49,090 --> 02:39:54,030
to the shaders would be in that case and

3215
02:39:51,989 --> 02:39:56,100
and we could have a unity game that

3216
02:39:54,030 --> 02:39:58,079
actually looked correct that would be

3217
02:39:56,100 --> 02:39:59,550
kind of cool but really the best

3218
02:39:58,079 --> 02:40:02,129
possible outcome would be if the unity

3219
02:39:59,549 --> 02:40:06,840
team just added just add a mode for this

3220
02:40:02,129 --> 02:40:09,059
it's it's so simple yeah I don't know

3221
02:40:06,840 --> 02:40:10,889
and yeah if anyone on the stream knows

3222
02:40:09,059 --> 02:40:12,959
how to unpack so I don't work with unity

3223
02:40:10,889 --> 02:40:14,819
but if anyone knows how to unpack it and

3224
02:40:12,959 --> 02:40:16,978
get us into a part where we could

3225
02:40:14,819 --> 02:40:17,699
actually update those shaders I would

3226
02:40:16,978 --> 02:40:19,679
give it a shot

3227
02:40:17,700 --> 02:40:20,790
anyway that's it for today I'll be back

3228
02:40:19,680 --> 02:40:22,050
here tomorrow will probably see some

3229
02:40:20,790 --> 02:40:23,340
regular programming I don't know how

3230
02:40:22,049 --> 02:40:24,179
much I more have time I want to spend

3231
02:40:23,340 --> 02:40:27,659
like trying to fix other people's

3232
02:40:24,180 --> 02:40:29,750
shaders but I probably will play some

3233
02:40:27,659 --> 02:40:32,129
more children board it pretty soon so

3234
02:40:29,750 --> 02:40:33,299
yeah maybe we'll play some right now I

3235
02:40:32,129 --> 02:40:37,159
don't know I'm going to go ahead and

3236
02:40:33,299 --> 02:40:37,159
turn off the recording either way

