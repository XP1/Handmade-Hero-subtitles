1
00:00:00,030 --> 00:00:04,710
alright hello everyone and thank you for

2
00:00:02,970 --> 00:00:07,710
joining me for a very special episode of

3
00:00:04,710 --> 00:00:09,509
handmade hero as you know one of the

4
00:00:07,710 --> 00:00:11,629
things that we have put off for a very

5
00:00:09,509 --> 00:00:13,559
long time in handmade here and that I

6
00:00:11,630 --> 00:00:15,870
intimated recently that we would

7
00:00:13,558 --> 00:00:18,299
probably not want to put off much longer

8
00:00:15,869 --> 00:00:21,419
is getting rid of the few I think

9
00:00:18,300 --> 00:00:23,070
there's only three functions that we

10
00:00:21,420 --> 00:00:25,080
still call from the C standard library

11
00:00:23,070 --> 00:00:27,629
because right now handmade here pretty

12
00:00:25,079 --> 00:00:29,489
much doesn't use any external code at

13
00:00:27,629 --> 00:00:31,259
all but it does still link with a c

14
00:00:29,489 --> 00:00:33,089
runtime library and the only reason

15
00:00:31,260 --> 00:00:37,590
we're doing that right now is because of

16
00:00:33,090 --> 00:00:40,320
cosine sine and a tan two are the only

17
00:00:37,590 --> 00:00:41,879
things that we actually call and so at

18
00:00:40,320 --> 00:00:44,369
some point we really want to get rid of

19
00:00:41,878 --> 00:00:46,859
those for a whole number of reasons some

20
00:00:44,369 --> 00:00:49,679
of which will actually be going into in

21
00:00:46,859 --> 00:00:51,539
a moment I think as well but one of the

22
00:00:49,679 --> 00:00:53,850
big problems was replacing those is I am

23
00:00:51,539 --> 00:00:55,170
NOT a numerical programming person it's

24
00:00:53,850 --> 00:00:58,170
not something that I spend a lot of time

25
00:00:55,170 --> 00:01:00,270
doing and so when I go to replace sine

26
00:00:58,170 --> 00:01:02,550
or cosine typically what I do is I just

27
00:01:00,270 --> 00:01:03,660
look up somebody who's already figured

28
00:01:02,549 --> 00:01:05,429
out how to do a good replacement for

29
00:01:03,659 --> 00:01:08,129
sine or cosine and just do some version

30
00:01:05,430 --> 00:01:09,659
of that code and that is not a very good

31
00:01:08,129 --> 00:01:11,280
explanation and it's certainly not

32
00:01:09,659 --> 00:01:14,189
something that's going to help anyone

33
00:01:11,280 --> 00:01:17,909
watching the stream know about what goes

34
00:01:14,188 --> 00:01:19,589
into this sorts of replacement and this

35
00:01:17,909 --> 00:01:21,060
sort of mathematical coding so it's kind

36
00:01:19,590 --> 00:01:24,060
of hoping that someone could give us a

37
00:01:21,060 --> 00:01:25,259
better explanation of that and kind of

38
00:01:24,060 --> 00:01:27,180
give us more of the details about how

39
00:01:25,259 --> 00:01:30,719
one goes about truly replacing sine or

40
00:01:27,180 --> 00:01:33,860
cosine or a tan to a tan to my

41
00:01:30,719 --> 00:01:38,250
understanding evilly harder and so

42
00:01:33,859 --> 00:01:40,379
thankfully as you know way back in the

43
00:01:38,250 --> 00:01:42,420
early days of handmade hero on the chat

44
00:01:40,379 --> 00:01:44,129
sudonym 73 who you haven't seen much

45
00:01:42,420 --> 00:01:46,670
because unfortunately in the in the

46
00:01:44,129 --> 00:01:49,469
recent days the stream time has moved

47
00:01:46,670 --> 00:01:51,899
was always kind of our guardian angel of

48
00:01:49,469 --> 00:01:54,959
math and would would kind of jump in to

49
00:01:51,899 --> 00:01:56,280
to help us anytime we were when I was

50
00:01:54,959 --> 00:01:57,478
like and I think there's probably some

51
00:01:56,280 --> 00:02:01,680
math thing here but I don't know what it

52
00:01:57,478 --> 00:02:03,269
is so I knew that he was into this sort

53
00:02:01,680 --> 00:02:05,399
of programming had a lot more experience

54
00:02:03,269 --> 00:02:07,560
than I did so I asked him his actual

55
00:02:05,399 --> 00:02:10,439
name is Andrew Brahmaji I now know how

56
00:02:07,560 --> 00:02:13,390
to pronounce that correctly and he lives

57
00:02:10,439 --> 00:02:15,909
in Howell you do yeah there you go and

58
00:02:13,389 --> 00:02:17,169
and he lives in Australia so we set up a

59
00:02:15,909 --> 00:02:18,280
stream time we were trying to work out

60
00:02:17,169 --> 00:02:20,469
stream he'd come on explain this to us

61
00:02:18,280 --> 00:02:22,539
so I'm I'm honored to have him on the

62
00:02:20,469 --> 00:02:23,680
stream and although our connections not

63
00:02:22,539 --> 00:02:25,989
great because we're going all the way

64
00:02:23,680 --> 00:02:27,870
from Australia to me to twitch which is

65
00:02:25,990 --> 00:02:30,730
probably not the best thing in the world

66
00:02:27,870 --> 00:02:32,140
he's gonna try and walk us through this

67
00:02:30,729 --> 00:02:35,530
first of all what this kind of

68
00:02:32,139 --> 00:02:37,149
programming is is all about and how one

69
00:02:35,530 --> 00:02:38,530
goes about doing something like sine and

70
00:02:37,150 --> 00:02:43,300
cosine replacements so with with that

71
00:02:38,530 --> 00:02:46,150
introduction Andrew over to you okay so

72
00:02:43,300 --> 00:02:46,989
will will try and do this as a I think

73
00:02:46,150 --> 00:02:48,939
we'll try and do it as a conversation

74
00:02:46,989 --> 00:02:51,310
I've got I've got a whole bunch of notes

75
00:02:48,939 --> 00:02:53,590
here which I will dump on the hand mate

76
00:02:51,310 --> 00:02:58,269
wiki at some point soon it just needs a

77
00:02:53,590 --> 00:03:00,670
little bit of editing awesome so right

78
00:02:58,269 --> 00:03:02,860
so the basic idea is what you have to

79
00:03:00,669 --> 00:03:05,919
understand first is how numbers are

80
00:03:02,860 --> 00:03:09,330
represented by the computer and

81
00:03:05,919 --> 00:03:12,369
floating-point numbers in particular so

82
00:03:09,330 --> 00:03:15,580
this is all covered in this wonderful

83
00:03:12,370 --> 00:03:18,400
document which you probably can't get

84
00:03:15,580 --> 00:03:20,370
access to which is the I Triple E

85
00:03:18,400 --> 00:03:25,120
standard for floating-point arithmetic

86
00:03:20,370 --> 00:03:28,239
2008 edition this is this is kind of

87
00:03:25,120 --> 00:03:30,519
expensive I think it's like 50 euros or

88
00:03:28,239 --> 00:03:32,920
something ridiculous like that but if

89
00:03:30,519 --> 00:03:36,930
you haven't had a fusion that will pay

90
00:03:32,919 --> 00:03:39,609
for access for you all a bit up like me

91
00:03:36,930 --> 00:03:44,019
the I Triple E standard grew out of a

92
00:03:39,610 --> 00:03:47,400
bunch of incompatible computer

93
00:03:44,019 --> 00:03:51,280
arithmetic systems from the 70s and 80s

94
00:03:47,400 --> 00:03:54,039
but thankfully for for the PC industry

95
00:03:51,280 --> 00:04:00,039
it was largely based around they base

96
00:03:54,039 --> 00:04:02,199
this on Intel standard the basic so okay

97
00:04:00,039 --> 00:04:04,479
let's let's let's step back for a minute

98
00:04:02,199 --> 00:04:08,949
and talk about how you would represent a

99
00:04:04,479 --> 00:04:11,738
number by the way I'm going to assume

100
00:04:08,949 --> 00:04:16,750
that everyone can kind of read binary

101
00:04:11,739 --> 00:04:18,459
and hexadecimal because if you can't

102
00:04:16,750 --> 00:04:19,959
you're going to get lost very quickly

103
00:04:18,459 --> 00:04:22,180
here because we're going to go into

104
00:04:19,959 --> 00:04:23,829
actual binary representations and I will

105
00:04:22,180 --> 00:04:25,598
scold them thoroughly if they do think I

106
00:04:23,829 --> 00:04:27,418
miss you you know this many episodes of

107
00:04:25,598 --> 00:04:32,050
handmade

108
00:04:27,418 --> 00:04:35,310
exactly we will not assume octal okay

109
00:04:32,050 --> 00:04:40,870
okay those who used who uses octal right

110
00:04:35,310 --> 00:04:42,999
okay need to know is some basic high

111
00:04:40,870 --> 00:04:46,228
school maths and the first thing we're

112
00:04:42,999 --> 00:04:48,610
going to look at is scientific notation

113
00:04:46,228 --> 00:04:55,209
scientific notation is we represent a

114
00:04:48,610 --> 00:04:59,319
number like say 1,024 is 1 point 0 to 4

115
00:04:55,209 --> 00:05:06,310
times 10 to the 3 or as we say in c

116
00:04:59,319 --> 00:05:08,528
notation 1.0 243 if you understand what

117
00:05:06,310 --> 00:05:12,639
that means the rest should be easy

118
00:05:08,528 --> 00:05:14,560
well straightforward anyway so in

119
00:05:12,639 --> 00:05:16,629
scientific notation what we do is we

120
00:05:14,560 --> 00:05:20,079
take a number and we represent it in two

121
00:05:16,629 --> 00:05:22,800
parts one of them is a number between 1

122
00:05:20,079 --> 00:05:25,990
and 10 including 9 not including 10 and

123
00:05:22,800 --> 00:05:28,389
then times 10 to the power of something

124
00:05:25,990 --> 00:05:30,278
and that's what shifts this decimal

125
00:05:28,389 --> 00:05:32,348
point you can shift this decimal point

126
00:05:30,278 --> 00:05:38,139
backwards and forwards by changing this

127
00:05:32,348 --> 00:05:42,310
over here this is the terms for this is

128
00:05:38,139 --> 00:05:45,848
this is the mantissa I'm going to spell

129
00:05:42,310 --> 00:05:49,360
it out here because that's a an equal

130
00:05:45,848 --> 00:05:55,240
term and this number here is 3 is called

131
00:05:49,360 --> 00:05:57,968
the exponent and these are kind of the

132
00:05:55,240 --> 00:06:01,598
two important numbers in a

133
00:05:57,968 --> 00:06:04,689
floating-point representation the way

134
00:06:01,598 --> 00:06:06,579
that I Triple E 754 represents numbers

135
00:06:04,689 --> 00:06:08,110
is exactly the same as this except of

136
00:06:06,579 --> 00:06:12,188
course it's not in decimal it's in

137
00:06:08,110 --> 00:06:19,088
binary so if you have a number like 1

138
00:06:12,189 --> 00:06:21,039
point 1 1 1 0 in binary right so this is

139
00:06:19,088 --> 00:06:26,168
a binary number this is not a decimal

140
00:06:21,038 --> 00:06:29,818
point this is a binary point in

141
00:06:26,168 --> 00:06:31,088
scientific notation of me times 2 to the

142
00:06:29,819 --> 00:06:34,860
right

143
00:06:31,088 --> 00:06:34,860
maybe not 53 that's a big number

144
00:06:35,408 --> 00:06:40,079
and this is equivalent through the

145
00:06:37,689 --> 00:06:40,079
number

146
00:06:40,100 --> 00:06:47,720
oops the way this is a MacBook Pro I

147
00:06:44,350 --> 00:06:49,370
anyone who has a a modern MacBook Pro

148
00:06:47,720 --> 00:06:52,190
knows what I mean about the keyboard on

149
00:06:49,370 --> 00:06:53,899
this it's absolutely terrible everyone

150
00:06:52,189 --> 00:06:55,189
complains the lack of them Escape key is

151
00:06:53,899 --> 00:06:57,079
though is the least of your problems

152
00:06:55,189 --> 00:07:03,560
although it is a big problem Weaver V I

153
00:06:57,079 --> 00:07:15,259
use myself they say no oh my punch bar

154
00:07:03,560 --> 00:07:18,259
like my goodness okay oh we seem to have

155
00:07:15,259 --> 00:07:22,370
lost Andrew oh no I wonder if the

156
00:07:18,259 --> 00:07:24,469
MacBook has has decided to take revenge

157
00:07:22,370 --> 00:07:26,500
on us here I shouldn't have said

158
00:07:24,470 --> 00:07:26,500
anything

159
00:07:28,509 --> 00:07:40,000
is it dead hmm hmm let me see here oh

160
00:07:41,110 --> 00:07:44,379
there it goes

161
00:08:11,569 --> 00:08:18,658
well that's a problem because we've only

162
00:08:16,620 --> 00:08:22,769
just begun our replacement for sine and

163
00:08:18,658 --> 00:08:26,610
cosine so I'm not sure I'm not sure how

164
00:08:22,769 --> 00:08:28,948
to get it back okay the link between

165
00:08:26,610 --> 00:08:36,479
here in Australia is not that bad though

166
00:08:28,949 --> 00:08:42,740
Google come on surely it can't be this

167
00:08:36,479 --> 00:08:45,240
bad unless the MacBook really did well

168
00:08:42,740 --> 00:08:54,089
we will wait for a second and see if we

169
00:08:45,240 --> 00:08:57,259
can get a get it back in the meantime I

170
00:08:54,089 --> 00:08:57,260
will take another bite of this

171
00:09:11,529 --> 00:09:24,720
Oh mm-hmm Oh is your coming back

172
00:09:26,789 --> 00:09:40,209
hello are we on now yes but only your

173
00:09:30,879 --> 00:09:43,330
voice excellent no okay

174
00:09:40,210 --> 00:09:45,400
Oh Leon now just your voice not your

175
00:09:43,330 --> 00:09:47,950
screen no I

176
00:09:45,399 --> 00:09:49,750
okay alright ladies and gentlemen of the

177
00:09:47,950 --> 00:09:54,400
audience you have to understand a little

178
00:09:49,750 --> 00:10:06,100
thing called Australian home internet we

179
00:09:54,399 --> 00:10:11,049
I don't I don't indian yet not in yes it

180
00:10:06,100 --> 00:10:13,330
is we this will probably happen again

181
00:10:11,049 --> 00:10:18,429
over the course of this show we will

182
00:10:13,330 --> 00:10:20,800
struggle we will figure out a way all

183
00:10:18,429 --> 00:10:23,109
right so I got rid of my I got rid of

184
00:10:20,799 --> 00:10:25,689
the video of me down the bottom left

185
00:10:23,110 --> 00:10:27,460
because I think that's probably just

186
00:10:25,690 --> 00:10:31,420
increasing the bandwidth unnecessary

187
00:10:27,460 --> 00:10:34,600
just my face you probably see my face we

188
00:10:31,419 --> 00:10:39,069
might bring it back up again for the Q&amp;A

189
00:10:34,600 --> 00:10:40,750
sounds good okay okay good so what I was

190
00:10:39,070 --> 00:10:42,640
saying is that this number is kind of

191
00:10:40,750 --> 00:10:45,549
equivalent to this number two to the

192
00:10:42,639 --> 00:10:48,819
zero is of course one and this is the

193
00:10:45,549 --> 00:10:52,179
idea of the name floating point is that

194
00:10:48,820 --> 00:10:55,990
this binary point can float around by

195
00:10:52,179 --> 00:10:59,559
altering the exponent what's important

196
00:10:55,990 --> 00:11:03,129
for us though is this number this

197
00:10:59,559 --> 00:11:05,439
representation most numbers can be

198
00:11:03,129 --> 00:11:07,179
represented let's make this a let's make

199
00:11:05,440 --> 00:11:11,290
this a negative number just to just to

200
00:11:07,179 --> 00:11:13,149
make this absolutely clear most flirting

201
00:11:11,289 --> 00:11:14,679
point numbers can be or most most

202
00:11:13,149 --> 00:11:16,919
numbers that we want to deal with can be

203
00:11:14,679 --> 00:11:19,899
represented represented in three parts

204
00:11:16,919 --> 00:11:21,839
one of them is this which is the sign

205
00:11:19,899 --> 00:11:23,000
whether it's positive or negative

206
00:11:21,840 --> 00:11:24,830
the

207
00:11:23,000 --> 00:11:27,679
second part is the mantissa which is

208
00:11:24,830 --> 00:11:32,290
this part which is a number between 1

209
00:11:27,679 --> 00:11:35,979
and 2 including 1 not including 2 and

210
00:11:32,289 --> 00:11:38,179
this number which is the number that you

211
00:11:35,980 --> 00:11:43,000
aides to ^

212
00:11:38,179 --> 00:11:43,000
and that part is called the exponent and

213
00:11:43,419 --> 00:11:48,259
the obvious number that you may think

214
00:11:46,759 --> 00:11:50,419
can't be represented in this way and

215
00:11:48,259 --> 00:11:52,159
you'd be right is 0 and that's a very

216
00:11:50,419 --> 00:11:55,579
important number and we'll deal with

217
00:11:52,159 --> 00:11:58,039
that in a minute but most numbers can be

218
00:11:55,580 --> 00:12:01,759
represented this way and the way we do

219
00:11:58,039 --> 00:12:03,949
it in I Triple E floating point is we

220
00:12:01,759 --> 00:12:04,669
pack these into bits in the following

221
00:12:03,950 --> 00:12:06,830
way

222
00:12:04,669 --> 00:12:14,629
I've actually got standing here so I can

223
00:12:06,830 --> 00:12:18,320
show you some with you it's decimal we

224
00:12:14,629 --> 00:12:20,299
don't care about decimal the I Triple E

225
00:12:18,320 --> 00:12:21,590
standard covers a lot of ground and I'm

226
00:12:20,299 --> 00:12:24,649
going to introduce you to some of the

227
00:12:21,590 --> 00:12:28,600
really weird parts later not in detail

228
00:12:24,649 --> 00:12:32,000
because you really don't want to know

229
00:12:28,600 --> 00:12:34,639
but no you really don't

230
00:12:32,000 --> 00:12:36,769
but I have an exact I here we go this is

231
00:12:34,639 --> 00:12:38,659
what I'm looking for right here so this

232
00:12:36,769 --> 00:12:42,529
is the format we have one bit with

233
00:12:38,659 --> 00:12:45,759
ripper time it's 0 of the numbers

234
00:12:42,529 --> 00:12:49,338
positive and 1 if the numbers negative

235
00:12:45,759 --> 00:12:51,500
this is the exponent field and the way

236
00:12:49,339 --> 00:12:54,230
we represent that is we represent this

237
00:12:51,500 --> 00:12:59,210
in in a field that's W bits in size now

238
00:12:54,230 --> 00:13:04,940
in the case of binary 32 which is what

239
00:12:59,210 --> 00:13:08,420
handmade Eirik all's real 32 and by the

240
00:13:04,940 --> 00:13:11,060
way this is a finite set of numbers

241
00:13:08,419 --> 00:13:12,319
there are two 232 possible binary thirty

242
00:13:11,059 --> 00:13:14,899
twos they are not real numbers it's

243
00:13:12,320 --> 00:13:17,300
finite anyway that's neither he nor

244
00:13:14,899 --> 00:13:20,059
that's an argument for another time

245
00:13:17,299 --> 00:13:23,599
the way we the way we represent this as

246
00:13:20,059 --> 00:13:28,399
we take this number six and then we add

247
00:13:23,600 --> 00:13:29,990
to it 127 which is two to the okay so

248
00:13:28,399 --> 00:13:35,708
this this field in binary so view is

249
00:13:29,990 --> 00:13:35,709
eight bits in size 127 is

250
00:13:36,000 --> 00:13:47,159
I hang on 27 let me let me just check

251
00:13:39,720 --> 00:13:50,730
that because I I have it here yes one

252
00:13:47,159 --> 00:13:53,818
bias bias 7f yes that's so that's that's

253
00:13:50,730 --> 00:13:57,180
127 so we add a hundred and twenty-seven

254
00:13:53,818 --> 00:13:57,599
and then we store that number in the

255
00:13:57,179 --> 00:14:04,138
field

256
00:13:57,600 --> 00:14:05,939
that's what 133 now those of you who of

257
00:14:04,139 --> 00:14:07,620
course know about binary representation

258
00:14:05,938 --> 00:14:09,929
may wonder why we don't just use the

259
00:14:07,620 --> 00:14:11,789
two's complement here there is a good

260
00:14:09,929 --> 00:14:14,578
reason for this and we'll get to that in

261
00:14:11,789 --> 00:14:18,269
a minute but anyway that's the number we

262
00:14:14,578 --> 00:14:20,818
store 133 which is the exponent plus

263
00:14:18,269 --> 00:14:22,799
this number which is called the BIOS the

264
00:14:20,818 --> 00:14:26,128
bias and we'll go through all of this in

265
00:14:22,799 --> 00:14:28,349
a minute so that's how we that's that's

266
00:14:26,129 --> 00:14:31,230
so we have one bit which is the sign bit

267
00:14:28,350 --> 00:14:35,159
and eight bits which is the biased

268
00:14:31,230 --> 00:14:36,778
exponent the exponent plus a bias the

269
00:14:35,159 --> 00:14:39,600
final thing is how we represent the

270
00:14:36,778 --> 00:14:44,278
mantissa in this case this is the

271
00:14:39,600 --> 00:14:48,920
mantissa one of the interesting things

272
00:14:44,278 --> 00:14:52,139
about scientific notation is for any

273
00:14:48,919 --> 00:14:56,099
number other than zero this leftmost

274
00:14:52,139 --> 00:15:00,149
digit is always a 1 it's it's never a

275
00:14:56,100 --> 00:15:02,699
zero because that's what we mean by this

276
00:15:00,149 --> 00:15:04,889
kind of normalized scientific notation

277
00:15:02,698 --> 00:15:07,349
so we don't actually need to store that

278
00:15:04,889 --> 00:15:08,850
so we strip that off and we stored that

279
00:15:07,350 --> 00:15:11,278
bit better and that is called the

280
00:15:08,850 --> 00:15:15,720
significand the trailing significant

281
00:15:11,278 --> 00:15:19,198
field as it's called in the standard and

282
00:15:15,720 --> 00:15:22,709
with that you can store any what we call

283
00:15:19,198 --> 00:15:31,649
normal number now there is a useful

284
00:15:22,708 --> 00:15:35,818
little tool here we go flirt toy oh hey

285
00:15:31,649 --> 00:15:38,789
look toys little little thing that

286
00:15:35,818 --> 00:15:40,588
someone has stuck on on github which

287
00:15:38,789 --> 00:15:43,469
lets you actually play with this so you

288
00:15:40,589 --> 00:15:47,009
can you can flip the sign bits and it'll

289
00:15:43,470 --> 00:15:48,928
make a negative number you can play with

290
00:15:47,009 --> 00:15:49,690
the experiment you can play with this

291
00:15:48,928 --> 00:15:52,959
and

292
00:15:49,690 --> 00:15:54,760
and have a lot of fun with this with

293
00:15:52,960 --> 00:15:56,410
various bit patterns and see what

294
00:15:54,759 --> 00:16:00,100
floating-point number it corresponds to

295
00:15:56,409 --> 00:16:03,009
it has 32-bit and 64-bit sir

296
00:16:00,100 --> 00:16:04,149
if you want to work with this in a

297
00:16:03,009 --> 00:16:05,860
little more detail and get a bit

298
00:16:04,149 --> 00:16:09,519
familiar with this I use this a lot

299
00:16:05,860 --> 00:16:13,810
writing the notes very useful little

300
00:16:09,519 --> 00:16:16,539
little thing to know that and it's got

301
00:16:13,809 --> 00:16:17,979
links to the Wikipedia pages on single

302
00:16:16,539 --> 00:16:19,629
precision double precision if you want

303
00:16:17,980 --> 00:16:23,110
to explain better than I can

304
00:16:19,629 --> 00:16:28,720
alright so that's how what we call

305
00:16:23,110 --> 00:16:30,310
normal numbers are represented by my use

306
00:16:28,720 --> 00:16:31,779
of the word normal number suggests this

307
00:16:30,309 --> 00:16:34,899
some other kind of number that's not

308
00:16:31,779 --> 00:16:37,059
normal and the main other kind you need

309
00:16:34,899 --> 00:16:41,409
to know is what's called sub normal

310
00:16:37,059 --> 00:16:44,139
numbers now this is this word was

311
00:16:41,409 --> 00:16:46,329
introduced in the 2008 standard before

312
00:16:44,139 --> 00:16:50,139
that people called them d normal numbers

313
00:16:46,330 --> 00:16:53,770
or denormalized numbers but I'm going to

314
00:16:50,139 --> 00:16:55,720
use the you know the current terminology

315
00:16:53,769 --> 00:17:00,029
even though sub normal sounds I think

316
00:16:55,720 --> 00:17:04,180
quite totalitarian nonetheless

317
00:17:00,029 --> 00:17:07,539
nonetheless so the idea is that for the

318
00:17:04,180 --> 00:17:09,699
exponent field we reserved two bit

319
00:17:07,539 --> 00:17:14,859
battens in this case there are eight

320
00:17:09,699 --> 00:17:18,670
bits we reserved one which is all zeros

321
00:17:14,859 --> 00:17:21,629
and this one which is all ones so these

322
00:17:18,670 --> 00:17:24,640
do not represent the normal exponents

323
00:17:21,630 --> 00:17:28,780
you know you don't subtract 127 and

324
00:17:24,640 --> 00:17:30,580
that's what it is 0 is interesting on

325
00:17:28,779 --> 00:17:33,480
from our point of view because what 0

326
00:17:30,579 --> 00:17:35,619
means is it is a sub normal number and

327
00:17:33,480 --> 00:17:39,779
what that means to the floating-point

328
00:17:35,619 --> 00:17:49,269
implementation is it means that the

329
00:17:39,779 --> 00:17:51,490
exponent is set to minus 126 and the

330
00:17:49,269 --> 00:17:54,180
mantissa the significant field is

331
00:17:51,490 --> 00:17:58,000
interpreted as a mantissa without a

332
00:17:54,180 --> 00:18:02,490
leading one so it's with a leading zero

333
00:17:58,000 --> 00:18:02,490
so if you were to see for example

334
00:18:02,950 --> 00:18:09,400
Paton whoops

335
00:18:06,509 --> 00:18:10,869
how do I hit this keyboard writte what

336
00:18:09,400 --> 00:18:16,090
that means is this

337
00:18:10,869 --> 00:18:21,819
this means that number times two to the

338
00:18:16,089 --> 00:18:23,559
power of minus 126 and what this does is

339
00:18:21,819 --> 00:18:26,259
this gives us a representation for very

340
00:18:23,559 --> 00:18:28,029
small numbers very small numbers are

341
00:18:26,259 --> 00:18:29,440
sometimes important in floating-point

342
00:18:28,029 --> 00:18:32,710
but more importantly gives us a

343
00:18:29,440 --> 00:18:38,410
representation for zero by simply making

344
00:18:32,710 --> 00:18:43,870
it all zeros it's I think there are 23

345
00:18:38,410 --> 00:18:46,450
of them and there's that that is the

346
00:18:43,869 --> 00:18:51,339
representation of zero and the reason

347
00:18:46,450 --> 00:18:53,319
for that is that we that we use the the

348
00:18:51,339 --> 00:18:55,679
reason why we use the all zeros in the

349
00:18:53,319 --> 00:18:59,279
exponent field for this is because

350
00:18:55,680 --> 00:19:01,630
programmers really really like it if

351
00:18:59,279 --> 00:19:04,269
when you have a block of memory and you

352
00:19:01,630 --> 00:19:07,090
fill it with zero bytes that that means

353
00:19:04,269 --> 00:19:09,639
the number zero it means when it's an

354
00:19:07,089 --> 00:19:11,919
integer and it now it means that when

355
00:19:09,640 --> 00:19:14,590
it's a floating point value as well this

356
00:19:11,920 --> 00:19:18,310
is a very highly desirable feature of

357
00:19:14,589 --> 00:19:19,720
the number system okay so there's a

358
00:19:18,309 --> 00:19:21,519
there's a really all of the finite

359
00:19:19,720 --> 00:19:24,370
numbers that we have to that we have to

360
00:19:21,519 --> 00:19:29,019
worry about this bit pattern one is

361
00:19:24,369 --> 00:19:34,599
reserved for two other things they're

362
00:19:29,019 --> 00:19:40,990
infinity and a special value called not

363
00:19:34,599 --> 00:19:42,730
a number you will see these if you've

364
00:19:40,990 --> 00:19:45,579
ever worked with floating-point you will

365
00:19:42,730 --> 00:19:49,870
be well familiar with not a number and

366
00:19:45,579 --> 00:19:52,629
infinity not a number more so these are

367
00:19:49,869 --> 00:19:56,409
there to make the system algebraically

368
00:19:52,630 --> 00:19:59,910
closed now what that means is that any

369
00:19:56,410 --> 00:20:02,850
operation gives you a meaningful answer

370
00:19:59,910 --> 00:20:07,810
so for example if you divide one by zero

371
00:20:02,849 --> 00:20:10,000
what you get is infinity that's not a

372
00:20:07,809 --> 00:20:12,309
finite number and in fact you can

373
00:20:10,000 --> 00:20:13,690
usually set in fact no you can set your

374
00:20:12,309 --> 00:20:16,750
floating-point unit to give you an

375
00:20:13,690 --> 00:20:18,669
exception if that ever happens

376
00:20:16,750 --> 00:20:22,720
we really don't want that in a program

377
00:20:18,669 --> 00:20:28,179
like I'm a hero but it least gives it to

378
00:20:22,720 --> 00:20:31,900
me and so for that and if you divide or

379
00:20:28,179 --> 00:20:33,850
you get negative infinity not a number

380
00:20:31,900 --> 00:20:35,440
is for situate is for situations where

381
00:20:33,849 --> 00:20:38,709
the answer really isn't a real number

382
00:20:35,440 --> 00:20:41,830
like the square root of negative 1 or 0

383
00:20:38,710 --> 00:20:45,970
divided by 0 oh one thing I didn't

384
00:20:41,829 --> 00:20:48,519
mention by the way is that that is also

385
00:20:45,970 --> 00:20:53,110
a possibility and what that means is

386
00:20:48,519 --> 00:20:55,538
negative now you may wonder what why

387
00:20:53,109 --> 00:21:00,099
what's negative 0 why would you need it

388
00:20:55,538 --> 00:21:04,329
and you're right that doesn't make any

389
00:21:00,099 --> 00:21:07,719
mathematical sense but it does there are

390
00:21:04,329 --> 00:21:10,029
some some uses for it because often what

391
00:21:07,720 --> 00:21:11,650
will happen is you do some calculations

392
00:21:10,029 --> 00:21:14,129
calculations calculations and the number

393
00:21:11,650 --> 00:21:17,110
just gets to your small to represent and

394
00:21:14,130 --> 00:21:19,840
by making this a negative 0 is at least

395
00:21:17,109 --> 00:21:22,298
it tells you which way that that's

396
00:21:19,839 --> 00:21:24,308
called an underflow by the way and what

397
00:21:22,298 --> 00:21:27,369
that does is at least tells you which

398
00:21:24,308 --> 00:21:30,339
direction it under flowed from and so

399
00:21:27,369 --> 00:21:32,589
that's a sometimes useful feature of the

400
00:21:30,339 --> 00:21:34,779
system again it's they're mostly for

401
00:21:32,589 --> 00:21:36,428
algebraic closure reasons not because it

402
00:21:34,779 --> 00:21:39,639
necessarily makes any mathematical sense

403
00:21:36,429 --> 00:21:43,720
to Heather negative 0 but it's useful in

404
00:21:39,640 --> 00:21:45,038
practice so that in a nutshell is I

405
00:21:43,720 --> 00:21:46,839
Triple E phone point up

406
00:21:45,038 --> 00:21:49,509
that's just so we're absolutely certain

407
00:21:46,839 --> 00:21:55,689
what we know this so there's a sign bit

408
00:21:49,509 --> 00:22:00,759
all one's infinity is if this field is

409
00:21:55,690 --> 00:22:02,679
all zeros that's that that's that's a

410
00:22:00,759 --> 00:22:04,379
representation for infinity the sign bit

411
00:22:02,679 --> 00:22:09,970
whether it's possibly made in finding

412
00:22:04,380 --> 00:22:21,900
this the sign field is currently ignored

413
00:22:09,970 --> 00:22:21,900
at the moment one you have that

414
00:22:23,099 --> 00:22:31,908
that's where non-zero pattern that is

415
00:22:29,099 --> 00:22:34,079
the representation for not a number and

416
00:22:31,909 --> 00:22:37,380
by the way there are two kinds of not a

417
00:22:34,079 --> 00:22:39,599
number one is if there's a one bit here

418
00:22:37,380 --> 00:22:44,309
and one if there's a zero bit here but

419
00:22:39,599 --> 00:22:47,158
really this part here has to be nonzero

420
00:22:44,308 --> 00:22:49,829
if that zero this is called a quiet

421
00:22:47,159 --> 00:22:51,899
difficult to quiet nan quiet not a

422
00:22:49,829 --> 00:22:53,668
number and this is called a signalling

423
00:22:51,898 --> 00:22:56,189
name signaling not a number and the

424
00:22:53,669 --> 00:22:59,509
difference is that quiet is just

425
00:22:56,190 --> 00:23:01,919
probably the three calculus it was

426
00:22:59,509 --> 00:23:03,509
basically view try and doing anything

427
00:23:01,919 --> 00:23:05,759
was not enough yet not a number as an

428
00:23:03,509 --> 00:23:07,558
answer and if signalling not a number is

429
00:23:05,759 --> 00:23:10,889
one that always raises an exception no

430
00:23:07,558 --> 00:23:15,750
matter what so that's that's something

431
00:23:10,888 --> 00:23:18,148
that you may have to know but that's

432
00:23:15,750 --> 00:23:19,829
that's basically all of there all of the

433
00:23:18,148 --> 00:23:22,500
tricky cases so you've got normal

434
00:23:19,829 --> 00:23:26,028
numbers sub normal numbers and then

435
00:23:22,500 --> 00:23:29,609
these special cases infinity quiet man

436
00:23:26,028 --> 00:23:31,740
signaling man and that's everything

437
00:23:29,609 --> 00:23:34,829
uh once again this sign bit here is is

438
00:23:31,740 --> 00:23:36,359
currently not interpreted by the under

439
00:23:34,829 --> 00:23:39,119
standard I'm sure that some future

440
00:23:36,359 --> 00:23:42,240
standard will will take a liking to that

441
00:23:39,119 --> 00:23:44,609
and use it for some reason all right so

442
00:23:42,240 --> 00:23:47,460
that's that ly that's the basic idea of

443
00:23:44,609 --> 00:23:49,769
of how floating point numbers are

444
00:23:47,460 --> 00:23:53,460
represented so what we have one bit here

445
00:23:49,769 --> 00:23:55,649
eight bits here and 23 bits here and

446
00:23:53,460 --> 00:24:02,190
that should add up to 32 so that's the

447
00:23:55,648 --> 00:24:04,018
the binary 30 presentation binary 60 aim

448
00:24:02,190 --> 00:24:06,899
the sign bits the same size this is a

449
00:24:04,019 --> 00:24:10,579
bit wider this is a bit wider but

450
00:24:06,898 --> 00:24:13,158
otherwise it's it's it's the same idea

451
00:24:10,579 --> 00:24:16,230
any questions about any of that

452
00:24:13,159 --> 00:24:18,389
so I don't think I had any I'll look

453
00:24:16,230 --> 00:24:22,528
briefly at the chat to see if there are

454
00:24:18,388 --> 00:24:25,678
any questions about that that are coming

455
00:24:22,528 --> 00:24:28,048
through if anyone wants to put a Q :

456
00:24:25,679 --> 00:24:29,960
I will yeah double check it but that

457
00:24:28,048 --> 00:24:32,158
that was pretty clear I had one question

458
00:24:29,960 --> 00:24:34,590
while I'm waiting to see if anyone

459
00:24:32,159 --> 00:24:36,900
didn't anyone had something they didn't

460
00:24:34,589 --> 00:24:44,069
understand I did have one question

461
00:24:36,900 --> 00:24:46,230
which was so I with the let me look back

462
00:24:44,069 --> 00:24:49,409
over here I should have written it down

463
00:24:46,230 --> 00:24:55,259
at the time but I I thought I had oh yes

464
00:24:49,410 --> 00:24:58,680
so it's just a peculiarities of binary

465
00:24:55,259 --> 00:25:01,890
as a number system that you can skip

466
00:24:58,680 --> 00:25:04,019
encoding the leading digit because any

467
00:25:01,890 --> 00:25:07,110
other number scheme it's always just the

468
00:25:04,019 --> 00:25:08,910
the base of the number minus one that

469
00:25:07,109 --> 00:25:12,029
you would have to encode there probably

470
00:25:08,910 --> 00:25:13,830
and just since two minus one happens to

471
00:25:12,029 --> 00:25:15,389
be just one you can skip the encoding

472
00:25:13,829 --> 00:25:17,939
but it seems like that's just like we

473
00:25:15,390 --> 00:25:21,600
got lucky with binary in a sense is that

474
00:25:17,940 --> 00:25:23,279
well yes you're kind of you're kind of

475
00:25:21,599 --> 00:25:26,369
right on the other hand you know that's

476
00:25:23,279 --> 00:25:30,629
it's a it's it's the it's one of the

477
00:25:26,369 --> 00:25:35,219
reasons why we use a binary yes yeah so

478
00:25:30,630 --> 00:25:37,950
so but yes if you are encoding decimal

479
00:25:35,220 --> 00:25:42,420
and you know the standard has a way to

480
00:25:37,950 --> 00:25:44,670
incur decimal in here you have to store

481
00:25:42,420 --> 00:25:46,558
a number between one and nine yep okay

482
00:25:44,670 --> 00:25:47,670
oh yes this is why this is why these

483
00:25:46,558 --> 00:25:50,339
these formats are called binary

484
00:25:47,670 --> 00:25:55,019
thirty-two and binary 64 once again new

485
00:25:50,339 --> 00:25:57,299
this is new language in 2008 new in 2008

486
00:25:55,019 --> 00:25:58,589
I know yeah before that they were called

487
00:25:57,299 --> 00:26:01,759
single precision and double precision

488
00:25:58,589 --> 00:26:05,299
got it we still mostly use those terms

489
00:26:01,759 --> 00:26:08,789
but it's binary as opposed to decimal

490
00:26:05,299 --> 00:26:11,069
okay so we had one question from the

491
00:26:08,789 --> 00:26:12,720
stream on that so very good explanation

492
00:26:11,069 --> 00:26:14,928
by the way because I think everyone got

493
00:26:12,720 --> 00:26:17,579
it including me thank you

494
00:26:14,929 --> 00:26:20,160
is there a representation for under

495
00:26:17,579 --> 00:26:23,009
flowing numbers I think that was just a

496
00:26:20,160 --> 00:26:26,550
question regarding like so when you do

497
00:26:23,009 --> 00:26:28,319
have an underflow there you you lose all

498
00:26:26,549 --> 00:26:29,669
information about the sign bit it was I

499
00:26:28,319 --> 00:26:31,589
correct understanding you there so when

500
00:26:29,670 --> 00:26:34,830
there's an underflow you it'll go all

501
00:26:31,589 --> 00:26:36,480
the way down to subnormal and then it'll

502
00:26:34,829 --> 00:26:39,359
just be left with just the sign bit and

503
00:26:36,480 --> 00:26:42,950
zeroes eventually that is that is

504
00:26:39,359 --> 00:26:45,719
correct of course there are the the

505
00:26:42,950 --> 00:26:48,299
standard and your floating-point unit as

506
00:26:45,720 --> 00:26:51,750
well has a way to turn an underflow

507
00:26:48,299 --> 00:26:54,289
condition into an exception okay

508
00:26:51,750 --> 00:26:56,670
if that's what you really want

509
00:26:54,289 --> 00:26:59,159
sometimes that is what you want it's uh

510
00:26:56,670 --> 00:27:06,360
it's called uh what's called loss of

511
00:26:59,160 --> 00:27:09,210
significance I think yeah yes exactly

512
00:27:06,359 --> 00:27:13,379
it's it's it is very very very extension

513
00:27:09,210 --> 00:27:14,100
yes or loss of precision or something

514
00:27:13,380 --> 00:27:18,930
like that

515
00:27:14,099 --> 00:27:21,359
anytime you go from normal to some of

516
00:27:18,930 --> 00:27:24,269
your significand you you know you you

517
00:27:21,359 --> 00:27:26,069
you don't have as many bits available to

518
00:27:24,269 --> 00:27:30,210
represent your mantissa as you might

519
00:27:26,069 --> 00:27:31,799
want yes oh hey if I got binary 16 by 32

520
00:27:30,210 --> 00:27:33,960
binary 64 binary heads so about half

521
00:27:31,799 --> 00:27:37,200
precision as well interesting decimal 34

522
00:27:33,960 --> 00:27:40,579
decimal 64 decimal 128 those are the

523
00:27:37,200 --> 00:27:44,549
main versions that are in the standard I

524
00:27:40,579 --> 00:27:45,809
accidentally landed on that page okay so

525
00:27:44,549 --> 00:27:48,389
yeah I don't think we're any real

526
00:27:45,809 --> 00:27:51,629
questions then other than that one so

527
00:27:48,390 --> 00:27:53,700
you take it away all right yeah we will

528
00:27:51,630 --> 00:27:54,900
go on so let me have a look let's have a

529
00:27:53,700 --> 00:28:00,630
look at a little header file over Q

530
00:27:54,900 --> 00:28:03,540
which is it's nu 10 made numerix so I

531
00:28:00,630 --> 00:28:06,690
put it under an MIT license so anyone

532
00:28:03,539 --> 00:28:09,420
anyone can have a copy of this and this

533
00:28:06,690 --> 00:28:11,730
this defines a lot of the constants that

534
00:28:09,420 --> 00:28:13,769
we need floating point numbers at the

535
00:28:11,730 --> 00:28:16,710
bit level there's colors all right by

536
00:28:13,769 --> 00:28:22,410
the way you know look fine to me okay

537
00:28:16,710 --> 00:28:29,940
cool I mind you it's not available for

538
00:28:22,410 --> 00:28:31,650
the Mac anyway so that wasn't okay I

539
00:28:29,940 --> 00:28:38,039
didn't I didn't mean that as I didn't

540
00:28:31,650 --> 00:28:40,500
mean that as a hint yeah so so the main

541
00:28:38,039 --> 00:28:43,109
the main things here are the number of

542
00:28:40,500 --> 00:28:45,539
bits in the exponent the bias for the

543
00:28:43,109 --> 00:28:47,699
exponent which by the way is always two

544
00:28:45,539 --> 00:28:49,619
to the number of exponent bits minus one

545
00:28:47,700 --> 00:28:50,509
for any for any floating-point format

546
00:28:49,619 --> 00:28:54,089
that's what it is

547
00:28:50,509 --> 00:28:57,829
the significant bits that's not the

548
00:28:54,089 --> 00:29:00,059
mantissa it's the significant and

549
00:28:57,829 --> 00:29:03,809
mantissa is the number of bits in this

550
00:29:00,059 --> 00:29:05,909
one this is one point something the

551
00:29:03,809 --> 00:29:09,220
significand is yeah

552
00:29:05,910 --> 00:29:11,890
all right the minimum maximum exponent

553
00:29:09,220 --> 00:29:14,200
these of course - not symmetric around

554
00:29:11,890 --> 00:29:17,040
zero and the reason is because we

555
00:29:14,200 --> 00:29:19,390
reserved two values one for the

556
00:29:17,039 --> 00:29:20,980
subnormal and one for all of the other

557
00:29:19,390 --> 00:29:25,660
special case the things that aren't

558
00:29:20,980 --> 00:29:28,299
finite numbers then we've got a bunch of

559
00:29:25,660 --> 00:29:30,490
a bunch of constants here now these by

560
00:29:28,299 --> 00:29:34,869
the way the C standard library does

561
00:29:30,490 --> 00:29:37,960
define something very like these and let

562
00:29:34,869 --> 00:29:39,669
me just show you what they are they're

563
00:29:37,960 --> 00:29:44,400
they're in defined in float that H

564
00:29:39,670 --> 00:29:44,400
whoops no I don't want to enable cereal

565
00:29:45,869 --> 00:29:50,229
that's unfortunately right next to the

566
00:29:48,579 --> 00:29:54,639
Delete key and it's on the cut bar on

567
00:29:50,230 --> 00:30:00,779
this method so I keep I know it's it's

568
00:29:54,640 --> 00:30:00,780
it's crazy absolutely crazy all right so

569
00:30:01,259 --> 00:30:10,619
we don't do that

570
00:30:03,660 --> 00:30:12,910
here we go that's probably good enough

571
00:30:10,619 --> 00:30:15,459
you see how long this is taking by the

572
00:30:12,910 --> 00:30:19,540
way while I'm while I'm yeah screen

573
00:30:15,460 --> 00:30:23,289
sharing okay yeah yeah I'm into it I'm

574
00:30:19,539 --> 00:30:27,490
telling you all right so it this defines

575
00:30:23,289 --> 00:30:29,950
a bunch of a bunch of constants that are

576
00:30:27,490 --> 00:30:33,009
very similar to the ones that I've

577
00:30:29,950 --> 00:30:39,519
defined here but they differ in one

578
00:30:33,009 --> 00:30:42,160
slightly subtle way so we've got minimum

579
00:30:39,519 --> 00:30:47,740
exponent maximum exponent this is for

580
00:30:42,160 --> 00:30:50,769
flirt the maximum value the minimum

581
00:30:47,740 --> 00:30:53,400
value which by the way is not actually

582
00:30:50,769 --> 00:30:58,029
the minimum value for a flirt it is the

583
00:30:53,400 --> 00:31:00,700
minimum positive normal number for a

584
00:30:58,029 --> 00:31:02,680
flirt a lot of people hate this that

585
00:31:00,700 --> 00:31:05,309
this this you you flirt max is the

586
00:31:02,680 --> 00:31:08,620
largest flirt flirt min should be this

587
00:31:05,309 --> 00:31:11,289
the smallest plug well but it isn't

588
00:31:08,619 --> 00:31:13,599
that's why I've actually called it max

589
00:31:11,289 --> 00:31:15,700
normal min normal and min subnormal in

590
00:31:13,599 --> 00:31:18,599
this I think that that's probably less

591
00:31:15,700 --> 00:31:22,330
confusing that notation

592
00:31:18,599 --> 00:31:24,639
the this is just some the sign mass the

593
00:31:22,329 --> 00:31:27,668
exponent mask the amount by which you

594
00:31:24,640 --> 00:31:31,830
shift the exponent right the significant

595
00:31:27,669 --> 00:31:35,620
mask and finally this number epsilon and

596
00:31:31,829 --> 00:31:38,308
this is probably the most useful number

597
00:31:35,619 --> 00:31:40,509
of them all unless you're actually

598
00:31:38,308 --> 00:31:42,970
packing and unpacking flirts if all

599
00:31:40,509 --> 00:31:48,160
you're doing is working with flirts

600
00:31:42,970 --> 00:31:50,620
using the values that you're the the

601
00:31:48,160 --> 00:31:52,630
Machine epsilon is probably the most

602
00:31:50,619 --> 00:31:57,359
useful number that you'll see and you'll

603
00:31:52,630 --> 00:31:57,360
find we use this in a few places in the

604
00:32:01,109 --> 00:32:05,949
cups Alana is not equal to one could you

605
00:32:04,150 --> 00:32:08,019
could you go back about fifteen seconds

606
00:32:05,950 --> 00:32:10,808
with nothing she likes for a split

607
00:32:08,019 --> 00:32:15,849
second there okay and it was the most

608
00:32:10,808 --> 00:32:20,099
important thing yeah okay

609
00:32:15,849 --> 00:32:23,709
all right epsilon is the smallest number

610
00:32:20,099 --> 00:32:28,480
such that 1 plus epsilon is not equal to

611
00:32:23,710 --> 00:32:30,640
1 so what this done what this value does

612
00:32:28,480 --> 00:32:32,579
this is actually 2 to the minus 23 if

613
00:32:30,640 --> 00:32:34,990
you work it out that's tuna minus 23

614
00:32:32,579 --> 00:32:38,829
because that's the number of bits in the

615
00:32:34,990 --> 00:32:43,058
significant what this does is this gives

616
00:32:38,829 --> 00:32:46,720
you a measure of how granular the number

617
00:32:43,058 --> 00:32:52,480
system is it's the smallest relative

618
00:32:46,720 --> 00:32:54,370
difference between two adjacent and so

619
00:32:52,480 --> 00:32:56,798
this is actually a really important

620
00:32:54,369 --> 00:33:00,729
number because this will this this is

621
00:32:56,798 --> 00:33:02,019
this is how you kind of this is this

622
00:33:00,730 --> 00:33:03,490
this number if you like is the

623
00:33:02,019 --> 00:33:05,918
difference between a real number and a

624
00:33:03,490 --> 00:33:08,259
floating-point number in some sense and

625
00:33:05,919 --> 00:33:12,610
this this number will will turn up a lot

626
00:33:08,259 --> 00:33:14,319
of the time in what we're doing so so

627
00:33:12,609 --> 00:33:16,509
remember this number epsilon I will

628
00:33:14,319 --> 00:33:18,939
explain it again when we see it in when

629
00:33:16,509 --> 00:33:20,798
we see it in the future but that's that

630
00:33:18,940 --> 00:33:22,900
this is that this of all of the of all

631
00:33:20,798 --> 00:33:24,429
of these constants here these are

632
00:33:22,900 --> 00:33:27,159
important for unpacking and unpacking

633
00:33:24,429 --> 00:33:29,140
floats a bit level but this is the

634
00:33:27,159 --> 00:33:31,429
number that you need the most for

635
00:33:29,140 --> 00:33:33,619
actually working with them

636
00:33:31,429 --> 00:33:40,028
all right what I finally got here is a

637
00:33:33,618 --> 00:33:42,918
union of real 32 aun 32 and that's back

638
00:33:40,028 --> 00:33:48,169
could do it with the Union could do it

639
00:33:42,919 --> 00:33:50,059
with pointer hackery and C either way I

640
00:33:48,169 --> 00:33:56,089
checked with a couple of compilers and

641
00:33:50,058 --> 00:34:00,739
it does seem to compile this Union away

642
00:33:56,088 --> 00:34:07,608
which is what you want because in in

643
00:34:00,739 --> 00:34:10,220
modern Intel F peers in sse sse2 it's

644
00:34:07,608 --> 00:34:12,548
what you have is on 128 register that

645
00:34:10,219 --> 00:34:15,199
you can pick that you can fit four

646
00:34:12,548 --> 00:34:20,059
binary 32 s in for single precision

647
00:34:15,199 --> 00:34:21,739
floats or for you in thirty twos and all

648
00:34:20,059 --> 00:34:22,940
you have to do is decide that that value

649
00:34:21,739 --> 00:34:24,709
is something different you don't

650
00:34:22,940 --> 00:34:27,858
actually need to convert from one to the

651
00:34:24,710 --> 00:34:29,599
other to do bit hackery on it and you

652
00:34:27,858 --> 00:34:31,460
want a representation where that is

653
00:34:29,599 --> 00:34:32,990
compiled away by the compiler and I

654
00:34:31,460 --> 00:34:35,720
think most compilers are pretty good

655
00:34:32,989 --> 00:34:39,318
about this because people who are doing

656
00:34:35,719 --> 00:34:41,868
low-level hacking with floating-point

657
00:34:39,318 --> 00:34:45,199
numbers they need a consistent way to

658
00:34:41,869 --> 00:34:46,720
just have some somewhere interpreted as

659
00:34:45,199 --> 00:34:49,250
a flirt and now I want to win

660
00:34:46,719 --> 00:34:52,250
interpreters unity too so I can extract

661
00:34:49,250 --> 00:34:53,898
some bits from it and so the Union way

662
00:34:52,250 --> 00:34:56,239
seems to work on everything I've tried I

663
00:34:53,898 --> 00:34:58,130
have not tried Visual Studio so might

664
00:34:56,239 --> 00:35:01,519
have to do some disassembly later just

665
00:34:58,130 --> 00:35:04,730
to see how that's happening all right so

666
00:35:01,519 --> 00:35:06,528
I've got a little enum here because this

667
00:35:04,730 --> 00:35:08,869
is this is useful for some of the basic

668
00:35:06,528 --> 00:35:12,440
operations to work out number zero

669
00:35:08,869 --> 00:35:14,950
normal subnormal infinity or nem we'll

670
00:35:12,440 --> 00:35:18,230
see an example of that in a minute just

671
00:35:14,949 --> 00:35:19,699
just just to be clear what I'm heading

672
00:35:18,230 --> 00:35:23,119
towards I've got I've got a real worked

673
00:35:19,699 --> 00:35:28,818
example here of floating point division

674
00:35:23,119 --> 00:35:32,119
um in all of its glory you'll see what I

675
00:35:28,818 --> 00:35:34,900
mean by that in a minute anyway so this

676
00:35:32,119 --> 00:35:39,410
is to test if it's a positive infinity

677
00:35:34,900 --> 00:35:41,660
negative infinity this is a sort of note

678
00:35:39,409 --> 00:35:43,519
these are values this returns positive

679
00:35:41,659 --> 00:35:45,230
infinity returns negative infinity this

680
00:35:43,519 --> 00:35:47,809
returns a quiet man

681
00:35:45,230 --> 00:35:50,659
which is I just set the significant to

682
00:35:47,809 --> 00:35:52,578
all ones it has to be at least the first

683
00:35:50,659 --> 00:35:54,230
bit has the most significant bit has to

684
00:35:52,579 --> 00:35:58,070
be one I just sit into all ones that's a

685
00:35:54,230 --> 00:36:01,219
fairly standard way of doing it

686
00:35:58,070 --> 00:36:04,039
and now finally some queries this is the

687
00:36:01,219 --> 00:36:06,139
first one these is a number a finite

688
00:36:04,039 --> 00:36:07,699
number that means it's anything other

689
00:36:06,139 --> 00:36:11,868
than infinity or not a number

690
00:36:07,699 --> 00:36:15,379
normal or sub normal this is true of

691
00:36:11,869 --> 00:36:17,210
it's an infinity this is all fairly

692
00:36:15,380 --> 00:36:20,390
straightforward but you you take the

693
00:36:17,210 --> 00:36:21,619
number X you store it in this Union as a

694
00:36:20,389 --> 00:36:24,049
flirt as a flirt

695
00:36:21,619 --> 00:36:26,358
you read it out as an integer and then

696
00:36:24,050 --> 00:36:31,010
do whatever bit masking and and mucking

697
00:36:26,358 --> 00:36:33,828
around you want to do again this is for

698
00:36:31,010 --> 00:36:35,690
infinity it's infinity if the exponent

699
00:36:33,829 --> 00:36:40,849
field is the special or one's pattern

700
00:36:35,690 --> 00:36:42,108
and the significant field is zero this

701
00:36:40,849 --> 00:36:44,059
is true if the number is positive

702
00:36:42,108 --> 00:36:45,500
according to its sign bit of course if

703
00:36:44,059 --> 00:36:47,320
it's not a number then the sign bit

704
00:36:45,500 --> 00:36:49,969
doesn't mean anything but that's alright

705
00:36:47,320 --> 00:36:52,280
so here's the first useful operation if

706
00:36:49,969 --> 00:36:55,730
you like it take the value of the number

707
00:36:52,280 --> 00:37:00,500
and all we do for that is we take this

708
00:36:55,730 --> 00:37:03,199
Union we store X in it we mask off the

709
00:37:00,500 --> 00:37:05,480
sign bit so we force the sign bit to be

710
00:37:03,199 --> 00:37:07,489
zero and then just read the value as a

711
00:37:05,480 --> 00:37:09,519
floating point number again and that

712
00:37:07,489 --> 00:37:12,348
gives us the absolute value of a number

713
00:37:09,519 --> 00:37:14,179
of course there's a there's a there are

714
00:37:12,349 --> 00:37:16,970
functions to do this in the C standard

715
00:37:14,179 --> 00:37:18,949
library but this this should this is

716
00:37:16,969 --> 00:37:20,959
this is and also you can use you know

717
00:37:18,949 --> 00:37:23,899
comparison and negative and so forth but

718
00:37:20,960 --> 00:37:26,659
this should this should compile down to

719
00:37:23,900 --> 00:37:29,450
like one instruction I think maybe maybe

720
00:37:26,659 --> 00:37:32,449
a load of this of this sign mask so

721
00:37:29,449 --> 00:37:37,068
maybe two instructions but it's a lot of

722
00:37:32,449 --> 00:37:41,769
code to get two instructions right this

723
00:37:37,068 --> 00:37:44,329
is a function which sets the sign bit so

724
00:37:41,769 --> 00:37:48,769
you take a number you mask off

725
00:37:44,329 --> 00:37:53,269
everything sign bit you then set it yeah

726
00:37:48,769 --> 00:37:55,280
we few ways you could do that anyway we

727
00:37:53,269 --> 00:37:57,800
either either set the bit if we want it

728
00:37:55,280 --> 00:37:59,740
to be negative or we clear the bit if we

729
00:37:57,800 --> 00:38:01,880
want it to be

730
00:37:59,739 --> 00:38:04,969
all right this is the this is the

731
00:38:01,880 --> 00:38:06,800
function that takes this this enum up

732
00:38:04,969 --> 00:38:10,750
here takes a number and categorizes it

733
00:38:06,800 --> 00:38:14,750
as to what kind it is

734
00:38:10,750 --> 00:38:16,400
so we extract the exponent field listing

735
00:38:14,750 --> 00:38:20,150
event field experiment field of zero

736
00:38:16,400 --> 00:38:26,180
then it's either zero or sub normal zero

737
00:38:20,150 --> 00:38:30,079
is is special kind of sub normal but the

738
00:38:26,179 --> 00:38:31,789
difference between that and between zero

739
00:38:30,079 --> 00:38:33,799
and a sub normal number is the sub

740
00:38:31,789 --> 00:38:38,179
normal number in theory could be

741
00:38:33,800 --> 00:38:42,230
normalized if we had enough if we had

742
00:38:38,179 --> 00:38:43,759
enough experiment and we'll see why we

743
00:38:42,230 --> 00:38:46,610
might want to do this in the future so

744
00:38:43,760 --> 00:38:48,680
that we can deal with most normal and

745
00:38:46,610 --> 00:38:52,610
sub normal numbers in a uniform way and

746
00:38:48,679 --> 00:38:54,980
that's a sometimes a useful feature then

747
00:38:52,610 --> 00:38:59,180
we've got infinity and then and those

748
00:38:54,980 --> 00:39:00,199
cases don't apply that's um I think I

749
00:38:59,179 --> 00:39:02,119
think this is fairly straightforward

750
00:39:00,199 --> 00:39:05,029
because what this really does is this

751
00:39:02,119 --> 00:39:09,500
just implements the the patterns that we

752
00:39:05,030 --> 00:39:11,690
looked at earlier alright now this is

753
00:39:09,500 --> 00:39:14,269
this is where the where the work starts

754
00:39:11,690 --> 00:39:15,619
getting interesting extract --ax now

755
00:39:14,269 --> 00:39:17,480
again there is a function in the c

756
00:39:15,619 --> 00:39:24,799
standard library that does this it is

757
00:39:17,480 --> 00:39:30,920
called if our exp here we go it's the

758
00:39:24,800 --> 00:39:34,630
c++ c library function okay we've got

759
00:39:30,920 --> 00:39:34,630
microsoft let's look at microsoft Joey

760
00:39:36,159 --> 00:39:44,449
so if our axp takes a there's a there's

761
00:39:43,070 --> 00:39:47,559
a double version and a float version

762
00:39:44,449 --> 00:39:53,029
here the flat version takes a flirt

763
00:39:47,559 --> 00:39:54,860
returns a float and also takes a pointer

764
00:39:53,030 --> 00:39:56,660
to an integer into which the exponent is

765
00:39:54,860 --> 00:39:58,670
stored so what this does is this

766
00:39:56,659 --> 00:40:04,339
separates a number into its mantissa and

767
00:39:58,670 --> 00:40:07,820
its exponent this is one of the most

768
00:40:04,340 --> 00:40:11,440
useful operations for very low-level

769
00:40:07,820 --> 00:40:15,059
this page helpful yes it is go away

770
00:40:11,440 --> 00:40:15,059
no I'm not giving you feedback on

771
00:40:15,250 --> 00:40:22,179
this and and the reason why this is one

772
00:40:19,719 --> 00:40:24,669
of the most useful operations is that it

773
00:40:22,179 --> 00:40:27,038
helps you reduce the size of your

774
00:40:24,670 --> 00:40:29,108
problem down now let me give you an

775
00:40:27,039 --> 00:40:33,369
example of that let's suppose you're

776
00:40:29,108 --> 00:40:38,949
implanting square root I want one

777
00:40:33,369 --> 00:40:41,260
endpoint square root so we or the zero

778
00:40:38,949 --> 00:40:44,858
case we know the negative negative

779
00:40:41,260 --> 00:40:46,089
number is not a number infinity and then

780
00:40:44,858 --> 00:40:48,088
we don't care about those for the moment

781
00:40:46,088 --> 00:40:50,199
we'll just we'll just look at positive

782
00:40:48,088 --> 00:40:53,380
numbers whether they're normal or

783
00:40:50,199 --> 00:40:58,659
subnormal we know that a number can-can

784
00:40:53,380 --> 00:41:01,809
is M times two to the eighth where where

785
00:40:58,659 --> 00:41:08,679
m is a number between one and two and E

786
00:41:01,809 --> 00:41:12,789
is some integer if the exponent is even

787
00:41:08,679 --> 00:41:17,588
that is if this is actually to the to P

788
00:41:12,789 --> 00:41:22,720
in the square root of that number is the

789
00:41:17,588 --> 00:41:26,528
square root of M times to the P because

790
00:41:22,719 --> 00:41:30,459
the square root of 2 to the 2 P is P if

791
00:41:26,528 --> 00:41:33,159
it's an odd number through P plus one

792
00:41:30,460 --> 00:41:37,630
then it's the square root of M times the

793
00:41:33,159 --> 00:41:40,838
square root of two times two to the P in

794
00:41:37,630 --> 00:41:42,190
either way we've reduced the problem of

795
00:41:40,838 --> 00:41:44,619
computing the square root of an

796
00:41:42,190 --> 00:41:47,200
arbitrary number normal or sub normal

797
00:41:44,619 --> 00:41:48,250
down to the problem of computing the

798
00:41:47,199 --> 00:41:52,868
square root of a number in the range

799
00:41:48,250 --> 00:41:54,608
between one and two reduce the size of

800
00:41:52,869 --> 00:41:59,019
the problem down so far for just a

801
00:41:54,608 --> 00:42:00,670
little bit of a bit hackery and of

802
00:41:59,019 --> 00:42:05,170
course this is what your FPU does

803
00:42:00,670 --> 00:42:08,019
because the bits are just there and so

804
00:42:05,170 --> 00:42:10,389
that that reduces as it reduces the size

805
00:42:08,019 --> 00:42:12,699
of the problem down this is this is what

806
00:42:10,389 --> 00:42:15,969
a concept that we're going to come back

807
00:42:12,699 --> 00:42:17,980
to which is range reduction the the

808
00:42:15,969 --> 00:42:20,889
range of values that you have to feed to

809
00:42:17,980 --> 00:42:23,199
this to this to this function can be

810
00:42:20,889 --> 00:42:24,900
reduced dramatically to a numbers in a

811
00:42:23,199 --> 00:42:27,210
very small range

812
00:42:24,900 --> 00:42:29,690
so that's the reason why this is a very

813
00:42:27,210 --> 00:42:31,980
useful operation to have around and

814
00:42:29,690 --> 00:42:35,909
we'll have a look at it in a minute when

815
00:42:31,980 --> 00:42:38,490
we look at division because so let's

816
00:42:35,909 --> 00:42:44,519
actually look at the implementation of

817
00:42:38,489 --> 00:42:48,419
that extract exponent so there's a lot

818
00:42:44,519 --> 00:42:51,480
of code here some of its comments of

819
00:42:48,420 --> 00:42:54,119
course so in the case of zero infinity

820
00:42:51,480 --> 00:42:57,300
or nan we just said the exponent to zero

821
00:42:54,119 --> 00:42:59,779
and set the mantissa to that so there's

822
00:42:57,300 --> 00:43:02,420
not a lot you can do in that case I

823
00:42:59,780 --> 00:43:07,530
think this is what kind of what the C

824
00:43:02,420 --> 00:43:09,960
library does by convention anyway for a

825
00:43:07,530 --> 00:43:13,080
normal number all we do is we extract

826
00:43:09,960 --> 00:43:15,720
the exponent field we extract these

827
00:43:13,079 --> 00:43:17,309
front field read the mask shift it by

828
00:43:15,719 --> 00:43:19,289
the amount that needs to be shifted to

829
00:43:17,309 --> 00:43:21,409
bring the least significant bit to the

830
00:43:19,289 --> 00:43:24,559
least significant bit of this you in 32

831
00:43:21,409 --> 00:43:29,750
we convert it to a signed integer and

832
00:43:24,559 --> 00:43:33,360
then subtract the bias and that gives it

833
00:43:29,750 --> 00:43:36,300
to get the mantissa all we have to do is

834
00:43:33,360 --> 00:43:37,890
set the exponent to zero which means we

835
00:43:36,300 --> 00:43:41,039
really set it to the exponent bias

836
00:43:37,889 --> 00:43:44,989
because to represent two to the power of

837
00:43:41,039 --> 00:43:47,730
zero we add the exponent bias to that

838
00:43:44,989 --> 00:43:49,559
and so all we need to do is just force

839
00:43:47,730 --> 00:43:51,329
that field as if it was two to the power

840
00:43:49,559 --> 00:43:56,039
of zero and that is the representation

841
00:43:51,329 --> 00:43:59,009
of a mantissa so is that is that that I

842
00:43:56,039 --> 00:44:01,019
does everyone kind of understand that it

843
00:43:59,010 --> 00:44:03,650
makes perfect sense to me I said I can

844
00:44:01,019 --> 00:44:06,750
I'll kind of eye the chat to make sure

845
00:44:03,650 --> 00:44:15,079
yeah so if you have basically you have

846
00:44:06,750 --> 00:44:17,699
this e is fine this is what we do is we

847
00:44:15,079 --> 00:44:21,480
ask to find out what the exponent should

848
00:44:17,699 --> 00:44:26,460
be and then to return the mantissa all

849
00:44:21,480 --> 00:44:33,030
we do is we just set this to what is it

850
00:44:26,460 --> 00:44:38,309
it's it's this bit pen we just force it

851
00:44:33,030 --> 00:44:40,109
to be that yes

852
00:44:38,309 --> 00:44:43,109
we force it to be that and then that

853
00:44:40,108 --> 00:44:45,920
gives us another bird that is where the

854
00:44:43,108 --> 00:44:50,219
exponent has just been forced to be zero

855
00:44:45,920 --> 00:44:51,059
okay um for the subnormal case this is a

856
00:44:50,219 --> 00:44:54,239
little tricky

857
00:44:51,059 --> 00:44:55,920
now we could find the exponent by

858
00:44:54,239 --> 00:44:59,039
extracting the mantissa using like bits

859
00:44:55,920 --> 00:45:02,039
can reverse in people know what bits can

860
00:44:59,039 --> 00:45:03,869
use bits can reverse yeah some people

861
00:45:02,039 --> 00:45:07,469
may have forgotten but in the handmade

862
00:45:03,869 --> 00:45:11,068
intrinsics there is a bits can we used

863
00:45:07,469 --> 00:45:13,469
it actually for doing bitmap extraction

864
00:45:11,068 --> 00:45:17,188
because the way that they store the

865
00:45:13,469 --> 00:45:18,809
bitmap code in a Microsoft BMP format is

866
00:45:17,188 --> 00:45:20,548
to actually just put the mask in there

867
00:45:18,809 --> 00:45:22,469
so to figure out what you have to shift

868
00:45:20,548 --> 00:45:26,699
write it like the read out or whatever

869
00:45:22,469 --> 00:45:28,829
you have a bit scan yeah okay so what

870
00:45:26,699 --> 00:45:33,449
bits can reverse would do is if in the

871
00:45:28,829 --> 00:45:35,789
subnormal case we should be we're

872
00:45:33,449 --> 00:45:37,979
storing the exponent isn't 32 so we're

873
00:45:35,789 --> 00:45:40,469
not constrained by the size of the field

874
00:45:37,978 --> 00:45:42,179
and you could do that by extracting the

875
00:45:40,469 --> 00:45:44,548
mantissa and using bits can reverse to

876
00:45:42,179 --> 00:45:48,328
find the most significant one bit

877
00:45:44,548 --> 00:45:50,608
the mantissa but the way I'm actually

878
00:45:48,329 --> 00:45:52,079
doing it here is by multiple just by

879
00:45:50,608 --> 00:45:55,978
multiplying them by two to the power of

880
00:45:52,079 --> 00:45:57,420
25 and this is you can you can believe

881
00:45:55,978 --> 00:46:01,828
me that that number is to the power of

882
00:45:57,420 --> 00:46:04,019
25 calculate it yourself I've only

883
00:46:01,829 --> 00:46:09,298
memorized my powers of two up to about

884
00:46:04,018 --> 00:46:14,028
17 or so and and of course I know 32 and

885
00:46:09,298 --> 00:46:16,199
I know anyway

886
00:46:14,028 --> 00:46:18,389
most programmers have memorized their

887
00:46:16,199 --> 00:46:21,900
powers of two up to a fairly modest

888
00:46:18,389 --> 00:46:23,938
number around the 16 or 17 mark most of

889
00:46:21,900 --> 00:46:27,599
them have not memorized to the 25 but

890
00:46:23,938 --> 00:46:29,578
that is 2/3 for multiplying a number by

891
00:46:27,599 --> 00:46:31,890
2 to the power of 25 if it is a

892
00:46:29,579 --> 00:46:34,259
subnormal number is a lossless operation

893
00:46:31,889 --> 00:46:36,949
and this is another thing that will come

894
00:46:34,259 --> 00:46:40,438
up as we go on with this which is that

895
00:46:36,949 --> 00:46:43,199
some floating-point operations are

896
00:46:40,438 --> 00:46:46,228
lossless that they do not they don't

897
00:46:43,199 --> 00:46:49,289
involve any rounding the result is exact

898
00:46:46,228 --> 00:46:51,028
and multiplying by 2 to the power of 25

899
00:46:49,289 --> 00:46:51,780
is one of those operations because he's

900
00:46:51,028 --> 00:46:56,250
just many people

901
00:46:51,780 --> 00:46:59,940
the experiment and and the FPU doesn't

902
00:46:56,250 --> 00:47:02,460
optimize that case but it knows that if

903
00:46:59,940 --> 00:47:04,889
you multiply a mantissa by one you get a

904
00:47:02,460 --> 00:47:06,720
mantissa you get the same mantissa back

905
00:47:04,889 --> 00:47:07,559
it is in that sense it's a lossless

906
00:47:06,719 --> 00:47:10,379
operation

907
00:47:07,559 --> 00:47:12,029
so all we do here is we do pretty much

908
00:47:10,380 --> 00:47:14,099
exactly the same thing here except we

909
00:47:12,030 --> 00:47:15,900
multiply it by to the power of 25 first

910
00:47:14,099 --> 00:47:18,019
and then when we extract the exponent

911
00:47:15,900 --> 00:47:20,340
field we just subtract off the 25 and

912
00:47:18,019 --> 00:47:22,619
then we set the experiment of this

913
00:47:20,340 --> 00:47:25,910
scaled number to zero and that's how we

914
00:47:22,619 --> 00:47:30,079
deal with subnormal numbers in this case

915
00:47:25,909 --> 00:47:34,170
does that make sense to everyone I have

916
00:47:30,079 --> 00:47:37,949
one question yeah I have one question

917
00:47:34,170 --> 00:47:40,590
about that actually yes so assuming that

918
00:47:37,949 --> 00:47:43,019
a number is subnormal it means that it's

919
00:47:40,590 --> 00:47:46,769
binary pattern in the mantissa is

920
00:47:43,019 --> 00:47:49,590
implicit zero then the debt well binary

921
00:47:46,769 --> 00:47:52,800
point and then some number of zeroes and

922
00:47:49,590 --> 00:47:55,100
then weights then the actual 1 0 pattern

923
00:47:52,800 --> 00:47:57,750
that that we have for it right

924
00:47:55,099 --> 00:48:02,009
when you Joe you cut out there for just

925
00:47:57,750 --> 00:48:04,230
a second yes so if you've got a

926
00:48:02,010 --> 00:48:06,240
subnormal number you've got bits at the

927
00:48:04,230 --> 00:48:11,760
end you know you got the low order bit

928
00:48:06,239 --> 00:48:14,039
set some number of zeros at the top when

929
00:48:11,760 --> 00:48:16,710
you multiply by a power of two

930
00:48:14,039 --> 00:48:20,340
does the floating-point unit first shift

931
00:48:16,710 --> 00:48:22,740
those numbers up it's to actually move

932
00:48:20,340 --> 00:48:24,420
them into the normal range then start

933
00:48:22,739 --> 00:48:28,289
incrementing the exponent or what

934
00:48:24,420 --> 00:48:30,869
happens exactly probably what is going

935
00:48:28,289 --> 00:48:33,360
on and you have to look at the actual

936
00:48:30,869 --> 00:48:37,949
circuit to find out what's going on it

937
00:48:33,360 --> 00:48:39,870
probably does something very similar to

938
00:48:37,949 --> 00:48:43,969
what we're saying here it probably uses

939
00:48:39,869 --> 00:48:43,969
something like like a bit scam reverse

940
00:48:44,809 --> 00:48:53,340
so it probably operation done thing like

941
00:48:50,789 --> 00:48:58,139
this it basically turns a number into

942
00:48:53,340 --> 00:49:01,530
its normal form to do work on it in fact

943
00:48:58,139 --> 00:49:02,519
of course for those of you who are old

944
00:49:01,530 --> 00:49:05,540
enough to remember

945
00:49:02,519 --> 00:49:08,119
x87 oh yes

946
00:49:05,539 --> 00:49:11,420
this is yes this is this is pretty much

947
00:49:08,119 --> 00:49:13,429
exactly what happens x8 780 bit floating

948
00:49:11,420 --> 00:49:15,980
point numbers the Intel extended

949
00:49:13,429 --> 00:49:20,089
precision as its as it's known now hmm

950
00:49:15,980 --> 00:49:21,409
doesn't have sub normal numbers it

951
00:49:20,090 --> 00:49:24,890
doesn't have normal numbers i that the

952
00:49:21,409 --> 00:49:25,639
one is always explicit hmm in the

953
00:49:24,889 --> 00:49:29,210
significand

954
00:49:25,639 --> 00:49:35,779
of an 80 bit flow as I as I as I recall

955
00:49:29,210 --> 00:49:41,059
I think that is the case vague memory of

956
00:49:35,780 --> 00:49:42,800
that and probably in turn using some

957
00:49:41,059 --> 00:49:46,009
kind of extended precision like this to

958
00:49:42,800 --> 00:49:47,510
do all the intermediate calculations so

959
00:49:46,010 --> 00:49:54,800
it probably is turning into some kind of

960
00:49:47,510 --> 00:49:57,470
representation without a Miss it one so

961
00:49:54,800 --> 00:50:00,260
perhaps one thing it might do is when

962
00:49:57,469 --> 00:50:02,569
when a floating-point number comes in it

963
00:50:00,260 --> 00:50:05,360
will turn it back into a normal number

964
00:50:02,570 --> 00:50:08,180
right there then it will do the

965
00:50:05,360 --> 00:50:10,849
operation turn it back into a sub normal

966
00:50:08,179 --> 00:50:12,769
number if it had to if it doesn't have

967
00:50:10,849 --> 00:50:14,480
to because it got multiplied up then it

968
00:50:12,769 --> 00:50:17,329
just stays normal something like this

969
00:50:14,480 --> 00:50:19,429
perhaps exactly exactly or another thing

970
00:50:17,329 --> 00:50:21,110
it perhaps or another thing it could do

971
00:50:19,429 --> 00:50:23,419
it could have an internal representation

972
00:50:21,110 --> 00:50:27,829
that just includes another beating in

973
00:50:23,420 --> 00:50:33,650
the in the in the exponent field and

974
00:50:27,829 --> 00:50:34,909
that's in okay thank you I didn't see

975
00:50:33,650 --> 00:50:39,530
any questions in the chat by the way so

976
00:50:34,909 --> 00:50:42,139
you are good to go yeah so the converse

977
00:50:39,530 --> 00:50:45,320
of this operation is scaled by exponent

978
00:50:42,139 --> 00:50:48,079
which doesn't necessarily have to be a

979
00:50:45,320 --> 00:50:50,210
number between one and two will relax

980
00:50:48,079 --> 00:50:52,309
that and an exponent and then puts it

981
00:50:50,210 --> 00:50:54,050
back together

982
00:50:52,309 --> 00:50:57,799
there are a few more cases you have to

983
00:50:54,050 --> 00:51:01,640
deal with here because we could cause an

984
00:50:57,800 --> 00:51:04,850
overflow or underflow overflow being and

985
00:51:01,639 --> 00:51:06,829
we can represent and underflow if it's

986
00:51:04,849 --> 00:51:09,589
smaller than number we can represent and

987
00:51:06,829 --> 00:51:13,279
I just picked a number 500 which is kind

988
00:51:09,590 --> 00:51:18,140
of roughly it then if it's less than

989
00:51:13,280 --> 00:51:18,470
zero then it's a then we return a 0 with

990
00:51:18,139 --> 00:51:21,618
the

991
00:51:18,469 --> 00:51:24,469
same sign as X that is we preserve the

992
00:51:21,619 --> 00:51:26,480
sign bit so this this is true flow

993
00:51:24,469 --> 00:51:28,279
correctly according to the standard if

994
00:51:26,480 --> 00:51:31,190
you under flow a negative number you get

995
00:51:28,280 --> 00:51:33,170
negative 0 sorry handmade here our users

996
00:51:31,190 --> 00:51:33,980
you're going to get negative zeros if

997
00:51:33,170 --> 00:51:37,099
you try this

998
00:51:33,980 --> 00:51:39,320
but dart an underflow is probably a

999
00:51:37,099 --> 00:51:40,880
mistake anyway unless unless you don't

1000
00:51:39,320 --> 00:51:46,119
care that it's close enough to 0 and

1001
00:51:40,880 --> 00:51:46,119
again for an overflow we return infinity

1002
00:51:46,150 --> 00:51:51,039
so and then now this is all the code

1003
00:51:48,650 --> 00:51:55,130
that does the rest of it and this is

1004
00:51:51,039 --> 00:51:57,739
this is a bit nasty here so for now nor

1005
00:51:55,130 --> 00:52:00,858
infinity we just return X that's that's

1006
00:51:57,739 --> 00:52:02,689
fine and to handle the normal inside

1007
00:52:00,858 --> 00:52:04,909
normal cases basically what I did here

1008
00:52:02,690 --> 00:52:07,159
was exactly the same as above I used to

1009
00:52:04,909 --> 00:52:13,460
the power of 25 got to the 25 and to the

1010
00:52:07,159 --> 00:52:15,858
minus 25 so if we trying to scale a sub

1011
00:52:13,460 --> 00:52:20,389
normal number we turn it back into the

1012
00:52:15,858 --> 00:52:22,699
normal range this is this this again

1013
00:52:20,389 --> 00:52:29,509
turns it into a kind of a normal number

1014
00:52:22,699 --> 00:52:31,669
X field is what is X field that's yep so

1015
00:52:29,510 --> 00:52:36,080
we pretend that that we've got more bits

1016
00:52:31,670 --> 00:52:37,730
of precision in this is me in 32 for the

1017
00:52:36,079 --> 00:52:40,549
sub normal case we do that and subtract

1018
00:52:37,730 --> 00:52:42,530
off 25 so that's if we're scaling a sub

1019
00:52:40,550 --> 00:52:43,910
normal number but there's also the

1020
00:52:42,530 --> 00:52:48,410
possibility that when we scale by the

1021
00:52:43,909 --> 00:52:49,730
exponent we get a sub normal and for

1022
00:52:48,409 --> 00:52:52,368
that what we do is we just basically

1023
00:52:49,730 --> 00:52:53,838
check it against the maxixe burnham in

1024
00:52:52,369 --> 00:52:56,210
exponent it was greater than max

1025
00:52:53,838 --> 00:52:58,489
exponent we were to infinity if it's

1026
00:52:56,210 --> 00:53:00,679
less than the min exponent then this is

1027
00:52:58,489 --> 00:53:04,279
a sub normal or underflow case in which

1028
00:53:00,679 --> 00:53:06,199
case we may be like this by 25 we do

1029
00:53:04,280 --> 00:53:11,480
that so this is definitely under flow

1030
00:53:06,199 --> 00:53:16,819
here just return sine 0 otherwise we add

1031
00:53:11,480 --> 00:53:18,710
25 to the X field heck that was a number

1032
00:53:16,820 --> 00:53:22,338
and then return that value times 2 to

1033
00:53:18,710 --> 00:53:24,530
the minus 25 so it's a case of unpacking

1034
00:53:22,338 --> 00:53:27,320
subnormal number packing the subnormal

1035
00:53:24,530 --> 00:53:29,089
number we just manipulate the X field

1036
00:53:27,320 --> 00:53:31,750
and then multiply the value by to the

1037
00:53:29,088 --> 00:53:31,750
minus 25

1038
00:53:31,820 --> 00:53:43,309
you um but that's it's this just just an

1039
00:53:39,230 --> 00:53:44,809
illustration of the kind of to to deal

1040
00:53:43,309 --> 00:53:46,730
with the case between no one side not

1041
00:53:44,809 --> 00:53:49,150
long and for the normal case it's fairly

1042
00:53:46,730 --> 00:53:51,530
is you you know you just add the X field

1043
00:53:49,150 --> 00:53:55,400
exponent bias shift it and pack it all

1044
00:53:51,530 --> 00:54:00,080
back together so we can just use this as

1045
00:53:55,400 --> 00:54:02,840
a box now now this is a probably where a

1046
00:54:00,079 --> 00:54:06,259
food talk about the difference between

1047
00:54:02,840 --> 00:54:09,019
this and the C standard because you have

1048
00:54:06,260 --> 00:54:13,220
a look at the thing at the definition of

1049
00:54:09,019 --> 00:54:14,809
our X P it says it splits it interment

1050
00:54:13,219 --> 00:54:17,269
history parent such the absolute value

1051
00:54:14,809 --> 00:54:22,489
of M is greater than or equal to 0.5 and

1052
00:54:17,269 --> 00:54:27,710
less than 1.0 so the C standard doesn't

1053
00:54:22,489 --> 00:54:32,559
isn't talking point in textbooks do it

1054
00:54:27,710 --> 00:54:32,559
talks about a number between zero point

1055
00:54:34,900 --> 00:54:43,490
this I a it's probably too much time

1056
00:54:40,489 --> 00:54:47,949
actually trying to decide whether I

1057
00:54:43,489 --> 00:54:50,689
should follow the see that the sea

1058
00:54:47,949 --> 00:54:55,029
Convention on this or I should follow

1059
00:54:50,690 --> 00:54:57,079
the the the more usual floating point

1060
00:54:55,030 --> 00:55:00,740
thing on this and I decided to follow

1061
00:54:57,079 --> 00:55:05,389
the more useful starting point thing the

1062
00:55:00,739 --> 00:55:08,569
as a result what what the other thing

1063
00:55:05,389 --> 00:55:10,670
that this affects is it is effects sorry

1064
00:55:08,570 --> 00:55:12,860
it effects mean exponent and Max

1065
00:55:10,670 --> 00:55:14,599
exponent if you have a look at the value

1066
00:55:12,860 --> 00:55:19,059
of min exponent and Max exponent

1067
00:55:14,599 --> 00:55:21,949
according to your C standard library

1068
00:55:19,059 --> 00:55:26,949
these numbers are different by one I

1069
00:55:21,949 --> 00:55:30,379
think it's minus 127 to 126 or something

1070
00:55:26,949 --> 00:55:33,039
so that's that's the if you like the

1071
00:55:30,380 --> 00:55:35,690
flip side of using this convention I

1072
00:55:33,039 --> 00:55:37,699
don't know should I have used the CC

1073
00:55:35,690 --> 00:55:41,179
convention because Murphy will be using

1074
00:55:37,699 --> 00:55:44,929
I tend to not care at all what's in the

1075
00:55:41,179 --> 00:55:45,929
C specification and double that for the

1076
00:55:44,929 --> 00:55:49,469
C++

1077
00:55:45,929 --> 00:55:52,338
vacation just because I find that a lot

1078
00:55:49,469 --> 00:55:56,009
of times their decisions are usually

1079
00:55:52,338 --> 00:55:57,750
motivated by things that well in the C++

1080
00:55:56,010 --> 00:55:59,760
case they're just motivated by lunacy

1081
00:55:57,750 --> 00:56:01,469
but in the C case yes

1082
00:55:59,760 --> 00:56:03,480
they're probably they probably had a

1083
00:56:01,469 --> 00:56:05,068
reason for doing it but that reason is

1084
00:56:03,480 --> 00:56:06,630
probably not particularly applicable to

1085
00:56:05,068 --> 00:56:08,639
game programming necessarily and

1086
00:56:06,630 --> 00:56:11,608
probably had more to do with like some

1087
00:56:08,639 --> 00:56:13,799
case in scientific computing that was

1088
00:56:11,608 --> 00:56:15,630
legitimate but is not really what you

1089
00:56:13,800 --> 00:56:18,150
want in the case of performance oriented

1090
00:56:15,630 --> 00:56:20,400
code that typically you know flush

1091
00:56:18,150 --> 00:56:22,289
subnormal to zero is a typical thing for

1092
00:56:20,400 --> 00:56:24,000
a game to do it's probably not a typical

1093
00:56:22,289 --> 00:56:28,500
thing for us exactly the computation to

1094
00:56:24,000 --> 00:56:30,150
do exactly and and look to be fair right

1095
00:56:28,500 --> 00:56:32,909
the see this part of the C standard

1096
00:56:30,150 --> 00:56:36,838
probably predates the I Triple E 754

1097
00:56:32,909 --> 00:56:38,699
standard by ten years yes yes yes you

1098
00:56:36,838 --> 00:56:41,009
know it's it's because the first version

1099
00:56:38,699 --> 00:56:43,049
of the I Triple E standard was 1985 yeah

1100
00:56:41,010 --> 00:56:48,420
and and this probably is ten years

1101
00:56:43,050 --> 00:56:50,910
before that yes so yeah it's yeah so you

1102
00:56:48,420 --> 00:56:53,599
know it dates from the days when all of

1103
00:56:50,909 --> 00:56:56,838
the vendors had their had their own

1104
00:56:53,599 --> 00:56:58,980
different floating point standards and

1105
00:56:56,838 --> 00:57:02,308
and and they're all mutually

1106
00:56:58,980 --> 00:57:03,780
incompatible and quirky yes there's a

1107
00:57:02,309 --> 00:57:05,280
little there's a little quote here that

1108
00:57:03,780 --> 00:57:07,859
I'm actually going to put is Jenny

1109
00:57:05,280 --> 00:57:09,630
that's Wilkinson not Wilson I think it

1110
00:57:07,858 --> 00:57:12,358
was like a cheering award speech or

1111
00:57:09,630 --> 00:57:14,130
something it was like it was called like

1112
00:57:12,358 --> 00:57:15,989
confessions of a numeric analyst or

1113
00:57:14,130 --> 00:57:17,579
something like this well this is

1114
00:57:15,989 --> 00:57:21,989
basically a rant about the state of

1115
00:57:17,579 --> 00:57:24,900
computer or if metic in 1971 that you

1116
00:57:21,989 --> 00:57:26,489
know that one of the main virtues of an

1117
00:57:24,900 --> 00:57:27,838
electronic computer from the point of

1118
00:57:26,489 --> 00:57:30,838
view of the miracle analyst is its

1119
00:57:27,838 --> 00:57:34,289
ability to do arithmetic fast need the

1120
00:57:30,838 --> 00:57:36,449
year be sir bad so that's the state of

1121
00:57:34,289 --> 00:57:38,909
computer arithmetic at the time that the

1122
00:57:36,449 --> 00:57:40,818
C standard that C was invented I like

1123
00:57:38,909 --> 00:57:46,230
the fact that he may be said about it in

1124
00:57:40,818 --> 00:57:48,469
1971 if if he had anyway if he could see

1125
00:57:46,230 --> 00:57:53,429
it today I think he would probably just

1126
00:57:48,469 --> 00:57:55,909
die immediately of shock but Easter we

1127
00:57:53,429 --> 00:57:58,369
have a standard that's true

1128
00:57:55,909 --> 00:58:00,319
you know that the I Triple E standard is

1129
00:57:58,369 --> 00:58:01,489
at least predictable and there's

1130
00:58:00,320 --> 00:58:05,600
something to be said for that

1131
00:58:01,489 --> 00:58:11,119
I mean the the C standard doesn't even

1132
00:58:05,599 --> 00:58:13,039
depend on on these being binary one of

1133
00:58:11,119 --> 00:58:16,219
the things that that you'll find me is

1134
00:58:13,039 --> 00:58:17,750
right is the float radix and it'll be

1135
00:58:16,219 --> 00:58:21,169
different from a double radix at least

1136
00:58:17,750 --> 00:58:23,090
in theory and that is I mean you can

1137
00:58:21,170 --> 00:58:24,829
assume that it's two one because it's a

1138
00:58:23,090 --> 00:58:28,190
binary number on everything you care

1139
00:58:24,829 --> 00:58:31,420
about but even so right yes anyway

1140
00:58:28,190 --> 00:58:33,860
anyway all right now for that okay so

1141
00:58:31,420 --> 00:58:37,519
that's the that's the if you like the

1142
00:58:33,860 --> 00:58:43,579
the basic operations or at least the

1143
00:58:37,519 --> 00:58:45,650
ones they needed so far so I'm not this

1144
00:58:43,579 --> 00:58:48,380
is this is the right set of basic

1145
00:58:45,650 --> 00:58:51,559
operations but it's it's probably good

1146
00:58:48,380 --> 00:58:55,480
enough for what we're doing here sorry

1147
00:58:51,559 --> 00:59:00,710
let me walk you through division is

1148
00:58:55,480 --> 00:59:03,469
floating point division without doing

1149
00:59:00,710 --> 00:59:07,250
the slash operator that divides two

1150
00:59:03,469 --> 00:59:11,269
numbers anywhere and the reason why I

1151
00:59:07,250 --> 00:59:14,659
wanted to show people this is because

1152
00:59:11,269 --> 00:59:16,369
when you step inside like any debugger

1153
00:59:14,659 --> 00:59:18,109
you step inside your c-stand library's

1154
00:59:16,369 --> 00:59:21,079
implantation of sine or cosine or

1155
00:59:18,110 --> 00:59:22,430
something there's a lot of stuff in

1156
00:59:21,079 --> 00:59:27,170
there and it doesn't look like

1157
00:59:22,429 --> 00:59:29,539
calculation quite a lot of it and so the

1158
00:59:27,170 --> 00:59:33,110
reason why I wrote this out is to kind

1159
00:59:29,539 --> 00:59:34,909
of show you what all that stuff is now

1160
00:59:33,110 --> 00:59:37,789
I'm not going to go through that stuff

1161
00:59:34,909 --> 00:59:40,609
in detail all I'm going to do is show

1162
00:59:37,789 --> 00:59:43,039
you that it is there and how much of it

1163
00:59:40,610 --> 00:59:46,910
there is and then this will give you an

1164
00:59:43,039 --> 00:59:49,969
idea of then you may want to use the

1165
00:59:46,909 --> 00:59:52,819
standard library if you're not doing an

1166
00:59:49,969 --> 00:59:54,409
all-purpose computing the special

1167
00:59:52,820 --> 00:59:56,600
purpose computing like handmade hero

1168
00:59:54,409 --> 00:59:58,159
where you can assume some things about

1169
00:59:56,599 --> 01:00:01,699
the values that you're going to give to

1170
00:59:58,159 --> 01:00:03,769
your functions you know you can assume

1171
01:00:01,699 --> 01:00:05,149
that it's saying if you try and take

1172
01:00:03,769 --> 01:00:07,670
this you know if you try and take the

1173
01:00:05,150 --> 01:00:09,410
sine of ten thousand radians that's

1174
01:00:07,670 --> 01:00:12,590
probably a bug in hand right here

1175
01:00:09,409 --> 01:00:14,839
yes whereas the standard library has to

1176
01:00:12,590 --> 01:00:19,400
return a correct answer in that case for

1177
01:00:14,840 --> 01:00:21,200
some definition of correct and so it's

1178
01:00:19,400 --> 01:00:26,570
it's to deal with things like that and

1179
01:00:21,199 --> 01:00:28,159
to deal with negative 0 correctly it's

1180
01:00:26,570 --> 01:00:31,760
to deal with positive negative phineus

1181
01:00:28,159 --> 01:00:34,399
to deal with not a number you know if

1182
01:00:31,760 --> 01:00:37,130
you're if you've got a library function

1183
01:00:34,400 --> 01:00:38,599
that computes e to the X if you give

1184
01:00:37,130 --> 01:00:40,789
that negative infinity that actually

1185
01:00:38,599 --> 01:00:43,610
returns a reasonable and say return 0 e

1186
01:00:40,789 --> 01:00:46,789
to the negative infinity is 0 because

1187
01:00:43,610 --> 01:00:50,329
that's you know if your number overflows

1188
01:00:46,789 --> 01:00:54,349
in that direction imagine that it's just

1189
01:00:50,329 --> 01:00:56,090
a number that's less less than the

1190
01:00:54,349 --> 01:00:59,960
largest representable number in that

1191
01:00:56,090 --> 01:01:02,960
direction that's sensible answer so

1192
01:00:59,960 --> 01:01:05,059
anyway so let's look at the division so

1193
01:01:02,960 --> 01:01:06,829
this if you like is the finite number K

1194
01:01:05,059 --> 01:01:10,489
is the case where X is a finite number

1195
01:01:06,829 --> 01:01:12,529
and Y is a far which is really the case

1196
01:01:10,489 --> 01:01:15,889
that we're interesting so that's normal

1197
01:01:12,530 --> 01:01:18,590
and subnormal including 0 we do have to

1198
01:01:15,889 --> 01:01:20,420
deal with division by 0 that's that's

1199
01:01:18,590 --> 01:01:23,900
something we probably can't get away

1200
01:01:20,420 --> 01:01:26,360
with 0 divided by 0 is not a number

1201
01:01:23,900 --> 01:01:28,220
anything else divided by 0 is infinity

1202
01:01:26,360 --> 01:01:33,200
and it is an infinity of the same sign

1203
01:01:28,219 --> 01:01:38,149
as X so if X is a well or no actually no

1204
01:01:33,199 --> 01:01:42,559
it's the sine of X exclusive odd with

1205
01:01:38,150 --> 01:01:45,019
the sine of Y so if we take negative 100

1206
01:01:42,559 --> 01:01:48,049
and divide it by negative 0 we get

1207
01:01:45,019 --> 01:01:51,369
positive infinity this is this is laid

1208
01:01:48,050 --> 01:01:54,170
out in the spec let me let me show you

1209
01:01:51,369 --> 01:01:56,569
let me let me see if I can find this

1210
01:01:54,170 --> 01:01:58,460
here so the sine of the divide still

1211
01:01:56,570 --> 01:02:04,900
proceeds as if it were just a regular

1212
01:01:58,460 --> 01:02:14,570
number yes number part becomes infinity

1213
01:02:04,900 --> 01:02:17,570
yes shall be a an infinity correctly

1214
01:02:14,570 --> 01:02:19,190
signed here we go correctly signed

1215
01:02:17,570 --> 01:02:20,660
according to the operation the division

1216
01:02:19,190 --> 01:02:22,190
when the divisor is 0 and the dividend

1217
01:02:20,659 --> 01:02:23,210
is a finite nonzero number the sign of

1218
01:02:22,190 --> 01:02:25,639
the Infinity is the

1219
01:02:23,210 --> 01:02:27,019
exclusive or of the operand signs so

1220
01:02:25,639 --> 01:02:33,079
there you know got it

1221
01:02:27,019 --> 01:02:34,849
we follow this there let's go to that

1222
01:02:33,079 --> 01:02:36,259
section this section yeah there's the

1223
01:02:34,849 --> 01:02:39,680
thing that explains all the sign bit

1224
01:02:36,260 --> 01:02:41,150
yeah all right so that's so if you like

1225
01:02:39,679 --> 01:02:42,980
that's division by zero so that's an

1226
01:02:41,150 --> 01:02:45,619
exception case and imagine that there's

1227
01:02:42,980 --> 01:02:47,769
a little bit of code here this here is

1228
01:02:45,619 --> 01:02:50,000
the code that does division it is mostly

1229
01:02:47,769 --> 01:02:51,980
comments and I'll go through the

1230
01:02:50,000 --> 01:02:53,449
algorithm in a little bit cuz I think

1231
01:02:51,980 --> 01:02:54,829
that's a that's actually it's kind of an

1232
01:02:53,449 --> 01:02:56,509
interesting algorithm and and it

1233
01:02:54,829 --> 01:02:59,029
illustrates from other points that we're

1234
01:02:56,510 --> 01:03:02,869
talking about but what I want to show

1235
01:02:59,030 --> 01:03:04,760
you is this this down here is at least

1236
01:03:02,869 --> 01:03:08,358
as much code as this this stuff is the

1237
01:03:04,760 --> 01:03:10,310
stuff that does division this stuff down

1238
01:03:08,358 --> 01:03:13,279
here is the stuff does all of the I

1239
01:03:10,309 --> 01:03:15,799
Triple E compliance so this is the case

1240
01:03:13,280 --> 01:03:17,869
where either zero is not a where either

1241
01:03:15,800 --> 01:03:20,330
X is not a finite number or what a

1242
01:03:17,869 --> 01:03:22,730
finite number so we look at the category

1243
01:03:20,329 --> 01:03:24,079
of why something divided by zero that's

1244
01:03:22,730 --> 01:03:26,539
got to be either infinity divided by

1245
01:03:24,079 --> 01:03:27,980
zero and then divided by zero and so

1246
01:03:26,539 --> 01:03:29,989
those are the cases we have to do

1247
01:03:27,980 --> 01:03:33,108
different things in each case if we're

1248
01:03:29,989 --> 01:03:35,029
dividing by nan you're turnin n if we're

1249
01:03:33,108 --> 01:03:37,369
returning by infinity well a number

1250
01:03:35,030 --> 01:03:38,390
divided by infinity is zero that makes

1251
01:03:37,369 --> 01:03:41,000
sense

1252
01:03:38,389 --> 01:03:43,250
but we do have to worry about the sign I

1253
01:03:41,000 --> 01:03:46,250
think yes no that's it should be

1254
01:03:43,250 --> 01:03:48,650
negative is the is the yes that's where

1255
01:03:46,250 --> 01:03:49,789
we do the XOR of the two signs so we XOR

1256
01:03:48,650 --> 01:03:51,910
the true signs and do that quickly

1257
01:03:49,789 --> 01:03:54,759
return negative zero or positive zero

1258
01:03:51,909 --> 01:03:57,049
and the VAIO me infinitive and then

1259
01:03:54,760 --> 01:03:59,900
number divided by infinity number

1260
01:03:57,050 --> 01:04:02,269
divided by nan the point of that I

1261
01:03:59,900 --> 01:04:04,250
wanted it doesn't matter what all this

1262
01:04:02,269 --> 01:04:06,469
is I just looked at the spec and I think

1263
01:04:04,250 --> 01:04:08,869
I got her all right and and look to be

1264
01:04:06,469 --> 01:04:11,149
honest I'm because I didn't spend a

1265
01:04:08,869 --> 01:04:14,358
whole lot of time on this but the point

1266
01:04:11,150 --> 01:04:19,369
that I wanted I want to from in here is

1267
01:04:14,358 --> 01:04:22,819
that this is division it is really I

1268
01:04:19,369 --> 01:04:25,550
mean it's that line of code it's those

1269
01:04:22,820 --> 01:04:26,780
lines of code it's this which I'll

1270
01:04:25,550 --> 01:04:28,609
explain later because this is very

1271
01:04:26,780 --> 01:04:35,830
interesting and it's that so that is

1272
01:04:28,608 --> 01:04:35,829
division and this stuff down here is

1273
01:04:36,340 --> 01:04:43,430
all right so that stuff is division and

1274
01:04:38,780 --> 01:04:47,150
this stuff is compliance now this isn't

1275
01:04:43,429 --> 01:04:50,059
very much circuitry in an FPU but you

1276
01:04:47,150 --> 01:04:53,869
know a software library it's a lot of

1277
01:04:50,059 --> 01:04:57,049
code and it's just to get all of these

1278
01:04:53,869 --> 01:05:00,230
cases correct and if you have a look at

1279
01:04:57,050 --> 01:05:01,730
the standard that they often have lists

1280
01:05:00,230 --> 01:05:03,139
here like this is a 10/2 which we'll

1281
01:05:01,730 --> 01:05:06,880
come to in a moment here are all the

1282
01:05:03,139 --> 01:05:09,529
cases that I tend to has to cover that's

1283
01:05:06,880 --> 01:05:11,000
you know that's what it means to be

1284
01:05:09,530 --> 01:05:12,260
compliant with the standard is you need

1285
01:05:11,000 --> 01:05:16,010
to get all these cases correctly you

1286
01:05:12,260 --> 01:05:18,050
need to get a 10 to positive zero

1287
01:05:16,010 --> 01:05:19,370
negative 0 and a 10 to negative 0

1288
01:05:18,050 --> 01:05:23,240
negative 0 has to return different

1289
01:05:19,369 --> 01:05:27,380
values it's just the way the spec is

1290
01:05:23,239 --> 01:05:29,859
written and what can you know that's

1291
01:05:27,380 --> 01:05:32,720
that's what it means to be compliant and

1292
01:05:29,860 --> 01:05:34,340
your C standard library or your C++

1293
01:05:32,719 --> 01:05:36,859
standard library has to be compliant

1294
01:05:34,340 --> 01:05:38,960
otherwise it's not implementing the I

1295
01:05:36,860 --> 01:05:40,760
Triple E standard and that means it's

1296
01:05:38,960 --> 01:05:43,760
got to get all of these edge cases right

1297
01:05:40,760 --> 01:05:50,870
and that's that's really what I wanted

1298
01:05:43,760 --> 01:05:54,050
to show everyone with is is that I wrote

1299
01:05:50,869 --> 01:05:56,480
this so you don't have to so you won't

1300
01:05:54,050 --> 01:05:59,570
you unless you you get the job of

1301
01:05:56,480 --> 01:06:01,190
writing compilers standard library you

1302
01:05:59,570 --> 01:06:04,820
will not have to worry about any of this

1303
01:06:01,190 --> 01:06:08,269
because for kind of handmade hero kind

1304
01:06:04,820 --> 01:06:10,730
of code this is you know this is why

1305
01:06:08,269 --> 01:06:13,190
behind numerical analysts I'm not an

1306
01:06:10,730 --> 01:06:14,869
American host but this is kind of why we

1307
01:06:13,190 --> 01:06:16,970
hire them misty it is partly to get

1308
01:06:14,869 --> 01:06:20,630
these cases correct as well as to get

1309
01:06:16,969 --> 01:06:21,919
the normal case all right so I'm not

1310
01:06:20,630 --> 01:06:23,390
going to ask you there any questions

1311
01:06:21,920 --> 01:06:25,280
about this because I don't want any

1312
01:06:23,389 --> 01:06:28,279
questions about this let's talk about

1313
01:06:25,280 --> 01:06:32,600
the actual division okay

1314
01:06:28,280 --> 01:06:37,300
so to divide X by Y we do now I'm using

1315
01:06:32,599 --> 01:06:43,849
doubles and the reason is this is

1316
01:06:37,300 --> 01:06:46,640
actually the algorithm which is which is

1317
01:06:43,849 --> 01:06:48,139
this part here but that's that's I did

1318
01:06:46,639 --> 01:06:49,028
this so that I didn't have to do it the

1319
01:06:48,139 --> 01:06:53,259
way that real life

1320
01:06:49,028 --> 01:06:54,969
you use do it and how the reason why

1321
01:06:53,259 --> 01:06:56,619
women want to do this is so you can

1322
01:06:54,969 --> 01:06:59,068
actually this is a real algorithm this

1323
01:06:56,619 --> 01:07:01,059
is what your FPU does when you ask the

1324
01:06:59,068 --> 01:07:03,599
when you ask for one floating-point

1325
01:07:01,059 --> 01:07:06,179
number divided by another floating-point

1326
01:07:03,599 --> 01:07:09,519
so the first obvious case here is

1327
01:07:06,179 --> 01:07:15,989
extract exponent because once again if

1328
01:07:09,518 --> 01:07:24,488
you have M 1 M 1 times 2 to the he he 1

1329
01:07:15,989 --> 01:07:29,068
divided by M 2 times 2 and that equals

1330
01:07:24,489 --> 01:07:34,829
m1 divided by m2 times 2 to the power of

1331
01:07:29,068 --> 01:07:37,179
B 1 minus e 2 once again reduction we're

1332
01:07:34,829 --> 01:07:39,130
doing it so that now we only have to

1333
01:07:37,179 --> 01:07:41,139
deal with numbers in the range from 1 to

1334
01:07:39,130 --> 01:07:44,079
2 everything else is taken care of by

1335
01:07:41,139 --> 01:07:45,699
this exponent extraction so that's the

1336
01:07:44,079 --> 01:07:50,979
first step

1337
01:07:45,699 --> 01:07:54,338
here we go the result ok now what this

1338
01:07:50,978 --> 01:07:56,678
is and I will explain how we get these

1339
01:07:54,338 --> 01:08:03,989
in a minute this is an approximation to

1340
01:07:56,679 --> 01:08:07,418
one on why it's a polynomial this is

1341
01:08:03,989 --> 01:08:11,679
using Horner's rule so this is if you

1342
01:08:07,418 --> 01:08:20,880
like it's you know for some your one

1343
01:08:11,679 --> 01:08:20,880
times X this X plus T 3 times X etc etc

1344
01:08:21,270 --> 01:08:25,719
only goes up to be for anyway I could

1345
01:08:23,439 --> 01:08:30,308
have just included that but the way we

1346
01:08:25,719 --> 01:08:31,658
do it is by factoring out X in if you

1347
01:08:30,309 --> 01:08:33,909
like there's a fact there's a common

1348
01:08:31,658 --> 01:08:38,158
factor of X here so we just multiplied

1349
01:08:33,908 --> 01:08:38,158
this next time

1350
01:08:41,289 --> 01:08:49,310
and and then do the same there this is

1351
01:08:47,238 --> 01:08:55,250
the way we usually evaluate polynomials

1352
01:08:49,310 --> 01:09:00,670
because it's usually it causes the

1353
01:08:55,250 --> 01:09:05,449
fewest numeric problems it's not the and

1354
01:09:00,670 --> 01:09:07,969
one thing that people especially you

1355
01:09:05,449 --> 01:09:09,528
know being Triple A game programmers or

1356
01:09:07,969 --> 01:09:12,829
people who write the sine and cosine

1357
01:09:09,529 --> 01:09:14,450
library for console platforms which are

1358
01:09:12,829 --> 01:09:17,298
often different from the ones that you

1359
01:09:14,449 --> 01:09:18,769
see in mercy standard libraries they

1360
01:09:17,298 --> 01:09:24,859
don't like this because this is very

1361
01:09:18,770 --> 01:09:31,730
serial you've got the the result of like

1362
01:09:24,859 --> 01:09:32,900
you have to vet I shouldn't be do that

1363
01:09:31,729 --> 01:09:34,129
multiplication before you can do this

1364
01:09:32,899 --> 01:09:37,009
addition and so on

1365
01:09:34,130 --> 01:09:39,949
and so do the long chain of data

1366
01:09:37,009 --> 01:09:42,079
dependencies here and a lot of kind of

1367
01:09:39,949 --> 01:09:48,139
the big Triple A game programmers do not

1368
01:09:42,079 --> 01:09:50,318
like this there is a related method that

1369
01:09:48,140 --> 01:09:53,350
we may talk about if we have time

1370
01:09:50,319 --> 01:09:56,450
otherwise we might have to do this again

1371
01:09:53,350 --> 01:09:58,550
and we'll we'll talk about one way to

1372
01:09:56,449 --> 01:10:01,579
get around that serial that that being

1373
01:09:58,550 --> 01:10:02,869
serial calculation anyway so what this

1374
01:10:01,579 --> 01:10:04,430
is is these are these are the

1375
01:10:02,869 --> 01:10:06,319
coefficients of the polynomial and this

1376
01:10:04,430 --> 01:10:10,190
is a polynomial approximation to one on

1377
01:10:06,319 --> 01:10:12,289
Y in the range 1 to 2 these numbers look

1378
01:10:10,189 --> 01:10:15,019
magic they're not magic they're just

1379
01:10:12,289 --> 01:10:16,909
sufficiently advanced technology but it

1380
01:10:15,020 --> 01:10:24,520
gives about 11 bits of accuracy within

1381
01:10:16,909 --> 01:10:27,079
0.01 try it if you don't believe me I'll

1382
01:10:24,520 --> 01:10:29,000
hold on there I'll put it on the wiki or

1383
01:10:27,079 --> 01:10:31,699
something and and you can try it for

1384
01:10:29,000 --> 01:10:36,529
yourself but I will explain how we get

1385
01:10:31,699 --> 01:10:37,189
these numbers sir this 11 bits of

1386
01:10:36,529 --> 01:10:40,250
accuracy

1387
01:10:37,189 --> 01:10:46,879
I didn't pick that at random let me show

1388
01:10:40,250 --> 01:10:49,810
you how I picked that whoops okay let me

1389
01:10:46,880 --> 01:10:51,619
show you how I picked that this is a

1390
01:10:49,810 --> 01:10:52,500
document we've seen before

1391
01:10:51,619 --> 01:10:55,979
No

1392
01:10:52,500 --> 01:11:02,630
this one that one this is document we've

1393
01:10:55,979 --> 01:11:05,519
seen before which is the UM the Intel

1394
01:11:02,630 --> 01:11:07,109
software developer's manual I'm sure

1395
01:11:05,520 --> 01:11:09,570
that this has turned up on the stream

1396
01:11:07,109 --> 01:11:13,170
before I seem to remember it oh yes if

1397
01:11:09,569 --> 01:11:25,079
you search for reciprocal what you find

1398
01:11:13,170 --> 01:11:25,380
is there is an instruction here here we

1399
01:11:25,079 --> 01:11:30,329
go

1400
01:11:25,380 --> 01:11:34,500
an instruction called compute reciprocal

1401
01:11:30,329 --> 01:11:38,220
of scalar single precision flow which is

1402
01:11:34,500 --> 01:11:41,579
a slight light isn't what is is an

1403
01:11:38,220 --> 01:11:45,900
approximate reciprocal which is good to

1404
01:11:41,579 --> 01:11:48,210
around 1.5 times to the minus 12 so now

1405
01:11:45,899 --> 01:11:51,229
I did not pick this 11 bits at random

1406
01:11:48,210 --> 01:11:53,789
this is what this instruction gives and

1407
01:11:51,229 --> 01:11:55,289
what this actually does is what the FPU

1408
01:11:53,789 --> 01:12:01,890
is actually doing is it's actually used

1409
01:11:55,289 --> 01:12:03,960
a lookup table because you know modern

1410
01:12:01,890 --> 01:12:08,130
CPUs we can waste lots of transistors on

1411
01:12:03,960 --> 01:12:09,720
a ROM and so inside the FPU it doesn't

1412
01:12:08,130 --> 01:12:12,539
use a polynomial approximation like this

1413
01:12:09,720 --> 01:12:16,820
for the division operation it uses this

1414
01:12:12,539 --> 01:12:16,819
approximation that's based on the table

1415
01:12:16,939 --> 01:12:29,489
available until very kindly gave us a or

1416
01:12:26,970 --> 01:12:31,860
me where of which is it's the

1417
01:12:29,489 --> 01:12:34,469
approximate square root you may have to

1418
01:12:31,859 --> 01:12:38,969
back in 15 seconds there intel gave us

1419
01:12:34,470 --> 01:12:41,610
what it gave us basically an instruction

1420
01:12:38,970 --> 01:12:44,789
which accesses that lookup table ah okay

1421
01:12:41,609 --> 01:12:46,439
yes because it needs it anyway

1422
01:12:44,789 --> 01:12:48,600
sometimes you need a reciprocal to

1423
01:12:46,439 --> 01:12:52,529
eleven bits of precision computing a

1424
01:12:48,600 --> 01:12:53,550
lighting calculation even in high

1425
01:12:52,529 --> 01:12:55,739
definition

1426
01:12:53,550 --> 01:12:58,470
oh sorry oh it was a high dynamic range

1427
01:12:55,739 --> 01:13:03,300
then actually only about 12 bits I think

1428
01:12:58,470 --> 01:13:05,550
so I reciprocal it's less than 1.5 x to

1429
01:13:03,300 --> 01:13:08,640
the minus 12 might be good enough

1430
01:13:05,550 --> 01:13:12,600
so it is a handy instruction to have

1431
01:13:08,640 --> 01:13:16,680
around and same with reciprocal of

1432
01:13:12,600 --> 01:13:18,870
square root once again the the mere

1433
01:13:16,680 --> 01:13:20,190
existence of this instruction actually

1434
01:13:18,869 --> 01:13:22,439
gives you a clue to how it's being

1435
01:13:20,189 --> 01:13:25,289
implemented inside the fact that it

1436
01:13:22,439 --> 01:13:26,909
gives you an approximate reciprocal

1437
01:13:25,289 --> 01:13:31,140
square root instead of an approximate

1438
01:13:26,909 --> 01:13:34,609
square root over to what algorithm the

1439
01:13:31,140 --> 01:13:37,800
FPU is using to calculate square roots

1440
01:13:34,609 --> 01:13:41,489
I'm not gonna go into do happen to know

1441
01:13:37,800 --> 01:13:42,989
what it is this is also this is gold

1442
01:13:41,489 --> 01:13:46,429
from its division algorithm that's

1443
01:13:42,989 --> 01:13:49,979
called Schmidt's square root algorithm

1444
01:13:46,430 --> 01:13:54,690
and the one of the nice things about

1445
01:13:49,979 --> 01:13:58,139
this is that the inner loop of the

1446
01:13:54,689 --> 01:14:00,179
square root algorithm uses is three uses

1447
01:13:58,140 --> 01:14:02,039
of the same circuit so you only have to

1448
01:14:00,180 --> 01:14:04,440
invent one kind of circuit to implement

1449
01:14:02,039 --> 01:14:05,489
square root that's its key advantage

1450
01:14:04,439 --> 01:14:07,139
there

1451
01:14:05,489 --> 01:14:08,729
similarly here all we do is

1452
01:14:07,140 --> 01:14:10,950
multiplication as we will see I know

1453
01:14:08,729 --> 01:14:14,819
that that looks like a subtraction but

1454
01:14:10,949 --> 01:14:17,340
wait I will show you okay so what what

1455
01:14:14,819 --> 01:14:19,049
we have here is we have an a number so

1456
01:14:17,340 --> 01:14:21,869
we've we've now decided that where we've

1457
01:14:19,050 --> 01:14:25,230
got n divided by D numerator divided by

1458
01:14:21,869 --> 01:14:28,949
denominator where we know denominator is

1459
01:14:25,229 --> 01:14:31,229
in the range between 1 and 2 so we can

1460
01:14:28,949 --> 01:14:35,880
use this to get 11 bits of precision on

1461
01:14:31,229 --> 01:14:38,609
an approximation to 1 on D in this case

1462
01:14:35,880 --> 01:14:40,380
and so we can multiply both the

1463
01:14:38,609 --> 01:14:43,079
numerator and the denominator by this

1464
01:14:40,380 --> 01:14:44,940
number and what that will give us is it

1465
01:14:43,079 --> 01:14:49,619
will give us a new numerator we'll call

1466
01:14:44,939 --> 01:14:58,369
it n 0 divided by D 0 where D 0 is 1

1467
01:14:49,619 --> 01:15:03,359
plus all number 11 you know point 0 0 1

1468
01:14:58,369 --> 01:15:11,670
now if we multiply this number by 2

1469
01:15:03,359 --> 01:15:19,439
minus D 0 or 2 minus T 0 times T 0 is 1

1470
01:15:11,670 --> 01:15:23,850
+ x - -1 + e equals 1 + e times

1471
01:15:19,439 --> 01:15:25,649
- which equals 1 minus e squared we know

1472
01:15:23,850 --> 01:15:27,690
that E is a small number less than point

1473
01:15:25,649 --> 01:15:31,729
zero zero one good - a battle

1474
01:15:27,689 --> 01:15:35,339
probably good - about 11 bits so this is

1475
01:15:31,729 --> 01:15:38,479
within 20 so this is one in a thousand

1476
01:15:35,340 --> 01:15:41,460
this is within one and a million of one

1477
01:15:38,479 --> 01:15:42,779
if we do this twice and this is what

1478
01:15:41,460 --> 01:15:46,739
we're doing here we actually do that

1479
01:15:42,779 --> 01:15:48,000
twice we want both the numerator to -

1480
01:15:46,738 --> 01:15:49,589
the denominator from the previous step

1481
01:15:48,000 --> 01:15:53,969
we get a number that's close enough to

1482
01:15:49,590 --> 01:15:55,800
one that it's it's it's one and so

1483
01:15:53,969 --> 01:15:57,930
that's that's how that's how division

1484
01:15:55,800 --> 01:16:00,900
works is you you multiply both the

1485
01:15:57,930 --> 01:16:03,329
numerator and the denominator by 2 - the

1486
01:16:00,899 --> 01:16:05,009
denominator twice we don't actually have

1487
01:16:03,329 --> 01:16:06,300
to do the second one because we care

1488
01:16:05,010 --> 01:16:09,780
about nominator we know that's close to

1489
01:16:06,300 --> 01:16:11,969
one and so the numerator is is an X

1490
01:16:09,779 --> 01:16:15,059
divided by Y and then we just put the

1491
01:16:11,969 --> 01:16:17,430
exponent back set the sign bit so we did

1492
01:16:15,060 --> 01:16:19,860
some some sign hackery up there so that

1493
01:16:17,430 --> 01:16:23,869
so that we know it's between one we're

1494
01:16:19,859 --> 01:16:32,099
not negative one negative two and that

1495
01:16:23,869 --> 01:16:33,529
division works so straightforward or do

1496
01:16:32,100 --> 01:16:35,940
it or do I need to go over that again

1497
01:16:33,529 --> 01:16:37,889
that seems pretty straightforward

1498
01:16:35,939 --> 01:16:41,309
at least to me I will double check for

1499
01:16:37,890 --> 01:16:45,449
questions but again like I think yeah

1500
01:16:41,310 --> 01:16:46,500
the only part that is is it's needs

1501
01:16:45,448 --> 01:16:48,149
explanation its part you were going to

1502
01:16:46,500 --> 01:16:55,738
go into about how the magic constants

1503
01:16:48,149 --> 01:16:57,448
are picked the final thing that I'll

1504
01:16:55,738 --> 01:16:59,279
talk about and this is just really

1505
01:16:57,448 --> 01:17:03,349
really quick is this - - the denominator

1506
01:16:59,279 --> 01:17:10,710
the the FPU doesn't actually do that

1507
01:17:03,350 --> 01:17:12,630
what it does is it has a trick you can

1508
01:17:10,710 --> 01:17:14,279
do if you've got lots of extra precision

1509
01:17:12,630 --> 01:17:17,219
like you're using a double to calculate

1510
01:17:14,279 --> 01:17:19,139
floats you don't actually need to do 2 -

1511
01:17:17,219 --> 01:17:21,989
denominator and the reason is if you

1512
01:17:19,140 --> 01:17:23,820
have a number like let's let's suppose

1513
01:17:21,988 --> 01:17:27,750
that the nominators listens your let's

1514
01:17:23,819 --> 01:17:30,059
say zero point one one okay something

1515
01:17:27,750 --> 01:17:35,359
like that we want to minus that so

1516
01:17:30,060 --> 01:17:35,360
that's 2 - right that's 2 in binary

1517
01:17:35,390 --> 01:17:41,220
- that now I I just picked this number

1518
01:17:39,869 --> 01:17:55,800
at random but I can tell you exactly

1519
01:17:41,220 --> 01:17:57,480
what it is it's 1.2 I I didn't I didn't

1520
01:17:55,800 --> 01:17:58,949
have to I didn't have to think very hard

1521
01:17:57,479 --> 01:18:01,019
about that for reasons that won't come

1522
01:17:58,949 --> 01:18:04,949
clear at the moment what this number is

1523
01:18:01,020 --> 01:18:07,800
is this is this number with all its bits

1524
01:18:04,949 --> 01:18:11,909
flipped and then adding a 1 to the last

1525
01:18:07,800 --> 01:18:15,210
place so that's the two's complement to

1526
01:18:11,909 --> 01:18:16,529
- to - that number is the two's

1527
01:18:15,210 --> 01:18:18,930
complement of that number

1528
01:18:16,529 --> 01:18:24,899
this little last little add a 1

1529
01:18:18,930 --> 01:18:27,090
operation is so small that we don't care

1530
01:18:24,899 --> 01:18:28,549
we're using lots of extra bits of

1531
01:18:27,090 --> 01:18:31,710
precision to calculate this so all

1532
01:18:28,550 --> 01:18:41,010
rather than 2-0 what it actually uses is

1533
01:18:31,710 --> 01:18:46,109
not d0 so that we can't really do I mean

1534
01:18:41,010 --> 01:18:50,000
I guess we could but anyway anyway

1535
01:18:46,109 --> 01:18:50,000
they're division operations so it's

1536
01:18:51,289 --> 01:18:58,500
alright okay so that's so now we're not

1537
01:18:55,829 --> 01:18:59,510
gonna worry about all of this from now

1538
01:18:58,500 --> 01:19:01,529
on

1539
01:18:59,510 --> 01:19:05,909
we're just going to we're just going to

1540
01:19:01,529 --> 01:19:08,869
look at actually how we how with how we

1541
01:19:05,909 --> 01:19:10,920
do things like approximations like this

1542
01:19:08,869 --> 01:19:14,039
let me just make sure that that is in

1543
01:19:10,920 --> 01:19:16,800
fact the next thing on the agenda yes

1544
01:19:14,039 --> 01:19:18,810
okay so that is how to come up with

1545
01:19:16,800 --> 01:19:21,869
polynomial nations for things and this

1546
01:19:18,810 --> 01:19:24,150
is I think where we start getting out of

1547
01:19:21,869 --> 01:19:33,449
big bit hackery and start talking maths

1548
01:19:24,149 --> 01:19:35,909
so I'm on firm ground here so the one

1549
01:19:33,449 --> 01:19:38,220
you may be familiar in from high school

1550
01:19:35,909 --> 01:19:46,800
maths with Taylor series and Maclaurin

1551
01:19:38,220 --> 01:19:48,350
series where - Maclaurin series is that

1552
01:19:46,800 --> 01:19:56,039
f of X

1553
01:19:48,350 --> 01:19:59,850
F of 0 plus X F X times I'm a zero where

1554
01:19:56,039 --> 01:20:06,180
this is the derivative x squared on 2

1555
01:19:59,850 --> 01:20:07,500
factorial second derivative 0 and this

1556
01:20:06,180 --> 01:20:11,460
is a this is an equality this is

1557
01:20:07,500 --> 01:20:13,710
actually for if for any sufficiently

1558
01:20:11,460 --> 01:20:15,840
well behaved function X this is actually

1559
01:20:13,710 --> 01:20:17,130
equality this is equal if you add up all

1560
01:20:15,840 --> 01:20:20,520
the infinite number of terms on the

1561
01:20:17,130 --> 01:20:24,420
right you get a function that is f at

1562
01:20:20,520 --> 01:20:26,930
least around the point you can also do

1563
01:20:24,420 --> 01:20:32,430
it around a different point by saying X

1564
01:20:26,930 --> 01:20:37,619
minus X plus a yeah I think it's X plus

1565
01:20:32,430 --> 01:20:39,690
a is a or is it X minus a I can never

1566
01:20:37,619 --> 01:20:41,119
remember it doesn't matter anyway

1567
01:20:39,689 --> 01:20:43,859
because we're not going to use this

1568
01:20:41,119 --> 01:20:52,500
important point is that it's like minus

1569
01:20:43,859 --> 01:20:54,299
I so the thing is that this is actually

1570
01:20:52,500 --> 01:20:57,869
a good way to approximate a function at

1571
01:20:54,300 --> 01:20:59,369
point but we don't actually want to

1572
01:20:57,869 --> 01:21:02,309
approximate a function at a point we

1573
01:20:59,369 --> 01:21:03,809
want to approximate it over a range so

1574
01:21:02,310 --> 01:21:05,820
in this case for example we want our

1575
01:21:03,810 --> 01:21:09,390
approximation to one on Y that's good in

1576
01:21:05,819 --> 01:21:14,090
the range from 1 to 2 not at the point 1

1577
01:21:09,390 --> 01:21:17,220
point 5 what we really want is a a

1578
01:21:14,090 --> 01:21:20,039
polynomial that gives that's known as

1579
01:21:17,220 --> 01:21:24,650
the minimax polynomial that it minimizes

1580
01:21:20,039 --> 01:21:27,630
the maximum error over that range and

1581
01:21:24,649 --> 01:21:29,729
there's a mathematician named chebyshev

1582
01:21:27,630 --> 01:21:33,840
he's a 19th century russian

1583
01:21:29,729 --> 01:21:37,619
mathematician who is in this problem and

1584
01:21:33,840 --> 01:21:41,550
he came up with a very interesting

1585
01:21:37,619 --> 01:21:44,039
theory about this most of Witten is not

1586
01:21:41,550 --> 01:21:49,110
important but one of the things that he

1587
01:21:44,039 --> 01:21:51,149
showed is that the minimax polynomial

1588
01:21:49,109 --> 01:21:53,969
even exists has some very interesting

1589
01:21:51,149 --> 01:22:00,759
properties now I'm gonna use Mathematica

1590
01:21:53,970 --> 01:22:02,019
here because I have a copy so so

1591
01:22:00,760 --> 01:22:04,480
it's gonna be easier than trying to

1592
01:22:02,019 --> 01:22:10,449
write at maths and and also do some

1593
01:22:04,479 --> 01:22:18,189
these calculations sir let's no that's

1594
01:22:10,448 --> 01:22:21,609
not my Mathematica syntax is so rusty

1595
01:22:18,189 --> 01:22:24,328
I cannot remember anything it's been

1596
01:22:21,609 --> 01:22:26,828
like 10 years since I've you get it yeah

1597
01:22:24,328 --> 01:22:28,988
yeah exactly

1598
01:22:26,828 --> 01:22:34,750
all right what do we got here here we go

1599
01:22:28,988 --> 01:22:35,919
there we go this is this is why we have

1600
01:22:34,750 --> 01:22:48,279
Google so we don't have to remember

1601
01:22:35,920 --> 01:22:50,559
things right okay this is the this is

1602
01:22:48,279 --> 01:23:13,328
the verbose way of saying it that's

1603
01:22:50,559 --> 01:23:19,269
right now let me so in this case we plot

1604
01:23:13,328 --> 01:23:20,500
one on X all right we will have to we'll

1605
01:23:19,269 --> 01:23:25,449
have to deal with a small font I think

1606
01:23:20,500 --> 01:23:29,260
from X from one that's that's what the

1607
01:23:25,448 --> 01:23:30,518
function looks like in that room I think

1608
01:23:29,260 --> 01:23:33,969
there's that that's big enough I assume

1609
01:23:30,519 --> 01:23:36,099
yes sorry to anyone who's streaming from

1610
01:23:33,969 --> 01:23:39,819
Australia in load F as I often have to

1611
01:23:36,099 --> 01:23:42,369
do sorry about that

1612
01:23:39,819 --> 01:23:45,670
okay so so that's it that's what it

1613
01:23:42,368 --> 01:23:51,819
looks like in that range calculate the

1614
01:23:45,670 --> 01:23:57,219
minimax approximation have to remember

1615
01:23:51,819 --> 01:24:00,569
the in taxi this way from X 1/2 and an

1616
01:23:57,219 --> 01:24:03,429
order what did I say that's what ik

1617
01:24:00,569 --> 01:24:11,259
you're the reason for this zero is that

1618
01:24:03,429 --> 01:24:14,230
this will actually calculate rash can

1619
01:24:11,260 --> 01:24:15,640
you say that I think all tabbing

1620
01:24:14,229 --> 01:24:17,589
of course made it so that we couldn't

1621
01:24:15,640 --> 01:24:19,539
possibly hear the explanation

1622
01:24:17,590 --> 01:24:22,659
it only had business there's one or the

1623
01:24:19,539 --> 01:24:27,069
other so the reason for this is zero

1624
01:24:22,659 --> 01:24:29,559
here is that is that this will calculate

1625
01:24:27,069 --> 01:24:33,189
a rational approximations a polynomial

1626
01:24:29,560 --> 01:24:36,970
divided by polynomial sometimes that's a

1627
01:24:33,189 --> 01:24:43,599
better approximation even for an

1628
01:24:36,970 --> 01:24:48,220
American all but ever phone lists very

1629
01:24:43,600 --> 01:24:50,430
well approximated by use a rational

1630
01:24:48,220 --> 01:24:59,100
approximation and pay for the division

1631
01:24:50,430 --> 01:25:03,850
alright so we have this now there's our

1632
01:24:59,100 --> 01:25:07,180
there's our approximation there and what

1633
01:25:03,850 --> 01:25:09,400
you'll find is that that is exactly that

1634
01:25:07,180 --> 01:25:14,020
so that's how I got that I just used

1635
01:25:09,399 --> 01:25:16,869
Mathematica I will explain the algorithm

1636
01:25:14,020 --> 01:25:18,489
to do this in a minute but I just want

1637
01:25:16,869 --> 01:25:22,000
to show you because this isn't minimax

1638
01:25:18,488 --> 01:25:23,859
approximation I want to show you a very

1639
01:25:22,000 --> 01:25:25,779
interesting property of it which is that

1640
01:25:23,859 --> 01:25:27,880
now minimax approximation actually

1641
01:25:25,779 --> 01:25:30,130
approximate actually minimizes the

1642
01:25:27,880 --> 01:25:32,829
relative error rather than the absolute

1643
01:25:30,130 --> 01:25:37,690
error so I'm slightly cheating a little

1644
01:25:32,829 --> 01:25:43,359
bit here so but if we plot you relative

1645
01:25:37,689 --> 01:25:47,519
versus absolute error okay so so the

1646
01:25:43,359 --> 01:25:51,609
absolute error is if you like a minus B

1647
01:25:47,520 --> 01:25:56,170
whereas the relative error is a minus B

1648
01:25:51,609 --> 01:25:58,839
divided by the two today or B so if you

1649
01:25:56,170 --> 01:26:01,500
like it's the absolute error it might be

1650
01:25:58,840 --> 01:26:04,029
it's good to within point zero zero one

1651
01:26:01,500 --> 01:26:10,000
whereas an absolute error might be it's

1652
01:26:04,029 --> 01:26:13,420
good to within point ma the relative

1653
01:26:10,000 --> 01:26:15,609
error the reason why relative error is

1654
01:26:13,420 --> 01:26:17,829
sometimes a more useful thing is because

1655
01:26:15,609 --> 01:26:21,639
these floating point numbers really are

1656
01:26:17,829 --> 01:26:24,039
kind of relative yes that value epsilon

1657
01:26:21,640 --> 01:26:26,140
is the smallest number such that 1 plus

1658
01:26:24,039 --> 01:26:27,789
epsilon is not equal to Epsilon

1659
01:26:26,140 --> 01:26:29,710
similarly to

1660
01:26:27,789 --> 01:26:34,329
epsilon is the smallest number such that

1661
01:26:29,710 --> 01:26:37,029
2 plus 2 epsilon is not equal to 2 and

1662
01:26:34,329 --> 01:26:40,960
so the the relative errors in

1663
01:26:37,029 --> 01:26:43,809
floating-point arithmetic like that so

1664
01:26:40,960 --> 01:26:45,609
that's the that's so this is the

1665
01:26:43,810 --> 01:26:53,350
relative error between this polynomial

1666
01:26:45,609 --> 01:26:55,029
and one on X in the range 1 to what the

1667
01:26:53,350 --> 01:26:57,310
error function looks like as you can see

1668
01:26:55,029 --> 01:26:59,409
it's it's okay it's within point zero

1669
01:26:57,310 --> 01:27:00,940
zero three so maybe I was lying about it

1670
01:26:59,409 --> 01:27:08,050
being good to within point zero zero one

1671
01:27:00,939 --> 01:27:23,949
yeah I'll change it oh no what zero zero

1672
01:27:08,050 --> 01:27:28,750
zero so this is the difference a between

1673
01:27:23,949 --> 01:27:36,399
the approximation or approximate okay

1674
01:27:28,750 --> 01:27:39,189
and this oscillation theorem behind this

1675
01:27:36,399 --> 01:27:41,849
is the chebyshev's equal function

1676
01:27:39,189 --> 01:27:44,019
theorem well it's usually known as and

1677
01:27:41,850 --> 01:27:48,100
the point of it is that this function

1678
01:27:44,020 --> 01:27:51,130
oscillates around zero but also that the

1679
01:27:48,100 --> 01:27:53,200
peaks have the same magnitude that is it

1680
01:27:51,130 --> 01:27:55,329
hits this somewhere around it's it's

1681
01:27:53,199 --> 01:27:57,760
actually here it is it's point zero zero

1682
01:27:55,329 --> 01:27:59,529
zero two nine seven three five four

1683
01:27:57,760 --> 01:28:01,329
that's the actual number that it's

1684
01:27:59,529 --> 01:28:02,920
calculated there that it hits that

1685
01:28:01,329 --> 01:28:04,390
number there then negative that number

1686
01:28:02,920 --> 01:28:06,550
then that number then negative that

1687
01:28:04,390 --> 01:28:08,289
number then then that number there

1688
01:28:06,550 --> 01:28:12,070
negative that number and certainly

1689
01:28:08,289 --> 01:28:16,510
errors same magnitude and they alternate

1690
01:28:12,069 --> 01:28:17,739
in sign and this is this is a really

1691
01:28:16,510 --> 01:28:19,030
interesting property it kind of makes

1692
01:28:17,739 --> 01:28:20,409
sense when you think about it if one of

1693
01:28:19,029 --> 01:28:23,079
these Peaks was a little higher or a

1694
01:28:20,409 --> 01:28:25,029
little lower that would probably mean we

1695
01:28:23,079 --> 01:28:27,729
haven't quite optimized it correctly

1696
01:28:25,029 --> 01:28:30,659
mm-hmm but this is this this it's this

1697
01:28:27,729 --> 01:28:30,659
equius elation

1698
01:28:33,210 --> 01:28:40,630
property that actually it turns out

1699
01:28:37,420 --> 01:28:41,649
helps us to find the minimax polynomial

1700
01:28:40,630 --> 01:28:43,600
because instead of trying

1701
01:28:41,649 --> 01:28:45,250
find the minimax polynomial what we do

1702
01:28:43,600 --> 01:28:48,160
is we try and look for an error function

1703
01:28:45,250 --> 01:28:52,689
that looks like this now just as a

1704
01:28:48,159 --> 01:28:54,519
little aside the the named chebyshev may

1705
01:28:52,689 --> 01:28:58,319
be familiar to some people you may have

1706
01:28:54,520 --> 01:29:01,510
heard of chebyshev polynomials chebyshev

1707
01:28:58,319 --> 01:29:06,369
approximation and so forth he worked a

1708
01:29:01,510 --> 01:29:08,230
lot on this one of the things that's

1709
01:29:06,369 --> 01:29:11,470
gonna come up in a minute is what I'm

1710
01:29:08,229 --> 01:29:13,269
gonna call the chebyshev nodes and I'm

1711
01:29:11,470 --> 01:29:14,949
just gonna briefly explain what what

1712
01:29:13,270 --> 01:29:16,450
that is the other because there's

1713
01:29:14,949 --> 01:29:18,609
another little feature of this that's

1714
01:29:16,449 --> 01:29:22,050
that he's not part of the equity

1715
01:29:18,609 --> 01:29:25,689
oscillation theorem but it is kind of

1716
01:29:22,050 --> 01:29:29,380
important and that's that the places

1717
01:29:25,689 --> 01:29:32,079
where this crosses the zero axis across

1718
01:29:29,380 --> 01:29:36,039
across this axis they get closer

1719
01:29:32,079 --> 01:29:40,750
together the further towards the ends of

1720
01:29:36,039 --> 01:29:42,850
the interval you see so these two roots

1721
01:29:40,750 --> 01:29:46,500
the places where it crosses the the

1722
01:29:42,850 --> 01:29:50,890
x-axis are closer together than nerves

1723
01:29:46,500 --> 01:29:55,630
so if you and this extends further so if

1724
01:29:50,890 --> 01:30:00,789
I come up with a degree 15 approximation

1725
01:29:55,630 --> 01:30:01,989
no working precision - there we go 100

1726
01:30:00,789 --> 01:30:04,720
digits there we go

1727
01:30:01,989 --> 01:30:07,659
so there we go are this in order 15

1728
01:30:04,720 --> 01:30:12,550
polynomial that's that's it's good

1729
01:30:07,659 --> 01:30:16,779
hundred hundred decimal places and if I

1730
01:30:12,550 --> 01:30:20,190
say P to X I'm probably not using

1731
01:30:16,779 --> 01:30:25,000
mathematical will here and now if I plot

1732
01:30:20,189 --> 01:30:30,929
the difference there between that and p2

1733
01:30:25,000 --> 01:30:33,640
and maybe that was not a good example

1734
01:30:30,930 --> 01:30:38,500
let's let's use something you can say

1735
01:30:33,640 --> 01:30:42,400
I'm very well prepared for this let's

1736
01:30:38,500 --> 01:30:44,470
come up with a twin order seven people

1737
01:30:42,399 --> 01:30:50,139
have to work through things on the

1738
01:30:44,470 --> 01:30:52,690
stream so absolutely okay so this

1739
01:30:50,140 --> 01:30:55,360
approximation is good 1.5 times 10 minus

1740
01:30:52,689 --> 01:31:01,000
6 awesome and now

1741
01:30:55,359 --> 01:31:02,229
will flop that there and we'll see okay

1742
01:31:01,000 --> 01:31:03,939
so there you go

1743
01:31:02,229 --> 01:31:05,888
so once again you can see the distance

1744
01:31:03,939 --> 01:31:06,969
between these two routes here is larger

1745
01:31:05,889 --> 01:31:08,710
than distance between these which is

1746
01:31:06,969 --> 01:31:12,569
lives in distance he owns larger than

1747
01:31:08,710 --> 01:31:15,550
the difference here but this crosses the

1748
01:31:12,569 --> 01:31:18,789
the axis and also of course the distance

1749
01:31:15,550 --> 01:31:21,699
between these Peaks it gets smaller as

1750
01:31:18,789 --> 01:31:22,319
you as you get to all the ones of the

1751
01:31:21,698 --> 01:31:31,089
range

1752
01:31:22,319 --> 01:31:33,250
now if explained they are artists that

1753
01:31:31,090 --> 01:31:35,440
he came up with they're helping his

1754
01:31:33,250 --> 01:31:37,029
approximation Theory make sure there's

1755
01:31:35,439 --> 01:31:40,359
something a lunatic so this is this is

1756
01:31:37,029 --> 01:31:41,979
this is the area curve between a

1757
01:31:40,359 --> 01:31:43,539
function that's a polynomial and the

1758
01:31:41,979 --> 01:31:45,579
function that's that's not a polynomial

1759
01:31:43,539 --> 01:31:50,380
one on X is not a polynomial of finite

1760
01:31:45,579 --> 01:31:53,039
degree I'm going to plot it says the

1761
01:31:50,380 --> 01:31:56,560
average of functions built-in magically

1762
01:31:53,039 --> 01:31:58,719
so that's one two three four five six

1763
01:31:56,560 --> 01:32:06,989
seven eight so I'm going to use the

1764
01:31:58,719 --> 01:32:11,618
whoops the the order eight polynomial X

1765
01:32:06,988 --> 01:32:13,388
in the range 1 to 1 but this is a polyp

1766
01:32:11,618 --> 01:32:15,579
this is a set of polynomials that

1767
01:32:13,389 --> 01:32:20,310
chebyshev came up with they have nothing

1768
01:32:15,579 --> 01:32:29,559
to do with one on X whatsoever this is

1769
01:32:20,310 --> 01:32:31,090
the polynomial go back about 15 seconds

1770
01:32:29,560 --> 01:32:33,489
there I missed that last part it was

1771
01:32:31,090 --> 01:32:35,050
show up an out so this is a set of

1772
01:32:33,488 --> 01:32:36,368
polynomials that he came up with there's

1773
01:32:35,050 --> 01:32:40,210
one for every order so this is the

1774
01:32:36,368 --> 01:32:43,929
eighth degree polynomial I'll see how

1775
01:32:40,210 --> 01:32:45,189
they defined there there's one it's the

1776
01:32:43,929 --> 01:32:50,319
first one that see auto zero polynomial

1777
01:32:45,189 --> 01:32:58,000
second one is X so that's if you like t

1778
01:32:50,319 --> 01:33:08,479
0x that's one of X is 1 then T n plus 1

1779
01:32:58,000 --> 01:33:13,550
of X is 2 T in minus P of n minus 1 know

1780
01:33:08,479 --> 01:33:19,859
but these are how to find they are also

1781
01:33:13,550 --> 01:33:22,260
equals a cause in cause X doesn't look

1782
01:33:19,859 --> 01:33:28,139
like a polynomial trust me at the

1783
01:33:22,260 --> 01:33:30,150
polynomial at Z this is I'm bringing

1784
01:33:28,139 --> 01:33:32,069
this up so that you so that this art

1785
01:33:30,149 --> 01:33:34,069
cause doesn't seem like it doesn't seem

1786
01:33:32,069 --> 01:33:37,139
like med come up to in the middle and

1787
01:33:34,069 --> 01:33:39,238
these polynomials as it turns out tend

1788
01:33:37,139 --> 01:33:42,059
to approximate these error curves very

1789
01:33:39,238 --> 01:33:43,379
well this is in the range negative one

1790
01:33:42,059 --> 01:33:44,969
to one that's just standard range

1791
01:33:43,380 --> 01:33:49,828
whereas this in the range 1 to 2 which

1792
01:33:44,969 --> 01:33:52,859
is the range we care about and so we can

1793
01:33:49,828 --> 01:33:55,439
start looking for an error function of

1794
01:33:52,859 --> 01:33:57,868
this kind by starting with the

1795
01:33:55,439 --> 01:34:00,888
polynomial that looks like this and

1796
01:33:57,868 --> 01:34:04,710
that's that is kind of that get assessed

1797
01:34:00,889 --> 01:34:09,150
looking but the way that works is an

1798
01:34:04,710 --> 01:34:13,889
algorithm school and the idea is I

1799
01:34:09,149 --> 01:34:15,750
missed the name rim is right I kicked it

1800
01:34:13,889 --> 01:34:16,909
is rim is it's not rim if or something

1801
01:34:15,750 --> 01:34:20,158
like that

1802
01:34:16,908 --> 01:34:23,509
now let me let me just see if I can I've

1803
01:34:20,158 --> 01:34:27,179
got the example here yeah here we go so

1804
01:34:23,510 --> 01:34:30,150
if we have an initial guess as to where

1805
01:34:27,179 --> 01:34:34,230
these peaks are right let's say they're

1806
01:34:30,149 --> 01:34:38,149
at X 0 X 1 X 2 X 3 blah blah blah blah

1807
01:34:34,229 --> 01:34:42,479
blah and what we can do and set up a

1808
01:34:38,149 --> 01:34:44,578
linear system a system equations that

1809
01:34:42,479 --> 01:34:56,009
looks like this

1810
01:34:44,578 --> 01:35:06,269
here we go so a 0 plus a 1 X 0 plus a 2

1811
01:34:56,010 --> 01:35:07,530
a 2 X Y plus e equals f of X 0 F is the

1812
01:35:06,270 --> 01:35:09,960
function that we're trying to find an

1813
01:35:07,529 --> 01:35:13,259
approximation to so what we're saying is

1814
01:35:09,960 --> 01:35:17,770
that this polynomial let's let looking

1815
01:35:13,260 --> 01:35:20,619
for cubic plus a 3

1816
01:35:17,770 --> 01:35:23,440
but the error between this polynomial

1817
01:35:20,619 --> 01:35:26,559
and the actual function is equal to e at

1818
01:35:23,439 --> 01:35:28,419
that point right that we've found this

1819
01:35:26,560 --> 01:35:30,250
point we'll say we've found this point

1820
01:35:28,420 --> 01:35:33,789
x0 which is this point where the extrema

1821
01:35:30,250 --> 01:35:37,000
and and the air are between sorry this

1822
01:35:33,789 --> 01:35:40,149
one here they look so similar that the

1823
01:35:37,000 --> 01:35:41,619
distant that the difference between the

1824
01:35:40,149 --> 01:35:43,059
function that we're trying to calculate

1825
01:35:41,619 --> 01:35:46,239
and the polynomial approximation is

1826
01:35:43,060 --> 01:35:54,250
exactly equal to and then at the next

1827
01:35:46,239 --> 01:35:56,800
point x1 the error is minus because it's

1828
01:35:54,250 --> 01:35:59,829
the same magnitude and the opposite sign

1829
01:35:56,800 --> 01:36:04,360
and then we just keep going for the next

1830
01:35:59,829 --> 01:36:06,609
one and that's plus e because the next

1831
01:36:04,359 --> 01:36:12,549
one is the next sign and I'm sorry they

1832
01:36:06,609 --> 01:36:14,589
say x1 x2 and then this gives us a

1833
01:36:12,550 --> 01:36:16,690
linear system because we know what these

1834
01:36:14,590 --> 01:36:19,869
are these x0 x1 x2 are our initial

1835
01:36:16,689 --> 01:36:23,409
guesses right and then we this gives and

1836
01:36:19,869 --> 01:36:26,470
this is this is this is so x0 we know x0

1837
01:36:23,409 --> 01:36:29,349
x0 to the three is just a number so this

1838
01:36:26,470 --> 01:36:33,400
gives us an a system of linear equations

1839
01:36:29,350 --> 01:36:38,620
that are unknown in a 0 a 1 a 2 a 3 and

1840
01:36:33,399 --> 01:36:40,929
E and if we solve that system we get an

1841
01:36:38,619 --> 01:36:42,539
approximate polynomial because these are

1842
01:36:40,930 --> 01:36:46,840
the coefficients of the polynomial and

1843
01:36:42,539 --> 01:36:49,269
an estimate of the error and if you have

1844
01:36:46,840 --> 01:36:52,000
a look at minimax polynomial here one of

1845
01:36:49,270 --> 01:36:54,460
the things that it does is this what the

1846
01:36:52,000 --> 01:36:55,800
outputs are I'll give you a smaller one

1847
01:36:54,460 --> 01:36:58,060
yeah

1848
01:36:55,800 --> 01:37:02,070
these are the points where it thought

1849
01:36:58,060 --> 01:37:07,300
that the extrema were these points here

1850
01:37:02,069 --> 01:37:10,029
here's the polynomial and he is e so

1851
01:37:07,300 --> 01:37:11,739
this matter is giving you your Z and

1852
01:37:10,029 --> 01:37:14,619
it's giving you the the points where the

1853
01:37:11,739 --> 01:37:15,969
extrema are notice what one of them is

1854
01:37:14,619 --> 01:37:18,399
one and one of them is two they are

1855
01:37:15,970 --> 01:37:21,460
typically the ends of the range extrema

1856
01:37:18,399 --> 01:37:23,500
points it's giving you the polynomial

1857
01:37:21,460 --> 01:37:26,770
and it's also giving you the error

1858
01:37:23,500 --> 01:37:28,390
because that is the maximum error no it

1859
01:37:26,770 --> 01:37:31,090
gives you the polynomial it also gives

1860
01:37:28,390 --> 01:37:34,360
you the the

1861
01:37:31,090 --> 01:37:37,750
in the approximation so once you've done

1862
01:37:34,359 --> 01:37:40,329
that that gives you a polynomial then

1863
01:37:37,750 --> 01:37:42,729
what you can do is you can say okay

1864
01:37:40,329 --> 01:37:45,069
let's assume that that is the minimax

1865
01:37:42,729 --> 01:37:47,229
polynomial and we'll find the extrema

1866
01:37:45,069 --> 01:37:50,799
points so we'll we'll actually subtract

1867
01:37:47,229 --> 01:37:53,979
that polynomial from from F and find

1868
01:37:50,800 --> 01:37:55,869
point that differs the most and then use

1869
01:37:53,979 --> 01:37:57,909
that as a next approximation to go

1870
01:37:55,869 --> 01:38:02,439
through the loop again and solve the

1871
01:37:57,909 --> 01:38:05,739
system again and for behaved functions

1872
01:38:02,439 --> 01:38:06,849
this gives you the minimax polynomial if

1873
01:38:05,739 --> 01:38:10,659
you iterate enough times

1874
01:38:06,850 --> 01:38:12,250
now this is a very tricky e a very

1875
01:38:10,659 --> 01:38:14,710
tricky thing to get your head around I

1876
01:38:12,250 --> 01:38:24,220
think should we stop here and get some

1877
01:38:14,710 --> 01:38:29,770
questions on this I think so my question

1878
01:38:24,220 --> 01:38:33,100
is just starting with your initial

1879
01:38:29,770 --> 01:38:35,230
guesses I have seen that sort of thing

1880
01:38:33,100 --> 01:38:37,000
before obviously where you know it's

1881
01:38:35,229 --> 01:38:38,739
like okay so you try to make some Ischl

1882
01:38:37,000 --> 01:38:41,529
guesses and if it's an algorithm that's

1883
01:38:38,739 --> 01:38:43,569
about convergence then typically you

1884
01:38:41,529 --> 01:38:45,099
know there's ways of trying to do good

1885
01:38:43,569 --> 01:38:47,380
initial guesses and stuff like this but

1886
01:38:45,100 --> 01:38:49,750
so that part is not sure is a sort of a

1887
01:38:47,380 --> 01:38:52,840
separate issue but once you start this

1888
01:38:49,750 --> 01:38:56,710
process I so I put the initial guesses

1889
01:38:52,840 --> 01:39:01,869
in for my my locations of the extremum

1890
01:38:56,710 --> 01:39:04,390
so that's x0 x1 x2 correct okay you

1891
01:39:01,869 --> 01:39:06,220
timed out it you lagged out at just the

1892
01:39:04,390 --> 01:39:08,050
wrong point but you need to repeat that

1893
01:39:06,220 --> 01:39:10,750
question I'm sorry so my initial guesses

1894
01:39:08,050 --> 01:39:15,000
are the limit are the are the zero

1895
01:39:10,750 --> 01:39:18,399
crossings x0 x1 x2 are zero crossings

1896
01:39:15,000 --> 01:39:22,479
yes but no it's actually for extremum

1897
01:39:18,399 --> 01:39:24,819
okay it's exist yeah but but yeah but

1898
01:39:22,479 --> 01:39:26,439
let me let me okay so that does require

1899
01:39:24,819 --> 01:39:28,090
that that does require a little

1900
01:39:26,439 --> 01:39:30,099
explanation okay device shortened so

1901
01:39:28,090 --> 01:39:31,539
that's the that's the eighth order

1902
01:39:30,100 --> 01:39:32,710
chebyshev polynomial let me show you

1903
01:39:31,539 --> 01:39:37,840
what the ninth order polynomial looks

1904
01:39:32,710 --> 01:39:40,750
like places the place where this crosses

1905
01:39:37,840 --> 01:39:42,760
the zero axis is the extremum of this

1906
01:39:40,750 --> 01:39:44,920
polynomial and the place where this

1907
01:39:42,760 --> 01:39:47,619
process the x axis is the next

1908
01:39:44,920 --> 01:39:50,920
extremely spicy and it's it's really not

1909
01:39:47,619 --> 01:39:52,869
obvious here yeah but if you have one

1910
01:39:50,920 --> 01:39:57,130
nice property of these polynomials

1911
01:39:52,869 --> 01:40:00,340
chebyshev define and theory and it

1912
01:39:57,130 --> 01:40:02,380
actually does quite well to just not

1913
01:40:00,340 --> 01:40:04,300
bother with this iterative thing and

1914
01:40:02,380 --> 01:40:06,100
just trying to proximate with a backrub

1915
01:40:04,300 --> 01:40:10,029
chebyshev polynomials added together and

1916
01:40:06,100 --> 01:40:11,650
that actually a lot of older numerical

1917
01:40:10,029 --> 01:40:14,050
analysis textbooks just tell you to do

1918
01:40:11,649 --> 01:40:16,569
that okay and then they tell you okay

1919
01:40:14,050 --> 01:40:21,060
now let's just add the next order of

1920
01:40:16,569 --> 01:40:21,059
oxidation and then but a property with

1921
01:40:21,119 --> 01:40:33,010
operation this this link is awful I'm so

1922
01:40:30,520 --> 01:40:38,890
surprised at how tough it is to talk to

1923
01:40:33,010 --> 01:40:40,020
Australia I'm sorry it's perilously

1924
01:40:38,890 --> 01:40:43,480
different hemisphere

1925
01:40:40,020 --> 01:40:45,010
I could rant about this at length that

1926
01:40:43,479 --> 01:40:48,099
you probably wouldn't he immersed of it

1927
01:40:45,010 --> 01:40:50,409
so let's not well also the thing is

1928
01:40:48,100 --> 01:40:53,469
ridiculous that Google's like I'd ever

1929
01:40:50,409 --> 01:40:55,539
understand why chat programs don't just

1930
01:40:53,469 --> 01:40:58,210
buffer up what you say and then send it

1931
01:40:55,539 --> 01:41:00,100
losslessly with error correction like I

1932
01:40:58,210 --> 01:41:02,409
can wait to hear what you have to say

1933
01:41:00,100 --> 01:41:05,380
yeah if I could hear it correctly but

1934
01:41:02,409 --> 01:41:06,969
instead they prioritize real game which

1935
01:41:05,380 --> 01:41:09,730
I don't care about that

1936
01:41:06,969 --> 01:41:11,260
you know exactly exactly I guess the

1937
01:41:09,729 --> 01:41:13,238
video conferencing or something like

1938
01:41:11,260 --> 01:41:14,920
that it makes even so what would what is

1939
01:41:13,238 --> 01:41:17,319
it where it's not worth it if I can't

1940
01:41:14,920 --> 01:41:20,590
understand you right it's you failed at

1941
01:41:17,319 --> 01:41:23,259
the primary task in service of some

1942
01:41:20,590 --> 01:41:24,850
secondary thing okay I'd like to point

1943
01:41:23,260 --> 01:41:26,800
out by the way that this is home

1944
01:41:24,850 --> 01:41:30,160
internet we're talking about here when

1945
01:41:26,800 --> 01:41:31,239
I'm actually at work I work at a

1946
01:41:30,159 --> 01:41:33,279
university in the University of

1947
01:41:31,238 --> 01:41:35,500
Melbourne the internet there is fabulous

1948
01:41:33,279 --> 01:41:38,139
okay because it's designed for you know

1949
01:41:35,500 --> 01:41:40,060
I been with research and so this is why

1950
01:41:38,140 --> 01:41:41,800
I this is why you never see me stream

1951
01:41:40,060 --> 01:41:43,660
this is why my streams have been

1952
01:41:41,800 --> 01:41:47,050
historically silent for those who

1953
01:41:43,659 --> 01:41:50,829
remember the few times I stream is

1954
01:41:47,050 --> 01:41:52,539
because it's just not worth it so okay

1955
01:41:50,829 --> 01:41:53,590
let me ask my other question now that

1956
01:41:52,539 --> 01:41:55,000
because I think want to get that

1957
01:41:53,590 --> 01:41:58,270
clarified because I was wasn't sure

1958
01:41:55,000 --> 01:42:01,689
which one it was I so my other question

1959
01:41:58,270 --> 01:42:04,810
for the iteration I'm not sure I quite

1960
01:42:01,689 --> 01:42:10,889
understand so yes you're saying that you

1961
01:42:04,810 --> 01:42:14,470
switch so once I do one initial guess I

1962
01:42:10,890 --> 01:42:22,000
linearly solve for a and then I plug the

1963
01:42:14,470 --> 01:42:24,970
A's back in as my new X's no no I didn't

1964
01:42:22,000 --> 01:42:27,579
get okay all right what you need to do

1965
01:42:24,970 --> 01:42:30,730
then is you need to find the real points

1966
01:42:27,579 --> 01:42:32,590
where this polynomial get okay so so

1967
01:42:30,729 --> 01:42:38,079
you've done that if you've done one

1968
01:42:32,590 --> 01:42:41,260
iteration you've now got this yes you've

1969
01:42:38,079 --> 01:42:42,720
now got you've now got this he of X

1970
01:42:41,260 --> 01:42:46,270
you've now got this polynomial

1971
01:42:42,720 --> 01:42:50,500
approximation to F yes but of course

1972
01:42:46,270 --> 01:42:51,880
it's not it's not it's not equal to even

1973
01:42:50,500 --> 01:42:53,800
if it's an approximation it's not equal

1974
01:42:51,880 --> 01:42:57,819
to so there's some error function X

1975
01:42:53,800 --> 01:42:59,560
equals P of X minus f of X right where

1976
01:42:57,819 --> 01:43:01,869
this is again it's a real function not a

1977
01:42:59,560 --> 01:43:05,110
polynomial this is your polynomial what

1978
01:43:01,869 --> 01:43:10,329
you now do is you search along is you

1979
01:43:05,109 --> 01:43:13,319
search this function experiment now that

1980
01:43:10,329 --> 01:43:17,649
requires typically some kind of search

1981
01:43:13,319 --> 01:43:20,699
on F the easiest way to do it is to find

1982
01:43:17,649 --> 01:43:23,799
the places where it crosses the the

1983
01:43:20,699 --> 01:43:25,569
x-axis again because it's just the roots

1984
01:43:23,800 --> 01:43:27,640
of this function you know you can use

1985
01:43:25,569 --> 01:43:30,460
like newton raphson okay method or

1986
01:43:27,640 --> 01:43:32,470
something to find the zeros and then

1987
01:43:30,460 --> 01:43:37,480
between those zeros you're going to find

1988
01:43:32,470 --> 01:43:38,980
a maximum or a minimum yes okay okay if

1989
01:43:37,479 --> 01:43:41,349
it's well-behaved you can do it by

1990
01:43:38,979 --> 01:43:43,179
fitting pull a network by fitting

1991
01:43:41,350 --> 01:43:44,950
parabolas there's a really nice

1992
01:43:43,180 --> 01:43:50,560
algorithm which I'm going to introduce

1993
01:43:44,949 --> 01:43:55,359
everyone to now which is called golden

1994
01:43:50,560 --> 01:43:58,330
section search which is a very high

1995
01:43:55,359 --> 01:44:03,609
precision high-quality one and lots of

1996
01:43:58,329 --> 01:44:05,739
people do this for when they do videos

1997
01:44:03,609 --> 01:44:07,899
explaining it but golden section

1998
01:44:05,739 --> 01:44:10,359
searches and as a technique for finding

1999
01:44:07,899 --> 01:44:11,949
the minimum or maximum of a strictly

2000
01:44:10,359 --> 01:44:13,359
unimodal function so

2001
01:44:11,949 --> 01:44:17,199
this error function is going to be

2002
01:44:13,359 --> 01:44:19,569
unimodal it's going to be you know it's

2003
01:44:17,199 --> 01:44:22,779
gonna be like shaped like a loop like

2004
01:44:19,569 --> 01:44:24,729
this or loop like this between two roots

2005
01:44:22,779 --> 01:44:26,920
of the function so it is unimodal in

2006
01:44:24,729 --> 01:44:29,109
that right and so you can use golden

2007
01:44:26,920 --> 01:44:30,699
section search if you want to do

2008
01:44:29,109 --> 01:44:32,259
something really really principle look

2009
01:44:30,699 --> 01:44:35,039
there's even code in Python there if you

2010
01:44:32,260 --> 01:44:37,570
want to code in Python there we go okay

2011
01:44:35,039 --> 01:44:39,729
so they are golden section search is is

2012
01:44:37,569 --> 01:44:42,250
is a good way of doing that or you can

2013
01:44:39,729 --> 01:44:44,349
use the other way you can do it is by

2014
01:44:42,250 --> 01:44:47,050
fitting parabolas right you can fit a

2015
01:44:44,350 --> 01:44:49,720
parabola to this function find the

2016
01:44:47,050 --> 01:44:51,369
extremum and then say okay use that as a

2017
01:44:49,720 --> 01:44:57,400
refinement to fit another parabola I'm

2018
01:44:51,369 --> 01:44:59,680
not gonna okay section search is a

2019
01:44:57,399 --> 01:45:02,349
really nice function to know about okay

2020
01:44:59,680 --> 01:45:12,490
quite a lot especially if you've got

2021
01:45:02,350 --> 01:45:14,920
like a weird golden section search all

2022
01:45:12,489 --> 01:45:16,929
right so that's the that's the that's

2023
01:45:14,920 --> 01:45:18,520
the basic idea it's their image remiz

2024
01:45:16,930 --> 01:45:21,150
exchange algorithm and by iterating on

2025
01:45:18,520 --> 01:45:26,220
enough times you do get a minimax

2026
01:45:21,149 --> 01:45:26,219
approximation and that is pretty much

2027
01:45:27,090 --> 01:45:33,430
but as I said I just used Mathematica

2028
01:45:29,560 --> 01:45:35,080
because I'm lazy I have actually Remos

2029
01:45:33,430 --> 01:45:39,850
exchange algorithm I've got the source

2030
01:45:35,079 --> 01:45:42,579
code sitting around using the new multi

2031
01:45:39,850 --> 01:45:44,200
precision library and reason why I'm not

2032
01:45:42,579 --> 01:45:46,059
showing you the source code is the new

2033
01:45:44,199 --> 01:45:53,800
new multi version library is pretty

2034
01:45:46,060 --> 01:45:54,970
horrible actually no yeah it's it's ugly

2035
01:45:53,800 --> 01:45:55,840
work but someone's got to do with it

2036
01:45:54,970 --> 01:45:58,570
okay

2037
01:45:55,840 --> 01:46:00,250
I wouldn't deploy I wouldn't deploy card

2038
01:45:58,569 --> 01:46:04,989
using it but to calculate constants that

2039
01:46:00,250 --> 01:46:06,880
you deploy I I'm very happy okay all

2040
01:46:04,989 --> 01:46:09,899
right all right

2041
01:46:06,880 --> 01:46:12,369
so that's that's an army all

2042
01:46:09,899 --> 01:46:13,629
approximation there's a lot more that

2043
01:46:12,369 --> 01:46:15,939
can be said about that and we're not

2044
01:46:13,630 --> 01:46:17,470
going to say it here the important thing

2045
01:46:15,939 --> 01:46:20,649
that I wanted to show you is that

2046
01:46:17,470 --> 01:46:23,900
there's number come from yes there's the

2047
01:46:20,649 --> 01:46:32,179
advanced technology all right

2048
01:46:23,899 --> 01:46:36,679
so that's that and now it's signing yeah

2049
01:46:32,180 --> 01:46:38,470
so we're actually Wiggy to the actual

2050
01:46:36,680 --> 01:46:40,490
replacing the functions that we've got

2051
01:46:38,470 --> 01:46:55,280
now let me just have a look at my notes

2052
01:46:40,489 --> 01:46:57,050
just track Lee what we want to do the

2053
01:46:55,279 --> 01:47:02,689
sine function you know you know what's

2054
01:46:57,050 --> 01:47:15,010
and you know it looks like sine X in the

2055
01:47:02,689 --> 01:47:17,750
rain it looks like it repeats itself and

2056
01:47:15,010 --> 01:47:19,730
the the the period of the repeat the

2057
01:47:17,750 --> 01:47:23,960
distance between that and that when you

2058
01:47:19,729 --> 01:47:25,789
get another copy of it is 2 so what we

2059
01:47:23,960 --> 01:47:29,000
kind of want to do is we want to divide

2060
01:47:25,789 --> 01:47:32,600
by 2 pi and take the remainder and that

2061
01:47:29,000 --> 01:47:34,640
reduces the range from there to there so

2062
01:47:32,600 --> 01:47:35,150
we only have to deal with numbers in

2063
01:47:34,640 --> 01:47:38,600
that range

2064
01:47:35,149 --> 01:47:40,489
or maybe from negative PI to PI be a

2065
01:47:38,600 --> 01:47:41,990
useful range as well and in fact

2066
01:47:40,489 --> 01:47:48,109
negative PI to PI is the one that I

2067
01:47:41,989 --> 01:47:50,979
chose the trouble is that pi is is a

2068
01:47:48,109 --> 01:47:54,829
transit little number it does not exact

2069
01:47:50,979 --> 01:47:59,839
operation it so it doesn't represent in

2070
01:47:54,829 --> 01:48:01,309
in floating-point but conceptually what

2071
01:47:59,840 --> 01:48:04,550
we want to do with this we want to take

2072
01:48:01,310 --> 01:48:07,820
X multiply it by 1 over 2 pi whatever

2073
01:48:04,550 --> 01:48:10,880
number that is truncate it to an integer

2074
01:48:07,819 --> 01:48:12,979
and that gives us like the X divided by

2075
01:48:10,880 --> 01:48:16,789
2 pi and then we want to take the

2076
01:48:12,979 --> 01:48:18,859
remainder we take X subtract n times 2

2077
01:48:16,789 --> 01:48:28,489
pi and that gives us a number in the

2078
01:48:18,859 --> 01:48:34,399
range 0 to PI so that's that's that's

2079
01:48:28,489 --> 01:48:35,750
alright but the problem is that there

2080
01:48:34,399 --> 01:48:37,250
are a couple problems one of them is

2081
01:48:35,750 --> 01:48:41,550
wave X is large

2082
01:48:37,250 --> 01:48:44,939
now obviously a real implementation of

2083
01:48:41,550 --> 01:48:48,270
sine and cosine near one for one for the

2084
01:48:44,939 --> 01:48:49,799
this Israel but one for the C standard

2085
01:48:48,270 --> 01:48:52,860
library will have to deal with numbers

2086
01:48:49,800 --> 01:48:59,670
up to the range 2 to the 1 e6 or

2087
01:48:52,859 --> 01:49:01,139
whatever it is and we can deal with X

2088
01:48:59,670 --> 01:49:05,760
you know in a much more limited range

2089
01:49:01,140 --> 01:49:07,560
than that we've got this this truncation

2090
01:49:05,760 --> 01:49:09,030
to an integer which is actually more

2091
01:49:07,560 --> 01:49:11,969
expensive operation than you might think

2092
01:49:09,029 --> 01:49:13,289
and there are ways around that but we've

2093
01:49:11,969 --> 01:49:16,350
also got the problem that where you've

2094
01:49:13,289 --> 01:49:16,800
got X where X is close to a multiple of

2095
01:49:16,350 --> 01:49:19,230
2 pi

2096
01:49:16,800 --> 01:49:21,690
let's say it's it's somewhere around 2

2097
01:49:19,229 --> 01:49:27,809
pi what you're subtracting is two

2098
01:49:21,689 --> 01:49:34,678
numbers that are almost and this traffic

2099
01:49:27,810 --> 01:49:37,350
cancellation which that's but it's not

2100
01:49:34,679 --> 01:49:39,960
gonna actually it's not actually it's

2101
01:49:37,350 --> 01:49:42,719
it's what happens is that you've got two

2102
01:49:39,960 --> 01:49:44,520
mantises that are almost equal and when

2103
01:49:42,719 --> 01:49:56,429
you subtract them what you end up with

2104
01:49:44,520 --> 01:49:58,590
is the way around and to get off to get

2105
01:49:56,429 --> 01:50:03,630
a number that that's that's higher

2106
01:49:58,590 --> 01:50:09,869
precision is we can actually split 2 pi

2107
01:50:03,630 --> 01:50:12,980
up now again I have x again I've got

2108
01:50:09,869 --> 01:50:18,109
some constants here let me tell you

2109
01:50:12,979 --> 01:50:18,109
there is two constants oops

2110
01:50:18,560 --> 01:50:28,550
Sixpoint so 2 pi is what's 2 pi 2 times

2111
01:50:25,409 --> 01:50:28,550
pi whoops

2112
01:50:30,260 --> 01:50:41,869
expresses okay let me just in that

2113
01:50:40,170 --> 01:50:44,989
[Music]

2114
01:50:41,868 --> 01:50:48,618
there we go okay so at six point two

2115
01:50:44,988 --> 01:50:51,018
eight three one nine ish what I've done

2116
01:50:48,618 --> 01:50:52,698
is I split this up into two numbers one

2117
01:50:51,019 --> 01:50:58,269
of those six point two three eight two

2118
01:50:52,698 --> 01:51:02,238
and the other one is negative that is

2119
01:50:58,269 --> 01:51:07,369
this this number is not special this is

2120
01:51:02,238 --> 01:51:10,458
two pi minus this number but this number

2121
01:51:07,368 --> 01:51:12,799
is special because it it looks like it's

2122
01:51:10,458 --> 01:51:15,288
close to two pi but it has this

2123
01:51:12,800 --> 01:51:17,269
representation in its bit pattern and

2124
01:51:15,288 --> 01:51:21,319
the thing that I want you to see is all

2125
01:51:17,269 --> 01:51:28,519
these euros at the end I do we designed

2126
01:51:21,319 --> 01:51:30,978
this constant has twelve zeros at the

2127
01:51:28,519 --> 01:51:32,929
end of the significant field and that

2128
01:51:30,979 --> 01:51:40,849
means that we can multiply this by a

2129
01:51:32,929 --> 01:51:45,019
number to jar up to 320 it's a power of

2130
01:51:40,849 --> 01:51:47,869
two multiplied this missed that last

2131
01:51:45,019 --> 01:51:53,590
part thanks to the internet we can

2132
01:51:47,868 --> 01:51:56,208
multiply this by a number by two 1024

2133
01:51:53,590 --> 01:51:58,458
because 1,024 is just manipulating

2134
01:51:56,208 --> 01:52:01,729
exponent anything lower than that we've

2135
01:51:58,458 --> 01:52:05,090
got these boo and to work with any

2136
01:52:01,729 --> 01:52:07,399
number up to 1000 any integer up to 1024

2137
01:52:05,090 --> 01:52:12,078
this multiplication gives an exact

2138
01:52:07,399 --> 01:52:15,590
result okay okay so okay so you can

2139
01:52:12,078 --> 01:52:17,359
multiply this number by 999 and the

2140
01:52:15,590 --> 01:52:20,059
number that you get is exact you could

2141
01:52:17,359 --> 01:52:24,828
write it by 100 and 999 again and you'll

2142
01:52:20,059 --> 01:52:31,939
get exactly this number okay okay this

2143
01:52:24,828 --> 01:52:38,018
number is 2pi minus k1 and it's and this

2144
01:52:31,939 --> 01:52:44,269
gives you what this is under 12 yeah

2145
01:52:38,019 --> 01:52:46,878
this is 23 bits of precision on the on

2146
01:52:44,269 --> 01:52:49,070
the on the number two pi okay which is

2147
01:52:46,878 --> 01:52:52,519
more than one small serving point number

2148
01:52:49,069 --> 01:52:54,229
yeah single precision okay and then what

2149
01:52:52,519 --> 01:53:01,239
we do is we just do

2150
01:52:54,229 --> 01:53:09,979
roost x equals x minus n times K 1 minus

2151
01:53:01,238 --> 01:53:14,209
n times and that gives you X reduced

2152
01:53:09,979 --> 01:53:18,709
into this range 0 to PI or whatever it

2153
01:53:14,210 --> 01:53:22,460
is to to a higher precision then you

2154
01:53:18,710 --> 01:53:26,329
would get bison by 2 pi at the cost of

2155
01:53:22,460 --> 01:53:28,880
another multiply in a subtract and we

2156
01:53:26,329 --> 01:53:30,399
are going to find and using a divide at

2157
01:53:28,880 --> 01:53:33,109
some point or something

2158
01:53:30,399 --> 01:53:34,339
we are not going to use it ok so what

2159
01:53:33,109 --> 01:53:42,619
we're doing here is we're multiplying it

2160
01:53:34,340 --> 01:53:45,680
by 1 over 2 pi moles or something you'll

2161
01:53:42,619 --> 01:53:48,529
you'll see multiplication divisions are

2162
01:53:45,680 --> 01:53:49,610
slower but of course we saw the division

2163
01:53:48,529 --> 01:53:54,769
algorithm it uses a lot of

2164
01:53:49,609 --> 01:53:57,460
multiplications yes so so you shouldn't

2165
01:53:54,770 --> 01:53:59,810
you shouldn't run away from divisions

2166
01:53:57,460 --> 01:54:02,600
screaming but if we can do it without

2167
01:53:59,810 --> 01:54:04,640
divisions a little better ok ok now

2168
01:54:02,600 --> 01:54:08,180
here's the next thing which is how we

2169
01:54:04,640 --> 01:54:12,829
actually find in because first thing is

2170
01:54:08,180 --> 01:54:15,860
I've got this number which is one point

2171
01:54:12,829 --> 01:54:16,550
five two via Knight Epsilon this is a

2172
01:54:15,859 --> 01:54:18,710
large number

2173
01:54:16,550 --> 01:54:22,400
Ramar are 32 epsilon is a small number

2174
01:54:18,710 --> 01:54:25,359
it's 10 to the minus an or something so

2175
01:54:22,399 --> 01:54:27,710
1 point 5 divided by that is a large

2176
01:54:25,359 --> 01:54:31,130
this is an exact number of course this

2177
01:54:27,710 --> 01:54:33,470
is to the minus 23 so this is 1.5 times

2178
01:54:31,130 --> 01:54:36,109
2 to the power of 23 so it's a

2179
01:54:33,470 --> 01:54:38,890
reasonably big number but it's a number

2180
01:54:36,109 --> 01:54:42,829
that has this really interesting feature

2181
01:54:38,890 --> 01:54:45,260
that if you take a number like x times 1

2182
01:54:42,829 --> 01:54:47,539
over 2 pi add that number and then

2183
01:54:45,260 --> 01:54:50,750
subtract that number it has the effect

2184
01:54:47,539 --> 01:54:54,079
of rounding acts rounding this value to

2185
01:54:50,750 --> 01:54:56,810
an integer as long as this addition and

2186
01:54:54,079 --> 01:54:58,609
subtraction fit so this will only worked

2187
01:54:56,810 --> 01:55:03,610
for X in a certain range but you know

2188
01:54:58,609 --> 01:55:07,939
where we're saying this this work up

2189
01:55:03,609 --> 01:55:10,399
doesn't as it

2190
01:55:07,939 --> 01:55:11,839
C standard library implantation has to

2191
01:55:10,399 --> 01:55:14,239
look over the whole range of numbers and

2192
01:55:11,840 --> 01:55:16,640
so special case this a lot but up to a

2193
01:55:14,239 --> 01:55:19,159
thousand is probably good enough it's

2194
01:55:16,640 --> 01:55:21,590
probably not good enough for the the

2195
01:55:19,159 --> 01:55:23,359
audio thing you did really really early

2196
01:55:21,590 --> 01:55:27,230
on that same wave right right right

2197
01:55:23,359 --> 01:55:31,689
probably not going to use it because it

2198
01:55:27,229 --> 01:55:37,669
runs too long enough it's real earnest

2199
01:55:31,689 --> 01:55:41,679
but but yeah so don't do that but four

2200
01:55:37,670 --> 01:55:46,480
rotations really a thousand radians is

2201
01:55:41,680 --> 01:55:46,480
it's it's like three hundred rotations

2202
01:55:48,520 --> 01:55:54,950
you should not be out in not for games

2203
01:55:50,810 --> 01:55:59,270
no yeah okay and so this has the effect

2204
01:55:54,949 --> 01:56:01,819
of of but using the floating-point unit

2205
01:55:59,270 --> 01:56:03,350
to round this number to an integer but

2206
01:56:01,819 --> 01:56:04,729
it's an edit an integer that's

2207
01:56:03,350 --> 01:56:08,450
represented as a floating point number

2208
01:56:04,729 --> 01:56:11,179
yes and so that's and so that's how we

2209
01:56:08,449 --> 01:56:12,859
do it now the actual current is a little

2210
01:56:11,180 --> 01:56:14,990
bit more complicated than that so let's

2211
01:56:12,859 --> 01:56:21,139
let's actually have a look at the

2212
01:56:14,989 --> 01:56:22,849
implementation wait I keep I keep

2213
01:56:21,140 --> 01:56:25,150
opening new editors every time I need

2214
01:56:22,850 --> 01:56:25,150
something

2215
01:56:37,960 --> 01:56:44,109
I alt tabbed so I'm going to be quiet

2216
01:56:40,779 --> 01:56:46,238
for a second some people on the stream

2217
01:56:44,109 --> 01:56:48,519
were asking if you could turn the video

2218
01:56:46,238 --> 01:56:49,750
bitrate down but I don't know if that's

2219
01:56:48,520 --> 01:56:51,450
actually possible anymore than it

2220
01:56:49,750 --> 01:56:59,079
already is

2221
01:56:51,449 --> 01:57:02,139
yeah sorry I can't okay so this is the

2222
01:56:59,079 --> 01:57:03,609
actual code in the the sine cosine table

2223
01:57:02,140 --> 01:57:06,670
version that I implemented so this said

2224
01:57:03,609 --> 01:57:08,738
the the signatures it takes an X a

2225
01:57:06,670 --> 01:57:10,690
pointer to a sine X and a pointer to a

2226
01:57:08,738 --> 01:57:13,419
closed set cosine X and it stores sine

2227
01:57:10,689 --> 01:57:15,879
cosine in there so here's that round two

2228
01:57:13,420 --> 01:57:17,710
integer here's the range reduction which

2229
01:57:15,880 --> 01:57:21,279
I've actually used three constants for

2230
01:57:17,710 --> 01:57:22,960
and I will explain that minute it turned

2231
01:57:21,279 --> 01:57:24,519
out that actually got a little bit more

2232
01:57:22,960 --> 01:57:27,069
precision by splitting this in by

2233
01:57:24,520 --> 01:57:30,340
splitting two pi into three constants

2234
01:57:27,069 --> 01:57:32,259
this K to again has that property that

2235
01:57:30,340 --> 01:57:34,840
if you multiply it by a number up to

2236
01:57:32,260 --> 01:57:40,270
about a thousand it's it's an exact

2237
01:57:34,840 --> 01:57:44,380
representation and there's that X times

2238
01:57:40,270 --> 01:57:46,690
1 over 2 pi plus R and n minus R and

2239
01:57:44,380 --> 01:57:49,590
danger and then it does this down of

2240
01:57:46,689 --> 01:57:54,359
range reduction using only k1 and k2 and

2241
01:57:49,590 --> 01:58:01,180
then I use k3 here to adjust the answer

2242
01:57:54,359 --> 01:58:03,039
so you've got so this is x times okay so

2243
01:58:01,180 --> 01:58:05,560
this is that this is the table lookup

2244
01:58:03,039 --> 01:58:08,609
heart which will talk because this would

2245
01:58:05,560 --> 01:58:08,610
be the other I think

2246
01:58:08,710 --> 01:58:14,159
thing about about this this code is that

2247
01:58:14,729 --> 01:58:19,988
so this this basically does that

2248
01:58:17,369 --> 01:58:24,099
rounding it to rounding it to an integer

2249
01:58:19,988 --> 01:58:26,379
here and then we can use sorry this here

2250
01:58:24,100 --> 01:58:28,450
in in is a floating point number and we

2251
01:58:26,380 --> 01:58:32,409
don't have to need to turn back again

2252
01:58:28,449 --> 01:58:36,279
all right now let's take a quick - a

2253
01:58:32,409 --> 01:58:40,599
quick a quick look at trigonometric

2254
01:58:36,279 --> 01:58:44,679
identities because this so again this is

2255
01:58:40,600 --> 01:58:46,090
probably high school maths no it wasn't

2256
01:58:44,680 --> 01:58:47,350
a high school maths for me strangely

2257
01:58:46,090 --> 01:58:48,760
enough when I was in high school we

2258
01:58:47,350 --> 01:58:51,730
didn't really do a trigonometric

2259
01:58:48,760 --> 01:58:55,329
identities very much but I understand it

2260
01:58:51,729 --> 01:58:57,939
curriculum yeah no really which is

2261
01:58:55,329 --> 01:59:00,939
interesting but the thing is I never

2262
01:58:57,939 --> 01:59:03,729
remember them anyway and usually yeah

2263
01:59:00,939 --> 01:59:06,099
and you shouldn't because whenever I

2264
01:59:03,729 --> 01:59:09,689
need a trigonometric identity I derived

2265
01:59:06,100 --> 01:59:12,520
and let me tell you how I derive it

2266
01:59:09,689 --> 01:59:18,609
there are two identities and I remember

2267
01:59:12,520 --> 01:59:22,450
one of them is this one sine squared X

2268
01:59:18,609 --> 01:59:24,939
plus cosine squared X and I remember

2269
01:59:22,449 --> 01:59:26,859
because it's Pythagoras T yep

2270
01:59:24,939 --> 01:59:31,629
you have a right-angled triangle with

2271
01:59:26,859 --> 01:59:34,509
one on the hypotenuse base power so he

2272
01:59:31,630 --> 01:59:36,039
should be memorize that one please

2273
01:59:34,510 --> 01:59:38,260
memorize that one yep

2274
01:59:36,039 --> 01:59:42,519
the other one that I memorize is this

2275
01:59:38,260 --> 01:59:52,690
one is that x pi x equals cosine X plus

2276
01:59:42,520 --> 01:59:54,280
I sine X where ice is negative one not

2277
01:59:52,689 --> 01:59:56,279
the square root of negative one please

2278
01:59:54,279 --> 01:59:59,349
don't make that mistake it annoys people

2279
01:59:56,279 --> 02:00:03,389
then e to the power of I X is cosine X

2280
01:59:59,350 --> 02:00:03,390
plus I sine of X and this is Euler Euler

2281
02:00:04,289 --> 02:00:11,979
EUL ER Euler and Euler and Gauss have so

2282
02:00:09,460 --> 02:00:18,039
many things named after them you can be

2283
02:00:11,979 --> 02:00:19,899
forgiven for their saying oh yes you're

2284
02:00:18,039 --> 02:00:22,329
probably 50% chance of being right if

2285
02:00:19,899 --> 02:00:24,429
you name one of those two in this kind

2286
02:00:22,329 --> 02:00:29,229
of entry function arithmetic especially

2287
02:00:24,430 --> 02:00:32,200
all right so other way this is suppose

2288
02:00:29,229 --> 02:00:42,488
you want to know what cosine of a plus B

2289
02:00:32,199 --> 02:00:45,429
is or because if I do this plus I times

2290
02:00:42,488 --> 02:00:51,699
sine of a plus B and this is equal to e

2291
02:00:45,430 --> 02:00:54,670
to the power of I a plus B hey that's

2292
02:00:51,699 --> 02:00:56,920
just that identity applied let's expose

2293
02:00:54,670 --> 02:00:59,109
e to the power of yet let me let me do

2294
02:00:56,920 --> 02:01:01,690
that for that sir everyone knows that

2295
02:00:59,109 --> 02:01:03,639
expose e to the power of right yes but

2296
02:01:01,689 --> 02:01:05,019
he is Euler's concept people when

2297
02:01:03,640 --> 02:01:08,050
7-1-8-2 when they

2298
02:01:05,020 --> 02:01:08,860
well hello Bob yeah basis natural

2299
02:01:08,050 --> 02:01:13,480
logarithms okay

2300
02:01:08,859 --> 02:01:19,529
this is equal to e to the I a times e to

2301
02:01:13,479 --> 02:01:22,750
the I be hey that's the index laws here

2302
02:01:19,529 --> 02:01:27,309
distributive law of that which is equal

2303
02:01:22,750 --> 02:01:35,090
to cosine of a plus I sine of a times

2304
02:01:27,310 --> 02:01:36,930
cosine of B plus I sine B equals B

2305
02:01:35,090 --> 02:01:40,270
[Music]

2306
02:01:36,930 --> 02:01:49,480
because that's I signed I sine B is

2307
02:01:40,270 --> 02:01:53,370
negative I plus I times a sine a and I'm

2308
02:01:49,479 --> 02:01:56,079
gonna put parentheses around here

2309
02:01:53,369 --> 02:01:57,939
because now we can match up the real and

2310
02:01:56,079 --> 02:02:03,850
imaginary parts of that line and that

2311
02:01:57,939 --> 02:02:08,500
line and what we find is that sine of a

2312
02:02:03,850 --> 02:02:14,789
plus B equals that and sine of a plus B

2313
02:02:08,500 --> 02:02:14,789
equals that now we go there there there

2314
02:02:15,670 --> 02:02:22,720
and this memorize another another

2315
02:02:19,949 --> 02:02:25,359
trigonometric identity again so that's

2316
02:02:22,720 --> 02:02:29,140
that's it for anyone who's doing high

2317
02:02:25,359 --> 02:02:32,289
school American high school maths okay

2318
02:02:29,140 --> 02:02:36,310
what this that's these formulas is it

2319
02:02:32,289 --> 02:02:41,250
gives us if we can calculate cosine a at

2320
02:02:36,310 --> 02:02:46,230
a point a cosine a and Sinai at a point

2321
02:02:41,250 --> 02:02:49,930
then we can calculate values of cosine

2322
02:02:46,229 --> 02:02:52,719
around a so if we if instead of B we

2323
02:02:49,930 --> 02:02:58,810
think of it as this is epsilon small

2324
02:02:52,720 --> 02:03:02,079
number right then if we've got cosine of

2325
02:02:58,810 --> 02:03:04,330
a and sine of a of a point then just

2326
02:03:02,079 --> 02:03:06,039
then this cosine of e and sine of the if

2327
02:03:04,329 --> 02:03:08,340
we can come up with a nice polynomial

2328
02:03:06,039 --> 02:03:13,810
approximation that's good in a small

2329
02:03:08,340 --> 02:03:16,510
around this formula gives us a way to

2330
02:03:13,810 --> 02:03:17,870
calculate cosine at a point around that

2331
02:03:16,510 --> 02:03:20,420
belt

2332
02:03:17,869 --> 02:03:23,210
so we're using here and by the way the

2333
02:03:20,420 --> 02:03:26,510
reason why I'm using this approach is

2334
02:03:23,210 --> 02:03:30,579
that this code is branch free and this

2335
02:03:26,510 --> 02:03:41,150
is since I read between the lines of the

2336
02:03:30,579 --> 02:03:48,069
requirements it is even what on a

2337
02:03:41,149 --> 02:03:52,250
calculator it's going to be much easy to

2338
02:03:48,069 --> 02:03:54,289
calculate force can you say the part

2339
02:03:52,250 --> 02:03:55,939
from read between the lines again that

2340
02:03:54,289 --> 02:03:58,699
was like for some reason it dropped out

2341
02:03:55,939 --> 02:04:03,109
it's pretty severely there couldn't

2342
02:03:58,699 --> 02:04:07,460
quite reconstruct it I read between the

2343
02:04:03,109 --> 02:04:12,319
line and the requirements here for

2344
02:04:07,460 --> 02:04:14,000
example stuff and I figured probably

2345
02:04:12,319 --> 02:04:15,409
want ease you probably want a version

2346
02:04:14,000 --> 02:04:19,460
that you can do for signs and for

2347
02:04:15,409 --> 02:04:21,289
persons yes yes you know vector

2348
02:04:19,460 --> 02:04:23,210
instructions yes pretty much anything

2349
02:04:21,289 --> 02:04:25,909
that you're gonna do in a math library

2350
02:04:23,210 --> 02:04:29,149
in a game these days wants to be able to

2351
02:04:25,909 --> 02:04:31,760
be done wide and it can have branches

2352
02:04:29,149 --> 02:04:33,619
but you have to factor in the cost of

2353
02:04:31,760 --> 02:04:36,260
those branches both branches will be

2354
02:04:33,619 --> 02:04:38,059
taken so usually it doesn't help you if

2355
02:04:36,260 --> 02:04:39,980
if one of you know if you're doing a

2356
02:04:38,060 --> 02:04:43,610
branch to save time that really doesn't

2357
02:04:39,979 --> 02:04:45,169
help you that's right now I am trying a

2358
02:04:43,609 --> 02:04:46,549
different approach down here and I'm a

2359
02:04:45,170 --> 02:04:50,090
ridge eventually going to get rid of

2360
02:04:46,550 --> 02:04:51,680
these branches down here but will will

2361
02:04:50,090 --> 02:04:53,180
well just have a quick look at that mode

2362
02:04:51,680 --> 02:04:55,190
this is experimental code it does not

2363
02:04:53,180 --> 02:04:59,000
work it's buggy you do not use it okay

2364
02:04:55,189 --> 02:05:01,369
the only catch here is these dependent

2365
02:04:59,000 --> 02:05:04,850
loads is that this table lookup does

2366
02:05:01,369 --> 02:05:07,819
require taking a number converting it to

2367
02:05:04,850 --> 02:05:10,610
an integer and then reading a table now

2368
02:05:07,819 --> 02:05:13,399
the table is only that and this in a

2369
02:05:10,609 --> 02:05:16,189
couple of cars so it's a small table I'm

2370
02:05:13,399 --> 02:05:19,189
not concerned about the cost of the load

2371
02:05:16,189 --> 02:05:23,960
you know getting riddle getting rid of a

2372
02:05:19,189 --> 02:05:26,960
floating point square root even and if

2373
02:05:23,960 --> 02:05:30,170
it what if you want square root because

2374
02:05:26,960 --> 02:05:30,920
it's it's expensive and you're replacing

2375
02:05:30,170 --> 02:05:34,429
with

2376
02:05:30,920 --> 02:05:36,199
Kashmir's that's actually a bad right so

2377
02:05:34,429 --> 02:05:38,329
if you are using tables you want to make

2378
02:05:36,198 --> 02:05:39,769
them small but this still is a dependent

2379
02:05:38,329 --> 02:05:43,039
load here yeah

2380
02:05:39,770 --> 02:05:46,910
so I did defer to your rent the thing is

2381
02:05:43,039 --> 02:05:52,539
on making this into a vector with it if

2382
02:05:46,909 --> 02:05:57,260
you want but but you know something for

2383
02:05:52,539 --> 02:05:59,869
okay so what we've got here is this -

2384
02:05:57,260 --> 02:06:04,190
outland this table is this is a value of

2385
02:05:59,869 --> 02:06:08,059
x this is sine of X and this is cosine

2386
02:06:04,189 --> 02:06:10,428
of X at various sample points what I

2387
02:06:08,060 --> 02:06:12,440
decided to do was I originally tried

2388
02:06:10,429 --> 02:06:14,210
using these sample points so what we do

2389
02:06:12,439 --> 02:06:16,428
is we sample cosine sine and cosine it

2390
02:06:14,210 --> 02:06:18,829
at bunch of points and then we use a

2391
02:06:16,429 --> 02:06:22,159
polynomial approximation for sine and

2392
02:06:18,829 --> 02:06:25,840
cosine using done using Mathematica

2393
02:06:22,159 --> 02:06:29,510
using exactly what we've discussed to

2394
02:06:25,840 --> 02:06:32,029
calculate sine and cosine in a smaller

2395
02:06:29,510 --> 02:06:34,340
range so I originally used integer we're

2396
02:06:32,029 --> 02:06:37,189
now using 1/2 in this because it

2397
02:06:34,340 --> 02:06:39,260
improves things enormous ly the table

2398
02:06:37,189 --> 02:06:41,389
features fits in a cache line which is

2399
02:06:39,260 --> 02:06:43,969
very nice fits into cache lines

2400
02:06:41,390 --> 02:06:46,820
I think it's an acceptable trade if we

2401
02:06:43,969 --> 02:06:48,649
sample them we're sampling in there in

2402
02:06:46,819 --> 02:06:51,139
the range negative pi to pi because this

2403
02:06:48,649 --> 02:06:54,738
range reduction algorithm gives us a

2404
02:06:51,140 --> 02:06:59,210
value in that range so I'm sampling it

2405
02:06:54,738 --> 02:07:10,279
at negative 3 negative 3 point 5 sorry

2406
02:06:59,210 --> 02:07:13,069
2.5 2.5 on I've but these are the points

2407
02:07:10,279 --> 02:07:15,710
that I'm blinging that and I say sort of

2408
02:07:13,069 --> 02:07:17,090
because it's actually not quite the

2409
02:07:15,710 --> 02:07:22,850
reasons that will become clear in a

2410
02:07:17,090 --> 02:07:26,659
moment so we this is that's the reason

2411
02:07:22,850 --> 02:07:28,880
for this x 2 here is we multi-is we're

2412
02:07:26,659 --> 02:07:31,909
taking this value that we've done here

2413
02:07:28,880 --> 02:07:33,920
we've got here which is X range reduced

2414
02:07:31,909 --> 02:07:36,079
from negative pi to pi multiplying it by

2415
02:07:33,920 --> 02:07:38,119
2 rounding it to an integer again

2416
02:07:36,079 --> 02:07:39,948
probably don't need to round it to an

2417
02:07:38,119 --> 02:07:42,219
integer actually we can probably just do

2418
02:07:39,948 --> 02:07:42,219
this

2419
02:07:47,060 --> 02:07:57,719
yeah in fact let's do that let's keep

2420
02:07:55,380 --> 02:07:59,430
that in case that's probably fine this

2421
02:07:57,719 --> 02:08:03,060
six is just to do with the fact that

2422
02:07:59,430 --> 02:08:06,510
arrays start at zero in C counting

2423
02:08:03,060 --> 02:08:08,580
starts at zero as always started at zero

2424
02:08:06,510 --> 02:08:16,050
even before zero was invented counting

2425
02:08:08,579 --> 02:08:18,180
started it's true this table has a

2426
02:08:16,050 --> 02:08:21,770
wonderful talk on this that explaining

2427
02:08:18,180 --> 02:08:21,770
how counting is always started at zero

2428
02:08:22,039 --> 02:08:27,409
he's one of them probably the most cited

2429
02:08:24,930 --> 02:08:30,570
computer scientist of all time

2430
02:08:27,409 --> 02:08:37,079
and he has wonderful paper titles like

2431
02:08:30,569 --> 02:08:39,899
theorems from think paper titles but yes

2432
02:08:37,079 --> 02:08:43,170
it's wonderful talk on on things it's in

2433
02:08:39,899 --> 02:08:48,409
retrospect and one of them things that's

2434
02:08:43,170 --> 02:08:52,980
obvious in reading starts at zero yeah

2435
02:08:48,409 --> 02:08:54,599
just a little okay but what you might

2436
02:08:52,979 --> 02:08:57,979
notice here is this is this is the value

2437
02:08:54,600 --> 02:09:00,719
of x plus yeah and it's not exactly and

2438
02:08:57,979 --> 02:09:04,009
this is between negative two point five

2439
02:09:00,719 --> 02:09:06,480
I've this in scientific notation

2440
02:09:04,010 --> 02:09:09,469
that's not exactly negative two and

2441
02:09:06,479 --> 02:09:13,439
that's not exactly negative one point

2442
02:09:09,469 --> 02:09:17,550
offset them slightly yes and you can do

2443
02:09:13,439 --> 02:09:19,829
this once you're thinking in terms of

2444
02:09:17,550 --> 02:09:21,329
these tables you know there's there's no

2445
02:09:19,829 --> 02:09:22,939
reason why you can't we have to sample

2446
02:09:21,329 --> 02:09:25,738
at that point and there are two reasons

2447
02:09:22,939 --> 02:09:28,469
well there's a good reason for putting X

2448
02:09:25,738 --> 02:09:30,539
in here and that means and that's so

2449
02:09:28,469 --> 02:09:31,310
that this calculation doesn't have to be

2450
02:09:30,539 --> 02:09:34,409
exact

2451
02:09:31,310 --> 02:09:36,390
if we if if this if there's some round

2452
02:09:34,409 --> 02:09:41,069
of error in here all that means is that

2453
02:09:36,390 --> 02:09:43,579
we were close to one point five and we

2454
02:09:41,069 --> 02:09:45,869
went slightly high instead of slightly

2455
02:09:43,579 --> 02:09:48,649
but that's okay if we just make these

2456
02:09:45,869 --> 02:09:51,750
polynomials nations just a little wider

2457
02:09:48,649 --> 02:09:54,619
so they work over a slightly range the

2458
02:09:51,750 --> 02:09:56,520
negative five point five two point five

2459
02:09:54,619 --> 02:09:59,250
we can weaken comments

2460
02:09:56,520 --> 02:10:01,860
for that first reason that's a good

2461
02:09:59,250 --> 02:10:04,079
reason to put it in the table but the

2462
02:10:01,859 --> 02:10:06,869
other reason is is once you've decided

2463
02:10:04,079 --> 02:10:08,909
that you've put X in the table it

2464
02:10:06,869 --> 02:10:11,489
doesn't have to be exactly under the

2465
02:10:08,909 --> 02:10:13,590
range and again I do not numbers at

2466
02:10:11,489 --> 02:10:19,679
random I picked them for it through very

2467
02:10:13,590 --> 02:10:21,930
careful reason let me just run it I have

2468
02:10:19,680 --> 02:10:24,510
actually got code and this is will be

2469
02:10:21,930 --> 02:10:28,230
part of the thing which calculates these

2470
02:10:24,510 --> 02:10:31,619
tables about sine curves tables where we

2471
02:10:28,229 --> 02:10:33,329
find a line somewhere around negative 3

2472
02:10:31,619 --> 02:10:37,949
somewhere around negative two point five

2473
02:10:33,329 --> 02:10:40,350
somewhere around negative and now well

2474
02:10:37,949 --> 02:10:44,939
let me so let me give you the example

2475
02:10:40,350 --> 02:10:47,160
here this is this is an actual result

2476
02:10:44,939 --> 02:10:51,929
this is this is 0.5 so this is what we

2477
02:10:47,159 --> 02:10:55,909
get for 0.5 so instead of 0.5 actually

2478
02:10:51,930 --> 02:10:58,860
years that number which is a few

2479
02:10:55,909 --> 02:11:03,899
floating-point numbers away from from

2480
02:10:58,859 --> 02:11:06,239
0.5 and the reason why is that one the

2481
02:11:03,899 --> 02:11:07,920
difference is 2 times 10 to the minus 6

2482
02:11:06,239 --> 02:11:10,949
so that's a very very small number of

2483
02:11:07,920 --> 02:11:14,190
radians but the reason why is because

2484
02:11:10,949 --> 02:11:17,909
sine and cosine property here

2485
02:11:14,189 --> 02:11:21,299
this is a double precision okay and

2486
02:11:17,909 --> 02:11:26,489
stuff we did earlier to this sine of

2487
02:11:21,300 --> 02:11:30,150
that number in all these zeros at the

2488
02:11:26,489 --> 02:11:33,689
end yep yeah I picked that number

2489
02:11:30,149 --> 02:11:35,159
because it's close to that but also it's

2490
02:11:33,689 --> 02:11:37,649
got all easy rows at the end and in

2491
02:11:35,159 --> 02:11:41,279
particular this number fits in a single

2492
02:11:37,649 --> 02:11:45,179
precision float in a binary 32 so this

2493
02:11:41,279 --> 02:11:50,539
is a double double precision and so that

2494
02:11:45,180 --> 02:11:55,200
fit you know good double precision and

2495
02:11:50,539 --> 02:11:58,439
so this number here is pretty close to

2496
02:11:55,199 --> 02:12:00,899
exact as is this one as is this one as

2497
02:11:58,439 --> 02:12:03,989
is this one these numbers are very close

2498
02:12:00,899 --> 02:12:08,129
to it I see

2499
02:12:03,989 --> 02:12:10,789
and one little more precision out of the

2500
02:12:08,130 --> 02:12:10,789
head of the value

2501
02:12:11,359 --> 02:12:17,339
so okay so this involves searching

2502
02:12:14,279 --> 02:12:21,179
floating-point numbers and again I did

2503
02:12:17,340 --> 02:12:22,860
not implement this in a handmade kind of

2504
02:12:21,180 --> 02:12:25,950
way I used the c standard library for

2505
02:12:22,859 --> 02:12:27,420
this but there's a little function that

2506
02:12:25,949 --> 02:12:30,449
not many people know about it's in

2507
02:12:27,420 --> 02:12:32,699
method age there actually there's

2508
02:12:30,449 --> 02:12:37,949
actually a family of functions well one

2509
02:12:32,699 --> 02:12:42,059
of them is next after and the other one

2510
02:12:37,949 --> 02:12:46,920
is next toward and what is next after f

2511
02:12:42,060 --> 02:12:50,220
of X of x plus hundred this gives you

2512
02:12:46,920 --> 02:12:54,300
the next floating-point number after X

2513
02:12:50,220 --> 02:12:56,520
in the direction of X plus 100 okay so

2514
02:12:54,300 --> 02:12:58,380
using this technique what we can do is

2515
02:12:56,520 --> 02:13:00,630
we can search adjacent floating-point

2516
02:12:58,380 --> 02:13:02,789
numbers so in this case what I've done

2517
02:13:00,630 --> 02:13:04,199
is I've said we'll search a hundred

2518
02:13:02,789 --> 02:13:08,369
floating-point numbers in each direction

2519
02:13:04,199 --> 02:13:11,189
and what we want is the best one that is

2520
02:13:08,369 --> 02:13:12,949
we want one with the most zeros after

2521
02:13:11,189 --> 02:13:16,469
the little 32 mantissa

2522
02:13:12,949 --> 02:13:20,819
so so if you like we we go up to the end

2523
02:13:16,470 --> 02:13:22,890
of the to the mentis of a single

2524
02:13:20,819 --> 02:13:25,049
precision float then we count the zeros

2525
02:13:22,890 --> 02:13:27,990
following and we want the one with the

2526
02:13:25,050 --> 02:13:31,970
most and in the case of ties we want the

2527
02:13:27,989 --> 02:13:31,969
one that's closest that that's closest

2528
02:13:32,180 --> 02:13:38,250
but these these loops do they calculate

2529
02:13:35,489 --> 02:13:43,250
sine and cosine in double precision

2530
02:13:38,250 --> 02:13:46,260
using the library because high quality B

2531
02:13:43,250 --> 02:13:47,850
and it's slow as well it's not what we

2532
02:13:46,260 --> 02:13:50,970
want for handmade here oh but it's fine

2533
02:13:47,850 --> 02:13:52,500
for and then we calculate that we count

2534
02:13:50,970 --> 02:13:56,130
the zeros after it so I've replicated

2535
02:13:52,500 --> 02:13:59,760
some of this real 32 stuff in real 64

2536
02:13:56,130 --> 02:14:03,779
here this but and there's there's the

2537
02:13:59,760 --> 02:14:06,630
union for it that because I need to work

2538
02:14:03,779 --> 02:14:09,029
with doubles and then here's the thing

2539
02:14:06,630 --> 02:14:12,000
that counts the zeros after real don't

2540
02:14:09,029 --> 02:14:13,949
do that I just did it as a I think I

2541
02:14:12,000 --> 02:14:16,979
just did it as a loop yeah just in his

2542
02:14:13,949 --> 02:14:20,670
loop you know again if this was speed we

2543
02:14:16,979 --> 02:14:22,799
cared about we use its can reverse or

2544
02:14:20,670 --> 02:14:24,329
something and again to handle the

2545
02:14:22,800 --> 02:14:27,390
subnormal case we use two two

2546
02:14:24,329 --> 02:14:29,899
fifty-five instead of to the 23 which we

2547
02:14:27,390 --> 02:14:32,340
used in there in the previous example we

2548
02:14:29,899 --> 02:14:33,809
don't adjust the exponent for that

2549
02:14:32,340 --> 02:14:35,100
because we don't care about the exponent

2550
02:14:33,810 --> 02:14:39,150
we're just looking for zeros in the

2551
02:14:35,100 --> 02:14:41,370
mantissa and and and that's basically

2552
02:14:39,149 --> 02:14:46,109
all we do the code is is actually quite

2553
02:14:41,369 --> 02:14:48,869
straightforward once you understand the

2554
02:14:46,109 --> 02:14:51,329
bit hackery that's going on here and so

2555
02:14:48,869 --> 02:14:55,590
that's how we calculate there's sine and

2556
02:14:51,329 --> 02:14:57,300
cosine tables and then the only thing

2557
02:14:55,590 --> 02:14:58,980
left is this is a polynomial

2558
02:14:57,300 --> 02:15:02,340
approximation to cosine this is a

2559
02:14:58,979 --> 02:15:06,000
polynomial first equation to sign and

2560
02:15:02,340 --> 02:15:08,670
this is a slightly rearranged polynomial

2561
02:15:06,000 --> 02:15:10,710
evaluation with some you know we share

2562
02:15:08,670 --> 02:15:12,140
some of it here but it is essentially

2563
02:15:10,710 --> 02:15:17,640
the same thing that's going on it's just

2564
02:15:12,140 --> 02:15:20,280
rearranged a little bit further for

2565
02:15:17,640 --> 02:15:23,940
precision so that the most important

2566
02:15:20,279 --> 02:15:25,889
terms are added on at the end yeah and

2567
02:15:23,939 --> 02:15:28,409
the other thing is of course this third

2568
02:15:25,890 --> 02:15:32,070
constant k3 that we split to Paynter we

2569
02:15:28,409 --> 02:15:33,380
just added on to XD here and that way it

2570
02:15:32,069 --> 02:15:37,229
doesn't have to go through this

2571
02:15:33,380 --> 02:15:39,840
rigmarole we've preserved these very

2572
02:15:37,229 --> 02:15:41,729
small error compensation term and we

2573
02:15:39,840 --> 02:15:48,720
just added in the XT here and that's the

2574
02:15:41,729 --> 02:15:52,979
argument of the poem um that was a long

2575
02:15:48,720 --> 02:15:55,770
that was a long speech familiar is there

2576
02:15:52,979 --> 02:15:59,000
anything that anyone did not live so I

2577
02:15:55,770 --> 02:16:02,190
have a couple questions asked I can ask

2578
02:15:59,000 --> 02:16:06,390
so my first question is can you go back

2579
02:16:02,189 --> 02:16:08,009
to the table there because so so the

2580
02:16:06,390 --> 02:16:09,420
thing that I'm sure if I looked at the

2581
02:16:08,010 --> 02:16:14,010
code more carefully I would probably

2582
02:16:09,420 --> 02:16:16,800
understand but yeah you've got two terms

2583
02:16:14,010 --> 02:16:19,409
coming out of the table but then you've

2584
02:16:16,800 --> 02:16:21,480
got a bunch of terms that are the same

2585
02:16:19,409 --> 02:16:25,529
no matter where you are in the table how

2586
02:16:21,479 --> 02:16:27,329
can you add a little more exposition

2587
02:16:25,529 --> 02:16:29,069
there to why part of it looks up the

2588
02:16:27,329 --> 02:16:33,179
table part of it's the same no matter

2589
02:16:29,069 --> 02:16:35,250
where you are do you mean do you sorry

2590
02:16:33,179 --> 02:16:36,840
do you mean like that that do you mean

2591
02:16:35,250 --> 02:16:37,979
do you mean that some of these title

2592
02:16:36,840 --> 02:16:40,950
entries are the same

2593
02:16:37,979 --> 02:16:43,549
the question you're asking no no what I

2594
02:16:40,950 --> 02:16:48,390
meant was so to look up into the table

2595
02:16:43,549 --> 02:16:52,049
you're getting back some part of the

2596
02:16:48,389 --> 02:16:54,689
computation going forward but then no

2597
02:16:52,049 --> 02:16:57,649
matter where you were when you looked up

2598
02:16:54,690 --> 02:17:00,180
your base point in the table the

2599
02:16:57,649 --> 02:17:01,079
polynomial terms don't have to get

2600
02:17:00,180 --> 02:17:02,700
looked over those are the same

2601
02:17:01,079 --> 02:17:04,860
everywhere and that was just that's

2602
02:17:02,700 --> 02:17:06,659
quite until I look at work everybody I I

2603
02:17:04,860 --> 02:17:08,040
wouldn't be able to figure out why that

2604
02:17:06,659 --> 02:17:11,610
was only if you could explain that at

2605
02:17:08,040 --> 02:17:13,650
part a little bit okay sure so what

2606
02:17:11,610 --> 02:17:15,900
you're doing is you're looking up cosine

2607
02:17:13,649 --> 02:17:18,569
of a plus T where a is a point that's

2608
02:17:15,899 --> 02:17:20,699
sampled in the table right so cosine a

2609
02:17:18,569 --> 02:17:24,329
and curse and Sinai are stored in the

2610
02:17:20,700 --> 02:17:26,310
table write cosine E and sign e are the

2611
02:17:24,329 --> 02:17:27,959
polynomial approximation okay right and

2612
02:17:26,309 --> 02:17:31,289
they're gonna be the same because you're

2613
02:17:27,959 --> 02:17:34,019
always around zero at that point around

2614
02:17:31,290 --> 02:17:36,660
zero at that point right we take to work

2615
02:17:34,020 --> 02:17:39,469
out the Oakland area we take X prime

2616
02:17:36,659 --> 02:17:42,809
which is X that's been range reduced

2617
02:17:39,468 --> 02:17:45,359
subtract X in the table and that makes

2618
02:17:42,809 --> 02:17:46,709
it between roughly negative 0.5 and 0.5

2619
02:17:45,360 --> 02:17:49,920
yeah and then this little arrow

2620
02:17:46,709 --> 02:17:53,309
compensation to that and so the reason

2621
02:17:49,920 --> 02:17:56,549
why X it's XD here he's always in the

2622
02:17:53,309 --> 02:17:59,430
range somewhere around negative 0.5 to

2623
02:17:56,549 --> 02:18:04,279
somewhere around positive 0.5 it is

2624
02:17:59,430 --> 02:18:08,670
slightly wider because I did actually I

2625
02:18:04,280 --> 02:18:10,800
put the difference between X and the

2626
02:18:08,670 --> 02:18:14,309
sample point here and I took the maximum

2627
02:18:10,799 --> 02:18:16,759
of those and expanded the range of that

2628
02:18:14,309 --> 02:18:20,039
the polynomial is good at and by that a

2629
02:18:16,760 --> 02:18:23,040
little bit and then I expanded it again

2630
02:18:20,040 --> 02:18:25,230
by by a number that's related to K 3

2631
02:18:23,040 --> 02:18:29,690
don't close that era compensation to him

2632
02:18:25,229 --> 02:18:32,850
so I I was very very careful about this

2633
02:18:29,690 --> 02:18:35,090
again these numbers are not magic it's

2634
02:18:32,850 --> 02:18:35,090
just

2635
02:18:38,709 --> 02:18:46,299
that's that's the that's the reason for

2636
02:18:42,200 --> 02:18:50,479
that it's an XD - because these are the

2637
02:18:46,299 --> 02:18:54,468
East polynomials this this is things

2638
02:18:50,478 --> 02:18:57,289
there's the zero to zero X to the six

2639
02:18:54,468 --> 02:18:59,359
this is always X to the 1 X - 3 X 5 X to

2640
02:18:57,290 --> 02:19:02,000
the 7 these are all odd values because

2641
02:18:59,360 --> 02:19:06,280
it centered around zero makes sense

2642
02:19:02,000 --> 02:19:09,888
we pre calculate x squared as well

2643
02:19:06,280 --> 02:19:12,739
calculation later on these are the

2644
02:19:09,888 --> 02:19:15,579
right-hand sides of cosine and sine from

2645
02:19:12,739 --> 02:19:17,420
c2 to c6 so that's a Horner's rule

2646
02:19:15,579 --> 02:19:19,218
calculation there you can actually see

2647
02:19:17,420 --> 02:19:21,978
that looks like a polynomial valuation

2648
02:19:19,218 --> 02:19:27,409
we just plug those in but we take the

2649
02:19:21,978 --> 02:19:30,978
first couple of polynomial evaluations

2650
02:19:27,409 --> 02:19:37,780
and add them on at the end just so that

2651
02:19:30,978 --> 02:19:37,779
you you sometimes can get an exposition

2652
02:19:38,110 --> 02:19:46,729
again it's not magic it's just a little

2653
02:19:41,269 --> 02:19:51,950
tricky yes sorry so my other question

2654
02:19:46,728 --> 02:19:54,529
would be so yet for if trying to do wide

2655
02:19:51,950 --> 02:19:57,620
versions of these it's very hard to do

2656
02:19:54,530 --> 02:19:59,180
table lookups because each Lane has to

2657
02:19:57,620 --> 02:20:03,440
look up a different entry and in the

2658
02:19:59,180 --> 02:20:06,649
table typically so what sort of stuff

2659
02:20:03,440 --> 02:20:11,420
would you end up doing if you couldn't

2660
02:20:06,649 --> 02:20:15,228
use the table so this is this is where

2661
02:20:11,420 --> 02:20:16,790
this this version comes in okay so this

2662
02:20:15,228 --> 02:20:20,599
is this is as I said this is

2663
02:20:16,790 --> 02:20:25,430
experimental code where where what I'm

2664
02:20:20,600 --> 02:20:29,420
doing here is doing range reducing

2665
02:20:25,430 --> 02:20:35,090
instead of from the range negative if hi

2666
02:20:29,420 --> 02:20:41,030
I'm Ranger adducing range from zero that

2667
02:20:35,090 --> 02:20:44,020
part of it okay so the sine of a X from

2668
02:20:41,030 --> 02:20:44,020
zero to

2669
02:20:45,450 --> 02:20:55,689
hmm is that and the curse sign is that

2670
02:20:53,920 --> 02:21:00,700
and these are just mirror images of a

2671
02:20:55,689 --> 02:21:02,229
yes a because this and that are mirror

2672
02:21:00,700 --> 02:21:05,350
images of each other we should be able

2673
02:21:02,228 --> 02:21:09,219
to evaluate it by simply using a

2674
02:21:05,350 --> 02:21:12,329
different X pi on to - X yes and then

2675
02:21:09,219 --> 02:21:14,949
evaluating the same approximation there

2676
02:21:12,329 --> 02:21:17,228
again for this part of the range here

2677
02:21:14,950 --> 02:21:20,290
that shape there is the same as that

2678
02:21:17,228 --> 02:21:22,358
shape there only its negative yes this

2679
02:21:20,290 --> 02:21:24,100
shape here is the same as this shape

2680
02:21:22,359 --> 02:21:28,059
here only it's a mirror image around

2681
02:21:24,100 --> 02:21:34,149
that line so so the other way of doing

2682
02:21:28,059 --> 02:21:36,760
it and this is a common we'll find is to

2683
02:21:34,148 --> 02:21:40,809
is to use this kind of quadrant analysis

2684
02:21:36,760 --> 02:21:45,520
you decide which which part of this you

2685
02:21:40,809 --> 02:21:47,289
know which you know that's a polynomial

2686
02:21:45,520 --> 02:21:49,890
it looks so much like a side yeah it's

2687
02:21:47,290 --> 02:21:54,760
that's kind of shockingly the same it

2688
02:21:49,889 --> 02:21:57,250
yeah yeah exactly so this is this is the

2689
02:21:54,760 --> 02:21:59,409
sine curve you know this is like is one

2690
02:21:57,250 --> 02:22:01,540
whole period you split into quadrants

2691
02:21:59,409 --> 02:22:03,520
there's one quadrant here one quadrant

2692
02:22:01,540 --> 02:22:06,810
here one quadrant here and one quadrant

2693
02:22:03,520 --> 02:22:10,090
here and this is the they only differ by

2694
02:22:06,809 --> 02:22:13,209
flipping the sign of the answer and also

2695
02:22:10,090 --> 02:22:15,540
kind of mirror imaging around kind of a

2696
02:22:13,209 --> 02:22:17,919
line imagine a line drawn down there yes

2697
02:22:15,540 --> 02:22:18,250
so that's that's what I'm trying to do

2698
02:22:17,920 --> 02:22:20,500
here

2699
02:22:18,250 --> 02:22:22,898
at the moment I'm doing it with case

2700
02:22:20,500 --> 02:22:24,549
analysis and in this case is buggy at

2701
02:22:22,898 --> 02:22:28,449
the moment I and you know is these

2702
02:22:24,549 --> 02:22:30,340
negative sign adjusts yeah what I

2703
02:22:28,450 --> 02:22:36,310
eventually want to do is I want to turn

2704
02:22:30,340 --> 02:22:40,680
this into bit hackery so that we can do

2705
02:22:36,309 --> 02:22:43,539
that path branch free and then just do

2706
02:22:40,680 --> 02:22:45,880
two polynomial evaluations they use the

2707
02:22:43,540 --> 02:22:47,859
same approximation because you know one

2708
02:22:45,879 --> 02:22:50,318
of them is just the mirror image of each

2709
02:22:47,859 --> 02:22:53,290
other so that's okay in theory you could

2710
02:22:50,318 --> 02:22:58,028
do both of these in power in using

2711
02:22:53,290 --> 02:22:59,170
vector instructions or maybe you don't

2712
02:22:58,029 --> 02:23:01,170
want to if you want to calculate

2713
02:22:59,170 --> 02:23:03,159
you know for sines and cosines in

2714
02:23:01,170 --> 02:23:04,210
parallel maybe just don't want to bother

2715
02:23:03,159 --> 02:23:06,489
with that and just through theirs in

2716
02:23:04,209 --> 02:23:08,679
parallel that's usually how it's these

2717
02:23:06,489 --> 02:23:10,379
are completely independent usually you

2718
02:23:08,680 --> 02:23:12,069
yeah impute them in parallel because

2719
02:23:10,379 --> 02:23:14,170
typically if you're in a

2720
02:23:12,069 --> 02:23:16,719
performance-oriented scenario packing

2721
02:23:14,170 --> 02:23:18,250
and unpacking is just do you lose too

2722
02:23:16,719 --> 02:23:19,569
much time so they typically try to go

2723
02:23:18,250 --> 02:23:21,939
like all right look let's just process

2724
02:23:19,569 --> 02:23:28,869
things in bulk so we're gonna try and

2725
02:23:21,939 --> 02:23:30,340
take four angles in and spit for but

2726
02:23:28,870 --> 02:23:31,780
also of course this is a this is a

2727
02:23:30,340 --> 02:23:33,728
sequential computation it's data

2728
02:23:31,780 --> 02:23:36,010
dependent right this see depends on that

2729
02:23:33,728 --> 02:23:38,579
this see depends on that and so

2730
02:23:36,010 --> 02:23:41,020
interleaving these two computations yes

2731
02:23:38,579 --> 02:23:42,670
would probably look quite a lot as well

2732
02:23:41,020 --> 02:23:58,020
well the CPU will do that for you

2733
02:23:42,670 --> 02:23:58,020
automatically these days of course yeah

2734
02:23:59,728 --> 02:24:04,779
so okay so but you said this routine

2735
02:24:02,978 --> 02:24:07,179
wasn't working yet

2736
02:24:04,780 --> 02:24:08,560
you you have a big do not use on the top

2737
02:24:07,180 --> 02:24:11,559
of it so what's what haven't you done

2738
02:24:08,559 --> 02:24:14,079
yet here I'm curious okay I haven't

2739
02:24:11,559 --> 02:24:17,019
fully debugged this quadrant calculation

2740
02:24:14,079 --> 02:24:21,219
here there's I mean I can I can I can

2741
02:24:17,020 --> 02:24:23,500
show you I can I can show you so this is

2742
02:24:21,219 --> 02:24:25,389
this is so this is here we've got a

2743
02:24:23,500 --> 02:24:28,120
start here at the quadrant number so in

2744
02:24:25,389 --> 02:24:30,489
quadrant one well look the difference is

2745
02:24:28,120 --> 02:24:34,540
five times ten to the minus eight zero

2746
02:24:30,489 --> 02:24:36,219
zero the difference between sine X is

2747
02:24:34,540 --> 02:24:37,510
calculated by the C standard library and

2748
02:24:36,219 --> 02:24:39,670
is calculated by this routine the

2749
02:24:37,510 --> 02:24:41,649
difference is zero ten to the minus food

2750
02:24:39,670 --> 02:24:43,840
in that quadrant but when you get to

2751
02:24:41,649 --> 02:24:45,939
quadrant three you find that the

2752
02:24:43,840 --> 02:24:48,399
difference is negative three times ten

2753
02:24:45,939 --> 02:24:51,220
to the minus three negative one point

2754
02:24:48,399 --> 02:24:54,549
four times ten to the minus one so yes

2755
02:24:51,219 --> 02:24:57,188
sign looks correct but bug in her sign

2756
02:24:54,549 --> 02:25:00,069
and I I've just got that wrong or maybe

2757
02:24:57,189 --> 02:25:03,189
I need to I'm not sure I'm not sure what

2758
02:25:00,069 --> 02:25:11,680
I need to do there it was it was like 11

2759
02:25:03,189 --> 02:25:12,851
o'clock so I will and then my next step

2760
02:25:11,680 --> 02:25:15,431
after that we'll beat

2761
02:25:12,851 --> 02:25:18,461
turn this branch into in tuba Thackeray

2762
02:25:15,431 --> 02:25:22,149
so we'll try and do it with with with

2763
02:25:18,460 --> 02:25:26,081
you know the compare instructions that

2764
02:25:22,149 --> 02:25:28,720
are built into SSE and masking and and

2765
02:25:26,081 --> 02:25:30,761
whatever we need to do and and also of

2766
02:25:28,720 --> 02:25:32,921
course this this sign adjust here we'll

2767
02:25:30,761 --> 02:25:35,560
be extracting the sign bit and then

2768
02:25:32,921 --> 02:25:39,521
we'll put the sign bit back on the

2769
02:25:35,560 --> 02:25:41,380
answer instead of them all as well so

2770
02:25:39,521 --> 02:25:44,230
that's that's that's my theory with this

2771
02:25:41,380 --> 02:25:46,779
because I want to see which one performs

2772
02:25:44,229 --> 02:25:48,880
better basically this is going to

2773
02:25:46,780 --> 02:25:51,131
involve this will be bit hackery it will

2774
02:25:48,880 --> 02:25:54,729
be single line it will be single thread

2775
02:25:51,130 --> 02:25:56,290
branch free code but my feeling is that

2776
02:25:54,729 --> 02:25:58,390
it's going to be a lot of code and

2777
02:25:56,290 --> 02:26:00,640
probably comparable with one of these

2778
02:25:58,390 --> 02:26:02,261
that there'll be about as much code to

2779
02:26:00,640 --> 02:26:04,119
calculate this as there will be to a

2780
02:26:02,261 --> 02:26:08,470
calculate one of these polynomials I say

2781
02:26:04,120 --> 02:26:11,261
and I don't know if that is better than

2782
02:26:08,470 --> 02:26:13,659
a table lookup or not and there's a way

2783
02:26:11,261 --> 02:26:15,461
to find out table lookups do tend to be

2784
02:26:13,659 --> 02:26:17,831
pretty expensive just because you have

2785
02:26:15,460 --> 02:26:21,310
to it's it's really if to extract lookup

2786
02:26:17,831 --> 02:26:22,659
and repack but yeah it's yeah it's hard

2787
02:26:21,310 --> 02:26:27,220
to say so one of the thing I think

2788
02:26:22,659 --> 02:26:30,011
Fabien has often said is that he's he's

2789
02:26:27,220 --> 02:26:33,819
often surprised at how often table

2790
02:26:30,011 --> 02:26:36,069
lookup still win though um cuz like yeah

2791
02:26:33,819 --> 02:26:37,479
yeah yeah the conventional wisdom is

2792
02:26:36,069 --> 02:26:40,181
that like oh don't do a table lookup

2793
02:26:37,479 --> 02:26:42,220
just compute the value but then he says

2794
02:26:40,181 --> 02:26:44,940
when he often times when he tries it he

2795
02:26:42,220 --> 02:26:48,790
finds that that is not true

2796
02:26:44,940 --> 02:26:51,280
yes yeah exactly so who knows and that

2797
02:26:48,790 --> 02:26:52,930
that's why I thought that for handmade

2798
02:26:51,280 --> 02:27:01,331
here oh I think the right thing to do

2799
02:26:52,931 --> 02:27:03,881
was was to try plays yeah he's yeah the

2800
02:27:01,331 --> 02:27:06,819
two floating-point your C standard

2801
02:27:03,880 --> 02:27:10,210
library doesn't you know the

2802
02:27:06,819 --> 02:27:14,050
implementation of of X for example yes

2803
02:27:10,210 --> 02:27:15,819
or 2 to the X it will use table lookup

2804
02:27:14,050 --> 02:27:17,949
whereas the implantation of sine and

2805
02:27:15,819 --> 02:27:20,020
cosine probably doesn't it probably uses

2806
02:27:17,950 --> 02:27:21,971
this quadrant analysis in a high degree

2807
02:27:20,021 --> 02:27:23,739
polynomial probably even higher than

2808
02:27:21,970 --> 02:27:26,739
double precision you know might be

2809
02:27:23,739 --> 02:27:28,751
degree 15 or something I don't know

2810
02:27:26,739 --> 02:27:30,880
yes sir Oh your library does a birth

2811
02:27:28,751 --> 02:27:34,659
place so it's it's worth it it's worth

2812
02:27:30,880 --> 02:27:37,720
it's worth try both ways too you know

2813
02:27:34,659 --> 02:27:39,761
and and you know we'll probably be

2814
02:27:37,720 --> 02:27:42,810
surprised because you know our

2815
02:27:39,761 --> 02:27:49,140
requirements are very different from

2816
02:27:42,810 --> 02:27:52,720
from ceased library you've got yeah and

2817
02:27:49,140 --> 02:27:54,011
and tribal licensing awesome yeah

2818
02:27:52,720 --> 02:27:57,810
there's the audacity bugging like a

2819
02:27:54,011 --> 02:27:57,810
pretty select okay so that's something

2820
02:27:59,190 --> 02:28:05,319
look somebody has probably already

2821
02:28:01,601 --> 02:28:12,461
worked out the bug in this Oh probably

2822
02:28:05,319 --> 02:28:13,120
not yet all right all right so that's so

2823
02:28:12,460 --> 02:28:17,770
that's that

2824
02:28:13,120 --> 02:28:23,859
now the next so before we go on to

2825
02:28:17,771 --> 02:28:27,221
arctangent maybe you can just what it's

2826
02:28:23,860 --> 02:28:30,221
been two and a half hours if you want to

2827
02:28:27,220 --> 02:28:33,220
we can save a attend to for a separate

2828
02:28:30,220 --> 02:28:38,770
time it's really up to you the only

2829
02:28:33,220 --> 02:28:42,310
questions that I see on here were about

2830
02:28:38,771 --> 02:28:46,780
C 0 C 2 C 4 C 6 etc those constants that

2831
02:28:42,310 --> 02:28:48,640
worries for yeah so I was asking do they

2832
02:28:46,780 --> 02:28:52,961
have more precision than can fit in a

2833
02:28:48,640 --> 02:28:55,569
float oh yes that you're only well I've

2834
02:28:52,960 --> 02:28:57,069
written them here in more precision than

2835
02:28:55,569 --> 02:28:58,511
will fit in the float because this is

2836
02:28:57,069 --> 02:29:00,581
what came straight out of Mathematica

2837
02:28:58,511 --> 02:29:04,501
and I decided I'll just dump it all here

2838
02:29:00,581 --> 02:29:04,501
and the compiler will we'll round that

2839
02:29:05,011 --> 02:29:10,931
pretty much you only have about you only

2840
02:29:08,081 --> 02:29:13,360
have about seven digits of decimal

2841
02:29:10,931 --> 02:29:14,860
precision in a floating-point I mean

2842
02:29:13,360 --> 02:29:16,871
these are these are bigger than they are

2843
02:29:14,860 --> 02:29:18,791
as well but you know if you just dump

2844
02:29:16,870 --> 02:29:20,409
more and dump more digits than you need

2845
02:29:18,790 --> 02:29:23,081
in there you know calculate it with a

2846
02:29:20,409 --> 02:29:25,030
double and put it in and stick a little

2847
02:29:23,081 --> 02:29:28,440
F on the end yeah the compiler will

2848
02:29:25,030 --> 02:29:30,280
round it to a float for you yeah yeah

2849
02:29:28,440 --> 02:29:33,700
compilers are smart about that thing

2850
02:29:30,280 --> 02:29:36,700
okay so we'll have a quick look at I

2851
02:29:33,700 --> 02:29:39,970
tear into I there is really two I tend

2852
02:29:36,700 --> 02:29:43,630
to it this is mostly G

2853
02:29:39,969 --> 02:29:48,039
a tree now that this is this is I'm not

2854
02:29:43,629 --> 02:29:51,818
claiming that I tend to is good one of

2855
02:29:48,040 --> 02:29:54,399
the things that we that I did I did a

2856
02:29:51,818 --> 02:29:57,278
little secret stream a couple weeks ago

2857
02:29:54,398 --> 02:29:59,349
where I was riding a tan - if we had a

2858
02:29:57,279 --> 02:30:01,359
look at how handmade hero uses a ten -

2859
02:29:59,350 --> 02:30:04,300
do you know how handmade hero uses I

2860
02:30:01,359 --> 02:30:07,510
tend to so to be honest I don't think we

2861
02:30:04,299 --> 02:30:09,728
really use it yet in any meaningful way

2862
02:30:07,510 --> 02:30:12,040
I was only assuming we would eventually

2863
02:30:09,728 --> 02:30:14,199
use it we could get rid of it right now

2864
02:30:12,040 --> 02:30:17,620
it is just for like joystick direction

2865
02:30:14,200 --> 02:30:19,239
or something stupid like that yeah but

2866
02:30:17,620 --> 02:30:21,399
it's even worse than that

2867
02:30:19,238 --> 02:30:24,189
it's not even joystick direction it only

2868
02:30:21,398 --> 02:30:28,260
returns one it's only called with one of

2869
02:30:24,189 --> 02:30:31,180
four arguments the north south east west

2870
02:30:28,260 --> 02:30:34,930
okay so maybe we don't need to do a tan

2871
02:30:31,180 --> 02:30:38,350
- maybe we don't need to do a ten - and

2872
02:30:34,930 --> 02:30:43,450
maybe we'll talk about this as a few 0.2

2873
02:30:38,350 --> 02:30:46,359
prove again most of a 10 - is quadrant

2874
02:30:43,450 --> 02:30:49,120
analysis and there is a certain amount

2875
02:30:46,359 --> 02:30:51,279
of quadrant analysis that I do here I'm

2876
02:30:49,120 --> 02:30:54,250
using this is a via stress

2877
02:30:51,279 --> 02:30:55,450
transformation maybe maybe maybe we will

2878
02:30:54,250 --> 02:31:00,189
leave this for another time because

2879
02:30:55,450 --> 02:31:02,409
that's server load yeah - for now and we

2880
02:31:00,189 --> 02:31:04,479
can we can do another stream if I put it

2881
02:31:02,409 --> 02:31:12,148
back for a legitimate purpose in the

2882
02:31:04,478 --> 02:31:16,299
future so I will say one thing I tend to

2883
02:31:12,148 --> 02:31:18,728
a 10 he is using the techniques that

2884
02:31:16,299 --> 02:31:21,188
we've been talking about is it is a

2885
02:31:18,728 --> 02:31:23,289
water 15 polynomial here because that's

2886
02:31:21,189 --> 02:31:27,340
as much as I needed to get a good result

2887
02:31:23,290 --> 02:31:31,090
and and there's also a reduction so the

2888
02:31:27,340 --> 02:31:36,488
the range reduction that we that we need

2889
02:31:31,090 --> 02:31:39,909
to know here is if you look at arc if we

2890
02:31:36,488 --> 02:31:45,159
plot that out can looks like this okay

2891
02:31:39,909 --> 02:31:48,309
so it it it maxes maxes out at pi on to

2892
02:31:45,159 --> 02:31:51,279
here and negative PI on to on here but

2893
02:31:48,309 --> 02:31:53,079
what's interesting is that is what

2894
02:31:51,279 --> 02:31:59,110
happens in the range from negative one

2895
02:31:53,079 --> 02:32:01,450
one okay it's it's it's not it looks

2896
02:31:59,110 --> 02:32:04,600
like it's reasonably well behaved it

2897
02:32:01,450 --> 02:32:06,670
actually isn't and one of the nasty

2898
02:32:04,600 --> 02:32:08,850
things about a ten is that when you just

2899
02:32:06,670 --> 02:32:13,960
try the rim as exchange algorithm

2900
02:32:08,850 --> 02:32:16,450
well I rely on it the look really

2901
02:32:13,959 --> 02:32:19,779
doesn't work so well on a tan hmm

2902
02:32:16,450 --> 02:32:26,079
a tennis is behaves really weirdly like

2903
02:32:19,780 --> 02:32:29,021
this so yeah so once again I just use

2904
02:32:26,079 --> 02:32:30,579
Mathematica but I have try my

2905
02:32:29,021 --> 02:32:32,170
implementation of the Rimmer's exchange

2906
02:32:30,579 --> 02:32:34,899
algorithm on a 10 and it really doesn't

2907
02:32:32,170 --> 02:32:40,389
work that well it it it's very hard to

2908
02:32:34,899 --> 02:32:54,629
get it to converge so got you there yes

2909
02:32:40,389 --> 02:32:58,659
sir approximate so it is magic now that

2910
02:32:54,629 --> 02:33:00,159
outside one-to-one what you can use this

2911
02:32:58,659 --> 02:33:10,539
you can use use little identity which is

2912
02:33:00,159 --> 02:33:18,420
a tan of 1 on x equals negative or where

2913
02:33:10,540 --> 02:33:26,140
x is no no it's no it is it's high on

2914
02:33:18,420 --> 02:33:29,760
high on 2 minus 8 10 of X and that's

2915
02:33:26,139 --> 02:33:29,760
pretty much what we do here we use the

2916
02:33:32,940 --> 02:33:40,360
absolute X is greater than case here

2917
02:33:35,771 --> 02:33:43,061
where we just do and then and then

2918
02:33:40,360 --> 02:33:46,680
adjust that so that's that's how we get

2919
02:33:43,060 --> 02:33:49,149
a 10 over the whole range yeah

2920
02:33:46,680 --> 02:33:50,920
plantations once again standard library

2921
02:33:49,149 --> 02:33:53,799
orientation split the domain up into

2922
02:33:50,920 --> 02:33:57,810
more bucks than that because this 15

2923
02:33:53,799 --> 02:33:59,920
gree polynomial is kind of X but this

2924
02:33:57,810 --> 02:34:03,629
however the other thing I want to point

2925
02:33:59,920 --> 02:34:06,100
out is for the cases that handmade hero

2926
02:34:03,629 --> 02:34:09,188
uses a 10 to

2927
02:34:06,100 --> 02:34:14,140
that's that code there I can pretty much

2928
02:34:09,189 --> 02:34:22,109
guarantee because those I've had to

2929
02:34:14,139 --> 02:34:22,108
special case there's once okay the other

2930
02:34:26,459 --> 02:34:31,270
hypotenuse and the reason why I use a

2931
02:34:28,629 --> 02:34:32,890
special function for that is that you

2932
02:34:31,270 --> 02:34:36,010
know Pythagoras theorem it's the square

2933
02:34:32,889 --> 02:34:40,528
root of you know x squared plus y

2934
02:34:36,010 --> 02:34:40,529
squared except that x and y can overflow

2935
02:34:42,270 --> 02:34:48,520
value of x and so this is the hypotenuse

2936
02:34:46,328 --> 02:34:52,449
function up here again I'll come up with

2937
02:34:48,520 --> 02:34:54,998
a better one later but all right sir I

2938
02:34:52,449 --> 02:34:56,560
don't want to explain a 10-2 any further

2939
02:34:54,998 --> 02:34:57,850
right the moment because I said hand me

2940
02:34:56,559 --> 02:34:59,528
here it doesn't really use it at the

2941
02:34:57,850 --> 02:35:02,680
moment but the cases where it does use

2942
02:34:59,529 --> 02:35:05,199
it are dealt with in this so I should

2943
02:35:02,680 --> 02:35:07,148
probably go remove atan2 from the source

2944
02:35:05,199 --> 02:35:10,539
code then but sine and cosine we will

2945
02:35:07,148 --> 02:35:12,068
definitely want so yeah we'll have to

2946
02:35:10,539 --> 02:35:15,850
start taking a look at that based on

2947
02:35:12,068 --> 02:35:16,809
what you've done so far which I thank

2948
02:35:15,850 --> 02:35:19,418
you so much for coming and explaining

2949
02:35:16,809 --> 02:35:21,278
all that that was very clear actually I

2950
02:35:19,418 --> 02:35:26,408
feel like I have a pretty good idea

2951
02:35:21,279 --> 02:35:31,390
about how that sort of stuff goes now

2952
02:35:26,408 --> 02:35:34,118
much more so than I did certainly good

2953
02:35:31,389 --> 02:35:36,549
that's here so let me just um let me

2954
02:35:34,119 --> 02:35:39,640
just load up my Czechia and maybe we can

2955
02:35:36,549 --> 02:35:44,668
go to Q and I know all right let's take

2956
02:35:39,639 --> 02:35:44,668
a look I will put Q and I on here

2957
02:35:51,771 --> 02:35:54,880
hello everyone

2958
02:36:01,129 --> 02:36:05,119
anyone completely lost

2959
02:36:12,200 --> 02:36:21,670
mmm

2960
02:36:15,100 --> 02:36:25,329
too much maths sorry who said that that

2961
02:36:21,670 --> 02:36:28,478
was me okay okay if the values are

2962
02:36:25,329 --> 02:36:35,170
normal they will run away slow that will

2963
02:36:28,478 --> 02:36:37,840
run way slower sorry it 0 B 0 0 which is

2964
02:36:35,170 --> 02:36:39,488
a de normal number thank you for having

2965
02:36:37,840 --> 02:36:42,818
it to normal number as your username by

2966
02:36:39,488 --> 02:36:46,238
the way which cases are you talking for

2967
02:36:42,818 --> 02:36:48,278
which for which for which function okay

2968
02:36:46,238 --> 02:36:51,520
what was the reason we couldn't do two's

2969
02:36:48,279 --> 02:36:53,079
complement in the opponent ah the reason

2970
02:36:51,520 --> 02:36:58,060
why we don't do two's complement is the

2971
02:36:53,079 --> 02:37:03,189
exponent is B is to give is so that if

2972
02:36:58,059 --> 02:37:05,289
you have a bunch of zeros zero you feel

2973
02:37:03,189 --> 02:37:06,520
a block of memory with zero bytes and

2974
02:37:05,290 --> 02:37:09,729
then you read that as a floating-point

2975
02:37:06,520 --> 02:37:12,390
number you get the number zero if you

2976
02:37:09,728 --> 02:37:15,908
used to complement is complement then

2977
02:37:12,389 --> 02:37:17,799
that would be an exponent of 2 to the 0

2978
02:37:15,908 --> 02:37:20,500
which is 1 and that is a very common

2979
02:37:17,799 --> 02:37:22,358
case so that's that's the reason why we

2980
02:37:20,500 --> 02:37:24,189
don't use that's the reason why we use

2981
02:37:22,359 --> 02:37:24,939
the biased representation for the

2982
02:37:24,189 --> 02:37:27,068
exponent

2983
02:37:24,939 --> 02:37:30,430
it's because program is really really

2984
02:37:27,068 --> 02:37:34,359
like it if 0 then read is a number it's

2985
02:37:30,430 --> 02:37:41,260
0 ok sine and cosine all right

2986
02:37:34,359 --> 02:37:44,559
so mr. om is normal number for your for

2987
02:37:41,260 --> 02:37:49,449
your username sine and cosine yes this

2988
02:37:44,559 --> 02:37:51,219
is true when the cosine it's okay if

2989
02:37:49,449 --> 02:37:53,560
this is the question here is essentially

2990
02:37:51,219 --> 02:37:58,448
what happens if you are calculating the

2991
02:37:53,559 --> 02:38:02,250
sine or cosine of a normal number the

2992
02:37:58,449 --> 02:38:09,369
cursive line of a sub normal number is

2993
02:38:02,250 --> 02:38:11,859
all right it's it's close enough to 1/4

2994
02:38:09,369 --> 02:38:15,340
sine of X yes you're right you can just

2995
02:38:11,859 --> 02:38:16,720
use X but the reason why I don't want to

2996
02:38:15,340 --> 02:38:17,228
do that is I don't want to introduce a

2997
02:38:16,719 --> 02:38:20,318
branch

2998
02:38:17,228 --> 02:38:22,778
this is branch free code by design and

2999
02:38:20,318 --> 02:38:26,889
we want to keep it that way for all of

3000
02:38:22,779 --> 02:38:28,540
the reasons we've talked about and yes

3001
02:38:26,889 --> 02:38:34,869
that means it's sly

3002
02:38:28,540 --> 02:38:37,570
imprecise around that range we can check

3003
02:38:34,870 --> 02:38:43,470
to see they're going to be too bad this

3004
02:38:37,569 --> 02:38:45,840
is a wonderful book I read one this is

3005
02:38:43,469 --> 02:38:49,750
let me see if I can find its basic

3006
02:38:45,840 --> 02:38:51,909
animation stand techniques and this is a

3007
02:38:49,750 --> 02:38:55,559
book from way way back in the day of

3008
02:38:51,909 --> 02:39:00,069
traditional animation yeah it's the one

3009
02:38:55,559 --> 02:39:03,010
from 1977 and it was about using these

3010
02:39:00,069 --> 02:39:07,559
these multi playing

3011
02:39:03,010 --> 02:39:10,239
animation cameras it's basically a guy

3012
02:39:07,559 --> 02:39:17,219
Bates camera for a traditional animation

3013
02:39:10,239 --> 02:39:20,649
and stuff that these animation stands 2x

3014
02:39:17,219 --> 02:39:22,090
animation and it's got all of these

3015
02:39:20,649 --> 02:39:24,520
knobs down here I don't know if you can

3016
02:39:22,090 --> 02:39:26,649
see these knobs that do things like

3017
02:39:24,521 --> 02:39:28,271
rotate the camera and rotate the stand

3018
02:39:26,649 --> 02:39:31,329
that it's on a flat sort of thing and

3019
02:39:28,271 --> 02:39:34,230
these really only give you a precision

3020
02:39:31,329 --> 02:39:36,700
to about point zero one of a degree and

3021
02:39:34,229 --> 02:39:38,920
when you had to do pans and zooms and

3022
02:39:36,700 --> 02:39:40,271
rotates and so forth the animation stand

3023
02:39:38,920 --> 02:39:42,309
operator would actually have to

3024
02:39:40,271 --> 02:39:45,550
calculate all the sines and cosines

3025
02:39:42,309 --> 02:39:48,069
probably using tables or a slide rule or

3026
02:39:45,549 --> 02:39:53,379
some combination thereof and would

3027
02:39:48,069 --> 02:39:56,469
calculate and see a rotation of less

3028
02:39:53,379 --> 02:39:58,929
than point zero one degrees it's it's at

3029
02:39:56,469 --> 02:39:59,549
24 frames a second and it's it's

3030
02:39:58,930 --> 02:40:02,170
impossible

3031
02:39:59,549 --> 02:40:13,959
anything that's calculated two point

3032
02:40:02,170 --> 02:40:16,899
zero one degrees of precision looks so I

3033
02:40:13,959 --> 02:40:18,789
guess I'm slightly confused as to the

3034
02:40:16,899 --> 02:40:22,389
question in the first place because I

3035
02:40:18,790 --> 02:40:24,910
mean at least in my experience usually D

3036
02:40:22,389 --> 02:40:26,799
normals you want to flush to zero anyway

3037
02:40:24,909 --> 02:40:28,450
like a game never wants to be running

3038
02:40:26,799 --> 02:40:30,219
with D normal so it should never be

3039
02:40:28,450 --> 02:40:34,780
asking for the cosine a sine of a D

3040
02:40:30,219 --> 02:40:37,090
normal I think that yes so so that was

3041
02:40:34,780 --> 02:40:38,530
just kind of I just want to throw that

3042
02:40:37,090 --> 02:40:40,960
out there is that that these routines

3043
02:40:38,530 --> 02:40:41,951
shouldn't ever take D normals as inputs

3044
02:40:40,959 --> 02:40:43,689
it

3045
02:40:41,950 --> 02:40:45,220
we should have been flushed to zero long

3046
02:40:43,690 --> 02:40:49,690
before it would ever get to this routine

3047
02:40:45,220 --> 02:40:50,979
and so just the specification for what

3048
02:40:49,690 --> 02:40:53,140
these routines should do should not

3049
02:40:50,979 --> 02:40:55,091
include de normals in general it should

3050
02:40:53,140 --> 02:41:00,220
neither accept nor doubt put them

3051
02:40:55,091 --> 02:41:02,711
generally right right cool and and and

3052
02:41:00,220 --> 02:41:07,841
the thing is right and an angle of 2 to

3053
02:41:02,710 --> 02:41:08,770
the minus 126 radians is not perceivable

3054
02:41:07,841 --> 02:41:11,591
as a rotation

3055
02:41:08,771 --> 02:41:13,061
I guess that's that's my point and and

3056
02:41:11,591 --> 02:41:14,261
that's a the rule of thumb that they

3057
02:41:13,060 --> 02:41:16,831
used to use here and this is a knock

3058
02:41:14,261 --> 02:41:19,631
spree animation stand the Disney yet

3059
02:41:16,831 --> 02:41:21,880
multi-plane camera was similar they

3060
02:41:19,630 --> 02:41:24,189
really only work 2.0 one over degree

3061
02:41:21,880 --> 02:41:32,010
anything smaller than that is not really

3062
02:41:24,190 --> 02:41:35,411
perceivable as a rotation yes yeah okay

3063
02:41:32,011 --> 02:41:37,361
alright unless you explicitly run slash

3064
02:41:35,411 --> 02:41:40,960
although one super slow sorry

3065
02:41:37,361 --> 02:41:45,611
or do you mean okay so the question here

3066
02:41:40,960 --> 02:41:47,260
saying that if you actually supply a sub

3067
02:41:45,611 --> 02:41:51,551
normal number to these routines

3068
02:41:47,261 --> 02:41:54,161
it will run slower yes and this is what

3069
02:41:51,550 --> 02:41:56,050
I was able to get this across though

3070
02:41:54,161 --> 02:41:58,271
what I was saying is that in games we

3071
02:41:56,050 --> 02:42:01,450
always turn on flush to zero so you

3072
02:41:58,271 --> 02:42:04,181
don't get D normal numbers yeah in

3073
02:42:01,450 --> 02:42:05,229
general that that's what I was kind of

3074
02:42:04,181 --> 02:42:10,031
trying to get across but I think I

3075
02:42:05,229 --> 02:42:12,040
failed to do so yeah sure and and this

3076
02:42:10,031 --> 02:42:13,721
by the way to anyone watching along this

3077
02:42:12,040 --> 02:42:14,860
is this is the difference between a

3078
02:42:13,720 --> 02:42:18,970
numeric analyst and a game programmer

3079
02:42:14,861 --> 02:42:20,801
right yes I'm pretending to be a numeric

3080
02:42:18,970 --> 02:42:25,030
analyst and Casey is actually a game

3081
02:42:20,800 --> 02:42:27,820
programmer and and this is the this is

3082
02:42:25,031 --> 02:42:29,861
the difference in thinking and you're

3083
02:42:27,820 --> 02:42:32,950
absolutely right for it for if we were

3084
02:42:29,861 --> 02:42:35,320
implementing the C runtime libraries

3085
02:42:32,950 --> 02:42:37,390
version of cosine and sine we would we

3086
02:42:35,320 --> 02:42:41,040
would deal with the submittal case

3087
02:42:37,390 --> 02:42:41,040
separately absolutely

3088
02:42:43,568 --> 02:42:47,680
is there a version of this math source

3089
02:42:46,270 --> 02:42:51,069
code anywhere will be including the

3090
02:42:47,680 --> 02:42:54,158
handmade project eventually both so I'm

3091
02:42:51,068 --> 02:42:57,939
releasing this under the MIT license so

3092
02:42:54,158 --> 02:43:00,219
that handmade hero can use it and I'm

3093
02:42:57,939 --> 02:43:03,100
not sure how I'm going to release it

3094
02:43:00,219 --> 02:43:07,418
maybe on github but the explanation is

3095
02:43:03,100 --> 02:43:09,248
going on the wiki but yeah at the very

3096
02:43:07,418 --> 02:43:11,049
least I mean people people who have

3097
02:43:09,248 --> 02:43:12,279
access to the handmade hero source code

3098
02:43:11,049 --> 02:43:15,068
of obviously going to get it first

3099
02:43:12,279 --> 02:43:17,709
because Casey's probably going to

3100
02:43:15,068 --> 02:43:19,628
incorporate it filly sir well and also

3101
02:43:17,709 --> 02:43:21,279
again this is just for educational

3102
02:43:19,629 --> 02:43:23,680
purposes if you

3103
02:43:21,279 --> 02:43:26,498
there are many math libraries out there

3104
02:43:23,680 --> 02:43:28,359
you can go get implementations of sine

3105
02:43:26,498 --> 02:43:30,520
and cosine and so on the point of this

3106
02:43:28,359 --> 02:43:34,238
was we wanted one that we had gone

3107
02:43:30,520 --> 02:43:35,918
through so we can know how it works and

3108
02:43:34,238 --> 02:43:38,350
everyone's seen how you do one of them

3109
02:43:35,918 --> 02:43:40,119
the idea is not to give you a library

3110
02:43:38,350 --> 02:43:42,338
that you're supposed to use for sine and

3111
02:43:40,119 --> 02:43:44,939
cosine it's you know because there are

3112
02:43:42,338 --> 02:43:48,818
many out there you could you could find

3113
02:43:44,939 --> 02:43:51,338
yes this is exactly right you know the

3114
02:43:48,818 --> 02:44:01,148
the inner standard library is open

3115
02:43:51,338 --> 02:44:02,469
source the ethel is x at least all the

3116
02:44:01,148 --> 02:44:04,930
trouble is of course you will never

3117
02:44:02,469 --> 02:44:07,778
understand them if you look at them and

3118
02:44:04,930 --> 02:44:09,838
this is really a look into how the

3119
02:44:07,779 --> 02:44:12,310
sausage is made

3120
02:44:09,838 --> 02:44:14,318
yeah and hopefully you know if you can

3121
02:44:12,309 --> 02:44:16,778
if you followed that and you know on

3122
02:44:14,318 --> 02:44:19,028
stream I'm gonna basically go and do an

3123
02:44:16,779 --> 02:44:21,459
SSE implementation of you know

3124
02:44:19,029 --> 02:44:23,470
equivalent routines now that we've gone

3125
02:44:21,459 --> 02:44:26,289
through one of them the idea is that

3126
02:44:23,469 --> 02:44:28,478
once you know that then if you do go use

3127
02:44:26,289 --> 02:44:31,779
a library or if you do want to make your

3128
02:44:28,478 --> 02:44:33,728
own versions of sine and cosine for

3129
02:44:31,779 --> 02:44:36,520
specific purposes or try to make them

3130
02:44:33,728 --> 02:44:37,988
faster now you have sort of a basic

3131
02:44:36,520 --> 02:44:39,939
understanding of what's going on so

3132
02:44:37,988 --> 02:44:42,128
you've got your footing there as opposed

3133
02:44:39,939 --> 02:44:43,629
to if we just grabbed something out of

3134
02:44:42,129 --> 02:44:45,159
one of those math libraries we would

3135
02:44:43,629 --> 02:44:47,199
have no idea we just like I don't know

3136
02:44:45,158 --> 02:44:48,850
like who knows how they did it because

3137
02:44:47,199 --> 02:44:51,819
you know again if you haven't gone

3138
02:44:48,850 --> 02:44:53,709
through it you wouldn't yeah exactly

3139
02:44:51,818 --> 02:44:57,550
it's these constants are a case in point

3140
02:44:53,709 --> 02:44:59,829
right these these the these are

3141
02:44:57,550 --> 02:45:03,130
reduction constants that we use in sine

3142
02:44:59,829 --> 02:45:05,649
and cosine here they they you would

3143
02:45:03,130 --> 02:45:07,810
never know where these came from if not

3144
02:45:05,649 --> 02:45:10,479
only explain them to you I mean maybe

3145
02:45:07,810 --> 02:45:17,199
you know it's a it's a it's called a

3146
02:45:10,479 --> 02:45:19,329
herd herd herd II white reduction if you

3147
02:45:17,200 --> 02:45:20,950
want to look it up that's its that's its

3148
02:45:19,329 --> 02:45:22,091
official name I don't know who these

3149
02:45:20,950 --> 02:45:24,159
guys were

3150
02:45:22,091 --> 02:45:26,739
I think it's from a textbook rather than

3151
02:45:24,159 --> 02:45:28,421
a paper but everyone who's who's done

3152
02:45:26,739 --> 02:45:30,251
research like there are papers that

3153
02:45:28,421 --> 02:45:32,351
formally prove these correct if you have

3154
02:45:30,251 --> 02:45:34,421
a fused multiplied add instruction and

3155
02:45:32,351 --> 02:45:36,971
so forth and it's all very fun and very

3156
02:45:34,421 --> 02:45:39,521
important and you don't really need to

3157
02:45:36,970 --> 02:45:54,399
care about but yes curly white reduction

3158
02:45:39,521 --> 02:45:57,730
is will you go through yeah are the

3159
02:45:54,399 --> 02:46:02,470
inverse cosine functions are not really

3160
02:45:57,729 --> 02:46:04,029
useful to us that I know of in handmade

3161
02:46:02,470 --> 02:46:14,229
hero so we probably wouldn't be going

3162
02:46:04,030 --> 02:46:18,671
over those you didn't 73 that that is

3163
02:46:14,229 --> 02:46:20,199
that is me I forgetting pretty much I

3164
02:46:18,671 --> 02:46:21,729
think I skipped most of the first week

3165
02:46:20,200 --> 02:46:25,841
which was introduction to see but I've

3166
02:46:21,729 --> 02:46:28,539
I've been here every time that it's the

3167
02:46:25,841 --> 02:46:31,300
stream all times I don't and I've been

3168
02:46:28,540 --> 02:46:35,761
around so I've if you've been around you

3169
02:46:31,300 --> 02:46:35,760
probably know who I am by my username

3170
02:46:45,210 --> 02:46:56,619
looks like that's it and I guess I'll

3171
02:46:53,079 --> 02:47:08,110
try to bring up one thing really quickly

3172
02:46:56,620 --> 02:47:09,700
here on my end if I can find a quick

3173
02:47:08,110 --> 02:47:17,290
reference to it but otherwise we can go

3174
02:47:09,700 --> 02:47:19,240
in there and so basically if you I'll

3175
02:47:17,290 --> 02:47:22,181
look this up on a different stream but

3176
02:47:19,239 --> 02:47:25,390
for the questioning about the D normal

3177
02:47:22,181 --> 02:47:28,810
numbers in terms of the actual cindy

3178
02:47:25,390 --> 02:47:31,300
unit in the x64 processor that we're

3179
02:47:28,810 --> 02:47:33,101
actually talking about I just again want

3180
02:47:31,300 --> 02:47:35,020
to emphasize the fact that this sort of

3181
02:47:33,101 --> 02:47:39,730
the concern about D normal numbers is

3182
02:47:35,021 --> 02:47:43,601
more of an ex 87 FPU kind of a concern

3183
02:47:39,729 --> 02:47:46,210
like when you're programming an SSE it's

3184
02:47:43,601 --> 02:47:47,860
pretty easy to just make sure that you

3185
02:47:46,210 --> 02:47:49,060
don't have to deal with d normal numbers

3186
02:47:47,860 --> 02:47:53,110
that's not something that's really a

3187
02:47:49,060 --> 02:47:55,060
problem with that not not sure how to

3188
02:47:53,110 --> 02:47:57,101
show that other than just to go over the

3189
02:47:55,060 --> 02:47:58,539
architecture guide but we can do that on

3190
02:47:57,101 --> 02:48:00,579
another stream I could show you in their

3191
02:47:58,540 --> 02:48:02,110
connection guide D normal numbers are

3192
02:48:00,579 --> 02:48:04,539
not really an issue in that way like

3193
02:48:02,110 --> 02:48:07,860
they did the SLO do you normal numbers

3194
02:48:04,540 --> 02:48:09,700
thing used to be a problem on x87 it was

3195
02:48:07,860 --> 02:48:11,051
something you had to think about more

3196
02:48:09,700 --> 02:48:13,391
but it's not loosen me up think about as

3197
02:48:11,050 --> 02:48:16,751
much anymore okay okay

3198
02:48:13,390 --> 02:48:18,579
um and and binary zero I don't know how

3199
02:48:16,751 --> 02:48:20,620
to pronounce you use thank if I can show

3200
02:48:18,579 --> 02:48:22,091
you asked I can show you some versions

3201
02:48:20,620 --> 02:48:25,271
that are completely branches for that

3202
02:48:22,091 --> 02:48:28,211
tables you're interested sure absolutely

3203
02:48:25,271 --> 02:48:30,251
very interested once again this is not

3204
02:48:28,210 --> 02:48:31,779
necessarily I'm not necessarily telling

3205
02:48:30,251 --> 02:48:35,800
you how to do it I'm just telling you

3206
02:48:31,780 --> 02:48:38,409
how I did it and you know I do not claim

3207
02:48:35,800 --> 02:48:41,529
in that this is industrial-strength for

3208
02:48:38,409 --> 02:48:43,960
all applications because yeah and once

3209
02:48:41,530 --> 02:48:48,011
again this quadrant version I intend to

3210
02:48:43,960 --> 02:48:51,340
make this branch free without tables so

3211
02:48:48,011 --> 02:48:53,381
that will happen but yes if you've got

3212
02:48:51,341 --> 02:48:56,711
versions branches that tables by all

3213
02:48:53,380 --> 02:48:57,728
means sure there's there on the end made

3214
02:48:56,710 --> 02:49:05,920
network there'll be

3215
02:48:57,728 --> 02:49:07,959
Aurum entry for this stream uncial and

3216
02:49:05,920 --> 02:49:09,790
also some was asking have we done

3217
02:49:07,959 --> 02:49:11,859
speaking prayers versus the sea versions

3218
02:49:09,790 --> 02:49:15,130
also again that was not really the point

3219
02:49:11,860 --> 02:49:17,170
here this is not an optimization if that

3220
02:49:15,129 --> 02:49:19,629
makes sense so the reason that I wanted

3221
02:49:17,170 --> 02:49:21,520
to have these gone over was because I

3222
02:49:19,629 --> 02:49:24,699
wanted to show how to implement them at

3223
02:49:21,520 --> 02:49:28,030
all not how to beat a particular

3224
02:49:24,700 --> 02:49:29,770
implementation speed wise because again

3225
02:49:28,030 --> 02:49:31,329
that wasn't really the goal in fact in

3226
02:49:29,770 --> 02:49:33,520
handy here right now we have no

3227
02:49:31,329 --> 02:49:35,950
bottleneck on something like sine and

3228
02:49:33,520 --> 02:49:37,659
cosine so we're not specifically

3229
02:49:35,950 --> 02:49:39,760
concerned about producing the fastest

3230
02:49:37,659 --> 02:49:42,639
possible versions there are cases where

3231
02:49:39,760 --> 02:49:44,500
you have sine and cosine in your

3232
02:49:42,639 --> 02:49:46,978
critical path and you really do care

3233
02:49:44,500 --> 02:49:49,090
about making sure that they're very fast

3234
02:49:46,978 --> 02:49:50,500
that's not really something that we have

3235
02:49:49,090 --> 02:49:52,239
a problem with on handmade hero so this

3236
02:49:50,500 --> 02:49:54,670
was more because we just wanted to stop

3237
02:49:52,239 --> 02:49:57,879
using the C runtime versions show you

3238
02:49:54,670 --> 02:50:00,250
how you know the code actually works

3239
02:49:57,879 --> 02:50:01,809
because when there is no magic sine and

3240
02:50:00,250 --> 02:50:03,700
cosine function you have to have some

3241
02:50:01,809 --> 02:50:05,469
way of actually doing it with just you

3242
02:50:03,700 --> 02:50:08,530
know adds subtracts multiplies divides

3243
02:50:05,469 --> 02:50:10,869
and so on and so that was all this was

3244
02:50:08,530 --> 02:50:12,520
for so we don't really even care it

3245
02:50:10,870 --> 02:50:14,229
could be slower than the C version for

3246
02:50:12,520 --> 02:50:16,360
all we care and we still wouldn't care

3247
02:50:14,228 --> 02:50:18,909
that would be something that we would

3248
02:50:16,360 --> 02:50:20,920
look at further on down the line if we

3249
02:50:18,909 --> 02:50:23,739
then determined that some problem with

3250
02:50:20,920 --> 02:50:26,350
our frame rate was related back to our

3251
02:50:23,739 --> 02:50:27,819
sine and cosines chances are these won't

3252
02:50:26,350 --> 02:50:29,620
be slower than C runtime libraries

3253
02:50:27,819 --> 02:50:32,049
though because C runtime errors do a lot

3254
02:50:29,620 --> 02:50:35,620
of that a lot of extra checking if you

3255
02:50:32,049 --> 02:50:37,149
ever looking into them yeah I mean I

3256
02:50:35,620 --> 02:50:39,070
just have a look at this division

3257
02:50:37,149 --> 02:50:40,420
algorithm again right again

3258
02:50:39,069 --> 02:50:42,250
this is slow division do not use this

3259
02:50:40,420 --> 02:50:44,079
you know if you use this in your code

3260
02:50:42,250 --> 02:50:48,100
you deserve the code you get all right

3261
02:50:44,079 --> 02:50:51,010
just making that clear but the point

3262
02:50:48,100 --> 02:50:55,780
here is not that this is fast because it

3263
02:50:51,010 --> 02:50:58,270
isn't the point is to show you the stuff

3264
02:50:55,780 --> 02:51:00,220
that the C standard library the sort of

3265
02:50:58,270 --> 02:51:02,260
stuff it has to do to implement things

3266
02:51:00,219 --> 02:51:03,909
in a compliant way this is the

3267
02:51:02,260 --> 02:51:07,780
industrial-strength part here because

3268
02:51:03,909 --> 02:51:10,360
industry cares about this and so that is

3269
02:51:07,780 --> 02:51:11,260
you know that's that's really the reason

3270
02:51:10,360 --> 02:51:14,079
why I went

3271
02:51:11,260 --> 02:51:18,130
that in not in any detail but justice

3272
02:51:14,079 --> 02:51:23,228
for you and so simply getting rid of

3273
02:51:18,129 --> 02:51:25,719
that is already a win yeah this happens

3274
02:51:23,228 --> 02:51:27,789
in well this is also why we early on in

3275
02:51:25,719 --> 02:51:30,728
handmade hero much earlier than we would

3276
02:51:27,790 --> 02:51:32,649
have had to in terms of getting rid of

3277
02:51:30,728 --> 02:51:36,728
the runtime library thing we replaced

3278
02:51:32,648 --> 02:51:39,579
square root using the SSE square root

3279
02:51:36,728 --> 02:51:40,840
was specifically it was not because

3280
02:51:39,579 --> 02:51:42,670
there's all this much calculation

3281
02:51:40,840 --> 02:51:43,898
involved in doing the square root but

3282
02:51:42,670 --> 02:51:46,359
it's because if you call the C runtime

3283
02:51:43,898 --> 02:51:48,430
square root it does a huge amount of

3284
02:51:46,359 --> 02:51:51,340
preamble work to handle all of these

3285
02:51:48,430 --> 02:51:53,439
additional cases that have to do with

3286
02:51:51,340 --> 02:51:54,818
taking square roots of values that we

3287
02:51:53,439 --> 02:51:57,250
will never take square roots of in

3288
02:51:54,818 --> 02:52:01,420
handmade hero and so that you know is is

3289
02:51:57,250 --> 02:52:03,100
again one of the big reasons to get rid

3290
02:52:01,420 --> 02:52:04,029
of the C runtime library just to get rid

3291
02:52:03,100 --> 02:52:06,068
of all that cruft

3292
02:52:04,029 --> 02:52:07,479
you're already probably starting out

3293
02:52:06,068 --> 02:52:09,148
ahead even if you haven't made it

3294
02:52:07,478 --> 02:52:12,188
particularly a well optimized version

3295
02:52:09,148 --> 02:52:15,039
just not having to deal with all of the

3296
02:52:12,189 --> 02:52:20,260
sort of I Triple E compliance is a huge

3297
02:52:15,040 --> 02:52:22,689
win in and of itself and and just just

3298
02:52:20,260 --> 02:52:25,898
to just to just rub it in this point

3299
02:52:22,689 --> 02:52:27,220
again this is not that it's fast the

3300
02:52:25,898 --> 02:52:30,939
point of this is that its branch free

3301
02:52:27,219 --> 02:52:33,728
and that's I think the basis on which it

3302
02:52:30,939 --> 02:52:35,529
might be more useful in in handmade hero

3303
02:52:33,728 --> 02:52:37,719
the fact that you've fact that you can

3304
02:52:35,529 --> 02:52:39,850
turn this into a four-way sine and

3305
02:52:37,719 --> 02:52:42,429
cosine might actually be where the real

3306
02:52:39,850 --> 02:52:45,689
win is it might not it might not be the

3307
02:52:42,430 --> 02:52:45,689
numerical method itself

3308
02:52:50,600 --> 02:52:53,790
[Music]

3309
02:52:54,329 --> 02:53:00,189
well strength why am I here ah you're

3310
02:52:57,459 --> 02:53:02,739
here because yes I don't know why you're

3311
02:53:00,189 --> 02:53:04,389
here well it's very industrial strength

3312
02:53:02,739 --> 02:53:05,350
does not really handmade heroes thing

3313
02:53:04,389 --> 02:53:07,180
right I mean

3314
02:53:05,350 --> 02:53:10,510
industrial strength on these young guys

3315
02:53:07,180 --> 02:53:11,950
this is this is artisanal if you want

3316
02:53:10,510 --> 02:53:17,770
factory produced you know where to find

3317
02:53:11,950 --> 02:53:20,620
it sure it means the Symbian transistor

3318
02:53:17,770 --> 02:53:23,890
not standard compliant so I don't know

3319
02:53:20,620 --> 02:53:24,820
so it depends on I don't know how well

3320
02:53:23,889 --> 02:53:28,479
the square

3321
02:53:24,819 --> 02:53:31,090
intrinsic is eventually you know they

3322
02:53:28,479 --> 02:53:32,770
probably yeah it might just not be

3323
02:53:31,090 --> 02:53:34,120
seeked like this was the thing that

3324
02:53:32,771 --> 02:53:35,860
Andrew was talking about a little

3325
02:53:34,120 --> 02:53:38,110
earlier in the stream is that there's

3326
02:53:35,860 --> 02:53:40,720
actually a difference between the C

3327
02:53:38,110 --> 02:53:42,940
runtime library standard and the I

3328
02:53:40,719 --> 02:53:45,549
Triple E standard so it's entirely

3329
02:53:42,940 --> 02:53:47,290
possible to have something like oh the

3330
02:53:45,549 --> 02:53:48,699
Intel square-root instruction is

3331
02:53:47,290 --> 02:53:51,220
compliant with the I Triple E standard

3332
02:53:48,700 --> 02:53:52,930
but not compliant with the C runtime

3333
02:53:51,219 --> 02:53:54,909
library standard like that's an actual

3334
02:53:52,930 --> 02:53:56,979
thing that can happen right so I don't

3335
02:53:54,909 --> 02:54:01,569
know the specifics of that but you know

3336
02:53:56,979 --> 02:54:04,600
that's that's just part of the course it

3337
02:54:01,569 --> 02:54:10,629
probably is okay the square root that's

3338
02:54:04,600 --> 02:54:13,720
probably okay but x87 be the old on has

3339
02:54:10,629 --> 02:54:16,239
these it actually has a southern

3340
02:54:13,719 --> 02:54:18,489
implementation yes incidentally and

3341
02:54:16,239 --> 02:54:20,199
there's something that there's something

3342
02:54:18,489 --> 02:54:21,760
here in the software development manual

3343
02:54:20,200 --> 02:54:25,960
that I want to read out to you because

3344
02:54:21,760 --> 02:54:36,340
this is very very important and that is

3345
02:54:25,959 --> 02:54:38,979
not it there I will just and and this

3346
02:54:36,340 --> 02:54:40,659
this if you like is is the reason is

3347
02:54:38,979 --> 02:54:41,829
another way a thing it's said there

3348
02:54:40,659 --> 02:54:45,159
there are the instructions there it's

3349
02:54:41,829 --> 02:54:53,440
got a tan and sine cosine and on all of

3350
02:54:45,159 --> 02:54:54,909
that its accuracy let me see if I can

3351
02:54:53,440 --> 02:54:58,120
find this because this is wonderful cord

3352
02:54:54,909 --> 02:55:07,479
in here that it that I think kind of

3353
02:54:58,120 --> 02:55:08,800
does I can add one thing to the question

3354
02:55:07,479 --> 02:55:11,949
to be sure it means to be in choice or

3355
02:55:08,799 --> 02:55:12,969
not sir also the other thing that Andrew

3356
02:55:11,950 --> 02:55:15,120
mentioned is going on for those

3357
02:55:12,969 --> 02:55:17,439
functions is also true which is that

3358
02:55:15,120 --> 02:55:20,320
just because it takes a lot of

3359
02:55:17,440 --> 02:55:22,120
instructions to implement something like

3360
02:55:20,319 --> 02:55:23,739
standards compliance doesn't mean that

3361
02:55:22,120 --> 02:55:26,380
you can't make circuitry that's very

3362
02:55:23,739 --> 02:55:28,840
efficient to do so like we may have to

3363
02:55:26,379 --> 02:55:30,609
do a bunch of shifting and fiddling and

3364
02:55:28,840 --> 02:55:33,219
extraction and all these other non

3365
02:55:30,610 --> 02:55:35,980
senses and they may be able to make a

3366
02:55:33,219 --> 02:55:37,629
circuit that's quite efficient that does

3367
02:55:35,979 --> 02:55:41,049
all those things in

3368
02:55:37,629 --> 02:55:43,209
of the time right so I you know don't

3369
02:55:41,049 --> 02:55:44,438
don't necessarily take it to mean that

3370
02:55:43,209 --> 02:55:47,109
something that requires a lot of

3371
02:55:44,439 --> 02:55:49,389
instructions when there isn't a CPU

3372
02:55:47,110 --> 02:55:51,250
version of it means that the C fusion

3373
02:55:49,389 --> 02:55:54,010
version CPU version will be slow that's

3374
02:55:51,250 --> 02:55:58,898
not actually always the case in fact it

3375
02:55:54,010 --> 02:56:00,520
may be unrelated okay it might be in the

3376
02:55:58,898 --> 02:56:01,840
optimisation reference manual I might be

3377
02:56:00,520 --> 02:56:03,130
thinking of the different manual I don't

3378
02:56:01,840 --> 02:56:07,389
think I know the past be talking about

3379
02:56:03,129 --> 02:56:11,250
I'm interested to see yeah um you know

3380
02:56:07,389 --> 02:56:13,750
that there are now more pages of

3381
02:56:11,250 --> 02:56:16,510
documentation for a model Intel chip

3382
02:56:13,750 --> 02:56:23,350
than there were transistors in Intel's

3383
02:56:16,510 --> 02:56:24,760
first CPU ah here we go here we go this

3384
02:56:23,350 --> 02:56:26,920
is the pet this is the quorum after this

3385
02:56:24,760 --> 02:56:29,739
is from the authorization you although

3386
02:56:26,920 --> 02:56:32,290
x87 supports transcendental instructions

3387
02:56:29,739 --> 02:56:33,809
software library implementation that's

3388
02:56:32,290 --> 02:56:36,670
that that's incorrect remove

3389
02:56:33,809 --> 02:56:39,549
transcendental function can be faster in

3390
02:56:36,670 --> 02:56:44,139
many cases so there you go that's why

3391
02:56:39,549 --> 02:56:46,478
we're doing it I don't remember that

3392
02:56:44,139 --> 02:56:47,949
being the case I wonder if yeah well I

3393
02:56:46,478 --> 02:56:55,989
suppose it depends if what you were

3394
02:56:47,950 --> 02:56:57,880
taking yeah yes so there you go they

3395
02:56:55,989 --> 02:56:59,680
said there's a little life lesson there

3396
02:56:57,879 --> 02:57:01,209
that's pretty great which is that

3397
02:56:59,680 --> 02:57:06,000
sometimes you can do better in software

3398
02:57:01,209 --> 02:57:09,219
than you can in hardware all right I

3399
02:57:06,000 --> 02:57:13,920
think that we will let you get back to

3400
02:57:09,219 --> 02:57:17,349
your evening Andrew it's actually eat

3401
02:57:13,920 --> 02:57:18,760
he's back to midday but thank you so

3402
02:57:17,350 --> 02:57:21,520
much for taking the time to walk us

3403
02:57:18,760 --> 02:57:24,579
through that that was great and I will

3404
02:57:21,520 --> 02:57:27,939
thank you thank you I will go over those

3405
02:57:24,579 --> 02:57:30,010
routines myself on stream and and we'll

3406
02:57:27,939 --> 02:57:32,319
work through him again so that was that

3407
02:57:30,010 --> 02:57:33,639
was excellent and yeah very educational

3408
02:57:32,319 --> 02:57:38,590
so thank you so much for taking the time

3409
02:57:33,639 --> 02:57:41,769
to talk to us all right no thank you all

3410
02:57:38,590 --> 02:57:48,728
right have a good one yeah okay thanks

3411
02:57:41,770 --> 02:57:51,460
man all right so that was sort of a

3412
02:57:48,728 --> 02:57:55,359
brief introduction to numerical approach

3413
02:57:51,459 --> 02:57:57,339
summation sorts of stuff again it's the

3414
02:57:55,360 --> 02:58:00,400
sort of thing that you can spend a

3415
02:57:57,340 --> 02:58:03,420
tremendous amount of time doing and

3416
02:58:00,399 --> 02:58:07,109
there's people who specialize in this

3417
02:58:03,420 --> 02:58:10,899
and it's it's all they do is numerical

3418
02:58:07,110 --> 02:58:12,400
methods for doing things on computers so

3419
02:58:10,899 --> 02:58:13,989
you know you can take this to the nth

3420
02:58:12,399 --> 02:58:16,750
degree and there's people who are

3421
02:58:13,989 --> 02:58:19,329
probably spending a tremendous amount of

3422
02:58:16,750 --> 02:58:20,649
time doing nothing other than figuring

3423
02:58:19,329 --> 02:58:23,709
out how to make say for example the

3424
02:58:20,649 --> 02:58:26,319
fastest sine and cosine on various chips

3425
02:58:23,709 --> 02:58:29,079
Intel for example does releases

3426
02:58:26,319 --> 02:58:31,389
libraries of mathematical operations for

3427
02:58:29,079 --> 02:58:32,920
their SSE chips where they're trying to

3428
02:58:31,389 --> 02:58:34,478
work out fast ways to do it and so on

3429
02:58:32,920 --> 02:58:37,569
and so forth and you know this this is

3430
02:58:34,478 --> 02:58:39,369
basically a whole sort of area of itself

3431
02:58:37,569 --> 02:58:41,409
unhand me and here we're fortunate

3432
02:58:39,370 --> 02:58:45,400
enough that we don't really have to

3433
02:58:41,409 --> 02:58:46,989
worry too much about getting the very

3434
02:58:45,399 --> 02:58:49,659
fastest sine and cosine or anything like

3435
02:58:46,989 --> 02:58:51,340
that but like I said for completeness I

3436
02:58:49,659 --> 02:58:52,959
really do think we want to go take a

3437
02:58:51,340 --> 02:58:54,460
look at it and that's why I wanted to

3438
02:58:52,959 --> 02:58:56,228
have somebody who kind of knew how to

3439
02:58:54,459 --> 02:58:57,639
make one from scratch show us how to

3440
02:58:56,228 --> 02:58:58,989
make one from scratch and that was

3441
02:58:57,639 --> 02:59:01,329
really good I think I understand it

3442
02:58:58,989 --> 02:59:02,680
pretty well now too and I was always a

3443
02:59:01,329 --> 02:59:04,478
little hazy on that sort of stuff

3444
02:59:02,680 --> 02:59:06,190
because I've never really gone and dug

3445
02:59:04,478 --> 02:59:07,329
into that sort of thing myself the only

3446
02:59:06,190 --> 02:59:08,470
times I've ever used functional

3447
02:59:07,329 --> 02:59:11,020
approximations they were pretty

3448
02:59:08,469 --> 02:59:12,789
straightforward and I never really tried

3449
02:59:11,020 --> 02:59:15,670
to do something more complicated like

3450
02:59:12,790 --> 02:59:18,760
atan2 or sine and cosine which are you

3451
02:59:15,670 --> 02:59:22,149
know more more sort of the real sorts of

3452
02:59:18,760 --> 02:59:26,319
stuff you would be doing for basic math

3453
02:59:22,149 --> 02:59:29,250
library things so what we'll probably do

3454
02:59:26,319 --> 02:59:32,619
is we'll take a look at those again

3455
02:59:29,250 --> 02:59:34,209
because I'm gonna want to kind of go

3456
02:59:32,620 --> 02:59:37,000
through them line by line myself on the

3457
02:59:34,209 --> 02:59:39,309
stream make sure we really do understand

3458
02:59:37,000 --> 02:59:41,290
them and have internalized them and then

3459
02:59:39,309 --> 02:59:44,769
we can go ahead and make SSE versions of

3460
02:59:41,290 --> 02:59:46,450
them actually because there's yeah

3461
02:59:44,770 --> 02:59:48,250
there's a little bit of fun in doing

3462
02:59:46,450 --> 02:59:51,070
that as well just figuring out how we're

3463
02:59:48,250 --> 02:59:52,899
gonna implement those in SSE which is a

3464
02:59:51,069 --> 02:59:54,279
pretty straight translation but again

3465
02:59:52,899 --> 02:59:56,319
you know do we want to try and do the

3466
02:59:54,280 --> 02:59:59,470
quadrant hacking version do we want to

3467
02:59:56,319 --> 03:00:00,819
try and do the lookup table version and

3468
02:59:59,469 --> 03:00:02,228
you know figuring out which ones going

3469
03:00:00,819 --> 03:00:05,770
on maybe we time them see which one's

3470
03:00:02,228 --> 03:00:07,448
faster just for fun anything like that

3471
03:00:05,770 --> 03:00:09,578
so we'll be taking a look more of those

3472
03:00:07,449 --> 03:00:11,979
in the future but again thank you very

3473
03:00:09,578 --> 03:00:14,859
much to Andrew for taking time out of

3474
03:00:11,978 --> 03:00:17,019
his day to show us how you go about

3475
03:00:14,859 --> 03:00:19,149
building those things if you're the kind

3476
03:00:17,020 --> 03:00:20,890
of person who wants to investigate that

3477
03:00:19,148 --> 03:00:22,510
path a little bit more hopefully now

3478
03:00:20,889 --> 03:00:25,538
you've got some some footholds earned

3479
03:00:22,510 --> 03:00:28,148
you can go alright that's it for today

3480
03:00:25,539 --> 03:00:31,119
we will be back next week on handmade

3481
03:00:28,148 --> 03:00:34,510
hero when yeah we will pick back up with

3482
03:00:31,119 --> 03:00:36,340
our lighting code and when Andrews ready

3483
03:00:34,510 --> 03:00:39,670
with that code he said he was going to

3484
03:00:36,340 --> 03:00:41,380
be posting that online as well and so

3485
03:00:39,670 --> 03:00:43,478
we'll pick that up and we'll start

3486
03:00:41,379 --> 03:00:45,158
playing with it with our own version of

3487
03:00:43,478 --> 03:00:47,590
it at that time so thanks everyone for

3488
03:00:45,158 --> 03:00:49,478
joining me and we'll see you next

3489
03:00:47,590 --> 03:00:50,949
weekend until then have fun programming

3490
03:00:49,478 --> 03:00:53,488
and I'll see everyone on the Internet

3491
03:00:50,949 --> 03:00:53,489
take it easy everybody

