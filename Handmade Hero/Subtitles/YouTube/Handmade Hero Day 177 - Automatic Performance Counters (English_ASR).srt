1
00:00:00,680 --> 00:00:04,889
hello everyone and welcome to handmade

2
00:00:03,089 --> 00:00:08,490
Hero the show that we code a complete

3
00:00:04,889 --> 00:00:10,620
game I should say where we code a

4
00:00:08,490 --> 00:00:13,379
complete game live on twitch no engines

5
00:00:10,619 --> 00:00:15,178
no libraries it's just us and one of the

6
00:00:13,380 --> 00:00:16,890
things about it just being us it means

7
00:00:15,179 --> 00:00:19,980
that we have to debug all our code

8
00:00:16,890 --> 00:00:22,080
ourselves of course and one of the

9
00:00:19,980 --> 00:00:24,028
things about debugging code is that it

10
00:00:22,079 --> 00:00:27,479
can be really difficult sometimes to

11
00:00:24,028 --> 00:00:29,490
debug difficult bugs if you don't have

12
00:00:27,480 --> 00:00:31,109
some tools at your disposal obviously

13
00:00:29,489 --> 00:00:32,488
one of those a debugger but another one

14
00:00:31,109 --> 00:00:34,800
that's very common in game development

15
00:00:32,488 --> 00:00:36,328
is actual debug tools that you write

16
00:00:34,799 --> 00:00:38,789
yourself that are built into the game

17
00:00:36,329 --> 00:00:41,189
that help you narrow down the spaces

18
00:00:38,789 --> 00:00:42,988
where bugs could be or help you find the

19
00:00:41,189 --> 00:00:44,849
bugs in the first place and that is what

20
00:00:42,988 --> 00:00:46,828
we are doing right now on handmade hero

21
00:00:44,850 --> 00:00:48,570
we're taking a look at some things that

22
00:00:46,829 --> 00:00:49,859
we can build into our code base that

23
00:00:48,570 --> 00:00:54,570
will allow us to find bugs more

24
00:00:49,859 --> 00:00:56,039
effectively and allow us to sort of if

25
00:00:54,570 --> 00:00:58,079
you will like percolate bugs to the

26
00:00:56,039 --> 00:01:01,859
surface to in cases where bugs may be

27
00:00:58,079 --> 00:01:04,019
hiding or lurking around so we're trying

28
00:01:01,859 --> 00:01:06,570
to make bugs more visible and we're

29
00:01:04,019 --> 00:01:07,978
trying to make them easier to find we

30
00:01:06,569 --> 00:01:09,329
just got started on this yesterday I

31
00:01:07,978 --> 00:01:10,530
gave a little bit of an overview and

32
00:01:09,329 --> 00:01:12,450
then we kind of started programming but

33
00:01:10,530 --> 00:01:14,700
we haven't gotten very far so today will

34
00:01:12,450 --> 00:01:16,109
really be our first full day of coding

35
00:01:14,700 --> 00:01:18,000
on this and we have plenty of stuff to

36
00:01:16,109 --> 00:01:20,129
do so I think we should trust go ahead

37
00:01:18,000 --> 00:01:22,079
and get right into it now today is day

38
00:01:20,129 --> 00:01:25,319
177 so if you preorder the game on

39
00:01:22,079 --> 00:01:29,789
handmade hero org what you want to do is

40
00:01:25,319 --> 00:01:32,008
download day 1 7 unpack day 176 is

41
00:01:29,790 --> 00:01:33,150
source code into a directory and you

42
00:01:32,009 --> 00:01:35,040
want to start working with that because

43
00:01:33,150 --> 00:01:36,270
here on day 1 7 that's what I'm starting

44
00:01:35,040 --> 00:01:40,170
with so if you want to follow along at

45
00:01:36,269 --> 00:01:42,000
home that's the way to do it now if you

46
00:01:40,170 --> 00:01:43,950
remember where we left off yesterday I

47
00:01:42,000 --> 00:01:45,868
had just started making a handmade debug

48
00:01:43,950 --> 00:01:47,280
H which I just wanted to make a separate

49
00:01:45,868 --> 00:01:48,569
file we could start putting debug stuff

50
00:01:47,280 --> 00:01:51,180
in because we're gonna have a lot of it

51
00:01:48,569 --> 00:01:53,639
and I'd like to keep as much as possible

52
00:01:51,180 --> 00:01:55,079
the debug code isolated from the main

53
00:01:53,640 --> 00:01:56,459
code so that we can kind of see what's

54
00:01:55,078 --> 00:01:57,898
debug and what's not and have easier

55
00:01:56,459 --> 00:01:59,728
ways to turn it on and all that sorts of

56
00:01:57,899 --> 00:02:00,868
stuff cuz we've got a bunch of work that

57
00:01:59,728 --> 00:02:02,849
we have to do there so I'm just gonna

58
00:02:00,868 --> 00:02:05,250
start dumping it in this file so that

59
00:02:02,849 --> 00:02:07,679
can kind of keep it separate now what we

60
00:02:05,250 --> 00:02:09,479
did here is we made our we started to

61
00:02:07,680 --> 00:02:10,649
kind of work on our debug cycle counters

62
00:02:09,479 --> 00:02:12,180
and that's because we had already done

63
00:02:10,649 --> 00:02:13,650
them and so I thought the first thing

64
00:02:12,180 --> 00:02:15,840
that might be fun to do

65
00:02:13,650 --> 00:02:17,129
with the debug code and getting that

66
00:02:15,840 --> 00:02:18,629
sort of stuff up and running was to sort

67
00:02:17,129 --> 00:02:20,819
of make these debug counters into

68
00:02:18,629 --> 00:02:22,680
something that was a little more usable

69
00:02:20,819 --> 00:02:29,519
as an exercise and so that's what I'm in

70
00:02:22,680 --> 00:02:32,730
the middle of doing okay so we pretty

71
00:02:29,520 --> 00:02:36,959
much finished that that very simple step

72
00:02:32,729 --> 00:02:38,669
of just making a you know a macro that

73
00:02:36,959 --> 00:02:40,560
instead of having to do a begin and an

74
00:02:38,669 --> 00:02:42,839
end for every time clock that you might

75
00:02:40,560 --> 00:02:45,750
want to do you could actually do it so

76
00:02:42,840 --> 00:02:48,060
that you just have a structure which has

77
00:02:45,750 --> 00:02:49,319
a constructor and a destructor which

78
00:02:48,060 --> 00:02:51,120
will make it so that the compiler will

79
00:02:49,319 --> 00:02:53,459
automatically insert the constructor in

80
00:02:51,120 --> 00:02:54,810
the destructor into the block and then

81
00:02:53,459 --> 00:02:57,209
you can get a start in an end that

82
00:02:54,810 --> 00:02:59,789
happen automatically right but that

83
00:02:57,209 --> 00:03:00,959
still doesn't quite get me in fact it's

84
00:02:59,789 --> 00:03:03,389
not really even getting me anywhere

85
00:03:00,959 --> 00:03:05,759
close to be honest with you to the level

86
00:03:03,389 --> 00:03:08,159
of ease-of-use that I actually want in

87
00:03:05,759 --> 00:03:09,509
my timing system because remember as we

88
00:03:08,159 --> 00:03:11,729
talked about there's a bunch of things

89
00:03:09,509 --> 00:03:13,409
that we want to have happen here in

90
00:03:11,729 --> 00:03:16,049
terms of ease of use and one of the

91
00:03:13,409 --> 00:03:17,849
biggest ones is whenever we have one of

92
00:03:16,050 --> 00:03:20,670
these times like a time clock thing I

93
00:03:17,849 --> 00:03:24,299
want it to be almost free you know as

94
00:03:20,669 --> 00:03:26,548
free as possible to just drop one of

95
00:03:24,299 --> 00:03:28,769
these in anywhere but that is not the

96
00:03:26,549 --> 00:03:31,530
case right so why is that not the case

97
00:03:28,769 --> 00:03:33,180
well first of all so we replaced the you

98
00:03:31,530 --> 00:03:34,739
know the beginning end at the at the

99
00:03:33,180 --> 00:03:36,299
front and end of this thing we base that

100
00:03:34,739 --> 00:03:38,310
with time block so that took care of

101
00:03:36,299 --> 00:03:39,420
like some of that extra typing of having

102
00:03:38,310 --> 00:03:42,329
to go down to the bottom and the block

103
00:03:39,419 --> 00:03:44,969
and do it that's fine right but suppose

104
00:03:42,329 --> 00:03:47,430
I want to time a new function so I want

105
00:03:44,969 --> 00:03:49,349
to time say draw a bitmap right I put

106
00:03:47,430 --> 00:03:51,569
something in here I say draw a bitmap as

107
00:03:49,349 --> 00:03:54,030
far as I'm concerned that's really all I

108
00:03:51,569 --> 00:03:55,799
should have had to do right I should be

109
00:03:54,030 --> 00:03:58,709
able to just go ahead and do it that way

110
00:03:55,799 --> 00:04:00,629
and I just hit compile and now I've got

111
00:03:58,709 --> 00:04:03,360
a new time block but you'll notice with

112
00:04:00,629 --> 00:04:06,120
the system that we constructed earlier

113
00:04:03,360 --> 00:04:07,620
on we don't have that at all right it's

114
00:04:06,120 --> 00:04:08,849
gonna give us an error and the reason

115
00:04:07,620 --> 00:04:11,250
that's gonna give us in areas because

116
00:04:08,849 --> 00:04:13,889
that draw a bitmap needs to correspond

117
00:04:11,250 --> 00:04:17,310
to some kind of an ID that's been sort

118
00:04:13,889 --> 00:04:19,829
of written up in here right and so it

119
00:04:17,310 --> 00:04:21,030
forces the programmer in the middle of

120
00:04:19,829 --> 00:04:23,370
thinking about whatever they're trying

121
00:04:21,029 --> 00:04:25,889
to do it forces the programmer to stop

122
00:04:23,370 --> 00:04:27,000
what they were doing and just to use the

123
00:04:25,889 --> 00:04:29,279
debugging system

124
00:04:27,000 --> 00:04:32,670
come out and remember how this works add

125
00:04:29,279 --> 00:04:35,129
a new debug counter to it right it's

126
00:04:32,670 --> 00:04:36,960
just not that's not the mental flow that

127
00:04:35,129 --> 00:04:38,579
I want I want to be able to spam this in

128
00:04:36,959 --> 00:04:40,439
here and be done right and you remember

129
00:04:38,579 --> 00:04:42,449
we have sort of this with asserts right

130
00:04:40,439 --> 00:04:43,800
I can just say assert buffer is not

131
00:04:42,449 --> 00:04:45,479
equal to zero or something I can just

132
00:04:43,800 --> 00:04:48,120
type that in and now I've just added

133
00:04:45,480 --> 00:04:50,280
some nice debug code that I never have

134
00:04:48,120 --> 00:04:51,870
to worry about again it just works it

135
00:04:50,279 --> 00:04:53,729
does what I want and I didn't have to go

136
00:04:51,870 --> 00:04:55,829
think about any code structure or jump

137
00:04:53,730 --> 00:04:58,379
to another file or anything so that's

138
00:04:55,829 --> 00:05:00,029
where we want our block timing to to end

139
00:04:58,379 --> 00:05:04,219
up I think that's really more where I'd

140
00:05:00,029 --> 00:05:04,219
like to see it be so how do we get there

141
00:05:05,629 --> 00:05:12,659
okay well there's a couple problems that

142
00:05:10,620 --> 00:05:15,389
we have there's a couple of things that

143
00:05:12,660 --> 00:05:17,520
we need to keep in mind the first one is

144
00:05:15,389 --> 00:05:20,219
that this kind of a thing like with

145
00:05:17,519 --> 00:05:22,649
timing a block is somewhat performance

146
00:05:20,220 --> 00:05:25,440
critical the whole point of timing a

147
00:05:22,649 --> 00:05:28,649
block right the only reason that we're

148
00:05:25,439 --> 00:05:31,168
going to time a block is because we want

149
00:05:28,649 --> 00:05:33,449
to know the performance of that part of

150
00:05:31,168 --> 00:05:35,519
the code so the last thing that we want

151
00:05:33,449 --> 00:05:38,399
to do when we go to time a block is

152
00:05:35,519 --> 00:05:41,969
insert a lot of unpredictable overhead

153
00:05:38,399 --> 00:05:43,918
or expense into that operation because

154
00:05:41,970 --> 00:05:47,160
the more expense we insert into that

155
00:05:43,918 --> 00:05:49,079
operation the less we will be able to

156
00:05:47,160 --> 00:05:50,520
use it first of all right if it was

157
00:05:49,079 --> 00:05:53,399
really expensive that would limit the

158
00:05:50,519 --> 00:05:55,469
number we of them we could even do so

159
00:05:53,399 --> 00:05:58,349
that's not good but even more

160
00:05:55,470 --> 00:06:00,450
importantly the more heavyweight the

161
00:05:58,350 --> 00:06:04,110
operation that the block timing has to

162
00:06:00,449 --> 00:06:07,560
do the more it affects the performance

163
00:06:04,110 --> 00:06:09,060
of the code that it is trying to time so

164
00:06:07,560 --> 00:06:11,699
if I'm trying to look at how drawbitmap

165
00:06:09,060 --> 00:06:13,079
performs and I do something in time

166
00:06:11,699 --> 00:06:15,418
block that goes and walks a bunch of

167
00:06:13,079 --> 00:06:18,209
data structures and and copy strings

168
00:06:15,418 --> 00:06:20,189
around and does who knows what I'm going

169
00:06:18,209 --> 00:06:24,750
to be in a situation where the state of

170
00:06:20,189 --> 00:06:28,290
the cache on entry to drawbitmap could

171
00:06:24,750 --> 00:06:31,649
be significantly affected by my attempts

172
00:06:28,290 --> 00:06:33,360
to profile it so it's worth noting here

173
00:06:31,649 --> 00:06:35,279
that I'm not just trying to make this

174
00:06:33,360 --> 00:06:37,460
easy to use I'm also trying to make it

175
00:06:35,279 --> 00:06:40,799
very efficient so that to the extent

176
00:06:37,459 --> 00:06:43,409
reasonably possible it will not undo

177
00:06:40,800 --> 00:06:46,620
we modify the state of the computer as

178
00:06:43,410 --> 00:06:49,770
it rolls through because the more I can

179
00:06:46,620 --> 00:06:54,000
the more I can avoid sort of Heisenberg

180
00:06:49,769 --> 00:07:03,620
in it the more accurate and useful this

181
00:06:54,000 --> 00:07:07,019
timing information will be right okay so

182
00:07:03,620 --> 00:07:09,959
this is going to require some work on

183
00:07:07,019 --> 00:07:11,399
our part it's some relatively major work

184
00:07:09,959 --> 00:07:13,168
that I've been putting off for a while I

185
00:07:11,399 --> 00:07:14,549
came to that at the very beginning of

186
00:07:13,168 --> 00:07:17,129
handmade Hiro

187
00:07:14,550 --> 00:07:19,379
but it's going to start you'll start to

188
00:07:17,129 --> 00:07:21,120
see why some of these things take place

189
00:07:19,379 --> 00:07:22,918
and and we'll kind of show how to deal

190
00:07:21,120 --> 00:07:25,168
with some of them and and all that sort

191
00:07:22,918 --> 00:07:27,089
of stuff but it's it's a good thing so

192
00:07:25,168 --> 00:07:28,589
don't you know relax don't worry too

193
00:07:27,089 --> 00:07:29,728
much about it this is the kind of thing

194
00:07:28,589 --> 00:07:31,859
that I like to do in programming all the

195
00:07:29,728 --> 00:07:33,899
time and changes that are major in my

196
00:07:31,860 --> 00:07:36,090
opinion should not be things that scare

197
00:07:33,899 --> 00:07:37,500
you as long as you are confident and you

198
00:07:36,089 --> 00:07:39,658
keep a good eye on what you're doing

199
00:07:37,500 --> 00:07:42,870
it's not really too much of a problem

200
00:07:39,658 --> 00:07:44,250
but to start with we're not really gonna

201
00:07:42,870 --> 00:07:45,478
go for the major change for it yet we're

202
00:07:44,250 --> 00:07:47,579
gonna go for the minor change and we're

203
00:07:45,478 --> 00:07:49,800
gonna kind of work our way up to it so

204
00:07:47,579 --> 00:07:52,439
first things first how do we get rid of

205
00:07:49,800 --> 00:07:56,069
our IDs well it turns out that in --see

206
00:07:52,439 --> 00:07:58,168
there is a relatively easy way that we

207
00:07:56,069 --> 00:08:00,840
can get some information about where

208
00:07:58,168 --> 00:08:03,180
this time block is in such a way that we

209
00:08:00,839 --> 00:08:05,818
do not need to introduce some additional

210
00:08:03,180 --> 00:08:07,860
enumerate for telling where it is right

211
00:08:05,819 --> 00:08:09,870
and those are the preprocessor

212
00:08:07,860 --> 00:08:12,180
directives that we've already kind of

213
00:08:09,870 --> 00:08:13,319
seen right well actually you know what

214
00:08:12,180 --> 00:08:15,050
now that I think about it maybe we've

215
00:08:13,319 --> 00:08:18,960
never seen them have we ever used these

216
00:08:15,050 --> 00:08:22,139
maybe we haven't all right I guess this

217
00:08:18,959 --> 00:08:25,228
is the first time so that's totally fine

218
00:08:22,139 --> 00:08:30,269
let's go ahead and show what they are so

219
00:08:25,228 --> 00:08:32,009
if I wanted to at any point in see the

220
00:08:30,269 --> 00:08:33,870
preprocessor right the thing that does

221
00:08:32,009 --> 00:08:37,259
like handles pound include and pound to

222
00:08:33,870 --> 00:08:40,500
find that thing right if I want to at

223
00:08:37,259 --> 00:08:41,908
any point in a C program I can go into

224
00:08:40,500 --> 00:08:44,490
and I'll put this right at the beginning

225
00:08:41,908 --> 00:08:47,759
so we can see it I can go into game

226
00:08:44,490 --> 00:08:50,190
update render or anywhere else for that

227
00:08:47,759 --> 00:08:52,139
matter and I can use a set of directives

228
00:08:50,190 --> 00:08:54,270
and here they are right this is just a

229
00:08:52,139 --> 00:09:00,330
couple of them file

230
00:08:54,269 --> 00:09:03,059
chin line these directives will actually

231
00:09:00,330 --> 00:09:05,340
expand to exactly what they say if I

232
00:09:03,059 --> 00:09:06,839
want to I can get the file name of the

233
00:09:05,340 --> 00:09:09,600
file that's currently being compiled

234
00:09:06,840 --> 00:09:11,879
just by using that directive I can get

235
00:09:09,600 --> 00:09:15,060
the function name right by using that

236
00:09:11,879 --> 00:09:18,149
and I can get an actual you know integer

237
00:09:15,059 --> 00:09:20,519
line number by doing that now sometimes

238
00:09:18,149 --> 00:09:21,840
there's some con string nonsense that

239
00:09:20,519 --> 00:09:25,409
happens there so sometimes you have to

240
00:09:21,840 --> 00:09:29,370
cast them and that's because people who

241
00:09:25,409 --> 00:09:33,209
I you know would would slap around a bit

242
00:09:29,370 --> 00:09:34,679
if I got my hands on them think that

243
00:09:33,210 --> 00:09:38,129
forcing people to use cost is a good

244
00:09:34,679 --> 00:09:39,479
idea you know we'll have words we'll

245
00:09:38,129 --> 00:09:43,950
take him out back behind the shed it's

246
00:09:39,480 --> 00:09:45,539
fine but you can always cast that stuff

247
00:09:43,950 --> 00:09:46,860
away so it doesn't pose up too much of a

248
00:09:45,539 --> 00:09:48,389
problem but I'm saying some compilers

249
00:09:46,860 --> 00:09:49,649
like LLVM will give you warnings there

250
00:09:48,389 --> 00:09:52,799
and you have to cast them so we may have

251
00:09:49,649 --> 00:09:54,750
to deal with that when we're going to

252
00:09:52,799 --> 00:09:57,089
other platforms but for the moment on

253
00:09:54,750 --> 00:09:59,340
Windows it's still relatively sane so if

254
00:09:57,090 --> 00:10:03,330
I go ahead now and I make a breakpoint

255
00:09:59,340 --> 00:10:05,090
at game update and render and I run now

256
00:10:03,330 --> 00:10:10,050
you can see that when I step in here

257
00:10:05,090 --> 00:10:13,500
those variables will have the pieces of

258
00:10:10,049 --> 00:10:15,719
information that I asked for set right

259
00:10:13,500 --> 00:10:17,490
so what the compiler is doing here is

260
00:10:15,720 --> 00:10:20,550
the compiler is actually going to embed

261
00:10:17,490 --> 00:10:22,919
these strings into our code when it

262
00:10:20,549 --> 00:10:24,359
compiles it right so it's not like at

263
00:10:22,919 --> 00:10:27,059
this point in the code it's going and

264
00:10:24,360 --> 00:10:28,830
asking some Oracle what the file name is

265
00:10:27,059 --> 00:10:30,629
there anything all it's doing is on the

266
00:10:28,830 --> 00:10:32,910
compile pass it's actually seeing that

267
00:10:30,629 --> 00:10:34,500
this existed it's seeing like say what

268
00:10:32,909 --> 00:10:36,059
function it is or what file it is and

269
00:10:34,500 --> 00:10:38,820
it's actually adding to the string table

270
00:10:36,059 --> 00:10:40,229
that string and pointing this at that

271
00:10:38,820 --> 00:10:42,510
piece of the data segment of the

272
00:10:40,230 --> 00:10:44,789
executable right so it's just adding

273
00:10:42,509 --> 00:10:45,840
basically constants but those constants

274
00:10:44,789 --> 00:10:47,610
are automatically defined by the

275
00:10:45,840 --> 00:10:49,350
compiler so we don't have to worry about

276
00:10:47,610 --> 00:10:50,759
doing it ourselves or making them

277
00:10:49,350 --> 00:10:52,680
out-of-date we don't have to go oh it's

278
00:10:50,759 --> 00:10:54,179
line 843 and put 843 there and then

279
00:10:52,679 --> 00:10:57,509
worried that when we add lines begin the

280
00:10:54,179 --> 00:10:59,339
file that becomes wrong right so it's

281
00:10:57,509 --> 00:11:00,689
pretty nice so the line number 843 that

282
00:10:59,340 --> 00:11:02,040
is what it is right the function name is

283
00:11:00,690 --> 00:11:04,290
game update and render which it is

284
00:11:02,039 --> 00:11:07,500
that's great we have the filename which

285
00:11:04,289 --> 00:11:10,529
is also a they're 841

286
00:11:07,500 --> 00:11:13,070
and there's one other which I to be

287
00:11:10,529 --> 00:11:19,289
honest with you I don't super remember

288
00:11:13,070 --> 00:11:23,250
whether it's it's actually allowed in in

289
00:11:19,289 --> 00:11:26,730
all C compilers I think it probably is

290
00:11:23,250 --> 00:11:29,970
at this point and so I'm gonna kind of

291
00:11:26,730 --> 00:11:32,460
show you I'm gonna show it to you and I

292
00:11:29,970 --> 00:11:34,170
think at this point it's probably safe

293
00:11:32,460 --> 00:11:35,400
for us to use I don't know if we'll have

294
00:11:34,169 --> 00:11:39,899
to use it but I just want you to be

295
00:11:35,399 --> 00:11:41,279
aware of it because it can be kind of

296
00:11:39,899 --> 00:11:43,319
useful for certain situations that we

297
00:11:41,279 --> 00:11:46,199
may find ourselves in I can't really

298
00:11:43,320 --> 00:11:48,629
predict if we will or not but I'm just

299
00:11:46,200 --> 00:11:50,520
gonna go ahead and show you so assuming

300
00:11:48,629 --> 00:11:53,429
that M SBC supports the sky which I'm

301
00:11:50,519 --> 00:11:56,970
pretty sure he does or she I don't know

302
00:11:53,429 --> 00:12:00,239
the gender of Visual Studio probably an

303
00:11:56,970 --> 00:12:02,790
it would be my guess so I'm gonna run

304
00:12:00,240 --> 00:12:04,980
through here and you can kind of see

305
00:12:02,789 --> 00:12:08,159
that each one of these guys now takes on

306
00:12:04,980 --> 00:12:09,779
a value that is the number of times that

307
00:12:08,159 --> 00:12:12,029
underscore underscore counter has

308
00:12:09,779 --> 00:12:14,699
actually appeared in this file

309
00:12:12,029 --> 00:12:17,549
now there really isn't too much of a

310
00:12:14,700 --> 00:12:20,310
point in doing this other than the fact

311
00:12:17,549 --> 00:12:22,109
that in theory if you were trying to use

312
00:12:20,309 --> 00:12:24,959
something like a line number to

313
00:12:22,110 --> 00:12:26,730
disambiguate something in a macro if two

314
00:12:24,960 --> 00:12:29,100
of those appeared on the same line they

315
00:12:26,730 --> 00:12:30,269
would have the same number so counter

316
00:12:29,100 --> 00:12:32,759
with especially when we're dealing with

317
00:12:30,269 --> 00:12:34,169
debug situations counter is a good thing

318
00:12:32,759 --> 00:12:35,819
to know is available because if you find

319
00:12:34,169 --> 00:12:37,979
yourself in a situation where multiple

320
00:12:35,820 --> 00:12:41,250
things on the same line want to be able

321
00:12:37,980 --> 00:12:43,560
to be distinguished by some kind of a

322
00:12:41,250 --> 00:12:45,899
preprocessor number you've got a way

323
00:12:43,559 --> 00:12:48,419
that you can reliably do that and so

324
00:12:45,899 --> 00:12:49,860
that can be kind of handy right so those

325
00:12:48,419 --> 00:12:51,179
are some things that just to be aware of

326
00:12:49,860 --> 00:12:53,759
because now we're gonna start using

327
00:12:51,179 --> 00:12:56,069
those to help us do some things

328
00:12:53,759 --> 00:12:57,569
automatically and again this is not

329
00:12:56,070 --> 00:12:59,790
typically something that you really need

330
00:12:57,570 --> 00:13:02,120
to use too much in your action in your

331
00:12:59,789 --> 00:13:05,969
actual production shipping C++ code

332
00:13:02,120 --> 00:13:08,490
sometimes you do but it is something

333
00:13:05,970 --> 00:13:11,910
that you will absolutely use all the

334
00:13:08,490 --> 00:13:13,860
time in the debug augmentation of that

335
00:13:11,909 --> 00:13:16,708
C++ code and here is a perfect example

336
00:13:13,860 --> 00:13:18,360
of where we're going to do that so what

337
00:13:16,708 --> 00:13:20,629
I'd like to do now is if I go ahead and

338
00:13:18,360 --> 00:13:22,909
take this time to block here

339
00:13:20,629 --> 00:13:25,189
and I have that drawbitmap what I would

340
00:13:22,909 --> 00:13:27,049
like to do is be able to and let's just

341
00:13:25,190 --> 00:13:29,660
you know go hog-wild here let's just say

342
00:13:27,049 --> 00:13:31,969
we want you know we want everything

343
00:13:29,659 --> 00:13:33,588
let's say we can just go okay we don't

344
00:13:31,970 --> 00:13:35,028
want to be able we don't say anything we

345
00:13:33,589 --> 00:13:37,009
just want to say time block and the

346
00:13:35,028 --> 00:13:38,689
block is timed I don't want to know

347
00:13:37,009 --> 00:13:40,250
anything else about it I don't care I

348
00:13:38,690 --> 00:13:42,050
just want you to time that block and I

349
00:13:40,250 --> 00:13:43,940
want you to display it for me in some

350
00:13:42,049 --> 00:13:46,250
way later on that's going to let me know

351
00:13:43,940 --> 00:13:47,779
what block was time so that I can go

352
00:13:46,250 --> 00:13:51,740
find it again if I'm curious right

353
00:13:47,778 --> 00:13:55,309
that's what I want okay so in order to

354
00:13:51,740 --> 00:13:56,448
do that we see this time block we know

355
00:13:55,309 --> 00:13:57,828
that we're going to instantiate one of

356
00:13:56,448 --> 00:14:00,559
these so this part stays basically the

357
00:13:57,828 --> 00:14:03,349
same right but then this part is going

358
00:14:00,559 --> 00:14:06,229
to be a little more complicated we don't

359
00:14:03,350 --> 00:14:08,089
have any way of using an ID here or

360
00:14:06,230 --> 00:14:09,350
anything really right too

361
00:14:08,089 --> 00:14:11,600
you know we don't have any way of

362
00:14:09,350 --> 00:14:14,449
disambiguating this because the person

363
00:14:11,600 --> 00:14:16,909
hasn't passed in an ID but that is again

364
00:14:14,448 --> 00:14:18,500
the perfect place where we could go

365
00:14:16,909 --> 00:14:20,750
ahead and stick say the line number in

366
00:14:18,500 --> 00:14:22,850
so now we know that even if someone has

367
00:14:20,750 --> 00:14:25,129
x the same block multiple times for some

368
00:14:22,850 --> 00:14:28,699
reason we know that this timed walk will

369
00:14:25,129 --> 00:14:30,318
never name conflict with itself right so

370
00:14:28,698 --> 00:14:32,000
that's a perfect example of a way we

371
00:14:30,318 --> 00:14:33,528
could use line to disambiguate so now we

372
00:14:32,000 --> 00:14:34,188
can just do time block we don't to pass

373
00:14:33,528 --> 00:14:37,549
an anything

374
00:14:34,188 --> 00:14:39,379
okay that's step one step two is okay we

375
00:14:37,549 --> 00:14:41,899
can't pass the bug cycle counter right

376
00:14:39,379 --> 00:14:43,039
because debug cycle counter is this enum

377
00:14:41,899 --> 00:14:45,169
sort of thing so we have to switch to

378
00:14:43,039 --> 00:14:48,049
using something again that isn't going

379
00:14:45,169 --> 00:14:53,568
to be you know isn't gonna be something

380
00:14:48,049 --> 00:14:55,578
we have to predefined but in addition to

381
00:14:53,568 --> 00:14:57,828
that we also need some way of

382
00:14:55,578 --> 00:14:59,568
identifying where it is right because

383
00:14:57,828 --> 00:15:01,969
since we're not gonna use any kind of

384
00:14:59,568 --> 00:15:03,438
predefined values anymore we're not

385
00:15:01,970 --> 00:15:04,879
gonna be able to know when we see the

386
00:15:03,438 --> 00:15:07,669
results of this timing we're not going

387
00:15:04,879 --> 00:15:09,078
to be able to know where the actual time

388
00:15:07,669 --> 00:15:10,309
block was in the code so we see

389
00:15:09,078 --> 00:15:12,258
something comes up when it's like hey it

390
00:15:10,309 --> 00:15:14,149
took 4 milliseconds oh well maybe we

391
00:15:12,259 --> 00:15:15,560
should go optimize that too bad I don't

392
00:15:14,149 --> 00:15:17,149
know where it is it just says debug

393
00:15:15,559 --> 00:15:20,000
counter 4 or something right well that's

394
00:15:17,149 --> 00:15:21,708
no good so clearly what we'd like to do

395
00:15:20,000 --> 00:15:24,139
here is pass some information that we

396
00:15:21,708 --> 00:15:27,559
can use to both disambiguate which timer

397
00:15:24,139 --> 00:15:30,680
this is in our debug code but also be

398
00:15:27,559 --> 00:15:32,039
able to determine where it is when we

399
00:15:30,679 --> 00:15:35,819
actually then go to

400
00:15:32,039 --> 00:15:37,620
to display it to the user and so again

401
00:15:35,820 --> 00:15:38,820
we already kind of know the stuff

402
00:15:37,620 --> 00:15:41,310
because I just showed you what they were

403
00:15:38,820 --> 00:15:44,579
it's pretty trivial for us to say

404
00:15:41,309 --> 00:15:46,859
something like this where now we will be

405
00:15:44,578 --> 00:15:50,669
passing all of this useful very useful

406
00:15:46,860 --> 00:15:54,060
information about the location into the

407
00:15:50,669 --> 00:15:55,708
into the actual time block so we can we

408
00:15:54,059 --> 00:16:00,179
can accept it here right we can get the

409
00:15:55,708 --> 00:16:02,879
file name we can get the line number and

410
00:16:00,179 --> 00:16:04,559
we can get the function name so we can

411
00:16:02,879 --> 00:16:06,689
pass that useful information in and so

412
00:16:04,559 --> 00:16:09,028
not only will that allow us say with the

413
00:16:06,690 --> 00:16:11,130
file name plus line number would totally

414
00:16:09,028 --> 00:16:12,509
disambiguate it because we know we're

415
00:16:11,129 --> 00:16:15,328
not gonna have multiple time you know no

416
00:16:12,509 --> 00:16:16,980
one's gonna write this right but even if

417
00:16:15,328 --> 00:16:18,448
they did if we wanted to we could if we

418
00:16:16,980 --> 00:16:21,269
found ourselves in that situation we

419
00:16:18,448 --> 00:16:22,500
could even go one further right so even

420
00:16:21,269 --> 00:16:24,629
if they did want to do that for some

421
00:16:22,500 --> 00:16:26,000
reason we don't care but if you did you

422
00:16:24,629 --> 00:16:29,278
could you could even go one step further

423
00:16:26,000 --> 00:16:30,750
so that is an easy way to make sure that

424
00:16:29,278 --> 00:16:32,220
we can both disambiguate it because file

425
00:16:30,750 --> 00:16:34,440
name plus line number will do that and

426
00:16:32,220 --> 00:16:35,699
then we also have plenty of information

427
00:16:34,440 --> 00:16:36,930
because file name plus line number and

428
00:16:35,698 --> 00:16:38,250
function name which we can just print

429
00:16:36,929 --> 00:16:41,429
out as a convenience so the user doesn't

430
00:16:38,250 --> 00:16:43,078
have to look and see oh it's that's you

431
00:16:41,429 --> 00:16:44,729
know what's in that file line or oh it's

432
00:16:43,078 --> 00:16:48,028
draw bitmap now we know it's just just

433
00:16:44,730 --> 00:16:51,720
draw a bitmap no problem right so that's

434
00:16:48,028 --> 00:16:53,159
pretty useful so now you can see that we

435
00:16:51,720 --> 00:16:56,399
have enough information to do our jobs

436
00:16:53,159 --> 00:16:58,439
but we don't really have a way of

437
00:16:56,399 --> 00:17:04,199
actually doing exactly the same work

438
00:16:58,440 --> 00:17:08,039
that we did before because in order to

439
00:17:04,199 --> 00:17:10,529
do that exact same work we would have to

440
00:17:08,039 --> 00:17:12,568
have some way of mapping a file name and

441
00:17:10,529 --> 00:17:14,668
a line number down to an ID which we

442
00:17:12,568 --> 00:17:16,548
don't really have right we don't have

443
00:17:14,669 --> 00:17:19,169
any way of kind of collapsing that thing

444
00:17:16,548 --> 00:17:22,470
so we now need to start to think about

445
00:17:19,169 --> 00:17:24,750
what we're gonna do to translate a file

446
00:17:22,470 --> 00:17:26,250
a name line number into an ID now

447
00:17:24,750 --> 00:17:28,470
there's a lot of pretty trivial ways we

448
00:17:26,250 --> 00:17:30,210
could do this right anyone who's had

449
00:17:28,470 --> 00:17:32,000
intro to computer science or as program

450
00:17:30,210 --> 00:17:34,769
for a while at all or anything like that

451
00:17:32,000 --> 00:17:38,009
knows that we could make something like

452
00:17:34,769 --> 00:17:40,319
a map for example where we can just

453
00:17:38,009 --> 00:17:42,150
search you know look up you know we

454
00:17:40,319 --> 00:17:43,379
could make a binary tree or even we

455
00:17:42,150 --> 00:17:45,480
could just do a brute-force search we

456
00:17:43,380 --> 00:17:46,090
could do anything we wanted to try and

457
00:17:45,480 --> 00:17:49,089
match up

458
00:17:46,089 --> 00:17:52,089
file name line number pair with you know

459
00:17:49,089 --> 00:17:53,289
other you know with other ones of its

460
00:17:52,089 --> 00:17:54,909
type so we could just you know make a

461
00:17:53,289 --> 00:17:57,099
little thing that's gonna store our

462
00:17:54,910 --> 00:17:58,779
counters we look to see if the file line

463
00:17:57,099 --> 00:18:00,099
number is there if it is there we

464
00:17:58,779 --> 00:18:03,279
increment it if it's not we make a new

465
00:18:00,099 --> 00:18:04,719
entry for it and off we go right so I

466
00:18:03,279 --> 00:18:08,589
could just start typing that here you

467
00:18:04,720 --> 00:18:12,789
know find you know find ID from file

468
00:18:08,589 --> 00:18:14,529
name line number right and then I could

469
00:18:12,789 --> 00:18:16,869
pass in the file name and the line

470
00:18:14,529 --> 00:18:21,160
number it could go do that stuff and

471
00:18:16,869 --> 00:18:23,579
then we'd have the ID right and then all

472
00:18:21,160 --> 00:18:25,420
this stuff would work totally fine right

473
00:18:23,579 --> 00:18:28,799
everyone's happy

474
00:18:25,420 --> 00:18:28,800
no problem we all know how to write that

475
00:18:31,019 --> 00:18:40,539
however not so useful potentially if we

476
00:18:37,900 --> 00:18:44,280
get in a situation where that's gonna do

477
00:18:40,539 --> 00:18:47,889
a bunch of actual work because now our

478
00:18:44,279 --> 00:18:51,129
timer code right is going to be in a

479
00:18:47,890 --> 00:18:54,070
situation where it's doing traversals of

480
00:18:51,130 --> 00:18:55,930
a binary tree or searching through you

481
00:18:54,069 --> 00:18:58,119
know some list of memory or something

482
00:18:55,930 --> 00:19:00,039
like that to find matches to things and

483
00:18:58,119 --> 00:19:02,619
that's exactly the sort of thing that we

484
00:19:00,039 --> 00:19:04,629
really didn't want to have happen now it

485
00:19:02,619 --> 00:19:07,739
may be right

486
00:19:04,630 --> 00:19:10,660
it certainly could potentially be

487
00:19:07,740 --> 00:19:13,210
plausible that that is still the best

488
00:19:10,660 --> 00:19:15,220
thing to do and I will tell you why in a

489
00:19:13,210 --> 00:19:17,140
second but I would like to at least

490
00:19:15,220 --> 00:19:19,000
mention another method that may be the

491
00:19:17,140 --> 00:19:20,500
one that we'd like to try first because

492
00:19:19,000 --> 00:19:22,440
it has definite distinct advantages

493
00:19:20,500 --> 00:19:25,000
certain certain very distinct advantages

494
00:19:22,440 --> 00:19:28,059
okay so the thing that I would like to

495
00:19:25,000 --> 00:19:32,160
do here instead is what I'd rather do is

496
00:19:28,059 --> 00:19:34,779
just store the file name line number and

497
00:19:32,160 --> 00:19:35,920
then not have to ever find it until

498
00:19:34,779 --> 00:19:38,470
later when we go to print out this

499
00:19:35,920 --> 00:19:41,580
information right because if you imagine

500
00:19:38,470 --> 00:19:41,579
something like this

501
00:19:42,808 --> 00:19:47,878
where I've got a timer record and I can

502
00:19:45,388 --> 00:19:49,769
just say something like okay let's say

503
00:19:47,878 --> 00:19:53,009
I've got a thread index or something

504
00:19:49,769 --> 00:19:56,220
like this I've got a line number I've

505
00:19:53,009 --> 00:20:00,419
got a care star filename and a function

506
00:19:56,220 --> 00:20:03,600
name write something like this and then

507
00:20:00,419 --> 00:20:09,028
I've got whatever the the you 64 is it

508
00:20:03,599 --> 00:20:13,319
it's the RT t SC value right the time

509
00:20:09,028 --> 00:20:18,359
stamp yeah so if I do something like

510
00:20:13,319 --> 00:20:19,888
this when I use my timer record one sry

511
00:20:18,359 --> 00:20:22,528
timer record if I do something like that

512
00:20:19,888 --> 00:20:24,648
then every time through here and here I

513
00:20:22,528 --> 00:20:26,999
could just do a time stamp and just

514
00:20:24,648 --> 00:20:29,219
write out one of those structures right

515
00:20:26,999 --> 00:20:32,278
so all it is the only pollution that it

516
00:20:29,220 --> 00:20:33,839
does is writing that thing out and it

517
00:20:32,278 --> 00:20:35,099
really you know you could even I could

518
00:20:33,839 --> 00:20:36,359
imagine doing something absolutely

519
00:20:35,099 --> 00:20:37,769
ridiculous here in trying to even do a

520
00:20:36,359 --> 00:20:38,849
non-temporal store or something really

521
00:20:37,769 --> 00:20:39,960
close like this so that you didn't

522
00:20:38,849 --> 00:20:47,178
really pollute the cash at all

523
00:20:39,960 --> 00:20:49,619
potentially right so that's one option

524
00:20:47,179 --> 00:20:53,309
the reason I bring that option up is

525
00:20:49,618 --> 00:20:57,269
because if you are planning on calling

526
00:20:53,308 --> 00:20:59,038
this a reasonable number of times like

527
00:20:57,269 --> 00:21:03,649
if I'm planning on not calling it say a

528
00:20:59,038 --> 00:21:05,819
million times that might be a good idea

529
00:21:03,648 --> 00:21:06,479
if you are planning on calling it a

530
00:21:05,819 --> 00:21:10,288
million times

531
00:21:06,480 --> 00:21:12,839
well now you're adding you know several

532
00:21:10,288 --> 00:21:14,368
megabytes of right bandwidth to what

533
00:21:12,839 --> 00:21:17,158
you're doing and that could affect your

534
00:21:14,368 --> 00:21:18,778
performance as well right so it's kind

535
00:21:17,159 --> 00:21:21,210
of hard to say one way or the other

536
00:21:18,778 --> 00:21:24,808
which one of these things is going to be

537
00:21:21,210 --> 00:21:26,579
you know the most efficacious now it's

538
00:21:24,808 --> 00:21:32,368
worth noting that if you take a look at

539
00:21:26,579 --> 00:21:34,138
this right you could imagine trimming

540
00:21:32,368 --> 00:21:36,569
this down a little bit potentially I

541
00:21:34,138 --> 00:21:39,089
don't know how much but you could

542
00:21:36,569 --> 00:21:41,428
imagine doing something well to be

543
00:21:39,089 --> 00:21:43,709
honest it's going to end up being you're

544
00:21:41,429 --> 00:21:47,190
gonna need an 8 8 byte value for the

545
00:21:43,710 --> 00:21:48,538
timestamp the pointers here I feel like

546
00:21:47,190 --> 00:21:50,788
there's not a whole lot you would be

547
00:21:48,538 --> 00:21:52,769
able to do with those unfortunately I

548
00:21:50,788 --> 00:21:54,269
wish that C++ allowed you to do things

549
00:21:52,769 --> 00:21:55,359
that weren't pointers for string tables

550
00:21:54,269 --> 00:21:56,710
because man

551
00:21:55,359 --> 00:21:58,899
would help a lot of stuff because really

552
00:21:56,710 --> 00:22:01,179
these could just be pretty much 8-bit

553
00:21:58,900 --> 00:22:04,210
values if the compiler were actually you

554
00:22:01,179 --> 00:22:05,769
know flexible and good you know it could

555
00:22:04,210 --> 00:22:10,539
this could have been something as simple

556
00:22:05,769 --> 00:22:14,619
as this basically right at least and so

557
00:22:10,539 --> 00:22:17,889
that's literally 128 bits it's 1 mm op

558
00:22:14,619 --> 00:22:20,139
right to write that out and again you

559
00:22:17,890 --> 00:22:21,880
could do that completely in a way that

560
00:22:20,140 --> 00:22:25,840
maybe even bypass the cache if you want

561
00:22:21,880 --> 00:22:28,299
to be super fancy so that would be a

562
00:22:25,839 --> 00:22:30,849
pretty great thing unfortunately that's

563
00:22:28,298 --> 00:22:32,440
not the situation we're pretty much only

564
00:22:30,849 --> 00:22:34,869
gonna be able to have these guys like

565
00:22:32,440 --> 00:22:36,340
that and so at that point this pretty

566
00:22:34,869 --> 00:22:38,048
much ends up being a fairly balanced

567
00:22:36,339 --> 00:22:41,079
truck it's just twice as large as what I

568
00:22:38,048 --> 00:22:43,660
would have liked right so it's you it's

569
00:22:41,079 --> 00:22:45,909
a eight bytes eight bytes eight bytes

570
00:22:43,660 --> 00:22:50,259
eight bytes right so it's it's basically

571
00:22:45,910 --> 00:22:52,210
you know 32 32 bytes right so every time

572
00:22:50,259 --> 00:22:55,480
through on the time block you'd do a 32

573
00:22:52,210 --> 00:22:57,610
byte write on you know on the on the

574
00:22:55,480 --> 00:22:59,558
entry and the exit so it's 64 bytes 4

575
00:22:57,609 --> 00:23:01,629
times block written but that's basically

576
00:22:59,558 --> 00:23:06,940
it so the are m tts c plus the 64 bytes

577
00:23:01,630 --> 00:23:09,340
written that you know might be the

578
00:23:06,940 --> 00:23:11,590
easiest thing to do I don't know I'm

579
00:23:09,339 --> 00:23:15,849
just pointing it out and then you would

580
00:23:11,589 --> 00:23:18,220
collate those later on so I don't know I

581
00:23:15,849 --> 00:23:20,048
don't know offhand if it's been a long

582
00:23:18,220 --> 00:23:22,390
time since I've written a debug system

583
00:23:20,048 --> 00:23:24,490
and I haven't done a lot of testing on

584
00:23:22,390 --> 00:23:26,830
modern machines I don't know which one

585
00:23:24,490 --> 00:23:28,029
of these they would prefer I don't know

586
00:23:26,829 --> 00:23:29,889
if they would prefer to have these

587
00:23:28,029 --> 00:23:32,470
things collapsed before or after the

588
00:23:29,890 --> 00:23:34,390
fact what I do know is certainly when

589
00:23:32,470 --> 00:23:36,370
the number of timed blocks gets low

590
00:23:34,390 --> 00:23:39,580
enough you would almost certainly want

591
00:23:36,369 --> 00:23:45,909
the log version but that's about all I

592
00:23:39,579 --> 00:23:49,329
could really tell you okay

593
00:23:45,910 --> 00:23:50,980
so I'm gonna do the log version because

594
00:23:49,329 --> 00:23:53,649
I think the log version is a little more

595
00:23:50,980 --> 00:23:55,930
interesting to me it also has some nice

596
00:23:53,650 --> 00:23:58,090
properties that allow us to do some

597
00:23:55,930 --> 00:23:59,500
stuff a little later that is a little

598
00:23:58,089 --> 00:24:01,509
bit harder to do in a multi-threading

599
00:23:59,500 --> 00:24:04,029
context if you don't do the logged

600
00:24:01,509 --> 00:24:06,190
version but you know that's kind of

601
00:24:04,029 --> 00:24:08,200
separate well that's that's not really -

602
00:24:06,190 --> 00:24:09,970
that's that that may be overstating in a

603
00:24:08,200 --> 00:24:11,980
little bit to say the least

604
00:24:09,970 --> 00:24:13,720
alright so anyway this is something that

605
00:24:11,980 --> 00:24:16,150
we would like to do and by the way it's

606
00:24:13,720 --> 00:24:17,950
worth noting that really all of this is

607
00:24:16,150 --> 00:24:20,680
just compensation for the fact again

608
00:24:17,950 --> 00:24:23,620
that C++ is not a particularly good

609
00:24:20,680 --> 00:24:25,870
language and so one thing that it cannot

610
00:24:23,619 --> 00:24:28,000
do in a particularly easy way is

611
00:24:25,869 --> 00:24:29,949
aggregate this data out what you would

612
00:24:28,000 --> 00:24:32,200
rather do is you'd rather have something

613
00:24:29,950 --> 00:24:34,299
that generated this effectively exactly

614
00:24:32,200 --> 00:24:36,309
what I did here you would want it to

615
00:24:34,299 --> 00:24:38,859
collapse down a set of indices and those

616
00:24:36,309 --> 00:24:40,960
indices correspond to you know numbers

617
00:24:38,859 --> 00:24:43,899
which are like where in the code do

618
00:24:40,960 --> 00:24:45,789
timed blocks occur right and you would

619
00:24:43,900 --> 00:24:56,950
want to be able to bake that number into

620
00:24:45,789 --> 00:25:03,700
the thing although you know what I'm

621
00:24:56,950 --> 00:25:07,000
having a thought I'm having a thought

622
00:25:03,700 --> 00:25:14,740
right now a thought that I have not had

623
00:25:07,000 --> 00:25:20,769
before and that thought is because we

624
00:25:14,740 --> 00:25:22,180
are doing a single compilation unit well

625
00:25:20,769 --> 00:25:26,950
we have two compilation units

626
00:25:22,180 --> 00:25:31,990
technically but even so does that mean

627
00:25:26,950 --> 00:25:37,269
we could just use counter to actually do

628
00:25:31,990 --> 00:25:40,230
that list collapse because it kind of

629
00:25:37,269 --> 00:25:40,230
feels like we could

630
00:25:47,650 --> 00:25:50,880
are you thinking what I'm thinking

631
00:25:58,349 --> 00:26:02,519
I mean it doesn't say specifically but

632
00:26:01,048 --> 00:26:04,168
you know what let's just do a test

633
00:26:02,519 --> 00:26:07,259
because you know this is something that

634
00:26:04,169 --> 00:26:09,960
you can't come pretty sure counter since

635
00:26:07,259 --> 00:26:11,788
it's a preprocessor directive if you're

636
00:26:09,960 --> 00:26:13,590
normally compiling in the way that most

637
00:26:11,788 --> 00:26:16,288
C++ products are compiled where you have

638
00:26:13,589 --> 00:26:18,899
one file you know separate file per

639
00:26:16,288 --> 00:26:21,960
class or stuff like that you can't do

640
00:26:18,900 --> 00:26:24,509
this but if you compile everything as

641
00:26:21,960 --> 00:26:26,220
one file counter actually will expand to

642
00:26:24,509 --> 00:26:28,798
a unique number for every place that

643
00:26:26,220 --> 00:26:31,019
times lock occurs so technically

644
00:26:28,798 --> 00:26:33,089
speaking I think we might actually be

645
00:26:31,019 --> 00:26:35,639
able to totally cheese out on this and

646
00:26:33,089 --> 00:26:37,589
just get around the entire problem by

647
00:26:35,640 --> 00:26:39,299
leaning on counter in a way that I'd

648
00:26:37,589 --> 00:26:41,129
never thought to do before because I

649
00:26:39,298 --> 00:26:43,829
never really thought about how you write

650
00:26:41,130 --> 00:26:45,090
a debug system under the single unit

651
00:26:43,829 --> 00:26:46,859
compilation schema so we've only been

652
00:26:45,089 --> 00:26:48,899
doing for the past like six or seven

653
00:26:46,859 --> 00:26:51,918
years and I haven't really done much

654
00:26:48,900 --> 00:26:57,080
with new debug code in that time ah

655
00:26:51,919 --> 00:27:07,130
let's I'm kind of interested to try that

656
00:26:57,079 --> 00:27:11,519
let's try that shall we okay I'm I'm

657
00:27:07,130 --> 00:27:12,720
really interested I am legitimately kind

658
00:27:11,519 --> 00:27:15,750
of interested in what's about to happen

659
00:27:12,720 --> 00:27:17,700
here I don't really know what's going to

660
00:27:15,750 --> 00:27:18,329
happen but I am legitimately pretty

661
00:27:17,700 --> 00:27:21,509
interested

662
00:27:18,329 --> 00:27:24,389
okay so let's test this out so if I have

663
00:27:21,509 --> 00:27:25,500
my time block thing here so instead

664
00:27:24,390 --> 00:27:27,000
we're gonna have a thing that's like

665
00:27:25,500 --> 00:27:31,038
okay it's gonna pass the counter is the

666
00:27:27,000 --> 00:27:31,038
first thing or something like that right

667
00:27:33,019 --> 00:27:40,470
so if I'm passing the counter is the

668
00:27:35,190 --> 00:27:43,230
first thing and I guess at that point I

669
00:27:40,470 --> 00:27:44,579
would want to do something where I turn

670
00:27:43,230 --> 00:27:46,288
I guess we've got another time block

671
00:27:44,579 --> 00:27:49,308
down here somewhere right so we don't

672
00:27:46,288 --> 00:27:53,200
let's turn that off for a second

673
00:27:49,308 --> 00:28:00,839
oops this guy's got to stay in there

674
00:27:53,200 --> 00:28:03,009
okay this is this is very interesting

675
00:28:00,839 --> 00:28:04,509
this is gonna be pretty interesting if

676
00:28:03,009 --> 00:28:07,799
this works out to be if this turns out

677
00:28:04,509 --> 00:28:16,119
to be good I'll be pretty I'll be pretty

678
00:28:07,799 --> 00:28:19,000
interested interested right okay so if i

679
00:28:16,119 --> 00:28:20,049
do that now i guess handmade render

680
00:28:19,000 --> 00:28:21,339
groups the wrong place to do it cuz

681
00:28:20,049 --> 00:28:23,289
that's actually in the one other

682
00:28:21,339 --> 00:28:25,359
compilation unit we have but what I'm

683
00:28:23,289 --> 00:28:31,240
gonna do here is I'm gonna put one in

684
00:28:25,359 --> 00:28:32,229
make sphere diffuse map right and well I

685
00:28:31,240 --> 00:28:34,390
guess I'll try do something that can

686
00:28:32,230 --> 00:28:36,970
step into a little bit easier so we'll

687
00:28:34,390 --> 00:28:39,520
put one in debug reset and then I'm

688
00:28:36,970 --> 00:28:42,630
gonna go into the asset system and I'm

689
00:28:39,519 --> 00:28:46,420
gonna put one in the asset startup okay

690
00:28:42,630 --> 00:28:48,520
and these are in totally separate files

691
00:28:46,420 --> 00:28:50,950
I want to see if we end up with the

692
00:28:48,519 --> 00:28:53,200
value 0 and one for our counters that's

693
00:28:50,950 --> 00:28:56,670
what I'd like to do so I'm gonna just

694
00:28:53,200 --> 00:28:59,850
make a breakpoint at the constructor for

695
00:28:56,670 --> 00:29:03,820
the time to block I'm gonna step in I'm

696
00:28:59,849 --> 00:29:06,490
gonna see what we get past counter is

697
00:29:03,819 --> 00:29:10,569
zero on the first one and that's for

698
00:29:06,490 --> 00:29:19,480
handmade asset 539 allocate game assets

699
00:29:10,569 --> 00:29:22,569
okay oops and counter is one for

700
00:29:19,480 --> 00:29:31,539
handmade dot cpp line number 675 debug

701
00:29:22,569 --> 00:29:38,399
reset well then that is pretty darn

702
00:29:31,539 --> 00:29:41,399
interesting that is pretty darned

703
00:29:38,400 --> 00:29:41,400
interesting

704
00:29:41,549 --> 00:29:46,450
well then I suppose there's only a few

705
00:29:44,950 --> 00:29:49,539
things we would need to know in order to

706
00:29:46,450 --> 00:29:53,920
make this work pretty much exactly the

707
00:29:49,539 --> 00:29:56,799
way we want it to we only have two

708
00:29:53,920 --> 00:29:58,269
translation units right the two

709
00:29:56,799 --> 00:30:00,460
translation units are defined at our

710
00:29:58,269 --> 00:30:03,279
build batch file here they are right

711
00:30:00,460 --> 00:30:05,079
we've got this one right here

712
00:30:03,279 --> 00:30:08,309
handmade optimized yeah we've got this

713
00:30:05,079 --> 00:30:10,419
one right here handmade that's EBP right

714
00:30:08,309 --> 00:30:12,429
those are the only two translation units

715
00:30:10,420 --> 00:30:14,200
we have so at the end of those

716
00:30:12,430 --> 00:30:16,779
translation units we know exactly where

717
00:30:14,200 --> 00:30:18,490
they stopped right hand made here at CBP

718
00:30:16,779 --> 00:30:21,819
is here that means that if I were to put

719
00:30:18,490 --> 00:30:25,240
counter right there that would be the

720
00:30:21,819 --> 00:30:28,109
number of things that we actually had

721
00:30:25,240 --> 00:30:33,640
the number of debug things that we had

722
00:30:28,109 --> 00:30:37,629
well that means debug record something

723
00:30:33,640 --> 00:30:42,790
like this right debug records brackets

724
00:30:37,630 --> 00:30:45,820
counter and I could call this main debug

725
00:30:42,789 --> 00:30:50,349
records or something like that that

726
00:30:45,819 --> 00:30:52,689
would give me an array that I know has

727
00:30:50,349 --> 00:30:54,759
all of the debug records in it that

728
00:30:52,690 --> 00:30:59,559
that's big enough to hold all of the

729
00:30:54,759 --> 00:31:02,740
debug records right and furthermore I

730
00:30:59,559 --> 00:31:05,169
could make a second one inside the other

731
00:31:02,740 --> 00:31:09,190
translation group which is the optimized

732
00:31:05,170 --> 00:31:12,070
one right where is that optimized which

733
00:31:09,190 --> 00:31:13,420
is here draw a rectangle quickly oh so I

734
00:31:12,069 --> 00:31:14,939
guess yeah render group I guess wasn't

735
00:31:13,420 --> 00:31:17,170
in there it's just all returned quickly

736
00:31:14,940 --> 00:31:23,920
so I could make a second one in there

737
00:31:17,170 --> 00:31:26,170
right up timaeus debug records now I

738
00:31:23,920 --> 00:31:29,380
have two arrays that I know are big

739
00:31:26,170 --> 00:31:31,269
enough to hold all of the debug records

740
00:31:29,380 --> 00:31:34,590
that I might have with there with those

741
00:31:31,269 --> 00:31:34,589
counters right

742
00:31:36,279 --> 00:31:47,410
I mean presumably you can see where this

743
00:31:43,359 --> 00:31:49,659
is going so now I really don't have to

744
00:31:47,410 --> 00:31:52,720
do anything if I want to be able to

745
00:31:49,660 --> 00:31:55,509
store to map this info in I pretty much

746
00:31:52,720 --> 00:31:57,009
just overwrite it every time so if I go

747
00:31:55,509 --> 00:31:58,299
into handmade debug and I want to make

748
00:31:57,009 --> 00:32:00,069
this time block thing work

749
00:31:58,299 --> 00:32:03,279
well the counter tells me exactly where

750
00:32:00,069 --> 00:32:06,250
to look it up right so I've got

751
00:32:03,279 --> 00:32:07,960
something like this right and in fact

752
00:32:06,250 --> 00:32:09,099
you can kind of you can see I mean

753
00:32:07,960 --> 00:32:10,480
there's only you know exactly what I'm

754
00:32:09,099 --> 00:32:11,919
about to do right this is kind of it's

755
00:32:10,480 --> 00:32:14,230
almost self-explanatory at this point is

756
00:32:11,920 --> 00:32:16,630
that what we want to do so at this point

757
00:32:14,230 --> 00:32:18,910
all we have to do is say all right when

758
00:32:16,630 --> 00:32:21,120
we compile are optimized we just do

759
00:32:18,910 --> 00:32:29,400
something like defined debug prefix

760
00:32:21,119 --> 00:32:35,289
equals optimized minus the debug prefix

761
00:32:29,400 --> 00:32:40,030
equals main and now I know which one I

762
00:32:35,289 --> 00:32:42,009
am doing right optimized because debug

763
00:32:40,029 --> 00:32:45,579
prefix depending on the compilation unit

764
00:32:42,009 --> 00:32:47,319
will actually give me the you know will

765
00:32:45,579 --> 00:32:51,099
tell me which one of these I'm going to

766
00:32:47,319 --> 00:32:54,549
want and so in order to access the

767
00:32:51,099 --> 00:32:57,730
proper set of debug records all I would

768
00:32:54,549 --> 00:33:00,879
have to do is and you know you I could I

769
00:32:57,730 --> 00:33:02,440
could make this a little bit I don't

770
00:33:00,880 --> 00:33:04,840
know if the forward declaration of this

771
00:33:02,440 --> 00:33:05,980
would work exactly well I'll show you

772
00:33:04,839 --> 00:33:07,569
where I'm going with this in a second

773
00:33:05,980 --> 00:33:11,049
and you can see we'll play around it and

774
00:33:07,569 --> 00:33:13,359
see which one will work okay so if I

775
00:33:11,049 --> 00:33:17,639
were to say struct debug record in fact

776
00:33:13,359 --> 00:33:20,169
I probably can I get that now can

777
00:33:17,640 --> 00:33:23,380
extract debug record in here just leave

778
00:33:20,170 --> 00:33:24,789
it like that so if I wanted to I don't

779
00:33:23,380 --> 00:33:27,880
think I I don't know if I can pre

780
00:33:24,789 --> 00:33:31,139
declare this like this I'm not sure if

781
00:33:27,880 --> 00:33:31,140
that'll work I doubt that it will

782
00:33:32,220 --> 00:33:42,629
yeah that's fine because this will get

783
00:33:40,798 --> 00:33:47,099
one soon enough so that's actually

784
00:33:42,628 --> 00:33:48,928
totally fine let's just make sure that

785
00:33:47,099 --> 00:33:59,189
works though we'll take it out of here

786
00:33:48,929 --> 00:34:00,538
first and look at in a second so it

787
00:33:59,190 --> 00:34:02,850
looks like we can pre declare that just

788
00:34:00,538 --> 00:34:06,419
fine so actually we're totally good I

789
00:34:02,849 --> 00:34:09,898
think I think everything should be just

790
00:34:06,419 --> 00:34:10,648
about peachy so we just have to do

791
00:34:09,898 --> 00:34:15,750
something like this

792
00:34:10,648 --> 00:34:18,449
pound - fine declare forward we're debug

793
00:34:15,750 --> 00:34:23,940
records with that or forward player

794
00:34:18,449 --> 00:34:27,318
debug records like so and we just make

795
00:34:23,940 --> 00:34:30,329
that a macro which passes in the name

796
00:34:27,318 --> 00:34:34,050
and all it does is it creates one of

797
00:34:30,329 --> 00:34:36,510
these by using the paste operator with

798
00:34:34,050 --> 00:34:38,519
whatever that predefined thing was in

799
00:34:36,510 --> 00:34:40,879
the build right so I'm just trying to

800
00:34:38,519 --> 00:34:43,619
get two of these one for each

801
00:34:40,878 --> 00:34:46,828
translation unit that I've got right so

802
00:34:43,619 --> 00:34:49,858
I do declare debug records I pass in you

803
00:34:46,829 --> 00:34:54,000
know declare debug records debug records

804
00:34:49,858 --> 00:34:58,469
there we go and now presumably that will

805
00:34:54,000 --> 00:35:00,030
just work right then in here if I want

806
00:34:58,469 --> 00:35:01,828
the debug record that properly

807
00:35:00,030 --> 00:35:04,220
corresponds to the one that I want I

808
00:35:01,829 --> 00:35:06,810
know that all I have to do is take

809
00:35:04,219 --> 00:35:09,328
whatever the debug records are here

810
00:35:06,809 --> 00:35:11,190
right so something like access debug

811
00:35:09,329 --> 00:35:15,318
record and it would be like an index

812
00:35:11,190 --> 00:35:18,900
right something like that I'm assuming

813
00:35:15,318 --> 00:35:21,449
maybe right then all I have to do is

814
00:35:18,900 --> 00:35:27,260
just do this debug prefix prompt debug

815
00:35:21,449 --> 00:35:27,259
records plus B index yeah

816
00:35:28,070 --> 00:35:32,800
and that should give me the debug record

817
00:35:31,250 --> 00:35:36,559
in fact I could do it like that as well

818
00:35:32,800 --> 00:35:37,930
so I just do debug record counter and

819
00:35:36,559 --> 00:35:42,710
I'd be done

820
00:35:37,929 --> 00:35:44,089
yeah what is the problem here index is

821
00:35:42,710 --> 00:35:47,860
an undeclared identifier oh well I

822
00:35:44,090 --> 00:35:52,610
should probably make that pound define

823
00:35:47,860 --> 00:35:57,920
alright uh debug prefix oh the paste

824
00:35:52,610 --> 00:36:01,730
operator ah right

825
00:35:57,920 --> 00:36:03,200
this is that nasty thing man

826
00:36:01,730 --> 00:36:08,420
alright this is gonna make our lives a

827
00:36:03,199 --> 00:36:09,429
little bit a little bit harder um I take

828
00:36:08,420 --> 00:36:12,440
it back

829
00:36:09,429 --> 00:36:14,239
I'm gonna make this easier on myself the

830
00:36:12,440 --> 00:36:15,980
way that the preprocessor paste operator

831
00:36:14,239 --> 00:36:19,429
works is really annoying and you can't

832
00:36:15,980 --> 00:36:21,349
you it can't do the pasting with names

833
00:36:19,429 --> 00:36:23,000
cuz they don't get expanded beforehand

834
00:36:21,349 --> 00:36:24,920
unless they were a macro parameter and

835
00:36:23,000 --> 00:36:26,840
all this other nonsense which is what's

836
00:36:24,920 --> 00:36:28,309
going on there and there's a few tricks

837
00:36:26,840 --> 00:36:30,170
you can do to make that happen but I

838
00:36:28,309 --> 00:36:34,279
guess what I could do instead is just

839
00:36:30,170 --> 00:36:38,420
debug record array right dude debug

840
00:36:34,280 --> 00:36:41,150
record array equals like debug records

841
00:36:38,420 --> 00:36:45,289
optimized and here we could just do

842
00:36:41,150 --> 00:36:48,980
debug record array those debug records

843
00:36:45,289 --> 00:36:50,150
main I could just do that and that way

844
00:36:48,980 --> 00:36:53,990
we don't have to deal with all its

845
00:36:50,150 --> 00:36:55,910
nonsense right then there's no there's

846
00:36:53,989 --> 00:37:00,679
no funny business there I can just do

847
00:36:55,909 --> 00:37:02,690
something like ok debug record debug

848
00:37:00,679 --> 00:37:05,480
record array and it'll you know the

849
00:37:02,690 --> 00:37:07,550
macro will sort of substitute that and

850
00:37:05,480 --> 00:37:09,380
then we just say ok we pre declare it

851
00:37:07,550 --> 00:37:12,050
and then accessing it is just as simple

852
00:37:09,380 --> 00:37:16,849
as saying I want to go ahead and and

853
00:37:12,050 --> 00:37:19,910
grab the counter at one like so and then

854
00:37:16,849 --> 00:37:21,650
the at the end of the pan made and those

855
00:37:19,909 --> 00:37:25,029
guys don't have to do anything else I

856
00:37:21,650 --> 00:37:28,490
could just literally do you know do that

857
00:37:25,030 --> 00:37:31,700
you know I mean and furthermore I guess

858
00:37:28,489 --> 00:37:34,459
this one because they're in both I could

859
00:37:31,699 --> 00:37:37,909
do something where I do debug record

860
00:37:34,460 --> 00:37:40,050
array where were those things that build

861
00:37:37,909 --> 00:37:44,730
back debug records

862
00:37:40,050 --> 00:37:47,010
so I can just pre declare them both here

863
00:37:44,730 --> 00:37:48,480
because that's totally fine there's no I

864
00:37:47,010 --> 00:37:50,550
don't think there's any harm in doing

865
00:37:48,480 --> 00:37:51,809
that well no that's not true

866
00:37:50,550 --> 00:37:54,269
there is a little harm in doing that

867
00:37:51,809 --> 00:37:55,559
because if I do that then it'll have a

868
00:37:54,269 --> 00:37:57,300
multiplet affined symbol in the two

869
00:37:55,559 --> 00:37:57,989
compilation yes so we'll stick with what

870
00:37:57,300 --> 00:38:03,510
I had before

871
00:37:57,989 --> 00:38:05,969
all right so now I think we've managed

872
00:38:03,510 --> 00:38:08,480
to screw it that entire problem and we

873
00:38:05,969 --> 00:38:11,009
now actually are just getting the diva

874
00:38:08,480 --> 00:38:14,340
record arrayed collapsing for free like

875
00:38:11,010 --> 00:38:16,800
it was just done and so now all I have

876
00:38:14,340 --> 00:38:18,870
to do is just write do that one right

877
00:38:16,800 --> 00:38:20,430
and it's just writing to a known

878
00:38:18,869 --> 00:38:21,630
location so it's not gonna proliferate

879
00:38:20,429 --> 00:38:24,079
the amount of data or anything like that

880
00:38:21,630 --> 00:38:29,010
and it's just gonna be totally fine

881
00:38:24,079 --> 00:38:32,309
right I think I think it's literally

882
00:38:29,010 --> 00:38:34,020
just that's it so if we take a look at

883
00:38:32,309 --> 00:38:40,440
this we've got the line number and

884
00:38:34,019 --> 00:38:42,449
function name stuff yeah I think we just

885
00:38:40,440 --> 00:38:44,369
say okay there's the record we do file

886
00:38:42,449 --> 00:38:46,049
name equals file name we do record line

887
00:38:44,369 --> 00:38:48,329
them because line number we do record

888
00:38:46,050 --> 00:38:53,519
function name cuz function name we do

889
00:38:48,329 --> 00:38:57,809
record clocks you know plus equals the

890
00:38:53,519 --> 00:38:59,219
our DTSC and we'll have to kind of watch

891
00:38:57,809 --> 00:39:06,090
it to do a little work there to make

892
00:38:59,219 --> 00:39:07,129
sure that's macro Bowl right actually I

893
00:39:06,090 --> 00:39:11,160
guess it kind of works the other way

894
00:39:07,130 --> 00:39:13,470
subtract the our DTSC and then when we

895
00:39:11,159 --> 00:39:15,809
come down here again the only thing that

896
00:39:13,469 --> 00:39:18,689
we'd have to store here I think is we

897
00:39:15,809 --> 00:39:25,519
just have to store the counter value

898
00:39:18,690 --> 00:39:25,519
right so I think that would work yeah

899
00:39:26,210 --> 00:39:33,170
this is counter an it

900
00:39:29,360 --> 00:39:34,579
count 3 equals countering it and sit

901
00:39:33,170 --> 00:39:37,519
them down here all we would have to do

902
00:39:34,579 --> 00:39:38,630
is get that debug record back and I

903
00:39:37,519 --> 00:39:40,699
guess technically we could just store

904
00:39:38,630 --> 00:39:42,500
the pointer to the debug record actually

905
00:39:40,699 --> 00:39:45,829
I think about it we don't actually need

906
00:39:42,500 --> 00:39:46,250
the counter in it stuff we just go like

907
00:39:45,829 --> 00:39:49,639
that

908
00:39:46,250 --> 00:39:53,780
and then down here we just say okay that

909
00:39:49,639 --> 00:40:03,079
record the clocks plus equal started

910
00:39:53,780 --> 00:40:05,360
keys I think that just works I'm kind of

911
00:40:03,079 --> 00:40:07,279
surprised I never thought to do that

912
00:40:05,360 --> 00:40:09,140
before because counter was never

913
00:40:07,280 --> 00:40:11,120
available the first time I made well for

914
00:40:09,139 --> 00:40:14,929
a second third and fourth times I made

915
00:40:11,119 --> 00:40:20,389
debug systems so never thought of that

916
00:40:14,929 --> 00:40:23,960
but I think that just works I don't

917
00:40:20,389 --> 00:40:28,309
really know why it wouldn't so let's

918
00:40:23,960 --> 00:40:29,900
just see if it did what would we need to

919
00:40:28,309 --> 00:40:33,320
do to see if it did well we've got

920
00:40:29,900 --> 00:40:35,660
printouts now to some degree so let's go

921
00:40:33,320 --> 00:40:38,269
ahead and just just replace everything

922
00:40:35,659 --> 00:40:40,849
with this instead instead of what we

923
00:40:38,269 --> 00:40:42,650
were doing let's just pull on say ok

924
00:40:40,849 --> 00:40:44,239
inside handmade platform you know what

925
00:40:42,650 --> 00:40:46,010
just vaporize all this stuff it's gone

926
00:40:44,239 --> 00:40:47,869
right and we can we can get the hip

927
00:40:46,010 --> 00:40:53,830
count and put the hit count back in here

928
00:40:47,869 --> 00:40:57,190
if we want to - right just keep that

929
00:40:53,829 --> 00:40:57,190
sorted like so

930
00:40:59,769 --> 00:41:06,079
all we have to do for that is just you

931
00:41:02,630 --> 00:41:07,400
know Inc the hit count every time now

932
00:41:06,079 --> 00:41:08,420
this is not thread safe or anything like

933
00:41:07,400 --> 00:41:10,490
that so there's some things we might

934
00:41:08,420 --> 00:41:16,450
want to think about there as well but

935
00:41:10,489 --> 00:41:16,449
you know one step at a time

936
00:41:21,099 --> 00:41:27,049
well alright so now that we've got that

937
00:41:24,679 --> 00:41:28,399
if I just blow this stuff away right if

938
00:41:27,050 --> 00:41:30,860
we just say this stuff is gone

939
00:41:28,400 --> 00:41:35,869
so goodbye write debug cycle counter is

940
00:41:30,860 --> 00:41:40,430
gone now when I come in here we'd get

941
00:41:35,869 --> 00:41:44,960
rid of these counters and we'll get rid

942
00:41:40,429 --> 00:41:46,730
of all this stuff right I guess here's a

943
00:41:44,960 --> 00:41:51,130
10 time block counter thing so that's

944
00:41:46,730 --> 00:41:53,539
one that we may want to support as well

945
00:41:51,130 --> 00:41:57,590
how come begin time block didn't give me

946
00:41:53,539 --> 00:41:59,210
an error is it still defined begin time

947
00:41:57,590 --> 00:42:01,789
block okay these are all still defined

948
00:41:59,210 --> 00:42:05,599
so I'm gonna also go ahead and just give

949
00:42:01,789 --> 00:42:07,759
these out for a minute like so so that

950
00:42:05,599 --> 00:42:09,529
all of those things will get errors so

951
00:42:07,760 --> 00:42:13,400
I'm going to change this to ty blach

952
00:42:09,530 --> 00:42:17,440
draw a rectangle quickly I'm gonna

953
00:42:13,400 --> 00:42:17,440
change this to time block process pixel

954
00:42:20,769 --> 00:42:32,449
get clamped rect area fill rect over to

955
00:42:24,050 --> 00:42:34,160
is that is that actually known it here

956
00:42:32,449 --> 00:42:36,619
it is so what I'm going to do here is

957
00:42:34,159 --> 00:42:38,449
I'm going to do a timed block and I'm

958
00:42:36,619 --> 00:42:40,460
going to pass that in with the count

959
00:42:38,449 --> 00:42:42,879
because we can actually get that for

960
00:42:40,460 --> 00:42:42,880
free as well

961
00:42:43,699 --> 00:42:51,169
right we'll just pass it in here and all

962
00:42:49,460 --> 00:42:55,030
we have to do for that is just say okay

963
00:42:51,170 --> 00:42:59,690
the time to block stuff is going to take

964
00:42:55,030 --> 00:43:02,180
a number potentially so when we do time

965
00:42:59,690 --> 00:43:05,720
blocking I guess oh and they don't even

966
00:43:02,179 --> 00:43:08,358
take a name right okay

967
00:43:05,719 --> 00:43:10,219
I think this will work don't quote me on

968
00:43:08,358 --> 00:43:14,150
that a time block I guess this doesn't

969
00:43:10,219 --> 00:43:17,298
have to do that either we can do time

970
00:43:14,150 --> 00:43:22,338
block with aver arms I believe and then

971
00:43:17,298 --> 00:43:24,019
we can just do a paste on like so so

972
00:43:22,338 --> 00:43:25,909
that will get those extra parameters in

973
00:43:24,019 --> 00:43:27,920
here and so then we can just have a

974
00:43:25,909 --> 00:43:30,348
default value which is that the hit

975
00:43:27,920 --> 00:43:32,450
count actually plus equals some kind of

976
00:43:30,349 --> 00:43:34,099
a hit count that you pass in by default

977
00:43:32,449 --> 00:43:35,750
it will assume that you just want to

978
00:43:34,099 --> 00:43:37,849
count it once but if you want to count

979
00:43:35,750 --> 00:43:42,769
that block many times you can do that as

980
00:43:37,849 --> 00:43:45,530
well right so that's another way we can

981
00:43:42,769 --> 00:43:48,650
tackle that alright so time block

982
00:43:45,530 --> 00:43:54,980
including handmade H that means that it

983
00:43:48,650 --> 00:43:57,170
was handmade H not include handmade H it

984
00:43:54,980 --> 00:44:00,170
should have included handmade debug time

985
00:43:57,170 --> 00:44:04,400
to block it's right there is it just

986
00:44:00,170 --> 00:44:07,670
because it doesn't have this Wow okay

987
00:44:04,400 --> 00:44:10,000
well that's fine doesn't matter no

988
00:44:07,670 --> 00:44:10,000
worries

989
00:44:15,248 --> 00:44:20,689
okay so process pixel wants to be like

990
00:44:19,130 --> 00:44:22,849
this you got I'm just trying to maintain

991
00:44:20,690 --> 00:44:24,650
the feature set that we had because it

992
00:44:22,849 --> 00:44:29,390
seems fine right doesn't it's not

993
00:44:24,650 --> 00:44:32,108
onerous for us to do that time block

994
00:44:29,389 --> 00:44:41,719
underscore oh yeah

995
00:44:32,108 --> 00:44:44,389
so this not sure why it didn't like that

996
00:44:41,719 --> 00:45:00,579
I guess because it won't expand this if

997
00:44:44,389 --> 00:45:04,728
it's part of the paste hmm hmm I say I

998
00:45:00,579 --> 00:45:07,160
would like to expand line right I would

999
00:45:04,728 --> 00:45:10,159
like line to be expanded so that I can

1000
00:45:07,159 --> 00:45:14,719
just have one per line I guess

1001
00:45:10,159 --> 00:45:16,429
this is that same unfortunate problem so

1002
00:45:14,719 --> 00:45:20,119
I may have to do something like this

1003
00:45:16,429 --> 00:45:22,669
where I call another layer down with

1004
00:45:20,119 --> 00:45:25,670
like the number or something like that I

1005
00:45:22,670 --> 00:45:27,469
don't know how many times you have to do

1006
00:45:25,670 --> 00:45:30,798
that this is always really annoying to

1007
00:45:27,469 --> 00:45:33,079
me I hate this the C++ preprocessor is

1008
00:45:30,798 --> 00:45:35,208
like the worst thing ever I mean we can

1009
00:45:33,079 --> 00:45:36,589
all admit that but you know since that

1010
00:45:35,208 --> 00:45:38,328
doesn't have the language features that

1011
00:45:36,588 --> 00:45:39,409
you'd want for a lot of these things you

1012
00:45:38,329 --> 00:45:43,849
have no choice but to use it most the

1013
00:45:39,409 --> 00:45:46,190
time but so I probably will have to do

1014
00:45:43,849 --> 00:45:47,900
something like this where it gets

1015
00:45:46,190 --> 00:45:50,949
translated through the macro multiple

1016
00:45:47,900 --> 00:45:53,809
times I feel like you need to do this

1017
00:45:50,949 --> 00:45:55,699
twice even two layers there's this

1018
00:45:53,809 --> 00:45:57,048
really weird stuff with the with the

1019
00:45:55,699 --> 00:45:59,588
macro produce processor I think once

1020
00:45:57,048 --> 00:46:02,298
doesn't even do it so if you do this

1021
00:45:59,588 --> 00:46:03,889
it's still not enough it has to actually

1022
00:46:02,298 --> 00:46:07,880
go through one layer of translation

1023
00:46:03,889 --> 00:46:09,348
right so we'll see but you'll see what I

1024
00:46:07,880 --> 00:46:11,300
mean in a second I think that's what

1025
00:46:09,349 --> 00:46:18,769
will happen

1026
00:46:11,300 --> 00:46:20,210
yeah number dot that dot yeah you can

1027
00:46:18,769 --> 00:46:21,949
see that that doesn't actually fix it

1028
00:46:20,210 --> 00:46:23,119
right it's still doing that i'ma try it

1029
00:46:21,949 --> 00:46:24,529
one more time and then I gotta I may

1030
00:46:23,119 --> 00:46:29,329
have to look this up this is something I

1031
00:46:24,530 --> 00:46:31,190
never remember like ever I never

1032
00:46:29,329 --> 00:46:42,858
remember how to do it but there is there

1033
00:46:31,190 --> 00:46:53,450
are tricks I've done them before how is

1034
00:46:42,858 --> 00:46:57,710
it done oh that's not quite right yeah

1035
00:46:53,449 --> 00:47:01,730
so I don't know you can kind of see

1036
00:46:57,710 --> 00:47:03,230
there some pretty ridiculous shenanigans

1037
00:47:01,730 --> 00:47:06,889
on a second let's see what's going on

1038
00:47:03,230 --> 00:47:09,920
here time block yet so I hope you see

1039
00:47:06,889 --> 00:47:12,409
what happened there this is kind of just

1040
00:47:09,920 --> 00:47:14,750
a vagaries of C++ preprocessor nonsense

1041
00:47:12,409 --> 00:47:16,940
thing there's no rhyme or reason to it

1042
00:47:14,750 --> 00:47:18,829
just how it happened be written so what

1043
00:47:16,940 --> 00:47:21,289
happened was I wanted to use the line

1044
00:47:18,829 --> 00:47:22,880
number right to expand on here but

1045
00:47:21,289 --> 00:47:24,529
unfortunately if it sees the pasted

1046
00:47:22,880 --> 00:47:26,809
operator which is something that sticks

1047
00:47:24,530 --> 00:47:30,170
two things together it actually just

1048
00:47:26,809 --> 00:47:32,719
graphs on whatever the text was and so I

1049
00:47:30,170 --> 00:47:34,909
have to pass it through itself multiple

1050
00:47:32,719 --> 00:47:37,309
times to make sure that the number gets

1051
00:47:34,909 --> 00:47:42,829
expanded as a number which it will in

1052
00:47:37,309 --> 00:47:45,469
this line so that it never no toot no

1053
00:47:42,829 --> 00:47:48,259
entrance of the number of the use of the

1054
00:47:45,469 --> 00:47:50,838
line macro plus the actual paste have to

1055
00:47:48,260 --> 00:47:54,770
be separated by one hole round through

1056
00:47:50,838 --> 00:47:56,179
the stupid preprocessor don't ask me why

1057
00:47:54,769 --> 00:47:57,170
I even know that this is just one of

1058
00:47:56,179 --> 00:47:58,789
those things that you know if you

1059
00:47:57,170 --> 00:48:01,190
program C++ long enough you have to deal

1060
00:47:58,789 --> 00:48:05,239
with but hey we finally got it so it's

1061
00:48:01,190 --> 00:48:07,849
fine again nothing particularly special

1062
00:48:05,239 --> 00:48:11,679
or great about that that's just the way

1063
00:48:07,849 --> 00:48:11,680
it goes all right

1064
00:48:15,130 --> 00:48:20,420
so you got a few more things left to

1065
00:48:18,739 --> 00:48:22,729
deal with we're not we're not totally

1066
00:48:20,420 --> 00:48:24,170
done yet right we're not totally we're

1067
00:48:22,730 --> 00:48:26,298
not totally at the at the end of

1068
00:48:24,170 --> 00:48:27,318
everything that we might need to do but

1069
00:48:26,298 --> 00:48:30,108
we're close

1070
00:48:27,318 --> 00:48:31,460
so overlay cycle counters that would be

1071
00:48:30,108 --> 00:48:34,000
what prints out the cycle counters for

1072
00:48:31,460 --> 00:48:37,039
us so we can go down here to the end

1073
00:48:34,000 --> 00:48:39,048
right and we have debug record array we

1074
00:48:37,039 --> 00:48:42,470
just put it down below here so we know

1075
00:48:39,048 --> 00:48:43,818
that it can access that right and now we

1076
00:48:42,469 --> 00:48:45,528
can know that we could use our debug

1077
00:48:43,818 --> 00:48:47,719
record array we could use the array

1078
00:48:45,528 --> 00:48:49,608
count of the debug record array and that

1079
00:48:47,719 --> 00:48:52,669
would actually print the thing out now

1080
00:48:49,608 --> 00:48:54,230
of course we don't actually want to only

1081
00:48:52,670 --> 00:48:55,309
do that one debug record right because

1082
00:48:54,230 --> 00:48:57,289
we actually have multiple people record

1083
00:48:55,309 --> 00:48:59,930
rates but we'll deal with that a little

1084
00:48:57,289 --> 00:49:01,460
bit further down the line it's a guess

1085
00:48:59,929 --> 00:49:06,969
it's actually debug record to me and I

1086
00:49:01,460 --> 00:49:09,500
think something like that right yeah so

1087
00:49:06,969 --> 00:49:10,608
what we want to do here and there's some

1088
00:49:09,500 --> 00:49:11,778
other like I said there's gonna be some

1089
00:49:10,608 --> 00:49:12,858
things we're gonna but we're kind of

1090
00:49:11,778 --> 00:49:15,018
running out of time so I wanted to kind

1091
00:49:12,858 --> 00:49:16,130
of finish this up for the most part and

1092
00:49:15,018 --> 00:49:18,528
then we can look at it a little bit more

1093
00:49:16,130 --> 00:49:21,048
all right so let's just finish up what

1094
00:49:18,528 --> 00:49:23,298
we've got we'll go ahead and put a time

1095
00:49:21,048 --> 00:49:25,608
clock in there for game update and

1096
00:49:23,298 --> 00:49:28,818
render as well we'll just go ahead and

1097
00:49:25,608 --> 00:49:31,518
put that like so inside our end time

1098
00:49:28,818 --> 00:49:33,949
blocks we no longer need them at all

1099
00:49:31,518 --> 00:49:35,298
right overlay cycle counters we're gonna

1100
00:49:33,949 --> 00:49:36,710
have to forward declare because we're

1101
00:49:35,298 --> 00:49:38,690
calling that after sort of the

1102
00:49:36,710 --> 00:49:40,789
definition of these things so that's

1103
00:49:38,690 --> 00:49:44,028
fine but we'll have to kind of do a

1104
00:49:40,789 --> 00:49:47,720
little forward declaration up here there

1105
00:49:44,028 --> 00:49:52,849
we go and in here this is going to be

1106
00:49:47,719 --> 00:49:56,558
debug record and this is going to be

1107
00:49:52,849 --> 00:49:56,559
that debug records name

1108
00:49:58,760 --> 00:50:07,080
okay so let's continue strict debug

1109
00:50:04,050 --> 00:50:10,530
record debug records optimized not

1110
00:50:07,079 --> 00:50:13,799
defined is that really true I think it

1111
00:50:10,530 --> 00:50:18,960
is it's right there so we just gonna put

1112
00:50:13,800 --> 00:50:20,039
it in I'm just going to debug records

1113
00:50:18,960 --> 00:50:22,349
oops

1114
00:50:20,039 --> 00:50:26,039
it's good actually spell it the way I

1115
00:50:22,349 --> 00:50:28,469
wanted it to and then down here we've

1116
00:50:26,039 --> 00:50:30,420
got the debug cycle counter print out in

1117
00:50:28,469 --> 00:50:31,949
win32 we're gonna nuke that for now

1118
00:50:30,420 --> 00:50:33,450
because I think we don't probably ever

1119
00:50:31,949 --> 00:50:37,439
we probably will mute that for good

1120
00:50:33,449 --> 00:50:41,039
actually but we'll leave it kind of left

1121
00:50:37,440 --> 00:50:42,420
in for the for the immediate moment all

1122
00:50:41,039 --> 00:50:48,269
right and now let's go ahead and run

1123
00:50:42,420 --> 00:50:54,150
things and see where we're at right Hey

1124
00:50:48,269 --> 00:50:58,590
look look what we just got those are

1125
00:50:54,150 --> 00:51:02,160
actually coming from our actual thing I

1126
00:50:58,590 --> 00:51:04,110
believe right although now actually

1127
00:51:02,159 --> 00:51:05,730
they're still probably using the wrong

1128
00:51:04,110 --> 00:51:08,370
ones because I don't think we changed it

1129
00:51:05,730 --> 00:51:09,990
quite yet right they're using this name

1130
00:51:08,369 --> 00:51:10,319
table but we don't need the name table

1131
00:51:09,989 --> 00:51:13,379
anymore

1132
00:51:10,320 --> 00:51:14,460
right so it's not quite hey look yet we

1133
00:51:13,380 --> 00:51:15,800
can just get rid of that and in fact I

1134
00:51:14,460 --> 00:51:18,420
guess we can get rid of all this stuff

1135
00:51:15,800 --> 00:51:20,280
right so what we want to do is go

1136
00:51:18,420 --> 00:51:22,050
through each counter and then instead of

1137
00:51:20,280 --> 00:51:24,060
looking it up in the name table which we

1138
00:51:22,050 --> 00:51:25,560
don't actually need to do at all anymore

1139
00:51:24,059 --> 00:51:32,840
we can just take a look at the counter

1140
00:51:25,559 --> 00:51:40,429
and look at it's filename cannot convert

1141
00:51:32,840 --> 00:51:40,430
r1 from Kara to Kara Star oh my bad

1142
00:51:42,730 --> 00:51:48,730
awesome we probably want

1143
00:51:49,150 --> 00:51:54,108
we're probably gonna want a slightly

1144
00:51:51,139 --> 00:52:00,558
smaller font for debugging just putting

1145
00:51:54,108 --> 00:52:03,739
that out there but man that that turns

1146
00:52:00,559 --> 00:52:07,130
out to be pretty darn easy actually so

1147
00:52:03,739 --> 00:52:10,788
now we need to sort of augment our

1148
00:52:07,130 --> 00:52:13,220
ability to print things out but now we

1149
00:52:10,789 --> 00:52:15,710
actually have it such that we can put

1150
00:52:13,219 --> 00:52:18,889
debug times throughout our entire code

1151
00:52:15,710 --> 00:52:21,980
and it's completely free we don't have

1152
00:52:18,889 --> 00:52:24,828
to do any work really the amount of

1153
00:52:21,980 --> 00:52:27,230
effect on the code is almost zero right

1154
00:52:24,829 --> 00:52:33,710
I mean all it's doing is just this work

1155
00:52:27,230 --> 00:52:36,289
right here that's it that's gonna be

1156
00:52:33,710 --> 00:52:40,369
pretty great I mean you can afford a lot

1157
00:52:36,289 --> 00:52:42,230
of those right so yeah that's as good a

1158
00:52:40,369 --> 00:52:46,880
place as any to stop I suppose because

1159
00:52:42,230 --> 00:52:48,318
that is the not the entirety of what we

1160
00:52:46,880 --> 00:52:51,680
want to at time blocks we might want to

1161
00:52:48,318 --> 00:53:00,190
do some call attribution with our time

1162
00:52:51,679 --> 00:53:02,179
blocks for example but man yeah okay I

1163
00:53:00,190 --> 00:53:08,809
don't know why I never thought of that

1164
00:53:02,179 --> 00:53:12,558
before but that just totally worked all

1165
00:53:08,809 --> 00:53:15,430
right well you learn something new every

1166
00:53:12,559 --> 00:53:19,010
day I'm gonna go ahead and go to the Q&amp;A

1167
00:53:15,429 --> 00:53:21,528
and yeah like I said that was what we

1168
00:53:19,010 --> 00:53:22,970
wanted and we kind of got it so there's

1169
00:53:21,528 --> 00:53:24,260
some more stuff we'd like to do but I

1170
00:53:22,969 --> 00:53:25,818
mean pretty much that's what we wanted

1171
00:53:24,260 --> 00:53:27,349
and so tomorrow what we'll be able to do

1172
00:53:25,818 --> 00:53:29,389
is we'll be able to kind of go in here

1173
00:53:27,349 --> 00:53:31,099
and work on our ability to print things

1174
00:53:29,389 --> 00:53:32,509
out so we can start to actually see the

1175
00:53:31,099 --> 00:53:34,519
numbers right because remember we were

1176
00:53:32,510 --> 00:53:35,778
kind of using a we were using some

1177
00:53:34,519 --> 00:53:39,619
library code to print that and so you

1178
00:53:35,778 --> 00:53:41,088
know we can go write our own our own

1179
00:53:39,619 --> 00:53:42,349
text print out routines that they

1180
00:53:41,088 --> 00:53:44,538
probably won't be great because we don't

1181
00:53:42,349 --> 00:53:47,619
care they're just for debug but you know

1182
00:53:44,539 --> 00:53:49,950
we should at least do them all right

1183
00:53:47,619 --> 00:53:52,380
well

1184
00:53:49,949 --> 00:53:55,618
if you have questions now would be a

1185
00:53:52,380 --> 00:53:58,640
good time to ask them go ahead and

1186
00:53:55,619 --> 00:53:58,640
prefix them with Q :

1187
00:54:00,530 --> 00:54:03,920
so I'll see you

1188
00:54:17,619 --> 00:54:24,909
let's see Elsa noised says there's an

1189
00:54:23,019 --> 00:54:26,679
alternative way to start and the counter

1190
00:54:24,909 --> 00:54:28,719
instead of using constructor destructor

1191
00:54:26,679 --> 00:54:30,819
pair you don't have to store the data in

1192
00:54:28,719 --> 00:54:32,469
the struct maybe not as convenient but

1193
00:54:30,820 --> 00:54:34,450
it's worth mentioning I use it quite

1194
00:54:32,469 --> 00:54:36,189
often when I have to begin X write code

1195
00:54:34,449 --> 00:54:38,199
end X it's basically a hacked tweaked

1196
00:54:36,190 --> 00:54:39,579
version of C sharps using statement I

1197
00:54:38,199 --> 00:54:41,609
think you'll find it interesting check

1198
00:54:39,579 --> 00:54:46,779
out the small snippet if you please

1199
00:54:41,610 --> 00:54:51,430
what do you think well let's find out

1200
00:54:46,780 --> 00:54:55,680
let's see

1201
00:54:51,429 --> 00:55:04,869
destructor x block pound define using

1202
00:54:55,679 --> 00:55:06,940
for oh interesting well I'm looking at

1203
00:55:04,869 --> 00:55:10,389
this and I suppose I should probably

1204
00:55:06,940 --> 00:55:15,610
sort of show the the way that it's being

1205
00:55:10,389 --> 00:55:18,519
done here so the way he's suggesting to

1206
00:55:15,610 --> 00:55:26,019
do it is you can do a thing that's like

1207
00:55:18,519 --> 00:55:29,590
pound if I'm you know using using object

1208
00:55:26,019 --> 00:55:33,099
data and then he does a for loop done

1209
00:55:29,590 --> 00:55:35,620
equals AAB begin using data oops don't

1210
00:55:33,099 --> 00:55:36,909
wanna go beyond my own head not done

1211
00:55:35,619 --> 00:55:43,750
done equals AUB's

1212
00:55:36,909 --> 00:55:46,569
and using data so it makes like a for

1213
00:55:43,750 --> 00:55:50,260
loop right and the for loops exit

1214
00:55:46,570 --> 00:55:52,630
condition is just going to be this not

1215
00:55:50,260 --> 00:56:00,070
done here and then it does the end at

1216
00:55:52,630 --> 00:56:01,119
the as the the update step right so the

1217
00:56:00,070 --> 00:56:03,460
thing I don't like about that is that

1218
00:56:01,119 --> 00:56:05,019
that it that introduces at least as many

1219
00:56:03,460 --> 00:56:07,179
new variables into the function as this

1220
00:56:05,019 --> 00:56:10,170
does though so I'm not sure there's

1221
00:56:07,179 --> 00:56:10,169
really any benefit to it

1222
00:56:12,099 --> 00:56:15,889
in fact I might say there's definitely

1223
00:56:14,269 --> 00:56:18,429
no benefit to it it's strictly adding

1224
00:56:15,889 --> 00:56:22,849
more code to your code than this does

1225
00:56:18,429 --> 00:56:24,169
right yeah so I don't know I I don't

1226
00:56:22,849 --> 00:56:25,489
think I'm a fan I haven't thought about

1227
00:56:24,170 --> 00:56:26,930
it long enough so maybe there's other

1228
00:56:25,489 --> 00:56:29,149
reasons why I might like that but that

1229
00:56:26,929 --> 00:56:31,599
doesn't seem like a good win to me that

1230
00:56:29,150 --> 00:56:31,599
might just be me

1231
00:56:34,360 --> 00:56:39,200
James Whitman I feel like I missed

1232
00:56:36,500 --> 00:56:42,469
something why is the arrayname need to

1233
00:56:39,199 --> 00:56:43,730
be different between builds so the

1234
00:56:42,469 --> 00:56:45,049
reasons the arrayname needs to be

1235
00:56:43,730 --> 00:56:48,110
different between builds is because I

1236
00:56:45,050 --> 00:56:50,240
want to print out both arrays and so in

1237
00:56:48,110 --> 00:56:52,010
here I'm going to need in like the next

1238
00:56:50,239 --> 00:56:54,109
episode right when we do our actual

1239
00:56:52,010 --> 00:56:56,090
printout of this data I'm going to need

1240
00:56:54,110 --> 00:56:57,789
to be able to access both of them now

1241
00:56:56,090 --> 00:57:00,140
they can't both be named the same thing

1242
00:56:57,789 --> 00:57:02,210
because if they were I wouldn't be able

1243
00:57:00,139 --> 00:57:07,639
to exter in the other one and access it

1244
00:57:02,210 --> 00:57:08,690
from here right so the reason I just

1245
00:57:07,639 --> 00:57:11,239
made two different aims I seem like the

1246
00:57:08,690 --> 00:57:15,289
easiest way to make sure that that

1247
00:57:11,239 --> 00:57:19,179
worked you know so that's that's all

1248
00:57:15,289 --> 00:57:19,179
that's the only that's the only reason

1249
00:57:20,260 --> 00:57:24,830
twitch makes me itch s how do you move

1250
00:57:23,030 --> 00:57:27,019
your typing cursor around so fast is

1251
00:57:24,829 --> 00:57:30,049
that an IDE so there's a macro well I

1252
00:57:27,019 --> 00:57:31,550
have my Emacs set up to be like if you

1253
00:57:30,050 --> 00:57:36,140
hold down the control key it moves by

1254
00:57:31,550 --> 00:57:37,670
words and if you so control key plus the

1255
00:57:36,139 --> 00:57:39,739
left and right arrows moves by words

1256
00:57:37,670 --> 00:57:41,090
control key plus the up and down arrows

1257
00:57:39,739 --> 00:57:42,859
moves to empty space

1258
00:57:41,090 --> 00:57:44,630
I just find those are easy ways to get

1259
00:57:42,860 --> 00:57:46,970
around and then similarly I have like

1260
00:57:44,630 --> 00:57:48,710
alt-j bound to like jump so I can jump

1261
00:57:46,969 --> 00:57:52,939
through a function or something like

1262
00:57:48,710 --> 00:57:54,769
that so I just I just have some shortcut

1263
00:57:52,940 --> 00:57:57,320
keys that help me they're not

1264
00:57:54,769 --> 00:58:00,400
particularly fancy they're pretty

1265
00:57:57,320 --> 00:58:00,400
they're pretty basic really

1266
00:58:06,940 --> 00:58:10,539
could you expand on how you would have

1267
00:58:08,739 --> 00:58:14,739
done the care star file named star

1268
00:58:10,539 --> 00:58:17,199
function name with un s-- instead yes so

1269
00:58:14,739 --> 00:58:18,939
what I was trying to say there when I

1270
00:58:17,199 --> 00:58:21,279
was kind of bagging on how bad C++ is

1271
00:58:18,940 --> 00:58:22,510
all the time and of course to be fair

1272
00:58:21,280 --> 00:58:24,579
you know it's possible that they've

1273
00:58:22,510 --> 00:58:27,280
added some features in the eight billion

1274
00:58:24,579 --> 00:58:32,470
features that they add every year or

1275
00:58:27,280 --> 00:58:35,730
every couple years he is I don't

1276
00:58:32,469 --> 00:58:38,318
actually want a pointer to a file name

1277
00:58:35,730 --> 00:58:40,210
what I want the compiler to do is take

1278
00:58:38,318 --> 00:58:42,550
all of the files that there are in the

1279
00:58:40,210 --> 00:58:44,858
project enumerate them from zero to

1280
00:58:42,550 --> 00:58:46,359
whatever the maximum number is and then

1281
00:58:44,858 --> 00:58:47,949
just have a table called file names that

1282
00:58:46,358 --> 00:58:49,690
I can look up with a bracket that way if

1283
00:58:47,949 --> 00:58:51,960
I want to store the file name I can just

1284
00:58:49,690 --> 00:58:54,490
store a new 16 called file name index

1285
00:58:51,960 --> 00:58:56,199
which I know that the compiler you know

1286
00:58:54,489 --> 00:58:58,358
vacuum that I can produce like this like

1287
00:58:56,199 --> 00:58:59,980
file name index and it just gives me an

1288
00:58:58,358 --> 00:59:01,420
index of the file name into that table

1289
00:58:59,980 --> 00:59:06,519
that would have been the way any sane

1290
00:59:01,420 --> 00:59:11,250
person would have done this right but

1291
00:59:06,519 --> 00:59:11,250
you know same people are in short supply

1292
00:59:15,539 --> 00:59:19,500
and SZ underscore this is awesome you

1293
00:59:18,059 --> 00:59:21,389
have a few minutes left could you output

1294
00:59:19,500 --> 00:59:24,420
the results or show them in the debugger

1295
00:59:21,389 --> 00:59:26,219
yeah I mean we certainly can really the

1296
00:59:24,420 --> 00:59:27,960
the thing is just we you know we need to

1297
00:59:26,219 --> 00:59:29,159
use a library to do it because the

1298
00:59:27,960 --> 00:59:30,269
reason I wasn't doing so I want to we

1299
00:59:29,159 --> 00:59:31,379
want to go write ourselves like I said

1300
00:59:30,269 --> 00:59:33,000
we don't you know we try not to use

1301
00:59:31,380 --> 00:59:35,190
libraries on handmade hero so that I

1302
00:59:33,000 --> 00:59:37,559
show how to write everything but you can

1303
00:59:35,190 --> 00:59:39,780
you could just you could just use like

1304
00:59:37,559 --> 00:59:41,549
one of these one of the functions from

1305
00:59:39,780 --> 00:59:44,760
the C standard library if you needed to

1306
00:59:41,550 --> 00:59:47,490
I don't know if we can get that in here

1307
00:59:44,760 --> 00:59:49,410
exactly I don't know what the

1308
00:59:47,489 --> 00:59:54,769
consequences would be here of including

1309
00:59:49,409 --> 00:59:57,989
say standard IO dot H if that would work

1310
00:59:54,769 --> 01:00:00,150
it looks like it sort of does so if we

1311
00:59:57,989 --> 01:00:02,069
wanted to we could go ahead and actually

1312
01:00:00,150 --> 01:00:05,269
like let this this happen we could say

1313
01:00:02,070 --> 01:00:07,980
let's do this right and then we can have

1314
01:00:05,269 --> 01:00:10,530
we could have that that print out so

1315
01:00:07,980 --> 01:00:19,050
that the text buffer that we prepare

1316
01:00:10,530 --> 01:00:22,440
right so let's see cycle count is is

1317
01:00:19,050 --> 01:00:24,920
what it's clocks so I'll change that

1318
01:00:22,440 --> 01:00:24,920
second

1319
01:00:30,030 --> 01:00:40,190
so that's that's really it

1320
01:00:32,400 --> 01:00:45,630
I think and there you go so that's the

1321
01:00:40,190 --> 01:00:47,490
that's the the printout and we're not

1322
01:00:45,630 --> 01:00:49,440
resetting these yet so they're just

1323
01:00:47,489 --> 01:00:51,989
gonna kind of go up ad infinitum so you

1324
01:00:49,440 --> 01:00:53,880
know if we wanted to reset them again

1325
01:00:51,989 --> 01:00:57,899
we'd need to to do the stuff that was

1326
01:00:53,880 --> 01:01:04,260
what's happening what's happening in

1327
01:00:57,900 --> 01:01:08,039
here so that is yeah that is handled

1328
01:01:04,260 --> 01:01:11,940
debug cycle counters so we just need to

1329
01:01:08,039 --> 01:01:13,619
kind of reset the stuff and so we could

1330
01:01:11,940 --> 01:01:15,210
we could do that as well here I don't

1331
01:01:13,619 --> 01:01:18,839
know that's where we really want to do

1332
01:01:15,210 --> 01:01:20,280
that long term but that's an example and

1333
01:01:18,840 --> 01:01:21,600
you know we could we could go ahead and

1334
01:01:20,280 --> 01:01:23,660
make this instead of the counter in it

1335
01:01:21,599 --> 01:01:36,650
we could we could use the function name

1336
01:01:23,659 --> 01:01:36,649
for that and so yeah does that help

1337
01:01:38,510 --> 01:01:44,310
yeah so my debugger reset that doesn't

1338
01:01:43,679 --> 01:01:48,419
make much sense

1339
01:01:44,309 --> 01:01:50,869
why is debug reset taking all of the

1340
01:01:48,420 --> 01:01:50,869
time

1341
01:01:55,550 --> 01:02:02,990
oh we are actually timing debug reset

1342
01:01:58,159 --> 01:02:07,549
turns out so yep that's what that is

1343
01:02:02,989 --> 01:02:09,709
Gaming update and render well game

1344
01:02:07,550 --> 01:02:11,720
update and render so we do have one

1345
01:02:09,710 --> 01:02:13,309
problem with that which is that game

1346
01:02:11,719 --> 01:02:16,009
update and render which is the other

1347
01:02:13,309 --> 01:02:19,909
thing that we're timing is actually not

1348
01:02:16,010 --> 01:02:22,580
right it's it's not it's not blocking

1349
01:02:19,909 --> 01:02:24,259
that so in order to actually make that

1350
01:02:22,579 --> 01:02:25,190
block we would we would need to do

1351
01:02:24,260 --> 01:02:27,250
something like this

1352
01:02:25,190 --> 01:02:32,349
right we'd actually need to open a block

1353
01:02:27,250 --> 01:02:32,349
for that so that we know that it doesn't

1354
01:02:32,440 --> 01:02:38,960
we know that that gets closed that block

1355
01:02:35,570 --> 01:02:41,330
has to get closed before we would

1356
01:02:38,960 --> 01:02:44,510
actually overlay the cycle counters

1357
01:02:41,329 --> 01:02:47,299
right which is again kind of annoying

1358
01:02:44,510 --> 01:02:49,340
because what we would and this is

1359
01:02:47,300 --> 01:02:51,590
something we need to address so I'll

1360
01:02:49,340 --> 01:02:57,680
just do it temporarily but it's not what

1361
01:02:51,590 --> 01:03:00,019
we would actually want to do right yeah

1362
01:02:57,679 --> 01:03:01,669
we we want to do this we want to do this

1363
01:03:00,019 --> 01:03:03,289
a little bit more tomorrow there's a

1364
01:03:01,670 --> 01:03:06,289
bunch of things that are kind of packed

1365
01:03:03,289 --> 01:03:08,210
in there that we want to handle but you

1366
01:03:06,289 --> 01:03:09,650
know I could I guess I could do a couple

1367
01:03:08,210 --> 01:03:11,179
more things just to just to show that

1368
01:03:09,650 --> 01:03:14,059
it's working right so I could put time

1369
01:03:11,179 --> 01:03:17,299
block in here for example and that would

1370
01:03:14,059 --> 01:03:22,210
be another one for for that would be in

1371
01:03:17,300 --> 01:03:22,210
there for debug updating render so right

1372
01:03:22,510 --> 01:03:26,270
so there's our actual times one and this

1373
01:03:25,130 --> 01:03:30,590
one's just not right because the block

1374
01:03:26,269 --> 01:03:32,599
is never closed that make sense so yeah

1375
01:03:30,590 --> 01:03:34,519
so we've got we've got some stuff that

1376
01:03:32,599 --> 01:03:37,610
we have to do and basically what it

1377
01:03:34,519 --> 01:03:42,500
boils down to is because we are the

1378
01:03:37,610 --> 01:03:44,539
renderer we need a way of counting the

1379
01:03:42,500 --> 01:03:46,369
amount of time spent in the renderer but

1380
01:03:44,539 --> 01:03:49,759
the renderer is the thing rendering the

1381
01:03:46,369 --> 01:03:51,469
debug information so what we want to do

1382
01:03:49,760 --> 01:03:54,020
like I said you know we're kind of

1383
01:03:51,469 --> 01:03:55,459
jumping the gun here by but you know

1384
01:03:54,019 --> 01:03:59,570
since you want to see it we saw it so

1385
01:03:55,460 --> 01:04:02,329
that's good it's fine what we want to do

1386
01:03:59,570 --> 01:04:04,789
is we want to postpone the information

1387
01:04:02,329 --> 01:04:07,219
for one frame so that on any given frame

1388
01:04:04,789 --> 01:04:08,538
we're printing out the like data from

1389
01:04:07,219 --> 01:04:12,738
say the last frame the pre

1390
01:04:08,539 --> 01:04:14,599
his frame so that we we can count the

1391
01:04:12,739 --> 01:04:16,088
renderer properly but still have the

1392
01:04:14,599 --> 01:04:18,079
render or render the debug information

1393
01:04:16,088 --> 01:04:21,048
right because it's sort of like a

1394
01:04:18,079 --> 01:04:23,539
chicken and egg thing there so we we

1395
01:04:21,048 --> 01:04:26,659
can't really you know we gotta be a

1396
01:04:23,539 --> 01:04:27,650
little bit more specific about that but

1397
01:04:26,659 --> 01:04:29,509
that's not hard

1398
01:04:27,650 --> 01:04:36,469
well it'll be easy enough for us to do

1399
01:04:29,509 --> 01:04:38,150
but we have to actually do it Nicko 3695

1400
01:04:36,469 --> 01:04:40,249
you recommend taking game programming as

1401
01:04:38,150 --> 01:04:42,048
a major or programming in general i

1402
01:04:40,248 --> 01:04:49,518
don't know i did not go to college so i

1403
01:04:42,048 --> 01:04:51,559
can't really help you out there Ellison

1404
01:04:49,518 --> 01:04:53,899
says what other useful pre proc bell use

1405
01:04:51,559 --> 01:04:58,849
we could use other than file function in

1406
01:04:53,900 --> 01:05:00,439
line I don't know that there are very

1407
01:04:58,849 --> 01:05:02,689
many other ones that are useful for this

1408
01:05:00,438 --> 01:05:06,228
purpose I mean a counter obviously was

1409
01:05:02,688 --> 01:05:08,928
the other one but that we ever used it I

1410
01:05:06,228 --> 01:05:12,288
don't really know that there's anything

1411
01:05:08,929 --> 01:05:13,639
else that I can think of for debugging

1412
01:05:12,289 --> 01:05:16,849
the other stuff is usually for other

1413
01:05:13,639 --> 01:05:18,018
reasons but you know I could be

1414
01:05:16,849 --> 01:05:19,669
forgetting one or there could have been

1415
01:05:18,018 --> 01:05:21,858
one added recently that I don't know

1416
01:05:19,668 --> 01:05:25,489
about like I said counter was actually

1417
01:05:21,858 --> 01:05:27,608
added long after I'd written like the

1418
01:05:25,489 --> 01:05:30,159
previous iteration of my debug stuff I

1419
01:05:27,608 --> 01:05:33,139
haven't really touched it since then and

1420
01:05:30,159 --> 01:05:37,669
so I never really thought about the new

1421
01:05:33,139 --> 01:05:39,679
things that it could add so yeah so

1422
01:05:37,668 --> 01:05:40,969
there might be some even newer ones that

1423
01:05:39,679 --> 01:05:42,139
I don't know about and maybe they'd be

1424
01:05:40,969 --> 01:05:44,059
very useful I don't know I should

1425
01:05:42,139 --> 01:05:49,068
probably go you know to take a spin

1426
01:05:44,059 --> 01:05:50,119
through them and just see I'm not really

1427
01:05:49,068 --> 01:05:51,438
sure if I fully understand you need

1428
01:05:50,119 --> 01:05:52,969
builds so you need bill is when we

1429
01:05:51,438 --> 01:05:54,408
compile everything into a single file I

1430
01:05:52,969 --> 01:05:56,179
don't think that's the case because we

1431
01:05:54,409 --> 01:05:59,239
do have multiple source files in HMH

1432
01:05:56,179 --> 01:06:01,009
so five source files is not really the

1433
01:05:59,239 --> 01:06:03,079
important part it's how the compiler

1434
01:06:01,009 --> 01:06:05,418
sees those source files when you pass it

1435
01:06:03,079 --> 01:06:08,509
and so in Hammer here we really have

1436
01:06:05,418 --> 01:06:09,949
three separate compilation units and

1437
01:06:08,509 --> 01:06:11,028
compilation unit is the right term to

1438
01:06:09,949 --> 01:06:12,349
think about here because that's what the

1439
01:06:11,028 --> 01:06:13,429
compiler actually sees doesn't matter

1440
01:06:12,349 --> 01:06:14,778
how many files they're all right because

1441
01:06:13,429 --> 01:06:17,838
like you can imagine you have handmade

1442
01:06:14,778 --> 01:06:19,309
HMI that's EBP if handmade thought to BP

1443
01:06:17,838 --> 01:06:20,688
includes hammer a that H and you only

1444
01:06:19,309 --> 01:06:21,790
pass him E that's easy to the compiler

1445
01:06:20,688 --> 01:06:24,279
well there's only one cop

1446
01:06:21,789 --> 01:06:26,949
relation unit there because the compiler

1447
01:06:24,280 --> 01:06:28,930
doesn't think about handmade H as being

1448
01:06:26,949 --> 01:06:30,609
a separate compile pass it's just a

1449
01:06:28,929 --> 01:06:31,989
separate file that gets stuffed into a

1450
01:06:30,610 --> 01:06:34,690
me that's AP before the compiler

1451
01:06:31,989 --> 01:06:35,949
actually goes to work right and so what

1452
01:06:34,690 --> 01:06:38,050
we do on and main here is we just pound

1453
01:06:35,949 --> 01:06:40,839
include all our CPP files so we actually

1454
01:06:38,050 --> 01:06:42,730
only have three translation units one

1455
01:06:40,840 --> 01:06:44,710
that's the win32 binding layer and

1456
01:06:42,730 --> 01:06:46,090
that's there so it can reload our code

1457
01:06:44,710 --> 01:06:51,340
and we can do our loop live code editing

1458
01:06:46,090 --> 01:06:52,990
stuff so that's one thing to is our

1459
01:06:51,340 --> 01:06:54,760
optimized code and the only reason we

1460
01:06:52,989 --> 01:06:56,259
have that is because the compiler is too

1461
01:06:54,760 --> 01:06:58,180
dumb to let us say hey optimize this

1462
01:06:56,260 --> 01:07:00,820
function it has to be in a separate

1463
01:06:58,179 --> 01:07:04,419
compilation unit for some reason I have

1464
01:07:00,820 --> 01:07:06,850
no idea why and then number three is the

1465
01:07:04,420 --> 01:07:09,130
rest of the code and so we only have

1466
01:07:06,849 --> 01:07:10,360
three of them and that's why I say that

1467
01:07:09,130 --> 01:07:18,760
we can kind of do stuff like this

1468
01:07:10,360 --> 01:07:20,860
counter thing plain flavored where did

1469
01:07:18,760 --> 01:07:22,960
the whole weird eye interface see class

1470
01:07:20,860 --> 01:07:27,400
style of programming I see everywhere

1471
01:07:22,960 --> 01:07:29,559
come from uh yeah I don't know I mean

1472
01:07:27,400 --> 01:07:31,660
calm I remember introduced that whole I

1473
01:07:29,559 --> 01:07:33,789
interface naming convention I think but

1474
01:07:31,659 --> 01:07:34,989
I don't know if they made that up or if

1475
01:07:33,789 --> 01:07:38,590
that was something they got from

1476
01:07:34,989 --> 01:07:40,149
somewhere else right so I yeah I don't

1477
01:07:38,590 --> 01:07:42,240
really know who started all that kind of

1478
01:07:40,150 --> 01:07:42,240
stuff

1479
01:07:42,719 --> 01:07:46,569
why do you have both u3q and you and

1480
01:07:45,400 --> 01:07:48,280
three to type desks what's the

1481
01:07:46,570 --> 01:07:50,440
difference there is no difference it was

1482
01:07:48,280 --> 01:07:52,600
just that I decided to switch recently

1483
01:07:50,440 --> 01:07:54,550
like even though I'm pretty old I still

1484
01:07:52,599 --> 01:07:57,159
change up my programming style fairly

1485
01:07:54,550 --> 01:07:59,470
frequently actually to just make small

1486
01:07:57,159 --> 01:08:02,859
modifications or whatever to it and you

1487
01:07:59,469 --> 01:08:04,329
32 and un 32 I started off the product

1488
01:08:02,860 --> 01:08:06,820
using you and 32 and I decided to go to

1489
01:08:04,329 --> 01:08:08,079
you 32 so really eventually we'll

1490
01:08:06,820 --> 01:08:09,400
probably just delete you in 32

1491
01:08:08,079 --> 01:08:11,170
altogether and everything will just be

1492
01:08:09,400 --> 01:08:12,550
you 32 so that's more of a migration

1493
01:08:11,170 --> 01:08:15,090
there third is there are no different or

1494
01:08:12,550 --> 01:08:15,090
exactly the same

1495
01:08:18,890 --> 01:08:23,070
if exceptions are bad then what is a

1496
01:08:21,539 --> 01:08:24,869
good way to handle errors just return

1497
01:08:23,069 --> 01:08:26,549
error codes a global error value like an

1498
01:08:24,869 --> 01:08:28,050
error no or get last error what do you

1499
01:08:26,550 --> 01:08:30,180
think of the idea of having a central

1500
01:08:28,050 --> 01:08:33,510
area Lang function that we call and pass

1501
01:08:30,180 --> 01:08:36,420
it the error ID and it acts accordingly

1502
01:08:33,510 --> 01:08:39,060
so in general I would say the right way

1503
01:08:36,420 --> 01:08:43,440
to handle errors is to not have them so

1504
01:08:39,060 --> 01:08:48,060
that's thing 1 right so a lot of times

1505
01:08:43,439 --> 01:08:49,710
people like will have a more error

1506
01:08:48,060 --> 01:08:52,289
handling than they should have because

1507
01:08:49,710 --> 01:08:53,369
they allow errors they allow things to

1508
01:08:52,289 --> 01:08:56,819
be errors that shouldn't have been

1509
01:08:53,369 --> 01:08:59,159
errors so that's step one step two is

1510
01:08:56,819 --> 01:09:02,639
when you actually have legitimate errors

1511
01:08:59,159 --> 01:09:04,319
that can actually happen in practice you

1512
01:09:02,640 --> 01:09:07,860
want to figure out where those come from

1513
01:09:04,319 --> 01:09:10,500
and you want to make those explicitly

1514
01:09:07,859 --> 01:09:13,349
handled by the code path so like for

1515
01:09:10,500 --> 01:09:15,600
example one that we will probably do on

1516
01:09:13,350 --> 01:09:18,210
hand made here at some point will be if

1517
01:09:15,600 --> 01:09:22,260
the asset file suddenly starts to not be

1518
01:09:18,210 --> 01:09:23,909
readable right and if that happens what

1519
01:09:22,260 --> 01:09:26,130
we want to do is actually detect that

1520
01:09:23,909 --> 01:09:28,050
case and set it up so that we then print

1521
01:09:26,130 --> 01:09:31,560
out you know a message on the screen

1522
01:09:28,050 --> 01:09:33,090
that's like hey man you need to figure

1523
01:09:31,560 --> 01:09:34,289
out why the asset file just disappeared

1524
01:09:33,090 --> 01:09:37,470
because you can't run the game without

1525
01:09:34,289 --> 01:09:38,970
the asset file but on the whole there

1526
01:09:37,470 --> 01:09:41,670
really shouldn't be a lot of error

1527
01:09:38,970 --> 01:09:44,070
conditions right there are error

1528
01:09:41,670 --> 01:09:45,539
conditions there's so few ways that you

1529
01:09:44,069 --> 01:09:47,609
can really be in a legitimate error

1530
01:09:45,539 --> 01:09:49,829
condition usually it should just be part

1531
01:09:47,609 --> 01:09:52,829
of the program like the program itself

1532
01:09:49,829 --> 01:09:55,309
should be written to consider the error

1533
01:09:52,829 --> 01:09:58,260
condition as actually just a condition

1534
01:09:55,310 --> 01:10:02,400
that it handles because if you didn't do

1535
01:09:58,260 --> 01:10:06,119
that then you don't really handle that

1536
01:10:02,399 --> 01:10:08,939
error at some level right like either an

1537
01:10:06,119 --> 01:10:11,039
error is actually a technical error that

1538
01:10:08,939 --> 01:10:13,289
shouldn't ever happen in practice or it

1539
01:10:11,039 --> 01:10:14,579
isn't and if it is then you really only

1540
01:10:13,289 --> 01:10:17,069
need assertions or things like that to

1541
01:10:14,579 --> 01:10:18,059
handle it but if it is a real error then

1542
01:10:17,069 --> 01:10:19,529
you need to handle it and you need to

1543
01:10:18,060 --> 01:10:21,330
write the coach that it does the thing

1544
01:10:19,529 --> 01:10:23,460
that user would want done in that

1545
01:10:21,329 --> 01:10:26,100
scenario which makes it not an error at

1546
01:10:23,460 --> 01:10:28,079
all it makes it actually the way the

1547
01:10:26,100 --> 01:10:30,150
program works and so the answer to how

1548
01:10:28,079 --> 01:10:34,529
to handle it is no different than how

1549
01:10:30,149 --> 01:10:41,429
you would handle anything else hope that

1550
01:10:34,529 --> 01:10:43,380
make some sense why use record file name

1551
01:10:41,429 --> 01:10:44,940
and set a record function name I think

1552
01:10:43,380 --> 01:10:47,510
we did end up using function name I

1553
01:10:44,939 --> 01:10:48,779
think that probably is an old question

1554
01:10:47,510 --> 01:10:50,550
let's see

1555
01:10:48,779 --> 01:10:52,769
I am new I'm kind of Li the stream is

1556
01:10:50,550 --> 01:10:54,570
there a reason you hate C++ so much yes

1557
01:10:52,770 --> 01:10:56,250
there is a reason I'd say most plus so

1558
01:10:54,569 --> 01:10:57,719
much and that is because I have to use

1559
01:10:56,250 --> 01:10:59,880
it

1560
01:10:57,719 --> 01:11:02,760
so I like C I think C's a pretty good

1561
01:10:59,880 --> 01:11:05,460
language I would really have liked the

1562
01:11:02,760 --> 01:11:07,079
updates to see over the years to have

1563
01:11:05,460 --> 01:11:10,439
been done by people who knew what they

1564
01:11:07,079 --> 01:11:13,140
were doing because C was you know is

1565
01:11:10,439 --> 01:11:15,389
1970s I think C was actually made in

1566
01:11:13,140 --> 01:11:17,489
like the late sixties even so it's like

1567
01:11:15,390 --> 01:11:19,380
really old and it needed a bunch of

1568
01:11:17,488 --> 01:11:20,549
updates to be able to do the things that

1569
01:11:19,380 --> 01:11:23,010
we would want it to do for modern

1570
01:11:20,550 --> 01:11:26,100
programming and instead what we got was

1571
01:11:23,010 --> 01:11:27,630
C++ which has been routinely updated in

1572
01:11:26,100 --> 01:11:30,929
ways that are absolutely ridiculous and

1573
01:11:27,630 --> 01:11:33,869
pretty much useless and so the reason I

1574
01:11:30,929 --> 01:11:36,149
hate C++ instead of just ignoring C++ is

1575
01:11:33,869 --> 01:11:38,369
this the thing I have to work with and

1576
01:11:36,149 --> 01:11:40,109
it's really darn bad and so I'm kind of

1577
01:11:38,369 --> 01:11:44,069
mad at the people who constantly do

1578
01:11:40,109 --> 01:11:45,329
really stupid stuff and leave me with a

1579
01:11:44,069 --> 01:11:47,460
garbage language that I have to use

1580
01:11:45,329 --> 01:11:48,929
right whereas I'm not mad at the people

1581
01:11:47,460 --> 01:11:50,609
who made Python because I don't know

1582
01:11:48,929 --> 01:11:52,619
maybe pythons a bad language maybe it's

1583
01:11:50,609 --> 01:11:54,658
not but I don't have to use it so I'm

1584
01:11:52,619 --> 01:11:56,729
not gonna hate on Python because I don't

1585
01:11:54,658 --> 01:11:57,960
use Python right you can't really build

1586
01:11:56,729 --> 01:12:02,250
up hate for something that you don't

1587
01:11:57,960 --> 01:12:03,390
really interact with you know because

1588
01:12:02,250 --> 01:12:04,649
you're not cost like sitting there going

1589
01:12:03,390 --> 01:12:06,270
if only the people who made this

1590
01:12:04,649 --> 01:12:09,710
language had a clue I'm never saying

1591
01:12:06,270 --> 01:12:09,710
that because I never have to use it

1592
01:12:14,300 --> 01:12:18,449
well this compiled with only the visuals

1593
01:12:16,350 --> 01:12:20,190
to decompile at work with GCC it works

1594
01:12:18,449 --> 01:12:22,679
at GCC GCC is actually the place that

1595
01:12:20,189 --> 01:12:23,939
introduced counter the reason I was a

1596
01:12:22,680 --> 01:12:25,350
little hesitant about counter and wasn't

1597
01:12:23,939 --> 01:12:27,419
sure about it so I couldn't remember if

1598
01:12:25,350 --> 01:12:28,620
M SBC got out of it

1599
01:12:27,420 --> 01:12:31,199
I thought they have I couldn't quite

1600
01:12:28,619 --> 01:12:32,489
remember GCC has like oh we said counter

1601
01:12:31,199 --> 01:12:34,470
I mean it's not like they always had

1602
01:12:32,489 --> 01:12:35,729
counter but I'm pretty sure that jesusí

1603
01:12:34,470 --> 01:12:37,949
with the people who introduced counter

1604
01:12:35,729 --> 01:12:40,949
originally so I knew that they would

1605
01:12:37,949 --> 01:12:43,679
have it so LLVM GCC i that your code

1606
01:12:40,949 --> 01:12:45,809
will work fine there but I just wasn't

1607
01:12:43,680 --> 01:12:48,060
sure MC it turns out MCC added it if you

1608
01:12:45,810 --> 01:12:49,620
go back far enough like m/s BC 2005 or

1609
01:12:48,060 --> 01:12:52,800
something maybe might not have counter I

1610
01:12:49,619 --> 01:12:54,090
don't know but you know obviously the

1611
01:12:52,800 --> 01:12:56,329
later versions have it so it's totally

1612
01:12:54,090 --> 01:12:56,329
fine

1613
01:13:04,000 --> 01:13:07,880
just nice general program question do

1614
01:13:06,439 --> 01:13:09,738
you see the use of public variables

1615
01:13:07,880 --> 01:13:12,140
being accessed outside the class bad

1616
01:13:09,738 --> 01:13:16,099
practice versus using a getter accessor

1617
01:13:12,140 --> 01:13:17,690
function I would say that I don't even

1618
01:13:16,100 --> 01:13:18,980
like the premise of the question in the

1619
01:13:17,689 --> 01:13:22,399
first place

1620
01:13:18,979 --> 01:13:23,718
getter accessor functions are almost

1621
01:13:22,399 --> 01:13:25,460
completely useless and should never be

1622
01:13:23,719 --> 01:13:30,198
written under any circumstances in my

1623
01:13:25,460 --> 01:13:32,270
opinion I I don't like the concept just

1624
01:13:30,198 --> 01:13:34,039
fundamentally I don't ever think that

1625
01:13:32,270 --> 01:13:37,040
private private is like just shouldn't

1626
01:13:34,039 --> 01:13:39,109
even be used so I don't even use classes

1627
01:13:37,039 --> 01:13:41,090
I just do struct so that everything is

1628
01:13:39,109 --> 01:13:42,769
always public and that in my opinion is

1629
01:13:41,090 --> 01:13:43,969
the correct method so there shouldn't be

1630
01:13:42,770 --> 01:13:48,710
any get a getter shouldn't be any

1631
01:13:43,969 --> 01:13:51,770
accessors of any kind the times that you

1632
01:13:48,710 --> 01:13:54,260
add those is when something specific has

1633
01:13:51,770 --> 01:13:57,440
to happen when that thing is accessed

1634
01:13:54,260 --> 01:13:59,300
and what people typically do and I think

1635
01:13:57,439 --> 01:14:03,469
this is a very very bad programming

1636
01:13:59,300 --> 01:14:05,300
practice is they pre-game that so they

1637
01:14:03,469 --> 01:14:07,670
go okay I'm gonna make a class called

1638
01:14:05,300 --> 01:14:10,039
foo it's got an int in it which is like

1639
01:14:07,670 --> 01:14:13,940
the data but I don't want anyone to

1640
01:14:10,039 --> 01:14:20,979
access the data directly right I want

1641
01:14:13,939 --> 01:14:25,339
them to do this so they wrote that

1642
01:14:20,979 --> 01:14:28,549
instead of typing this and everyone who

1643
01:14:25,340 --> 01:14:35,529
uses it who has one of these now has to

1644
01:14:28,550 --> 01:14:40,039
do right every time

1645
01:14:35,529 --> 01:14:42,849
it's absurd it's absolutely completely

1646
01:14:40,039 --> 01:14:42,850
absurd

1647
01:14:45,460 --> 01:14:50,109
I mean look at all that typing and now I

1648
01:14:48,340 --> 01:14:53,010
want to increment this value well

1649
01:14:50,109 --> 01:15:02,369
instead of being able to just do this

1650
01:14:53,010 --> 01:15:04,780
right now I got to do this it's insanity

1651
01:15:02,369 --> 01:15:07,359
all you're doing is spending your whole

1652
01:15:04,779 --> 01:15:10,869
day typing for absolutely no reason you

1653
01:15:07,359 --> 01:15:13,059
get nothing for this zero and the reason

1654
01:15:10,869 --> 01:15:17,349
I say that is because the only thing you

1655
01:15:13,060 --> 01:15:19,360
have to actually do if on the odd rare

1656
01:15:17,350 --> 01:15:21,520
circumstance where you then need to add

1657
01:15:19,359 --> 01:15:24,579
some kind of fancy business to accessing

1658
01:15:21,520 --> 01:15:26,380
this stuff is you just go like that now

1659
01:15:24,579 --> 01:15:28,390
everywhere that access that code is

1660
01:15:26,380 --> 01:15:30,369
going to be a compile error and you can

1661
01:15:28,390 --> 01:15:34,090
go ahead and change it to the access ER

1662
01:15:30,369 --> 01:15:36,069
at that point so never ever ever ever

1663
01:15:34,090 --> 01:15:38,980
put in an access er until it actually

1664
01:15:36,069 --> 01:15:40,479
does something not to mention the fact

1665
01:15:38,979 --> 01:15:42,519
that everyone who wrote that code was

1666
01:15:40,479 --> 01:15:43,779
not expecting it to do something so they

1667
01:15:42,520 --> 01:15:45,580
didn't test it that way

1668
01:15:43,779 --> 01:15:47,949
you don't know if it's a performance

1669
01:15:45,579 --> 01:15:49,180
bottleneck right someone might be

1670
01:15:47,949 --> 01:15:50,619
thinking they're just you know

1671
01:15:49,180 --> 01:15:51,940
incrementing a variable and that's free

1672
01:15:50,619 --> 01:15:53,619
but it turns out now you added like a

1673
01:15:51,939 --> 01:15:55,449
hash table lookup in there and all of a

1674
01:15:53,619 --> 01:15:59,289
sudden the performance goes yeah it goes

1675
01:15:55,449 --> 01:16:02,050
to crap right so never ever ever ever

1676
01:15:59,289 --> 01:16:04,569
ever ever under any circumstances do

1677
01:16:02,050 --> 01:16:06,760
this thing this is like awful code just

1678
01:16:04,569 --> 01:16:08,979
absolutely horrific this is like you're

1679
01:16:06,760 --> 01:16:11,710
fired right like I fire you immediately

1680
01:16:08,979 --> 01:16:13,629
if I see anything like this never ever

1681
01:16:11,710 --> 01:16:20,439
if there is an access err it had better

1682
01:16:13,630 --> 01:16:23,310
do something in there day 1 . and that

1683
01:16:20,439 --> 01:16:23,309
is all I have to say about that

1684
01:16:31,960 --> 01:16:36,500
insofar as how would you handle parsing

1685
01:16:34,609 --> 01:16:40,219
errors or exceptions being a recursive

1686
01:16:36,500 --> 01:16:43,250
descent parser that's a that's a little

1687
01:16:40,220 --> 01:16:44,960
bit of a big question you'll have to

1688
01:16:43,250 --> 01:16:49,789
hold that one until when I do handmade

1689
01:16:44,960 --> 01:16:55,130
parser what early Mun the internet says

1690
01:16:49,789 --> 01:17:01,010
counter started on V C++ oh really huh

1691
01:16:55,130 --> 01:17:03,500
um is that true I had no idea cuz I just

1692
01:17:01,010 --> 01:17:05,539
thought it was on GCC that's where I

1693
01:17:03,500 --> 01:17:07,189
first heard of it and I didn't think

1694
01:17:05,539 --> 01:17:10,489
that you could do it on MSP C but if it

1695
01:17:07,189 --> 01:17:11,809
started on MSP C then that's that's also

1696
01:17:10,489 --> 01:17:13,729
cool I mean we're looking at the

1697
01:17:11,810 --> 01:17:16,370
predefined macros specs for GCC so

1698
01:17:13,729 --> 01:17:17,509
obviously it's on GCC and if MSB C was

1699
01:17:16,369 --> 01:17:20,180
the first one to have it then yeah I

1700
01:17:17,510 --> 01:17:22,449
mean I think we're totally golden on

1701
01:17:20,180 --> 01:17:22,450
that

1702
01:17:37,600 --> 01:17:42,360
I think that's it for questions

1703
01:17:53,829 --> 01:18:02,019
looks like that's it alright well spin

1704
01:17:56,979 --> 01:18:03,339
down people's we will spin it down well

1705
01:18:02,020 --> 01:18:07,210
that was a pretty entertaining stream

1706
01:18:03,340 --> 01:18:09,279
today and that is probably going to be

1707
01:18:07,210 --> 01:18:11,170
something that I go put into the Mali

1708
01:18:09,279 --> 01:18:13,929
rocket codebase now that I know that

1709
01:18:11,170 --> 01:18:15,399
that's that simple I just never thought

1710
01:18:13,930 --> 01:18:19,180
of counter before for some reason and

1711
01:18:15,399 --> 01:18:20,799
that's that's why rewriting code is good

1712
01:18:19,180 --> 01:18:22,360
sometimes too I mean you know like I

1713
01:18:20,800 --> 01:18:24,550
write something and I reuse it and then

1714
01:18:22,359 --> 01:18:26,889
I forget you know the limitations under

1715
01:18:24,550 --> 01:18:28,570
which I wrote it and then I come back

1716
01:18:26,890 --> 01:18:31,270
and look at it again and it's like oh

1717
01:18:28,569 --> 01:18:32,799
well why am i doing it that way there's

1718
01:18:31,270 --> 01:18:33,880
a way smarter way to do it that I just

1719
01:18:32,800 --> 01:18:35,680
didn't know about or that wasn't

1720
01:18:33,880 --> 01:18:39,789
available or I hadn't thought it through

1721
01:18:35,680 --> 01:18:44,350
at the time who knows why and there you

1722
01:18:39,789 --> 01:18:45,279
go imagine that anyway thank you very

1723
01:18:44,350 --> 01:18:46,450
much for joining me for another episode

1724
01:18:45,279 --> 01:18:48,250
of hand made here oh it's been a

1725
01:18:46,449 --> 01:18:52,239
pleasure coding with you as always if

1726
01:18:48,250 --> 01:18:53,949
you would like to follow along with this

1727
01:18:52,239 --> 01:18:55,960
code at home you can always preorder

1728
01:18:53,949 --> 01:18:58,090
handmade hero of the game on handmade

1729
01:18:55,960 --> 01:18:59,409
hero org and you get the source code as

1730
01:18:58,090 --> 01:19:01,119
we're working on it so it's kind of

1731
01:18:59,409 --> 01:19:02,409
available from day one just as we go

1732
01:19:01,119 --> 01:19:03,460
every night I upload the source codes

1733
01:19:02,409 --> 01:19:06,539
you can download it and play with it

1734
01:19:03,460 --> 01:19:08,260
yourself and experiment and kind of like

1735
01:19:06,539 --> 01:19:10,510
reinforce anything that you may have

1736
01:19:08,260 --> 01:19:11,770
learned watching the stream so i highly

1737
01:19:10,510 --> 01:19:12,789
recommend that's a good way to go if

1738
01:19:11,770 --> 01:19:14,140
you're trying to learn from the series i

1739
01:19:12,789 --> 01:19:15,010
also highly recommend checking out some

1740
01:19:14,140 --> 01:19:16,660
of the other stuff we've got here

1741
01:19:15,010 --> 01:19:19,630
there's a forum site you can go to ask

1742
01:19:16,659 --> 01:19:20,769
questions you can go get community ports

1743
01:19:19,630 --> 01:19:22,750
to Mac and Linux the people I'm working

1744
01:19:20,770 --> 01:19:25,570
on you can get an antidote guide people

1745
01:19:22,750 --> 01:19:27,159
have been working on you can also go to

1746
01:19:25,569 --> 01:19:29,469
our patreon page if you want to support

1747
01:19:27,159 --> 01:19:31,389
the video series and I've got some

1748
01:19:29,470 --> 01:19:33,159
exciting things to talk about coming up

1749
01:19:31,390 --> 01:19:35,829
with the patreon a little bit later as

1750
01:19:33,159 --> 01:19:38,380
well we have a tweet bot which tweets

1751
01:19:35,829 --> 01:19:39,279
the schedule at you and that is kind of

1752
01:19:38,380 --> 01:19:43,420
handy if you're trying to catch the

1753
01:19:39,279 --> 01:19:45,670
stream live so yeah check that out if

1754
01:19:43,420 --> 01:19:47,170
you want to come come back tomorrow 5:00

1755
01:19:45,670 --> 01:19:48,210
p.m. Pacific Daylight Time is the next

1756
01:19:47,170 --> 01:19:50,920
time they'll be streaming but if you

1757
01:19:48,210 --> 01:19:52,390
don't if you ever don't know and you

1758
01:19:50,920 --> 01:19:54,609
just like I want to see the xm8 hero

1759
01:19:52,390 --> 01:19:56,500
that tweet bot will always tell you and

1760
01:19:54,609 --> 01:19:57,399
so you can kind of figure out if it's

1761
01:19:56,500 --> 01:20:00,460
gonna be a time that works for you

1762
01:19:57,399 --> 01:20:02,319
anyway tomorrow we'll go start cleaning

1763
01:20:00,460 --> 01:20:03,730
up our print out ability there because

1764
01:20:02,319 --> 01:20:05,799
now we've got some debug counters we'd

1765
01:20:03,729 --> 01:20:07,118
like to be able to see them and so now

1766
01:20:05,800 --> 01:20:08,349
would be a time for us

1767
01:20:07,118 --> 01:20:10,359
start maybe doing a little work on the

1768
01:20:08,349 --> 01:20:12,309
actual debug overlay stuff because again

1769
01:20:10,359 --> 01:20:13,688
that's a very crucial part of our debug

1770
01:20:12,309 --> 01:20:15,219
system and now that we've got something

1771
01:20:13,689 --> 01:20:17,409
we actually want to see it would be a

1772
01:20:15,219 --> 01:20:19,479
great time for us to go start working on

1773
01:20:17,408 --> 01:20:21,398
that and making a nice little thing we

1774
01:20:19,479 --> 01:20:24,340
can use that actually is you know kind

1775
01:20:21,399 --> 01:20:26,530
of a good sort of debug overlay that we

1776
01:20:24,340 --> 01:20:27,909
can actually manipulate and do

1777
01:20:26,529 --> 01:20:31,509
interesting things with so that's what

1778
01:20:27,908 --> 01:20:33,609
we'll start doing tomorrow until then I

1779
01:20:31,510 --> 01:20:34,929
hope everyone has fun programming and I

1780
01:20:33,609 --> 01:20:37,768
will see you guys on the Internet take

1781
01:20:34,929 --> 01:20:37,769
it every Z everyone

