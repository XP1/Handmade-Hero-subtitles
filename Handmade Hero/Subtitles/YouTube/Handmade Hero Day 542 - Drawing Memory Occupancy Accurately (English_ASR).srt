1
00:00:00,000 --> 00:00:03,270
hello everyone welcome to handmade Hiro

2
00:00:01,500 --> 00:00:05,160
sure we could a complete game live on

3
00:00:03,270 --> 00:00:06,599
stream before we get started today I

4
00:00:05,160 --> 00:00:09,210
wanted to point out the fact that

5
00:00:06,599 --> 00:00:11,789
tickets are now on sale for handmade

6
00:00:09,210 --> 00:00:13,250
Seattle don't ask me why there's nothing

7
00:00:11,789 --> 00:00:17,969
let me do that there we go

8
00:00:13,250 --> 00:00:20,579
at handmade - Seattle dot-com this is

9
00:00:17,969 --> 00:00:23,429
not our conference I don't really run

10
00:00:20,579 --> 00:00:26,009
any conferences anymore but it's it's a

11
00:00:23,429 --> 00:00:28,050
conference run by abner who you may know

12
00:00:26,010 --> 00:00:31,230
from he's the person who originally

13
00:00:28,050 --> 00:00:35,308
organized the handmade Network website

14
00:00:31,230 --> 00:00:37,380
and obviously it's taking place in

15
00:00:35,308 --> 00:00:40,738
Seattle so if that's a place that you

16
00:00:37,380 --> 00:00:42,719
can either get to or live in tickets

17
00:00:40,738 --> 00:00:49,199
just went on sale there $40 for a

18
00:00:42,719 --> 00:00:52,109
limited time and the the tickets button

19
00:00:49,200 --> 00:00:53,600
looks like you just click on it and put

20
00:00:52,109 --> 00:00:55,890
it in here if you want to get tickets

21
00:00:53,600 --> 00:00:58,198
obviously there's a bunch of information

22
00:00:55,890 --> 00:00:58,920
on here about what the conference has at

23
00:00:58,198 --> 00:01:01,229
it

24
00:00:58,920 --> 00:01:03,149
Abner's been adding stuff so go take a

25
00:01:01,229 --> 00:01:08,158
look see if that's something you're

26
00:01:03,149 --> 00:01:10,290
interested in and yeah and save yourself

27
00:01:08,159 --> 00:01:13,290
some money if you want to go because the

28
00:01:10,290 --> 00:01:18,118
ticket prices I guess will go up after

29
00:01:13,290 --> 00:01:24,270
the early bird discount expires all

30
00:01:18,118 --> 00:01:26,759
right today we are just gonna do a

31
00:01:24,269 --> 00:01:27,868
little bit of ok wait I have to correct

32
00:01:26,759 --> 00:01:29,578
something it says I'm surprised a case

33
00:01:27,868 --> 00:01:32,728
like hunter I haven't played Chrono

34
00:01:29,578 --> 00:01:36,089
Trigger someone has to fix this I

35
00:01:32,728 --> 00:01:38,368
haven't played it I haven't played it I

36
00:01:36,090 --> 00:01:40,049
I need to play it it's a game

37
00:01:38,368 --> 00:01:41,188
historically that I should be familiar

38
00:01:40,049 --> 00:01:43,950
with but I haven't played Chrono Trigger

39
00:01:41,188 --> 00:01:45,449
alright sorry chat the chat still

40
00:01:43,950 --> 00:01:47,609
talking about come on sugar from the pre

41
00:01:45,450 --> 00:01:49,950
stream I didn't even bring up Chrono

42
00:01:47,609 --> 00:01:52,140
Trigger Roman brought up Chrono Trigger

43
00:01:49,950 --> 00:01:53,130
and then now people are at saying

44
00:01:52,140 --> 00:01:54,509
they're surprised like I'm here but I

45
00:01:53,129 --> 00:01:57,199
don't even know - Connor I've never

46
00:01:54,509 --> 00:01:57,200
played Chrono Trigger

47
00:02:00,909 --> 00:02:09,969
I do like a good JRPG though I quite

48
00:02:06,430 --> 00:02:11,050
enjoyed Final Fantasy 10 for example not

49
00:02:09,969 --> 00:02:14,199
that that has much to do with Chrono

50
00:02:11,050 --> 00:02:16,719
Trigger but you know point being I also

51
00:02:14,199 --> 00:02:21,579
love Wild Arms 5 weld Arms 5 probably my

52
00:02:16,719 --> 00:02:25,959
favorite JRPG that game is awesome all

53
00:02:21,580 --> 00:02:29,560
right moving on yesterday we finished

54
00:02:25,959 --> 00:02:32,349
going through our code base using the

55
00:02:29,560 --> 00:02:33,789
new memory analysis that we added so

56
00:02:32,349 --> 00:02:35,469
that we could clean up anything that

57
00:02:33,789 --> 00:02:36,639
looked like it was wrong that's the

58
00:02:35,469 --> 00:02:38,199
first time we've been able to really

59
00:02:36,639 --> 00:02:39,518
like view how our memories being

60
00:02:38,199 --> 00:02:40,929
allocated and you know there are some

61
00:02:39,519 --> 00:02:43,870
things I spotted I just want to take a

62
00:02:40,930 --> 00:02:45,849
look at so we've got all that working

63
00:02:43,870 --> 00:02:49,420
now and the only thing that I wanted to

64
00:02:45,849 --> 00:02:51,280
do today and so that next weekend we can

65
00:02:49,419 --> 00:02:53,738
start on some entity system stuff that

66
00:02:51,280 --> 00:02:55,769
we'd want to do that sort of motivated

67
00:02:53,739 --> 00:02:58,299
having this this memory view available

68
00:02:55,769 --> 00:03:00,670
what I want to do is finish up that

69
00:02:58,299 --> 00:03:03,549
memory view so that it provides a more

70
00:03:00,669 --> 00:03:05,169
reasonable display of the memory because

71
00:03:03,549 --> 00:03:07,659
right now it's sort of just hacked in

72
00:03:05,169 --> 00:03:10,328
there and it doesn't really display the

73
00:03:07,659 --> 00:03:11,709
memory the way I would like and so you

74
00:03:10,329 --> 00:03:15,159
know since we did all this work I want

75
00:03:11,709 --> 00:03:17,409
to make the display good so if we look

76
00:03:15,159 --> 00:03:19,449
at this part of it this part of the

77
00:03:17,409 --> 00:03:20,919
memory display seems pretty nice there's

78
00:03:19,449 --> 00:03:24,849
a couple things I think I would like to

79
00:03:20,919 --> 00:03:25,988
change that we might add today but we

80
00:03:24,849 --> 00:03:27,430
added some pretty nice stuff in here

81
00:03:25,989 --> 00:03:30,099
first of all you can toggle whether or

82
00:03:27,430 --> 00:03:32,430
not you see debug allocations and you

83
00:03:30,099 --> 00:03:35,108
can also toggle whether or not you have

84
00:03:32,430 --> 00:03:36,879
call site analysis in there so this

85
00:03:35,109 --> 00:03:43,420
would basically tell you like okay what

86
00:03:36,879 --> 00:03:44,650
are the why can't I and when actually my

87
00:03:43,419 --> 00:03:48,369
head was in the way I couldn't interact

88
00:03:44,650 --> 00:03:50,079
with my own application um so the with

89
00:03:48,370 --> 00:03:52,289
the call site attribution on it's really

90
00:03:50,079 --> 00:03:55,689
nice you can actually see for any given

91
00:03:52,289 --> 00:03:58,358
memory arena you know exactly who is

92
00:03:55,689 --> 00:04:00,370
taking up all of the memory so basically

93
00:03:58,359 --> 00:04:03,939
you know you look at one of these things

94
00:04:00,370 --> 00:04:05,859
and you say oh you know in in my game

95
00:04:03,939 --> 00:04:08,829
mode I've got you know sixty seven

96
00:04:05,859 --> 00:04:11,260
blocks allocated and there's the 1077

97
00:04:08,829 --> 00:04:13,180
total allocations where are they all

98
00:04:11,259 --> 00:04:14,500
coming from right and we can see them

99
00:04:13,180 --> 00:04:16,420
all here at

100
00:04:14,500 --> 00:04:20,108
that's really important because that

101
00:04:16,420 --> 00:04:22,060
allows us to go target anybody who seems

102
00:04:20,108 --> 00:04:24,789
like they're allocating more than they

103
00:04:22,060 --> 00:04:27,040
should be or doing something that we

104
00:04:24,790 --> 00:04:30,280
didn't expect if we see somebody in here

105
00:04:27,040 --> 00:04:32,230
who has allocations attributed to them

106
00:04:30,279 --> 00:04:35,049
and we're like why is that allocating so

107
00:04:32,230 --> 00:04:37,060
much right this is a nice view for that

108
00:04:35,050 --> 00:04:38,650
and it's pretty easy plus we can always

109
00:04:37,060 --> 00:04:40,839
just turn it back to this where it just

110
00:04:38,649 --> 00:04:42,609
gives us a quick heads up so we can see

111
00:04:40,839 --> 00:04:45,639
like our percentage usage and stuff like

112
00:04:42,610 --> 00:04:48,400
that now if we go over to arenas this is

113
00:04:45,639 --> 00:04:50,349
the part that's broken right now yes we

114
00:04:48,399 --> 00:04:51,639
display all of our memory layouts and

115
00:04:50,350 --> 00:04:54,189
you can hover over everything to see

116
00:04:51,639 --> 00:04:57,699
what's what's what but the problem is

117
00:04:54,189 --> 00:04:59,290
it's not correctly sized so what we do

118
00:04:57,699 --> 00:05:01,810
is every block of memory that gets

119
00:04:59,290 --> 00:05:03,910
allocated the sub allocations are

120
00:05:01,810 --> 00:05:06,790
correctly sized but the blocks

121
00:05:03,910 --> 00:05:09,730
themselves are just always 1/4 of the

122
00:05:06,790 --> 00:05:12,220
window width long this leads to bad

123
00:05:09,730 --> 00:05:14,740
visual information it leads to the fact

124
00:05:12,220 --> 00:05:17,230
that for example this which according to

125
00:05:14,740 --> 00:05:20,228
the byte read out there in the hover is

126
00:05:17,230 --> 00:05:23,500
around 3 megabytes worth of data that

127
00:05:20,228 --> 00:05:27,060
takes up the same visual space as this

128
00:05:23,500 --> 00:05:30,579
which is about 1.7 or 1.5 I guess

129
00:05:27,060 --> 00:05:33,459
megabytes of data and we don't want that

130
00:05:30,579 --> 00:05:36,879
we want 3 megabytes to clearly be like

131
00:05:33,459 --> 00:05:38,799
twice as large as one and a half

132
00:05:36,879 --> 00:05:41,110
megabytes that should just you know

133
00:05:38,800 --> 00:05:43,629
that's just common sense because

134
00:05:41,110 --> 00:05:45,400
otherwise even though we cognitively

135
00:05:43,629 --> 00:05:47,290
know that that's not what's going on

136
00:05:45,399 --> 00:05:49,899
here when we look at this your intuition

137
00:05:47,290 --> 00:05:52,150
just always assumes that if something's

138
00:05:49,899 --> 00:05:53,439
you know twice as big as something else

139
00:05:52,149 --> 00:05:54,728
it takes twice as much space or if

140
00:05:53,439 --> 00:05:56,290
something's the same size it takes the

141
00:05:54,728 --> 00:05:58,689
same space that's what if thinking and

142
00:05:56,290 --> 00:06:00,610
so it's gonna constantly sort of screw

143
00:05:58,689 --> 00:06:02,978
with our intuition about who's using

144
00:06:00,610 --> 00:06:06,490
memory and why and so what we want to do

145
00:06:02,978 --> 00:06:08,949
is go in and fix that that's what we

146
00:06:06,490 --> 00:06:11,560
want to do today and while we're in

147
00:06:08,949 --> 00:06:13,569
there like I said I want to add one

148
00:06:11,560 --> 00:06:16,300
thing to this and that is that right now

149
00:06:13,569 --> 00:06:18,490
we do not currently track peak memory

150
00:06:16,300 --> 00:06:20,620
usage by anybody I'd like to probably

151
00:06:18,490 --> 00:06:22,978
add that it's not very hard for us to

152
00:06:20,620 --> 00:06:25,449
track a peak memory usage for an arena

153
00:06:22,978 --> 00:06:28,269
and so I would like some way of tracking

154
00:06:25,449 --> 00:06:31,149
peak mem and then we can display

155
00:06:28,269 --> 00:06:33,459
in here select blocks Alex and and this

156
00:06:31,149 --> 00:06:37,239
right here for example we could have

157
00:06:33,459 --> 00:06:39,788
like peak versus you know we could do

158
00:06:37,240 --> 00:06:42,699
this printout twice

159
00:06:39,788 --> 00:06:45,699
you know once for peak once for not you

160
00:06:42,699 --> 00:06:47,470
know current and the reason for that is

161
00:06:45,699 --> 00:06:51,370
that if you look at like something like

162
00:06:47,470 --> 00:06:52,990
the frame temporary area you know you

163
00:06:51,370 --> 00:06:55,689
look at this and you're like wow the

164
00:06:52,990 --> 00:06:58,660
frame temporary only takes two megabytes

165
00:06:55,689 --> 00:07:01,990
of memory right well we don't actually

166
00:06:58,660 --> 00:07:05,919
know how much memory the frame temporary

167
00:07:01,990 --> 00:07:09,728
takes because we don't know like people

168
00:07:05,918 --> 00:07:12,579
can use temporary memory and then get

169
00:07:09,728 --> 00:07:15,610
rid of it right so if you come into

170
00:07:12,579 --> 00:07:17,589
routine and you allocated you know fifty

171
00:07:15,610 --> 00:07:19,780
megabytes of temporary stuff did a bunch

172
00:07:17,589 --> 00:07:21,668
of crap in there and then you know ended

173
00:07:19,779 --> 00:07:24,158
the temporary before the end of the

174
00:07:21,668 --> 00:07:26,769
frame this will still read two megabytes

175
00:07:24,158 --> 00:07:29,560
and we don't know about that fifty that

176
00:07:26,769 --> 00:07:33,008
got used for just inside the frame right

177
00:07:29,560 --> 00:07:34,689
so I do feel like I you know we want

178
00:07:33,009 --> 00:07:38,348
something in here that just also has a

179
00:07:34,689 --> 00:07:41,468
peak meter just to let us know like hey

180
00:07:38,348 --> 00:07:44,680
this thing is two megabytes of sustained

181
00:07:41,468 --> 00:07:46,389
but it Peaks out to a certain amount at

182
00:07:44,680 --> 00:07:47,829
various times right that's just a good

183
00:07:46,389 --> 00:07:51,848
piece of information to have in addition

184
00:07:47,829 --> 00:07:53,649
so I'd like that as well to add in here

185
00:07:51,848 --> 00:07:55,180
and that's not very hard to add but the

186
00:07:53,649 --> 00:07:57,250
main thing we want to deal with like I

187
00:07:55,180 --> 00:07:58,478
said is this right here and so that's

188
00:07:57,250 --> 00:08:00,810
the first thing I'm going to start with

189
00:07:58,478 --> 00:08:03,610
today is just let's get this thing

190
00:08:00,810 --> 00:08:06,870
displaying in a way that's not totally

191
00:08:03,610 --> 00:08:10,900
wrong from the standpoint of layout

192
00:08:06,870 --> 00:08:12,788
alright I so if I pop back to for coder

193
00:08:10,899 --> 00:08:14,859
and I take a look at that particular

194
00:08:12,788 --> 00:08:18,759
routine the one that's actually doing

195
00:08:14,860 --> 00:08:21,430
that that's the interval the memory

196
00:08:18,759 --> 00:08:24,788
interval drawing routine right this

197
00:08:21,430 --> 00:08:27,370
routine and if you see how we wrote this

198
00:08:24,788 --> 00:08:29,228
routine I started to say where we're

199
00:08:27,370 --> 00:08:31,000
gonna need this happening in the last

200
00:08:29,228 --> 00:08:33,578
stream we're gonna need something that

201
00:08:31,000 --> 00:08:36,458
can take a memory range and draw it into

202
00:08:33,578 --> 00:08:39,069
position so what I want to do is be able

203
00:08:36,458 --> 00:08:41,288
to generate calls to this draw memory

204
00:08:39,070 --> 00:08:41,710
range and I want to pass like a starting

205
00:08:41,288 --> 00:08:43,689
address

206
00:08:41,710 --> 00:08:45,970
and a one pass last address with a color

207
00:08:43,690 --> 00:08:48,490
and then I want this thing to draw them

208
00:08:45,970 --> 00:08:52,389
and I want it to basically just fill up

209
00:08:48,490 --> 00:08:55,539
the space proportional to how many bytes

210
00:08:52,389 --> 00:08:58,059
were being used so the first thing I

211
00:08:55,539 --> 00:09:00,429
want to do there is effectively keep a

212
00:08:58,059 --> 00:09:05,409
running total of the amount of address

213
00:09:00,429 --> 00:09:07,719
space that we use up and so you know I'm

214
00:09:05,409 --> 00:09:10,029
gonna call this at address and it's not

215
00:09:07,720 --> 00:09:12,670
really an address per se it's sort of

216
00:09:10,029 --> 00:09:14,439
like a virtualized address because we're

217
00:09:12,669 --> 00:09:16,809
stacking all these together and we don't

218
00:09:14,440 --> 00:09:19,240
care about how the address space is

219
00:09:16,809 --> 00:09:21,519
actually laid out in terms of page

220
00:09:19,240 --> 00:09:23,169
mapping that's the OSS problem and not

221
00:09:21,519 --> 00:09:26,679
only is the OS problem but we don't care

222
00:09:23,169 --> 00:09:28,750
it doesn't matter how our memory is like

223
00:09:26,679 --> 00:09:33,159
organized in physical memory really as

224
00:09:28,750 --> 00:09:36,340
long as it's there there's not a lot of

225
00:09:33,159 --> 00:09:39,490
differences now there are cases where

226
00:09:36,340 --> 00:09:41,410
aliasing for things like the TLB lookups

227
00:09:39,490 --> 00:09:43,600
and all these sorts of things can have

228
00:09:41,409 --> 00:09:45,459
effects on chip so I don't want to be

229
00:09:43,600 --> 00:09:46,870
taken out of context to say that it

230
00:09:45,460 --> 00:09:49,810
doesn't matter how your memory is mapped

231
00:09:46,870 --> 00:09:51,220
ever obviously there's certain cases

232
00:09:49,809 --> 00:09:54,699
where you do care about that but

233
00:09:51,220 --> 00:09:56,790
generally speaking especially when

234
00:09:54,700 --> 00:09:58,930
you're talking about at the page level

235
00:09:56,789 --> 00:10:01,299
it's certainly not something that we're

236
00:09:58,929 --> 00:10:03,429
concerned about here so when we come

237
00:10:01,299 --> 00:10:05,529
into the debug arena this is how we're

238
00:10:03,429 --> 00:10:08,559
currently drawing for example our blocks

239
00:10:05,529 --> 00:10:11,559
and so what I want to do is I want to

240
00:10:08,559 --> 00:10:15,250
make this at address kind of move along

241
00:10:11,559 --> 00:10:18,159
properly as we draw the stuff that we're

242
00:10:15,250 --> 00:10:20,320
working at and so I think maybe I would

243
00:10:18,159 --> 00:10:22,779
call this block address more

244
00:10:20,320 --> 00:10:27,400
specifically and so in here what we

245
00:10:22,779 --> 00:10:29,199
would do is we'd say like block end

246
00:10:27,399 --> 00:10:31,809
address and maybe this is blocked like

247
00:10:29,200 --> 00:10:34,420
start address and so the block end

248
00:10:31,809 --> 00:10:36,669
address here is going to be whatever the

249
00:10:34,419 --> 00:10:38,709
block start address was and then what

250
00:10:36,669 --> 00:10:40,750
we're gonna do is add however much

251
00:10:38,710 --> 00:10:43,120
memory is actually used in this

252
00:10:40,750 --> 00:10:46,590
particular block allocation and so we

253
00:10:43,120 --> 00:10:50,440
have the size allocated there oops and

254
00:10:46,590 --> 00:10:53,889
so this will tell us specifically what

255
00:10:50,440 --> 00:10:55,270
what we need to know for you know where

256
00:10:53,889 --> 00:10:57,429
the block starts and ends

257
00:10:55,269 --> 00:11:00,399
that means that when we go to draw this

258
00:10:57,429 --> 00:11:02,349
it's a pretty easy thing to do once we

259
00:11:00,399 --> 00:11:04,028
implement this draw memory range I can

260
00:11:02,350 --> 00:11:05,740
just call this with those two addresses

261
00:11:04,028 --> 00:11:09,009
and know that the block will get placed

262
00:11:05,740 --> 00:11:11,560
where it should be placed right so I'm

263
00:11:09,009 --> 00:11:14,588
gonna get this out of here for now I

264
00:11:11,559 --> 00:11:16,419
don't want this right what I want to do

265
00:11:14,589 --> 00:11:18,820
instead is just called raw memory range

266
00:11:16,419 --> 00:11:20,829
and I'm gonna call this with the profile

267
00:11:18,820 --> 00:11:22,930
rect we were given and then just these

268
00:11:20,830 --> 00:11:24,730
addresses so we have the block start

269
00:11:22,929 --> 00:11:25,838
address and the block and address and

270
00:11:24,730 --> 00:11:27,550
I'm going to trust

271
00:11:25,839 --> 00:11:29,500
oh and also of course the block color

272
00:11:27,549 --> 00:11:32,289
that we decide based on whether it's

273
00:11:29,500 --> 00:11:34,089
suppressed or not I'm just gonna trust

274
00:11:32,289 --> 00:11:35,708
that draw a memory range we'll figure

275
00:11:34,089 --> 00:11:37,540
out how to draw the correct number of

276
00:11:35,708 --> 00:11:39,639
bars in the correct place to occupy that

277
00:11:37,539 --> 00:11:42,730
space and we'll talk about that part

278
00:11:39,639 --> 00:11:44,919
later so then what I want to do is we go

279
00:11:42,730 --> 00:11:48,100
in here and draw the sub allocations out

280
00:11:44,919 --> 00:11:50,458
of this same thing I don't really want

281
00:11:48,100 --> 00:11:55,330
to talk about any of this stuff anymore

282
00:11:50,458 --> 00:11:57,909
I'm not going to talk about sub regions

283
00:11:55,330 --> 00:11:59,620
inside this blocks rectangle we're just

284
00:11:57,909 --> 00:12:01,389
gonna talk about absolute addresses and

285
00:11:59,620 --> 00:12:03,429
we're gonna let drum memory rains figure

286
00:12:01,389 --> 00:12:06,069
that out so we're replacing this

287
00:12:03,429 --> 00:12:08,289
effectively with this what I want to do

288
00:12:06,070 --> 00:12:11,110
is grab these and I'm just gonna put

289
00:12:08,289 --> 00:12:13,059
these up into this routine up here in

290
00:12:11,110 --> 00:12:14,409
case any of its stuff that I want to use

291
00:12:13,059 --> 00:12:16,449
later because this is the thing that

292
00:12:14,409 --> 00:12:19,269
will actually be drawing those

293
00:12:16,450 --> 00:12:21,339
rectangles but what I do want to do is

294
00:12:19,269 --> 00:12:25,000
say this part right here draw memory

295
00:12:21,339 --> 00:12:28,390
range it's you know I want this tooltip

296
00:12:25,000 --> 00:12:29,679
to still work and so is in rectangles

297
00:12:28,389 --> 00:12:31,990
not gonna cut it

298
00:12:29,679 --> 00:12:34,629
if draw memory range might draw multiple

299
00:12:31,990 --> 00:12:37,180
rectangles right I can't get a single

300
00:12:34,629 --> 00:12:38,769
rectangle back that tells me this is

301
00:12:37,179 --> 00:12:40,328
specifically where the mouse would have

302
00:12:38,769 --> 00:12:41,889
to be there's gonna be multiple

303
00:12:40,328 --> 00:12:43,149
rectangles and I need to know whether

304
00:12:41,889 --> 00:12:45,129
the mouse was over any of those

305
00:12:43,149 --> 00:12:47,259
rectangles so what I really want to do

306
00:12:45,129 --> 00:12:49,509
is just say draw memory range should

307
00:12:47,259 --> 00:12:51,278
itself tell me did you draw any

308
00:12:49,509 --> 00:12:52,870
rectangles that contain the mouse and if

309
00:12:51,278 --> 00:12:56,110
you do oops

310
00:12:52,870 --> 00:12:58,509
then I need to know then I can print out

311
00:12:56,110 --> 00:13:02,139
my tooltip so this is a rectangle also

312
00:12:58,509 --> 00:13:03,730
kind of moves up in here as something

313
00:13:02,139 --> 00:13:05,708
that we're going to do per rectangle

314
00:13:03,730 --> 00:13:08,399
that we draw in order to return the

315
00:13:05,708 --> 00:13:10,229
right information so at the

316
00:13:08,399 --> 00:13:11,579
and here you can see me updating where

317
00:13:10,230 --> 00:13:12,300
we were in the block we don't need any

318
00:13:11,580 --> 00:13:14,550
of that anymore

319
00:13:12,299 --> 00:13:16,500
we don't even need to keep a block index

320
00:13:14,549 --> 00:13:18,689
that kind of goes away and furthermore

321
00:13:16,500 --> 00:13:20,700
the block Y also goes away right we

322
00:13:18,690 --> 00:13:24,390
don't need any of this stuff all of this

323
00:13:20,700 --> 00:13:26,278
stuff is and even the block dim all of

324
00:13:24,389 --> 00:13:28,080
that stuff the only thing we really need

325
00:13:26,278 --> 00:13:29,129
to keep track of is the allocation index

326
00:13:28,080 --> 00:13:30,720
and the reason we need to do that is

327
00:13:29,129 --> 00:13:32,039
because we're trying to cycle colors so

328
00:13:30,720 --> 00:13:33,690
that no two blocks that are next to each

329
00:13:32,039 --> 00:13:36,269
other use the same color that makes it

330
00:13:33,690 --> 00:13:37,050
easier for us to see where they are and

331
00:13:36,269 --> 00:13:44,519
what they're doing

332
00:13:37,049 --> 00:13:47,849
right now there is something we may want

333
00:13:44,519 --> 00:13:49,230
to do with that later as well that we

334
00:13:47,850 --> 00:13:52,170
could talk about and that has to do with

335
00:13:49,230 --> 00:13:56,250
the grids so there there are some things

336
00:13:52,169 --> 00:13:58,429
we may want to like imma put to doing

337
00:13:56,250 --> 00:13:58,429
here

338
00:14:13,028 --> 00:14:18,439
and really what I'm seeing with that

339
00:14:15,830 --> 00:14:21,050
comment is you know when we look at this

340
00:14:18,440 --> 00:14:22,730
map I don't know how valuable it is to

341
00:14:21,049 --> 00:14:24,620
just have this rainbow of colors there

342
00:14:22,730 --> 00:14:25,970
right because it's really not adding any

343
00:14:24,620 --> 00:14:27,950
information it's just letting me know

344
00:14:25,970 --> 00:14:29,180
that there's different allocations but

345
00:14:27,950 --> 00:14:31,700
since I'm gonna put a border on

346
00:14:29,179 --> 00:14:34,099
everything mmm I can kind of see that

347
00:14:31,700 --> 00:14:36,950
already so what we may want to do here

348
00:14:34,100 --> 00:14:42,110
is try to have our debug color table be

349
00:14:36,950 --> 00:14:44,509
indexed by which grid like which line of

350
00:14:42,110 --> 00:14:46,690
code actually cause this allocation to

351
00:14:44,509 --> 00:14:50,929
happen and that one when we look at it

352
00:14:46,690 --> 00:14:52,730
we can visually see based on the color

353
00:14:50,929 --> 00:14:54,739
if there's like a lot of you know this

354
00:14:52,730 --> 00:14:56,480
particular green we know that there's a

355
00:14:54,740 --> 00:14:58,129
lot of that particular line of code

356
00:14:56,480 --> 00:14:59,659
doing stuff and so I think we want to

357
00:14:58,129 --> 00:15:01,490
change to doing that but there's a

358
00:14:59,659 --> 00:15:05,088
little bit of work involved in that and

359
00:15:01,490 --> 00:15:06,620
so I would like to there's a little bit

360
00:15:05,089 --> 00:15:09,200
of work involved in doing that well I

361
00:15:06,620 --> 00:15:13,909
should say because we could you know

362
00:15:09,200 --> 00:15:15,860
just use the hash on like the pointer to

363
00:15:13,909 --> 00:15:17,899
the grid or something but in order to do

364
00:15:15,860 --> 00:15:22,339
it well what we really want is something

365
00:15:17,899 --> 00:15:24,139
that sort of uses the grids and only

366
00:15:22,339 --> 00:15:25,850
assigns colors to things that are

367
00:15:24,139 --> 00:15:28,879
actually showing up on the map and so on

368
00:15:25,850 --> 00:15:29,930
so you know we we need to do a better

369
00:15:28,879 --> 00:15:32,838
job if we want to actually make that

370
00:15:29,929 --> 00:15:34,969
work well okay so now we've got

371
00:15:32,839 --> 00:15:36,500
ourselves down to the point where we

372
00:15:34,970 --> 00:15:38,269
just need to fill in what this drum Emme

373
00:15:36,500 --> 00:15:39,710
range is and then we can go work on the

374
00:15:38,269 --> 00:15:41,779
drum memory range function and in theory

375
00:15:39,710 --> 00:15:43,970
when when we get that working the whole

376
00:15:41,779 --> 00:15:46,189
thing just works right so if you look in

377
00:15:43,970 --> 00:15:48,110
here we've got drum memory range we know

378
00:15:46,190 --> 00:15:50,980
that a lock each one of these

379
00:15:48,110 --> 00:15:53,720
allocations right this debug arena

380
00:15:50,980 --> 00:15:55,879
allocation each one of these tells us

381
00:15:53,720 --> 00:15:57,440
both the offset and the size that's

382
00:15:55,879 --> 00:16:00,919
allocated you know what I'm saying

383
00:15:57,440 --> 00:16:03,350
and so if instead of using any kind of

384
00:16:00,919 --> 00:16:06,199
sub allocate sub region of the rectangle

385
00:16:03,350 --> 00:16:09,649
we just use the block start address and

386
00:16:06,200 --> 00:16:11,089
produce based on this where the

387
00:16:09,649 --> 00:16:13,039
addresses are they're covered by this

388
00:16:11,089 --> 00:16:14,600
allocation we can just called ROM memory

389
00:16:13,039 --> 00:16:16,909
range the same way we called it before

390
00:16:14,600 --> 00:16:18,560
and have it properly draw the region and

391
00:16:16,909 --> 00:16:18,949
if we then use this color that we have

392
00:16:18,559 --> 00:16:21,078
here

393
00:16:18,950 --> 00:16:26,690
I'm gonna call that a la couleur

394
00:16:21,078 --> 00:16:28,638
actually we should be fine so if I have

395
00:16:26,690 --> 00:16:30,410
an Alex start address here what's that

396
00:16:28,639 --> 00:16:32,570
gonna be well obviously it will be the

397
00:16:30,409 --> 00:16:35,179
blocks start address plus whatever the

398
00:16:32,570 --> 00:16:37,040
offset is inside that block which I have

399
00:16:35,179 --> 00:16:40,549
right that's where this would start and

400
00:16:37,039 --> 00:16:42,349
then similarly the end address is just

401
00:16:40,549 --> 00:16:47,569
gonna be the start address plus however

402
00:16:42,350 --> 00:16:49,850
big it is right so pretty simple all I

403
00:16:47,570 --> 00:16:51,519
had to do is compute those two things

404
00:16:49,850 --> 00:16:53,720
and now I can call the same function

405
00:16:51,519 --> 00:16:55,519
since I'm calling the same function for

406
00:16:53,720 --> 00:16:58,339
both that leaves me in the nice position

407
00:16:55,519 --> 00:17:00,078
of just having implement one function

408
00:16:58,339 --> 00:17:02,269
called dram memory range which figures

409
00:17:00,078 --> 00:17:03,708
out we're inside the profile rect we

410
00:17:02,269 --> 00:17:05,900
have to fail in order to show that

411
00:17:03,708 --> 00:17:10,909
region and there's a couple different

412
00:17:05,900 --> 00:17:12,980
cases that we have to sort of handle all

413
00:17:10,910 --> 00:17:14,269
right so some times or something like

414
00:17:12,980 --> 00:17:15,919
this these routines can be kind of

415
00:17:14,269 --> 00:17:18,769
complicated so some ways it helps to

416
00:17:15,919 --> 00:17:21,259
enumerate the cases that we need to

417
00:17:18,769 --> 00:17:26,689
actually handle and effectively what we

418
00:17:21,259 --> 00:17:28,970
know is we've got a memory range that's

419
00:17:26,689 --> 00:17:31,490
going to occupy some portion of our

420
00:17:28,970 --> 00:17:36,169
memory rectangle right the total memory

421
00:17:31,490 --> 00:17:39,380
display and what we know is that that

422
00:17:36,169 --> 00:17:42,290
size could be anything so it could

423
00:17:39,380 --> 00:17:43,940
occupy multiple rows so the first thing

424
00:17:42,289 --> 00:17:47,240
we know is that we're going to have to

425
00:17:43,940 --> 00:17:49,789
fill at least a rectangle in one row but

426
00:17:47,240 --> 00:17:51,650
we may have to fill multiple rows so we

427
00:17:49,789 --> 00:17:53,359
know that we have a start with a for I

428
00:17:51,650 --> 00:17:57,110
loop that loops over all of the rows

429
00:17:53,359 --> 00:18:00,048
that have to be filled and then on each

430
00:17:57,109 --> 00:18:04,399
row we know we have three possible cases

431
00:18:00,048 --> 00:18:06,679
that we could handle right one is that

432
00:18:04,400 --> 00:18:09,169
we have a rectangle that starts at the

433
00:18:06,679 --> 00:18:12,410
very start of the row because a previous

434
00:18:09,169 --> 00:18:14,000
row overflowed right so we started on

435
00:18:12,410 --> 00:18:17,000
the previous row and now we're still

436
00:18:14,000 --> 00:18:20,349
filling in this row so we start at 0 and

437
00:18:17,000 --> 00:18:24,400
fill you know up to a particular point

438
00:18:20,349 --> 00:18:27,379
we know we might fill the entire row or

439
00:18:24,400 --> 00:18:31,040
we might start somewhere and go to the

440
00:18:27,380 --> 00:18:32,060
end of the row right and then finally we

441
00:18:31,039 --> 00:18:35,059
have wherever

442
00:18:32,059 --> 00:18:36,470
and we may just have a little trunk you

443
00:18:35,059 --> 00:18:38,089
know even if we're not in there suppose

444
00:18:36,470 --> 00:18:39,920
there's a fourth case which is just some

445
00:18:38,089 --> 00:18:42,259
part where we neither hit the end or the

446
00:18:39,920 --> 00:18:44,090
beginning of the thing we're filling

447
00:18:42,259 --> 00:18:45,890
right so there's really four cases start

448
00:18:44,089 --> 00:18:47,329
at the beginning go somewhere start at

449
00:18:45,890 --> 00:18:49,130
the beginning go to the end start

450
00:18:47,329 --> 00:18:51,879
somewhere go to the end and start

451
00:18:49,130 --> 00:18:56,720
somewhere and in somewhere on that row

452
00:18:51,880 --> 00:18:59,570
right okay so what we need to do is

453
00:18:56,720 --> 00:19:01,850
figure out how to produce those cases

454
00:18:59,569 --> 00:19:06,049
properly right we need to figure out how

455
00:19:01,849 --> 00:19:09,619
to make this rectangle thing draw that

456
00:19:06,049 --> 00:19:11,240
right and furthermore we know that since

457
00:19:09,619 --> 00:19:13,819
we're gonna be drawing these rectangles

458
00:19:11,240 --> 00:19:17,269
sequentially it's not really very hard

459
00:19:13,819 --> 00:19:19,639
for us to see how this is going to work

460
00:19:17,269 --> 00:19:22,099
if we have the rectangle that we're

461
00:19:19,640 --> 00:19:26,150
filling if we force them to pass us the

462
00:19:22,099 --> 00:19:32,079
mouse P that's currently active then and

463
00:19:26,150 --> 00:19:37,009
let me just grab that here and pass it

464
00:19:32,079 --> 00:19:39,409
there and there

465
00:19:37,009 --> 00:19:41,539
I can trivially you know without doing

466
00:19:39,410 --> 00:19:43,670
any extra work I can trivially change

467
00:19:41,539 --> 00:19:45,920
this to include the boolean result that

468
00:19:43,670 --> 00:19:47,570
I wanted where I just say anytime we

469
00:19:45,920 --> 00:19:49,910
draw a rectangle if we're in it we set

470
00:19:47,569 --> 00:19:51,500
the return value to true and then you

471
00:19:49,910 --> 00:19:53,480
know we're effectively testing all the

472
00:19:51,500 --> 00:19:56,660
rectangles for hit detection off we go

473
00:19:53,480 --> 00:19:58,579
right so what we want to do now is say

474
00:19:56,660 --> 00:20:00,830
all right while we're looping over these

475
00:19:58,579 --> 00:20:02,929
rows we you know we need two things we

476
00:20:00,829 --> 00:20:04,759
need to figure out what the row min and

477
00:20:02,930 --> 00:20:08,180
Max is and then we need to figure out

478
00:20:04,759 --> 00:20:10,400
how much of each row we actually contain

479
00:20:08,180 --> 00:20:13,580
let's start with this which is figuring

480
00:20:10,400 --> 00:20:16,190
out where we are well we now need to

481
00:20:13,579 --> 00:20:22,490
define some basic piece of information

482
00:20:16,190 --> 00:20:26,000
which is like how much space one row on

483
00:20:22,490 --> 00:20:30,440
our display should take up right so we

484
00:20:26,000 --> 00:20:34,549
need like a value that's like bytes per

485
00:20:30,440 --> 00:20:37,519
row right and so something has to be

486
00:20:34,549 --> 00:20:40,000
bytes per row if we assume that we're

487
00:20:37,519 --> 00:20:44,029
allocating you know a gigabyte of memory

488
00:20:40,000 --> 00:20:45,159
in a typical PC that's not very much for

489
00:20:44,029 --> 00:20:47,108
a typical PC game but

490
00:20:45,159 --> 00:20:50,169
say that you know handmade hero doesn't

491
00:20:47,108 --> 00:20:52,210
have you know Red Dead Redemption art

492
00:20:50,169 --> 00:20:55,210
budget so it shouldn't have quite so

493
00:20:52,210 --> 00:20:56,558
much stuff um if we're using a gigabyte

494
00:20:55,210 --> 00:20:58,269
of memory or something just just to

495
00:20:56,558 --> 00:21:01,720
store art assets and the world and

496
00:20:58,269 --> 00:21:04,839
whatever uh then the question is well

497
00:21:01,720 --> 00:21:07,058
how much space you know can we afford

498
00:21:04,839 --> 00:21:08,618
for drawing each you know each one of

499
00:21:07,058 --> 00:21:10,358
our rows of it's like 20 pixels or

500
00:21:08,618 --> 00:21:12,579
something you know how much space could

501
00:21:10,358 --> 00:21:14,259
we actually afford to use there and in

502
00:21:12,579 --> 00:21:17,499
fact you know let's actually compute

503
00:21:14,259 --> 00:21:19,808
this out if we have you know maybe let's

504
00:21:17,499 --> 00:21:20,798
say 800 pixels to work with or something

505
00:21:19,808 --> 00:21:23,918
like that

506
00:21:20,798 --> 00:21:27,729
and we divide that by 20 that basically

507
00:21:23,919 --> 00:21:31,028
says well there's 40 of these rows right

508
00:21:27,729 --> 00:21:34,569
there's 40 rows that we could show there

509
00:21:31,028 --> 00:21:38,108
so if we wanted to say that there was a

510
00:21:34,569 --> 00:21:39,638
gigabytes worth of stuff right and we

511
00:21:38,108 --> 00:21:43,689
wanted sorry that's a divide there and

512
00:21:39,638 --> 00:21:47,408
we wanted to draw a gigabytes worth of

513
00:21:43,690 --> 00:21:48,669
data how many megabytes per row would we

514
00:21:47,409 --> 00:21:50,289
need to do that and it looks like

515
00:21:48,669 --> 00:21:54,909
somewhere around you know maybe like a

516
00:21:50,288 --> 00:21:57,579
32 megabytes per row would be a good

517
00:21:54,909 --> 00:22:01,299
number for handling that much

518
00:21:57,579 --> 00:22:03,069
information right and that's actually a

519
00:22:01,298 --> 00:22:04,929
lot more than we were doing before so I

520
00:22:03,069 --> 00:22:06,970
believe before it was more like we were

521
00:22:04,929 --> 00:22:10,960
drawing something like 4 megabytes per

522
00:22:06,970 --> 00:22:12,788
row and so I do wonder if maybe that's a

523
00:22:10,960 --> 00:22:16,210
little too aggressive but again this

524
00:22:12,788 --> 00:22:19,298
number is one we can chart tune and zoom

525
00:22:16,210 --> 00:22:25,119
we can have like a zoom that we would do

526
00:22:19,298 --> 00:22:27,298
to you know allow you to see it more

527
00:22:25,118 --> 00:22:31,058
specifically to if you wanted to right

528
00:22:27,298 --> 00:22:32,679
so let's figure out how you know look

529
00:22:31,058 --> 00:22:35,408
let's let's just pick a number here that

530
00:22:32,679 --> 00:22:36,940
seems reasonable maybe we'll say that

531
00:22:35,409 --> 00:22:39,070
will go with kind of the current one

532
00:22:36,940 --> 00:22:40,629
which was 4 megabytes per row knowing

533
00:22:39,069 --> 00:22:46,048
that maybe that's a little bit low and

534
00:22:40,628 --> 00:22:48,728
we'll do more later so megabytes for

535
00:22:46,048 --> 00:22:51,729
that produces the right byte number of

536
00:22:48,729 --> 00:22:53,710
bytes ro 4 megabytes here and what that

537
00:22:51,729 --> 00:22:55,088
means is now for a starting address it's

538
00:22:53,710 --> 00:22:57,129
pretty trivial for us to figure out what

539
00:22:55,088 --> 00:22:58,409
row it's on we just say like well

540
00:22:57,128 --> 00:23:02,849
divided by the

541
00:22:58,410 --> 00:23:04,860
four row right and the one past last

542
00:23:02,849 --> 00:23:12,599
address we could divide that by bytes

543
00:23:04,859 --> 00:23:15,929
for row as well right okay now I feel

544
00:23:12,599 --> 00:23:18,299
like probably we would want to say also

545
00:23:15,930 --> 00:23:23,580
in here if starting address is not equal

546
00:23:18,299 --> 00:23:24,569
to ending right because otherwise we

547
00:23:23,579 --> 00:23:26,730
don't want to draw anything and

548
00:23:24,569 --> 00:23:29,069
similarly we don't really want to go to

549
00:23:26,730 --> 00:23:31,200
one past the last address we want to go

550
00:23:29,069 --> 00:23:35,579
to just before one pass last third the

551
00:23:31,200 --> 00:23:37,340
last address right okay all right so

552
00:23:35,579 --> 00:23:41,730
this will loop over all of the rows

553
00:23:37,339 --> 00:23:43,529
correctly putting the you know so giving

554
00:23:41,730 --> 00:23:47,039
us an opportunity to step through them

555
00:23:43,529 --> 00:23:49,799
and at each one of these we want to

556
00:23:47,039 --> 00:23:53,909
figure out how big this rectangle should

557
00:23:49,799 --> 00:23:56,129
be now we know based on the row index

558
00:23:53,910 --> 00:24:00,960
alone we should be able to figure out

559
00:23:56,130 --> 00:24:03,480
the Y value right so we can start by

560
00:24:00,960 --> 00:24:05,789
saying that this rectangle right the

561
00:24:03,480 --> 00:24:07,500
rectangle has a min Y of something and

562
00:24:05,789 --> 00:24:09,420
it has a max Y of something

563
00:24:07,500 --> 00:24:12,299
well the max Y is the thing that will

564
00:24:09,420 --> 00:24:14,610
solve for probably and the min Y would

565
00:24:12,299 --> 00:24:17,159
be because we want stack from the top

566
00:24:14,609 --> 00:24:23,279
down the min Y will just be whatever the

567
00:24:17,160 --> 00:24:24,779
max Y is minus our row height and in

568
00:24:23,279 --> 00:24:26,670
this case our row height is gonna

569
00:24:24,779 --> 00:24:30,329
probably be 20 right that's what we were

570
00:24:26,670 --> 00:24:34,350
using before I want to say so anyway so

571
00:24:30,329 --> 00:24:37,889
let's call that row height and that's

572
00:24:34,349 --> 00:24:42,929
gonna be 20 we're gonna subtract that

573
00:24:37,890 --> 00:24:44,880
here and in order to figure out where we

574
00:24:42,930 --> 00:24:49,230
are we just need to take the row index

575
00:24:44,880 --> 00:24:52,110
itself and multiply it by that row

576
00:24:49,230 --> 00:24:53,819
height now I suppose there's really no

577
00:24:52,109 --> 00:24:55,619
particular reason I can't do this all in

578
00:24:53,819 --> 00:24:57,299
64 this isn't a particularly time

579
00:24:55,619 --> 00:25:01,289
critical routine so I suppose I can just

580
00:24:57,299 --> 00:25:03,539
do this and be done with it all right so

581
00:25:01,289 --> 00:25:05,609
now we have the ability to fill our rows

582
00:25:03,539 --> 00:25:07,200
properly but we don't really know what

583
00:25:05,609 --> 00:25:09,839
columns right we don't know the x

584
00:25:07,200 --> 00:25:12,059
extents of this thing on any particular

585
00:25:09,839 --> 00:25:16,259
row and so what we want to do

586
00:25:12,059 --> 00:25:19,740
now is figure out we've got a starting

587
00:25:16,259 --> 00:25:23,609
address we've got an ending address do

588
00:25:19,740 --> 00:25:26,640
those starting at any addresses map into

589
00:25:23,609 --> 00:25:29,399
this row or not right and so one thing

590
00:25:26,640 --> 00:25:32,640
we could say is all right let's start

591
00:25:29,400 --> 00:25:35,550
with the min X at the profile rep deck

592
00:25:32,640 --> 00:25:40,980
oh by the way I need to add that in here

593
00:25:35,549 --> 00:25:42,779
so the profile rect needs to we need to

594
00:25:40,980 --> 00:25:44,819
start at the top of the profile rect and

595
00:25:42,779 --> 00:25:48,569
then we subtract our row index minus our

596
00:25:44,819 --> 00:25:54,439
row height right as we go so let's

597
00:25:48,569 --> 00:25:57,839
suppose I start with my rectangle oops

598
00:25:54,440 --> 00:26:01,259
change the wrong variable then I we

599
00:25:57,839 --> 00:26:04,079
start with rect min X and rect max X set

600
00:26:01,259 --> 00:26:06,660
so that they map exactly to the extents

601
00:26:04,079 --> 00:26:09,659
of the prototype profile rect if this

602
00:26:06,660 --> 00:26:11,820
entire row is occupied by us so our

603
00:26:09,660 --> 00:26:13,710
allocation spans you know multiple rows

604
00:26:11,819 --> 00:26:16,289
in its filling an entire row that would

605
00:26:13,710 --> 00:26:20,370
just be correct so the question is when

606
00:26:16,289 --> 00:26:21,869
isn't it correct well we've got two

607
00:26:20,369 --> 00:26:25,559
cases that are pretty clear here

608
00:26:21,869 --> 00:26:28,019
actually if the row index equals the min

609
00:26:25,559 --> 00:26:30,839
row index then we know we're starting

610
00:26:28,019 --> 00:26:33,480
somewhere in this row so we should set

611
00:26:30,839 --> 00:26:36,720
this to actually be somewhere inside the

612
00:26:33,480 --> 00:26:40,620
row not at the very start and similarly

613
00:26:36,720 --> 00:26:44,069
in here right where we've got the

614
00:26:40,619 --> 00:26:45,449
profile rect max X set to the I'm sorry

615
00:26:44,069 --> 00:26:48,149
the rectangle we're filling set to the

616
00:26:45,450 --> 00:26:51,900
max profile uh we have the same thing if

617
00:26:48,150 --> 00:26:52,860
and I don't know why that expand that

618
00:26:51,900 --> 00:26:55,170
there we go

619
00:26:52,859 --> 00:26:57,569
if we're on the max row then we know we

620
00:26:55,170 --> 00:26:59,850
end somewhere in here rather than going

621
00:26:57,569 --> 00:27:01,740
all the way to the end right so now all

622
00:26:59,849 --> 00:27:05,339
we have to do is figure out well if

623
00:27:01,740 --> 00:27:10,140
that's the case where do we start and

624
00:27:05,339 --> 00:27:12,869
end like how far along right well we in

625
00:27:10,140 --> 00:27:14,370
addition to computing where we are by

626
00:27:12,869 --> 00:27:17,309
using the row index times the row height

627
00:27:14,369 --> 00:27:22,319
we can also compute the row starting

628
00:27:17,309 --> 00:27:24,329
address right we can take the number of

629
00:27:22,319 --> 00:27:25,799
bytes that occur in any given row and

630
00:27:24,329 --> 00:27:27,809
multiply it by the road

631
00:27:25,799 --> 00:27:30,389
on and in so doing we can come up with

632
00:27:27,809 --> 00:27:33,359
the total number of bytes that it took

633
00:27:30,390 --> 00:27:36,960
to get to the start of this row at that

634
00:27:33,359 --> 00:27:38,519
point the two values we were passed in

635
00:27:36,960 --> 00:27:41,610
the starting address and one past the

636
00:27:38,519 --> 00:27:45,599
last address can be mapped relative to

637
00:27:41,609 --> 00:27:49,769
the row so here I can say oh the

638
00:27:45,599 --> 00:27:56,549
starting address - the row starting

639
00:27:49,769 --> 00:28:00,589
address right / the bytes per row tells

640
00:27:56,549 --> 00:28:05,819
me how far along this rectangle I went

641
00:28:00,589 --> 00:28:08,669
right so if I lurked that T value right

642
00:28:05,819 --> 00:28:10,679
this is effectively a T value if I just

643
00:28:08,670 --> 00:28:14,009
lurked that so I went from profile

644
00:28:10,680 --> 00:28:14,880
wrecked min X to profile wrecked max X

645
00:28:14,009 --> 00:28:18,740
right

646
00:28:14,880 --> 00:28:23,580
I would get how far I have to go across

647
00:28:18,740 --> 00:28:26,130
now what you'll notice is really doing

648
00:28:23,579 --> 00:28:28,460
this operation I could have because I

649
00:28:26,130 --> 00:28:31,230
know that if I just set it to zero right

650
00:28:28,460 --> 00:28:33,539
I'm gonna get all the way to the min X

651
00:28:31,230 --> 00:28:35,880
so I actually don't need to do this I

652
00:28:33,539 --> 00:28:38,909
could just always compute this lerp

653
00:28:35,880 --> 00:28:41,970
right and so this becomes a little bit

654
00:28:38,910 --> 00:28:45,720
more concise I could just say look use

655
00:28:41,970 --> 00:28:56,130
this in the case where you sort of see

656
00:28:45,720 --> 00:28:58,079
it here go in the case where you know

657
00:28:56,130 --> 00:29:01,140
that you're on the min row just use zero

658
00:28:58,079 --> 00:29:04,529
if not use the actual computation of the

659
00:29:01,140 --> 00:29:08,490
ratio and then do the lerp right and the

660
00:29:04,529 --> 00:29:11,129
same thing could be true for our our max

661
00:29:08,490 --> 00:29:17,519
X right we could just say and we could

662
00:29:11,130 --> 00:29:21,030
call groups we could call this T min and

663
00:29:17,519 --> 00:29:22,619
T max as well so same exact idea here

664
00:29:21,029 --> 00:29:24,899
check to see if we're on the max row

665
00:29:22,619 --> 00:29:26,279
index and then we say if we are on the

666
00:29:24,900 --> 00:29:29,670
max row index we want to go all the way

667
00:29:26,279 --> 00:29:35,700
to the end otherwise I want to do the

668
00:29:29,670 --> 00:29:38,580
one past last address - the row starting

669
00:29:35,700 --> 00:29:40,830
address divided by the bytes per row

670
00:29:38,579 --> 00:29:50,278
and then I want to go ahead and alert

671
00:29:40,829 --> 00:29:51,750
that out in the exact same way okay so

672
00:29:50,278 --> 00:29:53,159
hopefully that makes some sense and

673
00:29:51,750 --> 00:29:55,349
again all I'm doing is just figuring out

674
00:29:53,159 --> 00:29:57,450
where that spans are now that we've got

675
00:29:55,349 --> 00:29:59,579
interact we can fill it and we can test

676
00:29:57,450 --> 00:30:08,880
to see if we're in it and that should

677
00:29:59,579 --> 00:30:19,699
basically be it right what's the problem

678
00:30:08,880 --> 00:30:19,700
here a lot color it always a v4 though

679
00:30:30,009 --> 00:30:36,429
okay uh so now we have to debug this

680
00:30:34,128 --> 00:30:45,558
thing obviously not off to a good start

681
00:30:36,429 --> 00:30:47,659
and sure exactly what yeah not quite

682
00:30:45,558 --> 00:30:49,569
sure exactly what I guess that's

683
00:30:47,659 --> 00:30:53,269
everything stacked on top of it so all

684
00:30:49,569 --> 00:30:56,778
right but again this is really all we

685
00:30:53,269 --> 00:30:59,509
have to do to finish this up okay so I

686
00:30:56,778 --> 00:31:02,569
believe or I hope anyway that we're

687
00:30:59,509 --> 00:31:05,690
passing this information correctly oh

688
00:31:02,569 --> 00:31:07,759
you know what no we're not so we have to

689
00:31:05,690 --> 00:31:10,669
start by fixing this our block start

690
00:31:07,759 --> 00:31:12,470
address has to be equal to our block end

691
00:31:10,669 --> 00:31:14,899
address at the end of this right we need

692
00:31:12,470 --> 00:31:17,149
to move forward every time we draw a

693
00:31:14,898 --> 00:31:18,829
block we need to advance so that the

694
00:31:17,148 --> 00:31:23,988
next block starts on the end of it so

695
00:31:18,829 --> 00:31:26,358
that's obviously that was wrong but I

696
00:31:23,989 --> 00:31:29,829
think we also have other issues so let

697
00:31:26,358 --> 00:31:33,259
me just fix that first and then we can

698
00:31:29,829 --> 00:31:34,788
work on the other part of it as well all

699
00:31:33,259 --> 00:31:38,659
right so it looks like we're still

700
00:31:34,788 --> 00:31:41,298
computing a little bit of a wrong sort

701
00:31:38,659 --> 00:31:44,330
of span fill here so let's go try to fix

702
00:31:41,298 --> 00:31:47,450
that as well so first things first let's

703
00:31:44,329 --> 00:31:49,548
make sure these are sort of looking

704
00:31:47,450 --> 00:31:52,278
correct they look pretty reasonable to

705
00:31:49,548 --> 00:31:55,579
me right we compute that start address

706
00:31:52,278 --> 00:31:57,499
as zero we then compute the end address

707
00:31:55,579 --> 00:31:59,898
by just seeing how big the block is we

708
00:31:57,499 --> 00:32:02,919
put all these inside the block so I

709
00:31:59,898 --> 00:32:06,168
think that should you know do it roughly

710
00:32:02,919 --> 00:32:08,559
that looks pretty good to me so I just

711
00:32:06,169 --> 00:32:11,059
want to make sure this stuff looks okay

712
00:32:08,558 --> 00:32:13,970
so looking at when this gets passed in

713
00:32:11,058 --> 00:32:16,720
computing the min and Max row here I

714
00:32:13,970 --> 00:32:19,920
mean that seems reasonable right

715
00:32:16,720 --> 00:32:19,920
[Music]

716
00:32:43,450 --> 00:32:49,588
[Music]

717
00:32:45,348 --> 00:32:52,588
so you know honestly I don't see the bug

718
00:32:49,588 --> 00:33:04,288
right away if you look at the min/max

719
00:32:52,588 --> 00:33:08,190
why that seems to be right but there's

720
00:33:04,288 --> 00:33:13,710
some weirdness here already like I'm not

721
00:33:08,190 --> 00:33:18,469
sure why it skips stuff there but it's

722
00:33:13,710 --> 00:33:23,129
not totally wrong either so I don't

723
00:33:18,469 --> 00:33:25,798
quite get it I also don't know where

724
00:33:23,128 --> 00:33:28,259
that seam is coming from so we got some

725
00:33:25,798 --> 00:33:31,519
really weird stuff happening here that

726
00:33:28,259 --> 00:33:34,108
makes it look like we do have issues

727
00:33:31,519 --> 00:33:36,149
well alright let me but let's let's

728
00:33:34,108 --> 00:33:38,878
focus more on just the basic parts here

729
00:33:36,148 --> 00:33:41,308
so we know that these things are only

730
00:33:38,878 --> 00:33:45,329
supposed to be 64 K long so the question

731
00:33:41,308 --> 00:33:46,769
is why are they showing up if so why are

732
00:33:45,329 --> 00:33:49,978
they showing up as like filling till the

733
00:33:46,769 --> 00:33:52,588
end of the row because it looks like

734
00:33:49,979 --> 00:33:55,009
maybe the min row max row is sort of at

735
00:33:52,588 --> 00:34:02,278
least somewhat correct but this

736
00:33:55,009 --> 00:34:08,059
computation looks incorrect oh it's

737
00:34:02,278 --> 00:34:11,969
because these are backwards that's why

738
00:34:08,059 --> 00:34:15,319
what I wanted to say but for some reason

739
00:34:11,969 --> 00:34:15,318
wasn't saying I don't know why this is

740
00:34:23,150 --> 00:34:35,940
um yeah much better so what we wanted to

741
00:34:33,269 --> 00:34:38,309
say was if it is on the Munroe then we

742
00:34:35,940 --> 00:34:40,800
do map it in otherwise we just assume it

743
00:34:38,309 --> 00:34:42,719
started from the very beginning and the

744
00:34:40,800 --> 00:34:44,340
same was true of the ending if it was on

745
00:34:42,719 --> 00:34:47,519
the end we map it in so those were just

746
00:34:44,340 --> 00:34:50,970
set to the opposite way round of what I

747
00:34:47,519 --> 00:34:54,539
actually wanted but that seems like yeah

748
00:34:50,969 --> 00:34:55,639
just a simple typo mistake let's see if

749
00:34:54,539 --> 00:34:59,279
that helps there we go

750
00:34:55,639 --> 00:35:02,579
all right so now if we sort of look

751
00:34:59,280 --> 00:35:04,769
through here we can see all these folks

752
00:35:02,579 --> 00:35:05,819
they're taking up 64 all them taking up

753
00:35:04,769 --> 00:35:07,769
so just forget so they're the same size

754
00:35:05,820 --> 00:35:10,950
we can now see this is that three

755
00:35:07,769 --> 00:35:13,170
megabytes you can now really see how

756
00:35:10,949 --> 00:35:15,960
long it is same here right there's a big

757
00:35:13,170 --> 00:35:17,570
allocation and you can sort of see that

758
00:35:15,960 --> 00:35:20,369
difference in there it gets you the gap

759
00:35:17,570 --> 00:35:22,890
then here's the huge allocation for

760
00:35:20,369 --> 00:35:26,339
handmade asset right it's using like

761
00:35:22,889 --> 00:35:28,859
this huge amount of memory there for for

762
00:35:26,340 --> 00:35:31,260
the asset storage so this is great right

763
00:35:28,860 --> 00:35:32,789
this is a way better memory map than we

764
00:35:31,260 --> 00:35:37,410
had before because now you can really

765
00:35:32,789 --> 00:35:40,050
see the difference in terms of who is

766
00:35:37,409 --> 00:35:41,279
taking up how much memory now you can

767
00:35:40,050 --> 00:35:43,680
see the problem you have where we're

768
00:35:41,280 --> 00:35:45,269
gonna have to be able to scroll this or

769
00:35:43,679 --> 00:35:46,619
size it differently I think what I'm

770
00:35:45,269 --> 00:35:47,639
gonna choose to do is just make them a

771
00:35:46,619 --> 00:35:48,989
little bit smaller because I want to be

772
00:35:47,639 --> 00:35:51,329
able to see them all at once

773
00:35:48,989 --> 00:35:52,799
I don't really want to have to scroll I

774
00:35:51,329 --> 00:35:54,900
want to be able to see this memory map a

775
00:35:52,800 --> 00:35:56,490
little bit cleaner so I'm wondering if

776
00:35:54,900 --> 00:35:59,789
maybe what I could do is just change the

777
00:35:56,489 --> 00:36:03,089
row height to ten maybe and see if maybe

778
00:35:59,789 --> 00:36:08,840
that's a reasonable way to do this I

779
00:36:03,090 --> 00:36:08,840
don't know what happened there

780
00:36:12,588 --> 00:36:19,380
there we go and so with a row height of

781
00:36:17,068 --> 00:36:21,358
10 it's a little bit easier to see you

782
00:36:19,380 --> 00:36:24,358
can you can get everything into one view

783
00:36:21,358 --> 00:36:26,670
which is nice it is a little bit small

784
00:36:24,358 --> 00:36:32,699
but that's okay you know for the most

785
00:36:26,670 --> 00:36:34,230
part and so yeah like I mean that's a

786
00:36:32,699 --> 00:36:35,909
pretty good memory view I mean I think

787
00:36:34,230 --> 00:36:39,240
that tells us like everything we need to

788
00:36:35,909 --> 00:36:44,098
know you know I'm saying it's pretty

789
00:36:39,239 --> 00:36:46,169
clear who's doing what and why this

790
00:36:44,099 --> 00:36:47,490
asset storage I think is almost that's

791
00:36:46,170 --> 00:36:48,838
probably used the most exclusive for

792
00:36:47,489 --> 00:36:50,489
audio which we're not actually doing

793
00:36:48,838 --> 00:36:55,739
we're not actually using it for much

794
00:36:50,489 --> 00:37:00,000
audio at the moment but it's there but

795
00:36:55,739 --> 00:37:01,709
that's what we want to see so looking at

796
00:37:00,000 --> 00:37:03,358
this I'm actually pretty happy with this

797
00:37:01,710 --> 00:37:04,829
it's this part too that I want to

798
00:37:03,358 --> 00:37:07,048
minimize as much as I can though

799
00:37:04,829 --> 00:37:11,010
obviously and the reason for that is

800
00:37:07,048 --> 00:37:12,838
assets are what take all your memory in

801
00:37:11,010 --> 00:37:14,970
the optimal case because you just have

802
00:37:12,838 --> 00:37:17,308
tons of our tons of sound tons of music

803
00:37:14,969 --> 00:37:19,348
you want to just use as much memory as

804
00:37:17,309 --> 00:37:21,150
you can for buffering that stuff up so

805
00:37:19,349 --> 00:37:22,470
you don't have to hit the discs or have

806
00:37:21,150 --> 00:37:26,400
loading screens or that sort of stuff

807
00:37:22,469 --> 00:37:31,789
and so these parts of beam what's going

808
00:37:26,400 --> 00:37:31,789
on what's going on Molly okay baby

809
00:37:32,150 --> 00:37:37,769
for some reason Molly's sitting here

810
00:37:34,199 --> 00:37:39,598
next to me I don't know what yes you

811
00:37:37,769 --> 00:37:41,298
might want to play I can't play right

812
00:37:39,599 --> 00:37:44,700
now

813
00:37:41,298 --> 00:37:47,670
sorry baby anyway

814
00:37:44,699 --> 00:37:49,858
so this is exactly what we want to see

815
00:37:47,670 --> 00:37:51,539
but this is not so much what I want to

816
00:37:49,858 --> 00:37:53,130
see and the reason for that is not

817
00:37:51,539 --> 00:37:55,318
because this is too much memory to take

818
00:37:53,130 --> 00:37:58,740
up it's fine actually it's pretty small

819
00:37:55,318 --> 00:38:00,779
compared to this but again it's too big

820
00:37:58,739 --> 00:38:03,149
given the fact that we haven't built out

821
00:38:00,780 --> 00:38:06,119
our world yet we have a fairly minimal

822
00:38:03,150 --> 00:38:07,980
number of entities in there right now

823
00:38:06,119 --> 00:38:09,838
and so we can expect this to get like

824
00:38:07,980 --> 00:38:12,510
ten times larger or something probably

825
00:38:09,838 --> 00:38:13,920
and if you think of what that's gonna do

826
00:38:12,510 --> 00:38:14,520
to our memory profile it's kind of a

827
00:38:13,920 --> 00:38:17,369
disaster

828
00:38:14,519 --> 00:38:21,088
it's gonna start to like bloat out a lot

829
00:38:17,369 --> 00:38:23,430
right and so we've got we've got issues

830
00:38:21,088 --> 00:38:25,048
there that's going to be a pro

831
00:38:23,429 --> 00:38:27,028
so here's another thing I want to do I

832
00:38:25,048 --> 00:38:28,619
think I can also help you everybody say

833
00:38:27,028 --> 00:38:30,599
let's maybe we up it to eight megabytes

834
00:38:28,619 --> 00:38:32,789
per row again that helps us kind of

835
00:38:30,599 --> 00:38:34,890
visualize an amount of memory a little

836
00:38:32,789 --> 00:38:38,459
bit easier because we have you know a

837
00:38:34,889 --> 00:38:40,949
lot of allocations and stuff alright so

838
00:38:38,458 --> 00:38:44,669
there's our memory map and it's pretty I

839
00:38:40,949 --> 00:38:46,499
think that's pretty reasonable I wonder

840
00:38:44,670 --> 00:38:47,940
if I can make it maybe just a little

841
00:38:46,498 --> 00:38:52,858
bigger though cuz it's still a little

842
00:38:47,940 --> 00:38:55,699
bit hard to to see in terms of row the

843
00:38:52,858 --> 00:38:58,679
rows are a little bit small for my taste

844
00:38:55,699 --> 00:38:59,269
okay so I think that's pretty good all

845
00:38:58,679 --> 00:39:02,190
right

846
00:38:59,268 --> 00:39:04,318
okay so all this looks pretty good now I

847
00:39:02,190 --> 00:39:06,869
feel really happy about that I feel like

848
00:39:04,318 --> 00:39:09,690
that lets us see the memory map really

849
00:39:06,869 --> 00:39:11,849
cleanly I've got the size in here we

850
00:39:09,690 --> 00:39:13,289
don't have a per frame thing going on we

851
00:39:11,849 --> 00:39:15,239
main really not needed i may get rid of

852
00:39:13,289 --> 00:39:17,130
that I'm not sure that I care but I was

853
00:39:15,239 --> 00:39:23,219
gonna add something sort of like the

854
00:39:17,130 --> 00:39:26,190
profile so like this right you know we

855
00:39:23,219 --> 00:39:31,650
had that thing for who was taking the

856
00:39:26,190 --> 00:39:33,749
time and why so that you know would have

857
00:39:31,650 --> 00:39:35,880
been something interesting but we just

858
00:39:33,748 --> 00:39:38,909
don't have a hugely fluctuating memory

859
00:39:35,880 --> 00:39:41,160
like we don't really have that so I

860
00:39:38,909 --> 00:39:44,940
don't know that we care about that too

861
00:39:41,159 --> 00:39:48,690
much but you know who knows so anyway I

862
00:39:44,940 --> 00:39:49,979
think that's all good and in here I

863
00:39:48,690 --> 00:39:51,929
think the only other thing that I want

864
00:39:49,978 --> 00:39:57,298
to do is maybe try again try to color

865
00:39:51,929 --> 00:40:00,889
these entries by attribution instead of

866
00:39:57,298 --> 00:40:03,690
just randomly by allocation index that

867
00:40:00,889 --> 00:40:06,449
seems you know potentially more useful

868
00:40:03,690 --> 00:40:07,829
so that's the only other thing that kind

869
00:40:06,449 --> 00:40:09,479
of strikes me as something that maybe we

870
00:40:07,829 --> 00:40:11,309
would want to do because all of these

871
00:40:09,478 --> 00:40:12,808
are come from the same place so we kind

872
00:40:11,309 --> 00:40:14,999
of want to see those all as one color

873
00:40:12,809 --> 00:40:18,839
that seems like it would be a more

874
00:40:14,998 --> 00:40:20,488
useful thing to do right and the problem

875
00:40:18,838 --> 00:40:22,558
there is just I don't we don't probably

876
00:40:20,489 --> 00:40:24,088
have enough colors based on the number

877
00:40:22,559 --> 00:40:26,339
of allocation call sites we actually

878
00:40:24,088 --> 00:40:28,920
have you know if I look at this and I

879
00:40:26,338 --> 00:40:30,650
look at the number of call sites 1 2 3 4

880
00:40:28,920 --> 00:40:34,670
5 6 7 8

881
00:40:30,650 --> 00:40:36,619
9 10 11 12 13 14 15 16 17 18 19 20 about

882
00:40:34,670 --> 00:40:38,360
so you know let's say there's 30 to call

883
00:40:36,619 --> 00:40:52,400
sites in there something like that how

884
00:40:38,360 --> 00:40:54,680
big is our debug color table yeah I mean

885
00:40:52,400 --> 00:40:57,829
our debug color table needs to be like

886
00:40:54,679 --> 00:41:01,789
twice as big as it is right now and you

887
00:40:57,829 --> 00:41:03,349
know that's a nice thing to have so it

888
00:41:01,789 --> 00:41:05,719
would be cool to do something like that

889
00:41:03,349 --> 00:41:09,489
and maybe we could like what if we just

890
00:41:05,719 --> 00:41:13,429
took all this and sort of made one we're

891
00:41:09,489 --> 00:41:15,139
like let's try to do that cuz then we

892
00:41:13,429 --> 00:41:18,289
could actually see that memory map in a

893
00:41:15,139 --> 00:41:23,989
much nicer way and I kind of want that

894
00:41:18,289 --> 00:41:25,880
to happen so looking in here I write

895
00:41:23,989 --> 00:41:33,109
like what if we just started putting in

896
00:41:25,880 --> 00:41:36,800
some like 0.25 as well and so you know

897
00:41:33,110 --> 00:41:40,670
like maybe this is like all the zeros

898
00:41:36,800 --> 00:41:45,320
become 2.5 so they're just writer

899
00:41:40,670 --> 00:41:47,960
versions of the same colors I don't know

900
00:41:45,320 --> 00:41:50,930
we could also make all the ones be point

901
00:41:47,960 --> 00:41:56,090
7 5 s instead I don't know if that's

902
00:41:50,929 --> 00:41:58,250
good I really don't know I I kind of

903
00:41:56,090 --> 00:41:59,960
feel like one thing so here's the thing

904
00:41:58,250 --> 00:42:04,039
that would be a great hand made dot H

905
00:41:59,960 --> 00:42:06,320
file if anyone out there is listening it

906
00:42:04,039 --> 00:42:10,989
would be pretty awesome to do a thing

907
00:42:06,320 --> 00:42:14,870
where you had a file that was just this

908
00:42:10,989 --> 00:42:19,579
it was literally just this array and it

909
00:42:14,869 --> 00:42:22,099
was like a hundred or like 64 colors

910
00:42:19,579 --> 00:42:28,579
that had been tried to be balanced to be

911
00:42:22,099 --> 00:42:30,920
the most different like the easiest to

912
00:42:28,579 --> 00:42:32,900
differentiate so you try to solve for

913
00:42:30,920 --> 00:42:34,309
like a certain number of colors that

914
00:42:32,900 --> 00:42:35,809
will be differentiable like right a

915
00:42:34,309 --> 00:42:37,759
little solver that just goes through and

916
00:42:35,809 --> 00:42:40,519
like tries to like place colors almost

917
00:42:37,760 --> 00:42:41,330
like blue noise in color space we should

918
00:42:40,519 --> 00:42:43,969
do that sometime

919
00:42:41,329 --> 00:42:44,449
and then just have it's like debug color

920
00:42:43,969 --> 00:42:47,449
day

921
00:42:44,449 --> 00:42:51,109
it's a 64 line file right there just has

922
00:42:47,449 --> 00:42:55,539
the colors and that's it right don't

923
00:42:51,110 --> 00:42:55,539
even put this so people just do this you

924
00:42:57,730 --> 00:43:05,480
know what I mean that way they can be

925
00:43:00,769 --> 00:43:08,420
whatever struct name they want that

926
00:43:05,480 --> 00:43:11,690
would just be a cool file I think all

927
00:43:08,420 --> 00:43:12,619
right so this is a bigger debug color

928
00:43:11,690 --> 00:43:15,260
table now

929
00:43:12,619 --> 00:43:17,980
and so I'm hoping that now what I could

930
00:43:15,260 --> 00:43:21,500
do is when I draw these memory ranges

931
00:43:17,980 --> 00:43:24,079
when we come through and pass the color

932
00:43:21,500 --> 00:43:26,150
values so the block colors I don't care

933
00:43:24,079 --> 00:43:28,069
about because those are not the

934
00:43:26,150 --> 00:43:31,599
interesting part what I care about here

935
00:43:28,070 --> 00:43:35,269
is this a lot color what I need to do is

936
00:43:31,599 --> 00:43:38,089
have this a lock index the color index

937
00:43:35,269 --> 00:43:42,530
basically get assigned to a particular

938
00:43:38,090 --> 00:43:45,320
allocation based on the grid in question

939
00:43:42,530 --> 00:43:49,610
so based on the like line of code that

940
00:43:45,320 --> 00:43:54,140
that thing is coming from right and so I

941
00:43:49,610 --> 00:44:01,430
think what I want to do is track these

942
00:43:54,139 --> 00:44:06,769
things more specifically and allow them

943
00:44:01,429 --> 00:44:11,210
to get indexed in some other way so for

944
00:44:06,769 --> 00:44:14,690
example uh bear with me for a second

945
00:44:11,210 --> 00:44:17,210
here if you look at how I was doing this

946
00:44:14,690 --> 00:44:20,240
before right remember this call site

947
00:44:17,210 --> 00:44:21,769
thing basically what I was doing there

948
00:44:20,239 --> 00:44:26,179
is I was tracking the call sites

949
00:44:21,769 --> 00:44:30,860
dynamically you know I'm saying so going

950
00:44:26,179 --> 00:44:33,230
through the memory system you know these

951
00:44:30,860 --> 00:44:37,190
things don't know it's just this it has

952
00:44:33,230 --> 00:44:38,869
no idea what that grid was right well

953
00:44:37,190 --> 00:44:47,440
what if I did something more like this

954
00:44:38,869 --> 00:44:47,440
so we track the call sites here

955
00:44:51,630 --> 00:44:56,519
and we duplicate them right at the time

956
00:44:54,719 --> 00:44:59,969
where we actually look at them you know

957
00:44:56,519 --> 00:45:05,639
I'm saying and that way we can assign

958
00:44:59,969 --> 00:45:08,459
each one in index you know you know so

959
00:45:05,639 --> 00:45:11,400
that way we just always could use the

960
00:45:08,460 --> 00:45:13,920
call site data for doing things like a

961
00:45:11,400 --> 00:45:15,930
color lookup and furthermore like in

962
00:45:13,920 --> 00:45:18,450
here where we do like the push struct

963
00:45:15,929 --> 00:45:21,778
right we wouldn't have to hatch this

964
00:45:18,449 --> 00:45:25,108
anymore we could just use a direct

965
00:45:21,778 --> 00:45:29,338
lookup into that memory so for example

966
00:45:25,108 --> 00:45:32,598
instead of having to do a hash right

967
00:45:29,338 --> 00:45:35,009
here like with this call site hash thing

968
00:45:32,599 --> 00:45:38,099
that's actually a thing we could move

969
00:45:35,010 --> 00:45:42,200
out to here and this wouldn't have to be

970
00:45:38,099 --> 00:45:47,369
a call site hash instead this could be

971
00:45:42,199 --> 00:45:50,009
call site stats and it would push a flat

972
00:45:47,369 --> 00:45:53,519
array on that's just the size that it

973
00:45:50,010 --> 00:45:55,140
needs to be so taking a look at the

974
00:45:53,519 --> 00:45:58,829
debug state there would just be a veil

975
00:45:55,139 --> 00:46:01,618
of very variable like a counter it would

976
00:45:58,829 --> 00:46:07,170
just be debugger in a call site count

977
00:46:01,619 --> 00:46:12,240
right and then you would just know that

978
00:46:07,170 --> 00:46:14,068
these would be indexed makes sense so I

979
00:46:12,239 --> 00:46:15,899
think that's kind of cool because then

980
00:46:14,068 --> 00:46:18,329
we don't have to worry about the hash

981
00:46:15,900 --> 00:46:20,730
anymore we'll do that

982
00:46:18,329 --> 00:46:24,150
sort of as part of the process to begin

983
00:46:20,730 --> 00:46:27,960
with and so then here where we are

984
00:46:24,150 --> 00:46:29,849
actually making these hash things happen

985
00:46:27,960 --> 00:46:31,949
we don't actually have to do that

986
00:46:29,849 --> 00:46:33,690
anymore at all right we'll do that out

987
00:46:31,949 --> 00:46:37,949
of line when we accumulate the

988
00:46:33,690 --> 00:46:39,179
statistics and we want to allocate them

989
00:46:37,949 --> 00:46:41,730
onto this you know do that under the

990
00:46:39,179 --> 00:46:44,250
site we can just straight up look at the

991
00:46:41,730 --> 00:46:47,130
call site directly in the call site

992
00:46:44,250 --> 00:46:52,230
stats so here we just say like okay the

993
00:46:47,130 --> 00:46:56,849
call site stats for this a lock call

994
00:46:52,230 --> 00:47:00,990
slice index we just directly use that

995
00:46:56,849 --> 00:47:04,980
array index to accumulate the statistic

996
00:47:00,989 --> 00:47:07,079
then when we come through to the place

997
00:47:04,980 --> 00:47:09,210
we're actually printing it out we no

998
00:47:07,079 --> 00:47:13,079
longer have to loop over the call site

999
00:47:09,210 --> 00:47:16,159
hash sighs instead we just loop over the

1000
00:47:13,079 --> 00:47:36,150
individual call sites specifically so

1001
00:47:16,159 --> 00:47:37,949
yeah basically this so that feels way

1002
00:47:36,150 --> 00:47:43,260
better to me anyway so that like

1003
00:47:37,949 --> 00:47:49,399
improves this as well so yeah I think

1004
00:47:43,260 --> 00:47:49,400
all of that's just much better right

1005
00:47:50,489 --> 00:47:56,368
so yeah the call site stats now probably

1006
00:47:54,329 --> 00:48:04,139
want to be a different name right

1007
00:47:56,369 --> 00:48:06,150
this probably wants to be that just so

1008
00:48:04,139 --> 00:48:09,329
we're clear that this is has nothing to

1009
00:48:06,150 --> 00:48:10,858
do with it oh and actually the well look

1010
00:48:09,329 --> 00:48:14,849
we don't even really need that anymore

1011
00:48:10,858 --> 00:48:17,039
now think about it because this doesn't

1012
00:48:14,849 --> 00:48:20,480
really need any of those things does it

1013
00:48:17,039 --> 00:48:20,480
oh well it still needs this

1014
00:48:29,510 --> 00:48:35,490
because it does need to check to see

1015
00:48:31,679 --> 00:48:39,230
whether that particular arena whether

1016
00:48:35,489 --> 00:48:39,229
it's in that particular arena

1017
00:48:40,280 --> 00:48:43,939
[Music]

1018
00:48:44,320 --> 00:48:55,070
so yeah I guess I still do knew that I

1019
00:48:49,329 --> 00:48:56,900
don't need that so yeah that works just

1020
00:48:55,070 --> 00:48:59,240
fine but the problem is now this thing

1021
00:48:56,900 --> 00:49:00,950
does need to know that particular piece

1022
00:48:59,239 --> 00:49:08,359
of information where we've got the grid

1023
00:49:00,949 --> 00:49:09,439
and the allocated part what I would

1024
00:49:08,360 --> 00:49:11,420
really like is to just be able to get

1025
00:49:09,440 --> 00:49:12,920
that from the index itself so let's make

1026
00:49:11,420 --> 00:49:15,260
that happen because I think that's just

1027
00:49:12,920 --> 00:49:22,639
better so let's just make this be a

1028
00:49:15,260 --> 00:49:24,650
debug statistic because that's what I

1029
00:49:22,639 --> 00:49:27,440
want so I want to be able to just say

1030
00:49:24,650 --> 00:49:28,849
look here's the debug statistics I'm

1031
00:49:27,440 --> 00:49:30,619
gonna push an array of those on there

1032
00:49:28,849 --> 00:49:33,759
when I come through here we're just

1033
00:49:30,619 --> 00:49:36,500
gonna go ahead and increment the stats

1034
00:49:33,760 --> 00:49:39,050
and then what I want to do here is I

1035
00:49:36,500 --> 00:49:41,750
want to print out the stats one by one

1036
00:49:39,050 --> 00:49:43,460
but I only want to print them out for

1037
00:49:41,750 --> 00:49:47,389
this arena and that's the tough part

1038
00:49:43,460 --> 00:49:55,550
right so we know that we can get the

1039
00:49:47,389 --> 00:49:57,369
statistics pretty easily like this but

1040
00:49:55,550 --> 00:49:59,570
the problem is how do we do this test

1041
00:49:57,369 --> 00:50:06,589
right we need to be able to look that up

1042
00:49:59,570 --> 00:50:09,190
separately and by the way this is all

1043
00:50:06,590 --> 00:50:09,190
this

1044
00:50:13,239 --> 00:50:17,899
so we need some way of getting the site

1045
00:50:15,889 --> 00:50:24,469
here so we can look at which arena the

1046
00:50:17,900 --> 00:50:27,170
call site belongs to in this case and we

1047
00:50:24,469 --> 00:50:37,509
need some so we need like debug arena

1048
00:50:27,170 --> 00:50:37,510
call site you know I'm saying so there

1049
00:50:41,199 --> 00:50:57,230
there is one other thing there I suppose

1050
00:50:49,000 --> 00:51:02,030
we're gonna not care about that so we

1051
00:50:57,230 --> 00:51:07,389
need some way of getting like get call

1052
00:51:02,030 --> 00:51:10,040
site from index right we need to do this

1053
00:51:07,389 --> 00:51:13,250
and I think what I'm gonna do is just

1054
00:51:10,039 --> 00:51:18,429
cheese out on that and make that be like

1055
00:51:13,250 --> 00:51:18,429
a cheese call where it just loops over

1056
00:51:20,500 --> 00:51:28,119
it just loops over the hash table or

1057
00:51:23,869 --> 00:51:28,119
something and grabs it I don't know

1058
00:51:29,539 --> 00:51:32,999
I'm trying to think if there's something

1059
00:51:31,708 --> 00:51:34,288
else I want to do here and I'm not sure

1060
00:51:32,998 --> 00:51:43,828
I guess we could just use this as an

1061
00:51:34,289 --> 00:51:45,900
array since we know it's fairly small so

1062
00:51:43,829 --> 00:51:48,059
in here we're gonna say if the debug

1063
00:51:45,900 --> 00:51:53,719
state you know if the index is less than

1064
00:51:48,059 --> 00:51:53,719
the debug say State Arena call site cap

1065
00:51:55,278 --> 00:52:09,690
then we would say debug state like

1066
00:51:57,978 --> 00:52:18,179
marina call sites so we can like access

1067
00:52:09,690 --> 00:52:21,858
them off of that index I guess again I'm

1068
00:52:18,179 --> 00:52:21,858
really not sure how I feel about that

1069
00:52:23,449 --> 00:52:33,900
maybe kind of unnecessary but I feel

1070
00:52:29,969 --> 00:52:37,079
like we kind of need it so I feel like

1071
00:52:33,900 --> 00:52:38,039
that's pretty good to go and I don't

1072
00:52:37,079 --> 00:52:39,329
know that there's anything else

1073
00:52:38,039 --> 00:52:40,979
particularly weird that has to happen

1074
00:52:39,329 --> 00:52:43,589
there so really I just need to actually

1075
00:52:40,978 --> 00:52:45,808
build that hash table when we're when

1076
00:52:43,588 --> 00:52:47,639
were actually collating the arena

1077
00:52:45,809 --> 00:52:51,930
information in the first place I need to

1078
00:52:47,639 --> 00:52:54,239
build that and then I would have those

1079
00:52:51,929 --> 00:52:55,889
indices assigned properly but I think

1080
00:52:54,239 --> 00:53:00,119
that's the only other thing that's

1081
00:52:55,889 --> 00:53:06,629
missing now from allowing this to work

1082
00:53:00,119 --> 00:53:08,729
right and yeah and I think that's all

1083
00:53:06,630 --> 00:53:10,140
good so if I come up here and just grab

1084
00:53:08,728 --> 00:53:12,239
the part of the code that we were using

1085
00:53:10,139 --> 00:53:17,069
before so you know inside here when

1086
00:53:12,239 --> 00:53:26,539
we're doing our collation we

1087
00:53:17,070 --> 00:53:26,539
these calls here which is where is it

1088
00:53:30,110 --> 00:53:39,470
this so in here what I want to do is

1089
00:53:34,769 --> 00:53:44,070
have a way of you know processing this

1090
00:53:39,469 --> 00:53:48,209
this bit of information here so I need

1091
00:53:44,070 --> 00:53:52,769
to handle these call sites right so

1092
00:53:48,210 --> 00:54:03,720
these probably have this and they

1093
00:53:52,769 --> 00:54:08,309
probably have this like so and for each

1094
00:54:03,719 --> 00:54:10,379
one of these allocations since I'm only

1095
00:54:08,309 --> 00:54:14,579
processing allocations that actually

1096
00:54:10,380 --> 00:54:17,700
happen here and there's not that many

1097
00:54:14,579 --> 00:54:22,079
call sites I almost say we just linearly

1098
00:54:17,699 --> 00:54:26,819
search the call sites instead of having

1099
00:54:22,079 --> 00:54:31,349
a hash table it it just feels I don't

1100
00:54:26,820 --> 00:54:34,500
know like the amount of time we would

1101
00:54:31,349 --> 00:54:35,909
waste maintaining the hash table I think

1102
00:54:34,500 --> 00:54:38,730
we would it would just be better to

1103
00:54:35,909 --> 00:54:40,710
linearly scan you know I'm saying

1104
00:54:38,730 --> 00:54:45,710
because we just don't have that many

1105
00:54:40,710 --> 00:54:48,750
allocation points that's my guess anyway

1106
00:54:45,710 --> 00:54:55,429
so in here what I would do is say debug

1107
00:54:48,750 --> 00:54:58,679
arena call site get call site wrong and

1108
00:54:55,429 --> 00:55:06,690
what you would do is you would pass the

1109
00:54:58,679 --> 00:55:09,659
glid and the debug arena and the debug

1110
00:55:06,690 --> 00:55:13,889
state here and then we would just look

1111
00:55:09,659 --> 00:55:19,559
to see is it in there so I would just

1112
00:55:13,889 --> 00:55:24,299
linearly scan first the site index I'd

1113
00:55:19,559 --> 00:55:28,219
say you know debug State Arena call site

1114
00:55:24,300 --> 00:55:28,220
count site index

1115
00:55:29,829 --> 00:55:37,039
have the result pointer here if we don't

1116
00:55:33,619 --> 00:55:40,640
find one we'll make a new one and off we

1117
00:55:37,039 --> 00:55:42,470
go right so we know that this is the

1118
00:55:40,639 --> 00:55:43,788
part where we make a new one we know

1119
00:55:42,469 --> 00:55:49,129
what that looks like it looks something

1120
00:55:43,789 --> 00:55:52,609
like this right and we know that we have

1121
00:55:49,130 --> 00:55:54,588
to like make space for it we don't need

1122
00:55:52,608 --> 00:55:57,018
the hashing anymore because I'm just not

1123
00:55:54,588 --> 00:55:59,719
going to do that and so really we just

1124
00:55:57,018 --> 00:56:01,998
need this part so as we loop over the

1125
00:55:59,719 --> 00:56:04,399
sites here what we would want to do is

1126
00:56:01,998 --> 00:56:08,209
here's the debugger and a call site that

1127
00:56:04,400 --> 00:56:13,099
we're testing we would do the arena call

1128
00:56:08,210 --> 00:56:15,440
sites plus the site index that's the one

1129
00:56:13,099 --> 00:56:19,460
we're testing if it matches what we're

1130
00:56:15,440 --> 00:56:23,480
looking for then we found it and we're

1131
00:56:19,460 --> 00:56:26,269
done otherwise we would have to create

1132
00:56:23,480 --> 00:56:28,789
one if we air it out of there and so the

1133
00:56:26,268 --> 00:56:30,919
only thing we've got left to do is

1134
00:56:28,789 --> 00:56:33,680
figure out how we're gonna store these

1135
00:56:30,920 --> 00:56:37,400
in a linear array I would say let's just

1136
00:56:33,679 --> 00:56:39,318
make space for one because we know we

1137
00:56:37,400 --> 00:56:43,309
have fairly minimal number of allocation

1138
00:56:39,318 --> 00:56:51,469
points I would say let's just keep it

1139
00:56:43,309 --> 00:56:53,480
simple right so let's see yeah not sure

1140
00:56:51,469 --> 00:56:55,038
how many we want to do but again since

1141
00:56:53,480 --> 00:56:56,028
I'm doing a linear scan I think we want

1142
00:56:55,039 --> 00:56:58,369
to put an assertion in here and

1143
00:56:56,028 --> 00:57:00,710
basically say look if you blow out the

1144
00:56:58,369 --> 00:57:01,849
number that we've got I need an

1145
00:57:00,710 --> 00:57:04,179
assertion because I probably have to

1146
00:57:01,849 --> 00:57:07,778
then I probably do have to change it to

1147
00:57:04,179 --> 00:57:12,440
the hash table at that point right so

1148
00:57:07,778 --> 00:57:17,710
debug actually arena call site counts

1149
00:57:12,440 --> 00:57:20,960
and then we need debug arena call site

1150
00:57:17,710 --> 00:57:23,420
call sites should I can just do like

1151
00:57:20,960 --> 00:57:26,778
this and let's just say we don't want

1152
00:57:23,420 --> 00:57:30,170
more than 64 of those so if not result

1153
00:57:26,778 --> 00:57:35,858
we need to assert the debug state arena

1154
00:57:30,170 --> 00:57:35,858
call site count and you know

1155
00:57:36,530 --> 00:57:41,240
I guess I don't know for sure that we're

1156
00:57:39,469 --> 00:57:43,129
not going to blow that out because we're

1157
00:57:41,239 --> 00:57:45,979
not seeing a bunch of those allocation

1158
00:57:43,130 --> 00:57:52,579
points so again it may be that we do

1159
00:57:45,980 --> 00:57:54,320
actually have to add you know it may be

1160
00:57:52,579 --> 00:57:54,739
that we do actually have to add that in

1161
00:57:54,320 --> 00:57:58,700
there

1162
00:57:54,739 --> 00:57:59,209
I don't know and and do a real hash

1163
00:57:58,699 --> 00:58:02,049
table

1164
00:57:59,210 --> 00:58:06,380
we'll just see we'll play it play it

1165
00:58:02,050 --> 00:58:09,490
bye-bye I played by profile and see what

1166
00:58:06,380 --> 00:58:14,150
actually happens all right so let's see

1167
00:58:09,489 --> 00:58:21,979
here's the call sites we need the arena

1168
00:58:14,150 --> 00:58:23,570
the grid and the index we don't need

1169
00:58:21,980 --> 00:58:25,190
next time hash at the moment and we

1170
00:58:23,570 --> 00:58:30,100
don't need to push so I'm just gonna say

1171
00:58:25,190 --> 00:58:30,099
let's let's assert the fist thing fits

1172
00:58:31,510 --> 00:58:36,710
and once I start that I'm going to take

1173
00:58:34,670 --> 00:58:39,680
the index and say that the index for

1174
00:58:36,710 --> 00:58:43,429
this particular one is is you know

1175
00:58:39,679 --> 00:58:47,739
whichever one we would pop you know push

1176
00:58:43,429 --> 00:58:56,239
on next and then the results pointer is

1177
00:58:47,739 --> 00:59:00,289
just that one we would then set all its

1178
00:58:56,239 --> 00:59:02,019
parameters up which is just these and we

1179
00:59:00,289 --> 00:59:04,550
don't have the hash at the moment and

1180
00:59:02,019 --> 00:59:08,570
then we would we'd fall out of there

1181
00:59:04,550 --> 00:59:10,160
right so now I gotta go fix all of my

1182
00:59:08,570 --> 00:59:18,080
compile errors and then we should be

1183
00:59:10,159 --> 00:59:21,079
good to go I want to stop this so let's

1184
00:59:18,079 --> 00:59:24,230
take a look the call site pointer for

1185
00:59:21,079 --> 00:59:31,150
this rina allocation probably should

1186
00:59:24,230 --> 00:59:31,150
just be a call site index actually

1187
00:59:32,659 --> 00:59:36,500
so we can just do that

1188
00:59:46,329 --> 00:59:59,200
all right so here where we've got our a

1189
00:59:54,980 --> 00:59:59,199
lock right the grid for the allocation

1190
01:00:04,630 --> 01:00:08,599
yeah so this stuff doesn't actually

1191
01:00:06,980 --> 01:00:13,068
exist in here we have to get the call

1192
01:00:08,599 --> 01:00:17,530
site in question which is fine so all we

1193
01:00:13,068 --> 01:00:24,409
do there is we say like debug state

1194
01:00:17,530 --> 01:00:29,480
arena call site site equals you know get

1195
01:00:24,409 --> 01:00:33,259
call site debug State just so we can get

1196
01:00:29,480 --> 01:00:37,639
the call site for the a lock and then I

1197
01:00:33,260 --> 01:00:38,359
would just say look there's the kwid and

1198
01:00:37,639 --> 01:00:41,779
off we go

1199
01:00:38,358 --> 01:00:50,889
so that just wants to be you know a

1200
01:00:41,780 --> 01:00:58,240
function that's really simple arena

1201
01:00:50,889 --> 01:00:58,239
location and all that's gonna do is say

1202
01:01:02,139 --> 01:01:07,838
do the same thing but passing index

1203
01:01:11,298 --> 01:01:17,130
so assuming that you're doing something

1204
01:01:14,670 --> 01:01:19,079
you actually can legally do meaning

1205
01:01:17,130 --> 01:01:20,608
you're passing one that actually exists

1206
01:01:19,079 --> 01:01:23,760
just so we know if we screwed anything

1207
01:01:20,608 --> 01:01:26,759
up you get it back and then this is a

1208
01:01:23,760 --> 01:01:28,980
convenience call that just says alright

1209
01:01:26,760 --> 01:01:40,799
if you pass me an allocation I'll go

1210
01:01:28,980 --> 01:01:41,460
ahead and do you wrap that for you and

1211
01:01:40,798 --> 01:01:43,829
off we go

1212
01:01:41,460 --> 01:01:47,130
so those should make it easy for us to

1213
01:01:43,829 --> 01:01:51,329
work with these and then modify how

1214
01:01:47,130 --> 01:01:53,099
we're storing them if we want to call

1215
01:01:51,329 --> 01:01:59,670
sites I think is what that's actually

1216
01:01:53,099 --> 01:02:03,690
called ok so let's see what we've got

1217
01:01:59,670 --> 01:02:05,099
here so call site now right is not

1218
01:02:03,690 --> 01:02:05,970
because it's the index that we actually

1219
01:02:05,099 --> 01:02:09,390
care about

1220
01:02:05,969 --> 01:02:11,489
so in here where we do debug Arina

1221
01:02:09,389 --> 01:02:14,009
allocate we don't want to set a grid

1222
01:02:11,489 --> 01:02:22,019
anymore what we actually want to do is

1223
01:02:14,010 --> 01:02:28,049
say that the call site index equals get

1224
01:02:22,019 --> 01:02:32,159
call site from and then we would pass

1225
01:02:28,048 --> 01:02:36,980
that grid in here so we know what the

1226
01:02:32,159 --> 01:02:39,420
arena is we know what the grid is and

1227
01:02:36,980 --> 01:02:41,639
that should give us back the information

1228
01:02:39,420 --> 01:02:45,470
that we wanted we can make this return

1229
01:02:41,639 --> 01:02:52,129
in u-32 as well so here we could just

1230
01:02:45,469 --> 01:02:52,129
return the result index every time

1231
01:02:56,429 --> 01:03:01,029
and then finally here where it's looking

1232
01:02:58,960 --> 01:03:03,309
at that call site what we actually

1233
01:03:01,030 --> 01:03:04,870
wanted was the index anyway so we can

1234
01:03:03,309 --> 01:03:08,799
just use that directly now without

1235
01:03:04,869 --> 01:03:12,369
actually dereferencing anybody and I

1236
01:03:08,800 --> 01:03:15,000
think we're now good to go right

1237
01:03:12,369 --> 01:03:16,869
barring bugs that I almost certainly

1238
01:03:15,000 --> 01:03:20,340
inadvertently put in there

1239
01:03:16,869 --> 01:03:23,079
we've now reorganized it so that it

1240
01:03:20,340 --> 01:03:25,470
works by tracking call sites through the

1241
01:03:23,079 --> 01:03:29,139
entire pipeline

1242
01:03:25,469 --> 01:03:30,669
I got a switch to a debug build to debug

1243
01:03:29,139 --> 01:03:32,739
this because I don't really want to deal

1244
01:03:30,670 --> 01:03:35,260
with the bad debug information that the

1245
01:03:32,739 --> 01:03:36,549
optimising compiler spits out so let's

1246
01:03:35,260 --> 01:03:38,560
go ahead and do that

1247
01:03:36,550 --> 01:03:43,000
and now let's figure out what we screwed

1248
01:03:38,559 --> 01:03:45,549
up right okay so we've got too many call

1249
01:03:43,000 --> 01:03:47,679
sites first of all of course I don't

1250
01:03:45,550 --> 01:03:52,530
actually know that could be because this

1251
01:03:47,679 --> 01:03:55,829
is wrong as well so it's hard to say

1252
01:03:52,530 --> 01:04:05,170
right off the bat but let's take a look

1253
01:03:55,829 --> 01:04:07,500
so here's that grid here's the debug

1254
01:04:05,170 --> 01:04:07,500
arena

1255
01:04:15,440 --> 01:04:23,519
so there is something a little bit there

1256
01:04:21,929 --> 01:04:27,449
is something a little bit bad about this

1257
01:04:23,519 --> 01:04:31,769
that I kind of forgot about and that is

1258
01:04:27,449 --> 01:04:34,649
that we probably do need to make the

1259
01:04:31,769 --> 01:04:37,019
grids do a string compare in this

1260
01:04:34,650 --> 01:04:43,530
particular case and the reason for that

1261
01:04:37,019 --> 01:04:47,429
is because the the grid pointers won't

1262
01:04:43,530 --> 01:04:50,130
be stable across reloads this wasn't a

1263
01:04:47,429 --> 01:04:59,549
problem previously because they were not

1264
01:04:50,130 --> 01:05:06,900
actually yeah they they were not

1265
01:04:59,550 --> 01:05:09,090
actually being stored permanently they

1266
01:05:06,900 --> 01:05:15,960
were being computed every time we wanted

1267
01:05:09,090 --> 01:05:24,260
to print them out so that's less good

1268
01:05:15,960 --> 01:05:24,260
right all right anyway

1269
01:05:32,239 --> 01:05:43,278
so really this needs to be that which is

1270
01:05:39,750 --> 01:05:46,500
not what I would have wanted but oh well

1271
01:05:43,278 --> 01:05:48,900
so in here I'm gonna just up this limit

1272
01:05:46,500 --> 01:05:52,409
till it works just to see where we're at

1273
01:05:48,900 --> 01:05:54,180
and then we will maybe put in that hash

1274
01:05:52,409 --> 01:05:55,618
table back in because it looks like it

1275
01:05:54,179 --> 01:05:56,848
might be something that we actually do

1276
01:05:55,619 --> 01:05:59,358
want if there's really that many of

1277
01:05:56,849 --> 01:06:03,119
these things and I guess there are

1278
01:05:59,358 --> 01:06:05,098
because now it works okay so there

1279
01:06:03,119 --> 01:06:08,190
that's how many we we have in there I

1280
01:06:05,099 --> 01:06:11,039
suppose so if I go ahead and change this

1281
01:06:08,190 --> 01:06:13,230
202 here let's go ahead and take a look

1282
01:06:11,039 --> 01:06:14,760
at those allocations again and see where

1283
01:06:13,230 --> 01:06:16,380
we're at in terms of actually tracking

1284
01:06:14,760 --> 01:06:20,549
them and whether I screwed anything up

1285
01:06:16,380 --> 01:06:21,990
there so if we look at the memory and we

1286
01:06:20,548 --> 01:06:23,759
take a look at those call sites like

1287
01:06:21,989 --> 01:06:28,500
here's us tracking those call sites

1288
01:06:23,760 --> 01:06:30,420
properly so actually I guess I am glad

1289
01:06:28,500 --> 01:06:32,010
we did this though

1290
01:06:30,420 --> 01:06:36,380
because looking at that what you can see

1291
01:06:32,010 --> 01:06:40,230
is that now that we track these always I

1292
01:06:36,380 --> 01:06:42,329
can start to keep peak allocation

1293
01:06:40,230 --> 01:06:44,639
numbers for these things because you can

1294
01:06:42,329 --> 01:06:47,490
see all of these places that allocated

1295
01:06:44,639 --> 01:06:49,858
stuff and then and then D allocated it

1296
01:06:47,489 --> 01:06:54,298
so that current outlays is set to zero

1297
01:06:49,858 --> 01:06:57,509
right so I am kind of glad we did that

1298
01:06:54,298 --> 01:07:00,838
it wasn't unnecessary I guess so now if

1299
01:06:57,509 --> 01:07:02,599
we look through here hopefully I can now

1300
01:07:00,838 --> 01:07:07,230
figure out a way to make this thing

1301
01:07:02,599 --> 01:07:10,500
produce stable colors right so looking

1302
01:07:07,230 --> 01:07:12,329
at this I'm doing something stupid right

1303
01:07:10,500 --> 01:07:13,588
now I'm just not sure what because if

1304
01:07:12,329 --> 01:07:15,660
you look at all of these you can see

1305
01:07:13,588 --> 01:07:20,509
that the call site index is actually the

1306
01:07:15,659 --> 01:07:24,889
same as far as I can tell but I'm

1307
01:07:20,509 --> 01:07:28,829
getting different indices and that's not

1308
01:07:24,889 --> 01:07:32,278
supposed to happen so either I messed up

1309
01:07:28,829 --> 01:07:36,619
the call site indexing somehow I guess

1310
01:07:32,278 --> 01:07:36,619
but I don't know

1311
01:07:37,769 --> 01:07:46,588
or I'm like picking out the Alek index

1312
01:07:41,338 --> 01:07:51,019
wrong oh we never we never used it so

1313
01:07:46,588 --> 01:07:53,429
never mind there we go

1314
01:07:51,019 --> 01:07:57,139
so now we're using the call site index

1315
01:07:53,429 --> 01:08:00,329
specifically across all call sites to

1316
01:07:57,139 --> 01:08:01,559
try to color code this and again it's

1317
01:08:00,329 --> 01:08:05,338
not perfect because we don't probably

1318
01:08:01,559 --> 01:08:09,000
have enough colors to actually fill

1319
01:08:05,338 --> 01:08:10,559
everything in but now we can see it's

1320
01:08:09,000 --> 01:08:12,449
still it's still quite a bit better

1321
01:08:10,559 --> 01:08:15,380
right now you can see that all of these

1322
01:08:12,449 --> 01:08:18,869
are taken up by the same piece of code

1323
01:08:15,380 --> 01:08:21,329
and that's just a lot easier to

1324
01:08:18,869 --> 01:08:24,588
understand right because now you know

1325
01:08:21,329 --> 01:08:29,399
that all of these are the handmade world

1326
01:08:24,588 --> 01:08:30,960
you know allocator they're okay so I

1327
01:08:29,399 --> 01:08:32,369
think the last thing I want to do I

1328
01:08:30,960 --> 01:08:44,149
don't know how much time I've got I've

1329
01:08:32,369 --> 01:08:44,149
got probably what 45 minutes let's say

1330
01:08:44,238 --> 01:08:53,879
let's let's say 45 minutes so I would

1331
01:08:51,238 --> 01:08:55,259
like to add in maybe some peak timing

1332
01:08:53,880 --> 01:08:57,710
and also we probably need to make this

1333
01:08:55,259 --> 01:09:02,100
thing scroll right because I can't I

1334
01:08:57,710 --> 01:09:03,539
can't like see the rest of it so we

1335
01:09:02,100 --> 01:09:04,440
probably want and we also probably get

1336
01:09:03,539 --> 01:09:06,019
rid of this because we're not really

1337
01:09:04,439 --> 01:09:10,889
going to use it right

1338
01:09:06,020 --> 01:09:17,609
so yeah that that seems like the right

1339
01:09:10,890 --> 01:09:20,460
thing to do I don't know yeah that seems

1340
01:09:17,609 --> 01:09:21,989
like the right thing to do the other

1341
01:09:20,460 --> 01:09:23,899
thing we might want to do is actually

1342
01:09:21,988 --> 01:09:26,998
compute all this information

1343
01:09:23,899 --> 01:09:26,999
[Music]

1344
01:09:28,899 --> 01:09:33,599
we might want to actually compute all

1345
01:09:31,000 --> 01:09:37,359
this information in a shared format

1346
01:09:33,600 --> 01:09:39,010
between the two routines because look

1347
01:09:37,359 --> 01:09:41,259
when you hover over this it might be

1348
01:09:39,010 --> 01:09:45,850
nice to get that percentage like hey

1349
01:09:41,260 --> 01:09:48,250
this is the like usage of this thing and

1350
01:09:45,850 --> 01:09:56,550
by the way here's the percentage that

1351
01:09:48,250 --> 01:10:01,859
that you know equates to right so that

1352
01:09:56,550 --> 01:10:01,860
feels like probably a good thing

1353
01:10:21,100 --> 01:10:25,780
yeah all right so I pretty much finished

1354
01:10:24,579 --> 01:10:28,090
what I wanted to do today so I think

1355
01:10:25,779 --> 01:10:30,909
we're just down now - you know I guess

1356
01:10:28,090 --> 01:10:31,840
just gravy and then because I don't

1357
01:10:30,909 --> 01:10:35,319
really want to start into something

1358
01:10:31,840 --> 01:10:37,119
totally new Hey look at that now you can

1359
01:10:35,319 --> 01:10:38,949
see the debug usage pretty cleanly -

1360
01:10:37,119 --> 01:10:40,329
right we don't track what's actually

1361
01:10:38,949 --> 01:10:43,059
happening in there because we can't if

1362
01:10:40,329 --> 01:10:44,769
we did it would overflow itself but at

1363
01:10:43,060 --> 01:10:49,470
least we can see like cleanly who's

1364
01:10:44,770 --> 01:10:52,330
using what right and that's pretty nice

1365
01:10:49,470 --> 01:10:55,840
so yeah let's just go ahead and go in

1366
01:10:52,329 --> 01:10:59,350
there and clean this stuff up I also am

1367
01:10:55,840 --> 01:11:02,319
wondering like can we just not like

1368
01:10:59,350 --> 01:11:04,510
can't we just there's got to be a way to

1369
01:11:02,319 --> 01:11:06,460
change how we're doing the you know I

1370
01:11:04,510 --> 01:11:10,539
don't want to have to click on the

1371
01:11:06,460 --> 01:11:12,579
profile to like open it up so surely

1372
01:11:10,539 --> 01:11:17,279
there's a way to make those things be

1373
01:11:12,579 --> 01:11:27,430
expanded by default like you know like I

1374
01:11:17,279 --> 01:11:29,229
don't know it's been a long time and

1375
01:11:27,430 --> 01:11:33,010
this part of the system is the crappiest

1376
01:11:29,229 --> 01:11:35,319
so you know maybe not but I'm just

1377
01:11:33,010 --> 01:11:38,619
curious to know if there's a way to

1378
01:11:35,319 --> 01:11:42,519
force that to be expanded by default

1379
01:11:38,619 --> 01:11:43,960
instead of you know instead of not so if

1380
01:11:42,520 --> 01:11:45,690
I take a look at the debug interface

1381
01:11:43,960 --> 01:11:51,869
stuff here

1382
01:11:45,689 --> 01:11:51,869
in fact I I think there was sort of a

1383
01:11:57,429 --> 01:12:08,599
expanded always kind of see these in

1384
01:12:04,458 --> 01:12:10,578
here so you can see like when you do

1385
01:12:08,599 --> 01:12:15,539
toggle expansion you've got this like

1386
01:12:10,578 --> 01:12:17,558
view collapsible expanded always right

1387
01:12:15,539 --> 01:12:21,590
[Music]

1388
01:12:17,559 --> 01:12:24,860
and that's from an interaction so if I

1389
01:12:21,590 --> 01:12:27,650
just take a look at the handmade debug

1390
01:12:24,859 --> 01:12:31,488
stuff here where we actually create

1391
01:12:27,649 --> 01:12:33,738
these when we get back one of these

1392
01:12:31,488 --> 01:12:44,899
groups like we're doing create variable

1393
01:12:33,738 --> 01:12:54,248
wink and so that has a debug element in

1394
01:12:44,899 --> 01:12:54,248
it which which I assume

1395
01:12:57,109 --> 01:13:01,130
I was gonna say there should be some way

1396
01:12:58,850 --> 01:13:05,120
to look at like what the ID of that is

1397
01:13:01,130 --> 01:13:12,699
right or maybe not I get a crate debug

1398
01:13:05,119 --> 01:13:12,699
view for San that actually works

1399
01:13:15,380 --> 01:13:21,929
so I guess the way this works is it just

1400
01:13:17,880 --> 01:13:23,969
says hey we hash something we hash the

1401
01:13:21,929 --> 01:13:26,190
dev ID of whatever the thing is that

1402
01:13:23,969 --> 01:13:28,350
you're clicking on right and so the

1403
01:13:26,189 --> 01:13:30,960
question is how do you get a dev ID from

1404
01:13:28,350 --> 01:13:39,600
from one of these things right like

1405
01:13:30,960 --> 01:13:42,539
there isn't one in here and you know you

1406
01:13:39,600 --> 01:13:51,659
there there does need to be one of those

1407
01:13:42,539 --> 01:14:01,710
and so looking at when I actually create

1408
01:13:51,658 --> 01:14:08,519
these I'm guessing that like these

1409
01:14:01,710 --> 01:14:11,219
groups see these groups have to get

1410
01:14:08,520 --> 01:14:17,360
placed somewhere too right

1411
01:14:11,219 --> 01:14:17,359
like they have to be put at the top

1412
01:14:24,390 --> 01:14:39,130
and I'm just not sure where that's

1413
01:14:26,439 --> 01:14:46,210
getting done so this draw tree here

1414
01:14:39,130 --> 01:14:48,970
I guess that is really the thing that we

1415
01:14:46,210 --> 01:14:51,569
just want to always be expanded

1416
01:14:48,970 --> 01:14:51,570
really

1417
01:14:57,109 --> 01:15:11,019
and so if we have that surely there's

1418
01:15:05,210 --> 01:15:11,020
some way we can force that to expand

1419
01:15:12,488 --> 01:15:28,789
debug ID from link so I think that's all

1420
01:15:16,399 --> 01:15:31,189
we really needed probably so as a as it

1421
01:15:28,789 --> 01:15:32,689
is like I said this system just did not

1422
01:15:31,189 --> 01:15:33,919
work out very well I feel like we can

1423
01:15:32,689 --> 01:15:36,379
clean it up tremendously now if we

1424
01:15:33,920 --> 01:15:38,539
really wanted to since we now know what

1425
01:15:36,380 --> 01:15:43,670
we actually want it can just be

1426
01:15:38,539 --> 01:15:52,269
simplified but I each one of these

1427
01:15:43,670 --> 01:15:55,880
things can be asked for as individual

1428
01:15:52,270 --> 01:15:59,690
trees right since we know what the tree

1429
01:15:55,880 --> 01:16:02,659
is here that we're actually using which

1430
01:15:59,689 --> 01:16:04,009
is to say although even that that's a

1431
01:16:02,658 --> 01:16:07,129
little bit weird now I think about it

1432
01:16:04,010 --> 01:16:17,000
because that tree isn't really there

1433
01:16:07,130 --> 01:16:19,100
either right such a stupid system when

1434
01:16:17,000 --> 01:16:21,439
we're drawing that tree it's like an

1435
01:16:19,100 --> 01:16:29,179
ignored tree I like a nonsense tree

1436
01:16:21,439 --> 01:16:33,428
right so even that I don't quite

1437
01:16:29,179 --> 01:16:33,429
understand how that should be working

1438
01:16:35,569 --> 01:16:47,049
yeah that's really weird when does this

1439
01:16:44,659 --> 01:16:47,050
first

1440
01:16:59,510 --> 01:17:01,570
you

1441
01:17:06,519 --> 01:17:11,679
yeah so I think that's just kind of

1442
01:17:08,948 --> 01:17:18,598
garbage it's using like this debug tree

1443
01:17:11,679 --> 01:17:23,260
which is a ignored like non thing and

1444
01:17:18,599 --> 01:17:26,019
it's so it's remembering but only based

1445
01:17:23,260 --> 01:17:28,869
on that which is just kind of luck that

1446
01:17:26,019 --> 01:17:30,849
that works at all I think so like you

1447
01:17:28,868 --> 01:17:33,189
know when this thing I assume wraps the

1448
01:17:30,849 --> 01:17:34,569
tree handle in there yeah it does so

1449
01:17:33,189 --> 01:17:36,518
this is just ridiculous

1450
01:17:34,569 --> 01:17:40,479
I mean really if you wanted this to work

1451
01:17:36,519 --> 01:17:44,889
properly which I suppose we do for the

1452
01:17:40,479 --> 01:17:48,459
time being anyway in here like you would

1453
01:17:44,889 --> 01:17:52,630
want to put like a you know a HUD tree

1454
01:17:48,460 --> 01:17:54,399
or something like this right and then

1455
01:17:52,630 --> 01:17:55,989
when you drew this thing you because you

1456
01:17:54,399 --> 01:17:58,328
need a stable pointer there so this

1457
01:17:55,988 --> 01:18:00,968
thing should look like that you know

1458
01:17:58,328 --> 01:18:03,969
what I mean and that way if you wanted

1459
01:18:00,969 --> 01:18:07,989
to you could do the you could you could

1460
01:18:03,969 --> 01:18:10,059
do like a toggle on that now where when

1461
01:18:07,988 --> 01:18:22,138
you do the debug in it you could do like

1462
01:18:10,059 --> 01:18:31,029
a expand and you just say this one here

1463
01:18:22,139 --> 01:18:33,609
and for that tree you want it to be set

1464
01:18:31,029 --> 01:18:35,639
into two to be expanded right when it's

1465
01:18:33,609 --> 01:18:41,229
when it's being used as the HUD tree

1466
01:18:35,639 --> 01:18:45,010
yeah I'm saying so really yeah really

1467
01:18:41,229 --> 01:18:48,819
stupid but that's the idea and so given

1468
01:18:45,010 --> 01:18:54,269
those we just need some way of setting

1469
01:18:48,819 --> 01:18:54,268
that expand always to be

1470
01:19:00,889 --> 01:19:13,170
this part here right that so I think

1471
01:19:10,859 --> 01:19:24,509
what we want is something that looks

1472
01:19:13,170 --> 01:19:35,309
like this and we'd passed the debug

1473
01:19:24,510 --> 01:19:37,949
state and the Deaf ID it would do this

1474
01:19:35,309 --> 01:19:46,559
and set it to whatever we asked it to do

1475
01:19:37,948 --> 01:19:48,769
I guess doesn't need to return anything

1476
01:19:46,559 --> 01:19:48,770
at all

1477
01:19:53,809 --> 01:20:04,710
so we just need to do the one call that

1478
01:19:58,289 --> 01:20:09,539
says like get an actual you know get was

1479
01:20:04,710 --> 01:20:12,529
it called something for link get ID for

1480
01:20:09,539 --> 01:20:18,149
link at dev ID for link I don't know

1481
01:20:12,529 --> 01:20:20,868
something like that that so you just

1482
01:20:18,149 --> 01:20:20,868
need to call this thing

1483
01:20:32,920 --> 01:20:42,440
and you have to pass that in fact it's

1484
01:20:35,869 --> 01:20:45,409
this so I I guess that's it again really

1485
01:20:42,439 --> 01:20:53,809
crappy but that's that's what we're

1486
01:20:45,409 --> 01:20:55,760
dealing with so now that we've got those

1487
01:20:53,810 --> 01:21:01,070
I think that would be expanded by

1488
01:20:55,760 --> 01:21:03,560
default right and oops memory group and

1489
01:21:01,069 --> 01:21:05,509
that way we don't have to manually drop

1490
01:21:03,560 --> 01:21:09,289
them down for no reason because we don't

1491
01:21:05,510 --> 01:21:11,560
ever really want to you know if I pushed

1492
01:21:09,289 --> 01:21:15,380
that F key I wanted to see it right

1493
01:21:11,560 --> 01:21:21,830
although not I say that they don't do

1494
01:21:15,380 --> 01:21:26,590
that so why not that should set the

1495
01:21:21,829 --> 01:21:26,590
expansion state right on the HUD tree

1496
01:21:27,039 --> 01:21:35,840
get a crate debug view for debug state

1497
01:21:29,810 --> 01:21:38,090
oh well I also don't know if this needs

1498
01:21:35,840 --> 01:21:40,039
to be done a little bit later I suppose

1499
01:21:38,090 --> 01:21:41,510
I don't think that should really be the

1500
01:21:40,039 --> 01:21:43,369
pro I don't think that should be the

1501
01:21:41,510 --> 01:21:44,930
problem though so I'm gonna have to go

1502
01:21:43,369 --> 01:21:50,479
look at why it's not looking them up in

1503
01:21:44,930 --> 01:21:55,640
the same place once again yeah

1504
01:21:50,479 --> 01:22:01,699
because okay so when we set those it's

1505
01:21:55,640 --> 01:22:07,250
on the HUD tree and it's profile group

1506
01:22:01,699 --> 01:22:10,250
in memory group right which are the

1507
01:22:07,250 --> 01:22:14,050
things were actually displaying we're

1508
01:22:10,250 --> 01:22:14,050
setting those to be expanded

1509
01:22:21,439 --> 01:22:24,668
that looks correct

1510
01:22:27,679 --> 01:22:35,390
so I think that should be right um but

1511
01:22:31,460 --> 01:22:45,829
of course it's not you let's just see

1512
01:22:35,390 --> 01:22:50,300
what happens here so we actually need to

1513
01:22:45,829 --> 01:22:53,658
start at the debug end you can see here

1514
01:22:50,300 --> 01:23:00,829
we do a draught recall and we passed the

1515
01:22:53,658 --> 01:23:03,829
HUD tree with that with what you know

1516
01:23:00,829 --> 01:23:07,219
with one of those so since we're passing

1517
01:23:03,829 --> 01:23:12,439
the HUD tree and that link pointer

1518
01:23:07,219 --> 01:23:15,260
what's the problem we come in here with

1519
01:23:12,439 --> 01:23:18,158
the same variable group right and we

1520
01:23:15,260 --> 01:23:22,429
call draw tree link on it

1521
01:23:18,158 --> 01:23:24,769
so here's draw tree link we have that

1522
01:23:22,429 --> 01:23:26,359
again this right here is should be one

1523
01:23:24,770 --> 01:23:29,390
of these like it should be like memory

1524
01:23:26,359 --> 01:23:32,988
group right so then we say like well can

1525
01:23:29,390 --> 01:23:34,909
it have children if it can then we're

1526
01:23:32,988 --> 01:23:37,009
gonna do some stuff here if it can't

1527
01:23:34,908 --> 01:23:37,849
then we're just gonna draw it so we know

1528
01:23:37,010 --> 01:23:39,350
it asked to have children cause

1529
01:23:37,850 --> 01:23:42,590
otherwise we wouldn't see any of those

1530
01:23:39,350 --> 01:23:44,480
pieces when we do drop it down so we

1531
01:23:42,590 --> 01:23:46,219
asked for the debug ID from link which

1532
01:23:44,479 --> 01:23:48,678
I'm arguing to give us the same thing we

1533
01:23:46,219 --> 01:23:51,050
had before will then call get our create

1534
01:23:48,679 --> 01:23:53,840
debug view for which will be this and

1535
01:23:51,050 --> 01:23:55,880
here's the view and then you know we'll

1536
01:23:53,840 --> 01:23:58,279
check to see whether it's expanded

1537
01:23:55,880 --> 01:24:05,659
always and if it is we should draw the

1538
01:23:58,279 --> 01:24:08,289
children right so what I don't quite

1539
01:24:05,658 --> 01:24:08,289
understand

1540
01:24:11,380 --> 01:24:22,090
is how this didn't do exactly what I

1541
01:24:16,600 --> 01:24:24,610
wanted because it should have and we

1542
01:24:22,090 --> 01:24:30,940
should have gotten into here so I guess

1543
01:24:24,609 --> 01:24:33,299
I got to step into that and find out so

1544
01:24:30,939 --> 01:24:33,299
let's see

1545
01:24:41,979 --> 01:24:57,949
I'm gonna go set a breakpoint I'm gonna

1546
01:24:46,250 --> 01:25:03,800
set the breakpoint on let's see here on

1547
01:24:57,949 --> 01:25:06,519
this draw call well actually now on that

1548
01:25:03,800 --> 01:25:06,520
drug Hall yeah

1549
01:25:15,439 --> 01:25:24,139
and then I want to do it on these so I

1550
01:25:19,210 --> 01:25:29,750
come in here and we're gonna call set

1551
01:25:24,140 --> 01:25:32,300
expand so we produce a debug ID for one

1552
01:25:29,750 --> 01:25:36,260
of these guys and I want to see what it

1553
01:25:32,300 --> 01:25:42,199
actually ends up being so there we go

1554
01:25:36,260 --> 01:25:49,390
let's see we set the tree and we set the

1555
01:25:42,198 --> 01:25:55,988
link I can now copy these I think yeah

1556
01:25:49,390 --> 01:26:02,810
thank you to George that there we go so

1557
01:25:55,988 --> 01:26:06,259
this is what we're setting our ID to we

1558
01:26:02,810 --> 01:26:08,989
then go get a create debug view we hash

1559
01:26:06,260 --> 01:26:11,270
this thing there's nothing in that hash

1560
01:26:08,988 --> 01:26:15,529
slot so we make a new one we record the

1561
01:26:11,270 --> 01:26:17,330
ID we say that we don't know what type

1562
01:26:15,529 --> 01:26:25,189
it is

1563
01:26:17,329 --> 01:26:27,559
and then we well interestingly the fact

1564
01:26:25,189 --> 01:26:29,899
that we don't know what type it is

1565
01:26:27,560 --> 01:26:33,039
seems less good because shouldn't we set

1566
01:26:29,899 --> 01:26:33,039
it to a particular type

1567
01:26:39,060 --> 01:26:49,810
that may be part of the problem so when

1568
01:26:45,850 --> 01:26:53,880
we got this view here how did it know

1569
01:26:49,810 --> 01:26:53,880
that it was you know let me think

1570
01:26:56,909 --> 01:27:02,229
yeah like how does it know we can look

1571
01:27:00,489 --> 01:27:06,550
at this as a collapsible in the first

1572
01:27:02,229 --> 01:27:12,609
place and does that have to get sorted

1573
01:27:06,550 --> 01:27:25,869
out by anybody I'm gonna take a look at

1574
01:27:12,609 --> 01:27:28,199
that so whoever looks at this thing just

1575
01:27:25,869 --> 01:27:28,199
curious

1576
01:27:33,809 --> 01:27:38,239
I mean it should be set to that right

1577
01:27:39,469 --> 01:27:45,569
but of course the fact that nobody uses

1578
01:27:42,510 --> 01:27:52,710
that means that the fact that we're not

1579
01:27:45,569 --> 01:27:55,549
setting it shouldn't matter so I don't

1580
01:27:52,710 --> 01:27:55,550
really know what to make of that

1581
01:28:10,569 --> 01:28:28,869
so let's see we set both of these we set

1582
01:28:23,020 --> 01:28:30,370
to expand it always and that's fine it's

1583
01:28:28,869 --> 01:28:34,029
run to that where we actually draw this

1584
01:28:30,369 --> 01:28:36,909
thing so inside here this should

1585
01:28:34,029 --> 01:28:39,369
actually not do anything because there

1586
01:28:36,909 --> 01:28:43,359
is no group right so we actually need to

1587
01:28:39,369 --> 01:28:45,930
do that then when we run this thing I

1588
01:28:43,359 --> 01:28:50,319
will now switch to one of the views that

1589
01:28:45,930 --> 01:28:51,670
we actually expect to draw there so now

1590
01:28:50,319 --> 01:28:53,920
we're gonna go into this draw tree link

1591
01:28:51,670 --> 01:28:57,609
so when we come through here and produce

1592
01:28:53,920 --> 01:29:00,010
this draw ID and then I'm gonna get try

1593
01:28:57,609 --> 01:29:03,939
to get one of these I should find it

1594
01:29:00,010 --> 01:29:05,710
right so the fact that I don't find it

1595
01:29:03,939 --> 01:29:08,169
pretty pretty much tells me what I need

1596
01:29:05,710 --> 01:29:12,310
to know right it's the fact that this

1597
01:29:08,170 --> 01:29:14,020
IDs IDs didn't match the one that I said

1598
01:29:12,310 --> 01:29:17,280
the beginning doesn't match the one that

1599
01:29:14,020 --> 01:29:21,580
I'm setting now but I don't know why

1600
01:29:17,279 --> 01:29:24,519
right so if I look at this I'm doing a

1601
01:29:21,579 --> 01:29:28,059
debug ID from link and I'm passing this

1602
01:29:24,520 --> 01:29:32,230
tree pointer and this link pointer but

1603
01:29:28,060 --> 01:29:38,710
those should have matched because you

1604
01:29:32,229 --> 01:29:44,889
know the the tree and the group came

1605
01:29:38,710 --> 01:29:46,779
from here and it was this which should

1606
01:29:44,890 --> 01:29:50,470
be the same although I guess we'll have

1607
01:29:46,779 --> 01:29:52,359
to check and then it should have been

1608
01:29:50,470 --> 01:29:57,340
this which also should have been the

1609
01:29:52,359 --> 01:30:00,630
same right all right so one more time

1610
01:29:57,340 --> 01:30:03,610
let's just see why the ID doesn't match

1611
01:30:00,630 --> 01:30:06,359
stepping into here here's what the ID

1612
01:30:03,609 --> 01:30:06,359
looks like

1613
01:30:13,250 --> 01:30:22,710
just right here copy that copy that

1614
01:30:20,550 --> 01:30:26,850
so this is what our ID should look like

1615
01:30:22,710 --> 01:30:41,219
and now let's go see why it doesn't look

1616
01:30:26,850 --> 01:30:43,289
like that I if I now run to this is the

1617
01:30:41,219 --> 01:30:45,510
profile so is that the first one I did

1618
01:30:43,289 --> 01:30:48,469
the first one right so I need to make

1619
01:30:45,510 --> 01:30:50,219
sure that I'm looking at the correct one

1620
01:30:48,469 --> 01:30:53,039
so let me just see

1621
01:30:50,219 --> 01:30:55,340
yeah profile group so when we come in

1622
01:30:53,039 --> 01:30:59,539
here now I'm going to build that UID

1623
01:30:55,340 --> 01:30:59,539
again so here that is

1624
01:31:05,260 --> 01:31:16,920
so that is the same so that the tree is

1625
01:31:09,460 --> 01:31:22,090
the same it's the link that's not right

1626
01:31:16,920 --> 01:31:26,980
so the thing I expanded somehow wasn't

1627
01:31:22,090 --> 01:31:32,110
the same thing and of course how that's

1628
01:31:26,979 --> 01:31:34,209
possible I have absolutely no idea you

1629
01:31:32,109 --> 01:31:38,460
can see here that we're setting that

1630
01:31:34,210 --> 01:31:44,069
link to debug state profile group and

1631
01:31:38,460 --> 01:31:47,489
I'm setting the link based on that so

1632
01:31:44,069 --> 01:31:50,399
when we actually switch to dev mode

1633
01:31:47,488 --> 01:31:54,429
profiling like here

1634
01:31:50,399 --> 01:32:02,109
how would that not produce the correct

1635
01:31:54,430 --> 01:32:03,820
results now I suppose I may have to look

1636
01:32:02,109 --> 01:32:06,899
to make sure that that doesn't get

1637
01:32:03,819 --> 01:32:06,899
changed somewhere

1638
01:32:16,460 --> 01:32:22,890
and I'll be honest I'm not sure what

1639
01:32:20,600 --> 01:32:26,930
could possibly be happening here because

1640
01:32:22,890 --> 01:32:26,930
we it just gets used

1641
01:32:34,550 --> 01:32:44,570
you know like I don't really know let me

1642
01:32:41,069 --> 01:32:47,989
look at that debug UI HUD function there

1643
01:32:44,569 --> 01:32:47,989
not that one

1644
01:32:55,750 --> 01:33:00,130
so what do we do on set hood

1645
01:33:05,649 --> 01:33:07,710
you

1646
01:33:08,889 --> 01:33:20,170
oh man Wow

1647
01:33:15,270 --> 01:33:24,250
yeah this just sucks so for whatever

1648
01:33:20,170 --> 01:33:26,408
reason we create a dummy group that sits

1649
01:33:24,250 --> 01:33:29,800
in there but then we just replace it

1650
01:33:26,408 --> 01:33:33,189
later with a different one why we create

1651
01:33:29,800 --> 01:33:38,110
the group I do not know like what the

1652
01:33:33,189 --> 01:33:40,689
point is of that just seems dumb but hey

1653
01:33:38,109 --> 01:33:44,259
that's what we do that means what you

1654
01:33:40,689 --> 01:33:46,599
actually want is this which is to say

1655
01:33:44,260 --> 01:33:48,820
when you create a HUD group we just

1656
01:33:46,600 --> 01:33:53,050
assume that you want it to be expanded

1657
01:33:48,819 --> 01:33:56,109
happy birthday and so that gets expanded

1658
01:33:53,050 --> 01:33:57,429
right here right another way to do that

1659
01:33:56,109 --> 01:34:00,969
would just be to say hey the default

1660
01:33:57,429 --> 01:34:04,090
parent group that thing that comes in

1661
01:34:00,969 --> 01:34:06,279
there right and then this said expand

1662
01:34:04,090 --> 01:34:07,900
function you know I don't know where

1663
01:34:06,279 --> 01:34:09,579
this should go but somewhere at the top

1664
01:34:07,899 --> 01:34:12,029
here probably lots of people would call

1665
01:34:09,579 --> 01:34:12,029
this thing

1666
01:34:14,050 --> 01:34:24,420
let's something like that oh actually I

1667
01:34:21,760 --> 01:34:24,420
guess it has to be

1668
01:34:29,989 --> 01:34:42,869
get a crate debug view for alright so I

1669
01:34:40,619 --> 01:34:48,599
think that was extremely roundabout way

1670
01:34:42,869 --> 01:34:52,800
to do this but hey we did it and so now

1671
01:34:48,600 --> 01:34:56,730
I think we should be good to go as as

1672
01:34:52,800 --> 01:34:58,350
torturous as that was should probably do

1673
01:34:56,729 --> 01:35:00,809
a marathon weekend sometime or we just

1674
01:34:58,350 --> 01:35:03,480
clean all this code out we now know

1675
01:35:00,810 --> 01:35:07,680
exactly what we want and we could do

1676
01:35:03,479 --> 01:35:10,649
such a much better job so now at least

1677
01:35:07,680 --> 01:35:14,280
these are open by default right which is

1678
01:35:10,649 --> 01:35:20,579
what I wanted because there's really no

1679
01:35:14,279 --> 01:35:24,719
reason not to I feel like these should

1680
01:35:20,579 --> 01:35:27,140
also be longer by default sort of a

1681
01:35:24,720 --> 01:35:27,140
separate issue

1682
01:35:31,078 --> 01:35:42,789
alright so let's maybe now go in and

1683
01:35:36,630 --> 01:35:47,289
when we look at this stuff right I maybe

1684
01:35:42,789 --> 01:35:49,118
want to go ahead and get rid of this

1685
01:35:47,289 --> 01:35:52,988
frames because we're not going to use it

1686
01:35:49,118 --> 01:35:55,089
and then for call sites so again looking

1687
01:35:52,988 --> 01:35:59,319
at this I think what I might want to do

1688
01:35:55,090 --> 01:36:07,210
there is set something up where we look

1689
01:35:59,319 --> 01:36:10,988
at Peaks for those and so maybe we take

1690
01:36:07,210 --> 01:36:18,670
a look at some of that stuff so let's

1691
01:36:10,988 --> 01:36:20,289
look at let's look at tracking those

1692
01:36:18,670 --> 01:36:22,630
Peaks and then also maybe we can have a

1693
01:36:20,289 --> 01:36:25,448
thing that sort of says in addition to

1694
01:36:22,630 --> 01:36:28,449
those buttons maybe we'd have a thing

1695
01:36:25,448 --> 01:36:30,428
where we allow you to pick a couple

1696
01:36:28,448 --> 01:36:34,328
modes like don't show me anything that's

1697
01:36:30,429 --> 01:36:37,149
not persistently allocated you know and

1698
01:36:34,328 --> 01:36:40,868
stuff like that so let's go into the

1699
01:36:37,149 --> 01:36:44,319
call sites and try to figure out how to

1700
01:36:40,868 --> 01:36:46,058
get the Alex to happen there or at the

1701
01:36:44,319 --> 01:36:50,399
Alec tracking to happen so we can track

1702
01:36:46,059 --> 01:36:52,719
peak memory usage and we can also

1703
01:36:50,399 --> 01:36:55,328
probably do that per you know that might

1704
01:36:52,719 --> 01:36:56,770
be the easiest way to start is just do

1705
01:36:55,328 --> 01:37:00,460
it per arena and then we'll add it for

1706
01:36:56,770 --> 01:37:04,719
the call sites later so let's start with

1707
01:37:00,460 --> 01:37:07,389
with that inside handmade debug when I'm

1708
01:37:04,719 --> 01:37:12,719
tracking memory each one of these arenas

1709
01:37:07,389 --> 01:37:21,840
I'm gonna say that maybe we just have a

1710
01:37:12,719 --> 01:37:26,289
peak memory like Kerr total Alec and

1711
01:37:21,840 --> 01:37:31,840
total Alec something like that and so

1712
01:37:26,289 --> 01:37:39,939
whenever we allocate a block of memory

1713
01:37:31,840 --> 01:37:43,900
so so when we have blocks allocated or

1714
01:37:39,939 --> 01:37:49,460
freed we will adjust

1715
01:37:43,899 --> 01:37:52,549
that that peak number so probably like

1716
01:37:49,460 --> 01:37:52,550
[Music]

1717
01:38:02,750 --> 01:38:10,670
trying to think I won't do this so when

1718
01:38:07,039 --> 01:38:14,060
we do an arena block allocate we would

1719
01:38:10,670 --> 01:38:18,279
say that the arena cur total a lock is

1720
01:38:14,060 --> 01:38:21,440
gonna be whatever the block allocation

1721
01:38:18,279 --> 01:38:29,719
size is it will go up by that much and

1722
01:38:21,439 --> 01:38:32,029
if the peak total a lock is less than

1723
01:38:29,719 --> 01:38:36,079
that we'll remember that as the

1724
01:38:32,029 --> 01:38:39,649
high-water mark for the arena and then

1725
01:38:36,079 --> 01:38:43,010
when a block is d allocated so like in

1726
01:38:39,649 --> 01:38:47,089
this case what we would want to do is

1727
01:38:43,010 --> 01:38:50,750
say whenever we remove the block we

1728
01:38:47,090 --> 01:38:54,800
subtract off like how however big that

1729
01:38:50,750 --> 01:38:58,069
free block was we take that back away

1730
01:38:54,800 --> 01:39:00,909
from the arena's total allocation out

1731
01:38:58,069 --> 01:39:07,219
way so that should allow us to just

1732
01:39:00,909 --> 01:39:10,550
track the total usage over time the

1733
01:39:07,219 --> 01:39:13,460
maximum that any arena ever hit even if

1734
01:39:10,550 --> 01:39:16,130
it doesn't end a frame there we'd still

1735
01:39:13,460 --> 01:39:25,489
be able to see it and so then when we

1736
01:39:16,130 --> 01:39:32,109
draw those allocation numbers in so it's

1737
01:39:25,488 --> 01:39:35,869
I when we do top mem lists for example

1738
01:39:32,109 --> 01:39:39,639
in addition to the basic statistics we

1739
01:39:35,869 --> 01:39:43,430
can have that piece of information so

1740
01:39:39,640 --> 01:39:46,400
you know the peak here's the regular and

1741
01:39:43,430 --> 01:39:51,010
then we also maybe have a peak so we do

1742
01:39:46,399 --> 01:39:51,009
a percent for um B for peak as well

1743
01:39:55,469 --> 01:40:08,380
so that's arena geek total a lock / f 64

1744
01:40:01,618 --> 01:40:14,519
megabytes and then here what I'll do is

1745
01:40:08,380 --> 01:40:23,590
I'll just say like or I need to put like

1746
01:40:14,520 --> 01:40:27,280
you know her and then something like

1747
01:40:23,590 --> 01:40:29,500
that and that way now I should be able

1748
01:40:27,279 --> 01:40:30,969
to see the peak for every arena in

1749
01:40:29,500 --> 01:40:35,460
addition to the amount that it's

1750
01:40:30,969 --> 01:40:38,730
actually sort of using at that time and

1751
01:40:35,460 --> 01:40:41,010
it's you know set a breakpoint there

1752
01:40:38,729 --> 01:40:44,919
probably an old one that got moved down

1753
01:40:41,010 --> 01:40:48,610
uh so then oh I forgot the MB so I can

1754
01:40:44,920 --> 01:40:51,158
push these a little further so yeah

1755
01:40:48,609 --> 01:40:52,509
that's exactly what I wanted to see hold

1756
01:40:51,158 --> 01:40:54,809
on a second let me push those over a

1757
01:40:52,510 --> 01:40:54,810
little bit

1758
01:41:05,859 --> 01:41:11,229
I think that's it so this is exactly

1759
01:41:09,250 --> 01:41:12,760
what I want to see for asset storage and

1760
01:41:11,229 --> 01:41:14,709
game mode it's exactly as what we would

1761
01:41:12,760 --> 01:41:16,659
expect the current amount that's used

1762
01:41:14,710 --> 01:41:17,859
and the peak amount are the same and of

1763
01:41:16,659 --> 01:41:22,029
course the reason for that is because

1764
01:41:17,859 --> 01:41:23,739
those are persistent storage systems so

1765
01:41:22,029 --> 01:41:25,869
you don't expect them to fluctuate much

1766
01:41:23,739 --> 01:41:27,399
during a frame they're just allocated

1767
01:41:25,869 --> 01:41:29,829
and that's it

1768
01:41:27,399 --> 01:41:32,079
but then on frame temporary this is

1769
01:41:29,829 --> 01:41:33,699
exactly what I wanted to see you can see

1770
01:41:32,079 --> 01:41:34,989
that it ends the frame with only two

1771
01:41:33,699 --> 01:41:36,729
megabytes used but there's actually a

1772
01:41:34,989 --> 01:41:39,130
really large amount of memory getting

1773
01:41:36,729 --> 01:41:42,009
used in there that happens as a

1774
01:41:39,130 --> 01:41:44,710
transient sort of occurrence inside the

1775
01:41:42,010 --> 01:41:46,390
frame so that helped us understand that

1776
01:41:44,710 --> 01:41:48,939
on certain frames we use a lot of memory

1777
01:41:46,390 --> 01:41:50,829
in there perhaps every frame that's a

1778
01:41:48,939 --> 01:41:54,819
lot more than the amount that we're

1779
01:41:50,829 --> 01:41:57,340
using just as a stationary storage

1780
01:41:54,819 --> 01:41:59,139
across the frame boundary so what I'd

1781
01:41:57,340 --> 01:42:01,539
like to do is then just you know

1782
01:41:59,140 --> 01:42:03,340
continue to expand on this when we come

1783
01:42:01,539 --> 01:42:06,369
in here you can see that we don't have

1784
01:42:03,340 --> 01:42:07,930
Peaks for call sites but there's no

1785
01:42:06,369 --> 01:42:10,329
reason why we couldn't have Peaks for

1786
01:42:07,930 --> 01:42:12,159
call sites I don't think so

1787
01:42:10,329 --> 01:42:14,800
let's see if we can go ahead and put in

1788
01:42:12,159 --> 01:42:16,630
peak tracking for call site data as well

1789
01:42:14,800 --> 01:42:18,909
so that when we print this out we'll be

1790
01:42:16,630 --> 01:42:23,949
able to get that number in here too

1791
01:42:18,909 --> 01:42:27,069
right okay so if we're gonna do that we

1792
01:42:23,949 --> 01:42:29,739
would need this percent for UMB to get

1793
01:42:27,069 --> 01:42:32,710
to happen down here as well right and so

1794
01:42:29,739 --> 01:42:35,739
we would need this and when we print out

1795
01:42:32,710 --> 01:42:38,529
this value right here we need to know

1796
01:42:35,739 --> 01:42:43,239
like alright like what's going on so we

1797
01:42:38,529 --> 01:42:45,429
need like peak turtle Alec we need that

1798
01:42:43,239 --> 01:42:47,679
to be on each individual call site and

1799
01:42:45,430 --> 01:42:49,780
so if I go out to where we're tracking

1800
01:42:47,680 --> 01:42:59,619
the call sites we you know we know what

1801
01:42:49,779 --> 01:43:03,099
we need we need this right and off we go

1802
01:42:59,619 --> 01:43:05,519
the we could track the Curt total Alec

1803
01:43:03,100 --> 01:43:05,520
as well

1804
01:43:06,708 --> 01:43:09,828
I suppose there's really not a reason

1805
01:43:09,349 --> 01:43:13,248
not to

1806
01:43:09,828 --> 01:43:20,328
and then we wouldn't have to do the call

1807
01:43:13,248 --> 01:43:22,849
site looping well they can do that later

1808
01:43:20,328 --> 01:43:24,948
but anyway this peak total a lock here

1809
01:43:22,849 --> 01:43:26,389
on the call site if we wanted to track

1810
01:43:24,948 --> 01:43:28,819
that the same way that we were tracking

1811
01:43:26,389 --> 01:43:30,650
it per arena we need to do the exact

1812
01:43:28,819 --> 01:43:32,630
same thing we did before accepts a

1813
01:43:30,649 --> 01:43:34,879
little bit harder because on every

1814
01:43:32,630 --> 01:43:37,578
single allocation we actually need to

1815
01:43:34,880 --> 01:43:41,449
take whatever the call site was like

1816
01:43:37,578 --> 01:43:42,978
this and we need to Inc that right so we

1817
01:43:41,448 --> 01:43:50,029
need to do a thing where we have like

1818
01:43:42,979 --> 01:43:56,389
debug arena I'll say site equals get

1819
01:43:50,029 --> 01:44:03,380
call site debug state call site index

1820
01:43:56,389 --> 01:44:06,769
and then we need to do like site just do

1821
01:44:03,380 --> 01:44:10,578
that down here site peek total a lock

1822
01:44:06,769 --> 01:44:16,280
plus equals whatever the allocated size

1823
01:44:10,578 --> 01:44:21,018
was right and so in addition to that we

1824
01:44:16,279 --> 01:44:25,488
also need up in here where we whenever

1825
01:44:21,019 --> 01:44:32,239
we like remove one of the one of like

1826
01:44:25,488 --> 01:44:34,879
the links we need to process that and so

1827
01:44:32,238 --> 01:44:37,458
I believe that always goes through debug

1828
01:44:34,880 --> 01:44:39,769
move to free list and so in here where

1829
01:44:37,458 --> 01:44:42,828
we do this we're now regretfully and I

1830
01:44:39,769 --> 01:44:46,150
suppose it's you know it's fine we have

1831
01:44:42,828 --> 01:44:46,149
to loop over each of these

1832
01:44:55,859 --> 01:45:04,089
and remove it now actually this isn't

1833
01:45:00,189 --> 01:45:13,439
quite right I think we actually need to

1834
01:45:04,090 --> 01:45:16,840
do it more like this oops

1835
01:45:13,439 --> 01:45:20,439
because we need to also process the last

1836
01:45:16,840 --> 01:45:23,920
one right so I can't stop before doing

1837
01:45:20,439 --> 01:45:27,069
the last one so for each a lock I would

1838
01:45:23,920 --> 01:45:29,500
need to say take the call site in

1839
01:45:27,069 --> 01:45:33,369
question for this particular a lock and

1840
01:45:29,500 --> 01:45:40,600
remove the size that this a lock

1841
01:45:33,369 --> 01:45:42,399
represented you know I'm saying so as

1842
01:45:40,600 --> 01:45:44,500
long as everyone always moves

1843
01:45:42,399 --> 01:45:49,629
allocations to the free list which I

1844
01:45:44,500 --> 01:45:52,359
think they always do that should take

1845
01:45:49,630 --> 01:45:54,609
care of it for us so on truncation you

1846
01:45:52,359 --> 01:45:56,439
can see it doing it here and on block

1847
01:45:54,609 --> 01:46:01,089
free you can see it doing it here so I

1848
01:45:56,439 --> 01:46:05,559
think that would track the peaks for us

1849
01:46:01,090 --> 01:46:09,390
right so if I go in here and look here's

1850
01:46:05,560 --> 01:46:14,080
the peak tracking it does look pretty

1851
01:46:09,390 --> 01:46:15,550
reliable right now of course we end up

1852
01:46:14,079 --> 01:46:16,840
with our scrolling problem I need to be

1853
01:46:15,550 --> 01:46:21,400
able to scroll this list I can't

1854
01:46:16,840 --> 01:46:22,960
actually see it here and there's another

1855
01:46:21,399 --> 01:46:25,809
thing that we probably would want to do

1856
01:46:22,960 --> 01:46:27,779
if you look at how this is laid out we

1857
01:46:25,810 --> 01:46:31,690
probably want to come up with a printout

1858
01:46:27,779 --> 01:46:35,050
0 megabytes not a helpful number right

1859
01:46:31,689 --> 01:46:37,599
if it's too small to list in megabytes

1860
01:46:35,050 --> 01:46:39,400
list it in kilobytes if it's too small

1861
01:46:37,600 --> 01:46:41,680
to list in kilobytes listed in bytes

1862
01:46:39,399 --> 01:46:43,329
right so that's another thing we can do

1863
01:46:41,680 --> 01:46:44,800
here so we need two things we probably

1864
01:46:43,329 --> 01:46:47,229
want to be able to scroll this thing up

1865
01:46:44,800 --> 01:46:49,600
and down and the other thing that I

1866
01:46:47,229 --> 01:46:53,129
probably want to do is I want to be able

1867
01:46:49,600 --> 01:46:57,370
to and I don't I assume we want that

1868
01:46:53,130 --> 01:46:59,440
here too right like it would be nice to

1869
01:46:57,369 --> 01:47:01,090
be able to scroll that up and down so I

1870
01:46:59,439 --> 01:47:03,309
think both of these probably want that

1871
01:47:01,090 --> 01:47:04,119
right I mean that's that's seems pretty

1872
01:47:03,310 --> 01:47:07,809
straight

1873
01:47:04,118 --> 01:47:09,488
or so we should probably have that but

1874
01:47:07,809 --> 01:47:13,529
anyway it looks like the peak tracking

1875
01:47:09,488 --> 01:47:15,728
is working here at least somewhat and

1876
01:47:13,529 --> 01:47:18,639
you know it's it's a little bit hard to

1877
01:47:15,729 --> 01:47:20,050
say because we don't have something to

1878
01:47:18,639 --> 01:47:26,889
compare it to to know if that's actually

1879
01:47:20,050 --> 01:47:28,269
true but you know yeah maybe so I'm

1880
01:47:26,889 --> 01:47:30,998
gonna do two things I'm gonna add the

1881
01:47:28,269 --> 01:47:34,449
scrolling and I'm gonna add the ability

1882
01:47:30,998 --> 01:47:39,038
to print the instead of like you know mb

1883
01:47:34,448 --> 01:47:41,799
or whatever I want some way of printing

1884
01:47:39,038 --> 01:47:44,168
that out better and so you know I feel

1885
01:47:41,800 --> 01:47:46,659
like this is a place where maybe I can

1886
01:47:44,168 --> 01:47:49,569
lean a little bit I don't know maybe I

1887
01:47:46,658 --> 01:47:54,788
can't lean a little bit on the fact that

1888
01:47:49,569 --> 01:48:00,069
we have our own print out here I'm just

1889
01:47:54,788 --> 01:48:03,849
kind of thinking like when we look at

1890
01:48:00,069 --> 01:48:07,688
these values and you know I've got all

1891
01:48:03,849 --> 01:48:12,729
this stuff you know could I just add my

1892
01:48:07,689 --> 01:48:19,329
own percent format specifier so like

1893
01:48:12,729 --> 01:48:23,990
instead of you here I could just do B

1894
01:48:19,328 --> 01:48:27,059
and have that work right

1895
01:48:23,989 --> 01:48:27,059
[Music]

1896
01:48:32,840 --> 01:48:42,680
or maybe percent m4 memory I don't know

1897
01:48:45,889 --> 01:48:51,679
I'm a little confused about the read VAR

1898
01:48:48,800 --> 01:48:53,989
argh unsigned integer part of things the

1899
01:48:51,679 --> 01:49:04,158
reason I'm a little confused about that

1900
01:48:53,988 --> 01:49:07,809
is does that read 64 bits or 32 bits so

1901
01:49:04,158 --> 01:49:11,359
it just uses the length specifier here

1902
01:49:07,810 --> 01:49:15,500
but I could say that mem was always

1903
01:49:11,359 --> 01:49:19,389
supposed to be 64 is probably I don't

1904
01:49:15,500 --> 01:49:19,389
know if that's what we want or not but

1905
01:49:23,350 --> 01:49:30,110
don't look at me I just work here so I'm

1906
01:49:26,868 --> 01:49:41,658
guessing I want to do something yeah you

1907
01:49:30,109 --> 01:49:43,819
know vaguely like this so if you pass

1908
01:49:41,658 --> 01:49:47,359
one of these things it's like a memory

1909
01:49:43,819 --> 01:49:50,929
sized thing you know I'm saying and so

1910
01:49:47,359 --> 01:49:54,469
we'd say like alright this is actually a

1911
01:49:50,929 --> 01:49:56,868
6m instead of a 4ub and we're just

1912
01:49:54,469 --> 01:49:59,539
assuming that you add the little like

1913
01:49:56,868 --> 01:50:04,488
stuff to the end to say what the heck it

1914
01:49:59,539 --> 01:50:07,279
was and so when we do this conversion we

1915
01:50:04,488 --> 01:50:10,908
would just say like alright convert you

1916
01:50:07,279 --> 01:50:12,618
know use 64 to ASCII I passed the value

1917
01:50:10,908 --> 01:50:16,368
and we do our little dance and then I'm

1918
01:50:12,618 --> 01:50:18,019
gonna into the the temp test part of

1919
01:50:16,368 --> 01:50:20,750
things I'm gonna stick some extra stuff

1920
01:50:18,020 --> 01:50:23,929
and so what I want to do here is just

1921
01:50:20,750 --> 01:50:27,618
figure out like you know my suffix is

1922
01:50:23,929 --> 01:50:33,949
just gonna be like B with a space I

1923
01:50:27,618 --> 01:50:36,109
guess four bytes right but then what I

1924
01:50:33,948 --> 01:50:39,138
want to do is like keep doing some tests

1925
01:50:36,109 --> 01:50:42,829
here so like if value is greater than

1926
01:50:39,139 --> 01:50:47,239
1024 then my suffix goes up to be like

1927
01:50:42,829 --> 01:50:51,710
KB or something and my value I divided

1928
01:50:47,238 --> 01:50:57,289
by 1024 write something like this in

1929
01:50:51,710 --> 01:50:58,539
fact we probably want to do it well I

1930
01:50:57,289 --> 01:51:02,390
don't know what I want to do

1931
01:50:58,539 --> 01:51:04,359
don't quote me on that um right and then

1932
01:51:02,390 --> 01:51:08,000
we would do the same thing again

1933
01:51:04,359 --> 01:51:09,829
probably like if the value is greater

1934
01:51:08,000 --> 01:51:11,449
than 1024 I guess you know what I could

1935
01:51:09,829 --> 01:51:13,250
do is do this a little bit more stable I

1936
01:51:11,449 --> 01:51:14,659
could say like if the value is greater

1937
01:51:13,250 --> 01:51:16,489
than like a megabyte

1938
01:51:14,659 --> 01:51:31,550
you know if the value is greater than a

1939
01:51:16,489 --> 01:51:33,679
gigabyte what that and then each of

1940
01:51:31,550 --> 01:51:36,380
these things just does like whatever the

1941
01:51:33,680 --> 01:51:40,970
thing is that you do you know what I'm

1942
01:51:36,380 --> 01:51:42,500
saying to you and so I could just say if

1943
01:51:40,970 --> 01:51:44,780
it's greater than a gigabyte then the

1944
01:51:42,500 --> 01:51:47,869
suffix is going to be gigabyte and the

1945
01:51:44,779 --> 01:51:51,909
value is going to be you know equal to

1946
01:51:47,869 --> 01:51:57,199
the value plus gigabytes 1 minus 1

1947
01:51:51,909 --> 01:52:00,289
divided by gigabytes right so we round

1948
01:51:57,199 --> 01:52:02,689
up and we just say like that's how many

1949
01:52:00,289 --> 01:52:05,449
gigabytes it is now you might argue we

1950
01:52:02,689 --> 01:52:15,289
should like put in a fractional thing

1951
01:52:05,449 --> 01:52:20,170
here and you're not wrong but we're also

1952
01:52:15,289 --> 01:52:20,170
not going to because we're out of time

1953
01:52:26,170 --> 01:52:38,529
and so then if I go look at you 64 to

1954
01:52:31,220 --> 01:52:40,960
ASCII 1 too many of those

1955
01:52:38,529 --> 01:52:42,759
if I go look at you 64 ascii you can see

1956
01:52:40,960 --> 01:52:45,130
this out care thing

1957
01:52:42,760 --> 01:52:51,789
so the out care thing I just now need to

1958
01:52:45,130 --> 01:52:56,050
add that you know those sort of that

1959
01:52:51,789 --> 01:52:58,510
suffix on to the end like so and I think

1960
01:52:56,050 --> 01:53:03,070
that's it so I think that should now

1961
01:52:58,510 --> 01:53:09,880
print out the values we're talking about

1962
01:53:03,069 --> 01:53:13,090
here see here having some kind of an

1963
01:53:09,880 --> 01:53:16,260
issue with the VA arglist

1964
01:53:13,090 --> 01:53:16,260
what's wrong with that

1965
01:53:24,390 --> 01:53:27,860
shouldn't that work

1966
01:53:43,640 --> 01:53:48,570
not sure I see what the problem is here

1967
01:53:46,250 --> 01:53:50,340
but obviously something is the problem

1968
01:53:48,569 --> 01:53:52,289
we're using this right I mean this is

1969
01:53:50,340 --> 01:53:54,510
what other people are using so this code

1970
01:53:52,289 --> 01:53:57,050
right here expands to like if length

1971
01:53:54,510 --> 01:54:02,400
equals 8va

1972
01:53:57,050 --> 01:54:04,829
argh-argh lists you 64 that's what that

1973
01:54:02,399 --> 01:54:05,819
expanded to right hold on one second

1974
01:54:04,829 --> 01:54:14,189
please make sure there's nothing else

1975
01:54:05,819 --> 01:54:18,059
weird going on here it's ummm like not

1976
01:54:14,189 --> 01:54:26,429
defined or something oh okay yeah I

1977
01:54:18,060 --> 01:54:29,220
guess it isn't in this code so what's up

1978
01:54:26,430 --> 01:54:31,530
with that is not to find it handmade

1979
01:54:29,220 --> 01:54:34,829
platform or something looks like it's

1980
01:54:31,529 --> 01:54:37,189
just really confused about what's going

1981
01:54:34,829 --> 01:54:37,189
on there

1982
01:55:05,760 --> 01:55:17,360
so this looks like the problem because

1983
01:55:10,829 --> 01:55:17,359
I'm assuming yeah and handmade shared

1984
01:55:19,729 --> 01:55:25,099
handmade shared is like not actually

1985
01:55:32,869 --> 01:55:43,050
well no this is handmade types so ummm

1986
01:55:38,488 --> 01:55:46,279
should be totally valid right I don't

1987
01:55:43,050 --> 01:55:46,279
get it what's the problem

1988
01:56:00,420 --> 01:56:06,010
so all that stuff works fine there's a

1989
01:56:04,810 --> 01:56:15,280
um I'm right here

1990
01:56:06,010 --> 01:56:19,239
did I just like there's a missing : that

1991
01:56:15,279 --> 01:56:25,689
was a really bad error message Wow how

1992
01:56:19,238 --> 01:56:29,849
about just missing : after case alright

1993
01:56:25,689 --> 01:56:32,409
um so let's see if this helps at all I

1994
01:56:29,850 --> 01:56:39,670
don't know if it if it does or if it

1995
01:56:32,409 --> 01:56:41,260
doesn't or if it well that is not 556

1996
01:56:39,670 --> 01:56:43,000
gigabytes case anyone was wondering

1997
01:56:41,260 --> 01:56:51,430
about that

1998
01:56:43,000 --> 01:56:53,140
let's try that one more time so we look

1999
01:56:51,430 --> 01:56:59,950
at whether the value is bigger than

2000
01:56:53,140 --> 01:57:02,590
gigabytes fix on there let me take a

2001
01:56:59,949 --> 01:57:04,769
look at that what we're we're calling

2002
01:57:02,590 --> 01:57:04,770
that

2003
01:57:09,038 --> 01:57:18,689
ah so these were cast to you 32s

2004
01:57:15,158 --> 01:57:26,529
and they should not have been oops and

2005
01:57:18,689 --> 01:57:31,268
we need to actually pass them as UMMS so

2006
01:57:26,529 --> 01:57:33,399
that'sthat's some that actually needs to

2007
01:57:31,269 --> 01:57:34,960
be converted to a um M right in fact

2008
01:57:33,399 --> 01:57:38,319
both this one doesn't because it already

2009
01:57:34,960 --> 01:57:39,189
is but they need to be passed as um M so

2010
01:57:38,319 --> 01:57:41,130
that so I'm just gonna make sure that

2011
01:57:39,189 --> 01:57:45,238
they are and the same would be true here

2012
01:57:41,130 --> 01:57:45,239
again we don't need to do this anymore

2013
01:57:50,460 --> 01:57:56,529
so I believe if we just make that a 6m

2014
01:57:54,099 --> 01:57:58,989
and that's 6m now we should get those

2015
01:57:56,529 --> 01:58:00,550
printing out properly and again this is

2016
01:57:58,988 --> 01:58:01,988
just a way to make it so that it's a

2017
01:58:00,550 --> 01:58:04,269
little bit easier for us to figure out

2018
01:58:01,988 --> 01:58:07,448
what the heck values we're dealing with

2019
01:58:04,269 --> 01:58:09,760
we don't have to like always like trying

2020
01:58:07,448 --> 01:58:15,689
to oh is that bites is that this is that

2021
01:58:09,760 --> 01:58:18,309
you know something else all right so

2022
01:58:15,689 --> 01:58:21,488
these look right this looks a little

2023
01:58:18,309 --> 01:58:22,869
suspicious although I guess we just do

2024
01:58:21,488 --> 01:58:23,709
greater than equal to it might actually

2025
01:58:22,868 --> 01:58:25,658
be true

2026
01:58:23,710 --> 01:58:29,679
they might have just allocated one 1k

2027
01:58:25,658 --> 01:58:31,149
block in fact they probably did this

2028
01:58:29,679 --> 01:58:32,529
makes it a little bit easier to see

2029
01:58:31,149 --> 01:58:33,609
what's happening right now some of these

2030
01:58:32,529 --> 01:58:37,448
things that were just zero before you

2031
01:58:33,609 --> 01:58:39,339
gets you like oh there's a 4k that takes

2032
01:58:37,448 --> 01:58:43,149
up 4 KS worth of allocations instead of

2033
01:58:39,340 --> 01:58:45,038
zero right and here you can see oh there

2034
01:58:43,149 --> 01:58:46,929
was a 32 byte allocation there for

2035
01:58:45,038 --> 01:58:50,768
something right so it's a little bit

2036
01:58:46,929 --> 01:58:54,038
better than it was but it's still not

2037
01:58:50,769 --> 01:58:58,480
quite as good as I would like let's just

2038
01:58:54,038 --> 01:59:01,000
try one more thing in there and say that

2039
01:58:58,479 --> 01:59:04,448
this is greater than or equal to instead

2040
01:59:01,000 --> 01:59:06,698
of greater than that's probably more

2041
01:59:04,448 --> 01:59:09,509
sane but that seems good and now we'll

2042
01:59:06,698 --> 01:59:09,509
go ahead and go to QA

2043
01:59:16,300 --> 01:59:18,989
yeah

2044
01:59:19,890 --> 01:59:25,280
and that looks better okay let's QA

2045
01:59:42,560 --> 01:59:46,460
do you think that having a way to

2046
01:59:44,300 --> 01:59:51,489
visualize the memory as an image could

2047
01:59:46,460 --> 01:59:53,539
be useful how would you implement that I

2048
01:59:51,489 --> 01:59:58,429
don't know what you mean like how would

2049
01:59:53,539 --> 02:00:01,840
that be different than this do you mean

2050
01:59:58,430 --> 02:00:07,420
like you want to draw like the values

2051
02:00:01,840 --> 02:00:07,420
that are in there or something

2052
02:00:08,680 --> 02:00:15,680
do you mean like like the contents of

2053
02:00:11,090 --> 02:00:18,560
memory and as far as whether I that'd be

2054
02:00:15,680 --> 02:00:22,550
useful I mean it might help you see

2055
02:00:18,560 --> 02:00:34,690
things like runs of zeros and stuff or

2056
02:00:22,550 --> 02:00:43,100
something but yeah I don't I don't know

2057
02:00:34,689 --> 02:00:44,359
what you would really do with that yeah

2058
02:00:43,100 --> 02:00:48,079
I don't know but if you wanted to

2059
02:00:44,359 --> 02:00:51,460
implement it I mean honestly it's pretty

2060
02:00:48,079 --> 02:00:54,559
straightforward you would just and it's

2061
02:00:51,460 --> 02:00:57,699
you know how you would necessarily make

2062
02:00:54,560 --> 02:01:01,580
sure that the speed is what you want I

2063
02:00:57,699 --> 02:01:05,809
don't know but you know you would just

2064
02:01:01,579 --> 02:01:08,630
say to OpenGL here's the arena start

2065
02:01:05,810 --> 02:01:10,610
address and here's how long it is it's a

2066
02:01:08,630 --> 02:01:19,460
texture and it would download it to the

2067
02:01:10,609 --> 02:01:23,420
card right I mean that's it it's memory

2068
02:01:19,460 --> 02:01:25,460
so you just draw it and I mean you would

2069
02:01:23,420 --> 02:01:27,350
probably want to draw it as mono so

2070
02:01:25,460 --> 02:01:29,539
you'd probably tell it it was a mono

2071
02:01:27,350 --> 02:01:31,010
texture because you don't unless you

2072
02:01:29,539 --> 02:01:33,199
want red green and blue to mean

2073
02:01:31,010 --> 02:01:36,860
something you just draw it as a mono

2074
02:01:33,199 --> 02:01:40,250
texture and then you either just be fine

2075
02:01:36,859 --> 02:01:42,679
with greyscale or you'd use a lookup

2076
02:01:40,250 --> 02:01:46,369
table to map like zero to a specific

2077
02:01:42,680 --> 02:01:47,600
color and then one through 255 to some

2078
02:01:46,369 --> 02:01:48,859
other color so you could see the

2079
02:01:47,600 --> 02:01:50,599
difference between zeros

2080
02:01:48,859 --> 02:01:55,069
maybe zeros ones as lying

2081
02:01:50,599 --> 02:01:56,480
or something like that right short of

2082
02:01:55,069 --> 02:01:58,609
that I'm not sure what you would do

2083
02:01:56,479 --> 02:02:00,888
because if you wanted to do something

2084
02:01:58,609 --> 02:02:02,689
fancier you'd have to have like PDB

2085
02:02:00,889 --> 02:02:04,460
information basically because you need

2086
02:02:02,689 --> 02:02:07,250
to know like okay where in memory are

2087
02:02:04,460 --> 02:02:09,289
things and is this afloat you know

2088
02:02:07,250 --> 02:02:12,020
should I draw it as a float instead of a

2089
02:02:09,289 --> 02:02:14,929
byte or something right but I honestly

2090
02:02:12,020 --> 02:02:16,230
don't know what a value you would get

2091
02:02:14,929 --> 02:02:19,369
from that

2092
02:02:16,229 --> 02:02:19,369
[Music]

2093
02:02:34,960 --> 02:02:39,730
brian says admitted admittedly i have

2094
02:02:38,380 --> 02:02:41,350
not been watching all the streams review

2095
02:02:39,729 --> 02:02:43,000
of the code but if this tracks memory

2096
02:02:41,350 --> 02:02:44,890
and the transient memory could reset

2097
02:02:43,000 --> 02:02:46,300
itself throughout the frame is what is

2098
02:02:44,890 --> 02:02:47,710
tracked only what is left at the end of

2099
02:02:46,300 --> 02:02:49,300
the frame and if you have collected peak

2100
02:02:47,710 --> 02:02:50,890
information is it the reason there any

2101
02:02:49,300 --> 02:02:52,150
of your static because you're not doing

2102
02:02:50,890 --> 02:03:00,130
anything new or different between frames

2103
02:02:52,149 --> 02:03:03,670
um so no let me just clarify something

2104
02:03:00,130 --> 02:03:09,609
we are tracking the memory usage just

2105
02:03:03,670 --> 02:03:13,449
flat flat out period so we the peak

2106
02:03:09,609 --> 02:03:15,939
value is the value that was hit inside

2107
02:03:13,449 --> 02:03:18,279
the frame and that's why for example the

2108
02:03:15,939 --> 02:03:20,169
frame temporary arena has a 46 megabyte

2109
02:03:18,279 --> 02:03:23,559
peak but only 3 megabytes is actually

2110
02:03:20,170 --> 02:03:26,199
allocated right as for why it doesn't

2111
02:03:23,560 --> 02:03:28,090
change well we wouldn't really expect it

2112
02:03:26,199 --> 02:03:29,949
to change that much if the game is doing

2113
02:03:28,090 --> 02:03:35,350
something fairly stable because remember

2114
02:03:29,949 --> 02:03:37,269
we are a pretty reliable game in terms

2115
02:03:35,350 --> 02:03:38,829
of memory usage we don't do the thing

2116
02:03:37,270 --> 02:03:40,240
that like most engines do we're just

2117
02:03:38,829 --> 02:03:41,859
everyone allocates everything all the

2118
02:03:40,239 --> 02:03:45,489
time everywhere and is completely lazy

2119
02:03:41,859 --> 02:03:47,559
about it so that's what one reason why

2120
02:03:45,489 --> 02:03:49,179
we're so stable but there's another

2121
02:03:47,560 --> 02:03:50,860
reason that we're stable and that is

2122
02:03:49,180 --> 02:03:54,340
that there are some things we're not

2123
02:03:50,859 --> 02:03:56,649
tracking and that is if an arena itself

2124
02:03:54,340 --> 02:03:59,860
comes into existence and goes out of

2125
02:03:56,649 --> 02:04:04,689
existence during a processing of a frame

2126
02:03:59,859 --> 02:04:06,729
we wouldn't see that right and so there

2127
02:04:04,689 --> 02:04:08,439
may be some there may be some arena's

2128
02:04:06,729 --> 02:04:10,089
getting created and destroyed in the

2129
02:04:08,439 --> 02:04:14,849
middle of a frame and that we wouldn't

2130
02:04:10,090 --> 02:04:14,850
track so just keep that in mind

2131
02:04:21,689 --> 02:04:26,069
are you playing to add more features to

2132
02:04:23,310 --> 02:04:30,390
this I don't think so except maybe the

2133
02:04:26,069 --> 02:04:32,130
scrolling started watching you a while

2134
02:04:30,390 --> 02:04:33,510
back is the earlier episodes irrelevant

2135
02:04:32,130 --> 02:04:38,250
worth it or should I start somewhere

2136
02:04:33,510 --> 02:04:40,800
more up-to-date well everything I do is

2137
02:04:38,250 --> 02:04:42,960
programming that's involved in game

2138
02:04:40,800 --> 02:04:44,340
development so it depends what you're

2139
02:04:42,960 --> 02:04:47,069
trying to learn I would usually

2140
02:04:44,340 --> 02:04:51,390
recommend that people watch you know use

2141
02:04:47,069 --> 02:04:55,019
the episode guide right like go to well

2142
02:04:51,390 --> 02:04:57,030
go to handy hero org and click watch if

2143
02:04:55,020 --> 02:04:58,860
you go down here there's like a previous

2144
02:04:57,029 --> 02:05:00,750
episode thing and you know look for

2145
02:04:58,859 --> 02:05:03,239
stuff you want do you want to know about

2146
02:05:00,750 --> 02:05:06,930
like scaling or do you want to know

2147
02:05:03,239 --> 02:05:13,979
about Fourier transform do you want to

2148
02:05:06,930 --> 02:05:15,780
know about GL and then when you find

2149
02:05:13,979 --> 02:05:19,439
something you want like click on it

2150
02:05:15,779 --> 02:05:21,599
right and and watch it that's why we

2151
02:05:19,439 --> 02:05:23,309
have this episode guide it's there to

2152
02:05:21,600 --> 02:05:27,170
allow you to watch the thing as you want

2153
02:05:23,310 --> 02:05:29,940
and not watch the things you don't want

2154
02:05:27,170 --> 02:05:31,380
but I wouldn't say that later things are

2155
02:05:29,939 --> 02:05:33,029
better than earlier things in any

2156
02:05:31,380 --> 02:05:39,750
particular way it's more like whether

2157
02:05:33,029 --> 02:05:41,399
the topic happens interest you are gonna

2158
02:05:39,750 --> 02:05:43,170
add an edit box to filter reduce the

2159
02:05:41,399 --> 02:05:48,299
visible lines for memory I don't know

2160
02:05:43,170 --> 02:05:49,829
probably not let's see thanks for the

2161
02:05:48,300 --> 02:05:52,230
image scaling explanation the pre stream

2162
02:05:49,829 --> 02:05:53,449
could you explain about zoom towards the

2163
02:05:52,229 --> 02:05:56,369
mouse position

2164
02:05:53,449 --> 02:05:57,929
well zooming towards the mouse position

2165
02:05:56,369 --> 02:06:00,239
doesn't really have anything to do with

2166
02:05:57,930 --> 02:06:04,230
image scaling that's just saying that

2167
02:06:00,239 --> 02:06:07,439
when you're going to display you know

2168
02:06:04,229 --> 02:06:10,529
anything there's a transform that you're

2169
02:06:07,439 --> 02:06:14,729
applying to it and that transform moves

2170
02:06:10,529 --> 02:06:17,729
and scales it whenever you apply a scale

2171
02:06:14,729 --> 02:06:20,159
the scale will always be about the

2172
02:06:17,729 --> 02:06:23,039
origin of your coordinate system when I

2173
02:06:20,159 --> 02:06:25,800
multiply something by 3 it gets three

2174
02:06:23,039 --> 02:06:29,550
times further from the origin period

2175
02:06:25,800 --> 02:06:32,400
there is no other thing you can do so if

2176
02:06:29,550 --> 02:06:34,590
you want to scale an image and make it

2177
02:06:32,399 --> 02:06:35,579
appear to scale about some other point

2178
02:06:34,590 --> 02:06:37,230
then what

2179
02:06:35,579 --> 02:06:39,059
you're really talking about doing is in

2180
02:06:37,229 --> 02:06:40,889
addition to scaling the size of the

2181
02:06:39,060 --> 02:06:43,920
image which really doesn't mean anything

2182
02:06:40,890 --> 02:06:46,880
about its location you must also offset

2183
02:06:43,920 --> 02:06:50,250
the location you're drawing the image

2184
02:06:46,880 --> 02:06:51,659
such that it correctly centers it around

2185
02:06:50,250 --> 02:06:55,649
some point you're trying to scale around

2186
02:06:51,659 --> 02:06:58,109
right so the way to think about it is to

2187
02:06:55,649 --> 02:07:00,059
say in addition to seeing the size of my

2188
02:06:58,109 --> 02:07:03,059
image by three I need to take the

2189
02:07:00,060 --> 02:07:06,570
location I'm drawing the image take the

2190
02:07:03,060 --> 02:07:08,789
mouse pointer and say well wherever the

2191
02:07:06,569 --> 02:07:11,969
image is relative to the mouse pointer I

2192
02:07:08,789 --> 02:07:14,909
need to scale that offset by three and

2193
02:07:11,970 --> 02:07:17,850
add that to the location I'm drawing the

2194
02:07:14,909 --> 02:07:21,170
image right because that difference now

2195
02:07:17,850 --> 02:07:23,700
needs to you know move the the transform

2196
02:07:21,170 --> 02:07:25,649
transform the image by that that amount

2197
02:07:23,699 --> 02:07:26,880
right I'm not explaining this very well

2198
02:07:25,649 --> 02:07:29,759
because it's kinda something we should

2199
02:07:26,880 --> 02:07:31,079
really do on the whiteboard but I think

2200
02:07:29,760 --> 02:07:34,880
I explained this stuff when we were

2201
02:07:31,079 --> 02:07:34,880
talking about transform centers before

2202
02:08:00,779 --> 02:08:05,948
so maybe something like this you know we

2203
02:08:04,000 --> 02:08:08,560
probably talked about this just the

2204
02:08:05,948 --> 02:08:10,210
concept that you know you've got two

2205
02:08:08,560 --> 02:08:11,890
things you've got an offset that you're

2206
02:08:10,210 --> 02:08:14,170
drawing things at and you've got a scale

2207
02:08:11,890 --> 02:08:16,270
and those things are interrelated when I

2208
02:08:14,170 --> 02:08:19,659
change the scale I need to change the

2209
02:08:16,270 --> 02:08:21,070
offset to make sure that I now take the

2210
02:08:19,659 --> 02:08:23,439
scale thing and put it where it needs to

2211
02:08:21,069 --> 02:08:27,069
be so you're scaling two things the size

2212
02:08:23,439 --> 02:08:30,669
and the offset right and scaling the

2213
02:08:27,069 --> 02:08:33,099
offset is going to have to account for

2214
02:08:30,670 --> 02:08:34,929
where you want the thing to be centered

2215
02:08:33,100 --> 02:08:37,030
another way to do it would be to say

2216
02:08:34,929 --> 02:08:40,390
write out the equation that says where a

2217
02:08:37,029 --> 02:08:43,380
particular point on the bitmap is when I

2218
02:08:40,390 --> 02:08:46,000
started my frame I want to know that my

2219
02:08:43,380 --> 02:08:48,219
before I started zooming I want to know

2220
02:08:46,000 --> 02:08:51,279
that where the mouse pointer is well the

2221
02:08:48,219 --> 02:08:55,029
mouse pointer right is at the Mouse

2222
02:08:51,279 --> 02:08:58,659
pointers location - the offset that I'm

2223
02:08:55,029 --> 02:09:00,519
drawing the bitmap at right that Delta

2224
02:08:58,659 --> 02:09:04,448
is how I get from the place I'm drawing

2225
02:09:00,520 --> 02:09:07,540
the bitmap to the mouse cursor right so

2226
02:09:04,448 --> 02:09:09,579
if I want the bitmap to now be drawn in

2227
02:09:07,539 --> 02:09:12,760
the same location relative to the mouse

2228
02:09:09,579 --> 02:09:14,829
cursor after I scale it I need to take

2229
02:09:12,760 --> 02:09:18,010
the I need to make the offset of the

2230
02:09:14,829 --> 02:09:20,140
bitmap be my current mouse location plus

2231
02:09:18,010 --> 02:09:24,820
the offset I was using from the previous

2232
02:09:20,140 --> 02:09:27,429
frame right divided by its scale and

2233
02:09:24,819 --> 02:09:29,979
then multiplied by the new scahill right

2234
02:09:27,429 --> 02:09:33,369
I need because I'm trying to like build

2235
02:09:29,979 --> 02:09:34,959
off of where it was before so there's a

2236
02:09:33,369 --> 02:09:36,550
lot of ways you could think about it I

2237
02:09:34,960 --> 02:09:39,250
feel like we've covered all this stuff

2238
02:09:36,550 --> 02:09:41,079
before if you really can't figure it out

2239
02:09:39,250 --> 02:09:43,390
we can do it some some time when I have

2240
02:09:41,079 --> 02:09:45,130
more time we could do a whiteboard

2241
02:09:43,390 --> 02:09:48,250
session or black board session in our

2242
02:09:45,130 --> 02:09:49,510
case where we show exactly what I'm

2243
02:09:48,250 --> 02:09:51,819
talking about but I feel like we covered

2244
02:09:49,510 --> 02:09:54,060
transform centers several times in the

2245
02:09:51,819 --> 02:09:54,059
past

2246
02:10:00,770 --> 02:10:04,740
the tiny part of the profiler you had so

2247
02:10:03,390 --> 02:10:06,240
you could click on a section and zoom

2248
02:10:04,739 --> 02:10:08,250
into that section to see more details

2249
02:10:06,239 --> 02:10:09,329
about a section do you see value for

2250
02:10:08,250 --> 02:10:12,090
that here

2251
02:10:09,329 --> 02:10:14,789
not really and the reason is because

2252
02:10:12,090 --> 02:10:17,489
with memory it's usually not so

2253
02:10:14,789 --> 02:10:19,289
important it's pretty obvious what's

2254
02:10:17,489 --> 02:10:24,779
going on most of the time whereas if

2255
02:10:19,289 --> 02:10:26,880
timing sometimes it's not right so I

2256
02:10:24,779 --> 02:10:30,960
guess what I would say is I got all the

2257
02:10:26,880 --> 02:10:33,329
information I pretty much needed from

2258
02:10:30,960 --> 02:10:34,939
from the view we've got you know I mean

2259
02:10:33,329 --> 02:10:37,739
just that

2260
02:10:34,939 --> 02:10:40,889
that tells me pretty much everything I

2261
02:10:37,739 --> 02:10:44,460
need to know you know I really don't

2262
02:10:40,890 --> 02:10:48,300
know it's I know what that is comprised

2263
02:10:44,460 --> 02:10:51,659
of it's not that complicated right and

2264
02:10:48,300 --> 02:10:55,710
so I could see in a system that was

2265
02:10:51,659 --> 02:10:57,539
sloppier about memory needing more ways

2266
02:10:55,710 --> 02:11:02,489
to like zoom in and gather stuff but

2267
02:10:57,539 --> 02:11:04,199
because we're pretty clean you know it

2268
02:11:02,489 --> 02:11:07,829
just it seems pretty straight for out

2269
02:11:04,199 --> 02:11:14,460
think we need to spend any more time

2270
02:11:07,829 --> 02:11:16,500
visually visualizing that stuff in the

2271
02:11:14,460 --> 02:11:18,300
thread tutorial you used a port to a

2272
02:11:16,500 --> 02:11:20,399
function I knew you want to keep it C

2273
02:11:18,300 --> 02:11:24,239
style but wasn't that cleaner to just

2274
02:11:20,399 --> 02:11:30,299
use a method inside of struct you'd

2275
02:11:24,239 --> 02:11:34,340
remove every pointer equals func so a

2276
02:11:30,300 --> 02:11:34,340
couple different things one is that

2277
02:11:34,729 --> 02:11:43,229
you'd have to define what you mean by

2278
02:11:36,779 --> 02:11:45,359
cleaner right I because what does it

2279
02:11:43,229 --> 02:11:50,159
mean for something to be quote-unquote

2280
02:11:45,359 --> 02:11:51,799
cleaner in this particular case if we go

2281
02:11:50,159 --> 02:11:54,989
look at the thing you're talking about

2282
02:11:51,800 --> 02:12:00,020
so you're talking about where we had I

2283
02:11:54,989 --> 02:12:02,309
don't know we call that work I think

2284
02:12:00,020 --> 02:12:04,480
yeah

2285
02:12:02,310 --> 02:12:07,390
so in here we had a thing where we said

2286
02:12:04,479 --> 02:12:09,219
look we have a thing that we put a Q in

2287
02:12:07,390 --> 02:12:11,560
here and what we want to do is we want

2288
02:12:09,220 --> 02:12:13,199
to say there's a callback we use where

2289
02:12:11,560 --> 02:12:16,390
we're going to say what we want to do

2290
02:12:13,199 --> 02:12:17,949
and then we have a thing where we have a

2291
02:12:16,390 --> 02:12:22,630
pointer some block of data that it's

2292
02:12:17,949 --> 02:12:26,279
going to do that on right and so what

2293
02:12:22,630 --> 02:12:31,569
you were saying is why isn't it a method

2294
02:12:26,279 --> 02:12:34,000
and the question is you know is is it

2295
02:12:31,569 --> 02:12:35,380
cleaner without a definition of cleaner

2296
02:12:34,000 --> 02:12:38,920
obviously I can't answer the question

2297
02:12:35,380 --> 02:12:41,170
but what I can show you is why I just

2298
02:12:38,920 --> 02:12:45,250
think stuff like that's a total waste of

2299
02:12:41,170 --> 02:12:47,949
time if you imagine and I don't know let

2300
02:12:45,250 --> 02:12:50,770
me find some like place that I can use

2301
02:12:47,949 --> 02:12:55,119
sort of as a scratch place to put this

2302
02:12:50,770 --> 02:12:58,120
in here if you imagine the two different

2303
02:12:55,119 --> 02:13:01,630
ways to do it here's the one that I did

2304
02:12:58,119 --> 02:13:05,019
and when you want to use this you

2305
02:13:01,630 --> 02:13:09,220
basically say you know whatever the

2306
02:13:05,020 --> 02:13:15,370
function is like Q work something like

2307
02:13:09,220 --> 02:13:18,940
this my work right I write one of these

2308
02:13:15,369 --> 02:13:22,059
things and then I say employment here

2309
02:13:18,939 --> 02:13:25,989
right when I want to add the work later

2310
02:13:22,060 --> 02:13:28,510
I say like add work to Q and I say the

2311
02:13:25,989 --> 02:13:31,300
my work pointer and I say what the data

2312
02:13:28,510 --> 02:13:37,260
is right and it adds one of these so

2313
02:13:31,300 --> 02:13:41,020
from the users perspective they do this

2314
02:13:37,260 --> 02:13:44,170
right and from my perspective that's

2315
02:13:41,020 --> 02:13:46,240
exactly what I wanted to do now if you

2316
02:13:44,170 --> 02:13:48,840
did it the other way you would end up

2317
02:13:46,239 --> 02:13:48,840
doing this

2318
02:13:58,618 --> 02:14:04,569
the C++ way is to say well we've got a

2319
02:14:02,079 --> 02:14:06,010
class and that's really just another

2320
02:14:04,569 --> 02:14:07,689
word for struck there's no difference

2321
02:14:06,010 --> 02:14:11,289
between those two things and so there's

2322
02:14:07,689 --> 02:14:13,689
the platform work you entry the platform

2323
02:14:11,289 --> 02:14:15,789
work queue entry has this thing in it

2324
02:14:13,689 --> 02:14:17,469
and I guess you know I don't know maybe

2325
02:14:15,789 --> 02:14:20,859
there's a void star data in here

2326
02:14:17,469 --> 02:14:22,719
something like that right as well so in

2327
02:14:20,859 --> 02:14:25,299
here we're gonna say well we're just

2328
02:14:22,719 --> 02:14:31,000
gonna call this function on the thing

2329
02:14:25,300 --> 02:14:34,329
right and this thing has to be virtual

2330
02:14:31,000 --> 02:14:37,389
now right because it's not virtual I

2331
02:14:34,329 --> 02:14:39,309
can't change it to be something else but

2332
02:14:37,389 --> 02:14:41,560
I don't have to do this anymore because

2333
02:14:39,310 --> 02:14:44,320
when I call the function it will get the

2334
02:14:41,560 --> 02:14:46,800
this pointer and so that you know

2335
02:14:44,319 --> 02:14:49,179
doesn't have to happen so that's fine

2336
02:14:46,800 --> 02:14:53,889
but you know off we go

2337
02:14:49,179 --> 02:14:57,399
and similarly this probably has to have

2338
02:14:53,889 --> 02:15:03,010
that in it or something right so it

2339
02:14:57,399 --> 02:15:05,079
would look like this I don't know how to

2340
02:15:03,010 --> 02:15:07,150
get for coder to not do that but either

2341
02:15:05,079 --> 02:15:10,448
way so it's gonna look something like

2342
02:15:07,149 --> 02:15:14,138
this right and then when I want to

2343
02:15:10,448 --> 02:15:16,509
actually do this thing here now what I

2344
02:15:14,139 --> 02:15:18,340
have to do is say well oh and I should

2345
02:15:16,510 --> 02:15:20,139
add the one thing that we have to do

2346
02:15:18,340 --> 02:15:26,550
here is whatever this data is I would

2347
02:15:20,139 --> 02:15:26,550
have to cast right to be fair so

2348
02:15:40,470 --> 02:15:47,409
something like that

2349
02:15:41,949 --> 02:15:49,029
right so here's the C++ way I make one

2350
02:15:47,409 --> 02:15:51,099
of these and now I have to derive from

2351
02:15:49,029 --> 02:15:54,389
that so I'm gonna say like all right

2352
02:15:51,100 --> 02:16:01,660
I've got the my data that's gonna be

2353
02:15:54,390 --> 02:16:03,280
inherited from one of these things it's

2354
02:16:01,659 --> 02:16:05,649
gonna have one of this thing one of

2355
02:16:03,279 --> 02:16:09,460
these in it right and then I'm gonna

2356
02:16:05,649 --> 02:16:11,199
have my index down in here right and

2357
02:16:09,460 --> 02:16:22,960
then I'm going to take this thing and

2358
02:16:11,199 --> 02:16:28,420
I'm going to implement it in here and I

2359
02:16:22,960 --> 02:16:32,290
do like that and you know maybe it looks

2360
02:16:28,420 --> 02:16:35,649
something like this makes sense and so

2361
02:16:32,290 --> 02:16:36,940
these are the two I assume if I'm

2362
02:16:35,649 --> 02:16:37,599
representing correctly what you're

2363
02:16:36,940 --> 02:16:39,309
asking

2364
02:16:37,599 --> 02:16:42,040
you're sort of asking why didn't I do

2365
02:16:39,308 --> 02:16:43,959
this version instead of doing this

2366
02:16:42,040 --> 02:16:48,370
version oh and then when I do add work

2367
02:16:43,959 --> 02:16:50,289
to queue I can't do this anymore so what

2368
02:16:48,370 --> 02:16:58,679
I have to do is instead something like

2369
02:16:50,290 --> 02:16:58,679
this right

2370
02:16:59,328 --> 02:17:09,779
makes sense so why prefer one of these

2371
02:17:05,218 --> 02:17:13,198
to the other and let me also put users

2372
02:17:09,779 --> 02:17:14,699
perspective in here and you can kind of

2373
02:17:13,199 --> 02:17:17,789
see the difference between the two so

2374
02:17:14,699 --> 02:17:23,279
here's my one and here's the the other

2375
02:17:17,789 --> 02:17:26,039
one right I and you know is there a good

2376
02:17:23,279 --> 02:17:29,760
reason to prefer one or the other

2377
02:17:26,039 --> 02:17:33,449
etc etc well the first thing that you'll

2378
02:17:29,760 --> 02:17:35,779
notice about these two is the function

2379
02:17:33,449 --> 02:17:40,828
and the data have to be defined together

2380
02:17:35,779 --> 02:17:44,099
right so let's suppose that the thing

2381
02:17:40,828 --> 02:17:45,888
that I'm trying to do work on is already

2382
02:17:44,099 --> 02:17:48,869
defined in my system somewhere

2383
02:17:45,888 --> 02:17:52,379
somebody's using it right it's a real

2384
02:17:48,869 --> 02:17:54,899
thing let's say just for sake of an

2385
02:17:52,379 --> 02:17:58,288
argument that the thing is one of these

2386
02:17:54,898 --> 02:18:04,590
I want to do some processing on an HHA

2387
02:17:58,289 --> 02:18:09,479
asset right so what would I do in both

2388
02:18:04,590 --> 02:18:12,630
systems in my system you literally do

2389
02:18:09,478 --> 02:18:15,750
this call it changes not at all instead

2390
02:18:12,629 --> 02:18:20,488
of my data you just pass one of these so

2391
02:18:15,750 --> 02:18:24,599
I would just say HSA asset data you know

2392
02:18:20,488 --> 02:18:26,218
the data that's it it just works in fact

2393
02:18:24,599 --> 02:18:29,670
let me write that out separately so we

2394
02:18:26,218 --> 02:18:33,709
can see so in my version I've got an HSA

2395
02:18:29,670 --> 02:18:37,109
asset pointer you know existing asset

2396
02:18:33,709 --> 02:18:43,288
and here I do ad work to queue my work

2397
02:18:37,109 --> 02:18:46,969
existing asset done I didn't have to do

2398
02:18:43,289 --> 02:18:53,159
anything if I come to the C++ version

2399
02:18:46,968 --> 02:18:56,669
it's like okay now how do I do this well

2400
02:18:53,158 --> 02:18:59,609
I can't go add a virtual function

2401
02:18:56,670 --> 02:19:01,920
pointer to this thing because it's

2402
02:18:59,609 --> 02:19:03,689
something that's stored in a file like I

2403
02:19:01,920 --> 02:19:05,460
can't add a virtual function table

2404
02:19:03,689 --> 02:19:09,389
pointer to it and be a complete disaster

2405
02:19:05,459 --> 02:19:11,308
right so what I have to do to implement

2406
02:19:09,388 --> 02:19:12,058
this thing that took one line of code

2407
02:19:11,308 --> 02:19:14,938
for me

2408
02:19:12,058 --> 02:19:18,568
in my version I now have to do this

2409
02:19:14,939 --> 02:19:21,630
ridiculous garbage make a new thing

2410
02:19:18,568 --> 02:19:24,448
called MyData - it also derives from

2411
02:19:21,629 --> 02:19:27,268
public you work entry it also has to

2412
02:19:24,449 --> 02:19:30,149
define this function thing again like I

2413
02:19:27,269 --> 02:19:38,790
do every time and now I have to put the

2414
02:19:30,148 --> 02:19:46,978
planer in here then I can do ad work to

2415
02:19:38,790 --> 02:20:00,750
queue right actually I have to do this I

2416
02:19:46,978 --> 02:20:02,908
think about it so you know you tell me

2417
02:20:00,750 --> 02:20:05,189
do you want to write these two lines of

2418
02:20:02,908 --> 02:20:07,618
code actually it's not even that's the

2419
02:20:05,189 --> 02:20:09,898
that's the input to the function so

2420
02:20:07,619 --> 02:20:12,319
actually do you want to write that line

2421
02:20:09,898 --> 02:20:18,090
of code or do you want to write that

2422
02:20:12,318 --> 02:20:21,420
every time right now let's make it even

2423
02:20:18,090 --> 02:20:24,238
more fun I want to operate on this piece

2424
02:20:21,420 --> 02:20:28,590
of data still but I want to do something

2425
02:20:24,238 --> 02:20:31,618
different well in mind it's another one

2426
02:20:28,590 --> 02:20:33,869
line of code I just pass a different

2427
02:20:31,619 --> 02:20:39,210
function right

2428
02:20:33,869 --> 02:20:41,729
oh but in the C++ version not so much I

2429
02:20:39,209 --> 02:20:44,448
get to duplicate this entire set of

2430
02:20:41,728 --> 02:20:47,608
things again and create my data three

2431
02:20:44,449 --> 02:20:55,560
for having some other function here that

2432
02:20:47,609 --> 02:20:58,800
does something different right and in

2433
02:20:55,559 --> 02:21:01,019
case you're wondering this is why C++

2434
02:20:58,799 --> 02:21:04,259
code bases are like billions of lines of

2435
02:21:01,020 --> 02:21:08,430
code and do nothing right is because

2436
02:21:04,260 --> 02:21:10,439
it's just a typing festival over and

2437
02:21:08,430 --> 02:21:14,729
over and over and over and over and over

2438
02:21:10,439 --> 02:21:19,979
and over again right and so then you

2439
02:21:14,728 --> 02:21:21,840
know for reasons I couldn't fathom the

2440
02:21:19,978 --> 02:21:23,608
way they try to attack these problems

2441
02:21:21,840 --> 02:21:24,851
rather than just recognizing that you

2442
02:21:23,609 --> 02:21:27,610
just want to do this

2443
02:21:24,851 --> 02:21:30,131
it should just you should just try and

2444
02:21:27,610 --> 02:21:31,631
make it nice and concise to do that are

2445
02:21:30,130 --> 02:21:35,560
there a few improvements we could make

2446
02:21:31,630 --> 02:21:37,470
is they add like all these additional

2447
02:21:35,560 --> 02:21:40,779
ridiculous things like lambdas and

2448
02:21:37,470 --> 02:21:43,810
standard coal and coal and garbage to

2449
02:21:40,780 --> 02:21:47,681
try and make this which just doesn't

2450
02:21:43,810 --> 02:21:49,751
work less onerous right and they'll be

2451
02:21:47,681 --> 02:21:53,950
like okay well maybe we template eyes

2452
02:21:49,751 --> 02:21:56,110
the work class on like what the function

2453
02:21:53,950 --> 02:21:58,511
is and then we wrap the function and

2454
02:21:56,110 --> 02:22:02,771
then thing and you're just like it

2455
02:21:58,511 --> 02:22:05,110
already worked the thing before like we

2456
02:22:02,771 --> 02:22:07,631
already worked why are you adding all

2457
02:22:05,110 --> 02:22:11,831
this stuff and best-case scenario you

2458
02:22:07,630 --> 02:22:14,680
end up in C++ seventeen getting back to

2459
02:22:11,831 --> 02:22:17,771
something that's almost this good but

2460
02:22:14,681 --> 02:22:20,291
usually not it is like all this other

2461
02:22:17,771 --> 02:22:21,791
standard library garbage with like all

2462
02:22:20,290 --> 02:22:23,739
these templates getting expanded

2463
02:22:21,790 --> 02:22:28,270
secretly and you're just like why did

2464
02:22:23,739 --> 02:22:30,460
you do that why would you do that you'd

2465
02:22:28,271 --> 02:22:33,341
massively overcomplicated your language

2466
02:22:30,460 --> 02:22:34,449
your code and the work the compiler

2467
02:22:33,341 --> 02:22:36,370
asked to do to produce something

2468
02:22:34,450 --> 02:22:40,721
reasonable when you just have the answer

2469
02:22:36,370 --> 02:22:43,601
to begin with it was right it's right

2470
02:22:40,720 --> 02:22:45,640
there so I just write the thing that

2471
02:22:43,601 --> 02:22:49,060
actually does what the CPU does and that

2472
02:22:45,640 --> 02:22:51,310
usually is the best way C++ is about

2473
02:22:49,060 --> 02:22:53,649
arbitrary syntactic garbage that doesn't

2474
02:22:51,310 --> 02:22:57,390
do anything and then constantly trying

2475
02:22:53,649 --> 02:22:57,390
to fight your way back to normal right

2476
02:22:58,450 --> 02:23:01,519
[Music]

2477
02:23:01,771 --> 02:23:07,391
and it's just ridiculous don't go here

2478
02:23:05,649 --> 02:23:10,690
and then try to rap your way back to

2479
02:23:07,390 --> 02:23:15,399
here just do this thing to begin with

2480
02:23:10,690 --> 02:23:17,890
and you're fine right I don't know it's

2481
02:23:15,399 --> 02:23:20,130
nuts people just don't know how to

2482
02:23:17,890 --> 02:23:20,130
program

2483
02:23:43,129 --> 02:23:48,600
the hunter says what about CEO Cisneros

2484
02:23:45,479 --> 02:23:52,850
in that case like I said why what do you

2485
02:23:48,601 --> 02:23:56,221
need them for like my version just works

2486
02:23:52,851 --> 02:23:58,290
you're just adding unnecessary language

2487
02:23:56,220 --> 02:24:01,109
features that complicate the work the

2488
02:23:58,290 --> 02:24:04,130
compiler has to do in order to get back

2489
02:24:01,110 --> 02:24:07,650
to the same freakin thing which is just

2490
02:24:04,129 --> 02:24:10,439
call a function pointer that's all you

2491
02:24:07,649 --> 02:24:15,629
needed it's one line of code right

2492
02:24:10,440 --> 02:24:18,149
and so like C++ is just it's an orgy of

2493
02:24:15,629 --> 02:24:19,890
features that the best case scenarios

2494
02:24:18,149 --> 02:24:22,140
that get you back to the thing you just

2495
02:24:19,890 --> 02:24:28,050
would have done in C and usually they

2496
02:24:22,140 --> 02:24:30,629
don't usually don't even get back there

2497
02:24:28,050 --> 02:24:32,609
when you actually go like look at what

2498
02:24:30,629 --> 02:24:35,189
the compiler generated it struggled so

2499
02:24:32,610 --> 02:24:37,310
hard to produce something reasonably but

2500
02:24:35,190 --> 02:24:39,840
like there's cruft in your code now

2501
02:24:37,310 --> 02:24:42,209
because it couldn't quite figure out how

2502
02:24:39,840 --> 02:24:44,700
to optimize everything out that was all

2503
02:24:42,209 --> 02:24:50,270
the C nonsense that C++ nonsense that

2504
02:24:44,700 --> 02:24:50,271
they added in there right so

2505
02:24:53,210 --> 02:24:56,529
so off you go

2506
02:25:14,139 --> 02:25:20,119
let's see Amir's I meant game memory dot

2507
02:25:17,389 --> 02:25:21,680
platform at entry equals win32 add entry

2508
02:25:20,120 --> 02:25:25,579
and game memory platform complete all

2509
02:25:21,680 --> 02:25:27,770
work oh well that's because I I keep a

2510
02:25:25,579 --> 02:25:33,409
boundary so that anything that calls the

2511
02:25:27,770 --> 02:25:37,060
platform layer calls your pointer that's

2512
02:25:33,409 --> 02:25:37,059
just a separation of the platform layer

2513
02:25:38,680 --> 02:25:45,979
it's just a preference I like to keep

2514
02:25:42,079 --> 02:25:47,510
that stuff separate it that way but you

2515
02:25:45,978 --> 02:25:51,469
don't have to do that I mean if you

2516
02:25:47,510 --> 02:25:56,270
don't want to they don't change so you

2517
02:25:51,469 --> 02:25:58,879
could Hardwell them in there it makes a

2518
02:25:56,270 --> 02:26:00,909
lot easier to do stuff like switching

2519
02:25:58,879 --> 02:26:07,159
things out under the hood but you know

2520
02:26:00,909 --> 02:26:12,829
and it like the plot the hot code

2521
02:26:07,159 --> 02:26:14,809
reloading we that part needs to have

2522
02:26:12,829 --> 02:26:16,309
those function pointers work so you

2523
02:26:14,809 --> 02:26:19,539
can't really make the member functions

2524
02:26:16,309 --> 02:26:21,949
because we call the wrong thing right

2525
02:26:19,540 --> 02:26:23,210
but yeah if you don't care about hot co2

2526
02:26:21,950 --> 02:26:25,579
reloading and you don't care about

2527
02:26:23,209 --> 02:26:27,439
having the platform layer B and the game

2528
02:26:25,579 --> 02:26:32,809
B swappable like that then you don't

2529
02:26:27,440 --> 02:26:35,090
need those pointers my nephew started

2530
02:26:32,809 --> 02:26:36,769
the computer science a year ago and when

2531
02:26:35,090 --> 02:26:39,079
I saw the educational materials they are

2532
02:26:36,770 --> 02:26:40,970
not good and professors mostly teach toy

2533
02:26:39,079 --> 02:26:42,289
examples I think there's a problem with

2534
02:26:40,969 --> 02:26:43,219
computer science education do you know

2535
02:26:42,290 --> 02:26:44,720
it can be improved

2536
02:26:43,219 --> 02:26:46,459
maybe the production programmers should

2537
02:26:44,719 --> 02:26:48,139
teach the program courses yeah I

2538
02:26:46,459 --> 02:26:53,959
actually said what I thought that was a

2539
02:26:48,139 --> 02:26:56,090
problem yesterday and really it's just

2540
02:26:53,959 --> 02:27:00,169
that programming is like a trade

2541
02:26:56,090 --> 02:27:03,170
discipline you know and universities are

2542
02:27:00,170 --> 02:27:04,579
not where you go to learn trades you

2543
02:27:03,170 --> 02:27:05,899
know you wouldn't go to university to

2544
02:27:04,579 --> 02:27:09,079
learn to be a blacksmith I think it's

2545
02:27:05,899 --> 02:27:11,119
the example I gave you study under a

2546
02:27:09,079 --> 02:27:12,889
blacksmith and the same is true of

2547
02:27:11,120 --> 02:27:14,810
programming you don't go to university

2548
02:27:12,889 --> 02:27:16,069
to learn how to program you study under

2549
02:27:14,809 --> 02:27:16,930
programmers who actually know what

2550
02:27:16,069 --> 02:27:19,129
they're doing

2551
02:27:16,930 --> 02:27:21,559
unfortunately that's not how we have

2552
02:27:19,129 --> 02:27:23,839
produced our system and it's true for a

2553
02:27:21,559 --> 02:27:25,399
lot of things nowadays universities are

2554
02:27:23,840 --> 02:27:27,290
like the worst place to learn how to do

2555
02:27:25,399 --> 02:27:28,760
something in my eye

2556
02:27:27,290 --> 02:27:30,140
because they're mostly filled with

2557
02:27:28,760 --> 02:27:33,469
people who don't know how to do things

2558
02:27:30,139 --> 02:27:35,299
in production right they they're filled

2559
02:27:33,469 --> 02:27:40,099
with people who study things and that's

2560
02:27:35,299 --> 02:27:42,019
different you know the notion that you

2561
02:27:40,100 --> 02:27:44,510
go to university to study literature

2562
02:27:42,020 --> 02:27:45,739
makes sense to me the notion that you go

2563
02:27:44,510 --> 02:27:48,648
to university to learn how to be a

2564
02:27:45,739 --> 02:27:51,010
writer makes no sense to me it's never

2565
02:27:48,648 --> 02:27:55,148
been that way and shouldn't be that way

2566
02:27:51,010 --> 02:27:58,639
University is for study not for craft

2567
02:27:55,148 --> 02:28:01,579
but we've combined those two now and it

2568
02:27:58,639 --> 02:28:06,219
makes no sense because most professors

2569
02:28:01,579 --> 02:28:09,709
in most disciplines aren't experts at

2570
02:28:06,219 --> 02:28:12,260
crafting so if you look at the world's

2571
02:28:09,709 --> 02:28:19,398
best programmers none of them are

2572
02:28:12,260 --> 02:28:21,409
professors I would say so we've gotten

2573
02:28:19,398 --> 02:28:23,420
ourselves into this really bad system

2574
02:28:21,409 --> 02:28:24,859
where instead of computer science

2575
02:28:23,420 --> 02:28:27,109
professors being people who study

2576
02:28:24,859 --> 02:28:29,120
computer science and you publish things

2577
02:28:27,109 --> 02:28:30,710
about computer science and if you want

2578
02:28:29,120 --> 02:28:33,649
to know how to do those sorts of

2579
02:28:30,709 --> 02:28:37,188
activities like sort of academic study

2580
02:28:33,648 --> 02:28:38,299
you go study under them instead we have

2581
02:28:37,189 --> 02:28:39,590
this weird notion that if you're going

2582
02:28:38,299 --> 02:28:43,219
to be a production programmer you go

2583
02:28:39,590 --> 02:28:46,239
there but why those are two different

2584
02:28:43,219 --> 02:28:49,159
disciplines you know studying Turing's

2585
02:28:46,239 --> 02:28:51,199
you know construction of a machine and

2586
02:28:49,159 --> 02:28:53,529
is that the right way to think about

2587
02:28:51,200 --> 02:28:56,600
compute computing and is church's thesis

2588
02:28:53,529 --> 02:28:58,250
still you know the correct way to talk

2589
02:28:56,600 --> 02:29:00,979
about whether or not we can compute

2590
02:28:58,250 --> 02:29:03,829
things and those are important things to

2591
02:29:00,978 --> 02:29:06,469
study and they're abstract concepts that

2592
02:29:03,829 --> 02:29:08,750
people need to be working on but is that

2593
02:29:06,469 --> 02:29:11,959
the are the people who are most

2594
02:29:08,750 --> 02:29:14,239
knowledgeable and most well-versed in

2595
02:29:11,959 --> 02:29:16,728
thinking about those problems the people

2596
02:29:14,239 --> 02:29:20,090
that you want to learn how to make a

2597
02:29:16,728 --> 02:29:22,849
renderer absolutely not right they're

2598
02:29:20,090 --> 02:29:25,059
totally separate disciplines that can

2599
02:29:22,850 --> 02:29:28,640
inform each other but that are not

2600
02:29:25,059 --> 02:29:34,329
related in terms of what you do on a day

2601
02:29:28,639 --> 02:29:37,068
to day basis right and so I don't know

2602
02:29:34,329 --> 02:29:39,859
why we got ourselves in this situation

2603
02:29:37,068 --> 02:29:40,430
both in computing and everywhere else

2604
02:29:39,859 --> 02:29:42,770
it's

2605
02:29:40,430 --> 02:29:45,020
it's just it's a huge epidemic in the

2606
02:29:42,770 --> 02:29:46,819
u.s. people going to university as

2607
02:29:45,020 --> 02:29:49,909
something they have to do to get a job

2608
02:29:46,818 --> 02:29:51,978
but those four years could have been way

2609
02:29:49,909 --> 02:29:53,420
better spent studying with someone in a

2610
02:29:51,978 --> 02:29:55,278
practical setting and they would have

2611
02:29:53,420 --> 02:29:59,120
been way better at their job when they

2612
02:29:55,279 --> 02:30:01,100
got out right and so we lost this notion

2613
02:29:59,120 --> 02:30:06,189
that university is just for academics

2614
02:30:01,100 --> 02:30:06,189
and that training is a different thing

2615
02:30:07,478 --> 02:30:13,549
how do you fix it good luck right that's

2616
02:30:11,120 --> 02:30:16,850
a social engineering problem way outside

2617
02:30:13,549 --> 02:30:19,778
of my area expertise and I can't help

2618
02:30:16,850 --> 02:30:19,779
you right

2619
02:30:25,068 --> 02:30:30,299
we'll take the last couple here with

2620
02:30:28,949 --> 02:30:31,680
their also begin issuing seal sauce if

2621
02:30:30,299 --> 02:30:33,358
you wanted to have it being a cue and

2622
02:30:31,680 --> 02:30:35,880
some other thing perhaps would you need

2623
02:30:33,359 --> 02:30:37,290
to inherit from two or more things it

2624
02:30:35,879 --> 02:30:40,858
depends how you want to implement it

2625
02:30:37,290 --> 02:30:44,580
usually I think C++ programmers if I had

2626
02:30:40,859 --> 02:30:47,970
to like you know put on their hat for a

2627
02:30:44,579 --> 02:30:50,189
second would not generally these days

2628
02:30:47,969 --> 02:30:52,049
say inherit from two or more things they

2629
02:30:50,189 --> 02:30:57,270
would say put a pointer in one of them

2630
02:30:52,049 --> 02:30:59,398
to point to the other thing you know but

2631
02:30:57,270 --> 02:31:00,960
yeah you'd have to ask a C++ programmer

2632
02:30:59,398 --> 02:31:02,760
and these days again they'd give you

2633
02:31:00,959 --> 02:31:04,648
some ridiculous answer with all kinds of

2634
02:31:02,760 --> 02:31:07,318
weird like standard function wrapping

2635
02:31:04,648 --> 02:31:09,409
lambda nonsense that you know would just

2636
02:31:07,318 --> 02:31:14,488
be yet another super complicated way to

2637
02:31:09,409 --> 02:31:16,228
call a function pointer date p00

2638
02:31:14,488 --> 02:31:17,698
is the C++ way a lot of Hoops coming

2639
02:31:16,228 --> 02:31:20,010
just to avoid the cast from the void

2640
02:31:17,699 --> 02:31:21,720
start of a datatype that you need to do

2641
02:31:20,010 --> 02:31:23,520
in the C function pointer method did the

2642
02:31:21,719 --> 02:31:27,090
C was a committee reason that it's more

2643
02:31:23,520 --> 02:31:29,880
type safe you know the C posis Committee

2644
02:31:27,090 --> 02:31:32,460
doesn't really reason about things I'm

2645
02:31:29,879 --> 02:31:34,829
sure they had some pedantic nonsense

2646
02:31:32,459 --> 02:31:37,648
that they think is a way you're supposed

2647
02:31:34,829 --> 02:31:38,909
to think about things and not wanting to

2648
02:31:37,648 --> 02:31:45,059
cast a pointer it may have been one of

2649
02:31:38,909 --> 02:31:47,779
them but you know who knows all right

2650
02:31:45,059 --> 02:31:47,778
I'm gonna wrap it up

2651
02:31:59,420 --> 02:32:03,469
okay thanks everyone for joining me

2652
02:32:02,180 --> 02:32:04,850
through most of the handmade here it's

2653
02:32:03,469 --> 02:32:06,228
been pleasure cooking with you as always

2654
02:32:04,850 --> 02:32:08,689
if you would like to follow along the

2655
02:32:06,228 --> 02:32:10,488
series at home you always can pre-order

2656
02:32:08,689 --> 02:32:11,870
the game on handmade here org and it

2657
02:32:10,488 --> 02:32:14,719
comes to the source code so you can

2658
02:32:11,870 --> 02:32:17,750
follow along with it in the privacy of

2659
02:32:14,719 --> 02:32:20,059
your very own editor that's it for this

2660
02:32:17,750 --> 02:32:22,068
week I'll be back here next week when we

2661
02:32:20,059 --> 02:32:23,869
may add scrolling to the memory window

2662
02:32:22,068 --> 02:32:25,369
or we may just be lazy and not do that

2663
02:32:23,870 --> 02:32:27,199
right now and move on to the entity

2664
02:32:25,370 --> 02:32:29,180
stuff that I wanted to work on we'll see

2665
02:32:27,199 --> 02:32:30,680
that'll be my call until then have fun

2666
02:32:29,180 --> 02:32:31,158
programming I'll see everyone on the

2667
02:32:30,680 --> 02:32:33,970
Internet

2668
02:32:31,158 --> 02:32:33,969
take it as everybody

