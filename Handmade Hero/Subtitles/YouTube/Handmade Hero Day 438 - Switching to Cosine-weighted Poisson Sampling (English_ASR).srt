1
00:00:00,199 --> 00:00:04,379
hello everyone and welcome to handmade

2
00:00:02,700 --> 00:00:06,870
Hero the show recode a complete game

3
00:00:04,379 --> 00:00:12,570
live on stream I am

4
00:00:06,870 --> 00:00:14,400
well I'm very allergy as you can see but

5
00:00:12,570 --> 00:00:15,690
we have some relatively straightforward

6
00:00:14,400 --> 00:00:19,618
stuff to do today so hopefully it won't

7
00:00:15,689 --> 00:00:22,710
be a problem we can basically just start

8
00:00:19,618 --> 00:00:24,660
where we left off yesterday and try to

9
00:00:22,710 --> 00:00:28,170
make our lighting system use precomputed

10
00:00:24,660 --> 00:00:30,149
templates for figuring out what we want

11
00:00:28,170 --> 00:00:33,480
to do with our ray casting from any

12
00:00:30,149 --> 00:00:35,129
individual ray cast sample point and

13
00:00:33,479 --> 00:00:37,409
also ray casting seems to be in the news

14
00:00:35,130 --> 00:00:41,359
a bit lately I don't know if you saw but

15
00:00:37,409 --> 00:00:43,890
there's a lot of talk about pushing

16
00:00:41,359 --> 00:00:46,829
future GPU development directions

17
00:00:43,890 --> 00:00:49,890
towards a ray tracing future which as I

18
00:00:46,829 --> 00:00:52,649
sort of mentioned yesterday I think in

19
00:00:49,890 --> 00:00:55,859
the pre stream I am very much in favor

20
00:00:52,649 --> 00:00:57,660
of I like ray tracing I don't have

21
00:00:55,859 --> 00:00:59,869
strong opinions about whether ray

22
00:00:57,659 --> 00:01:02,759
tracing or rasterization is the correct

23
00:00:59,869 --> 00:01:04,890
way to do things or anything like that I

24
00:01:02,759 --> 00:01:08,069
just like ray tracing better it feels

25
00:01:04,890 --> 00:01:11,400
cleaner to me and easier to experiment

26
00:01:08,069 --> 00:01:15,029
with and I've I've never really liked

27
00:01:11,400 --> 00:01:16,939
the sort of large number of stages you

28
00:01:15,030 --> 00:01:18,840
go through when you try to make a

29
00:01:16,938 --> 00:01:20,849
rasterizer to try and approximate

30
00:01:18,840 --> 00:01:23,280
lighting so I'm pretty happy about the

31
00:01:20,849 --> 00:01:24,569
fact that people are you know trying to

32
00:01:23,280 --> 00:01:28,710
start a push towards the ray tracing

33
00:01:24,569 --> 00:01:33,149
world I don't know if we're gonna get

34
00:01:28,709 --> 00:01:35,069
there but you know I I want us to get

35
00:01:33,150 --> 00:01:37,189
there I guess is what I'd say so you

36
00:01:35,069 --> 00:01:41,368
know it's kind of exciting to see people

37
00:01:37,188 --> 00:01:44,398
giving it a shot and I think it's a good

38
00:01:41,368 --> 00:01:46,590
direction for GPU vendors because at the

39
00:01:44,399 --> 00:01:47,640
end of the day ray tracing paralyzes

40
00:01:46,590 --> 00:01:50,579
pretty darn well

41
00:01:47,640 --> 00:01:52,530
and so you know they're not really in a

42
00:01:50,578 --> 00:01:56,959
position to be able to up their clock

43
00:01:52,530 --> 00:01:59,820
rates much right and so serialized

44
00:01:56,959 --> 00:02:02,039
rasterization kinds of stuff with lots

45
00:01:59,819 --> 00:02:03,239
of like pre doing lighting that had and

46
00:02:02,040 --> 00:02:05,070
then you have to wait for the next stage

47
00:02:03,239 --> 00:02:07,739
to do something that's our stuff I feel

48
00:02:05,069 --> 00:02:10,859
like just hay stamping down gigantic

49
00:02:07,739 --> 00:02:12,810
sets of ray tracing cores may not be a

50
00:02:10,860 --> 00:02:13,140
bad idea hardware wise you know maybe

51
00:02:12,810 --> 00:02:14,550
we're

52
00:02:13,139 --> 00:02:17,099
at that point where that's really what

53
00:02:14,550 --> 00:02:18,780
we should be doing I don't know totally

54
00:02:17,099 --> 00:02:21,509
outside of my area of expertise I have

55
00:02:18,780 --> 00:02:23,699
no idea but point being I'm kind of

56
00:02:21,509 --> 00:02:25,379
happy that people are looking into that

57
00:02:23,699 --> 00:02:27,568
and maybe we'll see some fruits of that

58
00:02:25,379 --> 00:02:31,349
down the line for now I'm just happy

59
00:02:27,568 --> 00:02:33,719
that we have our own raytracer for doing

60
00:02:31,349 --> 00:02:35,669
our lighting and I want to make it a

61
00:02:33,719 --> 00:02:39,569
little bit better so that's exactly what

62
00:02:35,669 --> 00:02:41,579
we're doing today is trying to come up

63
00:02:39,569 --> 00:02:43,500
with some better sampling schemes we've

64
00:02:41,580 --> 00:02:47,219
been playing around that for a week or

65
00:02:43,500 --> 00:02:50,610
two the how we want to cast Rays out of

66
00:02:47,219 --> 00:02:51,840
a point part of the problem and that's

67
00:02:50,610 --> 00:02:54,630
what I'd like to start looking at today

68
00:02:51,840 --> 00:02:57,330
so a couple things we don't know at the

69
00:02:54,629 --> 00:02:59,280
moment and we got a look at them all

70
00:02:57,330 --> 00:03:02,750
today so first of all just at the end of

71
00:02:59,280 --> 00:03:05,879
last dream I change to using a template

72
00:03:02,750 --> 00:03:07,769
for doing our sampling and it looks like

73
00:03:05,879 --> 00:03:09,900
it kind of broke things a little bit so

74
00:03:07,769 --> 00:03:13,469
I think we've got either some errors or

75
00:03:09,900 --> 00:03:15,719
well we don't really know I I don't know

76
00:03:13,469 --> 00:03:18,359
exactly what's going on all I know is I

77
00:03:15,719 --> 00:03:21,810
don't think we have a completely clean

78
00:03:18,360 --> 00:03:23,820
result here with that switchover now

79
00:03:21,810 --> 00:03:26,099
that could be it could be that we've

80
00:03:23,819 --> 00:03:27,840
implemented just fine and our pattern is

81
00:03:26,099 --> 00:03:30,389
is bad because we haven't actually put

82
00:03:27,840 --> 00:03:32,789
in a real pattern yet and maybe the fact

83
00:03:30,389 --> 00:03:34,589
that we did a randomized pattern maybe

84
00:03:32,789 --> 00:03:36,590
this isn't enough randomized patterns to

85
00:03:34,590 --> 00:03:39,840
actually even out the light or who knows

86
00:03:36,590 --> 00:03:42,930
but it doesn't look the same as it

87
00:03:39,840 --> 00:03:45,450
looked before when we move around and it

88
00:03:42,930 --> 00:03:47,400
should look roughly the same so we just

89
00:03:45,449 --> 00:03:50,039
we don't really know exactly what's

90
00:03:47,400 --> 00:03:51,659
going on there so we basically have a

91
00:03:50,039 --> 00:03:54,689
couple things that we want to accomplish

92
00:03:51,659 --> 00:03:56,280
going forwards number one is we want to

93
00:03:54,689 --> 00:03:58,439
go ahead and put some real patterns in

94
00:03:56,280 --> 00:04:00,000
number two is we want to introduce some

95
00:03:58,439 --> 00:04:02,370
debugging so that we can verify that

96
00:04:00,000 --> 00:04:04,889
these patterns are being applied the way

97
00:04:02,370 --> 00:04:06,120
we think they are because obviously

98
00:04:04,889 --> 00:04:10,018
there's plenty of things that can go

99
00:04:06,120 --> 00:04:12,269
wrong as part of this process and we

100
00:04:10,019 --> 00:04:14,430
don't know until we inspect a little bit

101
00:04:12,269 --> 00:04:16,439
more cleanly and figure that out like

102
00:04:14,430 --> 00:04:19,168
for example you can see right here like

103
00:04:16,439 --> 00:04:23,098
why is this not getting very much light

104
00:04:19,168 --> 00:04:24,750
right it just it just looks wrong and so

105
00:04:23,098 --> 00:04:26,180
I'm guessing that we've got some

106
00:04:24,750 --> 00:04:29,199
problems and we're going to

107
00:04:26,180 --> 00:04:33,680
a look at those problems in more detail

108
00:04:29,199 --> 00:04:36,889
so that's our job for today to start

109
00:04:33,680 --> 00:04:40,728
looking at that stuff and yeah and there

110
00:04:36,889 --> 00:04:43,939
we go so for starters the first thing

111
00:04:40,728 --> 00:04:46,159
that I want to do is I want to just go

112
00:04:43,939 --> 00:04:48,949
ahead and enable our debug line support

113
00:04:46,160 --> 00:04:51,500
again because that will allow me to draw

114
00:04:48,949 --> 00:04:53,419
where we're sampling and then what I'd

115
00:04:51,500 --> 00:04:56,060
like to do is just take a look at how

116
00:04:53,418 --> 00:04:58,490
those samples are working out so that we

117
00:04:56,060 --> 00:05:00,800
can you know get some opinion of of

118
00:04:58,490 --> 00:05:02,598
what's going on now if you remember how

119
00:05:00,800 --> 00:05:04,788
this used to work and you can see that

120
00:05:02,598 --> 00:05:06,699
this well you know what this this is

121
00:05:04,788 --> 00:05:09,098
something we can switch back on actually

122
00:05:06,699 --> 00:05:12,110
for those of you maybe missed last name

123
00:05:09,098 --> 00:05:13,668
so you can kind of see here here's what

124
00:05:12,110 --> 00:05:15,740
the lighting looks like when we were

125
00:05:13,668 --> 00:05:17,418
generating the random samples using the

126
00:05:15,740 --> 00:05:19,519
previous method which generates them in

127
00:05:17,418 --> 00:05:21,859
line so just at the time that we want to

128
00:05:19,519 --> 00:05:23,478
generate the random samples we generate

129
00:05:21,860 --> 00:05:25,400
them and you can see that the lighting

130
00:05:23,478 --> 00:05:27,139
looks pretty reasonable like it's a

131
00:05:25,399 --> 00:05:29,810
pretty reasonable approximation of the

132
00:05:27,139 --> 00:05:32,900
lighting to the scene it seems like to

133
00:05:29,810 --> 00:05:34,970
me you know that's just my my sort of

134
00:05:32,899 --> 00:05:36,379
like take on it is that this this you

135
00:05:34,970 --> 00:05:37,789
know isn't so bad and we haven't run any

136
00:05:36,379 --> 00:05:39,259
really rigorous testing on it or

137
00:05:37,788 --> 00:05:42,348
anything but it's it seems reasonable

138
00:05:39,259 --> 00:05:45,680
and then when we go in if we actually

139
00:05:42,348 --> 00:05:48,288
switch that if zero you can sort of see

140
00:05:45,680 --> 00:05:53,658
how the lighting changes there and it's

141
00:05:48,288 --> 00:05:56,418
not obviously super wrong but it does

142
00:05:53,658 --> 00:05:59,598
look you know it definitely just looks

143
00:05:56,418 --> 00:06:01,339
more incorrect than the version that was

144
00:05:59,598 --> 00:06:03,288
generating the randoms on the fly and

145
00:06:01,339 --> 00:06:06,769
that's just why I say I think we've got

146
00:06:03,288 --> 00:06:08,839
some bugs in there or at least if there

147
00:06:06,769 --> 00:06:10,310
aren't bugs we've got a problem with the

148
00:06:08,839 --> 00:06:13,279
way the random pattern was working and

149
00:06:10,310 --> 00:06:14,899
in it's it's yeah again it's less about

150
00:06:13,279 --> 00:06:17,418
knowing if the bug or not it's just

151
00:06:14,899 --> 00:06:20,508
noticing that so this is suspicious

152
00:06:17,418 --> 00:06:22,519
behavior and that just reinforces the

153
00:06:20,509 --> 00:06:24,259
fact to me that I want to see this I

154
00:06:22,519 --> 00:06:26,538
want to be able to visualize what's

155
00:06:24,259 --> 00:06:28,069
going on so that I can know what I'm

156
00:06:26,538 --> 00:06:30,949
looking at what is causing that

157
00:06:28,069 --> 00:06:33,259
particular effect to occur because I

158
00:06:30,949 --> 00:06:34,520
don't trust that it's reasonable it

159
00:06:33,259 --> 00:06:36,348
could turn out to be a totally

160
00:06:34,519 --> 00:06:37,699
reasonable it could turn out to just be

161
00:06:36,348 --> 00:06:38,389
a straight-up bug and we need to know

162
00:06:37,699 --> 00:06:39,959
which is which

163
00:06:38,389 --> 00:06:42,478
right

164
00:06:39,959 --> 00:06:45,089
okay so I want to re-enable this sort of

165
00:06:42,478 --> 00:06:49,050
situation and what this is is the thing

166
00:06:45,089 --> 00:06:51,418
that lets us draw our debug lines right

167
00:06:49,050 --> 00:06:54,120
and the problem is we kind of updated

168
00:06:51,418 --> 00:06:56,069
this code since we were drawing these

169
00:06:54,120 --> 00:06:58,288
debug lines so I need to extract the

170
00:06:56,069 --> 00:06:59,310
debug lines in a more straightforward

171
00:06:58,288 --> 00:07:01,259
way

172
00:06:59,310 --> 00:07:03,209
now hitbox at the moment is the only

173
00:07:01,259 --> 00:07:06,538
thing here that it's complaining about

174
00:07:03,209 --> 00:07:08,279
first that it's got T ray is another one

175
00:07:06,538 --> 00:07:10,740
right so we've got a couple of these

176
00:07:08,279 --> 00:07:12,418
things that we want to be able to access

177
00:07:10,740 --> 00:07:15,060
sort of individually and we need to

178
00:07:12,418 --> 00:07:16,409
figure out how to do that

179
00:07:15,060 --> 00:07:18,389
so let's take a look at how we're going

180
00:07:16,410 --> 00:07:20,580
to go about doing that so if I come back

181
00:07:18,389 --> 00:07:23,129
here and look at how we made our stuff

182
00:07:20,579 --> 00:07:25,829
for for wide you can see that we still

183
00:07:23,129 --> 00:07:27,810
have a tier a it's just for wide so what

184
00:07:25,829 --> 00:07:30,209
we should be able to do is access T ray

185
00:07:27,810 --> 00:07:32,848
by just extracting it from the Ray

186
00:07:30,209 --> 00:07:35,609
casting result and pull it loops and

187
00:07:32,848 --> 00:07:37,589
pulling out the sub ray of one of those

188
00:07:35,610 --> 00:07:40,348
so that's not a particularly hard one to

189
00:07:37,589 --> 00:07:41,638
get hitbox is really just the thing that

190
00:07:40,348 --> 00:07:44,310
was telling us whether or not this

191
00:07:41,639 --> 00:07:47,189
particular thing how to hit and so again

192
00:07:44,310 --> 00:07:51,598
that one is really just this so we can

193
00:07:47,189 --> 00:07:53,098
just do that where we look to see

194
00:07:51,598 --> 00:07:55,288
whether or not this thing got hit or not

195
00:07:53,098 --> 00:07:58,680
and then that replaces what we were

196
00:07:55,288 --> 00:08:00,418
doing here then finally the last thing

197
00:07:58,680 --> 00:08:01,709
if you notice from the compiler is we

198
00:08:00,418 --> 00:08:03,899
just don't know what direction this

199
00:08:01,709 --> 00:08:05,819
thing goes in but we can know that

200
00:08:03,899 --> 00:08:08,129
obviously right we can know what

201
00:08:05,819 --> 00:08:10,348
direction it goes in because we made a

202
00:08:08,129 --> 00:08:12,949
bundle of four directions that the thing

203
00:08:10,348 --> 00:08:16,110
goes in so this is really just a case of

204
00:08:12,949 --> 00:08:18,870
pulling out which whichever one of those

205
00:08:16,110 --> 00:08:20,908
we're on so we can just say hey why

206
00:08:18,870 --> 00:08:23,098
don't you give us out of the bundle of

207
00:08:20,908 --> 00:08:25,709
four that we made we have a thing

208
00:08:23,098 --> 00:08:27,569
already that extracts those when we find

209
00:08:25,709 --> 00:08:29,879
that we actually need them which is this

210
00:08:27,569 --> 00:08:32,069
get component call here and so that'll

211
00:08:29,879 --> 00:08:34,200
pull out the sample date so at that

212
00:08:32,070 --> 00:08:36,629
point then we are actually doing those

213
00:08:34,200 --> 00:08:38,579
debug lines those will now get updated

214
00:08:36,629 --> 00:08:40,288
which allows me to see exactly what I

215
00:08:38,578 --> 00:08:43,408
want to see which is where the samples

216
00:08:40,288 --> 00:08:46,139
are happening we also have the ability

217
00:08:43,408 --> 00:08:47,458
to set this debug point index and so the

218
00:08:46,139 --> 00:08:49,620
interesting thing about the Diego points

219
00:08:47,458 --> 00:08:51,539
if you remember we have this thing that

220
00:08:49,620 --> 00:08:54,959
sort of says hey where do I want to pick

221
00:08:51,539 --> 00:08:59,949
who do I want to pick for

222
00:08:54,958 --> 00:09:01,989
grabbing those debug it paces us to pick

223
00:08:59,950 --> 00:09:05,320
a point in the world and say show us the

224
00:09:01,990 --> 00:09:07,570
debug cast from this location so we can

225
00:09:05,320 --> 00:09:11,800
actually move it around and look at some

226
00:09:07,570 --> 00:09:14,740
different stuff right so here is the

227
00:09:11,799 --> 00:09:17,229
version of this that's working I believe

228
00:09:14,740 --> 00:09:18,310
this is the this is the debug lines that

229
00:09:17,230 --> 00:09:20,379
happen and I move the light out of the

230
00:09:18,309 --> 00:09:24,969
way these are the debug lines that

231
00:09:20,379 --> 00:09:27,100
happen I believe when when we're not

232
00:09:24,970 --> 00:09:32,019
when we're using the correct lighting I

233
00:09:27,100 --> 00:09:33,820
think right yes so this is using the

234
00:09:32,019 --> 00:09:35,769
lighting and correct as a strong murder

235
00:09:33,820 --> 00:09:37,720
this is using the lighting that we

236
00:09:35,769 --> 00:09:39,970
thought looked or I thought looked more

237
00:09:37,720 --> 00:09:42,519
reasonable right and you can kind of see

238
00:09:39,970 --> 00:09:44,019
what lines were shooting out there so

239
00:09:42,519 --> 00:09:45,820
now I'm just going to go ahead and look

240
00:09:44,019 --> 00:09:47,980
at what happens if I shoot out the

241
00:09:45,820 --> 00:09:49,660
template lines and we can see what those

242
00:09:47,980 --> 00:09:50,649
are okay so you can see those are

243
00:09:49,659 --> 00:09:54,159
totally borked

244
00:09:50,649 --> 00:09:56,139
right they're just not rotating I should

245
00:09:54,159 --> 00:09:58,360
see it rotating through a whole set of

246
00:09:56,139 --> 00:10:00,509
them but it's not so like I suspected

247
00:09:58,360 --> 00:10:02,680
we're just picking slightly wrong here

248
00:10:00,509 --> 00:10:04,539
totally fine we threw that into the end

249
00:10:02,679 --> 00:10:06,219
of last scene I'm not upset about it at

250
00:10:04,539 --> 00:10:08,528
all but it's just that's exactly what I

251
00:10:06,220 --> 00:10:09,730
wanted to know and so we need to take a

252
00:10:08,528 --> 00:10:12,278
look at it now the other thing I don't

253
00:10:09,730 --> 00:10:16,240
know is those red lines there those are

254
00:10:12,278 --> 00:10:19,240
ones that didn't hit anything I believe

255
00:10:16,240 --> 00:10:21,070
I think that's okay because if I look at

256
00:10:19,240 --> 00:10:23,289
where those red lines are pointing they

257
00:10:21,070 --> 00:10:25,089
shouldn't probably have hit anything it

258
00:10:23,289 --> 00:10:29,528
looks like they managed to escape out

259
00:10:25,089 --> 00:10:30,910
the side and out the top so I don't

260
00:10:29,528 --> 00:10:32,799
think there's any cause for concern

261
00:10:30,909 --> 00:10:34,719
there and all these rest of these lines

262
00:10:32,799 --> 00:10:36,129
are correctly Green terminated and you

263
00:10:34,720 --> 00:10:37,629
can see they're terminating at the

264
00:10:36,129 --> 00:10:38,980
places where they would have hit now

265
00:10:37,629 --> 00:10:41,019
remember it's a little bit confusing

266
00:10:38,980 --> 00:10:44,740
because we allow early termination if

267
00:10:41,019 --> 00:10:46,360
you hit a bounding volume early and then

268
00:10:44,740 --> 00:10:47,740
you don't gather you gather the light

269
00:10:46,360 --> 00:10:49,870
that's aggregated from that bounding

270
00:10:47,740 --> 00:10:51,639
volume that's by design so again nothing

271
00:10:49,870 --> 00:10:53,409
particularly weird here other than the

272
00:10:51,639 --> 00:10:55,720
twitchy like this should be changing

273
00:10:53,409 --> 00:10:57,189
every frame it's not so we just need to

274
00:10:55,720 --> 00:11:00,269
go through and like start cleaning that

275
00:10:57,190 --> 00:11:00,269
up and this should be fine

276
00:11:04,429 --> 00:11:09,870
okay so that will would probably explain

277
00:11:08,700 --> 00:11:10,770
what's happening with the lighting if

278
00:11:09,870 --> 00:11:12,269
you look what's happening the lighting

279
00:11:10,769 --> 00:11:15,720
now the reason why it's only slightly

280
00:11:12,269 --> 00:11:17,159
it's you know slightly wrong or I don't

281
00:11:15,720 --> 00:11:19,710
know how you want to say it is because

282
00:11:17,159 --> 00:11:21,629
it's using sort of just two patterns to

283
00:11:19,710 --> 00:11:24,090
sample the light so it's getting kind of

284
00:11:21,629 --> 00:11:25,649
a weird result and I think we can

285
00:11:24,090 --> 00:11:27,720
immediately sort of figure out why that

286
00:11:25,649 --> 00:11:30,029
is the reason for that is we haven't

287
00:11:27,720 --> 00:11:32,040
really done much to permute the light I

288
00:11:30,029 --> 00:11:33,629
was just using the sample point index

289
00:11:32,039 --> 00:11:35,309
and so if the sample point index these

290
00:11:33,629 --> 00:11:37,350
indices come in relatively stable

291
00:11:35,309 --> 00:11:39,899
meaning certain you know we don't really

292
00:11:37,350 --> 00:11:42,149
shuffle where entities are very much per

293
00:11:39,899 --> 00:11:44,939
frame then that's just not going to add

294
00:11:42,149 --> 00:11:47,250
very much randomness so what I think we

295
00:11:44,940 --> 00:11:53,390
need to do here probably is just add an

296
00:11:47,250 --> 00:11:56,399
offset here you know something like this

297
00:11:53,389 --> 00:11:59,250
where we take a certain amount of sample

298
00:11:56,399 --> 00:12:02,399
point entropy and we add that in and

299
00:11:59,250 --> 00:12:08,720
that comes from the series itself so I

300
00:12:02,399 --> 00:12:16,079
can just say sample point entropy equals

301
00:12:08,720 --> 00:12:20,810
you know random u-32 and that would give

302
00:12:16,080 --> 00:12:20,810
me and actually note we called this

303
00:12:24,590 --> 00:12:28,490
let's go ahead and fix that shall we

304
00:12:34,220 --> 00:12:50,490
docents typing more than we need to all

305
00:12:45,269 --> 00:12:52,049
right and so now that we've got a little

306
00:12:50,490 --> 00:12:55,289
bit of entropy in there I'm expecting to

307
00:12:52,049 --> 00:12:56,879
see more variation and I do right now

308
00:12:55,289 --> 00:12:59,219
it's not going to be as much variation

309
00:12:56,879 --> 00:13:02,850
as before because again we are not

310
00:12:59,220 --> 00:13:04,170
actually giving it in full randomness

311
00:13:02,850 --> 00:13:07,320
we're just giving it sixteen different

312
00:13:04,169 --> 00:13:08,969
random samples to go through now that 16

313
00:13:07,320 --> 00:13:11,640
is fairly arbitrary we can make as many

314
00:13:08,970 --> 00:13:14,850
as we want but that's the idea here is

315
00:13:11,639 --> 00:13:18,809
that that that randomness is sort of

316
00:13:14,850 --> 00:13:20,610
coming from a set of patterns that we're

317
00:13:18,809 --> 00:13:22,528
permuting through and what we can see

318
00:13:20,610 --> 00:13:24,659
now that we've fixed that is we're much

319
00:13:22,528 --> 00:13:27,328
closer to the original pure random

320
00:13:24,659 --> 00:13:30,240
version which is what I wanted to see so

321
00:13:27,328 --> 00:13:31,559
I'm much happier about that now then you

322
00:13:30,240 --> 00:13:34,470
know then the the previous version which

323
00:13:31,559 --> 00:13:36,448
is kind of wrong so what I'd like to do

324
00:13:34,470 --> 00:13:38,820
now is actually replace those lighting

325
00:13:36,448 --> 00:13:40,409
samples because you know the whole point

326
00:13:38,820 --> 00:13:42,180
of this was to start using better

327
00:13:40,409 --> 00:13:44,578
sampling patterns so I'd like to do is

328
00:13:42,179 --> 00:13:46,679
replace those sampling patterns now with

329
00:13:44,578 --> 00:13:48,149
one of the patterns that we were using

330
00:13:46,679 --> 00:13:50,208
before and we can try some different

331
00:13:48,149 --> 00:13:53,519
ones we don't need to do anything

332
00:13:50,208 --> 00:13:55,109
specific we can try a couple different

333
00:13:53,519 --> 00:13:56,789
ones but what I'd like to do is

334
00:13:55,110 --> 00:13:58,230
basically give us the ability to kind of

335
00:13:56,789 --> 00:14:00,480
cycle through them a little bit so we

336
00:13:58,230 --> 00:14:03,329
can play with that so we know that we've

337
00:14:00,480 --> 00:14:06,089
got these generate samples situations

338
00:14:03,328 --> 00:14:08,899
here right what I'm gonna do is I'm kind

339
00:14:06,089 --> 00:14:11,399
of gonna make this into a thing that is

340
00:14:08,899 --> 00:14:13,828
you know probably a little more general

341
00:14:11,399 --> 00:14:15,809
than we need but I'm just gonna say okay

342
00:14:13,828 --> 00:14:18,629
look let's let's go ahead and pull this

343
00:14:15,809 --> 00:14:20,639
out I'm gonna put this all the way at

344
00:14:18,629 --> 00:14:22,470
the top and I'm basically gonna make a

345
00:14:20,639 --> 00:14:25,439
little system for doing these samples

346
00:14:22,470 --> 00:14:28,560
right and what I want to do is I want to

347
00:14:25,440 --> 00:14:30,740
make a template right I want to say okay

348
00:14:28,559 --> 00:14:38,219
this is a lighting

349
00:14:30,740 --> 00:14:40,318
sample pattern or something right and

350
00:14:38,220 --> 00:14:41,670
these lighting sample patterns I'm just

351
00:14:40,318 --> 00:14:42,000
going to say you know whatever give me

352
00:14:41,669 --> 00:14:44,069
the name

353
00:14:42,000 --> 00:14:46,950
the function and what I'm going to do is

354
00:14:44,070 --> 00:14:49,020
I'm gonna make that pattern be the the

355
00:14:46,950 --> 00:14:50,879
template that we've defined already that

356
00:14:49,019 --> 00:14:53,419
all these things use so this gives me a

357
00:14:50,879 --> 00:15:01,139
way to like define one of these right

358
00:14:53,419 --> 00:15:05,279
and you know once I have one of those

359
00:15:01,139 --> 00:15:08,279
I'm gonna use the macro here to define

360
00:15:05,279 --> 00:15:12,899
the callback I don't really want that in

361
00:15:08,279 --> 00:15:15,509
there probably so I can use it for other

362
00:15:12,899 --> 00:15:19,019
things later but anyway I'm gonna use it

363
00:15:15,509 --> 00:15:20,669
to define the pointer like a callback to

364
00:15:19,019 --> 00:15:22,829
this thing so I can use a pointer to

365
00:15:20,669 --> 00:15:27,139
refer to one of these and so I'm gonna

366
00:15:22,830 --> 00:15:36,320
say there's a lighting sample sample

367
00:15:27,139 --> 00:15:36,319
pattern and a generator how about this

368
00:15:41,149 --> 00:15:47,459
seem good there I'm gonna use that to

369
00:15:45,539 --> 00:15:50,069
generate a pointer here basically for

370
00:15:47,460 --> 00:15:52,019
that so that we have a type def it's not

371
00:15:50,070 --> 00:15:54,120
a pointer but it's a type of this thing

372
00:15:52,019 --> 00:15:55,620
so that I can use it to declare pointers

373
00:15:54,120 --> 00:15:58,649
to it and then I'm just gonna make all

374
00:15:55,620 --> 00:16:06,570
of these people use that so here's the

375
00:15:58,649 --> 00:16:17,459
polar samples okay here's the spiral

376
00:16:06,570 --> 00:16:20,129
samples here's the Poisson samples and

377
00:16:17,460 --> 00:16:21,839
now each of these is is like definitely

378
00:16:20,129 --> 00:16:25,080
uniform because we're using a macro to

379
00:16:21,839 --> 00:16:26,339
generate all of them right so they might

380
00:16:25,080 --> 00:16:31,070
I'm gonna do is I'm gonna lock this up

381
00:16:26,339 --> 00:16:33,960
and put that into the main body of the

382
00:16:31,070 --> 00:16:36,420
of the lighting system here and so

383
00:16:33,960 --> 00:16:38,790
inside the lighting solution I'm can now

384
00:16:36,419 --> 00:16:40,860
say okay which you know which pattern

385
00:16:38,789 --> 00:16:43,319
generator or whatever we're using I can

386
00:16:40,860 --> 00:16:46,019
do that or I can do you know whatever I

387
00:16:43,320 --> 00:16:46,350
want there right in fact well you know

388
00:16:46,019 --> 00:16:47,879
what

389
00:16:46,350 --> 00:16:49,290
now I think about it I don't even really

390
00:16:47,879 --> 00:16:53,309
need to do that I can just put it here

391
00:16:49,289 --> 00:16:54,539
and that'll be fine with me so what I'm

392
00:16:53,309 --> 00:16:55,829
gonna do is say that we have a certain

393
00:16:54,539 --> 00:17:05,428
number of lighting patterns and

394
00:16:55,830 --> 00:17:07,289
right and I can put that right here and

395
00:17:05,429 --> 00:17:11,069
then I can just put the names of these

396
00:17:07,289 --> 00:17:12,838
things into a array so that I have I'm

397
00:17:11,068 --> 00:17:14,699
just you know creating a way that I can

398
00:17:12,838 --> 00:17:16,649
refer to these things generically so

399
00:17:14,699 --> 00:17:24,329
don't only have to care which one I'm

400
00:17:16,650 --> 00:17:26,130
using right so now I know that I've got

401
00:17:24,328 --> 00:17:27,750
this mini lighting pattern generators

402
00:17:26,130 --> 00:17:28,920
and if I wanted to right I could cycle

403
00:17:27,750 --> 00:17:33,660
through them so I could do something

404
00:17:28,920 --> 00:17:36,240
like lighting pattern generator index or

405
00:17:33,660 --> 00:17:39,269
something like that and then what I

406
00:17:36,240 --> 00:17:41,759
could do is say okay let's just make a

407
00:17:39,269 --> 00:17:43,470
function that initial like that does

408
00:17:41,759 --> 00:17:44,879
whatever it needs to do to initialize

409
00:17:43,470 --> 00:17:48,900
the lighting with a particular one of

410
00:17:44,880 --> 00:17:56,510
these all right

411
00:17:48,900 --> 00:17:56,509
so in order to do that let's say

412
00:17:57,200 --> 00:18:13,679
generate lighting pattern and I'm going

413
00:18:02,819 --> 00:18:19,189
to use the lighting solution and I guess

414
00:18:13,679 --> 00:18:19,190
all I really need to do here is say well

415
00:18:23,210 --> 00:18:26,880
kind of think of how I want to structure

416
00:18:25,169 --> 00:18:28,620
this but let's say I do generate

417
00:18:26,880 --> 00:18:31,800
lighting pattern and I've got this

418
00:18:28,619 --> 00:18:33,329
solution here and what I want to do I

419
00:18:31,799 --> 00:18:36,659
the way that I'm kind of thinking about

420
00:18:33,329 --> 00:18:38,939
this is I feel like if I set maybe a

421
00:18:36,660 --> 00:18:40,830
debug value I feel like I could even

422
00:18:38,940 --> 00:18:44,460
extend this a little bit more and just

423
00:18:40,829 --> 00:18:49,109
say like lighting pattern is a thing

424
00:18:44,460 --> 00:18:50,250
that has a name and a lighting pattern

425
00:18:49,109 --> 00:18:52,500
generated I don't know why I didn't

426
00:18:50,250 --> 00:18:57,839
actually put a type in here sorry about

427
00:18:52,500 --> 00:19:00,960
that I'm gonna make a name here and then

428
00:18:57,839 --> 00:19:03,269
I'm gonna have a generator pointer right

429
00:19:00,960 --> 00:19:06,690
and what I could do is I can then just

430
00:19:03,269 --> 00:19:08,720
say like okay you know maybe I just have

431
00:19:06,690 --> 00:19:08,720
a

432
00:19:09,089 --> 00:19:13,470
thing here that's like you passed the

433
00:19:11,099 --> 00:19:15,179
function and it just automatically

434
00:19:13,470 --> 00:19:24,930
generates you know the name of the

435
00:19:15,180 --> 00:19:27,660
function and the function right so this

436
00:19:24,930 --> 00:19:29,340
basically gives us a table with names in

437
00:19:27,660 --> 00:19:33,060
it so that we can print out which one

438
00:19:29,339 --> 00:19:34,980
we're using if we want to and so when we

439
00:19:33,059 --> 00:19:38,159
receive pattern index here what I could

440
00:19:34,980 --> 00:19:39,900
do is just say in fact I could even just

441
00:19:38,160 --> 00:19:42,240
get rid of this entirely just say

442
00:19:39,900 --> 00:19:46,170
generate lighting pattern and then what

443
00:19:42,240 --> 00:19:49,500
I do is I say okay I need to generate a

444
00:19:46,170 --> 00:19:54,390
certain number of these right so I need

445
00:19:49,500 --> 00:20:00,269
to take the random series from the

446
00:19:54,390 --> 00:20:03,150
solution and then I need to go through

447
00:20:00,269 --> 00:20:07,950
however many of the sample patterns I

448
00:20:03,150 --> 00:20:10,110
need to generate so this is like I don't

449
00:20:07,950 --> 00:20:11,670
know what I want to call this they're

450
00:20:10,109 --> 00:20:13,619
kind of like different versions of it

451
00:20:11,670 --> 00:20:14,820
this is like a version index because

452
00:20:13,619 --> 00:20:18,689
we're gonna generate many different

453
00:20:14,819 --> 00:20:20,460
versions of the same pattern right and I

454
00:20:18,690 --> 00:20:25,289
want to go through however many there

455
00:20:20,460 --> 00:20:30,509
are in the sample point array and then I

456
00:20:25,289 --> 00:20:31,950
want tubes I should probably change the

457
00:20:30,509 --> 00:20:33,119
name of this from sample point to

458
00:20:31,950 --> 00:20:37,700
something else it's really sampled

459
00:20:33,119 --> 00:20:37,699
direction but we'll do that in a second

460
00:20:40,920 --> 00:20:44,820
so what I want to do here is just say

461
00:20:42,269 --> 00:20:46,829
okay let's call whichever one of these

462
00:20:44,819 --> 00:20:48,569
were actually using and in order to do

463
00:20:46,829 --> 00:20:52,460
that I can pull one out here right so I

464
00:20:48,569 --> 00:20:55,169
can say lighting pattern pattern equals

465
00:20:52,460 --> 00:21:00,769
lighting pattern generators pattern

466
00:20:55,170 --> 00:21:04,940
index and we'll just let it wrap so

467
00:21:00,769 --> 00:21:04,940
however many there are this thing

468
00:21:08,190 --> 00:21:14,880
right so this gives us the ability to

469
00:21:12,450 --> 00:21:16,980
just kind of loop through these and then

470
00:21:14,880 --> 00:21:23,100
what I want to do is I want to call the

471
00:21:16,980 --> 00:21:25,410
pattern generator with the information

472
00:21:23,099 --> 00:21:29,819
we had before that it needed right one

473
00:21:25,410 --> 00:21:33,000
was the series to use and I think yeah

474
00:21:29,819 --> 00:21:34,349
these series is just kind of so I feel

475
00:21:33,000 --> 00:21:36,059
like these series is should just get

476
00:21:34,349 --> 00:21:39,209
used actually I don't think we need to

477
00:21:36,059 --> 00:21:43,589
do this thing at all actually so we can

478
00:21:39,210 --> 00:21:50,069
just kind of get rid of this entirely

479
00:21:43,589 --> 00:21:52,559
here and just use the random set that

480
00:21:50,069 --> 00:21:55,289
we're past in which seems more sane to

481
00:21:52,559 --> 00:21:56,429
me fix that because these are offline

482
00:21:55,289 --> 00:21:58,349
now we didn't know if these are getting

483
00:21:56,430 --> 00:22:00,810
done in real time or anything like that

484
00:21:58,349 --> 00:22:03,929
we know they're not going to be now so

485
00:22:00,809 --> 00:22:12,809
they can be kind of a slow and pokey as

486
00:22:03,930 --> 00:22:16,769
they want to be okay so now we can go

487
00:22:12,809 --> 00:22:19,019
through each of these I'd say okay put

488
00:22:16,769 --> 00:22:20,250
it in the sample point array that

489
00:22:19,019 --> 00:22:23,700
corresponds to whatever one of these

490
00:22:20,250 --> 00:22:26,549
we're trying to generate here and off

491
00:22:23,700 --> 00:22:27,870
you go right now it's a little bit

492
00:22:26,549 --> 00:22:30,240
squirrelly

493
00:22:27,869 --> 00:22:34,409
because we know we want to generate v3

494
00:22:30,240 --> 00:22:35,940
for X versions of this stuff and so one

495
00:22:34,410 --> 00:22:38,070
of the problems that we're gonna have is

496
00:22:35,940 --> 00:22:40,470
yeah these are not generating things B 3

497
00:22:38,069 --> 00:22:42,629
for X now maybe we don't want to

498
00:22:40,470 --> 00:22:44,250
generate v3 for X because it's just a

499
00:22:42,630 --> 00:22:46,200
pain in the butt to do it that way since

500
00:22:44,250 --> 00:22:49,740
it's more of this weird packed format so

501
00:22:46,200 --> 00:22:53,190
what I could do instead to is I could do

502
00:22:49,740 --> 00:22:55,440
the packing right so what I could do is

503
00:22:53,190 --> 00:22:59,940
say all right let's suppose we've got

504
00:22:55,440 --> 00:23:01,799
four of these arrays right and I could

505
00:22:59,940 --> 00:23:04,740
just have it generate them and then do

506
00:23:01,799 --> 00:23:09,149
the pack myself so for example we could

507
00:23:04,740 --> 00:23:12,930
do a temp array here that had you know a

508
00:23:09,150 --> 00:23:18,200
array of 16 of these that was four times

509
00:23:12,930 --> 00:23:18,200
right and when we pass this in

510
00:23:19,769 --> 00:23:24,509
we can literally just call this thing

511
00:23:21,538 --> 00:23:27,119
four times right that allows these to

512
00:23:24,509 --> 00:23:28,528
work on a raise of the threes which are

513
00:23:27,119 --> 00:23:29,939
you know more straightforward don't

514
00:23:28,528 --> 00:23:32,398
involve any sim D or anything like that

515
00:23:29,940 --> 00:23:35,250
they can just do their generation the

516
00:23:32,398 --> 00:23:38,339
old-fashioned way and then when I

517
00:23:35,250 --> 00:23:41,130
actually go to use it I can say okay

518
00:23:38,339 --> 00:23:47,369
let's integrate them back to put it into

519
00:23:41,130 --> 00:23:58,580
the array proper so when we go to put it

520
00:23:47,369 --> 00:23:58,579
in here I can say you know loop through

521
00:24:01,940 --> 00:24:12,720
this array and in fact I could just pull

522
00:24:04,740 --> 00:24:15,829
this out like so so I can grab out our

523
00:24:12,720 --> 00:24:17,909
destination here and I can say like okay

524
00:24:15,829 --> 00:24:26,699
you know however many of these were

525
00:24:17,909 --> 00:24:30,740
gonna do we need to make one of these v3

526
00:24:26,700 --> 00:24:30,740
for X's oops

527
00:24:32,450 --> 00:24:36,929
of course I don't remember how to do

528
00:24:34,440 --> 00:24:39,298
that is it just like that I think it

529
00:24:36,929 --> 00:24:42,840
might just be like that and we're gonna

530
00:24:39,298 --> 00:24:45,839
make that out of the various sliced

531
00:24:42,839 --> 00:24:49,709
elements of the randomly generated set

532
00:24:45,839 --> 00:24:52,980
of patterns right so we know that if

533
00:24:49,710 --> 00:24:55,288
we're generating these well you know

534
00:24:52,980 --> 00:24:57,058
what and there's the even another reason

535
00:24:55,288 --> 00:24:58,288
to do this because I forgetting one step

536
00:24:57,058 --> 00:25:00,839
of the process but there's another

537
00:24:58,288 --> 00:25:03,148
reason we want to do this too and that

538
00:25:00,839 --> 00:25:05,308
is actually because when we generate

539
00:25:03,148 --> 00:25:08,719
these things we're generating we're

540
00:25:05,308 --> 00:25:10,769
actually generating 64 of these right

541
00:25:08,720 --> 00:25:11,940
now that I think about it it's actually

542
00:25:10,769 --> 00:25:14,069
a little more complicated than that

543
00:25:11,940 --> 00:25:16,860
we're actually generating 64 of these

544
00:25:14,069 --> 00:25:19,230
and then we need to group them right

545
00:25:16,859 --> 00:25:21,388
into bundles that cast together so

546
00:25:19,230 --> 00:25:24,120
actually I didn't need to do quite that

547
00:25:21,388 --> 00:25:26,788
we actually want to do this and then we

548
00:25:24,119 --> 00:25:29,219
need to run a thing here that will

549
00:25:26,788 --> 00:25:30,538
cluster right that will go grab so

550
00:25:29,220 --> 00:25:33,149
there's actually another part of the

551
00:25:30,538 --> 00:25:34,469
process that has to happen here so it's

552
00:25:33,148 --> 00:25:38,988
actually even more complicated than that

553
00:25:34,469 --> 00:25:41,460
right so that's good to know so anyway

554
00:25:38,989 --> 00:25:42,838
but we can still do a temporary version

555
00:25:41,460 --> 00:25:44,129
of this that we'll just run slowly

556
00:25:42,838 --> 00:25:46,288
because remember our routine will still

557
00:25:44,128 --> 00:25:48,718
work it'll just run more slowly if we

558
00:25:46,288 --> 00:25:51,298
don't pick if we don't bundle rays that

559
00:25:48,719 --> 00:25:53,338
are close to the same direction so to

560
00:25:51,298 --> 00:25:55,829
start with just to get things working we

561
00:25:53,338 --> 00:25:58,979
can just stuff any for rays in there so

562
00:25:55,829 --> 00:26:01,678
we can do something like say okay you

563
00:25:58,979 --> 00:26:09,269
know we've got four times Durand X plus

564
00:26:01,679 --> 00:26:11,099
zero one two and three right so we can

565
00:26:09,269 --> 00:26:13,409
just say like all right here is what

566
00:26:11,098 --> 00:26:15,298
we're gonna pack in there we're just

567
00:26:13,409 --> 00:26:16,080
gonna grab any four of these and it's

568
00:26:15,298 --> 00:26:19,288
fine

569
00:26:16,079 --> 00:26:21,449
and off we go right so that would do it

570
00:26:19,288 --> 00:26:23,118
and the problem again with this is just

571
00:26:21,450 --> 00:26:28,830
that it won't have any particular

572
00:26:23,118 --> 00:26:29,848
coherent the for rays per bundle will

573
00:26:28,829 --> 00:26:31,228
just be pointing in any random

574
00:26:29,848 --> 00:26:33,749
directions so we will get poorer

575
00:26:31,229 --> 00:26:35,219
performance out of this compared to what

576
00:26:33,749 --> 00:26:39,659
we would hope to or at least we think we

577
00:26:35,219 --> 00:26:42,778
would right so that's an easy way for us

578
00:26:39,659 --> 00:26:46,339
to generate the lighting pattern and

579
00:26:42,778 --> 00:26:52,409
hold on a second let me debug all this

580
00:26:46,338 --> 00:26:57,808
that's not supposed to be there and this

581
00:26:52,409 --> 00:26:59,940
should be a plus and then we're good so

582
00:26:57,808 --> 00:27:01,918
that's pretty much everything there now

583
00:26:59,940 --> 00:27:09,778
what we want to do is actually call this

584
00:27:01,919 --> 00:27:14,729
thing so inside the init function which

585
00:27:09,778 --> 00:27:18,058
is right here where we're doing this

586
00:27:14,729 --> 00:27:21,379
random generation we can actually we can

587
00:27:18,058 --> 00:27:23,759
put the random generation into a its own

588
00:27:21,378 --> 00:27:25,288
system here cuz I don't think we have

589
00:27:23,759 --> 00:27:27,989
one of those we've got polar samples

590
00:27:25,288 --> 00:27:30,239
spiral samples and Poisson samples we

591
00:27:27,989 --> 00:27:33,239
should just add another one here which

592
00:27:30,239 --> 00:27:35,778
is like generate white noise samples or

593
00:27:33,239 --> 00:27:35,778
something right

594
00:27:36,868 --> 00:27:40,128
and this would

595
00:27:44,358 --> 00:28:00,418
just do the straightforward version of

596
00:27:47,548 --> 00:28:14,668
this so this would generate pure white

597
00:28:00,419 --> 00:28:17,009
noise so and one of the things about

598
00:28:14,669 --> 00:28:21,440
this is we've hard-coded it to 64 the

599
00:28:17,009 --> 00:28:24,179
reason for that is because I don't I

600
00:28:21,440 --> 00:28:26,849
don't want to force these things to be

601
00:28:24,179 --> 00:28:28,859
parameterised on a number because like

602
00:28:26,848 --> 00:28:31,019
for example here we were fine-tuning it

603
00:28:28,858 --> 00:28:32,999
very specifically so that's why you'll

604
00:28:31,019 --> 00:28:35,128
notice I'm just kind of hard coding 64

605
00:28:32,999 --> 00:28:37,409
in here I wouldn't be adverse to making

606
00:28:35,128 --> 00:28:39,449
it parameterised on the number I just

607
00:28:37,409 --> 00:28:41,369
don't want to do that

608
00:28:39,450 --> 00:28:43,048
yet because it just creates more work

609
00:28:41,368 --> 00:28:44,459
for trying to like how do you know you

610
00:28:43,048 --> 00:28:47,220
got to make a thing that generates this

611
00:28:44,460 --> 00:28:49,889
table correctly for any number right and

612
00:28:47,220 --> 00:28:52,348
whatever so I don't know some things are

613
00:28:49,888 --> 00:28:54,329
much easier to parametrize that way than

614
00:28:52,348 --> 00:28:56,158
others and so I just for now we're just

615
00:28:54,329 --> 00:28:58,019
gonna stick with they only generate 64

616
00:28:56,159 --> 00:29:00,149
in the future if we're feeling saucy

617
00:28:58,019 --> 00:29:03,229
maybe we would do something different

618
00:29:00,148 --> 00:29:03,228
but not right now okay

619
00:29:03,479 --> 00:29:10,048
so if we generate random bilaterals here

620
00:29:07,378 --> 00:29:11,608
on the white noise one this we've

621
00:29:10,048 --> 00:29:13,878
decided it's kind of not a particularly

622
00:29:11,608 --> 00:29:17,220
great way to generate these necessarily

623
00:29:13,878 --> 00:29:19,048
but whatever and so here I'm going to

624
00:29:17,220 --> 00:29:21,929
generate a random unilateral pointing

625
00:29:19,048 --> 00:29:31,648
upwards this is not really white noise

626
00:29:21,929 --> 00:29:35,099
it's kind of biased so we can improve

627
00:29:31,648 --> 00:29:37,048
that as well if we want to and this can

628
00:29:35,098 --> 00:29:39,259
just get actually assigned directly as

629
00:29:37,048 --> 00:29:39,259
well

630
00:29:41,130 --> 00:29:46,720
so that'll generate random samples for

631
00:29:43,480 --> 00:29:54,220
us and that gives us a pattern here as

632
00:29:46,720 --> 00:29:55,960
well now in here when I do the generate

633
00:29:54,220 --> 00:29:59,589
lighting pattern I'm just wondering if I

634
00:29:55,960 --> 00:30:02,650
can do this I don't really remember to

635
00:29:59,589 --> 00:30:08,019
what extent we can display string values

636
00:30:02,650 --> 00:30:12,750
or anything like that it would be nice

637
00:30:08,019 --> 00:30:12,750
if we could but I don't really remember

638
00:30:15,359 --> 00:30:25,959
so yeah we don't really have a string

639
00:30:18,880 --> 00:30:29,080
based thing here that I can see we

640
00:30:25,960 --> 00:30:32,860
almost want like a debug note right

641
00:30:29,079 --> 00:30:35,849
where we could just say hey this thing

642
00:30:32,859 --> 00:30:39,189
wants to have an actual just a value

643
00:30:35,849 --> 00:30:41,679
like a care star that you print you know

644
00:30:39,190 --> 00:30:50,820
what I mean but I don't think we have

645
00:30:41,680 --> 00:30:50,820
anything like that that I know of anyway

646
00:30:53,069 --> 00:31:00,799
pretty sure we don't have it yeah I mean

647
00:30:59,950 --> 00:31:04,009
we sort of we

648
00:31:00,799 --> 00:31:04,009
[Music]

649
00:31:08,160 --> 00:31:12,720
yeah I don't think we have anything like

650
00:31:10,529 --> 00:31:14,069
that because the way that we store these

651
00:31:12,720 --> 00:31:23,819
things internally right

652
00:31:14,069 --> 00:31:26,909
like the way that we saw these things

653
00:31:23,819 --> 00:31:30,089
internally they've got I mean they have

654
00:31:26,910 --> 00:31:41,630
a fair bit of stuff stored with them

655
00:31:30,089 --> 00:31:46,009
here but it's not really it's not really

656
00:31:41,630 --> 00:31:48,870
the same sort of thing although the name

657
00:31:46,009 --> 00:31:50,519
so the name in the grid can be specified

658
00:31:48,869 --> 00:31:54,169
separately so I suppose that would

659
00:31:50,519 --> 00:31:54,170
probably do it right

660
00:32:00,750 --> 00:32:05,180
I'm going to take a look at how this is

661
00:32:02,490 --> 00:32:05,180
parsed here

662
00:32:23,190 --> 00:32:27,570
these are all just drawing commands

663
00:32:34,039 --> 00:32:46,170
so here when we do data I think it's

664
00:32:40,529 --> 00:32:49,649
right here this is where we do store

665
00:32:46,170 --> 00:32:57,960
event and you can kind of see when we

666
00:32:49,650 --> 00:33:14,780
come through here the event

667
00:32:57,960 --> 00:33:14,779
I guess just gets my head was in the way

668
00:33:15,019 --> 00:33:20,180
when we get one of these events

669
00:33:44,089 --> 00:33:53,478
that's what does the cloning right so if

670
00:33:50,690 --> 00:34:00,669
we wanted to we could I guess do

671
00:33:53,479 --> 00:34:00,669
something here that would potentially

672
00:34:11,820 --> 00:34:18,519
yeah I mean there's there's so there's a

673
00:34:16,719 --> 00:34:19,809
lot of ways we could handle this here's

674
00:34:18,519 --> 00:34:21,340
how I think we should handle it because

675
00:34:19,809 --> 00:34:25,360
it does seem like at this point we

676
00:34:21,340 --> 00:34:26,860
probably want to keep the old dll's

677
00:34:25,360 --> 00:34:29,019
around since we had had problems with

678
00:34:26,860 --> 00:34:30,840
that and it took us too much work to

679
00:34:29,019 --> 00:34:34,000
really make it so that we could unload

680
00:34:30,840 --> 00:34:36,399
old dll's it just seems like a bad idea

681
00:34:34,000 --> 00:34:37,840
right it seems like what we would want

682
00:34:36,398 --> 00:34:44,138
to do here is just make one of these

683
00:34:37,840 --> 00:34:46,360
types be a pointer to a string because

684
00:34:44,139 --> 00:34:53,740
we want to be able to just do something

685
00:34:46,360 --> 00:34:57,220
like you know something like that you

686
00:34:53,739 --> 00:35:00,939
know I'm saying where we can just make a

687
00:34:57,219 --> 00:35:03,579
care star and have that work and then in

688
00:35:00,940 --> 00:35:05,769
here there's just a like okay you know

689
00:35:03,579 --> 00:35:17,380
and that's probably more like up here

690
00:35:05,769 --> 00:35:21,130
with the basic types right something

691
00:35:17,380 --> 00:35:23,349
like this and then if we want to we can

692
00:35:21,130 --> 00:35:28,349
look at like you know where this stuff

693
00:35:23,349 --> 00:35:31,150
gets printed out and you can kind of see

694
00:35:28,349 --> 00:35:35,529
we don't really want any interactions

695
00:35:31,150 --> 00:35:39,389
with them or toggles really so the only

696
00:35:35,530 --> 00:35:41,530
place we really care would be here and

697
00:35:39,389 --> 00:35:43,500
so what we could do is just say like

698
00:35:41,530 --> 00:35:46,810
okay there's a string pointer case here

699
00:35:43,500 --> 00:35:49,150
we don't care about this so when we go

700
00:35:46,809 --> 00:35:54,000
to print it out it's just like yeah you

701
00:35:49,150 --> 00:35:57,000
know print it out just just print it out

702
00:35:54,000 --> 00:36:02,820
and so in theory that would let us do

703
00:35:57,000 --> 00:36:02,820
printouts of that form sorry

704
00:36:09,028 --> 00:36:15,630
and here I could just say yeah let's

705
00:36:12,809 --> 00:36:17,730
just say that we're gonna store one of

706
00:36:15,630 --> 00:36:21,838
these things so we want to do a debug

707
00:36:17,730 --> 00:36:31,739
value and I'm gonna call it

708
00:36:21,838 --> 00:36:35,248
let's see pattern name right all right

709
00:36:31,739 --> 00:36:38,400
so now if I go into the interface I'm

710
00:36:35,248 --> 00:36:40,108
hoping that it's just as simple saying

711
00:36:38,400 --> 00:36:43,710
all right let's just make one of these

712
00:36:40,108 --> 00:36:50,969
debug value calls that happens to work

713
00:36:43,710 --> 00:36:53,130
with the with a with a string right and

714
00:36:50,969 --> 00:37:02,879
if we take a look at what's going on

715
00:36:53,130 --> 00:37:05,460
here I think I think we should be able

716
00:37:02,880 --> 00:37:07,140
to I guess like you know maybe I want to

717
00:37:05,460 --> 00:37:12,869
do this just so I can make sure that I

718
00:37:07,139 --> 00:37:16,768
have kind of my own version of it that I

719
00:37:12,869 --> 00:37:19,588
know I'm calling specifically but I

720
00:37:16,768 --> 00:37:24,389
think that should be about it so that

721
00:37:19,588 --> 00:37:27,748
will become that will all become very

722
00:37:24,389 --> 00:37:30,949
straightforward I don't know why do bug

723
00:37:27,748 --> 00:37:37,469
type unknown gets passed to record debug

724
00:37:30,949 --> 00:37:41,969
event there and gets set after the fact

725
00:37:37,469 --> 00:37:46,919
but I'll continue that pattern and then

726
00:37:41,969 --> 00:37:50,058
when we go to set the the value I think

727
00:37:46,920 --> 00:37:50,059
we just need to do that

728
00:38:04,119 --> 00:38:10,210
to be honest though I don't know why we

729
00:38:06,369 --> 00:38:16,359
even need to do this we're not allowing

730
00:38:10,210 --> 00:38:23,530
this to be edited so really I can just

731
00:38:16,360 --> 00:38:25,090
do that so honestly I don't even think

732
00:38:23,530 --> 00:38:26,710
most of that's necessary I don't even

733
00:38:25,090 --> 00:38:37,090
know that we need to call that I think

734
00:38:26,710 --> 00:38:38,650
we can just do that right because all

735
00:38:37,090 --> 00:38:40,360
those gyrations were to make it so that

736
00:38:38,650 --> 00:38:42,630
we could get around the you know C's

737
00:38:40,360 --> 00:38:45,430
sort of unwillingness to play with us

738
00:38:42,630 --> 00:38:47,860
and to avoid using some nasty template

739
00:38:45,429 --> 00:38:53,319
ugliness but I think that's really all

740
00:38:47,860 --> 00:38:58,349
we need so in theory I think now inside

741
00:38:53,320 --> 00:39:01,870
our lighting stuff if we wanted to call

742
00:38:58,349 --> 00:39:05,650
our NIT lighting code if our lip line

743
00:39:01,869 --> 00:39:09,609
code wanted to just call a lighting

744
00:39:05,650 --> 00:39:10,720
pattern generator I think it can so in

745
00:39:09,610 --> 00:39:12,640
order to do that we would just say

746
00:39:10,719 --> 00:39:14,949
here's the solution and here's the

747
00:39:12,639 --> 00:39:17,409
lighting index we want you to use in

748
00:39:14,949 --> 00:39:19,539
theory it will generate using whatever

749
00:39:17,409 --> 00:39:22,179
that pattern generator is and we should

750
00:39:19,539 --> 00:39:25,480
also see a thing in here that says which

751
00:39:22,179 --> 00:39:28,419
one was used if I'm not wrong about that

752
00:39:25,480 --> 00:39:30,309
although I don't know since we don't

753
00:39:28,420 --> 00:39:32,409
call multiple times I suspect that's it

754
00:39:30,309 --> 00:39:34,659
right there and so it looks like I

755
00:39:32,409 --> 00:39:35,739
wasn't quite right about it because you

756
00:39:34,659 --> 00:39:37,509
can see that it doesn't actually show

757
00:39:35,739 --> 00:39:41,139
anything right this thing was supposed

758
00:39:37,510 --> 00:39:44,770
to that thing was supposed to be it so

759
00:39:41,139 --> 00:39:45,969
okay not quite correct but let's take a

760
00:39:44,769 --> 00:39:54,639
look at that because I would like that

761
00:39:45,969 --> 00:39:58,539
to work so we do need to do these two

762
00:39:54,639 --> 00:40:02,469
things record the event and that seems

763
00:39:58,539 --> 00:40:06,130
like it should be okay right it's the

764
00:40:02,469 --> 00:40:07,419
same as if it was a be 32 let me just

765
00:40:06,130 --> 00:40:10,450
take a look at what value said event

766
00:40:07,420 --> 00:40:13,849
data is supposed to do it's that's the

767
00:40:10,449 --> 00:40:18,309
type which we do

768
00:40:13,849 --> 00:40:21,529
and it sets the value which we also do

769
00:40:18,309 --> 00:40:24,619
so it seems like that should be okay

770
00:40:21,530 --> 00:40:30,740
and I'm not quite sure why it wouldn't

771
00:40:24,619 --> 00:40:52,099
be let me check that out though that's

772
00:40:30,739 --> 00:40:54,469
in init lighting so if i whoops ah yes I

773
00:40:52,099 --> 00:40:59,569
forgot since we're not currently

774
00:40:54,469 --> 00:41:02,599
compiling with the we're not currently

775
00:40:59,570 --> 00:41:05,390
compiling with the C runtime library in

776
00:41:02,599 --> 00:41:08,210
our win32 we are missing our seal and

777
00:41:05,389 --> 00:41:11,629
floor functions which we hadn't done yet

778
00:41:08,210 --> 00:41:17,869
and I'm not sure why I can't get it in D

779
00:41:11,630 --> 00:41:19,910
mode to inline those because I want it

780
00:41:17,869 --> 00:41:22,519
to inline those but it doesn't seem to

781
00:41:19,909 --> 00:41:27,139
want to and so I'm wondering how I would

782
00:41:22,519 --> 00:41:30,039
do that right force in line C left m/s

783
00:41:27,139 --> 00:41:30,039
you see

784
00:41:34,429 --> 00:41:38,839
because I want it to inline these

785
00:41:45,630 --> 00:41:50,910
and I'm not sure exactly how to make it

786
00:41:48,900 --> 00:41:54,028
do that I wonder if I have to specify

787
00:41:50,909 --> 00:41:54,929
like an arch sse2 kind of thing or

788
00:41:54,028 --> 00:42:05,568
something like this

789
00:41:54,929 --> 00:42:05,568
to get it to do that that's not relevant

790
00:42:09,170 --> 00:42:15,509
look I just want to say yeah you know

791
00:42:12,900 --> 00:42:18,660
anything you were gonna in line I wanted

792
00:42:15,509 --> 00:42:21,599
in line from the CRT I don't want you to

793
00:42:18,659 --> 00:42:23,399
optimize my code anymore but that should

794
00:42:21,599 --> 00:42:25,109
get and maybe there's just no way to do

795
00:42:23,400 --> 00:42:29,430
that right look maybe it's gonna do that

796
00:42:25,108 --> 00:42:33,389
one way or the other which I guess is

797
00:42:29,429 --> 00:42:35,608
fine but you know implementing sealer

798
00:42:33,389 --> 00:42:37,440
floor is actually pretty straightforward

799
00:42:35,608 --> 00:42:38,759
we can we can throw that in there I

800
00:42:37,440 --> 00:42:42,119
suppose with the other thing we can do

801
00:42:38,759 --> 00:42:46,409
so the trivial way to implement sealer

802
00:42:42,119 --> 00:42:48,390
floor is if you don't care about which

803
00:42:46,409 --> 00:42:51,088
version of SSE you're using you can do

804
00:42:48,389 --> 00:43:01,159
that so I can show you there's some

805
00:42:51,088 --> 00:43:01,159
pretty simple stuff in here for that so

806
00:43:02,268 --> 00:43:13,699
we want let's see

807
00:43:06,630 --> 00:43:13,700
I want my rounding functions

808
00:43:25,500 --> 00:43:29,309
where are you

809
00:43:37,619 --> 00:43:48,400
so the ceiling and floor functions our

810
00:43:44,739 --> 00:43:52,179
special cases of here it is this is the

811
00:43:48,400 --> 00:43:58,690
one I was looking for so by the time you

812
00:43:52,179 --> 00:44:00,369
get to SSE 4.1 which we have not been

813
00:43:58,690 --> 00:44:02,800
using yet so I don't know that we really

814
00:44:00,369 --> 00:44:05,289
want to leave this in but for now it's a

815
00:44:02,800 --> 00:44:10,720
pretty trivial way to do it and to be

816
00:44:05,289 --> 00:44:12,730
honest we did look before and it was not

817
00:44:10,719 --> 00:44:13,989
very similar to when we looked at the

818
00:44:12,730 --> 00:44:17,289
starters project because I was we've

819
00:44:13,989 --> 00:44:20,379
been programming on this for a while due

820
00:44:17,289 --> 00:44:23,440
to the slow pace of the one hour well I

821
00:44:20,380 --> 00:44:26,710
should say four hours a week four out of

822
00:44:23,440 --> 00:44:30,159
five hours a week if we actually take a

823
00:44:26,710 --> 00:44:32,470
look at how the PC processor usage sets

824
00:44:30,159 --> 00:44:34,659
up here one thing you will notice is

825
00:44:32,469 --> 00:44:38,169
that you can actually probably just use

826
00:44:34,659 --> 00:44:40,359
SSE 4.2 and 4.1 now these numbers were

827
00:44:38,170 --> 00:44:44,289
not so favorable three or four years ago

828
00:44:40,360 --> 00:44:46,150
they were more like 70% right and so you

829
00:44:44,289 --> 00:44:49,029
had to be careful about using something

830
00:44:46,150 --> 00:44:51,400
like SSE for we probably just could use

831
00:44:49,030 --> 00:44:53,019
them now I don't know if we want to make

832
00:44:51,400 --> 00:44:56,320
that decision or not but it's pretty

833
00:44:53,019 --> 00:44:58,300
striking how much higher they are so you

834
00:44:56,320 --> 00:45:00,789
know your mileage may vary but we

835
00:44:58,300 --> 00:45:04,060
definitely could temporarily we

836
00:45:00,789 --> 00:45:05,440
certainly can but it's just worth noting

837
00:45:04,059 --> 00:45:08,799
that that's something we may want to

838
00:45:05,440 --> 00:45:11,050
replace when you get to SNA 4.1 these

839
00:45:08,800 --> 00:45:12,430
floor and seal are built into the

840
00:45:11,050 --> 00:45:15,730
hardware so you don't need to do any

841
00:45:12,429 --> 00:45:18,460
work to get them and in fact what they

842
00:45:15,730 --> 00:45:21,670
are is special cases of this particular

843
00:45:18,460 --> 00:45:25,300
function here you can see actually if I

844
00:45:21,670 --> 00:45:26,740
go look at one of these like Coss you

845
00:45:25,300 --> 00:45:30,370
can see that they all call the same

846
00:45:26,739 --> 00:45:31,989
function round SS around PS whichever

847
00:45:30,369 --> 00:45:33,549
whether you're rounding forward a time

848
00:45:31,989 --> 00:45:34,809
or one at a time they'll call the same

849
00:45:33,550 --> 00:45:36,670
function and it's just a different

850
00:45:34,809 --> 00:45:39,519
immediate so the way that it works is

851
00:45:36,670 --> 00:45:42,130
instead of the old way the same way that

852
00:45:39,519 --> 00:45:45,550
like the I the x87 worked in whatever

853
00:45:42,130 --> 00:45:47,619
where there's a rounding mode and when

854
00:45:45,550 --> 00:45:48,280
you go to round off a number it uses

855
00:45:47,619 --> 00:45:50,650
that rounding

856
00:45:48,280 --> 00:45:53,320
mode even if you are trying to do

857
00:45:50,650 --> 00:45:55,150
something else with it potentially what

858
00:45:53,320 --> 00:45:58,180
this function does is it ignores the

859
00:45:55,150 --> 00:46:00,309
rounding mode of the unit and just takes

860
00:45:58,179 --> 00:46:03,279
an immediate that says what the rounding

861
00:46:00,309 --> 00:46:08,590
mode is so this way you can floor seal

862
00:46:03,280 --> 00:46:10,600
truncate or so you can you can round

863
00:46:08,590 --> 00:46:12,340
towards negative infinity round towards

864
00:46:10,599 --> 00:46:14,529
positive infinity so that's floor and

865
00:46:12,340 --> 00:46:17,350
seal you could truncate towards zero

866
00:46:14,530 --> 00:46:20,650
which is like the C runtime libraries

867
00:46:17,349 --> 00:46:23,650
like or the C language way of converting

868
00:46:20,650 --> 00:46:26,200
a number and or I think there's one more

869
00:46:23,650 --> 00:46:27,880
which is you can round to nearest so

870
00:46:26,199 --> 00:46:29,349
rather than biasing in a particular

871
00:46:27,880 --> 00:46:30,070
direction or towards zero towards

872
00:46:29,349 --> 00:46:31,750
negative deprives me

873
00:46:30,070 --> 00:46:34,510
it's just whichever number is closest

874
00:46:31,750 --> 00:46:37,360
right so I believe you get four choices

875
00:46:34,510 --> 00:46:38,040
there and you can see what they are yeah

876
00:46:37,360 --> 00:46:41,260
here you go

877
00:46:38,039 --> 00:46:44,409
so there's round to nearest round down

878
00:46:41,260 --> 00:46:47,560
round up and truncate and you have all

879
00:46:44,409 --> 00:46:49,269
of those pieces of information right and

880
00:46:47,559 --> 00:46:51,489
what you can see here is there's also

881
00:46:49,269 --> 00:46:54,099
some extra sauce you can put in here

882
00:46:51,489 --> 00:46:56,259
where if you wanted to if you wanted to

883
00:46:54,099 --> 00:46:59,230
do something like have floating-point

884
00:46:56,260 --> 00:47:01,720
exceptions on in the SSE unit but then

885
00:46:59,230 --> 00:47:04,059
for certain operations when you're

886
00:47:01,719 --> 00:47:06,069
rounding just say okay for this time I

887
00:47:04,059 --> 00:47:08,380
don't want them on you can actually

888
00:47:06,070 --> 00:47:10,330
specify that specifically so it's kind

889
00:47:08,380 --> 00:47:11,920
of just a way of overriding everything

890
00:47:10,329 --> 00:47:14,049
you previously told the chip to do

891
00:47:11,920 --> 00:47:17,170
during around and it's awesome I love

892
00:47:14,050 --> 00:47:18,550
this instruction so if it really is the

893
00:47:17,170 --> 00:47:20,139
case that we can use this now I'm

894
00:47:18,550 --> 00:47:22,330
certainly a happy camper to say the

895
00:47:20,139 --> 00:47:23,920
least like if we were just if the new

896
00:47:22,329 --> 00:47:26,259
world order is that you can use up to

897
00:47:23,920 --> 00:47:28,510
SSE 4.1 I would be delighted because

898
00:47:26,260 --> 00:47:30,160
that just gets rid of a bunch of like

899
00:47:28,510 --> 00:47:31,540
weird like four to five instruction

900
00:47:30,159 --> 00:47:32,829
things you have to do to floor and seal

901
00:47:31,539 --> 00:47:35,019
numbers gnarly and replace it with just

902
00:47:32,829 --> 00:47:36,699
one clean instruction that tells it ship

903
00:47:35,019 --> 00:47:38,500
exactly what you wanted but I don't know

904
00:47:36,699 --> 00:47:41,589
about that yet either way like I said

905
00:47:38,500 --> 00:47:44,139
because this is causing us a pain in the

906
00:47:41,590 --> 00:47:46,150
in the booty right now I'm just gonna go

907
00:47:44,139 --> 00:47:47,409
ahead and say we'll use it temporarily

908
00:47:46,150 --> 00:47:51,550
and then if we want to replace it later

909
00:47:47,409 --> 00:47:53,649
we can write our square roots already

910
00:47:51,550 --> 00:47:55,390
doing this right and so now the question

911
00:47:53,650 --> 00:47:57,849
is alright can we just go ahead and and

912
00:47:55,389 --> 00:47:59,619
put some other stuff in here that would

913
00:47:57,849 --> 00:48:02,139
fix it so here's our functions we've got

914
00:47:59,619 --> 00:48:05,898
them all here we've got round

915
00:48:02,139 --> 00:48:08,599
right there it is we've got floor and

916
00:48:05,898 --> 00:48:11,748
seal and you can see that we're still

917
00:48:08,599 --> 00:48:13,338
calling the C runtime library for some

918
00:48:11,748 --> 00:48:16,488
of these so what I'm gonna do is I'm

919
00:48:13,338 --> 00:48:20,389
going to go ahead and try just replacing

920
00:48:16,489 --> 00:48:22,969
these the flooring functions with one of

921
00:48:20,389 --> 00:48:25,759
these so I'm gonna go ahead and say mmm

922
00:48:22,969 --> 00:48:27,559
you know round SS because again we don't

923
00:48:25,759 --> 00:48:28,998
need the PS version because we're not

924
00:48:27,559 --> 00:48:31,159
doing four at a time we're only doing

925
00:48:28,998 --> 00:48:35,208
one at a time for these particular

926
00:48:31,159 --> 00:48:37,429
things right so for flooring I want to

927
00:48:35,208 --> 00:48:38,598
do I guess I'll use the intrinsic even

928
00:48:37,429 --> 00:48:39,769
though we could just call the round

929
00:48:38,599 --> 00:48:43,489
intrinsic and pass it the right thing

930
00:48:39,768 --> 00:48:47,238
all actually cooks call floor SS and

931
00:48:43,489 --> 00:48:51,999
what you can see here is when we call

932
00:48:47,239 --> 00:48:56,509
floor SS it's going to do a rounding for

933
00:48:51,998 --> 00:48:58,878
it's going to do a floor on the second

934
00:48:56,509 --> 00:49:01,398
value that gets passed in on the bottom

935
00:48:58,878 --> 00:49:04,188
and then the rest of the bits will just

936
00:49:01,398 --> 00:49:06,409
be whatever are passed in here now we

937
00:49:04,188 --> 00:49:12,888
don't care what the rest of the bits are

938
00:49:06,409 --> 00:49:15,048
so you know like we it doesn't matter

939
00:49:12,889 --> 00:49:16,309
what we're passing there but we have to

940
00:49:15,048 --> 00:49:20,809
pass something there because that's just

941
00:49:16,309 --> 00:49:22,729
how the instruction works right so we

942
00:49:20,809 --> 00:49:26,809
can pass it as zero for the thing that

943
00:49:22,728 --> 00:49:29,868
we're flooring and we can go ahead and

944
00:49:26,809 --> 00:49:32,239
and load in a single oops load in a

945
00:49:29,869 --> 00:49:34,729
single value here for the value that we

946
00:49:32,239 --> 00:49:36,829
actually want right and so what will

947
00:49:34,728 --> 00:49:38,509
this will do is this will do the

948
00:49:36,829 --> 00:49:41,298
flooring operation but we still have to

949
00:49:38,509 --> 00:49:44,778
get it out and so this part still needs

950
00:49:41,298 --> 00:49:47,208
to happen right so although we have to

951
00:49:44,778 --> 00:49:49,608
kind of smush all those together that by

952
00:49:47,208 --> 00:49:53,828
itself will now do the complete floor

953
00:49:49,608 --> 00:49:53,828
operation I'll put it to do in here

954
00:50:02,329 --> 00:50:12,260
because we don't necessarily know that

955
00:50:03,980 --> 00:50:13,940
that's something we want but once we if

956
00:50:12,260 --> 00:50:15,319
we do make that statement then as you

957
00:50:13,940 --> 00:50:17,240
can see these are very straightforward

958
00:50:15,318 --> 00:50:21,558
right

959
00:50:17,239 --> 00:50:24,368
and and so yeah and in theory everything

960
00:50:21,559 --> 00:50:27,440
just works exactly as it was working

961
00:50:24,369 --> 00:50:30,410
right there's no no difference there

962
00:50:27,440 --> 00:50:31,909
right so those are really really easy

963
00:50:30,409 --> 00:50:34,338
implications of Florence seal because

964
00:50:31,909 --> 00:50:36,259
you don't really have to think we don't

965
00:50:34,338 --> 00:50:38,179
have to go figure out how to do a good

966
00:50:36,260 --> 00:50:39,260
flooring or ceiling operation ourselves

967
00:50:38,179 --> 00:50:44,779
which is what we would have had to do

968
00:50:39,260 --> 00:50:46,069
before sse 4.1 and so yeah if you can

969
00:50:44,780 --> 00:50:47,420
get away with us see for everyone

970
00:50:46,068 --> 00:50:49,250
definitely do what I just did

971
00:50:47,420 --> 00:50:50,869
if you can't get rid that see for

972
00:50:49,250 --> 00:50:52,789
everyone which we have to see whether we

973
00:50:50,869 --> 00:50:55,160
can or not then you have to think a

974
00:50:52,789 --> 00:50:56,808
little harder about it but it's

975
00:50:55,159 --> 00:50:58,940
definitely either way it's not like sine

976
00:50:56,809 --> 00:51:00,500
or cosine it's not as hard to implement

977
00:50:58,940 --> 00:51:04,519
as something that's actually gonna

978
00:51:00,500 --> 00:51:07,579
require a bunch of math thinking to to

979
00:51:04,519 --> 00:51:11,000
do necessarily so anyway back to our

980
00:51:07,579 --> 00:51:16,010
regularly scheduled program here oops I

981
00:51:11,000 --> 00:51:17,568
do you want to store that breakpoint um

982
00:51:16,010 --> 00:51:21,220
so when I step through here I just

983
00:51:17,568 --> 00:51:30,588
wanted to see what was going on with our

984
00:51:21,219 --> 00:51:32,088
our debug string here and I guess it's

985
00:51:30,588 --> 00:51:34,449
not gonna let me step through that macro

986
00:51:32,088 --> 00:51:34,449
of course

987
00:51:37,940 --> 00:51:45,509
so I guess we won't really be able to

988
00:51:42,568 --> 00:51:47,400
see much about what that event pointer

989
00:51:45,509 --> 00:51:48,929
looks like because of course it doesn't

990
00:51:47,400 --> 00:51:52,289
want to tell us what the event pointer

991
00:51:48,929 --> 00:51:54,989
looks like which is unfortunate what is

992
00:51:52,289 --> 00:52:03,599
kind of nice about that however is I

993
00:51:54,989 --> 00:52:06,748
could force it to if I wanted to because

994
00:52:03,599 --> 00:52:09,269
we know the type here I could make a

995
00:52:06,748 --> 00:52:14,308
little function that we definitely are

996
00:52:09,268 --> 00:52:17,939
going to hit right so you know I could

997
00:52:14,309 --> 00:52:19,410
do something a little bit more specific

998
00:52:17,940 --> 00:52:22,858
there right like I could make one of

999
00:52:19,409 --> 00:52:29,068
these specific to this type and make

1000
00:52:22,858 --> 00:52:35,848
sure it gets called we also see

1001
00:52:29,068 --> 00:52:37,409
something here because we're setting

1002
00:52:35,849 --> 00:52:38,999
value string pointer to whatever the

1003
00:52:37,409 --> 00:52:41,879
value is it's point passed in which is

1004
00:52:38,998 --> 00:52:43,669
exactly what I want to do and we're you

1005
00:52:41,880 --> 00:52:47,670
know we're trying to print that out here

1006
00:52:43,670 --> 00:52:50,430
but for whatever reason something

1007
00:52:47,670 --> 00:52:57,079
bizarre is happening to us somewhere

1008
00:52:50,429 --> 00:53:00,149
down the line and I'm not sure why I

1009
00:52:57,079 --> 00:53:02,009
want to kind of stop here I think to

1010
00:53:00,150 --> 00:53:03,480
verify that I'm right that that's what's

1011
00:53:02,009 --> 00:53:04,980
actually getting printed out in the

1012
00:53:03,480 --> 00:53:07,019
first place

1013
00:53:04,980 --> 00:53:11,849
because I don't actually know that right

1014
00:53:07,018 --> 00:53:16,139
so let me just go ahead and take a look

1015
00:53:11,849 --> 00:53:17,309
at that so if I just stop here I want to

1016
00:53:16,139 --> 00:53:22,348
see if we are if that is in fact

1017
00:53:17,309 --> 00:53:25,160
thinking I was thinking it was yeah so

1018
00:53:22,349 --> 00:53:25,160
let me open this up

1019
00:53:28,039 --> 00:53:32,099
so it does look like that was thing I

1020
00:53:30,150 --> 00:53:34,579
was thinking it was so at least now I

1021
00:53:32,099 --> 00:53:39,420
can look at this event a little bit more

1022
00:53:34,579 --> 00:53:42,989
carefully right so here's the event that

1023
00:53:39,420 --> 00:53:44,729
we supposedly recorded and you can see

1024
00:53:42,989 --> 00:53:46,019
here that the string pointer is set to

1025
00:53:44,728 --> 00:53:49,348
null which doesn't really make a lot of

1026
00:53:46,018 --> 00:53:52,018
sense the grid is correct the name is

1027
00:53:49,349 --> 00:53:56,119
not so for whatever reason this didn't

1028
00:53:52,018 --> 00:53:59,968
get processed properly right the debug

1029
00:53:56,119 --> 00:54:03,119
type string didn't get processed the way

1030
00:53:59,969 --> 00:54:05,099
that we would want now maybe that's just

1031
00:54:03,119 --> 00:54:12,329
because I'm using an enum range here let

1032
00:54:05,099 --> 00:54:33,630
me take a look where's the set of these

1033
00:54:12,329 --> 00:54:35,699
guys so let me just do a quick check so

1034
00:54:33,630 --> 00:54:40,048
anything other than the types that come

1035
00:54:35,699 --> 00:54:43,639
in here always get shunted down to the

1036
00:54:40,048 --> 00:54:43,639
standard storage format right

1037
00:54:50,039 --> 00:54:54,489
yeah and all of these things yes I mean

1038
00:54:52,688 --> 00:54:56,429
I don't really know why that would be

1039
00:54:54,489 --> 00:55:02,619
causing a problem all of these things

1040
00:54:56,429 --> 00:55:04,989
are you know but the the eight wide

1041
00:55:02,619 --> 00:55:05,650
pointer for the value string fits just

1042
00:55:04,989 --> 00:55:07,269
fine

1043
00:55:05,650 --> 00:55:09,430
in the space that we have here for all

1044
00:55:07,268 --> 00:55:12,399
the rest of our stuff so there's no

1045
00:55:09,429 --> 00:55:14,858
reason why it shouldn't have been

1046
00:55:12,400 --> 00:55:16,900
propagated properly but yet it's like

1047
00:55:14,858 --> 00:55:18,759
not even parsing the event information

1048
00:55:16,900 --> 00:55:22,048
for whatever reason and I'm not really

1049
00:55:18,759 --> 00:55:22,048
sure why that would be

1050
00:55:30,710 --> 00:55:50,490
so if I take a look here at emit

1051
00:55:32,969 --> 00:56:01,049
lighting so let's say we I call a nearly

1052
00:55:50,489 --> 00:56:06,059
identical function and then we run it if

1053
00:56:01,050 --> 00:56:10,920
I open up our debug view now so it does

1054
00:56:06,059 --> 00:56:14,429
look like for whatever reason this part

1055
00:56:10,920 --> 00:56:18,090
of the pass is just busted right so

1056
00:56:14,429 --> 00:56:21,690
inside here in the generated lighting

1057
00:56:18,090 --> 00:56:24,059
pattern call we're we're just not

1058
00:56:21,690 --> 00:56:32,670
getting our debug printouts properly

1059
00:56:24,059 --> 00:56:39,329
like the its ability to record those is

1060
00:56:32,670 --> 00:56:42,329
somehow hampered right it's not it's not

1061
00:56:39,329 --> 00:56:44,400
able to record those the first time

1062
00:56:42,329 --> 00:56:45,929
through maybe because they're only done

1063
00:56:44,400 --> 00:56:48,300
the first time through or something

1064
00:56:45,929 --> 00:56:52,049
weird right is happening there where it

1065
00:56:48,300 --> 00:56:55,200
loses the ability to to track those

1066
00:56:52,050 --> 00:56:57,960
somehow you know what I'm saying the the

1067
00:56:55,199 --> 00:57:00,480
name like goes away or something so it

1068
00:56:57,960 --> 00:57:05,369
looks like it's a per frame problem if I

1069
00:57:00,480 --> 00:57:07,559
if I went you know outside to something

1070
00:57:05,369 --> 00:57:10,380
that gets called every time so like

1071
00:57:07,559 --> 00:57:17,090
compute light propagation right and I do

1072
00:57:10,380 --> 00:57:17,090
this I suppose I can also

1073
00:57:23,528 --> 00:57:30,349
you know all of a sudden it's like

1074
00:57:26,119 --> 00:57:32,240
correct so it seems like we've got a

1075
00:57:30,349 --> 00:57:34,940
thing where we can't just issue

1076
00:57:32,239 --> 00:57:37,459
something one frame and leave it there

1077
00:57:34,940 --> 00:57:40,329
which doesn't make a lot of sense to me

1078
00:57:37,460 --> 00:57:42,440
because I didn't know we were doing that

1079
00:57:40,329 --> 00:57:46,400
meaning I didn't know that we had like a

1080
00:57:42,440 --> 00:57:48,679
decay on things in that way when we

1081
00:57:46,400 --> 00:57:51,500
actually go to record debug events so

1082
00:57:48,679 --> 00:57:54,919
I'm not sure why that would be the case

1083
00:57:51,500 --> 00:57:56,480
but obviously it is the case and so if

1084
00:57:54,920 --> 00:57:58,519
something doesn't get hit on a

1085
00:57:56,480 --> 00:58:10,940
subsequent frame it's like it doesn't

1086
00:57:58,518 --> 00:58:12,409
really get saved somehow because it's

1087
00:58:10,940 --> 00:58:15,019
never going to trigger one of these

1088
00:58:12,409 --> 00:58:17,149
again right it will never be seen it's

1089
00:58:15,018 --> 00:58:20,209
only being seen one time inchoate debug

1090
00:58:17,150 --> 00:58:23,990
records so it shouldn't really ever go

1091
00:58:20,210 --> 00:58:27,019
away I don't think unless it's just

1092
00:58:23,989 --> 00:58:31,328
eventually it gets removed because it

1093
00:58:27,018 --> 00:58:31,328
gets used for something else right but

1094
00:58:32,409 --> 00:58:36,920
even that I don't think is the case

1095
00:58:34,489 --> 00:58:42,379
because well I guess it might be for the

1096
00:58:36,920 --> 00:58:45,528
actual value yeah I guess I could see

1097
00:58:42,380 --> 00:58:47,950
that so for now I guess I'll say alright

1098
00:58:45,528 --> 00:58:47,949
that's okay

1099
00:58:58,429 --> 00:59:01,879
but I don't love it

1100
00:59:11,570 --> 00:59:25,130
so I'll just store the name here and

1101
00:59:22,019 --> 00:59:29,179
that should be that so when we run now

1102
00:59:25,130 --> 00:59:29,180
hopefully we can't see it correctly

1103
00:59:30,559 --> 00:59:37,590
there's generate white noise samples and

1104
00:59:33,630 --> 00:59:45,570
so if I make a you know some kind of a

1105
00:59:37,590 --> 00:59:53,210
function here where I'm just gonna say

1106
00:59:45,570 --> 00:59:53,210
hey baby pattern something like that

1107
00:59:55,099 --> 01:00:01,920
when we do those F key things we had

1108
00:59:58,050 --> 01:00:06,080
like some in here that would cycle

1109
01:00:01,920 --> 01:00:06,079
through let's just instead of doing this

1110
01:00:08,929 --> 01:00:15,769
if we hit the f9 key now what I'm going

1111
01:00:11,550 --> 01:00:15,769
to do is say generate lighting pattern

1112
01:00:16,909 --> 01:00:22,339
and pass it like

1113
01:00:32,530 --> 01:00:42,470
you know just an index that just goes up

1114
01:00:34,838 --> 01:00:44,239
right so now at least in theory right if

1115
01:00:42,469 --> 01:00:46,279
I come in here and I look at this

1116
01:00:44,239 --> 01:00:49,699
letting pattern it's white noise samples

1117
01:00:46,280 --> 01:00:50,900
if I switch to polar samples then I get

1118
01:00:49,699 --> 01:00:53,299
that right

1119
01:00:50,900 --> 01:00:56,150
if I switch to spiral samples then I get

1120
01:00:53,300 --> 01:00:59,750
that and if I switch to Poisson samples

1121
01:00:56,150 --> 01:01:07,250
then I get that you know I'm saying to

1122
01:00:59,750 --> 01:01:11,690
you and I guess the first thing that I

1123
01:01:07,250 --> 01:01:14,358
would point out is actually it does

1124
01:01:11,690 --> 01:01:16,099
exactly what I wanted so using the

1125
01:01:14,358 --> 01:01:19,338
stratified sampling the amount of noise

1126
01:01:16,099 --> 01:01:22,789
has dropped dramatically right like the

1127
01:01:19,338 --> 01:01:24,829
flicker is way way less than it was and

1128
01:01:22,789 --> 01:01:27,800
the lighting is much more consistent

1129
01:01:24,829 --> 01:01:32,929
like that actually looks really good

1130
01:01:27,800 --> 01:01:35,030
right I don't remember how to stop

1131
01:01:32,929 --> 01:01:38,449
drawing the debug lines but I think

1132
01:01:35,030 --> 01:01:42,410
there is a way to do so in here

1133
01:01:38,449 --> 01:01:44,269
somewhere maybe this one although that

1134
01:01:42,409 --> 01:01:45,649
thing that just stops them from updating

1135
01:01:44,269 --> 01:01:49,239
I don't think that stops them

1136
01:01:45,650 --> 01:01:49,240
necessarily from drawing I'm not sure

1137
01:01:51,579 --> 01:01:54,079
yeah I don't think there's any way to do

1138
01:01:53,659 --> 01:02:01,338
that

1139
01:01:54,079 --> 01:02:02,838
unfortunately at the moment so that was

1140
01:02:01,338 --> 01:02:06,679
supposed to F 2 is supposed to stop

1141
01:02:02,838 --> 01:02:09,009
debug lines from being used what's going

1142
01:02:06,679 --> 01:02:09,009
on there

1143
01:02:19,539 --> 01:02:23,639
No well that'd do it

1144
01:02:35,650 --> 01:02:40,960
so again just cycling through these now

1145
01:02:37,630 --> 01:02:42,610
so there's white noise there's polar

1146
01:02:40,960 --> 01:02:44,710
which doesn't have noise in it right now

1147
01:02:42,610 --> 01:02:49,920
so it's not really a good test

1148
01:02:44,710 --> 01:02:49,920
here's spiral and here's plus long

1149
01:02:56,568 --> 01:03:00,159
and that looks pretty nice

1150
01:03:37,280 --> 01:03:44,720
I may not know about you but I'm pretty

1151
01:03:39,110 --> 01:03:45,920
happy with that and that's entirely CPUs

1152
01:03:44,719 --> 01:03:47,989
side right now right look we're not

1153
01:03:45,920 --> 01:03:57,289
using any GPU for for lighting at the

1154
01:03:47,989 --> 01:03:58,879
moment you'll also notice that our speed

1155
01:03:57,289 --> 01:04:02,269
has taken a hit right and that's exactly

1156
01:03:58,880 --> 01:04:06,559
what I was saying before about how you

1157
01:04:02,269 --> 01:04:08,150
know we can't we have this problem where

1158
01:04:06,559 --> 01:04:09,920
we're not bundling our arrays at the

1159
01:04:08,150 --> 01:04:11,240
moment so it feels like we want to do

1160
01:04:09,920 --> 01:04:13,789
that bundling as well just to make sure

1161
01:04:11,239 --> 01:04:22,789
that we get our speed back but otherwise

1162
01:04:13,789 --> 01:04:24,860
I feel like that's pretty darn nice and

1163
01:04:22,789 --> 01:04:28,670
I'd be interested to know now if we just

1164
01:04:24,860 --> 01:04:31,729
introduced more lights back in the mix

1165
01:04:28,670 --> 01:04:31,729
[Music]

1166
01:04:32,409 --> 01:04:44,199
how we're doing where's our snake

1167
01:04:46,329 --> 01:04:51,009
remember if this still has lights

1168
01:04:48,170 --> 01:04:51,010
attached to it or not

1169
01:04:54,760 --> 01:04:58,910
yeah so now the snake should be adding

1170
01:04:57,079 --> 01:05:05,690
some light and it is you can kind of see

1171
01:04:58,909 --> 01:05:14,029
it and what happens if we make it be

1172
01:05:05,690 --> 01:05:16,670
brighter I don't know unfortunately

1173
01:05:14,030 --> 01:05:25,670
don't actually know what add piece light

1174
01:05:16,670 --> 01:05:29,019
does mission so you know I could make

1175
01:05:25,670 --> 01:05:29,019
the snake really bright

1176
01:05:37,260 --> 01:05:42,030
and you can kind of see like so you can

1177
01:05:40,050 --> 01:05:45,359
see some of the bugs in the weight well

1178
01:05:42,030 --> 01:05:47,580
Maui bugs but approximation cost so we

1179
01:05:45,358 --> 01:05:49,679
need to do probably some more work on

1180
01:05:47,579 --> 01:05:51,358
our aggregation because that's working

1181
01:05:49,679 --> 01:05:55,879
pretty well now but you can also see

1182
01:05:51,358 --> 01:05:59,190
that it kind of like as it aggregates

1183
01:05:55,880 --> 01:06:01,309
the lighting in an area it spreads it

1184
01:05:59,190 --> 01:06:05,309
too much in the case where the the

1185
01:06:01,309 --> 01:06:07,320
aggregate lighting gets summed up into a

1186
01:06:05,309 --> 01:06:09,750
box the thing gets used by someone who's

1187
01:06:07,320 --> 01:06:11,550
further away you get some error in there

1188
01:06:09,750 --> 01:06:20,519
so we didn't want to tune that probably

1189
01:06:11,550 --> 01:06:23,280
you know but you know like we really

1190
01:06:20,519 --> 01:06:26,670
take no hit from adding that was adding

1191
01:06:23,280 --> 01:06:30,570
six more light sources right and it just

1192
01:06:26,670 --> 01:06:34,139
works which is pretty great you know I'm

1193
01:06:30,570 --> 01:06:35,789
saying and so I think that's nice

1194
01:06:34,139 --> 01:06:37,379
because it means you know we have the

1195
01:06:35,789 --> 01:06:40,320
option to just like throw lights around

1196
01:06:37,380 --> 01:06:42,420
however we want and we don't really

1197
01:06:40,320 --> 01:06:45,180
suffer performance penalty because we're

1198
01:06:42,420 --> 01:06:47,099
always convecting light every frame for

1199
01:06:45,179 --> 01:06:48,750
every surface so it's not like we're

1200
01:06:47,099 --> 01:06:57,409
doing something that has a per light

1201
01:06:48,750 --> 01:07:00,690
cost right at the moment we're also like

1202
01:06:57,409 --> 01:07:02,429
so I got a switchback too I got to make

1203
01:07:00,690 --> 01:07:04,829
it so we default to the plus one I think

1204
01:07:02,429 --> 01:07:06,000
I want to use the Poisson version of the

1205
01:07:04,829 --> 01:07:07,829
lighting but we're going to improve it a

1206
01:07:06,000 --> 01:07:13,440
little bit too so let's go ahead and

1207
01:07:07,829 --> 01:07:14,789
switch to pass on by default I think

1208
01:07:13,440 --> 01:07:19,889
that's the one I want to go with just

1209
01:07:14,789 --> 01:07:24,929
based on looking at them so here's the

1210
01:07:19,889 --> 01:07:27,150
poisson based version and right you can

1211
01:07:24,929 --> 01:07:29,009
see how it over lights that area because

1212
01:07:27,150 --> 01:07:30,269
of that that distance and we don't know

1213
01:07:29,010 --> 01:07:31,470
what that distance should be set to

1214
01:07:30,269 --> 01:07:32,759
right it could be we just need to set

1215
01:07:31,469 --> 01:07:34,230
that distance a little higher and then

1216
01:07:32,760 --> 01:07:36,510
it's fine

1217
01:07:34,230 --> 01:07:38,400
but it just it leads to errors because

1218
01:07:36,510 --> 01:07:40,140
we don't do like occlusion to figure out

1219
01:07:38,400 --> 01:07:41,730
like whether or not you could see the

1220
01:07:40,139 --> 01:07:43,920
lighting that's supposedly coming from

1221
01:07:41,730 --> 01:07:46,289
there so we have you know we could do

1222
01:07:43,920 --> 01:07:49,289
more work on our construction where we

1223
01:07:46,289 --> 01:07:50,608
build those boxes of light distributions

1224
01:07:49,289 --> 01:07:53,518
that would prevent having

1225
01:07:50,608 --> 01:07:55,469
errors of that forum now you know again

1226
01:07:53,518 --> 01:07:57,598
in a game it's hard for people to know

1227
01:07:55,469 --> 01:08:00,629
that that really is an error sometimes

1228
01:07:57,599 --> 01:08:04,200
but you know so you've got a lot of

1229
01:08:00,630 --> 01:08:05,190
leeway there you just want nice effects

1230
01:08:04,199 --> 01:08:07,588
they don't necessarily have to be

1231
01:08:05,190 --> 01:08:08,789
accurate and especially with something

1232
01:08:07,588 --> 01:08:10,440
like lighting but it's just like you can

1233
01:08:08,789 --> 01:08:12,150
kind of see like that light is coming

1234
01:08:10,440 --> 01:08:15,539
from up here because it's casting to a

1235
01:08:12,150 --> 01:08:16,949
box that's a little further away and so

1236
01:08:15,539 --> 01:08:20,548
it might be that like you know that

1237
01:08:16,948 --> 01:08:24,960
that's just the that distance is too low

1238
01:08:20,548 --> 01:08:29,868
right so if we come down here we also

1239
01:08:24,960 --> 01:08:29,868
really probably don't need this anymore

1240
01:08:36,048 --> 01:08:43,019
so if we take a look in here we've got

1241
01:08:38,609 --> 01:08:44,639
the close enough thing so this T close

1242
01:08:43,020 --> 01:08:48,330
enough you know maybe that's more like

1243
01:08:44,639 --> 01:08:49,920
ten I don't know right and it's hard to

1244
01:08:48,329 --> 01:08:51,539
say we'll have to tune that value and

1245
01:08:49,920 --> 01:08:53,279
see what our performance looks like and

1246
01:08:51,539 --> 01:08:57,569
see what our our stability looks like

1247
01:08:53,279 --> 01:08:59,609
and so on but if we do something like

1248
01:08:57,569 --> 01:09:01,350
that and we're gonna have to make sure

1249
01:08:59,609 --> 01:09:03,060
we're bundled for us to evaluate the

1250
01:09:01,350 --> 01:09:04,650
real cost but if we do something like

1251
01:09:03,060 --> 01:09:06,480
that then we'll get a lot less of those

1252
01:09:04,649 --> 01:09:08,158
errors so now the lighting is would be

1253
01:09:06,479 --> 01:09:09,718
much more accurate than it was before

1254
01:09:08,158 --> 01:09:13,888
because it actually does much more

1255
01:09:09,719 --> 01:09:15,389
localized occlusion right and so now if

1256
01:09:13,889 --> 01:09:16,829
you look up here although these people

1257
01:09:15,389 --> 01:09:19,170
are still lighting up there they're not

1258
01:09:16,829 --> 01:09:21,479
lighting down here because these people

1259
01:09:19,170 --> 01:09:23,250
correctly pick up these as occluding

1260
01:09:21,479 --> 01:09:27,088
them before checking for lights that are

1261
01:09:23,250 --> 01:09:31,859
aggregated somewhere else right so

1262
01:09:27,088 --> 01:09:35,850
that's just worth noting but again

1263
01:09:31,859 --> 01:09:38,338
looking really good I mean I'm really

1264
01:09:35,850 --> 01:09:42,838
happy with this I think this is pretty

1265
01:09:38,338 --> 01:09:45,059
awesome and I think I would go ahead and

1266
01:09:42,838 --> 01:09:46,759
press forward on this now we still have

1267
01:09:45,060 --> 01:09:48,719
a little bit more we can do here

1268
01:09:46,759 --> 01:09:51,329
obviously like I saying

1269
01:09:48,719 --> 01:09:52,920
so this sampling is not cosine biased

1270
01:09:51,329 --> 01:09:57,389
and we then we still introduce the

1271
01:09:52,920 --> 01:10:00,710
cosine bias later so we could probably

1272
01:09:57,389 --> 01:10:00,710
still fix some of that

1273
01:10:02,670 --> 01:10:07,810
so if we want to and and then we have to

1274
01:10:05,800 --> 01:10:11,500
do our bundling for Speed purposes right

1275
01:10:07,810 --> 01:10:13,090
so if we wanted to generate so we're

1276
01:10:11,500 --> 01:10:15,909
using the Poisson samples here if we

1277
01:10:13,090 --> 01:10:17,920
wanted to generate Poisson samples that

1278
01:10:15,909 --> 01:10:20,380
are cosine weighted there actually are

1279
01:10:17,920 --> 01:10:22,060
some other ways we can do it and in fact

1280
01:10:20,380 --> 01:10:24,369
we can make our Poisson generator

1281
01:10:22,060 --> 01:10:26,490
probably a lot better than it is right

1282
01:10:24,369 --> 01:10:28,510
now - by taking advantage of some

1283
01:10:26,489 --> 01:10:29,979
opportunities that we have here so let's

1284
01:10:28,510 --> 01:10:35,050
talk about those and maybe go ahead and

1285
01:10:29,979 --> 01:10:36,489
implement that right so if we pop back

1286
01:10:35,050 --> 01:10:40,329
to Milton for a second here and do a

1287
01:10:36,489 --> 01:10:41,380
little bit of drawing one of the classic

1288
01:10:40,329 --> 01:10:44,409
ways and this has been brought up on

1289
01:10:41,380 --> 01:10:46,029
stream as well but one of the classic

1290
01:10:44,409 --> 01:10:47,439
ways of doing cosine weighting if you

1291
01:10:46,029 --> 01:10:50,139
know that you can generate things in a

1292
01:10:47,439 --> 01:10:51,489
disc pattern so one of the classic ways

1293
01:10:50,140 --> 01:10:54,430
of generating saying that's cosine

1294
01:10:51,489 --> 01:10:57,309
biased is if you were trying to generate

1295
01:10:54,430 --> 01:10:59,110
cosine bias and by cosine bias what I

1296
01:10:57,310 --> 01:11:01,600
mean is if we are looking at the

1297
01:10:59,109 --> 01:11:03,519
Hemisphere we know that we're gonna very

1298
01:11:01,600 --> 01:11:05,470
low weight things that are in these

1299
01:11:03,520 --> 01:11:06,490
directions and we're gonna high weight

1300
01:11:05,470 --> 01:11:08,409
things that are in these directions

1301
01:11:06,489 --> 01:11:10,420
because of the way that the lighting

1302
01:11:08,409 --> 01:11:13,649
shaft Falls the amount of light that

1303
01:11:10,420 --> 01:11:17,920
gets collected from things in that area

1304
01:11:13,649 --> 01:11:21,909
it's the rule member we drew it out the

1305
01:11:17,920 --> 01:11:23,529
amount of light coming in from this

1306
01:11:21,909 --> 01:11:25,659
right triangle right versus the one

1307
01:11:23,529 --> 01:11:29,279
coming in from here right the amount the

1308
01:11:25,659 --> 01:11:32,439
size of that aperture is very different

1309
01:11:29,279 --> 01:11:34,269
so if we know that we want to have that

1310
01:11:32,439 --> 01:11:39,699
weighting what we can do is take that

1311
01:11:34,270 --> 01:11:41,320
weighting out of the light propagation

1312
01:11:39,699 --> 01:11:43,510
function right cuz right now what's

1313
01:11:41,319 --> 01:11:46,149
happening is that actually this angular

1314
01:11:43,510 --> 01:11:49,150
fall-off term here is doing that inner

1315
01:11:46,149 --> 01:11:52,269
product what we could do instead is just

1316
01:11:49,149 --> 01:11:54,639
get rid of that right so we could say

1317
01:11:52,270 --> 01:11:55,630
you know what the angular fall-off isn't

1318
01:11:54,640 --> 01:11:58,720
gonna count anymore

1319
01:11:55,630 --> 01:12:03,100
right we're just not gonna count it

1320
01:11:58,720 --> 01:12:04,690
anymore and if we were to do that now we

1321
01:12:03,100 --> 01:12:08,320
would be getting essentially an

1322
01:12:04,689 --> 01:12:10,869
erroneous light you know it would be

1323
01:12:08,319 --> 01:12:14,109
wrong how much light that we're actually

1324
01:12:10,869 --> 01:12:14,859
getting in the scene unless we then bias

1325
01:12:14,109 --> 01:12:17,849
our

1326
01:12:14,859 --> 01:12:20,618
sampling to always go biased in the

1327
01:12:17,850 --> 01:12:22,600
towards samples that come from higher up

1328
01:12:20,618 --> 01:12:25,569
because we can basically put the cosine

1329
01:12:22,600 --> 01:12:27,610
term into the sampling bias rather than

1330
01:12:25,569 --> 01:12:32,109
just something that happens after the

1331
01:12:27,609 --> 01:12:34,479
fact right and so in order to do that

1332
01:12:32,109 --> 01:12:36,849
all we really have to do there say okay

1333
01:12:34,479 --> 01:12:37,539
if we're going to bias our sampling in

1334
01:12:36,850 --> 01:12:39,639
that fashion

1335
01:12:37,539 --> 01:12:42,329
we now need these functions to really

1336
01:12:39,639 --> 01:12:45,460
put out things that are biased cosine

1337
01:12:42,329 --> 01:12:49,868
weighted weighted towards the cosine

1338
01:12:45,460 --> 01:12:51,219
right so in order to do that again for

1339
01:12:49,868 --> 01:12:52,179
plus on sample so I think it's one we

1340
01:12:51,219 --> 01:12:53,439
want to go with it's pretty

1341
01:12:52,179 --> 01:12:55,960
straightforward for us to do that

1342
01:12:53,439 --> 01:12:59,019
actually one of the techniques for it is

1343
01:12:55,960 --> 01:13:02,020
to say well why don't we just say let's

1344
01:12:59,020 --> 01:13:06,010
generate things in a plus on pattern on

1345
01:13:02,020 --> 01:13:07,989
a disk and then project them up because

1346
01:13:06,010 --> 01:13:09,699
if we project them up then what's going

1347
01:13:07,988 --> 01:13:12,209
to happen you can kind of see here if I

1348
01:13:09,698 --> 01:13:16,388
draw it in 2d what's gonna happen is

1349
01:13:12,210 --> 01:13:18,579
most of our points right that are close

1350
01:13:16,389 --> 01:13:21,609
to the edge here they're still gonna

1351
01:13:18,579 --> 01:13:23,738
project up quite a ways and most of our

1352
01:13:21,609 --> 01:13:26,710
points that are in the center will sort

1353
01:13:23,738 --> 01:13:29,799
of still stay in the center so it's very

1354
01:13:26,710 --> 01:13:31,448
hard to produce things down here because

1355
01:13:29,800 --> 01:13:33,219
the upward projection means you have to

1356
01:13:31,448 --> 01:13:35,019
be really close to the edge to get it

1357
01:13:33,219 --> 01:13:37,179
where as it's really easy to produce

1358
01:13:35,020 --> 01:13:38,830
points here because any point at all

1359
01:13:37,179 --> 01:13:41,440
that was roughly in this shaft is going

1360
01:13:38,829 --> 01:13:44,769
to project right on up to there right so

1361
01:13:41,439 --> 01:13:49,178
it creates a natural cosine weighting by

1362
01:13:44,770 --> 01:13:50,889
projecting it up to the sphere and so

1363
01:13:49,179 --> 01:13:53,050
what we can do is just generate things

1364
01:13:50,889 --> 01:13:55,750
in a disk and then project them up to

1365
01:13:53,050 --> 01:13:58,960
the sphere so for starters what we can

1366
01:13:55,750 --> 01:14:02,368
do is we can generate our sphere and

1367
01:13:58,960 --> 01:14:06,069
project up as two separate passes right

1368
01:14:02,368 --> 01:14:08,589
so let's change our plus on generator to

1369
01:14:06,069 --> 01:14:11,380
do that so what I want to do is you can

1370
01:14:08,590 --> 01:14:12,940
see here we're running like the lighting

1371
01:14:11,380 --> 01:14:15,250
equation and all that and that's all

1372
01:14:12,939 --> 01:14:18,039
well and good but what I'd rather do at

1373
01:14:15,250 --> 01:14:19,829
the moment is I want to go back to the

1374
01:14:18,039 --> 01:14:22,868
thing where we were drawing these things

1375
01:14:19,829 --> 01:14:24,340
and so I can see the distribution and

1376
01:14:22,868 --> 01:14:28,808
make sure that we're doing it properly

1377
01:14:24,340 --> 01:14:31,300
so if we come on down to this code here

1378
01:14:28,809 --> 01:14:33,610
and we take a look at how we were

1379
01:14:31,300 --> 01:14:35,170
redrawing this stuff before I want to

1380
01:14:33,609 --> 01:14:39,248
re-enable the one that was just like

1381
01:14:35,170 --> 01:14:46,029
putting oops that's not what I wanted at

1382
01:14:39,248 --> 01:14:48,158
all I lied I want this one and I want

1383
01:14:46,029 --> 01:14:49,719
this one to draw our sampling patterns

1384
01:14:48,158 --> 01:14:52,689
so what this is going to do is this is

1385
01:14:49,719 --> 01:14:54,309
going to go ahead and take however many

1386
01:14:52,689 --> 01:14:56,379
of these are in one of the sample point

1387
01:14:54,309 --> 01:14:58,389
patterns we're going to go through one

1388
01:14:56,380 --> 01:15:01,208
of the sample point patterns and we're

1389
01:14:58,389 --> 01:15:11,920
gonna grab out each of the sample points

1390
01:15:01,208 --> 01:15:18,099
right and we've got four per so the

1391
01:15:11,920 --> 01:15:19,929
component index here where we don't

1392
01:15:18,099 --> 01:15:21,010
really need this color table thing

1393
01:15:19,929 --> 01:15:23,170
anymore

1394
01:15:21,010 --> 01:15:25,269
for any particular reason I'll still

1395
01:15:23,170 --> 01:15:27,059
leave it in there but we'd like this is

1396
01:15:25,269 --> 01:15:28,708
not particularly relevant obviously

1397
01:15:27,059 --> 01:15:31,059
anyway

1398
01:15:28,708 --> 01:15:35,738
if we did want to put that in there we

1399
01:15:31,059 --> 01:15:37,380
can do four times point index plus comp

1400
01:15:35,738 --> 01:15:40,029
index that would still get the

1401
01:15:37,380 --> 01:15:41,409
alternating colors anyway

1402
01:15:40,029 --> 01:15:43,208
so if we want to grab out the normal

1403
01:15:41,408 --> 01:15:45,458
here we can look at the sample point

1404
01:15:43,208 --> 01:15:48,340
patterns that we have we're going to

1405
01:15:45,458 --> 01:15:50,498
just draw the zero with one and we're

1406
01:15:48,340 --> 01:15:52,840
going to take the point index out of

1407
01:15:50,498 --> 01:15:55,630
that we want to do a get component on it

1408
01:15:52,840 --> 01:15:58,029
so that we can just get a v3 out of it

1409
01:15:55,630 --> 01:16:01,150
so then at that point we draw it and

1410
01:15:58,029 --> 01:16:03,309
we're good to go right so that's just

1411
01:16:01,149 --> 01:16:06,279
reinstating the thing that draws these

1412
01:16:03,309 --> 01:16:08,409
components that draws the the sample

1413
01:16:06,279 --> 01:16:12,099
pattern so that if we go in here let me

1414
01:16:08,408 --> 01:16:14,859
get this out of the way to go in here we

1415
01:16:12,099 --> 01:16:16,809
can see our Plus on pattern that's what

1416
01:16:14,859 --> 01:16:18,098
it looks like at the moment and so now

1417
01:16:16,809 --> 01:16:22,570
what I want to do is I just want to

1418
01:16:18,099 --> 01:16:24,610
generate a disk worth of data so I want

1419
01:16:22,569 --> 01:16:27,728
to generate a plus on pattern but I

1420
01:16:24,609 --> 01:16:30,639
might generate it on a disk okay

1421
01:16:27,729 --> 01:16:34,539
we'll see how that works so I'm gonna go

1422
01:16:30,639 --> 01:16:37,208
to generate plus on samples and on here

1423
01:16:34,538 --> 01:16:40,389
what I want to do is generate things in

1424
01:16:37,208 --> 01:16:42,039
the disk so what I want to do is just

1425
01:16:40,389 --> 01:16:45,970
keep the same

1426
01:16:42,039 --> 01:16:47,800
loop here but when I do this v3 what I'm

1427
01:16:45,970 --> 01:16:51,159
gonna do is I don't care what the Z

1428
01:16:47,800 --> 01:16:53,350
value is okay

1429
01:16:51,159 --> 01:16:55,689
so I'm just gonna generate these in a

1430
01:16:53,350 --> 01:16:58,720
disc instead of measuring by the cosine

1431
01:16:55,689 --> 01:17:01,149
I'm now gonna measure by the distance so

1432
01:16:58,720 --> 01:17:10,000
I'm going to say like okay there's a

1433
01:17:01,149 --> 01:17:12,729
disc value oh that was a spring back

1434
01:17:10,000 --> 01:17:15,100
yeah so all I'm gonna do now is say I

1435
01:17:12,729 --> 01:17:17,859
want to take the distance so I'm gonna

1436
01:17:15,100 --> 01:17:22,230
take the length squared we might as well

1437
01:17:17,859 --> 01:17:24,939
of the one that we're checking here and

1438
01:17:22,229 --> 01:17:27,039
the one that I've produced and again we

1439
01:17:24,939 --> 01:17:29,859
know this is now just in 2d because we

1440
01:17:27,039 --> 01:17:35,710
know the Z's are always zero and I want

1441
01:17:29,859 --> 01:17:38,199
to make sure that if it is less than so

1442
01:17:35,710 --> 01:17:41,649
that the length squared is less than the

1443
01:17:38,199 --> 01:17:45,359
minimum distance squared then I want to

1444
01:17:41,649 --> 01:17:47,979
throw it out right we stop at that point

1445
01:17:45,359 --> 01:17:49,899
so I just need a value for a minimum

1446
01:17:47,979 --> 01:17:51,819
distance squared and again this is just

1447
01:17:49,899 --> 01:17:53,139
a constant now I don't know what that

1448
01:17:51,819 --> 01:17:55,000
value should be because we're trying to

1449
01:17:53,140 --> 01:17:57,010
pack 64 points in here I'm not sure what

1450
01:17:55,000 --> 01:17:58,930
it should be you know maybe it's 0.1 or

1451
01:17:57,010 --> 01:18:05,680
something like that well know if if we

1452
01:17:58,930 --> 01:18:11,190
can't actually run successfully what is

1453
01:18:05,680 --> 01:18:14,470
the question oh sorry supposed to be a -

1454
01:18:11,189 --> 01:18:20,429
there you go and so let's see if we can

1455
01:18:14,470 --> 01:18:20,430
get this going okay so that's too small

1456
01:18:26,420 --> 01:18:30,429
so now we should see a point here oh

1457
01:18:31,179 --> 01:18:38,449
yeah that's why we don't want to

1458
01:18:35,748 --> 01:18:40,399
normalize these yet there we go

1459
01:18:38,448 --> 01:18:43,029
so this will go ahead and produce our

1460
01:18:40,399 --> 01:18:44,839
disk and sorry about that

1461
01:18:43,029 --> 01:18:47,090
afterwards we'll figure out how to lock

1462
01:18:44,840 --> 01:18:52,219
them out but yeah so let's try that one

1463
01:18:47,090 --> 01:18:54,199
more time all right so here's our random

1464
01:18:52,219 --> 01:18:56,658
samples right and they're not conforming

1465
01:18:54,198 --> 01:18:58,518
to disk at all so that's fine but

1466
01:18:56,658 --> 01:19:02,058
they're also not really very Poisson

1467
01:18:58,519 --> 01:19:04,489
distributed because this is probably too

1468
01:19:02,059 --> 01:19:06,498
low so the first thing we want to do to

1469
01:19:04,488 --> 01:19:08,118
get this to the place that I wanted it

1470
01:19:06,498 --> 01:19:10,069
to be which is a you know a random

1471
01:19:08,118 --> 01:19:16,130
hemisphere sampling cosine weighted is

1472
01:19:10,069 --> 01:19:17,630
now we want to reject anything oops we

1473
01:19:16,130 --> 01:19:20,900
want to reject anything that's not in

1474
01:19:17,630 --> 01:19:25,340
the circle right so we want a unit

1475
01:19:20,899 --> 01:19:28,488
circle so if we find that in fact I can

1476
01:19:25,340 --> 01:19:36,679
just use the valid here if we find that

1477
01:19:28,488 --> 01:19:39,709
the x squared oops plus the Y squared is

1478
01:19:36,679 --> 01:19:41,300
greater than one that means it's outside

1479
01:19:39,710 --> 01:19:45,170
the circle and we want to throw it away

1480
01:19:41,300 --> 01:19:47,420
right so since this is supposed to be

1481
01:19:45,170 --> 01:19:51,800
valid it needs to be inside so we really

1482
01:19:47,420 --> 01:19:53,029
want less than or equal to one but that

1483
01:19:51,800 --> 01:19:55,760
will constrain us to being inside the

1484
01:19:53,029 --> 01:19:57,109
disk and so now if we look we only have

1485
01:19:55,760 --> 01:19:59,179
points that are inside the disk but

1486
01:19:57,109 --> 01:20:00,768
they're not very well spread out and

1487
01:19:59,179 --> 01:20:04,489
again that's because this value is

1488
01:20:00,769 --> 01:20:07,429
probably two lakhs so we need to enforce

1489
01:20:04,488 --> 01:20:09,439
a higher distance constraint here on

1490
01:20:07,429 --> 01:20:10,998
these and so now it's starting to spread

1491
01:20:09,439 --> 01:20:14,868
out a little bit better but still not

1492
01:20:10,998 --> 01:20:22,519
great and so let's keep going Jack it up

1493
01:20:14,868 --> 01:20:25,118
a little bit more it's still not quite

1494
01:20:22,519 --> 01:20:25,119
good enough

1495
01:20:29,340 --> 01:20:33,729
now we're starting to get somewhere

1496
01:20:31,238 --> 01:20:35,738
right that's starting to look okay but I

1497
01:20:33,729 --> 01:20:42,329
still think we can we want to probe for

1498
01:20:35,738 --> 01:20:42,328
the crash point there we go

1499
01:20:48,609 --> 01:20:52,988
so that's looking real nice right that's

1500
01:20:51,248 --> 01:20:53,998
looking like a nice distribution of

1501
01:20:52,988 --> 01:21:01,478
points right

1502
01:20:53,998 --> 01:21:04,599
pretty even looking good to me oops

1503
01:21:01,479 --> 01:21:06,479
let's see how 1.7 is I assume that's too

1504
01:21:04,599 --> 01:21:11,650
high

1505
01:21:06,479 --> 01:21:14,530
nope not quite so that's a real nice

1506
01:21:11,649 --> 01:21:18,748
distribution of points right there you

1507
01:21:14,529 --> 01:21:18,748
know I'm saying to you it's looking good

1508
01:21:19,139 --> 01:21:25,118
so now what we want to do is project

1509
01:21:23,229 --> 01:21:27,280
those up and if we're gonna project

1510
01:21:25,118 --> 01:21:29,408
those up all we really have to do is

1511
01:21:27,279 --> 01:21:32,139
just run through our disk now and do

1512
01:21:29,408 --> 01:21:35,859
exactly that right so we have a test

1513
01:21:32,139 --> 01:21:39,989
index and we go through all the points

1514
01:21:35,859 --> 01:21:43,889
we then say for each individual point

1515
01:21:39,988 --> 01:21:43,888
let me go ahead and grab it out

1516
01:21:49,738 --> 01:21:55,599
so what we want to do is modify P here

1517
01:21:52,569 --> 01:21:59,109
to project it up we know this quantity

1518
01:21:55,600 --> 01:22:02,739
again right and to be fair this is

1519
01:21:59,109 --> 01:22:11,529
really just the length of P so you know

1520
01:22:02,738 --> 01:22:13,689
if we wanted to we could just say that

1521
01:22:11,529 --> 01:22:16,420
there's no real reason for us to write

1522
01:22:13,689 --> 01:22:21,009
it out so this is actually you know a

1523
01:22:16,420 --> 01:22:23,310
shorthand way of saying that and you can

1524
01:22:21,010 --> 01:22:25,510
see we still get the same results there

1525
01:22:23,310 --> 01:22:28,090
so then what we want to do is say okay

1526
01:22:25,510 --> 01:22:29,530
if that's our length squared on P then

1527
01:22:28,090 --> 01:22:32,650
what we want to do here now is take our

1528
01:22:29,529 --> 01:22:34,689
destination index run through those and

1529
01:22:32,649 --> 01:22:38,649
do the same thing so we know what the

1530
01:22:34,689 --> 01:22:40,269
length squared of P is here and we want

1531
01:22:38,649 --> 01:22:42,879
to write an equation that will project

1532
01:22:40,270 --> 01:22:47,410
us up to the correct height to fill in

1533
01:22:42,880 --> 01:22:51,159
that gap so what we know about our our

1534
01:22:47,409 --> 01:22:56,789
circle here let me just here we can draw

1535
01:22:51,159 --> 01:23:01,210
it so we know effectively that we have

1536
01:22:56,789 --> 01:23:03,909
some some point right and I could do

1537
01:23:01,210 --> 01:23:06,460
this in sort of a 2d diagram we know

1538
01:23:03,909 --> 01:23:08,469
that we have along one of these axes

1539
01:23:06,460 --> 01:23:11,319
let's say the x axis we know we have

1540
01:23:08,469 --> 01:23:14,050
some point right and we know we want to

1541
01:23:11,319 --> 01:23:18,340
reject it up here so if we were only in

1542
01:23:14,050 --> 01:23:20,860
2d right how would we do that well we

1543
01:23:18,340 --> 01:23:27,430
know that we want the resulting vector

1544
01:23:20,859 --> 01:23:29,049
to be unit length right and so and if it

1545
01:23:27,430 --> 01:23:32,710
was unit length it will be by definition

1546
01:23:29,050 --> 01:23:35,890
on this sphere so what we need to do is

1547
01:23:32,710 --> 01:23:38,739
say okay if it's unit length we know

1548
01:23:35,890 --> 01:23:41,739
that it's length squared that we were

1549
01:23:38,738 --> 01:23:44,349
computing right has to equal one right

1550
01:23:41,738 --> 01:23:47,529
now we know it's less than or equal to

1551
01:23:44,350 --> 01:23:49,989
one it is not equal to one so what we

1552
01:23:47,529 --> 01:23:50,949
need to do is fill in the Z value

1553
01:23:49,988 --> 01:23:52,599
because remember the egg we're

1554
01:23:50,949 --> 01:23:54,760
projecting up to the sphere so that x

1555
01:23:52,600 --> 01:23:59,860
and y can't change we just need to fill

1556
01:23:54,760 --> 01:24:02,030
in the Z value such that we account for

1557
01:23:59,859 --> 01:24:05,029
the rest of the unit length

1558
01:24:02,029 --> 01:24:07,309
right so we want to say that our x

1559
01:24:05,029 --> 01:24:09,259
squared plus our y squared plus our Z

1560
01:24:07,310 --> 01:24:11,690
squared right where these two are known

1561
01:24:09,260 --> 01:24:15,380
and this one isn't we want to say that

1562
01:24:11,689 --> 01:24:18,349
that has to equal one because we want

1563
01:24:15,380 --> 01:24:21,319
this to always be unit length so if we

1564
01:24:18,350 --> 01:24:23,539
then solve for our Z right we're going

1565
01:24:21,319 --> 01:24:27,439
to have 1 minus x squared minus y

1566
01:24:23,539 --> 01:24:31,159
squared and we're gonna square root that

1567
01:24:27,439 --> 01:24:36,469
right so very very straightforward this

1568
01:24:31,159 --> 01:24:39,260
value here is the same as that right so

1569
01:24:36,470 --> 01:24:42,350
1 minus the length of the vector

1570
01:24:39,260 --> 01:24:46,039
currently Square rooted is what the Z

1571
01:24:42,350 --> 01:24:47,300
has to be set to does that make sense

1572
01:24:46,039 --> 01:24:50,149
so we already knew what the length

1573
01:24:47,300 --> 01:24:53,770
squared is of this thing that means our

1574
01:24:50,149 --> 01:24:57,369
Z value or I could just set it directly

1575
01:24:53,770 --> 01:25:02,540
is that oops

1576
01:24:57,369 --> 01:25:04,939
not quite that there we go

1577
01:25:02,539 --> 01:25:08,449
and now we know that we have a properly

1578
01:25:04,939 --> 01:25:10,159
normalized vector as a result if I

1579
01:25:08,449 --> 01:25:10,849
didn't mess up the math always a

1580
01:25:10,159 --> 01:25:15,439
possibility

1581
01:25:10,850 --> 01:25:17,810
um so going back to our visualization

1582
01:25:15,439 --> 01:25:22,729
now we should see these things nicely on

1583
01:25:17,810 --> 01:25:25,640
a dome and we do so in theory now we're

1584
01:25:22,729 --> 01:25:27,919
getting this should be cosine weighted

1585
01:25:25,640 --> 01:25:31,340
in terms of our samples let's take a

1586
01:25:27,920 --> 01:25:36,170
look and see if it really is it's a

1587
01:25:31,340 --> 01:25:39,550
little hard to say just how cosine

1588
01:25:36,170 --> 01:25:39,550
weighted that actually is

1589
01:25:47,319 --> 01:25:53,949
kind of want to be inside the sphere of

1590
01:25:49,359 --> 01:25:57,569
looking out for this you know but it

1591
01:25:53,949 --> 01:25:57,569
does seem pretty good

1592
01:26:05,448 --> 01:26:13,569
um so I feel like you know it seems

1593
01:26:09,090 --> 01:26:15,288
pretty good I don't really know though

1594
01:26:13,569 --> 01:26:17,819
[Music]

1595
01:26:15,288 --> 01:26:20,340
so what I kind of want to do is check

1596
01:26:17,819 --> 01:26:24,628
does that make sense like what I'd like

1597
01:26:20,340 --> 01:26:26,429
to do here is see whether I think it

1598
01:26:24,628 --> 01:26:30,948
really is weighted or not by just

1599
01:26:26,429 --> 01:26:34,260
summing up all of the samples and seeing

1600
01:26:30,948 --> 01:26:40,828
what we get right because we should be

1601
01:26:34,260 --> 01:26:45,179
able to we should be able to actually do

1602
01:26:40,828 --> 01:26:51,840
a a summation over the sample points and

1603
01:26:45,179 --> 01:26:54,328
produce a value that confirms how cosine

1604
01:26:51,840 --> 01:27:06,328
weighted it actually is does that make

1605
01:26:54,328 --> 01:27:10,618
sense so if I was to do the integral

1606
01:27:06,328 --> 01:27:12,299
over the sphere or even just do a test I

1607
01:27:10,618 --> 01:27:14,009
guess one of the problems is how many of

1608
01:27:12,300 --> 01:27:16,939
these you know are you gonna do exactly

1609
01:27:14,010 --> 01:27:16,939
and so on

1610
01:27:24,429 --> 01:27:29,770
if I was to take the integral over the

1611
01:27:27,039 --> 01:27:31,779
whole sphere right I mean over the whole

1612
01:27:29,770 --> 01:27:33,730
hemisphere of something that was cosine

1613
01:27:31,779 --> 01:27:40,198
weighted I get a particular numerical

1614
01:27:33,729 --> 01:27:42,069
value out if I do the same thing on my

1615
01:27:40,198 --> 01:27:46,000
supposedly cosine weighted set of

1616
01:27:42,069 --> 01:27:47,679
samples and do a summation of one at

1617
01:27:46,000 --> 01:27:50,109
each point instead of the angular

1618
01:27:47,679 --> 01:28:00,100
fall-off at each point I should get

1619
01:27:50,109 --> 01:28:02,469
similar results so let's try that I also

1620
01:28:00,100 --> 01:28:10,320
would like to turn on those debug lines

1621
01:28:02,469 --> 01:28:10,319
real quick so here's the casting

1622
01:28:39,819 --> 01:28:44,788
not quite sure how this is getting lit

1623
01:28:47,460 --> 01:28:54,550
because it's only looking downward I

1624
01:28:51,179 --> 01:28:59,408
wonder if we have a bug in terms of the

1625
01:28:54,550 --> 01:29:02,909
directionality of light somewhere where

1626
01:28:59,408 --> 01:29:07,000
that cuz that should never hit anything

1627
01:29:02,908 --> 01:29:11,920
I'm interested to know I want to move my

1628
01:29:07,000 --> 01:29:14,800
sampler down there actually let's do

1629
01:29:11,920 --> 01:29:20,019
that right now before I do any more with

1630
01:29:14,800 --> 01:29:22,529
the cosign so let's suppose that I move

1631
01:29:20,019 --> 01:29:22,530
the sky around

1632
01:29:37,099 --> 01:29:45,050
debug point location and I want to move

1633
01:29:42,399 --> 01:29:47,359
towards the blue I just basically want

1634
01:29:45,050 --> 01:29:56,500
to be under this this blue thing here

1635
01:29:47,359 --> 01:29:56,500
right so let me move I guess back

1636
01:29:58,760 --> 01:30:01,850
[Music]

1637
01:30:14,449 --> 01:30:28,679
not sure where my debug lines are at the

1638
01:30:17,130 --> 01:30:32,390
moment there we go so that's just

1639
01:30:28,680 --> 01:30:32,390
straight up pointing the wrong way

1640
01:30:49,328 --> 01:30:56,759
like it's able to shoot things out the

1641
01:30:52,029 --> 01:31:00,340
back somehow but I don't know how and

1642
01:30:56,760 --> 01:31:02,789
you can see it's not it's it is trying

1643
01:31:00,340 --> 01:31:06,219
to shoot things out the bottom as well

1644
01:31:02,789 --> 01:31:07,719
so it's shooting things off of it in

1645
01:31:06,219 --> 01:31:10,029
every direction so that's a very

1646
01:31:07,719 --> 01:31:12,340
interesting bug and we now have a good

1647
01:31:10,029 --> 01:31:14,198
test case to and I'm gonna leave this

1648
01:31:12,340 --> 01:31:17,520
locked in here because that should not

1649
01:31:14,198 --> 01:31:22,328
be happening right so what is the normal

1650
01:31:17,520 --> 01:31:31,900
at this point is my first question

1651
01:31:22,328 --> 01:31:35,259
let's go take a look so here is you know

1652
01:31:31,899 --> 01:31:37,118
the normal here's the x and y-axes so

1653
01:31:35,260 --> 01:31:38,849
the first thing I'm going to do is when

1654
01:31:37,118 --> 01:31:41,259
it changed the way this is being drawn

1655
01:31:38,849 --> 01:31:47,889
what I want to do here is I'm going to

1656
01:31:41,260 --> 01:31:55,300
use a a cyan line for a hit

1657
01:31:47,889 --> 01:31:57,219
and a yellow line for a Miss okay so

1658
01:31:55,300 --> 01:31:59,440
those should all be yellow and those

1659
01:31:57,219 --> 01:32:01,109
should all these ones there sampling the

1660
01:31:59,439 --> 01:32:05,229
interior here this should all be cyan

1661
01:32:01,109 --> 01:32:06,279
right see you bad happening then I'm

1662
01:32:05,229 --> 01:32:09,339
going to do is under our coordinate

1663
01:32:06,279 --> 01:32:11,319
system so I can see for the sample point

1664
01:32:09,340 --> 01:32:12,819
what its coordinate system is so I'm

1665
01:32:11,319 --> 01:32:16,658
gonna grab this push debug line

1666
01:32:12,819 --> 01:32:18,099
situation here and rather than drawing

1667
01:32:16,658 --> 01:32:21,729
anything per ray I'm gonna just draw

1668
01:32:18,099 --> 01:32:25,900
something per point here for the sample

1669
01:32:21,729 --> 01:32:28,509
point so when I hit this sample point

1670
01:32:25,899 --> 01:32:31,868
that I want to know about I'm gonna push

1671
01:32:28,510 --> 01:32:33,809
a few debug lines on here and these are

1672
01:32:31,868 --> 01:32:39,759
not going to be colored by anything

1673
01:32:33,809 --> 01:32:41,770
they're going to be wrote actually and

1674
01:32:39,760 --> 01:32:48,280
they're going to go from the position of

1675
01:32:41,770 --> 01:32:56,099
the sample point out along a vector like

1676
01:32:48,279 --> 01:32:56,099
so and I'm just gonna draw all of it

1677
01:32:57,409 --> 01:33:04,199
oops so this would be the world axis

1678
01:33:02,369 --> 01:33:07,289
right if I wanted to see what the world

1679
01:33:04,199 --> 01:33:09,659
axis were but I don't want the actual

1680
01:33:07,289 --> 01:33:11,340
world axis what I want is the axis for

1681
01:33:09,659 --> 01:33:13,738
this point and it turns out we actually

1682
01:33:11,340 --> 01:33:16,020
have that information right that's what

1683
01:33:13,738 --> 01:33:17,609
we're using to base our cast off and I

1684
01:33:16,020 --> 01:33:21,270
want to see whether it's right cuz maybe

1685
01:33:17,609 --> 01:33:25,159
it's just wrong and if it's wrong that

1686
01:33:21,270 --> 01:33:25,160
explains why our construction is bogus

1687
01:33:32,420 --> 01:33:40,260
oops so here's our coordinate frame

1688
01:33:36,810 --> 01:33:43,470
based off of the sample point and now I

1689
01:33:40,260 --> 01:33:45,720
can look and see what it actually has so

1690
01:33:43,470 --> 01:33:48,449
looking here you can see that actually

1691
01:33:45,720 --> 01:33:50,820
the coordinate frame is very good it's

1692
01:33:48,449 --> 01:33:52,949
exactly what I would have expected so

1693
01:33:50,819 --> 01:33:57,389
although our coordinate frame is very

1694
01:33:52,949 --> 01:34:01,019
good our ability to place our samples is

1695
01:33:57,390 --> 01:34:03,060
not right so now we kind of have to go

1696
01:34:01,020 --> 01:34:06,330
in here and look at this situation

1697
01:34:03,060 --> 01:34:10,710
because this is borked whatever is going

1698
01:34:06,329 --> 01:34:12,090
on here is just wrong okay so we have to

1699
01:34:10,710 --> 01:34:15,590
figure out what's going on there so

1700
01:34:12,090 --> 01:34:15,590
let's take a look at what we've got here

1701
01:34:17,899 --> 01:34:24,179
so our sample for DX value is pulling

1702
01:34:21,210 --> 01:34:27,119
out 4 sample points from our sample

1703
01:34:24,180 --> 01:34:29,610
point arrays and these sample point

1704
01:34:27,119 --> 01:34:33,510
arrays should all be normalized so that

1705
01:34:29,609 --> 01:34:39,089
they're pointing upward right so if we

1706
01:34:33,510 --> 01:34:40,739
take sample point D X's D 4 X dot Z

1707
01:34:39,090 --> 01:34:43,470
there right and I don't know why we

1708
01:34:40,739 --> 01:34:45,029
still call it D 4 X because we don't

1709
01:34:43,470 --> 01:34:46,890
really need to like I could call it

1710
01:34:45,029 --> 01:34:53,460
something else I suppose but well

1711
01:34:46,890 --> 01:34:54,600
whatever so if we want to figure out

1712
01:34:53,460 --> 01:34:56,189
what's going wrong here we have to

1713
01:34:54,600 --> 01:34:58,530
figure out why are we getting this weird

1714
01:34:56,189 --> 01:35:00,059
why is this weird behavior happening so

1715
01:34:58,529 --> 01:35:02,550
this is supposed to be lofting the

1716
01:35:00,060 --> 01:35:04,440
normal up and the XY axis into something

1717
01:35:02,550 --> 01:35:06,570
that we can use as a something that

1718
01:35:04,439 --> 01:35:09,029
operates across our entire set of

1719
01:35:06,569 --> 01:35:11,549
vectors we have our sample points here

1720
01:35:09,029 --> 01:35:15,149
and these should allow us to move along

1721
01:35:11,550 --> 01:35:20,100
the x y&amp;z axis such that we effectively

1722
01:35:15,149 --> 01:35:23,009
transform the sample into the right

1723
01:35:20,100 --> 01:35:27,600
space right so this is we would expect

1724
01:35:23,010 --> 01:35:29,159
to be working to correctly transform it

1725
01:35:27,600 --> 01:35:34,140
to a line to the normal but doesn't

1726
01:35:29,159 --> 01:35:37,619
appear to be doing so right it doesn't

1727
01:35:34,140 --> 01:35:40,260
appear to be doing that at all so the

1728
01:35:37,619 --> 01:35:42,710
question is why isn't it doing that

1729
01:35:40,260 --> 01:35:42,710
right

1730
01:35:43,289 --> 01:35:47,039
and I have no idea

1731
01:35:52,359 --> 01:35:55,929
[Music]

1732
01:36:07,640 --> 01:36:18,810
now I suppose one thing that I should

1733
01:36:11,460 --> 01:36:21,270
point out here actually is maybe we have

1734
01:36:18,810 --> 01:36:36,300
a bug in our ray caster that's allowing

1735
01:36:21,270 --> 01:36:40,320
Ray's to cast backwards oops if that's

1736
01:36:36,300 --> 01:36:43,289
the case let me even give it a little

1737
01:36:40,319 --> 01:36:48,809
bit of an epsilon here but I think it's

1738
01:36:43,289 --> 01:36:49,739
looking bad right if that's the case

1739
01:36:48,810 --> 01:36:54,050
then really

1740
01:36:49,739 --> 01:36:58,260
yeah we're oriented properly perhaps but

1741
01:36:54,050 --> 01:36:59,760
we are yeah we may be actually doing

1742
01:36:58,260 --> 01:37:00,360
everything right but our ray caster is

1743
01:36:59,760 --> 01:37:02,550
busted

1744
01:37:00,359 --> 01:37:07,789
where do we check to make sure that a

1745
01:37:02,550 --> 01:37:07,789
hit has to be greater than zero right

1746
01:37:14,359 --> 01:37:19,149
and the answer appears to be absolutely

1747
01:37:16,789 --> 01:37:19,149
nowhere

1748
01:37:23,719 --> 01:37:32,390
right I mean here we are we

1749
01:37:29,329 --> 01:37:34,819
I like we have pre invert the Ray for

1750
01:37:32,390 --> 01:37:37,360
more speed but it is pre inverted so

1751
01:37:34,819 --> 01:37:37,359
that's

1752
01:37:53,220 --> 01:37:58,140
you know we come through here and we're

1753
01:37:55,800 --> 01:38:03,869
looking to see if key max is greater

1754
01:37:58,140 --> 01:38:08,190
than zero so we're if any of these are

1755
01:38:03,869 --> 01:38:13,829
true if any of these paths then we're

1756
01:38:08,189 --> 01:38:17,519
gonna get inside here right and this T

1757
01:38:13,829 --> 01:38:25,769
valid I think this T valid actually

1758
01:38:17,520 --> 01:38:28,020
needs this case right because what was

1759
01:38:25,770 --> 01:38:31,260
happening is certain times you would get

1760
01:38:28,020 --> 01:38:33,570
a max pass on some other Ray and it

1761
01:38:31,260 --> 01:38:37,380
would allow a team in that was- to sleep

1762
01:38:33,569 --> 01:38:40,469
sneak in here right which is which is

1763
01:38:37,380 --> 01:38:43,400
incorrect so I think that's what we were

1764
01:38:40,470 --> 01:38:43,400
having happen there

1765
01:38:52,829 --> 01:38:57,300
much much much better

1766
01:39:02,889 --> 01:39:05,670
lovely

1767
01:39:14,319 --> 01:39:22,329
okay so the first thing to note is well

1768
01:39:19,869 --> 01:39:24,729
for starters I'm absolutely loving how

1769
01:39:22,329 --> 01:39:26,529
good this is looking but the first thing

1770
01:39:24,729 --> 01:39:28,689
to note is we got a lot brighter when we

1771
01:39:26,529 --> 01:39:30,849
turned off the angular fall-off right

1772
01:39:28,689 --> 01:39:33,549
which suggests to me that our sampling

1773
01:39:30,850 --> 01:39:35,860
pattern obviously is not well it's it's

1774
01:39:33,550 --> 01:39:39,039
one of two things either our angular

1775
01:39:35,859 --> 01:39:40,960
fall-off was messed up and was taking

1776
01:39:39,039 --> 01:39:43,149
too much light out of the system for no

1777
01:39:40,960 --> 01:39:45,130
reason or something right so you know we

1778
01:39:43,149 --> 01:39:48,699
don't know that that was correct maybe

1779
01:39:45,130 --> 01:39:50,590
it was buggy but the other thing that

1780
01:39:48,699 --> 01:39:54,099
might be happening is our cosine

1781
01:39:50,590 --> 01:39:55,449
weighting is not proper right so I still

1782
01:39:54,100 --> 01:39:58,450
think we want to then go investigate

1783
01:39:55,449 --> 01:40:00,550
that but at least now we know we why we

1784
01:39:58,449 --> 01:40:03,309
were getting those weird we back cast

1785
01:40:00,550 --> 01:40:05,680
there so that was just just a bug in the

1786
01:40:03,310 --> 01:40:08,050
optimized routine so now this all looks

1787
01:40:05,680 --> 01:40:10,630
good because now the only coloring you

1788
01:40:08,050 --> 01:40:13,239
see on the bottom where there shouldn't

1789
01:40:10,630 --> 01:40:14,829
be any light at all is coming from if

1790
01:40:13,238 --> 01:40:17,109
it's just a plate that actually was

1791
01:40:14,829 --> 01:40:19,238
taking a sample like up here right so

1792
01:40:17,109 --> 01:40:20,649
that's valid because the sampling was

1793
01:40:19,238 --> 01:40:23,738
actually coming out of like right here

1794
01:40:20,649 --> 01:40:25,899
where it could see a light and it's just

1795
01:40:23,738 --> 01:40:28,419
you know we don't actually check to see

1796
01:40:25,899 --> 01:40:30,759
that the pixels down here were you know

1797
01:40:28,420 --> 01:40:32,260
not obscured by something right because

1798
01:40:30,760 --> 01:40:36,579
we're not ray casting per pixel or ray

1799
01:40:32,260 --> 01:40:40,000
casting per plate so that all seems

1800
01:40:36,579 --> 01:40:42,340
relatively straightforward right so I'm

1801
01:40:40,000 --> 01:40:46,319
happy with that I just want to know why

1802
01:40:42,340 --> 01:40:49,329
we didn't have a similar amount of light

1803
01:40:46,319 --> 01:40:51,569
when we switched between the angular

1804
01:40:49,329 --> 01:40:54,460
fall-off version and this version right

1805
01:40:51,569 --> 01:40:59,139
and so I think we need to maybe get more

1806
01:40:54,460 --> 01:41:02,710
work we have to do more work to to place

1807
01:40:59,140 --> 01:41:04,780
to get the cosine waiting to happen

1808
01:41:02,710 --> 01:41:11,020
uh I think so here's another problem

1809
01:41:04,779 --> 01:41:16,719
that I think we may run into although

1810
01:41:11,020 --> 01:41:18,520
white noise on a disc lofted up might

1811
01:41:16,719 --> 01:41:20,680
produce a pattern that's going to be

1812
01:41:18,520 --> 01:41:25,120
cosine weighted that doesn't mean that

1813
01:41:20,680 --> 01:41:27,039
blue noise does because blue noise has

1814
01:41:25,119 --> 01:41:29,559
the artificial property of

1815
01:41:27,039 --> 01:41:33,010
forcing coverage into areas that

1816
01:41:29,560 --> 01:41:37,090
wouldn't normally be filled by random

1817
01:41:33,010 --> 01:41:41,440
samples so I don't actually know if this

1818
01:41:37,090 --> 01:41:44,140
is a really good way to do that process

1819
01:41:41,439 --> 01:41:45,669
so maybe that our previous way of doing

1820
01:41:44,140 --> 01:41:47,440
this is actually better than the disk

1821
01:41:45,670 --> 01:41:51,399
method even though the disk method would

1822
01:41:47,439 --> 01:41:53,079
be good for the white noise version so I

1823
01:41:51,399 --> 01:41:55,029
just wanted to kind of point out that I

1824
01:41:53,079 --> 01:41:57,699
think we will have to do more analysis

1825
01:41:55,029 --> 01:42:02,289
to really even know now I don't know

1826
01:41:57,699 --> 01:42:06,519
where we're at for time today we got

1827
01:42:02,289 --> 01:42:10,750
about 15 minutes left I think so yeah I

1828
01:42:06,520 --> 01:42:12,850
think that's fine so we got about 15

1829
01:42:10,750 --> 01:42:14,560
minutes left today so we need to do like

1830
01:42:12,850 --> 01:42:16,270
I said two more things I'm not gonna try

1831
01:42:14,560 --> 01:42:18,220
and do the bundling then we'll save the

1832
01:42:16,270 --> 01:42:20,230
bundling for next week

1833
01:42:18,220 --> 01:42:22,980
and I'll go ahead and put that down in

1834
01:42:20,229 --> 01:42:22,979
here where is that

1835
01:42:58,680 --> 01:43:04,420
so that should be fine

1836
01:43:01,840 --> 01:43:06,699
what I want to do here is I want to now

1837
01:43:04,420 --> 01:43:10,119
take a look at that to see what that

1838
01:43:06,699 --> 01:43:14,199
waiting actually ends up being right so

1839
01:43:10,119 --> 01:43:18,340
what I'd like to do here is say let's

1840
01:43:14,199 --> 01:43:21,550
figure out how to do a sampling

1841
01:43:18,340 --> 01:43:24,010
comparison so let's suppose that I

1842
01:43:21,550 --> 01:43:27,850
wanted to create I don't know a quote

1843
01:43:24,010 --> 01:43:30,579
unquote ground truth version to see what

1844
01:43:27,850 --> 01:43:38,160
happens if I take a certain number of

1845
01:43:30,579 --> 01:43:41,949
samples and I want to generate them

1846
01:43:38,159 --> 01:43:48,479
randomly and then I want to do weighting

1847
01:43:41,949 --> 01:43:48,479
right so I'm going to go ahead and do

1848
01:43:55,979 --> 01:44:06,359
I need to do some way of generating a

1849
01:44:00,109 --> 01:44:13,789
random sample on the sphere which I need

1850
01:44:06,359 --> 01:44:18,409
to actually be unbiased so what I

1851
01:44:13,789 --> 01:44:23,670
probably can do is if I generate any

1852
01:44:18,409 --> 01:44:27,689
random vector and throw out any vectors

1853
01:44:23,670 --> 01:44:30,060
that are outside the sphere would that

1854
01:44:27,689 --> 01:44:32,449
give me an unbiased sampling of the

1855
01:44:30,060 --> 01:44:32,450
sphere

1856
01:44:53,520 --> 01:45:05,200
you know it's hard to say I'm not sure

1857
01:44:59,260 --> 01:45:17,409
how to analyze that what I was basically

1858
01:45:05,199 --> 01:45:24,760
saying is if so you're like pick a

1859
01:45:17,409 --> 01:45:37,449
random direction if the direction is

1860
01:45:24,760 --> 01:45:41,289
greater than one say less than one right

1861
01:45:37,449 --> 01:45:44,439
so this produces a set of directions for

1862
01:45:41,289 --> 01:45:48,100
us and then what I want to do is take a

1863
01:45:44,439 --> 01:45:52,929
look at what the inner product of those

1864
01:45:48,100 --> 01:46:02,940
is so unweighted right what I want to do

1865
01:45:52,930 --> 01:46:07,170
is make a test some here and I want to

1866
01:46:02,939 --> 01:46:07,169
and in fact maybe I want to do this

1867
01:46:20,569 --> 01:46:31,439
let's run some tests where we do 64

1868
01:46:27,989 --> 01:46:36,389
samples I don't know how many times do

1869
01:46:31,439 --> 01:46:43,500
you want to run it a lot we will do to

1870
01:46:36,390 --> 01:46:48,720
some so as we loop over these I want to

1871
01:46:43,500 --> 01:46:50,850
do a you know a weighted product of

1872
01:46:48,720 --> 01:46:54,150
something so I just want to see okay

1873
01:46:50,850 --> 01:46:56,760
what's the the inner product as we were

1874
01:46:54,149 --> 01:47:03,569
doing it before the angle inner product

1875
01:46:56,760 --> 01:47:04,890
here oh and I also want to do if Terzi

1876
01:47:03,569 --> 01:47:08,069
is less than zero

1877
01:47:04,890 --> 01:47:09,390
there's the negative Z so I only want

1878
01:47:08,069 --> 01:47:13,439
things pointing upwards because it's a

1879
01:47:09,390 --> 01:47:21,230
hemisphere so I want to take the inner

1880
01:47:13,439 --> 01:47:21,229
product of the direction and I guess I

1881
01:47:24,859 --> 01:47:30,329
just want the inner drip let me let me

1882
01:47:28,590 --> 01:47:32,610
just go ahead and take a look at what we

1883
01:47:30,329 --> 01:47:41,309
were doing for make sure that that made

1884
01:47:32,609 --> 01:47:44,339
sense so the anger fall off was yeah it

1885
01:47:41,310 --> 01:47:47,700
was just against the surface normal so

1886
01:47:44,340 --> 01:47:49,529
it's really just that which is Z so it's

1887
01:47:47,699 --> 01:47:54,179
really the direction Z that I want to

1888
01:47:49,529 --> 01:47:55,939
sum right because the inner product is

1889
01:47:54,180 --> 01:47:57,990
just going to pick out just that Z value

1890
01:47:55,939 --> 01:48:00,149
so what we were previously doing is

1891
01:47:57,989 --> 01:48:04,260
we're basically multiplying by the Z

1892
01:48:00,149 --> 01:48:06,960
value right which is the cosine of the

1893
01:48:04,260 --> 01:48:11,220
angle between the two the direction and

1894
01:48:06,960 --> 01:48:12,869
the normal so I want to sum all these up

1895
01:48:11,220 --> 01:48:17,670
I'm just gonna sum up how many of these

1896
01:48:12,869 --> 01:48:21,449
we have in this case right and then at

1897
01:48:17,670 --> 01:48:23,520
the end I'm gonna say the min tests and

1898
01:48:21,449 --> 01:48:26,760
I can I can do this normalized by the

1899
01:48:23,520 --> 01:48:29,250
number of samples as well I suppose

1900
01:48:26,760 --> 01:48:34,170
so I could say like you know sample

1901
01:48:29,250 --> 01:48:44,340
count equals 64 sample count and then

1902
01:48:34,170 --> 01:48:50,789
say like you know average equals test

1903
01:48:44,340 --> 01:49:02,940
sum divided by sample count min test

1904
01:48:50,789 --> 01:49:14,310
average equals and I'll just keep

1905
01:49:02,939 --> 01:49:17,939
whatever ones it's correct right so that

1906
01:49:14,310 --> 01:49:20,640
gives me like bounds to look at for if

1907
01:49:17,939 --> 01:49:22,349
we were gonna take 64 sample points and

1908
01:49:20,640 --> 01:49:26,789
the reason I'm doing it this way is I

1909
01:49:22,350 --> 01:49:30,150
just kind of want to know generally

1910
01:49:26,789 --> 01:49:33,239
speaking I want to know if I was to do

1911
01:49:30,149 --> 01:49:36,750
the summation using the angular fall off

1912
01:49:33,239 --> 01:49:38,849
and but only using 64 samples which

1913
01:49:36,750 --> 01:49:39,920
isn't a lot if I was picking them

1914
01:49:38,850 --> 01:49:42,990
randomly

1915
01:49:39,920 --> 01:49:47,190
what would I end up with in that case

1916
01:49:42,989 --> 01:49:50,059
and then here I can do the same sort of

1917
01:49:47,189 --> 01:49:50,059
thing right

1918
01:49:56,498 --> 01:50:00,578
so then when I come over here and

1919
01:49:58,328 --> 01:50:03,399
generate all of these when I come

1920
01:50:00,578 --> 01:50:06,158
through them I can sum eight I could

1921
01:50:03,399 --> 01:50:08,498
summarize summarize some some it's just

1922
01:50:06,158 --> 01:50:10,808
some I can sum up all of the values that

1923
01:50:08,498 --> 01:50:14,498
I get here in the exact same way and see

1924
01:50:10,809 --> 01:50:18,639
if without waiting them they end up

1925
01:50:14,498 --> 01:50:33,478
equaling the right amount for a similar

1926
01:50:18,639 --> 01:50:33,479
amount right so off we go

1927
01:50:40,828 --> 01:50:48,808
so what I want to do here is just say

1928
01:50:43,090 --> 01:50:52,300
that whichever one of these is Z value

1929
01:50:48,809 --> 01:50:55,739
before I was doing test sum plus the the

1930
01:50:52,300 --> 01:50:55,739
dersy value right

1931
01:51:05,060 --> 01:51:08,330
wait a minute

1932
01:51:10,998 --> 01:51:16,779
so in order to do this I really just I

1933
01:51:13,340 --> 01:51:22,279
really do need to know though some other

1934
01:51:16,779 --> 01:51:24,288
function that I'm sampling so yeah if we

1935
01:51:22,279 --> 01:51:26,929
were going to wait a function by that

1936
01:51:24,288 --> 01:51:28,939
then this one should just add the

1937
01:51:26,929 --> 01:51:39,529
function directly without weighting it

1938
01:51:28,939 --> 01:51:41,859
right and I'm not sure how to put that

1939
01:51:39,529 --> 01:51:41,859
in here

1940
01:52:05,180 --> 01:52:12,539
hmm because I need some other function

1941
01:52:10,199 --> 01:52:15,659
right so what I want to do here is say

1942
01:52:12,539 --> 01:52:18,119
well what you know the function of X Y Z

1943
01:52:15,659 --> 01:52:21,300
I want to be able to evaluate the

1944
01:52:18,119 --> 01:52:27,569
function of X Y Z here and then multiply

1945
01:52:21,300 --> 01:52:30,420
it by dersy right so I want like I want

1946
01:52:27,569 --> 01:52:40,079
that right and then here I just want to

1947
01:52:30,420 --> 01:52:43,800
do that without waiting waiting it by

1948
01:52:40,079 --> 01:52:45,180
the Z does that make sense but that's

1949
01:52:43,800 --> 01:52:56,100
what I'm actually trying to do there and

1950
01:52:45,180 --> 01:52:59,250
then when we actually do this I want to

1951
01:52:56,100 --> 01:53:11,190
see how these compare to each other

1952
01:52:59,250 --> 01:53:12,988
right that's what I actually wanted but

1953
01:53:11,189 --> 01:53:15,449
without a test function it's hard to

1954
01:53:12,988 --> 01:53:24,569
know I suppose it doesn't matter what

1955
01:53:15,449 --> 01:53:28,859
the test function is the test function

1956
01:53:24,569 --> 01:53:32,939
could be anything so I suppose I can

1957
01:53:28,859 --> 01:53:38,460
just put something in here and say well

1958
01:53:32,939 --> 01:53:40,859
the result is you know Durex you know 3

1959
01:53:38,460 --> 01:53:47,010
times the direction X plus 2 times the

1960
01:53:40,859 --> 01:53:50,219
direction Y or something I don't know

1961
01:53:47,010 --> 01:53:56,539
plus you know -

1962
01:53:50,219 --> 01:53:58,038
five times the direction Z squared I

1963
01:53:56,538 --> 01:54:02,340
don't know

1964
01:53:58,038 --> 01:54:03,448
right I mean I don't this is something

1965
01:54:02,340 --> 01:54:05,099
I'm gonna have to think through a little

1966
01:54:03,448 --> 01:54:07,198
bit more but like we need some test

1967
01:54:05,099 --> 01:54:08,900
function that's like pretending the

1968
01:54:07,198 --> 01:54:17,178
world has something in it so we can see

1969
01:54:08,899 --> 01:54:21,589
how they differ in these two cases so I

1970
01:54:17,179 --> 01:54:21,590
think that's what I want to look at

1971
01:54:22,069 --> 01:54:27,779
something like this so I can take a look

1972
01:54:26,248 --> 01:54:30,859
at what the difference between those two

1973
01:54:27,779 --> 01:54:30,859
things actually ends up being

1974
01:54:42,590 --> 01:54:47,659
so yeah let's take a look

1975
01:55:00,920 --> 01:55:14,649
I mean test average max test average

1976
01:55:14,679 --> 01:55:18,440
well the fact that those are not even

1977
01:55:16,850 --> 01:55:21,289
close basically tells us that we're just

1978
01:55:18,439 --> 01:55:24,579
under sampling this / - this thing

1979
01:55:21,289 --> 01:55:26,479
pretty badly so you know there's that

1980
01:55:24,579 --> 01:55:28,189
which means it's gonna be a little bit

1981
01:55:26,479 --> 01:55:29,689
hard to do this test that way unless I

1982
01:55:28,189 --> 01:55:36,769
just got a bug in the code but that's

1983
01:55:29,689 --> 01:55:40,988
you know also this is not quite right if

1984
01:55:36,770 --> 01:55:40,989
we're allowing negative center functions

1985
01:55:47,140 --> 01:56:00,380
again so yeah I mean not great right

1986
01:55:55,359 --> 01:56:03,049
it's a pretty pretty big span there for

1987
01:56:00,380 --> 01:56:06,440
only with 64 samples which yeah I don't

1988
01:56:03,050 --> 01:56:07,960
know maybe that just means I'm bad at

1989
01:56:06,439 --> 01:56:10,039
sampling which I think we already know

1990
01:56:07,960 --> 01:56:12,380
so let me just take a look at what our

1991
01:56:10,039 --> 01:56:17,600
min average and Max averages of this

1992
01:56:12,380 --> 01:56:19,520
function so yeah not great right it

1993
01:56:17,600 --> 01:56:21,710
looks like it's you know it's lower

1994
01:56:19,520 --> 01:56:30,110
bound is similar but it's upper bound is

1995
01:56:21,710 --> 01:56:32,869
not you know which again you know this

1996
01:56:30,109 --> 01:56:35,119
is a pretty crappy test but that does

1997
01:56:32,869 --> 01:56:38,719
comport with what we're seeing in terms

1998
01:56:35,119 --> 01:56:40,969
of the you know the the difference

1999
01:56:38,719 --> 01:56:43,159
between those there so let me you know

2000
01:56:40,969 --> 01:56:47,989
let me try some a couple things here

2001
01:56:43,159 --> 01:56:50,659
that I'd like to I'd like to then play

2002
01:56:47,988 --> 01:56:54,250
with so let's suppose that we wanted to

2003
01:56:50,659 --> 01:56:54,250
look at the white noise samples

2004
01:57:03,429 --> 01:57:14,210
here we go so if we think that this

2005
01:57:08,889 --> 01:57:16,969
technique was working okay using the

2006
01:57:14,210 --> 01:57:18,889
disk what we can do is play with it a

2007
01:57:16,969 --> 01:57:20,840
little bit and and see if we can do a

2008
01:57:18,889 --> 01:57:23,779
white noise that's that's biased as well

2009
01:57:20,840 --> 01:57:27,288
so doing that would be much simpler all

2010
01:57:23,779 --> 01:57:34,368
that would be is we loop picking a

2011
01:57:27,288 --> 01:57:42,679
random sample in the disk so that's just

2012
01:57:34,368 --> 01:57:57,408
saying okay pick a random sample in the

2013
01:57:42,679 --> 01:58:00,078
disk like so if link squared P is less

2014
01:57:57,408 --> 01:58:00,259
than or equal to 1.0 then we're good to

2015
01:58:00,078 --> 01:58:08,029
go

2016
01:58:00,260 --> 01:58:17,119
p z equals square root point no f- the

2017
01:58:08,029 --> 01:58:20,210
length squared P so that just allows me

2018
01:58:17,118 --> 01:58:23,420
to generate the random value actually

2019
01:58:20,210 --> 01:58:30,908
random values in the disk and then

2020
01:58:23,420 --> 01:58:34,090
project up to the sphere right and

2021
01:58:30,908 --> 01:58:37,929
that's the more traditional route

2022
01:58:34,090 --> 01:58:37,929
actually completely random

2023
01:58:39,439 --> 01:58:43,189
so now if I run it and take a look at

2024
01:58:41,899 --> 01:58:45,769
what happens there because remember now

2025
01:58:43,189 --> 01:58:47,000
we're using the white noise samples and

2026
01:58:45,770 --> 01:58:48,800
I just want to see what the difference

2027
01:58:47,000 --> 01:58:50,930
is there so you can see it's a pretty

2028
01:58:48,800 --> 01:58:54,829
different it's it's pretty different

2029
01:58:50,930 --> 01:58:57,770
than than this version the problem is I

2030
01:58:54,829 --> 01:59:03,229
don't know how much to trust this

2031
01:58:57,770 --> 01:59:07,640
version negative 7 negative 0.7 I'm

2032
01:59:03,229 --> 01:59:12,649
sorry and point 1 5 is still quite a bit

2033
01:59:07,640 --> 01:59:18,470
different than the then the Plus on

2034
01:59:12,649 --> 01:59:21,769
sample so even if we just compare white

2035
01:59:18,470 --> 01:59:24,079
noise lofted up versus Plus on lofted up

2036
01:59:21,770 --> 01:59:26,570
you get a very different answer right

2037
01:59:24,079 --> 01:59:28,579
and again that may just be because this

2038
01:59:26,569 --> 01:59:30,229
is a bad test case so I don't want to

2039
01:59:28,579 --> 01:59:32,180
jump to conclusions about it but it

2040
01:59:30,229 --> 01:59:34,250
means we need to investigate further

2041
01:59:32,180 --> 01:59:36,590
right we need to drill down this a

2042
01:59:34,250 --> 01:59:40,449
little bit more and figure out what's

2043
01:59:36,590 --> 01:59:40,449
going on here because it's not quite

2044
01:59:40,659 --> 01:59:45,670
yeah it's it's not quite kosher yet this

2045
01:59:43,609 --> 01:59:54,170
might not be a good way of generating

2046
01:59:45,670 --> 01:59:55,819
unbiased samples on the sphere I need to

2047
01:59:54,170 --> 01:59:57,350
think of how to generate white noise

2048
01:59:55,819 --> 01:59:59,949
samples on a sphere that are unbiased

2049
01:59:57,350 --> 02:00:04,900
because this may not be it otherwise

2050
01:59:59,949 --> 02:00:10,939
also I should say this may bias you

2051
02:00:04,899 --> 02:00:12,559
still towards a projection of a cube and

2052
02:00:10,939 --> 02:00:14,979
I'm just not sure if it does or if it

2053
02:00:12,560 --> 02:00:14,980
doesn't

2054
02:00:22,118 --> 02:00:26,598
hard to say anyway let's go to the Q&amp;A

2055
02:00:24,889 --> 02:00:29,650
but next weekend I think that's where we

2056
02:00:26,599 --> 02:00:29,650
want to focus our attention

2057
02:01:34,729 --> 02:01:40,209
why I got to get a screenshot of that

2058
02:02:11,300 --> 02:02:16,949
the fact that in cybot said blows avatar

2059
02:02:15,180 --> 02:02:20,850
looks exactly like him is kind of

2060
02:02:16,949 --> 02:02:24,059
amazing did it put that together by

2061
02:02:20,850 --> 02:02:28,680
itself I I don't know how it did that

2062
02:02:24,060 --> 02:02:29,670
that was pretty great vadas hi not

2063
02:02:28,680 --> 02:02:30,930
really anon to have a question but you

2064
02:02:29,670 --> 02:02:32,819
said you'd talk about some tidbits

2065
02:02:30,930 --> 02:02:34,219
considering the sim to union type ah yes

2066
02:02:32,819 --> 02:02:38,250
I can

2067
02:02:34,219 --> 02:02:40,439
okay let me double check let me see what

2068
02:02:38,250 --> 02:02:43,590
we have for questions here really quick

2069
02:02:40,439 --> 02:02:43,589
[Music]

2070
02:02:50,969 --> 02:02:54,730
all right let me answer these other

2071
02:02:52,869 --> 02:02:56,260
questions really quickly and then I'm

2072
02:02:54,729 --> 02:03:02,409
gonna spend a little bit of time talking

2073
02:02:56,260 --> 02:03:03,310
about the sim D Union type so the risk

2074
02:03:02,409 --> 02:03:04,719
oh how are you feeling about the

2075
02:03:03,310 --> 02:03:11,429
progress of the lighting so far very

2076
02:03:04,719 --> 02:03:11,429
good I like it I like I like it a lot

2077
02:03:11,979 --> 02:03:15,309
Holst 80 is there any libraries

2078
02:03:14,020 --> 02:03:16,630
available that would help with just the

2079
02:03:15,310 --> 02:03:17,770
lighting stuff if you're you're working

2080
02:03:16,630 --> 02:03:19,510
right now it seems fairly involved and

2081
02:03:17,770 --> 02:03:23,140
required some iron D from the developers

2082
02:03:19,510 --> 02:03:25,390
part no idea I don't use libraries G

2083
02:03:23,140 --> 02:03:26,469
Princip why are you not sure about GPU

2084
02:03:25,390 --> 02:03:28,900
lighting do you think that it might not

2085
02:03:26,469 --> 02:03:30,789
increase the frame rate no I'm quite

2086
02:03:28,899 --> 02:03:32,979
sure we could get faster lighting by

2087
02:03:30,789 --> 02:03:35,260
using a GPU what I'm not sure about is

2088
02:03:32,979 --> 02:03:37,448
whether we have the GPU to spare because

2089
02:03:35,260 --> 02:03:43,380
if we want to use the GPU for doing a

2090
02:03:37,448 --> 02:03:46,178
bunch of other stuff then you know you

2091
02:03:43,380 --> 02:03:49,179
you want to balance your workload right

2092
02:03:46,179 --> 02:03:51,969
so we don't have necessarily a lot of

2093
02:03:49,179 --> 02:03:54,310
stuff to use the CPU for we aren't doing

2094
02:03:51,969 --> 02:03:58,390
like physics these sorts of things in

2095
02:03:54,310 --> 02:04:00,940
this game this game is very mechanical

2096
02:03:58,390 --> 02:04:02,050
and not supposed to have a physics

2097
02:04:00,939 --> 02:04:03,519
component to it so it's be very

2098
02:04:02,050 --> 02:04:08,079
predictable like an old-school arcade

2099
02:04:03,520 --> 02:04:09,969
game and so we the reason that I don't

2100
02:04:08,079 --> 02:04:12,340
know if it's a good idea to use GPU

2101
02:04:09,969 --> 02:04:14,890
lighting is because we may just end up

2102
02:04:12,340 --> 02:04:17,199
with a giant GPU workload because it

2103
02:04:14,890 --> 02:04:20,079
does the lighting the depth handling

2104
02:04:17,198 --> 02:04:23,500
those you know anti-aliasing all that

2105
02:04:20,079 --> 02:04:25,329
sort of stuff and at that point we just

2106
02:04:23,500 --> 02:04:27,219
end up with a CPU sitting idle doing

2107
02:04:25,329 --> 02:04:30,309
nothing and a GPU that's overloaded

2108
02:04:27,219 --> 02:04:31,630
right so the only reason I'm not sure

2109
02:04:30,310 --> 02:04:32,500
about you lighting is not because I

2110
02:04:31,630 --> 02:04:33,909
don't think we could do a reasonable

2111
02:04:32,500 --> 02:04:35,920
implementation of this lighting on the

2112
02:04:33,909 --> 02:04:38,019
GPU that would be fast it's because I'm

2113
02:04:35,920 --> 02:04:39,819
worried that we will overload the GPU

2114
02:04:38,020 --> 02:04:42,790
and have nothing for the CPU to do and

2115
02:04:39,819 --> 02:04:51,279
that seems like a bad situation to begin

2116
02:04:42,789 --> 02:04:52,630
so what do I dislike about Windows 10

2117
02:04:51,279 --> 02:04:53,319
some people complain that it because

2118
02:04:52,630 --> 02:04:54,609
their hatred against Microsoft

2119
02:04:53,319 --> 02:04:57,039
regardless of how good the product is

2120
02:04:54,609 --> 02:04:58,988
but I feel like they mixed a lot of

2121
02:04:57,039 --> 02:05:02,079
messy stuff after 8 and 8.1 were the

2122
02:04:58,988 --> 02:05:03,968
things you'd like them to fix so I would

2123
02:05:02,079 --> 02:05:04,750
say Windows 10 is a complete non-starter

2124
02:05:03,969 --> 02:05:06,850
I would

2125
02:05:04,750 --> 02:05:09,069
never use it for any purpose under any

2126
02:05:06,850 --> 02:05:10,120
circumstances I had to install it in

2127
02:05:09,069 --> 02:05:12,309
this machine because it was a brand new

2128
02:05:10,119 --> 02:05:15,099
machine so I was forced to otherwise I

2129
02:05:12,310 --> 02:05:16,690
would never do it it is completely

2130
02:05:15,100 --> 02:05:20,920
unacceptable for an operating system to

2131
02:05:16,689 --> 02:05:23,109
force updates period that is a hard if

2132
02:05:20,920 --> 02:05:26,619
an operating system requires you to

2133
02:05:23,109 --> 02:05:28,029
update it when it tells you to update it

2134
02:05:26,619 --> 02:05:30,340
is unacceptable

2135
02:05:28,029 --> 02:05:31,960
I don't need to know anything else about

2136
02:05:30,340 --> 02:05:33,789
the opera system you can tell me just

2137
02:05:31,960 --> 02:05:35,800
that one piece of information and that

2138
02:05:33,789 --> 02:05:39,720
is enough to know it is unacceptable an

2139
02:05:35,800 --> 02:05:43,690
operating system on my computer obeys me

2140
02:05:39,720 --> 02:05:45,640
period if that relationship ever changes

2141
02:05:43,689 --> 02:05:49,210
it's an unacceptable operating system

2142
02:05:45,640 --> 02:05:51,220
period so Windows 10 is not allowed Mali

2143
02:05:49,210 --> 02:05:54,850
rocket it will never be installed on a

2144
02:05:51,220 --> 02:05:56,079
computer here I only use Windows 10 on

2145
02:05:54,850 --> 02:05:58,329
the stream computer because it was a new

2146
02:05:56,079 --> 02:06:00,010
computer if we cannot find a way to

2147
02:05:58,329 --> 02:06:02,470
install something other than Windows 10

2148
02:06:00,010 --> 02:06:04,869
on new computers at Mali rocket then we

2149
02:06:02,470 --> 02:06:06,280
will either switch to Linux or find some

2150
02:06:04,869 --> 02:06:08,890
kind of hack that allows us to use an

2151
02:06:06,279 --> 02:06:10,750
older version of Windows we may be able

2152
02:06:08,890 --> 02:06:12,400
to use Windows 10 at Mali rocket if it

2153
02:06:10,750 --> 02:06:14,140
turns out that disconnecting Windows 10

2154
02:06:12,399 --> 02:06:17,500
from the internet since our dev machines

2155
02:06:14,140 --> 02:06:19,210
don't cooked up to the Internet makes it

2156
02:06:17,500 --> 02:06:21,909
so that it doesn't produce the forced

2157
02:06:19,210 --> 02:06:23,739
updates but if that still is the case

2158
02:06:21,909 --> 02:06:24,760
then it's a non-starter so we don't

2159
02:06:23,739 --> 02:06:26,590
really need to talk about anything else

2160
02:06:24,760 --> 02:06:28,060
I could go into a long list of reasons

2161
02:06:26,590 --> 02:06:30,250
that I don't like Windows 10 that are

2162
02:06:28,060 --> 02:06:31,990
separate from that but it's that one

2163
02:06:30,250 --> 02:06:34,739
that's just that's how you know this is

2164
02:06:31,989 --> 02:06:37,689
not acceptable operating system done a

2165
02:06:34,739 --> 02:06:40,869
operation whatever pops up a dialog box

2166
02:06:37,689 --> 02:06:42,159
actually he is unacceptable to me if you

2167
02:06:40,869 --> 02:06:44,319
want to notify me there's a new update

2168
02:06:42,159 --> 02:06:48,010
put that somewhere else you can put that

2169
02:06:44,319 --> 02:06:49,840
you know put that down here that's the

2170
02:06:48,010 --> 02:06:51,220
only acceptable place for it it should

2171
02:06:49,840 --> 02:06:53,050
never pop up anything in the middle of

2172
02:06:51,220 --> 02:06:55,360
my work that is a just complete

2173
02:06:53,050 --> 02:06:56,680
disrespect for the user and it should

2174
02:06:55,359 --> 02:06:58,839
never be allowed in an operating system

2175
02:06:56,680 --> 02:07:01,690
under any circumstances for any reason

2176
02:06:58,840 --> 02:07:03,670
and I don't want to hear any comments

2177
02:07:01,689 --> 02:07:05,799
about security I don't want to hear any

2178
02:07:03,670 --> 02:07:08,440
console is it those are my decisions

2179
02:07:05,800 --> 02:07:10,090
this is my computer Microsoft doesn't

2180
02:07:08,439 --> 02:07:11,769
get to tell me when it gets updated

2181
02:07:10,090 --> 02:07:13,779
I tell Microsoft when it's updated I

2182
02:07:11,770 --> 02:07:15,910
accept the responsibility for using my

2183
02:07:13,779 --> 02:07:18,319
computer and if they don't like that

2184
02:07:15,909 --> 02:07:21,529
then I you know I'm gonna have to buy an

2185
02:07:18,319 --> 02:07:24,139
for somebody else it's that simple

2186
02:07:21,529 --> 02:07:27,920
how many hours a day am i programming I

2187
02:07:24,140 --> 02:07:32,360
program probably no less than six hours

2188
02:07:27,920 --> 02:07:33,980
a day and usually no more than ten but

2189
02:07:32,359 --> 02:07:38,389
it varies depending on my other

2190
02:07:33,979 --> 02:07:39,529
responsibilities as well do you think

2191
02:07:38,390 --> 02:07:41,180
we'll be able to keep the lighting at

2192
02:07:39,529 --> 02:07:44,000
this complexity or method on the

2193
02:07:41,180 --> 02:07:45,829
Raspberry Pi probably not I wasn't

2194
02:07:44,000 --> 02:07:47,329
expecting to run anything like the real

2195
02:07:45,829 --> 02:07:48,439
game on the Raspberry Pi I'm expected to

2196
02:07:47,329 --> 02:07:50,659
have to turn off a bunch of features

2197
02:07:48,439 --> 02:07:53,389
because it's very underpowered compared

2198
02:07:50,659 --> 02:07:54,800
to a PC what level are intrinsic to find

2199
02:07:53,390 --> 02:07:56,420
our intrinsic CPU vendor specific or

2200
02:07:54,800 --> 02:07:58,880
architect specific well we need to make

2201
02:07:56,420 --> 02:08:02,630
AMD's Intel specific intrinsics or x86

2202
02:07:58,880 --> 02:08:04,640
x64 we don't really probably support x86

2203
02:08:02,630 --> 02:08:08,449
anymore because nobody uses anymore so

2204
02:08:04,640 --> 02:08:10,039
we probably don't have to do that x64 no

2205
02:08:08,449 --> 02:08:12,679
you do not have to have am to your Intel

2206
02:08:10,039 --> 02:08:15,289
specific intrinsics they are they work

2207
02:08:12,680 --> 02:08:16,760
across the board we will for neon which

2208
02:08:15,289 --> 02:08:18,829
we will probably want to do report to at

2209
02:08:16,760 --> 02:08:22,550
some point have to make our intrinsics

2210
02:08:18,829 --> 02:08:23,899
be agnostic between neon and x64 because

2211
02:08:22,550 --> 02:08:26,539
neon does have slightly different

2212
02:08:23,899 --> 02:08:31,039
instructions although they are similar

2213
02:08:26,539 --> 02:08:33,170
right I understand you switched from AMD

2214
02:08:31,039 --> 02:08:34,550
to Nvidia the reason I always prefer

2215
02:08:33,170 --> 02:08:36,140
Nvidia because they seem to have more

2216
02:08:34,550 --> 02:08:39,860
stable drivers and easier to use

2217
02:08:36,140 --> 02:08:41,360
performance tools and so on so given the

2218
02:08:39,859 --> 02:08:42,799
choice that go with that the reason I

2219
02:08:41,359 --> 02:08:44,210
was on AMD before was because that was

2220
02:08:42,800 --> 02:08:46,880
an old surplus machine that just

2221
02:08:44,210 --> 02:08:47,989
happened having a Indy card in it it was

2222
02:08:46,880 --> 02:08:48,500
not a machine that I had put together

2223
02:08:47,989 --> 02:08:50,449
myself

2224
02:08:48,500 --> 02:08:52,130
how much stronger you spent on lighting

2225
02:08:50,449 --> 02:08:53,689
as long as it takes that I'm satisfied

2226
02:08:52,130 --> 02:08:55,130
with it sorry for enough to have a

2227
02:08:53,689 --> 02:08:56,000
question I'm pretty far behind curious

2228
02:08:55,130 --> 02:08:58,640
if you've already implemented the

2229
02:08:56,000 --> 02:09:00,890
swapping function or macro how would you

2230
02:08:58,640 --> 02:09:02,480
avoid using templates for this you mean

2231
02:09:00,890 --> 02:09:04,010
to swap two variables I usually just

2232
02:09:02,479 --> 02:09:05,869
write it custom for the ones I want or

2233
02:09:04,010 --> 02:09:07,970
if you want to write a macro you can but

2234
02:09:05,869 --> 02:09:10,220
it's not particularly interesting I

2235
02:09:07,970 --> 02:09:12,350
don't really care that's not like

2236
02:09:10,220 --> 02:09:13,820
something I spend a lot of time doing if

2237
02:09:12,350 --> 02:09:15,800
you want swap function you can just

2238
02:09:13,819 --> 02:09:18,079
write it and it's not a big deal all

2239
02:09:15,800 --> 02:09:26,020
right so let's go back to the other the

2240
02:09:18,079 --> 02:09:26,019
original question and that question was

2241
02:09:30,189 --> 02:09:37,339
in our nope not that in our definition

2242
02:09:34,789 --> 02:09:40,460
of our sort of like easy to use or

2243
02:09:37,340 --> 02:09:43,220
easier to use sim deus types here the

2244
02:09:40,460 --> 02:09:46,789
question was do we actually have to use

2245
02:09:43,220 --> 02:09:54,020
the convert macros or can we just use

2246
02:09:46,789 --> 02:09:56,149
this right and when I was asked whether

2247
02:09:54,020 --> 02:09:58,130
we could just use this I said I can't

2248
02:09:56,149 --> 02:09:59,960
remember if there's reasons why you

2249
02:09:58,130 --> 02:10:02,989
can't but I do remember there was

2250
02:09:59,960 --> 02:10:06,319
something weird about this and I went

2251
02:10:02,989 --> 02:10:10,219
back and checked with friends of mine to

2252
02:10:06,319 --> 02:10:11,779
find out about whether or not I was

2253
02:10:10,220 --> 02:10:13,640
misremembering and I was not

2254
02:10:11,779 --> 02:10:15,769
misremembering there is something weird

2255
02:10:13,640 --> 02:10:18,740
about it but it's okay to use the Union

2256
02:10:15,770 --> 02:10:21,880
so answer one it is okay to use the

2257
02:10:18,739 --> 02:10:25,429
Union nothing weird will happen to you

2258
02:10:21,880 --> 02:10:28,310
however there is something weird about

2259
02:10:25,430 --> 02:10:29,659
it and let me now tell you what the

2260
02:10:28,310 --> 02:10:33,830
thing that's worried about it is because

2261
02:10:29,659 --> 02:10:37,250
it's worth understanding so mm-hmm you

2262
02:10:33,829 --> 02:10:40,010
may notice if I go into the Intel

2263
02:10:37,250 --> 02:10:42,319
intrinsics guide and I light up all of

2264
02:10:40,010 --> 02:10:46,390
our SS es that we might be using right

2265
02:10:42,319 --> 02:10:49,689
SSE you know one through four point two

2266
02:10:46,390 --> 02:10:56,539
let's suppose I look at the or

2267
02:10:49,689 --> 02:10:59,809
instruction you will notice that there's

2268
02:10:56,539 --> 02:11:03,430
more than one or instruction per type

2269
02:10:59,810 --> 02:11:06,820
I'm sorry total there's one per type

2270
02:11:03,430 --> 02:11:10,190
here is an or instruction for doubles

2271
02:11:06,819 --> 02:11:14,769
here is an or instruction for singles

2272
02:11:10,189 --> 02:11:18,739
and here is an or instruction for

2273
02:11:14,770 --> 02:11:21,800
integers right now the really unusual

2274
02:11:18,739 --> 02:11:23,479
part of this and the part that's the

2275
02:11:21,800 --> 02:11:27,710
interesting part that I said I want to

2276
02:11:23,479 --> 02:11:32,569
elaborate the actual instruction is not

2277
02:11:27,710 --> 02:11:36,159
the same do you see that now why is that

2278
02:11:32,569 --> 02:11:40,529
right and you can see here even the

2279
02:11:36,159 --> 02:11:46,180
performance is not the same

2280
02:11:40,529 --> 02:11:50,559
it changes right so what's going on here

2281
02:11:46,180 --> 02:11:54,820
well you know what's the deal right and

2282
02:11:50,560 --> 02:11:59,950
the answer is that even though these

2283
02:11:54,819 --> 02:12:03,039
types are not really relevant at the CPU

2284
02:11:59,949 --> 02:12:05,079
register level because the registers are

2285
02:12:03,039 --> 02:12:07,390
the same whether or not they're being

2286
02:12:05,079 --> 02:12:12,100
treated as doubles or singles or

2287
02:12:07,390 --> 02:12:15,160
integers for that matter that's not true

2288
02:12:12,100 --> 02:12:19,390
of the actual arithmetic logic units

2289
02:12:15,159 --> 02:12:22,180
that will execute them so inside the

2290
02:12:19,390 --> 02:12:25,060
processor we have logical registers that

2291
02:12:22,180 --> 02:12:27,670
we're referring to by name xmm zero for

2292
02:12:25,060 --> 02:12:30,550
example or something like this and it's

2293
02:12:27,670 --> 02:12:33,789
true that when I talk about xmm zero I

2294
02:12:30,550 --> 02:12:36,579
can talk about it either as an EM 128 or

2295
02:12:33,789 --> 02:12:38,500
an M 128 I because the only difference

2296
02:12:36,579 --> 02:12:42,069
between those two things at the register

2297
02:12:38,500 --> 02:12:45,069
level is what I want to do to it so if I

2298
02:12:42,069 --> 02:12:47,679
say for example I want to add an M 128

2299
02:12:45,069 --> 02:12:49,359
to another M 28 I'm talking about adding

2300
02:12:47,680 --> 02:12:51,909
say a floating-point value perhaps

2301
02:12:49,359 --> 02:12:54,460
whereas if I talk about adding an M 128

2302
02:12:51,909 --> 02:12:57,250
I to another M 28 I what I'm talking

2303
02:12:54,460 --> 02:13:02,380
about is doing an integer add something

2304
02:12:57,250 --> 02:13:04,750
like this right but I can still say xmm

2305
02:13:02,380 --> 02:13:07,810
zero in either case so it's not like I'm

2306
02:13:04,750 --> 02:13:09,939
saying a different register so that begs

2307
02:13:07,810 --> 02:13:12,250
the question well why does it matter

2308
02:13:09,939 --> 02:13:14,379
which of these I would be calling as a

2309
02:13:12,250 --> 02:13:18,430
result and couldn't I just use that

2310
02:13:14,380 --> 02:13:22,210
Union blindly and not care the answer is

2311
02:13:18,430 --> 02:13:25,570
you do care because once the instruction

2312
02:13:22,210 --> 02:13:28,539
is issued it goes to a specific type of

2313
02:13:25,569 --> 02:13:30,340
unit now in the case of something like

2314
02:13:28,539 --> 02:13:33,279
an ad where I'm going to add two

2315
02:13:30,340 --> 02:13:36,550
floating point numbers together with an

2316
02:13:33,279 --> 02:13:39,069
M 128 then it's always going to the same

2317
02:13:36,550 --> 02:13:41,289
type of ALU it's always going to

2318
02:13:39,069 --> 02:13:44,819
something that can do a floating point

2319
02:13:41,289 --> 02:13:49,060
add but if I am going to issue an or

2320
02:13:44,819 --> 02:13:52,989
instruction it could go to either kind

2321
02:13:49,060 --> 02:13:54,130
of arithmetic logic unit it can go to

2322
02:13:52,989 --> 02:13:59,170
one that can do

2323
02:13:54,130 --> 02:14:04,060
ooh a or PS or it can go to one that

2324
02:13:59,170 --> 02:14:08,560
could do a P or or one that could do in

2325
02:14:04,060 --> 02:14:12,280
or P D believe it or not this actually

2326
02:14:08,560 --> 02:14:18,100
makes a difference there are units that

2327
02:14:12,279 --> 02:14:21,219
do the high flex payments so all the

2328
02:14:18,100 --> 02:14:22,840
units could probably do an or but the

2329
02:14:21,219 --> 02:14:26,439
question is which one do you want it to

2330
02:14:22,840 --> 02:14:27,940
go to do you want to do the or on a unit

2331
02:14:26,439 --> 02:14:30,399
that could have done a floating point

2332
02:14:27,939 --> 02:14:32,769
add or do you want to do the or on a

2333
02:14:30,399 --> 02:14:34,929
unit that would have done an integer ad

2334
02:14:32,770 --> 02:14:37,000
and the reason this matters is because

2335
02:14:34,929 --> 02:14:39,158
once you issue it to one of those units

2336
02:14:37,000 --> 02:14:43,270
that unit is tied up for that

2337
02:14:39,158 --> 02:14:46,719
instruction cycle issue right so if I've

2338
02:14:43,270 --> 02:14:50,739
just issued an or on the f32 lane on the

2339
02:14:46,719 --> 02:14:53,020
f32 unit right then I want to do an f32

2340
02:14:50,738 --> 02:14:55,718
ad well I might not be able to get it

2341
02:14:53,020 --> 02:14:57,670
off that cycle because it's already got

2342
02:14:55,719 --> 02:14:59,130
an or like blocking that reservation

2343
02:14:57,670 --> 02:15:02,679
station or something right

2344
02:14:59,130 --> 02:15:06,279
so instead I could issue the or to the

2345
02:15:02,679 --> 02:15:08,199
u32 unit right that can't do an f32 ad

2346
02:15:06,279 --> 02:15:10,090
and then I can issue the F to be to add

2347
02:15:08,198 --> 02:15:12,879
on that same cycle to the thing that

2348
02:15:10,090 --> 02:15:17,409
would have done F 32 ads if only hadn't

2349
02:15:12,880 --> 02:15:19,329
been blocked by the or right so that is

2350
02:15:17,408 --> 02:15:22,179
the important subtlety to remember when

2351
02:15:19,329 --> 02:15:24,789
programming Sindhi code on the x64 is

2352
02:15:22,179 --> 02:15:26,260
that there are arithmetic logic units

2353
02:15:24,789 --> 02:15:28,060
they don't all have the same

2354
02:15:26,260 --> 02:15:29,739
capabilities but some of them have

2355
02:15:28,060 --> 02:15:32,620
overlapping capabilities such as the

2356
02:15:29,738 --> 02:15:34,658
ability to do an or so if two logic

2357
02:15:32,619 --> 02:15:36,729
units have the ability to an or but only

2358
02:15:34,658 --> 02:15:38,469
one of those logic units adds F 3 to s

2359
02:15:36,729 --> 02:15:40,928
and only one of those logic units adds

2360
02:15:38,469 --> 02:15:44,079
you 32s if you know you're going to be

2361
02:15:40,929 --> 02:15:47,408
over reserved on F 32 ads maybe you want

2362
02:15:44,079 --> 02:15:49,210
to move your oars to the si128 kind or

2363
02:15:47,408 --> 02:15:53,019
the vice versa if you know you're gonna

2364
02:15:49,210 --> 02:15:54,698
be a lot of you 32 adds well you 16 adds

2365
02:15:53,020 --> 02:15:57,040
let's say and you know those only go on

2366
02:15:54,698 --> 02:15:59,649
one unit try to move your oars to the PS

2367
02:15:57,039 --> 02:16:02,100
unit because maybe that is the one that

2368
02:15:59,649 --> 02:16:06,250
is not going to get used as much right

2369
02:16:02,100 --> 02:16:07,900
so the takeaway here is you can use a

2370
02:16:06,250 --> 02:16:10,929
unit Union

2371
02:16:07,899 --> 02:16:13,779
to represent a 128 and a 128 I but you

2372
02:16:10,929 --> 02:16:17,949
cannot necessarily be cavalier about

2373
02:16:13,779 --> 02:16:20,590
which one you use for doing operations

2374
02:16:17,948 --> 02:16:23,769
that could be used by both so you can't

2375
02:16:20,590 --> 02:16:26,050
just say an oar is an oar you have to be

2376
02:16:23,770 --> 02:16:28,330
able to say which kind of or you wanted

2377
02:16:26,050 --> 02:16:29,860
now I have not done much analysis of

2378
02:16:28,329 --> 02:16:32,200
whether modern compilers will just

2379
02:16:29,859 --> 02:16:35,860
switch or is for you based on what it

2380
02:16:32,200 --> 02:16:39,909
thinks is the loading of the units maybe

2381
02:16:35,860 --> 02:16:41,710
they do maybe they don't but if we

2382
02:16:39,909 --> 02:16:43,959
assume temporarily that the compiler

2383
02:16:41,709 --> 02:16:45,638
can't always get that right and that you

2384
02:16:43,959 --> 02:16:47,768
do need to kind of give it some guidance

2385
02:16:45,638 --> 02:16:49,598
about which one to use that is where it

2386
02:16:47,769 --> 02:16:52,269
makes a difference which one of these

2387
02:16:49,599 --> 02:16:55,299
two things you're using so it's not

2388
02:16:52,269 --> 02:16:58,120
superfluous that they have amp 128 and M

2389
02:16:55,299 --> 02:17:00,129
128 I it's not probably how I would have

2390
02:16:58,120 --> 02:17:01,479
recommended to do it I probably would

2391
02:17:00,129 --> 02:17:03,909
have just had one type and then just

2392
02:17:01,478 --> 02:17:05,619
have the two different Oracle's or to

2393
02:17:03,909 --> 02:17:07,209
this unit or to that kind of unit or

2394
02:17:05,620 --> 02:17:08,800
something like that but either way you

2395
02:17:07,209 --> 02:17:11,529
can see why it does make a difference

2396
02:17:08,799 --> 02:17:13,718
which kind of or you're issuing and it's

2397
02:17:11,530 --> 02:17:24,300
something to keep in mind hopefully that

2398
02:17:13,718 --> 02:17:24,299
gives some perspective let's see here

2399
02:17:24,510 --> 02:17:29,860
what are the specs of the current deb

2400
02:17:26,468 --> 02:17:37,919
machine it's a good machine it's in a

2401
02:17:29,860 --> 02:17:37,920
core i7 fairly high-end core i7 with a

2402
02:17:38,340 --> 02:17:42,149
with a 1080

2403
02:17:45,239 --> 02:17:49,849
I never remember these names the 770 K

2404
02:17:59,430 --> 02:18:03,309
in your opinion what are the low-hanging

2405
02:18:01,299 --> 02:18:04,209
fruits the unix/linux world could or

2406
02:18:03,309 --> 02:18:05,649
should tackle and become more

2407
02:18:04,209 --> 02:18:07,779
competitive with windows from usability

2408
02:18:05,649 --> 02:18:10,059
perspective one actually support laptops

2409
02:18:07,780 --> 02:18:12,220
Linux is laptops port is horrible

2410
02:18:10,059 --> 02:18:14,949
largely you know perhaps not necessarily

2411
02:18:12,219 --> 02:18:17,409
because of their fault they don't handle

2412
02:18:14,950 --> 02:18:19,750
like optimist graphics and and stuff

2413
02:18:17,409 --> 02:18:23,260
like that which you absolutely need to

2414
02:18:19,750 --> 02:18:24,159
do well they do it very poorly so you

2415
02:18:23,260 --> 02:18:26,200
need to fix they need they need

2416
02:18:24,159 --> 02:18:29,350
rock-solid laptop support which they

2417
02:18:26,200 --> 02:18:31,270
just really don't have audio is a mess

2418
02:18:29,350 --> 02:18:33,790
on Linux they need to just scrap

2419
02:18:31,270 --> 02:18:36,930
everything and have a very simple 100%

2420
02:18:33,790 --> 02:18:40,210
compatible used everywhere audio layer

2421
02:18:36,930 --> 02:18:41,620
for the love of God and just lock it

2422
02:18:40,209 --> 02:18:43,179
down and say this is all we're doing

2423
02:18:41,620 --> 02:18:47,530
forever please don't change anything

2424
02:18:43,180 --> 02:18:49,510
else they need to have a good a good

2425
02:18:47,530 --> 02:18:51,840
debugger like a really good debugger

2426
02:18:49,510 --> 02:18:54,790
they need to have very good GPU support

2427
02:18:51,840 --> 02:18:56,440
nice GPU speed easy to use like full

2428
02:18:54,790 --> 02:18:58,120
screen GPU all that kind of stuff you

2429
02:18:56,440 --> 02:19:02,800
need to work on all that getting really

2430
02:18:58,120 --> 02:19:04,480
clean really basic stuff still doesn't

2431
02:19:02,799 --> 02:19:07,000
work on the next all the time I have a

2432
02:19:04,479 --> 02:19:08,020
vanilla ubuntu install running on the

2433
02:19:07,000 --> 02:19:12,700
machine I'm looking at right now that

2434
02:19:08,020 --> 02:19:16,000
runs the chat it hangs hangs the entire

2435
02:19:12,700 --> 02:19:20,290
desktop routinely on drag-and-drop

2436
02:19:16,000 --> 02:19:24,459
operations and right-click menus this is

2437
02:19:20,290 --> 02:19:26,620
a vanilla install on a stock machine

2438
02:19:24,459 --> 02:19:29,319
with Intel integrated graphics it

2439
02:19:26,620 --> 02:19:33,910
doesn't even have a second GPU in the

2440
02:19:29,319 --> 02:19:38,199
machine it's just a stock 7 700 K that's

2441
02:19:33,909 --> 02:19:41,979
all and it is extremely buggy you just

2442
02:19:38,200 --> 02:19:44,380
can't have that right it's gotta be a

2443
02:19:41,979 --> 02:19:47,889
lot better than it is right now people

2444
02:19:44,379 --> 02:19:51,489
who don't think Linux is extremely

2445
02:19:47,889 --> 02:19:54,129
unstable they they have their eyes

2446
02:19:51,489 --> 02:19:56,260
pretty closed if you can't do a stock

2447
02:19:54,129 --> 02:19:58,270
install and have drag-and-drop not hang

2448
02:19:56,260 --> 02:20:02,140
your entire desktop you have serious

2449
02:19:58,271 --> 02:20:05,771
serious problems and so that's you know

2450
02:20:02,140 --> 02:20:06,819
that's just a basic thing I could go on

2451
02:20:05,771 --> 02:20:08,230
for a long time about all the things

2452
02:20:06,819 --> 02:20:09,670
they need to fix they also need to fix

2453
02:20:08,229 --> 02:20:10,449
the total non-standard way that

2454
02:20:09,670 --> 02:20:11,979
everything is

2455
02:20:10,450 --> 02:20:14,110
scattered throughout the system well

2456
02:20:11,979 --> 02:20:15,129
which distribution you want oh okay then

2457
02:20:14,110 --> 02:20:15,480
these files are in totally different

2458
02:20:15,129 --> 02:20:17,439
place

2459
02:20:15,479 --> 02:20:19,000
someone needs to be able to go to the

2460
02:20:17,440 --> 02:20:22,271
internet and get an answer to their

2461
02:20:19,000 --> 02:20:23,799
Linux question it can't be oh well the

2462
02:20:22,271 --> 02:20:28,840
answer your question is if you're on

2463
02:20:23,799 --> 02:20:30,549
Ubuntu 12.04 on arch this edition oh are

2464
02:20:28,840 --> 02:20:32,530
you using Debbie and oh if it's Linux

2465
02:20:30,549 --> 02:20:34,719
Mint then those files are actually no

2466
02:20:32,530 --> 02:20:38,079
there has to be like an answer to the

2467
02:20:34,719 --> 02:20:41,100
question how do I fix this problem here

2468
02:20:38,079 --> 02:20:43,120
is the answer that's it it can't be

2469
02:20:41,101 --> 02:20:44,610
20,000 different web pages that each

2470
02:20:43,120 --> 02:20:46,811
have a totally different answer right

2471
02:20:44,610 --> 02:20:51,989
completely unacceptable

2472
02:20:46,810 --> 02:20:51,989
you know I'm Sam so off you go

2473
02:21:02,370 --> 02:21:06,720
can you explain why you use f/32 instead

2474
02:21:04,350 --> 02:21:09,479
of double yes f3 2's are twice as fast

2475
02:21:06,719 --> 02:21:11,879
as doubles on current machines the

2476
02:21:09,478 --> 02:21:13,949
reason is because typically the clock

2477
02:21:11,879 --> 02:21:16,739
cycle timing for an f32 instruction

2478
02:21:13,950 --> 02:21:19,649
versus an f/64 instruction is the same

2479
02:21:16,739 --> 02:21:22,049
but f 32s can be done for wide whereas

2480
02:21:19,648 --> 02:21:26,129
doubles can only be done too wide or if

2481
02:21:22,049 --> 02:21:29,059
you get up into future version the

2482
02:21:26,129 --> 02:21:31,739
instruction set like a VX then it's a

2483
02:21:29,059 --> 02:21:34,859
single pinion you know f/32 are eight

2484
02:21:31,739 --> 02:21:38,100
wide and f64 only four wide so basically

2485
02:21:34,859 --> 02:21:40,380
if you can use fot twos you're twice as

2486
02:21:38,100 --> 02:21:42,450
fast pretty much with your arithmetic

2487
02:21:40,379 --> 02:21:43,739
ops which is just always better so

2488
02:21:42,450 --> 02:21:46,290
unless you have a really good reason to

2489
02:21:43,739 --> 02:21:47,909
use double you generally don't want to

2490
02:21:46,290 --> 02:21:49,590
write or if you just don't care about

2491
02:21:47,909 --> 02:21:51,930
performance right then doesn't matter

2492
02:21:49,590 --> 02:21:52,859
which one you use use double from our

2493
02:21:51,930 --> 02:21:56,609
precision because you don't care what

2494
02:21:52,859 --> 02:21:57,840
the format says you know prom solved is

2495
02:21:56,609 --> 02:22:00,390
something that could cause Stack

2496
02:21:57,840 --> 02:22:06,139
Overflow or related to it I don't know

2497
02:22:00,389 --> 02:22:06,139
what the this is so I'm not sure

2498
02:22:23,250 --> 02:22:28,120
what you're talking about with unions

2499
02:22:25,860 --> 02:22:31,630
could they be related to the overflow of

2500
02:22:28,120 --> 02:22:33,940
variables if you did things wrong I was

2501
02:22:31,629 --> 02:22:35,319
asking because I was curious what error

2502
02:22:33,940 --> 02:22:39,120
codes you could look for for this

2503
02:22:35,319 --> 02:22:41,559
problem no this has nothing to do with

2504
02:22:39,120 --> 02:22:45,820
Stack Overflow it doesn't really have

2505
02:22:41,559 --> 02:22:49,899
anything to do with the stack at all so

2506
02:22:45,819 --> 02:22:54,909
I'm not sure I understand why you would

2507
02:22:49,899 --> 02:22:56,228
think that was implicated this has

2508
02:22:54,909 --> 02:22:59,440
nothing to do with a stack it's just how

2509
02:22:56,228 --> 02:23:02,920
you interpret this space so the space is

2510
02:22:59,440 --> 02:23:06,100
the same regardless it's oles 128 bits

2511
02:23:02,920 --> 02:23:10,799
or 16 bytes right it's always 16 bytes

2512
02:23:06,100 --> 02:23:10,800
of space the question is which kind of

2513
02:23:10,889 --> 02:23:15,539
sea type are you trying to say that it

2514
02:23:13,690 --> 02:23:19,690
is so that when you issue intrinsic s--

2515
02:23:15,540 --> 02:23:22,180
they're going to issue specific you're

2516
02:23:19,690 --> 02:23:25,090
gonna be using one of these two types to

2517
02:23:22,180 --> 02:23:27,550
issue a particular intrinsic it's purely

2518
02:23:25,090 --> 02:23:29,500
a compiler construct it doesn't have any

2519
02:23:27,549 --> 02:23:32,019
effect on the amount of stack space used

2520
02:23:29,500 --> 02:23:34,180
because they both use the same amount of

2521
02:23:32,020 --> 02:23:37,569
stack space they're both the same size

2522
02:23:34,180 --> 02:23:43,139
on the stack so if they can't really

2523
02:23:37,569 --> 02:23:43,139
affect affect a stack overflow

2524
02:23:52,011 --> 02:23:55,511
looks like we're good

2525
02:24:01,959 --> 02:24:06,159
alright let's go ahead and close it down

2526
02:24:13,530 --> 02:24:17,250
all righty

2527
02:24:20,040 --> 02:24:23,710
thank you everyone for joining me from

2528
02:24:22,479 --> 02:24:25,539
episode of hand made here that's what a

2529
02:24:23,709 --> 02:24:27,669
pleasure coding with you as always if

2530
02:24:25,540 --> 02:24:29,050
you would like to follow along the

2531
02:24:27,670 --> 02:24:31,120
series at home you go here to the game

2532
02:24:29,049 --> 02:24:32,469
on handmade hero org it comes with the

2533
02:24:31,120 --> 02:24:35,620
source code so you can do your own

2534
02:24:32,469 --> 02:24:38,469
experimentation with it and for example

2535
02:24:35,620 --> 02:24:41,950
we're leaving on a cliffhanger this week

2536
02:24:38,469 --> 02:24:44,949
we need to analyze whether our code is

2537
02:24:41,950 --> 02:24:46,300
prep whether we can generate good cosine

2538
02:24:44,950 --> 02:24:48,970
weighted distributions and we only just

2539
02:24:46,299 --> 02:24:50,529
started that so you could play around

2540
02:24:48,969 --> 02:24:52,389
with that this week and see what you

2541
02:24:50,530 --> 02:24:54,880
think and we need to do some math math

2542
02:24:52,389 --> 02:24:56,680
at mathematical analysis next week to

2543
02:24:54,879 --> 02:24:59,439
see how we want to analyze these and

2544
02:24:56,680 --> 02:25:00,639
whether we're doing a good job or not so

2545
02:24:59,440 --> 02:25:02,409
that's what we'll be doing next week but

2546
02:25:00,639 --> 02:25:05,079
you can beat me to it if you want get

2547
02:25:02,409 --> 02:25:07,260
all week to try it and so that would be

2548
02:25:05,079 --> 02:25:09,521
interesting thing to play around with

2549
02:25:07,260 --> 02:25:12,670
I'll be back here next week same time

2550
02:25:09,521 --> 02:25:13,960
same place probably until then have fun

2551
02:25:12,670 --> 02:25:15,399
programming everyone and I'll see

2552
02:25:13,959 --> 02:25:17,729
everyone on the Internet take it easy

2553
02:25:15,399 --> 02:25:17,729
everybody

