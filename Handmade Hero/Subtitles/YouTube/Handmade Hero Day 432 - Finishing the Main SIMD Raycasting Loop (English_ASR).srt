1
00:00:00,319 --> 00:00:03,899
hello everyone and welcome to hand made

2
00:00:02,700 --> 00:00:07,350
here oh sure we could a complete-game

3
00:00:03,899 --> 00:00:09,030
live on stream we are gonna finish Cindy

4
00:00:07,349 --> 00:00:10,649
optimizing the lighting today and

5
00:00:09,029 --> 00:00:13,439
that'll be nice cuz we don't even know

6
00:00:10,650 --> 00:00:16,130
how well we did yet we haven't even seen

7
00:00:13,439 --> 00:00:18,839
how much Cindy optimization will help us

8
00:00:16,129 --> 00:00:19,439
we're totally in the dark about that

9
00:00:18,839 --> 00:00:23,039
actually

10
00:00:19,439 --> 00:00:26,149
and as someone pointed out on the stream

11
00:00:23,039 --> 00:00:31,140
just now also I don't think we've ever

12
00:00:26,149 --> 00:00:37,920
realty threading with the sim decode yet

13
00:00:31,140 --> 00:00:41,009
either right if I'm not mistaken

14
00:00:37,920 --> 00:00:44,070
yeah that's still turned off so we don't

15
00:00:41,009 --> 00:00:46,829
really know anything about what this

16
00:00:44,070 --> 00:00:50,159
will look like when we when we run it

17
00:00:46,829 --> 00:00:54,239
right now it is I believe slower than

18
00:00:50,159 --> 00:00:56,308
the non Cindy version I would assume

19
00:00:54,238 --> 00:00:58,349
because we still downshift to a loop on

20
00:00:56,308 --> 00:01:00,780
the interior but I guess I don't really

21
00:00:58,350 --> 00:01:03,149
know if that's the case since we never

22
00:01:00,780 --> 00:01:04,890
ran it the other way so what I could do

23
00:01:03,149 --> 00:01:07,140
is run it multi-threaded now and see

24
00:01:04,890 --> 00:01:08,879
what our say this is success what people

25
00:01:07,140 --> 00:01:11,640
were wondering about I agree that's an

26
00:01:08,879 --> 00:01:14,339
interesting data point as we finish here

27
00:01:11,640 --> 00:01:20,069
just to see what the difference would be

28
00:01:14,340 --> 00:01:23,340
so running in Oh - if we take a look

29
00:01:20,069 --> 00:01:26,908
here what we've got Oh someone's angry

30
00:01:23,340 --> 00:01:35,670
ooh what is the problem compute like

31
00:01:26,909 --> 00:01:40,229
propagation so it looks like box surface

32
00:01:35,670 --> 00:01:41,609
index is coming back well I guess we

33
00:01:40,228 --> 00:01:44,969
don't really know what it's coming back

34
00:01:41,609 --> 00:01:47,420
as cuz this is an O 2 mode so in O 2

35
00:01:44,969 --> 00:01:51,078
mode we're getting a weird result there

36
00:01:47,420 --> 00:01:51,079
let's take a look at that

37
00:01:56,909 --> 00:02:05,229
so what happens here right is four bucks

38
00:02:00,519 --> 00:02:07,420
for a box surface index we are actually

39
00:02:05,228 --> 00:02:09,699
talking about the thing that's returned

40
00:02:07,420 --> 00:02:11,348
from the ray code which is not the same

41
00:02:09,699 --> 00:02:13,449
as in that case I mean it is the same

42
00:02:11,348 --> 00:02:14,738
meaning but it's not a loop it's

43
00:02:13,449 --> 00:02:16,298
actually something that just determines

44
00:02:14,739 --> 00:02:18,189
but that's that's like reporting back

45
00:02:16,299 --> 00:02:21,069
here which which one it is

46
00:02:18,189 --> 00:02:24,669
so box surface index here is something

47
00:02:21,068 --> 00:02:26,679
that comes out of the Ray results so

48
00:02:24,669 --> 00:02:30,250
it's this thing here we've got Ray

49
00:02:26,680 --> 00:02:33,670
bracket for the box service index is

50
00:02:30,250 --> 00:02:36,549
accessed off of the individual one we're

51
00:02:33,669 --> 00:02:39,909
looking at here and when we find that

52
00:02:36,549 --> 00:02:43,329
we've got a hit which is determined by

53
00:02:39,909 --> 00:02:47,079
this get box call here oh so there we go

54
00:02:43,329 --> 00:02:49,239
so this box index this is a problem here

55
00:02:47,079 --> 00:02:51,400
so we're not actually this won't

56
00:02:49,239 --> 00:02:54,280
necessarily return zero for zero

57
00:02:51,400 --> 00:02:58,450
I don't think because box 0 is not a

58
00:02:54,280 --> 00:03:02,969
reserved box I don't think we probably

59
00:02:58,449 --> 00:03:06,509
want it to be would be my guess

60
00:03:02,969 --> 00:03:09,068
and we probably want that to be clear so

61
00:03:06,509 --> 00:03:11,138
if we take a look in here right this is

62
00:03:09,068 --> 00:03:14,768
always gonna return a valid box because

63
00:03:11,139 --> 00:03:16,840
box zero is gonna be valid I so you know

64
00:03:14,769 --> 00:03:19,719
I don't know how exactly we want to do

65
00:03:16,840 --> 00:03:21,039
this it's a good question we'll have to

66
00:03:19,719 --> 00:03:22,959
play with it a little bit but let me

67
00:03:21,039 --> 00:03:26,500
just go ahead and insert a value there

68
00:03:22,959 --> 00:03:29,799
temporarily so that we have a clear way

69
00:03:26,500 --> 00:03:33,909
to do that so in here where we that's

70
00:03:29,799 --> 00:03:35,290
not where we want to be I always start

71
00:03:33,909 --> 00:03:39,189
talking before I actually get to the

72
00:03:35,289 --> 00:03:41,769
place because that's just easier to have

73
00:03:39,189 --> 00:03:43,090
the flow of the narration of the stream

74
00:03:41,769 --> 00:03:44,560
so it's like sometimes I'm on the

75
00:03:43,090 --> 00:03:46,239
totally wrong file and I'm like here in

76
00:03:44,560 --> 00:03:48,189
the thing and it's like well no we're

77
00:03:46,239 --> 00:03:49,659
not hearing that thing yet that's where

78
00:03:48,189 --> 00:03:50,039
I want to go it's not where we're there

79
00:03:49,659 --> 00:03:53,620
yet

80
00:03:50,039 --> 00:03:57,068
so here in the file where we define the

81
00:03:53,620 --> 00:03:58,629
results if I go ahead and put a B 32 in

82
00:03:57,068 --> 00:04:01,689
here that's just like hit or whatever

83
00:03:58,629 --> 00:04:04,120
right then what we can do is when we're

84
00:04:01,689 --> 00:04:07,419
actually checking this when we come

85
00:04:04,120 --> 00:04:09,319
through and set it right then we we can

86
00:04:07,419 --> 00:04:11,569
just set all of these hit values

87
00:04:09,318 --> 00:04:14,179
here and we'll play around with how we

88
00:04:11,568 --> 00:04:15,589
want to track that you know when we undo

89
00:04:14,180 --> 00:04:20,060
this loop down here we still got this

90
00:04:15,590 --> 00:04:21,560
one loop down here right right here we

91
00:04:20,060 --> 00:04:23,870
still got this one loop right here that

92
00:04:21,560 --> 00:04:25,519
we got to get rid of when we today when

93
00:04:23,870 --> 00:04:27,439
we get rid of that loop that's a good

94
00:04:25,519 --> 00:04:29,930
time for how we want to broadcast the

95
00:04:27,439 --> 00:04:32,000
results of the hit back to this routine

96
00:04:29,930 --> 00:04:35,418
because that'll tell us what's going on

97
00:04:32,000 --> 00:04:37,490
right so we hear really all we have to

98
00:04:35,418 --> 00:04:39,439
do we're looping over the sub rays what

99
00:04:37,490 --> 00:04:41,930
we can do here is just get rid of all of

100
00:04:39,439 --> 00:04:46,579
this stuff pretty quickly we can just

101
00:04:41,930 --> 00:04:51,650
say like alright I think box service

102
00:04:46,579 --> 00:05:00,439
index and and the Ray position here

103
00:04:51,649 --> 00:05:03,019
those Serb both inside this right so in

104
00:05:00,439 --> 00:05:05,300
fact even this is so really all we have

105
00:05:03,019 --> 00:05:07,538
to do here is just do this if Ray sub

106
00:05:05,300 --> 00:05:07,538
ray

107
00:05:08,110 --> 00:05:15,288
hit and then we know we can just rely on

108
00:05:12,019 --> 00:05:20,779
in here if this is true we just have

109
00:05:15,288 --> 00:05:23,209
result C index hit equals true now

110
00:05:20,779 --> 00:05:25,519
probably what we'll do instead is just

111
00:05:23,209 --> 00:05:27,500
report back the mask so we don't have to

112
00:05:25,519 --> 00:05:29,299
do any work right and then the outside

113
00:05:27,500 --> 00:05:30,889
code will be the thing that actually

114
00:05:29,300 --> 00:05:32,900
looks for the mask or something right so

115
00:05:30,889 --> 00:05:34,310
you can see that this will we're just

116
00:05:32,899 --> 00:05:38,448
doing this as a temporary plumbing

117
00:05:34,310 --> 00:05:40,970
procedure and we'll get rid of it in a

118
00:05:38,449 --> 00:05:45,530
in a second when we actually clean that

119
00:05:40,970 --> 00:05:49,570
up right so all right let's take a look

120
00:05:45,529 --> 00:05:49,569
at what happens here in the o2 version

121
00:05:50,649 --> 00:05:54,519
here's the o2 version

122
00:05:58,329 --> 00:06:10,269
and so what what so I guess that bug

123
00:06:08,348 --> 00:06:15,610
which would have been happening all the

124
00:06:10,269 --> 00:06:20,168
time was a pretty big one right because

125
00:06:15,610 --> 00:06:26,430
now we're running at 30 milliseconds but

126
00:06:20,168 --> 00:06:26,430
I don't think we're doing any less work

127
00:06:30,060 --> 00:06:37,449
did I enable the so just that looks like

128
00:06:35,889 --> 00:06:39,848
that must-own oh I okay there we go

129
00:06:37,449 --> 00:06:42,639
that's like I must have been able so

130
00:06:39,848 --> 00:06:47,050
let's see that again it's like I must

131
00:06:42,639 --> 00:06:50,319
have enabled the multi-threading and and

132
00:06:47,050 --> 00:06:52,889
I had I just forgot I had um so okay so

133
00:06:50,319 --> 00:06:59,979
here's the single threaded sim D version

134
00:06:52,889 --> 00:07:05,250
running here right so there we go

135
00:06:59,978 --> 00:07:05,250
and this is doing again this is doing I

136
00:07:05,399 --> 00:07:16,538
think all 64 raised right so this is 16

137
00:07:13,899 --> 00:07:19,989
casts of 4 raised each this is the full

138
00:07:16,538 --> 00:07:28,060
64 so when we turn on the

139
00:07:19,990 --> 00:07:29,500
multi-threading oops this is the full

140
00:07:28,060 --> 00:07:32,319
version that we were trying to run that

141
00:07:29,500 --> 00:07:34,990
speed before and now with Cindy it

142
00:07:32,319 --> 00:07:37,569
actually is running it at 30 frames a

143
00:07:34,990 --> 00:07:41,528
second which is not as good as 60 frames

144
00:07:37,569 --> 00:07:43,900
a second but it's getting there right so

145
00:07:41,528 --> 00:07:47,680
you know we're making improvements here

146
00:07:43,899 --> 00:07:50,519
we've still got a lot more work to do so

147
00:07:47,680 --> 00:07:53,680
I think we'll get a lot faster than this

148
00:07:50,519 --> 00:07:54,788
eventually and I think we'll also be

149
00:07:53,680 --> 00:07:56,259
able to reduce some of the flicker

150
00:07:54,788 --> 00:07:58,240
further because there are some things I

151
00:07:56,259 --> 00:08:00,939
hadn't tried yet regarding flicker as

152
00:07:58,240 --> 00:08:04,810
well so you know we're definitely

153
00:08:00,939 --> 00:08:06,218
getting there on lighting and we're

154
00:08:04,810 --> 00:08:08,980
still retaining a lot of the kind of

155
00:08:06,218 --> 00:08:11,259
fancy features that I didn't want to

156
00:08:08,980 --> 00:08:13,810
get rid of so that as we sort of use

157
00:08:11,259 --> 00:08:15,279
this lighting more in the actual game we

158
00:08:13,810 --> 00:08:16,959
can have cool stuff like I like the fact

159
00:08:15,279 --> 00:08:19,089
that we still have subtle bounce like

160
00:08:16,959 --> 00:08:21,669
blue light that bounces off of surfaces

161
00:08:19,089 --> 00:08:24,189
and red light that bounces off surfaces

162
00:08:21,670 --> 00:08:26,710
and so on I just I just kind of like

163
00:08:24,189 --> 00:08:30,430
that and so I think as we improve the

164
00:08:26,709 --> 00:08:31,599
lighting which we will do like that's

165
00:08:30,430 --> 00:08:34,560
just really nice I mean I don't know I

166
00:08:31,600 --> 00:08:37,029
think it's pretty cool when you get into

167
00:08:34,559 --> 00:08:38,559
when you get a light near a wall and it

168
00:08:37,029 --> 00:08:41,350
produces that bounce color I don't know

169
00:08:38,559 --> 00:08:42,849
it just feels really good and kind of

170
00:08:41,350 --> 00:08:46,210
brings the game alive an interesting way

171
00:08:42,850 --> 00:08:47,860
so yeah I'm pretty excited about the

172
00:08:46,210 --> 00:08:51,250
potential of this going forwards as we

173
00:08:47,860 --> 00:08:52,419
clean it up and improve it and you know

174
00:08:51,250 --> 00:08:53,620
I just think it's gonna be pretty sting

175
00:08:52,419 --> 00:08:55,240
and we still don't really know exactly

176
00:08:53,620 --> 00:08:57,820
how we're gonna use the lighting in the

177
00:08:55,240 --> 00:08:59,740
render time either so you know right now

178
00:08:57,820 --> 00:09:01,330
I mean that just looks good even right

179
00:08:59,740 --> 00:09:02,980
now that that in there that lighting

180
00:09:01,330 --> 00:09:04,270
just looks kind of good but we haven't

181
00:09:02,980 --> 00:09:06,159
even done a bunch of stuff that we want

182
00:09:04,269 --> 00:09:08,350
to do that you know we could do for

183
00:09:06,159 --> 00:09:09,909
during render to maybe smooth to smooth

184
00:09:08,350 --> 00:09:11,350
it out and make it more continuous

185
00:09:09,909 --> 00:09:13,299
across continuous services and stuff

186
00:09:11,350 --> 00:09:15,340
like that so that we can have both the

187
00:09:13,299 --> 00:09:17,829
sort of nice articulation that these are

188
00:09:15,340 --> 00:09:19,720
blocks which we're getting but also a

189
00:09:17,830 --> 00:09:21,220
little more coherency in the light when

190
00:09:19,720 --> 00:09:23,350
when they when there shouldn't be brakes

191
00:09:21,220 --> 00:09:24,700
which we can play with and again I don't

192
00:09:23,350 --> 00:09:26,320
know if we actually want that it may

193
00:09:24,700 --> 00:09:28,150
turn out that the art style really wants

194
00:09:26,320 --> 00:09:32,020
to be discontinuous across blocks but

195
00:09:28,149 --> 00:09:35,399
you know anyway so looking good but we

196
00:09:32,019 --> 00:09:35,399
got work to do let's go ahead and finish

197
00:09:36,299 --> 00:09:40,500
but I'm happy that we're at 30 frames a

198
00:09:38,500 --> 00:09:44,950
second already that's kind of a nice a

199
00:09:40,500 --> 00:09:46,120
nice turn so if we come through here and

200
00:09:44,950 --> 00:09:46,990
we take a look at our ray cast through

201
00:09:46,120 --> 00:09:48,580
we're I'm gonna move it to the other

202
00:09:46,990 --> 00:09:52,330
side so that my head is not taking it

203
00:09:48,580 --> 00:09:53,710
part of our our code view there so if we

204
00:09:52,330 --> 00:09:55,870
take a look at what's going on in here

205
00:09:53,710 --> 00:09:58,450
I'm gonna go ahead and take this code

206
00:09:55,870 --> 00:10:01,419
out now that I'm pretty sure we're doing

207
00:09:58,450 --> 00:10:03,550
a reasonable job of that so we take a

208
00:10:01,419 --> 00:10:07,079
look through here we can see that we get

209
00:10:03,549 --> 00:10:09,370
down to this part of of the loop and

210
00:10:07,080 --> 00:10:11,620
this is where we have to downshift the

211
00:10:09,370 --> 00:10:16,840
part where we know we actually retire

212
00:10:11,620 --> 00:10:23,590
right so what this is is this is when at

213
00:10:16,840 --> 00:10:26,649
least when this is when all of the Ray

214
00:10:23,590 --> 00:10:29,170
have have decided they don't need to do

215
00:10:26,649 --> 00:10:32,409
any finer grained checking is what

216
00:10:29,169 --> 00:10:34,419
happens here now there's thing there's

217
00:10:32,409 --> 00:10:37,379
different ways we might want to do this

218
00:10:34,419 --> 00:10:39,819
and it's difficult to know which one

219
00:10:37,379 --> 00:10:41,529
will be better or worse and we're gonna

220
00:10:39,820 --> 00:10:48,640
have to probably try them both because I

221
00:10:41,529 --> 00:10:50,860
don't really know which one to do so one

222
00:10:48,639 --> 00:10:55,960
way we can do it is we can only

223
00:10:50,860 --> 00:10:58,960
calculate Rea results at the end so we

224
00:10:55,960 --> 00:11:00,879
won't record ray hits until all Ray's

225
00:10:58,960 --> 00:11:04,389
have gotten down to the appropriate

226
00:11:00,879 --> 00:11:09,580
level of granularity for their hit

227
00:11:04,389 --> 00:11:11,649
testing that's one thing we can do the

228
00:11:09,580 --> 00:11:15,900
other thing we can do is anyone who

229
00:11:11,649 --> 00:11:18,939
passes the masks without the bound check

230
00:11:15,899 --> 00:11:25,149
who passes the masks anyone who passes

231
00:11:18,940 --> 00:11:27,820
the masks records they're hit always and

232
00:11:25,149 --> 00:11:28,600
does not use more granular you know what

233
00:11:27,820 --> 00:11:30,490
why am I

234
00:11:28,600 --> 00:11:36,490
I'm just flapping my gums at you you

235
00:11:30,490 --> 00:11:38,560
have no idea I'm talking about let me

236
00:11:36,490 --> 00:11:43,870
draw a diagram then everyone knows what

237
00:11:38,559 --> 00:11:46,659
I'm talking about so previously here's

238
00:11:43,870 --> 00:11:47,980
what was happening I have a sample point

239
00:11:46,659 --> 00:11:56,230
and I'm sampling out through the world

240
00:11:47,980 --> 00:11:57,789
like so and I've got boxes right as I go

241
00:11:56,230 --> 00:11:59,259
through the world I check these boxes

242
00:11:57,789 --> 00:12:00,669
that I hit this one no I didn't did I

243
00:11:59,259 --> 00:12:02,439
hit this one no I didn't did I hit this

244
00:12:00,669 --> 00:12:05,079
one yes I did I hit this one yes I did

245
00:12:02,440 --> 00:12:07,390
right and then we only record the

246
00:12:05,080 --> 00:12:08,770
earliest so if I hit this one first I

247
00:12:07,389 --> 00:12:10,509
record it and then I hit this one and

248
00:12:08,769 --> 00:12:12,069
throw it out because it's too far if I

249
00:12:10,509 --> 00:12:14,049
hit this one first I record it then I

250
00:12:12,070 --> 00:12:15,640
hit this one I overwrite it right but

251
00:12:14,049 --> 00:12:17,019
I'm always gonna end up with this one I

252
00:12:15,639 --> 00:12:22,779
was gonna end up with the closest hit

253
00:12:17,019 --> 00:12:24,819
that's just true right however one thing

254
00:12:22,779 --> 00:12:27,909
that we introduced was the fact that the

255
00:12:24,820 --> 00:12:31,270
bounding hierarchy has its own record of

256
00:12:27,909 --> 00:12:36,110
what the lighting is generally speaking

257
00:12:31,269 --> 00:12:38,419
and this is a technique to reduce the

258
00:12:36,110 --> 00:12:40,220
by saying look you don't have to

259
00:12:38,419 --> 00:12:43,009
traverse the whole hierarchy and get the

260
00:12:40,220 --> 00:12:45,019
lighting if it's too far away we'll just

261
00:12:43,009 --> 00:12:47,720
give you an average of what the boxes in

262
00:12:45,019 --> 00:12:54,319
that area tend to give off lighting wise

263
00:12:47,720 --> 00:12:56,750
right so if we were to do that which is

264
00:12:54,320 --> 00:13:00,680
what we're doing now that means that

265
00:12:56,750 --> 00:13:03,529
like this light sample would be recorded

266
00:13:00,679 --> 00:13:07,789
instead of this one here on the box that

267
00:13:03,529 --> 00:13:10,069
we that we actually hit the sort of the

268
00:13:07,789 --> 00:13:11,659
parent box would take precedence because

269
00:13:10,070 --> 00:13:15,700
we never go down and check the lower

270
00:13:11,659 --> 00:13:15,699
boxes we just use it as the hit that

271
00:13:18,070 --> 00:13:23,210
once we go multi-threaded is no longer

272
00:13:20,629 --> 00:13:28,129
the case once we go multi-threaded if

273
00:13:23,210 --> 00:13:31,490
there are two rays and one or multiple

274
00:13:28,129 --> 00:13:32,000
rays and some of those rays hit the bus

275
00:13:31,490 --> 00:13:35,450
box

276
00:13:32,000 --> 00:13:38,779
and other rays don't then what we will

277
00:13:35,450 --> 00:13:40,370
do is if any of those rays would have

278
00:13:38,779 --> 00:13:41,209
hit it at a time when we should have

279
00:13:40,370 --> 00:13:44,090
traversed it

280
00:13:41,210 --> 00:13:45,980
we will traverse it for all the Rays so

281
00:13:44,090 --> 00:13:50,960
if one of the Rays really should have

282
00:13:45,980 --> 00:13:52,700
used the average it won't because we're

283
00:13:50,960 --> 00:13:55,670
doing them as a bundle and we choose to

284
00:13:52,700 --> 00:13:58,190
traverse that part of the hierarchy or

285
00:13:55,669 --> 00:14:06,429
not based on whether anyone needed to

286
00:13:58,190 --> 00:14:11,870
not whether they all needed to right so

287
00:14:06,429 --> 00:14:18,859
given that fact we then have to figure

288
00:14:11,870 --> 00:14:19,279
out well okay is that the right thing to

289
00:14:18,860 --> 00:14:21,409
do

290
00:14:19,279 --> 00:14:24,289
should we preserve our old behavior

291
00:14:21,409 --> 00:14:28,279
where we recorded the hits and don't

292
00:14:24,289 --> 00:14:30,110
traverse for those rays or do we allow

293
00:14:28,279 --> 00:14:31,730
them to diverse because hey we're gonna

294
00:14:30,110 --> 00:14:33,470
do those checks anyway it's no extra

295
00:14:31,730 --> 00:14:35,659
work for us because we're gonna check

296
00:14:33,470 --> 00:14:36,769
all these rays as a bundle so we're

297
00:14:35,659 --> 00:14:41,360
gonna do the checks and just throw them

298
00:14:36,769 --> 00:14:43,610
out if we were to use the the hierarchy

299
00:14:41,360 --> 00:14:45,169
one so the question is just do we want

300
00:14:43,610 --> 00:14:47,240
to use the hierarchy one because

301
00:14:45,169 --> 00:14:49,069
obviously that could reduce very and

302
00:14:47,240 --> 00:14:49,769
since it's using an average from an area

303
00:14:49,070 --> 00:14:51,239
instead of

304
00:14:49,769 --> 00:14:55,350
using the individual hits which could

305
00:14:51,239 --> 00:14:56,910
vary more and the other question is do

306
00:14:55,350 --> 00:14:58,589
we really even care because how often

307
00:14:56,909 --> 00:15:04,469
does that even happen right and I'm not

308
00:14:58,589 --> 00:15:07,230
sure it would happen a tremendous amount

309
00:15:04,470 --> 00:15:09,720
if we were passing rays that were cast

310
00:15:07,230 --> 00:15:11,220
from different starting locations but

311
00:15:09,720 --> 00:15:13,350
since we're passing rays that start from

312
00:15:11,220 --> 00:15:15,778
the same starting location it's a lot

313
00:15:13,350 --> 00:15:19,769
less likely pretty much what has to

314
00:15:15,778 --> 00:15:21,509
happen is array has to shoot directly

315
00:15:19,769 --> 00:15:23,850
that way in another way a to shoot this

316
00:15:21,509 --> 00:15:26,759
way and when this rake hits and this

317
00:15:23,850 --> 00:15:31,639
rate hits that length has to be too far

318
00:15:26,759 --> 00:15:35,188
and this length has to be close enough

319
00:15:31,639 --> 00:15:36,360
right so this one would go through and

320
00:15:35,188 --> 00:15:41,610
this one wouldn't have gone through

321
00:15:36,360 --> 00:15:44,339
right but now they both go through does

322
00:15:41,610 --> 00:15:45,928
that make sense so I don't know which of

323
00:15:44,339 --> 00:15:49,649
those two we want to do fortunately I

324
00:15:45,928 --> 00:15:55,798
don't think it's a big deal to do either

325
00:15:49,649 --> 00:15:58,318
really so I guess we should just test it

326
00:15:55,798 --> 00:16:00,480
either way so for example one way we

327
00:15:58,318 --> 00:16:03,088
could we could test it right now right

328
00:16:00,480 --> 00:16:10,789
we could go ahead and say all right we

329
00:16:03,089 --> 00:16:14,850
record hits like this and we just go

330
00:16:10,789 --> 00:16:22,618
anybody who did a hit here does record

331
00:16:14,850 --> 00:16:26,569
the hit something like this and then we

332
00:16:22,619 --> 00:16:26,569
do the recursion after the fact

333
00:16:27,889 --> 00:16:30,889
young-sam

334
00:16:35,580 --> 00:16:42,450
and it looks like we break in any case

335
00:16:38,159 --> 00:16:45,379
don't we right we had we had it like

336
00:16:42,450 --> 00:16:48,360
this this break is actually just here

337
00:16:45,379 --> 00:16:49,769
there's there is no we're gonna get out

338
00:16:48,360 --> 00:16:51,360
of the loop we're not going to keep

339
00:16:49,769 --> 00:16:53,850
going

340
00:16:51,360 --> 00:16:56,159
because when we're checking these axes

341
00:16:53,850 --> 00:16:59,190
we don't need to check any more axes

342
00:16:56,159 --> 00:17:06,000
once somebody hits because if somebody

343
00:16:59,190 --> 00:17:07,939
hits either we will descend right or we

344
00:17:06,000 --> 00:17:14,509
will record the hits I guess

345
00:17:07,939 --> 00:17:14,509
wait that's not really true is it

346
00:17:25,319 --> 00:17:29,879
yeah that's not really true so that the

347
00:17:28,079 --> 00:17:35,720
break statement really needs to go there

348
00:17:29,880 --> 00:17:38,220
I think because if we're gonna descend

349
00:17:35,720 --> 00:17:39,630
from this box then we definitely don't

350
00:17:38,220 --> 00:17:41,730
need to keep checking but if we're not

351
00:17:39,630 --> 00:17:44,160
going to we don't know which raise have

352
00:17:41,730 --> 00:17:47,569
finished and which ones haven't so I

353
00:17:44,160 --> 00:17:47,570
think that is the more correct

354
00:17:49,190 --> 00:17:56,309
interpretation we can break out there is

355
00:17:53,640 --> 00:18:07,050
an early out here which is if all of

356
00:17:56,309 --> 00:18:13,710
them are true right so basically if so

357
00:18:07,049 --> 00:18:15,960
if every one is true when we're in the

358
00:18:13,710 --> 00:18:18,509
hip case that would be a break I believe

359
00:18:15,960 --> 00:18:20,130
that's actually valid I don't know how

360
00:18:18,509 --> 00:18:22,200
often that happens we could count that

361
00:18:20,130 --> 00:18:25,340
branch and see whether we even want to

362
00:18:22,200 --> 00:18:28,740
bother checking but I think that's more

363
00:18:25,339 --> 00:18:32,759
technically the case so again that's the

364
00:18:28,740 --> 00:18:34,740
situation here and the question is well

365
00:18:32,759 --> 00:18:38,759
all right do we want to do this

366
00:18:34,740 --> 00:18:45,000
effectively up here which is record all

367
00:18:38,759 --> 00:18:48,480
the hits for anyone who was I guess not

368
00:18:45,000 --> 00:18:50,750
close not in the close enough bracket of

369
00:18:48,480 --> 00:18:50,750
things

370
00:19:01,180 --> 00:19:08,090
so basically if you were not close

371
00:19:04,609 --> 00:19:11,479
enough to descend and you had your mask

372
00:19:08,089 --> 00:19:16,639
set then you would record this hit and

373
00:19:11,480 --> 00:19:20,079
let it be primal right that's not right

374
00:19:16,640 --> 00:19:26,870
at all is it I thought that was right

375
00:19:20,079 --> 00:19:29,859
apparently I'm wrong close enough to the

376
00:19:26,869 --> 00:19:29,859
seriousness of Tmax

377
00:19:45,119 --> 00:19:51,419
well I guess technically box child count

378
00:19:47,950 --> 00:19:51,420
would also have to be in there right

379
00:19:54,690 --> 00:19:58,440
technically we'd have to do this

380
00:20:02,190 --> 00:20:12,629
I don't think that was the problem not

381
00:20:04,138 --> 00:20:15,119
necessarily apparently was so I think

382
00:20:12,628 --> 00:20:18,569
that is what would actually be required

383
00:20:15,119 --> 00:20:20,750
to make the program work the way it was

384
00:20:18,569 --> 00:20:30,509
supposed to in the previous version

385
00:20:20,750 --> 00:20:33,869
right and I just don't know how I feel

386
00:20:30,509 --> 00:20:35,788
about it one way or the other I feel

387
00:20:33,869 --> 00:20:38,969
like the added complexity probably isn't

388
00:20:35,788 --> 00:20:40,259
worth it so I think what I'm gonna do is

389
00:20:38,970 --> 00:20:46,798
I'm gonna stick with the previous way

390
00:20:40,259 --> 00:20:48,509
for a while anyway so I think we'll

391
00:20:46,798 --> 00:20:50,638
stick with this and we'll fine-tune this

392
00:20:48,509 --> 00:20:52,740
a bit more and then we'll take a look at

393
00:20:50,638 --> 00:20:58,199
it later and see if there's other stuff

394
00:20:52,740 --> 00:21:00,839
we want to do here all right so taking a

395
00:20:58,200 --> 00:21:02,759
look here at how this goes we need to

396
00:21:00,839 --> 00:21:04,528
work on this part of our code because

397
00:21:02,759 --> 00:21:07,259
this part of the code is garbage it's

398
00:21:04,528 --> 00:21:09,119
complete garbage right now so we want to

399
00:21:07,259 --> 00:21:11,069
figure out a way to make it less garbage

400
00:21:09,119 --> 00:21:13,378
and the way we want to make it less

401
00:21:11,069 --> 00:21:15,658
garbage is this is just a loop that

402
00:21:13,378 --> 00:21:20,730
takes preferences here like it basically

403
00:21:15,659 --> 00:21:22,860
takes the values we actually want versus

404
00:21:20,730 --> 00:21:25,259
the values we don't based on the mask so

405
00:21:22,859 --> 00:21:28,918
if the mask is set then what we want to

406
00:21:25,259 --> 00:21:31,019
do is take results and replace the ones

407
00:21:28,919 --> 00:21:32,820
we have with the new results if the mask

408
00:21:31,019 --> 00:21:37,200
isn't set we want to leave the old

409
00:21:32,819 --> 00:21:40,528
results as they were so we want to do is

410
00:21:37,200 --> 00:21:42,149
hoist these out one at a time into the

411
00:21:40,528 --> 00:21:46,609
results structure that's going to be

412
00:21:42,148 --> 00:21:49,138
used as the raycast result report so

413
00:21:46,609 --> 00:21:51,839
probably what we want to do here is just

414
00:21:49,138 --> 00:21:54,418
leave the mask value as it is because

415
00:21:51,839 --> 00:21:56,638
the mask value is the thing that's gonna

416
00:21:54,419 --> 00:22:01,919
tell you which rays hit and which rays

417
00:21:56,638 --> 00:22:05,250
didn't right so our hit in the raycast

418
00:22:01,919 --> 00:22:10,379
results I think that's just one of the

419
00:22:05,250 --> 00:22:13,798
things that we need is the mask here so

420
00:22:10,378 --> 00:22:16,109
what we'll do at the outset is in the

421
00:22:13,798 --> 00:22:17,759
result and again we will

422
00:22:16,109 --> 00:22:20,548
do the thing I start to do the other day

423
00:22:17,759 --> 00:22:23,640
it's which is to change this from a zero

424
00:22:20,548 --> 00:22:28,288
one two three thing to just being all

425
00:22:23,640 --> 00:22:30,980
packed in one and I don't know if we

426
00:22:28,288 --> 00:22:32,879
should make this be a return or not

427
00:22:30,980 --> 00:22:34,620
probably we should

428
00:22:32,880 --> 00:22:40,320
I'm guessing this should look more like

429
00:22:34,619 --> 00:22:46,259
this now just to give the compiler the

430
00:22:40,319 --> 00:22:47,369
understanding that you know the values

431
00:22:46,259 --> 00:22:49,230
that are coming into this are irrelevant

432
00:22:47,369 --> 00:22:51,449
you don't have to know what they are so

433
00:22:49,230 --> 00:22:55,759
don't worry about it

434
00:22:51,450 --> 00:22:58,740
and so we can see to inline this routine

435
00:22:55,759 --> 00:23:01,408
into the code on the outside and just

436
00:22:58,740 --> 00:23:02,970
merge them together we could do that for

437
00:23:01,409 --> 00:23:07,980
it later as well we could just copy this

438
00:23:02,970 --> 00:23:09,419
in anyway here's our raycast results and

439
00:23:07,980 --> 00:23:15,419
so we're going to start out by setting

440
00:23:09,419 --> 00:23:18,240
the hid value to f-22 or zero right so

441
00:23:15,419 --> 00:23:19,559
we just want that to be clear and we

442
00:23:18,240 --> 00:23:21,000
want that to be clear because that's the

443
00:23:19,558 --> 00:23:22,648
only thing we actually need to report

444
00:23:21,000 --> 00:23:25,440
back in the case of no hits we don't

445
00:23:22,648 --> 00:23:26,819
need to tell them that's other stuff so

446
00:23:25,440 --> 00:23:30,360
then we need to do is have these other

447
00:23:26,819 --> 00:23:31,769
ones here they all need to be the same

448
00:23:30,359 --> 00:23:33,719
right they all need to be done the same

449
00:23:31,769 --> 00:23:36,120
way but what I'm gonna do is I'm just

450
00:23:33,720 --> 00:23:38,759
gonna start again one at a time

451
00:23:36,119 --> 00:23:42,989
so these are all gonna be brackets for

452
00:23:38,759 --> 00:23:48,408
for now and then we're gonna move them

453
00:23:42,990 --> 00:23:50,460
out one time into actual correct Simbi

454
00:23:48,409 --> 00:23:52,679
so the first thing I want to do is say

455
00:23:50,460 --> 00:23:56,669
all right let's up update the hit valued

456
00:23:52,679 --> 00:23:58,288
differently so the result hit value that

457
00:23:56,669 --> 00:24:06,500
we're gonna end up add that return

458
00:23:58,288 --> 00:24:09,148
statement so the result hit value here

459
00:24:06,500 --> 00:24:12,538
is just a thing that needs to get word

460
00:24:09,148 --> 00:24:13,859
in so essentially what we're doing is

461
00:24:12,538 --> 00:24:17,069
we're filling out the things for which

462
00:24:13,859 --> 00:24:18,949
the mask was true so what we should be

463
00:24:17,069 --> 00:24:21,629
able to do is just or the mask in

464
00:24:18,950 --> 00:24:23,038
because it's sorry our result zeros when

465
00:24:21,630 --> 00:24:25,409
we get a lane that comes through is as

466
00:24:23,038 --> 00:24:27,148
all ones we just want to slot that in so

467
00:24:25,409 --> 00:24:29,370
we want to just merge those results with

468
00:24:27,148 --> 00:24:30,808
what we already have

469
00:24:29,369 --> 00:24:33,719
that should be the entirety of the

470
00:24:30,808 --> 00:24:34,829
update step for the mask and we

471
00:24:33,720 --> 00:24:36,690
definitely don't need to do it inside

472
00:24:34,829 --> 00:24:37,980
the loop because it will get all of the

473
00:24:36,690 --> 00:24:39,750
lanes that should have been merged we'll

474
00:24:37,980 --> 00:24:42,539
just merge with that one or operation we

475
00:24:39,750 --> 00:24:45,450
don't have to do it per Lane so that

476
00:24:42,539 --> 00:24:49,470
should completely finish that right that

477
00:24:45,450 --> 00:24:52,170
that should be done at that point

478
00:24:49,470 --> 00:24:54,259
and if I go through here and I just

479
00:24:52,170 --> 00:24:58,100
double check I don't think we have like

480
00:24:54,259 --> 00:25:01,500
or equals operator or any of that stuff

481
00:24:58,099 --> 00:25:04,949
at least I don't think we do so I should

482
00:25:01,500 --> 00:25:06,480
go ahead and find the x equals sorts of

483
00:25:04,950 --> 00:25:09,808
stuff and just make sure we have

484
00:25:06,480 --> 00:25:12,720
versions of those so here's like you

485
00:25:09,808 --> 00:25:15,299
know plus equals minus equals x equals

486
00:25:12,720 --> 00:25:20,429
divide equals and what I'll do here is

487
00:25:15,299 --> 00:25:21,750
I'll just like grab one of these and

488
00:25:20,429 --> 00:25:25,940
then down in here where we're actually

489
00:25:21,750 --> 00:25:28,558
doing those those binary operate ups

490
00:25:25,940 --> 00:25:35,400
I'll put those in here so here's and

491
00:25:28,558 --> 00:25:37,829
equals and here's or equals and again

492
00:25:35,400 --> 00:25:40,080
we're just using it the two-tier state

493
00:25:37,829 --> 00:25:42,389
system so that it we only have to write

494
00:25:40,079 --> 00:25:44,759
the function once and we can get the

495
00:25:42,390 --> 00:25:48,059
pops out of it so make it easier for

496
00:25:44,759 --> 00:25:50,549
people to pour it so now we just need to

497
00:25:48,058 --> 00:25:53,359
do the temporary port work here

498
00:25:50,549 --> 00:26:02,339
like I said make these B bracket Abel

499
00:25:53,359 --> 00:26:06,029
like so yeah so here's my recast

500
00:26:02,339 --> 00:26:09,049
function we're gonna do ray cast result

501
00:26:06,029 --> 00:26:11,308
ray equals ray cast and get rid of that

502
00:26:09,049 --> 00:26:13,740
and then when we're looking at the right

503
00:26:11,308 --> 00:26:16,649
here this subarray thing is just going

504
00:26:13,740 --> 00:26:18,029
to loop over for temporarily and then

505
00:26:16,650 --> 00:26:20,220
it's not gonna loop over anything in a

506
00:26:18,029 --> 00:26:22,259
minute here so now when we want to see

507
00:26:20,220 --> 00:26:25,319
whether something kick again we can

508
00:26:22,259 --> 00:26:29,308
choose this out again by just doing em 1

509
00:26:25,319 --> 00:26:31,079
28 q 32 here and looking at that sub

510
00:26:29,308 --> 00:26:34,428
value to see whether or not the hit is

511
00:26:31,079 --> 00:26:36,990
recorded and then everybody else

512
00:26:34,429 --> 00:26:38,670
oops we don't need that we can just use

513
00:26:36,990 --> 00:26:40,440
an e right oh well

514
00:26:38,670 --> 00:26:42,450
mmm I don't really want to do that

515
00:26:40,440 --> 00:26:42,779
because that's a floating point 5 moment

516
00:26:42,450 --> 00:26:47,759
so we're going

517
00:26:42,779 --> 00:26:49,680
that way so in here everything else can

518
00:26:47,759 --> 00:26:51,839
just be you just move the index over to

519
00:26:49,680 --> 00:26:53,160
the end and then we're good and I and

520
00:26:51,839 --> 00:26:54,389
again we're not gonna leave it that way

521
00:26:53,160 --> 00:26:57,390
that we're just gonna do that

522
00:26:54,390 --> 00:27:00,870
temporarily as sort of like a stepping

523
00:26:57,390 --> 00:27:04,050
stone so here we are with that code and

524
00:27:00,869 --> 00:27:06,959
that's all fine and now we have to go

525
00:27:04,049 --> 00:27:08,819
ahead and push that down a bit more so

526
00:27:06,960 --> 00:27:11,100
the next thing we can do is target

527
00:27:08,819 --> 00:27:12,569
result T right here so we want to be

528
00:27:11,099 --> 00:27:16,009
able to hoist this out of the loop I

529
00:27:12,569 --> 00:27:16,009
want to get let's get over here

530
00:27:16,740 --> 00:27:20,640
we want to be able to hoist this out

531
00:27:18,029 --> 00:27:22,109
because again result tear a is something

532
00:27:20,640 --> 00:27:24,240
weird is keeping for ourselves so

533
00:27:22,109 --> 00:27:25,500
there's no reason to keep doing that by

534
00:27:24,240 --> 00:27:26,880
slice because that doesn't even

535
00:27:25,500 --> 00:27:27,869
communicate with the outside world so

536
00:27:26,880 --> 00:27:29,970
you don't have to worry about the code

537
00:27:27,869 --> 00:27:32,069
in the outside so what we want to do

538
00:27:29,970 --> 00:27:36,120
with result T ray is we want to select

539
00:27:32,069 --> 00:27:37,859
the lanes of T ray based on the mask so

540
00:27:36,119 --> 00:27:42,899
we want to do a thing where we do like a

541
00:27:37,859 --> 00:27:45,659
select function where we take the old

542
00:27:42,900 --> 00:27:48,600
version of result T array and the new

543
00:27:45,660 --> 00:27:52,140
version of of T array and we take them

544
00:27:48,599 --> 00:27:53,459
based on the mask right so we're

545
00:27:52,140 --> 00:27:56,009
basically saying look this is what it

546
00:27:53,460 --> 00:27:59,970
was this is what the new computation is

547
00:27:56,009 --> 00:28:07,259
if people hit take the new T values

548
00:27:59,970 --> 00:28:10,980
right so that makes sense so there's a

549
00:28:07,259 --> 00:28:12,569
couple weirdnesses about this and I'm

550
00:28:10,980 --> 00:28:18,450
not again this is why it's a little

551
00:28:12,569 --> 00:28:20,399
confusing so yeah no I think mask is

552
00:28:18,450 --> 00:28:22,350
right so close enough is the thing that

553
00:28:20,400 --> 00:28:25,710
tells us whether the T ray is less than

554
00:28:22,349 --> 00:28:27,329
the T max that we don't care about

555
00:28:25,710 --> 00:28:29,340
because that's just a thing that

556
00:28:27,329 --> 00:28:32,210
determines whether we go down the

557
00:28:29,339 --> 00:28:32,209
traversal or not

558
00:28:36,759 --> 00:28:41,029
so if anyone was true and close enough

559
00:28:39,650 --> 00:28:43,460
we would never get to this part of the

560
00:28:41,029 --> 00:28:46,420
code so we're strictly looking at masks

561
00:28:43,460 --> 00:28:49,279
here is the only thing we're looking at

562
00:28:46,420 --> 00:28:51,640
so I think we're good right I think

563
00:28:49,279 --> 00:28:51,639
we're good

564
00:28:56,130 --> 00:29:02,640
you know what I just realized too this

565
00:28:58,619 --> 00:29:05,099
isn't quite correct so close enough if

566
00:29:02,640 --> 00:29:10,470
someone someone has to have hit to have

567
00:29:05,099 --> 00:29:13,289
been close enough as well right so in

568
00:29:10,470 --> 00:29:16,789
here we need to - all of this has to be

569
00:29:13,289 --> 00:29:19,980
true as well so close enough technically

570
00:29:16,789 --> 00:29:21,569
let me let me just back this change out

571
00:29:19,980 --> 00:29:21,960
temporarily let me show you what I'm

572
00:29:21,569 --> 00:29:27,539
talking about

573
00:29:21,960 --> 00:29:30,990
I just noticed this is just a bug you

574
00:29:27,539 --> 00:29:32,940
make sure okay here so this is running

575
00:29:30,990 --> 00:29:34,200
it's running okay right like I mean it's

576
00:29:32,940 --> 00:29:35,460
still producing lighting but it could

577
00:29:34,200 --> 00:29:37,740
have some subtle bugs in it right we

578
00:29:35,460 --> 00:29:40,289
wouldn't know we don't have any really

579
00:29:37,740 --> 00:29:41,519
thorough test cases yet to see whether

580
00:29:40,289 --> 00:29:44,430
our lettings working the way we think it

581
00:29:41,519 --> 00:29:46,799
is but if you see here this close enough

582
00:29:44,430 --> 00:29:49,380
value this is just checking this one

583
00:29:46,799 --> 00:29:53,220
conditional really we have to do these

584
00:29:49,380 --> 00:29:55,950
together right the mask has to be true

585
00:29:53,220 --> 00:29:58,170
and this has to be true because anyone

586
00:29:55,950 --> 00:30:00,420
who didn't hit shouldn't participate in

587
00:29:58,170 --> 00:30:02,640
the any true close enough check so this

588
00:30:00,420 --> 00:30:05,180
is really more correct I believe for a

589
00:30:02,640 --> 00:30:05,180
traversal

590
00:30:10,779 --> 00:30:14,720
you know I don't see much difference

591
00:30:12,769 --> 00:30:18,679
there but I believe that was just a bug

592
00:30:14,720 --> 00:30:21,079
right okay so back to our previously

593
00:30:18,679 --> 00:30:23,570
scheduled program so we here what I want

594
00:30:21,079 --> 00:30:25,730
to do is update t ray by doing a select

595
00:30:23,569 --> 00:30:29,418
on it and I want to pizzette pass result

596
00:30:25,730 --> 00:30:31,490
t ray the mask and the new T ray so I

597
00:30:29,419 --> 00:30:32,750
want to do a select on those and then

598
00:30:31,490 --> 00:30:37,490
that's the exact same thing we'll be

599
00:30:32,750 --> 00:30:40,210
doing down here Jimmy that same select

600
00:30:37,490 --> 00:30:42,620
is what we'll be doing down here as well

601
00:30:40,210 --> 00:30:46,009
so in fact we can just write these all

602
00:30:42,619 --> 00:30:51,109
at once if we want to you know we could

603
00:30:46,009 --> 00:30:52,908
just say all right you know we need a

604
00:30:51,109 --> 00:30:54,649
replicated version of the source index

605
00:30:52,909 --> 00:30:57,470
and we need a replicated version of the

606
00:30:54,650 --> 00:31:00,909
box index and whatever and we'll go

607
00:30:57,470 --> 00:31:02,990
ahead and and make that happen right so

608
00:31:00,909 --> 00:31:05,150
we'll do that in a second but first

609
00:31:02,990 --> 00:31:06,349
let's just talk about the Select and

610
00:31:05,150 --> 00:31:08,269
make that happen

611
00:31:06,349 --> 00:31:10,879
so if I compile now the thing that we're

612
00:31:08,269 --> 00:31:14,629
missing is just that call so in here we

613
00:31:10,880 --> 00:31:16,900
have to implement it what that's going

614
00:31:14,630 --> 00:31:21,280
to do is going to take two of these and

615
00:31:16,900 --> 00:31:21,280
the mask value right

616
00:31:31,150 --> 00:31:35,450
and it's just gonna do a simple

617
00:31:33,019 --> 00:31:43,940
operation on them right it's going to

618
00:31:35,450 --> 00:31:47,000
say okay if I start with a I know that I

619
00:31:43,940 --> 00:31:51,970
essentially want to take and knock out

620
00:31:47,000 --> 00:31:55,609
the lanes of a where the mask has ones

621
00:31:51,970 --> 00:31:58,220
right so what I want to do is end it

622
00:31:55,609 --> 00:32:06,319
with like the inverse and it just so

623
00:31:58,220 --> 00:32:09,190
happens that that actually exists as its

624
00:32:06,319 --> 00:32:09,189
own operation

625
00:32:11,680 --> 00:32:18,289
so when ends up happening is you do an

626
00:32:14,450 --> 00:32:21,430
end with the knot of a and then you end

627
00:32:18,289 --> 00:32:24,889
it with B so whatever comes in the first

628
00:32:21,430 --> 00:32:27,830
parameter here gets knotted and then it

629
00:32:24,890 --> 00:32:29,930
ends with this so I'll be honest with

630
00:32:27,829 --> 00:32:34,159
you I have no idea why you would call

631
00:32:29,930 --> 00:32:35,900
this and not instead of not and maybe so

632
00:32:34,160 --> 00:32:38,930
that you don't confuse it with knotting

633
00:32:35,900 --> 00:32:44,930
after you do the entire end it's more

634
00:32:38,930 --> 00:32:46,880
like and not a first I don't know I

635
00:32:44,930 --> 00:32:48,500
don't the name is confusing but you know

636
00:32:46,880 --> 00:32:50,480
you can see which one it does by looking

637
00:32:48,500 --> 00:32:52,099
at the description here it knots the

638
00:32:50,480 --> 00:32:54,799
first parameter and leaves a second one

639
00:32:52,099 --> 00:33:02,750
the same so what we want to do is in mm

640
00:32:54,799 --> 00:33:05,149
and not PS here and that and not takes

641
00:33:02,750 --> 00:33:08,660
the mask as the first parameter because

642
00:33:05,150 --> 00:33:11,180
that mask value is the one that needs to

643
00:33:08,660 --> 00:33:13,630
be knotted and then it will take the a

644
00:33:11,180 --> 00:33:16,580
value as a thing to end it with

645
00:33:13,630 --> 00:33:20,390
similarly we need to do an and between

646
00:33:16,579 --> 00:33:25,129
the mask without knotting it and B right

647
00:33:20,390 --> 00:33:29,120
because that's going to knock out the

648
00:33:25,130 --> 00:33:31,010
lanes of B that don't have one set in

649
00:33:29,119 --> 00:33:33,889
the mask and then finally we will

650
00:33:31,009 --> 00:33:38,559
combine them together with our or

651
00:33:33,890 --> 00:33:38,560
operation and off we go

652
00:33:39,108 --> 00:33:48,178
so there's our select and it just does

653
00:33:44,219 --> 00:33:50,489
exactly what you would think right so I

654
00:33:48,179 --> 00:34:05,389
think that's all we need to do there it

655
00:33:50,489 --> 00:34:05,389
go and head and compile that here we go

656
00:34:10,898 --> 00:34:18,409
maura meets at that p-value there okay

657
00:34:14,829 --> 00:34:19,760
so that's the Select function and in

658
00:34:18,409 --> 00:34:21,970
theory now if we implemented that

659
00:34:19,760 --> 00:34:24,440
correctly we are now no longer doing

660
00:34:21,969 --> 00:34:30,338
piecewise ifs on that we're just doing

661
00:34:24,440 --> 00:34:30,338
the lanes as they go which is good right

662
00:34:44,340 --> 00:34:51,480
and now what we want to do is we want to

663
00:34:49,079 --> 00:34:53,219
do that for the rest of these so the

664
00:34:51,480 --> 00:34:56,610
first thing we have to do is make it so

665
00:34:53,219 --> 00:34:58,349
that these can be accessible as you

666
00:34:56,610 --> 00:35:01,500
thirty twos essentially like we have to

667
00:34:58,349 --> 00:35:03,000
have a way of loading you thirty twos so

668
00:35:01,500 --> 00:35:05,190
what we want to do in here is say all

669
00:35:03,000 --> 00:35:08,130
right those result values that we're

670
00:35:05,190 --> 00:35:10,289
setting here at the outset we need to

671
00:35:08,130 --> 00:35:12,990
have a way of romping in like actual

672
00:35:10,289 --> 00:35:14,940
yeah like values that aren't floats

673
00:35:12,989 --> 00:35:17,099
because we need to be able to return

674
00:35:14,940 --> 00:35:19,019
those and we can't return those as

675
00:35:17,099 --> 00:35:21,029
floats really we want these box indices

676
00:35:19,019 --> 00:35:23,579
and stuff like that to be regular

677
00:35:21,030 --> 00:35:28,250
integers so what we want to do here is

678
00:35:23,579 --> 00:35:36,329
just say alright we've got our F 32 4 X

679
00:35:28,250 --> 00:35:39,750
4 box index and our F 3 - 4 X 4 our box

680
00:35:36,329 --> 00:35:41,789
surface index and then the rate p value

681
00:35:39,750 --> 00:35:43,469
part I'm going to leave and we're gonna

682
00:35:41,789 --> 00:35:45,119
do that second second because that's an

683
00:35:43,469 --> 00:35:45,569
actual v3 so we already have a type for

684
00:35:45,119 --> 00:35:47,969
that one

685
00:35:45,570 --> 00:35:49,289
so do that one separately but these two

686
00:35:47,969 --> 00:35:54,000
are both going to be done the same way

687
00:35:49,289 --> 00:35:55,079
effectively that hit is done right so

688
00:35:54,000 --> 00:35:56,940
thinks these are going to be laying

689
00:35:55,079 --> 00:35:59,610
combined really we do need to clear this

690
00:35:56,940 --> 00:36:01,380
now because we need to or things into it

691
00:35:59,610 --> 00:36:04,650
so we can't really have any one's

692
00:36:01,380 --> 00:36:07,110
sitting around in there so as we come

693
00:36:04,650 --> 00:36:11,910
through when we or things into that oh

694
00:36:07,110 --> 00:36:13,260
no no I'm wrong we do not need to clear

695
00:36:11,909 --> 00:36:16,409
it we only need to clear that first line

696
00:36:13,260 --> 00:36:21,330
because we're always checking the hit

697
00:36:16,409 --> 00:36:22,529
value first so that's okay on the

698
00:36:21,329 --> 00:36:24,480
outside of the loop it will never

699
00:36:22,530 --> 00:36:26,810
process the lame that doesn't have the

700
00:36:24,480 --> 00:36:29,880
hit value to set so that's all right

701
00:36:26,809 --> 00:36:31,440
alright so our box indices now what we

702
00:36:29,880 --> 00:36:35,789
need to do is when we come through here

703
00:36:31,440 --> 00:36:38,940
we're going to use these these box

704
00:36:35,789 --> 00:36:41,699
surface index values here in the source

705
00:36:38,940 --> 00:36:44,130
index right so what we need to do is we

706
00:36:41,699 --> 00:36:46,739
want to have a way of updating these two

707
00:36:44,130 --> 00:36:53,610
the same way we updated the other one so

708
00:36:46,739 --> 00:36:54,699
we want our our result box index we want

709
00:36:53,610 --> 00:37:02,200
that

710
00:36:54,699 --> 00:37:05,980
and this we want these to both be

711
00:37:02,199 --> 00:37:09,429
selects that just select the right one

712
00:37:05,980 --> 00:37:13,110
now box surface index I don't remember

713
00:37:09,429 --> 00:37:13,109
exactly how that got set

714
00:37:30,789 --> 00:37:37,659
yeah I'm gonna have to look at this a

715
00:37:32,980 --> 00:37:39,730
little more carefully because we want to

716
00:37:37,659 --> 00:37:45,549
know which one we hit here and it should

717
00:37:39,730 --> 00:37:47,920
be the same for everybody so it should

718
00:37:45,550 --> 00:37:51,340
only depend on the axis index it should

719
00:37:47,920 --> 00:37:57,700
never actually depend on the CE index

720
00:37:51,340 --> 00:38:00,150
I don't think and it doesn't look like

721
00:37:57,699 --> 00:38:00,149
it does

722
00:38:05,369 --> 00:38:09,380
oh yes it does because rady

723
00:38:15,719 --> 00:38:24,809
I see ok I'm ok with that

724
00:38:21,619 --> 00:38:29,579
all right so anyway this will get

725
00:38:24,809 --> 00:38:31,320
selected out of this properly here so we

726
00:38:29,579 --> 00:38:41,639
just need to write the equivalent of

727
00:38:31,320 --> 00:38:42,470
these these select statements will work

728
00:38:41,639 --> 00:38:45,480
just fine

729
00:38:42,469 --> 00:38:48,868
because the you know these are the same

730
00:38:45,480 --> 00:38:52,650
type at that point so we should be able

731
00:38:48,869 --> 00:38:56,070
to just run these directly the question

732
00:38:52,650 --> 00:38:57,750
is whether these values themselves are

733
00:38:56,070 --> 00:39:03,900
actually initialized properly up here

734
00:38:57,750 --> 00:39:05,400
and I think that they are so the only

735
00:39:03,900 --> 00:39:07,970
question is how do we get it in there

736
00:39:05,400 --> 00:39:11,010
right we just need this to actually be

737
00:39:07,969 --> 00:39:12,509
initialized this way but I think we can

738
00:39:11,010 --> 00:39:14,430
just initialize it that way

739
00:39:12,510 --> 00:39:16,830
without really doing any other work at

740
00:39:14,429 --> 00:39:18,868
the moment so what I can do here is I

741
00:39:16,829 --> 00:39:25,500
could just say alright the Box surface

742
00:39:18,869 --> 00:39:27,150
index u-32 value will just initialize it

743
00:39:25,500 --> 00:39:30,059
this way and then it just kind of works

744
00:39:27,150 --> 00:39:33,210
right I think that all just works based

745
00:39:30,059 --> 00:39:37,049
off the see index now and we're pretty

746
00:39:33,210 --> 00:39:39,420
much done we could also do this a little

747
00:39:37,050 --> 00:39:41,849
bit more cleanly by saying you know in

748
00:39:39,420 --> 00:39:44,190
here if you want to access this as

749
00:39:41,849 --> 00:39:49,710
something else you can so for example

750
00:39:44,190 --> 00:39:52,429
there's a u32 version oops that you can

751
00:39:49,710 --> 00:39:55,530
access so for example we can just say

752
00:39:52,429 --> 00:39:57,509
like that get it out and that's probably

753
00:39:55,530 --> 00:39:59,070
a nicer way to read that and it's clear

754
00:39:57,510 --> 00:40:03,599
what's going on when you're pulling or

755
00:39:59,070 --> 00:40:05,820
pushing in those values in that way so

756
00:40:03,599 --> 00:40:11,450
that's probably what we would rather do

757
00:40:05,820 --> 00:40:11,450
there I'm guessing so all right

758
00:40:21,000 --> 00:40:24,099
[Music]

759
00:40:28,380 --> 00:40:35,079
right so source index has never actually

760
00:40:31,838 --> 00:40:37,088
been loaded source index here is like a

761
00:40:35,079 --> 00:40:40,778
non replicated value so you can see here

762
00:40:37,088 --> 00:40:43,389
we've got two source index and we need

763
00:40:40,778 --> 00:40:46,259
that to be something we can load in here

764
00:40:43,389 --> 00:40:49,389
so we need to replicate this value

765
00:40:46,259 --> 00:40:54,400
across so what we need to do is we need

766
00:40:49,389 --> 00:40:56,348
to pass this in you know we need to do

767
00:40:54,400 --> 00:40:59,739
something like that where we can create

768
00:40:56,349 --> 00:41:01,838
one of these out of an integer value and

769
00:40:59,739 --> 00:41:04,208
it's gonna have to do that load that we

770
00:41:01,838 --> 00:41:07,659
were doing before so when we create that

771
00:41:04,208 --> 00:41:11,469
mask right you can see this set one PS

772
00:41:07,659 --> 00:41:14,708
happening here this is really exactly

773
00:41:11,469 --> 00:41:20,920
what we want to do so we want this to

774
00:41:14,708 --> 00:41:22,178
happen if you know we don't actually

775
00:41:20,920 --> 00:41:25,509
have to do it like that I guess but

776
00:41:22,179 --> 00:41:29,889
that's that's what we want to do in our

777
00:41:25,509 --> 00:41:34,059
load so where we're doing our f/32 for x

778
00:41:29,889 --> 00:41:36,778
call here we just want to make an

779
00:41:34,059 --> 00:41:36,778
equivalent call

780
00:41:45,179 --> 00:41:54,568
and instead of having if the amass value

781
00:41:47,670 --> 00:41:58,740
it's just whatever it actually is so

782
00:41:54,568 --> 00:42:06,960
then we have the result the result P

783
00:41:58,739 --> 00:42:10,229
equals the casted value and then we

784
00:42:06,960 --> 00:42:14,608
return it that allows us to load up that

785
00:42:10,230 --> 00:42:16,740
in and do our mask operation on it so

786
00:42:14,608 --> 00:42:19,558
again that's just replicating that value

787
00:42:16,739 --> 00:42:21,028
out so that we can use it so now we need

788
00:42:19,559 --> 00:42:22,769
to be able to pull those out fortunately

789
00:42:21,028 --> 00:42:27,659
we just added a nice way to do that so

790
00:42:22,768 --> 00:42:31,858
we can just do it like this and then I

791
00:42:27,659 --> 00:42:33,298
think we're done and now that loop of

792
00:42:31,858 --> 00:42:35,699
course we're not going any faster even

793
00:42:33,298 --> 00:42:41,429
if this loop was cause problems because

794
00:42:35,699 --> 00:42:43,848
the loop is still there right that

795
00:42:41,429 --> 00:42:43,848
doesn't look good

796
00:42:56,750 --> 00:42:59,679
so

797
00:43:06,380 --> 00:43:11,450
I thought we had done everything exactly

798
00:43:09,409 --> 00:43:14,529
the way we were doing it before but that

799
00:43:11,449 --> 00:43:14,529
may not be true

800
00:43:40,550 --> 00:43:47,590
like I don't see anything particularly

801
00:43:43,750 --> 00:43:47,590
different happening here

802
00:44:01,260 --> 00:44:10,500
what's to go wrong so the select call

803
00:44:08,030 --> 00:44:15,750
appeared to be working properly for

804
00:44:10,500 --> 00:44:19,409
everybody else we select the box index F

805
00:44:15,750 --> 00:44:23,300
of that where is our you know our our

806
00:44:19,409 --> 00:44:34,379
hit is checking here we won't call this

807
00:44:23,300 --> 00:44:37,859
unless this comes back as true so I

808
00:44:34,380 --> 00:44:40,980
would have thought we would have been

809
00:44:37,858 --> 00:44:43,489
okay there let me take a look at what

810
00:44:40,980 --> 00:44:43,490
happens

811
00:44:53,820 --> 00:45:04,740
so our box index is definitely

812
00:44:56,639 --> 00:45:06,359
completely nuts right I wants to take a

813
00:45:04,739 --> 00:45:11,309
look at what our values are so here's

814
00:45:06,360 --> 00:45:14,309
our array so here's our hit values hit

815
00:45:11,309 --> 00:45:19,980
not hit not hit hit here's our box

816
00:45:14,309 --> 00:45:21,509
indices completely ludicrous yeah so it

817
00:45:19,980 --> 00:45:33,599
looks like the Select is going backwards

818
00:45:21,510 --> 00:45:36,330
there am I wrong about that we want to

819
00:45:33,599 --> 00:45:36,809
select from this to that based on the

820
00:45:36,329 --> 00:45:38,849
mask

821
00:45:36,809 --> 00:45:40,469
did I not write it that way did I

822
00:45:38,849 --> 00:45:42,389
somehow read backwards or something like

823
00:45:40,469 --> 00:45:51,119
this which would be pretty terrible if I

824
00:45:42,389 --> 00:45:53,369
did so we are masking the knot of the

825
00:45:51,119 --> 00:46:01,289
mask with a and we roaring with it now

826
00:45:53,369 --> 00:46:05,159
so that looks right let me step through

827
00:46:01,289 --> 00:46:08,519
that code I'm not sure I see I don't

828
00:46:05,159 --> 00:46:13,949
immediately see the reason so I feel

829
00:46:08,519 --> 00:46:17,000
like it's just safer to look let me turn

830
00:46:13,949 --> 00:46:17,000
off multi-threading again

831
00:46:25,760 --> 00:46:39,240
so that so let's take a look here's our

832
00:46:35,760 --> 00:46:42,660
mask this is the thing that told us what

833
00:46:39,239 --> 00:46:45,389
hit so one hit zero two and three did

834
00:46:42,659 --> 00:46:47,159
not and let's just take a quick look to

835
00:46:45,389 --> 00:46:53,009
see whether we think that's actually

836
00:46:47,159 --> 00:46:58,319
right so here's our tear a value that we

837
00:46:53,010 --> 00:47:01,200
computed oops the wrong thing there so

838
00:46:58,320 --> 00:47:04,650
in here we've got you know 19 5 4 so

839
00:47:01,199 --> 00:47:07,349
negative 14 obviously didn't hit you

840
00:47:04,650 --> 00:47:09,090
know whether 19 or 7 hit I don't know

841
00:47:07,349 --> 00:47:17,599
but I guess we could look at our bounds

842
00:47:09,090 --> 00:47:17,600
check here's our X's and Y's

843
00:47:24,610 --> 00:47:31,050
and you know yeah I could believe that

844
00:47:26,650 --> 00:47:31,050
these two are pretty close right

845
00:47:54,059 --> 00:47:59,769
yep so this is the only one that passed

846
00:47:57,400 --> 00:48:01,440
the bounced check so that does look

847
00:47:59,769 --> 00:48:04,480
about right

848
00:48:01,440 --> 00:48:08,260
you know it's not ridiculous that mask

849
00:48:04,480 --> 00:48:14,619
seems plausible to me so let's see what

850
00:48:08,260 --> 00:48:17,890
happens here is our result kirei the box

851
00:48:14,619 --> 00:48:22,289
child count here is two and I guess

852
00:48:17,889 --> 00:48:22,289
close enough did not trigger

853
00:48:31,469 --> 00:48:42,819
so why didn't close enough trigger what

854
00:48:34,869 --> 00:48:53,429
is the result T right here oops I'm

855
00:48:42,820 --> 00:49:02,140
sorry what is the T ray so that seems

856
00:48:53,429 --> 00:49:04,210
wrong doesn't it because oh no it's

857
00:49:02,139 --> 00:49:05,949
right because it's five and this is six

858
00:49:04,210 --> 00:49:09,579
so now we shouldn't Traverse that's

859
00:49:05,949 --> 00:49:11,500
correct so this did it right that makes

860
00:49:09,579 --> 00:49:14,199
sense so we're gonna go ahead and do our

861
00:49:11,500 --> 00:49:17,800
select here and we should select five

862
00:49:14,199 --> 00:49:24,029
nine two into the result tra yeah and we

863
00:49:17,800 --> 00:49:24,030
did so then we should mask in the hit

864
00:49:28,568 --> 00:49:36,400
right here and we did then we should

865
00:49:32,918 --> 00:49:38,409
select in a box index this is just

866
00:49:36,400 --> 00:49:40,838
garbage right because we don't need to

867
00:49:38,409 --> 00:49:46,649
initialize it except in this slot so

868
00:49:40,838 --> 00:49:46,650
this slot should now get a valid 534 oh

869
00:49:47,548 --> 00:49:57,179
oh boy oh boy let's get that on there

870
00:50:02,938 --> 00:50:10,328
okay so I don't know why it would

871
00:50:07,208 --> 00:50:12,159
surprise me that I can't get correct

872
00:50:10,329 --> 00:50:17,619
values out of something when I don't ask

873
00:50:12,159 --> 00:50:22,379
it to actually write the value back you

874
00:50:17,619 --> 00:50:25,390
know I'm saying yeah

875
00:50:22,380 --> 00:50:35,380
suffice to say I expect better results

876
00:50:25,389 --> 00:50:38,348
this time yeah all right I wonder if we

877
00:50:35,380 --> 00:50:46,719
should just have a thing by the way

878
00:50:38,349 --> 00:50:49,079
I don't know you know what I'm not gonna

879
00:50:46,719 --> 00:50:49,079
do it now

880
00:50:55,000 --> 00:50:59,800
all right so back to the normal speed

881
00:51:00,760 --> 00:51:12,460
here is the same thing running but now

882
00:51:03,440 --> 00:51:12,460
with selection there so the selection

883
00:51:16,329 --> 00:51:28,279
has only one piece that's not working

884
00:51:19,010 --> 00:51:29,900
now and that's this right here so what

885
00:51:28,280 --> 00:51:32,720
we'd like to do is we'd like to get rid

886
00:51:29,900 --> 00:51:34,099
of that as well now now to do that we

887
00:51:32,719 --> 00:51:35,539
really don't have to do anything other

888
00:51:34,099 --> 00:51:37,190
than what we did here the problem is we

889
00:51:35,539 --> 00:51:39,440
don't actually have what we did here

890
00:51:37,190 --> 00:51:43,250
right we want to be able to call the

891
00:51:39,440 --> 00:51:45,500
same thing we want to be able to call a

892
00:51:43,250 --> 00:51:48,199
select function that'll just select the

893
00:51:45,500 --> 00:51:51,110
appropriate parts of the mask that

894
00:51:48,199 --> 00:51:54,949
picked the Ray p4x instead of the array

895
00:51:51,110 --> 00:52:01,090
P here I and you know not do any of that

896
00:51:54,949 --> 00:52:01,089
stuff so we'd like to be able to do that

897
00:52:01,389 --> 00:52:08,690
and we would like to be able to do it

898
00:52:04,570 --> 00:52:10,490
the sax aimed way fortunately we should

899
00:52:08,690 --> 00:52:13,070
be able to do it by literally just

900
00:52:10,489 --> 00:52:17,329
replicating the Select function but

901
00:52:13,070 --> 00:52:20,420
using the Forex version instead right so

902
00:52:17,329 --> 00:52:26,000
if we come down here and we say okay we

903
00:52:20,420 --> 00:52:28,340
want to have a v3 it's gonna get masked

904
00:52:26,000 --> 00:52:30,289
by a scalar mask though so we don't

905
00:52:28,340 --> 00:52:33,170
notice this one does not become a v3

906
00:52:30,289 --> 00:52:35,300
because we want to mask every dimension

907
00:52:33,170 --> 00:52:37,430
of a and every dimension in beat by the

908
00:52:35,300 --> 00:52:40,430
same mask so we don't have a different

909
00:52:37,429 --> 00:52:43,369
mass for x y&amp;z with the same mask for XY

910
00:52:40,429 --> 00:52:50,949
and z so the result function I mean the

911
00:52:43,369 --> 00:52:50,949
result value here is just to distribute

912
00:52:52,188 --> 00:52:57,078
that mask operation over all of them

913
00:53:01,518 --> 00:53:15,659
like so so that should do the same

914
00:53:09,239 --> 00:53:18,389
select right in either case now I just

915
00:53:15,659 --> 00:53:25,248
need to come down here and make this

916
00:53:18,389 --> 00:53:25,248
actually be a 4x okay

917
00:53:37,780 --> 00:53:45,040
so now I believe we have the fully

918
00:53:41,590 --> 00:53:49,720
functioning version which doesn't do any

919
00:53:45,039 --> 00:53:52,539
weird looping through the scalars on the

920
00:53:49,719 --> 00:53:53,889
out on the inside of the raycast but it

921
00:53:52,539 --> 00:53:55,630
definitely does do weird looping

922
00:53:53,889 --> 00:53:57,759
upstairs on the outside of the raycast

923
00:53:55,630 --> 00:54:02,289
so that's definitely something we could

924
00:53:57,760 --> 00:54:03,820
start to address as well now of course

925
00:54:02,289 --> 00:54:05,529
we don't really know where the time is

926
00:54:03,820 --> 00:54:09,730
getting spent necessarily because we

927
00:54:05,530 --> 00:54:12,910
can't sub profile it here so we may need

928
00:54:09,730 --> 00:54:16,869
to gather some information to find out

929
00:54:12,909 --> 00:54:22,629
what we can do at this point in terms of

930
00:54:16,869 --> 00:54:24,400
of optimizing that right meaning we

931
00:54:22,630 --> 00:54:28,809
don't really know how much this is

932
00:54:24,400 --> 00:54:32,289
costing us versus this and one of the

933
00:54:28,809 --> 00:54:35,259
problems is we call this enough times

934
00:54:32,289 --> 00:54:38,789
that it becomes kind of costly to

935
00:54:35,260 --> 00:54:38,790
profile it at all right

936
00:54:45,079 --> 00:54:51,440
but if we look here so you know it's not

937
00:54:48,380 --> 00:54:55,550
nothing but most of our time is

938
00:54:51,440 --> 00:54:57,170
definitely spent in there now another

939
00:54:55,550 --> 00:55:00,230
thing that I'm not sure about is how

940
00:54:57,170 --> 00:55:01,460
much the startup cost is so you know the

941
00:55:00,230 --> 00:55:05,240
other thing I could do is just let's

942
00:55:01,460 --> 00:55:13,369
just take a look I'm assuming the

943
00:55:05,239 --> 00:55:23,809
startup cost is negligible I really just

944
00:55:13,369 --> 00:55:27,079
want time this block I mean this can't

945
00:55:23,809 --> 00:55:36,349
really be very much time I don't know

946
00:55:27,079 --> 00:55:38,929
why I'm bothering so let's suppose we

947
00:55:36,349 --> 00:55:41,329
times block which I have named real food

948
00:55:38,929 --> 00:55:46,069
flavor just to let you know that it's

949
00:55:41,329 --> 00:55:47,569
made with all natural ingredients and so

950
00:55:46,070 --> 00:55:55,160
yeah that startup cost is not

951
00:55:47,570 --> 00:55:56,750
particularly high right so this part

952
00:55:55,159 --> 00:55:58,879
could be optimized quite a bit but I

953
00:55:56,750 --> 00:56:01,909
don't know that we really care if that

954
00:55:58,880 --> 00:56:05,180
makes sense so now we're down to just

955
00:56:01,909 --> 00:56:11,719
looking at what is a completely sim deed

956
00:56:05,179 --> 00:56:17,539
routine here I believe and yeah

957
00:56:11,719 --> 00:56:22,459
I don't think there's anything

958
00:56:17,539 --> 00:56:24,139
particularly odd going on there so what

959
00:56:22,460 --> 00:56:26,179
I would point out however is that we're

960
00:56:24,139 --> 00:56:29,389
still not nearly as fast as we probably

961
00:56:26,179 --> 00:56:31,549
should be even with just that one

962
00:56:29,389 --> 00:56:34,609
routine and the reason for that is we're

963
00:56:31,550 --> 00:56:37,760
not sampling the hemisphere in a smart

964
00:56:34,610 --> 00:56:40,460
way so what we actually want to do here

965
00:56:37,760 --> 00:56:42,440
is do this slightly differently what we

966
00:56:40,460 --> 00:56:45,199
want to do is have our sample hemisphere

967
00:56:42,440 --> 00:56:46,880
function also be Cindy and we want it to

968
00:56:45,199 --> 00:56:51,980
produce four rays that go in the same

969
00:56:46,880 --> 00:56:55,039
direction so this function rather than

970
00:56:51,980 --> 00:56:56,309
doing this needs to produce four rays

971
00:56:55,039 --> 00:56:58,889
that all go rough

972
00:56:56,309 --> 00:57:01,170
the same direction so they'd start with

973
00:56:58,889 --> 00:57:03,299
a random bilateral set that goes one

974
00:57:01,170 --> 00:57:08,099
direction or something and then they'll

975
00:57:03,300 --> 00:57:09,960
perturb that or write a number of times

976
00:57:08,099 --> 00:57:12,929
with small perturbations so we knew

977
00:57:09,960 --> 00:57:16,470
they'd all cast relatively coherently in

978
00:57:12,929 --> 00:57:19,109
the same direction so if we take a look

979
00:57:16,469 --> 00:57:21,089
at how that would happen what we would

980
00:57:19,110 --> 00:57:23,460
want to do here is say okay sample

981
00:57:21,090 --> 00:57:25,320
hemisphere we can already see if we take

982
00:57:23,460 --> 00:57:27,449
a look at sample hemisphere you can see

983
00:57:25,320 --> 00:57:32,180
how it produces a sample D that's that's

984
00:57:27,449 --> 00:57:37,109
for wide here and then it gets loaded

985
00:57:32,179 --> 00:57:40,949
like this so what we can do is we can

986
00:57:37,110 --> 00:57:43,079
say also why is I don't know why this is

987
00:57:40,949 --> 00:57:47,009
getting produced every time it's the

988
00:57:43,079 --> 00:57:50,639
same right it's up that's that's not a

989
00:57:47,010 --> 00:57:55,500
that isn't very so we want to do is make

990
00:57:50,639 --> 00:57:57,929
this be actually produced directly so we

991
00:57:55,500 --> 00:58:00,119
want sample hemisphere to be something

992
00:57:57,929 --> 00:58:03,269
that just directly produces a v3 for X

993
00:58:00,119 --> 00:58:06,569
and let me just get rid of this and that

994
00:58:03,269 --> 00:58:09,929
will generate like essentially a ray

995
00:58:06,570 --> 00:58:15,809
bundle that we know goes in a reasonable

996
00:58:09,929 --> 00:58:21,629
direction away so if I pull that down

997
00:58:15,809 --> 00:58:24,239
here so you can look at it what we want

998
00:58:21,630 --> 00:58:27,990
to do is take this and change it into

999
00:58:24,239 --> 00:58:30,239
something that that behaves that way so

1000
00:58:27,989 --> 00:58:32,129
in order to produce this v3 for X I

1001
00:58:30,239 --> 00:58:35,279
guess I'll start off with doing

1002
00:58:32,130 --> 00:58:38,240
something pretty basic I'll keep the

1003
00:58:35,280 --> 00:58:38,240
load as it was

1004
00:58:47,820 --> 00:59:02,980
something like this and then I'll just

1005
00:58:51,550 --> 00:59:05,860
say these and then we'll flatten it down

1006
00:59:02,980 --> 00:59:08,679
in a second here so what I want to do is

1007
00:59:05,860 --> 00:59:09,700
this process is probably fine for each

1008
00:59:08,679 --> 00:59:21,279
one it's like you know what let me just

1009
00:59:09,699 --> 00:59:24,089
do this as a loot for now and I suppose

1010
00:59:21,280 --> 00:59:24,090
actually I can just

1011
00:59:31,070 --> 00:59:55,289
so what I want to do is I want to go

1012
00:59:33,269 --> 01:00:01,759
through and produce each of these I'm

1013
00:59:55,289 --> 01:00:05,460
going to do this by having a basis that

1014
01:00:01,760 --> 01:00:09,690
is a random bilateral that I pick up

1015
01:00:05,460 --> 01:00:12,510
here I'm going to normalize that and I'm

1016
01:00:09,690 --> 01:00:14,130
in normalize it again I don't that's not

1017
01:00:12,510 --> 01:00:16,710
really what I want to do I would rather

1018
01:00:14,130 --> 01:00:18,840
not have to normalize the first one I'd

1019
01:00:16,710 --> 01:00:20,130
rather normalize it at the end but I'm

1020
01:00:18,840 --> 01:00:22,170
not sure if I can really guarantee

1021
01:00:20,130 --> 01:00:24,059
because I don't know the length of this

1022
01:00:22,170 --> 01:00:27,420
I can't guarantee that I'll be close by

1023
01:00:24,059 --> 01:00:30,090
on the next one so it's a little bit

1024
01:00:27,420 --> 01:00:32,760
difficult there so what I want to do

1025
01:00:30,090 --> 01:00:36,210
here is I want to take the basis and add

1026
01:00:32,760 --> 01:00:38,510
it to this other vector and I want to

1027
01:00:36,210 --> 01:00:41,869
make this perturbation relatively small

1028
01:00:38,510 --> 01:00:44,870
right so point one or point two

1029
01:00:41,869 --> 01:00:44,869
perturbation

1030
01:00:51,389 --> 01:01:26,670
and then I will record that so now in

1031
01:01:24,510 --> 01:01:31,260
theory we should be casting rays that

1032
01:01:26,670 --> 01:01:33,119
are semi coherent and you know they they

1033
01:01:31,260 --> 01:01:35,579
can traverse similar parts of the

1034
01:01:33,119 --> 01:01:38,369
hierarchy in theory anyway now we

1035
01:01:35,579 --> 01:01:40,250
probably want to draw this at some point

1036
01:01:38,369 --> 01:01:42,528
to here in T that we actually are

1037
01:01:40,250 --> 01:01:45,119
because we don't actually know if we are

1038
01:01:42,528 --> 01:01:47,010
but we can see you know we can see that

1039
01:01:45,119 --> 01:01:49,440
this is well I don't want to stand close

1040
01:01:47,010 --> 01:01:53,099
to the stairs okay so we can see this is

1041
01:01:49,440 --> 01:01:54,599
what like 22 is on the clock and we

1042
01:01:53,099 --> 01:02:01,048
should be able to see a difference I

1043
01:01:54,599 --> 01:02:03,690
would think if we swap to just doing

1044
01:02:01,048 --> 01:02:07,079
completely random bilateral here right

1045
01:02:03,690 --> 01:02:11,809
so if we were to say instead that we

1046
01:02:07,079 --> 01:02:11,809
just use a complete randomness a ssin

1047
01:02:19,639 --> 01:02:27,889
we should be able to see some difference

1048
01:02:22,769 --> 01:02:29,940
here at least in theory in performance

1049
01:02:27,889 --> 01:02:32,338
but I don't actually know that we will

1050
01:02:29,940 --> 01:02:35,750
yeah you can see that so you can see

1051
01:02:32,338 --> 01:02:42,179
here that we're getting like about 30

1052
01:02:35,750 --> 01:02:45,088
right something like that 28 29 or so if

1053
01:02:42,179 --> 01:02:47,219
I change it to be more coherent that

1054
01:02:45,088 --> 01:02:51,750
number drops down quite a bit actually

1055
01:02:47,219 --> 01:02:56,730
it takes about 6 milliseconds less 5 to

1056
01:02:51,750 --> 01:02:58,980
6 milliseconds less to do and again the

1057
01:02:56,730 --> 01:03:01,199
reason for that is just the number of

1058
01:02:58,980 --> 01:03:07,048
box checks that have to happen at that

1059
01:03:01,199 --> 01:03:09,058
point is pretty substantial because when

1060
01:03:07,048 --> 01:03:10,980
we cast rays in opposite directions

1061
01:03:09,059 --> 01:03:13,319
they'll check everything in the whole

1062
01:03:10,980 --> 01:03:15,329
hierarchy right because this one if two

1063
01:03:13,318 --> 01:03:17,489
rays go in opposite directions of each

1064
01:03:15,329 --> 01:03:18,690
other then we'll have to check all the

1065
01:03:17,489 --> 01:03:20,189
hierarchy on that side and all the

1066
01:03:18,690 --> 01:03:21,900
Harkey on this side rather than only

1067
01:03:20,190 --> 01:03:23,990
checking some of the hierarchy on one of

1068
01:03:21,900 --> 01:03:26,220
the sides if they all went that way

1069
01:03:23,989 --> 01:03:29,039
that's what so when you bundle rays

1070
01:03:26,219 --> 01:03:30,298
together you only really get performance

1071
01:03:29,039 --> 01:03:31,980
out of your spatial hierarchy if those

1072
01:03:30,298 --> 01:03:33,539
rays are somewhat semi coherent if

1073
01:03:31,980 --> 01:03:38,369
they're not coherent then you kind of

1074
01:03:33,539 --> 01:03:42,019
lose all the benefit that you would that

1075
01:03:38,369 --> 01:03:45,838
you were trying to get out of it right

1076
01:03:42,019 --> 01:03:47,280
so now we're yeah we're obviously in in

1077
01:03:45,838 --> 01:03:50,789
better shape with our lighting it's

1078
01:03:47,280 --> 01:03:52,440
running much more nicely than it was but

1079
01:03:50,789 --> 01:03:54,058
it's still not probably fast enough

1080
01:03:52,440 --> 01:03:59,338
right so we're not we're not quite there

1081
01:03:54,059 --> 01:04:01,410
yet in in terms of cycle count right

1082
01:03:59,338 --> 01:04:03,469
we're not typed quite there yet - what I

1083
01:04:01,409 --> 01:04:09,088
think we could probably say was

1084
01:04:03,469 --> 01:04:10,739
reasonable to do at the moment now if we

1085
01:04:09,088 --> 01:04:13,318
think if we improved our sampling like

1086
01:04:10,739 --> 01:04:17,818
maybe we are I don't know because the

1087
01:04:13,318 --> 01:04:20,250
loop the number of rays here is you know

1088
01:04:17,818 --> 01:04:23,159
if you could somehow drop it down by a

1089
01:04:20,250 --> 01:04:25,949
dramatic amount you know we would get

1090
01:04:23,159 --> 01:04:28,769
dramatically faster right so depending

1091
01:04:25,949 --> 01:04:31,789
on how our say or maybe not whoo that's

1092
01:04:28,769 --> 01:04:31,789
very interesting data

1093
01:04:38,199 --> 01:04:43,960
so that floor is not as high as I would

1094
01:04:41,239 --> 01:04:43,959
have thought it to be

1095
01:05:01,719 --> 01:05:05,439
that's pretty interesting

1096
01:05:27,699 --> 01:05:33,529
so yeah I mean maybe that is sort of an

1097
01:05:31,760 --> 01:05:35,750
argument for cleaning up the code around

1098
01:05:33,530 --> 01:05:37,190
this as well I'm not sure we could

1099
01:05:35,750 --> 01:05:40,670
certainly do that I mean there's not a

1100
01:05:37,190 --> 01:05:42,289
lot of reason not to at this point let's

1101
01:05:40,670 --> 01:05:44,230
go through this though one more time and

1102
01:05:42,289 --> 01:05:46,219
just finish up what we were doing here

1103
01:05:44,230 --> 01:05:48,050
so the first thing I want to do is I'm

1104
01:05:46,219 --> 01:05:49,759
gonna get rid of the four X's on things

1105
01:05:48,050 --> 01:05:52,610
because now everything is done for wide

1106
01:05:49,760 --> 01:05:56,900
so we don't have to call something for X

1107
01:05:52,610 --> 01:05:59,000
right so if anything in here still has a

1108
01:05:56,900 --> 01:06:00,920
4x on it I'm just gonna get rid of it

1109
01:05:59,000 --> 01:06:14,449
looks like we mostly didn't but this one

1110
01:06:00,920 --> 01:06:16,840
for example does just get rid of these

1111
01:06:14,449 --> 01:06:16,839
here

1112
01:06:42,159 --> 01:06:44,190
Oh

1113
01:06:54,449 --> 01:06:58,618
so that all looks fine

1114
01:07:16,989 --> 01:07:20,949
and I may just go ahead and reinstate

1115
01:07:19,088 --> 01:07:21,449
this too because it seems like a good

1116
01:07:20,949 --> 01:07:26,489
idea

1117
01:07:21,449 --> 01:07:26,489
so this radiative value here

1118
01:07:46,298 --> 01:07:50,429
I feel like we could just do

1119
01:08:02,099 --> 01:08:13,429
well I'm not sure like we could just do

1120
01:08:08,820 --> 01:08:13,430
this in Cindy now because why not right

1121
01:08:17,060 --> 01:08:26,100
so if we take a look at this right this

1122
01:08:22,409 --> 01:08:31,579
is just to select between two constants

1123
01:08:26,100 --> 01:08:31,579
like positive and negative one right

1124
01:08:37,270 --> 01:08:40,540
so really you know we could just have

1125
01:08:39,250 --> 01:08:44,310
some constants here and just do this and

1126
01:08:40,539 --> 01:08:44,310
type this thing entirely wide as well

1127
01:08:46,619 --> 01:09:04,989
seems worth doing also we could get rid

1128
01:08:56,859 --> 01:09:08,099
of this loop too if we wanted to because

1129
01:09:04,989 --> 01:09:13,719
we could set the number of children and

1130
01:09:08,100 --> 01:09:19,780
have it be a known amount you know so

1131
01:09:13,720 --> 01:09:20,949
that that could be a fixed loop I don't

1132
01:09:19,779 --> 01:09:25,500
know if the compiler is smart enough to

1133
01:09:20,949 --> 01:09:25,500
unroll the access index bit here

1134
01:09:50,779 --> 01:09:52,839
you

1135
01:09:55,140 --> 01:10:01,230
I also think the way we wrote this down

1136
01:09:58,170 --> 01:10:03,449
here is not really necessary so since

1137
01:10:01,229 --> 01:10:06,869
the close enough part had to be masked

1138
01:10:03,449 --> 01:10:14,970
already this is really not necessary

1139
01:10:06,869 --> 01:10:16,739
this can come down here so basically

1140
01:10:14,970 --> 01:10:19,070
this can look essentially the same as it

1141
01:10:16,739 --> 01:10:19,069
used to

1142
01:10:32,850 --> 01:10:36,050
so yeah

1143
01:10:53,760 --> 01:10:59,909
where do we go from here

1144
01:10:56,520 --> 01:10:59,910
that's the question

1145
01:11:17,630 --> 01:11:27,409
and I don't really know the answer one

1146
01:11:25,909 --> 01:11:30,019
thing I would like to do is take a look

1147
01:11:27,409 --> 01:11:33,939
at what it did here so I might want to

1148
01:11:30,020 --> 01:11:33,940
just say let's step in here and see

1149
01:11:44,789 --> 01:11:47,789
okay

1150
01:11:56,479 --> 01:12:01,719
so it didn't unroll the loop

1151
01:12:09,099 --> 01:12:13,900
it did not unroll the loop

1152
01:12:34,119 --> 01:12:39,250
I'm just looking at the assembly here

1153
01:12:36,380 --> 01:12:39,250
and seeing what I think

1154
01:12:45,890 --> 01:12:50,520
because it looks like it goes ahead and

1155
01:12:47,939 --> 01:12:54,229
does this jump jumping or he does the

1156
01:12:50,520 --> 01:12:54,230
code right here right

1157
01:13:30,479 --> 01:13:37,119
so some of these also I don't know if

1158
01:13:34,359 --> 01:13:39,219
unaligned moves will hurt us at all

1159
01:13:37,119 --> 01:13:47,289
there you know some of these things we

1160
01:13:39,220 --> 01:13:48,400
can force the alignment of and I'm not

1161
01:13:47,289 --> 01:13:50,819
sure what we want to do about that

1162
01:13:48,399 --> 01:13:50,819
exactly

1163
01:14:03,569 --> 01:14:05,630
you

1164
01:14:12,260 --> 01:14:23,180
you know but mostly it seems reasonable

1165
01:14:15,199 --> 01:14:28,069
right I mean so I'm not yeah I don't

1166
01:14:23,180 --> 01:14:32,600
really see much to do here that's yeah

1167
01:14:28,069 --> 01:14:33,710
it all seems pretty reasonable I mean

1168
01:14:32,600 --> 01:14:35,930
one thing that's true

1169
01:14:33,710 --> 01:14:37,460
I guess I don't really know is should we

1170
01:14:35,930 --> 01:14:40,820
try to simplify the loop for the

1171
01:14:37,460 --> 01:14:44,989
compiler a little bit you know and I

1172
01:14:40,819 --> 01:14:47,779
don't know because like you know looking

1173
01:14:44,988 --> 01:14:50,029
at the speed of the routine and just

1174
01:14:47,779 --> 01:14:53,029
wondering like do we want to do stuff

1175
01:14:50,029 --> 01:14:58,519
like just say look you can always do

1176
01:14:53,029 --> 01:15:09,710
this you know you don't have to you

1177
01:14:58,520 --> 01:15:11,690
don't have to do these you know those

1178
01:15:09,710 --> 01:15:13,489
are early out conditions but if they

1179
01:15:11,689 --> 01:15:19,969
make it worse for you you know don't do

1180
01:15:13,488 --> 01:15:21,589
them and and I don't know right it

1181
01:15:19,970 --> 01:15:23,810
doesn't look like there's a particularly

1182
01:15:21,590 --> 01:15:25,670
big difference between those two like

1183
01:15:23,810 --> 01:15:28,300
one thing you could say is it looks like

1184
01:15:25,670 --> 01:15:36,500
they are kind of superfluous right like

1185
01:15:28,300 --> 01:15:42,829
so those are not maybe necessary in the

1186
01:15:36,500 --> 01:15:44,300
first place so we can kind of simplify

1187
01:15:42,829 --> 01:15:48,890
that a little bit we could even get rid

1188
01:15:44,300 --> 01:15:50,840
of this one as well so you know a lot of

1189
01:15:48,890 --> 01:15:57,440
these if statements aren't really

1190
01:15:50,840 --> 01:15:59,119
necessary so you can see that that one

1191
01:15:57,439 --> 01:16:01,399
does make a difference so having that

1192
01:15:59,119 --> 01:16:04,159
branch be tested is good this is I guess

1193
01:16:01,399 --> 01:16:07,579
enough work right that if you early out

1194
01:16:04,159 --> 01:16:09,849
on it you get a win get a good good win

1195
01:16:07,579 --> 01:16:09,850
there

1196
01:16:13,760 --> 01:16:20,420
but you know maybe these aren't and we

1197
01:16:18,590 --> 01:16:22,279
might we might want to check to make

1198
01:16:20,420 --> 01:16:23,599
sure that's true like we might have to

1199
01:16:22,279 --> 01:16:25,960
measure it really carefully to see if

1200
01:16:23,599 --> 01:16:25,960
that's true

1201
01:16:26,529 --> 01:16:29,929
because we're not really testing this

1202
01:16:28,460 --> 01:16:33,219
very sensitive here but it looks like

1203
01:16:29,929 --> 01:16:35,510
for example these are just not necessary

1204
01:16:33,219 --> 01:16:36,948
because maybe the number instructions

1205
01:16:35,510 --> 01:16:38,960
that are done here just isn't

1206
01:16:36,948 --> 01:16:40,339
significant compared to the overhead of

1207
01:16:38,960 --> 01:16:52,429
doing like the move masks and stuff like

1208
01:16:40,340 --> 01:16:56,900
that so you know there's that so the

1209
01:16:52,429 --> 01:17:10,190
rate value here that we're selecting

1210
01:16:56,899 --> 01:17:13,308
also this is not necessary to do every

1211
01:17:10,189 --> 01:17:16,488
time so one other thing we might want to

1212
01:17:13,309 --> 01:17:19,670
consider is just moving this out so for

1213
01:17:16,488 --> 01:17:22,549
example this value here because we kind

1214
01:17:19,670 --> 01:17:29,139
of did this before right we can just say

1215
01:17:22,550 --> 01:17:29,139
like alright just compute this

1216
01:17:36,390 --> 01:17:41,470
based on the Delta value that we do

1217
01:17:39,069 --> 01:17:43,509
outside right so we could avoid doing

1218
01:17:41,470 --> 01:17:44,949
the select on that which might be nice

1219
01:17:43,510 --> 01:17:47,440
by saying

1220
01:17:44,949 --> 01:17:59,769
all right compute the Delta by taking

1221
01:17:47,439 --> 01:18:03,729
the results oops not result tear a and

1222
01:17:59,770 --> 01:18:23,260
then just compute it here so you know go

1223
01:18:03,729 --> 01:18:26,739
ahead and write go ahead and and produce

1224
01:18:23,260 --> 01:18:30,699
that hit value on the outside so you

1225
01:18:26,739 --> 01:18:32,769
don't have to do it every time you know

1226
01:18:30,699 --> 01:18:35,349
that's probably a little bit of a win

1227
01:18:32,770 --> 01:18:39,300
probably not significant but it's a

1228
01:18:35,350 --> 01:18:39,300
little bit of something maybe you know

1229
01:18:40,949 --> 01:18:44,889
it's also something that we could just

1230
01:18:43,060 --> 01:18:46,420
do outside right it doesn't have to be

1231
01:18:44,890 --> 01:18:49,950
done here at all

1232
01:18:46,420 --> 01:18:52,090
it can be done in the returning code and

1233
01:18:49,949 --> 01:18:58,590
we because we don't really have to

1234
01:18:52,090 --> 01:19:03,430
update that value so you know out here

1235
01:18:58,590 --> 01:19:10,300
in this when we get the stuff back we

1236
01:19:03,430 --> 01:19:12,780
could do something more like that in

1237
01:19:10,300 --> 01:19:15,909
fact we don't even need to do the Select

1238
01:19:12,779 --> 01:19:18,479
right the Select is superfluous we can

1239
01:19:15,909 --> 01:19:18,479
just do that

1240
01:19:26,979 --> 01:19:33,099
and then go back to doing what we used

1241
01:19:28,600 --> 01:19:41,739
to do which is store the T ray in the

1242
01:19:33,100 --> 01:19:45,760
actual thing that we return you know so

1243
01:19:41,738 --> 01:19:54,609
then we've got the Ray origin and we've

1244
01:19:45,760 --> 01:19:56,440
got the Ray direction which is this and

1245
01:19:54,609 --> 01:20:00,579
that should produce the landing point

1246
01:19:56,439 --> 01:20:03,309
properly for us on the outside so then

1247
01:20:00,579 --> 01:20:21,600
really the result T ray just becomes an

1248
01:20:03,310 --> 01:20:21,600
actual thing and off we go

1249
01:20:34,529 --> 01:20:38,210
and that is certainly nee be called T

1250
01:20:35,880 --> 01:20:44,310
ray anymore either cause it be called T

1251
01:20:38,210 --> 01:20:45,539
whatever so yeah so we can again we can

1252
01:20:44,310 --> 01:20:47,730
just kind of fuss with that a little bit

1253
01:20:45,539 --> 01:20:49,470
do those computations on the outside

1254
01:20:47,729 --> 01:20:51,839
they don't really seem to help or hurt

1255
01:20:49,470 --> 01:20:57,720
us much though they they seem to be kind

1256
01:20:51,840 --> 01:20:59,220
of largely irrelevant so it's probably

1257
01:20:57,720 --> 01:21:03,840
not really worth looking at that much

1258
01:20:59,220 --> 01:21:05,699
but that is that right so and this of

1259
01:21:03,840 --> 01:21:08,869
course we still don't really know if we

1260
01:21:05,699 --> 01:21:08,869
care about it or not

1261
01:21:16,420 --> 01:21:21,590
yeah it seems like we're pretty much a

1262
01:21:18,560 --> 01:21:23,090
Issa as these guys jump around we

1263
01:21:21,590 --> 01:21:24,500
probably want to produce some kind of a

1264
01:21:23,090 --> 01:21:26,690
lighting test if we're gonna optimize

1265
01:21:24,500 --> 01:21:30,170
this further where we can produce a

1266
01:21:26,689 --> 01:21:33,559
reliable like you know environment where

1267
01:21:30,170 --> 01:21:38,359
there isn't anything moving so you know

1268
01:21:33,560 --> 01:21:41,900
if we were to do that so I can take like

1269
01:21:38,359 --> 01:21:53,719
the snake and not add the snake then

1270
01:21:41,899 --> 01:21:55,369
nothing is moving so you know the speed

1271
01:21:53,720 --> 01:21:59,750
of the computation is not dependent on

1272
01:21:55,369 --> 01:22:16,340
on anything because no box values are

1273
01:21:59,750 --> 01:22:18,729
changing so all right so couple things

1274
01:22:16,340 --> 01:22:18,730
here

1275
01:22:27,880 --> 01:22:35,659
so if we wanted to it looks like we

1276
01:22:32,479 --> 01:22:40,759
could probably do this code more cleanly

1277
01:22:35,659 --> 01:22:53,869
as well you know we could do this stuff

1278
01:22:40,760 --> 01:22:55,250
in Cindy if we wanted to and in fact

1279
01:22:53,869 --> 01:22:57,859
there's a lot of stuff here that we

1280
01:22:55,250 --> 01:23:07,869
could start to improve it's kind of hard

1281
01:22:57,859 --> 01:23:07,869
to say but you know just looking at it

1282
01:23:12,140 --> 01:23:17,480
I do think quite a bit of this stuff we

1283
01:23:15,619 --> 01:23:20,149
could we could make a lot better than it

1284
01:23:17,479 --> 01:23:22,189
is right so I don't know how much this

1285
01:23:20,149 --> 01:23:24,619
is affecting it currently and I don't

1286
01:23:22,189 --> 01:23:26,539
know so you know we could drop we could

1287
01:23:24,619 --> 01:23:29,769
first of all pull sample Hemisphere hand

1288
01:23:26,539 --> 01:23:36,439
in here we could make this loop just be

1289
01:23:29,770 --> 01:23:38,930
completely welded together as well and I

1290
01:23:36,439 --> 01:23:40,759
don't know to what degree we want to do

1291
01:23:38,930 --> 01:23:43,239
that but you know we certainly could so

1292
01:23:40,760 --> 01:23:47,570
for example if we took sample Hemisphere

1293
01:23:43,238 --> 01:23:50,468
and we just brought that directly in in

1294
01:23:47,569 --> 01:23:53,719
fact what I could do is finalize this

1295
01:23:50,469 --> 01:23:56,319
sample Hemisphere so that sample

1296
01:23:53,719 --> 01:23:56,319
Hemisphere is

1297
01:24:01,569 --> 01:24:08,748
is properly Cindy as well weld that in

1298
01:24:05,719 --> 01:24:10,489
here drop the raycast in and then clean

1299
01:24:08,748 --> 01:24:13,010
this up and the whole thing could run in

1300
01:24:10,488 --> 01:24:14,598
Cindy I just don't know if it like based

1301
01:24:13,010 --> 01:24:16,550
on what we're seeing profile wise you

1302
01:24:14,599 --> 01:24:21,139
don't know that that really helps us all

1303
01:24:16,550 --> 01:24:24,229
that much but you know we'll see I want

1304
01:24:21,139 --> 01:24:27,920
to take accumulate sample and move that

1305
01:24:24,229 --> 01:24:29,360
down for starters I think because I

1306
01:24:27,920 --> 01:24:30,649
never really liked it being outside

1307
01:24:29,359 --> 01:24:32,658
anyway we only did it that way because

1308
01:24:30,649 --> 01:24:36,109
we didn't previously integrate skylight

1309
01:24:32,658 --> 01:24:40,308
sampling in but we do now so I'd rather

1310
01:24:36,109 --> 01:24:42,920
have a way of saying okay let's let's

1311
01:24:40,309 --> 01:24:48,309
actually make this do something

1312
01:24:42,920 --> 01:24:51,019
reasonable so here's accumulate sample

1313
01:24:48,309 --> 01:24:56,389
and it's passing you know sample point

1314
01:24:51,019 --> 01:24:58,458
index here for desk sample index so we

1315
01:24:56,389 --> 01:25:06,949
can just replace death sample index

1316
01:24:58,458 --> 01:25:11,328
everywhere we see it with sample point

1317
01:25:06,948 --> 01:25:16,038
index solution is solution so transfer

1318
01:25:11,328 --> 01:25:18,018
PPS is the actual light color so in here

1319
01:25:16,038 --> 01:25:22,009
where we take the light color that would

1320
01:25:18,019 --> 01:25:25,010
be matte and then we have our normal to

1321
01:25:22,010 --> 01:25:29,360
light so I can just make that be normal

1322
01:25:25,010 --> 01:25:35,079
to light and then this accumulates the

1323
01:25:29,359 --> 01:25:35,078
sample right

1324
01:25:39,819 --> 01:25:47,599
so that's just the yeah building that

1325
01:25:44,300 --> 01:25:49,760
code in there and similarly you know

1326
01:25:47,599 --> 01:25:51,559
this again also could be done you know

1327
01:25:49,760 --> 01:25:52,820
just looking at this this sub razor to

1328
01:25:51,559 --> 01:25:54,139
force so I'm just looking at can this

1329
01:25:52,819 --> 01:25:55,819
whole thing collapsed Cindy fairly

1330
01:25:54,139 --> 01:25:59,118
easily and I think it you know pretty

1331
01:25:55,819 --> 01:26:00,498
easily can the confusing part is the

1332
01:25:59,118 --> 01:26:03,649
fact that we've got a different number

1333
01:26:00,498 --> 01:26:05,300
of surface point index loops to do and

1334
01:26:03,649 --> 01:26:06,768
that's why I saying like one thing we

1335
01:26:05,300 --> 01:26:09,800
might want to do is just say that that

1336
01:26:06,769 --> 01:26:11,630
cubes always have a fixed number because

1337
01:26:09,800 --> 01:26:16,010
that would help us as well in terms of

1338
01:26:11,630 --> 01:26:17,900
getting less indirection happening in

1339
01:26:16,010 --> 01:26:19,280
that loop so maybe we just say hey look

1340
01:26:17,899 --> 01:26:23,089
we're gonna fix the number of sample

1341
01:26:19,279 --> 01:26:26,389
points per side to just be for always or

1342
01:26:23,090 --> 01:26:27,939
eight always or something like this and

1343
01:26:26,389 --> 01:26:30,078
I don't know if that's smart or not

1344
01:26:27,939 --> 01:26:31,820
because we may want to do something like

1345
01:26:30,078 --> 01:26:34,788
well it's it's not always the same

1346
01:26:31,819 --> 01:26:36,498
number per surface because we don't want

1347
01:26:34,788 --> 01:26:38,448
to sample the undersides of things as

1348
01:26:36,498 --> 01:26:39,920
much as we sample the tops because you

1349
01:26:38,448 --> 01:26:45,529
could see the tops you can't see the

1350
01:26:39,920 --> 01:26:47,029
undersides right so in terms of have the

1351
01:26:45,529 --> 01:26:49,248
lighting is sampled it really does seem

1352
01:26:47,029 --> 01:26:53,538
like we would want to have a different

1353
01:26:49,248 --> 01:26:55,788
number per per surface area so that's

1354
01:26:53,538 --> 01:27:02,748
kind of a tough kind of a tough part of

1355
01:26:55,788 --> 01:27:06,099
it what are you gonna do to see how we

1356
01:27:02,748 --> 01:27:09,738
want to how we want to proceed on that

1357
01:27:06,099 --> 01:27:11,119
so okay so sample Hemisphere let's go

1358
01:27:09,738 --> 01:27:15,198
ahead and Cindy eyes that while we're at

1359
01:27:11,118 --> 01:27:17,118
it just for fun so in order to do that

1360
01:27:15,198 --> 01:27:19,938
what I need to do here is just make it

1361
01:27:17,118 --> 01:27:23,978
so that we create these all at the same

1362
01:27:19,939 --> 01:27:28,219
time so I want to start out by

1363
01:27:23,979 --> 01:27:31,510
replicating the basis vector and then I

1364
01:27:28,219 --> 01:27:36,109
just want to do an ad at the end I guess

1365
01:27:31,510 --> 01:27:38,208
seems like it I'm not sure that's really

1366
01:27:36,109 --> 01:27:39,920
the most efficient way to do this so I

1367
01:27:38,208 --> 01:27:42,279
think if there's some smarter thing to

1368
01:27:39,920 --> 01:27:42,279
do there

1369
01:27:49,170 --> 01:27:52,920
I mean really I guess we want to just

1370
01:27:51,149 --> 01:27:55,469
have a normalizer zero function that

1371
01:27:52,920 --> 01:27:59,489
works across all of them which wouldn't

1372
01:27:55,470 --> 01:28:07,440
be that hard to do so if you take a look

1373
01:27:59,489 --> 01:28:11,369
at what normalizer zero does and really

1374
01:28:07,439 --> 01:28:13,559
normalize your zero is kind of iffy here

1375
01:28:11,369 --> 01:28:15,659
we don't really want to do normalizer

1376
01:28:13,560 --> 01:28:17,430
zero we always want to have in a valid

1377
01:28:15,659 --> 01:28:19,470
ray we don't ever really want a result

1378
01:28:17,430 --> 01:28:22,560
of zero so normalizer zero is kind of

1379
01:28:19,470 --> 01:28:24,510
dumb to begin with and it's there just

1380
01:28:22,560 --> 01:28:31,200
to prevent us from actually doing it

1381
01:28:24,510 --> 01:28:35,039
divide by zero but tired but it's

1382
01:28:31,199 --> 01:28:36,720
unclear that we wouldn't rather just

1383
01:28:35,039 --> 01:28:38,430
check for zero and then not cast that

1384
01:28:36,720 --> 01:28:41,360
ray like replaced that ray with a better

1385
01:28:38,430 --> 01:28:41,360
ray right

1386
01:28:52,699 --> 01:29:03,739
so let's take a look at this oops if I

1387
01:29:00,739 --> 01:29:03,739
wanted

1388
01:29:11,289 --> 01:29:30,220
I could say replicate the basis value

1389
01:29:25,600 --> 01:29:34,390
out to everything right so we start with

1390
01:29:30,220 --> 01:29:41,440
the replicated version and then what we

1391
01:29:34,390 --> 01:29:45,760
want to do is make a version of this

1392
01:29:41,439 --> 01:29:48,939
caught this thing right here that just

1393
01:29:45,760 --> 01:29:54,699
computes the value directly and also

1394
01:29:48,939 --> 01:29:58,059
does this part directly so it would say

1395
01:29:54,699 --> 01:30:04,449
you know okay then result plus equals

1396
01:29:58,060 --> 01:30:20,920
this or rather equals so you can do it

1397
01:30:04,449 --> 01:30:26,819
like this right so we do take the basis

1398
01:30:20,920 --> 01:30:29,739
vector replicated out to all four lanes

1399
01:30:26,819 --> 01:30:32,049
and then what we'd want to do is take

1400
01:30:29,739 --> 01:30:34,479
separate randoms for each of these I

1401
01:30:32,050 --> 01:30:36,610
don't actually know why we're there we

1402
01:30:34,479 --> 01:30:43,629
want every off on our number of closes

1403
01:30:36,609 --> 01:30:44,710
closures here one closure to the sbr so

1404
01:30:43,630 --> 01:30:46,390
the next thing we want to do is be able

1405
01:30:44,710 --> 01:30:50,170
to take different randoms for each one

1406
01:30:46,390 --> 01:30:54,430
of these so we really want something

1407
01:30:50,170 --> 01:30:58,440
that creates you know four different

1408
01:30:54,430 --> 01:31:02,470
random vectors and then it does the rest

1409
01:30:58,439 --> 01:31:03,849
Sindhi wide right but we really do we in

1410
01:31:02,470 --> 01:31:05,289
fact what we really would like is

1411
01:31:03,850 --> 01:31:10,150
something that could actually do a

1412
01:31:05,289 --> 01:31:11,949
random a wide random so that we don't

1413
01:31:10,149 --> 01:31:13,960
have to keep calling random bilateral

1414
01:31:11,949 --> 01:31:15,609
every time right so we'd really like

1415
01:31:13,960 --> 01:31:19,649
something that just was a wide random

1416
01:31:15,609 --> 01:31:22,539
number generator that just generated us

1417
01:31:19,649 --> 01:31:25,210
for packed random floats at the same

1418
01:31:22,539 --> 01:31:29,859
time because there's not a lot of reason

1419
01:31:25,210 --> 01:31:33,869
not to have it do that right so really

1420
01:31:29,859 --> 01:31:46,089
what we like is something more like oops

1421
01:31:33,869 --> 01:31:48,488
f-22 Forex or before I should say really

1422
01:31:46,090 --> 01:31:54,000
what I'd like here is something where we

1423
01:31:48,488 --> 01:32:01,959
did v3 for X you know Delta e and Delta

1424
01:31:54,000 --> 01:32:04,420
x equals random f/32 for X you know I'm

1425
01:32:01,960 --> 01:32:07,510
saying what I'd like is something that

1426
01:32:04,420 --> 01:32:09,819
does this so that I can generate random

1427
01:32:07,510 --> 01:32:11,800
values into here and generate them all

1428
01:32:09,819 --> 01:32:14,979
at once so not to keep like calling and

1429
01:32:11,800 --> 01:32:23,409
stuffing in that way which is you know

1430
01:32:14,979 --> 01:32:26,259
which is annoying so if I did something

1431
01:32:23,409 --> 01:32:27,309
like this you know we can make this be a

1432
01:32:26,260 --> 01:32:30,789
temporary thing and then eventually

1433
01:32:27,310 --> 01:32:33,130
replace it with a real one later then

1434
01:32:30,789 --> 01:32:37,719
what I can do is say okay do exactly

1435
01:32:33,130 --> 01:32:46,989
this function that we've got here do

1436
01:32:37,719 --> 01:32:50,050
that and then do this and that can all

1437
01:32:46,988 --> 01:32:51,699
be done wide right so we can write an

1438
01:32:50,050 --> 01:32:56,050
inner product function that operates

1439
01:32:51,699 --> 01:32:57,729
wide we can do a normalize function that

1440
01:32:56,050 --> 01:33:00,279
operates wide and then the other

1441
01:32:57,729 --> 01:33:03,988
operations in there we already have so

1442
01:33:00,279 --> 01:33:06,340
that would be the wide version of that

1443
01:33:03,988 --> 01:33:09,099
I'm going to get rid of the sample table

1444
01:33:06,340 --> 01:33:10,390
bit probably at the moment well I don't

1445
01:33:09,100 --> 01:33:14,200
know we can leave that in there for now

1446
01:33:10,390 --> 01:33:17,800
suppose case you want to fork that as

1447
01:33:14,199 --> 01:33:19,090
well so then really the only part that's

1448
01:33:17,800 --> 01:33:23,699
a little bit weird is the fact that we

1449
01:33:19,090 --> 01:33:23,699
do one vector first as the basis

1450
01:33:26,389 --> 01:33:29,789
but I'm not sure there's really any

1451
01:33:28,439 --> 01:33:31,408
other way to do it because you're gonna

1452
01:33:29,789 --> 01:33:35,639
have to you want to start with the same

1453
01:33:31,408 --> 01:33:39,078
value for each of the four vectors so I

1454
01:33:35,639 --> 01:33:43,050
think that's just how that has to work

1455
01:33:39,078 --> 01:33:55,039
so if we were going to expand out on

1456
01:33:43,050 --> 01:33:55,039
that now it's not what I wanted

1457
01:34:02,359 --> 01:34:25,909
oh yes it is and probably this can just

1458
01:34:22,609 --> 01:34:33,469
become random bilateral and it takes a

1459
01:34:25,909 --> 01:34:38,329
4x series in fact we could just make

1460
01:34:33,470 --> 01:34:44,240
such a thing because this is all we use

1461
01:34:38,329 --> 01:34:46,609
it for so it's kind of annoying because

1462
01:34:44,239 --> 01:34:51,639
one of our things doesn't actually want

1463
01:34:46,609 --> 01:34:58,909
that one of our things wants to use it

1464
01:34:51,640 --> 01:35:00,680
separately so yeah not to think about

1465
01:34:58,909 --> 01:35:03,109
that code a little bit maybe there's a

1466
01:35:00,680 --> 01:35:04,310
way to more cleverly do that so it's in

1467
01:35:03,109 --> 01:35:07,189
the eyes Bowl I mean maybe you just

1468
01:35:04,310 --> 01:35:09,440
generate them and then you know do the

1469
01:35:07,189 --> 01:35:10,909
normalization by pulling them out of the

1470
01:35:09,439 --> 01:35:13,449
red I don't man and it doesn't doesn't

1471
01:35:10,909 --> 01:35:13,449
seem great

1472
01:35:14,829 --> 01:35:21,170
to be completely honest with you but so

1473
01:35:18,729 --> 01:35:29,750
let's go ahead and pretend we know what

1474
01:35:21,170 --> 01:35:37,760
we're doing here and this for now will

1475
01:35:29,750 --> 01:35:40,250
not do any such thing it will just call

1476
01:35:37,760 --> 01:35:45,250
the thing four times like like just a

1477
01:35:40,250 --> 01:35:48,079
dumb routine would know you know no

1478
01:35:45,250 --> 01:35:52,189
actual optimizing there no no attempting

1479
01:35:48,079 --> 01:35:53,750
to make it any better than it was so we

1480
01:35:52,189 --> 01:35:56,439
do need the random series to come before

1481
01:35:53,750 --> 01:35:56,439
the sim D

1482
01:36:08,270 --> 01:36:14,330
and I'm not sure that must be done in in

1483
01:36:12,029 --> 01:36:16,920
our platform go do is a Cindy in here

1484
01:36:14,329 --> 01:36:21,149
now where is the hand made some use in

1485
01:36:16,920 --> 01:36:27,350
the napkin I don't know where that

1486
01:36:21,149 --> 01:36:27,349
actually is concluded oh it's in shared

1487
01:36:44,359 --> 01:36:49,759
now I could actually just put that stuff

1488
01:36:46,489 --> 01:36:51,859
inside handmade random instead so you

1489
01:36:49,760 --> 01:36:55,850
know maybe that's a better way to do it

1490
01:36:51,859 --> 01:37:01,670
I'm not sure probably not but it's hard

1491
01:36:55,850 --> 01:37:12,560
to say so here we go we've got a bunch

1492
01:37:01,670 --> 01:37:14,989
of stuff that's wait what do we really

1493
01:37:12,560 --> 01:37:26,150
not have a replicate for the v3 4x I

1494
01:37:14,989 --> 01:37:40,309
thought we did though it's called 2 V 3

1495
01:37:26,149 --> 01:37:43,219
for X not anymore so now we need these

1496
01:37:40,310 --> 01:37:45,200
actual functions because we don't

1497
01:37:43,220 --> 01:37:46,550
actually have them and then I have to

1498
01:37:45,199 --> 01:37:48,559
deal with this part so basically you

1499
01:37:46,550 --> 01:37:50,119
know what based on that - that sort of

1500
01:37:48,560 --> 01:37:54,020
tells me that I do really not want to

1501
01:37:50,119 --> 01:37:59,449
have to deal with the with pulling this

1502
01:37:54,020 --> 01:38:02,450
having pulled this out here so what I

1503
01:37:59,449 --> 01:38:13,389
can do is inside handmade random I can

1504
01:38:02,449 --> 01:38:15,470
make I can make this a courage down here

1505
01:38:13,390 --> 01:38:17,329
so now all I really need to do is

1506
01:38:15,470 --> 01:38:20,060
implement the functions we don't have so

1507
01:38:17,329 --> 01:38:22,670
if I go into him its MD now I can add

1508
01:38:20,060 --> 01:38:28,600
these functions that we need so

1509
01:38:22,670 --> 01:38:28,600
normalizer 0 is 1

1510
01:38:33,859 --> 01:38:39,319
and the other one that we need is the

1511
01:38:36,779 --> 01:38:39,319
inner product

1512
01:38:48,448 --> 01:38:53,078
oops

1513
01:38:50,880 --> 01:38:56,679
and so these are going to depend on some

1514
01:38:53,078 --> 01:38:58,090
stuff as well they're going to depend on

1515
01:38:56,679 --> 01:39:00,550
having a square root so we'll see that

1516
01:38:58,090 --> 01:39:03,788
in a second we'll have to add that but

1517
01:39:00,550 --> 01:39:05,409
otherwise we should be fine so we want

1518
01:39:03,788 --> 01:39:06,728
to do here for the inner product this is

1519
01:39:05,408 --> 01:39:07,929
pretty straightforward we know all about

1520
01:39:06,729 --> 01:39:10,690
the inner product we've done it many

1521
01:39:07,929 --> 01:39:12,699
many times so that's just going to be

1522
01:39:10,689 --> 01:39:14,859
taking the components of these and

1523
01:39:12,698 --> 01:39:17,978
multiplying together right so you've got

1524
01:39:14,859 --> 01:39:22,210
a dot x times B dot X plus a dot y times

1525
01:39:17,979 --> 01:39:23,440
B dot y plus a dot z times B dot Z and

1526
01:39:22,210 --> 01:39:26,229
then we're just gonna return the result

1527
01:39:23,439 --> 01:39:27,578
so again it's exactly the same so you

1528
01:39:26,229 --> 01:39:29,679
know if we go over and look at the math

1529
01:39:27,578 --> 01:39:32,078
function if we take a look at our inner

1530
01:39:29,679 --> 01:39:37,328
product call here it's it's the same

1531
01:39:32,078 --> 01:39:43,058
call it's the same code it's just doing

1532
01:39:37,328 --> 01:39:44,649
it for wide and if we take a look at

1533
01:39:43,059 --> 01:39:46,989
normalizer zero the same thing would be

1534
01:39:44,649 --> 01:39:49,420
true except now you can see where this

1535
01:39:46,988 --> 01:39:52,748
is gonna get a little bit Squinkie or if

1536
01:39:49,420 --> 01:39:55,630
we come down in here where we're

1537
01:39:52,748 --> 01:40:00,219
returning a v3 for x you can immediately

1538
01:39:55,630 --> 01:40:01,900
see where the problem arises and that is

1539
01:40:00,219 --> 01:40:07,050
that although we can do this pretty

1540
01:40:01,899 --> 01:40:13,529
easily length squared obviously is just

1541
01:40:07,050 --> 01:40:13,529
exactly the same as would be

1542
01:40:17,439 --> 01:40:24,439
same exact code the problem that we're

1543
01:40:22,550 --> 01:40:27,019
gonna have here is this is a conditional

1544
01:40:24,439 --> 01:40:28,129
and we don't want conditionals and

1545
01:40:27,019 --> 01:40:31,400
there's that square root that I was

1546
01:40:28,130 --> 01:40:33,559
mentioning before but it's okay again

1547
01:40:31,399 --> 01:40:41,509
because we know that we can actually

1548
01:40:33,559 --> 01:40:45,739
turn this into a mask and then only

1549
01:40:41,510 --> 01:40:46,998
update based on the mask right so what

1550
01:40:45,738 --> 01:40:48,859
we're gonna do is we're just gonna do a

1551
01:40:46,998 --> 01:40:54,349
select bulk here

1552
01:40:48,859 --> 01:41:06,708
from results mask and then you know the

1553
01:40:54,349 --> 01:41:08,538
actual normalized value so what you can

1554
01:41:06,708 --> 01:41:10,458
see here is we're just gonna do take the

1555
01:41:08,538 --> 01:41:12,859
length we're gonna compute the actual

1556
01:41:10,458 --> 01:41:17,899
normalized version and then we're gonna

1557
01:41:12,859 --> 01:41:20,868
do the mask based on Jimmy we're gonna

1558
01:41:17,899 --> 01:41:22,308
do the mask based on whether or not it

1559
01:41:20,868 --> 01:41:24,228
passes the conditional and if it does

1560
01:41:22,309 --> 01:41:25,400
vests conditional then we will use the

1561
01:41:24,229 --> 01:41:29,239
result otherwise we watch so that

1562
01:41:25,399 --> 01:41:32,268
normalizes all four at once and only

1563
01:41:29,238 --> 01:41:35,718
actually updates the ones that that

1564
01:41:32,269 --> 01:41:37,458
weren't too low to use now the square

1565
01:41:35,719 --> 01:41:38,840
root value again is gonna we're gonna

1566
01:41:37,458 --> 01:41:40,639
have to have a square root because we

1567
01:41:38,840 --> 01:41:43,519
don't have one right now so that has to

1568
01:41:40,639 --> 01:41:45,380
actually get updated and you can see

1569
01:41:43,519 --> 01:41:47,539
this as an inverse square root so we

1570
01:41:45,380 --> 01:41:49,819
actually have the option of doing an

1571
01:41:47,538 --> 01:41:51,439
inverse square root but we don't

1572
01:41:49,819 --> 01:41:57,049
probably want to and let me talk about

1573
01:41:51,439 --> 01:41:58,328
that a little bit here we've covered

1574
01:41:57,050 --> 01:42:01,820
this before it's worth mentioning again

1575
01:41:58,328 --> 01:42:05,840
so here's a reciprocal square root

1576
01:42:01,819 --> 01:42:07,670
that's one over the square root and I'm

1577
01:42:05,840 --> 01:42:11,949
gonna pull up another copy of the Intel

1578
01:42:07,670 --> 01:42:14,328
and turns this guide here like so and

1579
01:42:11,948 --> 01:42:20,719
then I'm going to show you the actual

1580
01:42:14,328 --> 01:42:23,599
square root okay so what you can see

1581
01:42:20,719 --> 01:42:27,429
here is that the reciprocal square root

1582
01:42:23,599 --> 01:42:29,579
is like way faster than the regular

1583
01:42:27,429 --> 01:42:32,039
square root function

1584
01:42:29,579 --> 01:42:35,729
so you know even if you're talking about

1585
01:42:32,039 --> 01:42:39,930
a particularly fast CPU here it's like

1586
01:42:35,729 --> 01:42:42,959
three times slower to do these

1587
01:42:39,930 --> 01:42:45,270
then-then-then to do the reciprocal

1588
01:42:42,960 --> 01:42:47,730
right so doing a regular square root

1589
01:42:45,270 --> 01:42:52,110
cost three cycles at doing a reciprocal

1590
01:42:47,729 --> 01:42:54,539
square costs only one and you already

1591
01:42:52,109 --> 01:42:56,219
get the reciprocal so not only do I have

1592
01:42:54,539 --> 01:43:00,029
to spend the three cycles even on the

1593
01:42:56,220 --> 01:43:03,770
fastest possible case but I also have to

1594
01:43:00,029 --> 01:43:07,199
do a div afterwards to do one over right

1595
01:43:03,770 --> 01:43:10,020
and that's another three cycles so I'm

1596
01:43:07,199 --> 01:43:11,639
talking about six cycles worst case and

1597
01:43:10,020 --> 01:43:13,680
that's the throughput not the latency so

1598
01:43:11,640 --> 01:43:16,380
best case scenario I've got other things

1599
01:43:13,680 --> 01:43:18,570
in the pipeline it takes me six cycles

1600
01:43:16,380 --> 01:43:25,470
whereas here it's only gonna take me one

1601
01:43:18,569 --> 01:43:27,569
cycle throughput so you can see that it

1602
01:43:25,470 --> 01:43:29,820
really is very beneficial to use triple

1603
01:43:27,569 --> 01:43:34,109
tour through it the problem is it's not

1604
01:43:29,819 --> 01:43:36,090
right the reciprocal actually doesn't

1605
01:43:34,109 --> 01:43:39,569
give you the real reciprocal square root

1606
01:43:36,090 --> 01:43:43,500
it gives you an approximation to it and

1607
01:43:39,569 --> 01:43:48,420
it tells you the relative error here for

1608
01:43:43,500 --> 01:43:52,979
the approximation 1.5 times to the

1609
01:43:48,420 --> 01:43:56,699
negative 12 right I so the question is

1610
01:43:52,979 --> 01:43:59,639
can you use that reliably or not to

1611
01:43:56,699 --> 01:44:01,439
normalize the value or is the thing that

1612
01:43:59,640 --> 01:44:03,780
you're using going to be wildly

1613
01:44:01,439 --> 01:44:05,309
inaccurate when you try to normalize it

1614
01:44:03,779 --> 01:44:11,639
and it turns out that it's not actually

1615
01:44:05,310 --> 01:44:15,030
normalized right so it's hard to say

1616
01:44:11,640 --> 01:44:17,369
it's really hard to say and in a lot of

1617
01:44:15,029 --> 01:44:20,609
cases you probably need to be able to

1618
01:44:17,369 --> 01:44:23,220
determine which one you actually want in

1619
01:44:20,609 --> 01:44:26,250
our case I think I'm gonna say we can

1620
01:44:23,220 --> 01:44:27,930
use an approximation when here and what

1621
01:44:26,250 --> 01:44:30,479
I want to do is call this a procs

1622
01:44:27,930 --> 01:44:34,289
normalizer zero and the reason I'm going

1623
01:44:30,479 --> 01:44:36,389
to use the approximant is because I feel

1624
01:44:34,289 --> 01:44:38,670
like in the case that we're using it now

1625
01:44:36,390 --> 01:44:42,000
we don't care for a little bit off

1626
01:44:38,670 --> 01:44:43,230
sometimes we would for this we don't for

1627
01:44:42,000 --> 01:44:44,670
raycasting we

1628
01:44:43,229 --> 01:44:46,319
care at all it doesn't even need to be

1629
01:44:44,670 --> 01:44:48,510
normalized our rape test would work

1630
01:44:46,319 --> 01:44:50,279
whether it was normal or not so the only

1631
01:44:48,510 --> 01:44:55,710
case we actually care if it's normalized

1632
01:44:50,279 --> 01:44:57,479
is actually at the end where we're we're

1633
01:44:55,710 --> 01:44:58,619
we're doing the dot product to find out

1634
01:44:57,479 --> 01:44:59,939
how the lighting fall-off works that's

1635
01:44:58,619 --> 01:45:03,180
the only place where the error could

1636
01:44:59,939 --> 01:45:05,039
actually accrue so I think we're okay

1637
01:45:03,180 --> 01:45:06,480
using the approximate value here so

1638
01:45:05,039 --> 01:45:09,090
that's why I'm doing it that way

1639
01:45:06,479 --> 01:45:13,309
so to do an approximate square root what

1640
01:45:09,090 --> 01:45:13,310
I need to do is I need to do the divide

1641
01:45:15,380 --> 01:45:21,750
here's the one value and then I want to

1642
01:45:19,020 --> 01:45:27,360
divide by the approximate square root or

1643
01:45:21,750 --> 01:45:29,100
rather multiplied by the approximate

1644
01:45:27,359 --> 01:45:32,849
inverse square root of the length

1645
01:45:29,100 --> 01:45:39,120
squared and that's you know the whole

1646
01:45:32,850 --> 01:45:40,470
shebang so that's really all we're

1647
01:45:39,119 --> 01:45:42,090
talking about here so the only thing we

1648
01:45:40,470 --> 01:45:43,320
need is that approximate inverse square

1649
01:45:42,090 --> 01:45:46,230
root value because we don't actually

1650
01:45:43,319 --> 01:45:47,099
have one of those for our four-wide we

1651
01:45:46,229 --> 01:45:48,509
don't actually have one of those for

1652
01:45:47,100 --> 01:45:51,360
anything really we've never written that

1653
01:45:48,510 --> 01:45:52,739
before but to do an approximate in risk

1654
01:45:51,359 --> 01:45:55,469
square root again it's very simple

1655
01:45:52,738 --> 01:45:57,599
because it's already in there it's

1656
01:45:55,470 --> 01:45:59,610
already in the chip so we don't do any

1657
01:45:57,600 --> 01:46:02,280
work we just ask the chip to do it for

1658
01:45:59,609 --> 01:46:04,229
us right so looking back here you got

1659
01:46:02,279 --> 01:46:13,500
our square PS all we do is pass in the

1660
01:46:04,229 --> 01:46:14,519
value and out it pops cubes so that's

1661
01:46:13,500 --> 01:46:18,800
really all we're talking about here

1662
01:46:14,520 --> 01:46:21,800
right pretty basic now the thing is I

1663
01:46:18,800 --> 01:46:21,800
believe

1664
01:46:27,340 --> 01:46:39,119
I don't remember if there's a refinement

1665
01:46:34,779 --> 01:46:42,309
call in here I don't think there is I

1666
01:46:39,118 --> 01:46:53,500
think you just refine it yourself if you

1667
01:46:42,310 --> 01:46:57,039
want to so I don't remember if there's a

1668
01:46:53,500 --> 01:46:58,270
refinement call but let me explain what

1669
01:46:57,039 --> 01:46:59,618
that is and then I'll explain why I

1670
01:46:58,270 --> 01:47:07,119
don't think we care in this particular

1671
01:46:59,618 --> 01:47:09,759
instance but so sometimes what happens

1672
01:47:07,118 --> 01:47:11,799
is if you do approximate computations

1673
01:47:09,760 --> 01:47:13,300
those approximate computations can be

1674
01:47:11,800 --> 01:47:14,980
followed by fix-up which will improve

1675
01:47:13,300 --> 01:47:16,389
their accuracy and sometimes you want to

1676
01:47:14,979 --> 01:47:17,979
do it if you care about getting the

1677
01:47:16,389 --> 01:47:20,800
lecture so is this cheap enough that you

1678
01:47:17,979 --> 01:47:22,388
just do it I I don't think there's any

1679
01:47:20,800 --> 01:47:24,070
refinement to be done here I think you

1680
01:47:22,389 --> 01:47:26,050
can do refinement yourself I don't know

1681
01:47:24,069 --> 01:47:28,059
if there's any point to it so I'm just

1682
01:47:26,050 --> 01:47:30,550
going to skip that part of it and we'll

1683
01:47:28,060 --> 01:47:32,409
just use the approximate in risk square

1684
01:47:30,550 --> 01:47:35,829
root here anyway

1685
01:47:32,408 --> 01:47:38,019
all right so taking a look here what we

1686
01:47:35,829 --> 01:47:43,359
want to do is push this those are that's

1687
01:47:38,020 --> 01:47:44,889
a scalar so we want to smush those

1688
01:47:43,359 --> 01:47:53,079
scalars first and then multiply by the

1689
01:47:44,889 --> 01:48:00,069
vector cannot convert - that's a good

1690
01:47:53,079 --> 01:48:02,229
point and there we go alright so taking

1691
01:48:00,069 --> 01:48:06,750
a look here we don't have this anymore

1692
01:48:02,229 --> 01:48:09,250
we only have the aprox normalizer zero

1693
01:48:06,750 --> 01:48:14,408
and then the inner product here is

1694
01:48:09,250 --> 01:48:17,079
result an N n is not load opt up so we

1695
01:48:14,408 --> 01:48:23,170
need that to be bigger right we need

1696
01:48:17,079 --> 01:48:30,640
that to be replicated so we can do the

1697
01:48:23,170 --> 01:48:32,770
wide product so

1698
01:48:30,640 --> 01:48:34,469
and we need the inner product here

1699
01:48:32,770 --> 01:48:43,270
what's gonna produce a float again -

1700
01:48:34,469 --> 01:48:46,710
this is this is just zero and off we go

1701
01:48:43,270 --> 01:48:53,800
so again this is also a mask situation

1702
01:48:46,710 --> 01:48:59,340
so this is just going to be a a mask and

1703
01:48:53,800 --> 01:48:59,340
then we need to select based on the mask

1704
01:49:04,260 --> 01:49:09,719
and now we're wide

1705
01:49:25,380 --> 01:49:30,060
so yeah in theory if we didn't mess

1706
01:49:28,199 --> 01:49:31,349
anything up that's the sample hemisphere

1707
01:49:30,060 --> 01:49:33,900
function right and it's pretty

1708
01:49:31,350 --> 01:49:35,910
straightforward and now it's operating

1709
01:49:33,899 --> 01:49:38,819
in Cindy instead of what it was doing

1710
01:49:35,909 --> 01:49:41,849
before which is not operating in Cindy

1711
01:49:38,819 --> 01:49:43,170
again we want us we want to go through

1712
01:49:41,850 --> 01:49:45,060
this after we're kind of done with it

1713
01:49:43,170 --> 01:49:47,190
and and do some checking to make sure

1714
01:49:45,060 --> 01:49:48,690
that we're still doing reasonable stuff

1715
01:49:47,189 --> 01:49:50,609
everywhere we never really checked it in

1716
01:49:48,689 --> 01:49:53,129
the first place so we would like to do

1717
01:49:50,609 --> 01:49:55,589
that eventually so the last thing I'll

1718
01:49:53,130 --> 01:49:56,730
do is I'll just drop this down into and

1719
01:49:55,590 --> 01:49:58,619
you know what I don't really care about

1720
01:49:56,729 --> 01:50:00,689
this anymore we'll put the sample table

1721
01:49:58,619 --> 01:50:02,880
back in will write it new because it

1722
01:50:00,689 --> 01:50:04,349
would ask me new anyway so I'm gonna get

1723
01:50:02,880 --> 01:50:05,819
rid of the sample hemisphere function

1724
01:50:04,350 --> 01:50:08,760
here and I'm just gonna go ahead and

1725
01:50:05,819 --> 01:50:11,729
drop that in so that we can see it in

1726
01:50:08,760 --> 01:50:13,619
place which is right here and what I'd

1727
01:50:11,729 --> 01:50:31,409
like to do there is yeah just go ahead

1728
01:50:13,619 --> 01:50:34,920
and take this value here like so and so

1729
01:50:31,409 --> 01:50:36,809
narrow we've got these here we're not

1730
01:50:34,920 --> 01:50:38,609
using the x axis and the y x at the

1731
01:50:36,810 --> 01:50:41,789
moment we're only using the sample point

1732
01:50:38,609 --> 01:50:47,969
and so what I can do is I can just load

1733
01:50:41,789 --> 01:50:49,680
that up here and leave that be it's

1734
01:50:47,970 --> 01:50:51,090
never gonna change doesn't it doesn't

1735
01:50:49,680 --> 01:50:52,860
change in the loop because the sample

1736
01:50:51,090 --> 01:50:56,819
point is the sample point it's normal

1737
01:50:52,859 --> 01:50:59,939
it's never different so when we actually

1738
01:50:56,819 --> 01:51:07,019
do this hit check here we can do sample

1739
01:50:59,939 --> 01:51:09,679
point in like so and I think that's

1740
01:51:07,020 --> 01:51:09,680
that's it

1741
01:51:29,390 --> 01:51:39,260
I agree and so this Delta and that tilta

1742
01:51:37,340 --> 01:51:43,430
hardened out the same Delta anymore I

1743
01:51:39,260 --> 01:51:48,550
can actually get rid of this anyway get

1744
01:51:43,430 --> 01:51:48,550
down there and so that seems fine

1745
01:51:52,389 --> 01:51:57,639
and again so now we're just like further

1746
01:51:54,789 --> 01:51:59,710
welding that routine and I think we're

1747
01:51:57,639 --> 01:52:02,980
now in pretty good shape 70 wives right

1748
01:51:59,710 --> 01:52:06,130
so we're now running our lighting at

1749
01:52:02,979 --> 01:52:08,589
actually well above 30 frames a second

1750
01:52:06,130 --> 01:52:11,889
so that's pretty nice right whereas

1751
01:52:08,590 --> 01:52:14,230
before we were running at it maybe 15

1752
01:52:11,889 --> 01:52:16,750
frames a second and we're actually

1753
01:52:14,229 --> 01:52:19,178
closing in on 60 frames a second

1754
01:52:16,750 --> 01:52:24,340
lighting CPU side right not using any

1755
01:52:19,179 --> 01:52:26,828
GPU for that at all uh so I think you

1756
01:52:24,340 --> 01:52:28,630
know that's that that this could work

1757
01:52:26,828 --> 01:52:31,359
out you know maybe we'll just leave the

1758
01:52:28,630 --> 01:52:35,078
lighting on the CPU and just leave it

1759
01:52:31,359 --> 01:52:37,589
that way for the foreseeable future and

1760
01:52:35,078 --> 01:52:40,569
if someday we want to convert it to GPU

1761
01:52:37,590 --> 01:52:41,920
afterwards cuz you know once once we if

1762
01:52:40,569 --> 01:52:43,179
we have something that works we can

1763
01:52:41,920 --> 01:52:45,550
develop the rest of the game with it

1764
01:52:43,179 --> 01:52:48,819
right and then we can always come back

1765
01:52:45,550 --> 01:52:50,289
and decide to do a GPU version later if

1766
01:52:48,819 --> 01:52:54,578
we decide that that's what we needed

1767
01:52:50,289 --> 01:52:57,868
right so I think we're we're okay with

1768
01:52:54,578 --> 01:52:57,868
that I'm gonna go ahead and go to Q&amp;A

1769
01:53:11,420 --> 01:53:16,420
and yeah if anyone has any questions

1770
01:53:14,000 --> 01:53:23,270
about what we did

1771
01:53:16,420 --> 01:53:27,529
off we go and I saw someone asking about

1772
01:53:23,270 --> 01:53:35,240
how much CPU it takes to do so if we

1773
01:53:27,529 --> 01:53:40,189
take a look here at the CPU cost here's

1774
01:53:35,239 --> 01:53:50,779
how much CPU we're taking and you can

1775
01:53:40,189 --> 01:53:52,939
see if we go to the profile so so

1776
01:53:50,779 --> 01:53:57,609
actually the frame display is taking

1777
01:53:52,939 --> 01:53:57,609
quite a bit of time there

1778
01:54:01,380 --> 01:54:05,029
so actually yeah

1779
01:54:09,029 --> 01:54:12,329
you can see we finished you know the

1780
01:54:10,859 --> 01:54:13,380
lighting gets finished actually pretty

1781
01:54:12,329 --> 01:54:16,050
quick

1782
01:54:13,380 --> 01:54:19,020
it doesn't even yeah it's not even

1783
01:54:16,050 --> 01:54:21,060
pushing that limit yet so we could we

1784
01:54:19,020 --> 01:54:25,920
can we're within earshot of 16 I think

1785
01:54:21,060 --> 01:54:28,170
actually just looking at this we need a

1786
01:54:25,920 --> 01:54:29,340
framerate counter that will we need to

1787
01:54:28,170 --> 01:54:31,079
put in a frame encounter that will work

1788
01:54:29,340 --> 01:54:33,779
if we turn off profiling and stuff like

1789
01:54:31,079 --> 01:54:35,250
that right because for all I know we

1790
01:54:33,779 --> 01:54:36,569
actually are running at 60 frames a

1791
01:54:35,250 --> 01:54:39,930
second if we turn off all the rest of

1792
01:54:36,569 --> 01:54:42,750
this stuff so if we went you know full

1793
01:54:39,930 --> 01:54:46,970
bore I don't know how much overhead

1794
01:54:42,750 --> 01:54:46,970
there is at the moment with other stuff

1795
01:54:50,390 --> 01:54:54,000
because we don't have a like once we

1796
01:54:52,979 --> 01:54:56,059
turn everything off we don't get a

1797
01:54:54,000 --> 01:54:59,489
framerate counter you need like a low

1798
01:54:56,060 --> 01:55:01,410
overhead very simplistic framerate

1799
01:54:59,489 --> 01:55:03,029
counter so we just know what our frame

1800
01:55:01,409 --> 01:55:04,800
rate is when we were in full bore mode

1801
01:55:03,029 --> 01:55:06,659
like a frame rate counter that could

1802
01:55:04,800 --> 01:55:08,430
ship with the game so users could check

1803
01:55:06,659 --> 01:55:10,199
their frame rate that kind of a frame

1804
01:55:08,430 --> 01:55:11,880
rate counter not one that relies on our

1805
01:55:10,199 --> 01:55:16,760
debug system doing all kinds of weird

1806
01:55:11,880 --> 01:55:19,829
stuff excuse me

1807
01:55:16,760 --> 01:55:21,270
but anyway yeah like you know we

1808
01:55:19,829 --> 01:55:30,269
definitely need to reduce a little more

1809
01:55:21,270 --> 01:55:33,680
flicker but it's it's pretty cool this

1810
01:55:30,270 --> 01:55:35,850
is getting pretty cool in my opinion and

1811
01:55:33,680 --> 01:55:38,340
the other thing I guess we should

1812
01:55:35,850 --> 01:55:40,980
remember is that the flicker is worse

1813
01:55:38,340 --> 01:55:43,860
the worst flicker will be when there's

1814
01:55:40,979 --> 01:55:45,779
the least lights in the scene so a

1815
01:55:43,859 --> 01:55:47,279
single light moving around illuminating

1816
01:55:45,779 --> 01:55:55,229
the whole scene is actually the worst

1817
01:55:47,279 --> 01:55:57,769
possible case for flicker so you know

1818
01:55:55,229 --> 01:55:57,769
there's that

1819
01:56:06,510 --> 01:56:15,340
what version control system do you use

1820
01:56:09,630 --> 01:56:19,480
so i on the for this the version control

1821
01:56:15,340 --> 01:56:21,909
system is actually github because people

1822
01:56:19,479 --> 01:56:25,000
who peer to the game get like access to

1823
01:56:21,909 --> 01:56:28,029
the github they people wanted that so it

1824
01:56:25,000 --> 01:56:31,659
checks into github every day after we

1825
01:56:28,029 --> 01:56:33,340
finish but that's only for this project

1826
01:56:31,659 --> 01:56:34,779
on my own personal projects i have a

1827
01:56:33,340 --> 01:56:39,579
custom version control system that i

1828
01:56:34,779 --> 01:56:41,469
wrote and that's what i use obviously

1829
01:56:39,579 --> 01:56:51,238
don't use github my development machines

1830
01:56:41,470 --> 01:56:54,460
are not connected to the internet so nee

1831
01:56:51,238 --> 01:56:57,399
lasts a question he well wasn't really a

1832
01:56:54,460 --> 01:57:00,579
question it was a request he asked if we

1833
01:56:57,399 --> 01:57:05,139
could look at the profile and yes we can

1834
01:57:00,579 --> 01:57:06,939
I guess if we don't have handmade slow

1835
01:57:05,140 --> 01:57:08,950
on we won't get a debug still have to

1836
01:57:06,939 --> 01:57:13,059
turn handmade slow on as well well I oh

1837
01:57:08,949 --> 01:57:16,510
no I won't so okay I can I can take a

1838
01:57:13,060 --> 01:57:18,489
look at at this with using that so if I

1839
01:57:16,510 --> 01:57:20,500
put the thread view on what do you want

1840
01:57:18,488 --> 01:57:22,659
to know was if we drop the rake

1841
01:57:20,500 --> 01:57:27,310
countdown what happens here profile wise

1842
01:57:22,659 --> 01:57:29,909
thread you know thread wise so you know

1843
01:57:27,310 --> 01:57:35,020
here's what it looks like

1844
01:57:29,909 --> 01:57:42,488
let me go ahead and inside the lending

1845
01:57:35,020 --> 01:57:44,820
code drop the breakout down to four we

1846
01:57:42,488 --> 01:57:44,819
got it

1847
01:57:48,869 --> 01:57:55,349
so dropping the Ray count down to four

1848
01:57:52,550 --> 01:57:57,630
so yeah I think it's just we're miss

1849
01:57:55,350 --> 01:58:01,640
we're just missing the 16 frames a

1850
01:57:57,630 --> 01:58:01,640
second there I guess is what's happening

1851
01:58:01,729 --> 01:58:06,750
so the frame with like you know if we

1852
01:58:05,069 --> 01:58:10,799
turn vsync off I guess is what I'm

1853
01:58:06,750 --> 01:58:12,600
saying so let's suppose we turn vsync

1854
01:58:10,800 --> 01:58:15,140
off I suppose we would see what would

1855
01:58:12,600 --> 01:58:15,140
happen there

1856
01:58:30,578 --> 01:58:35,889
so here's the swap owner of a call if I

1857
01:58:33,729 --> 01:58:39,789
was to change that to zero so that we

1858
01:58:35,889 --> 01:58:42,789
just lets it swap immediately you know

1859
01:58:39,789 --> 01:58:44,349
that would I suppose tell us what was

1860
01:58:42,789 --> 01:58:46,618
going on there I don't know maybe it

1861
01:58:44,349 --> 01:58:46,619
wouldn't

1862
01:58:59,510 --> 01:59:04,150
you know that's just kind of weird so it

1863
01:59:01,639 --> 01:59:04,150
looks like

1864
01:59:13,319 --> 01:59:20,689
I don't know why that's not showing all

1865
01:59:15,390 --> 01:59:20,690
of our frames there that's weird

1866
01:59:21,510 --> 01:59:25,159
I'm not sure why

1867
01:59:32,010 --> 01:59:39,750
I'm not sure why that's happening it

1868
01:59:37,769 --> 01:59:50,489
does it looks like just the rendering

1869
01:59:39,750 --> 01:59:52,319
actually takes that time I mean that's

1870
01:59:50,488 --> 01:59:56,598
just the slowness of sampling the

1871
01:59:52,319 --> 02:00:01,078
lighting I guess yeah I mean look so

1872
01:59:56,599 --> 02:00:07,860
we're running at 16 under 16

1873
02:00:01,078 --> 02:00:14,399
milliseconds if we just don't draw if we

1874
02:00:07,859 --> 02:00:19,969
just don't draw the world we're running

1875
02:00:14,399 --> 02:00:19,969
it the lighting just fine right

1876
02:00:23,689 --> 02:00:28,039
so if you take a look at that profile

1877
02:00:31,829 --> 02:00:39,119
you know we're a ok so it looks like the

1878
02:00:36,689 --> 02:00:40,919
problem comes when you actually need to

1879
02:00:39,119 --> 02:00:42,689
render you know what it's actually

1880
02:00:40,920 --> 02:00:46,140
sampling the lighting that that pixel

1881
02:00:42,689 --> 02:00:47,729
shader I guess is just too slow which is

1882
02:00:46,140 --> 02:00:51,740
fine because we could speed that thing

1883
02:00:47,729 --> 02:00:51,739
up that's not going to be a huge issue

1884
02:00:52,819 --> 02:00:59,059
to make that thing faster

1885
02:00:54,989 --> 02:01:03,149
there's tons stuff we can do for that so

1886
02:00:59,060 --> 02:01:05,850
yeah I don't know like if we want to

1887
02:01:03,149 --> 02:01:07,469
check out the actual slowness per ray I

1888
02:01:05,850 --> 02:01:15,410
guess you just crank the ray count up

1889
02:01:07,470 --> 02:01:15,409
and get rid of the drawing you know so

1890
02:01:18,590 --> 02:01:23,940
you know then then we can actually see

1891
02:01:21,149 --> 02:01:28,439
you know that's should be dominated

1892
02:01:23,939 --> 02:01:31,369
entirely you know by the light

1893
02:01:28,439 --> 02:01:31,369
computation time

1894
02:01:54,170 --> 02:01:57,920
so yeah

1895
02:02:16,429 --> 02:02:21,149
nice PC you cast the input value in the

1896
02:02:18,988 --> 02:02:22,138
youth reach Forex letter to a float why

1897
02:02:21,149 --> 02:02:26,279
is that

1898
02:02:22,139 --> 02:02:35,699
that's just C syntax for forcing it not

1899
02:02:26,279 --> 02:02:38,729
to a adult or the value so if you take a

1900
02:02:35,698 --> 02:02:42,960
look at what's going on here you're

1901
02:02:38,729 --> 02:02:50,848
passing in au 32 but there is no set

1902
02:02:42,960 --> 02:02:54,719
call that sets a sim D register to a u

1903
02:02:50,849 --> 02:02:56,429
32 this is purely because Intel's

1904
02:02:54,719 --> 02:02:58,289
intrinsics are kind of dumb the

1905
02:02:56,429 --> 02:03:01,618
processor doesn't care the processor is

1906
02:02:58,289 --> 02:03:03,539
going to load bits in so the unfortunate

1907
02:03:01,618 --> 02:03:07,618
part is Intel just didn't decide to do

1908
02:03:03,539 --> 02:03:10,979
the intrinsics right so they have mm set

1909
02:03:07,618 --> 02:03:14,039
and you can see the set of calls here

1910
02:03:10,979 --> 02:03:18,299
that you use and what you'll notice is

1911
02:03:14,039 --> 02:03:28,460
for for things that are going to use an

1912
02:03:18,300 --> 02:03:28,460
m1 28 why do I not see the PS calls here

1913
02:03:32,859 --> 02:03:41,889
where are the set calls there we go I

1914
02:03:38,300 --> 02:03:43,820
didn't have sse one checked that's all

1915
02:03:41,890 --> 02:03:45,590
so if you look at all the values that

1916
02:03:43,819 --> 02:03:49,359
are if you look at all the things that

1917
02:03:45,590 --> 02:03:52,850
are available here right you can see the

1918
02:03:49,359 --> 02:03:55,729
options that you have and what you'll

1919
02:03:52,850 --> 02:03:57,770
notice is that if you look at the

1920
02:03:55,729 --> 02:04:01,309
intrinsics you've got for producing an

1921
02:03:57,770 --> 02:04:04,220
EM 128 which is the floating point type

1922
02:04:01,310 --> 02:04:06,440
in the C compiler you can see that

1923
02:04:04,220 --> 02:04:08,480
you've got like set R which sets them in

1924
02:04:06,439 --> 02:04:11,000
the reverse order you've got set 1 which

1925
02:04:08,479 --> 02:04:14,599
sets them in the forward order and so on

1926
02:04:11,000 --> 02:04:16,729
but they all take floats now there is a

1927
02:04:14,600 --> 02:04:18,770
call which takes integers so if you want

1928
02:04:16,729 --> 02:04:21,199
to load it and you could here it is

1929
02:04:18,770 --> 02:04:24,140
right set 1 epi32 now that's call we'd

1930
02:04:21,199 --> 02:04:26,000
like to make pass an integer the

1931
02:04:24,140 --> 02:04:29,750
unfortunate part is it returns a

1932
02:04:26,000 --> 02:04:32,659
different type it returns an M 128 I so

1933
02:04:29,750 --> 02:04:35,600
in order to actually put that into our M

1934
02:04:32,659 --> 02:04:38,829
128 these are the same concept to the

1935
02:04:35,600 --> 02:04:41,329
CPU they're both just the register but

1936
02:04:38,829 --> 02:04:44,090
what ends up happening is we would have

1937
02:04:41,329 --> 02:04:48,619
to call a cast instruction so we then

1938
02:04:44,090 --> 02:04:51,470
need to do a cast to convert our I so

1939
02:04:48,619 --> 02:04:54,380
you can see here convert our I value to

1940
02:04:51,470 --> 02:04:58,130
a ray right it's purely C type nonsense

1941
02:04:54,380 --> 02:05:00,140
right so when I did instead is I just

1942
02:04:58,130 --> 02:05:02,569
said hey look pretend the bits I'm

1943
02:05:00,140 --> 02:05:04,340
giving you a float they're not but

1944
02:05:02,569 --> 02:05:08,299
pretend they are mister compiler and

1945
02:05:04,340 --> 02:05:11,270
please load them and then it will so

1946
02:05:08,300 --> 02:05:13,640
that's what this is doing it's just you

1947
02:05:11,270 --> 02:05:16,550
know basically telling it to reinterpret

1948
02:05:13,640 --> 02:05:19,190
this if you use like C++ style casting

1949
02:05:16,550 --> 02:05:21,020
you can use an actual cast declaration

1950
02:05:19,189 --> 02:05:22,699
for that you know like reinterpret cast

1951
02:05:21,020 --> 02:05:25,910
and static cast those kinds if you use

1952
02:05:22,699 --> 02:05:27,380
those but I don't care for those we just

1953
02:05:25,909 --> 02:05:33,139
introduce complexity that doesn't

1954
02:05:27,380 --> 02:05:34,940
actually do anything how does a the mask

1955
02:05:33,140 --> 02:05:37,520
replace an if in the Simbi instructions

1956
02:05:34,939 --> 02:05:39,409
so it replaces an like this we've gone

1957
02:05:37,520 --> 02:05:41,300
over this before so you can actually

1958
02:05:39,409 --> 02:05:42,949
search for this in the hand made hero

1959
02:05:41,300 --> 02:05:44,270
episode archive if you want but it's

1960
02:05:42,949 --> 02:05:45,039
pretty quick to explain so I'll just

1961
02:05:44,270 --> 02:05:49,160
tell you

1962
02:05:45,039 --> 02:05:50,149
so the way that sim D works and the

1963
02:05:49,159 --> 02:05:51,198
reason I didn't go over this for this

1964
02:05:50,149 --> 02:05:52,549
because we've gone over it multiple

1965
02:05:51,198 --> 02:05:56,149
times before so you can go back and read

1966
02:05:52,550 --> 02:06:00,260
this if you want so we've got lane zero

1967
02:05:56,149 --> 02:06:04,059
lane one lane two in lane three okay so

1968
02:06:00,260 --> 02:06:06,890
normally you have something like a float

1969
02:06:04,060 --> 02:06:11,780
which we call an f32 and handmade here

1970
02:06:06,890 --> 02:06:16,449
oh that's 32 bits and this represents

1971
02:06:11,779 --> 02:06:19,909
one value like 2.3 F right or something

1972
02:06:16,448 --> 02:06:22,339
well in a Sindhi register we've got four

1973
02:06:19,909 --> 02:06:24,529
of them so we've got four floating point

1974
02:06:22,340 --> 02:06:29,420
values each of them at 32 bits right so

1975
02:06:24,529 --> 02:06:33,079
we've got 32 32 32 32 so in toto we have

1976
02:06:29,420 --> 02:06:36,529
128 bits in one register that packs for

1977
02:06:33,079 --> 02:06:38,050
flows together for 0.32 point one nine

1978
02:06:36,529 --> 02:06:41,869
point zero

1979
02:06:38,050 --> 02:06:43,100
eleven point seven I don't know right so

1980
02:06:41,869 --> 02:06:48,050
he's got some floats in here

1981
02:06:43,100 --> 02:06:50,469
these are floating point values now what

1982
02:06:48,050 --> 02:06:52,880
happens inside a normal processing

1983
02:06:50,469 --> 02:06:55,939
operation when we were using conditional

1984
02:06:52,880 --> 02:06:59,980
branches is we say something like okay x

1985
02:06:55,939 --> 02:07:05,119
equals two point three F but if

1986
02:06:59,979 --> 02:07:09,859
something happens right then you know x

1987
02:07:05,119 --> 02:07:13,250
equals four point seven instead so that

1988
02:07:09,859 --> 02:07:15,469
would be fine but once we go Cindy we

1989
02:07:13,250 --> 02:07:17,659
can't do a conditional branch because

1990
02:07:15,469 --> 02:07:19,698
what this was doing in the code was it

1991
02:07:17,659 --> 02:07:21,260
was literally skipping this instruction

1992
02:07:19,698 --> 02:07:24,189
it was telling you the processor to just

1993
02:07:21,260 --> 02:07:26,930
jump right over it well since this if

1994
02:07:24,189 --> 02:07:29,689
conditional will evaluate potentially

1995
02:07:26,930 --> 02:07:31,940
differently for all four lanes we can't

1996
02:07:29,689 --> 02:07:33,829
skip the assignment because if we did

1997
02:07:31,939 --> 02:07:36,229
the ones that were true wouldn't happen

1998
02:07:33,829 --> 02:07:37,430
and the ones that were false so all the

1999
02:07:36,229 --> 02:07:38,569
lanes that were false would end up at

2000
02:07:37,430 --> 02:07:39,949
the right value all the lanes that were

2001
02:07:38,569 --> 02:07:43,519
true wouldn't up the wrong values the

2002
02:07:39,948 --> 02:07:46,849
end so what we do instead as we produce

2003
02:07:43,520 --> 02:07:50,620
a mask that is the result of this

2004
02:07:46,850 --> 02:07:50,620
conditional slotted into lanes

2005
02:07:52,579 --> 02:07:59,989
and what that mask has is it just has

2006
02:07:55,100 --> 02:08:02,539
exactly the same thing 128 bits and it

2007
02:07:59,989 --> 02:08:06,319
just has ones for all the true values

2008
02:08:02,539 --> 02:08:09,019
and zeros for all of the false values

2009
02:08:06,319 --> 02:08:11,779
right so if the conditional would have

2010
02:08:09,020 --> 02:08:15,230
evaluated to true on a particular Lane

2011
02:08:11,779 --> 02:08:16,909
that Lane gets ones all ones and if the

2012
02:08:15,229 --> 02:08:20,299
conditioner would have have evaluated to

2013
02:08:16,909 --> 02:08:22,309
false gets all zeros and hey this

2014
02:08:20,300 --> 02:08:24,050
instruction set was designed together so

2015
02:08:22,310 --> 02:08:26,630
as you would expect the conditional

2016
02:08:24,050 --> 02:08:28,699
instructions in sse actually produce

2017
02:08:26,630 --> 02:08:30,680
this exact mask so we don't have to do

2018
02:08:28,699 --> 02:08:33,079
any work to make it would we just do a

2019
02:08:30,680 --> 02:08:37,820
comp less than or whatever we get a mask

2020
02:08:33,079 --> 02:08:40,010
out of it so then what we have to do is

2021
02:08:37,819 --> 02:08:42,049
just bitwise operations to produce the

2022
02:08:40,010 --> 02:08:46,820
result we wanted we want a result here

2023
02:08:42,050 --> 02:08:48,529
right and we want to take two things

2024
02:08:46,819 --> 02:08:51,529
like let's say we were doing exactly

2025
02:08:48,529 --> 02:08:54,170
this right so we want to take two things

2026
02:08:51,529 --> 02:08:56,119
where we had some other values here you

2027
02:08:54,170 --> 02:09:00,590
know we've got four point seven that was

2028
02:08:56,119 --> 02:09:03,920
supposed to be set so we have an input

2029
02:09:00,590 --> 02:09:05,720
value and we have like our new value

2030
02:09:03,920 --> 02:09:07,310
here four by seven four seven right and

2031
02:09:05,720 --> 02:09:09,619
all we're gonna do is we're just going

2032
02:09:07,310 --> 02:09:12,350
to do an operation a bitwise operation

2033
02:09:09,619 --> 02:09:15,439
to produce a result so that we get this

2034
02:09:12,350 --> 02:09:17,060
value in the case of the false and this

2035
02:09:15,439 --> 02:09:18,589
value in the case of the true well what

2036
02:09:17,060 --> 02:09:20,480
would that be it's pretty

2037
02:09:18,590 --> 02:09:23,840
straightforward right all we have to do

2038
02:09:20,479 --> 02:09:26,509
is or these two things together after

2039
02:09:23,840 --> 02:09:30,100
ending each respective one with the mask

2040
02:09:26,510 --> 02:09:32,750
value in the correct way so to preserve

2041
02:09:30,100 --> 02:09:35,539
values in the input we would want to end

2042
02:09:32,750 --> 02:09:38,239
with the opposite of the mask because if

2043
02:09:35,539 --> 02:09:40,699
the mass was one we want to take the new

2044
02:09:38,239 --> 02:09:44,420
value so we want to knock out all of the

2045
02:09:40,699 --> 02:09:47,029
values here where there are ones in the

2046
02:09:44,420 --> 02:09:51,319
mask so that's why we did an and not on

2047
02:09:47,029 --> 02:09:55,009
the input on the first value we call

2048
02:09:51,319 --> 02:09:56,239
this value a and that pertain for the

2049
02:09:55,010 --> 02:09:57,980
new value we just want to add with the

2050
02:09:56,239 --> 02:09:59,539
mask directly because wherever its zeros

2051
02:09:57,979 --> 02:10:01,159
we want to knock out wherever it's once

2052
02:09:59,539 --> 02:10:04,010
we want to keep so we just do a regular

2053
02:10:01,159 --> 02:10:05,859
and with the master the new then we

2054
02:10:04,010 --> 02:10:08,110
order those two together and only

2055
02:10:05,859 --> 02:10:09,939
one of them has survived because one got

2056
02:10:08,109 --> 02:10:11,948
him and and one got a man not so only

2057
02:10:09,939 --> 02:10:13,779
one of these two values didn't get

2058
02:10:11,948 --> 02:10:15,488
cleared to zero so then we just order

2059
02:10:13,779 --> 02:10:17,259
the bits together and we get whichever

2060
02:10:15,488 --> 02:10:18,849
one of them wasn't in the result and

2061
02:10:17,260 --> 02:10:22,929
that happens for every Lane separately

2062
02:10:18,850 --> 02:10:25,179
right so that's how we do a conditional

2063
02:10:22,929 --> 02:10:28,539
essentially what we do is we run both

2064
02:10:25,179 --> 02:10:31,149
sets of code the if and the else right

2065
02:10:28,539 --> 02:10:33,850
we run both sets of code and we just

2066
02:10:31,149 --> 02:10:36,039
keep whichever part we want based on the

2067
02:10:33,850 --> 02:10:37,690
mask value and like I said we went over

2068
02:10:36,039 --> 02:10:39,939
this and a lot more value back a lot

2069
02:10:37,689 --> 02:10:41,710
more detail back when we talked about

2070
02:10:39,939 --> 02:10:44,859
Cindy originally so if you want kind of

2071
02:10:41,710 --> 02:10:47,500
a slower walk through you can get it but

2072
02:10:44,859 --> 02:10:51,969
the idea is just to use that mask so you

2073
02:10:47,500 --> 02:11:04,050
just say you know the result always is

2074
02:10:51,969 --> 02:11:04,050
equal to a and not mask or B and mask

2075
02:11:05,609 --> 02:11:18,158
right now this is a fundamental Cindy

2076
02:11:09,010 --> 02:11:22,020
operation it's usually called select at

2077
02:11:18,158 --> 02:11:25,529
least that's what I usually call it and

2078
02:11:22,020 --> 02:11:27,489
you may ask why isn't that just in there

2079
02:11:25,529 --> 02:11:30,550
the answer is because the ternary

2080
02:11:27,488 --> 02:11:33,099
operation it requires an A a B and a

2081
02:11:30,550 --> 02:11:37,480
mask and SSC doesn't have ternary

2082
02:11:33,100 --> 02:11:39,340
operations really uh so what ended up

2083
02:11:37,479 --> 02:11:43,029
happening was it just wasn't in here at

2084
02:11:39,340 --> 02:11:48,750
that but it does eventually come in

2085
02:11:43,029 --> 02:11:48,750
later here

2086
02:11:56,569 --> 02:12:00,369
I don't remember where it is

2087
02:12:01,590 --> 02:12:04,940
now do you remember what it's called

2088
02:12:18,350 --> 02:12:24,410
I I never use it because it was like

2089
02:12:21,140 --> 02:12:26,180
sse4 or something which I don't use soon

2090
02:12:24,409 --> 02:12:28,250
I think the installed base will

2091
02:12:26,180 --> 02:12:32,570
basically always have it so I may start

2092
02:12:28,250 --> 02:12:34,850
using it but I'm sorry I just I I'm

2093
02:12:32,569 --> 02:12:37,299
blanking on the name of it but it's

2094
02:12:34,850 --> 02:12:37,300
there

2095
02:12:46,500 --> 02:12:50,359
it's there somewhere

2096
02:13:01,389 --> 02:13:13,828
I thought it was there somewhere

2097
02:13:18,479 --> 02:13:25,058
here's someone suggesting a better one

2098
02:13:21,158 --> 02:13:28,328
which is an XOR of the end and the XOR I

2099
02:13:25,059 --> 02:13:31,659
don't know that's actually true but

2100
02:13:28,328 --> 02:13:37,859
that's not what I want to know I just

2101
02:13:31,658 --> 02:13:37,859
want to know where that SSE select was

2102
02:13:43,349 --> 02:13:54,659
I think Fabien wet

2103
02:13:52,498 --> 02:13:59,728
wait I totally spelled his name wrong

2104
02:13:54,658 --> 02:14:02,608
there had it on his reference didn't I

2105
02:13:59,729 --> 02:14:03,659
seem to remember it being in here I'm

2106
02:14:02,609 --> 02:14:07,649
just trying to think of some code that

2107
02:14:03,658 --> 02:14:10,368
I've seen that had it in there so I

2108
02:14:07,649 --> 02:14:10,369
could look

2109
02:14:28,460 --> 02:14:33,670
I feel like this heaven in there

2110
02:14:36,130 --> 02:14:39,130
somewhere

2111
02:14:44,050 --> 02:14:49,320
I must be wrong about that

2112
02:14:49,719 --> 02:15:00,868
I blend blend that's what they called it

2113
02:14:57,328 --> 02:15:00,868
that's what I'm thinking

2114
02:15:07,680 --> 02:15:10,980
or not

2115
02:15:19,270 --> 02:15:24,690
oh come I can't get that

2116
02:15:36,569 --> 02:15:41,329
P blend VB it's in there

2117
02:15:50,729 --> 02:16:00,269
Oh cuz fit manipulation was set

2118
02:15:53,939 --> 02:16:02,129
oops sorry about that so yeah so as you

2119
02:16:00,270 --> 02:16:04,650
can see the subset we return here and

2120
02:16:02,130 --> 02:16:08,039
have it sse3 doesn't have it here does

2121
02:16:04,649 --> 02:16:10,289
that but once you get up to sse4 you've

2122
02:16:08,039 --> 02:16:13,800
got blend instructions so you've got

2123
02:16:10,289 --> 02:16:15,119
blend V and that's the the phrase I

2124
02:16:13,800 --> 02:16:16,560
couldn't think of its blend I don't

2125
02:16:15,119 --> 02:16:19,470
think of it as blend I think of it

2126
02:16:16,560 --> 02:16:22,230
select but you know whatever you know

2127
02:16:19,470 --> 02:16:23,520
call call it whatever you want so this

2128
02:16:22,229 --> 02:16:27,000
is instruction which I never really get

2129
02:16:23,520 --> 02:16:33,440
to use but which does what you want this

2130
02:16:27,000 --> 02:16:33,440
is actually the instruction in question

2131
02:16:36,680 --> 02:16:45,360
you know that's how it works and I'm not

2132
02:16:40,889 --> 02:16:50,939
sure exactly how it knows what the mask

2133
02:16:45,360 --> 02:16:53,550
value is because true ternary

2134
02:16:50,940 --> 02:16:58,290
instructions I thought were only added

2135
02:16:53,549 --> 02:17:00,750
in avx-512 so I don't actually know how

2136
02:16:58,290 --> 02:17:05,040
people end VB knows this I guess I've

2137
02:17:00,750 --> 02:17:06,299
never used this instruction so if we

2138
02:17:05,040 --> 02:17:08,930
look at the actual intel architecture

2139
02:17:06,299 --> 02:17:08,929
manual

2140
02:17:24,750 --> 02:17:39,299
this is probably everything hello

2141
02:17:52,790 --> 02:17:57,960
all right so if we take a look at the

2142
02:17:55,530 --> 02:18:00,470
Intel architecture manual we should be

2143
02:17:57,959 --> 02:18:03,389
able to find you know essentially what

2144
02:18:00,469 --> 02:18:06,630
what that instruction actually does and

2145
02:18:03,389 --> 02:18:09,000
how it does it again for those of you or

2146
02:18:06,630 --> 02:18:10,649
maybe I'm familiar with this so it's

2147
02:18:09,000 --> 02:18:12,270
fret to set architectures obviously have

2148
02:18:10,649 --> 02:18:16,829
concepts of how their structures are

2149
02:18:12,270 --> 02:18:18,810
laid out and if you have instructions

2150
02:18:16,829 --> 02:18:21,000
that generally can take two registers

2151
02:18:18,809 --> 02:18:22,439
those are binary instructions if you

2152
02:18:21,000 --> 02:18:25,319
have instruction take three registers

2153
02:18:22,440 --> 02:18:28,739
those are ternary instructions and two

2154
02:18:25,319 --> 02:18:30,930
in order to say mask a and select from a

2155
02:18:28,739 --> 02:18:32,969
and B using masks see that requires

2156
02:18:30,930 --> 02:18:35,040
three instructs three registers which is

2157
02:18:32,969 --> 02:18:37,139
ternary so the question is how is it

2158
02:18:35,040 --> 02:18:40,470
doing it because I don't think they had

2159
02:18:37,139 --> 02:18:41,880
true ternary instruction encoding in SSE

2160
02:18:40,469 --> 02:18:43,559
for now maybe we'll find out that they

2161
02:18:41,880 --> 02:18:44,880
did and that will be the answer but if

2162
02:18:43,559 --> 02:18:47,219
that's not the answer then what has to

2163
02:18:44,880 --> 02:18:49,500
be true is that like oh it's a secret

2164
02:18:47,219 --> 02:18:52,590
way that it works like you always have

2165
02:18:49,500 --> 02:18:54,389
to have the mask stored in X M m0 and so

2166
02:18:52,591 --> 02:18:57,479
we always use that register as a mask

2167
02:18:54,389 --> 02:19:00,709
isn't right um so I'm just curious to

2168
02:18:57,479 --> 02:19:04,369
find out that's why I'm looking this up

2169
02:19:00,709 --> 02:19:04,369
yeah that's not gonna happen

2170
02:19:30,450 --> 02:19:33,690
all right

2171
02:19:37,559 --> 02:19:41,859
so here's the until architects remember

2172
02:19:40,059 --> 02:19:51,779
manual we know we are looking for the

2173
02:19:41,860 --> 02:19:54,159
documentation on people and V and so

2174
02:19:51,780 --> 02:20:00,760
where is why am I not seeing any

2175
02:19:54,159 --> 02:20:06,129
highlights now forget it I'm just gonna

2176
02:20:00,760 --> 02:20:11,409
go look at it directly so we know it's P

2177
02:20:06,129 --> 02:20:18,909
so it's gonna be in here so let's just

2178
02:20:11,409 --> 02:20:23,049
go grab people and V so please here's

2179
02:20:18,909 --> 02:20:25,690
people in V P blend V be uh

2180
02:20:23,049 --> 02:20:28,959
and hey it looks like I guessed

2181
02:20:25,690 --> 02:20:33,940
correctly so the answer is it just knows

2182
02:20:28,959 --> 02:20:37,209
secretly that XM m0 is the mask so it

2183
02:20:33,940 --> 02:20:40,930
take it's still a binary instruction it

2184
02:20:37,209 --> 02:20:43,839
takes XM m 1 and X mmm - so you can pick

2185
02:20:40,930 --> 02:20:46,420
a and B but the mask has to be stored in

2186
02:20:43,840 --> 02:20:48,549
register 0 which means that the compiler

2187
02:20:46,420 --> 02:20:52,329
has like a constraint on where it can

2188
02:20:48,549 --> 02:20:54,819
output that so it's register constrained

2189
02:20:52,329 --> 02:20:56,829
there where every select operation will

2190
02:20:54,819 --> 02:20:58,270
be fighting over X m m0 is the place to

2191
02:20:56,829 --> 02:21:00,250
store the masks and you know hopefully

2192
02:20:58,271 --> 02:21:02,110
that's not a big deal because usually

2193
02:21:00,250 --> 02:21:03,760
you're masking you're kind of using the

2194
02:21:02,110 --> 02:21:06,390
mask as you go and so it won't be a huge

2195
02:21:03,760 --> 02:21:11,979
deal but you know that's how that works

2196
02:21:06,389 --> 02:21:14,949
I so yeah there's there's your answer

2197
02:21:11,979 --> 02:21:17,109
I guess right simply because I kind of

2198
02:21:14,950 --> 02:21:19,540
knew that they didn't add Turner

2199
02:21:17,110 --> 02:21:21,730
instructions to later so I kind of

2200
02:21:19,540 --> 02:21:24,010
guessed they had to use a fixed register

2201
02:21:21,729 --> 02:21:25,659
and so I could have guessed 15 or I

2202
02:21:24,010 --> 02:21:27,219
could have guessed zero I guess zero

2203
02:21:25,659 --> 02:21:29,860
because I thought it probably was more

2204
02:21:27,219 --> 02:21:31,449
likely than use zero then the dead then

2205
02:21:29,860 --> 02:21:34,000
use the bottom than the top but that was

2206
02:21:31,450 --> 02:21:34,829
a purely wild guess so I just got lucky

2207
02:21:34,000 --> 02:21:37,690
on that one

2208
02:21:34,829 --> 02:21:40,149
so there you go so what you can see here

2209
02:21:37,690 --> 02:21:46,300
as well so let's take a look down here

2210
02:21:40,149 --> 02:21:48,850
so what you can see is this one starts

2211
02:21:46,299 --> 02:21:52,569
so once once you get up to

2212
02:21:48,851 --> 02:21:56,230
AVX there's it looks like they actually

2213
02:21:52,569 --> 02:21:57,880
do have turn areas here so it looks like

2214
02:21:56,229 --> 02:22:00,220
maybe you don't have to wait for avx-512

2215
02:21:57,880 --> 02:22:03,310
you can actually have the fat looks like

2216
02:22:00,220 --> 02:22:06,581
a ternary to me right xmm one two three

2217
02:22:03,310 --> 02:22:09,159
and four select byte values from XM 2 +

2218
02:22:06,581 --> 02:22:11,200
XM m 3 using masks specified in x + 4

2219
02:22:09,159 --> 02:22:13,119
and store into XM m 1 so that's actually

2220
02:22:11,200 --> 02:22:15,581
a quaternary instruction if that's

2221
02:22:13,120 --> 02:22:18,120
really the case I didn't realize they

2222
02:22:15,581 --> 02:22:21,060
had it quaternary instructions again I

2223
02:22:18,120 --> 02:22:23,230
don't ever get to program these

2224
02:22:21,060 --> 02:22:27,369
instruction sets I never get to use a

2225
02:22:23,229 --> 02:22:29,171
vxr8 VIX - someday soon I will you know

2226
02:22:27,370 --> 02:22:38,230
it's you'll be able to ship games on a

2227
02:22:29,171 --> 02:22:40,800
VX soon I would think you don't know

2228
02:22:38,229 --> 02:22:40,800
where we're at on that

2229
02:22:59,859 --> 02:23:09,920
so I guess I don't know where to get

2230
02:23:04,728 --> 02:23:20,539
that data oh here we go we can see items

2231
02:23:09,920 --> 02:23:24,648
here so so maybe one of these has it

2232
02:23:20,540 --> 02:23:28,609
here we go here we go here we go uh so

2233
02:23:24,648 --> 02:23:30,469
it looks like you know sse3 is becoming

2234
02:23:28,609 --> 02:23:34,640
a really safe bet right doesn't look

2235
02:23:30,469 --> 02:23:38,510
like anyone in the recent times was

2236
02:23:34,639 --> 02:23:39,889
coming on Steam with those sse4 looking

2237
02:23:38,510 --> 02:23:41,689
pretty good so I could probably start

2238
02:23:39,889 --> 02:23:44,299
using that blend v instruction and not

2239
02:23:41,689 --> 02:23:48,170
really worry about it right

2240
02:23:44,299 --> 02:23:52,429
AVX you know looking pretty good at

2241
02:23:48,170 --> 02:23:57,318
ninety percent not too bad uh I don't

2242
02:23:52,430 --> 02:24:06,738
know about avx2 cuz they're not showing

2243
02:23:57,318 --> 02:24:10,430
it here so I'm not sure how to know that

2244
02:24:06,738 --> 02:24:13,368
one but AVX is looking kind of good

2245
02:24:10,430 --> 02:24:15,380
right like I could imagine saying all

2246
02:24:13,369 --> 02:24:18,800
right let's just go EDX go eight wide

2247
02:24:15,379 --> 02:24:20,238
why not right if everyone's got it then

2248
02:24:18,799 --> 02:24:23,509
there's no reason not to go eight wide

2249
02:24:20,238 --> 02:24:27,648
and that would double our Ray count if

2250
02:24:23,510 --> 02:24:30,139
we went eight wide right so that would

2251
02:24:27,648 --> 02:24:31,879
be kind of nice too I'm surprised to see

2252
02:24:30,139 --> 02:24:33,439
that number that high I'm a little

2253
02:24:31,879 --> 02:24:38,898
concerned that maybe that's not very

2254
02:24:33,439 --> 02:24:44,840
accurate but who knows maybe people are

2255
02:24:38,898 --> 02:24:47,658
updating their machines so I so yeah you

2256
02:24:44,840 --> 02:24:52,670
know it looks like sse4 is definitely on

2257
02:24:47,658 --> 02:24:55,010
the table it's getting down to the noise

2258
02:24:52,670 --> 02:24:57,430
it looks like there so I don't know just

2259
02:24:55,010 --> 02:24:57,430
something think about

2260
02:24:58,909 --> 02:25:05,369
and - thank you - Fabien for using that

2261
02:25:02,728 --> 02:25:08,929
blend construction and so we could

2262
02:25:05,370 --> 02:25:08,930
remember what it's called

2263
02:25:22,879 --> 02:25:26,579
that's cool but why does the light

2264
02:25:24,870 --> 02:25:29,579
flicker even when the cube is not moving

2265
02:25:26,579 --> 02:25:32,129
it's because of the sampling right we're

2266
02:25:29,579 --> 02:25:33,750
using randomized sampling so every frame

2267
02:25:32,129 --> 02:25:43,500
we get different results back from the

2268
02:25:33,750 --> 02:25:45,930
sampling right could we ship with this

2269
02:25:43,500 --> 02:25:47,068
before yes I we might be able to you

2270
02:25:45,930 --> 02:25:54,510
know maybe we should change this to a

2271
02:25:47,068 --> 02:25:57,750
Texas you know what can you see in task

2272
02:25:54,510 --> 02:26:02,488
managers GP YouTube I didn't know there

2273
02:25:57,750 --> 02:26:08,760
was a GPU tab and task manager when did

2274
02:26:02,488 --> 02:26:19,949
they add that do you just mean do you

2275
02:26:08,760 --> 02:26:22,430
mean this column or is that do you mean

2276
02:26:19,950 --> 02:26:22,430
that or

2277
02:26:24,750 --> 02:26:37,049
I don't know if I can I don't know that

2278
02:26:28,590 --> 02:26:41,489
I can expand on that like I don't know

2279
02:26:37,049 --> 02:26:44,750
that does it have a oh I didn't even

2280
02:26:41,489 --> 02:26:44,750
know it had one of these that's cool

2281
02:26:51,899 --> 02:26:57,109
I mean they're not not much surprising

2282
02:26:54,690 --> 02:26:57,110
here right

2283
02:27:00,540 --> 02:27:09,920
and I assumed that if we just get rid of

2284
02:27:07,500 --> 02:27:14,750
the rendering right you can see that we

2285
02:27:09,920 --> 02:27:14,750
no longer max out the GPU

2286
02:27:25,060 --> 02:27:28,239
Jimmy tips on talking with

2287
02:27:26,709 --> 02:27:33,869
non-programmers about programming

2288
02:27:28,239 --> 02:27:36,459
related concepts no I don't think so

2289
02:27:33,870 --> 02:27:38,320
- you bought T how does your profiler

2290
02:27:36,459 --> 02:27:42,329
work does it hook into the compiler no

2291
02:27:38,319 --> 02:27:42,329
it just times the code using RT TSE

2292
02:27:50,649 --> 02:27:54,310
could we compile 1xe with sse4 that

2293
02:27:53,110 --> 02:27:56,021
falls back to see - if it's not present

2294
02:27:54,310 --> 02:27:58,889
on the cpu or would we need to compile

2295
02:27:56,021 --> 02:28:01,811
into several exceeds no we could do that

2296
02:27:58,889 --> 02:28:03,879
the way you would do that is you just

2297
02:28:01,810 --> 02:28:05,860
come you know you have two routines you

2298
02:28:03,879 --> 02:28:08,319
have the SC for one in the SVC to write

2299
02:28:05,860 --> 02:28:10,090
to one and you just at the beginning you

2300
02:28:08,319 --> 02:28:13,949
patch a pointer that points to the right

2301
02:28:10,090 --> 02:28:16,180
routine based on your check of the CPU I

2302
02:28:13,950 --> 02:28:18,610
don't know what the best way to do that

2303
02:28:16,180 --> 02:28:20,351
nowadays is one way to do it would be to

2304
02:28:18,610 --> 02:28:22,030
just call the SC for a routine if it

2305
02:28:20,351 --> 02:28:23,829
doesn't fault call the SSC too routine

2306
02:28:22,030 --> 02:28:25,329
but not sure if that's really the best

2307
02:28:23,829 --> 02:28:34,719
way you might didn't you want to check

2308
02:28:25,329 --> 02:28:36,989
the CPU ID instead if yeah it's hard to

2309
02:28:34,719 --> 02:28:36,989
say

2310
02:28:44,360 --> 02:28:54,319
all right let's close up shop for today

2311
02:28:54,501 --> 02:28:57,479
Thank You Evan for joining me for them

2312
02:28:56,460 --> 02:28:59,251
sewed a handmade here it's been a

2313
02:28:57,479 --> 02:29:00,661
pleasure coding with you as always if

2314
02:28:59,251 --> 02:29:01,950
you would like to follow along series at

2315
02:29:00,661 --> 02:29:03,931
home you can always peer to the game on

2316
02:29:01,950 --> 02:29:05,131
handmade hero organic comes the source

2317
02:29:03,931 --> 02:29:10,351
code so you can play around with it

2318
02:29:05,130 --> 02:29:11,970
yourself I'm see I guess this is it

2319
02:29:10,351 --> 02:29:15,511
until next week so we'll be back here

2320
02:29:11,970 --> 02:29:17,341
next weekend when we will clean up the

2321
02:29:15,511 --> 02:29:19,431
lighting some more and maybe take a look

2322
02:29:17,341 --> 02:29:21,931
at some sampling options that we have to

2323
02:29:19,431 --> 02:29:23,610
reduce the flickering a little bit and

2324
02:29:21,931 --> 02:29:26,041
the other thing we should probably do

2325
02:29:23,610 --> 02:29:27,569
now because it's about time that we did

2326
02:29:26,040 --> 02:29:29,430
that since we're running at 30 frames a

2327
02:29:27,569 --> 02:29:31,020
second at least is to actually do a

2328
02:29:29,431 --> 02:29:33,211
little bit of world gem that will use

2329
02:29:31,021 --> 02:29:35,011
the lighting and just kind of get the

2330
02:29:33,210 --> 02:29:36,689
whole pipeline going so we've got kind

2331
02:29:35,011 --> 02:29:39,479
of a little world set up that's that's

2332
02:29:36,690 --> 02:29:42,149
actually you know it's big enough and

2333
02:29:39,479 --> 02:29:44,430
has lighting on on the trees and stuff

2334
02:29:42,149 --> 02:29:47,161
as well like you know get get to the

2335
02:29:44,431 --> 02:29:48,899
point where we actually are using it for

2336
02:29:47,161 --> 02:29:52,560
real so we can optimize in the real

2337
02:29:48,899 --> 02:29:54,540
scenario from here on out so we'll start

2338
02:29:52,560 --> 02:29:56,101
that next week until then have fun

2339
02:29:54,540 --> 02:29:58,939
program everyone and I'll see you on the

2340
02:29:56,101 --> 02:29:58,940
Internet take it easy everybody

