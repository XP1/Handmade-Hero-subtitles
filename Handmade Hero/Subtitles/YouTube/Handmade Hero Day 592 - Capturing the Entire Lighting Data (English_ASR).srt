1
00:00:01,939 --> 00:00:05,969
hello everybody and welcome to hand made

2
00:00:04,650 --> 00:00:08,669
here oh sure we could a complete game

3
00:00:05,969 --> 00:00:10,980
live on stream before I get started

4
00:00:08,669 --> 00:00:12,089
today just wanted to let you all know if

5
00:00:10,980 --> 00:00:12,900
you didn't see it already because I

6
00:00:12,089 --> 00:00:15,689
tweeted about it

7
00:00:12,900 --> 00:00:18,660
we Mali rocket here are doing

8
00:00:15,689 --> 00:00:20,160
kickstarter for printing our comic which

9
00:00:18,660 --> 00:00:24,089
are pretty excited about

10
00:00:20,160 --> 00:00:27,268
we had been pretty excited actually

11
00:00:24,089 --> 00:00:29,250
because we are comic was accepted for

12
00:00:27,268 --> 00:00:30,959
van calf 2020 which is the Vancouver

13
00:00:29,250 --> 00:00:33,058
comic Arts Festival which is you know

14
00:00:30,960 --> 00:00:36,469
just it's a drive away from here right

15
00:00:33,058 --> 00:00:38,789
we can we can just drive up i five to it

16
00:00:36,469 --> 00:00:40,410
and we had gotten it done in time and

17
00:00:38,789 --> 00:00:43,049
we're gonna print it and we were pretty

18
00:00:40,409 --> 00:00:44,609
psyched about this because obviously if

19
00:00:43,049 --> 00:00:45,959
you do a comic your end goal is to have

20
00:00:44,609 --> 00:00:48,929
a print edition that's what everyone

21
00:00:45,960 --> 00:00:52,289
wants for any kind of comic or graphic

22
00:00:48,929 --> 00:00:54,299
novel right but then of course all

23
00:00:52,289 --> 00:00:55,948
conventions have been cancelled from

24
00:00:54,299 --> 00:00:57,238
from now until the foreseeable future

25
00:00:55,948 --> 00:00:59,460
I'm sure I don't think there's probably

26
00:00:57,238 --> 00:01:03,328
gonna be a comics convention for many

27
00:00:59,460 --> 00:01:06,359
months possibly even a year I don't know

28
00:01:03,329 --> 00:01:07,710
I mean I don't know when it you know it

29
00:01:06,359 --> 00:01:10,260
would be considered safe to have some of

30
00:01:07,709 --> 00:01:13,449
the convention which is kind of like the

31
00:01:10,260 --> 00:01:14,810
optimal case for virus transmission

32
00:01:13,450 --> 00:01:17,400
[Music]

33
00:01:14,810 --> 00:01:18,719
people get sick at conferences even when

34
00:01:17,400 --> 00:01:21,450
there isn't a new virus going around

35
00:01:18,719 --> 00:01:22,978
there's often things like pax flu and

36
00:01:21,450 --> 00:01:25,890
these sorts of things that people talk

37
00:01:22,978 --> 00:01:27,150
about so so we don't actually know when

38
00:01:25,890 --> 00:01:28,409
that's gonna happen again so we decided

39
00:01:27,150 --> 00:01:29,880
we still really wanted to print the

40
00:01:28,409 --> 00:01:32,700
things so we made a Kickstarter for our

41
00:01:29,879 --> 00:01:35,578
comic that you can take a look at if

42
00:01:32,700 --> 00:01:38,719
you're interested if you like comics and

43
00:01:35,578 --> 00:01:42,029
you like space or cats or cats and space

44
00:01:38,719 --> 00:01:43,618
please check it out we have the banner

45
00:01:42,030 --> 00:01:45,659
on the top of the handmade hero page so

46
00:01:43,618 --> 00:01:47,099
either of those pages that you might go

47
00:01:45,659 --> 00:01:49,259
to on hand made here at up or it's got

48
00:01:47,099 --> 00:01:50,489
it up there and you could just click on

49
00:01:49,259 --> 00:01:52,560
the banner and it takes you over here

50
00:01:50,489 --> 00:01:55,399
it's got a little animated trailer that

51
00:01:52,560 --> 00:01:58,829
you can see here that's pretty fun and

52
00:01:55,399 --> 00:02:00,750
you can read all about you know what the

53
00:01:58,828 --> 00:02:04,408
comics like it's an all-ages comic it's

54
00:02:00,750 --> 00:02:06,750
it's good for everybody and also you

55
00:02:04,409 --> 00:02:08,280
know if so if you if you have kids who

56
00:02:06,750 --> 00:02:10,500
like comics or if you like reading

57
00:02:08,280 --> 00:02:12,169
comics with their kids it's okay for

58
00:02:10,500 --> 00:02:13,830
that to like it's not nothing

59
00:02:12,169 --> 00:02:15,989
gritties is

60
00:02:13,830 --> 00:02:19,140
in it it's it's just a fun comic that's

61
00:02:15,990 --> 00:02:22,770
uh it gets a little serious at times you

62
00:02:19,139 --> 00:02:24,179
know it's it's it's got some some stuff

63
00:02:22,770 --> 00:02:26,520
in it I'll just I don't want to give any

64
00:02:24,180 --> 00:02:29,340
spoilers but it's you know it's not it's

65
00:02:26,520 --> 00:02:32,010
not just light-hearted fluff so you know

66
00:02:29,340 --> 00:02:33,990
it is something that's got some teeth to

67
00:02:32,009 --> 00:02:37,469
it as it goes but it you know again it's

68
00:02:33,990 --> 00:02:39,180
it's totally g-rated comic and it's it's

69
00:02:37,469 --> 00:02:41,370
we think pretty interesting so there's

70
00:02:39,180 --> 00:02:43,140
two books book one is done and that's

71
00:02:41,370 --> 00:02:46,500
the kickstart is four we're starting

72
00:02:43,139 --> 00:02:48,149
work on book two now hopefully you like

73
00:02:46,500 --> 00:02:49,800
it you can check out the Kickstarter and

74
00:02:48,150 --> 00:02:52,310
the trailer for more information there

75
00:02:49,800 --> 00:02:54,570
you go that'll be running for 30 days

76
00:02:52,310 --> 00:02:57,090
and you can check on the progress of the

77
00:02:54,569 --> 00:02:59,549
kickstart as we go we also have a bunch

78
00:02:57,090 --> 00:03:00,959
of fun stuff that we planned for this

79
00:02:59,550 --> 00:03:02,340
month because if we're doing a

80
00:03:00,959 --> 00:03:03,360
Kickstarter we wanted some promotional

81
00:03:02,340 --> 00:03:07,400
things to do and we wanted those things

82
00:03:03,360 --> 00:03:11,070
to be fun for everybody so also on the

83
00:03:07,400 --> 00:03:15,030
market YouTube here that does all the

84
00:03:11,069 --> 00:03:16,979
handmade hero stuff we are gonna be

85
00:03:15,030 --> 00:03:18,750
posting a bunch of stuff now we already

86
00:03:16,979 --> 00:03:20,669
had some things on here like Anna draws

87
00:03:18,750 --> 00:03:22,650
it that you've seen before that are kind

88
00:03:20,669 --> 00:03:24,419
of fun that are art based and we're

89
00:03:22,650 --> 00:03:25,890
gonna be posting a bunch more stuff like

90
00:03:24,419 --> 00:03:28,018
that so today we're gonna be posed to

91
00:03:25,889 --> 00:03:29,779
get time-lapse of Anna drawing now the

92
00:03:28,019 --> 00:03:31,680
main character that you can check out

93
00:03:29,780 --> 00:03:35,879
tomorrow we're planning to post a new

94
00:03:31,680 --> 00:03:38,310
series we have that it's kind of a

95
00:03:35,879 --> 00:03:40,469
comedy thing that's some an art comedy

96
00:03:38,310 --> 00:03:43,080
thing so if you want to just stay tuned

97
00:03:40,469 --> 00:03:45,150
to the Molly Rocket Channel it's you can

98
00:03:43,080 --> 00:03:47,660
subscribe to it or just it's just I

99
00:03:45,150 --> 00:03:50,370
think you can just literally type

100
00:03:47,659 --> 00:03:53,729
youtube.com slash see Molly Rocket I

101
00:03:50,370 --> 00:03:55,230
think that works yeah so if you can

102
00:03:53,729 --> 00:03:56,849
remember that you can always go check

103
00:03:55,229 --> 00:04:00,569
back there we hope to have videos all

104
00:03:56,849 --> 00:04:02,280
month long of fun stuff for people to to

105
00:04:00,569 --> 00:04:04,500
check out related to the Kickstarter so

106
00:04:02,280 --> 00:04:08,039
that's coming too and hopefully everyone

107
00:04:04,500 --> 00:04:10,769
enjoys that alright that is it for

108
00:04:08,039 --> 00:04:12,539
business let's take a look at the

109
00:04:10,769 --> 00:04:16,048
non-business side of things

110
00:04:12,539 --> 00:04:19,709
let me sub stardrive and get started

111
00:04:16,048 --> 00:04:21,358
here so we left off last weekend we lost

112
00:04:19,709 --> 00:04:24,139
one programming session to the fact that

113
00:04:21,358 --> 00:04:28,609
I was pretty grumpy about some stuff

114
00:04:24,139 --> 00:04:28,610
getting said on Twitter as usual

115
00:04:29,899 --> 00:04:35,549
uh so you know let's let's just let's

116
00:04:34,259 --> 00:04:37,919
just ignore that that's what happens

117
00:04:35,550 --> 00:04:40,050
sometimes and let's go ahead and open up

118
00:04:37,918 --> 00:04:43,439
a handmade hero and take a look at where

119
00:04:40,050 --> 00:04:45,090
we were at so we had a lighting profiler

120
00:04:43,439 --> 00:04:46,949
that we made because we need to start

121
00:04:45,089 --> 00:04:48,689
optimizing this we didn't really finish

122
00:04:46,949 --> 00:04:50,550
debugging it and we didn't really finish

123
00:04:48,689 --> 00:04:51,959
doing some verification for it we had a

124
00:04:50,550 --> 00:04:55,680
bug in here that some people noticed

125
00:04:51,959 --> 00:04:58,109
this was supposed to be that and it's

126
00:04:55,680 --> 00:05:02,668
amusing that it didn't crash but

127
00:04:58,110 --> 00:05:05,009
probably because the boxes were not read

128
00:05:02,668 --> 00:05:06,180
properly I don't actually you know it'd

129
00:05:05,009 --> 00:05:07,410
be completely honest I'm not sure how

130
00:05:06,180 --> 00:05:08,430
that was working you think that would

131
00:05:07,410 --> 00:05:10,139
have crashed we must have just gotten

132
00:05:08,430 --> 00:05:12,810
lucky and the way that the things were

133
00:05:10,139 --> 00:05:14,519
allocated we didn't crash but there's a

134
00:05:12,810 --> 00:05:15,689
couple bugs in here so there's a few

135
00:05:14,519 --> 00:05:16,889
things we want to do one of them we

136
00:05:15,689 --> 00:05:18,860
already fixed which is that we weren't

137
00:05:16,889 --> 00:05:21,060
using the array sampling here but anyway

138
00:05:18,860 --> 00:05:21,990
the point is we need to go through this

139
00:05:21,060 --> 00:05:23,519
and make sure that we're actually

140
00:05:21,990 --> 00:05:25,680
getting reasonable results out of it now

141
00:05:23,519 --> 00:05:26,879
and we may want to actually make a

142
00:05:25,680 --> 00:05:28,439
little thing that sort of pseudo

143
00:05:26,879 --> 00:05:30,000
verifies those results and what I mean

144
00:05:28,439 --> 00:05:33,598
by verifies those results obviously we

145
00:05:30,000 --> 00:05:36,029
don't really have a way to unit tests in

146
00:05:33,598 --> 00:05:39,000
a rigorous sense of the word a ray

147
00:05:36,029 --> 00:05:41,038
tracer without some reference ray tracer

148
00:05:39,000 --> 00:05:42,598
so it's not like we really can say for

149
00:05:41,038 --> 00:05:45,300
sure that a ray tracer is producing

150
00:05:42,598 --> 00:05:48,870
accurate ray tracing results necessarily

151
00:05:45,300 --> 00:05:51,449
but what we can do for example is we can

152
00:05:48,870 --> 00:05:53,879
at least lock our results to a known

153
00:05:51,449 --> 00:05:55,949
case so we're starting with this ray

154
00:05:53,879 --> 00:05:57,959
caster and we want to optimize it well

155
00:05:55,949 --> 00:06:00,060
how do we optimize it we're gonna make a

156
00:05:57,959 --> 00:06:02,069
series of changes to it and see if they

157
00:06:00,060 --> 00:06:03,689
improve our performance based on the

158
00:06:02,069 --> 00:06:05,848
profiling information that we have right

159
00:06:03,689 --> 00:06:07,589
well when we're doing that it's really

160
00:06:05,848 --> 00:06:09,629
easy for us to introduce bugs into the

161
00:06:07,589 --> 00:06:11,549
system and not know and we kind of don't

162
00:06:09,629 --> 00:06:13,288
want that because we want to know that

163
00:06:11,550 --> 00:06:15,240
our ray cast are still working otherwise

164
00:06:13,288 --> 00:06:16,680
we might go down routes of optimization

165
00:06:15,240 --> 00:06:17,908
thinking that we're getting faster but

166
00:06:16,680 --> 00:06:19,680
really what we did is introduced a bug

167
00:06:17,908 --> 00:06:22,500
and the reason that's getting faster is

168
00:06:19,680 --> 00:06:24,060
because we broke it right so we probably

169
00:06:22,500 --> 00:06:26,279
want to do here is like capture the

170
00:06:24,060 --> 00:06:28,139
results of our ray tracer into a log

171
00:06:26,279 --> 00:06:30,569
buffer somehow so that we know that

172
00:06:28,139 --> 00:06:33,030
they're actually what we actually got

173
00:06:30,569 --> 00:06:35,310
out of it and then at the end we can say

174
00:06:33,029 --> 00:06:37,439
oh did we actually get the same results

175
00:06:35,310 --> 00:06:40,338
that we think we should have gotten in

176
00:06:37,439 --> 00:06:40,338
for the Ray tracer

177
00:06:43,180 --> 00:06:48,228
so we kind of need to do all this stuff

178
00:06:45,860 --> 00:06:49,970
this weekend to get us in a place where

179
00:06:48,228 --> 00:06:51,680
we can actually start doing it so we

180
00:06:49,970 --> 00:06:55,159
want to do that and we want to actually

181
00:06:51,680 --> 00:06:55,340
get vtune capturing profile numbers for

182
00:06:55,158 --> 00:06:58,788
us

183
00:06:55,339 --> 00:07:00,469
so we want vtune to tell us what our

184
00:06:58,788 --> 00:07:04,250
performance counter is and we didn't

185
00:07:00,470 --> 00:07:08,270
actually get that far in that we weren't

186
00:07:04,250 --> 00:07:11,180
actually able to do that interface wise

187
00:07:08,269 --> 00:07:13,609
this is why I say I normally use what's

188
00:07:11,180 --> 00:07:15,050
a thing called perf on Linux which is

189
00:07:13,610 --> 00:07:17,360
just a way of running an application and

190
00:07:15,050 --> 00:07:19,879
getting the performance numbers out of

191
00:07:17,360 --> 00:07:21,620
it that's what I normally do let me just

192
00:07:19,879 --> 00:07:22,639
run this really quickly and see what

193
00:07:21,620 --> 00:07:24,199
we've got here I just want to make sure

194
00:07:22,639 --> 00:07:28,728
that we're still running this

195
00:07:24,199 --> 00:07:30,408
application properly so anyway the

196
00:07:28,728 --> 00:07:31,699
problem that we have and you'll notice

197
00:07:30,408 --> 00:07:33,050
it's taking a lot longer to run now

198
00:07:31,699 --> 00:07:34,819
which is actually good because before I

199
00:07:33,050 --> 00:07:36,740
think we were just totally buggy before

200
00:07:34,819 --> 00:07:38,930
whereas now we're actually getting like

201
00:07:36,740 --> 00:07:40,668
a real runtime of the thing so I think

202
00:07:38,930 --> 00:07:42,740
that's actually also good too anyway

203
00:07:40,668 --> 00:07:43,968
ignore that all of that let me let me go

204
00:07:42,740 --> 00:07:47,960
ahead and drop this down to something

205
00:07:43,968 --> 00:07:49,189
more like 64 here um so we wanted that

206
00:07:47,959 --> 00:07:50,209
variation but the other thing we want to

207
00:07:49,189 --> 00:07:51,709
do and we could take a look at this

208
00:07:50,209 --> 00:07:53,329
today as well in fact we can take a look

209
00:07:51,709 --> 00:07:55,848
at this first because it's something

210
00:07:53,329 --> 00:07:57,800
that I I need to find how to do I'm not

211
00:07:55,848 --> 00:08:00,319
used to using vtune to get my

212
00:07:57,800 --> 00:08:03,168
performance profile results so that's a

213
00:08:00,319 --> 00:08:06,289
little bit of an issue because I don't

214
00:08:03,168 --> 00:08:08,120
actually know how to make vtune do what

215
00:08:06,288 --> 00:08:11,500
it is that I want it to do which is not

216
00:08:08,120 --> 00:08:13,848
to give me some weird like Intel speak

217
00:08:11,500 --> 00:08:16,218
discussion of my performance I don't

218
00:08:13,848 --> 00:08:19,399
care about that what I want to see is

219
00:08:16,218 --> 00:08:21,050
performance information that I care

220
00:08:19,399 --> 00:08:22,879
about and it's a little bit harder to do

221
00:08:21,050 --> 00:08:25,908
that then you know I would expect so if

222
00:08:22,879 --> 00:08:29,000
you go over here and we run vtune

223
00:08:25,908 --> 00:08:31,158
amplifier right what we did the other

224
00:08:29,000 --> 00:08:34,190
day is we said like okay you know we've

225
00:08:31,158 --> 00:08:38,149
got this HH light prof thing we got it

226
00:08:34,190 --> 00:08:40,310
running here and I just I don't know my

227
00:08:38,149 --> 00:08:43,038
way around this interface very well you

228
00:08:40,309 --> 00:08:44,449
can go into this thing here and like we

229
00:08:43,038 --> 00:08:46,669
can pick a couple different things so

230
00:08:44,450 --> 00:08:48,589
like microarchitecture and memory are

231
00:08:46,669 --> 00:08:50,299
access are like the two things we care

232
00:08:48,589 --> 00:08:52,730
about parallelism we don't because we're

233
00:08:50,299 --> 00:08:55,219
already running fully parallel and no

234
00:08:52,730 --> 00:08:57,470
with no internet communication so we

235
00:08:55,220 --> 00:09:00,050
know that our parallelism is fine in the

236
00:08:57,470 --> 00:09:01,940
game and that's not our issue or rather

237
00:09:00,049 --> 00:09:04,159
if we do need to check it it's gonna be

238
00:09:01,940 --> 00:09:05,570
something in the game code not the

239
00:09:04,159 --> 00:09:07,629
lighting code that's the problem because

240
00:09:05,570 --> 00:09:09,590
there's no locking in the lighting code

241
00:09:07,629 --> 00:09:11,480
so we don't need to check that in our

242
00:09:09,590 --> 00:09:13,190
test amp we don't care about the

243
00:09:11,480 --> 00:09:14,450
Hospice's because that's not really the

244
00:09:13,190 --> 00:09:16,250
kind of preferred sauce we're doing here

245
00:09:14,450 --> 00:09:18,890
what we want is these sorts of things I

246
00:09:16,250 --> 00:09:20,419
just don't know like when we look at

247
00:09:18,889 --> 00:09:23,419
something here like this costume

248
00:09:20,419 --> 00:09:24,679
analysis I don't even know what I don't

249
00:09:23,419 --> 00:09:28,129
know how to even get something in here

250
00:09:24,679 --> 00:09:30,889
right I want to be able to do that right

251
00:09:28,129 --> 00:09:33,799
I want some way of doing that I just

252
00:09:30,889 --> 00:09:38,240
don't know how to get YouTube to do that

253
00:09:33,799 --> 00:09:41,269
right so the question is how do we get

254
00:09:38,240 --> 00:09:44,419
it to do like one of those custom

255
00:09:41,269 --> 00:09:47,269
analysis things I don't I don't have any

256
00:09:44,419 --> 00:09:50,559
idea right I just don't know is it like

257
00:09:47,269 --> 00:09:52,789
siding behind there let me just know um

258
00:09:50,559 --> 00:09:54,649
so what I want to be able to do is

259
00:09:52,789 --> 00:09:57,289
something like okay like give me a

260
00:09:54,649 --> 00:10:00,649
microarchitecture exploit exploration

261
00:09:57,289 --> 00:10:03,349
and let me set these right let me set

262
00:10:00,649 --> 00:10:07,250
these here but it's grayed out right so

263
00:10:03,350 --> 00:10:08,540
you know how do we set it so in prayer

264
00:10:07,250 --> 00:10:09,350
if what you do is you just on the

265
00:10:08,539 --> 00:10:11,149
command line you say these are the

266
00:10:09,350 --> 00:10:13,670
things I would look for that's what I

267
00:10:11,149 --> 00:10:16,039
was wondering you know how we do I don't

268
00:10:13,669 --> 00:10:18,589
know you know is there something in here

269
00:10:16,039 --> 00:10:20,990
I can set and this is yv2 no ease throws

270
00:10:18,590 --> 00:10:22,910
me for though I never know how to get it

271
00:10:20,990 --> 00:10:25,820
to do just the things it's supposed to

272
00:10:22,909 --> 00:10:27,709
do I don't know you look in here I can't

273
00:10:25,820 --> 00:10:31,310
see anything like I don't see anything

274
00:10:27,710 --> 00:10:33,980
about that right it's just I don't see

275
00:10:31,309 --> 00:10:38,439
any check boxes in here there's no check

276
00:10:33,980 --> 00:10:44,000
boxes right what if I set to summary

277
00:10:38,440 --> 00:10:46,340
nothing there right so I just don't know

278
00:10:44,000 --> 00:10:48,559
I don't know I don't know how to get

279
00:10:46,340 --> 00:10:54,710
this thing to do what it's supposed to

280
00:10:48,559 --> 00:10:56,179
do I have no idea and I were probably is

281
00:10:54,710 --> 00:10:59,810
gonna have to read the manual right I

282
00:10:56,179 --> 00:11:02,209
mean presumably you wouldn't have all

283
00:10:59,809 --> 00:11:06,319
this stuff here if you couldn't make it

284
00:11:02,210 --> 00:11:09,200
go now one thing I'm not sure about is

285
00:11:06,320 --> 00:11:11,540
whether or not the driver and this talk

286
00:11:09,200 --> 00:11:13,550
to each other properly so you know one

287
00:11:11,539 --> 00:11:24,049
thing that ooh does this have anything

288
00:11:13,549 --> 00:11:27,379
in it so no so one thing that I don't

289
00:11:24,049 --> 00:11:29,299
know is like is it just not does it not

290
00:11:27,379 --> 00:11:31,909
have like the right permissions you know

291
00:11:29,299 --> 00:11:34,429
so like for example in here when we go

292
00:11:31,909 --> 00:11:36,649
to vtune do I have to like try to run it

293
00:11:34,429 --> 00:11:39,639
with extended permissions which I could

294
00:11:36,649 --> 00:11:46,309
do that didn't seem to work

295
00:11:39,639 --> 00:11:50,929
try it again there it is run as

296
00:11:46,309 --> 00:11:52,159
administrator' um so I don't know like

297
00:11:50,929 --> 00:11:53,779
maybe the thing doesn't have proper

298
00:11:52,159 --> 00:11:55,069
permissions that seems like a

299
00:11:53,779 --> 00:11:56,929
far-fetched thing because it installed

300
00:11:55,070 --> 00:11:58,670
its own driver so the driver should be

301
00:11:56,929 --> 00:12:01,159
able to do whatever it wants probably I

302
00:11:58,669 --> 00:12:02,419
mean I guess I don't really know but so

303
00:12:01,159 --> 00:12:03,980
if we run it as administrator I'm just

304
00:12:02,419 --> 00:12:09,229
curious like can I get access to those

305
00:12:03,980 --> 00:12:11,930
things or something no so I don't know I

306
00:12:09,230 --> 00:12:13,519
just don't know let's go ahead and see

307
00:12:11,929 --> 00:12:15,739
if we can get some documentation on this

308
00:12:13,519 --> 00:12:17,689
because I just really want it to do the

309
00:12:15,740 --> 00:12:20,389
same thing I would do on Linux with perf

310
00:12:17,690 --> 00:12:21,950
and this is why I don't use v2 mitts

311
00:12:20,389 --> 00:12:24,169
because I always find I just don't know

312
00:12:21,950 --> 00:12:26,300
what I'm doing I feel like this should

313
00:12:24,169 --> 00:12:27,860
be simple you just check a few boxes but

314
00:12:26,299 --> 00:12:30,439
it doesn't look like that's really

315
00:12:27,860 --> 00:12:32,779
possible so let me click on this

316
00:12:30,440 --> 00:12:35,690
documentation button let's see if we can

317
00:12:32,779 --> 00:12:41,240
find anything all I really want to know

318
00:12:35,690 --> 00:12:43,100
is how do I get those those performance

319
00:12:41,240 --> 00:12:48,320
counters right that's that's all I want

320
00:12:43,100 --> 00:12:52,220
to know I don't I don't really need any

321
00:12:48,320 --> 00:12:54,680
of this I just I just need I just need

322
00:12:52,220 --> 00:12:57,460
some docs say how to make this thing go

323
00:12:54,679 --> 00:12:57,459
right

324
00:12:58,559 --> 00:13:06,359
this is the profile itself not the

325
00:13:03,210 --> 00:13:13,870
documentation for it right

326
00:13:06,360 --> 00:13:23,009
contents analyze performance custom

327
00:13:13,870 --> 00:13:23,009
analysis can I get this

328
00:13:23,990 --> 00:13:28,039
it's actually it's actually that that

329
00:13:26,450 --> 00:13:33,370
was actually what I wanted was right

330
00:13:28,039 --> 00:13:33,370
there so this is the thing I want is is

331
00:13:35,649 --> 00:13:42,708
come come here come here

332
00:13:37,610 --> 00:13:49,810
that was here it was here this is the

333
00:13:42,708 --> 00:13:51,769
thing I want I think maybe I'm not sure

334
00:13:49,809 --> 00:13:56,899
not sure what they're gonna call you

335
00:13:51,769 --> 00:14:00,939
yeah yeah these this is what I want well

336
00:13:56,899 --> 00:14:00,940
I don't really care about precise events

337
00:14:03,759 --> 00:14:19,330
could be this yeah there we go

338
00:14:10,220 --> 00:14:19,330
yeah that's what I want I want PMC yeah

339
00:14:21,000 --> 00:14:24,470
[Music]

340
00:14:33,389 --> 00:14:40,970
install the sampling driver which I

341
00:14:37,230 --> 00:14:45,389
assume we did cuz we ran their installer

342
00:14:40,970 --> 00:14:48,389
maybe we didn't do that but it wouldn't

343
00:14:45,389 --> 00:14:50,009
be able to it when we ran a micro

344
00:14:48,389 --> 00:14:52,830
architecture house before it seemed to

345
00:14:50,009 --> 00:15:03,409
think it was getting those values so I

346
00:14:52,830 --> 00:15:03,410
assumed that it did this worries me

347
00:15:14,299 --> 00:15:19,609
it seems like they think this is obvious

348
00:15:16,850 --> 00:15:22,009
and I guess I'm just thick about how

349
00:15:19,610 --> 00:15:23,930
Intel designs interface like shouldn't

350
00:15:22,009 --> 00:15:26,929
it just have a section called like how

351
00:15:23,929 --> 00:15:28,870
to set up a custom I mean am I missing

352
00:15:26,929 --> 00:15:32,120
it

353
00:15:28,870 --> 00:15:34,580
maybe analysis types would it say there

354
00:15:32,120 --> 00:15:39,529
I just need something just tell me tell

355
00:15:34,580 --> 00:15:43,100
me how to ungrate ell me that's all I

356
00:15:39,529 --> 00:15:49,659
want is that so wrong I don't know I

357
00:15:43,100 --> 00:15:49,659
guess it is is it in here

358
00:16:02,730 --> 00:16:12,550
okay okay alright alright here it is

359
00:16:06,279 --> 00:16:15,909
we've got a clue we've got a clue create

360
00:16:12,549 --> 00:16:18,419
a new custom analysis type based on

361
00:16:15,909 --> 00:16:22,659
available predefined analysis

362
00:16:18,419 --> 00:16:26,649
configurations so we need to use these

363
00:16:22,659 --> 00:16:30,819
things here okay okay

364
00:16:26,649 --> 00:16:33,100
so you see you see we're learning maybe

365
00:16:30,820 --> 00:16:36,480
I can make this do what I want so if I

366
00:16:33,100 --> 00:16:41,440
go to microarchitecture exploration and

367
00:16:36,480 --> 00:16:45,460
then I click this maybe oh yeah boys

368
00:16:41,440 --> 00:16:49,720
look at this now we're talking

369
00:16:45,460 --> 00:16:54,550
all right so let's name this you know

370
00:16:49,720 --> 00:16:57,160
fruit salad x12 or something right Oh

371
00:16:54,549 --> 00:17:01,750
where'd it go there it is so fruit salad

372
00:16:57,159 --> 00:17:04,799
x12 for now and in theory now I should

373
00:17:01,750 --> 00:17:08,380
be able to actually tell it what to

374
00:17:04,799 --> 00:17:15,039
create you know like all the fruit in

375
00:17:08,380 --> 00:17:16,329
one delicious salad so now we should be

376
00:17:15,039 --> 00:17:19,389
able to play around with this hopefully

377
00:17:16,328 --> 00:17:22,750
and get actual like information here I

378
00:17:19,390 --> 00:17:24,880
don't know what that exactly means but

379
00:17:22,750 --> 00:17:28,779
I'm assuming that that just allows us to

380
00:17:24,880 --> 00:17:32,740
get the pmc from our app I hope I mean I

381
00:17:28,779 --> 00:17:35,440
don't know um the CPU sampling interval

382
00:17:32,740 --> 00:17:38,130
in milliseconds here these I don't I

383
00:17:35,440 --> 00:17:40,539
don't think these counters wrap do they

384
00:17:38,130 --> 00:17:45,550
so I don't know that the sampling

385
00:17:40,539 --> 00:17:48,430
interval needs to be that high or I

386
00:17:45,549 --> 00:17:51,339
should say low one millisecond is waking

387
00:17:48,430 --> 00:17:54,580
our app up way too often like I just

388
00:17:51,339 --> 00:17:57,659
want the totals right I don't care about

389
00:17:54,579 --> 00:18:01,119
any of this stuff if you look at what

390
00:17:57,660 --> 00:18:04,240
Jesus okay so if you look at this

391
00:18:01,119 --> 00:18:08,429
there's a lot of stuff checked and so

392
00:18:04,240 --> 00:18:08,430
okay couple things here

393
00:18:14,619 --> 00:18:21,229
so a little word of advice here just

394
00:18:18,888 --> 00:18:24,469
from if you've never used these kind of

395
00:18:21,230 --> 00:18:28,339
tools before so performance counters on

396
00:18:24,470 --> 00:18:30,710
x64 are things that you effectively arm

397
00:18:28,339 --> 00:18:32,599
like you say these are the performance

398
00:18:30,710 --> 00:18:34,700
counters I want to record and then the

399
00:18:32,599 --> 00:18:36,469
CPU basically has little counters and

400
00:18:34,700 --> 00:18:38,960
every time one of those events that you

401
00:18:36,470 --> 00:18:41,808
armed occurs it will increment the

402
00:18:38,960 --> 00:18:44,210
counter but the problem is there's not

403
00:18:41,808 --> 00:18:48,128
that many counters I don't remember how

404
00:18:44,210 --> 00:18:51,220
many there are if it's like 8 or 5 4

405
00:18:48,128 --> 00:18:54,829
maybe it's four I think it's four I

406
00:18:51,220 --> 00:18:56,089
don't remember I'm sorry it only has a

407
00:18:54,829 --> 00:18:57,288
certain number of counters which we can

408
00:18:56,089 --> 00:19:00,048
go look up how many there are but let's

409
00:18:57,288 --> 00:19:02,119
say it's four what that means is that

410
00:19:00,048 --> 00:19:04,398
when you see something like this and

411
00:19:02,119 --> 00:19:06,258
like this is what I mean even if there

412
00:19:04,398 --> 00:19:08,418
are eight look at how many are there's

413
00:19:06,259 --> 00:19:12,769
so many things checked here right each

414
00:19:08,419 --> 00:19:15,440
of these events it cannot actually count

415
00:19:12,769 --> 00:19:16,359
those events for you because there's too

416
00:19:15,440 --> 00:19:19,879
many of them

417
00:19:16,359 --> 00:19:22,459
so what it actually does is it randomly

418
00:19:19,878 --> 00:19:25,459
or systematically depending on the app I

419
00:19:22,460 --> 00:19:28,610
don't know how this one works exactly it

420
00:19:25,460 --> 00:19:31,190
will just pick four to count armed those

421
00:19:28,609 --> 00:19:34,250
wait a millisecond which is what this is

422
00:19:31,190 --> 00:19:36,889
wake back up change which four it's

423
00:19:34,250 --> 00:19:40,460
counting and go back for another

424
00:19:36,888 --> 00:19:42,168
millisecond right so what it does is it

425
00:19:40,460 --> 00:19:43,970
goes well if you're in a tight loop I'll

426
00:19:42,169 --> 00:19:45,320
just time four of them then time another

427
00:19:43,970 --> 00:19:48,079
four of them then time another four of

428
00:19:45,319 --> 00:19:50,329
them in time another forum right but as

429
00:19:48,079 --> 00:19:52,638
it's doing that it means the more things

430
00:19:50,329 --> 00:19:54,470
you've checked the less accurate any

431
00:19:52,638 --> 00:19:57,408
individual one of them is because you

432
00:19:54,470 --> 00:19:59,149
were checking it for less time right now

433
00:19:57,409 --> 00:20:01,039
maybe they're uniform across the whole

434
00:19:59,148 --> 00:20:03,349
run of your application in which case it

435
00:20:01,038 --> 00:20:05,658
doesn't matter but if they vary at all

436
00:20:03,349 --> 00:20:07,459
the more things you check the less

437
00:20:05,659 --> 00:20:10,940
accurate they'll be over the same amount

438
00:20:07,460 --> 00:20:12,379
of sampling time does that make sense so

439
00:20:10,940 --> 00:20:14,960
when we take a look at all of these

440
00:20:12,378 --> 00:20:17,119
things we probably don't want even

441
00:20:14,960 --> 00:20:19,909
remotely all of these checked at once

442
00:20:17,119 --> 00:20:23,059
because we have a completely repeatable

443
00:20:19,909 --> 00:20:26,480
workload right so all we're doing

444
00:20:23,059 --> 00:20:28,909
is making it worse for us because we're

445
00:20:26,480 --> 00:20:31,009
basically introducing a bunch of noise

446
00:20:28,910 --> 00:20:32,450
into our thing we could just do

447
00:20:31,009 --> 00:20:35,690
something else which is like look man

448
00:20:32,450 --> 00:20:38,390
don't wake up hardly never please at

449
00:20:35,690 --> 00:20:41,660
least I don't care about any of this

450
00:20:38,390 --> 00:20:46,190
stuff right don't do that just and I

451
00:20:41,660 --> 00:20:47,690
don't know what the uncor I don't think

452
00:20:46,190 --> 00:20:55,340
we're timing anything on the uncor are

453
00:20:47,690 --> 00:20:56,870
we I don't know that we care about uncor

454
00:20:55,339 --> 00:20:58,519
in this at all the uncor is the thing

455
00:20:56,869 --> 00:21:01,039
that's off to the side of the CPU that

456
00:20:58,519 --> 00:21:02,299
handles other stuff right it's not I

457
00:21:01,039 --> 00:21:06,200
don't think it's implicated here in our

458
00:21:02,299 --> 00:21:08,750
performance here so we can crank these

459
00:21:06,200 --> 00:21:13,069
up I would argue and then just reduce

460
00:21:08,750 --> 00:21:15,799
these down right like just get these out

461
00:21:13,069 --> 00:21:17,710
of here and so I think what we can do is

462
00:21:15,799 --> 00:21:22,909
just I don't know how to clear these

463
00:21:17,710 --> 00:21:27,049
exactly do I manually have to do this

464
00:21:22,910 --> 00:21:32,150
like I kind of want to just I just want

465
00:21:27,049 --> 00:21:33,710
them to all be off right are you kidding

466
00:21:32,150 --> 00:21:34,730
me right now am I really gonna have to

467
00:21:33,710 --> 00:21:36,740
go through these and check them all

468
00:21:34,730 --> 00:21:38,240
myself is that really what's happening

469
00:21:36,740 --> 00:21:42,380
is that what's going on here that seems

470
00:21:38,240 --> 00:21:44,960
what's going on I also don't quite

471
00:21:42,380 --> 00:21:54,400
understand why are these listed so many

472
00:21:44,960 --> 00:21:54,400
times I'm a little weirded out by that

473
00:21:56,019 --> 00:22:00,349
dude does anyone know maybe I mean if

474
00:21:59,000 --> 00:22:01,609
you're if you could explain this to the

475
00:22:00,349 --> 00:22:05,059
folks I don't cuz I don't actually not

476
00:22:01,609 --> 00:22:07,069
can't explain that I don't know why I

477
00:22:05,059 --> 00:22:13,909
don't I don't know what's going on there

478
00:22:07,069 --> 00:22:16,399
right so so that's a little confusing so

479
00:22:13,910 --> 00:22:20,440
I'm gonna try I'm gonna try just

480
00:22:16,400 --> 00:22:20,440
clocking down here right

481
00:22:23,900 --> 00:22:29,940
good to do and I mean am I missing

482
00:22:29,519 --> 00:22:31,440
something

483
00:22:29,940 --> 00:22:32,910
I mean I'm missing something right

484
00:22:31,440 --> 00:22:34,500
please tell me there was a way to clear

485
00:22:32,910 --> 00:22:37,860
these it isn't what I'm doing I didn't

486
00:22:34,500 --> 00:22:39,690
see it but like clear all there was

487
00:22:37,859 --> 00:22:44,549
there was no clear all that that wasn't

488
00:22:39,690 --> 00:22:46,320
on the table I guess I mean what what is

489
00:22:44,549 --> 00:22:53,009
happening here but but as far as I can

490
00:22:46,319 --> 00:22:56,490
tell you got to do this yeah does anyone

491
00:22:53,009 --> 00:23:02,129
know it's just really the fastest way to

492
00:22:56,490 --> 00:23:03,779
do what I'm doing I mean I know everyone

493
00:23:02,130 --> 00:23:05,910
at home really wanted to watch me sit

494
00:23:03,779 --> 00:23:07,379
around for 15 minutes scrolling up a

495
00:23:05,910 --> 00:23:10,019
very long window unchecking a bunch of

496
00:23:07,380 --> 00:23:11,940
things that I don't want it to count but

497
00:23:10,019 --> 00:23:13,559
you know was there I so you know I'll

498
00:23:11,940 --> 00:23:16,970
still do it for your for your

499
00:23:13,559 --> 00:23:22,589
entertainment folks believe me but I

500
00:23:16,970 --> 00:23:27,630
don't actually know there we go all

501
00:23:22,589 --> 00:23:29,819
right um so when we look at this now in

502
00:23:27,630 --> 00:23:31,290
theory you know if I save this thing and

503
00:23:29,819 --> 00:23:32,549
you know what I'm gonna do I'm gonna

504
00:23:31,289 --> 00:23:37,529
call this not for yourself I'm gonna

505
00:23:32,549 --> 00:23:41,419
call this no counters template because I

506
00:23:37,529 --> 00:23:41,420
ain't doing that again all right

507
00:23:46,740 --> 00:23:57,339
okay so what's this button do save

508
00:23:51,000 --> 00:24:00,759
alright so I'm assuming if I want to I

509
00:23:57,339 --> 00:24:04,029
can copy this template by saying okay

510
00:24:00,759 --> 00:24:07,210
like this clone button here like copy it

511
00:24:04,029 --> 00:24:10,569
and then I can say like I've got two of

512
00:24:07,210 --> 00:24:17,340
them yeah okay so here I'll be like you

513
00:24:10,569 --> 00:24:22,569
know the ultimate fruit salad every

514
00:24:17,339 --> 00:24:28,240
fruit you ever wanted all diced up into

515
00:24:22,569 --> 00:24:30,490
one delicious salad and then on here I

516
00:24:28,240 --> 00:24:36,430
should now have a completely clean I

517
00:24:30,490 --> 00:24:39,370
hope slate of these things yes okay so

518
00:24:36,430 --> 00:24:42,039
now what we can do in theory anyway is

519
00:24:39,369 --> 00:24:45,819
start to add things in here that will

520
00:24:42,039 --> 00:24:47,799
tell us what we're actually what's

521
00:24:45,819 --> 00:24:50,859
actually happening at a hardware level

522
00:24:47,799 --> 00:24:53,769
right so if we want to for example we

523
00:24:50,859 --> 00:24:57,099
should be able to select like how many

524
00:24:53,769 --> 00:25:00,369
you ops were actually executed you know

525
00:24:57,099 --> 00:25:04,990
in this thing so I assume something like

526
00:25:00,369 --> 00:25:08,859
this right so you can see here like I

527
00:25:04,990 --> 00:25:11,170
mean this right here alone would be the

528
00:25:08,859 --> 00:25:12,969
complete analysis for just like the

529
00:25:11,170 --> 00:25:14,680
throughput like the you know how many we

530
00:25:12,970 --> 00:25:16,779
doing but we could say look if we're

531
00:25:14,680 --> 00:25:18,640
targeting like you know trying to get

532
00:25:16,779 --> 00:25:20,879
three you ops through or for you ops

533
00:25:18,640 --> 00:25:24,610
through you know something like this

534
00:25:20,880 --> 00:25:27,820
would be you know sort of what we want

535
00:25:24,609 --> 00:25:30,250
right this would tell us how many total

536
00:25:27,819 --> 00:25:32,019
you ops were executed in fact you know

537
00:25:30,250 --> 00:25:34,029
what we could just do this and say

538
00:25:32,019 --> 00:25:36,400
here's how many cycles none were here

539
00:25:34,029 --> 00:25:39,099
are so many cycles like one two and

540
00:25:36,400 --> 00:25:41,590
three were and that alone would just

541
00:25:39,099 --> 00:25:46,349
tell us something about our stalls right

542
00:25:41,589 --> 00:25:46,349
so let's suppose we just ran that I

543
00:25:46,410 --> 00:25:49,900
assume we can now get some actual

544
00:25:48,609 --> 00:25:52,119
information I don't actually know but

545
00:25:49,900 --> 00:25:54,570
we'll try it again vtune not my

546
00:25:52,119 --> 00:25:54,569
specialty

547
00:25:58,230 --> 00:26:04,059
okay so now this is a lot easier for me

548
00:26:02,079 --> 00:26:07,389
I don't know if it's easier for you but

549
00:26:04,059 --> 00:26:09,069
like the this is the same information

550
00:26:07,390 --> 00:26:11,020
you can get out of perf so I'm glad we

551
00:26:09,069 --> 00:26:12,700
did this because this will actually help

552
00:26:11,019 --> 00:26:14,799
me make sense of what we're seeing and

553
00:26:12,700 --> 00:26:18,390
the reason I say that is just because

554
00:26:14,799 --> 00:26:24,250
look I don't know really anything about

555
00:26:18,390 --> 00:26:25,720
how about how vtune works and I'm used

556
00:26:24,250 --> 00:26:27,339
to using perf which is just a thing

557
00:26:25,720 --> 00:26:29,620
which literally gives you this so you

558
00:26:27,339 --> 00:26:33,759
say you list the things you want like

559
00:26:29,619 --> 00:26:35,739
here and then when you're done you look

560
00:26:33,759 --> 00:26:37,140
at how many each event triggered and

561
00:26:35,740 --> 00:26:42,609
that gives you some information about

562
00:26:37,140 --> 00:26:45,310
your execution right so what you can see

563
00:26:42,609 --> 00:26:48,039
here is if we look at how our

564
00:26:45,309 --> 00:26:49,899
performance is at the moment again if

565
00:26:48,039 --> 00:26:53,649
I'm not very much an error in anyone out

566
00:26:49,900 --> 00:26:56,230
there who's the vtune expert please do

567
00:26:53,650 --> 00:26:59,380
correct me on the chat if I'm wrong but

568
00:26:56,230 --> 00:27:01,150
if you look at what we're looking at in

569
00:26:59,380 --> 00:27:03,490
terms of hardware events here what you

570
00:27:01,150 --> 00:27:05,759
can see here is it looks like it added

571
00:27:03,490 --> 00:27:09,069
CPU clock on halted ref TSC

572
00:27:05,759 --> 00:27:10,329
automatically for us I assume I didn't

573
00:27:09,069 --> 00:27:12,779
check that right because I don't

574
00:27:10,329 --> 00:27:15,399
remember checking that one I don't think

575
00:27:12,779 --> 00:27:18,099
so if we go back and look at the

576
00:27:15,400 --> 00:27:20,710
analysis configuration you can see I

577
00:27:18,099 --> 00:27:23,799
didn't check that so it looks like no

578
00:27:20,710 --> 00:27:25,600
matter no matter what we do it's gonna

579
00:27:23,799 --> 00:27:26,740
use put that in there and that's fine

580
00:27:25,599 --> 00:27:29,019
because that's basically just the thing

581
00:27:26,740 --> 00:27:31,359
that tells us look how many clocks

582
00:27:29,019 --> 00:27:33,579
happened right look how many clocks

583
00:27:31,359 --> 00:27:35,649
happened on this on this core but that

584
00:27:33,579 --> 00:27:42,099
we were while we were doing our check

585
00:27:35,650 --> 00:27:44,530
right so that's fine it's a good

586
00:27:42,099 --> 00:27:47,439
reference number for us then in here you

587
00:27:44,529 --> 00:27:48,879
can basically see how did we do so if

588
00:27:47,440 --> 00:27:51,480
you remember correctly from back in

589
00:27:48,880 --> 00:27:55,390
there we talked about this originally an

590
00:27:51,480 --> 00:27:57,309
x64 core from an Intel from the Intel

591
00:27:55,390 --> 00:27:59,050
side so which is what we're on right now

592
00:27:57,309 --> 00:28:01,559
you can see right here it's a cable ache

593
00:27:59,049 --> 00:28:01,559
process or

594
00:28:03,609 --> 00:28:08,139
it basically looks like a front end and

595
00:28:06,308 --> 00:28:09,579
a back end the front end is decoding

596
00:28:08,140 --> 00:28:12,070
instructions feeding into the back end

597
00:28:09,579 --> 00:28:14,500
the scheduler on the back end has ports

598
00:28:12,069 --> 00:28:16,389
it can issue instructions to each port

599
00:28:14,500 --> 00:28:19,900
can handle certain types of instructions

600
00:28:16,390 --> 00:28:22,750
at any given time the CPU is only

601
00:28:19,900 --> 00:28:26,110
capable of issuing four instructions on

602
00:28:22,750 --> 00:28:28,359
a cycle so it will decode an issue into

603
00:28:26,109 --> 00:28:32,379
the scheduled scheduler up to four

604
00:28:28,359 --> 00:28:37,089
instructions on any cycle it cannot ever

605
00:28:32,380 --> 00:28:39,070
issue more so that doesn't mean that you

606
00:28:37,089 --> 00:28:40,359
couldn't issue more than keep saying

607
00:28:39,069 --> 00:28:42,428
instructions I don't mean them I mean my

608
00:28:40,359 --> 00:28:44,529
crops so actual thing is you can do

609
00:28:42,429 --> 00:28:46,630
there are ways you could get more than

610
00:28:44,529 --> 00:28:48,879
four instructions potentially executing

611
00:28:46,630 --> 00:28:51,070
apparently if those instructions don't

612
00:28:48,880 --> 00:28:53,679
actually really exist if they're fake in

613
00:28:51,069 --> 00:28:55,029
some way so there's for example ways

614
00:28:53,679 --> 00:28:56,798
that they can get fused together and

615
00:28:55,029 --> 00:28:58,960
things so you can appear to be excluding

616
00:28:56,798 --> 00:29:01,179
more than four instructions but in terms

617
00:28:58,960 --> 00:29:03,669
of actual work so doing and multiply

618
00:29:01,179 --> 00:29:05,620
that's what's called a micro app or you

619
00:29:03,669 --> 00:29:08,110
up you can see it here right and if

620
00:29:05,619 --> 00:29:10,509
you're doing a micro op a micro op is

621
00:29:08,109 --> 00:29:13,269
something that actually can only happen

622
00:29:10,509 --> 00:29:16,569
four times a cycle there's only four

623
00:29:13,269 --> 00:29:19,150
micro ops can actually get issued per

624
00:29:16,569 --> 00:29:21,909
cycle basically right

625
00:29:19,150 --> 00:29:24,009
and again there's something called micro

626
00:29:21,910 --> 00:29:26,980
op fusion which means that technically

627
00:29:24,009 --> 00:29:29,440
actually some things that do normally

628
00:29:26,980 --> 00:29:32,980
count as micro ops can get SQUOZE

629
00:29:29,440 --> 00:29:35,558
together so for example you can actually

630
00:29:32,980 --> 00:29:40,058
sometimes have micro ops where you

631
00:29:35,558 --> 00:29:47,500
actually get five in a cycle we're not

632
00:29:40,058 --> 00:29:48,428
gonna go into that but point being when

633
00:29:47,500 --> 00:29:49,990
you're actually talking about things

634
00:29:48,429 --> 00:29:51,490
like multiplies you're never gonna get

635
00:29:49,990 --> 00:29:52,569
more than four per cycle and in fact you

636
00:29:51,490 --> 00:29:53,829
can't actually get four per cycle cuz

637
00:29:52,569 --> 00:29:55,779
there aren't four multipliers on the

638
00:29:53,829 --> 00:29:57,759
chip so what you end up looking at is

639
00:29:55,779 --> 00:29:59,019
how many ports can issue the thing that

640
00:29:57,759 --> 00:30:02,109
you're trying to do like a multiplier

641
00:29:59,019 --> 00:30:03,609
divide and how often are you actually

642
00:30:02,109 --> 00:30:04,808
issuing things to those ports that's

643
00:30:03,609 --> 00:30:06,849
gonna give you your actual throughput

644
00:30:04,808 --> 00:30:10,089
analysis and when you look at what we've

645
00:30:06,849 --> 00:30:14,918
got here what you can see is at least to

646
00:30:10,089 --> 00:30:17,529
my initial estimation right what we can

647
00:30:14,919 --> 00:30:20,320
see is our utilization is not actually

648
00:30:17,529 --> 00:30:23,109
very bad it's actually between 2 &amp; 3 is

649
00:30:20,319 --> 00:30:25,569
where we pretty much live we're never

650
00:30:23,109 --> 00:30:27,879
really stalling out for that much so if

651
00:30:25,569 --> 00:30:30,129
you look at how our throughput analysis

652
00:30:27,880 --> 00:30:30,880
looks already we're actually not that

653
00:30:30,130 --> 00:30:32,320
bad

654
00:30:30,880 --> 00:30:35,740
now we can extend this a little bit

655
00:30:32,319 --> 00:30:37,450
further since now I know CPU clock on

656
00:30:35,740 --> 00:30:40,359
halted was the thing that was actually

657
00:30:37,450 --> 00:30:44,380
happening that that they're gonna add

658
00:30:40,359 --> 00:30:53,289
always let's just do 1 2 3 &amp; 4 right so

659
00:30:44,380 --> 00:30:57,310
we in here oh boy how do i okay okay

660
00:30:53,289 --> 00:31:00,639
okay so now we kind of know what this is

661
00:30:57,309 --> 00:31:01,539
gonna be I can actually name it oops it

662
00:31:00,640 --> 00:31:02,950
doesn't have to be named I ultimate

663
00:31:01,539 --> 00:31:05,200
fruit salad why do I keep licking that

664
00:31:02,950 --> 00:31:15,779
that's what I want alright this is going

665
00:31:05,200 --> 00:31:22,600
to be instructions per clock simple oops

666
00:31:15,779 --> 00:31:25,509
simple performance gather of IPC right

667
00:31:22,599 --> 00:31:29,439
and so all we're gonna do here is we're

668
00:31:25,509 --> 00:31:34,509
gonna say look you ops oops

669
00:31:29,440 --> 00:31:37,049
you ops executed we're going to go ahead

670
00:31:34,509 --> 00:31:37,049
and say

671
00:31:46,519 --> 00:31:55,519
that I think so we've got one two three

672
00:31:50,450 --> 00:31:59,779
and four that should be savable that

673
00:31:55,519 --> 00:32:02,240
yeah okay okay so now if I do this I

674
00:31:59,779 --> 00:32:07,430
should basically just have a way of

675
00:32:02,240 --> 00:32:10,009
gathering what our instruction four

676
00:32:07,430 --> 00:32:11,810
o'clock tends to be right so how many

677
00:32:10,009 --> 00:32:14,180
instructions are we actually able to

678
00:32:11,809 --> 00:32:18,099
issue on every clock and what you can

679
00:32:14,180 --> 00:32:20,779
see here is that we get one fairly often

680
00:32:18,099 --> 00:32:23,199
pretty much all the time so we're not

681
00:32:20,779 --> 00:32:27,950
really stalling out the core completely

682
00:32:23,200 --> 00:32:30,590
hardly ever we get to actually quite a

683
00:32:27,950 --> 00:32:33,620
bit so not very often do we fall down

684
00:32:30,589 --> 00:32:36,339
three is getting lower we're only like

685
00:32:33,619 --> 00:32:39,649
75% of the time hitting three right and

686
00:32:36,339 --> 00:32:44,029
in terms of four well that's only like

687
00:32:39,650 --> 00:32:48,680
half the time right that's not bad

688
00:32:44,029 --> 00:32:51,519
so looking at this what that sort of

689
00:32:48,680 --> 00:32:55,190
tells me without too much further

690
00:32:51,519 --> 00:32:57,920
exploration right is I don't think right

691
00:32:55,190 --> 00:33:00,380
now our primary problem is that our loop

692
00:32:57,920 --> 00:33:01,880
is set up poorly or something right it

693
00:33:00,380 --> 00:33:03,290
doesn't look like we're spending a ton

694
00:33:01,880 --> 00:33:05,660
of time recovering from branch which

695
00:33:03,289 --> 00:33:09,319
predicts or you know going to the cash

696
00:33:05,660 --> 00:33:11,000
out to the l3 or main memory or

697
00:33:09,319 --> 00:33:14,869
something it doesn't look like we're

698
00:33:11,000 --> 00:33:18,680
having a lot of stalls it looks like we

699
00:33:14,869 --> 00:33:20,229
are issuing at least two often three and

700
00:33:18,680 --> 00:33:22,279
some client half the time for

701
00:33:20,230 --> 00:33:25,039
instructions for clock which isn't bad

702
00:33:22,279 --> 00:33:27,379
now it might not be good enough we could

703
00:33:25,039 --> 00:33:28,789
still do better than that probably if we

704
00:33:27,380 --> 00:33:30,800
actually go in there and start to think

705
00:33:28,789 --> 00:33:32,809
about these loops but what that suggests

706
00:33:30,799 --> 00:33:34,339
to me if I'm not mistaken and again

707
00:33:32,809 --> 00:33:36,649
please take it with a grain of salt

708
00:33:34,339 --> 00:33:38,509
because I'm not a vtune person I don't

709
00:33:36,650 --> 00:33:41,680
actually know if I ran this proof

710
00:33:38,509 --> 00:33:44,329
correctly I'm just not a vtune person

711
00:33:41,680 --> 00:33:48,320
I'm getting to be a better vtune person

712
00:33:44,329 --> 00:33:51,559
right now on stream this is my V tune

713
00:33:48,319 --> 00:33:53,210
education here um but if I miss if that

714
00:33:51,559 --> 00:33:55,190
actually collected the performance

715
00:33:53,210 --> 00:33:56,630
counters that I think it did and the

716
00:33:55,190 --> 00:33:58,160
performance counters that are actually

717
00:33:56,630 --> 00:33:59,440
labeled properly as to what I think they

718
00:33:58,160 --> 00:34:02,590
are

719
00:33:59,440 --> 00:34:07,419
then this tells me that our first thing

720
00:34:02,589 --> 00:34:09,639
to look at is not going to be try to get

721
00:34:07,419 --> 00:34:12,668
the data into this routine more

722
00:34:09,639 --> 00:34:14,019
efficiently right because it looks like

723
00:34:12,668 --> 00:34:16,328
we're processing our data pretty

724
00:34:14,019 --> 00:34:21,039
efficiently it looks like what we're not

725
00:34:16,329 --> 00:34:23,500
doing is trimming the ops so we're we're

726
00:34:21,039 --> 00:34:26,529
flooding we're putting too many

727
00:34:23,500 --> 00:34:28,480
operations into this core so what we

728
00:34:26,530 --> 00:34:31,179
want to try to look at now is ways of

729
00:34:28,480 --> 00:34:32,858
reducing the workload not getting the

730
00:34:31,179 --> 00:34:36,358
workload in more efficiently because

731
00:34:32,858 --> 00:34:39,309
those are two things that could you know

732
00:34:36,358 --> 00:34:42,460
the two things we can look at are get

733
00:34:39,309 --> 00:34:44,259
the work in more efficiently and do the

734
00:34:42,460 --> 00:34:45,429
work more efficiently and the do the

735
00:34:44,260 --> 00:34:47,379
work more efficiently seems more

736
00:34:45,429 --> 00:34:49,750
strongly implicated at this point that

737
00:34:47,378 --> 00:34:53,828
just doesn't look like there's a huge

738
00:34:49,750 --> 00:34:56,318
amount of fat in there to trim on the

739
00:34:53,829 --> 00:34:58,089
throughput it looks like there's a

740
00:34:56,318 --> 00:35:00,608
problem with our algorithm all right I

741
00:34:58,088 --> 00:35:04,358
was doing too much work so how do we cut

742
00:35:00,608 --> 00:35:08,289
that work down right all right so that's

743
00:35:04,358 --> 00:35:09,699
the basic idea here and in order to get

744
00:35:08,289 --> 00:35:12,029
a slightly different picture of that

745
00:35:09,699 --> 00:35:16,269
what I'm gonna try to do now and again

746
00:35:12,030 --> 00:35:19,359
caveat not a great vtune guy gonna go

747
00:35:16,269 --> 00:35:20,559
ahead and try now to to get it to give

748
00:35:19,358 --> 00:35:21,818
me another piece of information which is

749
00:35:20,559 --> 00:35:25,858
what I would look typically look for

750
00:35:21,818 --> 00:35:36,818
next which is who's getting throttled

751
00:35:25,858 --> 00:35:39,159
okay so if we go ahead and okay okay if

752
00:35:36,818 --> 00:35:40,630
we go ahead and clone this again right

753
00:35:39,159 --> 00:35:45,789
so we are actually you know what I made

754
00:35:40,630 --> 00:35:48,640
one for cloning so so it so is it this

755
00:35:45,789 --> 00:35:50,769
button yeah so if I go back to our note

756
00:35:48,639 --> 00:35:55,088
counters template and clone that one and

757
00:35:50,769 --> 00:36:01,059
I go in here and say change this to port

758
00:35:55,088 --> 00:36:04,679
usage and this is going to be or and and

759
00:36:01,059 --> 00:36:04,679
you know what I'm gonna specifically say

760
00:36:05,369 --> 00:36:09,900
arithmetic port usage

761
00:36:09,909 --> 00:36:18,879
checking see how overloaded we are or

762
00:36:14,380 --> 00:36:24,490
checking see which ports are stalling

763
00:36:18,880 --> 00:36:28,059
right so you saw me try using my limited

764
00:36:24,489 --> 00:36:30,779
vtune skills to have it tell me what the

765
00:36:28,059 --> 00:36:40,510
performance counters were on the CPU for

766
00:36:30,780 --> 00:36:42,760
which types of encyc alums one you up to

767
00:36:40,510 --> 00:36:45,190
you up three you up and four you up

768
00:36:42,760 --> 00:36:47,799
right so we were trying to figure out

769
00:36:45,190 --> 00:36:49,480
how many micro ops we were issuing and

770
00:36:47,798 --> 00:36:53,619
what we saw is that we're doing a pretty

771
00:36:49,480 --> 00:36:56,889
good job issuing you ops but I'd like to

772
00:36:53,619 --> 00:36:59,769
know now when we're not issuing for and

773
00:36:56,889 --> 00:37:01,509
when we're not issuing three because one

774
00:36:59,769 --> 00:37:03,250
and two were fairly likely when we're

775
00:37:01,510 --> 00:37:07,059
getting when we're not issuing three and

776
00:37:03,250 --> 00:37:10,929
four just double check which ports are

777
00:37:07,059 --> 00:37:12,630
stalling right so who's the port that's

778
00:37:10,929 --> 00:37:19,328
overloaded okay

779
00:37:12,630 --> 00:37:23,048
now if we look in this list right what

780
00:37:19,329 --> 00:37:27,190
you can see here is we can actually find

781
00:37:23,048 --> 00:37:31,480
out for each individual port 0 1 2 3 4 5

782
00:37:27,190 --> 00:37:33,220
6 &amp; 7 we can actually see which ports

783
00:37:31,480 --> 00:37:37,240
are getting these you ops dispatched

784
00:37:33,219 --> 00:37:39,429
right now if I check them all which is

785
00:37:37,239 --> 00:37:42,759
the information we actually want the

786
00:37:39,429 --> 00:37:45,098
problem is that on that run we won't

787
00:37:42,760 --> 00:37:49,539
actually know which one is actually

788
00:37:45,099 --> 00:37:51,160
happening right so if you look at what

789
00:37:49,539 --> 00:37:53,079
that information would give us because

790
00:37:51,159 --> 00:37:54,399
when we're running it that's too many

791
00:37:53,079 --> 00:37:56,710
right it's too many for our perf

792
00:37:54,400 --> 00:37:58,690
counters now it may be that it's fine

793
00:37:56,710 --> 00:38:01,210
because again this loop is a tight loop

794
00:37:58,690 --> 00:38:04,240
so it doesn't really matter so I'm gonna

795
00:38:01,210 --> 00:38:06,460
try and see if V Tunes alternating which

796
00:38:04,239 --> 00:38:08,679
ones we're checking works there but if

797
00:38:06,460 --> 00:38:10,119
it doesn't we can actually do what this

798
00:38:08,679 --> 00:38:13,000
is actually called with just arithmetic

799
00:38:10,119 --> 00:38:14,980
port usage and get rid of the ports that

800
00:38:13,000 --> 00:38:16,989
are actually not implicated in our

801
00:38:14,980 --> 00:38:20,380
algorithm much so and just to give you a

802
00:38:16,989 --> 00:38:20,979
perspective on that as you people who

803
00:38:20,380 --> 00:38:23,588
watch the show

804
00:38:20,980 --> 00:38:26,440
frequently know we have this bookmarked

805
00:38:23,588 --> 00:38:29,078
the ecstasy for you op table and if we

806
00:38:26,440 --> 00:38:30,940
want to we can look to see for example

807
00:38:29,079 --> 00:38:32,710
the types of things that we're doing so

808
00:38:30,940 --> 00:38:38,338
for example we know that we need to do

809
00:38:32,710 --> 00:38:38,338
things like shuffle how do I make oh

810
00:38:38,400 --> 00:38:45,489
where it is um so we know that we have

811
00:38:42,969 --> 00:38:48,869
things like shuffle you can see the port

812
00:38:45,489 --> 00:38:51,249
analysis here it's on port five now

813
00:38:48,869 --> 00:38:54,749
again I'll just restate this you know

814
00:38:51,248 --> 00:38:54,748
this I've said this a bunch of times but

815
00:38:57,210 --> 00:39:04,298
so when you take a look at the you ops

816
00:39:01,960 --> 00:39:05,858
dot info this is telling you for each

817
00:39:04,298 --> 00:39:09,038
particular thing that you might be doing

818
00:39:05,858 --> 00:39:12,670
on your process or this is telling you

819
00:39:09,039 --> 00:39:15,039
what the actual port is that will be

820
00:39:12,670 --> 00:39:17,499
necessary for the ALU to complete the

821
00:39:15,039 --> 00:39:20,380
instruction so if you take a look at

822
00:39:17,498 --> 00:39:22,179
something like a pea chef with which we

823
00:39:20,380 --> 00:39:25,298
know we're doing for broadcasts and

824
00:39:22,179 --> 00:39:27,548
stuff like that what you can see here is

825
00:39:25,298 --> 00:39:29,228
for there's different ways in which that

826
00:39:27,548 --> 00:39:32,559
instruction may have to execute and

827
00:39:29,228 --> 00:39:35,759
that's what's listed here so pea chef in

828
00:39:32,559 --> 00:39:40,210
this case like a pea chef D a pea chef

829
00:39:35,759 --> 00:39:43,239
hwp chef LW you can see that xmm lines

830
00:39:40,210 --> 00:39:44,499
the ones that just have X mmm they tell

831
00:39:43,239 --> 00:39:47,048
you what the port usage of that

832
00:39:44,498 --> 00:39:50,768
instruction is so it says one you OP on

833
00:39:47,048 --> 00:39:53,498
port five is the only way right that

834
00:39:50,768 --> 00:39:56,258
means that's what happens when you have

835
00:39:53,498 --> 00:39:59,288
to do a patient it will execute on port

836
00:39:56,259 --> 00:40:00,998
5 . if port 5 is blocked so on that

837
00:39:59,289 --> 00:40:05,410
cycle you shove something into port 5

838
00:40:00,998 --> 00:40:07,568
already that's it you cannot put another

839
00:40:05,409 --> 00:40:10,268
instruction into that pipe so that will

840
00:40:07,568 --> 00:40:13,298
block port 5 or wait on port 5 period

841
00:40:10,268 --> 00:40:16,748
right so what are these other things

842
00:40:13,298 --> 00:40:18,639
well anytime you see memory in there so

843
00:40:16,748 --> 00:40:20,169
you see that M eye is immediate by the

844
00:40:18,639 --> 00:40:23,048
way so that's just telling what kind of

845
00:40:20,170 --> 00:40:26,619
shuffle to do right so an X mm is the

846
00:40:23,048 --> 00:40:30,518
register M 128 is saying that it's got a

847
00:40:26,619 --> 00:40:33,278
memory operand right and Intel x64 is

848
00:40:30,518 --> 00:40:34,838
not a RISC architecture it's a Sisk

849
00:40:33,278 --> 00:40:37,389
architecture so it allows you to do

850
00:40:34,838 --> 00:40:40,000
things like say in this one instruction

851
00:40:37,389 --> 00:40:41,710
load something and operate on it in the

852
00:40:40,000 --> 00:40:43,809
instruction bypassing registers

853
00:40:41,710 --> 00:40:46,240
altogether that's something can do so

854
00:40:43,809 --> 00:40:48,639
this instruction is a bypass register

855
00:40:46,239 --> 00:40:51,129
instruction it says I want you to do a

856
00:40:48,639 --> 00:40:55,469
piece off on this register using this

857
00:40:51,130 --> 00:40:58,840
piece of memory right right here and

858
00:40:55,469 --> 00:41:00,730
that instruction itself means that not

859
00:40:58,840 --> 00:41:02,110
only does it do the P chef which is

860
00:41:00,730 --> 00:41:05,889
represented here you see it's the same

861
00:41:02,110 --> 00:41:09,309
one you up on port five it will also tie

862
00:41:05,889 --> 00:41:11,500
up the memory ports right so what does

863
00:41:09,309 --> 00:41:13,570
this mean well the memory ports are port

864
00:41:11,500 --> 00:41:16,360
2 and 3 they are the things that can

865
00:41:13,570 --> 00:41:19,480
actually do loads and when you see 1

866
00:41:16,360 --> 00:41:24,010
times P 2 3 what that means is that it's

867
00:41:19,480 --> 00:41:25,780
gonna issue 1 you op on port 2 or 3 so

868
00:41:24,010 --> 00:41:28,150
that means it has two chances to get it

869
00:41:25,780 --> 00:41:30,250
right if port 2 is blocked condition on

870
00:41:28,150 --> 00:41:32,079
port 3 if port 3 is blocked condition on

871
00:41:30,250 --> 00:41:34,840
port 2 so that means we can actually

872
00:41:32,079 --> 00:41:36,610
issue two of these per cycle now we

873
00:41:34,840 --> 00:41:38,410
couldn't issue two of these per cycle

874
00:41:36,610 --> 00:41:41,680
because they require port five and only

875
00:41:38,409 --> 00:41:43,899
one port five exists if this was p1 5

876
00:41:41,679 --> 00:41:45,969
for example we get issue 2 total piece

877
00:41:43,900 --> 00:41:48,220
chef instructions but since it's only

878
00:41:45,969 --> 00:41:49,779
has that one the pea chef will block on

879
00:41:48,219 --> 00:41:53,289
the port 5 but if something else was

880
00:41:49,780 --> 00:41:57,820
tying up port 2 no problem port 3 it

881
00:41:53,289 --> 00:41:59,349
could use right so we care about the

882
00:41:57,820 --> 00:42:01,240
arithmetic ports and what are the earth

883
00:41:59,349 --> 00:42:03,099
medic ports well as you can see port 5

884
00:42:01,239 --> 00:42:04,569
is one we may care about because it's

885
00:42:03,099 --> 00:42:06,039
gonna move our data around not

886
00:42:04,570 --> 00:42:08,920
technically arithmetic but we need it

887
00:42:06,039 --> 00:42:11,139
for arithmetic we have things like a pea

888
00:42:08,920 --> 00:42:14,680
add write an instruction that's gonna do

889
00:42:11,139 --> 00:42:21,460
a pea add that's adding things together

890
00:42:14,679 --> 00:42:22,989
for example what's the actual scalar add

891
00:42:21,460 --> 00:42:27,130
though

892
00:42:22,989 --> 00:42:31,358
what's what's the it's PS or whatever

893
00:42:27,130 --> 00:42:33,849
it's that bad PS that's it

894
00:42:31,358 --> 00:42:35,440
um I don't remember the mnemonics as

895
00:42:33,849 --> 00:42:37,838
well as I should I don't do enough

896
00:42:35,440 --> 00:42:39,068
assembly language programming I wish I

897
00:42:37,838 --> 00:42:41,019
did

898
00:42:39,068 --> 00:42:43,058
so if we're doing something like an ad

899
00:42:41,019 --> 00:42:45,849
write what you can see is the typical

900
00:42:43,059 --> 00:42:48,700
layout of these things is it's going to

901
00:42:45,849 --> 00:42:52,838
be used on ports like 0 &amp; 1

902
00:42:48,699 --> 00:42:55,449
right so port 0 &amp; 1 do the heavy lifting

903
00:42:52,838 --> 00:42:56,858
of arithmetic usually you can look at

904
00:42:55,449 --> 00:43:00,368
the mole PS you can see it's the same

905
00:42:56,858 --> 00:43:04,900
right so if I multiply I'm in there now

906
00:43:00,369 --> 00:43:09,369
there's a div PS and that you could see

907
00:43:04,900 --> 00:43:11,260
is on port 0 right so you've got a lot

908
00:43:09,369 --> 00:43:13,900
of different things going on there that

909
00:43:11,260 --> 00:43:18,400
that we care about but they're all like

910
00:43:13,900 --> 00:43:20,380
0 1 &amp; 5 that's where we're gonna be

911
00:43:18,400 --> 00:43:23,710
hitting for our Earth minik are if

912
00:43:20,380 --> 00:43:25,028
arithmetic so if we wanted to we could

913
00:43:23,710 --> 00:43:27,519
just do this

914
00:43:25,028 --> 00:43:30,068
and say look here's our like

915
00:43:27,519 --> 00:43:32,440
floating-point arithmetic stuff that

916
00:43:30,068 --> 00:43:36,429
we're gathering so I'm just gonna call

917
00:43:32,440 --> 00:43:40,450
this like our like float port usage

918
00:43:36,429 --> 00:43:44,108
let's say China Sea which ah what is

919
00:43:40,449 --> 00:43:46,179
happening no no don't change okay there

920
00:43:44,108 --> 00:43:46,900
we go I don't know how to use B time I

921
00:43:46,179 --> 00:43:50,980
said that already

922
00:43:46,900 --> 00:43:54,548
I'm checking to see which loading or

923
00:43:50,980 --> 00:44:01,179
this is a analysis of floating point

924
00:43:54,548 --> 00:44:02,889
port usage and related ports right so if

925
00:44:01,179 --> 00:44:05,618
we want to we can go ahead and say let's

926
00:44:02,889 --> 00:44:07,750
take a look at that specifically tell us

927
00:44:05,619 --> 00:44:10,720
how our floating point port usage is and

928
00:44:07,750 --> 00:44:13,599
now we've got a way to collect the

929
00:44:10,719 --> 00:44:16,088
information about that so if I run this

930
00:44:13,599 --> 00:44:17,859
one now in theory we should be able to

931
00:44:16,088 --> 00:44:19,869
see a little bit more information about

932
00:44:17,858 --> 00:44:23,769
how our floating point ports are doing

933
00:44:19,869 --> 00:44:26,798
right so what's happening there all

934
00:44:23,769 --> 00:44:29,259
right so again if we look at this

935
00:44:26,798 --> 00:44:32,500
particular piece of information and we

936
00:44:29,260 --> 00:44:34,809
see like what the port breakdown is what

937
00:44:32,500 --> 00:44:36,199
it I'll be honest if we look at that

938
00:44:34,809 --> 00:44:52,940
that doesn't look

939
00:44:36,199 --> 00:44:56,868
fabulous is that what I think it is can

940
00:44:52,940 --> 00:45:03,970
I get a good night can I get a I can't

941
00:44:56,869 --> 00:45:07,369
can I let me just grab this guy in

942
00:45:03,969 --> 00:45:09,709
that's cycles per thread when you ups

943
00:45:07,369 --> 00:45:11,240
are executed in port five and cycles per

944
00:45:09,710 --> 00:45:13,250
thread when you UPS are executed port

945
00:45:11,239 --> 00:45:21,139
one cycles per thread beautyreport zero

946
00:45:13,250 --> 00:45:22,550
right so looking at that it's a little

947
00:45:21,139 --> 00:45:25,688
bit confusing

948
00:45:22,550 --> 00:45:25,689
[Music]

949
00:45:31,500 --> 00:45:38,110
I'm not sure how to interpret that

950
00:45:34,000 --> 00:45:42,369
information so let me make sure I'm not

951
00:45:38,110 --> 00:45:46,030
just confused but here's what that seems

952
00:45:42,369 --> 00:45:47,440
to be saying right and this is good if

953
00:45:46,030 --> 00:45:49,510
this is the case it's good we did this

954
00:45:47,440 --> 00:45:53,139
because we're learning something so what

955
00:45:49,510 --> 00:45:55,150
we said is eight point six plus eight

956
00:45:53,139 --> 00:45:59,759
point six I'm just adding up these

957
00:45:55,150 --> 00:46:00,910
numbers plus seven point six is

958
00:45:59,760 --> 00:46:06,550
twenty-four

959
00:46:00,909 --> 00:46:09,789
eight out of 18 so that to me says like

960
00:46:06,550 --> 00:46:12,070
alright the number of times so if I

961
00:46:09,789 --> 00:46:16,420
subtract 18 from that the number of

962
00:46:12,070 --> 00:46:23,740
times we issued three you ops should be

963
00:46:16,420 --> 00:46:28,930
around seven is that what we saw let's

964
00:46:23,739 --> 00:46:31,989
try and get this going there we go and

965
00:46:28,929 --> 00:46:34,210
see it's it's not so okay so this is

966
00:46:31,989 --> 00:46:37,449
good this is information we needed so

967
00:46:34,210 --> 00:46:38,559
that suggests to me that these when

968
00:46:37,449 --> 00:46:41,019
we're looking at what you UPS are

969
00:46:38,559 --> 00:46:43,119
executed here maybe we're actually

970
00:46:41,019 --> 00:46:46,300
shoving things into the memory port a

971
00:46:43,119 --> 00:46:49,599
lot more or something so I want to keep

972
00:46:46,300 --> 00:46:54,610
going on this a little bit here so let's

973
00:46:49,599 --> 00:46:58,659
actually ask this question let's do

974
00:46:54,610 --> 00:47:02,860
another one of these where I just say

975
00:46:58,659 --> 00:47:09,369
okay you know cloned this one I guess

976
00:47:02,860 --> 00:47:17,670
let's okay let's call this all ports

977
00:47:09,369 --> 00:47:21,190
usage general collection of all

978
00:47:17,670 --> 00:47:24,190
execution ports at once and we're just

979
00:47:21,190 --> 00:47:25,929
gonna say look alright I clearly need a

980
00:47:24,190 --> 00:47:27,340
little more efficient before I can

981
00:47:25,929 --> 00:47:28,690
decide what's actually happening here

982
00:47:27,340 --> 00:47:33,730
oops I should just search instead of

983
00:47:28,690 --> 00:47:36,010
scrolling you ops dispatched let's just

984
00:47:33,730 --> 00:47:38,409
go ahead and say give me everything just

985
00:47:36,010 --> 00:47:41,110
to see how good that does if that is

986
00:47:38,409 --> 00:47:42,460
able to actually give us reasonable

987
00:47:41,110 --> 00:47:46,030
information then we can go with

988
00:47:42,460 --> 00:47:52,358
right so click that right and then I run

989
00:47:46,030 --> 00:47:53,140
this thing hopefully I don't I don't

990
00:47:52,358 --> 00:48:03,549
know if that's gonna work I'm just

991
00:47:53,139 --> 00:48:05,318
trying alright uh so if we take a look

992
00:48:03,550 --> 00:48:08,170
at what's going on here what you could

993
00:48:05,318 --> 00:48:10,659
kind of see is we've got the port usage

994
00:48:08,170 --> 00:48:12,550
breakdown and a lot of the stuff that

995
00:48:10,659 --> 00:48:14,318
we're issuing to is on port 2 which

996
00:48:12,550 --> 00:48:20,200
means we're doing a lot of loads there 2

997
00:48:14,318 --> 00:48:23,108
2 &amp; 3 are our loads so what again you

998
00:48:20,199 --> 00:48:26,649
can hopefully see why I wanted to do

999
00:48:23,108 --> 00:48:29,500
this what that tells me is that if we

1000
00:48:26,650 --> 00:48:31,568
look at the total number of hardware

1001
00:48:29,500 --> 00:48:35,739
events that we were talking about here

1002
00:48:31,568 --> 00:48:40,750
which is 17.8 if we add port 2 and port

1003
00:48:35,739 --> 00:48:44,229
3 together right that's actually like

1004
00:48:40,750 --> 00:48:47,710
this number right so we're we're loading

1005
00:48:44,230 --> 00:48:50,309
a lot right these two issue together so

1006
00:48:47,710 --> 00:48:52,690
that's not really a fair comparison

1007
00:48:50,309 --> 00:48:55,960
there might be a thing word that's like

1008
00:48:52,690 --> 00:48:58,690
which cycles have something issued on

1009
00:48:55,960 --> 00:49:01,298
either port 2 or 3 which would be a

1010
00:48:58,690 --> 00:49:04,358
better way to read that potentially but

1011
00:49:01,298 --> 00:49:07,568
what you can see here is yeah our port 6

1012
00:49:04,358 --> 00:49:09,730
&amp; 7 not super interesting 5 somewhat

1013
00:49:07,568 --> 00:49:12,670
interesting 3 &amp; 4 which are right ports

1014
00:49:09,730 --> 00:49:13,210
I'm sorry 4 &amp; 5 or the right ports is

1015
00:49:12,670 --> 00:49:19,000
that right

1016
00:49:13,210 --> 00:49:21,220
no just 4 is the right port I forget cuz

1017
00:49:19,000 --> 00:49:24,760
5 is the permutation port so it's not

1018
00:49:21,219 --> 00:49:26,879
that what's the right port please tell

1019
00:49:24,760 --> 00:49:26,880
me

1020
00:49:29,528 --> 00:49:38,920
love I just need a mop PS I don't know

1021
00:49:34,278 --> 00:49:42,318
how to search for that let's see

1022
00:49:38,920 --> 00:49:47,749
mop ApS that's what it is orb ups in

1023
00:49:42,318 --> 00:49:51,798
this case there it is so this is the

1024
00:49:47,748 --> 00:49:54,798
load which we know this is the store so

1025
00:49:51,798 --> 00:49:57,670
it looks like it just it looks like it

1026
00:49:54,798 --> 00:50:02,838
can do two or three or seven actually

1027
00:49:57,670 --> 00:50:04,789
but requires port four so I guess what

1028
00:50:02,838 --> 00:50:06,949
you would say is probably doesn't much

1029
00:50:04,789 --> 00:50:08,960
matter because port seven is available

1030
00:50:06,949 --> 00:50:11,239
for that anyway so it's really just port

1031
00:50:08,960 --> 00:50:13,039
four is the right port so this is what

1032
00:50:11,239 --> 00:50:16,068
we're looking at for writes here you

1033
00:50:13,039 --> 00:50:17,210
know I'm saying and it's pretty

1034
00:50:16,068 --> 00:50:20,409
interesting that those are completely

1035
00:50:17,210 --> 00:50:23,778
balanced but no that's where we're at so

1036
00:50:20,409 --> 00:50:27,259
yeah there we go that's the port

1037
00:50:23,778 --> 00:50:29,960
breakdown as we see it it looks roughly

1038
00:50:27,259 --> 00:50:33,710
like what I want but not quite there yet

1039
00:50:29,960 --> 00:50:36,318
so I would like to see a lot more zero

1040
00:50:33,710 --> 00:50:39,499
one five issue right then we're seeing

1041
00:50:36,318 --> 00:50:41,028
so I actually do think based on this

1042
00:50:39,498 --> 00:50:43,848
breakdown now that we're looking at it

1043
00:50:41,028 --> 00:50:46,579
it does look like we could be a lot more

1044
00:50:43,849 --> 00:50:50,150
efficient with the memory okay because

1045
00:50:46,579 --> 00:50:53,329
I'd like to see us issuing zero and one

1046
00:50:50,150 --> 00:50:54,980
a lot more than we are and now I don't

1047
00:50:53,329 --> 00:50:57,289
know that that's because the memory

1048
00:50:54,980 --> 00:51:00,230
isn't coming through as fast as I want

1049
00:50:57,289 --> 00:51:02,210
but it does look like we're issuing a

1050
00:51:00,230 --> 00:51:04,389
lot of instructions to do loads and I'm

1051
00:51:02,210 --> 00:51:08,989
wondering if we can get that down right

1052
00:51:04,389 --> 00:51:11,719
so I don't know I don't know right I'm

1053
00:51:08,989 --> 00:51:14,900
just guessing but you can see why now

1054
00:51:11,719 --> 00:51:17,298
that I hopefully again caveat if vtune

1055
00:51:14,900 --> 00:51:19,009
is doing what I think it's doing perf on

1056
00:51:17,298 --> 00:51:20,869
Linux does this and I and it's doing

1057
00:51:19,009 --> 00:51:24,019
what I think it's doing this I don't

1058
00:51:20,869 --> 00:51:27,588
know if it is or isn't so I just don't

1059
00:51:24,018 --> 00:51:29,028
know um for example I don't understand

1060
00:51:27,588 --> 00:51:32,119
why if you're only checking for like

1061
00:51:29,028 --> 00:51:36,130
four things why this is only two and

1062
00:51:32,119 --> 00:51:38,838
that's 60 I don't know that doesn't I

1063
00:51:36,130 --> 00:51:40,320
don't know what why these wouldn't all

1064
00:51:38,838 --> 00:51:42,059
be the same like

1065
00:51:40,320 --> 00:51:43,230
I just don't know what it's doing but

1066
00:51:42,059 --> 00:51:46,889
anyway it doesn't really matter point

1067
00:51:43,230 --> 00:51:52,949
being hmm like in one where we only do a

1068
00:51:46,889 --> 00:51:55,920
few like here those should all be the

1069
00:51:52,949 --> 00:51:57,659
same shouldn't they because I'm only

1070
00:51:55,920 --> 00:52:07,340
asking for four counters I know it can

1071
00:51:57,659 --> 00:52:07,339
do four so I don't know what that means

1072
00:52:09,860 --> 00:52:17,370
Hardware event sample count

1073
00:52:12,630 --> 00:52:18,599
I just don't know so I don't know what

1074
00:52:17,369 --> 00:52:20,460
that means because I think these should

1075
00:52:18,599 --> 00:52:22,019
all just be the same right these these

1076
00:52:20,460 --> 00:52:25,860
should all be the same number

1077
00:52:22,019 --> 00:52:28,559
I would think but apparently they're not

1078
00:52:25,860 --> 00:52:29,970
and so that's I don't know what it's

1079
00:52:28,559 --> 00:52:31,860
trying to tell me here but it makes me a

1080
00:52:29,969 --> 00:52:34,379
little nervous like I said not a vtune

1081
00:52:31,860 --> 00:52:38,220
guy don't don't know um

1082
00:52:34,380 --> 00:52:39,960
so anyway if we actually want to now

1083
00:52:38,219 --> 00:52:41,909
take a look at what's going on that does

1084
00:52:39,960 --> 00:52:45,300
suggest to me I would like to see how

1085
00:52:41,909 --> 00:52:47,009
these numbers change if I start to

1086
00:52:45,300 --> 00:52:49,410
compact the memory usage a little bit of

1087
00:52:47,010 --> 00:52:51,780
this thing now before we do any more of

1088
00:52:49,409 --> 00:52:54,029
this I think I've done what I want which

1089
00:52:51,780 --> 00:52:57,390
is I now have a way to take the

1090
00:52:54,030 --> 00:52:58,530
performance analysis hopefully get the

1091
00:52:57,389 --> 00:53:02,250
performance announce numbers that I'm

1092
00:52:58,530 --> 00:53:04,370
looking for mm-hmm so before I go any

1093
00:53:02,250 --> 00:53:06,750
further I want to validate that our

1094
00:53:04,369 --> 00:53:09,000
actual code is working right because

1095
00:53:06,750 --> 00:53:11,250
these may be bogus numbers it may be

1096
00:53:09,000 --> 00:53:13,050
that I didn't that I've got bugs in the

1097
00:53:11,250 --> 00:53:14,940
test harness that are making it so we're

1098
00:53:13,050 --> 00:53:17,310
not really testing it's like not walking

1099
00:53:14,940 --> 00:53:20,280
the tree right or something right so I

1100
00:53:17,309 --> 00:53:22,769
do want to go now do some a little bit

1101
00:53:20,280 --> 00:53:27,620
of due diligence just to make sure that

1102
00:53:22,769 --> 00:53:33,840
like we actually have some some belief

1103
00:53:27,619 --> 00:53:35,909
in some modicum of understanding that we

1104
00:53:33,840 --> 00:53:39,720
actually load and raycast

1105
00:53:35,909 --> 00:53:44,420
these things properly right so I'm going

1106
00:53:39,719 --> 00:53:47,549
to go ahead and take an OD here

1107
00:53:44,420 --> 00:53:50,849
take a note we're gonna OD we're gonna

1108
00:53:47,550 --> 00:53:52,650
OD this so we get a debug builds and I

1109
00:53:50,849 --> 00:53:53,608
want to just step through the code a

1110
00:53:52,650 --> 00:53:56,220
little bit more carefully

1111
00:53:53,608 --> 00:53:58,078
first and then I want to add something

1112
00:53:56,219 --> 00:53:59,808
that looks at the results of the code

1113
00:53:58,079 --> 00:54:03,028
and tries to validate them a little bit

1114
00:53:59,809 --> 00:54:05,249
so when we go ahead and grab the box

1115
00:54:03,028 --> 00:54:08,159
dump here and we get three hundred forty

1116
00:54:05,248 --> 00:54:10,409
three boxes and we set the box count to

1117
00:54:08,159 --> 00:54:12,058
that and then we do an allocation the

1118
00:54:10,409 --> 00:54:14,219
allocation is going to be 4 times the

1119
00:54:12,059 --> 00:54:16,559
box count times the lighting boxes plus

1120
00:54:14,219 --> 00:54:18,268
however much it took to to store just

1121
00:54:16,559 --> 00:54:21,499
however many were in the file so this is

1122
00:54:18,268 --> 00:54:24,028
just giving us a Headroom for our tree

1123
00:54:21,498 --> 00:54:25,588
we're thinking AF read those in and then

1124
00:54:24,028 --> 00:54:26,849
we're gonna go into test raycast

1125
00:54:25,588 --> 00:54:34,798
the first thing we do is build the

1126
00:54:26,849 --> 00:54:37,528
spatial partition and that should we

1127
00:54:34,798 --> 00:54:41,608
don't actually want that did that

1128
00:54:37,528 --> 00:54:46,949
actually call debug dump data hoping

1129
00:54:41,608 --> 00:54:48,358
that's just stubbed yes good that's like

1130
00:54:46,949 --> 00:54:50,129
we don't want it to overwrite our debug

1131
00:54:48,358 --> 00:54:51,538
data not that it would matter cuz I

1132
00:54:50,130 --> 00:54:54,720
guess it is gonna overwrite it with the

1133
00:54:51,539 --> 00:54:56,519
correct data but that's fine um so we

1134
00:54:54,719 --> 00:54:58,498
come through here and we should see

1135
00:54:56,518 --> 00:55:00,268
ourselves building reasonable bounds

1136
00:54:58,498 --> 00:55:02,459
right so if I look if the occluder

1137
00:55:00,268 --> 00:55:05,459
bounds here in remedy what I should get

1138
00:55:02,460 --> 00:55:07,710
is I should see these expand as we go

1139
00:55:05,460 --> 00:55:09,210
through right and and that is roughly

1140
00:55:07,710 --> 00:55:10,409
what's happening by the way you can't do

1141
00:55:09,210 --> 00:55:12,179
this in Visual Studio cuz the watch

1142
00:55:10,409 --> 00:55:15,920
window so bad you can see me just

1143
00:55:12,179 --> 00:55:15,919
watching these things expand right

1144
00:55:16,579 --> 00:55:20,759
people are always like oh you don't need

1145
00:55:19,409 --> 00:55:23,460
to do that you can just set a date a

1146
00:55:20,759 --> 00:55:25,559
break point it's like that's not why I

1147
00:55:23,460 --> 00:55:28,380
want a fast watch window I want it so I

1148
00:55:25,559 --> 00:55:29,999
can do stuff like this I don't care

1149
00:55:28,380 --> 00:55:32,608
about data breakpoints very often John

1150
00:55:29,998 --> 00:55:34,230
does though and I agree with him I just

1151
00:55:32,608 --> 00:55:36,210
don't use them that often what I want

1152
00:55:34,230 --> 00:55:37,679
though is this I want to be able to run

1153
00:55:36,210 --> 00:55:40,849
a routine and watch the numbers change

1154
00:55:37,679 --> 00:55:42,960
it's a computer that's what it does

1155
00:55:40,849 --> 00:55:46,048
anyway so we can go down here to the

1156
00:55:42,960 --> 00:55:47,068
root box and you can see us adding the

1157
00:55:46,048 --> 00:55:52,038
root box in here

1158
00:55:47,068 --> 00:55:56,219
these look valid to me if I actually

1159
00:55:52,039 --> 00:55:58,650
look at that root box value what I

1160
00:55:56,219 --> 00:56:03,389
should see here is that it has you know

1161
00:55:58,650 --> 00:56:05,519
a a valid child count once I split once

1162
00:56:03,389 --> 00:56:07,618
I run the splitter so

1163
00:56:05,518 --> 00:56:08,879
we can get rid of this root lightbox

1164
00:56:07,619 --> 00:56:13,979
thing we don't actually need this

1165
00:56:08,880 --> 00:56:15,898
anymore but anyway um so hopefully you

1166
00:56:13,978 --> 00:56:17,248
know this trial count thing that's - is

1167
00:56:15,898 --> 00:56:18,748
correct that's how many there should be

1168
00:56:17,248 --> 00:56:21,598
and the first challenge is that so that

1169
00:56:18,748 --> 00:56:30,238
looks reasonable um I don't know what

1170
00:56:21,599 --> 00:56:37,588
this is about calculate r FC reference

1171
00:56:30,239 --> 00:56:44,509
center what do we use that for do we

1172
00:56:37,588 --> 00:56:44,509
know what this is for so

1173
00:56:47,550 --> 00:56:55,470
oh that's the colors oh yeah I forgot

1174
00:56:53,309 --> 00:56:58,559
we're still doing average colors for

1175
00:56:55,469 --> 00:57:01,019
root boxes I don't think we do that

1176
00:56:58,559 --> 00:57:03,059
optimization anymore so we can actually

1177
00:57:01,019 --> 00:57:05,579
get rid of a lot of that stuff because

1178
00:57:03,059 --> 00:57:07,619
we're not really doing this anymore we

1179
00:57:05,579 --> 00:57:09,360
maybe should to be completely honest

1180
00:57:07,619 --> 00:57:12,389
with you like it's possible that we

1181
00:57:09,360 --> 00:57:18,210
should be doing that but I don't know

1182
00:57:12,389 --> 00:57:20,099
that we're gonna write like I I never

1183
00:57:18,210 --> 00:57:24,650
really came up with a coherent argument

1184
00:57:20,099 --> 00:57:26,699
of like how we would make distant boxes

1185
00:57:24,650 --> 00:57:30,030
properly produce good ray-tracing

1186
00:57:26,699 --> 00:57:31,710
results and the reason for that is we

1187
00:57:30,030 --> 00:57:33,720
just don't know how much light comes out

1188
00:57:31,710 --> 00:57:36,179
of an area in a particular direction

1189
00:57:33,719 --> 00:57:38,730
right now and we need to come up with

1190
00:57:36,179 --> 00:57:42,839
some argument for like how we would do

1191
00:57:38,730 --> 00:57:45,510
that so anyway if we go in here to

1192
00:57:42,840 --> 00:57:47,820
entropy index what we want to do now is

1193
00:57:45,510 --> 00:57:50,760
we want to develop validate that we're

1194
00:57:47,820 --> 00:57:54,059
actually casting something reasonable so

1195
00:57:50,760 --> 00:57:55,770
the Rea origin of zero is just made up

1196
00:57:54,059 --> 00:57:57,509
we don't really know where we should be

1197
00:57:55,769 --> 00:58:00,329
casting and so that's a little bit of a

1198
00:57:57,510 --> 00:58:03,620
bug in the sense that we probably would

1199
00:58:00,329 --> 00:58:06,210
want to figure out a reasonable location

1200
00:58:03,619 --> 00:58:08,159
but I don't really know like we could

1201
00:58:06,210 --> 00:58:09,630
save that data like we could save that

1202
00:58:08,159 --> 00:58:11,489
in the lighting dump potentially I

1203
00:58:09,630 --> 00:58:14,670
suppose other than that I don't really

1204
00:58:11,489 --> 00:58:17,759
know how we would do it so if we go

1205
00:58:14,670 --> 00:58:20,300
through here and also by the way that

1206
00:58:17,760 --> 00:58:20,300
reminds me

1207
00:58:21,079 --> 00:58:25,460
wherever that dump is

1208
00:58:37,340 --> 00:58:41,880
this should be set to false now cuz we

1209
00:58:40,349 --> 00:58:48,420
don't want to dump any more when we run

1210
00:58:41,880 --> 00:58:49,740
right anyway um so now that we're in the

1211
00:58:48,420 --> 00:58:52,019
raycast we should be able to just take a

1212
00:58:49,739 --> 00:58:57,509
look like what's the Rhea origin right

1213
00:58:52,019 --> 00:59:04,259
like where is this thing and I guess I

1214
00:58:57,510 --> 00:59:05,490
don't know that's a 4 wide right so you

1215
00:59:04,260 --> 00:59:20,810
know it's just zeroes

1216
00:59:05,489 --> 00:59:22,739
what's the raid direction there we go

1217
00:59:20,809 --> 00:59:27,420
there's probably a better way to look at

1218
00:59:22,739 --> 00:59:29,549
this but you know it's valid right and

1219
00:59:27,420 --> 00:59:33,690
so when we do a ray cast now we should

1220
00:59:29,550 --> 00:59:37,530
see ourselves walk this tree right like

1221
00:59:33,690 --> 00:59:38,039
we should walk the tree pushing boxes on

1222
00:59:37,530 --> 00:59:45,870
it

1223
00:59:38,039 --> 00:59:48,449
like so right and off we go yeah so I

1224
00:59:45,869 --> 00:59:50,009
mean I think we're doing a reasonable

1225
00:59:48,449 --> 00:59:52,619
job with that you know I think we're

1226
00:59:50,010 --> 00:59:54,810
okay and if we take a look at the

1227
00:59:52,619 --> 00:59:56,519
results in theory at the end of it we

1228
00:59:54,809 --> 00:59:58,860
should end up with a thing we can

1229
00:59:56,519 --> 01:00:01,500
validate to a certain extent right and

1230
00:59:58,860 --> 01:00:04,829
that is the diffuse Atlas should have

1231
01:00:01,500 --> 01:00:06,960
now I'm sorry the speck Atlas should

1232
01:00:04,829 --> 01:00:10,679
have something in it now

1233
01:00:06,960 --> 01:00:12,809
the problem is I I don't know that

1234
01:00:10,679 --> 01:00:15,569
there'll be much in it and the reason

1235
01:00:12,809 --> 01:00:19,860
for that is because you need some light

1236
01:00:15,570 --> 01:00:21,930
in order for that to happen and so in

1237
01:00:19,860 --> 01:00:23,309
theory there was some light but I don't

1238
01:00:21,929 --> 01:00:26,460
know if it'll last I get picked up on

1239
01:00:23,309 --> 01:00:30,779
one frame we'll see but assuming that

1240
01:00:26,460 --> 01:00:36,000
there is some light in the D in the spec

1241
01:00:30,780 --> 01:00:41,030
atlas at the end of it we should be able

1242
01:00:36,000 --> 01:00:41,030
to verify that that's working now

1243
01:00:42,420 --> 01:00:50,460
you probably want to put something in

1244
01:00:44,940 --> 01:00:52,619
the diffuse Atlas as well because

1245
01:00:50,460 --> 01:01:00,480
otherwise we're not testing the diffuse

1246
01:00:52,619 --> 01:01:04,798
Atlas atlas sampling it's a little

1247
01:01:00,480 --> 01:01:06,900
Squinkie right one way we could do that

1248
01:01:04,798 --> 01:01:10,650
is we could actually just do a capture

1249
01:01:06,900 --> 01:01:14,329
like we could when we do our debug dump

1250
01:01:10,650 --> 01:01:16,829
we could actually prep a buffer that has

1251
01:01:14,329 --> 01:01:28,109
everything about the light cast in it

1252
01:01:16,829 --> 01:01:33,170
and maybe that's look maybe that's

1253
01:01:28,108 --> 01:01:33,170
actually better right

1254
01:01:42,329 --> 01:01:46,949
because I'm just worried like thinking

1255
01:01:44,889 --> 01:01:51,389
it through I'm just worried because I

1256
01:01:46,949 --> 01:01:54,639
feel like we want to actually be able to

1257
01:01:51,389 --> 01:01:58,869
validate the whole thing to a certain

1258
01:01:54,639 --> 01:02:02,739
extent so I do wonder if maybe the right

1259
01:01:58,869 --> 01:02:09,699
solution here isn't to actually capture

1260
01:02:02,739 --> 01:02:12,009
the speck atlas the diffuse atlas sorry

1261
01:02:09,699 --> 01:02:15,039
the diffuse analyst at the start the

1262
01:02:12,010 --> 01:02:19,840
speck atlas at the end validate that we

1263
01:02:15,039 --> 01:02:21,670
get the update we expect I guess we need

1264
01:02:19,840 --> 01:02:25,990
them both spec is and a few sets start

1265
01:02:21,670 --> 01:02:29,680
and then spec atlas at end I think I

1266
01:02:25,989 --> 01:02:33,039
might do that um that seems a little bit

1267
01:02:29,679 --> 01:02:36,509
better and then we can validate them so

1268
01:02:33,039 --> 01:02:41,440
let's try that so if I actually go to

1269
01:02:36,510 --> 01:02:45,520
the lighting code so if we actually jump

1270
01:02:41,440 --> 01:02:47,579
over to handmade hero for a second and

1271
01:02:45,519 --> 01:02:50,079
in the handmade lighting code here I

1272
01:02:47,579 --> 01:02:56,889
where we're gonna do this this debug

1273
01:02:50,079 --> 01:03:05,670
dump data here this bit again like maybe

1274
01:02:56,889 --> 01:03:05,670
we just dump this as the spec Atlas

1275
01:03:08,940 --> 01:03:13,139
sorry I'm trying to think this through

1276
01:03:14,670 --> 01:03:27,490
so in end lighting computation here I

1277
01:03:21,219 --> 01:03:35,259
guess I would say hey there folks

1278
01:03:27,489 --> 01:03:38,589
maybe this actually happens here and we

1279
01:03:35,260 --> 01:03:42,310
dump like multiple things so in a

1280
01:03:38,590 --> 01:03:49,420
different in addition to the boxes we

1281
01:03:42,309 --> 01:03:55,009
would also dump the Atlas so right and

1282
01:03:49,420 --> 01:04:00,769
then I could just say solution

1283
01:03:55,010 --> 01:04:11,060
I'm sorry speck Atlas how does this work

1284
01:04:00,769 --> 01:04:15,739
again and there's a one that gets you

1285
01:04:11,059 --> 01:04:18,230
the entire size it's this so we just say

1286
01:04:15,739 --> 01:04:32,779
look I don't know tell me how big this

1287
01:04:18,230 --> 01:04:36,670
whole thing is dump it all right and at

1288
01:04:32,780 --> 01:04:39,200
that point we should have the ability if

1289
01:04:36,670 --> 01:04:41,659
we dump the diffuse Atlas and the speck

1290
01:04:39,199 --> 01:04:51,319
atlas to reproduce the entire thing

1291
01:04:41,659 --> 01:04:56,690
right so we can do you know source maybe

1292
01:04:51,320 --> 01:04:58,880
we call these like source so we do

1293
01:04:56,690 --> 01:05:00,710
source lightboxes source Beca atlas

1294
01:04:58,880 --> 01:05:03,590
source diffuse atlas that's what's like

1295
01:05:00,710 --> 01:05:06,230
coming into the routine and then we also

1296
01:05:03,590 --> 01:05:10,840
dump like at the end so when everyone's

1297
01:05:06,230 --> 01:05:19,309
like done right we dump those two so

1298
01:05:10,840 --> 01:05:25,039
here you know we also say like here's a

1299
01:05:19,309 --> 01:05:27,019
recap you know I'm saying to you does

1300
01:05:25,039 --> 01:05:29,059
that seem reasonable cuz it seems

1301
01:05:27,019 --> 01:05:31,849
reasonable to me like that feels like

1302
01:05:29,059 --> 01:05:33,320
what you would want to do because then

1303
01:05:31,849 --> 01:05:37,159
we actually know what the result should

1304
01:05:33,320 --> 01:05:39,440
be now there's a little bit more to it

1305
01:05:37,159 --> 01:05:42,769
than that because we need to know a

1306
01:05:39,440 --> 01:05:44,869
couple pieces of information too so I

1307
01:05:42,769 --> 01:05:47,630
might go ahead and say that there's like

1308
01:05:44,869 --> 01:05:50,329
actually like one additional thing that

1309
01:05:47,630 --> 01:05:54,200
we'll store which is like a lighting

1310
01:05:50,329 --> 01:05:58,779
debug dump struct or something I don't

1311
01:05:54,199 --> 01:05:58,779
know and in there we'd say stuff like

1312
01:06:01,000 --> 01:06:08,349
what was the voxel were actually trying

1313
01:06:05,570 --> 01:06:14,530
to cast and

1314
01:06:08,349 --> 01:06:14,529
what like the sizes of things were maybe

1315
01:06:15,250 --> 01:06:29,750
something like that could just dump this

1316
01:06:24,320 --> 01:06:37,280
piece of junk cuz I think that would

1317
01:06:29,750 --> 01:06:38,719
have everything right so yeah maybe we

1318
01:06:37,280 --> 01:06:42,560
just do that

1319
01:06:38,719 --> 01:07:00,289
maybe we just dump that and call it a

1320
01:06:42,559 --> 01:07:04,159
day so that would just take the size the

1321
01:07:00,289 --> 01:07:08,960
solution and dump the whole thing so I

1322
01:07:04,159 --> 01:07:09,500
don't know just a just a off the top of

1323
01:07:08,960 --> 01:07:13,010
my head

1324
01:07:09,500 --> 01:07:15,559
situation if we now run and made hero in

1325
01:07:13,010 --> 01:07:18,230
theory we get this back a complete dump

1326
01:07:15,559 --> 01:07:20,480
that we can actually validate which I

1327
01:07:18,230 --> 01:07:23,240
like better because as I make changes I

1328
01:07:20,480 --> 01:07:27,199
don't want to change the substantive

1329
01:07:23,239 --> 01:07:31,159
results much I would accept the little

1330
01:07:27,199 --> 01:07:32,629
wiggle room but not much right so if I

1331
01:07:31,159 --> 01:07:37,009
go ahead and say let's go over to win

1332
01:07:32,630 --> 01:07:45,079
through handmade and I run this now and

1333
01:07:37,010 --> 01:07:46,970
I go to the data for handmade debug in

1334
01:07:45,079 --> 01:07:49,940
here we've got this lightboxes dump I'm

1335
01:07:46,969 --> 01:07:52,759
gonna delete that I'm then gonna say

1336
01:07:49,940 --> 01:07:55,130
let's let's go to a situation we're

1337
01:07:52,760 --> 01:07:57,190
gonna test I don't know maybe one of

1338
01:07:55,130 --> 01:08:02,630
these bigger rooms out here like this

1339
01:07:57,190 --> 01:08:06,440
situation right and then I can go ahead

1340
01:08:02,630 --> 01:08:12,800
and say yeah let's strobe like capture

1341
01:08:06,440 --> 01:08:18,220
that so I'll go over to this variable

1342
01:08:12,800 --> 01:08:21,320
here just turn it on right

1343
01:08:18,220 --> 01:08:24,920
and now in theory we should have

1344
01:08:21,319 --> 01:08:30,349
captured that data in theory you know

1345
01:08:24,920 --> 01:08:34,190
who knows we'll find out so now if I

1346
01:08:30,350 --> 01:08:39,250
take a look at in this directory here we

1347
01:08:34,189 --> 01:08:41,299
go we've got a light box set we've got a

1348
01:08:39,250 --> 01:08:45,649
dump of that struct

1349
01:08:41,300 --> 01:08:51,430
we've got spec atlas diffuse Atlas right

1350
01:08:45,649 --> 01:08:51,429
we've got the results versus the source

1351
01:08:52,000 --> 01:08:57,319
we don't know if it worked but we've got

1352
01:08:53,930 --> 01:09:00,350
it so let's try now loading this stuff

1353
01:08:57,319 --> 01:09:02,989
in and running the routine the same way

1354
01:09:00,350 --> 01:09:04,579
that we are running it in the game and

1355
01:09:02,989 --> 01:09:08,809
the only difference would be we're not

1356
01:09:04,579 --> 01:09:11,630
gonna run it threaded right so if I go

1357
01:09:08,810 --> 01:09:15,320
into the lighting code for the game here

1358
01:09:11,630 --> 01:09:18,170
and we look at the set of things that

1359
01:09:15,319 --> 01:09:21,049
has to happen so what I want to do

1360
01:09:18,170 --> 01:09:22,520
inside the lighting prof. now is just

1361
01:09:21,050 --> 01:09:24,590
first I want to make something that

1362
01:09:22,520 --> 01:09:27,650
loads files because that's gonna be

1363
01:09:24,590 --> 01:09:31,850
necessary right so I want something that

1364
01:09:27,649 --> 01:09:34,759
loads files and I want something that

1365
01:09:31,850 --> 01:09:37,610
will do a test ray cast that's the same

1366
01:09:34,760 --> 01:09:42,710
way that we do the test ray cast in the

1367
01:09:37,609 --> 01:09:46,279
actual game itself so in here I more or

1368
01:09:42,710 --> 01:09:48,859
less want to just call and I guess to

1369
01:09:46,279 --> 01:09:54,170
some extent maybe I literally just want

1370
01:09:48,859 --> 01:09:57,979
to call the work function so in here if

1371
01:09:54,170 --> 01:10:02,569
we have this compute light propagation

1372
01:09:57,979 --> 01:10:08,000
work I think I just kind of want to do

1373
01:10:02,569 --> 01:10:09,380
that right so in here with build spatial

1374
01:10:08,000 --> 01:10:15,350
petition for lighting that gets called

1375
01:10:09,380 --> 01:10:16,779
directly where's my and lighting

1376
01:10:15,350 --> 01:10:20,030
computation

1377
01:10:16,779 --> 01:10:23,059
here it is so what I want to do is I

1378
01:10:20,029 --> 01:10:26,208
want to just kind of do this so I want I

1379
01:10:23,059 --> 01:10:28,159
want this to look the same right so I

1380
01:10:26,208 --> 01:10:30,198
want to go through here and say like

1381
01:10:28,158 --> 01:10:33,708
let's do this whole this entire thing

1382
01:10:30,198 --> 01:10:36,708
has to occur right so we want to do that

1383
01:10:33,708 --> 01:10:39,170
and the only difference is we're not

1384
01:10:36,708 --> 01:10:41,779
going to contemplate the multi-threaded

1385
01:10:39,170 --> 01:10:45,050
case so we're just going to literally

1386
01:10:41,779 --> 01:10:52,309
put like this exact thing in here so

1387
01:10:45,050 --> 01:10:55,788
we're gonna do this we're gonna do all

1388
01:10:52,309 --> 01:10:57,498
of this every last bit and then the only

1389
01:10:55,788 --> 01:10:59,359
difference is we'll never do that case

1390
01:10:57,498 --> 01:11:01,309
so we're just gonna run it on a single

1391
01:10:59,359 --> 01:11:06,259
thread but otherwise it's exactly the

1392
01:11:01,309 --> 01:11:09,380
same right so this right here should do

1393
01:11:06,260 --> 01:11:13,820
all of the light propagation that we

1394
01:11:09,380 --> 01:11:15,229
want everything works the only

1395
01:11:13,819 --> 01:11:19,488
difference is this lighting cue is

1396
01:11:15,229 --> 01:11:21,829
nonsense right so I think that's okay

1397
01:11:19,488 --> 01:11:24,919
since it doesn't do anything I should

1398
01:11:21,828 --> 01:11:26,538
just be able to call it with a zero so

1399
01:11:24,920 --> 01:11:28,699
that just means I need to make sure I

1400
01:11:26,538 --> 01:11:30,349
allocate one of these or a large enough

1401
01:11:28,698 --> 01:11:32,719
one of these on the lighting structure

1402
01:11:30,349 --> 01:11:35,719
but other than that it should be fine

1403
01:11:32,719 --> 01:11:37,760
and if I do it that way then now that

1404
01:11:35,719 --> 01:11:41,090
means we don't have to do this anymore

1405
01:11:37,760 --> 01:11:45,050
what I can do is run it multiple times

1406
01:11:41,090 --> 01:11:55,670
if I want to but basically like that's

1407
01:11:45,050 --> 01:11:58,788
the work I mean there it is right so off

1408
01:11:55,670 --> 01:11:59,449
we go this doesn't require any of these

1409
01:11:58,788 --> 01:12:05,658
things

1410
01:11:59,448 --> 01:12:06,708
I don't think which is a bit of a

1411
01:12:05,658 --> 01:12:09,288
problem because I'm not sure where

1412
01:12:06,708 --> 01:12:14,630
they're gonna get them from so if we go

1413
01:12:09,288 --> 01:12:17,198
to the that actual function where we are

1414
01:12:14,630 --> 01:12:17,199
doing the work

1415
01:12:19,739 --> 01:12:28,710
so this is a problem we have to actually

1416
01:12:23,979 --> 01:12:28,709
set this up so we want to do this

1417
01:12:31,380 --> 01:12:36,489
probably but to be completely honest

1418
01:12:34,720 --> 01:12:39,460
with you it doesn't make sense to have

1419
01:12:36,489 --> 01:12:41,199
that in our system if we look at why

1420
01:12:39,460 --> 01:12:43,270
we're getting this so if you look at

1421
01:12:41,199 --> 01:12:45,550
this command structure here if you look

1422
01:12:43,270 --> 01:12:47,200
at why it has to be there it's not there

1423
01:12:45,550 --> 01:12:50,110
for a very good reason because the only

1424
01:12:47,199 --> 01:12:53,289
thing it's actually doing is getting the

1425
01:12:50,109 --> 01:12:54,909
diffuse atlases out of it so I would say

1426
01:12:53,289 --> 01:12:56,979
a better way to do this would be to

1427
01:12:54,909 --> 01:12:58,479
actually just store those two things in

1428
01:12:56,979 --> 01:13:00,429
the work structure because they are

1429
01:12:58,479 --> 01:13:02,829
work-related right there are things that

1430
01:13:00,430 --> 01:13:05,350
have to happen for the work to actually

1431
01:13:02,829 --> 01:13:07,539
take place so what I would rather do is

1432
01:13:05,350 --> 01:13:09,700
say let's go ahead and keep these two

1433
01:13:07,539 --> 01:13:13,090
things in the system where they should

1434
01:13:09,699 --> 01:13:22,689
be which is here so get rid of that add

1435
01:13:13,090 --> 01:13:24,640
this and then when the work dispatch is

1436
01:13:22,689 --> 01:13:27,629
happening we can actually set these up

1437
01:13:24,640 --> 01:13:31,900
properly so the diffuse light Atlas

1438
01:13:27,630 --> 01:13:34,720
comes from a few scientists the specular

1439
01:13:31,899 --> 01:13:38,649
light Atlas comes from speck Atlas and

1440
01:13:34,720 --> 01:13:41,380
now everybody's more properly contained

1441
01:13:38,649 --> 01:13:43,659
like there isn't this load of garbage

1442
01:13:41,380 --> 01:13:45,550
happening right where we're passing

1443
01:13:43,659 --> 01:13:48,279
rendering crap down to the lighting for

1444
01:13:45,550 --> 01:13:50,140
no reason so that means the only change

1445
01:13:48,279 --> 01:13:51,909
we would have to make here is we just

1446
01:13:50,140 --> 01:13:54,100
have to make sure that those get set

1447
01:13:51,909 --> 01:13:57,489
inside the place where we were

1448
01:13:54,100 --> 01:13:59,770
previously setting the commands up so in

1449
01:13:57,489 --> 01:14:03,909
here right this just has to now be

1450
01:13:59,770 --> 01:14:11,410
diffuse light Atlas equals like diffuse

1451
01:14:03,909 --> 01:14:12,519
Atlas and now it should be fine we

1452
01:14:11,409 --> 01:14:18,220
shouldn't have any more trouble with

1453
01:14:12,520 --> 01:14:19,630
that I don't think anyone who was

1454
01:14:18,220 --> 01:14:24,520
previously doing that has to do the new

1455
01:14:19,630 --> 01:14:28,060
thing now but that should be fine these

1456
01:14:24,520 --> 01:14:29,860
are not addresses up anymore they're

1457
01:14:28,060 --> 01:14:37,660
just regular accesses because it's a

1458
01:14:29,859 --> 01:14:39,309
pointer and I think that should be good

1459
01:14:37,659 --> 01:14:44,189
what's the problem here work times

1460
01:14:39,310 --> 01:14:55,090
previous yes that's true there we go

1461
01:14:44,189 --> 01:14:58,329
okay oops so now I think we're set up to

1462
01:14:55,090 --> 01:14:59,650
run like exactly the same code which I

1463
01:14:58,329 --> 01:15:01,269
think we want because if I'm going to

1464
01:14:59,649 --> 01:15:03,479
start doing this performance analysis

1465
01:15:01,270 --> 01:15:06,130
for real I might as well do it for real

1466
01:15:03,479 --> 01:15:10,000
so what we need to do here is actually

1467
01:15:06,130 --> 01:15:12,550
load in the atlases because currently

1468
01:15:10,000 --> 01:15:15,430
we're not actually doing that and we

1469
01:15:12,550 --> 01:15:18,039
need to do that so what I'm gonna do is

1470
01:15:15,430 --> 01:15:20,170
take this piece of code here which is

1471
01:15:18,039 --> 01:15:24,909
the thing that actually loads files and

1472
01:15:20,170 --> 01:15:27,010
I'm just gonna load the files right so I

1473
01:15:24,909 --> 01:15:29,349
want to function here and the function

1474
01:15:27,010 --> 01:15:36,489
is just gonna be called like load entire

1475
01:15:29,350 --> 01:15:39,070
file something like this right oops it's

1476
01:15:36,489 --> 01:15:41,920
gonna take a file name to load it's

1477
01:15:39,069 --> 01:15:44,349
gonna do exactly this the same set of

1478
01:15:41,920 --> 01:15:48,250
work that this routine was doing before

1479
01:15:44,350 --> 01:15:50,800
and it's gonna load that file in to

1480
01:15:48,250 --> 01:15:55,829
memory now the problem is I'm gonna want

1481
01:15:50,800 --> 01:15:58,060
to know the size of the file probably so

1482
01:15:55,829 --> 01:16:00,159
well actually I guess I don't even

1483
01:15:58,060 --> 01:16:02,340
really need that so maybe we won't

1484
01:16:00,159 --> 01:16:02,340
bother

1485
01:16:02,510 --> 01:16:08,320
[Music]

1486
01:16:05,640 --> 01:16:08,860
you know what we're gonna do read it

1487
01:16:08,319 --> 01:16:14,319
this way

1488
01:16:08,859 --> 01:16:16,569
oops so we've got this thing called

1489
01:16:14,319 --> 01:16:18,309
struck buffer I'm gonna use it so

1490
01:16:16,569 --> 01:16:23,889
instead of returning a void star I'm

1491
01:16:18,310 --> 01:16:26,350
gonna return a buffer and what I'm gonna

1492
01:16:23,890 --> 01:16:28,329
do with the buffer is I'm gonna put in

1493
01:16:26,350 --> 01:16:31,030
the size and the pointer so that way you

1494
01:16:28,329 --> 01:16:34,210
get both back so in here this is gonna

1495
01:16:31,029 --> 01:16:38,170
be like result that count right and then

1496
01:16:34,210 --> 01:16:45,399
in here we're gonna do an F read into

1497
01:16:38,170 --> 01:16:47,350
result dot data right like that so now

1498
01:16:45,399 --> 01:16:49,509
we need to grab you know the stuff where

1499
01:16:47,350 --> 01:16:54,490
we actually open the file so like this

1500
01:16:49,510 --> 01:16:56,920
and we'll print the error message there

1501
01:16:54,489 --> 01:16:58,719
too so we'll load that in we'll get the

1502
01:16:56,920 --> 01:17:00,819
file out with the FTL

1503
01:16:58,720 --> 01:17:03,699
we'll get the designs out we'll have to

1504
01:17:00,819 --> 01:17:08,939
do our malloc so result data equals you

1505
01:17:03,699 --> 01:17:12,069
know Mal'akh so result that counts so

1506
01:17:08,939 --> 01:17:18,119
via see how big the file is allocate the

1507
01:17:12,069 --> 01:17:18,119
data copy it into memory like so I and

1508
01:17:18,630 --> 01:17:27,400
be done with it right I also want to do

1509
01:17:24,939 --> 01:17:30,369
a thing called exercise where if we want

1510
01:17:27,399 --> 01:17:32,920
to you can pad your results out like

1511
01:17:30,369 --> 01:17:34,090
it's like so and that's just if you want

1512
01:17:32,920 --> 01:17:35,140
head room at the end of your buffer

1513
01:17:34,090 --> 01:17:35,710
because you're gonna add more stuff to

1514
01:17:35,140 --> 01:17:37,690
it or whatever

1515
01:17:35,710 --> 01:17:39,460
so load entire file just gets all the

1516
01:17:37,689 --> 01:17:41,679
information we need there so now we can

1517
01:17:39,460 --> 01:17:43,619
actually do a thing where actually we'll

1518
01:17:41,680 --> 01:17:47,710
just load all of this stuff right so

1519
01:17:43,619 --> 01:17:49,090
we're not going to do this anymore like

1520
01:17:47,710 --> 01:17:54,039
we're not gonna have you specify these

1521
01:17:49,090 --> 01:17:56,619
files I'm sorry we're just going to load

1522
01:17:54,039 --> 01:18:01,539
them all in so we know what they were

1523
01:17:56,619 --> 01:18:03,849
because we dumped them right so we're

1524
01:18:01,539 --> 01:18:05,350
gonna go ahead and and grab them in the

1525
01:18:03,850 --> 01:18:08,880
same way that we were doing them here

1526
01:18:05,350 --> 01:18:08,880
with the debug dump file

1527
01:18:12,050 --> 01:18:17,929
so all of this stuff we're gonna grab so

1528
01:18:15,840 --> 01:18:20,219
I'm gonna go ahead and Lemongrab here

1529
01:18:17,929 --> 01:18:36,179
I'm gonna Lemongrab like all of these

1530
01:18:20,219 --> 01:18:37,920
like so and there's one more which is

1531
01:18:36,179 --> 01:18:54,929
like the results set so we're gonna grab

1532
01:18:37,920 --> 01:18:56,909
those two so in here if we then say what

1533
01:18:54,929 --> 01:18:59,819
are the files we've got buffer we've got

1534
01:18:56,909 --> 01:19:03,109
like source lighting that's gonna be

1535
01:18:59,819 --> 01:19:03,109
like load entire file

1536
01:19:04,500 --> 01:19:10,909
we've got source light boxes equals load

1537
01:19:08,279 --> 01:19:10,909
entire file

1538
01:19:10,939 --> 01:19:19,948
we've got source spec atlas let's load

1539
01:19:15,179 --> 01:19:26,310
entire file source diffuse Atlas equals

1540
01:19:19,948 --> 01:19:33,689
the entire file result spec atlas load

1541
01:19:26,310 --> 01:19:39,090
entire file and we've got result defuse

1542
01:19:33,689 --> 01:19:42,569
atlas entire file so that will load

1543
01:19:39,090 --> 01:19:44,699
everything we have and we might as well

1544
01:19:42,569 --> 01:19:46,738
F close these even though it doesn't

1545
01:19:44,698 --> 01:19:50,759
actually matter because we don't

1546
01:19:46,738 --> 01:19:53,579
actually care and we should print out

1547
01:19:50,760 --> 01:19:58,699
the right file name here and that seems

1548
01:19:53,579 --> 01:19:58,698
good so once we have all of these

1549
01:19:59,960 --> 01:20:03,679
probably do something like this

1550
01:20:10,439 --> 01:20:28,000
and just say hey like if there was data

1551
01:20:14,979 --> 01:20:37,388
in all of them something like this then

1552
01:20:28,000 --> 01:20:38,800
we'll give it a shot so assuming that we

1553
01:20:37,389 --> 01:20:40,449
get data in all of them we'll try

1554
01:20:38,800 --> 01:20:42,070
running the raycast otherwise we just

1555
01:20:40,448 --> 01:20:43,899
won't and it will already have printed

1556
01:20:42,069 --> 01:20:49,389
out some kind of an error presumably but

1557
01:20:43,899 --> 01:20:55,988
like we'll just say you know unable to

1558
01:20:49,389 --> 01:21:01,960
run raycast test due to missing data

1559
01:20:55,988 --> 01:21:04,809
just give us a clue if that happens so

1560
01:21:01,960 --> 01:21:07,329
that's everything now we need to use

1561
01:21:04,810 --> 01:21:09,850
this data in some way that's actually

1562
01:21:07,329 --> 01:21:11,948
constructed so the first thing that we

1563
01:21:09,850 --> 01:21:13,929
can do is we can move this stuff into

1564
01:21:11,948 --> 01:21:16,750
the actual routine where it actually

1565
01:21:13,929 --> 01:21:19,949
happens so what we can do here is say

1566
01:21:16,750 --> 01:21:23,109
all right the global lighting solution

1567
01:21:19,948 --> 01:21:24,158
actually I'm going to work that way

1568
01:21:23,109 --> 01:21:26,049
there isn't going to be a global

1569
01:21:24,158 --> 01:21:29,529
lighting solution instead when we set

1570
01:21:26,050 --> 01:21:32,139
all this stuff up here right and we go

1571
01:21:29,529 --> 01:21:37,448
to do our test ray cast with whatever it

1572
01:21:32,139 --> 01:21:38,829
is that we're going to test right what

1573
01:21:37,448 --> 01:21:40,839
we want to do here is say well we

1574
01:21:38,829 --> 01:21:45,519
already have a solution now so our

1575
01:21:40,840 --> 01:21:48,159
lighting solution is just gonna be like

1576
01:21:45,520 --> 01:21:50,830
our the thing we dumped right the struck

1577
01:21:48,158 --> 01:21:52,269
that we dumped out that's that's it

1578
01:21:50,829 --> 01:21:56,050
that's the lighting solution we're going

1579
01:21:52,270 --> 01:21:58,150
to use so the data from that file is the

1580
01:21:56,050 --> 01:22:00,579
lighting solution as it was when we

1581
01:21:58,149 --> 01:22:02,289
dumped it so that's what we want now if

1582
01:22:00,579 --> 01:22:06,488
we dumped it at their appropriate place

1583
01:22:02,289 --> 01:22:08,350
which I think we did t Update blend is

1584
01:22:06,488 --> 01:22:09,698
set to whatever TM date blend was going

1585
01:22:08,350 --> 01:22:12,280
to be set to so we don't have to set

1586
01:22:09,698 --> 01:22:14,049
that presumably the series was also

1587
01:22:12,279 --> 01:22:17,529
whatever the series was supposed to be

1588
01:22:14,050 --> 01:22:19,180
because that doesn't get set either the

1589
01:22:17,529 --> 01:22:20,439
sampling spheres we're going to have to

1590
01:22:19,180 --> 01:22:22,720
said to the samplings for table because

1591
01:22:20,439 --> 01:22:25,119
that's an address we don't have that the

1592
01:22:22,720 --> 01:22:26,500
Vox cell dim and the in Vox cell dim we

1593
01:22:25,119 --> 01:22:29,019
already know what they are so we don't

1594
01:22:26,500 --> 01:22:30,220
need to use those and that means that

1595
01:22:29,020 --> 01:22:35,100
the fundamental unit doesn't have to get

1596
01:22:30,220 --> 01:22:37,659
set so now we're using our actual data

1597
01:22:35,100 --> 01:22:40,900
which is good right that's what we

1598
01:22:37,659 --> 01:22:42,939
actually want to know and in theory we

1599
01:22:40,899 --> 01:22:44,829
can probably we probably should have

1600
01:22:42,939 --> 01:22:46,569
saved this data out but I think we'll be

1601
01:22:44,829 --> 01:22:49,899
okay if we just because we know what it

1602
01:22:46,569 --> 01:22:52,119
is so it should be fine so when we make

1603
01:22:49,899 --> 01:22:54,849
our light atlases here

1604
01:22:52,119 --> 01:22:57,189
and we're ready to go the only problem

1605
01:22:54,850 --> 01:22:58,930
is the setting the texels we need to

1606
01:22:57,189 --> 01:23:01,419
actually set these to the actual texels

1607
01:22:58,930 --> 01:23:03,340
that they were but we know what they

1608
01:23:01,420 --> 01:23:04,539
were because we have them here so we

1609
01:23:03,340 --> 01:23:07,480
should be able to do it and just say

1610
01:23:04,539 --> 01:23:10,539
look the source spec atlas is where

1611
01:23:07,479 --> 01:23:14,079
you're getting those pixels from right

1612
01:23:10,539 --> 01:23:17,909
and the source diffuse atlas is where

1613
01:23:14,079 --> 01:23:23,550
you're getting these texels from and

1614
01:23:17,909 --> 01:23:30,130
then i think you just run the code I

1615
01:23:23,550 --> 01:23:33,000
don't know I mean right so I think if we

1616
01:23:30,130 --> 01:23:38,680
just clean this up now that's the thing

1617
01:23:33,000 --> 01:23:43,270
that we can run and have a little party

1618
01:23:38,680 --> 01:23:48,010
with our friends I don't know

1619
01:23:43,270 --> 01:23:51,700
so anyway mm-hmm that does everything

1620
01:23:48,010 --> 01:23:53,190
except the light boxes which we haven't

1621
01:23:51,699 --> 01:23:56,260
used yet

1622
01:23:53,189 --> 01:23:58,419
excuse me so we can assume the

1623
01:23:56,260 --> 01:24:00,880
excercises zero in all cases except for

1624
01:23:58,420 --> 01:24:03,489
for example in the case with the light

1625
01:24:00,880 --> 01:24:05,590
boxes for the time being we need the

1626
01:24:03,489 --> 01:24:06,880
padding there now we don't need very

1627
01:24:05,590 --> 01:24:09,130
much padding I don't know how much

1628
01:24:06,880 --> 01:24:11,859
padding we need let's just say we need a

1629
01:24:09,130 --> 01:24:14,739
massive amount of padding who cares it's

1630
01:24:11,859 --> 01:24:16,359
just a test app mm-hmm so that'll

1631
01:24:14,739 --> 01:24:19,119
allocate way more memory than it needs

1632
01:24:16,359 --> 01:24:21,219
then what we know is the boxes here so

1633
01:24:19,119 --> 01:24:23,409
you know in this thing where we were

1634
01:24:21,220 --> 01:24:27,400
going to set up these the the solution

1635
01:24:23,409 --> 01:24:30,489
boxes here we need to actually like this

1636
01:24:27,399 --> 01:24:33,039
stuff right the box count will be

1637
01:24:30,489 --> 01:24:35,529
correct but the box pointer will be

1638
01:24:33,039 --> 01:24:38,100
you know I'm saying to you you know I'm

1639
01:24:35,529 --> 01:24:46,479
saying to you right the boxes are not

1640
01:24:38,100 --> 01:24:49,180
there we dumped the struct it all it all

1641
01:24:46,479 --> 01:24:50,769
it has is a pointer to boxes that

1642
01:24:49,180 --> 01:24:52,990
pointer points to nothing because we

1643
01:24:50,770 --> 01:24:54,490
just loaded a value out of a file it's

1644
01:24:52,989 --> 01:24:56,649
not pointing anything so we have to

1645
01:24:54,489 --> 01:25:07,229
redirect it to point to the actual boxes

1646
01:24:56,649 --> 01:25:12,279
we saved which that will do so I think

1647
01:25:07,229 --> 01:25:13,869
mm-hmm that should run the test now we

1648
01:25:12,279 --> 01:25:15,670
probably screwed something up but at

1649
01:25:13,869 --> 01:25:19,779
least that's the that's the idea right

1650
01:25:15,670 --> 01:25:24,069
so you get the idea let's run it and and

1651
01:25:19,779 --> 01:25:31,989
we're gonna have to set our source up to

1652
01:25:24,069 --> 01:25:34,029
be here yeah um so now let's go ahead

1653
01:25:31,989 --> 01:25:35,769
and and go in debug mode let's debug

1654
01:25:34,029 --> 01:25:37,989
this get it working and then validate

1655
01:25:35,770 --> 01:25:43,270
the results to see if we can get them to

1656
01:25:37,989 --> 01:25:45,429
run the right stuff right okay so in

1657
01:25:43,270 --> 01:25:47,320
test rate cast oh yeah we forgot to

1658
01:25:45,430 --> 01:25:48,789
allocate the work solutions that's

1659
01:25:47,319 --> 01:25:50,529
another thing that we need to do from

1660
01:25:48,789 --> 01:25:53,829
the lighting cuz that gets allocated on

1661
01:25:50,529 --> 01:25:57,939
begin on an it rather um so here's that

1662
01:25:53,829 --> 01:26:03,250
code so let's just do solution work I

1663
01:25:57,939 --> 01:26:06,009
don't know what this whoops I don't

1664
01:26:03,250 --> 01:26:09,060
actually know what that's called what is

1665
01:26:06,010 --> 01:26:09,060
that called it's called

1666
01:26:13,449 --> 01:26:21,949
works so I want to do a man lock there

1667
01:26:18,199 --> 01:26:26,199
to get a lighting work array so I'm just

1668
01:26:21,949 --> 01:26:27,470
gonna do a malloc size of lighting work

1669
01:26:26,199 --> 01:26:35,179
oops

1670
01:26:27,470 --> 01:26:41,720
work times oh and we need an alignment

1671
01:26:35,180 --> 01:26:44,420
here well we could use an aligned malloc

1672
01:26:41,720 --> 01:26:47,150
I don't know do can we just use push

1673
01:26:44,420 --> 01:26:53,119
array can I just use push it right here

1674
01:26:47,149 --> 01:26:54,949
I propped you know what I can't use push

1675
01:26:53,119 --> 01:26:56,689
it right that's a lie

1676
01:26:54,949 --> 01:26:59,179
I can't use push array because we would

1677
01:26:56,689 --> 01:27:02,149
have to have a platform allocator hooked

1678
01:26:59,180 --> 01:27:04,820
up so I guess I'll try and aligned

1679
01:27:02,149 --> 01:27:07,789
malloc maybe although what I could do

1680
01:27:04,819 --> 01:27:13,819
here is force it to be aligned by doing

1681
01:27:07,789 --> 01:27:17,180
something like using a line as right so

1682
01:27:13,819 --> 01:27:25,099
in what's the name of that thing in C++

1683
01:27:17,180 --> 01:27:27,890
is crappy nonsense all right so a line

1684
01:27:25,100 --> 01:27:29,630
as should work right so in theory we

1685
01:27:27,890 --> 01:27:40,670
should be able to do something like this

1686
01:27:29,630 --> 01:27:45,230
where we just say look a line as 64 well

1687
01:27:40,670 --> 01:27:47,420
actually no I take it back since we're

1688
01:27:45,229 --> 01:27:49,879
running single threaded we don't care

1689
01:27:47,420 --> 01:27:51,409
about false sharing here so actually we

1690
01:27:49,880 --> 01:27:52,489
don't care if this is aligned at all

1691
01:27:51,409 --> 01:27:56,840
that doesn't matter

1692
01:27:52,489 --> 01:27:59,269
nevermind we're fine yeah yeah we're

1693
01:27:56,840 --> 01:28:02,060
fine we don't care about this so we just

1694
01:27:59,270 --> 01:28:04,130
need enough of these to make sense and

1695
01:28:02,060 --> 01:28:06,980
if I remember correctly the calculation

1696
01:28:04,130 --> 01:28:09,500
for that was we just want this right

1697
01:28:06,979 --> 01:28:12,949
which we we have we know that number

1698
01:28:09,500 --> 01:28:14,510
right so I think we're okay now we've

1699
01:28:12,949 --> 01:28:18,319
got the works let's see what else goes

1700
01:28:14,510 --> 01:28:22,130
on in here so there we go we ran the

1701
01:28:18,319 --> 01:28:25,309
test case and running the test case we

1702
01:28:22,130 --> 01:28:26,569
now at the end of this the spec Atlas

1703
01:28:25,310 --> 01:28:31,730
array

1704
01:28:26,569 --> 01:28:33,289
of texels should be updated right so

1705
01:28:31,729 --> 01:28:35,689
what we want to do is try to validate

1706
01:28:33,289 --> 01:28:41,779
that we know that we've got like a

1707
01:28:35,689 --> 01:28:47,149
source here where we can say whatever

1708
01:28:41,779 --> 01:28:56,109
the result spec Atlas is that we were

1709
01:28:47,149 --> 01:28:58,969
looking at and we've also got our result

1710
01:28:56,109 --> 01:29:05,719
or I guess we should it's not source

1711
01:28:58,970 --> 01:29:09,070
texels it's it's the thing we want to

1712
01:29:05,720 --> 01:29:15,619
test against this is the expected and

1713
01:29:09,069 --> 01:29:20,500
this is what we got right so this is

1714
01:29:15,619 --> 01:29:27,260
going to be our texels so get texts get

1715
01:29:20,500 --> 01:29:29,689
light atlas texels so we just want to

1716
01:29:27,260 --> 01:29:35,690
get the light atlas texels of our spec

1717
01:29:29,689 --> 01:29:39,079
atlas right like so so what we can do

1718
01:29:35,689 --> 01:29:41,389
now is compare these so I'm just gonna

1719
01:29:39,079 --> 01:29:47,180
ask how many of these there are so like

1720
01:29:41,390 --> 01:29:50,420
how many texels there are in the spec

1721
01:29:47,180 --> 01:29:53,170
atlas and then I'm just going to loop

1722
01:29:50,420 --> 01:29:53,170
over them

1723
01:30:00,908 --> 01:30:07,939
and so all I'm doing here is reading in

1724
01:30:05,060 --> 01:30:09,710
all of the texels that we expected to

1725
01:30:07,939 --> 01:30:12,229
get and all of the ones that we actually

1726
01:30:09,710 --> 01:30:24,350
did get and I'm just gonna have a total

1727
01:30:12,229 --> 01:30:26,329
error accumulator right so I'm gonna say

1728
01:30:24,350 --> 01:30:29,960
we expected this oops

1729
01:30:26,329 --> 01:30:31,550
expect heed we expected this we got this

1730
01:30:29,960 --> 01:30:33,109
I'm subtracting the tube taking the

1731
01:30:31,550 --> 01:30:35,210
absolute values so I can just say this

1732
01:30:33,109 --> 01:30:36,679
is how much error there was we look at

1733
01:30:35,210 --> 01:30:43,130
how much there is and then we just say

1734
01:30:36,679 --> 01:30:46,340
look that's the total error right we can

1735
01:30:43,130 --> 01:30:51,170
also say total error protects 'el and

1736
01:30:46,340 --> 01:31:03,020
that's just going to be the textile

1737
01:30:51,170 --> 01:31:06,350
count that we have so whatever the text

1738
01:31:03,020 --> 01:31:11,900
of count is we can divide the total

1739
01:31:06,350 --> 01:31:13,909
error by the text account and that's how

1740
01:31:11,899 --> 01:31:15,889
many how much air there is protect so

1741
01:31:13,908 --> 01:31:19,549
now to get this routine working we would

1742
01:31:15,890 --> 01:31:25,159
like to see zero right so if I go here

1743
01:31:19,550 --> 01:31:32,230
and I run light prof we'd like to see no

1744
01:31:25,158 --> 01:31:37,009
error at all right and we sort of do

1745
01:31:32,229 --> 01:31:44,988
meaning that's pretty good it's weird

1746
01:31:37,010 --> 01:31:47,960
that we saw any at all because you would

1747
01:31:44,988 --> 01:31:49,549
expect this to run the same but we

1748
01:31:47,960 --> 01:31:51,529
didn't compile in release mode so it's

1749
01:31:49,550 --> 01:31:53,810
possible that it's just like optimise

1750
01:31:51,529 --> 01:31:58,029
some floating point optic ount for that

1751
01:31:53,810 --> 01:32:01,270
probably so let's try and release mode

1752
01:31:58,029 --> 01:32:01,269
same deal

1753
01:32:01,750 --> 01:32:11,800
so I'm not sure about that it's

1754
01:32:05,529 --> 01:32:14,489
incredibly low error to have if there

1755
01:32:11,800 --> 01:32:14,489
was something off

1756
01:32:30,869 --> 01:32:37,989
so the total number of texels is six

1757
01:32:35,319 --> 01:32:44,590
hundred and fourteen thousand and the

1758
01:32:37,989 --> 01:32:46,719
total error is only 324 per Texel the

1759
01:32:44,590 --> 01:32:49,659
error would be invisible that's below

1760
01:32:46,720 --> 01:32:54,460
the threshold you can actually see when

1761
01:32:49,659 --> 01:32:58,649
quantized down to 8-bit so let's just

1762
01:32:54,460 --> 01:33:06,369
for my own sanity let's just try

1763
01:32:58,649 --> 01:33:08,649
breaking something here so let's see

1764
01:33:06,369 --> 01:33:13,390
what the error would be if I actually

1765
01:33:08,649 --> 01:33:17,199
just like incorrectly like tracked

1766
01:33:13,390 --> 01:33:19,539
something so for example oh I know what

1767
01:33:17,199 --> 01:33:24,960
so let's suppose we do a different blend

1768
01:33:19,539 --> 01:33:24,960
so in here after we set the solution up

1769
01:33:25,289 --> 01:33:28,989
let's set the T update blend to one

1770
01:33:27,689 --> 01:33:35,109
forget it

1771
01:33:28,989 --> 01:33:38,859
let's just go go nuts right because

1772
01:33:35,109 --> 01:33:42,630
again this is the sum so we're only

1773
01:33:38,859 --> 01:33:46,000
blending 95% saz well so if we're gonna

1774
01:33:42,630 --> 01:33:50,100
our errors already dropped synthetically

1775
01:33:46,000 --> 01:33:50,100
some little just a little worried right

1776
01:33:52,020 --> 01:33:57,700
yeah so we got this is not right like

1777
01:33:54,760 --> 01:34:03,610
that should be like super Airy so I made

1778
01:33:57,699 --> 01:34:07,349
a mistake here not sure what the mistake

1779
01:34:03,609 --> 01:34:07,349
I made is but I made one

1780
01:34:10,500 --> 01:34:15,720
because I mean setting the ste update

1781
01:34:12,630 --> 01:34:19,520
blend to one should have given us a

1782
01:34:15,720 --> 01:34:19,520
drastically different result right

1783
01:34:31,579 --> 01:34:47,029
so what's wrong here we load everything

1784
01:34:40,140 --> 01:34:51,320
in do our raycast

1785
01:34:47,029 --> 01:34:56,359
we've set our sources up we test we load

1786
01:34:51,319 --> 01:34:56,359
expected texels out of result spec Atlas

1787
01:34:57,350 --> 01:35:05,670
which is like not touched right we don't

1788
01:35:00,479 --> 01:35:08,399
do anything with that we sum the error

1789
01:35:05,670 --> 01:35:12,710
and this should make us get like totally

1790
01:35:08,399 --> 01:35:12,710
hosed right

1791
01:35:24,609 --> 01:35:30,069
so at least that changes the total error

1792
01:35:38,868 --> 01:35:42,948
so something's a little fishy so let's

1793
01:35:41,418 --> 01:35:44,090
actually take a look and see if we can

1794
01:35:42,948 --> 01:35:45,768
figure out what's going on here cuz this

1795
01:35:44,090 --> 01:35:48,559
is a little bit busted I think it might

1796
01:35:45,769 --> 01:35:50,119
just be hey because that update is so

1797
01:35:48,559 --> 01:35:51,409
weird I mean like let's say I do this I

1798
01:35:50,118 --> 01:35:56,228
should be I mean I should be able to get

1799
01:35:51,408 --> 01:35:56,228
a pretty crazy error out of this right

1800
01:35:59,109 --> 01:36:06,128
seems reasonable not sure why it's imp

1801
01:36:14,289 --> 01:36:24,800
there we go so for whatever reason it

1802
01:36:22,488 --> 01:36:28,968
looks like that's just T update blend

1803
01:36:24,800 --> 01:36:31,760
equals one is not enough somehow to make

1804
01:36:28,969 --> 01:36:37,340
the error as much as I think it should

1805
01:36:31,760 --> 01:36:39,199
come out to be which is a little bit

1806
01:36:37,340 --> 01:36:41,389
weird so I'm a little freaked out but

1807
01:36:39,198 --> 01:36:43,009
we'll see we'll keep going so at least

1808
01:36:41,389 --> 01:36:45,230
now we have a way of validating and

1809
01:36:43,010 --> 01:36:46,880
we're not really in the ballpark here so

1810
01:36:45,229 --> 01:36:49,459
something's a little bit up and I'm not

1811
01:36:46,880 --> 01:36:50,989
sure exactly what it is we have our

1812
01:36:49,460 --> 01:36:57,079
diffuse scentless in our spec up atlas

1813
01:36:50,988 --> 01:36:59,809
set up in theory I guess one possibility

1814
01:36:57,079 --> 01:37:01,698
too is that I don't know if that if we

1815
01:36:59,810 --> 01:37:11,480
actually dumped those correctly like

1816
01:37:01,698 --> 01:37:15,439
maybe I dumped the wrong things so this

1817
01:37:11,479 --> 01:37:21,198
dumps the lighting solution this dumps

1818
01:37:15,439 --> 01:37:26,629
the light boxes as you would expect

1819
01:37:21,198 --> 01:37:37,189
that's the spec Atlas texels tested a

1820
01:37:26,630 --> 01:37:40,000
few set lists excells then it runs okay

1821
01:37:37,189 --> 01:37:40,000
so actually

1822
01:37:46,340 --> 01:37:51,470
no cuz okay so that will we're now doing

1823
01:37:49,189 --> 01:37:53,029
exactly that so we're actually doing the

1824
01:37:51,470 --> 01:37:56,119
whole thing too right

1825
01:37:53,029 --> 01:37:58,819
we're actually doing the this part as

1826
01:37:56,119 --> 01:38:01,159
well right so we're actually doing the

1827
01:37:58,819 --> 01:38:03,529
part where we fill in the everything so

1828
01:38:01,159 --> 01:38:06,199
everything is happening there's nothing

1829
01:38:03,529 --> 01:38:15,619
we're not doing now so again I'm just

1830
01:38:06,199 --> 01:38:18,349
not sure I'm not sure what we failed to

1831
01:38:15,619 --> 01:38:22,269
account for there or what our actual bug

1832
01:38:18,350 --> 01:38:22,270
there like what we're not setting up ah

1833
01:38:26,199 --> 01:38:33,380
we're not doing this we're not doing

1834
01:38:29,899 --> 01:38:36,799
this so that has to happen as well

1835
01:38:33,380 --> 01:38:42,130
right because the diffuse light Maps

1836
01:38:36,800 --> 01:38:42,130
probably aren't saved here they might be

1837
01:38:47,578 --> 01:38:53,368
nope they are so did a few suede maps

1838
01:38:50,460 --> 01:38:55,050
will be set up to the light sampling

1839
01:38:53,368 --> 01:38:56,519
spheres won't be so we have to make sure

1840
01:38:55,050 --> 01:38:58,590
those are set up but everything else

1841
01:38:56,520 --> 01:38:59,909
would be right everything else would

1842
01:38:58,590 --> 01:39:01,679
just be stored there's no other pointers

1843
01:38:59,908 --> 01:39:05,969
in here that we care about we restored

1844
01:39:01,679 --> 01:39:18,090
that one we create this one and we

1845
01:39:05,969 --> 01:39:26,189
update that one right right there so

1846
01:39:18,090 --> 01:39:28,800
we're running the exact same code using

1847
01:39:26,189 --> 01:39:31,348
the exact same settings and we're

1848
01:39:28,800 --> 01:39:33,739
getting the wrong results out why is it

1849
01:39:31,349 --> 01:39:33,739
happening

1850
01:39:34,069 --> 01:39:41,179
what's the secret and I don't know

1851
01:39:42,020 --> 01:39:45,279
[Music]

1852
01:39:52,429 --> 01:39:56,998
so we dump them down here does anything

1853
01:39:55,078 --> 01:40:06,838
happen to them in between I don't think

1854
01:39:56,998 --> 01:40:09,300
there is I don't see anything so I don't

1855
01:40:06,838 --> 01:40:10,948
know I know how much time do I have left

1856
01:40:09,300 --> 01:40:13,439
here to look at this I guess I have

1857
01:40:10,948 --> 01:40:15,868
eight minutes it's not very long so we

1858
01:40:13,439 --> 01:40:18,599
want this to work more exactly if there

1859
01:40:15,868 --> 01:40:20,308
was a very tiny amount of change I maybe

1860
01:40:18,599 --> 01:40:22,319
say it could be okay due to the

1861
01:40:20,309 --> 01:40:24,239
difference between the two compiles

1862
01:40:22,319 --> 01:40:25,708
perhaps but I don't really feel

1863
01:40:24,238 --> 01:40:28,558
comfortable with it the way it is now I

1864
01:40:25,708 --> 01:40:29,969
think it's wrong so I want to find a way

1865
01:40:28,559 --> 01:40:32,579
to figure out why we're getting

1866
01:40:29,969 --> 01:40:35,908
differences here between the two pieces

1867
01:40:32,578 --> 01:40:46,858
of code because as far as I know we're

1868
01:40:35,908 --> 01:40:49,679
running them the same way I think that

1869
01:40:46,859 --> 01:40:56,179
doesn't do a clear or anything so that

1870
01:40:49,679 --> 01:40:59,179
should be fine and those look both

1871
01:40:56,179 --> 01:40:59,179
reasonable

1872
01:41:03,710 --> 01:41:11,460
yes so I and I don't really see anything

1873
01:41:07,619 --> 01:41:15,300
else here that that bothers me much so

1874
01:41:11,460 --> 01:41:17,909
yeah hmm that's a puzzler

1875
01:41:15,300 --> 01:41:22,070
why wouldn't we get a similar results

1876
01:41:17,909 --> 01:41:22,069
here I don't actually know

1877
01:41:32,159 --> 01:41:47,130
what happens inside compute light

1878
01:41:34,380 --> 01:41:48,989
propagation work oops we look at the

1879
01:41:47,130 --> 01:41:51,390
work the solution the juice is not

1880
01:41:48,989 --> 01:41:54,269
specified okay we get the ant entropy

1881
01:41:51,390 --> 01:41:57,180
out of the work the entropy in this case

1882
01:41:54,270 --> 01:41:58,860
is just the random next to the series

1883
01:41:57,180 --> 01:42:00,659
that should be set the same in both

1884
01:41:58,859 --> 01:42:03,179
cases because that's the entropy has

1885
01:42:00,659 --> 01:42:04,859
something to do with it but that should

1886
01:42:03,180 --> 01:42:06,810
be fine because we're sending those this

1887
01:42:04,859 --> 01:42:09,269
stuff we don't care about because it

1888
01:42:06,810 --> 01:42:11,160
again came from the things that the

1889
01:42:09,270 --> 01:42:14,670
speck atlas we do have to have set right

1890
01:42:11,159 --> 01:42:16,529
but as far as we know we did we just do

1891
01:42:14,670 --> 01:42:18,239
basic stuff with the tiles here we do

1892
01:42:16,529 --> 01:42:32,039
exactly what we expect we run full cast

1893
01:42:18,239 --> 01:42:35,399
we update here I don't get it I don't

1894
01:42:32,039 --> 01:42:36,689
see the problem so you may have to start

1895
01:42:35,399 --> 01:42:37,979
on this tomorrow because I don't see the

1896
01:42:36,689 --> 01:42:40,739
problem unless somebody else caught it

1897
01:42:37,979 --> 01:42:43,739
why we shouldn't be able to get similar

1898
01:42:40,739 --> 01:42:46,349
results out of both of these so I'm not

1899
01:42:43,739 --> 01:42:48,809
sure why we're running this exact code

1900
01:42:46,350 --> 01:42:51,390
base as far as I know so now we're not

1901
01:42:48,810 --> 01:42:53,700
we're not really doing any test version

1902
01:42:51,390 --> 01:42:59,640
we're just running the exact code pretty

1903
01:42:53,699 --> 01:43:03,960
much identically right and we run each

1904
01:42:59,640 --> 01:43:07,039
work in series which I suppose is not

1905
01:43:03,960 --> 01:43:10,819
exactly the same but I don't know why

1906
01:43:07,039 --> 01:43:10,819
there shouldn't be any

1907
01:43:34,529 --> 01:43:50,029
oh well actually that's weird what

1908
01:43:41,909 --> 01:43:52,829
happened to my ah crap

1909
01:43:50,029 --> 01:43:57,929
alright so it looks like somehow I got

1910
01:43:52,829 --> 01:44:00,960
that accidentally removed I don't know

1911
01:43:57,930 --> 01:44:03,060
if that's the only problem but what you

1912
01:44:00,960 --> 01:44:04,890
know one thing I might want to do here I

1913
01:44:03,060 --> 01:44:09,360
guess is make this be something you can

1914
01:44:04,890 --> 01:44:17,160
call to eliminate that source of error

1915
01:44:09,359 --> 01:44:18,719
right I may do that make this right here

1916
01:44:17,159 --> 01:44:20,399
be something I can call to eliminate

1917
01:44:18,720 --> 01:44:25,050
that source of error let me see what

1918
01:44:20,399 --> 01:44:28,289
happens when I run this now oh and and

1919
01:44:25,050 --> 01:44:32,039
we'll get rid of the the intentional

1920
01:44:28,289 --> 01:44:35,519
working there so or did I already do

1921
01:44:32,039 --> 01:44:36,560
that yeah T updates not getting set

1922
01:44:35,520 --> 01:44:41,280
anymore

1923
01:44:36,560 --> 01:44:44,160
right yeah so unfortunately still wrong

1924
01:44:41,279 --> 01:44:52,679
right so that was not sufficient I guess

1925
01:44:44,159 --> 01:44:55,680
is that yeah so that was not that was

1926
01:44:52,680 --> 01:44:57,150
not the problem unfortunately so um what

1927
01:44:55,680 --> 01:44:59,510
I'd like to do let me go ahead and

1928
01:44:57,149 --> 01:45:04,079
remove that source of error though so

1929
01:44:59,510 --> 01:45:07,140
I'm gonna make something here that's

1930
01:45:04,079 --> 01:45:12,359
just called like internal void lighting

1931
01:45:07,140 --> 01:45:14,430
core right and what I want to do is I

1932
01:45:12,359 --> 01:45:19,489
want to try and make it so that this

1933
01:45:14,430 --> 01:45:19,490
exact thing like this here

1934
01:45:31,590 --> 01:45:39,119
this exact thing here I want to be its

1935
01:45:35,399 --> 01:45:42,839
own thing right and I'm gonna actually

1936
01:45:39,119 --> 01:45:46,619
put the debug dump for the output right

1937
01:45:42,840 --> 01:45:49,069
at the end of it so that way we know

1938
01:45:46,619 --> 01:45:54,119
that like it's completely self-contained

1939
01:45:49,069 --> 01:45:59,369
like so right so it'll do exactly this

1940
01:45:54,119 --> 01:46:06,739
it will take the lighting solution the

1941
01:45:59,369 --> 01:46:10,859
spec Atlas and the diffuse Atlas right

1942
01:46:06,739 --> 01:46:13,199
so it'll take those it'll do this work I

1943
01:46:10,859 --> 01:46:17,960
don't know where the lighting cue comes

1944
01:46:13,199 --> 01:46:17,960
from it's here yeah

1945
01:46:18,989 --> 01:46:23,969
and so when here what we'll do is we'll

1946
01:46:20,760 --> 01:46:31,170
say and it takes the lighting cue if the

1947
01:46:23,970 --> 01:46:37,699
lighting cue is valid will dispatch it

1948
01:46:31,170 --> 01:46:37,699
if it's not we just do the work right so

1949
01:46:40,189 --> 01:46:44,250
that way you can switch between threaded

1950
01:46:42,420 --> 01:46:47,190
and non-threaded just by changing the

1951
01:46:44,250 --> 01:46:50,670
parameter to this function right

1952
01:46:47,189 --> 01:46:54,629
and so in here when we actually call it

1953
01:46:50,670 --> 01:47:00,090
which is right here we would pass the

1954
01:46:54,630 --> 01:47:03,119
actual lighting cue so that it'll be

1955
01:47:00,090 --> 01:47:06,779
multi-threaded but in here when we do it

1956
01:47:03,119 --> 01:47:08,819
we wouldn't so instead of test ray cast

1957
01:47:06,779 --> 01:47:11,369
I'm just gonna call internal lighting

1958
01:47:08,819 --> 01:47:13,979
core we're gonna pass our solution our

1959
01:47:11,369 --> 01:47:15,539
spec Atlas and our diffuse Atlas and

1960
01:47:13,979 --> 01:47:22,199
then we're just gonna pass 0 so it won't

1961
01:47:15,539 --> 01:47:27,359
actually thread right and now at least I

1962
01:47:22,199 --> 01:47:29,760
know we're doing the same thing right so

1963
01:47:27,359 --> 01:47:31,679
that we can do a capture we can make it

1964
01:47:29,760 --> 01:47:35,940
do the right thing you know what I mean

1965
01:47:31,680 --> 01:47:38,070
everything will make sense so this part

1966
01:47:35,939 --> 01:47:40,829
of the code - I guess that can actually

1967
01:47:38,069 --> 01:47:44,159
just probably be there I mean I don't

1968
01:47:40,829 --> 01:47:45,050
know this part here where we we do the

1969
01:47:44,159 --> 01:47:53,659
summation

1970
01:47:45,050 --> 01:47:53,659
I think this just wants to be right like

1971
01:47:58,100 --> 01:48:14,400
we'll just return the work camp this is

1972
01:48:03,180 --> 01:48:23,400
how many units it used right um and then

1973
01:48:14,399 --> 01:48:25,170
I think we're okay so only thing I need

1974
01:48:23,399 --> 01:48:26,849
to do now is when we call that it

1975
01:48:25,170 --> 01:48:27,420
doesn't have a platform layer but that's

1976
01:48:26,850 --> 01:48:34,890
fine

1977
01:48:27,420 --> 01:48:39,840
I think we can just do like this where

1978
01:48:34,890 --> 01:48:42,900
is that platform where is that stuff

1979
01:48:39,840 --> 01:48:47,340
well you know what it's just this value

1980
01:48:42,899 --> 01:48:49,189
right so where is the platform got

1981
01:48:47,340 --> 01:48:52,489
update my editor one of these days

1982
01:48:49,189 --> 01:48:52,489
platform API

1983
01:49:05,658 --> 01:49:13,039
so now that that's used I need to have

1984
01:49:07,890 --> 01:49:13,039
it be somewhere right so in theory oops

1985
01:49:17,359 --> 01:49:26,279
in theory we're good now there we go so

1986
01:49:24,600 --> 01:49:29,460
tomorrow we'll debug that but then I

1987
01:49:26,279 --> 01:49:33,988
think we're good to go because we got we

1988
01:49:29,460 --> 01:49:36,739
got issues right we'll go ahead and go

1989
01:49:33,988 --> 01:49:36,738
to Q&amp;A real quick

1990
01:49:58,109 --> 01:50:08,119
is it still build on oh you just want to

1991
01:50:00,720 --> 01:50:18,300
if the build flag is it's Oh - right now

1992
01:50:08,119 --> 01:50:20,220
so that's that's Oh - here's our D and

1993
01:50:18,300 --> 01:50:21,480
they had exactly the same result so it

1994
01:50:20,220 --> 01:50:22,920
doesn't look like it's particularly

1995
01:50:21,479 --> 01:50:32,729
related to a floating-point precision

1996
01:50:22,920 --> 01:50:36,180
problem it's like a bug right capture a

1997
01:50:32,729 --> 01:50:42,029
single-threaded run I mean you mean just

1998
01:50:36,180 --> 01:50:43,980
to see if it's different does anyone use

1999
01:50:42,029 --> 01:50:47,630
let me just see if there's some kind of

2000
01:50:43,979 --> 01:50:47,629
weird accidental sharing in there

2001
01:50:56,300 --> 01:51:00,849
because I agree we should see if maybe

2002
01:50:58,069 --> 01:51:00,849
it's a sharing issue

2003
01:51:28,560 --> 01:51:33,520
so I mean you know this is a sharing

2004
01:51:31,569 --> 01:51:35,649
issue in the sense that these are not

2005
01:51:33,520 --> 01:51:40,120
necessarily particularly correctly

2006
01:51:35,649 --> 01:51:42,789
aligned I mean so but it shouldn't it's

2007
01:51:40,119 --> 01:51:52,599
not over over writing a value it's just

2008
01:51:42,789 --> 01:51:57,090
a speed issue potentially right but but

2009
01:51:52,600 --> 01:51:57,090
I don't think I don't think so

2010
01:52:04,590 --> 01:52:08,970
on your us in fact Abele in the stream

2011
01:52:07,229 --> 01:52:10,199
you were set to sky like rather than kb

2012
01:52:08,970 --> 01:52:13,789
like just in case that's why you were

2013
01:52:10,199 --> 01:52:21,019
seeing issues uh but they're the same

2014
01:52:13,789 --> 01:52:21,019
right they have the same port layout

2015
01:52:29,899 --> 01:52:37,920
like they don't they don't change what

2016
01:52:35,340 --> 01:52:45,300
what ports they are right I'm not sure

2017
01:52:37,920 --> 01:52:48,208
what happens if I check both of them so

2018
01:52:45,300 --> 01:52:55,679
there you go so the port layout between

2019
01:52:48,208 --> 01:52:56,458
kb lake and and sky lake are the same if

2020
01:52:55,679 --> 01:53:01,498
that makes sense

2021
01:52:56,458 --> 01:53:03,179
the ice lake is a pretty different

2022
01:53:01,498 --> 01:53:06,779
architecture i think so

2023
01:53:03,179 --> 01:53:12,239
that if you were on a nice Lake core

2024
01:53:06,779 --> 01:53:16,380
that might matter you know I'm saying to

2025
01:53:12,238 --> 01:53:18,359
you so you know hey it's issuing on port

2026
01:53:16,380 --> 01:53:21,300
9 what the heck is port 9 right Scotty

2027
01:53:18,359 --> 01:53:27,058
doesn't have a port 9 I don't think so

2028
01:53:21,300 --> 01:53:31,139
so ice Lake would matter but but sky

2029
01:53:27,059 --> 01:53:35,340
lake is KB Lake is coffee Lake it's all

2030
01:53:31,139 --> 01:53:36,439
the same ice Lake which has been a long

2031
01:53:35,340 --> 01:53:39,779
time coming

2032
01:53:36,439 --> 01:53:42,929
it still hasn't really arrived ice Lake

2033
01:53:39,779 --> 01:53:45,569
is still not here you have to go by like

2034
01:53:42,929 --> 01:53:47,340
a low-power like a notebook part to get

2035
01:53:45,569 --> 01:53:48,840
a nice late core as far as I know like I

2036
01:53:47,340 --> 01:53:51,510
don't know that you can get I don't know

2037
01:53:48,840 --> 01:53:54,779
that there's like a core i9 ice Lake

2038
01:53:51,510 --> 01:53:56,070
there maybe there is maybe someone who

2039
01:53:54,779 --> 01:53:58,259
keeps up with that stuff more than I do

2040
01:53:56,069 --> 01:54:00,118
you would know but ice Lake is like just

2041
01:53:58,260 --> 01:54:02,070
in notebook chips now as far as I know

2042
01:54:00,118 --> 01:54:02,339
cuz it Intel's had such a hard time with

2043
01:54:02,069 --> 01:54:04,408
it

2044
01:54:02,340 --> 01:54:10,199
it's their ten nanometer process which

2045
01:54:04,408 --> 01:54:13,038
is a pretty dense process and it didn't

2046
01:54:10,198 --> 01:54:16,529
really work like the process node was a

2047
01:54:13,038 --> 01:54:19,109
really bad disaster apparently so like

2048
01:54:16,529 --> 01:54:22,319
they can barely fab the chips is my

2049
01:54:19,109 --> 01:54:25,529
understanding and so ice Lake just

2050
01:54:22,319 --> 01:54:29,658
didn't materialize so they have notebook

2051
01:54:25,529 --> 01:54:33,478
parts that they been shipping this year

2052
01:54:29,658 --> 01:54:37,768
last year I mean but they don't have

2053
01:54:33,479 --> 01:54:40,739
like desktop chips I don't think I don't

2054
01:54:37,769 --> 01:54:41,849
know I don't think maybe there are I'm

2055
01:54:40,738 --> 01:54:43,259
not sure

2056
01:54:41,849 --> 01:54:44,819
so I don't know if they've ever actually

2057
01:54:43,260 --> 01:54:46,708
made a nice lake desktop chip that you

2058
01:54:44,819 --> 01:54:48,808
can actually buy it looked like I can

2059
01:54:46,708 --> 01:55:00,448
buy they may have ones that are like

2060
01:54:48,809 --> 01:55:02,599
very special purpose but I don't know so

2061
01:55:00,448 --> 01:55:02,598
yeah

2062
01:55:09,929 --> 01:55:14,770
we uncheck that this is such a great

2063
01:55:12,880 --> 01:55:17,429
site thank you to the folks who built

2064
01:55:14,770 --> 01:55:19,659
this I don't know why they built it or

2065
01:55:17,429 --> 01:55:22,569
what they hope to gain out of it just

2066
01:55:19,658 --> 01:55:30,638
other than being cool but it's awesome I

2067
01:55:22,569 --> 01:55:31,658
mean it's just great uh have you

2068
01:55:30,639 --> 01:55:34,119
considered releasing your secrets

2069
01:55:31,658 --> 01:55:36,789
earlier as a beta release just so many

2070
01:55:34,119 --> 01:55:38,349
because no serán courting uh I mean if I

2071
01:55:36,789 --> 01:55:43,658
thought I could release it now I would

2072
01:55:38,350 --> 01:55:45,520
it's not ready yet so I I will release

2073
01:55:43,658 --> 01:55:47,439
it when it's ready to be released but

2074
01:55:45,520 --> 01:55:48,699
you know it's of course it's people are

2075
01:55:47,439 --> 01:55:52,829
trying to learn from it I'm not going to

2076
01:55:48,698 --> 01:55:52,829
release something that's not right yet

2077
01:55:58,579 --> 01:56:06,960
how long I there's there's really no way

2078
01:56:04,050 --> 01:56:09,199
to answer that question because the

2079
01:56:06,960 --> 01:56:12,390
course is somewhat nonlinear and it's

2080
01:56:09,199 --> 01:56:14,489
actually very uh nonlinear and it

2081
01:56:12,390 --> 01:56:17,550
depends a lot on what knowledge you're

2082
01:56:14,489 --> 01:56:23,489
coming to it right it's designed to

2083
01:56:17,550 --> 01:56:24,930
cover everything and so some people will

2084
01:56:23,489 --> 01:56:28,199
have to start like at the beginning

2085
01:56:24,930 --> 01:56:31,560
beginning like they don't know what an

2086
01:56:28,199 --> 01:56:33,239
entry point or a function is right but

2087
01:56:31,560 --> 01:56:34,950
other people who you know maybe they've

2088
01:56:33,239 --> 01:56:37,439
programmed JavaScript for awhile or they

2089
01:56:34,949 --> 01:56:41,550
know Python or something right those

2090
01:56:37,439 --> 01:56:43,529
people don't need to spend any time at

2091
01:56:41,550 --> 01:56:45,480
all on that part of the course like they

2092
01:56:43,529 --> 01:56:49,500
know what a function is they just maybe

2093
01:56:45,479 --> 01:56:51,119
don't know how they work in C or some of

2094
01:56:49,500 --> 01:56:52,380
the things about how like functions are

2095
01:56:51,119 --> 01:56:57,689
actually implemented in hardware or

2096
01:56:52,380 --> 01:57:01,380
stuff like that so I think like that's

2097
01:56:57,689 --> 01:57:03,509
really what how long the course is

2098
01:57:01,380 --> 01:57:06,529
depends on what you need to get out of

2099
01:57:03,510 --> 01:57:09,030
it if you just are looking for certain

2100
01:57:06,529 --> 01:57:11,729
aspects it is a much shorter course than

2101
01:57:09,029 --> 01:57:16,550
if you are literally coming to it at

2102
01:57:11,729 --> 01:57:16,549
zero which some people might be right

2103
01:57:23,659 --> 01:57:33,779
bulbous is it bad on x86 to do online

2104
01:57:27,539 --> 01:57:36,000
pointers No so x86 cores for any of the

2105
01:57:33,779 --> 01:57:38,009
ones you're that in modern circulation

2106
01:57:36,000 --> 01:57:39,359
like skylake or anything else they don't

2107
01:57:38,010 --> 01:57:41,220
have any penalties for unaligned

2108
01:57:39,359 --> 01:57:44,149
pointers you can load off of unaligned

2109
01:57:41,220 --> 01:57:49,110
pointers all day long and it's fine

2110
01:57:44,149 --> 01:57:50,429
however that said there are a number of

2111
01:57:49,109 --> 01:57:53,099
things you have to think about when

2112
01:57:50,430 --> 01:57:55,320
using unaligned pointers there are still

2113
01:57:53,100 --> 01:57:59,220
penalties for example for pointers that

2114
01:57:55,319 --> 01:58:03,840
cross a cache line or that cross a page

2115
01:57:59,220 --> 01:58:05,400
boundary there are potential cases where

2116
01:58:03,840 --> 01:58:09,000
those can hurt you page boundary

2117
01:58:05,399 --> 01:58:12,409
definitely like so if a pointer crosses

2118
01:58:09,000 --> 01:58:16,439
a 4096 byte alignment

2119
01:58:12,409 --> 01:58:18,569
it's a problem right so they're aware of

2120
01:58:16,439 --> 01:58:22,469
that and the other thing that you have

2121
01:58:18,569 --> 01:58:25,259
to be aware about is aware of is what

2122
01:58:22,470 --> 01:58:27,360
your minimum target is so for example

2123
01:58:25,260 --> 01:58:31,530
let's suppose that your minimum target

2124
01:58:27,359 --> 01:58:38,509
is not a VX so your minimum target is

2125
01:58:31,529 --> 01:58:41,399
SSE like two three or four that if

2126
01:58:38,510 --> 01:58:45,180
you're if you have to compile code just

2127
01:58:41,399 --> 01:58:47,309
for sse2 then there is a real penalty

2128
01:58:45,180 --> 01:58:51,750
for unaligned pointers and that's that

2129
01:58:47,310 --> 01:58:54,660
they can't be memory operands SSE for

2130
01:58:51,750 --> 01:58:56,789
really bad reasons and it was really bad

2131
01:58:54,659 --> 01:58:59,460
I don't know why they did this they made

2132
01:58:56,789 --> 01:59:01,769
it so that memory oper operands fault on

2133
01:58:59,460 --> 01:59:03,659
unaligned I don't know why they did it

2134
01:59:01,770 --> 01:59:07,440
it was a really really really bad

2135
01:59:03,659 --> 01:59:09,329
decision they fixed it in a V X so if

2136
01:59:07,439 --> 01:59:13,139
you're compiling with a V X is a target

2137
01:59:09,329 --> 01:59:14,340
and you use V prefix instructions then

2138
01:59:13,140 --> 01:59:17,039
you can just have underline pointers

2139
01:59:14,340 --> 01:59:20,010
everywhere but if you are compiling

2140
01:59:17,039 --> 01:59:22,519
without a VX enabled so you're compiling

2141
01:59:20,010 --> 01:59:27,329
with SSE two three or four compatibility

2142
01:59:22,520 --> 01:59:30,150
then you have a problem now that problem

2143
01:59:27,329 --> 01:59:32,130
may not materialize is any actual harm

2144
01:59:30,149 --> 01:59:34,199
to your performance and the reason is

2145
01:59:32,130 --> 01:59:36,989
because unless you're actually executing

2146
01:59:34,199 --> 01:59:39,269
four instructions for clock you probably

2147
01:59:36,989 --> 01:59:43,920
have a free instruction for a memo in

2148
01:59:39,270 --> 01:59:45,660
there anyway right so it's unlikely that

2149
01:59:43,920 --> 01:59:49,199
it's actually that big of a deal

2150
01:59:45,659 --> 01:59:51,809
sometimes it can be though and you have

2151
01:59:49,199 --> 01:59:53,279
ten extra register free so it depends

2152
01:59:51,810 --> 01:59:56,340
how much you're pushing the boundaries

2153
01:59:53,279 --> 01:59:59,909
right if you're really pushing the

2154
01:59:56,340 --> 02:00:02,190
boundaries of the performance of your

2155
01:59:59,909 --> 02:00:03,899
chip it could hurt you if you're not

2156
02:00:02,189 --> 02:00:05,969
pushing the boundaries it probably

2157
02:00:03,899 --> 02:00:08,339
doesn't matter a lot of line pointers

2158
02:00:05,970 --> 02:00:11,270
are generally fine just be aware of the

2159
02:00:08,340 --> 02:00:11,270
limitations

2160
02:00:14,819 --> 02:00:18,689
do instructions with memory operands

2161
02:00:16,979 --> 02:00:21,269
actually use the earth we took units

2162
02:00:18,689 --> 02:00:23,969
before the data is ready no so an

2163
02:00:21,270 --> 02:00:26,700
instruction with a memory operand it

2164
02:00:23,970 --> 02:00:28,440
becomes multiple you ops so the way to

2165
02:00:26,699 --> 02:00:31,229
read this so let's take the one that's

2166
02:00:28,439 --> 02:00:35,659
on the screen right now so move ups with

2167
02:00:31,229 --> 02:00:39,179
a memory operand this is a store right

2168
02:00:35,659 --> 02:00:42,180
oh wait but that's just a move so sorry

2169
02:00:39,180 --> 02:00:43,560
I need something like we had before okay

2170
02:00:42,180 --> 02:00:45,869
so this is something that does an ad

2171
02:00:43,560 --> 02:00:47,520
right so this is an ad from memory so

2172
02:00:45,869 --> 02:00:49,559
it's going to take some register you

2173
02:00:47,520 --> 02:00:53,100
give it and then a memory destination

2174
02:00:49,560 --> 02:00:55,950
and it's gonna do an ad the ad is going

2175
02:00:53,100 --> 02:00:57,180
to happen on one port and the load is

2176
02:00:55,949 --> 02:01:00,239
going to happen on the other port so the

2177
02:00:57,180 --> 02:01:04,350
way that you see this here this first

2178
02:01:00,239 --> 02:01:05,969
thing p01 that's the ad port and this

2179
02:01:04,350 --> 02:01:11,640
thing here p23

2180
02:01:05,970 --> 02:01:15,810
that's the load port so what actually

2181
02:01:11,640 --> 02:01:19,890
happens here is when you do this ad PS

2182
02:01:15,810 --> 02:01:24,000
first it will I didn't say the whole

2183
02:01:19,890 --> 02:01:28,350
thing I'd say this equation this pseudo

2184
02:01:24,000 --> 02:01:30,770
equation the plus means more than one

2185
02:01:28,350 --> 02:01:34,140
micro op right

2186
02:01:30,770 --> 02:01:37,950
this means number of micro ops in each

2187
02:01:34,140 --> 02:01:43,410
term so this is 1 micro op issued on

2188
02:01:37,949 --> 02:01:49,289
port 0 or 1 plus 1 micro op issued on

2189
02:01:43,409 --> 02:01:52,680
port 2 or 3 right so what happens there

2190
02:01:49,289 --> 02:01:54,060
is when you issue these microbes I

2191
02:01:52,680 --> 02:01:55,500
believe that's what it is I don't think

2192
02:01:54,060 --> 02:01:58,950
that's cycles I think that's microbes

2193
02:01:55,500 --> 02:02:04,979
but it could be cycles that could

2194
02:01:58,949 --> 02:02:05,760
actually be cycles so I'll be honest I

2195
02:02:04,979 --> 02:02:07,919
take it back

2196
02:02:05,760 --> 02:02:10,020
I don't know how they issue like I don't

2197
02:02:07,920 --> 02:02:12,149
know if that's 2 cycles on port p5 are 2

2198
02:02:10,020 --> 02:02:14,370
microbes on port p5 it's probably 2

2199
02:02:12,149 --> 02:02:19,170
cycles so I take that back it's 1 cycle

2200
02:02:14,369 --> 02:02:21,269
on port 0 or 1 plus 1 cycle on port 2 or

2201
02:02:19,170 --> 02:02:23,819
3 it's probably what actually what's

2202
02:02:21,270 --> 02:02:27,240
actually happening there so I take that

2203
02:02:23,819 --> 02:02:28,649
back either way the point is these are

2204
02:02:27,239 --> 02:02:31,289
two separate microbes

2205
02:02:28,649 --> 02:02:32,969
so when you see the ad PS instruction

2206
02:02:31,289 --> 02:02:35,698
with a memory operand it actually

2207
02:02:32,969 --> 02:02:38,069
generates two separate things that have

2208
02:02:35,698 --> 02:02:41,399
to happen first the load then the add

2209
02:02:38,069 --> 02:02:44,158
the load will first get issued on port 2

2210
02:02:41,399 --> 02:02:47,729
or 3 the ad will not get issued until

2211
02:02:44,158 --> 02:02:50,488
the load is done does that make sense

2212
02:02:47,729 --> 02:02:53,250
so until the load actually comes back it

2213
02:02:50,488 --> 02:03:02,479
will never touch port 0 or 1 at all

2214
02:02:53,250 --> 02:03:05,189
until the load actually comes back is

2215
02:03:02,479 --> 02:03:10,859
the course gonna be useful for hardcore

2216
02:03:05,189 --> 02:03:13,289
fans of handmade hero I guess I would

2217
02:03:10,859 --> 02:03:15,809
say if you've literally watched and done

2218
02:03:13,289 --> 02:03:17,729
the and followed along by programming on

2219
02:03:15,810 --> 02:03:21,000
every episode of handmade hero no

2220
02:03:17,729 --> 02:03:25,769
probably not but if you just kind of

2221
02:03:21,000 --> 02:03:28,069
watch the series probably yes that's

2222
02:03:25,770 --> 02:03:28,070
what I'd say

2223
02:03:38,920 --> 02:03:42,579
I mean the reason for that is just we do

2224
02:03:41,050 --> 02:03:44,949
everything on ham here I don't know what

2225
02:03:42,579 --> 02:03:47,319
else we could possibly cover you know

2226
02:03:44,948 --> 02:03:52,448
what I mean I mean I've gone through so

2227
02:03:47,319 --> 02:03:53,948
much stuff is the course project-based

2228
02:03:52,448 --> 02:04:01,419
where throughout the course you make X

2229
02:03:53,948 --> 02:04:03,129
or Y project yes it is is there an API

2230
02:04:01,420 --> 02:04:15,310
to access the performance counters so

2231
02:04:03,130 --> 02:04:18,279
you don't have to use vtune sort of so

2232
02:04:15,310 --> 02:04:20,860
there's two things if you install vtune

2233
02:04:18,279 --> 02:04:22,899
i think you can use dll calls if you

2234
02:04:20,859 --> 02:04:24,189
have you vtune installed to do some

2235
02:04:22,899 --> 02:04:28,779
performance kind of stuff I'm not sure

2236
02:04:24,189 --> 02:04:31,149
but I think you can maybe don't quote me

2237
02:04:28,779 --> 02:04:33,009
on that but the other thing is event

2238
02:04:31,149 --> 02:04:37,509
tracing for Windows may provide access

2239
02:04:33,010 --> 02:04:41,289
to these counters may don't quote me on

2240
02:04:37,510 --> 02:04:44,679
that either if what you're asking is the

2241
02:04:41,289 --> 02:04:46,779
more general question of is it plausible

2242
02:04:44,679 --> 02:04:48,369
to say build this into profiling in a

2243
02:04:46,779 --> 02:04:50,289
game no it's a disaster

2244
02:04:48,369 --> 02:04:51,939
it has to be running as administrator

2245
02:04:50,289 --> 02:04:52,149
even to just query them and stuff like

2246
02:04:51,939 --> 02:04:56,049
this

2247
02:04:52,149 --> 02:04:58,389
it's a it's bad so I don't know of any

2248
02:04:56,050 --> 02:05:00,219
way to do what you actually want which

2249
02:04:58,390 --> 02:05:04,660
is to say I'm a developer I'm an adult

2250
02:05:00,219 --> 02:05:06,819
give me access to my CPU counters with

2251
02:05:04,659 --> 02:05:08,800
some expletives thrown in there it

2252
02:05:06,819 --> 02:05:13,029
doesn't I don't know of any way to do

2253
02:05:08,800 --> 02:05:14,380
that there is a long route to it which

2254
02:05:13,029 --> 02:05:21,189
is I think there's an open source

2255
02:05:14,380 --> 02:05:24,640
project that has like there's an open

2256
02:05:21,189 --> 02:05:27,069
source driver that you can compile

2257
02:05:24,640 --> 02:05:28,539
yourself and install that I think you

2258
02:05:27,069 --> 02:05:31,599
could then call to get the performance

2259
02:05:28,539 --> 02:05:33,640
counters I think don't quote me on that

2260
02:05:31,600 --> 02:05:35,289
but I think that would be about the only

2261
02:05:33,640 --> 02:05:37,929
way to do it there's no way to just make

2262
02:05:35,289 --> 02:05:39,369
an executable that does it you can't do

2263
02:05:37,929 --> 02:05:41,550
that because it has to run in kernel

2264
02:05:39,369 --> 02:05:41,550
mode

2265
02:05:45,289 --> 02:05:49,789
all right I'm gonna go ahead and wrap it

2266
02:05:47,670 --> 02:05:49,789
up

2267
02:06:01,010 --> 02:06:04,239
too many windows open

2268
02:06:06,310 --> 02:06:12,520
all right okay thank you everyone for

2269
02:06:11,500 --> 02:06:13,960
joining me for the notes on a handmade

2270
02:06:12,520 --> 02:06:16,300
here it's been a pleasure coding with

2271
02:06:13,960 --> 02:06:18,699
you as always if you want to follow on

2272
02:06:16,300 --> 02:06:20,860
the series at home you can always go to

2273
02:06:18,699 --> 02:06:23,019
handmade hero org and you can pre-order

2274
02:06:20,859 --> 02:06:25,210
the game it comes with the source code

2275
02:06:23,020 --> 02:06:26,920
so you can follow along at home we also

2276
02:06:25,210 --> 02:06:28,899
have a Kickstarter running right now for

2277
02:06:26,920 --> 02:06:31,329
our comic we're doing a print edition of

2278
02:06:28,899 --> 02:06:32,259
it if comics are your thing please go

2279
02:06:31,329 --> 02:06:35,710
ahead and check that out there's a

2280
02:06:32,260 --> 02:06:37,810
banner on every page of the website that

2281
02:06:35,710 --> 02:06:40,840
you can click to to head over there I'll

2282
02:06:37,810 --> 02:06:43,150
be running for about 30 days and it's

2283
02:06:40,840 --> 02:06:45,100
pretty cool so check it out we also have

2284
02:06:43,149 --> 02:06:46,750
a bunch of videos coming that go along

2285
02:06:45,100 --> 02:06:49,240
with the Kickstarter so if you're

2286
02:06:46,750 --> 02:06:51,760
someone who follows the the channel that

2287
02:06:49,239 --> 02:06:53,559
we do here at Molly rocket that has all

2288
02:06:51,760 --> 02:06:55,510
the handmade hero videos on it we will

2289
02:06:53,560 --> 02:06:57,490
be having a bunch of videos on there

2290
02:06:55,510 --> 02:06:59,560
starting today there's a time-lapse of

2291
02:06:57,489 --> 02:07:01,300
them now drawing going up on there and

2292
02:06:59,560 --> 02:07:02,890
then they'll be some other fun stuff

2293
02:07:01,300 --> 02:07:05,829
that we're doing probably some

2294
02:07:02,890 --> 02:07:07,660
additional streams too so stay tuned for

2295
02:07:05,829 --> 02:07:09,250
that stuff I'll be posting about them on

2296
02:07:07,659 --> 02:07:10,599
my Twitter feed and they'll also be if

2297
02:07:09,250 --> 02:07:13,539
you subscribe to the video if you

2298
02:07:10,600 --> 02:07:15,670
subscribe to our video channel I don't

2299
02:07:13,539 --> 02:07:18,250
actually know these days if you can get

2300
02:07:15,670 --> 02:07:20,289
notified like if you subscribe to the

2301
02:07:18,250 --> 02:07:21,789
thing I know there used to be like a

2302
02:07:20,289 --> 02:07:23,920
bell you could click on to get notified

2303
02:07:21,789 --> 02:07:25,239
I don't know if YouTube seems to

2304
02:07:23,920 --> 02:07:27,190
consistently be nerfing all that stuff

2305
02:07:25,239 --> 02:07:29,889
so I'm not sure what to do other than

2306
02:07:27,189 --> 02:07:33,759
just say look go to the videos tag of

2307
02:07:29,890 --> 02:07:35,650
our YouTube channel here's a trailer for

2308
02:07:33,760 --> 02:07:37,150
the comic there'll be more stuff getting

2309
02:07:35,649 --> 02:07:40,659
posted in fact I'm gonna post one right

2310
02:07:37,149 --> 02:07:41,829
after I get off stream now so check that

2311
02:07:40,659 --> 02:07:43,510
out there should be some cool stuff

2312
02:07:41,829 --> 02:07:45,100
coming on this channel all all this

2313
02:07:43,510 --> 02:07:48,970
month for like the next 30 days

2314
02:07:45,100 --> 02:07:49,329
so that's about it alright that's it

2315
02:07:48,970 --> 02:07:52,060
everyone

2316
02:07:49,329 --> 02:07:53,769
see you around see you tomorrow for the

2317
02:07:52,060 --> 02:07:55,870
next performance analysis stream

2318
02:07:53,770 --> 02:07:57,820
hopefully we can get the stream

2319
02:07:55,869 --> 02:07:59,890
validating and then we can move on to

2320
02:07:57,819 --> 02:08:02,259
trying to get it faster that's it for

2321
02:07:59,890 --> 02:08:05,280
today and I'll see everyone on the

2322
02:08:02,260 --> 02:08:05,280
Internet take it easy everybody

