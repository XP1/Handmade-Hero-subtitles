1
00:00:01,820 --> 00:00:05,580
hello everyone.welcome handmade here a

2
00:00:03,959 --> 00:00:09,540
show we could complete gave live on

3
00:00:05,580 --> 00:00:11,309
stream I am just gonna pick up exactly

4
00:00:09,539 --> 00:00:14,099
where we left off yesterday there's

5
00:00:11,308 --> 00:00:16,469
really nothing particularly specific for

6
00:00:14,099 --> 00:00:18,660
us to be doing today other than just

7
00:00:16,469 --> 00:00:22,140
trying to get the bugs out of the new

8
00:00:18,660 --> 00:00:25,379
ray caster and we made some nice little

9
00:00:22,140 --> 00:00:27,268
visualizations so we kind of knew even

10
00:00:25,379 --> 00:00:29,099
at the end of yesterday's stream we had

11
00:00:27,268 --> 00:00:31,379
worked it out to a particular place we

12
00:00:29,099 --> 00:00:33,450
are we got rid of some bugs yesterday

13
00:00:31,379 --> 00:00:36,359
that we're in there as well so we kind

14
00:00:33,450 --> 00:00:37,920
of already removed some but in terms of

15
00:00:36,359 --> 00:00:39,179
debugging the ray caster you can see we

16
00:00:37,920 --> 00:00:43,170
ended up at a place where you can

17
00:00:39,179 --> 00:00:44,280
actually visualize the Ray and the bug

18
00:00:43,170 --> 00:00:45,989
that I wanted to start looking at

19
00:00:44,280 --> 00:00:48,299
yesterday when we stopped was the fact

20
00:00:45,988 --> 00:00:53,640
that you can see these purple squares

21
00:00:48,299 --> 00:00:56,789
are here right mm-hmm and these I should

22
00:00:53,640 --> 00:00:59,689
say cubes these purple cubes are things

23
00:00:56,789 --> 00:01:01,980
that as opposed to cyan keebz down here

24
00:00:59,689 --> 00:01:02,968
may I should say magenta let's say

25
00:01:01,979 --> 00:01:04,738
magenta because that's what it

26
00:01:02,969 --> 00:01:06,960
technically is so these cyan cubes down

27
00:01:04,739 --> 00:01:10,170
here and these magenta cubes up here you

28
00:01:06,959 --> 00:01:13,919
know as soon as we pass through the

29
00:01:10,170 --> 00:01:15,950
structure of the land where there

30
00:01:13,920 --> 00:01:20,549
actually is something for the Ray to hit

31
00:01:15,950 --> 00:01:24,210
we go from a cyan cube to a magenta cube

32
00:01:20,549 --> 00:01:26,610
and even though really the main thing

33
00:01:24,209 --> 00:01:28,649
that we have to focus on is why this ray

34
00:01:26,609 --> 00:01:31,828
didn't hit right here because that's

35
00:01:28,650 --> 00:01:33,659
where it should have hit right this ray

36
00:01:31,828 --> 00:01:35,179
is marked is not hitting anything but it

37
00:01:33,659 --> 00:01:38,850
should have hit whatever is right there

38
00:01:35,180 --> 00:01:41,009
the weird part about this is the color

39
00:01:38,849 --> 00:01:43,319
coding that I put in the algorithm for

40
00:01:41,009 --> 00:01:46,649
drawing these for debug purposes is that

41
00:01:43,319 --> 00:01:50,069
if there was something in the region

42
00:01:46,649 --> 00:01:54,090
classified as an occluder for Ray's to

43
00:01:50,069 --> 00:01:57,449
hit it was scientist magenta and if not

44
00:01:54,090 --> 00:01:59,609
it was cyan so all of these are

45
00:01:57,450 --> 00:02:02,520
classified as having something in them

46
00:01:59,609 --> 00:02:05,129
to hit and you know while these might be

47
00:02:02,519 --> 00:02:06,599
true this is definitely not true and

48
00:02:05,129 --> 00:02:07,798
honestly I don't think these true should

49
00:02:06,599 --> 00:02:12,239
be true either because you kind of see

50
00:02:07,799 --> 00:02:13,319
in here we have not added trees to our

51
00:02:12,239 --> 00:02:14,908
occlusion

52
00:02:13,318 --> 00:02:17,548
currently I mean we probably should

53
00:02:14,908 --> 00:02:20,938
eventually but right now we don't we

54
00:02:17,549 --> 00:02:23,579
only add like these actual like square

55
00:02:20,938 --> 00:02:25,378
blocks like these things are the only

56
00:02:23,579 --> 00:02:29,540
things we actually bother to push down

57
00:02:25,378 --> 00:02:33,688
as occluders and so when you look at

58
00:02:29,539 --> 00:02:37,378
what's going on in here it's like none

59
00:02:33,688 --> 00:02:39,419
of these should be like just that one

60
00:02:37,378 --> 00:02:43,018
like there's just that one should be

61
00:02:39,419 --> 00:02:45,419
magenta and none of these should be so

62
00:02:43,019 --> 00:02:48,450
there's two possibilities one is that

63
00:02:45,419 --> 00:02:51,418
our loop is just mistaken about what has

64
00:02:48,449 --> 00:02:54,539
Cooter's in it and we could go check

65
00:02:51,419 --> 00:02:56,639
that pretty easily the other is possibly

66
00:02:54,539 --> 00:02:59,400
more likely although still a little

67
00:02:56,639 --> 00:03:01,469
weird is that just our spatial index

68
00:02:59,400 --> 00:03:05,099
build is wrong and it's actually

69
00:03:01,469 --> 00:03:07,650
inserting things into these cubes saying

70
00:03:05,098 --> 00:03:10,259
you know hey there's occluders in here

71
00:03:07,650 --> 00:03:11,879
and there aren't now why inserting

72
00:03:10,259 --> 00:03:14,759
occluders in here when there aren't

73
00:03:11,878 --> 00:03:17,280
would cause you to miss rather than hit

74
00:03:14,759 --> 00:03:19,560
I have no idea but if there's something

75
00:03:17,280 --> 00:03:20,939
generically wrong with our spatial

76
00:03:19,560 --> 00:03:23,459
partition build and the things we're

77
00:03:20,939 --> 00:03:25,439
adding our garbage rectangles that like

78
00:03:23,459 --> 00:03:28,378
are not in the right places or something

79
00:03:25,439 --> 00:03:31,949
then that obviously would be a good way

80
00:03:28,378 --> 00:03:34,668
to imagine this algorithm failing so you

81
00:03:31,949 --> 00:03:36,569
know there's probably something there

82
00:03:34,669 --> 00:03:38,760
either way and we need this

83
00:03:36,568 --> 00:03:40,439
visualization to be correct because if

84
00:03:38,759 --> 00:03:41,939
it's not correct we know that we've got

85
00:03:40,439 --> 00:03:43,590
at least something wrong even if it's

86
00:03:41,939 --> 00:03:46,049
only the visualization code and we would

87
00:03:43,590 --> 00:03:47,819
want that fix as well so let's start by

88
00:03:46,049 --> 00:03:50,549
just looking at what the problem is here

89
00:03:47,818 --> 00:03:52,408
if we go into the debug code that

90
00:03:50,549 --> 00:03:54,449
actually draws this you can see here is

91
00:03:52,408 --> 00:03:56,280
where we draw the Ray and this is why we

92
00:03:54,449 --> 00:03:57,419
know that we aren't hitting anything as

93
00:03:56,280 --> 00:03:58,620
well even though we know we're not

94
00:03:57,419 --> 00:04:01,229
because we looked in the code never hits

95
00:03:58,620 --> 00:04:03,209
anything but you can see that we're

96
00:04:01,229 --> 00:04:05,129
drawing a dim line a bright yellow line

97
00:04:03,209 --> 00:04:06,930
would go to the intersection point and

98
00:04:05,128 --> 00:04:10,620
then a dim yellow line would continue on

99
00:04:06,930 --> 00:04:11,639
just we can see where the Ray will go so

100
00:04:10,620 --> 00:04:13,349
we know that we're not hitting anything

101
00:04:11,639 --> 00:04:14,849
and then up here this is where we're

102
00:04:13,348 --> 00:04:16,978
pushing you can see the box color we say

103
00:04:14,848 --> 00:04:19,048
if nodes start index equals node one

104
00:04:16,978 --> 00:04:21,060
past last index that obviously means you

105
00:04:19,048 --> 00:04:22,468
would never enter this loop because if

106
00:04:21,060 --> 00:04:24,120
the node start index in the node one

107
00:04:22,468 --> 00:04:26,639
past last index are the same you just

108
00:04:24,120 --> 00:04:28,800
you'd never have this less than can

109
00:04:26,639 --> 00:04:36,478
you'd never be in the loop it's a top

110
00:04:28,800 --> 00:04:38,430
checked loop as for loops are so what we

111
00:04:36,478 --> 00:04:41,370
want to see here is we want to see why

112
00:04:38,430 --> 00:04:44,218
is this one past lassen co-starring why

113
00:04:41,370 --> 00:04:46,288
is that triggering only for those things

114
00:04:44,218 --> 00:04:48,538
below the level and when I look at this

115
00:04:46,288 --> 00:04:50,068
code you know it's checking every time

116
00:04:48,538 --> 00:04:52,468
and it's checking the node that it pulls

117
00:04:50,069 --> 00:04:54,778
out here it just doesn't seem likely

118
00:04:52,468 --> 00:04:55,918
that this code is broken I mean it could

119
00:04:54,778 --> 00:04:57,389
be that I'm missing something when I'm

120
00:04:55,918 --> 00:04:59,278
looking at it here and you know I'm just

121
00:04:57,389 --> 00:05:03,389
not thinking about it right or something

122
00:04:59,278 --> 00:05:05,399
but it just look likely right it doesn't

123
00:05:03,389 --> 00:05:08,038
look likely so there's a couple of

124
00:05:05,399 --> 00:05:09,839
things that I would like to do here one

125
00:05:08,038 --> 00:05:13,620
of them is I would like to just draw

126
00:05:09,839 --> 00:05:15,329
these out right so as we hit leaves that

127
00:05:13,620 --> 00:05:17,550
actually have things in them I'm gonna

128
00:05:15,329 --> 00:05:19,769
draw with the boxes are that we think

129
00:05:17,550 --> 00:05:21,750
are in there that's because I want that

130
00:05:19,769 --> 00:05:24,060
anyway but this will also let me see

131
00:05:21,750 --> 00:05:27,120
what the heck these boxes are that you

132
00:05:24,060 --> 00:05:28,709
know people like this thing is claiming

133
00:05:27,120 --> 00:05:32,459
or in there and there's some stuff we

134
00:05:28,709 --> 00:05:34,888
can do for that actually to help us

135
00:05:32,459 --> 00:05:37,198
understand where these boxes are that we

136
00:05:34,889 --> 00:05:38,759
can actually use as well so there's some

137
00:05:37,199 --> 00:05:40,889
stuff we can do to improve this but the

138
00:05:38,759 --> 00:05:42,538
first thing I do is just let's loop

139
00:05:40,889 --> 00:05:45,088
through these in a separate pass only

140
00:05:42,538 --> 00:05:46,259
for debugging where I draw what are the

141
00:05:45,088 --> 00:05:47,908
things that are supposedly

142
00:05:46,259 --> 00:05:49,830
in these grid cells that were closed I

143
00:05:47,908 --> 00:05:52,288
see ants and then we're gonna do is

144
00:05:49,829 --> 00:05:53,399
we'll shift with that information that

145
00:05:52,288 --> 00:05:54,990
will then be able to see hopefully

146
00:05:53,399 --> 00:05:56,908
something will give us some refreshment

147
00:05:54,990 --> 00:06:00,028
but either way we'll shift over to the

148
00:05:56,908 --> 00:06:01,949
the actual spatial partition build to

149
00:06:00,028 --> 00:06:05,788
see if we've got something stupid going

150
00:06:01,949 --> 00:06:07,528
on it would probably do so what we want

151
00:06:05,788 --> 00:06:09,418
to do is this exact same thing we want

152
00:06:07,528 --> 00:06:11,519
to do this push debug box here but what

153
00:06:09,418 --> 00:06:14,068
we want to do is we want to draw the

154
00:06:11,519 --> 00:06:16,560
actual leaves and what you could see is

155
00:06:14,069 --> 00:06:19,408
these leaves come through as four wide

156
00:06:16,560 --> 00:06:21,418
so because they're packed for sim deep

157
00:06:19,408 --> 00:06:22,949
so we've got a three by four X for the

158
00:06:21,418 --> 00:06:25,468
min and a three by four X for the max

159
00:06:22,949 --> 00:06:27,149
again this is debug code we don't care

160
00:06:25,468 --> 00:06:30,629
about how fast it runs so we're just

161
00:06:27,149 --> 00:06:32,158
gonna pull those out individually and

162
00:06:30,629 --> 00:06:35,789
we're just going to draw them one at a

163
00:06:32,158 --> 00:06:37,800
time as debug boxes so this is like an

164
00:06:35,788 --> 00:06:40,329
occluder box here and we're gonna

165
00:06:37,800 --> 00:06:43,120
generate these by looping

166
00:06:40,329 --> 00:06:48,128
the element index one at a time and

167
00:06:43,120 --> 00:06:49,990
we're just gonna draw all four right now

168
00:06:48,129 --> 00:06:51,639
not all four will actually be there

169
00:06:49,990 --> 00:06:54,788
because some of these will just be

170
00:06:51,639 --> 00:06:56,918
garbage like one of the things we do

171
00:06:54,788 --> 00:07:00,218
when we pack these things by fours is

172
00:06:56,918 --> 00:07:03,490
there aren't always four some boxes when

173
00:07:00,218 --> 00:07:05,860
we have one two three right some cells

174
00:07:03,490 --> 00:07:08,348
when we have one two or three and in

175
00:07:05,860 --> 00:07:09,759
those cases the other values are just

176
00:07:08,348 --> 00:07:11,589
filled with nothing right they don't

177
00:07:09,759 --> 00:07:13,060
have anything in them and so what we

178
00:07:11,589 --> 00:07:15,149
should be able to do here is we should

179
00:07:13,060 --> 00:07:17,110
be able to just kind of get that

180
00:07:15,149 --> 00:07:18,128
occluders out for the ones that are

181
00:07:17,110 --> 00:07:19,780
there and the ones that aren't there

182
00:07:18,129 --> 00:07:21,218
well we just draw garbage now we could

183
00:07:19,779 --> 00:07:23,079
put an if around it but we shouldn't

184
00:07:21,218 --> 00:07:24,759
need to it'll just draw like a it'll

185
00:07:23,079 --> 00:07:27,609
draw a box off in the middle of nowhere

186
00:07:24,759 --> 00:07:29,020
I believe and you know if it's causing

187
00:07:27,610 --> 00:07:30,908
us problems we can put in if around it

188
00:07:29,019 --> 00:07:33,788
because we can put into those boxes

189
00:07:30,908 --> 00:07:35,439
specific values that we know won't cause

190
00:07:33,788 --> 00:07:40,568
collision detection but then we can

191
00:07:35,439 --> 00:07:42,668
actually take those and detect them here

192
00:07:40,569 --> 00:07:45,669
so again not really concerned about that

193
00:07:42,668 --> 00:07:47,318
but so what we want to do is do a rectum

194
00:07:45,668 --> 00:07:49,870
and max here so we want to produce one

195
00:07:47,319 --> 00:07:51,848
of our wrecks for the occluder box and

196
00:07:49,870 --> 00:07:54,278
the occluder box is just going to come

197
00:07:51,848 --> 00:07:56,439
from the boxman boxman we already pulled

198
00:07:54,278 --> 00:07:58,028
out but we need to get specific elements

199
00:07:56,439 --> 00:07:59,879
from them so what I wanted to do is get

200
00:07:58,028 --> 00:08:02,139
the element

201
00:07:59,879 --> 00:08:03,838
sorry component I think is what we call

202
00:08:02,139 --> 00:08:06,038
it I don't know why they called it that

203
00:08:03,838 --> 00:08:07,629
so we're gonna get the component of

204
00:08:06,038 --> 00:08:10,028
these that corresponds to this

205
00:08:07,629 --> 00:08:11,860
particular index and that's really all

206
00:08:10,028 --> 00:08:14,228
we should have to do at that point we

207
00:08:11,860 --> 00:08:16,360
can construct a box and pass it on

208
00:08:14,228 --> 00:08:18,399
and do anything else that we want to do

209
00:08:16,360 --> 00:08:20,889
with it so if I run it now I should see

210
00:08:18,399 --> 00:08:22,658
something on the screen and maybe we'll

211
00:08:20,889 --> 00:08:24,879
see nothing because the values are just

212
00:08:22,658 --> 00:08:26,680
garbage but you know the idea would be

213
00:08:24,879 --> 00:08:29,949
if we now looked we should see some

214
00:08:26,680 --> 00:08:33,849
boxes of course I don't which is kind of

215
00:08:29,949 --> 00:08:36,879
bizarre right I see nothing in here so

216
00:08:33,849 --> 00:08:38,199
again kind of bizarre and maybe a good

217
00:08:36,879 --> 00:08:39,668
thing to do now would be to step into

218
00:08:38,198 --> 00:08:40,870
that code and see what those values are

219
00:08:39,668 --> 00:08:44,828
look maybe those values are just

220
00:08:40,870 --> 00:08:47,470
complete crap in there and then there's

221
00:08:44,828 --> 00:08:49,299
like nothing that that you know that

222
00:08:47,470 --> 00:08:51,819
makes any sense and that may be the case

223
00:08:49,299 --> 00:08:53,469
we'll see so so that's at least

224
00:08:51,818 --> 00:08:54,250
something now I can sort of see like

225
00:08:53,470 --> 00:08:55,930
alright

226
00:08:54,250 --> 00:09:03,909
you know something is weird going on

227
00:08:55,929 --> 00:09:04,959
here and and who knows yeah and so I

228
00:09:03,909 --> 00:09:07,600
don't really know when that would be the

229
00:09:04,960 --> 00:09:09,730
case so again that helps us out here

230
00:09:07,600 --> 00:09:11,050
because it's just adding to the number

231
00:09:09,730 --> 00:09:13,060
of things that we know we're wrong in

232
00:09:11,049 --> 00:09:15,669
here and we would expect to see some

233
00:09:13,059 --> 00:09:17,439
boxes in here I might draw this as a

234
00:09:15,669 --> 00:09:19,149
different color just so it's more

235
00:09:17,440 --> 00:09:21,240
obvious like let me just draw a white

236
00:09:19,149 --> 00:09:27,220
box here so that I can at least see

237
00:09:21,240 --> 00:09:28,750
what's going on with with these if

238
00:09:27,220 --> 00:09:32,500
there's anything if I see any white

239
00:09:28,750 --> 00:09:34,899
boxes at all you know and I don't

240
00:09:32,500 --> 00:09:38,169
I could also since they will occupy

241
00:09:34,899 --> 00:09:41,980
exactly the same space as like you know

242
00:09:38,169 --> 00:09:44,919
this cube I could also enlarge them

243
00:09:41,980 --> 00:09:46,659
slightly or right like I could also just

244
00:09:44,919 --> 00:09:49,029
to be doubly sure that I'm not missing

245
00:09:46,659 --> 00:09:52,600
if I don't think I am I could add a

246
00:09:49,029 --> 00:09:55,299
little bit here to the box just so we

247
00:09:52,600 --> 00:09:57,909
can see it easier meaning I could say

248
00:09:55,299 --> 00:10:03,099
look let's add sort of an enlargement

249
00:09:57,909 --> 00:10:05,409
maybe to this to this box just to make

250
00:10:03,100 --> 00:10:07,360
it a little bit larger so that if the

251
00:10:05,409 --> 00:10:09,009
problem was it was just entirely inside

252
00:10:07,360 --> 00:10:11,050
the drawn region which I don't think it

253
00:10:09,009 --> 00:10:13,689
was but let's say that it might be just

254
00:10:11,049 --> 00:10:17,319
as we can see it yeah and we and we

255
00:10:13,690 --> 00:10:20,080
don't write like we would see it by now

256
00:10:17,320 --> 00:10:23,190
if it was there so I'm pretty sure it's

257
00:10:20,080 --> 00:10:28,080
just not there's not valid data in there

258
00:10:23,190 --> 00:10:30,970
so I'm gonna go ahead and switch over to

259
00:10:28,080 --> 00:10:32,500
probably debug build and I'll just loop

260
00:10:30,970 --> 00:10:34,330
through that code and see why we're not

261
00:10:32,500 --> 00:10:36,039
seeing anything because looking at the

262
00:10:34,330 --> 00:10:37,839
values there will also give me some

263
00:10:36,039 --> 00:10:40,750
insight into maybe what's going on wrong

264
00:10:37,839 --> 00:10:42,700
in the grid build code which is exactly

265
00:10:40,750 --> 00:10:45,519
the code that we need to be debugging

266
00:10:42,700 --> 00:10:50,620
next so if I switch over to the lighting

267
00:10:45,519 --> 00:10:52,419
code now so over in here so if I switch

268
00:10:50,620 --> 00:10:56,019
over to the lighting code now and I just

269
00:10:52,419 --> 00:10:59,289
jump to this part where we push it on I

270
00:10:56,019 --> 00:11:02,009
can just in theory stop on the first one

271
00:10:59,289 --> 00:11:02,009
and look what the values are

272
00:11:08,909 --> 00:11:22,318
okay so did I do something wrong with

273
00:11:16,119 --> 00:11:22,319
this code

274
00:11:26,200 --> 00:11:34,080
I'm so confused so in here we know that

275
00:11:29,500 --> 00:11:37,269
we're drawing at least I thought we did

276
00:11:34,080 --> 00:11:38,830
we know that we're drawing in debug mode

277
00:11:37,269 --> 00:11:45,189
it's really hard for me to use that

278
00:11:38,830 --> 00:11:47,259
particular code path because the game

279
00:11:45,190 --> 00:11:49,450
runs so slow when the lighting is put in

280
00:11:47,259 --> 00:11:51,689
debug mode because it's you know not

281
00:11:49,450 --> 00:11:53,190
being optimized by the compiler at all

282
00:11:51,690 --> 00:11:56,350
[Music]

283
00:11:53,190 --> 00:12:01,660
but let me yeah I mean so we're drawing

284
00:11:56,350 --> 00:12:04,600
these in magenta right which means that

285
00:12:01,659 --> 00:12:09,870
the nodes start index equals the one

286
00:12:04,600 --> 00:12:15,639
past last index I'm sorry doesn't equal

287
00:12:09,870 --> 00:12:20,679
which means this loop has to have

288
00:12:15,639 --> 00:12:28,449
occurred I mean doesn't that piece of

289
00:12:20,679 --> 00:12:33,339
code require this oh no it doesn't if

290
00:12:28,450 --> 00:12:37,560
one past last index was simply less than

291
00:12:33,340 --> 00:12:37,560
start index that would explain it

292
00:12:46,139 --> 00:12:56,980
let's take a look shall we well there

293
00:12:52,600 --> 00:12:59,980
you go so no big mystery there I thought

294
00:12:56,980 --> 00:13:02,920
our code in the spatial partition build

295
00:12:59,980 --> 00:13:06,039
correctly adjusted those values but

296
00:13:02,919 --> 00:13:09,039
guess what it obviously doesn't because

297
00:13:06,039 --> 00:13:13,990
we just watched it not so what you can

298
00:13:09,039 --> 00:13:20,079
see here is in this piece of code well

299
00:13:13,990 --> 00:13:22,899
there you go so yeah one of the things

300
00:13:20,080 --> 00:13:24,940
that I know that a lot of people watch

301
00:13:22,899 --> 00:13:26,860
John stream for I don't know if John's

302
00:13:24,940 --> 00:13:29,920
here today he's probably not I haven't

303
00:13:26,860 --> 00:13:32,070
seen any naysayer 88 comments but one of

304
00:13:29,919 --> 00:13:34,809
the things that John often tells people

305
00:13:32,070 --> 00:13:36,070
is how to succeed in the game industry I

306
00:13:34,809 --> 00:13:38,859
know a lot of people want to know how to

307
00:13:36,070 --> 00:13:40,360
succeed in the game industry if you want

308
00:13:38,860 --> 00:13:44,440
to succeed in the game industry the

309
00:13:40,360 --> 00:13:47,169
important thing to do is to make sure

310
00:13:44,440 --> 00:13:53,290
that you update one pass last index

311
00:13:47,169 --> 00:13:54,579
before start index so if anyone's

312
00:13:53,289 --> 00:13:58,120
watching his stream at the same time

313
00:13:54,580 --> 00:14:00,009
right now some says he's live you can

314
00:13:58,120 --> 00:14:02,230
jump over there and tell him that one of

315
00:14:00,009 --> 00:14:04,600
the one of the additional things that he

316
00:14:02,230 --> 00:14:05,830
may not have mentioned yet and I'm sure

317
00:14:04,600 --> 00:14:07,480
he already knows but he just may not

318
00:14:05,830 --> 00:14:09,009
have mentioned it as for how to succeed

319
00:14:07,480 --> 00:14:11,670
in the game industry is just make sure

320
00:14:09,009 --> 00:14:15,909
you always update one pass last index

321
00:14:11,669 --> 00:14:17,559
before you update start index that's

322
00:14:15,909 --> 00:14:22,179
that's really how to succeed in the game

323
00:14:17,559 --> 00:14:28,779
industry ok so now we should hopefully

324
00:14:22,179 --> 00:14:31,329
see some kind of improvement there in

325
00:14:28,779 --> 00:14:33,279
terms of at least drawing some of this

326
00:14:31,330 --> 00:14:35,980
stuff but more importantly we should get

327
00:14:33,279 --> 00:14:38,139
to the actual piece of code I would

328
00:14:35,980 --> 00:14:40,899
think although you know apparently

329
00:14:38,139 --> 00:14:42,850
that's not true right because I'm not

330
00:14:40,899 --> 00:14:44,559
seeing anything so let me see what

331
00:14:42,850 --> 00:14:46,360
happens here if I actually jump through

332
00:14:44,559 --> 00:14:51,409
to something where that code is is

333
00:14:46,360 --> 00:14:57,879
executing did I still screw it up

334
00:14:51,409 --> 00:15:01,118
no I mm I don't think I did there so

335
00:14:57,879 --> 00:15:15,528
that kind of looks like that means we

336
00:15:01,119 --> 00:15:19,099
never had any one past lasts index so

337
00:15:15,528 --> 00:15:23,288
what you can see here is that if you add

338
00:15:19,099 --> 00:15:28,249
one past last index to the start index

339
00:15:23,288 --> 00:15:29,298
and you know and to be honest there's

340
00:15:28,249 --> 00:15:31,699
another way to Steve in the game

341
00:15:29,298 --> 00:15:33,769
industry so one way is to do it this way

342
00:15:31,698 --> 00:15:42,318
another way did would be to do it this

343
00:15:33,769 --> 00:15:44,178
way so those are two ways to see in the

344
00:15:42,318 --> 00:15:46,038
game industry one is you can update

345
00:15:44,178 --> 00:15:48,408
start index first but then you have to

346
00:15:46,038 --> 00:15:50,028
add it outside the divide right

347
00:15:48,408 --> 00:15:52,458
another way to secede in the game

348
00:15:50,028 --> 00:15:54,708
industry is to just do one past last

349
00:15:52,458 --> 00:15:57,349
index first but what's interesting here

350
00:15:54,708 --> 00:16:03,368
is what we're seeing is that this count

351
00:15:57,350 --> 00:16:07,489
so that the you know the count for here

352
00:16:03,369 --> 00:16:11,538
that actual value is coming out to zero

353
00:16:07,489 --> 00:16:14,778
apparently everywhere in the entire grid

354
00:16:11,538 --> 00:16:18,350
or at least everywhere that we were

355
00:16:14,778 --> 00:16:21,048
looking which is not good

356
00:16:18,350 --> 00:16:22,908
so this count for value here where we

357
00:16:21,048 --> 00:16:24,948
have one pass last index we're rounding

358
00:16:22,908 --> 00:16:29,509
it right so all this is doing is doing a

359
00:16:24,948 --> 00:16:32,418
divide with a round if we add almost the

360
00:16:29,509 --> 00:16:34,639
entire amount minus one and then divide

361
00:16:32,418 --> 00:16:39,228
then truncation will basically become

362
00:16:34,639 --> 00:16:41,509
rounding up and the reason we're always

363
00:16:39,229 --> 00:16:43,579
wanting to round up is because even if

364
00:16:41,509 --> 00:16:45,408
we didn't fill all of an entire bucket

365
00:16:43,578 --> 00:16:47,808
of four recently to process that bucket

366
00:16:45,408 --> 00:16:49,278
even if we filled only one of the bucket

367
00:16:47,808 --> 00:16:51,769
before we still need to that's why we

368
00:16:49,278 --> 00:16:55,759
plus three there right so we're just

369
00:16:51,769 --> 00:17:00,288
trying to round up to the next highest

370
00:16:55,759 --> 00:17:04,339
four count so for some reason our count

371
00:17:00,288 --> 00:17:05,809
four always comes out to zero I guess

372
00:17:04,339 --> 00:17:09,349
which means that if you look at what's

373
00:17:05,809 --> 00:17:10,990
happening inside this piece of code when

374
00:17:09,349 --> 00:17:15,230
we are actually doing these loops

375
00:17:10,990 --> 00:17:18,349
somehow we're never getting any actual

376
00:17:15,230 --> 00:17:20,000
counts in here which is weird and I

377
00:17:18,349 --> 00:17:21,769
guess the rete well you know it's not

378
00:17:20,000 --> 00:17:24,170
that weird because if we set it to zero

379
00:17:21,769 --> 00:17:25,910
here to start to count and then you look

380
00:17:24,170 --> 00:17:31,730
at the code in here which actually does

381
00:17:25,910 --> 00:17:33,610
it it would have to increment it so

382
00:17:31,730 --> 00:17:36,829
there we go

383
00:17:33,609 --> 00:17:38,389
so again really pretty easy bugs to find

384
00:17:36,829 --> 00:17:39,980
once we had the visualization right

385
00:17:38,390 --> 00:17:42,920
because we knew immediately like what

386
00:17:39,980 --> 00:17:44,990
was wrong so finding the bugs just

387
00:17:42,920 --> 00:17:47,180
becomes pretty straightforward okay so

388
00:17:44,990 --> 00:17:49,220
now we're in this code and we're

389
00:17:47,180 --> 00:17:51,580
actually seeing something that has a

390
00:17:49,220 --> 00:17:53,480
occluder in it just what we would expect

391
00:17:51,579 --> 00:17:56,449
let's take a look at what the actual

392
00:17:53,480 --> 00:18:00,410
values are for our occluder box just to

393
00:17:56,450 --> 00:18:04,610
see if they're sensible right because I

394
00:18:00,410 --> 00:18:07,130
don't you know I don't know so nothing

395
00:18:04,609 --> 00:18:09,409
really weird about that that's a totally

396
00:18:07,130 --> 00:18:10,970
plausible occluder box so that's good

397
00:18:09,410 --> 00:18:13,490
you know I just want to make sure there

398
00:18:10,970 --> 00:18:14,329
wasn't you know garbage in there which

399
00:18:13,490 --> 00:18:15,829
there would have been because we're

400
00:18:14,329 --> 00:18:17,539
putting these in strided so we could

401
00:18:15,829 --> 00:18:32,720
have easily mixed up our shuffle when we

402
00:18:17,539 --> 00:18:34,490
went from non sse2 sse3 so we can

403
00:18:32,720 --> 00:18:36,650
probably switch back to release mode now

404
00:18:34,490 --> 00:18:38,960
and do a little bit more checking of

405
00:18:36,650 --> 00:18:41,570
what's going on but okay so already you

406
00:18:38,960 --> 00:18:44,000
can pretty much see we've improved the

407
00:18:41,569 --> 00:18:46,700
performance not performance that the

408
00:18:44,000 --> 00:18:49,700
correctness of the code quite a bit

409
00:18:46,700 --> 00:18:53,090
because now you can see we're actually

410
00:18:49,700 --> 00:18:55,720
getting sensible termination right it's

411
00:18:53,089 --> 00:18:58,599
terminating at the thing it actually hit

412
00:18:55,720 --> 00:19:01,160
okay let's keep going a little bit more

413
00:18:58,599 --> 00:19:02,599
now with the visualization side just so

414
00:19:01,160 --> 00:19:05,150
we can start to see what this codes

415
00:19:02,599 --> 00:19:07,099
actually doing and try to improve the

416
00:19:05,150 --> 00:19:11,840
debugging of it further so here's me

417
00:19:07,099 --> 00:19:13,369
running the actual code now again and

418
00:19:11,839 --> 00:19:14,779
one of the things you can see is now

419
00:19:13,369 --> 00:19:16,099
that we've hit something we're not

420
00:19:14,779 --> 00:19:19,700
actually drawing

421
00:19:16,099 --> 00:19:21,619
Raye and we we're gonna need to fix that

422
00:19:19,700 --> 00:19:23,120
because obviously we just in our debug

423
00:19:21,619 --> 00:19:25,369
code we're doing something stupid there

424
00:19:23,119 --> 00:19:30,849
so we need to fix that what you can see

425
00:19:25,369 --> 00:19:33,168
here is if you look at the white regions

426
00:19:30,849 --> 00:19:34,759
because they're inflated by probably a

427
00:19:33,169 --> 00:19:36,110
little bit too much it's a little bit

428
00:19:34,759 --> 00:19:38,058
hard to see that's probably just a

429
00:19:36,109 --> 00:19:40,819
little sliver that's on the edge of the

430
00:19:38,058 --> 00:19:46,149
cube there and so I should probably go

431
00:19:40,819 --> 00:19:46,149
ahead and reduce the grow amount there

432
00:19:47,409 --> 00:19:54,370
let's let's see

433
00:19:56,710 --> 00:20:02,910
[Music]

434
00:20:04,019 --> 00:20:12,220
okay so when we draw on in here I'm

435
00:20:07,898 --> 00:20:15,638
gonna say like let's maybe limit the

436
00:20:12,220 --> 00:20:17,919
occluder box add radius there we'll get

437
00:20:15,638 --> 00:20:21,219
rid of that temporarily let's take a

438
00:20:17,919 --> 00:20:24,038
look at where we do the drawing so where

439
00:20:21,220 --> 00:20:26,259
do we do that we do that in here for our

440
00:20:24,038 --> 00:20:30,429
push debug line probe sample piece

441
00:20:26,259 --> 00:20:38,769
single so it kind of looks like maybe

442
00:20:30,429 --> 00:20:41,259
that's buggy maybe so like when we were

443
00:20:38,769 --> 00:20:45,669
terminating on a cost metric which was

444
00:20:41,259 --> 00:20:47,740
here the code was working when we're

445
00:20:45,669 --> 00:20:50,950
terminating on an on cost metric which

446
00:20:47,740 --> 00:20:56,230
is here the code was busted it's what it

447
00:20:50,950 --> 00:20:58,869
looks like anyway so the production of

448
00:20:56,230 --> 00:21:03,099
probe sample P by doing Rea origin plus

449
00:20:58,868 --> 00:21:10,959
T ray ray D appears to be bogus or the

450
00:21:03,099 --> 00:21:13,868
extraction is bogus I assume because we

451
00:21:10,960 --> 00:21:22,269
know this code was working when we had

452
00:21:13,868 --> 00:21:32,918
probe sample piece single just being the

453
00:21:22,269 --> 00:21:36,220
terminate position right no we don't I

454
00:21:32,919 --> 00:21:39,190
mean this could have been wrong on both

455
00:21:36,220 --> 00:21:41,710
sides I suppose so I'm not really

456
00:21:39,190 --> 00:21:45,100
willing to say that yet let's start with

457
00:21:41,710 --> 00:21:48,190
something else so push debug line

458
00:21:45,099 --> 00:21:50,798
solution probe sample P single to Ray

459
00:21:48,190 --> 00:21:53,230
origin single the only way this code

460
00:21:50,798 --> 00:21:55,148
fails is if this is wrong right because

461
00:21:53,230 --> 00:21:57,788
if I come in here and say look start

462
00:21:55,148 --> 00:22:02,229
from the actual origin of the Ray right

463
00:21:57,788 --> 00:22:07,019
and draw it from there I'm assuming we

464
00:22:02,230 --> 00:22:10,798
still see it right yeah so that's

465
00:22:07,019 --> 00:22:13,889
this piece of code this piece of code is

466
00:22:10,798 --> 00:22:15,359
just busted right since we know ray

467
00:22:13,890 --> 00:22:19,038
origin singles at the right place

468
00:22:15,359 --> 00:22:21,538
because I just looked right I mean this

469
00:22:19,038 --> 00:22:23,658
wouldn't be starting at the right place

470
00:22:21,538 --> 00:22:26,329
if Ray Origin single is wrong that's

471
00:22:23,659 --> 00:22:29,669
exactly where we would expect it to be

472
00:22:26,329 --> 00:22:33,000
then probe sample P singles the only

473
00:22:29,669 --> 00:22:33,509
thing that can really be wrong you know

474
00:22:33,000 --> 00:22:37,890
I'm saying

475
00:22:33,509 --> 00:22:40,859
so what's going on there how are we

476
00:22:37,890 --> 00:22:45,179
writing probe sample piece single and

477
00:22:40,859 --> 00:22:47,398
why is it seemed to be busted by default

478
00:22:45,179 --> 00:22:49,919
it'll just be a tray origin single so I

479
00:22:47,398 --> 00:22:52,139
think if we fall through here without

480
00:22:49,919 --> 00:22:54,538
ever updating anything for some reason

481
00:22:52,140 --> 00:22:57,450
which I guess would happen if we hit the

482
00:22:54,538 --> 00:22:58,890
outside so if we hit the exterior which

483
00:22:57,450 --> 00:23:03,240
would be the spatial grid node

484
00:22:58,890 --> 00:23:05,130
Terminator if that's what we hit then in

485
00:23:03,240 --> 00:23:06,899
that case it would be fine because it

486
00:23:05,130 --> 00:23:09,059
would just run nothing right it would

487
00:23:06,898 --> 00:23:11,428
just yeah it would never be updated at

488
00:23:09,058 --> 00:23:15,450
all but in all our cases we'll update it

489
00:23:11,429 --> 00:23:18,929
and we should draw something so the

490
00:23:15,450 --> 00:23:21,778
question is what's that value and why is

491
00:23:18,929 --> 00:23:24,480
it busted since we have a convenient way

492
00:23:21,778 --> 00:23:26,490
to break on debug I guess we can just

493
00:23:24,480 --> 00:23:29,250
switch right immediately back to the

494
00:23:26,490 --> 00:23:38,460
debug build and see what are the values

495
00:23:29,250 --> 00:23:43,980
right so if we go here no that's

496
00:23:38,460 --> 00:23:48,960
erroneous if we go here I should be able

497
00:23:43,980 --> 00:23:50,759
to see what probe be single is so we can

498
00:23:48,960 --> 00:23:53,419
find out what the heck like what value

499
00:23:50,759 --> 00:23:53,419
even is it

500
00:23:57,150 --> 00:24:02,110
so it looks like the problem are getting

501
00:24:00,220 --> 00:24:04,779
here because these are all massive like

502
00:24:02,109 --> 00:24:06,339
infinity style numbers they're not

503
00:24:04,779 --> 00:24:10,450
actually in but they're you know

504
00:24:06,339 --> 00:24:13,209
approaching and that looks like what

505
00:24:10,450 --> 00:24:15,370
happened is the T value is was not

506
00:24:13,210 --> 00:24:19,480
actually updated right so - like the

507
00:24:15,369 --> 00:24:22,750
actual value that we picked for T is is

508
00:24:19,480 --> 00:24:24,730
just erroneous and so when we look in

509
00:24:22,750 --> 00:24:28,509
here like we probably came through the T

510
00:24:24,730 --> 00:24:31,299
something hit path right and what we

511
00:24:28,509 --> 00:24:33,009
probably saw when we because you know

512
00:24:31,299 --> 00:24:34,960
the way this would be updated is we do

513
00:24:33,009 --> 00:24:37,480
the P chef on the T array to get one out

514
00:24:34,960 --> 00:24:46,740
here we must have been getting the wrong

515
00:24:37,480 --> 00:24:49,210
one so taking a look at that

516
00:24:46,740 --> 00:24:54,930
let's just see what tier a ended up

517
00:24:49,210 --> 00:24:54,930
getting evaluated - you know who knows

518
00:24:58,529 --> 00:25:04,089
okay so you can see here like T ray is

519
00:25:01,720 --> 00:25:06,309
just kind of garbagey right it's set to

520
00:25:04,089 --> 00:25:08,980
the flute maxes that it would have been

521
00:25:06,309 --> 00:25:11,740
set to if we'd never hit anything so

522
00:25:08,980 --> 00:25:13,440
even though I believe we did hit

523
00:25:11,740 --> 00:25:17,670
something meaning something hit

524
00:25:13,440 --> 00:25:24,430
apparently was actually occurring

525
00:25:17,670 --> 00:25:27,340
somehow the mask value didn't correctly

526
00:25:24,430 --> 00:25:30,400
update or well know you know the it's

527
00:25:27,339 --> 00:25:32,139
probably the pea chef B so it probably

528
00:25:30,400 --> 00:25:33,820
happened was the pea chef be like

529
00:25:32,140 --> 00:25:38,890
shuffled something into place it was

530
00:25:33,819 --> 00:25:46,480
erroneous right that's probably what

531
00:25:38,890 --> 00:25:50,400
happened and how were we doing that so

532
00:25:46,480 --> 00:25:50,400
we've got our shuffle table

533
00:25:59,769 --> 00:26:11,470
and the shuffle tables gonna pick the

534
00:26:09,490 --> 00:26:16,120
shuffle table is gonna pick whatever the

535
00:26:11,470 --> 00:26:20,170
men pose thought it should be so this

536
00:26:16,119 --> 00:26:24,309
code which was really kind of

537
00:26:20,170 --> 00:26:28,600
seat-of-the-pants here it may be time to

538
00:26:24,309 --> 00:26:32,710
start looking into that so what I kind

539
00:26:28,599 --> 00:26:35,409
of need here is I need a debug trap that

540
00:26:32,710 --> 00:26:37,900
will occur at the precise time I want to

541
00:26:35,410 --> 00:26:39,670
actually debug that so I'm going to

542
00:26:37,900 --> 00:26:41,980
augment that code with something

543
00:26:39,670 --> 00:26:45,070
unnecessary so that I can do my debug

544
00:26:41,980 --> 00:26:47,950
trap so in something hit I want to

545
00:26:45,069 --> 00:26:49,839
actually stop specifically on the one

546
00:26:47,950 --> 00:26:51,610
we're debugging just so I'm familiar

547
00:26:49,839 --> 00:26:54,699
with what the REA is and what should

548
00:26:51,609 --> 00:26:58,209
probably happen to it and in here I'm

549
00:26:54,700 --> 00:27:02,440
just gonna do like a in break now equals

550
00:26:58,210 --> 00:27:04,990
true don't actually care what that line

551
00:27:02,440 --> 00:27:07,090
says I know in debug mode it won't get

552
00:27:04,990 --> 00:27:10,809
optimized out and I'm just gonna run to

553
00:27:07,089 --> 00:27:14,470
that line so when we jump down here and

554
00:27:10,809 --> 00:27:16,690
we stuff okay didn't mean to have that

555
00:27:14,470 --> 00:27:24,579
breakpoint still in there and that

556
00:27:16,690 --> 00:27:27,220
wasn't there okay so here in break now

557
00:27:24,579 --> 00:27:29,230
I'm gonna take a look at what happens

558
00:27:27,220 --> 00:27:38,110
with the shuffling so the first thing we

559
00:27:29,230 --> 00:27:40,269
do here is we do we do a pfb which for

560
00:27:38,109 --> 00:27:43,179
some reason I don't know why mm shuffle

561
00:27:40,269 --> 00:27:45,339
epi8 up here didn't turn into a pea chef

562
00:27:43,180 --> 00:27:47,440
B because we made the macro to do this

563
00:27:45,339 --> 00:27:49,899
I'll have to look and see why we're not

564
00:27:47,440 --> 00:27:51,880
just calling PFP but so we're doing a

565
00:27:49,900 --> 00:27:53,590
pea chef B here which for some reason is

566
00:27:51,880 --> 00:28:00,870
called mm shuffle epi8 in the word

567
00:27:53,589 --> 00:28:00,869
intrinsic world but it's a pea chef pea

568
00:28:01,460 --> 00:28:11,298
the pfb is designed to take the

569
00:28:05,950 --> 00:28:13,519
horizontal comparison so min posi PU 16

570
00:28:11,298 --> 00:28:15,829
we're trying to use that to compare

571
00:28:13,519 --> 00:28:17,269
floats which technically doesn't compare

572
00:28:15,829 --> 00:28:19,460
floats but basically what we're saying

573
00:28:17,269 --> 00:28:20,929
is we don't care about the bottom 16

574
00:28:19,460 --> 00:28:23,058
bits of the mantissa

575
00:28:20,929 --> 00:28:30,169
we just want whichever one is roughly

576
00:28:23,058 --> 00:28:31,700
the lowest otherwise I don't really know

577
00:28:30,169 --> 00:28:36,370
I've said this before I don't really

578
00:28:31,700 --> 00:28:36,370
know that that's what we want to do it's

579
00:28:37,150 --> 00:28:44,960
overly clever in fact we've got a to do

580
00:28:41,058 --> 00:28:46,879
here right that's an example of me

581
00:28:44,960 --> 00:28:50,409
saying look this may not be such a great

582
00:28:46,880 --> 00:28:53,200
idea right but who knows we'll see

583
00:28:50,409 --> 00:28:56,750
anyway what we're doing is we're taking

584
00:28:53,200 --> 00:28:59,210
four floats and we're taking the high 16

585
00:28:56,750 --> 00:29:01,579
bits of each float and putting it down

586
00:28:59,210 --> 00:29:04,819
into the place where we would compare

587
00:29:01,579 --> 00:29:07,519
them first so 2 3 that's the high of the

588
00:29:04,819 --> 00:29:09,859
first float 6 7 high the second 10 11

589
00:29:07,519 --> 00:29:17,480
high of the 3rd 14 15 high of the 4th

590
00:29:09,859 --> 00:29:20,209
right make sense we pad the end with

591
00:29:17,480 --> 00:29:22,159
just the first one and that way we know

592
00:29:20,210 --> 00:29:23,450
that it can't compare favorably against

593
00:29:22,159 --> 00:29:28,340
the first one because we don't want any

594
00:29:23,450 --> 00:29:31,279
values higher than 4 right okay so if we

595
00:29:28,339 --> 00:29:35,928
then look at what happens here so if we

596
00:29:31,279 --> 00:29:37,759
take T ray P for starters and what I'll

597
00:29:35,929 --> 00:29:40,280
do is we'll just take a look at what the

598
00:29:37,759 --> 00:29:44,379
M 128 F 32 components are so here's what

599
00:29:40,279 --> 00:29:49,308
they are we've got two bounding box hits

600
00:29:44,380 --> 00:29:52,460
right and two bounding box misses like

601
00:29:49,308 --> 00:29:54,470
so now it's a little bit weird because I

602
00:29:52,460 --> 00:29:57,558
don't know why there are two it would

603
00:29:54,470 --> 00:30:00,288
have only seemed to probably be hitting

604
00:29:57,558 --> 00:30:02,329
only one and you know before I go any

605
00:30:00,288 --> 00:30:07,779
further down that path I would like to

606
00:30:02,329 --> 00:30:07,779
just see why that is

607
00:30:08,099 --> 00:30:13,769
I'm curious if that's like wrong I'm

608
00:30:11,220 --> 00:30:16,950
thinking it it probably is wrong but I

609
00:30:13,769 --> 00:30:19,859
don't really know so let me just take a

610
00:30:16,950 --> 00:30:24,230
look at what's going on where does this

611
00:30:19,859 --> 00:30:24,229
Rea actually enter okay

612
00:30:24,650 --> 00:30:29,570
and I guess I can't quite see here but

613
00:30:35,160 --> 00:30:40,230
I mean it just doesn't seem plausible

614
00:30:37,650 --> 00:30:42,060
right when you come through here you're

615
00:30:40,230 --> 00:30:43,769
gonna hit this one and that's all you're

616
00:30:42,059 --> 00:30:48,509
gonna hit right I mean you're not gonna

617
00:30:43,769 --> 00:30:51,089
hit anything else so it feels a little

618
00:30:48,509 --> 00:30:55,430
erroneous so I think I think we may have

619
00:30:51,089 --> 00:30:55,429
a hit bug as well up here

620
00:31:05,920 --> 00:31:09,970
and I'm not sure where that bug would

621
00:31:08,259 --> 00:31:17,650
come from because this looks pretty good

622
00:31:09,970 --> 00:31:19,809
I don't know if we screwed up the

623
00:31:17,650 --> 00:31:27,250
algorithm somehow when we were modifying

624
00:31:19,809 --> 00:31:30,579
it but like it doesn't look bogus you

625
00:31:27,250 --> 00:31:32,559
know you can see right like here we are

626
00:31:30,579 --> 00:31:34,839
checking the bounds to make sure the

627
00:31:32,559 --> 00:31:36,129
team in is less than the team acts and

628
00:31:34,839 --> 00:31:39,069
the team in also has to be greater than

629
00:31:36,130 --> 00:31:40,780
0 which means that max Pass right we

630
00:31:39,069 --> 00:31:43,480
don't care about that was for testing

631
00:31:40,779 --> 00:31:46,149
inside miss which we don't care if

632
00:31:43,480 --> 00:31:48,160
you're inside because the Ray Origin

633
00:31:46,150 --> 00:31:52,030
just if the Ray origin was inside we

634
00:31:48,160 --> 00:31:53,170
don't care about that hit so we only

635
00:31:52,029 --> 00:31:57,819
care about these other hits and if you

636
00:31:53,170 --> 00:32:00,250
look here you can see that you know the

637
00:31:57,819 --> 00:32:05,349
the team acts and team in we've we've

638
00:32:00,250 --> 00:32:07,569
gone through these and we've we've

639
00:32:05,349 --> 00:32:15,250
picked the lowest I I just I just don't

640
00:32:07,569 --> 00:32:16,329
know I I just don't know that doesn't

641
00:32:15,250 --> 00:32:18,160
seem like it should have produced two

642
00:32:16,329 --> 00:32:22,990
hits there so so one thing we'll have to

643
00:32:18,160 --> 00:32:26,680
look at is just do we actually really

644
00:32:22,990 --> 00:32:29,079
believe that we did those two that those

645
00:32:26,680 --> 00:32:32,860
were two real hits or is this algorithm

646
00:32:29,079 --> 00:32:36,819
producing erroneous results because of

647
00:32:32,859 --> 00:32:38,049
something that I'm missing and that's

648
00:32:36,819 --> 00:32:40,839
gonna be something we're gonna have to

649
00:32:38,049 --> 00:32:42,159
to study a little bit more carefully so

650
00:32:40,839 --> 00:32:44,139
let's just keep that in the back of our

651
00:32:42,160 --> 00:32:45,700
heads remind me if I forget because on

652
00:32:44,140 --> 00:32:47,560
streams sometimes it's hard for me to

653
00:32:45,700 --> 00:32:52,330
remember all the things because my brain

654
00:32:47,559 --> 00:32:54,399
is too busy like talking to you but just

655
00:32:52,329 --> 00:32:56,710
keep that in mind so because I don't

656
00:32:54,400 --> 00:32:58,180
base on that like limited amount of

657
00:32:56,710 --> 00:32:59,829
expection that I and don't feel

658
00:32:58,180 --> 00:33:02,440
comfortable that it don't think we can

659
00:32:59,829 --> 00:33:04,839
write that off so I'm gonna go in here

660
00:33:02,440 --> 00:33:06,580
and set a breakpoint on the break now

661
00:33:04,839 --> 00:33:09,089
line and then I'm gonna look at what

662
00:33:06,579 --> 00:33:11,289
happens with this shuffle so here we go

663
00:33:09,089 --> 00:33:13,779
what we should be getting out of shuffle

664
00:33:11,289 --> 00:33:15,519
is to write is what we should be getting

665
00:33:13,779 --> 00:33:17,259
out of our arm in paws so let's just

666
00:33:15,519 --> 00:33:19,490
take a look at what happens to the h

667
00:33:17,259 --> 00:33:22,308
comp I'm gonna look so

668
00:33:19,490 --> 00:33:25,460
in the h comp value i want to look

669
00:33:22,308 --> 00:33:28,759
specifically at the u16 counters because

670
00:33:25,460 --> 00:33:30,590
that's what we're actually putting into

671
00:33:28,759 --> 00:33:31,250
these some I'm just gonna look at what

672
00:33:30,589 --> 00:33:38,148
these are

673
00:33:31,250 --> 00:33:46,759
oops it's M 128 u 16 right isn't it no

674
00:33:38,148 --> 00:33:48,558
sorry it's 128 I know so when we do this

675
00:33:46,759 --> 00:33:51,798
shuffle we should see these values

676
00:33:48,558 --> 00:33:53,509
change here they are and what you can

677
00:33:51,798 --> 00:33:55,278
see is we get these two values which are

678
00:33:53,509 --> 00:33:57,048
the two which correspond to these two T

679
00:33:55,278 --> 00:34:00,019
values and what you could see is they

680
00:33:57,048 --> 00:34:01,908
properly correspond exactly the way that

681
00:34:00,019 --> 00:34:04,278
I said that they would right so although

682
00:34:01,909 --> 00:34:05,870
we're just taking the high slice of the

683
00:34:04,278 --> 00:34:08,239
float we know that that includes the

684
00:34:05,869 --> 00:34:10,398
sign bit in the exponent and then the

685
00:34:08,239 --> 00:34:11,989
first few bits of the mantissa right so

686
00:34:10,398 --> 00:34:15,888
it's like sign bit exponent in 8 bits

687
00:34:11,989 --> 00:34:17,418
mantissa roughly when we do this

688
00:34:15,889 --> 00:34:19,700
comparison we would then expect to find

689
00:34:17,418 --> 00:34:21,949
that whatever the highest of these or

690
00:34:19,699 --> 00:34:24,348
whatever the lowest of this is is though

691
00:34:21,949 --> 00:34:26,868
is the closest hit unless we had two

692
00:34:24,349 --> 00:34:29,800
that had the same exponent and the same

693
00:34:26,869 --> 00:34:31,820
first eight bits of the mantissa right

694
00:34:29,800 --> 00:34:34,849
so again this is just stupid float

695
00:34:31,820 --> 00:34:37,369
tricks 101 there is no way to extract

696
00:34:34,849 --> 00:34:39,409
the specific float in SSE four that I

697
00:34:37,369 --> 00:34:41,119
know of if you can't check for floats

698
00:34:39,409 --> 00:34:43,398
for which one's lowest that's not a

699
00:34:41,119 --> 00:34:46,129
thing you can do you'd have to actually

700
00:34:43,398 --> 00:34:48,138
do your own shuffle horizontal compare

701
00:34:46,128 --> 00:34:49,250
basically which would take forever so

702
00:34:48,139 --> 00:34:50,269
this is just two instructions to do

703
00:34:49,250 --> 00:34:53,628
something that would normally take you

704
00:34:50,269 --> 00:34:56,079
like six or something right so that's

705
00:34:53,628 --> 00:34:58,309
all we're doing here anyway

706
00:34:56,079 --> 00:35:01,489
when we then produce the midden test

707
00:34:58,309 --> 00:35:02,710
value we're gonna see if this actually

708
00:35:01,489 --> 00:35:05,299
correctly

709
00:35:02,710 --> 00:35:07,820
bingos the float that we were actually

710
00:35:05,300 --> 00:35:10,220
looking for and so if I take a look in

711
00:35:07,820 --> 00:35:16,880
here at the U sixteens

712
00:35:10,219 --> 00:35:18,858
that come out of this no oh I must have

713
00:35:16,880 --> 00:35:20,030
caps lock on I can't see here we go

714
00:35:18,858 --> 00:35:22,069
sometimes accidentally hit the caps lock

715
00:35:20,030 --> 00:35:23,869
key kind of wish I could just turn that

716
00:35:22,070 --> 00:35:27,650
off I just never bother to do the like

717
00:35:23,869 --> 00:35:29,030
NT registry hack trick I like those

718
00:35:27,650 --> 00:35:31,039
keyboards where you can just disable it

719
00:35:29,030 --> 00:35:33,269
on the keyboard so it's good

720
00:35:31,039 --> 00:35:34,469
so we're gonna run min pause on this and

721
00:35:33,269 --> 00:35:36,358
what we would expect to find here is

722
00:35:34,469 --> 00:35:38,309
that min pause should give us back first

723
00:35:36,358 --> 00:35:39,960
of all what the minimum value was and

724
00:35:38,309 --> 00:35:41,489
that'll go in slot zero and then what

725
00:35:39,960 --> 00:35:45,990
index it was in and that'll go in slot

726
00:35:41,489 --> 00:35:48,809
one right so there we go

727
00:35:45,989 --> 00:35:50,939
and that answer is correct so two is the

728
00:35:48,809 --> 00:35:53,608
correct answer right and so you can see

729
00:35:50,940 --> 00:35:55,108
that was just me playing it fast and

730
00:35:53,608 --> 00:35:59,009
loose with floats there but but it seems

731
00:35:55,108 --> 00:36:01,319
to work right yeah yeah it seems like

732
00:35:59,010 --> 00:36:03,000
it's the right thing so so far that

733
00:36:01,320 --> 00:36:06,930
algorithm looks like it worked

734
00:36:03,000 --> 00:36:10,320
shuffle index should now be two unless I

735
00:36:06,929 --> 00:36:15,029
messed up the extract and I guess I did

736
00:36:10,320 --> 00:36:19,349
oh my goodness

737
00:36:15,030 --> 00:36:23,540
okay so extract epi16 is taking the 60

738
00:36:19,349 --> 00:36:26,250
minutes so that should be one all right

739
00:36:23,539 --> 00:36:28,320
if that's the only thing that we screwed

740
00:36:26,250 --> 00:36:29,880
up in writing that algorithm I am pretty

741
00:36:28,320 --> 00:36:34,920
happy with that cuz that was a pretty

742
00:36:29,880 --> 00:36:41,119
crazy maneuver right all right so if we

743
00:36:34,920 --> 00:36:43,050
jump over he or poops I should actually

744
00:36:41,119 --> 00:36:44,608
continue breaking that I keep forgetting

745
00:36:43,050 --> 00:36:47,630
that I only want to use this one place

746
00:36:44,608 --> 00:36:52,289
right we should see that shuffle index

747
00:36:47,630 --> 00:36:55,410
should now actually produce we should

748
00:36:52,289 --> 00:36:58,050
should get the correct value out of this

749
00:36:55,409 --> 00:37:00,299
now so let's take a look at min test

750
00:36:58,050 --> 00:37:04,190
there it is and now the two is coming

751
00:37:00,300 --> 00:37:04,190
out properly all right one more time

752
00:37:05,329 --> 00:37:08,730
just one make sure I step through it

753
00:37:07,320 --> 00:37:12,059
right because I was kind of not paying

754
00:37:08,730 --> 00:37:14,159
attention there yeah so now when we pull

755
00:37:12,059 --> 00:37:15,929
out the shuffle table shuffler we should

756
00:37:14,159 --> 00:37:17,879
get the correct thing let's see if that

757
00:37:15,929 --> 00:37:20,159
actually happens so now we should see is

758
00:37:17,880 --> 00:37:21,960
this should be a broadcast this P

759
00:37:20,159 --> 00:37:24,329
shuffle should basically be this P chef

760
00:37:21,960 --> 00:37:26,099
should be a broadcast of lane two to all

761
00:37:24,329 --> 00:37:28,949
lanes so all the lanes should become

762
00:37:26,099 --> 00:37:35,190
1111 anyone anyone out there a rufus

763
00:37:28,949 --> 00:37:37,819
wainwright fan come on chat rufus

764
00:37:35,190 --> 00:37:37,820
wainwright anybody

765
00:37:42,239 --> 00:37:55,568
anybody know seriously all right fine

766
00:37:53,170 --> 00:37:56,950
well it's 11:11 and if you know rufus

767
00:37:55,568 --> 00:38:04,088
wainwright then you would know that

768
00:37:56,949 --> 00:38:06,009
11:11 is a song anyway so there's the

769
00:38:04,088 --> 00:38:08,679
broadcast and there is that that worked

770
00:38:06,009 --> 00:38:10,210
away we want so now our probe sample P

771
00:38:08,679 --> 00:38:12,009
should hopefully be the correct value

772
00:38:10,210 --> 00:38:14,199
because the TRA will now no longer be

773
00:38:12,009 --> 00:38:16,568
garbage I don't really know much about

774
00:38:14,199 --> 00:38:17,618
the normal part here we haven't really

775
00:38:16,568 --> 00:38:19,630
looked at that and we're probably gonna

776
00:38:17,619 --> 00:38:21,400
have to debug that code as well what we

777
00:38:19,630 --> 00:38:22,838
can do here is if we want to we can

778
00:38:21,400 --> 00:38:27,818
start to look at what those values

779
00:38:22,838 --> 00:38:29,139
actually are but you know doesn't really

780
00:38:27,818 --> 00:38:30,369
actually matter in this particular case

781
00:38:29,139 --> 00:38:31,929
because we're not at that point of

782
00:38:30,369 --> 00:38:33,249
debugging so I'm gonna go ahead and say

783
00:38:31,929 --> 00:38:37,449
let's take a look at the diagram again

784
00:38:33,248 --> 00:38:37,929
oh dear no no I don't know what that was

785
00:38:37,449 --> 00:38:41,159
about

786
00:38:37,929 --> 00:38:45,578
I hit something maybe that I probably

787
00:38:41,159 --> 00:38:47,318
told remedy to let the program run which

788
00:38:45,579 --> 00:38:50,140
then because there's a breakpoint in it

789
00:38:47,318 --> 00:38:51,818
caused it to crash in Windows which

790
00:38:50,139 --> 00:38:54,699
caused it to do the report I'm guessing

791
00:38:51,818 --> 00:38:59,409
something like that happened don't hit

792
00:38:54,699 --> 00:39:02,348
that key okay so now if we continue

793
00:38:59,409 --> 00:39:08,409
running here and we take a look at what

794
00:39:02,349 --> 00:39:10,210
we're what we're looking at if I look at

795
00:39:08,409 --> 00:39:13,058
the raycast I can now see that hey I'm

796
00:39:10,210 --> 00:39:14,528
getting getting correct result to a

797
00:39:13,059 --> 00:39:19,359
certain extent right you can see that

798
00:39:14,528 --> 00:39:21,039
I'm actually hitting right there which

799
00:39:19,358 --> 00:39:24,009
is what I expect

800
00:39:21,039 --> 00:39:27,489
I'd like to augment here just to get a

801
00:39:24,009 --> 00:39:30,278
little bit better understanding of where

802
00:39:27,489 --> 00:39:32,978
or the Ray is actually hitting so what I

803
00:39:30,278 --> 00:39:38,170
might do here is draw this considerably

804
00:39:32,978 --> 00:39:43,808
more muted and actually push a debug box

805
00:39:38,170 --> 00:39:46,630
on here where I can just say rec center

806
00:39:43,809 --> 00:39:49,289
dim something like that and I'll just

807
00:39:46,630 --> 00:39:49,289
draw like

808
00:39:49,679 --> 00:40:07,889
a small box that's just at the point

809
00:39:58,440 --> 00:40:10,500
where we actually hit so this will just

810
00:40:07,889 --> 00:40:13,559
give me like a little tiny like probe

811
00:40:10,500 --> 00:40:15,900
point that shows like here's where we

812
00:40:13,559 --> 00:40:21,119
think the Ray intersected the geometry

813
00:40:15,900 --> 00:40:23,340
and so now the Ray cancer appears to be

814
00:40:21,119 --> 00:40:29,210
finding the correct location like right

815
00:40:23,340 --> 00:40:32,760
there it is it's hitting that cell and

816
00:40:29,210 --> 00:40:36,690
you know I don't really know that

817
00:40:32,760 --> 00:40:39,450
there's much else we need to prove about

818
00:40:36,690 --> 00:40:42,720
it other than that seems somewhat

819
00:40:39,449 --> 00:40:44,849
debugged now right I mean then actually

820
00:40:42,719 --> 00:40:47,480
no certainly there could be lots of

821
00:40:44,849 --> 00:40:53,250
other problems but you know it's it's a

822
00:40:47,480 --> 00:40:53,880
it's closed right and so we're getting

823
00:40:53,250 --> 00:40:58,500
somewhere

824
00:40:53,880 --> 00:41:01,110
hopefully and we'll see now I need to

825
00:40:58,500 --> 00:41:03,570
check the normal because I don't know if

826
00:41:01,110 --> 00:41:06,150
that's coming out correct at all so

827
00:41:03,570 --> 00:41:08,940
we're gonna have to take a look at that

828
00:41:06,150 --> 00:41:10,800
and so before I go any further down the

829
00:41:08,940 --> 00:41:14,010
road towards trying to make this work

830
00:41:10,800 --> 00:41:16,890
well I'm just going to go ahead and see

831
00:41:14,010 --> 00:41:19,560
whether or not there's yeah any

832
00:41:16,889 --> 00:41:21,420
weirdness there another thing I would

833
00:41:19,559 --> 00:41:23,940
say is it feels like this is the

834
00:41:21,420 --> 00:41:34,320
transmission distance is too far I feel

835
00:41:23,940 --> 00:41:36,900
like this value is not good like we're

836
00:41:34,320 --> 00:41:41,150
allowing this thing to walk too far or

837
00:41:36,900 --> 00:41:45,530
something I feel like these are opposite

838
00:41:41,150 --> 00:41:48,000
you know what I mean like I feel like I

839
00:41:45,530 --> 00:41:50,280
feel like this actually wants to be more

840
00:41:48,000 --> 00:41:54,260
like that and this actually wants to be

841
00:41:50,280 --> 00:41:54,260
more like this

842
00:41:55,838 --> 00:42:00,349
because I don't think we should go very

843
00:41:58,039 --> 00:42:03,140
far if we're not seeing any geometry

844
00:42:00,349 --> 00:42:07,278
like we shouldn't go super far in that

845
00:42:03,139 --> 00:42:09,889
case right I feel like these rays should

846
00:42:07,278 --> 00:42:11,719
terminate earlier so like this is more

847
00:42:09,889 --> 00:42:13,969
like what I would expect and maybe

848
00:42:11,719 --> 00:42:15,379
that's a little aggressive but I feel

849
00:42:13,969 --> 00:42:19,399
like we should probably stopping before

850
00:42:15,380 --> 00:42:21,349
we ever get to some of these so you know

851
00:42:19,400 --> 00:42:23,568
I'm gonna flip those two at least for

852
00:42:21,349 --> 00:42:28,579
now because I don't think we should be

853
00:42:23,568 --> 00:42:32,088
shooting quite so far as we are just

854
00:42:28,579 --> 00:42:34,460
wasting time and like you know that's

855
00:42:32,088 --> 00:42:37,099
plenty of grid squares to check in my

856
00:42:34,460 --> 00:42:39,500
opinion for any given array we don't

857
00:42:37,099 --> 00:42:42,200
need the light to propagate that far in

858
00:42:39,500 --> 00:42:43,568
a single frame and you know so it

859
00:42:42,199 --> 00:42:46,308
doesn't really make a whole lot of sense

860
00:42:43,568 --> 00:42:47,750
um so you know looking at the

861
00:42:46,309 --> 00:42:51,260
performance of this I wouldn't say that

862
00:42:47,750 --> 00:42:52,130
it's particularly good yet so you know I

863
00:42:51,260 --> 00:42:53,480
don't know how much of an improvement

864
00:42:52,130 --> 00:42:56,059
we're actually gonna end up getting out

865
00:42:53,480 --> 00:42:58,460
of the routine or not but again like

866
00:42:56,059 --> 00:43:01,130
limiting those values should make a

867
00:42:58,460 --> 00:43:03,318
difference meaning in theory like we can

868
00:43:01,130 --> 00:43:04,730
play with the cosmetic to get some

869
00:43:03,318 --> 00:43:08,028
savings there I mean I don't actually

870
00:43:04,730 --> 00:43:09,260
know if we will or won't but like even

871
00:43:08,028 --> 00:43:11,059
that you can kind of see it something's

872
00:43:09,260 --> 00:43:13,160
a little weird about this because that

873
00:43:11,059 --> 00:43:15,019
should have saved a lot of time and

874
00:43:13,159 --> 00:43:18,889
doesn't really seem like it did which is

875
00:43:15,019 --> 00:43:22,250
odd also not sure why that oh you know

876
00:43:18,889 --> 00:43:23,598
what those tables for some reason don't

877
00:43:22,250 --> 00:43:24,949
compute right on reboot I think we're

878
00:43:23,599 --> 00:43:29,960
gonna have to do a thing where we forced

879
00:43:24,949 --> 00:43:33,739
it to recompute the tables but it's

880
00:43:29,960 --> 00:43:36,650
weird like you would expect this number

881
00:43:33,739 --> 00:43:39,528
to go down more than it does which means

882
00:43:36,650 --> 00:43:42,980
we may have some overhead stuff that we

883
00:43:39,528 --> 00:43:48,199
need to you know clean up at this point

884
00:43:42,980 --> 00:43:50,210
and I guess we'll find out as we go so

885
00:43:48,199 --> 00:43:51,679
anyway I do think we want to play with

886
00:43:50,210 --> 00:43:54,500
that stuff a little bit I'm gonna leave

887
00:43:51,679 --> 00:43:56,149
it in for now because I want to just use

888
00:43:54,500 --> 00:43:58,400
this to buggin case but I do think we

889
00:43:56,150 --> 00:44:01,490
kind of want the cost metrics to be

890
00:43:58,400 --> 00:44:02,838
adjusted what I'm going to do now is I'm

891
00:44:01,489 --> 00:44:05,869
going to put a debug line on here that

892
00:44:02,838 --> 00:44:13,309
shows the normal so I'm gonna do

893
00:44:05,869 --> 00:44:15,739
a like a line coming out that shows what

894
00:44:13,309 --> 00:44:19,929
we think the normal was so you know kind

895
00:44:15,739 --> 00:44:25,089
of maybe a bright orange line there that

896
00:44:19,929 --> 00:44:29,269
goes from the probe sample piece single

897
00:44:25,090 --> 00:44:35,539
along the normal so it's probe sample

898
00:44:29,269 --> 00:44:38,780
end single at that point and we probably

899
00:44:35,539 --> 00:44:41,050
need to go maybe just one unit I mean

900
00:44:38,780 --> 00:44:43,460
that's plenty long enough for us to see

901
00:44:41,050 --> 00:44:47,120
the direction of the thing is going I

902
00:44:43,460 --> 00:44:51,199
would think and I guess we'll find out

903
00:44:47,119 --> 00:44:53,569
now so that's the correct normal for

904
00:44:51,199 --> 00:44:57,139
this particular hit it doesn't really

905
00:44:53,570 --> 00:45:00,769
tell us much about other hits we

906
00:44:57,139 --> 00:45:03,799
probably need to start letting this roam

907
00:45:00,769 --> 00:45:08,079
more and one thing I could do

908
00:45:03,800 --> 00:45:11,510
potentially is to have some way of

909
00:45:08,079 --> 00:45:15,130
changing what the debug value is so if I

910
00:45:11,510 --> 00:45:15,130
go to grid raycast here

911
00:45:23,500 --> 00:45:32,260
I don't know where I don't know hmm

912
00:45:30,190 --> 00:45:34,059
so I don't know exactly what the best

913
00:45:32,260 --> 00:45:36,070
way to do this would be I mean I kind of

914
00:45:34,059 --> 00:45:38,799
want to be able to inspect arbitrary

915
00:45:36,070 --> 00:45:44,800
ones of these Ray casts and I'm not sure

916
00:45:38,800 --> 00:45:54,700
honestly really not actually sure how I

917
00:45:44,800 --> 00:45:56,470
should do that I guess like you know it

918
00:45:54,699 --> 00:45:59,199
would be nice it was just tied to like a

919
00:45:56,469 --> 00:46:04,179
value so I wonder if I could just do

920
00:45:59,199 --> 00:46:09,339
something like yeah there's like some

921
00:46:04,179 --> 00:46:12,789
kind of like a value in here that I'll

922
00:46:09,340 --> 00:46:27,970
just like edit in the debug settings or

923
00:46:12,789 --> 00:46:31,809
something debug grid index I don't know

924
00:46:27,969 --> 00:46:34,959
so let's just suppose that we happen to

925
00:46:31,809 --> 00:46:37,420
have a debugger in index here or

926
00:46:34,960 --> 00:46:41,889
something and that there was like a

927
00:46:37,420 --> 00:46:43,530
debug value for this thing and then like

928
00:46:41,889 --> 00:46:47,348
maybe we just have like a lighting

929
00:46:43,530 --> 00:46:48,880
output of that of that value like this

930
00:46:47,349 --> 00:46:52,320
is just me just making up something

931
00:46:48,880 --> 00:46:54,670
because I just want to be able to like I

932
00:46:52,320 --> 00:46:56,530
just want to dial in a particular value

933
00:46:54,670 --> 00:47:01,269
right I mean that's all I really wanted

934
00:46:56,530 --> 00:47:04,980
to do so you know I don't know if I can

935
00:47:01,269 --> 00:47:04,980
do what I'm doing here but I'm gonna try

936
00:47:05,429 --> 00:47:11,710
right so just say look here's a lighting

937
00:47:08,710 --> 00:47:14,010
data and I want this to show up in the

938
00:47:11,710 --> 00:47:17,559
lighting data and I just want it to be

939
00:47:14,010 --> 00:47:20,980
something you can edit I don't know if

940
00:47:17,559 --> 00:47:22,719
you can edit it I don't remember

941
00:47:20,980 --> 00:47:27,880
anything about our debug system other

942
00:47:22,719 --> 00:47:29,259
than it was kind of crappy but you know

943
00:47:27,880 --> 00:47:29,710
I think we had the lighting in here

944
00:47:29,260 --> 00:47:34,410
somewhere

945
00:47:29,710 --> 00:47:37,619
yeah and so if you look at the

946
00:47:34,409 --> 00:47:39,358
a lighting data here there's a it did

947
00:47:37,619 --> 00:47:40,680
work I mean there's a debug grid index I

948
00:47:39,358 --> 00:47:50,250
just don't know how you get this to be

949
00:47:40,679 --> 00:47:51,868
editable right it looks like we I want

950
00:47:50,250 --> 00:47:54,318
to say we did allow something like that

951
00:47:51,869 --> 00:47:54,318
though

952
00:47:57,139 --> 00:48:25,019
so like debug b32 allows you to edit a

953
00:48:02,190 --> 00:48:26,159
write debug UI element I don't know how

954
00:48:25,019 --> 00:48:33,750
this thing worked

955
00:48:26,159 --> 00:48:37,279
it was pretty dumb um so like I have no

956
00:48:33,750 --> 00:48:41,670
idea what most of these things are I

957
00:48:37,280 --> 00:48:47,690
definitely don't know why this is

958
00:48:41,670 --> 00:48:51,480
editable and this is not although I

959
00:48:47,690 --> 00:49:00,269
would suspect it's probably has

960
00:48:51,480 --> 00:49:02,699
something to do with this meaning we

961
00:49:00,269 --> 00:49:04,920
probably just implemented editing for be

962
00:49:02,699 --> 00:49:11,000
that did we I don't know let's take a

963
00:49:04,920 --> 00:49:11,000
look so

964
00:49:12,449 --> 00:49:21,608
those have nothing to thudding those do

965
00:49:17,469 --> 00:49:27,599
okay so our thirty twos had a drag value

966
00:49:21,608 --> 00:49:30,808
interaction but but integers didn't I

967
00:49:27,599 --> 00:49:38,229
guess that was it so we finally just

968
00:49:30,809 --> 00:49:41,699
make a drag value interaction for these

969
00:49:38,228 --> 00:49:51,399
then I guess it would just work I mean

970
00:49:41,699 --> 00:49:55,989
right which means what

971
00:49:51,400 --> 00:49:57,999
like debug type u16 I mean I guess I

972
00:49:55,989 --> 00:49:59,708
could use just you thirty-two because

973
00:49:57,998 --> 00:50:01,748
that's probably more what I'll typically

974
00:49:59,708 --> 00:50:02,889
want and we'll just make the thing our

975
00:50:01,748 --> 00:50:09,698
thing in you thirty-two

976
00:50:02,889 --> 00:50:17,528
I don't think I want that to be why I

977
00:50:09,699 --> 00:50:22,180
think I would rather it be X maybe I'm

978
00:50:17,528 --> 00:50:27,909
totally just making this up here I also

979
00:50:22,179 --> 00:50:30,659
don't know if D Mouse pee I don't know

980
00:50:27,909 --> 00:50:30,659
what this is going to do

981
00:50:35,119 --> 00:50:41,849
so I don't really know what this is

982
00:50:36,840 --> 00:50:43,200
gonna do probably nothing good and this

983
00:50:41,849 --> 00:50:44,339
probably wouldn't work I mean you don't

984
00:50:43,199 --> 00:50:48,179
really want to do it this way because

985
00:50:44,340 --> 00:50:51,740
you want to sort of have a you want a

986
00:50:48,179 --> 00:50:51,739
smoother interaction than that but oh

987
00:50:54,199 --> 00:51:02,819
well

988
00:50:55,440 --> 00:51:07,820
argh okay so in the actual oh you know

989
00:51:02,820 --> 00:51:10,410
what I should have done actually um you

990
00:51:07,820 --> 00:51:12,330
know why am I doing this there was

991
00:51:10,409 --> 00:51:15,239
really no reason I had to do this this

992
00:51:12,329 --> 00:51:18,599
was dumb don't do that just make the

993
00:51:15,239 --> 00:51:20,909
debug value in here be I'll just make

994
00:51:18,599 --> 00:51:22,650
this value be a float because then I can

995
00:51:20,909 --> 00:51:33,089
have smooth dragging as well and yeah

996
00:51:22,650 --> 00:51:34,860
and that's right that's the smartest

997
00:51:33,090 --> 00:51:44,220
thing to do and then what we can do here

998
00:51:34,860 --> 00:51:46,260
is just say look round it there that way

999
00:51:44,219 --> 00:51:55,739
you can have smooth dragging and it'll

1000
00:51:46,260 --> 00:51:58,260
work alright so now if I take a look at

1001
00:51:55,739 --> 00:52:06,899
what happens I think in theory I should

1002
00:51:58,260 --> 00:52:11,550
be able to move this value you know why

1003
00:52:06,900 --> 00:52:16,289
that's so you know why that's so finicky

1004
00:52:11,550 --> 00:52:17,550
they're like see how kind of jitters

1005
00:52:16,289 --> 00:52:21,090
it's probably just again the debug

1006
00:52:17,550 --> 00:52:23,190
system being crappy but at least now we

1007
00:52:21,090 --> 00:52:26,160
can sort of move it around right like I

1008
00:52:23,190 --> 00:52:28,409
can sort of and I also because these are

1009
00:52:26,159 --> 00:52:32,099
where they are I feel like X would be a

1010
00:52:28,409 --> 00:52:34,819
way better drag than Y right I feel like

1011
00:52:32,099 --> 00:52:34,819
that would be better

1012
00:52:37,509 --> 00:52:40,659
I don't know why it like shakes between

1013
00:52:39,338 --> 00:52:43,449
those two probably just again crappy

1014
00:52:40,659 --> 00:52:46,119
debug code or something it doesn't

1015
00:52:43,449 --> 00:52:57,548
really matter it's it's the debug crap

1016
00:52:46,119 --> 00:52:59,409
which can stay crappy yeah it's really

1017
00:52:57,548 --> 00:53:02,139
weird how that behaves but so that's

1018
00:52:59,409 --> 00:53:04,088
pretty easy for us to change and at

1019
00:53:02,139 --> 00:53:09,309
least we can see that from underside

1020
00:53:04,088 --> 00:53:10,778
hits it tends to be about the same we

1021
00:53:09,309 --> 00:53:12,429
probably need some way of like entering

1022
00:53:10,778 --> 00:53:14,548
values in here at some point because

1023
00:53:12,429 --> 00:53:16,809
these will be really hard for us to to

1024
00:53:14,548 --> 00:53:18,489
get larger because they're going to be

1025
00:53:16,809 --> 00:53:21,939
quite large the number of grid squares

1026
00:53:18,489 --> 00:53:23,409
is some kind of way too large right but

1027
00:53:21,938 --> 00:53:26,288
um that's alright

1028
00:53:23,409 --> 00:53:33,759
so in here let's say I just do like I

1029
00:53:26,289 --> 00:53:37,859
don't know 10 times that although

1030
00:53:33,759 --> 00:53:37,858
actually let's do five times that

1031
00:53:47,409 --> 00:53:52,759
okay so now I'm not sure where we are in

1032
00:53:51,199 --> 00:53:54,379
the grid but I'm just gonna try and see

1033
00:53:52,760 --> 00:53:56,330
if I can fit there we go

1034
00:53:54,380 --> 00:53:58,130
so it looks like that's still too far

1035
00:53:56,329 --> 00:54:01,389
though like I don't want to be quite so

1036
00:53:58,130 --> 00:54:07,269
high so let's do two times that

1037
00:54:01,389 --> 00:54:07,269
well maybe three times that let's say I

1038
00:54:08,139 --> 00:54:16,039
want to be in the actual environment you

1039
00:54:11,329 --> 00:54:20,809
know with my tests I'm just gonna just

1040
00:54:16,039 --> 00:54:25,179
kind of try to find a way to to get

1041
00:54:20,809 --> 00:54:25,179
there I'm not seeing that

1042
00:54:37,969 --> 00:54:53,608
there it is okay so that's hmm

1043
00:54:48,449 --> 00:54:57,268
I can't quite tell where is that

1044
00:54:53,608 --> 00:55:02,219
actually casting from its casting from

1045
00:54:57,268 --> 00:55:03,389
this square looks like so that's

1046
00:55:02,219 --> 00:55:05,578
actually good that's in the environment

1047
00:55:03,389 --> 00:55:12,480
that's what I want so I'm going to move

1048
00:55:05,579 --> 00:55:26,028
this Square to like here maybe inside a

1049
00:55:12,480 --> 00:55:30,539
little bit there we go okay so let's try

1050
00:55:26,028 --> 00:55:33,929
maybe one up from here would be a good

1051
00:55:30,539 --> 00:55:42,000
casting location cuz you know looking at

1052
00:55:33,929 --> 00:55:43,348
this it's like it's like not clear also

1053
00:55:42,000 --> 00:55:44,940
this that seems to be going backwards I

1054
00:55:43,349 --> 00:55:48,380
think there's a lot of bugs we can get

1055
00:55:44,940 --> 00:55:55,619
out of picking a good spot here 14 889

1056
00:55:48,380 --> 00:55:58,440
I'm gonna just record that grid index in

1057
00:55:55,619 --> 00:56:03,119
here just as a note but then I think

1058
00:55:58,440 --> 00:56:05,789
what I want to do is take 14 889 as a

1059
00:56:03,119 --> 00:56:11,460
debug index here and then I want to add

1060
00:56:05,789 --> 00:56:16,349
to it the actual what I want to move

1061
00:56:11,460 --> 00:56:23,099
that one sheet up so I don't remember it

1062
00:56:16,349 --> 00:56:25,109
should be 24 by 16 I want to say is how

1063
00:56:23,099 --> 00:56:27,150
big the voxel is so that should give me

1064
00:56:25,108 --> 00:56:33,528
basically that same location but like

1065
00:56:27,150 --> 00:56:37,798
one up right okay and then if I run this

1066
00:56:33,528 --> 00:56:40,380
and we look I was hoping I would get

1067
00:56:37,798 --> 00:56:44,969
well so I guess I screwed up that

1068
00:56:40,380 --> 00:56:47,940
stepping is that oh but it's actually 24

1069
00:56:44,969 --> 00:56:50,009
by 17 right because it's one la ropa

1070
00:56:47,940 --> 00:56:50,550
sorry 26 times 18

1071
00:56:50,009 --> 00:56:53,460
it's actually

1072
00:56:50,550 --> 00:56:57,269
one larger around the whole border so

1073
00:56:53,460 --> 00:57:04,650
the sheets are yeah it'd be 26 by 18 per

1074
00:56:57,269 --> 00:57:10,259
sheet wouldn't it as I say as it totally

1075
00:57:04,650 --> 00:57:10,680
obviously isn't did we do different

1076
00:57:10,260 --> 00:57:14,400
stuff

1077
00:57:10,679 --> 00:57:16,649
oh we yeah I keep forgetting the spatial

1078
00:57:14,400 --> 00:57:19,619
partition is totally different than the

1079
00:57:16,650 --> 00:57:22,980
voxel it's not the same because we we're

1080
00:57:19,619 --> 00:57:25,259
a cast against larger areas than we do

1081
00:57:22,980 --> 00:57:28,469
so I don't remember what this is let's

1082
00:57:25,260 --> 00:57:32,730
just do it so if we actually take the

1083
00:57:28,469 --> 00:57:34,049
grid itself so the solution spatial grid

1084
00:57:32,730 --> 00:57:40,409
because I don't remember what the values

1085
00:57:34,050 --> 00:57:47,420
are and we just do x times y what is it

1086
00:57:40,409 --> 00:57:47,420
cell count that should actually work

1087
00:57:50,210 --> 00:57:53,849
okay

1088
00:57:51,389 --> 00:57:57,629
all right sorry about that yeah I could

1089
00:57:53,849 --> 00:58:00,980
not remember like the stuff we decide

1090
00:57:57,630 --> 00:58:03,809
about the spatial grid was pretty key

1091
00:58:00,980 --> 00:58:06,719
all right so now we're in the right

1092
00:58:03,809 --> 00:58:08,549
location that's the cast I wanted it's

1093
00:58:06,719 --> 00:58:10,739
casting off to the top which obvious

1094
00:58:08,550 --> 00:58:11,940
doesn't help and that's fine because now

1095
00:58:10,739 --> 00:58:16,349
we can move on to the next thing I

1096
00:58:11,940 --> 00:58:24,300
wanted to do which is I wanted to have

1097
00:58:16,349 --> 00:58:26,039
in the oh I know why this codes

1098
00:58:24,300 --> 00:58:28,730
multi-threaded that's why we were

1099
00:58:26,039 --> 00:58:34,170
getting the twitch the twitchiness there

1100
00:58:28,730 --> 00:58:36,510
that's why that makes sense yeah you

1101
00:58:34,170 --> 00:58:38,130
can't really do this here I guess so you

1102
00:58:36,510 --> 00:58:40,530
know what I could fix that by just

1103
00:58:38,130 --> 00:58:43,470
making this put this in the solution and

1104
00:58:40,530 --> 00:58:44,880
output it only at the end so why don't

1105
00:58:43,469 --> 00:58:49,889
we do that because hey it was really

1106
00:58:44,880 --> 00:58:51,869
annoying to to use that way having many

1107
00:58:49,889 --> 00:58:53,670
threads querying what happens there and

1108
00:58:51,869 --> 00:58:55,409
overwriting each other so you know what

1109
00:58:53,670 --> 00:58:56,579
let's I think that's probably what we

1110
00:58:55,409 --> 00:59:00,389
were seeing there so let's just put it

1111
00:58:56,579 --> 00:59:01,219
in here debug grid index and debug grey

1112
00:59:00,389 --> 00:59:04,190
index

1113
00:59:01,219 --> 00:59:07,250
put them there and then we can have this

1114
00:59:04,190 --> 00:59:09,019
be solution debug grid index and I'll

1115
00:59:07,250 --> 00:59:11,230
move this down to the single threaded

1116
00:59:09,019 --> 00:59:27,469
part of the code right

1117
00:59:11,230 --> 00:59:31,900
that seems fine okay so let's say this

1118
00:59:27,469 --> 00:59:35,059
is debugger in index let's say this is

1119
00:59:31,900 --> 00:59:37,579
debug array index these are going to be

1120
00:59:35,059 --> 00:59:40,449
off of the solution itself and stored

1121
00:59:37,579 --> 00:59:53,650
there and then these will be set

1122
00:59:40,449 --> 00:59:56,629
somewhere in the initializer like so and

1123
00:59:53,650 --> 00:59:59,720
what we will want to do here is the

1124
00:59:56,630 --> 01:00:06,890
debug ray index we kind of had that in

1125
00:59:59,719 --> 01:00:12,108
the place we recall so you can see here

1126
01:00:06,889 --> 01:00:17,029
when we produced the debug it was like

1127
01:00:12,108 --> 01:00:19,159
plus 36 um so let's actually just hard

1128
01:00:17,030 --> 01:00:21,940
code that into this spot instead and

1129
01:00:19,159 --> 01:00:25,940
then we can round this one solution

1130
01:00:21,940 --> 01:00:28,400
debug array index right and we need to

1131
01:00:25,940 --> 01:00:31,429
clamp this like we can't let it free

1132
01:00:28,400 --> 01:00:35,930
roam for obvious reasons because it will

1133
01:00:31,429 --> 01:00:38,179
fetch out of bounds here so what we

1134
01:00:35,929 --> 01:00:43,568
really want to do is we want to make

1135
01:00:38,179 --> 01:00:54,799
this correspond properly to that I could

1136
01:00:43,568 --> 01:00:56,449
put this in here but I'm not gonna so

1137
01:00:54,800 --> 01:01:02,900
what am I do instead is I'm just gonna

1138
01:00:56,449 --> 01:01:06,318
say all right let's bound it so the

1139
01:01:02,900 --> 01:01:08,900
debug ray index is less than zero well

1140
01:01:06,318 --> 01:01:13,250
then a equals zero and if the debug ray

1141
01:01:08,900 --> 01:01:14,750
index is greater or equal to or I should

1142
01:01:13,250 --> 01:01:21,139
say maybe just

1143
01:01:14,750 --> 01:01:26,389
greater than the loom than the total

1144
01:01:21,139 --> 01:01:33,139
which honestly I don't remember what it

1145
01:01:26,389 --> 01:01:45,440
was total light sample Direction counts

1146
01:01:33,139 --> 01:01:50,619
I guess would be the thing right so

1147
01:01:45,440 --> 01:01:56,990
that'll just keep us in the in the clear

1148
01:01:50,619 --> 01:01:58,269
so now if I actually run this there we

1149
01:01:56,989 --> 01:02:01,039
go

1150
01:01:58,269 --> 01:02:05,710
in theory I should be able to pick a ray

1151
01:02:01,039 --> 01:02:05,710
Direction now - right

1152
01:02:13,320 --> 01:02:17,260
so if we take a look here we can at

1153
01:02:15,639 --> 01:02:23,469
least start to look at some other things

1154
01:02:17,260 --> 01:02:25,360
so there's us casting array hitting a

1155
01:02:23,469 --> 01:02:29,279
volume it looks properly clipped

1156
01:02:25,360 --> 01:02:45,430
there's the bounce back right there and

1157
01:02:29,280 --> 01:02:48,280
that's correct as well so that's like

1158
01:02:45,429 --> 01:02:51,309
does look kind of correct but odd in a

1159
01:02:48,280 --> 01:02:54,010
certain way like having these things

1160
01:02:51,309 --> 01:02:56,019
right on the edge is probably not great

1161
01:02:54,010 --> 01:02:58,270
like we should probably clip to a

1162
01:02:56,019 --> 01:03:00,190
certain dimension because we don't

1163
01:02:58,269 --> 01:03:02,170
really care if we have a few holes in

1164
01:03:00,190 --> 01:03:03,400
our system so we're probably testing too

1165
01:03:02,170 --> 01:03:06,420
many things here but I guess that's

1166
01:03:03,400 --> 01:03:09,309
beside the point anyway if I look and

1167
01:03:06,420 --> 01:03:12,039
see what's hitting there it really does

1168
01:03:09,309 --> 01:03:13,539
look correct you know the problem we're

1169
01:03:12,039 --> 01:03:15,250
having now is the lighting is not right

1170
01:03:13,539 --> 01:03:18,579
it's doing a weird flood-fill thing

1171
01:03:15,250 --> 01:03:19,780
right but at the same time like the

1172
01:03:18,579 --> 01:03:21,579
raycast it looks like it's working

1173
01:03:19,780 --> 01:03:24,240
properly so that's a little bit

1174
01:03:21,579 --> 01:03:24,239
unnerving

1175
01:03:40,838 --> 01:03:54,018
so if we see so if we see an

1176
01:03:50,298 --> 01:03:57,380
intersection there I'm guessing that's

1177
01:03:54,018 --> 01:04:03,379
the light that's right here that we're

1178
01:03:57,380 --> 01:04:10,759
hitting but at the same time I should

1179
01:04:03,380 --> 01:04:18,349
see it so that seems buggy right like

1180
01:04:10,759 --> 01:04:24,259
what is happening that seems just

1181
01:04:18,349 --> 01:04:28,818
totally wrong I'm gonna go ahead and say

1182
01:04:24,259 --> 01:04:31,068
that our t terminate case is broken this

1183
01:04:28,818 --> 01:04:37,009
was clearly a case where we terminated

1184
01:04:31,068 --> 01:04:43,210
and we produced a reverse answer so

1185
01:04:37,009 --> 01:04:43,210
let's capture this 16 3 17 and 42 and

1186
01:04:46,298 --> 01:04:50,199
let's just look at that case

1187
01:04:56,449 --> 01:05:14,818
so that was 16 3 17 42 okay so now I

1188
01:05:13,349 --> 01:05:16,349
should be able to look at this case and

1189
01:05:14,818 --> 01:05:18,900
debug this case because it's pretty

1190
01:05:16,349 --> 01:05:21,359
obvious that something's busted

1191
01:05:18,900 --> 01:05:24,358
and I think it's the t termini we should

1192
01:05:21,358 --> 01:05:30,058
take a look at the compute walk table

1193
01:05:24,358 --> 01:05:39,440
code because this code here is actually

1194
01:05:30,059 --> 01:05:39,440
producing the T terminate values

1195
01:05:46,369 --> 01:05:59,299
and I'm wondering if they're just wrong

1196
01:05:48,829 --> 01:06:05,090
somehow let's take a look so here's the

1197
01:05:59,300 --> 01:06:09,410
code you can see that the the location

1198
01:06:05,090 --> 01:06:11,690
that we cast from was here and we cast

1199
01:06:09,409 --> 01:06:16,639
out into this direction we terminated

1200
01:06:11,690 --> 01:06:19,760
out here somewhere and somehow recorded

1201
01:06:16,639 --> 01:06:26,150
this as the hit but the the hit should

1202
01:06:19,760 --> 01:06:29,120
have been like like here right so super

1203
01:06:26,150 --> 01:06:41,690
messed up the T terminate value looks

1204
01:06:29,119 --> 01:06:44,420
negative and I guess I can see why it's

1205
01:06:41,690 --> 01:06:49,179
because we're now shifted properly to

1206
01:06:44,420 --> 01:06:49,180
account for going along the cell dim

1207
01:06:49,300 --> 01:06:52,690
yeah okay

1208
01:06:52,760 --> 01:06:59,660
that totally makes sense so I guess what

1209
01:06:57,380 --> 01:07:02,570
we really need here is probably

1210
01:06:59,659 --> 01:07:05,509
something more like this we probably

1211
01:07:02,570 --> 01:07:08,420
need to set t terminate to zero every

1212
01:07:05,510 --> 01:07:16,720
time we take a step we probably add T

1213
01:07:08,420 --> 01:07:16,720
best to it I guess

1214
01:07:21,739 --> 01:07:29,789
seems sort of saying as a way to do that

1215
01:07:27,079 --> 01:07:34,010
let's double check so there you can see

1216
01:07:29,789 --> 01:07:36,150
our T terminate stopping properly I

1217
01:07:34,010 --> 01:07:38,460
don't know that we really need it to

1218
01:07:36,150 --> 01:07:40,920
stop in that way probably could stop in

1219
01:07:38,460 --> 01:07:43,920
the middle here so you know there's

1220
01:07:40,920 --> 01:07:46,829
there's some of that but at least we got

1221
01:07:43,920 --> 01:07:48,930
rid of that that bug right because that

1222
01:07:46,829 --> 01:07:52,230
was obviously wrong and now of course we

1223
01:07:48,929 --> 01:07:54,239
can see that it's working properly now I

1224
01:07:52,230 --> 01:07:57,929
don't really know what I still don't

1225
01:07:54,239 --> 01:07:59,159
really know why that drag behavior is

1226
01:07:57,929 --> 01:08:01,379
going that way because now I'm not

1227
01:07:59,159 --> 01:08:07,649
calling multi-threaded so we don't have

1228
01:08:01,380 --> 01:08:12,630
that excuse anymore so yeah looking at

1229
01:08:07,650 --> 01:08:15,079
this I mean it just I don't know looks

1230
01:08:12,630 --> 01:08:18,449
like a pretty good ray tracer now that's

1231
01:08:15,079 --> 01:08:22,338
early outing we should probably draw

1232
01:08:18,449 --> 01:08:22,338
when we early out versus when we don't

1233
01:08:22,488 --> 01:08:30,088
but like that's like what you would

1234
01:08:26,159 --> 01:08:32,519
expect to see pretty much everywhere so

1235
01:08:30,088 --> 01:08:37,500
I'm not now sure why we're not getting

1236
01:08:32,520 --> 01:08:39,420
good results in terms of the actual

1237
01:08:37,500 --> 01:08:41,039
light because it's obviously hitting it

1238
01:08:39,420 --> 01:08:44,060
error case pretty quickly and you can

1239
01:08:41,039 --> 01:08:47,100
see the whole world floods in an odd way

1240
01:08:44,060 --> 01:08:51,539
but everything else you know it looks

1241
01:08:47,100 --> 01:08:54,960
fine so actually like the Ray caster

1242
01:08:51,539 --> 01:08:57,210
seems pretty good now there may be some

1243
01:08:54,960 --> 01:08:59,489
case we're not seeing but that seems

1244
01:08:57,210 --> 01:09:03,119
pretty good so does that mean that our

1245
01:08:59,488 --> 01:09:04,588
our actual right back is busted right or

1246
01:09:03,119 --> 01:09:07,588
you know is there something else that

1247
01:09:04,588 --> 01:09:09,298
we're doing stupid I don't know but it

1248
01:09:07,588 --> 01:09:13,920
seems like the Ray caster actually is

1249
01:09:09,298 --> 01:09:14,939
looking okay now it could mean that you

1250
01:09:13,920 --> 01:09:16,770
know if you take a look at this code

1251
01:09:14,939 --> 01:09:18,358
here's the old ray caster and you could

1252
01:09:16,770 --> 01:09:21,239
see like this was the part that actually

1253
01:09:18,359 --> 01:09:25,609
generated the right back to the spec

1254
01:09:21,238 --> 01:09:27,379
mask respect texels

1255
01:09:25,609 --> 01:09:29,810
that code has been completely changed

1256
01:09:27,380 --> 01:09:34,219
here so one thing that could be wrong is

1257
01:09:29,810 --> 01:09:35,449
this code because we have no idea we

1258
01:09:34,219 --> 01:09:40,880
could have just totally screwed this up

1259
01:09:35,448 --> 01:09:47,238
right and so if that's the case looking

1260
01:09:40,880 --> 01:09:48,770
at the just looking at this part of the

1261
01:09:47,238 --> 01:09:51,079
code and figuring out if we need to

1262
01:09:48,770 --> 01:09:54,170
debug this could be part of it this

1263
01:09:51,079 --> 01:09:57,050
should be identical unless we're passing

1264
01:09:54,170 --> 01:09:57,908
the wrong actual spec Texel this should

1265
01:09:57,050 --> 01:10:02,360
be fine

1266
01:09:57,908 --> 01:10:05,658
so I think it's mostly this code that

1267
01:10:02,359 --> 01:10:09,170
would be suspicious here so we can start

1268
01:10:05,658 --> 01:10:11,839
here and we'll just see if we step

1269
01:10:09,170 --> 01:10:15,889
through some of this code we'll just see

1270
01:10:11,840 --> 01:10:18,050
if we're producing plausible you know

1271
01:10:15,889 --> 01:10:23,029
after the like the reflect color foo

1272
01:10:18,050 --> 01:10:27,639
comes back does this stuff look at all

1273
01:10:23,029 --> 01:10:41,948
right or is it totally busted right I

1274
01:10:27,639 --> 01:10:44,510
think that's what we want to do okay and

1275
01:10:41,948 --> 01:10:46,819
so again the reason that I'm concerned

1276
01:10:44,510 --> 01:10:48,289
about this is because although we

1277
01:10:46,819 --> 01:10:50,829
haven't done our light quality pass so

1278
01:10:48,289 --> 01:10:53,179
our lighting is still kind of needs to

1279
01:10:50,829 --> 01:10:57,109
be looked at in terms of the actual

1280
01:10:53,179 --> 01:11:08,000
computations this should actually also

1281
01:10:57,109 --> 01:11:10,219
be if lighting use grid there we go so

1282
01:11:08,000 --> 01:11:13,279
if we look at what happens if we run the

1283
01:11:10,219 --> 01:11:15,500
old ray tracer we are getting like

1284
01:11:13,279 --> 01:11:17,539
plausible lighting with the old ray

1285
01:11:15,500 --> 01:11:19,460
tracer and we're not getting plausible

1286
01:11:17,539 --> 01:11:25,118
lighting with the new ray tracer so like

1287
01:11:19,460 --> 01:11:25,118
when we switch to the new ray tracer

1288
01:11:25,448 --> 01:11:28,689
like so

1289
01:11:31,869 --> 01:11:42,109
we get this sort of gradual brightening

1290
01:11:37,729 --> 01:11:43,029
that just ends in Fulbright right it's

1291
01:11:42,109 --> 01:11:48,349
very strange

1292
01:11:43,029 --> 01:11:52,779
so and like it just looks very odd so it

1293
01:11:48,350 --> 01:11:56,210
feels like even though the raycast er

1294
01:11:52,779 --> 01:11:59,960
seems like it's properly ray casting at

1295
01:11:56,210 --> 01:12:03,520
least to some extent the sampling is

1296
01:11:59,960 --> 01:12:06,198
maybe busted or something right because

1297
01:12:03,520 --> 01:12:07,489
you know the ray casters are a little

1298
01:12:06,198 --> 01:12:09,500
bit different but we wouldn't

1299
01:12:07,488 --> 01:12:11,119
necessarily expect that big of a

1300
01:12:09,500 --> 01:12:13,100
difference from switching between the

1301
01:12:11,119 --> 01:12:16,029
two ray casters we would have expected

1302
01:12:13,100 --> 01:12:19,699
similar sorts of results

1303
01:12:16,029 --> 01:12:22,599
that's not we're seeing so let's take a

1304
01:12:19,698 --> 01:12:25,549
look at the code that actually exits out

1305
01:12:22,600 --> 01:12:28,900
when we do have a hit because that's the

1306
01:12:25,550 --> 01:12:33,650
part that like at least I would think is

1307
01:12:28,899 --> 01:12:35,539
implicated the most in this case it's

1308
01:12:33,649 --> 01:12:42,948
especially implicated the most in my

1309
01:12:35,539 --> 01:12:47,869
mind because we wouldn't when the old

1310
01:12:42,948 --> 01:12:52,369
ray tracer hit nothing the old ray

1311
01:12:47,869 --> 01:12:54,649
tracer would have reported mostly sky

1312
01:12:52,369 --> 01:12:58,039
light results at that point if it hit

1313
01:12:54,649 --> 01:12:59,988
nothing this ray tracer will be should

1314
01:12:58,039 --> 01:13:03,198
if anything because it has earlie out in

1315
01:12:59,988 --> 01:13:06,979
it should be slower to report sky lights

1316
01:13:03,198 --> 01:13:09,649
because sky lights in this case should

1317
01:13:06,979 --> 01:13:12,379
only happen once you actually propagate

1318
01:13:09,649 --> 01:13:15,589
inward the sky light a little bit so it

1319
01:13:12,380 --> 01:13:18,170
should if anything be slower to go full

1320
01:13:15,590 --> 01:13:21,440
bright but that's not we're seeing at

1321
01:13:18,170 --> 01:13:22,850
all so we yeah we should probably and

1322
01:13:21,439 --> 01:13:24,759
you know maybe that's wrong because

1323
01:13:22,850 --> 01:13:27,409
maybe what happens is the sky light

1324
01:13:24,760 --> 01:13:29,329
propagates into the outer region and

1325
01:13:27,408 --> 01:13:31,069
then the diffuse blur adds energy

1326
01:13:29,329 --> 01:13:32,448
because like we did it wrong it does

1327
01:13:31,069 --> 01:13:34,369
seem like that a fusilar adds too much

1328
01:13:32,448 --> 01:13:37,269
energy right now for whatever reason

1329
01:13:34,369 --> 01:13:37,269
even though I'm not sure why

1330
01:13:40,760 --> 01:13:49,220
so I don't know it could just be

1331
01:13:47,420 --> 01:13:50,840
something like that but I think there's

1332
01:13:49,220 --> 01:13:52,940
still bugs in that I don't think that

1333
01:13:50,840 --> 01:13:56,090
would completely explain it so I'm going

1334
01:13:52,939 --> 01:14:00,319
to go ahead and assume that we've got a

1335
01:13:56,090 --> 01:14:01,970
bug in here and that we want to go

1336
01:14:00,319 --> 01:14:05,179
through this code like with a fine-tooth

1337
01:14:01,970 --> 01:14:08,360
comb at some point just so we can kind

1338
01:14:05,180 --> 01:14:10,159
of determine what's going on so if I go

1339
01:14:08,359 --> 01:14:13,880
to the grid rake astir and look at the

1340
01:14:10,159 --> 01:14:18,380
fallout place you know where we go okay

1341
01:14:13,880 --> 01:14:21,890
we hit something and we take a look at

1342
01:14:18,380 --> 01:14:23,329
what the results are in here as far as

1343
01:14:21,890 --> 01:14:26,240
we can tell we're computing the normal

1344
01:14:23,329 --> 01:14:29,600
correctly when we then go to extract the

1345
01:14:26,239 --> 01:14:31,369
probe singles we drew those and they did

1346
01:14:29,600 --> 01:14:33,920
appear right the emission direction in

1347
01:14:31,369 --> 01:14:35,930
this case is the opposite direction of

1348
01:14:33,920 --> 01:14:37,819
the Ray it appears that we pretty much

1349
01:14:35,930 --> 01:14:39,350
always do that so you know that may be

1350
01:14:37,819 --> 01:14:41,479
something we want to simplify later we

1351
01:14:39,350 --> 01:14:42,740
need the compute fox the reading set to

1352
01:14:41,479 --> 01:14:44,929
get a little smarter and add something

1353
01:14:42,739 --> 01:14:50,300
on using the emission direction I don't

1354
01:14:44,930 --> 01:14:52,789
think but anyway so when we come into

1355
01:14:50,300 --> 01:14:55,489
this reflect color of Fukase and we do

1356
01:14:52,789 --> 01:14:56,720
this operation we know that these two

1357
01:14:55,489 --> 01:14:58,760
values are right because we looked at

1358
01:14:56,720 --> 01:15:01,190
them and those are the two visors

1359
01:14:58,760 --> 01:15:04,010
actually use so we assume that reflect

1360
01:15:01,189 --> 01:15:05,929
our food comes back properly the reflect

1361
01:15:04,010 --> 01:15:08,810
fall-off is the inner product between

1362
01:15:05,930 --> 01:15:11,539
the sampling normal and the emission

1363
01:15:08,810 --> 01:15:15,260
direction so that's how much it should

1364
01:15:11,539 --> 01:15:16,250
be sending back at us right and like I

1365
01:15:15,260 --> 01:15:17,600
said I think that should probably be

1366
01:15:16,250 --> 01:15:18,859
done in here that's why I why I was

1367
01:15:17,600 --> 01:15:20,600
being passed in here in the first place

1368
01:15:18,859 --> 01:15:22,909
so I don't know that this is wants to be

1369
01:15:20,600 --> 01:15:24,770
done here but either way that's okay we

1370
01:15:22,909 --> 01:15:30,430
modulate by that which is what we would

1371
01:15:24,770 --> 01:15:30,430
expect to see we then do a

1372
01:15:36,059 --> 01:15:46,869
we then do a loft of the color of RGB up

1373
01:15:42,038 --> 01:15:49,630
to a 4x and we do hit a mission shuffle

1374
01:15:46,868 --> 01:15:52,179
to find out the emission level and then

1375
01:15:49,630 --> 01:15:55,059
we just like max those two so we we take

1376
01:15:52,179 --> 01:16:02,708
whichever is higher the emission or the

1377
01:15:55,059 --> 01:16:05,729
reflection seems plausible and then we

1378
01:16:02,708 --> 01:16:05,729
just extracts

1379
01:16:17,488 --> 01:16:21,419
so I guess what we're doing here is

1380
01:16:19,559 --> 01:16:22,889
we're doing a pea chef be on the hit ref

1381
01:16:21,420 --> 01:16:29,069
color which would be the modulation

1382
01:16:22,889 --> 01:16:35,730
level for reds greens and blues and then

1383
01:16:29,069 --> 01:16:38,340
were and then we're just multiplying by

1384
01:16:35,729 --> 01:16:41,488
that transmission to get the final

1385
01:16:38,340 --> 01:16:44,130
transmission honestly that seems fine

1386
01:16:41,488 --> 01:16:45,748
it's a little convoluted again I think

1387
01:16:44,130 --> 01:16:47,699
probably what we want to do is get

1388
01:16:45,748 --> 01:16:50,130
compute Fox low radiance at just taking

1389
01:16:47,698 --> 01:16:52,169
wide values to begin with even though it

1390
01:16:50,130 --> 01:16:53,699
can't really do that the rest of the

1391
01:16:52,170 --> 01:16:55,199
stuff it should do should probably still

1392
01:16:53,698 --> 01:16:56,609
stay in line so you probably want to

1393
01:16:55,198 --> 01:16:59,210
look at that a little bit later but you

1394
01:16:56,609 --> 01:17:04,189
know it looks fine

1395
01:16:59,210 --> 01:17:04,189
transfer PBS in this particular case

1396
01:17:21,050 --> 01:17:24,050
what

1397
01:17:34,479 --> 01:17:50,899
what's going on here folks this this is

1398
01:17:43,520 --> 01:18:04,449
not so I don't this is not shuffled

1399
01:17:50,899 --> 01:18:14,029
properly I would wager I'm not feeling

1400
01:18:04,448 --> 01:18:16,908
great about this like so if you take a

1401
01:18:14,029 --> 01:18:24,679
look at where the speck Texel stuff

1402
01:18:16,908 --> 01:18:29,179
happens so what you can see here is the

1403
01:18:24,679 --> 01:18:38,300
transfer PPS is getting sliced out as RG

1404
01:18:29,179 --> 01:18:44,420
b r g b r g b r g b so we're doing three

1405
01:18:38,300 --> 01:18:48,469
wide ads to do four pixels so that makes

1406
01:18:44,420 --> 01:18:50,510
sense so you can see that slicing

1407
01:18:48,469 --> 01:18:52,639
happening and this is the same code

1408
01:18:50,510 --> 01:18:56,630
right we just duplicated this code this

1409
01:18:52,639 --> 01:18:58,880
is how it is working in either case but

1410
01:18:56,630 --> 01:19:00,980
that means that the transfer PPS has to

1411
01:18:58,880 --> 01:19:06,618
be set up such that the transfer PPS

1412
01:19:00,979 --> 01:19:08,718
itself is RGB RGB RGB RGB right I don't

1413
01:19:06,618 --> 01:19:10,549
know what the heck this is doing but we

1414
01:19:08,719 --> 01:19:12,739
have to make sure that it lines up that

1415
01:19:10,550 --> 01:19:14,929
way and I'm not sure at the moment that

1416
01:19:12,738 --> 01:19:18,399
it actually does so I want to actually

1417
01:19:14,929 --> 01:19:21,139
verify that because I'm like huh right

1418
01:19:18,399 --> 01:19:23,118
so taking a look at transfer PPS to

1419
01:19:21,139 --> 01:19:28,130
begin with the first thing I can tell

1420
01:19:23,118 --> 01:19:33,069
you is that if I actually look so

1421
01:19:28,130 --> 01:19:36,340
transfer PPS up here is for wide and

1422
01:19:33,069 --> 01:19:41,139
we're only writing to one of them I

1423
01:19:36,340 --> 01:19:44,128
think when we like looped in this code

1424
01:19:41,139 --> 01:19:47,458
we just didn't do this

1425
01:19:44,128 --> 01:19:49,349
right so the moonlights getting written

1426
01:19:47,458 --> 01:19:52,198
to three channels whether we wanted it

1427
01:19:49,349 --> 01:19:58,409
to or not so that's just straight-up

1428
01:19:52,198 --> 01:20:02,478
bogus and not good right so at the very

1429
01:19:58,408 --> 01:20:02,478
least this would have to look like this

1430
01:20:08,809 --> 01:20:18,449
at the very least and at that point if

1431
01:20:16,050 --> 01:20:21,179
this actually is doing a full extraction

1432
01:20:18,448 --> 01:20:26,908
of what the hit should be for this one

1433
01:20:21,179 --> 01:20:30,929
hit then that does seem at least more

1434
01:20:26,908 --> 01:20:33,089
plausible that did not help to be at the

1435
01:20:30,929 --> 01:20:35,519
risk spammy erroneous but I think that's

1436
01:20:33,090 --> 01:20:39,119
what should have been going on there so

1437
01:20:35,519 --> 01:20:42,929
now we're writing to all four of the

1438
01:20:39,118 --> 01:20:44,488
transfer PBS channels the red the green

1439
01:20:42,929 --> 01:20:51,389
the blue the red the green the blue the

1440
01:20:44,488 --> 01:20:55,228
red the green the blue right and in this

1441
01:20:51,389 --> 01:21:01,378
case here this clamp wouldn't do

1442
01:20:55,229 --> 01:21:12,889
anything because this here will always

1443
01:21:01,378 --> 01:21:17,340
actually happen right so like this never

1444
01:21:12,889 --> 01:21:19,019
happens ever which would be bad and this

1445
01:21:17,340 --> 01:21:21,029
is again like we don't have a way of

1446
01:21:19,019 --> 01:21:23,628
getting those answers in here I guess we

1447
01:21:21,029 --> 01:21:26,998
sort of do in the sense that we can

1448
01:21:23,628 --> 01:21:30,738
force that to happen in the in the zero

1449
01:21:26,998 --> 01:21:30,738
out case if we wanted to

1450
01:21:42,210 --> 01:21:48,520
so we're gonna have to think about that

1451
01:21:44,109 --> 01:21:57,848
the other thing I would say is in this

1452
01:21:48,520 --> 01:22:01,619
case where we hit the node Terminator it

1453
01:21:57,849 --> 01:22:05,650
seems like this code is just broken like

1454
01:22:01,618 --> 01:22:12,988
who's gonna set probe piece single at

1455
01:22:05,649 --> 01:22:19,210
that point like nobody like nobody right

1456
01:22:12,988 --> 01:22:24,238
so when you miss like this has to get

1457
01:22:19,210 --> 01:22:34,448
updated so I think we've got some issues

1458
01:22:24,238 --> 01:22:37,178
I think this has to happen in a

1459
01:22:34,448 --> 01:22:40,678
different way I think what we actually

1460
01:22:37,179 --> 01:22:44,800
need is something more like that and

1461
01:22:40,679 --> 01:22:47,710
then this code has to be the code that

1462
01:22:44,800 --> 01:22:53,199
actually does the early outs so it's

1463
01:22:47,710 --> 01:22:58,380
like you know if the cost metric got too

1464
01:22:53,198 --> 01:23:06,879
low or the start index then update these

1465
01:22:58,380 --> 01:23:11,679
right so they're always correct that

1466
01:23:06,880 --> 01:23:13,859
seems like more what you want you know I

1467
01:23:11,679 --> 01:23:13,859
mean

1468
01:23:27,099 --> 01:23:31,599
and so I think now we're a little closer

1469
01:23:29,618 --> 01:23:33,098
to correct so now the question is why

1470
01:23:31,599 --> 01:23:35,590
are we getting this full braiding here

1471
01:23:33,099 --> 01:23:37,659
almost immediately right like what's

1472
01:23:35,590 --> 01:23:38,739
going on there and now I think we can

1473
01:23:37,658 --> 01:23:40,328
start to step through this code

1474
01:23:38,738 --> 01:23:42,998
investigate what's going on but I'm

1475
01:23:40,328 --> 01:23:45,069
pretty sure this is that was just wrong

1476
01:23:42,998 --> 01:23:48,998
to begin with and we need to look at

1477
01:23:45,069 --> 01:23:55,828
what's going on now that we're actually

1478
01:23:48,998 --> 01:23:55,828
creating real transfer PBS values right

1479
01:23:56,189 --> 01:24:04,989
yeah okay so let's take a look now what

1480
01:24:01,628 --> 01:24:07,599
happens there and I guess I want to

1481
01:24:04,988 --> 01:24:16,958
maybe pick a debug a specific debug

1482
01:24:07,599 --> 01:24:21,189
location I guess this one's fine because

1483
01:24:16,958 --> 01:24:23,109
it's gonna pick a place to sample that

1484
01:24:21,189 --> 01:24:36,099
doesn't have anything and that's

1485
01:24:23,109 --> 01:24:37,929
probably okay probably mm I don't really

1486
01:24:36,099 --> 01:24:39,219
know so I'm not sure what I want to do

1487
01:24:37,929 --> 01:24:52,469
for the next events I don't how much

1488
01:24:39,219 --> 01:24:55,689
time do I have left I have to - till -

1489
01:24:52,469 --> 01:24:58,319
so I would know when we started no one

1490
01:24:55,689 --> 01:24:58,320
knows when we started

1491
01:25:01,878 --> 01:25:05,899
so I don't know exactly I want to

1492
01:25:03,779 --> 01:25:05,898
proceed

1493
01:25:16,090 --> 01:25:20,679
and somehow the like speed is really

1494
01:25:18,340 --> 01:25:22,329
slow right now as well right like it's

1495
01:25:20,679 --> 01:25:25,300
kind of weird like something something

1496
01:25:22,329 --> 01:25:31,389
bad happened when I did that and I'm not

1497
01:25:25,300 --> 01:25:34,739
really sure what it was but it's like

1498
01:25:31,389 --> 01:25:34,739
really unhappy now

1499
01:25:45,289 --> 01:26:00,289
oh wow so actually it's not really

1500
01:25:58,069 --> 01:26:04,159
unhappy now it's actually quite zippy

1501
01:26:00,289 --> 01:26:11,390
but as soon as I turned this on like it

1502
01:26:04,159 --> 01:26:13,039
got much slower somehow but not now why

1503
01:26:11,390 --> 01:26:20,210
did it get so slow there right it was

1504
01:26:13,039 --> 01:26:20,539
very slow but now it's not what happened

1505
01:26:20,210 --> 01:26:22,250
there

1506
01:26:20,539 --> 01:26:28,180
can anyone see we should go back on the

1507
01:26:22,250 --> 01:26:33,130
replay and see it's very strange look

1508
01:26:28,180 --> 01:26:37,390
are we leaking some memory or something

1509
01:26:33,130 --> 01:26:37,390
do you see how bad that got

1510
01:26:45,229 --> 01:26:48,159
weird

1511
01:26:50,609 --> 01:27:03,699
what the heck so something is up because

1512
01:27:01,750 --> 01:27:06,100
here we are running it honestly like

1513
01:27:03,699 --> 01:27:13,229
getting very close to 60 frames second

1514
01:27:06,100 --> 01:27:13,230
there right we're 30 pegged for sure but

1515
01:27:13,260 --> 01:27:27,640
then all of a sudden we drop into

1516
01:27:15,970 --> 01:27:31,480
no-man's land and I don't know why look

1517
01:27:27,640 --> 01:27:34,170
if we took out the frame display look at

1518
01:27:31,479 --> 01:27:34,169
that look at that

1519
01:27:39,300 --> 01:27:43,869
are we having some kind of run-in with

1520
01:27:41,800 --> 01:27:45,579
Dean normals d normal should be turned

1521
01:27:43,869 --> 01:27:49,689
uh and that I don't know what could

1522
01:27:45,579 --> 01:28:01,779
cause that what's the what's the memory

1523
01:27:49,689 --> 01:28:04,500
usage let me just see isn't there some

1524
01:28:01,779 --> 01:28:04,500
way to get the

1525
01:28:14,470 --> 01:28:23,890
we're not leaking that's a stumper

1526
01:28:36,100 --> 01:28:43,760
really interesting so I don't have any

1527
01:28:39,319 --> 01:28:47,750
idea why that would be occurring my only

1528
01:28:43,760 --> 01:28:56,840
guess is somehow it has to do with bogus

1529
01:28:47,750 --> 01:28:58,399
numbers I'm totally stumped as to what

1530
01:28:56,840 --> 01:29:00,619
would cause such a thing to occur

1531
01:28:58,399 --> 01:29:03,500
because I would have thought that bogus

1532
01:29:00,619 --> 01:29:08,510
numbers would not be going on at the

1533
01:29:03,500 --> 01:29:10,340
moment meaning we would have our d

1534
01:29:08,510 --> 01:29:13,539
normal flush to zero and all that sort

1535
01:29:10,340 --> 01:29:13,539
of stuff would be gone

1536
01:29:21,498 --> 01:29:33,380
that's really bizarre that's really

1537
01:29:31,609 --> 01:29:35,328
really bizarre but it's very reliable

1538
01:29:33,380 --> 01:29:40,489
right and it seems like it has to do

1539
01:29:35,328 --> 01:29:42,859
with with the longer you run the

1540
01:29:40,488 --> 01:29:48,288
lighting for like something's happening

1541
01:29:42,859 --> 01:29:50,058
right to the values and this is the kind

1542
01:29:48,288 --> 01:29:51,889
of thing on the x87 that you would

1543
01:29:50,059 --> 01:29:54,650
immediately just go OD normals have hit

1544
01:29:51,889 --> 01:29:56,479
and now you're you're screwed but I

1545
01:29:54,649 --> 01:29:59,238
wouldn't have expected there it is right

1546
01:29:56,479 --> 01:30:04,610
there right I wouldn't have expected

1547
01:29:59,238 --> 01:30:12,009
that to be relevant to us so I'm curious

1548
01:30:04,609 --> 01:30:16,158
now what what on earth could we be doing

1549
01:30:12,010 --> 01:30:19,099
that would create such a thing let's

1550
01:30:16,158 --> 01:30:22,998
continue debugging further and see if we

1551
01:30:19,099 --> 01:30:26,538
see any signs of what's going on here

1552
01:30:22,998 --> 01:30:40,090
well you know what I could do too I can

1553
01:30:26,538 --> 01:30:40,090
maybe nerf this let's say that I do some

1554
01:30:40,149 --> 01:30:48,348
creative like nerfing here and just

1555
01:30:45,050 --> 01:30:50,619
blend in zeros periodically right so

1556
01:30:48,349 --> 01:30:50,619
like

1557
01:30:54,510 --> 01:31:09,260
um and I'm going to do this just to make

1558
01:31:07,409 --> 01:31:16,349
it harder for the optimizer to remove

1559
01:31:09,260 --> 01:31:18,900
the rest of this code so this is me sort

1560
01:31:16,350 --> 01:31:24,630
of forcing the transfer values to go

1561
01:31:18,899 --> 01:31:27,089
away right so now like you can't accrete

1562
01:31:24,630 --> 01:31:30,630
add a normal number anymore because I'm

1563
01:31:27,090 --> 01:31:35,810
not letting it do that and I'm just

1564
01:31:30,630 --> 01:31:35,810
curious if we still get this problem

1565
01:31:55,810 --> 01:32:03,710
so looking suspiciously like it does not

1566
01:32:00,139 --> 01:32:07,909
happen if you don't allow blending

1567
01:32:03,710 --> 01:32:16,310
accretion does that mean we still have d

1568
01:32:07,908 --> 01:32:18,519
normal numbers in play no it can't be

1569
01:32:16,310 --> 01:32:18,520
can it

1570
01:32:22,479 --> 01:32:26,399
I mean that looks rock-solid right

1571
01:32:44,698 --> 01:32:55,259
I mean it looks like an unusual number

1572
01:32:52,670 --> 01:32:58,890
like a bad numbers problem if you don't

1573
01:32:55,260 --> 01:33:01,890
allow it to accrete you don't seem to

1574
01:32:58,890 --> 01:33:06,150
have that problem and I don't know how

1575
01:33:01,890 --> 01:33:20,579
else you can have that occur so if we

1576
01:33:06,149 --> 01:33:22,939
don't do that right and I do the same

1577
01:33:20,579 --> 01:33:22,939
thing

1578
01:33:48,248 --> 01:33:58,349
well now now we're not seeing it again

1579
01:33:50,738 --> 01:34:02,109
oh oh there you go BAM it just hit right

1580
01:33:58,349 --> 01:34:05,349
so let's prove to ourselves that this is

1581
01:34:02,109 --> 01:34:09,578
a bad numbers problem here so I'm gonna

1582
01:34:05,349 --> 01:34:14,110
propose we do it in the case where we

1583
01:34:09,578 --> 01:34:23,288
actually hit our debug I'm gonna go

1584
01:34:14,109 --> 01:34:26,139
ahead and dump that cells values and so

1585
01:34:23,288 --> 01:34:29,078
I'm going to go like this I'm going to

1586
01:34:26,139 --> 01:34:31,510
come out here and I'm gonna actually

1587
01:34:29,078 --> 01:34:34,359
like see what there's what our values

1588
01:34:31,510 --> 01:34:35,829
are trending towards so I know that I

1589
01:34:34,359 --> 01:34:38,259
have just only one cell so it should be

1590
01:34:35,828 --> 01:34:41,558
fairly free for me to just like if we're

1591
01:34:38,260 --> 01:34:43,719
doing the 1d bug case out of this one

1592
01:34:41,559 --> 01:34:47,320
cell I should be able to go ahead and do

1593
01:34:43,719 --> 01:34:50,229
a debug block here where I just output

1594
01:34:47,319 --> 01:34:51,788
like what the values actually are right

1595
01:34:50,229 --> 01:34:55,900
that should be pretty straightforward

1596
01:34:51,788 --> 01:34:59,618
oops it's not what I meant to so in here

1597
01:34:55,899 --> 01:35:02,138
like I should be able to say like debug

1598
01:34:59,618 --> 01:35:06,779
this value where the value is like

1599
01:35:02,139 --> 01:35:10,748
whatever the spec Texel value is so like

1600
01:35:06,779 --> 01:35:13,118
if we look at spec Texel dot value in

1601
01:35:10,748 --> 01:35:15,238
this case i should be able to just

1602
01:35:13,118 --> 01:35:20,529
output any one of those right because

1603
01:35:15,238 --> 01:35:30,908
the spec Texel itself is just a v3 so

1604
01:35:20,529 --> 01:35:33,939
like you know that should be the four

1605
01:35:30,908 --> 01:35:37,509
values that are in this particular

1606
01:35:33,939 --> 01:35:39,158
location of the spec map and honestly we

1607
01:35:37,510 --> 01:35:40,900
don't need to probably need that I'll

1608
01:35:39,158 --> 01:35:42,549
just look at the zero with one and see I

1609
01:35:40,899 --> 01:35:44,439
mean if I don't find it I'll look for

1610
01:35:42,550 --> 01:35:48,219
more but zero should be fine

1611
01:35:44,439 --> 01:35:57,569
if we run it now and we open up the

1612
01:35:48,219 --> 01:35:57,569
lighting area we should see and we don't

1613
01:35:59,569 --> 01:36:13,259
so somehow I'm not seeing this hit that

1614
01:36:09,510 --> 01:36:15,150
should be putting forth but it is not

1615
01:36:13,260 --> 01:36:18,119
putting forth and I don't know why it's

1616
01:36:15,149 --> 01:36:25,649
not putting forth right I mean like I

1617
01:36:18,119 --> 01:36:29,699
should be seeing seeing that value and

1618
01:36:25,649 --> 01:36:31,409
I'm not is there air in here now like

1619
01:36:29,699 --> 01:36:33,059
that should put forth shouldn't it I

1620
01:36:31,409 --> 01:36:39,109
don't know why that wouldn't put forth

1621
01:36:33,060 --> 01:36:42,510
because debugging oh because we yeah

1622
01:36:39,109 --> 01:36:45,509
well you know it's okay because since we

1623
01:36:42,510 --> 01:36:47,760
know this is an endemic it's it persists

1624
01:36:45,510 --> 01:36:50,880
over frames I should be able to do it

1625
01:36:47,760 --> 01:36:53,010
here right so I should be able to put

1626
01:36:50,880 --> 01:36:54,600
forth before I turn off my debugging

1627
01:36:53,010 --> 01:36:57,869
because we loop multiple times over the

1628
01:36:54,600 --> 01:37:01,620
array right so I should have it poot

1629
01:36:57,869 --> 01:37:03,180
fourth it should be able to put forth a

1630
01:37:01,619 --> 01:37:07,970
little bit earlier than that right there

1631
01:37:03,180 --> 01:37:07,970
we go what the heck

1632
01:37:12,760 --> 01:37:18,070
so we just have complete garbage going

1633
01:37:15,380 --> 01:37:18,069
into these values

1634
01:37:27,060 --> 01:37:34,860
that would not really explain this

1635
01:37:30,029 --> 01:37:36,569
behavior meaning those look like actual

1636
01:37:34,859 --> 01:37:38,429
zeros maybe they're not maybe they're

1637
01:37:36,569 --> 01:37:39,359
actually tiny numbers and we're just

1638
01:37:38,430 --> 01:37:41,579
because we're only printing out the

1639
01:37:39,359 --> 01:37:45,000
first six places maybe they're getting

1640
01:37:41,579 --> 01:37:50,699
down towards underflow and that's what's

1641
01:37:45,000 --> 01:37:52,739
happening I also don't understand why is

1642
01:37:50,699 --> 01:37:57,000
everything Fulbright if these are all

1643
01:37:52,739 --> 01:37:58,289
zero right what's going on there it's

1644
01:37:57,000 --> 01:38:00,329
fascinating though so we're definitely

1645
01:37:58,289 --> 01:38:02,039
getting to the heart of the problem here

1646
01:38:00,329 --> 01:38:06,600
which we obviously have and just don't

1647
01:38:02,039 --> 01:38:08,899
understand but let's see

1648
01:38:06,600 --> 01:38:10,200
I assume all four are basically the same

1649
01:38:08,899 --> 01:38:11,579
right

1650
01:38:10,199 --> 01:38:14,489
like I assume we're getting the same

1651
01:38:11,579 --> 01:38:17,989
things in all four of these but I don't

1652
01:38:14,489 --> 01:38:17,989
actually know yeah

1653
01:38:25,640 --> 01:38:28,539
oh how interesting

1654
01:38:31,448 --> 01:38:40,149
how very interesting

1655
01:38:34,389 --> 01:38:44,690
so our mid-to are not having that

1656
01:38:40,149 --> 01:38:49,549
they're not flushing to zero and I'm

1657
01:38:44,689 --> 01:38:54,469
guessing they do at some point no we get

1658
01:38:49,550 --> 01:38:57,020
slow even before they do how odd all

1659
01:38:54,469 --> 01:38:58,969
right so we're clearly in no-man's land

1660
01:38:57,020 --> 01:39:00,260
here like we're we're in a place where

1661
01:38:58,969 --> 01:39:01,819
we don't really understand it at all

1662
01:39:00,260 --> 01:39:03,829
what's going on so there must be some

1663
01:39:01,819 --> 01:39:05,658
issues in this particular part of the

1664
01:39:03,829 --> 01:39:18,380
process where we're actually doing these

1665
01:39:05,658 --> 01:39:23,448
assigns here there should be no way to

1666
01:39:18,380 --> 01:39:25,699
oh well now but there should be no way

1667
01:39:23,448 --> 01:39:27,799
for transfer PPS to ever not get

1668
01:39:25,698 --> 01:39:30,948
initialized right in other words if I do

1669
01:39:27,800 --> 01:39:37,670
this we shouldn't be in a situation

1670
01:39:30,948 --> 01:39:39,198
where nope that's not true so in the

1671
01:39:37,670 --> 01:39:40,489
case where we did debugging we wouldn't

1672
01:39:39,198 --> 01:39:42,979
know we still do the loop so we

1673
01:39:40,488 --> 01:39:44,718
shouldn't actually if I initialize to

1674
01:39:42,979 --> 01:39:46,459
zero that should change nothing meaning

1675
01:39:44,719 --> 01:39:49,250
this is the problem we just have right

1676
01:39:46,460 --> 01:39:51,050
the code is broken in the interior so it

1677
01:39:49,250 --> 01:39:53,779
wasn't like it wasn't getting updated

1678
01:39:51,050 --> 01:39:55,940
this should this doesn't need to happen

1679
01:39:53,779 --> 01:40:02,899
it always does actually get updated

1680
01:39:55,939 --> 01:40:04,158
right so I guess we're at the point

1681
01:40:02,899 --> 01:40:06,859
where we need to start looking at why

1682
01:40:04,158 --> 01:40:08,420
this doesn't work so let's just step

1683
01:40:06,859 --> 01:40:11,118
through it that's very interesting I

1684
01:40:08,420 --> 01:40:13,908
think we must be having ad normal or

1685
01:40:11,118 --> 01:40:15,019
other unusual numbers problem I can't

1686
01:40:13,908 --> 01:40:17,388
think of any other way that we're

1687
01:40:15,020 --> 01:40:20,480
getting that slowdown it'd be nice to

1688
01:40:17,389 --> 01:40:23,569
verify that but I can't at the immediate

1689
01:40:20,479 --> 01:40:24,979
moment think of how other than maybe two

1690
01:40:23,569 --> 01:40:27,349
tests we could write something that

1691
01:40:24,979 --> 01:40:30,589
looked looped over the whole set and

1692
01:40:27,350 --> 01:40:32,960
looked for D normals or other unusual

1693
01:40:30,590 --> 01:40:35,840
numbers like is unusual we'd have like a

1694
01:40:32,960 --> 01:40:37,158
call that would determine that but since

1695
01:40:35,840 --> 01:40:39,260
we already have numbers that are

1696
01:40:37,158 --> 01:40:41,629
completely bogus I guess I can start

1697
01:40:39,260 --> 01:40:44,090
there at least and just see how we're

1698
01:40:41,630 --> 01:40:44,369
ending up with these transfer PPS values

1699
01:40:44,090 --> 01:40:49,500
the

1700
01:40:44,369 --> 01:40:56,099
so obviously completely messed up and

1701
01:40:49,500 --> 01:40:58,229
we'll see okay so if we look at the

1702
01:40:56,100 --> 01:41:00,030
transfer PBS values to start with even

1703
01:40:58,229 --> 01:41:03,149
though I didn't initialize them to 0

1704
01:41:00,029 --> 01:41:06,029
they are already 0 here before they're

1705
01:41:03,149 --> 01:41:09,739
actually getting assigned when we

1706
01:41:06,029 --> 01:41:12,329
actually step through and try to assign

1707
01:41:09,739 --> 01:41:13,469
to them here I'll you know what I can't

1708
01:41:12,329 --> 01:41:15,059
actually view them because we're

1709
01:41:13,470 --> 01:41:18,060
multi-threaded so let's turn off the

1710
01:41:15,060 --> 01:41:19,770
threading real quick it needs to be a

1711
01:41:18,060 --> 01:41:23,360
good way to step through multi-threaded

1712
01:41:19,770 --> 01:41:25,410
code where it only steps the one thread

1713
01:41:23,359 --> 01:41:29,939
be really cool if there was some way to

1714
01:41:25,409 --> 01:41:33,510
do that just remedy have anything like

1715
01:41:29,939 --> 01:41:36,689
that X 13 pixels probably isn't on right

1716
01:41:33,510 --> 01:41:38,340
now but is there some way in remedy you

1717
01:41:36,689 --> 01:41:47,819
can just step just the one thread you're

1718
01:41:38,340 --> 01:41:51,449
looking at on the list that would be a

1719
01:41:47,819 --> 01:41:54,000
pretty huge help here like visual studio

1720
01:41:51,449 --> 01:41:55,859
always sucked at that too like it

1721
01:41:54,000 --> 01:41:59,130
couldn't do it really you had to like

1722
01:41:55,859 --> 01:42:01,469
freeze threads man it was bad but you

1723
01:41:59,130 --> 01:42:03,420
could imagine a debugger having sort of

1724
01:42:01,470 --> 01:42:04,920
an advanced system that helped you where

1725
01:42:03,420 --> 01:42:07,079
you could just say look only step this

1726
01:42:04,920 --> 01:42:08,789
one thing and it would go freeze all the

1727
01:42:07,079 --> 01:42:11,369
threads for you allow you to step and

1728
01:42:08,789 --> 01:42:12,930
then like unfreeze them when you then

1729
01:42:11,369 --> 01:42:14,579
said step them all or something I don't

1730
01:42:12,930 --> 01:42:17,039
know like it does seem like something a

1731
01:42:14,579 --> 01:42:18,569
debugger could do for you it's just I'm

1732
01:42:17,039 --> 01:42:20,489
used to not having it because Visual

1733
01:42:18,569 --> 01:42:22,619
Studio didn't have it it it had this

1734
01:42:20,489 --> 01:42:27,569
weird like freeze system that's that was

1735
01:42:22,619 --> 01:42:30,329
that's super sucky anyway so all I want

1736
01:42:27,569 --> 01:42:35,639
to do here is say like look the lighting

1737
01:42:30,329 --> 01:42:39,989
cue let's turn off the multi-threading

1738
01:42:35,640 --> 01:42:46,619
by nerfing the ability to pass that to

1739
01:42:39,989 --> 01:42:49,670
lighting core so letting Q equals zero I

1740
01:42:46,619 --> 01:42:49,670
guess I'll just put that there

1741
01:42:51,090 --> 01:42:59,409
and so now we should only be stepping

1742
01:42:53,409 --> 01:43:04,689
through one code path okay so here's the

1743
01:42:59,409 --> 01:43:06,579
transfer PPS and now it's actually

1744
01:43:04,689 --> 01:43:08,529
non-zeros right these are the values

1745
01:43:06,579 --> 01:43:09,519
that we would expect because we didn't

1746
01:43:08,529 --> 01:43:13,119
initialize it so it should just be

1747
01:43:09,520 --> 01:43:15,160
garbage when we step in and see what it

1748
01:43:13,119 --> 01:43:18,939
is it's just the RGB is nothing at that

1749
01:43:15,159 --> 01:43:22,510
point so that seems fine that wouldn't

1750
01:43:18,939 --> 01:43:24,519
cause us a problem with it like why

1751
01:43:22,510 --> 01:43:26,409
would that be bad so let's go out and

1752
01:43:24,520 --> 01:43:28,000
look at this part of the code maybe just

1753
01:43:26,409 --> 01:43:33,849
to see what the heck's going on here so

1754
01:43:28,000 --> 01:43:36,880
if I jump to here and I look at all of

1755
01:43:33,850 --> 01:43:39,520
these values like it's just zero there's

1756
01:43:36,880 --> 01:43:46,329
nothing in transfer PPS

1757
01:43:39,520 --> 01:43:49,420
so what's spec Texel at that point so

1758
01:43:46,329 --> 01:43:54,449
here's the spec Texel and the spec Texel

1759
01:43:49,420 --> 01:43:54,449
value for each of these

1760
01:44:02,738 --> 01:44:08,649
so yeah I don't know what what's the

1761
01:44:05,960 --> 01:44:08,649
problem here

1762
01:44:13,059 --> 01:44:21,288
so the spec Texel is totally fine the

1763
01:44:17,719 --> 01:44:35,090
first time through anyway like when does

1764
01:44:21,288 --> 01:44:44,420
it get bad what's going on I mean that

1765
01:44:35,090 --> 01:44:46,510
looks like all zeros to me right so how

1766
01:44:44,420 --> 01:44:49,510
did it get how does it get to be

1767
01:44:46,510 --> 01:44:49,510
ridiculous

1768
01:44:57,170 --> 01:45:04,819
I think I I'm just too lost with what is

1769
01:45:02,090 --> 01:45:07,489
causing this problem I don't have a

1770
01:45:04,819 --> 01:45:10,880
solid idea so I feel like what I want to

1771
01:45:07,488 --> 01:45:11,569
do is write some augmentation code to

1772
01:45:10,880 --> 01:45:17,750
help me

1773
01:45:11,569 --> 01:45:18,819
so like remember we had is fishy or it

1774
01:45:17,750 --> 01:45:22,510
looks fishy

1775
01:45:18,819 --> 01:45:26,238
we're like a if a number just got weird

1776
01:45:22,510 --> 01:45:28,369
it would tell us kind of think that we

1777
01:45:26,238 --> 01:45:31,879
saved this for a good reason I'm just

1778
01:45:28,369 --> 01:45:34,939
gonna ask this thing any time we just

1779
01:45:31,880 --> 01:45:43,940
produced a fishy value in here I want to

1780
01:45:34,939 --> 01:45:50,960
know so just look at these and do an

1781
01:45:43,939 --> 01:45:53,539
assert on each of these so that will

1782
01:45:50,960 --> 01:45:56,000
just tell me like look when does this go

1783
01:45:53,539 --> 01:45:59,448
wrong cuz it obviously does but it's not

1784
01:45:56,000 --> 01:46:03,409
obvious when so maybe if we could just

1785
01:45:59,448 --> 01:46:06,859
catch the point in time when it starts

1786
01:46:03,409 --> 01:46:10,369
to look fishy we could figure out what

1787
01:46:06,859 --> 01:46:16,130
the heck was going on right and you know

1788
01:46:10,369 --> 01:46:19,550
I don't know I don't know when you could

1789
01:46:16,130 --> 01:46:25,069
see the first few frames there looked

1790
01:46:19,550 --> 01:46:27,529
good too so something's up there with

1791
01:46:25,069 --> 01:46:32,539
those numbers there they keep sort of

1792
01:46:27,529 --> 01:46:36,050
increasing very rapidly there and now

1793
01:46:32,539 --> 01:46:40,729
we've gotten to a fishy you know a fishy

1794
01:46:36,050 --> 01:46:43,789
situation so they do start well-behaved

1795
01:46:40,729 --> 01:46:47,409
and they just go too high and so

1796
01:46:43,789 --> 01:46:51,310
something about the way we're outputting

1797
01:46:47,409 --> 01:46:58,609
the transmission here I guess is

1798
01:46:51,310 --> 01:47:05,480
erroneous and boy is it so I guess that

1799
01:46:58,609 --> 01:47:07,789
must have something to do I guess what

1800
01:47:05,479 --> 01:47:10,639
I'd like to do here is let me look at

1801
01:47:07,789 --> 01:47:14,720
what we're producing for transfer

1802
01:47:10,640 --> 01:47:17,270
tons per second values for just the

1803
01:47:14,720 --> 01:47:19,220
debug one because that way I can look at

1804
01:47:17,270 --> 01:47:21,320
the manually there's way too many to

1805
01:47:19,220 --> 01:47:24,020
look at manually otherwise like those

1806
01:47:21,319 --> 01:47:27,439
values all look good right is it just a

1807
01:47:24,020 --> 01:47:29,420
feedback loop problem yeah it is so the

1808
01:47:27,439 --> 01:47:31,909
problem that we're getting is that the

1809
01:47:29,420 --> 01:47:33,890
lighting just keeps increasing and it

1810
01:47:31,909 --> 01:47:35,720
obviously increases by more and more

1811
01:47:33,890 --> 01:47:46,310
power each time because it's storing

1812
01:47:35,720 --> 01:47:49,010
more and more power very interesting so

1813
01:47:46,310 --> 01:47:51,830
this looks like case of just the the

1814
01:47:49,010 --> 01:47:54,920
diffuse blur problem you know like that

1815
01:47:51,829 --> 01:47:59,300
suggests that that if you just were

1816
01:47:54,920 --> 01:48:03,289
looking at sort of like hacking this

1817
01:47:59,300 --> 01:48:05,029
stuff that means if you just turned down

1818
01:48:03,289 --> 01:48:07,039
the transmission you would be fine

1819
01:48:05,029 --> 01:48:09,710
right and so we we kind of want to know

1820
01:48:07,039 --> 01:48:16,489
why we're getting that and if you

1821
01:48:09,710 --> 01:48:18,590
remember we already have this problem so

1822
01:48:16,489 --> 01:48:23,439
if you look at the disputes map builder

1823
01:48:18,590 --> 01:48:26,989
you know this is some garbage here right

1824
01:48:23,439 --> 01:48:30,919
and so if you imagine just doing you

1825
01:48:26,989 --> 01:48:33,829
know more removal like a very low

1826
01:48:30,920 --> 01:48:35,930
transmission value does this all of a

1827
01:48:33,829 --> 01:48:39,019
sudden work which again like gives us a

1828
01:48:35,930 --> 01:48:41,770
good clue as to what the heck is going

1829
01:48:39,020 --> 01:48:46,010
on so ill me take a look at what happens

1830
01:48:41,770 --> 01:48:47,660
in that circumstance oh I'm looking at

1831
01:48:46,010 --> 01:48:50,110
the wrong thing that's not what I wanted

1832
01:48:47,659 --> 01:48:50,109
I want this

1833
01:49:02,270 --> 01:49:07,080
those look like they're flattened a

1834
01:49:04,649 --> 01:49:10,019
little bit much but but you can see so

1835
01:49:07,079 --> 01:49:12,840
even with a really damped transmission

1836
01:49:10,020 --> 01:49:20,340
it still looks sort of feedback II at

1837
01:49:12,840 --> 01:49:24,449
this point I guess it's a little hard to

1838
01:49:20,340 --> 01:49:25,860
say you know maybe not exactly but I'm

1839
01:49:24,449 --> 01:49:28,260
just trying to find out if this feedback

1840
01:49:25,859 --> 01:49:30,359
is it's just a lighting quality issue

1841
01:49:28,260 --> 01:49:32,430
feedback and there's a slight difference

1842
01:49:30,359 --> 01:49:34,109
in the rate tracer that that would

1843
01:49:32,430 --> 01:49:37,350
produce it or if it's if it's a little

1844
01:49:34,109 --> 01:49:38,670
different let me run it quickly I think

1845
01:49:37,350 --> 01:49:40,170
we're in a good shape though we've we've

1846
01:49:38,670 --> 01:49:41,460
gotten rid of a lot of the bugs so I

1847
01:49:40,170 --> 01:49:43,739
think at this point we're now just down

1848
01:49:41,460 --> 01:49:46,439
to like looking at the actual PPS

1849
01:49:43,738 --> 01:49:52,889
preservation and sampling let's see what

1850
01:49:46,439 --> 01:49:55,139
happens when we do this quickly it in

1851
01:49:52,890 --> 01:49:57,690
like look at how slow that is for some

1852
01:49:55,140 --> 01:49:59,880
reason but we don't know why that would

1853
01:49:57,689 --> 01:50:02,609
be slow it's like the fact that the

1854
01:49:59,880 --> 01:50:04,199
numbers are low produces slowness which

1855
01:50:02,609 --> 01:50:10,609
suggests to me that we have a problem

1856
01:50:04,199 --> 01:50:10,609
with D normals I just don't understand

1857
01:50:20,069 --> 01:50:28,109
so you can see like even with really

1858
01:50:23,039 --> 01:50:32,099
gradual it's just it just transmits too

1859
01:50:28,109 --> 01:50:36,210
much right so something's something's

1860
01:50:32,099 --> 01:50:38,279
still broken there I think like look at

1861
01:50:36,210 --> 01:50:40,349
how that goes it just it's not

1862
01:50:38,279 --> 01:50:43,229
preserving the energy sure does look

1863
01:50:40,349 --> 01:50:46,739
kind of cool though huh but it's just

1864
01:50:43,229 --> 01:50:49,769
not properly preserving energy so that's

1865
01:50:46,738 --> 01:50:55,289
fine we're pretty close we can go ahead

1866
01:50:49,770 --> 01:51:01,530
and start looking at that that's so

1867
01:50:55,289 --> 01:51:04,019
cool-looking by the way how neat anyway

1868
01:51:01,529 --> 01:51:06,328
so I think we just have a few more

1869
01:51:04,020 --> 01:51:08,699
issues left in the way that we're

1870
01:51:06,328 --> 01:51:16,729
producing that transfer that's just so

1871
01:51:08,698 --> 01:51:16,729
weird how fascinating

1872
01:51:21,710 --> 01:51:26,039
so I think yeah we're just having

1873
01:51:23,850 --> 01:51:27,539
problems with again and so maybe now is

1874
01:51:26,039 --> 01:51:29,640
the time to like do the lighting quality

1875
01:51:27,539 --> 01:51:32,489
pass as well but it's just very strange

1876
01:51:29,640 --> 01:51:35,190
look at how slow that is by comparison

1877
01:51:32,489 --> 01:51:36,689
to what we know that it was running the

1878
01:51:35,189 --> 01:51:38,939
exact same algorithm doing the exact

1879
01:51:36,689 --> 01:51:40,949
same number of iterations it's just very

1880
01:51:38,939 --> 01:51:42,149
suspicious so we're kind of at an

1881
01:51:40,949 --> 01:51:54,019
interesting point in terms of

1882
01:51:42,149 --> 01:52:00,269
suspiciousness here right so anyway and

1883
01:51:54,020 --> 01:52:01,980
what we probably want to do right we

1884
01:52:00,270 --> 01:52:06,350
probably want to check for D normals I

1885
01:52:01,979 --> 01:52:06,349
don't know if there's some

1886
01:52:22,159 --> 01:52:30,380
I just don't know exactly whether we're

1887
01:52:26,630 --> 01:52:32,890
allowed to actually set these we want

1888
01:52:30,380 --> 01:52:39,050
flush to zero and do normal as zero

1889
01:52:32,890 --> 01:52:40,700
stuff to happen I just don't know what

1890
01:52:39,050 --> 01:52:43,489
those are set to I would have assumed

1891
01:52:40,699 --> 01:52:47,689
that they were already set I guess I

1892
01:52:43,489 --> 01:52:50,260
didn't know that they wouldn't be so

1893
01:52:47,689 --> 01:52:50,259
that's a bit weird

1894
01:53:13,810 --> 01:53:17,880
[Music]

1895
01:53:15,979 --> 01:53:27,539
so I don't know maybe I'll just try

1896
01:53:17,880 --> 01:53:35,430
setting these out so this can actually

1897
01:53:27,539 --> 01:53:37,829
be a compiler flag apparently so is this

1898
01:53:35,430 --> 01:53:40,650
actually an option I can set in Visual

1899
01:53:37,829 --> 01:53:43,819
Studio as compiler at all because this

1900
01:53:40,649 --> 01:53:47,659
is talking about the Intel compiler and

1901
01:53:43,819 --> 01:53:54,210
I don't know a Visual Studio has a

1902
01:53:47,659 --> 01:53:57,979
similar thing I can set them myself so

1903
01:53:54,210 --> 01:53:57,980
you know we could do that

1904
01:54:02,310 --> 01:54:07,680
and we could just see I assume these are

1905
01:54:06,090 --> 01:54:15,600
in the actual entrance of God they might

1906
01:54:07,680 --> 01:54:17,119
not be but the control word for the for

1907
01:54:15,600 --> 01:54:24,150
the ssee

1908
01:54:17,119 --> 01:54:26,220
stuff presumably can can be can be set

1909
01:54:24,149 --> 01:54:28,199
pretty easily I don't remember having

1910
01:54:26,220 --> 01:54:31,530
done this in a long time but it

1911
01:54:28,199 --> 01:54:32,970
shouldn't be that bad it's kind of too

1912
01:54:31,529 --> 01:54:34,170
many things here and I don't know

1913
01:54:32,970 --> 01:54:37,949
exactly what they would have called it

1914
01:54:34,170 --> 01:54:41,750
because I don't remember but let me just

1915
01:54:37,949 --> 01:54:41,750
see if I can search for control

1916
01:54:49,569 --> 01:54:56,779
extended control register kind of sounds

1917
01:54:54,890 --> 01:55:04,400
related in this case but unfortunately I

1918
01:54:56,779 --> 01:55:05,989
didn't actually know so this is what

1919
01:55:04,399 --> 01:55:07,429
we're talking about like this is the

1920
01:55:05,989 --> 01:55:11,179
sort of stuff we're looking at and we

1921
01:55:07,430 --> 01:55:15,289
just want to be able to set those and we

1922
01:55:11,180 --> 01:55:17,060
should probably just yeah so here's here

1923
01:55:15,289 --> 01:55:19,369
okay here we go this is the thing I was

1924
01:55:17,060 --> 01:55:26,780
looking for mm sets ESR that's the

1925
01:55:19,369 --> 01:55:37,090
control register so presumably I only

1926
01:55:26,779 --> 01:55:45,319
care about setting the exceptions and

1927
01:55:37,090 --> 01:55:47,900
setting the flush to zero let's see what

1928
01:55:45,319 --> 01:55:54,159
happened I'm just curious now let's see

1929
01:55:47,899 --> 01:55:54,159
what happens if I do that so if I say

1930
01:55:54,640 --> 01:55:57,800
you know I'm assuming that this is the

1931
01:55:56,989 --> 01:56:01,399
correct

1932
01:55:57,800 --> 01:56:05,390
mm sets ESR let's just see if I do

1933
01:56:01,399 --> 01:56:09,729
mm set CSR for de normals like does

1934
01:56:05,390 --> 01:56:12,490
someone have a nice guide to that

1935
01:56:09,729 --> 01:56:24,529
because someone should have said so

1936
01:56:12,489 --> 01:56:30,260
let's see so this is this is basically

1937
01:56:24,529 --> 01:56:32,149
what we want right basically it's just

1938
01:56:30,260 --> 01:56:34,550
roaring in the bits we actually care

1939
01:56:32,149 --> 01:56:37,849
about and it looks like you probably

1940
01:56:34,550 --> 01:56:40,880
don't actually have to do it as bits

1941
01:56:37,850 --> 01:56:43,520
necessarily but this is what we want so

1942
01:56:40,880 --> 01:56:44,239
we want to literally do exactly what

1943
01:56:43,520 --> 01:56:46,910
this does

1944
01:56:44,239 --> 01:56:49,250
and we can go double check that this is

1945
01:56:46,909 --> 01:56:53,720
the right bit field but that's exactly

1946
01:56:49,250 --> 01:56:58,219
what we want so you know at startup

1947
01:56:53,720 --> 01:57:05,810
right like when we're actually doing the

1948
01:56:58,219 --> 01:57:07,609
initial code here we probably want to to

1949
01:57:05,810 --> 01:57:10,310
just throw this in there as something we

1950
01:57:07,609 --> 01:57:14,059
do when things get started right so like

1951
01:57:10,310 --> 01:57:18,469
right here we would want to do mmm get

1952
01:57:14,060 --> 01:57:24,820
CSI which okay looks like it's an

1953
01:57:18,469 --> 01:57:30,310
unsigned in so this is the old control

1954
01:57:24,819 --> 01:57:33,109
bits here and then we get these from the

1955
01:57:30,310 --> 01:57:35,060
from the actual intrinsic it will return

1956
01:57:33,109 --> 01:57:38,289
what the floating-point unit is set to

1957
01:57:35,060 --> 01:57:42,289
do well unit the multiple floating-point

1958
01:57:38,289 --> 01:57:59,179
execution ports are set to do we can

1959
01:57:42,289 --> 01:58:01,609
then just pour it in like so and then we

1960
01:57:59,179 --> 01:58:03,949
can do an mm set CSR with the new

1961
01:58:01,609 --> 01:58:05,479
control bits right and what we want to

1962
01:58:03,948 --> 01:58:07,460
do is we want to actually go look and

1963
01:58:05,479 --> 01:58:09,079
see what these bits actually are because

1964
01:58:07,460 --> 01:58:10,340
I don't know like that you know who

1965
01:58:09,079 --> 01:58:12,170
knows that person is supposed to inform

1966
01:58:10,340 --> 01:58:14,989
they could have had a typo you know we

1967
01:58:12,170 --> 01:58:16,730
don't know but I'm curious to see like

1968
01:58:14,988 --> 01:58:17,959
to what extent we can get that to

1969
01:58:16,729 --> 01:58:19,158
actually do something now in this case

1970
01:58:17,960 --> 01:58:21,880
it looks like it didn't do anything at

1971
01:58:19,158 --> 01:58:24,049
all right this is still quite slow right

1972
01:58:21,880 --> 01:58:26,389
so let's take a look at what actually

1973
01:58:24,050 --> 01:58:29,420
happens in here I also don't know if we

1974
01:58:26,389 --> 01:58:31,369
do set CSR anywhere in the code so I

1975
01:58:29,420 --> 01:58:32,810
want to look and make sure that we don't

1976
01:58:31,369 --> 01:58:35,689
do that elsewhere okay we don't

1977
01:58:32,810 --> 01:58:37,639
so at startup if we set these up

1978
01:58:35,689 --> 01:58:39,049
properly hopefully that would be fine

1979
01:58:37,639 --> 01:58:40,609
now we don't actually know because

1980
01:58:39,050 --> 01:58:42,320
someone else could come along and set

1981
01:58:40,609 --> 01:58:43,908
them so another way to look at this is

1982
01:58:42,319 --> 01:58:45,590
maybe we should call them every time and

1983
01:58:43,908 --> 01:58:48,049
then let's take a look at what the

1984
01:58:45,590 --> 01:58:53,810
control bit should actually be so if we

1985
01:58:48,050 --> 01:58:57,560
go to the the control bits for this if

1986
01:58:53,810 --> 01:59:00,620
we look for flush to zero I want to kind

1987
01:58:57,560 --> 01:59:03,980
of look at I mean I guess we could look

1988
01:59:00,619 --> 01:59:06,349
at what these values are right but I

1989
01:59:03,979 --> 01:59:07,759
kind of want to look to see what these

1990
01:59:06,350 --> 01:59:12,130
are in the actual programming guide

1991
01:59:07,760 --> 01:59:12,130
right I would like to know

1992
01:59:17,689 --> 01:59:24,079
we had somewhere we were sticking this

1993
01:59:21,029 --> 01:59:26,519
stuff there it is mm-hmm

1994
01:59:24,079 --> 01:59:29,550
so if I look at the actual intel

1995
01:59:26,520 --> 01:59:34,800
architecture manual here oh you know

1996
01:59:29,550 --> 01:59:36,810
what didn't I do this yes so if I look

1997
01:59:34,800 --> 01:59:42,570
at the Intel architectural manual and I

1998
01:59:36,810 --> 01:59:45,090
just look at the like CSR I'm just

1999
01:59:42,569 --> 01:59:55,469
curious like okay well that's not very

2000
01:59:45,090 --> 02:00:04,739
helpful now is it that's the the wrong

2001
01:59:55,470 --> 02:00:10,909
State here we go here we go here we go

2002
02:00:04,739 --> 02:00:14,069
all right so here's a bunch of stuff

2003
02:00:10,909 --> 02:00:18,210
we've got d normal operation mask

2004
02:00:14,069 --> 02:00:20,939
we've got flushed zero under flow and

2005
02:00:18,210 --> 02:00:26,880
overflowed divided by zero like all this

2006
02:00:20,939 --> 02:00:29,009
stuff to be honest like probably we want

2007
02:00:26,880 --> 02:00:31,199
two sets of things we're gonna want to

2008
02:00:29,010 --> 02:00:33,960
knock stuff out here as well as put

2009
02:00:31,199 --> 02:00:37,619
stuff in and I guess we have to kind of

2010
02:00:33,960 --> 02:00:38,489
look so flush to zero flag provides a

2011
02:00:37,619 --> 02:00:39,630
means of controlling under flow

2012
02:00:38,489 --> 02:00:41,369
conditions on somebody floating-point

2013
02:00:39,630 --> 02:00:44,460
operations console ready to be loaded

2014
02:00:41,369 --> 02:00:46,739
from memory blah blah but 1631 are

2015
02:00:44,460 --> 02:00:49,859
reserved we don't really need to look at

2016
02:00:46,739 --> 02:00:51,869
those so if we actually look at these in

2017
02:00:49,859 --> 02:00:57,349
here and we look at which bits are being

2018
02:00:51,869 --> 02:00:57,349
set so flush 2-0 is like bit 15 right

2019
02:00:57,529 --> 02:01:05,759
and so you can see that that was the 8

2020
02:00:59,939 --> 02:01:07,919
here because here's bits 1 through 4

2021
02:01:05,760 --> 02:01:10,619
here's bits that's all right 0 through 3

2022
02:01:07,920 --> 02:01:13,800
here's bits 4 through 7 here is bits 8

2023
02:01:10,619 --> 02:01:17,460
through 11 in here spits 12 through 15

2024
02:01:13,800 --> 02:01:21,409
and 15 is set right now I would rather

2025
02:01:17,460 --> 02:01:21,409
do something like this

2026
02:01:24,479 --> 02:01:28,229
so that people know what the heck is

2027
02:01:26,770 --> 02:01:31,230
going on when they look at this code

2028
02:01:28,229 --> 02:01:31,229
right

2029
02:01:33,060 --> 02:01:40,180
the precision mask I don't know what

2030
02:01:37,449 --> 02:01:44,369
that does because I've long forgotten so

2031
02:01:40,180 --> 02:01:44,369
it would be nice if it were documented

2032
02:01:51,510 --> 02:01:58,930
so 7 through 12 we want to clear because

2033
02:01:55,390 --> 02:02:01,660
we don't want any exceptions to occur so

2034
02:01:58,930 --> 02:02:04,930
7 through 12 we want to be empty

2035
02:02:01,659 --> 02:02:08,199
that's this mask so that's invalid

2036
02:02:04,930 --> 02:02:09,840
operation de normals whatever we want

2037
02:02:08,199 --> 02:02:15,159
those cleared right

2038
02:02:09,840 --> 02:02:31,289
so do you normal stars zero we want set

2039
02:02:15,159 --> 02:02:37,139
which is bit six that was the four wait

2040
02:02:31,289 --> 02:02:37,140
but four would be wrong wouldn't it

2041
02:02:44,500 --> 02:02:50,270
also bit six this is the wrong way to

2042
02:02:47,420 --> 02:02:59,750
write this so bit six would be shifted

2043
02:02:50,270 --> 02:03:01,909
up five right yeah so anyway invalid

2044
02:02:59,750 --> 02:03:04,219
operation flag D normal flag divided by

2045
02:03:01,908 --> 02:03:05,839
zero flag under flip flag and I'm sorry

2046
02:03:04,219 --> 02:03:07,698
overflow flag and under flip flag and

2047
02:03:05,840 --> 02:03:12,050
precision flag these are just things get

2048
02:03:07,698 --> 02:03:14,750
that are set when they happen right so

2049
02:03:12,050 --> 02:03:17,270
this is this is just for detection so

2050
02:03:14,750 --> 02:03:18,469
those should all be zero and we don't

2051
02:03:17,270 --> 02:03:20,360
want to touch those anyway because those

2052
02:03:18,469 --> 02:03:23,239
are just conditioned like that just

2053
02:03:20,359 --> 02:03:25,599
tells you something six we want to set

2054
02:03:23,238 --> 02:03:28,039
seven through twelve we want clear

2055
02:03:25,600 --> 02:03:29,210
rounding control we probably do actually

2056
02:03:28,039 --> 02:03:30,829
want to set it to our rounding and then

2057
02:03:29,210 --> 02:03:34,279
flush to zero we want to set we should

2058
02:03:30,829 --> 02:03:35,899
probably set the RC as well right but

2059
02:03:34,279 --> 02:03:40,819
what we probably want to do here is

2060
02:03:35,899 --> 02:03:43,339
actually say like old control bits we

2061
02:03:40,819 --> 02:03:46,519
want to do like an control mask so we

2062
02:03:43,340 --> 02:03:48,590
want to knock out like the bits that we

2063
02:03:46,520 --> 02:03:50,860
want cleared and then we want to like

2064
02:03:48,590 --> 02:03:56,380
you know desired bits we want like

2065
02:03:50,859 --> 02:03:56,380
desired right

2066
02:04:00,840 --> 02:04:08,189
so we want like our control masks in

2067
02:04:04,139 --> 02:04:11,788
this case we want that to be like all

2068
02:04:08,189 --> 02:04:13,889
the bits we actually care about so of

2069
02:04:11,788 --> 02:04:20,368
all the bits we know about here let's

2070
02:04:13,889 --> 02:04:35,458
define them all so we want like

2071
02:04:20,368 --> 02:04:49,549
precision masks underflow maths overflow

2072
02:04:35,458 --> 02:05:00,538
mass divided by zero d normal and

2073
02:04:49,550 --> 02:05:02,788
invalid yeah so if we take a look at

2074
02:05:00,538 --> 02:05:04,559
these just in the intel bit order

2075
02:05:02,788 --> 02:05:14,099
we've got flush to zero we've got

2076
02:05:04,559 --> 02:05:15,779
rounding control and rounding controls a

2077
02:05:14,099 --> 02:05:17,998
little bit Squinkie because it's

2078
02:05:15,779 --> 02:05:20,038
actually two bits right so it's actually

2079
02:05:17,998 --> 02:05:32,578
two bits that are post set together and

2080
02:05:20,038 --> 02:05:33,809
then it starts at 13 great yeah so I

2081
02:05:32,578 --> 02:05:36,208
don't why don't I change the 14 that's

2082
02:05:33,809 --> 02:05:39,269
correct so if it was set at 1 in 0 right

2083
02:05:36,208 --> 02:05:52,760
if this was set to 1 it would be 1 2 3 4

2084
02:05:39,269 --> 02:05:52,760
5 6 all right 1 2 3 4 5 6 7 8

2085
02:05:53,670 --> 02:05:58,060
fifteen yeah so I was right I don't know

2086
02:05:56,710 --> 02:06:00,069
why I was thinking that because it's

2087
02:05:58,060 --> 02:06:01,360
already shipped in if it was 16 if you

2088
02:06:00,069 --> 02:06:03,509
were counting the bits then it would

2089
02:06:01,359 --> 02:06:06,639
have been one less but it's not here

2090
02:06:03,510 --> 02:06:08,140
and you normal star zero should be six

2091
02:06:06,640 --> 02:06:11,170
yeah right

2092
02:06:08,140 --> 02:06:13,780
I think I'm right there so we don't care

2093
02:06:11,170 --> 02:06:16,329
about 0 1 2 3 4 or 5

2094
02:06:13,779 --> 02:06:21,869
we care about 6 and then 7 is the

2095
02:06:16,329 --> 02:06:31,649
invalid op do you normal mask is 8

2096
02:06:21,869 --> 02:06:35,309
general opt mask rather is 8 9 10 11 12

2097
02:06:31,649 --> 02:06:38,229
and then we've got 13 and 14 here and 15

2098
02:06:35,310 --> 02:06:41,860
so then our control mask is just all of

2099
02:06:38,229 --> 02:06:44,649
these so this is the flush to zero a bit

2100
02:06:41,859 --> 02:06:48,460
the rounding control bits the precision

2101
02:06:44,649 --> 02:06:53,469
mask the underflow mask overflow mask

2102
02:06:48,460 --> 02:06:57,939
the DBZ mask the normal op mask invalid

2103
02:06:53,470 --> 02:07:00,190
op mask you normals are 0 that's all of

2104
02:06:57,939 --> 02:07:02,679
the stuff that we want to talk about so

2105
02:07:00,189 --> 02:07:04,119
we want to knock them all out then we

2106
02:07:02,680 --> 02:07:08,560
want to just put in the two we want

2107
02:07:04,119 --> 02:07:17,260
which are these two right now for

2108
02:07:08,560 --> 02:07:18,670
rounding control honestly I think we

2109
02:07:17,260 --> 02:07:21,420
might just not want to touch it right

2110
02:07:18,670 --> 02:07:23,470
now just leave it as it is

2111
02:07:21,420 --> 02:07:25,390
so we'll knock out everything but that

2112
02:07:23,470 --> 02:07:28,390
and then we'll put in the two that we

2113
02:07:25,390 --> 02:07:31,770
actually wanted right now I don't know

2114
02:07:28,390 --> 02:07:39,880
if this is gonna help we'll find out

2115
02:07:31,770 --> 02:07:44,890
we'll see what happens here oops oh and

2116
02:07:39,880 --> 02:07:47,619
also I guess well let's see so we'll run

2117
02:07:44,890 --> 02:07:49,510
it and we'll see if we stop I'm guessing

2118
02:07:47,619 --> 02:07:52,269
that maybe these mask values should

2119
02:07:49,510 --> 02:07:54,340
actually set to on because some mask so

2120
02:07:52,270 --> 02:07:55,810
it should be on if we want to stop them

2121
02:07:54,340 --> 02:07:58,230
from occurring right so this should

2122
02:07:55,810 --> 02:08:05,910
actually cause us to stop somewhere

2123
02:07:58,229 --> 02:08:05,909
probably I would think yeah

2124
02:08:06,840 --> 02:08:11,260
so that actually causes even the

2125
02:08:09,520 --> 02:08:15,429
standard runtime library to cause an

2126
02:08:11,260 --> 02:08:18,610
operation error right okay so actually

2127
02:08:15,429 --> 02:08:20,739
we just want our control mask and our

2128
02:08:18,609 --> 02:08:23,889
desired bits are actually the same in

2129
02:08:20,738 --> 02:08:26,948
this case because we want to set all of

2130
02:08:23,889 --> 02:08:29,889
them right so it just so happens that

2131
02:08:26,948 --> 02:08:34,000
it's the same right which is kind of

2132
02:08:29,889 --> 02:08:39,699
weird but that's just how it is right at

2133
02:08:34,000 --> 02:08:41,710
the moment so now if we run yeah in

2134
02:08:39,698 --> 02:08:43,089
theory we're set incorrectly so I have

2135
02:08:41,710 --> 02:08:44,529
no idea what this slowdown is coming

2136
02:08:43,090 --> 02:08:46,538
from it's fascinating

2137
02:08:44,529 --> 02:08:51,429
I really don't know what's causing it to

2138
02:08:46,538 --> 02:08:54,130
be slow it's some other thing that isn't

2139
02:08:51,429 --> 02:08:56,380
related to the behavior of the CPU I

2140
02:08:54,130 --> 02:09:01,389
guess and I don't really know like you

2141
02:08:56,380 --> 02:09:03,578
know I guess we could double-check that

2142
02:09:01,389 --> 02:09:06,118
the MCR is actually being set properly

2143
02:09:03,578 --> 02:09:08,019
but that's just like really weird right

2144
02:09:06,118 --> 02:09:11,229
it's just like really really really

2145
02:09:08,020 --> 02:09:13,869
weird and I have no idea why it's why

2146
02:09:11,229 --> 02:09:16,509
it's having that problem something super

2147
02:09:13,868 --> 02:09:18,729
bizarre is happening if I actually just

2148
02:09:16,510 --> 02:09:27,909
step in to the code here I just want to

2149
02:09:18,729 --> 02:09:30,908
look and see what we actually get so

2150
02:09:27,908 --> 02:09:33,038
here's the old control bits what we

2151
02:09:30,908 --> 02:09:37,929
would actually get and here's the new

2152
02:09:33,038 --> 02:09:41,319
control bits so it is actually the case

2153
02:09:37,929 --> 02:09:43,538
that that those were not what was set

2154
02:09:41,319 --> 02:09:45,038
like meaning this is not the exact

2155
02:09:43,538 --> 02:09:47,259
pattern and it looks like specifically

2156
02:09:45,038 --> 02:09:49,960
alike the flush to zero was not set for

2157
02:09:47,260 --> 02:09:53,230
example which is interesting and D

2158
02:09:49,960 --> 02:09:54,550
normals are zero was not set so it's

2159
02:09:53,229 --> 02:09:56,649
kind of a little bit weird that we

2160
02:09:54,550 --> 02:09:58,690
didn't get more of a change in the

2161
02:09:56,649 --> 02:09:59,888
program because of that so it would have

2162
02:09:58,689 --> 02:10:03,308
lined up with what we would have

2163
02:09:59,889 --> 02:10:06,659
expected to see actually believe it or

2164
02:10:03,309 --> 02:10:06,659
not but

2165
02:10:09,810 --> 02:10:13,720
for whatever reason that's not what

2166
02:10:11,829 --> 02:10:16,449
happened I'm gonna do something else

2167
02:10:13,720 --> 02:10:17,740
here a little bit strange I might put

2168
02:10:16,449 --> 02:10:20,109
this at the top of the lighting code

2169
02:10:17,739 --> 02:10:23,289
just so I can see what whether that gets

2170
02:10:20,109 --> 02:10:25,809
reset because that would also be if

2171
02:10:23,289 --> 02:10:28,750
someone else was resetting that without

2172
02:10:25,810 --> 02:10:31,750
our permission that would explain it too

2173
02:10:28,750 --> 02:10:34,060
so I just want to do it every frame to

2174
02:10:31,750 --> 02:10:35,859
see if that's the case

2175
02:10:34,060 --> 02:10:49,950
so let's actually just dump that right

2176
02:10:35,859 --> 02:10:49,949
here yeah where is that though

2177
02:11:00,710 --> 02:11:06,119
okay so what we should be able to verify

2178
02:11:03,659 --> 02:11:08,819
here is that we always have the same one

2179
02:11:06,119 --> 02:11:11,039
every time yeah so so thankfully like

2180
02:11:08,819 --> 02:11:12,630
now we know it's running properly we

2181
02:11:11,039 --> 02:11:13,890
know that no one's like interceding and

2182
02:11:12,630 --> 02:11:16,440
I'll double check to make sure that

2183
02:11:13,890 --> 02:11:17,910
didn't like make it go fast all of a

2184
02:11:16,439 --> 02:11:20,159
sudden but I'm pretty sure it wouldn't

2185
02:11:17,909 --> 02:11:22,139
because I don't think anyone would be

2186
02:11:20,159 --> 02:11:24,809
monkeying with our settings there don't

2187
02:11:22,140 --> 02:11:26,940
know but I don't imagine so yeah so you

2188
02:11:24,810 --> 02:11:29,280
can see like it's just really weird it's

2189
02:11:26,939 --> 02:11:31,619
really slow and bizarre and and I have

2190
02:11:29,279 --> 02:11:32,909
no idea why that would be because we

2191
02:11:31,619 --> 02:11:35,849
don't have things that are really

2192
02:11:32,909 --> 02:11:38,939
dependent on that so I don't understand

2193
02:11:35,850 --> 02:11:42,360
why we would be getting such a drastic

2194
02:11:38,939 --> 02:11:45,269
difference in speed as a result of that

2195
02:11:42,359 --> 02:11:46,289
but you know it could be other things we

2196
02:11:45,270 --> 02:11:48,480
haven't looked at it particularly

2197
02:11:46,289 --> 02:11:51,510
closely I am gonna go ahead and keep

2198
02:11:48,479 --> 02:11:56,729
this code because I do like the ability

2199
02:11:51,510 --> 02:11:58,860
for us to have this code available so I

2200
02:11:56,729 --> 02:12:06,569
am gonna put in here a thing that's like

2201
02:11:58,859 --> 02:12:14,789
you know set default floating or FP

2202
02:12:06,569 --> 02:12:16,679
behavior some you can call just to make

2203
02:12:14,789 --> 02:12:20,039
sure that all this stuff is set in a

2204
02:12:16,680 --> 02:12:21,810
particular way and we'll do that just

2205
02:12:20,039 --> 02:12:22,979
right at the outset and that way we've

2206
02:12:21,810 --> 02:12:25,680
done it to worry about it any more we

2207
02:12:22,979 --> 02:12:27,539
know that no matter what we're you know

2208
02:12:25,680 --> 02:12:29,670
how wherever we're running it'll you

2209
02:12:27,539 --> 02:12:30,989
know should be roughly correct and we

2210
02:12:29,670 --> 02:12:32,670
could be more defensive instead of every

2211
02:12:30,989 --> 02:12:34,649
frame if we feel like we should but at

2212
02:12:32,670 --> 02:12:36,390
the moment you know it's fine so that's

2213
02:12:34,649 --> 02:12:38,549
just so weird so I have no idea what's

2214
02:12:36,390 --> 02:12:40,740
going on here but you know that's a job

2215
02:12:38,550 --> 02:12:42,690
for next weekend we've at least got our

2216
02:12:40,739 --> 02:12:44,039
ray cast are working properly or at

2217
02:12:42,689 --> 02:12:47,069
least to a certain extent we've got it

2218
02:12:44,039 --> 02:12:50,010
working properly and so we should be

2219
02:12:47,069 --> 02:12:55,369
able to pick it up from there next time

2220
02:12:50,010 --> 02:12:55,369
around also question

2221
02:12:58,439 --> 02:13:03,639
we're still running single-threaded so

2222
02:13:01,750 --> 02:13:06,130
that's probably where the speed problem

2223
02:13:03,640 --> 02:13:20,880
was coming from not a thing that was a

2224
02:13:06,130 --> 02:13:25,800
slight mistake okay so actually that

2225
02:13:20,880 --> 02:13:28,210
that may have explained part of it right

2226
02:13:25,800 --> 02:13:31,239
so we still have the feedback problem

2227
02:13:28,210 --> 02:13:43,659
right and if I get rid of those looks

2228
02:13:31,239 --> 02:13:45,519
fishies here yeah yeah so let's do this

2229
02:13:43,659 --> 02:13:47,409
test again I bet it was to do normals

2230
02:13:45,520 --> 02:13:51,990
and I just forgot that I turn off the

2231
02:13:47,409 --> 02:13:58,710
multi-threading so let's go and look at

2232
02:13:51,989 --> 02:14:07,359
the code for the diffuse builds right

2233
02:13:58,710 --> 02:14:10,060
oops and let's look in here and say okay

2234
02:14:07,359 --> 02:14:11,679
so if we go back to the previous values

2235
02:14:10,060 --> 02:14:14,470
that we were using before where we got

2236
02:14:11,680 --> 02:14:17,289
the instant explosion which we know like

2237
02:14:14,470 --> 02:14:18,579
just kills us very quickly and we got

2238
02:14:17,289 --> 02:14:21,250
the performance degradation that

2239
02:14:18,579 --> 02:14:22,840
happened let's see if it still happens

2240
02:14:21,250 --> 02:14:28,569
with the normal flushing turned on now

2241
02:14:22,840 --> 02:14:30,880
because this is the actual test we need

2242
02:14:28,569 --> 02:14:33,130
a frame counter we should have a frame

2243
02:14:30,880 --> 02:14:37,329
counter on here so we can see at which

2244
02:14:33,130 --> 02:14:41,619
frame it happens and then like actually

2245
02:14:37,329 --> 02:14:43,269
get a more coherent understanding of

2246
02:14:41,619 --> 02:14:47,559
what's going on right I should put that

2247
02:14:43,270 --> 02:14:52,920
in here so here's us running for a while

2248
02:14:47,560 --> 02:15:00,330
right and we're not seeing any of the

2249
02:14:52,920 --> 02:15:00,329
explosion to open up there it is weird

2250
02:15:02,430 --> 02:15:07,360
that's just a bizarre one

2251
02:15:04,720 --> 02:15:08,440
I still I still have literally no idea

2252
02:15:07,359 --> 02:15:17,199
what the look of because of that other

2253
02:15:08,439 --> 02:15:18,879
than weird like values I just don't know

2254
02:15:17,199 --> 02:15:22,409
and I think we've said it now I mean I

2255
02:15:18,880 --> 02:15:22,409
think we've said it so that that's not

2256
02:15:25,529 --> 02:15:31,779
occurring I want to do one more thing

2257
02:15:28,239 --> 02:15:34,029
now I'm gonna actually call that every

2258
02:15:31,779 --> 02:15:35,949
frame so I'm gonna go in here and I'm

2259
02:15:34,029 --> 02:15:38,649
gonna call set default behavior I'm

2260
02:15:35,949 --> 02:15:41,349
gonna call that every frame so inside

2261
02:15:38,649 --> 02:15:42,960
the lighting code I just I'm just

2262
02:15:41,350 --> 02:15:47,470
curious

2263
02:15:42,960 --> 02:15:49,779
because I don't know before we do this

2264
02:15:47,470 --> 02:15:52,079
in the update lighting call I'm just

2265
02:15:49,779 --> 02:16:00,819
gonna put it in here to like reset that

2266
02:15:52,079 --> 02:16:06,579
right and then I'm gonna let it run

2267
02:16:00,819 --> 02:16:09,069
again and look at that perf cuz again

2268
02:16:06,579 --> 02:16:11,559
I'm just not sure I mean for all I know

2269
02:16:09,069 --> 02:16:14,769
some driver jumps in and sets Rd normal

2270
02:16:11,560 --> 02:16:17,440
flushing off for some reason and I just

2271
02:16:14,770 --> 02:16:20,140
don't know right so I just want to find

2272
02:16:17,439 --> 02:16:22,389
out if I just want to be absolutely

2273
02:16:20,140 --> 02:16:24,280
positive that it's not D normals or

2274
02:16:22,390 --> 02:16:28,950
other types of overflow underflow

2275
02:16:24,279 --> 02:16:28,949
problems occurring there

2276
02:16:59,079 --> 02:17:05,170
so it's oddly not as bad but it seems to

2277
02:17:01,929 --> 02:17:06,460
still have hit the problem oh you know

2278
02:17:05,170 --> 02:17:09,790
what I just glanced the chat and someone

2279
02:17:06,459 --> 02:17:12,818
pointed out each thread can have this

2280
02:17:09,790 --> 02:17:15,429
problem because if the MX CR is saved

2281
02:17:12,818 --> 02:17:18,909
per core which you would expect it to be

2282
02:17:15,429 --> 02:17:23,920
doing in the OS you'd have to set it for

2283
02:17:18,909 --> 02:17:27,308
each one of those so actually we need to

2284
02:17:23,920 --> 02:17:30,370
make sure that's true for everybody so

2285
02:17:27,308 --> 02:17:34,409
basically the MX CR should have to get

2286
02:17:30,370 --> 02:17:40,229
set right at the code that actually

2287
02:17:34,409 --> 02:17:41,968
jumps in for compute work right platform

2288
02:17:40,228 --> 02:17:46,029
oops

2289
02:17:41,968 --> 02:17:47,709
work you call back so right here we

2290
02:17:46,030 --> 02:17:49,359
actually need to make sure that we're

2291
02:17:47,709 --> 02:17:54,009
flushing de normals to actually do this

2292
02:17:49,359 --> 02:17:55,840
test for Fairleigh right you know what I

2293
02:17:54,010 --> 02:17:56,859
bet that's totally it that's a very good

2294
02:17:55,840 --> 02:18:01,859
catch chat

2295
02:17:56,859 --> 02:18:05,859
whoever caught that xx the big Fox

2296
02:18:01,859 --> 02:18:08,079
totally right totally right I bet I bet

2297
02:18:05,859 --> 02:18:10,840
that's it I bet that's it it totally

2298
02:18:08,079 --> 02:18:13,539
fits the behavior profile about how it

2299
02:18:10,840 --> 02:18:16,058
wasn't going as high that's probably as

2300
02:18:13,540 --> 02:18:18,399
certain cores got their MXC are set

2301
02:18:16,058 --> 02:18:21,518
those cores dropped off of the slow path

2302
02:18:18,398 --> 02:18:30,129
and back onto the fast path absolutely I

2303
02:18:21,519 --> 02:18:33,189
think that's totally true so excellent

2304
02:18:30,129 --> 02:18:34,679
catch that's almost certainly the case I

2305
02:18:33,189 --> 02:18:39,179
mean we'll see

2306
02:18:34,679 --> 02:18:39,179
maybe not but pretty sure

2307
02:18:47,850 --> 02:19:00,109
[Music]

2308
02:18:56,478 --> 02:19:03,750
yes so that's that's it

2309
02:19:00,109 --> 02:19:07,109
okay so thankfully that's all now very

2310
02:19:03,750 --> 02:19:09,329
explicable it was in fact problems with

2311
02:19:07,109 --> 02:19:11,399
the normals which is what we'd expect so

2312
02:19:09,329 --> 02:19:15,388
that's great this puts us in a fantastic

2313
02:19:11,398 --> 02:19:17,699
position for next weekend because now we

2314
02:19:15,388 --> 02:19:20,369
should be able to start working on the

2315
02:19:17,700 --> 02:19:23,760
lighting quality transfer part of things

2316
02:19:20,370 --> 02:19:27,689
and get a good solution presumably out

2317
02:19:23,760 --> 02:19:29,960
of the grid ray caster as well so that's

2318
02:19:27,689 --> 02:19:29,960
great

2319
02:19:33,819 --> 02:19:40,899
awesome notice someone we check the

2320
02:19:38,889 --> 02:19:43,779
camera out the kit but we didn't need to

2321
02:19:40,899 --> 02:19:45,430
do that right before like we were able

2322
02:19:43,780 --> 02:19:48,310
to get it to repo with just the camera

2323
02:19:45,430 --> 02:19:51,750
sitting in one place so the camera is

2324
02:19:48,309 --> 02:19:51,750
not involved here

2325
02:20:15,431 --> 02:20:24,131
all right cool cool excellent catch chat

2326
02:20:20,101 --> 02:20:27,670
excellent excellent catch all right

2327
02:20:24,130 --> 02:20:30,959
let's go ahead and I guess we'll go to

2328
02:20:27,670 --> 02:20:30,960
brief brief Q&amp;A but

2329
02:20:56,950 --> 02:21:05,180
so no we don't really take too much of a

2330
02:21:00,889 --> 02:21:06,858
look at how so the question is I'm

2331
02:21:05,180 --> 02:21:08,239
building my first BBH from a ray tracer

2332
02:21:06,859 --> 02:21:10,550
to the previous episodes where you work

2333
02:21:08,239 --> 02:21:12,260
on the KD tree going to how to traverse

2334
02:21:10,549 --> 02:21:14,719
a tree using sim D without slamming your

2335
02:21:12,260 --> 02:21:18,170
face into the wall nose first no because

2336
02:21:14,719 --> 02:21:22,959
there isn't one really so the way that

2337
02:21:18,170 --> 02:21:25,068
that typically gets handled in the

2338
02:21:22,959 --> 02:21:34,459
performance oriented literature as far

2339
02:21:25,068 --> 02:21:37,519
as I know is all they do is try as hard

2340
02:21:34,459 --> 02:21:40,269
as possible to bundle rays together

2341
02:21:37,520 --> 02:21:44,290
which they think will need to traverse

2342
02:21:40,270 --> 02:21:47,600
roughly the same part of the BBH right

2343
02:21:44,290 --> 02:21:50,510
so basically like if you have a bounding

2344
02:21:47,600 --> 02:21:53,210
volume hierarchy what you generally know

2345
02:21:50,510 --> 02:21:55,520
is like look if I'm shooting Ray's in

2346
02:21:53,209 --> 02:21:57,889
sort of similar directions they probably

2347
02:21:55,520 --> 02:22:01,130
have to visit roughly the same set of

2348
02:21:57,889 --> 02:22:04,818
nodes so that should minimize the amount

2349
02:22:01,129 --> 02:22:07,849
of additional visitation that I do as I

2350
02:22:04,818 --> 02:22:12,949
go through the tree right that tends to

2351
02:22:07,850 --> 02:22:17,720
be what they do now more aggressive work

2352
02:22:12,950 --> 02:22:22,069
in this area can do slightly different

2353
02:22:17,719 --> 02:22:25,459
things but that's most of it right if

2354
02:22:22,068 --> 02:22:28,489
you have the luxury of using scatter

2355
02:22:25,459 --> 02:22:30,259
gather the other thing like as a VX has

2356
02:22:28,489 --> 02:22:34,090
scatter gather in it if you're using a

2357
02:22:30,260 --> 02:22:38,478
VX - I think cascade or gatherer in its

2358
02:22:34,090 --> 02:22:40,219
ATX 5/12 does I don't know if - it's the

2359
02:22:38,478 --> 02:22:41,449
Intel chips are so confusing as to what

2360
02:22:40,219 --> 02:22:44,059
they haven't don't have but if you have

2361
02:22:41,450 --> 02:22:45,740
the luxury of using scatter gather you

2362
02:22:44,059 --> 02:22:48,529
can also try to do things where you go

2363
02:22:45,739 --> 02:22:51,978
look I'm gonna load different bounding

2364
02:22:48,530 --> 02:22:55,970
volumes right into my different

2365
02:22:51,978 --> 02:22:57,709
registers you can do stuff like that

2366
02:22:55,969 --> 02:22:59,059
right you can make bounding volume

2367
02:22:57,709 --> 02:23:02,269
hierarchies where you're like well I

2368
02:22:59,059 --> 02:23:04,398
scatter gather different stuff so rather

2369
02:23:02,270 --> 02:23:07,100
than testing against you know testing

2370
02:23:04,398 --> 02:23:08,599
for Ray's against one volume you test

2371
02:23:07,100 --> 02:23:12,920
for Ray's against for vol

2372
02:23:08,600 --> 02:23:15,318
all of a sudden and that so each ray is

2373
02:23:12,920 --> 02:23:17,750
actually in a different node of the BVH

2374
02:23:15,318 --> 02:23:21,129
and then you're in a better position

2375
02:23:17,750 --> 02:23:24,049
because then you don't really care

2376
02:23:21,129 --> 02:23:27,139
whether or not all your Ray's are in the

2377
02:23:24,049 --> 02:23:30,049
same part of the BVH you care whether

2378
02:23:27,139 --> 02:23:33,079
all your rays have to visit roughly the

2379
02:23:30,049 --> 02:23:35,238
same number of nodes in the BVH and

2380
02:23:33,079 --> 02:23:40,930
that's an easier thing to work on

2381
02:23:35,238 --> 02:23:40,930
right so

2382
02:23:52,450 --> 02:24:01,431
can you explain more yd normals could

2383
02:23:55,579 --> 02:24:04,760
cause performance to degrade no I can't

2384
02:24:01,431 --> 02:24:07,521
I've never looked so I have no idea why

2385
02:24:04,760 --> 02:24:13,069
a chip designer would be able to tell

2386
02:24:07,521 --> 02:24:17,780
you my understanding is that in the

2387
02:24:13,069 --> 02:24:21,110
actual hardware when a D normal occurs

2388
02:24:17,780 --> 02:24:27,650
it actually gets shunted to a literally

2389
02:24:21,110 --> 02:24:29,021
slower Hardware path that's that's all I

2390
02:24:27,649 --> 02:24:37,489
know

2391
02:24:29,021 --> 02:24:41,630
so I don't really know why there I don't

2392
02:24:37,489 --> 02:24:46,489
really know why they actually cause

2393
02:24:41,629 --> 02:24:50,209
performance problems at the chip level

2394
02:24:46,489 --> 02:24:53,719
but you know you can sort of see why

2395
02:24:50,209 --> 02:24:55,609
because if all of your operations if you

2396
02:24:53,719 --> 02:24:58,430
designed this really fast hardware

2397
02:24:55,610 --> 02:25:02,690
that's based around processing things as

2398
02:24:58,431 --> 02:25:04,819
exponent mantissa all the time and all

2399
02:25:02,690 --> 02:25:09,790
of a sudden you get thrown this this

2400
02:25:04,819 --> 02:25:13,510
value that's like not that at all I mean

2401
02:25:09,790 --> 02:25:13,510
it makes sense right

2402
02:25:14,649 --> 02:25:21,949
the it makes sense that that becomes a

2403
02:25:18,200 --> 02:25:25,820
thing you have to that your ship is not

2404
02:25:21,950 --> 02:25:27,891
optimized for right because you can't

2405
02:25:25,819 --> 02:25:29,270
possibly do that operation as fast as

2406
02:25:27,890 --> 02:25:30,529
you were doing all the other operations

2407
02:25:29,271 --> 02:25:35,690
so now it's gonna shut there I don't

2408
02:25:30,530 --> 02:25:37,970
know actually why but it you know it's

2409
02:25:35,690 --> 02:25:40,579
at least intuitive that that would be

2410
02:25:37,969 --> 02:25:42,649
the case it doesn't run contrary to what

2411
02:25:40,579 --> 02:25:43,789
your thought process would be if you

2412
02:25:42,649 --> 02:25:47,510
didn't know anything about hardware

2413
02:25:43,790 --> 02:25:49,670
which I don't it makes sense right it's

2414
02:25:47,510 --> 02:25:50,989
just it's kind of logical it's a number

2415
02:25:49,670 --> 02:25:55,610
formatted into bits

2416
02:25:50,989 --> 02:25:58,840
totally differently than it is in every

2417
02:25:55,610 --> 02:26:01,851
other case and if generally speaking

2418
02:25:58,840 --> 02:26:04,851
most of your computations occurred with

2419
02:26:01,851 --> 02:26:06,620
D normal numbers then you could say

2420
02:26:04,851 --> 02:26:08,181
well probably we should have just

2421
02:26:06,620 --> 02:26:12,200
designed the hardware to be fast for de

2422
02:26:08,181 --> 02:26:13,131
normals and they should run at the same

2423
02:26:12,200 --> 02:26:15,320
speeds everything else and the other

2424
02:26:13,130 --> 02:26:16,671
things should slow down if necessary to

2425
02:26:15,319 --> 02:26:17,720
like be the same speed as you normals

2426
02:26:16,671 --> 02:26:19,729
because this is what we should I find

2427
02:26:17,720 --> 02:26:21,350
ship for but most of your computations

2428
02:26:19,729 --> 02:26:32,001
aren't D normal so that wouldn't make

2429
02:26:21,351 --> 02:26:34,909
much sense right the volatile portion

2430
02:26:32,001 --> 02:26:36,979
consists the six doses oh yes so flush

2431
02:26:34,909 --> 02:26:38,810
to zero once per thread should be enough

2432
02:26:36,979 --> 02:26:43,729
if the Kalon convention is obeyed but

2433
02:26:38,810 --> 02:26:45,560
you don't know that it is right like a

2434
02:26:43,729 --> 02:26:50,229
driver could just set that and forget to

2435
02:26:45,560 --> 02:26:50,229
unset it and then you'd be screwed right

2436
02:26:50,380 --> 02:26:55,390
you put the code back up where you set

2437
02:26:52,671 --> 02:26:55,390
the bits

2438
02:27:11,640 --> 02:27:19,810
we should probably set the rounding

2439
02:27:13,870 --> 02:27:21,011
control because we might as well now

2440
02:27:19,810 --> 02:27:22,390
that we're setting it set it to the

2441
02:27:21,011 --> 02:27:23,829
thing we know it should be rather than

2442
02:27:22,390 --> 02:27:28,890
relying it being on the default because

2443
02:27:23,829 --> 02:27:28,890
why bother but we're not doing that yet

2444
02:27:29,011 --> 02:27:33,370
would it be worth special casing the

2445
02:27:31,479 --> 02:27:39,340
occurrences when a ray runs parallel to

2446
02:27:33,370 --> 02:27:42,400
the grid of the walk table I don't see

2447
02:27:39,340 --> 02:27:45,390
why we would do that I'm not sure what

2448
02:27:42,399 --> 02:27:45,390
that would save

2449
02:28:12,470 --> 02:28:23,310
do you think GPUs would have the

2450
02:28:14,819 --> 02:28:25,590
denormalize issue gosh I mean that's so

2451
02:28:23,310 --> 02:28:26,340
far afield from what I work on I guess I

2452
02:28:25,590 --> 02:28:30,360
don't know

2453
02:28:26,340 --> 02:28:32,431
so certainly GPUs in the early days

2454
02:28:30,360 --> 02:28:35,159
would never have addy normal issue

2455
02:28:32,431 --> 02:28:37,730
because they just wouldn't have support

2456
02:28:35,159 --> 02:28:40,979
in the hardware 40 normals at all right

2457
02:28:37,729 --> 02:28:44,039
so I mean I'm pretty sure that the early

2458
02:28:40,979 --> 02:28:46,379
at least the early GPU Hardware would

2459
02:28:44,040 --> 02:28:47,940
just be like screw it you give me a D

2460
02:28:46,379 --> 02:28:53,220
normal interest you get whatever you get

2461
02:28:47,940 --> 02:28:55,800
man I don't think they would detect and

2462
02:28:53,220 --> 02:28:57,600
process D normals at all they probably

2463
02:28:55,799 --> 02:28:59,159
wouldn't even throw exceptions they

2464
02:28:57,601 --> 02:29:00,659
would just literally just do whatever

2465
02:28:59,159 --> 02:29:02,159
the bits would have come out if you

2466
02:29:00,659 --> 02:29:08,420
didn't think about D normals at all

2467
02:29:02,159 --> 02:29:11,521
right you just get that answer and so

2468
02:29:08,420 --> 02:29:13,079
the reason that I hesitate to say that's

2469
02:29:11,521 --> 02:29:16,681
what would happen today is because

2470
02:29:13,079 --> 02:29:21,229
nowadays GPUs to a large extent are

2471
02:29:16,681 --> 02:29:25,200
targeting scientific computing as a main

2472
02:29:21,229 --> 02:29:29,100
source of high-margin revenue like

2473
02:29:25,200 --> 02:29:31,440
nvidia loves to sell cards to you know

2474
02:29:29,101 --> 02:29:35,761
government entities doing nuclear

2475
02:29:31,440 --> 02:29:39,630
simulation or big data mining you know

2476
02:29:35,761 --> 02:29:42,511
whatever the heck and d normals were

2477
02:29:39,629 --> 02:29:44,220
specifically in there for the purposes

2478
02:29:42,511 --> 02:29:45,720
of getting more precise scientific

2479
02:29:44,220 --> 02:29:48,899
computations I mean that's the only

2480
02:29:45,720 --> 02:29:51,840
reason they exist in the first place so

2481
02:29:48,899 --> 02:29:53,729
I guess what I would say is I'm not

2482
02:29:51,840 --> 02:29:55,500
prepared to say that modern GPUs

2483
02:29:53,729 --> 02:29:59,579
wouldn't actually handle the normals

2484
02:29:55,500 --> 02:30:02,190
they might I would assume and it's

2485
02:29:59,579 --> 02:30:04,470
purely an assumption I'm just going on

2486
02:30:02,190 --> 02:30:07,980
and just I have no idea I can't answer

2487
02:30:04,470 --> 02:30:11,159
your question but if I had to guess at

2488
02:30:07,979 --> 02:30:13,140
the answer my guess would be that unless

2489
02:30:11,159 --> 02:30:17,450
you were specifically running like a

2490
02:30:13,140 --> 02:30:21,390
CUDA path or some other kind of

2491
02:30:17,450 --> 02:30:25,229
scientific computing path that the GPU

2492
02:30:21,390 --> 02:30:30,510
would be automatically configured by the

2493
02:30:25,228 --> 02:30:34,639
affix driver not to use de normals even

2494
02:30:30,510 --> 02:30:40,920
if the GPU can handle D normals that

2495
02:30:34,639 --> 02:30:42,719
would be my expectation because graphics

2496
02:30:40,920 --> 02:30:44,969
drivers are all about performance and

2497
02:30:42,719 --> 02:30:48,448
the last thing they would want to do is

2498
02:30:44,969 --> 02:30:51,389
by default give developers a way to make

2499
02:30:48,449 --> 02:30:54,510
them slow by accidentally passing to

2500
02:30:51,389 --> 02:30:57,269
smaller numbers right so my assumption

2501
02:30:54,510 --> 02:31:00,539
would be that specifically unless you

2502
02:30:57,270 --> 02:31:03,779
ask a GPU to do two normal conformant

2503
02:31:00,539 --> 02:31:12,329
operations they won't but I actually

2504
02:31:03,779 --> 02:31:15,720
don't know because I've never looked all

2505
02:31:12,328 --> 02:31:19,219
right last question I came from dave 523

2506
02:31:15,719 --> 02:31:28,349
and that's oh you're talking about the

2507
02:31:19,219 --> 02:31:30,538
joke intro to get so I don't know what

2508
02:31:28,350 --> 02:31:39,328
to say about stuff like that

2509
02:31:30,539 --> 02:31:46,140
I think git is just a pile of crap I

2510
02:31:39,328 --> 02:31:48,209
mean it's you know get is is not good

2511
02:31:46,139 --> 02:31:51,689
sorry folks

2512
02:31:48,209 --> 02:31:53,248
it's terrible right now that's not the

2513
02:31:51,689 --> 02:31:55,590
same as saying that some of the core

2514
02:31:53,248 --> 02:31:58,228
ideas and get her bad because you know

2515
02:31:55,590 --> 02:32:00,658
using hashes to identify files is not

2516
02:31:58,228 --> 02:32:07,408
necessarily a bad idea especially if you

2517
02:32:00,658 --> 02:32:09,840
use a better hash than get used having

2518
02:32:07,408 --> 02:32:13,818
peer-to-peer support in your source code

2519
02:32:09,840 --> 02:32:18,689
control system is not a bad idea right

2520
02:32:13,818 --> 02:32:22,139
so it's not that some of the ideas and

2521
02:32:18,689 --> 02:32:27,710
get weren't good the current incarnation

2522
02:32:22,139 --> 02:32:31,379
of git is is absolutely terrible and I

2523
02:32:27,709 --> 02:32:34,318
don't actually know why any sane

2524
02:32:31,379 --> 02:32:37,198
programmer wouldn't agree with that they

2525
02:32:34,318 --> 02:32:38,920
obviously don't because tons of people

2526
02:32:37,199 --> 02:32:42,750
like defend it and tell you

2527
02:32:38,920 --> 02:32:45,670
to use it but git is absolutely horrible

2528
02:32:42,750 --> 02:32:48,728
it is not a good source code control

2529
02:32:45,670 --> 02:32:50,200
system it is dramatically over

2530
02:32:48,728 --> 02:32:53,139
complicated for what it does

2531
02:32:50,200 --> 02:32:54,130
the default things it does are usually

2532
02:32:53,139 --> 02:32:56,590
not what you want

2533
02:32:54,129 --> 02:32:58,329
it requires way too much specialized

2534
02:32:56,590 --> 02:33:00,700
knowledge of how it works

2535
02:32:58,329 --> 02:33:04,809
to be effective with it it's just very

2536
02:33:00,700 --> 02:33:06,159
bad so it should absolutely never have

2537
02:33:04,809 --> 02:33:10,689
been the standard source code control

2538
02:33:06,159 --> 02:33:12,520
utility but a lot of things I just said

2539
02:33:10,689 --> 02:33:13,930
can be said about a lot of source code

2540
02:33:12,520 --> 02:33:17,950
control utilities they tend to be pretty

2541
02:33:13,930 --> 02:33:20,530
bad so at the same time it's like it's

2542
02:33:17,950 --> 02:33:21,850
not like there was some amazing source

2543
02:33:20,530 --> 02:33:26,979
code control utility that people just

2544
02:33:21,850 --> 02:33:28,780
didn't use because git was there so you

2545
02:33:26,978 --> 02:33:31,478
could think of the standardization of

2546
02:33:28,780 --> 02:33:34,060
git being people picking an incredibly

2547
02:33:31,478 --> 02:33:38,379
bad option from a field of incredibly

2548
02:33:34,059 --> 02:33:43,629
bad options and at that point you know

2549
02:33:38,379 --> 02:33:45,219
what are you gonna say and your the

2550
02:33:43,629 --> 02:33:47,769
thing you say is is linus torvalds not a

2551
02:33:45,219 --> 02:33:50,789
good programmer as well about no linus

2552
02:33:47,770 --> 02:33:53,710
torvalds didn't write most of git

2553
02:33:50,790 --> 02:33:57,490
probably the initial simple thing that

2554
02:33:53,709 --> 02:33:59,259
that that leanest Torvalds wrote was

2555
02:33:57,489 --> 02:34:01,978
probably good because things Charles is

2556
02:33:59,260 --> 02:34:03,850
a good programmer in my opinion

2557
02:34:01,978 --> 02:34:07,899
obviously that's just a matter of

2558
02:34:03,850 --> 02:34:11,920
opinion but like I think he is but get

2559
02:34:07,899 --> 02:34:14,649
today is nothing like that there are so

2560
02:34:11,920 --> 02:34:16,450
many lines of code and get in a standard

2561
02:34:14,649 --> 02:34:18,069
distribution of get right now that

2562
02:34:16,450 --> 02:34:22,540
leanest our wallets hasn't even read

2563
02:34:18,069 --> 02:34:25,659
them let alone did he write them so git

2564
02:34:22,540 --> 02:34:30,880
is nothing like what he wrote originally

2565
02:34:25,659 --> 02:34:36,850
it's not even you know 10% leanness it's

2566
02:34:30,879 --> 02:34:38,409
like 0.1% leanness and 99.9% a bunch of

2567
02:34:36,850 --> 02:34:42,489
really crappy programmers who like piled

2568
02:34:38,409 --> 02:34:44,799
on top afterwards right I mean for that

2569
02:34:42,489 --> 02:34:48,010
matter so is the Linux kernel right like

2570
02:34:44,799 --> 02:34:50,319
if the Linux kernel sucks and I'm not

2571
02:34:48,010 --> 02:34:51,469
saying that it does but if it did it's

2572
02:34:50,319 --> 02:34:53,000
not

2573
02:34:51,469 --> 02:34:55,488
because leanest revolt is a bad

2574
02:34:53,000 --> 02:34:59,450
programmer that is those things do not

2575
02:34:55,488 --> 02:35:01,549
follow even a little bit right because

2576
02:34:59,450 --> 02:35:04,220
you're talking both get and the Linux

2577
02:35:01,549 --> 02:35:09,009
kernel are many millions of lines of

2578
02:35:04,219 --> 02:35:09,010
code and he didn't write them

2579
02:35:21,310 --> 02:35:25,360
anyway so that's my opinion on get

2580
02:35:25,659 --> 02:35:37,729
endless troubles who I think is very

2581
02:35:28,640 --> 02:35:40,969
good programmer personally I don't know

2582
02:35:37,729 --> 02:35:42,799
how you pronounce his name but my

2583
02:35:40,969 --> 02:35:48,319
understanding is it would be like Lennox

2584
02:35:42,799 --> 02:35:51,619
and leanness as close possibly not Linus

2585
02:35:48,319 --> 02:35:57,049
I feel like Linus is more of an American

2586
02:35:51,620 --> 02:36:03,141
pronunciation so it's more likely than

2587
02:35:57,049 --> 02:36:07,659
lie but I don't know any northern

2588
02:36:03,140 --> 02:36:07,659
European languages at all let alone

2589
02:36:09,280 --> 02:36:17,480
finish let's say or I don't know what

2590
02:36:15,979 --> 02:36:22,159
the correct pronunciation would be let's

2591
02:36:17,479 --> 02:36:26,420
put it that way so I guess what I would

2592
02:36:22,159 --> 02:36:29,649
say is go listen to him pronounce it and

2593
02:36:26,420 --> 02:36:29,649
that's how you pronounce it

2594
02:36:51,590 --> 02:36:57,648
more Swedish than finished like I said I

2595
02:36:53,959 --> 02:36:59,179
don't know I really don't know because

2596
02:36:57,648 --> 02:37:00,648
again just because someone's from a

2597
02:36:59,180 --> 02:37:03,889
particular country doesn't mean their

2598
02:37:00,648 --> 02:37:06,409
name is actually that right for example

2599
02:37:03,889 --> 02:37:10,430
my parents are both Italian my first

2600
02:37:06,409 --> 02:37:14,510
name is Irish right so the pronunciation

2601
02:37:10,430 --> 02:37:17,600
of Casey has nothing to do with where I

2602
02:37:14,510 --> 02:37:19,760
was born or who my parents were or what

2603
02:37:17,600 --> 02:37:24,409
their native language was or what their

2604
02:37:19,760 --> 02:37:27,800
ethnicity even was so you know how you

2605
02:37:24,409 --> 02:37:30,200
pronounce someone's name is difficult to

2606
02:37:27,799 --> 02:37:32,659
say I have no idea how you're supposed

2607
02:37:30,200 --> 02:37:35,090
to pronounce leanness I just pretty sure

2608
02:37:32,659 --> 02:37:37,609
it's not Linus is I guess the only thing

2609
02:37:35,090 --> 02:37:39,409
I can say because that's a pretty

2610
02:37:37,609 --> 02:37:42,620
specific pronunciation of that name that

2611
02:37:39,409 --> 02:37:44,478
I don't think would apply any where he's

2612
02:37:42,620 --> 02:37:45,920
from or where his parents were from I

2613
02:37:44,478 --> 02:37:49,179
just don't think you would ever say

2614
02:37:45,920 --> 02:37:49,180
Linus I could be wrong though

2615
02:38:02,529 --> 02:38:08,149
alright let's wrap it up and my goodness

2616
02:38:06,379 --> 02:38:10,369
I didn't realize anyone could actually

2617
02:38:08,148 --> 02:38:13,009
watch that video that I did about get

2618
02:38:10,369 --> 02:38:14,810
and not know that it wasn't fake but the

2619
02:38:13,009 --> 02:38:16,520
fact that you didn't know it wasn't fake

2620
02:38:14,809 --> 02:38:18,648
is a pretty good indication of why I

2621
02:38:16,520 --> 02:38:20,029
think it's pretty definitive to say that

2622
02:38:18,648 --> 02:38:23,389
git is not a good source to a control

2623
02:38:20,029 --> 02:38:25,549
system the fact that that is sort of

2624
02:38:23,389 --> 02:38:28,248
what it feels like to use git is just a

2625
02:38:25,549 --> 02:38:30,289
really good example of why this is not

2626
02:38:28,248 --> 02:38:31,789
really what you want and the reason that

2627
02:38:30,289 --> 02:38:34,640
I say that is because it's very

2628
02:38:31,789 --> 02:38:36,709
important to understand one very crucial

2629
02:38:34,639 --> 02:38:41,418
feature of source code control systems

2630
02:38:36,709 --> 02:38:43,969
and that is that anytime literally any

2631
02:38:41,418 --> 02:38:45,828
time that you spend interacting with

2632
02:38:43,968 --> 02:38:48,318
your source code control system is time

2633
02:38:45,828 --> 02:38:55,038
you aren't spending programming that

2634
02:38:48,318 --> 02:38:58,548
means that everything everything 100% of

2635
02:38:55,039 --> 02:39:01,459
the time that you spend learning a

2636
02:38:58,549 --> 02:39:04,959
source code control system and using a

2637
02:39:01,459 --> 02:39:09,079
source code control system is wasted

2638
02:39:04,959 --> 02:39:12,529
period so the entire job of a source

2639
02:39:09,078 --> 02:39:14,978
code control system author interface

2640
02:39:12,529 --> 02:39:18,498
designer whatever you want to call it is

2641
02:39:14,978 --> 02:39:21,078
to figure out how to create the most

2642
02:39:18,498 --> 02:39:24,199
amount of useful source code control

2643
02:39:21,078 --> 02:39:27,309
operations out of the simplest possible

2644
02:39:24,199 --> 02:39:30,350
amount of user work and education and

2645
02:39:27,309 --> 02:39:33,528
there's like no question that get

2646
02:39:30,350 --> 02:39:36,408
absolutely failed at that because not

2647
02:39:33,529 --> 02:39:37,789
only can it not do most things so most

2648
02:39:36,408 --> 02:39:39,618
of the things you would want a source

2649
02:39:37,789 --> 02:39:45,979
code control system to do such as for

2650
02:39:39,619 --> 02:39:49,489
example only store large binary older

2651
02:39:45,978 --> 02:39:51,318
versions on specific machines that's a

2652
02:39:49,488 --> 02:39:53,270
very obvious as a first thing I put in

2653
02:39:51,318 --> 02:39:56,568
my source code control system for

2654
02:39:53,270 --> 02:39:58,699
example get can't even do you have to

2655
02:39:56,568 --> 02:40:01,458
start using these new updates to it

2656
02:39:58,699 --> 02:40:03,588
called large file system awareness

2657
02:40:01,459 --> 02:40:05,179
there's all this crap people have added

2658
02:40:03,588 --> 02:40:07,539
only in the last few years to do that

2659
02:40:05,179 --> 02:40:11,539
it's not even part of the system right

2660
02:40:07,539 --> 02:40:14,390
so git has a very narrow set of things

2661
02:40:11,539 --> 02:40:15,140
that can actually do they mostly relate

2662
02:40:14,389 --> 02:40:19,250
to

2663
02:40:15,139 --> 02:40:21,019
basically creating lots of different in

2664
02:40:19,250 --> 02:40:22,430
place hash versions of things and

2665
02:40:21,020 --> 02:40:24,979
sending those around between different

2666
02:40:22,430 --> 02:40:29,540
people that's like almost all it can do

2667
02:40:24,978 --> 02:40:31,068
and yet the syntax and the amount of

2668
02:40:29,540 --> 02:40:33,380
Education you need to actually

2669
02:40:31,068 --> 02:40:36,439
understand what is happening in it its

2670
02:40:33,379 --> 02:40:41,839
output and how to fix or diagnose

2671
02:40:36,439 --> 02:40:44,020
problems is tremendous most people have

2672
02:40:41,840 --> 02:40:46,609
no idea how to use most things and get

2673
02:40:44,020 --> 02:40:48,319
most people can easily create errors

2674
02:40:46,609 --> 02:40:51,380
when they're using it and not really

2675
02:40:48,318 --> 02:40:53,119
understand why it's a terrible source

2676
02:40:51,379 --> 02:40:56,389
code control system I'm sorry it just it

2677
02:40:53,120 --> 02:40:59,449
is objectively on any access you want to

2678
02:40:56,389 --> 02:41:01,549
measure it it's really really bad the

2679
02:40:59,449 --> 02:41:03,170
only access you could say it succeeds on

2680
02:41:01,549 --> 02:41:06,170
is obviously its ability to work

2681
02:41:03,170 --> 02:41:08,329
distributed is good because it allowed

2682
02:41:06,170 --> 02:41:12,290
people to do that and that was a pretty

2683
02:41:08,329 --> 02:41:14,420
good improvement there was worth making

2684
02:41:12,290 --> 02:41:16,880
but it's not good it's not a good

2685
02:41:14,420 --> 02:41:21,309
implementation of that it's a bad

2686
02:41:16,879 --> 02:41:21,309
implementation of that right

2687
02:41:30,449 --> 02:41:34,029
so no and I also disagree if you say

2688
02:41:32,920 --> 02:41:35,379
it's not wasteful if your job is to

2689
02:41:34,029 --> 02:41:36,819
integrate patches from hundreds of

2690
02:41:35,379 --> 02:41:38,498
branches from thousand developers day in

2691
02:41:36,818 --> 02:41:41,549
and day out no that's false

2692
02:41:38,498 --> 02:41:43,869
right the job is integrating the patches

2693
02:41:41,549 --> 02:41:47,559
not working with the source code control

2694
02:41:43,869 --> 02:41:49,869
system right so the idea there is it

2695
02:41:47,559 --> 02:41:51,788
should have been the most you you're

2696
02:41:49,869 --> 02:41:54,399
trying to design a system where the

2697
02:41:51,789 --> 02:41:56,979
programmer does the least amount of work

2698
02:41:54,398 --> 02:42:04,090
to review and commit the correct set of

2699
02:41:56,978 --> 02:42:06,188
branches into their project right if any

2700
02:42:04,090 --> 02:42:07,988
work that you're doing in that system

2701
02:42:06,189 --> 02:42:10,960
that involves you interacting the source

2702
02:42:07,988 --> 02:42:12,010
code show system is wasted ideally you

2703
02:42:10,959 --> 02:42:14,139
wouldn't do it at all

2704
02:42:12,010 --> 02:42:16,748
you'd just be presented with changes and

2705
02:42:14,139 --> 02:42:19,299
you'd approve or deny them right that'd

2706
02:42:16,748 --> 02:42:21,340
be the best possible outcome it would

2707
02:42:19,299 --> 02:42:22,868
just be directly in your editor and

2708
02:42:21,340 --> 02:42:23,859
that's what would happen and you'd never

2709
02:42:22,869 --> 02:42:26,140
even know there was a source code

2710
02:42:23,859 --> 02:42:27,939
control system right you just be like

2711
02:42:26,139 --> 02:42:29,889
here's a change from Bob do you like

2712
02:42:27,939 --> 02:42:32,470
that or not and I'd be like mmm I don't

2713
02:42:29,889 --> 02:42:37,238
know let me build it okay and now I

2714
02:42:32,469 --> 02:42:41,639
don't deny right and I never even I'd

2715
02:42:37,238 --> 02:42:41,639
never have to learn anything right I

2716
02:42:42,180 --> 02:42:45,729
mean that's that's what you would want

2717
02:42:44,170 --> 02:42:48,520
you would want a system where you never

2718
02:42:45,728 --> 02:42:52,118
even knew that there was source code

2719
02:42:48,520 --> 02:42:54,609
control right the less you even ever

2720
02:42:52,119 --> 02:42:59,109
were aware that there was source code

2721
02:42:54,609 --> 02:43:00,460
control the better and anytime you're

2722
02:42:59,109 --> 02:43:02,380
thinking about source code control as

2723
02:43:00,459 --> 02:43:04,538
part of your job that's just a failure

2724
02:43:02,379 --> 02:43:05,379
of the system I mean that's pretty much

2725
02:43:04,539 --> 02:43:08,590
all you can say

2726
02:43:05,379 --> 02:43:10,209
right and it's not to say that we had

2727
02:43:08,590 --> 02:43:13,988
better system that's why I say like get

2728
02:43:10,209 --> 02:43:15,429
if you evaluate it against other source

2729
02:43:13,988 --> 02:43:16,809
code so it's not necessarily terrible

2730
02:43:15,430 --> 02:43:18,248
because there's lots of bad source code

2731
02:43:16,809 --> 02:43:20,528
control stems there early isn't like

2732
02:43:18,248 --> 02:43:23,859
some amazingly fantastic source code

2733
02:43:20,529 --> 02:43:27,880
control system out there but like it's

2734
02:43:23,859 --> 02:43:30,369
not good you know it's not it's not a

2735
02:43:27,879 --> 02:43:32,019
good thing that you have to spend all

2736
02:43:30,369 --> 02:43:35,069
this time typing in all these esoteric

2737
02:43:32,020 --> 02:43:37,359
git commands that's that's just not

2738
02:43:35,068 --> 02:43:39,488
something to be proud of right like it's

2739
02:43:37,359 --> 02:43:40,720
like no this is terrible we really want

2740
02:43:39,488 --> 02:43:49,930
something much better than this

2741
02:43:40,719 --> 02:43:52,148
right I mean that's just if you really

2742
02:43:49,930 --> 02:43:55,470
want an example of how bad get was you

2743
02:43:52,148 --> 02:44:00,159
know I've used it like once or twice

2744
02:43:55,469 --> 02:44:02,639
total I mean unless you count typing git

2745
02:44:00,159 --> 02:44:07,840
clone to get things occasionally right

2746
02:44:02,639 --> 02:44:09,909
but like you know we were at Allen's

2747
02:44:07,840 --> 02:44:14,469
house you me and Alan were at his place

2748
02:44:09,909 --> 02:44:16,000
working on for coder together right and

2749
02:44:14,469 --> 02:44:17,978
I wanted to do an incredibly simple

2750
02:44:16,000 --> 02:44:19,450
operation I just wanted I don't remember

2751
02:44:17,978 --> 02:44:21,909
exactly what it was it was like I just

2752
02:44:19,450 --> 02:44:23,470
wanted to get like the thing that Alan

2753
02:44:21,909 --> 02:44:25,750
had done and I wanted to transfer it

2754
02:44:23,469 --> 02:44:27,608
into my thing or something right and we

2755
02:44:25,750 --> 02:44:28,898
had even we had get experts on the

2756
02:44:27,609 --> 02:44:30,640
stream and they were like yeah you can't

2757
02:44:28,898 --> 02:44:32,379
you can't do this thing you wanted to do

2758
02:44:30,639 --> 02:44:34,148
it was like incredibly simple I don't

2759
02:44:32,379 --> 02:44:36,309
remember what it was was like super

2760
02:44:34,148 --> 02:44:40,028
super simple but look it can't do it you

2761
02:44:36,309 --> 02:44:41,439
had to go through like these oh one

2762
02:44:40,029 --> 02:44:44,290
thing I could have done was installed a

2763
02:44:41,439 --> 02:44:47,738
good extension to do it though it's

2764
02:44:44,290 --> 02:44:49,950
amazing right and you're just like come

2765
02:44:47,738 --> 02:44:53,318
on yeah this is a joke

2766
02:44:49,950 --> 02:44:55,540
it is not good it's it's it's really

2767
02:44:53,318 --> 02:44:57,269
quite poor it's it's not a good

2768
02:44:55,540 --> 02:45:02,380
abstraction over the set of things that

2769
02:44:57,270 --> 02:45:04,260
a version file system can do let's just

2770
02:45:02,379 --> 02:45:06,219
get over it it's not good

2771
02:45:04,260 --> 02:45:07,809
there'll be something ten times better

2772
02:45:06,219 --> 02:45:10,389
than get some day there just will be

2773
02:45:07,809 --> 02:45:14,189
like it's not it's not good for what it

2774
02:45:10,389 --> 02:45:14,189
does it's it's quite poor

2775
02:45:18,079 --> 02:45:24,090
which we Chester's I use a we have a

2776
02:45:20,520 --> 02:45:30,450
custom one at my Rockets called seamer

2777
02:45:24,090 --> 02:45:33,389
it's not great I kind of have plans for

2778
02:45:30,450 --> 02:45:34,620
a great one that you know is sort of the

2779
02:45:33,389 --> 02:45:36,930
next incarnation of it

2780
02:45:34,620 --> 02:45:39,270
see mirrors like the second incarnation

2781
02:45:36,930 --> 02:45:42,030
there was a see mirror one this kind of

2782
02:45:39,270 --> 02:45:45,899
crappy Samara 2 is actually pretty good

2783
02:45:42,030 --> 02:45:48,540
but I learned a lot about what is

2784
02:45:45,899 --> 02:45:52,409
possible with source code control in C

2785
02:45:48,540 --> 02:45:53,640
Mira - and I realized some really

2786
02:45:52,409 --> 02:45:56,760
important things about it and I was like

2787
02:45:53,639 --> 02:45:58,769
Oh duh there's all these things we're

2788
02:45:56,760 --> 02:46:00,540
not doing starts to review easily do and

2789
02:45:58,770 --> 02:46:01,950
I did some of them and see mirror - but

2790
02:46:00,540 --> 02:46:06,810
now that I know what they all are

2791
02:46:01,950 --> 02:46:08,670
I think see Mira 3 will be probably when

2792
02:46:06,809 --> 02:46:11,189
I'm capable of saying okay this is now

2793
02:46:08,670 --> 02:46:14,610
actually great SEMA or two is not great

2794
02:46:11,189 --> 02:46:19,069
it's like good but bad at some things

2795
02:46:14,610 --> 02:46:22,220
for no reason so I think seamer three

2796
02:46:19,069 --> 02:46:22,219
you know

2797
02:46:25,870 --> 02:46:28,650
all right

2798
02:46:34,409 --> 02:46:38,510
all right that's it I'm gonna call it

2799
02:46:42,140 --> 02:46:47,940
too many windows open hey everybody

2800
02:46:46,860 --> 02:46:48,780
thank you for joining me for the episode

2801
02:46:47,940 --> 02:46:50,909
of hand made here it's my pleasure

2802
02:46:48,780 --> 02:46:52,230
coding with you as always if you would

2803
02:46:50,909 --> 02:46:54,719
like to follow along series at home you

2804
02:46:52,229 --> 02:46:56,909
can always head on over to hand made

2805
02:46:54,719 --> 02:46:58,890
here org and pier to the game it comes

2806
02:46:56,909 --> 02:47:02,250
to the source code so you can follow

2807
02:46:58,890 --> 02:47:06,469
along with it at home we're all done

2808
02:47:02,250 --> 02:47:08,940
with the main raycasting debug process

2809
02:47:06,469 --> 02:47:12,569
because I think we've kind of gotten it

2810
02:47:08,940 --> 02:47:14,550
working fairly well now and so now what

2811
02:47:12,569 --> 02:47:16,590
we have to do is actually go work on the

2812
02:47:14,549 --> 02:47:18,299
lighting transfer stuff which we may

2813
02:47:16,590 --> 02:47:22,140
have some bugs that we introduced in the

2814
02:47:18,299 --> 02:47:25,049
latest round but even if we don't have

2815
02:47:22,140 --> 02:47:26,459
bugs there we also know that we never

2816
02:47:25,049 --> 02:47:28,259
really did the lighting quality pass

2817
02:47:26,459 --> 02:47:31,140
that we needed to do so starting next

2818
02:47:28,260 --> 02:47:34,680
week will probably head into that where

2819
02:47:31,140 --> 02:47:36,569
we just start to look at really what

2820
02:47:34,680 --> 02:47:39,271
what are we transferring around four

2821
02:47:36,569 --> 02:47:41,940
fundamental quantities how are we

2822
02:47:39,271 --> 02:47:43,320
transferring them and how do we make

2823
02:47:41,940 --> 02:47:46,500
sure that they start stay properly

2824
02:47:43,319 --> 02:47:48,360
unbiased so we don't get fade to white

2825
02:47:46,500 --> 02:47:49,469
or fade to black which are the two

2826
02:47:48,360 --> 02:47:51,141
things that happen when you've got a

2827
02:47:49,469 --> 02:47:54,569
feedback loop in the lighting right

2828
02:47:51,140 --> 02:47:55,739
that's it for today hope see you back

2829
02:47:54,569 --> 02:47:57,601
here next week till then have fun

2830
02:47:55,739 --> 02:47:58,949
program everyone and I'll see you on the

2831
02:47:57,601 --> 02:48:01,950
Internet I'm gonna check to see if

2832
02:47:58,950 --> 02:48:06,300
John's still streaming and if he is we

2833
02:48:01,950 --> 02:48:10,550
will go ahead and raid so don't touch

2834
02:48:06,299 --> 02:48:15,679
that don't touch that dial or whatever

2835
02:48:10,549 --> 02:48:15,679
let's see is John still on

2836
02:48:17,859 --> 02:48:28,390
you see on tell me if John is streaming

2837
02:48:22,770 --> 02:48:31,899
mr. raid system yes he is so we're gonna

2838
02:48:28,389 --> 02:48:33,549
head over and and raid John's channel I

2839
02:48:31,898 --> 02:48:36,248
don't know what he's doing right now but

2840
02:48:33,549 --> 02:48:48,389
it's probably something cool so here we

2841
02:48:36,248 --> 02:48:48,389
go all right folks here we go

