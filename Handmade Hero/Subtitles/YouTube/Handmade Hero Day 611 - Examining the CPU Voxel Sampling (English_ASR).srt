1
00:00:00,000 --> 00:00:03,750
hello everybody and welcome to hand made

2
00:00:02,009 --> 00:00:07,649
here oh sure we could complete game live

3
00:00:03,750 --> 00:00:10,949
on stream so a couple things we want to

4
00:00:07,649 --> 00:00:14,129
do today we'll see what we have time to

5
00:00:10,949 --> 00:00:17,070
get to but if you remember where we left

6
00:00:14,130 --> 00:00:18,570
off last weekend we had done I think we

7
00:00:17,070 --> 00:00:21,320
can give ourselves a little pat on the

8
00:00:18,570 --> 00:00:24,179
back for doing a bunch of good debugging

9
00:00:21,320 --> 00:00:26,579
on the lighting system and I think we're

10
00:00:24,179 --> 00:00:29,339
now ready to start pushing it forwards a

11
00:00:26,579 --> 00:00:32,189
little bit and and starting to do some

12
00:00:29,339 --> 00:00:33,750
more interesting stuff our goal is to

13
00:00:32,189 --> 00:00:36,170
just get delighting to a point where

14
00:00:33,750 --> 00:00:39,869
we're happy enough with the performance

15
00:00:36,170 --> 00:00:42,030
and happy enough with the look to move

16
00:00:39,869 --> 00:00:47,038
on and one of the things if i zoom out

17
00:00:42,030 --> 00:00:49,760
right now you can see is I'm like I'm

18
00:00:47,039 --> 00:00:53,640
really happy with how this is converging

19
00:00:49,759 --> 00:00:56,609
there's a couple things about it that I

20
00:00:53,640 --> 00:00:58,980
think we need to improve in terms of the

21
00:00:56,609 --> 00:01:01,229
backend side of things certainly the

22
00:00:58,979 --> 00:01:02,819
sampling we want to blur across the

23
00:01:01,229 --> 00:01:06,450
voxels a little bit better so we have

24
00:01:02,820 --> 00:01:10,200
less query interpolation on the lighting

25
00:01:06,450 --> 00:01:11,579
I think that's a performance concern

26
00:01:10,200 --> 00:01:12,930
meaning we'll have to do some work to

27
00:01:11,579 --> 00:01:16,109
make sure that doesn't hang the

28
00:01:12,930 --> 00:01:17,520
performance but it's not really to worry

29
00:01:16,109 --> 00:01:19,859
some like it's not like I'm like huh

30
00:01:17,519 --> 00:01:21,688
what would that look like right so we I

31
00:01:19,859 --> 00:01:25,170
think that'll be pretty easy for us to

32
00:01:21,688 --> 00:01:27,899
deal with and then the other thing is in

33
00:01:25,170 --> 00:01:29,460
terms of reducing the sampling noise may

34
00:01:27,900 --> 00:01:32,009
be getting some less flicker in there

35
00:01:29,459 --> 00:01:34,319
those are really the two quality issues

36
00:01:32,009 --> 00:01:35,700
there's not a lot more or honestly on

37
00:01:34,319 --> 00:01:38,188
the quality side of things it's it's

38
00:01:35,700 --> 00:01:39,630
looking surprisingly good for completely

39
00:01:38,188 --> 00:01:42,478
dynamic lighting no pre-computation

40
00:01:39,629 --> 00:01:45,209
whatsoever here and that's pretty

41
00:01:42,478 --> 00:01:48,118
unusual actually so I'm pretty happy

42
00:01:45,209 --> 00:01:51,078
with how that's turning out and so I

43
00:01:48,118 --> 00:01:54,840
think we want to do those certainly but

44
00:01:51,078 --> 00:01:56,489
what I'd like to do first is refocus on

45
00:01:54,840 --> 00:01:58,530
performance a little bit now that we've

46
00:01:56,489 --> 00:02:01,379
gotten the bugs worked out I want to

47
00:01:58,530 --> 00:02:04,049
flip back over to our standalone

48
00:02:01,379 --> 00:02:07,319
performance tool and really turn the

49
00:02:04,049 --> 00:02:08,849
screw a little bit on the cube tracer

50
00:02:07,319 --> 00:02:11,038
because now that I'm pretty confident

51
00:02:08,848 --> 00:02:13,139
that it's what I want there's a couple

52
00:02:11,038 --> 00:02:13,719
things I want to do to try to get its

53
00:02:13,139 --> 00:02:17,049
performance

54
00:02:13,719 --> 00:02:19,120
significantly higher and that'll let us

55
00:02:17,050 --> 00:02:20,830
do two things one it alert it led us

56
00:02:19,120 --> 00:02:22,930
target 60 frames a second on high-end

57
00:02:20,830 --> 00:02:26,980
machines even with lighting in software

58
00:02:22,930 --> 00:02:28,599
completely no GPU assist and the other

59
00:02:26,979 --> 00:02:30,909
thing that I think it will do for us is

60
00:02:28,599 --> 00:02:32,979
if we would like to we can also do

61
00:02:30,909 --> 00:02:34,599
another thing which is targeting 30

62
00:02:32,979 --> 00:02:37,179
frames a second which much with much

63
00:02:34,599 --> 00:02:39,489
higher quality lighting because we could

64
00:02:37,180 --> 00:02:42,819
double the number of rays per frame if

65
00:02:39,490 --> 00:02:45,159
we wanted to right so we have a lot of

66
00:02:42,819 --> 00:02:46,509
options there but regardless of what we

67
00:02:45,159 --> 00:02:50,709
choose to do with it

68
00:02:46,509 --> 00:02:52,929
there's never you never don't just want

69
00:02:50,709 --> 00:03:00,189
faster performance from the Ray caster

70
00:02:52,930 --> 00:03:02,560
right so what I'd like to do here is

71
00:03:00,189 --> 00:03:06,250
just start taking a look at that so

72
00:03:02,560 --> 00:03:07,840
let's take a look at the stuff we have

73
00:03:06,250 --> 00:03:10,209
set up for that and what I'm going to be

74
00:03:07,840 --> 00:03:12,039
using mostly for this is our HH Lite

75
00:03:10,209 --> 00:03:15,670
prof that we've made and so what I

76
00:03:12,039 --> 00:03:16,750
really want to do today is now that

77
00:03:15,669 --> 00:03:18,759
we've done a bunch of work on the

78
00:03:16,750 --> 00:03:21,639
lighting system to kind of extract out

79
00:03:18,759 --> 00:03:24,879
the eye you know we can switch between

80
00:03:21,639 --> 00:03:27,729
the a a B and the regular I'd like to do

81
00:03:24,879 --> 00:03:30,789
a fresh capture of a particular lighting

82
00:03:27,729 --> 00:03:32,500
environment into HH light prof and then

83
00:03:30,789 --> 00:03:34,120
I'd like to run the profiler on it and

84
00:03:32,500 --> 00:03:36,219
that'll require a little bit of work

85
00:03:34,120 --> 00:03:37,870
because we changed how we're storing

86
00:03:36,219 --> 00:03:41,229
things so we just need to change how

87
00:03:37,870 --> 00:03:44,400
we're dumping them as well so if you

88
00:03:41,229 --> 00:03:50,349
take a look at the update lighting call

89
00:03:44,400 --> 00:03:51,939
what I want to do see here so what I

90
00:03:50,349 --> 00:03:53,769
want to do is if you take a look at the

91
00:03:51,939 --> 00:03:56,109
update lighting column you can kind of

92
00:03:53,769 --> 00:03:58,000
see how we come through here and we do a

93
00:03:56,110 --> 00:03:59,590
bunch of work to like you know do the

94
00:03:58,000 --> 00:04:02,799
build diffuse lighting maps and all this

95
00:03:59,590 --> 00:04:05,890
sort of stuff and and all that lining up

96
00:04:02,799 --> 00:04:07,900
the voxels we do all this stuff and then

97
00:04:05,889 --> 00:04:10,298
we call internal lighting core an

98
00:04:07,900 --> 00:04:13,090
internal ending core is the thing that

99
00:04:10,299 --> 00:04:15,040
does all of the work and so what I'd

100
00:04:13,090 --> 00:04:17,259
like to do here is I'd like to take

101
00:04:15,039 --> 00:04:22,329
internal lighting core and I'd like to

102
00:04:17,259 --> 00:04:24,370
make that be runnable again outside in

103
00:04:22,329 --> 00:04:26,029
HH light profs so here's internal

104
00:04:24,370 --> 00:04:29,899
lighting core here

105
00:04:26,029 --> 00:04:32,359
and what you can see is we pass all the

106
00:04:29,899 --> 00:04:34,810
same stuff to it here right you can see

107
00:04:32,360 --> 00:04:38,090
here we've got basically the same thing

108
00:04:34,810 --> 00:04:39,740
but we don't have the occluder and

109
00:04:38,089 --> 00:04:41,509
occluder account thing like if we

110
00:04:39,740 --> 00:04:45,168
started building HL I / if we get errors

111
00:04:41,509 --> 00:04:47,870
there and furthermore I we would need to

112
00:04:45,168 --> 00:04:50,139
load different stuff so if you look here

113
00:04:47,870 --> 00:04:52,459
we load these pieces of information

114
00:04:50,139 --> 00:04:54,350
those pieces of information are not

115
00:04:52,459 --> 00:04:58,120
sufficient what we actually need to load

116
00:04:54,350 --> 00:05:04,040
now I if you look at all of these here

117
00:04:58,120 --> 00:05:06,860
we we do want basically all this stuff

118
00:05:04,040 --> 00:05:09,530
the only difference is the result light

119
00:05:06,860 --> 00:05:11,720
boxes and result box refs those are gone

120
00:05:09,529 --> 00:05:14,929
because we don't have such a thing as

121
00:05:11,720 --> 00:05:16,340
those results and then in here with the

122
00:05:14,930 --> 00:05:18,978
source lighting dump and the source

123
00:05:16,339 --> 00:05:21,439
light boxes dump I think all we need at

124
00:05:18,978 --> 00:05:23,240
that point is just the occluders right

125
00:05:21,439 --> 00:05:31,639
so I think the occluders are all we

126
00:05:23,240 --> 00:05:36,250
would need there now we can also choose

127
00:05:31,639 --> 00:05:38,659
to dump the the other table information

128
00:05:36,250 --> 00:05:42,410
but I'm not sure that there's any real

129
00:05:38,660 --> 00:05:44,479
reason to so if we look at the other

130
00:05:42,410 --> 00:05:46,580
pieces of information that are stored in

131
00:05:44,478 --> 00:05:48,490
tabular form inside the lighting system

132
00:05:46,579 --> 00:05:50,930
because here's the lighting system here

133
00:05:48,490 --> 00:05:53,870
what you can see is that there's a walk

134
00:05:50,930 --> 00:05:56,810
table there's a wait map and they're

135
00:05:53,870 --> 00:05:59,449
sampling spheres the weight map will be

136
00:05:56,810 --> 00:06:03,949
stored automatically because the weight

137
00:05:59,449 --> 00:06:05,689
map is just if we write this out the

138
00:06:03,949 --> 00:06:11,000
things that won't get stored are like

139
00:06:05,689 --> 00:06:13,339
these pointers right and if we look down

140
00:06:11,000 --> 00:06:15,949
here you can see that we've got you know

141
00:06:13,339 --> 00:06:19,579
just a few other pointers here but they

142
00:06:15,949 --> 00:06:22,250
are going to get built as part of it

143
00:06:19,579 --> 00:06:23,209
right and you can see here I'm even

144
00:06:22,250 --> 00:06:24,560
saying that they're allocating the

145
00:06:23,209 --> 00:06:25,788
temporariness so we don't have to

146
00:06:24,560 --> 00:06:27,620
preserve these because they will get

147
00:06:25,788 --> 00:06:28,939
rebuilt by the internal lighting Corp we

148
00:06:27,620 --> 00:06:30,918
don't have to use the debug lines

149
00:06:28,939 --> 00:06:34,610
because we're not going to be storing

150
00:06:30,918 --> 00:06:36,848
the debug lines anyway and so if you

151
00:06:34,610 --> 00:06:39,199
take a look up here at what we're doing

152
00:06:36,848 --> 00:06:41,480
really all we have to do is

153
00:06:39,199 --> 00:06:44,959
is rebuild the light sampling walk table

154
00:06:41,480 --> 00:06:47,480
and the sampling spheres and as far as I

155
00:06:44,959 --> 00:06:59,120
know there's no reason why we can't just

156
00:06:47,480 --> 00:07:02,960
do that right okay so I think we should

157
00:06:59,120 --> 00:07:04,879
be able to just proceed directly and

158
00:07:02,959 --> 00:07:08,569
what I want to do here is I want to go

159
00:07:04,879 --> 00:07:10,490
to the internal lighting core code and

160
00:07:08,569 --> 00:07:12,980
what I'm going to do is I'm going to

161
00:07:10,490 --> 00:07:15,560
write before here where we do the debug

162
00:07:12,980 --> 00:07:18,100
dump I'm going to delete the part where

163
00:07:15,560 --> 00:07:21,319
we were doing the result dumps because

164
00:07:18,100 --> 00:07:23,180
we don't care about that these results

165
00:07:21,319 --> 00:07:26,569
we do want because this is what we're

166
00:07:23,180 --> 00:07:28,250
going to compare against and these we do

167
00:07:26,569 --> 00:07:32,060
want but we want to modify it slightly

168
00:07:28,250 --> 00:07:34,519
so in here where we do the lighting dump

169
00:07:32,060 --> 00:07:35,899
that should just work because it's still

170
00:07:34,519 --> 00:07:38,779
the same thing it's just a different

171
00:07:35,899 --> 00:07:40,759
struct now and then in here what we want

172
00:07:38,779 --> 00:07:43,339
to do is have a new thing called like

173
00:07:40,759 --> 00:07:45,980
source occluders or something right and

174
00:07:43,339 --> 00:07:47,989
all that's going to do is in here you

175
00:07:45,980 --> 00:07:50,180
can see we have an input box count and

176
00:07:47,990 --> 00:07:53,000
an input boxes so I'm just gonna say

177
00:07:50,180 --> 00:07:57,590
like look input box counts and I could

178
00:07:53,000 --> 00:08:00,949
just call this boxes because why not an

179
00:07:57,589 --> 00:08:02,629
input box count which is going to be the

180
00:08:00,949 --> 00:08:05,649
size of whatever this input box this

181
00:08:02,629 --> 00:08:08,180
thing is and then it's going to be a

182
00:08:05,649 --> 00:08:10,789
pointer to the input boxes right

183
00:08:08,180 --> 00:08:13,129
so that'll dump this this series of

184
00:08:10,790 --> 00:08:21,230
dumps will dump everything I think that

185
00:08:13,129 --> 00:08:23,870
we need and then what I'm gonna do is

186
00:08:21,230 --> 00:08:26,930
I'm just gonna pop over to HH light prof

187
00:08:23,870 --> 00:08:28,220
and I'm gonna say okay now if this is

188
00:08:26,930 --> 00:08:33,379
called and I guess we can leave it the

189
00:08:28,220 --> 00:08:39,668
same name even light boxes so now if we

190
00:08:33,379 --> 00:08:44,960
just continue loading this up right I

191
00:08:39,668 --> 00:08:46,889
don't really know what this is for I'll

192
00:08:44,960 --> 00:08:48,929
have to see

193
00:08:46,889 --> 00:08:55,019
I guess it's because we don't know ahead

194
00:08:48,928 --> 00:08:57,720
of time yeah what is that about oh I see

195
00:08:55,019 --> 00:08:59,850
so this was just telling it to give it

196
00:08:57,720 --> 00:09:02,910
some extra space because we might need

197
00:08:59,850 --> 00:09:06,899
to use we might push off of the end of

198
00:09:02,909 --> 00:09:16,708
that array I don't know if that still

199
00:09:06,899 --> 00:09:20,369
happens in fact I'm pretty sure it

200
00:09:16,708 --> 00:09:21,988
doesn't so I think we can just get rid

201
00:09:20,369 --> 00:09:24,509
of that I'm gonna go ahead and pull that

202
00:09:21,989 --> 00:09:26,309
out and just we'll leave it in here

203
00:09:24,509 --> 00:09:28,438
because there's no reason not to leave

204
00:09:26,308 --> 00:09:30,149
that feature in if you know it's not

205
00:09:28,438 --> 00:09:32,608
hurting us to have it in there it's just

206
00:09:30,149 --> 00:09:34,470
an addition that happens here but

207
00:09:32,609 --> 00:09:36,209
otherwise I'm gonna get rid of it

208
00:09:34,470 --> 00:09:37,949
and so if we look at recompiling the

209
00:09:36,208 --> 00:09:41,159
lighting code here you can see that that

210
00:09:37,948 --> 00:09:42,868
compiles cleanly and what we were not

211
00:09:41,159 --> 00:09:44,850
compiling HH light prof right now so I

212
00:09:42,869 --> 00:09:49,350
gotta jump back in there and and add

213
00:09:44,850 --> 00:09:53,909
that so if I go back to HH light Bravo I

214
00:09:49,350 --> 00:09:55,798
guess I was already in it sorry what I

215
00:09:53,909 --> 00:09:58,048
want to do is take that build and you

216
00:09:55,798 --> 00:09:59,879
can see here that like I've rammed out

217
00:09:58,048 --> 00:10:02,458
some things and so one of the things I

218
00:09:59,879 --> 00:10:04,168
rammed out here was HH light prof so I'm

219
00:10:02,458 --> 00:10:06,378
gonna go ahead and rebuild it and what

220
00:10:04,168 --> 00:10:10,739
you can see here is there's a bunch of

221
00:10:06,379 --> 00:10:13,289
of compile errors those are the

222
00:10:10,739 --> 00:10:14,579
differences in the old way we had the

223
00:10:13,289 --> 00:10:16,948
lighting setup and the new way we had

224
00:10:14,578 --> 00:10:20,729
the lighting setup so we just have to go

225
00:10:16,948 --> 00:10:22,558
through and basically excise the the

226
00:10:20,730 --> 00:10:24,418
parts we made things a lot simpler and

227
00:10:22,558 --> 00:10:25,828
better we cleaned up the lighting code

228
00:10:24,418 --> 00:10:28,798
quite a bit because you know was kind of

229
00:10:25,828 --> 00:10:30,719
old and crusty and now we've got it sort

230
00:10:28,798 --> 00:10:32,220
of minimized it's still a little

231
00:10:30,720 --> 00:10:34,410
craftier than I would like and that's

232
00:10:32,220 --> 00:10:36,239
because we're still able to run both

233
00:10:34,409 --> 00:10:38,129
systems in place we can run any be

234
00:10:36,239 --> 00:10:39,720
caster and we can run the grid caster

235
00:10:38,129 --> 00:10:41,668
I'm pretty sure I want to stick with the

236
00:10:39,720 --> 00:10:43,559
grid caster but until I actually do some

237
00:10:41,668 --> 00:10:45,629
performance analysis and improvements

238
00:10:43,558 --> 00:10:47,850
here I'm not quite ready to say yet so

239
00:10:45,629 --> 00:10:49,558
we're still a little craftier than we

240
00:10:47,850 --> 00:10:51,028
will be in the end but we're a lot

241
00:10:49,558 --> 00:10:52,139
cleaner now so a lot of this stuff we

242
00:10:51,028 --> 00:10:54,629
were doing when we were just sort of

243
00:10:52,139 --> 00:10:58,230
hacking on it to try and explore we can

244
00:10:54,629 --> 00:11:00,300
now get rid of so we don't have to do

245
00:10:58,230 --> 00:11:01,769
any more of those transforms

246
00:11:00,299 --> 00:11:04,289
and we don't have to worry about a lot

247
00:11:01,769 --> 00:11:05,669
of these like solution box count any of

248
00:11:04,289 --> 00:11:10,169
this stuff none of this stuff matters

249
00:11:05,669 --> 00:11:17,219
here I think we can just go ahead with

250
00:11:10,169 --> 00:11:19,500
it the light boxes when we load them the

251
00:11:17,220 --> 00:11:22,800
size of that system is what's going to

252
00:11:19,500 --> 00:11:24,350
tell us how many boxes there are so what

253
00:11:22,799 --> 00:11:27,120
we need to do here is we need to say

254
00:11:24,350 --> 00:11:29,040
okay the input box count

255
00:11:27,120 --> 00:11:31,440
so like the occluder count what we're

256
00:11:29,039 --> 00:11:35,639
calling the four that's actually going

257
00:11:31,440 --> 00:11:38,100
to be the source light boxes divided by

258
00:11:35,639 --> 00:11:44,669
the size of one of these lighting boxes

259
00:11:38,100 --> 00:11:46,740
right so we need to just get that out

260
00:11:44,669 --> 00:11:48,750
because we're going to have to pass that

261
00:11:46,740 --> 00:11:51,090
to the internal lighting core when we go

262
00:11:48,750 --> 00:11:53,940
to run the eternal lighting core so like

263
00:11:51,090 --> 00:11:56,190
in here right you know if you take a

264
00:11:53,940 --> 00:11:57,990
look at the parameters this thing has to

265
00:11:56,190 --> 00:11:59,610
pass you can see that we've got some of

266
00:11:57,990 --> 00:12:01,470
them we've got the spec out let's do the

267
00:11:59,610 --> 00:12:02,840
fuse that lists the lighting cue we're

268
00:12:01,470 --> 00:12:04,830
nerfing because we're not trying to run

269
00:12:02,840 --> 00:12:07,860
multi-threaded we've got the input box

270
00:12:04,830 --> 00:12:10,800
count which needs to go here so that's

271
00:12:07,860 --> 00:12:13,080
the occluder count and then we've got

272
00:12:10,799 --> 00:12:15,059
the input boxes here I don't remember

273
00:12:13,080 --> 00:12:16,950
source light boxes with that I'm like I

274
00:12:15,059 --> 00:12:19,049
don't remember that's called and then we

275
00:12:16,950 --> 00:12:23,040
got through a peak count and the source

276
00:12:19,049 --> 00:12:25,589
light boxes I think I don't really

277
00:12:23,039 --> 00:12:31,969
remember what a buffer looks like but I

278
00:12:25,590 --> 00:12:34,019
think it's just excite oops there we go

279
00:12:31,970 --> 00:12:36,060
so you could see it as a counting of

280
00:12:34,019 --> 00:12:40,620
data right so I should be able to just

281
00:12:36,059 --> 00:12:42,359
pass the data here like so and and maybe

282
00:12:40,620 --> 00:12:45,149
I won't cost me a class sourced light

283
00:12:42,360 --> 00:12:47,820
box count that's just going to be the

284
00:12:45,149 --> 00:12:50,340
count divided by the size there so we'll

285
00:12:47,820 --> 00:12:53,670
just go ahead and say source light box

286
00:12:50,340 --> 00:12:57,180
count and that will give me a correct

287
00:12:53,669 --> 00:12:59,669
pass-through for that data right so

288
00:12:57,179 --> 00:13:02,009
hopefully this can be called now it

289
00:12:59,669 --> 00:13:05,579
looks like this is unhappy about that

290
00:13:02,009 --> 00:13:07,019
though oh because this is you thirty-two

291
00:13:05,580 --> 00:13:09,410
and we don't actually know that it has

292
00:13:07,019 --> 00:13:12,149
to be but trust me I'm not going to be

293
00:13:09,409 --> 00:13:13,649
writing out that mini we're not going to

294
00:13:12,149 --> 00:13:14,009
overflow a 32 bit didn't share with the

295
00:13:13,649 --> 00:13:16,259
number

296
00:13:14,009 --> 00:13:19,769
boxes heaven help us that would not run

297
00:13:16,259 --> 00:13:22,259
at 60 frames a second so I think that's

298
00:13:19,769 --> 00:13:23,429
all good the total input boxes is

299
00:13:22,259 --> 00:13:25,439
getting printed out here there's no

300
00:13:23,429 --> 00:13:26,819
reason not to continue doing that I mean

301
00:13:25,440 --> 00:13:28,200
we have it I don't know that we care

302
00:13:26,820 --> 00:13:32,490
about that information pickly much but

303
00:13:28,200 --> 00:13:35,640
there it is okay and so now in here we

304
00:13:32,490 --> 00:13:37,889
have an issue with the lighting box this

305
00:13:35,639 --> 00:13:40,049
has not been casted so let's just cast

306
00:13:37,889 --> 00:13:41,519
it here because it's just a blind buffer

307
00:13:40,049 --> 00:13:46,469
we load it off disk it doesn't know what

308
00:13:41,519 --> 00:13:48,659
the type is you 32 to you 16 so I guess

309
00:13:46,470 --> 00:13:51,930
this number here has to be a safe

310
00:13:48,659 --> 00:13:54,059
truncate to you 16 it can't be a large

311
00:13:51,929 --> 00:13:56,609
number because the system doesn't

312
00:13:54,059 --> 00:13:59,309
support it if we look at result light

313
00:13:56,610 --> 00:14:02,159
boxes in here you can see us just like

314
00:13:59,309 --> 00:14:03,779
checking to see if the results of the

315
00:14:02,159 --> 00:14:06,269
light box modifications worked out like

316
00:14:03,779 --> 00:14:10,259
I said we're not doing that anymore so

317
00:14:06,269 --> 00:14:12,059
that can just kind of get removed and if

318
00:14:10,259 --> 00:14:13,649
we look down in here same thing right

319
00:14:12,059 --> 00:14:18,659
this is not none of this stuff is

320
00:14:13,649 --> 00:14:20,459
relevant anymore so once we're done with

321
00:14:18,659 --> 00:14:22,889
that I think we're pretty good to go

322
00:14:20,460 --> 00:14:25,610
with the exception of there's some setup

323
00:14:22,889 --> 00:14:28,199
work here that's not really appropriate

324
00:14:25,610 --> 00:14:30,419
so if you look at here where we load in

325
00:14:28,200 --> 00:14:32,430
the solution for example one of the

326
00:14:30,419 --> 00:14:34,620
things that you'll notice that we're not

327
00:14:32,429 --> 00:14:39,029
doing is we're not building those tables

328
00:14:34,620 --> 00:14:43,230
and if you take a look at what's going

329
00:14:39,029 --> 00:14:46,500
on in the actual lighting code itself so

330
00:14:43,230 --> 00:14:48,000
an update lighting you can see that it

331
00:14:46,500 --> 00:14:49,710
does some table builds so it does a

332
00:14:48,000 --> 00:14:52,620
compute walk table and it build a few

333
00:14:49,710 --> 00:14:53,940
slight Maps build diffuse light Maps is

334
00:14:52,620 --> 00:14:55,320
fine

335
00:14:53,940 --> 00:14:57,750
because like I said that one's like

336
00:14:55,320 --> 00:15:00,030
welded directly in the compute walk

337
00:14:57,750 --> 00:15:03,899
table call not so much compute walk

338
00:15:00,029 --> 00:15:06,559
table is a blind pointer it's not gonna

339
00:15:03,899 --> 00:15:10,529
get written out we could write it out

340
00:15:06,559 --> 00:15:12,659
but there's really not much reason to do

341
00:15:10,529 --> 00:15:14,789
that when we could just say look we

342
00:15:12,659 --> 00:15:20,299
loaded all the dependent data so just

343
00:15:14,789 --> 00:15:22,469
rebuild it here we know that we can and

344
00:15:20,299 --> 00:15:25,199
you know it just doesn't seem like

345
00:15:22,470 --> 00:15:27,029
there's any reason not to so what I'd

346
00:15:25,200 --> 00:15:27,820
like to do there is just say alright we

347
00:15:27,029 --> 00:15:30,699
know that we

348
00:15:27,820 --> 00:15:32,560
an arena anyway and so let's just build

349
00:15:30,700 --> 00:15:34,509
it so I'm gonna go ahead and say after

350
00:15:32,559 --> 00:15:37,149
we initialize the arena which happens

351
00:15:34,509 --> 00:15:39,909
right here I'm gonna go ahead and build

352
00:15:37,149 --> 00:15:42,490
the sampling walk table here we're gonna

353
00:15:39,909 --> 00:15:44,049
pass the temporary now and all of this

354
00:15:42,490 --> 00:15:46,870
stuff I think should remain the same

355
00:15:44,049 --> 00:15:50,469
because all of this stuff has all been

356
00:15:46,870 --> 00:15:51,700
written out and off we go so we need to

357
00:15:50,470 --> 00:15:55,480
do that and the other thing we need to

358
00:15:51,700 --> 00:15:58,360
do is we need to initialize the sample

359
00:15:55,480 --> 00:16:00,279
Direction table but I think because we

360
00:15:58,360 --> 00:16:01,870
switched to doing that as a direct

361
00:16:00,279 --> 00:16:04,089
lookup rather than looking it up from

362
00:16:01,870 --> 00:16:05,740
inside the to the the lighting solution

363
00:16:04,090 --> 00:16:06,910
I don't think we actually have to do

364
00:16:05,740 --> 00:16:09,220
anything there because we could it's

365
00:16:06,909 --> 00:16:10,899
just a global it was just a include

366
00:16:09,220 --> 00:16:14,950
that's just the hard-coded table that we

367
00:16:10,899 --> 00:16:16,629
welded in so I think that would get us

368
00:16:14,950 --> 00:16:19,090
everything we'll find out pretty quickly

369
00:16:16,629 --> 00:16:20,590
because if I forgot something we will

370
00:16:19,090 --> 00:16:25,120
immediately die horrible death and we

371
00:16:20,590 --> 00:16:29,110
try to run it but let's go ahead forward

372
00:16:25,120 --> 00:16:32,730
with it so what I'd like to do here is

373
00:16:29,110 --> 00:16:36,310
just get us to a place where we can

374
00:16:32,730 --> 00:16:38,379
where we can do the write out so if you

375
00:16:36,309 --> 00:16:41,109
take a look at internal lighting course

376
00:16:38,379 --> 00:16:42,490
I'm gonna go ahead and run here and I'm

377
00:16:41,110 --> 00:16:51,129
gonna set a breakpoint and turn a

378
00:16:42,490 --> 00:16:56,200
lighting core and if we take a look at

379
00:16:51,129 --> 00:16:59,620
at that code so I don't actually know

380
00:16:56,200 --> 00:17:01,390
why it's not very good so if we take a

381
00:16:59,620 --> 00:17:03,759
look at internal lighting core here you

382
00:17:01,389 --> 00:17:06,789
can see that we've got this light box

383
00:17:03,759 --> 00:17:08,349
dump trigger and if the light box dump

384
00:17:06,789 --> 00:17:11,230
trigger global variable is set to true

385
00:17:08,349 --> 00:17:14,619
it will dump the source lighting out and

386
00:17:11,230 --> 00:17:16,360
so what I should be able to do here is I

387
00:17:14,619 --> 00:17:20,559
should be able to set this to true I

388
00:17:16,359 --> 00:17:21,490
don't know I guess we I don't really

389
00:17:20,559 --> 00:17:23,319
remember

390
00:17:21,490 --> 00:17:26,109
I don't think remedy can edit values

391
00:17:23,319 --> 00:17:28,779
though I think that's something that

392
00:17:26,109 --> 00:17:30,459
George hasn't added yet so I remember we

393
00:17:28,779 --> 00:17:31,869
didn't quite do it this way for that

394
00:17:30,460 --> 00:17:34,480
reason normally what I would do is I

395
00:17:31,869 --> 00:17:35,129
just edit the variable here I don't

396
00:17:34,480 --> 00:17:38,680
think

397
00:17:35,130 --> 00:17:40,090
remedy supports that yet it might I mean

398
00:17:38,680 --> 00:17:41,350
I might just not know how to do it

399
00:17:40,089 --> 00:17:43,599
properly but I don't

400
00:17:41,349 --> 00:17:45,788
it does so I'm pretty sure the way we

401
00:17:43,599 --> 00:17:48,009
did this is we just set the value to

402
00:17:45,788 --> 00:17:51,460
true once and then we let it clear it to

403
00:17:48,009 --> 00:17:53,529
false here using the dynamic reload the

404
00:17:51,460 --> 00:17:55,480
problem with that if I remember properly

405
00:17:53,529 --> 00:17:57,129
is I think we will have to fix the

406
00:17:55,480 --> 00:17:59,579
dynamic reload first because I think

407
00:17:57,130 --> 00:18:02,679
dynamic reload is kind of busted right

408
00:17:59,579 --> 00:18:11,439
something about the table offset was

409
00:18:02,679 --> 00:18:12,850
like not correct and to be honest with

410
00:18:11,440 --> 00:18:14,830
you I'm not sure what it is so let's

411
00:18:12,849 --> 00:18:16,689
let's we should we should investigate

412
00:18:14,829 --> 00:18:18,460
that anyway so let's just fix that bug

413
00:18:16,690 --> 00:18:19,929
first so you can see the Lighting's

414
00:18:18,460 --> 00:18:21,940
working just fine in here and here's

415
00:18:19,929 --> 00:18:25,390
like a debug draw of the table walk

416
00:18:21,940 --> 00:18:27,070
right let me just go ahead and do a

417
00:18:25,390 --> 00:18:28,538
dynamic reload I'm not literally not

418
00:18:27,069 --> 00:18:30,668
gonna do anything I'm just gonna

419
00:18:28,538 --> 00:18:32,679
recompile right so it's just gonna

420
00:18:30,669 --> 00:18:34,750
reload the same exact code and I just

421
00:18:32,679 --> 00:18:38,288
want to see like do you see how it broke

422
00:18:34,750 --> 00:18:41,288
right it's like now there is no there

423
00:18:38,288 --> 00:18:45,029
are no steppings right it's like the

424
00:18:41,288 --> 00:18:48,429
table just went away and so I don't know

425
00:18:45,029 --> 00:18:50,619
what is going on there like I I have no

426
00:18:48,429 --> 00:18:59,140
idea why that's happening and so we

427
00:18:50,619 --> 00:19:02,639
should take a look so it's it's like it

428
00:18:59,140 --> 00:19:05,020
won't be re-entering this piece of code

429
00:19:02,640 --> 00:19:08,500
but I'm not sure why that wouldn't

430
00:19:05,019 --> 00:19:13,690
matter June and I'm saying like this

431
00:19:08,500 --> 00:19:15,909
piece of code it just it sets a bunch of

432
00:19:13,690 --> 00:19:18,130
memory to point to stuff but it should

433
00:19:15,909 --> 00:19:21,640
just work and I don't know why it

434
00:19:18,130 --> 00:19:26,830
doesn't right we probably could patch

435
00:19:21,640 --> 00:19:29,380
over it by going in here mm-hmm and on

436
00:19:26,829 --> 00:19:32,678
reloads forcing it to redo this code

437
00:19:29,380 --> 00:19:35,740
path but the fact that we have to do it

438
00:19:32,679 --> 00:19:38,769
seems odd to me and so I'd like to know

439
00:19:35,740 --> 00:19:40,538
why before I do that like rather than

440
00:19:38,769 --> 00:19:43,779
just patch over it I want to know what's

441
00:19:40,538 --> 00:19:46,210
going on because I don't see what I

442
00:19:43,779 --> 00:19:49,450
don't see what would be going on there

443
00:19:46,210 --> 00:19:53,150
this shouldn't be getting reset unless

444
00:19:49,450 --> 00:19:58,519
we reset it so what change

445
00:19:53,150 --> 00:20:01,220
right and we are we are using this

446
00:19:58,519 --> 00:20:03,559
sample Direction table right which is

447
00:20:01,220 --> 00:20:06,769
this sort of like hard coded table that

448
00:20:03,559 --> 00:20:10,309
we're accessing off that's all well and

449
00:20:06,769 --> 00:20:12,259
good but we don't weld anything into it

450
00:20:10,309 --> 00:20:15,519
I don't think like we don't weld

451
00:20:12,259 --> 00:20:17,299
pointers into it anywhere unless I'm

452
00:20:15,519 --> 00:20:20,809
just misremembering

453
00:20:17,299 --> 00:20:22,849
so they're just offsets and if they're

454
00:20:20,809 --> 00:20:26,240
just offsets then I would think that

455
00:20:22,849 --> 00:20:28,009
this would just run fine and plus where

456
00:20:26,240 --> 00:20:31,039
the table should be the same in both

457
00:20:28,009 --> 00:20:32,769
versions of the DLL anyway so I really

458
00:20:31,039 --> 00:20:36,379
just fundamentally don't understand

459
00:20:32,769 --> 00:20:39,500
what's broken so what I'd like to do is

460
00:20:36,380 --> 00:20:42,650
go ahead through here and see if I can

461
00:20:39,500 --> 00:20:45,650
if just by stepping through the code

462
00:20:42,650 --> 00:20:48,590
perhaps I can see like what's going on

463
00:20:45,650 --> 00:20:55,070
and why we're getting such a weird

464
00:20:48,589 --> 00:21:00,019
result okay so I'm gonna switch this to

465
00:20:55,069 --> 00:21:02,480
a debug build real quick and I'm gonna

466
00:21:00,019 --> 00:21:03,859
verify that the problem still occurs I

467
00:21:02,480 --> 00:21:05,569
mean it's always possible that you have

468
00:21:03,859 --> 00:21:07,490
a bug that only happens in release mode

469
00:21:05,569 --> 00:21:10,669
we don't really have very many of those

470
00:21:07,490 --> 00:21:13,130
hardly ever on handmade hero so it's

471
00:21:10,670 --> 00:21:14,570
probably not but rather than you know

472
00:21:13,130 --> 00:21:18,620
hunting for something that I don't know

473
00:21:14,569 --> 00:21:20,269
exists I'm gonna first verify that if I

474
00:21:18,619 --> 00:21:24,199
do a rebuild here the lighting will shut

475
00:21:20,269 --> 00:21:28,240
down and it does right you can see that

476
00:21:24,200 --> 00:21:32,230
as it finishes blending out the lighting

477
00:21:28,240 --> 00:21:35,569
now we're not taking any steppings right

478
00:21:32,230 --> 00:21:40,339
and it seems fairly clear that the

479
00:21:35,569 --> 00:21:44,000
problem there is one of the of the walk

480
00:21:40,339 --> 00:21:45,259
table not working and so I want to take

481
00:21:44,000 --> 00:21:47,359
a look at what's going on with the lock

482
00:21:45,259 --> 00:21:49,579
table now just to refill your eyes

483
00:21:47,359 --> 00:21:51,439
myself with that you can see that here's

484
00:21:49,579 --> 00:21:54,980
the walk table entry it's just like a T

485
00:21:51,440 --> 00:21:57,200
terminate and a D grid value that's all

486
00:21:54,980 --> 00:21:59,180
that's in there and if you take a look

487
00:21:57,200 --> 00:22:01,610
at the walk table itself you can see

488
00:21:59,180 --> 00:22:05,000
that there's just a giant there's a

489
00:22:01,609 --> 00:22:05,809
pointer to just a giant set of memory

490
00:22:05,000 --> 00:22:07,970
there right

491
00:22:05,809 --> 00:22:10,250
and if you look at what happens during

492
00:22:07,970 --> 00:22:12,170
compute walk table it takes the solution

493
00:22:10,250 --> 00:22:15,230
table memory which is just a thing you

494
00:22:12,170 --> 00:22:17,660
know like any other piece of memory and

495
00:22:15,230 --> 00:22:19,730
so again I'm not sure why it would be

496
00:22:17,660 --> 00:22:20,870
having any trouble looking through this

497
00:22:19,730 --> 00:22:23,299
routine just to make sure there's

498
00:22:20,869 --> 00:22:25,369
nothing weird going on you can see it

499
00:22:23,299 --> 00:22:27,200
just does a standard push of that memory

500
00:22:25,369 --> 00:22:31,369
that's you know that's remembered by the

501
00:22:27,200 --> 00:22:34,549
table and it just does a straightforward

502
00:22:31,369 --> 00:22:38,149
build and writes the data in right so

503
00:22:34,549 --> 00:22:40,700
again I I don't see a lot of explanation

504
00:22:38,150 --> 00:22:42,950
here or a lot of like clues as to what

505
00:22:40,700 --> 00:22:45,920
would be going on so what I want to do

506
00:22:42,950 --> 00:22:49,519
is I'm gonna first because I happen to

507
00:22:45,920 --> 00:22:51,380
be in the broken mode right now I want

508
00:22:49,519 --> 00:22:53,410
to go ahead first and just inspect these

509
00:22:51,380 --> 00:22:56,030
values to see what the heck is happening

510
00:22:53,410 --> 00:22:57,890
so I should be able to pop a breakpoint

511
00:22:56,029 --> 00:23:01,099
in here in the internal lighting core

512
00:22:57,890 --> 00:23:04,580
and just quickly use the debugger to

513
00:23:01,099 --> 00:23:09,049
look and see what I'm getting in all of

514
00:23:04,579 --> 00:23:11,509
my you know data here you can see like

515
00:23:09,049 --> 00:23:13,759
things in the diffuse map and stuff like

516
00:23:11,509 --> 00:23:16,609
that here and I can just spot verify

517
00:23:13,759 --> 00:23:19,129
that they make some sense and they do

518
00:23:16,609 --> 00:23:21,769
I wasn't assuming anything would be

519
00:23:19,130 --> 00:23:26,350
weird about that sort of stuff anyway

520
00:23:21,769 --> 00:23:30,410
we have pretty much what we would expect

521
00:23:26,349 --> 00:23:33,919
for all this stuff I'm gonna concentrate

522
00:23:30,410 --> 00:23:39,050
on exactly what I said on just taking a

523
00:23:33,920 --> 00:23:41,300
look at the the walk table because

524
00:23:39,049 --> 00:23:43,940
that's the thing that I don't really I'm

525
00:23:41,299 --> 00:23:45,919
not confident that that it's remaining

526
00:23:43,940 --> 00:23:48,140
correct cuz the the bugs I'm seeing seem

527
00:23:45,920 --> 00:23:51,950
to be related to that so this is the

528
00:23:48,140 --> 00:23:54,259
light sampling walk table and I just

529
00:23:51,950 --> 00:23:57,910
want to look and see what's in there

530
00:23:54,259 --> 00:24:02,359
right so I'm gonna go ahead and say

531
00:23:57,910 --> 00:24:07,570
light sampling walk table and I'm just

532
00:24:02,359 --> 00:24:07,569
gonna look at some entries right oops

533
00:24:10,140 --> 00:24:16,180
so here's what the light sampling walk

534
00:24:12,609 --> 00:24:20,500
table looks like and if we kind of just

535
00:24:16,180 --> 00:24:22,420
go through it you know there's there's

536
00:24:20,500 --> 00:24:24,670
nothing particularly odd about it it

537
00:24:22,420 --> 00:24:27,640
looks like kind of what you'd expect

538
00:24:24,670 --> 00:24:31,750
right those are just stepping in certain

539
00:24:27,640 --> 00:24:36,970
directions so you know I don't really

540
00:24:31,750 --> 00:24:39,460
see much in the way of a problem right

541
00:24:36,970 --> 00:24:42,789
that just looks looks like what I would

542
00:24:39,460 --> 00:24:44,289
think it would look like so I don't

543
00:24:42,789 --> 00:24:47,470
think there's really much that I can

544
00:24:44,289 --> 00:24:50,829
tell about that like I I can't really

545
00:24:47,470 --> 00:24:53,650
see what the issue would be so I'm gonna

546
00:24:50,829 --> 00:24:55,480
have to look a little closer and just

547
00:24:53,650 --> 00:24:58,200
find out like what's happening with the

548
00:24:55,480 --> 00:25:01,569
stepping we may have to turn off

549
00:24:58,200 --> 00:25:05,650
multi-threading for this because I don't

550
00:25:01,569 --> 00:25:08,259
really have a good way of of making sure

551
00:25:05,650 --> 00:25:17,019
that like I don't have a way to single

552
00:25:08,259 --> 00:25:18,940
step just one thread so I kind of need

553
00:25:17,019 --> 00:25:22,509
to figure out what's up with that if I

554
00:25:18,940 --> 00:25:24,940
go take a look at where the stepping

555
00:25:22,509 --> 00:25:27,789
codes actually happening before I turn

556
00:25:24,940 --> 00:25:31,330
it off before I turn off multi-threading

557
00:25:27,789 --> 00:25:33,909
I should still be able to see pretty

558
00:25:31,329 --> 00:25:34,629
easily what is coming out of the grid

559
00:25:33,910 --> 00:25:37,450
raycast

560
00:25:34,630 --> 00:25:41,050
so if I take a look here at the at the

561
00:25:37,450 --> 00:25:42,640
grid raycast which is right here I

562
00:25:41,049 --> 00:25:45,220
should be able to see like what walk

563
00:25:42,640 --> 00:25:49,180
table things I'm pulling out here so if

564
00:25:45,220 --> 00:25:50,860
I just go ahead and run mm-hmm I should

565
00:25:49,180 --> 00:25:54,100
be able to see what's going on with the

566
00:25:50,859 --> 00:25:56,159
walk table when I grab one of these out

567
00:25:54,099 --> 00:25:59,289
right so there's the walk table there

568
00:25:56,160 --> 00:26:02,950
you can see that the you know the values

569
00:25:59,289 --> 00:26:04,000
are nothing particularly fancy right and

570
00:26:02,950 --> 00:26:07,269
if I take a look at the sample

571
00:26:04,000 --> 00:26:11,500
directions I guess so you know this is

572
00:26:07,269 --> 00:26:13,629
interesting so this could be an

573
00:26:11,500 --> 00:26:15,809
explanation for where we're getting the

574
00:26:13,630 --> 00:26:15,810
error

575
00:26:23,180 --> 00:26:35,789
so this pointer when we load up the

576
00:26:30,240 --> 00:26:37,529
sample directions this is going to be

577
00:26:35,789 --> 00:26:40,230
different between the two runs because

578
00:26:37,529 --> 00:26:46,139
it's static data that's in the

579
00:26:40,230 --> 00:26:48,690
executable I don't have any reason to

580
00:26:46,140 --> 00:26:50,310
suspect that like I don't know why that

581
00:26:48,690 --> 00:26:52,769
would fail because when you load the new

582
00:26:50,309 --> 00:26:54,029
one it should just use the new table but

583
00:26:52,769 --> 00:27:05,210
the new table is the same as the old

584
00:26:54,029 --> 00:27:05,210
table right so I don't know oh yes I do

585
00:27:05,420 --> 00:27:13,470
wow that's subtle I like it

586
00:27:08,640 --> 00:27:16,890
here's the problem and we probably

587
00:27:13,470 --> 00:27:18,450
should fix this so the problem is that

588
00:27:16,890 --> 00:27:22,200
if you take a look at what happens is

589
00:27:18,450 --> 00:27:25,470
when you do the build so in there where

590
00:27:22,200 --> 00:27:30,480
we do the walk table build if you take a

591
00:27:25,470 --> 00:27:32,190
look at weight the way we chose to do

592
00:27:30,480 --> 00:27:33,569
that which was kind of not really a

593
00:27:32,190 --> 00:27:34,410
choice it was just a quick thing we

594
00:27:33,569 --> 00:27:38,220
hacked in there

595
00:27:34,410 --> 00:27:39,600
this gets filled out by the build so

596
00:27:38,220 --> 00:27:41,610
we're actually writing into the static

597
00:27:39,599 --> 00:27:43,529
data table when we then reload the new

598
00:27:41,609 --> 00:27:47,639
set of daybut static data table it's

599
00:27:43,529 --> 00:27:54,059
wrong you know I'm saying so I think

600
00:27:47,640 --> 00:27:57,990
probably what we'd rather do is block

601
00:27:54,059 --> 00:28:00,589
copy this data right I think what we'd

602
00:27:57,990 --> 00:28:03,240
rather do is just block copy this data

603
00:28:00,589 --> 00:28:05,490
now I think we may end up eliminating

604
00:28:03,240 --> 00:28:07,410
this anyway so I'm not gonna spend a lot

605
00:28:05,490 --> 00:28:10,529
of time worrying about this to be

606
00:28:07,410 --> 00:28:12,870
completely honest with you so you know

607
00:28:10,529 --> 00:28:16,220
there's that but I think what I'd like

608
00:28:12,869 --> 00:28:21,019
to do here is say alright this sample

609
00:28:16,220 --> 00:28:21,019
Direction table that we were using here

610
00:28:22,730 --> 00:28:26,298
I think that's all we really need I'm

611
00:28:24,888 --> 00:28:28,278
just gonna go ahead and nerf it for a

612
00:28:26,298 --> 00:28:30,230
second and so what I'm gonna do is I'm

613
00:28:28,278 --> 00:28:32,569
gonna see all the places that use it and

614
00:28:30,230 --> 00:28:36,950
I'm just gonna change those to accessing

615
00:28:32,569 --> 00:28:54,499
a local copy right that's all I'm doing

616
00:28:36,950 --> 00:28:57,230
there okay

617
00:28:54,499 --> 00:28:59,058
and so I'm just gonna copy this table up

618
00:28:57,230 --> 00:29:02,389
is what I'm gonna do for the immediate

619
00:28:59,058 --> 00:29:04,128
moment and it's a bad solution to this

620
00:29:02,388 --> 00:29:06,108
problem because we shouldn't really have

621
00:29:04,128 --> 00:29:08,449
the problem to begin with but I think

622
00:29:06,108 --> 00:29:12,499
it's good enough for now

623
00:29:08,450 --> 00:29:16,038
so inside compute walk table here what

624
00:29:12,499 --> 00:29:17,690
you can see is we every time we go

625
00:29:16,038 --> 00:29:20,269
through here you can see us right into

626
00:29:17,690 --> 00:29:22,220
the direction here and so what I want to

627
00:29:20,269 --> 00:29:24,980
do here is change the way this is

628
00:29:22,220 --> 00:29:27,139
working what I want to do is I want to

629
00:29:24,980 --> 00:29:31,308
take the light sample direction or its

630
00:29:27,138 --> 00:29:32,928
are the light sample direction and I

631
00:29:31,308 --> 00:29:39,378
want to set both of these so I'm gonna

632
00:29:32,929 --> 00:29:42,259
do a copy of these two right and what I

633
00:29:39,378 --> 00:29:53,358
want to do here is I want to just pull

634
00:29:42,259 --> 00:30:00,288
the just this out so this will come out

635
00:29:53,358 --> 00:30:07,428
of the table and then the actual thing

636
00:30:00,288 --> 00:30:10,339
that we write will not write that way

637
00:30:07,429 --> 00:30:13,100
this is just a copy that we keep for

638
00:30:10,339 --> 00:30:15,709
ourselves internally so then in here

639
00:30:13,099 --> 00:30:17,658
when we do sample directions this is

640
00:30:15,710 --> 00:30:20,690
just going to be a push array in the

641
00:30:17,659 --> 00:30:23,899
memory for the array account of the

642
00:30:20,690 --> 00:30:27,889
sample directions table and that just

643
00:30:23,898 --> 00:30:30,138
gives this was a light sample direction

644
00:30:27,888 --> 00:30:32,209
that just gives us the copy again not a

645
00:30:30,138 --> 00:30:35,598
fantastic solution and probably not will

646
00:30:32,210 --> 00:30:37,929
go with eventually but it's good enough

647
00:30:35,598 --> 00:30:37,928
for them

648
00:30:41,660 --> 00:30:50,300
okay what is it called what's the

649
00:30:47,970 --> 00:30:50,299
problem

650
00:30:51,589 --> 00:31:05,429
sample direction table sample direction

651
00:30:56,009 --> 00:31:16,859
table oh yeah okay a sample Direction

652
00:31:05,430 --> 00:31:20,730
table sample Direction table and in this

653
00:31:16,859 --> 00:31:23,099
particular case I guess we kind of need

654
00:31:20,730 --> 00:31:25,769
the solution what we could do here is

655
00:31:23,099 --> 00:31:27,839
just just have this be done outside as

656
00:31:25,769 --> 00:31:30,000
well so we're we're doing the compute

657
00:31:27,839 --> 00:31:33,000
walk table here I can just do that and

658
00:31:30,000 --> 00:31:35,569
know that that'll get lofted later so

659
00:31:33,000 --> 00:31:35,569
that's actually fine

660
00:31:42,539 --> 00:31:50,159
so this interesting so I think we would

661
00:31:47,369 --> 00:31:59,449
want this to actually look like a source

662
00:31:50,160 --> 00:31:59,450
and a desk at that point maybe

663
00:32:07,289 --> 00:32:13,599
all right and again that's just so I can

664
00:32:11,079 --> 00:32:15,129
have some way of of copping these things

665
00:32:13,599 --> 00:32:21,750
back up

666
00:32:15,130 --> 00:32:21,750
this looks what's the problem here

667
00:32:22,410 --> 00:32:27,690
undeclared identifier I agree with you I

668
00:32:31,980 --> 00:32:46,720
thought we had sample direction table oh

669
00:32:36,119 --> 00:32:49,379
yes well um we'll unnerve that now that

670
00:32:46,720 --> 00:32:49,380
all seems fine

671
00:32:49,799 --> 00:33:01,299
this needs a source though so I guess we

672
00:32:52,660 --> 00:33:03,279
need to do two of these like so again

673
00:33:01,299 --> 00:33:05,230
this is ugly because I just don't care

674
00:33:03,279 --> 00:33:07,059
at the moment I want to do this a little

675
00:33:05,230 --> 00:33:08,500
bit differently and I just don't want to

676
00:33:07,059 --> 00:33:13,179
do it do it right at the immediate

677
00:33:08,500 --> 00:33:16,089
moment okay so compute walk table here

678
00:33:13,180 --> 00:33:20,320
needs to do the same thing so exactly

679
00:33:16,089 --> 00:33:26,549
what we did before this code has to

680
00:33:20,319 --> 00:33:26,549
occur in the the test routine same way

681
00:33:27,089 --> 00:33:36,029
otherwise we're good okay so let's see

682
00:33:33,849 --> 00:33:40,329
if I can get that to work properly now

683
00:33:36,029 --> 00:33:43,049
and we'll just take a look at what

684
00:33:40,329 --> 00:33:43,049
happens through here

685
00:33:49,390 --> 00:34:00,440
run please okay so if I now go back and

686
00:33:56,410 --> 00:34:03,400
recompile and force a reload just want

687
00:34:00,440 --> 00:34:03,400
to make sure of things kosher

688
00:34:06,460 --> 00:34:17,289
looks good so let's go back to our

689
00:34:09,739 --> 00:34:17,289
release builds here we go

690
00:34:22,449 --> 00:34:29,779
so here's the release builds and I

691
00:34:26,059 --> 00:34:33,199
should now be able to go somewhere like

692
00:34:29,780 --> 00:34:35,480
say right here and I should be able to

693
00:34:33,199 --> 00:34:43,039
do a rebuild and the lighting should

694
00:34:35,480 --> 00:34:46,659
remain correct and it does and so all

695
00:34:43,039 --> 00:34:50,148
I'm gonna do here now is literally just

696
00:34:46,659 --> 00:34:54,230
the take the dump the lighting debug

697
00:34:50,148 --> 00:34:57,829
dump and whatever that thing was called

698
00:34:54,230 --> 00:35:00,108
I don't remember a lightbox dump trigger

699
00:34:57,829 --> 00:35:07,670
I'm just gonna do a build with that set

700
00:35:00,108 --> 00:35:09,920
to true to dump this exact data right so

701
00:35:07,670 --> 00:35:13,789
during the reload now it should dump the

702
00:35:09,920 --> 00:35:17,858
data and now I can just put it back to

703
00:35:13,789 --> 00:35:21,739
false and in theory now inside the

704
00:35:17,858 --> 00:35:25,608
handmade debug directory we should have

705
00:35:21,739 --> 00:35:30,889
a bunch of dump files so here you can

706
00:35:25,608 --> 00:35:33,199
see the two atlases both they're

707
00:35:30,889 --> 00:35:35,569
starting and ending values you can see

708
00:35:33,199 --> 00:35:42,889
the boxes that were input and you can

709
00:35:35,570 --> 00:35:45,950
see that the base lighting setup this so

710
00:35:42,889 --> 00:35:49,750
one of the things that's stupid about

711
00:35:45,949 --> 00:35:49,750
this you can see here

712
00:35:53,219 --> 00:36:02,169
is like that size is really large and

713
00:35:57,639 --> 00:36:04,348
I'll be honest I think it's just the

714
00:36:02,170 --> 00:36:06,970
diffused weight map so I guess it's fine

715
00:36:04,349 --> 00:36:11,140
it but it's literally just this this

716
00:36:06,969 --> 00:36:12,669
huge piece of data and you can kind of

717
00:36:11,139 --> 00:36:19,779
see why this sucks this is why this

718
00:36:12,670 --> 00:36:22,409
diffuse weight map is bad - right it's

719
00:36:19,780 --> 00:36:26,019
one of the reasons the diffuse blur

720
00:36:22,409 --> 00:36:28,029
probably sucks is because you can see

721
00:36:26,019 --> 00:36:33,940
that like the diffuse weight map is this

722
00:36:28,030 --> 00:36:35,349
huge 1 megabyte thing right we'll be

723
00:36:33,940 --> 00:36:37,210
talking about that a little bit later as

724
00:36:35,349 --> 00:36:39,420
we go to do optimization on the non

725
00:36:37,210 --> 00:36:42,220
raycasting part of the lighting system

726
00:36:39,420 --> 00:36:45,280
but it's just worth noting that it's you

727
00:36:42,219 --> 00:36:47,348
know it's it's not good so let's go

728
00:36:45,280 --> 00:36:51,369
ahead and try to get our HH light prof

729
00:36:47,349 --> 00:36:54,130
system working and this is just going to

730
00:36:51,369 --> 00:36:57,548
be trying to debug any part of this that

731
00:36:54,130 --> 00:36:59,680
had to do with the new way that we're

732
00:36:57,548 --> 00:37:01,539
dumping things and we just have to go

733
00:36:59,679 --> 00:37:06,699
make sure that that actually works at

734
00:37:01,539 --> 00:37:09,130
all right so if we run this we should be

735
00:37:06,699 --> 00:37:15,548
able to start debugging anything that

736
00:37:09,130 --> 00:37:18,160
doesn't work properly we're having some

737
00:37:15,548 --> 00:37:20,650
oh yes right that has to be that that

738
00:37:18,159 --> 00:37:22,480
those aren't Arenas at the moment so we

739
00:37:20,650 --> 00:37:24,940
have to make sure that when we're doing

740
00:37:22,480 --> 00:37:27,280
the HH light prof we always use that the

741
00:37:24,940 --> 00:37:33,780
little dummy arena we set up to push

742
00:37:27,280 --> 00:37:33,780
things on just make sure that's right

743
00:37:34,170 --> 00:37:39,970
one more time

744
00:37:35,818 --> 00:37:41,710
okay so debug lines we don't have setup

745
00:37:39,969 --> 00:37:45,088
here so what we'd like to do here is

746
00:37:41,710 --> 00:37:46,358
make sure that debug lines are nerfed so

747
00:37:45,088 --> 00:37:52,088
inside

748
00:37:46,358 --> 00:37:54,429
update debug lines probably want to

749
00:37:52,088 --> 00:37:56,798
force that to false so no matter what

750
00:37:54,429 --> 00:38:00,548
happens once we load it we just want to

751
00:37:56,798 --> 00:38:02,730
say look don't draw that right we really

752
00:38:00,548 --> 00:38:04,769
really don't want you to do that

753
00:38:02,730 --> 00:38:06,119
because we don't support debug lines in

754
00:38:04,769 --> 00:38:11,820
the external there's nothing to draw

755
00:38:06,119 --> 00:38:13,559
right so if you take a look at what's

756
00:38:11,820 --> 00:38:16,289
happening now you can see that at least

757
00:38:13,559 --> 00:38:18,869
we are running it the total error is

758
00:38:16,289 --> 00:38:22,019
pretty low it's hard to say to what

759
00:38:18,869 --> 00:38:23,250
extent it is or isn't right again

760
00:38:22,019 --> 00:38:25,230
because floating-point will change

761
00:38:23,250 --> 00:38:26,969
between these two builds hard to say

762
00:38:25,230 --> 00:38:28,740
this is the debug build as well so it's

763
00:38:26,969 --> 00:38:30,239
going to be even more different we'll

764
00:38:28,739 --> 00:38:32,549
run the release build in a second and

765
00:38:30,239 --> 00:38:38,358
then we can get perhaps more of a sense

766
00:38:32,550 --> 00:38:40,160
of it but yeah so let me go ahead and

767
00:38:38,358 --> 00:38:43,529
actually run

768
00:38:40,159 --> 00:38:43,529
[Music]

769
00:38:58,028 --> 00:39:03,878
oops so one problem with that is it

770
00:39:01,329 --> 00:39:06,759
exits before I can see the results so

771
00:39:03,878 --> 00:39:08,828
let's just run it outside so this is H H

772
00:39:06,759 --> 00:39:24,009
light province run and handmade debug so

773
00:39:08,829 --> 00:39:27,429
I can do the exact same run here and

774
00:39:24,009 --> 00:39:31,509
again I'm just curious what what the

775
00:39:27,429 --> 00:39:35,499
results are that we get right so I think

776
00:39:31,509 --> 00:39:37,659
we're in good shape here because that

777
00:39:35,498 --> 00:39:41,828
seven point six four is actually a

778
00:39:37,659 --> 00:39:45,459
really really really good number because

779
00:39:41,829 --> 00:39:48,669
I think I can improve the speed of the

780
00:39:45,458 --> 00:39:51,458
grid caster like dramatically from where

781
00:39:48,668 --> 00:39:58,168
it is right now with not too much work

782
00:39:51,458 --> 00:40:01,838
and that's already like the same number

783
00:39:58,168 --> 00:40:05,618
that we were getting out of the a/b test

784
00:40:01,838 --> 00:40:07,719
or roughly so let's just see I mean it

785
00:40:05,619 --> 00:40:09,699
could be way worse because we could have

786
00:40:07,719 --> 00:40:11,378
not picked quite the same location so

787
00:40:09,699 --> 00:40:13,568
you know apples and oranges so I'm just

788
00:40:11,378 --> 00:40:17,228
going to switch this to the used

789
00:40:13,568 --> 00:40:21,788
lighting grid off case to run the a a b

790
00:40:17,228 --> 00:40:25,018
b tester so the a beat tester may still

791
00:40:21,789 --> 00:40:27,249
beat us here right and we'll see

792
00:40:25,018 --> 00:40:29,258
obviously the error protects it will be

793
00:40:27,248 --> 00:40:31,509
totally different because the a/b caster

794
00:40:29,259 --> 00:40:33,188
is different but yeah so what you can

795
00:40:31,509 --> 00:40:34,989
see here is actually the difference

796
00:40:33,188 --> 00:40:36,908
between these two is not particularly

797
00:40:34,989 --> 00:40:38,559
high and that's exactly what I was

798
00:40:36,909 --> 00:40:40,419
hoping for because I think the grid

799
00:40:38,559 --> 00:40:42,609
tester is currently quite slow compared

800
00:40:40,418 --> 00:40:47,228
to what it could be now one of the

801
00:40:42,608 --> 00:40:49,438
problems that we have here is you know

802
00:40:47,228 --> 00:40:49,438
we're just

803
00:40:57,940 --> 00:41:05,750
we are not accounting for how much time

804
00:41:02,030 --> 00:41:08,269
the diffusive ler is taking so if like

805
00:41:05,750 --> 00:41:10,190
we literally didn't cast anything we

806
00:41:08,269 --> 00:41:14,559
don't really have a baseline for that

807
00:41:10,190 --> 00:41:17,900
either so I might just quickly say look

808
00:41:14,559 --> 00:41:19,789
let's do a quick will open up speed

809
00:41:17,900 --> 00:41:22,250
crunch here and I'm just gonna copy

810
00:41:19,789 --> 00:41:25,789
these numbers hen right oh you know what

811
00:41:22,250 --> 00:41:29,719
let me use a notepad or something so if

812
00:41:25,789 --> 00:41:32,750
I just really quickly or you know what

813
00:41:29,719 --> 00:41:33,319
maybe I'll just put them up here who

814
00:41:32,750 --> 00:41:36,880
cares

815
00:41:33,320 --> 00:41:40,730
it's my source code so I'm gonna say

816
00:41:36,880 --> 00:41:45,010
here that like so the grid caster

817
00:41:40,730 --> 00:41:45,010
started at six point well you know what

818
00:41:46,030 --> 00:41:57,440
and the a baby tester was there and what

819
00:41:55,190 --> 00:42:01,670
I want to do is do a run where I don't

820
00:41:57,440 --> 00:42:06,980
cast at all so we'll switch back here

821
00:42:01,670 --> 00:42:09,800
and in grid ray cast like if we assume

822
00:42:06,980 --> 00:42:13,039
that like literally we just don't do

823
00:42:09,800 --> 00:42:15,650
anything so it's like hey what we're

824
00:42:13,039 --> 00:42:18,880
gonna do is that like that's the work

825
00:42:15,650 --> 00:42:18,880
we're gonna do right

826
00:42:24,679 --> 00:42:38,419
are you happy now compiler piece-of-crap

827
00:42:28,719 --> 00:42:42,489
so if we're not debugging by the way if

828
00:42:38,420 --> 00:42:45,260
I may for a second because it seems like

829
00:42:42,489 --> 00:42:49,159
compiler like language spec authors and

830
00:42:45,260 --> 00:42:51,800
compiler vendors seemed to be completely

831
00:42:49,159 --> 00:42:54,609
divorced from any notion of how people

832
00:42:51,800 --> 00:42:59,060
actually make code at all right

833
00:42:54,610 --> 00:43:01,430
in any sane world whatsoever there would

834
00:42:59,059 --> 00:43:04,400
be no such thing as a compiler error or

835
00:43:01,429 --> 00:43:07,819
compiler warning there would be two

836
00:43:04,400 --> 00:43:10,309
separate things called I could not

837
00:43:07,820 --> 00:43:12,410
compile this like I literally could not

838
00:43:10,309 --> 00:43:14,679
figure out a way to produce code because

839
00:43:12,409 --> 00:43:16,759
I don't understand what the input is and

840
00:43:14,679 --> 00:43:17,629
you can call that an error if you want

841
00:43:16,760 --> 00:43:19,190
call whatever you want

842
00:43:17,630 --> 00:43:22,730
it's a compiler didn't produce the

843
00:43:19,190 --> 00:43:24,650
executable that's one thing okay and if

844
00:43:22,730 --> 00:43:26,389
if that happens you don't piss acute

845
00:43:24,650 --> 00:43:28,700
Abel then there should be another thing

846
00:43:26,389 --> 00:43:30,379
called things I noticed about the code

847
00:43:28,699 --> 00:43:33,469
and those should go to a separate

848
00:43:30,380 --> 00:43:36,470
frickin file and if I want to see them

849
00:43:33,469 --> 00:43:38,480
I'll load it up right I always want it

850
00:43:36,469 --> 00:43:41,239
produced and I always want to see them

851
00:43:38,480 --> 00:43:43,250
but I want them separate so what ends up

852
00:43:41,239 --> 00:43:46,549
happening is you have to treat warnings

853
00:43:43,250 --> 00:43:48,679
as errors because otherwise you just

854
00:43:46,550 --> 00:43:49,820
have all these errors warnings streaming

855
00:43:48,679 --> 00:43:51,469
through and you can't find your actual

856
00:43:49,820 --> 00:43:53,360
errors you don't know which errors are

857
00:43:51,469 --> 00:43:55,250
wrong or right right it should I put

858
00:43:53,360 --> 00:43:58,610
them to a file and then just let me mark

859
00:43:55,250 --> 00:44:01,400
the ones that I am okay with and and

860
00:43:58,610 --> 00:44:03,349
then those just don't just put like I

861
00:44:01,400 --> 00:44:05,539
put the I just copy it from the file

862
00:44:03,349 --> 00:44:09,230
into a separate file that's like ignore

863
00:44:05,539 --> 00:44:11,690
these specific warnings because it's not

864
00:44:09,230 --> 00:44:14,360
like the type of warning is the thing I

865
00:44:11,690 --> 00:44:16,400
want to ignore it's that like yes I know

866
00:44:14,360 --> 00:44:18,110
that code was unreachable it's supposed

867
00:44:16,400 --> 00:44:20,030
to freaking be unreachable that's what

868
00:44:18,110 --> 00:44:23,300
the return values for let me tell you

869
00:44:20,030 --> 00:44:26,530
that but of course I can't another way

870
00:44:23,300 --> 00:44:26,530
you could do it is just say like

871
00:44:28,869 --> 00:44:33,880
like give me a keyword that I can just

872
00:44:32,170 --> 00:44:36,309
stick in here that's like I know it's

873
00:44:33,880 --> 00:44:41,858
unreachable it's supposed to frickin be

874
00:44:36,309 --> 00:44:45,220
unreachable right absolutely freakin

875
00:44:41,858 --> 00:44:48,068
wasting my time all the time like figure

876
00:44:45,219 --> 00:44:50,798
something out instead of spending like

877
00:44:48,068 --> 00:44:52,748
all your time on ridiculous stupid crap

878
00:44:50,798 --> 00:44:55,509
no one cares about and it never works

879
00:44:52,748 --> 00:44:59,230
like your next weirdest template

880
00:44:55,509 --> 00:45:01,869
nightmare try making a feature that

881
00:44:59,230 --> 00:45:05,409
actually a programmer can use to make

882
00:45:01,869 --> 00:45:08,890
their program more convenient to write

883
00:45:05,409 --> 00:45:12,699
or debug like it's try you know spend

884
00:45:08,889 --> 00:45:14,940
spend one day on that instead of how are

885
00:45:12,699 --> 00:45:18,338
we going to you know make this

886
00:45:14,940 --> 00:45:20,548
ridiculous ra íí- thing with twenty

887
00:45:18,338 --> 00:45:22,929
seven levels of exception handling and

888
00:45:20,548 --> 00:45:24,338
34 different templates to try and figure

889
00:45:22,929 --> 00:45:27,778
out that the thing needs to be allocated

890
00:45:24,338 --> 00:45:32,018
from a pool it's just like unbelievable

891
00:45:27,778 --> 00:45:33,969
okay so I now want to try and run with

892
00:45:32,018 --> 00:45:35,828
no cast so what's gonna happen is every

893
00:45:33,969 --> 00:45:39,098
time it tries to cast it will just

894
00:45:35,829 --> 00:45:41,680
immediately fail out and so will get the

895
00:45:39,099 --> 00:45:45,369
measure of the timing with none none of

896
00:45:41,679 --> 00:45:46,899
these things right and the only reason

897
00:45:45,369 --> 00:45:49,150
that I wanted to do that was because I

898
00:45:46,900 --> 00:45:52,028
need a baseline value to know like you

899
00:45:49,150 --> 00:45:53,259
know it is what I thought it was but I

900
00:45:52,028 --> 00:45:56,889
just wanted to make sure because if you

901
00:45:53,259 --> 00:45:59,380
take a look in here without that none

902
00:45:56,889 --> 00:46:00,788
value like you look at these two values

903
00:45:59,380 --> 00:46:02,829
and they look really close together

904
00:46:00,789 --> 00:46:04,749
there's only point for a seconds

905
00:46:02,829 --> 00:46:07,089
difference between the two across all

906
00:46:04,748 --> 00:46:08,709
those runs so you're like okay the grid

907
00:46:07,088 --> 00:46:10,599
rate caster is very competitive with the

908
00:46:08,710 --> 00:46:15,579
abb cast or even though I haven't tried

909
00:46:10,599 --> 00:46:17,920
to accelerate it much yet but if without

910
00:46:15,579 --> 00:46:20,829
running any caster had been like seven

911
00:46:17,920 --> 00:46:23,650
seconds right then that difference is

912
00:46:20,829 --> 00:46:25,210
huge because it's actually three times

913
00:46:23,650 --> 00:46:26,858
slower right or something so I just

914
00:46:25,210 --> 00:46:29,949
wanted to make sure that most of the

915
00:46:26,858 --> 00:46:33,248
time was taken up in the Ray caster and

916
00:46:29,949 --> 00:46:34,568
it appears that that is true again I

917
00:46:33,248 --> 00:46:35,980
can't really tell because it could be

918
00:46:34,568 --> 00:46:38,469
that the compiler did something saucy

919
00:46:35,980 --> 00:46:40,329
but Microsoft's compiler is not so

920
00:46:38,469 --> 00:46:42,230
aggressive as clang at doing those saucy

921
00:46:40,329 --> 00:46:47,119
things so I think I can probably

922
00:46:42,230 --> 00:46:52,090
say that hopefully we're okay alright so

923
00:46:47,119 --> 00:46:54,140
let me go ahead and do a build here and

924
00:46:52,090 --> 00:46:57,200
there we go

925
00:46:54,139 --> 00:47:00,019
so now what I'd like to do is I want to

926
00:46:57,199 --> 00:47:02,319
take a look at changing the way

927
00:47:00,019 --> 00:47:04,639
fundamentally we're doing the grid block

928
00:47:02,320 --> 00:47:12,980
because I think I can speed it up really

929
00:47:04,639 --> 00:47:19,759
dramatically there's just one rub to it

930
00:47:12,980 --> 00:47:21,230
there's just one issue so the problem

931
00:47:19,760 --> 00:47:23,450
that we have currently with the grid

932
00:47:21,230 --> 00:47:26,480
rate caster is if you were to take a

933
00:47:23,449 --> 00:47:30,379
look at how this is working this is a

934
00:47:26,480 --> 00:47:36,010
core high speed loop right here it goes

935
00:47:30,380 --> 00:47:36,010
over the actual a B B's that are inside

936
00:47:36,159 --> 00:47:41,539
also this is stupid

937
00:47:38,469 --> 00:47:44,409
well I don't know why that's here that

938
00:47:41,539 --> 00:47:44,409
should just be this

939
00:47:54,119 --> 00:47:58,920
like I don't know why we would do that

940
00:47:55,980 --> 00:48:03,329
each time through the loop that's kind

941
00:47:58,920 --> 00:48:08,548
of nonsensical and weird right

942
00:48:03,329 --> 00:48:10,048
is the cost metric yet is so yet don't

943
00:48:08,548 --> 00:48:13,349
know what's up at that it doesn't really

944
00:48:10,048 --> 00:48:15,028
matter I guess where is the actual so

945
00:48:13,349 --> 00:48:23,700
there's the cost metric - equals one

946
00:48:15,028 --> 00:48:29,429
millisecond so I'm pretty sure we can

947
00:48:23,699 --> 00:48:31,139
just do that so that way the cost metric

948
00:48:29,429 --> 00:48:33,449
just goes down monotonically unless

949
00:48:31,139 --> 00:48:34,710
you're actually doing some tests in

950
00:48:33,449 --> 00:48:36,960
which case if you're doing a bunch of

951
00:48:34,710 --> 00:48:39,269
tests then it goes down much more

952
00:48:36,960 --> 00:48:41,249
rapidly right and we can tune this cost

953
00:48:39,268 --> 00:48:44,219
metric to see what we actually want to

954
00:48:41,248 --> 00:48:48,568
do to you know make sure that the rate

955
00:48:44,219 --> 00:48:50,459
casting is reasonable and so on now the

956
00:48:48,568 --> 00:48:52,199
thing that I wanted to point out here is

957
00:48:50,460 --> 00:48:54,358
that if you take a look at how this loop

958
00:48:52,199 --> 00:48:56,399
is structured what happens is as we do

959
00:48:54,358 --> 00:48:57,869
the walk sure there's all this debug

960
00:48:56,400 --> 00:48:59,789
crap that eventually will pull out

961
00:48:57,869 --> 00:49:01,380
that's just for us you know that can be

962
00:48:59,789 --> 00:49:02,849
if zeroed out and in fact we can start

963
00:49:01,380 --> 00:49:05,460
if during the stuff out right we can

964
00:49:02,849 --> 00:49:09,210
start getting the stuff out of there for

965
00:49:05,460 --> 00:49:10,470
now and and just you know re-enable it

966
00:49:09,210 --> 00:49:12,838
when we actually need to do some

967
00:49:10,469 --> 00:49:15,509
debugging so anywhere that the debug

968
00:49:12,838 --> 00:49:17,159
stuff was happening I can I can nerf and

969
00:49:15,509 --> 00:49:18,719
I probably should take a sample with

970
00:49:17,159 --> 00:49:20,009
that stuff nerfed because there may have

971
00:49:18,719 --> 00:49:22,379
been some optimizations that were

972
00:49:20,009 --> 00:49:25,289
prevented by that I don't suspect there

973
00:49:22,380 --> 00:49:27,028
would be a lot of them and perfectly

974
00:49:25,289 --> 00:49:29,700
predicted branches don't really cost you

975
00:49:27,028 --> 00:49:33,259
anything in x64 so I don't anticipate

976
00:49:29,699 --> 00:49:39,509
that having been something that would

977
00:49:33,259 --> 00:49:42,480
that would create a lot of of slowdown

978
00:49:39,509 --> 00:49:44,400
right but we should just double-check

979
00:49:42,480 --> 00:49:45,568
that it doesn't because you never really

980
00:49:44,400 --> 00:49:46,798
know there could be something that it's

981
00:49:45,568 --> 00:49:48,778
doing in there that confuses the

982
00:49:46,798 --> 00:49:52,349
optimizer or that actually requires the

983
00:49:48,778 --> 00:49:56,639
optimizer to do something bad and at

984
00:49:52,349 --> 00:50:00,210
that point you know that you will see a

985
00:49:56,639 --> 00:50:01,798
fair fair difference between the two so

986
00:50:00,210 --> 00:50:04,769
looking at these I'm just going to go

987
00:50:01,798 --> 00:50:07,190
ahead and and nerf out anything in here

988
00:50:04,768 --> 00:50:08,779
that I see inside the loop that

989
00:50:07,190 --> 00:50:12,349
could be negatively affecting the

990
00:50:08,780 --> 00:50:13,880
optimize or and then I'm gonna take

991
00:50:12,349 --> 00:50:16,430
another run at it

992
00:50:13,880 --> 00:50:19,039
and I don't see anything else ste bug

993
00:50:16,429 --> 00:50:27,739
related it's a moment so I'm gonna go

994
00:50:19,039 --> 00:50:29,088
ahead now and and let that go and again

995
00:50:27,739 --> 00:50:31,489
because I think those code paths will be

996
00:50:29,088 --> 00:50:33,980
mostly removed

997
00:50:31,489 --> 00:50:35,299
I don't expect a huge difference and

998
00:50:33,980 --> 00:50:36,800
there isn't it doesn't look like there's

999
00:50:35,300 --> 00:50:41,930
a huge difference but there is some

1000
00:50:36,800 --> 00:50:46,280
difference right so again those numbers

1001
00:50:41,929 --> 00:50:48,379
are even closer which is great okay so

1002
00:50:46,280 --> 00:50:50,900
the problem with the loop as it stands

1003
00:50:48,380 --> 00:50:54,769
currently is that if you take a look at

1004
00:50:50,900 --> 00:50:59,829
what's going on in here you can see that

1005
00:50:54,769 --> 00:51:02,630
this is meant to be like a high volume

1006
00:50:59,829 --> 00:51:08,810
loop that's going to do the actual AABB

1007
00:51:02,630 --> 00:51:10,760
testing and while we want to the point

1008
00:51:08,809 --> 00:51:12,440
of our spatial data structure is that we

1009
00:51:10,760 --> 00:51:13,760
don't want to loop over all because

1010
00:51:12,440 --> 00:51:14,480
there's gonna be like 8,000 of these

1011
00:51:13,760 --> 00:51:17,300
right

1012
00:51:14,480 --> 00:51:19,099
and so looping over 8,000 things for at

1013
00:51:17,300 --> 00:51:21,140
a time is still going to be 2000

1014
00:51:19,099 --> 00:51:22,910
iterations of a loop and 2000 iterations

1015
00:51:21,139 --> 00:51:25,730
of a loop even if it's a very fast loop

1016
00:51:22,909 --> 00:51:27,618
is going to absolutely tank our frame

1017
00:51:25,730 --> 00:51:29,599
rate because of the number of rays were

1018
00:51:27,619 --> 00:51:32,119
casting so we need to keep the number of

1019
00:51:29,599 --> 00:51:35,809
iterations of this loop relatively low 2

1020
00:51:32,119 --> 00:51:37,789
3 4 or whatever and that's fine but what

1021
00:51:35,809 --> 00:51:40,849
we really don't want to do is we really

1022
00:51:37,789 --> 00:51:42,650
don't want to run this loop empty so

1023
00:51:40,849 --> 00:51:45,200
what's going to do is this is going to

1024
00:51:42,650 --> 00:51:47,329
cast this can cast against 4 bounding

1025
00:51:45,199 --> 00:51:49,159
volumes at the same time we want to make

1026
00:51:47,329 --> 00:51:50,990
sure that most of the time we are doing

1027
00:51:49,159 --> 00:51:52,190
that so we want to make sure that most

1028
00:51:50,989 --> 00:51:54,979
the time when we're casting against

1029
00:51:52,190 --> 00:51:57,470
volumes were casting against all four

1030
00:51:54,980 --> 00:52:00,019
volumes and at the moment we're

1031
00:51:57,469 --> 00:52:02,118
definitely not and the reason that we

1032
00:52:00,019 --> 00:52:04,670
know that we're not is because we happen

1033
00:52:02,119 --> 00:52:06,858
to have picked our lighting voxel and

1034
00:52:04,670 --> 00:52:08,450
our spatial voxel as being the same size

1035
00:52:06,858 --> 00:52:11,389
the reason we did that was to use pre

1036
00:52:08,449 --> 00:52:14,389
computed walk tables I would imagine

1037
00:52:11,389 --> 00:52:15,980
that that was probably a bad decision it

1038
00:52:14,389 --> 00:52:17,568
was motivated partially by the fact that

1039
00:52:15,980 --> 00:52:19,309
I thought the walk table stuff was gonna

1040
00:52:17,568 --> 00:52:20,779
be more complicated than it was if we

1041
00:52:19,309 --> 00:52:22,039
actually spin back over to the luck they

1042
00:52:20,780 --> 00:52:23,980
one of the things you can see here is

1043
00:52:22,039 --> 00:52:28,309
this is not particularly complicated

1044
00:52:23,980 --> 00:52:30,500
right so there's some setup work which

1045
00:52:28,309 --> 00:52:32,480
is here but if you take a look at the

1046
00:52:30,500 --> 00:52:37,429
actual code that's happening it's

1047
00:52:32,480 --> 00:52:40,880
incredibly simple right here's the code

1048
00:52:37,429 --> 00:52:43,009
that has to happen on each step and so

1049
00:52:40,880 --> 00:52:45,200
if we wanted to it would be really

1050
00:52:43,010 --> 00:52:56,150
pretty simple for me to just do this

1051
00:52:45,199 --> 00:52:58,909
dynamically right and so one of the

1052
00:52:56,150 --> 00:53:05,000
things that I want to be able to do here

1053
00:52:58,909 --> 00:53:07,819
is I want to be able to have a way to

1054
00:53:05,000 --> 00:53:09,980
decouple the spatial grid size from the

1055
00:53:07,820 --> 00:53:12,260
voxel grid size because I actually need

1056
00:53:09,980 --> 00:53:14,240
the spatial grid to be way bigger like

1057
00:53:12,260 --> 00:53:17,300
ideally this loop probably wants to

1058
00:53:14,239 --> 00:53:19,219
execute you know four times probably or

1059
00:53:17,300 --> 00:53:23,170
something like that like we probably

1060
00:53:19,219 --> 00:53:26,419
want to make sure that the spatial grid

1061
00:53:23,170 --> 00:53:30,110
gets some lifting out of this because I

1062
00:53:26,420 --> 00:53:35,119
have to do a bunch of work to get here

1063
00:53:30,110 --> 00:53:37,309
right and I don't just want to skip over

1064
00:53:35,119 --> 00:53:39,859
everything because the actual loop

1065
00:53:37,309 --> 00:53:42,230
overhead of like loading up this node

1066
00:53:39,860 --> 00:53:44,300
and seeing what's in it is not nothing

1067
00:53:42,230 --> 00:53:48,079
and so we want to make sure that we can

1068
00:53:44,300 --> 00:53:49,850
test for a few hits each time through

1069
00:53:48,079 --> 00:53:52,639
otherwise we're really just wasting our

1070
00:53:49,849 --> 00:53:56,449
time with the actual walk right the

1071
00:53:52,639 --> 00:54:00,489
actual grid walk so what I'd like to do

1072
00:53:56,449 --> 00:54:03,379
there is just see to what extent we

1073
00:54:00,489 --> 00:54:06,079
could make that be a faster thing and I

1074
00:54:03,380 --> 00:54:08,329
think we have some ways of predicting

1075
00:54:06,079 --> 00:54:11,389
that so if we take a look at the cost

1076
00:54:08,329 --> 00:54:13,789
metric here and we look at what the max

1077
00:54:11,389 --> 00:54:15,940
cost per Rea is at the moment that max

1078
00:54:13,789 --> 00:54:19,279
cost per Rea is 16 which means it will

1079
00:54:15,940 --> 00:54:20,599
look through a lot of these right and so

1080
00:54:19,280 --> 00:54:22,610
what I'm interested in saying here is

1081
00:54:20,599 --> 00:54:26,989
like what if this were much lower so

1082
00:54:22,610 --> 00:54:30,050
what if we were gonna do much fewer grid

1083
00:54:26,989 --> 00:54:31,759
cells right what would that look like in

1084
00:54:30,050 --> 00:54:34,400
terms of performance and I'm just going

1085
00:54:31,760 --> 00:54:36,069
to try running it to see what the

1086
00:54:34,400 --> 00:54:38,240
for instance of being roughly speaking

1087
00:54:36,068 --> 00:54:41,329
again this will be erroneous result so

1088
00:54:38,239 --> 00:54:43,788
it's hard to say so if we were going to

1089
00:54:41,329 --> 00:54:45,798
loop through a lot less stuff you can

1090
00:54:43,789 --> 00:54:47,089
see that we get a reasonably big

1091
00:54:45,798 --> 00:54:49,358
speed-up it's not as big as I would have

1092
00:54:47,088 --> 00:54:52,000
hoped it's about a one-second speed-up

1093
00:54:49,358 --> 00:54:57,769
it's not as good as I would have hoped

1094
00:54:52,000 --> 00:55:00,889
so it's a little bit hard to say it's a

1095
00:54:57,769 --> 00:55:03,259
little bit hard to say why right another

1096
00:55:00,889 --> 00:55:05,358
question I have here is we'll wait a

1097
00:55:03,260 --> 00:55:07,278
second so suppose I were to break out

1098
00:55:05,358 --> 00:55:11,778
immediately so suppose I were to do

1099
00:55:07,278 --> 00:55:14,088
something like this so we're not going

1100
00:55:11,778 --> 00:55:19,548
to write over anything what a

1101
00:55:14,088 --> 00:55:26,000
performance if I get then just curious

1102
00:55:19,548 --> 00:55:28,759
so one of the things that you can see

1103
00:55:26,000 --> 00:55:32,420
here that's pretty interesting is if I

1104
00:55:28,760 --> 00:55:37,278
actually look at what that's telling me

1105
00:55:32,420 --> 00:55:39,798
about the code so this is with just like

1106
00:55:37,278 --> 00:55:47,659
I know what you want to call it this is

1107
00:55:39,798 --> 00:55:53,838
just with grid bookends only it takes me

1108
00:55:47,659 --> 00:55:55,219
four point six seven nine it takes me

1109
00:55:53,838 --> 00:55:59,480
four point six seven nine two eight

1110
00:55:55,219 --> 00:56:01,519
eight these are all in seconds to do

1111
00:55:59,480 --> 00:56:04,880
nothing so literally just to come in

1112
00:56:01,519 --> 00:56:08,088
here and leave right that's all we're

1113
00:56:04,880 --> 00:56:10,400
doing so it it really just has to set

1114
00:56:08,088 --> 00:56:14,420
those two things and then and then exit

1115
00:56:10,400 --> 00:56:16,849
out um and that's kind of scary

1116
00:56:14,420 --> 00:56:20,210
right because that means that literally

1117
00:56:16,849 --> 00:56:26,720
just the load ops on the texels like

1118
00:56:20,210 --> 00:56:30,068
just this here is sufficient to tank the

1119
00:56:26,719 --> 00:56:30,068
performance like hard

1120
00:56:33,809 --> 00:56:47,739
I'm not really sure how else to

1121
00:56:36,579 --> 00:56:51,880
interpret that I mean I could be missing

1122
00:56:47,739 --> 00:56:56,049
something there but I'm not really sure

1123
00:56:51,880 --> 00:56:57,789
how else to interpret that let's talk

1124
00:56:56,050 --> 00:57:01,089
about a couple things though here

1125
00:56:57,789 --> 00:57:05,349
because actually I want to make sure

1126
00:57:01,088 --> 00:57:12,880
we're not doing something dumb so if we

1127
00:57:05,349 --> 00:57:15,010
look at how these are getting stored so

1128
00:57:12,880 --> 00:57:19,210
yeah so here let's take a look at this

1129
00:57:15,010 --> 00:57:22,119
real quick because I realize I'm

1130
00:57:19,210 --> 00:57:27,039
actually very nervous right now so let's

1131
00:57:22,119 --> 00:57:34,838
suppose we go look at the grid raycast

1132
00:57:27,039 --> 00:57:39,849
call I wish I actually I believe is in

1133
00:57:34,838 --> 00:57:42,179
full cast right so if we look at what's

1134
00:57:39,849 --> 00:57:47,890
happening with the grid raycast column

1135
00:57:42,179 --> 00:57:50,919
and we extrapolate what's going on here

1136
00:57:47,889 --> 00:57:53,679
you can kind of see where we're doing

1137
00:57:50,920 --> 00:57:57,730
this spec Texel a spec text will be

1138
00:57:53,679 --> 00:57:59,649
stuff where it's being written to so if

1139
00:57:57,730 --> 00:58:03,159
we think about what's actually happening

1140
00:57:59,650 --> 00:58:07,470
here and we compute these numbers they

1141
00:58:03,159 --> 00:58:13,868
are actually really mildly terrifying

1142
00:58:07,469 --> 00:58:17,799
let me just see let me just see if I'm

1143
00:58:13,869 --> 00:58:23,019
right to be scared so if I come in here

1144
00:58:17,800 --> 00:58:29,740
and I ask some basic questions about my

1145
00:58:23,019 --> 00:58:38,369
data I want to know what the alignment

1146
00:58:29,739 --> 00:58:38,368
is of my atlas cells

1147
00:58:38,730 --> 00:58:43,780
so if I take a look at this and I say

1148
00:58:42,730 --> 00:58:45,400
what are the alignments going to be on

1149
00:58:43,780 --> 00:58:51,040
these things well I need to know a

1150
00:58:45,400 --> 00:58:52,750
couple pieces of information right if I

1151
00:58:51,039 --> 00:58:56,099
go I think that's over in the OpenGL

1152
00:58:52,750 --> 00:58:58,239
side of things I don't actually remember

1153
00:58:56,099 --> 00:59:03,969
where that actually is but I think so

1154
00:58:58,239 --> 00:59:06,489
yeah so you can see here we have an X Y

1155
00:59:03,969 --> 00:59:07,809
Z I don't really care too much about

1156
00:59:06,489 --> 00:59:10,239
that because I know that I'm writing to

1157
00:59:07,809 --> 00:59:11,710
one of these at a time and we take a

1158
00:59:10,239 --> 00:59:13,329
look at this light color lookup squared

1159
00:59:11,710 --> 00:59:18,730
and we have light octahedral map dim

1160
00:59:13,329 --> 00:59:24,690
plus tubes so lighting octahedral map

1161
00:59:18,730 --> 00:59:27,699
gym plus 2 and so currently it's 8 mm

1162
00:59:24,690 --> 00:59:32,559
and then it's gonna be plus tude here

1163
00:59:27,699 --> 00:59:35,529
right that's that's just what says so I

1164
00:59:32,559 --> 00:59:38,070
know that I've got something that looks

1165
00:59:35,530 --> 00:59:38,070
like this

1166
00:59:40,108 --> 00:59:45,509
right and then around it

1167
00:59:45,599 --> 00:59:53,469
I've got something looks like that you

1168
00:59:48,940 --> 00:59:54,400
know and what is actually gonna happen

1169
00:59:53,469 --> 01:00:06,689
here

1170
00:59:54,400 --> 01:00:06,690
you know I'm saying well I'm gonna have

1171
01:00:06,719 --> 01:00:14,939
this right and this is going to be like

1172
01:00:11,500 --> 01:00:14,940
my Atlas oops

1173
01:00:18,730 --> 01:00:24,440
and each one of these is gonna be a

1174
01:00:21,559 --> 01:00:30,019
ten-by-ten right I mean that's what

1175
01:00:24,440 --> 01:00:33,110
we're saying here because there's a one

1176
01:00:30,019 --> 01:00:36,829
pixel border on each side so we've got

1177
01:00:33,110 --> 01:00:42,410
little 8x8 in here and then ten by tens

1178
01:00:36,829 --> 01:00:44,029
and these are stacked right no that's

1179
01:00:42,409 --> 01:00:45,769
fine I don't have a problem with it

1180
01:00:44,030 --> 01:00:50,600
it's all great everyone loves it science

1181
01:00:45,769 --> 01:00:55,070
cool but inside each of these cells

1182
01:00:50,599 --> 01:00:58,940
we're storing an RGB value right I want

1183
01:00:55,070 --> 01:01:03,860
to say and the RGB value at the moment

1184
01:00:58,940 --> 01:01:06,590
our floats so an RGB triple assuming

1185
01:01:03,860 --> 01:01:13,940
that this is what I think it is is going

1186
01:01:06,590 --> 01:01:18,140
to be that's three channels right times

1187
01:01:13,940 --> 01:01:23,420
four bytes per float so that equals 12

1188
01:01:18,139 --> 01:01:27,829
bytes so each one of these is going to

1189
01:01:23,420 --> 01:01:30,500
be 12 bytes long and if I look at what

1190
01:01:27,829 --> 01:01:36,920
that equates to in this particular

1191
01:01:30,500 --> 01:01:40,940
system here is where the terror comes

1192
01:01:36,920 --> 01:01:43,760
from a 10 by 10 square and I don't give

1193
01:01:40,940 --> 01:01:53,050
a crap about why so I don't care about

1194
01:01:43,760 --> 01:01:58,400
why but a 10 wide tile size at 12 bytes

1195
01:01:53,050 --> 01:02:03,640
per Texel is going to be a horizontal

1196
01:01:58,400 --> 01:02:10,820
span of 10 times 12 equals 120 bytes

1197
01:02:03,639 --> 01:02:16,250
right and I know that I'm issuing my X

1198
01:02:10,820 --> 01:02:20,269
slices per thread right I mean that's

1199
01:02:16,250 --> 01:02:22,849
just what we're doing and so if I'm

1200
01:02:20,269 --> 01:02:24,739
issuing X slices per thread what does

1201
01:02:22,849 --> 01:02:28,579
that tell you about where the threads

1202
01:02:24,739 --> 01:02:30,589
will be writing well if we look at where

1203
01:02:28,579 --> 01:02:31,789
my threads are writing if we take a

1204
01:02:30,590 --> 01:02:35,780
blow-up of this

1205
01:02:31,789 --> 01:02:40,639
tickler situation this is going to be

1206
01:02:35,780 --> 01:02:42,260
say thread a and it's a hundred and

1207
01:02:40,639 --> 01:02:45,920
twenty eight a hundred and twenty bytes

1208
01:02:42,260 --> 01:02:49,780
and this is going to be thread B and

1209
01:02:45,920 --> 01:02:57,789
this is one hundred and twenty bytes

1210
01:02:49,780 --> 01:02:57,790
right well a hundred and twenty bytes

1211
01:02:58,900 --> 01:03:06,470
where does that fall on the cache line

1212
01:03:01,250 --> 01:03:10,880
boundary on X 64 a cache line is 64

1213
01:03:06,469 --> 01:03:13,009
bytes right when we allocated this it

1214
01:03:10,880 --> 01:03:15,019
probably got cache line aligned because

1215
01:03:13,010 --> 01:03:17,090
that's probably just what happened if it

1216
01:03:15,019 --> 01:03:18,920
didn't get cache line aligned then we're

1217
01:03:17,090 --> 01:03:20,269
in even worse shape and to be honest I

1218
01:03:18,920 --> 01:03:22,820
don't know that we ever bothered cache

1219
01:03:20,269 --> 01:03:24,170
line aligning in the first place so we

1220
01:03:22,820 --> 01:03:27,289
could be even worse than what I'm about

1221
01:03:24,170 --> 01:03:28,760
to say but honestly I don't think there

1222
01:03:27,289 --> 01:03:32,750
isn't even worse because I think it's

1223
01:03:28,760 --> 01:03:34,640
just worse so let's suppose that we

1224
01:03:32,750 --> 01:03:36,590
cache line aligned this thing so that

1225
01:03:34,639 --> 01:03:38,929
the starting offset is actually on a

1226
01:03:36,590 --> 01:03:41,240
cache line boundary well if this is on a

1227
01:03:38,929 --> 01:03:44,049
cache line boundary and we go 64 in

1228
01:03:41,239 --> 01:03:46,189
we're gonna be like well no that's wrong

1229
01:03:44,050 --> 01:03:48,890
there we go 64 in we're gonna be

1230
01:03:46,190 --> 01:03:50,170
somewhere like here and we go another 64

1231
01:03:48,889 --> 01:03:53,409
in we're gonna be somewhere like here

1232
01:03:50,170 --> 01:03:57,050
right we're gonna be eight bytes

1233
01:03:53,409 --> 01:03:59,599
specifically right this distance here is

1234
01:03:57,050 --> 01:04:01,730
eight bytes we're gonna be eight bytes

1235
01:03:59,599 --> 01:04:05,299
into the next tile for the cache line

1236
01:04:01,730 --> 01:04:08,059
boundary what that means is that these

1237
01:04:05,300 --> 01:04:11,360
two threads who were trying to operate

1238
01:04:08,059 --> 01:04:21,679
completely independently now have a

1239
01:04:11,360 --> 01:04:23,780
mutex a lock that locks them up right so

1240
01:04:21,679 --> 01:04:27,789
thread a and thread B which we're trying

1241
01:04:23,780 --> 01:04:32,150
to do completely parallel work are not

1242
01:04:27,789 --> 01:04:36,889
doing that and they're not doing that

1243
01:04:32,150 --> 01:04:41,980
because they now do a hardware mutex

1244
01:04:36,889 --> 01:04:41,980
between their accesses right

1245
01:04:43,269 --> 01:04:53,150
so while I can't say for sure how much

1246
01:04:51,559 --> 01:05:01,039
of a performance impact that's having

1247
01:04:53,150 --> 01:05:04,970
that's freaking terrible and very very

1248
01:05:01,039 --> 01:05:07,789
bad we absolutely don't want to be

1249
01:05:04,969 --> 01:05:09,980
deploying a mutex in routines that don't

1250
01:05:07,789 --> 01:05:14,090
need them and we are we didn't write one

1251
01:05:09,980 --> 01:05:15,559
but we absolutely are this is one of the

1252
01:05:14,090 --> 01:05:18,700
things that's always very important to

1253
01:05:15,559 --> 01:05:20,389
know when multi-threaded programming

1254
01:05:18,699 --> 01:05:21,889
generally speaking well written

1255
01:05:20,389 --> 01:05:25,129
multi-threaded programs just don't have

1256
01:05:21,889 --> 01:05:27,139
mutexes there's usually a dispatching

1257
01:05:25,130 --> 01:05:29,630
kind of a mutex somewhere but well

1258
01:05:27,139 --> 01:05:32,839
written code for multi-threading just

1259
01:05:29,630 --> 01:05:35,930
doesn't use them you basically figure

1260
01:05:32,840 --> 01:05:39,200
out ways to make the work so that once

1261
01:05:35,929 --> 01:05:40,429
it's distributed it just happens and if

1262
01:05:39,199 --> 01:05:41,839
you have highly contended data

1263
01:05:40,429 --> 01:05:47,239
structures you typically try to attack

1264
01:05:41,840 --> 01:05:49,579
those with others schemes so I think in

1265
01:05:47,239 --> 01:05:52,039
this case we've ended up with a mutex in

1266
01:05:49,579 --> 01:05:53,480
our threaded code and that's terrible

1267
01:05:52,039 --> 01:05:55,789
you should really never have them and I

1268
01:05:53,480 --> 01:05:58,039
don't want them in any high performance

1269
01:05:55,789 --> 01:05:59,420
code if you're doing a low performance

1270
01:05:58,039 --> 01:06:00,949
code and the multi settings just for

1271
01:05:59,420 --> 01:06:02,750
like background loading or something

1272
01:06:00,949 --> 01:06:05,389
that's totally fine we've Texel all you

1273
01:06:02,750 --> 01:06:07,099
want but in high performance code you

1274
01:06:05,389 --> 01:06:10,819
really shouldn't have them this is just

1275
01:06:07,099 --> 01:06:14,349
very bad right because what's gonna

1276
01:06:10,820 --> 01:06:17,390
happen is inside the actual x64

1277
01:06:14,349 --> 01:06:19,368
cache controllers they're going to be

1278
01:06:17,389 --> 01:06:21,710
doing locking all the time between my

1279
01:06:19,369 --> 01:06:23,210
threads it's going to lock thread B well

1280
01:06:21,710 --> 01:06:24,679
thread a is running that line and then

1281
01:06:23,210 --> 01:06:28,250
it's gonna lock thread a well thread B's

1282
01:06:24,679 --> 01:06:30,259
running to that line and while I don't

1283
01:06:28,250 --> 01:06:35,030
necessarily know how much time that's

1284
01:06:30,260 --> 01:06:37,640
going to cost me I definitely know that

1285
01:06:35,030 --> 01:06:39,769
it can cost me time as any mutex can and

1286
01:06:37,639 --> 01:06:41,989
so rather than try to measure the amount

1287
01:06:39,769 --> 01:06:43,759
of time that's that that mutex is

1288
01:06:41,989 --> 01:06:45,229
costing me I think what I'd much rather

1289
01:06:43,760 --> 01:06:51,859
do is just get rid of it because we

1290
01:06:45,230 --> 01:06:54,019
should be able to okay so I think what

1291
01:06:51,858 --> 01:06:56,119
I'd like to try and do here you see

1292
01:06:54,019 --> 01:06:56,570
whether I can get away with not having

1293
01:06:56,119 --> 01:07:00,829
to do

1294
01:06:56,570 --> 01:07:02,660
change anything about the structure of

1295
01:07:00,829 --> 01:07:05,019
the system and I'm just gonna see if

1296
01:07:02,659 --> 01:07:09,739
there would if there might be some way

1297
01:07:05,019 --> 01:07:14,000
that I can change that writing process

1298
01:07:09,739 --> 01:07:16,389
to not have the fall sharing so if we

1299
01:07:14,000 --> 01:07:19,579
take a look at the way the work callback

1300
01:07:16,389 --> 01:07:22,659
happens here you can see that we do zy

1301
01:07:19,579 --> 01:07:26,090
loops and X is the distribution variable

1302
01:07:22,659 --> 01:07:31,429
so what that's going to mean is that we

1303
01:07:26,090 --> 01:07:34,150
are walking downward right it's it's

1304
01:07:31,429 --> 01:07:36,529
this level walk so what I'm wondering is

1305
01:07:34,150 --> 01:07:38,450
because it's not too much worse to just

1306
01:07:36,530 --> 01:07:44,180
walk on X's it's a little bit perhaps

1307
01:07:38,449 --> 01:07:46,429
worse for it might be slightly worse

1308
01:07:44,179 --> 01:07:48,559
because it's you know not as good in

1309
01:07:46,429 --> 01:07:51,649
terms of the dimension in terms of

1310
01:07:48,559 --> 01:07:55,000
splitting I'm just wondering if maybe we

1311
01:07:51,650 --> 01:07:56,840
can just walk the other way right

1312
01:07:55,000 --> 01:07:59,150
because there's two things I can do here

1313
01:07:56,840 --> 01:08:00,710
one is we can walk the other way one is

1314
01:07:59,150 --> 01:08:04,309
I can change the orientation of the map

1315
01:08:00,710 --> 01:08:06,139
just change the look up right so that

1316
01:08:04,309 --> 01:08:08,380
we're actually dispatching the other way

1317
01:08:06,139 --> 01:08:13,940
around so that on X as we move down

1318
01:08:08,380 --> 01:08:17,659
instead of over right so I could do

1319
01:08:13,940 --> 01:08:21,380
either one and I think for the sake of

1320
01:08:17,659 --> 01:08:25,399
efficacy here let me just check to make

1321
01:08:21,380 --> 01:08:29,440
sure what those what those sizes are cuz

1322
01:08:25,399 --> 01:08:29,439
I don't remember so

1323
01:08:33,250 --> 01:08:40,600
so like it's 24 16 16 so the fact that

1324
01:08:37,989 --> 01:08:41,858
you know just to be a little bit clearer

1325
01:08:40,600 --> 01:08:43,710
about this because it's going on in my

1326
01:08:41,859 --> 01:08:47,588
head but you don't necessarily know

1327
01:08:43,710 --> 01:08:48,970
what's going on in my head when I look

1328
01:08:47,588 --> 01:08:50,739
at that breakdown you know I want to

1329
01:08:48,970 --> 01:08:53,680
distribute the work over X's because

1330
01:08:50,739 --> 01:08:55,479
there's more individual units of work so

1331
01:08:53,680 --> 01:08:56,950
let's say you're on some fancy new

1332
01:08:55,479 --> 01:09:00,519
processor like a thread ripper and you

1333
01:08:56,949 --> 01:09:04,059
have 30 core 32 cores 32 cores lying

1334
01:09:00,520 --> 01:09:06,460
around well I can't actually use as many

1335
01:09:04,060 --> 01:09:13,450
of those 32 cores if I'm distributing on

1336
01:09:06,460 --> 01:09:15,819
a 16 on 16 separate breaks

1337
01:09:13,449 --> 01:09:19,539
whereas I could write if I was doing 24

1338
01:09:15,819 --> 01:09:21,850
or separate breaks right I can just hand

1339
01:09:19,539 --> 01:09:25,989
work two more cores if I have more

1340
01:09:21,850 --> 01:09:28,810
individual pieces to break up and so you

1341
01:09:25,989 --> 01:09:31,028
know we can look at this in different

1342
01:09:28,810 --> 01:09:35,560
ways but the other thing I could do also

1343
01:09:31,029 --> 01:09:37,120
is is split along y&amp;z let's say but then

1344
01:09:35,560 --> 01:09:39,160
write in X's right so there's I think

1345
01:09:37,119 --> 01:09:41,439
there's things I can do to make this

1346
01:09:39,159 --> 01:09:43,479
work so I'm just gonna do it that way

1347
01:09:41,439 --> 01:09:45,729
the more advanced way to do it and what

1348
01:09:43,479 --> 01:09:48,189
I would do if I weren't on stream which

1349
01:09:45,729 --> 01:09:50,769
always makes it take forever to do

1350
01:09:48,189 --> 01:09:52,568
everything if I was just programming it

1351
01:09:50,770 --> 01:09:55,540
myself and could be fast about it I

1352
01:09:52,569 --> 01:09:58,990
would probably just change the Atlas to

1353
01:09:55,539 --> 01:10:00,269
be X indexed going down so I think

1354
01:09:58,989 --> 01:10:02,109
that's probably a better solution

1355
01:10:00,270 --> 01:10:03,610
because we're on stream I'm going to do

1356
01:10:02,109 --> 01:10:04,960
a slightly weaker solution but you know

1357
01:10:03,609 --> 01:10:06,729
hopefully everyone can understand how we

1358
01:10:04,960 --> 01:10:08,079
would do that I just anything where

1359
01:10:06,729 --> 01:10:09,879
you're changing indexing there's a bunch

1360
01:10:08,079 --> 01:10:11,079
of bugs that you could make and it's

1361
01:10:09,880 --> 01:10:12,819
hard for me to concentrate when I have

1362
01:10:11,079 --> 01:10:14,199
to explain everything and also there's

1363
01:10:12,819 --> 01:10:18,489
the fact that it just takes a little bit

1364
01:10:14,199 --> 01:10:20,380
longer to do on stream all the time so I

1365
01:10:18,489 --> 01:10:23,710
think what I would say here is let's

1366
01:10:20,380 --> 01:10:26,590
just try doing this split a little bit

1367
01:10:23,710 --> 01:10:30,100
differently so if we were to pass wise

1368
01:10:26,590 --> 01:10:34,409
here instead of X's and loop over the

1369
01:10:30,100 --> 01:10:34,410
X's so something more like this right

1370
01:10:34,859 --> 01:10:40,509
there shouldn't be really any difference

1371
01:10:37,659 --> 01:10:42,099
between these two things so if I just do

1372
01:10:40,510 --> 01:10:43,600
that

1373
01:10:42,100 --> 01:10:45,710
I shouldn't really have to do anything

1374
01:10:43,600 --> 01:10:48,829
different

1375
01:10:45,710 --> 01:10:52,760
it should all just work but now each

1376
01:10:48,829 --> 01:10:54,590
thread is writing to its own series of

1377
01:10:52,760 --> 01:10:56,780
cache lines and there wouldn't be that

1378
01:10:54,590 --> 01:10:59,390
sort of false sharing across each of the

1379
01:10:56,779 --> 01:11:01,729
boundaries so I just want to do this as

1380
01:10:59,390 --> 01:11:04,070
a test to figure out whether or not this

1381
01:11:01,729 --> 01:11:06,379
is costing me anything huge and again

1382
01:11:04,069 --> 01:11:08,000
this comes from looking at this number

1383
01:11:06,380 --> 01:11:10,039
and being concerned about how large it

1384
01:11:08,000 --> 01:11:13,510
is because that means that really the

1385
01:11:10,039 --> 01:11:16,550
raycasting itself was accounting for

1386
01:11:13,510 --> 01:11:18,440
less than three seconds out of the whole

1387
01:11:16,550 --> 01:11:22,270
out of the seven seconds time that's a

1388
01:11:18,439 --> 01:11:25,399
huge amount of time to be spending not

1389
01:11:22,270 --> 01:11:26,780
raycasting right and I just want to know

1390
01:11:25,399 --> 01:11:28,279
where that number is coming from and so

1391
01:11:26,779 --> 01:11:29,599
this is one place that I kind of got

1392
01:11:28,279 --> 01:11:30,920
sorted I just want to get it out of the

1393
01:11:29,600 --> 01:11:34,000
picture so that I know that I'm not

1394
01:11:30,920 --> 01:11:36,890
looking at just a bunch of mutex crap as

1395
01:11:34,000 --> 01:11:38,988
I go to start trying to Ferrara where

1396
01:11:36,890 --> 01:11:40,670
that work is coming from so I'm gonna

1397
01:11:38,988 --> 01:11:42,409
change this to dispatching long why is

1398
01:11:40,670 --> 01:11:43,579
again that should be really really

1399
01:11:42,409 --> 01:11:46,460
straightforward

1400
01:11:43,579 --> 01:11:50,269
I would hope I mean I guess I don't know

1401
01:11:46,460 --> 01:11:52,430
write the X odd value I don't know if

1402
01:11:50,270 --> 01:11:54,370
we're using this right now I don't think

1403
01:11:52,430 --> 01:11:58,909
we are so I'm just gonna get rid of it

1404
01:11:54,369 --> 01:12:01,399
and I'm just gonna distribute the work

1405
01:11:58,909 --> 01:12:03,260
online so now I'm distributing the work

1406
01:12:01,399 --> 01:12:05,569
on Y and in theory I shouldn't really

1407
01:12:03,260 --> 01:12:07,489
get substantially different results

1408
01:12:05,569 --> 01:12:13,250
right I should basically be producing

1409
01:12:07,488 --> 01:12:14,988
the same general results here but I want

1410
01:12:13,250 --> 01:12:19,069
to see what the difference in speed is

1411
01:12:14,988 --> 01:12:22,069
so it's not particularly much right it's

1412
01:12:19,069 --> 01:12:23,599
not it's not it's still not really

1413
01:12:22,069 --> 01:12:26,590
telling me where most that time here but

1414
01:12:23,600 --> 01:12:31,310
it is substantial I mean it was a

1415
01:12:26,590 --> 01:12:33,680
measurable this difference so unless

1416
01:12:31,310 --> 01:12:35,690
that just comes from some you know other

1417
01:12:33,680 --> 01:12:37,520
artifact of it I think I would probably

1418
01:12:35,689 --> 01:12:40,129
leave that in place for now as we go

1419
01:12:37,520 --> 01:12:44,780
forward just to get that extra time out

1420
01:12:40,130 --> 01:12:47,869
of there so at this point I'm tempted to

1421
01:12:44,779 --> 01:12:49,759
wonder if maybe again also one of the

1422
01:12:47,869 --> 01:12:53,050
other things that's happening at the

1423
01:12:49,760 --> 01:12:56,119
moment is because we're using actual

1424
01:12:53,050 --> 01:12:59,050
floating-point values the size of these

1425
01:12:56,119 --> 01:13:00,578
maps is really substantial and I'm

1426
01:12:59,050 --> 01:13:02,730
guessing that you know we could be

1427
01:13:00,578 --> 01:13:06,880
seeing there's honestly just a lot of

1428
01:13:02,729 --> 01:13:08,948
memory traffic as well and so just

1429
01:13:06,880 --> 01:13:11,319
thinking about how the perf on this is

1430
01:13:08,948 --> 01:13:13,328
going to go it may mean that we are at

1431
01:13:11,319 --> 01:13:17,738
the point where if we want this perf to

1432
01:13:13,328 --> 01:13:19,808
be getting better we may have to also

1433
01:13:17,738 --> 01:13:23,198
switch the lighting at list from RGB x'

1434
01:13:19,809 --> 01:13:27,699
to something more compact right so if we

1435
01:13:23,198 --> 01:13:38,469
take a look at how big these are if I go

1436
01:13:27,698 --> 01:13:40,598
ahead and where was that here it is so

1437
01:13:38,469 --> 01:13:45,448
if I take a look at how big these

1438
01:13:40,599 --> 01:13:45,449
atlases are it's seven megabytes right

1439
01:14:00,369 --> 01:14:04,869
I don't really think there should be

1440
01:14:03,010 --> 01:14:07,030
much of a problem with streaming the

1441
01:14:04,869 --> 01:14:10,239
seven megabytes in so the only thing I'm

1442
01:14:07,029 --> 01:14:14,829
worried about is I'm wondering if

1443
01:14:10,239 --> 01:14:20,920
perhaps the problem here is that the

1444
01:14:14,829 --> 01:14:23,409
cash is in the the streaming predictor

1445
01:14:20,920 --> 01:14:26,800
is not able to actually know what the

1446
01:14:23,409 --> 01:14:28,659
heck it's supposed to be doing and so

1447
01:14:26,800 --> 01:14:31,810
we're stalling out on each of these

1448
01:14:28,659 --> 01:14:37,180
loads well it really just be one load

1449
01:14:31,810 --> 01:14:40,650
the first one it's a weak hypothesis I

1450
01:14:37,180 --> 01:14:43,680
don't think it's probably very important

1451
01:14:40,649 --> 01:14:46,839
so that could be something

1452
01:14:43,680 --> 01:14:50,050
another thing that's highly likely is

1453
01:14:46,840 --> 01:14:54,489
that this is the culprit here because

1454
01:14:50,050 --> 01:14:56,590
this code is slow and crappy right so

1455
01:14:54,489 --> 01:14:58,840
again because we're seeing such a huge

1456
01:14:56,590 --> 01:15:00,699
amount of time spent outside the raycast

1457
01:14:58,840 --> 01:15:02,560
at the moment I feel like doing the

1458
01:15:00,699 --> 01:15:04,359
performance analysis of that is gonna be

1459
01:15:02,560 --> 01:15:06,310
way more important right now than what I

1460
01:15:04,359 --> 01:15:08,289
was about to do which I also want to do

1461
01:15:06,310 --> 01:15:10,570
that I think will be fast but I mean you

1462
01:15:08,289 --> 01:15:12,369
you got to focus on where the time

1463
01:15:10,569 --> 01:15:14,590
stinks man and right now over half the

1464
01:15:12,369 --> 01:15:18,010
time was being spent not raycasting so I

1465
01:15:14,590 --> 01:15:19,480
think we got to get that down and my

1466
01:15:18,010 --> 01:15:22,239
only goal is to make this faster I don't

1467
01:15:19,479 --> 01:15:24,429
care how so I'm gonna go ahead and try

1468
01:15:22,239 --> 01:15:28,869
to figure out how we get that to happen

1469
01:15:24,430 --> 01:15:30,610
so I'm gonna take a look here at what's

1470
01:15:28,869 --> 01:15:32,859
happening inside for example the compute

1471
01:15:30,609 --> 01:15:35,819
voxel irradiance at part of things I

1472
01:15:32,859 --> 01:15:37,989
want to see if nerfing that particular

1473
01:15:35,819 --> 01:15:40,509
routine are simplifying that particular

1474
01:15:37,989 --> 01:15:42,760
routine drops the timing dramatically as

1475
01:15:40,510 --> 01:15:45,780
well so if we go to compute voxel

1476
01:15:42,760 --> 01:15:49,720
irradiance at what if I just make this

1477
01:15:45,779 --> 01:15:52,750
be much more simplified so rather than

1478
01:15:49,720 --> 01:15:54,970
doing say this advanced light look up

1479
01:15:52,750 --> 01:15:58,899
here where we do a bunch of blending and

1480
01:15:54,970 --> 01:16:02,470
various other things what if instead I

1481
01:15:58,899 --> 01:16:05,019
just used like a single one so maybe I

1482
01:16:02,470 --> 01:16:07,750
do an else here and I see like how much

1483
01:16:05,020 --> 01:16:14,430
does it cost if I just did one lookup of

1484
01:16:07,750 --> 01:16:14,430
the tile something like this

1485
01:16:16,210 --> 01:16:28,069
and let all of the math still happen but

1486
01:16:19,488 --> 01:16:30,888
we just keep it you know where we just

1487
01:16:28,069 --> 01:16:35,479
have lots of spam in there and we don't

1488
01:16:30,889 --> 01:16:36,739
actually have to do what what is the

1489
01:16:35,479 --> 01:16:42,488
problem here

1490
01:16:36,738 --> 01:16:42,488
get tile clamped light out its Texel

1491
01:16:43,658 --> 01:16:50,539
alright and again this is just me trying

1492
01:16:48,139 --> 01:16:52,159
to investigate by poking because it's

1493
01:16:50,539 --> 01:16:57,979
usually the easiest way to get real

1494
01:16:52,158 --> 01:17:00,319
results out I just want to see what is

1495
01:16:57,979 --> 01:17:03,589
taking my time so you can see that

1496
01:17:00,319 --> 01:17:06,109
getting a reduced down to 3 there which

1497
01:17:03,590 --> 01:17:09,289
is good but still not probably quite as

1498
01:17:06,109 --> 01:17:11,389
low as I would hope let's try to be a

1499
01:17:09,289 --> 01:17:13,099
little bit more aggressive rather than

1500
01:17:11,389 --> 01:17:15,949
getting rid of that let's get rid of the

1501
01:17:13,099 --> 01:17:19,039
whole thing and see what happens so I'm

1502
01:17:15,948 --> 01:17:21,589
just going to do just the get relative P

1503
01:17:19,039 --> 01:17:34,399
computation and then I'm literally going

1504
01:17:21,590 --> 01:17:36,619
to return that as the result ok so now

1505
01:17:34,399 --> 01:17:39,019
I've nerfed that entire routine so it's

1506
01:17:36,618 --> 01:17:40,908
just not happening at all

1507
01:17:39,020 --> 01:17:44,119
and I'm gonna go ahead and run it and

1508
01:17:40,908 --> 01:17:46,250
just see what happens here okay so now

1509
01:17:44,118 --> 01:17:53,109
we're approaching the none value which

1510
01:17:46,250 --> 01:17:55,429
is what I want so I guess it it has

1511
01:17:53,109 --> 01:17:57,889
gotten to the point where we probably

1512
01:17:55,429 --> 01:18:03,260
need to start addressing this routine

1513
01:17:57,889 --> 01:18:05,779
because it sucks right and there's a lot

1514
01:18:03,260 --> 01:18:12,230
of things that we can do to try and make

1515
01:18:05,779 --> 01:18:14,960
this routine not suck and and I think

1516
01:18:12,229 --> 01:18:20,149
we're probably just going to have to do

1517
01:18:14,960 --> 01:18:21,448
those things now that's basically all

1518
01:18:20,149 --> 01:18:25,559
there is to say

1519
01:18:21,448 --> 01:18:28,139
so let's go ahead and see to what extent

1520
01:18:25,560 --> 01:18:34,199
it's just the lookups that are our

1521
01:18:28,140 --> 01:18:37,039
problem here if I go ahead and take this

1522
01:18:34,198 --> 01:18:39,509
whole clamping if zero

1523
01:18:37,039 --> 01:18:44,539
blah-blah-blah-blah-blah if if we get

1524
01:18:39,510 --> 01:18:49,079
rid of just the tile part of this right

1525
01:18:44,539 --> 01:18:51,899
and we're we're doing these tile samples

1526
01:18:49,079 --> 01:18:53,880
here I say okay do do everything that

1527
01:18:51,899 --> 01:18:56,759
you were going to do before so it's it's

1528
01:18:53,880 --> 01:18:59,100
literally all the same math that you

1529
01:18:56,760 --> 01:18:59,429
were gonna do but instead and you know

1530
01:18:59,100 --> 01:19:02,039
what

1531
01:18:59,429 --> 01:19:06,469
what does clamp zero one do at the

1532
01:19:02,039 --> 01:19:06,469
moment can we just look at that please

1533
01:19:12,140 --> 01:19:16,770
yes a clamp clamp is kind of a piece of

1534
01:19:15,689 --> 01:19:23,428
crap

1535
01:19:16,770 --> 01:19:29,280
is another problem here so I'm gonna get

1536
01:19:23,429 --> 01:19:33,329
rid of clamp as well just because it

1537
01:19:29,279 --> 01:19:35,819
makes me nervous and then I'm gonna do a

1538
01:19:33,329 --> 01:19:38,189
little bit of stuff here so what we're

1539
01:19:35,819 --> 01:19:41,819
gonna do is we're gonna do an else here

1540
01:19:38,189 --> 01:19:46,439
we're gonna take this and I'm going to

1541
01:19:41,819 --> 01:19:48,960
just get rid of the clamp right so all

1542
01:19:46,439 --> 01:19:52,198
the rest of this stuff can happen but

1543
01:19:48,960 --> 01:19:55,380
just not the clamp and then now here

1544
01:19:52,198 --> 01:19:58,139
where we're going to load up on these

1545
01:19:55,380 --> 01:20:05,640
tiles what I'm gonna do here is just

1546
01:19:58,140 --> 01:20:10,219
create a fake version of the of the

1547
01:20:05,640 --> 01:20:14,640
light at Lestat's light atlas Texel

1548
01:20:10,219 --> 01:20:17,279
stuff that just points somewhere that I

1549
01:20:14,640 --> 01:20:20,190
know right so if we take a look at light

1550
01:20:17,279 --> 01:20:23,399
atlas Texel you can see that it's just a

1551
01:20:20,189 --> 01:20:27,659
v3 so what I should be able to do here

1552
01:20:23,399 --> 01:20:31,039
is say like alright you know there's

1553
01:20:27,659 --> 01:20:31,039
some dummy values here

1554
01:20:41,739 --> 01:20:47,050
and what you can see is that we're only

1555
01:20:43,819 --> 01:20:49,609
going to use eight of them anyway

1556
01:20:47,050 --> 01:20:51,470
because we're just looking at the these

1557
01:20:49,609 --> 01:20:56,199
tile values so what I should be able to

1558
01:20:51,470 --> 01:20:56,199
do is just have the tile point at that

1559
01:21:05,500 --> 01:21:13,100
so this is just a way of trying to keep

1560
01:21:08,539 --> 01:21:15,140
the math the same at least to a certain

1561
01:21:13,100 --> 01:21:17,750
degree I'm doing the best I can it's not

1562
01:21:15,140 --> 01:21:20,960
perfect right I mean I guess another

1563
01:21:17,750 --> 01:21:22,850
thing I could do is try to make this use

1564
01:21:20,960 --> 01:21:24,710
values that this thing can't see ahead

1565
01:21:22,850 --> 01:21:26,780
of time having these because this is a

1566
01:21:24,710 --> 01:21:28,369
problem because it will be able to fold

1567
01:21:26,779 --> 01:21:31,039
some stuff in here but you know just

1568
01:21:28,369 --> 01:21:32,329
looking at it it's probably fine because

1569
01:21:31,039 --> 01:21:36,460
most of these things are not known

1570
01:21:32,329 --> 01:21:36,460
because they're based off the UVW right

1571
01:21:40,029 --> 01:21:50,779
oops there we go okay so again what I'm

1572
01:21:48,979 --> 01:21:52,419
trying to do there is just to the extent

1573
01:21:50,779 --> 01:21:56,840
that I can just trying to leave the math

1574
01:21:52,420 --> 01:21:59,300
roughly intact and and just sort of get

1575
01:21:56,840 --> 01:22:03,380
a sense for how much that's actually

1576
01:21:59,300 --> 01:22:04,789
costing me so if you take a look at

1577
01:22:03,380 --> 01:22:08,270
what's happening here you can see that

1578
01:22:04,789 --> 01:22:11,119
it's still even just that right which is

1579
01:22:08,270 --> 01:22:14,690
which is really kind of basic is still

1580
01:22:11,119 --> 01:22:16,579
pretty expensive you know what I mean

1581
01:22:14,689 --> 01:22:21,919
and what I might want to do at this

1582
01:22:16,579 --> 01:22:25,130
point just for my own just for my own

1583
01:22:21,920 --> 01:22:27,710
edification is I kind of just want to

1584
01:22:25,130 --> 01:22:30,859
look at what the assembly language code

1585
01:22:27,710 --> 01:22:34,510
looks like there so in terms of calling

1586
01:22:30,859 --> 01:22:34,509
compute voxel readings at

1587
01:22:36,149 --> 01:22:42,059
I just want to know like can you tell me

1588
01:22:40,140 --> 01:22:44,010
what this what this looks like right

1589
01:22:42,060 --> 01:22:46,920
because we are compiling in release mode

1590
01:22:44,010 --> 01:22:48,750
right yeah so this should be the

1591
01:22:46,920 --> 01:22:51,390
optimized code and I just want to see

1592
01:22:48,750 --> 01:22:52,800
the disassembly and I just want to see

1593
01:22:51,390 --> 01:22:54,929
what it's doing right because I don't

1594
01:22:52,800 --> 01:22:57,079
know to what extent this is actually

1595
01:22:54,929 --> 01:23:01,350
costly and what to what extent this

1596
01:22:57,079 --> 01:23:20,219
compiler is a piece of junk so if we

1597
01:23:01,350 --> 01:23:25,170
loop on through here yeah you know I'll

1598
01:23:20,219 --> 01:23:32,460
be honest this is kind of just a stack

1599
01:23:25,170 --> 01:23:34,949
spilling festival at this point so you

1600
01:23:32,460 --> 01:23:36,960
know let's just try to let's clean this

1601
01:23:34,948 --> 01:23:39,469
math up before we go any further because

1602
01:23:36,960 --> 01:23:44,960
that's just it's just not it's just not

1603
01:23:39,469 --> 01:23:47,158
feasible what we're doing here okay so

1604
01:23:44,960 --> 01:23:50,310
what do we actually need to accomplish

1605
01:23:47,158 --> 01:23:55,049
so what we're trying to do here is we're

1606
01:23:50,310 --> 01:23:58,380
trying to do we're trying to do a result

1607
01:23:55,050 --> 01:24:01,140
where we we produce an floating-point

1608
01:23:58,380 --> 01:24:02,880
RGB value for the lighting now we have

1609
01:24:01,140 --> 01:24:04,320
to remember that we probably don't want

1610
01:24:02,880 --> 01:24:05,880
to use floating-point in the end we

1611
01:24:04,319 --> 01:24:08,670
probably want to use more like you

1612
01:24:05,880 --> 01:24:12,420
sixteens in the end for this stuff

1613
01:24:08,670 --> 01:24:15,408
potentially it's hard to say because I

1614
01:24:12,420 --> 01:24:17,908
don't know so we probably don't want to

1615
01:24:15,408 --> 01:24:20,698
go too far down the optimization rat

1616
01:24:17,908 --> 01:24:25,109
hole here because ideally we probably

1617
01:24:20,698 --> 01:24:26,428
want to half the size of these right I'm

1618
01:24:25,109 --> 01:24:29,399
just thinking I'm just thinking we

1619
01:24:26,429 --> 01:24:30,960
probably do so it's a little bit hard to

1620
01:24:29,399 --> 01:24:33,029
say so when we're computing this I'm not

1621
01:24:30,960 --> 01:24:37,380
sure that we really want it to be

1622
01:24:33,029 --> 01:24:38,759
floating-point values but for the moment

1623
01:24:37,380 --> 01:24:41,969
it is so let's take a look at how we

1624
01:24:38,760 --> 01:24:46,429
might address this going forward so what

1625
01:24:41,969 --> 01:24:46,429
we're gonna have if we were to

1626
01:24:46,960 --> 01:24:50,658
if we were to look at this as just a

1627
01:24:49,189 --> 01:24:52,848
simple like not trying to get

1628
01:24:50,658 --> 01:24:57,500
particularly high performance out of

1629
01:24:52,849 --> 01:24:59,210
these wide values there's a couple

1630
01:24:57,500 --> 01:25:03,289
different ways we can go one of them is

1631
01:24:59,210 --> 01:25:06,649
to just put the RGB you know inside a

1632
01:25:03,289 --> 01:25:10,010
wide vector and you know in terms of

1633
01:25:06,649 --> 01:25:11,210
doing things like this summation that's

1634
01:25:10,010 --> 01:25:12,889
actually pretty straightforward because

1635
01:25:11,210 --> 01:25:17,329
you can just actually do the mole and

1636
01:25:12,889 --> 01:25:20,329
then the sum all some Mulsim right and

1637
01:25:17,329 --> 01:25:24,618
it's pretty straight forward so that's

1638
01:25:20,329 --> 01:25:26,929
actually not that bad but again it's

1639
01:25:24,618 --> 01:25:29,329
like you know it means you'll never get

1640
01:25:26,929 --> 01:25:31,310
the forex beat up from Cindy you're

1641
01:25:29,329 --> 01:25:34,069
gonna always get something a bit less

1642
01:25:31,310 --> 01:25:35,659
they're looking at some of this stuff

1643
01:25:34,069 --> 01:25:37,819
like where we're doing these weights I

1644
01:25:35,658 --> 01:25:41,479
don't know really why we bothered having

1645
01:25:37,819 --> 01:25:45,590
this be a weight zero these don't really

1646
01:25:41,479 --> 01:25:47,419
need to be indexed by array in fact none

1647
01:25:45,590 --> 01:25:48,650
of this stuff does and so that's

1648
01:25:47,420 --> 01:25:51,739
probably just harder for the compiler

1649
01:25:48,649 --> 01:25:52,969
compilers don't really like array stuff

1650
01:25:51,738 --> 01:25:55,129
because they don't know ahead of time

1651
01:25:52,969 --> 01:25:57,289
that you don't need it to be arranged in

1652
01:25:55,130 --> 01:25:59,719
memory a particular way so they don't

1653
01:25:57,289 --> 01:26:02,210
always notice that they can get rid of

1654
01:25:59,719 --> 01:26:03,649
the array stuff sometimes they do clang

1655
01:26:02,210 --> 01:26:05,750
is really aggressive about that but

1656
01:26:03,649 --> 01:26:07,009
sometimes they don't so we can also

1657
01:26:05,750 --> 01:26:09,380
probably simplify some of this stuff

1658
01:26:07,010 --> 01:26:12,650
anyway if we take a look at what's going

1659
01:26:09,380 --> 01:26:14,239
on in here we can also see that we just

1660
01:26:12,649 --> 01:26:17,198
have a ton of multipliers and we should

1661
01:26:14,238 --> 01:26:19,669
be able to get more of those multiplies

1662
01:26:17,198 --> 01:26:21,319
by packing these values together or

1663
01:26:19,670 --> 01:26:23,300
doing other stuff like that too right so

1664
01:26:21,319 --> 01:26:25,819
what we want to fundamentally do here is

1665
01:26:23,300 --> 01:26:28,310
figure out ways of reducing the number

1666
01:26:25,819 --> 01:26:30,529
of operations we're actually doing here

1667
01:26:28,310 --> 01:26:34,159
by doing more of them at once and that's

1668
01:26:30,529 --> 01:26:37,149
just basically what we want to do so I

1669
01:26:34,158 --> 01:26:41,118
think we should be able to do that right

1670
01:26:37,149 --> 01:26:43,460
and especially with the clamping we can

1671
01:26:41,118 --> 01:26:45,259
also do that so let's just start with

1672
01:26:43,460 --> 01:26:47,118
some of these and see where we can go

1673
01:26:45,260 --> 01:26:50,539
with that so the first thing I want to

1674
01:26:47,118 --> 01:26:54,859
do is let's take a look at this and see

1675
01:26:50,539 --> 01:26:56,420
if we can't you know do four of these at

1676
01:26:54,859 --> 01:26:58,698
once or something right let's let's see

1677
01:26:56,420 --> 01:27:02,309
if we can't

1678
01:26:58,698 --> 01:27:05,729
get somewhere with it so if you take a

1679
01:27:02,309 --> 01:27:07,230
look at occlusion and and you know we're

1680
01:27:05,729 --> 01:27:09,888
trying to do inner products here and all

1681
01:27:07,229 --> 01:27:09,888
that sort of stuff

1682
01:27:10,069 --> 01:27:15,359
all of this looks like stuff we could

1683
01:27:13,408 --> 01:27:17,819
have just done wide and the reason I say

1684
01:27:15,359 --> 01:27:21,929
that is because UVW is something we

1685
01:27:17,819 --> 01:27:25,439
compute and we can easily spam it to be

1686
01:27:21,929 --> 01:27:30,599
wide and then we could do all of this

1687
01:27:25,439 --> 01:27:33,388
stuff wide right if we take a look at

1688
01:27:30,599 --> 01:27:37,500
just one of these where we're doing you

1689
01:27:33,389 --> 01:27:40,949
know a UVW - is 0 0 0 and then occlusion

1690
01:27:37,500 --> 01:27:42,779
and and then a clamp if we imagined

1691
01:27:40,948 --> 01:27:46,618
writing this wide what do we actually

1692
01:27:42,779 --> 01:27:52,768
have to compute well we've got you minus

1693
01:27:46,618 --> 01:27:55,109
0 right I mean just take a look at one

1694
01:27:52,769 --> 01:27:57,300
of these inner products I guess is what

1695
01:27:55,109 --> 01:28:03,920
I'm saying right so this inner product

1696
01:27:57,300 --> 01:28:06,630
is going to be something like UX times

1697
01:28:03,920 --> 01:28:09,449
I'll call that occlusion dot X right

1698
01:28:06,630 --> 01:28:12,179
this year and we have a subtraction

1699
01:28:09,448 --> 01:28:14,098
there so it looks like this and it

1700
01:28:12,179 --> 01:28:15,719
happens to be nerfed here but some of

1701
01:28:14,099 --> 01:28:18,389
them have it so let's just keep in mind

1702
01:28:15,719 --> 01:28:21,510
that that happens we're going to want to

1703
01:28:18,389 --> 01:28:25,469
do this for the inner product and then

1704
01:28:21,510 --> 01:28:28,019
we're going to want to add right each of

1705
01:28:25,469 --> 01:28:35,000
the components manually or separately

1706
01:28:28,019 --> 01:28:35,000
sorry like so

1707
01:28:36,000 --> 01:28:45,220
and then we're going to want to do a

1708
01:28:38,079 --> 01:28:47,500
clamp on this value comes out and so if

1709
01:28:45,220 --> 01:28:49,539
you look at what happens there what we

1710
01:28:47,500 --> 01:28:53,189
would probably like to do is recognize

1711
01:28:49,539 --> 01:28:56,939
the fact that we can do this whole thing

1712
01:28:53,189 --> 01:29:01,269
in a much more straightforward fashion

1713
01:28:56,939 --> 01:29:03,699
just by well and honestly not I'm

1714
01:29:01,270 --> 01:29:08,920
looking at it because we know that these

1715
01:29:03,699 --> 01:29:10,720
inner products are all actually kind of

1716
01:29:08,920 --> 01:29:14,079
going to be the same like we're sharing

1717
01:29:10,720 --> 01:29:15,940
a bunch of terms here too so let's take

1718
01:29:14,079 --> 01:29:18,309
two of these so that these two

1719
01:29:15,939 --> 01:29:24,119
back-to-back right if we were to compute

1720
01:29:18,310 --> 01:29:24,120
those two back-to-back oops

1721
01:29:25,770 --> 01:29:31,120
looking at those two things the only

1722
01:29:27,789 --> 01:29:34,180
difference is that right so actually

1723
01:29:31,119 --> 01:29:36,430
these back terms here are pretty much

1724
01:29:34,180 --> 01:29:38,200
all the same

1725
01:29:36,430 --> 01:29:39,970
they're the only difference is that we

1726
01:29:38,199 --> 01:29:43,019
subtract one or we don't subtract one

1727
01:29:39,970 --> 01:29:46,720
right so fundamentally if you actually

1728
01:29:43,020 --> 01:29:49,840
look at what all of the values are that

1729
01:29:46,720 --> 01:29:51,430
we need to produce we actually know what

1730
01:29:49,840 --> 01:29:56,279
all of those values are ahead of time

1731
01:29:51,430 --> 01:29:56,280
they look like this right there's

1732
01:30:03,930 --> 01:30:13,960
basically just that those are all the

1733
01:30:07,810 --> 01:30:17,380
values that we actually need and so then

1734
01:30:13,960 --> 01:30:19,869
all we do is we some different you know

1735
01:30:17,380 --> 01:30:21,880
sets of them but those are all the

1736
01:30:19,869 --> 01:30:26,319
values that we ever actually computed we

1737
01:30:21,880 --> 01:30:28,150
didn't need any any other values we just

1738
01:30:26,319 --> 01:30:31,719
needed to get those values and then we

1739
01:30:28,149 --> 01:30:35,469
needed to sum them right in different

1740
01:30:31,720 --> 01:30:38,079
permutations so at that point we just

1741
01:30:35,470 --> 01:30:41,350
need all the different sums that we can

1742
01:30:38,079 --> 01:30:42,579
produce out of these right is all all

1743
01:30:41,350 --> 01:30:47,500
we're really doing

1744
01:30:42,579 --> 01:30:50,019
we don't actually yeah we didn't really

1745
01:30:47,500 --> 01:30:53,020
actually need to to do anything else so

1746
01:30:50,020 --> 01:30:56,170
I feel like we can probably figure out a

1747
01:30:53,020 --> 01:30:58,360
way to do that much more straightforward

1748
01:30:56,170 --> 01:30:59,980
than probably what we were doing here

1749
01:30:58,359 --> 01:31:04,079
and the compiler may have been kind of

1750
01:30:59,979 --> 01:31:07,179
confused about that as well hard to say

1751
01:31:04,079 --> 01:31:10,180
so if we were going to try and pack

1752
01:31:07,180 --> 01:31:11,740
these together so let's suppose that we

1753
01:31:10,180 --> 01:31:14,079
were gonna try and fit these into two

1754
01:31:11,739 --> 01:31:15,579
vectors somehow right so that we would

1755
01:31:14,079 --> 01:31:17,199
just have like something that looked

1756
01:31:15,579 --> 01:31:26,769
more like this well I guess I can just

1757
01:31:17,199 --> 01:31:29,710
use this so let's suppose I was going to

1758
01:31:26,770 --> 01:31:31,780
try and do these you know first ones and

1759
01:31:29,710 --> 01:31:35,470
then these second ones are something

1760
01:31:31,779 --> 01:31:38,319
like this right and so what I want to

1761
01:31:35,470 --> 01:31:40,780
have ending up in here is like I want

1762
01:31:38,319 --> 01:31:42,939
the result of this inner product to end

1763
01:31:40,779 --> 01:31:46,300
up in the first one and any no and so on

1764
01:31:42,939 --> 01:31:53,049
and so forth how would how would we do

1765
01:31:46,300 --> 01:31:54,610
this right so I want to have you know if

1766
01:31:53,050 --> 01:31:59,199
I look at what these values are let's

1767
01:31:54,609 --> 01:32:04,599
say just trying to figure out how this

1768
01:31:59,199 --> 01:32:07,059
would work if it will work so what I

1769
01:32:04,600 --> 01:32:10,210
want to do here is I want to produce

1770
01:32:07,060 --> 01:32:11,860
inside this thing maybe I'll do it this

1771
01:32:10,210 --> 01:32:14,109
way so we can kind of see what I'm

1772
01:32:11,859 --> 01:32:17,089
talking about so I want to produce

1773
01:32:14,109 --> 01:32:19,639
inside this thing the inner product

1774
01:32:17,090 --> 01:32:22,130
where it would be a plus B plus C right

1775
01:32:19,640 --> 01:32:25,400
that's gonna be what I would want in the

1776
01:32:22,130 --> 01:32:31,460
first column there in the next column I

1777
01:32:25,399 --> 01:32:39,159
would want D plus B plus C right in the

1778
01:32:31,460 --> 01:32:44,630
next column I would want a plus what e

1779
01:32:39,159 --> 01:32:54,529
plus C and in the final column I would

1780
01:32:44,630 --> 01:32:59,239
want D plus E Plus C right so that's one

1781
01:32:54,529 --> 01:33:07,639
thing I and if we look at what's going

1782
01:32:59,239 --> 01:33:11,029
on there I mean I can save the plus C so

1783
01:33:07,640 --> 01:33:18,110
I would get one whole ad moved out of

1784
01:33:11,029 --> 01:33:21,460
there but you know is it much of a

1785
01:33:18,109 --> 01:33:23,839
savings not really right let me just

1786
01:33:21,460 --> 01:33:28,699
scan down here and see what we can do so

1787
01:33:23,840 --> 01:33:30,140
in here in here it's a little better to

1788
01:33:28,699 --> 01:33:31,760
like if we look at how that's getting

1789
01:33:30,140 --> 01:33:33,260
lost at up like yeah this is one of

1790
01:33:31,760 --> 01:33:34,909
those things where this is really not

1791
01:33:33,260 --> 01:33:36,530
work that humans should be doing like

1792
01:33:34,909 --> 01:33:45,050
this is a work that you just wanted a

1793
01:33:36,529 --> 01:33:48,500
super optimizer for so it's pretty

1794
01:33:45,050 --> 01:33:49,850
straightforward actually it's just we

1795
01:33:48,500 --> 01:33:51,649
don't have time to grind through and get

1796
01:33:49,850 --> 01:33:54,470
that the real optimal out here but this

1797
01:33:51,649 --> 01:33:57,199
is just you know you would just a super

1798
01:33:54,470 --> 01:34:00,530
optimizer would just find the minimal

1799
01:33:57,199 --> 01:34:04,699
number of wide packings you could do and

1800
01:34:00,529 --> 01:34:07,309
off you would go but anyway so we can

1801
01:34:04,699 --> 01:34:08,840
absolutely do that part and then the

1802
01:34:07,310 --> 01:34:11,630
clamping would be really easy it's just

1803
01:34:08,840 --> 01:34:13,550
a min followed by a max so that's the

1804
01:34:11,630 --> 01:34:17,180
clamping would be trivial and we'd save

1805
01:34:13,550 --> 01:34:19,520
a ton of work there as well let's just

1806
01:34:17,180 --> 01:34:22,369
work backwards a little bit here because

1807
01:34:19,520 --> 01:34:23,540
I feel like I need to kind of know where

1808
01:34:22,369 --> 01:34:26,599
I'm headed before I know how the

1809
01:34:23,539 --> 01:34:29,239
packings will actually work out in terms

1810
01:34:26,600 --> 01:34:30,800
of producing this inverse some value the

1811
01:34:29,239 --> 01:34:32,389
inverse some value

1812
01:34:30,800 --> 01:34:34,789
is true across everything and has to be

1813
01:34:32,389 --> 01:34:37,489
multiplied as a final coefficient so

1814
01:34:34,789 --> 01:34:41,029
that's just the case where it doesn't a

1815
01:34:37,488 --> 01:34:44,799
wide RCP doing this sum is going to suck

1816
01:34:41,029 --> 01:34:49,488
because it's a horizontal sum I don't

1817
01:34:44,800 --> 01:34:57,889
really know what we've got these days if

1818
01:34:49,488 --> 01:34:59,868
we assume that we're doing SSE I don't

1819
01:34:57,889 --> 01:35:02,929
know what we can do here so how bad are

1820
01:34:59,868 --> 01:35:15,259
these guys at adjacent pairs and pack

1821
01:35:02,929 --> 01:35:22,130
and dest right so so the horizontal add

1822
01:35:15,260 --> 01:35:27,650
isn't horrible let's just take a look at

1823
01:35:22,130 --> 01:35:35,690
where are you up info says we are on

1824
01:35:27,649 --> 01:35:37,399
that so I'm assuming it's had PS

1825
01:35:35,689 --> 01:35:40,039
actually don't even look yeah it is

1826
01:35:37,399 --> 01:35:43,638
happy yes I'm assuming it's had PS and

1827
01:35:40,039 --> 01:35:48,590
if I was gonna do it had PS how bad is

1828
01:35:43,639 --> 01:35:50,420
that and I don't really know so let's

1829
01:35:48,590 --> 01:35:57,500
assume that we're on skylake for now

1830
01:35:50,420 --> 01:35:59,828
because we are so you know it's it's not

1831
01:35:57,500 --> 01:35:59,828
great

1832
01:36:00,578 --> 01:36:12,880
it's two cycles on port five which is

1833
01:36:03,289 --> 01:36:12,880
like brutal right but like

1834
01:36:24,310 --> 01:36:42,500
yeah two cycles on port five is is rough

1835
01:36:31,369 --> 01:36:45,010
right anyway so if we take a look at

1836
01:36:42,500 --> 01:36:46,939
what we're going to be doing here

1837
01:36:45,010 --> 01:36:48,680
assuming that we do this relatively

1838
01:36:46,939 --> 01:36:53,119
straightforward if we did it in the

1839
01:36:48,680 --> 01:36:54,409
lanes here really we get royally screwed

1840
01:36:53,119 --> 01:37:02,059
when they come down here to do the some

1841
01:36:54,409 --> 01:37:03,979
I don't know how we would do this you

1842
01:37:02,060 --> 01:37:05,600
know these weights would be separate so

1843
01:37:03,979 --> 01:37:12,769
I guess the first thing that would

1844
01:37:05,600 --> 01:37:18,740
happen is if we do like this sort of

1845
01:37:12,770 --> 01:37:20,440
thing so we we first add zero through

1846
01:37:18,739 --> 01:37:23,029
three and four through seven together

1847
01:37:20,439 --> 01:37:25,759
and then we have a some vector that now

1848
01:37:23,029 --> 01:37:29,319
needs to be horizontally added you know

1849
01:37:25,760 --> 01:37:29,320
itself and

1850
01:37:35,109 --> 01:37:40,179
I don't really know that there's much we

1851
01:37:37,689 --> 01:37:44,319
can do other than just waste time and

1852
01:37:40,180 --> 01:37:45,940
compute it right so here we would do a

1853
01:37:44,319 --> 01:37:50,130
thing where we're like compact it one

1854
01:37:45,939 --> 01:37:54,039
more time and we would just do like a

1855
01:37:50,130 --> 01:37:59,920
horizontal ad on it and worse waste

1856
01:37:54,039 --> 01:38:02,590
images we're just full-on wasting a ton

1857
01:37:59,920 --> 01:38:04,720
of cycles and it's just I don't know but

1858
01:38:02,590 --> 01:38:07,930
I don't know what else you would do so

1859
01:38:04,720 --> 01:38:12,880
we'd produce the sum here and then we

1860
01:38:07,930 --> 01:38:30,730
would do reciprocal square root I don't

1861
01:38:12,880 --> 01:38:32,619
know if we actually have great naming

1862
01:38:30,729 --> 01:38:35,379
convention there we've done so we would

1863
01:38:32,619 --> 01:38:37,739
do approximate one over of this which

1864
01:38:35,380 --> 01:38:39,789
gives us the inverse and then we would

1865
01:38:37,739 --> 01:38:49,840
you know I'm gonna I'm gonna move all

1866
01:38:39,789 --> 01:38:52,269
this stuff up here now as I do it so

1867
01:38:49,840 --> 01:38:54,310
this would produce our sum for us and

1868
01:38:52,270 --> 01:38:57,340
then we would be able to multiply and

1869
01:38:54,310 --> 01:39:00,370
some this stuff together so then in

1870
01:38:57,340 --> 01:39:03,600
terms of actually producing our result

1871
01:39:00,369 --> 01:39:09,779
value what we would end up with there is

1872
01:39:03,600 --> 01:39:09,780
something like a you know result X

1873
01:39:10,710 --> 01:39:13,949
result y

1874
01:39:15,658 --> 01:39:20,429
result Z here and we're gonna have the

1875
01:39:18,118 --> 01:39:23,819
exact same problem which is that we are

1876
01:39:20,429 --> 01:39:27,719
trying to sum again after having done

1877
01:39:23,819 --> 01:39:30,688
the weight sum we have this problem

1878
01:39:27,719 --> 01:39:32,698
again right because we had to do it to

1879
01:39:30,689 --> 01:39:34,739
do the reciprocal and then we have to do

1880
01:39:32,698 --> 01:39:37,228
it again after we do the the the

1881
01:39:34,738 --> 01:39:41,279
weighted blend so again it just it's

1882
01:39:37,229 --> 01:39:44,939
really sucky right and I guess I should

1883
01:39:41,279 --> 01:39:47,309
say RGB right so it's really not good

1884
01:39:44,939 --> 01:39:49,229
but again I'm not sure that we have a

1885
01:39:47,309 --> 01:39:52,498
lot of options I'm not sure what else we

1886
01:39:49,229 --> 01:39:55,769
would really be able to do about it you

1887
01:39:52,498 --> 01:39:58,828
know probably not much so we would end

1888
01:39:55,769 --> 01:40:01,469
up with yet doing like a V 3 for X out

1889
01:39:58,828 --> 01:40:03,238
of it I guess and the values are just

1890
01:40:01,469 --> 01:40:10,979
there's only one thing in each of them

1891
01:40:03,238 --> 01:40:13,648
right no I guess I guess that's not true

1892
01:40:10,979 --> 01:40:16,590
so we can at least do we could at least

1893
01:40:13,649 --> 01:40:19,349
do the RGB together right so I guess

1894
01:40:16,590 --> 01:40:21,090
what we can do is we can do this and we

1895
01:40:19,349 --> 01:40:24,748
can do the RGB together by just saying

1896
01:40:21,090 --> 01:40:26,878
look these are all gonna be RGB values

1897
01:40:24,748 --> 01:40:29,248
so that's actually fine right we can't

1898
01:40:26,878 --> 01:40:32,519
actually do that and the multiply would

1899
01:40:29,248 --> 01:40:37,760
work there so yeah okay you know that

1900
01:40:32,519 --> 01:40:39,958
that saves a little bit for us so yeah

1901
01:40:37,760 --> 01:40:42,689
so we can do the approximate number some

1902
01:40:39,958 --> 01:40:45,628
we've got this and then we can just do

1903
01:40:42,689 --> 01:40:47,519
the RGB and we can do this wide so that

1904
01:40:45,628 --> 01:40:49,469
we're wasting one lane but at least we

1905
01:40:47,519 --> 01:40:54,418
get three times the throughput on that

1906
01:40:49,469 --> 01:40:59,668
right so that's that's not actually

1907
01:40:54,418 --> 01:41:03,738
awful you know that that there's worse

1908
01:40:59,668 --> 01:41:03,738
things in the world than that right

1909
01:41:08,399 --> 01:41:26,498
so I'm going to go ahead and pre suggest

1910
01:41:12,090 --> 01:41:28,150
that we have a a contraction of these

1911
01:41:26,498 --> 01:41:32,618
down to actual values that we care about

1912
01:41:28,149 --> 01:41:33,998
so I'm gonna want to do this sum and

1913
01:41:32,618 --> 01:41:37,058
then the inverse sum that would produce

1914
01:41:33,998 --> 01:41:38,828
the result RGB value and then we could

1915
01:41:37,059 --> 01:41:40,840
just return that and it would go out to

1916
01:41:38,828 --> 01:41:43,118
whoever's on the outside and they do

1917
01:41:40,840 --> 01:41:43,900
something with it and we can make that

1918
01:41:43,118 --> 01:41:46,420
happen

1919
01:41:43,899 --> 01:41:50,848
for now we can also just just extract it

1920
01:41:46,420 --> 01:41:50,849
and that's fine too

1921
01:41:51,118 --> 01:42:06,988
really it's just this and in it you know

1922
01:42:09,809 --> 01:42:14,380
so we'll get a little speed up from

1923
01:42:12,760 --> 01:42:16,690
doing it this way but yet you know we'll

1924
01:42:14,380 --> 01:42:20,139
we'll just downshift at the end anyway

1925
01:42:16,689 --> 01:42:22,839
so okay so we have our summations here

1926
01:42:20,139 --> 01:42:24,940
we would produce you know the the result

1927
01:42:22,840 --> 01:42:29,889
values this way in terms of weight

1928
01:42:24,939 --> 01:42:35,460
values I think that if we did the

1929
01:42:29,889 --> 01:42:40,569
multiplies wide we would probably save

1930
01:42:35,460 --> 01:42:42,698
two multiplies on each of these which

1931
01:42:40,569 --> 01:42:46,868
seems good and then we would have to

1932
01:42:42,698 --> 01:42:48,788
Swizzle out to get these this this is

1933
01:42:46,868 --> 01:42:51,788
the problem here is that we need to then

1934
01:42:48,788 --> 01:42:54,309
do replications and those replications

1935
01:42:51,788 --> 01:42:58,268
are kind of costly so we'd save

1936
01:42:54,309 --> 01:43:00,038
multiplies but we'd spend you know again

1937
01:42:58,269 --> 01:43:04,599
port five is just gonna be screaming for

1938
01:43:00,038 --> 01:43:09,849
mercy one of the really really sucky

1939
01:43:04,599 --> 01:43:13,059
things about skylake is that it just

1940
01:43:09,849 --> 01:43:15,909
doesn't have nearly enough bit

1941
01:43:13,059 --> 01:43:18,810
rearrangement for how much horsepower it

1942
01:43:15,908 --> 01:43:20,909
has everywhere else so like

1943
01:43:18,810 --> 01:43:26,850
you know port five just absolutely hates

1944
01:43:20,909 --> 01:43:30,269
itself 24 hours a day basically because

1945
01:43:26,850 --> 01:43:32,190
anyone who does anything that rearranges

1946
01:43:30,270 --> 01:43:34,700
data is just lying on sitting on port

1947
01:43:32,189 --> 01:43:38,159
five all day long right so you can see

1948
01:43:34,699 --> 01:43:40,800
in sky like it's just like any time

1949
01:43:38,159 --> 01:43:45,029
you're trying to rearrange data right

1950
01:43:40,800 --> 01:43:50,640
you're on port five like there's chef PS

1951
01:43:45,029 --> 01:43:54,329
here's pfb just any anything that you

1952
01:43:50,640 --> 01:43:56,940
ever want to rearrange data on skylake

1953
01:43:54,329 --> 01:43:59,399
is just it's just lined up behind port

1954
01:43:56,939 --> 01:44:03,299
five and port five is just a frickin

1955
01:43:59,399 --> 01:44:05,549
disaster right so port five on skylake

1956
01:44:03,300 --> 01:44:07,440
is horrible and that's why I'm kind of

1957
01:44:05,550 --> 01:44:09,300
like going 'god this can be awful like

1958
01:44:07,439 --> 01:44:11,969
this is gonna be back backed up on port

1959
01:44:09,300 --> 01:44:13,079
five this if i did it this if i unpack

1960
01:44:11,970 --> 01:44:15,180
these guys that are gonna be backed up

1961
01:44:13,079 --> 01:44:16,409
in port five doing that replicate i

1962
01:44:15,180 --> 01:44:18,720
don't know if there's a way to replicate

1963
01:44:16,409 --> 01:44:26,090
not on port five i'm guessing there

1964
01:44:18,720 --> 01:44:26,090
isn't but there's no broadcasts on i

1965
01:44:29,630 --> 01:44:35,010
mean you can just see like just look

1966
01:44:32,180 --> 01:44:38,310
here's everything that has shuff in the

1967
01:44:35,010 --> 01:44:39,630
title right port five point five four

1968
01:44:38,310 --> 01:44:44,430
five four five four five four five four

1969
01:44:39,630 --> 01:44:49,619
five port port port port right so it's

1970
01:44:44,430 --> 01:44:55,260
just like you know just a disaster

1971
01:44:49,619 --> 01:44:57,029
um so yeah I don't really know I don't

1972
01:44:55,260 --> 01:45:02,369
really know how to make this routine

1973
01:44:57,029 --> 01:45:09,029
good I wish I did so taking a look at

1974
01:45:02,369 --> 01:45:12,390
what I have to produce here because

1975
01:45:09,029 --> 01:45:15,239
these are just n X's and P X's in

1976
01:45:12,390 --> 01:45:19,610
different combinations maybe I'll just

1977
01:45:15,239 --> 01:45:19,609
go ahead and and do them as chefs

1978
01:45:39,239 --> 01:45:44,559
because if you take a look at the split

1979
01:45:41,619 --> 01:45:49,779
here it's like you need n X n YP x and y

1980
01:45:44,560 --> 01:45:59,140
and X P Y P X P Y right so if we were to

1981
01:45:49,779 --> 01:46:01,509
split those out just as as it is so like

1982
01:45:59,140 --> 01:46:03,910
you have one vector of just NY n YP y py

1983
01:46:01,510 --> 01:46:15,039
you can see that that just happens in

1984
01:46:03,909 --> 01:46:36,430
both cases so I think if I did this so

1985
01:46:15,039 --> 01:46:41,199
somehow this thing gets that this gets

1986
01:46:36,430 --> 01:46:43,210
that the whole time right which I guess

1987
01:46:41,199 --> 01:46:45,670
we can just that's just a load up right

1988
01:46:43,210 --> 01:46:46,600
that just loads that up we don't really

1989
01:46:45,670 --> 01:46:47,980
know where we're gonna get this this

1990
01:46:46,600 --> 01:46:49,539
this may actually end up being a shuffle

1991
01:46:47,979 --> 01:46:51,039
so actually let me just write it in this

1992
01:46:49,539 --> 01:46:52,329
notation for now so that we know that

1993
01:46:51,039 --> 01:46:55,600
like these aren't final they're just me

1994
01:46:52,329 --> 01:46:57,189
thinking out loud so those two are

1995
01:46:55,600 --> 01:46:59,920
pretty straightforward because then that

1996
01:46:57,189 --> 01:47:02,619
means like when we look at what happens

1997
01:46:59,920 --> 01:47:08,590
with W 0 3 it's just going to be

1998
01:47:02,619 --> 01:47:12,670
something x and y py x and z times c0 3

1999
01:47:08,590 --> 01:47:23,220
right and then W 4 7 is going to be

2000
01:47:12,670 --> 01:47:23,220
something x and y py x pz

2001
01:47:29,310 --> 01:47:36,310
so you know okay it's not like that

2002
01:47:32,739 --> 01:47:38,739
would save a ton of work it's true and

2003
01:47:36,310 --> 01:47:44,530
then how we get it out here I don't know

2004
01:47:38,739 --> 01:47:46,779
exactly but and honestly these

2005
01:47:44,529 --> 01:47:48,309
horizontal ads probably go away at that

2006
01:47:46,779 --> 01:47:50,729
point because once you have it blown out

2007
01:47:48,310 --> 01:47:53,620
you probably just do the sum directly

2008
01:47:50,729 --> 01:47:58,739
you know what I mean

2009
01:47:53,619 --> 01:48:04,869
because ad is on more pour like so so

2010
01:47:58,739 --> 01:48:08,439
oops so add PS is on zero and one and

2011
01:48:04,869 --> 01:48:10,630
more importantly not five so you could

2012
01:48:08,439 --> 01:48:13,689
slip you could get two of those ads per

2013
01:48:10,630 --> 01:48:15,460
cycle going while you were shuffling so

2014
01:48:13,689 --> 01:48:18,759
this probably doesn't oops

2015
01:48:15,460 --> 01:48:22,090
this probably is not that so probably

2016
01:48:18,760 --> 01:48:24,720
what we actually have here is something

2017
01:48:22,090 --> 01:48:24,720
more like this

2018
01:48:49,698 --> 01:49:00,629
and so all I'm doing here is I'm just

2019
01:48:53,010 --> 01:49:02,250
contracting these values hopefully you

2020
01:49:00,630 --> 01:49:04,619
can see I'm just zippering them together

2021
01:49:02,250 --> 01:49:08,010
so that we use the minimal number of

2022
01:49:04,619 --> 01:49:10,559
dependents right so one way you can do

2023
01:49:08,010 --> 01:49:12,390
this is just add like I add this to this

2024
01:49:10,560 --> 01:49:18,510
this to this this to that like so I do

2025
01:49:12,390 --> 01:49:21,180
like I do W 0 plus W 1 equals some 0 1

2026
01:49:18,510 --> 01:49:23,880
and then I do plus equals W 2 plus

2027
01:49:21,180 --> 01:49:25,350
equals W 3 plus a equals 3/4 and the

2028
01:49:23,880 --> 01:49:27,300
problem is that's just one big long

2029
01:49:25,350 --> 01:49:30,840
serial dependency chain each of these

2030
01:49:27,300 --> 01:49:33,390
ads is independent so on the first cycle

2031
01:49:30,840 --> 01:49:35,489
it can issue both of these because one

2032
01:49:33,390 --> 01:49:37,590
goes to port 0 1 goes to port 1 on the

2033
01:49:35,488 --> 01:49:39,809
next cycle it can issue both of these 1

2034
01:49:37,590 --> 01:49:44,279
2 0 1 2 1 on the next cyclic an issue

2035
01:49:39,810 --> 01:49:47,969
both of these 1 2 0 1 2 1 right and then

2036
01:49:44,279 --> 01:49:49,889
on the final cycle right so if I do it

2037
01:49:47,969 --> 01:49:51,420
just to I don't know if we've ever

2038
01:49:49,890 --> 01:49:52,590
talked about this before in terms of

2039
01:49:51,420 --> 01:49:54,750
cycle ordering and something that but

2040
01:49:52,590 --> 01:50:02,279
just to give you some perspective right

2041
01:49:54,750 --> 01:50:04,609
if I do this or I guess I'll just do it

2042
01:50:02,279 --> 01:50:04,609
this way

2043
01:50:05,369 --> 01:50:08,720
[Applause]

2044
01:50:10,520 --> 01:50:15,300
so if I do this right how many cycles

2045
01:50:13,469 --> 01:50:20,010
does is take well this is cycle 1 this

2046
01:50:15,300 --> 01:50:22,230
is cycle 2 this is cycle 3 4 5 6 7 and

2047
01:50:20,010 --> 01:50:24,600
the answer I mean and the reason why

2048
01:50:22,229 --> 01:50:28,019
that is is because there is no way for a

2049
01:50:24,600 --> 01:50:30,030
process or to use the result in less

2050
01:50:28,020 --> 01:50:31,380
than one cycle that's just how it like

2051
01:50:30,029 --> 01:50:32,969
processors don't usually have throughing

2052
01:50:31,380 --> 01:50:35,489
for anything like this and plus it takes

2053
01:50:32,969 --> 01:50:37,469
one cycle are doing at anyway and so on

2054
01:50:35,488 --> 01:50:40,319
the first cycle it does this and the

2055
01:50:37,469 --> 01:50:42,329
second cycle it has to it has to wait at

2056
01:50:40,319 --> 01:50:45,238
least one cycle to get the result of

2057
01:50:42,329 --> 01:50:47,279
this before it can start the add right

2058
01:50:45,238 --> 01:50:49,439
so it's going to be seven cycles to do

2059
01:50:47,279 --> 01:50:51,779
that whereas if we make these

2060
01:50:49,439 --> 01:50:53,849
independent then these both happen on

2061
01:50:51,779 --> 01:50:56,579
cycle one because they're independent so

2062
01:50:53,850 --> 01:50:57,960
they can both issue and we know that

2063
01:50:56,579 --> 01:50:59,698
there's two ports that can do adds so

2064
01:50:57,960 --> 01:51:01,649
one goes to port 0 1 goes to port 1 on

2065
01:50:59,698 --> 01:51:05,399
the next one the same thing is true each

2066
01:51:01,649 --> 01:51:07,529
of these can it executes on a separate

2067
01:51:05,399 --> 01:51:10,198
port and these will be ready by then so

2068
01:51:07,529 --> 01:51:12,779
we're going to be able to issue on cycle

2069
01:51:10,198 --> 01:51:14,639
2 these will both issue on cycle 3 and

2070
01:51:12,779 --> 01:51:18,179
then our final one which is just the

2071
01:51:14,640 --> 01:51:20,460
total sum right which is the last two

2072
01:51:18,179 --> 01:51:25,920
added together that will issue one cycle

2073
01:51:20,460 --> 01:51:29,039
4 and so we've saved 3 cycles right off

2074
01:51:25,920 --> 01:51:31,260
of that which is almost twice as fast

2075
01:51:29,039 --> 01:51:34,319
not quite but it's almost twice as fast

2076
01:51:31,260 --> 01:51:36,480
and all we did was just change the order

2077
01:51:34,319 --> 01:51:38,840
we were doing our additions do you know

2078
01:51:36,479 --> 01:51:38,839
what I mean

2079
01:51:38,988 --> 01:51:43,799
so I think it's important to just keep

2080
01:51:41,640 --> 01:51:46,920
that in mind like there's there's a

2081
01:51:43,800 --> 01:51:49,020
pretty there's a pretty big difference

2082
01:51:46,920 --> 01:51:50,149
in how you write routines sometimes if

2083
01:51:49,020 --> 01:51:54,480
you don't really know what you're doing

2084
01:51:50,149 --> 01:51:58,759
you can accidentally lose performance in

2085
01:51:54,479 --> 01:52:00,779
your critical sections without actually

2086
01:51:58,760 --> 01:52:02,789
you weren't actually doing anything

2087
01:52:00,779 --> 01:52:06,269
other than just organizing things like

2088
01:52:02,789 --> 01:52:07,590
adds wrong you know so I don't know to

2089
01:52:06,270 --> 01:52:10,920
what extent compilers will rearrange

2090
01:52:07,590 --> 01:52:12,360
that for you these days so sometimes you

2091
01:52:10,920 --> 01:52:14,190
may be okay because the compiler will go

2092
01:52:12,359 --> 01:52:18,448
like oh wait I can just do this

2093
01:52:14,189 --> 01:52:19,979
zippered instead of sequential so some I

2094
01:52:18,448 --> 01:52:22,259
don't know sometimes it may pick up the

2095
01:52:19,979 --> 01:52:23,229
slack for you but I don't really like to

2096
01:52:22,260 --> 01:52:24,640
rely on that because

2097
01:52:23,229 --> 01:52:25,869
enough to just write this way so I just

2098
01:52:24,640 --> 01:52:27,430
like to tell the compiler straight up

2099
01:52:25,869 --> 01:52:31,090
look here's the way you should do this

2100
01:52:27,430 --> 01:52:34,180
and usually it'll listen to me sometimes

2101
01:52:31,090 --> 01:52:35,590
it doesn't so anyway at that point we

2102
01:52:34,180 --> 01:52:37,510
know that we can do this whole thing in

2103
01:52:35,590 --> 01:52:40,900
four cycles right and if we've done it

2104
01:52:37,510 --> 01:52:41,980
all that way that's probably better than

2105
01:52:40,899 --> 01:52:43,929
our horizontal ads would have been

2106
01:52:41,979 --> 01:52:48,009
anyway so since we know we need these to

2107
01:52:43,930 --> 01:52:53,170
be expanded out later might as well just

2108
01:52:48,010 --> 01:52:55,060
do it okay so then what we need here is

2109
01:52:53,170 --> 01:52:56,980
we need to do replications here

2110
01:52:55,060 --> 01:52:59,470
unfortunately like I saying so all of

2111
01:52:56,979 --> 01:53:02,109
this crap this is the part where port

2112
01:52:59,470 --> 01:53:04,119
five becomes the epic disaster zone but

2113
01:53:02,109 --> 01:53:05,769
what are we gonna do so this is

2114
01:53:04,119 --> 01:53:08,619
literally gonna cost us eight cycles on

2115
01:53:05,770 --> 01:53:10,480
port five I literally have no idea how

2116
01:53:08,619 --> 01:53:12,640
we would do anything different so it

2117
01:53:10,479 --> 01:53:17,019
sucks and I'm sorry I just I just don't

2118
01:53:12,640 --> 01:53:18,910
know so from here what we do is I want

2119
01:53:17,020 --> 01:53:21,880
to do like a broadcast I don't know if

2120
01:53:18,909 --> 01:53:31,689
we have one of those but I want to do a

2121
01:53:21,880 --> 01:53:36,329
broadcast zero here right I thought we

2122
01:53:31,689 --> 01:53:36,329
had two like a shuffle thing

2123
01:53:45,908 --> 01:53:58,118
yeah so so we do have it so it's just

2124
01:53:51,498 --> 01:53:58,118
this so that's fine

2125
01:53:59,359 --> 01:54:04,219
um and so again all I'm doing here is I

2126
01:54:02,300 --> 01:54:04,639
just need to spread these out and it

2127
01:54:04,219 --> 01:54:06,498
sucks

2128
01:54:04,639 --> 01:54:08,868
and again there's fraught we probably

2129
01:54:06,498 --> 01:54:11,300
could do better here right we probably

2130
01:54:08,868 --> 01:54:13,788
could make a routine that was that was

2131
01:54:11,300 --> 01:54:15,380
more clever about how it arranged its

2132
01:54:13,788 --> 01:54:18,170
data so that you don't end up with these

2133
01:54:15,380 --> 01:54:20,900
large broadcasts we have not done that

2134
01:54:18,170 --> 01:54:23,510
so I'm sorry but that's just yeah where

2135
01:54:20,899 --> 01:54:25,098
we're at right so yeah so if we take a

2136
01:54:23,510 --> 01:54:26,840
look at these and actually I can start

2137
01:54:25,099 --> 01:54:30,349
gathering these up a little bit more now

2138
01:54:26,840 --> 01:54:34,729
so if I grab this and put it in here and

2139
01:54:30,349 --> 01:54:40,550
get rid of ants I should be able to then

2140
01:54:34,729 --> 01:54:45,579
move this up as well well I actually

2141
01:54:40,550 --> 01:54:45,579
need I need this for one one hot second

2142
01:54:46,689 --> 01:54:55,759
like so and so what I want to do here is

2143
01:54:51,198 --> 01:54:57,169
just then say okay we have to finish

2144
01:54:55,760 --> 01:55:01,369
actually creating these so you can see

2145
01:54:57,170 --> 01:55:04,269
we have n xpx &amp; xpx &amp; xpx &amp; xpx that's

2146
01:55:01,368 --> 01:55:06,589
actually the same on the x side as well

2147
01:55:04,269 --> 01:55:23,559
so in theory I should be able to do

2148
01:55:06,590 --> 01:55:23,559
something like this right

2149
01:55:26,710 --> 01:55:32,050
so if if n xpx is all I needed at the

2150
01:55:28,869 --> 01:55:33,729
front then again you know that's

2151
01:55:32,050 --> 01:55:36,820
starting to actually look not terrible

2152
01:55:33,729 --> 01:55:38,799
like this sucks but man did that save a

2153
01:55:36,819 --> 01:55:44,729
lot of cycles and we know that we wanted

2154
01:55:38,800 --> 01:55:44,730
these clamped originally right yeah

2155
01:55:51,090 --> 01:55:58,659
sorry no that's the C values that we

2156
01:55:53,649 --> 01:56:00,460
wanted clamped yeah we should get rid of

2157
01:55:58,659 --> 01:56:02,050
this now we should get rid of all this

2158
01:56:00,460 --> 01:56:04,480
stuff because we got to work we got to

2159
01:56:02,050 --> 01:56:06,539
work that stuff out so let's get rid of

2160
01:56:04,479 --> 01:56:06,539
that

2161
01:56:07,420 --> 01:56:13,989
let me put all of this up there where it

2162
01:56:10,119 --> 01:56:16,229
belongs so here's the old routine there

2163
01:56:13,989 --> 01:56:16,229
it is

2164
01:56:17,199 --> 01:56:26,949
and we don't care about this part at the

2165
01:56:20,920 --> 01:56:29,350
moment okay so yeah so this start flips

2166
01:56:26,949 --> 01:56:31,989
this clamp the W values were not right

2167
01:56:29,350 --> 01:56:33,670
so the W values were not clamped and we

2168
01:56:31,989 --> 01:56:35,229
don't have to worry about that so this

2169
01:56:33,670 --> 01:56:38,050
is how we would actually produce all of

2170
01:56:35,229 --> 01:56:41,649
our W values and then we just broadcast

2171
01:56:38,050 --> 01:56:43,720
them out so I think actually all we're

2172
01:56:41,649 --> 01:56:51,670
left with is how we produce these

2173
01:56:43,720 --> 01:56:56,280
particular values and if you look it

2174
01:56:51,670 --> 01:56:56,279
would seem like

2175
01:57:02,149 --> 01:57:09,029
it would seem like if I shuffled these

2176
01:57:05,729 --> 01:57:14,279
maybe that wouldn't be the worst thing

2177
01:57:09,029 --> 01:57:23,969
in the world so like let's suppose that

2178
01:57:14,279 --> 01:57:25,889
I changed this so I'm just thinking out

2179
01:57:23,970 --> 01:57:27,630
loud here as I try to do as much as

2180
01:57:25,890 --> 01:57:30,090
possible on the stream so you can hear

2181
01:57:27,630 --> 01:57:42,359
what I'm trying to think through so if

2182
01:57:30,090 --> 01:57:44,760
we were to swap okay so that wouldn't

2183
01:57:42,359 --> 01:57:46,289
work okay so the only complexity that I

2184
01:57:44,760 --> 01:57:48,090
see here is that if we were to keep this

2185
01:57:46,289 --> 01:57:52,769
the same way without reorganizing this

2186
01:57:48,090 --> 01:58:02,940
the nxp x-value is a little hard to

2187
01:57:52,770 --> 01:58:05,130
build potentially I guess we'll see but

2188
01:58:02,939 --> 01:58:09,629
I don't need these anymore because we've

2189
01:58:05,130 --> 01:58:11,520
got what we want them to be in here so

2190
01:58:09,630 --> 01:58:15,050
that's fine so the real question is how

2191
01:58:11,520 --> 01:58:17,730
do we want to compute the UVW stuff

2192
01:58:15,050 --> 01:58:22,500
dovetailing it with what exists up above

2193
01:58:17,729 --> 01:58:24,238
right so we're gonna not pay attention

2194
01:58:22,500 --> 01:58:29,238
to see for the moment and what I'm gonna

2195
01:58:24,238 --> 01:58:29,238
do here is I'm going to expand this bit

2196
01:58:29,600 --> 01:58:36,989
to include these folks right here right

2197
01:58:33,439 --> 01:58:40,309
and I guess this stuff is totally

2198
01:58:36,988 --> 01:58:42,599
independent so that can probably remain

2199
01:58:40,310 --> 01:58:48,480
and so I'm really going to take a look

2200
01:58:42,600 --> 01:58:50,700
at more this right this part here what

2201
01:58:48,479 --> 01:58:54,059
I'd like to do is yeah I'd like to just

2202
01:58:50,699 --> 01:58:58,829
have that part there be something that

2203
01:58:54,060 --> 01:59:01,080
we can rewrite wide you know so this is

2204
01:58:58,829 --> 01:59:03,000
what we need to compute this UVW this

2205
01:59:01,079 --> 01:59:04,800
voxel index is actually used by the

2206
01:59:03,000 --> 01:59:06,960
other part of 13 we probably need to

2207
01:59:04,800 --> 01:59:08,100
compute it but it's less important for

2208
01:59:06,960 --> 01:59:09,899
what we're doing right at the immediate

2209
01:59:08,100 --> 01:59:12,210
moment so what I want to do is take a

2210
01:59:09,899 --> 01:59:13,719
look at get relative P and we want to

2211
01:59:12,210 --> 01:59:16,960
just take like this

2212
01:59:13,719 --> 01:59:25,210
crap here and we want to see what we can

2213
01:59:16,960 --> 01:59:33,960
do with like the with this part right so

2214
01:59:25,210 --> 01:59:36,909
what would we do to get to get this

2215
01:59:33,960 --> 01:59:41,890
value this is what we're trying to do

2216
01:59:36,909 --> 01:59:44,409
what would we do to get that value more

2217
01:59:41,890 --> 01:59:46,750
quickly right and if we look at what's

2218
01:59:44,409 --> 01:59:48,849
happening here okay so most of this

2219
01:59:46,750 --> 01:59:52,149
stuff is things we probably could just

2220
01:59:48,850 --> 01:59:57,820
load we could just run this directly

2221
01:59:52,149 --> 02:00:01,839
right so if we did an f3 V if we did an

2222
01:59:57,819 --> 02:00:04,090
f32 for X of the inverse seldom and we

2223
02:00:01,840 --> 02:00:05,920
literally could load we could load that

2224
02:00:04,090 --> 02:00:12,550
straight out probably right like we

2225
02:00:05,920 --> 02:00:14,140
could just say this with a zero on the

2226
02:00:12,550 --> 02:00:15,699
end of it or whatever right or whatever

2227
02:00:14,140 --> 02:00:19,270
we want doesn't matter what's on the end

2228
02:00:15,698 --> 02:00:29,259
of it and then we did the same thing

2229
02:00:19,270 --> 02:00:36,910
with the world P right and the total

2230
02:00:29,260 --> 02:00:39,909
bounds then we could just compute this

2231
02:00:36,909 --> 02:00:43,210
directly so the F chord vector would

2232
02:00:39,909 --> 02:00:50,469
just be the in seldom times the world P

2233
02:00:43,210 --> 02:00:55,149
minus the total bounds like that I'll

2234
02:00:50,469 --> 02:00:57,819
just call that PE for now so that can

2235
02:00:55,149 --> 02:01:01,569
just be a direct computation we would

2236
02:00:57,819 --> 02:01:06,789
then want a floor and I don't actually

2237
02:01:01,569 --> 02:01:09,549
know if we have a floor we don't so

2238
02:01:06,789 --> 02:01:16,800
we'll have to look at that because what

2239
02:01:09,550 --> 02:01:20,860
we want is this we want the actual floor

2240
02:01:16,800 --> 02:01:23,619
floor SS here it doesn't look like we

2241
02:01:20,859 --> 02:01:24,929
actually have it so we want here to

2242
02:01:23,619 --> 02:01:28,079
implement that

2243
02:01:24,930 --> 02:01:31,050
and it would be something like this so

2244
02:01:28,079 --> 02:01:33,869
that's the index value right that we

2245
02:01:31,050 --> 02:01:35,250
have we just haven't converted it out so

2246
02:01:33,869 --> 02:01:37,260
this is like the floating point index

2247
02:01:35,250 --> 02:01:41,069
value or in this case I guess we called

2248
02:01:37,260 --> 02:01:44,430
it V chord right so we can compute the B

2249
02:01:41,069 --> 02:01:46,139
chord directly and then the UVW value

2250
02:01:44,430 --> 02:01:47,880
just comes out of that subtract so it's

2251
02:01:46,140 --> 02:01:51,000
just the F chord - the B chord so that's

2252
02:01:47,880 --> 02:01:53,340
fine right and then to produce these

2253
02:01:51,000 --> 02:01:55,289
values we just need to actually do some

2254
02:01:53,340 --> 02:02:01,680
shuffles the NX px is hard to produce

2255
02:01:55,289 --> 02:02:12,199
the NYP Y is really easy to produce so

2256
02:02:01,680 --> 02:02:12,200
you know this this one this one's ugly

2257
02:02:12,319 --> 02:02:18,420
the rest are not so we have UV already

2258
02:02:16,739 --> 02:02:21,539
and then we have the negative version of

2259
02:02:18,420 --> 02:02:25,500
UV W and that would just be like the one

2260
02:02:21,539 --> 02:02:27,779
vector minus UV W so from here it's

2261
02:02:25,500 --> 02:02:31,350
pretty straightforward we would just

2262
02:02:27,779 --> 02:02:36,090
take the broadcast of the negative u

2263
02:02:31,350 --> 02:02:41,610
VW's second component and from here we

2264
02:02:36,090 --> 02:02:44,550
would take a broadcast of its second

2265
02:02:41,609 --> 02:02:47,189
component from the positive one right

2266
02:02:44,550 --> 02:02:51,690
this one's an actual shuffle it wants

2267
02:02:47,189 --> 02:02:53,399
two negatives to positives right so what

2268
02:02:51,689 --> 02:02:57,259
it would want to do is it would say well

2269
02:02:53,399 --> 02:03:04,979
I want the negatives and then I want

2270
02:02:57,260 --> 02:03:06,449
oops and then I want the positives which

2271
02:03:04,979 --> 02:03:08,459
I think would just work we'd have to

2272
02:03:06,449 --> 02:03:10,260
double check that that shuffle that this

2273
02:03:08,460 --> 02:03:14,520
goes in the order I think it does so

2274
02:03:10,260 --> 02:03:16,199
there's that but hmm and then finally

2275
02:03:14,520 --> 02:03:18,330
this one and the reason I said this is

2276
02:03:16,199 --> 02:03:26,670
difficult is because there's really with

2277
02:03:18,329 --> 02:03:28,840
without a pshh FB I don't really know

2278
02:03:26,670 --> 02:03:31,279
how to get that

2279
02:03:28,840 --> 02:03:34,248
in fact even a pea chef B can't get it

2280
02:03:31,279 --> 02:03:42,469
because you can't take two vectors so

2281
02:03:34,248 --> 02:03:43,969
you kind of just need two shuffles III

2282
02:03:42,469 --> 02:03:47,059
really don't know how else to do it so

2283
02:03:43,969 --> 02:03:49,939
if we take a look at the nxp X here we

2284
02:03:47,059 --> 02:03:50,840
need to shuffle twice and again the

2285
02:03:49,939 --> 02:03:55,340
reason is because of the lane

2286
02:03:50,840 --> 02:03:57,590
restrictions on shuffle I need to be

2287
02:03:55,340 --> 02:03:58,909
able to get a negative and a positive in

2288
02:03:57,590 --> 02:04:00,708
the bottom but I can't do that because

2289
02:03:58,908 --> 02:04:03,368
the two bottom values have to come from

2290
02:04:00,708 --> 02:04:03,368
the same vector

2291
02:04:05,439 --> 02:04:10,479
there isn't a 32-bit unpack is there

2292
02:04:29,359 --> 02:04:45,839
so I could do an I could do an unpack

2293
02:04:33,659 --> 02:04:47,909
low but but again that only gives me the

2294
02:04:45,840 --> 02:04:56,640
bottom to correct and then the top two

2295
02:04:47,909 --> 02:04:57,569
aren't correct so I'm sorry I can't

2296
02:04:56,640 --> 02:05:01,590
think of how to do this in one

2297
02:04:57,569 --> 02:05:02,789
instruction I don't know if you can like

2298
02:05:01,590 --> 02:05:04,319
I said you know probably the right thing

2299
02:05:02,789 --> 02:05:05,939
to do is you just you go through teen

2300
02:05:04,319 --> 02:05:07,710
really meticulously and you reorganize

2301
02:05:05,939 --> 02:05:09,569
all their to be the minimum number of

2302
02:05:07,710 --> 02:05:12,859
shuffles I'm just and I'm not going to

2303
02:05:09,569 --> 02:05:15,929
do that but

2304
02:05:12,859 --> 02:05:17,399
in terms of of the way this is

2305
02:05:15,930 --> 02:05:19,110
interleave I don't I don't see another

2306
02:05:17,399 --> 02:05:23,210
way to do it so I think what you have to

2307
02:05:19,109 --> 02:05:25,439
do is you have to build like an X temp

2308
02:05:23,210 --> 02:05:27,029
and what that's going to be is you're

2309
02:05:25,439 --> 02:05:29,009
just putting everything into one vector

2310
02:05:27,029 --> 02:05:34,349
that you needed right so you say look

2311
02:05:29,010 --> 02:05:35,970
I'll take the negative one and the

2312
02:05:34,350 --> 02:05:39,600
positive one and put them into one

2313
02:05:35,970 --> 02:05:44,850
vector and then we can shuffle right so

2314
02:05:39,600 --> 02:05:49,310
then it's a shuffle of okay I take

2315
02:05:44,850 --> 02:05:54,440
negative positive negative positive

2316
02:05:49,310 --> 02:06:01,670
right and now I've got all the values

2317
02:05:54,439 --> 02:06:01,669
right so you can see now we've got a

2318
02:06:02,779 --> 02:06:09,989
streamlined version of this the number

2319
02:06:07,350 --> 02:06:11,400
of cycles we can probably save is

2320
02:06:09,989 --> 02:06:12,210
actually quite dramatic here but we're

2321
02:06:11,399 --> 02:06:14,219
gonna have to save it for tomorrow

2322
02:06:12,210 --> 02:06:16,020
because we're out of time

2323
02:06:14,220 --> 02:06:19,710
so I'm gonna go ahead and just save this

2324
02:06:16,020 --> 02:06:23,880
inside the if zero and just make sure I

2325
02:06:19,710 --> 02:06:28,350
can turn on the old path well enough

2326
02:06:23,880 --> 02:06:31,109
right looks like I accidentally deleted

2327
02:06:28,350 --> 02:06:33,500
the NX stuff so let me just put that

2328
02:06:31,109 --> 02:06:33,500
back in

2329
02:06:43,930 --> 02:06:49,840
see they weren't -1 they were 1 - right

2330
02:06:50,469 --> 02:07:06,500
so don't know why I type that and then

2331
02:06:55,130 --> 02:07:09,010
these are just direct um so I just want

2332
02:07:06,500 --> 02:07:14,180
to verify that everything still runs ok

2333
02:07:09,010 --> 02:07:15,650
you know and in order to do that I can't

2334
02:07:14,180 --> 02:07:25,789
actually just run it because we nerve

2335
02:07:15,649 --> 02:07:29,839
some stuff so I'm gonna have to really

2336
02:07:25,789 --> 02:07:34,329
quickly reenable the actual cast so the

2337
02:07:29,840 --> 02:07:34,329
cost metric here that we nerfed

2338
02:07:41,710 --> 02:07:53,039
has to go back in real quick and that is

2339
02:07:50,949 --> 02:07:56,019
back to normal looks like that's good

2340
02:07:53,039 --> 02:07:57,430
okay let's go to a brief Q&amp;A and then

2341
02:07:56,020 --> 02:08:00,160
we'll pick this up tomorrow where we'll

2342
02:07:57,430 --> 02:08:01,690
try to finish up that routine and see if

2343
02:08:00,159 --> 02:08:03,840
we can get some good speed improvements

2344
02:08:01,689 --> 02:08:03,839
there

2345
02:08:14,279 --> 02:08:19,679
with things go better if you started

2346
02:08:16,210 --> 02:08:19,679
with uvw each for wide

2347
02:08:40,100 --> 02:08:57,560
I don't think so I mean again I'd have

2348
02:08:52,819 --> 02:08:59,840
to try it and see but the problem that

2349
02:08:57,560 --> 02:09:02,090
you're gonna have there so you'd start

2350
02:08:59,840 --> 02:09:08,300
by blowing that out I guess like here

2351
02:09:02,090 --> 02:09:10,640
right and then the problem that you're

2352
02:09:08,300 --> 02:09:12,980
gonna have is like how do you speed up

2353
02:09:10,640 --> 02:09:18,170
these computations if if those are for

2354
02:09:12,979 --> 02:09:20,179
wide right cuz if they're four wide

2355
02:09:18,170 --> 02:09:24,289
you're doing all of these like you're

2356
02:09:20,180 --> 02:09:25,880
doing this whole thing so how do you

2357
02:09:24,289 --> 02:09:27,739
make this faster if they're four wide

2358
02:09:25,880 --> 02:09:37,069
right it seems like you're kind of

2359
02:09:27,739 --> 02:09:41,019
screwed but could you not pad by eight

2360
02:09:37,069 --> 02:09:44,529
bytes to fix the overlap um so you could

2361
02:09:41,020 --> 02:09:47,330
but why would you

2362
02:09:44,529 --> 02:09:52,399
you just get worse cache usage and more

2363
02:09:47,329 --> 02:09:54,789
GPU transfer time right you never want

2364
02:09:52,399 --> 02:10:04,609
padding if you don't have to have it and

2365
02:09:54,789 --> 02:10:07,579
so you could but but why the l0

2366
02:10:04,609 --> 02:10:16,460
determines how many cache lines the CPU

2367
02:10:07,579 --> 02:10:23,449
can hold so I've I don't know what is an

2368
02:10:16,460 --> 02:10:25,250
l0 can you tell me what is an l0 first

2369
02:10:23,449 --> 02:10:31,670
and then I could try to answer the

2370
02:10:25,250 --> 02:10:33,800
question l0 is not something I think

2371
02:10:31,670 --> 02:10:37,480
I've ever heard of but sometimes people

2372
02:10:33,800 --> 02:10:37,480
use terms I'm just unfamiliar with so

2373
02:10:42,849 --> 02:10:47,119
would you consider going over explaining

2374
02:10:45,019 --> 02:10:49,219
how operation takes X minus CP USR will

2375
02:10:47,118 --> 02:10:51,618
that be in the introduce see ya in the

2376
02:10:49,219 --> 02:10:59,989
upcoming course we will be covering that

2377
02:10:51,618 --> 02:11:01,668
in the Advanced section yeah do I

2378
02:10:59,988 --> 02:11:03,529
recommend learning via keybindings Emacs

2379
02:11:01,668 --> 02:11:08,958
key bindings are neither I guess I would

2380
02:11:03,529 --> 02:11:15,738
say I don't specifically I wouldn't

2381
02:11:08,958 --> 02:11:18,198
specifically talk about VI or Emacs what

2382
02:11:15,738 --> 02:11:20,178
I would say is modal is better on your

2383
02:11:18,198 --> 02:11:23,868
hands I think pretty definitively so I

2384
02:11:20,179 --> 02:11:26,899
would try to lean modal I don't use VI

2385
02:11:23,868 --> 02:11:28,969
key bindings but I do use my own modal

2386
02:11:26,899 --> 02:11:31,598
bindings so they're more similar to VI

2387
02:11:28,969 --> 02:11:34,248
than they are to Emacs in that sense I

2388
02:11:31,599 --> 02:11:35,989
would say it's much easier on your hands

2389
02:11:34,248 --> 02:11:38,328
and you'll have less repetitive strain

2390
02:11:35,988 --> 02:11:40,188
injury problems if you use a modal key

2391
02:11:38,328 --> 02:11:41,988
binding because Emacs is based on

2392
02:11:40,189 --> 02:11:43,789
holding down a lot of modifier keys and

2393
02:11:41,988 --> 02:11:46,638
that's just not very good on your hands

2394
02:11:43,788 --> 02:11:48,800
so I would say I would say lean towards

2395
02:11:46,639 --> 02:11:51,859
a modal binding doesn't have to be VI

2396
02:11:48,800 --> 02:12:03,979
because VI has its own kind of issues I

2397
02:11:51,859 --> 02:12:05,268
think but okay so just to be clear like

2398
02:12:03,979 --> 02:12:08,479
I don't think I've ever heard the term

2399
02:12:05,269 --> 02:12:10,489
l0 before so if someone actually thinks

2400
02:12:08,479 --> 02:12:12,469
there is a thing such as l0 you should

2401
02:12:10,488 --> 02:12:15,498
tell me what it is or how to find that I

2402
02:12:12,469 --> 02:12:18,078
mean I can look but I don't think there

2403
02:12:15,498 --> 02:12:21,288
is an L 0 cache unless that does that

2404
02:12:18,078 --> 02:12:26,889
refer to like the rat or something I

2405
02:12:21,288 --> 02:12:26,889
don't know what that means

2406
02:12:29,469 --> 02:12:33,708
so here is someone suggesting there's

2407
02:12:32,238 --> 02:12:37,578
some kind of thing called an L zero

2408
02:12:33,708 --> 02:12:39,050
cache but but I don't like I'd really

2409
02:12:37,578 --> 02:12:41,748
just don't know like I don't know what

2410
02:12:39,050 --> 02:12:44,449
an l0 cache would be yeah it's not it's

2411
02:12:41,748 --> 02:12:47,019
not in the Wikipedia article so I'm

2412
02:12:44,448 --> 02:12:51,618
gonna proceed with an explanation that

2413
02:12:47,019 --> 02:12:52,998
just assumes that l0 is not a real thing

2414
02:12:51,618 --> 02:12:53,460
because I've literally never heard it

2415
02:12:52,998 --> 02:12:54,689
but it

2416
02:12:53,460 --> 02:12:56,760
might be a real thing and if it is

2417
02:12:54,689 --> 02:13:00,179
you'll have to go look up what it is but

2418
02:12:56,760 --> 02:13:02,550
like I don't know there are things on

2419
02:13:00,180 --> 02:13:07,110
for example a sky like chip like this

2420
02:13:02,550 --> 02:13:10,800
one that someone could call l0 you could

2421
02:13:07,109 --> 02:13:13,409
call the register file in l0 if you

2422
02:13:10,800 --> 02:13:14,670
wanted to but I've knit I've never heard

2423
02:13:13,409 --> 02:13:17,849
it called that that's the only reason

2424
02:13:14,670 --> 02:13:19,319
that I'm kind of weirded out right so

2425
02:13:17,850 --> 02:13:20,730
I'm going to assume that we're not going

2426
02:13:19,319 --> 02:13:22,319
to use this term because I've literally

2427
02:13:20,729 --> 02:13:24,149
never heard it before and I'm not sure

2428
02:13:22,319 --> 02:13:25,170
what part of the chip it would actually

2429
02:13:24,149 --> 02:13:29,460
be talking about

2430
02:13:25,170 --> 02:13:34,409
there are l1 l2 and l3 parts on this

2431
02:13:29,460 --> 02:13:37,949
trip so so these do definitely exist on

2432
02:13:34,409 --> 02:13:41,309
a sky like this there are things so

2433
02:13:37,949 --> 02:13:44,579
there's the register file

2434
02:13:41,310 --> 02:13:48,719
there's the trace caches so I guess we

2435
02:13:44,579 --> 02:13:52,559
call this the loop cache and like

2436
02:13:48,719 --> 02:13:54,270
there's the decode I don't know what

2437
02:13:52,560 --> 02:14:03,600
they call it in sky like almost I can't

2438
02:13:54,270 --> 02:14:06,030
let me look for this chip I forget

2439
02:14:03,600 --> 02:14:08,370
there's - there's actually two caches

2440
02:14:06,029 --> 02:14:13,139
micro op caches they might just call it

2441
02:14:08,369 --> 02:14:15,109
the you up cache but I'm not sure can I

2442
02:14:13,140 --> 02:14:19,640
I wanted that diagram can we have that

2443
02:14:15,109 --> 02:14:19,639
diagram back where did it go

2444
02:14:24,510 --> 02:14:34,210
okay um so assuming I got the right

2445
02:14:30,670 --> 02:14:36,940
diagram here for skylake it means it's

2446
02:14:34,210 --> 02:14:40,420
this guy like so should be um if you

2447
02:14:36,939 --> 02:14:42,039
take a look at this diagram it's it's

2448
02:14:40,420 --> 02:14:43,779
not really how the chip works or

2449
02:14:42,039 --> 02:14:46,600
anything but it's just kind of like a

2450
02:14:43,779 --> 02:14:51,369
flow diagram to give you some idea of

2451
02:14:46,600 --> 02:14:55,300
who's doing what when just roughly so if

2452
02:14:51,369 --> 02:14:56,800
you take a look at again l0 I don't

2453
02:14:55,300 --> 02:14:58,869
really know what that would mean but if

2454
02:14:56,800 --> 02:15:03,460
you take a look at where the l1 is and

2455
02:14:58,869 --> 02:15:08,170
the l2 those are your encore caches so

2456
02:15:03,460 --> 02:15:11,560
generally what happens is that each of

2457
02:15:08,170 --> 02:15:14,670
these cores that stamp down on a sky

2458
02:15:11,560 --> 02:15:19,630
like this thing has like 4 cores I think

2459
02:15:14,670 --> 02:15:21,399
yeah so this is a 4 core chip and each

2460
02:15:19,630 --> 02:15:22,900
one of those cores runs 2 hyper threads

2461
02:15:21,399 --> 02:15:24,449
that's where there's eight of these but

2462
02:15:22,899 --> 02:15:26,589
there's only four cores but you can see

2463
02:15:24,449 --> 02:15:28,630
logical processors is 8 but the number

2464
02:15:26,590 --> 02:15:31,840
of course is only 4 right so it's for

2465
02:15:28,630 --> 02:15:34,239
real cores and so the number of real

2466
02:15:31,840 --> 02:15:37,029
cores you have determines how many

2467
02:15:34,239 --> 02:15:41,109
on-chip caches you have so a skylake has

2468
02:15:37,029 --> 02:15:44,649
an l1 and an l2 on on the core so each

2469
02:15:41,109 --> 02:15:49,479
core has its own so when you're talking

2470
02:15:44,649 --> 02:15:54,129
about how much caching you get you know

2471
02:15:49,479 --> 02:15:58,959
you have 32 K of instruction cache right

2472
02:15:54,130 --> 02:16:01,210
and 3 2 K of data cache here right in

2473
02:15:58,960 --> 02:16:04,300
your l1 and that's your fastest that can

2474
02:16:01,210 --> 02:16:07,300
be accessed at 1 cycle basically so it's

2475
02:16:04,300 --> 02:16:08,650
it's almost free there's some cases

2476
02:16:07,300 --> 02:16:12,279
where it's not free but most the time

2477
02:16:08,649 --> 02:16:15,129
it's like literally free so you know

2478
02:16:12,279 --> 02:16:17,259
you've got 32 K in the instruction cache

2479
02:16:15,130 --> 02:16:19,510
is only for the actual instructions so

2480
02:16:17,260 --> 02:16:21,430
that doesn't really matter but the data

2481
02:16:19,510 --> 02:16:22,600
cache we have 32 K I mean it matters but

2482
02:16:21,430 --> 02:16:26,740
not for what you're talking about

2483
02:16:22,600 --> 02:16:30,280
so the 32k of l1 cache is per core and

2484
02:16:26,739 --> 02:16:33,850
then the 256 K of l2 cache is also per

2485
02:16:30,279 --> 02:16:35,209
core right so that means we actually

2486
02:16:33,850 --> 02:16:41,300
have

2487
02:16:35,209 --> 02:16:44,299
32k of l1 206 k FL - there's a concept

2488
02:16:41,299 --> 02:16:47,289
of cash inclusivity and exclusivity I

2489
02:16:44,299 --> 02:16:51,978
believe the cash is on x64 generally

2490
02:16:47,290 --> 02:16:53,989
inclusive meaning if if you look at the

2491
02:16:51,978 --> 02:16:56,750
total here there's two ways of thinking

2492
02:16:53,988 --> 02:17:02,629
about this one way is that you have 206

2493
02:16:56,750 --> 02:17:06,439
k FL 2 + 32 K of l1 that would mean your

2494
02:17:02,629 --> 02:17:10,879
total amount would be 256 plus 32 okay

2495
02:17:06,439 --> 02:17:12,139
right if they're inclusive however which

2496
02:17:10,879 --> 02:17:14,478
means that everything that's in the l1

2497
02:17:12,138 --> 02:17:17,179
has to also be in the l2 that means you

2498
02:17:14,478 --> 02:17:20,420
just have to fix K because this 3 2 K is

2499
02:17:17,179 --> 02:17:23,478
just a subset of this tuner 56 K I think

2500
02:17:20,420 --> 02:17:25,068
these chips are inclusive meaning I'm

2501
02:17:23,478 --> 02:17:27,349
pretty sure anything that's in the l1

2502
02:17:25,068 --> 02:17:28,459
has to also be in the l2 unless you're

2503
02:17:27,349 --> 02:17:30,648
using some kind of like streaming

2504
02:17:28,459 --> 02:17:32,358
construction that makes that not happen

2505
02:17:30,648 --> 02:17:35,778
for some reason but I'm pretty sure you

2506
02:17:32,359 --> 02:17:38,109
don't get both don't quote me on that I

2507
02:17:35,779 --> 02:17:40,130
haven't looked recently so I don't know

2508
02:17:38,109 --> 02:17:42,139
maybe it's exclusive maybe it's

2509
02:17:40,129 --> 02:17:45,438
inclusive I don't know but either way

2510
02:17:42,138 --> 02:17:46,848
that's how much you have per core so on

2511
02:17:45,439 --> 02:17:48,738
this particular machine it means I have

2512
02:17:46,849 --> 02:17:51,648
four times that if I'm running

2513
02:17:48,738 --> 02:17:54,920
multi-threaded I have each core has 256

2514
02:17:51,648 --> 02:17:57,558
K right so I actually have a total of

2515
02:17:54,920 --> 02:18:00,109
one megabyte cache addressable right

2516
02:17:57,558 --> 02:18:01,938
because if each if I do a perfect job

2517
02:18:00,109 --> 02:18:05,149
segmenting my workload I can actually

2518
02:18:01,939 --> 02:18:08,719
use 20 56 K on each core and I have four

2519
02:18:05,148 --> 02:18:10,728
cores right and again I think it's

2520
02:18:08,718 --> 02:18:13,039
inclusive which means we don't get an

2521
02:18:10,728 --> 02:18:17,090
extra 32 that is just how much L 1 I

2522
02:18:13,040 --> 02:18:19,880
have so I have 4 times 32 l1 so on time

2523
02:18:17,090 --> 02:18:21,889
on l1 I have 4 times 2 and 56 if I want

2524
02:18:19,879 --> 02:18:22,938
to talk about total on core cash because

2525
02:18:21,888 --> 02:18:26,929
again I think it's inclusive so you

2526
02:18:22,939 --> 02:18:29,540
don't add and then I have off chip cash

2527
02:18:26,929 --> 02:18:33,170
and that's the l3 that takes longer to

2528
02:18:29,540 --> 02:18:37,099
go to it's like more than twice as slow

2529
02:18:33,170 --> 02:18:38,808
than as the l2 usually the l2 by the way

2530
02:18:37,099 --> 02:18:40,609
is like 14 cycles so this is like one

2531
02:18:38,808 --> 02:18:42,888
cycle this is like 14 cycles I think

2532
02:18:40,609 --> 02:18:47,029
this is like 48 cycles or 40 cycles or

2533
02:18:42,888 --> 02:18:48,359
something just a lot worse but still

2534
02:18:47,029 --> 02:18:50,700
better than memory

2535
02:18:48,360 --> 02:18:54,179
can be like hundreds of cycles the l3 is

2536
02:18:50,700 --> 02:19:09,450
shared so the l3 is actually shared by

2537
02:18:54,179 --> 02:19:12,239
all the course and you can usually yeah

2538
02:19:09,450 --> 02:19:14,760
there you go um so you can usually find

2539
02:19:12,239 --> 02:19:17,218
diagrams that show this stuff stamped

2540
02:19:14,760 --> 02:19:19,170
out so here's like the chip that's

2541
02:19:17,218 --> 02:19:26,250
probably like roughly like the chip

2542
02:19:19,170 --> 02:19:29,460
that's in mine maybe yeah I don't really

2543
02:19:26,250 --> 02:19:31,770
know I'm not sure which sky like this is

2544
02:19:29,459 --> 02:19:34,468
taken from obviously there's differences

2545
02:19:31,770 --> 02:19:36,569
between them but if you take a look at

2546
02:19:34,468 --> 02:19:39,539
how it's laid out so if you imagine how

2547
02:19:36,569 --> 02:19:42,718
the cache is work you're gonna have

2548
02:19:39,540 --> 02:19:45,660
something like there's cash in here that

2549
02:19:42,718 --> 02:19:48,739
we all talk to and then there's cash in

2550
02:19:45,659 --> 02:19:53,039
here that only this core talks to right

2551
02:19:48,739 --> 02:19:57,649
and there's a huge chunk of wasted crap

2552
02:19:53,040 --> 02:20:01,910
off to the side because until frickin

2553
02:19:57,649 --> 02:20:08,520
doesn't know how to make things useful

2554
02:20:01,909 --> 02:20:10,789
so this is just garbage so basically

2555
02:20:08,521 --> 02:20:15,360
like the problem that we have is that

2556
02:20:10,790 --> 02:20:17,460
you know the perk or cache has to be

2557
02:20:15,360 --> 02:20:19,620
thought about carefully to make it good

2558
02:20:17,459 --> 02:20:24,089
use of it the shared cache just kind of

2559
02:20:19,620 --> 02:20:25,350
works right so that part no matter how

2560
02:20:24,090 --> 02:20:27,810
bad your multi-threading is you're going

2561
02:20:25,350 --> 02:20:29,850
to get that much caching because

2562
02:20:27,810 --> 02:20:32,699
everyone's asking for it from the same

2563
02:20:29,850 --> 02:20:35,100
place but the perk or caching is

2564
02:20:32,700 --> 02:20:37,829
important to think about because that's

2565
02:20:35,100 --> 02:20:40,260
a smaller size the l3 is always bigger

2566
02:20:37,829 --> 02:20:44,909
smaller size and it's like gotta be

2567
02:20:40,260 --> 02:20:46,079
managed properly per core right so so I

2568
02:20:44,909 --> 02:20:48,510
don't know if that answered your

2569
02:20:46,079 --> 02:20:50,850
question at all but again I've never

2570
02:20:48,510 --> 02:20:55,620
heard of an l0 cache I don't know what

2571
02:20:50,850 --> 02:20:57,000
that would mean there are other things

2572
02:20:55,620 --> 02:20:59,370
on here this is what I was trying to say

2573
02:20:57,000 --> 02:21:00,930
that you know maybe someone calls it

2574
02:20:59,370 --> 02:21:01,551
analysis your I have no idea I've never

2575
02:21:00,930 --> 02:21:04,829
heard of that

2576
02:21:01,550 --> 02:21:06,750
but if you look what happens when you go

2577
02:21:04,829 --> 02:21:08,970
through here so ostensibly there's like

2578
02:21:06,750 --> 02:21:13,709
16 general-purpose registers on an x64

2579
02:21:08,970 --> 02:21:16,079
core or something right hmm 8 xmm

2580
02:21:13,709 --> 02:21:18,720
registers 16 why am i matters 32 CMMS

2581
02:21:16,079 --> 02:21:22,229
and all that right but actually those

2582
02:21:18,720 --> 02:21:24,421
are just names they actually are just

2583
02:21:22,229 --> 02:21:26,640
names for things that's not actually how

2584
02:21:24,421 --> 02:21:27,899
many registers there are the actual

2585
02:21:26,640 --> 02:21:29,671
number of registers come from the

2586
02:21:27,899 --> 02:21:31,649
register file and this thing here the

2587
02:21:29,671 --> 02:21:33,659
register alias table I always called the

2588
02:21:31,649 --> 02:21:36,449
register allocation table but they call

2589
02:21:33,659 --> 02:21:43,800
the register alias table so oh well um

2590
02:21:36,450 --> 02:21:47,671
or rat for short the rat actually hands

2591
02:21:43,800 --> 02:21:49,770
out slots where things are stored and it

2592
02:21:47,671 --> 02:21:52,380
can reuse those names so you can

2593
02:21:49,771 --> 02:21:54,570
actually access way more registers than

2594
02:21:52,380 --> 02:21:56,880
the number of registers that you

2595
02:21:54,569 --> 02:22:02,459
ostensibly have names for because it can

2596
02:21:56,880 --> 02:22:04,859
reuse them right so in some sense this

2597
02:22:02,459 --> 02:22:08,010
which is the thing that this hands out

2598
02:22:04,860 --> 02:22:09,271
accesses to these are the ones for like

2599
02:22:08,011 --> 02:22:12,479
general purpose and these are the ones

2600
02:22:09,271 --> 02:22:15,271
for the wide registers there's actually

2601
02:22:12,479 --> 02:22:17,130
you could think of that almost as in l0

2602
02:22:15,271 --> 02:22:20,721
cache if you want to because it's

2603
02:22:17,130 --> 02:22:23,970
actually 180 memory locations like

2604
02:22:20,720 --> 02:22:25,560
64-bit memory locations or 128-bit

2605
02:22:23,970 --> 02:22:27,511
memory locations and this side or

2606
02:22:25,560 --> 02:22:32,579
whatever actually on this chip it would

2607
02:22:27,511 --> 02:22:40,909
be xx face turn 56 bit that are closer

2608
02:22:32,579 --> 02:22:40,909
even than the l1 right so you know

2609
02:22:49,610 --> 02:22:56,630
okay cool yeah so l0 I just haven't

2610
02:22:52,459 --> 02:22:59,179
heard but yeah if that answer your

2611
02:22:56,629 --> 02:23:01,520
question great l 1 is the first cache on

2612
02:22:59,180 --> 02:23:04,190
a sky lake the first real cache is out

2613
02:23:01,521 --> 02:23:07,840
one they don't call it l0 there's no

2614
02:23:04,190 --> 02:23:07,840
reason they couldn't but they just don't

2615
02:23:15,010 --> 02:23:22,059
how much time I expecting to shave off

2616
02:23:17,350 --> 02:23:24,939
by making the routine wide so I don't

2617
02:23:22,059 --> 02:23:28,238
know because that assembly language code

2618
02:23:24,939 --> 02:23:30,068
that it generated was so bad that I

2619
02:23:28,238 --> 02:23:30,788
could believe we'd shave a lot off the

2620
02:23:30,068 --> 02:23:35,680
street

2621
02:23:30,789 --> 02:23:41,140
um a lot I would like to get under four

2622
02:23:35,680 --> 02:23:43,779
seconds yes I think we can make dramatic

2623
02:23:41,139 --> 02:23:45,248
speed improvements to this code now now

2624
02:23:43,779 --> 02:23:52,960
that it's all set up the way I want I

2625
02:23:45,248 --> 02:23:54,789
think we can get pretty low and yeah

2626
02:23:52,959 --> 02:23:56,259
just to Risa mirai's so if you want to

2627
02:23:54,789 --> 02:23:59,770
know how many cache lines the core can

2628
02:23:56,260 --> 02:24:01,420
hold you just take the number that you

2629
02:23:59,770 --> 02:24:03,340
see for the particular cache you're

2630
02:24:01,420 --> 02:24:05,710
wondering about so 32 K in this case and

2631
02:24:03,340 --> 02:24:15,869
you divide by the cache line size which

2632
02:24:05,709 --> 02:24:15,868
is 64 bytes right so

2633
02:24:19,600 --> 02:24:22,658
[Music]

2634
02:24:23,088 --> 02:24:31,859
there is a sort of separate thing you

2635
02:24:26,639 --> 02:24:35,939
have to worry about and it's this part

2636
02:24:31,859 --> 02:24:38,818
here so one of the things that they do

2637
02:24:35,939 --> 02:24:40,918
in cash is just because they're hardware

2638
02:24:38,818 --> 02:24:45,389
and they can't be super fancy they've

2639
02:24:40,918 --> 02:24:48,869
got to be fast is saying that you know

2640
02:24:45,389 --> 02:24:53,248
so so the naive calculation is just like

2641
02:24:48,869 --> 02:24:56,578
well you know it's 32 K right

2642
02:24:53,248 --> 02:25:01,559
and it's a 64 byte cache line so like

2643
02:24:56,578 --> 02:25:05,609
it's 512 lines right but it doesn't

2644
02:25:01,559 --> 02:25:08,189
actually store 512 lines arbitrarily it

2645
02:25:05,609 --> 02:25:11,850
can only actually store 512 lines of

2646
02:25:08,189 --> 02:25:13,529
cash if those caches don't overlap if

2647
02:25:11,850 --> 02:25:19,020
those lines don't overlap their

2648
02:25:13,529 --> 02:25:24,658
addresses right so what this 8 way means

2649
02:25:19,020 --> 02:25:26,220
is that when it goes to look to see if a

2650
02:25:24,658 --> 02:25:30,828
particular memory address is in the

2651
02:25:26,219 --> 02:25:35,099
cache there's only 8 slots for any

2652
02:25:30,828 --> 02:25:41,279
particular lookup formula so like if you

2653
02:25:35,100 --> 02:25:49,439
imagine and you could do some reading on

2654
02:25:41,279 --> 02:25:52,289
this here right so I don't know why

2655
02:25:49,439 --> 02:25:55,680
there's little creatures in here but you

2656
02:25:52,289 --> 02:26:00,329
know there are the point here is that

2657
02:25:55,680 --> 02:26:03,389
basically when you actually go to put

2658
02:26:00,328 --> 02:26:05,788
stuff in a cache there's some kind of

2659
02:26:03,389 --> 02:26:08,578
tag they used to identify the memory

2660
02:26:05,789 --> 02:26:14,640
address that is not the full memory

2661
02:26:08,578 --> 02:26:16,978
address and it goes into the cache in a

2662
02:26:14,639 --> 02:26:19,528
slot like a hash table using that tag

2663
02:26:16,978 --> 02:26:22,260
basically and then inside that slot

2664
02:26:19,529 --> 02:26:26,399
there's whatever the way whatever that

2665
02:26:22,260 --> 02:26:29,969
number is this that's how many different

2666
02:26:26,398 --> 02:26:31,560
cache lines at stores in that slot so if

2667
02:26:29,969 --> 02:26:34,680
all of the data

2668
02:26:31,560 --> 02:26:38,310
that you happen to want to store in the

2669
02:26:34,681 --> 02:26:42,271
cash all has the same tag you actually

2670
02:26:38,310 --> 02:26:46,079
only get eight cash lines right so you

2671
02:26:42,271 --> 02:26:50,011
may have like drastically drastically

2672
02:26:46,079 --> 02:26:52,739
less cash than you think you do if your

2673
02:26:50,011 --> 02:26:57,390
particular addressing scheme that you

2674
02:26:52,739 --> 02:26:59,511
are using it doesn't play well so like

2675
02:26:57,390 --> 02:27:05,159
let's say that what it uses for the tag

2676
02:26:59,511 --> 02:27:09,989
is like we know it's an eight-way cash

2677
02:27:05,159 --> 02:27:12,261
so like we know that it's 32 times 10 24

2678
02:27:09,989 --> 02:27:16,290
divided by 8 so we know that there's

2679
02:27:12,261 --> 02:27:18,421
4096 actual slots right and each one of

2680
02:27:16,290 --> 02:27:20,880
those slaw oh no that's not true because

2681
02:27:18,421 --> 02:27:23,251
the it's 3k so we have to first divide

2682
02:27:20,880 --> 02:27:25,859
by that so it's the 512 so it's 5 till

2683
02:27:23,251 --> 02:27:27,989
divided by 8 so there's 64 slots and

2684
02:27:25,860 --> 02:27:32,101
each one of them has 8 things in it

2685
02:27:27,989 --> 02:27:34,409
right so let's suppose that it just uses

2686
02:27:32,101 --> 02:27:37,381
the bottom 4 well it's not gonna use the

2687
02:27:34,409 --> 02:27:39,780
bottom 4 bits cause it's 64 but so let's

2688
02:27:37,380 --> 02:27:44,251
suppose it uses it gets rid of the

2689
02:27:39,780 --> 02:27:46,261
bottom 6 bits and uses the next 4 bits

2690
02:27:44,251 --> 02:27:49,409
to figure out where in the cash this

2691
02:27:46,261 --> 02:27:53,791
thing should go if you just so happened

2692
02:27:49,409 --> 02:27:55,921
to be strided by that amount when you

2693
02:27:53,790 --> 02:27:58,350
are when you're walking through memory

2694
02:27:55,921 --> 02:28:00,591
all of your accesses will hit the same

2695
02:27:58,351 --> 02:28:04,230
cache line and you'll only end up with 8

2696
02:28:00,591 --> 02:28:10,489
times 64 bytes of cash you'll have 512

2697
02:28:04,229 --> 02:28:15,149
bytes of cash right so that's called

2698
02:28:10,489 --> 02:28:16,860
aliasing usually and it's a very hard

2699
02:28:15,149 --> 02:28:18,091
thing to know is happening so you kind

2700
02:28:16,860 --> 02:28:23,041
of have to think about your cash

2701
02:28:18,091 --> 02:28:24,329
addressing it's a really advanced topic

2702
02:28:23,040 --> 02:28:27,199
so it's probably not so much to go into

2703
02:28:24,329 --> 02:28:29,280
now but it's something to be aware of so

2704
02:28:27,200 --> 02:28:31,381
nominally speaking if you're just

2705
02:28:29,280 --> 02:28:33,239
addressing flat linear blocks of memory

2706
02:28:31,380 --> 02:28:35,251
the cache will probably get you 32 okay

2707
02:28:33,239 --> 02:28:40,829
if you're doing is something weird you

2708
02:28:35,251 --> 02:28:43,261
may have to quickly just go verify that

2709
02:28:40,829 --> 02:28:44,851
your addressing scheme and the CPUs

2710
02:28:43,261 --> 02:28:46,979
cache tagging scheme

2711
02:28:44,851 --> 02:28:53,101
don't conflict because if they do you're

2712
02:28:46,979 --> 02:29:06,029
in a lot of trouble hopefully that makes

2713
02:28:53,101 --> 02:29:07,261
sense okay all right thanks everyone for

2714
02:29:06,030 --> 02:29:08,641
joining me for hopes on handmade here

2715
02:29:07,261 --> 02:29:11,069
it's about pleasure coding with you as

2716
02:29:08,640 --> 02:29:12,181
always if you would like to follow along

2717
02:29:11,069 --> 02:29:13,351
the series at home you always peer to

2718
02:29:12,181 --> 02:29:14,640
the game on handmade here at organic

2719
02:29:13,351 --> 02:29:16,771
come to the source code so you can

2720
02:29:14,640 --> 02:29:17,819
follow along with it at home I'll be

2721
02:29:16,771 --> 02:29:19,110
back here tomorrow to finish up that

2722
02:29:17,819 --> 02:29:21,841
routine and hopefully we'll get some

2723
02:29:19,110 --> 02:29:23,700
good speed winds out of that and we can

2724
02:29:21,841 --> 02:29:24,511
continue optimizing our lighting I think

2725
02:29:23,700 --> 02:29:26,280
it's gonna come out really nicely

2726
02:29:24,511 --> 02:29:27,271
because then I Chi said there's also a

2727
02:29:26,280 --> 02:29:28,471
thing I want to do that I think will

2728
02:29:27,271 --> 02:29:31,141
make that raycasting much faster so I

2729
02:29:28,470 --> 02:29:32,489
think as we go I think we're gonna end

2730
02:29:31,140 --> 02:29:34,199
up with some some really good

2731
02:29:32,489 --> 02:29:35,310
performance here that's it for today

2732
02:29:34,200 --> 02:29:37,561
hope to see you back here tomorrow till

2733
02:29:35,310 --> 02:29:40,970
then have fun printer everyone and I'll

2734
02:29:37,560 --> 02:29:40,970
see any internet piggies everybody

