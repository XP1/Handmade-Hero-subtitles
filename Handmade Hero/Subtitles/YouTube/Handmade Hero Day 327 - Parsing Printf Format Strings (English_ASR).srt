1
00:00:03,859 --> 00:00:08,039
alright hello everyone and welcome to

2
00:00:06,240 --> 00:00:10,440
handmade Heroes show recode a complete

3
00:00:08,039 --> 00:00:12,599
game live on stream before I get started

4
00:00:10,439 --> 00:00:14,359
today a pretty simple thing we got to do

5
00:00:12,599 --> 00:00:17,219
today it's a little bit of busy work but

6
00:00:14,359 --> 00:00:20,009
we're just replacing printf so that we

7
00:00:17,219 --> 00:00:22,729
can have that without so that we're not

8
00:00:20,010 --> 00:00:26,189
relying on the C runtime library for it

9
00:00:22,730 --> 00:00:28,528
a couple things I wanted to mention one

10
00:00:26,189 --> 00:00:30,480
is that I'm gonna tweet out soon about

11
00:00:28,528 --> 00:00:32,520
it but the early registration for

12
00:00:30,480 --> 00:00:34,170
handmade con will be ending soon I

13
00:00:32,520 --> 00:00:35,520
believe we're getting the point where

14
00:00:34,170 --> 00:00:37,679
the speaker list will probably start

15
00:00:35,520 --> 00:00:39,300
getting finalized and so if you haven't

16
00:00:37,679 --> 00:00:41,820
bought tickets to hammock on and you

17
00:00:39,299 --> 00:00:44,250
know you want to go already definitely

18
00:00:41,820 --> 00:00:47,460
make sure you grab those before the

19
00:00:44,250 --> 00:00:49,469
price before the better price goes up I

20
00:00:47,460 --> 00:00:51,780
know most people always say that the

21
00:00:49,469 --> 00:00:55,170
ticket price is not really important

22
00:00:51,780 --> 00:00:56,429
because I'm traveling to handmade con

23
00:00:55,170 --> 00:00:58,710
always cost my other ticket price which

24
00:00:56,429 --> 00:01:00,869
is what we work hard to do we try to

25
00:00:58,710 --> 00:01:03,359
keep three prices as low as possible but

26
00:01:00,869 --> 00:01:05,099
I mean you might as well save $20 if you

27
00:01:03,359 --> 00:01:06,090
know you're going to if you don't know

28
00:01:05,099 --> 00:01:07,199
whether you're going to go then don't

29
00:01:06,090 --> 00:01:11,040
worry about it

30
00:01:07,200 --> 00:01:13,260
you know hey it's only $20 i guess is

31
00:01:11,040 --> 00:01:15,600
the dance the converse and you can wait

32
00:01:13,260 --> 00:01:17,070
till closer to the event but just

33
00:01:15,599 --> 00:01:19,859
thought I'd point that out that's one

34
00:01:17,069 --> 00:01:23,969
thing and the second thing is I will be

35
00:01:19,859 --> 00:01:27,030
speaking at this conference they asked

36
00:01:23,969 --> 00:01:31,530
me to come and speak at it and generally

37
00:01:27,030 --> 00:01:35,759
you know I try to support any speaking

38
00:01:31,530 --> 00:01:37,469
any conference that seems to be run you

39
00:01:35,759 --> 00:01:39,328
know ethically and for the benefit of

40
00:01:37,469 --> 00:01:43,978
the public and this this you know they

41
00:01:39,328 --> 00:01:46,279
asked me if I would give a talk here and

42
00:01:43,978 --> 00:01:50,519
it definitely looked like the kind of

43
00:01:46,280 --> 00:01:52,109
talk kind of comments that's really for

44
00:01:50,519 --> 00:01:55,048
the benefit of the public and so I was I

45
00:01:52,109 --> 00:01:56,849
was down with that I don't know very

46
00:01:55,049 --> 00:01:58,610
much about it other than the fact that

47
00:01:56,849 --> 00:02:02,908
they're a group that does basically

48
00:01:58,609 --> 00:02:05,039
research paper review kinds of speeches

49
00:02:02,909 --> 00:02:07,550
these are the speakers for speaking at

50
00:02:05,040 --> 00:02:10,530
it but it's actually part of a bigger

51
00:02:07,549 --> 00:02:13,740
very strange conference I have no idea

52
00:02:10,530 --> 00:02:16,800
like this conference was purely

53
00:02:13,740 --> 00:02:20,040
bizarre I had never heard of it but I

54
00:02:16,800 --> 00:02:21,960
looked and I was like I it looked like

55
00:02:20,039 --> 00:02:25,590
one of those like Kafka s things where

56
00:02:21,960 --> 00:02:28,560
you're like what is is happening because

57
00:02:25,590 --> 00:02:30,689
I looked at like the you know the the

58
00:02:28,560 --> 00:02:34,560
names of the presentations and they're

59
00:02:30,689 --> 00:02:38,310
just they're like kind of hilarious

60
00:02:34,560 --> 00:02:40,530
right like things that are just I look

61
00:02:38,310 --> 00:02:43,560
at them and I'm like it what is it's

62
00:02:40,530 --> 00:02:44,759
it's all like stuff that I don't

63
00:02:43,560 --> 00:02:46,789
understand how you would need a

64
00:02:44,759 --> 00:02:49,379
presentation about they're so bizarre

65
00:02:46,789 --> 00:02:52,409
but you know or they're just like kind

66
00:02:49,379 --> 00:02:56,699
of often the kind of in crazy town about

67
00:02:52,409 --> 00:02:59,159
like you know things that I don't even

68
00:02:56,699 --> 00:03:01,889
know like but anyway point being the

69
00:02:59,159 --> 00:03:03,210
conference is crazy I have no idea what

70
00:03:01,889 --> 00:03:05,399
the deal is with it but it looks like

71
00:03:03,210 --> 00:03:08,370
it's fairly sizeable and popular and I

72
00:03:05,400 --> 00:03:11,760
guess all you really have to do is you

73
00:03:08,370 --> 00:03:13,680
register for the whole thing I don't

74
00:03:11,759 --> 00:03:17,039
even know point being if you happen to

75
00:03:13,680 --> 00:03:19,980
be going to this thing and going to this

76
00:03:17,039 --> 00:03:22,169
crazy conference this papers we love

77
00:03:19,979 --> 00:03:24,780
conference is it's like a one-day thing

78
00:03:22,169 --> 00:03:27,419
that happens before it and I will be

79
00:03:24,780 --> 00:03:31,800
speaking at it so if you want to go to

80
00:03:27,419 --> 00:03:34,469
that there is the bad information and I

81
00:03:31,800 --> 00:03:38,100
just don't even know what this is I I

82
00:03:34,469 --> 00:03:39,659
could not tell I have no idea it was

83
00:03:38,099 --> 00:03:42,150
very strange

84
00:03:39,659 --> 00:03:45,870
and so I just kind of closed it and was

85
00:03:42,150 --> 00:03:47,400
like well all right so anyway but the

86
00:03:45,870 --> 00:03:49,590
papers we love thing is kind of cool and

87
00:03:47,400 --> 00:03:51,420
if you look to they have a papers we

88
00:03:49,590 --> 00:03:54,120
love Twitter feed that's kind of cool

89
00:03:51,419 --> 00:03:57,000
too if it's the sort of thing that

90
00:03:54,120 --> 00:04:00,659
you're into but they basically you know

91
00:03:57,000 --> 00:04:04,590
tweet out you know little presentations

92
00:04:00,659 --> 00:04:06,210
that people do about various like you

93
00:04:04,590 --> 00:04:09,450
know papers that have come out recently

94
00:04:06,210 --> 00:04:11,340
and I guess the main thing that's

95
00:04:09,449 --> 00:04:13,939
probably a little problematic for a game

96
00:04:11,340 --> 00:04:16,920
person is they tend to not be super game

97
00:04:13,939 --> 00:04:21,509
eccentric but it's kind of cool anyway

98
00:04:16,920 --> 00:04:23,340
like just in terms of you know keeping

99
00:04:21,509 --> 00:04:25,649
abreast of like what's going on research

100
00:04:23,339 --> 00:04:27,209
wise is kind of fun it would be neat if

101
00:04:25,649 --> 00:04:28,620
there was a game version of this

102
00:04:27,209 --> 00:04:31,079
there is I don't know but it would be

103
00:04:28,620 --> 00:04:33,209
kind of cool for someone to have a like

104
00:04:31,079 --> 00:04:35,279
a feed where it's just like hey papers

105
00:04:33,209 --> 00:04:37,560
that are sort of relevant you know to

106
00:04:35,279 --> 00:04:40,559
games and you could just subscribe and

107
00:04:37,560 --> 00:04:42,810
kind of see them as they come up anyway

108
00:04:40,560 --> 00:04:45,509
that's it for the business if that makes

109
00:04:42,810 --> 00:04:48,089
sense I'm gonna go ahead and get started

110
00:04:45,509 --> 00:04:50,310
on the actual up or I could just launch

111
00:04:48,089 --> 00:04:55,589
the intel architecture guide because you

112
00:04:50,310 --> 00:04:57,959
know that's always good I'm gonna go

113
00:04:55,589 --> 00:05:00,719
ahead and get started a 327 so go ahead

114
00:04:57,959 --> 00:05:03,538
and used a 326 the source code when you

115
00:05:00,720 --> 00:05:09,000
get a chance and I am going to go ahead

116
00:05:03,538 --> 00:05:10,769
and go back to doing the printf if you

117
00:05:09,000 --> 00:05:13,228
remember where we left off

118
00:05:10,769 --> 00:05:14,879
we essentially implemented a little

119
00:05:13,228 --> 00:05:17,639
scanner because we just started this at

120
00:05:14,879 --> 00:05:19,709
the end of the stream last time but

121
00:05:17,639 --> 00:05:22,199
basically we replaced printf with a call

122
00:05:19,709 --> 00:05:25,408
to our own function and we did a little

123
00:05:22,199 --> 00:05:28,949
scanner but but all it does is it

124
00:05:25,408 --> 00:05:32,250
essentially just prints out what the

125
00:05:28,949 --> 00:05:34,080
format codes would have been but it

126
00:05:32,250 --> 00:05:36,149
doesn't actually do anything right so

127
00:05:34,079 --> 00:05:44,370
all you see is just what the format

128
00:05:36,149 --> 00:05:47,698
string is I mean minus the percent which

129
00:05:44,370 --> 00:05:50,848
we stripped out so our goal is

130
00:05:47,699 --> 00:05:52,919
essentially to go from just the format

131
00:05:50,848 --> 00:05:55,168
strings to actually printing things up

132
00:05:52,918 --> 00:05:58,319
and like I said that probably won't be

133
00:05:55,168 --> 00:06:02,189
too hard for us to do in relatively

134
00:05:58,319 --> 00:06:02,968
short order except for a floating-point

135
00:06:02,189 --> 00:06:04,610
print out

136
00:06:02,968 --> 00:06:06,870
floating point print out is

137
00:06:04,610 --> 00:06:10,468
traditionally extremely extremely

138
00:06:06,870 --> 00:06:12,959
extremely difficult if you don't believe

139
00:06:10,468 --> 00:06:14,610
me just see the the trail of papers of

140
00:06:12,959 --> 00:06:17,339
people trying to implement floating

141
00:06:14,610 --> 00:06:19,979
point print out lucky for us and I

142
00:06:17,339 --> 00:06:21,689
mention this on the previous stream I do

143
00:06:19,978 --> 00:06:24,990
know that someone recently printed a

144
00:06:21,689 --> 00:06:27,810
paper that actually supposedly has a

145
00:06:24,990 --> 00:06:30,418
much cleaner and easier way to implement

146
00:06:27,810 --> 00:06:32,009
floating point printout so hopefully we

147
00:06:30,418 --> 00:06:34,918
can go lean on that and maybe it really

148
00:06:32,009 --> 00:06:37,620
is much easier to do now but up until

149
00:06:34,918 --> 00:06:39,538
that it was definitely the case that

150
00:06:37,620 --> 00:06:40,889
that people struggled with it

151
00:06:39,538 --> 00:06:42,120
you know if you

152
00:06:40,889 --> 00:06:44,129
if you looked at what some of the

153
00:06:42,120 --> 00:06:46,228
standard papers were before on how to

154
00:06:44,129 --> 00:06:51,389
print out a floating-point number

155
00:06:46,228 --> 00:07:01,699
they're pretty crazy let me see if I can

156
00:06:51,389 --> 00:07:04,710
find one from the old days let's see

157
00:07:01,699 --> 00:07:09,658
dragon for I think is the one that I was

158
00:07:04,709 --> 00:07:12,538
thinking of let's see if we've got it

159
00:07:09,658 --> 00:07:14,519
here but you can see I mean just even

160
00:07:12,538 --> 00:07:18,209
looking at the code it's kind of crazy

161
00:07:14,519 --> 00:07:21,408
but just in terms of how easy it is know

162
00:07:18,209 --> 00:07:25,310
is that well the one I'm thinking of I

163
00:07:21,408 --> 00:07:29,759
want the paper it's what I want

164
00:07:25,310 --> 00:07:35,610
is this the one no this is the new one

165
00:07:29,759 --> 00:07:40,770
the one that I actually want to use but

166
00:07:35,610 --> 00:07:46,979
I thought there was kind of a I thought

167
00:07:40,769 --> 00:07:49,579
there was kind of an older one here this

168
00:07:46,978 --> 00:07:49,579
might be it

169
00:07:52,120 --> 00:07:59,420
all right anyway not worth rattling on

170
00:07:57,620 --> 00:08:02,840
point being if you want to spend some

171
00:07:59,420 --> 00:08:05,780
time going down that particular rathole

172
00:08:02,839 --> 00:08:07,429
yourself you can go look at for example

173
00:08:05,779 --> 00:08:09,769
you could just open up that paper that's

174
00:08:07,430 --> 00:08:13,069
the new paper that is the one that I

175
00:08:09,769 --> 00:08:14,779
wanted to take a look at and go read

176
00:08:13,069 --> 00:08:16,579
through its references and find the old

177
00:08:14,779 --> 00:08:19,669
ways of printing them out and it's just

178
00:08:16,579 --> 00:08:21,500
kind of crazy how you know convoluted it

179
00:08:19,670 --> 00:08:23,240
was and how obtrusive a problem it

180
00:08:21,500 --> 00:08:25,040
apparently was it's not a problem I've

181
00:08:23,240 --> 00:08:26,870
ever looked at myself I don't know if

182
00:08:25,040 --> 00:08:29,210
maybe people are making a mountain out

183
00:08:26,870 --> 00:08:30,769
of a molehill or something but point

184
00:08:29,209 --> 00:08:33,049
being lots of people have kind of

185
00:08:30,769 --> 00:08:36,679
flailed at it and it didn't go well so

186
00:08:33,049 --> 00:08:39,859
that is really the only part that

187
00:08:36,679 --> 00:08:41,929
requires any special care is the

188
00:08:39,860 --> 00:08:45,289
floating-point part everything else is

189
00:08:41,929 --> 00:08:47,629
actually just kind of a bookkeeping and

190
00:08:45,289 --> 00:08:50,120
since we don't have any concerns we're

191
00:08:47,629 --> 00:08:51,320
not using user input values there

192
00:08:50,120 --> 00:08:53,779
anything like that we don't even really

193
00:08:51,320 --> 00:08:56,510
have security concerns in this case it's

194
00:08:53,779 --> 00:08:58,669
a lot easier to we can be sloppy if we

195
00:08:56,509 --> 00:09:00,110
want to be sloppy on this sort of thing

196
00:08:58,669 --> 00:09:04,539
in it and it's not going to be a problem

197
00:09:00,110 --> 00:09:07,940
for us so that's also kind of a a handy

198
00:09:04,539 --> 00:09:09,860
sort of a bit there so I don't know

199
00:09:07,940 --> 00:09:11,990
where I put this thing I'll admit that

200
00:09:09,860 --> 00:09:14,629
but I think it was down here and okay so

201
00:09:11,990 --> 00:09:16,639
it is so here's our function that we

202
00:09:14,629 --> 00:09:18,649
wrote that's kind of set up for us to

203
00:09:16,639 --> 00:09:20,210
start implementing our printf you can

204
00:09:18,649 --> 00:09:22,340
see that it's format string list you

205
00:09:20,210 --> 00:09:24,500
remember we talked about the arglist

206
00:09:22,340 --> 00:09:26,509
part for variable length argument lists

207
00:09:24,500 --> 00:09:27,409
because you know how that printf tends

208
00:09:26,509 --> 00:09:28,610
to be implemented as a variable

209
00:09:27,409 --> 00:09:30,439
arguments if you don't understand how

210
00:09:28,610 --> 00:09:31,759
those work go back and watch the

211
00:09:30,440 --> 00:09:33,890
previous stream because I explain how

212
00:09:31,759 --> 00:09:35,210
that sort of stuff works so at this

213
00:09:33,889 --> 00:09:36,970
point what we need to do is start

214
00:09:35,210 --> 00:09:40,790
actually processing these percentages

215
00:09:36,970 --> 00:09:44,320
and handling them properly so as you can

216
00:09:40,789 --> 00:09:47,539
see what happens here we come through

217
00:09:44,320 --> 00:09:49,580
and we've got our sort of our

218
00:09:47,539 --> 00:09:52,279
destination output little utility that

219
00:09:49,580 --> 00:09:55,120
we have here and we're looping over the

220
00:09:52,279 --> 00:09:57,649
input and every time we see a percentage

221
00:09:55,120 --> 00:10:00,799
sign right now we're just skipping it

222
00:09:57,649 --> 00:10:02,870
but if we don't see a % then we're

223
00:10:00,799 --> 00:10:04,969
actually outputting it so what we need

224
00:10:02,870 --> 00:10:08,149
to do now is implement something

225
00:10:04,970 --> 00:10:09,889
that actually does work on the % now I'm

226
00:10:08,149 --> 00:10:11,750
gonna do something very simple first and

227
00:10:09,889 --> 00:10:12,980
then we'll sort of expand it out because

228
00:10:11,750 --> 00:10:14,600
we've actually got a lot of things we

229
00:10:12,980 --> 00:10:16,730
have to handle if we want to sort of

230
00:10:14,600 --> 00:10:20,050
have a predict that does the stuff that

231
00:10:16,730 --> 00:10:23,028
we need to do because we have stuff like

232
00:10:20,049 --> 00:10:25,008
0-2 and stuff like that like you know

233
00:10:23,028 --> 00:10:26,539
wit specifiers and pad with zero and

234
00:10:25,009 --> 00:10:28,519
those sorts of things so in order to

235
00:10:26,539 --> 00:10:30,438
support those properly we have to do

236
00:10:28,519 --> 00:10:31,850
some additional work besides just

237
00:10:30,438 --> 00:10:33,769
looking at one character after the

238
00:10:31,850 --> 00:10:43,819
percent and printing out the thing that

239
00:10:33,769 --> 00:10:47,509
it's indicating but for example when we

240
00:10:43,818 --> 00:10:50,448
get the % what I could do here is say

241
00:10:47,509 --> 00:10:54,139
well okay if the thing that I'm looking

242
00:10:50,448 --> 00:10:56,028
at now after the % is an S for example

243
00:10:54,139 --> 00:10:58,810
let's just take a look at how we would

244
00:10:56,028 --> 00:11:05,240
implement one ez

245
00:10:58,809 --> 00:11:09,619
print app type okay so if it's an S then

246
00:11:05,240 --> 00:11:12,110
I want to look at the s string value

247
00:11:09,620 --> 00:11:13,610
basically and what I know that I can do

248
00:11:12,110 --> 00:11:15,379
because we talked about this before is

249
00:11:13,610 --> 00:11:16,789
once I have an Arg lift I can pull

250
00:11:15,379 --> 00:11:19,909
things off of the Arg list

251
00:11:16,789 --> 00:11:21,500
now if you remember I I kind of showed

252
00:11:19,909 --> 00:11:22,610
you what those functions look like over

253
00:11:21,500 --> 00:11:25,870
here I'm just gonna bring them up again

254
00:11:22,610 --> 00:11:28,818
so you can look at them on doing this

255
00:11:25,870 --> 00:11:30,610
well I don't want VA start but I want VA

256
00:11:28,818 --> 00:11:34,789
arrgh

257
00:11:30,610 --> 00:11:36,980
so if I go to the definition of that you

258
00:11:34,789 --> 00:11:39,349
can see it's kind of circuitous Li to

259
00:11:36,980 --> 00:11:41,360
find here but we can just drill down you

260
00:11:39,350 --> 00:11:43,610
can see how it goes right it's just

261
00:11:41,360 --> 00:11:46,370
looking up into the stack to find

262
00:11:43,610 --> 00:11:49,519
whatever the argument is that I tell it

263
00:11:46,370 --> 00:11:51,649
and I'm gonna pass it this T and the T

264
00:11:49,519 --> 00:11:53,629
value is just the type that I think

265
00:11:51,649 --> 00:11:56,120
should be on the stack at the current

266
00:11:53,629 --> 00:11:57,829
location right and it's gonna pop that

267
00:11:56,120 --> 00:11:58,879
guy basically it will not only pop it

268
00:11:57,828 --> 00:12:01,789
off the stack but it's going to like

269
00:11:58,879 --> 00:12:03,680
advance it's sort of idea the VA list is

270
00:12:01,789 --> 00:12:05,509
sort of a pointer right to where on the

271
00:12:03,679 --> 00:12:09,528
stack we're reading from it's gonna move

272
00:12:05,509 --> 00:12:11,659
that forward or in you know forward or

273
00:12:09,528 --> 00:12:13,250
backwards depending on how your compiler

274
00:12:11,659 --> 00:12:14,778
decided to do it but it's going to move

275
00:12:13,250 --> 00:12:17,958
it in the correct direction for

276
00:12:14,778 --> 00:12:18,889
advancement I'll put it that way it's

277
00:12:17,958 --> 00:12:21,679
going to move it

278
00:12:18,889 --> 00:12:23,449
by the size of that type so if I tell it

279
00:12:21,679 --> 00:12:25,099
I want to read a care star it's going to

280
00:12:23,450 --> 00:12:27,800
go forwards by like eight bytes on a

281
00:12:25,100 --> 00:12:29,120
64-bit architecture right and it's going

282
00:12:27,799 --> 00:12:32,719
to give me back the value that's in that

283
00:12:29,120 --> 00:12:35,179
location so that's what I need to do so

284
00:12:32,720 --> 00:12:37,519
if I see an S then I know well okay I've

285
00:12:35,179 --> 00:12:39,199
got an argh list and I need to read a

286
00:12:37,519 --> 00:12:41,929
care star because I'm expecting the

287
00:12:39,200 --> 00:12:47,330
argument to be a care star so this is

288
00:12:41,929 --> 00:12:49,129
like the string pointer right and now

289
00:12:47,330 --> 00:12:50,810
that I have that string pointer I'm of

290
00:12:49,129 --> 00:12:53,629
course supposed to insert the string

291
00:12:50,809 --> 00:12:55,939
into the destination at this location

292
00:12:53,629 --> 00:12:58,399
right well that's pretty easy to do

293
00:12:55,940 --> 00:13:00,470
because we already know and I suppose I

294
00:12:58,399 --> 00:13:02,569
could also do that advancing there

295
00:13:00,470 --> 00:13:04,370
that's pretty easy to do because we know

296
00:13:02,570 --> 00:13:06,740
that we already have the ability to just

297
00:13:04,370 --> 00:13:11,000
kind of stream things out right we've

298
00:13:06,740 --> 00:13:13,009
got this out care thing oops that I can

299
00:13:11,000 --> 00:13:16,279
use so for example what I could pretty

300
00:13:13,009 --> 00:13:18,710
easily here just go you know okay for a

301
00:13:16,279 --> 00:13:21,799
care star you know source equals string

302
00:13:18,710 --> 00:13:24,590
or something like this star source you

303
00:13:21,799 --> 00:13:26,240
know plus plus source and for every

304
00:13:24,590 --> 00:13:29,149
character in the source I'm just gonna

305
00:13:26,240 --> 00:13:32,659
go ahead and output it to the

306
00:13:29,149 --> 00:13:34,459
destination right so that's you know a

307
00:13:32,659 --> 00:13:38,480
pretty easy pretty straightforward

308
00:13:34,460 --> 00:13:40,220
version of the S code and so if I run

309
00:13:38,480 --> 00:13:45,620
the game well I'd actually have to have

310
00:13:40,220 --> 00:13:47,509
the game running there we go so if I run

311
00:13:45,620 --> 00:13:51,769
the game now and we go to something that

312
00:13:47,509 --> 00:13:54,679
was s you know an S style thing oops I

313
00:13:51,769 --> 00:13:56,929
should be able to get it so that we can

314
00:13:54,679 --> 00:13:59,750
actually print one of those out of

315
00:13:56,929 --> 00:14:01,719
course that should be one there and I'm

316
00:13:59,750 --> 00:14:05,980
not getting it so did I forget something

317
00:14:01,720 --> 00:14:05,980
if at one oh I did

318
00:14:12,000 --> 00:14:21,039
all right

319
00:14:13,539 --> 00:14:21,969
so let's see what we get here there we

320
00:14:21,039 --> 00:14:23,919
go

321
00:14:21,970 --> 00:14:27,759
so in this case we got a string there's

322
00:14:23,919 --> 00:14:34,629
the string that we're looking for I feel

323
00:14:27,759 --> 00:14:36,399
like this should work right I wonder if

324
00:14:34,629 --> 00:14:38,110
we need we probably need to support and

325
00:14:36,399 --> 00:14:50,379
up passing a null string here too don't

326
00:14:38,110 --> 00:14:51,610
we how we doing on this chunk X there we

327
00:14:50,379 --> 00:14:55,320
go

328
00:14:51,610 --> 00:14:55,320
so to copy that in there and

329
00:15:01,198 --> 00:15:09,490
well that looks fine but for some reason

330
00:15:08,019 --> 00:15:17,139
when we get to here we're getting a

331
00:15:09,490 --> 00:15:19,389
string out up right so yeah we haven't

332
00:15:17,139 --> 00:15:20,709
sort of another problem here that we're

333
00:15:19,389 --> 00:15:24,459
going to have to address which is that

334
00:15:20,708 --> 00:15:26,859
since we're walking the stack we have to

335
00:15:24,458 --> 00:15:29,799
pull out all the other things too so I

336
00:15:26,860 --> 00:15:31,720
can't just pull out the esses unless I'm

337
00:15:29,799 --> 00:15:34,599
only printing out s's if that makes

338
00:15:31,720 --> 00:15:37,269
sense because if someone has a % D on

339
00:15:34,600 --> 00:15:40,899
the stack there I have to pull that one

340
00:15:37,269 --> 00:15:43,539
out or it won't work right because since

341
00:15:40,899 --> 00:15:46,120
I'm reading the stack in order if I just

342
00:15:43,539 --> 00:15:47,588
go look for a care star because I'm only

343
00:15:46,120 --> 00:15:49,899
think I'm looking for a percentage s is

344
00:15:47,589 --> 00:15:52,089
that's not gonna work so I at least have

345
00:15:49,899 --> 00:15:54,100
to grab out the other kinds of values

346
00:15:52,089 --> 00:15:56,709
like I said I want to start with just

347
00:15:54,100 --> 00:15:58,990
one so I can show you it working so what

348
00:15:56,708 --> 00:16:01,568
I'm gonna do instead of that is I'm just

349
00:15:58,990 --> 00:16:06,220
gonna straight-up break in the case

350
00:16:01,568 --> 00:16:07,659
where where it's not a percent s so that

351
00:16:06,220 --> 00:16:09,720
way we're only dealing with things who

352
00:16:07,659 --> 00:16:12,610
were there percent s as their first

353
00:16:09,720 --> 00:16:15,519
value if that makes sense of course I

354
00:16:12,610 --> 00:16:18,310
suppose we kind of still need some way

355
00:16:15,519 --> 00:16:21,698
of seeing the rest of the string kinda

356
00:16:18,309 --> 00:16:24,129
think of good way to show this because

357
00:16:21,698 --> 00:16:28,448
then we won't see anything there I guess

358
00:16:24,129 --> 00:16:38,110
I could do something like this parsing

359
00:16:28,448 --> 00:16:43,539
percent it's true that way we'll skip

360
00:16:38,110 --> 00:16:45,990
anything that's that comes that comes

361
00:16:43,539 --> 00:16:45,990
after

362
00:16:46,710 --> 00:16:51,839
okay so let's see hopefully I should be

363
00:16:50,610 --> 00:16:53,339
able to find something that has a

364
00:16:51,839 --> 00:16:55,170
percent test as its first thing well I

365
00:16:53,339 --> 00:16:57,360
guess all of these guys do right so

366
00:16:55,169 --> 00:16:59,610
there you can see our percent s working

367
00:16:57,360 --> 00:17:01,528
as we had intended it to work so you

368
00:16:59,610 --> 00:17:03,690
know we've got origin chunk and and all

369
00:17:01,528 --> 00:17:06,359
that sort of stuff so that's all not

370
00:17:03,690 --> 00:17:08,220
that's all fine but you can kind of see

371
00:17:06,359 --> 00:17:11,568
that also we don't get any percent print

372
00:17:08,220 --> 00:17:13,679
at s is printing out when we are

373
00:17:11,568 --> 00:17:15,420
proceeding them by something that we

374
00:17:13,679 --> 00:17:17,220
don't understand and of course the

375
00:17:15,420 --> 00:17:20,009
reason that that happens is because like

376
00:17:17,220 --> 00:17:22,799
I just said since we have to you know

377
00:17:20,009 --> 00:17:24,269
the the very args function is pushing

378
00:17:22,799 --> 00:17:26,639
all of those things from the end of the

379
00:17:24,269 --> 00:17:28,558
function onto the stack in order and we

380
00:17:26,640 --> 00:17:30,929
have to peel them off in order if we

381
00:17:28,558 --> 00:17:33,808
don't then we'll just get garbage right

382
00:17:30,929 --> 00:17:35,640
because if we didn't peel off 1% D so

383
00:17:33,808 --> 00:17:37,349
someone pushed an integer on then they

384
00:17:35,640 --> 00:17:39,750
pushed a string pointer on if we don't

385
00:17:37,349 --> 00:17:42,599
peel the integer off first right in

386
00:17:39,750 --> 00:17:44,789
advance by that much to get to the

387
00:17:42,599 --> 00:17:45,808
string that get to the care estar we're

388
00:17:44,789 --> 00:17:47,789
just gonna garbage because we're going

389
00:17:45,808 --> 00:17:49,789
to read the integer as the care star or

390
00:17:47,789 --> 00:17:52,678
as the first half of the care star right

391
00:17:49,789 --> 00:17:56,339
so we do have to be able to do that to

392
00:17:52,679 --> 00:17:57,870
make sure all of this work right okay so

393
00:17:56,339 --> 00:18:00,299
let's just try to take these in order

394
00:17:57,869 --> 00:18:05,669
now you can see here that our first one

395
00:18:00,299 --> 00:18:10,049
is a percent o2 f ms % d e % d p % d d

396
00:18:05,670 --> 00:18:12,600
right so in this format string you know

397
00:18:10,049 --> 00:18:16,470
these guys would be easy the percent d %

398
00:18:12,599 --> 00:18:18,178
d % e and the percent o2 f ms we can try

399
00:18:16,470 --> 00:18:19,410
to just like parse it we won't print the

400
00:18:18,179 --> 00:18:20,940
floating-point number yet because i said

401
00:18:19,410 --> 00:18:23,759
that was the part that's hard that we'll

402
00:18:20,940 --> 00:18:26,100
have to save for a subsequent time but

403
00:18:23,759 --> 00:18:28,500
we can sort of still hack it like we

404
00:18:26,099 --> 00:18:35,669
still could sort of print it out in sort

405
00:18:28,500 --> 00:18:41,009
of a janky way right or even if we don't

406
00:18:35,670 --> 00:18:43,230
print out we could still just peel you

407
00:18:41,009 --> 00:18:44,579
know advance the pointer properly so

408
00:18:43,230 --> 00:18:47,220
that we can still print out the rest of

409
00:18:44,579 --> 00:18:50,308
things all right so I want to take a

410
00:18:47,220 --> 00:18:55,169
quick look to see what the actual spec

411
00:18:50,308 --> 00:18:56,579
is for printf format specifiers just

412
00:18:55,169 --> 00:18:58,350
because i don't know if they have to

413
00:18:56,579 --> 00:19:00,089
come in any particular order or what the

414
00:18:58,349 --> 00:19:03,408
rules are I don't really

415
00:19:00,089 --> 00:19:07,199
No so it looks like you can have flags

416
00:19:03,409 --> 00:19:15,539
that come first and these are the flags

417
00:19:07,200 --> 00:19:20,400
so a minus a plus a space a pound and a

418
00:19:15,538 --> 00:19:24,028
zero and those are left justify instead

419
00:19:20,400 --> 00:19:30,750
of right justify force a plus or minus

420
00:19:24,028 --> 00:19:33,058
for prepending right space is to use

421
00:19:30,750 --> 00:19:34,798
blank spaces versus zeros you know so

422
00:19:33,058 --> 00:19:40,589
you can do spaces with zeros and a

423
00:19:34,798 --> 00:19:43,829
number is let's see used with Oh X

424
00:19:40,589 --> 00:19:46,408
substernal student than 0 different than

425
00:19:43,829 --> 00:19:48,720
0 so I guess this one just does ok so we

426
00:19:46,409 --> 00:19:51,330
don't really care about most of these we

427
00:19:48,720 --> 00:19:52,288
probably care only really about plus and

428
00:19:51,329 --> 00:19:54,658
0

429
00:19:52,288 --> 00:19:56,398
that's it so we can just look for those

430
00:19:54,659 --> 00:19:59,250
two I think that's the only things we

431
00:19:56,398 --> 00:20:04,199
really need to support for plus and 0 in

432
00:19:59,250 --> 00:20:07,409
the flags ok so let's start with that so

433
00:20:04,200 --> 00:20:10,470
we do parsing % and we see that it's got

434
00:20:07,409 --> 00:20:12,659
a percent here and so then what we want

435
00:20:10,470 --> 00:20:14,100
to do is say all right and I can get rid

436
00:20:12,659 --> 00:20:18,028
of this now because we're gonna actually

437
00:20:14,099 --> 00:20:20,158
grab everything here we go

438
00:20:18,028 --> 00:20:23,970
so what I want to do here is I want to

439
00:20:20,159 --> 00:20:26,278
now grab sort of all of the other things

440
00:20:23,970 --> 00:20:30,089
that I can grab so with specifiers all

441
00:20:26,278 --> 00:20:33,750
that sort of things so first I could do

442
00:20:30,089 --> 00:20:40,980
you know if at 0 equals whatever we got

443
00:20:33,750 --> 00:20:43,429
here I guess it was plus if that's 0

444
00:20:40,980 --> 00:20:48,899
equals it's the other one I wanted to do

445
00:20:43,429 --> 00:20:57,720
0 so we kind of know some things here

446
00:20:48,898 --> 00:21:04,379
which is force sign pad with zeros and

447
00:20:57,720 --> 00:21:05,909
the zeros true what sign true so we can

448
00:21:04,380 --> 00:21:06,778
just kind of peel this 2 guys off and

449
00:21:05,909 --> 00:21:09,179
again I'm not doing anything

450
00:21:06,778 --> 00:21:12,990
particularly interesting cure this is

451
00:21:09,179 --> 00:21:13,830
just pretty ugly code really and I

452
00:21:12,990 --> 00:21:16,288
suppose like

453
00:21:13,829 --> 00:21:18,808
sort of do this with a star for these

454
00:21:16,288 --> 00:21:20,308
guys because we're we're not sort of

455
00:21:18,808 --> 00:21:24,178
doing a look ahead in this case we're

456
00:21:20,308 --> 00:21:26,668
just you know doing the the very first

457
00:21:24,179 --> 00:21:32,720
thing we're looking at so first we're

458
00:21:26,669 --> 00:21:32,720
just gonna say alright handle the flags

459
00:21:36,740 --> 00:21:41,880
and you know for good measure I suppose

460
00:21:39,690 --> 00:21:44,759
what we could do is accept but ignore

461
00:21:41,880 --> 00:21:47,220
other things as well so you know I mean

462
00:21:44,759 --> 00:22:01,288
I could say whatever this is left

463
00:21:47,220 --> 00:22:07,620
justify right and then I guess it's just

464
00:22:01,288 --> 00:22:21,798
space and pound what is it if no sign is

465
00:22:07,619 --> 00:22:32,129
going to written a blank space so and

466
00:22:21,798 --> 00:22:33,778
finally we got pound all right so if I

467
00:22:32,130 --> 00:22:35,250
write it like this right and I'm just

468
00:22:33,778 --> 00:22:38,970
kind of putting this out here so you can

469
00:22:35,250 --> 00:22:46,169
kind of see it what was this thing this

470
00:22:38,970 --> 00:22:51,389
was like Oh annotate if not zero so the

471
00:22:46,169 --> 00:22:53,940
problem with this is right like I can't

472
00:22:51,388 --> 00:22:55,408
quite write it exactly this way because

473
00:22:53,940 --> 00:22:57,389
if I write it like this that could only

474
00:22:55,409 --> 00:23:00,750
come in this specific order which I

475
00:22:57,388 --> 00:23:02,398
don't really want them to write so sort

476
00:23:00,750 --> 00:23:04,589
of what I need instead is some way to

477
00:23:02,398 --> 00:23:07,979
kind of just sit in a little loop and to

478
00:23:04,589 --> 00:23:10,648
read each one you know individually

479
00:23:07,980 --> 00:23:15,139
right so I kind of need to do a thing

480
00:23:10,648 --> 00:23:15,138
where I'm more like you know

481
00:23:15,630 --> 00:23:26,160
I don't know something like parsing

482
00:23:21,029 --> 00:23:29,819
equals true while parsing switch start

483
00:23:26,160 --> 00:23:38,420
at and in here I kind of need something

484
00:23:29,819 --> 00:23:38,419
it's more like you know whatever I got I

485
00:23:40,880 --> 00:23:53,610
got I'm gonna put this here so I can now

486
00:23:52,259 --> 00:23:55,319
say 'la and I could even kind of

487
00:23:53,609 --> 00:24:00,959
condense this up into something a little

488
00:23:55,319 --> 00:24:05,689
cleaner maybe like that right so now

489
00:24:00,960 --> 00:24:05,690
I've kind of got this way of treating it

490
00:24:05,809 --> 00:24:11,129
like a little mini tiny parser and that

491
00:24:09,359 --> 00:24:12,869
way they can go in whatever order they

492
00:24:11,130 --> 00:24:15,150
want the user can doesn't have to worry

493
00:24:12,869 --> 00:24:17,099
about which one they put first I don't

494
00:24:15,150 --> 00:24:19,320
know if that's exactly the intention of

495
00:24:17,099 --> 00:24:21,149
the authors of the spec I mean printf

496
00:24:19,319 --> 00:24:23,909
snot the most well thought-through thing

497
00:24:21,150 --> 00:24:25,500
anyway but you know at least this way I

498
00:24:23,910 --> 00:24:27,320
think the idea is that you're supposed

499
00:24:25,500 --> 00:24:30,119
to be able to put them in any order so

500
00:24:27,319 --> 00:24:39,240
let's just support that and assume that

501
00:24:30,119 --> 00:24:41,399
that's true so that seems reasonable to

502
00:24:39,240 --> 00:24:43,620
me we you know we come through here and

503
00:24:41,400 --> 00:24:46,380
we just kind of go like okay let's you

504
00:24:43,619 --> 00:24:48,719
know keep reading flag specifiers as

505
00:24:46,380 --> 00:24:50,940
many as we get we've got fourth sign

506
00:24:48,720 --> 00:24:57,660
paths to of left justify positive sign

507
00:24:50,940 --> 00:25:04,019
it's blank annotate if not zero and

508
00:24:57,660 --> 00:25:07,710
that's about it right yeah so then here

509
00:25:04,019 --> 00:25:10,190
as well so then we'll come through our

510
00:25:07,710 --> 00:25:12,960
single groups are saying equals true

511
00:25:10,190 --> 00:25:19,850
we'll do the same thing for whatever

512
00:25:12,960 --> 00:25:19,850
comes after it so let's see

513
00:25:20,630 --> 00:25:26,720
we're supposed to have a Flags field

514
00:25:23,079 --> 00:25:28,899
then a width field and the width field

515
00:25:26,720 --> 00:25:35,440
can be the minimum number of characters

516
00:25:28,900 --> 00:25:50,080
right so that's a number or it can be a

517
00:25:35,440 --> 00:25:53,330
star so it has to be one or the other or

518
00:25:50,079 --> 00:25:55,210
nothing right so we can either get a

519
00:25:53,329 --> 00:26:00,279
number a star or nothing

520
00:25:55,210 --> 00:26:00,279
so now we want to handle the width so

521
00:26:02,619 --> 00:26:08,439
that doesn't really involve a parsing

522
00:26:05,569 --> 00:26:08,439
loop like that

523
00:26:12,339 --> 00:26:18,459
that just involves reading as many

524
00:26:16,069 --> 00:26:23,079
numbers if we have them as we can read

525
00:26:18,460 --> 00:26:26,360
or a star so basically it's like hey if

526
00:26:23,079 --> 00:26:29,740
star at equals zero at this point I'm

527
00:26:26,359 --> 00:26:32,869
sorry if u equals star at this point

528
00:26:29,740 --> 00:26:34,759
then we're going to do plus plus at and

529
00:26:32,869 --> 00:26:37,219
we're going to say that we need to read

530
00:26:34,759 --> 00:26:42,289
the width and so the width itself I

531
00:26:37,220 --> 00:26:46,759
don't really know what happens here but

532
00:26:42,289 --> 00:26:49,220
I guess we'll say with specified equals

533
00:26:46,759 --> 00:26:54,410
false and then we kind of need a thing

534
00:26:49,220 --> 00:26:57,829
that's like what the width is right and

535
00:26:54,410 --> 00:27:00,710
we'll just put 0 for now so according to

536
00:26:57,829 --> 00:27:02,629
the spec in this case if the if there

537
00:27:00,710 --> 00:27:05,900
was a star as the width we need to read

538
00:27:02,630 --> 00:27:07,640
the width out of the stream right so we

539
00:27:05,900 --> 00:27:10,370
know how to do that right we just do V a

540
00:27:07,640 --> 00:27:13,040
argh and we can say arglist and then we

541
00:27:10,369 --> 00:27:16,129
just have to say well ok if star is the

542
00:27:13,039 --> 00:27:16,940
thing you know if there's integer coming

543
00:27:16,130 --> 00:27:18,950
out of here

544
00:27:16,940 --> 00:27:21,920
then we need whatever the you know the

545
00:27:18,950 --> 00:27:23,509
int is and I want to put that into the

546
00:27:21,920 --> 00:27:25,840
width and then we know the width was

547
00:27:23,509 --> 00:27:30,910
specified as a specific value right

548
00:27:25,839 --> 00:27:33,609
otherwise we want to see if you know the

549
00:27:30,910 --> 00:27:40,820
star at sign is

550
00:27:33,609 --> 00:27:43,038
you know in between the the numeric

551
00:27:40,819 --> 00:27:45,168
range so if it is then we've basically

552
00:27:43,038 --> 00:27:46,429
got a number that we want to read so

553
00:27:45,169 --> 00:27:49,460
then we want to say that the wisp

554
00:27:46,429 --> 00:27:53,330
specified is true and at that point I

555
00:27:49,460 --> 00:27:58,250
feel like we we have the notion in here

556
00:27:53,329 --> 00:28:00,740
somewhere that we can read values right

557
00:27:58,250 --> 00:28:08,419
we've got this s 32 from from Z kind of

558
00:28:00,740 --> 00:28:12,140
thing so I should be able to just call

559
00:28:08,419 --> 00:28:14,809
this now one thing that's kind of

560
00:28:12,140 --> 00:28:18,259
annoying about this is it doesn't tell

561
00:28:14,808 --> 00:28:21,230
us how far it read right so what we

562
00:28:18,259 --> 00:28:24,319
could do is we could also say s3 2 from

563
00:28:21,230 --> 00:28:28,339
Z we could say that this returns the

564
00:28:24,319 --> 00:28:31,099
value and the new at right I could do

565
00:28:28,339 --> 00:28:32,449
something like that and that seems

566
00:28:31,099 --> 00:28:35,689
pretty compelling because then I can

567
00:28:32,450 --> 00:28:38,600
make the old function s3 2 from Z where

568
00:28:35,690 --> 00:28:43,009
you pass in the @ sign and then I could

569
00:28:38,599 --> 00:28:47,089
do sort of like internal or something

570
00:28:43,009 --> 00:28:53,329
like this like that that returns a more

571
00:28:47,089 --> 00:28:55,668
complicated result and so there we had

572
00:28:53,329 --> 00:28:58,279
would have result that value would be

573
00:28:55,669 --> 00:29:01,400
the thing that's being tracked here and

574
00:28:58,279 --> 00:29:02,960
when we get to the end the result new at

575
00:29:01,400 --> 00:29:05,269
is going to be equal to whatever the at

576
00:29:02,960 --> 00:29:09,110
was then we return that result so this

577
00:29:05,269 --> 00:29:11,450
function can just do call the internal

578
00:29:09,109 --> 00:29:14,479
one and just return the value so that's

579
00:29:11,450 --> 00:29:16,460
all fine but then you know down here

580
00:29:14,480 --> 00:29:20,509
where we actually care we can just say

581
00:29:16,460 --> 00:29:22,850
like oh alright there was a value that

582
00:29:20,509 --> 00:29:31,369
we wanted to read so let's get the width

583
00:29:22,849 --> 00:29:34,369
by just saying s3 2 from Z width read s

584
00:29:31,369 --> 00:29:37,959
32 from Z internal and I'll pass that at

585
00:29:34,369 --> 00:29:37,959
sign and I'll say at

586
00:29:39,910 --> 00:29:47,360
you know what else I could do I could

587
00:29:44,450 --> 00:29:49,100
make this even simpler I could just do

588
00:29:47,359 --> 00:29:50,779
don't even bother with that and just say

589
00:29:49,099 --> 00:29:55,219
this takes a pointer to a pointer to an

590
00:29:50,779 --> 00:30:10,160
apt right because then I could just do

591
00:29:55,220 --> 00:30:11,720
like alright so do too so and this way

592
00:30:10,160 --> 00:30:14,360
we just write it back into here and then

593
00:30:11,720 --> 00:30:27,140
this guy just says well alright there's

594
00:30:14,359 --> 00:30:28,609
an ignored value that you know it

595
00:30:27,140 --> 00:30:30,740
basically creates a little pointer that

596
00:30:28,609 --> 00:30:37,419
this guy will lock and then we're all

597
00:30:30,740 --> 00:30:37,420
good right yeah so that seems reasonable

598
00:30:38,710 --> 00:30:47,750
that simplifies things a little I don't

599
00:30:42,380 --> 00:30:49,490
care about that anymore okay I guess we

600
00:30:47,750 --> 00:30:58,039
don't have a B 32x in this code base

601
00:30:49,490 --> 00:31:00,680
which is fine so now all I have to do is

602
00:30:58,039 --> 00:31:02,750
say well read the width and read it from

603
00:31:00,680 --> 00:31:04,250
this at so that'll advance it and then

604
00:31:02,750 --> 00:31:06,259
we know the widths was specified right

605
00:31:04,250 --> 00:31:07,730
so that just eats up whatever the

606
00:31:06,259 --> 00:31:09,500
numbers were that came before it and

607
00:31:07,730 --> 00:31:10,460
treats those as the width and then we

608
00:31:09,500 --> 00:31:12,859
consider the width to have been

609
00:31:10,460 --> 00:31:15,319
specified and then we're good to go

610
00:31:12,859 --> 00:31:18,679
right so that seems pretty

611
00:31:15,319 --> 00:31:22,549
straightforward now we have to deal with

612
00:31:18,680 --> 00:31:24,799
the precision which is a dot and then a

613
00:31:22,549 --> 00:31:28,250
number or a dot and then a star so it's

614
00:31:24,799 --> 00:31:31,579
essentially the same code is this but

615
00:31:28,250 --> 00:31:38,839
it's just it's if they're only if there

616
00:31:31,579 --> 00:31:40,279
is a dot percieving right so essentially

617
00:31:38,839 --> 00:31:46,909
what I want to do is say precision

618
00:31:40,279 --> 00:31:49,250
specified false precision zero I guess

619
00:31:46,910 --> 00:31:51,490
since these are technically s thirty

620
00:31:49,250 --> 00:31:51,490
twos

621
00:31:51,558 --> 00:32:01,970
I don't know what happens if you specify

622
00:31:58,609 --> 00:32:03,558
a negative width but I guess we'll allow

623
00:32:01,970 --> 00:32:05,360
it for now because I don't really know

624
00:32:03,558 --> 00:32:09,378
maybe that's when we read the spec

625
00:32:05,359 --> 00:32:12,589
because it says that integer so that's

626
00:32:09,378 --> 00:32:15,259
signed so anyway when we come through

627
00:32:12,589 --> 00:32:16,849
here we go ahead and do the exact same

628
00:32:15,259 --> 00:32:21,829
code if there is a dot

629
00:32:16,849 --> 00:32:28,219
so if star at equals dot then we need to

630
00:32:21,829 --> 00:32:36,249
do the exact same code we have here like

631
00:32:28,220 --> 00:32:36,249
so if it's star we read the precision

632
00:32:37,839 --> 00:32:47,990
and if it's not then we parse it out of

633
00:32:44,028 --> 00:32:51,019
the stream we could also since now we

634
00:32:47,990 --> 00:32:55,069
know here if we see the dot I think it

635
00:32:51,019 --> 00:33:03,259
has to be we could say this is a

636
00:32:55,069 --> 00:33:06,499
malformed printf precision string or a

637
00:33:03,259 --> 00:33:08,058
precision specifier just so the

638
00:33:06,499 --> 00:33:09,649
programmer knows that they probably mess

639
00:33:08,058 --> 00:33:11,509
something up because if we see the dot

640
00:33:09,648 --> 00:33:14,089
we know that there's really only it's

641
00:33:11,509 --> 00:33:16,548
only allowed to be a star or a number so

642
00:33:14,089 --> 00:33:17,778
at that point we want to make sure we

643
00:33:16,548 --> 00:33:20,450
handle that okay so now we've got

644
00:33:17,778 --> 00:33:22,128
precision in there so finally I think

645
00:33:20,450 --> 00:33:24,080
the only thing we need after that is the

646
00:33:22,128 --> 00:33:32,959
actual specifiers and there they are

647
00:33:24,079 --> 00:33:40,249
right there's a d uo x fe g a CSP and %

648
00:33:32,960 --> 00:33:42,710
or whatever yeah so let's see what let's

649
00:33:40,249 --> 00:33:47,028
just take these one at a time we'll just

650
00:33:42,710 --> 00:33:51,499
do a switch start at and we'll do a to

651
00:33:47,028 --> 00:33:56,079
these so case D or case I these are

652
00:33:51,499 --> 00:34:03,319
apparently the same case according to

653
00:33:56,079 --> 00:34:05,980
the listing there we've got a u we have

654
00:34:03,319 --> 00:34:05,980
an O

655
00:34:07,150 --> 00:34:25,670
X's we've got F can't say I know what

656
00:34:22,730 --> 00:34:27,320
decimal floating point lowercase and

657
00:34:25,670 --> 00:34:29,420
decimal floating point uppercase mean

658
00:34:27,320 --> 00:34:33,170
but I guess that means if you're gonna

659
00:34:29,420 --> 00:34:35,740
print out a man or kyun in or imp

660
00:34:33,170 --> 00:34:37,970
whether you wanted it upper or lowercase

661
00:34:35,739 --> 00:34:42,829
pretty impressive that they thought that

662
00:34:37,969 --> 00:34:46,159
was necessary to specify but alright no

663
00:34:42,829 --> 00:35:04,869
sense not dotting your T's Crossing your

664
00:34:46,159 --> 00:35:15,440
eyes and so on so we've got e G G and

665
00:35:04,869 --> 00:35:20,359
then we've got a and a hexadecimal

666
00:35:15,440 --> 00:35:22,519
floating point hmm I didn't know that

667
00:35:20,360 --> 00:35:24,349
that was in there I feel like that must

668
00:35:22,519 --> 00:35:35,789
be new because I don't think that was

669
00:35:24,349 --> 00:35:55,139
there originally s he

670
00:35:35,789 --> 00:35:57,090
and percent and other what does that

671
00:35:55,139 --> 00:36:01,710
thing call just of our unrecognized

672
00:35:57,090 --> 00:36:05,820
format specifier so we've got one of

673
00:36:01,710 --> 00:36:07,590
these already right and I guess no

674
00:36:05,820 --> 00:36:10,410
matter what we do here when we read this

675
00:36:07,590 --> 00:36:16,650
off we're going to increment forwards

676
00:36:10,409 --> 00:36:19,319
right I guess the only case is if if it

677
00:36:16,650 --> 00:36:22,680
was null right

678
00:36:19,320 --> 00:36:23,940
so if start at is valid we'll advance by

679
00:36:22,679 --> 00:36:25,319
it but if it was no we don't want to

680
00:36:23,940 --> 00:36:27,869
read past the end of the string and

681
00:36:25,320 --> 00:36:31,980
confuse people with a crash or something

682
00:36:27,869 --> 00:36:35,069
like that but yeah in this case we just

683
00:36:31,980 --> 00:36:39,539
go alright we've got a string that looks

684
00:36:35,070 --> 00:36:41,039
like that so that one's done and then we

685
00:36:39,539 --> 00:36:43,019
just have to implement all these other

686
00:36:41,039 --> 00:36:45,210
guys here and like I said we don't

687
00:36:43,019 --> 00:36:46,380
really have to implement them yet we

688
00:36:45,210 --> 00:36:49,260
just have to make sure we're getting the

689
00:36:46,380 --> 00:36:53,190
right argument type off first so that we

690
00:36:49,260 --> 00:36:56,880
can take them one at a time from there

691
00:36:53,190 --> 00:36:58,559
so this is just going to be write a an

692
00:36:56,880 --> 00:37:01,910
integer that's what it's specified as

693
00:36:58,559 --> 00:37:04,259
being so here's the value we're printing

694
00:37:01,909 --> 00:37:08,909
in this case it's going to be an

695
00:37:04,260 --> 00:37:12,270
unsigned integer in this case I don't

696
00:37:08,909 --> 00:37:15,539
know what an unsigned octal actually is

697
00:37:12,269 --> 00:37:18,349
but I assume that this is always going

698
00:37:15,539 --> 00:37:18,349
to be a

699
00:37:22,739 --> 00:37:33,629
I assume that these are always going to

700
00:37:29,338 --> 00:37:35,909
be integers unless we have instructions

701
00:37:33,630 --> 00:37:38,570
otherwise but I feel like we could have

702
00:37:35,909 --> 00:37:41,519
instructions otherwise couldn't we like

703
00:37:38,570 --> 00:37:46,220
shouldn't there be like an L specifier

704
00:37:41,519 --> 00:37:48,509
or something like there's nothing here

705
00:37:46,219 --> 00:37:50,358
that says that the thing is gonna be

706
00:37:48,510 --> 00:37:53,849
long ah there it is

707
00:37:50,358 --> 00:37:57,179
length we forgot one so where does that

708
00:37:53,849 --> 00:38:01,320
come flying with precision length and

709
00:37:57,179 --> 00:38:06,829
then specifier okay so one more

710
00:38:01,320 --> 00:38:18,390
oops so one more we got to do here

711
00:38:06,829 --> 00:38:21,920
HHH LLL jzt and L boy I feel like they

712
00:38:18,389 --> 00:38:30,348
could have done a better job with this

713
00:38:21,920 --> 00:38:30,349
but all right so it looks like

714
00:38:34,219 --> 00:38:40,039
it looks like essentially the only thing

715
00:38:36,949 --> 00:38:42,799
you can do with floats is to make a long

716
00:38:40,039 --> 00:38:45,500
double which which I don't even support

717
00:38:42,800 --> 00:38:48,320
so really we don't care about that at

718
00:38:45,500 --> 00:38:52,369
all so L is out so it looks like we're

719
00:38:48,320 --> 00:38:54,230
mostly looking at HHH l so I don't

720
00:38:52,369 --> 00:38:55,849
really care about most of these so I

721
00:38:54,230 --> 00:39:03,050
think we'll probably take the same

722
00:38:55,849 --> 00:39:04,400
attack here I'll lead them all but I

723
00:39:03,050 --> 00:39:07,820
don't think we're gonna actually do any

724
00:39:04,400 --> 00:39:11,740
of them except for L which is if we want

725
00:39:07,820 --> 00:39:15,019
to say like you know it's a long a

726
00:39:11,739 --> 00:39:22,009
64-bit value or whatever right which I

727
00:39:15,019 --> 00:39:28,340
guess is ll in this case can't quite

728
00:39:22,010 --> 00:39:32,120
tell so would an unsigned long int be 32

729
00:39:28,340 --> 00:39:35,539
bits or 64 bits by this nominal Eicher

730
00:39:32,119 --> 00:39:38,389
right is that you know is that 64 is

731
00:39:35,539 --> 00:39:38,980
that I don't know you gotta love that

732
00:39:38,389 --> 00:39:42,289
nonsense

733
00:39:38,980 --> 00:39:46,909
but anyway so if we want to handle the

734
00:39:42,289 --> 00:39:48,500
length here really all we have to do is

735
00:39:46,909 --> 00:39:49,399
just take a look and see if we can match

736
00:39:48,500 --> 00:39:55,250
any of these things

737
00:39:49,400 --> 00:39:57,650
so if star at equals we've got I guess

738
00:39:55,250 --> 00:40:07,849
this one I'll do normal form because

739
00:39:57,650 --> 00:40:14,660
these are doubles so if it's H followed

740
00:40:07,849 --> 00:40:16,929
by another H or an L followed by another

741
00:40:14,659 --> 00:40:16,929
L

742
00:40:19,130 --> 00:40:31,019
those are double character sequences

743
00:40:23,179 --> 00:40:34,789
everything else is single so all right

744
00:40:31,019 --> 00:40:34,789
so we've got H's we got ELLs

745
00:40:34,949 --> 00:40:49,949
we've got jzt jay-z and capital L and so

746
00:40:43,170 --> 00:40:52,170
you know yeah in each of these cases

747
00:40:49,949 --> 00:40:54,389
we're gonna advance I don't know which

748
00:40:52,170 --> 00:41:02,039
one of these were going to handle in

749
00:40:54,389 --> 00:41:04,829
actuality but yeah so at that point we

750
00:41:02,039 --> 00:41:07,440
need to be able to read these often if

751
00:41:04,829 --> 00:41:12,059
you look at what's happening here really

752
00:41:07,440 --> 00:41:14,849
all of the you know we want to handle

753
00:41:12,059 --> 00:41:18,299
these guys in groups because if we do

754
00:41:14,849 --> 00:41:19,799
end up specifying widths these guys are

755
00:41:18,300 --> 00:41:21,900
easy because they're all specific to

756
00:41:19,800 --> 00:41:23,700
themselves but but these guys kind of

757
00:41:21,900 --> 00:41:26,250
happen in groups so like we don't want

758
00:41:23,699 --> 00:41:28,679
to have to deal with a separate type of

759
00:41:26,250 --> 00:41:34,050
read code for all of this stuff right we

760
00:41:28,679 --> 00:41:35,849
want to be able to just read off the

761
00:41:34,050 --> 00:41:42,840
value using some kind of a with

762
00:41:35,849 --> 00:41:46,409
specifier that we make right so yeah I

763
00:41:42,840 --> 00:41:51,559
don't know what to do about that exactly

764
00:41:46,409 --> 00:41:51,559
other than probably something like

765
00:41:51,800 --> 00:42:03,720
excuse me with some nose blowing time

766
00:41:56,130 --> 00:42:09,570
here and hey my hero I guess what I'll

767
00:42:03,719 --> 00:42:16,039
do is just get kind of the largest

768
00:42:09,570 --> 00:42:16,039
possible value I can and then we'll just

769
00:42:16,820 --> 00:42:23,510
you know read their argh

770
00:42:24,150 --> 00:42:28,858
you 64 or something like this I don't

771
00:42:26,400 --> 00:42:31,130
know exactly we'll call it but what I

772
00:42:28,858 --> 00:42:34,230
want to do here is just say like okay

773
00:42:31,130 --> 00:42:36,900
somebody has to use the width specifier

774
00:42:34,230 --> 00:42:39,358
at this point to figure out which one of

775
00:42:36,900 --> 00:42:43,019
these we're going to do because actually

776
00:42:39,358 --> 00:42:47,759
we might read a u8 you know or are you

777
00:42:43,019 --> 00:42:50,429
16 or are you 32 or are you 34 when we

778
00:42:47,760 --> 00:42:54,240
read one of these so I guess we'll say

779
00:42:50,429 --> 00:42:57,179
Reaver are integer right and we don't

780
00:42:54,239 --> 00:43:00,078
know which of those types of values we

781
00:42:57,179 --> 00:43:03,659
actually want right we have no idea and

782
00:43:00,079 --> 00:43:05,630
I guess we could even pick whether we're

783
00:43:03,659 --> 00:43:17,278
doing signed or not so you could do

784
00:43:05,630 --> 00:43:26,250
something like switch on blank and we'll

785
00:43:17,278 --> 00:43:28,858
just have to do something like this and

786
00:43:26,250 --> 00:43:31,019
you can see that's pretty ugly right

787
00:43:28,858 --> 00:43:32,880
it's the kind of code that C doesn't

788
00:43:31,019 --> 00:43:35,579
really make particularly easy to write

789
00:43:32,880 --> 00:43:38,809
because it's still very procedural it's

790
00:43:35,579 --> 00:43:42,660
still very clear how you would make this

791
00:43:38,809 --> 00:43:44,250
concise but basically you suddenly have

792
00:43:42,659 --> 00:43:46,710
to take like a leap in the template land

793
00:43:44,250 --> 00:43:49,798
and things go really horribly wrong when

794
00:43:46,710 --> 00:43:52,289
you go there so they just there isn't

795
00:43:49,798 --> 00:43:54,838
really a whole lot you can do if you

796
00:43:52,289 --> 00:43:57,299
value you know any sort of semblance of

797
00:43:54,838 --> 00:44:00,538
working code in C to make things that

798
00:43:57,298 --> 00:44:09,989
are you know cleaner than something like

799
00:44:00,539 --> 00:44:13,789
this but that's roughly yet so we could

800
00:44:09,989 --> 00:44:19,259
do something like okay past the length

801
00:44:13,789 --> 00:44:23,700
and arglist and and off we go

802
00:44:19,260 --> 00:44:26,960
right now the arglist in this case I

803
00:44:23,699 --> 00:44:29,899
think we would want it to be a pointer

804
00:44:26,960 --> 00:44:33,720
because we need it to advance

805
00:44:29,900 --> 00:44:34,920
unfortunately yeah that kind of means

806
00:44:33,719 --> 00:44:37,709
that we've got to do this little dance

807
00:44:34,920 --> 00:44:37,920
here where I have to dereference it so

808
00:44:37,710 --> 00:44:40,260
that

809
00:44:37,920 --> 00:44:41,880
they're macro kanri reference it which

810
00:44:40,260 --> 00:44:42,780
is kind of stupid but I believe that's

811
00:44:41,880 --> 00:44:45,240
just what we're gonna have to do because

812
00:44:42,780 --> 00:44:46,798
we want to use the artist and advance it

813
00:44:45,239 --> 00:44:51,269
so that our parents gets it advanced

814
00:44:46,798 --> 00:44:54,599
right so this is essentially what we're

815
00:44:51,269 --> 00:44:58,798
looking at you know we've got we've got

816
00:44:54,599 --> 00:45:03,119
a floating-point version and a non

817
00:44:58,798 --> 00:45:04,500
floating-point version right and the

818
00:45:03,119 --> 00:45:06,030
floating-point version really is when

819
00:45:04,500 --> 00:45:07,679
we're gonna accept two things I suppose

820
00:45:06,030 --> 00:45:12,180
because we don't really have a way to

821
00:45:07,679 --> 00:45:14,759
read anything else if that makes sense

822
00:45:12,179 --> 00:45:18,868
and also I suppose I probably did I

823
00:45:14,760 --> 00:45:20,849
never do an F I've recently I don't

824
00:45:18,869 --> 00:45:23,700
think I ever mentioned this but I've

825
00:45:20,849 --> 00:45:26,099
recently been less enamored with R and

826
00:45:23,699 --> 00:45:29,068
I've switched to F and the reason was

827
00:45:26,099 --> 00:45:30,750
because it sounds too much like red when

828
00:45:29,068 --> 00:45:35,759
you use them in like things that are

829
00:45:30,750 --> 00:45:37,108
like packed value formats it's it tends

830
00:45:35,760 --> 00:45:42,599
to get confused at the red channel I

831
00:45:37,108 --> 00:45:45,318
find whereas F doesn't really get

832
00:45:42,599 --> 00:45:49,400
confused with anything so I've kind of

833
00:45:45,318 --> 00:45:52,769
kind of changed my feelings on that

834
00:45:49,400 --> 00:45:54,240
anyway so now we can kind of do these

835
00:45:52,769 --> 00:45:56,519
guys a little bit differently we could

836
00:45:54,239 --> 00:46:01,279
say here like okay so there's a value

837
00:45:56,519 --> 00:46:03,900
that for reading and it's read ver Arg

838
00:46:01,280 --> 00:46:06,420
float or integer depending on which one

839
00:46:03,900 --> 00:46:12,568
we want and we need to pass the length

840
00:46:06,420 --> 00:46:13,559
thing to it thanks I don't know what

841
00:46:12,568 --> 00:46:18,420
we'll call this I'm just going to call

842
00:46:13,559 --> 00:46:22,650
it Lin so this will be you through to

843
00:46:18,420 --> 00:46:27,240
when equals I guess the default Len is

844
00:46:22,650 --> 00:46:29,690
just always for in well you know what

845
00:46:27,239 --> 00:46:35,759
we've got to I guess we have integer Len

846
00:46:29,690 --> 00:46:38,519
and float length because the default

847
00:46:35,760 --> 00:46:44,069
float length is 8 and the default

848
00:46:38,519 --> 00:46:46,048
integer length is 4 so yeah so then we

849
00:46:44,068 --> 00:46:51,210
can just kind of go in through here and

850
00:46:46,048 --> 00:46:53,309
say all right if I'm doing a float

851
00:46:51,210 --> 00:46:57,289
like it would be in say this case I just

852
00:46:53,309 --> 00:47:03,059
do a float length arglist

853
00:46:57,289 --> 00:47:04,920
and I can grab that and so all these

854
00:47:03,059 --> 00:47:06,599
guys can do that read and you know what

855
00:47:04,920 --> 00:47:20,190
these this has to be an address as well

856
00:47:06,599 --> 00:47:24,390
I think that's all of those so that will

857
00:47:20,190 --> 00:47:36,000
get all of those guys out then we have

858
00:47:24,389 --> 00:47:42,900
our integers far argh integer integer

859
00:47:36,000 --> 00:47:44,969
length there we go

860
00:47:42,900 --> 00:47:47,338
and I don't know what we're gonna have

861
00:47:44,969 --> 00:47:48,719
to do about the sign extensions sort of

862
00:47:47,338 --> 00:47:56,338
stuff there so we'll take a look at that

863
00:47:48,719 --> 00:47:58,230
in a in a second because really so when

864
00:47:56,338 --> 00:48:00,719
we do reading the integer and we get the

865
00:47:58,230 --> 00:48:03,599
you 64 out we should be able to just

866
00:48:00,719 --> 00:48:09,088
kind of cast it slightly to another one

867
00:48:03,599 --> 00:48:11,130
so I could do you know unsigned integer

868
00:48:09,088 --> 00:48:22,489
and then have another one that's just

869
00:48:11,130 --> 00:48:25,970
like signed and it just does read word

870
00:48:22,489 --> 00:48:25,969
unsigned integer

871
00:48:36,099 --> 00:48:44,769
and we'll just pretend that that value

872
00:48:39,920 --> 00:48:47,000
that we read was actually a sign value

873
00:48:44,769 --> 00:48:48,860
because when we read it off the list

874
00:48:47,000 --> 00:48:51,019
right it doesn't know what it is so it

875
00:48:48,860 --> 00:48:52,970
just cast it to that and sticks it in

876
00:48:51,019 --> 00:48:54,920
the value so when it comes out if it was

877
00:48:52,969 --> 00:48:56,719
signed well the values still correct for

878
00:48:54,920 --> 00:48:58,610
the signed value it just C thinks it's

879
00:48:56,719 --> 00:49:00,349
the wrong thing so all we really have to

880
00:48:58,610 --> 00:49:01,970
do is tell C hey by the way that value

881
00:49:00,349 --> 00:49:06,199
was actually signed so you know just

882
00:49:01,969 --> 00:49:08,269
chill out man and off you go so that

883
00:49:06,199 --> 00:49:13,339
should be fine

884
00:49:08,269 --> 00:49:18,759
so this should be signed integer and

885
00:49:13,340 --> 00:49:21,410
this should be unsigned integer right

886
00:49:18,760 --> 00:49:23,870
and then for the rest of these guys I

887
00:49:21,409 --> 00:49:26,119
think they're all unsigned right I don't

888
00:49:23,869 --> 00:49:31,130
think exes

889
00:49:26,119 --> 00:49:33,679
I don't think exes or any of these guys

890
00:49:31,130 --> 00:49:38,960
oh these are floats nevermind

891
00:49:33,679 --> 00:49:44,539
this desert floats see is just a care I

892
00:49:38,960 --> 00:49:48,199
think right so I don't is there anything

893
00:49:44,539 --> 00:49:50,659
can do with C oh you can you can get a W

894
00:49:48,199 --> 00:49:53,389
in T out of it so I guess we still have

895
00:49:50,659 --> 00:49:57,649
to sort of maybe a little bit I don't

896
00:49:53,389 --> 00:49:59,119
know whether this means I should still

897
00:49:57,650 --> 00:50:01,010
read it or whether it's an error because

898
00:49:59,119 --> 00:50:03,349
like there's nothing in the table here

899
00:50:01,010 --> 00:50:17,050
so I'm not sure what they actually want

900
00:50:03,349 --> 00:50:17,049
you to do there

901
00:50:19,329 --> 00:50:27,699
and in either case it reads the same

902
00:50:22,179 --> 00:50:30,519
size right like what's a W into T is

903
00:50:27,699 --> 00:50:32,769
that actually bigger type death of a

904
00:50:30,519 --> 00:50:39,039
type elderson maker so yeah so I don't

905
00:50:32,769 --> 00:50:40,719
think that's so I don't know exactly

906
00:50:39,039 --> 00:50:46,989
what we should be doing there to be

907
00:50:40,719 --> 00:50:52,809
honest with you how much for we supposed

908
00:50:46,989 --> 00:50:54,669
to read here so anyway keep on going

909
00:50:52,809 --> 00:50:56,829
here I think I've got a little time left

910
00:50:54,670 --> 00:50:59,320
anyway because I started about 10

911
00:50:56,829 --> 00:51:03,730
minutes late anyway so we'll read that

912
00:50:59,320 --> 00:51:06,400
value out there and then we've got the P

913
00:51:03,730 --> 00:51:08,800
+ + % the % case we don't read anything

914
00:51:06,400 --> 00:51:10,570
off the stream that's just the case

915
00:51:08,800 --> 00:51:16,440
where we output like if someone was

916
00:51:10,570 --> 00:51:22,330
actually just trying to output % right

917
00:51:16,440 --> 00:51:25,599
straight up the P case is what a pointer

918
00:51:22,329 --> 00:51:28,480
address so that's still gonna be the

919
00:51:25,599 --> 00:51:30,639
same kind of a read I suspect although

920
00:51:28,480 --> 00:51:34,179
that does that mean we always would read

921
00:51:30,639 --> 00:51:37,150
a pointer size yeah it looks like it's

922
00:51:34,179 --> 00:51:43,359
always a void star so basically that's

923
00:51:37,150 --> 00:51:46,300
another one that always comes out the

924
00:51:43,360 --> 00:51:53,019
same size no matter of what and then the

925
00:51:46,300 --> 00:51:55,510
N is when we write the number of

926
00:51:53,019 --> 00:51:56,920
characters written so far so basically

927
00:51:55,510 --> 00:52:04,030
this is going to be a pointer to a

928
00:51:56,920 --> 00:52:07,869
signed integer so you know this is

929
00:52:04,030 --> 00:52:09,730
basically a destination like a tab best

930
00:52:07,869 --> 00:52:11,079
or something this is if we want to know

931
00:52:09,730 --> 00:52:13,929
how many reprinted I don't know that we

932
00:52:11,079 --> 00:52:17,049
use that anywhere other either but we

933
00:52:13,929 --> 00:52:18,969
might as well parse it properly we can

934
00:52:17,050 --> 00:52:21,120
always choose not to support you know

935
00:52:18,969 --> 00:52:25,809
any of these we don't feel like writing

936
00:52:21,119 --> 00:52:27,489
but you know so in this case we grab it

937
00:52:25,809 --> 00:52:29,320
in town I guess we should keep the int

938
00:52:27,489 --> 00:52:31,659
value even though we're only supposed to

939
00:52:29,320 --> 00:52:32,800
process of the C but let's go ahead and

940
00:52:31,659 --> 00:52:35,859
start running it I don't know

941
00:52:32,800 --> 00:52:38,470
disastrous this is going to be but we'll

942
00:52:35,860 --> 00:52:39,039
see so let's take a look here where we

943
00:52:38,469 --> 00:52:41,019
at

944
00:52:39,039 --> 00:52:42,519
we've got a dot on here let me let's

945
00:52:41,019 --> 00:52:43,750
step through this code at least once

946
00:52:42,519 --> 00:52:48,789
because I don't even know what's going

947
00:52:43,750 --> 00:52:53,800
on here okay so first we want to take a

948
00:52:48,789 --> 00:52:56,079
look we've got a dot o 2f specifier so

949
00:52:53,800 --> 00:52:58,930
that means there's no there's nothing in

950
00:52:56,079 --> 00:53:01,380
here right which is good so we just skip

951
00:52:58,929 --> 00:53:03,669
over the flags because there's no flags

952
00:53:01,380 --> 00:53:06,300
we then have to handle the whip and

953
00:53:03,670 --> 00:53:09,579
there's no whip either so we skip that

954
00:53:06,300 --> 00:53:11,470
we got a precision so then we look to

955
00:53:09,579 --> 00:53:14,289
see whether it's a star it's not a star

956
00:53:11,469 --> 00:53:16,569
we look to see if it's a number oh there

957
00:53:14,289 --> 00:53:19,199
we go we're missing that we're missing a

958
00:53:16,570 --> 00:53:22,780
little plus we need to consume that plus

959
00:53:19,199 --> 00:53:28,899
earned that dot rather so that's all

960
00:53:22,780 --> 00:53:30,400
good yeah and in this case we still have

961
00:53:28,900 --> 00:53:35,590
it to do here right which is to do

962
00:53:30,400 --> 00:53:43,119
actually set different values here which

963
00:53:35,590 --> 00:53:46,890
we're not doing ok all right so I think

964
00:53:43,119 --> 00:53:46,889
let's see here

965
00:53:52,630 --> 00:54:00,619
we're getting there

966
00:53:54,969 --> 00:54:03,289
I'm recognized format specifier which is

967
00:54:00,619 --> 00:54:15,099
what what was the string that we were

968
00:54:03,289 --> 00:54:15,099
past present a 2.0 2f % %

969
00:54:24,199 --> 00:54:29,199
I feel like that should have worked so

970
00:54:26,809 --> 00:54:31,489
that is a bug that is not a malformed

971
00:54:29,199 --> 00:54:35,559
specifier let's try that again

972
00:54:31,489 --> 00:54:42,189
I want to nope that's not what I wanted

973
00:54:35,559 --> 00:54:45,980
can you show me thank you I would like

974
00:54:42,190 --> 00:54:47,269
to go ahead and I'm gonna kind of cheat

975
00:54:45,980 --> 00:54:51,349
here a little bit because I wanted to

976
00:54:47,269 --> 00:54:54,920
bug that one case what I'd like to do

977
00:54:51,349 --> 00:54:57,680
here is just sort of fake it I'm going

978
00:54:54,920 --> 00:55:00,650
to basically say that instead of every

979
00:54:57,679 --> 00:55:02,480
time you you call format string I'm

980
00:55:00,650 --> 00:55:06,160
actually just going to like pretend that

981
00:55:02,480 --> 00:55:09,920
that's actually the string that that

982
00:55:06,159 --> 00:55:15,980
that we were given right so I'm gonna

983
00:55:09,920 --> 00:55:17,059
say like you know format string well you

984
00:55:15,980 --> 00:55:20,858
know what I don't even have to do that

985
00:55:17,059 --> 00:55:20,858
I'll just put this at the very start

986
00:55:27,940 --> 00:55:32,778
so here's game update in render and I'm

987
00:55:31,849 --> 00:55:53,930
just going to go ahead and put it right

988
00:55:32,778 --> 00:55:55,309
here and so that's just takes a

989
00:55:53,929 --> 00:55:57,048
floating-point number but that's that's

990
00:55:55,309 --> 00:56:02,119
it so I should be able to just pass it a

991
00:55:57,048 --> 00:56:04,369
one okay so let's go ahead and compile

992
00:56:02,119 --> 00:56:06,470
that and now in theory the first time I

993
00:56:04,369 --> 00:56:09,259
come through here should get should hit

994
00:56:06,469 --> 00:56:14,328
that right I should get that case and I

995
00:56:09,259 --> 00:56:15,858
do so let's see what I do I've got a I'm

996
00:56:14,329 --> 00:56:19,190
gonna jump forwards to where we actually

997
00:56:15,858 --> 00:56:21,848
hit the format specifier let's see what

998
00:56:19,190 --> 00:56:26,568
we get here says the 0 we get pad with

999
00:56:21,849 --> 00:56:28,489
zeros that does seem a good idea

1000
00:56:26,568 --> 00:56:30,440
we then don't get anything else and

1001
00:56:28,489 --> 00:56:32,630
that's what we would expect we come down

1002
00:56:30,440 --> 00:56:34,999
here we don't see a star for the width

1003
00:56:32,630 --> 00:56:37,369
but we should see it too so let's

1004
00:56:34,998 --> 00:56:39,649
advance that we did and the width is 2

1005
00:56:37,369 --> 00:56:41,059
that's what we want the width has an

1006
00:56:39,650 --> 00:56:43,099
average specified we look at the Pacific

1007
00:56:41,059 --> 00:56:45,229
fest flowers the precision specifier

1008
00:56:43,099 --> 00:56:46,940
says there's a dot there is a dot that

1009
00:56:45,228 --> 00:56:52,210
we advance forward we take a look it's

1010
00:56:46,940 --> 00:56:55,670
not a star it is however a number well

1011
00:56:52,210 --> 00:56:58,659
ok so actually it seems like we're

1012
00:56:55,670 --> 00:57:01,489
missing there should have been

1013
00:56:58,659 --> 00:57:08,058
recognition of the fact that there was a

1014
00:57:01,489 --> 00:57:10,278
leading 0 as a separate thing so I kind

1015
00:57:08,059 --> 00:57:12,019
of have to fix that as well but let me

1016
00:57:10,278 --> 00:57:16,159
just go see what the other problem is

1017
00:57:12,018 --> 00:57:20,929
here so it goes and grabs the F off of

1018
00:57:16,159 --> 00:57:24,399
here there it is and you know these guys

1019
00:57:20,929 --> 00:57:28,159
don't advance their letter at the moment

1020
00:57:24,400 --> 00:57:29,450
which they should now we it's unclear

1021
00:57:28,159 --> 00:57:32,210
whether we want to go through here and

1022
00:57:29,449 --> 00:57:35,838
advance every single one's letter or

1023
00:57:32,210 --> 00:57:38,239
whether we just want to have someone

1024
00:57:35,838 --> 00:57:40,619
who's not supposed to advance back up

1025
00:57:38,239 --> 00:57:45,360
but I don't even know if that's relevant

1026
00:57:40,619 --> 00:57:48,139
oh wait no we actually did we did do

1027
00:57:45,360 --> 00:57:48,140
didn't

1028
00:57:57,010 --> 00:58:04,940
no I guess in all cases we don't I

1029
00:57:59,449 --> 00:58:06,109
thought I did it like if at so I must

1030
00:58:04,940 --> 00:58:08,800
have accidentally deleted it because

1031
00:58:06,110 --> 00:58:12,050
they're gonna say we used to do it right

1032
00:58:08,800 --> 00:58:13,880
so after that I just want to say if

1033
00:58:12,050 --> 00:58:16,760
start you know plus plus that I

1034
00:58:13,880 --> 00:58:18,019
accidentally deleted that I guess okay

1035
00:58:16,760 --> 00:58:21,200
so let's try that one more time

1036
00:58:18,019 --> 00:58:22,250
and watch what happens in the and you

1037
00:58:21,199 --> 00:58:25,909
know what I want to fix that one of the

1038
00:58:22,250 --> 00:58:27,170
thing first so in this case what I

1039
00:58:25,909 --> 00:58:29,809
really want to say is if it's a star

1040
00:58:27,170 --> 00:58:36,769
okay it's a star that's all good but

1041
00:58:29,809 --> 00:58:39,409
then we should have had let's something

1042
00:58:36,769 --> 00:58:46,400
in here let's see

1043
00:58:39,409 --> 00:58:48,799
I feel like they'd it's not really

1044
00:58:46,400 --> 00:58:50,680
documented the dot zero part like it

1045
00:58:48,800 --> 00:58:52,850
doesn't really say anything about that

1046
00:58:50,679 --> 00:58:54,259
the dietary written is short of this

1047
00:58:52,849 --> 00:59:00,860
number the result is padded with leading

1048
00:58:54,260 --> 00:59:03,950
zeros so does that mean point zero two

1049
00:59:00,860 --> 00:59:06,620
is not really a valid form string and it

1050
00:59:03,949 --> 00:59:08,869
shouldn't huh all right I guess maybe my

1051
00:59:06,619 --> 00:59:13,400
point zero two is not even really should

1052
00:59:08,869 --> 00:59:14,809
it just be point two I don't know

1053
00:59:13,400 --> 00:59:18,559
all right well I guess I don't have to

1054
00:59:14,809 --> 00:59:20,090
fix that then back to the debugging so

1055
00:59:18,559 --> 00:59:27,619
let's take a look at what happens in

1056
00:59:20,090 --> 00:59:33,230
here first time through so we get down

1057
00:59:27,619 --> 00:59:36,409
to here and we're at the percent F thing

1058
00:59:33,230 --> 00:59:38,300
we advanced forward so now we come

1059
00:59:36,409 --> 00:59:43,250
through here what happens well we skip

1060
00:59:38,300 --> 00:59:45,700
the percent all of these oops that's not

1061
00:59:43,250 --> 00:59:45,699
what I wanted

1062
00:59:47,039 --> 00:59:52,239
okay we skip all of these because none

1063
00:59:50,889 --> 00:59:53,558
of them should be there so I'm just

1064
00:59:52,239 --> 00:59:54,969
gonna verify that they're actually skip

1065
00:59:53,559 --> 00:59:57,760
because maybe one of them isn't skipped

1066
00:59:54,969 --> 01:00:00,598
or something like this no that happens

1067
00:59:57,760 --> 01:00:04,150
we then do a switch we find the percent

1068
01:00:00,599 --> 01:00:05,798
and that's good and we advance so I

1069
01:00:04,150 --> 01:00:07,450
think now if it was just the fact that I

1070
01:00:05,798 --> 01:00:10,088
actually deleted the advance I think

1071
01:00:07,449 --> 01:00:11,558
that was the only problem so now I think

1072
01:00:10,088 --> 01:00:16,409
we're all good

1073
01:00:11,559 --> 01:00:19,298
and yeah this looks much better now okay

1074
01:00:16,409 --> 01:00:21,670
so I think we've essentially set

1075
01:00:19,298 --> 01:00:23,639
ourselves up for success now we just

1076
01:00:21,670 --> 01:00:27,190
have to do a couple printout routines

1077
01:00:23,639 --> 01:00:29,529
and those will be real easy to do

1078
01:00:27,190 --> 01:00:31,599
probably I think except for the floating

1079
01:00:29,530 --> 01:00:32,890
point one like I said but everything

1080
01:00:31,599 --> 01:00:35,559
else looks like it's in reasonable shape

1081
01:00:32,889 --> 01:00:38,170
so I'm going to go ahead and remove that

1082
01:00:35,559 --> 01:00:43,390
test code here since it's no longer

1083
01:00:38,170 --> 01:00:45,720
necessary and then I'm a growth QA Q and

1084
01:00:43,389 --> 01:00:45,719
a

1085
01:02:07,608 --> 01:02:15,228
not a lot of questions which makes sense

1086
01:02:09,829 --> 01:02:17,539
it's pretty straightforward duplicating

1087
01:02:15,228 --> 01:02:19,958
printf is just kind of busy work for the

1088
01:02:17,539 --> 01:02:19,959
most part

1089
01:02:48,800 --> 01:02:57,180
soy sauce the kid will you be doing a

1090
01:02:51,480 --> 01:03:06,740
sprint F it it is for at F that that is

1091
01:02:57,179 --> 01:03:06,739
printf that's what we just wrote I mean

1092
01:03:09,650 --> 01:03:14,030
that's printf right there right

1093
01:03:47,880 --> 01:03:54,849
is the github repo accessible to

1094
01:03:51,728 --> 01:03:59,828
pre-orders yes it is it's not really a

1095
01:03:54,849 --> 01:04:04,719
supported feature so no guarantees that

1096
01:03:59,829 --> 01:04:06,789
you know it'll work for you or whatever

1097
01:04:04,719 --> 01:04:08,528
but every pre-order does come with the

1098
01:04:06,789 --> 01:04:09,999
code because people wanted it come with

1099
01:04:08,528 --> 01:04:13,420
a code that allows them to authorize on

1100
01:04:09,998 --> 01:04:14,858
the github so it's not an official

1101
01:04:13,420 --> 01:04:16,900
feature of pre-ordering but it is

1102
01:04:14,858 --> 01:04:20,228
actually available to everyone who

1103
01:04:16,900 --> 01:04:22,059
pre-orders I just don't support it like

1104
01:04:20,228 --> 01:04:23,318
if you screw up in authorize the wrong

1105
01:04:22,059 --> 01:04:26,229
username you're on your own

1106
01:04:23,318 --> 01:04:28,538
like I'm not even gonna look at it so

1107
01:04:26,228 --> 01:04:30,009
it's not an officially supported part of

1108
01:04:28,539 --> 01:04:31,630
pre-ordering whereas if you like can't

1109
01:04:30,009 --> 01:04:33,789
download the source code for some reason

1110
01:04:31,630 --> 01:04:37,739
from the normal send owl supported thing

1111
01:04:33,789 --> 01:04:37,739
I go and find out why and help you

1112
01:04:53,150 --> 01:04:58,130
I'm following you're serious from

1113
01:04:54,889 --> 01:05:00,318
beginning and I'm writing my own game is

1114
01:04:58,130 --> 01:05:02,329
it okay to use in my win32 lair similar

1115
01:05:00,318 --> 01:05:04,519
code with same thought but mostly

1116
01:05:02,329 --> 01:05:09,859
written by myself actually what I've

1117
01:05:04,519 --> 01:05:11,960
said before is the platform layer stuff

1118
01:05:09,858 --> 01:05:13,548
like the win32 code and stuff you can

1119
01:05:11,960 --> 01:05:15,619
just use exactly the one that's in

1120
01:05:13,548 --> 01:05:18,019
hammer here if you want it's not in a

1121
01:05:15,619 --> 01:05:21,048
shippable state right now anyway like I

1122
01:05:18,019 --> 01:05:25,210
you know it will require a bunch of work

1123
01:05:21,048 --> 01:05:29,329
to finish off parts of it for shipping

1124
01:05:25,210 --> 01:05:30,769
but you can just use it so if you wrote

1125
01:05:29,329 --> 01:05:32,680
something solar to it you can also use

1126
01:05:30,769 --> 01:05:35,028
that but you can actually just use it I

1127
01:05:32,679 --> 01:05:39,649
pretty much already said that that part

1128
01:05:35,028 --> 01:05:41,150
can be used but even before the rest of

1129
01:05:39,650 --> 01:05:44,869
the source code is officially released

1130
01:05:41,150 --> 01:05:48,680
as public domain just because you know

1131
01:05:44,869 --> 01:05:51,500
the it's just some platform code I don't

1132
01:05:48,679 --> 01:06:02,719
mind if people want to work with it

1133
01:05:51,500 --> 01:06:05,179
early what do you think for DRM I'm

1134
01:06:02,719 --> 01:06:06,919
assuming that's a joke question I guess

1135
01:06:05,179 --> 01:06:10,818
I don't know you know it might not be a

1136
01:06:06,920 --> 01:06:13,039
joke question but if it's not a joke

1137
01:06:10,818 --> 01:06:16,130
question the answer is there's no DRM on

1138
01:06:13,039 --> 01:06:19,869
handmade here oh I hate DRM if it is a

1139
01:06:16,130 --> 01:06:23,230
joke question then the answer is like

1140
01:06:19,869 --> 01:06:25,490
obviously handmade hero will have to run

1141
01:06:23,230 --> 01:06:26,990
constantly connected to a server and as

1142
01:06:25,489 --> 01:06:28,788
soon as you if you don't connect to a

1143
01:06:26,989 --> 01:06:29,929
server with like strong authentication

1144
01:06:28,789 --> 01:06:32,740
and everything then it will just shut

1145
01:06:29,929 --> 01:06:32,739
off the game immediately

1146
01:06:42,849 --> 01:06:49,750
hey guys how come the handmade the hmd

1147
01:06:47,050 --> 01:06:52,510
bot doesn't mention the fact that this

1148
01:06:49,750 --> 01:06:55,000
keyboard was given to me by bib low and

1149
01:06:52,510 --> 01:06:59,350
fiery Drake this is actually a gift

1150
01:06:55,000 --> 01:07:04,150
keyboard it should say it should say in

1151
01:06:59,349 --> 01:07:10,779
the little thing who is responsible for

1152
01:07:04,150 --> 01:07:12,519
the keyboard and in so far I think

1153
01:07:10,780 --> 01:07:15,490
that's an excellent idea I think every

1154
01:07:12,519 --> 01:07:19,690
version of handmade hero should require

1155
01:07:15,489 --> 01:07:24,759
a yeah like a one of those like rotating

1156
01:07:19,690 --> 01:07:26,079
RSA key like USB plug things and if you

1157
01:07:24,760 --> 01:07:27,340
don't have that plug in your machine you

1158
01:07:26,079 --> 01:07:29,500
can't run the game at all

1159
01:07:27,340 --> 01:07:32,230
like that's just it forget it like you

1160
01:07:29,500 --> 01:07:35,309
can't even run it I mean that's like

1161
01:07:32,230 --> 01:07:35,309
bare minimum for sure

1162
01:07:47,349 --> 01:07:57,980
all right let's shut this down thank you

1163
01:07:56,630 --> 01:07:59,180
everyone for joining me from the episode

1164
01:07:57,980 --> 01:08:01,369
of handmade hero it's been a pleasure

1165
01:07:59,179 --> 01:08:02,480
coding with us always if you would like

1166
01:08:01,369 --> 01:08:03,799
to follow along at home you can always

1167
01:08:02,480 --> 01:08:05,960
peer to the game on hand made here at

1168
01:08:03,800 --> 01:08:07,670
Oregon it comes with the source code so

1169
01:08:05,960 --> 01:08:10,389
you can follow along each night on your

1170
01:08:07,670 --> 01:08:12,920
own and experiment if you would like to

1171
01:08:10,389 --> 01:08:14,839
we also have a forum site you can go to

1172
01:08:12,920 --> 01:08:15,889
ask questions a patreon page you can go

1173
01:08:14,840 --> 01:08:18,199
to if you want to support the video

1174
01:08:15,889 --> 01:08:19,548
series a schedule bot that'll tweet the

1175
01:08:18,199 --> 01:08:22,068
schedule at you if you want to catch the

1176
01:08:19,548 --> 01:08:25,250
series live and we also have an episode

1177
01:08:22,069 --> 01:08:28,370
guide maintains our very own mid lobe

1178
01:08:25,250 --> 01:08:30,409
that has wonderful annotated time

1179
01:08:28,369 --> 01:08:32,630
ordered notes on it so it's really easy

1180
01:08:30,409 --> 01:08:34,399
to catch up with past episodes and jump

1181
01:08:32,630 --> 01:08:37,150
around to the parts that you're

1182
01:08:34,399 --> 01:08:39,409
interested in that's about it for today

1183
01:08:37,149 --> 01:08:42,588
tomorrow will be the very last stream

1184
01:08:39,409 --> 01:08:44,899
for a while because I will be out of

1185
01:08:42,588 --> 01:08:47,359
town and I won't really have access to

1186
01:08:44,899 --> 01:08:49,608
anything I can use to stream in a

1187
01:08:47,359 --> 01:08:52,190
reliable way so we'll be a couple weeks

1188
01:08:49,609 --> 01:08:53,838
off hopefully everybody who wants to get

1189
01:08:52,189 --> 01:08:57,559
caught up will have time to get caught

1190
01:08:53,838 --> 01:09:01,519
up and I'll post the schedule when it

1191
01:08:57,560 --> 01:09:03,500
will resume once I know so yeah I hope

1192
01:09:01,520 --> 01:09:04,910
to see you back here tomorrow 8 p.m.

1193
01:09:03,500 --> 01:09:08,569
Pacific Daylight Time for the final

1194
01:09:04,909 --> 01:09:10,729
stream for a while before hiatus until

1195
01:09:08,569 --> 01:09:11,569
then have fun programming and I'll see

1196
01:09:10,729 --> 01:09:14,349
you guys on the Internet

1197
01:09:11,569 --> 01:09:14,350
take it easy everyone

