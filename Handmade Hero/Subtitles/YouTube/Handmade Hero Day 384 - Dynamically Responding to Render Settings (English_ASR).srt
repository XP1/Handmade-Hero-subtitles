1
00:00:03,109 --> 00:00:06,750
hello everyone and welcome to handmade

2
00:00:05,309 --> 00:00:10,199
Hero the show recode a complete game

3
00:00:06,750 --> 00:00:14,070
live on stream we are doing a little

4
00:00:10,199 --> 00:00:18,089
graphics cleanup today we we pretty much

5
00:00:14,070 --> 00:00:19,710
have stuff in a pretty pretty big fancy

6
00:00:18,089 --> 00:00:22,679
if I do say so myself

7
00:00:19,710 --> 00:00:24,179
please fancy position here on day three

8
00:00:22,679 --> 00:00:25,679
eighty four we're going to be so you

9
00:00:24,179 --> 00:00:27,989
know I'm day three before you want to

10
00:00:25,679 --> 00:00:29,670
load date 383 s source code if you want

11
00:00:27,989 --> 00:00:32,929
to follow along but let me show you I'm

12
00:00:29,670 --> 00:00:34,890
really happy with where things are and

13
00:00:32,929 --> 00:00:36,420
we're just doing a little bit of cleanup

14
00:00:34,890 --> 00:00:38,939
because at the end of the last dream I

15
00:00:36,420 --> 00:00:40,260
sort of did some cleanup to make it so

16
00:00:38,939 --> 00:00:43,500
that we always render to a low

17
00:00:40,259 --> 00:00:45,899
resolution or higher resolution actually

18
00:00:43,500 --> 00:00:47,969
whichever one you want and then scale

19
00:00:45,899 --> 00:00:49,289
the game and so we can do some fun

20
00:00:47,969 --> 00:00:50,850
things like this where this is like

21
00:00:49,289 --> 00:00:53,670
pixel art hero that we kind of made

22
00:00:50,850 --> 00:00:55,890
happen right but we didn't quite get a

23
00:00:53,670 --> 00:01:00,090
chance to finish everything that I had

24
00:00:55,890 --> 00:01:02,549
wanted to do there because and I'll go

25
00:01:00,090 --> 00:01:12,270
ahead and switch us back for now to high

26
00:01:02,549 --> 00:01:13,709
res rendering here at startup yeah so I

27
00:01:12,269 --> 00:01:15,390
didn't get a chance to everything I want

28
00:01:13,709 --> 00:01:17,809
to do because one of the things that we

29
00:01:15,390 --> 00:01:20,549
were about to do with the renderer is

30
00:01:17,810 --> 00:01:22,680
and the reason that kind of I end up in

31
00:01:20,549 --> 00:01:24,900
that place where you could get that kind

32
00:01:22,680 --> 00:01:26,549
of crazy scaling is I would like to be

33
00:01:24,900 --> 00:01:28,350
able to turn multi sampling on if the

34
00:01:26,549 --> 00:01:33,090
card supports it now we're doing depth

35
00:01:28,349 --> 00:01:35,879
peeling for you know are the way that

36
00:01:33,090 --> 00:01:38,670
we're handling our like depth

37
00:01:35,879 --> 00:01:40,560
compositing so we don't really need the

38
00:01:38,670 --> 00:01:41,909
multi sampling anymore we can run

39
00:01:40,560 --> 00:01:43,350
without it just fine and that's what I'm

40
00:01:41,909 --> 00:01:46,469
doing right here is I'm running without

41
00:01:43,349 --> 00:01:48,899
the multi sampling but you can also kind

42
00:01:46,469 --> 00:01:51,179
of see that what that does is while all

43
00:01:48,899 --> 00:01:54,450
of our sprites look nice and clean and

44
00:01:51,180 --> 00:01:57,090
smooth and that's all good we run into

45
00:01:54,450 --> 00:02:00,570
this other problem which is that all of

46
00:01:57,090 --> 00:02:03,990
our sort of line work right like all of

47
00:02:00,569 --> 00:02:05,250
our geometric primitives which there

48
00:02:03,989 --> 00:02:07,228
aren't going to be a whole lot of in

49
00:02:05,250 --> 00:02:10,259
handmade here necessarily but the ground

50
00:02:07,228 --> 00:02:12,990
and walls are sort of these blocks so

51
00:02:10,258 --> 00:02:14,009
they do comprise this we live again

52
00:02:12,990 --> 00:02:15,960
portion of the screen even though

53
00:02:14,009 --> 00:02:18,179
there's only really one thing in the

54
00:02:15,960 --> 00:02:20,610
game that's a that's a cube it's

55
00:02:18,180 --> 00:02:23,129
basically like a solid thing but that's

56
00:02:20,610 --> 00:02:26,700
a lot of stuff that's a lot of of the

57
00:02:23,129 --> 00:02:28,979
image so what ends up happening is you

58
00:02:26,699 --> 00:02:30,389
get kind of jagged lines on the ends of

59
00:02:28,979 --> 00:02:32,099
those and that's just a standard

60
00:02:30,389 --> 00:02:34,409
anti-aliasing problem and the best

61
00:02:32,099 --> 00:02:35,789
solution on a GPU for the standard

62
00:02:34,409 --> 00:02:38,310
anti-aliasing problem when you're

63
00:02:35,789 --> 00:02:40,259
drawing solid 3d primitives like that is

64
00:02:38,310 --> 00:02:42,599
usually to use multi sampling so what

65
00:02:40,259 --> 00:02:44,579
I'd like to do is four cards for people

66
00:02:42,599 --> 00:02:45,659
who have modern beefy cards which this

67
00:02:44,580 --> 00:02:48,570
one that is in this machine is

68
00:02:45,659 --> 00:02:51,299
definitely not this is a seven-year-old

69
00:02:48,569 --> 00:02:53,009
card at this point so people have modern

70
00:02:51,300 --> 00:02:54,240
cards you can see that we're running

71
00:02:53,009 --> 00:02:57,019
with our depth you know the depth

72
00:02:54,240 --> 00:02:59,310
feeling here is still running quite well

73
00:02:57,020 --> 00:03:02,010
even though that's you know over drawing

74
00:02:59,310 --> 00:03:05,340
the screen many times so given that fact

75
00:03:02,009 --> 00:03:07,560
I pretty much can guarantee you that if

76
00:03:05,340 --> 00:03:09,210
you ran this on a fancy graphics card

77
00:03:07,560 --> 00:03:12,509
you would have just a ton of horsepower

78
00:03:09,210 --> 00:03:15,060
to spare so as a result I want to enable

79
00:03:12,509 --> 00:03:16,919
the user to you know or the game

80
00:03:15,060 --> 00:03:18,930
automatically if it detects that it has

81
00:03:16,919 --> 00:03:21,239
enough horsepower or whatever to be able

82
00:03:18,930 --> 00:03:22,950
to turn on multi sample anti-aliasing

83
00:03:21,240 --> 00:03:25,050
here to get rid of the jagged lines

84
00:03:22,949 --> 00:03:27,089
because there's no reason not to use

85
00:03:25,050 --> 00:03:28,980
that extra power on the card if it's

86
00:03:27,090 --> 00:03:30,270
there if it's not there the jagged lines

87
00:03:28,979 --> 00:03:31,769
are fine I don't mind them they're not

88
00:03:30,270 --> 00:03:33,360
the end of the world and they're

89
00:03:31,770 --> 00:03:35,400
certainly not a rendering artifact we

90
00:03:33,360 --> 00:03:37,320
need to care too much about but since

91
00:03:35,400 --> 00:03:39,030
graphics cards already know the solution

92
00:03:37,319 --> 00:03:44,250
to this and have worked out exactly how

93
00:03:39,030 --> 00:03:46,530
to do it to a very good effect for us I

94
00:03:44,250 --> 00:03:48,479
feel like that's what we want to do so

95
00:03:46,530 --> 00:03:50,490
what I want to do now is just go into

96
00:03:48,479 --> 00:03:52,169
the renderer and today I just want to

97
00:03:50,490 --> 00:03:55,170
clean everything out so that it's

98
00:03:52,169 --> 00:03:57,209
switchable easily between multi sampling

99
00:03:55,169 --> 00:04:00,119
and non multi sampling so that the game

100
00:03:57,210 --> 00:04:07,850
is able to pick which one of those wants

101
00:04:00,120 --> 00:04:10,860
to do and proceed accordingly right okay

102
00:04:07,849 --> 00:04:12,659
so that's all we're trying to do pretty

103
00:04:10,860 --> 00:04:14,160
simple but again it involves talking to

104
00:04:12,659 --> 00:04:16,439
the graphic card through a graphics API

105
00:04:14,159 --> 00:04:18,839
and as you hopefully have figured out by

106
00:04:16,439 --> 00:04:21,149
now that is always an exercise in

107
00:04:18,839 --> 00:04:23,159
pulling teeth and I can also tell you

108
00:04:21,149 --> 00:04:24,929
that we have had good fortune on

109
00:04:23,160 --> 00:04:26,400
handmade hero because I have not been

110
00:04:24,930 --> 00:04:29,100
doing anything

111
00:04:26,399 --> 00:04:30,959
super complicated with the GPU in that

112
00:04:29,100 --> 00:04:33,090
we have not hit a lot of real stumpers

113
00:04:30,959 --> 00:04:36,989
that take a long time to debug because

114
00:04:33,089 --> 00:04:38,939
you know you definitely can and you can

115
00:04:36,990 --> 00:04:40,288
hit driver bugs which you know you don't

116
00:04:38,939 --> 00:04:41,930
know are there and all these other sorts

117
00:04:40,288 --> 00:04:44,189
things so we've been very fortunate

118
00:04:41,930 --> 00:04:45,569
probably because we're a 2-d game and

119
00:04:44,189 --> 00:04:47,430
not trying to do anything crazy like

120
00:04:45,569 --> 00:04:50,370
voxel cone tracing or something like

121
00:04:47,430 --> 00:04:52,199
this but it's just worth noting that I'm

122
00:04:50,370 --> 00:04:54,000
making even though we've had some

123
00:04:52,199 --> 00:04:58,319
troubles I'm making it look a lot easier

124
00:04:54,000 --> 00:05:00,509
than it is or rather I'm not luck is and

125
00:04:58,319 --> 00:05:02,819
and also the type of game we're doing is

126
00:05:00,509 --> 00:05:05,939
in the sense that we're just not pushing

127
00:05:02,819 --> 00:05:07,589
things to the limit that would you know

128
00:05:05,939 --> 00:05:08,189
that where things start to crumble and

129
00:05:07,589 --> 00:05:10,888
fall apart

130
00:05:08,189 --> 00:05:14,339
alright so let's take a look at what we

131
00:05:10,889 --> 00:05:15,930
need to do here first of all we sort of

132
00:05:14,339 --> 00:05:17,848
did some work yesterday to simplify the

133
00:05:15,930 --> 00:05:19,079
way that we're doing our frame buffer

134
00:05:17,848 --> 00:05:20,848
creation you can kind of see that

135
00:05:19,079 --> 00:05:22,228
happening here we now have this thing

136
00:05:20,848 --> 00:05:23,339
called create frame buffer and when you

137
00:05:22,228 --> 00:05:26,819
call create frame buffer you can

138
00:05:23,339 --> 00:05:31,589
actually pass in a bunch of stuff here

139
00:05:26,819 --> 00:05:34,288
that kind of tells you okay here's the

140
00:05:31,589 --> 00:05:35,638
stuff that I want this frame buffer the

141
00:05:34,288 --> 00:05:37,918
properties that I want this frame buffer

142
00:05:35,639 --> 00:05:39,269
to have and it will correctly allocate

143
00:05:37,918 --> 00:05:42,509
the frame buffer based on those

144
00:05:39,269 --> 00:05:44,189
properties now we have some parameters

145
00:05:42,509 --> 00:05:46,199
here essentially that we want to be able

146
00:05:44,189 --> 00:05:48,829
to control and so what I'm going to do

147
00:05:46,199 --> 00:05:51,360
is I'm going to add these to the OpenGL

148
00:05:48,829 --> 00:05:54,680
system here where we can kind of say

149
00:05:51,360 --> 00:06:05,098
like okay let's you know let's have some

150
00:05:54,680 --> 00:06:06,030
some control parameters right so up here

151
00:06:05,098 --> 00:06:09,360
I'm just going to introduce some

152
00:06:06,029 --> 00:06:11,679
optional switches and the optional

153
00:06:09,360 --> 00:06:14,930
switches you know what I might do I

154
00:06:11,680 --> 00:06:14,930
[Applause]

155
00:06:15,379 --> 00:06:19,949
might just make this its own structure

156
00:06:17,668 --> 00:06:21,719
and the reason for that is that in the

157
00:06:19,949 --> 00:06:23,129
future I probably want to have this be

158
00:06:21,720 --> 00:06:24,990
something that the game can change at

159
00:06:23,129 --> 00:06:26,490
runtime potentially like from a dialog

160
00:06:24,990 --> 00:06:29,788
box in the game or something like this

161
00:06:26,490 --> 00:06:31,680
or automatically like if the game

162
00:06:29,788 --> 00:06:33,300
detects that the framerate too slow it

163
00:06:31,680 --> 00:06:35,218
could pull off some of these switches

164
00:06:33,300 --> 00:06:36,718
something like this and so what I want

165
00:06:35,218 --> 00:06:38,668
to be able to do is probably you know

166
00:06:36,718 --> 00:06:39,040
plan for just a little bit you don't

167
00:06:38,668 --> 00:06:40,120
want to

168
00:06:39,040 --> 00:06:42,250
premature about or anything but just

169
00:06:40,120 --> 00:06:44,050
since it's easy wrap it in a structure

170
00:06:42,250 --> 00:06:46,689
that I can expect in the future that the

171
00:06:44,050 --> 00:06:49,960
game might provide this struct back to

172
00:06:46,689 --> 00:06:53,019
me and it's easy to encapsulate what the

173
00:06:49,959 --> 00:06:54,370
switches are here into or by shouldn't

174
00:06:53,019 --> 00:06:55,839
say encapsulate because I'm not hiding

175
00:06:54,370 --> 00:06:59,290
the frame but I guess bundle them

176
00:06:55,839 --> 00:07:02,439
together so I want to have multi

177
00:06:59,290 --> 00:07:04,870
sampling as one of the options and I

178
00:07:02,439 --> 00:07:07,060
probably also want to have depth peel

179
00:07:04,870 --> 00:07:10,000
count or something as one of the options

180
00:07:07,060 --> 00:07:14,019
like how many depth peels do we want to

181
00:07:10,000 --> 00:07:16,899
do and that's probably all we really

182
00:07:14,019 --> 00:07:18,490
need here the other thing that we could

183
00:07:16,899 --> 00:07:21,159
specify in the hardware rendering such

184
00:07:18,490 --> 00:07:25,210
as is the resolution at which we want to

185
00:07:21,160 --> 00:07:27,760
render and I don't really know whether

186
00:07:25,209 --> 00:07:29,739
that's appropriate to do here or not but

187
00:07:27,759 --> 00:07:30,730
I think I might just go ahead and say

188
00:07:29,740 --> 00:07:33,100
that that's where that's going to come

189
00:07:30,730 --> 00:07:35,319
from so I'm going to have render with

190
00:07:33,100 --> 00:07:38,670
and render height in here as well and

191
00:07:35,319 --> 00:07:41,469
that to me sort of looks roughly like

192
00:07:38,670 --> 00:07:43,870
the switches that I know at least at the

193
00:07:41,470 --> 00:07:46,720
moment are things that you could play

194
00:07:43,870 --> 00:07:49,720
the game with different settings and

195
00:07:46,720 --> 00:07:52,030
they wouldn't change the fundamental

196
00:07:49,720 --> 00:07:53,830
rendering architecture right like all of

197
00:07:52,029 --> 00:07:55,750
these things we can make pretty easily

198
00:07:53,829 --> 00:07:57,870
parameterize Abul with the way that we

199
00:07:55,750 --> 00:08:01,319
have the pipeline set up right now

200
00:07:57,870 --> 00:08:04,449
there's nothing in there that's going to

201
00:08:01,319 --> 00:08:06,180
you know make it so that we have to do

202
00:08:04,449 --> 00:08:09,490
huge gyrations in the code to support

203
00:08:06,180 --> 00:08:12,850
the different configurations so that

204
00:08:09,490 --> 00:08:14,230
seems like pretty easy to support so

205
00:08:12,850 --> 00:08:19,510
what I'm going to do here is I'm going

206
00:08:14,230 --> 00:08:22,150
to start using those things like I'm

207
00:08:19,509 --> 00:08:24,069
sorry going to try to make it so that we

208
00:08:22,149 --> 00:08:27,399
can control these switches however we

209
00:08:24,069 --> 00:08:30,490
want and then we will the renderer will

210
00:08:27,399 --> 00:08:32,019
like adjust accordingly all right so the

211
00:08:30,490 --> 00:08:34,418
first thing I want to do is render with

212
00:08:32,019 --> 00:08:37,029
and render height are pretty well pulled

213
00:08:34,418 --> 00:08:39,399
out here so I just want to check to make

214
00:08:37,029 --> 00:08:41,529
sure that nobody's actually using these

215
00:08:39,399 --> 00:08:45,009
elsewhere and it's behind my head it

216
00:08:41,529 --> 00:08:47,649
looks like yeah so render entry blend

217
00:08:45,009 --> 00:08:49,269
render target that at the moment I think

218
00:08:47,649 --> 00:08:50,350
I'm going to nerf and the reason I'm

219
00:08:49,269 --> 00:08:53,259
going to nerf that is because this has

220
00:08:50,350 --> 00:08:56,920
changed so much from what we were doing

221
00:08:53,259 --> 00:08:58,480
for that I think we don't really want to

222
00:08:56,919 --> 00:09:01,599
have that be in here anymore

223
00:08:58,480 --> 00:09:03,759
so I suspect we will probably you know

224
00:09:01,600 --> 00:09:06,670
we might re-enable that in the future

225
00:09:03,759 --> 00:09:09,189
but in for the moment I think I want to

226
00:09:06,669 --> 00:09:10,329
pull that out because if we were going

227
00:09:09,190 --> 00:09:12,250
to do it we'd have to think it through

228
00:09:10,330 --> 00:09:14,680
again and there's really not much code

229
00:09:12,250 --> 00:09:17,500
in there at the moment so I'm just going

230
00:09:14,679 --> 00:09:20,379
to go ahead and and get rid of that push

231
00:09:17,500 --> 00:09:22,659
blend render target situation that's

232
00:09:20,379 --> 00:09:27,340
going to get out of there and and

233
00:09:22,659 --> 00:09:28,839
that'll be it so I always forget that I

234
00:09:27,340 --> 00:09:32,379
don't define those in this in handmade

235
00:09:28,840 --> 00:09:35,950
hero I do in my own code base I guess be

236
00:09:32,379 --> 00:09:37,419
32x is but not the you 32x maybe I

237
00:09:35,950 --> 00:09:39,210
should just define them so I can just

238
00:09:37,419 --> 00:09:42,099
type them when I type them out of habit

239
00:09:39,210 --> 00:09:44,139
so really all those are right is they're

240
00:09:42,100 --> 00:09:47,200
just saying hey you could make this as

241
00:09:44,139 --> 00:09:48,939
big as you wanted it to be that's all

242
00:09:47,200 --> 00:09:51,250
they're saying so it's basically like if

243
00:09:48,940 --> 00:09:52,870
I say you 32x what it means is I need

244
00:09:51,250 --> 00:09:56,799
something that's at least as big as you

245
00:09:52,870 --> 00:10:01,620
32 but which you know in fact like I do

246
00:09:56,799 --> 00:10:04,839
it this way just say hey by the way

247
00:10:01,620 --> 00:10:06,220
here's all those X types it's basically

248
00:10:04,840 --> 00:10:09,129
just saying hey it's something that's at

249
00:10:06,220 --> 00:10:10,840
least as big as a you 32 but you could

250
00:10:09,129 --> 00:10:12,460
make it bigger if you wanted to so I

251
00:10:10,840 --> 00:10:14,920
don't care about the fact that this

252
00:10:12,460 --> 00:10:19,240
thing is 32 bits I care about it can

253
00:10:14,919 --> 00:10:21,189
hold at least 32 bits and really this is

254
00:10:19,240 --> 00:10:22,750
kind of a holdover I don't really use it

255
00:10:21,190 --> 00:10:24,850
much anymore meaning I don't have

256
00:10:22,750 --> 00:10:28,450
platforms where I switch it on but in

257
00:10:24,850 --> 00:10:29,830
the past in 16 in a 16-bit era a lot of

258
00:10:28,450 --> 00:10:33,850
times you'd want to say stuff like this

259
00:10:29,830 --> 00:10:36,220
is a-you 16 X meaning if you happen to

260
00:10:33,850 --> 00:10:37,810
be compiling on 32-bit you may want to

261
00:10:36,220 --> 00:10:40,600
switch this to a 32-bit value because

262
00:10:37,809 --> 00:10:42,519
that may be faster than using a 16-bit

263
00:10:40,600 --> 00:10:46,420
value because certain chips it was

264
00:10:42,519 --> 00:10:48,309
slower to use 16-bit operations if they

265
00:10:46,419 --> 00:10:50,139
have any 32-bit but in other cases where

266
00:10:48,309 --> 00:10:52,359
you're running on 16-bit stuff running

267
00:10:50,139 --> 00:10:54,970
32 bits much slower so you wanted to say

268
00:10:52,360 --> 00:10:56,500
hey use whichever one's faster it's more

269
00:10:54,970 --> 00:10:58,660
of a holdover you don't really need it

270
00:10:56,500 --> 00:11:01,840
very much now pretty much like I don't

271
00:10:58,659 --> 00:11:04,000
really know their prime sure there are

272
00:11:01,840 --> 00:11:06,879
some out there but I'm not super

273
00:11:04,000 --> 00:11:09,940
familiar with any chip right now

274
00:11:06,879 --> 00:11:13,600
where you'd rather switch to a 64-bit

275
00:11:09,940 --> 00:11:15,460
number then use a 32-bit number I just

276
00:11:13,600 --> 00:11:18,700
don't know of one that doesn't mean

277
00:11:15,460 --> 00:11:20,379
there isn't one but I don't know if it's

278
00:11:18,700 --> 00:11:25,540
relevant for games if there is one I

279
00:11:20,379 --> 00:11:28,590
don't know but there used to be or at

280
00:11:25,539 --> 00:11:31,059
least in the 16-bit era there used to be

281
00:11:28,590 --> 00:11:33,610
so anyway that's all that is it's not

282
00:11:31,059 --> 00:11:35,019
very important anyway so back to what I

283
00:11:33,610 --> 00:11:36,430
had typed originally that should work

284
00:11:35,019 --> 00:11:38,500
now right yeah

285
00:11:36,429 --> 00:11:40,029
so now that we have these Hardware

286
00:11:38,500 --> 00:11:42,820
switches I'm just going to go ahead and

287
00:11:40,029 --> 00:11:44,169
do the work there - maybe I'll do it

288
00:11:42,820 --> 00:11:46,810
over on this side so I don't have the

289
00:11:44,169 --> 00:11:48,819
risk of going behind my own head I'm

290
00:11:46,809 --> 00:11:50,889
just going to double check that nobody

291
00:11:48,820 --> 00:11:56,020
uses these commands with them wisten

292
00:11:50,889 --> 00:11:57,819
height that's okay so what I want to do

293
00:11:56,019 --> 00:11:59,799
now is and what we could probably do -

294
00:11:57,820 --> 00:12:01,090
it's in that in the commands we could

295
00:11:59,799 --> 00:12:02,259
have those switches placed in the

296
00:12:01,090 --> 00:12:03,870
command for example that's where the

297
00:12:02,259 --> 00:12:06,610
switches could come from if we wanted to

298
00:12:03,870 --> 00:12:11,230
so you know in fact what I could do is

299
00:12:06,610 --> 00:12:12,850
is sort of just pre you know be

300
00:12:11,230 --> 00:12:15,129
completely premature here and just say

301
00:12:12,850 --> 00:12:17,009
hey look where the width and height were

302
00:12:15,129 --> 00:12:19,480
before maybe that's where I'll put them

303
00:12:17,009 --> 00:12:23,559
because I guess there's really no reason

304
00:12:19,480 --> 00:12:25,000
not to do that right so let's see here

305
00:12:23,559 --> 00:12:27,309
where are those written of commands

306
00:12:25,000 --> 00:12:30,039
they're right here so here are the those

307
00:12:27,309 --> 00:12:31,719
parameters so what I'll do I guess I'll

308
00:12:30,039 --> 00:12:35,439
just sort of more conform to what we had

309
00:12:31,720 --> 00:12:37,029
here and say that instead so now you can

310
00:12:35,440 --> 00:12:38,980
see on here we kind of have like alright

311
00:12:37,029 --> 00:12:44,439
we're going to send down the parameters

312
00:12:38,980 --> 00:12:46,509
for the game render commands and what I

313
00:12:44,440 --> 00:12:51,730
might say is so the depth peel count

314
00:12:46,509 --> 00:12:55,360
here and the multi sampling maybe that's

315
00:12:51,730 --> 00:12:57,430
a hint - so maybe this is is sort of

316
00:12:55,360 --> 00:13:05,950
understood to be how many I'm trying to

317
00:12:57,429 --> 00:13:09,579
do but it's not a requirement because

318
00:13:05,950 --> 00:13:10,930
for example in the software renderer we

319
00:13:09,580 --> 00:13:18,690
may just want to say that the software

320
00:13:10,929 --> 00:13:20,528
renderer can only do specifically just

321
00:13:18,690 --> 00:13:24,490
one

322
00:13:20,528 --> 00:13:26,019
a configuration of depth peeling so you

323
00:13:24,490 --> 00:13:29,318
know maybe these are like hints that

324
00:13:26,019 --> 00:13:31,120
basically say look this is what I would

325
00:13:29,318 --> 00:13:32,799
like to be doing right now

326
00:13:31,120 --> 00:13:40,419
you don't have to do that if you can't

327
00:13:32,799 --> 00:13:42,370
do that right okay so if I continue with

328
00:13:40,419 --> 00:13:44,769
how I was doing this and say well maybe

329
00:13:42,370 --> 00:13:50,198
in here we have a thing that's like

330
00:13:44,769 --> 00:13:54,929
struct game render params or setting

331
00:13:50,198 --> 00:13:58,240
something like this and I pull this out

332
00:13:54,929 --> 00:13:59,919
like so like I was trying to do before

333
00:13:58,240 --> 00:14:04,149
then when I can say is well the game

334
00:13:59,919 --> 00:14:07,808
render setting can go here and then what

335
00:14:04,149 --> 00:14:10,360
can happen is inside this OpenGL render

336
00:14:07,808 --> 00:14:14,730
commands loop what I could do is I could

337
00:14:10,360 --> 00:14:20,800
say well you know maybe we just say if

338
00:14:14,730 --> 00:14:26,769
settings have changed and I say that you

339
00:14:20,799 --> 00:14:30,039
know I have this magical command which

340
00:14:26,769 --> 00:14:33,519
can take two of these setting structures

341
00:14:30,039 --> 00:14:37,179
so you know the settings that came from

342
00:14:33,519 --> 00:14:42,698
the game and the settings that I have so

343
00:14:37,179 --> 00:14:47,708
in OpenGL you know I'd have game render

344
00:14:42,698 --> 00:14:49,479
settings current settings right so if I

345
00:14:47,708 --> 00:14:55,989
have those two things I basically want

346
00:14:49,480 --> 00:14:58,170
to say here if there was a change since

347
00:14:55,990 --> 00:15:00,159
the last time we initialized everything

348
00:14:58,169 --> 00:15:03,278
then we're going to initialize

349
00:15:00,159 --> 00:15:05,259
everything again right and so I can

350
00:15:03,278 --> 00:15:08,948
break off this initialization code then

351
00:15:05,259 --> 00:15:17,230
you know essentially all of this stuff I

352
00:15:08,948 --> 00:15:19,899
can break all of this out into here into

353
00:15:17,230 --> 00:15:22,420
a routine that only you know will

354
00:15:19,899 --> 00:15:24,999
execute when we detect that we need to

355
00:15:22,419 --> 00:15:26,588
reconfigure everything and so the nice

356
00:15:24,999 --> 00:15:28,928
thing about that is now what will happen

357
00:15:26,589 --> 00:15:30,670
is we can change this will let us change

358
00:15:28,928 --> 00:15:31,778
our settings on the fly so example you

359
00:15:30,669 --> 00:15:33,889
know if we want to change the render

360
00:15:31,778 --> 00:15:35,359
resolution on the fly or

361
00:15:33,889 --> 00:15:37,039
we want to change like multi-sample and

362
00:15:35,359 --> 00:15:39,139
stuff on the fly even though that

363
00:15:37,039 --> 00:15:41,178
requires recreating these render targets

364
00:15:39,139 --> 00:15:43,339
that's okay because will detect it and

365
00:15:41,178 --> 00:15:45,019
will close down our previous render

366
00:15:43,339 --> 00:15:47,600
targets and create new render targets

367
00:15:45,019 --> 00:15:55,399
right so it's you know that'll be

368
00:15:47,600 --> 00:15:57,230
that'll be easy for us to do so try to

369
00:15:55,399 --> 00:15:58,970
think of what else we've got here that's

370
00:15:57,230 --> 00:16:01,129
that way I think everything else is not

371
00:15:58,970 --> 00:16:05,329
so I think everything else is pretty

372
00:16:01,129 --> 00:16:07,308
good yeah and so the only question is

373
00:16:05,328 --> 00:16:09,798
will we have to recompile some shaders I

374
00:16:07,308 --> 00:16:11,749
don't know that we will but we could

375
00:16:09,798 --> 00:16:16,879
make shader recompilation be part of

376
00:16:11,749 --> 00:16:21,918
that process as well you know that would

377
00:16:16,879 --> 00:16:24,879
not be difficult to do so like we could

378
00:16:21,918 --> 00:16:26,958
have like the srgb and stuff in there

379
00:16:24,879 --> 00:16:29,230
that's kind of an interesting thing

380
00:16:26,958 --> 00:16:29,229
right

381
00:16:37,549 --> 00:16:43,490
like just looking at here so the

382
00:16:39,830 --> 00:16:46,370
compilation which is this phrase this

383
00:16:43,490 --> 00:16:49,389
face here we could pretty easily right

384
00:16:46,370 --> 00:16:53,299
go ahead and do that

385
00:16:49,389 --> 00:16:57,710
that compilation and and that would also

386
00:16:53,299 --> 00:17:04,569
allow us to have those shaders be sort

387
00:16:57,710 --> 00:17:06,860
of predicated on whether or not you know

388
00:17:04,569 --> 00:17:08,450
whether or not certain settings were set

389
00:17:06,859 --> 00:17:09,979
and I'm going to go ahead and do that

390
00:17:08,450 --> 00:17:11,480
because that just seems like the right

391
00:17:09,980 --> 00:17:13,309
place to put it because that means we

392
00:17:11,480 --> 00:17:17,299
would know we wouldn't have sort of this

393
00:17:13,309 --> 00:17:19,819
incentive in the future to like not have

394
00:17:17,299 --> 00:17:21,649
stuffed baked into the shaders when we

395
00:17:19,819 --> 00:17:23,299
change our settings we could just fake

396
00:17:21,650 --> 00:17:25,850
things into the shaders differently if

397
00:17:23,299 --> 00:17:27,680
we wanted to now again I don't really

398
00:17:25,849 --> 00:17:29,299
know that we'll ever need that but it's

399
00:17:27,680 --> 00:17:30,560
easy enough to do that I feel like I

400
00:17:29,299 --> 00:17:32,450
might as well just do it long in this

401
00:17:30,559 --> 00:17:35,599
past because that way we won't have this

402
00:17:32,450 --> 00:17:37,370
sort of it's definitely I want to do we

403
00:17:35,599 --> 00:17:38,719
won't have like a headwind there

404
00:17:37,369 --> 00:17:39,799
essentially where it's like I don't

405
00:17:38,720 --> 00:17:42,440
really feel like doing that because

406
00:17:39,799 --> 00:17:44,539
remember Rumble so what I'm going to do

407
00:17:42,440 --> 00:17:46,130
here is I'm going to place the OpenGL

408
00:17:44,539 --> 00:17:48,139
render commands routine at the bottom so

409
00:17:46,130 --> 00:17:50,540
it can just call all of this stuff and

410
00:17:48,140 --> 00:17:55,570
then what it'll do is it'll call the

411
00:17:50,539 --> 00:17:58,730
OpenGL sort of compilation phase stuff

412
00:17:55,569 --> 00:18:00,740
where we get in here we go and the frame

413
00:17:58,730 --> 00:18:02,329
buffer creation stuff it'll call that

414
00:18:00,740 --> 00:18:04,160
whenever it detects that maybe that's

415
00:18:02,329 --> 00:18:07,369
something that should do so we'll just

416
00:18:04,160 --> 00:18:08,930
put that right there all right so it's

417
00:18:07,369 --> 00:18:10,609
start up now we just won't compile

418
00:18:08,930 --> 00:18:11,930
things will only compile things when we

419
00:18:10,609 --> 00:18:13,129
go to draw them the first time and so

420
00:18:11,930 --> 00:18:15,860
the only steps that we're going to leave

421
00:18:13,130 --> 00:18:19,790
in here is just going to be like stuff

422
00:18:15,859 --> 00:18:23,569
that we know we need to do regardless

423
00:18:19,789 --> 00:18:27,079
right and I don't know if we want to

424
00:18:23,569 --> 00:18:29,750
have this sort of this test stuff here

425
00:18:27,079 --> 00:18:32,750
this can probably move to the outside

426
00:18:29,750 --> 00:18:36,680
now I mean to that sort of secondary

427
00:18:32,750 --> 00:18:39,920
startup thing because honestly if we if

428
00:18:36,680 --> 00:18:42,769
we really want to be diligent when we

429
00:18:39,920 --> 00:18:44,600
create a multi sample buffer what we

430
00:18:42,769 --> 00:18:46,670
could do now is say well we if we try to

431
00:18:44,599 --> 00:18:48,769
create a mother sample buffer and fail

432
00:18:46,670 --> 00:18:50,039
then we could scale back down and I

433
00:18:48,769 --> 00:18:56,460
don't know if we wanted to

434
00:18:50,039 --> 00:18:58,529
not yeah it's kind of a tough call so

435
00:18:56,460 --> 00:19:03,500
we'll keep an eye on that and we'll

436
00:18:58,529 --> 00:19:03,500
we'll see what we need to do for that

437
00:19:03,589 --> 00:19:12,829
alright so this is just going to be our

438
00:19:06,900 --> 00:19:15,240
opengl you know prepare for settings and

439
00:19:12,829 --> 00:19:19,399
this is going to take the game render

440
00:19:15,240 --> 00:19:21,509
settings that you want it to use and

441
00:19:19,400 --> 00:19:23,610
what we're going to do is just at first

442
00:19:21,509 --> 00:19:25,470
we're just going to say open jail-like

443
00:19:23,609 --> 00:19:28,129
settings i think that's what we called

444
00:19:25,470 --> 00:19:30,210
it current settings that's controlled it

445
00:19:28,130 --> 00:19:32,840
we're going to say the current settings

446
00:19:30,210 --> 00:19:35,039
now are now equal to the new settings

447
00:19:32,839 --> 00:19:36,480
and then what we're going to do is we're

448
00:19:35,039 --> 00:19:41,099
going to get rid like we're going to

449
00:19:36,480 --> 00:19:43,019
jettison anything that we or like that

450
00:19:41,099 --> 00:19:45,929
we already have so we have to go through

451
00:19:43,019 --> 00:19:48,930
all of our frame buffers and all that

452
00:19:45,930 --> 00:19:51,630
stuff and get rid of them if they're

453
00:19:48,930 --> 00:19:53,580
already there right so I'm not going to

454
00:19:51,630 --> 00:19:55,800
quite do that yet because I want to pull

455
00:19:53,579 --> 00:19:57,899
some stuff out first before we do but

456
00:19:55,799 --> 00:20:00,919
this is where this is going to go so

457
00:19:57,900 --> 00:20:05,640
here we're going to do jettison all

458
00:20:00,920 --> 00:20:08,220
existing frame buffers and programs and

459
00:20:05,640 --> 00:20:10,860
so that will let it's like just flush

460
00:20:08,220 --> 00:20:14,279
the you know basically those two sets of

461
00:20:10,859 --> 00:20:16,289
state and then recompile them all so now

462
00:20:14,279 --> 00:20:18,000
we don't have to do that if because now

463
00:20:16,289 --> 00:20:20,009
we know we're just always going to have

464
00:20:18,000 --> 00:20:22,829
to create all the frame buffers that

465
00:20:20,009 --> 00:20:24,599
we're going to create and now we can

466
00:20:22,829 --> 00:20:26,789
also take the opportunity to move the

467
00:20:24,599 --> 00:20:29,429
frame buffer stuff kind of in like out

468
00:20:26,789 --> 00:20:31,589
into a more appropriate location as well

469
00:20:29,430 --> 00:20:39,440
so let's start cleaning up some of these

470
00:20:31,589 --> 00:20:41,819
things here so people who use the the

471
00:20:39,440 --> 00:20:42,900
width and height directly out of here

472
00:20:41,819 --> 00:20:45,329
are going to have to get it out of

473
00:20:42,900 --> 00:20:47,340
settings now which is not a big deal

474
00:20:45,329 --> 00:20:49,829
right it's literally just symptom tactic

475
00:20:47,339 --> 00:20:51,209
stuff it's it's the same it's still as

476
00:20:49,829 --> 00:20:52,710
if it was directly in there it's not

477
00:20:51,210 --> 00:20:54,360
like it's going to incur an extra cache

478
00:20:52,710 --> 00:20:56,940
miss or something like that it's still

479
00:20:54,359 --> 00:21:02,009
just sitting there right at the top but

480
00:20:56,940 --> 00:21:04,880
we do have to grab it out of there so

481
00:21:02,009 --> 00:21:04,879
let's go ahead and do that

482
00:21:11,019 --> 00:21:19,000
there we go and now in here we just need

483
00:21:14,750 --> 00:21:19,000
to actually pull out that render width

484
00:21:21,549 --> 00:21:25,789
and maybe I'll just make it easy on

485
00:21:23,599 --> 00:21:46,089
myself and just say like okay what's

486
00:21:25,789 --> 00:21:46,089
called settings and that is it just wit

487
00:21:46,450 --> 00:21:54,259
it is alright so that is mostly all we

488
00:21:51,650 --> 00:21:56,900
need to do we need to compute a max

489
00:21:54,259 --> 00:22:01,519
render target index here what I might

490
00:21:56,900 --> 00:22:05,090
want to do is make that value a property

491
00:22:01,519 --> 00:22:06,799
of opengl so what I might want to do is

492
00:22:05,089 --> 00:22:08,599
say well the max render target index is

493
00:22:06,799 --> 00:22:09,558
going to be equal to the Oprah maybe

494
00:22:08,599 --> 00:22:16,129
I'll do it the other way around the

495
00:22:09,558 --> 00:22:18,859
opengl max render target index is going

496
00:22:16,130 --> 00:22:20,510
to equal whatever we compute here and

497
00:22:18,859 --> 00:22:22,719
one of the weird things about max render

498
00:22:20,509 --> 00:22:25,099
target index that I don't super love is

499
00:22:22,720 --> 00:22:26,420
that it makes it harder to represent the

500
00:22:25,099 --> 00:22:29,389
fact that there are no render targets

501
00:22:26,420 --> 00:22:32,330
right so if I store the max render

502
00:22:29,390 --> 00:22:34,670
target index I can't say that there are

503
00:22:32,329 --> 00:22:36,678
no render targets very easily I would

504
00:22:34,670 --> 00:22:39,500
have to say like negative 1 or something

505
00:22:36,679 --> 00:22:41,780
because I can't say 0 because that means

506
00:22:39,500 --> 00:22:45,410
there is 1 render target still in

507
00:22:41,779 --> 00:22:46,730
existence so it's a little bad and we

508
00:22:45,410 --> 00:22:47,870
probably want to sort of clean this up

509
00:22:46,730 --> 00:22:51,650
in fact I guess I'll just clean it up

510
00:22:47,869 --> 00:22:53,299
now because why not let's write this a

511
00:22:51,650 --> 00:22:58,429
little bit more sensibly we're going to

512
00:22:53,299 --> 00:22:59,389
get rid of all of this right and so what

513
00:22:58,429 --> 00:23:01,940
I'm going to do here is I'm going to

514
00:22:59,390 --> 00:23:03,800
actually I'm going to actually do a gen

515
00:23:01,940 --> 00:23:05,890
frame buffer delete frame buffer kind of

516
00:23:03,799 --> 00:23:09,169
a thing I'm just going to do it that way

517
00:23:05,890 --> 00:23:11,030
in a in a straightforward fashion so

518
00:23:09,170 --> 00:23:13,759
what I want to do is I want to go

519
00:23:11,029 --> 00:23:15,769
through here and and you know go by def

520
00:23:13,759 --> 00:23:17,059
deal basically so I want to say like

521
00:23:15,769 --> 00:23:22,400
depth

522
00:23:17,059 --> 00:23:26,839
peel index equals zero def peel index is

523
00:23:22,400 --> 00:23:31,670
less than the FTL count Def peel index

524
00:23:26,839 --> 00:23:35,359
plus plus and then what I want to do is

525
00:23:31,670 --> 00:23:38,029
basically nuke all this stuff right so I

526
00:23:35,359 --> 00:23:41,449
don't want anything in here at all

527
00:23:38,029 --> 00:23:43,279
anymore because we have the ability to

528
00:23:41,450 --> 00:23:45,559
create a frame buffer now very cleanly

529
00:23:43,279 --> 00:23:51,519
right we can say opengl flame frame

530
00:23:45,559 --> 00:23:55,700
buffer depth field buffer equals create

531
00:23:51,519 --> 00:23:57,139
frame buffer and we can pass the

532
00:23:55,700 --> 00:24:00,019
settings that we want here so we want

533
00:23:57,140 --> 00:24:03,440
the render with the render height and

534
00:24:00,019 --> 00:24:11,299
then we want depth geo flags now the

535
00:24:03,440 --> 00:24:13,250
depth peel flags we know at least are

536
00:24:11,299 --> 00:24:14,720
going to be OpenGL frame buffer color

537
00:24:13,250 --> 00:24:16,940
but we also know that we're going to

538
00:24:14,720 --> 00:24:19,610
need gaps right so then the only

539
00:24:16,940 --> 00:24:21,320
question is do we need multi sampling so

540
00:24:19,609 --> 00:24:23,179
now what we want to do is again use the

541
00:24:21,319 --> 00:24:26,419
settings that we got and say you know

542
00:24:23,180 --> 00:24:29,660
what's the multi sampling hint if the

543
00:24:26,420 --> 00:24:33,800
multi sampling it is set and maybe I'll

544
00:24:29,660 --> 00:24:35,750
do this so that we know one way or the

545
00:24:33,799 --> 00:24:38,809
other if we're going to try to do multi

546
00:24:35,750 --> 00:24:40,130
sampling then I'll say and maybe even go

547
00:24:38,809 --> 00:24:41,869
a little bit further and say there'll be

548
00:24:40,130 --> 00:24:44,000
a permanent thing that says on the Open

549
00:24:41,869 --> 00:24:47,029
GL structure if we're doing multi

550
00:24:44,000 --> 00:24:54,410
sampling then the depth peel flags are

551
00:24:47,029 --> 00:24:55,879
going to have multi sampling board in so

552
00:24:54,410 --> 00:24:57,320
there you can see it's like okay I'm

553
00:24:55,880 --> 00:24:59,360
starting to build up something which

554
00:24:57,319 --> 00:25:00,980
essentially says we're to check the

555
00:24:59,359 --> 00:25:02,599
settings we cheated a settings change

556
00:25:00,980 --> 00:25:04,220
we're going to lie creep repair OpenGL

557
00:25:02,599 --> 00:25:06,619
we're going to do that by sort of like

558
00:25:04,220 --> 00:25:10,069
progressively figuring out what we can

559
00:25:06,619 --> 00:25:11,750
and can't do here so we have open jail

560
00:25:10,069 --> 00:25:15,740
multi sampling and for now we'll just

561
00:25:11,750 --> 00:25:18,259
set that to be whatever the multiple

562
00:25:15,740 --> 00:25:20,509
hint is right but in the future probably

563
00:25:18,259 --> 00:25:22,490
what we'll do is we'll only turn that on

564
00:25:20,509 --> 00:25:26,259
if the card actually supports multi

565
00:25:22,490 --> 00:25:26,259
sampling etc etc

566
00:25:26,519 --> 00:25:34,410
so one other thing that we want here is

567
00:25:28,619 --> 00:25:36,509
in our settings pixelation hint

568
00:25:34,410 --> 00:25:38,820
and so pixelation hint is basically this

569
00:25:36,509 --> 00:25:40,259
part right here because we had that fun

570
00:25:38,819 --> 00:25:42,629
funny effect which is like we want

571
00:25:40,259 --> 00:25:44,220
things to be pixelated so we might as

572
00:25:42,630 --> 00:25:45,480
well support that because again since we

573
00:25:44,220 --> 00:25:46,679
have render settings now we might as

574
00:25:45,480 --> 00:25:49,230
well just throw a few things in there

575
00:25:46,679 --> 00:25:51,450
that we might want and so what I'm going

576
00:25:49,230 --> 00:25:54,120
to do is say there's the resolve flags

577
00:25:51,450 --> 00:25:58,049
and the resolve flags are going to be

578
00:25:54,119 --> 00:26:01,039
these flags but we're going to predicate

579
00:25:58,049 --> 00:26:05,609
again just like we did before that

580
00:26:01,039 --> 00:26:08,460
secondary part which is whether or not

581
00:26:05,609 --> 00:26:13,789
we do filtering what we want to do is

582
00:26:08,460 --> 00:26:13,789
say well if there's a pixelation hint

583
00:26:15,679 --> 00:26:19,350
we'll use it and now we don't want to do

584
00:26:18,119 --> 00:26:21,089
this in the affirmative we want to in

585
00:26:19,349 --> 00:26:23,909
the negative because if we're trying to

586
00:26:21,089 --> 00:26:26,399
pixelate then we don't want to filter

587
00:26:23,910 --> 00:26:28,740
right so if we're not trying to pixelate

588
00:26:26,400 --> 00:26:38,730
then we do want to filter right so

589
00:26:28,740 --> 00:26:41,130
that's you know how that goes okay so

590
00:26:38,730 --> 00:26:42,630
off we go we've got the render width and

591
00:26:41,130 --> 00:26:44,490
render height here those are doing their

592
00:26:42,630 --> 00:26:46,800
thing that we've got the frame buffer

593
00:26:44,490 --> 00:26:49,620
resolve stuff going on here that's doing

594
00:26:46,799 --> 00:26:51,779
its thing and we just need to pass the

595
00:26:49,619 --> 00:26:54,808
resolve flags instead of the hard-coded

596
00:26:51,779 --> 00:26:56,970
flags like before now we just need to

597
00:26:54,808 --> 00:26:59,339
put that global resolve frame buffer

598
00:26:56,970 --> 00:27:00,450
somewhere a little bit more logical so

599
00:26:59,339 --> 00:27:02,039
where we're going to put that is we're

600
00:27:00,450 --> 00:27:06,390
going to say there's an open GL resolve

601
00:27:02,039 --> 00:27:09,170
buffer and that's all there is to that

602
00:27:06,390 --> 00:27:09,170
right

603
00:27:15,490 --> 00:27:25,450
so here's kind of like our peeling I

604
00:27:22,599 --> 00:27:27,168
should say our peeling this is our

605
00:27:25,450 --> 00:27:29,090
decrypting like we're turning the

606
00:27:27,169 --> 00:27:31,340
settings in the stuff we can use

607
00:27:29,089 --> 00:27:34,308
then we'll compile our programs create

608
00:27:31,339 --> 00:27:36,709
our frame buffer and create our depth

609
00:27:34,308 --> 00:27:42,759
buffer our deputy of frame buffers as

610
00:27:36,710 --> 00:27:42,759
well I'm going to rid of all of this

611
00:27:46,869 --> 00:27:50,119
because now that look at how much

612
00:27:48,769 --> 00:27:53,480
cleaner that is now right

613
00:27:50,119 --> 00:27:54,888
looking really good so you know we're

614
00:27:53,480 --> 00:27:57,079
starting to get they're starting to look

615
00:27:54,888 --> 00:27:59,209
better we need to figure out what that

616
00:27:57,079 --> 00:28:00,949
def peel camp is and so at the moment

617
00:27:59,210 --> 00:28:06,169
what we can do is just say well the DES

618
00:28:00,950 --> 00:28:08,210
peel count is going to be set by that

619
00:28:06,169 --> 00:28:13,370
depth peel count here so again just

620
00:28:08,210 --> 00:28:15,350
taking it direct for now okay so then

621
00:28:13,369 --> 00:28:17,839
we've got our all of our stuff here

622
00:28:15,349 --> 00:28:19,699
looking pretty good we probably need to

623
00:28:17,839 --> 00:28:23,178
save that def field count right that

624
00:28:19,700 --> 00:28:25,100
needs to be recorded and so maybe what I

625
00:28:23,179 --> 00:28:27,320
can do here is just set that directly

626
00:28:25,099 --> 00:28:28,849
for the Open GL thing as many of those

627
00:28:27,319 --> 00:28:34,730
as I can do directly in there probably

628
00:28:28,849 --> 00:28:37,839
is a good idea right and yeah that all

629
00:28:34,730 --> 00:28:40,909
seems pretty good I don't see anything

630
00:28:37,839 --> 00:28:47,839
else that's particularly onerous there

631
00:28:40,909 --> 00:28:49,519
and yeah so that seems pretty good and

632
00:28:47,839 --> 00:28:51,408
this way too like I said now that we're

633
00:28:49,519 --> 00:28:53,538
compiling these programs if we find and

634
00:28:51,409 --> 00:28:56,778
we may if we find that we need to do

635
00:28:53,538 --> 00:29:00,980
something extra here in the shaders

636
00:28:56,778 --> 00:29:03,859
themselves as far as you know being able

637
00:29:00,980 --> 00:29:06,230
to handle multi sampling by switching

638
00:29:03,859 --> 00:29:08,119
what kind of shader well just a little

639
00:29:06,230 --> 00:29:09,528
tiny things in our shader code it's nice

640
00:29:08,119 --> 00:29:13,428
to have the ability to pass parameters

641
00:29:09,528 --> 00:29:14,690
to the compilation of our shaders right

642
00:29:13,429 --> 00:29:16,548
at the times when we know what our

643
00:29:14,690 --> 00:29:18,350
settings are rather than having to sort

644
00:29:16,548 --> 00:29:19,788
of deal with that dynamically and

645
00:29:18,349 --> 00:29:21,230
potentially compile lots of shaders and

646
00:29:19,788 --> 00:29:22,908
only use one of them or something like

647
00:29:21,230 --> 00:29:24,769
this this way we know we're just

648
00:29:22,909 --> 00:29:26,020
compiling one set and we can fully

649
00:29:24,769 --> 00:29:30,130
customize them

650
00:29:26,019 --> 00:29:34,960
in any way that we want all right so now

651
00:29:30,130 --> 00:29:36,610
we just have to store these and so what

652
00:29:34,960 --> 00:29:40,210
I'll do is say the depth field buffer

653
00:29:36,609 --> 00:29:43,178
here is going to be parametrized like so

654
00:29:40,210 --> 00:29:45,610
and the other thing I'll do is I'll say

655
00:29:43,179 --> 00:29:48,790
well you know the depth field hint can't

656
00:29:45,609 --> 00:29:51,969
be higher than a certain number right so

657
00:29:48,789 --> 00:29:54,220
we'll just say like in this case you

658
00:29:51,970 --> 00:29:55,600
know the depth field count or well we

659
00:29:54,220 --> 00:29:57,700
might even cap it we'll just say if the

660
00:29:55,599 --> 00:30:00,089
depth field count is higher than however

661
00:29:57,700 --> 00:30:02,769
many we're saying the max is going to be

662
00:30:00,089 --> 00:30:05,799
for OpenGL which is maybe like eight or

663
00:30:02,769 --> 00:30:10,420
something or 16 which is absurd like but

664
00:30:05,799 --> 00:30:11,740
hey you know you could do it we just say

665
00:30:10,420 --> 00:30:14,500
at that point you really should be using

666
00:30:11,740 --> 00:30:15,849
Atomics probably but you know neither

667
00:30:14,500 --> 00:30:19,329
here nor there we could do an atomic

668
00:30:15,849 --> 00:30:20,709
spaz someday maybe we should I don't

669
00:30:19,329 --> 00:30:23,500
know if this card even supports comics

670
00:30:20,710 --> 00:30:26,110
but we could do it when I move to a more

671
00:30:23,500 --> 00:30:28,750
modern machine certainly so we have DES

672
00:30:26,109 --> 00:30:31,149
field count and we're just checking to

673
00:30:28,750 --> 00:30:34,660
see if the death peel count is too large

674
00:30:31,150 --> 00:30:36,700
then I'll just cap it right so I'll say

675
00:30:34,660 --> 00:30:38,500
if the DEF peel count exceeds how many

676
00:30:36,700 --> 00:30:41,410
the maximum is going to be for OpenGL

677
00:30:38,500 --> 00:30:43,779
then we'll cap that right there and

678
00:30:41,410 --> 00:30:45,880
that'll be the end of it so now we can

679
00:30:43,779 --> 00:30:53,289
sort of imply what we're what we should

680
00:30:45,880 --> 00:30:55,600
have over here for our for for what the

681
00:30:53,289 --> 00:30:58,450
settings should be right and what our

682
00:30:55,599 --> 00:31:00,099
storage should be so you can kind of see

683
00:30:58,450 --> 00:31:02,110
here we've got our programs that's not

684
00:31:00,099 --> 00:31:03,189
going to change the texture format all

685
00:31:02,109 --> 00:31:04,990
that stuff that's all not going to

686
00:31:03,190 --> 00:31:06,730
change but we now have sort of another

687
00:31:04,990 --> 00:31:08,980
set of things here that can sort of

688
00:31:06,730 --> 00:31:13,000
float around we've got weather Multi

689
00:31:08,980 --> 00:31:18,210
sampling is on we've got how many depth

690
00:31:13,000 --> 00:31:21,339
keels we're going to do and we also have

691
00:31:18,210 --> 00:31:25,750
one more thing if I remember correctly

692
00:31:21,339 --> 00:31:28,409
which is where is it I thought we had

693
00:31:25,750 --> 00:31:29,859
one more open tilting but now we don't I

694
00:31:28,410 --> 00:31:31,029
take it back

695
00:31:29,859 --> 00:31:32,740
all right so that's all we really need

696
00:31:31,029 --> 00:31:34,269
to know how many def skills were doing

697
00:31:32,740 --> 00:31:36,339
and are we multi sampling those know

698
00:31:34,269 --> 00:31:38,650
things that really persist then we've

699
00:31:36,339 --> 00:31:41,769
got the resolved frame buffer

700
00:31:38,650 --> 00:31:46,230
which is OpenGL frame buffer oops and

701
00:31:41,769 --> 00:31:48,759
we've got the depth field buffer and

702
00:31:46,230 --> 00:31:51,910
that let's just say you can set it up to

703
00:31:48,759 --> 00:31:53,079
16 because why not that's ridiculous but

704
00:31:51,910 --> 00:31:54,820
I'm sure there's cards that could do it

705
00:31:53,079 --> 00:31:56,049
easily especially if we switch to a

706
00:31:54,819 --> 00:31:57,250
texture Atlas in the future

707
00:31:56,049 --> 00:32:00,129
I'm sure there's cars that would eat

708
00:31:57,250 --> 00:32:02,140
that for breakfast because 16 times over

709
00:32:00,130 --> 00:32:04,330
pass with the kind of loads we're

710
00:32:02,140 --> 00:32:08,740
passing it these cards and monsters

711
00:32:04,329 --> 00:32:12,779
these days you know you get some SLI

712
00:32:08,740 --> 00:32:15,130
configuration with a you know big beefy

713
00:32:12,779 --> 00:32:23,470
23 power connector is kind of a card and

714
00:32:15,130 --> 00:32:24,670
these things can render anything I mean

715
00:32:23,470 --> 00:32:26,940
they can't run the Windows 10 desktop

716
00:32:24,670 --> 00:32:29,350
without frame hitches of course because

717
00:32:26,940 --> 00:32:31,570
no one's ever built a machine that can

718
00:32:29,349 --> 00:32:33,069
do that but they can render any game you

719
00:32:31,569 --> 00:32:35,259
might throw at them because you know

720
00:32:33,069 --> 00:32:37,000
what's a game certainly not as hard as

721
00:32:35,259 --> 00:32:39,940
drawing some colored tiles with like 5

722
00:32:37,000 --> 00:32:42,910
fonts on them anyway let's go ahead and

723
00:32:39,940 --> 00:32:46,980
and get this work in here because we've

724
00:32:42,910 --> 00:32:50,740
made a lot of substantial changes so

725
00:32:46,980 --> 00:32:52,779
what is this complaining about a sub

726
00:32:50,740 --> 00:32:58,089
script array required blah blah blah

727
00:32:52,779 --> 00:32:59,789
blah blah I think we just are missing a

728
00:32:58,089 --> 00:33:02,109
semicolon is really all that was about

729
00:32:59,789 --> 00:33:03,609
yeah ok I missed the initial error

730
00:33:02,109 --> 00:33:06,659
that's why so it requires a ray or

731
00:33:03,609 --> 00:33:09,579
pointer type that is probably true that

732
00:33:06,660 --> 00:33:11,740
is not what I meant to put there and

733
00:33:09,579 --> 00:33:13,089
then to put that I just can't take the

734
00:33:11,740 --> 00:33:14,380
array count of a boolean doesn't make

735
00:33:13,089 --> 00:33:16,119
any sense

736
00:33:14,380 --> 00:33:18,430
so now we need to have this settings has

737
00:33:16,119 --> 00:33:20,019
changed function and this is obviously

738
00:33:18,430 --> 00:33:23,080
something that's kind of shared right

739
00:33:20,019 --> 00:33:24,970
it's it's something that would be part

740
00:33:23,079 --> 00:33:26,619
of the platform layer probably and I

741
00:33:24,970 --> 00:33:29,140
don't know exactly where we want to put

742
00:33:26,619 --> 00:33:31,329
it I can put it in here for now but we

743
00:33:29,140 --> 00:33:33,670
could move it really anywhere but it has

744
00:33:31,329 --> 00:33:36,609
to be accessible to everybody because

745
00:33:33,670 --> 00:33:37,870
it's you know it's a generic sort of

746
00:33:36,609 --> 00:33:43,689
thing that any of the renderers might

747
00:33:37,869 --> 00:33:46,839
want to use what I might do is just say

748
00:33:43,690 --> 00:33:48,940
are equal and so that way you can just

749
00:33:46,839 --> 00:33:52,349
say like are these two things equal so

750
00:33:48,940 --> 00:33:52,350
I'll just say like if they're not equal

751
00:33:54,549 --> 00:33:58,930
[Applause]

752
00:33:56,339 --> 00:34:00,309
so if I want to see if these two things

753
00:33:58,930 --> 00:34:01,750
are equal then I'm going to generate a

754
00:34:00,309 --> 00:34:02,589
result that just is basically the

755
00:34:01,750 --> 00:34:08,349
comparison oops

756
00:34:02,589 --> 00:34:09,759
of all the things in them I don't know

757
00:34:08,349 --> 00:34:12,460
what I'm looking at here but I can't

758
00:34:09,760 --> 00:34:16,740
apparently kill this buffer don't know

759
00:34:12,460 --> 00:34:31,418
what buffer it even is that's fine so

760
00:34:16,739 --> 00:34:34,719
let me just finish this up here oops so

761
00:34:31,418 --> 00:34:37,569
there's the settings change and in here

762
00:34:34,719 --> 00:34:41,199
I just now need that platform layer oh I

763
00:34:37,570 --> 00:34:42,929
see I created a platform that CPP file I

764
00:34:41,199 --> 00:34:46,029
guess I don't know what happened there

765
00:34:42,929 --> 00:34:47,530
anyway it doesn't matter don't care as

766
00:34:46,030 --> 00:34:50,230
long as I can keep programming I'm fine

767
00:34:47,530 --> 00:34:51,669
so here we are in our equal and what I

768
00:34:50,230 --> 00:34:53,980
want to do here is just take a look at

769
00:34:51,668 --> 00:34:56,559
what those settings are and make sure

770
00:34:53,980 --> 00:34:58,630
that compare them all right so we've got

771
00:34:56,559 --> 00:35:02,650
that multi sampling can't width the

772
00:34:58,630 --> 00:35:04,869
height so here they all are down so I

773
00:35:02,650 --> 00:35:09,550
just want to see basically if a width

774
00:35:04,869 --> 00:35:12,130
equals B width and this is just going to

775
00:35:09,550 --> 00:35:18,490
be this the whole way down right it's

776
00:35:12,130 --> 00:35:24,309
just going to be a a B like that okay

777
00:35:18,489 --> 00:35:25,839
and this by the way is like just you

778
00:35:24,309 --> 00:35:27,519
know I'll just point this out because I

779
00:35:25,840 --> 00:35:29,079
don't know it might not be obvious to

780
00:35:27,519 --> 00:35:32,860
people or maybe it is obvious to people

781
00:35:29,079 --> 00:35:35,110
but you know a lot of times I complain

782
00:35:32,860 --> 00:35:39,280
about the C++ Standards Committee as you

783
00:35:35,110 --> 00:35:40,360
know and you know so sometimes I feel

784
00:35:39,280 --> 00:35:41,530
like I should make that more concrete

785
00:35:40,360 --> 00:35:42,880
and so when things come up in

786
00:35:41,530 --> 00:35:45,340
programming I'll just I'll just explain

787
00:35:42,880 --> 00:35:47,890
them so let me let me give you an

788
00:35:45,340 --> 00:35:50,440
example of kind of classic how the C++

789
00:35:47,889 --> 00:35:52,539
standards committee over decades always

790
00:35:50,440 --> 00:35:54,849
fails to grasp like the fundamental

791
00:35:52,539 --> 00:35:57,849
concepts of how a programming language

792
00:35:54,849 --> 00:36:01,000
should work so take a look at what I

793
00:35:57,849 --> 00:36:05,019
just wrote there right what I wrote

794
00:36:01,000 --> 00:36:07,269
there was iterating in my mind over

795
00:36:05,019 --> 00:36:09,759
the elements of this structure and I

796
00:36:07,269 --> 00:36:12,009
just wanted to do the equals operator on

797
00:36:09,760 --> 00:36:14,890
each of them right that's what I wanted

798
00:36:12,010 --> 00:36:16,960
to do so suppose you are a language

799
00:36:14,889 --> 00:36:20,099
designer and you're looking at this

800
00:36:16,960 --> 00:36:22,869
problem the way the C++ editor many

801
00:36:20,099 --> 00:36:25,269
universally in every single instance

802
00:36:22,869 --> 00:36:28,599
they have ever encountered for any

803
00:36:25,269 --> 00:36:30,909
purpose and I mean that 100% literally

804
00:36:28,599 --> 00:36:34,630
the way they choose to solve this

805
00:36:30,909 --> 00:36:37,389
problem is I go oh it looks like there's

806
00:36:34,630 --> 00:36:39,970
this concept that people might want to

807
00:36:37,389 --> 00:36:43,179
compare to structs to each other

808
00:36:39,969 --> 00:36:46,239
so let's introduce a bunch of rules for

809
00:36:43,179 --> 00:36:49,750
how if you wanted to make the compiler

810
00:36:46,239 --> 00:36:51,969
generate an automatic operator equals to

811
00:36:49,750 --> 00:36:54,519
each other you know where one struck

812
00:36:51,969 --> 00:36:56,409
equals another struct let's let's figure

813
00:36:54,519 --> 00:36:58,150
out a way to do that right and they

814
00:36:56,409 --> 00:37:00,039
write this big long complex thing that

815
00:36:58,150 --> 00:37:01,930
tries to handle all these edge cases and

816
00:37:00,039 --> 00:37:04,150
they they battle with each other over

817
00:37:01,929 --> 00:37:06,099
like these edge cases about which way

818
00:37:04,150 --> 00:37:07,990
should the operator equals automatic

819
00:37:06,099 --> 00:37:10,059
generator for the game render settings

820
00:37:07,989 --> 00:37:11,769
but you know force trucks or classes

821
00:37:10,059 --> 00:37:13,570
work and what happens if things are

822
00:37:11,769 --> 00:37:15,070
private and what happens in this case in

823
00:37:13,570 --> 00:37:20,590
that case and virtual functions an i

824
00:37:15,070 --> 00:37:23,200
right but that completely misunderstands

825
00:37:20,590 --> 00:37:26,380
the fundamental operation of programming

826
00:37:23,199 --> 00:37:27,879
at no time in anyone's head when they

827
00:37:26,380 --> 00:37:32,050
were programming did they think about

828
00:37:27,880 --> 00:37:34,990
this as automatic operator equals what

829
00:37:32,050 --> 00:37:37,900
they thought was I want to compare each

830
00:37:34,989 --> 00:37:47,589
element of this structure so what it's

831
00:37:37,900 --> 00:37:49,420
supposed to look like is this right it's

832
00:37:47,590 --> 00:37:54,250
supposed to look like this and I'm just

833
00:37:49,420 --> 00:37:56,079
making up a syntax here right something

834
00:37:54,250 --> 00:37:59,219
like this right I don't know what you

835
00:37:56,079 --> 00:38:04,349
would put here or like for each member

836
00:37:59,219 --> 00:38:04,349
something like that right I don't know

837
00:38:14,590 --> 00:38:22,430
something like this right and I'm going

838
00:38:20,840 --> 00:38:25,010
to connect for each ear for each member

839
00:38:22,429 --> 00:38:27,559
of the structure I want to do the

840
00:38:25,010 --> 00:38:31,870
operator equals right I want to do a

841
00:38:27,559 --> 00:38:33,159
member eaqubs B member and I want to say

842
00:38:31,869 --> 00:38:35,420
[Applause]

843
00:38:33,159 --> 00:38:39,519
you know if they're not equal or I want

844
00:38:35,420 --> 00:38:43,159
to say if there's not this turns false

845
00:38:39,519 --> 00:38:47,809
return true that's what I was trying to

846
00:38:43,159 --> 00:38:49,670
write and by misunderstanding what the

847
00:38:47,809 --> 00:38:51,349
programmers grain should be doing at

848
00:38:49,670 --> 00:38:53,750
that time and instead thinking of how

849
00:38:51,349 --> 00:38:55,639
the language can automate a specific

850
00:38:53,750 --> 00:38:58,400
instance they missed the fact that

851
00:38:55,639 --> 00:39:02,389
writing this if you just have the

852
00:38:58,400 --> 00:39:06,050
language support that you now support

853
00:39:02,389 --> 00:39:09,769
every possible thing that anyone would

854
00:39:06,050 --> 00:39:11,750
ever want to do that has to apply to all

855
00:39:09,769 --> 00:39:13,880
the members of something this can

856
00:39:11,750 --> 00:39:16,010
automatically do the copy thing this can

857
00:39:13,880 --> 00:39:18,170
even automatically do something where

858
00:39:16,010 --> 00:39:20,870
you only wanted to copy some or compare

859
00:39:18,170 --> 00:39:22,700
some right because now I can do stuff

860
00:39:20,869 --> 00:39:24,440
like exclude certain members like all I

861
00:39:22,699 --> 00:39:26,750
have to do is start introducing what the

862
00:39:24,440 --> 00:39:29,030
CPP member thing can do like can I check

863
00:39:26,750 --> 00:39:32,840
its name or can i annotate it with my

864
00:39:29,030 --> 00:39:37,280
own flags right like flag no save right

865
00:39:32,840 --> 00:39:39,410
and then I can just or no compare right

866
00:39:37,280 --> 00:39:40,100
and then I can just in here to say oh

867
00:39:39,409 --> 00:39:45,500
okay

868
00:39:40,099 --> 00:39:50,150
you know if this member if if not a you

869
00:39:45,500 --> 00:39:53,119
know no compare right or whatever and

870
00:39:50,150 --> 00:39:55,460
that lets you build everything that you

871
00:39:53,119 --> 00:39:57,349
want to build but they never get this

872
00:39:55,460 --> 00:39:59,210
and I don't understand why it's like

873
00:39:57,349 --> 00:40:03,349
anyone has been programming for just a

874
00:39:59,210 --> 00:40:06,079
few years should know this and it's so

875
00:40:03,349 --> 00:40:07,880
crazy to me that they can't wrap their

876
00:40:06,079 --> 00:40:09,889
head around it it's like it's the most

877
00:40:07,880 --> 00:40:12,800
foreign concept to them somehow but it's

878
00:40:09,889 --> 00:40:14,989
the most basic concept and I just don't

879
00:40:12,800 --> 00:40:18,080
understand they could get rid of almost

880
00:40:14,989 --> 00:40:20,919
the entire spec that they've written by

881
00:40:18,079 --> 00:40:24,009
just making a few of these things

882
00:40:20,920 --> 00:40:25,210
it would take like ten pages of spec for

883
00:40:24,010 --> 00:40:28,000
me to write something that can generate

884
00:40:25,210 --> 00:40:29,920
everything they do in C++ by just

885
00:40:28,000 --> 00:40:33,929
letting the programmer actually iterate

886
00:40:29,920 --> 00:40:36,039
over the freaking program it's nuts

887
00:40:33,929 --> 00:40:37,779
anyway gets me really worked up because

888
00:40:36,039 --> 00:40:39,940
every day I have to deal with this crap

889
00:40:37,780 --> 00:40:42,160
and I have to write my own routines and

890
00:40:39,940 --> 00:40:45,550
my own preprocessors and all this stuff

891
00:40:42,159 --> 00:40:47,859
and it's like if someone would just get

892
00:40:45,550 --> 00:40:50,230
a clue we would have had all this stuff

893
00:40:47,860 --> 00:40:51,880
like 20 years ago and other languages do

894
00:40:50,230 --> 00:40:54,130
have it it's not like this is something

895
00:40:51,880 --> 00:40:56,079
I'm making up like I'm like some

896
00:40:54,130 --> 00:40:57,910
language design savant who's talking

897
00:40:56,079 --> 00:41:00,549
about things that no one's ever dreamed

898
00:40:57,909 --> 00:41:02,170
of before it's like basic ability to

899
00:41:00,550 --> 00:41:04,510
iterate over the structures of things

900
00:41:02,170 --> 00:41:05,860
and do stuff to them to generate the

901
00:41:04,510 --> 00:41:08,170
code that you want to actually make is

902
00:41:05,860 --> 00:41:09,940
just better program has been around I

903
00:41:08,170 --> 00:41:11,619
don't even know how long since the 70s

904
00:41:09,940 --> 00:41:16,059
probably possibly before then I don't

905
00:41:11,619 --> 00:41:21,460
know it's nuts anyway so I'm still

906
00:41:16,059 --> 00:41:23,920
typing craft like this fantastic

907
00:41:21,460 --> 00:41:29,289
all right so let's see what we've got

908
00:41:23,920 --> 00:41:32,289
here back to you know rant rant over so

909
00:41:29,289 --> 00:41:36,219
here we are we have to now you know

910
00:41:32,289 --> 00:41:38,250
finish up actually you know using these

911
00:41:36,219 --> 00:41:41,559
things the way that I said we were gonna

912
00:41:38,250 --> 00:41:43,300
so now we have to sort of loop over

913
00:41:41,559 --> 00:41:44,409
things in a more intelligent fashion so

914
00:41:43,300 --> 00:41:46,660
what I'm going to do here is say all

915
00:41:44,409 --> 00:41:50,619
right we know that we have depth appeal

916
00:41:46,659 --> 00:41:52,569
count between number of these things we

917
00:41:50,619 --> 00:41:54,130
use render targets is now a program

918
00:41:52,570 --> 00:41:55,510
conclusion where a deputy renderer you

919
00:41:54,130 --> 00:41:57,430
got a sport render targets we just won't

920
00:41:55,510 --> 00:41:59,140
run on cards that don't right and we

921
00:41:57,429 --> 00:42:02,409
could make a special pass in the future

922
00:41:59,139 --> 00:42:04,239
for one that's that only have one but

923
00:42:02,409 --> 00:42:08,259
you know at this point kind of all bets

924
00:42:04,239 --> 00:42:10,809
are off to a certain extent so we want

925
00:42:08,260 --> 00:42:12,460
to set this stuff correctly that last

926
00:42:10,809 --> 00:42:14,860
one the very last one that when the

927
00:42:12,460 --> 00:42:17,789
target index is basically the depth

928
00:42:14,860 --> 00:42:17,789
field count minus one

929
00:42:20,789 --> 00:42:28,289
so here we come doing our clear and then

930
00:42:25,409 --> 00:42:30,210
we're off and we're finished right so we

931
00:42:28,289 --> 00:42:32,010
unbind the frame over that's pretty much

932
00:42:30,210 --> 00:42:34,530
correct now that's really all that needs

933
00:42:32,010 --> 00:42:35,609
to do let's take a look at the rest of

934
00:42:34,530 --> 00:42:36,859
the places we've used make sure to

935
00:42:35,608 --> 00:42:39,449
target notice that those have to change

936
00:42:36,858 --> 00:42:41,098
so now we're doing is we're trying to

937
00:42:39,449 --> 00:42:44,939
see whether or not the peel index is

938
00:42:41,099 --> 00:42:47,460
like the last peel right so when it says

939
00:42:44,940 --> 00:42:52,079
render entry and peels what we need to

940
00:42:47,460 --> 00:42:55,409
do is do here is say okay we want to

941
00:42:52,079 --> 00:42:57,059
know for on the last peel so basically

942
00:42:55,409 --> 00:42:58,980
the max render target index here we

943
00:42:57,059 --> 00:43:08,940
could just make up what it is in fact we

944
00:42:58,980 --> 00:43:10,289
could just do this and in this case we

945
00:43:08,940 --> 00:43:14,309
have to make sure that the DEF peel

946
00:43:10,289 --> 00:43:16,650
count is greater than zero right because

947
00:43:14,309 --> 00:43:18,059
we can't render anything if we don't we

948
00:43:16,650 --> 00:43:19,650
could make the whole thing predicated on

949
00:43:18,059 --> 00:43:20,730
that but doesn't seem very good I think

950
00:43:19,650 --> 00:43:24,960
you just want to prevent people from

951
00:43:20,730 --> 00:43:27,298
ever actually doing that all right so

952
00:43:24,960 --> 00:43:29,778
let's take a look at the render commands

953
00:43:27,298 --> 00:43:29,778
thing here

954
00:43:45,349 --> 00:43:58,349
alright moving on so this is just the

955
00:43:56,429 --> 00:43:59,899
initial ation initialization of that

956
00:43:58,349 --> 00:44:03,680
struct which we'll deal with in a second

957
00:43:59,900 --> 00:44:06,949
okay so I want to skip down to here it

958
00:44:03,679 --> 00:44:06,948
[Applause]

959
00:44:09,469 --> 00:44:21,029
again just pulling out settings

960
00:44:11,940 --> 00:44:22,380
everywhere okay so now we're down to

961
00:44:21,030 --> 00:44:23,640
just the fact that this has to get

962
00:44:22,380 --> 00:44:25,650
initialized summer and we have this

963
00:44:23,639 --> 00:44:29,190
super crappy macro for it I do not know

964
00:44:25,650 --> 00:44:31,108
why we have a macro for it to be honest

965
00:44:29,190 --> 00:44:37,039
I don't know why it's not just a struct

966
00:44:31,108 --> 00:44:40,769
that is sort of perplexing to me and I

967
00:44:37,039 --> 00:44:41,910
do not know why we have that so what I'm

968
00:44:40,769 --> 00:44:45,480
going to do is I'm going to change this

969
00:44:41,909 --> 00:44:47,338
to not be a struct because I don't see

970
00:44:45,480 --> 00:44:49,889
any reason for it to be a struct so

971
00:44:47,338 --> 00:44:53,190
instead what I'm going to do is do

972
00:44:49,889 --> 00:44:54,629
default render commands like so and I'm

973
00:44:53,190 --> 00:45:01,650
just going to make this be an inline

974
00:44:54,630 --> 00:45:04,440
function like I would normally do maybe

975
00:45:01,650 --> 00:45:06,778
there was some platform compatibility

976
00:45:04,440 --> 00:45:12,000
thing I know at one point some folks

977
00:45:06,778 --> 00:45:14,639
were like actually doing this compiling

978
00:45:12,000 --> 00:45:17,429
handmade hero in like what's that

979
00:45:14,639 --> 00:45:20,278
Appling Swift I think or something like

980
00:45:17,429 --> 00:45:21,899
this and so I don't know there were some

981
00:45:20,278 --> 00:45:24,380
weird things we did to make sure that

982
00:45:21,900 --> 00:45:31,559
they could do stuff I think I don't know

983
00:45:24,380 --> 00:45:36,410
I just I seem to recall this alright

984
00:45:31,559 --> 00:45:36,410
I so let's go ahead and

985
00:45:38,690 --> 00:45:56,579
just initialize these things and I don't

986
00:45:54,059 --> 00:46:06,840
really know so we actually these are

987
00:45:56,579 --> 00:46:15,000
just things come through just let the

988
00:46:06,840 --> 00:46:18,329
push buffer so I really don't think

989
00:46:15,000 --> 00:46:26,699
there's anything special to do here and

990
00:46:18,329 --> 00:46:52,590
then we've got I'm literally doing

991
00:46:26,699 --> 00:47:00,449
nothing here right I'm just so that

992
00:46:52,590 --> 00:47:05,900
seems good there right the weird thing

993
00:47:00,449 --> 00:47:05,899
about this is this is done every time

994
00:47:07,130 --> 00:47:22,710
which I can't say I know why we're doing

995
00:47:13,559 --> 00:47:25,619
that right like we don't really need to

996
00:47:22,710 --> 00:47:27,150
initialize this every time at most all

997
00:47:25,619 --> 00:47:30,509
we would have to do is change a few

998
00:47:27,150 --> 00:47:33,720
values so it seems a little bit strange

999
00:47:30,510 --> 00:47:35,510
that we're doing that way it's possible

1000
00:47:33,719 --> 00:47:37,919
that we might need to make some

1001
00:47:35,510 --> 00:47:39,560
affordances for having this be different

1002
00:47:37,920 --> 00:47:41,550
depending on whether or not we're using

1003
00:47:39,559 --> 00:47:43,980
hardware or software rendering in the

1004
00:47:41,550 --> 00:47:50,300
future but at the moment I don't really

1005
00:47:43,980 --> 00:47:52,340
know anything in particular that really

1006
00:47:50,300 --> 00:47:56,460
has

1007
00:47:52,340 --> 00:47:58,880
any effect here like you know I don't I

1008
00:47:56,460 --> 00:48:10,559
don't know why this couldn't just be

1009
00:47:58,880 --> 00:48:12,660
pulled out to something further out like

1010
00:48:10,559 --> 00:48:15,719
I don't see any particular reason that

1011
00:48:12,659 --> 00:48:33,989
this has to be inside the run loop you

1012
00:48:15,719 --> 00:48:42,659
know what I mean so I think we can

1013
00:48:33,989 --> 00:48:44,339
pretty much just do it right here all

1014
00:48:42,659 --> 00:48:46,949
right so now we just need to actually

1015
00:48:44,340 --> 00:48:51,300
pass something you know reasonable

1016
00:48:46,949 --> 00:48:53,219
parameter for this stuff so can let's

1017
00:48:51,300 --> 00:49:02,100
just go ahead and do so

1018
00:48:53,219 --> 00:49:07,119
we have width and height we have the max

1019
00:49:02,099 --> 00:49:09,110
vertex count and the vertex array and

1020
00:49:07,119 --> 00:49:14,909
[Music]

1021
00:49:09,110 --> 00:49:16,260
the bitmap array and the white bitmap at

1022
00:49:14,909 --> 00:49:20,069
the moment those are the things that the

1023
00:49:16,260 --> 00:49:29,820
platform actually does supply to us and

1024
00:49:20,070 --> 00:49:33,180
these are settings to do and this is X

1025
00:49:29,820 --> 00:49:35,900
with Max Plus buffer size and

1026
00:49:33,179 --> 00:49:35,899
Christopher beige

1027
00:49:38,369 --> 00:49:45,660
push buffer data ads that's what and say

1028
00:49:42,679 --> 00:49:49,118
[Applause]

1029
00:49:45,659 --> 00:49:51,489
and so that clear color I guess we can

1030
00:49:49,119 --> 00:49:58,559
just if we don't have the v4 creator

1031
00:49:51,489 --> 00:49:58,559
there what I can do is say zero like so

1032
00:50:00,510 --> 00:50:04,900
and then in here when we do a push set

1033
00:50:03,039 --> 00:50:08,279
up the max render target index is not

1034
00:50:04,900 --> 00:50:08,280
something that's getting tracked anymore

1035
00:50:11,579 --> 00:50:21,119
and so for render commands yeah we don't

1036
00:50:18,309 --> 00:50:21,119
support this anymore

1037
00:50:27,690 --> 00:50:35,559
someday we will okay

1038
00:50:33,369 --> 00:50:37,240
oh I guess I was a little bit aggressive

1039
00:50:35,559 --> 00:50:38,949
there where's the push buffer sighs

1040
00:50:37,239 --> 00:50:40,809
there it is so here's the thing that

1041
00:50:38,949 --> 00:50:42,339
actually creates those so we do have to

1042
00:50:40,809 --> 00:50:43,840
wait till there to create it because we

1043
00:50:42,340 --> 00:50:52,358
haven't made the memory for it yet but

1044
00:50:43,840 --> 00:50:55,180
that's all good and do I have the right

1045
00:50:52,358 --> 00:50:58,210
parameters to this saucy gentleman right

1046
00:50:55,179 --> 00:51:00,250
here push buffer size push buffer width

1047
00:50:58,210 --> 00:51:02,679
and height max per tom skerritt four

1048
00:51:00,250 --> 00:51:11,500
ticks or a bitmap array like bitmap so

1049
00:51:02,679 --> 00:51:13,118
that does look that loops here we go

1050
00:51:11,500 --> 00:51:15,519
so now in theory that should be getting

1051
00:51:13,119 --> 00:51:18,430
passed correctly to the OpenGL subsystem

1052
00:51:15,519 --> 00:51:20,619
I hope when we actually do pass it to

1053
00:51:18,429 --> 00:51:23,710
the OpenGL subsystem again in theory

1054
00:51:20,619 --> 00:51:25,480
what should happen here is that the

1055
00:51:23,710 --> 00:51:27,809
first time through it's going to just

1056
00:51:25,480 --> 00:51:30,490
test to see whether or not these two

1057
00:51:27,809 --> 00:51:38,440
structures have the exact same contents

1058
00:51:30,489 --> 00:51:40,500
you know or not and assuming they do

1059
00:51:38,440 --> 00:51:42,579
have the same content

1060
00:51:40,500 --> 00:51:44,469
we're just suppose if we wanted to duck

1061
00:51:42,579 --> 00:51:45,969
the C++ sanity all together in this case

1062
00:51:44,469 --> 00:51:47,679
since we care about every last little

1063
00:51:45,969 --> 00:51:50,459
thing being equal we could just do a mem

1064
00:51:47,679 --> 00:51:52,659
compare here but you know

1065
00:51:50,460 --> 00:51:54,099
that's that's just luck because we

1066
00:51:52,659 --> 00:52:00,038
happen to want to compare actually

1067
00:51:54,099 --> 00:52:03,180
everything so then we want to do is say

1068
00:52:00,039 --> 00:52:05,230
okay opens you'll prepare for settings

1069
00:52:03,179 --> 00:52:07,179
go through here make sure we set

1070
00:52:05,230 --> 00:52:08,858
everything correctly compile our

1071
00:52:07,179 --> 00:52:10,899
programs create our frame buffers and

1072
00:52:08,858 --> 00:52:13,179
then in theory we should be ready to go

1073
00:52:10,900 --> 00:52:14,950
now we still have some vestigial remains

1074
00:52:13,179 --> 00:52:17,768
sure that we have to move out because

1075
00:52:14,949 --> 00:52:21,548
we're still using this nonsense here

1076
00:52:17,768 --> 00:52:23,949
right this open jail frame buffer a sort

1077
00:52:21,548 --> 00:52:25,748
of gunk that we have and we don't really

1078
00:52:23,949 --> 00:52:28,088
want that to be happening right we don't

1079
00:52:25,748 --> 00:52:29,679
want any of these things anymore so we

1080
00:52:28,088 --> 00:52:31,900
need to delete all of this and then we

1081
00:52:29,679 --> 00:52:36,308
need to make this stuff work without any

1082
00:52:31,900 --> 00:52:38,079
of that right so now what we want to do

1083
00:52:36,309 --> 00:52:39,999
is we want to take a look at the places

1084
00:52:38,079 --> 00:52:41,528
where we're actually using this sort of

1085
00:52:39,998 --> 00:52:44,139
stuff and make sure that we have you

1086
00:52:41,528 --> 00:52:46,210
know some some handle on what's going on

1087
00:52:44,139 --> 00:52:48,278
so here we're trying to bind a texture

1088
00:52:46,210 --> 00:52:50,349
from the Deaf peel frame buffers right

1089
00:52:48,278 --> 00:52:53,969
well we can do that pretty easily right

1090
00:52:50,349 --> 00:52:56,619
because we know we've got the Deaf peel

1091
00:52:53,969 --> 00:52:58,088
buffers in our opengl struck and we know

1092
00:52:56,619 --> 00:52:59,829
in this case we're just trying to load

1093
00:52:58,088 --> 00:53:03,460
oops we're just trying to load a depth

1094
00:52:59,829 --> 00:53:04,839
buffer out of one of these right so we

1095
00:53:03,460 --> 00:53:06,009
just want to set the death buffer and

1096
00:53:04,838 --> 00:53:07,900
say hey we're going to grab the death

1097
00:53:06,009 --> 00:53:08,440
buffer out of this off we go it's no big

1098
00:53:07,900 --> 00:53:12,160
deal

1099
00:53:08,440 --> 00:53:13,420
everyone's you know everyone relax we

1100
00:53:12,159 --> 00:53:14,318
don't want to deal with that function

1101
00:53:13,420 --> 00:53:17,700
just yet

1102
00:53:14,318 --> 00:53:20,369
let me see here def does not is it depth

1103
00:53:17,699 --> 00:53:26,189
texture what is it

1104
00:53:20,369 --> 00:53:28,390
oops it's going to be in here yup handle

1105
00:53:26,190 --> 00:53:31,509
so it passed the DEF handle there so

1106
00:53:28,389 --> 00:53:33,098
that gets found then we have here the

1107
00:53:31,509 --> 00:53:41,199
steel to our frame before global resolve

1108
00:53:33,099 --> 00:53:46,980
frame buffer undeclared let's see the

1109
00:53:41,199 --> 00:53:55,028
whole frame buffer is second GL solve

1110
00:53:46,980 --> 00:53:57,219
frame buffer dot frame buffer handle and

1111
00:53:55,028 --> 00:53:59,768
here we're binding those peels these are

1112
00:53:57,219 --> 00:54:03,088
the color textures for the peels so what

1113
00:53:59,768 --> 00:54:03,088
we want here is OpenGL

1114
00:54:04,639 --> 00:54:15,199
dusty'll buffer and we want the color

1115
00:54:09,108 --> 00:54:16,578
handle then we've just got that we're

1116
00:54:15,199 --> 00:54:20,449
going to ignore that for one second and

1117
00:54:16,579 --> 00:54:27,950
this so here we do OpenGL resolve frame

1118
00:54:20,449 --> 00:54:29,750
buffer color handle and we're just down

1119
00:54:27,949 --> 00:54:36,259
to this so I'm going to look at where

1120
00:54:29,750 --> 00:54:39,409
bind frame buffer happens and what we're

1121
00:54:36,260 --> 00:54:41,240
actually passing here so in all these

1122
00:54:39,409 --> 00:54:44,480
cases we're just passing like the

1123
00:54:41,239 --> 00:54:46,548
indexes right and so what I'm going to

1124
00:54:44,480 --> 00:54:49,039
do here is I'm going to say probably

1125
00:54:46,548 --> 00:54:50,659
what I want to do is have OpenGL frame

1126
00:54:49,039 --> 00:54:54,769
buffer be the thing that we pass here

1127
00:54:50,659 --> 00:54:59,239
and then what I'll do is say well if the

1128
00:54:54,768 --> 00:55:00,979
frame buffer is a valid pointer then use

1129
00:54:59,239 --> 00:55:03,739
the frame buffer handle that's

1130
00:55:00,980 --> 00:55:06,230
associated with it otherwise just pass 0

1131
00:55:03,739 --> 00:55:09,008
that way you can target either type here

1132
00:55:06,230 --> 00:55:12,230
and it just works in theory

1133
00:55:09,009 --> 00:55:15,409
so okay so here we want the OpenGL

1134
00:55:12,230 --> 00:55:17,539
jetseal buffer for whatever that target

1135
00:55:15,409 --> 00:55:24,230
index is and this is going to be the

1136
00:55:17,539 --> 00:55:26,269
frame buffer handle right so and then

1137
00:55:24,230 --> 00:55:29,028
we've got here this one that's doing the

1138
00:55:26,268 --> 00:55:35,858
the peel index or whatever again that's

1139
00:55:29,028 --> 00:55:35,858
going to be opengl dot step steel buffer

1140
00:55:39,510 --> 00:55:45,630
and that's it so now we've just done a

1141
00:55:44,130 --> 00:55:46,530
ton of changes so I have no idea if

1142
00:55:45,630 --> 00:55:49,890
anything is going to work at all

1143
00:55:46,530 --> 00:55:52,470
probably not but you know what are going

1144
00:55:49,889 --> 00:55:54,900
to do so at this point now we've got

1145
00:55:52,469 --> 00:55:56,989
sort of one thing that we went a little

1146
00:55:54,900 --> 00:55:59,490
bit further than probably we should on

1147
00:55:56,989 --> 00:56:03,569
and that is specifically the fact that

1148
00:55:59,489 --> 00:56:06,000
we we set that multi sampling hint to

1149
00:56:03,570 --> 00:56:08,700
true which is probably bad so what I'm

1150
00:56:06,000 --> 00:56:13,170
going to do at first is I'm going to

1151
00:56:08,699 --> 00:56:15,629
force the multi sampling off just so we

1152
00:56:13,170 --> 00:56:17,970
can get things working and then I will

1153
00:56:15,630 --> 00:56:19,950
you know so we can debug everything back

1154
00:56:17,969 --> 00:56:22,439
to the way it was and then we'll work on

1155
00:56:19,949 --> 00:56:26,339
being able to set multi sampling it's

1156
00:56:22,440 --> 00:56:27,960
katroo so I'm just going to set that to

1157
00:56:26,340 --> 00:56:29,190
false right now so that no matter what

1158
00:56:27,960 --> 00:56:33,358
hint you tell it you're not going to

1159
00:56:29,190 --> 00:56:35,010
multiple so now we can get started so

1160
00:56:33,358 --> 00:56:37,259
here we are an open GL prepare for

1161
00:56:35,010 --> 00:56:44,100
settings you can see the settings here

1162
00:56:37,260 --> 00:56:45,840
that we're getting and that's just not

1163
00:56:44,099 --> 00:56:48,630
the settings were supposed to get right

1164
00:56:45,840 --> 00:56:50,760
that's just totally not even on the

1165
00:56:48,630 --> 00:56:54,180
table so I would like to find out why

1166
00:56:50,760 --> 00:56:58,650
we're getting this obviously so here's

1167
00:56:54,179 --> 00:57:02,029
my win main it looks like we're we sort

1168
00:56:58,650 --> 00:57:02,030
of did come through here

1169
00:57:13,889 --> 00:57:26,279
so I'm not sure what happened to those

1170
00:57:16,079 --> 00:57:32,219
settings exactly but let's find out so

1171
00:57:26,280 --> 00:57:37,710
here we go to render commands now look

1172
00:57:32,219 --> 00:57:39,509
at those render commands so here are the

1173
00:57:37,710 --> 00:57:41,699
settings and you can see that they're

1174
00:57:39,510 --> 00:57:45,270
correct that's what I would expect them

1175
00:57:41,699 --> 00:57:46,379
to be right so now the question is when

1176
00:57:45,269 --> 00:57:49,619
we go through to actually do the

1177
00:57:46,380 --> 00:57:51,450
rendering you know what happens why are

1178
00:57:49,619 --> 00:57:53,969
we getting something weird do we act do

1179
00:57:51,449 --> 00:57:55,739
I clear those out somewhere you know I

1180
00:57:53,969 --> 00:57:59,000
don't I don't really remember what we

1181
00:57:55,739 --> 00:58:04,259
did here in this part of the code

1182
00:57:59,000 --> 00:58:06,929
oops thank you for popping up my window

1183
00:58:04,260 --> 00:58:10,200
but the moment I kind of need to be back

1184
00:58:06,929 --> 00:58:12,149
here so off we go you know we're doing

1185
00:58:10,199 --> 00:58:15,169
our thing we're going into the renderer

1186
00:58:12,150 --> 00:58:15,170
here in a second

1187
00:58:15,260 --> 00:58:22,230
do setting up the input dealing with

1188
00:58:20,579 --> 00:58:28,099
mouse buttons and things let's just skip

1189
00:58:22,230 --> 00:58:31,860
over this to the game update there we go

1190
00:58:28,099 --> 00:58:33,509
game update and render and we're passing

1191
00:58:31,860 --> 00:58:34,980
the render commands here and you can see

1192
00:58:33,510 --> 00:58:37,140
we're passing the address of the one

1193
00:58:34,980 --> 00:58:40,289
that we think we're passing so when we

1194
00:58:37,139 --> 00:58:42,000
come in here in theory we should see

1195
00:58:40,289 --> 00:58:46,289
that the settings are correct you know

1196
00:58:42,000 --> 00:58:48,869
and they are so that's good so I'm going

1197
00:58:46,289 --> 00:58:51,360
to come back out here and you know

1198
00:58:48,869 --> 00:58:52,529
nothing nothing bad has happened yet so

1199
00:58:51,360 --> 00:58:55,380
now we're going to come through here and

1200
00:58:52,530 --> 00:58:57,300
the sounds going to do its thing right

1201
00:58:55,380 --> 00:58:58,890
so here's the sound stuff which we have

1202
00:58:57,300 --> 00:59:00,330
sounds turned off at the moment because

1203
00:58:58,889 --> 00:59:02,940
we don't want to have to listen to the

1204
00:59:00,329 --> 00:59:05,279
preparing debugging but they're they're

1205
00:59:02,940 --> 00:59:06,780
there so then we're going to come

1206
00:59:05,280 --> 00:59:08,490
through and we're going to process the

1207
00:59:06,780 --> 00:59:11,040
frame end stuff again that's going to do

1208
00:59:08,489 --> 00:59:14,659
the same render commands and then in

1209
00:59:11,039 --> 00:59:17,550
theory like we should be able to just

1210
00:59:14,659 --> 00:59:20,969
see here manage textures text refers

1211
00:59:17,550 --> 00:59:23,610
free that's all fine textures and slide

1212
00:59:20,969 --> 00:59:26,589
buffer in window so this is the part

1213
00:59:23,610 --> 00:59:29,680
that's it's having trouble

1214
00:59:26,590 --> 00:59:32,650
and and we kind of we kind of nerve

1215
00:59:29,679 --> 00:59:34,719
ourselves there right and so I'm not

1216
00:59:32,650 --> 00:59:37,019
sure what's going on so let's back up a

1217
00:59:34,719 --> 00:59:39,549
little bit here and let's just see

1218
00:59:37,019 --> 00:59:41,710
what's getting passed down so here's the

1219
00:59:39,550 --> 00:59:43,450
wind mane and there's the render

1220
00:59:41,710 --> 00:59:48,630
commands right you can see them they're

1221
00:59:43,449 --> 00:59:48,629
still right here so just inside win32

1222
00:59:48,719 --> 00:59:53,799
inside here let's see if we're getting

1223
00:59:51,849 --> 00:59:55,779
reasonable things here's our commands

1224
00:59:53,800 --> 00:59:57,490
note they're still reasonable there so

1225
00:59:55,780 --> 00:59:58,900
we come down in here to render commands

1226
00:59:57,489 --> 01:00:01,389
and we're looking at this render

1227
00:59:58,900 --> 01:00:05,320
commands and let's see what this has got

1228
01:00:01,389 --> 01:00:06,579
for us here and it's got the right

1229
01:00:05,320 --> 01:00:09,519
settings so I must just be doing

1230
01:00:06,579 --> 01:00:11,949
something stupid in here oh and yes I am

1231
01:00:09,519 --> 01:00:14,769
I'm passing the old settings so that's

1232
01:00:11,949 --> 01:00:19,359
just a that's just a typo right a dumb

1233
01:00:14,769 --> 01:00:21,070
typo nothing nothing - nothing -

1234
01:00:19,360 --> 01:00:22,660
concerning or weird happening there

1235
01:00:21,070 --> 01:00:24,970
that's just me for getting to pass the

1236
01:00:22,659 --> 01:00:32,799
new settings instead I pass the old

1237
01:00:24,969 --> 01:00:35,189
settings maybe I'll call this change to

1238
01:00:32,800 --> 01:00:35,190
settings

1239
01:00:36,989 --> 01:00:40,069
[Applause]

1240
01:00:44,900 --> 01:00:50,160
all right so now we're at least running

1241
01:00:48,719 --> 01:00:52,439
but we're not running correctly right

1242
01:00:50,159 --> 01:00:54,029
we're seeing gray screen instead of what

1243
01:00:52,440 --> 01:00:56,340
we should be seeing which is you know

1244
01:00:54,030 --> 01:00:58,070
some kind of a valid rendering of the

1245
01:00:56,340 --> 01:01:01,800
game so now we just have to go through

1246
01:00:58,070 --> 01:01:03,600
and this is the uninventive 3d graphics

1247
01:01:01,800 --> 01:01:06,960
programming which goes through and

1248
01:01:03,599 --> 01:01:09,269
figure out what we messed up right and

1249
01:01:06,960 --> 01:01:11,820
this is again I just want to

1250
01:01:09,269 --> 01:01:13,199
re-emphasize this many times until we

1251
01:01:11,820 --> 01:01:17,400
can switch to a better machine on

1252
01:01:13,199 --> 01:01:18,929
handmade Hiro normally in any normal

1253
01:01:17,400 --> 01:01:21,480
development environment at this point

1254
01:01:18,929 --> 01:01:23,460
you would switch to some kind of a

1255
01:01:21,480 --> 01:01:25,650
graphics debugger if you have one

1256
01:01:23,460 --> 01:01:27,960
we don't have one that we can use on

1257
01:01:25,650 --> 01:01:29,940
this machine but if you're if you have

1258
01:01:27,960 --> 01:01:32,519
access to say if you on an Nvidia card

1259
01:01:29,940 --> 01:01:34,110
and you can run insight that makes this

1260
01:01:32,519 --> 01:01:36,389
kind of problem where you just like I

1261
01:01:34,110 --> 01:01:37,860
know this is a functional pipeline I was

1262
01:01:36,389 --> 01:01:39,210
running it just a little bit before I

1263
01:01:37,860 --> 01:01:41,099
did a bunch of cleanup where I had to

1264
01:01:39,210 --> 01:01:42,539
rearrange some things and now I get a

1265
01:01:41,099 --> 01:01:50,880
black screen or whatever or r-equivalent

1266
01:01:42,539 --> 01:01:54,360
black screen which is gray screen when

1267
01:01:50,880 --> 01:01:56,280
that happens specifically something like

1268
01:01:54,360 --> 01:01:58,769
insight really can help you because

1269
01:01:56,280 --> 01:02:00,120
basically you can see at what part

1270
01:01:58,769 --> 01:02:03,599
things went wrong because you can

1271
01:02:00,119 --> 01:02:05,789
inspect individual stage in the pipeline

1272
01:02:03,599 --> 01:02:07,500
whereas we can't do that so what we have

1273
01:02:05,789 --> 01:02:09,179
to do is is you know go through the

1274
01:02:07,500 --> 01:02:10,650
standard blackbox debugging process

1275
01:02:09,179 --> 01:02:12,500
which like I said I don't mind doing on

1276
01:02:10,650 --> 01:02:15,090
the stream at all it takes longer but

1277
01:02:12,500 --> 01:02:16,289
it's a skill that you do need to have if

1278
01:02:15,090 --> 01:02:18,539
you're a ninja programmer because you

1279
01:02:16,289 --> 01:02:20,639
won't always have good tools it's kind

1280
01:02:18,539 --> 01:02:22,320
of a luxury in the modern era the fact

1281
01:02:20,639 --> 01:02:25,049
that people have made tools like insight

1282
01:02:22,320 --> 01:02:28,230
or render dock that do you know when

1283
01:02:25,050 --> 01:02:30,810
they are working or if you have a

1284
01:02:28,230 --> 01:02:32,340
machine on which they will work they do

1285
01:02:30,809 --> 01:02:34,679
offer you a great deal of insight but

1286
01:02:32,340 --> 01:02:36,660
it's exactly analogous to modern

1287
01:02:34,679 --> 01:02:38,940
debuggers where you know it's definitely

1288
01:02:36,659 --> 01:02:40,409
a luxury that we have something as much

1289
01:02:38,940 --> 01:02:40,980
as I complain about visual Studios

1290
01:02:40,409 --> 01:02:43,769
debugger

1291
01:02:40,980 --> 01:02:46,860
it's still a very good tool compared to

1292
01:02:43,769 --> 01:02:48,960
having nothing right and having nothing

1293
01:02:46,860 --> 01:02:50,460
is something that you occasionally have

1294
01:02:48,960 --> 01:02:52,050
to deal with you may be working on

1295
01:02:50,460 --> 01:02:55,289
hardware that literally just does not

1296
01:02:52,050 --> 01:02:55,859
have tools on it yet or the tools that

1297
01:02:55,289 --> 01:02:58,018
are on

1298
01:02:55,858 --> 01:03:01,380
are too broken to use or too buggy or

1299
01:02:58,018 --> 01:03:02,879
who knows what and so or maybe you're

1300
01:03:01,380 --> 01:03:04,200
just working on the kernel or of like an

1301
01:03:02,880 --> 01:03:05,700
operating system or something and you

1302
01:03:04,199 --> 01:03:07,199
haven't you know you you don't even have

1303
01:03:05,699 --> 01:03:10,618
the ability to hook up a debugger to it

1304
01:03:07,199 --> 01:03:11,969
right and you have to sort of bootstrap

1305
01:03:10,619 --> 01:03:13,380
it until you can get to the point where

1306
01:03:11,969 --> 01:03:15,209
that's something that can be done over a

1307
01:03:13,380 --> 01:03:18,239
remote you know connection or something

1308
01:03:15,210 --> 01:03:20,249
who knows right so you know part of

1309
01:03:18,239 --> 01:03:22,079
being a consummate engine programmer is

1310
01:03:20,248 --> 01:03:23,998
being able to do blackbox debugging for

1311
01:03:22,079 --> 01:03:26,670
sure so it's a good skill to have even

1312
01:03:23,998 --> 01:03:31,009
though like I say I would emphasize

1313
01:03:26,670 --> 01:03:34,588
there's no glory in it right so don't

1314
01:03:31,009 --> 01:03:37,650
don't blackbox debug something you have

1315
01:03:34,588 --> 01:03:39,989
the ability to transparent box debug

1316
01:03:37,650 --> 01:03:41,639
whatever you want to call that it's

1317
01:03:39,989 --> 01:03:43,679
really not black box more like opaque

1318
01:03:41,639 --> 01:03:45,058
box it doesn't matter what color the box

1319
01:03:43,679 --> 01:03:45,808
is it matters that you can't see through

1320
01:03:45,059 --> 01:03:48,119
it right

1321
01:03:45,809 --> 01:03:50,999
so it's opaque box versus transparent

1322
01:03:48,119 --> 01:03:53,489
box is really the more kind of important

1323
01:03:50,998 --> 01:03:55,949
thing to say but you know you get the

1324
01:03:53,489 --> 01:03:57,150
idea so that's the way we're going to

1325
01:03:55,949 --> 01:03:58,858
have to go through this but you know

1326
01:03:57,150 --> 01:04:01,079
we'll take it one step at the time and

1327
01:03:58,858 --> 01:04:02,848
we'll be slower but it's fine so what we

1328
01:04:01,079 --> 01:04:04,259
need to do now is we know that we had a

1329
01:04:02,849 --> 01:04:05,849
working pipeline and we know that I

1330
01:04:04,259 --> 01:04:07,588
broke it so really all I have to do is

1331
01:04:05,849 --> 01:04:09,869
figure out where in the pipeline I Pro

1332
01:04:07,588 --> 01:04:14,670
get possibly multiple places so we want

1333
01:04:09,869 --> 01:04:17,220
to try to do is force OpenGL hand to

1334
01:04:14,670 --> 01:04:19,710
show us where it is breaking right

1335
01:04:17,219 --> 01:04:21,298
that's what we want to do and you can

1336
01:04:19,710 --> 01:04:22,889
tell that there's multiple points at

1337
01:04:21,298 --> 01:04:24,630
which we could break right so one place

1338
01:04:22,889 --> 01:04:26,368
that we could break is you know at the

1339
01:04:24,630 --> 01:04:28,470
very end we could be doing everything

1340
01:04:26,369 --> 01:04:30,450
correctly but then something I changed

1341
01:04:28,469 --> 01:04:32,248
like made it so that we don't store the

1342
01:04:30,449 --> 01:04:33,629
resolved buffer texture handle correctly

1343
01:04:32,248 --> 01:04:35,788
and so when we go to do our final

1344
01:04:33,630 --> 01:04:38,670
stretch to the screen we don't get

1345
01:04:35,789 --> 01:04:39,960
anything right or something like that so

1346
01:04:38,670 --> 01:04:41,159
there's tons of things like that that

1347
01:04:39,960 --> 01:04:43,528
could be happening and we don't know

1348
01:04:41,159 --> 01:04:45,239
which one of them we are experiencing

1349
01:04:43,528 --> 01:04:47,190
right now so what we have to do is kind

1350
01:04:45,239 --> 01:04:50,699
of poke at it and see like you know

1351
01:04:47,190 --> 01:04:54,150
where along the lines we're going wrong

1352
01:04:50,699 --> 01:04:56,639
so let's just try some things first to

1353
01:04:54,150 --> 01:04:59,009
see what at all you know using kind of

1354
01:04:56,639 --> 01:05:00,179
structured art what at all it is we're

1355
01:04:59,009 --> 01:05:01,559
looking at because I don't know I'm just

1356
01:05:00,179 --> 01:05:05,088
seeing a gray screen I don't know what

1357
01:05:01,559 --> 01:05:07,619
else is going on so here we can see that

1358
01:05:05,088 --> 01:05:10,159
we're you know doing that final blit

1359
01:05:07,619 --> 01:05:10,160
right

1360
01:05:11,030 --> 01:05:15,380
why can I not there we go

1361
01:05:16,670 --> 01:05:21,630
and you know what that's going really

1362
01:05:19,349 --> 01:05:23,159
slowly I wonder if we're having

1363
01:05:21,630 --> 01:05:27,590
something where we're doing this like

1364
01:05:23,159 --> 01:05:27,589
every time or something like that

1365
01:05:29,059 --> 01:05:34,739
doesn't seem to be the case hmm but

1366
01:05:33,329 --> 01:05:37,469
anyways that's sort of what I expect to

1367
01:05:34,739 --> 01:05:40,049
see there in terms of the you know the

1368
01:05:37,469 --> 01:05:42,899
black boxing of it there so looking at

1369
01:05:40,050 --> 01:05:45,890
that that doesn't concern me too badly

1370
01:05:42,900 --> 01:05:48,900
right that that seems to be okay there

1371
01:05:45,889 --> 01:05:52,920
for the most part so the other question

1372
01:05:48,900 --> 01:05:54,360
I would have here as far as the as far

1373
01:05:52,920 --> 01:05:57,780
as the final stretch is concerned there

1374
01:05:54,360 --> 01:06:00,300
I would like to know perhaps whether or

1375
01:05:57,780 --> 01:06:02,910
not that texture is being read from

1376
01:06:00,300 --> 01:06:04,830
properly so what I would like to do in

1377
01:06:02,909 --> 01:06:10,949
the in the final stretch there is maybe

1378
01:06:04,829 --> 01:06:12,869
go into the program here I and I did you

1379
01:06:10,949 --> 01:06:14,609
know just figure out if I'm if I'm

1380
01:06:12,869 --> 01:06:16,859
running correctly so here's the the

1381
01:06:14,610 --> 01:06:18,240
final stretch code and what I'm going to

1382
01:06:16,860 --> 01:06:20,610
do is I'm just going to force the red

1383
01:06:18,239 --> 01:06:22,949
channel to one so that I can verify that

1384
01:06:20,610 --> 01:06:26,430
you know that shader is running right

1385
01:06:22,949 --> 01:06:28,439
all right so that's a good sign that

1386
01:06:26,429 --> 01:06:30,089
shader is running it seems to be running

1387
01:06:28,440 --> 01:06:33,210
in the right place at the right time so

1388
01:06:30,090 --> 01:06:34,860
that's good we don't really know whether

1389
01:06:33,210 --> 01:06:37,230
this texture is being read from

1390
01:06:34,860 --> 01:06:39,030
correctly and that's a harder thing to

1391
01:06:37,230 --> 01:06:40,619
test because we don't really have a way

1392
01:06:39,030 --> 01:06:42,900
of forcing that texture to have

1393
01:06:40,619 --> 01:06:44,730
particular contents in any way that's

1394
01:06:42,900 --> 01:06:47,940
really particularly reliable that's a

1395
01:06:44,730 --> 01:06:49,559
harder test to do with the way that we

1396
01:06:47,940 --> 01:06:52,500
have to work with

1397
01:06:49,559 --> 01:06:53,849
you know these we can't reach in and

1398
01:06:52,500 --> 01:06:56,190
poke at the graphics memory very

1399
01:06:53,849 --> 01:06:58,980
effectively which is how we would have

1400
01:06:56,190 --> 01:07:00,840
wanted to do that so let's take a look

1401
01:06:58,980 --> 01:07:02,880
here at how we're generating that

1402
01:07:00,840 --> 01:07:05,519
texture and maybe let's also take a look

1403
01:07:02,880 --> 01:07:07,530
at what that texture actually is as far

1404
01:07:05,519 --> 01:07:10,949
as which handle it's assigned to at the

1405
01:07:07,530 --> 01:07:13,769
time right so let's go in here and say

1406
01:07:10,949 --> 01:07:16,439
you know let me look at at this final

1407
01:07:13,769 --> 01:07:17,940
stretch call here we know that that

1408
01:07:16,440 --> 01:07:19,590
shader is running properly but let's

1409
01:07:17,940 --> 01:07:21,960
take a look at the OpenGL stretch and

1410
01:07:19,590 --> 01:07:22,630
just see what we're actually sending

1411
01:07:21,960 --> 01:07:26,019
down

1412
01:07:22,630 --> 01:07:28,329
so here are our buffers you know that

1413
01:07:26,018 --> 01:07:30,189
we've got let's take a look at them so

1414
01:07:28,329 --> 01:07:32,200
you can see that this this looks pretty

1415
01:07:30,190 --> 01:07:34,809
good to me right the frame buffer handle

1416
01:07:32,199 --> 01:07:37,058
of one seems like exactly what it should

1417
01:07:34,809 --> 01:07:39,548
be because that's the first frame buffer

1418
01:07:37,059 --> 01:07:41,319
handle and this is the first frame

1419
01:07:39,548 --> 01:07:42,969
buffer that we allocate so that makes

1420
01:07:41,318 --> 01:07:44,048
reasonable sense if you assume the

1421
01:07:42,969 --> 01:07:46,689
driver just gives them out in order

1422
01:07:44,048 --> 01:07:47,889
starting at number one the color handle

1423
01:07:46,690 --> 01:07:49,858
of seven makes sense because we do

1424
01:07:47,889 --> 01:07:52,420
allocate other things before this

1425
01:07:49,858 --> 01:07:53,949
texture handles and so forth and a depth

1426
01:07:52,420 --> 01:07:55,869
handle of zero also makes sense because

1427
01:07:53,949 --> 01:07:57,939
remember the resolve buffer doesn't use

1428
01:07:55,869 --> 01:07:59,920
depth testing so there is no need for a

1429
01:07:57,940 --> 01:08:02,019
death buffer on the resolved buffer our

1430
01:07:59,920 --> 01:08:04,269
def peeled buffer is similar look about

1431
01:08:02,018 --> 01:08:06,608
as good as you could hope to three four

1432
01:08:04,268 --> 01:08:09,159
or five which is the next frame buffers

1433
01:08:06,608 --> 01:08:10,598
in the sequence makes sense eight nine

1434
01:08:09,159 --> 01:08:13,868
ten eleven twelve thirteen fourteen

1435
01:08:10,599 --> 01:08:17,048
fifteen so all of those look like anyway

1436
01:08:13,869 --> 01:08:20,829
they have been created correct correctly

1437
01:08:17,048 --> 01:08:22,868
as far as I can tell we also have the

1438
01:08:20,829 --> 01:08:24,729
render width and height look about right

1439
01:08:22,868 --> 01:08:28,389
we've got you know pretty much all this

1440
01:08:24,729 --> 01:08:30,158
stuff seems seems reasonably good for

1441
01:08:28,389 --> 01:08:32,560
the most part again it's a little bit

1442
01:08:30,158 --> 01:08:32,798
hard to tell so I'm pretty happy with

1443
01:08:32,560 --> 01:08:35,619
that

1444
01:08:32,798 --> 01:08:38,500
however we have other things that could

1445
01:08:35,618 --> 01:08:40,088
be creating problems in here and so what

1446
01:08:38,500 --> 01:08:43,139
I would like to do is just make sure

1447
01:08:40,088 --> 01:08:45,009
that you know the when we create these

1448
01:08:43,139 --> 01:08:49,449
textures we're doing everything

1449
01:08:45,009 --> 01:08:50,649
correctly so here in open gel that's

1450
01:08:49,448 --> 01:08:55,509
right on the run place

1451
01:08:50,649 --> 01:08:56,948
I wanted my yeah great frame buffer so

1452
01:08:55,509 --> 01:08:58,929
here in the create frame buffer we

1453
01:08:56,948 --> 01:09:03,189
passed the width height and the flags I

1454
01:08:58,929 --> 01:09:08,020
don't know for certain if we did

1455
01:09:03,189 --> 01:09:13,329
everything correctly here oh that's not

1456
01:09:08,020 --> 01:09:16,240
where I meant to do that that's a little

1457
01:09:13,329 --> 01:09:19,409
bit of mistake sorry about that

1458
01:09:16,239 --> 01:09:19,409
[Applause]

1459
01:09:23,250 --> 01:09:28,798
where I actually wanted to do that was

1460
01:09:25,619 --> 01:09:31,380
here where we say open geo multi

1461
01:09:28,798 --> 01:09:33,390
sampling I wanted this to be false now

1462
01:09:31,380 --> 01:09:34,859
that won't change anything because that

1463
01:09:33,390 --> 01:09:37,880
should still have exactly the same

1464
01:09:34,859 --> 01:09:40,500
effect but just want to make sure okay

1465
01:09:37,880 --> 01:09:42,359
so yeah that's what I meant to do I

1466
01:09:40,500 --> 01:09:42,838
meant to kill it here not in the other

1467
01:09:42,359 --> 01:09:46,770
place

1468
01:09:42,838 --> 01:09:49,170
all right so in theory this has

1469
01:09:46,770 --> 01:09:51,810
basically all the stuff that I would

1470
01:09:49,170 --> 01:09:53,609
have expected to have the programs are

1471
01:09:51,810 --> 01:09:56,400
compiled the way I would expect them to

1472
01:09:53,609 --> 01:09:58,230
be compiled the frame buffers are

1473
01:09:56,399 --> 01:10:00,000
getting created the way that I would

1474
01:09:58,229 --> 01:10:02,549
expect them to get created so now the

1475
01:10:00,000 --> 01:10:06,600
question is just what is the secret

1476
01:10:02,550 --> 01:10:11,150
thing that's not quite right here so one

1477
01:10:06,600 --> 01:10:11,150
thing that's definitely true

1478
01:10:14,000 --> 01:10:18,770
so that depth peel count there

1479
01:10:29,059 --> 01:10:36,349
I'm not sure about the depth peel count

1480
01:10:32,569 --> 01:10:38,960
either so what I would like to do is I'd

1481
01:10:36,349 --> 01:10:40,610
like to go back and say you know one of

1482
01:10:38,960 --> 01:10:42,469
the things that I realized about having

1483
01:10:40,609 --> 01:10:44,738
the depth key account being programmatic

1484
01:10:42,469 --> 01:10:48,139
that we don't really technically support

1485
01:10:44,738 --> 01:10:51,078
is the fact that our final composite

1486
01:10:48,139 --> 01:10:53,118
really only supports four no matter what

1487
01:10:51,078 --> 01:10:55,939
so you know it's a little bit harder to

1488
01:10:53,118 --> 01:10:57,889
figure out how that would work but we

1489
01:10:55,939 --> 01:11:02,000
could write that shader in a way that

1490
01:10:57,889 --> 01:11:03,679
that would allow us to do something more

1491
01:11:02,000 --> 01:11:07,099
creative there so maybe we'll look at

1492
01:11:03,679 --> 01:11:08,690
that in future anyway so anyway what we

1493
01:11:07,099 --> 01:11:10,670
want to do here is figure out yeah okay

1494
01:11:08,689 --> 01:11:12,799
so are we getting any data on these

1495
01:11:10,670 --> 01:11:14,359
deputy buffers or aren't we right like

1496
01:11:12,800 --> 01:11:15,920
what's the what are we are we ever

1497
01:11:14,359 --> 01:11:18,198
drawing anything to these depth field

1498
01:11:15,920 --> 01:11:20,690
buffers and so one thing that I should

1499
01:11:18,198 --> 01:11:25,089
be able to do in least in theory is I

1500
01:11:20,689 --> 01:11:30,348
should still be able to use this this

1501
01:11:25,090 --> 01:11:32,328
sort of end part right here to you know

1502
01:11:30,349 --> 01:11:34,940
to blitt these two frame buffers

1503
01:11:32,328 --> 01:11:38,948
together so if I was to say let's take

1504
01:11:34,939 --> 01:11:45,399
the render width and the render height

1505
01:11:38,948 --> 01:11:49,250
and draw that to the draw region right I

1506
01:11:45,399 --> 01:11:53,210
if I was going to do that what would I

1507
01:11:49,250 --> 01:11:56,210
get here right so if I if I was to look

1508
01:11:53,210 --> 01:12:02,270
at say the depth feel buffers so here's

1509
01:11:56,210 --> 01:12:07,599
a def peel buffer what would happen if I

1510
01:12:02,270 --> 01:12:07,599
bound that and then drew from it right

1511
01:12:10,099 --> 01:12:18,639
so that's deaf peel buffer zero and it

1512
01:12:15,288 --> 01:12:22,609
looks like there's nothing on it and

1513
01:12:18,639 --> 01:12:24,590
that's troublesome now I can verify that

1514
01:12:22,609 --> 01:12:28,429
I'm actually drawing to the one I think

1515
01:12:24,590 --> 01:12:30,319
I'm drawing from by setting you know

1516
01:12:28,429 --> 01:12:33,069
again just poking in there and saying

1517
01:12:30,319 --> 01:12:35,808
hey let's see if I can see red so I can

1518
01:12:33,069 --> 01:12:38,000
so this suggests to me that our problem

1519
01:12:35,809 --> 01:12:39,579
is really just in the render phase it

1520
01:12:38,000 --> 01:12:43,130
looks like we're not drawing anything

1521
01:12:39,578 --> 01:12:45,019
right and so we need to figure out why

1522
01:12:43,130 --> 01:12:46,730
we're not drawing anything at least on

1523
01:12:45,020 --> 01:12:50,500
the first depth peel you'd think we'd be

1524
01:12:46,729 --> 01:12:53,178
able to draw something onto something

1525
01:12:50,500 --> 01:12:55,399
so where do we bind that frame buffer

1526
01:12:53,179 --> 01:12:57,288
right so if we come through here you can

1527
01:12:55,399 --> 01:12:59,868
see us specifying the buffer data you

1528
01:12:57,288 --> 01:13:03,139
can see us setting up the textures for

1529
01:12:59,868 --> 01:13:11,719
the test feeling but where is the open

1530
01:13:03,139 --> 01:13:14,179
where do we bind the frame buffer it

1531
01:13:11,719 --> 01:13:16,819
looks like we commented that out for

1532
01:13:14,179 --> 01:13:20,029
some reason I don't know when we did

1533
01:13:16,819 --> 01:13:22,969
that did I do that just now but where is

1534
01:13:20,029 --> 01:13:26,868
the bind frame buffer call oh I guess it

1535
01:13:22,969 --> 01:13:32,059
happens in here no it would have to

1536
01:13:26,868 --> 01:13:34,210
happen up here right how are we doing

1537
01:13:32,059 --> 01:13:34,210
this

1538
01:13:42,719 --> 01:13:49,270
yeah I don't really know what this was

1539
01:13:45,158 --> 01:13:50,828
supposed to do exactly so I guess the

1540
01:13:49,270 --> 01:13:52,300
problem is just we're never targeting

1541
01:13:50,828 --> 01:13:56,828
any of these frame buffers that's just

1542
01:13:52,300 --> 01:13:58,869
kind of busted yeah so I don't know

1543
01:13:56,828 --> 01:14:00,849
there's a couple of ways we could do

1544
01:13:58,868 --> 01:14:02,078
that I'm not sure which one we really

1545
01:14:00,849 --> 01:14:03,460
want to do but I think we probably just

1546
01:14:02,078 --> 01:14:09,868
want to target the frame buffer right in

1547
01:14:03,460 --> 01:14:09,868
here right we just want to say like hey

1548
01:14:11,729 --> 01:14:20,399
when you start out here we need to

1549
01:14:15,279 --> 01:14:20,399
target whichever one of these you're on

1550
01:14:26,119 --> 01:14:29,238
[Applause]

1551
01:14:37,769 --> 01:14:40,949
there we go

1552
01:14:43,029 --> 01:14:47,139
okay so that's a lot better now we're

1553
01:14:45,189 --> 01:14:49,449
actually seeing one of these things that

1554
01:14:47,140 --> 01:14:51,070
doesn't look like the frontmost frame

1555
01:14:49,449 --> 01:14:58,000
buffer to me to be completely honest

1556
01:14:51,069 --> 01:15:00,659
with you so that's a little weird and

1557
01:14:58,000 --> 01:15:05,380
also it's not animating which is

1558
01:15:00,659 --> 01:15:08,079
extremely weird I might say so things

1559
01:15:05,380 --> 01:15:15,220
are still bizarre but we're getting

1560
01:15:08,079 --> 01:15:17,140
closer right yeah and if I take a look

1561
01:15:15,220 --> 01:15:18,850
at what the peel index is here the first

1562
01:15:17,140 --> 01:15:27,280
time through the peel index should be

1563
01:15:18,850 --> 01:15:30,700
zero so in theory right that should be

1564
01:15:27,279 --> 01:15:33,819
fine I also don't know when we come

1565
01:15:30,699 --> 01:15:36,609
outside here and we set the frame buffer

1566
01:15:33,819 --> 01:15:40,049
handle back to zero I'm not sure how

1567
01:15:36,609 --> 01:15:48,509
that was working in the past because

1568
01:15:40,050 --> 01:15:48,510
that that depth peeling shouldn't have

1569
01:15:50,550 --> 01:15:55,150
so I think the only way this was working

1570
01:15:53,170 --> 01:15:57,489
is cuz of that max render target stuff

1571
01:15:55,149 --> 01:16:00,099
was sort of saving our bacon there so

1572
01:15:57,489 --> 01:16:07,210
this this stuff is actually just totally

1573
01:16:00,100 --> 01:16:14,590
wrong actually right we were we were

1574
01:16:07,210 --> 01:16:20,409
doing this pretty pretty raw so I might

1575
01:16:14,590 --> 01:16:22,539
say that that you know it's a little bit

1576
01:16:20,409 --> 01:16:24,189
hard to figure out exactly how we want

1577
01:16:22,539 --> 01:16:26,470
to do this but I kind of feel like what

1578
01:16:24,189 --> 01:16:28,689
we wanted to do is just say you know the

1579
01:16:26,470 --> 01:16:34,119
depth feeling happens and then you write

1580
01:16:28,689 --> 01:16:37,869
to the front most peel thereafter so you

1581
01:16:34,119 --> 01:16:42,010
kind of want to just say hey at the

1582
01:16:37,869 --> 01:16:46,840
outset you're targeting the first depth

1583
01:16:42,010 --> 01:16:49,390
peel buffer when you're no longer doing

1584
01:16:46,840 --> 01:16:50,880
it you're also targeting it and then at

1585
01:16:49,390 --> 01:16:53,770
all other times you're targeting

1586
01:16:50,880 --> 01:16:55,829
whatever the you know the DEF peel

1587
01:16:53,770 --> 01:17:02,550
buffer is

1588
01:16:55,829 --> 01:17:08,729
or somewhere in between there right that

1589
01:17:02,550 --> 01:17:11,420
seems like roughly correct to me so I'm

1590
01:17:08,729 --> 01:17:14,519
going to say that's just how that goes

1591
01:17:11,420 --> 01:17:16,199
and furthermore during the begin peel

1592
01:17:14,520 --> 01:17:20,400
part of things we could do this a little

1593
01:17:16,199 --> 01:17:21,750
bit more cleanly you know we could do

1594
01:17:20,399 --> 01:17:24,479
something a little bit more like hey

1595
01:17:21,750 --> 01:17:27,510
when we begin the peels we set to

1596
01:17:24,479 --> 01:17:41,299
whatever the peel index is the target

1597
01:17:27,510 --> 01:17:41,300
there and and off we go

1598
01:17:50,140 --> 01:17:57,160
yeah so this looks a little bit better

1599
01:17:53,560 --> 01:17:59,289
here to me I don't know it's a little

1600
01:17:57,159 --> 01:18:00,939
arbitrary I feel like we could probably

1601
01:17:59,289 --> 01:18:04,600
stand to clean it up a little bit more

1602
01:18:00,939 --> 01:18:22,229
than we have but it's not awful it's

1603
01:18:04,600 --> 01:18:25,900
like it's okay right so if we're peeling

1604
01:18:22,229 --> 01:18:29,079
so yeah okay so I also should say the

1605
01:18:25,899 --> 01:18:33,279
peeling is only if we're at peel index

1606
01:18:29,079 --> 01:18:36,869
greater than zero because the first time

1607
01:18:33,279 --> 01:18:36,869
through we're not technically peeling

1608
01:18:37,859 --> 01:18:45,899
yeah Wow so something's totally messed

1609
01:18:40,840 --> 01:18:45,900
up a little bit beyond that though right

1610
01:18:49,109 --> 01:18:54,549
but we're getting a little closer so

1611
01:18:53,439 --> 01:18:56,079
again that's just bleeding the

1612
01:18:54,550 --> 01:18:57,369
framebuffer I'm going to see if now if

1613
01:18:56,079 --> 01:18:59,890
the rest of the pipeline is working I

1614
01:18:57,369 --> 01:19:01,510
suspect it probably is yeah but we've

1615
01:18:59,890 --> 01:19:04,480
got some we've got some really other

1616
01:19:01,510 --> 01:19:07,600
very weird things I do wonder if that

1617
01:19:04,479 --> 01:19:09,909
maybe is just because we're not and this

1618
01:19:07,600 --> 01:19:11,350
is probably the case so remember when I

1619
01:19:09,909 --> 01:19:12,880
said why do we do this I think it's

1620
01:19:11,350 --> 01:19:15,400
because we need to reset this every time

1621
01:19:12,880 --> 01:19:16,869
the push buffer part of it right because

1622
01:19:15,399 --> 01:19:19,420
the push buffer goes forwards and then

1623
01:19:16,869 --> 01:19:22,779
it would never go backwards so the

1624
01:19:19,420 --> 01:19:33,699
render commands part really needs a like

1625
01:19:22,779 --> 01:19:36,149
a reset here so when we get down to the

1626
01:19:33,699 --> 01:19:36,149
end of it

1627
01:19:43,350 --> 01:19:47,980
to be look right here so after we're

1628
01:19:46,630 --> 01:19:50,739
done with the frame display and we draw

1629
01:19:47,979 --> 01:19:56,049
everything then at that point we would

1630
01:19:50,738 --> 01:19:59,709
want to reset a you know afraid the

1631
01:19:56,050 --> 01:20:01,329
render so if we take a look at what has

1632
01:19:59,710 --> 01:20:06,480
to happen there we'd say well the render

1633
01:20:01,329 --> 01:20:10,899
commands pushed buffer base needs to

1634
01:20:06,479 --> 01:20:13,059
poops the render command push buffer

1635
01:20:10,899 --> 01:20:16,629
data at has to equal the push buffer

1636
01:20:13,060 --> 01:20:19,780
base and the render commands vertex

1637
01:20:16,630 --> 01:20:27,940
count needs to equal zero right so we

1638
01:20:19,779 --> 01:20:30,250
just need to like reset so we're getting

1639
01:20:27,939 --> 01:20:32,559
there but we're not there yet

1640
01:20:30,250 --> 01:20:35,979
like now we we've undone the major

1641
01:20:32,560 --> 01:20:38,920
damage there but we're not quite there

1642
01:20:35,979 --> 01:20:42,579
yet you can kind of see it looks sort of

1643
01:20:38,920 --> 01:20:46,079
to me like we're not white depth peeling

1644
01:20:42,579 --> 01:20:55,840
like we're just looking at the frontmost

1645
01:20:46,079 --> 01:21:01,719
he'll probably I think don't quote me on

1646
01:20:55,840 --> 01:21:03,460
this but I think so why are we only

1647
01:21:01,719 --> 01:21:05,920
seeing the front most def field let's

1648
01:21:03,460 --> 01:21:08,948
just verify that's true or that

1649
01:21:05,920 --> 01:21:11,440
something like that is true so actually

1650
01:21:08,948 --> 01:21:15,849
let me go over here so you can see that

1651
01:21:11,439 --> 01:21:21,309
without it being behind my head all

1652
01:21:15,850 --> 01:21:25,449
right so here's peel zero so it's not

1653
01:21:21,310 --> 01:21:28,900
quite just the front one let's get peel

1654
01:21:25,448 --> 01:21:30,339
you know just the next layer back so

1655
01:21:28,899 --> 01:21:31,899
there's the next layer back and as you

1656
01:21:30,340 --> 01:21:36,489
can see not particularly compelling

1657
01:21:31,899 --> 01:21:37,809
here's the next layer after that so it

1658
01:21:36,488 --> 01:21:40,509
looks like we're not drawing so I

1659
01:21:37,810 --> 01:21:42,280
probably just broke that loop so let's

1660
01:21:40,510 --> 01:21:43,630
take a look here at what's going to

1661
01:21:42,279 --> 01:21:45,969
happen so we're going to come in to

1662
01:21:43,630 --> 01:21:49,449
render entry begin peels we're going to

1663
01:21:45,969 --> 01:21:50,890
look at the header that we're on at the

1664
01:21:49,448 --> 01:21:52,569
moment and we're going to say that's the

1665
01:21:50,890 --> 01:21:53,949
jump point so we're going to do a loop

1666
01:21:52,569 --> 01:21:56,380
here we're going to jump back to here

1667
01:21:53,948 --> 01:21:57,759
you want to bind the peel frame buffer

1668
01:21:56,380 --> 01:21:59,020
goes with whatever peel index were on

1669
01:21:57,760 --> 01:22:01,110
which the first time three will be zero

1670
01:21:59,020 --> 01:22:03,550
future times hopefully will not be zero

1671
01:22:01,109 --> 01:22:05,109
then we set the peeling to whether or

1672
01:22:03,550 --> 01:22:06,550
not we're on the first one so we're not

1673
01:22:05,109 --> 01:22:08,439
considering peeling if we're only going

1674
01:22:06,550 --> 01:22:09,699
through once we are going to be

1675
01:22:08,439 --> 01:22:11,769
appealing when we come back through the

1676
01:22:09,699 --> 01:22:15,939
second time so then we say okay the

1677
01:22:11,770 --> 01:22:17,260
render entry peels in this case is make

1678
01:22:15,939 --> 01:22:19,679
sure this is right here to target

1679
01:22:17,260 --> 01:22:23,470
indexed FB account and these get freed

1680
01:22:19,680 --> 01:22:25,090
that looks roughly correct so we come

1681
01:22:23,470 --> 01:22:27,640
back down through to the render entry

1682
01:22:25,090 --> 01:22:28,690
peels end and so at the end of that

1683
01:22:27,640 --> 01:22:29,980
we're going to say if the peel index is

1684
01:22:28,689 --> 01:22:32,279
less than the max render target index

1685
01:22:29,979 --> 01:22:34,839
then what we need to do is jump

1686
01:22:32,279 --> 01:22:38,800
otherwise we're done right if we've done

1687
01:22:34,840 --> 01:22:40,539
the last one we're good to go right so

1688
01:22:38,800 --> 01:22:41,890
if we're not done we jump back to the

1689
01:22:40,539 --> 01:22:43,659
beginning and we increment the peel

1690
01:22:41,890 --> 01:22:48,010
index which will lead us to bind the

1691
01:22:43,659 --> 01:22:50,079
next buffer right hopefully and a set

1692
01:22:48,010 --> 01:22:51,970
peeling equal to true otherwise we'll

1693
01:22:50,079 --> 01:22:53,529
say let's make sure we've done all the

1694
01:22:51,970 --> 01:22:55,930
ones that we're going to do then let's

1695
01:22:53,529 --> 01:22:57,729
bind that last buffer back again in case

1696
01:22:55,930 --> 01:23:00,820
anyone has any non def peeled wrong to

1697
01:22:57,729 --> 01:23:03,129
do it'll go on to the front peel so then

1698
01:23:00,819 --> 01:23:04,750
we've got render interview clear I don't

1699
01:23:03,130 --> 01:23:07,029
know that we care that about that very

1700
01:23:04,750 --> 01:23:09,189
much because that's literally only for

1701
01:23:07,029 --> 01:23:11,369
the debug system we want it to work but

1702
01:23:09,189 --> 01:23:14,379
we don't care about it right now

1703
01:23:11,369 --> 01:23:16,119
then we've got entry textured quads the

1704
01:23:14,380 --> 01:23:17,859
textured quads is the thing that

1705
01:23:16,119 --> 01:23:20,829
actually does the drawing pretty much

1706
01:23:17,859 --> 01:23:22,479
all of the drawing so in here when we

1707
01:23:20,829 --> 01:23:24,010
come through if the fielding is equal to

1708
01:23:22,479 --> 01:23:25,929
true or if it's equal to false there's

1709
01:23:24,010 --> 01:23:27,909
two different paths the false case will

1710
01:23:25,930 --> 01:23:31,060
not set up a peel texture the true case

1711
01:23:27,909 --> 01:23:33,189
will and so in that case when we are

1712
01:23:31,060 --> 01:23:34,510
setting up a texture to peel from you

1713
01:23:33,189 --> 01:23:36,669
can see us doing it here what we're

1714
01:23:34,510 --> 01:23:38,739
doing is saying grab the one that's

1715
01:23:36,670 --> 01:23:40,449
whatever that's one behind the one that

1716
01:23:38,739 --> 01:23:43,420
I'm currently bound to which seems like

1717
01:23:40,449 --> 01:23:46,420
the correct thing to do and we should

1718
01:23:43,420 --> 01:23:48,340
already be targeting the correct target

1719
01:23:46,420 --> 01:23:50,199
because we did it up here right we

1720
01:23:48,340 --> 01:23:54,480
should have set it to the correct target

1721
01:23:50,199 --> 01:23:54,479
in render entry begin peels

1722
01:24:03,500 --> 01:24:09,479
so here's what the problem is it looks

1723
01:24:06,659 --> 01:24:11,519
like is in this case we're going to

1724
01:24:09,479 --> 01:24:13,889
increment so we don't we never actually

1725
01:24:11,520 --> 01:24:16,830
run this code is what looks like is the

1726
01:24:13,890 --> 01:24:18,119
problem so I think I do come right

1727
01:24:16,829 --> 01:24:20,369
because we're going to increment over

1728
01:24:18,119 --> 01:24:24,510
that header so it's going to skip the

1729
01:24:20,369 --> 01:24:26,640
that begin so it does kind of look like

1730
01:24:24,510 --> 01:24:28,320
in order to do this I will have to leave

1731
01:24:26,640 --> 01:24:30,900
it in here like I will have to leave it

1732
01:24:28,319 --> 01:24:36,569
like this but which I guess that's not a

1733
01:24:30,899 --> 01:24:38,039
huge deal so that looks better now we're

1734
01:24:36,569 --> 01:24:39,630
getting that that death deal so let's

1735
01:24:38,039 --> 01:24:43,260
take a look and see if I have restored

1736
01:24:39,630 --> 01:24:43,980
us to good working order here maybe I

1737
01:24:43,260 --> 01:24:47,150
have

1738
01:24:43,979 --> 01:24:47,149
[Applause]

1739
01:24:54,158 --> 01:24:59,288
that's looking correct to me now I don't

1740
01:24:57,338 --> 01:25:02,288
see any obvious problems this looks like

1741
01:24:59,288 --> 01:25:04,828
it looked before the depth fades looking

1742
01:25:02,288 --> 01:25:08,948
pretty good all the particles look good

1743
01:25:04,828 --> 01:25:09,248
yes I think that's pretty good so there

1744
01:25:08,948 --> 01:25:12,009
we go

1745
01:25:09,248 --> 01:25:13,628
okay good and now the other thing that's

1746
01:25:12,010 --> 01:25:16,179
nice about this is we should be able to

1747
01:25:13,628 --> 01:25:20,318
make some like renderer settings kind of

1748
01:25:16,179 --> 01:25:22,689
things here as well just just out of

1749
01:25:20,319 --> 01:25:25,149
that sort of that platform set of things

1750
01:25:22,689 --> 01:25:27,069
that we have here so you know if we want

1751
01:25:25,149 --> 01:25:29,189
to we can now make some of these

1752
01:25:27,069 --> 01:25:32,439
settings these things that we can edit

1753
01:25:29,189 --> 01:25:40,929
so for example if we want to we can go

1754
01:25:32,439 --> 01:25:43,329
into a handmade left cpp and where we

1755
01:25:40,929 --> 01:25:47,639
set the renderer here what we should be

1756
01:25:43,328 --> 01:25:52,628
able to do is set a bunch of debug flags

1757
01:25:47,639 --> 01:25:54,219
that can be changed here right and yeah

1758
01:25:52,628 --> 01:25:56,260
I don't ever remember how to do any of

1759
01:25:54,219 --> 01:25:58,418
this stuff but let's just say that we

1760
01:25:56,260 --> 01:26:05,498
were going to do render commands dot

1761
01:25:58,418 --> 01:26:12,010
settings and pixelation hints was one of

1762
01:26:05,498 --> 01:26:15,418
them and multi sampling hints was like

1763
01:26:12,010 --> 01:26:15,418
another one of them or something

1764
01:26:21,699 --> 01:26:25,210
now I don't know if that'll actually

1765
01:26:23,020 --> 01:26:28,870
work because I never remember how the

1766
01:26:25,210 --> 01:26:31,090
debug system works but it looks like

1767
01:26:28,869 --> 01:26:32,710
that sign and so you can see us be able

1768
01:26:31,090 --> 01:26:35,079
to change these two and they should

1769
01:26:32,710 --> 01:26:36,130
change at runtime and they do now the

1770
01:26:35,079 --> 01:26:39,390
important thing to remember is we're not

1771
01:26:36,130 --> 01:26:43,090
done yet because at the moment we do not

1772
01:26:39,390 --> 01:26:44,740
actually delete any of our resources so

1773
01:26:43,090 --> 01:26:46,630
if we were to wail on this button enough

1774
01:26:44,739 --> 01:26:48,189
in theory we should run out of memory or

1775
01:26:46,630 --> 01:26:52,000
something on the graphics card right

1776
01:26:48,189 --> 01:26:54,039
like because we are not freeing when we

1777
01:26:52,000 --> 01:26:55,810
create a bunch of new frame buffers

1778
01:26:54,039 --> 01:26:58,659
we're not freeing the old frame buffers

1779
01:26:55,810 --> 01:27:03,039
so we do need to go do that but it's

1780
01:26:58,659 --> 01:27:06,729
nice to know anyway at this point you

1781
01:27:03,039 --> 01:27:13,119
know that we that we have that option so

1782
01:27:06,729 --> 01:27:16,539
let's go in here and see in terms of

1783
01:27:13,119 --> 01:27:17,859
what our other settings are I don't know

1784
01:27:16,539 --> 01:27:20,050
that there's anything else in particular

1785
01:27:17,859 --> 01:27:22,359
so let's just go ahead and try to enable

1786
01:27:20,050 --> 01:27:26,230
multi sampling and also let's try to

1787
01:27:22,359 --> 01:27:31,119
enable cleanup right so what we want to

1788
01:27:26,229 --> 01:27:32,500
do here in our our cleanup code is you

1789
01:27:31,119 --> 01:27:35,170
can you can see what we've got

1790
01:27:32,500 --> 01:27:41,710
I don't know how much time I have left

1791
01:27:35,170 --> 01:27:45,449
what what what time did we start does

1792
01:27:41,710 --> 01:27:45,449
this thing know to the into that now

1793
01:27:45,510 --> 01:27:57,340
thirty thirty three minutes until Q&amp;A it

1794
01:27:48,550 --> 01:28:03,460
says so so that's quite some time I

1795
01:27:57,340 --> 01:28:07,449
think all right so what I want to do

1796
01:28:03,460 --> 01:28:10,659
here is I want to say you know I've got

1797
01:28:07,449 --> 01:28:11,979
these resources that I allocated and you

1798
01:28:10,659 --> 01:28:15,789
know I can kind of I can group these

1799
01:28:11,979 --> 01:28:18,029
together right and say something like

1800
01:28:15,789 --> 01:28:18,029
this

1801
01:28:19,720 --> 01:28:28,050
[Applause]

1802
01:28:30,649 --> 01:28:38,989
[Applause]

1803
01:28:36,409 --> 01:28:42,170
that all of this stuff you know kinda is

1804
01:28:38,989 --> 01:28:44,000
on the table right meaning all of this

1805
01:28:42,170 --> 01:28:45,800
stuff up here is stuff that you don't

1806
01:28:44,000 --> 01:28:47,899
really have to worry about because these

1807
01:28:45,800 --> 01:28:50,480
like reserved lip texture vertex buffer

1808
01:28:47,899 --> 01:28:52,309
stuff those are things that stay around

1809
01:28:50,479 --> 01:28:53,899
and it doesn't matter how many time to

1810
01:28:52,310 --> 01:28:55,310
change it say it settings you don't need

1811
01:28:53,899 --> 01:28:57,979
to worry about them these on the other

1812
01:28:55,310 --> 01:29:00,440
hand are right so what we want to do

1813
01:28:57,979 --> 01:29:02,989
here is just say okay when we you know

1814
01:29:00,439 --> 01:29:04,669
go to do our settings change we just

1815
01:29:02,989 --> 01:29:06,559
want to make sure that we loop through

1816
01:29:04,670 --> 01:29:11,510
all this stuff we might have two free

1817
01:29:06,560 --> 01:29:13,250
and free it right so let's go ahead and

1818
01:29:11,510 --> 01:29:15,619
take a look at that here is open jail

1819
01:29:13,250 --> 01:29:20,909
change the settings so what I want to do

1820
01:29:15,619 --> 01:29:22,279
here is in fact let me just do it here

1821
01:29:20,909 --> 01:29:24,109
[Applause]

1822
01:29:22,279 --> 01:29:27,590
so what I want to do is first I want to

1823
01:29:24,109 --> 01:29:28,880
you know free frame buffer for release

1824
01:29:27,590 --> 01:29:34,010
frame buffer whatever you want to call

1825
01:29:28,880 --> 01:29:40,699
this I want to frame that resolved frame

1826
01:29:34,010 --> 01:29:42,110
buffer and then I want to loop through

1827
01:29:40,699 --> 01:29:53,929
and I want to free all these frame

1828
01:29:42,109 --> 01:29:55,670
buffers and we don't really store the

1829
01:29:53,930 --> 01:29:56,780
depth peel count here do we oh we do

1830
01:29:55,670 --> 01:29:59,979
good

1831
01:29:56,779 --> 01:29:59,978
[Applause]

1832
01:30:06,420 --> 01:30:12,970
and maybe I'll grab these two since

1833
01:30:09,039 --> 01:30:16,630
they're sort of yeah

1834
01:30:12,970 --> 01:30:18,369
and that if we did that that's really

1835
01:30:16,630 --> 01:30:19,659
the only reason as we create because you

1836
01:30:18,369 --> 01:30:21,099
can kind of see down here we only

1837
01:30:19,659 --> 01:30:23,079
created three resources so the only

1838
01:30:21,100 --> 01:30:25,390
other thing we have to free are our

1839
01:30:23,079 --> 01:30:29,369
programs so we just need like a free

1840
01:30:25,390 --> 01:30:48,869
program call right and we need to free

1841
01:30:29,369 --> 01:30:58,059
all of these things so this is basically

1842
01:30:48,869 --> 01:31:05,470
free all dynamic resources create new

1843
01:30:58,060 --> 01:31:08,800
dynamic resources right so now we just

1844
01:31:05,470 --> 01:31:10,690
need these two calls we need a way to

1845
01:31:08,800 --> 01:31:25,779
free the frame buffer and we need a way

1846
01:31:10,689 --> 01:31:27,729
to free a program and so I don't

1847
01:31:25,779 --> 01:31:29,229
remember much about the program thing I

1848
01:31:27,729 --> 01:31:33,969
know they have open till program common

1849
01:31:29,229 --> 01:31:36,750
so that's really all we need here and

1850
01:31:33,970 --> 01:31:43,270
I'm pretty sure that the shaders are

1851
01:31:36,750 --> 01:31:45,100
already free so let me just page this

1852
01:31:43,270 --> 01:31:49,870
back into my head how we were doing that

1853
01:31:45,100 --> 01:31:54,670
here we have a create program call right

1854
01:31:49,869 --> 01:31:56,380
you can see it and I'm not sure exactly

1855
01:31:54,670 --> 01:31:59,079
how we were doing this so here's create

1856
01:31:56,380 --> 01:32:01,359
program we specify that we want to

1857
01:31:59,079 --> 01:32:04,750
compile these shaders we then attach the

1858
01:32:01,359 --> 01:32:07,649
shaders and validate the program now I

1859
01:32:04,750 --> 01:32:12,600
think we want to actually delete the

1860
01:32:07,649 --> 01:32:12,599
shaders at this point I think

1861
01:32:13,539 --> 01:32:23,859
I think I don't know but I think we want

1862
01:32:17,260 --> 01:32:26,310
something like this let me just let me

1863
01:32:23,859 --> 01:32:26,309
just double-check

1864
01:32:36,109 --> 01:32:48,829
yes so I'm pretty sure yes you can see

1865
01:32:45,890 --> 01:32:50,750
here right like it basically says that

1866
01:32:48,829 --> 01:32:52,640
you can do this right away so we can

1867
01:32:50,750 --> 01:32:56,420
basically say like hey we don't need

1868
01:32:52,640 --> 01:32:57,650
this anymore just so you know and that

1869
01:32:56,420 --> 01:33:01,420
way we don't have to store this

1870
01:32:57,649 --> 01:33:03,799
information because we don't care right

1871
01:33:01,420 --> 01:33:05,090
so now let's say when you delete the

1872
01:33:03,800 --> 01:33:07,430
program delete the shaders it's

1873
01:33:05,090 --> 01:33:09,409
basically what it's doing so what we

1874
01:33:07,430 --> 01:33:12,340
want to do is is then say okay now we

1875
01:33:09,409 --> 01:33:16,039
need a way to delete the program proper

1876
01:33:12,340 --> 01:33:18,650
so when we come down here to that free

1877
01:33:16,039 --> 01:33:21,050
program call all we need to do now the

1878
01:33:18,649 --> 01:33:23,539
only thing that we have left over is the

1879
01:33:21,050 --> 01:33:26,360
program handle itself so we just need a

1880
01:33:23,539 --> 01:33:29,079
way to delete the program and so let's

1881
01:33:26,359 --> 01:33:31,309
go ahead and do that so frame buffer

1882
01:33:29,079 --> 01:33:37,729
oops that's in the wrong place frame

1883
01:33:31,310 --> 01:33:38,630
buffer that's good program prog and then

1884
01:33:37,729 --> 01:33:42,439
the other thing I'm going to do is I'm

1885
01:33:38,630 --> 01:33:45,289
going to set program frog to zero just

1886
01:33:42,439 --> 01:33:46,819
so we can see that it's zeroed out that

1887
01:33:45,289 --> 01:33:49,789
seems like a good idea to me anyway

1888
01:33:46,819 --> 01:33:52,009
and then here let's go ahead and say we

1889
01:33:49,789 --> 01:33:53,390
need to do our frame buffer stuff so our

1890
01:33:52,010 --> 01:33:54,380
frame buffer has a couple of different

1891
01:33:53,390 --> 01:33:56,930
things in it it's got a frame buffer

1892
01:33:54,380 --> 01:33:58,609
handle car handle a deft handle so what

1893
01:33:56,930 --> 01:34:01,909
I want to do there is I want to do like

1894
01:33:58,609 --> 01:34:04,009
GL delete textures and I want to delete

1895
01:34:01,909 --> 01:34:11,359
the texture handles and I also want to

1896
01:34:04,010 --> 01:34:16,420
delete the frame buffer so I'm going to

1897
01:34:11,359 --> 01:34:19,229
do frame buffer handle color handle

1898
01:34:16,420 --> 01:34:28,810
depth handle

1899
01:34:19,229 --> 01:34:28,809
[Applause]

1900
01:34:29,050 --> 01:34:32,840
let's see what delete frame buffers is

1901
01:34:31,880 --> 01:34:36,220
about

1902
01:34:32,840 --> 01:34:36,220
[Applause]

1903
01:34:42,498 --> 01:34:45,219
hello

1904
01:34:46,720 --> 01:34:52,659
so it's exactly the same so this will

1905
01:34:50,439 --> 01:34:54,429
delete the frame buffers and textures so

1906
01:34:52,659 --> 01:34:56,319
that they're no longer in use but what I

1907
01:34:54,430 --> 01:34:58,360
want to do is I since I don't really

1908
01:34:56,319 --> 01:35:01,090
know what these have and don't have I'm

1909
01:34:58,359 --> 01:35:02,079
going to use zero as the way of knowing

1910
01:35:01,090 --> 01:35:03,880
that they're not there now I think

1911
01:35:02,079 --> 01:35:06,189
that's allowed in OpenGL meaning I don't

1912
01:35:03,880 --> 01:35:07,600
think OpenGL will return zero I know

1913
01:35:06,189 --> 01:35:09,159
that that's true for delete framers I'm

1914
01:35:07,600 --> 01:35:11,020
pretty sure it's true for textures too

1915
01:35:09,159 --> 01:35:12,909
because you can do bind texture zero so

1916
01:35:11,020 --> 01:35:15,370
texture zero is not a valid texture to

1917
01:35:12,909 --> 01:35:17,050
be like owning so all I'm going to do

1918
01:35:15,369 --> 01:35:20,800
here is say well okay if the color

1919
01:35:17,050 --> 01:35:23,260
handle is zero don't do this right

1920
01:35:20,800 --> 01:35:26,079
assume that you never created one and

1921
01:35:23,260 --> 01:35:28,770
the same will be true with basically all

1922
01:35:26,079 --> 01:35:32,739
of these so they're just checking hey

1923
01:35:28,770 --> 01:35:34,000
you know if zeros if it's actually at a

1924
01:35:32,739 --> 01:35:37,539
second valid get rid of it otherwise

1925
01:35:34,000 --> 01:35:39,369
don't write and I think that should be

1926
01:35:37,539 --> 01:35:42,189
all we really need to do now I don't

1927
01:35:39,369 --> 01:35:45,760
know if we ever got some of these yeah

1928
01:35:42,189 --> 01:35:48,519
so delete shader delete frame buffer and

1929
01:35:45,760 --> 01:35:52,980
what is it prog handle what what is the

1930
01:35:48,520 --> 01:35:52,980
name of that actual field prog handle i

1931
01:35:53,520 --> 01:36:12,190
am nothing if not unnecessarily

1932
01:35:56,500 --> 01:36:14,350
consistent okay so looks like that's all

1933
01:36:12,189 --> 01:36:16,539
there is to it and so now I just need

1934
01:36:14,350 --> 01:36:18,640
those OpenGL calls and I think we're

1935
01:36:16,539 --> 01:36:19,899
done and then we can kind of flip back

1936
01:36:18,640 --> 01:36:22,020
and forth between them pretty much it

1937
01:36:19,899 --> 01:36:22,019
will

1938
01:36:33,569 --> 01:36:43,599
all right so let's go ahead and get

1939
01:36:36,699 --> 01:36:44,829
those we still we're not havin any

1940
01:36:43,600 --> 01:36:46,390
problems are because that web was a

1941
01:36:44,829 --> 01:36:51,909
little fishy there no dropped frames

1942
01:36:46,390 --> 01:36:53,440
good the when the web when when I went

1943
01:36:51,909 --> 01:36:55,630
slow to act as the web I always worried

1944
01:36:53,439 --> 01:36:59,979
that maybe the streaming has broken uh

1945
01:36:55,630 --> 01:37:02,710
you know or something like this this is

1946
01:36:59,979 --> 01:37:04,750
on Comcast business internet otherwise

1947
01:37:02,710 --> 01:37:06,310
known as the worst Internet service I've

1948
01:37:04,750 --> 01:37:08,920
ever used

1949
01:37:06,310 --> 01:37:10,810
if you thought Comcast home internet was

1950
01:37:08,920 --> 01:37:13,659
bad wait till you try their business

1951
01:37:10,810 --> 01:37:16,630
class service it's three times the price

1952
01:37:13,659 --> 01:37:20,279
and one-tenth the service all right

1953
01:37:16,630 --> 01:37:23,319
let's take a look what do we have for

1954
01:37:20,279 --> 01:37:26,009
for OpenGL stuff here we've got to have

1955
01:37:23,319 --> 01:37:27,689
our delete calls basically

1956
01:37:26,010 --> 01:37:31,130
[Music]

1957
01:37:27,689 --> 01:37:34,169
and or armed to the rescue

1958
01:37:31,130 --> 01:37:38,789
here comes the core ARB header there it

1959
01:37:34,170 --> 01:37:42,359
is so we need to leap program let's go

1960
01:37:38,789 --> 01:37:45,779
ahead and grab that why are there two of

1961
01:37:42,359 --> 01:37:49,739
them sweet prim pipelines okay so we

1962
01:37:45,779 --> 01:38:06,599
need these to leap program and delete

1963
01:37:49,739 --> 01:38:09,920
engineer delete shader go and it looks

1964
01:38:06,600 --> 01:38:09,920
like I need those as well

1965
01:38:15,149 --> 01:38:21,619
[Music]

1966
01:38:17,060 --> 01:38:21,620
like Price is Right theme music weekend

1967
01:38:24,670 --> 01:38:27,819
[Applause]

1968
01:38:32,119 --> 01:38:40,229
alright so we need those two and we also

1969
01:38:35,789 --> 01:38:46,140
need the delete frame buffer caulk but

1970
01:38:40,229 --> 01:38:49,049
don't think we have that either so I

1971
01:38:46,140 --> 01:38:56,600
just want to grab that one and plop it

1972
01:38:49,050 --> 01:38:56,600
in there there we go

1973
01:38:57,289 --> 01:39:10,319
and it's supposed to be delete frame

1974
01:39:04,890 --> 01:39:16,800
buffers isn't it yeah so that's

1975
01:39:10,319 --> 01:39:33,719
that's that so now I should just be able

1976
01:39:16,800 --> 01:39:35,400
to grab all these and that's good all

1977
01:39:33,720 --> 01:39:38,340
right so we've got all our up in jail

1978
01:39:35,399 --> 01:39:40,699
functions now and I think that should

1979
01:39:38,340 --> 01:39:43,369
just work

1980
01:39:40,699 --> 01:39:46,470
delete frame buffers is the actual call

1981
01:39:43,369 --> 01:39:48,750
now unfortunately there's not again

1982
01:39:46,470 --> 01:39:50,310
without a GPU debugging tool

1983
01:39:48,750 --> 01:39:54,779
unfortunately there's not a lot of good

1984
01:39:50,310 --> 01:39:58,320
ways to test this out so like oops

1985
01:39:54,779 --> 01:40:03,449
that's not what I want to do so there's

1986
01:39:58,319 --> 01:40:07,710
you know like if it was just us

1987
01:40:03,449 --> 01:40:10,739
allocating memory ourselves it would be

1988
01:40:07,710 --> 01:40:13,529
a lot easier to determine because what

1989
01:40:10,739 --> 01:40:16,109
we could do is we could look here at you

1990
01:40:13,529 --> 01:40:18,059
know the various size stuff that we're

1991
01:40:16,109 --> 01:40:21,119
looking at and we can see whether or not

1992
01:40:18,060 --> 01:40:25,380
we're like going up sort of permanently

1993
01:40:21,119 --> 01:40:27,479
or not it's harder to do in a situation

1994
01:40:25,380 --> 01:40:28,920
where we can't you know because it might

1995
01:40:27,479 --> 01:40:30,689
be the graphics card might be hiding the

1996
01:40:28,920 --> 01:40:33,090
fact and it won't be attributed

1997
01:40:30,689 --> 01:40:34,710
necessarily to our process so I'm just

1998
01:40:33,090 --> 01:40:37,279
going to wail on this for a while and

1999
01:40:34,710 --> 01:40:37,279
see where we're at

2000
01:40:49,779 --> 01:41:00,340
and again like it's like I said it's

2001
01:40:52,000 --> 01:41:01,899
really hard to say like it looks like

2002
01:41:00,340 --> 01:41:05,230
we're thrashing a little bit there

2003
01:41:01,899 --> 01:41:06,909
potentially right so I'm not super it's

2004
01:41:05,229 --> 01:41:11,649
hard I going to gets really hard to say

2005
01:41:06,909 --> 01:41:13,599
like you know maybe that's just

2006
01:41:11,649 --> 01:41:15,699
something the driver is doing naturally

2007
01:41:13,600 --> 01:41:22,990
and it's not our fault or maybe we're

2008
01:41:15,699 --> 01:41:28,750
not freeing something you know so it's a

2009
01:41:22,989 --> 01:41:31,119
little hard to know we could use a cult

2010
01:41:28,750 --> 01:41:32,619
there's card specific calls you could

2011
01:41:31,119 --> 01:41:37,180
use to figure out how much memory you

2012
01:41:32,619 --> 01:41:42,130
actually have on the card and it could

2013
01:41:37,180 --> 01:41:44,610
be that that would help help us figure

2014
01:41:42,130 --> 01:41:44,609
that out

2015
01:41:56,158 --> 01:42:01,469
yeah so it's hard to say so I'm not I'm

2016
01:41:58,469 --> 01:42:03,719
not 100% convinced I'm going to put a

2017
01:42:01,469 --> 01:42:04,980
little to do on this guy in case you

2018
01:42:03,719 --> 01:42:32,250
want to take a look at it in a little

2019
01:42:04,979 --> 01:42:35,759
more detail later so you know I think

2020
01:42:32,250 --> 01:42:37,289
I'm telling it the right things to get

2021
01:42:35,760 --> 01:42:38,520
rid of the stuff that we allocated

2022
01:42:37,289 --> 01:42:40,619
because you can see like I come through

2023
01:42:38,520 --> 01:42:43,770
here and I can look and say well ok I

2024
01:42:40,619 --> 01:42:46,380
compile for programs and create one plus

2025
01:42:43,770 --> 01:42:50,510
depth appeal count frame buffers and so

2026
01:42:46,380 --> 01:42:53,230
in theory if I free one plus four ah

2027
01:42:50,510 --> 01:42:57,679
there we go

2028
01:42:53,229 --> 01:43:06,559
[Applause]

2029
01:42:57,679 --> 01:43:09,480
ha ha let's try that one more time and

2030
01:43:06,560 --> 01:43:11,670
again this is not the right way to

2031
01:43:09,479 --> 01:43:14,879
verify this I can't stress that enough

2032
01:43:11,670 --> 01:43:18,079
it's just the poor person's way of doing

2033
01:43:14,880 --> 01:43:18,079
it at the moment

2034
01:43:37,439 --> 01:43:45,059
so I can't again really can't tell it it

2035
01:43:41,329 --> 01:43:47,850
looks a little better maybe but again I

2036
01:43:45,060 --> 01:43:50,580
can't tell that number is going up right

2037
01:43:47,850 --> 01:43:53,940
so I'm not 100% sure that everything is

2038
01:43:50,579 --> 01:43:55,769
okay but I can't tell because I don't

2039
01:43:53,939 --> 01:43:57,419
know if that's just the driver caching

2040
01:43:55,770 --> 01:43:59,700
more shader compiles or something like

2041
01:43:57,420 --> 01:44:03,090
this or whether it means I'm not freeing

2042
01:43:59,699 --> 01:44:05,099
everything right I and so in order to

2043
01:44:03,090 --> 01:44:06,690
independently verify that I need

2044
01:44:05,100 --> 01:44:08,460
something better than this but I don't

2045
01:44:06,689 --> 01:44:10,589
have anything better than this right now

2046
01:44:08,460 --> 01:44:13,109
what I want to do is see a thing that

2047
01:44:10,590 --> 01:44:16,800
says what are the open handles on this

2048
01:44:13,109 --> 01:44:19,949
thing and I'm not sure whether or not I

2049
01:44:16,800 --> 01:44:24,289
can get that so what you know what I

2050
01:44:19,949 --> 01:44:27,269
might be able to do is like GL get and

2051
01:44:24,289 --> 01:44:36,119
you know maybe I can oops I don't want

2052
01:44:27,270 --> 01:44:38,730
the OpenGL ES version maybe I can get

2053
01:44:36,119 --> 01:44:42,539
you know something here that says how

2054
01:44:38,729 --> 01:44:44,699
many of something there are so that I

2055
01:44:42,539 --> 01:44:46,260
could say you know how many of these

2056
01:44:44,699 --> 01:44:49,019
things do you think there are right now

2057
01:44:46,260 --> 01:44:51,900
and and I can verify those not going up

2058
01:44:49,020 --> 01:44:54,180
right so that would be nice

2059
01:44:51,899 --> 01:44:57,809
I don't know if there is such a thing

2060
01:44:54,180 --> 01:44:59,369
though you know I can get maximum zuv

2061
01:44:57,810 --> 01:45:01,860
stuff obviously but I don't know that I

2062
01:44:59,369 --> 01:45:08,340
can get a thing that actually tells me

2063
01:45:01,859 --> 01:45:10,549
hey how many of these things you if you

2064
01:45:08,340 --> 01:45:10,550
got

2065
01:45:20,020 --> 01:45:23,360
yeah so I guess well I'm going to leave

2066
01:45:22,069 --> 01:45:27,529
that to doing because like I said I'm

2067
01:45:23,359 --> 01:45:30,589
not not super sure about it right okay

2068
01:45:27,529 --> 01:45:33,229
so now I'm going to leave this out of

2069
01:45:30,590 --> 01:45:36,409
time here I guess I'm going to leave

2070
01:45:33,229 --> 01:45:38,449
this as is because it's in relatively

2071
01:45:36,409 --> 01:45:40,010
good shape now I'm going to leave this

2072
01:45:38,449 --> 01:45:43,579
as it is but I'm going to turn the multi

2073
01:45:40,010 --> 01:45:47,180
sampling part back on and that way we

2074
01:45:43,579 --> 01:45:56,329
can see what we have to do to in order

2075
01:45:47,180 --> 01:45:58,010
to improve that right so it oh well this

2076
01:45:56,329 --> 01:46:07,519
is we know what this is this is the

2077
01:45:58,010 --> 01:46:09,470
thing where we can't create a srgb well

2078
01:46:07,520 --> 01:46:15,170
no that isn't what this is this is

2079
01:46:09,470 --> 01:46:17,960
probably the this is probably the fact

2080
01:46:15,170 --> 01:46:21,079
that we can't read from a leak we are

2081
01:46:17,960 --> 01:46:23,300
not allowed to read from a texture

2082
01:46:21,079 --> 01:46:33,769
that's multi sampled as if it was normal

2083
01:46:23,300 --> 01:46:37,390
right I assume is what that is all right

2084
01:46:33,770 --> 01:46:37,390
so that's what we have to do

2085
01:46:49,310 --> 01:46:52,719
[Applause]

2086
01:46:57,270 --> 01:47:01,500
and so we've got ourselves set up now so

2087
01:46:59,699 --> 01:47:03,960
that we can do these switches and we

2088
01:47:01,500 --> 01:47:05,369
should be good to go pretty much and we

2089
01:47:03,960 --> 01:47:09,210
can change the resolution on the fly as

2090
01:47:05,369 --> 01:47:10,619
well so if we want to and so we should

2091
01:47:09,210 --> 01:47:12,359
be in a good position for next weekend

2092
01:47:10,619 --> 01:47:14,039
to get multi sampling working clean up

2093
01:47:12,359 --> 01:47:17,250
those jaggies and anything else that we

2094
01:47:14,039 --> 01:47:19,529
might want to do there i and i'm

2095
01:47:17,250 --> 01:47:20,880
guessing like i don't really know how

2096
01:47:19,529 --> 01:47:23,759
we're going to approach it necessarily

2097
01:47:20,880 --> 01:47:27,720
but my assumption is we probably don't

2098
01:47:23,760 --> 01:47:29,789
quite want to do it like we don't need

2099
01:47:27,720 --> 01:47:31,530
multi sampling on all of our depth

2100
01:47:29,789 --> 01:47:33,390
fields probably we probably just need

2101
01:47:31,529 --> 01:47:36,719
multi sampling on the front most def

2102
01:47:33,390 --> 01:47:38,490
peel would be my guess and any depth

2103
01:47:36,720 --> 01:47:39,920
peels beyond that probably just don't

2104
01:47:38,489 --> 01:47:42,210
need it that would be my guess

2105
01:47:39,920 --> 01:47:44,609
furthermore the z-buffer probably

2106
01:47:42,210 --> 01:47:47,250
doesn't really need to be done that way

2107
01:47:44,609 --> 01:47:52,939
so I think probably what we'll do is

2108
01:47:47,250 --> 01:47:58,470
just multi sample the front color buffer

2109
01:47:52,939 --> 01:48:00,359
and that would be it right so multi

2110
01:47:58,470 --> 01:48:02,820
sample the front color buffer bleed it

2111
01:48:00,359 --> 01:48:05,899
down to a regular buffer rest of the

2112
01:48:02,819 --> 01:48:10,639
pipeline as normal that be my assumption

2113
01:48:05,899 --> 01:48:10,639
all right let's go to a Q&amp;A

2114
01:48:14,599 --> 01:48:19,300
oops there we go

2115
01:49:03,609 --> 01:49:08,658
Gary Johansson so one of my left-field

2116
01:49:06,948 --> 01:49:10,939
questions do you think there is a case

2117
01:49:08,658 --> 01:49:12,828
we made for a GL implementation to be

2118
01:49:10,939 --> 01:49:15,529
written an open CL open til having class

2119
01:49:12,828 --> 01:49:17,149
we do natively run on the CPU and it's

2120
01:49:15,529 --> 01:49:19,460
compatible with Visual Studio so you

2121
01:49:17,149 --> 01:49:21,888
could CPU debug your OpenGL code in

2122
01:49:19,460 --> 01:49:23,719
Visual Studio with that capacity solve

2123
01:49:21,889 --> 01:49:25,578
the OpenGL debug problem or is the

2124
01:49:23,719 --> 01:49:27,500
problem typically somewhere else like

2125
01:49:25,578 --> 01:49:31,118
actual problems with a baked GPU

2126
01:49:27,500 --> 01:49:31,118
functionality if that all makes sense

2127
01:49:31,539 --> 01:49:42,279
yeah so I guess what I would say is

2128
01:49:35,078 --> 01:49:47,289
I guess what I would say is there's many

2129
01:49:42,279 --> 01:49:52,009
aspects to the GPU programming problem

2130
01:49:47,289 --> 01:49:53,868
and I don't think they would get solved

2131
01:49:52,010 --> 01:49:57,020
by what you're suggesting first let me

2132
01:49:53,868 --> 01:50:00,710
point out that open feel isn't the only

2133
01:49:57,020 --> 01:50:04,750
thing that can be debugged right on the

2134
01:50:00,710 --> 01:50:07,969
on the GPU you can install insight and

2135
01:50:04,750 --> 01:50:09,828
you know when if you wave a dead chicken

2136
01:50:07,969 --> 01:50:12,289
and that the full moon and whatever else

2137
01:50:09,828 --> 01:50:17,269
right you can step through your shader

2138
01:50:12,289 --> 01:50:18,948
code and that's a huge bonus right that

2139
01:50:17,270 --> 01:50:20,690
means that shader code can kind of be

2140
01:50:18,948 --> 01:50:22,000
debugged sort of like normal code and

2141
01:50:20,689 --> 01:50:24,500
that's pretty awesome

2142
01:50:22,000 --> 01:50:27,439
now I don't think that's actually

2143
01:50:24,500 --> 01:50:29,359
similar to how CPUs get debugged I don't

2144
01:50:27,439 --> 01:50:33,379
think what they're actually doing there

2145
01:50:29,359 --> 01:50:34,729
is interrupting the program in the

2146
01:50:33,380 --> 01:50:35,779
middle of running the shader and looking

2147
01:50:34,729 --> 01:50:37,399
at the values which is what's happening

2148
01:50:35,779 --> 01:50:38,509
on a CPU

2149
01:50:37,399 --> 01:50:39,738
I think what's actually probably

2150
01:50:38,510 --> 01:50:41,599
happening is they're just running

2151
01:50:39,738 --> 01:50:43,578
something that inserts something that

2152
01:50:41,599 --> 01:50:45,349
writes out the state at that point in

2153
01:50:43,578 --> 01:50:47,118
the shader and then pulls it back or

2154
01:50:45,349 --> 01:50:49,969
something and then just reruns the whole

2155
01:50:47,118 --> 01:50:53,569
thing again to get to the next step or

2156
01:50:49,969 --> 01:50:56,300
whatever I don't know but I don't really

2157
01:50:53,569 --> 01:50:58,340
know how much debugging support GPUs

2158
01:50:56,300 --> 01:50:59,960
actually have in the same way that like

2159
01:50:58,340 --> 01:51:03,828
an Intel chip has to bug your support

2160
01:50:59,960 --> 01:51:08,840
right so I don't really know about that

2161
01:51:03,828 --> 01:51:10,670
either way but it for purposes of most

2162
01:51:08,840 --> 01:51:14,119
debugging operations you might want to

2163
01:51:10,670 --> 01:51:16,460
do the appearance of debugging shader

2164
01:51:14,118 --> 01:51:16,899
code is good enough on something like M

2165
01:51:16,460 --> 01:51:19,658
site

2166
01:51:16,899 --> 01:51:22,089
to get you by and I feel like that's

2167
01:51:19,658 --> 01:51:23,619
really all you would get from the OpenCL

2168
01:51:22,090 --> 01:51:28,150
suggestion that you're talking about

2169
01:51:23,619 --> 01:51:31,029
there and the reason I think that is

2170
01:51:28,149 --> 01:51:35,198
because there's so much more to the GPU

2171
01:51:31,029 --> 01:51:38,380
problem than that so first of all the

2172
01:51:35,198 --> 01:51:40,809
biggest problem with GPU isn't really

2173
01:51:38,380 --> 01:51:43,900
the fact that it's harder to debug the

2174
01:51:40,810 --> 01:51:45,850
GPU it's the fact that you have no idea

2175
01:51:43,899 --> 01:51:49,719
what the GPU is actually going to do at

2176
01:51:45,850 --> 01:51:52,420
all right on x64 there is a

2177
01:51:49,719 --> 01:51:54,939
specification that says here is the

2178
01:51:52,420 --> 01:51:57,100
binary format that will get submitted to

2179
01:51:54,939 --> 01:51:59,529
the chip and here is what that will do

2180
01:51:57,100 --> 01:52:02,020
and it's incredibly incredibly

2181
01:51:59,529 --> 01:52:04,448
incredibly rigorous like as rigorous as

2182
01:52:02,020 --> 01:52:05,800
anything else in computing certainly far

2183
01:52:04,448 --> 01:52:07,919
more rigorous than something like a

2184
01:52:05,800 --> 01:52:10,900
language specification like the C or C++

2185
01:52:07,920 --> 01:52:14,380
specifications it's way more rigorous

2186
01:52:10,899 --> 01:52:16,420
than that right and what that means is

2187
01:52:14,380 --> 01:52:18,969
that a programmer at the lowest level

2188
01:52:16,420 --> 01:52:21,819
can know exactly what the chip is

2189
01:52:18,969 --> 01:52:23,890
supposed to do and Intel has literally a

2190
01:52:21,819 --> 01:52:26,529
hardware bug which occasionally they do

2191
01:52:23,890 --> 01:52:29,890
have but very rarely if it does not do

2192
01:52:26,529 --> 01:52:32,439
that right and the times when I have hit

2193
01:52:29,890 --> 01:52:34,989
a hardware bug in an Intel CPU is

2194
01:52:32,439 --> 01:52:37,599
actually zero they have had them but I

2195
01:52:34,988 --> 01:52:40,329
have literally never had that happen to

2196
01:52:37,600 --> 01:52:45,370
be in practice on a bug I was debugging

2197
01:52:40,329 --> 01:52:48,179
ever not a single time and I've been

2198
01:52:45,369 --> 01:52:59,349
programming Intel chips since probably

2199
01:52:48,179 --> 01:53:01,980
nineteen eighty five or six right

2200
01:52:59,350 --> 01:53:01,980
earlier than that

2201
01:53:02,949 --> 01:53:07,029
I don't remember I have been programming

2202
01:53:04,869 --> 01:53:09,069
Intel chips for a very very very long

2203
01:53:07,029 --> 01:53:13,210
time and that has never happened right

2204
01:53:09,069 --> 01:53:14,859
on the other hand on the GPU side of

2205
01:53:13,210 --> 01:53:17,439
things you have none of those things

2206
01:53:14,859 --> 01:53:20,170
there are driver or Hardware bugs all

2207
01:53:17,439 --> 01:53:22,409
the time you are very likely to hit some

2208
01:53:20,170 --> 01:53:25,000
especially the driver bugs right and

2209
01:53:22,409 --> 01:53:28,750
there is no specification for what's

2210
01:53:25,000 --> 01:53:32,319
supposed to happen at all right so you

2211
01:53:28,750 --> 01:53:33,970
have no idea even like what the ordering

2212
01:53:32,319 --> 01:53:36,189
requirements are for a lot of the things

2213
01:53:33,970 --> 01:53:40,329
in what you're doing you don't even

2214
01:53:36,189 --> 01:53:43,539
really know any of that stuff right to a

2215
01:53:40,329 --> 01:53:45,250
certain extent OpenGL specifies or you

2216
01:53:43,539 --> 01:53:48,100
know certain graphic standards set by

2217
01:53:45,250 --> 01:53:49,840
certain things like two subsequent draws

2218
01:53:48,100 --> 01:53:52,120
have to appear like they happened in

2219
01:53:49,840 --> 01:53:54,069
that order if they target the same frame

2220
01:53:52,119 --> 01:53:56,199
buffer or something like this right you

2221
01:53:54,069 --> 01:53:59,159
know some of those sorts of things but

2222
01:53:56,199 --> 01:54:02,859
that's about all you really know and so

2223
01:53:59,159 --> 01:54:06,189
there's no binary specification there's

2224
01:54:02,859 --> 01:54:08,009
no rigorous specification for anything

2225
01:54:06,189 --> 01:54:10,239
else

2226
01:54:08,010 --> 01:54:11,770
there's not even rigorous specifications

2227
01:54:10,239 --> 01:54:13,239
for how many of things there are right

2228
01:54:11,770 --> 01:54:14,440
there completely variable like I don't

2229
01:54:13,239 --> 01:54:16,539
know how many textures going to read

2230
01:54:14,439 --> 01:54:19,329
from how many frame buffers can I have

2231
01:54:16,539 --> 01:54:20,979
how many whatever right it's not like a

2232
01:54:19,329 --> 01:54:23,409
CPU where the only variables really like

2233
01:54:20,979 --> 01:54:25,989
memory and thread count

2234
01:54:23,409 --> 01:54:28,630
there's tons of variables on a card even

2235
01:54:25,989 --> 01:54:32,349
stuff like can it do this thing like you

2236
01:54:28,630 --> 01:54:34,869
know are very are not even they're not

2237
01:54:32,350 --> 01:54:38,350
at the instruction level they're like at

2238
01:54:34,869 --> 01:54:41,609
a whole conceptual level right so I feel

2239
01:54:38,350 --> 01:54:44,110
like when you're in that situation and

2240
01:54:41,609 --> 01:54:45,460
there's so much machinery you have no

2241
01:54:44,109 --> 01:54:46,779
idea what's going on you write this

2242
01:54:45,460 --> 01:54:48,460
thing it goes through all kinds of

2243
01:54:46,779 --> 01:54:49,809
drivers software first then it does all

2244
01:54:48,460 --> 01:54:50,680
kinds of things in the hardware that you

2245
01:54:49,810 --> 01:54:52,600
don't know what it's doing

2246
01:54:50,680 --> 01:54:54,190
you can't inspect any of that you can't

2247
01:54:52,600 --> 01:54:57,010
step into the driver you got none of

2248
01:54:54,189 --> 01:55:01,059
this stuff that's really the biggest

2249
01:54:57,010 --> 01:55:03,310
bulk of the problem and having that run

2250
01:55:01,060 --> 01:55:04,870
and OpenCL all that would tell you is

2251
01:55:03,310 --> 01:55:07,360
what happens on the OpenCL

2252
01:55:04,869 --> 01:55:09,819
implementation of this thing but that's

2253
01:55:07,359 --> 01:55:11,349
really not relevant to you I mean maybe

2254
01:55:09,819 --> 01:55:13,840
it would help you get stuff working

2255
01:55:11,350 --> 01:55:15,430
where the only problem with it is you're

2256
01:55:13,840 --> 01:55:15,679
misunderstanding about something in the

2257
01:55:15,430 --> 01:55:17,480
a

2258
01:55:15,679 --> 01:55:20,510
now you can step through and see a

2259
01:55:17,479 --> 01:55:23,149
reference implementation of it but

2260
01:55:20,510 --> 01:55:24,679
that's about all you would get so I

2261
01:55:23,149 --> 01:55:28,488
think the far more interesting thing is

2262
01:55:24,679 --> 01:55:30,920
to say can we stop doing things this way

2263
01:55:28,488 --> 01:55:32,988
and instead move towards a thing where

2264
01:55:30,920 --> 01:55:36,679
we have a rigorous specification for an

2265
01:55:32,988 --> 01:55:38,839
is a like x64 where that's what you

2266
01:55:36,679 --> 01:55:43,100
write and that is what the graphics card

2267
01:55:38,840 --> 01:55:45,260
has to execute right and the reason that

2268
01:55:43,100 --> 01:55:47,659
we don't do that is again because it's

2269
01:55:45,260 --> 01:55:50,329
GPU vendors want the ability to innovate

2270
01:55:47,658 --> 01:55:51,920
across all aspects of their pipeline and

2271
01:55:50,329 --> 01:55:55,250
they want as much flexibility to do that

2272
01:55:51,920 --> 01:55:57,739
as possible that'd be great

2273
01:55:55,250 --> 01:55:59,710
if the primary problem these days with

2274
01:55:57,738 --> 01:56:03,738
graphics performance unfortunately for

2275
01:55:59,710 --> 01:56:08,060
99% of applications it's not the primary

2276
01:56:03,738 --> 01:56:10,428
problem is reliability right and so

2277
01:56:08,060 --> 01:56:13,070
we're at a point where the trade-off of

2278
01:56:10,429 --> 01:56:15,050
performance at all cost is a very bad

2279
01:56:13,069 --> 01:56:18,139
trade-off to be making and what I think

2280
01:56:15,050 --> 01:56:20,449
we would much rather have is stability

2281
01:56:18,140 --> 01:56:22,070
like we have on x6 before where yes

2282
01:56:20,448 --> 01:56:23,238
every year they try very hard to get

2283
01:56:22,069 --> 01:56:26,289
more performance but they don't

2284
01:56:23,238 --> 01:56:32,569
sacrifice rigorous specification and

2285
01:56:26,289 --> 01:56:35,238
reliable execution to get it so a GPU is

2286
01:56:32,569 --> 01:56:37,549
a where we just have a binary format

2287
01:56:35,238 --> 01:56:40,158
that's basically the same kind of thing

2288
01:56:37,550 --> 01:56:44,350
as x64 that gets handed over and gets

2289
01:56:40,158 --> 01:56:44,349
executed on the GPU like a normal chip

2290
01:56:44,679 --> 01:56:50,658
that is really the thing that we want I

2291
01:56:47,238 --> 01:56:53,629
am 100% certain that would be better for

2292
01:56:50,658 --> 01:56:56,179
just about everybody except for the very

2293
01:56:53,630 --> 01:56:58,400
very small case of people who are only

2294
01:56:56,179 --> 01:56:59,779
concerned about getting the absolute

2295
01:56:58,399 --> 01:57:02,149
maximum performance out of every

2296
01:56:59,779 --> 01:57:05,059
generation which is almost nobody these

2297
01:57:02,149 --> 01:57:09,710
days ten years ago it was a lot more

2298
01:57:05,060 --> 01:57:14,300
people nowadays it's nobody right you

2299
01:57:09,710 --> 01:57:15,948
know it's one or two games a year and I

2300
01:57:14,300 --> 01:57:18,320
just don't think running our whole

2301
01:57:15,948 --> 01:57:21,349
industry off of the needs of one or two

2302
01:57:18,319 --> 01:57:23,269
games a year it's a very good idea and I

2303
01:57:21,350 --> 01:57:25,760
realize that's not something that GPU

2304
01:57:23,270 --> 01:57:27,469
vendors want to hear but I don't know I

2305
01:57:25,760 --> 01:57:29,449
don't think it's really necessarily the

2306
01:57:27,469 --> 01:57:31,609
case that the only thing people will

2307
01:57:29,449 --> 01:57:34,489
drive GPU sales is performance I think

2308
01:57:31,609 --> 01:57:37,009
stability is a big driver of of sales

2309
01:57:34,489 --> 01:57:38,869
and I think that there's a world out

2310
01:57:37,010 --> 01:57:40,640
there that does have a lot of economic

2311
01:57:38,869 --> 01:57:49,750
benefits that's just a world where GPU

2312
01:57:40,640 --> 01:57:52,640
vendors deliver reliability you know and

2313
01:57:49,750 --> 01:57:54,050
you know as an answer I do think there

2314
01:57:52,640 --> 01:57:58,670
are performance gains to be had by

2315
01:57:54,050 --> 01:58:01,369
having a known targetable chip also a

2316
01:57:58,670 --> 01:58:02,779
known target Eliza I think you know we

2317
01:58:01,369 --> 01:58:05,659
may get some of that performance that

2318
01:58:02,779 --> 01:58:07,399
you lose from the flexible changes that

2319
01:58:05,659 --> 01:58:09,619
GPU vendors can make under a non

2320
01:58:07,399 --> 01:58:12,889
specified but not having an ice ax

2321
01:58:09,619 --> 01:58:14,899
I think specifying an ice ax does have

2322
01:58:12,890 --> 01:58:16,220
programming benefits that will get some

2323
01:58:14,899 --> 01:58:18,199
of that performance back because now

2324
01:58:16,220 --> 01:58:19,640
people are not there's no driver in the

2325
01:58:18,199 --> 01:58:21,829
way anymore drivers have traditionally a

2326
01:58:19,640 --> 01:58:23,240
huge source of inefficiency that would

2327
01:58:21,829 --> 01:58:26,539
go away because there's now no longer a

2328
01:58:23,239 --> 01:58:28,429
driver right or if there's a driver it's

2329
01:58:26,539 --> 01:58:30,350
incredibly minimal in generic just like

2330
01:58:28,430 --> 01:58:32,600
you know there's no Intel you don't then

2331
01:58:30,350 --> 01:58:36,800
install a driver for your x64 chip

2332
01:58:32,600 --> 01:58:40,100
beyond just the basics of you know the

2333
01:58:36,800 --> 01:58:44,409
the basic windows sort of like CPU

2334
01:58:40,100 --> 01:58:44,410
thunking stuff

2335
01:58:48,630 --> 01:58:52,300
then I called up Casey I started to

2336
01:58:50,829 --> 01:58:53,800
program more like the way you teach and

2337
01:58:52,300 --> 01:58:55,390
I'm liking it so far but there's one

2338
01:58:53,800 --> 01:58:57,670
thing that makes you feel strange when

2339
01:58:55,390 --> 01:58:59,920
using struts to set up some data that

2340
01:58:57,670 --> 01:59:01,480
will be used by a function later how

2341
01:58:59,920 --> 01:59:03,250
could I make sure that I won't forget to

2342
01:59:01,479 --> 01:59:05,500
set some member of that struct before

2343
01:59:03,250 --> 01:59:07,329
calling that function is there a way to

2344
01:59:05,500 --> 01:59:09,130
make sure I always initialize every

2345
01:59:07,329 --> 01:59:13,569
member of the structure to a value other

2346
01:59:09,130 --> 01:59:16,390
than 0 no there really isn't a way to do

2347
01:59:13,569 --> 01:59:19,479
that that's why I tend to use very

2348
01:59:16,390 --> 01:59:23,860
specifically in most cases clear to 0 as

2349
01:59:19,479 --> 01:59:25,119
the default so calling something in

2350
01:59:23,859 --> 01:59:27,130
passing a structure that's like all

2351
01:59:25,119 --> 01:59:30,670
zeros is the default way to use it and

2352
01:59:27,130 --> 01:59:34,690
setting things involves setting things

2353
01:59:30,670 --> 01:59:39,310
to non zero values I would say in

2354
01:59:34,689 --> 01:59:41,559
general if what you need to do is you

2355
01:59:39,310 --> 01:59:43,180
need to ensure that everything is set

2356
01:59:41,560 --> 01:59:45,039
and it can be very hard for you to debug

2357
01:59:43,180 --> 01:59:47,740
your code if you can't guarantee that

2358
01:59:45,039 --> 01:59:49,930
then I would advise against passing

2359
01:59:47,739 --> 01:59:51,819
things as structs to the entry level

2360
01:59:49,930 --> 01:59:53,289
function and what I would do is make a

2361
01:59:51,819 --> 01:59:54,849
wrapper function around your function

2362
01:59:53,289 --> 01:59:56,439
that just has all the parameters of the

2363
01:59:54,850 --> 02:00:00,400
struct and that way you have to pass

2364
01:59:56,439 --> 02:00:02,529
them all right the other thing that I'll

2365
02:00:00,399 --> 02:00:03,609
often do is if I don't care about the

2366
02:00:02,529 --> 02:00:07,479
performance in that particular area

2367
02:00:03,609 --> 02:00:12,369
which most of the time you don't I would

2368
02:00:07,479 --> 02:00:14,169
say oh there's some call or some struck

2369
02:00:12,369 --> 02:00:17,649
that's like default version of this

2370
02:00:14,170 --> 02:00:19,840
thing and I call that and I start with

2371
02:00:17,649 --> 02:00:22,479
that always so you do struct you know

2372
02:00:19,840 --> 02:00:25,300
whatever the struct is foo params equals

2373
02:00:22,479 --> 02:00:32,079
default foo params then you set the ones

2374
02:00:25,300 --> 02:00:33,250
you care about then you call right as we

2375
02:00:32,079 --> 02:00:34,359
might why do you type this some

2376
02:00:33,250 --> 02:00:35,619
structure in the render layer but not

2377
02:00:34,359 --> 02:00:37,539
all of them

2378
02:00:35,619 --> 02:00:38,949
we don't really typed F anything in

2379
02:00:37,539 --> 02:00:44,100
hand-made here because you don't need to

2380
02:00:38,949 --> 02:00:46,029
in C++ but in the platform layer

2381
02:00:44,100 --> 02:00:49,270
definitions things that are exposed to

2382
02:00:46,029 --> 02:00:51,880
platform layer we have to and the reason

2383
02:00:49,270 --> 02:00:55,420
for that is that some people are using C

2384
02:00:51,880 --> 02:00:58,539
like languages and they want to use this

2385
02:00:55,420 --> 02:01:00,469
for just the platform layer like Swift

2386
02:00:58,539 --> 02:01:02,300
or whatever or things like this

2387
02:01:00,469 --> 02:01:04,969
I guess it helps them out it was it was

2388
02:01:02,300 --> 02:01:06,769
by request people asked us to do that so

2389
02:01:04,969 --> 02:01:10,010
it makes it easier to compile on these

2390
02:01:06,769 --> 02:01:11,449
other platforms like objective-c maybe I

2391
02:01:10,010 --> 02:01:13,820
don't know what they I don't remember

2392
02:01:11,448 --> 02:01:15,169
which ones they were that they were

2393
02:01:13,819 --> 02:01:17,210
asking for that because it made it

2394
02:01:15,170 --> 02:01:20,599
easier for them to do something that's

2395
02:01:17,210 --> 02:01:22,460
the only reason they're in there C++

2396
02:01:20,599 --> 02:01:24,498
code you'd never have to type def

2397
02:01:22,460 --> 02:01:26,210
Struck's because structs automatically

2398
02:01:24,498 --> 02:01:28,538
type def in C++ that's just how that

2399
02:01:26,210 --> 02:01:28,538
works

2400
02:01:34,560 --> 02:01:39,490
Nicola Casey do you remove the certs

2401
02:01:37,119 --> 02:01:47,619
when shipping a game yet typically you

2402
02:01:39,489 --> 02:01:49,659
just compile them out it's used in a

2403
02:01:47,619 --> 02:01:50,800
sense Vulcan provides you in ISO with

2404
02:01:49,659 --> 02:01:54,550
strict specification but the

2405
02:01:50,800 --> 02:01:55,570
initialization code is quite fat no it

2406
02:01:54,550 --> 02:01:58,060
really doesn't

2407
02:01:55,569 --> 02:02:00,789
Vulcan does not specify anything even

2408
02:01:58,060 --> 02:02:03,160
remotely similar to and I say and not

2409
02:02:00,789 --> 02:02:05,229
only does it not specify an ISA but it

2410
02:02:03,159 --> 02:02:07,680
doesn't even provide an interface to

2411
02:02:05,229 --> 02:02:14,589
what you would want and I say to be

2412
02:02:07,680 --> 02:02:16,420
right it's it's just not even close

2413
02:02:14,590 --> 02:02:19,930
right I

2414
02:02:16,420 --> 02:02:22,119
I mean Vulcan doesn't even have in it

2415
02:02:19,930 --> 02:02:25,930
the concept that things have to support

2416
02:02:22,119 --> 02:02:28,359
bind list right and in is a that you

2417
02:02:25,930 --> 02:02:31,270
would create today has to be bind bus I

2418
02:02:28,359 --> 02:02:32,769
mean that's just a basic tenet of what

2419
02:02:31,270 --> 02:02:34,360
you would want an I say to be going

2420
02:02:32,770 --> 02:02:38,260
forward and it doesn't even really even

2421
02:02:34,359 --> 02:02:39,969
support it pretty much unex tended the

2422
02:02:38,260 --> 02:02:42,869
Vulcan the last time I looked at Fokin

2423
02:02:39,970 --> 02:02:45,940
it didn't even support it at all

2424
02:02:42,869 --> 02:02:50,199
right like it had extremely weak support

2425
02:02:45,939 --> 02:02:52,000
for non-binding non-binding workflows

2426
02:02:50,199 --> 02:02:56,260
you know non-binding attack laws and

2427
02:02:52,000 --> 02:02:58,630
that should be the default flow right so

2428
02:02:56,260 --> 02:03:01,090
so yeah Vulcan is in no way a nice 'it's

2429
02:02:58,630 --> 02:03:02,770
not even close and unless they made

2430
02:03:01,090 --> 02:03:04,150
significant changes to it compared to

2431
02:03:02,770 --> 02:03:06,460
the last one I looked at which they may

2432
02:03:04,149 --> 02:03:08,409
have so you know I could be wrong about

2433
02:03:06,460 --> 02:03:10,930
saying that but unless they made major

2434
02:03:08,409 --> 02:03:13,090
changes to it in the the final version

2435
02:03:10,930 --> 02:03:14,619
they weren't they weren't even close to

2436
02:03:13,090 --> 02:03:16,600
defining and I said they weren't even in

2437
02:03:14,619 --> 02:03:18,819
the ballpark of defining an ISA and the

2438
02:03:16,600 --> 02:03:20,440
things that they did define the API how

2439
02:03:18,819 --> 02:03:24,130
they did define to work are just not

2440
02:03:20,439 --> 02:03:27,399
even close to right for a for the way

2441
02:03:24,130 --> 02:03:30,880
you would want a modern GPU interface to

2442
02:03:27,399 --> 02:03:32,799
work in my opinion and I believe I could

2443
02:03:30,880 --> 02:03:35,279
be wrong but I believe the reason for

2444
02:03:32,800 --> 02:03:38,500
that is wanting to support old hardware

2445
02:03:35,279 --> 02:03:40,840
you know Vulcan was not designed to be a

2446
02:03:38,500 --> 02:03:43,479
modern API it was designed actually to

2447
02:03:40,840 --> 02:03:45,760
be a very backwards compatible API it

2448
02:03:43,479 --> 02:03:48,049
was designed to support ships that are

2449
02:03:45,760 --> 02:03:50,360
quite old at this point

2450
02:03:48,050 --> 02:03:52,610
and that are quite underpowered compared

2451
02:03:50,359 --> 02:03:58,630
to what we would want in a modern ice ax

2452
02:03:52,609 --> 02:03:58,630
to look like and that's a real shame

2453
02:04:01,090 --> 02:04:09,380
jesse 23 I didn't quite understand how

2454
02:04:06,949 --> 02:04:12,019
OpenGL and multi-threading can cooperate

2455
02:04:09,380 --> 02:04:14,119
I believe you once said in an episode

2456
02:04:12,020 --> 02:04:16,160
that OpenGL context is specific to the

2457
02:04:14,119 --> 02:04:18,109
threads that created it so if I create

2458
02:04:16,159 --> 02:04:19,729
the context on a main thread can I not

2459
02:04:18,109 --> 02:04:21,589
have other worker threads call into

2460
02:04:19,729 --> 02:04:26,389
OpenGL without somehow setting the

2461
02:04:21,590 --> 02:04:28,909
context for each thread so OpenGL if you

2462
02:04:26,390 --> 02:04:30,920
don't use extensions to open jail it

2463
02:04:28,909 --> 02:04:33,260
doesn't really handle multi-threading

2464
02:04:30,920 --> 02:04:35,690
properly that's one of the biggest

2465
02:04:33,260 --> 02:04:37,340
problems with OpenGL and one of the

2466
02:04:35,689 --> 02:04:39,409
reasons why it's really still a legacy

2467
02:04:37,340 --> 02:04:42,430
API is that the multi-threading model

2468
02:04:39,409 --> 02:04:47,180
ended up in jail just doesn't work

2469
02:04:42,430 --> 02:04:48,680
extension wise it works just fine for

2470
02:04:47,180 --> 02:04:51,050
the most part if you're willing to use

2471
02:04:48,680 --> 02:04:52,850
like you know Nvidia extended OpenGL for

2472
02:04:51,050 --> 02:04:56,119
example there's you can pretty much

2473
02:04:52,850 --> 02:04:57,980
write exactly what you want to write and

2474
02:04:56,119 --> 02:04:59,750
there's only really one place that it

2475
02:04:57,979 --> 02:05:02,269
falls down and it's a place that's not

2476
02:04:59,750 --> 02:05:04,699
that bad to work around do I wish they

2477
02:05:02,270 --> 02:05:06,140
had extension to fix that too sure but

2478
02:05:04,699 --> 02:05:07,609
that's really only the in the platform

2479
02:05:06,140 --> 02:05:09,860
layer it's in the wiggle part of things

2480
02:05:07,609 --> 02:05:13,519
not in the open regular OpenGL part of

2481
02:05:09,859 --> 02:05:15,859
things so yes so extended OpenGL works

2482
02:05:13,520 --> 02:05:18,410
really great stock OpenGL is absolutely

2483
02:05:15,859 --> 02:05:21,139
horrible and again that's because of

2484
02:05:18,409 --> 02:05:22,819
this emphasis on binding and context

2485
02:05:21,140 --> 02:05:24,289
that you really don't even want and it

2486
02:05:22,819 --> 02:05:26,210
actually makes development more

2487
02:05:24,289 --> 02:05:28,149
difficult but it's just a legacy of how

2488
02:05:26,210 --> 02:05:31,730
OpenGL and they've kind of clung to it

2489
02:05:28,149 --> 02:05:34,219
but when you go to bind list if you go

2490
02:05:31,729 --> 02:05:36,019
to bind list plus MV command list you're

2491
02:05:34,220 --> 02:05:37,820
no longer talking to the driver pretty

2492
02:05:36,020 --> 02:05:39,910
much at all there's just one thing

2493
02:05:37,819 --> 02:05:42,170
that's like hey here's a giant batch of

2494
02:05:39,909 --> 02:05:44,210
Norma's amount of things to do go do it

2495
02:05:42,170 --> 02:05:49,760
is the only call and that's pretty easy

2496
02:05:44,210 --> 02:05:51,560
to keep on one thread right so but yeah

2497
02:05:49,760 --> 02:05:54,770
regular OpenGL no it's just I mean it's

2498
02:05:51,560 --> 02:05:57,530
it I could describe the various ways you

2499
02:05:54,770 --> 02:06:00,670
can try to get threading out of OpenGL

2500
02:05:57,529 --> 02:06:00,670
but really I

2501
02:06:00,929 --> 02:06:06,770
really you just can't you can try but

2502
02:06:03,899 --> 02:06:08,819
you will get beaten down severely and

2503
02:06:06,770 --> 02:06:10,500
partially by just this way it's

2504
02:06:08,819 --> 02:06:14,908
specified it just doesn't work

2505
02:06:10,500 --> 02:06:17,520
multi-threaded but more more than that

2506
02:06:14,908 --> 02:06:19,349
because you know if you read the spec

2507
02:06:17,520 --> 02:06:21,330
for OpenGL literally there are ways you

2508
02:06:19,350 --> 02:06:23,429
could make it work

2509
02:06:21,329 --> 02:06:25,140
the real problem is when you actually go

2510
02:06:23,429 --> 02:06:28,230
to try and run it it doesn't work on any

2511
02:06:25,140 --> 02:06:30,810
drivers and I mean literally any trying

2512
02:06:28,229 --> 02:06:33,149
to run OpenGL in heavy parallel

2513
02:06:30,810 --> 02:06:34,920
environments it just forget it

2514
02:06:33,149 --> 02:06:37,738
either you will just run into

2515
02:06:34,920 --> 02:06:42,000
straight-up non-functional scenarios or

2516
02:06:37,738 --> 02:06:44,158
you will end up with low performance one

2517
02:06:42,000 --> 02:06:48,029
of the - I've never seen anyone do get

2518
02:06:44,158 --> 02:06:49,769
anything else but like I said if what

2519
02:06:48,029 --> 02:06:52,319
you want is heavy multi-threading and

2520
02:06:49,770 --> 02:06:53,820
you don't mind about specified you know

2521
02:06:52,319 --> 02:06:58,319
being more specific to a graphics card

2522
02:06:53,819 --> 02:07:01,139
or to extended OpenGL can actually

2523
02:06:58,319 --> 02:07:02,698
support it quite well while your

2524
02:07:01,140 --> 02:07:04,800
submission calls still have to be single

2525
02:07:02,698 --> 02:07:06,379
threaded literally everything else can

2526
02:07:04,800 --> 02:07:09,600
be multi-threaded and you can make

2527
02:07:06,380 --> 02:07:12,890
almost no submission calls you know you

2528
02:07:09,600 --> 02:07:12,890
can get it down to just a few a frame

2529
02:07:13,158 --> 02:07:18,049
even for millions and millions of draw

2530
02:07:15,359 --> 02:07:18,049
calls right

2531
02:07:38,670 --> 02:07:44,579
all right are we done with queues I

2532
02:07:41,619 --> 02:07:44,579
think we are done with questions

2533
02:07:45,420 --> 02:07:48,420
probably

2534
02:07:49,289 --> 02:07:52,479
[Music]

2535
02:08:18,389 --> 02:08:23,510
alright looks like we're done

2536
02:08:27,180 --> 02:08:33,070
okay thank you everyone for joining me

2537
02:08:31,899 --> 02:08:34,210
for know sort of handmade here oh it's

2538
02:08:33,069 --> 02:08:36,460
been a pleasure coding with you as

2539
02:08:34,210 --> 02:08:38,050
always if you would like to follow along

2540
02:08:36,460 --> 02:08:40,480
with series at home you can always peer

2541
02:08:38,050 --> 02:08:42,820
to the game on handmade hero org and it

2542
02:08:40,479 --> 02:08:46,149
comes with a source code so that you can

2543
02:08:42,819 --> 02:08:49,149
play around with it and and learn from

2544
02:08:46,149 --> 02:08:51,099
it or experiment with it it's a it's a

2545
02:08:49,149 --> 02:08:52,359
pretty good learning resource we also

2546
02:08:51,100 --> 02:08:52,960
have a forum site you can go to to ask

2547
02:08:52,359 --> 02:08:54,969
questions

2548
02:08:52,960 --> 02:08:56,289
hosted by handmade Network we have a

2549
02:08:54,970 --> 02:08:58,270
patreon page and go to do not support

2550
02:08:56,289 --> 02:09:00,399
the video series the schedule bot that

2551
02:08:58,270 --> 02:09:02,740
tweets the schedule at you and an

2552
02:09:00,399 --> 02:09:04,689
episode guide which will help you catch

2553
02:09:02,739 --> 02:09:08,559
up on old episodes if you are so

2554
02:09:04,689 --> 02:09:11,939
inclined that is it for this week I may

2555
02:09:08,560 --> 02:09:17,350
not be back next week I don't know

2556
02:09:11,939 --> 02:09:19,599
there's a we're removing offices and I'm

2557
02:09:17,350 --> 02:09:22,150
not sure what status things will be in I

2558
02:09:19,600 --> 02:09:25,720
may just try to move handmade hero

2559
02:09:22,149 --> 02:09:28,509
streaming back to my home to my

2560
02:09:25,720 --> 02:09:30,909
apartment but I don't really know one

2561
02:09:28,510 --> 02:09:32,829
way or the other what will happen so I

2562
02:09:30,909 --> 02:09:34,750
can't promise they'll be streams next

2563
02:09:32,829 --> 02:09:40,149
weekend we'll be back the next weekend

2564
02:09:34,750 --> 02:09:40,899
after that I believe but yeah I I just

2565
02:09:40,149 --> 02:09:44,829
can't promise that

2566
02:09:40,899 --> 02:09:47,139
so we'll see keep keep keep in mind that

2567
02:09:44,829 --> 02:09:49,000
there may not be one I will certainly

2568
02:09:47,140 --> 02:09:51,579
check you know certainly check the

2569
02:09:49,000 --> 02:09:54,760
schedule but Friday night because it'll

2570
02:09:51,579 --> 02:09:57,369
say one way or the other on here but but

2571
02:09:54,760 --> 02:09:58,780
but no promises will I'm just not sure

2572
02:09:57,369 --> 02:09:59,859
with the internet situation or where the

2573
02:09:58,779 --> 02:10:02,889
machine is going to be or what's going

2574
02:09:59,859 --> 02:10:05,819
to go on so we'll play it by ear that's

2575
02:10:02,890 --> 02:10:08,950
about it for this week until next week

2576
02:10:05,819 --> 02:10:11,380
thanks for for joining me and I wanted

2577
02:10:08,949 --> 02:10:12,699
to mention again because I mentioned it

2578
02:10:11,380 --> 02:10:15,039
yesterday I was going to mention one

2579
02:10:12,699 --> 02:10:17,590
more time if you're interested in

2580
02:10:15,039 --> 02:10:20,470
supporting a debugger project there's a

2581
02:10:17,590 --> 02:10:24,430
new debugger project going on that you

2582
02:10:20,470 --> 02:10:25,690
know I am interested in one of the

2583
02:10:24,430 --> 02:10:27,789
things that we're still doing on

2584
02:10:25,689 --> 02:10:29,109
handmade here right is we've got a

2585
02:10:27,789 --> 02:10:30,670
replacement editor and we've got a

2586
02:10:29,109 --> 02:10:31,899
replacement drawing program that people

2587
02:10:30,670 --> 02:10:33,130
in the community have written right we

2588
02:10:31,899 --> 02:10:35,199
switched a for coder we switched to

2589
02:10:33,130 --> 02:10:38,230
Milton so the only thing we're really

2590
02:10:35,199 --> 02:10:40,569
still using is the compiler which is

2591
02:10:38,229 --> 02:10:43,859
Microsoft's compiler which

2592
02:10:40,569 --> 02:10:46,750
is okay you know I'm not I don't hate it

2593
02:10:43,859 --> 02:10:48,328
but we are still using their debugger

2594
02:10:46,750 --> 02:10:50,559
they're the buggers not the greatest

2595
02:10:48,328 --> 02:10:52,118
debugger and we've really cool to switch

2596
02:10:50,559 --> 02:10:53,590
to a debugger made by the community and

2597
02:10:52,118 --> 02:10:55,210
there is a project now that you can

2598
02:10:53,590 --> 02:10:57,099
support that is trying to do exactly

2599
02:10:55,210 --> 02:10:58,658
that make a debugger that can be

2600
02:10:57,099 --> 02:10:59,980
integrated into for coders so we

2601
02:10:58,658 --> 02:11:02,618
basically have like at our own IDE

2602
02:10:59,979 --> 02:11:06,279
effectively and if you want to check

2603
02:11:02,618 --> 02:11:08,170
that out it's lis a handmade network and

2604
02:11:06,279 --> 02:11:10,988
you can support that project you can

2605
02:11:08,170 --> 02:11:13,300
actually see it here it's got a patreon

2606
02:11:10,988 --> 02:11:16,750
page and so if you're if you're so

2607
02:11:13,300 --> 02:11:18,369
inclined is that's a you know project

2608
02:11:16,750 --> 02:11:19,929
that I'm kind of excited about and will

2609
02:11:18,368 --> 02:11:22,210
try to try it out on stream just as soon

2610
02:11:19,929 --> 02:11:23,800
as it's gotten to the point where we

2611
02:11:22,210 --> 02:11:25,929
could do some simple debugging with it

2612
02:11:23,800 --> 02:11:27,429
right we could use it in tandem with

2613
02:11:25,929 --> 02:11:29,408
visual studios debugger

2614
02:11:27,429 --> 02:11:30,578
when it gets to the point where we can

2615
02:11:29,408 --> 02:11:32,948
sort of start to play with it a little

2616
02:11:30,578 --> 02:11:34,359
bit so that's it just wanted to point

2617
02:11:32,948 --> 02:11:36,089
that out for people who are looking for

2618
02:11:34,359 --> 02:11:39,639
projects to support that might be cool

2619
02:11:36,090 --> 02:11:42,130
that's one to check out so please do and

2620
02:11:39,639 --> 02:11:45,069
then that's it for this week I will see

2621
02:11:42,130 --> 02:11:47,409
folks next week if we do get the stream

2622
02:11:45,069 --> 02:11:49,389
streaming situation set up if we don't

2623
02:11:47,408 --> 02:11:50,469
then it'll be probably the week after

2624
02:11:49,389 --> 02:11:51,849
that

2625
02:11:50,469 --> 02:11:53,078
but either way until then have fun

2626
02:11:51,849 --> 02:11:53,500
programming and I'll see everyone on the

2627
02:11:53,078 --> 02:11:56,189
Internet

2628
02:11:53,500 --> 02:11:56,189
take it easy everybody

