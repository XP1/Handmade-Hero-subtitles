1
00:00:00,140 --> 00:00:06,508
start recording all right hello everyone

2
00:00:04,589 --> 00:00:08,519
and welcome to handmade here the show

3
00:00:06,509 --> 00:00:13,530
recode a complete game live on stream we

4
00:00:08,519 --> 00:00:16,350
are still in our sort situation which

5
00:00:13,529 --> 00:00:18,028
you know like i said is a little bit of

6
00:00:16,350 --> 00:00:19,590
a dicey thing because we're doing a 2-d

7
00:00:18,028 --> 00:00:21,300
game but it's got some 3d elements in it

8
00:00:19,589 --> 00:00:23,579
and whenever you kind of mix those two

9
00:00:21,300 --> 00:00:27,710
things you kind of have to fall back to

10
00:00:23,579 --> 00:00:30,000
some touchy sort of touchy-feely

11
00:00:27,710 --> 00:00:31,560
semantics rules for how things get

12
00:00:30,000 --> 00:00:33,299
sorted and we've been sort of trying to

13
00:00:31,559 --> 00:00:35,399
work through how we think that will work

14
00:00:33,299 --> 00:00:37,859
out and you know what's the minimum

15
00:00:35,399 --> 00:00:40,230
amount of markup we can do on our

16
00:00:37,859 --> 00:00:42,600
rendering to make sure that it will sort

17
00:00:40,229 --> 00:00:44,968
in some way that we feel is reasonable

18
00:00:42,600 --> 00:00:46,350
and plausible for the kinds of scenes

19
00:00:44,969 --> 00:00:49,320
and the kinds of entities that we know

20
00:00:46,350 --> 00:00:50,820
that we'll have now we just finished

21
00:00:49,320 --> 00:00:53,308
getting our sorting working yesterday

22
00:00:50,820 --> 00:00:55,409
but we haven't really debugged it and we

23
00:00:53,308 --> 00:00:56,939
we also don't really technically know

24
00:00:55,409 --> 00:00:58,979
whether our sort rule is going to work

25
00:00:56,939 --> 00:01:01,409
right so we're kind of still in a little

26
00:00:58,979 --> 00:01:02,519
bit of an investigative phase I gotta

27
00:01:01,409 --> 00:01:05,009
jump right into it though so we'll have

28
00:01:02,520 --> 00:01:06,510
time to kind of pick around there it's

29
00:01:05,010 --> 00:01:09,030
day 30 too so if you would like to

30
00:01:06,510 --> 00:01:10,830
follow along at home just open up day

31
00:01:09,030 --> 00:01:13,379
301 source code that's what we're

32
00:01:10,829 --> 00:01:16,950
looking at here that's what I'm starting

33
00:01:13,379 --> 00:01:18,539
with on stream so what I wanted to do

34
00:01:16,950 --> 00:01:20,219
first of all someone pointed out that I

35
00:01:18,540 --> 00:01:24,240
made a really bad typo at the end of

36
00:01:20,219 --> 00:01:28,519
last last night's dream which is to say

37
00:01:24,239 --> 00:01:31,379
that inside the render group when I push

38
00:01:28,519 --> 00:01:33,709
when I was sort of doing the code for

39
00:01:31,379 --> 00:01:36,000
creating the sort keys that we needed I

40
00:01:33,709 --> 00:01:38,789
instead of doing a plus equals I did

41
00:01:36,000 --> 00:01:43,969
like an equals and that's obviously not

42
00:01:38,790 --> 00:01:47,880
good at all so you can kind of see here

43
00:01:43,969 --> 00:01:48,959
where is that code get bound for you can

44
00:01:47,879 --> 00:01:50,459
kind of see your where the code was

45
00:01:48,959 --> 00:01:51,809
probably supposed to be looking like

46
00:01:50,459 --> 00:01:54,239
this one where you know we had the plus

47
00:01:51,810 --> 00:01:56,250
equals here and so these were actually

48
00:01:54,239 --> 00:01:57,959
supposed to look like that and in fact I

49
00:01:56,250 --> 00:02:00,780
guess you could say you might do it like

50
00:01:57,959 --> 00:02:02,280
this so it was supposed to be taking the

51
00:02:00,780 --> 00:02:03,810
wyman and spreading it out by the height

52
00:02:02,280 --> 00:02:05,129
and instead it was just setting it to

53
00:02:03,810 --> 00:02:06,930
that which meant that all of our Y

54
00:02:05,129 --> 00:02:09,149
bounds were just wrong so that was

55
00:02:06,930 --> 00:02:11,099
obviously wrong but I don't I I don't

56
00:02:09,149 --> 00:02:12,360
actually think that's the only problem

57
00:02:11,098 --> 00:02:14,009
we've got you know I suspect we're going

58
00:02:12,360 --> 00:02:15,840
to have a bunch of problems here and

59
00:02:14,009 --> 00:02:17,548
you also have a you know we have more

60
00:02:15,840 --> 00:02:20,489
stuff that we have to do as well so

61
00:02:17,549 --> 00:02:21,659
we've got we've got a lot of work to do

62
00:02:20,489 --> 00:02:24,480
you know there's a bunch of stuff that

63
00:02:21,658 --> 00:02:27,449
we're going to have to do so you know

64
00:02:24,479 --> 00:02:29,098
for starters I'd say that the the first

65
00:02:27,449 --> 00:02:31,548
thing I would point out if you take a

66
00:02:29,098 --> 00:02:34,969
look at what we're seeing on the screen

67
00:02:31,549 --> 00:02:37,290
is just that there's a little bit of a

68
00:02:34,969 --> 00:02:39,598
there's some twitchiness right to the

69
00:02:37,289 --> 00:02:41,759
sorting that you can see happening and

70
00:02:39,598 --> 00:02:43,500
some of its explicable and some of it is

71
00:02:41,759 --> 00:02:45,539
indicative I think potentially of

72
00:02:43,500 --> 00:02:47,430
problems but we'll see and so I'm just

73
00:02:45,539 --> 00:02:49,259
kind of going through I just want to

74
00:02:47,430 --> 00:02:55,230
kind of like articulate what I'm seeing

75
00:02:49,259 --> 00:02:57,090
on screen so that you can kind of get a

76
00:02:55,229 --> 00:03:00,568
little bit of a feel for for how I was

77
00:02:57,090 --> 00:03:02,098
thinking through this so first of all if

78
00:03:00,568 --> 00:03:05,608
you take a look at what's happening here

79
00:03:02,098 --> 00:03:08,128
with these sort of flashing these bits

80
00:03:05,609 --> 00:03:09,659
that were kind of flashing and you know

81
00:03:08,128 --> 00:03:11,280
as I mouse over it of course the decided

82
00:03:09,658 --> 00:03:14,578
to stop doing it but there you go so you

83
00:03:11,280 --> 00:03:16,139
see that's that flashing there I what I

84
00:03:14,579 --> 00:03:18,329
wanted to point out about that flashing

85
00:03:16,139 --> 00:03:19,829
there is that well that's a flashing

86
00:03:18,329 --> 00:03:21,540
that wouldn't necessarily concern me

87
00:03:19,829 --> 00:03:22,980
because these are debug things anyway

88
00:03:21,539 --> 00:03:25,048
and the reason that that doesn't really

89
00:03:22,979 --> 00:03:26,759
concern me is because these are a bunch

90
00:03:25,049 --> 00:03:30,180
of rectangles which are overlapping and

91
00:03:26,759 --> 00:03:32,370
which have the same essentially Z plane

92
00:03:30,180 --> 00:03:34,169
in which overlap and we never did as a

93
00:03:32,370 --> 00:03:35,549
rule to try to differentiate those

94
00:03:34,169 --> 00:03:38,430
because we want we aren't really going

95
00:03:35,549 --> 00:03:40,079
to have that case right so that's not a

96
00:03:38,430 --> 00:03:41,669
case that worries me at all and if we

97
00:03:40,079 --> 00:03:44,849
had wanted to make this work we would

98
00:03:41,669 --> 00:03:46,469
have just increased the Z of the border

99
00:03:44,848 --> 00:03:47,909
by just a slight bit to make sure that

100
00:03:46,469 --> 00:03:49,378
it's sorted above it and that would have

101
00:03:47,909 --> 00:03:51,628
been a fine solution in my opinion I

102
00:03:49,378 --> 00:03:53,098
wouldn't have problem with that so the

103
00:03:51,628 --> 00:03:56,518
fact that that's twitchy doesn't worry

104
00:03:53,098 --> 00:04:00,030
me at all what worries me uh quite a bit

105
00:03:56,519 --> 00:04:02,430
is this situation down here so you can

106
00:04:00,030 --> 00:04:05,158
see that these guys which are definitely

107
00:04:02,430 --> 00:04:07,469
below these sort of upper tier people

108
00:04:05,158 --> 00:04:09,539
you can see that they're sorting above

109
00:04:07,469 --> 00:04:12,180
this tier and what's more concerning

110
00:04:09,539 --> 00:04:16,019
than that is that they're sorting above

111
00:04:12,180 --> 00:04:18,750
it only some of the time right so what

112
00:04:16,019 --> 00:04:20,280
that says to me or suggests to me anyway

113
00:04:18,750 --> 00:04:22,978
and again we haven't really looked into

114
00:04:20,279 --> 00:04:27,659
this in any particular detail but what

115
00:04:22,978 --> 00:04:31,860
that suggests to me is that the

116
00:04:27,660 --> 00:04:34,170
the rule that we defined as I suspected

117
00:04:31,860 --> 00:04:36,509
sort of mentioned as like we're gonna

118
00:04:34,170 --> 00:04:41,160
have to be able to worry about this that

119
00:04:36,509 --> 00:04:43,759
suggests to me that my my fears about it

120
00:04:41,160 --> 00:04:46,500
not being a straightforward sortable

121
00:04:43,759 --> 00:04:48,149
criteria are perhaps well-founded

122
00:04:46,500 --> 00:04:49,740
because what very well might be

123
00:04:48,149 --> 00:04:53,549
happening there is depending on the

124
00:04:49,740 --> 00:04:55,530
order in which we hand these things off

125
00:04:53,550 --> 00:04:58,710
to the renderer the sort may produce

126
00:04:55,529 --> 00:05:00,479
different results and again that's just

127
00:04:58,709 --> 00:05:03,449
because of the way that our criteria

128
00:05:00,480 --> 00:05:06,090
happens to work so you know we have a

129
00:05:03,449 --> 00:05:10,439
sort of a question there that we can

130
00:05:06,089 --> 00:05:13,469
sort of think about and it's really the

131
00:05:10,439 --> 00:05:15,769
question is should we try to extend the

132
00:05:13,470 --> 00:05:18,420
sort rule so that it works all the time

133
00:05:15,769 --> 00:05:20,099
like is there a way to extend it to be a

134
00:05:18,420 --> 00:05:22,439
little bit smarter so that the sort rule

135
00:05:20,100 --> 00:05:25,530
can produce complete ordering so it

136
00:05:22,439 --> 00:05:27,029
doesn't have that if basically and part

137
00:05:25,529 --> 00:05:29,459
of that is just if you have an if

138
00:05:27,029 --> 00:05:31,919
statement inside a sort rule then you

139
00:05:29,459 --> 00:05:36,870
know chances are it's not going to be

140
00:05:31,920 --> 00:05:38,400
something that produces a correct it's

141
00:05:36,870 --> 00:05:40,740
not going to produce a correct total

142
00:05:38,399 --> 00:05:42,239
ordering for these things and the reason

143
00:05:40,740 --> 00:05:44,610
that I say that is because well it's

144
00:05:42,240 --> 00:05:46,620
unless you did specific work to ensure

145
00:05:44,610 --> 00:05:48,569
that the two halves of the if always

146
00:05:46,620 --> 00:05:50,939
produce consistent results no matter

147
00:05:48,569 --> 00:05:53,819
which route you take through things then

148
00:05:50,939 --> 00:05:55,079
then depending on which items you end up

149
00:05:53,819 --> 00:05:57,810
comparing as part of the merge sort

150
00:05:55,079 --> 00:05:59,668
you'll get different merges right so

151
00:05:57,810 --> 00:06:01,379
it's not unusual that that would happen

152
00:05:59,668 --> 00:06:04,199
which is why i said i was a little bit

153
00:06:01,379 --> 00:06:05,939
afraid of it it also is sort of in line

154
00:06:04,199 --> 00:06:08,699
with what andrew russell was talking

155
00:06:05,939 --> 00:06:09,480
about on River City Rampage underground

156
00:06:08,699 --> 00:06:12,719
we're sorry River City ransom

157
00:06:09,480 --> 00:06:14,430
underground where he was talking about

158
00:06:12,720 --> 00:06:15,960
the fact that he had to use a more

159
00:06:14,430 --> 00:06:17,370
topological approach to actually do the

160
00:06:15,959 --> 00:06:18,689
sorting which we might have to to for

161
00:06:17,370 --> 00:06:22,110
all we know right we don't know we don't

162
00:06:18,689 --> 00:06:23,459
know the answer to that question yet so

163
00:06:22,110 --> 00:06:27,210
the first thing I would say is that

164
00:06:23,459 --> 00:06:28,829
seems like a likely thing to me I want

165
00:06:27,209 --> 00:06:31,799
to spend a few minutes on the blackboard

166
00:06:28,829 --> 00:06:33,539
looking into what we would do if we want

167
00:06:31,800 --> 00:06:35,189
to extend this out a little bit is there

168
00:06:33,540 --> 00:06:38,010
a way to make it more consistent without

169
00:06:35,189 --> 00:06:39,839
the if and if there's not then I'm going

170
00:06:38,009 --> 00:06:41,069
to go in and try to verify that that's

171
00:06:39,839 --> 00:06:43,560
what's actually happening

172
00:06:41,069 --> 00:06:45,209
and actually you know because it's easy

173
00:06:43,560 --> 00:06:47,430
to verify maybe I'll just do that first

174
00:06:45,209 --> 00:06:49,799
just to prove to myself at least that

175
00:06:47,430 --> 00:06:53,610
that's happening because it's not that

176
00:06:49,800 --> 00:06:55,680
hard for me to too sorry I want to go in

177
00:06:53,610 --> 00:06:57,150
here actually to to know that that's

178
00:06:55,680 --> 00:06:59,160
happening it just it requires a little

179
00:06:57,149 --> 00:07:04,669
bit of slowness here essentially what

180
00:06:59,160 --> 00:07:04,670
you can see is after we perform our sort

181
00:07:05,810 --> 00:07:11,970
here's the sort happening here we've got

182
00:07:09,660 --> 00:07:14,730
this check if handmade slow is true

183
00:07:11,970 --> 00:07:17,790
we'll go through and we check our sort

184
00:07:14,730 --> 00:07:18,960
of all the things that we sorted to make

185
00:07:17,790 --> 00:07:21,060
sure that they're still in sorted order

186
00:07:18,959 --> 00:07:23,759
and we do that by checking entry a

187
00:07:21,060 --> 00:07:27,780
against entry b4 every pair of entries

188
00:07:23,759 --> 00:07:29,339
all the way down the list right and but

189
00:07:27,779 --> 00:07:32,759
when I say every pair what I mean is

190
00:07:29,339 --> 00:07:36,179
adjacent pairs right so we do 0 &amp; 1 1 &amp;

191
00:07:32,759 --> 00:07:37,860
2 2 &amp; 3 3 &amp; 4 or 4 and 5 and what that

192
00:07:36,180 --> 00:07:40,170
lets us know is that our partial

193
00:07:37,860 --> 00:07:42,600
ordering was correct right it means that

194
00:07:40,170 --> 00:07:44,819
we never compared two items and got the

195
00:07:42,600 --> 00:07:46,140
wrong you know our sort never did

196
00:07:44,819 --> 00:07:48,719
something like insert two items that

197
00:07:46,139 --> 00:07:51,629
obviously failed their sort test next to

198
00:07:48,720 --> 00:07:55,320
each other that never happened so that's

199
00:07:51,629 --> 00:07:58,560
good but what we don't know is if we

200
00:07:55,319 --> 00:08:02,009
were to check each entry against every

201
00:07:58,560 --> 00:08:04,740
other entry would we ever find a pair

202
00:08:02,009 --> 00:08:06,750
that was Miss sorted right and that's

203
00:08:04,740 --> 00:08:11,210
what we don't know so what I'd like to

204
00:08:06,750 --> 00:08:16,439
do is sort of make two versions of this

205
00:08:11,209 --> 00:08:18,930
one that is like a note Casey this is

206
00:08:16,439 --> 00:08:25,050
the partial ordering check only

207
00:08:18,930 --> 00:08:27,269
neighbors are verified and the benefit

208
00:08:25,050 --> 00:08:30,060
to this is it's 0 n right we only have

209
00:08:27,269 --> 00:08:32,549
to loop through that list once and so

210
00:08:30,060 --> 00:08:34,440
it's it's relatively speedy we can just

211
00:08:32,549 --> 00:08:37,559
always turn it on it's never going to be

212
00:08:34,440 --> 00:08:39,450
too slow to use on the other hand if I

213
00:08:37,559 --> 00:08:41,609
actually expand this out to check every

214
00:08:39,450 --> 00:08:43,349
pair well that's going to be 0 N squared

215
00:08:41,610 --> 00:08:45,810
so we're not going to want to leave that

216
00:08:43,349 --> 00:08:48,000
on during regular usage I wouldn't think

217
00:08:45,809 --> 00:08:50,099
unless we have a very low number of

218
00:08:48,000 --> 00:08:52,980
sprites that's going to kind of come

219
00:08:50,100 --> 00:08:54,430
back to to haunt us when we have higher

220
00:08:52,980 --> 00:08:56,889
numbers of sprites because the number of

221
00:08:54,429 --> 00:08:58,359
is going to be absurdly high so this is

222
00:08:56,889 --> 00:09:00,460
something we only want to do during an

223
00:08:58,360 --> 00:09:02,528
active debugging scenario in my opinion

224
00:09:00,460 --> 00:09:05,290
so I want to make both cases so we can

225
00:09:02,528 --> 00:09:11,759
pick which one they use so this is the 0

226
00:09:05,289 --> 00:09:16,329
N squared oops a total ordering check

227
00:09:11,759 --> 00:09:19,059
all Paris verified so if we go ahead

228
00:09:16,330 --> 00:09:21,940
through here and you know we could also

229
00:09:19,059 --> 00:09:28,899
do I suppose we could save ourselves one

230
00:09:21,940 --> 00:09:39,820
repetitive loop right and do something

231
00:09:28,899 --> 00:09:44,049
kind of absurd like this yes I'm getting

232
00:09:39,820 --> 00:09:45,850
a little crazy here it's true but what I

233
00:09:44,049 --> 00:09:50,370
could do here radius like it say like oh

234
00:09:45,850 --> 00:09:50,370
okay you know give me a second loop here

235
00:09:51,419 --> 00:09:59,889
and I guess in this case technically I'm

236
00:09:53,769 --> 00:10:01,569
not doing a second loop but for the N

237
00:09:59,889 --> 00:10:03,519
squared case what I'm going to do is say

238
00:10:01,570 --> 00:10:08,010
well I've got you know this index here

239
00:10:03,519 --> 00:10:16,059
and then I'm going to have an index b

240
00:10:08,009 --> 00:10:17,620
which is going to be this guy and so

241
00:10:16,059 --> 00:10:19,539
then up here when we do the partial

242
00:10:17,620 --> 00:10:25,720
check I could just say well oh all right

243
00:10:19,539 --> 00:10:28,088
you know index be can just be hard-coded

244
00:10:25,720 --> 00:10:32,950
to do this and then we'll open a block

245
00:10:28,089 --> 00:10:38,860
that isn't a loop and then we'll close

246
00:10:32,950 --> 00:10:40,390
the block here right so that way when

247
00:10:38,860 --> 00:10:42,519
we're in here we do the partial a big

248
00:10:40,389 --> 00:10:44,828
check by just grabbing okay you know

249
00:10:42,519 --> 00:10:47,528
we'll just compare against this one for

250
00:10:44,828 --> 00:10:49,120
index be in the case where we want to do

251
00:10:47,528 --> 00:10:51,159
the N squared check we can just say like

252
00:10:49,120 --> 00:10:55,659
oh well we'll start at the index plus 1

253
00:10:51,159 --> 00:10:58,328
right and then we'll go all the way

254
00:10:55,659 --> 00:11:03,490
until we hit the very end of the array

255
00:10:58,328 --> 00:11:05,019
and just test all of them right so that

256
00:11:03,490 --> 00:11:06,850
would check every pair against every

257
00:11:05,019 --> 00:11:07,379
other pair and make sure that in front

258
00:11:06,850 --> 00:11:09,149
over

259
00:11:07,379 --> 00:11:17,909
earns the answer that we think that it

260
00:11:09,149 --> 00:11:22,558
should right now this is a little weird

261
00:11:17,909 --> 00:11:24,778
though I'm a little confused by this and

262
00:11:22,558 --> 00:11:26,488
I'm wondering if this check is actually

263
00:11:24,778 --> 00:11:28,859
executing at the moment because

264
00:11:26,489 --> 00:11:33,679
shouldn't this be giving us the opposite

265
00:11:28,859 --> 00:11:36,119
results like take a look at this if if

266
00:11:33,678 --> 00:11:37,889
after we do the merge sort when we go to

267
00:11:36,119 --> 00:11:40,349
check all these we do index you know

268
00:11:37,889 --> 00:11:41,818
from 02 count minus 1 and and let's say

269
00:11:40,349 --> 00:11:44,579
we're still in this case like let's say

270
00:11:41,818 --> 00:11:47,009
we're still doing the o/n partial

271
00:11:44,578 --> 00:11:50,338
ordering check we come in here and we

272
00:11:47,009 --> 00:11:52,619
say okay from you know from in x equals

273
00:11:50,339 --> 00:11:54,989
0 to index count minus 1 let's check

274
00:11:52,619 --> 00:11:57,509
entry a which is you know whichever one

275
00:11:54,989 --> 00:11:59,939
we're on plus whichever one came after

276
00:11:57,509 --> 00:12:02,970
it right which is that index plus 1 and

277
00:11:59,938 --> 00:12:05,308
then I want you to tell me if at the the

278
00:12:02,970 --> 00:12:09,418
one the first entry is in front of the

279
00:12:05,308 --> 00:12:10,528
second entry and okay no cuz we don't

280
00:12:09,418 --> 00:12:12,978
have a not there's alright so that's

281
00:12:10,528 --> 00:12:16,048
okay nevermind faster narrowly averted

282
00:12:12,979 --> 00:12:18,059
alright so assuming that we that I

283
00:12:16,048 --> 00:12:20,308
didn't mess anything up there if we run

284
00:12:18,058 --> 00:12:23,850
this now we have this is sort of the old

285
00:12:20,308 --> 00:12:28,759
check we know that nothing is is failing

286
00:12:23,850 --> 00:12:32,189
in the old check if I rerun it now with

287
00:12:28,759 --> 00:12:33,928
with the new check which i guess is not

288
00:12:32,188 --> 00:12:36,389
in the hot code reloaded so we're going

289
00:12:33,928 --> 00:12:37,678
to go I'm hoping we get an assertion its

290
00:12:36,389 --> 00:12:39,808
and so there we go we did get an

291
00:12:37,678 --> 00:12:43,108
assertion and so you know we got an

292
00:12:39,808 --> 00:12:47,728
assertion on index nine and index 40

293
00:12:43,109 --> 00:12:53,278
right and so let's take a look at what

294
00:12:47,729 --> 00:12:55,709
those two are entry a entry fee and we

295
00:12:53,278 --> 00:12:58,109
can sort of see here what those two look

296
00:12:55,708 --> 00:13:02,578
like now we can see that both of these

297
00:12:58,109 --> 00:13:04,589
have a wyman wimax range and so what

298
00:13:02,578 --> 00:13:06,358
that means is there are both sort of z

299
00:13:04,589 --> 00:13:09,389
sprites right they're both they're both

300
00:13:06,359 --> 00:13:11,639
in the Z plane and we can see that the

301
00:13:09,389 --> 00:13:13,889
zmax of one of them is zero the zmax of

302
00:13:11,639 --> 00:13:18,209
the other one is 1.25 now what we know

303
00:13:13,889 --> 00:13:20,240
is that the 1.25 one in this scenario

304
00:13:18,208 --> 00:13:25,189
right should be drawing

305
00:13:20,240 --> 00:13:28,519
above the the I'm sorry yeah should be

306
00:13:25,190 --> 00:13:33,589
drawing above the 01 so in this case we

307
00:13:28,519 --> 00:13:36,379
should have we should have entry be

308
00:13:33,589 --> 00:13:41,029
being above entry a but you know that

309
00:13:36,379 --> 00:13:44,629
looks correct right why are we getting

310
00:13:41,028 --> 00:13:47,600
that assertion because in this case

311
00:13:44,629 --> 00:13:52,899
entry a is not above entry be how did we

312
00:13:47,600 --> 00:13:52,899
get in here am I missing something uh

313
00:13:53,200 --> 00:14:02,420
let's let's step in there so here we go

314
00:14:00,440 --> 00:14:03,740
I backed the run you know the

315
00:14:02,419 --> 00:14:07,189
instruction pointer back up so I could

316
00:14:03,740 --> 00:14:08,959
have the code executes a second time so

317
00:14:07,190 --> 00:14:10,310
I'm going to go in here and say you know

318
00:14:08,958 --> 00:14:13,159
are they both sea sprites that should

319
00:14:10,309 --> 00:14:15,528
return true and it doesn't so why

320
00:14:13,159 --> 00:14:18,769
doesn't it return true ah ok nevermind

321
00:14:15,528 --> 00:14:21,139
this guy isn't as East right that was

322
00:14:18,769 --> 00:14:24,079
the problem I was too hasty in that I

323
00:14:21,139 --> 00:14:26,720
guess yeah so never mind that guy isn't

324
00:14:24,080 --> 00:14:28,490
disease right so that makes sense so if

325
00:14:26,720 --> 00:14:31,970
that guy isn't as East right then we

326
00:14:28,490 --> 00:14:34,310
have to see uh right what the what the

327
00:14:31,970 --> 00:14:36,740
sort criteria would be here he is not

328
00:14:34,309 --> 00:14:39,379
contained and so since he's not

329
00:14:36,740 --> 00:14:41,659
contained I think well that should still

330
00:14:39,379 --> 00:14:44,269
sort by Z shouldn't it or I guess it

331
00:14:41,659 --> 00:14:49,189
sorts by why in that case yeah so if it

332
00:14:44,269 --> 00:14:53,059
starts by why that's that's going to put

333
00:14:49,190 --> 00:14:56,300
me yeah be should have been behind a

334
00:14:53,059 --> 00:14:59,269
because it's why was was greater and

335
00:14:56,299 --> 00:15:01,250
obviously it wasn't so that's definitely

336
00:14:59,269 --> 00:15:02,799
a case where yeah that didn't come out

337
00:15:01,250 --> 00:15:10,278
the way that we would have expected to

338
00:15:02,799 --> 00:15:12,469
so so not fabulous right and I would

339
00:15:10,278 --> 00:15:14,659
like to see that update more is it

340
00:15:12,470 --> 00:15:16,899
really the case that that's the only

341
00:15:14,659 --> 00:15:16,899
error

342
00:15:18,909 --> 00:15:28,879
I'm a little confused by that let's take

343
00:15:22,909 --> 00:15:30,438
a look here I think it I think what I'd

344
00:15:28,879 --> 00:15:33,259
like to do is change this from an

345
00:15:30,438 --> 00:15:47,778
assertion temporarily to something where

346
00:15:33,259 --> 00:15:49,459
I can just set a breakpoint all right so

347
00:15:47,778 --> 00:15:51,288
i just want to see how many different

348
00:15:49,458 --> 00:15:52,728
ones of these there are right so I just

349
00:15:51,288 --> 00:16:02,600
kind of wanted to know how many sort

350
00:15:52,729 --> 00:16:04,579
errors there were if that makes sense it

351
00:16:02,600 --> 00:16:10,038
looks like there's a lot of them but

352
00:16:04,578 --> 00:16:12,528
they're all kind of very similar very

353
00:16:10,038 --> 00:16:16,578
similar sort keys probably because

354
00:16:12,528 --> 00:16:23,899
they're rows of things in why let's also

355
00:16:16,578 --> 00:16:30,248
do this here let me take a look here so

356
00:16:23,899 --> 00:16:30,249
let's also do do a count

357
00:16:37,299 --> 00:16:41,528
sorry my knees been bothering me lately

358
00:16:44,289 --> 00:16:53,059
make it a little more comfortable for

359
00:16:46,278 --> 00:16:56,689
myself probably not that I can try all

360
00:16:53,059 --> 00:16:58,459
right so if I have let's see if I have

361
00:16:56,690 --> 00:17:09,078
all my sword eres here and I can go in

362
00:16:58,460 --> 00:17:13,250
here and let me go ahead and sort of

363
00:17:09,078 --> 00:17:14,659
compile that in and now I should be able

364
00:17:13,250 --> 00:17:17,650
to break at the end and just see how

365
00:17:14,660 --> 00:17:17,650
many sorter as I have

366
00:17:22,778 --> 00:17:26,048
let's see

367
00:17:29,720 --> 00:17:44,220
okay so break here sorters should tell

368
00:17:34,319 --> 00:17:46,169
me I of course that's em so I guess that

369
00:17:44,220 --> 00:17:51,630
doesn't really tell me that much about

370
00:17:46,170 --> 00:17:55,019
how many sorters there were hmm all

371
00:17:51,630 --> 00:17:57,750
right but point being I think that at

372
00:17:55,019 --> 00:18:00,089
least verifies what I wanted to know in

373
00:17:57,750 --> 00:18:04,319
the first place which is just how many

374
00:18:00,089 --> 00:18:08,879
of these particular guys were actually

375
00:18:04,319 --> 00:18:10,259
in you know how many how likely was it

376
00:18:08,880 --> 00:18:11,640
that we needed to a pelagic assort and

377
00:18:10,259 --> 00:18:15,180
weren't getting one it seems very likely

378
00:18:11,640 --> 00:18:16,860
that that's the case so the problem with

379
00:18:15,180 --> 00:18:21,240
that just to sort of give a little bit

380
00:18:16,859 --> 00:18:23,309
more of a specific kind of move this out

381
00:18:21,240 --> 00:18:26,759
of the way just to give sort of a more

382
00:18:23,309 --> 00:18:28,589
specific description of what's going on

383
00:18:26,759 --> 00:18:37,559
here and I don't actually remember so

384
00:18:28,589 --> 00:18:50,109
stayed a 301 right sit here do too so

385
00:18:37,559 --> 00:18:54,440
day 30 to sort partial ordering problem

386
00:18:50,109 --> 00:18:57,019
so the problem that we're having here is

387
00:18:54,440 --> 00:19:00,430
just that when we compare if we have

388
00:18:57,019 --> 00:19:02,509
three items right so we've got a B and C

389
00:19:00,430 --> 00:19:05,870
then the problem that we're having here

390
00:19:02,509 --> 00:19:08,119
is that we may compare these guys

391
00:19:05,869 --> 00:19:13,009
together right we may compare a and b

392
00:19:08,119 --> 00:19:15,049
and b and c and we may never compare say

393
00:19:13,009 --> 00:19:16,609
a and C right because the way in merge

394
00:19:15,049 --> 00:19:18,319
sort works this doesn't compare every

395
00:19:16,609 --> 00:19:20,089
pair with every other pair obviously

396
00:19:18,319 --> 00:19:23,029
because that would be incredibly

397
00:19:20,089 --> 00:19:25,399
inefficient right and so what ends up

398
00:19:23,029 --> 00:19:28,069
happening is if we compare a and B and

399
00:19:25,400 --> 00:19:30,470
we say like oh okay a should be in front

400
00:19:28,069 --> 00:19:32,269
of B and then you compare B and C and

401
00:19:30,470 --> 00:19:33,740
say oh well be should be in front of C

402
00:19:32,269 --> 00:19:38,450
then we're going to think that the

403
00:19:33,740 --> 00:19:40,910
ordering is a B and C right but if we

404
00:19:38,450 --> 00:19:43,370
compare a and C we may have found that C

405
00:19:40,910 --> 00:19:45,470
should have been in front of a and so in

406
00:19:43,369 --> 00:19:47,809
depending on which order these came in

407
00:19:45,470 --> 00:19:49,339
if instead it had gone ACB when we fed

408
00:19:47,809 --> 00:19:50,839
it to the renderer we then would have

409
00:19:49,339 --> 00:19:53,359
come up and said oh well the correct

410
00:19:50,839 --> 00:19:54,919
ordering was actually see a B now

411
00:19:53,359 --> 00:19:56,569
neither of these is technically a

412
00:19:54,920 --> 00:19:58,100
correct ordering because since we've

413
00:19:56,569 --> 00:20:00,259
written a sort rule which doesn't

414
00:19:58,099 --> 00:20:04,879
necessarily always produce transitive

415
00:20:00,259 --> 00:20:06,859
results properly right then there is no

416
00:20:04,880 --> 00:20:08,600
such thing as the one total ordering and

417
00:20:06,859 --> 00:20:10,009
that's the thing that we were that sort

418
00:20:08,599 --> 00:20:11,209
of andrew russell was getting at when he

419
00:20:10,009 --> 00:20:14,480
was talking about his River City ransom

420
00:20:11,210 --> 00:20:17,600
stuff it's just saying hey in this

421
00:20:14,480 --> 00:20:19,789
scenario you're going to have to sort of

422
00:20:17,599 --> 00:20:20,959
decide well when you sort things you

423
00:20:19,789 --> 00:20:23,299
have to look at which things are

424
00:20:20,960 --> 00:20:24,650
actually overlapping and only sort those

425
00:20:23,299 --> 00:20:26,990
and hope that you don't produce any

426
00:20:24,650 --> 00:20:28,730
complicated cycles in those and if you

427
00:20:26,990 --> 00:20:32,120
do you have to do something clever to

428
00:20:28,730 --> 00:20:33,680
break them right and so you know that's

429
00:20:32,119 --> 00:20:35,389
certainly wrap we could go by we could

430
00:20:33,680 --> 00:20:37,519
first check to see whether two sprites

431
00:20:35,390 --> 00:20:40,400
overlap and sort those you know and then

432
00:20:37,519 --> 00:20:42,789
draw them in sort of overlapping chains

433
00:20:40,400 --> 00:20:45,110
that's certainly something we could do

434
00:20:42,789 --> 00:20:47,420
but the other thing we can do is say can

435
00:20:45,109 --> 00:20:50,719
we turn our partial ordering into a

436
00:20:47,420 --> 00:20:53,029
total ordering right and the way that we

437
00:20:50,720 --> 00:20:54,890
would do that is again we would have to

438
00:20:53,029 --> 00:20:57,349
come up with something that sort of

439
00:20:54,890 --> 00:20:58,759
represent you know does the 3d check a

440
00:20:57,349 --> 00:21:00,079
little bit more thoroughly remember

441
00:20:58,759 --> 00:21:01,609
people were asking about this yesterday

442
00:21:00,079 --> 00:21:03,449
like why don't we just do a whole 3d

443
00:21:01,609 --> 00:21:05,339
check and my answer to that is

444
00:21:03,450 --> 00:21:07,649
always been well we are right the

445
00:21:05,339 --> 00:21:09,359
question is just how little of a 3d

446
00:21:07,648 --> 00:21:12,829
check can we get away with because the

447
00:21:09,359 --> 00:21:16,349
more 3d the more 3d of a check we put in

448
00:21:12,829 --> 00:21:17,819
the more 3d data we have to associate

449
00:21:16,349 --> 00:21:19,168
with all our stuff so we're good

450
00:21:17,819 --> 00:21:21,509
classically making more work for

451
00:21:19,169 --> 00:21:23,700
ourselves as we go so we want to verify

452
00:21:21,509 --> 00:21:27,960
at each step of the way that in order to

453
00:21:23,700 --> 00:21:31,048
that that we actually need the data that

454
00:21:27,960 --> 00:21:34,919
were requiring of the sort of the input

455
00:21:31,048 --> 00:21:37,918
phase right if that makes sense um so

456
00:21:34,919 --> 00:21:39,809
anyway if we take a look at what happens

457
00:21:37,919 --> 00:21:41,669
here right now we're talking about

458
00:21:39,808 --> 00:21:43,619
sorting objects where we either talk

459
00:21:41,669 --> 00:21:45,778
about you know a Z sprite which is kind

460
00:21:43,619 --> 00:21:48,000
of like the top face of a cube kind of a

461
00:21:45,778 --> 00:21:50,038
thing or we talk about a why sprite

462
00:21:48,000 --> 00:21:51,538
which is sort of the the front facing

463
00:21:50,038 --> 00:21:53,638
part of that cube assuming that we're

464
00:21:51,538 --> 00:21:55,288
viewing things from here right although

465
00:21:53,638 --> 00:21:57,148
one might argue that the Z is the more

466
00:21:55,288 --> 00:21:58,829
front facing one since we're top down so

467
00:21:57,148 --> 00:22:00,839
I guess you might say the Z is front

468
00:21:58,829 --> 00:22:02,189
facing for our purposes and why is kind

469
00:22:00,839 --> 00:22:05,819
of facing out the bottom of the screen

470
00:22:02,190 --> 00:22:07,230
sort of in a limited sense so if that's

471
00:22:05,819 --> 00:22:08,609
the way we're looking at our sorting

472
00:22:07,230 --> 00:22:10,649
then we have to ask the question well

473
00:22:08,609 --> 00:22:13,949
you know if we start sorting things by

474
00:22:10,648 --> 00:22:15,959
why you know let's say we were sorting

475
00:22:13,950 --> 00:22:17,190
two things x y and so we put one thing

476
00:22:15,960 --> 00:22:19,380
on this side and one thing on the other

477
00:22:17,190 --> 00:22:21,990
side the problem that we rapidly would

478
00:22:19,380 --> 00:22:24,539
run into is this thing might be higher

479
00:22:21,990 --> 00:22:26,130
in Z than this thing is but because we

480
00:22:24,538 --> 00:22:27,869
sorted them by why because there was

481
00:22:26,130 --> 00:22:29,220
some interceding object that pushed one

482
00:22:27,869 --> 00:22:31,319
to the side and one to the side and the

483
00:22:29,220 --> 00:22:34,288
sort order this is never going to sort

484
00:22:31,319 --> 00:22:37,528
above this in Z so later when somebody

485
00:22:34,288 --> 00:22:39,869
else who's below this guy in Z sorts

486
00:22:37,528 --> 00:22:41,970
against this guy it puts him in a place

487
00:22:39,869 --> 00:22:44,129
that's below this guy which will always

488
00:22:41,970 --> 00:22:47,759
draw in the wrong order for this guy

489
00:22:44,130 --> 00:22:49,590
right so the question is is there any

490
00:22:47,759 --> 00:22:51,538
way that we could get a round up by

491
00:22:49,589 --> 00:22:54,058
saying well we need to sort these guys

492
00:22:51,538 --> 00:22:56,970
in in some you know other way that's

493
00:22:54,058 --> 00:22:59,369
that's more consistent and I think you

494
00:22:56,970 --> 00:23:02,460
know my smite my assumption is there is

495
00:22:59,369 --> 00:23:05,369
no way to do a 3d sort that will

496
00:23:02,460 --> 00:23:07,950
actually produce that but you know we

497
00:23:05,369 --> 00:23:09,839
might be able to uh you know if we

498
00:23:07,950 --> 00:23:12,629
actually sort of these as actual sort of

499
00:23:09,839 --> 00:23:13,980
as the actual planes you know maybe we

500
00:23:12,628 --> 00:23:15,809
could do something there and I don't

501
00:23:13,980 --> 00:23:18,870
think about exactly what that would be

502
00:23:15,809 --> 00:23:20,879
if we want to compare two elements

503
00:23:18,869 --> 00:23:24,029
together and you know one of them is a

504
00:23:20,880 --> 00:23:25,950
plane like this and what we could do is

505
00:23:24,029 --> 00:23:30,389
we could potentially try to sort them by

506
00:23:25,950 --> 00:23:32,549
Z first I guess since we know what the

507
00:23:30,390 --> 00:23:35,280
upper bound of this guy actually is and

508
00:23:32,549 --> 00:23:37,680
then only if we can't sort by Z could we

509
00:23:35,279 --> 00:23:39,329
sort by Y if they overlap or something

510
00:23:37,680 --> 00:23:41,100
you know maybe that would be a better

511
00:23:39,329 --> 00:23:43,230
sort rule and I'm not sure we can

512
00:23:41,099 --> 00:23:44,549
certainly try it easily enough you know

513
00:23:43,230 --> 00:23:47,460
stuff like that is not particularly

514
00:23:44,549 --> 00:23:49,079
difficult to try in our sort rule now

515
00:23:47,460 --> 00:23:51,450
that we sort of have it to play around

516
00:23:49,079 --> 00:23:53,429
with we can leave this in here and I'll

517
00:23:51,450 --> 00:23:54,660
just leave this as the assertion because

518
00:23:53,430 --> 00:23:55,680
now we don't really need that sword

519
00:23:54,660 --> 00:23:57,420
arrest thing I just kind of playing

520
00:23:55,680 --> 00:23:59,390
around that anyway we can certainly

521
00:23:57,420 --> 00:24:02,640
leave our slow verifier in there as well

522
00:23:59,390 --> 00:24:07,350
the is in front of rule this was our old

523
00:24:02,640 --> 00:24:09,840
one and what we could do here is just

524
00:24:07,349 --> 00:24:12,569
sort of change the the sort criteria

525
00:24:09,839 --> 00:24:21,419
selector right so what we could do is

526
00:24:12,569 --> 00:24:23,279
say well previously what we were doing

527
00:24:21,420 --> 00:24:24,990
to determine whether or not we were

528
00:24:23,279 --> 00:24:26,970
going to sort this thing by Z is we were

529
00:24:24,990 --> 00:24:29,370
looking to see whether the Y ranges of

530
00:24:26,970 --> 00:24:31,650
something overlapped right so if both

531
00:24:29,369 --> 00:24:36,089
things resist rights we would sort them

532
00:24:31,650 --> 00:24:38,460
by Z if if the things were overlapping

533
00:24:36,089 --> 00:24:39,599
and why we would also sort them by Z

534
00:24:38,460 --> 00:24:41,880
because then we would know they wouldn't

535
00:24:39,599 --> 00:24:43,529
be able to be sort of that way but in

536
00:24:41,880 --> 00:24:46,110
the case where none of that was true we

537
00:24:43,529 --> 00:24:48,509
wouldn't actually sort by the z values

538
00:24:46,109 --> 00:24:51,059
so what that means is the case where we

539
00:24:48,509 --> 00:24:54,230
weren't sorting by Z values would have

540
00:24:51,059 --> 00:24:59,279
been cases like so let's say both things

541
00:24:54,230 --> 00:25:00,870
were y sprites that overlapped the

542
00:24:59,279 --> 00:25:02,819
problem that we were having there is

543
00:25:00,869 --> 00:25:08,129
just because we want to sort those

544
00:25:02,819 --> 00:25:09,629
things and why we then wouldn't I guess

545
00:25:08,130 --> 00:25:12,870
once we sort those things and why they

546
00:25:09,630 --> 00:25:15,110
create sort of a problem space yeah you

547
00:25:12,869 --> 00:25:15,109
know I

548
00:25:15,160 --> 00:25:26,240
I'll be honest I don't really see a way

549
00:25:17,329 --> 00:25:27,589
of fixing that particular problem I mean

550
00:25:26,240 --> 00:25:29,450
obviously we could try to sort them by

551
00:25:27,589 --> 00:25:32,319
the clip their closest point to the

552
00:25:29,450 --> 00:25:32,319
camera

553
00:25:40,380 --> 00:25:44,350
you know it's plausible that something

554
00:25:43,119 --> 00:25:45,699
like that could work right where you'd

555
00:25:44,349 --> 00:25:47,139
have something where we would say well

556
00:25:45,700 --> 00:25:49,390
what's the closest point to the camera

557
00:25:47,140 --> 00:25:53,230
technically given that we sort of know

558
00:25:49,390 --> 00:25:55,240
what the what the kind of movement is in

559
00:25:53,230 --> 00:25:59,620
Y for the transform that we're trying to

560
00:25:55,240 --> 00:26:01,650
apply we could try to do that I'm trying

561
00:25:59,619 --> 00:26:12,429
to think if that has any particularly

562
00:26:01,650 --> 00:26:17,170
problematic applications untangle this

563
00:26:12,430 --> 00:26:22,390
cord is getting a little tangled here so

564
00:26:17,170 --> 00:26:24,759
let's see I guess what I was saying is

565
00:26:22,390 --> 00:26:28,810
so if we imagine these as always being

566
00:26:24,759 --> 00:26:30,160
sprites that look sort of like this and

567
00:26:28,809 --> 00:26:31,839
we're sort of sorting down here we could

568
00:26:30,160 --> 00:26:33,400
sort of figure out what's your closest

569
00:26:31,839 --> 00:26:35,289
point to the camera right and the

570
00:26:33,400 --> 00:26:38,950
closest point to the camera is going to

571
00:26:35,289 --> 00:26:42,129
have a certain distance that maybe tells

572
00:26:38,950 --> 00:26:44,019
us the answer to that question and I

573
00:26:42,130 --> 00:26:45,310
don't actually know how true that is in

574
00:26:44,019 --> 00:26:48,240
the cases that we're looking at before

575
00:26:45,309 --> 00:26:50,769
the interval seem to not be particularly

576
00:26:48,240 --> 00:26:52,599
what we would want but I suppose when we

577
00:26:50,769 --> 00:26:54,519
actually think about what these actually

578
00:26:52,599 --> 00:26:56,469
are in 3d space it's possible that being

579
00:26:54,519 --> 00:26:57,779
close to the camera would be how close

580
00:26:56,470 --> 00:27:05,319
they are to the camera would be enough

581
00:26:57,779 --> 00:27:07,389
to go on yeah i don't i don't really

582
00:27:05,319 --> 00:27:14,529
know I don't necessarily think that

583
00:27:07,390 --> 00:27:15,940
that's true either but it's hard to say

584
00:27:14,529 --> 00:27:18,039
one of the things that's a little

585
00:27:15,940 --> 00:27:20,710
problematic is because we sort of did a

586
00:27:18,039 --> 00:27:22,509
relatively hockey you know we don't do a

587
00:27:20,710 --> 00:27:23,920
standard orthographic transform is that

588
00:27:22,509 --> 00:27:25,539
it's a little bit tricky to figure out

589
00:27:23,920 --> 00:27:27,279
how far our way things actually are from

590
00:27:25,539 --> 00:27:28,899
the camera and the reason for that is we

591
00:27:27,279 --> 00:27:30,549
haven't really defined what exactly

592
00:27:28,900 --> 00:27:35,170
happens when things kind of raise up on

593
00:27:30,549 --> 00:27:38,139
the Y plane you know for based on Z

594
00:27:35,170 --> 00:27:40,750
right like right now we're not only

595
00:27:38,140 --> 00:27:42,700
think we're really even doing that but

596
00:27:40,750 --> 00:27:45,130
that's you know that's kind of the thing

597
00:27:42,700 --> 00:27:49,180
that would would be important for us to

598
00:27:45,130 --> 00:27:51,720
know there is sort of like how that how

599
00:27:49,180 --> 00:27:55,590
much how much closer to the camera you

600
00:27:51,720 --> 00:28:01,529
that when you go up or down on a on like

601
00:27:55,589 --> 00:28:06,029
a facing card and stuff like that but if

602
00:28:01,529 --> 00:28:09,690
we were going to do that well let's just

603
00:28:06,029 --> 00:28:11,908
take a look because like I say I don't I

604
00:28:09,690 --> 00:28:13,590
certainly don't know the correct answer

605
00:28:11,909 --> 00:28:16,409
to any of these particular problems like

606
00:28:13,589 --> 00:28:18,509
I said I've never really done a 2d sort

607
00:28:16,409 --> 00:28:20,549
of thing like this before so it's hard

608
00:28:18,509 --> 00:28:22,200
for me to really know in advance what's

609
00:28:20,548 --> 00:28:23,639
going to be a good answer versus what's

610
00:28:22,200 --> 00:28:45,419
going to be a bad answer if that makes

611
00:28:23,640 --> 00:28:49,770
sense so let's take a look here so if I

612
00:28:45,419 --> 00:28:54,559
do if we do the get render entity basis

613
00:28:49,769 --> 00:28:59,429
p and we look at what's happening to our

614
00:28:54,558 --> 00:29:01,798
transform then we can sort of see that

615
00:28:59,429 --> 00:29:05,820
once we actually add once we actually

616
00:29:01,798 --> 00:29:08,400
put the Z value in here we would know

617
00:29:05,819 --> 00:29:09,839
whatever that percentage was would be

618
00:29:08,400 --> 00:29:13,590
what we would multiply the height by

619
00:29:09,839 --> 00:29:19,740
order to get the closest point to the

620
00:29:13,589 --> 00:29:24,899
camera in Z uh so I would say and since

621
00:29:19,740 --> 00:29:31,159
Y itself doesn't actually change the

622
00:29:24,900 --> 00:29:31,159
sorting in that sense like

623
00:29:38,140 --> 00:29:46,190
you think about this since we're sort of

624
00:29:44,269 --> 00:29:50,000
saying that things are sort of tilted at

625
00:29:46,190 --> 00:29:56,299
an angle here right we're sort of saying

626
00:29:50,000 --> 00:29:58,569
that you know here's the here's the

627
00:29:56,299 --> 00:30:02,089
ground and we're looking down at it

628
00:29:58,569 --> 00:30:04,069
we're never really actually constructing

629
00:30:02,089 --> 00:30:06,939
this space explicitly at the moment

630
00:30:04,069 --> 00:30:08,990
right and I wonder if that's sort of

631
00:30:06,940 --> 00:30:12,019
something that we've done incorrectly

632
00:30:08,990 --> 00:30:15,440
like I wonder if we want to actually do

633
00:30:12,019 --> 00:30:17,599
the transform that this implies with the

634
00:30:15,440 --> 00:30:19,820
actual camera looking down on it with an

635
00:30:17,599 --> 00:30:21,709
actual orthographic transform because if

636
00:30:19,819 --> 00:30:22,819
we actually did that then all of this

637
00:30:21,710 --> 00:30:25,490
would sort of be a little bit more

638
00:30:22,819 --> 00:30:27,019
academic in the sense that like oh ok

639
00:30:25,490 --> 00:30:28,099
then it would be really trivial to just

640
00:30:27,019 --> 00:30:29,720
go well what's the closest point to the

641
00:30:28,099 --> 00:30:31,219
camera because it goes way to the camera

642
00:30:29,720 --> 00:30:33,799
is just the subtraction of whatever your

643
00:30:31,220 --> 00:30:35,660
top your maximum point in Z is you know

644
00:30:33,799 --> 00:30:38,450
to here and you don't have to really

645
00:30:35,660 --> 00:30:40,400
think about the y at all because that's

646
00:30:38,450 --> 00:30:42,259
going to be automatic as you get closer

647
00:30:40,400 --> 00:30:45,530
this way you just will get closer to the

648
00:30:42,259 --> 00:30:46,640
camera in that sense right and I guess I

649
00:30:45,529 --> 00:30:54,289
shouldn't say that because it really

650
00:30:46,640 --> 00:30:56,899
looks it looks like this right in an

651
00:30:54,289 --> 00:30:59,329
orthographic sense

652
00:30:56,898 --> 00:31:04,878
so yeah if you have an orthographic

653
00:30:59,329 --> 00:31:06,138
camera looking at the scene like so then

654
00:31:04,878 --> 00:31:10,759
effectively what we have is we have

655
00:31:06,138 --> 00:31:12,468
these kind of lines coming at it and so

656
00:31:10,759 --> 00:31:14,569
that should mean that we would always

657
00:31:12,469 --> 00:31:16,548
get lower distances as things move

658
00:31:14,569 --> 00:31:18,200
closer to the camera right using the

659
00:31:16,548 --> 00:31:20,479
orthographic you know distance to that

660
00:31:18,200 --> 00:31:22,219
plane so effectively what we're doing is

661
00:31:20,479 --> 00:31:25,249
saying what's the distance to this plane

662
00:31:22,219 --> 00:31:27,769
that is the camera plane you know I'm

663
00:31:25,249 --> 00:31:30,288
saying and when we have things that are

664
00:31:27,769 --> 00:31:32,269
Z height so I guess we could just take

665
00:31:30,288 --> 00:31:33,739
the distance to the camera plane that's

666
00:31:32,269 --> 00:31:35,058
actually relatively straightforward

667
00:31:33,739 --> 00:31:37,759
right because if we want to know the

668
00:31:35,058 --> 00:31:40,128
distance of something to a plane you

669
00:31:37,759 --> 00:31:42,528
know all we need to do is measure its

670
00:31:40,128 --> 00:31:45,228
distance along along the planes normal

671
00:31:42,528 --> 00:31:47,659
right so we know what that normal would

672
00:31:45,229 --> 00:31:50,419
be because we're going to define how we

673
00:31:47,659 --> 00:31:52,820
define how sloped down the projection is

674
00:31:50,419 --> 00:31:55,219
going to be once we define that normal

675
00:31:52,819 --> 00:31:58,058
all we would have to do is take the dot

676
00:31:55,219 --> 00:31:59,989
product of whatever this normal is right

677
00:31:58,058 --> 00:32:01,969
we take the top rope whatever that

678
00:31:59,989 --> 00:32:03,588
normal is with the the three-dimensional

679
00:32:01,969 --> 00:32:07,009
point we're trying to measure and that's

680
00:32:03,588 --> 00:32:08,479
how we would get a you know the distance

681
00:32:07,009 --> 00:32:10,038
along it now obviously we need to know

682
00:32:08,479 --> 00:32:12,109
where this plane is but we know the

683
00:32:10,038 --> 00:32:13,940
camera is at zero so we kind of already

684
00:32:12,108 --> 00:32:15,348
know what that that plane is so we just

685
00:32:13,940 --> 00:32:19,759
take the straight dot product would give

686
00:32:15,348 --> 00:32:21,138
us how far along how far we would go

687
00:32:19,759 --> 00:32:25,239
from the plane out to the point we're

688
00:32:21,138 --> 00:32:25,238
talking about so if we were to do that

689
00:32:29,099 --> 00:32:39,219
for each card and we always just take

690
00:32:34,509 --> 00:32:45,210
the topmost point you know would that be

691
00:32:39,220 --> 00:32:45,210
sufficient uh

692
00:32:52,009 --> 00:32:57,379
and I'm not sure I know the answer to

693
00:32:53,990 --> 00:32:59,750
that question so let's think about it

694
00:32:57,380 --> 00:33:03,320
for one second suppose I have this dude

695
00:32:59,750 --> 00:33:07,420
here right and I want to take his top

696
00:33:03,319 --> 00:33:11,210
most point and maybe he looks like this

697
00:33:07,420 --> 00:33:12,529
in this case you can certainly see that

698
00:33:11,210 --> 00:33:15,590
that would not work this is why we

699
00:33:12,529 --> 00:33:18,799
discarded these cases before because

700
00:33:15,589 --> 00:33:20,209
this long piece here is is always going

701
00:33:18,799 --> 00:33:23,269
to appear to sort closer to the camera

702
00:33:20,210 --> 00:33:24,470
than this one at fact I think that's the

703
00:33:23,269 --> 00:33:28,069
way we can convince ourselves that the

704
00:33:24,470 --> 00:33:30,230
3d sort doesn't work right because it

705
00:33:28,069 --> 00:33:32,659
requires a point-by-point sort to know

706
00:33:30,230 --> 00:33:35,660
that this part of this guy is a behind

707
00:33:32,660 --> 00:33:38,750
this one so that's why we need the sort

708
00:33:35,660 --> 00:33:40,670
of weird rules about about sprites sort

709
00:33:38,750 --> 00:33:43,009
of coming together in order to resolve

710
00:33:40,670 --> 00:33:44,480
those things because in order to resolve

711
00:33:43,009 --> 00:33:45,440
something like this we would not we

712
00:33:44,480 --> 00:33:48,319
would have to do a point-by-point

713
00:33:45,440 --> 00:33:49,880
comparison in order to know that this

714
00:33:48,319 --> 00:33:51,649
part should be drawn behind this part

715
00:33:49,880 --> 00:33:53,840
because otherwise you'd say well this is

716
00:33:51,650 --> 00:33:55,400
the closest point right to the camera so

717
00:33:53,839 --> 00:33:58,009
this whole sprite would have to be drawn

718
00:33:55,400 --> 00:33:59,060
first and that's not correct this is

719
00:33:58,009 --> 00:34:04,879
actually the one that would be drawn

720
00:33:59,059 --> 00:34:06,710
first right so I think again that sort

721
00:34:04,880 --> 00:34:11,119
of suggests that that either you need to

722
00:34:06,710 --> 00:34:13,159
do sort of a fully 3d position Z buffer

723
00:34:11,119 --> 00:34:14,539
thing or you need to go with something

724
00:34:13,159 --> 00:34:17,840
that's going to handle the topological

725
00:34:14,539 --> 00:34:19,429
sort properly so I think I've relatively

726
00:34:17,840 --> 00:34:22,039
convinced myself just by looking at that

727
00:34:19,429 --> 00:34:24,710
it does seem to me that that means if

728
00:34:22,039 --> 00:34:26,659
you know if we want to try and go this

729
00:34:24,710 --> 00:34:28,970
route then we're going to need something

730
00:34:26,659 --> 00:34:31,250
that's going to take a look at sprites

731
00:34:28,969 --> 00:34:35,589
that overlap and when it finds sprites

732
00:34:31,250 --> 00:34:35,590
that overlap it's going to have to

733
00:34:36,219 --> 00:34:43,609
perform those sorts specifically that at

734
00:34:40,340 --> 00:34:45,379
least seems like the case to me and

735
00:34:43,610 --> 00:34:46,878
that's relatively tricky right because

736
00:34:45,378 --> 00:34:50,299
now we have to actually think a little

737
00:34:46,878 --> 00:34:52,610
bit more about whether these sprites you

738
00:34:50,300 --> 00:34:56,240
know kind of there whether they're

739
00:34:52,610 --> 00:35:00,410
actual screen space bounds line them up

740
00:34:56,239 --> 00:35:02,509
or not so yeah how do I want to approach

741
00:35:00,409 --> 00:35:04,219
that it seems like that's not something

742
00:35:02,510 --> 00:35:05,750
that wants to get sent down through

743
00:35:04,219 --> 00:35:08,149
renderer and so that seems to me like

744
00:35:05,750 --> 00:35:09,469
again that's going to require now

745
00:35:08,150 --> 00:35:11,980
thinking about this as something that's

746
00:35:09,469 --> 00:35:15,409
built outside as sort of the sprite list

747
00:35:11,980 --> 00:35:17,210
that then is walked as a tree and I'm

748
00:35:15,409 --> 00:35:19,429
sorry as a graph and then we actually

749
00:35:17,210 --> 00:35:26,570
sort of try to sort that graph more

750
00:35:19,429 --> 00:35:29,389
intelligently right so yeah uh let's try

751
00:35:26,570 --> 00:35:30,530
and I guess I you know like i said i'm

752
00:35:29,389 --> 00:35:32,929
not really sure what's going to happen

753
00:35:30,530 --> 00:35:34,910
here but let's try to start building

754
00:35:32,929 --> 00:35:36,139
something like that and i'm gonna i

755
00:35:34,909 --> 00:35:37,819
think we might have to try to do this

756
00:35:36,139 --> 00:35:39,559
sort of impasses because gonna be relied

757
00:35:37,820 --> 00:35:41,510
to the complicated so i'll start doing

758
00:35:39,559 --> 00:35:44,000
it now but this is probably going to be

759
00:35:41,510 --> 00:35:49,520
a thing for next week let's go ahead and

760
00:35:44,000 --> 00:35:52,730
take a look so let's let's just make I

761
00:35:49,519 --> 00:35:54,289
guess we can make this in here but what

762
00:35:52,730 --> 00:35:56,570
would we actually need and let's say I

763
00:35:54,289 --> 00:35:57,889
did this in the least like we won't try

764
00:35:56,570 --> 00:36:00,170
to accelerate it for us i'll do it in

765
00:35:57,889 --> 00:36:02,690
the dumbest possible way so let's say we

766
00:36:00,170 --> 00:36:05,750
had a thing a function here that's like

767
00:36:02,690 --> 00:36:07,970
you know resolved sprite graph or

768
00:36:05,750 --> 00:36:14,869
something you know and so we're just

769
00:36:07,969 --> 00:36:16,848
going to go full pull oops so what do i

770
00:36:14,869 --> 00:36:19,730
need to do to or i should i guess i

771
00:36:16,849 --> 00:36:22,730
should really say like build sprite

772
00:36:19,730 --> 00:36:25,119
graph at least first because we have to

773
00:36:22,730 --> 00:36:27,289
actually make one of these things first

774
00:36:25,119 --> 00:36:29,510
so in order to build a sprite graph i

775
00:36:27,289 --> 00:36:30,829
would need a list of sprites so i would

776
00:36:29,510 --> 00:36:33,849
need something here that would have

777
00:36:30,829 --> 00:36:38,210
information like okay here's the sprite

778
00:36:33,849 --> 00:36:40,039
and i would need to have essentially

779
00:36:38,210 --> 00:36:43,970
this the sort of sort key information i

780
00:36:40,039 --> 00:36:45,409
have here but i would need also some

781
00:36:43,969 --> 00:36:48,889
more information about whether the

782
00:36:45,409 --> 00:36:51,159
things overlap in screen space right so

783
00:36:48,889 --> 00:36:54,049
if I think about this I'm going to need

784
00:36:51,159 --> 00:36:56,449
the original sort of screen space

785
00:36:54,050 --> 00:37:02,839
positions of these guys so we need like

786
00:36:56,449 --> 00:37:07,338
min p or like screen mimpi and screen

787
00:37:02,838 --> 00:37:09,199
max p something like this so i can tell

788
00:37:07,338 --> 00:37:11,690
if these two things overlap and then i

789
00:37:09,199 --> 00:37:15,679
would need the stuff that we actually

790
00:37:11,690 --> 00:37:17,539
would use like i said for the sort which

791
00:37:15,679 --> 00:37:19,639
would probably be that z mac

792
00:37:17,539 --> 00:37:21,289
set the very least so I don't know if we

793
00:37:19,639 --> 00:37:23,690
would want the Y min Y max because we

794
00:37:21,289 --> 00:37:26,719
can probably use the screen ones for

795
00:37:23,690 --> 00:37:35,809
that I'm guessing but we'll find out in

796
00:37:26,719 --> 00:37:39,649
a second so we would have something like

797
00:37:35,809 --> 00:37:42,230
this where we've got you know a sprite

798
00:37:39,650 --> 00:37:45,500
note or something like this and each one

799
00:37:42,230 --> 00:37:47,210
of these things we would have a list and

800
00:37:45,500 --> 00:37:49,429
we have to then build a graph out of the

801
00:37:47,210 --> 00:37:52,490
list right we'd have to sort of have a

802
00:37:49,429 --> 00:37:54,109
have a idea of the edges in there that

803
00:37:52,489 --> 00:37:55,639
sort of connect these sprite nodes to

804
00:37:54,110 --> 00:37:57,230
each other and say you know this sprite

805
00:37:55,639 --> 00:38:00,739
nodes in front of this sprite note or

806
00:37:57,230 --> 00:38:06,650
something like that so let's suppose I

807
00:38:00,739 --> 00:38:10,489
had a list of these things here's the

808
00:38:06,650 --> 00:38:18,170
input nodes and maybe I have an input

809
00:38:10,489 --> 00:38:20,599
node count to me so if i take this input

810
00:38:18,170 --> 00:38:23,539
node count and I've got the input nodes

811
00:38:20,599 --> 00:38:28,369
and here I go and I say okay let's go

812
00:38:23,539 --> 00:38:30,980
through a you know node index a at

813
00:38:28,369 --> 00:38:34,789
equals something note index a is less

814
00:38:30,980 --> 00:38:45,559
than input node count and node indexes

815
00:38:34,789 --> 00:38:47,480
go like this like so so if I was to

816
00:38:45,559 --> 00:38:49,340
compare every node with every other node

817
00:38:47,480 --> 00:38:52,869
right so I'm just I'm just doing the

818
00:38:49,340 --> 00:38:56,090
absolute stupidest thing possible here I

819
00:38:52,869 --> 00:38:57,230
could then say you know a good dias in

820
00:38:56,090 --> 00:39:00,050
the exact same way I was doing it before

821
00:38:57,230 --> 00:39:01,760
and also I guess this would be minus one

822
00:39:00,050 --> 00:39:05,480
so if i go through every possible

823
00:39:01,760 --> 00:39:09,050
combination of these guys and I should

824
00:39:05,480 --> 00:39:11,588
also probably check make sure we

825
00:39:09,050 --> 00:39:17,200
actually have some

826
00:39:11,588 --> 00:39:21,338
I do not know what that just did all

827
00:39:17,199 --> 00:39:25,239
right so if I go through all of these

828
00:39:21,338 --> 00:39:27,849
index indexes so that I can have both my

829
00:39:25,239 --> 00:39:30,909
nodes what I could do here say you know

830
00:39:27,849 --> 00:39:32,559
let me compare these two nodes with each

831
00:39:30,909 --> 00:39:36,248
other to see whether they overlap in

832
00:39:32,559 --> 00:39:41,200
screen space so I'm gonna say input

833
00:39:36,248 --> 00:39:46,568
nodes plus mode index a and put nodes

834
00:39:41,199 --> 00:39:48,068
just note index be so I grabbed out two

835
00:39:46,568 --> 00:39:53,170
of these sprite notes and then I want to

836
00:39:48,068 --> 00:39:58,389
know like if overlap the screen overlap

837
00:39:53,170 --> 00:40:01,479
for a and B then I know that I have a

838
00:39:58,389 --> 00:40:04,328
case where I need to determine which one

839
00:40:01,478 --> 00:40:07,478
of these two would appear in front of

840
00:40:04,329 --> 00:40:10,809
which other one right so then I would

841
00:40:07,478 --> 00:40:12,548
have a notion of a sprite edge and the

842
00:40:10,809 --> 00:40:14,829
sprite edge would just be in this graph

843
00:40:12,548 --> 00:40:16,838
a connectivity between two sprite nodes

844
00:40:14,829 --> 00:40:19,839
right so it would have like a you know

845
00:40:16,838 --> 00:40:23,259
index a and an index be of the sprites

846
00:40:19,838 --> 00:40:25,150
and it would say like oh okay this index

847
00:40:23,259 --> 00:40:29,019
is in front of this other index or

848
00:40:25,150 --> 00:40:34,298
whatever and so you know maybe I could

849
00:40:29,018 --> 00:40:35,828
do this in front and behind so basically

850
00:40:34,298 --> 00:40:38,048
i can add an edge and say that this

851
00:40:35,829 --> 00:40:40,059
sprite is in front of this right or this

852
00:40:38,048 --> 00:40:43,028
right is behind the sprite so it's a

853
00:40:40,059 --> 00:40:44,410
directed edge for those of you who don't

854
00:40:43,028 --> 00:40:51,309
know any graft your i suppose i should

855
00:40:44,409 --> 00:40:53,348
mention this really briefly so there is

856
00:40:51,309 --> 00:40:54,700
such a thing as graph theory we don't

857
00:40:53,349 --> 00:40:56,200
really cover it on handmade here we

858
00:40:54,699 --> 00:40:57,759
haven't really got to do much with it I

859
00:40:56,199 --> 00:40:58,808
don't know how much we will do with it

860
00:40:57,759 --> 00:41:00,789
there might be a little bit more but we

861
00:40:58,809 --> 00:41:02,650
do world Jen I definitely something that

862
00:41:00,789 --> 00:41:04,900
you need to know if you're doing game

863
00:41:02,650 --> 00:41:08,380
programming in a broad sense it comes up

864
00:41:04,900 --> 00:41:11,588
in various places so it is relevant and

865
00:41:08,380 --> 00:41:14,140
I wouldn't discourage anyone from going

866
00:41:11,588 --> 00:41:16,748
from reading more about it but basically

867
00:41:14,139 --> 00:41:18,818
there's you know in graph theory we

868
00:41:16,748 --> 00:41:23,858
essentially have the concept of you know

869
00:41:18,818 --> 00:41:25,090
nodes and edges and what we're talking

870
00:41:23,858 --> 00:41:27,369
about is building

871
00:41:25,090 --> 00:41:29,920
graph where we've got some number of

872
00:41:27,369 --> 00:41:34,449
nodes and these nodes you know have

873
00:41:29,920 --> 00:41:39,639
something in them and then we have some

874
00:41:34,449 --> 00:41:42,179
number of edges between them right and

875
00:41:39,639 --> 00:41:44,349
the edges might also have data

876
00:41:42,179 --> 00:41:47,879
associated with them you know maybe I've

877
00:41:44,349 --> 00:41:50,409
got some data associated with these

878
00:41:47,880 --> 00:41:52,269
edges as well for some reason who knows

879
00:41:50,409 --> 00:41:55,899
why I have no idea why they would but

880
00:41:52,269 --> 00:41:59,500
you know maybe they do I don't know that

881
00:41:55,900 --> 00:42:03,610
many Greek symbols but let's say there's

882
00:41:59,500 --> 00:42:05,469
some of those uh so anyway you you know

883
00:42:03,610 --> 00:42:10,329
you get a situation where you construct

884
00:42:05,469 --> 00:42:11,949
some meaning out of this usually in the

885
00:42:10,329 --> 00:42:13,750
context of your program and so for the

886
00:42:11,949 --> 00:42:15,250
cases that I'm talking about I was sort

887
00:42:13,750 --> 00:42:17,139
of saying that the nodes of this are

888
00:42:15,250 --> 00:42:19,300
going to be sprites and the edges of

889
00:42:17,139 --> 00:42:20,949
this are going to be information that

890
00:42:19,300 --> 00:42:24,100
says that one sprite is in front of

891
00:42:20,949 --> 00:42:25,989
another sprite right and the reason we

892
00:42:24,099 --> 00:42:28,360
want to do this is again harkening back

893
00:42:25,989 --> 00:42:30,609
to the river city ransom underground

894
00:42:28,360 --> 00:42:31,960
case we want to kind of say well we're

895
00:42:30,610 --> 00:42:34,120
going to define some semantic

896
00:42:31,960 --> 00:42:35,949
information where we say that this is

897
00:42:34,119 --> 00:42:38,019
supposed to be in front of this this is

898
00:42:35,949 --> 00:42:39,730
supposed to be behind this whatever we

899
00:42:38,019 --> 00:42:41,860
want to define that and then allowed the

900
00:42:39,730 --> 00:42:43,990
have the game have a solver that will go

901
00:42:41,860 --> 00:42:45,670
in and figure out what the order is that

902
00:42:43,989 --> 00:42:48,579
you can draw these sprites in in order

903
00:42:45,670 --> 00:42:53,920
to satisfy as much as possible as what

904
00:42:48,579 --> 00:42:55,329
the graph said to do right okay so graph

905
00:42:53,920 --> 00:42:56,710
theory is basically algorithms that

906
00:42:55,329 --> 00:42:58,719
study these sorts of things and how you

907
00:42:56,710 --> 00:43:01,119
can determine stuff about them for

908
00:42:58,719 --> 00:43:03,789
example in this case you know you might

909
00:43:01,119 --> 00:43:05,079
say oh maybe I want to you know ask some

910
00:43:03,789 --> 00:43:07,329
simple questions about the graph like

911
00:43:05,079 --> 00:43:09,279
what's you know what's the maximum

912
00:43:07,329 --> 00:43:11,230
number of edges that emanate from a node

913
00:43:09,280 --> 00:43:12,790
or how many times could I get to this

914
00:43:11,230 --> 00:43:15,579
node by a different paths or you know

915
00:43:12,789 --> 00:43:16,779
stuff like this and specifically the

916
00:43:15,579 --> 00:43:19,000
kind of graph that we're talking about

917
00:43:16,780 --> 00:43:24,040
here we have what's called a directed

918
00:43:19,000 --> 00:43:25,840
graph and the reason it's a directed

919
00:43:24,039 --> 00:43:28,570
graph is because of the way that I

920
00:43:25,840 --> 00:43:32,140
talked about my edges we didn't say

921
00:43:28,570 --> 00:43:34,390
sprite a is connected to stripe be if we

922
00:43:32,139 --> 00:43:35,739
did that would be an undirected graph

923
00:43:34,389 --> 00:43:37,629
because we're just saying that there's

924
00:43:35,739 --> 00:43:38,339
an edge between a and B and we don't

925
00:43:37,630 --> 00:43:41,039
have any other

926
00:43:38,340 --> 00:43:42,930
thing we want to say about it but in our

927
00:43:41,039 --> 00:43:45,630
case we're trying to specify a

928
00:43:42,929 --> 00:43:48,089
directionality to that connection so not

929
00:43:45,630 --> 00:43:50,400
just some data but an actual meaning in

930
00:43:48,090 --> 00:43:52,680
the graph and what that means is that

931
00:43:50,400 --> 00:43:55,800
our edges are directed they have the

932
00:43:52,679 --> 00:43:59,309
notion that say like a is in front of B

933
00:43:55,800 --> 00:44:02,039
so there's a natural order to it C is in

934
00:43:59,309 --> 00:44:03,599
front of a or something right and we

935
00:44:02,039 --> 00:44:05,279
would then say well the base of the

936
00:44:03,599 --> 00:44:08,150
arrow is in front of the target of the

937
00:44:05,280 --> 00:44:10,590
arrow maybe or who knows what right and

938
00:44:08,150 --> 00:44:13,530
so once we assign that meaning we then

939
00:44:10,590 --> 00:44:15,059
create a specific type of graph that's a

940
00:44:13,530 --> 00:44:16,760
directed graph which is to say that its

941
00:44:15,059 --> 00:44:20,909
edges have direction to them and

942
00:44:16,760 --> 00:44:22,950
furthermore we would want to have one

943
00:44:20,909 --> 00:44:28,739
step up from that which is a directed

944
00:44:22,949 --> 00:44:30,599
acyclic graph now directed acyclic graph

945
00:44:28,739 --> 00:44:32,909
is a graph that doesn't have any cycles

946
00:44:30,599 --> 00:44:36,659
in it so for example this right here is

947
00:44:32,909 --> 00:44:38,670
a cycle if I started see I can go to a I

948
00:44:36,659 --> 00:44:39,719
can go to d I can go back to see and I

949
00:44:38,670 --> 00:44:41,880
can just keep going around and around

950
00:44:39,719 --> 00:44:44,339
and around right because the edges flow

951
00:44:41,880 --> 00:44:45,960
in that direction right on the other

952
00:44:44,340 --> 00:44:48,720
hand if I was to create a slightly

953
00:44:45,960 --> 00:44:51,570
different graph one that looked like for

954
00:44:48,719 --> 00:44:53,699
example this now I no longer have in a

955
00:44:51,570 --> 00:44:55,950
cyclic I'm sorry now I no longer have a

956
00:44:53,699 --> 00:44:58,259
cyclic graph I have an acyclic graph

957
00:44:55,949 --> 00:45:02,789
because no matter where you go you

958
00:44:58,260 --> 00:45:05,220
always end up at be right there's no way

959
00:45:02,789 --> 00:45:07,829
to go i can't cycle no matter where I go

960
00:45:05,219 --> 00:45:10,019
I always end up getting forced into be

961
00:45:07,829 --> 00:45:14,309
right I always end up getting forced out

962
00:45:10,019 --> 00:45:16,980
to a leaf and so directed acyclic graphs

963
00:45:14,309 --> 00:45:18,539
or dags as they're often called are

964
00:45:16,980 --> 00:45:20,639
super nice because we know there's sort

965
00:45:18,539 --> 00:45:22,559
of that total ordering to them right and

966
00:45:20,639 --> 00:45:24,809
that's exactly what we want for our sort

967
00:45:22,559 --> 00:45:26,039
so we want this because if we have this

968
00:45:24,809 --> 00:45:27,360
we would know we could always draw

969
00:45:26,039 --> 00:45:29,309
everything because we always know

970
00:45:27,360 --> 00:45:32,099
there's a chain for every set of sprites

971
00:45:29,309 --> 00:45:35,190
that we can follow to draw them in the

972
00:45:32,099 --> 00:45:37,079
correct order we probably won't be so

973
00:45:35,190 --> 00:45:38,369
lucky we'll probably end up having

974
00:45:37,079 --> 00:45:41,069
something like this where we can create

975
00:45:38,369 --> 00:45:42,480
a cycle and so this is again getting

976
00:45:41,070 --> 00:45:44,700
back to what andrew russell was talking

977
00:45:42,480 --> 00:45:46,800
about in his blog post if we got that

978
00:45:44,699 --> 00:45:48,480
cycle we have to break it somehow

979
00:45:46,800 --> 00:45:50,220
because if a is supposed to be in front

980
00:45:48,480 --> 00:45:51,369
of B&amp;B is hosted in front of c and c is

981
00:45:50,219 --> 00:45:52,629
for us in front of a

982
00:45:51,369 --> 00:45:55,269
there's no way to ever draw them in

983
00:45:52,630 --> 00:45:56,710
order you've created a cycle and so if

984
00:45:55,268 --> 00:46:01,118
we're saying that we're still we're

985
00:45:56,710 --> 00:46:04,240
never going to split sprites you know we

986
00:46:01,119 --> 00:46:06,579
don't want to solve it that way so if we

987
00:46:04,239 --> 00:46:08,919
never want to split sprites then what we

988
00:46:06,579 --> 00:46:10,990
have to do is acknowledge that fact that

989
00:46:08,920 --> 00:46:14,019
we have a cycle and just kill one of the

990
00:46:10,989 --> 00:46:15,578
edges arbitrarily right and we can sort

991
00:46:14,018 --> 00:46:17,108
of make that determination about which

992
00:46:15,579 --> 00:46:18,910
edge to kill in a number of ways like

993
00:46:17,108 --> 00:46:21,759
which rights have the least overlap

994
00:46:18,909 --> 00:46:24,338
might be a good way of doing it which

995
00:46:21,759 --> 00:46:25,929
brights are closest to being together I

996
00:46:24,338 --> 00:46:28,298
don't know but there's a number of

997
00:46:25,929 --> 00:46:30,368
metrics we could employ to figure out

998
00:46:28,298 --> 00:46:34,119
which of the edges would be the best one

999
00:46:30,369 --> 00:46:36,900
to kill in a cycle and we would just

1000
00:46:34,119 --> 00:46:39,700
kill edges in a cycle until we got a

1001
00:46:36,900 --> 00:46:41,650
directed graph that didn't have any a

1002
00:46:39,699 --> 00:46:45,969
directed acyclic graph that so it didn't

1003
00:46:41,650 --> 00:46:47,650
have any cycles so that's you know

1004
00:46:45,969 --> 00:46:49,538
that's the part of the graph theory that

1005
00:46:47,650 --> 00:46:51,789
we're talking about here so basically

1006
00:46:49,539 --> 00:46:53,440
what we'd say is well okay if they if

1007
00:46:51,789 --> 00:46:55,690
these two things overlap on the screen

1008
00:46:53,440 --> 00:46:58,450
then what we're going to do is we're

1009
00:46:55,690 --> 00:47:01,119
going to add an edge here right we would

1010
00:46:58,449 --> 00:47:03,669
add an edge so we'd add a sprite edge

1011
00:47:01,119 --> 00:47:06,190
and the sprite edge would say if these

1012
00:47:03,670 --> 00:47:07,809
two things overlap we just want to know

1013
00:47:06,190 --> 00:47:10,690
which ones in front of and which ones

1014
00:47:07,809 --> 00:47:16,869
behind you know each other well we

1015
00:47:10,690 --> 00:47:20,409
already have that ability so we can go

1016
00:47:16,869 --> 00:47:26,950
up here and take our our in front of

1017
00:47:20,409 --> 00:47:29,018
code and we can just call that right so

1018
00:47:26,949 --> 00:47:33,219
we can just do this right here so we can

1019
00:47:29,018 --> 00:47:37,719
say like if is in front of bound a and

1020
00:47:33,219 --> 00:47:39,429
bound be like so and if a you know in

1021
00:47:37,719 --> 00:47:41,798
this case if a is in front of B then we

1022
00:47:39,429 --> 00:47:44,318
would add an you know an a B edge and

1023
00:47:41,798 --> 00:47:48,219
the other in the other case we'd add the

1024
00:47:44,318 --> 00:47:49,748
BA edge right in the case where they

1025
00:47:48,219 --> 00:47:51,459
don't overlap we just wouldn't add an

1026
00:47:49,748 --> 00:47:52,899
edge at all because we don't care if two

1027
00:47:51,460 --> 00:47:54,670
sprites don't overlap in screens place

1028
00:47:52,900 --> 00:47:56,200
we don't care what order they draw in

1029
00:47:54,670 --> 00:47:59,920
because they're never going to include

1030
00:47:56,199 --> 00:48:02,379
each other so that doesn't matter all

1031
00:47:59,920 --> 00:48:04,028
right so in this case we've got sort of

1032
00:48:02,380 --> 00:48:05,200
the sprite bound a sprite Bambi

1033
00:48:04,028 --> 00:48:07,929
situation what

1034
00:48:05,199 --> 00:48:09,309
like to do here probably is well i don't

1035
00:48:07,929 --> 00:48:10,690
know i guess i'll leave it like this for

1036
00:48:09,309 --> 00:48:15,429
the time being because we don't really

1037
00:48:10,690 --> 00:48:21,190
care about it too much I'll just

1038
00:48:15,429 --> 00:48:22,000
construct these two directly but we're

1039
00:48:21,190 --> 00:48:24,400
ventually we're going to want to

1040
00:48:22,000 --> 00:48:25,750
regularize the data format anyway so

1041
00:48:24,400 --> 00:48:30,369
that we don't have to do that so it's

1042
00:48:25,750 --> 00:48:37,329
why min why me why min wimax zmax so the

1043
00:48:30,369 --> 00:48:40,570
zmax is transferred directly but the

1044
00:48:37,329 --> 00:48:51,369
wise i think we would do a sort of like

1045
00:48:40,570 --> 00:48:52,780
this so there I've created the bounds

1046
00:48:51,369 --> 00:48:55,240
and then we can use ours in front of we

1047
00:48:52,780 --> 00:48:56,920
add the edges and off we go and so

1048
00:48:55,239 --> 00:48:59,879
really all we would need to know is is

1049
00:48:56,920 --> 00:49:02,320
this you know is there a screen overlap

1050
00:48:59,880 --> 00:49:04,240
and you know what we could do here we

1051
00:49:02,320 --> 00:49:06,760
could even lean on if we wanted to our

1052
00:49:04,239 --> 00:49:08,828
rectangle concept right so we could even

1053
00:49:06,760 --> 00:49:14,200
say you know we've got we have to have a

1054
00:49:08,829 --> 00:49:16,240
rectangle area here and if we did that

1055
00:49:14,199 --> 00:49:20,169
then we would just actually say like if

1056
00:49:16,239 --> 00:49:23,159
they intersect so I'm going to take a

1057
00:49:20,170 --> 00:49:23,159
look at our math here

1058
00:49:29,510 --> 00:49:36,980
so we have a two I intersect but we

1059
00:49:33,000 --> 00:49:42,269
don't have a to regular intersect which

1060
00:49:36,980 --> 00:49:46,320
we would need right and I don't see I

1061
00:49:42,269 --> 00:49:48,449
don't see you there so I'm going to go

1062
00:49:46,320 --> 00:49:56,420
ahead and grab this guy and make one for

1063
00:49:48,449 --> 00:49:56,419
our two case and let's see is inside

1064
00:50:02,838 --> 00:50:11,070
oops and so in this case we just not

1065
00:50:09,329 --> 00:50:15,809
gonna check the Z but otherwise it's

1066
00:50:11,070 --> 00:50:19,109
exactly the same so there's our

1067
00:50:15,809 --> 00:50:23,190
rectangles and so all i would say here

1068
00:50:19,108 --> 00:50:29,269
is like okay if our rectangles intersect

1069
00:50:23,190 --> 00:50:41,220
and for a area or a screen area and B

1070
00:50:29,269 --> 00:50:42,690
screen area then I would know that these

1071
00:50:41,219 --> 00:50:46,199
are two people that have to have edge is

1072
00:50:42,690 --> 00:50:48,480
constructed between them so in the case

1073
00:50:46,199 --> 00:50:51,629
of I guess the other thing we could

1074
00:50:48,480 --> 00:50:53,550
check is if there's these were equal we

1075
00:50:51,630 --> 00:50:55,619
wouldn't necessarily have to do anything

1076
00:50:53,550 --> 00:50:57,330
if they yeah there's some things we

1077
00:50:55,619 --> 00:50:59,280
could do there but anyway so point being

1078
00:50:57,329 --> 00:51:01,588
if we you know if we construct something

1079
00:50:59,280 --> 00:51:04,320
like this then I and of course I have to

1080
00:51:01,588 --> 00:51:07,320
change this to a screen area I don't

1081
00:51:04,320 --> 00:51:09,588
remember what our convention was for

1082
00:51:07,320 --> 00:51:14,880
rectangle tues here met take a look

1083
00:51:09,588 --> 00:51:18,449
rectangle to where is that defined is

1084
00:51:14,880 --> 00:51:20,660
that in the platform good it is such min

1085
00:51:18,449 --> 00:51:20,659
max

1086
00:51:29,760 --> 00:51:34,060
so you know that would that would

1087
00:51:32,260 --> 00:51:35,980
basically be what would construct the

1088
00:51:34,059 --> 00:51:37,750
graph for us and then we just need a way

1089
00:51:35,980 --> 00:51:39,039
of recording those edges right so we

1090
00:51:37,750 --> 00:51:41,679
just need you know we would just have

1091
00:51:39,039 --> 00:51:43,509
some temporary memory where we just put

1092
00:51:41,679 --> 00:51:47,199
all those edges in there and off we go

1093
00:51:43,510 --> 00:51:49,960
now unfortunately for us this is

1094
00:51:47,199 --> 00:51:52,389
actually going to be a little bit dicey

1095
00:51:49,960 --> 00:51:55,119
because as we're constructing this graph

1096
00:51:52,389 --> 00:51:57,190
we also have to figure out how we're

1097
00:51:55,119 --> 00:51:58,900
going to sort of more quickly access it

1098
00:51:57,190 --> 00:52:00,730
right so we're probably gonna I'm going

1099
00:51:58,900 --> 00:52:02,800
to leave this unimplemented because

1100
00:52:00,730 --> 00:52:08,050
until I know a little bit more about how

1101
00:52:02,800 --> 00:52:09,280
we need to walk the graph I until I know

1102
00:52:08,050 --> 00:52:11,230
more about how we're going to walk the

1103
00:52:09,280 --> 00:52:15,250
graph I don't feel like I'm going to be

1104
00:52:11,230 --> 00:52:16,780
too comfortable with that right because

1105
00:52:15,250 --> 00:52:18,940
we're probably going to do something

1106
00:52:16,780 --> 00:52:20,170
like for each bright node have a list of

1107
00:52:18,940 --> 00:52:21,579
the edges that come off it so that we

1108
00:52:20,170 --> 00:52:22,840
can quickly get to them rather than

1109
00:52:21,579 --> 00:52:25,389
having to sort of check through that

1110
00:52:22,840 --> 00:52:26,500
list the whole time but at least this is

1111
00:52:25,389 --> 00:52:28,389
the code that we know that we would be

1112
00:52:26,500 --> 00:52:31,929
executing up to the point where we

1113
00:52:28,389 --> 00:52:35,409
actually have to add the edge so that is

1114
00:52:31,929 --> 00:52:37,629
how the sprite graph would be built and

1115
00:52:35,409 --> 00:52:40,079
you can see that this is an N squared

1116
00:52:37,630 --> 00:52:42,880
problem so what we would need to do

1117
00:52:40,079 --> 00:52:44,860
shortly after doing this part of it is

1118
00:52:42,880 --> 00:52:48,250
we have to do something that partitions

1119
00:52:44,860 --> 00:52:51,519
the screen up into sub rectangles for

1120
00:52:48,250 --> 00:52:53,110
purposes of building this graph probably

1121
00:52:51,519 --> 00:52:57,599
so that we would not have to check

1122
00:52:53,110 --> 00:52:57,599
everyone against every other one right

1123
00:52:58,170 --> 00:53:02,889
in terms of the screen area overlap so

1124
00:53:01,599 --> 00:53:04,360
that's also something that we'd have to

1125
00:53:02,889 --> 00:53:07,629
do at the outset because basically

1126
00:53:04,360 --> 00:53:09,970
looping over every node for node index a

1127
00:53:07,630 --> 00:53:11,800
is not acceptable this would have to

1128
00:53:09,969 --> 00:53:16,209
loop over only ones that we knew were

1129
00:53:11,800 --> 00:53:20,620
roughly within a similar screen bound if

1130
00:53:16,210 --> 00:53:23,710
that makes sense uh so yeah that looks

1131
00:53:20,619 --> 00:53:28,630
like how we would pretty much handle the

1132
00:53:23,710 --> 00:53:31,360
sprite graph and then we'd have to do

1133
00:53:28,630 --> 00:53:33,700
sort of our our testing on it

1134
00:53:31,360 --> 00:53:35,980
now the other thing that's sort of

1135
00:53:33,699 --> 00:53:37,179
questionable here is if you look at how

1136
00:53:35,980 --> 00:53:38,740
much work that's going to go into this

1137
00:53:37,179 --> 00:53:40,269
the other thing that we can't have to

1138
00:53:38,739 --> 00:53:43,209
IRS ourselves at this point is like do

1139
00:53:40,269 --> 00:53:45,969
you know would we rather figure out a

1140
00:53:43,210 --> 00:53:47,530
way to break our stuff up into Z buffer

1141
00:53:45,969 --> 00:53:48,669
roll pieces right because that's the

1142
00:53:47,530 --> 00:53:50,830
other route we can go with it we can

1143
00:53:48,670 --> 00:53:54,909
just say like well let's actually try to

1144
00:53:50,829 --> 00:53:56,079
put these cards in actual 3d and I don't

1145
00:53:54,909 --> 00:53:57,129
really know but you can see how much

1146
00:53:56,079 --> 00:53:58,420
works gonna be involved here we're going

1147
00:53:57,130 --> 00:54:00,490
to have to do a spatial partition for

1148
00:53:58,420 --> 00:54:01,510
this we're going to have to do it is in

1149
00:54:00,489 --> 00:54:02,769
front of then we're going to have to

1150
00:54:01,510 --> 00:54:05,530
walk the graph and we're going to have

1151
00:54:02,769 --> 00:54:08,139
to figure out which cycles we want to

1152
00:54:05,530 --> 00:54:10,330
remove it is a lot of work and it's kind

1153
00:54:08,139 --> 00:54:12,519
of I'm wondering whether that's going to

1154
00:54:10,329 --> 00:54:14,440
just be it's going to bog us down in

1155
00:54:12,519 --> 00:54:16,599
terms of performance when we want to run

1156
00:54:14,440 --> 00:54:18,519
on GPUs which are already going to be

1157
00:54:16,599 --> 00:54:20,589
capable of doing Z buffers fast enough

1158
00:54:18,519 --> 00:54:22,659
you know at that point it's like well

1159
00:54:20,590 --> 00:54:24,850
should we just use the Z buffer and be

1160
00:54:22,659 --> 00:54:26,769
done with it because that will be faster

1161
00:54:24,849 --> 00:54:29,469
than trying to run the sorts on the cpu

1162
00:54:26,769 --> 00:54:33,090
probably if we push the sprite count up

1163
00:54:29,469 --> 00:54:33,089
high enough you know I'm saying

1164
00:54:43,380 --> 00:54:52,528
and I don't really know right you know

1165
00:54:50,190 --> 00:54:54,028
for transparent things obviously we have

1166
00:54:52,528 --> 00:54:57,210
the problem where we would have to sort

1167
00:54:54,028 --> 00:54:58,528
anyway and so part of its just saying

1168
00:54:57,210 --> 00:55:00,000
well you know if you actually just bite

1169
00:54:58,528 --> 00:55:01,619
the bullet and have your sorting be a

1170
00:55:00,000 --> 00:55:06,809
primary thing in a sprite engine it

1171
00:55:01,619 --> 00:55:09,869
means that you can lean on that for

1172
00:55:06,809 --> 00:55:11,069
transparency as well and then you can do

1173
00:55:09,869 --> 00:55:12,298
whatever con transparent effects you

1174
00:55:11,068 --> 00:55:14,568
want because you know throw is going to

1175
00:55:12,298 --> 00:55:18,028
sort into the scene of the right order

1176
00:55:14,568 --> 00:55:19,528
but I don't know so we'll see that's

1177
00:55:18,028 --> 00:55:21,389
probably yet for today because I don't

1178
00:55:19,528 --> 00:55:24,028
really want to actually start going into

1179
00:55:21,389 --> 00:55:25,558
that into more detail because I feel

1180
00:55:24,028 --> 00:55:27,690
like you know we're going to be at a

1181
00:55:25,559 --> 00:55:29,730
time in like two minutes anyway so I'm

1182
00:55:27,690 --> 00:55:31,409
going to go to the Q&amp;A but that's that's

1183
00:55:29,730 --> 00:55:32,699
basically what we're looking at and i'll

1184
00:55:31,409 --> 00:55:40,139
leave 0 this out so that it won't cause

1185
00:55:32,699 --> 00:55:42,239
any code problems but there we go one

1186
00:55:40,139 --> 00:55:46,980
thing we could also do you know in that

1187
00:55:42,239 --> 00:55:49,828
case as well is for these sprites we

1188
00:55:46,980 --> 00:55:51,539
also have the option certainly of you

1189
00:55:49,829 --> 00:55:53,430
know if we ever went to optimize our

1190
00:55:51,539 --> 00:55:57,390
software renderer the fact that we're

1191
00:55:53,429 --> 00:55:59,730
bucketing sprites by which by part of

1192
00:55:57,389 --> 00:56:02,518
the screen that would also we could

1193
00:55:59,730 --> 00:56:04,500
leverage that in the software renderer

1194
00:56:02,518 --> 00:56:07,739
to only consider sprites that overlap a

1195
00:56:04,500 --> 00:56:09,719
tile for tiled rendering right so we

1196
00:56:07,739 --> 00:56:17,308
could also get dual use out of that sort

1197
00:56:09,719 --> 00:56:23,189
if we wanted to anyway so I'm going to

1198
00:56:17,309 --> 00:56:26,180
wind it down and will redress this in in

1199
00:56:23,190 --> 00:56:26,179
next week streams

1200
00:57:03,190 --> 00:57:08,360
room 0 0 1 0 0 1 1 how much more work

1201
00:57:06,769 --> 00:57:12,199
would you have to do to get a full 3d

1202
00:57:08,360 --> 00:57:14,059
sorting I I feel like I'm not explaining

1203
00:57:12,199 --> 00:57:16,279
this properly because this question has

1204
00:57:14,059 --> 00:57:19,579
kind of so many times and I don't I feel

1205
00:57:16,280 --> 00:57:25,010
like I'm not communicating it well full

1206
00:57:19,579 --> 00:57:28,610
3d sorting is really easy the problem is

1207
00:57:25,010 --> 00:57:32,510
we don't have 3d data that's the problem

1208
00:57:28,610 --> 00:57:33,950
right you can sort 3d points trivially

1209
00:57:32,510 --> 00:57:37,400
you just use the distance from the

1210
00:57:33,949 --> 00:57:40,639
camera and you're dumb right but the

1211
00:57:37,400 --> 00:57:44,150
problem is if you don't have 3d data you

1212
00:57:40,639 --> 00:57:46,339
can't sort 3d data and so in our

1213
00:57:44,150 --> 00:57:48,950
situation you know we have the problem

1214
00:57:46,340 --> 00:57:51,289
of here's a sprite it represents a

1215
00:57:48,949 --> 00:57:55,219
fairly complex 3d object but it's just a

1216
00:57:51,289 --> 00:57:58,519
flat plane there is no way to really you

1217
00:57:55,219 --> 00:58:00,619
know sort it into a scene correctly

1218
00:57:58,519 --> 00:58:02,509
because it's a card and that card

1219
00:58:00,619 --> 00:58:07,190
doesn't have the meaning that you're I

1220
00:58:02,510 --> 00:58:11,060
thinks that it has right and so we have

1221
00:58:07,190 --> 00:58:15,829
to decide how much 3d construction we're

1222
00:58:11,059 --> 00:58:22,579
going to make for our actual objects if

1223
00:58:15,829 --> 00:58:25,779
that makes sense and so and I don't know

1224
00:58:22,579 --> 00:58:25,779
the answer to that question right

1225
00:58:29,690 --> 00:58:35,300
I really don't and you know obviously we

1226
00:58:33,469 --> 00:58:37,159
won't get we won't ever be able to get

1227
00:58:35,300 --> 00:58:39,470
full 3d data because the things don't

1228
00:58:37,159 --> 00:58:41,059
exist as 3d objects they've only been

1229
00:58:39,469 --> 00:58:48,709
painted as images nobody knows what they

1230
00:58:41,059 --> 00:58:51,769
look like in 3d right Rome's or is it or

1231
00:58:48,710 --> 00:58:53,630
10 11 I mean use fake 3d data since our

1232
00:58:51,769 --> 00:58:56,679
cards are essentially flat we can give

1233
00:58:53,630 --> 00:59:02,890
an epsilon width to it for the sorting

1234
00:58:56,679 --> 00:59:02,889
yes so in order to do that like I said I

1235
00:59:05,590 --> 00:59:11,090
I really just don't know how to explain

1236
00:59:08,420 --> 00:59:15,680
this sorry um I'll try one more time and

1237
00:59:11,090 --> 00:59:18,320
you can tell me if this helps suppose I

1238
00:59:15,679 --> 00:59:21,919
have two 3d objects here's one here's

1239
00:59:18,320 --> 00:59:23,150
another right here is the camera looking

1240
00:59:21,920 --> 00:59:25,340
at them and I want to know which one I'm

1241
00:59:23,150 --> 00:59:28,940
going to draw first there is no way to

1242
00:59:25,340 --> 00:59:31,820
sort these two 3d objects by which one

1243
00:59:28,940 --> 00:59:34,070
the camera hits first because there's no

1244
00:59:31,820 --> 00:59:38,210
such thing as which one the camera hits

1245
00:59:34,070 --> 00:59:41,059
first right that's that's not really a

1246
00:59:38,210 --> 00:59:42,889
thing being humans we happen to know

1247
00:59:41,059 --> 00:59:45,949
that because of the shapes of these two

1248
00:59:42,889 --> 00:59:49,369
objects in the places where they happen

1249
00:59:45,949 --> 00:59:51,919
to overlap we could always draw this one

1250
00:59:49,369 --> 00:59:56,029
first and it would always be correct

1251
00:59:51,920 --> 00:59:59,059
from this perspective right so that's

1252
00:59:56,030 --> 01:00:00,769
good that's the kind of rules we were

1253
00:59:59,059 --> 01:00:02,690
trying to think of when we were talking

1254
01:00:00,769 --> 01:00:07,219
about our sprites which were like kind

1255
01:00:02,690 --> 01:00:09,559
of fake cards they're okay but if we

1256
01:00:07,219 --> 01:00:13,429
actually wanted to sort these properly

1257
01:00:09,559 --> 01:00:16,009
in 3d using actual 3d data so suppose we

1258
01:00:13,429 --> 01:00:18,619
actually have these 3d objects then the

1259
01:00:16,010 --> 01:00:21,800
answer is for every ray that comes out

1260
01:00:18,619 --> 01:00:24,679
of the camera we must see which object

1261
01:00:21,800 --> 01:00:28,070
gets hit first for that ray for that

1262
01:00:24,679 --> 01:00:30,889
pixel right that's why you use Z

1263
01:00:28,070 --> 01:00:32,840
buffering and 3d rendering because let's

1264
01:00:30,889 --> 01:00:35,569
say for example that what these things

1265
01:00:32,840 --> 01:00:37,780
actually look like is something like

1266
01:00:35,570 --> 01:00:37,780
this

1267
01:00:38,099 --> 01:00:44,160
and now I ask you which one of these

1268
01:00:42,119 --> 01:00:47,099
should be drawn first well the answer is

1269
01:00:44,159 --> 01:00:49,048
which part if I'm looking at this part

1270
01:00:47,099 --> 01:00:51,359
of this object then this one should be

1271
01:00:49,048 --> 01:00:53,130
drawn first if I'm looking at this part

1272
01:00:51,358 --> 01:00:55,679
of this object then this one should be

1273
01:00:53,130 --> 01:00:58,140
drawn first right and that's because

1274
01:00:55,679 --> 01:01:02,248
their shape is complicated in 3d it's

1275
01:00:58,139 --> 01:01:04,889
not straightforward so once you start

1276
01:01:02,248 --> 01:01:07,108
approximating things by cards you know

1277
01:01:04,889 --> 01:01:09,719
you're into a case that's more like this

1278
01:01:07,108 --> 01:01:12,179
which is to say you know there probably

1279
01:01:09,719 --> 01:01:13,879
is a rule that would allow you to draw

1280
01:01:12,179 --> 01:01:16,139
one thing first and then the other thing

1281
01:01:13,880 --> 01:01:18,450
without having to do per pixel

1282
01:01:16,139 --> 01:01:21,679
comparison and the reason for that is

1283
01:01:18,449 --> 01:01:25,949
because you know that you don't have any

1284
01:01:21,679 --> 01:01:28,048
particularly weird like you know shapes

1285
01:01:25,949 --> 01:01:29,639
that can be represented so once you've

1286
01:01:28,048 --> 01:01:31,409
flatten them down two cards are actually

1287
01:01:29,639 --> 01:01:33,118
in better shape in some sense because

1288
01:01:31,409 --> 01:01:35,338
now you know you don't have any sort of

1289
01:01:33,119 --> 01:01:37,229
weirdness here but you still don't

1290
01:01:35,338 --> 01:01:39,298
really know how you should sort these

1291
01:01:37,228 --> 01:01:41,429
things because when you're actually

1292
01:01:39,298 --> 01:01:43,170
drawing the sprites they're sort of only

1293
01:01:41,429 --> 01:01:45,118
approximations to wear these things

1294
01:01:43,170 --> 01:01:48,568
actually were in 3d and what they looked

1295
01:01:45,119 --> 01:01:51,298
like right so at that point we have to

1296
01:01:48,568 --> 01:01:53,608
ask well ok let's say that we know that

1297
01:01:51,298 --> 01:01:55,528
we have you know these these sprites and

1298
01:01:53,608 --> 01:01:57,239
we're sort of talking about them as the

1299
01:01:55,528 --> 01:01:59,039
Y cards the Z cards and we have the full

1300
01:01:57,239 --> 01:02:00,900
bounds of them and then we look at these

1301
01:01:59,039 --> 01:02:03,539
two things and we know that we want to

1302
01:02:00,900 --> 01:02:05,700
do a sort of these of these objects

1303
01:02:03,539 --> 01:02:07,200
right well like I said before we can

1304
01:02:05,699 --> 01:02:09,389
trivially come up with rule and this is

1305
01:02:07,199 --> 01:02:13,348
what we did that does a correct 3d sort

1306
01:02:09,389 --> 01:02:16,768
for any two of these things but in order

1307
01:02:13,349 --> 01:02:18,869
to actually sort all of the objects in a

1308
01:02:16,768 --> 01:02:22,348
single total ordering that isn't a graph

1309
01:02:18,869 --> 01:02:24,298
but an actual linear total ordering then

1310
01:02:22,349 --> 01:02:28,499
we end up with the problem that we don't

1311
01:02:24,298 --> 01:02:31,739
know how each individual split here will

1312
01:02:28,498 --> 01:02:33,808
affect the total sort so let's suppose

1313
01:02:31,739 --> 01:02:37,079
for example that we have you know two

1314
01:02:33,809 --> 01:02:39,410
objects come out drug draw a casar that

1315
01:02:37,079 --> 01:02:39,410
would make sense

1316
01:02:47,820 --> 01:02:54,070
let's suppose we have two objects that

1317
01:02:50,349 --> 01:02:59,019
were on the same plane right or better

1318
01:02:54,070 --> 01:03:01,900
yet let's draw one slightly higher okay

1319
01:02:59,019 --> 01:03:05,550
and now we've got an object that's here

1320
01:03:01,900 --> 01:03:07,869
and we're looking at it from the camera

1321
01:03:05,550 --> 01:03:11,769
just want to illustrate you how

1322
01:03:07,869 --> 01:03:13,900
difficult this problem is right so I'm

1323
01:03:11,769 --> 01:03:15,909
looking at the screen and I'm saying

1324
01:03:13,900 --> 01:03:19,660
between these two which one should I

1325
01:03:15,909 --> 01:03:21,789
draw first right well okay the first

1326
01:03:19,659 --> 01:03:23,379
answer is it doesn't matter because if

1327
01:03:21,789 --> 01:03:27,849
the screen looks like this they don't

1328
01:03:23,380 --> 01:03:29,170
project onto the same area right so it

1329
01:03:27,849 --> 01:03:31,420
doesn't actually matter which one I draw

1330
01:03:29,170 --> 01:03:33,220
first but now you're telling me well I

1331
01:03:31,420 --> 01:03:34,059
need to do a full sort of all the

1332
01:03:33,219 --> 01:03:35,409
objects in the scene that's

1333
01:03:34,059 --> 01:03:37,929
topologically correct that they always

1334
01:03:35,409 --> 01:03:41,289
drawn the correct order well okay if

1335
01:03:37,929 --> 01:03:42,789
that's the case what I need to do is I

1336
01:03:41,289 --> 01:03:44,860
need to make a decision about these two

1337
01:03:42,789 --> 01:03:47,050
such that my decision about these two

1338
01:03:44,860 --> 01:03:49,809
and my decision about these two will

1339
01:03:47,050 --> 01:03:52,450
actually yield a correct sort order for

1340
01:03:49,809 --> 01:03:53,940
these two which may interfere with each

1341
01:03:52,449 --> 01:03:57,849
other and let's make sure that they do

1342
01:03:53,940 --> 01:04:01,150
just for fun right so I'm going to move

1343
01:03:57,849 --> 01:04:04,049
this one up a little bit right so let's

1344
01:04:01,150 --> 01:04:04,050
pretend that one was there

1345
01:04:07,769 --> 01:04:11,800
then I move this one down a bit so they

1346
01:04:10,179 --> 01:04:12,669
project onto the same area in fact you

1347
01:04:11,800 --> 01:04:17,789
know what I'll make this one a little

1348
01:04:12,670 --> 01:04:17,789
longer as well

1349
01:04:26,289 --> 01:04:31,278
okay so now you can kind of see that

1350
01:04:29,268 --> 01:04:34,038
these would project on to the same place

1351
01:04:31,278 --> 01:04:35,568
right they overlap so it's incredibly

1352
01:04:34,039 --> 01:04:37,880
important that i know that this one come

1353
01:04:35,568 --> 01:04:40,038
first and this one comes second right so

1354
01:04:37,880 --> 01:04:42,680
if this is a and this is B and this is C

1355
01:04:40,039 --> 01:04:48,229
then I know that my order has to be that

1356
01:04:42,679 --> 01:04:49,759
a gets drawn first right B or C don't

1357
01:04:48,228 --> 01:04:52,338
really matter what order they get drawn

1358
01:04:49,759 --> 01:04:55,699
in now so it could be a B C or it could

1359
01:04:52,338 --> 01:04:59,210
be AC be but they both put a has to go

1360
01:04:55,699 --> 01:05:02,778
first right that makes sense so if I

1361
01:04:59,210 --> 01:05:04,338
look down here and I say okay I want to

1362
01:05:02,778 --> 01:05:06,259
make a comparison between these two guys

1363
01:05:04,338 --> 01:05:08,328
well I don't have any information to go

1364
01:05:06,259 --> 01:05:10,068
on but I could pick some rule about

1365
01:05:08,329 --> 01:05:13,999
which one I would would draw first

1366
01:05:10,068 --> 01:05:15,228
potentially right similarly if I look at

1367
01:05:13,998 --> 01:05:16,488
some of these other guys I could make

1368
01:05:15,228 --> 01:05:19,909
the same thing they don't actually

1369
01:05:16,489 --> 01:05:21,858
overlap right but I could make a

1370
01:05:19,909 --> 01:05:25,998
determined about Asian about which one

1371
01:05:21,858 --> 01:05:27,768
of these should go first like I could so

1372
01:05:25,998 --> 01:05:29,778
let's actually look at some of those

1373
01:05:27,768 --> 01:05:31,488
cases and see what happens so let's say

1374
01:05:29,778 --> 01:05:33,228
I take a look at a and C and I go well a

1375
01:05:31,489 --> 01:05:35,449
should certainly be drawn first and then

1376
01:05:33,228 --> 01:05:39,228
a second and then see second because you

1377
01:05:35,449 --> 01:05:40,669
know a is overlapping here right that

1378
01:05:39,228 --> 01:05:41,838
would always give me the correct results

1379
01:05:40,670 --> 01:05:44,479
and then when i start be later I know

1380
01:05:41,838 --> 01:05:46,788
that I'm okay but if I start to move a

1381
01:05:44,478 --> 01:05:50,509
to the side let's say I move a all the

1382
01:05:46,789 --> 01:05:52,910
way over so that now it's here well now

1383
01:05:50,509 --> 01:05:55,099
when I look at how these draw right I

1384
01:05:52,909 --> 01:05:57,199
could certainly create circumstances

1385
01:05:55,099 --> 01:05:58,489
depending on where the camera was right

1386
01:05:57,199 --> 01:06:00,439
I could tilt the camera little bit where

1387
01:05:58,489 --> 01:06:04,400
c is definitely the thing that's in

1388
01:06:00,440 --> 01:06:07,509
front right and so depending on whether

1389
01:06:04,400 --> 01:06:10,249
i want to sort a in front of c or not

1390
01:06:07,509 --> 01:06:12,199
depending on its motion here right i'm

1391
01:06:10,248 --> 01:06:15,528
going to end up with a circumstance

1392
01:06:12,199 --> 01:06:18,259
where I either going to see a see if the

1393
01:06:15,528 --> 01:06:20,329
head or CA at the head and book in in

1394
01:06:18,259 --> 01:06:22,039
different cases depending on how i draw

1395
01:06:20,329 --> 01:06:25,818
this it one or the other could be

1396
01:06:22,039 --> 01:06:28,549
correct now I come to be and I'm like

1397
01:06:25,818 --> 01:06:31,400
what am I going to do with be well if I

1398
01:06:28,548 --> 01:06:35,239
was you know looking at be relative to

1399
01:06:31,400 --> 01:06:37,729
see before i knew about a right so i

1400
01:06:35,239 --> 01:06:38,820
don't know i haven't looked at a yet i'm

1401
01:06:37,728 --> 01:06:41,309
just going to compare be

1402
01:06:38,820 --> 01:06:44,640
and see together I might say well okay

1403
01:06:41,309 --> 01:06:48,119
see clearly klum's in front of be right

1404
01:06:44,639 --> 01:06:49,799
I know that that's definitely true so in

1405
01:06:48,119 --> 01:06:51,719
this case right I know that I would go

1406
01:06:49,800 --> 01:06:56,160
like CB in this case or something like

1407
01:06:51,719 --> 01:06:57,839
that right or furthermore maybe I make

1408
01:06:56,159 --> 01:06:59,489
the opposite of determination I could

1409
01:06:57,840 --> 01:07:00,510
say you know be clearly comes in front

1410
01:06:59,489 --> 01:07:02,549
of see because maybe i'm looking more

1411
01:07:00,510 --> 01:07:04,340
like at it like this and so I see the

1412
01:07:02,550 --> 01:07:07,740
sea at the be in the front and the sea

1413
01:07:04,340 --> 01:07:09,600
separately right so if you do these

1414
01:07:07,739 --> 01:07:11,399
determinations where I'm just sort of

1415
01:07:09,599 --> 01:07:13,860
looking at them in individual pairings

1416
01:07:11,400 --> 01:07:15,990
then what happens is depending on how

1417
01:07:13,860 --> 01:07:17,750
you picked those pairings even though it

1418
01:07:15,989 --> 01:07:20,519
might have been correct for the two as

1419
01:07:17,750 --> 01:07:22,619
that you that you looked at when you

1420
01:07:20,519 --> 01:07:24,780
then go to insert the third one in

1421
01:07:22,619 --> 01:07:27,659
depending on who you were comparing

1422
01:07:24,780 --> 01:07:29,820
against right you may insert it into the

1423
01:07:27,659 --> 01:07:32,250
wrong place for somebody else it may be

1424
01:07:29,820 --> 01:07:34,769
the case that AC is a totally fine order

1425
01:07:32,250 --> 01:07:37,409
for where you were looking at right but

1426
01:07:34,769 --> 01:07:39,119
be actually needed to be in front of a

1427
01:07:37,409 --> 01:07:40,469
so the correct place to put it would

1428
01:07:39,119 --> 01:07:42,089
have been here but you never would have

1429
01:07:40,469 --> 01:07:45,059
known that because you never looked at a

1430
01:07:42,090 --> 01:07:46,230
and B together because that just net

1431
01:07:45,059 --> 01:07:49,739
wasn't what you came up with in this

1432
01:07:46,230 --> 01:07:51,599
order right so what you end up doing

1433
01:07:49,739 --> 01:07:54,059
when you're in a situation like this is

1434
01:07:51,599 --> 01:07:55,349
you really have no choice if you're

1435
01:07:54,059 --> 01:07:57,659
trying to produce a single total

1436
01:07:55,349 --> 01:07:59,730
ordering you really have no choice but

1437
01:07:57,659 --> 01:08:01,679
to actually do basically what amounts to

1438
01:07:59,730 --> 01:08:04,260
spatial partitions you would have to

1439
01:08:01,679 --> 01:08:07,469
essentially build a BSP tree of the

1440
01:08:04,260 --> 01:08:09,540
scene I believe because anytime anything

1441
01:08:07,469 --> 01:08:11,759
straddle one of these separating plane

1442
01:08:09,539 --> 01:08:15,000
lines I have to split it into two pieces

1443
01:08:11,760 --> 01:08:18,180
at least in order to be make sure that I

1444
01:08:15,000 --> 01:08:21,029
always considered it against everything

1445
01:08:18,180 --> 01:08:22,440
else on the side of this guy so the only

1446
01:08:21,029 --> 01:08:23,579
things that I could really know that I

1447
01:08:22,439 --> 01:08:26,539
don't have to consider are ones that

1448
01:08:23,579 --> 01:08:28,529
don't break the plane of one of the

1449
01:08:26,539 --> 01:08:30,510
existing sorts that I've already done

1450
01:08:28,529 --> 01:08:32,880
and that's a complete like binary space

1451
01:08:30,510 --> 01:08:34,350
partition of the thing I don't think

1452
01:08:32,880 --> 01:08:35,460
there's I mean I could be wrong but I

1453
01:08:34,350 --> 01:08:37,079
don't think there's any other way to

1454
01:08:35,460 --> 01:08:39,359
actually do those sorts and guarantee

1455
01:08:37,079 --> 01:08:42,000
that they'll come out correctly so

1456
01:08:39,359 --> 01:08:44,039
because of that there really is no such

1457
01:08:42,000 --> 01:08:45,960
thing I don't think as a complete 3d

1458
01:08:44,039 --> 01:08:48,060
sort unless you go into a full spatial

1459
01:08:45,960 --> 01:08:50,338
partition so what you're talking about

1460
01:08:48,060 --> 01:08:52,000
instead is a partial sort where you only

1461
01:08:50,338 --> 01:08:55,000
sort the guys who care about

1462
01:08:52,000 --> 01:08:57,609
and prevent yourself from having to do

1463
01:08:55,000 --> 01:08:59,199
all of these separate splits to to sort

1464
01:08:57,609 --> 01:09:01,600
of deal with people who are sorting

1465
01:08:59,199 --> 01:09:04,420
otherwise so that's why you never

1466
01:09:01,600 --> 01:09:06,279
actually do this in reality right this

1467
01:09:04,420 --> 01:09:08,140
is why you always do as a busy before in

1468
01:09:06,279 --> 01:09:09,850
real 3d you would never try to sort the

1469
01:09:08,140 --> 01:09:11,890
3d objects in the scene it's like a

1470
01:09:09,850 --> 01:09:13,838
fool's errand right because you can't

1471
01:09:11,890 --> 01:09:15,640
actually do it for any sort of

1472
01:09:13,838 --> 01:09:16,659
complicated objects and even if you have

1473
01:09:15,640 --> 01:09:18,490
out it's that you know you could sort

1474
01:09:16,659 --> 01:09:23,139
you then have to worry about well how do

1475
01:09:18,489 --> 01:09:25,149
I figure out right which one's of these

1476
01:09:23,140 --> 01:09:28,088
go in front of which other ones without

1477
01:09:25,149 --> 01:09:29,979
actually splitting everyone every time I

1478
01:09:28,088 --> 01:09:32,680
kind of go down to which ones are on you

1479
01:09:29,979 --> 01:09:41,979
know on which side of which plane right

1480
01:09:32,680 --> 01:09:43,779
so we could try I don't know if this

1481
01:09:41,979 --> 01:09:46,059
would actually work we could try

1482
01:09:43,779 --> 01:09:48,549
splitting people are not swinging people

1483
01:09:46,060 --> 01:09:50,548
but we could try always sorting by which

1484
01:09:48,548 --> 01:09:54,220
side of the plane you know whoever

1485
01:09:50,548 --> 01:09:56,439
whichever side of one of these guys you

1486
01:09:54,220 --> 01:09:57,550
were from the camera we could try is

1487
01:09:56,439 --> 01:10:00,489
doing a sort like that which I mentioned

1488
01:09:57,550 --> 01:10:06,190
before which is to say you know for any

1489
01:10:00,489 --> 01:10:07,750
given plane you know am I am I in front

1490
01:10:06,189 --> 01:10:09,849
of the camera behind the camera relative

1491
01:10:07,750 --> 01:10:12,039
to that plane the problem with that like

1492
01:10:09,850 --> 01:10:13,630
I was saying before is that it doesn't

1493
01:10:12,039 --> 01:10:16,239
really produce correct results in the

1494
01:10:13,630 --> 01:10:20,079
case where two things overlap right if I

1495
01:10:16,239 --> 01:10:22,479
have two things that look like this you

1496
01:10:20,079 --> 01:10:27,539
know versus two things that look like

1497
01:10:22,479 --> 01:10:30,399
this right it's pretty hard to know

1498
01:10:27,539 --> 01:10:33,970
without actually looking at the bounds

1499
01:10:30,399 --> 01:10:35,529
really explicitly which ones are in

1500
01:10:33,970 --> 01:10:37,180
front of which which other ones too

1501
01:10:35,529 --> 01:10:39,069
right so I need to kind of know like

1502
01:10:37,180 --> 01:10:42,810
exactly where the planes stop and all

1503
01:10:39,069 --> 01:10:46,059
other sorts of information like this and

1504
01:10:42,810 --> 01:10:48,250
again I don't know you know we can we

1505
01:10:46,060 --> 01:10:49,600
can try to do more complicated things

1506
01:10:48,250 --> 01:10:50,920
that will hopefully produce a total

1507
01:10:49,600 --> 01:10:52,630
ordering and we'd have to worry again

1508
01:10:50,920 --> 01:10:57,190
about those splits where we have things

1509
01:10:52,630 --> 01:10:58,539
that are on either side I just I mean I

1510
01:10:57,189 --> 01:11:00,519
just don't know that we can get any

1511
01:10:58,539 --> 01:11:03,699
further than where we got because a very

1512
01:11:00,520 --> 01:11:05,710
common case for us would be a Z sprite

1513
01:11:03,699 --> 01:11:07,029
with a why sprite standing on it

1514
01:11:05,710 --> 01:11:11,260
right that's the standard case of a

1515
01:11:07,029 --> 01:11:13,269
ground tile and like a like a monster or

1516
01:11:11,260 --> 01:11:15,880
something right that's what we're going

1517
01:11:13,270 --> 01:11:19,090
to have and in that case you have a

1518
01:11:15,880 --> 01:11:21,400
situation where these planes split each

1519
01:11:19,090 --> 01:11:24,400
other in two halves potentially right

1520
01:11:21,399 --> 01:11:26,229
half of this guy is on this side of the

1521
01:11:24,399 --> 01:11:28,299
monster and half of this guy's on the

1522
01:11:26,229 --> 01:11:30,339
other side of the monster right so while

1523
01:11:28,300 --> 01:11:32,260
we can definitively perhaps write a sort

1524
01:11:30,340 --> 01:11:34,869
rule that always puts the monster on

1525
01:11:32,260 --> 01:11:37,659
this side of the plane what we don't

1526
01:11:34,869 --> 01:11:41,109
know is what actually happens to which

1527
01:11:37,659 --> 01:11:43,899
piece here and like I said it kind of

1528
01:11:41,109 --> 01:11:46,750
matters in that sense because if we then

1529
01:11:43,899 --> 01:11:49,059
have another sprite and we're comparing

1530
01:11:46,750 --> 01:11:50,469
it to this it's critically important or

1531
01:11:49,060 --> 01:11:52,750
I guess maybe we'll put it up here it's

1532
01:11:50,469 --> 01:11:54,550
critically important that this sprite be

1533
01:11:52,750 --> 01:11:59,469
compared to this right and found to be

1534
01:11:54,550 --> 01:12:01,659
in front of but if we were in some

1535
01:11:59,469 --> 01:12:04,420
scenario where we only were comparing it

1536
01:12:01,659 --> 01:12:06,099
to this one and we never got there that

1537
01:12:04,420 --> 01:12:07,930
would be that would be a problem right

1538
01:12:06,100 --> 01:12:09,940
and so let me give you a scenario where

1539
01:12:07,930 --> 01:12:13,450
I think that would happen in a very sort

1540
01:12:09,939 --> 01:12:15,789
of clear case so here's an upright

1541
01:12:13,449 --> 01:12:18,760
sprite and here's another upright sprite

1542
01:12:15,789 --> 01:12:23,260
and here are some grounds so two

1543
01:12:18,760 --> 01:12:25,090
monsters and two grounds ok so it's

1544
01:12:23,260 --> 01:12:29,010
critically important that this be sorted

1545
01:12:25,090 --> 01:12:31,680
in front of this if the cameras here but

1546
01:12:29,010 --> 01:12:34,680
and you know what let me make it even

1547
01:12:31,680 --> 01:12:34,680
clearer

1548
01:12:37,680 --> 01:12:44,820
right but it's also very clear that this

1549
01:12:40,890 --> 01:12:47,039
is below this so if this guy got sorted

1550
01:12:44,819 --> 01:12:52,289
on this side of him we know that this

1551
01:12:47,039 --> 01:12:55,739
guy is in front of this guy right but

1552
01:12:52,289 --> 01:12:56,939
this guy is in front of this guy I mean

1553
01:12:55,739 --> 01:12:58,859
that's just that's just how that

1554
01:12:56,939 --> 01:13:01,409
actually is working for all intents and

1555
01:12:58,859 --> 01:13:03,359
purposes right he's he's if he was

1556
01:13:01,409 --> 01:13:07,079
extended upward he would be in front of

1557
01:13:03,359 --> 01:13:09,929
this guy right so really what we would

1558
01:13:07,079 --> 01:13:11,340
need to do in order to know for sure how

1559
01:13:09,930 --> 01:13:13,920
these sort orders were supposed to go

1560
01:13:11,340 --> 01:13:16,020
again is you kind of have to sort of

1561
01:13:13,920 --> 01:13:20,460
think about them in terms of how they

1562
01:13:16,020 --> 01:13:22,020
might get bifurcated right so looking at

1563
01:13:20,460 --> 01:13:23,600
it this way I'm trying to think of what

1564
01:13:22,020 --> 01:13:27,030
the best way to illustrate this case is

1565
01:13:23,600 --> 01:13:29,690
once you split somebody by you know once

1566
01:13:27,029 --> 01:13:33,359
you have somebody who extends above

1567
01:13:29,689 --> 01:13:35,460
where another person sort was it's not

1568
01:13:33,359 --> 01:13:37,559
possible to insert this person into the

1569
01:13:35,460 --> 01:13:40,140
list in a correct place because this

1570
01:13:37,560 --> 01:13:42,810
part of him is above this but this part

1571
01:13:40,140 --> 01:13:44,789
of him is below this right and that

1572
01:13:42,810 --> 01:13:46,800
makes a difference not only for how he

1573
01:13:44,789 --> 01:13:48,300
would draw relative to this but how he

1574
01:13:46,800 --> 01:13:52,710
would draw for everyone who's been

1575
01:13:48,300 --> 01:13:54,180
sorted relative to this guy already and

1576
01:13:52,710 --> 01:13:57,480
I feel like there's really just no

1577
01:13:54,180 --> 01:14:00,140
getting around that problem No No maybe

1578
01:13:57,479 --> 01:14:00,139
that makes some sense

1579
01:14:23,359 --> 01:14:27,920
and so far our sorry this is already

1580
01:14:25,100 --> 01:14:31,639
answered but what was the issue with a Z

1581
01:14:27,920 --> 01:14:33,319
is not equal to B Z a Z minus B Z else a

1582
01:14:31,639 --> 01:14:35,420
y minus B well style total ring so

1583
01:14:33,319 --> 01:14:40,399
you're talking about basically sort by Z

1584
01:14:35,420 --> 01:14:42,980
first and then by why I think is what

1585
01:14:40,399 --> 01:14:46,609
you're saying and the problem of that

1586
01:14:42,979 --> 01:14:51,109
with that is that you have so let's say

1587
01:14:46,609 --> 01:14:54,920
I've got to two tiles here let me see if

1588
01:14:51,109 --> 01:15:05,149
I can do it sometimes it's kind of hard

1589
01:14:54,920 --> 01:15:10,520
to draw these things so here is a Z tile

1590
01:15:05,149 --> 01:15:13,789
right and then I've got a you know

1591
01:15:10,520 --> 01:15:16,989
somebody standing in front of it or

1592
01:15:13,789 --> 01:15:21,139
whatever right and you know what I guess

1593
01:15:16,988 --> 01:15:23,349
probably a better example for that would

1594
01:15:21,139 --> 01:15:23,350
be

1595
01:15:34,420 --> 01:15:38,340
see if I can construct this case again

1596
01:15:42,029 --> 01:15:47,488
kind of need a 3d program should

1597
01:15:44,859 --> 01:15:47,488
probably have one

1598
01:15:57,748 --> 01:16:06,408
alright so I believe that this was the

1599
01:16:03,359 --> 01:16:13,829
problem that we were having with that

1600
01:16:06,408 --> 01:16:15,568
with that situation right so first of

1601
01:16:13,828 --> 01:16:20,568
all we kind of have this problem where

1602
01:16:15,569 --> 01:16:20,569
let's suppose that these guys are

1603
01:16:32,319 --> 01:16:36,250
I've done this so many times now I

1604
01:16:34,090 --> 01:16:37,719
forget like what all the cases are and

1605
01:16:36,250 --> 01:16:39,250
we probably should have a little thing

1606
01:16:37,719 --> 01:16:41,560
that we like keep open which is like

1607
01:16:39,250 --> 01:16:43,448
here's you know all the different

1608
01:16:41,560 --> 01:16:48,880
problems that we have come across or

1609
01:16:43,448 --> 01:16:51,729
thought about so we need a couple

1610
01:16:48,880 --> 01:16:54,368
different things to happen first of all

1611
01:16:51,729 --> 01:16:57,488
we have the notion that you know there's

1612
01:16:54,368 --> 01:16:59,679
going to be Y sprites stacked on top of

1613
01:16:57,488 --> 01:17:01,899
each other right so we have the notion

1614
01:16:59,679 --> 01:17:03,880
that things you know and I mean I guess

1615
01:17:01,899 --> 01:17:05,078
to draw it all in one scene here you

1616
01:17:03,880 --> 01:17:07,480
know there's going to be something like

1617
01:17:05,078 --> 01:17:10,599
this that's going to include something

1618
01:17:07,479 --> 01:17:12,819
like this right and the problem with

1619
01:17:10,599 --> 01:17:15,849
that is what are the z values of these

1620
01:17:12,819 --> 01:17:18,279
two guys right because if the answer is

1621
01:17:15,849 --> 01:17:19,750
I sort by Z first and then by Y then if

1622
01:17:18,279 --> 01:17:21,849
this guy is taller than this guy kill

1623
01:17:19,750 --> 01:17:24,939
always appear in front but that's not

1624
01:17:21,849 --> 01:17:26,800
correct right because this guy although

1625
01:17:24,939 --> 01:17:28,029
shorter is supposed to draw in front of

1626
01:17:26,800 --> 01:17:31,060
this guy if the camera is coming from

1627
01:17:28,029 --> 01:17:36,130
over here so you can't just sort by Z

1628
01:17:31,060 --> 01:17:37,659
value okay that's certainly not okay so

1629
01:17:36,130 --> 01:17:40,270
let me ask well maybe I could sort by

1630
01:17:37,658 --> 01:17:43,269
the base point Z value well alright but

1631
01:17:40,270 --> 01:17:45,340
if I sort by the base point Z value uh

1632
01:17:43,270 --> 01:17:47,800
then we kind of have the question of

1633
01:17:45,340 --> 01:17:49,539
well alright what does it mean to have a

1634
01:17:47,800 --> 01:17:51,070
base point Z value and what happens at

1635
01:17:49,539 --> 01:17:53,439
that base point Z body just slightly

1636
01:17:51,069 --> 01:17:56,519
below where it should be for something

1637
01:17:53,439 --> 01:18:00,759
else so for example let's say I have a

1638
01:17:56,520 --> 01:18:02,469
step that looks like this so this is

1639
01:18:00,760 --> 01:18:05,980
like kind of coming down here and then

1640
01:18:02,469 --> 01:18:09,219
I've got my guy here well now his top Z

1641
01:18:05,979 --> 01:18:11,049
value right is above this top Z value so

1642
01:18:09,219 --> 01:18:13,689
he should draw first and that's correct

1643
01:18:11,050 --> 01:18:15,039
but now let's suppose I have the exact

1644
01:18:13,689 --> 01:18:17,769
opposite case where he's on the other

1645
01:18:15,039 --> 01:18:19,569
side now his top C value is the same as

1646
01:18:17,770 --> 01:18:20,800
it was before and he'll draw in front of

1647
01:18:19,569 --> 01:18:24,880
this but he clearly should be drawn

1648
01:18:20,800 --> 01:18:26,829
behind it right so you can't just

1649
01:18:24,880 --> 01:18:28,359
compare one or the other because

1650
01:18:26,828 --> 01:18:30,340
whichever one you pick is going to be

1651
01:18:28,359 --> 01:18:32,769
wrong sometimes in this case the y

1652
01:18:30,340 --> 01:18:34,960
ordering would have told us but you know

1653
01:18:32,770 --> 01:18:36,340
in the other cases the other case the Y

1654
01:18:34,960 --> 01:18:39,219
ordering would have been wrong so you

1655
01:18:36,340 --> 01:18:41,289
have to have a rule that takes both into

1656
01:18:39,219 --> 01:18:42,849
account you can't just go let's sort by

1657
01:18:41,289 --> 01:18:44,880
one and then the other does that make

1658
01:18:42,849 --> 01:18:44,880
sense

1659
01:19:01,659 --> 01:19:06,550
and so for us with the wide and z sort

1660
01:19:04,479 --> 01:19:08,679
work if z is quantized to room layers

1661
01:19:06,550 --> 01:19:10,900
and sprites are split where they cross

1662
01:19:08,680 --> 01:19:13,960
layers and maybe the ground a special

1663
01:19:10,899 --> 01:19:17,969
case no I think even just even just a

1664
01:19:13,960 --> 01:19:17,970
single set of tiles doesn't work

1665
01:19:27,649 --> 01:19:31,799
so I don't know and yes like I said I'm

1666
01:19:30,239 --> 01:19:33,329
not think about over the weekend my

1667
01:19:31,800 --> 01:19:35,279
answer might be we just want to use the

1668
01:19:33,329 --> 01:19:36,809
z-buffer because since we know the

1669
01:19:35,279 --> 01:19:38,399
z-buffer is fast it may be that

1670
01:19:36,810 --> 01:19:40,500
topological sorting is just going to

1671
01:19:38,399 --> 01:19:42,119
take too much time and I don't just mean

1672
01:19:40,500 --> 01:19:44,460
stream coding time but I mean like

1673
01:19:42,119 --> 01:19:48,599
actual CPU time that we don't want to

1674
01:19:44,460 --> 01:19:50,130
spend and so we could decide to draw

1675
01:19:48,600 --> 01:19:51,810
them as cards where we actually place

1676
01:19:50,130 --> 01:19:53,010
the cards in 3d and then we let the Z

1677
01:19:51,810 --> 01:19:54,390
before actually do the per pixel

1678
01:19:53,010 --> 01:19:57,150
determination if who's in front of who

1679
01:19:54,390 --> 01:19:59,910
again not a great solution for certain

1680
01:19:57,149 --> 01:20:03,239
cases because of you know a number of

1681
01:19:59,909 --> 01:20:10,680
other issues but it might be the right

1682
01:20:03,239 --> 01:20:12,979
thing to do so all right I'm going to

1683
01:20:10,680 --> 01:20:12,980
wind it down

1684
01:20:19,819 --> 01:20:23,689
okay thank you everyone for joining me

1685
01:20:22,488 --> 01:20:24,799
for the nurse of a handmade here it's

1686
01:20:23,689 --> 01:20:26,868
been a pleasure coating with you as

1687
01:20:24,800 --> 01:20:28,039
always if you would like to follow along

1688
01:20:26,868 --> 01:20:29,658
at home you can always pre-order the

1689
01:20:28,039 --> 01:20:31,880
game on handmade hero or if it comes to

1690
01:20:29,658 --> 01:20:33,319
the source code which you can play

1691
01:20:31,880 --> 01:20:34,368
around with at home we also have a forum

1692
01:20:33,319 --> 01:20:35,719
site you can go to ask questions a

1693
01:20:34,368 --> 01:20:38,420
patreon page you can you support the

1694
01:20:35,719 --> 01:20:39,198
video series we have a a wonderful

1695
01:20:38,420 --> 01:20:41,389
little schedule about eight weeks

1696
01:20:39,198 --> 01:20:42,500
schedule at you and we have an episode

1697
01:20:41,389 --> 01:20:45,679
guide if you want to catch up on old

1698
01:20:42,500 --> 01:20:47,510
episodes that's about it for today I

1699
01:20:45,679 --> 01:20:48,679
suspect we'll be back next week but

1700
01:20:47,510 --> 01:20:51,289
check the schedule bot for more

1701
01:20:48,679 --> 01:20:54,050
information on that for whether the next

1702
01:20:51,289 --> 01:20:56,630
will be scheduled until then have a good

1703
01:20:54,050 --> 01:20:59,829
coding weekend and I'll see you guys on

1704
01:20:56,630 --> 01:20:59,828
the Internet take these everyone

