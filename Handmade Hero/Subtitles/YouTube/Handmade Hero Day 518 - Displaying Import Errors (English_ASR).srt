1
00:00:00,030 --> 00:00:03,418
hello everyone and welcome to handmade

2
00:00:02,399 --> 00:00:09,570
hair I sure we could a complete-game

3
00:00:03,419 --> 00:00:13,169
live on stream we would like to we would

4
00:00:09,570 --> 00:00:16,769
like to further debug and test our work

5
00:00:13,169 --> 00:00:19,079
from yesterday today and that's gonna be

6
00:00:16,769 --> 00:00:20,879
good because as we get everything that

7
00:00:19,079 --> 00:00:24,839
we worked on for the past couple

8
00:00:20,879 --> 00:00:26,939
weekends up and running for real it will

9
00:00:24,839 --> 00:00:28,829
mean that we can work with our art

10
00:00:26,939 --> 00:00:30,149
assets now in a lot of ways that we

11
00:00:28,829 --> 00:00:32,129
couldn't really work with them before

12
00:00:30,149 --> 00:00:34,259
like it will open up the ability for us

13
00:00:32,130 --> 00:00:37,050
to put a lot more art into the game than

14
00:00:34,259 --> 00:00:41,099
we've been able to in the past and

15
00:00:37,049 --> 00:00:45,659
that's really fun because it allows us

16
00:00:41,100 --> 00:00:48,390
to you know just dress up the world in a

17
00:00:45,659 --> 00:00:49,828
lot of ways that makes it feel nicer I

18
00:00:48,390 --> 00:00:51,600
mean at the end of the day the thing

19
00:00:49,829 --> 00:00:53,039
that makes a video game a video game and

20
00:00:51,600 --> 00:00:56,308
not a board game is that you've got all

21
00:00:53,039 --> 00:00:58,679
this audio-visual stuff that you know

22
00:00:56,308 --> 00:01:03,269
reacts to you and is instantaneous and

23
00:00:58,679 --> 00:01:06,688
stuff and and feels you know very

24
00:01:03,270 --> 00:01:08,969
immersive and so you know the art and

25
00:01:06,688 --> 00:01:11,489
the sound and the music and all of those

26
00:01:08,969 --> 00:01:13,379
things coming together is is not just

27
00:01:11,489 --> 00:01:15,599
set dressing you know people like to

28
00:01:13,379 --> 00:01:17,819
harp on gameplay and say that gameplay

29
00:01:15,599 --> 00:01:21,030
is always the thing you really have to

30
00:01:17,819 --> 00:01:23,129
care about and you know it's not it's

31
00:01:21,030 --> 00:01:24,570
not wrong meaning you know gameplay is

32
00:01:23,129 --> 00:01:26,849
very important because that's what gives

33
00:01:24,569 --> 00:01:28,469
the game its longevity it's what it

34
00:01:26,849 --> 00:01:32,179
allows a game to really be more than

35
00:01:28,469 --> 00:01:36,150
just something you do for 10 minutes but

36
00:01:32,180 --> 00:01:39,180
without that solid presentation and feel

37
00:01:36,150 --> 00:01:41,100
a game really isn't you know it's it's

38
00:01:39,180 --> 00:01:42,540
nothing really right because that's why

39
00:01:41,099 --> 00:01:45,688
you're playing a video game instead of

40
00:01:42,540 --> 00:01:48,210
something else if you want that

41
00:01:45,688 --> 00:01:49,919
continuous audiovisual feedback that's

42
00:01:48,209 --> 00:01:55,798
part of the immersion part of the game

43
00:01:49,920 --> 00:01:58,740
and so it's always really rewarding well

44
00:01:55,799 --> 00:02:01,020
when you get to spend time integrating

45
00:01:58,739 --> 00:02:04,169
assets that you have into the game

46
00:02:01,019 --> 00:02:06,509
because it's what makes it start turning

47
00:02:04,170 --> 00:02:10,560
into a real immersive experience as

48
00:02:06,509 --> 00:02:12,090
opposed to just like a tech demo or a

49
00:02:10,560 --> 00:02:13,509
prototype you know that just kind of

50
00:02:12,090 --> 00:02:17,590
feels sparse

51
00:02:13,509 --> 00:02:19,030
and bare bones so you know it's usually

52
00:02:17,590 --> 00:02:20,319
a pretty rewarding thing to do so I

53
00:02:19,030 --> 00:02:24,430
think we'll have a lot of fun doing it

54
00:02:20,318 --> 00:02:25,958
and and yeah I instead of just just

55
00:02:24,430 --> 00:02:28,719
talking about it let's let's get started

56
00:02:25,959 --> 00:02:32,680
here so I'm gonna open up handmade Hiro

57
00:02:28,719 --> 00:02:35,620
on the pre stream I think it was was it

58
00:02:32,680 --> 00:02:38,110
who was it said Oh frosty ninja frosty

59
00:02:35,620 --> 00:02:41,500
ninja boy brought up the fact that we

60
00:02:38,110 --> 00:02:45,700
didn't quite finish typing the stuff we

61
00:02:41,500 --> 00:02:47,049
should have typed in yesterday and you

62
00:02:45,699 --> 00:02:48,789
know that makes sense we ended the

63
00:02:47,049 --> 00:02:51,459
stream kind of right in the middle when

64
00:02:48,789 --> 00:02:54,759
we had literally just finished up and we

65
00:02:51,459 --> 00:02:56,920
hadn't really gotten a chance to to

66
00:02:54,759 --> 00:02:59,709
validate anything other than just going

67
00:02:56,919 --> 00:03:02,108
up it sort of seems to work what we need

68
00:02:59,709 --> 00:03:05,799
to do he pointed out is I added this

69
00:03:02,109 --> 00:03:09,159
this this flag consumed semicolon to

70
00:03:05,799 --> 00:03:12,159
make sure that the the system would know

71
00:03:09,159 --> 00:03:17,139
not to try to eat a semicolon a second

72
00:03:12,159 --> 00:03:20,310
time right but we never actually said it

73
00:03:17,139 --> 00:03:23,138
so here where we do consume semicolon

74
00:03:20,310 --> 00:03:25,030
when we actually eat that semicolon we

75
00:03:23,139 --> 00:03:28,840
want it to say that we did consume the

76
00:03:25,030 --> 00:03:31,840
semicolon right so here's an idea

77
00:03:28,840 --> 00:03:34,870
another a different idea to we could do

78
00:03:31,840 --> 00:03:36,250
instead of setting consume semicolon one

79
00:03:34,870 --> 00:03:38,590
thing I was thinking is we could make a

80
00:03:36,250 --> 00:03:41,169
thing called semicolon which is a you

81
00:03:38,590 --> 00:03:43,030
know something like this and what I

82
00:03:41,169 --> 00:03:44,769
could do is make it so that instead of

83
00:03:43,030 --> 00:03:47,340
setting consume semicolon you just

84
00:03:44,769 --> 00:03:51,819
consume the semicolon into the semicolon

85
00:03:47,340 --> 00:03:54,340
token right like so and then here

86
00:03:51,818 --> 00:03:59,229
instead of checking that and using a new

87
00:03:54,340 --> 00:04:02,980
one it could say just look I you know if

88
00:03:59,229 --> 00:04:05,798
you haven't gotten a semicolon token

89
00:04:02,979 --> 00:04:07,149
right so if this hasn't actually

90
00:04:05,799 --> 00:04:10,810
happened I don't know if we've got one

91
00:04:07,150 --> 00:04:13,000
for tokens yet but I can certainly make

92
00:04:10,810 --> 00:04:16,358
one in the tokenizer so you could see

93
00:04:13,000 --> 00:04:18,608
here like right when we've got these

94
00:04:16,358 --> 00:04:21,728
different functions I might just add one

95
00:04:18,608 --> 00:04:24,019
for you know much like token equals I'll

96
00:04:21,728 --> 00:04:26,279
do it like is valid

97
00:04:24,019 --> 00:04:29,789
and that's just something that will say

98
00:04:26,279 --> 00:04:36,299
hey does this token actually have any

99
00:04:29,790 --> 00:04:38,730
text in it you know something like this

100
00:04:36,300 --> 00:04:42,480
I assume we've got one for buffers I

101
00:04:38,730 --> 00:04:45,750
don't know if we do or not Wow we don't

102
00:04:42,480 --> 00:04:50,580
even have one for buffers what what the

103
00:04:45,750 --> 00:04:51,870
hey what the hey how's that possible so

104
00:04:50,579 --> 00:04:53,399
basically just something that will check

105
00:04:51,870 --> 00:04:54,720
that I'll probably add this for

106
00:04:53,399 --> 00:04:59,729
references I would like this for buffers

107
00:04:54,720 --> 00:05:01,410
as well that way we don't have to have a

108
00:04:59,730 --> 00:05:03,750
separate boolean that's maybe a little

109
00:05:01,410 --> 00:05:05,580
bit easy to mess up like I did where we

110
00:05:03,750 --> 00:05:06,540
just don't set it or something if we

111
00:05:05,579 --> 00:05:07,829
just remember look if you're gonna

112
00:05:06,540 --> 00:05:09,420
consume this cynical and put it into

113
00:05:07,829 --> 00:05:10,620
semicolon and that way you know it'll

114
00:05:09,420 --> 00:05:15,360
automatically trigger on the way out

115
00:05:10,620 --> 00:05:16,740
that would be pretty good so that was

116
00:05:15,360 --> 00:05:21,330
one thing the other thing that was

117
00:05:16,740 --> 00:05:24,990
mentioned is checking the HTTP out hht

118
00:05:21,329 --> 00:05:31,800
out multiple times I don't actually

119
00:05:24,990 --> 00:05:34,259
remember where that where they were

120
00:05:31,800 --> 00:05:45,030
suggesting that is because we have more

121
00:05:34,259 --> 00:05:58,769
than one I guess I don't know where that

122
00:05:45,029 --> 00:06:01,199
is exactly I'm not seeing that oh here's

123
00:05:58,769 --> 00:06:03,810
one okay so it's the second time we loop

124
00:06:01,199 --> 00:06:06,120
through so on here this is just checking

125
00:06:03,810 --> 00:06:08,040
this again for no reason that's not

126
00:06:06,120 --> 00:06:12,540
really a bug it's just stupid right

127
00:06:08,040 --> 00:06:14,280
because if we if this was true by the

128
00:06:12,540 --> 00:06:15,720
time we get here it can't have become

129
00:06:14,279 --> 00:06:17,969
false because we literally don't do

130
00:06:15,720 --> 00:06:21,960
anything that has anything to do with

131
00:06:17,970 --> 00:06:23,160
hht out being set or unset right so if

132
00:06:21,959 --> 00:06:26,129
it's set there it's gonna be set here

133
00:06:23,160 --> 00:06:28,470
because it's set to its it's valid or

134
00:06:26,129 --> 00:06:30,750
not for a whole pass through the code it

135
00:06:28,470 --> 00:06:34,830
doesn't oscillate right so we don't need

136
00:06:30,750 --> 00:06:37,470
to check it per time obviously so I

137
00:06:34,829 --> 00:06:40,859
think that's the only two things there

138
00:06:37,470 --> 00:06:42,600
so we kind of need to make sure as well

139
00:06:40,860 --> 00:06:44,939
that the loading of these alignment

140
00:06:42,600 --> 00:06:46,950
points actually works I don't think

141
00:06:44,939 --> 00:06:49,500
we've checked that at all because we

142
00:06:46,949 --> 00:06:52,379
don't actually have to do any rebuilds

143
00:06:49,500 --> 00:06:55,850
here like imports you know what I mean

144
00:06:52,379 --> 00:06:59,189
so loading something in from the drive

145
00:06:55,850 --> 00:07:04,080
and wiping out what we currently have

146
00:06:59,189 --> 00:07:06,600
set we don't really have any way to do

147
00:07:04,079 --> 00:07:09,029
that currently so we should have that

148
00:07:06,600 --> 00:07:11,670
and test that as well as delete our

149
00:07:09,029 --> 00:07:15,599
files entirely and rebuild the H HDS and

150
00:07:11,670 --> 00:07:17,250
make sure that that also produces NH HT

151
00:07:15,600 --> 00:07:18,780
with all the right alignment points set

152
00:07:17,250 --> 00:07:21,120
so we kind of want to do both those

153
00:07:18,779 --> 00:07:23,099
things I think I'll start with the

154
00:07:21,120 --> 00:07:25,670
in-game editor part where we don't

155
00:07:23,100 --> 00:07:29,100
really have at the moment anyway to do

156
00:07:25,670 --> 00:07:32,970
that called reload so let's take a look

157
00:07:29,100 --> 00:07:36,000
at that in here we've got two buttons

158
00:07:32,970 --> 00:07:39,270
there's an import button that does

159
00:07:36,000 --> 00:07:42,120
synchronize asset file changes and we've

160
00:07:39,269 --> 00:07:44,099
got a important Save button that does

161
00:07:42,120 --> 00:07:46,439
synchronize asset changes as well it

162
00:07:44,100 --> 00:07:49,590
just does it through this call which is

163
00:07:46,439 --> 00:07:52,800
something separate meaning it first does

164
00:07:49,589 --> 00:07:55,429
a look at our undo list and stuff so

165
00:07:52,800 --> 00:07:55,430
those two things

166
00:08:03,250 --> 00:08:14,420
looking at these here the names are a

167
00:08:06,589 --> 00:08:18,469
little bit hard to describe I think we

168
00:08:14,420 --> 00:08:26,060
want like something like import hht

169
00:08:18,470 --> 00:08:38,720
changes and save to hhd something like

170
00:08:26,060 --> 00:08:42,019
that I don't really know how to describe

171
00:08:38,720 --> 00:08:44,870
it particularly well but it's something

172
00:08:42,019 --> 00:08:48,470
like that and in here you know when we

173
00:08:44,870 --> 00:08:51,110
test this this this is not supposed to

174
00:08:48,470 --> 00:08:53,960
be on is dirty anymore because pretty

175
00:08:51,110 --> 00:08:59,029
much you always want to do it when we do

176
00:08:53,960 --> 00:09:01,190
save H HTS again we we really want these

177
00:08:59,029 --> 00:09:02,899
available at all times because we don't

178
00:09:01,190 --> 00:09:04,550
actually we'll never really know like

179
00:09:02,899 --> 00:09:08,559
before we did it there was an is dirty

180
00:09:04,549 --> 00:09:11,809
thing revert makes sense because that

181
00:09:08,559 --> 00:09:14,000
doesn't actually touch the HTS at all so

182
00:09:11,809 --> 00:09:16,669
if we haven't made any changes revert

183
00:09:14,000 --> 00:09:19,490
doesn't need to be active but reload and

184
00:09:16,669 --> 00:09:21,740
save H HTS are things that we might want

185
00:09:19,490 --> 00:09:26,419
to do at any time because they happen to

186
00:09:21,740 --> 00:09:30,409
be things that if the h HT changed on

187
00:09:26,419 --> 00:09:32,209
disk we may want to use or you know

188
00:09:30,409 --> 00:09:34,789
merge like so we kind of want that

189
00:09:32,210 --> 00:09:37,879
ability to be available at all times and

190
00:09:34,789 --> 00:09:40,279
again it's a little squeaky and we may

191
00:09:37,879 --> 00:09:42,529
like sort of decide at the end of the

192
00:09:40,279 --> 00:09:44,149
day that we want to make a cleaner idea

193
00:09:42,529 --> 00:09:45,319
of what loading and saving means because

194
00:09:44,149 --> 00:09:47,870
it's kind of a little bit confusing

195
00:09:45,320 --> 00:09:50,060
right now since we always process the h

196
00:09:47,870 --> 00:09:53,019
HT file whether we're loading or saving

197
00:09:50,059 --> 00:09:56,989
because one like does the reinsertion

198
00:09:53,019 --> 00:10:00,019
and one does the actual like importing

199
00:09:56,990 --> 00:10:02,629
of art assets and they're sort of both

200
00:10:00,019 --> 00:10:04,519
happening at the same time now so some

201
00:10:02,629 --> 00:10:08,659
stuff like that is a little bit hard and

202
00:10:04,519 --> 00:10:11,329
you know again we could make those a lot

203
00:10:08,659 --> 00:10:13,669
more delineated right so we could have

204
00:10:11,330 --> 00:10:15,590
one that's like save these alignment

205
00:10:13,669 --> 00:10:16,939
points out to the h HT and one that's

206
00:10:15,590 --> 00:10:20,629
load the alignment points in from the

207
00:10:16,940 --> 00:10:23,600
hht as separate things and import new

208
00:10:20,629 --> 00:10:25,399
bitmaps as another option because when

209
00:10:23,600 --> 00:10:27,590
we're doing the parsing we have the

210
00:10:25,399 --> 00:10:29,899
ability to just not do things like we

211
00:10:27,590 --> 00:10:31,910
could just say look if the users not

212
00:10:29,899 --> 00:10:34,009
asked us to do this particular type of

213
00:10:31,909 --> 00:10:37,519
operation don't do it now when we're you

214
00:10:34,009 --> 00:10:39,740
know when we're processing this hhd so

215
00:10:37,519 --> 00:10:41,600
you know I don't know so there's there's

216
00:10:39,740 --> 00:10:44,690
stuff like that and I'm not sure exactly

217
00:10:41,600 --> 00:10:47,990
how we won't do how we want to deal with

218
00:10:44,690 --> 00:10:49,550
it but that's how it goes wait so I

219
00:10:47,990 --> 00:10:51,620
thought I enabled both of these and

220
00:10:49,549 --> 00:10:54,919
change that did I not I probably didn't

221
00:10:51,620 --> 00:10:56,720
get a successful build here I didn't so

222
00:10:54,919 --> 00:10:59,269
let's take a look at what we're what

223
00:10:56,720 --> 00:11:03,950
we're looking at here oh right so I need

224
00:10:59,269 --> 00:11:06,379
the is valid to be to I need to actually

225
00:11:03,950 --> 00:11:08,990
write those for the buffers and I need

226
00:11:06,379 --> 00:11:12,080
to actually post these so this is valid

227
00:11:08,990 --> 00:11:15,590
here wants to come up as something that

228
00:11:12,080 --> 00:11:18,470
you as something that you can call token

229
00:11:15,590 --> 00:11:21,170
just to find that everywhere and then if

230
00:11:18,470 --> 00:11:26,810
I go over to where these buffers are

231
00:11:21,169 --> 00:11:29,689
defined this right here I probably want

232
00:11:26,809 --> 00:11:35,629
something in here as well so if I go

233
00:11:29,690 --> 00:11:39,680
dopes I actually want to create a new in

234
00:11:35,629 --> 00:11:42,769
there so this is the the types file and

235
00:11:39,679 --> 00:11:45,169
I don't really know I don't really know

236
00:11:42,769 --> 00:11:49,189
the most appropriate place to put those

237
00:11:45,169 --> 00:11:53,149
but I thought we had a like a helper or

238
00:11:49,190 --> 00:11:55,520
shared yeah I assumed the best place to

239
00:11:53,149 --> 00:11:57,679
put something like an is valid for a

240
00:11:55,519 --> 00:11:59,059
buffer would be in here because this is

241
00:11:57,679 --> 00:12:02,359
where a lot of those kinds of questions

242
00:11:59,059 --> 00:12:05,750
get asked but I guess I don't really

243
00:12:02,360 --> 00:12:07,129
know I feel like this is probably the

244
00:12:05,750 --> 00:12:09,320
best place for it because we don't

245
00:12:07,129 --> 00:12:10,129
really have a dedicated place for buffer

246
00:12:09,320 --> 00:12:12,890
operations

247
00:12:10,129 --> 00:12:15,679
maybe we should we just at the moment

248
00:12:12,889 --> 00:12:17,149
don't and so again that's something that

249
00:12:15,679 --> 00:12:19,879
you know I'm not gonna think too hard

250
00:12:17,149 --> 00:12:22,699
about at the moment but you know in the

251
00:12:19,879 --> 00:12:24,919
future we might do some cleanup where we

252
00:12:22,700 --> 00:12:25,730
decide to you know regularize some of

253
00:12:24,919 --> 00:12:28,639
these things a little bit more

254
00:12:25,730 --> 00:12:29,209
dramatically alright so I'm gonna do an

255
00:12:28,639 --> 00:12:32,838
is valid

256
00:12:29,208 --> 00:12:36,888
call here on this buffer that's just a

257
00:12:32,839 --> 00:12:39,379
you know a check to see is the buffer

258
00:12:36,889 --> 00:12:41,149
count greater than zero if it is it's

259
00:12:39,379 --> 00:12:43,550
got data in it if it's not that it

260
00:12:41,149 --> 00:12:46,129
doesn't so that's a pretty easy way for

261
00:12:43,549 --> 00:12:48,558
us to determine whether or not it's

262
00:12:46,129 --> 00:12:51,649
valid as far as the tokenized is

263
00:12:48,558 --> 00:12:53,509
concerned you know I was thinking I was

264
00:12:51,649 --> 00:12:55,339
gonna call this I want that call

265
00:12:53,509 --> 00:12:56,928
regardless but I think maybe there's

266
00:12:55,339 --> 00:12:59,809
actually better way to do this because

267
00:12:56,928 --> 00:13:01,490
tokens star type it means that if you've

268
00:12:59,808 --> 00:13:03,318
got a token of zero length you could

269
00:13:01,490 --> 00:13:05,329
still technically it could be valid like

270
00:13:03,318 --> 00:13:07,490
end of stream that's technically a valid

271
00:13:05,328 --> 00:13:08,688
token that has just nothing in it so I

272
00:13:07,490 --> 00:13:11,749
think the better way to do this would

273
00:13:08,688 --> 00:13:13,969
probably be to say look that's what it

274
00:13:11,749 --> 00:13:17,409
would you know if token type is unknown

275
00:13:13,970 --> 00:13:20,720
then it's invalid but anything else

276
00:13:17,409 --> 00:13:22,308
right would be valid that seems a little

277
00:13:20,720 --> 00:13:25,879
bit better to me because it just it has

278
00:13:22,308 --> 00:13:28,578
that flavor of allowing this one extra

279
00:13:25,879 --> 00:13:30,709
case that really could happen sometimes

280
00:13:28,578 --> 00:13:34,368
I doubt it would really come up in

281
00:13:30,708 --> 00:13:35,719
practice much but you know it could and

282
00:13:34,369 --> 00:13:37,399
I don't really want to like leave a

283
00:13:35,720 --> 00:13:39,528
little surprise for myself there that

284
00:13:37,399 --> 00:13:44,580
that ruins our day sometime in the

285
00:13:39,528 --> 00:13:46,208
future so anyway let me go ahead and

286
00:13:44,580 --> 00:13:50,499
[Music]

287
00:13:46,208 --> 00:13:52,878
give this a shot here if we look at the

288
00:13:50,499 --> 00:13:54,889
yeah okay if we look at the editor

289
00:13:52,879 --> 00:13:57,110
buttons now you can see we've got reload

290
00:13:54,889 --> 00:13:59,240
and save here so what I'd like to do is

291
00:13:57,110 --> 00:13:59,899
I'm gonna hit reload hht to just see

292
00:13:59,240 --> 00:14:02,928
what happens

293
00:13:59,899 --> 00:14:05,749
right because I have no idea if I click

294
00:14:02,928 --> 00:14:07,850
on that does anything bad happen right

295
00:14:05,749 --> 00:14:13,369
and it doesn't look like it does at the

296
00:14:07,850 --> 00:14:14,928
moment which is a good sign and so I

297
00:14:13,369 --> 00:14:16,939
don't know you know maybe we're okay

298
00:14:14,928 --> 00:14:18,499
maybe we're not we have some work to do

299
00:14:16,938 --> 00:14:21,259
so we could we'd like to be able to see

300
00:14:18,499 --> 00:14:22,579
general errors in here a little bit

301
00:14:21,259 --> 00:14:25,009
better so that's something we probably

302
00:14:22,578 --> 00:14:28,428
want to look at a little bit in the

303
00:14:25,009 --> 00:14:31,039
future as well but let's now try a

304
00:14:28,428 --> 00:14:32,720
slightly more involved test which is

305
00:14:31,039 --> 00:14:34,698
just to get rid of the data files all

306
00:14:32,720 --> 00:14:38,149
together and see if they can be rebuilt

307
00:14:34,698 --> 00:14:40,188
properly so I'm gonna go ahead and build

308
00:14:38,149 --> 00:14:42,110
in release mode also for a little while

309
00:14:40,188 --> 00:14:42,498
till we actually want to step in and

310
00:14:42,110 --> 00:14:45,259
look at some

311
00:14:42,499 --> 00:14:48,048
thing because that just makes things a

312
00:14:45,259 --> 00:14:50,778
lot easier on us since everything's

313
00:14:48,048 --> 00:14:53,448
faster so I'm gonna go in here and I'm

314
00:14:50,778 --> 00:14:56,058
just gonna delete base game HHA and I'm

315
00:14:53,448 --> 00:14:58,608
gonna delete intro cutscene HHA so that

316
00:14:56,058 --> 00:15:01,908
those are just gone and then I'm gonna

317
00:14:58,609 --> 00:15:04,219
go ahead and run the game and I'm gonna

318
00:15:01,908 --> 00:15:07,908
let it try to rebuild its art assets

319
00:15:04,219 --> 00:15:11,149
from scratch and see if it can do it or

320
00:15:07,908 --> 00:15:12,678
if it just fails right and so we're

321
00:15:11,149 --> 00:15:14,149
gonna try that see how that does and

322
00:15:12,678 --> 00:15:15,769
then when I think I'd like to do is go

323
00:15:14,149 --> 00:15:17,178
add a thing that just dumps all the

324
00:15:15,769 --> 00:15:22,068
errors from all the files that are

325
00:15:17,178 --> 00:15:24,348
currently being that that we have on

326
00:15:22,068 --> 00:15:27,019
like I don't know how to say this dump

327
00:15:24,349 --> 00:15:28,759
all the errors that currently exist and

328
00:15:27,019 --> 00:15:32,149
see what happens okay so you can see we

329
00:15:28,759 --> 00:15:34,188
we do have a bug right it's not quite

330
00:15:32,149 --> 00:15:37,788
working yet because deleting the file

331
00:15:34,188 --> 00:15:40,368
and making it rebuild the alignment

332
00:15:37,788 --> 00:15:44,088
points it didn't get the alignment point

333
00:15:40,369 --> 00:15:47,149
right there's no it's not there right

334
00:15:44,089 --> 00:15:49,099
and so we don't really know where that

335
00:15:47,149 --> 00:15:55,548
error is coming from right we don't have

336
00:15:49,099 --> 00:15:57,859
a real way to look at that now again we

337
00:15:55,548 --> 00:16:02,028
have a lot more information than we're

338
00:15:57,859 --> 00:16:03,918
getting here too because like every one

339
00:16:02,028 --> 00:16:06,198
of these things has an error log on it

340
00:16:03,918 --> 00:16:07,759
but we can't see error logs for things

341
00:16:06,198 --> 00:16:10,399
that aren't on the screen right because

342
00:16:07,759 --> 00:16:13,818
we can't select them or anything so that

343
00:16:10,399 --> 00:16:16,639
makes it pretty hard to use and so again

344
00:16:13,818 --> 00:16:19,848
what I would like to do here is I'd like

345
00:16:16,639 --> 00:16:23,089
to have some way of showing all of the

346
00:16:19,849 --> 00:16:25,249
errors that happened in the file in some

347
00:16:23,089 --> 00:16:28,999
way that makes it clear what's going on

348
00:16:25,249 --> 00:16:31,220
right and so that because for all we

349
00:16:28,999 --> 00:16:34,579
know there's like some good error

350
00:16:31,220 --> 00:16:36,649
messages being produced by our parser

351
00:16:34,578 --> 00:16:39,858
that that tell us exactly what's not

352
00:16:36,649 --> 00:16:42,379
working and we're just never gonna see

353
00:16:39,859 --> 00:16:44,509
them so we would like some way of

354
00:16:42,379 --> 00:16:46,938
displaying that error information in a

355
00:16:44,509 --> 00:16:50,658
way that actually makes it easy to see

356
00:16:46,938 --> 00:16:53,719
if we go backwards a little bit and say

357
00:16:50,658 --> 00:16:55,269
let's take a look at for example the

358
00:16:53,720 --> 00:16:57,410
asset system

359
00:16:55,269 --> 00:17:00,139
where are those things getting stored

360
00:16:57,409 --> 00:17:02,179
what you can see here is inside asset

361
00:17:00,139 --> 00:17:06,828
source file there's actually a stream

362
00:17:02,179 --> 00:17:08,959
for errors that's written here and you

363
00:17:06,828 --> 00:17:11,289
know that stream is a self-contained air

364
00:17:08,959 --> 00:17:14,690
stream it just gets dumped too and grows

365
00:17:11,289 --> 00:17:17,029
so I feel like if we wanted to we could

366
00:17:14,690 --> 00:17:22,570
just go through here and show these

367
00:17:17,029 --> 00:17:25,039
errors directly and we would be able to

368
00:17:22,569 --> 00:17:27,139
to just list those for all the source

369
00:17:25,039 --> 00:17:30,139
files that we've got pretty much at all

370
00:17:27,140 --> 00:17:31,730
times I think that would work the only

371
00:17:30,140 --> 00:17:34,150
thing that I don't necessarily know is

372
00:17:31,730 --> 00:17:38,450
are we actually properly tracking that

373
00:17:34,150 --> 00:17:40,040
using the error stuff that we've got so

374
00:17:38,450 --> 00:17:41,450
let's first make sure that the errors

375
00:17:40,039 --> 00:17:43,909
are actually getting attached to those

376
00:17:41,450 --> 00:17:46,910
source files in some way and then we'll

377
00:17:43,910 --> 00:17:48,890
move on from there so if you take a look

378
00:17:46,910 --> 00:17:50,810
here we don't actually open up the

379
00:17:48,890 --> 00:17:53,330
tokenizer when we first do synchronize

380
00:17:50,809 --> 00:17:58,099
what we actually do is we wait to get to

381
00:17:53,329 --> 00:18:01,099
parse hht and then we open up the

382
00:17:58,099 --> 00:18:02,839
tokenizer right and if we look at what

383
00:18:01,099 --> 00:18:05,689
we're doing with the tokenizer here you

384
00:18:02,839 --> 00:18:08,209
can kind of see that the error context I

385
00:18:05,690 --> 00:18:11,120
think is never actually getting set so

386
00:18:08,210 --> 00:18:14,299
if we actually go to the tokenizer in

387
00:18:11,119 --> 00:18:16,549
here you can see there is an error

388
00:18:14,299 --> 00:18:20,419
stream it's never actually getting used

389
00:18:16,549 --> 00:18:23,750
so if we come back and look you can see

390
00:18:20,420 --> 00:18:28,039
that there's really no error stream even

391
00:18:23,750 --> 00:18:29,930
being mentioned right so into the asset

392
00:18:28,039 --> 00:18:33,909
errors we do pack all of the errors that

393
00:18:29,930 --> 00:18:36,440
we got for that file into the asset that

394
00:18:33,910 --> 00:18:40,430
that we're actually exporting at any

395
00:18:36,440 --> 00:18:44,690
given time but we're not actually doing

396
00:18:40,430 --> 00:18:47,509
anything with the with the error stream

397
00:18:44,690 --> 00:18:51,259
in terms of saving it in memory like we

398
00:18:47,509 --> 00:18:53,210
said we were going to do right and so we

399
00:18:51,259 --> 00:18:55,299
really need some way of doing that sort

400
00:18:53,210 --> 00:19:00,710
of a thing like we need some way of

401
00:18:55,299 --> 00:19:02,180
putting those errors into we need we

402
00:19:00,710 --> 00:19:04,549
need something here that will allow us

403
00:19:02,180 --> 00:19:08,330
to take those errors and and make them

404
00:19:04,549 --> 00:19:10,668
work make them be tracked

405
00:19:08,329 --> 00:19:13,369
across the tokenizer and into something

406
00:19:10,669 --> 00:19:15,200
we can display so I'm not sure how we

407
00:19:13,369 --> 00:19:18,199
want to do that there's many ways we

408
00:19:15,200 --> 00:19:20,000
could do that I also am not sure about

409
00:19:18,200 --> 00:19:21,740
storing the errors into the file like

410
00:19:20,000 --> 00:19:24,440
we're doing now whether we actually care

411
00:19:21,740 --> 00:19:27,200
about doing that or not it seems like

412
00:19:24,440 --> 00:19:29,960
maybe that doesn't actually need to

413
00:19:27,200 --> 00:19:32,149
happen and we probably don't really need

414
00:19:29,960 --> 00:19:34,130
to worry too much about doing that I'm

415
00:19:32,148 --> 00:19:36,678
not sure I mean maybe we should be doing

416
00:19:34,130 --> 00:19:38,240
that I'm not sure but I think a more

417
00:19:36,679 --> 00:19:39,980
interesting way to do this would just be

418
00:19:38,240 --> 00:19:43,700
to say look when you do an import we'll

419
00:19:39,980 --> 00:19:45,380
just take that Airstream and now we can

420
00:19:43,700 --> 00:19:48,048
just show the entire Airstream as

421
00:19:45,380 --> 00:19:58,309
something that can be displayed on the

422
00:19:48,048 --> 00:20:02,319
you know on like the readout of our say

423
00:19:58,308 --> 00:20:04,129
the the editor panel I guess we can just

424
00:20:02,319 --> 00:20:06,918
take the Airstream

425
00:20:04,130 --> 00:20:09,169
the last time you did an operation it'll

426
00:20:06,919 --> 00:20:14,330
just show that Airstream that seems

427
00:20:09,169 --> 00:20:15,679
reasonable to me right and I don't know

428
00:20:14,329 --> 00:20:18,740
that we really need to do much else

429
00:20:15,679 --> 00:20:20,419
right so if for example I came in here

430
00:20:18,740 --> 00:20:23,690
and said all right let's suppose that

431
00:20:20,419 --> 00:20:26,570
the context has an Airstream on it so

432
00:20:23,690 --> 00:20:28,940
there's like you know something like

433
00:20:26,569 --> 00:20:32,388
this and then here we would just do like

434
00:20:28,940 --> 00:20:34,730
all right the Airstream is gonna be

435
00:20:32,388 --> 00:20:37,729
something and we'll set it here right

436
00:20:34,730 --> 00:20:40,610
then any time we create one of these

437
00:20:37,730 --> 00:20:43,460
tokenizer x' so when we call parse hht

438
00:20:40,609 --> 00:20:49,908
like this I'm just gonna say alright

439
00:20:43,460 --> 00:20:52,009
from there we'll just set the the

440
00:20:49,909 --> 00:20:53,389
tokenizer x' Airstream to be you know

441
00:20:52,009 --> 00:20:55,819
the airstream that comes in from the

442
00:20:53,388 --> 00:20:59,388
context that way whenever we have an

443
00:20:55,819 --> 00:21:02,678
error it'll now get piped in there and

444
00:20:59,388 --> 00:21:05,740
now I'll just hopefully let us you know

445
00:21:02,679 --> 00:21:08,480
do something more productive with those

446
00:21:05,740 --> 00:21:09,950
so then any time we do this I would say

447
00:21:08,480 --> 00:21:14,990
well that probably should just be like

448
00:21:09,950 --> 00:21:18,950
this right and these buffer these

449
00:21:14,990 --> 00:21:21,679
starters these streams you can see how

450
00:21:18,950 --> 00:21:22,179
these work we've got the ability to disc

451
00:21:21,679 --> 00:21:24,399
our

452
00:21:22,179 --> 00:21:25,419
stream you know total size that sort of

453
00:21:24,398 --> 00:21:28,898
stuff

454
00:21:25,419 --> 00:21:30,549
what I think I'd like to do is just

455
00:21:28,898 --> 00:21:34,778
allow these things to have like their

456
00:21:30,548 --> 00:21:36,278
own ability to grow this Airstream and

457
00:21:34,778 --> 00:21:39,490
that's pretty easy to do because it's

458
00:21:36,278 --> 00:21:41,288
got a memory arena right and so I think

459
00:21:39,490 --> 00:21:43,659
I should be able to just create one of

460
00:21:41,288 --> 00:21:45,908
these streams with the memory arena and

461
00:21:43,659 --> 00:21:48,669
just clear the memory arena every time

462
00:21:45,909 --> 00:21:51,100
I'm about to do something so for example

463
00:21:48,669 --> 00:21:54,278
in this case what I could do is say

464
00:21:51,099 --> 00:21:59,199
every time we go to do one of these

465
00:21:54,278 --> 00:22:01,450
things right we're gonna reset it so the

466
00:21:59,200 --> 00:22:04,450
assets Airstream is just gonna be an

467
00:22:01,450 --> 00:22:11,350
on-demand memory stream of assets like

468
00:22:04,450 --> 00:22:15,538
Airstream memory like so and the way

469
00:22:11,349 --> 00:22:18,099
that that's going to work is the assets

470
00:22:15,538 --> 00:22:26,888
era stream memory is gonna just get

471
00:22:18,099 --> 00:22:28,089
cleared so we'll start off right excuse

472
00:22:26,888 --> 00:22:32,579
me um

473
00:22:28,089 --> 00:22:35,769
we'll start off with era Stream memory

474
00:22:32,579 --> 00:22:39,428
clear and then we'll put everything into

475
00:22:35,769 --> 00:22:41,440
it and then the next time we do a

476
00:22:39,429 --> 00:22:45,220
synchronized will clear it again that

477
00:22:41,440 --> 00:22:51,548
way we always have an Airstream that's

478
00:22:45,220 --> 00:22:52,919
available for us to display if you never

479
00:22:51,548 --> 00:22:56,408
use it

480
00:22:52,919 --> 00:22:58,929
it won't take up any memory so it

481
00:22:56,409 --> 00:23:01,809
shouldn't be a problem and off you would

482
00:22:58,929 --> 00:23:04,509
go the asset source file currently keeps

483
00:23:01,808 --> 00:23:06,878
these per file I don't know that we

484
00:23:04,509 --> 00:23:08,460
really want that for any purpose so I

485
00:23:06,878 --> 00:23:11,099
may just pull that feature out entirely

486
00:23:08,460 --> 00:23:17,110
it just doesn't seem particularly useful

487
00:23:11,099 --> 00:23:24,819
so here is our or stream memory and here

488
00:23:17,109 --> 00:23:26,168
is our error stream I think that's all

489
00:23:24,819 --> 00:23:27,548
we would really need to do assuming

490
00:23:26,169 --> 00:23:31,330
these are cleared to zero at this the

491
00:23:27,548 --> 00:23:33,158
outset which I believe we do but don't

492
00:23:31,329 --> 00:23:34,658
quote me on that although I guess this

493
00:23:33,159 --> 00:23:35,800
memory is allocated from the zero clear

494
00:23:34,659 --> 00:23:40,180
pool so it proud

495
00:23:35,799 --> 00:23:43,450
would be fine so yeah let me take a look

496
00:23:40,180 --> 00:23:45,810
here yeah so I think this would be fine

497
00:23:43,450 --> 00:23:48,279
and we would end up with a nice clear

498
00:23:45,809 --> 00:23:50,349
stream at the start and then anytime you

499
00:23:48,279 --> 00:23:53,379
do an export of any kind or an import

500
00:23:50,349 --> 00:23:58,149
you would get errors piped to that

501
00:23:53,380 --> 00:24:00,100
stream now if I go into the editor we

502
00:23:58,150 --> 00:24:06,540
already have a thing that displays the

503
00:24:00,099 --> 00:24:08,879
errors for from like individual files I

504
00:24:06,539 --> 00:24:13,180
don't really remember where we did that

505
00:24:08,880 --> 00:24:15,070
but we did have it isn't there another

506
00:24:13,180 --> 00:24:15,600
file besides in-game editor maybe there

507
00:24:15,069 --> 00:24:18,159
isn't

508
00:24:15,599 --> 00:24:19,659
anyway an update and render editor we

509
00:24:18,160 --> 00:24:21,640
should be able to track this down so at

510
00:24:19,660 --> 00:24:26,500
its the asset editor that was doing it

511
00:24:21,640 --> 00:24:32,140
in the asset editor the bla bla bla bla

512
00:24:26,500 --> 00:24:36,480
bla here we go so we've got this

513
00:24:32,140 --> 00:24:36,480
annotation label here that says errors

514
00:24:37,829 --> 00:24:45,519
and that's kind of crappy like that

515
00:24:42,480 --> 00:24:47,349
label F I don't think would even do line

516
00:24:45,519 --> 00:24:49,509
feeds properly so we're probably gonna

517
00:24:47,349 --> 00:24:53,500
have to do a little bit of work here to

518
00:24:49,509 --> 00:24:56,619
actually make this thing work but that's

519
00:24:53,500 --> 00:25:02,339
okay so if we were to actually do this

520
00:24:56,619 --> 00:25:04,619
thing here a little bit more coherently

521
00:25:02,339 --> 00:25:08,649
we're gonna need some way of like

522
00:25:04,619 --> 00:25:12,009
dumping a stream out right but that's

523
00:25:08,650 --> 00:25:14,530
okay right again not that hard so let's

524
00:25:12,009 --> 00:25:17,859
go ahead and make that happen so instead

525
00:25:14,529 --> 00:25:20,410
of like annotation label there I don't

526
00:25:17,859 --> 00:25:28,319
know where where are we right now in

527
00:25:20,410 --> 00:25:30,340
this file so in-game editor

528
00:25:28,319 --> 00:25:33,279
actually has all that just built in

529
00:25:30,339 --> 00:25:34,599
alright so when we do like annotation

530
00:25:33,279 --> 00:25:36,910
label we need something where we can

531
00:25:34,599 --> 00:25:41,019
actually display the whole stream in

532
00:25:36,910 --> 00:25:43,930
there so when we call asset editor I

533
00:25:41,019 --> 00:25:46,930
think probably right here for the HHA

534
00:25:43,930 --> 00:25:48,820
bit that's probably where we would put

535
00:25:46,930 --> 00:25:50,919
it so like right here

536
00:25:48,819 --> 00:25:58,079
would want to look through that stream

537
00:25:50,919 --> 00:25:58,080
so you know we've got assets Airstream

538
00:25:58,710 --> 00:26:04,480
and this is what the thing that we're

539
00:26:00,759 --> 00:26:07,450
gonna actually want to loop over if I

540
00:26:04,480 --> 00:26:10,230
look at what a stream looks like you can

541
00:26:07,450 --> 00:26:14,048
see that it's just a series of chunks

542
00:26:10,230 --> 00:26:16,419
right and so if I just loop over the

543
00:26:14,048 --> 00:26:21,970
chunks I should be able to print them in

544
00:26:16,419 --> 00:26:29,470
order so here's a chunk I'll start with

545
00:26:21,970 --> 00:26:32,139
the first one and go through them and

546
00:26:29,470 --> 00:26:38,710
then each chunk has a file name line

547
00:26:32,138 --> 00:26:40,329
number and a set of contents there the

548
00:26:38,710 --> 00:26:43,028
file name and line number in this

549
00:26:40,329 --> 00:26:44,878
particular case I don't know if the file

550
00:26:43,028 --> 00:26:51,460
name and line number that are being

551
00:26:44,878 --> 00:26:54,278
recorded to the stream chunk are ones

552
00:26:51,460 --> 00:26:59,409
that reflect where the error came from

553
00:26:54,278 --> 00:27:06,359
or whether they're ones that reflect the

554
00:26:59,409 --> 00:27:06,360
actual source of the error if you look

555
00:27:06,869 --> 00:27:13,658
at the tokenizer we should be able to

556
00:27:10,148 --> 00:27:15,638
determine that so it looks like yeah the

557
00:27:13,659 --> 00:27:18,309
file name and what we actually just

558
00:27:15,638 --> 00:27:21,898
print out the whole thing so in here we

559
00:27:18,308 --> 00:27:25,028
can just kind of go and imprint right

560
00:27:21,898 --> 00:27:26,439
alright so you know there's a bunch of

561
00:27:25,028 --> 00:27:29,308
different ways we could do this I'm

562
00:27:26,440 --> 00:27:33,730
gonna go ahead and jump to the

563
00:27:29,308 --> 00:27:35,648
annotation label F thing so this is how

564
00:27:33,730 --> 00:27:37,720
we were printing that stuff out and you

565
00:27:35,648 --> 00:27:40,388
can see that it basically just does the

566
00:27:37,720 --> 00:27:42,069
formatting and then calls label so if we

567
00:27:40,388 --> 00:27:45,609
actually look at what label does you can

568
00:27:42,069 --> 00:27:48,878
see it calls basic text element which

569
00:27:45,609 --> 00:27:51,158
does its own thing in terms of producing

570
00:27:48,878 --> 00:27:53,888
a text element I don't think this ever

571
00:27:51,159 --> 00:27:57,909
wraps lines or anything like that you

572
00:27:53,888 --> 00:28:00,548
can see it just doing text out at and so

573
00:27:57,909 --> 00:28:01,180
yeah like and it's got like the

574
00:28:00,548 --> 00:28:02,680
interactions

575
00:28:01,180 --> 00:28:06,460
kind of along with it and all that

576
00:28:02,680 --> 00:28:09,190
nonsense so if we wanted to make this

577
00:28:06,460 --> 00:28:12,269
work for what we're doing we kind of

578
00:28:09,190 --> 00:28:15,549
need to do something a little bit more

579
00:28:12,269 --> 00:28:19,960
direct we probably want to do something

580
00:28:15,549 --> 00:28:22,720
here right where we're calling texts out

581
00:28:19,960 --> 00:28:28,450
at 4:00 you know things a little bit

582
00:28:22,720 --> 00:28:29,410
more specifically and you know passing

583
00:28:28,450 --> 00:28:33,640
some strings

584
00:28:29,410 --> 00:28:39,400
the I'm not crazy about how that's

585
00:28:33,640 --> 00:28:44,790
working you know if you look it's using

586
00:28:39,400 --> 00:28:44,790
care stars here which I don't love

587
00:28:48,299 --> 00:28:53,589
especially because I'm assuming that

588
00:28:50,349 --> 00:28:55,269
techstop doesn't actually need that like

589
00:28:53,589 --> 00:29:04,119
you know right here this for loop could

590
00:28:55,269 --> 00:29:07,359
have been over a number so I don't know

591
00:29:04,119 --> 00:29:08,769
like I'm not thrilled with that and that

592
00:29:07,359 --> 00:29:10,449
would make it harder for us to print

593
00:29:08,769 --> 00:29:12,910
these things out so I kind of feel like

594
00:29:10,450 --> 00:29:17,110
this wants to be upgraded a little bit

595
00:29:12,910 --> 00:29:21,220
to take a length instead of a care star

596
00:29:17,109 --> 00:29:22,719
right so in here where we do tech stop I

597
00:29:21,220 --> 00:29:23,890
think I'm just gonna go ahead and say

598
00:29:22,720 --> 00:29:25,990
let's make that happen

599
00:29:23,890 --> 00:29:28,690
I might if zero this out temporarily

600
00:29:25,990 --> 00:29:33,640
while I make that work I'm gonna go

601
00:29:28,690 --> 00:29:36,120
ahead and hit build there all right so

602
00:29:33,640 --> 00:29:39,310
let's take a look at the errors we have

603
00:29:36,119 --> 00:29:48,579
context Airstream

604
00:29:39,309 --> 00:29:52,059
is wrong aerostream memory that should

605
00:29:48,579 --> 00:30:02,259
be an ampersand oops

606
00:29:52,059 --> 00:30:06,490
and what else was it ah I see what it's

607
00:30:02,259 --> 00:30:13,029
complaining about this also needs to be

608
00:30:06,490 --> 00:30:16,180
an ampersand okay so that compiled just

609
00:30:13,029 --> 00:30:18,490
fine and what I need to do now is just

610
00:30:16,180 --> 00:30:20,230
make that change that we're it's

611
00:30:18,490 --> 00:30:23,529
possible for us to pass strings to this

612
00:30:20,230 --> 00:30:26,079
thing anytime we want to and so if I

613
00:30:23,529 --> 00:30:30,519
just do that compile the the compiler

614
00:30:26,079 --> 00:30:31,809
will guide me along there I think and if

615
00:30:30,519 --> 00:30:33,339
you look at the way this code works

616
00:30:31,809 --> 00:30:35,319
unfortunately yet another one of these

617
00:30:33,339 --> 00:30:37,179
kind of like crappy parser things that

618
00:30:35,319 --> 00:30:39,250
we just I don't know why we did this I

619
00:30:37,180 --> 00:30:41,440
think someone just wanted to know what

620
00:30:39,250 --> 00:30:53,980
would happen if we wanted to put stuff

621
00:30:41,440 --> 00:30:55,269
in here for color syntax slurring which

622
00:30:53,980 --> 00:31:02,289
I think we've literally never really

623
00:30:55,269 --> 00:31:05,379
used like ever but that's okay you know

624
00:31:02,289 --> 00:31:09,309
like I said not that hard to really to

625
00:31:05,380 --> 00:31:14,530
fix that so if we want to fix that what

626
00:31:09,309 --> 00:31:17,139
you can see here is we've got sort of an

627
00:31:14,529 --> 00:31:19,119
app pointer and we want to be able to

628
00:31:17,140 --> 00:31:21,790
treat it like a regular parse I can do

629
00:31:19,119 --> 00:31:25,389
the same trick I did before if you want

630
00:31:21,789 --> 00:31:29,369
to sort of change sudo parsing code like

631
00:31:25,390 --> 00:31:33,910
this in place you can just change the

632
00:31:29,369 --> 00:31:37,599
places where you're looking at those

633
00:31:33,910 --> 00:31:39,790
values to refer to temporaries and those

634
00:31:37,599 --> 00:31:41,139
temporaries can do the check to make

635
00:31:39,789 --> 00:31:43,000
sure they don't read off the end of the

636
00:31:41,140 --> 00:31:45,690
buffer and then you're pretty much done

637
00:31:43,000 --> 00:31:45,690
right

638
00:31:48,069 --> 00:31:55,929
it's not the most elegant way to do it

639
00:31:50,880 --> 00:31:58,420
it's it's kind of it's inefficient

640
00:31:55,930 --> 00:31:59,950
potentially it's hard to say that

641
00:31:58,420 --> 00:32:02,170
without timing it whether it really is

642
00:31:59,950 --> 00:32:04,569
all that inefficient in any particular

643
00:32:02,170 --> 00:32:05,890
case but you know it's it's you you

644
00:32:04,569 --> 00:32:11,200
could imagine doing a better job

645
00:32:05,890 --> 00:32:13,120
certainly um but it is very simple right

646
00:32:11,200 --> 00:32:14,529
it takes code that was written as if

647
00:32:13,119 --> 00:32:16,029
there was a mill Terminator and turns

648
00:32:14,529 --> 00:32:18,339
into code that doesn't need the null

649
00:32:16,029 --> 00:32:20,049
terminator without really introducing a

650
00:32:18,339 --> 00:32:22,509
whole lot of variants so it's easier to

651
00:32:20,049 --> 00:32:25,450
get it working in debugged more quickly

652
00:32:22,509 --> 00:32:29,650
so it's kind of a nice trick but yeah

653
00:32:25,450 --> 00:32:32,500
you know isn't the best thing ever no so

654
00:32:29,650 --> 00:32:37,240
if I go ahead and take the string here

655
00:32:32,500 --> 00:32:40,660
and loop over it this way instead then

656
00:32:37,240 --> 00:32:42,640
what I can do is like I said here we can

657
00:32:40,660 --> 00:32:54,580
be a little bit more specific about

658
00:32:42,640 --> 00:32:57,430
what's going on you can see the way that

659
00:32:54,579 --> 00:32:59,740
this is getting processed here is at

660
00:32:57,430 --> 00:33:04,480
always gets updated it's at particular

661
00:32:59,740 --> 00:33:09,509
points in the code so it actuality we

662
00:33:04,480 --> 00:33:13,269
don't do that we actually do this right

663
00:33:09,509 --> 00:33:16,269
and that's fine so you know no biggie

664
00:33:13,269 --> 00:33:18,789
and so these pieces of code all know how

665
00:33:16,269 --> 00:33:22,779
far they would like to move the read

666
00:33:18,789 --> 00:33:26,950
cursor along for their like pseudo

667
00:33:22,779 --> 00:33:33,639
parsing right i I don't know what oh

668
00:33:26,950 --> 00:33:35,470
this this is so I guess the other day I

669
00:33:33,640 --> 00:33:38,080
said you know someone was asking about

670
00:33:35,470 --> 00:33:41,829
utf-8 and I said we didn't support our

671
00:33:38,079 --> 00:33:46,769
rig list I guess we do technically we

672
00:33:41,829 --> 00:33:57,369
don't really read utf-8 but we do read

673
00:33:46,769 --> 00:33:59,619
inline glyph numbering so yeah I forgot

674
00:33:57,369 --> 00:34:01,929
we had that but I remember yeah that was

675
00:33:59,619 --> 00:34:04,959
because we did actually we put in like

676
00:34:01,930 --> 00:34:08,289
the glyph for owl or something as a test

677
00:34:04,960 --> 00:34:10,389
to make sure that we were supporting you

678
00:34:08,289 --> 00:34:12,730
know Unicode code points right and it

679
00:34:10,389 --> 00:34:16,360
worked so that was cool

680
00:34:12,730 --> 00:34:19,690
anyway ignoring that for a moment let's

681
00:34:16,360 --> 00:34:21,190
keep going so yet all I want to do now

682
00:34:19,690 --> 00:34:23,230
is make it easier for this code to parse

683
00:34:21,190 --> 00:34:27,039
and so I kind of want like all of these

684
00:34:23,230 --> 00:34:28,840
things to be there and accessible and so

685
00:34:27,039 --> 00:34:31,628
to do that what I'm gonna do is again

686
00:34:28,840 --> 00:34:34,269
just initialize the amount of look-ahead

687
00:34:31,628 --> 00:34:37,029
that I need two zeros and then I'm just

688
00:34:34,269 --> 00:34:42,699
gonna do you know something that looks

689
00:34:37,030 --> 00:34:45,220
like this if you know I guess what I

690
00:34:42,699 --> 00:34:47,859
would say is probably the easiest is to

691
00:34:45,219 --> 00:34:50,109
say look if at index plus some number is

692
00:34:47,860 --> 00:34:56,139
less than string counts then we can read

693
00:34:50,110 --> 00:34:58,420
it right so if add index plus 1 is less

694
00:34:56,139 --> 00:35:01,240
than string counts then I can read at

695
00:34:58,420 --> 00:35:06,360
one right I know I can always read at

696
00:35:01,239 --> 00:35:09,369
zero and it's just gonna be this right

697
00:35:06,360 --> 00:35:14,680
but if I want to read these other ones

698
00:35:09,369 --> 00:35:16,539
which would look something like this if

699
00:35:14,679 --> 00:35:20,919
I want to read each of those I have to

700
00:35:16,539 --> 00:35:23,679
look and see you know as I go which one

701
00:35:20,920 --> 00:35:25,000
of these are actually valid and this is

702
00:35:23,679 --> 00:35:31,359
what would tell me right

703
00:35:25,000 --> 00:35:32,980
so if I said this add index plus one if

704
00:35:31,360 --> 00:35:37,570
that's less than string count then I can

705
00:35:32,980 --> 00:35:39,329
read the plus one value that is all I

706
00:35:37,570 --> 00:35:42,330
would need for reading all of these

707
00:35:39,329 --> 00:35:42,329
right

708
00:35:50,699 --> 00:35:55,839
so as long as each of those in this

709
00:35:53,139 --> 00:35:58,389
indexes remains in range

710
00:35:55,840 --> 00:36:00,910
I can read from it otherwise I set it to

711
00:35:58,389 --> 00:36:03,549
zero and then the rest of this code like

712
00:36:00,909 --> 00:36:05,500
I said it's again not the you know

713
00:36:03,550 --> 00:36:09,160
there's there's better ways of writing

714
00:36:05,500 --> 00:36:10,829
the code than what I did but that's the

715
00:36:09,159 --> 00:36:13,210
way that does the most straightforward

716
00:36:10,829 --> 00:36:16,750
transformation on a parser that was

717
00:36:13,210 --> 00:36:21,130
trying to that was counting on being

718
00:36:16,750 --> 00:36:23,079
able to read off you know as far as it

719
00:36:21,130 --> 00:36:24,910
could without hitting a null Terminator

720
00:36:23,079 --> 00:36:26,679
and stuff like that and turn it into

721
00:36:24,909 --> 00:36:28,059
something that that doesn't require the

722
00:36:26,679 --> 00:36:33,989
null terminator anymore it's just a

723
00:36:28,059 --> 00:36:39,690
simple way to make that happen this

724
00:36:33,989 --> 00:36:39,689
should be that and this should be that

725
00:36:40,260 --> 00:36:45,150
anytime we had a text up here from

726
00:36:42,880 --> 00:36:48,930
something that was a care star string

727
00:36:45,150 --> 00:36:52,000
that should really do a string length

728
00:36:48,929 --> 00:36:53,500
string like this or a oh sorry we

729
00:36:52,000 --> 00:36:55,659
already have a way to do it's just a

730
00:36:53,500 --> 00:37:00,690
wrap Z so that will create the string

731
00:36:55,659 --> 00:37:03,009
length and go and then we can now say or

732
00:37:00,690 --> 00:37:04,869
when you're doing text out at you could

733
00:37:03,010 --> 00:37:08,470
just pass her regular oops a regular

734
00:37:04,869 --> 00:37:11,920
string here and it'll thunk through with

735
00:37:08,469 --> 00:37:16,118
the same default parameter stuff to the

736
00:37:11,920 --> 00:37:19,329
the text op right and so that's a lot a

737
00:37:16,119 --> 00:37:21,160
lot nicer there let's take a look here

738
00:37:19,329 --> 00:37:24,309
we've got for a get text size we're

739
00:37:21,159 --> 00:37:28,679
doing the sizing call again that needs

740
00:37:24,309 --> 00:37:28,679
to just do a wrap Z on the string here

741
00:37:30,719 --> 00:37:40,289
and the same thing would be true here

742
00:37:34,510 --> 00:37:43,800
although wait shouldn't that of just oh

743
00:37:40,289 --> 00:37:43,800
no nevermind

744
00:37:45,760 --> 00:37:51,980
let's see what else we've got

745
00:37:48,760 --> 00:37:53,450
looks like that was it actually and so

746
00:37:51,980 --> 00:37:59,750
now we just need to debug it did we

747
00:37:53,449 --> 00:38:02,599
break it and so on right so it looks

748
00:37:59,750 --> 00:38:07,929
like that's working fine the debug

749
00:38:02,599 --> 00:38:07,929
system appears to have remained intact

750
00:38:10,869 --> 00:38:31,489
no issues there that I can see all right

751
00:38:27,199 --> 00:38:34,309
good deal and so now that I can do that

752
00:38:31,489 --> 00:38:36,500
it makes it easy for me to use the

753
00:38:34,309 --> 00:38:39,289
printing you know use what we've got to

754
00:38:36,500 --> 00:38:41,329
print out sections of the stream and

755
00:38:39,289 --> 00:38:43,489
that's really all I wanted so you know

756
00:38:41,329 --> 00:38:46,130
in here now we we can take those

757
00:38:43,489 --> 00:38:49,250
individual chunks and print them out as

758
00:38:46,130 --> 00:38:53,269
separate pieces I'm gonna do nothing

759
00:38:49,250 --> 00:38:55,369
particularly fancy at first I'm just

760
00:38:53,269 --> 00:38:59,539
gonna do in fact I can't even do this as

761
00:38:55,369 --> 00:39:02,599
a label if I want to essentially so four

762
00:38:59,539 --> 00:39:09,829
texts out at where we're doing yeah in

763
00:39:02,599 --> 00:39:17,539
fact here if I was to do something

764
00:39:09,829 --> 00:39:20,230
really weird and stupid I could actually

765
00:39:17,539 --> 00:39:20,230
do it this way

766
00:39:24,409 --> 00:39:29,849
right and so if I go over to how we're

767
00:39:28,260 --> 00:39:32,280
doing labels you can see they take a

768
00:39:29,849 --> 00:39:34,230
care star sometimes would rather again

769
00:39:32,280 --> 00:39:38,280
I'd rather change these now to sort of

770
00:39:34,230 --> 00:39:41,070
doing things with a you know with

771
00:39:38,280 --> 00:39:42,480
strings because like I said I just we

772
00:39:41,070 --> 00:39:44,760
didn't do that at a major because I was

773
00:39:42,480 --> 00:39:45,780
trying to keep things simpler but really

774
00:39:44,760 --> 00:39:47,520
I just hate it

775
00:39:45,780 --> 00:39:49,110
and any time I ever try to write

776
00:39:47,519 --> 00:39:52,259
anything with with no terminators I

777
00:39:49,110 --> 00:39:53,730
always get sad and so you know I should

778
00:39:52,260 --> 00:39:55,020
have I should have just have said all

779
00:39:53,730 --> 00:39:57,570
right we're not doing all terminators

780
00:39:55,019 --> 00:39:58,889
sorry everyone and gone with length

781
00:39:57,570 --> 00:40:02,070
strings at the outset but you know I

782
00:39:58,889 --> 00:40:05,129
just I just didn't so in terms of basic

783
00:40:02,070 --> 00:40:08,970
textile element here I'll just do string

784
00:40:05,130 --> 00:40:13,559
text so when we go forwards with that

785
00:40:08,969 --> 00:40:15,989
it'll it should work we'll have to make

786
00:40:13,559 --> 00:40:18,029
sure the get text size call supports it

787
00:40:15,989 --> 00:40:20,099
but otherwise we're good and then

788
00:40:18,030 --> 00:40:21,840
through here right I can just change it

789
00:40:20,099 --> 00:40:23,610
like so this always just works with

790
00:40:21,840 --> 00:40:25,079
strings because we always have the

791
00:40:23,610 --> 00:40:36,599
strings so it should be pretty

792
00:40:25,079 --> 00:40:37,980
straightforward right like so and yep so

793
00:40:36,599 --> 00:40:39,630
like for example here you know we've got

794
00:40:37,980 --> 00:40:41,670
this temp and we're doing this label F

795
00:40:39,630 --> 00:40:45,059
for printing it in again really easy to

796
00:40:41,670 --> 00:40:46,619
make that work you know we can have temp

797
00:40:45,059 --> 00:40:50,159
string and we just do time strand count

798
00:40:46,619 --> 00:40:52,019
equals this temp string data equals the

799
00:40:50,159 --> 00:40:53,849
temp buffer and then you're done right

800
00:40:52,019 --> 00:40:56,039
so you don't even have to look for the

801
00:40:53,849 --> 00:41:01,730
size because you get it back from format

802
00:40:56,039 --> 00:41:01,730
string list and off you go

803
00:41:04,260 --> 00:41:11,010
looking here basic text elements this

804
00:41:08,340 --> 00:41:17,070
again should just be taking a string

805
00:41:11,010 --> 00:41:22,369
there again button F same field that's

806
00:41:17,070 --> 00:41:22,369
just going to do a temp string

807
00:41:26,469 --> 00:41:29,799
and you're done

808
00:41:32,360 --> 00:41:45,349
same thing here and here so again just

809
00:41:43,880 --> 00:41:46,970
kind of propagating that change through

810
00:41:45,349 --> 00:41:49,099
looks like we got a couple other ones

811
00:41:46,969 --> 00:41:53,809
that get text size I should also just

812
00:41:49,099 --> 00:41:55,839
make one for that so get text size right

813
00:41:53,809 --> 00:42:01,099
you can call it a couple different ways

814
00:41:55,840 --> 00:42:03,019
but yeah that's the wrap C version so

815
00:42:01,099 --> 00:42:05,210
you just need a version without that and

816
00:42:03,019 --> 00:42:06,980
again I really probably just don't even

817
00:42:05,210 --> 00:42:09,500
want those the the null-terminated

818
00:42:06,980 --> 00:42:12,170
versions eventually i would just get rid

819
00:42:09,500 --> 00:42:14,539
of those entirely but since you know i

820
00:42:12,170 --> 00:42:16,070
don't want to go doing large changes

821
00:42:14,539 --> 00:42:18,019
right now for no particular reason i'm

822
00:42:16,070 --> 00:42:28,780
just gonna change it in the editor and

823
00:42:18,019 --> 00:42:28,780
leave it that way let's see that's that

824
00:42:32,739 --> 00:42:48,459
this is this and

825
00:42:57,079 --> 00:43:05,789
that all looks fine so all I need to do

826
00:43:03,030 --> 00:43:14,330
here is just say look these are gonna be

827
00:43:05,789 --> 00:43:16,529
six do we have there it is constantly

828
00:43:14,329 --> 00:43:18,329
I'm like do we have a way of wrapping

829
00:43:16,530 --> 00:43:22,019
one of these things I think we do and we

830
00:43:18,329 --> 00:43:24,119
did so yeah can't see is all we need to

831
00:43:22,019 --> 00:43:29,250
do to turn one of those into a proper

832
00:43:24,119 --> 00:43:32,509
string I'm not sure what is button is

833
00:43:29,250 --> 00:43:32,510
complaining about here it's

834
00:43:40,619 --> 00:43:45,789
it's the void star classifier that's

835
00:43:43,510 --> 00:43:49,000
having a problem with so that classifier

836
00:43:45,789 --> 00:43:50,920
that it needs there it can't pass the

837
00:43:49,000 --> 00:43:52,960
string because the string is not a

838
00:43:50,920 --> 00:43:55,269
pointer obviously right but it can pass

839
00:43:52,960 --> 00:43:56,199
the data of the string just fine so for

840
00:43:55,268 --> 00:44:07,929
classifiers

841
00:43:56,199 --> 00:44:13,439
that's totally easy as well and there we

842
00:44:07,929 --> 00:44:13,440
go so I think that's all good

843
00:44:20,039 --> 00:44:27,720
this again is the temp temp and temp

844
00:44:24,599 --> 00:44:31,960
that's all fine all of these are just

845
00:44:27,719 --> 00:44:34,230
constants ease now you just have to I'm

846
00:44:31,960 --> 00:44:34,230
sorry

847
00:44:35,309 --> 00:44:42,190
well I guess they're wrap see current

848
00:44:38,170 --> 00:44:44,950
currently see what we've got here so you

849
00:44:42,190 --> 00:44:50,619
can't actually pass this because C is

850
00:44:44,949 --> 00:44:54,399
stupid so this would be a wrap Z sort of

851
00:44:50,619 --> 00:44:58,450
I mean you could put it outside and not

852
00:44:54,400 --> 00:45:01,599
do it that way but yeah so I don't know

853
00:44:58,449 --> 00:45:04,568
exactly how we would want to do that

854
00:45:01,599 --> 00:45:08,230
wrapping probably actually want to have

855
00:45:04,568 --> 00:45:25,900
a separate builder so you know basically

856
00:45:08,230 --> 00:45:27,548
this something where we can say that so

857
00:45:25,900 --> 00:45:30,910
that we can actually pass the count

858
00:45:27,548 --> 00:45:32,650
directly so you know I would often call

859
00:45:30,909 --> 00:45:34,989
this like bundle string or something and

860
00:45:32,650 --> 00:45:46,480
then you define some macro bits like

861
00:45:34,989 --> 00:45:50,079
well if you know what you're going to be

862
00:45:46,480 --> 00:45:52,480
putting in here you can just say you can

863
00:45:50,079 --> 00:45:54,960
just pass these two things to it like

864
00:45:52,480 --> 00:45:54,960
that right

865
00:46:01,539 --> 00:46:06,650
so you still can

866
00:46:03,789 --> 00:46:14,230
avoid doing work you can make these

867
00:46:06,650 --> 00:46:14,230
things be packed correctly and so I'll

868
00:46:14,679 --> 00:46:23,149
again it's just annoying because since

869
00:46:17,690 --> 00:46:25,099
since C is so crappy and C++ what you

870
00:46:23,150 --> 00:46:28,480
would want to do is have something where

871
00:46:25,099 --> 00:46:32,000
you could just say that your strings are

872
00:46:28,480 --> 00:46:36,500
always these kind of strings I feel like

873
00:46:32,000 --> 00:46:41,719
they were gonna add that to C++ 20 20 or

874
00:46:36,500 --> 00:46:45,170
whatever I'm sure they screwed it up and

875
00:46:41,719 --> 00:46:47,298
it's terrible because they always do but

876
00:46:45,170 --> 00:46:49,309
they were gonna have you know strings

877
00:46:47,298 --> 00:46:53,858
where you could finally say you know

878
00:46:49,309 --> 00:46:57,528
here's what I mean when I say a string

879
00:46:53,858 --> 00:46:58,940
revolutionary idea I know but I don't

880
00:46:57,528 --> 00:47:04,028
know if they ever got around to it

881
00:46:58,940 --> 00:47:06,139
I'm sure it's real great if they did but

882
00:47:04,028 --> 00:47:09,409
you know you can imagine in the same

883
00:47:06,139 --> 00:47:11,719
language you would just say look here's

884
00:47:09,409 --> 00:47:14,808
what a string evaluates to it's not null

885
00:47:11,719 --> 00:47:18,199
terminated anymore it's gonna be the the

886
00:47:14,809 --> 00:47:21,079
data with a count in front of it as this

887
00:47:18,199 --> 00:47:24,949
lay out you know and then that's what

888
00:47:21,079 --> 00:47:26,390
we're talking about from now on that

889
00:47:24,949 --> 00:47:30,768
would be how a sane language would work

890
00:47:26,389 --> 00:47:33,739
right because why why would a programmer

891
00:47:30,768 --> 00:47:35,358
want you to predefined what a string

892
00:47:33,739 --> 00:47:40,189
looks like it doesn't make any sense

893
00:47:35,358 --> 00:47:44,170
right but that's you know how people

894
00:47:40,190 --> 00:47:50,450
still think for some reason so anyway

895
00:47:44,170 --> 00:47:52,720
moving on let me just finish this port

896
00:47:50,449 --> 00:47:52,719
here

897
00:47:58,778 --> 00:48:14,329
and one more it's like two more probably

898
00:48:12,798 --> 00:48:15,650
have a utility function for this you can

899
00:48:14,329 --> 00:48:18,048
see how many times you have to do this

900
00:48:15,650 --> 00:48:21,528
little shuffle it's just a little bit

901
00:48:18,048 --> 00:48:25,309
hard to do the there's some there's not

902
00:48:21,528 --> 00:48:28,219
a lot of logic to it so it's not it's

903
00:48:25,309 --> 00:48:30,880
not that easy and C to write the thing

904
00:48:28,219 --> 00:48:33,738
that actually does what you want here

905
00:48:30,880 --> 00:48:43,670
any more brief than that

906
00:48:33,739 --> 00:48:47,900
sadly all right so let's see what else

907
00:48:43,670 --> 00:48:53,650
we got a bundle string can I convert

908
00:48:47,900 --> 00:48:53,650
from you it took care star that's fine

909
00:49:03,608 --> 00:49:06,909
there we go

910
00:49:08,800 --> 00:49:20,820
and what is the problem I was a little

911
00:49:16,869 --> 00:49:20,819
overzealous there I admit that it's

912
00:49:26,550 --> 00:49:43,750
edible P X did we not make this take a

913
00:49:31,599 --> 00:49:59,579
string we do not I could not so label

914
00:49:43,750 --> 00:49:59,579
texts is there this is a bundle yeah

915
00:50:05,280 --> 00:50:10,600
again just busy work at this point doing

916
00:50:08,440 --> 00:50:18,010
the conversion there's really nothing to

917
00:50:10,599 --> 00:50:21,009
it all right

918
00:50:18,010 --> 00:50:24,790
just a few more here to go so these guys

919
00:50:21,010 --> 00:50:28,180
again are just these are just everyone's

920
00:50:24,789 --> 00:50:32,409
taking a string properly sized string

921
00:50:28,179 --> 00:50:33,489
there and like I said because it's

922
00:50:32,409 --> 00:50:36,369
stupid

923
00:50:33,489 --> 00:50:39,129
you can't just define your language when

924
00:50:36,369 --> 00:50:41,829
you start to tell you that you wanted a

925
00:50:39,130 --> 00:50:44,320
length string and not a null terminator

926
00:50:41,829 --> 00:50:48,309
string military no strings being pretty

927
00:50:44,320 --> 00:50:50,230
much the worst way to store strings but

928
00:50:48,309 --> 00:50:52,960
they're not only the default and see

929
00:50:50,230 --> 00:50:55,420
they're actually the only way so you

930
00:50:52,960 --> 00:50:58,210
have to insert your own code to deal

931
00:50:55,420 --> 00:50:59,110
with it which is not fabulous and like I

932
00:50:58,210 --> 00:51:00,789
said I don't actually know if they ever

933
00:50:59,110 --> 00:51:02,380
really did fix that I thought they were

934
00:51:00,789 --> 00:51:06,820
gonna at some point I seem to recall

935
00:51:02,380 --> 00:51:08,940
seeing something but don't quote me on

936
00:51:06,820 --> 00:51:08,940
that

937
00:51:26,829 --> 00:51:34,430
all right and so if we took a look over

938
00:51:31,099 --> 00:51:36,499
at format string you can also see like

939
00:51:34,429 --> 00:51:38,419
the way that it works we could have made

940
00:51:36,498 --> 00:51:42,649
you know we definitely could make one

941
00:51:38,420 --> 00:51:47,259
that returns a string and maybe that's

942
00:51:42,650 --> 00:51:47,259
something we should do going forward

943
00:51:52,838 --> 00:51:57,949
because that's just now that we're sort

944
00:51:56,119 --> 00:52:00,950
of I'm in for a penny in for a pound on

945
00:51:57,949 --> 00:52:02,598
that I'll probably want to just go the

946
00:52:00,949 --> 00:52:06,318
whole way and make sure that the whole

947
00:52:02,599 --> 00:52:08,859
thing works that way in the future but

948
00:52:06,318 --> 00:52:08,858
we'll see

949
00:52:14,989 --> 00:52:25,969
so these are what's the problem

950
00:52:22,309 --> 00:52:32,849
editable pxy

951
00:52:25,969 --> 00:52:44,730
still taking this fix that and keep

952
00:52:32,849 --> 00:52:50,329
going editable type editable type looks

953
00:52:44,730 --> 00:52:50,329
like it takes strings what's the problem

954
00:52:50,719 --> 00:52:59,779
label text ah so this just wants to be

955
00:52:53,880 --> 00:52:59,780
like not a string right but that's fine

956
00:53:02,510 --> 00:53:11,809
and the label is calling get name a

957
00:53:13,489 --> 00:53:27,649
debug state in the tenth name so get

958
00:53:17,309 --> 00:53:27,650
name returns a care star which is fine

959
00:53:30,679 --> 00:53:41,548
but we can just wrap that right you can

960
00:53:37,949 --> 00:53:44,129
see pretty much in all these cases it

961
00:53:41,548 --> 00:53:52,710
would know what it is I'll make it not

962
00:53:44,130 --> 00:53:55,349
do that at the moment well maybe I'll

963
00:53:52,710 --> 00:53:56,670
just have it wrap it on the outside like

964
00:53:55,349 --> 00:54:00,528
really that thing should just return a

965
00:53:56,670 --> 00:54:00,528
string but I probably won't do that

966
00:54:08,469 --> 00:54:14,129
and so if we want to bundle this one

967
00:54:10,420 --> 00:54:16,829
then we can do that in place as well

968
00:54:14,130 --> 00:54:19,450
what else we got here

969
00:54:16,829 --> 00:54:22,269
these are just for our profile and stuff

970
00:54:19,449 --> 00:54:36,460
like that again these are just directly

971
00:54:22,268 --> 00:54:47,368
bundle Bowl so it's like other profiler

972
00:54:36,460 --> 00:54:47,369
stuff and

973
00:55:00,539 --> 00:55:05,529
all right and I think we're done that

974
00:55:03,909 --> 00:55:07,599
was more than I wanted to do but just

975
00:55:05,530 --> 00:55:12,880
make sure everything's kind of working

976
00:55:07,599 --> 00:55:14,230
so at the moment we have to go back and

977
00:55:12,880 --> 00:55:16,990
check now to make sure we didn't break

978
00:55:14,230 --> 00:55:19,539
everything converting everything the

979
00:55:16,989 --> 00:55:23,229
strings because we may well have at

980
00:55:19,539 --> 00:55:25,029
least all that stuff is working okay we

981
00:55:23,230 --> 00:55:28,269
can look at the profiler seems like

982
00:55:25,030 --> 00:55:30,400
that's working okay so I you know it

983
00:55:28,269 --> 00:55:31,269
it's a pretty straightforward change but

984
00:55:30,400 --> 00:55:34,960
you know we could have slipped up

985
00:55:31,269 --> 00:55:38,079
somewhere certainly so let's go ahead

986
00:55:34,960 --> 00:55:41,099
and and now put in display the trunk

987
00:55:38,079 --> 00:55:43,929
content so if I look at the label call

988
00:55:41,099 --> 00:55:47,699
it just needs a layout and then a string

989
00:55:43,929 --> 00:55:49,868
I think that is all we really need there

990
00:55:47,699 --> 00:55:53,710
and now we should be able to see those

991
00:55:49,869 --> 00:55:56,019
errors each time as we go so when we run

992
00:55:53,710 --> 00:56:00,220
the code now we should be able to see

993
00:55:56,019 --> 00:56:03,429
all of the errors and you know here they

994
00:56:00,219 --> 00:56:06,519
are so we know that we've got a bunch of

995
00:56:03,429 --> 00:56:08,529
crap happening that's bad and we should

996
00:56:06,519 --> 00:56:12,130
start by eliminating those and this is

997
00:56:08,530 --> 00:56:15,070
exactly why I wanted to do this so you

998
00:56:12,130 --> 00:56:19,380
can see our parsers hopefully pretty

999
00:56:15,070 --> 00:56:23,830
good here where it tells us like exactly

1000
00:56:19,380 --> 00:56:28,090
where we need to look it's a real you

1001
00:56:23,829 --> 00:56:31,480
know parser with actual information in

1002
00:56:28,090 --> 00:56:33,460
it this printouts not particularly good

1003
00:56:31,480 --> 00:56:35,679
it's not even scrollable and it doesn't

1004
00:56:33,460 --> 00:56:36,820
really assemble strings properly so we

1005
00:56:35,679 --> 00:56:38,589
probably want to do a little work on

1006
00:56:36,820 --> 00:56:40,539
that too eventually but at the moment

1007
00:56:38,590 --> 00:56:42,010
this gives us what we want so it's

1008
00:56:40,539 --> 00:56:44,380
totally fine

1009
00:56:42,010 --> 00:56:47,410
if we were going to be the types of

1010
00:56:44,380 --> 00:56:50,680
people who do things unnecessarily we

1011
00:56:47,409 --> 00:56:52,659
could also be funny about this since we

1012
00:56:50,679 --> 00:56:57,789
did the work I'm gonna demand that we

1013
00:56:52,659 --> 00:57:02,049
actually use it and say that because we

1014
00:56:57,789 --> 00:57:06,539
did like the color stuff we should

1015
00:57:02,050 --> 00:57:06,539
actually put something in there like

1016
00:57:14,019 --> 00:57:17,800
just to see if this works

1017
00:57:24,849 --> 00:57:36,289
cuz I'd forgotten about that yeah um so

1018
00:57:33,679 --> 00:57:45,339
like you know we've got the syntax

1019
00:57:36,289 --> 00:57:48,230
colouring um so anyway 3517 in bass game

1020
00:57:45,340 --> 00:57:53,050
let's load it up and see what we're

1021
00:57:48,230 --> 00:57:58,280
screwing up so in base game h HT h HT

1022
00:57:53,050 --> 00:58:00,710
what was at 35 can't remember 37 what

1023
00:57:58,280 --> 00:58:23,620
did it say I read it and then I forgot

1024
00:58:00,710 --> 00:58:23,619
what it said 35 17 so this comma is bad

1025
00:58:24,070 --> 00:58:27,700
is that right

1026
00:58:30,949 --> 00:58:38,118
so it's f3 I remember too I wonder it so

1027
00:58:35,389 --> 00:58:40,279
this is this wrong did we screw up the

1028
00:58:38,119 --> 00:58:46,880
the line number because there isn't one

1029
00:58:40,280 --> 00:58:50,540
of those on on that line I'm base game

1030
00:58:46,880 --> 00:58:53,030
35 right so I think we're gonna have to

1031
00:58:50,539 --> 00:58:56,989
do some bugging there right cuz this is

1032
00:58:53,030 --> 00:59:00,170
line 35 and it looks like it's

1033
00:58:56,989 --> 00:59:04,808
complaining about something else unless

1034
00:59:00,170 --> 00:59:04,809
you know where I guess we could be off

1035
00:59:07,000 --> 00:59:10,489
it's hard to say like I mean you would

1036
00:59:09,469 --> 00:59:13,909
think it's probably complaining about

1037
00:59:10,489 --> 00:59:16,129
this line because this is the line

1038
00:59:13,909 --> 00:59:19,848
that's being parsed weirdly right this

1039
00:59:16,130 --> 00:59:21,640
is the new thing that we we added and so

1040
00:59:19,849 --> 00:59:29,298
if you look at what's going on there

1041
00:59:21,639 --> 00:59:37,429
this is 35 it really means this so 1 2 3

1042
00:59:29,298 --> 00:59:43,599
4 5 6 1 2 3 4 5 6 it's not exactly the

1043
00:59:37,429 --> 00:59:47,088
size of the comments I'm not sure who's

1044
00:59:43,599 --> 00:59:48,559
who's getting that wrong so let's take a

1045
00:59:47,088 --> 00:59:51,108
look at our tokenizer because we wanted

1046
00:59:48,559 --> 00:59:52,880
to bug this part of it like I said we'd

1047
00:59:51,108 --> 00:59:55,150
like it to be accurate because it just

1048
00:59:52,880 --> 00:59:59,900
speeds up our ability to find the errors

1049
00:59:55,150 --> 01:00:02,150
when we do the tokens we just set them

1050
00:59:59,900 --> 01:00:07,490
to be whatever the tokenizer thinks at

1051
01:00:02,150 --> 01:00:09,920
the moment that that thing should be so

1052
01:00:07,489 --> 01:00:13,018
in here when we do get token raw

1053
01:00:09,920 --> 01:00:13,019
[Music]

1054
01:00:24,690 --> 01:00:30,539
it looks like anytime we see and is

1055
01:00:27,420 --> 01:00:35,269
end-of-line we do do a plus plus

1056
01:00:30,539 --> 01:00:38,670
tokenizer line number so I'm not sure

1057
01:00:35,269 --> 01:00:42,630
why we would be having a problem with

1058
01:00:38,670 --> 01:00:49,048
that because seems like that should be

1059
01:00:42,630 --> 01:00:53,150
pretty accurate but do we actually track

1060
01:00:49,048 --> 01:00:53,150
it inside the comma comment

1061
01:01:04,940 --> 01:01:12,980
we don't so that looks like the primary

1062
01:01:09,860 --> 01:01:18,019
problem we just aren't tracking line

1063
01:01:12,980 --> 01:01:20,840
numbers through compound comments so in

1064
01:01:18,019 --> 01:01:23,809
here we would have to do this we would

1065
01:01:20,840 --> 01:01:26,590
have to do this every time when we look

1066
01:01:23,809 --> 01:01:31,579
and see if we've got an is end of line

1067
01:01:26,590 --> 01:01:34,010
situation presenting itself so you know

1068
01:01:31,579 --> 01:01:46,849
something like this would actually have

1069
01:01:34,010 --> 01:01:49,580
to occur every time so we would need

1070
01:01:46,849 --> 01:02:00,079
here to say something like look if

1071
01:01:49,579 --> 01:02:03,759
tokenize are at zero if we have either

1072
01:02:00,079 --> 01:02:06,440
of those new line conditions occurring

1073
01:02:03,760 --> 01:02:11,470
we need to go an extra one so we don't

1074
01:02:06,440 --> 01:02:17,420
over count the line number right and

1075
01:02:11,469 --> 01:02:19,489
then we need to actually advance what I

1076
01:02:17,420 --> 01:02:21,519
could do to there is just do it like

1077
01:02:19,489 --> 01:02:21,519
this

1078
01:02:36,230 --> 01:02:43,079
so that would allow me to like look any

1079
01:02:38,789 --> 01:02:45,090
time we see one of these things we'll

1080
01:02:43,079 --> 01:02:47,549
skip it if it's a double we'll skip one

1081
01:02:45,090 --> 01:02:49,050
ahead and then we'll just check any time

1082
01:02:47,550 --> 01:02:51,780
we see an end of line character we'll

1083
01:02:49,050 --> 01:02:53,519
make sure we track that as a line member

1084
01:02:51,780 --> 01:02:54,960
increment so that may have been our only

1085
01:02:53,519 --> 01:02:57,179
book because we were pretty accurate

1086
01:02:54,960 --> 01:02:59,220
otherwise so it's like we were skipping

1087
01:02:57,179 --> 01:03:02,879
the comment and hey lo and behold that's

1088
01:02:59,219 --> 01:03:06,509
exactly what we were doing so looking in

1089
01:03:02,880 --> 01:03:09,358
here you can see change now 41 let's see

1090
01:03:06,510 --> 01:03:11,369
if that's any more accurate and correct

1091
01:03:09,358 --> 01:03:13,980
all right so now our line number

1092
01:03:11,369 --> 01:03:18,869
tracking is accurate you can see that

1093
01:03:13,980 --> 01:03:20,849
it's upset about this curly brace so it

1094
01:03:18,869 --> 01:03:23,099
says it's unexpected which means it was

1095
01:03:20,849 --> 01:03:28,320
trying to it was trying to get something

1096
01:03:23,099 --> 01:03:32,700
else in its place and we should try and

1097
01:03:28,320 --> 01:03:35,338
figure out what that thing is also now I

1098
01:03:32,699 --> 01:03:38,069
think about it when you look at this

1099
01:03:35,338 --> 01:03:40,289
error message it says unexpected token

1100
01:03:38,070 --> 01:03:41,789
type is that actually the best error

1101
01:03:40,289 --> 01:03:44,099
message that we could be giving there

1102
01:03:41,789 --> 01:03:46,769
because if that's actually coming from

1103
01:03:44,099 --> 01:03:48,720
require token instead of saying

1104
01:03:46,769 --> 01:03:52,079
unexpected token type what we probably

1105
01:03:48,719 --> 01:03:55,669
should say is you know unexpected token

1106
01:03:52,079 --> 01:03:58,139
type you know expected something else

1107
01:03:55,670 --> 01:04:00,300
right like whatever it is that we

1108
01:03:58,139 --> 01:04:03,358
actually expected now the tough part

1109
01:04:00,300 --> 01:04:05,119
about that is that token type I don't

1110
01:04:03,358 --> 01:04:08,400
know that we have any way of actually

1111
01:04:05,119 --> 01:04:10,680
outputting what the token type is so

1112
01:04:08,400 --> 01:04:15,570
like if you look we don't have a string

1113
01:04:10,679 --> 01:04:17,279
for any of these token types but I'm

1114
01:04:15,570 --> 01:04:19,920
willing to go the extra mile there and

1115
01:04:17,280 --> 01:04:23,310
say look let's actually put that in here

1116
01:04:19,920 --> 01:04:24,570
so let's do a table in the way that

1117
01:04:23,309 --> 01:04:25,739
supercilious makes you do because it's

1118
01:04:24,570 --> 01:04:29,910
horrible and shouldn't be doing

1119
01:04:25,739 --> 01:04:37,949
automatically if we said get a token

1120
01:04:29,909 --> 01:04:41,679
name and say type name and we said token

1121
01:04:37,949 --> 01:04:46,088
type pass me the type and then you know

1122
01:04:41,679 --> 01:04:49,440
we'll just do a switch statements on the

1123
01:04:46,088 --> 01:04:57,278
type and have a case for each of these

1124
01:04:49,440 --> 01:05:03,818
that returns a string so that's what we

1125
01:04:57,278 --> 01:05:06,690
would do in this case and I'm gonna go

1126
01:05:03,818 --> 01:05:14,519
ahead and and do it we've got open paren

1127
01:05:06,690 --> 01:05:18,269
close paren colon semicolon asterisk

1128
01:05:14,519 --> 01:05:18,269
open bracket oops

1129
01:05:18,760 --> 01:05:39,150
closed bracket brace close brace and

1130
01:05:29,219 --> 01:05:48,000
equals four pound string identifier

1131
01:05:39,150 --> 01:06:00,700
number spacing oops

1132
01:05:48,000 --> 01:06:04,900
spacing and end of line comment this

1133
01:06:00,699 --> 01:06:14,739
game so now I just need to give those

1134
01:06:04,900 --> 01:06:18,298
things some names and a lot of them are

1135
01:06:14,739 --> 01:06:18,298
pretty simple right

1136
01:06:37,798 --> 01:06:42,518
it's weird like open parentheses in

1137
01:06:40,599 --> 01:06:44,289
closed parentheses for something that we

1138
01:06:42,518 --> 01:06:47,889
have to say so often it's such a

1139
01:06:44,289 --> 01:06:51,369
horrible phrase I guess we should just

1140
01:06:47,889 --> 01:06:53,739
rename them to paren period like there

1141
01:06:51,369 --> 01:07:20,619
is no word parentheses anymore we will

1142
01:06:53,739 --> 01:07:23,528
never use it again so now what I could

1143
01:07:20,619 --> 01:07:26,019
do is actually make that require token

1144
01:07:23,528 --> 01:07:27,909
printout something more useful so when

1145
01:07:26,018 --> 01:07:30,098
it says unexpected token type it can say

1146
01:07:27,909 --> 01:07:35,318
like I actually expected this other

1147
01:07:30,099 --> 01:07:38,229
thing right and so that's pretty handy

1148
01:07:35,318 --> 01:07:41,440
because now when we look at those error

1149
01:07:38,228 --> 01:07:43,478
messages it'll give us a little bit more

1150
01:07:41,440 --> 01:07:47,499
information about what we actually want

1151
01:07:43,478 --> 01:07:49,328
so you can see here now we got this but

1152
01:07:47,498 --> 01:07:53,379
it was expecting to see the actual

1153
01:07:49,329 --> 01:07:56,440
number there and so if we go into the

1154
01:07:53,380 --> 01:07:58,088
code where that's actually happening we

1155
01:07:56,440 --> 01:08:04,690
should be able to see that we got our

1156
01:07:58,088 --> 01:08:07,960
our tokens stuff wrong and off we go so

1157
01:08:04,690 --> 01:08:11,528
you can see it's pretty obvious right we

1158
01:08:07,960 --> 01:08:16,719
had an equals and we we just never have

1159
01:08:11,528 --> 01:08:18,069
those enclosures so what I would say is

1160
01:08:16,719 --> 01:08:21,219
we aren't using enclosure anywhere else

1161
01:08:18,069 --> 01:08:24,130
so I think maybe that's actually just

1162
01:08:21,219 --> 01:08:30,819
because this is wrong and it should just

1163
01:08:24,130 --> 01:08:33,130
be that so I think maybe our parsers

1164
01:08:30,819 --> 01:08:38,849
actually correct and really what we

1165
01:08:33,130 --> 01:08:38,849
should be doing is is none of that

1166
01:08:42,970 --> 01:08:48,010
so that may just be a case of our parser

1167
01:08:45,590 --> 01:08:50,329
being right and our output being wrong

1168
01:08:48,010 --> 01:08:55,039
and that's what it actually should look

1169
01:08:50,329 --> 01:08:57,289
like right so I deleted that here and so

1170
01:08:55,039 --> 01:09:08,390
now if I recompile let's see what we get

1171
01:08:57,289 --> 01:09:09,920
for error messages now so now it's

1172
01:09:08,390 --> 01:09:13,430
actually running the import it looks

1173
01:09:09,920 --> 01:09:16,789
like so that must have been the that

1174
01:09:13,430 --> 01:09:18,320
must have been the errors that were

1175
01:09:16,789 --> 01:09:20,989
stopping us from really taking the time

1176
01:09:18,319 --> 01:09:22,399
to import more stuff we're probably just

1177
01:09:20,989 --> 01:09:30,139
importing just down to there and

1178
01:09:22,399 --> 01:09:33,639
stopping and this is great so it looks

1179
01:09:30,140 --> 01:09:41,420
like it worked exactly right because now

1180
01:09:33,640 --> 01:09:45,440
we've got we've actually got those

1181
01:09:41,420 --> 01:09:50,029
reloaded and they're correct so that

1182
01:09:45,439 --> 01:09:54,699
certainly seems like now we can rely on

1183
01:09:50,029 --> 01:09:58,460
those H HTS to be reasonable and

1184
01:09:54,699 --> 01:10:03,289
actually have the data we expect so the

1185
01:09:58,460 --> 01:10:06,560
next question is you know we did look

1186
01:10:03,289 --> 01:10:09,079
and see you know there's our there's our

1187
01:10:06,560 --> 01:10:13,280
stuff that we've reproduced looking at

1188
01:10:09,079 --> 01:10:15,949
I'm gonna close this looking at the

1189
01:10:13,279 --> 01:10:17,300
signs as they look about right now you

1190
01:10:15,949 --> 01:10:21,109
can see it doesn't update the size till

1191
01:10:17,300 --> 01:10:24,470
after the file handles get closed um the

1192
01:10:21,109 --> 01:10:25,789
only thing I'm wondering about is you

1193
01:10:24,470 --> 01:10:28,909
know let's take a look at what happens

1194
01:10:25,789 --> 01:10:33,519
we rewrite those Haq T's again so here's

1195
01:10:28,909 --> 01:10:40,989
our tags and I'm gonna go ahead and copy

1196
01:10:33,520 --> 01:10:43,700
base gamedev hht to base game backup and

1197
01:10:40,989 --> 01:10:46,939
overwrite it and what I'm going to do

1198
01:10:43,699 --> 01:10:49,579
now is force it to resave that file so

1199
01:10:46,939 --> 01:10:51,199
I'm gonna go ahead and say save hht s

1200
01:10:49,579 --> 01:10:54,350
here and then

1201
01:10:51,199 --> 01:10:57,559
close it and what I want to see is did

1202
01:10:54,350 --> 01:10:58,880
it change the file at all right did

1203
01:10:57,560 --> 01:11:01,730
anything happen so I'm going to load

1204
01:10:58,880 --> 01:11:05,859
milled and I'm gonna ask it to do that

1205
01:11:01,729 --> 01:11:10,029
diff just to see what it comes up with

1206
01:11:05,859 --> 01:11:13,009
so if I go into handmade and I put

1207
01:11:10,029 --> 01:11:16,399
inside the tags directory I say here's

1208
01:11:13,010 --> 01:11:20,470
the old one here's the new one give me

1209
01:11:16,399 --> 01:11:24,469
the comparison and see what it finds

1210
01:11:20,470 --> 01:11:26,659
there's nothing that's what I hope for

1211
01:11:24,470 --> 01:11:32,000
so now let's go in and try something a

1212
01:11:26,659 --> 01:11:34,699
little more audacious here so if I was

1213
01:11:32,000 --> 01:11:39,560
to select one of these guys and say all

1214
01:11:34,699 --> 01:11:44,389
right here's let's edit the tags on this

1215
01:11:39,560 --> 01:11:47,390
thing so here's the the default base on

1216
01:11:44,390 --> 01:11:51,200
this guy you know I don't where is it

1217
01:11:47,390 --> 01:11:53,980
though I don't actually see this why

1218
01:11:51,199 --> 01:11:53,979
don't I see it

1219
01:11:59,359 --> 01:12:08,689
that's a little weird right hmm so we've

1220
01:12:05,838 --> 01:12:12,769
got some kind of a bug there even though

1221
01:12:08,689 --> 01:12:16,820
this looks correct like it's a default

1222
01:12:12,769 --> 01:12:19,659
alignment point and the sprite is there

1223
01:12:16,819 --> 01:12:19,658
there it is

1224
01:12:23,828 --> 01:12:35,958
for whatever reason no matter what I do

1225
01:12:26,448 --> 01:12:42,529
I don't actually see oh just because the

1226
01:12:35,958 --> 01:12:45,260
head was just too large to see weird all

1227
01:12:42,529 --> 01:12:47,929
right so anyway let's let's see what we

1228
01:12:45,260 --> 01:12:49,609
can do here so if I go ahead and and

1229
01:12:47,929 --> 01:12:52,550
start by trying to edit these guys a

1230
01:12:49,609 --> 01:12:56,659
little bit down I'm gonna add the base

1231
01:12:52,550 --> 01:13:01,729
of neck point I think that's how these

1232
01:12:56,658 --> 01:13:04,698
guys snap together it's top of head

1233
01:13:01,729 --> 01:13:07,249
snaps no it's just default

1234
01:13:04,698 --> 01:13:12,469
I guess there's and this goes to the

1235
01:13:07,248 --> 01:13:14,988
parent right so anyway yeah the

1236
01:13:12,469 --> 01:13:16,309
alignment point on this dude and the

1237
01:13:14,988 --> 01:13:18,738
alignment point on this dude are

1238
01:13:16,309 --> 01:13:20,809
supposed to line up so if I set the

1239
01:13:18,738 --> 01:13:22,368
basis neck it's that green point it

1240
01:13:20,809 --> 01:13:24,800
would go like something like right there

1241
01:13:22,368 --> 01:13:26,389
right and then if I set the default

1242
01:13:24,800 --> 01:13:29,418
point on this it would go something like

1243
01:13:26,389 --> 01:13:32,479
right there and so I think everything's

1244
01:13:29,418 --> 01:13:33,858
fine right and then the fact that that

1245
01:13:32,479 --> 01:13:35,989
sticks into the ground is something that

1246
01:13:33,859 --> 01:13:38,149
we're gonna have to now look at because

1247
01:13:35,988 --> 01:13:41,928
we want to actually make our sprites

1248
01:13:38,149 --> 01:13:45,349
have the correct Z bias to prevent that

1249
01:13:41,929 --> 01:13:47,179
from happening right but it does look

1250
01:13:45,349 --> 01:13:49,998
like that's pretty straightforward

1251
01:13:47,179 --> 01:13:54,038
I think we need a better way I think we

1252
01:13:49,998 --> 01:13:56,868
need to be able to turn off temporarily

1253
01:13:54,038 --> 01:14:00,708
some of this stuff because it's hard to

1254
01:13:56,868 --> 01:14:02,148
see when you win everything stacked on

1255
01:14:00,708 --> 01:14:05,179
top of each other we would like to be

1256
01:14:02,149 --> 01:14:06,800
able to look at the points in isolation

1257
01:14:05,179 --> 01:14:08,748
little bit better so I think we want

1258
01:14:06,800 --> 01:14:11,418
something that says you know don't draw

1259
01:14:08,748 --> 01:14:13,288
you know when I turn this off don't draw

1260
01:14:11,418 --> 01:14:14,788
the things that are attached to it

1261
01:14:13,288 --> 01:14:20,069
suppose there's an easy way to do that I

1262
01:14:14,788 --> 01:14:22,380
can just set it to default right and so

1263
01:14:20,069 --> 01:14:25,229
then as I as I set this you know I can

1264
01:14:22,380 --> 01:14:27,960
set my my ground point which is

1265
01:14:25,229 --> 01:14:30,718
somewhere like there and then I can set

1266
01:14:27,960 --> 01:14:33,210
my my attachment point which is you know

1267
01:14:30,719 --> 01:14:35,309
somewhere like like there and then I can

1268
01:14:33,210 --> 01:14:37,230
turn this back but that's a little bit

1269
01:14:35,309 --> 01:14:39,389
of a janky way to do that so I don't

1270
01:14:37,229 --> 01:14:41,729
know you know we'll see

1271
01:14:39,389 --> 01:14:45,328
so anyway if I was to set all of these

1272
01:14:41,729 --> 01:14:46,738
so the hero would be proper now what

1273
01:14:45,328 --> 01:14:50,308
would we get oh and you know what that's

1274
01:14:46,738 --> 01:14:51,750
the wrong direction to that's so if I

1275
01:14:50,309 --> 01:14:54,029
push the right direction

1276
01:14:51,750 --> 01:14:57,059
I'm getting this if I push the left

1277
01:14:54,029 --> 01:15:00,448
direction I'm getting that so the head

1278
01:14:57,059 --> 01:15:02,969
looks like it's also incorrectly coming

1279
01:15:00,448 --> 01:15:05,609
in there so the fist is correctly

1280
01:15:02,969 --> 01:15:07,980
updating the direction and I think the

1281
01:15:05,609 --> 01:15:10,738
body is too but the head isn't do we

1282
01:15:07,979 --> 01:15:15,689
have a bug in our head import code or is

1283
01:15:10,738 --> 01:15:17,959
that just wrong in the file let me take

1284
01:15:15,689 --> 01:15:17,960
a look

1285
01:15:23,250 --> 01:15:30,300
so here's the oops sources directory for

1286
01:15:27,569 --> 01:15:34,170
bass game here's everything that comes

1287
01:15:30,300 --> 01:15:38,640
into the base game the art files here

1288
01:15:34,170 --> 01:15:44,300
and so if we look at these we've got the

1289
01:15:38,640 --> 01:15:44,300
head hero is what we're looking for

1290
01:15:53,560 --> 01:15:56,700
they'll load that up

1291
01:16:07,340 --> 01:16:17,520
so here is the hero head it's oh so it's

1292
01:16:13,890 --> 01:16:22,530
just wrong so the files wrong not us

1293
01:16:17,520 --> 01:16:26,370
looks like and so if I go in here and

1294
01:16:22,529 --> 01:16:29,340
and look at that what you could see is

1295
01:16:26,369 --> 01:16:32,640
that if I were to open a different head

1296
01:16:29,340 --> 01:16:35,250
file so if I were to go load like head

1297
01:16:32,640 --> 01:16:37,860
orphan a one for example you can see

1298
01:16:35,250 --> 01:16:41,670
it's it's supposed to be right up left

1299
01:16:37,859 --> 01:16:44,279
down so this is actually just backwards

1300
01:16:41,670 --> 01:16:48,440
so we just need that art file to be

1301
01:16:44,279 --> 01:16:51,210
fixed I'll make a note of that so we can

1302
01:16:48,439 --> 01:16:55,199
get updated art files which we're gonna

1303
01:16:51,210 --> 01:17:00,199
want to do at some point here anyway let

1304
01:16:55,199 --> 01:17:00,199
me go ahead and just put that in here

1305
01:17:07,099 --> 01:17:15,889
and we can deal with that later okay so

1306
01:17:13,488 --> 01:17:18,979
that's good that's not our fault so we

1307
01:17:15,889 --> 01:17:20,960
don't really have to belabor that any

1308
01:17:18,979 --> 01:17:24,888
longer that'll just be an art file

1309
01:17:20,960 --> 01:17:26,929
update that will fix it and so the rest

1310
01:17:24,889 --> 01:17:29,539
of the stuff we should be able to do now

1311
01:17:26,929 --> 01:17:31,099
- if we wanted to so for example well

1312
01:17:29,539 --> 01:17:34,639
you know what let's not push our luck

1313
01:17:31,099 --> 01:17:36,319
I'm gonna hit save HH tees and now I'm

1314
01:17:34,639 --> 01:17:39,469
gonna see whether or not that actually

1315
01:17:36,319 --> 01:17:42,380
worked so if I go over to meld and i

1316
01:17:39,469 --> 01:17:44,750
refresh it I should have gotten some

1317
01:17:42,380 --> 01:17:46,880
updates although it doesn't look like I

1318
01:17:44,750 --> 01:17:51,020
did all right so we so we are still

1319
01:17:46,880 --> 01:17:54,050
screwed up a little bit here am I am I

1320
01:17:51,020 --> 01:17:55,730
wrong meaning we we did not see these

1321
01:17:54,050 --> 01:17:59,029
files change and these files should have

1322
01:17:55,729 --> 01:18:01,250
changed so what so we're gonna have to

1323
01:17:59,029 --> 01:18:06,800
step through that code path and see why

1324
01:18:01,250 --> 01:18:09,078
we're not updating a little lineman

1325
01:18:06,800 --> 01:18:10,610
points there in that case I guess is

1326
01:18:09,078 --> 01:18:12,618
what should have happened did we even

1327
01:18:10,609 --> 01:18:14,960
rewrite the file or maybe I maybe those

1328
01:18:12,618 --> 01:18:18,618
buttons don't work so we didn't even

1329
01:18:14,960 --> 01:18:20,630
rewrite the file so it looks like those

1330
01:18:18,618 --> 01:18:29,029
buttons aren't quite hooked up the way I

1331
01:18:20,630 --> 01:18:31,969
would expect so let's take a look so

1332
01:18:29,029 --> 01:18:36,828
when you hit save all changes which i

1333
01:18:31,969 --> 01:18:42,170
think is what would happen there yeah so

1334
01:18:36,828 --> 01:18:44,590
when you hit save all changes it should

1335
01:18:42,170 --> 01:18:49,819
call synchronized asset file changes

1336
01:18:44,590 --> 01:18:52,039
which when passed true will would do

1337
01:18:49,819 --> 01:18:54,738
save changes to HST so that should

1338
01:18:52,039 --> 01:18:59,738
happen I would also like let's also make

1339
01:18:54,738 --> 01:18:59,738
this be a little bit more explicit here

1340
01:19:04,408 --> 01:19:10,198
like some kind of positive confirmation

1341
01:19:06,819 --> 01:19:10,198
that we saved the thing out

1342
01:19:13,979 --> 01:19:20,369
we basically need some way of getting

1343
01:19:16,538 --> 01:19:20,368
like a time or something

1344
01:19:28,170 --> 01:19:32,020
so I don't really have any good way to

1345
01:19:30,460 --> 01:19:35,079
mark this but you know what I'm saying

1346
01:19:32,020 --> 01:19:44,949
right like I want to be able to do

1347
01:19:35,079 --> 01:19:49,559
something like this so that we can

1348
01:19:44,948 --> 01:19:49,559
actually know that we wrote something

1349
01:20:00,689 --> 01:20:11,649
like the time and then we say later

1350
01:20:06,010 --> 01:20:16,750
something else right so yeah not quite

1351
01:20:11,649 --> 01:20:21,519
what I would have hoped for I really

1352
01:20:16,750 --> 01:20:29,020
don't know what to put in there I guess

1353
01:20:21,520 --> 01:20:38,560
for now I could do something stupid like

1354
01:20:29,020 --> 01:20:40,449
this and maybe in here we could have you

1355
01:20:38,560 --> 01:20:42,160
know some kind of thing that we

1356
01:20:40,448 --> 01:20:47,409
temporarily I don't know I'm just making

1357
01:20:42,159 --> 01:20:49,389
this up and that way every time we save

1358
01:20:47,409 --> 01:20:51,789
it will give us positive confirmation

1359
01:20:49,390 --> 01:20:53,969
that we actually did save you know what

1360
01:20:51,789 --> 01:20:53,969
I mean

1361
01:21:00,250 --> 01:21:06,380
that seems like a good idea

1362
01:21:02,420 --> 01:21:10,368
so in here when we do Save Changes to H

1363
01:21:06,380 --> 01:21:27,590
HTS maybe I can you know and you know

1364
01:21:10,368 --> 01:21:29,509
what I could do to is like this so right

1365
01:21:27,590 --> 01:21:31,460
now this is just a really crude way of

1366
01:21:29,510 --> 01:21:33,590
me making sure that I know when I click

1367
01:21:31,460 --> 01:21:34,539
that button that it actually did what I

1368
01:21:33,590 --> 01:21:37,369
think it did

1369
01:21:34,539 --> 01:21:40,939
so that we can start debugging it so

1370
01:21:37,368 --> 01:21:44,539
yeah when I come through here and you

1371
01:21:40,939 --> 01:21:46,879
know it told me it loaded there's no

1372
01:21:44,539 --> 01:21:50,988
errors which is good I do save it did

1373
01:21:46,880 --> 01:21:54,679
save right and so I want to know now why

1374
01:21:50,988 --> 01:21:59,750
I'm not getting any meld ifs there let

1375
01:21:54,679 --> 01:22:03,250
me actually reload that don't know why I

1376
01:21:59,750 --> 01:22:05,889
got rid of that it would be nice if it

1377
01:22:03,250 --> 01:22:12,139
remembered what my previous ones were

1378
01:22:05,889 --> 01:22:12,560
doesn't have a recent menu does it there

1379
01:22:12,139 --> 01:22:18,440
we go

1380
01:22:12,560 --> 01:22:22,280
so I'd like to know what's going on with

1381
01:22:18,439 --> 01:22:25,729
this and why it's not receiving those

1382
01:22:22,279 --> 01:22:27,559
things if I go through here to you know

1383
01:22:25,729 --> 01:22:30,019
one of these things for the alignment

1384
01:22:27,560 --> 01:22:31,820
points let me just go ahead and and do

1385
01:22:30,020 --> 01:22:34,610
sort of similar operation to what I did

1386
01:22:31,819 --> 01:22:37,759
before right I'll just moving this

1387
01:22:34,609 --> 01:22:41,960
around like that or something so now I

1388
01:22:37,760 --> 01:22:45,369
want that to save I hit save and it's

1389
01:22:41,960 --> 01:22:51,078
not saving oh wait

1390
01:22:45,368 --> 01:22:53,238
that's not true we just don't increment

1391
01:22:51,078 --> 01:22:56,658
that number so there we go

1392
01:22:53,238 --> 01:22:58,578
so yeah for some reason that's not doing

1393
01:22:56,658 --> 01:23:00,138
anything and we want to step through

1394
01:22:58,578 --> 01:23:04,819
there and now find out why we're not

1395
01:23:00,139 --> 01:23:05,300
getting those updates that we had gotten

1396
01:23:04,819 --> 01:23:07,399
before

1397
01:23:05,300 --> 01:23:09,679
so something weird is happening where

1398
01:23:07,399 --> 01:23:11,958
it's not actually updating the alignment

1399
01:23:09,679 --> 01:23:17,239
points the way that we would expect

1400
01:23:11,958 --> 01:23:19,788
now in the code where that's happening

1401
01:23:17,238 --> 01:23:22,089
it is a bit subtle right because the way

1402
01:23:19,788 --> 01:23:25,609
this works is it's actually doing a diff

1403
01:23:22,090 --> 01:23:30,439
like this to see if the memory is equal

1404
01:23:25,609 --> 01:23:34,518
or not between what we read in and you

1405
01:23:30,439 --> 01:23:39,939
know yeah well what we read in what we

1406
01:23:34,519 --> 01:23:39,939
need to output I interestingly enough

1407
01:23:41,109 --> 01:23:51,708
looking at the way this code works it

1408
01:23:49,429 --> 01:23:53,929
does we're not actually outputting the

1409
01:23:51,708 --> 01:23:56,328
point here which we should this should

1410
01:23:53,929 --> 01:23:58,550
be causing a different bug than it is I

1411
01:23:56,328 --> 01:24:00,380
guess it's one way to say it it should

1412
01:23:58,550 --> 01:24:05,869
be deleting the alignment point and not

1413
01:24:00,380 --> 01:24:08,269
replace you with anything but that's not

1414
01:24:05,868 --> 01:24:09,408
what we're actually seeing so that's

1415
01:24:08,269 --> 01:24:13,309
kind of weird

1416
01:24:09,408 --> 01:24:16,458
I do want to actually fix this bug as

1417
01:24:13,309 --> 01:24:18,650
well but this is not gonna actually

1418
01:24:16,458 --> 01:24:21,948
affect us at the moment because we have

1419
01:24:18,649 --> 01:24:32,779
a different bug than this right but what

1420
01:24:21,948 --> 01:24:46,458
I want is this code to be reusable so if

1421
01:24:32,779 --> 01:24:50,868
in here you say this I suppose and then

1422
01:24:46,458 --> 01:24:53,809
you give it an alignment point it'll

1423
01:24:50,868 --> 01:24:55,998
output the alignment point that way I

1424
01:24:53,809 --> 01:24:57,979
could just recall that in here and add

1425
01:24:55,998 --> 01:25:00,319
the one thing that was missing which is

1426
01:24:57,979 --> 01:25:04,849
after you do the ignore I want to output

1427
01:25:00,319 --> 01:25:07,009
the alignment point afresh right that

1428
01:25:04,849 --> 01:25:09,248
should have been what it was saying

1429
01:25:07,010 --> 01:25:09,248
before

1430
01:25:12,270 --> 01:25:17,099
[Music]

1431
01:25:14,899 --> 01:25:18,779
and off you go

1432
01:25:17,099 --> 01:25:22,979
so when we read one of these things in

1433
01:25:18,779 --> 01:25:26,429
like this we want to test to see whether

1434
01:25:22,979 --> 01:25:29,190
or not we should write it out or not the

1435
01:25:26,429 --> 01:25:32,519
only thing that I'm not sure how we want

1436
01:25:29,189 --> 01:25:34,169
to do here is when we read this thing in

1437
01:25:32,519 --> 01:25:37,498
we also have one other thing to do which

1438
01:25:34,170 --> 01:25:40,710
is we need to test and see whether or

1439
01:25:37,498 --> 01:25:46,170
not it should be deleted so if the one

1440
01:25:40,710 --> 01:25:47,819
we if we're writing the hhd then we want

1441
01:25:46,170 --> 01:25:49,710
to look to see whether this one is right

1442
01:25:47,819 --> 01:25:53,399
or wrong so it's basically a merge

1443
01:25:49,710 --> 01:25:55,288
operation we look to see if it's exactly

1444
01:25:53,399 --> 01:25:56,549
the same then we just use it exactly the

1445
01:25:55,288 --> 01:25:58,768
way the user inputted it if it's

1446
01:25:56,550 --> 01:26:02,998
different then we want to do is say look

1447
01:25:58,769 --> 01:26:06,570
is the point type actually that we have

1448
01:26:02,998 --> 01:26:08,698
like our point type is that valid

1449
01:26:06,569 --> 01:26:10,618
and and so you know this right here

1450
01:26:08,698 --> 01:26:15,359
actually would be the thing we would

1451
01:26:10,618 --> 01:26:16,618
want to look at right so if that's valid

1452
01:26:15,359 --> 01:26:18,238
if the memory is equal right out if it's

1453
01:26:16,618 --> 01:26:20,848
not what we want to do is say all right

1454
01:26:18,238 --> 01:26:24,868
let's let's overwrite the one that we

1455
01:26:20,849 --> 01:26:29,328
read with the one that we have and then

1456
01:26:24,868 --> 01:26:37,589
we would say if that is an actual point

1457
01:26:29,328 --> 01:26:42,658
out put it otherwise don't like that

1458
01:26:37,590 --> 01:26:48,479
right I think that's what we actually

1459
01:26:42,658 --> 01:26:52,618
want to say again shouldn't have been

1460
01:26:48,479 --> 01:26:57,179
the bug we had so something's still

1461
01:26:52,618 --> 01:27:00,118
wrong and I just don't know what we're

1462
01:26:57,179 --> 01:27:03,029
gonna need to pass the grid X grid Y and

1463
01:27:00,118 --> 01:27:10,618
point index here but that's pretty easy

1464
01:27:03,029 --> 01:27:13,978
to do for obvious reasons good X Y point

1465
01:27:10,618 --> 01:27:16,670
index because in both places we know

1466
01:27:13,979 --> 01:27:16,670
what that is

1467
01:27:17,969 --> 01:27:24,729
so yeah really kind of weird because you

1468
01:27:22,569 --> 01:27:27,728
know yes there was a bug there no that

1469
01:27:24,729 --> 01:27:29,139
bug is not the bug that was actually

1470
01:27:27,729 --> 01:27:31,300
happening the bug we're getting is

1471
01:27:29,139 --> 01:27:34,090
nothing happens right

1472
01:27:31,300 --> 01:27:37,989
so it's parsing these and deciding that

1473
01:27:34,090 --> 01:27:39,909
it doesn't need to change them or that

1474
01:27:37,988 --> 01:27:46,058
it doesn't need to insert any so for

1475
01:27:39,908 --> 01:27:53,768
example it's it's getting here and it

1476
01:27:46,059 --> 01:27:55,840
doesn't have any unprocessed right so

1477
01:27:53,769 --> 01:28:03,880
it's like you never set this or

1478
01:27:55,840 --> 01:28:05,439
something yeah so I don't know so we're

1479
01:28:03,880 --> 01:28:07,630
gonna have to debug that let me just run

1480
01:28:05,439 --> 01:28:09,099
it one more time and get the current

1481
01:28:07,630 --> 01:28:11,349
state now that I've changed the code of

1482
01:28:09,099 --> 01:28:12,969
of what the bug man if it's so fast and

1483
01:28:11,349 --> 01:28:17,489
with that but then we gotta fix that

1484
01:28:12,969 --> 01:28:28,149
right I figure out what's going on there

1485
01:28:17,488 --> 01:28:31,328
so if I come through here and should

1486
01:28:28,149 --> 01:28:33,429
really change the way this works to and

1487
01:28:31,328 --> 01:28:35,529
tweak this right so you know I've set

1488
01:28:33,429 --> 01:28:37,809
this to something totally different

1489
01:28:35,529 --> 01:28:41,618
both of these are you know totally

1490
01:28:37,809 --> 01:28:49,559
different now and I asked to save it it

1491
01:28:41,618 --> 01:28:54,808
saves and you know let's see what we got

1492
01:28:49,559 --> 01:28:57,788
so not sure what to make of that so

1493
01:28:54,809 --> 01:29:00,820
fixing that other problem appears to

1494
01:28:57,788 --> 01:29:03,458
have actually changed it which I don't

1495
01:29:00,819 --> 01:29:05,109
know why it would have because that

1496
01:29:03,458 --> 01:29:07,300
wasn't really the bug that I was seeing

1497
01:29:05,109 --> 01:29:10,538
so I'm not sure what's going on there

1498
01:29:07,300 --> 01:29:12,130
makes me a little bit nervous I will

1499
01:29:10,538 --> 01:29:14,768
also say for some reason we're getting

1500
01:29:12,130 --> 01:29:21,368
extra whitespace in here I think that's

1501
01:29:14,769 --> 01:29:23,380
because we're not sort of eating up that

1502
01:29:21,368 --> 01:29:28,179
whitespace it's getting doubly copied in

1503
01:29:23,380 --> 01:29:31,329
so if we look at the the code here that

1504
01:29:28,179 --> 01:29:34,779
that copies that out we should probably

1505
01:29:31,329 --> 01:29:37,659
do is when we do this this output point

1506
01:29:34,779 --> 01:29:39,550
here we should probably say look since

1507
01:29:37,659 --> 01:29:41,739
there was already going to be whitespace

1508
01:29:39,550 --> 01:29:42,010
after the semicolon if the user wanted

1509
01:29:41,739 --> 01:29:44,159
it

1510
01:29:42,010 --> 01:29:47,980
we should not output whitespace

1511
01:29:44,159 --> 01:29:51,460
ourselves and so the only time we should

1512
01:29:47,979 --> 01:29:56,619
actually output whitespace in either

1513
01:29:51,460 --> 01:30:00,430
case I suppose is also I guess is it

1514
01:29:56,619 --> 01:30:01,750
should also be further over yeah that

1515
01:30:00,430 --> 01:30:06,670
should be actually something that's

1516
01:30:01,750 --> 01:30:10,989
controlled by insertion only so in the

1517
01:30:06,670 --> 01:30:13,810
places where we go to output these like

1518
01:30:10,989 --> 01:30:25,449
this here's where we would actually do

1519
01:30:13,810 --> 01:30:31,360
that something like that right okay so

1520
01:30:25,449 --> 01:30:33,970
let me close this let's save this in

1521
01:30:31,359 --> 01:30:39,009
here I'm gonna go ahead and and re save

1522
01:30:33,970 --> 01:30:41,680
the original and so now we should be

1523
01:30:39,010 --> 01:30:46,140
identical again and I'm gonna run the

1524
01:30:41,680 --> 01:30:52,270
same test where I go in here and let's

1525
01:30:46,140 --> 01:30:55,900
grab this dude and and mess with this a

1526
01:30:52,270 --> 01:30:59,260
little bit and then I'm gonna go here

1527
01:30:55,899 --> 01:31:03,159
and hit save HH tees didn't get any

1528
01:30:59,260 --> 01:31:07,930
errors and so now if I come over here we

1529
01:31:03,159 --> 01:31:10,930
get files identical right so again bug

1530
01:31:07,930 --> 01:31:13,210
is back so what's going on there right

1531
01:31:10,930 --> 01:31:14,920
why is it that something like why did it

1532
01:31:13,210 --> 01:31:18,939
work last time and not work this time

1533
01:31:14,920 --> 01:31:20,440
right that's very confusing and I'm not

1534
01:31:18,939 --> 01:31:23,399
sure what's going on there it doesn't

1535
01:31:20,439 --> 01:31:23,399
make a whole lot of sense to me

1536
01:31:23,579 --> 01:31:29,949
similarly if I reload it looks like it

1537
01:31:26,260 --> 01:31:32,500
snapped back so we we can actually

1538
01:31:29,949 --> 01:31:34,899
verify that you know it's not just some

1539
01:31:32,500 --> 01:31:38,649
kind of weird other situation it is

1540
01:31:34,899 --> 01:31:41,309
actually oh not updating the HH tees

1541
01:31:38,649 --> 01:31:41,309
with my changes

1542
01:31:47,769 --> 01:31:53,899
all right so let's go in there and find

1543
01:31:50,269 --> 01:31:57,878
out what's going on I'm gonna go do this

1544
01:31:53,899 --> 01:32:03,669
in debug mode and step into that code I

1545
01:31:57,878 --> 01:32:12,618
wonder can I just switch to debug mode

1546
01:32:03,668 --> 01:32:14,958
directly so if I do this I've changed

1547
01:32:12,618 --> 01:32:18,049
those values right

1548
01:32:14,958 --> 01:32:23,238
if I now rebuild the code in debug mode

1549
01:32:18,050 --> 01:32:28,248
so I just say look the build it's debug

1550
01:32:23,238 --> 01:32:38,319
now thank you can I and like the frame

1551
01:32:28,248 --> 01:32:38,319
rate slows back down again Network Oh

1552
01:32:40,909 --> 01:32:44,649
I had compiled error there

1553
01:32:53,350 --> 01:32:59,599
so what did I do wrong

1554
01:32:56,310 --> 01:32:59,599
[Music]

1555
01:33:02,859 --> 01:33:12,969
aha much better

1556
01:33:09,949 --> 01:33:15,109
all right sorry about that I

1557
01:33:12,970 --> 01:33:16,820
accidentally yeah one of the problems of

1558
01:33:15,109 --> 01:33:19,369
using this interim build a for coder

1559
01:33:16,819 --> 01:33:21,349
that is it doesn't make it easy to know

1560
01:33:19,369 --> 01:33:23,119
whether you've got errors all right so

1561
01:33:21,350 --> 01:33:23,810
let's say if the h h T's again and see

1562
01:33:23,119 --> 01:33:27,159
what happens

1563
01:33:23,810 --> 01:33:30,350
there's my save h HT let's look at here

1564
01:33:27,159 --> 01:33:32,029
so that time it actually did work I

1565
01:33:30,350 --> 01:33:34,160
don't understand how we're getting that

1566
01:33:32,029 --> 01:33:36,439
bug though it doesn't make any sense

1567
01:33:34,159 --> 01:33:37,970
how is it that it works sometimes and

1568
01:33:36,439 --> 01:33:40,099
not other times doesn't really make a

1569
01:33:37,970 --> 01:33:43,070
lot of sense I'm still nervous we just

1570
01:33:40,100 --> 01:33:45,140
have a bug like why did that work let's

1571
01:33:43,069 --> 01:33:51,319
try it fresh again because I'm just

1572
01:33:45,140 --> 01:33:57,260
trustful I'm very distrustful now with

1573
01:33:51,319 --> 01:34:00,829
that so if I do reload oh cool yeah out

1574
01:33:57,260 --> 01:34:04,190
of tag space that makes sense too that's

1575
01:34:00,829 --> 01:34:05,479
a bug we'll have to fix I'm just

1576
01:34:04,189 --> 01:34:09,949
trustful now I feel like that's kind of

1577
01:34:05,479 --> 01:34:11,299
buggy but all right you know whatever so

1578
01:34:09,949 --> 01:34:16,989
let's double check and see what's going

1579
01:34:11,300 --> 01:34:16,989
on here if I grab one of these now and

1580
01:34:21,929 --> 01:34:25,139
change it around

1581
01:34:30,359 --> 01:34:34,929
so yeah it definitely didn't save it

1582
01:34:32,680 --> 01:34:39,400
right because that should have produced

1583
01:34:34,930 --> 01:34:41,140
a difference so it's almost like the

1584
01:34:39,399 --> 01:34:43,269
first time you save it it doesn't do

1585
01:34:41,140 --> 01:34:46,270
anything in the second time it does or

1586
01:34:43,270 --> 01:34:50,370
something weird like this right so now

1587
01:34:46,270 --> 01:34:52,990
it's actually updated to be what I said

1588
01:34:50,369 --> 01:34:55,029
so it's kind of but it's kind of busted

1589
01:34:52,989 --> 01:34:56,739
we're not quite there yet right I

1590
01:34:55,029 --> 01:34:58,630
thought we were sort of there but we're

1591
01:34:56,739 --> 01:35:00,489
not quite there because something weird

1592
01:34:58,630 --> 01:35:02,020
is happening with the way that we're

1593
01:35:00,489 --> 01:35:03,489
merging these and to be fair we're doing

1594
01:35:02,020 --> 01:35:05,440
something fairly complicated here

1595
01:35:03,489 --> 01:35:06,579
probably we shouldn't have done but it

1596
01:35:05,439 --> 01:35:11,259
was just an experiment to see if it

1597
01:35:06,579 --> 01:35:13,239
would work and it kind of does so it's

1598
01:35:11,260 --> 01:35:15,640
not like we're completely failing but

1599
01:35:13,239 --> 01:35:17,439
we're just not doing a very good job so

1600
01:35:15,640 --> 01:35:23,050
for some reason we're not able to

1601
01:35:17,439 --> 01:35:25,179
actually get a reliable change occurring

1602
01:35:23,050 --> 01:35:28,270
there when we go through and process

1603
01:35:25,180 --> 01:35:31,119
these HH T's and we're supposed to be

1604
01:35:28,270 --> 01:35:33,310
saving them out we're going through here

1605
01:35:31,119 --> 01:35:36,279
and we're getting to the point where we

1606
01:35:33,310 --> 01:35:40,000
should be triggering this memory is

1607
01:35:36,279 --> 01:35:41,859
equal false case so in here and we

1608
01:35:40,000 --> 01:35:46,359
should be calling this out point every

1609
01:35:41,859 --> 01:35:50,909
time but for some reason that doesn't

1610
01:35:46,359 --> 01:35:57,519
seem to happen and I don't know why

1611
01:35:50,909 --> 01:36:00,159
right so this is the H HT and you know

1612
01:35:57,520 --> 01:36:03,700
if I go ahead and and overwrite the one

1613
01:36:00,159 --> 01:36:11,789
that we've got right so now they're

1614
01:36:03,699 --> 01:36:18,130
identical I run it I select one of these

1615
01:36:11,789 --> 01:36:23,800
pieces here I modify it somehow right I

1616
01:36:18,130 --> 01:36:26,319
go back and I hit save and that first

1617
01:36:23,800 --> 01:36:32,310
time it definitely doesn't save right I

1618
01:36:26,319 --> 01:36:32,309
click it again nothing

1619
01:36:33,050 --> 01:36:38,789
so it seems like there's some kinda like

1620
01:36:36,750 --> 01:36:41,340
uninitialized variable or just ran up

1621
01:36:38,789 --> 01:36:43,949
thinking it right because I didn't touch

1622
01:36:41,340 --> 01:36:47,150
anything but I saved the thing like a

1623
01:36:43,949 --> 01:36:51,119
couple times and then this time it works

1624
01:36:47,149 --> 01:36:54,089
right so if something super weird is

1625
01:36:51,119 --> 01:36:54,659
going on there and I have no idea what

1626
01:36:54,090 --> 01:36:56,579
it is

1627
01:36:54,659 --> 01:36:59,250
and so we're gonna have to drill down to

1628
01:36:56,579 --> 01:37:02,819
find out what's the you know what's the

1629
01:36:59,250 --> 01:37:04,619
magic they're like what's causing this

1630
01:37:02,819 --> 01:37:07,649
to occasionally work properly in other

1631
01:37:04,619 --> 01:37:09,750
times not right and we're printing out

1632
01:37:07,649 --> 01:37:11,488
the errors so we're also not getting any

1633
01:37:09,750 --> 01:37:14,250
errors there as far as I can tell

1634
01:37:11,488 --> 01:37:17,488
meaning it's not like something

1635
01:37:14,250 --> 01:37:19,829
sporadically failing like like rewriting

1636
01:37:17,488 --> 01:37:24,659
the file or something which would be a

1637
01:37:19,829 --> 01:37:26,460
pretty reasonable thing to assume so I

1638
01:37:24,659 --> 01:37:28,349
don't know what we probably should do is

1639
01:37:26,460 --> 01:37:31,170
but we're not you know it could be that

1640
01:37:28,350 --> 01:37:34,739
this is airing out we just don't know so

1641
01:37:31,170 --> 01:37:37,399
that might be something to try as well

1642
01:37:34,738 --> 01:37:37,399
right

1643
01:37:37,760 --> 01:37:44,670
so I'm gonna go ahead and add a little

1644
01:37:40,020 --> 01:37:47,400
bit more verbose stuff there and see

1645
01:37:44,670 --> 01:37:50,730
what happens I'm gonna look at write

1646
01:37:47,399 --> 01:37:52,049
modifications to AJ as well I just want

1647
01:37:50,729 --> 01:37:55,169
to see what goes on there so that just

1648
01:37:52,050 --> 01:37:56,880
calls a bunch of write data to file that

1649
01:37:55,170 --> 01:37:59,970
part seems to be fine it's really the

1650
01:37:56,880 --> 01:38:02,659
hht that's the problem so I'm gonna put

1651
01:37:59,970 --> 01:38:02,659
an F in here

1652
01:38:32,439 --> 01:38:45,379
might do this as well so this way I'll

1653
01:38:42,408 --> 01:38:49,908
say look when we actually produce the

1654
01:38:45,380 --> 01:38:54,288
final versions thing I'm going to go

1655
01:38:49,908 --> 01:38:58,000
ahead and look and see if the changes

1656
01:38:54,288 --> 01:39:01,429
need to be written back then I will I

1657
01:38:58,000 --> 01:39:04,158
will do that if not I'll say so when we

1658
01:39:01,429 --> 01:39:06,590
go to replace a file if it replaces the

1659
01:39:04,158 --> 01:39:09,259
file I'll say we're done otherwise I'll

1660
01:39:06,590 --> 01:39:11,599
say that it failed that will just give

1661
01:39:09,260 --> 01:39:13,369
me slightly more information so I make

1662
01:39:11,599 --> 01:39:16,010
sure that I'm debugging the correct case

1663
01:39:13,368 --> 01:39:17,448
and not actually looking at pieces of

1664
01:39:16,010 --> 01:39:21,320
code that have nothing to do with the

1665
01:39:17,448 --> 01:39:23,658
error right so I'm going to go back to

1666
01:39:21,319 --> 01:39:25,460
the hht here and once again overwrite it

1667
01:39:23,658 --> 01:39:27,408
so that we get back to the known bad

1668
01:39:25,460 --> 01:39:29,599
case that seems to be failing a lot so

1669
01:39:27,408 --> 01:39:36,609
it should be easier to debug hopefully

1670
01:39:29,599 --> 01:39:36,610
I'm gonna refresh this worked right -

1671
01:39:37,118 --> 01:39:44,750
there we go

1672
01:39:38,538 --> 01:39:50,509
I wonder if meld is just bad that could

1673
01:39:44,750 --> 01:39:53,809
be as well let's find out that would be

1674
01:39:50,510 --> 01:39:57,530
depressing um I'm gonna assume it's us

1675
01:39:53,809 --> 01:40:03,829
but you never do know all right so we

1676
01:39:57,529 --> 01:40:07,939
rebuilt and now I'm gonna run and I'm

1677
01:40:03,828 --> 01:40:13,058
gonna go in here and just well you know

1678
01:40:07,939 --> 01:40:13,058
what let me save first no changes hmm

1679
01:40:14,050 --> 01:40:21,820
so that's

1680
01:40:16,958 --> 01:40:25,059
oh right because there's 2h h DS so let

1681
01:40:21,819 --> 01:40:30,518
me actually be more specific - well when

1682
01:40:25,059 --> 01:40:32,159
we say that there was no changes in the

1683
01:40:30,519 --> 01:40:38,880
import I'm gonna go ahead and actually

1684
01:40:32,158 --> 01:40:42,399
say who write so in here we'll do a

1685
01:40:38,880 --> 01:40:49,689
printf of whatever the what was the file

1686
01:40:42,399 --> 01:40:51,399
name so looking for that don't actually

1687
01:40:49,689 --> 01:40:55,949
know what it was

1688
01:40:51,399 --> 01:40:55,948
so in here when we've got the HH tees

1689
01:41:00,179 --> 01:41:06,880
hmm so I guess we don't really a store

1690
01:41:03,309 --> 01:41:09,788
that though well we do kind of know in

1691
01:41:06,880 --> 01:41:13,269
the file info though so the platform

1692
01:41:09,788 --> 01:41:16,259
file info itself would actually tell us

1693
01:41:13,269 --> 01:41:19,150
that piece of information I think

1694
01:41:16,260 --> 01:41:23,800
because base names there so we could do

1695
01:41:19,149 --> 01:41:27,518
that that seems reasonable so I could

1696
01:41:23,800 --> 01:41:32,979
just say yeah when you update this here

1697
01:41:27,519 --> 01:41:35,699
file info base name will say what was

1698
01:41:32,979 --> 01:41:35,699
supposed to add in there

1699
01:41:40,418 --> 01:41:43,078
right

1700
01:42:02,868 --> 01:42:20,149
uh so maybe we play with the color stuff

1701
01:42:07,789 --> 01:42:21,710
because why not and and there we go all

1702
01:42:20,149 --> 01:42:26,479
right let's see what's up

1703
01:42:21,710 --> 01:42:28,670
oops again let's see what we're getting

1704
01:42:26,479 --> 01:42:32,198
from our readout there and whether or

1705
01:42:28,670 --> 01:42:32,199
not it makes sense

1706
01:42:47,229 --> 01:42:55,300
so it did not like something in this

1707
01:42:49,929 --> 01:42:57,719
stream the percent s perhaps I'm not

1708
01:42:55,300 --> 01:42:57,719
sure

1709
01:43:14,829 --> 01:43:18,600
it's trying to take the length

1710
01:43:20,770 --> 01:43:24,060
of this string

1711
01:43:31,328 --> 01:43:37,719
but that should be fine because we're

1712
01:43:33,039 --> 01:43:40,090
just using base name which should always

1713
01:43:37,719 --> 01:43:47,578
be valid right and there shouldn't be

1714
01:43:40,090 --> 01:43:53,319
anything weird like there it is

1715
01:43:47,578 --> 01:43:56,250
so I'm not sure what what word would be

1716
01:43:53,319 --> 01:43:56,250
going wrong

1717
01:44:07,130 --> 01:44:10,130
hmm

1718
01:44:17,489 --> 01:44:28,050
so taking a look here at looking at the

1719
01:44:23,159 --> 01:44:35,639
size of the string the string that it's

1720
01:44:28,050 --> 01:44:39,029
getting is not valid right look looking

1721
01:44:35,640 --> 01:44:40,320
at out F here we've got we've got a

1722
01:44:39,029 --> 01:44:42,989
couple different things let's look at

1723
01:44:40,319 --> 01:44:53,969
the format specifier well of course it

1724
01:44:42,989 --> 01:45:03,000
is alright so it is a valid string

1725
01:44:53,970 --> 01:45:07,369
that's on there but it looks like when

1726
01:45:03,000 --> 01:45:07,369
it gets it it ain't valid

1727
01:45:15,708 --> 01:45:25,188
hmmm I'm gonna go ahead and go to debug

1728
01:45:23,779 --> 01:45:27,228
mode and see if I can get something a

1729
01:45:25,189 --> 01:45:29,179
little bit more specific there but it's

1730
01:45:27,229 --> 01:45:31,309
kind of a little bit weird that it's

1731
01:45:29,179 --> 01:45:33,649
having trouble parsing base name

1732
01:45:31,309 --> 01:45:37,099
I know the base names accurate because

1733
01:45:33,649 --> 01:45:41,149
we just looked at it it is null

1734
01:45:37,099 --> 01:45:48,380
terminated as far as I can tell so that

1735
01:45:41,149 --> 01:45:49,698
seems fine too and it should be valid

1736
01:45:48,380 --> 01:45:51,650
for the entire life of this function

1737
01:45:49,698 --> 01:45:56,868
there's nothing weird happening there

1738
01:45:51,649 --> 01:46:05,420
that I could think of so I'm not sure

1739
01:45:56,868 --> 01:46:14,438
what the problem is there it should be

1740
01:46:05,420 --> 01:46:14,439
totally fine to read that and yeah

1741
01:46:15,010 --> 01:46:22,380
III don't I don't quite see I don't

1742
01:46:17,979 --> 01:46:22,379
quite see it let's take a look

1743
01:46:31,970 --> 01:46:38,760
at least it's reliable and not transient

1744
01:46:35,210 --> 01:46:42,840
if we look back here now we can kind of

1745
01:46:38,760 --> 01:46:44,760
see what do we end up getting just just

1746
01:46:42,840 --> 01:46:47,279
total garbage out of the string there

1747
01:46:44,760 --> 01:46:48,930
which is a little bit weird am I just

1748
01:46:47,279 --> 01:46:55,019
doing something really stupid that I'm

1749
01:46:48,930 --> 01:46:57,570
missing if I pop out one where you can

1750
01:46:55,020 --> 01:47:06,990
see the format string percent s note

1751
01:46:57,569 --> 01:47:10,049
changes and the arglist seems right

1752
01:47:06,989 --> 01:47:10,050
[Music]

1753
01:47:15,710 --> 01:47:24,850
I don't get it right that seems correct

1754
01:47:20,170 --> 01:47:24,850
is there some sort of

1755
01:47:38,698 --> 01:47:42,788
let's just step through it I don't have

1756
01:47:41,050 --> 01:47:43,989
a better idea at the moment it's

1757
01:47:42,788 --> 01:47:45,728
probably just something stupid that I

1758
01:47:43,988 --> 01:47:47,978
have you know it's just a slow morning I

1759
01:47:45,729 --> 01:47:49,929
guess so if I come through here and I

1760
01:47:47,979 --> 01:47:52,659
look at what we're actually what it's

1761
01:47:49,929 --> 01:47:54,309
actually gonna go on in out F right here

1762
01:47:52,658 --> 01:47:56,768
we are

1763
01:47:54,309 --> 01:47:59,918
we passed the file name and line number

1764
01:47:56,769 --> 01:48:03,579
we got the destination stream there's

1765
01:47:59,918 --> 01:48:06,569
our format and then we're gonna look at

1766
01:48:03,578 --> 01:48:06,569
the argh list here

1767
01:48:11,458 --> 01:48:29,279
well actually no so that's wrong what

1768
01:48:21,219 --> 01:48:33,840
are we doing here wow that's really bad

1769
01:48:29,279 --> 01:48:39,578
so the one that takes the argh list is

1770
01:48:33,840 --> 01:48:44,519
getting called instead of the one so is

1771
01:48:39,578 --> 01:48:48,938
a VA list a care star pointer or

1772
01:48:44,519 --> 01:48:54,748
something did you see what just happened

1773
01:48:48,939 --> 01:49:00,309
there I don't know if if you caught that

1774
01:48:54,748 --> 01:49:05,559
but what just happened was it preferred

1775
01:49:00,309 --> 01:49:08,979
to call this when the final parameter

1776
01:49:05,559 --> 01:49:18,010
was a care star like that's what just

1777
01:49:08,979 --> 01:49:24,030
happened right so a VA list in this case

1778
01:49:18,010 --> 01:49:27,958
is apparently the same as a care star is

1779
01:49:24,029 --> 01:49:27,958
that really true

1780
01:49:32,050 --> 01:49:37,810
can we get some validation on that

1781
01:49:36,800 --> 01:49:43,100
please

1782
01:49:37,810 --> 01:49:46,880
where's our test project we don't have

1783
01:49:43,100 --> 01:49:53,090
our test project let's see I know we

1784
01:49:46,880 --> 01:49:55,310
made one it was called like search or

1785
01:49:53,090 --> 01:50:04,279
test or something right

1786
01:49:55,310 --> 01:50:06,280
like we had one here I just don't

1787
01:50:04,279 --> 01:50:09,279
remember where it went

1788
01:50:06,279 --> 01:50:09,279
nope

1789
01:50:09,729 --> 01:50:23,209
where is that we have one that we made

1790
01:50:14,720 --> 01:50:26,500
it was like you know just a stupid misc

1791
01:50:23,210 --> 01:50:26,500
project temp thing

1792
01:50:30,350 --> 01:50:34,579
yeah I don't know where it went I wanted

1793
01:50:32,960 --> 01:50:37,039
to do a search on that file you know

1794
01:50:34,579 --> 01:50:40,609
what I can do let me just find standard

1795
01:50:37,039 --> 01:50:45,319
aargh and see where it is because I

1796
01:50:40,609 --> 01:50:46,939
think it should be able to know that but

1797
01:50:45,319 --> 01:50:49,809
yeah I'm curious to know what that

1798
01:50:46,939 --> 01:50:49,809
actually is

1799
01:51:03,109 --> 01:51:09,259
so that's not interested oh my god

1800
01:51:12,890 --> 01:51:22,289
that is really really dangerous and not

1801
01:51:18,600 --> 01:51:30,829
what you should be doing that should be

1802
01:51:22,289 --> 01:51:30,829
a struct guys like seriously all right

1803
01:51:31,220 --> 01:51:42,560
now we know Wow

1804
01:51:43,520 --> 01:51:49,370
well that was an interesting bug not

1805
01:51:47,399 --> 01:51:52,829
what I was expecting to find certainly

1806
01:51:49,369 --> 01:51:54,329
so let's take a look here and make sure

1807
01:51:52,829 --> 01:51:58,050
that that was the only problem that we

1808
01:51:54,329 --> 01:52:09,390
were having there where is out F define

1809
01:51:58,050 --> 01:52:11,100
it is right here so I need to make sure

1810
01:52:09,390 --> 01:52:14,390
that you can't ever call those by

1811
01:52:11,100 --> 01:52:18,289
accident with overloading now we know

1812
01:52:14,390 --> 01:52:18,289
and let's try that again

1813
01:52:23,639 --> 01:52:29,310
lovely so now we can at least see what

1814
01:52:27,389 --> 01:52:30,868
we think we're writing out so we say no

1815
01:52:29,310 --> 01:52:33,719
changes in the case when there is no

1816
01:52:30,868 --> 01:52:35,819
changes and we should also now say

1817
01:52:33,719 --> 01:52:37,980
definitively if we try to save the thing

1818
01:52:35,819 --> 01:52:40,738
and there are changes you know what

1819
01:52:37,979 --> 01:52:45,809
those changes are so let's go ahead and

1820
01:52:40,738 --> 01:52:49,309
and and do that they're safe changes let

1821
01:52:45,810 --> 01:52:52,800
me go and ahead and pick one will you

1822
01:52:49,310 --> 01:52:55,679
know kind of move this around and then

1823
01:52:52,800 --> 01:53:00,150
I'll hit Save Changes it'll say base

1824
01:52:55,679 --> 01:53:08,340
game replaced so it thinks it wrote it

1825
01:53:00,149 --> 01:53:11,488
out and hey this time it did if I say it

1826
01:53:08,340 --> 01:53:14,460
again no changes so nothing nothing got

1827
01:53:11,488 --> 01:53:15,959
changed on disk so unfortunately now

1828
01:53:14,460 --> 01:53:18,719
we're at a point where I don't know if

1829
01:53:15,960 --> 01:53:24,179
things are actually getting changed

1830
01:53:18,719 --> 01:53:27,779
let's let's try again so here we'll

1831
01:53:24,179 --> 01:53:31,469
adjust this thing around like that or

1832
01:53:27,779 --> 01:53:35,789
something and then I'll hit save thinks

1833
01:53:31,469 --> 01:53:38,179
it replaced it all right so now it seems

1834
01:53:35,789 --> 01:53:41,880
to be working which is troublesome

1835
01:53:38,179 --> 01:53:43,230
I guess we'll leave it there for today

1836
01:53:41,880 --> 01:53:48,270
and we'll pick it up next weekend

1837
01:53:43,229 --> 01:53:49,439
because we're out of time but again it's

1838
01:53:48,270 --> 01:53:50,940
a little bit weird and I'm not really

1839
01:53:49,439 --> 01:53:54,899
sure exactly what's going on there so

1840
01:53:50,939 --> 01:53:56,219
I'm not I'm not psyched about that yeah

1841
01:53:54,899 --> 01:53:58,439
I don't really know what what we're

1842
01:53:56,219 --> 01:54:00,210
looking at so we'll have to we'll have

1843
01:53:58,439 --> 01:54:01,618
to be a little bit more specific going

1844
01:54:00,210 --> 01:54:03,090
forward

1845
01:54:01,618 --> 01:54:05,488
but that's okay we could do that next

1846
01:54:03,090 --> 01:54:07,199
weekend that's fine let's go to any Q&amp;A

1847
01:54:05,488 --> 01:54:13,129
as we have there that was a weird bug at

1848
01:54:07,198 --> 01:54:17,009
the end there and yeah okay V a list I

1849
01:54:13,130 --> 01:54:19,579
wouldn't have done that that way but

1850
01:54:17,010 --> 01:54:19,579
okay

1851
01:54:39,109 --> 01:54:45,170
Kevon be and this is why I don't use

1852
01:54:40,819 --> 01:54:47,920
overloading functions yeah you know

1853
01:54:45,170 --> 01:54:47,920
you're not wrong

1854
01:54:54,750 --> 01:54:58,560
wouldn't it be nice to move the old file

1855
01:54:56,829 --> 01:55:03,158
to a file name that back in the atomic

1856
01:54:58,560 --> 01:55:06,340
fireplace yeah it might be the problem

1857
01:55:03,158 --> 01:55:09,448
is what you do with the other file name

1858
01:55:06,340 --> 01:55:21,239
dot back that's there delete that I

1859
01:55:09,448 --> 01:55:21,238
guess you know I don't know

1860
01:56:09,710 --> 01:56:18,599
how awesome would it be if windy but

1861
01:56:12,269 --> 01:56:21,389
preview had trace diffs do you mean if

1862
01:56:18,599 --> 01:56:24,480
you run the program two times and then

1863
01:56:21,389 --> 01:56:26,130
it tells you what the IP difference was

1864
01:56:24,479 --> 01:56:28,678
between the two or something what's a

1865
01:56:26,130 --> 01:56:35,159
what's a trace diff in your world like

1866
01:56:28,679 --> 01:56:36,750
what do you mean frosty ninja read this

1867
01:56:35,158 --> 01:56:38,509
in game engine architecture by Naughty

1868
01:56:36,750 --> 01:56:42,960
Dog's guy I can't remember the name of

1869
01:56:38,510 --> 01:56:45,869
maybe I mean Jason Gregory but the you

1870
01:56:42,960 --> 01:56:53,969
C++ user defined literals to do compile

1871
01:56:45,868 --> 01:56:55,738
time hashes on strings at Naughty Dog we

1872
01:56:53,969 --> 01:56:58,590
permit runtime mashing of strings but we

1873
01:56:55,738 --> 01:57:00,359
also use C++ 11s user-defined literals

1874
01:56:58,590 --> 01:57:03,119
feature to transform the cindex any

1875
01:57:00,359 --> 01:57:07,768
string underscore s ID directly into a

1876
01:57:03,118 --> 01:57:16,738
half integer value at compile time that

1877
01:57:07,769 --> 01:57:18,659
seems good I mean I guess you have a

1878
01:57:16,738 --> 01:57:24,888
problem which is your integers could

1879
01:57:18,658 --> 01:57:24,888
collide if they literally mean integers

1880
01:57:30,380 --> 01:57:40,469
so just to put that in perspective so if

1881
01:57:39,179 --> 01:57:42,569
you mean 32-bit integer that's probably

1882
01:57:40,469 --> 01:57:47,250
a bad idea if you mean 64-bit integer

1883
01:57:42,569 --> 01:57:49,679
that's probably not too bad if you mean

1884
01:57:47,250 --> 01:57:56,639
a 128-bit integer then yeah you're all

1885
01:57:49,679 --> 01:57:59,090
good 32-bit integers will start

1886
01:57:56,639 --> 01:58:05,069
colliding once you have you know

1887
01:57:59,090 --> 01:58:07,050
somewhere around 65,000 strings even if

1888
01:58:05,069 --> 01:58:09,768
your hash functions perfect right like

1889
01:58:07,050 --> 01:58:14,309
even if it's exactly what it should be

1890
01:58:09,769 --> 01:58:17,909
and if it's 64-bit it'll start colliding

1891
01:58:14,309 --> 01:58:19,920
around four billion strings and even in

1892
01:58:17,908 --> 01:58:21,988
a place like Navidad getting to four

1893
01:58:19,920 --> 01:58:23,420
billion strings seems pretty unlikely

1894
01:58:21,988 --> 01:58:27,629
right

1895
01:58:23,420 --> 01:58:31,109
so it's probably okay that's 64 bits at

1896
01:58:27,630 --> 01:58:33,329
128 bits of hash if the hash is actually

1897
01:58:31,109 --> 01:58:36,899
a high quality hash then forget it

1898
01:58:33,329 --> 01:58:38,579
right you're fine you will never ever no

1899
01:58:36,899 --> 01:58:41,509
matter how long you developer what you

1900
01:58:38,579 --> 01:58:45,689
do will you ever be able to collide that

1901
01:58:41,510 --> 01:58:50,340
unless you hit pure cosmic unfortunate

1902
01:58:45,689 --> 01:58:52,618
chance and if you're having that kind of

1903
01:58:50,340 --> 01:58:55,949
bad luck your string hash is probably

1904
01:58:52,618 --> 01:58:59,549
the least of your worries so yeah a 64

1905
01:58:55,948 --> 01:59:07,769
bit hash the string seems reasonable

1906
01:58:59,550 --> 01:59:09,630
right and yeah I would think that would

1907
01:59:07,770 --> 01:59:11,429
be fine you you can also probably

1908
01:59:09,630 --> 01:59:14,489
provide some error checking if you

1909
01:59:11,429 --> 01:59:17,300
wanted to maybe that you to prove you

1910
01:59:14,488 --> 01:59:17,299
didn't collide

1911
01:59:25,189 --> 01:59:28,989
yeah I mean it's hard to say right

1912
01:59:39,719 --> 01:59:45,460
what happens when require tooken fails

1913
01:59:42,069 --> 01:59:49,960
yeah just it's just an empty string with

1914
01:59:45,460 --> 01:59:51,340
a none as the type so you never really

1915
01:59:49,960 --> 01:59:53,230
have to check the result because

1916
01:59:51,340 --> 01:59:54,760
everything should just not work like if

1917
01:59:53,229 --> 01:59:56,468
you try to open a file it won't work

1918
01:59:54,760 --> 01:59:59,920
because there's no file name if you try

1919
01:59:56,469 --> 02:00:01,300
to match it against something it won't

1920
01:59:59,920 --> 02:00:03,310
match cuz there's nothing there

1921
02:00:01,300 --> 02:00:07,560
right so you should be able to just use

1922
02:00:03,310 --> 02:00:07,560
it directly as you go

1923
02:00:19,349 --> 02:00:22,960
off-topic just an idea and for cooter

1924
02:00:21,340 --> 02:00:26,860
you could do the block orientation after

1925
02:00:22,960 --> 02:00:28,510
exiting the insert modes of life that

1926
02:00:26,859 --> 02:00:30,759
has nothing to do with it the reason

1927
02:00:28,510 --> 02:00:32,770
that it's jumpy is because of virtual

1928
02:00:30,760 --> 02:00:34,869
white space is on which means that it's

1929
02:00:32,770 --> 02:00:40,090
always refloat there is no such thing as

1930
02:00:34,868 --> 02:00:41,589
not reinventing the block I ended up

1931
02:00:40,090 --> 02:00:44,199
turning virtual white space off I just

1932
02:00:41,590 --> 02:00:45,670
don't it's I tried using it I try using

1933
02:00:44,198 --> 02:00:46,569
it periodically and it's never quite

1934
02:00:45,670 --> 02:00:51,059
ready yet

1935
02:00:46,569 --> 02:00:52,899
and so the version I integrate in

1936
02:00:51,059 --> 02:00:57,969
probably next weekend

1937
02:00:52,899 --> 02:01:00,759
if we switch over it doesn't have

1938
02:00:57,969 --> 02:01:01,809
virtual workspace on at all because it's

1939
02:01:00,760 --> 02:01:03,639
just not ready it's still not ready

1940
02:01:01,809 --> 02:01:07,840
I keep trying and it still keeps not

1941
02:01:03,639 --> 02:01:08,980
really being ready so I think it's just

1942
02:01:07,840 --> 02:01:11,500
it's one of those features that's going

1943
02:01:08,979 --> 02:01:14,468
to require concerted effort to get ready

1944
02:01:11,500 --> 02:01:16,029
and maybe Alan and I will have to do

1945
02:01:14,469 --> 02:01:20,590
like a four code or white space jam at

1946
02:01:16,029 --> 02:01:22,988
some point to finally get it ready but

1947
02:01:20,590 --> 02:01:25,828
it will be going away entirely when I

1948
02:01:22,988 --> 02:01:25,828
read eight

1949
02:01:35,448 --> 02:01:41,419
what are your thoughts on persistent

1950
02:01:37,100 --> 02:01:45,110
structures like used in cloture I don't

1951
02:01:41,420 --> 02:01:47,210
think I know what cloture has in terms

1952
02:01:45,109 --> 02:01:49,099
of that like what can you describe the

1953
02:01:47,210 --> 02:01:50,569
feature and I could try to just say what

1954
02:01:49,100 --> 02:01:58,579
I would think of it because I don't

1955
02:01:50,569 --> 02:02:00,079
firmly err that with that off topic this

1956
02:01:58,579 --> 02:02:01,399
probably isn't relevant to you working

1957
02:02:00,079 --> 02:02:02,899
in a small so company but as you get

1958
02:02:01,399 --> 02:02:04,399
older in thoughts on Aging as a

1959
02:02:02,899 --> 02:02:06,529
programmer in a large company it seems

1960
02:02:04,399 --> 02:02:08,149
mini me come managers but irrespective

1961
02:02:06,529 --> 02:02:09,500
of large organizations teams anything

1962
02:02:08,149 --> 02:02:14,049
you find it really interesting about

1963
02:02:09,500 --> 02:02:17,448
your day to day as you get older not

1964
02:02:14,050 --> 02:02:20,810
particularly much other than the fact

1965
02:02:17,448 --> 02:02:24,250
that I think it's not a very good time

1966
02:02:20,810 --> 02:02:27,620
at the moment to be an older programmer

1967
02:02:24,250 --> 02:02:29,600
not because it not age is really not it

1968
02:02:27,619 --> 02:02:30,738
it's the amount of time even programming

1969
02:02:29,600 --> 02:02:32,420
it's not a very good time to have been

1970
02:02:30,738 --> 02:02:35,000
programming for you know 20 or 30 years

1971
02:02:32,420 --> 02:02:36,829
and the reason for that is because the

1972
02:02:35,000 --> 02:02:38,630
like quality of programming is that like

1973
02:02:36,829 --> 02:02:49,969
an all-time low and so it's just

1974
02:02:38,630 --> 02:02:52,159
depressing right like it's it's really

1975
02:02:49,969 --> 02:02:54,439
depressing to go you know like if you

1976
02:02:52,159 --> 02:02:56,359
even compare what it felt like to

1977
02:02:54,439 --> 02:03:00,859
program when I was you know seven and

1978
02:02:56,359 --> 02:03:03,619
eight years old or whatever right back

1979
02:03:00,859 --> 02:03:05,238
when I was little there were so many

1980
02:03:03,619 --> 02:03:07,279
really good programmers doing so many

1981
02:03:05,238 --> 02:03:10,428
really impressive things with what they

1982
02:03:07,279 --> 02:03:16,789
had you know it was a pretty great world

1983
02:03:10,429 --> 02:03:19,310
and you know I just remember how

1984
02:03:16,789 --> 02:03:22,369
impressive it would be to you know use

1985
02:03:19,310 --> 02:03:24,440
like when I got an Amiga 500 or

1986
02:03:22,369 --> 02:03:26,630
something and how crazy that operating

1987
02:03:24,439 --> 02:03:29,769
system was just it's nuts that they're

1988
02:03:26,630 --> 02:03:32,779
able to get so much out of so little and

1989
02:03:29,770 --> 02:03:34,730
then looking at today it's the exact

1990
02:03:32,779 --> 02:03:36,800
opposite like everywhere I look it's

1991
02:03:34,729 --> 02:03:39,079
just complete garbage you know it's like

1992
02:03:36,800 --> 02:03:41,000
extremely powerful hardware that barely

1993
02:03:39,079 --> 02:03:44,659
is able to do anything at all because

1994
02:03:41,000 --> 02:03:47,448
the programming is so bad and so that's

1995
02:03:44,659 --> 02:03:49,399
really annoying because it's you you

1996
02:03:47,448 --> 02:03:53,089
would you you don't tend to

1997
02:03:49,399 --> 02:03:55,549
to excel I don't feel like it's easier

1998
02:03:53,090 --> 02:03:57,650
it's hard for programmers to excel in an

1999
02:03:55,550 --> 02:03:59,300
environment we're literally like

2000
02:03:57,649 --> 02:04:01,339
anything they do is good enough and

2001
02:03:59,300 --> 02:04:03,710
that's kind of where we're at now

2002
02:04:01,340 --> 02:04:05,300
like no code that I can ever write in

2003
02:04:03,710 --> 02:04:07,310
handmade hero could be bad enough that

2004
02:04:05,300 --> 02:04:09,920
it isn't significantly better than the

2005
02:04:07,310 --> 02:04:14,900
stuff that I have to use when I like

2006
02:04:09,920 --> 02:04:16,100
open up Gmail right like there's no way

2007
02:04:14,899 --> 02:04:17,359
we will ever write anything on the

2008
02:04:16,100 --> 02:04:19,429
screen that's that bad

2009
02:04:17,359 --> 02:04:21,738
and that creates like a really bad

2010
02:04:19,429 --> 02:04:23,989
precedent and environment because it

2011
02:04:21,738 --> 02:04:27,379
really brings everyone's standards down

2012
02:04:23,988 --> 02:04:30,468
like I'm not pushed to be better every

2013
02:04:27,380 --> 02:04:32,539
day like I should be and neither is

2014
02:04:30,469 --> 02:04:36,350
anybody else because the stuff that you

2015
02:04:32,539 --> 02:04:39,050
are used to is so incredibly awful that

2016
02:04:36,350 --> 02:04:44,719
there is almost no way you can be any

2017
02:04:39,050 --> 02:04:47,390
worse you know another way to say it

2018
02:04:44,719 --> 02:04:50,658
would be the worst programming that you

2019
02:04:47,390 --> 02:04:54,050
can do is the average programming that

2020
02:04:50,658 --> 02:04:57,649
you are using like we're at the bear

2021
02:04:54,050 --> 02:05:00,739
we're at the bottom right and that's

2022
02:04:57,649 --> 02:05:02,569
really bad and I feel like that's the

2023
02:05:00,738 --> 02:05:04,369
most heart the hardest thing about

2024
02:05:02,569 --> 02:05:06,469
having program for a long time because

2025
02:05:04,369 --> 02:05:09,559
if you started programming today he

2026
02:05:06,469 --> 02:05:13,158
wouldn't know that right he wouldn't

2027
02:05:09,560 --> 02:05:16,699
know how bad things have gotten because

2028
02:05:13,158 --> 02:05:18,408
you didn't go through any time period

2029
02:05:16,698 --> 02:05:21,198
where things were at least somewhat

2030
02:05:18,408 --> 02:05:23,210
better and it's not to say that software

2031
02:05:21,198 --> 02:05:27,769
was somehow awesome back in the day it

2032
02:05:23,210 --> 02:05:33,100
wasn't but the amount that people were

2033
02:05:27,770 --> 02:05:36,380
able to do with what they had was just

2034
02:05:33,100 --> 02:05:37,880
not even it's not even comparable to

2035
02:05:36,380 --> 02:05:44,079
what you see you know what you see today

2036
02:05:37,880 --> 02:05:44,079
is just is just just terrible

2037
02:05:47,380 --> 02:05:50,529
[Music]

2038
02:06:10,050 --> 02:06:13,500
let's see

2039
02:06:20,488 --> 02:06:23,879
I asked the priest mystery about a sperm

2040
02:06:22,469 --> 02:06:25,708
you didn't enjoy and you mentioned no

2041
02:06:23,880 --> 02:06:27,090
speck or unrespected problem domains

2042
02:06:25,708 --> 02:06:28,708
often being annoying I was thinking that

2043
02:06:27,090 --> 02:06:29,909
may well be young man's game at least

2044
02:06:28,708 --> 02:06:33,929
doing at multiple producing rail

2045
02:06:29,908 --> 02:06:35,899
no I I've always disliked it it's it's

2046
02:06:33,929 --> 02:06:38,038
just it's not really an age thing

2047
02:06:35,899 --> 02:06:44,899
they're the reason that I kind of think

2048
02:06:38,038 --> 02:06:47,880
it's that way for me is I like to

2049
02:06:44,899 --> 02:06:50,609
accomplish new things when I'm

2050
02:06:47,880 --> 02:06:54,239
programming that's like really why I'm

2051
02:06:50,609 --> 02:06:58,049
doing it I don't really do it for other

2052
02:06:54,238 --> 02:07:00,149
reasons than that usually and so working

2053
02:06:58,050 --> 02:07:01,920
with unrespected stuff just takes it

2054
02:07:00,149 --> 02:07:03,899
longer to make the new thing whatever

2055
02:07:01,920 --> 02:07:05,578
you're trying to do it's it's just a

2056
02:07:03,899 --> 02:07:07,379
waste of my time if it had been Specht

2057
02:07:05,578 --> 02:07:12,748
properly would it wouldn't have wasted

2058
02:07:07,380 --> 02:07:14,609
my time right so sometimes I'm okay with

2059
02:07:12,748 --> 02:07:16,019
it and don't mind as much but most of

2060
02:07:14,609 --> 02:07:25,049
the time I just find it annoying cuz

2061
02:07:16,019 --> 02:07:26,969
it's just wasting my time it's the same

2062
02:07:25,050 --> 02:07:28,559
reason like when I was younger I didn't

2063
02:07:26,969 --> 02:07:32,368
like it either and I didn't get into

2064
02:07:28,559 --> 02:07:34,579
things like security research and stuff

2065
02:07:32,368 --> 02:07:37,998
for that reason like I don't care about

2066
02:07:34,578 --> 02:07:40,380
investing investigating other people's

2067
02:07:37,998 --> 02:07:42,630
binary Zoar something right like I just

2068
02:07:40,380 --> 02:07:45,328
I just don't want to spend the time

2069
02:07:42,630 --> 02:07:47,819
because I like making new things and I

2070
02:07:45,328 --> 02:07:49,679
would much rather just have stuff

2071
02:07:47,819 --> 02:07:52,828
respect properly so if I have to use it

2072
02:07:49,679 --> 02:07:54,538
I can just know what it does by reading

2073
02:07:52,828 --> 02:07:57,569
a short thing that it says what it does

2074
02:07:54,538 --> 02:07:58,018
and know that that is correct that's way

2075
02:07:57,569 --> 02:08:02,130
better

2076
02:07:58,019 --> 02:08:04,170
right and so under spec stuff is just

2077
02:08:02,130 --> 02:08:09,989
wasting my time and it's not you know

2078
02:08:04,170 --> 02:08:12,389
it's not really a an age thing for me

2079
02:08:09,988 --> 02:08:14,998
for other people it might be if you

2080
02:08:12,389 --> 02:08:16,739
liked it when you were younger I could

2081
02:08:14,998 --> 02:08:18,538
absolutely see you getting tired as you

2082
02:08:16,738 --> 02:08:19,978
get older because you just don't care

2083
02:08:18,538 --> 02:08:22,889
anymore something or you're tired of

2084
02:08:19,979 --> 02:08:26,159
dealing with it for me it wasn't that I

2085
02:08:22,889 --> 02:08:28,050
never really liked it it was it's never

2086
02:08:26,158 --> 02:08:32,618
really been something that I I like I

2087
02:08:28,050 --> 02:08:34,699
always find it kind of annoying but

2088
02:08:32,618 --> 02:08:36,139
all right so here's an explanation of

2089
02:08:34,698 --> 02:08:40,308
the closure thinks the structures are

2090
02:08:36,139 --> 02:08:43,130
like lists in Lisp where old versions

2091
02:08:40,309 --> 02:08:46,190
are kept around because new ones

2092
02:08:43,130 --> 02:08:52,849
reference the old with sub parts

2093
02:08:46,189 --> 02:08:58,250
containing the new data appended on so

2094
02:08:52,849 --> 02:09:00,679
like it keeps effectively versions of

2095
02:08:58,250 --> 02:09:02,059
your structures again I'm not really

2096
02:09:00,679 --> 02:09:04,960
sure I understand what the feature is

2097
02:09:02,059 --> 02:09:04,960
per se

2098
02:09:28,970 --> 02:09:36,900
it's building up diffs yeah I mean so I

2099
02:09:34,680 --> 02:09:40,409
guess I'd have to actually use it to see

2100
02:09:36,899 --> 02:09:42,299
what I thought of it but in principle I

2101
02:09:40,409 --> 02:09:53,519
like things like that might be a way to

2102
02:09:42,300 --> 02:09:55,829
say it - waffles said hey Casey I just

2103
02:09:53,520 --> 02:09:57,930
started working on a super oop open

2104
02:09:55,829 --> 02:09:59,819
source project and C++ and one thing I'm

2105
02:09:57,930 --> 02:10:01,170
noticing is that it's so hard to find

2106
02:09:59,819 --> 02:10:03,479
the code that actually does the thing

2107
02:10:01,170 --> 02:10:04,890
I'm looking for can I expect this with

2108
02:10:03,479 --> 02:10:07,139
monitors he was blessed because it blows

2109
02:10:04,890 --> 02:10:09,180
literally all I'm trying to do is add a

2110
02:10:07,140 --> 02:10:10,530
menu option but my exploration is so far

2111
02:10:09,180 --> 02:10:11,760
looking at eight different files and

2112
02:10:10,529 --> 02:10:13,109
then of which actually contain the thing

2113
02:10:11,760 --> 02:10:15,210
that I want which is from what I

2114
02:10:13,109 --> 02:10:19,259
understand literally just adding a

2115
02:10:15,210 --> 02:10:20,880
boolean flag in the metadata um yeah I

2116
02:10:19,260 --> 02:10:23,640
mean this is why I don't use that

2117
02:10:20,880 --> 02:10:25,199
programming style and I would have

2118
02:10:23,640 --> 02:10:26,910
thought it should have been obvious to

2119
02:10:25,199 --> 02:10:29,579
any programmer worth their salt that

2120
02:10:26,909 --> 02:10:32,729
it's bad right and the reason for that

2121
02:10:29,579 --> 02:10:35,550
is that the further away your code is

2122
02:10:32,729 --> 02:10:39,479
from a literal reading of what it is

2123
02:10:35,550 --> 02:10:40,619
doing at first blush the worse it is end

2124
02:10:39,479 --> 02:10:43,709
of story

2125
02:10:40,619 --> 02:10:46,470
for many reasons one other people will

2126
02:10:43,710 --> 02:10:48,180
have a hard time reading it - you will

2127
02:10:46,470 --> 02:10:53,100
have a hard time reading it after you've

2128
02:10:48,180 --> 02:10:55,560
forgotten what it does 3 if it is not

2129
02:10:53,100 --> 02:10:56,970
clearly showing the steps it does in the

2130
02:10:55,560 --> 02:10:58,860
order it does them in a way that's easy

2131
02:10:56,970 --> 02:11:01,199
to read chances are it's generating a

2132
02:10:58,859 --> 02:11:02,429
ton of extra CPU code because the

2133
02:11:01,199 --> 02:11:03,960
compiler is not smart enough to

2134
02:11:02,430 --> 02:11:06,840
magically determine you were only doing

2135
02:11:03,960 --> 02:11:08,369
something simple there for it's

2136
02:11:06,840 --> 02:11:09,539
extremely hard to debug because when you

2137
02:11:08,369 --> 02:11:11,069
actually step through this you're gonna

2138
02:11:09,539 --> 02:11:12,810
be jumping all over the place and you

2139
02:11:11,069 --> 02:11:15,569
it's gonna be very hard to follow what

2140
02:11:12,810 --> 02:11:18,120
was actually happening in the code 5

2141
02:11:15,569 --> 02:11:20,159
it's very hard to maintain because any

2142
02:11:18,119 --> 02:11:21,779
changes in all of that random code

2143
02:11:20,159 --> 02:11:23,699
that's all being pulled in and and

2144
02:11:21,779 --> 02:11:26,189
crazily being munched on to do this

2145
02:11:23,699 --> 02:11:28,170
simple operation could all have bugs in

2146
02:11:26,189 --> 02:11:29,609
it and it could all get changed at some

2147
02:11:28,170 --> 02:11:31,909
point out from under you accidentally

2148
02:11:29,609 --> 02:11:34,799
you end up in a left pad situation right

2149
02:11:31,909 --> 02:11:36,960
on and on and on and on it's terrible

2150
02:11:34,800 --> 02:11:40,380
it's just a very bad way to program

2151
02:11:36,960 --> 02:11:42,719
objectively I think there is no real

2152
02:11:40,380 --> 02:11:45,269
subjective to it it doesn't work

2153
02:11:42,719 --> 02:11:47,368
it makes things slower to compile slower

2154
02:11:45,269 --> 02:11:50,429
to debug slower to write and harder to

2155
02:11:47,368 --> 02:11:52,938
maintain there there's no upsides to it

2156
02:11:50,429 --> 02:11:56,309
at all that I've ever seen

2157
02:11:52,939 --> 02:11:58,679
so yeah it's horrible don't do it don't

2158
02:11:56,309 --> 02:12:02,550
go down that road it's bad it is just

2159
02:11:58,679 --> 02:12:06,288
not good code by any metric you want to

2160
02:12:02,550 --> 02:12:06,288
apply that actually measures something

2161
02:12:29,979 --> 02:12:34,009
yeah ginger bill I'm looking at the

2162
02:12:32,420 --> 02:12:36,680
counter turn amount of LOV I'm Cochin

2163
02:12:34,010 --> 02:12:40,610
you know I took a look at that too at

2164
02:12:36,680 --> 02:12:44,690
one point and it was just like I don't

2165
02:12:40,609 --> 02:12:47,960
know what ends up happening because it

2166
02:12:44,689 --> 02:12:52,669
seems like it shouldn't be that hard to

2167
02:12:47,960 --> 02:12:55,069
write something that's like mmm here's a

2168
02:12:52,670 --> 02:12:56,750
description of what I need to CPU to do

2169
02:12:55,069 --> 02:13:01,309
please generate the code that does it

2170
02:12:56,750 --> 02:13:03,909
you know and yet when you look at

2171
02:13:01,310 --> 02:13:06,860
something like LLVM it's just an

2172
02:13:03,909 --> 02:13:08,750
absolute train wreck on the inside right

2173
02:13:06,859 --> 02:13:11,839
like you just are like alright forget it

2174
02:13:08,750 --> 02:13:13,310
by the time I even can do a small amount

2175
02:13:11,840 --> 02:13:15,890
of thing to this I could have written my

2176
02:13:13,310 --> 02:13:17,450
own code Jen right and that really

2177
02:13:15,890 --> 02:13:19,280
shouldn't be the case and so I think

2178
02:13:17,449 --> 02:13:21,979
again that I think that's probably just

2179
02:13:19,279 --> 02:13:24,829
another situation of just C++ nightmare

2180
02:13:21,979 --> 02:13:30,789
because the LLVM code base is all C++

2181
02:13:24,829 --> 02:13:30,789
tout them you know it's just ridiculous

2182
02:13:35,909 --> 02:13:39,420
about slitting the code into microscopic

2183
02:13:37,710 --> 02:13:40,949
files my co-workers love it because it

2184
02:13:39,420 --> 02:13:43,109
makes the code quote unquote easier to

2185
02:13:40,949 --> 02:13:45,439
read for them okay it seems like they

2186
02:13:43,109 --> 02:13:49,229
get lost a file has more than 200 lines

2187
02:13:45,439 --> 02:13:50,309
yeah I know probably because they don't

2188
02:13:49,229 --> 02:13:53,659
have this something that can jump

2189
02:13:50,310 --> 02:13:55,710
quickly to functions maybe I don't know

2190
02:13:53,659 --> 02:13:56,939
well moving away from Moodle and for

2191
02:13:55,710 --> 02:13:59,489
coder effect your wrists or have you

2192
02:13:56,939 --> 02:14:01,429
found that it won't sorry I think maybe

2193
02:13:59,489 --> 02:14:04,439
the phrase modal's tripping up there

2194
02:14:01,430 --> 02:14:08,360
it's still modal from the perspective of

2195
02:14:04,439 --> 02:14:12,000
the person using the tool to switch

2196
02:14:08,359 --> 02:14:14,130
around what the hotkeys are doing the

2197
02:14:12,000 --> 02:14:17,100
difference is that there's no entering

2198
02:14:14,130 --> 02:14:20,940
or exiting of operations right so

2199
02:14:17,100 --> 02:14:23,160
meaning I still do this right I still

2200
02:14:20,939 --> 02:14:27,509
have this in there but what I don't have

2201
02:14:23,159 --> 02:14:32,880
is like when you hit like let's say this

2202
02:14:27,510 --> 02:14:35,520
for list locations for foo right this is

2203
02:14:32,880 --> 02:14:37,590
a modal thing now that if I was to do

2204
02:14:35,520 --> 02:14:40,290
something else like for example switch

2205
02:14:37,590 --> 02:14:42,090
to a query replace or something like

2206
02:14:40,289 --> 02:14:43,439
query replaces this modal thing right

2207
02:14:42,090 --> 02:14:45,180
here's the thing we're replacing and

2208
02:14:43,439 --> 02:14:48,989
here's what we replacing it with and now

2209
02:14:45,180 --> 02:14:51,840
it's done right that's totally modal

2210
02:14:48,989 --> 02:14:54,389
it's gone I can't like I can't just

2211
02:14:51,840 --> 02:14:55,800
apply it anytime I want or do right so

2212
02:14:54,390 --> 02:14:57,660
what I mean by getting rid of that

2213
02:14:55,800 --> 02:15:00,029
modality is it's just all of those

2214
02:14:57,659 --> 02:15:03,000
things are now just part of the edit at

2215
02:15:00,029 --> 02:15:05,219
anytime so like search and replace isn't

2216
02:15:03,000 --> 02:15:07,380
like a mode I go into to do search and

2217
02:15:05,220 --> 02:15:09,150
replace it's just part of the operations

2218
02:15:07,380 --> 02:15:14,819
that are available at all times does

2219
02:15:09,149 --> 02:15:17,689
that make sense so the the the hotkey

2220
02:15:14,819 --> 02:15:20,579
mode is still something you control

2221
02:15:17,689 --> 02:15:28,189
to again be easier on the wrists so you

2222
02:15:20,579 --> 02:15:28,189
don't use the ctrl key that's separate

2223
02:15:28,279 --> 02:15:32,219
though the day I heard someone make a

2224
02:15:30,329 --> 02:15:34,800
claim that programming without syntax

2225
02:15:32,220 --> 02:15:39,300
highlighting is more error-prone what

2226
02:15:34,800 --> 02:15:43,710
would you say I guess I would say prove

2227
02:15:39,300 --> 02:15:46,409
it it could be right it could be wrong I

2228
02:15:43,710 --> 02:15:48,090
don't really do it for errors or not I

2229
02:15:46,409 --> 02:15:50,210
do it because it's just more pleasant to

2230
02:15:48,090 --> 02:15:53,220
have something a little more colorful

2231
02:15:50,210 --> 02:15:59,670
than just the the straight its

2232
02:15:53,220 --> 02:16:03,300
monochrome right so I do it more for

2233
02:15:59,670 --> 02:16:06,000
visual pleasantness I don't consider it

2234
02:16:03,300 --> 02:16:14,489
to be a particularly important feature

2235
02:16:06,000 --> 02:16:17,569
for for quality its its its for its to

2236
02:16:14,489 --> 02:16:20,569
make the graphic design not too boring

2237
02:16:17,569 --> 02:16:20,569
right

2238
02:16:33,049 --> 02:16:38,279
yeah and you know I guess on the air

2239
02:16:37,110 --> 02:16:40,469
profile let me say one more thing the

2240
02:16:38,280 --> 02:16:45,750
air pro front so I could actually

2241
02:16:40,468 --> 02:16:49,529
believe a claim that not using syntax

2242
02:16:45,750 --> 02:16:51,479
highlighting led to more errors if the

2243
02:16:49,530 --> 02:16:52,679
syntax highlighting highlighted

2244
02:16:51,479 --> 02:16:57,809
different stuff that it's currently

2245
02:16:52,679 --> 02:17:00,569
highlighting right so like the normal

2246
02:16:57,809 --> 02:17:04,829
syntax highlighting like this I'm not so

2247
02:17:00,569 --> 02:17:08,549
sure some of the stuff I added too for

2248
02:17:04,829 --> 02:17:10,799
coder recently I could easily see it

2249
02:17:08,549 --> 02:17:11,909
leading to less errors for example one

2250
02:17:10,799 --> 02:17:16,739
of the things I added to for coder

2251
02:17:11,909 --> 02:17:19,619
that's super baller is it auto annotates

2252
02:17:16,739 --> 02:17:46,289
your pound ifs so for example like if

2253
02:17:19,620 --> 02:17:49,980
you type so if you type something like

2254
02:17:46,290 --> 02:17:52,830
this right it's like who the heck knows

2255
02:17:49,979 --> 02:17:55,829
what each of these blocks are right like

2256
02:17:52,829 --> 02:17:59,309
what's this and that what is each of

2257
02:17:55,829 --> 02:18:02,819
those I have no idea right and you have

2258
02:17:59,309 --> 02:18:04,500
to start following it through and so one

2259
02:18:02,819 --> 02:18:06,449
thing that you'll see people do fairly

2260
02:18:04,500 --> 02:18:09,629
frequently is they'll be like oh all

2261
02:18:06,450 --> 02:18:12,120
right like this part here is the end if

2262
02:18:09,629 --> 02:18:14,069
for foo or whatever right but those can

2263
02:18:12,120 --> 02:18:19,610
easily be wrong like you can because

2264
02:18:14,069 --> 02:18:22,409
it's just a comment and so what you know

2265
02:18:19,610 --> 02:18:24,510
what I did in the new version is it can

2266
02:18:22,409 --> 02:18:26,459
annotate all your scopes for you so we

2267
02:18:24,510 --> 02:18:28,829
can just tell you like hey this block is

2268
02:18:26,459 --> 02:18:31,619
the block that corresponds to this

2269
02:18:28,829 --> 02:18:34,799
expression or this endif is the one that

2270
02:18:31,620 --> 02:18:36,810
closes this pound if right and it'll

2271
02:18:34,799 --> 02:18:39,599
just it puts it right in line there for

2272
02:18:36,809 --> 02:18:41,609
you to see so a bunch of stuff like that

2273
02:18:39,599 --> 02:18:43,469
could actually prevent errors because

2274
02:18:41,610 --> 02:18:45,659
you'd be like oh whoops I must have and

2275
02:18:43,469 --> 02:18:47,579
it's thing here that that made it end up

2276
02:18:45,659 --> 02:18:50,930
being a block I didn't expect there's

2277
02:18:47,579 --> 02:18:50,930
some of that that would be good right

2278
02:18:51,921 --> 02:18:56,960
so I think I think that's you know I

2279
02:18:57,860 --> 02:19:01,341
think that's good

2280
02:19:08,679 --> 02:19:13,030
try and think if there's anything else

2281
02:19:10,149 --> 02:19:14,739
but yeah so I guess what I'd say is I've

2282
02:19:13,030 --> 02:19:17,350
put some new features into four critter

2283
02:19:14,739 --> 02:19:18,729
that I think will prevent errors they

2284
02:19:17,350 --> 02:19:20,079
aren't the kinds that people are

2285
02:19:18,729 --> 02:19:21,279
normally talking about with sind exiling

2286
02:19:20,079 --> 02:19:23,079
and certainly weren't the things that

2287
02:19:21,280 --> 02:19:27,610
you heard said because no other editor

2288
02:19:23,079 --> 02:19:30,069
has any of the stuff that I know of so

2289
02:19:27,610 --> 02:19:31,659
we'll see but like another example would

2290
02:19:30,069 --> 02:19:34,119
be I have a thing in for coder now too

2291
02:19:31,659 --> 02:19:37,239
that shows you things like when you put

2292
02:19:34,120 --> 02:19:39,370
in a character or a hex thing it'll tell

2293
02:19:37,239 --> 02:19:43,149
you like what that color is or what the

2294
02:19:39,370 --> 02:19:44,590
characters integer value would be again

2295
02:19:43,149 --> 02:19:46,090
those are things that could easily be

2296
02:19:44,590 --> 02:19:48,670
preventing errors because maybe you

2297
02:19:46,090 --> 02:19:50,440
thought you knew what backslash-n was

2298
02:19:48,670 --> 02:19:52,149
but it's actually slightly different and

2299
02:19:50,440 --> 02:19:56,739
just having it show you there'd be like

2300
02:19:52,149 --> 02:19:59,949
oh wait right it's not that just stuff

2301
02:19:56,739 --> 02:20:01,090
like that you know another syntax hiding

2302
02:19:59,950 --> 02:20:03,640
thing that would prevent bugs in for

2303
02:20:01,090 --> 02:20:05,979
coder that I added is it will auto color

2304
02:20:03,639 --> 02:20:07,959
decimal and hexadecimal numbers so you

2305
02:20:05,979 --> 02:20:10,899
can see how large they are so for

2306
02:20:07,959 --> 02:20:13,899
example if you have it'll it'll block

2307
02:20:10,899 --> 02:20:16,659
out every four so if you fought you put

2308
02:20:13,899 --> 02:20:19,180
six hexadecimals in but you only put

2309
02:20:16,659 --> 02:20:21,250
five or you thought you put 12 but you

2310
02:20:19,180 --> 02:20:23,409
only put eleven you would know because

2311
02:20:21,250 --> 02:20:25,719
you can see the demarcations very

2312
02:20:23,409 --> 02:20:27,549
clearly so I've put in a bunch of stuff

2313
02:20:25,719 --> 02:20:31,539
now for syntax highlighting as you'll

2314
02:20:27,549 --> 02:20:32,889
see when we actually update it that I

2315
02:20:31,540 --> 02:20:34,840
could believe all of those could find

2316
02:20:32,889 --> 02:20:36,459
bugs but the normal cindex I know sounds

2317
02:20:34,840 --> 02:20:40,271
just like is this a function is it a

2318
02:20:36,459 --> 02:20:41,589
string constant I have a hard time

2319
02:20:40,271 --> 02:20:45,420
believing that's gonna help you find

2320
02:20:41,590 --> 02:20:48,460
bugs much I mean there's just not a lot

2321
02:20:45,420 --> 02:20:51,010
there so I do think we've added a bunch

2322
02:20:48,459 --> 02:20:55,029
up to for coder that'll be in the in the

2323
02:20:51,010 --> 02:20:56,579
new version that that is does have the

2324
02:20:55,030 --> 02:21:00,550
potential to really improve your coding

2325
02:20:56,579 --> 02:21:02,530
not just for decoration but a lot of the

2326
02:21:00,549 --> 02:21:05,770
syntax having stuff that we currently do

2327
02:21:02,530 --> 02:21:07,811
and that's in most other editors not

2328
02:21:05,771 --> 02:21:10,500
really the kind of thing that I would

2329
02:21:07,810 --> 02:21:12,319
say is gonna like help you find errors

2330
02:21:10,500 --> 02:21:15,388
particularly likely

2331
02:21:12,319 --> 02:21:15,388
[Music]

2332
02:21:17,771 --> 02:21:26,561
I really yeah I really couldn't couldn't

2333
02:21:24,069 --> 02:21:28,539
say can't can't think of a reason why it

2334
02:21:26,560 --> 02:21:30,129
would I would have to hear some

2335
02:21:28,540 --> 02:21:34,840
arguments as to what sorts of errors

2336
02:21:30,129 --> 02:21:39,129
people thought it was preventing you

2337
02:21:34,840 --> 02:21:45,040
know like what kind of a bug do you

2338
02:21:39,129 --> 02:21:46,949
think it's gonna prevent and and maybe

2339
02:21:45,040 --> 02:21:49,750
that then we could have a more

2340
02:21:46,950 --> 02:21:51,090
constructive inquiry into it cuz I can't

2341
02:21:49,750 --> 02:21:56,069
even really think about what bugs

2342
02:21:51,090 --> 02:21:56,069
someone would argue it could prevent

2343
02:21:58,920 --> 02:22:03,989
yeah

2344
02:22:00,271 --> 02:22:03,989
alright I'm gonna wrap it up

2345
02:22:11,069 --> 02:22:14,279
all right thank you everyone for joining

2346
02:22:12,989 --> 02:22:15,449
me for the episode a hand made here out

2347
02:22:14,280 --> 02:22:17,820
sort of pleasure coding with you as

2348
02:22:15,450 --> 02:22:19,079
always if you would like to follow along

2349
02:22:17,819 --> 02:22:22,289
the series at home you can always pier

2350
02:22:19,079 --> 02:22:23,549
the game at hand made here org it comes

2351
02:22:22,290 --> 02:22:25,460
with all the source code so that you can

2352
02:22:23,549 --> 02:22:27,329
build it at home and play around with it

2353
02:22:25,459 --> 02:22:28,529
that's it for this week

2354
02:22:27,329 --> 02:22:32,399
we'll be back next week with more

2355
02:22:28,530 --> 02:22:36,420
streaming I'm not 100% sure we actually

2356
02:22:32,399 --> 02:22:40,409
debug the thing today by the time we ran

2357
02:22:36,420 --> 02:22:42,750
out of time I you know it was apparently

2358
02:22:40,409 --> 02:22:44,639
working but I'm not confident like we

2359
02:22:42,750 --> 02:22:46,979
haven't really done the testing that I

2360
02:22:44,639 --> 02:22:49,260
would like to do in order to determine

2361
02:22:46,979 --> 02:22:50,909
that it's actually correct now because

2362
02:22:49,260 --> 02:22:51,870
it's kind of subtle piece of code and we

2363
02:22:50,909 --> 02:22:55,139
did a little bit more than we would

2364
02:22:51,870 --> 02:22:57,690
normally do in there and so I seemed a

2365
02:22:55,139 --> 02:22:58,859
little iffy so we'll check it out next

2366
02:22:57,690 --> 02:23:00,810
weekend we'll put it through its paces

2367
02:22:58,860 --> 02:23:04,500
and make sure that there's nothing weird

2368
02:23:00,809 --> 02:23:06,239
going on there and try to clean off some

2369
02:23:04,500 --> 02:23:07,860
of that stuff and then hopefully we

2370
02:23:06,239 --> 02:23:09,239
could finally say all right now now

2371
02:23:07,860 --> 02:23:10,829
we're good to go we can mark up all our

2372
02:23:09,239 --> 02:23:12,119
assets and I'm not going to be nervous

2373
02:23:10,829 --> 02:23:15,930
about it losing our work or anything

2374
02:23:12,120 --> 02:23:17,820
like that that's about it until next

2375
02:23:15,930 --> 02:23:19,889
time have fun programming everyone and

2376
02:23:17,819 --> 02:23:21,979
I'll see you on the Internet take it

2377
02:23:19,889 --> 02:23:21,979
easy

