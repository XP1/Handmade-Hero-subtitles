1
00:00:01,490 --> 00:00:06,000
hello everyone welcome to handmade here

2
00:00:04,230 --> 00:00:10,289
on the show recode complete game live on

3
00:00:06,000 --> 00:00:12,839
stream yesterday we well we pretty much

4
00:00:10,289 --> 00:00:14,879
finished are making our texture download

5
00:00:12,839 --> 00:00:19,109
synchronous so that the opengl driver

6
00:00:14,880 --> 00:00:21,179
would be happier about them and we had

7
00:00:19,109 --> 00:00:23,100
one bug we kind of ended the stream we

8
00:00:21,179 --> 00:00:24,420
didn't have time to go debug it we

9
00:00:23,100 --> 00:00:28,320
finished typing it all in be note I'd

10
00:00:24,420 --> 00:00:31,050
like it on the light rail today home

11
00:00:28,320 --> 00:00:34,320
from climbing I think I may have thought

12
00:00:31,050 --> 00:00:38,100
of what the bug was actually just popped

13
00:00:34,320 --> 00:00:39,450
into my head for some reason so yeah

14
00:00:38,100 --> 00:00:41,280
this might not take very long if I'm

15
00:00:39,450 --> 00:00:42,450
right but if I'm wrong then we got to go

16
00:00:41,280 --> 00:00:45,058
to bucket so I don't know which is going

17
00:00:42,450 --> 00:00:48,780
to be maybe this will be quick maybe

18
00:00:45,058 --> 00:00:50,519
it'll be not so quick day 33 26 so if

19
00:00:48,780 --> 00:00:52,710
you want to follow along at home day 325

20
00:00:50,520 --> 00:00:57,000
source code is the source code to be

21
00:00:52,710 --> 00:01:00,899
reckoned with today here is mr. gamey

22
00:00:57,000 --> 00:01:05,338
pants poo and if you remember where we

23
00:01:00,899 --> 00:01:13,079
were yesterday I we had this sort of

24
00:01:05,338 --> 00:01:15,118
call doubt the bottom of win32 handmade

25
00:01:13,079 --> 00:01:17,429
where we were doing our you know our

26
00:01:15,118 --> 00:01:21,540
stuff and what we did is we need to

27
00:01:17,430 --> 00:01:24,229
begin ticket mutex and we grabbed out

28
00:01:21,540 --> 00:01:28,680
the whole list of of texture operations

29
00:01:24,228 --> 00:01:30,118
that were as waiting and I I do believe

30
00:01:28,680 --> 00:01:31,439
i'm correct even just looking at the

31
00:01:30,118 --> 00:01:33,959
code here i think i'm totally right

32
00:01:31,438 --> 00:01:36,209
about with the bug was and then we had

33
00:01:33,959 --> 00:01:37,649
our end ticket mutex we then took a look

34
00:01:36,209 --> 00:01:39,539
to see if there were have been any

35
00:01:37,650 --> 00:01:43,200
texture ups in there if there were we

36
00:01:39,540 --> 00:01:44,909
went ahead and put the process them and

37
00:01:43,200 --> 00:01:48,350
then put them on the free list so that

38
00:01:44,909 --> 00:01:52,439
they could be reused and what we found

39
00:01:48,349 --> 00:01:54,000
was and you know this is what why i

40
00:01:52,438 --> 00:01:56,218
think my brain clued in to what the bug

41
00:01:54,000 --> 00:01:58,109
was assuming am right and i think i am

42
00:01:56,218 --> 00:02:00,030
what we found was a bunch of our

43
00:01:58,109 --> 00:02:02,728
textures loaded but some of them did not

44
00:02:00,030 --> 00:02:05,040
load right you can kind of see some of

45
00:02:02,728 --> 00:02:07,009
those are just blank white textures so

46
00:02:05,040 --> 00:02:09,149
the question is what happened there and

47
00:02:07,009 --> 00:02:10,288
at the end of last dream i had said

48
00:02:09,149 --> 00:02:13,289
something like well it looks like at

49
00:02:10,288 --> 00:02:14,280
some point we stopped loading textures

50
00:02:13,289 --> 00:02:16,650
but I don't think that's a anything to

51
00:02:14,280 --> 00:02:20,729
it the ticket mutex because the ticket

52
00:02:16,650 --> 00:02:23,069
mutex looks pretty solid well what I

53
00:02:20,729 --> 00:02:26,479
forgot was we have a last pointer as

54
00:02:23,068 --> 00:02:30,078
well I decided to retire texture ops in

55
00:02:26,479 --> 00:02:34,018
series if i remember correctly and so

56
00:02:30,079 --> 00:02:39,810
that texture q just make sure i'm not

57
00:02:34,019 --> 00:02:43,139
crazy but that texture q i believe has a

58
00:02:39,810 --> 00:02:46,620
first and yeah so you can see here we've

59
00:02:43,139 --> 00:02:50,219
got a first and the last and we are only

60
00:02:46,620 --> 00:02:52,049
resetting the first so all of our future

61
00:02:50,219 --> 00:02:55,469
attempts to load textures were getting

62
00:02:52,049 --> 00:02:59,129
stuck after a link that was already on

63
00:02:55,469 --> 00:03:00,859
the free list right so just going to

64
00:02:59,128 --> 00:03:03,989
keep sticking things on the free list

65
00:03:00,859 --> 00:03:07,799
which is not going to get them loaded so

66
00:03:03,989 --> 00:03:11,750
I believe that is really the only bug

67
00:03:07,799 --> 00:03:17,158
that we had potentially if I'm right

68
00:03:11,750 --> 00:03:19,739
like I said don't know if I am but yeah

69
00:03:17,158 --> 00:03:22,138
that's just the way it is and the other

70
00:03:19,739 --> 00:03:25,469
thing that I point out is when we get

71
00:03:22,139 --> 00:03:27,569
this first out here we could get the

72
00:03:25,469 --> 00:03:29,579
last out and then OpenGL manage textures

73
00:03:27,568 --> 00:03:32,098
would not have to return us the last

74
00:03:29,579 --> 00:03:35,030
because we already have the last so

75
00:03:32,098 --> 00:03:37,649
really you know maybe it's a slightly

76
00:03:35,030 --> 00:03:40,259
cleaner thing to do to say oh you know

77
00:03:37,650 --> 00:03:42,000
don't don't bother keeping this you

78
00:03:40,259 --> 00:03:46,798
don't need to because we know what the

79
00:03:42,000 --> 00:03:53,789
last stop was so you're fine just let's

80
00:03:46,799 --> 00:03:55,260
go ahead and get it here right so we get

81
00:03:53,789 --> 00:03:57,900
the first text sharp get the last text

82
00:03:55,259 --> 00:04:00,388
wrap and assuming there is a first text

83
00:03:57,900 --> 00:04:01,919
wrap we then go ahead and do all our

84
00:04:00,389 --> 00:04:03,180
stuff we can also show there's a last

85
00:04:01,919 --> 00:04:07,500
one because because first when there has

86
00:04:03,180 --> 00:04:09,810
to be a lasting right and off we go so

87
00:04:07,500 --> 00:04:12,509
hey there you go that was the bug so

88
00:04:09,810 --> 00:04:15,150
that's good news and now in theory or

89
00:04:12,508 --> 00:04:17,219
texture downloads are all synchronous so

90
00:04:15,150 --> 00:04:19,019
we should not be having the problems on

91
00:04:17,220 --> 00:04:20,579
nvidia cards and stuff like that that we

92
00:04:19,019 --> 00:04:23,430
were having before or occasionally with

93
00:04:20,579 --> 00:04:25,379
a TI at least that's the theory now i

94
00:04:23,430 --> 00:04:27,209
don't know how good these sex or

95
00:04:25,379 --> 00:04:31,769
downloads are

96
00:04:27,209 --> 00:04:35,728
and so I was interested to see in in the

97
00:04:31,769 --> 00:04:39,899
in this cutscene here I'm interested to

98
00:04:35,728 --> 00:04:41,579
know if we can maybe get some some

99
00:04:39,899 --> 00:04:50,038
profiling I don't remember I guess we

100
00:04:41,579 --> 00:04:55,318
didn't have there it is oh dear my

101
00:04:50,038 --> 00:04:57,240
goodness why are we so slow with the why

102
00:04:55,319 --> 00:05:10,280
are we so slow with frame profiling on

103
00:04:57,240 --> 00:05:14,819
does anyone know that's that's crazy ha

104
00:05:10,279 --> 00:05:17,459
look at that if we're in threads mode we

105
00:05:14,819 --> 00:05:19,860
go very very fast if we're in frames

106
00:05:17,459 --> 00:05:24,989
mode we go extremely slowly let's pause

107
00:05:19,860 --> 00:05:27,509
right there and see what what's going on

108
00:05:24,990 --> 00:05:30,918
if I pause there and look at the clocks

109
00:05:27,509 --> 00:05:33,509
display oh it's our sprite craft sorting

110
00:05:30,918 --> 00:05:36,750
yeah you know we need to just turn

111
00:05:33,509 --> 00:05:41,848
sorting off for the debug display I feel

112
00:05:36,750 --> 00:05:44,550
like we just need to tell it to don't

113
00:05:41,848 --> 00:05:48,990
bother sorting because it's just a waste

114
00:05:44,550 --> 00:05:50,579
of everyone's time and energy with all

115
00:05:48,990 --> 00:05:52,530
these little guys here you know what I

116
00:05:50,579 --> 00:05:55,079
mean they don't need to be sorted for

117
00:05:52,529 --> 00:05:56,579
any particular reason and that builds

118
00:05:55,079 --> 00:05:59,098
fright graph just ends up being very

119
00:05:56,579 --> 00:06:00,899
very costly but what I suppose I could

120
00:05:59,098 --> 00:06:03,810
do for the time being because we know

121
00:06:00,899 --> 00:06:07,049
that our builds right craft code is very

122
00:06:03,810 --> 00:06:09,509
debug code limited I could do this as

123
00:06:07,050 --> 00:06:10,889
well but maybe I should go in while

124
00:06:09,509 --> 00:06:12,120
we're at it since we don't have to do

125
00:06:10,889 --> 00:06:15,210
the other debugging we were going to do

126
00:06:12,120 --> 00:06:18,079
today maybe I should go in and and make

127
00:06:15,209 --> 00:06:21,000
it so that that stuff doesn't get sorted

128
00:06:18,079 --> 00:06:25,769
it's crazy how much different that speed

129
00:06:21,000 --> 00:06:31,139
is there but anyway all right so you

130
00:06:25,769 --> 00:06:33,598
know here's our here's our frame layout

131
00:06:31,139 --> 00:06:35,400
and you can kind of see what most of the

132
00:06:33,598 --> 00:06:37,800
time being spent is here in fact you can

133
00:06:35,399 --> 00:06:39,899
kind of see in here we're spending most

134
00:06:37,800 --> 00:06:44,069
of our time

135
00:06:39,899 --> 00:06:46,849
doing that there most of the time is

136
00:06:44,069 --> 00:06:46,849
that frame display

137
00:06:55,750 --> 00:07:03,370
I just want to see what happens at the

138
00:06:59,410 --> 00:07:05,850
changeover point if it's a problem frame

139
00:07:03,370 --> 00:07:05,850
timewise

140
00:07:14,230 --> 00:07:19,360
it does not appear to be so it appears

141
00:07:17,709 --> 00:07:30,009
that the synchronous texture downloads

142
00:07:19,360 --> 00:07:36,090
Oh nope there it is right there so we do

143
00:07:30,009 --> 00:07:39,509
have one bad frame right you can see it

144
00:07:36,089 --> 00:07:46,479
opengl render commands 72.6 milliseconds

145
00:07:39,509 --> 00:07:52,420
how can we can't see that frame like how

146
00:07:46,480 --> 00:07:55,090
come it doesn't I feel like this display

147
00:07:52,420 --> 00:07:56,470
is bad like this is I need to fix this

148
00:07:55,089 --> 00:07:57,789
display at some point because I want to

149
00:07:56,470 --> 00:07:59,830
be able to see those single frame

150
00:07:57,790 --> 00:08:03,280
hitches and I can't see them right now

151
00:07:59,829 --> 00:08:06,569
so that that frame is not it's not doing

152
00:08:03,279 --> 00:08:06,569
its job right

153
00:08:13,689 --> 00:08:17,309
yes you can kind of see

154
00:08:26,288 --> 00:08:42,379
hmm so I don't know what the best thing

155
00:08:39,860 --> 00:08:44,509
to do there is I'm thinking maybe you

156
00:08:42,379 --> 00:08:46,039
know that's a good argument for trying

157
00:08:44,509 --> 00:08:51,350
to do some stuff with the pixel buffer

158
00:08:46,039 --> 00:08:53,059
objects or something i'm not sure but

159
00:08:51,350 --> 00:08:55,190
you can see what i'm worried about their

160
00:08:53,059 --> 00:08:56,629
right we get this like frame hitch at

161
00:08:55,190 --> 00:08:58,279
the time when the textures have to

162
00:08:56,629 --> 00:08:59,659
download this is why i would have

163
00:08:58,278 --> 00:09:01,789
preferred them to be downloading

164
00:08:59,659 --> 00:09:03,049
asynchronously because I was worried

165
00:09:01,789 --> 00:09:06,199
about what was going to happen there i'm

166
00:09:03,049 --> 00:09:11,569
not sure what that's necessarily from

167
00:09:06,200 --> 00:09:13,310
right and so what I'd like to do is I'd

168
00:09:11,570 --> 00:09:14,899
like to get rid of that if i can because

169
00:09:13,309 --> 00:09:19,069
everything else is nice and smooth but

170
00:09:14,899 --> 00:09:22,730
that transition point is you know is not

171
00:09:19,070 --> 00:09:25,700
and i think we're still giving the game

172
00:09:22,730 --> 00:09:28,339
plenty of time to understand that stuff

173
00:09:25,700 --> 00:09:31,700
so I mean the driver plant I understand

174
00:09:28,339 --> 00:09:34,520
so I feel like maybe it's worth trying

175
00:09:31,700 --> 00:09:38,990
to do the pixel buffer objects just to

176
00:09:34,519 --> 00:09:41,179
see if we can reduce that transfer time

177
00:09:38,990 --> 00:09:42,528
because yeah maybe you know having the

178
00:09:41,179 --> 00:09:44,539
additional copy is a really big problem

179
00:09:42,528 --> 00:09:47,870
for it or who knows exactly what's going

180
00:09:44,539 --> 00:09:52,429
on there so it might be nice if we could

181
00:09:47,870 --> 00:09:54,200
allocate those in you know in GPU space

182
00:09:52,429 --> 00:09:58,778
or something like that so that we

183
00:09:54,200 --> 00:09:58,778
wouldn't have that problem yeah

184
00:10:02,208 --> 00:10:06,138
I don't know I don't know whether we

185
00:10:05,058 --> 00:10:07,458
should do that now whether we should

186
00:10:06,139 --> 00:10:11,269
wait till later for that it's really

187
00:10:07,458 --> 00:10:15,308
hard to say but yeah so hopefully you

188
00:10:11,269 --> 00:10:19,399
can see why I don't love that you know

189
00:10:15,308 --> 00:10:22,909
it's it's difficult to see it happen but

190
00:10:19,399 --> 00:10:25,009
it's definitely happening right like

191
00:10:22,909 --> 00:10:27,639
it's it's not something we can really

192
00:10:25,009 --> 00:10:31,220
perceive because it happens at the flip

193
00:10:27,639 --> 00:10:33,558
so you don't see the hiccup happen per

194
00:10:31,220 --> 00:10:36,949
se but it looks like it's definitely

195
00:10:33,558 --> 00:10:39,860
there at least according to our timings

196
00:10:36,948 --> 00:10:41,178
so unless there's something else that's

197
00:10:39,860 --> 00:10:44,659
going on there I'm assuming that that's

198
00:10:41,178 --> 00:10:47,860
a pretty clear indication of badness I

199
00:10:44,659 --> 00:10:50,328
should probably just make a little

200
00:10:47,860 --> 00:10:51,919
indicator to that just tells us when we

201
00:10:50,328 --> 00:10:52,998
have a bad frame so we know like maybe

202
00:10:51,919 --> 00:10:54,649
it'll just puts up a little thing that's

203
00:10:52,999 --> 00:10:57,220
like hey there was a bad frame two

204
00:10:54,649 --> 00:10:59,629
frames ago or something like that you

205
00:10:57,220 --> 00:11:01,360
know a frame it's like an outlier in

206
00:10:59,629 --> 00:11:03,438
terms of how long the frame took

207
00:11:01,360 --> 00:11:05,480
something like this so there's certainly

208
00:11:03,438 --> 00:11:11,539
stuff we could do there that would be

209
00:11:05,480 --> 00:11:17,230
nice but anyway that is that is what

210
00:11:11,539 --> 00:11:20,118
that is and the bug is the bug is gone

211
00:11:17,230 --> 00:11:22,970
so this was our asynchronous texture

212
00:11:20,119 --> 00:11:27,829
downloads being reliable so I'm gonna

213
00:11:22,970 --> 00:11:33,100
say asynchronous texture downloads are

214
00:11:27,828 --> 00:11:42,169
now synchronous but we get hiccups which

215
00:11:33,100 --> 00:11:43,639
makes me grumpy so yeah I don't know

216
00:11:42,169 --> 00:11:44,958
like I said when we want to dress up i

217
00:11:43,639 --> 00:11:46,220
think we probably are going to want to

218
00:11:44,958 --> 00:11:47,239
address at some point i'm not going to

219
00:11:46,220 --> 00:11:54,519
probably not going to be super happy

220
00:11:47,240 --> 00:11:57,769
with that it might be fine for in game

221
00:11:54,519 --> 00:12:00,230
downloads right like when we're just

222
00:11:57,769 --> 00:12:05,089
hopping around here and we because the

223
00:12:00,230 --> 00:12:10,308
detectors are so small you know that i

224
00:12:05,089 --> 00:12:12,589
could see that being okay you know those

225
00:12:10,308 --> 00:12:14,649
download hits you maybe can just be

226
00:12:12,589 --> 00:12:17,199
slipped into the frame without a problem

227
00:12:14,649 --> 00:12:19,788
but i don't know

228
00:12:17,198 --> 00:12:21,168
the those cutscene one's definitely

229
00:12:19,788 --> 00:12:22,609
can't because they're just downloading

230
00:12:21,168 --> 00:12:25,428
at UM texture that doesn't look like the

231
00:12:22,609 --> 00:12:27,319
card is doing those as as promptly as

232
00:12:25,428 --> 00:12:28,759
they could do them or maybe it just

233
00:12:27,318 --> 00:12:30,678
needs more lead time I know but since

234
00:12:28,759 --> 00:12:32,778
it's hitting on exactly that one frame I

235
00:12:30,678 --> 00:12:35,889
think that suggests to me that the

236
00:12:32,778 --> 00:12:38,808
driver is like waiting till we actually

237
00:12:35,889 --> 00:12:41,448
do the GL text image to D and then it's

238
00:12:38,808 --> 00:12:43,028
doing it right then right well no it has

239
00:12:41,448 --> 00:12:45,828
to wait till the GL text image to D

240
00:12:43,028 --> 00:12:47,178
obviously but it's not necessarily

241
00:12:45,828 --> 00:12:51,408
overlapping it at that point or

242
00:12:47,178 --> 00:12:53,358
something or just the the copy to to GPU

243
00:12:51,408 --> 00:12:54,649
viewable memory maybe that's all of it

244
00:12:53,359 --> 00:12:55,819
and if that was the case that's great

245
00:12:54,649 --> 00:12:59,239
because that means that pixel buffer

246
00:12:55,818 --> 00:13:05,868
objects would fix it but if not then

247
00:12:59,239 --> 00:13:09,619
yeah then then not okay so let's see

248
00:13:05,869 --> 00:13:12,678
here let me let me do what we were going

249
00:13:09,619 --> 00:13:13,999
to do though and and sort of fix these

250
00:13:12,678 --> 00:13:17,389
here I'm going to take a look at our

251
00:13:13,999 --> 00:13:22,569
to-do list and put some things in here

252
00:13:17,389 --> 00:13:27,558
frame view not showing bad frames

253
00:13:22,568 --> 00:13:30,408
disabled sorting uh yeah I think that

254
00:13:27,558 --> 00:13:31,818
should do it editing system what to do

255
00:13:30,408 --> 00:13:35,718
about your graphics for entities my

256
00:13:31,818 --> 00:13:37,098
purse extremes region the LA real

257
00:13:35,719 --> 00:13:41,539
projections with solid console project

258
00:13:37,099 --> 00:13:45,889
I'm project I think we kind of did a lot

259
00:13:41,538 --> 00:13:47,749
of these but that's okay so I think the

260
00:13:45,889 --> 00:13:51,619
only thing I wanted to put on here was

261
00:13:47,749 --> 00:14:02,269
pixel buffer objects for texture

262
00:13:51,619 --> 00:14:03,319
downloads all right yeah all right so

263
00:14:02,269 --> 00:14:06,818
let's take a look at the clearing

264
00:14:03,318 --> 00:14:09,408
compatibility situation void start to

265
00:14:06,818 --> 00:14:13,548
Glu nth and vice versus would fixed

266
00:14:09,408 --> 00:14:16,849
according to this so i guess this part

267
00:14:13,548 --> 00:14:19,188
here is not a problem so it looks like

268
00:14:16,849 --> 00:14:23,899
we're mostly talking about like the

269
00:14:19,188 --> 00:14:26,889
printf and the function macros that are

270
00:14:23,899 --> 00:14:26,889
the problem here and

271
00:14:27,559 --> 00:14:33,528
yeah I don't know about the function

272
00:14:30,919 --> 00:14:35,419
macro one but the sm printf s being not

273
00:14:33,528 --> 00:14:40,909
supported and being something that

274
00:14:35,419 --> 00:14:42,709
should be replaced that is something

275
00:14:40,909 --> 00:14:49,100
that we could probably do pretty easily

276
00:14:42,710 --> 00:14:57,009
I don't know how to get to this didn't

277
00:14:49,100 --> 00:15:08,120
look like it oh maybe here let's see

278
00:14:57,009 --> 00:15:10,970
that let's see some finis functions so

279
00:15:08,120 --> 00:15:13,639
it looks like it's using v SN printf on

280
00:15:10,970 --> 00:15:15,019
other functions so you know I guess we

281
00:15:13,639 --> 00:15:17,720
have a couple different things we could

282
00:15:15,019 --> 00:15:19,789
do here but I think since I don't really

283
00:15:17,720 --> 00:15:23,330
want to use the c runtime library long

284
00:15:19,789 --> 00:15:27,049
term I think probably what we would want

285
00:15:23,330 --> 00:15:31,190
to do is be able to just do our own

286
00:15:27,049 --> 00:15:33,379
printf or something you know just take a

287
00:15:31,190 --> 00:15:38,570
look at what we're doing printf lies and

288
00:15:33,379 --> 00:15:40,939
maybe try to replace it with with

289
00:15:38,570 --> 00:15:42,530
something else so I'm going to take a

290
00:15:40,940 --> 00:15:46,490
look and I'm just going to see

291
00:15:42,529 --> 00:15:49,639
everywhere in the code where do we use a

292
00:15:46,490 --> 00:15:54,830
printf or an S printf or things like

293
00:15:49,639 --> 00:16:01,909
that so in the debug stuff what is it n

294
00:15:54,830 --> 00:16:03,770
printf so it's SN printf s and so yeah

295
00:16:01,909 --> 00:16:07,759
it looks like basically that's you know

296
00:16:03,769 --> 00:16:12,829
the win32 code i I don't know why the

297
00:16:07,759 --> 00:16:15,679
win32 code is using that to be honest

298
00:16:12,830 --> 00:16:20,259
with you I don't even know what this is

299
00:16:15,679 --> 00:16:22,699
handle debug cycle counters I that's not

300
00:16:20,259 --> 00:16:27,528
something that we even use anymore get

301
00:16:22,700 --> 00:16:32,720
let's get rid of that entirely um debug

302
00:16:27,528 --> 00:16:34,338
draw vertical this is the sound debug

303
00:16:32,720 --> 00:16:36,920
okay let's just let's get rid of all

304
00:16:34,339 --> 00:16:39,200
this stuff I don't really want any of

305
00:16:36,919 --> 00:16:40,610
this stuff in here anymore okay because

306
00:16:39,200 --> 00:16:42,940
we want to put that in a regular debug

307
00:16:40,610 --> 00:16:42,940
system

308
00:16:43,070 --> 00:16:54,420
okay so let's try that again I'm going

309
00:16:47,250 --> 00:16:58,110
to search for SN printf s and now we've

310
00:16:54,419 --> 00:17:05,129
just got here test the play cursor right

311
00:16:58,110 --> 00:17:10,259
cursor rid of those and stares another

312
00:17:05,130 --> 00:17:13,439
SN printf again with that right cursor

313
00:17:10,259 --> 00:17:20,459
in there what is this guy hammy internal

314
00:17:13,439 --> 00:17:26,308
all right all right uh so yeah so now I

315
00:17:20,459 --> 00:17:31,080
think we're just left with stuff in the

316
00:17:26,308 --> 00:17:34,048
debug system and I guess we just have a

317
00:17:31,079 --> 00:17:35,699
lot of s and printf esas through here

318
00:17:34,048 --> 00:17:39,029
because we're just printing out various

319
00:17:35,700 --> 00:17:43,220
values and so all of those are the same

320
00:17:39,029 --> 00:17:43,220
then we've got ones that are kind of

321
00:17:45,710 --> 00:17:59,308
yeah just used throughout and so I'm

322
00:17:51,960 --> 00:18:10,400
assuming we know what we use here we

323
00:17:59,308 --> 00:18:10,399
have % s % f % d % u sfu de

324
00:18:13,298 --> 00:18:31,109
I think it's behind my head all right so

325
00:18:26,919 --> 00:18:31,110
sfu d

326
00:18:31,940 --> 00:18:44,259
and that's really it

327
00:18:54,099 --> 00:19:04,279
so we would basically just need a printf

328
00:18:57,049 --> 00:19:07,339
that handles SF you and d right that's

329
00:19:04,279 --> 00:19:09,399
what we would need to do so we could if

330
00:19:07,339 --> 00:19:16,909
we wanted to implement one of those and

331
00:19:09,400 --> 00:19:24,650
and see how far we get right it probably

332
00:19:16,910 --> 00:19:28,310
would be fine so strictly out of

333
00:19:24,650 --> 00:19:31,430
curiosity if I eliminate these what

334
00:19:28,309 --> 00:19:34,789
happens and you can see I've got a tu

335
00:19:31,430 --> 00:19:36,830
TOI and SN printf s are basically the

336
00:19:34,789 --> 00:19:39,049
the two things that actually get used

337
00:19:36,829 --> 00:19:42,859
there so let's just assume that we get

338
00:19:39,049 --> 00:19:46,240
rid of those and let's go ahead and try

339
00:19:42,859 --> 00:19:51,019
to replicate them a toi is a lot easier

340
00:19:46,240 --> 00:19:53,210
obviously then then anything else is

341
00:19:51,019 --> 00:19:57,430
going to be I don't know where that hei

342
00:19:53,210 --> 00:19:57,430
actually is oh dear

343
00:20:02,558 --> 00:20:14,808
why does it say if pipe count equals one

344
00:20:05,388 --> 00:20:18,258
and there's nothing there is that what's

345
00:20:14,808 --> 00:20:22,219
supposed to be there tebow personname if

346
00:20:18,259 --> 00:20:29,808
the pipe cap is one it does nothing if

347
00:20:22,219 --> 00:20:31,369
the pipe count is that correct did I

348
00:20:29,808 --> 00:20:36,709
accidentally delete what was there no

349
00:20:31,368 --> 00:20:43,338
that's the way it's been isn't that a

350
00:20:36,709 --> 00:20:44,989
little weird I'm curious to know I feel

351
00:20:43,338 --> 00:20:48,999
like isn't this the sort of thing that

352
00:20:44,989 --> 00:20:48,999
the github should be able to do for us I

353
00:20:49,269 --> 00:20:56,028
you know I mean can can it can it look

354
00:20:52,999 --> 00:20:58,669
back at handmade debug dot cpp and tell

355
00:20:56,028 --> 00:21:02,808
me why we have a blank line there for no

356
00:20:58,669 --> 00:21:05,169
reason apparently right here can it do

357
00:21:02,808 --> 00:21:09,558
anything like that am I asking too much

358
00:21:05,169 --> 00:21:11,619
is that am I just my way out of line

359
00:21:09,558 --> 00:21:11,618
here

360
00:21:20,089 --> 00:21:31,259
yeah not feeling great about it like hey

361
00:21:27,869 --> 00:21:40,819
this is the line can you tell me I think

362
00:21:31,259 --> 00:21:40,819
about the line please I guess not yeah

363
00:21:47,900 --> 00:21:53,250
alright so I'm not going to try and

364
00:21:51,539 --> 00:21:54,450
learn to use github because I really

365
00:21:53,250 --> 00:22:03,319
want to learn to use github but point

366
00:21:54,450 --> 00:22:06,000
being that's a little weird but whatevs

367
00:22:03,319 --> 00:22:10,289
anyway we've got some functions that we

368
00:22:06,000 --> 00:22:13,920
have to replace now a toi we actually

369
00:22:10,289 --> 00:22:17,670
already wrote if i remember correctly

370
00:22:13,920 --> 00:22:20,130
because inside our handmade open jail we

371
00:22:17,670 --> 00:22:22,350
had to check for the version number and

372
00:22:20,130 --> 00:22:25,140
so we have this sort of situation here

373
00:22:22,349 --> 00:22:27,119
where when you know we wanted to do

374
00:22:25,140 --> 00:22:29,880
essentially a toi it's this thing right

375
00:22:27,119 --> 00:22:31,949
here so what i could do is like it

376
00:22:29,880 --> 00:22:33,920
basically making a 2 I in here that's

377
00:22:31,950 --> 00:22:43,019
like a like a shared version of a 2 i

378
00:22:33,920 --> 00:22:45,960
right that's like s32 from a skeezy or

379
00:22:43,019 --> 00:22:49,019
whatever right or maybe just from Z

380
00:22:45,960 --> 00:22:51,930
sitting right and so you pass in your a

381
00:22:49,019 --> 00:22:54,259
little at there and it does exactly what

382
00:22:51,930 --> 00:22:58,350
it does and then it returns the result

383
00:22:54,259 --> 00:23:02,329
so opengl parse number we can actually

384
00:22:58,349 --> 00:23:05,099
make that just be a generic function now

385
00:23:02,329 --> 00:23:09,869
and then in this place where we were

386
00:23:05,099 --> 00:23:12,509
doing a 2 I I can just do so2 from Z and

387
00:23:09,869 --> 00:23:15,689
get the line number back so I think that

388
00:23:12,509 --> 00:23:20,730
one's fine the sm print deaths are going

389
00:23:15,690 --> 00:23:23,250
to be a little bit more sort of involved

390
00:23:20,730 --> 00:23:25,769
the reason for that is that while it

391
00:23:23,250 --> 00:23:30,380
probably won't be too hard to do a

392
00:23:25,769 --> 00:23:35,079
crappy numerical output thing for % d

393
00:23:30,380 --> 00:23:39,770
you and obviously % s is trivial % f is

394
00:23:35,079 --> 00:23:42,619
like rocket science trying to print a

395
00:23:39,769 --> 00:23:45,650
floating point number if I remember

396
00:23:42,619 --> 00:23:48,709
correctly really recently there was like

397
00:23:45,650 --> 00:23:50,870
a new way of doing it that wasn't

398
00:23:48,710 --> 00:23:55,009
heinous and maybe I'll try to dig up

399
00:23:50,869 --> 00:24:00,769
that paper so we can use it but like

400
00:23:55,009 --> 00:24:03,950
doing a % f print is like insane or was

401
00:24:00,769 --> 00:24:06,019
insane and I'm hoping I'm crossing my

402
00:24:03,950 --> 00:24:08,090
fingers that they simplify now but like

403
00:24:06,019 --> 00:24:12,529
printing a floating point number is an

404
00:24:08,089 --> 00:24:14,299
epic disaster I just we'll get to that

405
00:24:12,529 --> 00:24:21,319
when we get to it but just trust me for

406
00:24:14,299 --> 00:24:22,759
now real bad roll roll bad so let's

407
00:24:21,319 --> 00:24:30,049
pretend we're going to have one of these

408
00:24:22,759 --> 00:24:31,879
here and we'll just have a you know you

409
00:24:30,049 --> 00:24:37,039
know a format string function or

410
00:24:31,880 --> 00:24:43,820
whatever and we'll have like the sort of

411
00:24:37,039 --> 00:24:47,180
death size dest format string and you

412
00:24:43,819 --> 00:24:52,250
know proportional whatever something

413
00:24:47,180 --> 00:24:58,640
like that and then we can also have a

414
00:24:52,250 --> 00:25:00,829
separate version a format string list or

415
00:24:58,640 --> 00:25:04,550
something which is the one will probably

416
00:25:00,829 --> 00:25:06,710
actually call and I'll talk a little bit

417
00:25:04,549 --> 00:25:09,409
about how these guys work I think this

418
00:25:06,710 --> 00:25:11,920
is like it VAR d list or something like

419
00:25:09,410 --> 00:25:14,990
this I don't remember how these guys go

420
00:25:11,920 --> 00:25:17,870
but anyway so we'd want to call format

421
00:25:14,990 --> 00:25:23,029
string with death scythe dest format and

422
00:25:17,869 --> 00:25:26,619
the dot in place of our SN printf and so

423
00:25:23,029 --> 00:25:26,619
yeah like

424
00:25:30,259 --> 00:25:37,859
this gets a little bit into the vagaries

425
00:25:33,839 --> 00:25:41,970
of the C and C++ default calling

426
00:25:37,859 --> 00:25:48,619
convention and i'll go ahead and sort of

427
00:25:41,970 --> 00:25:51,720
give you a little bit of a sort of a

428
00:25:48,619 --> 00:25:56,639
light sort of introduction into how

429
00:25:51,720 --> 00:25:58,380
these guys work well you know what let

430
00:25:56,640 --> 00:25:59,430
me actually do it this way because I

431
00:25:58,380 --> 00:26:02,460
think this might be a little more

432
00:25:59,430 --> 00:26:03,750
interesting to see but i'll give you a

433
00:26:02,460 --> 00:26:06,299
little background on it and then we'll

434
00:26:03,750 --> 00:26:07,859
get that part of it going and then we'll

435
00:26:06,299 --> 00:26:12,059
see how far we can get in reading the

436
00:26:07,859 --> 00:26:13,919
format string so uh where's my wintered

437
00:26:12,059 --> 00:26:15,179
there it is this is my like little EE

438
00:26:13,920 --> 00:26:18,480
project that I made for searching for

439
00:26:15,180 --> 00:26:22,289
things yes prepare the solution keep on

440
00:26:18,480 --> 00:26:26,370
preparing that solution good job so if I

441
00:26:22,289 --> 00:26:31,950
want to do a VA start here and I want to

442
00:26:26,369 --> 00:26:36,709
go to the definition of the okay the

443
00:26:31,950 --> 00:26:42,870
package server has stopped working well

444
00:26:36,710 --> 00:26:44,940
that seems bad all right so anyway these

445
00:26:42,869 --> 00:26:48,239
guys VA start VAR GA end which will be

446
00:26:44,940 --> 00:26:51,120
using and you'll see those those are

447
00:26:48,240 --> 00:26:52,500
defined to go to this these sort of

448
00:26:51,119 --> 00:26:55,889
interim ackles which I believe get

449
00:26:52,500 --> 00:26:59,700
redefined yet again in here but anyway

450
00:26:55,890 --> 00:27:02,690
here's the actual macros themselves and

451
00:26:59,700 --> 00:27:05,160
you can kind of see what they're doing

452
00:27:02,690 --> 00:27:08,279
so this doesn't really have to be a

453
00:27:05,160 --> 00:27:11,040
mystery I'll cut and paste these guys

454
00:27:08,279 --> 00:27:13,500
out so you can sort of see what's

455
00:27:11,039 --> 00:27:15,389
happening here but hopefully it'll it'll

456
00:27:13,500 --> 00:27:17,160
make a little more sense as I walk

457
00:27:15,390 --> 00:27:20,550
through it because it's actually it's

458
00:27:17,160 --> 00:27:22,350
not that mystical and it's kind of

459
00:27:20,549 --> 00:27:26,639
interesting to see how this stuff ends

460
00:27:22,349 --> 00:27:31,529
up working anyway that address of I'd

461
00:27:26,640 --> 00:27:35,630
like to get as well where are you go to

462
00:27:31,529 --> 00:27:39,599
definition there you are scrap that out

463
00:27:35,630 --> 00:27:42,510
copy and actually you know what since I

464
00:27:39,599 --> 00:27:42,908
hate C++ let's actually use the non C++

465
00:27:42,509 --> 00:27:46,960
way

466
00:27:42,909 --> 00:27:49,149
there we go uh so let's talk about this

467
00:27:46,960 --> 00:27:50,649
what we have to do here before I dive

468
00:27:49,148 --> 00:27:52,148
into it and let me give you a little bit

469
00:27:50,648 --> 00:27:56,829
of a background on what's going on here

470
00:27:52,148 --> 00:28:09,038
with variable argument list stuff so as

471
00:27:56,829 --> 00:28:18,220
you know here on day 3 26 oops 306 as

472
00:28:09,038 --> 00:28:19,778
you know variable are twists normally

473
00:28:18,220 --> 00:28:22,179
when we call a function and we've talked

474
00:28:19,778 --> 00:28:24,429
about this a bunch of times we'll see a

475
00:28:22,179 --> 00:28:27,999
function signature and it looks

476
00:28:24,429 --> 00:28:31,179
something like int foo you know int X

477
00:28:27,999 --> 00:28:35,048
right and then we've got some stuff in

478
00:28:31,179 --> 00:28:38,048
here and this stuff uses X right and so

479
00:28:35,048 --> 00:28:41,648
we've talked about this before where we

480
00:28:38,048 --> 00:28:43,569
sort of imagine because we you know this

481
00:28:41,648 --> 00:28:46,748
the sea specification doesn't really

482
00:28:43,569 --> 00:28:48,819
necessarily say very much about how the

483
00:28:46,749 --> 00:28:50,319
stack is supposed to be allocated or

484
00:28:48,819 --> 00:28:51,999
moved around or any of that sort of

485
00:28:50,319 --> 00:28:55,928
stuff necessarily but we do know a few

486
00:28:51,999 --> 00:28:58,450
things but what we know abstractly in

487
00:28:55,929 --> 00:29:00,729
terms of what's happening is just that

488
00:28:58,450 --> 00:29:03,340
there is such a thing as the program

489
00:29:00,729 --> 00:29:06,669
stack which is a bunch of memory that is

490
00:29:03,339 --> 00:29:08,618
used and as you enter functions things

491
00:29:06,669 --> 00:29:10,809
get pushed onto the stack and as you

492
00:29:08,618 --> 00:29:12,878
exit function they get pushed off and i

493
00:29:10,808 --> 00:29:16,960
believe the stack grows Down Goes

494
00:29:12,878 --> 00:29:19,778
negatively on x64 if I remember

495
00:29:16,960 --> 00:29:23,139
correctly so you know as you push stuff

496
00:29:19,778 --> 00:29:25,960
on you're going down you know lower down

497
00:29:23,138 --> 00:29:28,719
the stack as opposed to up right in our

498
00:29:25,960 --> 00:29:30,700
memory arenas we push on to them so our

499
00:29:28,720 --> 00:29:33,149
addresses get higher I believe the

500
00:29:30,700 --> 00:29:34,778
program goes down don't quote me on that

501
00:29:33,148 --> 00:29:36,398
it's one of those things I never

502
00:29:34,778 --> 00:29:38,499
remember which way because I don't

503
00:29:36,398 --> 00:29:39,459
program in a semi language if you very

504
00:29:38,499 --> 00:29:40,710
much simulator which you would remember

505
00:29:39,460 --> 00:29:43,690
since you'd be doing it all the time

506
00:29:40,710 --> 00:29:46,119
anyway so what ends up happening when

507
00:29:43,690 --> 00:29:49,720
you call a function right is the

508
00:29:46,118 --> 00:29:53,319
parameter for the function assuming that

509
00:29:49,720 --> 00:29:56,319
it fits in a register will just stay in

510
00:29:53,319 --> 00:29:59,950
the register right so you know

511
00:29:56,319 --> 00:30:02,349
if it can if it can pass the values to

512
00:29:59,950 --> 00:30:04,058
foo in a register than it will but you

513
00:30:02,349 --> 00:30:05,949
can imagine having stuff that's too big

514
00:30:04,058 --> 00:30:08,678
for registers like maybe this passes a

515
00:30:05,950 --> 00:30:10,419
whole struct like there's a struct bar

516
00:30:08,679 --> 00:30:11,860
or something that needs to get past it's

517
00:30:10,419 --> 00:30:13,538
got a ton of stuff in it you know you

518
00:30:11,859 --> 00:30:15,490
could imagine there being stuff that you

519
00:30:13,538 --> 00:30:18,069
can't fit and of course when you can't

520
00:30:15,490 --> 00:30:20,230
fit something then it needs to be pushed

521
00:30:18,069 --> 00:30:22,388
on to the stack and so what ends up

522
00:30:20,230 --> 00:30:24,909
happening is you know you push on say

523
00:30:22,388 --> 00:30:26,678
this bar here that happened that goes on

524
00:30:24,909 --> 00:30:28,240
there and if there was another Barbie

525
00:30:26,679 --> 00:30:30,370
you know that would go on there as well

526
00:30:28,240 --> 00:30:32,798
you just kind of go on there when this

527
00:30:30,369 --> 00:30:34,569
function executes its going to use these

528
00:30:32,798 --> 00:30:37,599
locations where those things were pushed

529
00:30:34,569 --> 00:30:39,908
to do work on a and B and whatever and

530
00:30:37,599 --> 00:30:42,099
then when it's done it's going to pop

531
00:30:39,909 --> 00:30:43,659
the stack back to hear right so you

532
00:30:42,099 --> 00:30:45,339
basically have this this proud and

533
00:30:43,659 --> 00:30:47,950
execution is every time you call into

534
00:30:45,339 --> 00:30:49,778
something the stack is growing and then

535
00:30:47,950 --> 00:30:52,720
every time you return from something to

536
00:30:49,778 --> 00:30:55,359
stack shrinks right and that's how you

537
00:30:52,720 --> 00:30:57,548
know those calls sort of work so what

538
00:30:55,359 --> 00:31:01,240
happens in a variable argument list

539
00:30:57,548 --> 00:31:03,190
function is actually very simple what

540
00:31:01,240 --> 00:31:05,620
happens is we have a function like int

541
00:31:03,190 --> 00:31:07,899
foo in X but then instead of specifying

542
00:31:05,619 --> 00:31:10,719
what comes after the in X we just know

543
00:31:07,898 --> 00:31:13,658
that there's some more functions right

544
00:31:10,720 --> 00:31:16,360
I'm sorry some more parameters so what

545
00:31:13,659 --> 00:31:19,720
happens is at the call site to foo these

546
00:31:16,359 --> 00:31:22,359
extra parameters just get pushed on to

547
00:31:19,720 --> 00:31:27,519
the stack just like ABCD whatever they

548
00:31:22,359 --> 00:31:30,579
just get pushed on right then when the

549
00:31:27,519 --> 00:31:32,440
function returns they will get cleaned

550
00:31:30,579 --> 00:31:35,619
up usually by the caller since the

551
00:31:32,440 --> 00:31:38,169
caller knows how many pushed on it will

552
00:31:35,619 --> 00:31:40,599
actually do the fix-up to pop them off

553
00:31:38,169 --> 00:31:42,759
in at least in the old days I don't

554
00:31:40,599 --> 00:31:44,798
really know the x64 ABI works I haven't

555
00:31:42,759 --> 00:31:46,899
looked at it in detail myself so i'm not

556
00:31:44,798 --> 00:31:49,418
sure but somebody who knows how many

557
00:31:46,898 --> 00:31:51,128
things got pushed on will make sure that

558
00:31:49,419 --> 00:31:57,460
it moves the stack pointer back to where

559
00:31:51,128 --> 00:31:59,709
it should be right and so when you

560
00:31:57,460 --> 00:32:01,389
actually do this sitting on the stack or

561
00:31:59,710 --> 00:32:02,860
these are is all this data that gap

562
00:32:01,388 --> 00:32:05,558
pushed on based on how many parameters

563
00:32:02,859 --> 00:32:07,028
you specified like with a printf you

564
00:32:05,558 --> 00:32:08,918
know you passed by the format string and

565
00:32:07,028 --> 00:32:09,778
then you put as many things on the end

566
00:32:08,919 --> 00:32:11,249
as you want well

567
00:32:09,778 --> 00:32:13,378
each one of those gets pushed on the

568
00:32:11,249 --> 00:32:15,899
stack but now the question is how does

569
00:32:13,378 --> 00:32:17,519
the actual function get them off of the

570
00:32:15,898 --> 00:32:19,228
stack right because we know that

571
00:32:17,519 --> 00:32:22,348
typically we just refer to things by

572
00:32:19,229 --> 00:32:24,719
name and the compiler is silently every

573
00:32:22,348 --> 00:32:27,028
time we talk about X or a or b in that

574
00:32:24,719 --> 00:32:29,249
function foo it just knows where the

575
00:32:27,028 --> 00:32:31,469
offset is in the stack but since it

576
00:32:29,249 --> 00:32:32,879
there is no function signature here we

577
00:32:31,469 --> 00:32:34,109
just know there's a bunch of random

578
00:32:32,878 --> 00:32:36,358
arguments that nobody knows what they

579
00:32:34,108 --> 00:32:38,009
are we can't refer to them by name and

580
00:32:36,358 --> 00:32:40,829
the compiler doesn't know where they are

581
00:32:38,009 --> 00:32:44,519
it just knows Dave some sequence of them

582
00:32:40,829 --> 00:32:51,199
stuffed on the stack so that's where the

583
00:32:44,519 --> 00:32:53,308
macros for VA you know start VA and etc

584
00:32:51,200 --> 00:32:55,919
there are these macros that the C

585
00:32:53,308 --> 00:32:59,098
library provides which basically involve

586
00:32:55,919 --> 00:33:02,099
taking the address of the parameters

587
00:32:59,098 --> 00:33:05,128
here which I believe are then required

588
00:33:02,098 --> 00:33:07,888
like in a ver arms function I believe

589
00:33:05,128 --> 00:33:11,608
the compiler is then required not to

590
00:33:07,888 --> 00:33:13,199
pass the final named argument in a

591
00:33:11,608 --> 00:33:14,519
register I think it's required to pass

592
00:33:13,200 --> 00:33:18,139
it on the stack so that it knows where

593
00:33:14,519 --> 00:33:20,069
it is I think that's my recollection but

594
00:33:18,138 --> 00:33:23,278
basically what these macros do is they

595
00:33:20,069 --> 00:33:26,158
use the address of the last named

596
00:33:23,278 --> 00:33:29,848
variable to know where the next name

597
00:33:26,159 --> 00:33:32,399
variable is going to be and then you

598
00:33:29,848 --> 00:33:34,888
just say exactly like we do with like

599
00:33:32,398 --> 00:33:36,569
our raw memory stuff you just say what

600
00:33:34,888 --> 00:33:40,319
you think it should be and it will

601
00:33:36,569 --> 00:33:42,058
advance by that much right so if I think

602
00:33:40,319 --> 00:33:43,918
there's going to be an integer there it

603
00:33:42,058 --> 00:33:46,588
will advance the integer and it's just

604
00:33:43,919 --> 00:33:48,570
hopes I'm right and so that's where like

605
00:33:46,588 --> 00:33:50,729
the format string of printf comes in for

606
00:33:48,569 --> 00:33:53,548
example that format string of printf is

607
00:33:50,729 --> 00:33:56,669
just a string that printf purses and

608
00:33:53,548 --> 00:33:58,858
when it sees something like % d it knows

609
00:33:56,669 --> 00:34:00,538
to advance one integers worth of space

610
00:33:58,858 --> 00:34:03,358
on the stack and pull that off as an

611
00:34:00,538 --> 00:34:05,249
integer right so all these very large

612
00:34:03,358 --> 00:34:07,588
things are doing is they're walking the

613
00:34:05,249 --> 00:34:09,750
stack like regular memory just like we

614
00:34:07,588 --> 00:34:13,168
do and they're using the format string

615
00:34:09,750 --> 00:34:15,449
to figure out how big and of what type

616
00:34:13,168 --> 00:34:19,108
the thing on the stack in that location

617
00:34:15,449 --> 00:34:20,788
is right so it's very very similar to

618
00:34:19,108 --> 00:34:23,639
what we do with our push truck stuff

619
00:34:20,789 --> 00:34:26,040
right only this case it's using a stray

620
00:34:23,639 --> 00:34:29,069
and it's parsing the string so we just

621
00:34:26,039 --> 00:34:32,759
need to do exactly that and off we go

622
00:34:29,070 --> 00:34:34,289
now you can see here right exactly how

623
00:34:32,760 --> 00:34:37,410
these work they work exactly like I just

624
00:34:34,289 --> 00:34:40,050
said the ver argh start part of things

625
00:34:37,409 --> 00:34:43,199
you can see it takes the address of

626
00:34:40,050 --> 00:34:45,990
whatever the function the whatever the

627
00:34:43,199 --> 00:34:47,969
variable is that you give it and the

628
00:34:45,989 --> 00:34:50,369
variable you give it has to be the last

629
00:34:47,969 --> 00:34:51,719
one right so it has to be this one right

630
00:34:50,369 --> 00:34:54,929
here because like I said it's going to

631
00:34:51,719 --> 00:34:57,419
look after it and then it adds however

632
00:34:54,929 --> 00:34:59,039
big that thing is because it needs to

633
00:34:57,420 --> 00:35:00,900
skip over it now you'll notice it

634
00:34:59,039 --> 00:35:03,269
doesn't use size' but it rather uses in

635
00:35:00,900 --> 00:35:06,090
size of and what does in size of do well

636
00:35:03,269 --> 00:35:09,030
in size of rounds the size of that thing

637
00:35:06,090 --> 00:35:11,070
up to the nearest integer boundary right

638
00:35:09,030 --> 00:35:13,500
this is plus you can see it doing it

639
00:35:11,070 --> 00:35:15,120
here it's rounding up right to the size

640
00:35:13,500 --> 00:35:17,099
of the nearest ensure the reason for

641
00:35:15,119 --> 00:35:19,529
that is because that's the speck of vert

642
00:35:17,099 --> 00:35:23,039
ards the sea spec says ver arms are

643
00:35:19,530 --> 00:35:25,769
passed in size chunks that are integer

644
00:35:23,039 --> 00:35:28,679
with right so even if you're only going

645
00:35:25,769 --> 00:35:30,539
to pass one bite it still uses an inch

646
00:35:28,679 --> 00:35:34,769
worth of space on the stack for it I

647
00:35:30,539 --> 00:35:40,019
don't know why it's SPECT that way it

648
00:35:34,769 --> 00:35:43,079
just is right and to be honest I think

649
00:35:40,019 --> 00:35:44,789
that's not compiler specific I think

650
00:35:43,079 --> 00:35:49,199
that might actually just literally be in

651
00:35:44,789 --> 00:35:51,239
the sea spec that it is incised I just I

652
00:35:49,199 --> 00:35:53,069
just think that's true but don't quote

653
00:35:51,239 --> 00:35:54,479
me on that maybe it is compressor but I

654
00:35:53,070 --> 00:35:58,470
think that's just actually do it

655
00:35:54,480 --> 00:36:01,619
specified so that's it right and you can

656
00:35:58,469 --> 00:36:05,099
see how you when you do see our TV are

657
00:36:01,619 --> 00:36:07,799
great so see start it's like getting the

658
00:36:05,099 --> 00:36:10,019
address to the first one VA argh is

659
00:36:07,800 --> 00:36:11,700
pulling off one argument and you pass

660
00:36:10,019 --> 00:36:13,619
what the type is and you can see it

661
00:36:11,699 --> 00:36:15,629
looks just like our push struct right

662
00:36:13,619 --> 00:36:18,029
we're going to cast to that type and

663
00:36:15,630 --> 00:36:22,849
we're going to in here say advanced by

664
00:36:18,030 --> 00:36:25,320
however big that type has to be and and

665
00:36:22,849 --> 00:36:27,150
like take wherever the stack is we're

666
00:36:25,320 --> 00:36:28,640
going to move it that far we're going to

667
00:36:27,150 --> 00:36:31,110
advance and we're going to return

668
00:36:28,639 --> 00:36:33,000
wherever we were before because that's

669
00:36:31,110 --> 00:36:35,099
you know that's where the thing actually

670
00:36:33,000 --> 00:36:37,170
was so this is just shorthand for like

671
00:36:35,099 --> 00:36:37,469
hey I need to advance this pointer for

672
00:36:37,170 --> 00:36:39,240
words

673
00:36:37,469 --> 00:36:41,848
by the size and thank consumed but hey

674
00:36:39,239 --> 00:36:43,289
the user wants to get back where i was

675
00:36:41,849 --> 00:36:47,130
before so I'm just going to subtract

676
00:36:43,289 --> 00:36:49,529
that out you know to give them the right

677
00:36:47,130 --> 00:36:52,430
return by VA n doesn't really do

678
00:36:49,530 --> 00:36:56,250
anything it's it's really just I think

679
00:36:52,429 --> 00:36:59,460
some kind of a tidy-up thing in case it

680
00:36:56,250 --> 00:37:01,980
needed to reserve something for I mean

681
00:36:59,460 --> 00:37:03,690
maybe some compiler implementations need

682
00:37:01,980 --> 00:37:04,920
to do something that would have to free

683
00:37:03,690 --> 00:37:07,019
something here or something like that I

684
00:37:04,920 --> 00:37:09,450
don't know so you're supposed to call VA

685
00:37:07,019 --> 00:37:11,659
n but it doesn't do anything not on msvc

686
00:37:09,449 --> 00:37:15,319
anyway and I don't think on llvm either

687
00:37:11,659 --> 00:37:18,469
but on some compiler somewhere it might

688
00:37:15,320 --> 00:37:22,410
or maybe I'm like a different platform

689
00:37:18,469 --> 00:37:25,769
all right so anyway if we go ahead and

690
00:37:22,409 --> 00:37:28,250
do these guys we don't actually need to

691
00:37:25,769 --> 00:37:38,579
keep these here we can use like VA start

692
00:37:28,250 --> 00:37:40,230
VA or NVA end and I guess what I also

693
00:37:38,579 --> 00:37:42,420
want to point is I'm doing this in two

694
00:37:40,230 --> 00:37:44,539
parts and the reason for that is I would

695
00:37:42,420 --> 00:37:47,519
like to be able to call format string

696
00:37:44,539 --> 00:37:50,219
with a ver args function or from

697
00:37:47,519 --> 00:37:52,259
somebody who who themselves was a ver

698
00:37:50,219 --> 00:37:55,889
artists function and already got the

699
00:37:52,260 --> 00:37:58,020
list right so really the VA start VA end

700
00:37:55,889 --> 00:38:02,338
are going to be here and they're going

701
00:37:58,019 --> 00:38:12,750
to sort of create the list right this is

702
00:38:02,338 --> 00:38:17,789
our our list like so so these guys their

703
00:38:12,750 --> 00:38:21,349
wives did that okay these guys create

704
00:38:17,789 --> 00:38:24,349
the list and then just we'll just call a

705
00:38:21,349 --> 00:38:24,349
function

706
00:38:27,420 --> 00:38:31,780
return the result and then this format

707
00:38:30,429 --> 00:38:33,759
string list right here is the guy who

708
00:38:31,780 --> 00:38:36,040
will do all the work he has the arglist

709
00:38:33,760 --> 00:38:38,920
so he's going to pull off the things in

710
00:38:36,039 --> 00:38:44,139
the yard list as he understands what

711
00:38:38,920 --> 00:38:47,170
they should do right okay so what we

712
00:38:44,139 --> 00:38:54,549
want to do now is we want to you know

713
00:38:47,170 --> 00:38:56,050
loop over these characters and I'm going

714
00:38:54,550 --> 00:38:57,550
to consume different numbers of them so

715
00:38:56,050 --> 00:39:08,769
you know honestly I'll probably just do

716
00:38:57,550 --> 00:39:12,610
this be that way so what we're going to

717
00:39:08,769 --> 00:39:20,460
do here is we're going to take a look at

718
00:39:12,610 --> 00:39:26,260
what the what the value tells us right

719
00:39:20,460 --> 00:39:31,329
and in this case I think I might not

720
00:39:26,260 --> 00:39:33,760
really need a switch yet right probably

721
00:39:31,329 --> 00:39:37,420
what I want to do first is just say you

722
00:39:33,760 --> 00:39:40,920
know if at equals percent then I know

723
00:39:37,420 --> 00:39:44,230
that I have to do some sort of parsing

724
00:39:40,920 --> 00:39:47,260
right and if it doesn't then I know I'm

725
00:39:44,230 --> 00:39:51,789
just retiring a regular character so I

726
00:39:47,260 --> 00:39:54,160
want to just try to get this started in

727
00:39:51,789 --> 00:39:55,480
a very basic way so what I'm going to do

728
00:39:54,159 --> 00:40:01,509
first is I'm going to try and just make

729
00:39:55,480 --> 00:40:05,199
something that just rights to the buffer

730
00:40:01,510 --> 00:40:06,880
and it strips out just these the

731
00:40:05,199 --> 00:40:09,429
percents right so it's not going to do

732
00:40:06,880 --> 00:40:11,440
any conversions yet so what I want to do

733
00:40:09,429 --> 00:40:15,190
for this is I'm going to add the utility

734
00:40:11,440 --> 00:40:17,889
thing here that's like a you know format

735
00:40:15,190 --> 00:40:22,240
desk or something like that and format

736
00:40:17,889 --> 00:40:25,150
desk is going to have a size and a desk

737
00:40:22,239 --> 00:40:29,619
pointer something like that so that i

738
00:40:25,150 --> 00:40:32,670
can say like format dust dust and you

739
00:40:29,619 --> 00:40:32,670
know maybe something like this

740
00:40:32,690 --> 00:40:37,700
and that's just so I can keep track of

741
00:40:35,449 --> 00:40:40,730
how much space i have and where I am in

742
00:40:37,699 --> 00:40:43,279
the destination because that just makes

743
00:40:40,730 --> 00:40:44,929
it a lot easier for me right then when

744
00:40:43,280 --> 00:40:48,319
I'm done it's pretty easy to see how

745
00:40:44,929 --> 00:40:50,989
much space i actually used because all i

746
00:40:48,318 --> 00:40:53,300
have to do is say well wherever i ended

747
00:40:50,989 --> 00:40:56,568
up minus wherever i started is how much

748
00:40:53,300 --> 00:41:00,079
i used right so that's that's pretty

749
00:40:56,568 --> 00:41:07,608
basic now what I would like to do in all

750
00:41:00,079 --> 00:41:13,818
cases also is say you know assuming that

751
00:41:07,608 --> 00:41:16,400
the destination you know if desk dot

752
00:41:13,818 --> 00:41:18,500
size assuming that there is any

753
00:41:16,400 --> 00:41:20,660
destination at all I want to make sure

754
00:41:18,500 --> 00:41:24,139
that if I run out of space I always null

755
00:41:20,659 --> 00:41:31,039
terminate so what I want to do is at the

756
00:41:24,139 --> 00:41:35,348
end of everything i want to say if there

757
00:41:31,039 --> 00:41:38,900
is sized remaining right then i want a

758
00:41:35,349 --> 00:41:45,170
desk and then maybe i'll make that a

759
00:41:38,900 --> 00:41:47,780
gnat if their size remaining then I want

760
00:41:45,170 --> 00:41:52,338
to know terminate if there isn't any

761
00:41:47,780 --> 00:41:58,670
space remaining then I want to that's

762
00:41:52,338 --> 00:42:00,650
not what I wanted if there isn't any

763
00:41:58,670 --> 00:42:03,108
space remaining then I'm going to

764
00:42:00,650 --> 00:42:05,630
overwrite whatever the the final

765
00:42:03,108 --> 00:42:08,059
character was with a zero because I

766
00:42:05,630 --> 00:42:10,880
never want to not have a null terminator

767
00:42:08,059 --> 00:42:12,469
at the end so yeah if there is space

768
00:42:10,880 --> 00:42:15,108
remaining we'll just null terminate if

769
00:42:12,469 --> 00:42:17,149
there isn't space remaining we overwrite

770
00:42:15,108 --> 00:42:19,009
the last character with an L and we know

771
00:42:17,150 --> 00:42:20,568
that we can always override the previous

772
00:42:19,010 --> 00:42:22,940
character because we know we always have

773
00:42:20,568 --> 00:42:25,519
at least some size to begin with so

774
00:42:22,940 --> 00:42:29,929
there's no way we can ever have a fault

775
00:42:25,519 --> 00:42:31,429
there by going before the buffer so when

776
00:42:29,929 --> 00:42:37,219
are we coming here I'm just going to go

777
00:42:31,429 --> 00:42:39,710
ahead and say okay you know i'm going to

778
00:42:37,219 --> 00:42:43,819
output a care here so i'll just say like

779
00:42:39,710 --> 00:42:46,849
out care dest

780
00:42:43,820 --> 00:42:50,110
whatever the character actually is and

781
00:42:46,849 --> 00:42:55,549
this will just be a really simple

782
00:42:50,110 --> 00:43:00,860
function again not we're not going for

783
00:42:55,550 --> 00:43:09,620
speed here certainly but all this does

784
00:43:00,860 --> 00:43:16,690
is say okay if nest sighs this size is

785
00:43:09,619 --> 00:43:21,529
minus dust at this plus equals value

786
00:43:16,690 --> 00:43:23,119
right so all I'm doing there is just

787
00:43:21,530 --> 00:43:26,960
putting characters into the output

788
00:43:23,119 --> 00:43:29,269
buffer so that's really all I wanted to

789
00:43:26,960 --> 00:43:30,860
do at first and i'd like to go ahead and

790
00:43:29,269 --> 00:43:33,500
get that stuff working before we try to

791
00:43:30,860 --> 00:43:35,329
do any of the vert argh stuff and then

792
00:43:33,500 --> 00:43:39,170
inside here while we're looping through

793
00:43:35,329 --> 00:43:40,730
at I you know actually I guess I could

794
00:43:39,170 --> 00:43:43,940
write this a little more succinctly like

795
00:43:40,730 --> 00:43:46,909
so and did here i'm just going to

796
00:43:43,940 --> 00:43:48,710
advance it without doing anything so now

797
00:43:46,909 --> 00:43:51,949
we can get rid of all this stuff that

798
00:43:48,710 --> 00:43:53,869
was just there for example just to let

799
00:43:51,949 --> 00:44:01,509
you know what's going on and so now we

800
00:43:53,869 --> 00:44:09,109
should need what is it varargs dot h

801
00:44:01,510 --> 00:44:14,920
think yeah there we go too many actual

802
00:44:09,110 --> 00:44:14,920
parameters for macro VA arc okay

803
00:44:18,420 --> 00:44:31,090
VA start i should say definition go to

804
00:44:22,570 --> 00:44:37,830
definition but but but that's how many

805
00:44:31,090 --> 00:44:37,829
they're supposed to be which is to write

806
00:44:42,000 --> 00:44:45,389
am i missing something

807
00:44:51,139 --> 00:45:07,000
I must be missing something well let's

808
00:44:55,039 --> 00:45:07,000
look here our pointer previous / am hmm

809
00:45:08,800 --> 00:45:14,740
how many parameters did you think there

810
00:45:12,110 --> 00:45:14,740
should be

811
00:45:25,429 --> 00:45:29,649
oh you know what I just realized I

812
00:45:30,068 --> 00:45:34,670
included the run function varargs is the

813
00:45:33,079 --> 00:45:36,950
old one standard args is the new one

814
00:45:34,670 --> 00:45:40,099
that's probably why it's probably a

815
00:45:36,949 --> 00:45:43,848
different macro all right so now all we

816
00:45:40,099 --> 00:45:46,700
have to do and by the way when we

817
00:45:43,849 --> 00:45:50,000
finally get rid of the CRT as well we're

818
00:45:46,699 --> 00:45:51,889
going to have to copy and paste

819
00:45:50,000 --> 00:45:53,869
essentially those there are macros

820
00:45:51,889 --> 00:45:56,568
ourselves because you have to have them

821
00:45:53,869 --> 00:45:59,240
right so that has to be / compiler

822
00:45:56,568 --> 00:46:00,349
eventually but we'll only need those we

823
00:45:59,239 --> 00:46:01,549
won't need the whole printf right

824
00:46:00,349 --> 00:46:05,269
because we're implementing the printf

825
00:46:01,550 --> 00:46:09,950
ourselves anyway so SN printf is now our

826
00:46:05,269 --> 00:46:11,568
format string call and we can get rid of

827
00:46:09,949 --> 00:46:13,189
this weird dance we had to do where we

828
00:46:11,568 --> 00:46:15,710
had to pass sighs twice which I don't

829
00:46:13,190 --> 00:46:17,809
really understand why right but that's

830
00:46:15,710 --> 00:46:24,079
what it actually should look at look

831
00:46:17,809 --> 00:46:26,440
like now you mean conversion from size t

832
00:46:24,079 --> 00:46:29,089
to you 32 I'm going to go ahead and say

833
00:46:26,440 --> 00:46:32,030
we'll let format string just to make it

834
00:46:29,088 --> 00:46:35,480
easier on ourselves will let format

835
00:46:32,030 --> 00:46:38,210
string take a full size there there's no

836
00:46:35,480 --> 00:46:41,420
real reason for us not to so we could

837
00:46:38,210 --> 00:46:45,318
just let it take memory size stuff and

838
00:46:41,420 --> 00:46:51,159
that's fine let's see from institute for

839
00:46:45,318 --> 00:46:53,420
to you 32 wait didn't finish yeah areas

840
00:46:51,159 --> 00:46:55,039
so yeah so now i just kind of have to go

841
00:46:53,420 --> 00:46:57,920
through here and i'm going to switch the

842
00:46:55,039 --> 00:46:59,329
other one so my head's not behind it but

843
00:46:57,920 --> 00:47:02,059
i'm just going to loop through these

844
00:46:59,329 --> 00:47:06,920
guys and change them to format string so

845
00:47:02,059 --> 00:47:10,040
there's format string and sort of get

846
00:47:06,920 --> 00:47:11,450
rid of all this ugliness it's like much

847
00:47:10,039 --> 00:47:14,150
nicer this way too because now we don't

848
00:47:11,449 --> 00:47:17,598
have these weird SN printf nonsense

849
00:47:14,150 --> 00:47:19,900
things that it wanted us to do which is

850
00:47:17,599 --> 00:47:19,900
nice

851
00:47:24,989 --> 00:47:32,349
yeah you know what's interesting is we

852
00:47:30,219 --> 00:47:34,959
could also make this more systemic if we

853
00:47:32,349 --> 00:47:37,269
wanted to the app the whole app plus

854
00:47:34,960 --> 00:47:39,519
thing we could actually just make that

855
00:47:37,269 --> 00:47:41,440
be our own sort of string out thing

856
00:47:39,519 --> 00:47:45,460
because we already have that desk one

857
00:47:41,440 --> 00:47:47,590
right that I made for the actual printf

858
00:47:45,460 --> 00:47:53,530
function itself so we could actually if

859
00:47:47,590 --> 00:47:55,420
we wanted to be mr. reusing pants we

860
00:47:53,530 --> 00:47:57,430
could actually just just repurpose that

861
00:47:55,420 --> 00:47:58,960
for this as well we can kind of see

862
00:47:57,429 --> 00:48:01,719
what's happening here we could totally

863
00:47:58,960 --> 00:48:12,699
do that so maybe that's a cool idea as

864
00:48:01,719 --> 00:48:14,139
well right a lot of times you can just

865
00:48:12,699 --> 00:48:16,419
sort of see stuff like that you know you

866
00:48:14,139 --> 00:48:17,920
can just sort of see like oh okay you

867
00:48:16,420 --> 00:48:19,990
know I see what this this function is

868
00:48:17,920 --> 00:48:22,180
doing it's just concatenating a bunch of

869
00:48:19,989 --> 00:48:23,769
things together and that's sort of what

870
00:48:22,179 --> 00:48:26,259
I needed to do inside the other function

871
00:48:23,769 --> 00:48:28,480
as well to prevent me from writing off

872
00:48:26,260 --> 00:48:29,710
the end of the string potentially and so

873
00:48:28,480 --> 00:48:31,719
maybe I just make a little thing a

874
00:48:29,710 --> 00:48:34,329
little cursor like thing that I can just

875
00:48:31,719 --> 00:48:37,919
use to stream out strings and maybe

876
00:48:34,329 --> 00:48:46,150
that's really cool you know who knows

877
00:48:37,920 --> 00:48:48,300
maybe it's not I don't know I really

878
00:48:46,150 --> 00:48:48,300
don't

879
00:49:07,789 --> 00:49:19,380
sorry this is a bit boring now coming up

880
00:49:13,199 --> 00:49:23,789
over my my own typing area that's not

881
00:49:19,380 --> 00:49:27,900
polite mr. notice let's not polite it

882
00:49:23,789 --> 00:49:29,639
all again nothing happening here really

883
00:49:27,900 --> 00:49:33,059
than me just like rearranging getting

884
00:49:29,639 --> 00:49:35,608
rid of the cruft that was in there from

885
00:49:33,059 --> 00:49:36,809
using SN printf which is have a stupid

886
00:49:35,608 --> 00:49:44,000
function I don't even really know what

887
00:49:36,809 --> 00:49:48,619
the point of it is i'm not sure what the

888
00:49:44,000 --> 00:49:48,619
emphasis was for it taking two sizes

889
00:50:06,460 --> 00:50:26,409
alright what else we got almost there

890
00:50:32,139 --> 00:50:36,548
again like sometimes it wanted two sizes

891
00:50:35,028 --> 00:50:38,989
and sometimes it wanted one size

892
00:50:36,548 --> 00:50:40,608
depending on like the type of the thing

893
00:50:38,989 --> 00:50:42,858
we're passing or something even weirder

894
00:50:40,608 --> 00:50:45,338
than that i remember it was just super

895
00:50:42,858 --> 00:50:45,338
strange

896
00:51:26,650 --> 00:51:36,410
okay so I think now we actually have

897
00:51:32,838 --> 00:51:42,650
everything ready the actual size of this

898
00:51:36,409 --> 00:51:45,949
guy I guess we'll return in um in this

899
00:51:42,650 --> 00:51:50,358
case is just going to be you know

900
00:51:45,949 --> 00:51:52,848
wherever we started versus wherever we

901
00:51:50,358 --> 00:51:57,799
ended up right so this is where the last

902
00:51:52,849 --> 00:52:02,750
right was this is where we do you think

903
00:51:57,800 --> 00:52:05,960
this is where we began so that's really

904
00:52:02,750 --> 00:52:08,659
all we should have to return there does

905
00:52:05,960 --> 00:52:13,990
not have an overloaded operator right

906
00:52:08,659 --> 00:52:20,769
you are sir let's see format string list

907
00:52:13,989 --> 00:52:29,209
death sighs desta net format arglist

908
00:52:20,769 --> 00:52:34,400
initializing conversion you move to you

909
00:52:29,210 --> 00:52:39,449
32 where is the conversion ah there it

910
00:52:34,400 --> 00:52:53,619
is okay

911
00:52:39,449 --> 00:52:56,980
so in theory we now have jump back to

912
00:52:53,619 --> 00:53:01,539
handmade we now have our own printf

913
00:52:56,980 --> 00:53:06,070
happening but well first of all we have

914
00:53:01,539 --> 00:53:09,820
a bug obviously but we've got no actual

915
00:53:06,070 --> 00:53:15,090
formatting happening right now what's

916
00:53:09,820 --> 00:53:20,410
the problem here my appt pointer is no

917
00:53:15,090 --> 00:53:22,860
how did my at pointer become no let's

918
00:53:20,409 --> 00:53:22,859
find out

919
00:53:23,809 --> 00:53:31,059
so here's the desk Destin it is null

920
00:53:27,800 --> 00:53:31,060
death scythe blue

921
00:53:36,750 --> 00:53:45,349
what did I do so I guess it's okay to

922
00:53:49,610 --> 00:53:59,640
pass null here or something what

923
00:53:52,860 --> 00:54:05,640
happened there buffer at plus equals

924
00:53:59,639 --> 00:54:15,509
format string how did that end up

925
00:54:05,639 --> 00:54:19,940
getting destroyed I wonder well let's

926
00:54:15,510 --> 00:54:19,940
find out if I can

927
00:54:25,190 --> 00:54:33,829
alright so we've got our at their hope

928
00:54:30,449 --> 00:54:33,829
don't care about that

929
00:54:46,039 --> 00:54:54,569
looks like cases got a typo so we start

930
00:54:50,938 --> 00:54:58,009
with the format string we loop through

931
00:54:54,568 --> 00:55:09,259
the format string till we get to a zero

932
00:54:58,009 --> 00:55:09,259
we know terminate which seems reasonable

933
00:55:09,889 --> 00:55:17,219
and then the result that we return is

934
00:55:13,469 --> 00:55:20,519
wherever we ended up my ass where we

935
00:55:17,219 --> 00:55:28,469
started all right let's take a look at

936
00:55:20,518 --> 00:55:36,118
that in action and so what am i passing

937
00:55:28,469 --> 00:55:40,170
here and minus at at loop in there just

938
00:55:36,119 --> 00:55:44,150
size is 256 dust is there so we've got

939
00:55:40,170 --> 00:55:46,588
des a 26 deaths in it is what you expect

940
00:55:44,150 --> 00:55:54,150
we're just going to increment at four

941
00:55:46,588 --> 00:55:59,518
words we're going to do a an output of

942
00:55:54,150 --> 00:56:00,900
that wherever this value is assuming

943
00:55:59,518 --> 00:56:04,338
that there is sized left we're going to

944
00:56:00,900 --> 00:56:09,798
subtract it and then we're going to

945
00:56:04,338 --> 00:56:14,568
write to wherever this guy was pointing

946
00:56:09,798 --> 00:56:14,568
whatever that value is right

947
00:56:17,519 --> 00:56:20,659
and that seems reasonable

948
00:56:35,050 --> 00:56:43,500
aah yeah there's a nice type of for you

949
00:56:39,820 --> 00:56:49,240
well it's been a slow night there we go

950
00:56:43,500 --> 00:56:52,769
and so I think hopefully that's all for

951
00:56:49,239 --> 00:56:56,759
our are typos I think we should now be

952
00:56:52,769 --> 00:57:00,730
printing things out just without any

953
00:56:56,760 --> 00:57:02,560
without any actual formatting right so

954
00:57:00,730 --> 00:57:06,190
all of our stuff is just essentially the

955
00:57:02,559 --> 00:57:09,610
format strings and that's it but off we

956
00:57:06,190 --> 00:57:11,679
go so that's a reasonable scaffold for

957
00:57:09,610 --> 00:57:13,360
it and basically what we have to do now

958
00:57:11,679 --> 00:57:15,519
is implement the actual formatting in

959
00:57:13,360 --> 00:57:19,660
here which like I said is not too hard

960
00:57:15,519 --> 00:57:25,719
for everything except for f % f is just

961
00:57:19,659 --> 00:57:28,269
a real real bad if that makes sense so

962
00:57:25,719 --> 00:57:33,959
I'll go ahead and go to the QA and we'll

963
00:57:28,269 --> 00:57:33,960
see what everyone's queues and azar

964
00:58:32,980 --> 00:58:38,869
pseudonym 73 printing floating-point

965
00:58:36,469 --> 00:58:40,879
numbers a faster always correct method

966
00:58:38,869 --> 00:58:45,679
this does look like the paper i was

967
00:58:40,880 --> 00:58:55,130
thinking of yes this in fact definitely

968
00:58:45,679 --> 00:58:57,529
does yeah so you know maybe we have to

969
00:58:55,130 --> 00:59:00,849
read through this i have not implemented

970
00:58:57,530 --> 00:59:02,600
myself maybe we have to read this and

971
00:59:00,849 --> 00:59:04,849
implement it because we don't really

972
00:59:02,599 --> 00:59:07,639
have if there's no easy way to print a

973
00:59:04,849 --> 00:59:09,500
float and have it be right there's an

974
00:59:07,639 --> 00:59:13,599
easy way to print a float and really

975
00:59:09,500 --> 00:59:13,599
sloppily but

976
00:59:22,469 --> 00:59:27,429
a canoe kills short recap of what we've

977
00:59:25,090 --> 00:59:30,670
done today oh we just started replacing

978
00:59:27,429 --> 00:59:35,319
SN printf and the reason for that is

979
00:59:30,670 --> 00:59:36,670
just so that we won't be relying on as

980
00:59:35,320 --> 00:59:37,870
much of the sea runtime library where

981
00:59:36,670 --> 00:59:39,010
it's slowly kind of getting at the city

982
00:59:37,869 --> 00:59:44,559
one time every so we'll be able to

983
00:59:39,010 --> 00:59:46,510
compile on Linux easier as well this

984
00:59:44,559 --> 00:59:50,769
Isaac blame in github lets you see the

985
00:59:46,510 --> 00:59:54,030
change history okay I remember seeing a

986
00:59:50,769 --> 00:59:54,030
blame button but i'll look for one

987
01:00:02,469 --> 01:00:10,730
popcorn says what does negative 1 in

988
01:00:07,429 --> 01:00:14,989
desktop 80 negative 1 do well remember

989
01:00:10,730 --> 01:00:18,199
bracket syntax in C is just the same as

990
01:00:14,989 --> 01:00:20,899
pointer arithmetic essentially so all

991
01:00:18,199 --> 01:00:23,719
that means is it goes back one element

992
01:00:20,900 --> 01:00:24,860
of whatever desk at is pointing at so

993
01:00:23,719 --> 01:00:27,169
since death that is putting it

994
01:00:24,860 --> 01:00:29,539
characters it goes back one element so

995
01:00:27,170 --> 01:00:31,400
it's the it's pointing to the element

996
01:00:29,539 --> 01:00:33,679
before the one that that's actually

997
01:00:31,400 --> 01:00:36,050
pointing at you can stick any number in

998
01:00:33,679 --> 01:00:38,509
here you want 17 negative 50 whatever

999
01:00:36,050 --> 01:00:40,730
and it will basically move by that

1000
01:00:38,510 --> 01:00:43,160
number times the size of whatever the

1001
01:00:40,730 --> 01:00:46,119
pointer is pointing to and then that is

1002
01:00:43,159 --> 01:00:46,119
the thing you'll be addressing

1003
01:01:13,710 --> 01:01:17,730
I want to start getting into this series

1004
01:01:15,809 --> 01:01:23,369
is there a way to easily compile run

1005
01:01:17,730 --> 01:01:26,969
this code on Mac OS X so I don't

1006
01:01:23,369 --> 01:01:28,410
maintain a Mac a sport because I've said

1007
01:01:26,969 --> 01:01:33,299
many times we're not going to port till

1008
01:01:28,409 --> 01:01:34,588
the end of the series but because it's

1009
01:01:33,300 --> 01:01:36,359
just a lot of work involved in

1010
01:01:34,588 --> 01:01:37,799
maintaining a port if you're sort of

1011
01:01:36,358 --> 01:01:39,449
showing how to bring the platform layers

1012
01:01:37,800 --> 01:01:40,920
up and you're changing how things work

1013
01:01:39,449 --> 01:01:43,919
and so on so I don't want to do that

1014
01:01:40,920 --> 01:01:46,769
till we finished everything and are just

1015
01:01:43,920 --> 01:01:49,858
doing a pork basically but other people

1016
01:01:46,769 --> 01:01:53,460
have so if you've pre-ordered the game

1017
01:01:49,858 --> 01:01:55,650
and so and you have access to the

1018
01:01:53,460 --> 01:01:58,740
private github there's people who have

1019
01:01:55,650 --> 01:02:02,970
put mac up like sdl ports and stuff up

1020
01:01:58,739 --> 01:02:09,209
on there that you can look at there's

1021
01:02:02,969 --> 01:02:11,338
also a some ones that aren't up to date

1022
01:02:09,210 --> 01:02:13,740
some older ones like handmade penguin

1023
01:02:11,338 --> 01:02:16,588
that are up to date for that are sdl

1024
01:02:13,739 --> 01:02:18,809
ports but yeah so people other people

1025
01:02:16,588 --> 01:02:22,349
have made mac US exports but that's not

1026
01:02:18,809 --> 01:02:25,909
something that that i will be doing

1027
01:02:22,349 --> 01:02:25,910
until much later on the series

1028
01:03:11,480 --> 01:03:14,740
no more questions

1029
01:03:58,260 --> 01:04:04,710
all right i am going to wrap it up then

1030
01:04:13,068 --> 01:04:16,558
alright thanks everyone for joining me

1031
01:04:15,239 --> 01:04:18,509
for that sort of handmade here it's been

1032
01:04:16,559 --> 01:04:19,710
a pleasure coding with you as always if

1033
01:04:18,510 --> 01:04:22,470
you would like to follow along the

1034
01:04:19,710 --> 01:04:24,449
series at home you can always po2 the

1035
01:04:22,469 --> 01:04:26,519
game on handmade here it comes the

1036
01:04:24,449 --> 01:04:28,649
source code so you can play around with

1037
01:04:26,519 --> 01:04:29,818
it we also have a forum site and go

1038
01:04:28,650 --> 01:04:31,230
through when asked questions a patreon

1039
01:04:29,818 --> 01:04:33,269
page philosopher at the video series a

1040
01:04:31,230 --> 01:04:36,028
schedule bot that tweets the schedule at

1041
01:04:33,269 --> 01:04:38,818
you and an episode guide featuring past

1042
01:04:36,028 --> 01:04:41,159
episodes you can take a look at if you

1043
01:04:38,818 --> 01:04:43,639
are trying to catch up with old parts of

1044
01:04:41,159 --> 01:04:46,710
this series that's about it for today

1045
01:04:43,639 --> 01:04:50,009
and this is the last episode of the week

1046
01:04:46,710 --> 01:04:53,068
I will be back here next week for the

1047
01:04:50,010 --> 01:04:54,900
last few episodes before I am going to

1048
01:04:53,068 --> 01:05:00,298
have to be gone on vacation for a little

1049
01:04:54,900 --> 01:05:02,579
while so until then oh how long is right

1050
01:05:00,298 --> 01:05:06,269
because breaks going to be a while at

1051
01:05:02,579 --> 01:05:09,960
least a couple weeks until I'm back so

1052
01:05:06,269 --> 01:05:11,759
there'll be a bit of a break but yeah

1053
01:05:09,960 --> 01:05:14,608
there'll be there'll be some streams

1054
01:05:11,760 --> 01:05:17,490
next week so that's I'll be back here

1055
01:05:14,608 --> 01:05:20,699
before before break that's about it I

1056
01:05:17,489 --> 01:05:22,649
hope to see you guys next week for the

1057
01:05:20,699 --> 01:05:23,699
last few strings for a break until then

1058
01:05:22,650 --> 01:05:27,230
have fun programming I'll see you guys

1059
01:05:23,699 --> 01:05:27,230
on the internet take these everyone

