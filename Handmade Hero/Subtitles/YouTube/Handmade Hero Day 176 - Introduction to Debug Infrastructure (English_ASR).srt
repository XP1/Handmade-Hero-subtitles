1
00:00:01,129 --> 00:00:06,599
okay hello everyone and welcome back to

2
00:00:04,950 --> 00:00:09,359
handmade Hero the show recode a complete

3
00:00:06,599 --> 00:00:13,919
game live on stream on Twitch no engines

4
00:00:09,359 --> 00:00:16,469
no libraries just us and well we were

5
00:00:13,919 --> 00:00:20,550
coming back from break we it was it was

6
00:00:16,469 --> 00:00:21,899
pax pax 2015 this past weekend and so

7
00:00:20,550 --> 00:00:23,460
because there are a lot of people in

8
00:00:21,899 --> 00:00:24,868
town and people would be visiting pax

9
00:00:23,460 --> 00:00:27,510
and all that sort of thing I decide it

10
00:00:24,868 --> 00:00:29,189
was better to have a week off since we

11
00:00:27,510 --> 00:00:32,279
take weeks off occasionally let people

12
00:00:29,189 --> 00:00:34,140
catch up give my voice a slight rest cuz

13
00:00:32,279 --> 00:00:35,670
oh my god pax is one of those things

14
00:00:34,140 --> 00:00:37,739
where your voice totally gets taxed as

15
00:00:35,670 --> 00:00:40,950
well you know there's parties and things

16
00:00:37,738 --> 00:00:42,689
and you go and and you are trying to

17
00:00:40,950 --> 00:00:47,460
talk but it's so loud wherever you are

18
00:00:42,689 --> 00:00:48,839
that the Theia the old voice Vox gets a

19
00:00:47,460 --> 00:00:51,299
little ripped up the vocal cords get a

20
00:00:48,840 --> 00:00:53,250
little bit ripped up it's true but we

21
00:00:51,299 --> 00:00:55,859
are back now and everything is fine my

22
00:00:53,250 --> 00:00:57,539
voices is not in great shape it's true

23
00:00:55,859 --> 00:01:01,409
because it's still pretty Horace for the

24
00:00:57,539 --> 00:01:04,198
weekend but it's certainly in good

25
00:01:01,409 --> 00:01:08,459
enough shape for a grumbly throaty

26
00:01:04,198 --> 00:01:11,250
version of handmade hero so what I'm

27
00:01:08,459 --> 00:01:14,039
gonna do today is I'm gonna kind of go

28
00:01:11,250 --> 00:01:16,140
over debug services how to think about

29
00:01:14,040 --> 00:01:17,250
them the way that they should work and

30
00:01:16,140 --> 00:01:18,719
then we'll probably get started

31
00:01:17,250 --> 00:01:20,250
implementing them but I don't suspect

32
00:01:18,719 --> 00:01:22,170
we'll get very far because I got a sort

33
00:01:20,250 --> 00:01:23,430
of lay a lot of groundwork first you

34
00:01:22,170 --> 00:01:24,509
know it is typically when we come back

35
00:01:23,430 --> 00:01:26,460
on a Monday and we're starting a new

36
00:01:24,509 --> 00:01:27,478
thing I got to spend a little bit of

37
00:01:26,459 --> 00:01:28,890
time getting everyone on the same page

38
00:01:27,478 --> 00:01:30,030
so that everyone kind of knows what

39
00:01:28,890 --> 00:01:32,189
we're doing and so that's gonna take a

40
00:01:30,030 --> 00:01:33,750
little while but assuming that we have

41
00:01:32,188 --> 00:01:36,149
some time left after that happens we'll

42
00:01:33,750 --> 00:01:37,680
actually start coding and then this week

43
00:01:36,150 --> 00:01:39,810
should just basically be I think us

44
00:01:37,680 --> 00:01:42,090
going through and putting in a bunch of

45
00:01:39,810 --> 00:01:45,629
debug stuff a bunch of infrastructure

46
00:01:42,090 --> 00:01:46,710
for doing debug stuff so in case we do

47
00:01:45,629 --> 00:01:49,078
through some program I'll just remind

48
00:01:46,709 --> 00:01:50,459
everyone it's day 176 that means if you

49
00:01:49,078 --> 00:01:52,618
want to follow along at home if I do do

50
00:01:50,459 --> 00:01:55,289
some programming today after the

51
00:01:52,618 --> 00:01:57,269
exposition handmade hero org if you

52
00:01:55,290 --> 00:01:59,729
pre-ordered the game you will want to

53
00:01:57,269 --> 00:02:01,259
unzip the previous day so what day 175

54
00:01:59,728 --> 00:02:02,578
source code and that's the source code

55
00:02:01,259 --> 00:02:03,840
that you want to start with if you're

56
00:02:02,578 --> 00:02:07,769
trying to follow along with any coding I

57
00:02:03,840 --> 00:02:09,030
do on the stream but mostly I think well

58
00:02:07,769 --> 00:02:10,199
I don't know mostly who knows maybe

59
00:02:09,030 --> 00:02:11,520
it'll go quickly but a lot of times

60
00:02:10,199 --> 00:02:13,530
discussions take a while especially when

61
00:02:11,520 --> 00:02:16,560
it's a brand new topic like this

62
00:02:13,530 --> 00:02:19,259
so mostly we will probably be talking

63
00:02:16,560 --> 00:02:20,759
about what we need to do so that

64
00:02:19,259 --> 00:02:22,620
everyone kind of understands where I'm

65
00:02:20,759 --> 00:02:29,629
coming from and what we're what our

66
00:02:22,620 --> 00:02:32,370
goals are all right so debug services

67
00:02:29,629 --> 00:02:37,769
what are they what are we talking about

68
00:02:32,370 --> 00:02:39,629
here right and one of the things that we

69
00:02:37,770 --> 00:02:42,240
get a lot of times you notice in the

70
00:02:39,629 --> 00:02:44,099
questions in the QA on handmade hero a

71
00:02:42,240 --> 00:02:46,680
lot of times when there are new people

72
00:02:44,099 --> 00:02:48,709
to the stream they ask something along

73
00:02:46,680 --> 00:02:53,849
the lines of what do you think of

74
00:02:48,709 --> 00:02:55,259
test-driven development right and this

75
00:02:53,849 --> 00:02:57,810
is a very common question I don't really

76
00:02:55,259 --> 00:02:59,819
know why I guess I garner from some

77
00:02:57,810 --> 00:03:01,500
people's explanations to me after the

78
00:02:59,819 --> 00:03:02,519
fact that a lot of people ask that

79
00:03:01,500 --> 00:03:03,930
question because like test-driven

80
00:03:02,520 --> 00:03:05,670
development is like a kind of buzzword

81
00:03:03,930 --> 00:03:08,790
in the web development space right now

82
00:03:05,669 --> 00:03:10,079
or something like this and so you know I

83
00:03:08,789 --> 00:03:11,549
often get that question and you've all

84
00:03:10,080 --> 00:03:14,520
heard my response to it I mean what I

85
00:03:11,550 --> 00:03:16,709
usually say is games really aren't about

86
00:03:14,520 --> 00:03:19,110
test-driven development because the

87
00:03:16,709 --> 00:03:20,459
things that you can test with

88
00:03:19,110 --> 00:03:23,190
test-driven development in a game are

89
00:03:20,459 --> 00:03:25,349
not the harder things to debug so yes

90
00:03:23,189 --> 00:03:26,459
you know could we do a bunch of tests of

91
00:03:25,349 --> 00:03:28,409
it and driven development for the

92
00:03:26,459 --> 00:03:29,909
components of handmade hero absolutely

93
00:03:28,409 --> 00:03:32,519
would it find some bugs

94
00:03:29,909 --> 00:03:35,789
absolutely might we do some of that on

95
00:03:32,519 --> 00:03:38,700
handmade hero also absolutely yes to all

96
00:03:35,789 --> 00:03:40,500
of those things but just test-driven

97
00:03:38,699 --> 00:03:42,780
development save you a ton of time on

98
00:03:40,500 --> 00:03:45,750
game projects no and the reason for that

99
00:03:42,780 --> 00:03:47,099
is because the sorts of bugs that really

100
00:03:45,750 --> 00:03:49,199
keep you up at night and cause

101
00:03:47,099 --> 00:03:51,479
significant problems in games are not

102
00:03:49,199 --> 00:03:54,929
the kind that a unit tests can find

103
00:03:51,479 --> 00:03:58,349
typically they are much more subtle much

104
00:03:54,930 --> 00:04:00,480
more algorithmic much more temporal

105
00:03:58,349 --> 00:04:02,489
problems that take place over a long

106
00:04:00,479 --> 00:04:07,469
period of time sometimes minutes

107
00:04:02,489 --> 00:04:10,110
sometimes hours of gameplay and they do

108
00:04:07,469 --> 00:04:12,449
not admit themselves to easy simple unit

109
00:04:10,110 --> 00:04:15,660
tests that you can just run and that is

110
00:04:12,449 --> 00:04:18,060
why a lot of game development you know a

111
00:04:15,659 --> 00:04:19,529
lot of big games a lot of established

112
00:04:18,060 --> 00:04:21,689
game teams will do things like very

113
00:04:19,529 --> 00:04:23,879
highly randomized testing of games where

114
00:04:21,689 --> 00:04:25,439
they have like BOTS that basically walk

115
00:04:23,879 --> 00:04:25,829
through and do random stuff trying to

116
00:04:25,439 --> 00:04:27,089
find

117
00:04:25,829 --> 00:04:28,500
Crash's and games we're trying to get

118
00:04:27,089 --> 00:04:29,038
stuck in places and all these sort of

119
00:04:28,500 --> 00:04:31,769
sorts of things

120
00:04:29,038 --> 00:04:33,269
it's why they we do betas and early

121
00:04:31,769 --> 00:04:34,829
accesses and stuff like this to try and

122
00:04:33,269 --> 00:04:36,628
get players to find them although a lot

123
00:04:34,829 --> 00:04:38,250
of times people now just kind of use

124
00:04:36,629 --> 00:04:40,710
that as a crutch but you know even if

125
00:04:38,250 --> 00:04:43,110
you're a very very good team and you've

126
00:04:40,709 --> 00:04:44,489
done a lot of really hard work on the

127
00:04:43,110 --> 00:04:47,069
engineering you're still in a situation

128
00:04:44,490 --> 00:04:49,110
where like really crazy consequences of

129
00:04:47,069 --> 00:04:50,939
long chains of logic in AI and stuff

130
00:04:49,110 --> 00:04:52,020
like this can produce situations that

131
00:04:50,939 --> 00:04:54,419
would have been extraordinarily

132
00:04:52,019 --> 00:04:57,209
difficult for you to find with something

133
00:04:54,418 --> 00:04:59,698
like a unit test so you you know that's

134
00:04:57,209 --> 00:05:02,279
a very common thing to see and the

135
00:04:59,699 --> 00:05:04,199
second thing that it's very common to

136
00:05:02,279 --> 00:05:05,728
see as far as debugging is is the stuff

137
00:05:04,199 --> 00:05:08,759
that I want to talk about now which is

138
00:05:05,728 --> 00:05:10,258
sort of debug infrastructure and debug

139
00:05:08,759 --> 00:05:13,560
services that are built into the game

140
00:05:10,259 --> 00:05:16,770
and what these are designed to do is

141
00:05:13,560 --> 00:05:20,209
allow you to sort of try to coax those

142
00:05:16,769 --> 00:05:22,500
bugs to the surface more readily and

143
00:05:20,209 --> 00:05:24,209
equally as important provide

144
00:05:22,500 --> 00:05:26,158
visualizations that will allow you to

145
00:05:24,209 --> 00:05:29,628
see bugs that would otherwise have been

146
00:05:26,158 --> 00:05:32,098
very difficult for you to perceive with

147
00:05:29,629 --> 00:05:33,990
when they actually happened or are in a

148
00:05:32,098 --> 00:05:36,778
convenient way and maybe you'd only see

149
00:05:33,990 --> 00:05:38,250
the results later on or in some kind of

150
00:05:36,778 --> 00:05:40,829
secondary fashion that would be very

151
00:05:38,250 --> 00:05:44,759
hard to discern where you know what had

152
00:05:40,829 --> 00:05:46,800
actually happened right and so debug

153
00:05:44,759 --> 00:05:48,360
services are sort of a core part of

154
00:05:46,800 --> 00:05:50,038
pretty much any game development that

155
00:05:48,360 --> 00:05:51,689
I've ever seen certainly any kind of

156
00:05:50,038 --> 00:05:53,430
project that's professional quality and

157
00:05:51,689 --> 00:05:55,168
that's of any kind of complexity always

158
00:05:53,430 --> 00:05:57,658
has debug services built into it and

159
00:05:55,168 --> 00:06:00,299
these sorts of things will take the form

160
00:05:57,658 --> 00:06:01,709
of a debug console that can have console

161
00:06:00,300 --> 00:06:04,918
commands typed in like from the quake

162
00:06:01,709 --> 00:06:06,538
days that sort of thing became very

163
00:06:04,918 --> 00:06:10,799
popular and has existed in a lot of

164
00:06:06,538 --> 00:06:14,689
games debug overlays HUDs like heads-up

165
00:06:10,800 --> 00:06:18,870
displays just for the programmer graphs

166
00:06:14,689 --> 00:06:20,728
overlay overlaid sort of drawings on top

167
00:06:18,870 --> 00:06:22,588
of the normal rendering of the game that

168
00:06:20,728 --> 00:06:25,490
show additional quantities that are not

169
00:06:22,588 --> 00:06:32,189
labeled all those sorts of things right

170
00:06:25,490 --> 00:06:35,610
and the goal with these is twofold like

171
00:06:32,189 --> 00:06:37,769
I said one is to try to coax bugs to the

172
00:06:35,610 --> 00:06:39,838
surface and what I mean by that is you

173
00:06:37,769 --> 00:06:40,139
know oftentimes you maybe you look at a

174
00:06:39,838 --> 00:06:42,300
scene

175
00:06:40,139 --> 00:06:43,918
and it rendered and it looks like maybe

176
00:06:42,300 --> 00:06:44,999
there's some kind of problem with

177
00:06:43,918 --> 00:06:48,348
something but you're not really sure

178
00:06:44,999 --> 00:06:51,360
like it's almost correct who knows right

179
00:06:48,348 --> 00:06:53,218
and so maybe you open up some rendering

180
00:06:51,360 --> 00:06:55,319
console or some rendering heads-up

181
00:06:53,218 --> 00:06:57,240
display that has some sliders and you

182
00:06:55,319 --> 00:06:59,699
dial some you turn some things off you

183
00:06:57,240 --> 00:07:02,310
dial some things around and in so doing

184
00:06:59,699 --> 00:07:04,528
like you know turn off foliage turn off

185
00:07:02,310 --> 00:07:06,418
shadows look at it that you know in so

186
00:07:04,528 --> 00:07:08,189
doing you you can actually go in and see

187
00:07:06,418 --> 00:07:09,478
Oh yet there is a bug there and was

188
00:07:08,189 --> 00:07:11,278
getting covered up like we're seeing

189
00:07:09,478 --> 00:07:13,468
masked by these other things right and

190
00:07:11,278 --> 00:07:14,699
so sometimes it's about like having ways

191
00:07:13,468 --> 00:07:16,560
that kind of bring bugs to surface

192
00:07:14,699 --> 00:07:18,569
another thing would be like you know

193
00:07:16,560 --> 00:07:20,550
some kind of debug thing that populates

194
00:07:18,569 --> 00:07:22,468
you know puts tons more AIS in the scene

195
00:07:20,550 --> 00:07:24,810
than there normally are like stress

196
00:07:22,468 --> 00:07:27,180
testing kinds of things right it's ways

197
00:07:24,810 --> 00:07:28,860
of dropping stuff in ways of pulling in

198
00:07:27,180 --> 00:07:30,870
a boss monster to a place or pulling

199
00:07:28,860 --> 00:07:32,189
more things in putting them in more

200
00:07:30,870 --> 00:07:36,149
projectiles and all that sorts of stuff

201
00:07:32,189 --> 00:07:38,909
just ways of of making the game get into

202
00:07:36,149 --> 00:07:41,519
situations right away that it normally

203
00:07:38,908 --> 00:07:43,019
would be rare for it to get into so that

204
00:07:41,519 --> 00:07:45,448
you can try to coax those bugs to the

205
00:07:43,019 --> 00:07:48,240
surface that may have only been found by

206
00:07:45,449 --> 00:07:49,650
some play testers sometimes rarely right

207
00:07:48,240 --> 00:07:51,210
and you don't want those to go out the

208
00:07:49,649 --> 00:07:53,638
door but there's no way you probably

209
00:07:51,209 --> 00:07:55,348
would would be able to hit upon them all

210
00:07:53,639 --> 00:07:56,550
of them very reliably if you didn't have

211
00:07:55,348 --> 00:07:58,588
some way of sort of forcing them to

212
00:07:56,550 --> 00:08:02,310
happen a little more strenuously right

213
00:07:58,588 --> 00:08:04,680
so that's one way and the other thing is

214
00:08:02,310 --> 00:08:06,149
when you know you have a bug right when

215
00:08:04,680 --> 00:08:10,139
you're fairly certain that there's a bug

216
00:08:06,149 --> 00:08:12,389
but that bug is very difficult to sort

217
00:08:10,139 --> 00:08:14,430
of pinpoint right so we know we have a

218
00:08:12,389 --> 00:08:17,009
bug we see something happen it's clear

219
00:08:14,430 --> 00:08:19,199
that the bug is a problem maybe we have

220
00:08:17,009 --> 00:08:21,389
a repro case maybe we don't have a repro

221
00:08:19,199 --> 00:08:23,430
case but we know that there's a bug and

222
00:08:21,389 --> 00:08:26,009
occasionally we do we at least once in a

223
00:08:23,430 --> 00:08:28,019
while we do see this bug but it's really

224
00:08:26,009 --> 00:08:31,348
hard to know where the bug is coming

225
00:08:28,019 --> 00:08:34,198
from or why right and the debug service

226
00:08:31,348 --> 00:08:37,649
is one of its most essential functions

227
00:08:34,198 --> 00:08:40,198
is to allow you to perceive where that

228
00:08:37,649 --> 00:08:41,788
bug might be in ways that you would not

229
00:08:40,198 --> 00:08:43,559
have been able to do with the debug

230
00:08:41,788 --> 00:08:46,439
services and a classic example of this

231
00:08:43,559 --> 00:08:48,989
would be once in a while you have a slow

232
00:08:46,440 --> 00:08:51,920
frame okay so the game is playing along

233
00:08:48,990 --> 00:08:53,940
at 60 frames a second it's all great

234
00:08:51,919 --> 00:08:56,399
occasionally you get

235
00:08:53,940 --> 00:08:58,020
and it's it's you miss a frame right you

236
00:08:56,399 --> 00:09:05,299
see this little like hitch it's like a

237
00:08:58,019 --> 00:09:08,159
little stutter right what happened well

238
00:09:05,299 --> 00:09:10,439
without any debug services it's almost

239
00:09:08,159 --> 00:09:12,179
impossible you'd never know right I mean

240
00:09:10,440 --> 00:09:13,710
you know if you were talking about just

241
00:09:12,179 --> 00:09:16,649
literally running the game how would you

242
00:09:13,710 --> 00:09:18,750
have any idea what random thing happened

243
00:09:16,649 --> 00:09:21,509
on that one frame that caused that right

244
00:09:18,750 --> 00:09:23,159
it could be anything and so what the

245
00:09:21,509 --> 00:09:25,350
debug services might do is like have a

246
00:09:23,159 --> 00:09:27,149
way of say tracking where the time is

247
00:09:25,350 --> 00:09:28,680
spent per frame and it just keeps those

248
00:09:27,149 --> 00:09:29,610
in like a rolling buffer or something

249
00:09:28,679 --> 00:09:31,139
like this

250
00:09:29,610 --> 00:09:33,840
and when you have a slow frame you just

251
00:09:31,139 --> 00:09:35,909
hit a key and it pause it stops all

252
00:09:33,840 --> 00:09:37,470
recording and you know you've got your

253
00:09:35,909 --> 00:09:39,029
your frames there and you see that

254
00:09:37,470 --> 00:09:40,350
there's one that's got a big ol spike on

255
00:09:39,029 --> 00:09:41,730
it and you can click on it and you can

256
00:09:40,350 --> 00:09:43,740
go in and see where all the time was

257
00:09:41,730 --> 00:09:45,180
spent that frame go oh okay I see what

258
00:09:43,740 --> 00:09:47,610
happened

259
00:09:45,179 --> 00:09:49,649
the AI spent a ton of time in this

260
00:09:47,610 --> 00:09:51,810
function I must have some kind of a

261
00:09:49,649 --> 00:09:53,610
weird performance bug in that function

262
00:09:51,809 --> 00:09:55,199
I'm gonna go look at it and see if I

263
00:09:53,610 --> 00:09:58,259
can't find the problem right and that

264
00:09:55,200 --> 00:09:59,550
that may very well lead you to be able

265
00:09:58,259 --> 00:10:00,110
to determine what the problem actually

266
00:09:59,549 --> 00:10:02,129
was

267
00:10:00,110 --> 00:10:03,240
whereas if you'd never if you didn't

268
00:10:02,129 --> 00:10:04,799
have that kind of visibility that kind

269
00:10:03,240 --> 00:10:07,409
of visualization you would never even

270
00:10:04,799 --> 00:10:08,699
know to look at there right because

271
00:10:07,409 --> 00:10:11,309
there's so much happening in a game that

272
00:10:08,700 --> 00:10:12,810
it's such a rich sort of landscape of

273
00:10:11,309 --> 00:10:14,399
different things you know that are

274
00:10:12,809 --> 00:10:16,219
taking different amounts of time you

275
00:10:14,399 --> 00:10:18,449
would never be able to do that and so

276
00:10:16,220 --> 00:10:20,190
you know that's again really what the

277
00:10:18,450 --> 00:10:22,590
debug services are about in a lot of

278
00:10:20,190 --> 00:10:24,450
ways is about sort of capturing

279
00:10:22,590 --> 00:10:27,450
information from the run of the program

280
00:10:24,450 --> 00:10:28,860
in a way that you can then look at it

281
00:10:27,450 --> 00:10:30,750
after the fact to figure out what

282
00:10:28,860 --> 00:10:33,000
happened when you know that a bug has

283
00:10:30,750 --> 00:10:35,370
occurred but you really just don't know

284
00:10:33,000 --> 00:10:37,289
why like it's you don't have that sort

285
00:10:35,370 --> 00:10:38,879
of intuition for the bug of like oh I

286
00:10:37,289 --> 00:10:41,129
see what's happening I know where that

287
00:10:38,879 --> 00:10:42,509
is and yet the more experience you are

288
00:10:41,129 --> 00:10:45,929
at game development the less of those

289
00:10:42,509 --> 00:10:48,000
you have certainly so debug services may

290
00:10:45,929 --> 00:10:51,029
be slightly more useful to a novice than

291
00:10:48,000 --> 00:10:54,240
to a pro but even no matter how good you

292
00:10:51,029 --> 00:10:55,919
are even to a pro there are often times

293
00:10:54,240 --> 00:10:59,100
when you know when you get when you're

294
00:10:55,919 --> 00:11:00,659
talking about a full mature game with

295
00:10:59,100 --> 00:11:03,540
you know all of its components working

296
00:11:00,659 --> 00:11:05,159
together I don't care how pro you are

297
00:11:03,539 --> 00:11:07,259
you will still have times where you're

298
00:11:05,159 --> 00:11:09,120
like I really just don't know

299
00:11:07,259 --> 00:11:10,379
what is going on here and without some

300
00:11:09,120 --> 00:11:17,370
debug services you would be very

301
00:11:10,379 --> 00:11:20,639
hard-pressed to figure it out okay so

302
00:11:17,370 --> 00:11:23,070
that's what debug services are in terms

303
00:11:20,639 --> 00:11:24,360
of concept now what are they in terms of

304
00:11:23,070 --> 00:11:26,240
implantation like how do we actually

305
00:11:24,360 --> 00:11:28,710
want to go about tackling this problem

306
00:11:26,240 --> 00:11:31,169
in a way that makes it easy for us to

307
00:11:28,710 --> 00:11:33,090
not spend too much time working on our

308
00:11:31,169 --> 00:11:34,139
debug system because any amount of time

309
00:11:33,090 --> 00:11:35,550
we spend on the debug system is

310
00:11:34,139 --> 00:11:37,740
subsequently not time we spend on the

311
00:11:35,549 --> 00:11:39,000
game so we're only saying time the debug

312
00:11:37,740 --> 00:11:42,690
system because we think it'll save us

313
00:11:39,000 --> 00:11:44,100
time programming later right but we want

314
00:11:42,690 --> 00:11:45,900
to make sure that we have enough so that

315
00:11:44,100 --> 00:11:47,490
when we get those hard bugs we do have

316
00:11:45,899 --> 00:11:49,949
the capability of finding them so how do

317
00:11:47,490 --> 00:11:52,110
we make it so it's easy for us to make

318
00:11:49,950 --> 00:11:53,790
debug services that can be useful

319
00:11:52,110 --> 00:11:55,320
without taking too much of the

320
00:11:53,789 --> 00:11:59,189
programming time for the project just

321
00:11:55,320 --> 00:12:01,560
for making debug services right and so

322
00:11:59,190 --> 00:12:06,600
what we want to do is we want to focus

323
00:12:01,559 --> 00:12:08,699
on highly leverageable debug services

324
00:12:06,600 --> 00:12:10,440
that will allow us to get a lot of bang

325
00:12:08,700 --> 00:12:13,800
for the buck right stuff that will allow

326
00:12:10,440 --> 00:12:15,990
us to do a lot of different kinds of bug

327
00:12:13,799 --> 00:12:19,649
finding and bug visualizing activities

328
00:12:15,990 --> 00:12:23,490
without having to do a whole lot of work

329
00:12:19,649 --> 00:12:26,370
right and so what we want to do is we

330
00:12:23,490 --> 00:12:28,590
want to sort of focus on the nature of

331
00:12:26,370 --> 00:12:32,190
this bug finding and like I said

332
00:12:28,590 --> 00:12:35,970
typically a difficult bug is a bug that

333
00:12:32,190 --> 00:12:40,760
happens where the the manifestation of

334
00:12:35,970 --> 00:12:44,009
the bug and the cause of the bug are

335
00:12:40,759 --> 00:12:47,250
separated right are not immediately

336
00:12:44,009 --> 00:12:49,049
correlated in terms of your you know

337
00:12:47,250 --> 00:12:50,639
your a perception of them right because

338
00:12:49,049 --> 00:12:52,319
any bug where we can immediately where

339
00:12:50,639 --> 00:12:54,419
we see the bug we know exactly who the

340
00:12:52,320 --> 00:12:56,070
culprit probably is is not probably

341
00:12:54,419 --> 00:12:58,079
something we need debug services for it

342
00:12:56,070 --> 00:13:00,240
now it might be at when we talk about

343
00:12:58,080 --> 00:13:01,920
diagramming a little bit it's possible

344
00:13:00,240 --> 00:13:04,019
that you still can use debug services to

345
00:13:01,919 --> 00:13:06,750
get a leg up even in those scenarios but

346
00:13:04,019 --> 00:13:08,370
in terms of like those really hard bugs

347
00:13:06,750 --> 00:13:10,860
the ones that we really really really

348
00:13:08,370 --> 00:13:13,230
want to make sure that we can find they

349
00:13:10,860 --> 00:13:18,509
are typically separated by some amount

350
00:13:13,230 --> 00:13:20,550
of code you know time or or location in

351
00:13:18,509 --> 00:13:23,039
the program right they're separated

352
00:13:20,549 --> 00:13:24,719
and so typically one of our biggest

353
00:13:23,039 --> 00:13:27,719
weapons for battling that sort of thing

354
00:13:24,720 --> 00:13:29,490
is a log right and when I say log I

355
00:13:27,720 --> 00:13:31,230
don't necessarily mean something like a

356
00:13:29,490 --> 00:13:32,430
UNIX log where it's just a big text file

357
00:13:31,230 --> 00:13:34,950
filled with stuff that doesn't really

358
00:13:32,429 --> 00:13:38,489
help you what I'm talking about is more

359
00:13:34,950 --> 00:13:41,550
of a way of recording information such

360
00:13:38,490 --> 00:13:43,470
that later on we can query it right or

361
00:13:41,549 --> 00:13:44,729
display it in a useful fashion so let's

362
00:13:43,470 --> 00:13:47,009
take the example of a thing I was

363
00:13:44,730 --> 00:13:49,680
talking about before we have a frame

364
00:13:47,009 --> 00:13:52,350
spike right so we have something where

365
00:13:49,679 --> 00:13:54,659
we've got the run of our program right

366
00:13:52,350 --> 00:13:58,170
and here's the frames as they're coming

367
00:13:54,659 --> 00:14:00,299
out right and we're like totally fine

368
00:13:58,169 --> 00:14:01,949
this took 16 milliseconds this took 16

369
00:14:00,299 --> 00:14:04,528
milliseconds all of a sudden this frame

370
00:14:01,950 --> 00:14:06,240
takes 35 milliseconds and then this one

371
00:14:04,528 --> 00:14:08,490
takes 16 milliseconds system takes 16

372
00:14:06,240 --> 00:14:12,620
milliseconds right by the time we

373
00:14:08,490 --> 00:14:15,810
perceive that right it's way too late

374
00:14:12,620 --> 00:14:17,730
because what we you know even if we

375
00:14:15,809 --> 00:14:19,769
inserted something into the game that

376
00:14:17,730 --> 00:14:22,980
when a frame took longer than 16

377
00:14:19,769 --> 00:14:25,740
milliseconds get halted right there the

378
00:14:22,980 --> 00:14:29,430
horse is already out of the barn right

379
00:14:25,740 --> 00:14:33,360
the time already got taken so knowing

380
00:14:29,429 --> 00:14:36,208
that the previous frame took 35

381
00:14:33,360 --> 00:14:38,700
milliseconds doesn't help us at all what

382
00:14:36,208 --> 00:14:40,409
we want to be able to do is start at the

383
00:14:38,700 --> 00:14:41,940
beginning of that frame or something and

384
00:14:40,409 --> 00:14:43,620
walk forwards right what we'd like to be

385
00:14:41,940 --> 00:14:45,390
able to do is say I want to step through

386
00:14:43,620 --> 00:14:47,100
the frame that took 35 milliseconds or

387
00:14:45,389 --> 00:14:49,049
something like that right I want to see

388
00:14:47,100 --> 00:14:51,600
what happened in the frame of 35

389
00:14:49,049 --> 00:14:53,639
milliseconds so finding out here right

390
00:14:51,600 --> 00:14:56,339
is the earliest we could probably find

391
00:14:53,639 --> 00:14:57,539
out about that and that's way too late

392
00:14:56,339 --> 00:14:58,980
and not to mention the fact that if

393
00:14:57,539 --> 00:15:01,019
we're just looking at it without some

394
00:14:58,980 --> 00:15:03,120
kind of a halting thing it's actually

395
00:15:01,019 --> 00:15:06,059
like way out here that we actually sort

396
00:15:03,120 --> 00:15:07,289
of respond to that so the horse is

397
00:15:06,059 --> 00:15:09,778
already out of the barn the frame is

398
00:15:07,289 --> 00:15:11,879
long gone and so what we want to be able

399
00:15:09,778 --> 00:15:14,820
to do is we want to be able to add a

400
00:15:11,879 --> 00:15:17,730
minimum record some amount of

401
00:15:14,820 --> 00:15:20,579
information about this frame into

402
00:15:17,730 --> 00:15:24,050
something that will keep it for our

403
00:15:20,578 --> 00:15:24,049
later inspection right

404
00:15:25,399 --> 00:15:30,110
okay so the simplest sort of thing that

405
00:15:28,070 --> 00:15:32,320
you could imagine doing right is let's

406
00:15:30,110 --> 00:15:35,509
just say that we had some kind of a log

407
00:15:32,320 --> 00:15:39,020
right and this log is just gonna store a

408
00:15:35,509 --> 00:15:41,330
data about what takes time when right so

409
00:15:39,019 --> 00:15:42,980
in our code right if you if you remember

410
00:15:41,330 --> 00:15:46,129
we've already actually if that's no good

411
00:15:42,980 --> 00:15:47,930
I actually need some old rad game Tools

412
00:15:46,129 --> 00:15:51,610
command prompt that's good this guy

413
00:15:47,929 --> 00:15:55,069
there we go if you remember in our code

414
00:15:51,610 --> 00:15:58,639
we already have a bunch of debug debug

415
00:15:55,070 --> 00:16:00,200
timers things right and so you see here

416
00:15:58,639 --> 00:16:01,879
we have these cycle counters right like

417
00:16:00,200 --> 00:16:04,250
how long these different things took and

418
00:16:01,879 --> 00:16:06,588
so a very basic thing that we might do

419
00:16:04,250 --> 00:16:09,559
is if we just recorded what these were

420
00:16:06,589 --> 00:16:11,150
every frame then we could easily figure

421
00:16:09,559 --> 00:16:13,338
out at least for the things that were

422
00:16:11,149 --> 00:16:15,199
timed did any of them take longer than

423
00:16:13,339 --> 00:16:17,120
they normally should have right so you

424
00:16:15,200 --> 00:16:19,009
can imagine in this log recording

425
00:16:17,120 --> 00:16:20,750
something like okay let's just record

426
00:16:19,009 --> 00:16:24,049
the debug timers so I have something

427
00:16:20,750 --> 00:16:26,778
like you know okay for timer zero we had

428
00:16:24,049 --> 00:16:28,278
some kind of a you know whatever it was

429
00:16:26,778 --> 00:16:30,139
one millisecond or whatever right and

430
00:16:28,278 --> 00:16:31,669
then we had you know timer one and then

431
00:16:30,139 --> 00:16:33,289
it had something like five milliseconds

432
00:16:31,669 --> 00:16:36,469
right and so in our log we could have

433
00:16:33,289 --> 00:16:38,899
some of this information yeah so that'd

434
00:16:36,470 --> 00:16:41,000
be pretty good and what we want to do is

435
00:16:38,899 --> 00:16:42,379
we want to abstract this like right here

436
00:16:41,000 --> 00:16:45,019
you know I wrote a really rudimentary

437
00:16:42,379 --> 00:16:46,700
one we'd want to sort of pull that out

438
00:16:45,019 --> 00:16:48,439
into a way that was really easy much

439
00:16:46,700 --> 00:16:50,870
easier than it was to add these debug

440
00:16:48,440 --> 00:16:52,910
cycle counters such that it would be

441
00:16:50,870 --> 00:16:55,100
pretty cheap for us to just drop those

442
00:16:52,909 --> 00:16:57,528
everywhere in our code right

443
00:16:55,100 --> 00:16:59,300
so that basically every last subsystem

444
00:16:57,528 --> 00:17:01,639
in the game and even portions of a

445
00:16:59,299 --> 00:17:04,338
subsystem could have these debug timers

446
00:17:01,639 --> 00:17:06,529
and then our log for every frame you

447
00:17:04,338 --> 00:17:08,808
know it's not gonna be too big right

448
00:17:06,529 --> 00:17:10,670
we're talking about you know for a you

449
00:17:08,808 --> 00:17:14,000
know 16 K something like this for framed

450
00:17:10,670 --> 00:17:16,068
peanuts right can just store all of our

451
00:17:14,000 --> 00:17:17,929
timers so then when we have a slow frame

452
00:17:16,068 --> 00:17:20,029
we can just go back and have some kind

453
00:17:17,929 --> 00:17:21,259
of a readout that will tell us who was

454
00:17:20,029 --> 00:17:23,500
the culprit you know who's the slow

455
00:17:21,259 --> 00:17:26,500
thing very very straightforward right

456
00:17:23,500 --> 00:17:26,500
okay

457
00:17:29,619 --> 00:17:39,319
so let's extend that notion perhaps a

458
00:17:35,179 --> 00:17:44,419
little bit more okay so if we really

459
00:17:39,319 --> 00:17:46,278
wanted to you know if we if we if we

460
00:17:44,419 --> 00:17:49,610
wanted to take that a little bit further

461
00:17:46,278 --> 00:17:51,349
right then there are certainly some

462
00:17:49,609 --> 00:17:53,750
things that we could do with the debug

463
00:17:51,349 --> 00:17:56,808
services that would extend the

464
00:17:53,750 --> 00:17:59,569
capabilities of this log so one thing

465
00:17:56,808 --> 00:18:01,700
that you could imagine doing right is we

466
00:17:59,569 --> 00:18:05,859
already know that we have the capability

467
00:18:01,700 --> 00:18:08,899
to replay stuff in our game we have that

468
00:18:05,859 --> 00:18:12,469
so you could imagine when we run the

469
00:18:08,898 --> 00:18:14,599
game if we wanted to we could store the

470
00:18:12,470 --> 00:18:17,569
initial state of the game out to one of

471
00:18:14,599 --> 00:18:19,548
our little storage files right and then

472
00:18:17,569 --> 00:18:21,558
as we came through if we're writing out

473
00:18:19,548 --> 00:18:24,349
all of that information if we wrote out

474
00:18:21,558 --> 00:18:26,028
you know what our looped live code

475
00:18:24,349 --> 00:18:28,548
ending if we had that just running all

476
00:18:26,028 --> 00:18:31,278
the time then what we could do is when

477
00:18:28,548 --> 00:18:32,690
we got to any individual frame like you

478
00:18:31,278 --> 00:18:36,048
know if we were talking about this frame

479
00:18:32,690 --> 00:18:37,548
right here we have the capability of

480
00:18:36,048 --> 00:18:40,668
starting at the beginning of the program

481
00:18:37,548 --> 00:18:42,558
and letting the input run up to the

482
00:18:40,669 --> 00:18:44,659
point where it hits here and then

483
00:18:42,558 --> 00:18:46,538
breaking like setting a breakpoint right

484
00:18:44,659 --> 00:18:51,110
we could do our debug interrupt that

485
00:18:46,538 --> 00:18:53,240
would allow us at any time to say okay I

486
00:18:51,109 --> 00:18:55,758
would like to be able to step through

487
00:18:53,240 --> 00:18:58,099
the slow frame and actually see what

488
00:18:55,759 --> 00:19:01,099
actually happened the time that it was

489
00:18:58,099 --> 00:19:03,769
slow right and that's pretty awesome

490
00:19:01,099 --> 00:19:05,719
because that would allow us to not have

491
00:19:03,769 --> 00:19:07,038
to guess about what actually happened

492
00:19:05,720 --> 00:19:09,980
inside a particularly slow function we

493
00:19:07,038 --> 00:19:11,179
could actually just see and the only

494
00:19:09,980 --> 00:19:12,798
thing that's a little annoying about

495
00:19:11,179 --> 00:19:15,230
that is well it might take a pretty long

496
00:19:12,798 --> 00:19:17,418
time if I played the game for 30 minutes

497
00:19:15,230 --> 00:19:19,548
or something like this or 10 minutes it

498
00:19:17,419 --> 00:19:21,860
might be annoying to wait a whole 10

499
00:19:19,548 --> 00:19:23,000
minutes to get back to that point and so

500
00:19:21,859 --> 00:19:24,648
one thing that we could consider doing

501
00:19:23,000 --> 00:19:26,538
in our debug versus the game is like

502
00:19:24,648 --> 00:19:29,359
checkpointing right so you know

503
00:19:26,538 --> 00:19:31,730
something like every you know every 30

504
00:19:29,359 --> 00:19:33,769
seconds let's say we just checkpoint the

505
00:19:31,730 --> 00:19:36,378
memory so that we can always jump back

506
00:19:33,769 --> 00:19:38,179
to the earliest 30-second part and then

507
00:19:36,378 --> 00:19:39,480
play the frames forward till we get to a

508
00:19:38,179 --> 00:19:41,880
place where

509
00:19:39,480 --> 00:19:45,240
we were trying to inspect the code and

510
00:19:41,880 --> 00:19:47,580
break right there right again it's stuff

511
00:19:45,240 --> 00:19:49,710
that we've already mostly written so if

512
00:19:47,579 --> 00:19:51,689
we wanted to sort of start to bring that

513
00:19:49,710 --> 00:19:53,179
system out more to the forefront we

514
00:19:51,690 --> 00:19:55,740
could have some pretty awesome

515
00:19:53,179 --> 00:19:58,740
technology therefore for finding bugs

516
00:19:55,740 --> 00:20:02,700
that are very transient in nature in

517
00:19:58,740 --> 00:20:04,470
that way right so that's a pretty good

518
00:20:02,700 --> 00:20:05,759
system and we probably should look into

519
00:20:04,470 --> 00:20:07,380
doing that since we've already done most

520
00:20:05,759 --> 00:20:09,898
of the work there is however a pretty

521
00:20:07,380 --> 00:20:11,370
big caveat which is that although that

522
00:20:09,898 --> 00:20:17,129
will be very good for debugging our game

523
00:20:11,369 --> 00:20:19,500
code at the end of the day it won't be

524
00:20:17,130 --> 00:20:23,460
that good for debugging multi-threading

525
00:20:19,500 --> 00:20:27,269
problems right because we don't control

526
00:20:23,460 --> 00:20:30,179
how the operating system does its thread

527
00:20:27,269 --> 00:20:32,429
scheduler you know it chooses when each

528
00:20:30,179 --> 00:20:34,288
individual thread runs it and we can't

529
00:20:32,429 --> 00:20:37,139
reproduce the possible deadlock

530
00:20:34,288 --> 00:20:40,669
conditions or possible memory overwrites

531
00:20:37,138 --> 00:20:44,219
race conditions we can't reproduce those

532
00:20:40,669 --> 00:20:46,169
really without a heck of a lot of extra

533
00:20:44,220 --> 00:20:47,399
work on our part trying to sort of like

534
00:20:46,169 --> 00:20:49,080
insert ourselves in between the

535
00:20:47,398 --> 00:20:50,219
operating system and our code and all

536
00:20:49,079 --> 00:20:52,888
these other sorts of things it should be

537
00:20:50,220 --> 00:20:55,259
a pretty major investment so there are

538
00:20:52,888 --> 00:20:57,178
limitations to this but if we assume

539
00:20:55,259 --> 00:20:59,369
that most of our bugs will not be in the

540
00:20:57,179 --> 00:21:00,929
multi threading arena that we might want

541
00:20:59,369 --> 00:21:02,579
to find this way then this would still

542
00:21:00,929 --> 00:21:04,200
be a big win if we assume that most of

543
00:21:02,579 --> 00:21:05,308
our bugs would be an alter turning arena

544
00:21:04,200 --> 00:21:07,528
than this would probably be a waste of

545
00:21:05,308 --> 00:21:08,940
time because it's not going to help us

546
00:21:07,528 --> 00:21:10,829
really find those it won't be able to

547
00:21:08,940 --> 00:21:12,538
reproduce them exactly unfortunately

548
00:21:10,829 --> 00:21:14,699
that's just the nature of the beast

549
00:21:12,538 --> 00:21:16,230
unless that particular multi-threading

550
00:21:14,700 --> 00:21:17,970
bug happens to be very reliably

551
00:21:16,230 --> 00:21:19,288
reproducible given certain initial

552
00:21:17,970 --> 00:21:22,069
conditions right because this certainly

553
00:21:19,288 --> 00:21:24,869
does reproduce those initial conditions

554
00:21:22,069 --> 00:21:26,158
okay so those are some things we

555
00:21:24,869 --> 00:21:27,750
probably want to start thinking about

556
00:21:26,159 --> 00:21:34,250
right so we want to have something like

557
00:21:27,750 --> 00:21:34,250
a you know performance counter log

558
00:21:37,259 --> 00:21:45,929
we probably want to have a frame

559
00:21:40,400 --> 00:21:47,490
recording and jump because we already

560
00:21:45,929 --> 00:21:50,280
sort of have most of that so we probably

561
00:21:47,490 --> 00:21:52,859
could do at least something for that and

562
00:21:50,279 --> 00:21:54,899
then the next thing that I wanted to

563
00:21:52,859 --> 00:21:58,079
point out is we probably want some way

564
00:21:54,900 --> 00:22:00,210
of into art in addition to this sort of

565
00:21:58,079 --> 00:22:01,439
locking of performance information which

566
00:22:00,210 --> 00:22:03,539
will allow us to find things like slow

567
00:22:01,440 --> 00:22:06,179
frames another thing that we might want

568
00:22:03,539 --> 00:22:10,168
to what do is like log stuff like our

569
00:22:06,179 --> 00:22:13,470
memory consumption right like memory

570
00:22:10,169 --> 00:22:16,559
consumption layout so you can see how

571
00:22:13,470 --> 00:22:17,640
our memory is being used right and then

572
00:22:16,558 --> 00:22:20,548
another thing that we probably want to

573
00:22:17,640 --> 00:22:22,890
do is sucks like diagrams like

574
00:22:20,548 --> 00:22:24,808
diagramming right and that's a pretty

575
00:22:22,890 --> 00:22:28,190
big one so let's talk about that one for

576
00:22:24,808 --> 00:22:31,259
a second so what typically happens in

577
00:22:28,190 --> 00:22:32,490
these sorts of scenarios where we're you

578
00:22:31,259 --> 00:22:33,660
know you've already seen it happen a

579
00:22:32,490 --> 00:22:36,000
bunch when we were working on like our

580
00:22:33,660 --> 00:22:37,590
world representations for example or you

581
00:22:36,000 --> 00:22:40,919
know even just the LAT very last thing

582
00:22:37,589 --> 00:22:43,259
we did fonts right well you know we're

583
00:22:40,919 --> 00:22:45,000
doing this font work and we're kind of

584
00:22:43,259 --> 00:22:47,190
flying blind right because I would say

585
00:22:45,000 --> 00:22:48,900
stuff like oh okay you know we want to

586
00:22:47,190 --> 00:22:50,429
make sure that we have like a baseline

587
00:22:48,900 --> 00:22:52,110
and we want to make sure that like the

588
00:22:50,429 --> 00:22:54,000
base of the cue lines up with the

589
00:22:52,109 --> 00:22:55,469
baseline or whatever or like the a you

590
00:22:54,000 --> 00:22:57,419
know is sitting directly on the baseline

591
00:22:55,470 --> 00:23:00,450
bla bla bla bla bla right but we could

592
00:22:57,419 --> 00:23:03,270
never really draw the baseline you know

593
00:23:00,450 --> 00:23:05,039
it was always it's always a big deal to

594
00:23:03,269 --> 00:23:07,529
draw these things because of course you

595
00:23:05,039 --> 00:23:09,149
know we our render is set up to render

596
00:23:07,529 --> 00:23:14,129
the actual game and to do stuff that the

597
00:23:09,150 --> 00:23:16,880
game wants to do but stuff like just

598
00:23:14,130 --> 00:23:18,929
drawing a single pixel line or a

599
00:23:16,880 --> 00:23:20,309
rectangle around something to like

600
00:23:18,929 --> 00:23:23,610
highlight it or something like this

601
00:23:20,308 --> 00:23:25,889
right or put some just a little debug

602
00:23:23,609 --> 00:23:27,240
string and in there you know that's

603
00:23:25,890 --> 00:23:28,860
attached to something like you know a

604
00:23:27,240 --> 00:23:31,079
little thing that says baseline or an

605
00:23:28,859 --> 00:23:32,789
arrow that goes between two points right

606
00:23:31,079 --> 00:23:35,428
so you can see that you know something

607
00:23:32,789 --> 00:23:39,240
like a vector all of that stuff may be

608
00:23:35,429 --> 00:23:41,519
totally useless for a game but that sort

609
00:23:39,240 --> 00:23:43,798
of stuff could really help us when we're

610
00:23:41,519 --> 00:23:45,418
trying to debug our code that deals with

611
00:23:43,798 --> 00:23:47,220
anything spatial anything that is

612
00:23:45,419 --> 00:23:49,259
inherently geometric in nature because

613
00:23:47,220 --> 00:23:50,319
if you think about what it's like to

614
00:23:49,259 --> 00:23:52,658
debug something in your

615
00:23:50,319 --> 00:23:54,398
oh you know I want to debug this vector

616
00:23:52,659 --> 00:23:57,610
and you look at something that's like Oh

617
00:23:54,398 --> 00:24:00,849
one two three nine five seven you know f

618
00:23:57,609 --> 00:24:02,619
comma two point three nine whatever you

619
00:24:00,849 --> 00:24:06,250
know blah blah blah you look at that and

620
00:24:02,619 --> 00:24:08,768
your brain you know even I've been

621
00:24:06,250 --> 00:24:11,558
looking at these kind of numbers for how

622
00:24:08,769 --> 00:24:14,288
many years now right your brain just

623
00:24:11,558 --> 00:24:16,418
isn't that fast at constructing the

624
00:24:14,288 --> 00:24:18,940
relationship between lots of things that

625
00:24:16,419 --> 00:24:20,169
look like this right I mean I can do it

626
00:24:18,940 --> 00:24:21,820
you know I can sit there and kind of go

627
00:24:20,169 --> 00:24:24,009
okay that's about here this quadrant

628
00:24:21,819 --> 00:24:25,450
public right I can do it because I've

629
00:24:24,009 --> 00:24:27,730
had a lot of practice and when I have

630
00:24:25,450 --> 00:24:31,840
that about things that way I can but

631
00:24:27,730 --> 00:24:34,120
it's much much slower right if you could

632
00:24:31,839 --> 00:24:35,829
instead just have a thing that goes like

633
00:24:34,119 --> 00:24:38,199
oh I'm trying to bug this algorithm and

634
00:24:35,829 --> 00:24:39,579
it just drew out all the things for me

635
00:24:38,200 --> 00:24:41,409
and made the little math diagram

636
00:24:39,579 --> 00:24:43,808
whatever right you know that I needed

637
00:24:41,409 --> 00:24:45,580
you can immediately see stuff trivially

638
00:24:43,808 --> 00:24:47,079
that's like oh this vector was supposed

639
00:24:45,579 --> 00:24:48,189
to be perpendicular to this thing but

640
00:24:47,079 --> 00:24:49,628
instead it's like pointing off that

641
00:24:48,190 --> 00:24:52,210
direction right it's supposed to be

642
00:24:49,628 --> 00:24:53,980
there and tear that takes you know a

643
00:24:52,210 --> 00:24:55,179
split second of your eye to look at and

644
00:24:53,980 --> 00:24:56,829
it immediately knows that and it would

645
00:24:55,179 --> 00:24:58,570
have taken several minutes of looking at

646
00:24:56,829 --> 00:24:59,558
the values and going oh wait that

647
00:24:58,569 --> 00:25:03,298
doesn't seem like it's in the right

648
00:24:59,558 --> 00:25:06,009
quadrant you know whatever right and so

649
00:25:03,298 --> 00:25:08,038
diagramming for game development is like

650
00:25:06,009 --> 00:25:10,628
a really really really important tool

651
00:25:08,038 --> 00:25:13,179
because there are so many things that

652
00:25:10,628 --> 00:25:15,398
have that sort of property of there

653
00:25:13,179 --> 00:25:17,710
being lots of correlated values that

654
00:25:15,398 --> 00:25:19,119
form spatial relationships that if

655
00:25:17,710 --> 00:25:21,940
you're always trying to bug those by

656
00:25:19,119 --> 00:25:23,558
just looking in a watch window it's

657
00:25:21,940 --> 00:25:25,509
gonna take a lot longer to find those

658
00:25:23,558 --> 00:25:26,769
bugs and some subtle bugs you may never

659
00:25:25,509 --> 00:25:27,878
find and they're always kind of a little

660
00:25:26,769 --> 00:25:30,038
janky you're not sure what's going on

661
00:25:27,878 --> 00:25:31,480
and if you'd had some visualization code

662
00:25:30,038 --> 00:25:32,619
you would have been able to find them

663
00:25:31,480 --> 00:25:34,298
you would have been able to gain more

664
00:25:32,619 --> 00:25:35,949
insight in the problem you also might be

665
00:25:34,298 --> 00:25:37,808
able to do things more optimally you

666
00:25:35,950 --> 00:25:39,610
might hit upon performance wins even

667
00:25:37,808 --> 00:25:41,678
just because now you're looking at the

668
00:25:39,609 --> 00:25:44,048
problem being Illustrated out and you

669
00:25:41,679 --> 00:25:48,250
can sort of make more you know better

670
00:25:44,048 --> 00:25:49,658
conclusions from it right okay so we've

671
00:25:48,250 --> 00:25:50,829
got about a half hour left here so I'm

672
00:25:49,659 --> 00:25:51,820
just gonna go a little bit further into

673
00:25:50,829 --> 00:25:53,349
this and then I think we can probably

674
00:25:51,819 --> 00:25:55,148
start talking about how we might want to

675
00:25:53,349 --> 00:25:57,490
implement some of these things may pop

676
00:25:55,148 --> 00:26:01,089
over the code and just go

677
00:25:57,490 --> 00:26:03,788
so diagramming right and you know all of

678
00:26:01,089 --> 00:26:06,099
these sorts of things they're all sort

679
00:26:03,788 --> 00:26:07,599
of temporal again in nature right so

680
00:26:06,099 --> 00:26:09,548
what we want to do is we don't really

681
00:26:07,599 --> 00:26:10,839
want to have lots of separate things we

682
00:26:09,548 --> 00:26:12,158
don't want to have like the memory thing

683
00:26:10,839 --> 00:26:13,538
as a separate system and the performance

684
00:26:12,159 --> 00:26:15,220
counter is a separate system and the

685
00:26:13,538 --> 00:26:16,960
diagramming server says I don't really

686
00:26:15,220 --> 00:26:18,548
want that what I'd rather be able to do

687
00:26:16,960 --> 00:26:19,750
right you said everything kind of go

688
00:26:18,548 --> 00:26:23,138
through this log and the reason for that

689
00:26:19,750 --> 00:26:25,778
is because again game programming a lot

690
00:26:23,138 --> 00:26:27,418
of the subtle bugs they happen across a

691
00:26:25,778 --> 00:26:30,369
lot of time in space like they're not

692
00:26:27,419 --> 00:26:31,809
really localized the hard bugs the the

693
00:26:30,369 --> 00:26:32,798
easy bugs are the ones sort of localize

694
00:26:31,808 --> 00:26:35,589
there's the ones you don't care as much

695
00:26:32,798 --> 00:26:38,378
about the debug system so what I want to

696
00:26:35,589 --> 00:26:42,638
be able to do is I want to be able to

697
00:26:38,378 --> 00:26:45,099
capture things like diagrams right I'd

698
00:26:42,638 --> 00:26:47,259
like them to go into the log so that

699
00:26:45,099 --> 00:26:49,509
when I have a problem on the previous

700
00:26:47,259 --> 00:26:52,148
frame or something like that

701
00:26:49,509 --> 00:26:54,278
I know that I can just sort of run the

702
00:26:52,148 --> 00:26:56,349
frame and then like inspect the diagram

703
00:26:54,278 --> 00:26:59,710
or something like that and not have to

704
00:26:56,349 --> 00:27:01,658
worry about like oh you know I got a run

705
00:26:59,710 --> 00:27:03,909
some special thing and like stop the

706
00:27:01,659 --> 00:27:06,549
program and go into the code and turn on

707
00:27:03,909 --> 00:27:07,419
some stuff right and in fact you know

708
00:27:06,548 --> 00:27:09,099
what that's something I should talk

709
00:27:07,419 --> 00:27:10,419
about a little more broadly right let me

710
00:27:09,099 --> 00:27:11,528
talk about that a little more broadly so

711
00:27:10,419 --> 00:27:13,899
I could make the point a little bit

712
00:27:11,528 --> 00:27:16,829
clearer okay

713
00:27:13,898 --> 00:27:19,209
so one way that I could do this right is

714
00:27:16,829 --> 00:27:21,788
let's say I have some diagramming tools

715
00:27:19,210 --> 00:27:24,278
whatever they are and I have a piece of

716
00:27:21,788 --> 00:27:26,079
code right and the codes doing something

717
00:27:24,278 --> 00:27:27,759
we'll make it really basic a lot more

718
00:27:26,079 --> 00:27:28,960
basic than probably something you would

719
00:27:27,759 --> 00:27:29,980
really care that much about debugging

720
00:27:28,960 --> 00:27:32,860
but you know just for the sake of

721
00:27:29,980 --> 00:27:34,720
illustration we have something and we're

722
00:27:32,859 --> 00:27:37,449
like okay you know a is gonna be equal

723
00:27:34,720 --> 00:27:38,889
to B plus C right and these things are

724
00:27:37,450 --> 00:27:40,360
vectors so they're all like

725
00:27:38,888 --> 00:27:41,769
three-dimensional vectors or something

726
00:27:40,359 --> 00:27:43,089
well in our game they might probably be

727
00:27:41,769 --> 00:27:44,440
two-dimensional vectors I don't know

728
00:27:43,089 --> 00:27:46,808
well we've got yeah we've got

729
00:27:44,440 --> 00:27:48,820
three-dimensional vectors right so if we

730
00:27:46,808 --> 00:27:50,079
have a bunch of these vectors here right

731
00:27:48,819 --> 00:27:52,599
and we're going to do something where

732
00:27:50,079 --> 00:27:53,980
we're adding them together and you know

733
00:27:52,599 --> 00:27:55,538
we suspect that there might be some kind

734
00:27:53,980 --> 00:27:57,669
of a bug in this code like maybe the B

735
00:27:55,538 --> 00:27:59,319
vector is wrong we suspect that like

736
00:27:57,669 --> 00:28:01,590
it's being passed in as the wrong value

737
00:27:59,319 --> 00:28:04,109
or I don't know right

738
00:28:01,589 --> 00:28:08,789
for Patrick pretended with something a

739
00:28:04,109 --> 00:28:11,309
lot more complicated okay so what I

740
00:28:08,789 --> 00:28:13,019
don't really want to have to do is

741
00:28:11,309 --> 00:28:15,599
change the structure of this code at all

742
00:28:13,019 --> 00:28:18,329
right the thing that I really don't want

743
00:28:15,599 --> 00:28:21,509
to do is I don't want to have to modify

744
00:28:18,329 --> 00:28:24,119
the code in any way to add my

745
00:28:21,509 --> 00:28:26,700
diagramming so for example if this was

746
00:28:24,119 --> 00:28:29,309
in some kind of function foo right that

747
00:28:26,700 --> 00:28:31,170
takes some parameters and here we go the

748
00:28:29,309 --> 00:28:33,659
last thing I want to do is have to pass

749
00:28:31,170 --> 00:28:36,060
something in here like modify like the

750
00:28:33,660 --> 00:28:37,740
control flow right and whoever calls it

751
00:28:36,059 --> 00:28:39,750
and whoever calls that I don't want have

752
00:28:37,740 --> 00:28:42,210
to pass in some debug services thing

753
00:28:39,750 --> 00:28:43,529
right I don't want to have any setup I

754
00:28:42,210 --> 00:28:46,440
don't want anything to happen there like

755
00:28:43,529 --> 00:28:47,970
that what I want to be able to do is I

756
00:28:46,440 --> 00:28:50,370
want to be able to just straight ahead

757
00:28:47,970 --> 00:28:54,740
mark up this function I want to be able

758
00:28:50,369 --> 00:29:01,199
to do something like draw you know a and

759
00:28:54,740 --> 00:29:02,789
then draw you know B draw see you know

760
00:29:01,200 --> 00:29:04,200
that sort of thing I want to be able to

761
00:29:02,789 --> 00:29:07,740
have something where I just sort of add

762
00:29:04,200 --> 00:29:10,789
I want to always add things in I never

763
00:29:07,740 --> 00:29:14,190
have to change anything here and then

764
00:29:10,789 --> 00:29:17,639
furthermore I want to be able to leave

765
00:29:14,190 --> 00:29:19,769
that there right I want to be able to

766
00:29:17,640 --> 00:29:21,840
leave it in so that I don't have to take

767
00:29:19,769 --> 00:29:23,460
it out figure and then find oh there's

768
00:29:21,839 --> 00:29:25,589
another bug in it later and add it all

769
00:29:23,460 --> 00:29:28,529
back in right so I want it to always be

770
00:29:25,589 --> 00:29:30,599
you know it's it's always add right

771
00:29:28,529 --> 00:29:33,599
you always always add debug code in you

772
00:29:30,599 --> 00:29:35,789
never take debug code away right so I

773
00:29:33,599 --> 00:29:36,929
want it to be part of the the crucial

774
00:29:35,789 --> 00:29:39,720
part of the bug system I want to be

775
00:29:36,930 --> 00:29:42,570
really free to add the stuff in here

776
00:29:39,720 --> 00:29:44,100
right I want it to be able to be like

777
00:29:42,569 --> 00:29:45,329
turned on and off easily so I can just

778
00:29:44,099 --> 00:29:47,250
kind of put it in there and forget about

779
00:29:45,329 --> 00:29:49,049
it I don't want to have to do any work

780
00:29:47,250 --> 00:29:51,480
sort of to pass things through or

781
00:29:49,049 --> 00:29:53,430
anything like that and then like I was

782
00:29:51,480 --> 00:29:55,049
saying before I want it to go through a

783
00:29:53,430 --> 00:29:58,700
logging system and the reason for that

784
00:29:55,049 --> 00:30:01,349
is sometimes these diagrams I don't know

785
00:29:58,700 --> 00:30:02,610
which diagrams I actually need to look

786
00:30:01,349 --> 00:30:05,189
at until it's too late

787
00:30:02,609 --> 00:30:07,979
right and again we can mitigate some of

788
00:30:05,190 --> 00:30:10,019
that with this system here right we can

789
00:30:07,980 --> 00:30:13,140
mitigate some of that with the fact that

790
00:30:10,019 --> 00:30:15,180
we maybe have a way to record and play

791
00:30:13,140 --> 00:30:18,720
back to a particular place right

792
00:30:15,180 --> 00:30:21,509
but even in that circumstance let's

793
00:30:18,720 --> 00:30:23,850
suppose we have some kind of a thing

794
00:30:21,509 --> 00:30:26,039
where it's really easy for us to figure

795
00:30:23,849 --> 00:30:28,709
out when something happens a little bit

796
00:30:26,039 --> 00:30:37,769
later and it's hard for us to figure out

797
00:30:28,710 --> 00:30:41,309
how should I put this let's say it's

798
00:30:37,769 --> 00:30:43,619
pretty easy for us to maybe find the

799
00:30:41,309 --> 00:30:46,769
bogus one of this these after the fact

800
00:30:43,619 --> 00:30:47,879
but it's not so easy to know which one

801
00:30:46,769 --> 00:30:50,460
it actually is when we're stepping

802
00:30:47,880 --> 00:30:53,070
through it and so for example let's say

803
00:30:50,460 --> 00:30:54,720
that we don't have any wit criteria like

804
00:30:53,069 --> 00:30:56,309
this this foo gets called like four

805
00:30:54,720 --> 00:30:59,069
thousand times or something right it's

806
00:30:56,309 --> 00:31:00,659
like some kind of a high use function we

807
00:30:59,069 --> 00:31:02,069
have no way of knowing which one of them

808
00:31:00,660 --> 00:31:03,900
is wrong we don't we just don't have any

809
00:31:02,069 --> 00:31:07,409
idea all we know is something went wrong

810
00:31:03,900 --> 00:31:09,180
right well if I have to know which one

811
00:31:07,410 --> 00:31:10,920
is wrong in order to like turn on the

812
00:31:09,180 --> 00:31:12,750
right one to see the diagram that's not

813
00:31:10,920 --> 00:31:15,300
gonna help me and I also can't look at

814
00:31:12,750 --> 00:31:17,099
4000 diagrams at once so what I want to

815
00:31:15,299 --> 00:31:19,139
be able to do is just like record them

816
00:31:17,099 --> 00:31:21,240
all so they all go into the log and then

817
00:31:19,140 --> 00:31:23,040
have some kind of a way to quickly scrub

818
00:31:21,240 --> 00:31:25,589
through them find the one that looks

819
00:31:23,039 --> 00:31:27,269
wrong and then go okay I see which one

820
00:31:25,589 --> 00:31:28,919
that was what's that you know what's the

821
00:31:27,269 --> 00:31:30,480
actual mark up on it and maybe you know

822
00:31:28,920 --> 00:31:32,759
this thing has in it some kind of an

823
00:31:30,480 --> 00:31:35,279
info call right as well that allows me

824
00:31:32,759 --> 00:31:36,839
to like say something about which foo it

825
00:31:35,279 --> 00:31:38,430
was you know like some index or

826
00:31:36,839 --> 00:31:40,589
something so that when I find the one

827
00:31:38,430 --> 00:31:44,730
that's wrong I go oh smoking gun it's

828
00:31:40,589 --> 00:31:46,619
you know number 37 or whatever right so

829
00:31:44,730 --> 00:31:47,789
that's the kind of nature that that's

830
00:31:46,619 --> 00:31:49,139
the kind of thing that I want to have

831
00:31:47,789 --> 00:31:50,940
happen right I want everything to go

832
00:31:49,140 --> 00:31:53,550
into a log so it's not so important that

833
00:31:50,940 --> 00:31:57,029
I'm able to like kind of pinpoint ahead

834
00:31:53,549 --> 00:31:59,490
of time who the culprit is I want to be

835
00:31:57,029 --> 00:32:01,230
able to annotate the information in a

836
00:31:59,490 --> 00:32:03,779
very fast and flexible way that does not

837
00:32:01,230 --> 00:32:06,630
require changing the code around it in

838
00:32:03,779 --> 00:32:08,129
any way I want to be able to leave debug

839
00:32:06,630 --> 00:32:09,840
code in there without a whole lot of

840
00:32:08,130 --> 00:32:11,820
cost to me because I don't want to have

841
00:32:09,839 --> 00:32:13,379
to constantly worry about going in and

842
00:32:11,819 --> 00:32:14,549
if zero inge and uh nifty rowing and all

843
00:32:13,380 --> 00:32:16,680
this other sides I want it to be like

844
00:32:14,549 --> 00:32:19,819
nice and easy to just kind of turn it

845
00:32:16,680 --> 00:32:19,820
off turn it on in a particular area

846
00:32:20,180 --> 00:32:25,830
right

847
00:32:22,589 --> 00:32:28,250
and I want to be able to make sure that

848
00:32:25,829 --> 00:32:30,359
I have some way of if I can write

849
00:32:28,250 --> 00:32:32,009
annotating that stuff with with

850
00:32:30,359 --> 00:32:37,109
something that helps me find out which

851
00:32:32,009 --> 00:32:38,759
one I'm talking about so that's mostly I

852
00:32:37,109 --> 00:32:41,428
think that's pretty much all the basics

853
00:32:38,759 --> 00:32:44,160
right everything that's you know more

854
00:32:41,429 --> 00:32:45,809
subtle and more sort of advanced in that

855
00:32:44,160 --> 00:32:47,429
I think we'll just kind of run into as

856
00:32:45,808 --> 00:32:49,230
we go and I can sort of point it out but

857
00:32:47,429 --> 00:32:51,000
hopefully you've got kind of an idea of

858
00:32:49,230 --> 00:32:53,400
the sort of things that we're going to

859
00:32:51,000 --> 00:32:57,839
be trying to do here right so I'll add

860
00:32:53,400 --> 00:33:00,419
one more we'll call this tuning fiddling

861
00:32:57,839 --> 00:33:03,089
that's sort of unrelated to these right

862
00:33:00,419 --> 00:33:04,770
and this is what I think before this is

863
00:33:03,089 --> 00:33:06,359
more about bringing bugs to the surface

864
00:33:04,769 --> 00:33:09,359
inspecting but being able to kind of

865
00:33:06,359 --> 00:33:11,668
like poke at bugs a little bit and what

866
00:33:09,359 --> 00:33:14,129
this is is right now you know we have

867
00:33:11,669 --> 00:33:16,770
loop live code editing that's true and

868
00:33:14,130 --> 00:33:19,200
so our need for tuning and fiddling

869
00:33:16,769 --> 00:33:20,730
support is substantially less than it

870
00:33:19,200 --> 00:33:22,500
would have been right there's really not

871
00:33:20,730 --> 00:33:24,599
a whole lot that we would really need to

872
00:33:22,500 --> 00:33:26,339
do if we didn't want to we could pretty

873
00:33:24,599 --> 00:33:30,599
much use loop live coding for almost

874
00:33:26,339 --> 00:33:33,629
everything if we wanted to so I we may

875
00:33:30,599 --> 00:33:36,750
just not need this right but I'll just

876
00:33:33,630 --> 00:33:40,260
mention kind of what it is so in our

877
00:33:36,750 --> 00:33:41,730
world right if we want to have the

878
00:33:40,259 --> 00:33:44,220
ability to fiddle with parameters or

879
00:33:41,730 --> 00:33:46,620
tune parameters right we don't actually

880
00:33:44,220 --> 00:33:47,940
need that anything other than just the

881
00:33:46,619 --> 00:33:50,009
code because what we can do is at the

882
00:33:47,940 --> 00:33:52,620
top of our code right at the start of a

883
00:33:50,009 --> 00:33:54,349
frame we just set each parameter right

884
00:33:52,619 --> 00:33:57,889
so we just do like per am

885
00:33:54,349 --> 00:34:00,569
right per m2 equals six right whatever

886
00:33:57,890 --> 00:34:02,580
and so every time through all we would

887
00:34:00,569 --> 00:34:05,009
then do is we just go in here we change

888
00:34:02,579 --> 00:34:06,418
this value to a 15 and the code would

889
00:34:05,009 --> 00:34:09,929
just reload and now it would be a 15

890
00:34:06,419 --> 00:34:11,730
right so that's so we really can just

891
00:34:09,929 --> 00:34:13,108
use that that's fine and that supports

892
00:34:11,730 --> 00:34:14,579
every possible thing we might want doing

893
00:34:13,108 --> 00:34:16,440
code so in a lot of ways it's it's just

894
00:34:14,579 --> 00:34:19,918
much better than what you can do

895
00:34:16,440 --> 00:34:21,539
otherwise but if you were a game that

896
00:34:19,918 --> 00:34:24,690
did not have support for loop live

897
00:34:21,539 --> 00:34:26,820
coding which is most games the tuning

898
00:34:24,690 --> 00:34:28,530
fiddling thing is about getting some

899
00:34:26,820 --> 00:34:30,240
stuff on the screen that lets you do

900
00:34:28,530 --> 00:34:31,859
that so typically what they'll do is

901
00:34:30,239 --> 00:34:34,079
they'll have a little hood you know here

902
00:34:31,858 --> 00:34:35,789
or something and when you drop it down

903
00:34:34,079 --> 00:34:37,500
like maybe you can expand it right

904
00:34:35,789 --> 00:34:40,469
and it's got the parameters in it like

905
00:34:37,500 --> 00:34:42,780
pram one pram two pram three right and

906
00:34:40,469 --> 00:34:44,939
there's maybe like a slider right and

907
00:34:42,780 --> 00:34:48,570
you can slide the slider back and forth

908
00:34:44,940 --> 00:34:49,559
to to set whatever the value is or turn

909
00:34:48,570 --> 00:34:52,590
things on and off like there be

910
00:34:49,559 --> 00:34:56,130
checkboxes that sort of thing right and

911
00:34:52,590 --> 00:34:59,850
so that's really not super necessary for

912
00:34:56,130 --> 00:35:02,340
us we really just don't have the need to

913
00:34:59,849 --> 00:35:04,589
do that probably because we can lean on

914
00:35:02,340 --> 00:35:07,039
this for pretty much all of that and it

915
00:35:04,590 --> 00:35:08,880
is a pretty much a superset of this

916
00:35:07,039 --> 00:35:10,679
because this can't represent

917
00:35:08,880 --> 00:35:12,930
relationships between variables very

918
00:35:10,679 --> 00:35:15,539
well so if I want to go in here and say

919
00:35:12,929 --> 00:35:18,000
it's six plus per am one if that's the

920
00:35:15,539 --> 00:35:20,759
change I wanted to make no amount of

921
00:35:18,000 --> 00:35:22,199
sliders is gonna let me do that where is

922
00:35:20,760 --> 00:35:24,000
this trivial for me to just type that in

923
00:35:22,199 --> 00:35:26,069
in the loop live code I think so we

924
00:35:24,000 --> 00:35:28,050
pretty much have way better than this

925
00:35:26,070 --> 00:35:29,670
thing so we probably just don't want

926
00:35:28,050 --> 00:35:31,860
that but I'm just putting in here so you

927
00:35:29,670 --> 00:35:34,079
can kind of see that even though like we

928
00:35:31,860 --> 00:35:35,760
don't need it it is something that you

929
00:35:34,079 --> 00:35:37,920
would typically included debug services

930
00:35:35,760 --> 00:35:40,170
and you know maybe if we find that

931
00:35:37,920 --> 00:35:43,110
there's something that wouldn't be in

932
00:35:40,170 --> 00:35:45,539
the loop life code editing that we could

933
00:35:43,110 --> 00:35:47,400
put it in there right and so what you

934
00:35:45,539 --> 00:35:48,929
know and now I think about there is one

935
00:35:47,400 --> 00:35:51,180
way we could sort of have some of that

936
00:35:48,929 --> 00:35:52,649
which is just like things that are not

937
00:35:51,179 --> 00:35:54,629
settings but that are actual like

938
00:35:52,650 --> 00:35:56,730
triggers right like things that are kind

939
00:35:54,630 --> 00:35:58,320
of like you know I want like a little

940
00:35:56,730 --> 00:35:59,820
menu of like jump to region

941
00:35:58,320 --> 00:36:01,440
you know like jump to the snow region or

942
00:35:59,820 --> 00:36:03,000
jump to the rainforest or whatever I

943
00:36:01,440 --> 00:36:04,769
don't know who knows right whatever's in

944
00:36:03,000 --> 00:36:06,210
the game maybe I want like a little menu

945
00:36:04,769 --> 00:36:11,039
of things I can just quickly do

946
00:36:06,210 --> 00:36:13,079
something that is less probably you know

947
00:36:11,039 --> 00:36:15,000
obvious how you do it in code you know

948
00:36:13,079 --> 00:36:16,920
we could rig something up but it's not

949
00:36:15,000 --> 00:36:19,469
as clean it you know this isn't probably

950
00:36:16,920 --> 00:36:20,760
the nicer way to do that and so maybe we

951
00:36:19,469 --> 00:36:22,679
want to add something like that I don't

952
00:36:20,760 --> 00:36:23,850
know we'll see how much time we spend on

953
00:36:22,679 --> 00:36:26,460
debug we don't want to spend you know

954
00:36:23,849 --> 00:36:27,420
months on it right so maybe we don't

955
00:36:26,460 --> 00:36:29,340
bother with something like that because

956
00:36:27,420 --> 00:36:31,710
we don't need it as much but it's just

957
00:36:29,340 --> 00:36:34,200
something that's worth pointing out so

958
00:36:31,710 --> 00:36:38,150
there you go that's what we're basically

959
00:36:34,199 --> 00:36:38,149
talking about here so

960
00:36:41,250 --> 00:36:46,269
again what we'd like to do is we'd like

961
00:36:44,679 --> 00:36:47,559
to start exploring how we can build a

962
00:36:46,269 --> 00:36:50,800
system that allows us to start achieving

963
00:36:47,559 --> 00:36:53,199
some of these things and we've got about

964
00:36:50,800 --> 00:36:54,640
20 minutes left so we can probably start

965
00:36:53,199 --> 00:36:56,769
right now there I don't think there's

966
00:36:54,639 --> 00:36:59,108
anything you know this stuff is not

967
00:36:56,769 --> 00:37:01,659
particularly complicated right with a

968
00:36:59,108 --> 00:37:03,279
debug system it's pretty obvious kind of

969
00:37:01,659 --> 00:37:04,690
when I you know as I'm saying it I think

970
00:37:03,280 --> 00:37:06,510
hopefully everyone's like okay yeah that

971
00:37:04,690 --> 00:37:08,559
makes sense I can see why that's useful

972
00:37:06,510 --> 00:37:10,300
there's not a lot of mystery to what you

973
00:37:08,559 --> 00:37:11,920
would want really the it's more of a

974
00:37:10,300 --> 00:37:13,539
thing where the important thing is the

975
00:37:11,920 --> 00:37:15,579
subtlety of how you implement it because

976
00:37:13,539 --> 00:37:17,409
the sorts of ways in which you implement

977
00:37:15,579 --> 00:37:19,750
it can make a debug system drastically

978
00:37:17,409 --> 00:37:21,460
more or less useful and so really the

979
00:37:19,750 --> 00:37:24,039
finesse involved in building a debug

980
00:37:21,460 --> 00:37:25,690
system is knowing you know the exact

981
00:37:24,039 --> 00:37:27,608
right ways to integrate things and the

982
00:37:25,690 --> 00:37:30,940
exact right ways to do things it's a lot

983
00:37:27,608 --> 00:37:33,819
more about that than it is about any

984
00:37:30,940 --> 00:37:35,230
sort of you know high-level concept

985
00:37:33,820 --> 00:37:39,160
because the high-level concept is pretty

986
00:37:35,230 --> 00:37:41,139
obvious what you want to do is just as

987
00:37:39,159 --> 00:37:43,629
fancy as tough as you can as you can

988
00:37:41,139 --> 00:37:44,710
spare the time for to do these sorts of

989
00:37:43,630 --> 00:37:46,150
things right where you're kind of

990
00:37:44,710 --> 00:37:48,338
recording information being able to go

991
00:37:46,150 --> 00:37:49,780
grab it back and display it in as useful

992
00:37:48,338 --> 00:37:51,250
way as possible right and we can all

993
00:37:49,780 --> 00:37:53,050
kind of sit around and imagine what the

994
00:37:51,250 --> 00:37:54,940
best possible system of that might look

995
00:37:53,050 --> 00:37:57,730
like and so most of it again is just

996
00:37:54,940 --> 00:37:59,260
going to be in how long does it take you

997
00:37:57,730 --> 00:38:02,050
to make something and how good is that

998
00:37:59,260 --> 00:38:05,950
something it's all in the sort of like

999
00:38:02,050 --> 00:38:08,440
actual act of programming it and so this

1000
00:38:05,949 --> 00:38:10,480
was very intentional I'll point out it

1001
00:38:08,440 --> 00:38:13,179
was very very intentional when I did

1002
00:38:10,480 --> 00:38:15,250
this code I intentionally made it really

1003
00:38:13,179 --> 00:38:17,108
really lousy where we did the debug

1004
00:38:15,250 --> 00:38:18,818
cycle counters and the reason that I

1005
00:38:17,108 --> 00:38:20,199
made it really lousy was specifically

1006
00:38:18,818 --> 00:38:21,818
because I knew we would get to a point

1007
00:38:20,199 --> 00:38:24,039
when we wanted to do actual debug

1008
00:38:21,818 --> 00:38:25,690
services and that would be the time to

1009
00:38:24,039 --> 00:38:27,730
start talking about it so I really

1010
00:38:25,690 --> 00:38:32,769
wanted this to be lousy so I could show

1011
00:38:27,730 --> 00:38:35,469
you why it's lousy and why something

1012
00:38:32,769 --> 00:38:37,509
what you know when we do something

1013
00:38:35,469 --> 00:38:40,539
better you could see the contrast and

1014
00:38:37,510 --> 00:38:45,099
why it was better right so let's take a

1015
00:38:40,539 --> 00:38:47,619
look at our renderer we use these debug

1016
00:38:45,099 --> 00:38:49,450
cycle counters I forget what it is begin

1017
00:38:47,619 --> 00:38:53,710
time block right

1018
00:38:49,449 --> 00:38:57,009
so we use these cycle counters now what

1019
00:38:53,710 --> 00:38:58,720
is the number one thing I sort of harped

1020
00:38:57,010 --> 00:39:00,760
on in there when we're talking on the

1021
00:38:58,719 --> 00:39:03,548
the blackboard there when I was talking

1022
00:39:00,760 --> 00:39:06,130
about marking up code I said I don't

1023
00:39:03,548 --> 00:39:09,039
want to have to do a bunch of work to

1024
00:39:06,130 --> 00:39:11,740
mark up that code right and you can see

1025
00:39:09,039 --> 00:39:15,009
that even though we made it be sort of a

1026
00:39:11,739 --> 00:39:16,629
global activity so it's true that I

1027
00:39:15,010 --> 00:39:19,000
didn't have to pass like a debug

1028
00:39:16,630 --> 00:39:21,640
services pointer in here so that's okay

1029
00:39:19,000 --> 00:39:23,980
good on us we didn't do that what you

1030
00:39:21,639 --> 00:39:26,230
can see is that it's not free for me to

1031
00:39:23,980 --> 00:39:30,010
add this line this begin timed block

1032
00:39:26,230 --> 00:39:32,769
line still costs actual programmer time

1033
00:39:30,010 --> 00:39:34,510
to go and work with and the reason for

1034
00:39:32,769 --> 00:39:36,280
that is because these things are like a

1035
00:39:34,510 --> 00:39:38,260
table that are defined with enums and

1036
00:39:36,280 --> 00:39:45,369
enums kind of are in here right and

1037
00:39:38,260 --> 00:39:47,200
whatever so we do have a cost and I

1038
00:39:45,369 --> 00:39:49,630
don't like that right I don't like that

1039
00:39:47,199 --> 00:39:51,848
cost at all what I would rather be able

1040
00:39:49,630 --> 00:39:55,119
to do instead like let's say we wanted a

1041
00:39:51,849 --> 00:39:59,019
time draw mat right I want to be able to

1042
00:39:55,119 --> 00:40:00,338
just go begin time block and say that I

1043
00:39:59,019 --> 00:40:02,230
want this to be called draw mat or

1044
00:40:00,338 --> 00:40:06,548
something and then I want to come down

1045
00:40:02,230 --> 00:40:07,809
here and say end time block right I want

1046
00:40:06,548 --> 00:40:09,579
to be able to do something extremely

1047
00:40:07,809 --> 00:40:12,609
simple and better yet I probably want to

1048
00:40:09,579 --> 00:40:14,470
be something like this where I don't

1049
00:40:12,608 --> 00:40:16,358
even have to begin and end it if I don't

1050
00:40:14,469 --> 00:40:17,739
want to it'll just automatically end

1051
00:40:16,358 --> 00:40:19,298
itself if I say that I want a

1052
00:40:17,739 --> 00:40:21,608
self-closing block so I can just stick

1053
00:40:19,298 --> 00:40:23,139
in one line of code and then I want that

1054
00:40:21,608 --> 00:40:26,980
to just do everything for me I don't

1055
00:40:23,139 --> 00:40:31,210
want to do anything else right so first

1056
00:40:26,980 --> 00:40:34,269
things first we can do the beginning end

1057
00:40:31,210 --> 00:40:36,159
part right we can get that by using and

1058
00:40:34,269 --> 00:40:37,568
you know again another question I often

1059
00:40:36,159 --> 00:40:39,519
get asked on here may hero why do you

1060
00:40:37,568 --> 00:40:41,318
use CPP if most the time to program and

1061
00:40:39,519 --> 00:40:44,318
see well like I say function overloading

1062
00:40:41,318 --> 00:40:46,838
good operator overloading good and

1063
00:40:44,318 --> 00:40:48,338
here's the the part that I've alluded to

1064
00:40:46,838 --> 00:40:50,259
many times I've said constructor

1065
00:40:48,338 --> 00:40:52,210
destructor pairs can be useful for

1066
00:40:50,260 --> 00:40:55,480
marking up code here is the exact

1067
00:40:52,210 --> 00:40:57,909
situation in which it is so let's go

1068
00:40:55,480 --> 00:40:59,260
ahead and show that just first as a

1069
00:40:57,909 --> 00:41:00,670
totally separate thing right because I

1070
00:40:59,260 --> 00:41:02,750
can I can actually do that separately

1071
00:41:00,670 --> 00:41:04,369
from even talking about the other stuff

1072
00:41:02,750 --> 00:41:06,079
so if I wanted to make it so this begin

1073
00:41:04,369 --> 00:41:08,030
time to block end time block when it's

1074
00:41:06,079 --> 00:41:10,489
around something so convenient like that

1075
00:41:08,030 --> 00:41:14,210
if I want to just get rid of one of

1076
00:41:10,489 --> 00:41:16,969
those calls and make that right how do I

1077
00:41:14,210 --> 00:41:19,460
do that well we know that if I was to

1078
00:41:16,969 --> 00:41:24,379
make a constructor or a destructor for a

1079
00:41:19,460 --> 00:41:25,670
siik struct right so I come in here and

1080
00:41:24,380 --> 00:41:27,410
actually I guess I don't know well you

1081
00:41:25,670 --> 00:41:29,570
know I kind of want these to be exposed

1082
00:41:27,409 --> 00:41:32,149
to the platform layer so well you know

1083
00:41:29,570 --> 00:41:34,730
if I do that yeah I probably don't want

1084
00:41:32,150 --> 00:41:37,340
to do that because if I did that I would

1085
00:41:34,730 --> 00:41:38,809
I would sort of incur this problem where

1086
00:41:37,340 --> 00:41:40,369
the people who were trying to link with

1087
00:41:38,809 --> 00:41:41,929
this from C can't quite get at stuff so

1088
00:41:40,369 --> 00:41:43,640
I'm gonna keep it separate we're gonna

1089
00:41:41,929 --> 00:41:45,769
make a separate file for this year I'll

1090
00:41:43,639 --> 00:41:47,239
just call it a handmade debug H or

1091
00:41:45,769 --> 00:41:49,190
something like that and we'll sort of

1092
00:41:47,239 --> 00:41:50,659
put it separate so I don't ruin anyone's

1093
00:41:49,190 --> 00:41:52,309
day who's trying to compile on other

1094
00:41:50,659 --> 00:41:53,750
platforms all right

1095
00:41:52,309 --> 00:41:55,070
so if I came in here and say all right

1096
00:41:53,750 --> 00:41:58,010
there's gonna be a thing called time

1097
00:41:55,070 --> 00:41:58,820
block an inside time block is gonna be

1098
00:41:58,010 --> 00:42:00,500
you know we're gonna leave it

1099
00:41:58,820 --> 00:42:03,830
essentially the same as it was for now

1100
00:42:00,500 --> 00:42:05,239
it's gonna be these things yeah you know

1101
00:42:03,829 --> 00:42:07,400
what someone else someone was asking

1102
00:42:05,239 --> 00:42:09,919
this as well not to put too many things

1103
00:42:07,400 --> 00:42:12,079
on here but there was something that we

1104
00:42:09,920 --> 00:42:15,800
were doing where we also were checking

1105
00:42:12,079 --> 00:42:20,659
for the compiler being compiler MSV c or

1106
00:42:15,800 --> 00:42:22,730
ms it was this right someone was saying

1107
00:42:20,659 --> 00:42:24,309
that they really wanted the debug cycle

1108
00:42:22,730 --> 00:42:26,500
counters to work on Linux and you could

1109
00:42:24,309 --> 00:42:29,900
they were saying you could just do this

1110
00:42:26,500 --> 00:42:32,780
where you you you actually can call our

1111
00:42:29,900 --> 00:42:34,369
DTSC now from LLVM for awhile you well

1112
00:42:32,780 --> 00:42:36,109
actually it might have been our DTS CP

1113
00:42:34,369 --> 00:42:37,730
that you couldn't have called so I don't

1114
00:42:36,108 --> 00:42:39,588
know but either way some have been

1115
00:42:37,730 --> 00:42:40,639
asking for this on the forums so maybe

1116
00:42:39,588 --> 00:42:42,920
we'll just go ahead and stick that in

1117
00:42:40,639 --> 00:42:45,230
there for them and we'll yeah we'll

1118
00:42:42,920 --> 00:42:46,730
we'll stick that in there and I hope

1119
00:42:45,230 --> 00:42:49,099
that that does the trick for them I

1120
00:42:46,730 --> 00:42:51,469
don't know if it will or if it won't but

1121
00:42:49,099 --> 00:42:52,730
there you go so there you go anyway

1122
00:42:51,469 --> 00:42:54,199
that's separate issue sorry about that

1123
00:42:52,730 --> 00:42:56,539
just that's a little aside for the

1124
00:42:54,199 --> 00:42:59,449
people who are compiling on LLVM systems

1125
00:42:56,539 --> 00:43:02,449
so they can get their art a 2ct are DTSC

1126
00:42:59,449 --> 00:43:05,029
so if we take a look at what used to

1127
00:43:02,449 --> 00:43:07,219
happen in that function right what used

1128
00:43:05,030 --> 00:43:09,140
to happen in that function is it would

1129
00:43:07,219 --> 00:43:10,909
call begin time block with the ID first

1130
00:43:09,139 --> 00:43:12,799
and then it would call end time block

1131
00:43:10,909 --> 00:43:14,629
with the exact same ID at the end of the

1132
00:43:12,800 --> 00:43:17,530
function right so we had a function that

1133
00:43:14,630 --> 00:43:21,440
essentially was doing this

1134
00:43:17,530 --> 00:43:28,730
right and we want to replace that with

1135
00:43:21,440 --> 00:43:30,500
something that just has this yeah so in

1136
00:43:28,730 --> 00:43:31,550
order to do that we need something

1137
00:43:30,500 --> 00:43:32,869
that's going to be called at the

1138
00:43:31,550 --> 00:43:34,070
beginning of the block and something

1139
00:43:32,869 --> 00:43:35,630
that's gonna be called at the end of the

1140
00:43:34,070 --> 00:43:37,760
block right that's the two parts that we

1141
00:43:35,630 --> 00:43:40,400
needed and so what we can do is we can

1142
00:43:37,760 --> 00:43:44,810
sort of lean on it sort of make a fairly

1143
00:43:40,400 --> 00:43:46,430
unusual use I suppose of C's C++

1144
00:43:44,809 --> 00:43:48,079
constructor destructor pairing to say

1145
00:43:46,429 --> 00:43:50,569
all right suppose I had a thing called a

1146
00:43:48,079 --> 00:43:52,340
time block right and then that time

1147
00:43:50,570 --> 00:43:53,900
block had a constructor and a destructor

1148
00:43:52,340 --> 00:43:55,010
this is the first time we've seen

1149
00:43:53,900 --> 00:43:56,240
anything like this on handmade Hiro

1150
00:43:55,010 --> 00:44:02,240
suggests in case you're uncomfortable

1151
00:43:56,239 --> 00:44:03,889
with those C++ tried to formalize the

1152
00:44:02,239 --> 00:44:07,219
concept of initialization and shutdown

1153
00:44:03,889 --> 00:44:09,230
of pieces of data which is kind of a

1154
00:44:07,219 --> 00:44:12,019
ridiculous idea because data doesn't

1155
00:44:09,230 --> 00:44:14,510
have that concept inherently it's not

1156
00:44:12,019 --> 00:44:17,269
something that actually exists but you

1157
00:44:14,510 --> 00:44:18,410
know they were not the brightest bulbs

1158
00:44:17,269 --> 00:44:20,480
on the tree so they decided that that

1159
00:44:18,409 --> 00:44:22,339
might be a good idea so what they did is

1160
00:44:20,480 --> 00:44:25,219
they said that well whenever you create

1161
00:44:22,340 --> 00:44:27,019
one of these time blocks let's give the

1162
00:44:25,219 --> 00:44:31,549
programmer a way to write a function

1163
00:44:27,019 --> 00:44:33,110
like so that is called to initialize the

1164
00:44:31,550 --> 00:44:35,660
object and then similarly when the

1165
00:44:33,110 --> 00:44:38,180
object is going to go away for whatever

1166
00:44:35,659 --> 00:44:40,399
that means we will have a function that

1167
00:44:38,179 --> 00:44:41,690
you can call on the object that will be

1168
00:44:40,400 --> 00:44:43,280
automatically called on the object that

1169
00:44:41,690 --> 00:44:45,829
can allow it to do any kind of shutdown

1170
00:44:43,280 --> 00:44:47,300
work that it needs to do right and so

1171
00:44:45,829 --> 00:44:50,840
the way they introduced this was by

1172
00:44:47,300 --> 00:44:54,950
saying all right if you define functions

1173
00:44:50,840 --> 00:44:56,240
inside a structure and those are of

1174
00:44:54,949 --> 00:44:57,409
course called member functions which is

1175
00:44:56,239 --> 00:44:58,969
not something we're probably ever gonna

1176
00:44:57,409 --> 00:45:00,289
really use much of on handmade Hiro but

1177
00:44:58,969 --> 00:45:01,459
you know just you know those remember

1178
00:45:00,289 --> 00:45:03,380
functions are called members cuz they're

1179
00:45:01,460 --> 00:45:05,329
a member of the data they're part of the

1180
00:45:03,380 --> 00:45:07,309
data as well just like you have data

1181
00:45:05,329 --> 00:45:09,199
members right that's a data member of

1182
00:45:07,309 --> 00:45:10,909
the struct this is a function member of

1183
00:45:09,199 --> 00:45:12,230
the struct and for those of you who are

1184
00:45:10,909 --> 00:45:13,489
wondering they don't take up any space

1185
00:45:12,230 --> 00:45:15,469
they don't actually exist in the

1186
00:45:13,489 --> 00:45:17,809
structure it's just a strictly naming

1187
00:45:15,469 --> 00:45:19,819
convention sort of thing but when you

1188
00:45:17,809 --> 00:45:21,440
start to get into weird C++ things like

1189
00:45:19,820 --> 00:45:23,720
virtual functions that are not

1190
00:45:21,440 --> 00:45:25,280
particularly useful they there's a

1191
00:45:23,719 --> 00:45:27,589
little bit more of a reason why they

1192
00:45:25,280 --> 00:45:28,670
kind of are more in because there's

1193
00:45:27,590 --> 00:45:29,480
thing called a virtual table and all

1194
00:45:28,670 --> 00:45:32,539
these other things so we don't

1195
00:45:29,480 --> 00:45:34,340
to get into but point being when you

1196
00:45:32,539 --> 00:45:36,349
just have a basic struct no virtual

1197
00:45:34,340 --> 00:45:39,460
functions you introduce some member

1198
00:45:36,349 --> 00:45:43,460
functions like time to block here right

1199
00:45:39,460 --> 00:45:46,070
those are essentially called with the

1200
00:45:43,460 --> 00:45:47,840
knowledge of which object they were

1201
00:45:46,070 --> 00:45:49,970
called on right which which sort of

1202
00:45:47,840 --> 00:45:51,650
piece of data they were called on so

1203
00:45:49,969 --> 00:45:54,108
normally right if I have something

1204
00:45:51,650 --> 00:45:56,690
outside here I have a function and I

1205
00:45:54,108 --> 00:45:59,329
want this to operate on you know one of

1206
00:45:56,690 --> 00:46:01,429
these x blocks right and I will name to

1207
00:45:59,329 --> 00:46:04,190
something else like foo I have to pass

1208
00:46:01,429 --> 00:46:07,368
in the time block right I'll call it

1209
00:46:04,190 --> 00:46:09,050
this for fun like so I have to pass in

1210
00:46:07,369 --> 00:46:11,119
the time block that I'm going to use and

1211
00:46:09,050 --> 00:46:14,000
so if I wanted to for example set this a

1212
00:46:11,119 --> 00:46:14,450
member here I would have to do it like

1213
00:46:14,000 --> 00:46:15,710
that

1214
00:46:14,449 --> 00:46:18,199
right I pass in the block we're gonna

1215
00:46:15,710 --> 00:46:21,349
we're gonna do into this foo function it

1216
00:46:18,199 --> 00:46:23,358
sets it to five now on the other hand if

1217
00:46:21,349 --> 00:46:25,630
you were to use and I'll go ahead and

1218
00:46:23,358 --> 00:46:28,190
finish that off if you were to use a

1219
00:46:25,630 --> 00:46:31,480
member function right if I was to

1220
00:46:28,190 --> 00:46:33,858
declare this inside the struct like so

1221
00:46:31,480 --> 00:46:35,539
and by the way there are two syntaxes

1222
00:46:33,858 --> 00:46:37,639
for doing this you can actually still

1223
00:46:35,539 --> 00:46:44,329
declare it outside if you want to it

1224
00:46:37,639 --> 00:46:46,099
looks like this right it's kind of just

1225
00:46:44,329 --> 00:46:47,659
again this is C++ stuff that you really

1226
00:46:46,099 --> 00:46:48,889
just don't have to know but I'm just

1227
00:46:47,659 --> 00:46:49,909
kind of mentioning it for those of you

1228
00:46:48,889 --> 00:46:52,099
who are interested to want to read about

1229
00:46:49,909 --> 00:46:53,809
it separately or something like that if

1230
00:46:52,099 --> 00:46:55,909
you declare it but it's free to also put

1231
00:46:53,809 --> 00:47:00,650
them in here if you declare it inside

1232
00:46:55,909 --> 00:47:04,279
like so then what you can see is that in

1233
00:47:00,650 --> 00:47:05,660
C you don't ever actually need to pass

1234
00:47:04,280 --> 00:47:07,609
in the thing that its operating on

1235
00:47:05,659 --> 00:47:08,839
because it's implicitly going to pass

1236
00:47:07,608 --> 00:47:10,849
you a thing called at this pointer

1237
00:47:08,840 --> 00:47:13,400
that's why I picked this name to be to

1238
00:47:10,849 --> 00:47:15,618
be cute it's gonna pass you a pointer

1239
00:47:13,400 --> 00:47:17,389
called this and that pointer points to

1240
00:47:15,619 --> 00:47:21,050
whichever one of these you were going to

1241
00:47:17,389 --> 00:47:23,719
be operating on and whenever you call

1242
00:47:21,050 --> 00:47:25,760
this function you actually use a special

1243
00:47:23,719 --> 00:47:29,209
syntax in C so if I actually had one of

1244
00:47:25,760 --> 00:47:32,480
these time blocks right like so I don't

1245
00:47:29,210 --> 00:47:38,179
call the function like this anymore I

1246
00:47:32,480 --> 00:47:40,369
call it like this and this whatever this

1247
00:47:38,179 --> 00:47:42,739
object was whatever this sort of data

1248
00:47:40,369 --> 00:47:45,910
piece of data the struct

1249
00:47:42,739 --> 00:47:48,338
gets past as the this pointer into this

1250
00:47:45,909 --> 00:47:49,519
dysfunction right that's just C++

1251
00:47:48,338 --> 00:47:51,588
ridiculousness

1252
00:47:49,519 --> 00:47:54,409
it literally doesn't do anything it's

1253
00:47:51,588 --> 00:47:56,750
literally just a rewrite of the thing to

1254
00:47:54,409 --> 00:47:59,719
look like this right that is absolutely

1255
00:47:56,750 --> 00:48:02,239
the beginning and end of it right but

1256
00:47:59,719 --> 00:48:03,409
it's just a syntactic shorthand because

1257
00:48:02,239 --> 00:48:05,209
they were trying to introduce

1258
00:48:03,409 --> 00:48:07,069
object-oriented programming concepts

1259
00:48:05,210 --> 00:48:09,108
into C it's just a shorthand and

1260
00:48:07,070 --> 00:48:11,900
furthermore it's shortened even further

1261
00:48:09,108 --> 00:48:15,289
by saying that the this pointer is

1262
00:48:11,900 --> 00:48:17,930
always implicit if you use a name that

1263
00:48:15,289 --> 00:48:19,789
would have been in that object so for

1264
00:48:17,929 --> 00:48:22,460
example here this this thing has an A

1265
00:48:19,789 --> 00:48:25,369
and you can kind of see that I'm I'm

1266
00:48:22,460 --> 00:48:27,289
referencing that a here it knows to just

1267
00:48:25,369 --> 00:48:29,329
put that ahead of the A's right so if a

1268
00:48:27,289 --> 00:48:31,099
is not something that it knows about it

1269
00:48:29,329 --> 00:48:33,409
kind of knows oh wait he probably just

1270
00:48:31,099 --> 00:48:36,140
meant the a that that was in this this

1271
00:48:33,409 --> 00:48:37,399
struct right ok so again I'm not gonna

1272
00:48:36,139 --> 00:48:39,049
cover that stuff in much detail because

1273
00:48:37,400 --> 00:48:40,880
we really don't care that's a bunch of

1274
00:48:39,050 --> 00:48:42,800
C++ stuff and none of which we're really

1275
00:48:40,880 --> 00:48:45,050
going to use except for in these very

1276
00:48:42,800 --> 00:48:46,730
specific circumstances where I want to

1277
00:48:45,050 --> 00:48:47,900
abuse some language feature to do

1278
00:48:46,730 --> 00:48:49,338
something that's kind of not all that

1279
00:48:47,900 --> 00:48:52,430
related to probably what it was intended

1280
00:48:49,338 --> 00:48:53,570
to be used for in the first place but so

1281
00:48:52,429 --> 00:48:57,379
if we take a look at this time block

1282
00:48:53,570 --> 00:48:59,359
situation again they introduced two

1283
00:48:57,380 --> 00:49:01,070
special member functions one that is

1284
00:48:59,358 --> 00:49:03,230
called every time one of these things

1285
00:49:01,070 --> 00:49:04,519
comes into existence and one of that is

1286
00:49:03,230 --> 00:49:06,500
called every time it goes out of

1287
00:49:04,519 --> 00:49:09,139
existence and what that means is that if

1288
00:49:06,500 --> 00:49:13,219
I was in a function and I made one of

1289
00:49:09,139 --> 00:49:15,139
these right well right here on this line

1290
00:49:13,219 --> 00:49:17,509
it will call what's called the

1291
00:49:15,139 --> 00:49:20,118
constructor which is if there was a

1292
00:49:17,510 --> 00:49:24,230
member function named the same thing as

1293
00:49:20,119 --> 00:49:26,119
the struct that will get called right

1294
00:49:24,230 --> 00:49:27,889
first before anything else happens right

1295
00:49:26,119 --> 00:49:29,690
on the Declaration when it gets declared

1296
00:49:27,889 --> 00:49:33,170
before anything else happens that will

1297
00:49:29,690 --> 00:49:34,429
get called then at the end of the scope

1298
00:49:33,170 --> 00:49:37,190
right because remember if this was like

1299
00:49:34,429 --> 00:49:39,139
int a equals 5 when we enter this scope

1300
00:49:37,190 --> 00:49:40,970
a becomes equal to 5 when we leave the

1301
00:49:39,139 --> 00:49:42,799
scope a is is technically undefined that

1302
00:49:40,969 --> 00:49:44,719
way goes away right as far as we know

1303
00:49:42,800 --> 00:49:47,390
programming wise right as far as the C

1304
00:49:44,719 --> 00:49:49,549
is concerned the same is true of our

1305
00:49:47,389 --> 00:49:51,588
time block right it has some memory on

1306
00:49:49,550 --> 00:49:53,690
the stack when it's declared here when

1307
00:49:51,588 --> 00:49:55,279
this scope exits that memory on the

1308
00:49:53,690 --> 00:49:56,300
stack as far as we know is gone we don't

1309
00:49:55,280 --> 00:49:57,530
get to count on that any

1310
00:49:56,300 --> 00:49:58,820
or it's it's gonna get reused for

1311
00:49:57,530 --> 00:50:00,170
something else who knows what happens to

1312
00:49:58,820 --> 00:50:01,910
it right but point being we can't just

1313
00:50:00,170 --> 00:50:05,210
write to it as if we have the time clock

1314
00:50:01,909 --> 00:50:09,500
anymore at that point when the stack

1315
00:50:05,210 --> 00:50:11,480
space for a is reclaimed the destructor

1316
00:50:09,500 --> 00:50:13,429
which is the same name whatever the

1317
00:50:11,480 --> 00:50:14,990
member whatever the struct is named a

1318
00:50:13,429 --> 00:50:17,389
member function with the same name but

1319
00:50:14,989 --> 00:50:21,469
with a tilde in front of it as you see

1320
00:50:17,389 --> 00:50:23,900
here that will be called so what we can

1321
00:50:21,469 --> 00:50:25,909
do to get this sort of begin time block

1322
00:50:23,900 --> 00:50:27,740
end time block what we can do to get

1323
00:50:25,909 --> 00:50:31,429
that to happen is we can insert one of

1324
00:50:27,739 --> 00:50:33,769
these times lock structs and we can have

1325
00:50:31,429 --> 00:50:35,419
because once we insert that we can have

1326
00:50:33,769 --> 00:50:37,369
a constructor and a destructor which

1327
00:50:35,420 --> 00:50:39,050
will get called at the top of the block

1328
00:50:37,369 --> 00:50:40,880
or wherever you first put it right and

1329
00:50:39,050 --> 00:50:44,210
then when it goes out of scope which is

1330
00:50:40,880 --> 00:50:46,280
exactly what we wanted right so if we

1331
00:50:44,210 --> 00:50:48,050
create this struct time block all it

1332
00:50:46,280 --> 00:50:49,580
would need to do is remember whatever

1333
00:50:48,050 --> 00:50:51,470
that ID was because remember we've got

1334
00:50:49,579 --> 00:50:53,690
begin time block the two things it needs

1335
00:50:51,469 --> 00:50:58,730
to call our begin time block and end

1336
00:50:53,690 --> 00:51:00,679
time block right and so all we need to

1337
00:50:58,730 --> 00:51:02,570
do is actually figure out whatever that

1338
00:51:00,679 --> 00:51:05,059
ID is going to be and of course we know

1339
00:51:02,570 --> 00:51:06,890
that the ID is just gonna be some kind

1340
00:51:05,059 --> 00:51:09,199
of an integer right I mean I don't even

1341
00:51:06,889 --> 00:51:11,569
know what we actually declared the the

1342
00:51:09,199 --> 00:51:14,799
thing to be when we did this it doesn't

1343
00:51:11,570 --> 00:51:18,220
look like we even gave it an actual enum

1344
00:51:14,800 --> 00:51:21,019
value I feel like it was just kind of

1345
00:51:18,219 --> 00:51:23,089
arbitrary so I guess we don't even know

1346
00:51:21,019 --> 00:51:25,039
but we can just say that we have an ID

1347
00:51:23,090 --> 00:51:27,170
here for the time block we pass it in

1348
00:51:25,039 --> 00:51:32,570
and so you can see right away that we

1349
00:51:27,170 --> 00:51:33,800
have a bit of a problem right I think we

1350
00:51:32,570 --> 00:51:34,850
started with five minutes left so I'll

1351
00:51:33,800 --> 00:51:36,860
just finished up what I'm talking about

1352
00:51:34,849 --> 00:51:38,659
and then we'll go to the Q&amp;A we have a

1353
00:51:36,860 --> 00:51:41,360
bit of a problem right and in fact what

1354
00:51:38,659 --> 00:51:43,609
I'll do here is I'll go ahead and finish

1355
00:51:41,360 --> 00:51:44,870
this up we'll go we'll make that time

1356
00:51:43,610 --> 00:51:47,870
block thing here we'll kind of get rid

1357
00:51:44,869 --> 00:51:49,369
of that I'll jump into a may render

1358
00:51:47,869 --> 00:51:51,139
group and I'll just fur it for the time

1359
00:51:49,369 --> 00:51:52,909
being we'll kind of test it like this

1360
00:51:51,139 --> 00:51:54,619
and we'll say okay time block here is

1361
00:51:52,909 --> 00:51:56,210
our block will pass the render group to

1362
00:51:54,619 --> 00:51:58,039
output that's what we want right

1363
00:51:56,210 --> 00:51:59,990
everything should be kosher it's all

1364
00:51:58,039 --> 00:52:00,769
good but you can see that we've got a

1365
00:51:59,989 --> 00:52:03,079
problem

1366
00:52:00,769 --> 00:52:05,739
oh well and of course I actually have to

1367
00:52:03,079 --> 00:52:08,090
also include our debug services

1368
00:52:05,739 --> 00:52:09,219
obviously would be a good idea all right

1369
00:52:08,090 --> 00:52:12,250
so let's go ahead and put

1370
00:52:09,219 --> 00:52:13,838
in there and made debug that H of course

1371
00:52:12,250 --> 00:52:17,019
I don't know if that's gonna be the most

1372
00:52:13,838 --> 00:52:18,969
efficient place to put that we're gonna

1373
00:52:17,019 --> 00:52:21,159
run into some to some nastiness there

1374
00:52:18,969 --> 00:52:23,078
and there's gonna be some some stuff I

1375
00:52:21,159 --> 00:52:24,549
wonder if I can do this I think this

1376
00:52:23,079 --> 00:52:27,250
might be the best way to do it but that

1377
00:52:24,550 --> 00:52:34,750
we'll get to that little bit later all

1378
00:52:27,250 --> 00:52:35,920
right so moving along oh right and one

1379
00:52:34,750 --> 00:52:37,539
other thing that we're gonna have to do

1380
00:52:35,920 --> 00:52:39,190
there is we can't really use these

1381
00:52:37,539 --> 00:52:41,769
things directly because they were made

1382
00:52:39,190 --> 00:52:43,420
to sort of graft on some sort of a piece

1383
00:52:41,769 --> 00:52:46,150
here right to the debug recycle counter

1384
00:52:43,420 --> 00:52:48,639
ID stuff so we would actually need some

1385
00:52:46,150 --> 00:52:52,269
way of sort of replicating this without

1386
00:52:48,639 --> 00:52:53,940
that and that's a little bit janky I'm

1387
00:52:52,269 --> 00:52:56,619
gonna go ahead and do it this way

1388
00:52:53,940 --> 00:52:59,318
something where I just kind of you know

1389
00:52:56,619 --> 00:53:01,510
do this sort of a thing you know I'm

1390
00:52:59,318 --> 00:53:05,079
saying something that calls a little bit

1391
00:53:01,510 --> 00:53:08,800
of it a more internal one so let's see

1392
00:53:05,079 --> 00:53:12,220
start cycle count star star i/o that

1393
00:53:08,800 --> 00:53:14,289
actually is totally fine yeah that's

1394
00:53:12,219 --> 00:53:17,318
totally fine it's it's the it's this one

1395
00:53:14,289 --> 00:53:19,509
right here that was the problem right so

1396
00:53:17,318 --> 00:53:20,679
what I need to do is duplicate that I'm

1397
00:53:19,510 --> 00:53:26,740
gonna make an internal one that just

1398
00:53:20,679 --> 00:53:28,659
uses the ID as is like so yeah so that

1399
00:53:26,739 --> 00:53:31,209
way we just have it use it directly and

1400
00:53:28,659 --> 00:53:32,649
then begin time block is I say the real

1401
00:53:31,210 --> 00:53:33,309
that that end time block is just gonna

1402
00:53:32,650 --> 00:53:40,720
call this one

1403
00:53:33,309 --> 00:53:43,900
with that graft it on like so okay so I

1404
00:53:40,719 --> 00:53:45,459
think that should all be good I'm not

1405
00:53:43,900 --> 00:53:47,710
entirely certain but I think that should

1406
00:53:45,460 --> 00:53:50,050
all be good but then we kind of have

1407
00:53:47,710 --> 00:53:51,400
this situation where we have to start we

1408
00:53:50,050 --> 00:53:53,980
have to start dealing with with this a

1409
00:53:51,400 --> 00:53:54,970
little bit more intelligently alright so

1410
00:53:53,980 --> 00:53:55,990
like I said I'm gonna go for a couple

1411
00:53:54,969 --> 00:53:58,959
more minutes just so I can kind of get

1412
00:53:55,989 --> 00:54:01,269
that get this finished up so if you look

1413
00:53:58,960 --> 00:54:03,909
at what these guys do again now I can

1414
00:54:01,269 --> 00:54:07,000
sort of call the correct one here like

1415
00:54:03,909 --> 00:54:08,739
this and everything is fine for the

1416
00:54:07,000 --> 00:54:09,969
beginning time block you can see that

1417
00:54:08,739 --> 00:54:12,429
everything just works out great

1418
00:54:09,969 --> 00:54:14,739
for the end time block we have a much

1419
00:54:12,429 --> 00:54:17,588
more significant problem right this ID

1420
00:54:14,739 --> 00:54:19,659
is passed into the timed walk here we

1421
00:54:17,588 --> 00:54:21,039
don't actually know what it is by the

1422
00:54:19,659 --> 00:54:22,519
time we get to the destructor because

1423
00:54:21,039 --> 00:54:24,320
these two things are not

1424
00:54:22,519 --> 00:54:26,539
actually in operating in the same stack

1425
00:54:24,320 --> 00:54:29,750
space at all right so what we need to do

1426
00:54:26,539 --> 00:54:31,039
is again introduce a member variable to

1427
00:54:29,750 --> 00:54:33,289
the time clock right something that's

1428
00:54:31,039 --> 00:54:36,500
actually stored so that when we actually

1429
00:54:33,289 --> 00:54:39,320
have this happen on the stack it can get

1430
00:54:36,500 --> 00:54:41,719
passed and you know I always bag on C++

1431
00:54:39,320 --> 00:54:43,880
and I always say how awful it is and you

1432
00:54:41,719 --> 00:54:46,339
know just because I want to continue

1433
00:54:43,880 --> 00:54:48,829
that trend you can even see here just

1434
00:54:46,340 --> 00:54:51,410
how lousy this feature actually is

1435
00:54:48,829 --> 00:54:53,630
because there actually is no reason why

1436
00:54:51,409 --> 00:54:56,449
you would ever want to store the ID all

1437
00:54:53,630 --> 00:55:00,140
I'm trying to do is make a paired set of

1438
00:54:56,449 --> 00:55:02,059
calls that pass the same ID in one place

1439
00:55:00,139 --> 00:55:04,250
and another right but of course they

1440
00:55:02,059 --> 00:55:06,590
never add features generically to C++

1441
00:55:04,250 --> 00:55:09,230
they always add these features in this

1442
00:55:06,590 --> 00:55:12,559
way that they conceived of them so even

1443
00:55:09,230 --> 00:55:15,170
though C++ has the ability to add things

1444
00:55:12,559 --> 00:55:16,460
at in a block which then can correlate

1445
00:55:15,170 --> 00:55:17,030
to something that happened at the end of

1446
00:55:16,460 --> 00:55:18,619
the block

1447
00:55:17,030 --> 00:55:20,420
they of course added it in the most

1448
00:55:18,619 --> 00:55:21,859
useless way which was bound into this

1449
00:55:20,420 --> 00:55:23,720
constructor destructor concept which is

1450
00:55:21,860 --> 00:55:26,210
not at all what you want and bla bla bla

1451
00:55:23,719 --> 00:55:27,289
bla bla right so instead of again the

1452
00:55:26,210 --> 00:55:30,320
smart thing to do would have been to

1453
00:55:27,289 --> 00:55:32,239
make that feature the ability to add

1454
00:55:30,320 --> 00:55:34,910
things at beginning you know that

1455
00:55:32,239 --> 00:55:38,629
correlate across two parts of the scope

1456
00:55:34,909 --> 00:55:41,089
timing and then building right there

1457
00:55:38,630 --> 00:55:43,610
constructor destructor stuff on top of

1458
00:55:41,090 --> 00:55:45,500
that they of course just added this

1459
00:55:43,610 --> 00:55:46,970
janky thing that doesn't really ever

1460
00:55:45,500 --> 00:55:49,309
work right for the things you want it to

1461
00:55:46,969 --> 00:55:50,869
do and no matter which way you want it

1462
00:55:49,309 --> 00:55:52,610
to actually use it it's always gonna be

1463
00:55:50,869 --> 00:55:53,869
slightly wrong right and that's the

1464
00:55:52,610 --> 00:55:55,940
thing that's so infuriating about C++

1465
00:55:53,869 --> 00:55:58,279
but we work with what we have

1466
00:55:55,940 --> 00:55:59,750
yeah you know you go to the compiler

1467
00:55:58,280 --> 00:56:01,340
with the language you have not the

1468
00:55:59,750 --> 00:56:05,150
language you'd like to have right that's

1469
00:56:01,340 --> 00:56:07,370
famous Donald Rumsfeld quote anyway so

1470
00:56:05,150 --> 00:56:08,780
inside this time block thing we want to

1471
00:56:07,369 --> 00:56:11,000
be able to store this ID so we can pass

1472
00:56:08,780 --> 00:56:13,250
it later right so this is actually going

1473
00:56:11,000 --> 00:56:15,829
to be like ID in it and in here we will

1474
00:56:13,250 --> 00:56:18,260
actually store that so that we can now

1475
00:56:15,829 --> 00:56:20,210
pass it all the time right both both

1476
00:56:18,260 --> 00:56:22,610
blocks so that takes care of one problem

1477
00:56:20,210 --> 00:56:25,630
that we have but we actually have more

1478
00:56:22,610 --> 00:56:25,630
problems than just that

1479
00:56:28,699 --> 00:56:34,469
all right so what are the problems that

1480
00:56:31,500 --> 00:56:37,440
we have well problem number one is begin

1481
00:56:34,469 --> 00:56:38,849
time clock and end time block right if

1482
00:56:37,440 --> 00:56:41,039
we take a look at what those actually do

1483
00:56:38,849 --> 00:56:42,480
here and actually I'm kind of surprised

1484
00:56:41,039 --> 00:56:46,829
I must be missing something as I'm how

1485
00:56:42,480 --> 00:56:50,119
surprised that we didn't have another

1486
00:56:46,829 --> 00:56:54,449
error to start cycle count I think

1487
00:56:50,119 --> 00:56:57,569
should have been on there oh it's

1488
00:56:54,449 --> 00:56:59,960
because n times block counted is

1489
00:56:57,570 --> 00:57:02,960
actually the one that we really wanted

1490
00:56:59,960 --> 00:57:02,960
yeah

1491
00:57:04,039 --> 00:57:08,699
- I D that's that's the problem right

1492
00:57:06,750 --> 00:57:12,179
there right it's actually start cycle

1493
00:57:08,699 --> 00:57:14,099
count so okay good yeah I just kind of

1494
00:57:12,179 --> 00:57:15,750
ruined the variable so this thing here

1495
00:57:14,099 --> 00:57:17,849
we actually want to be the start cycle

1496
00:57:15,750 --> 00:57:20,760
count right we actually want this thing

1497
00:57:17,849 --> 00:57:22,589
to be subtracted right here but again we

1498
00:57:20,760 --> 00:57:25,080
had the exact same problem the starting

1499
00:57:22,590 --> 00:57:26,700
cycle count we don't actually have right

1500
00:57:25,079 --> 00:57:28,199
because the starting cycle count would

1501
00:57:26,699 --> 00:57:29,669
be declared on the stack in here and

1502
00:57:28,199 --> 00:57:31,169
this is where we actually want

1503
00:57:29,670 --> 00:57:34,380
subtracted so the starting cycle count

1504
00:57:31,170 --> 00:57:36,030
also has to go in here right and so if

1505
00:57:34,380 --> 00:57:39,420
we look at what has to happen with begin

1506
00:57:36,030 --> 00:57:41,700
timed block we need to pass in again

1507
00:57:39,420 --> 00:57:43,139
that start cycle count here so that

1508
00:57:41,699 --> 00:57:46,500
whatever it actually was going to be it

1509
00:57:43,139 --> 00:57:47,789
would snap it with the our DTSC right so

1510
00:57:46,500 --> 00:57:48,630
whatever that's gonna be that just

1511
00:57:47,789 --> 00:57:52,009
happens right here

1512
00:57:48,630 --> 00:57:54,090
and so in end time block well I guess

1513
00:57:52,010 --> 00:57:56,730
the other thing I can do is I could do

1514
00:57:54,090 --> 00:57:58,650
it a little bit a little bit sort of I

1515
00:57:56,730 --> 00:58:00,630
don't think I had to do this not such a

1516
00:57:58,650 --> 00:58:02,309
janky way will kind of be deleting most

1517
00:58:00,630 --> 00:58:04,260
of this in a second here but it's kind

1518
00:58:02,309 --> 00:58:06,119
of wanted to just get into a little bit

1519
00:58:04,260 --> 00:58:07,980
more of a fuzzy state so this would be

1520
00:58:06,119 --> 00:58:10,650
start cycle count we just passed that in

1521
00:58:07,980 --> 00:58:13,800
right and we'd subtract it here from the

1522
00:58:10,650 --> 00:58:16,860
RDP SC which is what we wanted yeah okay

1523
00:58:13,800 --> 00:58:18,480
so if we were gonna do that when we do

1524
00:58:16,860 --> 00:58:20,640
our end time block we have to pass the

1525
00:58:18,480 --> 00:58:22,679
start cycle count which means that you

1526
00:58:20,639 --> 00:58:24,210
know in here for the automated one like

1527
00:58:22,679 --> 00:58:27,079
we were using before it can actually

1528
00:58:24,210 --> 00:58:29,460
just do this and it will work right

1529
00:58:27,079 --> 00:58:30,960
whereas in our other case we're gonna

1530
00:58:29,460 --> 00:58:34,230
have to do this stuff this part right

1531
00:58:30,960 --> 00:58:36,210
here probably somewhat manually right so

1532
00:58:34,230 --> 00:58:38,250
what we could do is for example we could

1533
00:58:36,210 --> 00:58:39,519
do a begin time block in this case and

1534
00:58:38,250 --> 00:58:42,070
we could pass

1535
00:58:39,519 --> 00:58:46,599
nothing for the IP or we could just say

1536
00:58:42,070 --> 00:58:48,550
starts uh you know time to clock right

1537
00:58:46,599 --> 00:58:49,569
and then we know because we know what

1538
00:58:48,550 --> 00:58:51,370
this does

1539
00:58:49,570 --> 00:58:54,309
we know that in here we would just make

1540
00:58:51,369 --> 00:58:57,609
one of these right start cycle count

1541
00:58:54,309 --> 00:58:59,349
time block so now when it does begin

1542
00:58:57,610 --> 00:59:01,630
time block when it goes to snap that

1543
00:58:59,349 --> 00:59:02,920
cycle count right

1544
00:59:01,630 --> 00:59:04,420
it would know that it could put it in

1545
00:59:02,920 --> 00:59:06,880
here of course again we have that

1546
00:59:04,420 --> 00:59:07,599
problem I guess we need to do it like

1547
00:59:06,880 --> 00:59:09,579
this

1548
00:59:07,599 --> 00:59:11,949
where we don't want to declare a new one

1549
00:59:09,579 --> 00:59:13,509
on the stack right if we can avoid it so

1550
00:59:11,949 --> 00:59:16,359
we want something that's gonna look more

1551
00:59:13,510 --> 00:59:20,880
like that and this guy would just be

1552
00:59:16,360 --> 00:59:20,880
doing something you know more like this

1553
00:59:22,110 --> 00:59:26,620
hopefully this makes some sense this is

1554
00:59:24,610 --> 00:59:28,599
just kind of abusing these macros again

1555
00:59:26,619 --> 00:59:30,279
not particularly pretty but we're gonna

1556
00:59:28,599 --> 00:59:33,369
kind of we'll probably clean this up

1557
00:59:30,280 --> 00:59:35,260
considerably in a little bit okay so

1558
00:59:33,369 --> 00:59:39,250
anyway so we have our beginning time

1559
00:59:35,260 --> 00:59:40,750
clock but you would pass in to the begin

1560
00:59:39,250 --> 00:59:42,429
time block sort of secondary function

1561
00:59:40,750 --> 00:59:45,219
you'd pass in that start cycle cap right

1562
00:59:42,429 --> 00:59:47,919
like so and then we can just have it

1563
00:59:45,219 --> 00:59:50,379
work on on whatever we want so we'd have

1564
00:59:47,920 --> 00:59:52,659
this gonna have this actually now work

1565
00:59:50,380 --> 00:59:54,910
like that and it would be less it would

1566
00:59:52,659 --> 00:59:57,339
be less janky then when we do our end

1567
00:59:54,909 --> 01:00:00,849
block right we also have to pass it in

1568
00:59:57,340 --> 01:00:02,710
and time block so but now I think we've

1569
01:00:00,849 --> 01:00:03,219
got it paired properly which is which is

1570
01:00:02,710 --> 01:00:05,740
going to be better

1571
01:00:03,219 --> 01:00:07,619
oops I got to put on scare into this so

1572
01:00:05,739 --> 01:00:10,689
those are sort of calling into the more

1573
01:00:07,619 --> 01:00:15,279
you know sort of the more underlying one

1574
01:00:10,690 --> 01:00:17,740
looks like I've got yeah just got to do

1575
01:00:15,280 --> 01:00:22,780
one more thing before we call that you

1576
01:00:17,739 --> 01:00:25,629
have to do that okay so almost all done

1577
01:00:22,780 --> 01:00:27,940
but the last thing we need to do here is

1578
01:00:25,630 --> 01:00:28,809
when we call this rank when we're

1579
01:00:27,940 --> 01:00:31,329
creating this block

1580
01:00:28,809 --> 01:00:33,489
we're actually passing into this that ID

1581
01:00:31,329 --> 01:00:35,500
in it we have to actually pass in the

1582
01:00:33,489 --> 01:00:36,669
debug counter for now but I could also

1583
01:00:35,500 --> 01:00:43,199
you know what I could just do it like

1584
01:00:36,670 --> 01:00:47,269
this right and do debug cycle counter

1585
01:00:43,199 --> 01:00:47,269
and then whatever the ideas right

1586
01:00:48,048 --> 01:01:00,119
something like that all right

1587
01:00:54,809 --> 01:01:02,099
so that is pretty much it for you know

1588
01:01:00,119 --> 01:01:03,780
for fuzziness mostly that was just me

1589
01:01:02,099 --> 01:01:05,130
explaining stuff right you can see in

1590
01:01:03,780 --> 01:01:07,500
the end it's really really pretty basic

1591
01:01:05,130 --> 01:01:09,869
if we want to actually do this macro all

1592
01:01:07,500 --> 01:01:11,699
we have to do is just have a sort of

1593
01:01:09,869 --> 01:01:14,670
struct with the constructor destructor

1594
01:01:11,699 --> 01:01:15,750
pair that we can use to sort of ensure

1595
01:01:14,670 --> 01:01:17,400
that this will get called at the

1596
01:01:15,750 --> 01:01:19,318
beginning and end of the block then if

1597
01:01:17,400 --> 01:01:21,059
we do time block and we instantiate one

1598
01:01:19,318 --> 01:01:22,949
of those on the stack it will call the

1599
01:01:21,059 --> 01:01:24,690
constructor which will snap the initial

1600
01:01:22,949 --> 01:01:26,129
time just like we were doing before it's

1601
01:01:24,690 --> 01:01:28,048
essentially calling the game time block

1602
01:01:26,130 --> 01:01:30,059
but just because of how nasty macros are

1603
01:01:28,048 --> 01:01:32,280
we had to kind of do a bunch of fussing

1604
01:01:30,059 --> 01:01:34,200
to make it okay and then when we go out

1605
01:01:32,280 --> 01:01:35,579
of scope we can call n time block just

1606
01:01:34,199 --> 01:01:37,048
like we were doing before and it will do

1607
01:01:35,579 --> 01:01:40,798
the operation that it's supposed to do

1608
01:01:37,048 --> 01:01:43,170
right we use the storage of the struct

1609
01:01:40,798 --> 01:01:44,670
itself to remember the important

1610
01:01:43,170 --> 01:01:47,548
information that we need so that when we

1611
01:01:44,670 --> 01:01:49,559
call the destructor it you know it

1612
01:01:47,548 --> 01:01:52,019
passed the same information again that's

1613
01:01:49,559 --> 01:01:54,960
kind of a shortcoming of C++ that you

1614
01:01:52,019 --> 01:01:56,099
have just can say that you want that

1615
01:01:54,960 --> 01:01:57,568
story because you didn't really want it

1616
01:01:56,099 --> 01:01:59,970
stored you just wanted it passed in two

1617
01:01:57,568 --> 01:02:01,679
different places but hopefully most of

1618
01:01:59,969 --> 01:02:03,779
the time the compiler is plenty smart

1619
01:02:01,679 --> 01:02:04,828
enough to optimize that part of it out

1620
01:02:03,780 --> 01:02:06,089
because you can see that those things

1621
01:02:04,829 --> 01:02:07,289
are constant so we don't have to worry

1622
01:02:06,088 --> 01:02:09,269
about too much but that's you know

1623
01:02:07,289 --> 01:02:10,980
thanks to the compiler being smart the

1624
01:02:09,269 --> 01:02:13,019
optimizer being smart not yeah thanks to

1625
01:02:10,980 --> 01:02:16,889
C++ actually us Express what we wanted

1626
01:02:13,019 --> 01:02:18,358
to Express okay so that's about it again

1627
01:02:16,889 --> 01:02:20,429
we're out of time because most of today

1628
01:02:18,358 --> 01:02:24,779
was me just explaining stuff but we are

1629
01:02:20,429 --> 01:02:26,489
now in theory also actually working so

1630
01:02:24,780 --> 01:02:28,650
our you know you can see our debug

1631
01:02:26,489 --> 01:02:29,729
counters are still on there and I think

1632
01:02:28,650 --> 01:02:31,048
they probably are working properly

1633
01:02:29,730 --> 01:02:32,309
although I'm not gonna even bother

1634
01:02:31,048 --> 01:02:33,690
checking because it doesn't matter since

1635
01:02:32,309 --> 01:02:35,730
tomorrow we're gonna start doing some

1636
01:02:33,690 --> 01:02:37,950
much more interesting stuff with those

1637
01:02:35,730 --> 01:02:41,699
debug counters all right so I will go

1638
01:02:37,949 --> 01:02:45,808
ahead and go to the queue and the a so

1639
01:02:41,699 --> 01:02:46,949
we can sort of get that started if you

1640
01:02:45,809 --> 01:02:49,019
have any questions about what we've done

1641
01:02:46,949 --> 01:02:51,719
for these streams please go ahead and

1642
01:02:49,019 --> 01:02:53,159
put aq : in front of it

1643
01:02:51,719 --> 01:02:54,808
of course since it was mostly exposition

1644
01:02:53,159 --> 01:02:55,960
today this is probably mostly questions

1645
01:02:54,809 --> 01:02:58,420
not about what we were coding

1646
01:02:55,960 --> 01:02:59,980
because presumably that was not

1647
01:02:58,420 --> 01:03:02,289
particularly complicated we only did a

1648
01:02:59,980 --> 01:03:03,760
very little bit of coding but you know

1649
01:03:02,289 --> 01:03:06,219
if you have questions about sort of the

1650
01:03:03,760 --> 01:03:07,630
overall concept of the debug services or

1651
01:03:06,219 --> 01:03:10,500
how they should be structured we can

1652
01:03:07,630 --> 01:03:10,500
totally take those now

1653
01:03:22,199 --> 01:03:26,549
soy sauce the kid is there a way to

1654
01:03:24,239 --> 01:03:28,379
determine how much overhead the debug

1655
01:03:26,550 --> 01:03:32,690
takes when it is enabled or is there

1656
01:03:28,380 --> 01:03:35,490
such a thing as debug levels so you know

1657
01:03:32,690 --> 01:03:37,019
obviously there's really only one way to

1658
01:03:35,489 --> 01:03:39,479
determine how much overhead the debug

1659
01:03:37,019 --> 01:03:41,909
takes and that's to compile it out right

1660
01:03:39,480 --> 01:03:45,869
and one of the things that you've

1661
01:03:41,909 --> 01:03:49,440
already seen is that we have even in our

1662
01:03:45,869 --> 01:03:53,010
own thing here we have a way to compile

1663
01:03:49,440 --> 01:03:56,429
it out right so we have handmade slow

1664
01:03:53,010 --> 01:03:58,829
and handmade slow is a thing which you

1665
01:03:56,429 --> 01:04:00,750
know includes all of the debug stuff we

1666
01:03:58,829 --> 01:04:04,730
have handmade internal which is

1667
01:04:00,750 --> 01:04:08,190
something that that includes all of the

1668
01:04:04,730 --> 01:04:10,400
sort of the developer annotation so we

1669
01:04:08,190 --> 01:04:13,019
obviously have sort of some pound

1670
01:04:10,400 --> 01:04:15,180
defined controls over whether stuff gets

1671
01:04:13,019 --> 01:04:17,519
included and if we want to test to see

1672
01:04:15,179 --> 01:04:18,838
how slow the debug code is making us we

1673
01:04:17,519 --> 01:04:21,088
can always just run with it compile

1674
01:04:18,838 --> 01:04:23,009
completely away and so that's one thing

1675
01:04:21,088 --> 01:04:25,259
that we will be making sure that we can

1676
01:04:23,010 --> 01:04:26,609
do very easily is just flip a switch and

1677
01:04:25,260 --> 01:04:28,470
have all the debug code disappear

1678
01:04:26,608 --> 01:04:32,639
because yeah it's gonna take some

1679
01:04:28,469 --> 01:04:33,719
overhead and that's fine but we don't

1680
01:04:32,639 --> 01:04:35,368
want to be in a position where we have

1681
01:04:33,719 --> 01:04:37,559
that overhead in if we're trying to ship

1682
01:04:35,369 --> 01:04:39,240
the fastest possible version on like you

1683
01:04:37,559 --> 01:04:40,619
know a machine low for lower end

1684
01:04:39,239 --> 01:04:42,449
machines for customers that are buying

1685
01:04:40,619 --> 01:04:44,869
the game we don't want that code hogging

1686
01:04:42,449 --> 01:04:44,868
things up

1687
01:04:48,219 --> 01:04:53,149
psi 9 why not use a simple template that

1688
01:04:50,989 --> 01:04:55,759
would remove storing the ID eg template

1689
01:04:53,150 --> 01:04:59,480
ID in ID struct time block well the

1690
01:04:55,759 --> 01:05:00,980
reason for that is again so yes the

1691
01:04:59,480 --> 01:05:02,420
template stuff is sort of one of the

1692
01:05:00,980 --> 01:05:04,039
ways that they tried to then address the

1693
01:05:02,420 --> 01:05:06,559
fact because remember templates were

1694
01:05:04,039 --> 01:05:09,890
added about about ten years I think

1695
01:05:06,559 --> 01:05:11,509
after C++ first kind of came on the

1696
01:05:09,889 --> 01:05:13,909
scene I'm not sure if it's actually ten

1697
01:05:11,509 --> 01:05:18,409
years it's probably ten I don't know

1698
01:05:13,909 --> 01:05:20,449
something like that seven years maybe we

1699
01:05:18,409 --> 01:05:22,998
could use them but we really don't need

1700
01:05:20,449 --> 01:05:25,699
them like I was saying we could use

1701
01:05:22,998 --> 01:05:27,919
templates to get rid of that but this is

1702
01:05:25,699 --> 01:05:29,268
not actually like any optimizing

1703
01:05:27,920 --> 01:05:31,519
compiler that's any good at all it's

1704
01:05:29,268 --> 01:05:33,709
gonna eliminate the ID as being constant

1705
01:05:31,518 --> 01:05:34,098
so it really just does not cost us

1706
01:05:33,710 --> 01:05:36,739
anything

1707
01:05:34,099 --> 01:05:39,220
so we literally just be like wasting our

1708
01:05:36,739 --> 01:05:41,599
- no compile time and like introducing

1709
01:05:39,219 --> 01:05:44,149
more language features that we don't

1710
01:05:41,599 --> 01:05:45,170
actually need to use just to illuminate

1711
01:05:44,150 --> 01:05:51,739
something that actually won't ever

1712
01:05:45,170 --> 01:05:52,608
happen that makes sense insofar as would

1713
01:05:51,739 --> 01:05:54,079
you agree that there is a similarity

1714
01:05:52,608 --> 01:05:58,130
between test-driven development and

1715
01:05:54,079 --> 01:05:59,869
writing the usage code first yes I would

1716
01:05:58,130 --> 01:06:02,900
there's a similarity although I think

1717
01:05:59,869 --> 01:06:04,670
it's very important to just to note that

1718
01:06:02,900 --> 01:06:07,999
they are actually fairly different in

1719
01:06:04,670 --> 01:06:10,700
that if your mental state is I'm trying

1720
01:06:07,998 --> 01:06:13,429
to write test code for this thing in

1721
01:06:10,699 --> 01:06:14,808
order to drive its development that's

1722
01:06:13,429 --> 01:06:17,568
very different than I'm writing the

1723
01:06:14,809 --> 01:06:20,150
actual code I think we'll use it because

1724
01:06:17,568 --> 01:06:22,248
one implies you are trying to find like

1725
01:06:20,150 --> 01:06:24,470
edge cases and good coverage of the

1726
01:06:22,248 --> 01:06:25,730
thing and the other is actually implying

1727
01:06:24,469 --> 01:06:27,048
that I'm just gonna try and see what's

1728
01:06:25,730 --> 01:06:28,248
the most convenient way to use it and

1729
01:06:27,048 --> 01:06:34,608
you really want to be talking about the

1730
01:06:28,248 --> 01:06:37,669
latter not the former chai latte Qin OA

1731
01:06:34,608 --> 01:06:39,018
or quinoa probably would you consider

1732
01:06:37,670 --> 01:06:40,730
functional programming for game

1733
01:06:39,018 --> 01:06:44,268
development yeah we do it all the time

1734
01:06:40,730 --> 01:06:46,369
actually the important thing is you just

1735
01:06:44,268 --> 01:06:48,379
don't really want completely functional

1736
01:06:46,369 --> 01:06:50,059
programming but oftentimes in pretty

1737
01:06:48,380 --> 01:06:52,849
much anything and this is nots was there

1738
01:06:50,059 --> 01:06:55,069
it to game development you want small

1739
01:06:52,849 --> 01:06:56,838
parts of the of the of your program to

1740
01:06:55,068 --> 01:06:58,489
be written functionally you know things

1741
01:06:56,838 --> 01:07:00,048
that don't need to access a lot of state

1742
01:06:58,489 --> 01:07:00,349
you want to write them functionally if

1743
01:07:00,048 --> 01:07:03,769
you

1744
01:07:00,349 --> 01:07:06,440
because it eliminates the possibility of

1745
01:07:03,769 --> 01:07:08,630
error based on state that you can't

1746
01:07:06,440 --> 01:07:09,860
easily observe is is being used right

1747
01:07:08,630 --> 01:07:11,360
when you can see everything that gets

1748
01:07:09,860 --> 01:07:14,240
passed into something and it's a really

1749
01:07:11,360 --> 01:07:15,860
clear well known set and you know that

1750
01:07:14,239 --> 01:07:17,809
there's no side effects that makes it

1751
01:07:15,860 --> 01:07:20,990
just easier to eliminate a class of

1752
01:07:17,809 --> 01:07:22,460
potential bugs or potential things to

1753
01:07:20,989 --> 01:07:24,589
consider when you're working with that

1754
01:07:22,460 --> 01:07:25,550
code and that's very handy so I don't

1755
01:07:24,590 --> 01:07:27,829
think functional programming is

1756
01:07:25,550 --> 01:07:30,289
particularly useful as a if you to do it

1757
01:07:27,829 --> 01:07:32,059
took you know in a totalitarian sense

1758
01:07:30,289 --> 01:07:33,500
like I don't think writing a whole game

1759
01:07:32,059 --> 01:07:35,509
functionally it's a very good idea I

1760
01:07:33,500 --> 01:07:37,099
don't think it's useful because like

1761
01:07:35,510 --> 01:07:39,770
everything else functional like a

1762
01:07:37,099 --> 01:07:41,839
functional style is a tool that you use

1763
01:07:39,769 --> 01:07:44,360
to accomplish something and when that

1764
01:07:41,840 --> 01:07:46,430
tool lines up well with the task at hand

1765
01:07:44,360 --> 01:07:49,579
it's very good when it doesn't it's very

1766
01:07:46,429 --> 01:07:51,379
poor and so procedural code is a lot

1767
01:07:49,579 --> 01:07:52,369
better for certain things and so what

1768
01:07:51,380 --> 01:07:54,800
you want to do is just kind of

1769
01:07:52,369 --> 01:08:02,599
understand the pros and cons of each and

1770
01:07:54,800 --> 01:08:04,340
use the right one at the right time how

1771
01:08:02,599 --> 01:08:06,440
does the start cycle count get stored in

1772
01:08:04,340 --> 01:08:08,240
the struct when you don't explicitly set

1773
01:08:06,440 --> 01:08:09,710
start cycle count equal start so

1774
01:08:08,239 --> 01:08:12,589
counting it or something like you did

1775
01:08:09,710 --> 01:08:15,500
with the ID well I kind of do and really

1776
01:08:12,590 --> 01:08:16,850
I mean you know like I said we kind of

1777
01:08:15,500 --> 01:08:18,199
want to clean these up so I'm gonna kind

1778
01:08:16,850 --> 01:08:20,000
of change the way these work tomorrow

1779
01:08:18,199 --> 01:08:23,300
when we actually kind of do a pass over

1780
01:08:20,000 --> 01:08:24,649
these to change the debug cycle counters

1781
01:08:23,300 --> 01:08:27,230
is something a little bit better just in

1782
01:08:24,649 --> 01:08:29,299
general but if you take a look at what's

1783
01:08:27,229 --> 01:08:31,669
happening here this begin time block

1784
01:08:29,300 --> 01:08:39,140
underscore it's gonna get expanded to be

1785
01:08:31,670 --> 01:08:42,230
this right so we actually are

1786
01:08:39,140 --> 01:08:47,329
initializing start cycle count from our

1787
01:08:42,229 --> 01:08:49,039
DTSC you know so it live is literally

1788
01:08:47,329 --> 01:08:52,869
getting initialized it's getting a slice

1789
01:08:49,039 --> 01:08:52,869
to whatever the clock is at that point

1790
01:08:55,158 --> 01:08:59,548
JAF Catalan do you get heisenbugs where

1791
01:08:57,809 --> 01:09:02,059
the bug happens only when there's not

1792
01:08:59,548 --> 01:09:04,469
any debug code running absolutely

1793
01:09:02,059 --> 01:09:06,538
there's really nothing you can do about

1794
01:09:04,469 --> 01:09:08,698
that that's just gonna happen probably

1795
01:09:06,538 --> 01:09:11,068
you know will it happen this project I

1796
01:09:08,698 --> 01:09:14,908
don't know it's anyone's guess

1797
01:09:11,069 --> 01:09:20,069
but it it's always a possibility and I

1798
01:09:14,908 --> 01:09:22,288
you know like anything else it's very

1799
01:09:20,069 --> 01:09:24,869
unlikely that you will go a whole

1800
01:09:22,288 --> 01:09:28,588
project without one really hard to find

1801
01:09:24,868 --> 01:09:30,448
bug right so having the debug services

1802
01:09:28,588 --> 01:09:32,488
is not something that guarantees that

1803
01:09:30,448 --> 01:09:33,748
all bugs will be easy for you to find

1804
01:09:32,488 --> 01:09:35,308
and that you'll always find all your

1805
01:09:33,748 --> 01:09:37,948
bugs quickly and or anything it's

1806
01:09:35,309 --> 01:09:41,880
totally not that's a kind of a pipe

1807
01:09:37,948 --> 01:09:43,138
dream unfortunately so you will

1808
01:09:41,880 --> 01:09:44,429
absolutely have the kind you're talking

1809
01:09:43,139 --> 01:09:45,989
about where it's like oh you know this

1810
01:09:44,429 --> 01:09:47,458
debug code would probably find the bug

1811
01:09:45,988 --> 01:09:50,458
but the bug only happens the debug code

1812
01:09:47,458 --> 01:09:51,838
is turned off darn and then you just

1813
01:09:50,458 --> 01:09:53,458
gotta roll up your sleeves and debug

1814
01:09:51,838 --> 01:09:56,158
that particular bug the old-fashioned

1815
01:09:53,458 --> 01:09:57,599
way but the important thing to remember

1816
01:09:56,158 --> 01:09:59,578
is what you're going for here is it

1817
01:09:57,599 --> 01:10:01,199
overall savings in time so the point of

1818
01:09:59,578 --> 01:10:02,639
the debug services is yes you will have

1819
01:10:01,198 --> 01:10:03,719
a few bugs that maybe they can't help

1820
01:10:02,639 --> 01:10:06,059
you with and those bugs will still be

1821
01:10:03,719 --> 01:10:09,090
very hard but the point is for the 90%

1822
01:10:06,059 --> 01:10:11,010
case or the 80% case they are gonna help

1823
01:10:09,090 --> 01:10:14,998
you find the bugs much quicker and you

1824
01:10:11,010 --> 01:10:19,590
want to save that time and and and you

1825
01:10:14,998 --> 01:10:20,998
know so it's still very valuable so the

1826
01:10:19,590 --> 01:10:22,619
structure gets called right when it goes

1827
01:10:20,998 --> 01:10:26,519
out of scope yes

1828
01:10:22,618 --> 01:10:28,259
C++ actually has extremely long

1829
01:10:26,519 --> 01:10:30,329
extremely draconian extremely hard to

1830
01:10:28,260 --> 01:10:33,479
follow set of rules for when destructors

1831
01:10:30,328 --> 01:10:36,299
get called and in what order and all

1832
01:10:33,479 --> 01:10:38,280
these other sorts of things and if you

1833
01:10:36,300 --> 01:10:42,300
are the kind of person who is passionate

1834
01:10:38,279 --> 01:10:43,438
about C++ because your your you know

1835
01:10:42,300 --> 01:10:44,729
your mother didn't love you as a child

1836
01:10:43,439 --> 01:10:46,889
or whatever the other reasons are other

1837
01:10:44,729 --> 01:10:50,369
people you know sort of cling on to it

1838
01:10:46,889 --> 01:10:51,689
is you can spend a bunch of time

1839
01:10:50,368 --> 01:10:54,389
learning all those things but assuming

1840
01:10:51,689 --> 01:10:55,739
you don't care about that and you don't

1841
01:10:54,389 --> 01:10:56,939
really care about C++ so you just want

1842
01:10:55,738 --> 01:10:59,638
to know a good rule of thumb for like

1843
01:10:56,939 --> 01:11:01,469
when destructors get called the rule is

1844
01:10:59,639 --> 01:11:03,569
they generally go in the inverse order

1845
01:11:01,469 --> 01:11:06,448
in which things were constructed right

1846
01:11:03,569 --> 01:11:07,719
so if I have something where you know

1847
01:11:06,448 --> 01:11:12,639
I've got a function here

1848
01:11:07,719 --> 01:11:15,010
and I've got times block a you know BCD

1849
01:11:12,640 --> 01:11:16,210
and you're like well you know what order

1850
01:11:15,010 --> 01:11:18,760
to those constructors that called in

1851
01:11:16,210 --> 01:11:21,698
generally they just peel backwards from

1852
01:11:18,760 --> 01:11:23,289
from you know it's sort of in reverse

1853
01:11:21,698 --> 01:11:26,829
chronological order if you will

1854
01:11:23,289 --> 01:11:28,779
so if D was the last thing constructed

1855
01:11:26,829 --> 01:11:30,579
right because they get called the

1856
01:11:28,779 --> 01:11:34,599
Constructors get called in the order in

1857
01:11:30,579 --> 01:11:36,760
which you see them a B C D so I would

1858
01:11:34,600 --> 01:11:38,530
see the timed block constructor call for

1859
01:11:36,760 --> 01:11:41,050
a then the one for bead then the one for

1860
01:11:38,529 --> 01:11:43,569
C front one for D when this brace gets

1861
01:11:41,050 --> 01:11:45,130
hit and they go out of scope I will then

1862
01:11:43,569 --> 01:11:48,149
see the calls in the opposite order

1863
01:11:45,130 --> 01:11:51,069
destructor for D destructor for C

1864
01:11:48,149 --> 01:11:54,609
destructor for B destructor for a and

1865
01:11:51,069 --> 01:11:57,609
the reason for that is you know kind of

1866
01:11:54,609 --> 01:11:59,799
relatively obvious if you think about

1867
01:11:57,609 --> 01:12:01,059
the sorts of things that C++ programmers

1868
01:11:59,800 --> 01:12:02,770
might start doing with these kinds of

1869
01:12:01,060 --> 01:12:05,050
things when they you know get a little

1870
01:12:02,770 --> 01:12:07,810
more hog-wild typically what you might

1871
01:12:05,050 --> 01:12:10,300
do is if this got constructed first if a

1872
01:12:07,810 --> 01:12:13,239
got constructed first I may pass a to

1873
01:12:10,300 --> 01:12:14,980
like you know to be right because since

1874
01:12:13,238 --> 01:12:18,069
a is already constructed B could start

1875
01:12:14,979 --> 01:12:20,889
referencing something in a well if I now

1876
01:12:18,069 --> 01:12:23,769
call these destructors in say the

1877
01:12:20,890 --> 01:12:26,260
original chronological order ABCD that

1878
01:12:23,770 --> 01:12:28,420
means a would get destructed before B

1879
01:12:26,260 --> 01:12:30,460
would get destructed but be potentially

1880
01:12:28,420 --> 01:12:33,159
has a reference to a and may try to talk

1881
01:12:30,460 --> 01:12:34,899
to a during its destructor so what they

1882
01:12:33,159 --> 01:12:38,529
tried to do is have the order of

1883
01:12:34,899 --> 01:12:40,779
destruction mirror the order like and I

1884
01:12:38,529 --> 01:12:43,149
literally mirror like flip right the

1885
01:12:40,779 --> 01:12:44,889
order of construction so that if you

1886
01:12:43,149 --> 01:12:47,589
started passing things that were

1887
01:12:44,890 --> 01:12:49,570
constructed to newer to more recently

1888
01:12:47,590 --> 01:12:51,699
constructive things they could then peel

1889
01:12:49,569 --> 01:12:56,139
off in the same order getting destructed

1890
01:12:51,698 --> 01:12:57,909
and so again C++ has crazy ridiculous

1891
01:12:56,140 --> 01:13:00,280
rules that nobody you just don't want to

1892
01:12:57,909 --> 01:13:03,399
know stay sane and don't bother reading

1893
01:13:00,279 --> 01:13:05,109
the spec but if you just need a good

1894
01:13:03,399 --> 01:13:07,750
rule of thumb for basic scenarios that

1895
01:13:05,109 --> 01:13:10,569
is usually all you will need to know to

1896
01:13:07,750 --> 01:13:12,960
keep yourself in relative control what's

1897
01:13:10,569 --> 01:13:12,960
happening

1898
01:13:16,210 --> 01:13:19,510
how are we doing

1899
01:13:34,099 --> 01:13:37,569
looks like no more questions

1900
01:13:49,210 --> 01:13:57,880
it does appear there are no more

1901
01:13:52,130 --> 01:13:57,880
questions yeah

1902
01:14:08,969 --> 01:14:13,359
Patrick hombre says community fight all

1903
01:14:11,769 --> 01:14:17,769
right well I'll let you guys fight it

1904
01:14:13,359 --> 01:14:22,689
out and I can go ahead and close this

1905
01:14:17,769 --> 01:14:26,079
down like so and we will wrap up another

1906
01:14:22,689 --> 01:14:27,579
episode of handmade hero thank you

1907
01:14:26,078 --> 01:14:28,748
everyone for joining me for another

1908
01:14:27,578 --> 01:14:30,698
episode of handmade hero it's been a

1909
01:14:28,748 --> 01:14:33,760
pleasure coding with you as always if

1910
01:14:30,698 --> 01:14:35,648
you would like to follow along at home

1911
01:14:33,760 --> 01:14:38,199
you can always order the source code on

1912
01:14:35,649 --> 01:14:39,338
handmade hero org basically well I

1913
01:14:38,198 --> 01:14:40,779
should say you can just order the game

1914
01:14:39,338 --> 01:14:41,859
it comes with a source code so if you

1915
01:14:40,779 --> 01:14:43,268
preorder the game you get the source

1916
01:14:41,859 --> 01:14:44,559
code right now so that you can play

1917
01:14:43,269 --> 01:14:48,069
along with it home and all that other

1918
01:14:44,559 --> 01:14:49,149
good stuff we also have some other stuff

1919
01:14:48,069 --> 01:14:51,189
you might want to check out we have a

1920
01:14:49,149 --> 01:14:52,959
forum site which you can go to ask

1921
01:14:51,189 --> 01:14:54,760
questions or get a community community

1922
01:14:52,958 --> 01:14:56,378
annotated episode guide there's

1923
01:14:54,760 --> 01:14:57,458
community ports to Mac and Linux people

1924
01:14:56,378 --> 01:14:58,779
have been working on other stuff like

1925
01:14:57,458 --> 01:15:00,429
that if you're interested in that check

1926
01:14:58,779 --> 01:15:01,719
it out there we have a patreon if you

1927
01:15:00,429 --> 01:15:03,149
want to support the video series you can

1928
01:15:01,719 --> 01:15:05,708
always subscribe to that it's very much

1929
01:15:03,149 --> 01:15:07,260
appreciate it if you'd like to we also

1930
01:15:05,708 --> 01:15:11,349
have a tweet bout the tweets to schedule

1931
01:15:07,260 --> 01:15:14,979
so that's cool and also over the weekend

1932
01:15:11,349 --> 01:15:16,809
I've finished up the github stuff so

1933
01:15:14,979 --> 01:15:19,119
this week I think we will probably be

1934
01:15:16,809 --> 01:15:21,788
starting to try and roll out kind of

1935
01:15:19,118 --> 01:15:23,738
cautiously community access to the

1936
01:15:21,788 --> 01:15:25,688
hammer here at github so if you are

1937
01:15:23,738 --> 01:15:28,658
someone who has been asking for the

1938
01:15:25,689 --> 01:15:30,280
community github stuff we can start a

1939
01:15:28,658 --> 01:15:32,438
little thread on the forums to start

1940
01:15:30,279 --> 01:15:34,059
talking about how we can start testing

1941
01:15:32,439 --> 01:15:35,619
that I don't really want to send out

1942
01:15:34,059 --> 01:15:38,079
everyone a key right away because I'm

1943
01:15:35,618 --> 01:15:40,538
afraid that if there are bugs with sort

1944
01:15:38,078 --> 01:15:42,128
of that interlink that you know it could

1945
01:15:40,538 --> 01:15:43,748
get kind of hairy if everyone starts

1946
01:15:42,128 --> 01:15:45,248
pounding on it at once and then it turns

1947
01:15:43,748 --> 01:15:46,868
out that there's a bug and now everyone

1948
01:15:45,248 --> 01:15:48,908
can't you know if then the whole world

1949
01:15:46,868 --> 01:15:51,608
gets deleted and github crashes and and

1950
01:15:48,908 --> 01:15:52,658
I you know delete everyone's open-source

1951
01:15:51,609 --> 01:15:55,780
project because I did something

1952
01:15:52,658 --> 01:15:57,908
accidentally wrong so hopefully we can

1953
01:15:55,779 --> 01:15:59,288
avoid that scenario by doing a sort of

1954
01:15:57,908 --> 01:16:00,818
slower more methodical rollout and

1955
01:15:59,288 --> 01:16:03,009
verify that's actually working for a few

1956
01:16:00,819 --> 01:16:04,689
people first so we'll try and do that

1957
01:16:03,010 --> 01:16:06,599
but then hopefully you know by the time

1958
01:16:04,689 --> 01:16:09,069
next week rolls around we will have

1959
01:16:06,599 --> 01:16:12,189
ironed out any problems that there were

1960
01:16:09,069 --> 01:16:13,249
and we can just open it up for everyone

1961
01:16:12,189 --> 01:16:18,320
so everyone get in

1962
01:16:13,248 --> 01:16:20,599
and have a little party until then yeah

1963
01:16:18,319 --> 01:16:22,518
until then I hope everyone has fun

1964
01:16:20,599 --> 01:16:25,309
coding I will see you guys on the

1965
01:16:22,519 --> 01:16:28,400
Internet and I will be back here at 5

1966
01:16:25,309 --> 01:16:29,570
p.m. Pacific Daylight Time tomorrow so

1967
01:16:28,399 --> 01:16:32,569
we can go ahead and start making some

1968
01:16:29,569 --> 01:16:34,998
much better debug cycle count timers

1969
01:16:32,569 --> 01:16:36,738
which i think is going to be kind of fun

1970
01:16:34,998 --> 01:16:39,498
actually I think that'll be pretty good

1971
01:16:36,738 --> 01:16:41,268
so hope to see you all then until then

1972
01:16:39,498 --> 01:16:44,349
have fun programming and I'll see you on

1973
01:16:41,269 --> 01:16:44,349
the Internet take it easy everyone

