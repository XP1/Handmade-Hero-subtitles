1
00:00:02,689 --> 00:00:09,719
okay welcome back to the QA for day two

2
00:00:05,730 --> 00:00:12,480
of handmade hero if you are in the

3
00:00:09,718 --> 00:00:15,570
twitch chat or on IRC and would like to

4
00:00:12,480 --> 00:00:18,149
ask a question please ask it now and if

5
00:00:15,570 --> 00:00:19,199
you could it would be very helpful the

6
00:00:18,149 --> 00:00:21,868
only way that I'm going to be able to

7
00:00:19,199 --> 00:00:25,250
see them is going to basically be if you

8
00:00:21,868 --> 00:00:29,820
put senior Ettore cm you are 80 ori in

9
00:00:25,250 --> 00:00:31,829
your message so that i can see it and

10
00:00:29,820 --> 00:00:36,119
that way i will actually be able to tell

11
00:00:31,829 --> 00:00:37,289
what is going on in also since we are

12
00:00:36,119 --> 00:00:38,789
starting to get more serious about the

13
00:00:37,289 --> 00:00:41,280
programming now i would appreciate it if

14
00:00:38,789 --> 00:00:43,378
you would keep the questions to stuff

15
00:00:41,280 --> 00:00:45,480
that we actually did tonight or on a

16
00:00:43,378 --> 00:00:46,949
previous stream so that we can actually

17
00:00:45,479 --> 00:00:48,628
focus on stuff like that other than

18
00:00:46,950 --> 00:00:50,489
because otherwise we get bogged down in

19
00:00:48,628 --> 00:00:52,829
questions like what are we going to do

20
00:00:50,488 --> 00:00:54,659
later and maybe we'll do some streams

21
00:00:52,829 --> 00:00:56,308
where we handle where we field questions

22
00:00:54,659 --> 00:00:58,319
like that but i would rather focus

23
00:00:56,308 --> 00:01:01,320
mostly on questions about the code we

24
00:00:58,320 --> 00:01:03,480
just did so that they can so that we can

25
00:01:01,320 --> 00:01:05,280
explain it more thoroughly and suss out

26
00:01:03,479 --> 00:01:06,599
any things that I went through quickly

27
00:01:05,280 --> 00:01:07,650
because like I said I always have to go

28
00:01:06,599 --> 00:01:09,658
quickly so that we can make some

29
00:01:07,650 --> 00:01:11,340
progress and that means some things will

30
00:01:09,659 --> 00:01:13,290
go back too fast and the QA is kind of

31
00:01:11,340 --> 00:01:20,280
where we can drill down into that okay

32
00:01:13,290 --> 00:01:29,118
so let's take a look let's see do do to

33
00:01:20,280 --> 00:01:34,049
do expanding this out here so we have

34
00:01:29,118 --> 00:01:36,959
further lung see atoms like intern

35
00:01:34,049 --> 00:01:40,530
strings yes doctor cheats they are like

36
00:01:36,959 --> 00:01:42,449
intern strings basically I don't know if

37
00:01:40,530 --> 00:01:46,079
there's a good explanation of atoms on

38
00:01:42,450 --> 00:01:47,820
here somewhere that will say exactly

39
00:01:46,078 --> 00:01:51,328
what they are I haven't touched them in

40
00:01:47,819 --> 00:01:54,478
a really long time but it may be an atom

41
00:01:51,328 --> 00:01:55,828
about atom tables here you go an atom

42
00:01:54,478 --> 00:01:58,769
table since my table that stores strings

43
00:01:55,828 --> 00:02:00,239
and corresponding identifiers so you

44
00:01:58,769 --> 00:02:01,349
know that's probably as close as an

45
00:02:00,239 --> 00:02:04,319
intern string is you're going to get

46
00:02:01,349 --> 00:02:05,819
right without actually calling an intern

47
00:02:04,319 --> 00:02:09,299
stream so I would say yes that's a fair

48
00:02:05,819 --> 00:02:11,128
way to describe them certainly they

49
00:02:09,300 --> 00:02:13,920
really aren't that used that much in

50
00:02:11,128 --> 00:02:17,469
what we're going to do at all

51
00:02:13,919 --> 00:02:19,030
let's see dudu

52
00:02:17,469 --> 00:02:20,800
can you go full screen with your cam for

53
00:02:19,030 --> 00:02:22,659
the QA I would rather not because I'd

54
00:02:20,800 --> 00:02:24,490
rather go and be able to show code like

55
00:02:22,659 --> 00:02:25,990
I just did there cuz so I'd rather not

56
00:02:24,490 --> 00:02:26,980
I'm sorry about that if we if I'm gonna

57
00:02:25,990 --> 00:02:28,480
do something where I talk for a long

58
00:02:26,979 --> 00:02:29,530
time I could try to do that but I don't

59
00:02:28,479 --> 00:02:30,759
actually know how to do that without

60
00:02:29,530 --> 00:02:33,669
stopping the stream I'm not sure how to

61
00:02:30,759 --> 00:02:34,870
do it in OBS I got a assign some hotkeys

62
00:02:33,669 --> 00:02:36,609
or something I don't know if it has that

63
00:02:34,870 --> 00:02:41,530
to switch profiles or something like

64
00:02:36,610 --> 00:02:43,330
that would be nice if while using the

65
00:02:41,530 --> 00:02:45,039
MSDN you could put the chrome window on

66
00:02:43,330 --> 00:02:46,630
the right a little so we can see the

67
00:02:45,039 --> 00:02:48,400
code oh okay

68
00:02:46,629 --> 00:02:49,840
that's a good call I'll try to remember

69
00:02:48,400 --> 00:02:51,250
to do that so that you can kind of see

70
00:02:49,840 --> 00:02:52,989
things all right yes I will try to do

71
00:02:51,250 --> 00:03:00,810
that in the future thank you for that

72
00:02:52,989 --> 00:03:00,810
suggestion um let's see doo doo doo

73
00:03:02,250 --> 00:03:05,979
what's the fastest path for getting a

74
00:03:04,389 --> 00:03:07,359
pixel to the screen on Windows well

75
00:03:05,979 --> 00:03:10,389
technically we're going to show tomorrow

76
00:03:07,360 --> 00:03:12,040
the way that we need to do it which we

77
00:03:10,389 --> 00:03:14,109
will be doing but if you really just

78
00:03:12,039 --> 00:03:16,659
want a pixel on the screen it is

79
00:03:14,110 --> 00:03:19,570
actually set pixel if I remember

80
00:03:16,659 --> 00:03:21,340
correctly set pixel basically allows you

81
00:03:19,569 --> 00:03:22,900
to set a pixel at a particular color and

82
00:03:21,340 --> 00:03:25,750
tell it what color you want it to be and

83
00:03:22,900 --> 00:03:28,239
that is exactly what will happen so if

84
00:03:25,750 --> 00:03:31,840
you want to actually do that you can it

85
00:03:28,239 --> 00:03:33,759
is it is this let's let's I can actually

86
00:03:31,840 --> 00:03:36,340
do it for you if you want we can

87
00:03:33,759 --> 00:03:38,169
basically say okay that device context

88
00:03:36,340 --> 00:03:42,400
that you gave us back at the coordinates

89
00:03:38,169 --> 00:03:47,409
100 100 I will set something to to this

90
00:03:42,400 --> 00:03:50,219
color and and off we go

91
00:03:47,409 --> 00:03:52,180
right and if we then run the application

92
00:03:50,219 --> 00:03:53,500
you probably I don't even know if you

93
00:03:52,180 --> 00:03:56,530
can see it on the stream but there is

94
00:03:53,500 --> 00:03:58,840
one little pixel there I don't know if

95
00:03:56,530 --> 00:04:01,599
is zoom in installed on this guy

96
00:03:58,840 --> 00:04:04,239
it is not install in this guy so yeah

97
00:04:01,599 --> 00:04:06,430
you can see it and and as we repaint you

98
00:04:04,239 --> 00:04:08,590
know when we we can see that it still

99
00:04:06,430 --> 00:04:10,390
stays there this little little tiny

100
00:04:08,590 --> 00:04:11,590
pixel so that is actually if you

101
00:04:10,389 --> 00:04:13,238
literally just want the fast way to set

102
00:04:11,590 --> 00:04:15,159
a pixel that is the way but we are going

103
00:04:13,239 --> 00:04:16,389
to be doing it's way too slow you'd

104
00:04:15,159 --> 00:04:18,488
never be able to render a game calling

105
00:04:16,389 --> 00:04:22,029
set pixel well it could if it was a

106
00:04:18,488 --> 00:04:23,228
pixel game I guess but basically we are

107
00:04:22,029 --> 00:04:24,159
going to show tomorrow the way to

108
00:04:23,228 --> 00:04:26,050
actually get pixels on the screen

109
00:04:24,160 --> 00:04:27,159
quickly well and it's

110
00:04:26,050 --> 00:04:29,079
in the quickest way the quickest way is

111
00:04:27,158 --> 00:04:30,189
to use the GPU obviously but we're when

112
00:04:29,079 --> 00:04:32,019
you're rendering them yourselves

113
00:04:30,189 --> 00:04:39,990
I'll show you one fairly efficient way

114
00:04:32,019 --> 00:04:39,990
to get them to the screen let's see do

115
00:04:43,019 --> 00:04:48,430
let's see yes so thank you for

116
00:04:46,810 --> 00:04:50,759
mentioning this I think I should start

117
00:04:48,430 --> 00:04:56,430
doing this more so things that take

118
00:04:50,759 --> 00:04:58,629
actual things that take an actual string

119
00:04:56,430 --> 00:05:00,840
what I would like to start doing with

120
00:04:58,629 --> 00:05:03,729
those is actually start always prefixing

121
00:05:00,839 --> 00:05:05,948
prefixing sorry suffixing them with an

122
00:05:03,728 --> 00:05:07,478
SI or or wide which I described in the

123
00:05:05,949 --> 00:05:11,680
in the intro screen but I should

124
00:05:07,478 --> 00:05:13,538
probably get get to doing that very you

125
00:05:11,680 --> 00:05:15,939
know a lot more so if I go ahead and

126
00:05:13,538 --> 00:05:18,250
undef these these variables here I want

127
00:05:15,939 --> 00:05:19,538
to go ahead and F those variables just

128
00:05:18,250 --> 00:05:22,509
see what's going on here which is your

129
00:05:19,538 --> 00:05:23,829
class identifier not found' yes so I

130
00:05:22,509 --> 00:05:26,199
will go ahead and make sure I call the

131
00:05:23,829 --> 00:05:26,918
ANSI versions of these guys just to be

132
00:05:26,199 --> 00:05:28,629
clear here

133
00:05:26,918 --> 00:05:30,788
I don't think get message takes one

134
00:05:28,629 --> 00:05:33,340
right get message is not something that

135
00:05:30,788 --> 00:05:34,870
takes a string so it shouldn't yeah

136
00:05:33,339 --> 00:05:36,158
so basically the way that all these work

137
00:05:34,870 --> 00:05:37,899
I mentioned a couple times is basically

138
00:05:36,158 --> 00:05:39,788
all these functions can take unicode

139
00:05:37,899 --> 00:05:42,038
strings or they could take an C's you

140
00:05:39,788 --> 00:05:43,300
know ASCII strings basically and we want

141
00:05:42,038 --> 00:05:44,978
to always be calling the ASCII ones

142
00:05:43,300 --> 00:05:47,319
because if someone tries to compile our

143
00:05:44,978 --> 00:05:49,209
code using Unicode settings in the

144
00:05:47,319 --> 00:05:51,129
compiler they will get an error because

145
00:05:49,209 --> 00:05:53,829
these are not specified as unicode

146
00:05:51,129 --> 00:05:55,449
strings they're specified as ansi

147
00:05:53,829 --> 00:05:56,620
strings so I'm just going to go ahead

148
00:05:55,449 --> 00:05:57,848
and do that for the benefit of people

149
00:05:56,620 --> 00:05:59,139
who are trying to compile at home so

150
00:05:57,848 --> 00:06:10,628
when they down the source code it will

151
00:05:59,139 --> 00:06:11,620
work let's take a look do you use the

152
00:06:10,629 --> 00:06:12,669
same technique for creating a full

153
00:06:11,620 --> 00:06:14,829
screen window it depends on how you

154
00:06:12,668 --> 00:06:15,848
create the full screen window we will be

155
00:06:14,829 --> 00:06:17,680
covering how to create a full screen

156
00:06:15,848 --> 00:06:20,139
window using a couple different methods

157
00:06:17,680 --> 00:06:22,120
potentially at least one method and

158
00:06:20,139 --> 00:06:23,528
basically you'd use this method for the

159
00:06:22,120 --> 00:06:26,019
way that I think we will probably ship

160
00:06:23,528 --> 00:06:27,399
the game but it depends we will have to

161
00:06:26,019 --> 00:06:28,568
see let's do some compatibility testing

162
00:06:27,399 --> 00:06:39,158
and check it out but I will be covering

163
00:06:28,569 --> 00:06:40,509
that later let's see the for loop is

164
00:06:39,158 --> 00:06:41,918
just keeping the window alive right it's

165
00:06:40,509 --> 00:06:43,750
not related to the actual game loop well

166
00:06:41,918 --> 00:06:46,149
we have not gotten a game loop yet so we

167
00:06:43,750 --> 00:06:48,189
actually aren't in a position to talk

168
00:06:46,149 --> 00:06:51,278
about that too much but basically what

169
00:06:48,189 --> 00:06:54,009
this is is as soon as we exit right our

170
00:06:51,278 --> 00:06:55,519
app is done so if I were to not actually

171
00:06:54,009 --> 00:06:58,280
do a loop here and not

172
00:06:55,519 --> 00:07:00,500
not actually do an infinite loop right

173
00:06:58,279 --> 00:07:02,448
then once we actually start running we

174
00:07:00,500 --> 00:07:04,370
will immediately exit right and the app

175
00:07:02,449 --> 00:07:06,050
will be over basically what will happen

176
00:07:04,370 --> 00:07:08,720
you know if we step in in the debugger

177
00:07:06,050 --> 00:07:11,120
you know I step in here I go through and

178
00:07:08,720 --> 00:07:12,289
I go to create the window and you can

179
00:07:11,120 --> 00:07:14,060
see the window you can off you guys to

180
00:07:12,288 --> 00:07:16,269
see that flash but it's there

181
00:07:14,060 --> 00:07:18,470
there's our window right it got created

182
00:07:16,269 --> 00:07:20,120
it just can't be brought to the front

183
00:07:18,470 --> 00:07:21,349
now because we are in the debugger and

184
00:07:20,120 --> 00:07:22,550
once you're in the debugger our app

185
00:07:21,348 --> 00:07:23,839
can't respond to messages which means

186
00:07:22,550 --> 00:07:26,120
the window can't come forwards and so on

187
00:07:23,839 --> 00:07:27,409
and so forth but point being we go right

188
00:07:26,120 --> 00:07:29,449
through here we create the window and

189
00:07:27,410 --> 00:07:31,370
then we return zero so that's the end of

190
00:07:29,449 --> 00:07:34,250
our app it will end up calling exit back

191
00:07:31,370 --> 00:07:35,389
in the C runtime library exit process or

192
00:07:34,250 --> 00:07:37,339
whatever the function is in Windows that

193
00:07:35,389 --> 00:07:39,590
basically terminates the running module

194
00:07:37,339 --> 00:07:42,829
and then we're gone right that's it

195
00:07:39,589 --> 00:07:45,109
so we in order to actually have our

196
00:07:42,829 --> 00:07:46,848
application run doesn't matter if it's a

197
00:07:45,110 --> 00:07:48,229
game or anything else we need to

198
00:07:46,848 --> 00:07:51,259
basically sit in an infinite loop

199
00:07:48,228 --> 00:07:53,598
processing messages until Windows

200
00:07:51,259 --> 00:07:55,370
actually tells us that we're done now

201
00:07:53,598 --> 00:07:57,110
right now we have no way of Windows

202
00:07:55,370 --> 00:07:59,780
actually telling us we're done but if we

203
00:07:57,110 --> 00:08:01,430
wanted to we actually could do that we

204
00:07:59,779 --> 00:08:04,549
would go ahead and we would put that in

205
00:08:01,430 --> 00:08:08,240
here we would put that in WM closed for

206
00:08:04,550 --> 00:08:11,718
example we would do destroy window and

207
00:08:08,240 --> 00:08:13,189
we would call the the default actual

208
00:08:11,718 --> 00:08:14,389
stuff yet you know what like we're going

209
00:08:13,189 --> 00:08:15,949
to help cover that up so I'm not going

210
00:08:14,389 --> 00:08:17,030
to actually get into that because that's

211
00:08:15,949 --> 00:08:18,650
a whole another equation because we're

212
00:08:17,029 --> 00:08:23,869
going to do that tomorrow when we make

213
00:08:18,649 --> 00:08:25,929
our window more well-behaved um let's

214
00:08:23,870 --> 00:08:28,430
see

215
00:08:25,930 --> 00:08:30,680
can I pre-order the Epilepsy simulator

216
00:08:28,430 --> 00:08:32,810
how much does it cost yes you will get

217
00:08:30,680 --> 00:08:33,950
that tonight in fact if you pre-ordered

218
00:08:32,809 --> 00:08:35,359
and download the code from tonight you

219
00:08:33,950 --> 00:08:37,459
will have your very own epilepsy

220
00:08:35,360 --> 00:08:39,469
simulator if you download tonight's code

221
00:08:37,458 --> 00:08:41,889
and try to run it I wouldn't necessarily

222
00:08:39,469 --> 00:08:43,520
recommend it if you have epilepsy

223
00:08:41,889 --> 00:08:47,379
although I don't know if that actually

224
00:08:43,519 --> 00:08:49,250
would trigger epilepsy let's see

225
00:08:47,379 --> 00:08:50,570
wouldn't we want to make it to the user

226
00:08:49,250 --> 00:08:51,889
can't resize the window willy-nilly

227
00:08:50,570 --> 00:08:54,620
since the game will eventually have art

228
00:08:51,889 --> 00:08:56,328
with specific sizes perhaps or perhaps

229
00:08:54,620 --> 00:08:57,889
we just want to try to adjust to the

230
00:08:56,328 --> 00:09:01,159
size that they want the window to be and

231
00:08:57,889 --> 00:09:02,600
so we will be handling that stuff a

232
00:09:01,159 --> 00:09:03,828
little bit later right now we might as

233
00:09:02,600 --> 00:09:06,110
well let them resize it because why not

234
00:09:03,828 --> 00:09:08,449
for a certain vision cross-platform for

235
00:09:06,110 --> 00:09:11,840
development code let's see where

236
00:09:08,450 --> 00:09:13,850
during this stuff is all not questions

237
00:09:11,840 --> 00:09:15,320
related to the code from tonight is it

238
00:09:13,850 --> 00:09:17,750
let's see can experiment with what

239
00:09:15,320 --> 00:09:20,150
happens when you take out H redraw and V

240
00:09:17,750 --> 00:09:21,620
redraw yes in fact I don't think they're

241
00:09:20,149 --> 00:09:23,809
necessary at all I don't think we care

242
00:09:21,620 --> 00:09:25,669
about them at all I'm pretty sure we'd

243
00:09:23,809 --> 00:09:27,500
goat in fact and we can probably just

244
00:09:25,669 --> 00:09:29,240
take out own DC either we're not even

245
00:09:27,500 --> 00:09:31,940
going to snap that copy of the own DC

246
00:09:29,240 --> 00:09:33,350
let's take a look here that's awesome

247
00:09:31,940 --> 00:09:35,390
right because it's stalling

248
00:09:33,350 --> 00:09:37,340
it's toggling every time we get a

249
00:09:35,389 --> 00:09:40,370
repaint message it's only repainting the

250
00:09:37,340 --> 00:09:42,139
part of the window that we don't that

251
00:09:40,370 --> 00:09:43,340
got obscured when I bring it back on

252
00:09:42,139 --> 00:09:44,990
right because the part that's below it

253
00:09:43,340 --> 00:09:46,879
now when we come forwards it needs to

254
00:09:44,990 --> 00:09:49,279
repaint it and it's calling that repaint

255
00:09:46,879 --> 00:09:51,590
as I drag so the faster I drag the

256
00:09:49,279 --> 00:09:53,449
faster it taught that the more gets

257
00:09:51,590 --> 00:09:55,160
filled by each of the toggles of

258
00:09:53,450 --> 00:09:57,200
lightness and blackness so you can kind

259
00:09:55,159 --> 00:09:58,129
of do some fun stuff with that okay

260
00:09:57,200 --> 00:10:00,500
right

261
00:09:58,129 --> 00:10:03,980
again computers they're crazy they do

262
00:10:00,500 --> 00:10:06,169
what you tell them right kind of funny

263
00:10:03,980 --> 00:10:07,940
so yeah eight redraw be we we don't need

264
00:10:06,169 --> 00:10:09,289
those I don't know they're the force of

265
00:10:07,940 --> 00:10:10,730
habit I don't think we're going to need

266
00:10:09,289 --> 00:10:11,779
those let's get rid of them own DC we

267
00:10:10,730 --> 00:10:12,800
don't need either let's just get rid of

268
00:10:11,779 --> 00:10:15,740
style it together and see what happens

269
00:10:12,799 --> 00:10:16,189
let's just get rid of style yeah it's

270
00:10:15,740 --> 00:10:19,039
gone

271
00:10:16,190 --> 00:10:23,230
we don't care it's fine it's totally

272
00:10:19,039 --> 00:10:23,230
fine so we're just gonna leave it that

273
00:10:25,149 --> 00:10:34,309
let's see

274
00:10:28,340 --> 00:10:35,840
OOP to do any considerations for 64-bit

275
00:10:34,309 --> 00:10:37,429
on tonight's code you want to discuss

276
00:10:35,840 --> 00:10:39,590
not yet I don't want to get into 64

277
00:10:37,429 --> 00:10:42,759
versus 32-bit yet because it's not

278
00:10:39,590 --> 00:10:42,759
hasn't really come up super much

279
00:10:42,879 --> 00:10:48,409
basically the only difference between

280
00:10:44,570 --> 00:10:52,340
32-bit and 64-bit compilation is 32-bit

281
00:10:48,409 --> 00:10:54,259
is basically a 4 gigabyte address space

282
00:10:52,340 --> 00:10:57,560
and pointers are 32 bits because 2 to

283
00:10:54,259 --> 00:10:59,210
the 32nd is 4 billion so that's how many

284
00:10:57,559 --> 00:11:01,369
bytes you can address with a 32-bit

285
00:10:59,210 --> 00:11:02,060
pointer right where you're off when

286
00:11:01,370 --> 00:11:05,779
you're where you're talking about

287
00:11:02,059 --> 00:11:07,639
individual bytes 32 64 bit mode allows

288
00:11:05,779 --> 00:11:09,379
that address space to be 64 bits which

289
00:11:07,639 --> 00:11:12,080
is way way way bigger it's 4 billion

290
00:11:09,379 --> 00:11:16,909
times 4 billion long obviously because

291
00:11:12,080 --> 00:11:18,440
it's you know 64 bits and so that is the

292
00:11:16,909 --> 00:11:20,719
only differences all your pointers go

293
00:11:18,440 --> 00:11:22,040
from being 4 bytes long to be 8 bytes

294
00:11:20,720 --> 00:11:25,100
long right the government

295
00:11:22,039 --> 00:11:26,990
it's to 64 bits so basically as long as

296
00:11:25,100 --> 00:11:29,629
you write your code so that you're aware

297
00:11:26,990 --> 00:11:31,789
of the fact that your pointers could be

298
00:11:29,629 --> 00:11:33,289
either size which we will try to do as

299
00:11:31,789 --> 00:11:34,849
we go through our code we'll try to be

300
00:11:33,289 --> 00:11:36,379
conscientious about that but as long as

301
00:11:34,850 --> 00:11:39,290
you don't do anything that assumes it

302
00:11:36,379 --> 00:11:41,659
knows how big a pointer is you should be

303
00:11:39,289 --> 00:11:43,730
able to be fine in both 32 and 64 a bit

304
00:11:41,659 --> 00:11:46,250
now there are some caveats there if your

305
00:11:43,730 --> 00:11:48,620
code is trying to allocate giant hunks

306
00:11:46,250 --> 00:11:50,330
of memory like let's say it's trying to

307
00:11:48,620 --> 00:11:52,639
allocate a gigabyte here a gigabyte

308
00:11:50,330 --> 00:11:55,580
there and big blocks and so on it could

309
00:11:52,639 --> 00:11:57,230
quickly use up the 32-bit address space

310
00:11:55,580 --> 00:11:58,879
that it has under 32-bit windows which

311
00:11:57,230 --> 00:12:01,460
is only two gigabytes for application

312
00:11:58,879 --> 00:12:02,689
usually and so on and that would be a

313
00:12:01,460 --> 00:12:04,670
problem for you so there are some other

314
00:12:02,690 --> 00:12:06,530
concerns where 64-bit allows you do a

315
00:12:04,669 --> 00:12:07,579
lot more you can allocate huge chunks of

316
00:12:06,529 --> 00:12:09,259
memory and do all sorts of other things

317
00:12:07,580 --> 00:12:10,850
in memory map files in those spaces and

318
00:12:09,259 --> 00:12:12,350
all those sorts of things you can do in

319
00:12:10,850 --> 00:12:14,389
64 a bit without to worry too much about

320
00:12:12,350 --> 00:12:16,190
clogging up the address space but that

321
00:12:14,389 --> 00:12:17,929
is one thing additionally that you have

322
00:12:16,190 --> 00:12:19,340
to be aware of but again we are not

323
00:12:17,929 --> 00:12:21,739
going hit any of that stuff

324
00:12:19,340 --> 00:12:23,899
and so mostly we will be 64-bit and

325
00:12:21,740 --> 00:12:25,220
32-bit clean all the time and later on

326
00:12:23,899 --> 00:12:27,620
I'll be showing you how to compile to

327
00:12:25,220 --> 00:12:29,000
both so that you can ship on 32-bit

328
00:12:27,620 --> 00:12:32,299
windows if you want to even though that

329
00:12:29,000 --> 00:12:33,710
is now a relatively obscure platform I

330
00:12:32,299 --> 00:12:36,409
think it's very if you look at the steam

331
00:12:33,710 --> 00:12:40,129
hardware survey there is not much 32-bit

332
00:12:36,409 --> 00:12:45,949
windows left and in fact why not just

333
00:12:40,129 --> 00:12:49,309
look at the steam hardware survey now so

334
00:12:45,950 --> 00:12:52,670
OS version we can take a look 64 a bit

335
00:12:49,309 --> 00:12:55,429
64 a bit I don't know what is windows 7

336
00:12:52,669 --> 00:12:58,189
is that Windows 7 nan 64 a bit let's

337
00:12:55,429 --> 00:13:03,109
assume that's Windows 7 non 64-bit so 11

338
00:12:58,190 --> 00:13:07,220
percent that's 64 a bit a 4% and a point

339
00:13:03,110 --> 00:13:09,050
oh seven percent so I don't know where

340
00:13:07,220 --> 00:13:12,290
something like yeah you know I mean

341
00:13:09,049 --> 00:13:14,179
that's something like 15% maybe on the

342
00:13:12,289 --> 00:13:16,009
Steam Harbor survey I don't know I can't

343
00:13:14,179 --> 00:13:17,629
do mental math in my head I'm awful at

344
00:13:16,009 --> 00:13:21,230
it so I'm not sure you'll notice all the

345
00:13:17,629 --> 00:13:25,159
Mac is 64 a bit all the abun twos look

346
00:13:21,230 --> 00:13:27,320
like they're 64 bit so yeah so basically

347
00:13:25,159 --> 00:13:28,579
if your ship in 64-bit you pretty much

348
00:13:27,320 --> 00:13:31,220
got it covered but if you want to get

349
00:13:28,580 --> 00:13:32,960
every last thing you know you might want

350
00:13:31,220 --> 00:13:34,250
to ship a 32-bit version as well I guess

351
00:13:32,960 --> 00:13:35,750
I don't know and who knows how accurate

352
00:13:34,250 --> 00:13:37,039
the same hardware survey is but

353
00:13:35,750 --> 00:13:42,200
it's one piece of data you can look at

354
00:13:37,039 --> 00:13:44,179
to see how prevalent things are let's

355
00:13:42,200 --> 00:13:47,870
see what about using locally scoped

356
00:13:44,179 --> 00:13:49,359
static constables since their cause

357
00:13:47,870 --> 00:13:52,820
there is no threading concerns right

358
00:13:49,360 --> 00:13:56,779
well that's true but if it's Const why

359
00:13:52,820 --> 00:13:58,730
would it need to be static that doesn't

360
00:13:56,779 --> 00:14:00,500
make much sense to me a Const is a

361
00:13:58,730 --> 00:14:03,710
constant value so it wouldn't have to be

362
00:14:00,500 --> 00:14:06,679
static it can just be replaced and in

363
00:14:03,710 --> 00:14:10,990
fact static and cost conflict don't they

364
00:14:06,679 --> 00:14:12,859
can you even declare a static cost value

365
00:14:10,990 --> 00:14:15,860
yeah I didn't think so

366
00:14:12,860 --> 00:14:17,899
oh well no maybe you cannot see now I

367
00:14:15,860 --> 00:14:21,620
guess you can I've never tried that

368
00:14:17,899 --> 00:14:23,240
before I so yeah I'm sorry I don't

369
00:14:21,620 --> 00:14:26,240
really know why you declare a static

370
00:14:23,240 --> 00:14:27,919
Const maybe there's some reason you

371
00:14:26,240 --> 00:14:29,659
would want to do that but yeah I mean if

372
00:14:27,919 --> 00:14:30,769
it's Const then it doesn't really need

373
00:14:29,659 --> 00:14:32,240
to be static because you're not going to

374
00:14:30,769 --> 00:14:34,220
change it and the whole point of static

375
00:14:32,240 --> 00:14:35,899
is to reserve the changes after it goes

376
00:14:34,220 --> 00:14:37,070
out of scope so it doesn't seem to me

377
00:14:35,899 --> 00:14:39,679
like you would ever need to make

378
00:14:37,070 --> 00:14:42,920
something Const static in that way but

379
00:14:39,679 --> 00:14:44,259
it looked like it let you do it so yeah

380
00:14:42,919 --> 00:14:48,250
there's that

381
00:14:44,259 --> 00:14:56,720
can't say I just don't I don't see it

382
00:14:48,250 --> 00:14:57,740
let's see I'm compiling in vs and for

383
00:14:56,720 --> 00:14:59,629
whatever reason I'm getting a compile

384
00:14:57,740 --> 00:15:00,830
time error that tells me the

385
00:14:59,629 --> 00:15:03,409
initialization of the variables in the

386
00:15:00,830 --> 00:15:05,210
WM paint case are skipped yes you will

387
00:15:03,409 --> 00:15:08,269
get that if you did not declare the

388
00:15:05,210 --> 00:15:10,910
block so if I were to do this so I don't

389
00:15:08,269 --> 00:15:13,309
declare the block properly right now I

390
00:15:10,909 --> 00:15:15,319
will get that initialization is skipped

391
00:15:13,309 --> 00:15:17,059
right and what that's telling you is

392
00:15:15,320 --> 00:15:19,339
basically that you have declared

393
00:15:17,059 --> 00:15:21,588
variables in here but you have not

394
00:15:19,339 --> 00:15:24,320
enclosed them in a block right so

395
00:15:21,589 --> 00:15:25,760
basically if it was going to when it

396
00:15:24,320 --> 00:15:28,040
gets in when the switch statement comes

397
00:15:25,759 --> 00:15:29,710
in here right and in fact I can't tell

398
00:15:28,039 --> 00:15:32,659
you exactly what happens here all right

399
00:15:29,710 --> 00:15:34,160
let's say I come in here if I were to

400
00:15:32,659 --> 00:15:36,279
jump in the switch statement into the

401
00:15:34,159 --> 00:15:39,289
default right so I come in here

402
00:15:36,279 --> 00:15:41,539
technically because this is at the scope

403
00:15:39,289 --> 00:15:44,208
of the outside scope it's at the switch

404
00:15:41,539 --> 00:15:47,419
statement scope I could refer to paint

405
00:15:44,208 --> 00:15:49,309
in here right I could do something with

406
00:15:47,419 --> 00:15:51,708
paint like paint RC

407
00:15:49,309 --> 00:15:53,688
left equals five I can compile that now

408
00:15:51,708 --> 00:15:55,429
right that's totally valid you'll know

409
00:15:53,688 --> 00:15:57,588
it did not compile complain about that

410
00:15:55,429 --> 00:15:59,269
at all and that's bad because these

411
00:15:57,589 --> 00:16:00,740
variables they just got hopped right

412
00:15:59,269 --> 00:16:02,539
over so if they were to have an

413
00:16:00,740 --> 00:16:05,749
initialization let's say I was trying to

414
00:16:02,539 --> 00:16:07,610
initialize that like this you know this

415
00:16:05,749 --> 00:16:09,199
this would be thinking oh this will be

416
00:16:07,610 --> 00:16:10,308
initialized and I'll use it or something

417
00:16:09,198 --> 00:16:12,318
I don't even know what we going on here

418
00:16:10,308 --> 00:16:14,448
but it wouldn't because it jumped over

419
00:16:12,318 --> 00:16:16,998
that code and into here so I believe

420
00:16:14,448 --> 00:16:19,429
it's trying to just warn you of bad

421
00:16:16,999 --> 00:16:22,519
things that could happen along those

422
00:16:19,429 --> 00:16:24,409
lines hopefully that makes it sense

423
00:16:22,519 --> 00:16:25,759
so device context for example is

424
00:16:24,409 --> 00:16:27,528
something that got initialized here and

425
00:16:25,759 --> 00:16:29,269
I could go use it down here I'll just

426
00:16:27,528 --> 00:16:31,129
paint the advise context but it's like

427
00:16:29,269 --> 00:16:32,749
no you can't because it was not actually

428
00:16:31,129 --> 00:16:34,909
initialized right so you want to make

429
00:16:32,749 --> 00:16:36,709
sure that you get oops I missed one

430
00:16:34,909 --> 00:16:38,149
there you want to make sure that you put

431
00:16:36,708 --> 00:16:39,409
these little curly braces of the WM

432
00:16:38,149 --> 00:16:43,899
paint to make sure that these are

433
00:16:39,409 --> 00:16:46,159
enclosed in that basic block there you

434
00:16:43,899 --> 00:16:48,110
so get message and dispatch messages

435
00:16:46,159 --> 00:16:49,818
should also have an a suffix thank you

436
00:16:48,110 --> 00:16:51,919
for finding those I'm not sure what all

437
00:16:49,818 --> 00:16:53,990
the things are that need those so you're

438
00:16:51,919 --> 00:16:56,419
saying this one and this one are also

439
00:16:53,990 --> 00:16:58,220
Unicode and ANSI standard let's take a

440
00:16:56,419 --> 00:17:01,278
look verify that I guess you're saying

441
00:16:58,220 --> 00:17:03,139
translate message isn't okay good so

442
00:17:01,278 --> 00:17:04,429
we've got all our A's in here which is

443
00:17:03,139 --> 00:17:06,620
good to make it so that people can

444
00:17:04,429 --> 00:17:21,850
compile Unicode without having to worry

445
00:17:06,619 --> 00:17:21,849
about that let's see let's see

446
00:17:22,890 --> 00:17:27,300
your nesting quite a lot of blocks there

447
00:17:25,769 --> 00:17:32,910
will you show how to get rid of too much

448
00:17:27,299 --> 00:17:35,519
nesting I don't know why I would worry

449
00:17:32,910 --> 00:17:39,509
about nesting nesting is fine there is

450
00:17:35,519 --> 00:17:42,119
no cost to nesting really it is not an

451
00:17:39,509 --> 00:17:43,980
expensive thing it's free for the most

452
00:17:42,119 --> 00:17:46,109
part the compiler can still optimize as

453
00:17:43,980 --> 00:17:48,089
much as it wants really where those

454
00:17:46,109 --> 00:17:54,000
things are placed and how they are

455
00:17:48,089 --> 00:17:55,859
cleaned up I'm sorry I guess I don't

456
00:17:54,000 --> 00:17:57,359
have anything to say about that I don't

457
00:17:55,859 --> 00:17:59,399
think you should worry about nesting you

458
00:17:57,359 --> 00:18:02,000
can nest things as deep as you would

459
00:17:59,400 --> 00:18:02,000
like to nest them

460
00:18:02,490 --> 00:18:07,589
let's see my app doesn't respond to the

461
00:18:06,420 --> 00:18:09,840
window close button neither desires

462
00:18:07,589 --> 00:18:12,059
either desires window close is not

463
00:18:09,839 --> 00:18:13,709
responded to yet we're going to handle

464
00:18:12,059 --> 00:18:16,319
those tomorrow so you have to basically

465
00:18:13,710 --> 00:18:17,789
if you want to kill the window basically

466
00:18:16,319 --> 00:18:20,579
you just kill it in the butter shift f5

467
00:18:17,789 --> 00:18:21,950
that's how you do that so we we have not

468
00:18:20,579 --> 00:18:23,849
handled that yet we have we are not

469
00:18:21,950 --> 00:18:25,950
handling any of the windows messages

470
00:18:23,849 --> 00:18:28,589
we're not handling any of those things

471
00:18:25,950 --> 00:18:30,330
at all our window is still there but I

472
00:18:28,589 --> 00:18:32,849
guess some of them like minimize

473
00:18:30,329 --> 00:18:33,899
maximize are handled by so you can you

474
00:18:32,849 --> 00:18:37,349
can still do those because they are

475
00:18:33,900 --> 00:18:40,080
handled by the DEF window proc and that

476
00:18:37,349 --> 00:18:43,109
sort of stuff but close we intercepted

477
00:18:40,079 --> 00:18:44,849
now if you want to if you really really

478
00:18:43,109 --> 00:18:46,019
need to right now you cannot wait till

479
00:18:44,849 --> 00:18:47,459
tomorrow and you need to handle those

480
00:18:46,019 --> 00:18:48,119
what you can actually do is you can just

481
00:18:47,460 --> 00:18:50,670
get rid of them

482
00:18:48,119 --> 00:18:52,319
you can let def window proc handle those

483
00:18:50,670 --> 00:18:54,269
so if we just get rid of everything but

484
00:18:52,319 --> 00:18:57,839
our WM paint it's gone right well in

485
00:18:54,269 --> 00:19:02,579
fact I could just do this comment that

486
00:18:57,839 --> 00:19:05,699
out for now right if I actually just run

487
00:19:02,579 --> 00:19:08,069
that now it will respond to wwm close

488
00:19:05,700 --> 00:19:10,680
right makes sense

489
00:19:08,069 --> 00:19:12,629
hopefully that's that's clear enough but

490
00:19:10,680 --> 00:19:16,080
basically there's a there's a reason why

491
00:19:12,630 --> 00:19:17,370
you wouldn't want to do that the reason

492
00:19:16,079 --> 00:19:18,689
that I didn't want to get into this and

493
00:19:17,369 --> 00:19:20,429
so I really should get into it now is

494
00:19:18,690 --> 00:19:22,130
that that won't actually kill the

495
00:19:20,430 --> 00:19:25,140
application it'll just close the window

496
00:19:22,130 --> 00:19:27,030
so Eve you'd still have to do one more

497
00:19:25,140 --> 00:19:29,310
thing if you really wanted your window

498
00:19:27,029 --> 00:19:31,490
to be working what you have to do is get

499
00:19:29,309 --> 00:19:35,490
rid of these so that the def window proc

500
00:19:31,490 --> 00:19:36,839
handles it and then inside WM to destroy

501
00:19:35,490 --> 00:19:39,179
you'd have to post

502
00:19:36,839 --> 00:19:40,528
message and that's basically a call that

503
00:19:39,179 --> 00:19:42,870
posts remember I was talking about that

504
00:19:40,528 --> 00:19:44,700
WM quit that gets to post it out here

505
00:19:42,869 --> 00:19:46,649
that will post that message which will

506
00:19:44,700 --> 00:19:48,120
cause get message returned but this is

507
00:19:46,650 --> 00:19:49,950
too much stuff to just to just

508
00:19:48,119 --> 00:19:51,538
flippantly throw at you but that's

509
00:19:49,950 --> 00:19:54,600
that's it I mean that's the working

510
00:19:51,538 --> 00:19:56,879
program right there if that makes any

511
00:19:54,599 --> 00:19:58,139
sense so so but we're going to do that

512
00:19:56,880 --> 00:20:00,150
tomorrow and I'm gonna explain it a

513
00:19:58,140 --> 00:20:01,049
little more detail so you know if you're

514
00:20:00,150 --> 00:20:02,250
watching the stream right now and you're

515
00:20:01,048 --> 00:20:04,980
really antsy that's what you have to do

516
00:20:02,250 --> 00:20:07,288
but but please don't ya please hold that

517
00:20:04,980 --> 00:20:08,940
thought until tomorrow because that is

518
00:20:07,288 --> 00:20:16,589
tomorrow's really when will be when

519
00:20:08,940 --> 00:20:18,090
we'll be dealing with that is the for

520
00:20:16,589 --> 00:20:19,558
just a shortcut for have an infinite

521
00:20:18,089 --> 00:20:21,329
loop or to the compiler just insert its

522
00:20:19,558 --> 00:20:23,369
own variable for conditions yes the for

523
00:20:21,329 --> 00:20:25,439
is that is the syntax for an infinite

524
00:20:23,369 --> 00:20:28,379
loop it is the preferred syntax now for

525
00:20:25,440 --> 00:20:30,840
an infinite loop and the real the reason

526
00:20:28,380 --> 00:20:33,028
for that is used to be while one and

527
00:20:30,839 --> 00:20:35,398
what would happen is if you trains the

528
00:20:33,028 --> 00:20:36,808
warning level and you know what I'm

529
00:20:35,398 --> 00:20:39,298
gonna see if I can actually just change

530
00:20:36,808 --> 00:20:44,460
the warning level for you let me see

531
00:20:39,298 --> 00:20:47,668
here where is the warning level warning

532
00:20:44,460 --> 00:20:52,350
level somebody tell me where the warning

533
00:20:47,669 --> 00:20:54,149
level is warning level W all so if I

534
00:20:52,349 --> 00:20:57,329
change the warning level to be more

535
00:20:54,148 --> 00:21:05,099
stringent I will see if this compiler

536
00:20:57,329 --> 00:21:09,298
does it Oh Lord yes well thank you for

537
00:21:05,099 --> 00:21:12,808
all of that let me see if it actually

538
00:21:09,298 --> 00:21:15,089
weren't there it is my lord this is all

539
00:21:12,808 --> 00:21:16,980
warnings in the windows header files

540
00:21:15,089 --> 00:21:19,379
ladies and gentlemen windows his own

541
00:21:16,980 --> 00:21:21,169
compiler can't even compile its own

542
00:21:19,380 --> 00:21:23,130
header file to that warning but anyway

543
00:21:21,169 --> 00:21:25,640
conditional spread expression is not

544
00:21:23,130 --> 00:21:27,870
constant this is what you will get

545
00:21:25,640 --> 00:21:31,830
conditional expression is not constant

546
00:21:27,869 --> 00:21:33,959
and so the problem that you will have is

547
00:21:31,829 --> 00:21:36,298
you will get these warnings because you

548
00:21:33,960 --> 00:21:37,980
have put in into a while loop something

549
00:21:36,298 --> 00:21:39,480
that can never change it thinks that's a

550
00:21:37,980 --> 00:21:40,829
problem now I have no idea why I thinks

551
00:21:39,480 --> 00:21:42,659
that's a problem because it's pretty

552
00:21:40,829 --> 00:21:44,158
clear of someone typed wild one that

553
00:21:42,659 --> 00:21:45,720
they wanted to loop forever I'm not sure

554
00:21:44,159 --> 00:21:47,010
what they could have meant but for some

555
00:21:45,720 --> 00:21:49,740
reason they decided to start worrying

556
00:21:47,009 --> 00:21:51,240
about that so for is the thing

557
00:21:49,740 --> 00:21:54,120
that will get rid of that and now you

558
00:21:51,240 --> 00:21:55,920
will note that that that error no longer

559
00:21:54,119 --> 00:21:57,659
shows up after all the windows headers

560
00:21:55,920 --> 00:21:59,850
we get down here and all it's got is the

561
00:21:57,660 --> 00:22:01,350
unreferenced formal parameters there are

562
00:21:59,849 --> 00:22:02,519
these parameters here that we did not

563
00:22:01,349 --> 00:22:05,129
reference and it's just warning us about

564
00:22:02,519 --> 00:22:06,990
those so so we're good to go I'm going

565
00:22:05,130 --> 00:22:08,370
to turn off W all for now we may turn on

566
00:22:06,990 --> 00:22:09,420
some more warnings the future probably

567
00:22:08,369 --> 00:22:12,089
not those because you don't want to see

568
00:22:09,420 --> 00:22:13,620
the windows headers ruin us all the time

569
00:22:12,089 --> 00:22:14,579
but maybe we will even do that later

570
00:22:13,619 --> 00:22:15,959
because there's few tricks we can do to

571
00:22:14,579 --> 00:22:17,939
get around that but point being that is

572
00:22:15,960 --> 00:22:23,130
what before : colon semicolon semicolon

573
00:22:17,940 --> 00:22:24,240
is let's see I said of printing to

574
00:22:23,130 --> 00:22:25,260
enclose a tenant can we handle it so we

575
00:22:24,240 --> 00:22:30,179
can close the window tomorrow night

576
00:22:25,259 --> 00:22:31,799
tomorrow night can you explain one more

577
00:22:30,179 --> 00:22:34,590
time the window Handler and the message

578
00:22:31,799 --> 00:22:36,859
is infinite loop absolutely I can so

579
00:22:34,589 --> 00:22:38,819
here's what happens we open a window

580
00:22:36,859 --> 00:22:41,549
windows creates that window it returns

581
00:22:38,819 --> 00:22:44,069
control to us we see if we got it we got

582
00:22:41,549 --> 00:22:45,839
it we enter an infinite loop where we

583
00:22:44,069 --> 00:22:47,579
asked Windows to give us the next

584
00:22:45,839 --> 00:22:50,189
message in our message queue which it

585
00:22:47,579 --> 00:22:52,439
sticks into here right this is basically

586
00:22:50,190 --> 00:22:54,990
a place where it gets written and you

587
00:22:52,440 --> 00:22:58,950
can go look that up it's an MSG right

588
00:22:54,990 --> 00:23:00,960
msg and you can see inside the msg what

589
00:22:58,950 --> 00:23:02,819
is actually contained there so we go in

590
00:23:00,960 --> 00:23:04,710
here you can see it's got the window

591
00:23:02,819 --> 00:23:06,629
that the message pertains to it's got

592
00:23:04,710 --> 00:23:08,160
that message code the WM paint or

593
00:23:06,630 --> 00:23:09,540
whatever it's got the two parameters to

594
00:23:08,160 --> 00:23:11,340
the message which we haven't looked at

595
00:23:09,539 --> 00:23:13,170
yet and we will look at tomorrow it's

596
00:23:11,339 --> 00:23:15,449
got when it happened like a timestamp

597
00:23:13,170 --> 00:23:18,750
and it's got a point which is basically

598
00:23:15,450 --> 00:23:20,279
where usually where the mouse was yeah

599
00:23:18,750 --> 00:23:21,210
the cursor position of screen parts

600
00:23:20,279 --> 00:23:22,649
where the mouse was that's where the

601
00:23:21,210 --> 00:23:24,779
mouse was with him when the message

602
00:23:22,650 --> 00:23:26,130
occurred now that's meaningless for most

603
00:23:24,779 --> 00:23:28,470
messages because most messages don't

604
00:23:26,130 --> 00:23:29,790
pertain to the mouse but you know legacy

605
00:23:28,470 --> 00:23:30,569
reasons that was included in a message

606
00:23:29,789 --> 00:23:33,750
so there it is

607
00:23:30,569 --> 00:23:36,299
it's going to take that sort of message

608
00:23:33,750 --> 00:23:38,039
that we got Gus stick the data in here

609
00:23:36,299 --> 00:23:40,470
and then we're going to check to see

610
00:23:38,039 --> 00:23:41,879
whether it is a whether it was able to

611
00:23:40,470 --> 00:23:43,410
get a new message for us or whether it

612
00:23:41,880 --> 00:23:44,880
had WM quit or an error or something

613
00:23:43,410 --> 00:23:46,620
assuming that it didn't which means the

614
00:23:44,880 --> 00:23:48,030
return code will be greater than zero we

615
00:23:46,619 --> 00:23:49,949
are going to ask Windows to basically

616
00:23:48,029 --> 00:23:51,420
translate that message in place for us

617
00:23:49,950 --> 00:23:54,090
so it's going to windows is going to go

618
00:23:51,420 --> 00:23:55,890
process the data in there to basically

619
00:23:54,089 --> 00:23:57,808
turn it into something slightly

620
00:23:55,890 --> 00:23:58,950
different and it's basically just for

621
00:23:57,808 --> 00:24:00,149
processing keyboard messages and we'll

622
00:23:58,950 --> 00:24:02,460
talk about that when we actually go to

623
00:24:00,150 --> 00:24:03,538
handle keyboard input we'll come back to

624
00:24:02,460 --> 00:24:05,009
that and say what that does but

625
00:24:03,538 --> 00:24:06,358
all that does is translate those key

626
00:24:05,009 --> 00:24:08,210
part messages then we're going to call

627
00:24:06,358 --> 00:24:11,579
dispatched message and what dispatch met

628
00:24:08,210 --> 00:24:14,399
dispatch message does is it takes the

629
00:24:11,579 --> 00:24:15,989
message and actually sends it to the

630
00:24:14,398 --> 00:24:17,368
main window callback now we could call

631
00:24:15,989 --> 00:24:19,350
that window call back ourselves with the

632
00:24:17,368 --> 00:24:21,058
message but there's reasons why we don't

633
00:24:19,349 --> 00:24:23,158
want to do that because windows wants to

634
00:24:21,058 --> 00:24:25,108
be the person doing the dispatching for

635
00:24:23,159 --> 00:24:27,028
a number of reasons it that's the way it

636
00:24:25,108 --> 00:24:28,829
expects the control flow to be so it's

637
00:24:27,028 --> 00:24:31,048
best if you don't try to feel the

638
00:24:28,829 --> 00:24:33,089
message yourself once we dispatch that

639
00:24:31,048 --> 00:24:34,918
message we will just come back to the

640
00:24:33,089 --> 00:24:36,089
top of the loop and get the next message

641
00:24:34,919 --> 00:24:38,519
so we're essentially sitting in an

642
00:24:36,089 --> 00:24:40,168
infinite loop waiting on a cue and met

643
00:24:38,519 --> 00:24:41,638
Windows is stuffing those messages in

644
00:24:40,169 --> 00:24:43,979
the queue and we're just pulling them

645
00:24:41,638 --> 00:24:46,258
off we pull one off we process it we

646
00:24:43,979 --> 00:24:48,749
pull one off we process it we go to get

647
00:24:46,259 --> 00:24:50,759
one and if there isn't one there windows

648
00:24:48,749 --> 00:24:52,618
will basically stall our process that's

649
00:24:50,759 --> 00:24:55,409
what get message does it will stall our

650
00:24:52,618 --> 00:24:57,839
process until there is a message so

651
00:24:55,409 --> 00:24:59,639
we'll just wait when there is a message

652
00:24:57,839 --> 00:25:00,898
it'll distil give it back to us will

653
00:24:59,638 --> 00:25:02,008
dispatch the message so it's basically

654
00:25:00,898 --> 00:25:04,558
just waiting for message and getting

655
00:25:02,009 --> 00:25:06,628
them now we will change this when we

656
00:25:04,558 --> 00:25:08,398
actually go to write our games animation

657
00:25:06,628 --> 00:25:10,138
we will change from using get message

658
00:25:08,398 --> 00:25:11,608
using a thing called peak message so we

659
00:25:10,138 --> 00:25:13,019
can just look to see if there's anything

660
00:25:11,608 --> 00:25:14,999
in the queue and even if there's nothing

661
00:25:13,019 --> 00:25:16,558
in the queue we will still do stuff

662
00:25:14,999 --> 00:25:18,720
because we are running our game and our

663
00:25:16,558 --> 00:25:20,278
game is always running right so get

664
00:25:18,720 --> 00:25:22,710
message just temporary so what I could

665
00:25:20,278 --> 00:25:24,690
show you stuff it's the simpler way but

666
00:25:22,710 --> 00:25:25,769
we will eventually turn into a real-time

667
00:25:24,690 --> 00:25:27,119
game loop where we're calling peak

668
00:25:25,769 --> 00:25:28,739
message so we're going to we're going to

669
00:25:27,118 --> 00:25:30,118
upgrade in some sense to peak message

670
00:25:28,739 --> 00:25:31,108
over time but we're starting to get

671
00:25:30,118 --> 00:25:33,569
message because we don't need that

672
00:25:31,108 --> 00:25:34,858
flexibility just yet if you want to see

673
00:25:33,569 --> 00:25:37,408
this in action you can do it yourself

674
00:25:34,858 --> 00:25:39,329
all you have to do is actually come in

675
00:25:37,409 --> 00:25:43,139
here and watch it happen in the debugger

676
00:25:39,329 --> 00:25:44,638
here we go I jump in here I create my

677
00:25:43,138 --> 00:25:45,808
window you can see the window flash for

678
00:25:44,638 --> 00:25:47,488
a second on your machine the twitch

679
00:25:45,808 --> 00:25:48,749
stream probably optimized that out we

680
00:25:47,489 --> 00:25:50,069
are going to call get message and we're

681
00:25:48,749 --> 00:25:52,288
going to receive a message you can go

682
00:25:50,069 --> 00:25:54,028
look at the contents of that message

683
00:25:52,288 --> 00:25:55,739
type it into the watch window there it

684
00:25:54,028 --> 00:25:58,108
is this is the window that it's targeted

685
00:25:55,739 --> 00:26:00,090
to hey we only have one window so I bet

686
00:25:58,108 --> 00:26:01,858
that's the same window and if you look

687
00:26:00,089 --> 00:26:03,358
they are here is our window handle that

688
00:26:01,858 --> 00:26:05,158
came back from create window e.x

689
00:26:03,358 --> 00:26:07,019
here's the window handle that windows

690
00:26:05,159 --> 00:26:08,999
says this message is destined for that's

691
00:26:07,019 --> 00:26:10,679
exactly what we'd expect here is the

692
00:26:08,999 --> 00:26:13,348
message right there that's the message

693
00:26:10,679 --> 00:26:14,849
that's going to get dispatched 49 401 I

694
00:26:13,348 --> 00:26:16,908
don't know what message that is maybe

695
00:26:14,848 --> 00:26:18,378
it's WM create like

696
00:26:16,909 --> 00:26:20,869
actually see what the value of WM create

697
00:26:18,378 --> 00:26:22,638
is alright well you know what there's

698
00:26:20,868 --> 00:26:24,709
another way we can do that let's go

699
00:26:22,638 --> 00:26:26,928
ahead and look into the include

700
00:26:24,710 --> 00:26:28,278
directory this is something that I was

701
00:26:26,929 --> 00:26:30,499
not going to talk about quite yet but

702
00:26:28,278 --> 00:26:30,858
you know what we can go ahead and do

703
00:26:30,499 --> 00:26:32,298
that

704
00:26:30,858 --> 00:26:35,358
so we're going to go to Microsoft Visual

705
00:26:32,298 --> 00:26:37,579
Studio directory here we are going to go

706
00:26:35,358 --> 00:26:40,220
into the vc directory into the include

707
00:26:37,579 --> 00:26:44,538
directory and i am going to search it

708
00:26:40,220 --> 00:26:48,710
for WM create or at least I'm going to

709
00:26:44,538 --> 00:26:51,019
try to oh yeah yes love this bug this is

710
00:26:48,710 --> 00:26:53,119
a this is an Emacs bug in later versions

711
00:26:51,019 --> 00:26:54,888
of Emacs we'll also talk about this

712
00:26:53,118 --> 00:26:57,888
later when I actually have to do a grep

713
00:26:54,888 --> 00:26:59,778
on the actual stream I should probably

714
00:26:57,888 --> 00:27:02,418
fix that in the Emacs compact I'm going

715
00:26:59,778 --> 00:27:03,888
to right to fix that in the Emacs file

716
00:27:02,419 --> 00:27:05,599
so you guys don't have to deal with it

717
00:27:03,888 --> 00:27:09,738
as well there's an Emacs bug basically

718
00:27:05,598 --> 00:27:11,148
fix findstr Emacs you'll take care of

719
00:27:09,739 --> 00:27:14,179
that for you you don't need to worry

720
00:27:11,148 --> 00:27:16,518
about Emacs let me handle Emacs we are

721
00:27:14,179 --> 00:27:18,619
going to search for WM create and we are

722
00:27:16,519 --> 00:27:21,019
going to find out where it actually is

723
00:27:18,618 --> 00:27:23,209
is it in here is there a platform I've

724
00:27:21,019 --> 00:27:25,729
used your 32 no I don't okay where is

725
00:27:23,210 --> 00:27:30,639
the platform SDK ladies and gentlemen

726
00:27:25,729 --> 00:27:33,470
where is the platform SDK let's find out

727
00:27:30,638 --> 00:27:37,189
open documents can I actually get

728
00:27:33,470 --> 00:27:40,069
Windows H where is it it's in Windows

729
00:27:37,190 --> 00:27:42,769
kits these things jump around so

730
00:27:40,069 --> 00:27:47,288
frequently man I don't even know Windows

731
00:27:42,769 --> 00:27:53,089
kits 8.1 I guess where is it

732
00:27:47,288 --> 00:27:55,749
8.1 include include and it is just in

733
00:27:53,089 --> 00:27:59,988
the main one yes um

734
00:27:55,749 --> 00:28:01,669
Windows H there we go ok I am now in the

735
00:27:59,989 --> 00:28:05,210
right directory I will search for WM

736
00:28:01,669 --> 00:28:07,460
create and I expect to find it although

737
00:28:05,210 --> 00:28:10,369
it's going to have to go through a ton

738
00:28:07,460 --> 00:28:13,399
of these include files here to find it

739
00:28:10,368 --> 00:28:15,408
there it is it has found it I'm just

740
00:28:13,398 --> 00:28:17,868
searching the drive for it and it is o

741
00:28:15,409 --> 00:28:19,879
x1 so that is not it it is what is the

742
00:28:17,868 --> 00:28:22,819
message that we actually received it is

743
00:28:19,878 --> 00:28:26,799
c0 f9 let's see if we can find that once

744
00:28:22,819 --> 00:28:31,639
c0 f9 rep c0 f

745
00:28:26,799 --> 00:28:35,119
is that anywhere let's see oh my lord

746
00:28:31,640 --> 00:28:36,740
that doesn't look right at all to me so

747
00:28:35,119 --> 00:28:40,299
I don't know what this message is what

748
00:28:36,740 --> 00:28:43,839
is this actual message I do not know I

749
00:28:40,299 --> 00:28:46,549
do not know what that message is at all

750
00:28:43,839 --> 00:28:53,809
well I suppose it could be defined in

751
00:28:46,549 --> 00:28:56,000
it's 49 401 49 401 I would like to find

752
00:28:53,809 --> 00:28:57,409
which message this actually is but

753
00:28:56,000 --> 00:28:58,819
windows sends a lot of messages that we

754
00:28:57,410 --> 00:28:59,900
won't understand so it's not really a

755
00:28:58,819 --> 00:29:01,369
problem that it does this will be

756
00:28:59,900 --> 00:29:02,420
handled by deaf window proc but I don't

757
00:29:01,369 --> 00:29:05,750
know what that window actually is

758
00:29:02,420 --> 00:29:07,279
interesting well unfortunately I guess

759
00:29:05,750 --> 00:29:08,539
you can't actually see what window that

760
00:29:07,279 --> 00:29:09,710
what message that actually is we'll have

761
00:29:08,539 --> 00:29:11,690
to look and see if maybe we can figure

762
00:29:09,710 --> 00:29:12,950
out what that message is later what we

763
00:29:11,690 --> 00:29:14,990
can do here though is we can continue

764
00:29:12,950 --> 00:29:16,370
this and then I'll keep pumping this

765
00:29:14,990 --> 00:29:18,410
till we find a message we actually can

766
00:29:16,369 --> 00:29:20,059
that we actually expect to get okay so

767
00:29:18,410 --> 00:29:21,170
translate message will operate on this

768
00:29:20,059 --> 00:29:22,339
message if there's something to do but

769
00:29:21,170 --> 00:29:24,170
there wasn't to do and then this fast

770
00:29:22,339 --> 00:29:27,019
message right if I actually set a

771
00:29:24,170 --> 00:29:28,730
breakpoint up here in in this you will

772
00:29:27,019 --> 00:29:30,740
actually see that when I step over this

773
00:29:28,730 --> 00:29:32,870
to dispatch message we end up in our

774
00:29:30,740 --> 00:29:35,539
window callback so here's the call stack

775
00:29:32,869 --> 00:29:37,429
you can see us we called we call

776
00:29:35,539 --> 00:29:40,700
dispatch message right with the message

777
00:29:37,430 --> 00:29:43,430
it called through user 32 DLL twice user

778
00:29:40,700 --> 00:29:45,559
32 DLL is the user interface portion of

779
00:29:43,430 --> 00:29:47,060
the code in Windows it did whatever it's

780
00:29:45,559 --> 00:29:48,769
going to do to do just two messages

781
00:29:47,059 --> 00:29:50,119
match and then it got back to us when it

782
00:29:48,769 --> 00:29:53,389
was ready for us to feel the message

783
00:29:50,119 --> 00:29:54,859
right makes sense and so let's take a

784
00:29:53,390 --> 00:29:56,990
look at what that message actually was

785
00:29:54,859 --> 00:29:58,459
49 401 we don't know that one so we're

786
00:29:56,990 --> 00:30:00,589
just gonna call def window a proc right

787
00:29:58,460 --> 00:30:01,850
and come back out we pop out this is

788
00:30:00,589 --> 00:30:03,709
Windows code right here

789
00:30:01,849 --> 00:30:05,329
assembly language we don't know what

790
00:30:03,710 --> 00:30:07,250
it's doing it's doing some window stuff

791
00:30:05,329 --> 00:30:08,240
doing some more windows stuff that we

792
00:30:07,250 --> 00:30:09,920
don't have the source code to we

793
00:30:08,240 --> 00:30:12,740
returned out once we returned out twice

794
00:30:09,920 --> 00:30:15,350
and here we are back in our source code

795
00:30:12,740 --> 00:30:18,230
right go through the loop again get the

796
00:30:15,349 --> 00:30:21,619
next message out oh and here's this is

797
00:30:18,230 --> 00:30:23,960
also awesome so you may ask actually why

798
00:30:21,619 --> 00:30:25,789
we had to register this window class

799
00:30:23,960 --> 00:30:27,920
right why do we have to register the

800
00:30:25,789 --> 00:30:30,289
window class at all to give it this

801
00:30:27,920 --> 00:30:31,430
callback when we are the people fielding

802
00:30:30,289 --> 00:30:34,099
the message loops well it's because

803
00:30:31,430 --> 00:30:36,350
windows message loops are all kinds of

804
00:30:34,099 --> 00:30:38,089
messed up even though it looks like we

805
00:30:36,349 --> 00:30:39,529
are handling the messages here by going

806
00:30:38,089 --> 00:30:40,269
translate message dispatch message

807
00:30:39,529 --> 00:30:42,519
window

808
00:30:40,269 --> 00:30:46,329
also reserves the right to basically

809
00:30:42,519 --> 00:30:49,329
just flat out call our window with some

810
00:30:46,329 --> 00:30:51,069
other out of balance messages basically

811
00:30:49,329 --> 00:30:53,559
anytime it thinks that it needs to

812
00:30:51,069 --> 00:30:55,809
handle them so this is where most of our

813
00:30:53,559 --> 00:30:57,909
Windows message will be dispatched but

814
00:30:55,809 --> 00:31:00,669
like when we you saw when that happened

815
00:30:57,910 --> 00:31:02,470
right I step over get message well any

816
00:31:00,670 --> 00:31:04,539
time we basically yield to the system

817
00:31:02,470 --> 00:31:06,370
when we call in to the system it might

818
00:31:04,539 --> 00:31:08,230
cost back right there and in fact I can

819
00:31:06,369 --> 00:31:10,419
prove that to you if you go here you can

820
00:31:08,230 --> 00:31:12,490
see this is where we were this is where

821
00:31:10,420 --> 00:31:14,800
I stepped and it went through user 32

822
00:31:12,490 --> 00:31:17,200
DLL it went through ntdll back through

823
00:31:14,799 --> 00:31:18,909
user 32 dll called called called cult

824
00:31:17,200 --> 00:31:21,250
and eventually called us back so we

825
00:31:18,910 --> 00:31:22,930
wanted us to do something here that was

826
00:31:21,250 --> 00:31:24,880
right immediate it didn't want to wait

827
00:31:22,930 --> 00:31:26,289
to go through the translate message it

828
00:31:24,880 --> 00:31:29,980
had something it needs to do immediately

829
00:31:26,289 --> 00:31:32,589
message 127 what is message 127 that's

830
00:31:29,980 --> 00:31:34,000
7f can we find that one ladies and

831
00:31:32,589 --> 00:31:35,829
gentlemen and I don't know if we can

832
00:31:34,000 --> 00:31:39,539
zero zero 7f we didn't have much luck

833
00:31:35,829 --> 00:31:43,240
before let's take a look get Ikon

834
00:31:39,539 --> 00:31:45,730
there you go you wanted to know what the

835
00:31:43,240 --> 00:31:47,529
icon was for our window and it thought

836
00:31:45,730 --> 00:31:49,329
that was so important that it had to

837
00:31:47,529 --> 00:31:51,039
call outside of the disk mess measures

838
00:31:49,329 --> 00:31:53,049
ladies and gentlemen there you go what

839
00:31:51,039 --> 00:31:55,480
can I say windows it makes very little

840
00:31:53,049 --> 00:31:57,279
sense it a Grove eights you but is the

841
00:31:55,480 --> 00:31:59,200
platform you have to ship on I'm going

842
00:31:57,279 --> 00:32:00,849
to go ahead and pop our stock back out

843
00:31:59,200 --> 00:32:02,170
here in fact I'm not even going to

844
00:32:00,849 --> 00:32:04,029
because man that's calling all sorts of

845
00:32:02,170 --> 00:32:06,009
stuff outside of our trans our Translate

846
00:32:04,029 --> 00:32:08,349
message loop so I'm going to go out here

847
00:32:06,009 --> 00:32:10,480
and I'm going to wait for it to actually

848
00:32:08,349 --> 00:32:12,279
get out of that get message and here we

849
00:32:10,480 --> 00:32:14,200
are so now we've pulled off

850
00:32:12,279 --> 00:32:16,000
it's called us multiple times with

851
00:32:14,200 --> 00:32:18,670
messages we did not get to feel this way

852
00:32:16,000 --> 00:32:19,869
so it just flat-out cold called us and

853
00:32:18,670 --> 00:32:23,410
we are popped out here with another

854
00:32:19,869 --> 00:32:25,569
message for for us to translate and

855
00:32:23,410 --> 00:32:28,540
dispatch it so now I can actually again

856
00:32:25,569 --> 00:32:30,730
set it here jump in and you can see us

857
00:32:28,539 --> 00:32:32,559
fielding that message right so so there

858
00:32:30,730 --> 00:32:34,599
you go okay

859
00:32:32,559 --> 00:32:36,609
that's basically how it works there's

860
00:32:34,599 --> 00:32:38,709
not that much to it but basically all I

861
00:32:36,609 --> 00:32:39,639
can say is yeah it was I'm glad you

862
00:32:38,710 --> 00:32:41,019
asked that question because we got to

863
00:32:39,640 --> 00:32:42,880
see that in action and I never really

864
00:32:41,019 --> 00:32:44,529
mentioned that fact in the mainstream

865
00:32:42,880 --> 00:32:46,300
that the whole reason you have to

866
00:32:44,529 --> 00:32:48,819
register the window class and give it a

867
00:32:46,299 --> 00:32:50,919
window callback instead of just handling

868
00:32:48,819 --> 00:32:52,149
it here and using your own callback or

869
00:32:50,920 --> 00:32:54,060
telling it what the callback is or

870
00:32:52,150 --> 00:32:56,310
something like that is

871
00:32:54,059 --> 00:32:58,139
because every window that's created has

872
00:32:56,309 --> 00:33:01,919
to basically have a callback known all

873
00:32:58,140 --> 00:33:04,230
the time because it basically has to it

874
00:33:01,920 --> 00:33:06,360
has to be able to call you at any time

875
00:33:04,230 --> 00:33:07,380
it can just flat-out call you it doesn't

876
00:33:06,359 --> 00:33:08,909
have to go through this because you

877
00:33:07,380 --> 00:33:11,610
could imagine if we were more sanely

878
00:33:08,910 --> 00:33:12,840
designed and every message actually went

879
00:33:11,609 --> 00:33:14,099
through this message queue instead of

880
00:33:12,839 --> 00:33:16,439
getting short-circuited like that like

881
00:33:14,099 --> 00:33:17,699
it did you could imagine not needing a

882
00:33:16,440 --> 00:33:19,259
dispatch because it would just say

883
00:33:17,700 --> 00:33:20,910
here's a message and here's the window

884
00:33:19,259 --> 00:33:22,799
you figure out how you want to handle

885
00:33:20,910 --> 00:33:24,810
that and you wouldn't even need to it

886
00:33:22,799 --> 00:33:26,460
wouldn't need to define this callback

887
00:33:24,809 --> 00:33:27,509
because you would always be the person

888
00:33:26,460 --> 00:33:29,519
calling it and that would be preferable

889
00:33:27,509 --> 00:33:30,960
in my opinion but they did it this other

890
00:33:29,519 --> 00:33:32,879
way so sometimes you're actually

891
00:33:30,960 --> 00:33:34,410
fielding messages in in the queue like

892
00:33:32,880 --> 00:33:36,150
you expect but other times you may call

893
00:33:34,410 --> 00:33:37,200
a Windows function it doesn't just have

894
00:33:36,150 --> 00:33:39,570
to be get message it could be any

895
00:33:37,200 --> 00:33:40,890
function really it decides it needs to

896
00:33:39,569 --> 00:33:42,329
call your window back for something it

897
00:33:40,890 --> 00:33:43,530
just does that's just something it's

898
00:33:42,329 --> 00:33:44,189
going to do and there's nothing to do

899
00:33:43,529 --> 00:33:46,740
about it

900
00:33:44,190 --> 00:33:47,250
so that's how that works we are out of

901
00:33:46,740 --> 00:33:51,180
time

902
00:33:47,250 --> 00:33:54,230
it is 9:36 we will have to pick up

903
00:33:51,180 --> 00:33:57,990
anything that didn't get answered today

904
00:33:54,230 --> 00:33:59,779
so thank you very much everyone for for

905
00:33:57,990 --> 00:34:02,099
joining us there's a couple questions

906
00:33:59,779 --> 00:34:04,500
using output D but string a to print a

907
00:34:02,099 --> 00:34:07,409
string how do you print a variable when

908
00:34:04,500 --> 00:34:09,000
and how often with WM paint be sent can

909
00:34:07,410 --> 00:34:10,800
you show how to look at window messages

910
00:34:09,000 --> 00:34:13,710
winds by these are things we will be

911
00:34:10,800 --> 00:34:16,680
doing so just hold off till future

912
00:34:13,710 --> 00:34:17,849
strings and we will show all of those

913
00:34:16,679 --> 00:34:20,099
things because they are all good

914
00:34:17,849 --> 00:34:23,400
questions and they're all good things to

915
00:34:20,099 --> 00:34:26,159
cover so we will thank you very much

916
00:34:23,400 --> 00:34:28,980
everyone for joining us we will be back

917
00:34:26,159 --> 00:34:30,750
here tomorrow at 8 p.m. PST for day

918
00:34:28,980 --> 00:34:33,869
three of coding when we will actually

919
00:34:30,750 --> 00:34:36,360
draw in a very efficient way or at least

920
00:34:33,869 --> 00:34:38,609
a much more efficient way to our windows

921
00:34:36,360 --> 00:34:41,370
so we can actually start putting game

922
00:34:38,610 --> 00:34:43,170
images up there which is what we want to

923
00:34:41,369 --> 00:34:44,819
do rather than having to use windows

924
00:34:43,170 --> 00:34:46,050
calls to do stuff because we want to

925
00:34:44,820 --> 00:34:48,630
write our own renderer and we need a way

926
00:34:46,050 --> 00:34:49,890
to get the output of our renderer into a

927
00:34:48,630 --> 00:34:51,480
window that's we're going to do tomorrow

928
00:34:49,889 --> 00:34:53,940
so thank you very much everyone for

929
00:34:51,480 --> 00:34:55,860
joining us I hope you were able to

930
00:34:53,940 --> 00:34:57,539
follow along this is it's a fast-paced

931
00:34:55,860 --> 00:34:58,829
thing because you saw we only had one

932
00:34:57,539 --> 00:35:00,599
thing to do today but I really had to

933
00:34:58,829 --> 00:35:01,860
speed through to get to get through it

934
00:35:00,599 --> 00:35:03,719
and that's the way it's going to have to

935
00:35:01,860 --> 00:35:05,789
be I appreciate everyone hanging with me

936
00:35:03,719 --> 00:35:07,449
thank you for asking questions thank you

937
00:35:05,789 --> 00:35:08,679
for trying this at home and asking

938
00:35:07,449 --> 00:35:10,299
since the people who asked it because

939
00:35:08,679 --> 00:35:11,649
they were saying they couldn't they had

940
00:35:10,300 --> 00:35:12,820
the warnings about the skipping basic

941
00:35:11,650 --> 00:35:15,190
block that's exactly what you should be

942
00:35:12,820 --> 00:35:17,289
doing trying to stuff on your own seeing

943
00:35:15,190 --> 00:35:19,900
what works exploring reading that MSDN

944
00:35:17,289 --> 00:35:22,389
documentation experimenting that is how

945
00:35:19,900 --> 00:35:25,389
you will get good I am giving you the

946
00:35:22,389 --> 00:35:27,460
backbone to sort of see how this is done

947
00:35:25,389 --> 00:35:28,900
but to really build that understanding

948
00:35:27,460 --> 00:35:30,639
you've got to try it yourself you've got

949
00:35:28,900 --> 00:35:32,349
to practice and that is the way that you

950
00:35:30,639 --> 00:35:34,299
will get good so please keep on doing

951
00:35:32,349 --> 00:35:38,010
that thank you very much for joining us

952
00:35:34,300 --> 00:35:38,010
and I will see you here tomorrow night

