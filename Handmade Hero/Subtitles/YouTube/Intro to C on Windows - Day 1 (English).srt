1
00:00:02,303 --> 00:00:02,815
Okay

2
00:00:03,584 --> 00:00:04,863
Assuming this is working

3
00:00:05,376 --> 00:00:08,704
I would love to welcome everyone to this

4
00:00:09,471 --> 00:00:11,263
Pestering basically what I wanted to do

5
00:00:12,032 --> 00:00:13,567
Is I am planning on

6
00:00:14,080 --> 00:00:16,128
I'm starting a project on Monday

7
00:00:16,640 --> 00:00:19,968
Which is probably very ill-advised and I appreciate that but I'm

8
00:00:20,224 --> 00:00:21,504
Planning to start a project

9
00:00:21,760 --> 00:00:24,320
Where I am going to show how to code

10
00:00:24,576 --> 00:00:26,624
A complete game in C

11
00:00:26,879 --> 00:00:29,183
Which is a pretty big undertaking

12
00:00:29,440 --> 00:00:29,952
And

13
00:00:30,207 --> 00:00:36,351
I thought about it whether it was a good idea for a while and I wasn't sure but I finally decided that I really wanted to do it and I always want

14
00:00:36,607 --> 00:00:38,655
I need the directions to have like a documentation

15
00:00:39,167 --> 00:00:40,704
But you can basically

16
00:00:40,960 --> 00:00:42,240
Or documentation say

17
00:00:42,496 --> 00:00:46,591
Like a live recording of like cures everything that we did to make

18
00:00:46,847 --> 00:00:49,408
An actual games you can play from scratch

19
00:00:50,944 --> 00:00:57,088
And so I don't know how that'll go nobody make care about that at all until the game is pretty far along or something like that

20
00:00:57,344 --> 00:00:58,880
That but I really really want to do it

21
00:00:59,136 --> 00:01:01,184
And so I'm going to be starting that

22
00:01:01,439 --> 00:01:07,584
On Monday but before then I wanted to practice the streaming to make sure that all of the stuff is going well because

23
00:01:07,840 --> 00:01:11,680
Computers of course as you know are oh so reliable these days

24
00:01:12,191 --> 00:01:15,007
And so I kind of have a feeling that there will be plenty of

25
00:01:15,519 --> 00:01:17,055
So what I thought I do

26
00:01:17,311 --> 00:01:18,591
Is spend a couple days

27
00:01:18,847 --> 00:01:22,176
Doing test dreams where I will at least do something useful

28
00:01:22,432 --> 00:01:26,272
Which is explain how to do C programming on a computer

29
00:01:26,784 --> 00:01:27,552
Because

30
00:01:28,063 --> 00:01:28,575
I mean

31
00:01:28,831 --> 00:01:30,879
Let's face it lots of people don't know how to do that

32
00:01:31,135 --> 00:01:32,671
And if anyone wants

33
00:01:32,927 --> 00:01:34,975
What's to follow along as I program the game

34
00:01:35,743 --> 00:01:37,792
NC and go through all the explanations

35
00:01:38,048 --> 00:01:40,096
Of why I'm reading the game code that way

36
00:01:40,352 --> 00:01:46,496
I won't be wanting to stop and explain little things like what is the question mark operator or

37
00:01:46,751 --> 00:01:47,263
How does

38
00:01:47,519 --> 00:01:50,847
Is the staff work or something like that unless that's exactly relevant topic

39
00:01:51,103 --> 00:01:53,152
At the time so I was hoping to basically do

40
00:01:53,664 --> 00:01:57,248
A couple streams that I could archived and just put up on the website that's like

41
00:01:57,760 --> 00:02:02,112
If you don't know how to pronounce it all if you literally have no idea but would like to watch the series

42
00:02:02,367 --> 00:02:05,183
Go watch these couple videos that'll get you up to speed

43
00:02:05,439 --> 00:02:11,584
I'm just what's going on so you can start to follow and granted you'll still have to do a bunch of work to practice and learn how to program at Aldi

44
00:02:11,840 --> 00:02:13,120
Because if you don't know any programming

45
00:02:13,888 --> 00:02:18,496
You're not going to be able to just jump right in but at least I'll get you started and then you can presumably

46
00:02:18,752 --> 00:02:20,800
At least start to follow the videos and understand

47
00:02:21,056 --> 00:02:22,080
You know the majority

48
00:02:22,336 --> 00:02:22,848
So

49
00:02:23,360 --> 00:02:24,896
What this video is going to be

50
00:02:25,151 --> 00:02:26,687
It was going to be literally showing

51
00:02:27,199 --> 00:02:29,247
How I would start

52
00:02:29,503 --> 00:02:32,831
To program Siana machine and how to do some of the basics

53
00:02:33,087 --> 00:02:33,599
I forgot

54
00:02:34,111 --> 00:02:36,159
So this is not a Windows machine cuz that's the most common

55
00:02:36,671 --> 00:02:37,951
Programming machine that people are going

56
00:02:38,207 --> 00:02:38,719
And have

57
00:02:38,975 --> 00:02:39,487
And

58
00:02:39,743 --> 00:02:44,096
The thing that you have to do right off the bat which is actually kind of annoying and you don't have to do this

59
00:02:44,352 --> 00:02:48,192
If you're on Linux but the thing you have to do on a Windows machine issue has to find

60
00:02:48,448 --> 00:02:49,216
A c compiler

61
00:02:49,728 --> 00:02:51,520
I'm currently you don't have a lot of option

62
00:02:51,776 --> 00:02:54,592
Even though llvm which is, one other platforms

63
00:02:54,848 --> 00:02:55,360
Is

64
00:02:55,872 --> 00:03:01,760
Sort of able to build seen out it's not able to actually do the entire process so what you have to do

65
00:03:02,015 --> 00:03:03,551
Is you have to go

66
00:03:03,807 --> 00:03:06,367
Get something called Microsoft Visual Studio X

67
00:03:07,647 --> 00:03:10,975
And this is basically a free version

68
00:03:11,743 --> 00:03:14,304
Of their you know thing that they're there

69
00:03:14,560 --> 00:03:15,072
Professional

70
00:03:15,584 --> 00:03:18,656
C programming environment and you'll see when you get to this page

71
00:03:18,912 --> 00:03:21,216
They want to give you a lot of other stuff

72
00:03:21,472 --> 00:03:23,008
But you really don't want

73
00:03:23,264 --> 00:03:26,080
When you look on here you can see stuff like oh.

74
00:03:26,336 --> 00:03:27,872
Team Foundation server

75
00:03:28,383 --> 00:03:28,895
And

76
00:03:29,151 --> 00:03:35,295
Since you're just someone is trying to program C at home you probably don't have a team or if you do they probably don't

77
00:03:35,551 --> 00:03:39,135
Don't have a foundation or don't want their Foundation to be comprised primarily

78
00:03:39,391 --> 00:03:41,439
Or something for Microsoft anyway I certainly would

79
00:03:41,951 --> 00:03:44,768
And they're also going to try and give you things like this

80
00:03:45,024 --> 00:03:46,816
Express for web which is something that you use

81
00:03:47,072 --> 00:03:48,096
To program

82
00:03:48,864 --> 00:03:52,192
Like you know if you want to do web deployment you know asp

83
00:03:52,448 --> 00:03:53,728
P.net and other things like that

84
00:03:53,984 --> 00:03:54,496
What you want to do

85
00:03:54,752 --> 00:03:56,544
You're the one that you actually want to get

86
00:03:56,800 --> 00:03:59,872
Is this one here which is Express 2013 for Windows

87
00:04:00,127 --> 00:04:03,711
Which is the thing that actually lets us compile C++ which is what we want

88
00:04:04,223 --> 00:04:06,271
So I'm going to start that downloading

89
00:04:06,527 --> 00:04:09,087
Or at least I'm going to go through this this awesome

90
00:04:09,343 --> 00:04:09,855
Crazy

91
00:04:10,623 --> 00:04:12,671
Circus here that you have to do to download

92
00:04:13,183 --> 00:04:13,695
Los Arcos

93
00:04:14,207 --> 00:04:20,350
And now we're going to kind of have to skip a little bit of this process only because there is a challenge response that they do

94
00:04:20,607 --> 00:04:23,423
Which people will have to do on their own I obviously

95
00:04:23,678 --> 00:04:24,190
I can't tell you how to do

96
00:04:24,959 --> 00:04:26,238
You will have to basically

97
00:04:27,519 --> 00:04:28,798
Install the Skype

98
00:04:31,870 --> 00:04:32,894
Loading identity provider

99
00:04:33,663 --> 00:04:36,478
Okay so yeah you will have to go through and you'll have to fill this out

100
00:04:36,735 --> 00:04:39,295
Unfortunately you'll have to get like a Microsoft

101
00:04:39,550 --> 00:04:40,574
Login of some kind

102
00:04:40,831 --> 00:04:41,855
In order to get it

103
00:04:42,110 --> 00:04:48,254
But once you get it it will allow you to install visual studio and you will be able to do basically Sub sub

104
00:04:48,511 --> 00:04:49,790
Definitely what I'm about to do

105
00:04:50,047 --> 00:04:51,071
After you get that in

106
00:04:51,326 --> 00:04:56,190
Install it'll probably make you reboot your machine which I also can't do on a live stream of course because if I would have read them

107
00:04:56,447 --> 00:04:57,471
Machine

108
00:04:57,983 --> 00:04:59,519
But after you do that

109
00:04:59,774 --> 00:05:00,286
You will get

110
00:05:00,543 --> 00:05:01,567
A newer version

111
00:05:01,822 --> 00:05:02,334
Essentially

112
00:05:02,846 --> 00:05:07,198
Of this particular product this is the older version that was installed on this machine

113
00:05:07,454 --> 00:05:08,734
Visual Studio 2008

114
00:05:09,247 --> 00:05:15,391
And as you can see we've got stuff on here which is kind of not actually stuff I can open up

115
00:05:15,646 --> 00:05:17,694
Obviously I'm not allowed to

116
00:05:17,951 --> 00:05:19,487
To show you any of the secret Witness

117
00:05:19,742 --> 00:05:21,278
Things that would that would be very bad for him

118
00:05:21,535 --> 00:05:23,071
But what you can do

119
00:05:23,326 --> 00:05:24,606
To actually start programming

120
00:05:25,375 --> 00:05:27,935
In this particular Department you should go to new

121
00:05:28,190 --> 00:05:29,214
And you go to Project

122
00:05:29,471 --> 00:05:34,591
And what that'll do is that will allow you to create one of their dummy projects which I'll show you how to build

123
00:05:34,846 --> 00:05:37,918
Only for a little while because we'll kind of immediately get off

124
00:05:38,175 --> 00:05:39,711
What advice does the brings up

125
00:05:39,966 --> 00:05:41,502
A giant window

126
00:05:41,759 --> 00:05:43,295
Full of all of the things

127
00:05:44,319 --> 00:05:45,086
That you

128
00:05:45,343 --> 00:05:46,110
Could build with this

129
00:05:46,622 --> 00:05:48,926
And most of them are things that we are not concerned with

130
00:05:49,182 --> 00:05:55,326
Are you can see there's a bunch of template things for you can use for. Net you can see there's all sorts of things here MSC which is like an

131
00:05:55,583 --> 00:05:56,350
Antiquated Library

132
00:05:56,862 --> 00:06:00,959
And you don't care about any of these things the only thing you want to do is build a win32

133
00:06:01,214 --> 00:06:01,726
Application

134
00:06:01,983 --> 00:06:03,007
Tinder two options

135
00:06:03,519 --> 00:06:05,822
One is for win32 console application

136
00:06:06,079 --> 00:06:07,358
One is for win32

137
00:06:07,615 --> 00:06:08,127
Project

138
00:06:08,382 --> 00:06:11,454
And the difference between these two is actually extremely rudimentary

139
00:06:11,966 --> 00:06:15,550
All it is is for some reason way back when they actually did

140
00:06:17,086 --> 00:06:21,438
The original version of Windows they decided to segregate

141
00:06:21,694 --> 00:06:22,462
How you built

142
00:06:23,487 --> 00:06:26,559
Basically applications that can run from a command line

143
00:06:27,071 --> 00:06:27,838
Which is something we'll look at me

144
00:06:28,095 --> 00:06:31,167
Future and ones that are actually more like apps like it have a window

145
00:06:32,702 --> 00:06:34,238
And because they did that

146
00:06:34,750 --> 00:06:37,310
You have to build an app as one or the other

147
00:06:37,822 --> 00:06:43,966
And this is actually something that's basically impossible to get around there are workarounds for it if you really care but basically there is no

148
00:06:44,223 --> 00:06:44,990
No way on Windows

149
00:06:45,247 --> 00:06:47,550
Unlike say on Linux or Mac Off

150
00:06:47,807 --> 00:06:50,110
There is no way to actually build something

151
00:06:50,367 --> 00:06:51,134
That both

152
00:06:51,391 --> 00:06:52,415
Works from the command line

153
00:06:52,670 --> 00:06:53,182
And work

154
00:06:53,694 --> 00:06:54,718
From

155
00:06:54,975 --> 00:06:56,511
In the standard application mode

156
00:06:57,535 --> 00:06:58,047
But

157
00:06:58,559 --> 00:07:02,399
We don't have to talk about that too much because we're going to be building a game and games don't really have

158
00:07:02,654 --> 00:07:03,934
Have to do anything from the command line

159
00:07:04,447 --> 00:07:05,471
Inside of a

160
00:07:05,983 --> 00:07:07,007
That's right away

161
00:07:07,262 --> 00:07:07,774
So

162
00:07:08,031 --> 00:07:12,639
What we're going to do is Select win32 project which is what setup for actually building a

163
00:07:12,894 --> 00:07:13,918
Sorry I got to enter a name

164
00:07:14,942 --> 00:07:15,966
So we're going to call this

165
00:07:16,478 --> 00:07:16,990
We're going to call this

166
00:07:19,550 --> 00:07:20,062
Okay

167
00:07:20,831 --> 00:07:23,391
And what I'll do is I'll bring up this silly little wizard

168
00:07:24,158 --> 00:07:27,486
And The Wizard is basically asking a bunch of stuff none of what you want

169
00:07:27,742 --> 00:07:31,070
So what you want to do is just check empty project so that it will get out of your way

170
00:07:31,326 --> 00:07:37,471
And what kind of gives you another option here to do other things like the console application dlls which are separate issues.

171
00:07:37,726 --> 00:07:38,750
Saclibrary switch we don't need

172
00:07:39,007 --> 00:07:40,798
Worry about right now better things you might want to know

173
00:07:41,822 --> 00:07:44,638
And we'll go to Windows application which will basically just give us

174
00:07:45,406 --> 00:07:46,686
Our own

175
00:07:46,942 --> 00:07:47,966
Furtive

176
00:07:51,038 --> 00:07:53,342
This will basically give us our own sort of

177
00:07:53,598 --> 00:07:56,414
Dumping Ground where we can put stuff in and build it

178
00:07:56,670 --> 00:08:00,766
No the way that Microsoft Visual Studio works if it has this thing called a solution Explorer

179
00:08:01,023 --> 00:08:05,631
And one thing that will often happen to you when you're developing is it will go away so you will get something

180
00:08:05,887 --> 00:08:08,959
That's like this or perhaps you'll get something that's even completely blank

181
00:08:09,214 --> 00:08:11,006
I'm so that has nothing in it like this

182
00:08:11,262 --> 00:08:15,102
And you can get back to the solution Explorer Thing by going to view solution

183
00:08:15,358 --> 00:08:16,894
Explorer now what is a solution

184
00:08:17,151 --> 00:08:18,942
You may ask what was the problem

185
00:08:19,454 --> 00:08:21,758
You may also ask him that's a very valid question

186
00:08:22,014 --> 00:08:25,342
But the answer is there wasn't necessarily a problem

187
00:08:25,598 --> 00:08:29,694
Unless you consider the problem being that Microsoft makes it very hard to build things

188
00:08:29,951 --> 00:08:34,047
Solution was just something that they started calling a project at some point

189
00:08:34,815 --> 00:08:35,583
Answer

190
00:08:35,839 --> 00:08:40,191
Really a solution is just their word for a thing that you are going to build it's like a basically

191
00:08:40,447 --> 00:08:46,591
A list of things that need to get built and how they're going to build them and so instead of having an intuitive name like

192
00:08:46,846 --> 00:08:50,687
Files Explorer project Explorer it's called solution Explorer

193
00:08:51,198 --> 00:08:54,526
And you have to go to it when you go to the solution Explorer

194
00:08:55,294 --> 00:08:56,830
You will basically get something here

195
00:08:57,086 --> 00:08:58,622
That works a lot like

196
00:08:58,879 --> 00:09:00,927
You know the file explorer in Windows

197
00:09:01,182 --> 00:09:03,486
It's hierarchical and you can collapse it

198
00:09:03,999 --> 00:09:08,350
And they made some folders in here but we don't really have to care about these folders very much

199
00:09:08,606 --> 00:09:11,166
And we can have our own folders or rename folder

200
00:09:11,678 --> 00:09:15,519
So if we wanted to rename one of these you know we could go in here and call this

201
00:09:16,030 --> 00:09:17,310
Whatever we wanted and that's fine

202
00:09:18,335 --> 00:09:20,894
But we need to do to in order to start building something is Axe

203
00:09:21,150 --> 00:09:21,918
She have some files in your

204
00:09:22,174 --> 00:09:22,686
How to build

205
00:09:22,942 --> 00:09:23,966
So that it will know

206
00:09:24,222 --> 00:09:24,734
What we are

207
00:09:25,759 --> 00:09:29,342
So in order to do that I'm just going to right click on this and going to add

208
00:09:29,599 --> 00:09:30,879
And I'm going to take a new item

209
00:09:31,134 --> 00:09:33,694
So that would have make a new file basically

210
00:09:34,206 --> 00:09:35,486
That we can actually build

211
00:09:35,999 --> 00:09:38,558
That will pop up a mess of Windows stuff

212
00:09:38,815 --> 00:09:43,423
Because there's all sorts of things that you might want to do you might want to make an SQL script file

213
00:09:43,934 --> 00:09:45,726
Class diagram

214
00:09:46,239 --> 00:09:47,263
Those might be good things to me

215
00:09:47,519 --> 00:09:49,054
But we're not going to make those right now

216
00:09:49,311 --> 00:09:51,359
Instead we're going to make just a straight-up

217
00:09:51,615 --> 00:09:52,383
CPP file

218
00:09:53,407 --> 00:09:53,918
Okay

219
00:09:54,174 --> 00:09:58,526
So basically I was ripped into the name done I so basically we just have to

220
00:09:58,783 --> 00:10:02,879
Give RC Fallon name and add it now we will have a blank file that we can start typing into

221
00:10:03,647 --> 00:10:05,951
And that is what we will use

222
00:10:06,206 --> 00:10:07,230
To start programming in

223
00:10:07,743 --> 00:10:08,254
Now

224
00:10:08,510 --> 00:10:11,838
Programming UC has not Advanced much over the years unfortunately

225
00:10:12,350 --> 00:10:14,399
Obviously C &amp; C++

226
00:10:14,910 --> 00:10:16,446
They're both pretty old but

227
00:10:16,958 --> 00:10:19,518
You know I think C++ was sometime early 80s

228
00:10:20,030 --> 00:10:22,846
I see was you know a good decade before that I want to say

229
00:10:23,102 --> 00:10:23,614
And yet

230
00:10:24,126 --> 00:10:26,942
Just the same even though they're so old

231
00:10:27,198 --> 00:10:29,758
The way in which you actually enter

232
00:10:30,014 --> 00:10:33,086
C code into a computer and the way it is actually built is still

233
00:10:33,342 --> 00:10:34,622
Almost the same

234
00:10:35,134 --> 00:10:37,438
As it was back then you basically just have

235
00:10:37,695 --> 00:10:38,463
Text files

236
00:10:38,975 --> 00:10:45,119
Their basic clean old text files less complicated than something that you would type into Microsoft Word like they

237
00:10:45,375 --> 00:10:47,678
They literally don't even have annotation right there just

238
00:10:47,934 --> 00:10:48,702
Robotics

239
00:10:49,215 --> 00:10:50,495
And that raw text

240
00:10:50,750 --> 00:10:51,519
Is then

241
00:10:51,774 --> 00:10:52,543
Interpreted

242
00:10:53,311 --> 00:10:54,335
I'm by the tools

243
00:10:54,591 --> 00:10:56,639
To do the things that we need to do

244
00:10:56,894 --> 00:10:57,663
And that's done with the

245
00:10:57,918 --> 00:10:59,454
Compiler and stuff that will be talking about

246
00:10:59,966 --> 00:11:04,831
Basically just understand that nothing we're going to do is going to be anything other than entering text

247
00:11:05,086 --> 00:11:05,598
Enterkomputer

248
00:11:06,110 --> 00:11:06,622
Okay

249
00:11:07,134 --> 00:11:08,158
So

250
00:11:08,927 --> 00:11:13,023
The first thing to do is to say well okay we haven't actually done anything here

251
00:11:14,047 --> 00:11:15,071
This is some text

252
00:11:15,839 --> 00:11:16,350
In a file

253
00:11:18,143 --> 00:11:18,911
And

254
00:11:19,423 --> 00:11:25,567
What you wanted what you will notice is that this basically every time I type in here there's a little yellow bar that sort of appears

255
00:11:26,335 --> 00:11:30,175
And that just tells you that these are new lines that you have type since you have saved

256
00:11:30,687 --> 00:11:31,966
And you can see that I've got a little

257
00:11:32,222 --> 00:11:33,246
Star there

258
00:11:33,503 --> 00:11:38,623
That now adds to it just like in most applications that says this file has been modified since it has been

259
00:11:38,879 --> 00:11:41,951
Can save now if I want to say that I can just go to files saved

260
00:11:42,719 --> 00:11:45,535
Peppa Pig or I wanted some shorthand I can hit control s

261
00:11:46,047 --> 00:11:50,399
Right and there it saves it and you'll notice that the yellow bars now changed to a green bar

262
00:11:51,167 --> 00:11:55,007
And what does a green bar mean when a green bar is basically something that lets you know

263
00:11:55,263 --> 00:11:59,103
That is saved there was still a change recently there

264
00:11:59,615 --> 00:12:02,687
And I believe although I am not a frequent user Visual Studio that

265
00:12:02,942 --> 00:12:04,990
It will basically remove the green bar

266
00:12:05,246 --> 00:12:06,270
Once we actually

267
00:12:06,527 --> 00:12:07,038
I'll be

268
00:12:07,294 --> 00:12:08,318
Inter working program

269
00:12:08,831 --> 00:12:11,647
So that you know what changes you've made since the last time you bought

270
00:12:12,414 --> 00:12:12,926
Your program

271
00:12:14,206 --> 00:12:14,975
So let's say

272
00:12:15,230 --> 00:12:17,278
I want to actually run the process

273
00:12:17,534 --> 00:12:19,838
Of making something out of this text file

274
00:12:20,606 --> 00:12:23,423
Well the thing that you do there is you say build solution

275
00:12:23,934 --> 00:12:26,750
And Bill solution will go through everything that we have in here

276
00:12:27,006 --> 00:12:28,030
It will actually

277
00:12:28,543 --> 00:12:30,846
Do the work necessary to make this in

278
00:12:31,359 --> 00:12:31,870
To a program

279
00:12:32,126 --> 00:12:33,406
And we'll talk about all those steps

280
00:12:33,918 --> 00:12:34,430
In a little while

281
00:12:34,687 --> 00:12:35,966
So when I hit build solution

282
00:12:36,735 --> 00:12:40,831
You'll notice that if I did not have an output window open it magically made one for me

283
00:12:41,342 --> 00:12:43,646
It just pops up there's really nothing you can do

284
00:12:43,903 --> 00:12:44,414
About it

285
00:12:44,671 --> 00:12:45,439
And

286
00:12:45,695 --> 00:12:46,463
What it does is it

287
00:12:46,719 --> 00:12:47,230
Prince out

288
00:12:47,743 --> 00:12:48,767
What happened

289
00:12:49,023 --> 00:12:50,815
When it tried to build the program

290
00:12:51,582 --> 00:12:55,678
So it starts out by giving me a line which says what was trying to build

291
00:12:55,934 --> 00:12:57,470
So it says build started

292
00:12:57,726 --> 00:12:58,495
Project test

293
00:12:59,006 --> 00:13:03,102
No that's what we wanted you can see in here we've essentially when it created are automatic

294
00:13:03,359 --> 00:13:03,870
Project for us

295
00:13:04,383 --> 00:13:06,175
He created the solution called test

296
00:13:06,687 --> 00:13:12,062
And it put inside one default project which is called test in the reason I call a default project you can see it's bold

297
00:13:12,318 --> 00:13:12,830
It's because

298
00:13:13,086 --> 00:13:14,879
You can actually go in here

299
00:13:15,134 --> 00:13:17,694
And there's a thing called set as start-up project in

300
00:13:17,951 --> 00:13:18,719
Some of the things like this

301
00:13:18,975 --> 00:13:23,582
There's basically a notion of what the project is you're going to build

302
00:13:23,839 --> 00:13:28,447
When you build a solution because we could actually stacked other products in here that build other programs

303
00:13:28,702 --> 00:13:31,774
Which we don't all want to build and other sorts of nonsense like this

304
00:13:32,030 --> 00:13:38,174
Most of that is not really necessary when you're doing development unless you start developing a very large and complex project

305
00:13:38,687 --> 00:13:42,014
But if you're just building a game by yourself it's on like you'll need to ever do anything

306
00:13:42,270 --> 00:13:42,782
Like that

307
00:13:43,294 --> 00:13:45,598
And I often don't build anything anything from here so

308
00:13:45,855 --> 00:13:48,158
What are things were at carburetors how to build things without using

309
00:13:49,182 --> 00:13:49,694
That's it

310
00:13:50,206 --> 00:13:54,814
Cast of the project that we will build when we do build solution and so what this was telling us here

311
00:13:55,071 --> 00:13:57,119
Is it was going to build that project

312
00:13:57,630 --> 00:13:59,166
And there's a configuration line

313
00:13:59,423 --> 00:14:01,215
Which is debug win32

314
00:14:01,471 --> 00:14:03,006
And what the configuration mean

315
00:14:04,030 --> 00:14:07,358
Is basically what sort of build it was trying to do

316
00:14:07,870 --> 00:14:13,759
Because as we'll see later on there's actually multiple ways you can build the same set of C code

317
00:14:14,527 --> 00:14:20,671
Some of them are designed to Target different platforms for example you may want to Target a 32-bit copy of

318
00:14:20,927 --> 00:14:21,438
Windows

319
00:14:21,695 --> 00:14:23,230
Or 64-bit copy of windows

320
00:14:23,743 --> 00:14:25,278
And that would be part of the configuration

321
00:14:25,791 --> 00:14:29,631
You might want to be trying to do things that are based on

322
00:14:29,886 --> 00:14:34,750
Deep like a debug developer build so something that has a lot of test code compiled into it

323
00:14:35,006 --> 00:14:37,822
Special menus for you the editor for the game or something

324
00:14:38,335 --> 00:14:39,359
Might be built

325
00:14:39,615 --> 00:14:42,942
In this mode but then there might be another build called release

326
00:14:43,198 --> 00:14:46,014
Or retail depending on how you do your naming

327
00:14:46,527 --> 00:14:49,855
Team which will build these things out and so basic configuration

328
00:14:50,623 --> 00:14:52,415
Is something that affects the way

329
00:14:52,671 --> 00:14:53,951
In which these text files

330
00:14:54,206 --> 00:14:57,278
Are actually interpreted by the various things that

331
00:14:57,534 --> 00:15:00,862
That we do in order to get to an application that that

332
00:15:01,119 --> 00:15:03,678
Is somehow different from the other configuration

333
00:15:04,191 --> 00:15:04,702
That we might be

334
00:15:05,215 --> 00:15:07,774
So now the next time you can see here is compiling

335
00:15:08,287 --> 00:15:10,335
And what that is is compilation

336
00:15:10,591 --> 00:15:11,870
Is the general term

337
00:15:12,894 --> 00:15:16,478
It's not a particular specific term although we actually use it to mean something specific

338
00:15:17,246 --> 00:15:19,294
That's a very general term that technically means

339
00:15:19,807 --> 00:15:22,366
Moving something from one format into another

340
00:15:22,623 --> 00:15:23,134
Basically

341
00:15:23,390 --> 00:15:24,926
It's sort of like

342
00:15:25,182 --> 00:15:29,278
A translation in some sense a compiler is something that parses

343
00:15:29,534 --> 00:15:30,814
A text file typically

344
00:15:31,071 --> 00:15:36,702
It turns it into something Samantha it understands the meaning of that text file what we were trying to do that text

345
00:15:37,471 --> 00:15:39,774
And then it turns it into

346
00:15:40,030 --> 00:15:41,566
Some other thing that we wanted

347
00:15:42,078 --> 00:15:43,102
Now in this case

348
00:15:43,359 --> 00:15:46,175
What is going to do is we're actually trying to get it

349
00:15:46,431 --> 00:15:48,223
To produce at the end of the day

350
00:15:48,990 --> 00:15:55,134
I'm an actual program that we can run an executable something that you would click on in Windows to run like with the little eye

351
00:15:55,390 --> 00:15:58,206
Icon. Exe that thing we want build that thing

352
00:15:58,719 --> 00:16:00,254
In order to build that thing

353
00:16:00,510 --> 00:16:03,582
Basically the the text code that we write

354
00:16:03,839 --> 00:16:06,655
Has to be translated into something that the computer can run

355
00:16:06,910 --> 00:16:10,238
And that is what the compilation step does and there's another step

356
00:16:10,495 --> 00:16:12,030
After compilation that we'll talk about

357
00:16:12,287 --> 00:16:16,383
But the compilation step is basically in charge of doing the majority of the work

358
00:16:16,639 --> 00:16:17,663
To translate

359
00:16:17,918 --> 00:16:24,062
Are text file from something humans read into something that a CPU can read and specifically

360
00:16:24,318 --> 00:16:24,830
Often times

361
00:16:26,110 --> 00:16:27,134
A specific process

362
00:16:27,903 --> 00:16:28,927
The compilation will be

363
00:16:29,182 --> 00:16:32,254
Compiling from a text file into say x86 to

364
00:16:32,510 --> 00:16:33,534
X64 code

365
00:16:34,047 --> 00:16:35,839
Something for the actual CPU

366
00:16:36,095 --> 00:16:38,654
That you were trying to Target not abstract

367
00:16:39,934 --> 00:16:40,446
Stop

368
00:16:40,702 --> 00:16:41,982
Given that

369
00:16:42,239 --> 00:16:45,311
After we we see the compilation lineman of the compiler

370
00:16:45,567 --> 00:16:49,407
Started and we now go to a list of what files it's actually

371
00:16:49,663 --> 00:16:51,455
Compiling we only have one file which is

372
00:16:51,711 --> 00:16:52,735
Just test out CPP

373
00:16:52,990 --> 00:16:56,831
And so not surprisingly it tries to compile that file now you will note

374
00:16:57,342 --> 00:16:58,366
In front of all of these

375
00:16:58,623 --> 00:17:00,158
There is a little

376
00:17:00,414 --> 00:17:01,950
Number within with assertive

377
00:17:02,206 --> 00:17:03,230
Greater than symbol

378
00:17:03,999 --> 00:17:04,510
And

379
00:17:04,767 --> 00:17:06,047
What is

380
00:17:06,303 --> 00:17:12,447
Is totally Irrelevant for the most part 2 what you're going to be doing for development it's not really something to pay attention to

381
00:17:12,702 --> 00:17:13,726
But just in case you're wondering

382
00:17:14,750 --> 00:17:16,030
If you are on a machine

383
00:17:16,287 --> 00:17:18,591
That happens to have a lot of processor

384
00:17:18,846 --> 00:17:20,383
So if I go in here

385
00:17:20,894 --> 00:17:23,454
If I basically just that use the hot tea

386
00:17:23,711 --> 00:17:24,990
One of my favorite hot fries

387
00:17:25,247 --> 00:17:27,551
Control shift escape to bring up the task manager

388
00:17:28,318 --> 00:17:30,366
You will notice that this machine

389
00:17:30,623 --> 00:17:31,903
Have a lot of processors

390
00:17:32,414 --> 00:17:34,719
In this thing called CPU usage history

391
00:17:35,230 --> 00:17:39,070
There is one of these for every logical processor

392
00:17:39,838 --> 00:17:40,350
In the machine

393
00:17:41,118 --> 00:17:44,446
I'm a logical processor is or shouldn't say lunch process

394
00:17:45,727 --> 00:17:47,775
Crap that's the wrong word

395
00:17:48,542 --> 00:17:50,590
Deluxe compressor is not individual processor

396
00:17:51,103 --> 00:17:53,919
If it's only a logical unit that can run code

397
00:17:54,431 --> 00:17:55,967
And there's two different kinds of these

398
00:17:56,479 --> 00:17:58,783
And we might as well talk about them now if I'm going to talk about them

399
00:17:59,295 --> 00:18:00,063
Certainly more

400
00:18:00,575 --> 00:18:02,366
Out later on in the actual series

401
00:18:02,623 --> 00:18:03,391
It's not in the center doctors

402
00:18:04,414 --> 00:18:10,558
Basically the word processor is divided internally or as we are computers about internally honestly there are actual physical processors

403
00:18:11,326 --> 00:18:14,398
So most people have one physical processor in the machine obviously

404
00:18:14,911 --> 00:18:18,495
But other machines have two or three or four maybe

405
00:18:18,750 --> 00:18:19,519
Even dozens

406
00:18:19,775 --> 00:18:20,543
A processor

407
00:18:20,798 --> 00:18:22,590
I'm certainly not consumer boxes but you know

408
00:18:23,103 --> 00:18:24,126
Certain server types my

409
00:18:24,383 --> 00:18:25,151
I have 32 processors

410
00:18:25,406 --> 00:18:25,918
The machine

411
00:18:27,454 --> 00:18:33,598
Who's physical processors obviously are chips they were made by Intel they're stuck in the machine they have a nice big old heatsink,

412
00:18:35,134 --> 00:18:36,414
Grandpa from overheating

413
00:18:37,182 --> 00:18:41,278
And when you power on your machine they are what executes everything

414
00:18:41,535 --> 00:18:42,815
Graphics code or things like

415
00:18:43,070 --> 00:18:44,350
The networking which is sometimes on

416
00:18:44,863 --> 00:18:45,631
Car adjustable chips

417
00:18:46,398 --> 00:18:48,190
The CPUs what does all the work but

418
00:18:49,214 --> 00:18:50,494
In addition to being

419
00:18:50,750 --> 00:18:52,030
A physical unit

420
00:18:52,287 --> 00:18:55,103
The CPU itself is actually divided internally

421
00:18:55,358 --> 00:18:56,638
Into processing unit

422
00:18:56,894 --> 00:19:00,222
Which actually can run code sort of separately

423
00:19:00,479 --> 00:19:02,270
Those are typically called course

424
00:19:02,527 --> 00:19:04,831
So inside a single CPU

425
00:19:05,343 --> 00:19:06,879
You might have four chords

426
00:19:07,391 --> 00:19:08,414
For a course or something

427
00:19:09,182 --> 00:19:15,326
And you will see these often times advertising Intel advertising and of course more course is better but what is a quart

428
00:19:15,583 --> 00:19:16,095
Accor

429
00:19:16,606 --> 00:19:18,654
Is basically something that is capable

430
00:19:18,911 --> 00:19:19,934
I'm doing the work

431
00:19:20,446 --> 00:19:26,334
Stand-alone CPU for the most part it is something that would have been a CPU in the old days when CPUs could only

432
00:19:26,590 --> 00:19:27,358
Execute one thing

433
00:19:27,615 --> 00:19:28,126
Time

434
00:19:29,151 --> 00:19:31,967
Now you have processors capable of executing multiple things at a time

435
00:19:32,734 --> 00:19:34,782
Each one of those units is

436
00:19:35,038 --> 00:19:35,807
Call Decor in

437
00:19:36,575 --> 00:19:39,134
And the chorus typically have a bunch of things in them

438
00:19:39,391 --> 00:19:40,927
They have units capable of doing

439
00:19:41,182 --> 00:19:45,022
Maddox they have units capable of doing every other saying all these hurtful things

440
00:19:45,278 --> 00:19:49,375
And then they will talk to the memory in your system will talk to the

441
00:19:50,398 --> 00:19:53,726
The bus go talk to all sorts of things to do their job but

442
00:19:53,982 --> 00:19:55,006
Biologic or

443
00:19:55,262 --> 00:19:57,054
Is the things action of the computation

444
00:19:57,823 --> 00:19:58,591
Even that

445
00:19:58,846 --> 00:20:00,383
It's still not really

446
00:20:00,638 --> 00:20:03,454
What you might call a logical processing unit

447
00:20:03,711 --> 00:20:08,063
Nowadays and the reason for that is they subdivided that even further

448
00:20:08,830 --> 00:20:10,622
Down two things called hyperthread

449
00:20:11,134 --> 00:20:12,158
And of course

450
00:20:12,671 --> 00:20:14,975
Hyperthreads are basically

451
00:20:15,230 --> 00:20:15,999
A thing where

452
00:20:16,510 --> 00:20:17,534
A processor

453
00:20:18,047 --> 00:20:18,558
Score

454
00:20:19,838 --> 00:20:22,143
Is actually able to maintain this

455
00:20:22,398 --> 00:20:22,910
State

456
00:20:24,191 --> 00:20:25,727
Of multiple cores

457
00:20:26,239 --> 00:20:27,775
As if it were multiple cores

458
00:20:28,287 --> 00:20:33,151
Even though is only capable of executing anyone given Court a time so for example

459
00:20:33,406 --> 00:20:39,550
You think of a CPU core as being able to remember say what it was running where it is in the

460
00:20:39,807 --> 00:20:43,134
Program what the state of the things it was operating on these sorts of things

461
00:20:43,391 --> 00:20:45,695
We'll get into all those aren't detail later

462
00:20:45,951 --> 00:20:46,719
But

463
00:20:47,230 --> 00:20:50,047
Cory's basically doing this work of running an application

464
00:20:51,070 --> 00:20:54,398
That core can actually store multiple of those States

465
00:20:54,654 --> 00:21:00,030
Almost like a multitasking operating system you can think of is, there's the taskbar and it's got different tasks

466
00:21:00,287 --> 00:21:01,055
That it has

467
00:21:01,310 --> 00:21:03,870
Wella Cork and actually sort of do that testing

468
00:21:04,126 --> 00:21:06,431
Insertive sent itself

469
00:21:06,686 --> 00:21:07,198
And

470
00:21:07,454 --> 00:21:12,062
Even though it's only running one thing at a given time it could keep safe for additional

471
00:21:13,086 --> 00:21:13,598
State

472
00:21:13,855 --> 00:21:15,646
But it can really quickly switch to

473
00:21:16,415 --> 00:21:17,695
And so what happens is

474
00:21:17,951 --> 00:21:23,071
Those actually show up often times in the operating system as a logical processing unit

475
00:21:23,327 --> 00:21:25,887
Because to the operating system they sort of look

476
00:21:26,144 --> 00:21:26,912
Like a processor

477
00:21:27,167 --> 00:21:29,471
They are effectively running something

478
00:21:29,983 --> 00:21:34,079
Even though only one of them are particular court is actually inflated a given

479
00:21:34,336 --> 00:21:35,872
Another word to talk about their

480
00:21:36,127 --> 00:21:36,639
But

481
00:21:36,895 --> 00:21:39,711
I am from two tangents I thought I'd mention some of that way booted up here

482
00:21:39,968 --> 00:21:44,576
So how's it going to see there a lot of logical bussiness as they are not this many processors

483
00:21:44,832 --> 00:21:46,624
In the actual machine

484
00:21:46,880 --> 00:21:47,648
In fact

485
00:21:47,903 --> 00:21:48,927
I don't actually know

486
00:21:50,720 --> 00:21:51,488
If I can go on here

487
00:21:52,000 --> 00:21:52,511
I think

488
00:21:54,304 --> 00:21:55,072
If it's actually will tell us

489
00:21:55,839 --> 00:21:57,119
What kind of processor it is

490
00:21:57,632 --> 00:21:58,144
Yes

491
00:21:58,400 --> 00:21:59,680
It is a Xeon

492
00:21:59,935 --> 00:22:01,215
It easy

493
00:22:01,471 --> 00:22:02,751
2 processor box

494
00:22:03,008 --> 00:22:07,104
Although it doesn't actually tell me how many threads for plumbing how many cores for processor it actually has

495
00:22:07,359 --> 00:22:09,407
We can go look up what a w5580 is

496
00:22:09,920 --> 00:22:11,456
And we could see how many it has

497
00:22:11,711 --> 00:22:14,528
But I think it's probably only got maybe

498
00:22:14,784 --> 00:22:16,576
4 / I don't know I'm not really sure

499
00:22:16,832 --> 00:22:19,903
But anyway each one of these would would correspond basically

500
00:22:20,160 --> 00:22:24,256
To one individual one of those hyperthreads and it would show me basically

501
00:22:24,768 --> 00:22:28,096
How much usage that particular thread is is getting

502
00:22:28,607 --> 00:22:29,631
Right now

503
00:22:29,887 --> 00:22:32,703
So hopefully that that gives you a little bit

504
00:22:33,215 --> 00:22:33,727
Perspective on this

505
00:22:33,983 --> 00:22:34,751
I wonder too

506
00:22:35,008 --> 00:22:35,519
You know what

507
00:22:36,031 --> 00:22:37,311
Nowadays that kind of attitude

508
00:22:37,824 --> 00:22:40,128
I wonder if there's any way I can get more information

509
00:22:40,384 --> 00:22:41,152
About things like hybrid

510
00:22:43,455 --> 00:22:46,271
Like I say even show hyperthreads I feel like in the old days you could

511
00:22:46,528 --> 00:22:47,039
Chicago Bears

512
00:22:47,296 --> 00:22:48,319
Didn't say whether you were showing

513
00:22:49,344 --> 00:22:50,624
Clusters of large compressors out of

514
00:22:51,647 --> 00:22:52,159
I do now

515
00:22:55,488 --> 00:22:56,000
Doesn't

516
00:22:56,256 --> 00:22:57,792
Doesn't look like there's much here

517
00:22:59,071 --> 00:22:59,583
For that

518
00:23:01,375 --> 00:23:02,144
Alright well

519
00:23:02,400 --> 00:23:05,984
Anyway that is not really relevant what we're doing so I'm going to skip it but maybe later on we will

520
00:23:06,240 --> 00:23:08,544
We will go try to find out how to how to get a little more info

521
00:23:09,824 --> 00:23:10,336
Thanks anyway

522
00:23:11,615 --> 00:23:14,943
So there a lot of Pastors in this system in when you build something

523
00:23:16,223 --> 00:23:21,087
Obviously compilers can get a little slow and if you have a lot of things compiled they could take

524
00:23:21,344 --> 00:23:24,415
Sometime it's a one of the things that compilers do is they are more

525
00:23:24,672 --> 00:23:25,440
Threading sometimes

526
00:23:25,695 --> 00:23:26,463
Depending on which one

527
00:23:26,720 --> 00:23:27,231
Talking about

528
00:23:27,743 --> 00:23:30,815
And they will try to compile using more than one

529
00:23:31,071 --> 00:23:33,119
Lots of passing it so they'll try to use

530
00:23:33,375 --> 00:23:38,751
More of a CPU resources faster and what this little thing here

531
00:23:39,263 --> 00:23:41,311
Represents if I remember correctly

532
00:23:41,567 --> 00:23:46,943
It's been a long time since I've ever really use my things that just to let you know a sequence number of basically which

533
00:23:47,200 --> 00:23:47,711
Sort of

534
00:23:48,736 --> 00:23:49,248
Sort of

535
00:23:49,759 --> 00:23:51,039
Spawn of the compiler

536
00:23:51,296 --> 00:23:54,624
Was reporting this message because you may have multiple compilation

537
00:23:54,880 --> 00:23:55,392
I going

538
00:23:55,647 --> 00:23:56,927
Multiple different

539
00:23:57,183 --> 00:24:00,000
City is doing compilation and I believe that basically just tells you

540
00:24:00,511 --> 00:24:01,279
Which Wonder

541
00:24:01,536 --> 00:24:02,559
Which one you're looking at that time

542
00:24:02,816 --> 00:24:04,352
Time so if we were to do more complicated

543
00:24:04,607 --> 00:24:08,703
Population with multiple files you might see two stories for is going on there as it's cooled off jobs

544
00:24:08,960 --> 00:24:13,567
Any more complex fashion but for the moment we're only seen ones because it only had one failed to compile

545
00:24:13,824 --> 00:24:15,360
And did not bother to lunch at

546
00:24:15,615 --> 00:24:16,384
Search for Threads to do that

547
00:24:16,640 --> 00:24:17,152
Anyway

548
00:24:18,175 --> 00:24:18,687
So

549
00:24:18,943 --> 00:24:23,296
This is the father was compiling and we will see here the first time we got an error

550
00:24:23,807 --> 00:24:28,672
And what an era is is an error means basically it was trying to read the text file that we gave it

551
00:24:29,183 --> 00:24:33,791
And it did not like what it found now that is unsurprising cuz I basically just typed a bunch of gibberish in here

552
00:24:34,559 --> 00:24:38,144
But we can do is when we double click on this it will tell us where the problem is

553
00:24:38,912 --> 00:24:41,216
It will then stop basically what it's doing

554
00:24:41,728 --> 00:24:44,799
So when you have errors it will list the errors that it found

555
00:24:45,056 --> 00:24:51,200
It will list them up usually to a certain number of errors and use that as well but after it gets hurt

556
00:24:51,455 --> 00:24:51,967
Compilation

557
00:24:52,480 --> 00:24:54,016
And it will basically just reports

558
00:24:54,271 --> 00:24:57,599
That it failed the compilation and you can see it says 1 errors

559
00:24:57,855 --> 00:25:00,415
This year and it says 0 succeeded 1 failed

560
00:25:00,672 --> 00:25:04,256
And Alexis know if they're ones that it skipped because it didn't thicken

561
00:25:04,511 --> 00:25:05,279
Need to do any work that's what it

562
00:25:06,048 --> 00:25:07,584
It also save a build log for

563
00:25:07,839 --> 00:25:10,399
Which are pretty useless most the time but

564
00:25:10,655 --> 00:25:13,983
If you want to look at the build log basically it saves an HTML file

565
00:25:14,240 --> 00:25:15,519
That has sort of

566
00:25:15,776 --> 00:25:20,384
A a lot of what happened in the building for I guess for posterity or if you want to do some kind of thing for you

567
00:25:20,640 --> 00:25:21,663
You saved the logs are doing

568
00:25:22,432 --> 00:25:24,223
Maybe you are running these

569
00:25:24,736 --> 00:25:28,832
In some way that you're viewing remotely there's there's reasons for build logs but we're certainly not going to

570
00:25:30,624 --> 00:25:31,135
Okay

571
00:25:31,392 --> 00:25:35,231
So that rather exciting process there where we just hit build and we get an error

572
00:25:35,488 --> 00:25:36,768
Is what we're going to be doing

573
00:25:37,279 --> 00:25:41,887
In order to produce an executable and in order to get to the next step of actually producing

574
00:25:42,144 --> 00:25:42,655
Beautiful

575
00:25:43,167 --> 00:25:44,959
What we are going to have to do

576
00:25:45,215 --> 00:25:47,007
Is we are going to have to give it

577
00:25:47,263 --> 00:25:49,567
Some code that actually

578
00:25:49,824 --> 00:25:50,336
Understand

579
00:25:50,847 --> 00:25:51,359
And

580
00:25:51,615 --> 00:25:52,895
Basically I'm going to type

581
00:25:53,152 --> 00:25:54,688
In some rope code now

582
00:25:55,455 --> 00:25:56,735
And I'm going to explain to you

583
00:25:56,991 --> 00:26:00,063
Certified it does it start of the simplest thing that we can possibly type in

584
00:26:00,576 --> 00:26:01,599
To get to the next stage

585
00:26:02,112 --> 00:26:02,880
In

586
00:26:03,392 --> 00:26:03,903
Here it is

587
00:26:05,695 --> 00:26:06,207
Set

588
00:26:06,463 --> 00:26:08,000
If I now try to build this

589
00:26:08,511 --> 00:26:09,791
You will notice

590
00:26:10,559 --> 00:26:11,839
And don't worry we'll get to this

591
00:26:13,119 --> 00:26:15,423
You will notice that what it does is it gets

592
00:26:15,680 --> 00:26:18,496
That's if we were before we got to test out CPP

593
00:26:19,263 --> 00:26:20,799
And it actually was

594
00:26:21,056 --> 00:26:22,592
Able to sort of moved past that

595
00:26:22,847 --> 00:26:24,895
And move on to doing other things now

596
00:26:25,152 --> 00:26:27,456
He tried to lock the Microsoft resource compiler

597
00:26:28,223 --> 00:26:30,015
And that was because we have a resource files

598
00:26:30,784 --> 00:26:32,064
Singing here and it created

599
00:26:32,319 --> 00:26:33,087
This project for awesome

600
00:26:34,112 --> 00:26:36,416
A resource compiler is nothing fancy

601
00:26:36,672 --> 00:26:40,511
It sounds a lot better than it is you're like a resource Camp I like it to pile my games resource with that

602
00:26:41,023 --> 00:26:42,559
Not very likely

603
00:26:42,816 --> 00:26:44,352
And you probably don't want to do that

604
00:26:44,607 --> 00:26:46,399
Myriad reasons but

605
00:26:46,912 --> 00:26:52,288
What the refractive actually does is the resource compiler does things like packing up an icon

606
00:26:52,799 --> 00:26:54,079
For your application

607
00:26:54,336 --> 00:26:55,872
And sticking it in somewhere

608
00:26:56,127 --> 00:26:57,663
Where the

609
00:26:57,920 --> 00:27:04,064
But where Windows could find it in the executable so that I can display it next year schedule things like that so that is something that you do need to know how to do

610
00:27:04,319 --> 00:27:04,831
Eventually

611
00:27:05,087 --> 00:27:11,231
The right now we don't care at all obviously didn't actually do anything so to finish that up but then it got to the stuff that I actually want to talk about

612
00:27:11,488 --> 00:27:12,511
Which is linking

613
00:27:13,536 --> 00:27:14,816
No blinking is

614
00:27:15,839 --> 00:27:16,607
Is linking

615
00:27:17,119 --> 00:27:18,143
Is sort of a

616
00:27:18,655 --> 00:27:19,679
A backpack

617
00:27:19,935 --> 00:27:20,703
Tennis compilation

618
00:27:20,960 --> 00:27:21,471
Process

619
00:27:21,983 --> 00:27:23,263
Now what we could do

620
00:27:23,519 --> 00:27:25,056
You know compiler certainly could

621
00:27:25,311 --> 00:27:27,615
Take a text file and it could directly make an X

622
00:27:27,872 --> 00:27:31,968
Skittle out of it if that textile contain everything that needed to Define their stupid butt

623
00:27:32,736 --> 00:27:34,272
What usually happens more often

624
00:27:34,784 --> 00:27:35,807
And

625
00:27:36,319 --> 00:27:38,624
Harley for legacy reasons at this point but

626
00:27:38,880 --> 00:27:39,392
You know

627
00:27:39,647 --> 00:27:40,159
What can you do

628
00:27:40,928 --> 00:27:47,072
What happens more often if you have a lot of text file so you know the code for game could be hundreds of thousands of lines of code

629
00:27:47,327 --> 00:27:47,839
Kodak

630
00:27:48,096 --> 00:27:50,400
It's a lot of PCP files that we're going to

631
00:27:50,912 --> 00:27:51,935
Learn how to write here

632
00:27:52,448 --> 00:27:52,960
And

633
00:27:53,728 --> 00:27:54,751
In order to

634
00:27:55,008 --> 00:27:57,056
Quote on quote save compilation time

635
00:27:57,824 --> 00:27:59,104
And various other reasons

636
00:27:59,615 --> 00:28:04,223
What a dolphin wants to do is be able to compile each file into an intermediate file

637
00:28:04,991 --> 00:28:07,807
Doing one part of a compilation process one part of the bruising

638
00:28:09,087 --> 00:28:10,624
Deleted file will basically be

639
00:28:11,135 --> 00:28:14,975
The process that takes the text and turns it into mostly

640
00:28:15,231 --> 00:28:19,071
Code to see if you can actually put their a bunch of things that aren't quite done yet

641
00:28:20,096 --> 00:28:21,887
Windows intermediate files

642
00:28:22,144 --> 00:28:27,263
Don't always have to be updated they only have me updated when the particular Source found that they came from changed

643
00:28:27,776 --> 00:28:33,920
So for example this test ICP If I don't change test at CPP won't have to recompile testout CBP if I had tons of them

644
00:28:34,175 --> 00:28:37,503
Other files productivity bar. CDP all these other files

645
00:28:37,759 --> 00:28:40,319
Guy sings just one of them you would only have to do the recopilation

646
00:28:40,576 --> 00:28:41,087
I just one of them

647
00:28:41,599 --> 00:28:42,111
But

648
00:28:42,367 --> 00:28:45,951
Does all of them have to be pulled in made into an executable at the end

649
00:28:46,208 --> 00:28:48,256
They basically have a second stage

650
00:28:48,511 --> 00:28:50,303
The compilation process which is called blinking

651
00:28:50,816 --> 00:28:52,352
And that's what this line does here

652
00:28:52,607 --> 00:28:56,192
And what Lincoln is about is licking is about Gathering all of that process

653
00:28:56,448 --> 00:28:56,960
Sing together

654
00:28:57,471 --> 00:28:59,008
All of us intermediate files

655
00:28:59,519 --> 00:29:00,031
And

656
00:29:00,288 --> 00:29:02,592
Basically resolving the places

657
00:29:03,359 --> 00:29:05,151
Where is Bay Point to each other

658
00:29:05,663 --> 00:29:08,991
So I made you a bunch of things in test out TPP

659
00:29:09,248 --> 00:29:10,528
That are going to

660
00:29:10,784 --> 00:29:13,088
Call out and and or reference

661
00:29:13,344 --> 00:29:15,392
2 or or use data from

662
00:29:16,160 --> 00:29:16,928
Older

663
00:29:17,183 --> 00:29:18,720
CPP file so I can pile

664
00:29:18,976 --> 00:29:19,744
And

665
00:29:20,000 --> 00:29:24,607
Since the compiler is only looking at each individual CPP file as it goes in

666
00:29:24,864 --> 00:29:25,375
Found them

667
00:29:25,887 --> 00:29:27,423
It can't resolve those references

668
00:29:27,680 --> 00:29:28,703
It can't tell

669
00:29:28,960 --> 00:29:34,079
Where the things are that things are pointing to because it's only seeing one individual files so what the Linker does

670
00:29:34,847 --> 00:29:35,871
In this link stage

671
00:29:36,127 --> 00:29:37,919
There's a thing called a liquor that gets executed

672
00:29:38,432 --> 00:29:39,711
Separate from the compiler

673
00:29:40,223 --> 00:29:41,247
And what it is

674
00:29:41,503 --> 00:29:43,551
Is it is something that gathers all this together

675
00:29:43,807 --> 00:29:45,087
Resolve the references

676
00:29:45,344 --> 00:29:47,392
Packages into one EXE

677
00:29:48,415 --> 00:29:49,695
Which you can then ship

678
00:29:50,463 --> 00:29:52,255
Now when I say which you can then ship

679
00:29:53,279 --> 00:29:54,816
That was the good old days

680
00:29:55,327 --> 00:29:57,375
There's a lot of reasons why you can't actually just you

681
00:29:58,144 --> 00:30:00,192
Thanks to Microsoft in their Tyler's Pursuit

682
00:30:00,448 --> 00:30:02,496
Lawmaking building applications complicated

683
00:30:02,751 --> 00:30:03,263
But

684
00:30:04,031 --> 00:30:05,567
I'm going to hold off on that for now

685
00:30:05,824 --> 00:30:08,640
So that we can focus on just the basics of the process in

686
00:30:08,895 --> 00:30:09,663
It's a lot to absorb

687
00:30:09,920 --> 00:30:11,200
I don't want over complicated

688
00:30:11,455 --> 00:30:12,479
More than it already is

689
00:30:14,528 --> 00:30:15,807
So in the linking stage

690
00:30:16,064 --> 00:30:18,368
You will see that we've gotten to our next Air

691
00:30:18,880 --> 00:30:24,768
And that air is this line right here you'll notice that it doesn't give me a line number and that is cuz Microsoft Linker

692
00:30:25,279 --> 00:30:26,559
Is not particularly good

693
00:30:27,071 --> 00:30:29,887
I don't know if they fix this and one of the more modern versions but

694
00:30:30,144 --> 00:30:31,680
Even as of 2008

695
00:30:32,448 --> 00:30:36,800
Their liquor never bothered to tell you where your errors are so all you get

696
00:30:37,056 --> 00:30:38,336
Is which function

697
00:30:38,847 --> 00:30:39,871
It was referenced in

698
00:30:40,127 --> 00:30:40,639
That makes sense

699
00:30:41,152 --> 00:30:47,296
So basically you will know you will know very little you'll know like what file maybe May

700
00:30:47,551 --> 00:30:50,111
Made the error possibly and you'll know what function

701
00:30:50,367 --> 00:30:56,511
What's causing the problem or things like that and we'll kind of get to what all those mean and how to stop them out later but basically you get very

702
00:30:56,768 --> 00:30:58,559
Cryptic message for a blinker fortunately

703
00:30:58,816 --> 00:31:03,168
Most of the time winter errors are simpler airzooka Power air so it's not too hard

704
00:31:03,680 --> 00:31:04,703
To figure out what they mean

705
00:31:06,240 --> 00:31:06,751
So

706
00:31:07,008 --> 00:31:08,031
Look at this error

707
00:31:08,288 --> 00:31:12,895
What it says is unresolved external symbol underscore winmain at 16

708
00:31:13,407 --> 00:31:14,431
Referencing function

709
00:31:14,688 --> 00:31:16,224
Tri main CRT startup

710
00:31:16,736 --> 00:31:19,040
And then goes on to tell us that that was a fatal error

711
00:31:19,296 --> 00:31:21,600
So there was one unresolved external

712
00:31:22,112 --> 00:31:25,696
And now what that means just what I was just saying and unresolved external

713
00:31:26,208 --> 00:31:32,352
What external means in this case is external to the population unit in which it was being used

714
00:31:32,607 --> 00:31:35,167
So when I compile test at BP or something

715
00:31:35,423 --> 00:31:36,960
It's got a corresponding file

716
00:31:37,471 --> 00:31:40,288
That the compiler produced at the Linker isn't pulling in

717
00:31:40,799 --> 00:31:43,104
Things that are external to that file are called externals

718
00:31:43,359 --> 00:31:47,967
And when you see one unresolved external it means that it came across one of these

719
00:31:48,223 --> 00:31:51,039
Couldn't resolve the couldn't find any

720
00:31:51,296 --> 00:31:55,903
Actual definition of that anywhere else in the other file so what can I do it can't finish linking

721
00:31:56,160 --> 00:31:57,440
Because it can't figure out

722
00:31:57,695 --> 00:31:58,975
What it was supposed to do there

723
00:32:00,256 --> 00:32:01,279
So again we get an error

724
00:32:01,791 --> 00:32:04,096
This time it says 2 hours but really it was only wanting her

725
00:32:04,352 --> 00:32:05,888
But that's just the way I guess it

726
00:32:06,655 --> 00:32:09,471
Decided to print it out and not sure what the secondary is but hey

727
00:32:09,983 --> 00:32:10,751
What you going to do

728
00:32:11,263 --> 00:32:11,775
Anyway

729
00:32:13,567 --> 00:32:16,895
Nobody gets now that we see what I look for areas we can start to the bucket

730
00:32:17,663 --> 00:32:18,175
So

731
00:32:18,688 --> 00:32:19,711
What actually happens

732
00:32:19,968 --> 00:32:22,016
If you think about it when you run an executable

733
00:32:22,528 --> 00:32:23,296
There is

734
00:32:23,551 --> 00:32:25,343
Something kind of complicated but has to occur

735
00:32:25,855 --> 00:32:26,367
Which is that

736
00:32:26,880 --> 00:32:27,648
Windows

737
00:32:27,903 --> 00:32:29,951
Is actually the program that's running on your machine

738
00:32:30,463 --> 00:32:33,279
So the processor your machine is executing windows

739
00:32:34,048 --> 00:32:38,144
And now we have built something that we would like Windows to start executing

740
00:32:38,912 --> 00:32:41,471
But windows and our program

741
00:32:41,983 --> 00:32:42,751
We're not linked

742
00:32:43,008 --> 00:32:44,031
Together right

743
00:32:44,288 --> 00:32:50,432
This linking stuff that I just explained where hey we can write some stuff and it pulls out together and it references each other and everyone's happy

744
00:32:50,943 --> 00:32:53,759
It makes sense if we typed in all the code

745
00:32:54,528 --> 00:32:56,832
But if we only typed in some code

746
00:32:57,344 --> 00:33:01,696
That has to be started by windows are started by some operating system will

747
00:33:01,951 --> 00:33:05,023
How does it know where to start how does it actually get started

748
00:33:05,279 --> 00:33:07,584
And the answer to that is basically that

749
00:33:08,096 --> 00:33:09,375
The linking process

750
00:33:09,632 --> 00:33:12,703
Even though it seems like we're going to finish it here in a minute

751
00:33:12,960 --> 00:33:14,751
Is never actually really finished

752
00:33:15,008 --> 00:33:16,031
In an executable

753
00:33:16,288 --> 00:33:17,311
Unless what you're building

754
00:33:17,567 --> 00:33:18,847
Is the whole operating system

755
00:33:19,359 --> 00:33:20,895
If you are building a kernel

756
00:33:21,152 --> 00:33:27,039
You know that runs the entire machine then and some sense you've built the entire program in Lincoln can resolve all external

757
00:33:27,807 --> 00:33:29,087
And even that maybe isn't

758
00:33:29,344 --> 00:33:35,488
Totally true because even in that case there is a bios in your computer and that by us has to know how to

759
00:33:35,743 --> 00:33:36,511
Load something

760
00:33:37,023 --> 00:33:43,167
And start executing it which is the colonel that's on the disc so you know it's complicated if you actually want to go all the way

761
00:33:43,423 --> 00:33:44,192
Way down to the bottom

762
00:33:44,448 --> 00:33:47,519
And open up the Russian nesting dolls all the way down to what's actually happening

763
00:33:48,031 --> 00:33:49,823
In your machine when you actually turn it on

764
00:33:50,079 --> 00:33:50,591
But

765
00:33:51,359 --> 00:33:53,151
Assuming that you're already running a program

766
00:33:53,920 --> 00:33:55,968
Like Windows that's enough free system setup

767
00:33:56,223 --> 00:33:58,015
To run executable content

768
00:33:58,271 --> 00:33:59,295
The question is

769
00:33:59,551 --> 00:34:03,647
How does Windows actually know where to start how did they know what to even do with this file

770
00:34:04,160 --> 00:34:06,720
Any answer is that executable file format

771
00:34:07,743 --> 00:34:11,072
Executable jar files on your disk just like a bitmap or anything else

772
00:34:12,096 --> 00:34:17,728
The executable file format is basically set up in a way that Windows understand so that I can open it and read it

773
00:34:18,239 --> 00:34:20,287
And read out of it information

774
00:34:21,056 --> 00:34:22,079
That tells it

775
00:34:22,335 --> 00:34:24,639
Where to actually start executing

776
00:34:25,407 --> 00:34:27,199
So when Windows wants to run some of your

777
00:34:27,711 --> 00:34:30,271
Code if it's we can load that file into memory

778
00:34:31,295 --> 00:34:33,087
Do some work on it but it needs to do

779
00:34:33,344 --> 00:34:34,112
Which will talk about again

780
00:34:34,367 --> 00:34:34,880
In a little bit

781
00:34:35,391 --> 00:34:40,511
And then it will use information that was put in the Goodwill by the slinker in fact

782
00:34:41,023 --> 00:34:42,047
Which Talbot

783
00:34:42,559 --> 00:34:47,936
Where in the Bible we wanted to actually start executing sewing memory where should it actually

784
00:34:48,192 --> 00:34:48,960
Jump to

785
00:34:49,215 --> 00:34:53,311
To actually start executing and tell the CPU here's where the code is go running

786
00:34:54,335 --> 00:34:55,871
Any answer to that

787
00:34:56,896 --> 00:34:57,408
Is

788
00:34:59,456 --> 00:35:01,760
The way in which we tell the Linker

789
00:35:02,527 --> 00:35:05,599
Where we wanted to tell Windows where to start

790
00:35:06,367 --> 00:35:09,183
Is it we use a predefined name

791
00:35:09,695 --> 00:35:11,743
And we name something that name

792
00:35:12,255 --> 00:35:13,791
So that I can find it in our code

793
00:35:14,304 --> 00:35:14,816
Now

794
00:35:15,072 --> 00:35:16,864
That's not entirely true

795
00:35:17,119 --> 00:35:20,192
Because we actually could go into the Linker itself

796
00:35:20,447 --> 00:35:24,031
And there are settings which we could modify that would tell it to use some other name

797
00:35:24,543 --> 00:35:25,824
For example through here

798
00:35:26,592 --> 00:35:31,968
But most of the time nobody actually does code that way most of the time people just use the default name

799
00:35:32,480 --> 00:35:34,527
And that default name name

800
00:35:34,784 --> 00:35:35,807
Is actually

801
00:35:36,831 --> 00:35:37,344
Well

802
00:35:38,623 --> 00:35:39,903
I'm going to stay at Twin name

803
00:35:40,159 --> 00:35:44,511
I will see you in a second it's not actually women but I don't want to spoil the surprise I'm going to say this with me

804
00:35:46,047 --> 00:35:48,863
And what you can actually do if you

805
00:35:49,119 --> 00:35:51,167
You're not going to probably remember a lot of

806
00:35:51,423 --> 00:35:55,264
The stuff that I'm saying and I and I totally respect that I don't remember all the stuff all the time

807
00:35:55,519 --> 00:35:56,032
Either

808
00:35:56,288 --> 00:35:57,824
I always am looking things up

809
00:35:58,079 --> 00:35:59,360
Ion msdn which

810
00:36:01,920 --> 00:36:04,992
If you type women into your Google search box

811
00:36:05,248 --> 00:36:06,528
You will get the first hit

812
00:36:06,784 --> 00:36:09,599
As this site called msdn. Microsoft.com

813
00:36:09,856 --> 00:36:11,648
Which we are going to be using a lot

814
00:36:11,903 --> 00:36:15,744
As we learn to program C in Windows because it is basic Repository

815
00:36:16,000 --> 00:36:19,072
For all of the stuff that is Windows specific

816
00:36:19,327 --> 00:36:20,096
About program

817
00:36:20,864 --> 00:36:23,679
And since we're going to be putting you in this for awhile that matters to us

818
00:36:23,936 --> 00:36:27,264
Because we are possibly going to have to look things up at least in the first couple weeks

819
00:36:27,775 --> 00:36:30,847
Look up things that tell us how to interface with the offering

820
00:36:32,128 --> 00:36:33,408
Now in here you can see

821
00:36:33,664 --> 00:36:34,432
The definition

822
00:36:34,943 --> 00:36:37,759
We met in the documentation for it tells us a bunch of stuff

823
00:36:38,016 --> 00:36:42,880
If you are beginning c programmer you will understand none of this and that is okay

824
00:36:43,391 --> 00:36:48,768
One of the things I am definitely going to do in the series is go over things many times we're going to go over things in depth

825
00:36:49,023 --> 00:36:55,167
You don't have to worry about the fact that a lot of the stuff that we're going to do may not be completely understand if you understand

826
00:36:55,423 --> 00:36:59,264
Able to you at the moment I will always try to explain as much as you need to know then

827
00:36:59,519 --> 00:37:03,615
And then we will go into more detail later as necessary because I don't want it to bog down

828
00:37:03,871 --> 00:37:06,687
I do want to get bogged down fairly often but it don't like it to bog down

829
00:37:07,456 --> 00:37:07,968
And

830
00:37:08,224 --> 00:37:12,832
You can also email me anytime you have a question and we will try to work those questions into future

831
00:37:13,088 --> 00:37:13,600
Editions of

832
00:37:13,856 --> 00:37:14,368
Web series

833
00:37:15,135 --> 00:37:15,648
So

834
00:37:16,159 --> 00:37:17,183
This right here

835
00:37:17,695 --> 00:37:19,487
Is what it's called a function prototype

836
00:37:19,744 --> 00:37:21,280
And we're going to be dealing with these a lot

837
00:37:21,536 --> 00:37:23,327
But basically what it does is it

838
00:37:23,583 --> 00:37:24,351
Tells you

839
00:37:25,119 --> 00:37:26,655
The way in which

840
00:37:26,911 --> 00:37:28,959
A particular piece of code needs

841
00:37:29,215 --> 00:37:29,728
The star Texaco

842
00:37:30,496 --> 00:37:32,032
And we'll get into a lot of

843
00:37:32,543 --> 00:37:36,895
Stop with these later so I won't belabor the point the basically this is the predefined entry point

844
00:37:37,664 --> 00:37:39,456
That we will be getting called at

845
00:37:39,711 --> 00:37:40,992
When we start executing

846
00:37:41,503 --> 00:37:44,319
And so if we want to Define it in RC program

847
00:37:44,831 --> 00:37:47,135
We have to basically do something like this

848
00:37:47,648 --> 00:37:49,952
We have to go in and Define this

849
00:37:50,463 --> 00:37:51,744
Just the way that they didn't hear

850
00:37:52,512 --> 00:37:53,024
And

851
00:37:53,280 --> 00:37:54,560
When we Define this

852
00:37:54,815 --> 00:37:57,375
The Linker will now see the symbol this win main symbol

853
00:37:57,632 --> 00:37:59,679
And it will know that that is the place

854
00:37:59,936 --> 00:38:01,216
That we wanted our

855
00:38:02,751 --> 00:38:04,032
Are execution for Windows

856
00:38:05,056 --> 00:38:08,639
Now if I go to build again and you'll see there's a there's a shortcut to a here which

857
00:38:08,896 --> 00:38:11,711
Ff7 so it's good to learn this was you build programs a lot

858
00:38:11,967 --> 00:38:15,295
If I build it with S7 you'll notice one of the things that happened here

859
00:38:17,088 --> 00:38:18,880
Before we get into two eras

860
00:38:19,391 --> 00:38:20,672
What is going to happen series

861
00:38:20,927 --> 00:38:26,047
Save the file automatically I don't know if you noticed the green line to the yellow line turning green

862
00:38:26,559 --> 00:38:27,840
One of the things that happens

863
00:38:28,096 --> 00:38:29,887
By default in the setup for

864
00:38:30,143 --> 00:38:30,655
for

865
00:38:30,911 --> 00:38:32,959
For Microsoft Microsoft Visual Studio

866
00:38:33,215 --> 00:38:36,031
Is it when you build something it will save files that are unsaved

867
00:38:36,288 --> 00:38:38,847
That's actually something you can change here in the tools option

868
00:38:39,360 --> 00:38:40,128
If you want to

869
00:38:40,384 --> 00:38:42,688
I change that stuff there's there's things in here that

870
00:38:42,943 --> 00:38:44,224
That affect things like that

871
00:38:44,480 --> 00:38:47,807
I don't have it remember exactly where that one is I think it might be in documents

872
00:38:49,344 --> 00:38:50,880
But I don't know

873
00:38:52,672 --> 00:38:54,976
Build projects I have no idea where it is

874
00:38:55,744 --> 00:38:59,840
You will have to hunt for it my friends because I have no idea where that actually is

875
00:39:00,351 --> 00:39:01,119
But

876
00:39:02,400 --> 00:39:02,912
Etsy

877
00:39:04,447 --> 00:39:06,239
There it is before building

878
00:39:06,496 --> 00:39:08,032
Save all changes

879
00:39:08,800 --> 00:39:11,615
And you can set that other things like don't say whatever so

880
00:39:11,871 --> 00:39:15,455
That's just a custom my picture liking but you will notice that is why you have to save the file

881
00:39:16,224 --> 00:39:16,736
Before I go

882
00:39:17,503 --> 00:39:20,063
So if I hit that 7 it feels the file and you will see

883
00:39:20,320 --> 00:39:21,856
That we have gotten some errors here

884
00:39:22,112 --> 00:39:25,952
And the errors are because we have started to use Windows specific thing

885
00:39:26,463 --> 00:39:29,536
And windows specific things aren't defined by default

886
00:39:30,304 --> 00:39:31,327
In our secret

887
00:39:31,840 --> 00:39:34,912
So what we have to do is we have to bring in something sad to find

888
00:39:35,423 --> 00:39:38,496
Again don't worry too much about this because we're about to discuss it in detail

889
00:39:38,751 --> 00:39:40,543
I just want to finish this one process first

890
00:39:40,800 --> 00:39:41,568
Before we go back here

891
00:39:42,592 --> 00:39:43,615
So I have done that

892
00:39:43,871 --> 00:39:45,407
And now you will see

893
00:39:47,711 --> 00:39:49,503
And I suppose I will have to remove these

894
00:39:50,784 --> 00:39:51,296
To also

895
00:39:53,599 --> 00:39:54,112
How to put those back

896
00:39:54,367 --> 00:39:55,391
Things I wanted to talk about this

897
00:39:56,159 --> 00:39:56,927
I was hoping they would be allowed

898
00:39:59,487 --> 00:40:00,000
So

899
00:40:00,255 --> 00:40:04,096
That did a successful field but I want to break it into two parts because I can't leave these in declaration

900
00:40:04,351 --> 00:40:04,864
Gyms in there

901
00:40:05,119 --> 00:40:05,887
Until

902
00:40:07,423 --> 00:40:07,936
If I want Taxi

903
00:40:09,472 --> 00:40:09,984
So

904
00:40:10,496 --> 00:40:11,776
Miss particular definition

905
00:40:12,288 --> 00:40:14,592
Basically uses a bunch of words

906
00:40:14,847 --> 00:40:16,128
Windows has to find them

907
00:40:16,896 --> 00:40:19,456
We're going to talk a lot about how we Define those things are things later but

908
00:40:19,711 --> 00:40:20,992
I wanted to display nuts

909
00:40:21,248 --> 00:40:21,760
Quickly

910
00:40:22,527 --> 00:40:27,135
These things are all stuff that Windows defined that are specific to Windows

911
00:40:27,903 --> 00:40:32,768
They're all things that you won't probably ever actually see if you're programming in a higher-level language

912
00:40:33,023 --> 00:40:35,839
I've never really programmed in C sharp

913
00:40:36,096 --> 00:40:36,608
Specifically

914
00:40:36,864 --> 00:40:38,655
So maybe some of the stuff still creepy

915
00:40:38,911 --> 00:40:39,935
Through that's entirely possible

916
00:40:40,447 --> 00:40:41,983
But a lot of higher level languages

917
00:40:42,239 --> 00:40:45,567
Obscure the underlying things that are happening in the windows code

918
00:40:45,824 --> 00:40:47,615
And so you never will actually see them

919
00:40:48,639 --> 00:40:54,783
But when we are apart of me and see it specifically when we program in low-level see that we want to directly interfere

920
00:40:55,039 --> 00:40:55,807
Face with Windows as much

921
00:40:56,063 --> 00:40:57,599
Possible to avoid any sort of

922
00:40:57,856 --> 00:40:58,880
Intermediaries

923
00:40:59,391 --> 00:41:00,927
We will have to deal with a lot of bees

924
00:41:01,440 --> 00:41:07,072
No I'll get in touch with you specifically mean in a in a bit but you will see where it's like this LPS Easter

925
00:41:07,583 --> 00:41:10,143
Now what is LP sturmey what what does that mean

926
00:41:10,400 --> 00:41:11,423
Even an experience

927
00:41:11,679 --> 00:41:13,983
Free programmer who's never programmed in Windows before

928
00:41:14,496 --> 00:41:15,519
Would not know what LPC

929
00:41:16,032 --> 00:41:18,847
Mr met so it is not the fact that I haven't explained

930
00:41:19,103 --> 00:41:23,967
What this definition is or how any of this stuff in this file works that is why you don't understand it if you're beginning

931
00:41:24,224 --> 00:41:25,504
You got a friend

932
00:41:25,760 --> 00:41:27,807
This is actually complete gobbledygook

933
00:41:28,063 --> 00:41:29,855
28 experienc programmer

934
00:41:30,112 --> 00:41:32,159
Who hasn't actually ever prevent windows before

935
00:41:32,672 --> 00:41:34,719
Because these are things that Windows made up

936
00:41:34,976 --> 00:41:36,000
They made them up

937
00:41:36,255 --> 00:41:40,096
To use to reference specific things in their operating system

938
00:41:40,351 --> 00:41:41,375
Which we will have to enter

939
00:41:42,143 --> 00:41:42,911
Interesting

940
00:41:43,168 --> 00:41:43,936
For example

941
00:41:44,192 --> 00:41:45,728
Is a running program

942
00:41:45,983 --> 00:41:48,799
It's something that refers to running program and LP stir

943
00:41:49,056 --> 00:41:50,592
If something that is a pointer

944
00:41:50,847 --> 00:41:53,918
To a string like a string of characters like some text

945
00:41:54,175 --> 00:41:54,687
For example

946
00:41:55,967 --> 00:41:59,807
And you will notice something that occurs in these that is kind of frustrating

947
00:42:00,318 --> 00:42:02,366
These weird little H's because hey

948
00:42:02,623 --> 00:42:03,391
Instance

949
00:42:03,902 --> 00:42:06,462
Well that makes some sense that English right I mean

950
00:42:06,719 --> 00:42:09,023
That makes no sense to use an instance of a program

951
00:42:09,791 --> 00:42:13,631
Str that kind of makes me like a string Str stream MX

952
00:42:14,398 --> 00:42:16,190
But like LP and age

953
00:42:17,215 --> 00:42:18,239
Repeated over here

954
00:42:19,007 --> 00:42:22,079
Okay pre Vincent previous since that makes sense instance that makes sense

955
00:42:22,590 --> 00:42:27,199
CMD line command line I can read this evening if I don't understand anything about programming language

956
00:42:27,967 --> 00:42:31,550
But these weird little things here H&amp;M LP there's are confusing

957
00:42:31,806 --> 00:42:32,574
Where do they come from

958
00:42:33,086 --> 00:42:36,927
The answers they come from something a long long time ago in Windows history

959
00:42:37,438 --> 00:42:38,719
Called Hungarian notation

960
00:42:39,487 --> 00:42:42,815
If you want to know if that's racist well it probably is it's just nobody ever

961
00:42:43,070 --> 00:42:44,094
Complain about it being racist

962
00:42:44,351 --> 00:42:45,631
Because most people

963
00:42:45,887 --> 00:42:49,215
Aren't racist against hungarians I don't think they are not a typically

964
00:42:49,471 --> 00:42:52,030
Oppressed class during Washington State

965
00:42:52,286 --> 00:42:56,894
So probably no one got upset about it but to be honest with you it's pretty racist to call Hungarian notation

966
00:42:57,150 --> 00:43:00,478
Call Victoria notation is because the guy who introduced it

967
00:43:00,990 --> 00:43:02,527
What is Hungarian

968
00:43:03,550 --> 00:43:07,134
I think it was Charleston money I don't actually know I don't remember who it was but

969
00:43:07,391 --> 00:43:08,671
Hungarian notation

970
00:43:09,695 --> 00:43:10,207
Is

971
00:43:10,463 --> 00:43:10,975
The sort of

972
00:43:11,487 --> 00:43:13,278
Antiquated at this point I hope

973
00:43:13,791 --> 00:43:16,095
Notion that you should prefix everything

974
00:43:16,351 --> 00:43:17,631
That you ever typed

975
00:43:17,887 --> 00:43:19,167
Into a programming language

976
00:43:19,422 --> 00:43:23,262
With some characters that tell you what the thing actually is

977
00:43:23,775 --> 00:43:25,822
So some kind of notion of what the thing is

978
00:43:27,358 --> 00:43:28,894
Key in this case was pointer

979
00:43:29,150 --> 00:43:30,942
I think L was long

980
00:43:31,199 --> 00:43:37,342
Meaning it was it was a pointer that was into memory in the old 16-bit days that was outside the PayPal

981
00:43:37,599 --> 00:43:39,903
Cuz I mean program

982
00:43:40,159 --> 00:43:44,510
Mark 16 bit Windows I don't at this point my memory of what LP stand for

983
00:43:44,766 --> 00:43:45,278
Completely.

984
00:43:45,534 --> 00:43:49,118
They just handle it means something that you would use to talk

985
00:43:49,375 --> 00:43:50,143
Two windows

986
00:43:50,398 --> 00:43:55,262
It'll take me about something and you will see these littered everywhere they are super annoying

987
00:43:55,518 --> 00:43:59,102
Because they really just do not helping me make things harder to read

988
00:43:59,358 --> 00:44:02,174
Cannot emphasize enough please don't do this is a terrible idea

989
00:44:03,710 --> 00:44:06,526
What can I say no you will see in modern code

990
00:44:07,295 --> 00:44:09,855
Some people still do a variance of this

991
00:44:10,110 --> 00:44:11,646
They will do things like

992
00:44:11,902 --> 00:44:18,046
IP Foo if something is a pointer to food which will talk about a Wild Bill's um Foo or something cuz I'm

993
00:44:18,302 --> 00:44:22,143
Number which is if you're doing object-oriented programming which we are really cover so

994
00:44:22,398 --> 00:44:23,934
Don't ever find out what that is but

995
00:44:24,447 --> 00:44:26,239
You can go watch someone else's track on Ustream Belinda

996
00:44:27,262 --> 00:44:27,775
Anyway

997
00:44:28,030 --> 00:44:34,174
That's what these annoying things are and you can pretty much ignore the most of the time although if you know how to read it it does help you if you just had

998
00:44:34,431 --> 00:44:34,943
Happened to

999
00:44:35,199 --> 00:44:36,990
Try to decipher something in Windows that's

1000
00:44:37,246 --> 00:44:39,038
Somewhat obtuse maybe you can use that

1001
00:44:39,295 --> 00:44:40,063
To help yourself

1002
00:44:40,318 --> 00:44:40,831
So there is

1003
00:44:41,599 --> 00:44:42,111
Anyway

1004
00:44:43,135 --> 00:44:47,487
If I said I want to talk about before we get into explaining exactly what all this code does

1005
00:44:47,742 --> 00:44:48,766
And how see

1006
00:44:49,023 --> 00:44:49,791
Work sort of

1007
00:44:50,047 --> 00:44:51,327
At a basic level

1008
00:44:52,862 --> 00:44:54,143
Is these things right here

1009
00:44:54,911 --> 00:44:55,423
So

1010
00:44:55,679 --> 00:44:56,702
What you will find

1011
00:44:56,958 --> 00:45:01,054
If you actually look at Windows code as you will see that there's a lot of annotation in it

1012
00:45:01,567 --> 00:45:07,710
There's not actually designed to be processed and see necessarily but that is designed to be processed by something

1013
00:45:08,478 --> 00:45:11,038
Say a documentation system that also reads the same files

1014
00:45:11,550 --> 00:45:14,878
Or was called the middle compiler which is a thing that is used to produce

1015
00:45:15,135 --> 00:45:16,159
Secondary files for

1016
00:45:16,414 --> 00:45:19,487
Object linking and embedding and all this other windows crap

1017
00:45:19,742 --> 00:45:21,790
We don't care about any of that stuff but

1018
00:45:23,583 --> 00:45:24,863
You will see things like this

1019
00:45:25,375 --> 00:45:28,702
Annotate some of the functions that you call and they see what this means

1020
00:45:28,958 --> 00:45:29,471
In

1021
00:45:29,983 --> 00:45:31,775
Is it telling you what direction

1022
00:45:32,543 --> 00:45:33,823
The data is flowing

1023
00:45:34,590 --> 00:45:37,663
No it's not actually something we want to have in here when we actually Define it is

1024
00:45:37,918 --> 00:45:38,942
It's strictly for their header file

1025
00:45:39,710 --> 00:45:44,318
But when you see it when you look at them sdn you will see it there and that is what that mean

1026
00:45:44,574 --> 00:45:46,366
Means that this is something

1027
00:45:46,623 --> 00:45:48,670
That is going to Windows using pass

1028
00:45:48,927 --> 00:45:49,695
Into windows

1029
00:45:49,951 --> 00:45:53,278
As opposed to an out parameter which is something that would be passed

1030
00:45:53,534 --> 00:45:55,070
Out to you back from window

1031
00:45:55,838 --> 00:45:57,630
And we will look at those

1032
00:45:57,887 --> 00:45:59,423
We will see those working Mini

1033
00:45:59,934 --> 00:46:00,447
Things we go through

1034
00:46:00,702 --> 00:46:01,726
Getting a windows program

1035
00:46:05,054 --> 00:46:08,382
So I'm going to go in here and delete those because you don't want to leave those in

1036
00:46:08,639 --> 00:46:12,222
I guess I've never actually tried before to leave them in I was kind of hoping you could

1037
00:46:12,478 --> 00:46:12,990
Just so that you could just

1038
00:46:15,039 --> 00:46:17,343
So where we build we now have a successfully

1039
00:46:17,599 --> 00:46:18,111
Building

1040
00:46:18,367 --> 00:46:18,879
Program

1041
00:46:19,391 --> 00:46:19,903
And

1042
00:46:20,159 --> 00:46:22,719
What this does is this means we actually have produced

1043
00:46:23,231 --> 00:46:25,535
And I will file and if we want to

1044
00:46:26,047 --> 00:46:27,583
We can actually run the executable

1045
00:46:28,094 --> 00:46:30,398
So in here you can see there is build solution

1046
00:46:31,679 --> 00:46:34,494
But in debug in the debug

1047
00:46:34,751 --> 00:46:35,263
Menu

1048
00:46:35,518 --> 00:46:37,310
You will also see that there is a way

1049
00:46:37,567 --> 00:46:39,358
Play to actually run the program

1050
00:46:39,614 --> 00:46:40,894
Which is start debugging

1051
00:46:41,407 --> 00:46:42,687
And that will actually run our program

1052
00:46:44,222 --> 00:46:44,735
Africa

1053
00:46:44,990 --> 00:46:45,759
That was our program

1054
00:46:46,782 --> 00:46:47,550
Did you love it

1055
00:46:48,063 --> 00:46:48,831
I know it's right side

1056
00:46:49,342 --> 00:46:54,462
So nothing strange but that actually did run our program our program doesn't do anything so it just started it

1057
00:46:54,719 --> 00:46:55,742
And then I deleted it

1058
00:46:56,255 --> 00:46:59,583
But you can also see hear some debug information that was printed out

1059
00:47:00,094 --> 00:47:01,886
Buy the actual startup code

1060
00:47:02,398 --> 00:47:05,214
Which is telling us something I'm sorry but that's exactly by the butter

1061
00:47:05,471 --> 00:47:07,262
Wichita keep telling us some things for example

1062
00:47:07,518 --> 00:47:08,798
It's telling us that it loaded

1063
00:47:09,054 --> 00:47:11,358
Pepcid AC unit

1064
00:47:11,614 --> 00:47:12,894
Let's get information for it

1065
00:47:13,150 --> 00:47:13,918
Hey buddy some other things

1066
00:47:14,175 --> 00:47:14,687
Depends on

1067
00:47:15,454 --> 00:47:16,735
So yeah she did Runner program

1068
00:47:16,990 --> 00:47:17,759
Isn't that a

1069
00:47:18,527 --> 00:47:20,318
Well let's complete that before I slam whatever

1070
00:47:20,574 --> 00:47:21,598
Does

1071
00:47:21,855 --> 00:47:22,367
With one

1072
00:47:23,391 --> 00:47:24,414
Simple thing that we can actually

1073
00:47:24,670 --> 00:47:25,182
Morrissey

1074
00:47:33,887 --> 00:47:34,655
Very exciting

1075
00:47:35,166 --> 00:47:36,702
We are going to run this

1076
00:47:36,958 --> 00:47:37,726
And oh

1077
00:47:42,335 --> 00:47:43,358
Oh man I get there

1078
00:47:43,614 --> 00:47:44,126
Everything

1079
00:47:45,150 --> 00:47:51,294
So as you can see now the program but as I modify everyone lying to it and now it's actually prints out

1080
00:47:51,550 --> 00:47:53,342
As part of Its Behavior

1081
00:47:53,599 --> 00:47:54,879
To the debug output

1082
00:47:55,391 --> 00:47:56,414
It prints out of string

1083
00:47:56,927 --> 00:47:57,439
That we wrote

1084
00:47:58,463 --> 00:47:58,975
Craigslist

1085
00:47:59,231 --> 00:48:02,559
I know that you are all very excited I am very excited as well about this

1086
00:48:02,815 --> 00:48:03,327
And I think

1087
00:48:03,583 --> 00:48:04,863
It is safe to say

1088
00:48:05,119 --> 00:48:06,655
That once I explain how this works

1089
00:48:07,422 --> 00:48:09,982
You are so on your way to create a game with Windows

1090
00:48:10,239 --> 00:48:12,798
If you can print something out of the debug window

1091
00:48:13,311 --> 00:48:14,591
How much more work

1092
00:48:14,847 --> 00:48:16,894
Couldn't even be to make a game

1093
00:48:17,407 --> 00:48:18,687
Certainly not much

1094
00:48:19,454 --> 00:48:19,967
Well

1095
00:48:20,478 --> 00:48:21,246
Maybe it's a little

1096
00:48:22,527 --> 00:48:23,295
I'm sure we'll be able to

1097
00:48:24,318 --> 00:48:24,831
In Future rapper

1098
00:48:25,342 --> 00:48:25,855
So

1099
00:48:26,367 --> 00:48:28,414
Now that we have a working windows program

1100
00:48:28,927 --> 00:48:29,439
Even though it really

1101
00:48:29,695 --> 00:48:30,463
Very much

1102
00:48:30,719 --> 00:48:33,278
Let's go through and see what everything did

1103
00:48:33,791 --> 00:48:35,071
I'd like to start first

1104
00:48:35,327 --> 00:48:36,607
With the things that I typed in

1105
00:48:37,119 --> 00:48:43,007
But couldn't actually be called by Windows cuz it was just a sub box didn't do it I could do anything and wasn't in the format that it wanted and terms

1106
00:48:44,030 --> 00:48:45,054
Blinking us

1107
00:48:46,590 --> 00:48:47,358
What this is

1108
00:48:47,614 --> 00:48:48,382
Empty

1109
00:48:48,639 --> 00:48:49,663
Is a function death

1110
00:48:50,431 --> 00:48:51,967
Now hopefully most people have

1111
00:48:52,222 --> 00:48:55,038
Are coming from other programming languages to have a passing familiarity with

1112
00:48:55,550 --> 00:48:56,318
What function is

1113
00:48:56,831 --> 00:48:59,135
So I won't belabor the point too much

1114
00:48:59,391 --> 00:49:00,414
Paisley what a function is

1115
00:49:01,182 --> 00:49:02,206
Is it something

1116
00:49:02,463 --> 00:49:03,999
It's sort of a reusable piece

1117
00:49:04,510 --> 00:49:05,023
Summer program

1118
00:49:05,534 --> 00:49:09,886
It's something where I can put some code in I can I can put some stuff in that it can do

1119
00:49:10,655 --> 00:49:11,935
And then I can use it

1120
00:49:12,190 --> 00:49:13,214
Anywhere I want to

1121
00:49:13,471 --> 00:49:17,054
So anytime I want to basically go do the things that the function does

1122
00:49:17,567 --> 00:49:18,847
I can do what's called a function

1123
00:49:19,103 --> 00:49:19,615
Call

1124
00:49:20,382 --> 00:49:21,663
And I can call into it

1125
00:49:21,918 --> 00:49:23,454
Now without actually

1126
00:49:23,710 --> 00:49:24,222
Explaining

1127
00:49:24,478 --> 00:49:25,502
The signature quite yet

1128
00:49:25,759 --> 00:49:28,574
We can actually see this in action

1129
00:49:29,599 --> 00:49:31,903
By moving the line that printed stuff out

1130
00:49:32,414 --> 00:49:33,438
Into

1131
00:49:33,951 --> 00:49:34,974
My function that I defy

1132
00:49:35,231 --> 00:49:36,767
Find before now when I run

1133
00:49:37,023 --> 00:49:39,070
You will notice I no longer get

1134
00:49:39,327 --> 00:49:39,839
The printout

1135
00:49:40,606 --> 00:49:41,119
You know

1136
00:49:41,375 --> 00:49:41,887
It's not there

1137
00:49:42,911 --> 00:49:43,934
Too bad

1138
00:49:44,447 --> 00:49:45,983
How do I actually do it well

1139
00:49:46,494 --> 00:49:48,286
I just function called that function

1140
00:49:48,543 --> 00:49:50,079
And now the thing is that it does

1141
00:49:50,335 --> 00:49:51,358
Get done where the

1142
00:49:51,614 --> 00:49:52,126
Function call

1143
00:49:52,639 --> 00:49:53,407
You can see now

1144
00:49:53,663 --> 00:49:54,431
Carpenter

1145
00:49:55,199 --> 00:49:58,782
Seriously what function is it something that holds some code for us

1146
00:50:00,063 --> 00:50:01,343
In a way that we can reuse

1147
00:50:02,367 --> 00:50:03,647
Encoding is about

1148
00:50:03,902 --> 00:50:07,998
We use a lot there's a lot of stuff encoding that has to do with sort of

1149
00:50:08,255 --> 00:50:11,070
Building little pieces then work together to make a program

1150
00:50:11,327 --> 00:50:12,607
It's very very difficult

1151
00:50:12,862 --> 00:50:15,422
If you were to sit down and write the entire program in one function

1152
00:50:15,679 --> 00:50:17,983
That would be really really difficult to do

1153
00:50:18,239 --> 00:50:20,286
And it's a lot of reasons why you would not want to do that

1154
00:50:20,798 --> 00:50:22,846
Which hopefully with my parents we go on but

1155
00:50:23,614 --> 00:50:26,174
That is what function is and now you'll notice our function

1156
00:50:26,431 --> 00:50:27,454
How to draw the parts to it

1157
00:50:28,222 --> 00:50:30,014
The first thing it has its word void

1158
00:50:30,782 --> 00:50:34,623
What the word void means there's this section before the name of the function

1159
00:50:34,878 --> 00:50:35,391
Images fear

1160
00:50:35,902 --> 00:50:37,182
This section here

1161
00:50:37,951 --> 00:50:39,231
Tells us if the function

1162
00:50:39,487 --> 00:50:40,767
Returns anything

1163
00:50:41,534 --> 00:50:42,558
And what that means is

1164
00:50:42,815 --> 00:50:46,398
When this function is called by somebody when someone asks it to do the work

1165
00:50:47,422 --> 00:50:49,726
Does it provide anything back

1166
00:50:50,239 --> 00:50:50,751
Two dots

1167
00:50:51,007 --> 00:50:53,311
To that call or to the person who invokes it

1168
00:50:53,822 --> 00:50:55,358
And it's actually more ways

1169
00:50:55,614 --> 00:50:58,174
But you can actually have that happen than just this

1170
00:50:58,431 --> 00:51:00,478
This is the most basic way

1171
00:51:01,503 --> 00:51:03,550
What void means in C

1172
00:51:04,063 --> 00:51:05,343
Is basically nothing

1173
00:51:05,599 --> 00:51:06,623
It's like saying

1174
00:51:06,878 --> 00:51:07,646
I don't

1175
00:51:08,159 --> 00:51:08,671
Provide anything

1176
00:51:09,182 --> 00:51:11,230
I am not going to give you something

1177
00:51:11,742 --> 00:51:12,766
When you call me

1178
00:51:13,791 --> 00:51:19,934
So the void in front of food just says this function produces no value for its color it does not act

1179
00:51:20,190 --> 00:51:21,471
Chile return

1180
00:51:21,726 --> 00:51:23,007
Anything to the person who called me

1181
00:51:24,286 --> 00:51:25,822
The next part of our function decoration

1182
00:51:26,335 --> 00:51:26,847
You can see here

1183
00:51:27,103 --> 00:51:28,383
In parentheses

1184
00:51:28,639 --> 00:51:29,663
Is another voice

1185
00:51:29,918 --> 00:51:33,246
And what that is is sort of the opposite of The Return part

1186
00:51:33,503 --> 00:51:36,063
It's what does this function expect to get

1187
00:51:36,831 --> 00:51:37,855
From the person who called it

1188
00:51:38,110 --> 00:51:38,878
So what

1189
00:51:39,135 --> 00:51:40,927
Things are going to be sent

1190
00:51:41,182 --> 00:51:44,766
Down to this function in order to get it to do the work that it needs to do

1191
00:51:45,278 --> 00:51:48,351
And as you can see it also void which means nothing

1192
00:51:48,606 --> 00:51:51,679
This is a function that returns nothing and takes nothing

1193
00:51:51,934 --> 00:51:52,702
And of course

1194
00:51:52,958 --> 00:51:55,006
That makes perfect sense given the fact that

1195
00:51:55,518 --> 00:51:56,542
Outputdebugstring

1196
00:51:56,798 --> 00:51:57,822
Just print out of string

1197
00:51:58,590 --> 00:51:59,871
It doesn't need anything to do it

1198
00:52:00,894 --> 00:52:01,407
So

1199
00:52:02,686 --> 00:52:03,454
That is our function

1200
00:52:03,967 --> 00:52:09,086
Apps that you can see these little plus and minus is he related to collapse functions if you're trying to

1201
00:52:11,391 --> 00:52:11,903
So

1202
00:52:12,159 --> 00:52:12,927
After that

1203
00:52:13,182 --> 00:52:16,766
Which is basically the thing that tells us it's called the function prototype

1204
00:52:17,023 --> 00:52:18,047
Piper the function signature

1205
00:52:18,559 --> 00:52:19,327
This right here

1206
00:52:19,838 --> 00:52:20,606
This is called

1207
00:52:24,190 --> 00:52:24,702
Prototype

1208
00:52:25,726 --> 00:52:27,262
And what it does is based

1209
00:52:29,311 --> 00:52:30,591
It defines the circumstances

1210
00:52:31,103 --> 00:52:32,383
If you will for how the function

1211
00:52:32,639 --> 00:52:34,431
Just called what does it take what does it return

1212
00:52:34,943 --> 00:52:36,735
We then have the function body

1213
00:52:37,246 --> 00:52:40,574
This part right here is a function body oh and I will note

1214
00:52:40,831 --> 00:52:41,855
This right here

1215
00:52:42,623 --> 00:52:43,646
DS2 of flashes

1216
00:52:44,159 --> 00:52:45,182
What is something that says

1217
00:52:45,438 --> 00:52:48,254
I'm about to type some stuff that's just a note to myself it's a comment

1218
00:52:48,766 --> 00:52:50,814
It has nothing to do with the code

1219
00:52:51,327 --> 00:52:52,095
But if that's something

1220
00:52:52,351 --> 00:52:53,887
You know what to do with my thought process

1221
00:52:54,398 --> 00:52:57,471
SOC allows me to do that anywhere I want to

1222
00:52:57,726 --> 00:53:00,286
C &amp; C plus plus have to start with comments there's this kind

1223
00:53:02,847 --> 00:53:07,967
Which are bracketed by these little guys which is a lot like HTML a favor program HTML you know

1224
00:53:08,222 --> 00:53:09,503
You've got these two things

1225
00:53:10,271 --> 00:53:12,575
Right if you can use to enclose things and quotes

1226
00:53:12,831 --> 00:53:15,903
Enclosed things as a comment but doesn't actually process

1227
00:53:16,414 --> 00:53:21,023
So that's something that doesn't there and that basically says from here everything ignore until you see one of these

1228
00:53:21,278 --> 00:53:23,583
Right so can be multiple lines and all that stuff

1229
00:53:24,351 --> 00:53:27,166
This kind is a kind of was introduced with C++

1230
00:53:28,447 --> 00:53:30,751
And what that does is it says ignore them to the end of the line

1231
00:53:31,007 --> 00:53:32,287
Get to the end of the line

1232
00:53:32,543 --> 00:53:33,311
Star-Crossed

1233
00:53:33,822 --> 00:53:37,663
And that's just a sweetie cut down on some typing it means you didn't have to type one of these at the end

1234
00:53:37,918 --> 00:53:39,199
It's a little convenient

1235
00:53:39,710 --> 00:53:42,014
It's not really that important but you'll find it's more convenient

1236
00:53:42,271 --> 00:53:43,039
I just typed

1237
00:53:44,063 --> 00:53:47,646
So anyway that's the Prototype of my function in this is the body

1238
00:53:47,902 --> 00:53:48,926
The body of the function

1239
00:53:49,182 --> 00:53:51,230
Is what it actually exit

1240
00:53:52,255 --> 00:53:54,559
So when this function is invoked

1241
00:53:54,815 --> 00:53:56,606
This is the code that will occur

1242
00:53:57,119 --> 00:53:59,934
And everything in between these two curly braces

1243
00:54:00,447 --> 00:54:02,239
Are things that will occur

1244
00:54:02,751 --> 00:54:04,287
So all the codes we put in here

1245
00:54:04,798 --> 00:54:05,567
Will occur

1246
00:54:05,822 --> 00:54:06,590
On invitation

1247
00:54:06,847 --> 00:54:07,359
The function

1248
00:54:09,407 --> 00:54:10,175
Principal right

1249
00:54:10,686 --> 00:54:11,454
Not much to it

1250
00:54:11,710 --> 00:54:12,734
And you can see

1251
00:54:12,990 --> 00:54:17,086
You really don't need much else understand what our function actually does the code Inside the Box

1252
00:54:17,342 --> 00:54:18,110
Office Depot

1253
00:54:18,367 --> 00:54:19,135
Because all it does

1254
00:54:19,391 --> 00:54:20,671
Is it called another function

1255
00:54:21,438 --> 00:54:22,462
A function we didn't Define

1256
00:54:22,974 --> 00:54:24,766
Call output debug string a

1257
00:54:25,534 --> 00:54:26,558
And I'm going to check out the as

1258
00:54:28,094 --> 00:54:29,375
Anyway as you can see

1259
00:54:29,630 --> 00:54:31,166
When I want to call the function

1260
00:54:31,679 --> 00:54:33,726
Syntax actually looks something like

1261
00:54:33,983 --> 00:54:34,751
The Prototype

1262
00:54:36,030 --> 00:54:37,567
These parentheses here

1263
00:54:37,822 --> 00:54:40,126
Most likely to find what I was going to take

1264
00:54:40,894 --> 00:54:42,175
These parentheses

1265
00:54:42,431 --> 00:54:43,711
Contain the things

1266
00:54:44,222 --> 00:54:45,246
That I'm going to pass

1267
00:54:45,759 --> 00:54:46,271
To the function

1268
00:54:47,039 --> 00:54:47,807
So in this case

1269
00:54:48,318 --> 00:54:49,086
I didn't take anything

1270
00:54:49,599 --> 00:54:50,623
Equity Bank Spring

1271
00:54:51,135 --> 00:54:51,903
Takes a string

1272
00:54:52,159 --> 00:54:52,927
NC

1273
00:54:53,182 --> 00:54:54,206
The way that you define

1274
00:54:54,463 --> 00:54:55,487
A basic string

1275
00:54:55,742 --> 00:54:56,510
Just a simple spring

1276
00:54:56,766 --> 00:54:57,534
Easy book quotes

1277
00:54:58,047 --> 00:54:58,559
Double quotes

1278
00:54:59,070 --> 00:55:00,606
Anything in between the double quotes

1279
00:55:00,862 --> 00:55:01,886
It's part of the strain

1280
00:55:02,398 --> 00:55:02,911
So

1281
00:55:03,166 --> 00:55:04,702
This is a string that I have made

1282
00:55:04,958 --> 00:55:07,774
And I'm passing it to Alba TX train so that you can print it out

1283
00:55:08,030 --> 00:55:10,078
Apple TV screen is a function

1284
00:55:10,335 --> 00:55:10,847
That works

1285
00:55:11,103 --> 00:55:14,686
With the operating system in order to actually send stuff to our debug output

1286
00:55:15,454 --> 00:55:15,967
Which

1287
00:55:16,222 --> 00:55:18,014
Betty Buttercup Frozen Prince over here

1288
00:55:18,271 --> 00:55:23,647
Now we'll talk a little bit more about that although debugging services on Windows is probably not something we're going to cover into much detail

1289
00:55:23,902 --> 00:55:25,950
But I will talk a little bit more about how that stuff works

1290
00:55:26,463 --> 00:55:29,278
More in-depth after we kind of go through in are more comfortable with just basic

1291
00:55:29,534 --> 00:55:30,047
Sexy code

1292
00:55:30,815 --> 00:55:31,327
Okay

1293
00:55:31,838 --> 00:55:33,375
So after that function is called

1294
00:55:33,630 --> 00:55:34,911
You'll notice there's a semicolon

1295
00:55:35,679 --> 00:55:41,822
A semicolon is a weigh-in see of telling the compiler that you're finished with a particular logical line of coke

1296
00:55:42,590 --> 00:55:44,894
Now it's not a particularly useless piece of syntax

1297
00:55:45,407 --> 00:55:46,943
Not particularly useful

1298
00:55:47,199 --> 00:55:49,503
Pizza syntax it is a relatively useless

1299
00:55:49,759 --> 00:55:50,271
Pizza Center

1300
00:55:50,782 --> 00:55:52,318
A lot of things just don't need semicolon

1301
00:55:52,831 --> 00:55:56,671
In a lot of languages only semicolons once in awhile or end-of-line 2 limited license

1302
00:55:57,182 --> 00:55:58,206
Understatement

1303
00:55:59,231 --> 00:56:02,815
The beastly all doesn't see in C plus plus is what the compiler know

1304
00:56:03,070 --> 00:56:05,118
That the things on that line

1305
00:56:05,375 --> 00:56:06,655
Other things that were part

1306
00:56:06,911 --> 00:56:09,471
Of a logical piece of code have now concluded

1307
00:56:09,983 --> 00:56:14,847
And so there might be more things on here that are part of this logical line of code and we'll start to see more of those later

1308
00:56:15,103 --> 00:56:17,150
The base of a semicolon says that the end

1309
00:56:17,663 --> 00:56:18,943
And that's called a statement

1310
00:56:19,710 --> 00:56:22,014
One line of code like that terminate by semicolon

1311
00:56:22,271 --> 00:56:24,575
Because it could actually go on for longer

1312
00:56:25,086 --> 00:56:27,391
The End of Line actual end of the text line

1313
00:56:27,902 --> 00:56:28,926
Doesn't really mean anything

1314
00:56:29,182 --> 00:56:29,695
MC plus plus

1315
00:56:29,951 --> 00:56:33,534
It's not like python or languages were white-faced mean something

1316
00:56:34,047 --> 00:56:35,583
In general like this

1317
00:56:35,838 --> 00:56:37,630
Whiteface here that I use to indent

1318
00:56:37,887 --> 00:56:38,655
To put this thing

1319
00:56:38,911 --> 00:56:41,215
So I could see that was part of the function more easily

1320
00:56:41,471 --> 00:56:42,751
That's really my decision

1321
00:56:43,007 --> 00:56:45,567
She doesn't care she just doesn't care about that

1322
00:56:45,822 --> 00:56:47,614
Cimorelli it doesn't care about this white space

1323
00:56:47,871 --> 00:56:50,431
Basically the only time Serie to care about white space

1324
00:56:50,943 --> 00:56:54,527
Would be if you were to insert it into something it was supposed to be a single name

1325
00:56:55,039 --> 00:56:56,575
Whiteface does breakup name

1326
00:56:57,342 --> 00:56:59,902
NC and so basically output debug

1327
00:57:00,159 --> 00:57:00,927
String a

1328
00:57:01,182 --> 00:57:06,559
Would not work if I were to compile this you would see that it would say that it doesn't know what output debug is

1329
00:57:07,070 --> 00:57:11,166
And the reason is because I Saw the space and thought that was a complete name that it's just hard to look

1330
00:57:11,422 --> 00:57:12,958
And see what it means and it can't do that

1331
00:57:13,983 --> 00:57:15,775
Something to get rid of that and go back to where we were

1332
00:57:16,798 --> 00:57:19,103
So anyway that is basically

1333
00:57:19,358 --> 00:57:20,382
How a line of code look

1334
00:57:20,639 --> 00:57:21,151
NCAA

1335
00:57:21,407 --> 00:57:21,919
Inside function

1336
00:57:23,454 --> 00:57:23,967
No

1337
00:57:24,478 --> 00:57:27,550
Let's go down to a more complicated function over here at the one that Windows call

1338
00:57:28,574 --> 00:57:32,670
So if you look here it's got a whole lot of decoration on it a lot more than we have here

1339
00:57:33,438 --> 00:57:35,742
Got something called in the beginning that we know

1340
00:57:35,998 --> 00:57:37,022
That is the place

1341
00:57:37,278 --> 00:57:40,606
Where the return value goes where the thing that comes back from the function

1342
00:57:41,119 --> 00:57:41,631
His place

1343
00:57:42,398 --> 00:57:42,911
Miss

1344
00:57:43,166 --> 00:57:43,934
In this case

1345
00:57:44,190 --> 00:57:46,494
10th and C is a special keyword

1346
00:57:46,751 --> 00:57:50,079
It means editor so much like Boyd is a specialty word in seed

1347
00:57:50,335 --> 00:57:51,358
It tells it nothing

1348
00:57:52,126 --> 00:57:54,686
Isabella keyword that says an integer value

1349
00:57:54,943 --> 00:57:56,479
He's going to come back a number

1350
00:57:56,990 --> 00:57:59,550
Basically a whole number -5

1351
00:57:59,806 --> 00:58:00,318
12

1352
00:58:00,574 --> 00:58:01,086
Something like this

1353
00:58:01,599 --> 00:58:02,879
Is going to be returned

1354
00:58:03,135 --> 00:58:03,903
From this function

1355
00:58:04,159 --> 00:58:05,439
To whoever called it

1356
00:58:05,695 --> 00:58:06,463
Whenever they call it

1357
00:58:07,742 --> 00:58:08,255
Call back

1358
00:58:09,534 --> 00:58:11,838
Is a piece of syntactic icing

1359
00:58:13,119 --> 00:58:13,631
Which

1360
00:58:14,398 --> 00:58:16,958
Actually expands to something else entirely

1361
00:58:17,471 --> 00:58:19,775
It is what we call a macro in C

1362
00:58:20,030 --> 00:58:22,846
And we'll look at those little bit later on when I dive into this windows at age 5

1363
00:58:23,358 --> 00:58:25,918
And basically what it does is it expands

1364
00:58:26,431 --> 00:58:28,735
To some special decorations that are used

1365
00:58:29,246 --> 00:58:31,806
Only in Windows

1366
00:58:32,063 --> 00:58:33,855
Only for this particular Windows called

1367
00:58:34,367 --> 00:58:35,647
And it's decoration

1368
00:58:36,159 --> 00:58:38,206
That tells the Linker

1369
00:58:38,719 --> 00:58:39,742
And the compiler

1370
00:58:40,255 --> 00:58:42,047
The dysfunction is special

1371
00:58:42,302 --> 00:58:45,630
It is a function that must adhere to a special convention

1372
00:58:46,398 --> 00:58:51,007
Because since Windows was not compiled as part of our program and our program is not

1373
00:58:51,262 --> 00:58:52,286
Compile this part of windows

1374
00:58:53,311 --> 00:58:58,175
They will have to agree on how functions are called that makes

1375
00:58:58,431 --> 00:58:59,711
They will have to agree on a

1376
00:59:00,478 --> 00:59:03,806
And we'll talk about that little more when we start to talk about exactly how she actually generates

1377
00:59:04,063 --> 00:59:04,575
Access code

1378
00:59:05,086 --> 00:59:06,110
I think I'll probably be next

1379
00:59:06,367 --> 00:59:06,879
Next

1380
00:59:07,391 --> 00:59:07,903
Xvideo

1381
00:59:09,182 --> 00:59:09,695
So anyway

1382
00:59:09,951 --> 00:59:14,815
Put that in the back of your mind for now but suffice to say this is a special macro that we're going to look at in the future that

1383
00:59:15,070 --> 00:59:15,583
Tells

1384
00:59:15,838 --> 00:59:17,375
The compiler and the Linker

1385
00:59:17,630 --> 00:59:22,750
That this is a special function not like our run-of-the-mill function and then it has certain constraints that have to be met

1386
00:59:23,007 --> 00:59:23,775
Why does the pile

1387
00:59:24,543 --> 00:59:29,151
We then have the parameters to the function the things up a collar provide these are things that are being

1388
00:59:29,407 --> 00:59:31,454
Passenger the function that the function can use

1389
00:59:31,710 --> 00:59:33,758
We didn't use any recent void here

1390
00:59:34,014 --> 00:59:35,038
But women uses

1391
00:59:35,295 --> 00:59:35,807
A few

1392
00:59:36,574 --> 00:59:38,622
A few

1393
00:59:38,878 --> 00:59:39,646
It has access

1394
00:59:40,927 --> 00:59:42,719
The first one is HSN

1395
00:59:43,231 --> 00:59:45,791
Is actually just a handle to ourselves

1396
00:59:46,302 --> 00:59:49,118
What it is it's basically a handle that we can use

1397
00:59:49,887 --> 00:59:52,959
When were talking to windows again if we should do to talk to Windows

1398
00:59:53,471 --> 00:59:55,775
To refer to our running program

1399
00:59:56,286 --> 01:00:02,430
So for example let's say we need to do something that is very window specific everyone knows their service ever going to ask the windows car

1400
01:00:02,943 --> 01:00:05,759
Hey we need you to do something to a running executable

1401
01:00:06,014 --> 01:00:10,366
We need you to tell us about the memory this using we're going to we're going to access Addie bookkeeper

1402
01:00:10,623 --> 01:00:11,646
Reducing stuff

1403
01:00:11,902 --> 01:00:13,694
And where specifically referencing

1404
01:00:13,951 --> 01:00:18,302
This copy our copy in memory of our executable code

1405
01:00:18,815 --> 01:00:20,095
That is what this handled does

1406
01:00:20,351 --> 01:00:24,191
Is a handle that a lot that we can pass back to Windows to refer to ourselves

1407
01:00:24,958 --> 01:00:26,494
Turns out you don't really need to

1408
01:00:26,751 --> 01:00:28,031
Actually remember this or use it for

1409
01:00:29,054 --> 01:00:30,590
Because most the time you can get if I back down

1410
01:00:31,358 --> 01:00:31,871
I will cover that way

1411
01:00:32,894 --> 01:00:36,222
Free Vincent you can completely ignore is Legacy thing

1412
01:00:36,478 --> 01:00:39,550
You will never need it in game programming is basically something

1413
01:00:40,063 --> 01:00:43,391
That you needed to use in older versions of Windows sometimes

1414
01:00:43,646 --> 01:00:44,927
In order to do things

1415
01:00:45,695 --> 01:00:48,255
That had to do with previous runs of your programmer things like this

1416
01:00:48,510 --> 01:00:50,558
Previous versions of your program that we're running in memory

1417
01:00:51,838 --> 01:00:53,630
This right here

1418
01:00:54,655 --> 01:00:55,679
Much like this string

1419
01:00:56,190 --> 01:00:57,471
But we created this

1420
01:00:57,726 --> 01:00:59,518
This is the first time you've actually printed store

1421
01:01:00,543 --> 01:01:02,335
Miss LP store LP command line

1422
01:01:03,103 --> 01:01:04,383
Is basically

1423
01:01:04,639 --> 01:01:05,151
What

1424
01:01:05,407 --> 01:01:06,431
Got sent to us

1425
01:01:06,686 --> 01:01:07,710
When We Were Young

1426
01:01:08,478 --> 01:01:08,990
No

1427
01:01:09,246 --> 01:01:10,527
The interesting thing about that

1428
01:01:10,782 --> 01:01:13,342
Is although it's called LP command line

1429
01:01:13,599 --> 01:01:16,671
It is referring to it as if we're going to call something from a command line

1430
01:01:17,182 --> 01:01:20,255
Which we have not talked about yet and you may have no idea what it is

1431
01:01:20,510 --> 01:01:21,023
But

1432
01:01:21,534 --> 01:01:22,558
I will show you briefly

1433
01:01:22,815 --> 01:01:24,606
What it actually is if you go into

1434
01:01:24,862 --> 01:01:25,630
All programs

1435
01:01:25,887 --> 01:01:26,911
You can go to a thing

1436
01:01:27,166 --> 01:01:29,214
Call accessories and in accessories

1437
01:01:29,471 --> 01:01:31,007
There is a command prompt

1438
01:01:32,030 --> 01:01:34,078
If you go to that you will get this thing

1439
01:01:34,590 --> 01:01:37,918
This is a command line and we will be talking about how to use it later

1440
01:01:38,431 --> 01:01:43,807
But what allows you to do is it allows you to run things like I can run notepad for example from it

1441
01:01:44,831 --> 01:01:46,623
He loves you to run things and you can pass

1442
01:01:46,878 --> 01:01:49,182
Stuff to them on fear that they will receive

1443
01:01:49,695 --> 01:01:53,791
Nekros I tried to pass that if you like I don't know what you're talking about cuz notepad doesn't

1444
01:01:54,047 --> 01:01:54,559
Want to hear any of that

1445
01:01:55,838 --> 01:01:58,143
But when you look at this you'll think of LT command line

1446
01:01:58,655 --> 01:01:59,167
Well

1447
01:01:59,422 --> 01:02:04,030
I don't need that cuz my things not going to be called from the command line and we just talked about the brave genius episode

1448
01:02:04,286 --> 01:02:04,798
The fact that

1449
01:02:05,054 --> 01:02:07,870
We're not going to be building a console application or command line application

1450
01:02:08,126 --> 01:02:10,174
So I don't care about that well not exactly true

1451
01:02:10,943 --> 01:02:12,223
If you go in here

1452
01:02:12,478 --> 01:02:14,782
And you open up something let's say

1453
01:02:15,039 --> 01:02:16,319
Notepad itself

1454
01:02:16,574 --> 01:02:17,342
Can I go to property

1455
01:02:17,855 --> 01:02:18,878
You will notice

1456
01:02:19,135 --> 01:02:20,415
But there's a bunch of stuff in here

1457
01:02:21,182 --> 01:02:22,463
Well this target line

1458
01:02:22,719 --> 01:02:23,742
Simon Says Target

1459
01:02:25,023 --> 01:02:27,838
It actually allows you to put the command line after

1460
01:02:29,119 --> 01:02:31,679
So it's entirely possible to shift Windows programs

1461
01:02:31,934 --> 01:02:36,286
Are not run from the command line it will never be no one will ever run them there

1462
01:02:36,798 --> 01:02:38,335
It's still take a command line

1463
01:02:38,847 --> 01:02:40,639
And so it's important to know that that's there

1464
01:02:41,407 --> 01:02:42,687
I know there's other ways to get that

1465
01:02:43,454 --> 01:02:44,222
We'll talk about

1466
01:02:46,271 --> 01:02:47,295
And finally

1467
01:02:47,550 --> 01:02:48,574
Anchorman show

1468
01:02:48,831 --> 01:02:50,367
It's basically a parameter

1469
01:02:50,623 --> 01:02:51,646
But just back again

1470
01:02:51,902 --> 01:02:53,950
To this disorder properties

1471
01:02:54,719 --> 01:02:55,999
I don't even know if it

1472
01:02:56,255 --> 01:02:57,023
Still there

1473
01:02:57,791 --> 01:02:59,071
I'm just going to see if it is

1474
01:03:01,119 --> 01:03:01,631
Vans

1475
01:03:02,655 --> 01:03:03,423
No

1476
01:03:03,934 --> 01:03:04,447
Teeth

1477
01:03:04,702 --> 01:03:05,215
Hotels compare

1478
01:03:05,726 --> 01:03:06,239
Purity

1479
01:03:07,775 --> 01:03:09,567
I don't know what that is

1480
01:03:12,382 --> 01:03:15,710
Can you list it for legacy reasons no almost no one ever uses

1481
01:03:15,967 --> 01:03:16,479
Best butt

1482
01:03:16,735 --> 01:03:22,878
There's still a drop-down that says whether you want to run a particular application minimize or maximize or just in the normal window

1483
01:03:23,135 --> 01:03:23,647
So that it would open

1484
01:03:24,159 --> 01:03:25,951
If it wasn't told to do anything specific well

1485
01:03:26,206 --> 01:03:27,742
That gets passed to you right

1486
01:03:27,998 --> 01:03:29,534
Shear n Comanche

1487
01:03:30,815 --> 01:03:32,351
And that is basically a number

1488
01:03:32,862 --> 01:03:33,886
That corresponds

1489
01:03:34,143 --> 01:03:36,702
To which of those things was selected and we'll look at that in

1490
01:03:37,215 --> 01:03:39,775
In a little more detail later it's not exciting but you know

1491
01:03:40,286 --> 01:03:41,310
Might as well if they're

1492
01:03:42,079 --> 01:03:46,687
Play me those are things that we are passing me start up and then we have another function body just like we had up here

1493
01:03:47,199 --> 01:03:50,271
And we call function just like this. A function in that function is our road

1494
01:03:51,039 --> 01:03:52,319
And it does apathy books

1495
01:03:53,342 --> 01:03:54,110
That is

1496
01:03:54,623 --> 01:03:55,903
A complete C program

1497
01:03:56,159 --> 01:03:57,439
With a function calling it even

1498
01:03:57,951 --> 01:04:01,534
But that you don't quite know everything about because there's things in here

1499
01:04:01,791 --> 01:04:02,559
Dinner

1500
01:04:02,815 --> 01:04:03,327
Define dusk

1501
01:04:03,838 --> 01:04:05,119
And so the question becomes

1502
01:04:05,630 --> 01:04:06,143
Well

1503
01:04:06,398 --> 01:04:08,190
You know if I was to do this

1504
01:04:09,983 --> 01:04:11,007
Far Western just run that

1505
01:04:12,286 --> 01:04:14,078
You will notice that I couldn't do it

1506
01:04:14,590 --> 01:04:15,614
Because it says

1507
01:04:15,871 --> 01:04:17,407
Who identify was not

1508
01:04:17,663 --> 01:04:18,175
Found

1509
01:04:18,431 --> 01:04:19,454
Cuz I deleted

1510
01:04:19,710 --> 01:04:20,990
That from my program

1511
01:04:21,759 --> 01:04:22,271
And

1512
01:04:22,782 --> 01:04:23,806
When we get to the

1513
01:04:24,063 --> 01:04:24,831
Welcome

1514
01:04:25,086 --> 01:04:26,110
I should mention weather thing

1515
01:04:27,135 --> 01:04:28,671
You may wonder if this point

1516
01:04:29,182 --> 01:04:33,791
Since there was no Foo why wasn't that a linker-error instead of a compilation error

1517
01:04:34,047 --> 01:04:37,630
This is the compilation there remember I said in the past the Linker is the thing

1518
01:04:37,887 --> 01:04:40,191
That gathers things up into one

1519
01:04:40,447 --> 01:04:43,519
Peace so that they can essentially be

1520
01:04:44,286 --> 01:04:45,054
Taken

1521
01:04:45,311 --> 01:04:48,894
And and made into and have their references sorted

1522
01:04:49,150 --> 01:04:52,478
We combined all point to each other in the proper way

1523
01:04:52,735 --> 01:04:54,782
You would think of that era would come then right

1524
01:04:55,039 --> 01:04:56,575
Why does it come drink compilation

1525
01:04:56,831 --> 01:05:00,927
Because it should have come at the step when people try to resolve reference as well the reason for that

1526
01:05:01,438 --> 01:05:03,486
Iams this is actually a good thing to bring up

1527
01:05:03,742 --> 01:05:04,255
I'm happy that

1528
01:05:05,278 --> 01:05:06,815
Better that I remember that

1529
01:05:07,327 --> 01:05:08,863
What are the reasons

1530
01:05:09,119 --> 01:05:11,166
But that happens is because C

1531
01:05:11,934 --> 01:05:17,567
And C plus plus are languages in which you are never allowed to use something which has not been defined yet

1532
01:05:18,079 --> 01:05:19,103
NC

1533
01:05:19,358 --> 01:05:20,894
There were looser restrictions on this

1534
01:05:21,150 --> 01:05:24,222
And so it some things and see would work even if you didn't

1535
01:05:24,478 --> 01:05:26,270
Define Minuet in C plus plus date

1536
01:05:26,527 --> 01:05:28,574
Titans that down they tighten the ratchet on that

1537
01:05:28,831 --> 01:05:31,391
So you always have to find things before they are called

1538
01:05:31,646 --> 01:05:33,694
Since this isn't defined it can't be called

1539
01:05:33,951 --> 01:05:37,278
Now that many leaves you wondering if you can't

1540
01:05:38,559 --> 01:05:40,095
If you can't actually

1541
01:05:40,862 --> 01:05:42,143
Call something unless it's

1542
01:05:42,398 --> 01:05:45,471
Define well how are there ever unresolved external symbols

1543
01:05:47,775 --> 01:05:48,543
The answer to that

1544
01:05:48,798 --> 01:05:51,614
Issy allows you to do what's called a forward declaration

1545
01:05:52,126 --> 01:05:54,431
Functions are split into two parts essentially

1546
01:05:54,686 --> 01:05:55,454
They are split

1547
01:05:55,710 --> 01:05:56,990
Into a declaration

1548
01:05:57,759 --> 01:05:58,527
And the definition

1549
01:05:59,550 --> 01:06:01,855
Now definition is the full thing

1550
01:06:02,110 --> 01:06:03,134
It's the full function

1551
01:06:03,391 --> 01:06:07,487
It has the Prototype and it's got the body so it actually is the thing that you need

1552
01:06:07,742 --> 01:06:08,510
If you want to run it

1553
01:06:09,023 --> 01:06:13,631
But you could instead make just what's called a declaration and a declaration

1554
01:06:13,887 --> 01:06:14,655
Looks like this

1555
01:06:15,166 --> 01:06:15,934
It is the first

1556
01:06:29,246 --> 01:06:30,527
Don't you just love the pretty green,

1557
01:06:31,039 --> 01:06:31,551
They're so lovely

1558
01:06:32,574 --> 01:06:33,598
Anyway

1559
01:06:34,367 --> 01:06:35,135
Inside here

1560
01:06:35,646 --> 01:06:38,719
We basically have the same exact stuff that we had here

1561
01:06:38,974 --> 01:06:41,022
But instead of it actually

1562
01:06:41,534 --> 01:06:43,070
Providing the body it just

1563
01:06:43,327 --> 01:06:46,399
Put the semicolon and ends if they still use that I'm done

1564
01:06:46,911 --> 01:06:49,215
Semicolon marker to say I'm not actually tell you the body

1565
01:06:49,471 --> 01:06:50,751
I'm just going to tell you the signature

1566
01:06:51,775 --> 01:06:52,287
And

1567
01:06:52,798 --> 01:06:54,590
Once you have that signature

1568
01:06:54,847 --> 01:06:56,639
You will see that I can actually build

1569
01:06:56,894 --> 01:07:00,478
And you will notice that now or compile error has become a link error

1570
01:07:00,735 --> 01:07:05,343
And the reason I care is because now it's legal to call the function during compilation

1571
01:07:05,599 --> 01:07:07,646
And it the compiler will just assume

1572
01:07:08,159 --> 01:07:14,302
That since it has all the information used to call the function which is the signature knows what it needs to pass it knows what it will get back

1573
01:07:14,559 --> 01:07:15,839
It just goes ahead and does

1574
01:07:16,094 --> 01:07:17,630
The compilation that started to

1575
01:07:17,887 --> 01:07:19,423
Producer call and leaves

1576
01:07:19,679 --> 01:07:21,471
Essentially marker that it says hey

1577
01:07:21,726 --> 01:07:22,239
Linker

1578
01:07:22,494 --> 01:07:24,286
When you find this function

1579
01:07:24,798 --> 01:07:26,846
Please pass it in here because I would like to call it

1580
01:07:27,871 --> 01:07:28,383
All right

1581
01:07:30,686 --> 01:07:33,502
This is quite via the laryngitis seducing

1582
01:07:34,271 --> 01:07:35,807
Stream I'm going to have to talk quieter

1583
01:07:36,831 --> 01:07:37,343
Anyway

1584
01:07:39,135 --> 01:07:39,647
So

1585
01:07:41,182 --> 01:07:42,974
We actually fully defined our funk

1586
01:07:43,487 --> 01:07:45,023
So we have a fully buildable program

1587
01:07:45,791 --> 01:07:46,303
But

1588
01:07:46,559 --> 01:07:48,095
Could find this function

1589
01:07:48,862 --> 01:07:50,910
And for that matter you to find me this stuff

1590
01:07:51,422 --> 01:07:53,470
You'll notice that these things in blue

1591
01:07:53,726 --> 01:07:56,286
They're automatically being syntax highlighted by

1592
01:07:56,543 --> 01:07:57,567
Visual Studio

1593
01:07:58,079 --> 01:07:59,103
Bee stings in blue

1594
01:07:59,358 --> 01:08:00,894
They are keywords they're built into the

1595
01:08:01,150 --> 01:08:02,942
Tyler you can actually type these in

1596
01:08:03,199 --> 01:08:04,479
Alongside the brackets

1597
01:08:04,735 --> 01:08:06,015
The semicolons the parentheses

1598
01:08:06,271 --> 01:08:07,807
These are part of the language

1599
01:08:08,318 --> 01:08:12,927
They will work anywhere they will work on any c compiler that you ever want to use

1600
01:08:13,182 --> 01:08:13,951
But all this stuff

1601
01:08:14,463 --> 01:08:18,559
Where did that come from that's not mistaken power units is not turning blue is not a keyword

1602
01:08:18,814 --> 01:08:19,326
I can tell you that

1603
01:08:21,631 --> 01:08:22,655
And neither is this guy

1604
01:08:22,911 --> 01:08:24,703
And we need to find that function somewhere to come from

1605
01:08:25,470 --> 01:08:26,494
The answer is

1606
01:08:27,006 --> 01:08:28,030
Vista find that phone

1607
01:08:28,798 --> 01:08:30,335
So we're going to get to the last line here

1608
01:08:30,846 --> 01:08:31,871
And then we're going to wrap it up

1609
01:08:32,127 --> 01:08:34,687
For tonight because I want to try to keep these two roughly an hour

1610
01:08:34,943 --> 01:08:36,222
And we are about an hour

1611
01:08:37,502 --> 01:08:38,014
So

1612
01:08:39,295 --> 01:08:39,806
Okay

1613
01:08:40,319 --> 01:08:42,367
This is a line which says

1614
01:08:42,878 --> 01:08:44,671
I want you to go find this

1615
01:08:44,926 --> 01:08:45,438
File

1616
01:08:45,951 --> 01:08:47,230
Is actually a file name

1617
01:08:47,487 --> 01:08:49,791
It could have a complete path if you want

1618
01:08:50,814 --> 01:08:51,326
Whatever

1619
01:08:51,582 --> 01:08:52,862
It could be out the full on

1620
01:08:53,118 --> 01:08:55,166
In anything any filename you want to put in there

1621
01:08:55,422 --> 01:08:56,190
Although in general

1622
01:08:56,703 --> 01:09:02,847
Most the time you use for its lashes even though you're on Windows because forward slashes work for includes no matter where you are

1623
01:09:03,359 --> 01:09:05,407
Where is backslash enjoying working windows with us

1624
01:09:06,943 --> 01:09:12,574
Hey play think it's a filename any phylum a drive you can include and really all it means

1625
01:09:12,831 --> 01:09:14,367
For all intensive purposes

1626
01:09:14,622 --> 01:09:16,414
Is go get this file

1627
01:09:17,182 --> 01:09:18,975
Inspect the entire contents of it

1628
01:09:19,487 --> 01:09:19,998
Right here

1629
01:09:20,511 --> 01:09:22,303
I'm so this essentially makes

1630
01:09:22,559 --> 01:09:23,838
Are very simple program

1631
01:09:24,095 --> 01:09:25,887
That's only a dozen or so lines long

1632
01:09:26,654 --> 01:09:28,702
It actually makes this a very long program

1633
01:09:29,215 --> 01:09:30,494
Cuz it goes and

1634
01:09:30,751 --> 01:09:31,775
What's this file

1635
01:09:33,055 --> 01:09:33,567
I should tell you how to do that

1636
01:09:34,078 --> 01:09:35,358
If you right click on one

1637
01:09:35,614 --> 01:09:39,710
And knows where to find it you can go open document and it will jump right to that file

1638
01:09:40,222 --> 01:09:40,734
I just got a nice

1639
01:09:42,783 --> 01:09:44,063
So this is Windows. 8

1640
01:09:44,319 --> 01:09:45,599
Which is the file that we included

1641
01:09:45,854 --> 01:09:46,878
Let me not look like much

1642
01:09:47,390 --> 01:09:50,974
It may look like a bunch of gobbledygook but relatively minor gobbledygook if not

1643
01:09:51,230 --> 01:09:52,510
It's absolutely massive

1644
01:09:52,766 --> 01:09:53,791
And the reason for that

1645
01:09:54,046 --> 01:09:56,350
If it's all just a bunch of more includes

1646
01:09:56,606 --> 01:09:57,886
That's going to include this

1647
01:09:58,399 --> 01:10:00,191
Right it's going to go down here

1648
01:10:00,447 --> 01:10:01,471
And it's going to include

1649
01:10:01,983 --> 01:10:02,494
This

1650
01:10:02,751 --> 01:10:04,030
And it's going to include

1651
01:10:04,287 --> 01:10:05,823
All of these things

1652
01:10:06,078 --> 01:10:06,590
Right

1653
01:10:06,846 --> 01:10:07,358
Who knows

1654
01:10:07,614 --> 01:10:10,430
You got to go interpret all the crazy stuff I don't even know what it's including

1655
01:10:10,686 --> 01:10:14,015
And all those things include more things happening things

1656
01:10:14,270 --> 01:10:16,574
Have included them as well this one includes this one

1657
01:10:17,087 --> 01:10:18,879
So there is a huge nightmare

1658
01:10:19,646 --> 01:10:22,719
Amazon closes with this Alexis I don't actually needs to be open but

1659
01:10:23,743 --> 01:10:24,255
Anyway

1660
01:10:25,023 --> 01:10:29,631
Pound including this town and close Windows 8 foot pounds includes all kinds of stuff

1661
01:10:29,886 --> 01:10:31,166
From the operating system

1662
01:10:31,679 --> 01:10:32,447
Include files

1663
01:10:33,215 --> 01:10:35,007
And those include files are designed

1664
01:10:35,519 --> 01:10:36,543
To Define

1665
01:10:37,055 --> 01:10:38,591
A bunch of functions like these

1666
01:10:38,846 --> 01:10:42,175
That you used interface with Windows and a bunch of special macros

1667
01:10:42,430 --> 01:10:44,734
And types of other things that will get into next week

1668
01:10:45,247 --> 01:10:47,551
That are designed for you to be able to read

1669
01:10:47,806 --> 01:10:48,574
Steve information

1670
01:10:49,087 --> 01:10:49,855
From Windows as well

1671
01:10:50,367 --> 01:10:50,878
And so

1672
01:10:51,135 --> 01:10:51,646
That

1673
01:10:51,903 --> 01:10:52,927
Define this

1674
01:10:53,182 --> 01:10:53,951
That is hard to find

1675
01:10:54,207 --> 01:10:55,231
All of these things

1676
01:10:55,487 --> 01:10:57,534
And that is why this is a complete program

1677
01:10:57,791 --> 01:10:59,070
Cuz without it it would not be

1678
01:10:59,838 --> 01:11:00,350
Orange

1679
01:11:01,118 --> 01:11:03,166
No I think that's a good place to stop

1680
01:11:03,679 --> 01:11:06,239
Because the next step here is we're going to start to look

1681
01:11:06,494 --> 01:11:08,030
At exactly how this program works

1682
01:11:08,287 --> 01:11:11,103
I'm going to step into the Assembly Language it was actually generated

1683
01:11:11,359 --> 01:11:13,407
We're going to look at how linking actually works

1684
01:11:13,662 --> 01:11:15,454
Where talk about the C runtime Library

1685
01:11:15,711 --> 01:11:16,222
And

1686
01:11:16,479 --> 01:11:19,295
We're going to look at why I said Win Maine

1687
01:11:19,806 --> 01:11:21,599
With actually a little bit

1688
01:11:21,854 --> 01:11:23,390
Of a of a

1689
01:11:23,646 --> 01:11:24,671
Misdirection

1690
01:11:24,926 --> 01:11:27,230
Why it's not really the entry point for your program

1691
01:11:27,743 --> 01:11:29,279
Even though I said it was going to be

1692
01:11:29,534 --> 01:11:31,582
Went to the program and it sure seems to have been the end

1693
01:11:33,118 --> 01:11:34,398
All that

1694
01:11:35,167 --> 01:11:36,959
We will get to tomorrow I believe

1695
01:11:37,726 --> 01:11:38,494
As we

1696
01:11:38,751 --> 01:11:39,775
Further continue

1697
01:11:40,287 --> 01:11:41,055
Our introduction

1698
01:11:41,567 --> 01:11:42,591
2 C programming on Windows

1699
01:11:43,103 --> 01:11:44,382
I hope you have enjoyed this

1700
01:11:44,639 --> 01:11:45,150
Stream

1701
01:11:45,407 --> 01:11:48,222
And I am going to stop the recording now

1702
01:11:48,734 --> 01:11:49,246
But

1703
01:11:49,502 --> 01:11:51,038
I will continue to take questions

1704
01:11:51,551 --> 01:11:52,831
On the

1705
01:11:53,087 --> 01:11:53,855
On the live stream

1706
01:11:54,367 --> 01:11:55,646
And I will split those

1707
01:11:56,158 --> 01:11:56,926
Into a

1708
01:11:57,182 --> 01:11:57,694
A separate record

