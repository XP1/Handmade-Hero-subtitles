1
00:00:00,140 --> 00:00:04,979
hello everyone welcome to handmade Hero

2
00:00:02,908 --> 00:00:09,629
show recode a complete game live on

3
00:00:04,980 --> 00:00:11,300
stream I am in the mood stream and I had

4
00:00:09,630 --> 00:00:14,130
some extra time so I figured I would

5
00:00:11,300 --> 00:00:18,690
this was not an amount stream it's just

6
00:00:14,130 --> 00:00:21,660
a totally unannounced day 507 and I

7
00:00:18,690 --> 00:00:23,039
thought maybe what I do is just take a

8
00:00:21,660 --> 00:00:24,960
break here since this wasn't an

9
00:00:23,039 --> 00:00:26,760
announced stream and take a look at all

10
00:00:24,960 --> 00:00:28,230
the stuff we've got on our issue list

11
00:00:26,760 --> 00:00:31,679
here cuz there's a bunch of things that

12
00:00:28,230 --> 00:00:34,649
are just little you know tiny stuff that

13
00:00:31,678 --> 00:00:36,929
we probably will never get to if we

14
00:00:34,649 --> 00:00:40,469
don't actually spend some time looking

15
00:00:36,929 --> 00:00:41,640
at the issue list and fixing things so I

16
00:00:40,469 --> 00:00:45,329
don't know I thought that might be a

17
00:00:41,640 --> 00:00:50,609
good time to actually go in and you know

18
00:00:45,329 --> 00:00:52,980
set set set aside a few an hour - for

19
00:00:50,609 --> 00:00:57,030
fixing some of these things and also you

20
00:00:52,979 --> 00:00:58,769
know I guess at the moment - like we

21
00:00:57,030 --> 00:00:59,879
should double check to make sure sine

22
00:00:58,770 --> 00:01:01,829
and cosine are the only things we

23
00:00:59,878 --> 00:01:03,179
actually need for moving off the C

24
00:01:01,829 --> 00:01:04,588
runtime libraries thinking we should

25
00:01:03,179 --> 00:01:06,629
move off the C runtime library because

26
00:01:04,588 --> 00:01:08,908
we don't need it for anything except

27
00:01:06,629 --> 00:01:10,589
sine and cosine and we kind of know what

28
00:01:08,909 --> 00:01:11,490
we need to do to replace those that was

29
00:01:10,590 --> 00:01:12,990
another thing I was thinking of doing

30
00:01:11,489 --> 00:01:15,509
although that's probably better saved

31
00:01:12,989 --> 00:01:17,429
for like a weekend where we can do you

32
00:01:15,509 --> 00:01:19,709
know two days of work on that because

33
00:01:17,430 --> 00:01:22,560
it's it's a little involved to do that

34
00:01:19,709 --> 00:01:25,169
replacement going through the math and

35
00:01:22,560 --> 00:01:26,790
all that stuff anyway just looking at

36
00:01:25,170 --> 00:01:30,140
some of stuff I want to go back to the

37
00:01:26,790 --> 00:01:33,329
earliest things and just see what's up

38
00:01:30,140 --> 00:01:36,359
you know go through these sort of issues

39
00:01:33,328 --> 00:01:40,500
that have been here so some of the shots

40
00:01:36,359 --> 00:01:42,328
are maybe have the wrong Z set to them

41
00:01:40,500 --> 00:01:45,118
and our cutscenes let's I don't know if

42
00:01:42,328 --> 00:01:47,489
that's true or not anymore but we can

43
00:01:45,118 --> 00:01:49,228
certainly take a look and see if you

44
00:01:47,489 --> 00:01:51,750
remember the way we do the cutscenes is

45
00:01:49,228 --> 00:01:54,569
we just had a list of the plates that

46
00:01:51,750 --> 00:01:58,290
were involved in the cutscene and we

47
00:01:54,569 --> 00:02:01,559
just run through them and so if we jump

48
00:01:58,290 --> 00:02:04,380
into this sort of for lack of a better

49
00:02:01,560 --> 00:02:06,629
term blank screen where we're gonna put

50
00:02:04,379 --> 00:02:09,209
a title screen someday if we let this

51
00:02:06,629 --> 00:02:12,180
sit it'll go into the cutscene

52
00:02:09,209 --> 00:02:13,610
that's what we're looking at here and as

53
00:02:12,180 --> 00:02:16,069
far as I know

54
00:02:13,610 --> 00:02:18,140
we've kept this working all throughout

55
00:02:16,069 --> 00:02:21,019
all of our changes to like the renderer

56
00:02:18,139 --> 00:02:23,509
in the asset system and everything so

57
00:02:21,020 --> 00:02:25,450
these all work just fine but the

58
00:02:23,509 --> 00:02:28,250
question is do any of them needs

59
00:02:25,449 --> 00:02:31,939
modifications for Z like things that

60
00:02:28,250 --> 00:02:33,409
might be set Z wrong and well you know

61
00:02:31,939 --> 00:02:35,719
there's a thing that's got that's got

62
00:02:33,409 --> 00:02:38,750
kind of a weird 'no stew it so you know

63
00:02:35,719 --> 00:02:41,240
that's that's wrong

64
00:02:38,750 --> 00:02:44,120
whatever that is going on back there

65
00:02:41,240 --> 00:02:45,350
that's incorrect so that's may not have

66
00:02:44,120 --> 00:02:47,090
been anything to do with what they were

67
00:02:45,349 --> 00:02:48,739
talking about for that bug but we got to

68
00:02:47,090 --> 00:02:51,860
fix that like right you can't see the

69
00:02:48,740 --> 00:02:54,260
the old plate there what's weird about

70
00:02:51,860 --> 00:02:58,190
that is a lot of these other ones still

71
00:02:54,259 --> 00:03:00,289
seem correct it's kind of weird that we

72
00:02:58,189 --> 00:03:01,250
only had one error there but again you

73
00:03:00,289 --> 00:03:03,139
know maybe that has something to do with

74
00:03:01,250 --> 00:03:06,430
the Z maybe we're just only seeing that

75
00:03:03,139 --> 00:03:09,439
Z problem so maybe this bug is accurate

76
00:03:06,430 --> 00:03:10,760
but just looking yeah looking through

77
00:03:09,439 --> 00:03:16,129
these I'm not really seeing any other

78
00:03:10,759 --> 00:03:19,219
errors other than that one this looks

79
00:03:16,129 --> 00:03:23,349
fine and Santa's doing this thing here

80
00:03:19,219 --> 00:03:26,989
putting it on the little little guy

81
00:03:23,349 --> 00:03:29,539
looks fine too so this all looks pretty

82
00:03:26,989 --> 00:03:32,719
reasonable nothing bizarre going on so

83
00:03:29,539 --> 00:03:34,400
it's really just that one cutscene the

84
00:03:32,719 --> 00:03:37,129
the middle one there with the that's

85
00:03:34,400 --> 00:03:38,750
that second scene it looks like some of

86
00:03:37,129 --> 00:03:40,819
our plates are not working properly like

87
00:03:38,750 --> 00:03:44,209
they should have been oh wow

88
00:03:40,819 --> 00:03:45,889
okay that's that's crazy oh you know

89
00:03:44,209 --> 00:03:47,870
what though this is actually pretty good

90
00:03:45,889 --> 00:03:49,369
this is presumably the texture transfer

91
00:03:47,870 --> 00:03:51,830
bug that we were having that's kind of

92
00:03:49,370 --> 00:03:53,870
intermittent that looks the same as the

93
00:03:51,830 --> 00:03:55,489
problem we were having before so we

94
00:03:53,870 --> 00:03:57,230
don't really know what's going on there

95
00:03:55,489 --> 00:03:59,120
and we kind of have to figure out

96
00:03:57,229 --> 00:04:00,829
whether we're getting a thread stepping

97
00:03:59,120 --> 00:04:03,110
on some two threads stepping on each

98
00:04:00,830 --> 00:04:04,310
other or something thinking it's done

99
00:04:03,110 --> 00:04:05,650
loading when it's not done loading we

100
00:04:04,310 --> 00:04:07,129
don't know what's going on there

101
00:04:05,650 --> 00:04:09,260
unfortunately that's probably

102
00:04:07,129 --> 00:04:11,569
intermittent it probably doesn't happen

103
00:04:09,259 --> 00:04:14,560
every time so that we're still waiting

104
00:04:11,569 --> 00:04:16,879
for a way to get a good repo on that one

105
00:04:14,560 --> 00:04:18,168
but so so I wonder if that's what

106
00:04:16,879 --> 00:04:22,310
happened in the second one as well I'm

107
00:04:18,168 --> 00:04:24,409
not sure so thus far again don't I don't

108
00:04:22,310 --> 00:04:26,970
know if there's any actual Z problems

109
00:04:24,410 --> 00:04:29,880
here it looks like most of this is fine

110
00:04:26,970 --> 00:04:36,300
so I think that maybe it's just that

111
00:04:29,879 --> 00:04:40,589
that corruption bug that we're seeing

112
00:04:36,300 --> 00:04:41,850
there that seems like the main thing and

113
00:04:40,589 --> 00:04:46,259
that could have been the cause of the

114
00:04:41,850 --> 00:04:47,370
second scenes error as well so that's

115
00:04:46,259 --> 00:04:48,509
the day yeah that's that's a good

116
00:04:47,370 --> 00:04:56,100
question we don't know what's causing

117
00:04:48,509 --> 00:05:00,029
that we really don't so uh yeah this all

118
00:04:56,100 --> 00:05:12,840
looks fine still nothing weird going on

119
00:05:00,029 --> 00:05:15,119
here so that background is having it as

120
00:05:12,839 --> 00:05:18,329
well you can see it looks like a

121
00:05:15,120 --> 00:05:20,639
striding error is actually what it looks

122
00:05:18,329 --> 00:05:22,979
like to me and you can see the way those

123
00:05:20,639 --> 00:05:24,300
things are like shifted so you know

124
00:05:22,980 --> 00:05:26,370
there's different ways that can happen

125
00:05:24,300 --> 00:05:28,050
one way is if we're just if the stride

126
00:05:26,370 --> 00:05:29,910
is just not getting set properly I mean

127
00:05:28,050 --> 00:05:31,710
that's obviously a possibility as well

128
00:05:29,910 --> 00:05:34,590
but another one is if you're using

129
00:05:31,709 --> 00:05:36,089
memory that was written to with one

130
00:05:34,589 --> 00:05:38,310
stride and then you're you know you're

131
00:05:36,089 --> 00:05:42,359
not actually rewriting the thing that

132
00:05:38,310 --> 00:05:43,949
you thought you were you can see there's

133
00:05:42,360 --> 00:05:45,780
some problem happening up here that

134
00:05:43,949 --> 00:05:49,469
could be the same problem but I'm not

135
00:05:45,779 --> 00:05:52,409
100% certain so that's that one's harder

136
00:05:49,470 --> 00:05:54,690
to say so I'm gonna let it run through

137
00:05:52,410 --> 00:05:57,000
one more time I want to see if these

138
00:05:54,689 --> 00:06:03,360
errors are the same each time or if they

139
00:05:57,000 --> 00:06:05,069
vary and yeah and yeah so you can see

140
00:06:03,360 --> 00:06:08,759
here we get a really different result

141
00:06:05,069 --> 00:06:09,959
this time through right so there's

142
00:06:08,759 --> 00:06:12,329
definitely some weird stuff going on

143
00:06:09,959 --> 00:06:15,359
this seems to be able to trigger it much

144
00:06:12,329 --> 00:06:17,039
more reliably probably because it's

145
00:06:15,360 --> 00:06:18,540
transferring large images and we're

146
00:06:17,040 --> 00:06:21,000
recycling those texture handles

147
00:06:18,540 --> 00:06:23,370
frequently there's only a few special

148
00:06:21,000 --> 00:06:26,569
texture handles so you can see like all

149
00:06:23,370 --> 00:06:31,168
of this crazy stuff happening so let's

150
00:06:26,569 --> 00:06:33,240
use this to debug that problem I don't

151
00:06:31,168 --> 00:06:34,949
know that we really have any of the Z

152
00:06:33,240 --> 00:06:37,530
problems that it was originally saying

153
00:06:34,949 --> 00:06:39,300
we have but we do have a problem which

154
00:06:37,529 --> 00:06:41,308
is the same that texture transfer

155
00:06:39,300 --> 00:06:43,649
problem we were seeing in the

156
00:06:41,309 --> 00:06:45,029
game as well so this is uh you know you

157
00:06:43,649 --> 00:06:47,278
can see it's totally different this time

158
00:06:45,028 --> 00:06:48,928
too right so let's figure out what's

159
00:06:47,278 --> 00:06:52,288
going on there because we don't really

160
00:06:48,928 --> 00:06:54,058
know and we needed to debug this for the

161
00:06:52,288 --> 00:06:59,488
main game anyway so this is all like

162
00:06:54,059 --> 00:07:03,119
really useful work okay so one thing I

163
00:06:59,488 --> 00:07:07,168
would like to do is I think it would be

164
00:07:03,119 --> 00:07:10,139
nice to to do this under insight maybe

165
00:07:07,168 --> 00:07:13,978
at some point to see if it's got any

166
00:07:10,139 --> 00:07:16,379
messages for us warnings anything that

167
00:07:13,978 --> 00:07:18,389
it notices is wrong because it may be

168
00:07:16,379 --> 00:07:21,899
that we're just not paying attention to

169
00:07:18,389 --> 00:07:24,269
something that we should be there may be

170
00:07:21,899 --> 00:07:26,788
actually the graphics card or the driver

171
00:07:24,269 --> 00:07:29,968
I should say may actually be telling us

172
00:07:26,788 --> 00:07:32,759
at some point hey you screwed up and we

173
00:07:29,968 --> 00:07:34,829
maybe don't know so I'm not sure one way

174
00:07:32,759 --> 00:07:36,059
the other if there's some other things

175
00:07:34,829 --> 00:07:37,918
going on in there so we might want to

176
00:07:36,059 --> 00:07:39,179
check that out first what I'm going to

177
00:07:37,918 --> 00:07:41,998
do is I'm just gonna re familiarize

178
00:07:39,178 --> 00:07:43,888
myself with the basic texture transfer

179
00:07:41,999 --> 00:07:46,229
code and I'm just gonna try to verify

180
00:07:43,889 --> 00:07:48,809
that there's nothing out of hand going

181
00:07:46,228 --> 00:07:50,519
on there like nothing that I see that

182
00:07:48,809 --> 00:07:54,119
jumps out at me first because before I

183
00:07:50,519 --> 00:07:57,389
just start go randomly sort of look you

184
00:07:54,119 --> 00:08:04,289
know investigating the code I want to do

185
00:07:57,389 --> 00:08:06,059
a just a spot check so if we start one

186
00:08:04,288 --> 00:08:08,128
of the nice things that we kind of know

187
00:08:06,059 --> 00:08:11,519
now and we didn't necessarily know

188
00:08:08,129 --> 00:08:15,479
before is if you look at where we

189
00:08:11,519 --> 00:08:17,189
specify GL Tech's image and let me grab

190
00:08:15,478 --> 00:08:20,788
that here because we're not there yet

191
00:08:17,189 --> 00:08:23,968
here we are so where we specify GL

192
00:08:20,788 --> 00:08:27,658
Tech's image you can see a specifying GL

193
00:08:23,968 --> 00:08:30,509
text some image 2d and GL text image 3d

194
00:08:27,658 --> 00:08:34,049
here what's interesting is we saw this

195
00:08:30,509 --> 00:08:36,719
bug on both paths and I think that's

196
00:08:34,049 --> 00:08:39,000
really interesting because that lets us

197
00:08:36,719 --> 00:08:41,659
know that we probably don't have a

198
00:08:39,000 --> 00:08:45,509
problem with like some specific use of

199
00:08:41,658 --> 00:08:47,129
say our texture array if this path we're

200
00:08:45,509 --> 00:08:48,000
always working properly and remember

201
00:08:47,129 --> 00:08:50,459
what the difference being these two

202
00:08:48,000 --> 00:08:53,100
paths is anything that can fit in our

203
00:08:50,458 --> 00:08:53,969
texture array we just stick in there but

204
00:08:53,100 --> 00:08:56,189
anything that's oh

205
00:08:53,970 --> 00:08:58,860
oddly sized image such as one of these

206
00:08:56,188 --> 00:09:02,129
big cutscene plates it uses a special

207
00:08:58,860 --> 00:09:05,269
texture submission and the really

208
00:09:02,129 --> 00:09:09,389
interesting thing about that is that

209
00:09:05,269 --> 00:09:12,120
that means that this call can't really

210
00:09:09,389 --> 00:09:14,339
itself be the problem now that doesn't

211
00:09:12,120 --> 00:09:16,889
mean we don't have a problem with the

212
00:09:14,339 --> 00:09:17,939
transfer we still might and the reason

213
00:09:16,889 --> 00:09:20,430
that we might have a problem with the

214
00:09:17,938 --> 00:09:22,948
transfer is because there's texture

215
00:09:20,429 --> 00:09:26,309
there's text transfer stuff that affects

216
00:09:22,948 --> 00:09:31,409
how memory is read and used so it's not

217
00:09:26,309 --> 00:09:33,539
a given that it's correct from in its

218
00:09:31,409 --> 00:09:36,059
entirety but what is true is we're

219
00:09:33,539 --> 00:09:39,509
seeing the bug on both text image 3d and

220
00:09:36,059 --> 00:09:44,789
text sub image 3d so we kind of know

221
00:09:39,509 --> 00:09:47,389
that we kind of know that we're not

222
00:09:44,789 --> 00:09:50,129
having a problem with a specific

223
00:09:47,389 --> 00:09:52,829
internal of one of those calls it's

224
00:09:50,129 --> 00:09:56,938
something that's erroneous on both write

225
00:09:52,828 --> 00:09:59,519
on both paths now I'm not sure

226
00:09:56,938 --> 00:10:01,500
specifically why we decided to do GL

227
00:09:59,519 --> 00:10:04,860
text image 3d here for the default

228
00:10:01,500 --> 00:10:06,600
sprite texture format thing I guess we

229
00:10:04,860 --> 00:10:09,240
just decided that's the easier way to go

230
00:10:06,600 --> 00:10:11,308
now one thing that we should probably

231
00:10:09,240 --> 00:10:13,350
have been checking here is to make sure

232
00:10:11,308 --> 00:10:15,808
that the max width and height of these

233
00:10:13,350 --> 00:10:17,189
things comports with the size of the

234
00:10:15,808 --> 00:10:17,669
textures that we allocated in the first

235
00:10:17,188 --> 00:10:20,009
place

236
00:10:17,669 --> 00:10:22,620
because I don't necessarily know that we

237
00:10:20,009 --> 00:10:24,539
ever did that and we may have had some

238
00:10:22,620 --> 00:10:26,850
textures that actually don't fit in here

239
00:10:24,539 --> 00:10:29,009
our modern import path would have fixed

240
00:10:26,850 --> 00:10:30,389
that by resizing them but right now we

241
00:10:29,009 --> 00:10:32,579
don't go through that path for these

242
00:10:30,389 --> 00:10:34,980
these are imported from old hhas

243
00:10:32,578 --> 00:10:37,258
so that might actually be one of our

244
00:10:34,980 --> 00:10:39,449
problems it's not our only problem

245
00:10:37,259 --> 00:10:41,909
almost certainly but it definitely could

246
00:10:39,448 --> 00:10:43,139
be one of them so we probably want to

247
00:10:41,909 --> 00:10:43,698
take a look and see what's going on

248
00:10:43,139 --> 00:10:46,829
there

249
00:10:43,698 --> 00:10:48,628
so let me go ahead and check what's

250
00:10:46,828 --> 00:10:50,188
going on there we have some hard-coded

251
00:10:48,629 --> 00:10:52,860
constants here we just said this is our

252
00:10:50,188 --> 00:10:55,379
maximum we're not going to use any earth

253
00:10:52,860 --> 00:10:56,879
you know other sizes than this I can't

254
00:10:55,379 --> 00:11:02,129
remember exactly where where I actually

255
00:10:56,879 --> 00:11:08,789
put that it's sort of a max size

256
00:11:02,129 --> 00:11:08,789
where is that go where does that go

257
00:11:08,970 --> 00:11:23,290
let's take a look let's take a look so

258
00:11:20,379 --> 00:11:27,639
we have the texture transfer buffer size

259
00:11:23,289 --> 00:11:29,769
but where's our actual texture

260
00:11:27,639 --> 00:11:31,539
dimensions you know what I can do here

261
00:11:29,769 --> 00:11:34,659
let me to search for 512 since I know

262
00:11:31,539 --> 00:11:40,629
what that is so you can see here there's

263
00:11:34,659 --> 00:11:48,039
our texture array dimension but let's

264
00:11:40,629 --> 00:11:49,959
see here so when we create these so

265
00:11:48,039 --> 00:11:52,328
there's some things about this there's

266
00:11:49,958 --> 00:11:54,698
actually some things here that don't

267
00:11:52,328 --> 00:11:58,359
necessarily line up with what I would

268
00:11:54,698 --> 00:12:08,278
expect so for starters when we're doing

269
00:11:58,360 --> 00:12:08,278
special texture handles that shouldn't

270
00:12:08,548 --> 00:12:23,369
be sent down that that doesn't make a

271
00:12:18,159 --> 00:12:23,368
lot of sense does it

272
00:12:25,309 --> 00:12:33,139
I guess we just never actually send down

273
00:12:28,610 --> 00:12:35,240
one of these dimensions early on because

274
00:12:33,139 --> 00:12:41,000
look at look at how we're doing this

275
00:12:35,240 --> 00:12:49,159
this doesn't this doesn't make any sense

276
00:12:41,000 --> 00:12:54,559
to me at all am I missing something here

277
00:12:49,159 --> 00:12:56,929
so here's our path for generating our 3d

278
00:12:54,559 --> 00:12:59,389
texture here right that we use for all

279
00:12:56,929 --> 00:13:03,889
of our sprites and then we come down

280
00:12:59,389 --> 00:13:05,750
here and we say well you know let's we

281
00:13:03,889 --> 00:13:09,769
would like to make some special textures

282
00:13:05,750 --> 00:13:14,289
here and so we're gonna allocate a bunch

283
00:13:09,769 --> 00:13:18,620
of those but we allocate them as 2d

284
00:13:14,289 --> 00:13:23,230
texture arrays for some reason which

285
00:13:18,620 --> 00:13:26,179
doesn't really make any sense does it

286
00:13:23,230 --> 00:13:29,480
because I thought the way that we were

287
00:13:26,179 --> 00:13:32,838
rendering these is that we switch

288
00:13:29,480 --> 00:13:35,330
textures every time so like I thought

289
00:13:32,839 --> 00:13:37,070
and maybe this is totally wrong but I

290
00:13:35,330 --> 00:13:44,150
thought those should have been regular

291
00:13:37,070 --> 00:13:48,260
textures not array textures and I don't

292
00:13:44,149 --> 00:13:51,889
really understand so like you can see

293
00:13:48,259 --> 00:13:54,439
here we do it GL texture 2d array bond

294
00:13:51,889 --> 00:13:59,679
of the texture and what's why are we

295
00:13:54,440 --> 00:14:02,630
doing that what is the point of that I

296
00:13:59,679 --> 00:14:06,229
guess the Oh so you know what I guess

297
00:14:02,629 --> 00:14:09,889
that's so this shader works and we just

298
00:14:06,230 --> 00:14:11,539
only ever specified the base well you

299
00:14:09,889 --> 00:14:13,689
know I guess there's nothing wrong with

300
00:14:11,539 --> 00:14:13,689
that

301
00:14:17,820 --> 00:14:22,870
so I guess there's no real reason to

302
00:14:21,460 --> 00:14:26,650
think that that's a problem

303
00:14:22,870 --> 00:14:29,710
I suppose although I guess I don't know

304
00:14:26,649 --> 00:14:31,149
that for sure that was I he's coming

305
00:14:29,710 --> 00:14:32,950
back to me now when we did that we

306
00:14:31,149 --> 00:14:35,079
didn't want to have to have two

307
00:14:32,950 --> 00:14:36,520
different shaders so we just made it so

308
00:14:35,080 --> 00:14:43,450
that we use a texture array that's only

309
00:14:36,519 --> 00:14:46,779
one deep for all of these um so that all

310
00:14:43,450 --> 00:14:48,700
seems fine though like again doesn't

311
00:14:46,779 --> 00:14:51,429
really seem like it would be a problem

312
00:14:48,700 --> 00:14:53,320
it should still work so that I don't

313
00:14:51,429 --> 00:14:55,029
know I'm not seeing why any of that

314
00:14:53,320 --> 00:14:58,570
would particularly problematic however

315
00:14:55,029 --> 00:15:01,419
like I was saying before one of the

316
00:14:58,570 --> 00:15:04,540
things that we did not do here is we

317
00:15:01,419 --> 00:15:06,399
have a text transfer like there's

318
00:15:04,539 --> 00:15:10,419
transfer parameters that are in effect

319
00:15:06,399 --> 00:15:12,459
here where we do and that looks like we

320
00:15:10,419 --> 00:15:14,559
we never actually said any of these but

321
00:15:12,460 --> 00:15:20,230
if you look at how opengl works when you

322
00:15:14,559 --> 00:15:23,799
call a text image any of those text

323
00:15:20,230 --> 00:15:25,450
image calls like text sub image for

324
00:15:23,799 --> 00:15:28,299
example like we're calling to transfer

325
00:15:25,450 --> 00:15:30,759
the sprites or text image 3d like we're

326
00:15:28,299 --> 00:15:33,250
calling to transfer the main one if you

327
00:15:30,759 --> 00:15:36,189
look at the documentation for it when

328
00:15:33,250 --> 00:15:38,649
you actually execute this transfer it

329
00:15:36,190 --> 00:15:41,440
should in here oops sorry

330
00:15:38,649 --> 00:15:43,509
it shouldn't here tell us this although

331
00:15:41,440 --> 00:15:45,670
I don't know if it actually does that it

332
00:15:43,509 --> 00:15:47,049
uses the texture transfer modes that

333
00:15:45,669 --> 00:15:50,519
have been set in order to figure out how

334
00:15:47,049 --> 00:15:50,519
to copy you know what I mean

335
00:15:50,620 --> 00:15:55,810
and let's see yeah the pixel store mode

336
00:15:53,620 --> 00:16:00,519
effects text or images state of a 1.4

337
00:15:55,809 --> 00:16:05,109
blah blah blah texture memory mats and

338
00:16:00,519 --> 00:16:07,240
let me see so pixel store modes and yes

339
00:16:05,110 --> 00:16:10,300
you can see all see all these pixel

340
00:16:07,240 --> 00:16:13,389
store modes in here all of these texture

341
00:16:10,299 --> 00:16:15,729
transfer modes are relevant to us so all

342
00:16:13,389 --> 00:16:18,699
of these things like pack row length and

343
00:16:15,730 --> 00:16:22,539
pack image height and skip rows and skip

344
00:16:18,700 --> 00:16:25,210
pixels and all that stuff this is all

345
00:16:22,539 --> 00:16:28,209
going to actually affect our ability to

346
00:16:25,210 --> 00:16:30,850
transfer our texture and I guess I don't

347
00:16:28,210 --> 00:16:33,730
know if that can be causing us some

348
00:16:30,850 --> 00:16:36,069
problems I don't the thing why the

349
00:16:33,730 --> 00:16:38,829
reason I don't think that's the case is

350
00:16:36,068 --> 00:16:41,229
I don't think we would be seeing it be

351
00:16:38,828 --> 00:16:44,588
intermittent like it should always be

352
00:16:41,230 --> 00:16:48,670
wrong if this was wrong and so I'm

353
00:16:44,589 --> 00:16:50,740
assuming this isn't the problem but I

354
00:16:48,669 --> 00:16:57,338
just wanted to point out that it's there

355
00:16:50,740 --> 00:17:06,788
right and I I guess I'll double check to

356
00:16:57,339 --> 00:17:08,709
make sure so what I don't know like what

357
00:17:06,788 --> 00:17:10,750
the defaults are for some of these but

358
00:17:08,709 --> 00:17:13,298
like for example it you know pack

359
00:17:10,750 --> 00:17:17,259
alignment could technically hurt us

360
00:17:13,298 --> 00:17:19,240
right because if it realigned rows every

361
00:17:17,259 --> 00:17:21,939
time then depending on the initial

362
00:17:19,240 --> 00:17:26,788
pointer alignment that could shift us

363
00:17:21,939 --> 00:17:37,509
off and it would change the size as well

364
00:17:26,788 --> 00:17:39,579
I don't see any others here really but

365
00:17:37,509 --> 00:17:44,589
that pack alignment I'm guess I'm

366
00:17:39,579 --> 00:17:47,558
curious what this value what this value

367
00:17:44,589 --> 00:17:51,990
is the Geo pack alignment geo pack

368
00:17:47,558 --> 00:17:51,990
alignment default oops

369
00:17:52,720 --> 00:18:03,519
I'm not sure what the default is the

370
00:17:55,150 --> 00:18:05,230
default is four so again can't really

371
00:18:03,519 --> 00:18:07,418
see how that could really be a problem

372
00:18:05,230 --> 00:18:10,089
though if it was eight

373
00:18:07,419 --> 00:18:15,549
maybe but since our pixels are always

374
00:18:10,089 --> 00:18:19,418
four wide I mean it doesn't seem like we

375
00:18:15,548 --> 00:18:22,089
could really get that to be wrong but I

376
00:18:19,419 --> 00:18:24,669
don't know um so I don't know that

377
00:18:22,089 --> 00:18:28,000
that's the only basic thing I can think

378
00:18:24,669 --> 00:18:31,960
of there were I'm just thinking maybe we

379
00:18:28,000 --> 00:18:34,150
could have something happen weird but

380
00:18:31,960 --> 00:18:35,710
yeah not not a lot else that doesn't

381
00:18:34,150 --> 00:18:38,440
that's the only thing that seems

382
00:18:35,710 --> 00:18:40,120
particularly like suspicious in there

383
00:18:38,440 --> 00:18:42,730
but it doesn't seem likely to me

384
00:18:40,119 --> 00:18:43,969
honestly we'll check it but I don't

385
00:18:42,730 --> 00:18:47,028
think that's going to be it

386
00:18:43,970 --> 00:18:48,558
so just based on that I would say we

387
00:18:47,028 --> 00:18:52,730
probably are gonna have to start doing

388
00:18:48,558 --> 00:18:55,190
some instrumentation here so the first

389
00:18:52,730 --> 00:18:57,769
thing that I want to do is I want to try

390
00:18:55,190 --> 00:19:01,970
and get some idea of what's actually

391
00:18:57,769 --> 00:19:05,480
coming down the pipe on this and so when

392
00:19:01,970 --> 00:19:07,370
I hit this GL text image 3d call what

393
00:19:05,480 --> 00:19:10,128
I'd like to be able to do is figure out

394
00:19:07,369 --> 00:19:14,239
whether I'm sending down bad data or not

395
00:19:10,128 --> 00:19:16,278
as far as I know right so when and in

396
00:19:14,240 --> 00:19:17,659
this case you know this is the one that

397
00:19:16,278 --> 00:19:19,460
we normally call during the game but

398
00:19:17,659 --> 00:19:21,379
we've got a good repro case here where

399
00:19:19,460 --> 00:19:23,538
this one seems to fail fairly soon I

400
00:19:21,378 --> 00:19:25,459
don't know how how many times I can get

401
00:19:23,538 --> 00:19:28,429
that to fail or rather I don't know how

402
00:19:25,460 --> 00:19:30,079
reliable the failure is but it seemed

403
00:19:28,429 --> 00:19:32,120
like at least as you let it play on it

404
00:19:30,079 --> 00:19:34,878
got more and more reliable as time went

405
00:19:32,119 --> 00:19:37,418
on so that's something but basically

406
00:19:34,878 --> 00:19:40,638
when we're watching this I'm assuming

407
00:19:37,419 --> 00:19:43,340
that I'll be able to get that failure to

408
00:19:40,638 --> 00:19:46,490
happen relatively soon so what I'm

409
00:19:43,339 --> 00:19:50,869
wondering is can I when I come through

410
00:19:46,490 --> 00:19:53,149
here can i maybe dump out the data

411
00:19:50,869 --> 00:19:55,668
really quickly or do something else

412
00:19:53,148 --> 00:19:57,109
along those lines where I can see

413
00:19:55,669 --> 00:19:59,960
whether or not the thing I'm sending

414
00:19:57,109 --> 00:20:01,668
down is corrupt or not like you see how

415
00:19:59,960 --> 00:20:05,899
that's correct this time through for

416
00:20:01,669 --> 00:20:10,549
example right so I have no idea what's

417
00:20:05,898 --> 00:20:13,579
going on there right so another thing

418
00:20:10,548 --> 00:20:16,668
that I think maybe could have some

419
00:20:13,579 --> 00:20:19,460
relevance I'm not sure is I don't know

420
00:20:16,669 --> 00:20:21,830
what would happen if we tried to render

421
00:20:19,460 --> 00:20:27,169
with the corrupt texture with a texture

422
00:20:21,829 --> 00:20:29,058
handle it hadn't been filled yet my

423
00:20:27,169 --> 00:20:30,620
assumption is it would just render I

424
00:20:29,058 --> 00:20:32,388
assumed it would only write a garbage

425
00:20:30,619 --> 00:20:34,339
for that frame but once the texture

426
00:20:32,388 --> 00:20:35,538
handle actually got filled in I would

427
00:20:34,339 --> 00:20:38,269
assume that it would start working again

428
00:20:35,538 --> 00:20:38,839
I don't necessarily know that that's

429
00:20:38,269 --> 00:20:41,538
true

430
00:20:38,839 --> 00:20:43,158
so I could believe that actually there

431
00:20:41,538 --> 00:20:44,808
was something going on there weird as

432
00:20:43,159 --> 00:20:47,090
well and so we should probably check

433
00:20:44,808 --> 00:20:51,888
that too one of the things you can see

434
00:20:47,089 --> 00:20:53,349
here is we didn't actually have we

435
00:20:51,888 --> 00:20:55,729
didn't actually have that same

436
00:20:53,349 --> 00:20:57,469
corruption on the second sprite so I'm

437
00:20:55,730 --> 00:21:08,480
going to see what happens on Krampus now

438
00:20:57,470 --> 00:21:10,100
now wait for it yeah so you can see that

439
00:21:08,480 --> 00:21:12,409
all of that seems to be working

440
00:21:10,099 --> 00:21:15,319
correctly and again with that sort of

441
00:21:12,409 --> 00:21:18,559
suggests to me is that maybe there was a

442
00:21:15,319 --> 00:21:19,668
problem with when we out you can see

443
00:21:18,558 --> 00:21:25,879
some of it up there

444
00:21:19,669 --> 00:21:27,500
right some bugginess up there maybe

445
00:21:25,880 --> 00:21:30,020
there's just a problem with load speeds

446
00:21:27,500 --> 00:21:34,429
so if you load if you're loading cold if

447
00:21:30,019 --> 00:21:35,509
you're likely to be late that could

448
00:21:34,429 --> 00:21:37,070
affect it I don't know

449
00:21:35,509 --> 00:21:41,450
still having trouble coming up with a

450
00:21:37,069 --> 00:21:48,408
reason for I'm still having trouble come

451
00:21:41,450 --> 00:21:50,650
up with a good explanation it's a tough

452
00:21:48,409 --> 00:21:50,650
call

453
00:21:54,368 --> 00:21:58,970
hmm all right so a bunch of things to

454
00:21:56,839 --> 00:22:00,528
check nothing seems particularly likely

455
00:21:58,970 --> 00:22:02,058
I'm gonna go ahead and run this under

456
00:22:00,528 --> 00:22:05,808
insight as well just to see whether I

457
00:22:02,058 --> 00:22:07,999
get any warnings that maybe it would

458
00:22:05,808 --> 00:22:10,819
give me that it wasn't gonna give me in

459
00:22:07,999 --> 00:22:12,739
the other case you know and I mean so

460
00:22:10,819 --> 00:22:14,569
I'm just gonna set this up to run here I

461
00:22:12,739 --> 00:22:16,970
believe our working directory is not

462
00:22:14,569 --> 00:22:18,648
handmade slash data anymore right our

463
00:22:16,970 --> 00:22:22,629
working directory we decided was

464
00:22:18,648 --> 00:22:26,569
different it's it's just handmade right

465
00:22:22,628 --> 00:22:31,519
so let me go ahead and get that clipped

466
00:22:26,569 --> 00:22:33,528
off and can I save this or is that not I

467
00:22:31,519 --> 00:22:36,558
don't know if I can save this but you

468
00:22:33,528 --> 00:22:38,778
know we'll just see what happens so

469
00:22:36,558 --> 00:22:42,319
we're launching in the debugger here and

470
00:22:38,778 --> 00:22:45,169
we'll just see what's up I there's

471
00:22:42,319 --> 00:22:46,368
output messages here right and we can

472
00:22:45,169 --> 00:22:51,919
see whether there's anything

473
00:22:46,368 --> 00:22:55,308
ooh not sure why that is saying that's

474
00:22:51,919 --> 00:22:57,700
log is unavailable it's not what I would

475
00:22:55,308 --> 00:22:57,700
have preferred

476
00:23:05,089 --> 00:23:08,359
there again

477
00:23:15,849 --> 00:23:22,169
so I'm not seeing the need to texture

478
00:23:19,480 --> 00:23:22,170
weirdness here

479
00:23:26,079 --> 00:23:30,699
so again yeah not not really seeing

480
00:23:28,240 --> 00:23:32,140
anything and don't have a really strong

481
00:23:30,700 --> 00:23:34,990
idea if we're to look first so we're

482
00:23:32,140 --> 00:23:36,670
gonna have to just wait a little bit

483
00:23:34,990 --> 00:23:38,620
here verify that it doesn't have

484
00:23:36,670 --> 00:23:39,700
anything interesting to say to us and

485
00:23:38,619 --> 00:23:41,529
then we're gonna have to start going in

486
00:23:39,700 --> 00:23:46,600
and instrumenting to find out what's

487
00:23:41,529 --> 00:23:48,789
going wrong there and yeah like again

488
00:23:46,599 --> 00:23:50,740
shouldn't be too bad it just gonna take

489
00:23:48,789 --> 00:23:53,289
a little bit of code cuz we need some

490
00:23:50,740 --> 00:23:55,059
way to inspect what's happening in that

491
00:23:53,289 --> 00:23:57,490
actual instance where we go to do the

492
00:23:55,059 --> 00:24:08,349
transfer and so we can see whether or

493
00:23:57,490 --> 00:24:09,549
not something bizarre is happening it'd

494
00:24:08,349 --> 00:24:11,740
be cool if you had something like an AI

495
00:24:09,549 --> 00:24:14,139
debug assistant that sat there and was

496
00:24:11,740 --> 00:24:16,900
like oh I see that this texture looks

497
00:24:14,140 --> 00:24:23,500
weird it doesn't look like the kind of

498
00:24:16,900 --> 00:24:26,130
thing you would load all right again

499
00:24:23,500 --> 00:24:29,380
don't see any buggy texture Oh

500
00:24:26,130 --> 00:24:30,790
maybe well not necessarily that might

501
00:24:29,380 --> 00:24:34,600
actually just be where that is

502
00:24:30,789 --> 00:24:35,159
I still don't see any obvious bugs there

503
00:24:34,599 --> 00:24:38,230
we go

504
00:24:35,160 --> 00:24:42,040
so you can see here I don't know if I

505
00:24:38,230 --> 00:24:45,370
can pause this to like capture for live

506
00:24:42,039 --> 00:24:50,289
analysis if we just grab this particular

507
00:24:45,369 --> 00:24:52,569
frame we can also go ahead and see what

508
00:24:50,289 --> 00:24:54,250
you know what's up I'm assuming though

509
00:24:52,569 --> 00:24:56,589
that there's nothing particular to learn

510
00:24:54,250 --> 00:24:58,359
here because I'm assuming that what

511
00:24:56,589 --> 00:25:02,019
we'll see is just the textures

512
00:24:58,359 --> 00:25:05,799
themselves or garbagey right at least

513
00:25:02,019 --> 00:25:08,950
that's my assumption so if I go find you

514
00:25:05,799 --> 00:25:11,919
know what textures are being used I'll

515
00:25:08,950 --> 00:25:14,980
find that some are just kind of filled

516
00:25:11,920 --> 00:25:18,730
with garbage so let's take a look at

517
00:25:14,980 --> 00:25:22,769
side our texture pool here so here's all

518
00:25:18,730 --> 00:25:22,769
our textures and

519
00:25:32,558 --> 00:25:39,369
I guess just looking through which ones

520
00:25:35,079 --> 00:25:44,019
are loaded that seems fine that these

521
00:25:39,369 --> 00:25:46,319
are from the previous frame I'm not sure

522
00:25:44,019 --> 00:25:49,149
which kind these are supposed to be

523
00:25:46,319 --> 00:25:52,960
available revisions this looks like a

524
00:25:49,148 --> 00:25:56,589
target buffer but this is presumably the

525
00:25:52,960 --> 00:25:57,819
actual buffer let's step through the

526
00:25:56,589 --> 00:26:03,189
drawing and see what we're actually

527
00:25:57,819 --> 00:26:06,038
looking at so here's us drawing we're

528
00:26:03,190 --> 00:26:14,769
gonna draw a like the depth passes on

529
00:26:06,038 --> 00:26:17,609
this thing right you can see those

530
00:26:14,769 --> 00:26:17,609
getting drawn in there

531
00:26:26,789 --> 00:26:31,599
so I'm not sure which of these actually

532
00:26:29,369 --> 00:26:35,909
produces the garbage what's interesting

533
00:26:31,599 --> 00:26:39,189
about it is that at the beginning here

534
00:26:35,910 --> 00:26:42,130
you can actually see that the depth

535
00:26:39,190 --> 00:26:45,220
buffer is filled with garbage which

536
00:26:42,130 --> 00:26:48,640
doesn't make a whole lot of sense

537
00:26:45,220 --> 00:26:51,160
although I guess that's just because the

538
00:26:48,640 --> 00:26:54,060
thing that wrote into it before was that

539
00:26:51,160 --> 00:26:54,060
that garbage

540
00:27:01,339 --> 00:27:07,769
so it looks like this is our culprit

541
00:27:03,900 --> 00:27:11,009
here this is an actual texture texture

542
00:27:07,769 --> 00:27:13,558
20 that's just garbage and this is what

543
00:27:11,009 --> 00:27:18,048
we're using to write with so this should

544
00:27:13,558 --> 00:27:21,210
have been something and it isn't and

545
00:27:18,048 --> 00:27:23,250
looking at you know you can see that it

546
00:27:21,210 --> 00:27:28,079
was something smaller that looks like it

547
00:27:23,250 --> 00:27:30,690
got smeared out here and I'm curious to

548
00:27:28,079 --> 00:27:33,269
know I don't know if this thing is able

549
00:27:30,690 --> 00:27:36,450
to like view this in a different way

550
00:27:33,269 --> 00:27:40,500
it's probably not but I was thinking

551
00:27:36,450 --> 00:27:43,319
like you know if I could get it to use

552
00:27:40,500 --> 00:27:45,150
different strides here you know like so

553
00:27:43,319 --> 00:27:47,899
that I could dial in a stride to see

554
00:27:45,150 --> 00:27:50,580
what this actually looks like but I

555
00:27:47,900 --> 00:27:53,220
think I can make an educated guess

556
00:27:50,579 --> 00:27:56,099
because if you look at what this shape

557
00:27:53,220 --> 00:27:57,630
is you can see the the olive green here

558
00:27:56,099 --> 00:28:00,149
you can see a little bit of like the

559
00:27:57,630 --> 00:28:05,630
whites of the eyes it looks like this is

560
00:28:00,150 --> 00:28:05,630
just this you know

561
00:28:08,740 --> 00:28:15,538
so again if I had to guess it seems like

562
00:28:16,380 --> 00:28:22,000
it seems like somehow maybe the texture

563
00:28:19,778 --> 00:28:22,659
transfer memory for this guy which was

564
00:28:22,000 --> 00:28:25,298
right

565
00:28:22,659 --> 00:28:30,240
got reused for this guy who's a

566
00:28:25,298 --> 00:28:30,240
different dimension June and I'm Santa

567
00:28:31,000 --> 00:28:36,339
and so this was supposed to be some

568
00:28:34,720 --> 00:28:40,269
other image but really what ended up

569
00:28:36,339 --> 00:28:43,480
happening is it used this actual buffer

570
00:28:40,269 --> 00:28:46,690
at when it went to reuse the texture

571
00:28:43,480 --> 00:28:49,870
texture transfer and transferred a

572
00:28:46,690 --> 00:28:54,330
totally erroneous thing so here's some

573
00:28:49,869 --> 00:28:59,109
stuff that I you know could guess about

574
00:28:54,329 --> 00:29:01,629
if we were not properly reserving our

575
00:28:59,109 --> 00:29:03,609
texture transfer buffers so that more

576
00:29:01,630 --> 00:29:07,028
than one person writes into a texture

577
00:29:03,609 --> 00:29:09,308
transfer buffer like I say okay we need

578
00:29:07,028 --> 00:29:11,079
here's the ten textures we needed to

579
00:29:09,308 --> 00:29:14,369
transfer start transferring them and

580
00:29:11,079 --> 00:29:17,470
like person a transfers into buffer a

581
00:29:14,369 --> 00:29:21,038
person B transfers into buffer B person

582
00:29:17,470 --> 00:29:22,720
C transfers into buffer a overwriting

583
00:29:21,038 --> 00:29:26,589
what was supposed to be there

584
00:29:22,720 --> 00:29:29,019
stuff like that right um so I want to

585
00:29:26,589 --> 00:29:31,689
look at that first because it smells bad

586
00:29:29,019 --> 00:29:33,038
to me like I just feel like there might

587
00:29:31,690 --> 00:29:34,840
be something there and since I don't

588
00:29:33,038 --> 00:29:37,000
have anything else to go on I'm just

589
00:29:34,839 --> 00:29:38,589
gonna start looking at the place that I

590
00:29:37,000 --> 00:29:40,480
think is the most likely culprit first

591
00:29:38,589 --> 00:29:43,839
just to maximize my chances of finding

592
00:29:40,480 --> 00:29:46,089
it and save the most time you know you

593
00:29:43,839 --> 00:29:50,408
can only go on what you have to go on if

594
00:29:46,089 --> 00:29:52,898
that makes sense all right so if I look

595
00:29:50,409 --> 00:29:56,559
in here if you remember what happens in

596
00:29:52,898 --> 00:29:58,719
load asset work we try to do this read

597
00:29:56,558 --> 00:30:02,048
and the read targets a particular

598
00:29:58,720 --> 00:30:04,298
destination buffer and then it tries to

599
00:30:02,048 --> 00:30:06,788
transfer the texture which happens here

600
00:30:04,298 --> 00:30:09,970
and then it does it's like end work

601
00:30:06,788 --> 00:30:13,028
right and so all of that happens inside

602
00:30:09,970 --> 00:30:14,740
this texture queue thing which is

603
00:30:13,028 --> 00:30:16,990
actually something that lives in the

604
00:30:14,740 --> 00:30:21,339
graphics card side which is like a and

605
00:30:16,990 --> 00:30:24,388
up you know has some memory that it uses

606
00:30:21,339 --> 00:30:24,388
for the

607
00:30:24,929 --> 00:30:31,000
so you can see that here and you can see

608
00:30:27,970 --> 00:30:33,220
here we've got a data pointer and this

609
00:30:31,000 --> 00:30:36,940
texture app just moves it rolls through

610
00:30:33,220 --> 00:30:40,179
those data pointers this transfer memory

611
00:30:36,940 --> 00:30:44,110
that's here is what gets used for these

612
00:30:40,179 --> 00:30:46,929
texture ops and so the thing that I'm

613
00:30:44,109 --> 00:30:48,819
thinking is you know I probably just

614
00:30:46,929 --> 00:30:51,340
screwed that up I mean it worked the

615
00:30:48,819 --> 00:30:52,869
first time and if I remember correctly

616
00:30:51,339 --> 00:30:55,209
when we did it that well first time

617
00:30:52,869 --> 00:30:57,428
maybe but like right away we've probably

618
00:30:55,210 --> 00:31:01,269
got some subtle bugs there that just we

619
00:30:57,429 --> 00:31:03,460
haven't actually like we're not doing it

620
00:31:01,269 --> 00:31:06,339
right you know what I'm saying

621
00:31:03,460 --> 00:31:09,419
and so what ends up happening is we use

622
00:31:06,339 --> 00:31:12,308
some memory that we didn't really have

623
00:31:09,419 --> 00:31:15,580
that that was still supposed to be

624
00:31:12,308 --> 00:31:17,859
committed to somebody else and that's

625
00:31:15,579 --> 00:31:23,379
where the error is coming into play

626
00:31:17,859 --> 00:31:26,259
right so I'm gonna go ahead and suggest

627
00:31:23,380 --> 00:31:29,070
that we look there first when we

628
00:31:26,259 --> 00:31:32,279
actually do those texture transfer ops

629
00:31:29,069 --> 00:31:34,450
you can see here the way that we do it

630
00:31:32,279 --> 00:31:36,789
when we call begin track texture

631
00:31:34,450 --> 00:31:39,548
transfer I'm sorry what we call begin

632
00:31:36,789 --> 00:31:42,909
texture up we look through and we say

633
00:31:39,548 --> 00:31:45,759
look let's make for whatever the size is

634
00:31:42,910 --> 00:31:49,179
requested let's see if we can use that

635
00:31:45,759 --> 00:31:58,359
much memory continuous or wraparound

636
00:31:49,179 --> 00:32:00,460
right and you know this is another good

637
00:31:58,359 --> 00:32:04,269
example what if maybe like our

638
00:32:00,460 --> 00:32:06,100
wraparound case is the problem you know

639
00:32:04,269 --> 00:32:08,319
what I mean like what if what if one of

640
00:32:06,099 --> 00:32:11,649
these cases only happens every so often

641
00:32:08,319 --> 00:32:15,480
and like it set up some pointer

642
00:32:11,650 --> 00:32:17,769
incorrectly or something like this right

643
00:32:15,480 --> 00:32:19,269
that would be another good example right

644
00:32:17,769 --> 00:32:20,710
of the kind of thing that might get

645
00:32:19,269 --> 00:32:23,910
screwed up

646
00:32:20,710 --> 00:32:23,910
[Music]

647
00:32:30,559 --> 00:32:35,000
yeah all right so anyway let's walk

648
00:32:33,680 --> 00:32:36,830
through that so when we come through

649
00:32:35,000 --> 00:32:38,630
here we get an OP we say how much do we

650
00:32:36,829 --> 00:32:39,919
actually need so here's the size we

651
00:32:38,630 --> 00:32:42,740
actually need width times height times

652
00:32:39,920 --> 00:32:44,090
four right and then we say look how much

653
00:32:42,740 --> 00:32:45,680
do we have and we assume that we start

654
00:32:44,089 --> 00:32:47,629
with nothing and let's try to find it

655
00:32:45,680 --> 00:32:50,779
we say first we're gonna look at

656
00:32:47,630 --> 00:32:53,090
whatever the you know the sort of memory

657
00:32:50,779 --> 00:32:56,599
arena area we're using is we're gonna

658
00:32:53,089 --> 00:33:00,230
say here's the first used byte in this

659
00:32:56,599 --> 00:33:01,759
block of memory transfers and here's the

660
00:33:00,230 --> 00:33:06,950
number of bytes that we're currently

661
00:33:01,759 --> 00:33:12,079
using okay and so there we say if at

662
00:33:06,950 --> 00:33:16,610
that point we're over the edge of the

663
00:33:12,079 --> 00:33:19,849
memory then that means that we actually

664
00:33:16,609 --> 00:33:22,039
start back somewhere at the beginning so

665
00:33:19,849 --> 00:33:25,219
this wraps the Pointer effectively and

666
00:33:22,039 --> 00:33:27,319
starts us back sort of before that first

667
00:33:25,220 --> 00:33:30,380
use byte and so the size that's

668
00:33:27,319 --> 00:33:32,929
available is just however much memory

669
00:33:30,380 --> 00:33:41,990
there is between where we are and where

670
00:33:32,930 --> 00:33:44,660
the excuse me yeah where we are and

671
00:33:41,990 --> 00:33:47,359
where that first use bite was right in

672
00:33:44,660 --> 00:33:49,340
the other case where the used space is

673
00:33:47,359 --> 00:33:51,319
contiguous inside the region doesn't

674
00:33:49,339 --> 00:33:53,419
wrap around we have to check both the

675
00:33:51,319 --> 00:33:56,269
overhanging part and the beginning part

676
00:33:53,420 --> 00:33:58,400
so we say all right first let's say that

677
00:33:56,269 --> 00:33:59,809
we just subtract memory app from

678
00:33:58,400 --> 00:34:01,310
transform account to say how much is

679
00:33:59,809 --> 00:34:04,849
there between the where I am in the

680
00:34:01,309 --> 00:34:06,919
buffer and the end if that's enough then

681
00:34:04,849 --> 00:34:09,469
we don't need to do this case if it's

682
00:34:06,920 --> 00:34:11,030
not enough then try the one that starts

683
00:34:09,469 --> 00:34:12,709
at the beginning so set memory add equal

684
00:34:11,030 --> 00:34:15,530
to zero it's that size available equal

685
00:34:12,710 --> 00:34:18,740
to sort of that that difference between

686
00:34:15,530 --> 00:34:21,769
0 and the first wife that was used once

687
00:34:18,739 --> 00:34:23,719
we have that done we say is the amount

688
00:34:21,769 --> 00:34:25,579
we requested gonna fit in the biggest

689
00:34:23,719 --> 00:34:28,279
chunk we found right we're not saying

690
00:34:25,579 --> 00:34:29,659
the biggest but we we would look for a

691
00:34:28,280 --> 00:34:32,149
bigger chunk if we knew that we needed

692
00:34:29,659 --> 00:34:34,490
one right so we looked for the one that

693
00:34:32,148 --> 00:34:37,369
would be most likely to fit and we got

694
00:34:34,489 --> 00:34:40,819
we said can we fit it if so we get an OP

695
00:34:37,369 --> 00:34:43,869
out we take wherever that location was

696
00:34:40,820 --> 00:34:43,870
we put that in there

697
00:34:44,030 --> 00:34:51,139
we set up everything so that the last

698
00:34:46,309 --> 00:34:58,909
few stuff works okay so you know one

699
00:34:51,139 --> 00:35:06,440
thing I would say I would caution one

700
00:34:58,909 --> 00:35:09,199
thing and that is if memory at was right

701
00:35:06,440 --> 00:35:17,059
on the border is it okay here we would

702
00:35:09,199 --> 00:35:18,469
subtract back so that's that's okay so

703
00:35:17,059 --> 00:35:20,989
then we would say yet this is where

704
00:35:18,469 --> 00:35:24,409
we're gonna write to this is how much

705
00:35:20,989 --> 00:35:29,089
we're gonna write and then the place you

706
00:35:24,409 --> 00:35:31,489
need to restore to is gonna be this size

707
00:35:29,090 --> 00:35:40,510
requested right so that's that's how we

708
00:35:31,489 --> 00:35:43,459
would move the first used forward and

709
00:35:40,510 --> 00:35:45,740
that all looks pretty good and at that

710
00:35:43,460 --> 00:35:52,300
point we would say oh by the way we used

711
00:35:45,739 --> 00:35:55,189
that much from our memory now you know

712
00:35:52,300 --> 00:36:05,599
there is something wrong with this

713
00:35:55,190 --> 00:36:07,400
though and and I think I can see this

714
00:36:05,599 --> 00:36:09,080
may actually just be the cause of our

715
00:36:07,400 --> 00:36:13,099
bug in fact just walking through it

716
00:36:09,079 --> 00:36:19,098
there I think I can sort of see the

717
00:36:13,099 --> 00:36:29,000
problem actually and the problem is that

718
00:36:19,099 --> 00:36:31,070
the the memory used count if we're only

719
00:36:29,000 --> 00:36:35,059
increasing it by the size that we

720
00:36:31,070 --> 00:36:37,519
requested then this wrap operation the

721
00:36:35,059 --> 00:36:43,309
next time through will fail to produce

722
00:36:37,519 --> 00:36:46,130
the actual end if the path we hit was

723
00:36:43,309 --> 00:36:48,920
this one because we have failed to take

724
00:36:46,130 --> 00:36:53,690
into account this additional piece of

725
00:36:48,920 --> 00:36:57,210
memory right I don't know if everyone

726
00:36:53,690 --> 00:37:01,230
out there gets what I'm saying

727
00:36:57,210 --> 00:37:04,139
and we could go if you want let me draw

728
00:37:01,230 --> 00:37:06,269
it for you just in case I don't want

729
00:37:04,139 --> 00:37:08,068
anyone especially any beginners out

730
00:37:06,268 --> 00:37:11,088
there who've been trying to follow along

731
00:37:08,068 --> 00:37:13,199
with the series I don't want them to get

732
00:37:11,088 --> 00:37:15,599
confused about what I'm talking about

733
00:37:13,199 --> 00:37:16,889
here and I when I moved I failed to plug

734
00:37:15,599 --> 00:37:18,930
in my welcome tablet so we're gonna just

735
00:37:16,889 --> 00:37:21,509
plug it in right now and hope that it

736
00:37:18,929 --> 00:37:23,989
works what could possibly go wrong you

737
00:37:21,509 --> 00:37:31,469
know sure it'll be fine

738
00:37:23,989 --> 00:37:35,028
go alright so if I go ahead and open up

739
00:37:31,469 --> 00:37:37,379
mischief here yeah we're fine uh

740
00:37:35,028 --> 00:37:38,789
good job mischief by the way I'm not

741
00:37:37,380 --> 00:37:39,838
mischief this is not mischief this is

742
00:37:38,789 --> 00:37:45,660
actually Milton we switched from

743
00:37:39,838 --> 00:37:48,298
mischief I forgot long ago so what I'm

744
00:37:45,659 --> 00:37:51,389
talking about here is we've got this

745
00:37:48,298 --> 00:37:55,048
buffer and there's a couple different

746
00:37:51,389 --> 00:37:57,239
cases that we're working with I'll draw

747
00:37:55,048 --> 00:38:00,119
all three of them out so that you can

748
00:37:57,239 --> 00:38:03,268
just think about them and then we'll

749
00:38:00,119 --> 00:38:05,999
I'll show you why think there's a bug so

750
00:38:03,268 --> 00:38:08,929
we record two pieces of information we

751
00:38:05,998 --> 00:38:11,879
record essentially a start and a size

752
00:38:08,929 --> 00:38:15,389
the start tells us we're in the buffer

753
00:38:11,880 --> 00:38:17,579
to begin in terms of and and this is for

754
00:38:15,389 --> 00:38:19,348
for what's used so to figure out what's

755
00:38:17,579 --> 00:38:22,528
used in the buffer we record a start in

756
00:38:19,349 --> 00:38:27,329
a size so the start says well this is

757
00:38:22,528 --> 00:38:31,018
used and the size tells from there how

758
00:38:27,329 --> 00:38:35,910
much is used so one case is this falls

759
00:38:31,018 --> 00:38:40,738
inside here another case involves that

760
00:38:35,909 --> 00:38:42,778
same thing and then there's a case where

761
00:38:40,739 --> 00:38:44,849
it actually looks like this and of

762
00:38:42,778 --> 00:38:46,199
course you can't use space off the end

763
00:38:44,849 --> 00:38:48,690
of the buffer so really what it's saying

764
00:38:46,199 --> 00:38:53,368
is it comes back around this way right

765
00:38:48,690 --> 00:38:55,289
so it wraps okay now in the wrapping

766
00:38:53,369 --> 00:38:57,480
case we don't have a problem because

767
00:38:55,289 --> 00:38:59,489
there's only one way to use this chunk

768
00:38:57,480 --> 00:39:03,358
of memory and it's to start here and use

769
00:38:59,489 --> 00:39:05,150
as much as you can right and in the case

770
00:39:03,358 --> 00:39:07,768
where the thing we're trying to fit

771
00:39:05,150 --> 00:39:09,809
happens to fit in the end of the buffer

772
00:39:07,768 --> 00:39:10,949
in this case we also don't have a

773
00:39:09,809 --> 00:39:14,460
problem so case

774
00:39:10,949 --> 00:39:16,588
totally fine case a totally fine because

775
00:39:14,460 --> 00:39:18,929
the thing we got to put just fits right

776
00:39:16,588 --> 00:39:22,230
in here and this is our new space that

777
00:39:18,929 --> 00:39:24,598
we used and everything's fine right what

778
00:39:22,230 --> 00:39:27,329
I'm suggesting is the problem becomes

779
00:39:24,599 --> 00:39:29,220
when we have something where the thing

780
00:39:27,329 --> 00:39:30,539
will fit at the beginning but not at the

781
00:39:29,219 --> 00:39:33,209
end okay

782
00:39:30,539 --> 00:39:37,199
so let's pretend that this buffer was

783
00:39:33,210 --> 00:39:40,858
shorter right like it's that long or

784
00:39:37,199 --> 00:39:42,899
something right so you know if something

785
00:39:40,858 --> 00:39:48,509
fits at the end of that then we're good

786
00:39:42,900 --> 00:39:51,389
to go right so if it fits in here that's

787
00:39:48,510 --> 00:39:53,520
totally fine what we would say is we the

788
00:39:51,389 --> 00:39:55,409
memory app would be here the size would

789
00:39:53,519 --> 00:39:57,210
go to there and we would then record

790
00:39:55,409 --> 00:40:01,889
that as the place that we would restore

791
00:39:57,210 --> 00:40:04,530
ourselves to right and we would set the

792
00:40:01,889 --> 00:40:09,629
used size now to be that by adding this

793
00:40:04,530 --> 00:40:11,130
much to it but now in this case let's

794
00:40:09,630 --> 00:40:14,280
say we had some it wasn't going to fit

795
00:40:11,130 --> 00:40:18,088
we would look here and say oh it does

796
00:40:14,280 --> 00:40:20,040
fit it fits over here right so then we

797
00:40:18,088 --> 00:40:23,009
would set oh the last used is going to

798
00:40:20,039 --> 00:40:26,039
be here the start still remains here but

799
00:40:23,010 --> 00:40:28,619
then oh how much space is used well it's

800
00:40:26,039 --> 00:40:31,108
gonna be this much was already used

801
00:40:28,619 --> 00:40:35,490
we're adding this much there so it's

802
00:40:31,108 --> 00:40:39,449
that much right but we didn't use that

803
00:40:35,489 --> 00:40:41,759
much we used that much plus this much

804
00:40:39,449 --> 00:40:44,868
because we skipped this part of the

805
00:40:41,760 --> 00:40:47,730
buffer so in order to get back to here

806
00:40:44,869 --> 00:40:49,440
we would actually need to include this

807
00:40:47,730 --> 00:40:50,670
much because otherwise what will happen

808
00:40:49,440 --> 00:40:53,460
is when we then go to compute how much

809
00:40:50,670 --> 00:40:57,659
is used we'll miss and we'll say that we

810
00:40:53,460 --> 00:41:00,030
could actually start here right so by

811
00:40:57,659 --> 00:41:00,719
forgetting you know and just to draw it

812
00:41:00,030 --> 00:41:03,089
one more time

813
00:41:00,719 --> 00:41:08,098
we start here and we say this much is

814
00:41:03,088 --> 00:41:10,949
used and I guess I need to draw that

815
00:41:08,099 --> 00:41:15,599
differently we start here and we say

816
00:41:10,949 --> 00:41:18,509
this much is used right now we want to

817
00:41:15,599 --> 00:41:20,099
place this much in there well what we

818
00:41:18,510 --> 00:41:21,960
were doing is we were saying okay the

819
00:41:20,099 --> 00:41:24,660
new the amount that's used is that much

820
00:41:21,960 --> 00:41:27,960
if you actually wrapped that

821
00:41:24,659 --> 00:41:29,969
much you would use only that much but

822
00:41:27,960 --> 00:41:31,740
we're actually starting here to place it

823
00:41:29,969 --> 00:41:35,219
contiguously so we're actually using

824
00:41:31,739 --> 00:41:38,489
this much because this much here was

825
00:41:35,219 --> 00:41:40,288
skipped and that skip amount has to be

826
00:41:38,489 --> 00:41:42,808
counted in order to get to the correct

827
00:41:40,289 --> 00:41:44,880
place otherwise when we actually write

828
00:41:42,809 --> 00:41:49,010
this thing in the next person will

829
00:41:44,880 --> 00:41:49,010
overwrite the beginning of our buffer

830
00:41:49,130 --> 00:41:57,568
you see I'm Sam I hope that makes some

831
00:41:53,130 --> 00:42:00,838
sense it probably doesn't but if you

832
00:41:57,568 --> 00:42:03,150
were inside my head you would know what

833
00:42:00,838 --> 00:42:07,828
I meant hopefully that that just shows

834
00:42:03,150 --> 00:42:09,450
you a little bit of it okay so looking

835
00:42:07,829 --> 00:42:12,150
at how this is working what that means

836
00:42:09,449 --> 00:42:15,449
is in here where we do a transfer memory

837
00:42:12,150 --> 00:42:20,548
and we get that size you know we get

838
00:42:15,449 --> 00:42:23,328
that size going I just I wonder if maybe

839
00:42:20,548 --> 00:42:25,829
the correct thing to do is to not use

840
00:42:23,329 --> 00:42:28,980
transfer memory last that transfer

841
00:42:25,829 --> 00:42:31,470
transfer memory used count thing like

842
00:42:28,980 --> 00:42:33,750
what if we just use a transfer memory

843
00:42:31,469 --> 00:42:36,629
like first used and transfer memory last

844
00:42:33,750 --> 00:42:39,059
used you know what I mean what if we

845
00:42:36,630 --> 00:42:41,220
just did that and then every time when

846
00:42:39,059 --> 00:42:45,778
we do the result we would pick we would

847
00:42:41,219 --> 00:42:47,848
use that that used thing up that's one

848
00:42:45,778 --> 00:42:49,380
thing we could do a different thing we

849
00:42:47,849 --> 00:42:51,150
could do and you know what I think that

850
00:42:49,380 --> 00:42:53,430
would simplify this code too because

851
00:42:51,150 --> 00:42:58,769
remember when you actually do an end

852
00:42:53,429 --> 00:43:01,219
texture op so or complete when we do

853
00:42:58,769 --> 00:43:04,679
this complete drinks transfer up right

854
00:43:01,219 --> 00:43:07,858
that's then gonna kick it back to the

855
00:43:04,679 --> 00:43:11,068
open gel side of things and when it does

856
00:43:07,858 --> 00:43:13,920
this you can see what's going on here it

857
00:43:11,068 --> 00:43:15,750
modifies these two variables and when it

858
00:43:13,920 --> 00:43:18,619
modifies those two variables it's

859
00:43:15,750 --> 00:43:22,349
actually doing like a decrement there

860
00:43:18,619 --> 00:43:24,230
and also setting this first use but

861
00:43:22,349 --> 00:43:31,798
really we should be able to get away

862
00:43:24,230 --> 00:43:34,469
with just doing that right we should be

863
00:43:31,798 --> 00:43:37,929
able to get away with just using that

864
00:43:34,469 --> 00:43:40,179
and so III think I'm encouraged to me

865
00:43:37,929 --> 00:43:42,818
me do that and we can simplify this down

866
00:43:40,179 --> 00:43:47,108
the size would no longer have to be

867
00:43:42,818 --> 00:43:51,250
included and so inside that texture op 2

868
00:43:47,108 --> 00:43:53,199
if I I went back here I think this this

869
00:43:51,250 --> 00:43:55,358
could actually be removed so it would

870
00:43:53,199 --> 00:43:57,730
simplify as well that part of the

871
00:43:55,358 --> 00:44:00,489
process too and so then what we would

872
00:43:57,730 --> 00:44:04,690
say is well in here we would do a first

873
00:44:00,489 --> 00:44:08,949
used in a last used and those would just

874
00:44:04,690 --> 00:44:11,440
kind of move along right so I think

875
00:44:08,949 --> 00:44:13,149
that's right we could do that now

876
00:44:11,440 --> 00:44:15,760
there's a reason I didn't do that

877
00:44:13,150 --> 00:44:18,670
originally the reason I didn't do that

878
00:44:15,760 --> 00:44:24,040
it reads originally was because I didn't

879
00:44:18,670 --> 00:44:26,500
want to have to figure out how to deal

880
00:44:24,039 --> 00:44:29,558
with the case where they were equal

881
00:44:26,500 --> 00:44:33,809
right and the problem with that is in

882
00:44:29,559 --> 00:44:36,609
the case where they were they're equal I

883
00:44:33,809 --> 00:44:38,500
wouldn't know whether I that whether all

884
00:44:36,608 --> 00:44:43,298
the memory was used or none of the

885
00:44:38,500 --> 00:44:47,739
memory was used does that make sense but

886
00:44:43,298 --> 00:44:49,869
I actually can disambiguate that and the

887
00:44:47,739 --> 00:44:51,669
reason is because it just depends

888
00:44:49,869 --> 00:44:55,119
whether or not there are any ops I

889
00:44:51,670 --> 00:44:57,068
suppose would tell me right

890
00:44:55,119 --> 00:44:58,358
if there are no ops outstanding that I

891
00:44:57,068 --> 00:45:01,239
know that nothing is used and if there

892
00:44:58,358 --> 00:45:03,190
are ups our ops outstanding I know that

893
00:45:01,239 --> 00:45:04,539
everything has been used it might be

894
00:45:03,190 --> 00:45:08,470
another way to write would be another

895
00:45:04,539 --> 00:45:12,838
way to say that and so I think that

896
00:45:08,469 --> 00:45:12,838
would be fine and would always work I

897
00:45:12,989 --> 00:45:19,389
don't know we'll find out in a second

898
00:45:16,298 --> 00:45:21,548
as I go destroy this piece of code so if

899
00:45:19,389 --> 00:45:24,009
I do this and then I just clean up my

900
00:45:21,548 --> 00:45:26,079
errors that will force me to you know to

901
00:45:24,010 --> 00:45:28,930
write the stuff that needs to get

902
00:45:26,079 --> 00:45:31,230
written to make this happen so in here

903
00:45:28,929 --> 00:45:33,608
if I set that last used and first used

904
00:45:31,230 --> 00:45:36,039
and then I come through here you can see

905
00:45:33,608 --> 00:45:38,170
this transfer use memory count this part

906
00:45:36,039 --> 00:45:41,429
this part of the logic will have to get

907
00:45:38,170 --> 00:45:45,789
rewritten and that's fine this goes away

908
00:45:41,429 --> 00:45:50,019
and this part will be an update of the

909
00:45:45,789 --> 00:45:50,320
of the the last used code and that's

910
00:45:50,019 --> 00:45:53,409
tough

911
00:45:50,320 --> 00:45:55,450
but I think mostly just looking at where

912
00:45:53,409 --> 00:45:59,230
this is happening

913
00:45:55,449 --> 00:46:00,519
yeah we're just totally fine okay so

914
00:45:59,230 --> 00:46:03,490
coming through here

915
00:46:00,519 --> 00:46:06,009
we look at memory at and what I want to

916
00:46:03,489 --> 00:46:08,619
do is say well memory at now I always

917
00:46:06,010 --> 00:46:12,310
know where it is memory at is always

918
00:46:08,619 --> 00:46:14,829
transfer memory last used right because

919
00:46:12,309 --> 00:46:18,190
that is moving all the way that's always

920
00:46:14,829 --> 00:46:20,529
moving forward to give me like my last

921
00:46:18,190 --> 00:46:23,320
thing byte that I was using was just

922
00:46:20,530 --> 00:46:25,810
before that so this memory app that's

923
00:46:23,320 --> 00:46:29,170
just the value right there

924
00:46:25,809 --> 00:46:32,949
I don't have to do anything to condition

925
00:46:29,170 --> 00:46:36,430
it right so now what I need to know is

926
00:46:32,949 --> 00:46:38,439
well okay does this thing is the using

927
00:46:36,429 --> 00:46:39,309
space that's being used wrapping around

928
00:46:38,440 --> 00:46:41,289
or isn't it

929
00:46:39,309 --> 00:46:44,710
well it's actually pretty easy to tell

930
00:46:41,289 --> 00:46:48,610
because if this pointer is before the

931
00:46:44,710 --> 00:46:50,949
first used than it is right so what I

932
00:46:48,610 --> 00:46:52,720
want to do here is say okay the used

933
00:46:50,949 --> 00:46:55,989
space wraps around is this case all I

934
00:46:52,719 --> 00:46:57,339
have to do is say if memory app which or

935
00:46:55,989 --> 00:47:00,159
and you know I don't even need memory

936
00:46:57,340 --> 00:47:03,460
app to be honest I could really just do

937
00:47:00,159 --> 00:47:08,500
it like this if transfer memory last

938
00:47:03,460 --> 00:47:11,619
used is less than transfer memory first

939
00:47:08,500 --> 00:47:13,539
used so if the last pointer comes before

940
00:47:11,619 --> 00:47:16,869
the first pointer then I knew I wrapped

941
00:47:13,539 --> 00:47:20,800
around and so that's really all I need

942
00:47:16,869 --> 00:47:25,210
to do right now memory at in this case

943
00:47:20,800 --> 00:47:27,880
is again going to start here and when I

944
00:47:25,210 --> 00:47:29,710
know that the space wraps around I don't

945
00:47:27,880 --> 00:47:31,539
have to do this anymore because I'm not

946
00:47:29,710 --> 00:47:34,960
computing on a wrapped buffer so this is

947
00:47:31,539 --> 00:47:37,949
always correct now in this case and then

948
00:47:34,960 --> 00:47:40,630
the size available is still gonna be

949
00:47:37,949 --> 00:47:42,069
computed exactly the same way it's just

950
00:47:40,630 --> 00:47:42,519
gonna be the difference between these

951
00:47:42,070 --> 00:47:44,800
two

952
00:47:42,519 --> 00:47:46,000
wherever I'm that last one use them it's

953
00:47:44,800 --> 00:47:48,010
going to go all the way to that first

954
00:47:46,000 --> 00:47:53,440
use so that's really very

955
00:47:48,010 --> 00:47:55,540
straightforward right now I have to

956
00:47:53,440 --> 00:47:58,030
again be careful about handling the case

957
00:47:55,539 --> 00:48:01,119
where they both are equal so if they are

958
00:47:58,030 --> 00:48:03,460
both equal right now what I would do is

959
00:48:01,119 --> 00:48:04,150
I would fall into this case because last

960
00:48:03,460 --> 00:48:07,449
year

961
00:48:04,150 --> 00:48:11,108
be less than first used and so we'll

962
00:48:07,449 --> 00:48:21,848
have to handle that here what we could

963
00:48:11,108 --> 00:48:24,548
do also is say something like this so in

964
00:48:21,849 --> 00:48:26,890
this case the size is available it's

965
00:48:24,548 --> 00:48:29,139
it's really just gonna be entirely

966
00:48:26,889 --> 00:48:32,048
conditioned upon whether or not there

967
00:48:29,139 --> 00:48:34,179
are any ops outstanding so if there's an

968
00:48:32,048 --> 00:48:36,670
OP count right now then the size

969
00:48:34,179 --> 00:48:38,649
available is zero so it's only if the OP

970
00:48:36,670 --> 00:48:41,680
count is equal to zero then I know that

971
00:48:38,650 --> 00:48:43,778
this is the case where actually all of

972
00:48:41,679 --> 00:48:46,419
the memory is now free I can use all of

973
00:48:43,778 --> 00:48:49,088
it um so it makes it trivial for me to

974
00:48:46,420 --> 00:49:18,940
write in the amount because it's this

975
00:48:49,088 --> 00:49:21,009
entire size right I get everything so

976
00:49:18,940 --> 00:49:22,630
that's an easy way district just in

977
00:49:21,010 --> 00:49:24,910
bigger list of cases we know that this

978
00:49:22,630 --> 00:49:26,619
case is the same and so we're really

979
00:49:24,909 --> 00:49:28,568
just down to this case where the use

980
00:49:26,619 --> 00:49:30,970
space doesn't wrap around that means

981
00:49:28,568 --> 00:49:33,400
there's going to be two different usable

982
00:49:30,969 --> 00:49:36,879
spaces this size available is still

983
00:49:33,400 --> 00:49:39,460
correct right and this one is still

984
00:49:36,880 --> 00:49:40,960
correct as well so I think this still

985
00:49:39,460 --> 00:49:42,608
just works I don't think we need to

986
00:49:40,960 --> 00:49:45,309
really change that case I think it's

987
00:49:42,608 --> 00:49:48,338
still fine and so then all of this stuff

988
00:49:45,309 --> 00:49:50,859
is is good it's just this now is not

989
00:49:48,338 --> 00:49:54,159
what we want to update anymore what we

990
00:49:50,858 --> 00:49:57,159
want to do is get that last used pointer

991
00:49:54,159 --> 00:50:00,129
here and say that last used pointer is

992
00:49:57,159 --> 00:50:03,338
going to equal the place where we would

993
00:50:00,130 --> 00:50:05,410
have ended right so we're actually just

994
00:50:03,338 --> 00:50:06,730
using that computation that we did we're

995
00:50:05,409 --> 00:50:09,460
just gonna say look we just remember

996
00:50:06,730 --> 00:50:11,679
what that was and so I think that's all

997
00:50:09,460 --> 00:50:14,170
good and I don't think there's anything

998
00:50:11,679 --> 00:50:17,909
else we really have to do there

999
00:50:14,170 --> 00:50:17,909
I don't know that this

1000
00:50:18,010 --> 00:50:24,580
I I don't understand why this would have

1001
00:50:21,369 --> 00:50:36,010
to be less I it feels like that's a less

1002
00:50:24,579 --> 00:50:38,920
than or equal to to me and I'm just

1003
00:50:36,010 --> 00:50:41,260
trying to think through like what would

1004
00:50:38,920 --> 00:50:45,730
happen if we ended up at the very end of

1005
00:50:41,260 --> 00:50:48,760
the buffer and so I think if we end up

1006
00:50:45,730 --> 00:50:52,949
at the very end of the buffer we would

1007
00:50:48,760 --> 00:50:57,460
say that the used size was just zero

1008
00:50:52,949 --> 00:51:00,429
here right and then we would wrap to the

1009
00:50:57,460 --> 00:51:05,440
beginning here which is what we want so

1010
00:51:00,429 --> 00:51:09,940
I think that's still all okay now don't

1011
00:51:05,440 --> 00:51:11,650
quote me on that because well it might

1012
00:51:09,940 --> 00:51:15,340
be wrong and I don't want to be quoted

1013
00:51:11,650 --> 00:51:19,420
as having said something wrong nobody

1014
00:51:15,340 --> 00:51:21,789
likes that it's just very unfortunate so

1015
00:51:19,420 --> 00:51:24,608
let's take a look at what we have now

1016
00:51:21,789 --> 00:51:26,529
with our transfers and we know that this

1017
00:51:24,608 --> 00:51:30,369
was a pretty good case for forcing those

1018
00:51:26,530 --> 00:51:33,220
transfers to go erroneously let's just

1019
00:51:30,369 --> 00:51:34,750
hope that our luck continues and this is

1020
00:51:33,219 --> 00:51:36,779
going to be another case where it's

1021
00:51:34,750 --> 00:51:39,130
forcing those transfers to be erroneous

1022
00:51:36,780 --> 00:51:41,080
now I don't know if it is or not because

1023
00:51:39,130 --> 00:51:43,420
again we had no way of really forcing it

1024
00:51:41,079 --> 00:51:48,299
to happen so we just have to give it a

1025
00:51:43,420 --> 00:51:48,300
chance to go wrong and see

1026
00:51:57,659 --> 00:52:15,059
this one looks correct to me and so does

1027
00:52:02,130 --> 00:52:16,950
this one seems pretty good see how the

1028
00:52:15,059 --> 00:52:18,299
next one goes cramp is kicking through

1029
00:52:16,949 --> 00:52:21,089
the door seems to be a little bit of

1030
00:52:18,300 --> 00:52:23,910
turning point for us sometimes where we

1031
00:52:21,090 --> 00:52:26,309
can get some more of those errors coming

1032
00:52:23,909 --> 00:52:31,579
in here see how we're doing your ears

1033
00:52:26,309 --> 00:52:36,269
Santa such a dick

1034
00:52:31,579 --> 00:52:38,309
God Santa Claus is just the worst

1035
00:52:36,269 --> 00:52:40,610
so Krampus come in and save the day here

1036
00:52:38,309 --> 00:52:44,670
in a second let's see what's going on I

1037
00:52:40,610 --> 00:52:52,980
will see if we fixed that that sort of

1038
00:52:44,670 --> 00:52:55,470
corruption bug there that all looks

1039
00:52:52,980 --> 00:52:56,969
clean now so I don't see any more of

1040
00:52:55,469 --> 00:52:58,199
those artifacts we're gonna keep running

1041
00:52:56,969 --> 00:53:02,219
again I'm gonna go through the whole

1042
00:52:58,199 --> 00:53:03,779
thing and what I want to see what what

1043
00:53:02,219 --> 00:53:06,029
happens when we wrap around and play

1044
00:53:03,780 --> 00:53:08,600
again from the beginning too so that's

1045
00:53:06,030 --> 00:53:12,980
looking pretty good

1046
00:53:08,599 --> 00:53:12,980
again everything looks super clean there

1047
00:53:15,579 --> 00:53:18,509
yeah

1048
00:53:24,329 --> 00:53:30,449
yeah this all is looking good now I'm

1049
00:53:26,679 --> 00:53:30,449
not seeing any of those weird artifacts

1050
00:53:41,449 --> 00:53:45,960
so you know we can't really guarantee

1051
00:53:43,710 --> 00:53:50,760
that we fixed it because we're not we

1052
00:53:45,960 --> 00:53:54,510
don't have a reliable repro but it sure

1053
00:53:50,760 --> 00:54:00,540
seems like that was the bug and all of

1054
00:53:54,510 --> 00:54:03,060
these are replaying well so I don't also

1055
00:54:00,539 --> 00:54:04,469
see any problems with the Z which was

1056
00:54:03,059 --> 00:54:09,358
the original reason we started looking

1057
00:54:04,469 --> 00:54:13,469
at it as well I'm not really seeing any

1058
00:54:09,358 --> 00:54:15,769
issues there so this all seems pretty

1059
00:54:13,469 --> 00:54:15,769
good

1060
00:54:24,550 --> 00:54:31,060
yeah so I think we may have fixed the

1061
00:54:28,989 --> 00:54:33,759
bug I'm not seeing any other ones that

1062
00:54:31,059 --> 00:54:35,199
was definitely a bug so I mean when I

1063
00:54:33,760 --> 00:54:38,650
looked at that code I was like this is

1064
00:54:35,199 --> 00:54:40,719
not correct so we definitely fixed a bug

1065
00:54:38,650 --> 00:54:43,510
the question is did we fix the bug I

1066
00:54:40,719 --> 00:54:46,480
don't know if we did or not but the

1067
00:54:43,510 --> 00:54:48,820
entire the entire thing plays back

1068
00:54:46,480 --> 00:54:51,240
properly now so it sure seems like that

1069
00:54:48,820 --> 00:54:54,610
was also the bug we were seeing here

1070
00:54:51,239 --> 00:54:58,000
let's let it wrap once just make sure

1071
00:54:54,610 --> 00:54:59,200
that there wasn't some other funny

1072
00:54:58,000 --> 00:55:03,309
business going on there let's make sure

1073
00:54:59,199 --> 00:55:05,710
it can reload the first scene after you

1074
00:55:03,309 --> 00:55:08,949
know going around once but then I think

1075
00:55:05,710 --> 00:55:10,750
we're probably okay and we can move on

1076
00:55:08,949 --> 00:55:12,789
we can also say that there were no there

1077
00:55:10,750 --> 00:55:15,039
were no Z fighting problems there so I

1078
00:55:12,789 --> 00:55:19,630
don't think we have Z issues okay so

1079
00:55:15,039 --> 00:55:22,869
this is busted so when we loop around

1080
00:55:19,630 --> 00:55:26,340
once this is busted and this doesn't so

1081
00:55:22,869 --> 00:55:29,739
far there's no corrupt textures on here

1082
00:55:26,340 --> 00:55:34,450
so that I don't know where that's coming

1083
00:55:29,739 --> 00:55:39,429
from so we may want to yeah like I don't

1084
00:55:34,449 --> 00:55:42,809
know what's going on here right this is

1085
00:55:39,429 --> 00:55:46,509
all totally garbage so we're not seeing

1086
00:55:42,809 --> 00:55:49,059
any corruption but it's like it's using

1087
00:55:46,510 --> 00:55:51,460
the wrong textures so I don't know if we

1088
00:55:49,059 --> 00:55:52,900
have a texture recycling problem or

1089
00:55:51,460 --> 00:55:54,670
what's happening here but we've got to

1090
00:55:52,900 --> 00:55:57,250
go figure out what's going on because

1091
00:55:54,670 --> 00:55:59,889
this is all messed up and we don't

1092
00:55:57,250 --> 00:56:01,719
really have any idea why so that's

1093
00:55:59,889 --> 00:56:03,609
another run all right so we've got two

1094
00:56:01,719 --> 00:56:05,919
separate bugs one was the corruption but

1095
00:56:03,610 --> 00:56:07,510
looks like it's fixed I'm not seeing any

1096
00:56:05,920 --> 00:56:09,490
of that still even in this kind of

1097
00:56:07,510 --> 00:56:13,240
bizarro world that we've we're hitting

1098
00:56:09,489 --> 00:56:15,519
here on the second loop through so

1099
00:56:13,239 --> 00:56:17,709
that's these work but we all seem to

1100
00:56:15,519 --> 00:56:23,920
have some kind of a like picking the

1101
00:56:17,710 --> 00:56:25,720
incorrect texture issue and so I I

1102
00:56:23,920 --> 00:56:30,340
here's what I'm guessing is happening

1103
00:56:25,719 --> 00:56:32,829
there I'm guessing when we do evict a

1104
00:56:30,340 --> 00:56:35,590
special texture we don't remember that

1105
00:56:32,829 --> 00:56:36,880
we did because remember the asset system

1106
00:56:35,590 --> 00:56:38,470
doesn't have the texture handle eviction

1107
00:56:36,880 --> 00:56:40,900
on there so I bet that's real

1108
00:56:38,469 --> 00:56:46,449
all that's happening so I'm gonna go

1109
00:56:40,900 --> 00:56:47,559
into here and just say that I think this

1110
00:56:46,449 --> 00:56:49,689
is okay

1111
00:56:47,559 --> 00:56:52,029
let's double check just before we move

1112
00:56:49,690 --> 00:56:53,108
on to fixing that asset but I want to

1113
00:56:52,030 --> 00:56:55,570
look at this one more time

1114
00:56:53,108 --> 00:57:02,739
also I looks like my signature got

1115
00:56:55,570 --> 00:57:05,950
messed up there shot six three and four

1116
00:57:02,739 --> 00:57:08,169
are both 3.0 so cuz that still could be

1117
00:57:05,949 --> 00:57:14,949
a bug we're just not singing so let's

1118
00:57:08,170 --> 00:57:16,840
look at shot six and just make sure so

1119
00:57:14,949 --> 00:57:19,779
you don't know what he meant by shot six

1120
00:57:16,840 --> 00:57:21,670
I assumed it was this one but I don't

1121
00:57:19,780 --> 00:57:24,460
really know what I'm gonna do is since

1122
00:57:21,670 --> 00:57:27,159
he says both are at 3.0 F I'm just gonna

1123
00:57:24,460 --> 00:57:29,619
look at 3.0 F and C so yeah it looks

1124
00:57:27,159 --> 00:57:42,909
like these two are both of these two

1125
00:57:29,619 --> 00:57:48,269
here are that is the one where Krampus

1126
00:57:42,909 --> 00:57:53,799
is handing the kid the thing right I

1127
00:57:48,269 --> 00:57:56,889
don't know what these two layers are I'm

1128
00:57:53,800 --> 00:58:00,940
gonna run this and go to that point

1129
00:57:56,889 --> 00:58:03,129
probably because I don't have any better

1130
00:58:00,940 --> 00:58:04,900
idea about what I should be doing and

1131
00:58:03,130 --> 00:58:06,550
then I'll just is there any way I could

1132
00:58:04,900 --> 00:58:09,608
skip right to that too because I

1133
00:58:06,550 --> 00:58:10,780
probably can just skip right to that so

1134
00:58:09,608 --> 00:58:14,079
when we're doing update and render

1135
00:58:10,780 --> 00:58:17,470
cutscene you can see us doing the

1136
00:58:14,079 --> 00:58:19,779
cutscene warmup seconds that's the four

1137
00:58:17,469 --> 00:58:24,789
pre-caching and then we do the cutscene

1138
00:58:19,780 --> 00:58:27,730
T advance bit there so I think we could

1139
00:58:24,789 --> 00:58:32,108
just advance that time manually up by a

1140
00:58:27,730 --> 00:58:34,838
bit although also when does it actually

1141
00:58:32,108 --> 00:58:37,539
wrap that value or does it how does it

1142
00:58:34,838 --> 00:58:40,799
map it in there been a long time since

1143
00:58:37,539 --> 00:58:40,800
we've done this code so I'm not sure

1144
00:58:45,929 --> 00:58:55,569
yes it looks like it just kind of folds

1145
00:58:48,309 --> 00:58:59,829
that in to it so I think I think if I

1146
00:58:55,570 --> 00:59:01,539
wanted to I could just start this at you

1147
00:58:59,829 --> 00:59:06,009
know

1148
00:59:01,539 --> 00:59:10,210
a higher one one so that'd be 0 1 2 3 4

1149
00:59:06,010 --> 00:59:11,590
5 so 6 that be 5 right so if I wanted to

1150
00:59:10,210 --> 00:59:16,480
I could do that

1151
00:59:11,590 --> 00:59:21,690
I think am I wrong about that where I

1152
00:59:16,480 --> 00:59:21,690
just start directly in that one I think

1153
00:59:26,989 --> 00:59:46,129
see if that's true well I was one off so

1154
00:59:35,630 --> 00:59:51,530
yeah where's that code so this is this

1155
00:59:46,130 --> 00:59:56,440
st. I believe and now we're in this

1156
00:59:51,530 --> 01:00:00,500
scene I guess so I think that's this one

1157
00:59:56,440 --> 01:00:01,220
so I guess I want to set that let's try

1158
01:00:00,500 --> 01:00:08,000
that again

1159
01:00:01,219 --> 01:00:10,159
oh look at us

1160
01:00:08,000 --> 01:00:11,690
I see so these are actually correctly

1161
01:00:10,159 --> 01:00:12,889
membered so I wasn't that's why five

1162
01:00:11,690 --> 01:00:14,000
didn't work because it actually is a

1163
01:00:12,889 --> 01:00:17,900
number this way because there's a

1164
01:00:14,000 --> 01:00:21,108
phantom shot included there all right so

1165
01:00:17,900 --> 01:00:22,849
this will start directly on that one and

1166
01:00:21,108 --> 01:00:26,150
so what I want to do here is try

1167
01:00:22,849 --> 01:00:29,680
switching these layers here to give them

1168
01:00:26,150 --> 01:00:35,329
a difference V so I'll just do that

1169
01:00:29,679 --> 01:00:36,980
oops that's find out what I want and

1170
01:00:35,329 --> 01:00:39,500
with the C I don't know if anything will

1171
01:00:36,980 --> 01:00:43,369
happen okay so there is we weren't that

1172
01:00:39,500 --> 01:00:47,119
he was right there was some tears that

1173
01:00:43,369 --> 01:00:50,318
weren't in this shot before right so I

1174
01:00:47,119 --> 01:00:50,318
guess we did need to do that

1175
01:01:28,329 --> 01:01:36,650
so I think that's all good and now again

1176
01:01:33,588 --> 01:01:39,788
I'd like to go through and take a look

1177
01:01:36,650 --> 01:01:45,259
at that that recycling situation there

1178
01:01:39,789 --> 01:01:48,319
so I think we can call that done in the

1179
01:01:45,259 --> 01:01:50,838
asset system so when we talk about

1180
01:01:48,318 --> 01:01:53,480
special textures what you can see

1181
01:01:50,838 --> 01:01:55,869
happening here right is the special

1182
01:01:53,480 --> 01:02:00,498
texture handles they just roll around

1183
01:01:55,869 --> 01:02:03,349
right uh and so like I said since we

1184
01:02:00,498 --> 01:02:05,868
don't have any notion of when these

1185
01:02:03,349 --> 01:02:07,640
things actually get freed the problem

1186
01:02:05,869 --> 01:02:10,460
here is just gonna be when you go to use

1187
01:02:07,639 --> 01:02:12,679
one of these if you've already loaded it

1188
01:02:10,460 --> 01:02:14,509
once and this is exactly what we see

1189
01:02:12,679 --> 01:02:15,259
happening so I'm pretty much positive

1190
01:02:14,509 --> 01:02:18,619
this is the bug

1191
01:02:15,259 --> 01:02:20,690
if you've already loaded it once then we

1192
01:02:18,619 --> 01:02:23,180
don't know that we've unloaded it to

1193
01:02:20,690 --> 01:02:25,039
make room for something else right so

1194
01:02:23,179 --> 01:02:27,288
you just go on using that texture handle

1195
01:02:25,039 --> 01:02:29,569
thinking that the things still in it but

1196
01:02:27,289 --> 01:02:32,299
there isn't anything in it so what we

1197
01:02:29,568 --> 01:02:34,460
need is we need a way to properly

1198
01:02:32,298 --> 01:02:39,650
account for the fact that we have

1199
01:02:34,460 --> 01:02:42,409
unloaded one of these textures and so

1200
01:02:39,650 --> 01:02:45,019
when we unload that texture we need to

1201
01:02:42,409 --> 01:02:47,929
mark the fact that we have unloaded the

1202
01:02:45,018 --> 01:02:50,298
person who was using that texture now in

1203
01:02:47,929 --> 01:02:52,248
the case of the special textures we can

1204
01:02:50,298 --> 01:02:53,960
do that pretty easily because we can

1205
01:02:52,248 --> 01:02:57,738
just keep a list of which assets we're

1206
01:02:53,960 --> 01:03:01,159
using them I don't know how we want to

1207
01:02:57,739 --> 01:03:02,509
do this long term but it's not that well

1208
01:03:01,159 --> 01:03:03,980
you know maybe we should just talk about

1209
01:03:02,509 --> 01:03:06,498
how we want to do it long term because

1210
01:03:03,980 --> 01:03:09,019
we also have to deal with that for this

1211
01:03:06,498 --> 01:03:11,178
case as well so when we look for text

1212
01:03:09,018 --> 01:03:12,918
handles we need to free up texture

1213
01:03:11,179 --> 01:03:16,459
handles we could just make this whole

1214
01:03:12,918 --> 01:03:20,118
thing work in a so that we we do handle

1215
01:03:16,458 --> 01:03:28,639
them both the same way and that might be

1216
01:03:20,119 --> 01:03:32,899
a nicer way to do this so the problem

1217
01:03:28,639 --> 01:03:35,688
that we have is we have a limited number

1218
01:03:32,898 --> 01:03:38,509
of textures we can use because we only

1219
01:03:35,688 --> 01:03:43,068
have a certain amount of texture a space

1220
01:03:38,509 --> 01:03:46,579
on the GPU right so our goal here is to

1221
01:03:43,068 --> 01:03:49,159
figure out how to make sure that when we

1222
01:03:46,579 --> 01:03:50,929
go to allocate button to space for a new

1223
01:03:49,159 --> 01:03:52,969
text we're going to use how do we make

1224
01:03:50,929 --> 01:03:55,219
sure we put it in a place that's likely

1225
01:03:52,969 --> 01:03:57,648
to be the least impactful to what's

1226
01:03:55,219 --> 01:03:58,999
currently being drawn so we don't want

1227
01:03:57,648 --> 01:04:01,058
to use a texture handle that we're

1228
01:03:58,998 --> 01:04:03,168
likely to need again real soon so

1229
01:04:01,059 --> 01:04:05,419
anything that we used unlike the last

1230
01:04:03,168 --> 01:04:10,158
frame we don't want to do and anything

1231
01:04:05,418 --> 01:04:12,078
that we use maybe very recently well I

1232
01:04:10,159 --> 01:04:15,229
do but anything we haven't used for a

1233
01:04:12,079 --> 01:04:19,339
few frames seems like a good candidate

1234
01:04:15,228 --> 01:04:22,938
right but the question is how do we keep

1235
01:04:19,338 --> 01:04:25,759
track of that so the way that that you

1236
01:04:22,938 --> 01:04:28,759
know one way we could do this is every

1237
01:04:25,759 --> 01:04:30,588
time we go to use an asset we could put

1238
01:04:28,759 --> 01:04:33,619
it to the front of some like recently

1239
01:04:30,588 --> 01:04:36,978
used list right but that adds a ton of

1240
01:04:33,619 --> 01:04:39,709
churn and it ends up doing a bunch of

1241
01:04:36,978 --> 01:04:43,068
writing that it's not clear we really

1242
01:04:39,708 --> 01:04:45,108
ever needed to do and so you know a

1243
01:04:43,068 --> 01:04:46,728
better way to do it might be to say look

1244
01:04:45,108 --> 01:04:49,548
when we actually need to allocate

1245
01:04:46,728 --> 01:04:51,648
textures maybe we just go through at

1246
01:04:49,548 --> 01:04:55,130
that point and look at who hasn't been

1247
01:04:51,648 --> 01:04:57,168
used in a while and that way we just do

1248
01:04:55,130 --> 01:04:59,898
that sort once and we don't constantly

1249
01:04:57,168 --> 01:05:04,759
do rewrites right that's one way we

1250
01:04:59,898 --> 01:05:07,848
could do it since only one piece of code

1251
01:05:04,759 --> 01:05:10,880
is actually going through this route at

1252
01:05:07,849 --> 01:05:15,939
any given time it does mean that for the

1253
01:05:10,880 --> 01:05:18,559
most part we could just say well the

1254
01:05:15,938 --> 01:05:21,259
linked list approach does work pretty

1255
01:05:18,559 --> 01:05:22,690
well and it would just work here so I

1256
01:05:21,259 --> 01:05:25,250
don't

1257
01:05:22,690 --> 01:05:27,349
the other way to do it would be let's

1258
01:05:25,250 --> 01:05:30,440
just let's just always do that churning

1259
01:05:27,349 --> 01:05:35,330
so if you look at the way we did it when

1260
01:05:30,440 --> 01:05:37,990
we call get bitmap you can see us

1261
01:05:35,329 --> 01:05:40,909
marking the last used generation here

1262
01:05:37,989 --> 01:05:46,509
but we could just I think if we wanted

1263
01:05:40,909 --> 01:05:46,509
to churn do that that churn

1264
01:05:57,139 --> 01:06:06,559
I mean I don't really see why we

1265
01:05:59,989 --> 01:06:09,199
couldn't cuz nobody calls get bitmap on

1266
01:06:06,559 --> 01:06:11,239
multiple threads it's a single thread

1267
01:06:09,199 --> 01:06:13,399
function and so while you'd be

1268
01:06:11,239 --> 01:06:15,919
constantly hitting like these values in

1269
01:06:13,400 --> 01:06:18,760
memory it seems like it's probably fine

1270
01:06:15,920 --> 01:06:20,599
because those values are just always

1271
01:06:18,760 --> 01:06:31,160
there gonna be always in the cache

1272
01:06:20,599 --> 01:06:34,610
pretty much so I don't know that does

1273
01:06:31,159 --> 01:06:41,089
seem like it could be fine so the way

1274
01:06:34,610 --> 01:06:46,519
that that would work is inside the you

1275
01:06:41,090 --> 01:06:50,240
know inside the asset system here in

1276
01:06:46,519 --> 01:06:52,489
this instead of last used generation we

1277
01:06:50,239 --> 01:06:56,029
wouldn't have that in there all we would

1278
01:06:52,489 --> 01:07:02,119
have is an asset pointer that's like you

1279
01:06:56,030 --> 01:07:05,180
know next LRU and then we would just

1280
01:07:02,119 --> 01:07:06,230
keep a singly linked list or I guess it

1281
01:07:05,179 --> 01:07:08,029
would have to be a doubly linked list

1282
01:07:06,230 --> 01:07:11,860
right because we need to remove and

1283
01:07:08,030 --> 01:07:14,240
reinsert on each on each go-round right

1284
01:07:11,860 --> 01:07:18,760
now I'm trying to think if there's any

1285
01:07:14,239 --> 01:07:22,429
way we should do that differently I

1286
01:07:18,760 --> 01:07:25,040
think it would probably be fine so if we

1287
01:07:22,429 --> 01:07:28,000
did it this way then what we would need

1288
01:07:25,039 --> 01:07:33,460
to have is there would need to be a

1289
01:07:28,000 --> 01:07:33,460
sentinel at the front of the list right

1290
01:07:35,980 --> 01:07:42,130
but other than that I think we'd be fine

1291
01:07:38,360 --> 01:07:42,130
but we also could just

1292
01:07:45,460 --> 01:07:49,750
we also could just write it like this

1293
01:07:55,269 --> 01:08:01,820
like so and that way when we have the

1294
01:07:59,510 --> 01:08:06,560
LRU link adhere and we say look we want

1295
01:08:01,820 --> 01:08:10,250
to have the LRU the least recently used

1296
01:08:06,559 --> 01:08:13,099
list keep kept here inside the asset

1297
01:08:10,250 --> 01:08:17,210
system itself I could just make a thing

1298
01:08:13,099 --> 01:08:21,079
which says okay you know here's that LRU

1299
01:08:17,210 --> 01:08:23,720
sentinel it's not an entire asset it's a

1300
01:08:21,079 --> 01:08:26,479
fake asset right and it's the sentinel

1301
01:08:23,720 --> 01:08:27,619
so we don't ever have to care about that

1302
01:08:26,479 --> 01:08:29,238
part of it

1303
01:08:27,619 --> 01:08:32,720
and you can always get the asset back

1304
01:08:29,238 --> 01:08:35,389
from the LRU this way right now since I

1305
01:08:32,720 --> 01:08:38,420
want to do that casting I suppose I want

1306
01:08:35,390 --> 01:08:45,410
that top I'm not sure about that one way

1307
01:08:38,420 --> 01:08:48,588
or the other but it's probably fine so

1308
01:08:45,409 --> 01:08:52,608
if I want to do that I think we also had

1309
01:08:48,588 --> 01:08:56,028
I can't quite remember but in the shared

1310
01:08:52,609 --> 01:09:02,829
code we have our neighbors in hand made

1311
01:08:56,029 --> 01:09:06,830
that H yeah so we had some like

1312
01:09:02,829 --> 01:09:10,838
boilerplate for this actually right well

1313
01:09:06,829 --> 01:09:14,659
you could just do a d-list insert here

1314
01:09:10,838 --> 01:09:18,318
and be done with it right so I think

1315
01:09:14,659 --> 01:09:21,019
that might also be we could just reuse

1316
01:09:18,319 --> 01:09:23,539
that card as well if we want to now

1317
01:09:21,020 --> 01:09:25,910
inside here I think I may have typed

1318
01:09:23,539 --> 01:09:27,319
that wrong do that now I write that

1319
01:09:25,909 --> 01:09:29,509
typed it right

1320
01:09:27,319 --> 01:09:37,250
so all I would want to do here is remove

1321
01:09:29,509 --> 01:09:42,949
it and then reinsert it and I guess I'm

1322
01:09:37,250 --> 01:09:45,279
not sure why there's no remove but there

1323
01:09:42,949 --> 01:09:45,278
isn't

1324
01:09:50,220 --> 01:10:03,430
there should be this where I say Oh get

1325
01:09:58,989 --> 01:10:10,630
rid of this guy's so my my next previous

1326
01:10:03,430 --> 01:10:17,740
pointer becomes mine my previous next

1327
01:10:10,630 --> 01:10:19,690
pointer becomes mine and then

1328
01:10:17,739 --> 01:10:26,889
technically we would want to make

1329
01:10:19,689 --> 01:10:28,899
ourselves be circular I don't really

1330
01:10:26,890 --> 01:10:32,079
know that we care about that though I

1331
01:10:28,899 --> 01:10:33,849
don't think we do it doesn't look like

1332
01:10:32,079 --> 01:10:38,319
we do because in here you can see us

1333
01:10:33,850 --> 01:10:44,230
just does get cold set so that should be

1334
01:10:38,319 --> 01:10:46,389
fine so if we were to do that I could

1335
01:10:44,229 --> 01:10:52,269
just say look I want to do a delist

1336
01:10:46,390 --> 01:10:54,220
remove and then a d-list insert and we

1337
01:10:52,270 --> 01:10:57,910
can just insert it doesn't matter which

1338
01:10:54,220 --> 01:11:01,570
side we insert really we can insert as

1339
01:10:57,909 --> 01:11:03,670
last or we can insert as first and since

1340
01:11:01,569 --> 01:11:06,039
we want to call this the least recently

1341
01:11:03,670 --> 01:11:11,109
used list I guess I'm gonna say let's

1342
01:11:06,039 --> 01:11:12,729
insert it as last right and so in here

1343
01:11:11,109 --> 01:11:15,069
we would get rid of the last used

1344
01:11:12,729 --> 01:11:16,839
generation stuff and that use generation

1345
01:11:15,069 --> 01:11:20,109
thing would just go away in its entirety

1346
01:11:16,840 --> 01:11:23,489
and so this just resumes using it the

1347
01:11:20,109 --> 01:11:27,009
way that we were using it before so that

1348
01:11:23,489 --> 01:11:33,179
used generation that goes away use

1349
01:11:27,010 --> 01:11:33,180
generation use generation yeah

1350
01:11:34,750 --> 01:11:41,920
good so we find did it this way and then

1351
01:11:39,050 --> 01:11:46,190
all I would have to do is actually

1352
01:11:41,920 --> 01:11:47,560
provide the Sentinel and in this case it

1353
01:11:46,189 --> 01:11:53,229
you know it's the pointer to Sentinel

1354
01:11:47,560 --> 01:11:53,230
and I can just remove this assets

1355
01:11:54,579 --> 01:11:59,329
well actually remove doesn't even

1356
01:11:56,479 --> 01:12:01,759
require that I suppose so you know what

1357
01:11:59,329 --> 01:12:04,279
I guess one thing that I do want to do

1358
01:12:01,760 --> 01:12:06,219
there is a good reason why I would want

1359
01:12:04,279 --> 01:12:08,658
to keep this initialized that way

1360
01:12:06,219 --> 01:12:11,389
because that way you could always remove

1361
01:12:08,658 --> 01:12:15,009
something even if it's not in a list

1362
01:12:11,389 --> 01:12:17,810
removal just won't do anything right so

1363
01:12:15,010 --> 01:12:20,150
setting the next in previous pointers to

1364
01:12:17,810 --> 01:12:21,739
point to myself might be worth it

1365
01:12:20,149 --> 01:12:23,149
just so that I can always know that I

1366
01:12:21,738 --> 01:12:30,849
call that again so it's basically just

1367
01:12:23,149 --> 01:12:39,259
calling this init code right so this is

1368
01:12:30,850 --> 01:12:41,360
probably better I would say so in this

1369
01:12:39,260 --> 01:12:44,360
case I want to remove this asset from

1370
01:12:41,359 --> 01:12:48,079
you know the LRU list if it's in it and

1371
01:12:44,359 --> 01:12:51,408
if it's not that's fine too so I'm going

1372
01:12:48,079 --> 01:12:55,609
to remove the LRU link from there and

1373
01:12:51,408 --> 01:13:02,899
again that's this that's this struct

1374
01:12:55,609 --> 01:13:06,939
right here and then I want to insert it

1375
01:13:02,899 --> 01:13:06,939
into the lists here

1376
01:13:10,930 --> 01:13:16,840
and then I'll just keep those change and

1377
01:13:14,369 --> 01:13:20,979
that way I always know which one is the

1378
01:13:16,840 --> 01:13:23,829
least recently used again I worry that

1379
01:13:20,979 --> 01:13:28,599
it's too much work because it's

1380
01:13:23,829 --> 01:13:30,880
rewriting for pointers every time on

1381
01:13:28,600 --> 01:13:35,250
both so it's like eight pointer writes

1382
01:13:30,880 --> 01:13:58,390
instead of one D word right and so it's

1383
01:13:35,250 --> 01:14:02,859
you know it's definitely alike but you

1384
01:13:58,390 --> 01:14:05,100
know what though I do suppose you could

1385
01:14:02,859 --> 01:14:07,869
eliminate some it would only be six

1386
01:14:05,100 --> 01:14:10,750
right because if you know that you're

1387
01:14:07,869 --> 01:14:13,979
removing it to reinsert then you only

1388
01:14:10,750 --> 01:14:13,979
really actually need six

1389
01:14:28,378 --> 01:14:33,309
so I don't really know what we want to

1390
01:14:30,698 --> 01:14:34,748
do there long term we'll have to see but

1391
01:14:33,309 --> 01:14:36,399
it's entirely possible that this is

1392
01:14:34,748 --> 01:14:39,760
still just fine because of the that's

1393
01:14:36,399 --> 01:14:41,169
not an appreciable overhead so it may

1394
01:14:39,760 --> 01:14:42,519
just be better to do it this way because

1395
01:14:41,168 --> 01:14:44,349
then we don't have to have a weird

1396
01:14:42,519 --> 01:14:47,349
hunting process where we go through

1397
01:14:44,349 --> 01:14:51,090
looking to see who has the lower

1398
01:14:47,349 --> 01:14:51,090
generation numbers or that sort of thing

1399
01:14:51,868 --> 01:14:58,389
all right so if we do that then that

1400
01:14:56,019 --> 01:15:00,849
means it's pretty easy for us to always

1401
01:14:58,389 --> 01:15:02,859
get whoever the least recently used

1402
01:15:00,849 --> 01:15:06,849
person is and just to pop them off that

1403
01:15:02,859 --> 01:15:09,849
list now unfortunately we do have a bit

1404
01:15:06,849 --> 01:15:11,529
of a conundrum here though because we

1405
01:15:09,849 --> 01:15:13,418
don't necessarily know for any given

1406
01:15:11,529 --> 01:15:17,018
asset whether it's on the special

1407
01:15:13,418 --> 01:15:20,319
texture list or not right and so when we

1408
01:15:17,019 --> 01:15:27,070
go to do like our loading of textures

1409
01:15:20,319 --> 01:15:30,639
here assuming normally we call this

1410
01:15:27,069 --> 01:15:33,578
dimensions require special texture we

1411
01:15:30,639 --> 01:15:35,609
don't have any way to do that here we

1412
01:15:33,578 --> 01:15:38,408
would have to actually do some work now

1413
01:15:35,609 --> 01:15:41,739
maybe we want to actually do that work I

1414
01:15:38,408 --> 01:15:44,049
don't know but you can see why that adds

1415
01:15:41,738 --> 01:15:50,348
extra complexity there now one way we

1416
01:15:44,050 --> 01:15:52,599
could do it is to just say well at the

1417
01:15:50,349 --> 01:15:55,359
beginning we'll spin through and ask

1418
01:15:52,599 --> 01:16:00,159
everyone which one they're in and then

1419
01:15:55,359 --> 01:16:09,459
we'll put them in the proper place we

1420
01:16:00,158 --> 01:16:11,228
could do that but feels kind of wrong it

1421
01:16:09,458 --> 01:16:14,819
seems more like what we would want to do

1422
01:16:11,229 --> 01:16:14,820
is just check each time right

1423
01:16:22,899 --> 01:16:35,389
yeah and really I guess it's probably

1424
01:16:28,520 --> 01:16:38,660
okay because this can be alighted here's

1425
01:16:35,390 --> 01:16:43,539
what I will say this check can

1426
01:16:38,659 --> 01:16:49,279
eventually be alighted with the check

1427
01:16:43,539 --> 01:16:53,899
done to determine if we need to switch

1428
01:16:49,279 --> 01:17:15,109
to special texture mode so I think this

1429
01:16:53,899 --> 01:17:17,449
is okay so if I was to do this that

1430
01:17:15,109 --> 01:17:20,329
would let me have both of these so in

1431
01:17:17,449 --> 01:17:24,739
here I could have the special LRU

1432
01:17:20,329 --> 01:17:31,250
central or a special texture and regular

1433
01:17:24,739 --> 01:17:34,909
texture you know I'm saying and so that

1434
01:17:31,250 --> 01:17:36,920
seems good because I don't want to have

1435
01:17:34,909 --> 01:17:39,880
to have both and I don't want to have to

1436
01:17:36,920 --> 01:17:39,880
have them both together

1437
01:17:45,738 --> 01:17:51,379
so if we do it that way

1438
01:17:49,159 --> 01:17:54,229
then what we would want to do is just

1439
01:17:51,380 --> 01:17:56,239
say look we insert it into whichever one

1440
01:17:54,229 --> 01:17:58,459
we need to insert it into we know that

1441
01:17:56,238 --> 01:18:01,968
bitmap width and height because actually

1442
01:17:58,460 --> 01:18:09,260
when we return one of these here this

1443
01:18:01,969 --> 01:18:13,719
HHA asset bitmap bit right that's gonna

1444
01:18:09,260 --> 01:18:20,000
have that info in it so you know this

1445
01:18:13,719 --> 01:18:22,960
this right here is the same so we can

1446
01:18:20,000 --> 01:18:22,960
just do info gym

1447
01:18:23,350 --> 01:18:36,260
info gym and be done all right so I

1448
01:18:31,670 --> 01:18:46,730
think that would be mostly what we would

1449
01:18:36,260 --> 01:18:51,520
need to use there and again the big

1450
01:18:46,729 --> 01:18:51,519
issue there for me is that d-list remove

1451
01:18:54,460 --> 01:19:01,369
it just really violates the clear to

1452
01:18:57,289 --> 01:19:04,369
zero notice of it because that's got to

1453
01:19:01,369 --> 01:19:06,979
be initialized now whereas before we

1454
01:19:04,369 --> 01:19:10,909
wouldn't have had to have done that and

1455
01:19:06,979 --> 01:19:13,069
I don't know how I feel about that you

1456
01:19:10,909 --> 01:19:15,050
know maybe it's fine because when we

1457
01:19:13,069 --> 01:19:19,939
load all these assets in that has to

1458
01:19:15,050 --> 01:19:22,010
happen anyway but you know now you're

1459
01:19:19,939 --> 01:19:25,189
kind of getting into that ugly territory

1460
01:19:22,010 --> 01:19:26,780
of of constructor land that I hate where

1461
01:19:25,189 --> 01:19:28,488
everything has to have this defined

1462
01:19:26,779 --> 01:19:29,840
initialization point and that's just

1463
01:19:28,488 --> 01:19:35,659
you're asking for trouble at that point

1464
01:19:29,840 --> 01:19:42,250
in my opinion so again I don't love that

1465
01:19:35,659 --> 01:19:46,340
and I think I might say instead you know

1466
01:19:42,250 --> 01:19:48,488
maybe and if is just better there you

1467
01:19:46,340 --> 01:19:48,489
know

1468
01:19:57,819 --> 01:20:13,809
like maybe the better thing to do in

1469
01:20:01,340 --> 01:20:13,810
that case is just you know just doing if

1470
01:20:21,850 --> 01:20:37,699
just that you know I'm saying too and

1471
01:20:35,750 --> 01:20:40,429
that way you know when you remove it you

1472
01:20:37,698 --> 01:20:50,029
get something more like this and then we

1473
01:20:40,429 --> 01:20:52,989
would just clear those two that feels

1474
01:20:50,029 --> 01:20:56,689
better to me because now in it 2-0 works

1475
01:20:52,988 --> 01:20:59,629
so it's a little more confusing because

1476
01:20:56,689 --> 01:21:02,059
it doesn't obey the standard for for

1477
01:20:59,630 --> 01:21:04,789
w-league lists where you all unlinked

1478
01:21:02,060 --> 01:21:05,810
people point to themselves but I think I

1479
01:21:04,789 --> 01:21:08,420
like this better

1480
01:21:05,810 --> 01:21:10,699
because I really don't want to be in the

1481
01:21:08,420 --> 01:21:17,060
business of having to make sure all of

1482
01:21:10,698 --> 01:21:18,649
those links are initialized that doesn't

1483
01:21:17,060 --> 01:21:27,440
do it for me

1484
01:21:18,649 --> 01:21:31,149
so if I go from there let's see here I'm

1485
01:21:27,439 --> 01:21:33,710
also wondering can this stuff get moved

1486
01:21:31,149 --> 01:21:35,420
what do we what are what's going on with

1487
01:21:33,710 --> 01:21:37,609
asset locking does anyone care about

1488
01:21:35,420 --> 01:21:39,679
that anymore do you even have an

1489
01:21:37,609 --> 01:21:41,329
operation lock who calls this this is

1490
01:21:39,679 --> 01:21:44,440
just dead code right we like we like

1491
01:21:41,329 --> 01:21:44,439
pulled all this stuff out

1492
01:21:46,630 --> 01:22:01,000
right yeah um so my other question was

1493
01:21:58,779 --> 01:22:03,609
can i is there a way to just move this

1494
01:22:01,000 --> 01:22:08,199
code out of here can I put this

1495
01:22:03,609 --> 01:22:10,179
you know maybe into you know justjust

1496
01:22:08,199 --> 01:22:11,380
into the asset system proper here it is

1497
01:22:10,180 --> 01:22:22,020
does it have to it doesn't really have

1498
01:22:11,380 --> 01:22:22,020
to be in there like that

1499
01:22:31,770 --> 01:22:35,130
I'm just curious

1500
01:22:35,729 --> 01:22:39,609
because I would like those to not be in

1501
01:22:38,140 --> 01:22:55,810
the H file for any particular reason

1502
01:22:39,609 --> 01:22:59,309
because it don't really know yeah so

1503
01:22:55,810 --> 01:22:59,310
there's our prefetches oops

1504
01:23:00,960 --> 01:23:09,670
and I think prefetching fonts is not

1505
01:23:03,909 --> 01:23:12,130
really a thing but okay and this is the

1506
01:23:09,670 --> 01:23:13,989
same that would go into years as well so

1507
01:23:12,130 --> 01:23:15,520
yeah I think that was just again like we

1508
01:23:13,989 --> 01:23:18,909
haven't touched that code in a long time

1509
01:23:15,520 --> 01:23:24,850
I think we're good now I can live in

1510
01:23:18,909 --> 01:23:29,159
here so get bitmap is that just not was

1511
01:23:24,850 --> 01:23:29,160
that not exposed in here

1512
01:23:35,399 --> 01:23:45,710
let's take a look yeah

1513
01:23:40,649 --> 01:23:45,710
so these just need to be put in here

1514
01:23:45,859 --> 01:24:00,989
give a connect sessom and I don't think

1515
01:23:59,189 --> 01:24:03,299
there's an immediate for load font

1516
01:24:00,989 --> 01:24:06,239
anymore either so I'm pretty sure that's

1517
01:24:03,300 --> 01:24:13,100
just dead letter at this point I think

1518
01:24:06,239 --> 01:24:13,099
that's a not a real not a real thing

1519
01:24:14,840 --> 01:24:27,409
yeah so that should really be bad okay

1520
01:24:24,409 --> 01:24:27,409
yeah

1521
01:24:33,719 --> 01:24:40,420
sooo that keeps the list but it doesn't

1522
01:24:38,560 --> 01:24:43,090
actually do anything with it so we're

1523
01:24:40,420 --> 01:24:47,590
not quite done with that part of the

1524
01:24:43,090 --> 01:24:51,130
process so let's go ahead and and put

1525
01:24:47,590 --> 01:24:53,770
that in there as well so what we want to

1526
01:24:51,130 --> 01:24:56,618
do first when we actually create our

1527
01:24:53,770 --> 01:25:01,420
asset system here we're gonna want to

1528
01:24:56,618 --> 01:25:04,238
initialize those links right so I forget

1529
01:25:01,420 --> 01:25:09,550
what those are called here it's like

1530
01:25:04,238 --> 01:25:12,279
d-list in it yeah and so for the Stila

1531
01:25:09,550 --> 01:25:19,719
snip thing I wanna do our special

1532
01:25:12,279 --> 01:25:21,550
texture LRU Sentinel and our regular

1533
01:25:19,719 --> 01:25:23,469
text really simple I'm okay with

1534
01:25:21,550 --> 01:25:25,929
initializing those to point in a

1535
01:25:23,469 --> 01:25:27,399
circular fashion because that's free we

1536
01:25:25,929 --> 01:25:29,920
just do it when we initialize the asset

1537
01:25:27,399 --> 01:25:31,629
system it's I don't want every asset to

1538
01:25:29,920 --> 01:25:34,000
have to be that's just there's tons of

1539
01:25:31,630 --> 01:25:35,710
assets I don't want them all to have to

1540
01:25:34,000 --> 01:25:37,300
get touched in that way for no good

1541
01:25:35,710 --> 01:25:40,210
reason

1542
01:25:37,300 --> 01:25:44,079
so we should just hopefully run the same

1543
01:25:40,210 --> 01:25:47,618
as we used to run now right we shouldn't

1544
01:25:44,079 --> 01:25:49,689
have any any issues and then the only

1545
01:25:47,618 --> 01:25:52,929
question is you know how do we now use

1546
01:25:49,689 --> 01:25:55,019
that change to fix the loading problem

1547
01:25:52,929 --> 01:25:58,029
we were seeing in the cutscenes stuff

1548
01:25:55,020 --> 01:26:01,260
and the answer there is like okay now we

1549
01:25:58,029 --> 01:26:03,969
just need to use those lists to be

1550
01:26:01,260 --> 01:26:06,820
correct in how we apportion our textures

1551
01:26:03,969 --> 01:26:08,829
that's not actually that hard because

1552
01:26:06,819 --> 01:26:13,109
you can see here when we go to load a

1553
01:26:08,829 --> 01:26:17,979
bitmap you can actually see when I do

1554
01:26:13,109 --> 01:26:20,649
the the texture handle assignment this

1555
01:26:17,979 --> 01:26:22,089
was just making nonsense code right it

1556
01:26:20,649 --> 01:26:26,229
was just saying like alright I don't

1557
01:26:22,090 --> 01:26:27,789
know like do you know you give it the

1558
01:26:26,229 --> 01:26:30,399
next one in the sequence or whatever

1559
01:26:27,789 --> 01:26:32,679
right so all we really need to do is

1560
01:26:30,399 --> 01:26:35,039
just replace this nonsense code with

1561
01:26:32,679 --> 01:26:39,908
code that actually checks that LRU list

1562
01:26:35,039 --> 01:26:44,880
and we should be fine right so what we

1563
01:26:39,908 --> 01:26:44,879
want to do here is say have a

1564
01:26:45,550 --> 01:26:52,630
have a call for acquiring one of these

1565
01:26:48,529 --> 01:26:58,219
textures and I probably want like a

1566
01:26:52,630 --> 01:27:07,789
acquire like a choir regular texture

1567
01:26:58,220 --> 01:27:12,490
handle and acquire I guess I maybe I

1568
01:27:07,789 --> 01:27:15,439
don't care though look at it this I

1569
01:27:12,489 --> 01:27:17,119
suppose the code doesn't care so I

1570
01:27:15,439 --> 01:27:21,139
suppose in here I can really just do a

1571
01:27:17,119 --> 01:27:25,430
choir texture handle and it looks like

1572
01:27:21,140 --> 01:27:33,940
this maybe would just want to do the

1573
01:27:25,430 --> 01:27:33,940
check internal so like you know this

1574
01:27:35,859 --> 01:27:55,429
seems right and so when I call a choir

1575
01:27:51,170 --> 01:28:02,539
texture handle I can pass the assets and

1576
01:27:55,430 --> 01:28:05,570
the dimension let's say and it will just

1577
01:28:02,539 --> 01:28:12,260
give me back the right thing so then up

1578
01:28:05,569 --> 01:28:15,309
here if I have one of these guess it's a

1579
01:28:12,260 --> 01:28:15,310
V to you

1580
01:28:17,250 --> 01:28:26,920
like so I would need the assets and then

1581
01:28:23,859 --> 01:28:28,719
in here when it comes through to figure

1582
01:28:26,920 --> 01:28:31,239
out what to do about the texture handles

1583
01:28:28,720 --> 01:28:33,430
they could just say alright if I need a

1584
01:28:31,239 --> 01:28:35,409
special texture handle then I'll use one

1585
01:28:33,430 --> 01:28:37,840
of those if I need a regular channel

1586
01:28:35,409 --> 01:28:41,559
I'll use one of those but what I'm gonna

1587
01:28:37,840 --> 01:28:44,710
do here is instead of allowing these to

1588
01:28:41,560 --> 01:28:46,570
be assertions I'm gonna actually make it

1589
01:28:44,710 --> 01:28:49,779
be a case where it just pulls something

1590
01:28:46,569 --> 01:28:52,960
off the LRU so it's still gonna do this

1591
01:28:49,779 --> 01:28:54,579
because we do need to use new texture

1592
01:28:52,960 --> 01:28:58,359
handles when we haven't used them yet

1593
01:28:54,579 --> 01:29:00,250
right but in the case where we've run

1594
01:28:58,359 --> 01:29:03,489
out so we've used all the texture

1595
01:29:00,250 --> 01:29:08,289
handles that we have then I can do a

1596
01:29:03,489 --> 01:29:10,899
reuse right and so what that involves is

1597
01:29:08,289 --> 01:29:15,039
me taking an asset that was in use and

1598
01:29:10,899 --> 01:29:18,489
basically nullifying it right I want to

1599
01:29:15,039 --> 01:29:22,119
go in here and say this asset that was

1600
01:29:18,489 --> 01:29:26,289
in some state is now gonna unload it's

1601
01:29:22,119 --> 01:29:29,619
going to be unloaded right so I'm gonna

1602
01:29:26,289 --> 01:29:31,569
you know replace asset I'm gonna do

1603
01:29:29,619 --> 01:29:34,960
something where I do like the this asset

1604
01:29:31,569 --> 01:29:39,750
goes to asset State unloaded and the

1605
01:29:34,960 --> 01:29:44,319
texture handle for that replaced asset

1606
01:29:39,750 --> 01:29:48,909
becomes the result here I'm gonna call

1607
01:29:44,319 --> 01:29:50,649
that result so it again just getting out

1608
01:29:48,909 --> 01:29:52,529
of touch trails exact same way but now

1609
01:29:50,649 --> 01:29:56,829
what we're gonna do is when we run out

1610
01:29:52,529 --> 01:29:59,050
we reuse one so we just slam that guy to

1611
01:29:56,829 --> 01:30:02,050
unloaded so he's not loaded anymore it

1612
01:29:59,050 --> 01:30:08,800
can't be used and we we recycle the

1613
01:30:02,050 --> 01:30:11,039
texture handle right that's it pretty

1614
01:30:08,800 --> 01:30:11,039
basic

1615
01:30:11,470 --> 01:30:18,920
so same things gonna happen here what we

1616
01:30:15,920 --> 01:30:21,470
want to do is in here

1617
01:30:18,920 --> 01:30:22,970
these are should you know this should

1618
01:30:21,470 --> 01:30:27,530
look like the exact same piece of code

1619
01:30:22,970 --> 01:30:30,740
it just should should it should do this

1620
01:30:27,529 --> 01:30:37,099
check first right so it should it

1621
01:30:30,739 --> 01:30:42,519
should say if we've got any left to hand

1622
01:30:37,100 --> 01:30:44,829
out you know hand one out otherwise

1623
01:30:42,520 --> 01:30:49,160
steal it from somebody else

1624
01:30:44,829 --> 01:30:52,220
right and that's gonna be the exact same

1625
01:30:49,159 --> 01:30:54,859
thing now that we were doing before now

1626
01:30:52,220 --> 01:30:55,909
this code to find the replacement asset

1627
01:30:54,859 --> 01:30:57,649
it's going to be different because gonna

1628
01:30:55,909 --> 01:31:02,269
look in the LRU differently for each one

1629
01:30:57,649 --> 01:31:04,309
but once it does find one then that code

1630
01:31:02,270 --> 01:31:11,630
would actually be the same so we could

1631
01:31:04,310 --> 01:31:16,160
almost say something like this and then

1632
01:31:11,630 --> 01:31:18,430
down in here we could go okay if there's

1633
01:31:16,159 --> 01:31:25,670
a replace asset then we're gonna do this

1634
01:31:18,430 --> 01:31:27,800
this little dance right so we're

1635
01:31:25,670 --> 01:31:29,060
basically saying look will you know

1636
01:31:27,800 --> 01:31:31,489
we'll do whatever we need to do

1637
01:31:29,060 --> 01:31:33,350
differently for these two sets when we

1638
01:31:31,489 --> 01:31:35,329
figure out what's up we may set a

1639
01:31:33,350 --> 01:31:37,579
replacement asset with when we get down

1640
01:31:35,329 --> 01:31:39,739
here if we did that then you need to

1641
01:31:37,579 --> 01:31:41,059
like unload that guy and do whatever it

1642
01:31:39,739 --> 01:31:44,829
is that you're going to do and blah blah

1643
01:31:41,060 --> 01:31:44,830
blah right like that all has to happen

1644
01:31:58,309 --> 01:32:01,489
couple things

1645
01:32:11,609 --> 01:32:21,130
all right so first things first if this

1646
01:32:17,948 --> 01:32:25,839
asset doesn't have a texture handle

1647
01:32:21,130 --> 01:32:29,319
that's valid then we really don't want

1648
01:32:25,840 --> 01:32:31,539
to put it on the free list and if it

1649
01:32:29,319 --> 01:32:35,920
does have a texture handle that's valid

1650
01:32:31,539 --> 01:32:40,149
then it should be on the free list for

1651
01:32:35,920 --> 01:32:49,679
Zuma bleah so you probably want to do

1652
01:32:40,149 --> 01:32:49,679
this and you probably want to do this

1653
01:32:54,329 --> 01:33:06,519
know how to make a know one of these is

1654
01:32:59,500 --> 01:33:09,488
their clear call right like I want to

1655
01:33:06,520 --> 01:33:11,409
say that once you reuse it we need to

1656
01:33:09,488 --> 01:33:14,698
know that it's not usable anymore and so

1657
01:33:11,408 --> 01:33:14,698
it should look something like this

1658
01:33:18,090 --> 01:33:22,319
that's my story and I'm sticking to it

1659
01:33:28,908 --> 01:33:36,768
yeah so that seems better

1660
01:33:41,289 --> 01:33:46,319
and this is actually gonna get the index

1661
01:33:43,989 --> 01:33:52,269
out of this texture handle by the way

1662
01:33:46,319 --> 01:33:56,849
oops and the width and Heights are going

1663
01:33:52,270 --> 01:34:02,830
to be recycled right so that all seems

1664
01:33:56,850 --> 01:34:07,329
good bouncing I don't see any issues

1665
01:34:02,829 --> 01:34:09,850
with that really all right so finally to

1666
01:34:07,329 --> 01:34:18,159
replace an asset what we would want to

1667
01:34:09,850 --> 01:34:20,020
do is assert that there you know the the

1668
01:34:18,159 --> 01:34:20,979
list we would need to pull from has

1669
01:34:20,020 --> 01:34:25,630
something on it

1670
01:34:20,979 --> 01:34:30,519
for starters so the special texture LRU

1671
01:34:25,630 --> 01:34:31,600
Sentinel or the you know and actually

1672
01:34:30,520 --> 01:34:34,060
now I think about it

1673
01:34:31,600 --> 01:34:40,210
we really only need the Sentinel here so

1674
01:34:34,060 --> 01:34:45,060
this could actually be replaced link or

1675
01:34:40,210 --> 01:34:52,060
rather replace Sentinel so we can even

1676
01:34:45,060 --> 01:34:54,039
reuse all of this code because all we

1677
01:34:52,060 --> 01:34:57,480
need to do here is just say look the

1678
01:34:54,039 --> 01:34:57,479
Sentinel in question is this one

1679
01:35:08,260 --> 01:35:12,800
so we either get the regular texture you

1680
01:35:10,880 --> 01:35:16,449
sent or the special texture LRU Sentinel

1681
01:35:12,800 --> 01:35:19,820
and then we're done that's all we needed

1682
01:35:16,448 --> 01:35:22,399
and then all the rest of the code comes

1683
01:35:19,819 --> 01:35:24,349
into this block here so we say if we

1684
01:35:22,399 --> 01:35:25,698
need to replace the Sentinel let's make

1685
01:35:24,350 --> 01:35:28,670
sure that there's something in it

1686
01:35:25,698 --> 01:35:30,619
because otherwise well we can't get

1687
01:35:28,670 --> 01:35:33,050
anything and there always should be

1688
01:35:30,619 --> 01:35:34,819
because ha if we if we don't have any

1689
01:35:33,050 --> 01:35:36,890
new texture nails to give out there'd

1690
01:35:34,819 --> 01:35:38,569
better be somebody on the LRU right

1691
01:35:36,890 --> 01:35:40,449
because someone's using those texture

1692
01:35:38,569 --> 01:35:42,920
handles so there has to be someone there

1693
01:35:40,448 --> 01:35:47,750
so assuming that there is we will then

1694
01:35:42,920 --> 01:35:50,179
use the the d-link remove call right to

1695
01:35:47,750 --> 01:35:54,770
remove the first so they're replaced

1696
01:35:50,179 --> 01:35:57,710
sentinel next that's the first one in

1697
01:35:54,770 --> 01:36:02,920
the list so d-list remove would pull

1698
01:35:57,710 --> 01:36:07,579
that guy off you know I'm saying and

1699
01:36:02,920 --> 01:36:10,880
once that's pulled off then we can turn

1700
01:36:07,579 --> 01:36:21,039
that into an asset right because that

1701
01:36:10,880 --> 01:36:21,039
just is an asset pointer should do this

1702
01:36:27,430 --> 01:36:30,550
something like that

1703
01:36:33,220 --> 01:36:37,940
so that would pool and off the list we

1704
01:36:35,989 --> 01:36:38,779
use this texture handle and then we can

1705
01:36:37,939 --> 01:36:40,339
go from there

1706
01:36:38,779 --> 01:36:41,659
unfortunately I still use the word

1707
01:36:40,340 --> 01:36:42,020
texture handle there which I didn't mean

1708
01:36:41,659 --> 01:36:45,019
to

1709
01:36:42,020 --> 01:36:48,890
I meant results but other than that

1710
01:36:45,020 --> 01:36:51,020
we're okay I think all right so we don't

1711
01:36:48,890 --> 01:36:57,039
have a news empty for that so we should

1712
01:36:51,020 --> 01:37:05,420
probably make one of those and let's see

1713
01:36:57,039 --> 01:37:17,989
I could even do addy list is empty just

1714
01:37:05,420 --> 01:37:20,590
because hey why not and that's literally

1715
01:37:17,989 --> 01:37:20,590
just this

1716
01:37:28,609 --> 01:37:44,069
okay um I'm not sure I got the sense

1717
01:37:37,020 --> 01:37:50,310
right on that one by the way it's empty

1718
01:37:44,069 --> 01:37:59,149
if it's equal that was backwards let's

1719
01:37:50,310 --> 01:37:59,150
see missing before if do you just remove

1720
01:38:02,449 --> 01:38:07,529
that all seems fine what was it

1721
01:38:06,420 --> 01:38:21,180
complaining about

1722
01:38:07,529 --> 01:38:24,109
oh and so I think that's all I really

1723
01:38:21,180 --> 01:38:26,970
need to do I think that will now

1724
01:38:24,109 --> 01:38:30,179
properly recycle two extra handles based

1725
01:38:26,970 --> 01:38:31,740
on whichever one was the least recently

1726
01:38:30,180 --> 01:38:34,930
used and

1727
01:38:31,739 --> 01:38:34,929
[Music]

1728
01:38:43,590 --> 01:39:04,150
that's actually just to you 16 so I

1729
01:38:46,300 --> 01:39:07,570
guess we want to do that I guess we

1730
01:39:04,149 --> 01:39:11,349
don't have one of these how are you

1731
01:39:07,569 --> 01:39:23,920
supposed to make one of those strictly

1732
01:39:11,350 --> 01:39:37,270
out of curiosity yeah it looks like we

1733
01:39:23,920 --> 01:39:38,279
don't have one of those why not well I

1734
01:39:37,270 --> 01:39:40,450
Madeline

1735
01:39:38,279 --> 01:39:48,759
it's my codebase I can do whatever I

1736
01:39:40,449 --> 01:39:49,119
want right I mean how you guys stopped

1737
01:39:48,760 --> 01:39:53,440
me

1738
01:39:49,119 --> 01:39:54,670
I mean I guess you could download the

1739
01:39:53,439 --> 01:39:58,719
code and change it back but that still

1740
01:39:54,670 --> 01:40:00,760
doesn't stop me from doing it sooo yeah

1741
01:39:58,720 --> 01:40:02,680
in theory now we would reuse texture

1742
01:40:00,760 --> 01:40:04,930
handles we know in the game because we

1743
01:40:02,680 --> 01:40:07,270
never hit that assert we know that in

1744
01:40:04,930 --> 01:40:09,220
the limited amount of stuff that we're

1745
01:40:07,270 --> 01:40:12,210
trying out in the game here we haven't

1746
01:40:09,220 --> 01:40:19,050
hit that limit but it did look like we

1747
01:40:12,210 --> 01:40:23,050
we had that problem here in the actual

1748
01:40:19,050 --> 01:40:25,480
in the cutscene because when we wrap

1749
01:40:23,050 --> 01:40:27,730
around we had cycled through all those

1750
01:40:25,479 --> 01:40:29,859
textures so we know this will blow out

1751
01:40:27,729 --> 01:40:32,589
the special texture limit and it's

1752
01:40:29,859 --> 01:40:34,960
reusing texture handles in there and so

1753
01:40:32,590 --> 01:40:37,569
this should give us a test of that

1754
01:40:34,960 --> 01:40:39,100
system and it's and we should see it

1755
01:40:37,569 --> 01:40:40,869
either succeed or fail to reuse a

1756
01:40:39,100 --> 01:40:43,990
texture handle from the special texture

1757
01:40:40,869 --> 01:40:45,640
list we won't really know if we did the

1758
01:40:43,989 --> 01:40:48,369
right thing on the regular texture list

1759
01:40:45,640 --> 01:40:50,110
but we'll get to that point in the game

1760
01:40:48,369 --> 01:40:54,250
at some point to where we can get some

1761
01:40:50,109 --> 01:40:58,139
testing on that just you know by virtue

1762
01:40:54,250 --> 01:40:58,140
of using enough art assets in the game

1763
01:41:08,720 --> 01:41:13,570
so far it looks reasonable anyway

1764
01:41:44,720 --> 01:41:48,869
so I'm pretty sure by now we would have

1765
01:41:47,310 --> 01:41:50,190
actually blown out the number of special

1766
01:41:48,869 --> 01:41:53,220
textures anyway because there's not that

1767
01:41:50,189 --> 01:41:58,889
many of them so I think we actually are

1768
01:41:53,220 --> 01:42:07,890
already reusing textures I can verify

1769
01:41:58,890 --> 01:42:11,490
that fact by just looking in here when

1770
01:42:07,890 --> 01:42:13,980
we go to allocate that texture handle so

1771
01:42:11,489 --> 01:42:15,960
in here I mean this is gonna be in in

1772
01:42:13,979 --> 01:42:18,629
release mode build so you know it's a

1773
01:42:15,960 --> 01:42:23,699
little Squinkie to be sure but I'm

1774
01:42:18,630 --> 01:42:25,140
guessing we come through this path okay

1775
01:42:23,699 --> 01:42:27,750
apparently we come through none of this

1776
01:42:25,140 --> 01:42:31,970
this must have gotten welded in so it

1777
01:42:27,750 --> 01:42:34,619
probably got welded in here basically so

1778
01:42:31,970 --> 01:42:36,619
you know until someone actually tries to

1779
01:42:34,619 --> 01:42:38,909
acquire a texture handle here we would

1780
01:42:36,619 --> 01:42:39,869
and we'd have to look to see which path

1781
01:42:38,909 --> 01:42:42,510
that goes down by looking at the

1782
01:42:39,869 --> 01:42:49,039
assembly but we could try that so let's

1783
01:42:42,510 --> 01:42:55,110
go in here look at the disassembly and

1784
01:42:49,039 --> 01:43:02,810
let's see so yeah we don't have a lot to

1785
01:42:55,109 --> 01:43:02,809
go on here all right

1786
01:43:05,340 --> 01:43:13,480
so I'm guessing these are the two

1787
01:43:08,250 --> 01:43:15,460
texture encounter increments so I'm

1788
01:43:13,479 --> 01:43:22,019
guessing if we skip both of those we

1789
01:43:15,460 --> 01:43:22,020
have reused the texture and we did so I

1790
01:43:22,139 --> 01:43:27,670
believe this is the path right here

1791
01:43:24,750 --> 01:43:30,698
where we would be pulling it off of the

1792
01:43:27,670 --> 01:43:32,920
Sentinel and reusing it so I think

1793
01:43:30,698 --> 01:43:35,309
that's what's going on right here you

1794
01:43:32,920 --> 01:43:38,408
can see it doing the linked list in fact

1795
01:43:35,310 --> 01:43:41,500
so we are already reusing and we seem to

1796
01:43:38,408 --> 01:43:44,170
be reusing properly so I think that's

1797
01:43:41,500 --> 01:43:47,260
just all there is to it

1798
01:43:44,170 --> 01:43:48,940
so not only did we fixed that bug but we

1799
01:43:47,260 --> 01:43:53,020
also now check that item off our list

1800
01:43:48,939 --> 01:43:55,178
which is text your handle reuse and so

1801
01:43:53,020 --> 01:43:56,170
that should be fine and we're just doing

1802
01:43:55,179 --> 01:43:58,060
it the same way we were doing it before

1803
01:43:56,170 --> 01:44:01,539
when we had a more complex memory scheme

1804
01:43:58,060 --> 01:44:03,099
we're just keeping an LRU list can't

1805
01:44:01,539 --> 01:44:07,479
promise it's the best way but it works

1806
01:44:03,099 --> 01:44:09,760
and so yeah we can check to things off

1807
01:44:07,479 --> 01:44:12,968
of our list today which is pretty great

1808
01:44:09,760 --> 01:44:14,650
actually let me just make sure we can

1809
01:44:12,969 --> 01:44:16,029
wrap because we still don't really know

1810
01:44:14,649 --> 01:44:17,829
if we did it when I percent correctly

1811
01:44:16,029 --> 01:44:18,960
like this isn't very rigorous testing

1812
01:44:17,829 --> 01:44:22,359
here to say the least

1813
01:44:18,960 --> 01:44:24,489
so I would like to just verify that it

1814
01:44:22,359 --> 01:44:26,198
can at least wrap around because then we

1815
01:44:24,488 --> 01:44:28,238
know that we've hit the case where

1816
01:44:26,198 --> 01:44:31,750
people on the outside are trying to

1817
01:44:28,238 --> 01:44:34,359
reuse the texture and that's another

1818
01:44:31,750 --> 01:44:37,210
it's a separate issue in the code so it

1819
01:44:34,359 --> 01:44:38,469
could be that we didn't properly do

1820
01:44:37,210 --> 01:44:44,099
everything we need to do to solve that

1821
01:44:38,469 --> 01:44:44,099
case as well so it's worth going through

1822
01:45:00,960 --> 01:45:16,789
wait for it wait for it much better so

1823
01:45:14,460 --> 01:45:19,529
it looks like we're recycling properly

1824
01:45:16,789 --> 01:45:21,539
we're actually getting right like all of

1825
01:45:19,529 --> 01:45:26,189
those textures those all got reloaded

1826
01:45:21,539 --> 01:45:29,719
from disk we should also be able to see

1827
01:45:26,189 --> 01:45:32,659
you know if we look at our performance

1828
01:45:29,719 --> 01:45:38,520
we should actually see it hit the disk

1829
01:45:32,659 --> 01:45:40,590
to get those assets every time so each

1830
01:45:38,520 --> 01:45:44,790
time before the switch you can see the

1831
01:45:40,590 --> 01:45:47,520
preload and you know it should actually

1832
01:45:44,789 --> 01:45:51,449
you should actually see those spike

1833
01:45:47,520 --> 01:45:55,590
unfortunately it probably gets cached at

1834
01:45:51,449 --> 01:45:59,609
some point and so I don't know yeah like

1835
01:45:55,590 --> 01:46:03,150
like we're probably not if we if it's

1836
01:45:59,609 --> 01:46:04,859
already in the in the disk cache we're

1837
01:46:03,149 --> 01:46:06,960
not gonna really see it on there cuz

1838
01:46:04,859 --> 01:46:08,250
it's sort of a right that would just

1839
01:46:06,960 --> 01:46:11,670
everywhere it's a read that would just

1840
01:46:08,250 --> 01:46:18,600
get answered directly by the OS out of

1841
01:46:11,670 --> 01:46:20,310
the disk cache so there is that but yeah

1842
01:46:18,600 --> 01:46:24,239
if you did like a cold boot we could see

1843
01:46:20,310 --> 01:46:27,150
it so I think that's all good I think

1844
01:46:24,238 --> 01:46:28,569
that's that's just all done so we closed

1845
01:46:27,149 --> 01:46:31,789
out that issue

1846
01:46:28,569 --> 01:46:31,789
[Music]

1847
01:46:36,539 --> 01:46:45,869
and we just ended up doing this one too

1848
01:46:38,430 --> 01:46:48,180
so what else we got

1849
01:46:45,869 --> 01:46:51,029
we don't have much time left but we

1850
01:46:48,180 --> 01:47:00,420
could look and see a couple of these

1851
01:46:51,029 --> 01:47:02,550
other things here I guess we could look

1852
01:47:00,420 --> 01:47:04,140
at some of these so let's see if there's

1853
01:47:02,550 --> 01:47:10,680
some minor ones here let's just clean up

1854
01:47:04,140 --> 01:47:22,170
those so s32 from Z the industry may

1855
01:47:10,680 --> 01:47:26,030
pass ignored instead of at okay let me

1856
01:47:22,170 --> 01:47:26,029
take a look at that call

1857
01:47:34,090 --> 01:47:43,078
yeah so so you can see here like we're

1858
01:47:39,908 --> 01:47:45,879
not we're supposed to not be doing that

1859
01:47:43,078 --> 01:47:47,408
so we were supposed to pass this here

1860
01:47:45,880 --> 01:47:50,859
and I even set us up to do it but I just

1861
01:47:47,408 --> 01:47:52,569
as a typo and we didn't do it and so if

1862
01:47:50,859 --> 01:47:54,038
someone had counted on this not

1863
01:47:52,569 --> 01:47:56,920
advancing the app pointer it would have

1864
01:47:54,038 --> 01:47:58,719
broke so that's just yeah correct I mean

1865
01:47:56,920 --> 01:48:01,440
I think that's just strictly what it

1866
01:47:58,719 --> 01:48:01,439
should have been right

1867
01:48:06,599 --> 01:48:25,900
that way it'll it'll move ignored and

1868
01:48:09,399 --> 01:48:27,759
then not do it so that was definitely a

1869
01:48:25,899 --> 01:48:30,189
bug it just we must just not have been

1870
01:48:27,760 --> 01:48:33,670
using it in any way that actually ever

1871
01:48:30,189 --> 01:48:35,138
caused the bug to manifest but you know

1872
01:48:33,670 --> 01:48:37,090
it might have bitten us later so it's

1873
01:48:35,139 --> 01:48:39,159
good to just kind of get it out of there

1874
01:48:37,090 --> 01:48:40,779
where we can even though it wasn't an

1875
01:48:39,158 --> 01:48:44,109
issue it you know it could have become

1876
01:48:40,779 --> 01:48:51,038
one I look at this sign extension bug

1877
01:48:44,109 --> 01:48:54,269
here so this isn't the yeah oh okay I

1878
01:48:51,038 --> 01:48:54,269
see what you're saying here yeah

1879
01:49:01,260 --> 01:49:07,139
this this is this is actually fairly

1880
01:49:03,569 --> 01:49:12,408
subtle but it's a good point so what's

1881
01:49:07,139 --> 01:49:15,599
happening here is it's doing

1882
01:49:12,408 --> 01:49:21,328
sign-extended promotion of the 32-bit

1883
01:49:15,599 --> 01:49:26,250
64-bit the so this is very subtle if you

1884
01:49:21,328 --> 01:49:32,908
set the high bit right of a you know of

1885
01:49:26,250 --> 01:49:35,219
a 32-bit value then whenever that high

1886
01:49:32,908 --> 01:49:37,529
bit is set it's assumed that that thing

1887
01:49:35,219 --> 01:49:40,980
if you were doing signed arithmetic on

1888
01:49:37,529 --> 01:49:43,009
it or whatever it's assumed that that is

1889
01:49:40,979 --> 01:49:46,109
negative right that's what that means

1890
01:49:43,010 --> 01:49:48,239
and so any time that you have routines

1891
01:49:46,109 --> 01:49:49,109
that work differently based on whether

1892
01:49:48,238 --> 01:49:51,238
something's signed or unsigned

1893
01:49:49,109 --> 01:49:53,460
something's don't write some things just

1894
01:49:51,238 --> 01:49:56,069
work addition for example it doesn't

1895
01:49:53,460 --> 01:49:57,420
care whether you're adding signed or

1896
01:49:56,069 --> 01:49:59,488
unsigned numbers it produces the same

1897
01:49:57,420 --> 01:50:02,670
result because that's why we use two's

1898
01:49:59,488 --> 01:50:03,928
complement as a representation for

1899
01:50:02,670 --> 01:50:05,130
negative integers is because you don't

1900
01:50:03,929 --> 01:50:08,609
have to implement two different pieces

1901
01:50:05,130 --> 01:50:11,969
of code right all right two piece of

1902
01:50:08,609 --> 01:50:14,098
hardware I should say but if you set the

1903
01:50:11,969 --> 01:50:19,469
high bit and then you do something that

1904
01:50:14,099 --> 01:50:20,610
is sensitive to two signed values so

1905
01:50:19,469 --> 01:50:22,769
it's good to do a different thing on a

1906
01:50:20,609 --> 01:50:26,729
signed value you can get into trouble in

1907
01:50:22,769 --> 01:50:29,250
this case C is creating this value and

1908
01:50:26,729 --> 01:50:32,158
the C default rules create it as a

1909
01:50:29,250 --> 01:50:36,328
signed value so it's gonna create it as

1910
01:50:32,158 --> 01:50:38,788
basically negative the four billion two

1911
01:50:36,328 --> 01:50:41,460
billion or whatever right it's gonna

1912
01:50:38,788 --> 01:50:44,069
create it as like the highest negative

1913
01:50:41,460 --> 01:50:46,739
number or whatever that it can write

1914
01:50:44,069 --> 01:50:50,009
because remember all ones would be just

1915
01:50:46,738 --> 01:50:52,408
negative one and a sign bit with all

1916
01:50:50,010 --> 01:51:01,260
zeros is like the highest negative

1917
01:50:52,408 --> 01:51:04,558
number and so if we if we give C that

1918
01:51:01,260 --> 01:51:08,070
value and say compare it to a 64-bit

1919
01:51:04,559 --> 01:51:11,369
value it's going to up convert this from

1920
01:51:08,069 --> 01:51:13,618
32 bits to 64 bits and what it does that

1921
01:51:11,368 --> 01:51:14,839
it will do it one of two ways if it

1922
01:51:13,618 --> 01:51:17,448
thinks the value is on

1923
01:51:14,840 --> 01:51:20,090
signed it'll do an unsigned convert from

1924
01:51:17,448 --> 01:51:22,339
32 to 64 which will pad with zeros

1925
01:51:20,090 --> 01:51:26,569
that's what we've wanted so the top will

1926
01:51:22,340 --> 01:51:29,179
be zeros if instead it's a signed value

1927
01:51:26,569 --> 01:51:31,908
it will do sign extension which

1928
01:51:29,179 --> 01:51:33,618
replicates the high bit so if the high

1929
01:51:31,908 --> 01:51:35,750
but zero it'll get zeros if it's one

1930
01:51:33,618 --> 01:51:38,389
it'll get once that's where this is

1931
01:51:35,750 --> 01:51:40,189
coming from right it thinks it's sign is

1932
01:51:38,389 --> 01:51:42,289
replicating that high bit we didn't

1933
01:51:40,189 --> 01:51:44,359
really want that now it doesn't matter

1934
01:51:42,289 --> 01:51:48,219
because there's no actual other params

1935
01:51:44,359 --> 01:51:51,469
here but like Peter Forrest says here

1936
01:51:48,219 --> 01:51:53,989
that's who reported this if Microsoft

1937
01:51:51,469 --> 01:51:56,810
did add more flags in the future that

1938
01:51:53,988 --> 01:51:59,569
sit up in that high 64 our code would

1939
01:51:56,810 --> 01:52:01,849
stop working properly right and you can

1940
01:51:59,569 --> 01:52:03,529
see why that would be bad so we don't

1941
01:52:01,849 --> 01:52:05,360
want that that was just a sign extension

1942
01:52:03,529 --> 01:52:07,939
bug we didn't that wasn't what we

1943
01:52:05,359 --> 01:52:11,868
thought we were typing right we wanted

1944
01:52:07,939 --> 01:52:17,710
to type this as an unsigned integer so

1945
01:52:11,868 --> 01:52:20,988
we wanted something more like this okay

1946
01:52:17,710 --> 01:52:26,750
so let's see if we can verify that this

1947
01:52:20,988 --> 01:52:36,888
will be correct right I'm gonna go into

1948
01:52:26,750 --> 01:52:38,329
that code or try to anyway and you can

1949
01:52:36,889 --> 01:52:40,969
see there's really only one place that

1950
01:52:38,329 --> 01:52:42,590
we do this here but I'm going to set the

1951
01:52:40,969 --> 01:52:45,679
breakpoint there and I'm gonna look for

1952
01:52:42,590 --> 01:52:47,179
evidence of that sign extension now I

1953
01:52:45,679 --> 01:52:50,329
don't remember what this code is in it's

1954
01:52:47,179 --> 01:52:52,219
in key down so when I call key down I

1955
01:52:50,329 --> 01:52:54,618
get in here and if I look at the

1956
01:52:52,219 --> 01:52:56,630
disassembly what you can see is here's

1957
01:52:54,618 --> 01:52:58,609
that and it's anding with an immediate

1958
01:52:56,630 --> 01:53:00,710
and the immediate is this nasty bit

1959
01:52:58,609 --> 01:53:02,179
right here right and you can see that

1960
01:53:00,710 --> 01:53:05,389
sign extension going on right there

1961
01:53:02,179 --> 01:53:06,949
exactly as Peter suggested and so what

1962
01:53:05,389 --> 01:53:08,719
we'd rather do is say look this is an

1963
01:53:06,948 --> 01:53:12,198
unsigned value my man

1964
01:53:08,719 --> 01:53:15,050
don't sign extend it and so that's what

1965
01:53:12,198 --> 01:53:17,359
I'm going to try here and then we'll see

1966
01:53:15,050 --> 01:53:19,070
if I hit a key now and get back to this

1967
01:53:17,359 --> 01:53:25,689
code we'll see if that did the right

1968
01:53:19,069 --> 01:53:28,460
thing and let's see if it did uh hmm

1969
01:53:25,689 --> 01:53:31,519
okay well that's very interesting

1970
01:53:28,460 --> 01:53:40,970
so it chose to do that by making a shift

1971
01:53:31,520 --> 01:53:43,790
right of the value so okay

1972
01:53:40,970 --> 01:53:53,240
I mean it's doing what we want but that

1973
01:53:43,789 --> 01:53:54,439
was surprising so that's not necessarily

1974
01:53:53,239 --> 01:53:56,479
I guess that's just what it thought was

1975
01:53:54,439 --> 01:54:01,069
fascinated all right well let's watch it

1976
01:53:56,479 --> 01:54:03,229
work right okay so the first thing we're

1977
01:54:01,069 --> 01:54:08,869
gonna do is move up this is presumably

1978
01:54:03,229 --> 01:54:16,159
pointer in here right yeah we're gonna

1979
01:54:08,869 --> 01:54:19,760
do some some moving all right so we're

1980
01:54:16,159 --> 01:54:23,930
gonna shift RSI which is this value here

1981
01:54:19,760 --> 01:54:25,520
and I'm assuming that's the L / M so I'm

1982
01:54:23,930 --> 01:54:37,750
assuming that these are both the L

1983
01:54:25,520 --> 01:54:37,750
params I'm guessing I want to say

1984
01:54:43,270 --> 01:54:49,250
yeah of course it was mmm

1985
01:54:47,390 --> 01:54:50,840
I want to I want to know if that's deal

1986
01:54:49,250 --> 01:54:53,000
for him I'm assuming that's erm such

1987
01:54:50,840 --> 01:54:55,730
just assume it was we're gonna shift

1988
01:54:53,000 --> 01:55:05,090
them down and we're shifting them down

1989
01:54:55,729 --> 01:55:06,409
right like I see the heck's there we're

1990
01:55:05,090 --> 01:55:08,329
shifting them down

1991
01:55:06,409 --> 01:55:11,569
and we're gonna check them against one

1992
01:55:08,329 --> 01:55:14,000
so instead of ending with a mask that

1993
01:55:11,569 --> 01:55:15,289
would have the bit we wanted it's

1994
01:55:14,000 --> 01:55:16,880
actually gonna do the opposite it's

1995
01:55:15,289 --> 01:55:19,550
going to shift it down and then check it

1996
01:55:16,880 --> 01:55:21,650
there and you can see the way it chose

1997
01:55:19,550 --> 01:55:23,930
to do that it actually makes a lot of

1998
01:55:21,649 --> 01:55:26,269
sense what it's doing is it's doing a

1999
01:55:23,930 --> 01:55:28,190
64-bit shift to shift it down on the

2000
01:55:26,270 --> 01:55:32,239
main register then it's just doing the

2001
01:55:28,189 --> 01:55:35,500
and on the limited size register so yes

2002
01:55:32,238 --> 01:55:41,299
well you know although our si is a is a

2003
01:55:35,500 --> 01:55:44,270
and an e ax sorry RSI and our ax our 64

2004
01:55:41,300 --> 01:55:46,730
a bit ESI is just the bottom 32 bits of

2005
01:55:44,270 --> 01:55:48,950
it so it knows that it doesn't have to

2006
01:55:46,729 --> 01:55:51,709
worry about the rest of the stuff that

2007
01:55:48,949 --> 01:55:55,519
may have happened there it can just use

2008
01:55:51,710 --> 01:55:57,260
the bottom 32 which I guess it could

2009
01:55:55,520 --> 01:55:59,390
have used the larger must just not want

2010
01:55:57,260 --> 01:56:03,170
to do that because it's faster to encode

2011
01:55:59,390 --> 01:56:05,600
I guess this way so in both cases it

2012
01:56:03,170 --> 01:56:07,369
chose to shift it down rather than shift

2013
01:56:05,600 --> 01:56:11,840
one up and I assume that just produced

2014
01:56:07,369 --> 01:56:12,319
the shorter sequence right in an easier

2015
01:56:11,840 --> 01:56:17,529
comp

2016
01:56:12,319 --> 01:56:17,529
I guess

2017
01:56:18,760 --> 01:56:26,090
[Music]

2018
01:56:21,170 --> 01:56:26,090
and that's it so I think we fixed that

2019
01:56:41,118 --> 01:56:50,518
all right so that seems good and of

2020
01:56:48,238 --> 01:56:54,089
course the keyboard code alt works as

2021
01:56:50,519 --> 01:56:58,889
well so that's just something we want to

2022
01:56:54,090 --> 01:57:00,179
make sure of there and so we're

2023
01:56:58,889 --> 01:57:03,739
basically out of times there anything

2024
01:57:00,179 --> 01:57:15,328
else really quick I wanted to look at

2025
01:57:03,738 --> 01:57:17,629
what is this so I don't know where that

2026
01:57:15,328 --> 01:57:17,630
is

2027
01:57:17,880 --> 01:57:23,150
let's find out let's find out where that

2028
01:57:21,119 --> 01:57:26,099
is

2029
01:57:23,149 --> 01:57:37,139
so that's debug light bar vertex index

2030
01:57:26,100 --> 01:57:39,750
debug light vertex index yeah I don't

2031
01:57:37,140 --> 01:57:44,240
know what the debug light buffer Tex

2032
01:57:39,750 --> 01:57:44,239
index is being used for these days

2033
01:57:51,890 --> 01:57:57,470
yeah I don't think this is stuff we want

2034
01:57:54,979 --> 01:58:05,269
so I think that is correct that this

2035
01:57:57,470 --> 01:58:07,250
should just not be in here because

2036
01:58:05,270 --> 01:58:08,600
nobody ever sets that so it's not like

2037
01:58:07,250 --> 01:58:29,449
it's ever gonna get called so I think

2038
01:58:08,600 --> 01:58:31,160
that can just come out of there so

2039
01:58:29,449 --> 01:58:33,500
that's not really something that was

2040
01:58:31,159 --> 01:58:37,420
really an issue that's just I mean we

2041
01:58:33,500 --> 01:58:37,420
might as well remove it because why not

2042
01:58:37,930 --> 01:58:43,960
but yeah what's the windows open the

2043
01:58:41,750 --> 01:58:43,960
game

2044
01:58:50,340 --> 01:58:56,770
interesting we probably won't be able to

2045
01:58:52,479 --> 01:58:59,889
plug that one now though right so this

2046
01:58:56,770 --> 01:59:02,590
was a way that we could avoid open jail

2047
01:58:59,890 --> 01:59:05,050
for point two and I think it's fine it

2048
01:59:02,590 --> 01:59:08,260
was really just that we didn't realize

2049
01:59:05,050 --> 01:59:12,279
when we had originally written it that

2050
01:59:08,260 --> 01:59:14,619
we had two different ways that the the

2051
01:59:12,279 --> 01:59:17,500
depth or the MIT count or something the

2052
01:59:14,619 --> 01:59:21,340
level was specified differently

2053
01:59:17,500 --> 01:59:25,840
and so when we called GL tech storage

2054
01:59:21,340 --> 01:59:27,970
that was why and so we didn't really

2055
01:59:25,840 --> 01:59:32,610
want to have to call GL text orage but I

2056
01:59:27,970 --> 01:59:32,610
believe it's this is the problem right

2057
01:59:34,439 --> 01:59:38,649
usage argument values we're changing

2058
01:59:36,789 --> 01:59:43,630
right the levels argument which is 1

2059
01:59:38,649 --> 01:59:46,599
must be 0 right and so this has to

2060
01:59:43,630 --> 01:59:49,770
change so I think if we did this it

2061
01:59:46,600 --> 01:59:53,020
fails right that's why we didn't do it

2062
01:59:49,770 --> 01:59:58,750
and so you know if you do this you just

2063
01:59:53,020 --> 02:00:00,550
get nothing right it errors out and so

2064
01:59:58,750 --> 02:00:03,250
in theory it's just because these are

2065
02:00:00,550 --> 02:00:05,680
different parameters they just for some

2066
02:00:03,250 --> 02:00:08,649
reason open jail decided yeah might as

2067
02:00:05,680 --> 02:00:11,200
well make it maximally confusing and

2068
02:00:08,649 --> 02:00:13,269
that does seem to work so I think we can

2069
02:00:11,199 --> 02:00:20,769
get that out of there and that way tech

2070
02:00:13,270 --> 02:00:24,720
storage is an updated call so I could

2071
02:00:20,770 --> 02:00:24,720
remove that from the system

2072
02:00:34,010 --> 02:00:44,100
okay so that gets rid of GL tech storage

2073
02:00:42,119 --> 02:00:46,019
3d entirely which avoids

2074
02:00:44,100 --> 02:00:49,820
any dependencies on later versions of

2075
02:00:46,020 --> 02:00:49,820
OpenGL which we don't really want to do

2076
02:00:59,630 --> 02:01:07,020
alright I think that's it we'll go to QA

2077
02:01:03,988 --> 02:01:11,549
now so we got quite a few issues checked

2078
02:01:07,020 --> 02:01:15,989
off today at least four these are

2079
02:01:11,550 --> 02:01:17,550
handmade ray so we should you know we

2080
02:01:15,988 --> 02:01:21,809
should do another one of these maybe we

2081
02:01:17,550 --> 02:01:24,570
do one tomorrow but wait I thought I

2082
02:01:21,810 --> 02:01:31,020
marked out as closed oops

2083
02:01:24,569 --> 02:01:33,269
I just forgot to close it so you know I

2084
02:01:31,020 --> 02:01:35,640
don't that's one for a time but we're

2085
02:01:33,270 --> 02:01:37,350
gonna start doing sound and this might

2086
02:01:35,640 --> 02:01:38,369
be more of an involvement but we could

2087
02:01:37,350 --> 02:01:39,780
start we could look at some of these

2088
02:01:38,369 --> 02:01:41,460
other ones here because these

2089
02:01:39,779 --> 02:01:44,250
enhancements are different we don't need

2090
02:01:41,460 --> 02:01:48,840
to work on those those are for later and

2091
02:01:44,250 --> 02:01:52,170
handmade ray is for handmade ray and so

2092
02:01:48,840 --> 02:01:57,779
I think we would really just be doing

2093
02:01:52,170 --> 02:02:02,300
Linux updates check out the fullscreen

2094
02:01:57,779 --> 02:02:06,949
bug look at these two and go from there

2095
02:02:02,300 --> 02:02:06,949
alright let's go to Q&amp;A

2096
02:02:09,689 --> 02:02:20,909
or try to go to Q&amp;A anyway cue a

2097
02:02:53,470 --> 02:03:09,340
does for cooter support indenting of

2098
02:02:56,930 --> 02:03:09,340
shader code yet I guess I don't know uh

2099
02:03:12,159 --> 02:03:22,269
Alan isn't around by a chance of me so I

2100
02:03:19,600 --> 02:03:27,289
see what you're talking about is like

2101
02:03:22,270 --> 02:03:30,200
you know inside here we just had some we

2102
02:03:27,289 --> 02:03:35,060
just dumped some shaders like in there

2103
02:03:30,199 --> 02:03:37,130
and you know it for coder doesn't know

2104
02:03:35,060 --> 02:03:39,230
that that's a shader so it just thinks

2105
02:03:37,130 --> 02:03:45,470
it's a string so it doesn't indent it

2106
02:03:39,229 --> 02:03:47,689
right I'm not sure how I would I think I

2107
02:03:45,470 --> 02:03:50,329
was said to Alan maybe what you could do

2108
02:03:47,689 --> 02:03:52,549
is define your own in your handmade

2109
02:03:50,329 --> 02:03:54,529
custom to find things here where if you

2110
02:03:52,550 --> 02:03:56,949
use them as openings for Strings it

2111
02:03:54,529 --> 02:03:59,719
would continue doing indentation inside

2112
02:03:56,949 --> 02:04:01,609
or something like that but I I don't

2113
02:03:59,720 --> 02:04:02,329
know if anything like that has happened

2114
02:04:01,609 --> 02:04:09,729
yet

2115
02:04:02,329 --> 02:04:11,630
i I don't know

2116
02:04:09,729 --> 02:04:14,799
obviously if you copied it out to a

2117
02:04:11,630 --> 02:04:14,800
separate file it would just work

2118
02:04:19,250 --> 02:04:27,029
personally I've only used least recently

2119
02:04:21,960 --> 02:04:29,640
used Cash's have you ever used a LF you

2120
02:04:27,029 --> 02:04:31,229
and has it worked well

2121
02:04:29,640 --> 02:04:41,850
LF you just sounds like something you

2122
02:04:31,229 --> 02:04:44,279
say in chat LF you man I don't think I

2123
02:04:41,850 --> 02:04:47,100
know what that is or I don't know what

2124
02:04:44,279 --> 02:04:50,090
the acronym stands for what do you what

2125
02:04:47,100 --> 02:04:50,090
is LF you stand for

2126
02:05:03,168 --> 02:05:10,248
at least frequently used I see so you're

2127
02:05:07,458 --> 02:05:11,148
talking about keeping track of how many

2128
02:05:10,248 --> 02:05:16,219
times

2129
02:05:11,149 --> 02:05:22,489
something's been used so I guess what I

2130
02:05:16,219 --> 02:05:24,260
would say is I can't think of the reason

2131
02:05:22,488 --> 02:05:29,089
why I would want that for something like

2132
02:05:24,260 --> 02:05:30,979
textures because the problem is that

2133
02:05:29,090 --> 02:05:32,779
just because you use something a lot

2134
02:05:30,979 --> 02:05:35,570
doesn't mean you're going to use it

2135
02:05:32,779 --> 02:05:38,268
again and the reason for that is because

2136
02:05:35,569 --> 02:05:39,768
you know maybe I'm in this area and it's

2137
02:05:38,269 --> 02:05:41,570
the graveyard area and the player is

2138
02:05:39,769 --> 02:05:43,969
hopping around there for a long time so

2139
02:05:41,569 --> 02:05:46,130
all of these graveyard tiles are like

2140
02:05:43,969 --> 02:05:48,529
really frequently used but then as soon

2141
02:05:46,130 --> 02:05:50,149
as I leave the graveyard I'm never gonna

2142
02:05:48,529 --> 02:05:53,538
use those again til eat until he comes

2143
02:05:50,149 --> 02:05:57,229
back there right and so the fact that

2144
02:05:53,538 --> 02:06:00,929
they got used a lot is really not that

2145
02:05:57,229 --> 02:06:02,289
relevant because games tend to change

2146
02:06:00,930 --> 02:06:04,399
[Music]

2147
02:06:02,288 --> 02:06:07,609
what's in that hot set

2148
02:06:04,399 --> 02:06:10,519
dramatically quickly right so I feel

2149
02:06:07,609 --> 02:06:13,908
like a frequency based one would have to

2150
02:06:10,519 --> 02:06:17,090
be for a different use case maybe unless

2151
02:06:13,908 --> 02:06:23,238
I'm misunderstanding the idea

2152
02:06:17,090 --> 02:06:29,418
I just I don't feel like that really

2153
02:06:23,238 --> 02:06:31,339
works for gaming things as well but I

2154
02:06:29,418 --> 02:06:33,800
don't know but so I'm just thinking of

2155
02:06:31,340 --> 02:06:36,288
that just just off the top of my head it

2156
02:06:33,800 --> 02:06:38,449
may be that that that's not what LF use

2157
02:06:36,288 --> 02:06:42,398
end up doing I'm not sure I have never

2158
02:06:38,448 --> 02:06:44,868
used one I didn't even know that acronym

2159
02:06:42,399 --> 02:06:47,719
but I have certainly only ever used L

2160
02:06:44,868 --> 02:06:53,799
are used for replacement schemes if that

2161
02:06:47,719 --> 02:06:53,800
makes sense so who knows is there a good

2162
02:07:18,029 --> 02:07:24,099
let's see cache is divided into two

2163
02:07:22,119 --> 02:07:26,859
partitions called privileged and

2164
02:07:24,100 --> 02:07:28,570
unprivileged partitions the privileged

2165
02:07:26,859 --> 02:07:30,219
partition can be defined as a protected

2166
02:07:28,569 --> 02:07:31,920
partition if content is highly popular

2167
02:07:30,220 --> 02:07:33,789
is pushed in the privileged partition

2168
02:07:31,920 --> 02:07:37,390
replacement of the privileged partition

2169
02:07:33,789 --> 02:07:39,850
is done as follows lease frequently or

2170
02:07:37,390 --> 02:07:41,860
LF are you least frequently recently

2171
02:07:39,850 --> 02:07:44,590
used evict content from the unprivileged

2172
02:07:41,859 --> 02:07:46,689
partition pushes content from privileged

2173
02:07:44,590 --> 02:07:49,449
partition to unprivileged partition and

2174
02:07:46,689 --> 02:07:51,519
finally inserts new content into the

2175
02:07:49,449 --> 02:07:53,409
privileged partition in the above

2176
02:07:51,520 --> 02:07:55,600
procedure the LRU is used for the

2177
02:07:53,409 --> 02:07:57,760
privileged partition and an approximated

2178
02:07:55,600 --> 02:07:59,470
lfyou scheme is used for the others for

2179
02:07:57,760 --> 02:08:01,329
addition hence the abbreviation Allah

2180
02:07:59,470 --> 02:08:03,699
for you the basic idea is to filter out

2181
02:08:01,329 --> 02:08:05,289
the locally popular contents with a

2182
02:08:03,699 --> 02:08:07,109
Leffew scheme and push the popular

2183
02:08:05,289 --> 02:08:15,970
contents to one of the pivots version

2184
02:08:07,109 --> 02:08:19,329
yeah so I guess what I would say is that

2185
02:08:15,970 --> 02:08:21,610
might be good I would want to read up on

2186
02:08:19,329 --> 02:08:25,180
that more I want to see some analysis of

2187
02:08:21,609 --> 02:08:27,789
how that worked right in practice

2188
02:08:25,180 --> 02:08:30,010
because it's definitely it definitely

2189
02:08:27,789 --> 02:08:33,659
adds a layer of complexity so if you're

2190
02:08:30,010 --> 02:08:33,659
not getting something good for that

2191
02:08:35,279 --> 02:08:40,469
which I'm really not sure you are in the

2192
02:08:37,869 --> 02:08:40,470
case of the game

2193
02:08:49,439 --> 02:08:52,889
because I mean you have to remember

2194
02:08:51,060 --> 02:08:55,020
there's two different kinds of things

2195
02:08:52,890 --> 02:08:56,820
you might be doing here in a game it's a

2196
02:08:55,020 --> 02:08:58,050
little bit different than what they're

2197
02:08:56,819 --> 02:09:00,119
doing for like a content delivery

2198
02:08:58,050 --> 02:09:02,909
network so in a content delivery network

2199
02:09:00,119 --> 02:09:04,649
there's no such thing as like the stuff

2200
02:09:02,909 --> 02:09:07,500
that's that's being presented for this

2201
02:09:04,649 --> 02:09:08,699
frame right because a kind of delivery

2202
02:09:07,500 --> 02:09:10,859
network is not trying to optimize

2203
02:09:08,699 --> 02:09:12,329
experience for one user it's trying to

2204
02:09:10,859 --> 02:09:13,710
optimize experience across many many

2205
02:09:12,329 --> 02:09:17,309
users who are all looking at different

2206
02:09:13,710 --> 02:09:18,720
things in a game we know that the things

2207
02:09:17,310 --> 02:09:21,450
that need to be shown in this frame are

2208
02:09:18,720 --> 02:09:23,789
the things there's a exact set of things

2209
02:09:21,449 --> 02:09:26,429
so we know that the stuff at the top of

2210
02:09:23,789 --> 02:09:28,289
the LRU that was most recently used so

2211
02:09:26,430 --> 02:09:30,180
the last things on the list I guess if

2212
02:09:28,289 --> 02:09:32,789
they're getting added at the end we know

2213
02:09:30,180 --> 02:09:35,159
that those things are what was for this

2214
02:09:32,789 --> 02:09:37,859
frame and everything that was before

2215
02:09:35,159 --> 02:09:40,170
that was stuff that wasn't used on this

2216
02:09:37,859 --> 02:09:43,019
frame so we know it's not actually

2217
02:09:40,170 --> 02:09:52,859
necessary to keep that in the cache for

2218
02:09:43,020 --> 02:09:55,140
right now right and so I don't know that

2219
02:09:52,859 --> 02:09:57,899
you want this additional thing which is

2220
02:09:55,140 --> 02:09:59,640
like over time I also kind of want to

2221
02:09:57,899 --> 02:10:02,639
know that there's this set of things

2222
02:09:59,640 --> 02:10:03,869
that tend to come up frequently and just

2223
02:10:02,640 --> 02:10:04,560
because I don't need to serve them to

2224
02:10:03,869 --> 02:10:06,210
this user

2225
02:10:04,560 --> 02:10:09,140
I shouldn't have victim because the next

2226
02:10:06,210 --> 02:10:11,699
user probably is gonna ask for them

2227
02:10:09,140 --> 02:10:14,910
maybe the game wants that because

2228
02:10:11,699 --> 02:10:17,849
there's UI things or sounds that happen

2229
02:10:14,909 --> 02:10:19,439
very regularly but again I don't the

2230
02:10:17,850 --> 02:10:21,480
fact that it got used a lot before

2231
02:10:19,439 --> 02:10:24,419
doesn't mean that it's gonna get used a

2232
02:10:21,479 --> 02:10:25,139
lot now which is probably the case in a

2233
02:10:24,420 --> 02:10:28,199
CDN

2234
02:10:25,140 --> 02:10:30,360
I would guess so I don't know that's a

2235
02:10:28,199 --> 02:10:33,449
tough one it's a good question I had not

2236
02:10:30,359 --> 02:10:35,779
really thought about those other schemes

2237
02:10:33,449 --> 02:10:35,779
much

2238
02:11:05,449 --> 02:11:10,279
and yeah I guess what I would say is so

2239
02:11:08,300 --> 02:11:11,930
you're saying on there that that lfyou

2240
02:11:10,279 --> 02:11:13,099
has more overhead than LRU more

2241
02:11:11,930 --> 02:11:14,860
accounting but statistically it

2242
02:11:13,100 --> 02:11:17,450
supposedly converged to the same

2243
02:11:14,859 --> 02:11:18,979
expected values yeah that's sort of what

2244
02:11:17,449 --> 02:11:20,510
I was saying is like when confronted

2245
02:11:18,979 --> 02:11:23,539
with a new thing like that like a new

2246
02:11:20,510 --> 02:11:25,520
eviction scheme you kind of got a dig

2247
02:11:23,539 --> 02:11:27,409
into it like I can't just read it and go

2248
02:11:25,520 --> 02:11:28,400
is that better or worse right so that's

2249
02:11:27,409 --> 02:11:30,079
why I said I'd want to see more

2250
02:11:28,399 --> 02:11:32,059
literature on it if people have done

2251
02:11:30,079 --> 02:11:37,059
analyses if they hadn't I'd want to do

2252
02:11:32,060 --> 02:11:37,060
my own you know and just see what was up

2253
02:11:37,810 --> 02:11:41,020
but yeah

2254
02:11:46,210 --> 02:11:50,369
any more on topic questions

2255
02:12:25,479 --> 02:12:29,449
all right well since we have no more on

2256
02:12:27,619 --> 02:12:35,630
topic questions I will mention one

2257
02:12:29,449 --> 02:12:39,349
off-topic thing we need custom emotes

2258
02:12:35,630 --> 02:12:40,970
and I'm not sure what those custom

2259
02:12:39,350 --> 02:12:47,530
emotes should be so we're gonna make

2260
02:12:40,970 --> 02:12:47,530
some but we kind of need like you know

2261
02:12:48,279 --> 02:12:53,619
we need to do that right like we need to

2262
02:12:55,329 --> 02:13:01,189
we need to figure out what those assets

2263
02:12:57,859 --> 02:13:02,269
are gonna be and I don't remember how

2264
02:13:01,189 --> 02:13:04,099
many there are

2265
02:13:02,270 --> 02:13:08,480
let me see if I can see on here where

2266
02:13:04,100 --> 02:13:12,289
that is it's under like channel or

2267
02:13:08,479 --> 02:13:17,539
something or partner or whatever it is

2268
02:13:12,289 --> 02:13:19,130
yeah yeah yeah so like loyalty badges

2269
02:13:17,539 --> 02:13:21,680
and stuff are coming and those are just

2270
02:13:19,130 --> 02:13:23,060
gonna be like what you know they make

2271
02:13:21,680 --> 02:13:24,800
sense you're like okay these are loyal

2272
02:13:23,060 --> 02:13:27,830
the badge would make sense the emotes

2273
02:13:24,800 --> 02:13:32,680
are whatever you want right so you can

2274
02:13:27,829 --> 02:13:38,899
like you can define your own codes and

2275
02:13:32,680 --> 02:13:41,690
we can make like three of them and or

2276
02:13:38,899 --> 02:13:45,710
three or four of them actually four of

2277
02:13:41,689 --> 02:13:48,229
them I can't tell how many supposed to

2278
02:13:45,710 --> 02:13:51,109
be five six we can make probably more

2279
02:13:48,229 --> 02:13:53,449
than we can think of and so we need some

2280
02:13:51,109 --> 02:13:57,529
ideas about what the imodium oates

2281
02:13:53,449 --> 02:13:59,059
should be right like owls shame is

2282
02:13:57,529 --> 02:14:03,019
probably gonna be one of them

2283
02:13:59,060 --> 02:14:09,890
I would guess and piggy should be one of

2284
02:14:03,020 --> 02:14:14,770
them yeah mint spider I agree with you I

2285
02:14:09,890 --> 02:14:14,770
love shame and pig hat for sure

2286
02:14:25,158 --> 02:14:32,898
I'll make a little oops I was about to

2287
02:14:31,578 --> 02:14:34,578
send a mail to myself I typed on the

2288
02:14:32,899 --> 02:14:37,909
wrong keyboard so I just entered it into

2289
02:14:34,578 --> 02:14:39,498
my code instead send it to Casey there

2290
02:14:37,908 --> 02:14:50,648
we go

2291
02:14:39,498 --> 02:14:50,648
emotes so Pig hat our shame what else

2292
02:14:58,529 --> 02:15:03,059
good look at the handmade Network

2293
02:15:00,149 --> 02:15:08,969
discordant modes and john-john blows

2294
02:15:03,060 --> 02:15:12,600
face we would have to pay like John blow

2295
02:15:08,970 --> 02:15:14,490
licensing fees alright that's seen the

2296
02:15:12,600 --> 02:15:17,630
scene will anyway be thinking about that

2297
02:15:14,489 --> 02:15:20,399
if you have ideas about what you want a

2298
02:15:17,630 --> 02:15:24,630
Lemongrab can we do that though I don't

2299
02:15:20,399 --> 02:15:29,699
know if Lemongrab is is allowed I mean

2300
02:15:24,630 --> 02:15:31,260
that's that's Lemongrab I don't know how

2301
02:15:29,699 --> 02:15:33,269
like what's I don't even know what the

2302
02:15:31,260 --> 02:15:34,949
copyright laws on stuff like that are I

2303
02:15:33,270 --> 02:15:37,710
don't even know how they work there

2304
02:15:34,949 --> 02:15:43,500
because I think that's kind of difficult

2305
02:15:37,710 --> 02:15:45,810
territory I don't know if anyone sued

2306
02:15:43,500 --> 02:15:48,359
for using their likeness as an emote or

2307
02:15:45,810 --> 02:15:51,330
a cartoon character that they created as

2308
02:15:48,359 --> 02:15:54,349
an emote I don't know like what goes on

2309
02:15:51,329 --> 02:15:54,350
there at all

2310
02:15:55,159 --> 02:16:02,250
that's hard to say anyway I'm gonna wrap

2311
02:15:59,640 --> 02:16:06,890
it up oops

2312
02:16:02,250 --> 02:16:06,890
let's there there we go

2313
02:16:11,168 --> 02:16:15,078
okay thank you for joining me for this

2314
02:16:13,939 --> 02:16:17,869
on a handmade here it's sort of pleasure

2315
02:16:15,078 --> 02:16:18,948
coating with you as always if you would

2316
02:16:17,868 --> 02:16:20,448
like to follow along the series at home

2317
02:16:18,948 --> 02:16:22,788
you could always pewter the game on

2318
02:16:20,448 --> 02:16:24,918
handmade hero org and it comes with a

2319
02:16:22,788 --> 02:16:29,300
source code so you can follow along with

2320
02:16:24,918 --> 02:16:30,439
the series I will probably be back from

2321
02:16:29,300 --> 02:16:31,820
the stream I'll probably sneak another

2322
02:16:30,439 --> 02:16:35,988
one in there before winter break really

2323
02:16:31,819 --> 02:16:37,279
begins you know so so I can't promise

2324
02:16:35,988 --> 02:16:38,929
it's the last you'll see of me before

2325
02:16:37,279 --> 02:16:42,319
Christmas there might be another one

2326
02:16:38,929 --> 02:16:45,699
tomorrow so we'll see stay tuned until

2327
02:16:42,318 --> 02:16:49,039
then or till whenever we get back here

2328
02:16:45,699 --> 02:16:51,939
have fun coding and I'll see everyone on

2329
02:16:49,040 --> 02:16:51,939
the Internet take it easy everybody

