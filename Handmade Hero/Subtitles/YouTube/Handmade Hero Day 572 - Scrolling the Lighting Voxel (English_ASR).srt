1
00:00:01,540 --> 00:00:06,020
hello everyone and welcome to hand made

2
00:00:04,609 --> 00:00:09,650
here the show recode a complete game

3
00:00:06,019 --> 00:00:11,239
live on stream we are going to give this

4
00:00:09,650 --> 00:00:12,349
a shot today we don't actually know how

5
00:00:11,240 --> 00:00:13,730
long the internet will be up for

6
00:00:12,349 --> 00:00:16,250
apparently there was some kind of a

7
00:00:13,730 --> 00:00:17,868
significant outage in the area and I am

8
00:00:16,250 --> 00:00:20,118
told although I don't know how accurate

9
00:00:17,868 --> 00:00:22,550
it is that the internet is currently

10
00:00:20,118 --> 00:00:24,980
running quote-unquote on batteries I

11
00:00:22,550 --> 00:00:27,199
don't know what that actually means I'm

12
00:00:24,980 --> 00:00:29,990
assuming it means some kind of a UPS or

13
00:00:27,199 --> 00:00:34,340
some kind of like that large battery

14
00:00:29,989 --> 00:00:35,449
backup system but I think it could kind

15
00:00:34,340 --> 00:00:39,080
of go at any time

16
00:00:35,450 --> 00:00:41,630
so we're gonna give this a shot if it if

17
00:00:39,079 --> 00:00:43,699
the stream craps out in the middle don't

18
00:00:41,630 --> 00:00:45,260
worry I am recording it locally and

19
00:00:43,700 --> 00:00:47,540
that's what I post for the video on

20
00:00:45,259 --> 00:00:49,699
demand so I will do the entire episode

21
00:00:47,539 --> 00:00:52,219
one way or the other and it will go up

22
00:00:49,700 --> 00:00:54,380
on YouTube it's just people watching at

23
00:00:52,219 --> 00:00:56,060
home on Twitch right now may find

24
00:00:54,380 --> 00:00:57,830
themselves without a stream if the

25
00:00:56,060 --> 00:00:59,450
internet cuts out because obviously

26
00:00:57,829 --> 00:01:01,339
there's nothing that's going to be able

27
00:00:59,450 --> 00:01:03,260
to be streamed if there's no internet

28
00:01:01,340 --> 00:01:08,740
but that does not mean the stream is

29
00:01:03,259 --> 00:01:11,420
gone it will hopefully return just fine

30
00:01:08,739 --> 00:01:13,699
let's go ahead and get started what we

31
00:01:11,420 --> 00:01:17,390
need to be doing today is moving towards

32
00:01:13,700 --> 00:01:19,820
a stable voxel implementation for our

33
00:01:17,390 --> 00:01:21,969
lighting we've done a lot of the

34
00:01:19,819 --> 00:01:24,019
groundwork and let me sort of give you a

35
00:01:21,969 --> 00:01:26,840
refresher for those of you just joining

36
00:01:24,019 --> 00:01:29,060
us as to where we are in the process of

37
00:01:26,840 --> 00:01:32,150
implementing a fairly good lighting

38
00:01:29,060 --> 00:01:34,280
solution in our game you can see the

39
00:01:32,150 --> 00:01:37,010
little hero hopping around here and

40
00:01:34,280 --> 00:01:39,680
there is a light source above the hero's

41
00:01:37,010 --> 00:01:41,719
head and what's happening here is we're

42
00:01:39,680 --> 00:01:44,270
just running a very simple test at the

43
00:01:41,719 --> 00:01:48,228
moment that is picking the light source

44
00:01:44,269 --> 00:01:50,390
closest to wherever the various sort of

45
00:01:48,228 --> 00:01:53,120
parts of the of the scene are so for

46
00:01:50,390 --> 00:01:55,280
example in here this would be like the

47
00:01:53,120 --> 00:01:57,710
closest light source and you can see

48
00:01:55,280 --> 00:01:59,989
there's a little white square there

49
00:01:57,709 --> 00:02:01,669
that's showing the light and you can see

50
00:01:59,989 --> 00:02:03,739
here that all of this stuff is getting

51
00:02:01,670 --> 00:02:06,978
lit by that similarly like up here it's

52
00:02:03,739 --> 00:02:08,929
getting lit by that and so on and then

53
00:02:06,978 --> 00:02:10,848
what we're doing is there's some basic

54
00:02:08,929 --> 00:02:12,408
ray casting that we tested but right now

55
00:02:10,848 --> 00:02:14,479
it's sort of knocked up in any

56
00:02:12,408 --> 00:02:16,068
particularly smart

57
00:02:14,479 --> 00:02:18,158
and we don't have a lot of ways of

58
00:02:16,068 --> 00:02:20,329
blending it incorrectly so actually the

59
00:02:18,158 --> 00:02:22,519
quality of the solution you see here is

60
00:02:20,330 --> 00:02:24,290
totally crap at the moment and that's

61
00:02:22,519 --> 00:02:25,789
actually not because our interpolation

62
00:02:24,289 --> 00:02:27,919
isn't good our interpolation was quite

63
00:02:25,789 --> 00:02:30,348
good and in fact if we do casting

64
00:02:27,919 --> 00:02:32,238
against just the single light source at

65
00:02:30,348 --> 00:02:35,988
the hero head we get pretty good results

66
00:02:32,239 --> 00:02:38,120
but what's happening here is that

67
00:02:35,989 --> 00:02:40,039
boundaries between where the light

68
00:02:38,120 --> 00:02:42,039
source would switch we get artifacts

69
00:02:40,039 --> 00:02:44,359
because we just kind of overwrite

70
00:02:42,039 --> 00:02:46,729
whatever was there before with whatever

71
00:02:44,360 --> 00:02:49,280
is there now right and so we don't

72
00:02:46,729 --> 00:02:51,378
really get any we don't really get any

73
00:02:49,280 --> 00:02:53,359
coherence at those places where the

74
00:02:51,378 --> 00:02:56,568
boundaries switch and furthermore we get

75
00:02:53,359 --> 00:02:58,010
no frame to frame coherence either so we

76
00:02:56,568 --> 00:02:59,358
don't get any smoothing or anything like

77
00:02:58,009 --> 00:03:01,399
that and that's something that we also

78
00:02:59,359 --> 00:03:03,920
have to address because once we go and

79
00:03:01,400 --> 00:03:06,530
turn on the full secondary bounce

80
00:03:03,919 --> 00:03:08,238
lighting as well it's actually infinite

81
00:03:06,530 --> 00:03:10,759
bounce lighting we've gotten there that

82
00:03:08,239 --> 00:03:12,739
we are sort of waiting to turn on that's

83
00:03:10,759 --> 00:03:15,348
gonna need to be smoothed over time and

84
00:03:12,739 --> 00:03:17,628
so for that we need to keep it as as

85
00:03:15,348 --> 00:03:19,638
well so we have ourselves stuff to do

86
00:03:17,628 --> 00:03:20,989
all of this good stuff and I think we're

87
00:03:19,639 --> 00:03:22,250
kind of on the verge of having quite

88
00:03:20,989 --> 00:03:23,659
good lighting coming we've done it

89
00:03:22,250 --> 00:03:25,729
several tests over the past couple weeks

90
00:03:23,659 --> 00:03:28,219
with very good results and so now we're

91
00:03:25,729 --> 00:03:29,750
just trying to pull that together but

92
00:03:28,219 --> 00:03:32,930
the main piece that we're missing right

93
00:03:29,750 --> 00:03:33,620
now is a way of blending light fields

94
00:03:32,930 --> 00:03:36,950
together

95
00:03:33,620 --> 00:03:38,780
now what I mean by that and I I can

96
00:03:36,949 --> 00:03:40,659
probably just go ahead and hook this up

97
00:03:38,780 --> 00:03:43,389
I think we left this code path in there

98
00:03:40,659 --> 00:03:47,168
so I can probably do a really quick

99
00:03:43,389 --> 00:03:49,340
reversion to it to show you what I mean

100
00:03:47,169 --> 00:03:50,989
but especially what we're doing is we're

101
00:03:49,340 --> 00:03:52,669
doing a light field interpolation that's

102
00:03:50,989 --> 00:03:55,969
interpolating the distance from the

103
00:03:52,669 --> 00:03:57,349
light source effectively and the normal

104
00:03:55,969 --> 00:03:58,669
to the light source that's sort of how

105
00:03:57,348 --> 00:04:01,250
the the light field is being

106
00:03:58,669 --> 00:04:02,629
interpolated and I don't know that

107
00:04:01,250 --> 00:04:04,729
that's really the way that we want to do

108
00:04:02,628 --> 00:04:06,759
it but what I can say about it is that

109
00:04:04,729 --> 00:04:09,590
by using sort of negative light values

110
00:04:06,759 --> 00:04:11,840
as we sort of discovered you could do

111
00:04:09,590 --> 00:04:14,359
some really amazingly high-quality

112
00:04:11,840 --> 00:04:16,189
interpolation much much better than I

113
00:04:14,359 --> 00:04:18,769
ever really thought was possible in this

114
00:04:16,189 --> 00:04:21,259
case we sort of stumbled upon it and I

115
00:04:18,769 --> 00:04:23,000
said whom I wonder if we effectively use

116
00:04:21,259 --> 00:04:24,439
distance fields we could do some good

117
00:04:23,000 --> 00:04:27,408
interpolation here turns out that

118
00:04:24,439 --> 00:04:28,430
intuition was quite right indeed and we

119
00:04:27,408 --> 00:04:30,349
ended up in a situation

120
00:04:28,430 --> 00:04:32,750
where it kind of is something that I

121
00:04:30,350 --> 00:04:36,919
want to test a little bit more

122
00:04:32,750 --> 00:04:38,810
aggressively so here we can see where

123
00:04:36,918 --> 00:04:41,000
we've got this test cast from probes

124
00:04:38,810 --> 00:04:42,709
here and there's you know test light

125
00:04:41,000 --> 00:04:45,850
transfers a thing that's enabled right

126
00:04:42,709 --> 00:04:48,620
now and you can see us here doing some

127
00:04:45,850 --> 00:04:52,310
light transfer from from the voxel in

128
00:04:48,620 --> 00:04:54,139
here I think we if zero this out at the

129
00:04:52,310 --> 00:04:57,620
moment am I wrong about that that's the

130
00:04:54,139 --> 00:04:59,509
end if and if so here's the transfer

131
00:04:57,620 --> 00:05:06,978
version where's this coming from

132
00:04:59,509 --> 00:05:09,199
normally not let's see yeah this is

133
00:05:06,978 --> 00:05:12,139
coming from the cells of the standing

134
00:05:09,199 --> 00:05:13,580
voxel yeah so basically if you look at

135
00:05:12,139 --> 00:05:15,620
what's going on here where we where we

136
00:05:13,579 --> 00:05:17,300
transfer these out we're currently just

137
00:05:15,620 --> 00:05:19,160
getting them from our actual solution if

138
00:05:17,300 --> 00:05:21,680
I was to turn that off and just get them

139
00:05:19,160 --> 00:05:24,380
from some tests fears that we know the

140
00:05:21,680 --> 00:05:27,348
exact answer what hopefully you can see

141
00:05:24,379 --> 00:05:29,750
here is in our in our running app

142
00:05:27,348 --> 00:05:31,459
assuming this passed the works what you

143
00:05:29,750 --> 00:05:34,098
can see here is here's the light field

144
00:05:31,459 --> 00:05:37,459
interpolation and as you can see it's

145
00:05:34,098 --> 00:05:39,620
really remarkably good and you might be

146
00:05:37,459 --> 00:05:41,029
wondering what I mean by remarkably good

147
00:05:39,620 --> 00:05:43,189
but if you look at like what you're

148
00:05:41,029 --> 00:05:45,709
seeing here in terms of like the edge on

149
00:05:43,189 --> 00:05:47,959
the sphere and stuff like that if I you

150
00:05:45,709 --> 00:05:51,348
were to look at this and say well okay

151
00:05:47,959 --> 00:05:52,698
so what's the big deal like you know it

152
00:05:51,348 --> 00:05:55,550
just looks like you're at our place and

153
00:05:52,699 --> 00:05:57,800
lighting what you have to remember is

154
00:05:55,550 --> 00:06:00,348
this is actually reconstructing the

155
00:05:57,800 --> 00:06:05,300
lighting per pixel with nothing more

156
00:06:00,348 --> 00:06:06,918
than a 32 by 32 by 32 voxel and this is

157
00:06:05,300 --> 00:06:10,280
the level of detail we're getting I mean

158
00:06:06,918 --> 00:06:12,019
look at that edge there right it looks

159
00:06:10,279 --> 00:06:13,879
like you're actually computing the

160
00:06:12,019 --> 00:06:17,359
lighting per pixel using the actual

161
00:06:13,879 --> 00:06:20,689
lights and in fact it has no such data

162
00:06:17,360 --> 00:06:22,879
right and just to underscore you know

163
00:06:20,689 --> 00:06:26,300
how good that is because it's relevant

164
00:06:22,879 --> 00:06:30,408
to today's work if I was to go into the

165
00:06:26,300 --> 00:06:32,629
OpenGL code here and turn you know go to

166
00:06:30,408 --> 00:06:35,089
the Z bias or daghestan fuzzy bias

167
00:06:32,629 --> 00:06:39,050
program but when we actually create the

168
00:06:35,089 --> 00:06:40,879
texture instead of using sort of linear

169
00:06:39,050 --> 00:06:41,600
interpolation if I actually switch it

170
00:06:40,879 --> 00:06:44,050
back to

171
00:06:41,600 --> 00:06:47,600
nearest interpolations so you can see

172
00:06:44,050 --> 00:06:49,189
for example here in our lighting this is

173
00:06:47,600 --> 00:06:53,810
where we're studying these up you can

174
00:06:49,189 --> 00:06:55,370
see the light is set to linear here if I

175
00:06:53,810 --> 00:06:56,689
set this to nearest so you could just

176
00:06:55,370 --> 00:07:00,949
see what it looks like without

177
00:06:56,689 --> 00:07:02,540
reconstruction it's pre ridiculous what

178
00:07:00,949 --> 00:07:05,209
it looks like when you don't reconstruct

179
00:07:02,540 --> 00:07:06,590
these fields just to look at what kind

180
00:07:05,209 --> 00:07:09,620
of data we're feeding into the lighting

181
00:07:06,589 --> 00:07:10,879
solutions so if I turn off the linear

182
00:07:09,620 --> 00:07:14,120
interpolation so you can see it looks

183
00:07:10,879 --> 00:07:18,620
like without reconstruction here is the

184
00:07:14,120 --> 00:07:20,689
actual data that's going in there right

185
00:07:18,620 --> 00:07:24,050
that's what it actually has to work with

186
00:07:20,689 --> 00:07:26,029
right and so look at that I mean that's

187
00:07:24,050 --> 00:07:28,370
the resolution that we're storing the

188
00:07:26,029 --> 00:07:30,769
lighting at and yet with the

189
00:07:28,370 --> 00:07:34,610
reconstruction function that we chose to

190
00:07:30,769 --> 00:07:38,149
use we were getting we get a perfect

191
00:07:34,610 --> 00:07:39,920
edge right and so that's why I say that

192
00:07:38,149 --> 00:07:42,469
that's kind of like a compelling

193
00:07:39,920 --> 00:07:44,240
argument for using this kind of a light

194
00:07:42,470 --> 00:07:47,450
field to reconstruct the lighting to the

195
00:07:44,240 --> 00:07:49,490
extent that we can even though it's kind

196
00:07:47,449 --> 00:07:51,860
of an ill-defined problem because I'm

197
00:07:49,490 --> 00:07:53,800
just guessing and I don't know but much

198
00:07:51,860 --> 00:07:56,060
like I was guessing in the first place

199
00:07:53,800 --> 00:07:58,189
I'm just guessing that if we're getting

200
00:07:56,060 --> 00:08:00,829
solutions that are this good from this

201
00:07:58,189 --> 00:08:04,069
reconstruction if there's any way at all

202
00:08:00,829 --> 00:08:07,579
we can produce this light field from the

203
00:08:04,069 --> 00:08:08,959
full transport solution oh my god that

204
00:08:07,579 --> 00:08:10,909
lighting would look so good

205
00:08:08,959 --> 00:08:13,849
and yet it's incredibly cheap to produce

206
00:08:10,910 --> 00:08:18,260
because we're only producing 32 by 32 by

207
00:08:13,850 --> 00:08:22,400
32 samples in total nowhere near the

208
00:08:18,259 --> 00:08:24,949
kind of density of information that it

209
00:08:22,399 --> 00:08:27,859
appears like we're providing when you

210
00:08:24,949 --> 00:08:31,099
actually look at the results and so that

211
00:08:27,860 --> 00:08:34,129
to me again pretty compelling so that's

212
00:08:31,100 --> 00:08:36,409
sort of where we're at in terms of what

213
00:08:34,129 --> 00:08:39,740
we are trying to do so hopefully that

214
00:08:36,409 --> 00:08:40,909
makes some sense to everyone I'm doing a

215
00:08:39,740 --> 00:08:43,070
quick checker it seems like the internet

216
00:08:40,909 --> 00:08:47,419
still up so so far so good

217
00:08:43,070 --> 00:08:51,100
um all right so what we need to do now

218
00:08:47,419 --> 00:08:53,750
I'll go ahead back to the light transfer

219
00:08:51,100 --> 00:08:55,040
so what we need to do now is start to

220
00:08:53,750 --> 00:08:56,809
figure out how

221
00:08:55,039 --> 00:09:00,219
we're going to talk about these light

222
00:08:56,809 --> 00:09:02,629
fields and how we're going to produce

223
00:09:00,220 --> 00:09:04,940
the light field data that we're dumping

224
00:09:02,629 --> 00:09:06,740
down to the system and like I said this

225
00:09:04,940 --> 00:09:08,600
right here is just doing a light cast

226
00:09:06,740 --> 00:09:10,490
from the closest light source and if we

227
00:09:08,600 --> 00:09:12,339
go and look at how that people code

228
00:09:10,490 --> 00:09:15,198
actually works

229
00:09:12,339 --> 00:09:18,709
what you can see here is that when we're

230
00:09:15,198 --> 00:09:19,818
in and lighting computation normally

231
00:09:18,708 --> 00:09:22,189
what we'll be doing is calling this

232
00:09:19,818 --> 00:09:23,360
compute light propagation call we're not

233
00:09:22,190 --> 00:09:25,069
calling that right now because we're

234
00:09:23,360 --> 00:09:27,589
trying to do tests so what we're calling

235
00:09:25,068 --> 00:09:29,509
is this test cast from probes and what

236
00:09:27,589 --> 00:09:32,420
test cast from probes does is tech cat

237
00:09:29,509 --> 00:09:33,769
test cast from probes clears the voxel

238
00:09:32,419 --> 00:09:35,509
to begin with and again that's something

239
00:09:33,769 --> 00:09:38,089
that we actually never ever want to do

240
00:09:35,509 --> 00:09:40,129
so our you know short term goal you can

241
00:09:38,089 --> 00:09:41,600
think of it as coming up with a blending

242
00:09:40,129 --> 00:09:43,370
solution that means we don't have to

243
00:09:41,600 --> 00:09:44,990
clear our voxel anymore instead we could

244
00:09:43,370 --> 00:09:46,519
just take the results of last Lane frame

245
00:09:44,990 --> 00:09:48,500
and blend them with the results from

246
00:09:46,519 --> 00:09:52,068
this frame and get something usable so

247
00:09:48,500 --> 00:09:55,009
that's like thing one thing too is we

248
00:09:52,068 --> 00:09:56,870
call get leaf lightly for P and what

249
00:09:55,009 --> 00:09:58,190
that is is it does a spatial query into

250
00:09:56,870 --> 00:09:59,539
a spatial hierarchy that we built

251
00:09:58,190 --> 00:10:01,940
specifically for storing light sources

252
00:09:59,539 --> 00:10:05,838
and that just tells you what are the

253
00:10:01,940 --> 00:10:07,880
closest light sources to you right and

254
00:10:05,839 --> 00:10:09,620
the reason that we need this is because

255
00:10:07,879 --> 00:10:11,750
we're gonna be doing some biasing of our

256
00:10:09,620 --> 00:10:13,190
sampling towards light sources this is

257
00:10:11,750 --> 00:10:15,708
not that important right now but we just

258
00:10:13,190 --> 00:10:17,209
wanted to test it because we're not

259
00:10:15,708 --> 00:10:19,219
trying to really attack that part of the

260
00:10:17,208 --> 00:10:21,169
sampling problem yet so that's kind of a

261
00:10:19,220 --> 00:10:23,060
little bit for later but as you can see

262
00:10:21,169 --> 00:10:25,610
like this right here is a pretty

263
00:10:23,059 --> 00:10:27,859
important thing for us to use kind of

264
00:10:25,610 --> 00:10:29,389
like going forward and what we may want

265
00:10:27,860 --> 00:10:31,759
to do right now to make our testing a

266
00:10:29,389 --> 00:10:34,490
little simpler you can see here that we

267
00:10:31,759 --> 00:10:36,078
get the light for every place that we go

268
00:10:34,490 --> 00:10:38,419
to cast we get the light source that's

269
00:10:36,078 --> 00:10:39,979
closest to that thing and that is

270
00:10:38,419 --> 00:10:41,899
probably something we don't want to be

271
00:10:39,980 --> 00:10:43,430
doing right now we probably want to be

272
00:10:41,899 --> 00:10:45,528
doing something more like this where

273
00:10:43,429 --> 00:10:48,948
we're just gonna use just that one light

274
00:10:45,528 --> 00:10:50,028
source that the player is hot the one

275
00:10:48,948 --> 00:10:52,458
that where the player is hopping around

276
00:10:50,028 --> 00:10:53,659
and it's above their head we just want

277
00:10:52,458 --> 00:10:55,758
to use just that one light source

278
00:10:53,659 --> 00:10:57,620
probably and that way we could debug a

279
00:10:55,759 --> 00:10:59,269
little bit easier so here you can see me

280
00:10:57,620 --> 00:11:01,578
hopping around with that debug light

281
00:10:59,269 --> 00:11:03,289
source you can see me hopping around the

282
00:11:01,578 --> 00:11:05,419
world and you can also see that the ray

283
00:11:03,289 --> 00:11:06,559
caster when you put it into this mode

284
00:11:05,419 --> 00:11:08,208
where there's only a single light source

285
00:11:06,559 --> 00:11:08,818
and you can just see the results just

286
00:11:08,208 --> 00:11:10,918
from that light

287
00:11:08,818 --> 00:11:13,409
source you can see that our ray caster

288
00:11:10,918 --> 00:11:15,298
is doing a pretty good job as well with

289
00:11:13,409 --> 00:11:16,769
the data like as I hop here you can sort

290
00:11:15,298 --> 00:11:20,188
of see it goes out into that room and so

291
00:11:16,769 --> 00:11:22,019
on now again our storage and our casting

292
00:11:20,188 --> 00:11:24,478
is very sparse and that's why you get

293
00:11:22,019 --> 00:11:27,739
very blocky results as you can see it

294
00:11:24,479 --> 00:11:31,799
kind of it's on that grid there right

295
00:11:27,739 --> 00:11:33,600
and so that's why like at the moment you

296
00:11:31,798 --> 00:11:36,149
know this is not a particularly

297
00:11:33,600 --> 00:11:38,759
effective way of dealing with this light

298
00:11:36,149 --> 00:11:40,798
field it has a number of problems one of

299
00:11:38,759 --> 00:11:42,959
which is that we're just kind of writing

300
00:11:40,798 --> 00:11:44,578
an off value in there so we don't have

301
00:11:42,958 --> 00:11:46,168
the full interpolation that we need so

302
00:11:44,578 --> 00:11:48,118
we need negative light values in there

303
00:11:46,168 --> 00:11:50,698
and that's something that we have to

304
00:11:48,119 --> 00:11:52,109
work on so that would make like areas

305
00:11:50,698 --> 00:11:55,168
like this look a little bit better even

306
00:11:52,109 --> 00:11:57,418
just in a single ray case but the other

307
00:11:55,168 --> 00:11:59,188
part of it that's obviously a problem is

308
00:11:57,418 --> 00:12:02,278
that fact that all we're doing is a

309
00:11:59,188 --> 00:12:04,618
single binary like shadow on/off and of

310
00:12:02,278 --> 00:12:06,359
course that will always even if we make

311
00:12:04,619 --> 00:12:09,298
this look relatively clean and

312
00:12:06,359 --> 00:12:10,739
relatively smooth in there it'll still

313
00:12:09,298 --> 00:12:13,558
always have what I would call that

314
00:12:10,739 --> 00:12:15,298
flashlight look it still looks like the

315
00:12:13,558 --> 00:12:16,649
hero is just kind of emanating a light

316
00:12:15,298 --> 00:12:19,408
source out from them

317
00:12:16,649 --> 00:12:21,479
there's no bounce right normally if we

318
00:12:19,408 --> 00:12:24,538
shone a light in here this would get

319
00:12:21,479 --> 00:12:26,369
some light right and if we don't have

320
00:12:24,538 --> 00:12:28,558
those secondary bounces then they'll you

321
00:12:26,369 --> 00:12:30,479
won't ever really see any light in there

322
00:12:28,558 --> 00:12:34,288
right and that is not particularly

323
00:12:30,479 --> 00:12:36,239
useful because we want that richness so

324
00:12:34,288 --> 00:12:39,088
in order to get those secondary light

325
00:12:36,239 --> 00:12:42,179
bounces again we have the technology in

326
00:12:39,089 --> 00:12:45,029
there to compute them we can call the

327
00:12:42,178 --> 00:12:47,759
light propagation function and start to

328
00:12:45,028 --> 00:12:51,389
transfer light around actually quite a

329
00:12:47,759 --> 00:12:53,068
bit but before we can actually start

330
00:12:51,389 --> 00:12:54,658
taking advantage that code path and

331
00:12:53,068 --> 00:12:55,978
there's one thing we have to write in

332
00:12:54,658 --> 00:12:57,568
there which is the voxel sampler for

333
00:12:55,979 --> 00:12:59,579
that code path but before we can start

334
00:12:57,568 --> 00:13:01,259
taking advantage of that code path we're

335
00:12:59,578 --> 00:13:03,748
going to need some way of actually

336
00:13:01,259 --> 00:13:06,749
blending light samples together because

337
00:13:03,749 --> 00:13:09,058
in order to use the secondary bounces we

338
00:13:06,749 --> 00:13:12,259
have to be able to sum some of these

339
00:13:09,058 --> 00:13:14,368
this light information together right

340
00:13:12,259 --> 00:13:16,589
okay so that's kind of where we're at

341
00:13:14,369 --> 00:13:19,408
and as you can see even in this mode

342
00:13:16,589 --> 00:13:22,480
right now if I was to pull back and move

343
00:13:19,408 --> 00:13:24,309
a little bit forward you can see exactly

344
00:13:22,480 --> 00:13:26,709
where we're getting good interpolation

345
00:13:24,309 --> 00:13:27,759
look kind of right here and then places

346
00:13:26,708 --> 00:13:29,018
like this where we're not getting

347
00:13:27,759 --> 00:13:30,789
particularly good interpolation that's

348
00:13:29,019 --> 00:13:33,250
because around here it's not really

349
00:13:30,789 --> 00:13:34,838
saying much about what has to happen we

350
00:13:33,250 --> 00:13:36,070
don't really get negative light values

351
00:13:34,839 --> 00:13:38,470
in there so we just get this kind of

352
00:13:36,070 --> 00:13:40,329
wobbly like bad interpolation pattern

353
00:13:38,470 --> 00:13:44,019
you'll notice this is not a stair step

354
00:13:40,328 --> 00:13:45,819
and this is again that's just because in

355
00:13:44,019 --> 00:13:48,039
here we're just getting zeros rather

356
00:13:45,820 --> 00:13:50,500
than negative light values which is kind

357
00:13:48,039 --> 00:13:53,139
of what we need to have happen there and

358
00:13:50,500 --> 00:13:54,909
so we need probably some way of filling

359
00:13:53,139 --> 00:13:56,289
in that kind of information about the

360
00:13:54,909 --> 00:13:58,838
light sampling so that's going to be a

361
00:13:56,289 --> 00:14:00,789
challenge as well and so when we look

362
00:13:58,839 --> 00:14:02,529
around in here we see that problem

363
00:14:00,789 --> 00:14:04,958
immediately and then their problem we

364
00:14:02,528 --> 00:14:07,149
knew is that blending now for blending

365
00:14:04,958 --> 00:14:08,739
we can also imagine testing that because

366
00:14:07,149 --> 00:14:10,958
what I can do is start to introduce some

367
00:14:08,740 --> 00:14:12,789
lighting lag effectively this is

368
00:14:10,958 --> 00:14:14,739
updating the lighting every frame and

369
00:14:12,789 --> 00:14:16,480
what I might like to do is a first step

370
00:14:14,740 --> 00:14:17,889
just to sort of get ourselves warmed up

371
00:14:16,480 --> 00:14:20,500
and try to start working with these

372
00:14:17,889 --> 00:14:22,419
light deals that we kind of just sort of

373
00:14:20,500 --> 00:14:23,919
randomly invented and don't really know

374
00:14:22,419 --> 00:14:28,389
what they do because we don't have a lot

375
00:14:23,919 --> 00:14:30,370
of information about them yet what we

376
00:14:28,389 --> 00:14:32,049
want to do here is maybe introduce a

377
00:14:30,370 --> 00:14:33,940
little bit of light lag just to see if

378
00:14:32,049 --> 00:14:37,000
we can get cross flame blending working

379
00:14:33,940 --> 00:14:40,600
so what I might try to do is when we

380
00:14:37,000 --> 00:14:42,659
sort of hop through here right what I'd

381
00:14:40,600 --> 00:14:45,550
like to do is get it so that that that

382
00:14:42,659 --> 00:14:48,578
there's just a delay it sort of slowly

383
00:14:45,549 --> 00:14:51,099
fades from one to the other not because

384
00:14:48,578 --> 00:14:53,198
there's any reason to want that slow

385
00:14:51,100 --> 00:14:54,639
fade right now but more because I know

386
00:14:53,198 --> 00:14:56,559
that I need to be able to blend these

387
00:14:54,639 --> 00:14:58,089
things across frames in order to get

388
00:14:56,559 --> 00:15:00,399
enough samples once we start to do the

389
00:14:58,089 --> 00:15:02,949
more heavily sampled version so that's

390
00:15:00,399 --> 00:15:04,179
why I like to start doing today just by

391
00:15:02,948 --> 00:15:05,588
the end of the day if we're lucky maybe

392
00:15:04,179 --> 00:15:08,198
we can get to the point where we get a

393
00:15:05,589 --> 00:15:11,550
nice delay in there and all that is is

394
00:15:08,198 --> 00:15:16,469
proving that we have a way of coherently

395
00:15:11,549 --> 00:15:20,588
storing light over time as we sort of

396
00:15:16,470 --> 00:15:24,069
drive the the simulation over a series

397
00:15:20,589 --> 00:15:27,190
of frames all right so we need two

398
00:15:24,068 --> 00:15:29,979
things first of all we need to stop

399
00:15:27,190 --> 00:15:32,380
clearing our voxel right this is not

400
00:15:29,980 --> 00:15:33,850
going to be helpful and so we're going

401
00:15:32,379 --> 00:15:35,600
to need to we might want to do something

402
00:15:33,850 --> 00:15:37,579
in there we might want to do

403
00:15:35,600 --> 00:15:39,319
some kind of reduction because we're

404
00:15:37,578 --> 00:15:42,318
like adding things into the box loves a

405
00:15:39,318 --> 00:15:43,969
blend we may not want to forego this

406
00:15:42,318 --> 00:15:45,620
loop entirely but this may want to be

407
00:15:43,970 --> 00:15:47,750
like a multiplier or something where we

408
00:15:45,620 --> 00:15:51,379
reduce the values that are in there by

409
00:15:47,750 --> 00:15:53,269
some amount right but if I stop clearing

410
00:15:51,379 --> 00:15:56,208
it then what you'll see is as I move

411
00:15:53,269 --> 00:16:00,409
around the light that I add just kind of

412
00:15:56,208 --> 00:16:03,379
stays where I'm putting it right so if I

413
00:16:00,409 --> 00:16:04,730
leave an area it will still have that

414
00:16:03,379 --> 00:16:07,549
light right you can see that there's

415
00:16:04,730 --> 00:16:11,778
still all this light in here so for

416
00:16:07,549 --> 00:16:14,958
example if I go in here right I've added

417
00:16:11,778 --> 00:16:18,049
light to this area as I hop here that

418
00:16:14,958 --> 00:16:20,299
area is now in shadow so it doesn't get

419
00:16:18,049 --> 00:16:22,068
updated any more right and it doesn't

420
00:16:20,299 --> 00:16:23,958
get updated until I hop out and the

421
00:16:22,068 --> 00:16:27,019
voxel gets reset because it moves

422
00:16:23,958 --> 00:16:29,000
somewhere right and so everywhere that I

423
00:16:27,019 --> 00:16:29,629
touch where the light actually hits

424
00:16:29,000 --> 00:16:32,028
something

425
00:16:29,629 --> 00:16:33,980
I am updating but then any place where

426
00:16:32,028 --> 00:16:35,659
it doesn't hit I'm not updating and

427
00:16:33,980 --> 00:16:40,370
that's what you end up seeing there

428
00:16:35,659 --> 00:16:41,990
right okay so now what we want to do is

429
00:16:40,370 --> 00:16:43,850
start blending these over time using

430
00:16:41,990 --> 00:16:46,909
some kind of a ratio I don't know what

431
00:16:43,850 --> 00:16:48,139
exactly we want that ratio to be but if

432
00:16:46,909 --> 00:16:50,230
you remember quickly we were already

433
00:16:48,139 --> 00:16:52,938
doing something sort of like this before

434
00:16:50,230 --> 00:16:55,750
you can see here we had some stuff like

435
00:16:52,938 --> 00:16:57,948
from linear blend coefficient we derive

436
00:16:55,750 --> 00:16:59,448
some stuff here right we've got a

437
00:16:57,948 --> 00:17:01,188
comment about this I don't we

438
00:16:59,448 --> 00:17:02,870
essentially say it's like all right look

439
00:17:01,188 --> 00:17:05,750
the irradiance preservation is going to

440
00:17:02,870 --> 00:17:07,788
be 59 sixtieths right why because we

441
00:17:05,750 --> 00:17:10,308
want to take 60 frames to really like

442
00:17:07,788 --> 00:17:12,169
change the legs significantly that's one

443
00:17:10,308 --> 00:17:15,019
second of game time so we want kind of a

444
00:17:12,169 --> 00:17:17,419
one-second laggy light source behavior

445
00:17:15,019 --> 00:17:18,859
effectively and you know we might change

446
00:17:17,419 --> 00:17:20,120
that something else over time just based

447
00:17:18,859 --> 00:17:22,279
on what we're doing we don't know

448
00:17:20,119 --> 00:17:24,619
anyway we come up with two values one is

449
00:17:22,279 --> 00:17:28,009
herb blend you one is herb blend V ER

450
00:17:24,619 --> 00:17:32,119
blend U is just whatever the value is

451
00:17:28,009 --> 00:17:34,669
effectively that we're going to take the

452
00:17:32,119 --> 00:17:36,609
existing voxel values that's we're going

453
00:17:34,669 --> 00:17:40,280
to preserve the existing voxel values F

454
00:17:36,609 --> 00:17:43,279
and then herb blend V is sort of the new

455
00:17:40,279 --> 00:17:46,940
blend right that's that's what we are

456
00:17:43,279 --> 00:17:48,819
adding in so we're going to add in 160th

457
00:17:46,940 --> 00:17:51,759
effectively right and

458
00:17:48,819 --> 00:17:53,950
keep 59 60th and again this is just an

459
00:17:51,759 --> 00:17:55,899
arbitrary thing you know we could have

460
00:17:53,950 --> 00:17:58,330
made this 30 over 60 you know who knows

461
00:17:55,898 --> 00:18:01,329
we're gonna tune it however we want I

462
00:17:58,329 --> 00:18:03,250
don't know why we've got T updated here

463
00:18:01,329 --> 00:18:07,298
I'm not sure if that's even use anymore

464
00:18:03,250 --> 00:18:09,940
that's probably old news yeah this is

465
00:18:07,298 --> 00:18:11,470
just garbage at the moment that was used

466
00:18:09,940 --> 00:18:15,759
in kind of an old code press so I might

467
00:18:11,470 --> 00:18:18,419
place it down back in where that that T

468
00:18:15,759 --> 00:18:21,509
where the remember that code actually

469
00:18:18,419 --> 00:18:25,570
gets called in here yeah

470
00:18:21,509 --> 00:18:27,159
there so we know we computed those

471
00:18:25,569 --> 00:18:29,019
values and we're gonna use those values

472
00:18:27,159 --> 00:18:33,629
to tune the blending but for right now

473
00:18:29,019 --> 00:18:36,370
we need to do is actually have those

474
00:18:33,628 --> 00:18:38,259
sort of start to control what the

475
00:18:36,369 --> 00:18:42,418
Lighting's going to be so let's suppose

476
00:18:38,259 --> 00:18:45,278
that we just did a very simple sort of a

477
00:18:42,419 --> 00:18:47,950
very simple sort of use of those just to

478
00:18:45,278 --> 00:18:49,599
get ourselves warmed up like I said what

479
00:18:47,950 --> 00:18:51,190
I want to do is say curious that or

480
00:18:49,599 --> 00:18:53,798
blend hue and here is the herb blend V I

481
00:18:51,190 --> 00:18:56,288
want those to be available in general

482
00:18:53,798 --> 00:18:58,298
across my functions so maybe what I'll

483
00:18:56,288 --> 00:19:00,158
do is I'll just put those into the

484
00:18:58,298 --> 00:19:03,278
lighting solution itself so if I go in

485
00:19:00,159 --> 00:19:04,659
here to the lighting solution code you

486
00:19:03,278 --> 00:19:06,700
know we'll just say look there's going

487
00:19:04,659 --> 00:19:09,220
to be these sort of accumulation values

488
00:19:06,700 --> 00:19:11,740
this is where they live

489
00:19:09,220 --> 00:19:13,690
and then inside the solution here when

490
00:19:11,740 --> 00:19:16,419
we're actually looking at those values

491
00:19:13,690 --> 00:19:19,389
we set them up like this and now

492
00:19:16,419 --> 00:19:22,570
everyone can access them such as people

493
00:19:19,388 --> 00:19:25,028
in test cast four probes so then in test

494
00:19:22,569 --> 00:19:27,428
guys from probes like it here I could do

495
00:19:25,028 --> 00:19:29,200
something where I keep some amount of

496
00:19:27,429 --> 00:19:31,750
the value that's in these cells of the

497
00:19:29,200 --> 00:19:33,940
voxel for example by just saying look

498
00:19:31,750 --> 00:19:36,278
whatever the color is of the light at

499
00:19:33,940 --> 00:19:39,129
that point I would like it to decay a

500
00:19:36,278 --> 00:19:44,019
certain amount the certain amount of

501
00:19:39,128 --> 00:19:48,759
decay is going to be that ear blend you

502
00:19:44,019 --> 00:19:52,269
right and then down here where I'm

503
00:19:48,759 --> 00:19:54,940
actually putting the the casting values

504
00:19:52,269 --> 00:19:57,308
in so when I actually when I actually

505
00:19:54,940 --> 00:19:59,558
spam the voxel you can see that the

506
00:19:57,308 --> 00:20:02,319
voxels Pham call right here

507
00:19:59,558 --> 00:20:02,769
when we are in that spam voxel slice

508
00:20:02,319 --> 00:20:04,299
call

509
00:20:02,769 --> 00:20:06,519
what I could do is say all right well

510
00:20:04,299 --> 00:20:08,769
when we actually place these values in

511
00:20:06,519 --> 00:20:10,329
here instead of just placing the value

512
00:20:08,769 --> 00:20:13,240
directly and I'm just gonna use a

513
00:20:10,329 --> 00:20:16,720
summation instead so I'm going to use an

514
00:20:13,240 --> 00:20:21,519
herb blend V for that and then that way

515
00:20:16,720 --> 00:20:24,670
we get sort of a new value for for the

516
00:20:21,519 --> 00:20:26,470
that color and I'm going to do that with

517
00:20:24,670 --> 00:20:28,750
a normal as well and this is just

518
00:20:26,470 --> 00:20:31,420
complete garbage what I'm doing here ok

519
00:20:28,750 --> 00:20:32,859
so just want to make that clear and

520
00:20:31,420 --> 00:20:34,720
we're gonna see a couple ways that it's

521
00:20:32,859 --> 00:20:37,359
garbage right off the bat but it's very

522
00:20:34,720 --> 00:20:42,000
very garbage and you'll sort of see why

523
00:20:37,359 --> 00:20:45,849
as we as we go I'll try to cover all the

524
00:20:42,000 --> 00:20:48,369
the reasons why as we sort of encounter

525
00:20:45,849 --> 00:20:50,589
them but I'm gonna do it from both here

526
00:20:48,369 --> 00:20:52,689
so we're gonna do both of these are

527
00:20:50,589 --> 00:20:54,939
going to get multiplied by the ER blend

528
00:20:52,690 --> 00:20:56,259
hue value which will reduce them and

529
00:20:54,940 --> 00:20:59,890
then they're gonna get summed in their

530
00:20:56,259 --> 00:21:02,440
right soaps here we need the letting

531
00:20:59,890 --> 00:21:04,509
solution and so that's all I wanted you

532
00:21:02,440 --> 00:21:06,670
to start and that's just a simple sort

533
00:21:04,509 --> 00:21:10,089
of like lagging effect that we're gonna

534
00:21:06,670 --> 00:21:12,670
put on there trying to see here if

535
00:21:10,089 --> 00:21:14,799
there's any other thing I don't think so

536
00:21:12,670 --> 00:21:18,279
that I need to worry about so I think

537
00:21:14,799 --> 00:21:21,269
that should be fine but there's one more

538
00:21:18,279 --> 00:21:21,269
there it is oops

539
00:21:21,359 --> 00:21:34,199
what I do there there we go

540
00:21:30,329 --> 00:21:34,199
sometimes theater gets a lot of

541
00:21:39,190 --> 00:21:45,110
all right so what's basically going on

542
00:21:42,980 --> 00:21:47,329
in here as you can see is we've

543
00:21:45,109 --> 00:21:49,609
introduced some light lag but also what

544
00:21:47,329 --> 00:21:51,980
we're getting is it looks like we're

545
00:21:49,609 --> 00:21:54,439
over brightening this and I suspect the

546
00:21:51,980 --> 00:21:55,970
reason for that well actually I guess

547
00:21:54,440 --> 00:21:57,470
I'm not sure exactly why we're over

548
00:21:55,970 --> 00:22:02,149
brightening so we should go take a look

549
00:21:57,470 --> 00:22:03,500
at why that is I probably messed up some

550
00:22:02,148 --> 00:22:05,329
term somewhere but you can see that the

551
00:22:03,500 --> 00:22:07,308
lag that I introduced is in fact there

552
00:22:05,329 --> 00:22:09,439
but it looks like we're adding more

553
00:22:07,308 --> 00:22:12,048
often than we should be oh you know why

554
00:22:09,440 --> 00:22:13,850
I dunno why and this is exactly the

555
00:22:12,048 --> 00:22:16,450
thing that I was gonna say why the first

556
00:22:13,849 --> 00:22:18,859
reason why this is garbage sober okay um

557
00:22:16,450 --> 00:22:21,259
so what's happening here of course is

558
00:22:18,859 --> 00:22:23,839
that when we do spam voxels slice it's

559
00:22:21,259 --> 00:22:26,000
actually writing to an area that's nine

560
00:22:23,839 --> 00:22:28,069
voxels around whatever the target is

561
00:22:26,000 --> 00:22:30,440
what that means is that a lot of our

562
00:22:28,069 --> 00:22:32,450
rights are gonna overlap and when those

563
00:22:30,440 --> 00:22:34,460
values overlap they're going to sum to

564
00:22:32,450 --> 00:22:35,480
greater than the total amount of light

565
00:22:34,460 --> 00:22:37,759
that should have been introduced in that

566
00:22:35,480 --> 00:22:39,440
area now that's totally fine when we

567
00:22:37,759 --> 00:22:40,819
just have an equal sign because we're

568
00:22:39,440 --> 00:22:42,500
just gonna overwrite whatever the old

569
00:22:40,819 --> 00:22:44,119
light value is where the new light value

570
00:22:42,500 --> 00:22:45,740
is so the fact did multiple people

571
00:22:44,119 --> 00:22:48,048
trying to compete in that area doesn't

572
00:22:45,740 --> 00:22:49,370
really affect you but as we're trying to

573
00:22:48,048 --> 00:22:51,230
move forward to get more accurate more

574
00:22:49,369 --> 00:22:52,939
interesting lighting we don't want that

575
00:22:51,230 --> 00:22:55,009
we want to be able to sort of blend

576
00:22:52,940 --> 00:22:56,509
light things together and we need to be

577
00:22:55,009 --> 00:22:57,980
able to take lots of different light

578
00:22:56,509 --> 00:22:59,629
information and blend it together in a

579
00:22:57,980 --> 00:23:01,308
way that doesn't produce over brightman

580
00:22:59,630 --> 00:23:04,490
so we can't just add everything together

581
00:23:01,308 --> 00:23:06,259
right that's not going to cut it so what

582
00:23:04,490 --> 00:23:08,870
we want to be able to do going forwards

583
00:23:06,259 --> 00:23:11,869
right is we would like to be able to

584
00:23:08,869 --> 00:23:14,239
sort of have our voxel information that

585
00:23:11,869 --> 00:23:16,069
we're going to do for this frame and

586
00:23:14,240 --> 00:23:18,649
then we're going to want to have the

587
00:23:16,069 --> 00:23:20,178
voxel stuff that we have from last frame

588
00:23:18,648 --> 00:23:23,808
and we want to be able to sum these two

589
00:23:20,179 --> 00:23:26,210
together in some way that will normalize

590
00:23:23,808 --> 00:23:27,888
them correctly so at the end we'll end

591
00:23:26,210 --> 00:23:30,519
up with a summation that actually works

592
00:23:27,888 --> 00:23:32,719
right that actually sums to the correct

593
00:23:30,519 --> 00:23:33,710
sort of amount of contribution from the

594
00:23:32,720 --> 00:23:36,230
last frame in amount accomplished is

595
00:23:33,710 --> 00:23:38,750
this frame no matter how many incoming

596
00:23:36,230 --> 00:23:39,919
samples we actually have at this

597
00:23:38,750 --> 00:23:42,740
location the voxel

598
00:23:39,919 --> 00:23:44,559
we don't want to care about that we want

599
00:23:42,740 --> 00:23:48,470
to be able to produce the result

600
00:23:44,558 --> 00:23:49,940
regardless right so what that means is

601
00:23:48,470 --> 00:23:52,308
we're going to need some kind

602
00:23:49,940 --> 00:23:54,649
a summation waiting value in here right

603
00:23:52,308 --> 00:23:57,259
we're gonna need some way of saying look

604
00:23:54,648 --> 00:23:59,479
this is how much total light got added

605
00:23:57,259 --> 00:24:01,220
and we need to renormalize how many

606
00:23:59,480 --> 00:24:02,899
total samples got added and we need to

607
00:24:01,220 --> 00:24:06,200
renormalize based on that number of

608
00:24:02,898 --> 00:24:07,788
samples to get us back to good now when

609
00:24:06,200 --> 00:24:09,528
we look at what we've got here you can

610
00:24:07,788 --> 00:24:13,158
see that we're keeping our large voxel

611
00:24:09,528 --> 00:24:14,690
dim in here probably there's not going

612
00:24:13,159 --> 00:24:18,610
to be a lot of ways to do this in place

613
00:24:14,690 --> 00:24:18,610
we're probably going to need to have

614
00:24:19,269 --> 00:24:23,839
sort of a buffer of the last frames

615
00:24:21,769 --> 00:24:25,990
values and then a scratch buffer where

616
00:24:23,839 --> 00:24:27,980
we're computing dis frames values right

617
00:24:25,990 --> 00:24:29,899
so what we're probably going to need is

618
00:24:27,980 --> 00:24:33,079
something like this where we have like

619
00:24:29,898 --> 00:24:35,839
cells and new cells right something like

620
00:24:33,079 --> 00:24:37,220
that and the reason for that again is

621
00:24:35,839 --> 00:24:38,869
because it might not be possible for us

622
00:24:37,220 --> 00:24:42,860
to really record the information in any

623
00:24:38,869 --> 00:24:45,528
other real way right and similarly when

624
00:24:42,859 --> 00:24:48,109
we do light voxels cell here as far as

625
00:24:45,528 --> 00:24:49,398
new cells is concerned like this this is

626
00:24:48,109 --> 00:24:51,439
probably not what we want to store

627
00:24:49,398 --> 00:24:53,689
probably what we need to store is like a

628
00:24:51,440 --> 00:24:56,269
light computation cell something like

629
00:24:53,690 --> 00:24:59,058
this and what that's going to have to do

630
00:24:56,269 --> 00:25:00,288
is record something else so for example

631
00:24:59,058 --> 00:25:02,869
it will probably need a total weight

632
00:25:00,288 --> 00:25:06,490
you've seen me do this before and then

633
00:25:02,869 --> 00:25:13,609
like a light si accumulator

634
00:25:06,490 --> 00:25:16,009
and a light and accumulator and again

635
00:25:13,609 --> 00:25:17,569
these are probably not sufficient we're

636
00:25:16,009 --> 00:25:20,298
probably going to need more than just

637
00:25:17,569 --> 00:25:22,638
that information to record the light

638
00:25:20,298 --> 00:25:24,648
arak accurately in this area so you're

639
00:25:22,638 --> 00:25:26,808
gonna see me expand that a little bit

640
00:25:24,648 --> 00:25:29,000
but the point is it needs this value as

641
00:25:26,808 --> 00:25:30,500
well so this stuff that happens in the

642
00:25:29,000 --> 00:25:31,788
box is cell by itself is probably not

643
00:25:30,500 --> 00:25:33,980
sufficient and we probably want a

644
00:25:31,788 --> 00:25:35,089
special type of storage just for our

645
00:25:33,980 --> 00:25:37,730
scratch computation

646
00:25:35,089 --> 00:25:39,048
something like this right so when we do

647
00:25:37,730 --> 00:25:40,278
our light computation we're probably

648
00:25:39,048 --> 00:25:42,710
going to want to have something like

649
00:25:40,278 --> 00:25:44,298
that and we don't really know but maybe

650
00:25:42,710 --> 00:25:47,298
we're gonna need something just more

651
00:25:44,298 --> 00:25:49,190
expansive over time in general right now

652
00:25:47,298 --> 00:25:50,298
if I look at where light box the cell is

653
00:25:49,190 --> 00:25:52,490
actually used

654
00:25:50,298 --> 00:25:55,690
we may get some insight as well let me

655
00:25:52,490 --> 00:25:58,548
just go ahead and see here voxels so

656
00:25:55,690 --> 00:26:00,649
yeah so what you can see here is because

657
00:25:58,548 --> 00:26:02,538
this is really only used in our set up

658
00:26:00,648 --> 00:26:03,769
what we could also choose to do if we'd

659
00:26:02,538 --> 00:26:06,289
like to is just

660
00:26:03,769 --> 00:26:09,769
loyalties in line right so we could have

661
00:26:06,289 --> 00:26:13,190
a total weight in here and it lights the

662
00:26:09,769 --> 00:26:15,710
accumulator and a light an accumulator

663
00:26:13,190 --> 00:26:17,990
those could actually just be welded into

664
00:26:15,710 --> 00:26:19,700
where the box of cell is stored again I

665
00:26:17,990 --> 00:26:21,589
don't know how we want to set this up

666
00:26:19,700 --> 00:26:22,670
it's premature to really think too hard

667
00:26:21,589 --> 00:26:23,329
about it so I'm just going to put them

668
00:26:22,670 --> 00:26:25,730
together like that

669
00:26:23,329 --> 00:26:28,189
and then what we're going to do is work

670
00:26:25,730 --> 00:26:31,308
with it here so rather than have this

671
00:26:28,190 --> 00:26:32,660
thing doing this sort of blend here what

672
00:26:31,308 --> 00:26:34,519
I want to do is set myself up to do the

673
00:26:32,660 --> 00:26:38,290
accurate blend and so the first I'm

674
00:26:34,519 --> 00:26:38,289
going to do is clear that total weight

675
00:26:38,740 --> 00:26:53,509
and then also the accumulators so now

676
00:26:52,160 --> 00:26:57,080
we've got something that cleared all of

677
00:26:53,509 --> 00:26:59,150
our settings and now I can accumulate

678
00:26:57,079 --> 00:26:59,779
into these and then when we get to the

679
00:26:59,150 --> 00:27:01,940
very end

680
00:26:59,779 --> 00:27:04,308
right so after we've cast everything

681
00:27:01,940 --> 00:27:07,190
then what I can do is I can go through

682
00:27:04,308 --> 00:27:10,639
and do just a nice stable interpolation

683
00:27:07,190 --> 00:27:12,350
between the two of them in here and so

684
00:27:10,640 --> 00:27:13,429
the way that would work is I would go

685
00:27:12,349 --> 00:27:15,319
ahead and find out what the total weight

686
00:27:13,429 --> 00:27:17,240
was to begin with right and get a safe

687
00:27:15,319 --> 00:27:18,889
ratio out of it so I'll get a

688
00:27:17,240 --> 00:27:21,230
normalization coefficient out of this by

689
00:27:18,890 --> 00:27:27,130
saying don't ask me why there's a zero

690
00:27:21,230 --> 00:27:29,179
there left over from the old code pack

691
00:27:27,130 --> 00:27:35,179
so in here what I want to do is take a

692
00:27:29,179 --> 00:27:36,320
safe ratio so I get the inverse of the

693
00:27:35,179 --> 00:27:37,910
total weight again that's just a

694
00:27:36,319 --> 00:27:40,189
standard one normalization you've seen

695
00:27:37,910 --> 00:27:42,350
me do this a ton of times and what do I

696
00:27:40,190 --> 00:27:44,210
do now is normalize the light see and

697
00:27:42,349 --> 00:27:46,419
light and accumulators down so that they

698
00:27:44,210 --> 00:27:48,410
are rationally normalized values

699
00:27:46,420 --> 00:27:49,759
something that's based on the total

700
00:27:48,410 --> 00:27:51,710
amount of weight that went into them

701
00:27:49,759 --> 00:27:54,410
rather than having something to do with

702
00:27:51,710 --> 00:27:55,880
just an arbitrary additive sum that we

703
00:27:54,410 --> 00:27:58,100
don't have any idea how many people put

704
00:27:55,880 --> 00:28:00,530
sums in there and we don't know you know

705
00:27:58,099 --> 00:28:01,849
how to get it back to a value that's in

706
00:28:00,529 --> 00:28:05,509
line with the actual amount of light

707
00:28:01,849 --> 00:28:12,109
that came in so what I do here is take

708
00:28:05,509 --> 00:28:13,700
the norm C and the norm the norm C for

709
00:28:12,109 --> 00:28:15,379
the light C multiplied by the lights the

710
00:28:13,700 --> 00:28:16,769
inline end and what you can see here is

711
00:28:15,380 --> 00:28:18,410
when we're right there this is

712
00:28:16,769 --> 00:28:20,670
probably not the best way to do this

713
00:28:18,410 --> 00:28:23,310
because what we probably want to do is

714
00:28:20,670 --> 00:28:24,720
do this after the fact right so since

715
00:28:23,309 --> 00:28:26,429
we're already gonna do a loop down here

716
00:28:24,720 --> 00:28:29,250
I might as well clear it right after I

717
00:28:26,430 --> 00:28:31,289
use it like that right that's a lot

718
00:28:29,250 --> 00:28:32,819
saner because what that'll do is make it

719
00:28:31,289 --> 00:28:34,109
so that while we're already touch them

720
00:28:32,819 --> 00:28:35,849
on they're hot in the cache right here

721
00:28:34,109 --> 00:28:37,919
we're about to you know we we had to

722
00:28:35,849 --> 00:28:39,599
load them in any way we can clear them

723
00:28:37,920 --> 00:28:45,450
right they're probably mostly for free

724
00:28:39,599 --> 00:28:47,669
right alright so that's all we need to

725
00:28:45,450 --> 00:28:49,980
do for this but this just gives us the

726
00:28:47,670 --> 00:28:53,850
actual light sea value right this is the

727
00:28:49,980 --> 00:28:55,559
new light see and the new like n right

728
00:28:53,849 --> 00:28:58,829
now we actually need to do the lerp

729
00:28:55,559 --> 00:29:05,339
that's actually pretty easy that just is

730
00:28:58,829 --> 00:29:09,059
the light and oops and the light C

731
00:29:05,339 --> 00:29:12,329
values in question are just going to be

732
00:29:09,059 --> 00:29:16,470
lerp of their previous selves with their

733
00:29:12,329 --> 00:29:21,179
new selves right so this value here is

734
00:29:16,470 --> 00:29:23,039
just going to be this and actually I

735
00:29:21,180 --> 00:29:31,650
guess since we have coefficients let me

736
00:29:23,039 --> 00:29:36,930
just do it that way so first we're gonna

737
00:29:31,650 --> 00:29:40,380
do is use the air blend V or blend you

738
00:29:36,930 --> 00:29:42,600
value rather that keeps you know 95

739
00:29:40,380 --> 00:29:46,560
percent of the previous solution and

740
00:29:42,599 --> 00:29:49,349
then we're gonna do is it justice here

741
00:29:46,559 --> 00:29:52,889
probably although we can sort of do it

742
00:29:49,349 --> 00:29:54,119
here instead I don't you know I don't

743
00:29:52,890 --> 00:29:54,600
know exactly how this routines gonna

744
00:29:54,119 --> 00:29:56,069
expand

745
00:29:54,599 --> 00:29:58,019
normally I could roll this right into

746
00:29:56,069 --> 00:29:59,279
this multiplied here but I'm not going

747
00:29:58,019 --> 00:30:02,250
to do that just yet because I'm not sure

748
00:29:59,279 --> 00:30:04,529
that's what I actually want to do going

749
00:30:02,250 --> 00:30:06,299
forwards right so this is what we're

750
00:30:04,529 --> 00:30:08,309
doing here so this is just another

751
00:30:06,299 --> 00:30:11,279
linear blend basically right couldn't

752
00:30:08,309 --> 00:30:14,369
let the moment that right there gives us

753
00:30:11,279 --> 00:30:16,019
what we needed however we haven't

754
00:30:14,369 --> 00:30:19,549
actually done anything with the I don't

755
00:30:16,019 --> 00:30:19,549
know why that's complaining

756
00:30:20,720 --> 00:30:25,250
what is the issue here oh that's because

757
00:30:22,970 --> 00:30:28,100
it's hot code reloaded yeah we didn't

758
00:30:25,250 --> 00:30:29,269
remap that time so anyway we'll be fine

759
00:30:28,099 --> 00:30:32,389
when we run again the only thing I need

760
00:30:29,269 --> 00:30:35,779
to do now is I need these where we're

761
00:30:32,390 --> 00:30:39,038
actually recording the information so

762
00:30:35,779 --> 00:30:41,480
where is our actual test cast here

763
00:30:39,038 --> 00:30:44,000
spam boxercise here we go

764
00:30:41,480 --> 00:30:45,829
where we actually write these in what we

765
00:30:44,000 --> 00:30:49,308
need to do now is actually write these

766
00:30:45,829 --> 00:30:51,048
in in some way that actually preserves

767
00:30:49,308 --> 00:30:54,589
sort of that weighting information that

768
00:30:51,048 --> 00:30:57,798
we needed so we're gonna sum the normal

769
00:30:54,589 --> 00:31:00,109
and the C accumulators here for use

770
00:30:57,798 --> 00:31:02,750
later and then we're gonna record the

771
00:31:00,109 --> 00:31:05,990
total weight and since we don't have any

772
00:31:02,750 --> 00:31:07,609
idea how important these samples are the

773
00:31:05,990 --> 00:31:09,950
total weights always going to be one for

774
00:31:07,609 --> 00:31:11,418
everybody right now all of the

775
00:31:09,950 --> 00:31:14,179
information is going to be like equally

776
00:31:11,419 --> 00:31:16,429
valuable basically right so now if we

777
00:31:14,179 --> 00:31:18,409
run it we should get something that

778
00:31:16,429 --> 00:31:19,970
correctly lags the light source but

779
00:31:18,409 --> 00:31:22,400
doesn't get infinitely bright over time

780
00:31:19,970 --> 00:31:24,529
in fact it should just converge back to

781
00:31:22,400 --> 00:31:26,179
what we previously had and what you

782
00:31:24,529 --> 00:31:30,139
could sort of see is that's exactly what

783
00:31:26,179 --> 00:31:32,030
it does right so you see how there's

784
00:31:30,140 --> 00:31:34,270
about a one-second lag there as it fills

785
00:31:32,029 --> 00:31:34,269
in

786
00:31:46,630 --> 00:31:52,269
so anyway that just shows that you know

787
00:31:50,019 --> 00:31:54,159
we can blend these values together over

788
00:31:52,269 --> 00:31:57,909
time and you know they're fine or

789
00:31:54,159 --> 00:32:01,630
whatever but you know as we sort of

790
00:31:57,909 --> 00:32:04,299
continue through here we sort of end up

791
00:32:01,630 --> 00:32:06,909
with the problem that well this sort of

792
00:32:04,298 --> 00:32:09,970
way of recording a light-filled really

793
00:32:06,909 --> 00:32:12,009
only records like one light field so I'm

794
00:32:09,970 --> 00:32:13,720
not really sure how this would work if

795
00:32:12,009 --> 00:32:16,480
we were recording you know multiple

796
00:32:13,720 --> 00:32:18,730
light fields right and trying to blend

797
00:32:16,480 --> 00:32:21,429
multiple light fields together however

798
00:32:18,730 --> 00:32:22,870
we can certainly try and find out right

799
00:32:21,429 --> 00:32:25,980
because one of the things that I nurse

800
00:32:22,869 --> 00:32:29,709
just now in the test cast from probes I

801
00:32:25,980 --> 00:32:34,808
know looking up a different light source

802
00:32:29,710 --> 00:32:37,569
per right but I could that restores us

803
00:32:34,808 --> 00:32:41,079
sort of querying a different light

804
00:32:37,569 --> 00:32:44,288
source per voxel cast and that looks

805
00:32:41,079 --> 00:32:47,769
like this right and what you can see

806
00:32:44,288 --> 00:32:50,950
here is well it does something right

807
00:32:47,769 --> 00:32:52,808
it's not horrible but it does sort of

808
00:32:50,950 --> 00:32:55,419
create some issues and some of the

809
00:32:52,808 --> 00:32:58,028
issues it creates for example like I was

810
00:32:55,419 --> 00:32:59,769
saying before is that because we don't

811
00:32:58,028 --> 00:33:02,109
really know how to blend these types of

812
00:32:59,769 --> 00:33:04,720
values together we get some weird

813
00:33:02,109 --> 00:33:07,658
results like in here for example what

814
00:33:04,720 --> 00:33:11,440
you're seeing I believe is the fact that

815
00:33:07,659 --> 00:33:14,860
when I add in the negative light from

816
00:33:11,440 --> 00:33:16,330
this person it kind of affects the light

817
00:33:14,859 --> 00:33:19,028
that should probably have been coming

818
00:33:16,329 --> 00:33:20,378
from this person although I don't

819
00:33:19,028 --> 00:33:22,179
actually know that that's true it may

820
00:33:20,378 --> 00:33:23,288
just be that the closest light source is

821
00:33:22,179 --> 00:33:25,509
always from here

822
00:33:23,288 --> 00:33:28,058
so these never get computing light

823
00:33:25,509 --> 00:33:31,240
sources from here it's hard to say but

824
00:33:28,058 --> 00:33:34,240
point being you know there's a lot of

825
00:33:31,240 --> 00:33:36,788
stuff going on in there now which is not

826
00:33:34,240 --> 00:33:38,649
really correct and so you know it's hard

827
00:33:36,788 --> 00:33:42,119
to make any kind of judgment calls about

828
00:33:38,648 --> 00:33:42,119
that interpolation at all really

829
00:33:43,628 --> 00:33:48,089
but anyway but it does sort of work so

830
00:33:46,058 --> 00:33:50,048
it proves that our voxel sort of does do

831
00:33:48,089 --> 00:33:52,628
one of the things we needed to do

832
00:33:50,048 --> 00:33:54,878
however the other problem that we have

833
00:33:52,628 --> 00:33:58,388
with it right now is that the voxel

834
00:33:54,878 --> 00:34:00,429
isn't stable so when we hop like between

835
00:33:58,388 --> 00:34:02,379
those two for example right

836
00:34:00,430 --> 00:34:04,870
you can see that some things get cleared

837
00:34:02,380 --> 00:34:07,600
do you see that like that whole room got

838
00:34:04,869 --> 00:34:09,730
cleared the reason for that is anytime

839
00:34:07,599 --> 00:34:11,559
the voxel moves around the light values

840
00:34:09,730 --> 00:34:14,740
just stay there we don't really do

841
00:34:11,559 --> 00:34:18,070
anything to try and make the voxel copy

842
00:34:14,739 --> 00:34:20,709
when we move where the world is relative

843
00:34:18,070 --> 00:34:22,419
to the voxel so the other thing that I

844
00:34:20,710 --> 00:34:25,300
want to try and get done today if we

845
00:34:22,418 --> 00:34:28,898
have time which I think we probably will

846
00:34:25,300 --> 00:34:32,860
right now yeah we've got we've got an

847
00:34:28,898 --> 00:34:33,909
hour so that's easy um the other thing I

848
00:34:32,860 --> 00:34:36,640
think we could do that should be

849
00:34:33,909 --> 00:34:39,280
probably pretty easy is if we just go

850
00:34:36,639 --> 00:34:41,408
ahead and try to copy the voxels so that

851
00:34:39,280 --> 00:34:42,490
when the voxel moves relative to the or

852
00:34:41,409 --> 00:34:44,740
when the world moves relative to the

853
00:34:42,489 --> 00:34:46,839
voxel we copy the correct block of the

854
00:34:44,739 --> 00:34:48,939
voxel out and clear the part that we

855
00:34:46,840 --> 00:34:50,829
don't know about so it doesn't have like

856
00:34:48,940 --> 00:34:59,440
residual lighting values sitting around

857
00:34:50,829 --> 00:35:00,369
in there that are wrong okay wish I had

858
00:34:59,440 --> 00:35:06,840
more almond milk

859
00:35:00,369 --> 00:35:11,259
I didn't start with enough almond milk

860
00:35:06,840 --> 00:35:15,039
that was a big mistake okay

861
00:35:11,260 --> 00:35:17,440
so if we take a look at how this is

862
00:35:15,039 --> 00:35:19,360
working our test cast should probably be

863
00:35:17,440 --> 00:35:21,130
able to stay the same as it is the part

864
00:35:19,360 --> 00:35:23,349
that has to change right now is really

865
00:35:21,130 --> 00:35:24,789
the begin call I believe that's what you

866
00:35:23,349 --> 00:35:26,619
can see curious when we do begin

867
00:35:24,789 --> 00:35:29,409
lighting computation we do a bunch of

868
00:35:26,619 --> 00:35:31,420
kind of sort of computations at the head

869
00:35:29,409 --> 00:35:32,889
end of that and we figure out where

870
00:35:31,420 --> 00:35:35,530
everything should go and so here you can

871
00:35:32,889 --> 00:35:37,239
see us computing these values and then

872
00:35:35,530 --> 00:35:39,160
we push some volume outlines on there

873
00:35:37,239 --> 00:35:41,139
right and we get the lighting going and

874
00:35:39,159 --> 00:35:43,329
what you can see is that if we look at

875
00:35:41,139 --> 00:35:46,480
where this how this happens you can see

876
00:35:43,329 --> 00:35:49,569
the lighting voxel are these two

877
00:35:46,480 --> 00:35:54,849
boundaries here I believe and what those

878
00:35:49,570 --> 00:35:57,370
are is I want to say that I don't really

879
00:35:54,849 --> 00:35:59,409
know if this is true I'm kind of making

880
00:35:57,369 --> 00:36:02,380
this up but I want to say that what we

881
00:35:59,409 --> 00:36:04,719
do here is this is the lighting bounce

882
00:36:02,380 --> 00:36:07,869
that's currently being computed so

883
00:36:04,719 --> 00:36:10,629
basically this is the hot voxel it's 32

884
00:36:07,869 --> 00:36:12,940
by 32 by 32 and we're actually doing

885
00:36:10,630 --> 00:36:16,329
work on that box'll

886
00:36:12,940 --> 00:36:19,030
um but this bigger one here is just what

887
00:36:16,329 --> 00:36:22,269
we're storing so because it's pretty

888
00:36:19,030 --> 00:36:24,550
free like memories cheap it's pretty

889
00:36:22,269 --> 00:36:26,889
free for us to store a bunch of old uh

890
00:36:24,550 --> 00:36:29,530
voxel values so that when we like hop

891
00:36:26,889 --> 00:36:31,568
around we don't use them necessarily so

892
00:36:29,530 --> 00:36:35,250
what we kind of want to do is store a

893
00:36:31,568 --> 00:36:37,539
large voxel filled with all of the data

894
00:36:35,250 --> 00:36:39,190
but we don't really want to actually

895
00:36:37,539 --> 00:36:41,108
have to compute all that data so that's

896
00:36:39,190 --> 00:36:43,210
what those two are and so what we really

897
00:36:41,108 --> 00:36:48,699
want to be able to do now is say alright

898
00:36:43,210 --> 00:36:51,010
look when we move where things are we

899
00:36:48,699 --> 00:36:53,588
want to copy the block that was the hot

900
00:36:51,010 --> 00:36:56,260
voxel before we want to copy that to

901
00:36:53,588 --> 00:36:58,960
wherever it is now right and leave the

902
00:36:56,260 --> 00:37:00,730
old stuff in place as much as possible

903
00:36:58,960 --> 00:37:02,230
right so we're just kind of scrolling

904
00:37:00,730 --> 00:37:05,170
we're like it's like screen scrolling

905
00:37:02,230 --> 00:37:09,068
right it's old tile map scrolling but in

906
00:37:05,170 --> 00:37:11,650
voxel space right so the first thing I

907
00:37:09,068 --> 00:37:14,858
can do is I can sort of figure out like

908
00:37:11,650 --> 00:37:17,019
well okay if this stuff is sort of

909
00:37:14,858 --> 00:37:19,239
aligned to a certain extent right and

910
00:37:17,019 --> 00:37:21,659
you can see that it is because in here

911
00:37:19,239 --> 00:37:21,659
we do

912
00:37:22,510 --> 00:37:25,650
well actually wait

913
00:37:25,670 --> 00:37:32,240
oh no we don't so it looks like we never

914
00:37:30,588 --> 00:37:34,639
finished the alignment code either

915
00:37:32,239 --> 00:37:37,268
because you see that modulus operation

916
00:37:34,639 --> 00:37:37,268
and stuff there

917
00:37:38,269 --> 00:37:40,329
you

918
00:37:42,309 --> 00:37:44,369
you

919
00:37:45,920 --> 00:37:53,559
it seems like this stuff isn't quite

920
00:37:48,429 --> 00:37:53,559
aligned properly either

921
00:38:01,010 --> 00:38:05,550
it looks like we're not actually doing

922
00:38:03,329 --> 00:38:07,199
the alignment so I think we do want to

923
00:38:05,550 --> 00:38:09,300
do that part too so there's two things

924
00:38:07,199 --> 00:38:13,369
we have to do what is we have to keep

925
00:38:09,300 --> 00:38:13,370
the voxel aligned to the actual cells

926
00:38:16,210 --> 00:38:18,269
you

927
00:38:21,838 --> 00:38:23,900
you

928
00:38:25,110 --> 00:38:36,480
so I think we're okay yeah I think it's

929
00:38:34,230 --> 00:38:39,119
okay all right so if we take a look at

930
00:38:36,480 --> 00:38:41,190
how this is actually working right let's

931
00:38:39,119 --> 00:38:42,359
go ahead and do some some investigating

932
00:38:41,190 --> 00:38:45,720
here but let's make sure that this stuff

933
00:38:42,360 --> 00:38:47,789
is it's working okay so to start with

934
00:38:45,719 --> 00:38:49,919
right we know that the simulation origin

935
00:38:47,789 --> 00:38:53,509
effectively doing is saying well we're

936
00:38:49,920 --> 00:38:56,909
going to set the size of the voxel here

937
00:38:53,510 --> 00:38:58,830
that's that's presumably based on some

938
00:38:56,909 --> 00:39:01,170
multiple like the voxel demand that

939
00:38:58,829 --> 00:39:05,509
stuff when we initialize the lighting

940
00:39:01,170 --> 00:39:05,510
that's going to be based on sort of the

941
00:39:05,719 --> 00:39:09,209
the fundamental unit size right you can

942
00:39:08,099 --> 00:39:11,190
see that here

943
00:39:09,210 --> 00:39:13,710
and that fundamental unit size right is

944
00:39:11,190 --> 00:39:16,980
guaranteed to be something that aligns

945
00:39:13,710 --> 00:39:18,809
with the world units properly now my

946
00:39:16,980 --> 00:39:20,670
assumption is that we are not aligned

947
00:39:18,809 --> 00:39:23,460
right now because we just assume that

948
00:39:20,670 --> 00:39:27,000
whatever the simulation center is that's

949
00:39:23,460 --> 00:39:29,400
where we are but you can kind of see

950
00:39:27,000 --> 00:39:31,460
here we don't actually know that that's

951
00:39:29,400 --> 00:39:34,019
true

952
00:39:31,460 --> 00:39:35,909
like all we're doing right now is saying

953
00:39:34,019 --> 00:39:37,469
that like whatever the minimum corner of

954
00:39:35,909 --> 00:39:40,409
the hop value is it's always a space

955
00:39:37,469 --> 00:39:41,789
around the simulation center minus the

956
00:39:40,409 --> 00:39:45,779
hot tip but we don't actually know that

957
00:39:41,789 --> 00:39:51,539
the simulation center itself is a line

958
00:39:45,780 --> 00:39:53,100
or do we maybe we do because if it's

959
00:39:51,539 --> 00:39:57,239
aligned on fundamental units as well

960
00:39:53,099 --> 00:40:08,429
then maybe we do kind of know that let's

961
00:39:57,239 --> 00:40:11,069
find out so I'm going to set a

962
00:40:08,429 --> 00:40:13,289
checkerboard lighting pattern and I just

963
00:40:11,070 --> 00:40:15,269
want to see how we are aligned here and

964
00:40:13,289 --> 00:40:18,079
whether it ever changes right whether it

965
00:40:15,269 --> 00:40:20,099
ever flips around so that we're not

966
00:40:18,079 --> 00:40:21,719
aligned we reach so that we're not

967
00:40:20,099 --> 00:40:24,630
always aligned with the world the same

968
00:40:21,719 --> 00:40:25,769
way and this should be really we've

969
00:40:24,630 --> 00:40:29,849
tested this before it should be really

970
00:40:25,769 --> 00:40:34,340
relatively easy to see um so if we use a

971
00:40:29,849 --> 00:40:37,679
checkerboard pattern and I turn off the

972
00:40:34,340 --> 00:40:38,519
in the OpenGL system here I I'm going to

973
00:40:37,679 --> 00:40:40,858
go ahead and

974
00:40:38,519 --> 00:40:47,269
just turn off the filtering so I can see

975
00:40:40,858 --> 00:40:47,269
it a little easier there we go

976
00:40:50,489 --> 00:40:54,269
so what you can see is that at the

977
00:40:52,469 --> 00:40:59,849
moment right the checkerboard pattern is

978
00:40:54,269 --> 00:41:03,389
aligned so that we're kind of running

979
00:40:59,849 --> 00:41:05,279
down the middle that the checkerboard

980
00:41:03,389 --> 00:41:07,819
lines are running down the middle of the

981
00:41:05,280 --> 00:41:13,019
squares in X and they're aligned and Y

982
00:41:07,820 --> 00:41:14,910
so middle X aligned and Y and then you

983
00:41:13,019 --> 00:41:18,150
can see that when I moved right like

984
00:41:14,909 --> 00:41:20,279
when I moved here to here it actually

985
00:41:18,150 --> 00:41:23,670
changed so now it's in the middle of

986
00:41:20,280 --> 00:41:26,490
both right so what that tells me is that

987
00:41:23,670 --> 00:41:30,690
no we are not always aligned the same in

988
00:41:26,489 --> 00:41:35,369
terms of world origin the world origin

989
00:41:30,690 --> 00:41:37,139
itself actually is is sort of moving at

990
00:41:35,369 --> 00:41:41,069
different fundamental units there like

991
00:41:37,139 --> 00:41:44,789
potentially 0.5 so what I'd like to do

992
00:41:41,070 --> 00:41:46,860
there is figure out some way of making

993
00:41:44,789 --> 00:41:49,440
sure that we actually get that alignment

994
00:41:46,860 --> 00:41:52,289
properly you can see here so we can

995
00:41:49,440 --> 00:41:54,090
always be up to 0.5 off it looks like on

996
00:41:52,289 --> 00:41:57,000
the world origin we're never anything

997
00:41:54,090 --> 00:42:03,510
other than point 5 off but we definitely

998
00:41:57,000 --> 00:42:12,090
can be 0.5 in either X or Y versus what

999
00:42:03,510 --> 00:42:15,290
the what the input is right whoo that's

1000
00:42:12,090 --> 00:42:15,289
at least what it looks like to me

1001
00:42:22,260 --> 00:42:26,850
like that seems seems pretty

1002
00:42:25,050 --> 00:42:30,000
unmistakable so that's definitely I

1003
00:42:26,849 --> 00:42:31,380
think the case my assumption is that has

1004
00:42:30,000 --> 00:42:34,789
to do with how we're centering the

1005
00:42:31,380 --> 00:42:34,789
world's origin

1006
00:42:37,750 --> 00:42:45,610
my guess anyway all right so if a if I

1007
00:42:41,139 --> 00:42:48,789
go to the code for the lighting that's

1008
00:42:45,610 --> 00:42:50,440
actually doing that computation one

1009
00:42:48,789 --> 00:42:52,179
thing that I then want to do is I want

1010
00:42:50,440 --> 00:42:53,980
to say all right what's going on here

1011
00:42:52,179 --> 00:42:56,799
with that so as far as the world

1012
00:42:53,980 --> 00:42:58,659
position origin P is concerned what I

1013
00:42:56,800 --> 00:43:00,730
want to do I guess is take a look if

1014
00:42:58,659 --> 00:43:04,359
there's any sort of offset there the

1015
00:43:00,730 --> 00:43:07,179
fundamental unit if we go look at how

1016
00:43:04,360 --> 00:43:12,210
the world works here right I'm gonna

1017
00:43:07,179 --> 00:43:12,210
look at that fundamental unit let's see

1018
00:43:17,969 --> 00:43:26,919
just go search for where that's used so

1019
00:43:25,510 --> 00:43:29,290
what you can sort of see here right is

1020
00:43:26,920 --> 00:43:31,119
the fundamental unit is used to build

1021
00:43:29,289 --> 00:43:33,670
everything so everything kind of built

1022
00:43:31,119 --> 00:43:35,230
off of that one fundamental unit and you

1023
00:43:33,670 --> 00:43:41,170
can see it creating the world out of

1024
00:43:35,230 --> 00:43:43,300
them as well right and so the world

1025
00:43:41,170 --> 00:43:45,340
chunk dims are always a multiple of that

1026
00:43:43,300 --> 00:43:46,900
so what that means is that we should

1027
00:43:45,340 --> 00:43:49,420
always be aligned as far as the

1028
00:43:46,900 --> 00:43:53,950
fundamental unit is concerned in the

1029
00:43:49,420 --> 00:43:58,000
voxel but if there's ever a non integral

1030
00:43:53,949 --> 00:43:59,919
so basically like if we're ever have any

1031
00:43:58,000 --> 00:44:02,110
offset from there from begin letting

1032
00:43:59,920 --> 00:44:03,280
computation we've ever any offset we

1033
00:44:02,110 --> 00:44:06,039
need to account for that so basically

1034
00:44:03,280 --> 00:44:08,080
that means is that if I go into the

1035
00:44:06,039 --> 00:44:11,050
world position struct and we look

1036
00:44:08,079 --> 00:44:14,190
there's this offset parameter if that

1037
00:44:11,050 --> 00:44:18,010
offset is ever anything other than a

1038
00:44:14,190 --> 00:44:21,000
zero then we would be slid sort of

1039
00:44:18,010 --> 00:44:24,340
around from where the chunk boundaries

1040
00:44:21,000 --> 00:44:26,289
would be so what I assumed we would want

1041
00:44:24,340 --> 00:44:29,170
do to keep ourselves aligned to the

1042
00:44:26,289 --> 00:44:32,679
voxel properly would be to say first of

1043
00:44:29,170 --> 00:44:36,309
all we have to account for that offset

1044
00:44:32,679 --> 00:44:39,819
value so we need to start by taking the

1045
00:44:36,309 --> 00:44:42,230
offset and moving back to where we

1046
00:44:39,820 --> 00:44:45,200
should be and then

1047
00:44:42,230 --> 00:44:50,900
we can continue moving back to align the

1048
00:44:45,199 --> 00:44:52,759
the voxel completely with with that

1049
00:44:50,900 --> 00:44:56,119
fundamental unit so I think that would

1050
00:44:52,760 --> 00:44:58,270
keep the Vox aligned properly don't

1051
00:44:56,119 --> 00:45:00,980
quote me on that but that's what I think

1052
00:44:58,269 --> 00:45:03,259
and so now what we would see hopefully

1053
00:45:00,980 --> 00:45:05,300
and it does look like it's the case is

1054
00:45:03,260 --> 00:45:07,720
that checkerboard pattern should always

1055
00:45:05,300 --> 00:45:10,460
align itself perfectly to the actual

1056
00:45:07,719 --> 00:45:13,519
world sort of placement of tiles that we

1057
00:45:10,460 --> 00:45:15,530
had which again is arbitrarily like we

1058
00:45:13,519 --> 00:45:16,820
don't care just to be clear because I

1059
00:45:15,530 --> 00:45:18,350
know this might seem confusing there's a

1060
00:45:16,820 --> 00:45:20,420
lot in play here and it's all kind of in

1061
00:45:18,349 --> 00:45:23,509
my head I apologize sometimes I take

1062
00:45:20,420 --> 00:45:26,480
some things for granted but what you can

1063
00:45:23,510 --> 00:45:30,050
see going on here right is we don't

1064
00:45:26,480 --> 00:45:33,619
actually care at all about whether or

1065
00:45:30,050 --> 00:45:38,390
not what that that's what's going on

1066
00:45:33,619 --> 00:45:40,699
there we have multiple sorry to get

1067
00:45:38,389 --> 00:45:43,599
distracted there but do we have for some

1068
00:45:40,699 --> 00:45:43,599
reason multiple

1069
00:45:43,789 --> 00:45:52,699
of the same cube drawn in the same place

1070
00:45:48,829 --> 00:45:57,519
there somehow or is that a box of

1071
00:45:52,699 --> 00:45:57,519
sampling bug of some kind

1072
00:46:00,469 --> 00:46:02,529
you

1073
00:46:06,480 --> 00:46:10,170
so that could just be a box of sending

1074
00:46:08,369 --> 00:46:11,849
buckets right on the boundary that's

1075
00:46:10,170 --> 00:46:12,990
probably what's happening so with linear

1076
00:46:11,849 --> 00:46:15,000
interpolation you wouldn't see any of

1077
00:46:12,989 --> 00:46:20,399
that at all so we're good all right

1078
00:46:15,000 --> 00:46:23,760
anyway sorry I got struck it anyway so

1079
00:46:20,400 --> 00:46:26,180
if we look at this we don't care that

1080
00:46:23,760 --> 00:46:30,119
the voxel is aligned to the world

1081
00:46:26,179 --> 00:46:32,098
geometry that we don't care so we are

1082
00:46:30,119 --> 00:46:34,170
free to place these squares however we

1083
00:46:32,099 --> 00:46:35,760
want to and we're also free to change

1084
00:46:34,170 --> 00:46:37,079
our voxel resolution to be something

1085
00:46:35,760 --> 00:46:38,700
totally different than this

1086
00:46:37,079 --> 00:46:41,670
it could be twice as large or half as

1087
00:46:38,699 --> 00:46:45,379
large if we wanted to right what we want

1088
00:46:41,670 --> 00:46:48,119
though is we want whenever we move the

1089
00:46:45,380 --> 00:46:52,170
simulation center by a discontinuous

1090
00:46:48,119 --> 00:46:55,710
jump like that like that right we want

1091
00:46:52,170 --> 00:46:58,440
the voxel cells to be in the same place

1092
00:46:55,710 --> 00:47:01,829
as they were before so you don't want to

1093
00:46:58,440 --> 00:47:03,539
slide a portion of a voxel cell over so

1094
00:47:01,829 --> 00:47:06,660
this was just my way of making sure that

1095
00:47:03,539 --> 00:47:08,909
the voxel cells themselves always were

1096
00:47:06,659 --> 00:47:10,920
on a fixed grid even as we scroll around

1097
00:47:08,909 --> 00:47:13,739
the world arbitrarily and that's what's

1098
00:47:10,920 --> 00:47:16,139
going on now you can see as I move here

1099
00:47:13,739 --> 00:47:19,379
that the voxel doesn't actually remain

1100
00:47:16,139 --> 00:47:22,318
exactly the same right it changed there

1101
00:47:19,380 --> 00:47:25,710
you see I'm saying right to it to a

1102
00:47:22,318 --> 00:47:28,318
different location right and so I feel

1103
00:47:25,710 --> 00:47:32,460
like to a certain extent that sort of

1104
00:47:28,318 --> 00:47:33,809
underscores how that has sort of that

1105
00:47:32,460 --> 00:47:37,400
that different results it's working

1106
00:47:33,809 --> 00:47:40,380
there but anyway you get the idea so

1107
00:47:37,400 --> 00:47:41,700
with that in mind what I'd like to do is

1108
00:47:40,380 --> 00:47:44,068
say all right now that we've got that

1109
00:47:41,699 --> 00:47:45,750
taken care of let's see if we can go

1110
00:47:44,068 --> 00:47:49,889
ahead and copy these values now that I

1111
00:47:45,750 --> 00:47:52,170
know that they're at least aligned okay

1112
00:47:49,889 --> 00:47:56,659
so let's go ahead and switch back and

1113
00:47:52,170 --> 00:47:56,659
stop doing the checkerboard pattern

1114
00:48:05,269 --> 00:48:10,949
all right and what I'm going to do now

1115
00:48:08,400 --> 00:48:13,740
is I'm just going to switch to using the

1116
00:48:10,949 --> 00:48:15,480
transfer that we were using before and

1117
00:48:13,739 --> 00:48:16,919
I'm gonna try and get the copy working

1118
00:48:15,480 --> 00:48:19,829
so that it preserves those lighting

1119
00:48:16,920 --> 00:48:23,159
values across the jumps right now I've

1120
00:48:19,829 --> 00:48:25,829
left I haven't turned linear sampling

1121
00:48:23,159 --> 00:48:28,049
back on so we should still see like

1122
00:48:25,829 --> 00:48:29,640
tile-based stuff but I kind of want that

1123
00:48:28,050 --> 00:48:34,369
because it makes it easier for me to see

1124
00:48:29,639 --> 00:48:37,650
what's going on right and so that there

1125
00:48:34,369 --> 00:48:40,950
provides a very good test case that jump

1126
00:48:37,650 --> 00:48:43,289
where the voxel just clears there that's

1127
00:48:40,949 --> 00:48:44,969
what we want to stop happening because

1128
00:48:43,289 --> 00:48:46,469
there's no reason for it to clear just

1129
00:48:44,969 --> 00:48:47,639
because the simulation center changed we

1130
00:48:46,469 --> 00:48:52,559
should be able to preserve all of our

1131
00:48:47,639 --> 00:48:54,659
light values still just fine okay so how

1132
00:48:52,559 --> 00:48:56,190
would we know that that's happening well

1133
00:48:54,659 --> 00:48:58,949
the first way that we know that that's

1134
00:48:56,190 --> 00:49:02,010
happening is when we look at this

1135
00:48:58,949 --> 00:49:05,578
incoming value for the world position of

1136
00:49:02,010 --> 00:49:07,920
the origin P what we know there is if we

1137
00:49:05,579 --> 00:49:10,710
were to track that value then as the

1138
00:49:07,920 --> 00:49:12,659
world position moved around we would

1139
00:49:10,710 --> 00:49:14,699
know because we could compare it right

1140
00:49:12,659 --> 00:49:16,739
so what we could do is we could say in

1141
00:49:14,699 --> 00:49:19,259
the lighting solution let's just store

1142
00:49:16,739 --> 00:49:23,789
whatever the last one of those was so we

1143
00:49:19,260 --> 00:49:25,980
can say last origin P like so and here

1144
00:49:23,789 --> 00:49:29,670
we can say look did it change

1145
00:49:25,980 --> 00:49:33,000
so we can sort of have like a center

1146
00:49:29,670 --> 00:49:41,369
moved boolean value where we can just

1147
00:49:33,000 --> 00:49:43,769
say like R equal to if these two are not

1148
00:49:41,369 --> 00:49:45,890
equal and again we don't actually want

1149
00:49:43,769 --> 00:49:49,019
to make them exactly equivalent here

1150
00:49:45,889 --> 00:49:52,289
because we don't care actually about

1151
00:49:49,019 --> 00:49:54,389
this offset this minor offset so we

1152
00:49:52,289 --> 00:49:57,719
could choose to zero that out right

1153
00:49:54,389 --> 00:49:59,190
that's one thing that we could do and so

1154
00:49:57,719 --> 00:50:01,789
what we might want to do is something

1155
00:49:59,190 --> 00:50:01,789
like this

1156
00:50:06,719 --> 00:50:16,000
take the origin P that we have changed

1157
00:50:11,260 --> 00:50:18,730
the offset to zero and just remember

1158
00:50:16,000 --> 00:50:20,469
that part so if the center moved we

1159
00:50:18,730 --> 00:50:22,090
would say look if these two are not

1160
00:50:20,469 --> 00:50:23,619
equal any more than the center

1161
00:50:22,090 --> 00:50:29,380
definitely moved I don't know if we

1162
00:50:23,619 --> 00:50:32,829
actually have an R equal for them looks

1163
00:50:29,380 --> 00:50:43,150
like we do and then that last origin P

1164
00:50:32,829 --> 00:50:45,340
can now just be stored and that just

1165
00:50:43,150 --> 00:50:46,930
gives us a way now of knowing when do we

1166
00:50:45,340 --> 00:50:49,030
actually have to open looks like we

1167
00:50:46,929 --> 00:50:51,449
don't actually have one sorry I spoke

1168
00:50:49,030 --> 00:50:51,450
too soon

1169
00:51:00,929 --> 00:51:11,529
it looks like actually are in same chunk

1170
00:51:04,030 --> 00:51:19,180
is all we really needed so actually we

1171
00:51:11,530 --> 00:51:20,260
could just do this amusingly enough we

1172
00:51:19,179 --> 00:51:22,569
already had a thing that does exactly

1173
00:51:20,260 --> 00:51:25,330
this comparison so if these two are in

1174
00:51:22,570 --> 00:51:28,720
the same chunk then the center didn't

1175
00:51:25,329 --> 00:51:31,269
move right and so that's all we would

1176
00:51:28,719 --> 00:51:33,699
actually have to do and then what we

1177
00:51:31,269 --> 00:51:35,289
want to know again is just like what's

1178
00:51:33,699 --> 00:51:37,750
the difference between these two right

1179
00:51:35,289 --> 00:51:39,489
like how would they actually how would

1180
00:51:37,750 --> 00:51:41,889
we actually have to copy the voxel from

1181
00:51:39,489 --> 00:51:44,349
one to the other and so what we could do

1182
00:51:41,889 --> 00:51:46,929
here is say well okay let's just say if

1183
00:51:44,349 --> 00:51:49,719
the center moved then what we need to do

1184
00:51:46,929 --> 00:51:52,719
here is actually perform that copy so we

1185
00:51:49,719 --> 00:51:58,000
need sort of like a delta for how you

1186
00:51:52,719 --> 00:52:00,069
know what where the voxel how many

1187
00:51:58,000 --> 00:52:03,639
pieces the voxel should copy over

1188
00:52:00,070 --> 00:52:05,170
basically right and so in order to

1189
00:52:03,639 --> 00:52:07,480
figure that out what we need to do is

1190
00:52:05,170 --> 00:52:09,039
take the difference between these two

1191
00:52:07,480 --> 00:52:11,349
values and then use however many

1192
00:52:09,039 --> 00:52:13,000
fundamental units that actually is so

1193
00:52:11,349 --> 00:52:17,319
what we would do is say well the Origin

1194
00:52:13,000 --> 00:52:20,559
P right the what the new one that has in

1195
00:52:17,320 --> 00:52:23,470
it in the world position a chunk

1196
00:52:20,559 --> 00:52:25,119
difference here right so we kind of want

1197
00:52:23,469 --> 00:52:27,969
to figure out what that chunk difference

1198
00:52:25,119 --> 00:52:34,569
is so we have our chunk X and we want to

1199
00:52:27,969 --> 00:52:37,089
subtract that from the one that we know

1200
00:52:34,570 --> 00:52:40,330
and that gives us a like a deep chunk X

1201
00:52:37,090 --> 00:52:42,880
right and so in here what we could do is

1202
00:52:40,329 --> 00:52:45,549
just compute what these offset values

1203
00:52:42,880 --> 00:52:48,309
actually are and then we would know like

1204
00:52:45,550 --> 00:52:51,250
this is how far we actually had to go so

1205
00:52:48,309 --> 00:52:55,239
we did this we you know moved this far

1206
00:52:51,250 --> 00:52:56,949
in each of the dimensions but of course

1207
00:52:55,239 --> 00:52:59,319
that doesn't really tell us how many

1208
00:52:56,949 --> 00:53:01,299
voxel cells we moved that tells us how

1209
00:52:59,320 --> 00:53:05,559
many world chunks we need we moved and

1210
00:53:01,300 --> 00:53:09,820
we now need to also know what the world

1211
00:53:05,559 --> 00:53:11,320
chunk size is in terms of voxel values

1212
00:53:09,820 --> 00:53:13,360
and that's also something that we can

1213
00:53:11,320 --> 00:53:14,380
store so in other words inside our

1214
00:53:13,360 --> 00:53:18,880
letting solution here

1215
00:53:14,380 --> 00:53:23,650
we can also do is record maybe something

1216
00:53:18,880 --> 00:53:32,200
like this right and in fact this should

1217
00:53:23,650 --> 00:53:34,030
probably be this we didn't have v3 s is

1218
00:53:32,199 --> 00:53:36,000
implemented at the time we wrote the

1219
00:53:34,030 --> 00:53:39,340
chunk stuff so that's why they're not

1220
00:53:36,000 --> 00:53:46,599
stored as those to begin with we should

1221
00:53:39,340 --> 00:53:47,860
probably go back and change that oops so

1222
00:53:46,599 --> 00:53:49,539
what you can see here is we're just

1223
00:53:47,860 --> 00:53:51,460
saying look we've got a delta that's the

1224
00:53:49,539 --> 00:53:55,420
chunk Delta and here it is but now we

1225
00:53:51,460 --> 00:53:57,970
need to multiply that out so that we

1226
00:53:55,420 --> 00:54:00,280
have some idea of how many voxel cells

1227
00:53:57,969 --> 00:54:04,869
that is so this would be like voxel

1228
00:54:00,280 --> 00:54:06,850
cells per chunk right and that's a v3 s

1229
00:54:04,869 --> 00:54:09,699
because the voxel cell the chunks are

1230
00:54:06,849 --> 00:54:12,130
not the same they're not cubic right

1231
00:54:09,699 --> 00:54:25,899
they're actually rectangular so the

1232
00:54:12,130 --> 00:54:27,160
voxel cells per chunk multiplied out so

1233
00:54:25,900 --> 00:54:30,250
we've got our d chunk times our box

1234
00:54:27,159 --> 00:54:33,609
itself or chunk is how many voxel units

1235
00:54:30,250 --> 00:54:36,159
we moved during that frame so if I do

1236
00:54:33,610 --> 00:54:37,990
that now I've pretty much got the

1237
00:54:36,159 --> 00:54:40,420
information I need if I can provide that

1238
00:54:37,989 --> 00:54:43,179
voxel cells for trunk value which at the

1239
00:54:40,420 --> 00:54:47,530
moment I don't actually know what it is

1240
00:54:43,179 --> 00:54:52,239
are in the same chunk it doesn't seem to

1241
00:54:47,530 --> 00:54:55,710
be available that's probably just

1242
00:54:52,239 --> 00:54:55,709
because it's not exposed

1243
00:55:05,460 --> 00:55:16,599
let's see here we need our worlds out we

1244
00:55:08,739 --> 00:55:19,179
need our world to be passed in here and

1245
00:55:16,599 --> 00:55:21,460
we would need that anyway so when we do

1246
00:55:19,179 --> 00:55:23,440
begin lighting computation we would need

1247
00:55:21,460 --> 00:55:25,679
that because we also need to use that

1248
00:55:23,440 --> 00:55:28,750
world value because it's the only thing

1249
00:55:25,679 --> 00:55:31,239
in here that actually knows for example

1250
00:55:28,750 --> 00:55:36,039
what that fundamental value actually is

1251
00:55:31,239 --> 00:55:38,049
so if we look in into the world data

1252
00:55:36,039 --> 00:55:40,809
that chunk dim in meters is what's gonna

1253
00:55:38,050 --> 00:55:42,820
tell us that right so actually I suppose

1254
00:55:40,809 --> 00:55:43,599
we can do this map every frame it's not

1255
00:55:42,820 --> 00:55:46,000
expensive

1256
00:55:43,599 --> 00:55:47,349
I can probably not bother storing it in

1257
00:55:46,000 --> 00:55:50,739
the white solution even though it is

1258
00:55:47,349 --> 00:55:56,019
going to be constant what I could do

1259
00:55:50,739 --> 00:56:03,519
here is say look the voxel sells for

1260
00:55:56,019 --> 00:56:05,800
chunk this can just be a round where we

1261
00:56:03,519 --> 00:56:08,409
just do the divide so we could just say

1262
00:56:05,800 --> 00:56:11,740
alright we know that the world has a

1263
00:56:08,409 --> 00:56:13,839
chunk gem in meters that's how big a

1264
00:56:11,739 --> 00:56:16,569
chunk is we then want to divide by

1265
00:56:13,840 --> 00:56:20,470
however big these voxels supposedly are

1266
00:56:16,570 --> 00:56:22,570
so this is voxel dim right and this

1267
00:56:20,469 --> 00:56:28,449
would give us the information we

1268
00:56:22,570 --> 00:56:30,100
actually needed right that's pretty much

1269
00:56:28,449 --> 00:56:31,629
all there is to it I think that would

1270
00:56:30,099 --> 00:56:34,769
give us the correct value of so know

1271
00:56:31,630 --> 00:56:34,769
what that's still doing there

1272
00:56:43,510 --> 00:57:04,730
these have to be pointers and these is

1273
00:56:58,630 --> 00:57:06,590
flux cell Tim of vectorizing I need to

1274
00:57:04,730 --> 00:57:09,679
be accessed by their members that's

1275
00:57:06,590 --> 00:57:12,220
about it I think and so I don't know if

1276
00:57:09,679 --> 00:57:15,289
we have a Hadamard product for v3 s is

1277
00:57:12,219 --> 00:57:17,779
we probably don't it looks like we don't

1278
00:57:15,289 --> 00:57:20,960
how do our product where v3 s is is the

1279
00:57:17,780 --> 00:57:23,180
same as ahead of our product for VIII's

1280
00:57:20,960 --> 00:57:26,740
it's just an integer multiplied instead

1281
00:57:23,179 --> 00:57:26,739
so it's really not a big deal

1282
00:57:27,489 --> 00:57:32,869
all right so begin lining computation

1283
00:57:30,829 --> 00:57:35,480
now needs to have the world pass down

1284
00:57:32,869 --> 00:57:39,699
that's being used and that's not a big

1285
00:57:35,480 --> 00:57:44,480
deal we obviously have that data anytime

1286
00:57:39,699 --> 00:57:46,669
all right so let's go ahead and and see

1287
00:57:44,480 --> 00:57:48,050
if we can get this going and I want to

1288
00:57:46,670 --> 00:57:49,760
step through that code as well and I

1289
00:57:48,050 --> 00:57:53,269
want to look at what the values we

1290
00:57:49,760 --> 00:57:56,510
compute actually are so when we're doing

1291
00:57:53,269 --> 00:57:58,280
the copies here like from here to here

1292
00:57:56,510 --> 00:58:01,100
we're going to need to do the copy based

1293
00:57:58,280 --> 00:58:02,990
on that D chunk value and so that's

1294
00:58:01,099 --> 00:58:05,179
gonna you know assume that this

1295
00:58:02,989 --> 00:58:06,979
computation is correct I want to switch

1296
00:58:05,179 --> 00:58:08,389
to debug mode I want to look at the

1297
00:58:06,980 --> 00:58:11,090
values we computed to make sure they

1298
00:58:08,389 --> 00:58:13,609
look sane before I implement the actual

1299
00:58:11,090 --> 00:58:16,039
copy so I'm switching the o2 to an OD

1300
00:58:13,610 --> 00:58:18,140
which tells compiler obviously to debug

1301
00:58:16,039 --> 00:58:21,289
mode and then what I want to do is just

1302
00:58:18,139 --> 00:58:23,929
set a breakpoint right here so I know

1303
00:58:21,289 --> 00:58:28,340
that the center will move sometimes I'd

1304
00:58:23,929 --> 00:58:33,769
like to probably break like there and if

1305
00:58:28,340 --> 00:58:35,390
I'm right I should be able to hop what's

1306
00:58:33,769 --> 00:58:37,690
going on here why am I not getting

1307
00:58:35,389 --> 00:58:37,690
anything

1308
00:58:37,798 --> 00:58:43,268
there we go I should be able to hop

1309
00:58:40,900 --> 00:58:45,548
across the boundary like that and cause

1310
00:58:43,268 --> 00:58:47,229
a move and when I caused the move here

1311
00:58:45,548 --> 00:58:50,018
what I should be able to now do is look

1312
00:58:47,230 --> 00:58:53,108
at voxels ellsberg chunk which should

1313
00:58:50,018 --> 00:58:55,268
give me 17 9 and 3 which is exactly what

1314
00:58:53,108 --> 00:58:57,369
I did and I should be able to look at D

1315
00:58:55,268 --> 00:59:00,338
chunk which is how far we actually moved

1316
00:58:57,369 --> 00:59:01,990
and it should tell us how many chunks we

1317
00:59:00,338 --> 00:59:04,599
went any particular direction this

1318
00:59:01,989 --> 00:59:07,000
claims we went one chunk in Y I could

1319
00:59:04,599 --> 00:59:09,940
sort of believe that I don't really know

1320
00:59:07,000 --> 00:59:11,818
if that's true or not though because we

1321
00:59:09,940 --> 00:59:14,170
don't have a lot of information about

1322
00:59:11,818 --> 00:59:15,818
where the actual coordinate centers are

1323
00:59:14,170 --> 00:59:20,019
at the moment so could be true could be

1324
00:59:15,818 --> 00:59:20,710
false we may have to debug that looks

1325
00:59:20,018 --> 00:59:23,199
like a pretty straightforward

1326
00:59:20,710 --> 00:59:26,650
calculation now and then if we take a

1327
00:59:23,199 --> 00:59:29,288
look at D voxel here we're gonna we're

1328
00:59:26,650 --> 00:59:31,210
about to compute that unfortunately it

1329
00:59:29,289 --> 00:59:32,500
looks like it went off scope but

1330
00:59:31,210 --> 00:59:35,409
actually it looks like remedy preserved

1331
00:59:32,500 --> 00:59:37,838
it for us so it's 9 in this case right

1332
00:59:35,409 --> 00:59:41,500
so this is claiming that our solution

1333
00:59:37,838 --> 00:59:43,659
our coordinate center moved up by 9 but

1334
00:59:41,500 --> 00:59:52,768
that's all it did let me take a look at

1335
00:59:43,659 --> 00:59:52,768
the origin P here all right

1336
00:59:53,670 --> 01:00:05,099
oops here's the one we had before so

1337
00:59:59,639 --> 01:00:12,358
let's say we went from 0 0 0 to 0 1 0

1338
01:00:05,099 --> 01:00:16,028
supposedly as our coordinate center um

1339
01:00:12,358 --> 01:00:20,739
and I mean all right you know I could

1340
01:00:16,028 --> 01:00:22,059
believe that I don't necessarily know

1341
01:00:20,739 --> 01:00:23,768
what's wrong yet but we haven't really

1342
01:00:22,059 --> 01:00:25,900
done much to verify whether it is or

1343
01:00:23,768 --> 01:00:28,689
isn't all right so let's go ahead and

1344
01:00:25,900 --> 01:00:30,220
take a stab at the copy again we've got

1345
01:00:28,690 --> 01:00:33,009
some you know we have a fair bit of time

1346
01:00:30,219 --> 01:00:36,009
left I think I think we should be done

1347
01:00:33,009 --> 01:00:39,369
and about what 40 minutes something like

1348
01:00:36,009 --> 01:00:41,349
that so if I go in here and just go

1349
01:00:39,369 --> 01:00:42,789
ahead and and the stream does still see

1350
01:00:41,349 --> 01:00:43,480
me alive by the way those batteries must

1351
01:00:42,789 --> 01:00:45,880
be pretty good

1352
01:00:43,480 --> 01:00:47,699
when effort though they has thought that

1353
01:00:45,880 --> 01:00:54,960
up

1354
01:00:47,699 --> 01:00:56,909
yeah anyway so moving along if I go in

1355
01:00:54,960 --> 01:01:01,679
and actually take a stab at the copy in

1356
01:00:56,909 --> 01:01:03,539
the begin lighting computation call what

1357
01:01:01,679 --> 01:01:06,269
you can see here is that if the lighting

1358
01:01:03,539 --> 01:01:08,429
is enabled and we have a center movement

1359
01:01:06,269 --> 01:01:10,440
occur then what we're going to do is

1360
01:01:08,429 --> 01:01:12,088
we're going to try and copy the voxel

1361
01:01:10,440 --> 01:01:15,630
we're going to scroll the voxel by this

1362
01:01:12,088 --> 01:01:17,308
much right and in order to scroll the

1363
01:01:15,630 --> 01:01:20,730
voxel that much what that means is we're

1364
01:01:17,309 --> 01:01:24,269
trying to copy we need to copy each of

1365
01:01:20,730 --> 01:01:27,420
the sort of dimensions of the voxel in

1366
01:01:24,269 --> 01:01:31,409
that way right so if the voxels supposed

1367
01:01:27,420 --> 01:01:35,548
to go you know if we're moving to voxel

1368
01:01:31,409 --> 01:01:38,338
squares you know along X then we need to

1369
01:01:35,548 --> 01:01:40,858
copy the voxel tuvok so squares

1370
01:01:38,338 --> 01:01:44,400
backwards along X in order to keep it

1371
01:01:40,858 --> 01:01:47,880
aligned with where the world now appears

1372
01:01:44,400 --> 01:01:50,579
to be so if you imagine just doing this

1373
01:01:47,880 --> 01:01:52,349
like for one axis so let's suppose we

1374
01:01:50,579 --> 01:01:54,329
were going to do it for the y axis since

1375
01:01:52,349 --> 01:01:57,510
that's the one we currently have a test

1376
01:01:54,329 --> 01:01:59,640
for then what I would need to be able to

1377
01:01:57,510 --> 01:02:03,829
do is I would need to be able to say

1378
01:01:59,639 --> 01:02:06,838
alright I know that I'm going to have to

1379
01:02:03,829 --> 01:02:10,619
do a copy either forwards or either

1380
01:02:06,838 --> 01:02:13,318
forwards or backwards right so let me do

1381
01:02:10,619 --> 01:02:16,650
just a if statement here as this as a

1382
01:02:13,318 --> 01:02:20,699
simple way of doing it and say look if D

1383
01:02:16,650 --> 01:02:21,809
voxel dot y is less than zero and this

1384
01:02:20,699 --> 01:02:23,129
is not probably how we're going to do at

1385
01:02:21,809 --> 01:02:23,690
the end but I want to just walk through

1386
01:02:23,130 --> 01:02:33,769
it

1387
01:02:23,690 --> 01:02:33,769
doing the fully explicit way oops first

1388
01:02:34,039 --> 01:02:39,029
so if you take a look at what we're

1389
01:02:36,838 --> 01:02:43,798
gonna do here if we are going to walk

1390
01:02:39,030 --> 01:02:45,839
over so the Delta voxel movement was

1391
01:02:43,798 --> 01:02:48,480
negative meaning the player moved in

1392
01:02:45,838 --> 01:02:51,420
negative Y then we want to move the

1393
01:02:48,480 --> 01:02:52,980
voxel in positive Y right and I should

1394
01:02:51,420 --> 01:02:54,420
probably draw this out because I

1395
01:02:52,980 --> 01:02:57,300
realized that didn't really probably

1396
01:02:54,420 --> 01:02:59,099
make any sense what I just said

1397
01:02:57,300 --> 01:03:01,370
I'm going to try and make it clear I'm

1398
01:02:59,099 --> 01:03:01,369
sorry

1399
01:03:15,619 --> 01:03:20,789
all right so thinking about this purely

1400
01:03:18,210 --> 01:03:21,809
in one dimension at the moment although

1401
01:03:20,789 --> 01:03:24,420
I'll draw it this way because we're

1402
01:03:21,809 --> 01:03:27,690
talking about Y so if this is our one

1403
01:03:24,420 --> 01:03:29,820
dimension this is y and it's going this

1404
01:03:27,690 --> 01:03:32,970
way right then this way would be

1405
01:03:29,820 --> 01:03:36,030
negative this way would be positive if I

1406
01:03:32,969 --> 01:03:39,779
have my voxel and so I'm gonna go ahead

1407
01:03:36,030 --> 01:03:42,750
and put one down you know there it is I

1408
01:03:39,780 --> 01:03:43,829
if I have my voxel and what I'm saying

1409
01:03:42,750 --> 01:03:47,400
is okay

1410
01:03:43,829 --> 01:03:52,170
previously I know that the simulation

1411
01:03:47,400 --> 01:03:54,809
center right was like right here so this

1412
01:03:52,170 --> 01:04:02,099
is where the simulation center was that

1413
01:03:54,809 --> 01:04:05,099
value is last origin P right but now

1414
01:04:02,099 --> 01:04:07,470
when I look and we call this the you

1415
01:04:05,099 --> 01:04:12,710
know function again what I see is that

1416
01:04:07,469 --> 01:04:18,389
now I get this so this is now origin P

1417
01:04:12,710 --> 01:04:22,139
right this value so this is zero one two

1418
01:04:18,389 --> 01:04:26,129
three four this value is four five six

1419
01:04:22,139 --> 01:04:28,409
this value is six so when I subtract you

1420
01:04:26,130 --> 01:04:30,858
can see in the code here right origin -

1421
01:04:28,409 --> 01:04:34,108
last origin when I subtract these two I

1422
01:04:30,858 --> 01:04:37,139
subtract six from four and I get

1423
01:04:34,108 --> 01:04:39,750
positive - what does that mean it means

1424
01:04:37,139 --> 01:04:41,879
that the player well the origin the

1425
01:04:39,750 --> 01:04:44,670
camera origin right or the the sort of

1426
01:04:41,880 --> 01:04:50,880
simulation origin move forwards two

1427
01:04:44,670 --> 01:04:55,530
units like that that means that now it

1428
01:04:50,880 --> 01:04:59,700
this location is effectively this

1429
01:04:55,530 --> 01:05:03,210
location right and for me what I need to

1430
01:04:59,699 --> 01:05:07,659
do is I need to take this part of the

1431
01:05:03,210 --> 01:05:11,559
voxel and move it

1432
01:05:07,659 --> 01:05:13,659
so that it's actually here right so what

1433
01:05:11,559 --> 01:05:16,720
that means is everything that was in the

1434
01:05:13,659 --> 01:05:19,719
voxel every square like if this was a a

1435
01:05:16,719 --> 01:05:23,980
has to get moved there so every voxel

1436
01:05:19,719 --> 01:05:30,058
square needs to be moved to backwards

1437
01:05:23,980 --> 01:05:30,059
from where it was so you know voxel I

1438
01:05:30,900 --> 01:05:45,940
minus 2 has to be equal to voxel I right

1439
01:05:38,559 --> 01:05:51,548
or voxel I needs to be equal to oxalá I

1440
01:05:45,940 --> 01:05:55,119
plus 2 right so this is the update step

1441
01:05:51,548 --> 01:05:57,009
that I need to be able to do and when

1442
01:05:55,119 --> 01:05:59,140
I'm doing it I have to be careful not to

1443
01:05:57,010 --> 01:06:04,630
over write values I'm actually going to

1444
01:05:59,139 --> 01:06:07,480
need so for example let's suppose that

1445
01:06:04,630 --> 01:06:09,818
I'm doing this particular copy if the

1446
01:06:07,480 --> 01:06:13,269
first thing that I did was I updated

1447
01:06:09,818 --> 01:06:15,159
this cell by popping this into here well

1448
01:06:13,269 --> 01:06:17,108
now I've lost the ability to correctly

1449
01:06:15,159 --> 01:06:19,239
update this cell because this cell was

1450
01:06:17,108 --> 01:06:20,920
supposed to be what was here but I've

1451
01:06:19,239 --> 01:06:24,699
already overwritten what was there with

1452
01:06:20,920 --> 01:06:26,079
what was here right so in addition to

1453
01:06:24,699 --> 01:06:28,808
making sure that I do this properly

1454
01:06:26,079 --> 01:06:30,548
these two things are not equivalent when

1455
01:06:28,809 --> 01:06:34,480
the source and destination are the same

1456
01:06:30,548 --> 01:06:37,389
right if I'm going to do this I had

1457
01:06:34,480 --> 01:06:40,929
better make sure that I pick the order

1458
01:06:37,389 --> 01:06:42,578
of I of iterating over I that doesn't

1459
01:06:40,929 --> 01:06:44,828
overwrite values that I haven't

1460
01:06:42,579 --> 01:06:47,519
previously moved that I haven't already

1461
01:06:44,829 --> 01:06:50,200
moved to their new locations right and

1462
01:06:47,519 --> 01:06:52,778
you can see which order that would work

1463
01:06:50,199 --> 01:06:54,788
in quite cleanly if it was a positive

1464
01:06:52,778 --> 01:06:56,619
move so I'm going negative right in

1465
01:06:54,789 --> 01:06:59,289
terms of you know things are going this

1466
01:06:56,619 --> 01:07:00,849
way I would want to walk the voxel this

1467
01:06:59,289 --> 01:07:03,010
way meaning I would want to set this

1468
01:07:00,849 --> 01:07:05,260
value first because it's grabbing from

1469
01:07:03,010 --> 01:07:06,549
like here then I took this value because

1470
01:07:05,260 --> 01:07:08,380
it's grabbing from here that's at this

1471
01:07:06,548 --> 01:07:11,048
time is grabbed from here right I always

1472
01:07:08,380 --> 01:07:14,619
want to walk in the same direction as

1473
01:07:11,048 --> 01:07:16,449
the movement of the center was not the

1474
01:07:14,619 --> 01:07:17,588
direction I'm moving the voxel because

1475
01:07:16,449 --> 01:07:19,699
they're actually moving the voxel if I

1476
01:07:17,588 --> 01:07:24,019
walked in that direction this way

1477
01:07:19,699 --> 01:07:26,149
then as I as I update these values this

1478
01:07:24,019 --> 01:07:27,920
value needs to be grabbing from here

1479
01:07:26,150 --> 01:07:30,289
there is nothing there nothing there

1480
01:07:27,920 --> 01:07:33,680
this value grabs from here this already

1481
01:07:30,289 --> 01:07:36,588
got overwritten right with whatever the

1482
01:07:33,679 --> 01:07:38,629
blank value was or whatever right so it

1483
01:07:36,588 --> 01:07:43,548
doesn't really work to go in the

1484
01:07:38,630 --> 01:07:45,619
opposite way alright so when we look at

1485
01:07:43,548 --> 01:07:48,469
the D voxel like I said we need to we

1486
01:07:45,619 --> 01:07:51,230
need to go in the I direction that

1487
01:07:48,469 --> 01:07:53,779
corresponds to that so when I do my for

1488
01:07:51,230 --> 01:07:56,449
I loop for the D Vassell why in this

1489
01:07:53,780 --> 01:07:59,000
case what I need to do here is I need to

1490
01:07:56,449 --> 01:08:02,210
make sure that I'm if it's less than

1491
01:07:59,000 --> 01:08:05,659
zero then I'm going backwards right so I

1492
01:08:02,210 --> 01:08:07,548
would say that the Y value for my voxel

1493
01:08:05,659 --> 01:08:21,019
in this case I just gonna start at the

1494
01:08:07,548 --> 01:08:22,939
maximum Y but Y value like so whereas if

1495
01:08:21,020 --> 01:08:25,069
I was going in the other direction I

1496
01:08:22,939 --> 01:08:31,129
would need to make sure that I would

1497
01:08:25,069 --> 01:08:38,569
start at zero and end at the light large

1498
01:08:31,130 --> 01:08:41,600
voxel like so so in this case you can

1499
01:08:38,569 --> 01:08:43,190
kind of see where we're at right these

1500
01:08:41,600 --> 01:08:45,140
are the copies that we need to do and

1501
01:08:43,189 --> 01:08:47,719
the actual copy we need to do is pretty

1502
01:08:45,140 --> 01:08:49,640
straightforward this D voxel value here

1503
01:08:47,719 --> 01:08:50,899
tells us how far we're copying so

1504
01:08:49,640 --> 01:08:51,619
actually when we look at what's going to

1505
01:08:50,899 --> 01:08:53,389
go on here

1506
01:08:51,619 --> 01:08:55,399
if you look at what we're going to write

1507
01:08:53,390 --> 01:08:57,350
in this particular piece of code if

1508
01:08:55,399 --> 01:08:59,689
we're going to copy two of the voxel

1509
01:08:57,350 --> 01:09:01,989
squares we've kind of got that here

1510
01:08:59,689 --> 01:09:01,988
right

1511
01:09:08,819 --> 01:09:14,889
here is what we would need to do for our

1512
01:09:11,020 --> 01:09:20,469
copy if we're copying in why and I guess

1513
01:09:14,889 --> 01:09:22,719
we can fill in this and its entirety and

1514
01:09:20,469 --> 01:09:39,509
since we're only copying and why I can

1515
01:09:22,719 --> 01:09:42,100
put in the other ones here as well okay

1516
01:09:39,509 --> 01:09:43,509
so if we do this where we're going to

1517
01:09:42,100 --> 01:09:45,429
run over all of them and then do a why

1518
01:09:43,509 --> 01:09:47,319
copy on each one and the why copy is

1519
01:09:45,429 --> 01:09:48,850
discriminated I can also put that in

1520
01:09:47,319 --> 01:09:50,020
here for now like I said we're going to

1521
01:09:48,850 --> 01:09:51,489
kind of have to make this a little more

1522
01:09:50,020 --> 01:10:01,090
flexible eventually but for right now we

1523
01:09:51,488 --> 01:10:04,988
can do it this way all right so doing

1524
01:10:01,090 --> 01:10:06,699
this copy in here we then need to figure

1525
01:10:04,988 --> 01:10:08,738
out okay so what does the copy update

1526
01:10:06,698 --> 01:10:10,988
actually look like and so if we're going

1527
01:10:08,738 --> 01:10:15,939
to assign this particular cell this is z

1528
01:10:10,988 --> 01:10:18,178
Y X so here we know we have to use this

1529
01:10:15,939 --> 01:10:20,169
form of the equation where we're doing

1530
01:10:18,179 --> 01:10:21,880
well I guess it doesn't really matter

1531
01:10:20,170 --> 01:10:23,170
which direction we choose to do it in it

1532
01:10:21,880 --> 01:10:25,118
will just depend on how we write this

1533
01:10:23,170 --> 01:10:27,310
particular code but if we're going to

1534
01:10:25,118 --> 01:10:30,368
update the voxel that we're stepping on

1535
01:10:27,310 --> 01:10:32,380
in order right then the one that we're

1536
01:10:30,368 --> 01:10:34,868
going to grab it from is the opposite

1537
01:10:32,380 --> 01:10:37,868
direction of whatever the the d box will

1538
01:10:34,868 --> 01:10:40,899
value was right so this is just going to

1539
01:10:37,868 --> 01:10:43,089
be d voxel Y right it's Y minus D box of

1540
01:10:40,899 --> 01:10:44,618
Y and what you can see about this

1541
01:10:43,090 --> 01:10:48,989
routine is that we can't actually

1542
01:10:44,618 --> 01:10:51,819
execute this routine if this value

1543
01:10:48,988 --> 01:10:55,059
excuse me would actually be out of

1544
01:10:51,819 --> 01:10:57,309
bounds right if it's out of bounds

1545
01:10:55,060 --> 01:11:02,560
there's nothing we can you know we we

1546
01:10:57,310 --> 01:11:05,260
can't really fetch outside our voxel

1547
01:11:02,560 --> 01:11:07,119
that would that would be very bad so

1548
01:11:05,260 --> 01:11:08,590
what we need to do instead here is we

1549
01:11:07,118 --> 01:11:11,019
need to think about well what could we

1550
01:11:08,590 --> 01:11:14,560
actually iterate over in this case that

1551
01:11:11,020 --> 01:11:17,050
would would actually work and what we

1552
01:11:14,560 --> 01:11:18,889
know is that if we're fetching Y minus

1553
01:11:17,050 --> 01:11:23,469
the d voxel Y we know he

1554
01:11:18,889 --> 01:11:26,210
that the Y value is less than zero right

1555
01:11:23,469 --> 01:11:28,789
so we know that this is going to be

1556
01:11:26,210 --> 01:11:33,670
effectively a plus right we're sort of

1557
01:11:28,789 --> 01:11:36,079
fetching whatever the you know that far

1558
01:11:33,670 --> 01:11:39,889
forward right so it'd be the plus two

1559
01:11:36,079 --> 01:11:42,439
case the bottom one there right that

1560
01:11:39,889 --> 01:11:44,569
means that this value has to be pre

1561
01:11:42,439 --> 01:11:48,129
offset so that it's got to be at least

1562
01:11:44,569 --> 01:11:51,319
as low as d voxel Y right

1563
01:11:48,130 --> 01:11:53,989
so in this case right would not be able

1564
01:11:51,319 --> 01:11:55,549
to fetch even if the value was zero

1565
01:11:53,988 --> 01:11:58,819
right

1566
01:11:55,550 --> 01:12:01,400
and if the value was you know one then

1567
01:11:58,819 --> 01:12:03,368
we want to take into account that we

1568
01:12:01,399 --> 01:12:06,679
have to be one less than that right and

1569
01:12:03,368 --> 01:12:09,309
so this routine here would do the voxel

1570
01:12:06,679 --> 01:12:11,810
copy exactly as we need it to do but

1571
01:12:09,310 --> 01:12:14,119
what do we do with the remaining cells

1572
01:12:11,810 --> 01:12:24,050
right and so what we would like to do

1573
01:12:14,118 --> 01:12:27,969
there because we also need some way of

1574
01:12:24,050 --> 01:12:27,969
like just clearing whatever's in there

1575
01:12:28,448 --> 01:12:34,399
right so what we'd like to do here is

1576
01:12:31,658 --> 01:12:36,198
instead of this we'd like to also be

1577
01:12:34,399 --> 01:12:38,509
able to talk about the area we're not

1578
01:12:36,198 --> 01:12:41,329
actually going to touch we know we will

1579
01:12:38,510 --> 01:12:44,929
touch basically everything from light

1580
01:12:41,329 --> 01:12:46,899
light large voxel dim minus 1 minus d

1581
01:12:44,929 --> 01:12:48,920
box of Y all the way down to zero but

1582
01:12:46,899 --> 01:12:50,388
depending on how large this is that

1583
01:12:48,920 --> 01:12:52,760
could be like none of the voxel if it's

1584
01:12:50,389 --> 01:12:54,829
large enough right so what we want to do

1585
01:12:52,760 --> 01:12:57,020
here is basically say look let's clear

1586
01:12:54,829 --> 01:13:06,559
everything else we know this is the

1587
01:12:57,020 --> 01:13:08,900
first value we'll touch right so let's

1588
01:13:06,560 --> 01:13:11,119
say we know what that is we know what

1589
01:13:08,899 --> 01:13:12,559
our max y bound is so then when we do

1590
01:13:11,118 --> 01:13:16,819
the copy here we'll just say all right

1591
01:13:12,560 --> 01:13:19,969
let's go from that max Y value which we

1592
01:13:16,819 --> 01:13:22,789
know we actually will use we'll go from

1593
01:13:19,969 --> 01:13:25,090
that plus one and we'll clear everything

1594
01:13:22,789 --> 01:13:25,090
else

1595
01:13:26,588 --> 01:13:32,408
so that would clear it out okay so now

1596
01:13:30,038 --> 01:13:34,599
we have the negative version of the

1597
01:13:32,408 --> 01:13:36,658
routine that we think would probably

1598
01:13:34,599 --> 01:13:38,949
work correctly I mean who knows right

1599
01:13:36,658 --> 01:13:41,108
and then we're going to need the same

1600
01:13:38,948 --> 01:13:43,299
thing to happen but in the other

1601
01:13:41,109 --> 01:13:45,399
direction so we're gonna have to have

1602
01:13:43,300 --> 01:13:47,699
one where we're grabbing from things

1603
01:13:45,399 --> 01:13:50,260
that are behind us as we go right and

1604
01:13:47,698 --> 01:13:52,868
for that to work we're going to need to

1605
01:13:50,260 --> 01:13:55,030
do something where we do the opposite

1606
01:13:52,868 --> 01:13:56,348
we're going to need to start with D

1607
01:13:55,029 --> 01:14:00,338
voxel Y because we know we're going to

1608
01:13:56,349 --> 01:14:04,029
subtract that much of it away right we

1609
01:14:00,338 --> 01:14:05,318
know it's positive now right and so in

1610
01:14:04,029 --> 01:14:07,478
this routine we're going to start at

1611
01:14:05,319 --> 01:14:12,309
zero and we're gonna go until we hit min

1612
01:14:07,479 --> 01:14:13,300
Y right and we're gonna start here at

1613
01:14:12,309 --> 01:14:17,800
zero

1614
01:14:13,300 --> 01:14:21,279
I'm sorry might start at min Y right

1615
01:14:17,800 --> 01:14:22,779
we're gonna go until we hit the end of

1616
01:14:21,279 --> 01:14:24,698
the voxel and we're going to go upward

1617
01:14:22,779 --> 01:14:26,800
subtracting away from backwards so here

1618
01:14:24,698 --> 01:14:30,608
we know we can just go until we hit min

1619
01:14:26,800 --> 01:14:37,389
Y like that and do our plus plus there

1620
01:14:30,609 --> 01:14:38,889
right okay so that's a sketch of the

1621
01:14:37,389 --> 01:14:40,599
routine it's probably a little bit buggy

1622
01:14:38,889 --> 01:14:41,588
because I it's hard to type it's hard to

1623
01:14:40,599 --> 01:14:45,159
do stuff like that while you're talking

1624
01:14:41,588 --> 01:14:47,679
if you ask me but that's what the copy

1625
01:14:45,158 --> 01:14:49,299
is supposed to do we'll see what it

1626
01:14:47,679 --> 01:14:51,849
actually does although that was a pretty

1627
01:14:49,300 --> 01:14:53,859
bizarre situation looks like that

1628
01:14:51,849 --> 01:14:57,369
routine is a little bit bus to Ferris

1629
01:14:53,859 --> 01:15:00,338
you can see but anyway that's that's the

1630
01:14:57,368 --> 01:15:02,708
basic idea so let's go ahead and step to

1631
01:15:00,338 --> 01:15:03,818
this and debug this right so the first

1632
01:15:02,708 --> 01:15:06,128
thing we want to do is make sure that

1633
01:15:03,819 --> 01:15:07,839
our x and z values are dealt with

1634
01:15:06,128 --> 01:15:09,998
appropriately and I think they probably

1635
01:15:07,838 --> 01:15:13,179
are right because all we're doing here

1636
01:15:09,998 --> 01:15:15,938
is going from 0 to light large voxel dim

1637
01:15:13,179 --> 01:15:17,979
in both cases and so presumably that

1638
01:15:15,939 --> 01:15:20,338
part of the routine couldn't really be

1639
01:15:17,979 --> 01:15:23,050
all that bad right

1640
01:15:20,338 --> 01:15:25,689
furthermore if we assumed that this was

1641
01:15:23,050 --> 01:15:27,128
going to do just another Y loop in here

1642
01:15:25,689 --> 01:15:28,809
I would think we wouldn't have any

1643
01:15:27,128 --> 01:15:30,189
problems so let's assume that that's

1644
01:15:28,809 --> 01:15:31,329
okay for now we could take a little

1645
01:15:30,189 --> 01:15:32,639
closer look at it if we think there's

1646
01:15:31,328 --> 01:15:36,279
something weird happening there later so

1647
01:15:32,639 --> 01:15:39,770
then we just have two cases here right

1648
01:15:36,279 --> 01:15:40,909
and we we

1649
01:15:39,770 --> 01:15:42,890
sort of talk through what each of them

1650
01:15:40,909 --> 01:15:44,420
is going to be let's make sure we kind

1651
01:15:42,890 --> 01:15:47,750
of know what's going on so let's say

1652
01:15:44,420 --> 01:15:52,310
that D voxel Y in this case is negative

1653
01:15:47,750 --> 01:15:53,750
2 right ah yeah so this this is the

1654
01:15:52,310 --> 01:15:56,720
problem right here you can already see

1655
01:15:53,750 --> 01:15:58,430
it so let's suppose this was negative 2

1656
01:15:56,720 --> 01:16:00,890
that means that we're going to be

1657
01:15:58,430 --> 01:16:04,190
fetching so for every Y we're going to

1658
01:16:00,890 --> 01:16:07,490
take and we're going to do 2 ahead of it

1659
01:16:04,189 --> 01:16:09,139
right the problem is if I subtract a

1660
01:16:07,489 --> 01:16:11,210
negative value I'm actually going

1661
01:16:09,140 --> 01:16:13,520
forward what we really wanted was this

1662
01:16:11,210 --> 01:16:18,920
we just messed up the sign there right

1663
01:16:13,520 --> 01:16:22,580
um is that a puss hello puss do you want

1664
01:16:18,920 --> 01:16:25,819
to say hi say hi it's up its up here

1665
01:16:22,579 --> 01:16:30,430
baby baby it's up here do you see you

1666
01:16:25,819 --> 01:16:30,429
see that's the that's the folks at home

1667
01:16:30,750 --> 01:16:37,779
the puss don't understand the camera

1668
01:16:34,479 --> 01:16:39,879
very well she doesn't I'm sorry she

1669
01:16:37,779 --> 01:16:42,550
doesn't acknowledge any of you out there

1670
01:16:39,880 --> 01:16:43,900
but she doesn't know about the camera

1671
01:16:42,550 --> 01:16:46,180
she doesn't know what that means

1672
01:16:43,899 --> 01:16:47,769
she just think it's a little thing that

1673
01:16:46,180 --> 01:16:50,730
sits on top of the monitor and does

1674
01:16:47,770 --> 01:16:53,710
nothing you know they don't have webcams

1675
01:16:50,729 --> 01:16:58,299
in catland they don't do

1676
01:16:53,710 --> 01:17:00,699
videoconferencing so I can't really

1677
01:16:58,300 --> 01:17:02,159
explain it to the push she don't she

1678
01:17:00,699 --> 01:17:06,550
don't like it she doesn't understand

1679
01:17:02,159 --> 01:17:07,750
anyway point being that's the way that

1680
01:17:06,550 --> 01:17:11,170
should have been written that was just a

1681
01:17:07,750 --> 01:17:13,420
sign error there I think the rest of

1682
01:17:11,170 --> 01:17:15,010
this looks okay let's just take another

1683
01:17:13,420 --> 01:17:18,788
look at it real quick here to see if we

1684
01:17:15,010 --> 01:17:21,880
still have an issue with that

1685
01:17:18,788 --> 01:17:23,380
all right so waiting is sort of we

1686
01:17:21,880 --> 01:17:25,239
probably want to compile in release mode

1687
01:17:23,380 --> 01:17:28,269
so that the lighting update is fast

1688
01:17:25,238 --> 01:17:31,178
enough for us to actually use properly

1689
01:17:28,269 --> 01:17:34,659
but let's go ahead and see here as we

1690
01:17:31,179 --> 01:17:36,429
move along there is this jumping into

1691
01:17:34,658 --> 01:17:39,578
the next thing you can see it did not

1692
01:17:36,429 --> 01:17:43,059
apparently copy correctly it doesn't

1693
01:17:39,578 --> 01:17:45,279
look like it did yeah it doesn't look

1694
01:17:43,059 --> 01:17:46,269
like added updating correctly at all so

1695
01:17:45,279 --> 01:17:49,658
we're still doing something kind of

1696
01:17:46,269 --> 01:17:51,280
weird they're not sure what exactly but

1697
01:17:49,658 --> 01:17:54,069
we'll take a look I also I'm going to go

1698
01:17:51,279 --> 01:17:56,288
ahead and switch - OH - here for a

1699
01:17:54,069 --> 01:17:58,920
minute just because the speed at which

1700
01:17:56,288 --> 01:18:00,759
it updates now the lighting is blending

1701
01:17:58,920 --> 01:18:06,578
that makes it a little bit hard to see

1702
01:18:00,760 --> 01:18:09,550
what's going on there so you can see

1703
01:18:06,578 --> 01:18:11,618
it's still disappearing there and so I

1704
01:18:09,550 --> 01:18:15,630
don't think our copy is is working the

1705
01:18:11,618 --> 01:18:19,598
way that that I was trying to get it to

1706
01:18:15,630 --> 01:18:24,480
but that's the basic sketch of the

1707
01:18:19,599 --> 01:18:24,480
routine so yeah

1708
01:18:30,329 --> 01:18:32,390
you

1709
01:18:32,460 --> 01:18:34,520
you

1710
01:18:35,050 --> 01:18:42,579
trying to make sure I thought all that

1711
01:18:36,760 --> 01:18:43,630
through properly and that I don't

1712
01:18:42,579 --> 01:18:45,069
actually want to go like the other

1713
01:18:43,630 --> 01:18:47,289
direction or something like that but I'm

1714
01:18:45,069 --> 01:18:50,439
pretty sure that's the way it's actually

1715
01:18:47,289 --> 01:18:51,850
supposed to be if you go plus to

1716
01:18:50,439 --> 01:18:53,679
everything in the voxel doesn't move

1717
01:18:51,850 --> 01:18:55,539
negative - that's definitely true I

1718
01:18:53,680 --> 01:18:58,840
don't see any way that that could be

1719
01:18:55,539 --> 01:19:05,220
false so I believe this update step is

1720
01:18:58,840 --> 01:19:05,220
the correct way to do things like in why

1721
01:19:06,579 --> 01:19:10,539
you know what no this is wrong again so

1722
01:19:08,800 --> 01:19:15,250
I did it when I type this in I did

1723
01:19:10,539 --> 01:19:17,590
exactly the wrong way again this is the

1724
01:19:15,250 --> 01:19:19,630
same way as the Delta if you write it in

1725
01:19:17,590 --> 01:19:25,029
this format right I mean I drew that out

1726
01:19:19,630 --> 01:19:26,829
right here right so that's that's just

1727
01:19:25,029 --> 01:19:28,750
stupid again

1728
01:19:26,829 --> 01:19:30,720
because again this is if this is

1729
01:19:28,750 --> 01:19:34,300
negative then this becomes negative

1730
01:19:30,720 --> 01:19:36,520
right so you are fetching from someone

1731
01:19:34,300 --> 01:19:38,350
who's lower down than you were and

1732
01:19:36,520 --> 01:19:39,460
that's what you want in this case where

1733
01:19:38,350 --> 01:19:41,200
it's positive you're fetching for

1734
01:19:39,460 --> 01:19:43,119
someone ahead of you and that's what you

1735
01:19:41,199 --> 01:19:46,840
wanted so this is the correct Upstate

1736
01:19:43,119 --> 01:19:49,300
step in both cases and so I'm not sure

1737
01:19:46,840 --> 01:19:53,369
what was up with that other than me

1738
01:19:49,300 --> 01:19:53,369
being stupid all right one more time

1739
01:20:01,420 --> 01:20:06,359
so that looks unhappy there with that

1740
01:20:03,729 --> 01:20:06,360
fetch step

1741
01:20:11,939 --> 01:20:14,000
you

1742
01:20:14,050 --> 01:20:18,310
and again that looks a little bit

1743
01:20:16,720 --> 01:20:20,650
suspicious just looking at that code

1744
01:20:18,310 --> 01:20:34,480
again so assuming that Y was positive

1745
01:20:20,649 --> 01:20:36,519
right if that's trying to fetch below us

1746
01:20:34,479 --> 01:20:38,169
it should look like that so I'm not sure

1747
01:20:36,520 --> 01:20:52,180
why I flipped that one that was probably

1748
01:20:38,170 --> 01:20:55,930
me just being overzealous all right so

1749
01:20:52,180 --> 01:20:57,909
it looks like we sort of made a slight

1750
01:20:55,930 --> 01:21:00,460
improvement there which is to say that

1751
01:20:57,909 --> 01:21:02,619
our forward copy is still borked

1752
01:21:00,460 --> 01:21:04,449
but our downward copy was stable you can

1753
01:21:02,619 --> 01:21:14,849
see how the lighting did not black out

1754
01:21:04,449 --> 01:21:14,849
there right so our upward copy is

1755
01:21:23,369 --> 01:21:25,430
you

1756
01:21:27,229 --> 01:21:32,699
it's forked there hold on a second so if

1757
01:21:31,170 --> 01:21:34,440
we take a look at these right here you

1758
01:21:32,699 --> 01:21:36,359
can I just want to verify that I'm not

1759
01:21:34,439 --> 01:21:37,739
imagining things cuz that sure looked

1760
01:21:36,359 --> 01:21:40,979
like the copy was working in one

1761
01:21:37,739 --> 01:21:44,429
direction right so if you take a look at

1762
01:21:40,979 --> 01:21:47,099
what happens here you can see that the

1763
01:21:44,430 --> 01:21:51,329
top copy is working properly I believe

1764
01:21:47,100 --> 01:21:53,190
right and if I was to comment this out

1765
01:21:51,329 --> 01:21:55,199
so that we weren't doing any work we

1766
01:21:53,189 --> 01:22:02,009
should get a clear in both directions if

1767
01:21:55,199 --> 01:22:05,329
I'm not mistaken right I don't know why

1768
01:22:02,010 --> 01:22:05,329
I'm restarting

1769
01:22:06,489 --> 01:22:08,550
you

1770
01:22:11,639 --> 01:22:13,699
you

1771
01:22:14,059 --> 01:22:18,329
well so maybe not I mean we do get a

1772
01:22:16,590 --> 01:22:21,860
discontinuing its light jump but it

1773
01:22:18,328 --> 01:22:21,859
wasn't going to black

1774
01:22:23,819 --> 01:22:27,319
you

1775
01:22:25,260 --> 01:22:27,320
you

1776
01:22:27,369 --> 01:22:29,430
you

1777
01:22:36,119 --> 01:22:40,739
so if I turn this one back on

1778
01:22:42,868 --> 01:22:44,929
you

1779
01:22:46,500 --> 01:22:48,560
you

1780
01:22:51,970 --> 01:22:55,500
you

1781
01:22:53,729 --> 01:22:57,509
yeah but it still looks like that's a

1782
01:22:55,500 --> 01:22:59,100
much more continuous so I don't know I

1783
01:22:57,510 --> 01:23:00,840
think this is this one actually is

1784
01:22:59,100 --> 01:23:03,210
working although it was less of a

1785
01:23:00,840 --> 01:23:06,600
pronouncement so let's focus on this one

1786
01:23:03,210 --> 01:23:08,219
now so yeah again looking at this one if

1787
01:23:06,600 --> 01:23:10,620
we take a look at what the minimum Y

1788
01:23:08,219 --> 01:23:13,500
value would be when we're talking about

1789
01:23:10,619 --> 01:23:17,130
how it's going to be copied again we're

1790
01:23:13,500 --> 01:23:20,630
trying to figure out how to copy this it

1791
01:23:17,130 --> 01:23:20,630
should be from people

1792
01:23:22,529 --> 01:23:24,590
you

1793
01:23:30,810 --> 01:23:35,770
it should really be I feel like this is

1794
01:23:33,310 --> 01:23:38,890
just this is yeah it's just a little -

1795
01:23:35,770 --> 01:23:40,210
head spinning this is the kind of code

1796
01:23:38,890 --> 01:23:41,619
that I always hate writing it I feel

1797
01:23:40,210 --> 01:23:43,090
like you just need you need something

1798
01:23:41,619 --> 01:23:44,559
that just shows you how this copy is

1799
01:23:43,090 --> 01:23:47,650
working in a little diagram which would

1800
01:23:44,560 --> 01:23:49,360
take you know not very long to write but

1801
01:23:47,649 --> 01:23:52,089
it's just the third sort of thing that

1802
01:23:49,359 --> 01:23:53,589
we don't ever have tools for but anyway

1803
01:23:52,090 --> 01:23:58,390
if you take a look at the way this is

1804
01:23:53,590 --> 01:24:01,300
working right we're saying D voxel Y is

1805
01:23:58,390 --> 01:24:05,050
less than zero that means the user moved

1806
01:24:01,300 --> 01:24:06,789
in the negative direction right which

1807
01:24:05,050 --> 01:24:10,810
means that the voxel needs to move in

1808
01:24:06,789 --> 01:24:15,550
the positive direction so everybody who

1809
01:24:10,810 --> 01:24:17,160
is in a particular location if the voxel

1810
01:24:15,550 --> 01:24:21,070
is moving in a positive direction

1811
01:24:17,159 --> 01:24:23,439
someone who is at I goes to I plus one

1812
01:24:21,069 --> 01:24:25,659
which means that I plus one goes to I

1813
01:24:23,439 --> 01:24:28,389
minus one which in this case would look

1814
01:24:25,659 --> 01:24:32,050
like this right so that is a correct

1815
01:24:28,390 --> 01:24:34,600
interpretation of that statement if the

1816
01:24:32,050 --> 01:24:37,989
D voxel was positive then people need to

1817
01:24:34,600 --> 01:24:44,289
move so people who were at why are going

1818
01:24:37,989 --> 01:24:48,039
to move to y -1 which means that people

1819
01:24:44,289 --> 01:24:51,729
at Y get their value from Y plus 1 right

1820
01:24:48,039 --> 01:24:55,149
so this actually did seem like how it

1821
01:24:51,729 --> 01:24:57,969
should have been written here and I'm

1822
01:24:55,149 --> 01:25:00,609
saying and when I look at how this value

1823
01:24:57,970 --> 01:25:07,780
is supposed to go that suggests to me

1824
01:25:00,609 --> 01:25:11,199
that actually yeah these this is pulling

1825
01:25:07,779 --> 01:25:12,639
from a negative which means you

1826
01:25:11,199 --> 01:25:15,039
presumably need to go backwards where

1827
01:25:12,640 --> 01:25:18,960
this is playing for a positive so that

1828
01:25:15,039 --> 01:25:18,960
means presumably you have to go

1829
01:25:27,579 --> 01:25:31,470
for word order which so this just see

1830
01:25:31,710 --> 01:25:36,100
yeah so this this just seems like this

1831
01:25:34,869 --> 01:25:37,869
was maybe written slightly different

1832
01:25:36,100 --> 01:25:41,620
slightly wrong so if you take a look at

1833
01:25:37,869 --> 01:25:43,359
how this works the Y value here we can

1834
01:25:41,619 --> 01:25:45,609
start at zero right because you're

1835
01:25:43,359 --> 01:25:48,939
always adding something to it and we

1836
01:25:45,609 --> 01:25:51,039
just need to stop before we get to what

1837
01:25:48,939 --> 01:25:53,559
that maximum value would have been right

1838
01:25:51,039 --> 01:25:54,939
so max Y is still the correct thing it's

1839
01:25:53,560 --> 01:25:57,190
just the way we wrote these routines

1840
01:25:54,939 --> 01:25:59,229
yeah so max Y is still the correct thing

1841
01:25:57,189 --> 01:26:05,250
to compute and it's still going to be

1842
01:25:59,229 --> 01:26:10,239
you know light large voxel Tim minus 1

1843
01:26:05,250 --> 01:26:14,680
minus D voxel Y now right so we were

1844
01:26:10,239 --> 01:26:22,989
almost there but not quite and if we

1845
01:26:14,680 --> 01:26:25,590
look at how this is going if you look at

1846
01:26:22,989 --> 01:26:29,260
how this would be fetched right it's

1847
01:26:25,590 --> 01:26:31,900
actually since this is going from that

1848
01:26:29,260 --> 01:26:35,409
max Y this this here is fetching

1849
01:26:31,899 --> 01:26:38,289
downward as you go so this is not the

1850
01:26:35,409 --> 01:26:41,079
correct loop right that we had like the

1851
01:26:38,289 --> 01:26:43,720
two loops inverted this one needs to

1852
01:26:41,079 --> 01:26:46,449
always go from here and it's going to go

1853
01:26:43,720 --> 01:26:49,619
down to a min Y right that is the lowest

1854
01:26:46,449 --> 01:26:53,189
that could go and and that in this case

1855
01:26:49,619 --> 01:26:56,829
is this right

1856
01:26:53,189 --> 01:26:59,319
so yeah just kind of have things spun

1857
01:26:56,829 --> 01:27:01,809
around there which was not surprising

1858
01:26:59,319 --> 01:27:04,269
for this kind of code and that means

1859
01:27:01,810 --> 01:27:06,400
that this here is going to have you know

1860
01:27:04,270 --> 01:27:09,460
these two loops are going to be in the

1861
01:27:06,399 --> 01:27:17,349
opposite place right that's where we

1862
01:27:09,460 --> 01:27:19,840
have them kind of backwards so yeah I

1863
01:27:17,350 --> 01:27:22,240
think that's okay and then here we're

1864
01:27:19,840 --> 01:27:23,619
just going to take that initial part and

1865
01:27:22,239 --> 01:27:27,760
clear it because these are the ones that

1866
01:27:23,619 --> 01:27:30,760
you know we we don't actually know where

1867
01:27:27,760 --> 01:27:33,760
they would go because there's there's

1868
01:27:30,760 --> 01:27:35,739
nothing for them to fetch from right and

1869
01:27:33,760 --> 01:27:39,220
this one here we were just saying all

1870
01:27:35,739 --> 01:27:39,539
right we have to take that sort of end

1871
01:27:39,220 --> 01:27:42,900
of

1872
01:27:39,539 --> 01:27:45,840
arrey and clear that out but I believe

1873
01:27:42,899 --> 01:27:48,779
that's correct and my only concern is do

1874
01:27:45,840 --> 01:27:50,460
I have the two movements in the right

1875
01:27:48,779 --> 01:27:56,029
place or are they if it actually the

1876
01:27:50,460 --> 01:28:01,529
opposite for D box'll that we'll see

1877
01:27:56,029 --> 01:28:03,750
there we go so now that copy is correct

1878
01:28:01,529 --> 01:28:05,609
again kind of it's a little bit

1879
01:28:03,750 --> 01:28:08,220
difficult to work it all out in your

1880
01:28:05,609 --> 01:28:09,659
head like that but when you write out

1881
01:28:08,220 --> 01:28:11,070
their team but you know again you take

1882
01:28:09,659 --> 01:28:13,649
it one step at a time and you can work

1883
01:28:11,069 --> 01:28:15,960
it out so now the voxel is being copied

1884
01:28:13,649 --> 01:28:20,849
around stabili so we get sort of a

1885
01:28:15,960 --> 01:28:22,170
stable result as we would expect and now

1886
01:28:20,850 --> 01:28:24,300
we just need some way of dealing with

1887
01:28:22,170 --> 01:28:28,409
that on all three axes right because you

1888
01:28:24,300 --> 01:28:29,880
can see as I'm moving around in here we

1889
01:28:28,409 --> 01:28:33,899
sort of have a problem where it's

1890
01:28:29,880 --> 01:28:35,850
unclear exactly it's unclear how we

1891
01:28:33,899 --> 01:28:38,489
would struck this routine to do it for

1892
01:28:35,850 --> 01:28:40,430
all three but we could start by making

1893
01:28:38,489 --> 01:28:43,019
this a little bit more generic right

1894
01:28:40,430 --> 01:28:46,200
let's try to rewrite this so that it's

1895
01:28:43,020 --> 01:28:49,260
something that can be done like more

1896
01:28:46,199 --> 01:28:53,039
cleanly right that doesn't require maybe

1897
01:28:49,260 --> 01:28:55,380
so much iffing around so the first thing

1898
01:28:53,039 --> 01:28:59,550
I could say is well what if I introduce

1899
01:28:55,380 --> 01:29:02,130
a DX or dy value right so what if I said

1900
01:28:59,550 --> 01:29:04,699
like okay we've got a D Y value the dy

1901
01:29:02,130 --> 01:29:08,909
value in this case is negative one right

1902
01:29:04,699 --> 01:29:14,519
and so I just said Y plus equals dy like

1903
01:29:08,909 --> 01:29:17,220
that and so in this case the D Y would

1904
01:29:14,520 --> 01:29:18,960
be 1 right so I could have that and that

1905
01:29:17,220 --> 01:29:21,539
would be the same loop right I have it

1906
01:29:18,960 --> 01:29:23,819
change anything but now I've got like

1907
01:29:21,539 --> 01:29:27,329
part of my loop looking the same as it

1908
01:29:23,819 --> 01:29:29,279
used to look right and if I run the code

1909
01:29:27,329 --> 01:29:32,930
it I should get the same results right

1910
01:29:29,279 --> 01:29:35,460
you know nothing nothing changed there

1911
01:29:32,930 --> 01:29:39,450
and so the next thing you can do is say

1912
01:29:35,460 --> 01:29:41,430
well alright so I have a max Y and like

1913
01:29:39,449 --> 01:29:43,889
a min Y I can start talking about these

1914
01:29:41,430 --> 01:29:45,570
like a little bit differently for first

1915
01:29:43,890 --> 01:29:47,280
so for starters instead of greater than

1916
01:29:45,569 --> 01:29:49,559
or equal to min Y and saying well that's

1917
01:29:47,279 --> 01:29:52,380
the lowest I could go I could just say

1918
01:29:49,560 --> 01:29:53,159
well suppose I just made it like B not

1919
01:29:52,380 --> 01:29:56,010
equal to

1920
01:29:53,158 --> 01:29:58,109
right so if I wanted you to stop at some

1921
01:29:56,010 --> 01:30:00,900
point I could say well whatever negative

1922
01:29:58,109 --> 01:30:04,349
voxel y is that's the lowest I can go

1923
01:30:00,899 --> 01:30:08,039
and I want you to stop after you process

1924
01:30:04,350 --> 01:30:10,289
that one right so if I just added dy to

1925
01:30:08,039 --> 01:30:12,329
it right like if I just said well

1926
01:30:10,289 --> 01:30:15,060
whatever the lowest value actually is

1927
01:30:12,329 --> 01:30:16,979
that I want if I then go one more step

1928
01:30:15,060 --> 01:30:20,429
after that that's the one that I should

1929
01:30:16,979 --> 01:30:22,109
stop on so I could call this stop Y and

1930
01:30:20,429 --> 01:30:25,408
just say well let's change it to a not

1931
01:30:22,109 --> 01:30:27,089
equal to right and then that would be

1932
01:30:25,408 --> 01:30:29,129
the same thing I could do here I could

1933
01:30:27,090 --> 01:30:30,840
just say well that to stop Y value when

1934
01:30:29,130 --> 01:30:32,639
you get to it don't use it and this one

1935
01:30:30,840 --> 01:30:37,650
didn't process it anyway so I won't have

1936
01:30:32,639 --> 01:30:40,889
to adjust the value right so now if I

1937
01:30:37,649 --> 01:30:45,750
compile that in theory I again have not

1938
01:30:40,889 --> 01:30:47,340
changed the actual rules right but I do

1939
01:30:45,750 --> 01:30:49,979
have a problem I can't test it yet

1940
01:30:47,340 --> 01:30:53,310
because these routines were using those

1941
01:30:49,979 --> 01:30:56,759
values but what I could do is say well

1942
01:30:53,310 --> 01:30:59,039
actually if we look at what these are

1943
01:30:56,760 --> 01:31:01,050
doing they're really just gonna do the

1944
01:30:59,039 --> 01:31:03,389
rest of the routine anyway they're just

1945
01:31:01,050 --> 01:31:05,789
gonna skip the they're just going to do

1946
01:31:03,389 --> 01:31:08,819
the last part that this thing failed to

1947
01:31:05,789 --> 01:31:12,479
do so maybe if I just initialized my

1948
01:31:08,819 --> 01:31:16,439
while loop with a Y value that persists

1949
01:31:12,479 --> 01:31:18,629
and got rid of it you know like here or

1950
01:31:16,439 --> 01:31:21,269
something right what I could do is say

1951
01:31:18,630 --> 01:31:24,810
well what if I just continue on down the

1952
01:31:21,270 --> 01:31:27,480
road and maybe introduce some other

1953
01:31:24,810 --> 01:31:30,510
value that's like a final Y value so

1954
01:31:27,479 --> 01:31:36,779
effectively these become Y ellipse I say

1955
01:31:30,510 --> 01:31:39,150
you know that so while we have not

1956
01:31:36,779 --> 01:31:42,658
gotten to the min Y value or rather I

1957
01:31:39,149 --> 01:31:45,089
should say to stop Y value right you

1958
01:31:42,658 --> 01:31:50,039
know keep going in this case while I

1959
01:31:45,090 --> 01:31:52,880
have not gotten to the final Y value you

1960
01:31:50,039 --> 01:31:52,880
know keep going

1961
01:31:53,199 --> 01:31:58,569
and then I would just need to know well

1962
01:31:54,850 --> 01:32:01,300
what is the final y-value right and in

1963
01:31:58,569 --> 01:32:03,909
this case the final y-value is just

1964
01:32:01,300 --> 01:32:06,579
gonna be like dy right it's like I want

1965
01:32:03,909 --> 01:32:09,489
to stop at zero right but I want to

1966
01:32:06,579 --> 01:32:13,029
actually process zero so I want like one

1967
01:32:09,489 --> 01:32:15,639
step past zero right it's the one I

1968
01:32:13,029 --> 01:32:17,439
would stop at and then presumably I

1969
01:32:15,640 --> 01:32:19,300
could do the same thing here so like

1970
01:32:17,439 --> 01:32:21,669
I've got a stop by value I can

1971
01:32:19,300 --> 01:32:24,010
initialize Y outside the loop to

1972
01:32:21,670 --> 01:32:26,529
whatever it should be I could do a while

1973
01:32:24,010 --> 01:32:31,030
loop it says you know go until you think

1974
01:32:26,529 --> 01:32:35,920
you should stop updating the value like

1975
01:32:31,029 --> 01:32:37,329
this the entire way right and then here

1976
01:32:35,920 --> 01:32:39,279
I just need to make sure that it just

1977
01:32:37,329 --> 01:32:52,720
keeps going until the final value and

1978
01:32:39,279 --> 01:32:56,469
the final value is just this and that

1979
01:32:52,720 --> 01:33:01,199
seems you know somewhat sane right I

1980
01:32:56,470 --> 01:33:01,199
think and let's see if that works at all

1981
01:33:01,859 --> 01:33:12,259
no it doesn't forgot one of my

1982
01:33:08,800 --> 01:33:14,320
increments sorry folks

1983
01:33:12,260 --> 01:33:14,320
you

1984
01:33:19,920 --> 01:33:23,639
and so that looks pretty reasonable it

1985
01:33:22,319 --> 01:33:26,518
looks like it's working just like it was

1986
01:33:23,639 --> 01:33:28,170
working before right but now what I've

1987
01:33:26,519 --> 01:33:33,420
done is I've made it so that I compute

1988
01:33:28,170 --> 01:33:37,670
these values separately right these

1989
01:33:33,420 --> 01:33:37,670
values could actually be computed like

1990
01:33:38,389 --> 01:33:47,849
this and then if I take a look at what

1991
01:33:44,939 --> 01:33:50,368
I'm left over with for my loops right if

1992
01:33:47,849 --> 01:33:53,309
if I look at what they look like they

1993
01:33:50,368 --> 01:33:55,259
look the same right so what I've done is

1994
01:33:53,309 --> 01:33:58,498
I've just kind of mechanically gone

1995
01:33:55,260 --> 01:34:00,119
through and changed out the values

1996
01:33:58,498 --> 01:34:02,788
inside the loops till they could be

1997
01:34:00,118 --> 01:34:04,948
converged and now my loops are exactly

1998
01:34:02,788 --> 01:34:09,569
the same so I only need one copy of the

1999
01:34:04,948 --> 01:34:12,629
loops right so if I then take these

2000
01:34:09,569 --> 01:34:14,219
outside of here right and I just say all

2001
01:34:12,630 --> 01:34:19,050
right these are the values that I need

2002
01:34:14,219 --> 01:34:21,719
to actually compute this you know set of

2003
01:34:19,050 --> 01:34:26,219
values do you I stopped why why final

2004
01:34:21,719 --> 01:34:32,748
why right then I can just compute those

2005
01:34:26,219 --> 01:34:36,618
outside and have one set of loops inside

2006
01:34:32,748 --> 01:34:42,149
makes sense this is kind of nice because

2007
01:34:36,618 --> 01:34:46,049
this means that I don't have to actually

2008
01:34:42,149 --> 01:34:49,649
have any conditionals in the control

2009
01:34:46,050 --> 01:34:51,869
flow of the thing the entirety of the

2010
01:34:49,649 --> 01:35:00,598
way that this loop works can be entirely

2011
01:34:51,868 --> 01:35:01,589
self-contained right all right so it's a

2012
01:35:00,599 --> 01:35:05,489
little more complicated in this

2013
01:35:01,590 --> 01:35:07,498
unfortunately once we actually start to

2014
01:35:05,488 --> 01:35:10,649
compose these two but that's just kind

2015
01:35:07,498 --> 01:35:14,118
of the basics right if I now compile

2016
01:35:10,649 --> 01:35:19,049
this I should get something that works

2017
01:35:14,118 --> 01:35:21,289
theory oops did I just one of these

2018
01:35:19,050 --> 01:35:23,350
there we go

2019
01:35:21,289 --> 01:35:23,350
you

2020
01:35:25,689 --> 01:35:28,868
there we go

2021
01:35:30,409 --> 01:35:35,599
oops snap in there

2022
01:35:39,960 --> 01:36:02,480
Oh obviously this must be set anew each

2023
01:35:59,279 --> 01:36:02,479
time through

2024
01:36:03,239 --> 01:36:07,630
so again this is really just making sort

2025
01:36:05,829 --> 01:36:10,750
of a parametric for a loop like a four

2026
01:36:07,630 --> 01:36:13,960
loop that we can control more explicitly

2027
01:36:10,750 --> 01:36:15,369
as we go and so that's just sort of

2028
01:36:13,960 --> 01:36:16,779
collapsing it down into something that

2029
01:36:15,369 --> 01:36:18,609
can be driven entirely with like a

2030
01:36:16,779 --> 01:36:26,829
little tiny packet of information which

2031
01:36:18,609 --> 01:36:29,019
is this if we look at these a little bit

2032
01:36:26,829 --> 01:36:30,279
more closely you know we cannot we could

2033
01:36:29,020 --> 01:36:31,950
probably see that there's actually some

2034
01:36:30,279 --> 01:36:34,149
other patterns here that we could

2035
01:36:31,949 --> 01:36:36,699
extract and even make this production a

2036
01:36:34,149 --> 01:36:38,559
little bit simpler but what I want to

2037
01:36:36,699 --> 01:36:40,960
get to is obviously this works the same

2038
01:36:38,560 --> 01:36:44,530
no matter how many dimensions we

2039
01:36:40,960 --> 01:36:48,250
actually have right so we could actually

2040
01:36:44,529 --> 01:36:50,289
do this the same on XY and Z and the

2041
01:36:48,250 --> 01:36:52,149
only really problem that we have here is

2042
01:36:50,289 --> 01:36:55,269
that when we're going to clear these

2043
01:36:52,149 --> 01:36:56,319
things they're sort of inclusive rather

2044
01:36:55,270 --> 01:36:59,290
than exclusive

2045
01:36:56,319 --> 01:37:02,679
right so if we actually just want to

2046
01:36:59,289 --> 01:37:33,789
talk about the copy that's pretty easy

2047
01:37:02,680 --> 01:37:37,030
it would look something like this right

2048
01:37:33,789 --> 01:37:38,949
and so these loops could all just work

2049
01:37:37,029 --> 01:37:40,869
and that would be all we would really

2050
01:37:38,949 --> 01:37:43,090
need this code would be identical for

2051
01:37:40,869 --> 01:37:46,210
all three axes right so we could do it

2052
01:37:43,090 --> 01:37:48,819
the same on all three of them and then

2053
01:37:46,210 --> 01:37:51,550
we would be done the problem that we

2054
01:37:48,819 --> 01:37:54,880
would have over here is with this part

2055
01:37:51,550 --> 01:37:57,159
right so the problem that we'd have here

2056
01:37:54,880 --> 01:38:00,100
is in order to actually do the clearing

2057
01:37:57,159 --> 01:38:02,829
we can do the clearing on all of the X's

2058
01:38:00,100 --> 01:38:05,590
here but then we kind of have to go out

2059
01:38:02,829 --> 01:38:08,019
on the Y's over and over again now and

2060
01:38:05,590 --> 01:38:09,310
it's a little ugly but you know what

2061
01:38:08,020 --> 01:38:11,470
it's not the end of the world so we

2062
01:38:09,310 --> 01:38:14,100
could just do it what that would look

2063
01:38:11,470 --> 01:38:14,100
like is this

2064
01:38:20,390 --> 01:38:24,780
so here we iterate over the X's we have

2065
01:38:22,770 --> 01:38:30,210
then we iterate over the X's we don't

2066
01:38:24,779 --> 01:38:32,219
have clearing each one right then as we

2067
01:38:30,210 --> 01:38:36,920
sort of fall out of the while loop we

2068
01:38:32,220 --> 01:38:36,920
then need to loop over the Y's like this

2069
01:38:41,029 --> 01:38:59,009
and say for each of those we need to

2070
01:38:44,850 --> 01:39:00,720
clear all the X's right so we're only

2071
01:38:59,010 --> 01:39:01,800
doing a portion of the lives but for

2072
01:39:00,720 --> 01:39:05,070
each one of those need to clear the

2073
01:39:01,800 --> 01:39:18,630
entire X row right and then the same

2074
01:39:05,069 --> 01:39:44,099
thing is true for the Z's but it gets

2075
01:39:18,630 --> 01:39:47,430
even worse right hopefully that makes

2076
01:39:44,100 --> 01:39:50,570
some sense to everybody so this would

2077
01:39:47,430 --> 01:39:53,490
then have to be copied right three times

2078
01:39:50,569 --> 01:39:56,369
one for each of the axes so you'd have

2079
01:39:53,489 --> 01:40:02,599
to basically be like okay you know here

2080
01:39:56,369 --> 01:40:02,599
comes the X version right

2081
01:40:07,408 --> 01:40:20,339
which just looks like this and then

2082
01:40:18,389 --> 01:40:23,609
finally we'd have the Y version I'll

2083
01:40:20,340 --> 01:40:38,819
show you the Z version which looks like

2084
01:40:23,609 --> 01:40:42,769
this and in theory then that would do

2085
01:40:38,819 --> 01:40:42,769
all the copies right

2086
01:40:56,270 --> 01:41:02,800
right in theory assuming I didn't screw

2087
01:40:59,090 --> 01:41:02,800
something up which I probably did right

2088
01:41:04,750 --> 01:41:09,729
don't ask me what it's going on there

2089
01:41:20,699 --> 01:41:27,159
and now you know maybe if we if we get

2090
01:41:24,760 --> 01:41:28,539
that debugged or whatever you know maybe

2091
01:41:27,159 --> 01:41:30,519
there's some bugs in it still but that's

2092
01:41:28,539 --> 01:41:34,479
that's what we'd have to do to clear to

2093
01:41:30,520 --> 01:41:36,310
process everything in the system

2094
01:41:34,479 --> 01:41:39,219
properly let's see if that has everybody

2095
01:41:36,310 --> 01:41:41,880
in a correct place before we say what

2096
01:41:39,220 --> 01:41:41,880
I'm going to say next

2097
01:41:46,420 --> 01:41:52,119
yeah so the only thing we really have to

2098
01:41:49,510 --> 01:41:59,050
change is this right here still needs to

2099
01:41:52,119 --> 01:42:03,640
have the voxel offset for each of these

2100
01:41:59,050 --> 01:42:07,170
things right but other than that this

2101
01:42:03,640 --> 01:42:07,170
may be it right

2102
01:42:13,699 --> 01:42:21,619
so there's the copy version right and

2103
01:42:17,000 --> 01:42:26,810
you know it seems okay and it seems to

2104
01:42:21,619 --> 01:42:28,519
sort of be working I do see some bugs

2105
01:42:26,810 --> 01:42:31,480
sort of any outskirts but that may be

2106
01:42:28,520 --> 01:42:35,270
because our voxel isn't large enough

2107
01:42:31,479 --> 01:42:37,639
when the lighting Center moves too far

2108
01:42:35,270 --> 01:42:39,140
I'm not sure but you can sort of see

2109
01:42:37,640 --> 01:42:43,460
that now we've got that stable copy

2110
01:42:39,140 --> 01:42:54,500
happening everywhere okay um but if I

2111
01:42:43,460 --> 01:42:58,420
isolate this piece of code what you can

2112
01:42:54,500 --> 01:43:01,550
see is that it's really rather absurd

2113
01:42:58,420 --> 01:43:04,609
right so if I take this and I put this

2114
01:43:01,550 --> 01:43:06,800
out here what we can actually do is we

2115
01:43:04,609 --> 01:43:08,630
could take this piece of code and we can

2116
01:43:06,800 --> 01:43:10,489
make it just a routine and we can say

2117
01:43:08,630 --> 01:43:14,750
it's block copy box so and all we really

2118
01:43:10,489 --> 01:43:18,409
need to know is like what's the cell

2119
01:43:14,750 --> 01:43:21,229
thing you wanted copied and what's the D

2120
01:43:18,409 --> 01:43:25,369
box'll right and then we could just call

2121
01:43:21,229 --> 01:43:28,819
this block copy voxel function and then

2122
01:43:25,369 --> 01:43:32,329
I'll do the copy and everyone's happy to

2123
01:43:28,819 --> 01:43:35,000
a certain extent anyway right but it's

2124
01:43:32,329 --> 01:43:37,430
really just I mean that's a lot of crap

2125
01:43:35,000 --> 01:43:41,600
right I mean look how many loops there

2126
01:43:37,430 --> 01:43:43,670
are and all this stuff we might want to

2127
01:43:41,600 --> 01:43:46,160
reconsider right and we might want to

2128
01:43:43,670 --> 01:43:49,550
say well is that really all that more

2129
01:43:46,159 --> 01:43:53,149
efficient anyway than just doing a clip

2130
01:43:49,550 --> 01:43:56,150
right so for example if we instead

2131
01:43:53,149 --> 01:43:59,029
decided to just do well all right you

2132
01:43:56,149 --> 01:44:00,489
know let's do a four I loop through the

2133
01:43:59,029 --> 01:44:04,159
entire voxel

2134
01:44:00,489 --> 01:44:08,510
which we would have up here we already

2135
01:44:04,159 --> 01:44:14,960
have that in the test caster wherever

2136
01:44:08,510 --> 01:44:16,730
that guy got off to here yeah so we

2137
01:44:14,960 --> 01:44:19,840
could choose instead to just say well

2138
01:44:16,729 --> 01:44:19,839
all right look

2139
01:44:23,060 --> 01:44:27,930
we could just loop over the entire voxel

2140
01:44:25,560 --> 01:44:31,500
and say we know where we actually are

2141
01:44:27,930 --> 01:44:36,869
right our current location is you know

2142
01:44:31,500 --> 01:44:39,420
Vox I XYZ we could say we know that the

2143
01:44:36,869 --> 01:44:42,720
person moved like a particular amount

2144
01:44:39,420 --> 01:44:47,699
and we just want to move by like that

2145
01:44:42,720 --> 01:44:50,970
same amount right so this is the you

2146
01:44:47,699 --> 01:44:57,960
know this is the value that we actually

2147
01:44:50,970 --> 01:44:59,730
want right and so in here we would just

2148
01:44:57,960 --> 01:45:02,310
say well the place that we want to get

2149
01:44:59,729 --> 01:45:06,000
this from is just the offset right of

2150
01:45:02,310 --> 01:45:08,789
these so it's it's really just like okay

2151
01:45:06,000 --> 01:45:11,130
I just want to do this right I just want

2152
01:45:08,789 --> 01:45:14,519
to do this operation I want to just do

2153
01:45:11,130 --> 01:45:16,940
this on the whole voxel but I need two

2154
01:45:14,520 --> 01:45:19,470
things I need to know which direction

2155
01:45:16,939 --> 01:45:21,779
I'm going in the voxel because I can't

2156
01:45:19,470 --> 01:45:22,289
do like the overwrite or whatever it is

2157
01:45:21,779 --> 01:45:25,170
right

2158
01:45:22,289 --> 01:45:27,269
so I do have that problem but

2159
01:45:25,170 --> 01:45:30,329
furthermore I need to clamp clip this so

2160
01:45:27,270 --> 01:45:40,680
I need to go like if I you know I will

2161
01:45:30,329 --> 01:45:53,939
zero like if you know inbounds do this

2162
01:45:40,680 --> 01:45:55,950
otherwise clear right and so this right

2163
01:45:53,939 --> 01:45:58,199
here would need to be tested to see if

2164
01:45:55,949 --> 01:46:00,210
this this was going to be inside or

2165
01:45:58,199 --> 01:46:02,250
outside of the voxel but then this

2166
01:46:00,210 --> 01:46:05,010
routine right looks a lot more easy to

2167
01:46:02,250 --> 01:46:07,199
manage and like I said the problem is

2168
01:46:05,010 --> 01:46:09,630
this test we could write pretty easily

2169
01:46:07,199 --> 01:46:12,059
it's just whether or not after you do

2170
01:46:09,630 --> 01:46:14,159
the addition you're still inside the the

2171
01:46:12,060 --> 01:46:17,280
bounds this presumably would want to be

2172
01:46:14,159 --> 01:46:18,359
like this for that although I guess you

2173
01:46:17,279 --> 01:46:21,079
wouldn't have to actually now think

2174
01:46:18,359 --> 01:46:24,449
about it you could just do this and then

2175
01:46:21,079 --> 01:46:27,079
do one test right so you could literally

2176
01:46:24,449 --> 01:46:27,079
just do

2177
01:46:31,050 --> 01:46:50,440
this so I think that should be

2178
01:46:45,010 --> 01:46:52,270
sufficient and those are like sampling

2179
01:46:50,439 --> 01:47:13,899
coordinates anyway right so you would

2180
01:46:52,270 --> 01:47:16,570
basically say right and again the reason

2181
01:47:13,899 --> 01:47:19,239
that we don't do this is because it's

2182
01:47:16,569 --> 01:47:31,090
unclear exactly how we would get this to

2183
01:47:19,239 --> 01:47:33,340
not overwrite itself so the only problem

2184
01:47:31,090 --> 01:47:35,500
and the only reason we can't write it

2185
01:47:33,340 --> 01:47:39,190
this succinctly which would be really

2186
01:47:35,500 --> 01:47:40,779
nice right if we could and I mean we

2187
01:47:39,189 --> 01:47:42,250
could even do it a little bit more

2188
01:47:40,779 --> 01:47:52,329
ridiculous than that right you could

2189
01:47:42,250 --> 01:47:56,890
imagine this it called again light box

2190
01:47:52,329 --> 01:47:58,479
will sell bad we could even write it

2191
01:47:56,890 --> 01:48:01,140
even more succinctly right you could

2192
01:47:58,479 --> 01:48:01,139
just do this

2193
01:48:23,020 --> 01:48:30,290
right so it would be very tempting to

2194
01:48:27,829 --> 01:48:33,710
write it in this way because it's a lot

2195
01:48:30,289 --> 01:48:37,119
easier to sort of read and there's just

2196
01:48:33,710 --> 01:48:37,119
a lot less going on there

2197
01:48:40,279 --> 01:48:45,139
what is the what is it complaining about

2198
01:48:46,760 --> 01:48:51,260
sorry I missed the error message there

2199
01:48:54,250 --> 01:48:56,310
you

2200
01:48:58,359 --> 01:49:07,880
and that is um it's just not clear to me

2201
01:49:06,350 --> 01:49:09,470
how we prevent it from over writing

2202
01:49:07,880 --> 01:49:11,300
itself because we just fundamentally

2203
01:49:09,470 --> 01:49:15,890
don't know which order these two have to

2204
01:49:11,300 --> 01:49:18,020
go in so if we were keeping two voxels

2205
01:49:15,890 --> 01:49:20,119
and we were just updating like a ping

2206
01:49:18,020 --> 01:49:22,430
pong buffer we could just run this and

2207
01:49:20,119 --> 01:49:24,229
this would be pulling from the second

2208
01:49:22,430 --> 01:49:27,800
one right so we wouldn't have to worry

2209
01:49:24,229 --> 01:49:29,929
about the override but in this case I

2210
01:49:27,800 --> 01:49:35,590
just don't know how we would actually

2211
01:49:29,930 --> 01:49:38,329
make that happen right I don't see I

2212
01:49:35,590 --> 01:49:39,350
don't see any way of doing that so this

2213
01:49:38,329 --> 01:49:43,970
you know because this would have to be

2214
01:49:39,350 --> 01:49:46,940
like that right and that just doesn't

2215
01:49:43,970 --> 01:49:49,970
seem straightforward because in order to

2216
01:49:46,939 --> 01:49:51,289
start doing that at the very least you

2217
01:49:49,970 --> 01:49:52,970
would have to parametrize these four

2218
01:49:51,289 --> 01:49:54,920
loops to go in either you know which

2219
01:49:52,970 --> 01:49:57,619
either the forwards or backwards

2220
01:49:54,920 --> 01:50:02,800
direction so it seems like we're kind of

2221
01:49:57,619 --> 01:50:05,000
stuck with this crap here you know

2222
01:50:02,800 --> 01:50:07,940
because I don't see what the like

2223
01:50:05,000 --> 01:50:12,140
obvious other answer is also I'm not

2224
01:50:07,939 --> 01:50:13,699
sure why that was there um so let's

2225
01:50:12,140 --> 01:50:15,260
leave it that for now because that's

2226
01:50:13,699 --> 01:50:17,569
really all I want to get done today and

2227
01:50:15,260 --> 01:50:19,760
tomorrow we can focus on what else we

2228
01:50:17,569 --> 01:50:23,989
want to do with it but for now let's

2229
01:50:19,760 --> 01:50:26,680
focus on that and let's let's go ahead

2230
01:50:23,989 --> 01:50:26,679
to a brief Q&amp;A

2231
01:50:33,770 --> 01:50:35,830
you

2232
01:50:40,430 --> 01:50:42,490
you

2233
01:50:54,770 --> 01:50:56,830
you

2234
01:51:09,619 --> 01:51:15,420
and while we're waiting for any

2235
01:51:12,750 --> 01:51:16,800
questions I am going to go in and put

2236
01:51:15,420 --> 01:51:20,640
this back to linear because pretty much

2237
01:51:16,800 --> 01:51:22,350
now we're I think keeping the voxel

2238
01:51:20,640 --> 01:51:23,579
stable so from now on we just kind of

2239
01:51:22,350 --> 01:51:26,730
need to figure out how we're gonna do

2240
01:51:23,579 --> 01:51:27,989
our blending and then I guess we have

2241
01:51:26,729 --> 01:51:29,579
one more thing we got to write which is

2242
01:51:27,989 --> 01:51:32,359
the voxel sampler for the light

2243
01:51:29,579 --> 01:51:32,359
transport code

2244
01:51:39,689 --> 01:51:47,299
but otherwise otherwise we're getting

2245
01:51:45,149 --> 01:51:47,299
there

2246
01:51:49,880 --> 01:51:51,940
you

2247
01:51:55,939 --> 01:51:58,000
you

2248
01:52:00,380 --> 01:52:02,440
you

2249
01:52:09,560 --> 01:52:11,620
you

2250
01:52:20,310 --> 01:52:22,370
you

2251
01:52:24,279 --> 01:52:26,340
you

2252
01:52:27,359 --> 01:52:29,420
you

2253
01:52:50,429 --> 01:52:53,300
since there's no questions I guess we

2254
01:52:52,658 --> 01:52:54,739
can pretty

2255
01:52:53,300 --> 01:52:57,739
wrap it up I am curious how did the

2256
01:52:54,739 --> 01:52:59,300
microphone sound today all things

2257
01:52:57,739 --> 01:53:03,979
considered we're gonna be trying two

2258
01:52:59,300 --> 01:53:06,079
different microphone setups I'm

2259
01:53:03,979 --> 01:53:07,519
currently waiting for a little like

2260
01:53:06,079 --> 01:53:12,470
stand thing and I'm going to try a

2261
01:53:07,520 --> 01:53:14,180
different microphone but I tried putting

2262
01:53:12,470 --> 01:53:17,310
a noise suppressor on the current one

2263
01:53:14,180 --> 01:53:20,180
which I thought might help

2264
01:53:17,310 --> 01:53:20,180
keep it under control

2265
01:53:30,140 --> 01:53:32,200
you

2266
01:53:37,738 --> 01:53:39,799
you

2267
01:53:48,479 --> 01:53:54,779
yeah Romans so what happened is the

2268
01:53:52,649 --> 01:53:58,558
internet was out here I don't know if

2269
01:53:54,779 --> 01:54:02,460
you saw my Twitter it was not super

2270
01:53:58,559 --> 01:54:05,010
clear exactly what happened either but

2271
01:54:02,460 --> 01:54:06,630
it got restored like it was out all day

2272
01:54:05,010 --> 01:54:09,510
and didn't get restored till like 4:00

2273
01:54:06,630 --> 01:54:13,949
o'clock so we streamed at 5:00 because

2274
01:54:09,510 --> 01:54:15,869
that was as soon as I could I don't know

2275
01:54:13,948 --> 01:54:17,669
if it'll be okay for tomorrow stream the

2276
01:54:15,868 --> 01:54:21,439
message we received about the internet

2277
01:54:17,670 --> 01:54:24,690
was pretty tenuous it was like we will

2278
01:54:21,439 --> 01:54:30,348
run the internet on backup batteries for

2279
01:54:24,689 --> 01:54:30,348
now and like I have no so I don't know

2280
01:54:31,279 --> 01:54:35,429
III don't know what's going on hopefully

2281
01:54:34,020 --> 01:54:38,190
we'll be able to stream tomorrow at the

2282
01:54:35,429 --> 01:54:40,469
correct time but that's why like I

2283
01:54:38,189 --> 01:54:41,759
wanted to stream today at noon and we

2284
01:54:40,469 --> 01:54:43,770
kept waiting for the Internet to come

2285
01:54:41,760 --> 01:54:45,179
back and it kept not coming back so we

2286
01:54:43,770 --> 01:54:46,889
don't know what you know I don't know

2287
01:54:45,179 --> 01:54:49,399
what to do about that but that was the

2288
01:54:46,889 --> 01:54:49,400
situation

2289
01:54:52,578 --> 01:54:56,289
you

2290
01:54:54,229 --> 01:54:56,289
you

2291
01:54:57,229 --> 01:55:01,379
really when the episodes just finished

2292
01:54:59,369 --> 01:55:02,970
10 reviewing where you are at now what

2293
01:55:01,380 --> 01:55:04,319
are some libraries that are added so I

2294
01:55:02,970 --> 01:55:06,659
can study before I get to the episode

2295
01:55:04,319 --> 01:55:08,639
they are added I open jail or something

2296
01:55:06,659 --> 01:55:11,309
along those lines the only thing we use

2297
01:55:08,640 --> 01:55:13,650
is OpenGL is the graphics driver

2298
01:55:11,310 --> 01:55:16,620
interface that we use we don't use any

2299
01:55:13,649 --> 01:55:18,269
libraries other than obviously the C

2300
01:55:16,619 --> 01:55:21,239
runtime library is still being called

2301
01:55:18,270 --> 01:55:26,370
for sine and cosine but we'll probably

2302
01:55:21,239 --> 01:55:29,189
be replacing those as well so we'll be

2303
01:55:26,369 --> 01:55:32,130
library lists we also don't use any

2304
01:55:29,189 --> 01:55:33,809
libraries for OpenGL either we actually

2305
01:55:32,130 --> 01:55:35,069
just call get proc address and link

2306
01:55:33,810 --> 01:55:38,010
directly to the driver functions

2307
01:55:35,069 --> 01:55:40,549
ourselves we don't use a library for

2308
01:55:38,010 --> 01:55:42,610
loading up in jail

2309
01:55:40,550 --> 01:55:42,610
you

2310
01:55:43,189 --> 01:55:45,250
you

2311
01:55:50,069 --> 01:55:52,130
you

2312
01:56:21,630 --> 01:56:28,019
Krita give a guest completion percentage

2313
01:56:23,649 --> 01:56:28,018
on the final lighting solution

2314
01:56:33,760 --> 01:56:40,730
so I guess what I would say is I can't

2315
01:56:37,578 --> 01:56:42,618
really give a percentage estimate what I

2316
01:56:40,729 --> 01:56:44,658
could tell you is that as far as I can

2317
01:56:42,618 --> 01:56:46,069
tell we're almost done with everything

2318
01:56:44,658 --> 01:56:48,289
except figuring out how we're gonna

2319
01:56:46,069 --> 01:56:50,289
blend these values together like I said

2320
01:56:48,289 --> 01:56:52,630
we hacked in one today just get started

2321
01:56:50,289 --> 01:56:54,738
and we'll leave that one in there

2322
01:56:52,630 --> 01:56:58,069
tomorrow I think we'll probably do is

2323
01:56:54,738 --> 01:57:00,828
enable full bounce lighting because now

2324
01:56:58,069 --> 01:57:02,899
we just can so tomorrow what we'll do is

2325
01:57:00,828 --> 01:57:04,578
we'll right the voxel sampler and tried

2326
01:57:02,899 --> 01:57:07,250
to bug it and then at that point we can

2327
01:57:04,578 --> 01:57:08,960
just turn on full lighting now will give

2328
01:57:07,250 --> 01:57:13,099
us full lighting solutions with full

2329
01:57:08,960 --> 01:57:15,039
reconstruction what we won't know is how

2330
01:57:13,099 --> 01:57:18,710
the heck we blend those reconstructions

2331
01:57:15,039 --> 01:57:21,198
as you can see it looks really really

2332
01:57:18,710 --> 01:57:22,250
good I mean this part right here looks

2333
01:57:21,198 --> 01:57:25,729
awesome I don't know if you've been

2334
01:57:22,250 --> 01:57:27,948
watching it for the case of direct

2335
01:57:25,729 --> 01:57:30,738
lighting interpolated on incredibly

2336
01:57:27,948 --> 01:57:33,948
sparse voxel it really looks kind of

2337
01:57:30,738 --> 01:57:36,439
like a real flashlight almost as if you

2338
01:57:33,948 --> 01:57:38,868
were simulating the flashlight per pixel

2339
01:57:36,439 --> 01:57:43,819
right I mean that just looks so good

2340
01:57:38,868 --> 01:57:45,558
right there I don't know um so that part

2341
01:57:43,819 --> 01:57:47,448
seems great and so I think we'll be able

2342
01:57:45,559 --> 01:57:50,360
to just go with that the question is

2343
01:57:47,448 --> 01:57:53,419
just how are we going to plan these

2344
01:57:50,359 --> 01:57:54,920
values and I do not know the answer to

2345
01:57:53,420 --> 01:57:59,239
that question and so I think what we're

2346
01:57:54,920 --> 01:58:00,859
gonna do is probably like I think we'll

2347
01:57:59,238 --> 01:58:02,419
be pretty much doing full lighting

2348
01:58:00,859 --> 01:58:04,308
solutions maybe by the end of the morrow

2349
01:58:02,420 --> 01:58:09,230
if not by the end of next weekend and

2350
01:58:04,309 --> 01:58:11,179
that will be like great but then we'll

2351
01:58:09,229 --> 01:58:14,000
be like what do we do at these blends

2352
01:58:11,179 --> 01:58:16,039
you know and so that's really the only

2353
01:58:14,000 --> 01:58:18,738
thing I think that's the thing that will

2354
01:58:16,039 --> 01:58:21,039
that is gonna be not final about it is

2355
01:58:18,738 --> 01:58:24,039
we don't know how to do those blends

2356
01:58:21,039 --> 01:58:24,039
right

2357
01:58:24,099 --> 01:58:26,159
you

2358
01:58:31,260 --> 01:58:33,320
you

2359
01:58:33,658 --> 01:58:36,779
you

2360
01:58:35,369 --> 01:58:38,010
I'm exploring spatial grits for

2361
01:58:36,779 --> 01:58:39,000
collision detection and I'm finding it

2362
01:58:38,010 --> 01:58:47,039
challenging to reason about how to

2363
01:58:39,000 --> 01:58:49,500
handle collision responses I guess I'm

2364
01:58:47,039 --> 01:58:51,659
not sure what spatial grids have to do

2365
01:58:49,500 --> 01:58:55,260
with collision responses can you be more

2366
01:58:51,659 --> 01:58:58,050
specific because normally spatial trees

2367
01:58:55,260 --> 01:59:00,810
are used for determining which elements

2368
01:58:58,050 --> 01:59:02,520
need to be checked for collision but

2369
01:59:00,810 --> 01:59:07,140
once they service that role they are

2370
01:59:02,520 --> 01:59:11,810
typically irrelevant afterward right so

2371
01:59:07,140 --> 01:59:11,810
what do you mean by collision response

2372
01:59:18,100 --> 01:59:20,160
you

2373
01:59:26,029 --> 01:59:28,090
you

2374
01:59:31,899 --> 01:59:33,960
you

2375
01:59:53,029 --> 01:59:55,090
you

2376
02:00:05,550 --> 02:00:07,610
you

2377
02:00:15,409 --> 02:00:17,470
you

2378
02:00:29,579 --> 02:00:37,460
so synchronizer man no you don't really

2379
02:00:32,130 --> 02:00:40,500
put colliders inside the grid per se

2380
02:00:37,460 --> 02:00:43,710
usually all you do is you just have a

2381
02:00:40,500 --> 02:00:46,500
grid and each cell of the grid just

2382
02:00:43,710 --> 02:00:47,939
stores like a pointer or something you

2383
02:00:46,500 --> 02:00:50,760
know there's a lot of ways you could

2384
02:00:47,939 --> 02:00:53,429
choose to store the actual data but each

2385
02:00:50,760 --> 02:00:57,360
grid just stores a list of all the

2386
02:00:53,430 --> 02:00:59,969
entities that overlap that grid or a

2387
02:00:57,359 --> 02:01:02,189
list of all the entities that are whose

2388
02:00:59,969 --> 02:01:04,770
Center is inside that grid usually is

2389
02:01:02,189 --> 02:01:06,269
the more normal way to do it and then

2390
02:01:04,770 --> 02:01:09,120
when you go to do collision you just

2391
02:01:06,270 --> 02:01:11,130
take how big is my object versus how big

2392
02:01:09,119 --> 02:01:13,529
is the maximum sized object that might

2393
02:01:11,130 --> 02:01:15,719
exist in the world search all the grid

2394
02:01:13,529 --> 02:01:19,079
squares in that radius and do the M

2395
02:01:15,719 --> 02:01:21,029
squared collisions against them right so

2396
02:01:19,079 --> 02:01:22,859
the grid is usually just there to like

2397
02:01:21,029 --> 02:01:25,579
break the N squared problem down to a

2398
02:01:22,859 --> 02:01:25,579
very small end

2399
02:01:29,569 --> 02:01:31,630
you

2400
02:01:31,639 --> 02:01:34,880
what episode do you talk about the

2401
02:01:33,260 --> 02:01:36,320
blending problem you're facing not sure

2402
02:01:34,880 --> 02:01:38,630
what you mean like color blending or

2403
02:01:36,319 --> 02:01:40,819
some numerical blending um what I mean

2404
02:01:38,630 --> 02:01:42,380
by that is that right now we have a

2405
02:01:40,819 --> 02:01:45,289
definition of a light-filled that we

2406
02:01:42,380 --> 02:01:47,779
know we can reconstruct exactly right

2407
02:01:45,289 --> 02:01:53,000
and the definition of that light-filled

2408
02:01:47,779 --> 02:01:54,800
is a light source intensity value with

2409
02:01:53,000 --> 02:01:57,139
pretty much any fall-off function that

2410
02:01:54,800 --> 02:02:02,560
can be roughly linearly interpolated and

2411
02:01:57,139 --> 02:02:04,940
a normal right and if we fill those in

2412
02:02:02,560 --> 02:02:08,690
the way that we're filling them in here

2413
02:02:04,939 --> 02:02:10,039
we get perfect reconstruction of you

2414
02:02:08,689 --> 02:02:15,649
know in risk square fall-off light

2415
02:02:10,039 --> 02:02:17,929
sources as you saw however while it's

2416
02:02:15,649 --> 02:02:19,819
trivial to fill that in if you just have

2417
02:02:17,929 --> 02:02:21,618
a light source and you go to each grid

2418
02:02:19,819 --> 02:02:24,049
square and say how far away is this grid

2419
02:02:21,618 --> 02:02:25,368
square so that's the intensity and watch

2420
02:02:24,050 --> 02:02:27,260
the direction and that's the normal

2421
02:02:25,368 --> 02:02:28,729
right that's trivial and that was what

2422
02:02:27,260 --> 02:02:30,619
our spirit test does that produces

2423
02:02:28,729 --> 02:02:32,419
exactly the right things in every square

2424
02:02:30,618 --> 02:02:34,339
so then even though we do this really

2425
02:02:32,420 --> 02:02:35,810
sparse version of it and then you do the

2426
02:02:34,340 --> 02:02:38,179
reconstruction you get exactly the right

2427
02:02:35,810 --> 02:02:41,179
thing that's the light field that's what

2428
02:02:38,179 --> 02:02:44,270
I talking about what's a light field the

2429
02:02:41,179 --> 02:02:45,889
blending problem is once we step up we

2430
02:02:44,270 --> 02:02:47,929
already sorted in that situation here

2431
02:02:45,889 --> 02:02:50,150
just in this test right here but once we

2432
02:02:47,929 --> 02:02:54,139
step up in a second to doing full light

2433
02:02:50,149 --> 02:02:56,689
transport what's the light field we

2434
02:02:54,139 --> 02:02:59,210
don't know all we're gonna have is

2435
02:02:56,689 --> 02:03:02,689
lighting samples that say in this

2436
02:02:59,210 --> 02:03:05,000
direction this is how much intensity of

2437
02:03:02,689 --> 02:03:09,669
light I saw that's what the light that's

2438
02:03:05,000 --> 02:03:14,840
what the light samplers gonna tell us

2439
02:03:09,670 --> 02:03:19,340
how do we produce a light field value

2440
02:03:14,840 --> 02:03:21,860
from that and the problem that we're

2441
02:03:19,340 --> 02:03:23,510
gonna have is if we just wanted to

2442
02:03:21,859 --> 02:03:25,039
reconstruct one light field that's

2443
02:03:23,510 --> 02:03:26,719
trivial we just blend all the values

2444
02:03:25,039 --> 02:03:29,029
together using linear blending and we're

2445
02:03:26,719 --> 02:03:31,539
done right maybe we weight the values

2446
02:03:29,029 --> 02:03:33,369
based on how bright the light source is

2447
02:03:31,539 --> 02:03:35,560
right

2448
02:03:33,369 --> 02:03:38,170
but the problem we're gonna have is that

2449
02:03:35,560 --> 02:03:40,840
we have the ability to do four light

2450
02:03:38,170 --> 02:03:42,970
fields at a time how do we produce four

2451
02:03:40,840 --> 02:03:44,680
light fields from samples what we

2452
02:03:42,970 --> 02:03:46,030
wouldn't know where to blend them right

2453
02:03:44,680 --> 02:03:49,270
do we blend them into light field zero

2454
02:03:46,029 --> 02:03:51,369
one two or three we don't know

2455
02:03:49,270 --> 02:03:53,800
and so we would need some way of

2456
02:03:51,369 --> 02:03:56,439
figuring out what the definition of

2457
02:03:53,800 --> 02:03:57,970
which light field is I've been thinking

2458
02:03:56,439 --> 02:04:00,399
of ways I might try to do it but I just

2459
02:03:57,970 --> 02:04:03,090
don't know and so we're gonna have to

2460
02:04:00,399 --> 02:04:03,089
try some things

2461
02:04:08,899 --> 02:04:12,909
all right I'm going to wrap it up

2462
02:04:19,890 --> 02:04:25,329
all right thank you everybody for

2463
02:04:22,029 --> 02:04:27,609
joining me for another episode of hand

2464
02:04:25,329 --> 02:04:30,039
made here it's been a pleasure coding

2465
02:04:27,609 --> 02:04:31,359
with you as always if you would like to

2466
02:04:30,039 --> 02:04:32,769
following series at home you go here to

2467
02:04:31,359 --> 02:04:34,839
the game on handmade Yoda or it comes

2468
02:04:32,770 --> 02:04:38,260
the source code so that you could follow

2469
02:04:34,840 --> 02:04:39,940
along with it that is it for today I'll

2470
02:04:38,260 --> 02:04:43,150
be back here tomorrow if the internet

2471
02:04:39,939 --> 02:04:44,529
actually working which it might not be

2472
02:04:43,149 --> 02:04:47,739
but if the internet is working tomorrow

2473
02:04:44,529 --> 02:04:49,329
we will do it so hope see you back here

2474
02:04:47,739 --> 02:04:51,130
for that until then have fun for

2475
02:04:49,329 --> 02:04:51,609
everyone and I'll see you on the

2476
02:04:51,130 --> 02:04:54,060
Internet

2477
02:04:51,609 --> 02:04:54,059
take it easy everybody

