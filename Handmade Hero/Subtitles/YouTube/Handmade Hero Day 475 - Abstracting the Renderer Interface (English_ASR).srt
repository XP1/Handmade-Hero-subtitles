1
00:00:01,250 --> 00:00:04,890
hello everybody and welcome to handmade

2
00:00:03,330 --> 00:00:07,620
Hero the show recode a complete game

3
00:00:04,889 --> 00:00:10,410
live on stream we are going to take a

4
00:00:07,620 --> 00:00:12,960
little spin through the API today if I

5
00:00:10,410 --> 00:00:13,380
remember correctly we had gotten last

6
00:00:12,960 --> 00:00:16,800
week

7
00:00:13,380 --> 00:00:18,660
pretty good at sort of the the basic we

8
00:00:16,800 --> 00:00:22,740
went through and we kind of commented

9
00:00:18,660 --> 00:00:25,740
and explained and fine-tuned some of the

10
00:00:22,739 --> 00:00:28,739
code in the basic like startup frame

11
00:00:25,739 --> 00:00:31,829
rendering like essentially all of the

12
00:00:28,739 --> 00:00:33,839
things that you do before you actually

13
00:00:31,829 --> 00:00:35,609
start sending things down to the

14
00:00:33,840 --> 00:00:37,710
renderer and we've done a pretty good

15
00:00:35,609 --> 00:00:41,128
job with with getting sort of that stuff

16
00:00:37,710 --> 00:00:43,230
cleaned up and removing extraneous

17
00:00:41,128 --> 00:00:44,549
features and making it pretty clear what

18
00:00:43,229 --> 00:00:46,229
was going on in there so if we take a

19
00:00:44,549 --> 00:00:47,968
look at the code here like in the render

20
00:00:46,229 --> 00:00:51,448
loop this is all of the code necessary

21
00:00:47,969 --> 00:00:53,100
to talk to the renderer you can see that

22
00:00:51,448 --> 00:00:56,099
here we've kind of boiled it down to

23
00:00:53,100 --> 00:00:57,570
some pretty basic calls you can make you

24
00:00:56,100 --> 00:01:00,090
set up the memory of yourself so that

25
00:00:57,570 --> 00:01:01,859
doesn't even require calling us you set

26
00:01:00,090 --> 00:01:05,189
up a texture queue you set up your

27
00:01:01,859 --> 00:01:07,829
OpenGL all of this is just you know

28
00:01:05,188 --> 00:01:09,719
stuff that's happening not in the API

29
00:01:07,829 --> 00:01:11,879
exactly and then when you come through

30
00:01:09,719 --> 00:01:13,260
here it's again very straightforward to

31
00:01:11,879 --> 00:01:15,509
do the rendering right you're kind of

32
00:01:13,260 --> 00:01:18,810
just saying look here's some rendering

33
00:01:15,509 --> 00:01:20,188
we're gonna do here's a renderer group

34
00:01:18,810 --> 00:01:23,670
which is a group of things we're sending

35
00:01:20,188 --> 00:01:26,819
down to render in a particular way you

36
00:01:23,670 --> 00:01:29,040
render them and then you finish and so

37
00:01:26,819 --> 00:01:30,750
this is starting to look pretty good and

38
00:01:29,040 --> 00:01:32,939
I think it wouldn't be that hard for

39
00:01:30,750 --> 00:01:35,430
someone who didn't really know the

40
00:01:32,938 --> 00:01:36,899
intimate of the renderer to to start

41
00:01:35,430 --> 00:01:41,400
working with this sort of stuff there's

42
00:01:36,900 --> 00:01:43,560
more we could do here but the parts that

43
00:01:41,400 --> 00:01:45,868
I want to focus on today are first of

44
00:01:43,560 --> 00:01:47,969
all maybe making this camera code a

45
00:01:45,868 --> 00:01:50,849
little more straightforward because this

46
00:01:47,969 --> 00:01:53,250
is all while this is all code that is

47
00:01:50,849 --> 00:01:55,349
nothing to do with the renderer the

48
00:01:53,250 --> 00:01:56,819
render doesn't care I set the camera it

49
00:01:55,349 --> 00:01:58,798
is stuff that people need to be able to

50
00:01:56,819 --> 00:02:01,529
do and since we've already figured out

51
00:01:58,799 --> 00:02:04,590
good ways to do it it seems to make

52
00:02:01,530 --> 00:02:06,868
sense to go ahead and put that in to our

53
00:02:04,590 --> 00:02:09,060
code on the render side in an

54
00:02:06,868 --> 00:02:11,580
easy-to-use way so you know maybe

55
00:02:09,060 --> 00:02:13,770
streamlining this part right here just

56
00:02:11,580 --> 00:02:16,320
so this looks a little bit better

57
00:02:13,770 --> 00:02:17,939
then fixing some of the render API stuff

58
00:02:16,319 --> 00:02:19,469
so right now you notice fog is turned

59
00:02:17,939 --> 00:02:21,539
off why is fog turned off it's turned

60
00:02:19,469 --> 00:02:23,759
off because at the moment the values for

61
00:02:21,539 --> 00:02:25,229
fog where the they starting to end are

62
00:02:23,759 --> 00:02:27,449
actually hard-coded in set camera

63
00:02:25,229 --> 00:02:30,389
transform that's obviously not we want

64
00:02:27,449 --> 00:02:32,849
we would much rather have the ability to

65
00:02:30,389 --> 00:02:34,109
specify the fog in the API and it's easy

66
00:02:32,849 --> 00:02:35,549
to do so those are just some cleanup

67
00:02:34,110 --> 00:02:38,190
things you want to do so that's

68
00:02:35,550 --> 00:02:41,310
something we want to take a look at

69
00:02:38,189 --> 00:02:43,829
so like the fixing this camera transfer

70
00:02:41,310 --> 00:02:45,539
call making some utilities to make this

71
00:02:43,830 --> 00:02:47,670
easy for people who don't necessarily

72
00:02:45,539 --> 00:02:49,889
know 3d math very well that's something

73
00:02:47,669 --> 00:02:51,389
we could do and then finally the final

74
00:02:49,889 --> 00:02:53,819
the last thing that I want to take a

75
00:02:51,389 --> 00:02:56,489
look at is these calls here our basic

76
00:02:53,819 --> 00:02:59,699
calls that we use for drawing things on

77
00:02:56,490 --> 00:03:01,740
the screen those calls I think need to

78
00:02:59,699 --> 00:03:03,780
clean up as well there's a number of

79
00:03:01,740 --> 00:03:07,740
things we might want to do to make this

80
00:03:03,780 --> 00:03:09,120
work better than they do currently so

81
00:03:07,740 --> 00:03:11,070
there's just several things there that

82
00:03:09,120 --> 00:03:13,050
are just like API polish that's all I

83
00:03:11,069 --> 00:03:13,680
really want to do today and then

84
00:03:13,050 --> 00:03:16,439
tomorrow

85
00:03:13,680 --> 00:03:18,680
I feel like assuming we can get those

86
00:03:16,439 --> 00:03:21,240
into worked into a reasonable state

87
00:03:18,680 --> 00:03:26,010
tomorrow what I'd like to do is start on

88
00:03:21,240 --> 00:03:34,050
the sensible texture array stuff that

89
00:03:26,009 --> 00:03:36,989
allows us to get better frame rates to

90
00:03:34,050 --> 00:03:40,320
be fair at the moment I think we have

91
00:03:36,990 --> 00:03:43,850
two problems really with frame rates one

92
00:03:40,319 --> 00:03:50,459
problem we have is that at the moment

93
00:03:43,849 --> 00:03:53,449
we've got me see where this is yes so

94
00:03:50,459 --> 00:03:56,459
one problem we we have at the moment is

95
00:03:53,449 --> 00:03:57,989
that our actual Z bias program which is

96
00:03:56,459 --> 00:04:00,509
the program that's used to fill most of

97
00:03:57,990 --> 00:04:02,100
things on the screen this just takes too

98
00:04:00,509 --> 00:04:04,169
long and a lot of the reason that it

99
00:04:02,099 --> 00:04:06,569
probably takes too long is is this sort

100
00:04:04,169 --> 00:04:08,549
of stuff that's happening in here so one

101
00:04:06,569 --> 00:04:10,259
of the things that we do is we sum a

102
00:04:08,550 --> 00:04:11,959
bunch of lighting sample points the

103
00:04:10,259 --> 00:04:16,920
number of letting sample points is

104
00:04:11,959 --> 00:04:19,560
arbitrary and it's in directed that may

105
00:04:16,920 --> 00:04:21,000
just be a bad idea and we may sort of

106
00:04:19,560 --> 00:04:22,620
act i said as we could sort of go

107
00:04:21,000 --> 00:04:25,199
further on the lighting we may be able

108
00:04:22,620 --> 00:04:26,689
to well hopefully we will be able to

109
00:04:25,199 --> 00:04:29,060
change this and to maybe something

110
00:04:26,689 --> 00:04:32,269
more light probe oriented something that

111
00:04:29,060 --> 00:04:34,160
doesn't require as much work inside the

112
00:04:32,269 --> 00:04:37,039
pixel shader as this does because

113
00:04:34,160 --> 00:04:38,600
obviously a pixel shading is expensive

114
00:04:37,040 --> 00:04:43,460
and we don't want to do it if we don't

115
00:04:38,600 --> 00:04:45,170
have to so that's one thing another

116
00:04:43,459 --> 00:04:48,469
thing that we could do obviously there

117
00:04:45,170 --> 00:04:50,870
is we could switch to something that did

118
00:04:48,470 --> 00:04:55,040
more deferred rendering at the moment we

119
00:04:50,870 --> 00:04:56,899
do def PS and we actually compute all of

120
00:04:55,040 --> 00:05:00,050
that lighting for everything every time

121
00:04:56,899 --> 00:05:01,579
we do every depth field because we don't

122
00:05:00,050 --> 00:05:03,680
guarantee currently that we send things

123
00:05:01,579 --> 00:05:05,120
down in any particular order obviously

124
00:05:03,680 --> 00:05:07,129
because the entire point of the depth

125
00:05:05,120 --> 00:05:08,600
feeling is that we didn't want to have

126
00:05:07,129 --> 00:05:10,850
to sort our sprites before we sent them

127
00:05:08,600 --> 00:05:12,110
down and so we kind of wanted the

128
00:05:10,850 --> 00:05:13,850
renderer to be sort of a general-purpose

129
00:05:12,110 --> 00:05:17,629
renderer to this handle that for us that

130
00:05:13,850 --> 00:05:20,600
means that we would like to stop doing

131
00:05:17,629 --> 00:05:24,769
things that involve lighting on anything

132
00:05:20,600 --> 00:05:27,260
that isn't actually being used and one

133
00:05:24,769 --> 00:05:30,399
of the things that we could do here is

134
00:05:27,259 --> 00:05:32,719
try to defer that computation to later

135
00:05:30,399 --> 00:05:35,389
so there's a lot of things that we could

136
00:05:32,720 --> 00:05:39,530
do in here I don't know which one of

137
00:05:35,389 --> 00:05:43,579
them which ones of them we will actually

138
00:05:39,529 --> 00:05:45,519
need to do and there's a bunch of things

139
00:05:43,579 --> 00:05:47,899
we can probably do to speed this up

140
00:05:45,519 --> 00:05:50,659
suffice to say this is a big part of our

141
00:05:47,899 --> 00:05:52,549
problem right now as well so of those

142
00:05:50,660 --> 00:05:54,560
two things one of them is one I think

143
00:05:52,550 --> 00:05:56,030
will tackle right away the other one out

144
00:05:54,560 --> 00:05:58,970
know if we'll tackle it right away we

145
00:05:56,029 --> 00:06:00,889
may may wait to sort of get back to

146
00:05:58,970 --> 00:06:03,169
lighting and playing around with the

147
00:06:00,889 --> 00:06:05,300
visual quality of things before we

148
00:06:03,168 --> 00:06:06,620
really start to look at how this works

149
00:06:05,300 --> 00:06:10,310
because we don't really want to optimize

150
00:06:06,620 --> 00:06:13,399
something that's not final in any sort

151
00:06:10,310 --> 00:06:15,110
of serious way so this stuff right now

152
00:06:13,399 --> 00:06:17,089
is what I want to focus on today so I'm

153
00:06:15,110 --> 00:06:20,480
going to go ahead and jump into it again

154
00:06:17,089 --> 00:06:24,589
looking through this this is pretty easy

155
00:06:20,480 --> 00:06:27,379
to understand I think these parts are

156
00:06:24,589 --> 00:06:30,649
pretty clean this is I think pretty easy

157
00:06:27,379 --> 00:06:33,980
to understand how this works here the

158
00:06:30,649 --> 00:06:36,739
only thing I would say is you know if we

159
00:06:33,980 --> 00:06:41,860
want to stop having these things be

160
00:06:36,740 --> 00:06:41,860
copied we could make this be a buffer

161
00:06:42,550 --> 00:06:48,439
that we map and fill if we wanted to do

162
00:06:46,310 --> 00:06:53,478
that these should be allocated sort of

163
00:06:48,439 --> 00:06:56,719
behind you know in the render or proper

164
00:06:53,478 --> 00:06:59,930
right and I don't really know to what

165
00:06:56,720 --> 00:07:03,130
extent we want to do that where we want

166
00:06:59,930 --> 00:07:05,300
you know how we might want to push that

167
00:07:03,129 --> 00:07:08,689
kind of back into the system in a

168
00:07:05,300 --> 00:07:10,728
slightly different way so that's worth

169
00:07:08,689 --> 00:07:13,550
noting right that that's like something

170
00:07:10,728 --> 00:07:16,848
that it's not clear exactly how we want

171
00:07:13,550 --> 00:07:19,310
that to work I would see that the push

172
00:07:16,848 --> 00:07:22,759
buffer size of 64 megabytes is now

173
00:07:19,310 --> 00:07:26,348
absolutely ridiculous because the push

174
00:07:22,759 --> 00:07:28,879
buffer itself does not store any data

175
00:07:26,348 --> 00:07:33,949
you know it doesn't store vertices or

176
00:07:28,879 --> 00:07:35,779
bitmaps the actual size even in a heavy

177
00:07:33,949 --> 00:07:38,689
usage scenario is probably quite small

178
00:07:35,779 --> 00:07:40,818
so for example if I was to crank this

179
00:07:38,689 --> 00:07:42,918
cover index up to something fairly large

180
00:07:40,819 --> 00:07:46,220
which lose our framerate down

181
00:07:42,918 --> 00:07:48,258
considerably right and if we look at the

182
00:07:46,220 --> 00:07:55,370
resulting scene oops this is the wrong

183
00:07:48,259 --> 00:07:56,780
program if we look at the resulting seen

184
00:07:55,370 --> 00:08:00,288
in the render test you can see it

185
00:07:56,779 --> 00:08:02,959
running very slowly here again there's

186
00:08:00,288 --> 00:08:05,658
two potential culprits here texture

187
00:08:02,959 --> 00:08:08,060
changes and lighting computations on

188
00:08:05,658 --> 00:08:13,610
each individual pixel we will look at

189
00:08:08,060 --> 00:08:15,079
why those are but either way it looks

190
00:08:13,610 --> 00:08:16,729
like texture changes is the problem

191
00:08:15,079 --> 00:08:18,978
mostly in this case but that's that

192
00:08:16,728 --> 00:08:22,339
pretty sure so again fixing that issue

193
00:08:18,978 --> 00:08:23,389
is one thing but again assuming that all

194
00:08:22,339 --> 00:08:25,189
that gets fixing you're running full

195
00:08:23,389 --> 00:08:29,090
speed this is an awful lot of sprites to

196
00:08:25,189 --> 00:08:31,038
be sending down and so if we look at how

197
00:08:29,089 --> 00:08:33,168
much memory is actually being used to

198
00:08:31,038 --> 00:08:36,229
send those sprites down in terms of the

199
00:08:33,168 --> 00:08:39,879
actual render group itself we can do

200
00:08:36,229 --> 00:08:43,158
that pretty easily right if we stop here

201
00:08:39,879 --> 00:08:45,110
the render commands will show us exactly

202
00:08:43,158 --> 00:08:47,899
how much has been used out of that push

203
00:08:45,110 --> 00:08:51,139
buffer so you can see here the maximum

204
00:08:47,899 --> 00:08:53,750
push buffer size is 64 megabytes right

205
00:08:51,139 --> 00:08:56,330
the push buffer Bay

206
00:08:53,750 --> 00:08:59,179
is the start of that and here's the push

207
00:08:56,330 --> 00:09:02,120
buffer data at right so by subtracting

208
00:08:59,179 --> 00:09:04,459
the push buffer data app from the push

209
00:09:02,120 --> 00:09:09,620
buffer base I can see how many bytes we

210
00:09:04,460 --> 00:09:15,590
used in the push buffer itself and there

211
00:09:09,620 --> 00:09:17,419
it is a whopping 184 bytes so you can

212
00:09:15,590 --> 00:09:19,580
see that that is kind of an absolutely

213
00:09:17,419 --> 00:09:21,919
absurd amount of memory to be allocating

214
00:09:19,580 --> 00:09:24,680
for something that ends up using 184

215
00:09:21,919 --> 00:09:28,309
bytes and again the reason for that is

216
00:09:24,679 --> 00:09:30,469
simply because we were previously

217
00:09:28,309 --> 00:09:31,909
storing all of our data in there and now

218
00:09:30,470 --> 00:09:33,529
we're not storing any of our data in

219
00:09:31,909 --> 00:09:35,870
there and so it becomes something that

220
00:09:33,529 --> 00:09:38,120
is just sort of a legacy feature this

221
00:09:35,870 --> 00:09:41,120
push buffer size could now be made much

222
00:09:38,120 --> 00:09:43,009
more succinct and we could easily make

223
00:09:41,120 --> 00:09:45,409
it so that the push buffer is say one

224
00:09:43,009 --> 00:09:49,399
megabyte and literally never have to

225
00:09:45,409 --> 00:09:53,600
think about it again it's now almost

226
00:09:49,399 --> 00:09:55,939
entirely the texture and vertex arrays

227
00:09:53,600 --> 00:09:58,279
that are the issue here these are the

228
00:09:55,940 --> 00:10:01,490
things that we are primarily worried

229
00:09:58,279 --> 00:10:04,970
about and those are the things that we

230
00:10:01,490 --> 00:10:06,649
will need to actually make work right so

231
00:10:04,970 --> 00:10:09,710
these are the things that are that our

232
00:10:06,649 --> 00:10:11,720
memory allocation sort of specific to

233
00:10:09,710 --> 00:10:14,570
that end we could make this be a non

234
00:10:11,720 --> 00:10:16,250
allocated thing the way that we would do

235
00:10:14,570 --> 00:10:18,200
that is by making the push buffer

236
00:10:16,250 --> 00:10:22,100
actually reference into itself so for

237
00:10:18,200 --> 00:10:24,770
example if we wanted to we could

238
00:10:22,100 --> 00:10:26,540
alleviate that burden on the user by

239
00:10:24,769 --> 00:10:29,149
recognizing that we're pretty much never

240
00:10:26,539 --> 00:10:31,250
going to blow out that part of things

241
00:10:29,149 --> 00:10:33,500
and by making this just be a static

242
00:10:31,250 --> 00:10:38,149
array in here of some certain number

243
00:10:33,500 --> 00:10:39,980
right and so when this push buffer for

244
00:10:38,149 --> 00:10:43,429
example and another way to look at it

245
00:10:39,980 --> 00:10:45,950
would be so if we look at what the

246
00:10:43,429 --> 00:10:50,449
renderer has in you know just in terms

247
00:10:45,950 --> 00:10:52,879
of what the renderer can do up at the

248
00:10:50,450 --> 00:10:54,770
top here we can sort of see the

249
00:10:52,879 --> 00:10:57,259
different entries we've got a textured

250
00:10:54,769 --> 00:11:00,470
quad entry a full clear a depth we're

251
00:10:57,259 --> 00:11:03,740
clear and then up you know sort of set

252
00:11:00,470 --> 00:11:06,769
of peels one of the things that we can

253
00:11:03,740 --> 00:11:09,438
say about this is that there's

254
00:11:06,769 --> 00:11:11,239
so few of these we could probably we

255
00:11:09,438 --> 00:11:13,909
don't really need a lot of the stuff

256
00:11:11,239 --> 00:11:20,899
that we were doing before where these

257
00:11:13,909 --> 00:11:25,548
things are actually sized relative to I

258
00:11:20,899 --> 00:11:27,619
mean let's let's put it this way we

259
00:11:25,548 --> 00:11:31,548
could just get rid of this and actually

260
00:11:27,619 --> 00:11:34,160
just use like per frame based allocation

261
00:11:31,548 --> 00:11:36,198
to store these things as well right it's

262
00:11:34,159 --> 00:11:38,409
just all I'm trying to say here is that

263
00:11:36,198 --> 00:11:41,178
these are really really simple now and

264
00:11:38,409 --> 00:11:42,649
it's probably not worth us forcing the

265
00:11:41,178 --> 00:11:44,178
user to think about how many they're

266
00:11:42,649 --> 00:11:47,869
gonna have it's just not something

267
00:11:44,178 --> 00:11:51,798
that's super relevant so one thing we

268
00:11:47,869 --> 00:11:56,660
could do is say hey yeah like maybe we

269
00:11:51,798 --> 00:12:00,289
just say the you know render entry or

270
00:11:56,659 --> 00:12:03,110
the push buffer here you know we could

271
00:12:00,289 --> 00:12:08,509
just say that there's a you know a a 4k

272
00:12:03,110 --> 00:12:12,438
push buffer and that's it and there's

273
00:12:08,509 --> 00:12:14,619
pretty much no chance of us ever blowing

274
00:12:12,438 --> 00:12:14,618
that out

275
00:12:33,629 --> 00:12:44,429
so furthermore one other thing we could

276
00:12:40,179 --> 00:12:50,229
do here again if we chose to kind of

277
00:12:44,429 --> 00:12:52,179
regularize the renderer a bit more is we

278
00:12:50,230 --> 00:12:55,960
could make it so there really isn't a

279
00:12:52,179 --> 00:12:59,019
push buffer at all right we could make

280
00:12:55,960 --> 00:13:02,530
it so that really you don't get render

281
00:12:59,019 --> 00:13:06,879
groups in the first place you only get

282
00:13:02,529 --> 00:13:09,159
the ability to specify a set of things

283
00:13:06,879 --> 00:13:11,889
that go through the DEF peeler and a set

284
00:13:09,159 --> 00:13:15,879
of things that don't and that's all you

285
00:13:11,889 --> 00:13:18,159
get right so if we wanted to we could

286
00:13:15,879 --> 00:13:20,409
also simplify things further by making

287
00:13:18,159 --> 00:13:23,740
it so that you don't really get to put a

288
00:13:20,409 --> 00:13:28,659
command stream down at all you only get

289
00:13:23,740 --> 00:13:32,529
to put things in to two buckets depth

290
00:13:28,659 --> 00:13:36,069
field and non depth field I don't know

291
00:13:32,529 --> 00:13:40,089
exactly how I feel about that it's a

292
00:13:36,070 --> 00:13:43,110
little confusing I'm just not sure

293
00:13:40,090 --> 00:13:45,850
whether that's a good idea or a bad idea

294
00:13:43,110 --> 00:13:46,269
and so I think I'll probably hold off on

295
00:13:45,850 --> 00:13:50,050
that

296
00:13:46,269 --> 00:13:53,769
but generally speaking as far as the

297
00:13:50,049 --> 00:13:55,719
game render commands are concerned you

298
00:13:53,769 --> 00:13:58,870
know I do think it'd be pretty easy for

299
00:13:55,720 --> 00:14:02,110
us like I said to sort of make sure that

300
00:13:58,870 --> 00:14:04,480
that that these things could be kept

301
00:14:02,110 --> 00:14:06,300
right you know in this in this format

302
00:14:04,480 --> 00:14:09,129
and make it easier people to deal with

303
00:14:06,299 --> 00:14:10,659
if we were to do that default render

304
00:14:09,129 --> 00:14:12,789
commands would not really be something

305
00:14:10,659 --> 00:14:14,649
you would want to return a game render

306
00:14:12,789 --> 00:14:16,329
command structure a game render command

307
00:14:14,649 --> 00:14:20,679
structure you know would be something

308
00:14:16,330 --> 00:14:23,410
that you wouldn't save like that but

309
00:14:20,679 --> 00:14:24,429
hard to say so I don't know exactly what

310
00:14:23,409 --> 00:14:25,870
want to do there but I really do think

311
00:14:24,429 --> 00:14:27,729
that this is now a little bit long in

312
00:14:25,870 --> 00:14:29,490
the tooth and probably isn't something

313
00:14:27,730 --> 00:14:31,720
that the user should have to worry about

314
00:14:29,490 --> 00:14:33,730
thinking through how I could alleviate

315
00:14:31,720 --> 00:14:38,259
that for them without them having to

316
00:14:33,730 --> 00:14:39,909
know about this stuff is a little tricky

317
00:14:38,259 --> 00:14:45,698
and I'm not sure exactly how I might

318
00:14:39,909 --> 00:14:51,039
want to do it when this gets called

319
00:14:45,698 --> 00:14:54,338
I guess just thinking it through so if

320
00:14:51,039 --> 00:14:56,438
we look at what's happening here one of

321
00:14:54,339 --> 00:14:59,649
the things that that probably should be

322
00:14:56,438 --> 00:15:01,599
changed is if we went to a system where

323
00:14:59,649 --> 00:15:04,688
the OpenGL renderer was more of an

324
00:15:01,600 --> 00:15:08,199
explicit thing so when we actually call

325
00:15:04,688 --> 00:15:10,719
win32 init OpenGL we actually get back a

326
00:15:08,198 --> 00:15:14,229
pointer to some sort of thing so that's

327
00:15:10,720 --> 00:15:18,249
not it's not using a global variable or

328
00:15:14,230 --> 00:15:20,709
anything like that if we were to do that

329
00:15:18,249 --> 00:15:24,308
we could imagine the push buffer and

330
00:15:20,708 --> 00:15:27,308
stuff living in there and when we do our

331
00:15:24,308 --> 00:15:30,308
render commands here we would actually

332
00:15:27,308 --> 00:15:32,078
get the memory that we're gonna use we

333
00:15:30,308 --> 00:15:35,379
could actually get that directly from

334
00:15:32,078 --> 00:15:38,048
the renderer now the reason that's kind

335
00:15:35,379 --> 00:15:41,409
of compelling is because if we get the

336
00:15:38,048 --> 00:15:44,039
memory directly from the renderer every

337
00:15:41,409 --> 00:15:49,238
time through then we could also write

338
00:15:44,039 --> 00:15:51,849
our render instructions in terms of

339
00:15:49,239 --> 00:15:54,038
vertices we could write those directly

340
00:15:51,850 --> 00:15:57,009
into card memory in places where it was

341
00:15:54,038 --> 00:15:58,838
appropriate which would make it so that

342
00:15:57,009 --> 00:16:01,389
there wouldn't have to be an extra copy

343
00:15:58,839 --> 00:16:10,889
into Locke's memory in order to do that

344
00:16:01,389 --> 00:16:14,769
transfer I don't know to what extent

345
00:16:10,889 --> 00:16:16,659
again that that really makes much of a

346
00:16:14,769 --> 00:16:20,499
difference for this amount of stuff that

347
00:16:16,659 --> 00:16:22,298
we're sending down but you know not

348
00:16:20,499 --> 00:16:27,189
blowing a bunch of CPU time on the copy

349
00:16:22,298 --> 00:16:28,509
does seem potentially useful uh so I'm

350
00:16:27,188 --> 00:16:31,688
gonna play around with this a little bit

351
00:16:28,509 --> 00:16:35,288
I'm gonna go ahead and say that in our

352
00:16:31,688 --> 00:16:37,418
win32 handmade open shell when we do our

353
00:16:35,288 --> 00:16:41,769
win32 and an open jail one thing you can

354
00:16:37,418 --> 00:16:46,480
see here is that we actually do some

355
00:16:41,769 --> 00:16:48,600
allocation essentially of a renderer the

356
00:16:46,480 --> 00:16:50,048
only difference is we chose to put it

357
00:16:48,600 --> 00:16:52,389
allocations the wrong word

358
00:16:50,048 --> 00:16:55,448
initialization I should say we chose to

359
00:16:52,389 --> 00:16:57,579
make it be a global variable right it's

360
00:16:55,448 --> 00:16:59,049
actually something that's that's defined

361
00:16:57,578 --> 00:17:05,009
globally

362
00:16:59,049 --> 00:17:05,009
and so I think if we look at the hoops

363
00:17:06,359 --> 00:17:17,708
if we look at the open Jill code here we

364
00:17:13,088 --> 00:17:22,328
have this this gentleman right here this

365
00:17:17,709 --> 00:17:26,558
OpenGL struct here where that actually

366
00:17:22,328 --> 00:17:28,029
gets specified yeah so you can see that

367
00:17:26,558 --> 00:17:32,230
is actually something that gets

368
00:17:28,029 --> 00:17:34,389
specified as a global in the world so

369
00:17:32,230 --> 00:17:35,529
you know that seems kind of ugly to me

370
00:17:34,390 --> 00:17:38,590
and it seems like we could improve

371
00:17:35,529 --> 00:17:39,940
things a bit by kind of going down the

372
00:17:38,589 --> 00:17:41,529
route of figuring out where that memory

373
00:17:39,940 --> 00:17:43,120
is coming from and making that stuff

374
00:17:41,529 --> 00:17:45,940
actually work so I'm gonna go ahead and

375
00:17:43,119 --> 00:17:50,079
see what it would take to do that and

376
00:17:45,940 --> 00:17:51,970
clean that stuff up as a start so one

377
00:17:50,079 --> 00:17:55,899
thing you can see here when we do win32

378
00:17:51,970 --> 00:17:58,750
set pixel format that is taking a window

379
00:17:55,900 --> 00:18:02,200
DC here and one of the things that we

380
00:17:58,750 --> 00:18:04,690
would need that to do is have access to

381
00:18:02,200 --> 00:18:07,440
the opengl struck that it's looking the

382
00:18:04,690 --> 00:18:10,299
you know the this the sort of OpenGL

383
00:18:07,440 --> 00:18:12,279
structure that stores everything here we

384
00:18:10,299 --> 00:18:13,990
would need that to be accessible to it

385
00:18:12,279 --> 00:18:15,759
I'm just gonna go ahead and push that

386
00:18:13,990 --> 00:18:17,650
through so that there's no longer a

387
00:18:15,759 --> 00:18:20,589
global and just everyone is passing it

388
00:18:17,650 --> 00:18:24,040
around again it's a little bit of a pain

389
00:18:20,589 --> 00:18:28,119
but it's not a huge deal especially if

390
00:18:24,039 --> 00:18:30,308
we expect this thing to be working as

391
00:18:28,119 --> 00:18:32,529
sort of a generic API thing that people

392
00:18:30,308 --> 00:18:34,450
outside of handmade hero can use it

393
00:18:32,529 --> 00:18:37,450
seems like a good thing to make sure we

394
00:18:34,450 --> 00:18:39,850
get right so let's take a look here

395
00:18:37,450 --> 00:18:41,519
again these are now just most of this is

396
00:18:39,849 --> 00:18:44,289
just turning something that was static

397
00:18:41,519 --> 00:18:47,379
dot reference into something that that

398
00:18:44,289 --> 00:18:49,750
actually has a you know a valid pointer

399
00:18:47,380 --> 00:18:52,059
here so what I miss assuming will happen

400
00:18:49,750 --> 00:18:53,859
here is will actually allocate this

401
00:18:52,058 --> 00:18:58,259
right so this is something that will do

402
00:18:53,859 --> 00:18:58,259
a platform allocation for us

403
00:19:00,910 --> 00:19:09,150
whether that'll be a win32 version

404
00:19:03,670 --> 00:19:13,870
specifically or just a generic version

405
00:19:09,150 --> 00:19:15,490
dad I'm not sure but we'll see so this

406
00:19:13,869 --> 00:19:17,049
should crash immediately for us so we'll

407
00:19:15,490 --> 00:19:18,789
remember to go back and do that right

408
00:19:17,049 --> 00:19:21,250
now I just want to thread the open jail

409
00:19:18,789 --> 00:19:36,359
through it so that everyone has it

410
00:19:21,250 --> 00:19:45,390
properly and we'll go from there um

411
00:19:36,359 --> 00:19:45,389
let's see so this needs here

412
00:19:51,339 --> 00:19:56,899
and most of these things all sort of

413
00:19:54,769 --> 00:19:57,980
artifact I mean this is really what they

414
00:19:56,900 --> 00:20:00,259
should have looked like it's just

415
00:19:57,980 --> 00:20:01,970
there's not a lot of reason for it

416
00:20:00,259 --> 00:20:04,220
meaning it's you know when you're if

417
00:20:01,970 --> 00:20:08,769
you're not trying to sort of push things

418
00:20:04,220 --> 00:20:12,019
out to a sort of more generic generic

419
00:20:08,769 --> 00:20:14,179
generically applicable situation there's

420
00:20:12,019 --> 00:20:21,079
not a lot of reason why you would need

421
00:20:14,179 --> 00:20:23,570
to and generally speaking you should not

422
00:20:21,079 --> 00:20:26,359
do things you don't need to do for lack

423
00:20:23,569 --> 00:20:28,308
of a better for lack of them of a better

424
00:20:26,359 --> 00:20:30,079
way to say it don't do things you don't

425
00:20:28,308 --> 00:20:42,829
need to do because otherwise you're just

426
00:20:30,079 --> 00:20:44,569
wasting time and so this is just kind of

427
00:20:42,829 --> 00:20:46,250
making this into something that has

428
00:20:44,569 --> 00:20:51,649
passed through to people who are using

429
00:20:46,250 --> 00:20:53,869
it don't ask me why we decided to put an

430
00:20:51,650 --> 00:20:57,200
underscore in there when we don't put an

431
00:20:53,869 --> 00:21:00,409
underscore in anywhere else we'll just

432
00:20:57,200 --> 00:21:05,929
pretend we had a good reason for that we

433
00:21:00,410 --> 00:21:08,690
didn't at least not that I know of right

434
00:21:05,929 --> 00:21:13,669
like why is it that way if it's going to

435
00:21:08,690 --> 00:21:17,929
be that way and the answer is lost to

436
00:21:13,669 --> 00:21:21,220
the sands of time at this point where is

437
00:21:17,929 --> 00:21:21,220
that at there we go

438
00:21:29,089 --> 00:21:33,179
okay and the other thing that we could

439
00:21:32,069 --> 00:21:35,639
do here too

440
00:21:33,180 --> 00:21:39,000
is if we want to write this will allow

441
00:21:35,640 --> 00:21:40,410
us during that initialization phase this

442
00:21:39,000 --> 00:21:41,940
will allow us to be a little bit more

443
00:21:40,410 --> 00:21:44,490
specific about what's going on there and

444
00:21:41,940 --> 00:21:46,950
the user will be able to see and they go

445
00:21:44,490 --> 00:21:48,829
ahead and do a certain place on this the

446
00:21:46,950 --> 00:21:51,930
user will be able to see more clearly

447
00:21:48,829 --> 00:21:53,369
where their stuff is coming from which

448
00:21:51,930 --> 00:21:56,549
is good too

449
00:21:53,369 --> 00:22:00,629
it'll be a little clearer to them sort

450
00:21:56,549 --> 00:22:03,539
of how that's working and when they need

451
00:22:00,630 --> 00:22:06,350
to actually pass the renderer handle

452
00:22:03,539 --> 00:22:06,349
around and so on

453
00:22:19,648 --> 00:22:42,750
um so yeah this is just straightforward

454
00:22:26,319 --> 00:22:46,319
text transformation here yeah never mind

455
00:22:42,750 --> 00:22:46,319
guess that's unnecessary

456
00:22:46,528 --> 00:22:52,599
hi so looks like this is the only one

457
00:22:50,890 --> 00:22:56,909
that actually takes the open jail for

458
00:22:52,599 --> 00:22:56,908
some reason is it no

459
00:23:04,749 --> 00:23:13,669
we also don't use multi light down and

460
00:23:07,579 --> 00:23:19,819
multi light up so I feel like they

461
00:23:13,669 --> 00:23:23,509
should probably just get removed I don't

462
00:23:19,819 --> 00:23:32,470
know why we would spend time maintaining

463
00:23:23,509 --> 00:23:32,470
them there we go

464
00:23:35,989 --> 00:23:43,100
please don't require that pal fake seed

465
00:23:41,298 --> 00:23:44,450
letting pod FPL to learning I'll have to

466
00:23:43,099 --> 00:23:45,378
see whether those are used at all

467
00:23:44,450 --> 00:23:51,919
anymore either because I don't think

468
00:23:45,378 --> 00:23:57,638
those are these obviously require the

469
00:23:51,919 --> 00:23:57,639
pointer these

470
00:24:12,630 --> 00:24:16,650
see how we're doing here

471
00:24:24,849 --> 00:24:26,909
you

472
00:24:28,819 --> 00:24:43,669
um wait you know won't this anymore

473
00:24:34,130 --> 00:24:47,350
doing yeah we don't even want this this

474
00:24:43,670 --> 00:24:47,350
is again just old biting test stuff

475
00:24:59,430 --> 00:25:03,410
pretty sure we don't want this either

476
00:25:01,049 --> 00:25:03,409
but

477
00:25:13,450 --> 00:25:27,650
all right I think that's good all right

478
00:25:19,940 --> 00:25:29,480
sue kidding yeah all of this stuff is

479
00:25:27,650 --> 00:25:30,850
just old we don't use any of this

480
00:25:29,480 --> 00:25:42,579
anymore

481
00:25:30,849 --> 00:25:42,579
so that can all go what else we got

482
00:25:43,269 --> 00:25:51,650
again nothing really interesting

483
00:25:45,259 --> 00:25:53,059
happening here we're just kind of doing

484
00:25:51,650 --> 00:25:59,350
a rigid transformation to make these

485
00:25:53,059 --> 00:25:59,349
operate off of a structure that's passed

486
00:26:18,210 --> 00:26:27,629
let's see what else okay oops

487
00:26:25,249 --> 00:26:34,019
you actually get those weird inter caps

488
00:26:27,628 --> 00:26:40,490
right all right so now you know if we

489
00:26:34,019 --> 00:26:44,368
look at sort of what's going on here I I

490
00:26:40,490 --> 00:26:47,519
kind of feel like the so this sort of

491
00:26:44,368 --> 00:26:51,990
thing is probably something that I would

492
00:26:47,519 --> 00:27:04,230
rather have be done up in this

493
00:26:51,990 --> 00:27:05,700
initialization right so this was sort of

494
00:27:04,230 --> 00:27:07,919
something that I hinted at before but

495
00:27:05,700 --> 00:27:11,399
just again simplifying this process of

496
00:27:07,919 --> 00:27:13,230
startup we can do even further here so

497
00:27:11,398 --> 00:27:15,628
in this wind through tune of gel you can

498
00:27:13,230 --> 00:27:20,240
see we've got our OpenGL RC that comes

499
00:27:15,628 --> 00:27:23,638
back here that OpenGL RC is never used

500
00:27:20,240 --> 00:27:25,288
anywhere and so I think the easiest

501
00:27:23,638 --> 00:27:29,839
thing to do here would just be to say

502
00:27:25,288 --> 00:27:33,240
look this returns our OpenGL renderer

503
00:27:29,839 --> 00:27:34,918
and then from then on anywhere we want

504
00:27:33,240 --> 00:27:37,528
to use that we can but I don't think we

505
00:27:34,919 --> 00:27:39,570
want to do this this way because again

506
00:27:37,528 --> 00:27:41,819
this is like really kind of reaching

507
00:27:39,569 --> 00:27:43,439
into that structure we don't want the

508
00:27:41,819 --> 00:27:47,339
people use this to have to understand

509
00:27:43,440 --> 00:27:50,909
that stuff and so like I said I think we

510
00:27:47,339 --> 00:27:53,730
really want to change the to be a little

511
00:27:50,909 --> 00:27:55,470
bit more conventional here so that

512
00:27:53,730 --> 00:27:59,389
people can sort of understand oh I call

513
00:27:55,470 --> 00:28:02,759
this thing to initialize it and then I

514
00:27:59,388 --> 00:28:05,638
get one back and I just use that that

515
00:28:02,759 --> 00:28:08,069
han't you know like a handle so you know

516
00:28:05,638 --> 00:28:12,719
this is I think more what we want it to

517
00:28:08,069 --> 00:28:14,928
look like and when you return you return

518
00:28:12,720 --> 00:28:18,919
that and off you go

519
00:28:14,929 --> 00:28:21,749
so I think that's what we want here and

520
00:28:18,919 --> 00:28:24,059
I think we can go from there so even

521
00:28:21,749 --> 00:28:25,649
just doing this I feel like that was

522
00:28:24,058 --> 00:28:28,829
worth it but we're gonna be able to get

523
00:28:25,648 --> 00:28:30,719
a lot more out of it now because we can

524
00:28:28,829 --> 00:28:32,189
now push that further and make

525
00:28:30,720 --> 00:28:34,890
handle those allocations the beginning

526
00:28:32,190 --> 00:28:49,470
so those can get out of the way of the

527
00:28:34,890 --> 00:28:51,600
user as well okay so let's see here so

528
00:28:49,470 --> 00:28:54,779
one of the things about this you can see

529
00:28:51,599 --> 00:28:57,329
so we would like you to not know in

530
00:28:54,779 --> 00:29:00,259
places like this we'd like you not to

531
00:28:57,329 --> 00:29:03,538
know what renderer you're actually using

532
00:29:00,259 --> 00:29:06,089
so one thing we could also choose to do

533
00:29:03,538 --> 00:29:10,349
here is make this handle be a little bit

534
00:29:06,089 --> 00:29:13,168
more opaque right so inside the renderer

535
00:29:10,349 --> 00:29:15,389
itself we could sort of have the notion

536
00:29:13,169 --> 00:29:21,390
that you don't know what kind of

537
00:29:15,390 --> 00:29:23,429
renderer you got and you know the fact

538
00:29:21,390 --> 00:29:25,110
that it's an OpenGL renderer is just

539
00:29:23,429 --> 00:29:28,830
happens to be the fact that you called

540
00:29:25,109 --> 00:29:31,379
the initialization on OpenGL right so we

541
00:29:28,829 --> 00:29:34,470
could if we wanted to say hey look

542
00:29:31,380 --> 00:29:38,870
there's just a thing called the renderer

543
00:29:34,470 --> 00:29:41,579
and you're gonna get one back right

544
00:29:38,869 --> 00:29:45,298
whatever it is and you don't necessarily

545
00:29:41,579 --> 00:29:47,730
know what what kind it was if you're not

546
00:29:45,298 --> 00:29:51,298
the person who like literally called the

547
00:29:47,730 --> 00:29:58,589
thing initially so for example in here

548
00:29:51,298 --> 00:30:00,089
if we did something like this then when

549
00:29:58,589 --> 00:30:02,609
we come through and we're talking about

550
00:30:00,089 --> 00:30:04,500
OpenGL everywhere what we'd really want

551
00:30:02,609 --> 00:30:05,969
to do is talk about the renderer

552
00:30:04,500 --> 00:30:08,159
everywhere and the reason I'm doing this

553
00:30:05,970 --> 00:30:10,860
is because let's suppose we wanted to

554
00:30:08,159 --> 00:30:13,830
switch to using something else like

555
00:30:10,859 --> 00:30:15,629
direct3d we don't want everyone in our

556
00:30:13,829 --> 00:30:17,879
code here to be passing around a thing

557
00:30:15,630 --> 00:30:20,190
they know to the OpenGL and if they use

558
00:30:17,880 --> 00:30:23,070
in a way that's specific to the way you

559
00:30:20,190 --> 00:30:27,419
would use OpenGL right that's not what

560
00:30:23,069 --> 00:30:29,189
we would want at all and so in order to

561
00:30:27,419 --> 00:30:32,299
sort of make that in order to simplify

562
00:30:29,190 --> 00:30:32,298
that quite a bit

563
00:30:35,210 --> 00:30:44,539
what we would prefer here is if we

564
00:30:38,669 --> 00:30:46,830
always had some way of dealing with

565
00:30:44,539 --> 00:30:49,678
things through a handle we don't

566
00:30:46,829 --> 00:30:53,339
understand okay because that prevents us

567
00:30:49,679 --> 00:30:56,250
from ever baking that understanding into

568
00:30:53,339 --> 00:31:03,269
the rest of the code path so what I'm

569
00:30:56,250 --> 00:31:08,609
suggesting here is for example we do

570
00:31:03,269 --> 00:31:10,410
something like this where we say how

571
00:31:08,609 --> 00:31:13,168
many texture apps we want or something

572
00:31:10,410 --> 00:31:16,580
like that and then this code goes into

573
00:31:13,169 --> 00:31:21,030
the OpenGL side of things

574
00:31:16,579 --> 00:31:22,740
somewhere right something like this so

575
00:31:21,029 --> 00:31:26,428
when we do our initialize OpenGL we say

576
00:31:22,740 --> 00:31:30,480
how many texture apps we want maybe we

577
00:31:26,429 --> 00:31:32,669
even do this where we say what our

578
00:31:30,480 --> 00:31:35,819
maximum vertex counts are so maybe we

579
00:31:32,669 --> 00:31:40,429
even do something where we say okay you

580
00:31:35,819 --> 00:31:42,869
know here is our max vertex count and

581
00:31:40,429 --> 00:31:46,759
those are like basically the parameters

582
00:31:42,869 --> 00:31:50,039
for the render you know that go through

583
00:31:46,759 --> 00:31:55,740
and so these are just things that come

584
00:31:50,039 --> 00:31:58,889
in to that come in through here and so

585
00:31:55,740 --> 00:32:00,929
that kind of looks nice to me because in

586
00:31:58,890 --> 00:32:04,710
that sense when you get back a renderer

587
00:32:00,929 --> 00:32:07,740
now everywhere that we were gonna use

588
00:32:04,710 --> 00:32:10,590
something OpenGL related instead we can

589
00:32:07,740 --> 00:32:12,240
just say okay let's you know let's make

590
00:32:10,589 --> 00:32:15,539
sure that this is something that can be

591
00:32:12,240 --> 00:32:17,308
used just more generically and the other

592
00:32:15,539 --> 00:32:20,879
thing we could do is make something like

593
00:32:17,308 --> 00:32:22,558
this call here B again also somewhat

594
00:32:20,880 --> 00:32:24,150
generic we can actually make all of

595
00:32:22,558 --> 00:32:26,970
these fairly generic and I'll show you

596
00:32:24,150 --> 00:32:29,809
what I mean by that in a second so that

597
00:32:26,970 --> 00:32:31,410
I think we can clean up quite a bit and

598
00:32:29,808 --> 00:32:35,700
we'll go from there

599
00:32:31,410 --> 00:32:38,370
so all right so again mmm just looking

600
00:32:35,700 --> 00:32:40,950
back at what we want to do here so now

601
00:32:38,369 --> 00:32:42,750
anybody who was talking about OpenGL

602
00:32:40,950 --> 00:32:47,669
outside of things we want to make sure

603
00:32:42,750 --> 00:32:48,869
that that's not happening anymore and I

604
00:32:47,669 --> 00:32:52,499
thought there was someone

605
00:32:48,869 --> 00:32:55,469
oh yeah load bitmap right so again load

606
00:32:52,499 --> 00:32:57,659
bitmap here you can see is something

607
00:32:55,470 --> 00:33:03,929
that needs to send down a texture I

608
00:32:57,659 --> 00:33:05,730
again don't want to I don't want to make

609
00:33:03,929 --> 00:33:08,909
that be something that this thinks is

610
00:33:05,730 --> 00:33:11,460
specifically OpenGL so what I want to do

611
00:33:08,909 --> 00:33:15,799
is I want to say something like add

612
00:33:11,460 --> 00:33:18,659
texture up or basically queue texture up

613
00:33:15,798 --> 00:33:20,878
and so what you would do is you would

614
00:33:18,659 --> 00:33:25,619
say here is the texture operation that I

615
00:33:20,878 --> 00:33:28,319
want to do and then you know if we do

616
00:33:25,618 --> 00:33:36,240
want to make sure that that happens

617
00:33:28,319 --> 00:33:37,859
immediately we can write that is not

618
00:33:36,240 --> 00:33:39,179
something I will probably do that way in

619
00:33:37,859 --> 00:33:42,028
the future this will probably be

620
00:33:39,179 --> 00:33:45,950
something that's feed-forward so we

621
00:33:42,028 --> 00:33:49,888
should be able to get rid of this call

622
00:33:45,950 --> 00:33:52,769
in the future now I put out putting out

623
00:33:49,888 --> 00:33:57,898
to that effect to do this call should

624
00:33:52,769 --> 00:34:02,759
could be removed once result texture is

625
00:33:57,898 --> 00:34:04,918
feed forward instead of reported back um

626
00:34:02,759 --> 00:34:06,450
so that's something that we want to

627
00:34:04,919 --> 00:34:08,460
improve a little bit separately but

628
00:34:06,450 --> 00:34:10,349
again that's for tomorrow not something

629
00:34:08,460 --> 00:34:14,878
to consider today so the platform

630
00:34:10,349 --> 00:34:21,359
renderer gets passed into load bitmap

631
00:34:14,878 --> 00:34:24,210
here platform renderer under and that's

632
00:34:21,358 --> 00:34:26,909
something that again we just count on

633
00:34:24,210 --> 00:34:31,429
having been supplied to us and so

634
00:34:26,909 --> 00:34:31,429
everywhere that we have a load BMP call

635
00:34:32,599 --> 00:34:39,379
instead of just passing the name we also

636
00:34:36,480 --> 00:34:43,579
pass the renderer which is you know

637
00:34:39,378 --> 00:34:45,659
where it's going to send that texture

638
00:34:43,579 --> 00:34:48,329
okay

639
00:34:45,659 --> 00:34:51,210
so that's mostly what we need to do here

640
00:34:48,329 --> 00:34:53,329
and if you take a look at the stuff that

641
00:34:51,210 --> 00:34:57,030
still has to now be fixed in here

642
00:34:53,329 --> 00:35:00,869
obviously this is the texture vertex op

643
00:34:57,030 --> 00:35:02,310
stuff the init scene just has to take

644
00:35:00,869 --> 00:35:04,680
that renderer

645
00:35:02,309 --> 00:35:06,900
this default render commands one of the

646
00:35:04,679 --> 00:35:08,940
things that's kind of annoying about the

647
00:35:06,900 --> 00:35:13,590
wave even doing things is this notion of

648
00:35:08,940 --> 00:35:16,139
the white bitmap since we now have an

649
00:35:13,590 --> 00:35:20,640
understanding of a platform handle and

650
00:35:16,139 --> 00:35:21,900
what that platform handle like since we

651
00:35:20,639 --> 00:35:24,029
have an understanding of a platform

652
00:35:21,900 --> 00:35:26,670
texture handle I think we're going to be

653
00:35:24,030 --> 00:35:28,470
able to get rid of white bitmap and make

654
00:35:26,670 --> 00:35:30,930
that be something that we don't have to

655
00:35:28,469 --> 00:35:33,899
have in there anymore

656
00:35:30,929 --> 00:35:36,319
and so hopefully that's something we can

657
00:35:33,900 --> 00:35:43,650
kind of we can kind of nuke a little bit

658
00:35:36,320 --> 00:35:46,050
but we'll see in the meantime it still

659
00:35:43,650 --> 00:35:49,619
needs to be there so what I'm gonna do

660
00:35:46,050 --> 00:35:57,450
is I'm just gonna say that we have a

661
00:35:49,619 --> 00:35:59,130
call we call and that gets whatever the

662
00:35:57,449 --> 00:36:00,539
you know whatever the white bitmap was

663
00:35:59,130 --> 00:36:03,809
for putting in there and again that's

664
00:36:00,539 --> 00:36:05,009
not something that we really need to

665
00:36:03,809 --> 00:36:06,989
think about too hard at the moment

666
00:36:05,010 --> 00:36:12,450
because I think hopefully I'm hoping

667
00:36:06,989 --> 00:36:17,009
anyway that it will go away so moving

668
00:36:12,449 --> 00:36:20,849
along from here what we'd like to do is

669
00:36:17,010 --> 00:36:22,500
just you know have something generic

670
00:36:20,849 --> 00:36:24,049
here we say okay issue all the render

671
00:36:22,500 --> 00:36:26,690
commands that you're going to issue

672
00:36:24,050 --> 00:36:29,190
here's the renderer to issue them to

673
00:36:26,690 --> 00:36:31,710
here's a render commands and so on and

674
00:36:29,190 --> 00:36:34,740
one of the things that I think is kind

675
00:36:31,710 --> 00:36:38,010
of annoying about this is if you look at

676
00:36:34,739 --> 00:36:40,549
when you call issue render commands when

677
00:36:38,010 --> 00:36:43,770
you initialize the render commands here

678
00:36:40,550 --> 00:36:45,930
it seems like we've really kind of we've

679
00:36:43,769 --> 00:36:51,170
got more stuff than we really need to

680
00:36:45,929 --> 00:36:53,730
have going on in these two calls as well

681
00:36:51,170 --> 00:36:56,280
so the window within the window Heights

682
00:36:53,730 --> 00:36:59,699
obviously are things that are not known

683
00:36:56,280 --> 00:37:01,860
here but the draw region is something

684
00:36:59,699 --> 00:37:04,259
that is kind of known here and should

685
00:37:01,860 --> 00:37:07,440
probably have been passed and placed

686
00:37:04,260 --> 00:37:10,380
into here so I'm not super sure why

687
00:37:07,440 --> 00:37:11,849
we're doing both of those things I'd

688
00:37:10,380 --> 00:37:12,500
like to take a little bit of a look at

689
00:37:11,849 --> 00:37:15,210
that

690
00:37:12,500 --> 00:37:15,719
similarly the renderer I think should

691
00:37:15,210 --> 00:37:19,679
get

692
00:37:15,719 --> 00:37:21,980
locked in here and furthermore this this

693
00:37:19,679 --> 00:37:27,179
should probably be more of a pointer

694
00:37:21,980 --> 00:37:29,579
than an actual strut so I think what I

695
00:37:27,179 --> 00:37:37,348
would like to do is do something more

696
00:37:29,579 --> 00:37:42,680
like this you know begin frame and then

697
00:37:37,349 --> 00:37:50,609
down here it's more like end frame right

698
00:37:42,679 --> 00:37:54,929
and that looks a little bit more sane to

699
00:37:50,608 --> 00:37:57,119
me and again this part this right here I

700
00:37:54,929 --> 00:37:59,279
don't actually know what I want to do

701
00:37:57,119 --> 00:38:01,079
with the window width window height

702
00:37:59,280 --> 00:38:02,970
thing I'm conflicted as to whether I

703
00:38:01,079 --> 00:38:06,060
want to pass it here I want to look

704
00:38:02,969 --> 00:38:10,199
inside open jail and just see what we're

705
00:38:06,059 --> 00:38:10,588
doing as far as yeah let me just take a

706
00:38:10,199 --> 00:38:13,230
look here

707
00:38:10,588 --> 00:38:16,799
open jail oh well that's actually gonna

708
00:38:13,230 --> 00:38:18,750
be in here OpenGL render commands yeah I

709
00:38:16,800 --> 00:38:23,099
want to know what we're doing with this

710
00:38:18,750 --> 00:38:24,719
draw region because I don't actually

711
00:38:23,099 --> 00:38:27,930
know so you can see us doing sort of

712
00:38:24,719 --> 00:38:36,059
like the viewport scissor stuff there

713
00:38:27,929 --> 00:38:37,739
right and we use the minimax so really

714
00:38:36,059 --> 00:38:39,568
like I feel like the draw region could

715
00:38:37,739 --> 00:38:43,979
just be passed there the window width

716
00:38:39,568 --> 00:38:48,630
and window height is just for the

717
00:38:43,980 --> 00:38:52,440
overall region so yeah so I'm not sure

718
00:38:48,630 --> 00:38:54,858
how we want to approach that I kind of

719
00:38:52,440 --> 00:38:57,389
feel like we just want to approach that

720
00:38:54,858 --> 00:39:00,328
by passing everything at the head end

721
00:38:57,389 --> 00:39:01,949
and then anything that you know needs to

722
00:39:00,329 --> 00:39:07,500
get saved gets saved you know I feel

723
00:39:01,949 --> 00:39:11,269
like that is just a more sane way to do

724
00:39:07,500 --> 00:39:13,980
this I also feel like max vertex count

725
00:39:11,269 --> 00:39:18,150
probably shouldn't be specified there

726
00:39:13,980 --> 00:39:20,639
probably should be specified here but

727
00:39:18,150 --> 00:39:23,010
it's hard to say right we could make it

728
00:39:20,639 --> 00:39:25,139
so that it can adapt a little bit more

729
00:39:23,010 --> 00:39:27,359
dynamically to the vertex counts that

730
00:39:25,139 --> 00:39:29,938
you want and you can specify those on

731
00:39:27,358 --> 00:39:31,739
demand I'm not sure

732
00:39:29,938 --> 00:39:34,978
whether I care about that or not it's

733
00:39:31,739 --> 00:39:37,499
pretty hard to say seemingly push buffer

734
00:39:34,978 --> 00:39:39,659
and push buffer size that stuff would go

735
00:39:37,498 --> 00:39:41,248
away so ideally what this would look

736
00:39:39,659 --> 00:39:42,719
like is something like this we passed

737
00:39:41,248 --> 00:39:46,738
the render of the draw region in the

738
00:39:42,719 --> 00:39:47,969
window with the window height and and

739
00:39:46,739 --> 00:39:49,619
you know what if we're sending the

740
00:39:47,969 --> 00:39:51,479
renderer down now that I think about it

741
00:39:49,619 --> 00:39:53,489
it can also fill out that white bitmap

742
00:39:51,478 --> 00:39:55,438
so what we end up with is something

743
00:39:53,489 --> 00:39:58,588
that's a lot cleaner we can just say a

744
00:39:55,438 --> 00:40:01,518
begin frame here's the information that

745
00:39:58,588 --> 00:40:04,228
you're actually going to need to draw to

746
00:40:01,518 --> 00:40:05,338
the surface you're drawing to maybe it

747
00:40:04,228 --> 00:40:07,139
looks a little bit more like this a

748
00:40:05,338 --> 00:40:12,298
render window with window height and

749
00:40:07,139 --> 00:40:15,989
draw region of that then you come down

750
00:40:12,298 --> 00:40:18,778
here and you say and and frame this game

751
00:40:15,989 --> 00:40:23,188
render commands this is really like you

752
00:40:18,778 --> 00:40:26,958
know the frame and we could call this

753
00:40:23,188 --> 00:40:28,798
like a you know game render frame I

754
00:40:26,958 --> 00:40:30,808
don't know if you want to actually go

755
00:40:28,798 --> 00:40:36,599
that far or not but you know it could

756
00:40:30,809 --> 00:40:38,489
happen so yeah if we take a look at what

757
00:40:36,599 --> 00:40:42,028
happens here this makes a lot more sense

758
00:40:38,489 --> 00:40:44,880
now so you can just see it flows really

759
00:40:42,028 --> 00:40:49,289
nicely through this whole system and

760
00:40:44,880 --> 00:40:52,229
looks pretty good as far as the swap

761
00:40:49,289 --> 00:40:53,699
buffers call on the OpenGL DC I think

762
00:40:52,228 --> 00:40:56,399
that still wants to be on the outside

763
00:40:53,699 --> 00:41:01,349
because it's very platform specific in

764
00:40:56,400 --> 00:41:03,179
that sense so I think this all looks

765
00:41:01,349 --> 00:41:07,318
relatively good to me

766
00:41:03,179 --> 00:41:10,729
and so you know this begin frame and end

767
00:41:07,318 --> 00:41:13,318
frame call these are sort of virtualized

768
00:41:10,728 --> 00:41:14,818
in the sense that they're going to call

769
00:41:13,318 --> 00:41:22,829
different things depending on which

770
00:41:14,818 --> 00:41:25,228
renderer you were using but I think

771
00:41:22,829 --> 00:41:27,769
other than that it's pretty

772
00:41:25,228 --> 00:41:27,768
straightforward

773
00:41:30,349 --> 00:41:40,219
I mean that looks pretty good to me I'm

774
00:41:34,519 --> 00:41:41,960
pretty happy with that so let's go ahead

775
00:41:40,219 --> 00:41:43,369
and take a look at what we would have to

776
00:41:41,960 --> 00:41:45,530
do to implement something like this you

777
00:41:43,369 --> 00:41:48,769
can see here we're calling we call

778
00:41:45,530 --> 00:41:53,480
something specific when we actually want

779
00:41:48,769 --> 00:41:55,059
to you know to execute this particular

780
00:41:53,480 --> 00:41:57,079
[Music]

781
00:41:55,059 --> 00:41:59,449
we want to start to start up this

782
00:41:57,079 --> 00:42:02,509
particular renderer and then in these

783
00:41:59,449 --> 00:42:04,159
cases when we do our rendering we we

784
00:42:02,510 --> 00:42:06,650
would call with the render handle which

785
00:42:04,159 --> 00:42:09,079
ones were actually wanting to use now

786
00:42:06,650 --> 00:42:12,410
what we're going to need here as far as

787
00:42:09,079 --> 00:42:14,630
the render is concerned this platform

788
00:42:12,409 --> 00:42:17,029
renderer is going to need something that

789
00:42:14,630 --> 00:42:19,760
can identify it and we have a couple

790
00:42:17,030 --> 00:42:21,890
different ways we can do this so one way

791
00:42:19,760 --> 00:42:24,560
we can do this is we can put an enum in

792
00:42:21,889 --> 00:42:28,449
here right which tells us which kind it

793
00:42:24,559 --> 00:42:31,969
is another way we can do it is by having

794
00:42:28,449 --> 00:42:34,129
a pointer to the actual functions that

795
00:42:31,969 --> 00:42:36,799
are going to get called so for example

796
00:42:34,130 --> 00:42:39,710
you know we have a begin frame and an

797
00:42:36,800 --> 00:42:52,340
end frame and then there's a like an add

798
00:42:39,710 --> 00:42:55,519
texture up where is that here it is in a

799
00:42:52,340 --> 00:42:57,470
cue texture app so as far as we're

800
00:42:55,519 --> 00:43:02,570
concerned those you know are things that

801
00:42:57,469 --> 00:43:07,069
have to kind of go through this system

802
00:43:02,570 --> 00:43:08,809
now like I said this this part is kind

803
00:43:07,070 --> 00:43:10,940
of troubling because I almost feel like

804
00:43:08,809 --> 00:43:12,289
this wants to be sort of separate but at

805
00:43:10,940 --> 00:43:14,119
the same time it can't really be

806
00:43:12,289 --> 00:43:16,429
separate because it may want to be

807
00:43:14,119 --> 00:43:18,589
something intimately tied to how the

808
00:43:16,429 --> 00:43:22,759
renderer works and that's that's sort of

809
00:43:18,590 --> 00:43:25,400
the weird part about it so I'm not sure

810
00:43:22,760 --> 00:43:27,320
exactly how we want to how we want this

811
00:43:25,400 --> 00:43:36,590
to play out one thing I would like to

812
00:43:27,320 --> 00:43:39,050
know is inside win32 handmade inside the

813
00:43:36,590 --> 00:43:42,320
actual handmade Hiro codebase I'm

814
00:43:39,050 --> 00:43:44,210
actually kind of curious as far as the

815
00:43:42,320 --> 00:43:47,390
texture ops are concerned

816
00:43:44,210 --> 00:43:50,659
I'm not sure yeah like it uses a texture

817
00:43:47,389 --> 00:43:52,699
op to handle their that it has to know

818
00:43:50,659 --> 00:43:56,750
where to add things and so the texture

819
00:43:52,699 --> 00:44:03,558
op queue itself is you know is sort of

820
00:43:56,750 --> 00:44:08,480
this this secondary thing right it's

821
00:44:03,559 --> 00:44:10,550
this thing and so I suppose that is

822
00:44:08,480 --> 00:44:13,608
actually the thing that we want to have

823
00:44:10,550 --> 00:44:16,190
for add up here so I think I probably

824
00:44:13,608 --> 00:44:18,769
should leave this we do it this way

825
00:44:16,190 --> 00:44:23,030
rather than passing the renderer there I

826
00:44:18,769 --> 00:44:24,829
think I just want the texture up that

827
00:44:23,030 --> 00:44:35,230
the texture queue to be the thing that

828
00:44:24,829 --> 00:44:35,230
we pass here right so I can make that be

829
00:44:40,989 --> 00:44:50,659
so and the problem that we're gonna have

830
00:44:46,929 --> 00:44:53,058
again is just that yeah like until

831
00:44:50,659 --> 00:44:56,239
someone actually calls this all of these

832
00:44:53,059 --> 00:44:59,809
pointers or not all of these like result

833
00:44:56,239 --> 00:45:01,459
textures are not valid now I really

834
00:44:59,809 --> 00:45:05,180
don't like that so I think you know one

835
00:45:01,460 --> 00:45:11,690
thing I might do is say this instead of

836
00:45:05,179 --> 00:45:17,000
that maybe we do this and that way the

837
00:45:11,690 --> 00:45:21,710
result itself yes I could say texture

838
00:45:17,000 --> 00:45:23,750
handle that way the result itself can

839
00:45:21,710 --> 00:45:27,260
get written back later so something like

840
00:45:23,750 --> 00:45:32,659
this our cube texture is yeah right

841
00:45:27,260 --> 00:45:35,299
there so maybe that is a better way to

842
00:45:32,659 --> 00:45:41,989
do this that way when we're loading

843
00:45:35,298 --> 00:45:44,150
bitmaps here we can just do one one

844
00:45:41,989 --> 00:45:46,009
update to the textures and they'll get

845
00:45:44,150 --> 00:45:50,240
loaded into their correct locations

846
00:45:46,010 --> 00:45:54,410
right I guess this might be one way to

847
00:45:50,239 --> 00:45:57,348
do it and again this is mostly just

848
00:45:54,409 --> 00:45:58,728
because I don't really even want this

849
00:45:57,349 --> 00:46:03,349
behavior

850
00:45:58,728 --> 00:46:05,058
I don't like it it's not good I don't I

851
00:46:03,349 --> 00:46:08,028
don't really want these things to be

852
00:46:05,059 --> 00:46:10,430
involved in the process at all what I

853
00:46:08,028 --> 00:46:16,429
wanted was just to have it so that they

854
00:46:10,429 --> 00:46:20,058
are passed forward like you just pass a

855
00:46:16,429 --> 00:46:20,838
number forward 0 1 2 3 or whatever and

856
00:46:20,059 --> 00:46:23,298
off you go

857
00:46:20,838 --> 00:46:26,630
so that's kind of a separate issue all

858
00:46:23,298 --> 00:46:28,038
together but you know that's neither

859
00:46:26,630 --> 00:46:31,450
here nor there so I want to try and make

860
00:46:28,039 --> 00:46:31,450
it so that this thing is the least

861
00:46:31,838 --> 00:46:45,588
dependent on that as I can just cuz I

862
00:46:36,199 --> 00:46:49,219
don't even want that I don't even really

863
00:46:45,588 --> 00:46:52,849
want to have to wait for those things

864
00:46:49,219 --> 00:46:54,858
either way but anyway when we do in it

865
00:46:52,849 --> 00:46:57,499
tests seen here so if we pass the

866
00:46:54,858 --> 00:47:00,498
renderer down the thing is so when we're

867
00:46:57,498 --> 00:47:03,259
actually doing this again that texture

868
00:47:00,498 --> 00:47:06,078
op q thing is something we would need to

869
00:47:03,259 --> 00:47:08,869
be able to get back the knowledge of

870
00:47:06,079 --> 00:47:12,229
where the texture Q was right so we need

871
00:47:08,869 --> 00:47:15,969
a thing here where we can get a texture

872
00:47:12,228 --> 00:47:20,179
op Q I always call it the wrong thing

873
00:47:15,969 --> 00:47:21,619
it's called a render or texture Q I call

874
00:47:20,179 --> 00:47:32,239
texture op Q could you just call it

875
00:47:21,619 --> 00:47:33,950
texture cube the thing that I don't know

876
00:47:32,239 --> 00:47:35,539
about this I'm quite sure that these

877
00:47:33,949 --> 00:47:37,998
should come off of the renderer that

878
00:47:35,539 --> 00:47:39,769
seems pretty obvious because we want the

879
00:47:37,998 --> 00:47:44,088
texture Q's to be able to be things that

880
00:47:39,768 --> 00:47:46,129
are you know per renderer I would think

881
00:47:44,088 --> 00:47:47,808
and again maybe that's wrong maybe we

882
00:47:46,130 --> 00:47:49,219
want the texture Q to just be generic

883
00:47:47,809 --> 00:47:51,140
and it doesn't have anything to do with

884
00:47:49,219 --> 00:47:53,749
the renderer and you just pass in one of

885
00:47:51,139 --> 00:47:55,578
these Q's and they're always hailed the

886
00:47:53,748 --> 00:47:59,478
same way you know maybe that's a smarter

887
00:47:55,579 --> 00:48:04,068
way to do it it's really a tough call

888
00:47:59,478 --> 00:48:07,389
I'm just not sure and so I could see I

889
00:48:04,068 --> 00:48:07,389
mean I could see that being

890
00:48:10,550 --> 00:48:19,850
just a better a better thing and if we

891
00:48:13,489 --> 00:48:49,609
did it that way it would just look like

892
00:48:19,849 --> 00:48:51,409
this yes I just don't do this so if we

893
00:48:49,610 --> 00:48:53,240
did something like this we'd say okay we

894
00:48:51,409 --> 00:48:57,799
can allocate a texture cue from the

895
00:48:53,239 --> 00:48:59,949
renderer and maybe that's the sort of

896
00:48:57,800 --> 00:49:05,180
thing that we then say when we do

897
00:48:59,949 --> 00:49:08,149
texture management we would say on every

898
00:49:05,179 --> 00:49:13,960
frame when we wanted to do that we could

899
00:49:08,150 --> 00:49:13,960
say something like yeah

900
00:49:24,690 --> 00:49:32,800
right something like this and so yeah

901
00:49:30,280 --> 00:49:34,900
like every time before we would go to do

902
00:49:32,800 --> 00:49:38,350
anything on the frame we would maybe

903
00:49:34,900 --> 00:49:39,940
process the textures and then we would

904
00:49:38,349 --> 00:49:43,480
submit the scene and that would just

905
00:49:39,940 --> 00:49:48,070
work and everyone would be happy so it

906
00:49:43,480 --> 00:49:49,929
you know if we did it that way again I'm

907
00:49:48,070 --> 00:49:53,769
just I'm just kind of having a long a

908
00:49:49,929 --> 00:49:55,480
little about this because I'm just not a

909
00:49:53,769 --> 00:49:58,210
hundred percent certain exactly the way

910
00:49:55,480 --> 00:50:00,880
I wanted it but it would look something

911
00:49:58,210 --> 00:50:03,639
like that right

912
00:50:00,880 --> 00:50:05,710
you could allocate extra cue here and

913
00:50:03,639 --> 00:50:07,299
then you you know you would just go

914
00:50:05,710 --> 00:50:09,130
ahead and process the texture cue

915
00:50:07,300 --> 00:50:11,050
anytime you want to by linking the

916
00:50:09,130 --> 00:50:12,880
renderer to it saying like okay hey

917
00:50:11,050 --> 00:50:15,870
render here's the texture cue I expect

918
00:50:12,880 --> 00:50:20,170
you to process this off you go

919
00:50:15,869 --> 00:50:22,420
right so really what we need now is a

920
00:50:20,170 --> 00:50:24,610
dispatch mechanism to make sure that the

921
00:50:22,420 --> 00:50:27,809
right renderer gets called for whatever

922
00:50:24,610 --> 00:50:31,059
it is that you're actually looking at

923
00:50:27,809 --> 00:50:35,889
and there's a couple things we would

924
00:50:31,059 --> 00:50:37,739
need to do there but really you can sort

925
00:50:35,889 --> 00:50:44,619
of see immediately what those calls are

926
00:50:37,739 --> 00:50:48,969
so allocate texture cue will work the

927
00:50:44,619 --> 00:50:53,019
same no matter who you are and so if I

928
00:50:48,969 --> 00:50:56,919
look at the renderer itself I believe we

929
00:50:53,019 --> 00:51:00,579
stuck those in here somewhere

930
00:50:56,920 --> 00:51:03,720
yeah so in it texture cue right and so

931
00:51:00,579 --> 00:51:07,150
this just kind of wants to be something

932
00:51:03,719 --> 00:51:09,099
that put that in here for now it doesn't

933
00:51:07,150 --> 00:51:12,579
need to be out there I don't know where

934
00:51:09,099 --> 00:51:15,489
I don't know if these need to be out

935
00:51:12,579 --> 00:51:19,239
here or not but either way so just

936
00:51:15,489 --> 00:51:20,679
looking at these this needs to be

937
00:51:19,239 --> 00:51:23,469
something that gets called once the

938
00:51:20,679 --> 00:51:25,029
thing is allocated and so allocate

939
00:51:23,469 --> 00:51:27,459
texture queue would just be something

940
00:51:25,030 --> 00:51:29,850
that's in the win32 part of the renderer

941
00:51:27,460 --> 00:51:33,460
because it's an allocation based thing

942
00:51:29,849 --> 00:51:36,440
and so you know we would have in hand

943
00:51:33,460 --> 00:51:40,728
made code something that's like win32

944
00:51:36,440 --> 00:51:42,679
just renderer right dot cpp which is the

945
00:51:40,728 --> 00:51:46,189
startup code for windows ii renderer

946
00:51:42,679 --> 00:51:49,608
sorts of things and the allocate texture

947
00:51:46,190 --> 00:51:52,009
q code would have to live in there again

948
00:51:49,608 --> 00:51:54,619
because it is specific in that sense

949
00:51:52,009 --> 00:51:56,748
right now wouldn't necessarily have to

950
00:51:54,619 --> 00:51:58,729
be it could be that you just need some

951
00:51:56,748 --> 00:52:01,669
kind of a callback to handle memory

952
00:51:58,728 --> 00:52:03,228
allocation I mean just to be a little

953
00:52:01,670 --> 00:52:03,499
bit more specific about how that would

954
00:52:03,228 --> 00:52:05,960
look

955
00:52:03,498 --> 00:52:08,929
so suppose we actually did a thing that

956
00:52:05,960 --> 00:52:12,309
just said allocate texture cube and you

957
00:52:08,929 --> 00:52:12,308
you do it like this right

958
00:52:22,659 --> 00:52:29,058
do something like this if you have a way

959
00:52:25,940 --> 00:52:31,249
to actually do a memory allocation on

960
00:52:29,059 --> 00:52:34,278
the platform something like this you

961
00:52:31,248 --> 00:52:37,488
just use the memory that you're you use

962
00:52:34,278 --> 00:52:40,909
the platform allocation call right and

963
00:52:37,489 --> 00:52:43,460
off you would go and again I'm just not

964
00:52:40,909 --> 00:52:44,690
sure how that wants to look it's a

965
00:52:43,460 --> 00:52:47,048
little bit of an open question again

966
00:52:44,690 --> 00:52:49,159
without knowing like how the person is

967
00:52:47,048 --> 00:52:54,909
integrating this in it's a little bit

968
00:52:49,159 --> 00:52:57,318
difficult to say so again I guess that's

969
00:52:54,909 --> 00:52:59,210
that's sort of the open question of

970
00:52:57,318 --> 00:53:01,068
exactly how that looks I mean maybe the

971
00:52:59,210 --> 00:53:04,789
way we had it was really the best way to

972
00:53:01,068 --> 00:53:08,199
have it where you know hey it's just in

973
00:53:04,789 --> 00:53:15,710
it texture queue so you provide it with

974
00:53:08,199 --> 00:53:17,868
the thing right and it does seem like

975
00:53:15,710 --> 00:53:19,190
you know I don't know after all that

976
00:53:17,869 --> 00:53:20,838
hemming and hawing it does seem like

977
00:53:19,190 --> 00:53:22,278
maybe that's still the best way to do it

978
00:53:20,838 --> 00:53:24,920
because that way you can feed the memory

979
00:53:22,278 --> 00:53:32,599
forward because it's never going to be

980
00:53:24,920 --> 00:53:34,849
something where we where we actually

981
00:53:32,599 --> 00:53:37,539
care how much there is when to to

982
00:53:34,849 --> 00:53:37,539
allocate memory

983
00:53:41,539 --> 00:53:57,140
and I guess I could just also this is

984
00:53:44,289 --> 00:53:58,789
probably something I could do here so I

985
00:53:57,139 --> 00:54:05,150
could just say alright however many of

986
00:53:58,789 --> 00:54:13,309
these I want times the size of the

987
00:54:05,150 --> 00:54:19,579
texture up I don't remember what these

988
00:54:13,309 --> 00:54:24,410
are called just text you out and so you

989
00:54:19,579 --> 00:54:26,180
know yeah I'm okay with that and as long

990
00:54:24,409 --> 00:54:28,210
as it gets passed around I'm fine with

991
00:54:26,179 --> 00:54:28,210
that

992
00:54:43,480 --> 00:54:50,630
all right so that part I think survive

993
00:54:47,869 --> 00:54:55,599
scrutiny the only thing we might want to

994
00:54:50,630 --> 00:55:01,400
do is have a thing in here where we say

995
00:54:55,599 --> 00:55:04,039
what this size is that we wanted rather

996
00:55:01,400 --> 00:55:06,490
than do this multiply ourselves that's

997
00:55:04,039 --> 00:55:08,929
the only thing that looks a little bit

998
00:55:06,489 --> 00:55:12,039
wonky

999
00:55:08,929 --> 00:55:12,039
[Music]

1000
00:55:18,780 --> 00:55:25,120
so here's one thing we could do is we

1001
00:55:23,440 --> 00:55:28,090
could just say here's how much memory

1002
00:55:25,119 --> 00:55:37,900
you get to work with and off you go

1003
00:55:28,090 --> 00:55:47,920
right that's kind of a little bit more

1004
00:55:37,900 --> 00:55:49,360
interesting potentially so you know this

1005
00:55:47,920 --> 00:56:12,730
is another way we could do it we could

1006
00:55:49,360 --> 00:56:14,110
just say hey we could say this and that

1007
00:56:12,730 --> 00:56:15,490
would basically be saying look here's

1008
00:56:14,110 --> 00:56:17,650
how much memory I'm giving you to work

1009
00:56:15,489 --> 00:56:21,250
with and if you happen to want to

1010
00:56:17,650 --> 00:56:24,400
compute that based out of the texture

1011
00:56:21,250 --> 00:56:25,599
app size go nuts otherwise just don't

1012
00:56:24,400 --> 00:56:31,960
and I don't care

1013
00:56:25,599 --> 00:56:34,179
right yeah it seems pretty recently and

1014
00:56:31,960 --> 00:56:36,550
that prevents you from having a mistake

1015
00:56:34,179 --> 00:56:38,829
where you're passing that like as long

1016
00:56:36,550 --> 00:56:42,670
as you just can pass the size that you

1017
00:56:38,829 --> 00:56:44,559
allocated you're fine right so it's just

1018
00:56:42,670 --> 00:56:48,789
like in Natick you use this memory

1019
00:56:44,559 --> 00:56:51,279
please right that seems totally

1020
00:56:48,789 --> 00:56:53,829
reasonable to me because then we can

1021
00:56:51,280 --> 00:56:56,680
just say look the texture up count is

1022
00:56:53,829 --> 00:57:00,759
the memory size divided by the size of a

1023
00:56:56,679 --> 00:57:03,460
texture ah done right and then you know

1024
00:57:00,760 --> 00:57:06,450
you go from there

1025
00:57:03,460 --> 00:57:06,449
texture

1026
00:57:09,079 --> 00:57:12,699
[Music]

1027
00:57:25,210 --> 00:57:32,449
something like that so that is a little

1028
00:57:28,460 --> 00:57:35,119
bit better I like that better so that's

1029
00:57:32,449 --> 00:57:37,369
good all right

1030
00:57:35,119 --> 00:57:39,079
um so I don't have any problem with that

1031
00:57:37,369 --> 00:57:40,699
and like I said because I felt like

1032
00:57:39,079 --> 00:57:42,110
moving that in was starting to get a

1033
00:57:40,699 --> 00:57:44,539
little bit weird because really there's

1034
00:57:42,110 --> 00:57:45,769
nothing render or specific in here and

1035
00:57:44,539 --> 00:57:48,469
unless I can come up with a good

1036
00:57:45,769 --> 00:57:50,210
argument for why it needs to be render

1037
00:57:48,469 --> 00:57:53,919
so Civic it seems like it just shouldn't

1038
00:57:50,210 --> 00:57:56,300
be and so at that point we just say look

1039
00:57:53,920 --> 00:58:00,889
this is the memory that we're gonna use

1040
00:57:56,300 --> 00:58:02,269
for this I again we you know we could do

1041
00:58:00,889 --> 00:58:03,949
it this way or we could do it the other

1042
00:58:02,269 --> 00:58:05,989
way that's not really the point here

1043
00:58:03,949 --> 00:58:07,309
either way we pass the memory to a thing

1044
00:58:05,989 --> 00:58:09,739
and we and at the texture cue and it

1045
00:58:07,309 --> 00:58:12,049
goes from there right so that seems good

1046
00:58:09,739 --> 00:58:15,259
to me this seems good to me now

1047
00:58:12,050 --> 00:58:17,090
again the max vertex count I'm not sure

1048
00:58:15,260 --> 00:58:18,770
that's a good way to parameterize this I

1049
00:58:17,090 --> 00:58:21,350
think what we'd rather do because this

1050
00:58:18,769 --> 00:58:24,019
is fright render just say max fright

1051
00:58:21,349 --> 00:58:26,769
count max bright count is going to be

1052
00:58:24,019 --> 00:58:29,780
you know for each one of these things

1053
00:58:26,769 --> 00:58:33,409
we're gonna need probably like roughly

1054
00:58:29,780 --> 00:58:38,560
six vertices I don't know I'm gonna go

1055
00:58:33,409 --> 00:58:43,429
ahead and say that the max sprite count

1056
00:58:38,559 --> 00:58:48,230
you know maybe our max sprite count is

1057
00:58:43,429 --> 00:58:52,819
something like this if I wanted to just

1058
00:58:48,230 --> 00:59:01,190
I mean this right here is that and this

1059
00:58:52,820 --> 00:59:06,590
right here is that right so I guess I

1060
00:59:01,190 --> 00:59:09,470
could just say this is that that's how

1061
00:59:06,590 --> 00:59:11,960
many sprites we would be at maximum

1062
00:59:09,469 --> 00:59:14,089
pushing down per frame which is a heck

1063
00:59:11,960 --> 00:59:15,740
of a lot of sprites I don't know if I

1064
00:59:14,090 --> 00:59:17,660
really want that many sprites let's say

1065
00:59:15,739 --> 00:59:21,529
we're gonna push that sprite nice price

1066
00:59:17,659 --> 00:59:24,529
down we'll see how that is so this will

1067
00:59:21,530 --> 00:59:27,589
be our max bright count or another way

1068
00:59:24,530 --> 00:59:29,089
to say that might be our max quad count

1069
00:59:27,588 --> 00:59:32,538
because that's a little clearer since

1070
00:59:29,088 --> 00:59:34,940
since cubes occupy a couple different

1071
00:59:32,539 --> 00:59:37,910
ones of those so maybe you know we say

1072
00:59:34,940 --> 00:59:41,239
look this is the max quad count per

1073
00:59:37,909 --> 00:59:43,429
frame and then you should balance out

1074
00:59:41,239 --> 00:59:47,179
your allocations based on what you're

1075
00:59:43,429 --> 00:59:49,489
gonna need for that to be true right and

1076
00:59:47,179 --> 00:59:51,409
the reason that I don't want to do the

1077
00:59:49,489 --> 00:59:53,929
same thing here like I'm passing the

1078
00:59:51,409 --> 00:59:55,489
memory in here the reason I don't really

1079
00:59:53,929 --> 00:59:57,558
want to pass the memory in here is

1080
00:59:55,489 --> 00:59:59,389
because we may need the operating system

1081
00:59:57,559 --> 01:00:01,940
to allocate this memory for us in a

1082
00:59:59,389 --> 01:00:03,798
special way and so I'm just want to

1083
01:00:01,940 --> 01:00:06,019
leave that possibility open so that the

1084
01:00:03,798 --> 01:00:07,909
renderer doesn't have to assume that the

1085
01:00:06,018 --> 01:00:10,639
memory that it's got is the memory that

1086
01:00:07,909 --> 01:00:15,558
it would need it can allocate its own

1087
01:00:10,639 --> 01:00:18,018
memory as necessary so we'll let that

1088
01:00:15,559 --> 01:00:28,579
happen the rest of this stuff is pretty

1089
01:00:18,018 --> 01:00:31,899
straightforward I'm gonna change the

1090
01:00:28,579 --> 01:00:35,239
order of these things slightly oops I

1091
01:00:31,900 --> 01:00:37,160
have a little key to change to the

1092
01:00:35,239 --> 01:00:39,079
opposite way of reading to pet you so if

1093
01:00:37,159 --> 01:00:41,028
it's like too sunny out or whatever you

1094
01:00:39,079 --> 01:00:45,769
can use that it helps read on a laptop

1095
01:00:41,028 --> 01:00:47,449
screen so that all seems good and then

1096
01:00:45,768 --> 01:00:51,588
again we've got sort of the begin frame

1097
01:00:47,449 --> 01:00:55,880
end frame thing happening here and that

1098
01:00:51,588 --> 01:01:00,619
is pretty much what we have to now go

1099
01:00:55,880 --> 01:01:02,838
improve because this is going to be this

1100
01:01:00,619 --> 01:01:04,670
should be pretty simple to improve or

1101
01:01:02,838 --> 01:01:07,429
this should be pretty simple to make

1102
01:01:04,670 --> 01:01:10,489
fall in line but the other ones probably

1103
01:01:07,429 --> 01:01:13,518
not so much all right

1104
01:01:10,489 --> 01:01:16,219
so in here when we do our win32 init

1105
01:01:13,518 --> 01:01:18,348
OpenGL let's just do the simplest

1106
01:01:16,219 --> 01:01:19,880
possible thing at first we know that

1107
01:01:18,349 --> 01:01:23,719
we're going to be getting a max quad

1108
01:01:19,880 --> 01:01:25,519
count value in here and so what I want

1109
01:01:23,719 --> 01:01:28,338
to do is just let that flow through here

1110
01:01:25,518 --> 01:01:31,578
this allocation stuff here we know we're

1111
01:01:28,338 --> 01:01:35,088
on win32 so I probably want to just do a

1112
01:01:31,579 --> 01:01:36,829
straightforward plat allocate here so I

1113
01:01:35,088 --> 01:01:40,190
just want to do like a virtual a lock

1114
01:01:36,829 --> 01:01:42,470
and in order to to

1115
01:01:40,190 --> 01:01:44,389
get this memory like I said we kind of

1116
01:01:42,469 --> 01:01:47,239
want to do we might want to do some more

1117
01:01:44,389 --> 01:01:49,308
specific things here now since we know

1118
01:01:47,239 --> 01:01:51,679
that the OpenGL part of things right

1119
01:01:49,309 --> 01:01:58,309
here is going to be a virtual Alec call

1120
01:01:51,679 --> 01:02:00,828
excuse me again that allows me to do I

1121
01:01:58,309 --> 01:02:05,000
can make stuff like the push buffer just

1122
01:02:00,829 --> 01:02:08,089
be directly bound in here I that's not

1123
01:02:05,000 --> 01:02:10,730
gonna be there anymore so what I want to

1124
01:02:08,088 --> 01:02:14,088
do here is just say alright there's

1125
01:02:10,730 --> 01:02:18,500
going to be let's just say push buffer

1126
01:02:14,088 --> 01:02:22,489
memory thing here and that can be 64k if

1127
01:02:18,500 --> 01:02:25,639
I want to and that way that's not going

1128
01:02:22,489 --> 01:02:28,098
to be a separate allocation then through

1129
01:02:25,639 --> 01:02:30,920
here I'm gonna first start out I'll do a

1130
01:02:28,099 --> 01:02:40,130
virtual a lock or I can do a win through

1131
01:02:30,920 --> 01:02:42,289
to something like that I can do a thing

1132
01:02:40,130 --> 01:02:45,440
here where I just allocate whatever one

1133
01:02:42,289 --> 01:02:47,740
of these is and I get that back and then

1134
01:02:45,440 --> 01:02:53,179
down here I can similarly do a thing

1135
01:02:47,739 --> 01:02:55,909
that goes exactly that for these and

1136
01:02:53,179 --> 01:02:58,489
this can be well you know what these can

1137
01:02:55,909 --> 01:03:03,318
still be max vertex count and then what

1138
01:02:58,489 --> 01:03:05,659
I can do is say well alright so as far

1139
01:03:03,318 --> 01:03:07,338
as textured rotate vertices are

1140
01:03:05,659 --> 01:03:08,659
concerned like I don't know exactly

1141
01:03:07,338 --> 01:03:12,349
we're probably end up passing out

1142
01:03:08,659 --> 01:03:15,199
indices pretty soon as well so we'll

1143
01:03:12,349 --> 01:03:21,260
have to kind of fuss with this stuff a

1144
01:03:15,199 --> 01:03:23,389
little bit more but when we do this

1145
01:03:21,260 --> 01:03:25,099
allocation we're gonna have to compute

1146
01:03:23,389 --> 01:03:27,548
that matched vertex count first and

1147
01:03:25,099 --> 01:03:30,289
that's just the max quad count for frame

1148
01:03:27,548 --> 01:03:32,389
let's just say times four at the moment

1149
01:03:30,289 --> 01:03:34,789
even though that'll be changed push

1150
01:03:32,389 --> 01:03:36,558
buffer size and push buffer or now are

1151
01:03:34,789 --> 01:03:40,690
not actually going to be used for

1152
01:03:36,559 --> 01:03:44,240
anything and in here inside the opengl

1153
01:03:40,690 --> 01:03:47,809
subsystem i'm going to store this vertex

1154
01:03:44,239 --> 01:03:49,669
array and this bitmap array as being

1155
01:03:47,809 --> 01:03:53,780
allocated here and that will not

1156
01:03:49,670 --> 01:03:57,289
probably stay true for the duration

1157
01:03:53,780 --> 01:03:59,210
but for the immediate moment it will and

1158
01:03:57,289 --> 01:04:01,550
we'll sort of see where that goes a

1159
01:03:59,210 --> 01:04:05,840
little bit later on I'm going to take

1160
01:04:01,550 --> 01:04:08,210
for a minute the allocation from here

1161
01:04:05,840 --> 01:04:11,180
and we'll see what we want to do kind of

1162
01:04:08,210 --> 01:04:21,639
going forward with that a little bit

1163
01:04:11,179 --> 01:04:34,190
later but basically it's just this and

1164
01:04:21,639 --> 01:04:38,329
we'll kind of let that ride for now all

1165
01:04:34,190 --> 01:04:43,610
right don't know why there's an Y on the

1166
01:04:38,329 --> 01:04:46,880
end of that okay so when we go to opengl

1167
01:04:43,610 --> 01:04:50,059
managed textures now that's actually not

1168
01:04:46,880 --> 01:04:57,110
what that's going to be it's gonna yes

1169
01:04:50,059 --> 01:05:00,610
you will get the renderer here but

1170
01:04:57,110 --> 01:05:00,610
you'll also get the texture op to

1171
01:05:08,800 --> 01:05:21,280
um so I think I don't know why that's

1172
01:05:17,300 --> 01:05:21,280
still happening here

1173
01:05:28,769 --> 01:05:42,750
I'm not sure maybe we do want to have

1174
01:05:31,710 --> 01:05:46,409
that automatic I don't think we do so

1175
01:05:42,750 --> 01:05:54,480
I'm gonna not make that be automatic so

1176
01:05:46,409 --> 01:05:56,250
I think we're okay with that yeah these

1177
01:05:54,480 --> 01:05:58,050
are really memory sized heaven forfend

1178
01:05:56,250 --> 01:05:59,519
you've actually passing that many

1179
01:05:58,050 --> 01:06:02,850
texture ops but there's no particular

1180
01:05:59,519 --> 01:06:15,090
reason for us not to support it so what

1181
01:06:02,849 --> 01:06:16,110
the heck let's go ahead and the only

1182
01:06:15,090 --> 01:06:18,750
other thing I want to do real quick

1183
01:06:16,110 --> 01:06:20,340
before I forget is in win32 handmade I

1184
01:06:18,750 --> 01:06:23,190
don't know that we ever call managed

1185
01:06:20,340 --> 01:06:27,480
textures and we kind of want to make

1186
01:06:23,190 --> 01:06:30,869
sure we do so we do actually there so

1187
01:06:27,480 --> 01:06:32,909
that's okay but so we have to actually

1188
01:06:30,869 --> 01:06:36,619
change that to make sure that we are

1189
01:06:32,909 --> 01:06:36,619
calling that at a reasonable time right

1190
01:06:41,380 --> 01:06:51,960
oh sorry I also forgot that this wants a

1191
01:06:53,639 --> 01:07:12,489
result pointer okay so now we just have

1192
01:07:07,809 --> 01:07:17,949
to do sort of the for lack of a better

1193
01:07:12,489 --> 01:07:19,359
term the insulation layer like the thing

1194
01:07:17,949 --> 01:07:23,079
that makes it so that you're not dealing

1195
01:07:19,360 --> 01:07:25,289
directly with the OpenGL handle let me

1196
01:07:23,079 --> 01:07:28,719
see let me just get rid of any other

1197
01:07:25,289 --> 01:07:37,420
warnings we have here so this actually

1198
01:07:28,719 --> 01:07:41,439
wants that texture cue that's fine this

1199
01:07:37,420 --> 01:07:47,260
would be an address though that's fine

1200
01:07:41,440 --> 01:07:55,960
and that's fine what is the problem here

1201
01:07:47,260 --> 01:07:58,350
load BMP yes okay and now I think we're

1202
01:07:55,960 --> 01:08:03,429
down to only the things that I actually

1203
01:07:58,349 --> 01:08:06,039
want to fix right so we have to make

1204
01:08:03,429 --> 01:08:10,809
that return a renderer let's edit cetera

1205
01:08:06,039 --> 01:08:12,670
all right so now we're in a position

1206
01:08:10,809 --> 01:08:14,650
where we have to actually decide how we

1207
01:08:12,670 --> 01:08:17,980
want to make this thing be abstracted

1208
01:08:14,650 --> 01:08:20,859
and you've got lots of options in C++

1209
01:08:17,979 --> 01:08:23,919
and they're all lousy which is

1210
01:08:20,859 --> 01:08:26,079
unfortunate so one thing you can do is

1211
01:08:23,920 --> 01:08:27,940
you can go the regular C++ virtual

1212
01:08:26,079 --> 01:08:32,050
function call route and you can go ahead

1213
01:08:27,939 --> 01:08:34,359
and where is the renderer here yeah and

1214
01:08:32,050 --> 01:08:36,460
you can go ahead and do something you

1215
01:08:34,359 --> 01:08:38,439
know like this where you say okay we've

1216
01:08:36,460 --> 01:08:40,329
got a like a begin frame call and it's

1217
01:08:38,439 --> 01:08:42,819
virtual on the platform renderer and

1218
01:08:40,329 --> 01:08:45,189
then like you know the OpenGL renderer

1219
01:08:42,819 --> 01:08:50,439
is something that like inherits from one

1220
01:08:45,189 --> 01:08:54,909
of those right and what that does is

1221
01:08:50,439 --> 01:08:57,069
that essentially what that does is it

1222
01:08:54,909 --> 01:09:00,519
implements the following thing like just

1223
01:08:57,069 --> 01:09:05,529
so you know this is not magic it's just

1224
01:09:00,520 --> 01:09:07,750
a very very simple way of implementing

1225
01:09:05,529 --> 01:09:10,358
an abstraction layer that forces you to

1226
01:09:07,750 --> 01:09:12,909
do the following thing it basically says

1227
01:09:10,359 --> 01:09:15,250
that at the front of platform renderer

1228
01:09:12,909 --> 01:09:17,858
or anything that I say derives from

1229
01:09:15,250 --> 01:09:22,000
platform renderer there's going to be a

1230
01:09:17,859 --> 01:09:25,480
thing that points to a renderer function

1231
01:09:22,000 --> 01:09:28,569
table and then it defines something that

1232
01:09:25,479 --> 01:09:34,358
looks like this and that something has

1233
01:09:28,569 --> 01:09:39,909
like the begin frame function it's got

1234
01:09:34,359 --> 01:09:42,190
the end frame function right and that is

1235
01:09:39,909 --> 01:09:44,289
literally all it does and then what it

1236
01:09:42,189 --> 01:09:47,919
does for you is if you have a platform

1237
01:09:44,289 --> 01:09:49,390
renderer in a piece of code something

1238
01:09:47,920 --> 01:09:52,590
that looks like this

1239
01:09:49,390 --> 01:09:56,410
and then you do begin frame like that

1240
01:09:52,590 --> 01:10:00,539
all it does is rewrite everywhere that

1241
01:09:56,409 --> 01:10:00,539
you did that to look like this

1242
01:10:07,350 --> 01:10:14,320
okay so this is literally all

1243
01:10:10,539 --> 01:10:17,769
inheritance does like literally so you

1244
01:10:14,319 --> 01:10:20,529
know you don't need C++ to do this for

1245
01:10:17,770 --> 01:10:22,540
you it's a convenience feature that if

1246
01:10:20,529 --> 01:10:24,670
you want this rewrite rule and this

1247
01:10:22,539 --> 01:10:28,238
specific way of building function tables

1248
01:10:24,670 --> 01:10:31,630
it can do it for you that's it that's

1249
01:10:28,238 --> 01:10:35,349
all if you can't do anything else that's

1250
01:10:31,630 --> 01:10:38,140
all it can do there's a lot of reasons

1251
01:10:35,350 --> 01:10:40,450
you don't want this and the biggest one

1252
01:10:38,140 --> 01:10:43,510
of course is that you don't control this

1253
01:10:40,449 --> 01:10:46,389
function table how it works or how you

1254
01:10:43,510 --> 01:10:48,909
would save that information if you had

1255
01:10:46,390 --> 01:10:52,270
to write meaning if you wanted to record

1256
01:10:48,909 --> 01:10:53,800
what type one of these was not only are

1257
01:10:52,270 --> 01:10:55,480
you not really supposed to access this

1258
01:10:53,800 --> 01:11:00,279
pointer without enabling a thing called

1259
01:10:55,479 --> 01:11:02,319
R TTI but it's not stable across runs so

1260
01:11:00,279 --> 01:11:03,609
typically I don't prefer to do that in

1261
01:11:02,319 --> 01:11:05,769
this case I wouldn't necessarily

1262
01:11:03,609 --> 01:11:07,869
discourage someone from going that route

1263
01:11:05,770 --> 01:11:10,270
because I don't think the risks are very

1264
01:11:07,869 --> 01:11:12,309
high here I don't think we'll have to be

1265
01:11:10,270 --> 01:11:15,310
storing information necessarily about

1266
01:11:12,310 --> 01:11:17,289
the renderer in that way so normally I

1267
01:11:15,310 --> 01:11:19,360
would caution you to be very wary of

1268
01:11:17,289 --> 01:11:21,039
using C++ as inheritance model because

1269
01:11:19,359 --> 01:11:24,460
it's a very bad model doesn't really

1270
01:11:21,039 --> 01:11:27,220
work for a lot of reasons but in this

1271
01:11:24,460 --> 01:11:28,659
case I wouldn't be too adverse to it I

1272
01:11:27,220 --> 01:11:29,980
don't think you're gonna run into a lot

1273
01:11:28,659 --> 01:11:34,539
of problems here because this is an

1274
01:11:29,979 --> 01:11:36,969
incredibly simplistic use of multiple

1275
01:11:34,539 --> 01:11:40,149
different types that want to be used in

1276
01:11:36,970 --> 01:11:43,030
the same way I'm still not going to do

1277
01:11:40,149 --> 01:11:44,529
it because I hate it that much even in a

1278
01:11:43,029 --> 01:11:46,090
case where I think it wouldn't be too

1279
01:11:44,529 --> 01:11:49,238
deleterious I'm not going to use it

1280
01:11:46,090 --> 01:11:51,909
instead what I'd rather do is make a

1281
01:11:49,238 --> 01:11:53,619
platform renderer type field and I'm

1282
01:11:51,909 --> 01:11:55,988
just gonna use that type field myself

1283
01:11:53,619 --> 01:11:59,140
it's a little more typing than using the

1284
01:11:55,988 --> 01:12:02,259
C++ as automated way but it means I can

1285
01:11:59,140 --> 01:12:03,850
guarantee to myself that if I ever want

1286
01:12:02,260 --> 01:12:07,180
to refer to one of these renderers

1287
01:12:03,850 --> 01:12:09,640
across runs I can using a stable enum

1288
01:12:07,180 --> 01:12:11,619
that I know what it means and that can't

1289
01:12:09,640 --> 01:12:13,960
be changed by the compiler out from

1290
01:12:11,619 --> 01:12:15,579
underneath me without warning and/or

1291
01:12:13,960 --> 01:12:17,439
change when I go to compile on a

1292
01:12:15,579 --> 01:12:20,010
different platform but where it may be

1293
01:12:17,439 --> 01:12:20,009
incompatible

1294
01:12:20,170 --> 01:12:27,399
so what I'm gonna do here is say okay my

1295
01:12:21,909 --> 01:12:29,619
renderer type I can be a couple of

1296
01:12:27,399 --> 01:12:32,679
different things there's a software

1297
01:12:29,619 --> 01:12:40,689
renderer and OpenGL renderer mm-hmm

1298
01:12:32,680 --> 01:12:42,550
maybe a direct3d renderer right so I'm

1299
01:12:40,689 --> 01:12:44,859
just guessing like let's suppose that

1300
01:12:42,550 --> 01:12:47,800
this is sort of what we expected to see

1301
01:12:44,859 --> 01:12:50,979
in the future these are the types of

1302
01:12:47,800 --> 01:12:52,180
renderers that we want to have and so

1303
01:12:50,979 --> 01:12:54,279
what I'm going to say is that every

1304
01:12:52,180 --> 01:12:56,230
renderer that we've got has to start

1305
01:12:54,279 --> 01:12:58,719
with one of these and then based on

1306
01:12:56,229 --> 01:13:01,029
which one of those it actually says I

1307
01:12:58,720 --> 01:13:03,070
will do something different on each of

1308
01:13:01,029 --> 01:13:05,229
those dispatches so I will take a

1309
01:13:03,069 --> 01:13:10,000
different course of action based on

1310
01:13:05,229 --> 01:13:11,679
which one of those I saw okay so once I

1311
01:13:10,000 --> 01:13:14,470
have this piece of information there

1312
01:13:11,680 --> 01:13:17,800
what that implies to me is that I'm

1313
01:13:14,470 --> 01:13:20,619
going to have inside my renderer when I

1314
01:13:17,800 --> 01:13:25,230
actually create these things I want to

1315
01:13:20,619 --> 01:13:28,449
have a thing where I can in OpenGL right

1316
01:13:25,229 --> 01:13:31,779
in the actual structure any renderer

1317
01:13:28,449 --> 01:13:38,409
that we have is gonna start with one of

1318
01:13:31,779 --> 01:13:40,689
these like what does call that header so

1319
01:13:38,409 --> 01:13:43,090
again what I'm doing is I'm literally

1320
01:13:40,689 --> 01:13:44,469
doing the exact same thing C++ would

1321
01:13:43,090 --> 01:13:47,020
have done I'm just doing it in a

1322
01:13:44,470 --> 01:13:49,600
slightly different way C++ would have

1323
01:13:47,020 --> 01:13:51,100
put a pointer here for every struct one

1324
01:13:49,600 --> 01:13:53,740
that you couldn't see but that was

1325
01:13:51,100 --> 01:13:56,410
actually there and that pointer would

1326
01:13:53,739 --> 01:13:59,710
tell you in a specific way which one of

1327
01:13:56,409 --> 01:14:02,470
these was that's instead of that I'm

1328
01:13:59,710 --> 01:14:04,750
using an enum and then we're gonna

1329
01:14:02,470 --> 01:14:07,960
dispatch on the enum so every renderer

1330
01:14:04,750 --> 01:14:11,140
will start with one of these and when I

1331
01:14:07,960 --> 01:14:12,909
go to allocate one I'm responsible in my

1332
01:14:11,140 --> 01:14:14,650
initialization call for just saying

1333
01:14:12,909 --> 01:14:20,319
which one I am but that's about it

1334
01:14:14,649 --> 01:14:22,289
right so inside win32 handmade opengl in

1335
01:14:20,319 --> 01:14:24,789
here where we initialize one of these

1336
01:14:22,289 --> 01:14:28,029
load the wiggle extensions do all those

1337
01:14:24,789 --> 01:14:30,189
sorts of things when we're actually

1338
01:14:28,029 --> 01:14:33,579
doing all this I want to at some point

1339
01:14:30,189 --> 01:14:36,099
have someplace and do I really not have

1340
01:14:33,579 --> 01:14:37,930
oh there it is OpenGL in it I'm like in

1341
01:14:36,100 --> 01:14:40,140
whatever the function call that's that's

1342
01:14:37,930 --> 01:14:42,400
generally the same for all the platforms

1343
01:14:40,140 --> 01:14:45,340
which it looks like in this case is open

1344
01:14:42,399 --> 01:14:51,279
jail in it which is this I'm just gonna

1345
01:14:45,340 --> 01:14:53,560
set the renderer type and maybe I'll

1346
01:14:51,279 --> 01:14:55,679
actually call this renderer type I'm

1347
01:14:53,560 --> 01:14:59,590
gonna set the renderer type in this case

1348
01:14:55,680 --> 01:15:02,320
to be renderer type OpenGL that way

1349
01:14:59,590 --> 01:15:04,090
everyone who dispatches on this in the

1350
01:15:02,319 --> 01:15:05,920
future can immediately tell which type

1351
01:15:04,090 --> 01:15:08,079
of renderer they're dealing with and

1352
01:15:05,920 --> 01:15:11,140
they can go from there which is nice

1353
01:15:08,079 --> 01:15:12,519
that also means because I did this you

1354
01:15:11,140 --> 01:15:16,480
actually get something else for free

1355
01:15:12,520 --> 01:15:18,220
something that C++ sucks at doing which

1356
01:15:16,479 --> 01:15:20,049
is that you can actually just load from

1357
01:15:18,220 --> 01:15:21,940
a file the kind of thing that you want

1358
01:15:20,050 --> 01:15:24,820
and initialize that one because

1359
01:15:21,939 --> 01:15:27,489
basically you are already gonna write

1360
01:15:24,819 --> 01:15:29,319
the code necessary to do that whereas

1361
01:15:27,489 --> 01:15:32,649
C++ doesn't write that code for you

1362
01:15:29,319 --> 01:15:34,179
which is kind of annoying right so what

1363
01:15:32,649 --> 01:15:36,879
I can do here is instead of calling

1364
01:15:34,180 --> 01:15:41,619
win32 init OpenGL what I could do here

1365
01:15:36,880 --> 01:15:43,449
is say win32 you know init renderer and

1366
01:15:41,619 --> 01:15:46,269
pass the type of the renderer that I

1367
01:15:43,449 --> 01:15:52,319
actually wanted so for example what I

1368
01:15:46,270 --> 01:15:55,300
could say is instead of inside here

1369
01:15:52,319 --> 01:15:58,359
instead of this being win32 in an OpenGL

1370
01:15:55,300 --> 01:16:00,250
that I call directly I could have a

1371
01:15:58,359 --> 01:16:10,509
thing where we just say all right

1372
01:16:00,250 --> 01:16:16,180
there's a win32 allocate renderer and in

1373
01:16:10,510 --> 01:16:22,199
here we pass a platform render type and

1374
01:16:16,180 --> 01:16:26,020
we also expect you to pass the window DC

1375
01:16:22,199 --> 01:16:28,689
right if we're gonna do so and and that

1376
01:16:26,020 --> 01:16:34,180
I still do actually want this max quad

1377
01:16:28,689 --> 01:16:35,739
count per frame as well so then if you

1378
01:16:34,180 --> 01:16:37,659
do something like that it's pretty easy

1379
01:16:35,739 --> 01:16:39,010
for me to say look let's switch on the

1380
01:16:37,659 --> 01:16:40,479
render type let's see which one you

1381
01:16:39,010 --> 01:16:43,449
asked for and we'll give you back that

1382
01:16:40,479 --> 01:16:45,219
one so then in the future this gives us

1383
01:16:43,449 --> 01:16:47,738
the place where we would actually have

1384
01:16:45,220 --> 01:16:58,239
these sorts of things occur

1385
01:16:47,738 --> 01:16:59,919
like so now in general one can assume

1386
01:16:58,238 --> 01:17:03,428
that something like metal is not going

1387
01:16:59,920 --> 01:17:27,519
to happen right this by the way turns

1388
01:17:03,429 --> 01:17:29,019
the platform renderer so you know in the

1389
01:17:27,519 --> 01:17:31,630
future we might also want to make a

1390
01:17:29,019 --> 01:17:33,219
thing which just announces ahead of time

1391
01:17:31,630 --> 01:17:38,800
which ones are supported on a particular

1392
01:17:33,219 --> 01:17:41,609
platform I'm not sure how we would

1393
01:17:38,800 --> 01:17:47,849
necessarily want to do that but you know

1394
01:17:41,609 --> 01:18:00,609
something like this and then these

1395
01:17:47,849 --> 01:18:06,670
aren't ready yet but this one is and we

1396
01:18:00,609 --> 01:18:12,998
just thumb through to this just like

1397
01:18:06,670 --> 01:18:15,130
that so that's just a way to make it so

1398
01:18:12,998 --> 01:18:18,788
that we can call that sort of

1399
01:18:15,130 --> 01:18:21,998
generically and that way inside a

1400
01:18:18,788 --> 01:18:24,189
renderer you don't have to actually say

1401
01:18:21,998 --> 01:18:28,170
you want opengl specifically you could

1402
01:18:24,189 --> 01:18:33,759
instead say i want you know this

1403
01:18:28,170 --> 01:18:40,078
renderer type here's the max quad count

1404
01:18:33,760 --> 01:18:40,079
for frame and here's the OpenGL DC right

1405
01:18:43,479 --> 01:18:48,159
and that way this could actually be

1406
01:18:46,569 --> 01:18:49,809
something that's parametric it could be

1407
01:18:48,159 --> 01:18:51,519
passed it on the command line it could

1408
01:18:49,810 --> 01:18:54,400
be something that you switch at runtime

1409
01:18:51,520 --> 01:18:55,750
in a dialog box and you know you're

1410
01:18:54,399 --> 01:18:58,750
gonna get back the renderer that you

1411
01:18:55,750 --> 01:19:01,810
asked for here right so now this also

1412
01:18:58,750 --> 01:19:10,960
gives us a way to implement these calls

1413
01:19:01,810 --> 01:19:30,600
here so you know these are the calls

1414
01:19:10,960 --> 01:19:30,600
we're actually dealing with like so

1415
01:19:45,550 --> 01:19:52,539
and so each of these now has the ability

1416
01:19:49,270 --> 01:19:56,710
to do a switch to figure out which one

1417
01:19:52,539 --> 01:19:58,989
it's going to use right now one of the

1418
01:19:56,710 --> 01:20:01,720
interesting things about this is you can

1419
01:19:58,989 --> 01:20:03,340
actually also because you have a switch

1420
01:20:01,720 --> 01:20:06,699
statement you can do some things that

1421
01:20:03,340 --> 01:20:11,920
you couldn't otherwise have done such as

1422
01:20:06,699 --> 01:20:14,050
amortise like code across that jump so

1423
01:20:11,920 --> 01:20:16,300
for example inside process text or cue

1424
01:20:14,050 --> 01:20:20,680
if we wanted to we could actually do the

1425
01:20:16,300 --> 01:20:24,119
DQ first then do the dispatch after the

1426
01:20:20,680 --> 01:20:25,960
DQ and that would just work right so

1427
01:20:24,119 --> 01:20:29,079
there's other stuff we could choose to

1428
01:20:25,960 --> 01:20:31,539
do in here if we wanted to and it just

1429
01:20:29,079 --> 01:20:35,769
depends on whether we actually do want

1430
01:20:31,539 --> 01:20:40,180
to or not now as far as the game render

1431
01:20:35,770 --> 01:20:43,180
commands are concerned I think these are

1432
01:20:40,180 --> 01:20:45,039
just gonna mostly be straight dispatches

1433
01:20:43,180 --> 01:20:48,130
so for the moment I'm not gonna do

1434
01:20:45,039 --> 01:20:50,890
anything fancy I'm literally just gonna

1435
01:20:48,130 --> 01:20:53,380
do a thing here where we do our switch

1436
01:20:50,890 --> 01:20:54,880
we know that these are the only ones

1437
01:20:53,380 --> 01:20:58,000
that we're going to be handling on

1438
01:20:54,880 --> 01:20:59,350
Windows and right now we also know that

1439
01:20:58,000 --> 01:21:01,750
it's always going to look like that

1440
01:20:59,350 --> 01:21:05,650
because you're pretty much going to

1441
01:21:01,750 --> 01:21:08,229
always we're never gonna implement any

1442
01:21:05,649 --> 01:21:09,699
other renderers in here although if

1443
01:21:08,229 --> 01:21:11,859
someone else wanted to obviously they

1444
01:21:09,699 --> 01:21:14,139
could add more people in here if they

1445
01:21:11,859 --> 01:21:16,679
wished but that's not really probably

1446
01:21:14,140 --> 01:21:20,470
something we would be doing ourselves

1447
01:21:16,680 --> 01:21:22,240
anyway so as far as these dispatches are

1448
01:21:20,470 --> 01:21:23,800
concerned here we now just want to go

1449
01:21:22,239 --> 01:21:26,800
like okay how do we want to actually

1450
01:21:23,800 --> 01:21:28,090
dispatch out here again these are just

1451
01:21:26,800 --> 01:21:29,619
ones that we're not going to deal with

1452
01:21:28,090 --> 01:21:31,569
so for right now we're just going to

1453
01:21:29,619 --> 01:21:32,890
call things exactly we were calling them

1454
01:21:31,569 --> 01:21:37,229
which may not be the thing that we want

1455
01:21:32,890 --> 01:21:39,940
to do eventually but it's something that

1456
01:21:37,229 --> 01:21:42,549
will do for the moment just to keep the

1457
01:21:39,939 --> 01:21:45,269
current process correct

1458
01:21:42,550 --> 01:21:45,270
so anyway

1459
01:21:47,229 --> 01:21:57,229
there we go so this will dispatch off to

1460
01:21:54,260 --> 01:21:59,119
our OpenGL managed textures call which

1461
01:21:57,229 --> 01:22:03,139
again you can kind of see the way that

1462
01:21:59,119 --> 01:22:06,229
it works I almost want to put the switch

1463
01:22:03,140 --> 01:22:10,010
statement inside the DQ part because

1464
01:22:06,229 --> 01:22:12,439
once you DQ really it's simpler to just

1465
01:22:10,010 --> 01:22:14,329
have a single call implemented at the

1466
01:22:12,439 --> 01:22:17,210
render layer so it doesn't have to do it

1467
01:22:14,329 --> 01:22:19,699
this way and this is a pretty expensive

1468
01:22:17,210 --> 01:22:21,680
thing to do so I don't know to what

1469
01:22:19,699 --> 01:22:25,909
extent we really wanna I'm thinking this

1470
01:22:21,680 --> 01:22:30,380
might be a little bit this might be

1471
01:22:25,909 --> 01:22:32,680
changed a little bit from the way that

1472
01:22:30,380 --> 01:22:36,529
it's currently being done but you know

1473
01:22:32,680 --> 01:22:38,090
we'll see so as far as n frame is

1474
01:22:36,529 --> 01:22:42,979
concerned we know that all that does is

1475
01:22:38,090 --> 01:22:46,279
it just calls this it's gonna use oops

1476
01:22:42,979 --> 01:22:48,109
well actually to be honest I think it

1477
01:22:46,279 --> 01:22:52,340
probably should just dispatch directly

1478
01:22:48,109 --> 01:22:54,199
and just call frame and so this in the

1479
01:22:52,340 --> 01:22:57,140
future this OpenGL render commands I

1480
01:22:54,199 --> 01:23:02,479
think that really should just take game

1481
01:22:57,140 --> 01:23:09,920
render commands like so and this should

1482
01:23:02,479 --> 01:23:15,529
be commands renderer and while we're at

1483
01:23:09,920 --> 01:23:17,060
it we can assert that the type of the

1484
01:23:15,529 --> 01:23:22,909
renderer is the one that we think it

1485
01:23:17,060 --> 01:23:24,530
should be just in case somebody really

1486
01:23:22,909 --> 01:23:27,250
screwed up and for some reason is

1487
01:23:24,529 --> 01:23:31,279
passing around completely bogus handles

1488
01:23:27,250 --> 01:23:33,229
which we don't want them to do it would

1489
01:23:31,279 --> 01:23:35,739
be kind of weird if they did but you

1490
01:23:33,229 --> 01:23:35,739
know who knows

1491
01:23:40,579 --> 01:23:45,239
so here's us sort of extracting the

1492
01:23:44,189 --> 01:23:47,519
previous knowledge that we actually

1493
01:23:45,239 --> 01:23:51,149
needed and calling this thing the way

1494
01:23:47,520 --> 01:23:52,680
that we're calling this thing and again

1495
01:23:51,149 --> 01:23:54,509
these would be pretty straightforward as

1496
01:23:52,680 --> 01:23:56,640
well once we actually have this

1497
01:23:54,510 --> 01:24:00,420
implemented we just call them here and

1498
01:23:56,640 --> 01:24:02,310
off we go and again in here we if we

1499
01:24:00,420 --> 01:24:05,039
were free to basically complain about

1500
01:24:02,310 --> 01:24:09,960
any buddy who we don't want to support

1501
01:24:05,039 --> 01:24:12,000
on this platform okay and again another

1502
01:24:09,960 --> 01:24:18,659
way to look at this is just to say that

1503
01:24:12,000 --> 01:24:22,380
well you know the downside of doing a

1504
01:24:18,659 --> 01:24:25,699
switch dispatch is that it's people have

1505
01:24:22,380 --> 01:24:28,859
to add their stuff to these tables right

1506
01:24:25,699 --> 01:24:30,569
whereas if you do a planar based one

1507
01:24:28,859 --> 01:24:34,139
they just fill in the pointer that they

1508
01:24:30,569 --> 01:24:37,920
want and it can be it doesn't have to

1509
01:24:34,140 --> 01:24:39,750
touch these I don't have a strong

1510
01:24:37,920 --> 01:24:42,390
opinion one way or the other because the

1511
01:24:39,750 --> 01:24:44,789
bonus of the switch style is you can see

1512
01:24:42,390 --> 01:24:49,410
how everyone is working in one place

1513
01:24:44,789 --> 01:24:52,560
which I tend to prefer I like being able

1514
01:24:49,409 --> 01:24:54,960
to look inside a particular call and go

1515
01:24:52,560 --> 01:25:00,240
who are all the people who might be

1516
01:24:54,960 --> 01:25:03,449
fielding this thing and so absent an

1517
01:25:00,239 --> 01:25:07,880
eventual tool that actually allows us to

1518
01:25:03,449 --> 01:25:10,229
have both which is what we would want I

1519
01:25:07,880 --> 01:25:14,340
actually tend to prefer this way better

1520
01:25:10,229 --> 01:25:16,559
I would rather know the code then not

1521
01:25:14,340 --> 01:25:18,480
know the code like the other way the

1522
01:25:16,560 --> 01:25:20,970
benefit is not knowing the code you

1523
01:25:18,479 --> 01:25:23,489
don't have to know all the people who

1524
01:25:20,970 --> 01:25:25,560
might feel to render a call someone can

1525
01:25:23,489 --> 01:25:30,300
just add a new one in there and you'd

1526
01:25:25,560 --> 01:25:33,150
never know right sometimes I find that

1527
01:25:30,300 --> 01:25:35,369
to be off-putting and so I tend to like

1528
01:25:33,149 --> 01:25:37,469
things that use central dispatch more

1529
01:25:35,369 --> 01:25:39,659
than things that don't if you like

1530
01:25:37,470 --> 01:25:42,780
things that don't that's when you want

1531
01:25:39,659 --> 01:25:46,289
to use function pointers hopefully

1532
01:25:42,779 --> 01:25:48,500
that's a reasonable way to understand it

1533
01:25:46,289 --> 01:25:48,500
right

1534
01:25:48,779 --> 01:25:55,409
anyway so looking at this as far as the

1535
01:25:53,130 --> 01:25:57,569
dispatch is concerned the only thing

1536
01:25:55,409 --> 01:26:01,470
we're really interested in here is a

1537
01:25:57,569 --> 01:26:05,369
begin frame and as far as begin frame is

1538
01:26:01,470 --> 01:26:07,440
concerned I don't really know to what

1539
01:26:05,369 --> 01:26:11,069
extent we want to go down the OpenGL

1540
01:26:07,439 --> 01:26:14,489
specific allocation route but I want us

1541
01:26:11,069 --> 01:26:17,960
to be able to go down that route so what

1542
01:26:14,489 --> 01:26:21,539
I want to do is inside OpenGL in it I

1543
01:26:17,960 --> 01:26:26,579
want to have the the initialization part

1544
01:26:21,539 --> 01:26:29,399
of things I want to have that be able to

1545
01:26:26,579 --> 01:26:31,579
do those buffer sorts of operations as

1546
01:26:29,399 --> 01:26:35,399
necessary if that makes sense

1547
01:26:31,579 --> 01:26:37,289
um so I'm just leaving that Avenue open

1548
01:26:35,399 --> 01:26:40,109
and that's why this looks the way it

1549
01:26:37,289 --> 01:26:43,470
does I'm gonna take the game render

1550
01:26:40,109 --> 01:26:46,679
commands and just put them in here for

1551
01:26:43,470 --> 01:26:52,670
now but again that's not what we might

1552
01:26:46,680 --> 01:26:55,680
do in the eventual far future right so

1553
01:26:52,670 --> 01:26:58,170
I'm gonna call open she'll begin Frank

1554
01:26:55,680 --> 01:27:00,690
here I'll go ahead and change the name

1555
01:26:58,170 --> 01:27:04,199
of this to OpenGL and frame just to line

1556
01:27:00,689 --> 01:27:06,149
up with it and all I'm gonna do is

1557
01:27:04,199 --> 01:27:12,389
translate the pointer and then I'm gonna

1558
01:27:06,149 --> 01:27:14,189
pass these types along like so and I'm

1559
01:27:12,390 --> 01:27:19,220
just going to expect it to figure out

1560
01:27:14,189 --> 01:27:19,219
what to do in this circumstance

1561
01:27:33,498 --> 01:27:42,439
all right so in the event that we're

1562
01:27:36,118 --> 01:27:42,439
going to call open Jill begin frame

1563
01:27:42,920 --> 01:27:48,179
here's the renderer I'm gonna pass the

1564
01:27:46,559 --> 01:27:51,329
window with the window height and the

1565
01:27:48,179 --> 01:27:53,340
draw region what I want to do now is I

1566
01:27:51,328 --> 01:27:55,439
want to go into the platform layer and I

1567
01:27:53,340 --> 01:27:58,769
want to get rid of the that sort of

1568
01:27:55,439 --> 01:27:59,728
defaults I think it's actually not in

1569
01:27:58,769 --> 01:28:03,030
there anymore I think it's in their

1570
01:27:59,729 --> 01:28:05,369
default render yeah this thing I want

1571
01:28:03,029 --> 01:28:09,960
this to go away and I'm gonna put this

1572
01:28:05,368 --> 01:28:12,808
in here and probably I will I will do a

1573
01:28:09,960 --> 01:28:17,038
little bit more work than just that as

1574
01:28:12,809 --> 01:28:21,269
well so we'll kind of we'll see sort of

1575
01:28:17,038 --> 01:28:23,340
how that shakes itself out as we go a

1576
01:28:21,269 --> 01:28:26,369
little further down the line but that's

1577
01:28:23,340 --> 01:28:28,828
sort of a separate issue alright so in

1578
01:28:26,368 --> 01:28:33,799
here when we actually do begin frame

1579
01:28:28,828 --> 01:28:35,698
we're gonna set this stuff up here and

1580
01:28:33,800 --> 01:28:38,130
we're probably going to have some more

1581
01:28:35,698 --> 01:28:41,908
work to do with how we want this to be

1582
01:28:38,130 --> 01:28:50,038
set up in general but what am I do here

1583
01:28:41,908 --> 01:28:53,248
is this stuff is all known right so

1584
01:28:50,038 --> 01:29:03,748
inside the OpenGL renderer we know like

1585
01:28:53,248 --> 01:29:07,618
this is a our white bitmap is known our

1586
01:29:03,748 --> 01:29:13,590
bitmap array is also known so is our

1587
01:29:07,618 --> 01:29:14,009
vertex array and our map max vertex

1588
01:29:13,590 --> 01:29:17,420
count

1589
01:29:14,010 --> 01:29:17,420
we didn't store but we should

1590
01:29:25,539 --> 01:29:29,949
when we actually initialize this stuff

1591
01:29:37,689 --> 01:29:44,449
okay so we want that and as far as these

1592
01:29:42,710 --> 01:29:46,970
push buffer things are concerned like I

1593
01:29:44,449 --> 01:29:48,260
saying those should now just be we don't

1594
01:29:46,970 --> 01:29:50,900
need to have those be separately

1595
01:29:48,260 --> 01:29:53,630
allocated so here I'm just gonna say

1596
01:29:50,899 --> 01:29:59,539
look we want the size of whatever our

1597
01:29:53,630 --> 01:30:02,659
push buffer memory is the base pointer

1598
01:29:59,539 --> 01:30:12,710
for that is just going to be whatever

1599
01:30:02,659 --> 01:30:14,779
the push buffer memory was and same

1600
01:30:12,710 --> 01:30:17,109
would be true of where we're at

1601
01:30:14,779 --> 01:30:20,239
currently those pointers kind of advance

1602
01:30:17,109 --> 01:30:25,549
this is all fine but not exactly what I

1603
01:30:20,239 --> 01:30:27,649
want in this case so the these widths

1604
01:30:25,550 --> 01:30:31,250
and Heights are based on this draw

1605
01:30:27,649 --> 01:30:33,319
region that's passed in and the window

1606
01:30:31,250 --> 01:30:35,180
is not the window width and height is

1607
01:30:33,319 --> 01:30:38,019
really just something that is used later

1608
01:30:35,180 --> 01:30:43,520
on that doesn't actually have to be

1609
01:30:38,020 --> 01:30:45,530
observed much as far as the switches

1610
01:30:43,520 --> 01:30:46,670
back to the renderer it doesn't really

1611
01:30:45,529 --> 01:30:49,250
have to be observed much as far as

1612
01:30:46,670 --> 01:30:51,170
anyone else is concerned so it's not a

1613
01:30:49,250 --> 01:30:53,180
setting the settings these two are

1614
01:30:51,170 --> 01:30:56,149
settings because they affect how big our

1615
01:30:53,180 --> 01:30:59,180
back our backing textures are so those

1616
01:30:56,149 --> 01:31:02,089
are important settings wise but the rest

1617
01:30:59,180 --> 01:31:05,630
of it really isn't an issue so what I'm

1618
01:31:02,090 --> 01:31:08,690
gonna do here is make a few make a few

1619
01:31:05,630 --> 01:31:11,329
changes to start with what I'm going to

1620
01:31:08,689 --> 01:31:15,439
do is say all right the draw region is

1621
01:31:11,329 --> 01:31:19,430
an actual parameter that just gets saved

1622
01:31:15,439 --> 01:31:20,960
in here as is the window width and the

1623
01:31:19,430 --> 01:31:23,090
window height so the game render

1624
01:31:20,960 --> 01:31:27,609
commands will keep that information with

1625
01:31:23,090 --> 01:31:30,680
them as a direct setting so the commands

1626
01:31:27,609 --> 01:31:33,829
and these this is going to be an arrow

1627
01:31:30,680 --> 01:31:40,130
in a second here the commands will save

1628
01:31:33,829 --> 01:31:42,649
directly what those are for future

1629
01:31:40,130 --> 01:31:45,590
reference but then it will also and let

1630
01:31:42,649 --> 01:31:48,799
me go ahead and change these two arrows

1631
01:31:45,590 --> 01:31:50,739
here because remember we're actually

1632
01:31:48,800 --> 01:32:00,279
just going to use

1633
01:31:50,738 --> 01:32:04,288
a dresser so what we want to do here is

1634
01:32:00,279 --> 01:32:07,328
say okay these settings actually

1635
01:32:04,288 --> 01:32:08,498
reinitialize when we see these change so

1636
01:32:07,328 --> 01:32:10,658
we're gonna save these but they're not

1637
01:32:08,498 --> 01:32:12,488
actually part of the settings and then

1638
01:32:10,658 --> 01:32:14,439
we are going to use these this width and

1639
01:32:12,488 --> 01:32:19,198
height here is actually the width and

1640
01:32:14,439 --> 01:32:19,198
height that we get from the draw region

1641
01:32:21,510 --> 01:32:26,769
so this coming here but the important

1642
01:32:24,399 --> 01:32:29,738
thing to remember is this stuff should

1643
01:32:26,769 --> 01:32:33,070
actually now come from the renderer so

1644
01:32:29,738 --> 01:32:35,549
if we actually go back to the opengl

1645
01:32:33,069 --> 01:32:38,590
side of things and when we're actually

1646
01:32:35,550 --> 01:32:45,130
initializing OpenGL itself what we want

1647
01:32:38,590 --> 01:32:48,639
to do in there is Jonas there it is when

1648
01:32:45,130 --> 01:32:51,998
we actually initialize our settings

1649
01:32:48,639 --> 01:32:55,269
which I don't know when we if we ever do

1650
01:32:51,998 --> 01:32:57,550
if we just let them get zeroed out what

1651
01:32:55,269 --> 01:33:00,849
I want to do here is actually set those

1652
01:32:57,550 --> 01:33:05,800
settings here because that way what I

1653
01:33:00,849 --> 01:33:08,590
can do is say the command settings are

1654
01:33:05,800 --> 01:33:13,498
going to come from the settings that we

1655
01:33:08,590 --> 01:33:16,828
had set in OpenGL these right here

1656
01:33:13,498 --> 01:33:16,828
current settings

1657
01:33:24,890 --> 01:33:35,989
so that will be initialized here and

1658
01:33:30,899 --> 01:33:38,129
then these when you start will just be

1659
01:33:35,988 --> 01:33:40,139
these game Raider commands will just be

1660
01:33:38,130 --> 01:33:42,869
initialized from whatever the whatever

1661
01:33:40,140 --> 01:33:44,460
the render was currently using you know

1662
01:33:42,869 --> 01:33:47,970
I'm saying cuz that's what I actually

1663
01:33:44,460 --> 01:33:49,590
want that to come from so the current

1664
01:33:47,970 --> 01:33:51,210
settings is what the settings will be

1665
01:33:49,590 --> 01:33:52,619
but then they immediately get

1666
01:33:51,210 --> 01:33:54,090
overwritten by the draw region because

1667
01:33:52,619 --> 01:33:56,010
we know that that gets updated every

1668
01:33:54,090 --> 01:33:58,140
frame anything else you might want to

1669
01:33:56,010 --> 01:34:01,500
update you would have to change send to

1670
01:33:58,140 --> 01:34:03,840
the commands separately and we could now

1671
01:34:01,500 --> 01:34:06,720
that we have a more official rendering

1672
01:34:03,840 --> 01:34:08,699
API we could take these out of here and

1673
01:34:06,720 --> 01:34:10,230
actually put them into a separate call

1674
01:34:08,699 --> 01:34:11,279
you make but I don't really think I want

1675
01:34:10,229 --> 01:34:13,919
to do that because it seems like a

1676
01:34:11,279 --> 01:34:16,019
totally reasonable place to bundle them

1677
01:34:13,920 --> 01:34:23,390
up and put them here so I'm gonna just

1678
01:34:16,020 --> 01:34:30,180
leave that the way it is okay so

1679
01:34:23,390 --> 01:34:31,590
renderer so as far as this just

1680
01:34:30,180 --> 01:34:32,909
concerned really doesn't do anything

1681
01:34:31,590 --> 01:34:35,960
right now and that's just because we

1682
01:34:32,909 --> 01:34:39,960
don't have other renderers at the moment

1683
01:34:35,960 --> 01:34:44,520
that's just you know that's just the way

1684
01:34:39,960 --> 01:34:47,609
it is OpenGL managed textures begin

1685
01:34:44,520 --> 01:34:52,710
frame and end frame I guess are not

1686
01:34:47,609 --> 01:34:55,559
actually defined in these yet which why

1687
01:34:52,710 --> 01:34:57,869
is that oh it's because these are kind

1688
01:34:55,560 --> 01:35:00,480
of in a weird order which is a little

1689
01:34:57,869 --> 01:35:03,559
bit bizarre but that's fine so I'll just

1690
01:35:00,479 --> 01:35:03,559
go ahead and define these

1691
01:35:20,329 --> 01:35:26,510
and that reminds me we did not add as I

1692
01:35:23,000 --> 01:35:39,409
wanted to add into the render commands a

1693
01:35:26,510 --> 01:35:43,340
pointer to the actual renderer now we

1694
01:35:39,409 --> 01:35:45,109
don't really have to do that and maybe

1695
01:35:43,340 --> 01:35:46,489
the argument is we shouldn't I mean when

1696
01:35:45,109 --> 01:35:48,380
we look at it it's like do we really

1697
01:35:46,489 --> 01:35:56,559
need that in there because we could just

1698
01:35:48,380 --> 01:36:03,350
do this right and maybe that's better

1699
01:35:56,560 --> 01:36:04,490
because why not hard to say I'm not sure

1700
01:36:03,350 --> 01:36:11,780
I have a strong opinion about that

1701
01:36:04,489 --> 01:36:16,989
either way but I mean I can see an

1702
01:36:11,779 --> 01:36:16,989
argument for it either way

1703
01:36:21,819 --> 01:36:29,590
right I don't know how I feel about that

1704
01:36:24,770 --> 01:36:34,490
I really don't have strong opinion but

1705
01:36:29,590 --> 01:36:36,789
that's what that's what we're going with

1706
01:36:34,489 --> 01:36:36,789
for now

1707
01:36:43,420 --> 01:36:54,219
um what do you say you needed a renderer

1708
01:36:51,130 --> 01:36:54,779
we can provide one of those to you all

1709
01:36:54,219 --> 01:37:00,520
right

1710
01:36:54,779 --> 01:37:02,609
so just to walk through that my OpenGL

1711
01:37:00,520 --> 01:37:03,810
in it here

1712
01:37:02,609 --> 01:37:19,659
[Music]

1713
01:37:03,810 --> 01:37:23,320
how does definition changed okay and so

1714
01:37:19,659 --> 01:37:32,019
open drilling it in this context needs

1715
01:37:23,319 --> 01:37:39,309
to take opengl pointer itself and i

1716
01:37:32,020 --> 01:37:41,410
think everything else is right yeah so I

1717
01:37:39,310 --> 01:37:44,530
think that's basically it let's just go

1718
01:37:41,409 --> 01:37:46,149
through and debug and then we'll just do

1719
01:37:44,529 --> 01:37:48,448
a quick little check to make sure our

1720
01:37:46,149 --> 01:37:54,729
API is what we want

1721
01:37:48,448 --> 01:37:57,539
hmm oh that's not debugging it's not

1722
01:37:54,729 --> 01:37:57,539
what I meant to do at all

1723
01:37:58,560 --> 01:38:03,730
although I guess we've got a good bug

1724
01:38:02,409 --> 01:38:07,569
there so let me just go ahead and do it

1725
01:38:03,729 --> 01:38:10,359
so we're not resetting our our vertex

1726
01:38:07,569 --> 01:38:12,789
count it looks like so I think I just

1727
01:38:10,359 --> 01:38:15,250
forgot to zero out that structure let me

1728
01:38:12,789 --> 01:38:18,429
just do that first and then we'll step

1729
01:38:15,250 --> 01:38:20,319
through I want to step through I just

1730
01:38:18,429 --> 01:38:24,060
figured since there was an obvious bug

1731
01:38:20,319 --> 01:38:24,059
we might as well do it

1732
01:38:28,720 --> 01:38:38,210
all right so in the render commands

1733
01:38:31,310 --> 01:38:42,320
themselves what I wanted I want to make

1734
01:38:38,210 --> 01:38:44,840
sure I set everything so we've got yeah

1735
01:38:42,319 --> 01:38:50,059
it's just the vertex count is the only

1736
01:38:44,840 --> 01:38:56,210
thing we didn't set so now that's

1737
01:38:50,060 --> 01:38:59,510
initialized and we're good to go so

1738
01:38:56,210 --> 01:39:01,250
that's everything and let me just double

1739
01:38:59,510 --> 01:39:08,960
check to make sure everything is kosher

1740
01:39:01,250 --> 01:39:15,260
here if we take a look at our our

1741
01:39:08,960 --> 01:39:16,819
process after the eight billion windows

1742
01:39:15,260 --> 01:39:20,329
processes a lot of machine that's not

1743
01:39:16,819 --> 01:39:26,599
doing anything mind you unbelievable

1744
01:39:20,329 --> 01:39:30,010
here's us let me just get a few more can

1745
01:39:26,600 --> 01:39:30,010
I get more columns in here

1746
01:39:35,329 --> 01:39:42,448
how do i how do I get there we go like

1747
01:39:39,988 --> 01:39:44,689
how do I get something I actually find

1748
01:39:42,448 --> 01:39:44,689
useful

1749
01:39:55,539 --> 01:40:02,199
what just happened I can't click on

1750
01:39:58,930 --> 01:40:03,970
anything I have no idea what is going on

1751
01:40:02,199 --> 01:40:06,250
all right

1752
01:40:03,970 --> 01:40:07,030
so let me sort by image name here just

1753
01:40:06,250 --> 01:40:10,050
so I could find us

1754
01:40:07,029 --> 01:40:10,050
there's our renderer

1755
01:40:18,488 --> 01:40:32,169
I will say as far as like as far as

1756
01:40:30,248 --> 01:40:36,130
commit is concerned there it's quite

1757
01:40:32,170 --> 01:40:47,489
large is that actually us did we

1758
01:40:36,130 --> 01:40:49,929
actually allocate that much and if so

1759
01:40:47,488 --> 01:40:53,428
when did we allocate it I'd like to take

1760
01:40:49,929 --> 01:40:53,429
a quick look at that if you don't mind

1761
01:40:59,550 --> 01:41:05,529
so let's take a look here I'm gonna

1762
01:41:02,319 --> 01:41:09,308
force this to be on top assuming it

1763
01:41:05,529 --> 01:41:21,908
still has that feature of course it

1764
01:41:09,309 --> 01:41:25,619
doesn't well so I'm just want to look at

1765
01:41:21,908 --> 01:41:25,618
see when that commit actually happens

1766
01:41:28,679 --> 01:41:32,559
I'm assuming it's part of our render

1767
01:41:30,939 --> 01:41:40,359
initialization I just want to know who's

1768
01:41:32,559 --> 01:41:44,980
responsible so here's our commit charge

1769
01:41:40,359 --> 01:41:48,308
currently so if you look at how much is

1770
01:41:44,979 --> 01:41:50,229
committed there that's 23 megabytes if

1771
01:41:48,309 --> 01:41:53,889
I'm reading this correctly right because

1772
01:41:50,229 --> 01:41:57,069
this is this is in kilobytes already so

1773
01:41:53,889 --> 01:41:59,800
this is 20 3 megabytes committed I don't

1774
01:41:57,069 --> 01:42:01,988
actually know why because if you

1775
01:41:59,800 --> 01:42:05,980
actually look at what we've done here

1776
01:42:01,988 --> 01:42:08,439
it's almost nothing so who actually

1777
01:42:05,979 --> 01:42:10,658
committed the 23 megabytes I guess

1778
01:42:08,439 --> 01:42:14,169
that's just what Windows what it costs

1779
01:42:10,658 --> 01:42:18,279
to open a single window with nothing in

1780
01:42:14,170 --> 01:42:20,019
it because we haven't done anything or

1781
01:42:18,279 --> 01:42:23,979
unless the C runtime library maybe did

1782
01:42:20,019 --> 01:42:25,719
something I don't know anyway not great

1783
01:42:23,979 --> 01:42:28,839
let's take a look at this allocation

1784
01:42:25,719 --> 01:42:32,109
here again doesn't affect us much in

1785
01:42:28,840 --> 01:42:33,998
terms of our committee charged I'm gonna

1786
01:42:32,109 --> 01:42:36,029
go ahead and step over the renderer

1787
01:42:33,998 --> 01:42:38,260
allocation and see what happens there

1788
01:42:36,029 --> 01:42:42,399
I'm assuming that's where a lot of that

1789
01:42:38,260 --> 01:42:44,619
comes from well you know it's a fair bit

1790
01:42:42,399 --> 01:42:51,098
of allocation but more in line with what

1791
01:42:44,618 --> 01:42:54,339
I would have expected right so because

1792
01:42:51,099 --> 01:42:58,179
we do we allocate sizeable very large

1793
01:42:54,340 --> 01:42:59,619
buffers for streaming vertices so 132

1794
01:42:58,179 --> 01:43:01,420
megabytes is not what I would like to

1795
01:42:59,618 --> 01:43:06,698
see there but I could we should go check

1796
01:43:01,420 --> 01:43:12,399
but I could buy that so I don't know if

1797
01:43:06,698 --> 01:43:13,748
our test scene it might be our test

1798
01:43:12,399 --> 01:43:15,819
scene it's I don't know how much space

1799
01:43:13,748 --> 01:43:18,460
we surrend test see how much we store in

1800
01:43:15,819 --> 01:43:20,618
there but we'll see so when we load

1801
01:43:18,460 --> 01:43:24,599
these textures in I'm assuming those

1802
01:43:20,618 --> 01:43:24,598
don't really do much yeah

1803
01:43:29,208 --> 01:43:39,118
so still right around there nothing

1804
01:43:31,918 --> 01:43:47,639
particularly weird going on so now I'm

1805
01:43:39,118 --> 01:43:55,438
going to call begin frame again render

1806
01:43:47,639 --> 01:43:57,328
group push simple scene again not really

1807
01:43:55,439 --> 01:43:58,709
you can see some of that stuff getting

1808
01:43:57,328 --> 01:44:01,618
paged in because we're now actually

1809
01:43:58,708 --> 01:44:06,059
using it well page gin is wrong but

1810
01:44:01,618 --> 01:44:09,058
becoming active and then we'll do it end

1811
01:44:06,059 --> 01:44:15,479
frame to render and whoa

1812
01:44:09,059 --> 01:44:19,918
so really beefy I mean just a massive

1813
01:44:15,479 --> 01:44:21,510
hit for calling in frame right so I

1814
01:44:19,918 --> 01:44:23,760
don't know I mean I'm assuming that's a

1815
01:44:21,510 --> 01:44:26,550
driver situation that the driver is

1816
01:44:23,760 --> 01:44:28,769
allocating all that on our behalf

1817
01:44:26,550 --> 01:44:29,880
like it's compiler or something but I

1818
01:44:28,769 --> 01:44:31,979
don't know I just want to make sure

1819
01:44:29,880 --> 01:44:35,340
we're not doing something really dumb so

1820
01:44:31,979 --> 01:44:38,070
let's just double check here we are

1821
01:44:35,340 --> 01:44:40,708
again at a you know somewhat reasonable

1822
01:44:38,069 --> 01:44:45,018
size for what we would expect just going

1823
01:44:40,708 --> 01:44:45,019
through here we're you know

1824
01:44:52,310 --> 01:45:02,010
so even just even just this it's

1825
01:44:58,529 --> 01:45:06,960
probably this this is maybe where our

1826
01:45:02,010 --> 01:45:10,470
textures get allocated or something I'm

1827
01:45:06,960 --> 01:45:13,369
guessing so here we are at a sort of

1828
01:45:10,470 --> 01:45:17,340
somewhat understandable amount of memory

1829
01:45:13,369 --> 01:45:19,079
we step into opengl chains settings I'm

1830
01:45:17,340 --> 01:45:20,640
assuming that freeing frame buffers

1831
01:45:19,079 --> 01:45:22,170
isn't going to do anything and freeing

1832
01:45:20,640 --> 01:45:32,820
programs cuz that's just getting rid of

1833
01:45:22,170 --> 01:45:37,230
stuff right so that won't change much so

1834
01:45:32,819 --> 01:45:39,299
here's the compile phase no big hit

1835
01:45:37,229 --> 01:45:44,369
there we're gonna create the resolved

1836
01:45:39,300 --> 01:45:46,590
frame buffer so that took a hit but not

1837
01:45:44,369 --> 01:45:49,890
of the form we're talking about here

1838
01:45:46,590 --> 01:46:00,140
gonna create another frame buffer so

1839
01:45:49,890 --> 01:46:00,140
just just that it's just that one call

1840
01:46:05,000 --> 01:46:17,460
allocated 300 megabytes and when I say

1841
01:46:13,380 --> 01:46:19,319
Alkaid I mean like reserved we don't you

1842
01:46:17,460 --> 01:46:25,140
know we don't know that anyone actually

1843
01:46:19,319 --> 01:46:30,409
needs it it's just reserved I don't know

1844
01:46:25,140 --> 01:46:37,829
why but that's where it is going right I

1845
01:46:30,409 --> 01:46:39,599
mean that's let's step in there so

1846
01:46:37,829 --> 01:46:40,199
there's our bind nothing has happened

1847
01:46:39,600 --> 01:46:44,060
yet

1848
01:46:40,199 --> 01:46:44,059
here's our color handle

1849
01:46:49,109 --> 01:46:56,738
so yeah it's it's reserving 200

1850
01:46:52,630 --> 01:47:02,909
megabytes for that texture is that a

1851
01:46:56,738 --> 01:47:09,698
reasonable amount for it to do I'm

1852
01:47:02,909 --> 01:47:14,698
curious you know maybe it is so we have

1853
01:47:09,698 --> 01:47:18,279
width times height so that's the size of

1854
01:47:14,698 --> 01:47:24,428
in pixels like that's how many pixels

1855
01:47:18,279 --> 01:47:27,219
there are the filter type is and the

1856
01:47:24,429 --> 01:47:28,750
multi sampled thing is relevant only in

1857
01:47:27,219 --> 01:47:33,880
that multi sample will need to store

1858
01:47:28,750 --> 01:47:36,399
more data so what's our default texture

1859
01:47:33,880 --> 01:47:39,010
format here I assume color index

1860
01:47:36,399 --> 01:47:42,069
well color index is 0 in this case so

1861
01:47:39,010 --> 01:47:52,860
it's GL rgba 8 is what's actually being

1862
01:47:42,069 --> 01:47:52,859
allocated here oops

1863
01:48:06,630 --> 01:48:12,300
so if that were the case I mean this

1864
01:48:09,329 --> 01:48:15,329
should be pretty tiny is this multi

1865
01:48:12,300 --> 01:48:18,470
sampled it is so if it's multi sampled

1866
01:48:15,329 --> 01:48:23,670
so this is RGB a eight so it's four

1867
01:48:18,470 --> 01:48:25,829
that's three megabytes right and so how

1868
01:48:23,670 --> 01:48:30,420
many multi samples are there gonna be

1869
01:48:25,829 --> 01:48:34,590
right well we know it allocated 200

1870
01:48:30,420 --> 01:48:37,579
megabytes roughly you know I'm saying so

1871
01:48:34,590 --> 01:48:46,770
how many samples would it have to store

1872
01:48:37,579 --> 01:48:54,260
if how come I can't edit this I hate

1873
01:48:46,770 --> 01:48:54,260
Visual Studio come on here we go

1874
01:48:54,890 --> 01:49:08,250
so it would be 56 samples maybe it's

1875
01:49:00,720 --> 01:49:11,670
forcing it into a non RGB a 8 state or

1876
01:49:08,250 --> 01:49:16,159
well you know it could be that because

1877
01:49:11,670 --> 01:49:16,159
later ones are in different

1878
01:49:23,899 --> 01:49:27,759
are in different formats

1879
01:49:34,378 --> 01:49:47,840
we should look so they're 16 so right so

1880
01:49:40,828 --> 01:49:47,840
this would be more like that

1881
01:49:59,448 --> 01:50:04,460
so you know it's not out of the question

1882
01:50:02,270 --> 01:50:05,390
I mean I guess what I would say is this

1883
01:50:04,460 --> 01:50:07,819
multisample

1884
01:50:05,390 --> 01:50:09,949
buffers are pretty darn expensive that's

1885
01:50:07,819 --> 01:50:16,479
the case I hadn't really thought that

1886
01:50:09,948 --> 01:50:16,479
through before but that's really nasty I

1887
01:50:18,939 --> 01:50:27,079
feel like that gives us a good impetus

1888
01:50:21,619 --> 01:50:28,420
to only use that just to rasterize our

1889
01:50:27,079 --> 01:50:31,760
[Music]

1890
01:50:28,420 --> 01:50:37,039
cube edges because that's the only thing

1891
01:50:31,760 --> 01:50:41,590
we use multi sampling for cuz that's

1892
01:50:37,039 --> 01:50:41,590
just too much memory you know

1893
01:50:47,189 --> 01:50:53,319
especially if we're if we store things

1894
01:50:49,810 --> 01:50:55,530
in 16 that you know obviously if we

1895
01:50:53,319 --> 01:51:05,019
store them in not in 16 bit it's a lot

1896
01:50:55,529 --> 01:51:06,519
easier but I mean looking through there

1897
01:51:05,020 --> 01:51:18,880
so I'm just gonna run this one more time

1898
01:51:06,520 --> 01:51:29,050
here looking at the the memory usage

1899
01:51:18,880 --> 01:51:31,900
there I do feel like and again this to

1900
01:51:29,050 --> 01:51:34,239
be just to be clear the reason that I

1901
01:51:31,899 --> 01:51:37,089
assumed that it's we're seeing that hit

1902
01:51:34,238 --> 01:51:39,789
on our side is because OpenGL probably

1903
01:51:37,090 --> 01:51:41,350
is allocating a backing region for those

1904
01:51:39,789 --> 01:51:43,659
textures should they need to get swapped

1905
01:51:41,350 --> 01:51:45,579
out of the card so it's actually telling

1906
01:51:43,659 --> 01:51:48,099
insert in a way it's sort of telling us

1907
01:51:45,579 --> 01:51:48,760
a proxy for what's happening on the card

1908
01:51:48,100 --> 01:51:50,770
right

1909
01:51:48,760 --> 01:51:53,380
those those frame buffers are being

1910
01:51:50,770 --> 01:51:56,410
reserved on the card and we're reserving

1911
01:51:53,380 --> 01:51:59,619
a matching space for them on the CPU

1912
01:51:56,409 --> 01:52:01,930
side but I care about it either way

1913
01:51:59,619 --> 01:52:04,300
right even though this isn't really

1914
01:52:01,930 --> 01:52:06,699
getting used in terms of CPU memory I

1915
01:52:04,300 --> 01:52:09,460
still it's a problem in fact it's it's a

1916
01:52:06,698 --> 01:52:10,960
worse problem because the GPU is the one

1917
01:52:09,460 --> 01:52:12,430
that actually has the more constrained

1918
01:52:10,960 --> 01:52:15,390
memory in most circumstances I'm

1919
01:52:12,430 --> 01:52:24,760
interested to see if I change this to

1920
01:52:15,390 --> 01:52:29,050
RGB a8 if that memory drops in half and

1921
01:52:24,760 --> 01:52:31,360
it didn't quite so it does a little bit

1922
01:52:29,050 --> 01:52:33,039
right you can see that it does it shaves

1923
01:52:31,359 --> 01:52:37,359
quite a bit off there's like 300

1924
01:52:33,039 --> 01:52:40,899
megabytes saved there but again I think

1925
01:52:37,359 --> 01:52:43,779
probably because there's a bunch that

1926
01:52:40,899 --> 01:52:46,059
are allocated that we're already RGB a

1927
01:52:43,779 --> 01:52:51,969
color color channel 0 was always that

1928
01:52:46,060 --> 01:52:56,170
way yeah you don't really get you don't

1929
01:52:51,969 --> 01:52:57,849
really get much of a other having for

1930
01:52:56,170 --> 01:52:59,800
the the earlier parts

1931
01:52:57,849 --> 01:53:01,719
what I will say is that you don't see

1932
01:52:59,800 --> 01:53:04,659
much of a difference so probably we

1933
01:53:01,719 --> 01:53:06,609
could have gone with with a bit either

1934
01:53:04,658 --> 01:53:08,348
way like it's not really causing any

1935
01:53:06,609 --> 01:53:11,379
problems for us either but that's kind

1936
01:53:08,349 --> 01:53:13,569
of a separate issue lighting might be a

1937
01:53:11,378 --> 01:53:16,809
place where we see that causing more of

1938
01:53:13,569 --> 01:53:19,658
a problem but you know we'll see

1939
01:53:16,809 --> 01:53:22,989
either way I'm fine with all that the

1940
01:53:19,658 --> 01:53:24,819
the the amount of memory that's required

1941
01:53:22,988 --> 01:53:27,538
for those buffers though just seems like

1942
01:53:24,819 --> 01:53:27,538
a problem to me

1943
01:53:28,679 --> 01:53:33,550
and again I think that's pretty much

1944
01:53:31,059 --> 01:53:35,199
entirely due to the multi sampling so

1945
01:53:33,550 --> 01:53:38,010
you know if we were to turn multi

1946
01:53:35,198 --> 01:53:38,009
sampling off

1947
01:53:51,300 --> 01:53:55,010
so here we are with multi sampling off

1948
01:53:55,550 --> 01:54:05,070
and I mean I just look at the difference

1949
01:53:59,819 --> 01:54:12,738
between those you know it's it's kind of

1950
01:54:05,069 --> 01:54:16,349
nuts right so it's hard to say I mean

1951
01:54:12,738 --> 01:54:18,119
the problem is I really do think we want

1952
01:54:16,350 --> 01:54:19,860
the multi sampling so I think we're

1953
01:54:18,119 --> 01:54:22,109
gonna want to do some work to minimize

1954
01:54:19,859 --> 01:54:24,420
the degree to which multi sampling comes

1955
01:54:22,109 --> 01:54:30,659
into play perhaps making it so that it

1956
01:54:24,420 --> 01:54:33,329
doesn't happen on the other on on other

1957
01:54:30,659 --> 01:54:35,010
depth feels which I think we try to do a

1958
01:54:33,329 --> 01:54:37,170
little bit of but you know it's a little

1959
01:54:35,010 --> 01:54:38,670
bit hard to do I'm gonna go in here and

1960
01:54:37,170 --> 01:54:40,319
make it so that we're back up to a

1961
01:54:38,670 --> 01:54:42,060
reasonable frame rate just by again

1962
01:54:40,319 --> 01:54:43,949
reducing those texture change calls

1963
01:54:42,060 --> 01:54:45,930
since I believe that's our stress point

1964
01:54:43,949 --> 01:54:47,250
currently so what I'm gonna do here is

1965
01:54:45,930 --> 01:55:00,270
just change it so that we don't have

1966
01:54:47,250 --> 01:55:03,859
that and so then now if we look kind of

1967
01:55:00,270 --> 01:55:06,720
at the at the just the image quality

1968
01:55:03,859 --> 01:55:08,339
it's a little bit probably difficult for

1969
01:55:06,720 --> 01:55:10,530
folks to see it out there because it's a

1970
01:55:08,340 --> 01:55:14,430
relatively it 1080p is a relatively high

1971
01:55:10,529 --> 01:55:16,139
resolution for internet video

1972
01:55:14,430 --> 01:55:17,850
compression so you're probably just not

1973
01:55:16,140 --> 01:55:19,350
gonna see the quality difference but I'm

1974
01:55:17,850 --> 01:55:24,440
just taking a little look there at that

1975
01:55:19,350 --> 01:55:24,440
I'm gonna now turn that multi sampling

1976
01:55:25,760 --> 01:55:28,760
off

1977
01:55:31,270 --> 01:55:36,760
and take a look at what ends up

1978
01:55:33,880 --> 01:55:39,819
happening again just looking at the

1979
01:55:36,760 --> 01:55:41,469
lines and it's it's obvious like you

1980
01:55:39,819 --> 01:55:42,939
could it's it's much better with the

1981
01:55:41,469 --> 01:55:52,300
multi sampling on there's really no

1982
01:55:42,939 --> 01:55:53,649
question I'll just double check more - I

1983
01:55:52,300 --> 01:55:57,029
should I could just make a key that

1984
01:55:53,649 --> 01:55:57,029
turns out on and off since we allow that

1985
01:56:08,239 --> 01:56:14,809
but you just see you see a lot less

1986
01:56:10,159 --> 01:56:19,460
creepy crawlies on those edges I mean

1987
01:56:14,810 --> 01:56:22,280
I'm looking at them and I just it really

1988
01:56:19,460 --> 01:56:23,840
looks a lot it a lot smoother to me on

1989
01:56:22,279 --> 01:56:34,189
those edges with the multi sampling

1990
01:56:23,840 --> 01:56:36,289
turned on so I feel like I feel like we

1991
01:56:34,189 --> 01:56:39,079
need to go ahead and figure out a way to

1992
01:56:36,289 --> 01:56:41,180
just make sure the depth peels don't use

1993
01:56:39,079 --> 01:56:48,590
multi sampling because it's maybe just a

1994
01:56:41,180 --> 01:56:50,869
little too much at that point I don't

1995
01:56:48,590 --> 01:56:53,239
know what else to do because the problem

1996
01:56:50,869 --> 01:56:55,359
is we compound like you know one multi

1997
01:56:53,239 --> 01:56:58,699
sampling buffer maybe okay

1998
01:56:55,359 --> 01:57:03,409
but in multi sampling buffers where n is

1999
01:56:58,699 --> 01:57:06,470
however may depth peels we want with

2000
01:57:03,409 --> 01:57:08,420
right now we're using four and you know

2001
01:57:06,470 --> 01:57:10,300
I don't see us using appreciably you

2002
01:57:08,420 --> 01:57:13,690
last two would be the absolute minimum

2003
01:57:10,300 --> 01:57:21,860
but we probably need at least three and

2004
01:57:13,689 --> 01:57:23,509
the more you use the nicer it is I just

2005
01:57:21,859 --> 01:57:29,259
don't see a lot of ways around having

2006
01:57:23,510 --> 01:57:29,260
that sort of deeper color effects so I

2007
01:57:34,600 --> 01:57:41,930
don't know what to say obviously if you

2008
01:57:38,720 --> 01:57:44,900
can afford it you leave it on I mean you

2009
01:57:41,930 --> 01:57:46,159
know in the future graphics cards they

2010
01:57:44,899 --> 01:57:49,399
always have more and more and more

2011
01:57:46,159 --> 01:57:52,250
memory on them so you know it's fine but

2012
01:57:49,399 --> 01:57:54,019
we probably will need a mode that and I

2013
01:57:52,250 --> 01:57:55,970
mean maybe the answer is no we don't do

2014
01:57:54,020 --> 01:58:00,850
that we just you turn multi sampling off

2015
01:57:55,970 --> 01:58:00,850
on lower memory graphics cards right

2016
01:58:03,819 --> 01:58:12,349
wait why is pixelation hint true if

2017
01:58:08,270 --> 01:58:15,970
pixelation hint is true shouldn't the

2018
01:58:12,350 --> 01:58:15,970
renderer be pixel izing things

2019
01:58:23,389 --> 01:58:27,199
why is that set to true

2020
01:58:36,779 --> 01:58:42,090
I think that was just a bug that was

2021
01:58:40,319 --> 01:58:49,828
probably causing our image quality to be

2022
01:58:42,090 --> 01:58:55,020
considerably worse than it was yeah that

2023
01:58:49,828 --> 01:58:57,118
was just a bug all right anyway so I'm

2024
01:58:55,020 --> 01:58:59,039
gonna pop over to win32 hand-made now

2025
01:58:57,118 --> 01:59:04,439
and just fix the places where this was

2026
01:58:59,038 --> 01:59:07,649
something that was where our API changes

2027
01:59:04,439 --> 01:59:11,359
cause problems so I'm gonna go ahead and

2028
01:59:07,649 --> 01:59:14,429
and sort of change the way that was

2029
01:59:11,359 --> 01:59:22,229
working here so if we take a look at the

2030
01:59:14,429 --> 01:59:26,190
game render commands here Jimmy what I'd

2031
01:59:22,229 --> 01:59:27,718
like to do you can kind of see this the

2032
01:59:26,189 --> 01:59:35,129
way this stuff was working at ahead of

2033
01:59:27,719 --> 01:59:37,529
time we were coming in through the main

2034
01:59:35,130 --> 01:59:39,779
sortie and only initializing that render

2035
01:59:37,529 --> 01:59:42,719
commands once I don't want to do that

2036
01:59:39,779 --> 01:59:45,090
anymore what I'd like to do instead

2037
01:59:42,719 --> 01:59:47,880
right is I want to move this stuff up to

2038
01:59:45,090 --> 01:59:49,529
the allocation phase and I want this

2039
01:59:47,880 --> 01:59:53,670
default render commands to be called

2040
01:59:49,529 --> 01:59:56,609
every time so when we start doing the

2041
01:59:53,670 --> 01:59:58,170
stuff in here I mean doesn't really

2042
01:59:56,609 --> 02:00:01,189
matter where we call it but you know

2043
01:59:58,170 --> 02:00:01,190
here is fine

2044
02:00:09,670 --> 02:00:16,770
what I'd like to do is sort of harmonize

2045
02:00:14,050 --> 02:00:22,600
all of this with what we were doing for

2046
02:00:16,770 --> 02:00:31,840
we want this the Settings width and

2047
02:00:22,600 --> 02:00:34,090
height here that's actually what we're

2048
02:00:31,840 --> 02:00:36,429
sort of as far as our drawing is

2049
02:00:34,090 --> 02:00:38,980
concerned that's sort of something

2050
02:00:36,429 --> 02:00:42,750
that's set a little differently this

2051
02:00:38,979 --> 02:00:45,609
this global back buffer nonsense here

2052
02:00:42,750 --> 02:00:48,429
that's actually where we want to get

2053
02:00:45,609 --> 02:00:51,460
this from so it's a little weird the way

2054
02:00:48,429 --> 02:00:53,250
that we're doing it but you know it

2055
02:00:51,460 --> 02:00:55,359
should look like this

2056
02:00:53,250 --> 02:01:06,670
just the way that we're doing it it

2057
02:00:55,359 --> 02:01:08,109
should look like that all right so those

2058
02:01:06,670 --> 02:01:10,119
are the things that actually determine

2059
02:01:08,109 --> 02:01:12,759
what you know what we're going to use is

2060
02:01:10,119 --> 02:01:15,130
our basic basic size is and then when

2061
02:01:12,760 --> 02:01:22,590
you when you actually call a renderer

2062
02:01:15,130 --> 02:01:22,590
begin frame where is that call

2063
02:01:29,539 --> 02:01:38,539
it is so when you actually call begin

2064
02:01:33,930 --> 02:01:41,400
frame we want to pass the renderer here

2065
02:01:38,539 --> 02:01:45,439
and then we want that window width and

2066
02:01:41,399 --> 02:01:45,439
window height which are these two things

2067
02:01:45,470 --> 02:01:56,670
and we want the draw rich and that we

2068
02:01:48,300 --> 02:02:02,640
computed that this all then goes away

2069
02:01:56,670 --> 02:02:05,369
and anything that's using render clean

2070
02:02:02,640 --> 02:02:10,680
sphere kind of needs to now use an arrow

2071
02:02:05,369 --> 02:02:15,989
instead of what it was using before but

2072
02:02:10,680 --> 02:02:19,500
that sort of separate issue I don't know

2073
02:02:15,989 --> 02:02:21,539
what this was doing this probably

2074
02:02:19,500 --> 02:02:29,659
doesn't want to be doing this anymore

2075
02:02:21,539 --> 02:02:32,430
I'm gonna get rid of this stuff okay

2076
02:02:29,659 --> 02:02:38,010
we're gonna address those two guys in a

2077
02:02:32,430 --> 02:02:41,850
second this is gonna give us back our

2078
02:02:38,010 --> 02:02:43,470
renderer so this here is just the same

2079
02:02:41,850 --> 02:02:53,070
as what we did in our render a test

2080
02:02:43,470 --> 02:02:56,610
write this code wants to be essentially

2081
02:02:53,069 --> 02:02:59,729
the same so I'm just gonna go ahead and

2082
02:02:56,609 --> 02:03:03,539
do that so if we do this it's like

2083
02:02:59,729 --> 02:03:06,659
literally exactly the same code except

2084
02:03:03,539 --> 02:03:10,619
for who we call to give us the texture

2085
02:03:06,659 --> 02:03:12,659
cue memory so in here what I want to do

2086
02:03:10,619 --> 02:03:14,489
and you know we could we could do this

2087
02:03:12,659 --> 02:03:17,010
without an allocate to this could

2088
02:03:14,489 --> 02:03:18,809
literally just be like how many of these

2089
02:03:17,010 --> 02:03:21,420
we want

2090
02:03:18,810 --> 02:03:25,850
I mean maybe an easier way to do it

2091
02:03:21,420 --> 02:03:25,850
would have literally been to say oops

2092
02:03:37,880 --> 02:03:53,730
instead of this we could just do

2093
02:03:40,909 --> 02:04:01,800
hey here's the texture ops right and

2094
02:03:53,729 --> 02:04:04,169
then it's just like hey that way you

2095
02:04:01,800 --> 02:04:08,489
never really call an alligator and you

2096
02:04:04,170 --> 02:04:11,340
can just say look you know use use

2097
02:04:08,489 --> 02:04:17,460
whatever man it's fine

2098
02:04:11,340 --> 02:04:19,350
and so we can do that certainly you know

2099
02:04:17,460 --> 02:04:25,380
and maybe that's a better way to go for

2100
02:04:19,350 --> 02:04:27,450
now so it's it's you're not calling an

2101
02:04:25,380 --> 02:04:32,130
alligator when there was no reason to

2102
02:04:27,449 --> 02:04:34,829
call an alligator right so we've got the

2103
02:04:32,130 --> 02:04:37,050
OpenGL DC here we know our max called

2104
02:04:34,829 --> 02:04:39,899
cloth for frames we pretty much this is

2105
02:04:37,050 --> 02:04:43,529
just as is like there's nothing magic

2106
02:04:39,899 --> 02:04:48,269
about that and then if we've got our an

2107
02:04:43,529 --> 02:04:52,050
it texture cube clock here we need to

2108
02:04:48,270 --> 02:04:55,740
actually include those into here which

2109
02:04:52,050 --> 02:05:00,300
we'll do in a second the texture queue

2110
02:04:55,739 --> 02:05:03,769
is now just that texture queue so we

2111
02:05:00,300 --> 02:05:03,770
don't need to call any of this stuff

2112
02:05:11,618 --> 02:05:15,399
I'm not sure

2113
02:05:21,738 --> 02:05:31,428
not sure why we decided to do this this

2114
02:05:25,639 --> 02:05:33,380
again looks like kind of when we took

2115
02:05:31,429 --> 02:05:34,489
out all of that stuff where we were

2116
02:05:33,380 --> 02:05:36,650
starting to use normalized device

2117
02:05:34,488 --> 02:05:50,419
coordinates it feels like we should just

2118
02:05:36,649 --> 02:05:52,879
leave this I mean it kind of seems like

2119
02:05:50,420 --> 02:05:55,489
that's what we should have done because

2120
02:05:52,880 --> 02:05:58,550
since we come through here and we

2121
02:05:55,488 --> 02:06:00,799
already did the work of mapping the

2122
02:05:58,550 --> 02:06:03,349
coordinates into normalized device

2123
02:06:00,800 --> 02:06:06,320
coordinates we add 0 to 1 instead of

2124
02:06:03,349 --> 02:06:08,630
negative to 1 but I mean big deal that's

2125
02:06:06,319 --> 02:06:11,688
a pretty easy thing to change we then go

2126
02:06:08,630 --> 02:06:15,229
through a ton of gyrations just to like

2127
02:06:11,689 --> 02:06:17,929
undo that later I kind of just want to

2128
02:06:15,229 --> 02:06:19,909
go do that I'm you know what remind me

2129
02:06:17,929 --> 02:06:22,389
before we end here and I want to go do

2130
02:06:19,908 --> 02:06:22,388
that right now

2131
02:06:23,090 --> 02:06:29,179
but anyway render commands should not be

2132
02:06:27,288 --> 02:06:31,248
oh because I changed it to frame that's

2133
02:06:29,179 --> 02:06:43,680
why I say it should not be an unknown

2134
02:06:31,248 --> 02:06:45,368
identifier see here just frame frame

2135
02:06:43,680 --> 02:06:54,559
[Music]

2136
02:06:45,368 --> 02:06:57,828
this is process texture cue takes the

2137
02:06:54,559 --> 02:07:00,590
renderer and the texture cue where we

2138
02:06:57,828 --> 02:07:01,759
want to do that it's hard to say because

2139
02:07:00,590 --> 02:07:05,900
there's a lot of different places you

2140
02:07:01,760 --> 02:07:07,099
could choose to do it and there's

2141
02:07:05,899 --> 02:07:08,558
different reasons why you might choose

2142
02:07:07,099 --> 02:07:13,099
different ones

2143
02:07:08,559 --> 02:07:16,699
that's just frame this stuff now doesn't

2144
02:07:13,099 --> 02:07:19,029
have to happen which simplifies that

2145
02:07:16,698 --> 02:07:22,609
which is kind of nice

2146
02:07:19,029 --> 02:07:26,170
where do we all are we call it in here

2147
02:07:22,609 --> 02:07:26,170
though yeah

2148
02:07:27,389 --> 02:07:36,170
okay so finally what I would like to do

2149
02:07:31,800 --> 02:07:36,170
here is this actually needs to be

2150
02:07:37,279 --> 02:07:43,769
handled a little bit more specifically I

2151
02:07:39,929 --> 02:07:45,719
suppose that there is one more thing we

2152
02:07:43,770 --> 02:07:47,610
might want to do here which is that the

2153
02:07:45,719 --> 02:07:50,929
swap buffers call is still on the

2154
02:07:47,609 --> 02:07:54,029
outside which is probably not correct

2155
02:07:50,929 --> 02:07:59,429
probably what we want to do is have that

2156
02:07:54,029 --> 02:08:02,639
just bound in there so you know it's

2157
02:07:59,429 --> 02:08:04,920
it's kind of hard to say but it feels

2158
02:08:02,639 --> 02:08:07,079
like that's probably what would want to

2159
02:08:04,920 --> 02:08:09,510
happen the reason I say that is because

2160
02:08:07,079 --> 02:08:11,010
you're only gonna call swap buffers if

2161
02:08:09,510 --> 02:08:12,690
you're running OpenGL and since the

2162
02:08:11,010 --> 02:08:17,489
renderer needs to eventually support

2163
02:08:12,689 --> 02:08:19,589
direct3d we probably don't want to have

2164
02:08:17,488 --> 02:08:20,939
a hard-coded call to swap buffers on the

2165
02:08:19,590 --> 02:08:25,170
outside when that should really be

2166
02:08:20,939 --> 02:08:28,618
wrapped up in the rest of the code now

2167
02:08:25,170 --> 02:08:31,949
since this is a CS own DC window I have

2168
02:08:28,618 --> 02:08:34,319
no idea why we're calling get DC again

2169
02:08:31,948 --> 02:08:37,379
in fact we kind of call get DC a

2170
02:08:34,319 --> 02:08:38,779
ridiculous number of times for no reason

2171
02:08:37,380 --> 02:08:43,380
whatsoever

2172
02:08:38,779 --> 02:08:47,189
it's just kind of dumb and I don't know

2173
02:08:43,380 --> 02:08:49,380
why we do it just because we're

2174
02:08:47,189 --> 02:08:51,928
ridiculous maybe that's the reason

2175
02:08:49,380 --> 02:08:53,789
because you can see here in each case

2176
02:08:51,929 --> 02:08:55,789
we're actually getting the same DC as

2177
02:08:53,789 --> 02:09:01,590
well so it doesn't make a lot of sense

2178
02:08:55,789 --> 02:09:05,519
let's just not we'll just call this

2179
02:09:01,590 --> 02:09:07,860
surrender or DC and go from there the

2180
02:09:05,520 --> 02:09:10,170
OpenGL RC is not something we actually

2181
02:09:07,859 --> 02:09:12,269
care about in this case and that's

2182
02:09:10,170 --> 02:09:15,179
something we actually use so let's call

2183
02:09:12,270 --> 02:09:16,889
this the renderer DC here and let's go

2184
02:09:15,179 --> 02:09:20,329
ahead and move the swap buffers out to

2185
02:09:16,889 --> 02:09:20,329
somewhere that makes some sense

2186
02:09:25,698 --> 02:09:34,079
rid of it here and get rid of it here so

2187
02:09:31,198 --> 02:09:36,988
if I now go back into the OpenGL

2188
02:09:34,079 --> 02:09:39,539
renderer and we take a look at what's

2189
02:09:36,988 --> 02:09:41,188
happening an end frame here I'm just

2190
02:09:39,539 --> 02:09:44,429
going to go ahead and throw that

2191
02:09:41,189 --> 02:09:46,199
and one of the things that we're

2192
02:09:44,429 --> 02:09:52,788
actually going to need on that endframe

2193
02:09:46,198 --> 02:09:55,078
call is again we're gonna need a way to

2194
02:09:52,788 --> 02:09:58,378
know which DC we were supposed to be

2195
02:09:55,078 --> 02:10:05,068
using now we could choose to save that

2196
02:09:58,378 --> 02:10:06,899
DC and it's kind of a little bit hard to

2197
02:10:05,069 --> 02:10:09,089
say whether we should or should not do

2198
02:10:06,899 --> 02:10:11,099
that since we know this is called from

2199
02:10:09,088 --> 02:10:13,738
the platform side of things it's pretty

2200
02:10:11,099 --> 02:10:15,510
easy for the platform to just tell us

2201
02:10:13,738 --> 02:10:21,798
what the DC is we're supposed to be

2202
02:10:15,510 --> 02:10:21,798
using I don't know to what extent I

2203
02:10:25,969 --> 02:10:32,809
don't know to what extent that is what

2204
02:10:29,939 --> 02:10:32,809
we would want

2205
02:10:46,579 --> 02:10:51,529
I guess for now we can just do this and

2206
02:10:49,819 --> 02:10:58,849
I think that's what I'll do to avoid

2207
02:10:51,529 --> 02:11:00,139
having to think about it too hard but in

2208
02:10:58,850 --> 02:11:01,910
the future we may want to do something

2209
02:11:00,140 --> 02:11:05,030
fancier there I guess it's all I would

2210
02:11:01,909 --> 02:11:14,809
say and that means that in here we no

2211
02:11:05,029 --> 02:11:16,639
longer have to call that right okay so

2212
02:11:14,810 --> 02:11:20,420
for this stuff here I'm just gonna go

2213
02:11:16,640 --> 02:11:23,119
ahead and nerf that out for now and and

2214
02:11:20,420 --> 02:11:25,159
really actually I think I'll do one

2215
02:11:23,119 --> 02:11:27,170
better I'm actually gonna move it out of

2216
02:11:25,159 --> 02:11:28,279
here it doesn't really belong in here

2217
02:11:27,170 --> 02:11:32,029
anymore

2218
02:11:28,279 --> 02:11:34,189
and I'm just gonna put it inside here as

2219
02:11:32,029 --> 02:11:37,729
sort of a like hey by the way remember

2220
02:11:34,189 --> 02:11:40,339
this thing sort of a situation because

2221
02:11:37,729 --> 02:11:47,119
when we want to eventually make this go

2222
02:11:40,340 --> 02:11:49,250
and do a direct3d and so forth and and

2223
02:11:47,119 --> 02:11:51,019
put the software under back in I don't

2224
02:11:49,250 --> 02:11:54,079
know if we're gonna want to look at what

2225
02:11:51,020 --> 02:11:57,560
we did here probably not but we'll see

2226
02:11:54,079 --> 02:12:03,350
so when we actually do win32 display

2227
02:11:57,560 --> 02:12:06,980
buffer and window what I want to do is

2228
02:12:03,350 --> 02:12:09,470
go ahead and nerf that and instead just

2229
02:12:06,979 --> 02:12:13,489
have that call end frame on the renderer

2230
02:12:09,470 --> 02:12:20,570
and leave it at that right so I think

2231
02:12:13,489 --> 02:12:26,599
that's everything that I wanted this is

2232
02:12:20,569 --> 02:12:28,309
supposed to take the frame as well so we

2233
02:12:26,600 --> 02:12:31,250
knit texture cue is the only thing

2234
02:12:28,310 --> 02:12:34,160
that's not defined in here why it's not

2235
02:12:31,250 --> 02:12:36,289
defined in here I'm not sure probably

2236
02:12:34,159 --> 02:12:45,859
because we're not actually including

2237
02:12:36,289 --> 02:12:49,550
renderer dot C I can't say whether I

2238
02:12:45,859 --> 02:12:52,489
care whether we include that or not so I

2239
02:12:49,550 --> 02:12:54,050
guess I just will for now so taking a

2240
02:12:52,489 --> 02:12:56,479
look at the renderer test I want to make

2241
02:12:54,050 --> 02:12:58,039
sure it still works okay and then I

2242
02:12:56,479 --> 02:13:00,049
would also like to make sure that the

2243
02:12:58,039 --> 02:13:01,429
game works okay which it might not

2244
02:13:00,050 --> 02:13:05,090
because we just made a major set of

2245
02:13:01,429 --> 02:13:07,460
changes to it mm-hmm but it actually

2246
02:13:05,090 --> 02:13:11,659
appears fine at the moment so that seems

2247
02:13:07,460 --> 02:13:13,969
all good so that's a pretty nice change

2248
02:13:11,658 --> 02:13:16,308
pulling those out I think is good again

2249
02:13:13,969 --> 02:13:18,078
that's just getting us further along the

2250
02:13:16,309 --> 02:13:19,880
line I didn't get to a couple of things

2251
02:13:18,078 --> 02:13:21,889
I want to do today unfortunately but

2252
02:13:19,880 --> 02:13:23,779
that's just the nature of API cleanup I

2253
02:13:21,889 --> 02:13:25,940
mean the important part is that you have

2254
02:13:23,779 --> 02:13:28,969
to focus on things you want to make

2255
02:13:25,939 --> 02:13:31,279
cleaner they're right I did want to do

2256
02:13:28,969 --> 02:13:33,920
that one mouse oriented to do so I just

2257
02:13:31,279 --> 02:13:35,569
wanted to take a look at that so just to

2258
02:13:33,920 --> 02:13:37,849
refresh your memory and what that is in

2259
02:13:35,569 --> 02:13:39,859
the win32 code where we've got the mouse

2260
02:13:37,849 --> 02:13:41,328
you in the mouse v you can see us

2261
02:13:39,859 --> 02:13:43,670
translating them here into

2262
02:13:41,328 --> 02:13:45,529
device-independent coordinates and then

2263
02:13:43,670 --> 02:13:47,569
we immediately blow them back out now

2264
02:13:45,529 --> 02:13:51,618
the reason that's weird is because if

2265
02:13:47,569 --> 02:13:57,349
you remember we actually set the the

2266
02:13:51,618 --> 02:14:00,408
mouse x and mouse Y up when we go to use

2267
02:13:57,349 --> 02:14:06,578
them we are actually doing that

2268
02:14:00,408 --> 02:14:09,589
translation right so you can see here

2269
02:14:06,578 --> 02:14:11,828
when we actually use the mouse X here's

2270
02:14:09,590 --> 02:14:14,239
us setting it so that's irrelevant

2271
02:14:11,828 --> 02:14:18,408
here's us defining where it gets past

2272
02:14:14,238 --> 02:14:21,169
also irrelevant in here where we have

2273
02:14:18,408 --> 02:14:23,658
the world mode using this for update and

2274
02:14:21,170 --> 02:14:26,510
render world where we set this you can

2275
02:14:23,658 --> 02:14:29,988
see us just storing it in here right and

2276
02:14:26,510 --> 02:14:33,230
we just use a delta to figure out how

2277
02:14:29,988 --> 02:14:36,049
much it's moving so literally that is

2278
02:14:33,229 --> 02:14:39,169
just relative to the screen size which

2279
02:14:36,050 --> 02:14:40,670
we don't have to care about really one

2280
02:14:39,170 --> 02:14:43,789
way or the other right that will just

2281
02:14:40,670 --> 02:14:46,010
affect these about these constants that

2282
02:14:43,789 --> 02:14:49,039
we stuck in there is about the only

2283
02:14:46,010 --> 02:14:51,260
thing that that would change because the

2284
02:14:49,039 --> 02:14:55,908
game doesn't use mouse input so it

2285
02:14:51,260 --> 02:14:57,469
doesn't matter right so the only place

2286
02:14:55,908 --> 02:15:01,069
that we're actually using that in here

2287
02:14:57,469 --> 02:15:03,260
is is this and we then have to call clip

2288
02:15:01,069 --> 02:15:06,259
space from pixel space I think the only

2289
02:15:03,260 --> 02:15:08,480
reason we even have that function is to

2290
02:15:06,260 --> 02:15:10,250
support this in fact that is true

2291
02:15:08,479 --> 02:15:13,968
so we're forcing the renderer to have

2292
02:15:10,250 --> 02:15:16,550
this thing for no reason and

2293
02:15:13,969 --> 02:15:18,230
the we could just leave this in clip

2294
02:15:16,550 --> 02:15:21,020
space the mouse coordinates and clip

2295
02:15:18,229 --> 02:15:28,819
space and that would solve our problem

2296
02:15:21,020 --> 02:15:33,380
completely right um so I feel like we

2297
02:15:28,819 --> 02:15:37,069
kind of just want to do that maybe this

2298
02:15:33,380 --> 02:15:39,500
is dumb and I'll regret it later I'm not

2299
02:15:37,069 --> 02:15:41,929
sure but if you notice what happens when

2300
02:15:39,500 --> 02:15:43,698
I do that if I just do this because it's

2301
02:15:41,930 --> 02:15:45,560
not coming in and clip space at the

2302
02:15:43,698 --> 02:15:47,329
moment then you notice we can't click on

2303
02:15:45,560 --> 02:15:49,539
anything here right because the mouse is

2304
02:15:47,329 --> 02:15:49,539
wrong

2305
02:15:50,630 --> 02:15:55,640
let me also set the bill to to optimize

2306
02:15:54,170 --> 02:15:57,289
build so that you can see the frame rate

2307
02:15:55,640 --> 02:16:02,390
full frame rate so you know it's not

2308
02:15:57,289 --> 02:16:05,810
just lag causing it there oops right I

2309
02:16:02,390 --> 02:16:10,130
can't I can't do anything here I can't

2310
02:16:05,810 --> 02:16:15,289
click don't ask me why those are down

2311
02:16:10,130 --> 02:16:17,900
there that's interesting anyway so given

2312
02:16:15,289 --> 02:16:21,260
that that's the case I need some way now

2313
02:16:17,899 --> 02:16:22,369
to fix that and like I said I think all

2314
02:16:21,260 --> 02:16:23,960
that we have to do is just make sure

2315
02:16:22,369 --> 02:16:27,829
that when we are actually processing

2316
02:16:23,960 --> 02:16:32,030
these mouse coordinates we just make

2317
02:16:27,829 --> 02:16:34,968
sure that we put them into negative one

2318
02:16:32,030 --> 02:16:38,920
to one space right I don't know that we

2319
02:16:34,968 --> 02:16:44,899
have any way to do that in a single call

2320
02:16:38,920 --> 02:16:47,030
where is our clamp here it is so we have

2321
02:16:44,899 --> 02:16:48,679
a clamp zero to one map to range and you

2322
02:16:47,030 --> 02:16:50,030
can see the way that that works here

2323
02:16:48,679 --> 02:16:53,299
right

2324
02:16:50,030 --> 02:16:56,030
if we wanted a negative one to one map

2325
02:16:53,299 --> 02:17:00,250
to range I don't know what exactly we'd

2326
02:16:56,030 --> 02:17:00,250
call it but like

2327
02:17:07,209 --> 02:17:22,489
something like that it's not a great

2328
02:17:20,360 --> 02:17:24,500
name I apologize

2329
02:17:22,489 --> 02:17:27,369
so if we if we have a function here

2330
02:17:24,500 --> 02:17:29,840
that's gonna produce this result for us

2331
02:17:27,370 --> 02:17:32,990
then if you look at what happens we look

2332
02:17:29,840 --> 02:17:35,269
at the range max min and we say look if

2333
02:17:32,989 --> 02:17:39,679
we can then we're going to divide by

2334
02:17:35,269 --> 02:17:44,689
that range so we get the T excuse me

2335
02:17:39,679 --> 02:17:46,340
we get the t-value mapped within it now

2336
02:17:44,689 --> 02:17:48,500
the easiest way to do this without

2337
02:17:46,340 --> 02:17:50,058
thinking about it too hard is just to

2338
02:17:48,500 --> 02:17:52,030
say well when this comes out what we

2339
02:17:50,058 --> 02:17:56,688
really wanted to do is start from here

2340
02:17:52,030 --> 02:17:58,969
and then go out to there right we could

2341
02:17:56,689 --> 02:18:02,059
try to be fancier and multiply this in

2342
02:17:58,968 --> 02:18:03,768
I'm not going to bother right another

2343
02:18:02,058 --> 02:18:13,369
thing we could do is just say it like

2344
02:18:03,769 --> 02:18:14,989
this because we know this for use of the

2345
02:18:13,370 --> 02:18:16,429
number from zero to one so this will

2346
02:18:14,989 --> 02:18:18,549
produce the number from negative one to

2347
02:18:16,429 --> 02:18:18,549
one

2348
02:18:21,579 --> 02:18:29,808
right so if we then go back to our win32

2349
02:18:27,319 --> 02:18:31,819
code and we do a clamp by normal map to

2350
02:18:29,808 --> 02:18:36,619
range and I didn't really mean to put

2351
02:18:31,819 --> 02:18:38,869
that whole thing in there now when we do

2352
02:18:36,620 --> 02:18:40,639
this the mouse U and V will be in clip

2353
02:18:38,870 --> 02:18:44,110
space which is what we want and we can

2354
02:18:40,638 --> 02:18:51,799
simply ignore this in its entirety here

2355
02:18:44,110 --> 02:18:53,840
and and make this all happy right I can

2356
02:18:51,799 --> 02:18:55,099
also change these to the more modern way

2357
02:18:53,840 --> 02:18:59,689
that we've been writing those types

2358
02:18:55,099 --> 02:19:04,159
which is f/32 and off we go so now these

2359
02:18:59,689 --> 02:19:08,809
are in clip space and that should be a

2360
02:19:04,159 --> 02:19:11,269
handier sort of a handy way to pass them

2361
02:19:08,808 --> 02:19:12,049
down and in theory now we should get

2362
02:19:11,269 --> 02:19:14,120
what we want

2363
02:19:12,049 --> 02:19:16,369
right and that's a really nice thing

2364
02:19:14,120 --> 02:19:18,870
because now everything's flowing through

2365
02:19:16,370 --> 02:19:20,160
nicely and you're not undoing things too

2366
02:19:18,870 --> 02:19:22,260
so you can do them again right which

2367
02:19:20,159 --> 02:19:24,239
doesn't seem like a good reason

2368
02:19:22,260 --> 02:19:25,679
now why these things aren't pinned to

2369
02:19:24,239 --> 02:19:27,388
the top of the screen I'm sure there's a

2370
02:19:25,679 --> 02:19:29,909
good reason for that I don't really want

2371
02:19:27,388 --> 02:19:31,799
to know what it is the moment so what

2372
02:19:29,909 --> 02:19:33,299
you'll notice now is my my mouse

2373
02:19:31,799 --> 02:19:35,909
controls however for rotation and

2374
02:19:33,299 --> 02:19:38,699
scaling are broken why again it's just

2375
02:19:35,909 --> 02:19:41,190
because we've changed the scale on those

2376
02:19:38,700 --> 02:19:43,679
and all we had done before is just used

2377
02:19:41,190 --> 02:19:46,620
some arbitrary constants to scale how

2378
02:19:43,679 --> 02:19:48,299
fast these things were going we want to

2379
02:19:46,620 --> 02:19:50,150
probably Jack them up quite a bit

2380
02:19:48,299 --> 02:19:52,159
probably even more than what I just did

2381
02:19:50,149 --> 02:19:54,840
because that's not going to be enough

2382
02:19:52,159 --> 02:19:58,819
you can see how slow they're still doing

2383
02:19:54,840 --> 02:19:58,819
let's do another 10 10x

2384
02:20:07,649 --> 02:20:18,859
still too slow this may have gotten too

2385
02:20:16,229 --> 02:20:18,859
fast now

2386
02:20:30,829 --> 02:20:34,780
a little bit too fast

2387
02:20:57,449 --> 02:21:02,880
the rotation actually feels okay it's

2388
02:21:01,260 --> 02:21:04,889
really just the scaling maybe that feels

2389
02:21:02,879 --> 02:21:09,329
a little bit fast I might back it down

2390
02:21:04,889 --> 02:21:13,978
just a hair and this one down maybe even

2391
02:21:09,329 --> 02:21:19,199
more of a hair a bigger hair that feels

2392
02:21:13,978 --> 02:21:23,789
pretty good and then I think we're good

2393
02:21:19,199 --> 02:21:26,010
to go alright so that seems good to me

2394
02:21:23,790 --> 02:21:27,960
and while we're at it in there I mean we

2395
02:21:26,010 --> 02:21:35,340
might as well make it explicit that this

2396
02:21:27,959 --> 02:21:37,500
is like clip space right and again since

2397
02:21:35,340 --> 02:21:45,120
I think we allow VIII's as types now we

2398
02:21:37,500 --> 02:21:47,898
could also just say that right and then

2399
02:21:45,120 --> 02:21:50,550
anyone who is actually working on these

2400
02:21:47,898 --> 02:21:53,398
you know in this case if you just want a

2401
02:21:50,549 --> 02:21:57,209
mass fee you can just say input clip

2402
02:21:53,398 --> 02:22:07,430
Mouse good space Mouse pee and you can

2403
02:21:57,209 --> 02:22:07,429
grab that like so that's a good point

2404
02:22:11,190 --> 02:22:17,760
in here again this is just now something

2405
02:22:14,489 --> 02:22:22,469
you can access directly clip space mouse

2406
02:22:17,760 --> 02:22:27,120
pee and then finally when we set it in

2407
02:22:22,469 --> 02:22:28,890
here when we're setting these we can

2408
02:22:27,120 --> 02:22:34,160
just set these directly so you know

2409
02:22:28,890 --> 02:22:42,869
let's just set them here clip space

2410
02:22:34,159 --> 02:22:57,360
Mouse px is that clips facemask pe why

2411
02:22:42,870 --> 02:23:00,260
is that and then so that sets all of

2412
02:22:57,360 --> 02:23:02,909
those up and it's clear now to the user

2413
02:23:00,260 --> 02:23:05,640
what that value is which we didn't

2414
02:23:02,909 --> 02:23:09,989
really have before so that seems also

2415
02:23:05,640 --> 02:23:14,579
like a good thing this is also easier to

2416
02:23:09,989 --> 02:23:16,771
do now because that just copies all

2417
02:23:14,579 --> 02:23:22,620
three values which is easier so that's

2418
02:23:16,771 --> 02:23:24,061
nice too so I think that's I'm pretty

2419
02:23:22,620 --> 02:23:26,610
happy with that that all seems

2420
02:23:24,060 --> 02:23:29,779
reasonable all of this seems to be

2421
02:23:26,610 --> 02:23:37,351
working properly as well which is nice

2422
02:23:29,780 --> 02:23:39,570
and yeah I don't see anything I don't I

2423
02:23:37,351 --> 02:23:42,150
have to figure out why those get set to

2424
02:23:39,569 --> 02:23:44,101
why those don't get snapped to normalize

2425
02:23:42,149 --> 02:23:46,739
positions I must have changed how that

2426
02:23:44,101 --> 02:23:48,810
worked inadvertently when we were

2427
02:23:46,739 --> 02:23:51,799
changing the other stuff but we'll see

2428
02:23:48,810 --> 02:23:51,799
anyway so

2429
02:23:55,050 --> 02:24:07,289
I feel like this is backwards

2430
02:24:04,171 --> 02:24:11,540
the rotation feels backwards based from

2431
02:24:07,290 --> 02:24:11,540
the Y version tonight

2432
02:24:21,290 --> 02:24:24,890
it feels weird to have one of them be

2433
02:24:23,750 --> 02:24:26,389
one way one of them in there I don't

2434
02:24:24,889 --> 02:24:28,760
know it love to think about that anyway

2435
02:24:26,389 --> 02:24:30,949
I think that's all for today that I want

2436
02:24:28,760 --> 02:24:35,149
to do at the moment I'm pretty happy

2437
02:24:30,950 --> 02:24:38,000
with all of that um and if we actually

2438
02:24:35,149 --> 02:24:41,359
look at the renderer API now in win32

2439
02:24:38,000 --> 02:24:44,540
render test that startup looks even

2440
02:24:41,360 --> 02:24:48,050
better than it used to right so you make

2441
02:24:44,540 --> 02:24:52,640
a texture queue that seems nice right

2442
02:24:48,049 --> 02:24:54,920
you make a renderer that seems nice

2443
02:24:52,639 --> 02:24:57,260
and in fact this doesn't need the DC

2444
02:24:54,920 --> 02:25:02,090
anymore

2445
02:24:57,260 --> 02:25:06,350
so we could even just do that if we

2446
02:25:02,090 --> 02:25:08,510
wanted to I wonder if it should pass the

2447
02:25:06,350 --> 02:25:11,500
window handle there it may be that we

2448
02:25:08,510 --> 02:25:14,149
want to just pass the window we'll see

2449
02:25:11,500 --> 02:25:15,860
I'll wait till we do addy 3d render or

2450
02:25:14,149 --> 02:25:17,149
some day to think about whether which

2451
02:25:15,860 --> 02:25:20,690
one we want there it's pretty easy to

2452
02:25:17,149 --> 02:25:24,829
change we can set the vsync this should

2453
02:25:20,690 --> 02:25:26,210
probably be a call on the renderer so

2454
02:25:24,829 --> 02:25:28,521
that might be something we want to

2455
02:25:26,209 --> 02:25:30,109
change I'm not sure about that though to

2456
02:25:28,521 --> 02:25:35,600
be honest that may be something that's

2457
02:25:30,110 --> 02:25:39,380
better put into the settings so that I'm

2458
02:25:35,600 --> 02:25:40,610
not quite sure about like in fact I kind

2459
02:25:39,379 --> 02:25:49,009
of do think that should be in the

2460
02:25:40,610 --> 02:25:53,450
settings I kind of think this should

2461
02:25:49,010 --> 02:25:56,930
probably go in the settings you know

2462
02:25:53,450 --> 02:25:59,000
what I mean so I almost feel like this

2463
02:25:56,930 --> 02:26:02,530
should be something that that in that

2464
02:25:59,000 --> 02:26:05,950
settings stuff where we do like Open GL

2465
02:26:02,530 --> 02:26:05,950
change settings

2466
02:26:11,340 --> 02:26:16,859
I feel like in here is almost where that

2467
02:26:15,750 --> 02:26:19,200
should be

2468
02:26:16,859 --> 02:26:21,899
so whenever we change the settings we

2469
02:26:19,200 --> 02:26:23,640
would do something like this and since

2470
02:26:21,898 --> 02:26:25,769
we don't want to make a wiggle call

2471
02:26:23,639 --> 02:26:31,920
there you know we would just thunk down

2472
02:26:25,770 --> 02:26:37,560
to the OpenGL platform layer for win32

2473
02:26:31,920 --> 02:26:39,180
like at that point so yeah I kind of

2474
02:26:37,559 --> 02:26:44,850
feel like that's what should be

2475
02:26:39,180 --> 02:26:48,479
happening there one way or the other I'm

2476
02:26:44,850 --> 02:26:54,300
going to go ahead and not do that yet

2477
02:26:48,478 --> 02:26:56,459
and I'm gonna go ahead and put inside no

2478
02:26:54,299 --> 02:27:00,840
let's do it let's just do it you might

2479
02:26:56,459 --> 02:27:07,529
as well so what I'll do there is just

2480
02:27:00,840 --> 02:27:12,030
say that inside the settings when we set

2481
02:27:07,530 --> 02:27:17,760
this here I'm gonna say like vsync was

2482
02:27:12,030 --> 02:27:27,420
false so they'll be a request vsync that

2483
02:27:17,760 --> 02:27:29,609
happens in the settings and then we'll

2484
02:27:27,420 --> 02:27:33,629
just say look in here if that setting is

2485
02:27:29,609 --> 02:27:36,149
is that setting will be you know will

2486
02:27:33,629 --> 02:27:39,420
try to be respected in here to the

2487
02:27:36,148 --> 02:27:40,409
extent that it can be and so when we're

2488
02:27:39,420 --> 02:27:44,879
actually going through here and

2489
02:27:40,409 --> 02:27:48,950
processing the new settings we'll will

2490
02:27:44,879 --> 02:27:52,438
do that right so OpenGL current settings

2491
02:27:48,950 --> 02:27:55,260
we will do it like this and then say

2492
02:27:52,439 --> 02:27:58,829
request vsync if so we'll do that if not

2493
02:27:55,260 --> 02:28:02,069
we'll do this and what we can do is

2494
02:27:58,829 --> 02:28:06,260
again make this be a platform specific

2495
02:28:02,069 --> 02:28:06,260
call because we don't necessarily know

2496
02:28:06,319 --> 02:28:10,648
that that is a call we will have

2497
02:28:08,489 --> 02:28:14,430
available to us right we don't know we

2498
02:28:10,648 --> 02:28:16,108
don't know whether you know what that

2499
02:28:14,430 --> 02:28:19,380
might be on a particular platform or

2500
02:28:16,109 --> 02:28:23,130
anything like that so we'll just do a

2501
02:28:19,379 --> 02:28:25,170
platform opengl set vsync here and we'll

2502
02:28:23,129 --> 02:28:28,620
put the vsync enabled

2503
02:28:25,171 --> 02:28:32,220
we can also pass the OpenGL renderer

2504
02:28:28,620 --> 02:28:37,350
here and then what I'll do is I'll just

2505
02:28:32,220 --> 02:28:49,350
do vsync enabled 1 or 0 I guess and this

2506
02:28:37,351 --> 02:28:51,030
will just pass you know this here and

2507
02:28:49,351 --> 02:28:52,980
since we don't know whether we're gonna

2508
02:28:51,030 --> 02:28:55,501
get this call I mean I think we always

2509
02:28:52,979 --> 02:28:57,689
will but just in case let's only call it

2510
02:28:55,501 --> 02:29:00,931
if we actually have it also seems like a

2511
02:28:57,690 --> 02:29:03,149
pretty obvious thing to want to do and

2512
02:29:00,931 --> 02:29:05,640
so in here we can also say like this has

2513
02:29:03,149 --> 02:29:08,550
to be defined by the platform layer you

2514
02:29:05,640 --> 02:29:17,091
know I'm saying by default we'll set

2515
02:29:08,550 --> 02:29:24,029
we'll set it up so that we ask for vsync

2516
02:29:17,091 --> 02:29:25,470
by default because that's what we

2517
02:29:24,030 --> 02:29:27,121
normally want like we normally don't

2518
02:29:25,470 --> 02:29:30,120
want to tear but if the person doing the

2519
02:29:27,120 --> 02:29:32,510
rendering wants us to tear then okay you

2520
02:29:30,120 --> 02:29:35,340
know it's a it's something they can do

2521
02:29:32,511 --> 02:29:37,501
and that's fine so then all we need is a

2522
02:29:35,341 --> 02:29:40,921
place for that to actually exist so in

2523
02:29:37,501 --> 02:29:44,041
the render setup when we issue those

2524
02:29:40,921 --> 02:29:50,060
commands which should be here there it

2525
02:29:44,040 --> 02:29:50,060
is we just want to have a request vsync

2526
02:29:57,129 --> 02:30:03,529
and now I think we're good you know as

2527
02:30:01,850 --> 02:30:05,720
far as requesting vsync or not it's

2528
02:30:03,529 --> 02:30:09,789
concerned let me make sure that we

2529
02:30:05,719 --> 02:30:09,788
aren't getting it over here

2530
02:30:20,639 --> 02:30:23,969
hard to say

2531
02:30:31,459 --> 02:30:43,399
sure looks vsync II let me just see what

2532
02:30:35,420 --> 02:30:45,819
ends up happening there what's the name

2533
02:30:43,399 --> 02:30:45,819
of that call

2534
02:30:56,649 --> 02:31:00,091
that is not working

2535
02:31:06,100 --> 02:31:15,059
we're never getting to that call what's

2536
02:31:12,700 --> 02:31:15,060
going on

2537
02:31:33,560 --> 02:31:45,229
is that just because we're in was it

2538
02:31:37,069 --> 02:31:50,270
compiled out what happened I guess it

2539
02:31:45,229 --> 02:31:54,529
was compiled out so we are calling

2540
02:31:50,271 --> 02:31:55,971
Wiggles swept interval zero although I

2541
02:31:54,530 --> 02:32:01,940
guess I should verify that we never call

2542
02:31:55,970 --> 02:32:03,529
it again so we did request that we not

2543
02:32:01,940 --> 02:32:05,649
do it so I think we're good there and

2544
02:32:03,530 --> 02:32:07,610
again it doesn't actually obey it

2545
02:32:05,649 --> 02:32:09,409
because we're going through the windows

2546
02:32:07,610 --> 02:32:16,819
compositor and we'd have to actually

2547
02:32:09,409 --> 02:32:21,140
open a full screen window for real in

2548
02:32:16,819 --> 02:32:22,819
order to not get throttled I think all

2549
02:32:21,140 --> 02:32:28,779
right so I'm happy with that we'll go

2550
02:32:22,819 --> 02:32:28,779
ahead and go to the Q&amp;A there we go

2551
02:32:47,559 --> 02:33:00,039
and again just looking over that API

2552
02:32:50,109 --> 02:33:01,960
there that's starting to look nice and

2553
02:33:00,040 --> 02:33:04,000
clean right so you initialize a texture

2554
02:33:01,959 --> 02:33:05,858
queue if you want one and you can use as

2555
02:33:04,000 --> 02:33:07,389
many as you want we don't really care as

2556
02:33:05,859 --> 02:33:11,229
long as you tell us to process them

2557
02:33:07,389 --> 02:33:14,469
which seems good you can do a platform

2558
02:33:11,228 --> 02:33:17,199
renderer allocation that just gets

2559
02:33:14,469 --> 02:33:19,599
everything ready for you this is not

2560
02:33:17,200 --> 02:33:21,670
really part of the API almost like

2561
02:33:19,600 --> 02:33:23,739
nothing here is this is just you doing

2562
02:33:21,670 --> 02:33:25,510
your camera setup which again I think we

2563
02:33:23,739 --> 02:33:28,359
can make some utility functions to make

2564
02:33:25,510 --> 02:33:32,200
them simpler then we've got the begin

2565
02:33:28,359 --> 02:33:35,859
frame render group transform and render

2566
02:33:32,200 --> 02:33:39,540
group end frame and that all seems

2567
02:33:35,859 --> 02:33:39,540
pretty reasonable

2568
02:33:45,011 --> 02:33:47,860
so if you've answered this before but

2569
02:33:46,960 --> 02:33:49,659
why do you make all of your functions

2570
02:33:47,860 --> 02:33:51,370
internal some in chat we're saying that

2571
02:33:49,659 --> 02:33:52,690
doesn't seem to make sense in a unity

2572
02:33:51,370 --> 02:33:55,120
build for just wondering for your

2573
02:33:52,690 --> 02:33:56,649
general case the reason is because you

2574
02:33:55,120 --> 02:33:59,431
don't know that the compiler is smart

2575
02:33:56,649 --> 02:34:04,359
enough to realize it's a unity build

2576
02:33:59,431 --> 02:34:08,319
it's really that simple right so you are

2577
02:34:04,360 --> 02:34:10,450
sort of taking if you don't declare all

2578
02:34:08,319 --> 02:34:12,909
of your functions internal you're taking

2579
02:34:10,450 --> 02:34:15,070
it on faith that the compiler will not

2580
02:34:12,909 --> 02:34:17,710
waste a bunch of time building an export

2581
02:34:15,069 --> 02:34:20,649
table or doing things to make sure that

2582
02:34:17,710 --> 02:34:22,689
functions could be externally linked so

2583
02:34:20,649 --> 02:34:24,699
having them all marked internal tells it

2584
02:34:22,690 --> 02:34:27,221
you can inline this as much as you want

2585
02:34:24,700 --> 02:34:30,311
you don't have to remember anything

2586
02:34:27,220 --> 02:34:31,779
about it you don't have to build a

2587
02:34:30,310 --> 02:34:33,880
linking table you have to do any of

2588
02:34:31,780 --> 02:34:38,409
those things that you might have done

2589
02:34:33,880 --> 02:34:40,329
and granted I don't know on a naked

2590
02:34:38,409 --> 02:34:42,579
particular compiler when I'm you know

2591
02:34:40,329 --> 02:34:45,220
calling it to compile my code I don't

2592
02:34:42,579 --> 02:34:48,101
know if that particular compiler has

2593
02:34:45,220 --> 02:34:50,761
anything that it will do like that that

2594
02:34:48,101 --> 02:34:59,671
would be bad but why take the chance

2595
02:34:50,761 --> 02:35:03,030
right I prefer to just make it so that

2596
02:34:59,671 --> 02:35:06,489
everything is marked internal and

2597
02:35:03,030 --> 02:35:08,500
honestly if I'd ever if I thought about

2598
02:35:06,489 --> 02:35:16,690
it a lot when I first did it I probably

2599
02:35:08,500 --> 02:35:18,101
would have just done this right because

2600
02:35:16,690 --> 02:35:23,200
that's nice too because it tells you

2601
02:35:18,101 --> 02:35:26,171
it's a function which actually in C it's

2602
02:35:23,200 --> 02:35:30,761
incredibly hard to tell if you're

2603
02:35:26,171 --> 02:35:36,040
looking at a function declaration it's a

2604
02:35:30,761 --> 02:35:37,961
lot harder than you think there are some

2605
02:35:36,040 --> 02:35:39,851
ways you can cheat it but it's it's a

2606
02:35:37,960 --> 02:35:44,050
lot harder than you think and the reason

2607
02:35:39,851 --> 02:35:47,440
is because there's so many different

2608
02:35:44,050 --> 02:35:54,220
ways you can write things in C and there

2609
02:35:47,440 --> 02:35:58,000
is no keyword like struct class externs

2610
02:35:54,220 --> 02:35:58,789
type def s-- enums all of these things

2611
02:35:58,000 --> 02:36:01,940
have key

2612
02:35:58,790 --> 02:36:04,040
that introduce them but variables and

2613
02:36:01,940 --> 02:36:06,230
functions have no keyword that

2614
02:36:04,040 --> 02:36:08,000
introduces them so telling the

2615
02:36:06,229 --> 02:36:09,500
difference between the declaration of a

2616
02:36:08,000 --> 02:36:12,319
function and the Declaration of in

2617
02:36:09,500 --> 02:36:15,290
variable actually takes a little bit of

2618
02:36:12,319 --> 02:36:18,079
parsing like you have to actually expand

2619
02:36:15,290 --> 02:36:20,420
all your macros look at all of the

2620
02:36:18,079 --> 02:36:25,879
actual stuff in there and figure out

2621
02:36:20,420 --> 02:36:28,760
that it is in fact a function is it

2622
02:36:25,879 --> 02:36:30,319
impossible no it just is it way harder

2623
02:36:28,760 --> 02:36:34,521
than most languages where you actually

2624
02:36:30,319 --> 02:36:36,409
just type the word like function right

2625
02:36:34,521 --> 02:36:37,610
in front of a function and you know that

2626
02:36:36,409 --> 02:36:39,159
anything that's called a function is a

2627
02:36:37,610 --> 02:36:42,079
function and anything else is a variable

2628
02:36:39,159 --> 02:36:46,180
it's a lot easier for a simple parser to

2629
02:36:42,079 --> 02:36:46,180
know what to do in those cases oh

2630
02:36:52,420 --> 02:37:03,829
someone was saying that we can remove

2631
02:36:56,319 --> 02:37:04,430
some code from the load bitmap case yeah

2632
02:37:03,829 --> 02:37:17,899
we don't

2633
02:37:04,430 --> 02:37:22,729
oops not that we we are no we're not I

2634
02:37:17,899 --> 02:37:24,859
don't think we are where are we I don't

2635
02:37:22,729 --> 02:37:30,049
see any us declaring a render texture

2636
02:37:24,860 --> 02:37:31,909
result anywhere is there something like

2637
02:37:30,049 --> 02:37:34,369
you writer passed that prohibits hybrid

2638
02:37:31,909 --> 02:37:39,440
anti-aliasing techniques like MSA 4x

2639
02:37:34,370 --> 02:37:45,040
plus conservative ethics a MSA 16 X is

2640
02:37:39,440 --> 02:37:45,040
way overkill yeah no we

2641
02:37:48,690 --> 02:37:57,190
we tried a couple different ones and I

2642
02:37:54,851 --> 02:38:00,521
don't remember what our opinion ended up

2643
02:37:57,190 --> 02:38:26,560
being sorry this is Taksim I remember a

2644
02:38:00,521 --> 02:38:38,050
little bit here that's um yeah

2645
02:38:26,560 --> 02:38:38,899
create frame buffer so our 2d multi

2646
02:38:38,049 --> 02:38:42,259
sample

2647
02:38:38,899 --> 02:38:42,260
[Music]

2648
02:39:02,309 --> 02:39:07,430
I don't remember how we picked this

2649
02:39:15,779 --> 02:39:28,588
I vaguely recall us having a weight that

2650
02:39:22,469 --> 02:39:31,469
we tested and I just can't remember what

2651
02:39:28,588 --> 02:39:44,039
we actually did there this is not what

2652
02:39:31,469 --> 02:39:47,108
we want we clamp it at 16

2653
02:39:44,040 --> 02:39:47,109
[Music]

2654
02:39:55,879 --> 02:40:12,179
so I guess we just so since we clamp it

2655
02:40:09,209 --> 02:40:14,399
at 16 here I suppose I thought we

2656
02:40:12,180 --> 02:40:16,829
probably tried some different ones but I

2657
02:40:14,399 --> 02:40:20,549
don't know if we really yeah I cannot

2658
02:40:16,829 --> 02:40:21,959
remember and I agree that 16 probably

2659
02:40:20,549 --> 02:40:34,439
isn't necessary

2660
02:40:21,959 --> 02:40:35,969
as far as well you know what we do sure

2661
02:40:34,440 --> 02:40:38,430
okay this is starting come back to me

2662
02:40:35,969 --> 02:40:42,260
you know what probably it was we were

2663
02:40:38,430 --> 02:40:45,659
actually relying on multisample to do

2664
02:40:42,260 --> 02:40:48,360
transparency for us I think that's what

2665
02:40:45,659 --> 02:40:50,101
happened so we probably never tuned this

2666
02:40:48,360 --> 02:40:52,940
variable otherwise like yeah we could

2667
02:40:50,101 --> 02:40:56,630
probably I mean dropping it to eight

2668
02:40:52,940 --> 02:41:01,829
would probably you wouldn't notice a

2669
02:40:56,629 --> 02:41:05,039
thing right like I mean I would be

2670
02:41:01,829 --> 02:41:09,810
surprised if you could tell the

2671
02:41:05,040 --> 02:41:13,141
difference you know maybe I'm wrong

2672
02:41:09,810 --> 02:41:14,879
about that but eight steps on the

2673
02:41:13,140 --> 02:41:18,989
Draghi's would probably not be too bad

2674
02:41:14,879 --> 02:41:21,689
let me see it's hard to say this is a

2675
02:41:18,989 --> 02:41:25,079
scaled buffer too which is not a fair

2676
02:41:21,690 --> 02:41:32,120
comparison you want to be one-to-one and

2677
02:41:25,079 --> 02:41:32,120
not scaled take a look here

2678
02:41:43,920 --> 02:41:52,260
so really we should we should be trying

2679
02:41:49,090 --> 02:41:52,260
to do one-to-one here but

2680
02:42:05,780 --> 02:42:10,030
this is not a very scientific way to do

2681
02:42:07,790 --> 02:42:10,030
this

2682
02:42:34,470 --> 02:42:40,439
I mean I don't know I would say I still

2683
02:42:38,761 --> 02:42:42,360
see a quality difference between those

2684
02:42:40,440 --> 02:42:45,121
two actually to be completely honest

2685
02:42:42,360 --> 02:42:47,671
with you we should probably do a more

2686
02:42:45,120 --> 02:42:49,890
scientific comparison of the two it's a

2687
02:42:47,671 --> 02:42:51,390
little hard to because we haven't turned

2688
02:42:49,890 --> 02:42:53,341
on any kind of MIT mapping or

2689
02:42:51,390 --> 02:42:55,411
anisotropic filtering for textures that

2690
02:42:53,341 --> 02:42:56,761
I have lines in them so you have to be

2691
02:42:55,411 --> 02:42:59,940
careful to let make sure your eye

2692
02:42:56,761 --> 02:43:01,739
ignores like lines inside the texture

2693
02:42:59,940 --> 02:43:04,521
you have to only look at lines that are

2694
02:43:01,739 --> 02:43:09,601
external to a texture like for example

2695
02:43:04,521 --> 02:43:12,690
these borders here and I admit they look

2696
02:43:09,601 --> 02:43:15,631
pretty good on eighth but I do feel like

2697
02:43:12,690 --> 02:43:18,301
you still see an improvement in 16 so I

2698
02:43:15,630 --> 02:43:20,161
don't know I mean I would think you'd

2699
02:43:18,300 --> 02:43:22,859
still want to turn them on and you could

2700
02:43:20,161 --> 02:43:25,979
you know in scenarios where you were on

2701
02:43:22,860 --> 02:43:29,730
a worst card sure turn it off but I'm

2702
02:43:25,979 --> 02:43:33,091
not sure I want to say like oh right on

2703
02:43:29,729 --> 02:43:38,939
the cost to turn that off now in terms

2704
02:43:33,091 --> 02:43:41,069
of hybrid techniques I don't really want

2705
02:43:38,940 --> 02:43:42,480
to go down that route to be honest I'd

2706
02:43:41,069 --> 02:43:45,020
rather just turn it on if it's there and

2707
02:43:42,479 --> 02:43:45,020
not if it's not

2708
02:43:50,739 --> 02:43:54,069
someone with sending a github thing Oh

2709
02:43:52,420 --> 02:43:57,190
typing them in through to render test

2710
02:43:54,069 --> 02:44:03,719
sure I can take look at that

2711
02:43:57,190 --> 02:44:03,720
so that is line 155 where there abouts

2712
02:44:05,670 --> 02:44:11,431
yes that is just incorrect

2713
02:44:44,909 --> 02:44:54,819
it's cool that GCC catches that like

2714
02:44:53,139 --> 02:44:56,709
looping over a static array because yeah

2715
02:44:54,819 --> 02:45:03,180
the compiler has all the information it

2716
02:44:56,709 --> 02:45:03,179
needs to make that not be a bug you know

2717
02:45:16,030 --> 02:45:22,570
um sue as far as the plants looking

2718
02:45:19,271 --> 02:45:25,750
worse with a bit I I would so the plants

2719
02:45:22,569 --> 02:45:27,699
you have to ignore we don't we have not

2720
02:45:25,750 --> 02:45:30,579
generated MIT Maps yet and they're way

2721
02:45:27,700 --> 02:45:33,431
too big a bit maps so don't look at

2722
02:45:30,579 --> 02:45:35,500
anything bitmap related it's not a fair

2723
02:45:33,431 --> 02:45:38,920
comparison you have to just look at

2724
02:45:35,500 --> 02:45:40,659
edges for the MSA a there's a bunch of

2725
02:45:38,920 --> 02:45:42,790
things we'll want to do with the plants

2726
02:45:40,659 --> 02:45:47,101
to make those look better that just

2727
02:45:42,790 --> 02:45:47,101
revolve around generating MIT Maps

2728
02:46:03,011 --> 02:46:08,780
have we used the Malik from the CRT or

2729
02:46:06,290 --> 02:46:12,920
have we always used Windows Alek is it

2730
02:46:08,780 --> 02:46:15,650
okay to use the Malik in the game so it

2731
02:46:12,921 --> 02:46:17,841
depends on what you mean by okay so no

2732
02:46:15,649 --> 02:46:20,149
we do not use Malik the reason we don't

2733
02:46:17,841 --> 02:46:23,300
use Malik is because we want to manage

2734
02:46:20,149 --> 02:46:25,581
our own memory and we actually do a

2735
02:46:23,300 --> 02:46:27,200
bunch of things with that in the game so

2736
02:46:25,581 --> 02:46:31,819
one of the ways that we support for

2737
02:46:27,200 --> 02:46:34,399
example dynamic code reloading and live

2738
02:46:31,819 --> 02:46:36,290
code editing and loop live code editing

2739
02:46:34,399 --> 02:46:38,081
and stuff like that is because we keep

2740
02:46:36,290 --> 02:46:42,109
all of our memory allocations tracked

2741
02:46:38,081 --> 02:46:46,331
ourselves and that way we can load and

2742
02:46:42,110 --> 02:46:46,331
save those memory allocations from disk

2743
02:46:46,540 --> 02:46:52,460
so we are pretty hardcore about never

2744
02:46:49,700 --> 02:46:54,260
calling any CRT functions for that

2745
02:46:52,460 --> 02:46:56,331
reason and also that we would like to

2746
02:46:54,261 --> 02:46:57,860
compile without the CRT right now the

2747
02:46:56,331 --> 02:47:00,081
reason we still compose charity is just

2748
02:46:57,860 --> 02:47:01,881
for sine and cosine which is just it's

2749
02:47:00,081 --> 02:47:03,951
been a long time we really should get

2750
02:47:01,880 --> 02:47:09,310
rid of them that's really the only thing

2751
02:47:03,950 --> 02:47:11,750
we need in the future we probably will

2752
02:47:09,310 --> 02:47:13,761
get rid of it entirely so that's another

2753
02:47:11,751 --> 02:47:15,470
reason I don't call malloc that's it if

2754
02:47:13,761 --> 02:47:18,951
you want to use the C runtime library

2755
02:47:15,470 --> 02:47:20,751
you know that's up to you I don't like

2756
02:47:18,950 --> 02:47:23,090
the C runtime library I don't think it's

2757
02:47:20,751 --> 02:47:29,421
very well written and I don't want it to

2758
02:47:23,091 --> 02:47:30,771
be I don't want to use it so if you like

2759
02:47:29,421 --> 02:47:32,390
it and want to use it that's your

2760
02:47:30,771 --> 02:47:34,871
decision just make sure you know what

2761
02:47:32,390 --> 02:47:34,870
you're getting into

2762
02:47:38,959 --> 02:47:44,760
I've read the sequel on internal sorry I

2763
02:47:43,078 --> 02:47:47,128
was just wondering on a more fundamental

2764
02:47:44,760 --> 02:47:48,748
level I only knew it makes that function

2765
02:47:47,129 --> 02:47:50,879
only accessible from that translation

2766
02:47:48,748 --> 02:47:52,439
unit I may have this wrong and I wanted

2767
02:47:50,879 --> 02:47:54,959
to know what it did for you in general

2768
02:47:52,439 --> 02:47:57,559
not just in response to the unity build

2769
02:47:54,959 --> 02:48:00,629
part or is that really all it does um

2770
02:47:57,559 --> 02:48:02,728
yeah I mean just to be really clear

2771
02:48:00,629 --> 02:48:06,079
about what the reason it's there it's

2772
02:48:02,728 --> 02:48:13,288
it's just a define for static right and

2773
02:48:06,078 --> 02:48:15,208
in C and C++ the the static keyword in

2774
02:48:13,289 --> 02:48:17,789
front of a function tells the compiler

2775
02:48:15,209 --> 02:48:21,959
it doesn't have to worry about that

2776
02:48:17,789 --> 02:48:26,310
function ever getting used outside of

2777
02:48:21,959 --> 02:48:28,890
the current translation unit now because

2778
02:48:26,309 --> 02:48:30,269
you don't necessarily know how each

2779
02:48:28,889 --> 02:48:35,818
individual compiler that you're going to

2780
02:48:30,270 --> 02:48:36,988
use GCC LLVM Microsoft Visual C because

2781
02:48:35,818 --> 02:48:39,809
you don't necessarily know what those

2782
02:48:36,988 --> 02:48:42,408
compilers are doing internally if you

2783
02:48:39,809 --> 02:48:46,078
don't mark something as being

2784
02:48:42,408 --> 02:48:48,658
translation unit only then you run the

2785
02:48:46,078 --> 02:48:50,788
risk that the compiler will spend longer

2786
02:48:48,658 --> 02:48:52,799
processing that file because it may

2787
02:48:50,789 --> 02:48:56,998
generate a bunch of extra stuff you

2788
02:48:52,799 --> 02:48:59,668
don't need like an export table which at

2789
02:48:56,998 --> 02:49:04,529
the end when it goes to start the linker

2790
02:48:59,668 --> 02:49:06,478
it realizes it didn't ever need right so

2791
02:49:04,529 --> 02:49:08,789
what ends up happening is if you imagine

2792
02:49:06,478 --> 02:49:11,908
let's imagine a compiler that isn't

2793
02:49:08,789 --> 02:49:14,248
smart enough to understand how the

2794
02:49:11,908 --> 02:49:16,109
being called which is perfectly rational

2795
02:49:14,248 --> 02:49:17,219
like if you're running compiler maybe

2796
02:49:16,109 --> 02:49:19,020
you just wrote something that just

2797
02:49:17,219 --> 02:49:21,328
compiles a translation unit it doesn't

2798
02:49:19,020 --> 02:49:23,189
know how it was invoked it doesn't know

2799
02:49:21,328 --> 02:49:27,568
what the result is going to be used for

2800
02:49:23,189 --> 02:49:29,699
right so it just goes along if it sees

2801
02:49:27,568 --> 02:49:31,498
all of the functions don't have the word

2802
02:49:29,699 --> 02:49:34,529
static in front of them it's gonna start

2803
02:49:31,498 --> 02:49:36,478
building an export table okay here's I

2804
02:49:34,529 --> 02:49:39,029
got to maintain this hash table of names

2805
02:49:36,478 --> 02:49:41,158
and I gotta like organize it for saving

2806
02:49:39,029 --> 02:49:44,220
out to an obj file and then maybe I

2807
02:49:41,158 --> 02:49:46,680
actually produce this whole I wrote like

2808
02:49:44,219 --> 02:49:49,049
a whole linkage table to disk which by

2809
02:49:46,680 --> 02:49:51,539
the way is massive because C++ name

2810
02:49:49,049 --> 02:49:52,590
mangling turns every function name into

2811
02:49:51,539 --> 02:49:59,551
like a

2812
02:49:52,591 --> 02:50:04,291
in 30 character string right so just to

2813
02:49:59,550 --> 02:50:06,751
be clear there's a lot can go wrong if

2814
02:50:04,290 --> 02:50:11,850
you don't put static in there so it's

2815
02:50:06,751 --> 02:50:13,470
important to understand that yes the

2816
02:50:11,851 --> 02:50:16,200
compiler may be smart enough not to

2817
02:50:13,470 --> 02:50:17,850
waste a bunch of time and energy doing

2818
02:50:16,200 --> 02:50:21,990
things you didn't need it to do

2819
02:50:17,851 --> 02:50:25,230
but why count on that when you can just

2820
02:50:21,989 --> 02:50:27,511
help it out and tell it look it's a

2821
02:50:25,229 --> 02:50:29,609
unity build none of these things are

2822
02:50:27,511 --> 02:50:33,409
gonna have external linkage trust me

2823
02:50:29,610 --> 02:50:33,409
here you go right

2824
02:51:33,870 --> 02:51:38,721
looks like we're all good okay

2825
02:51:51,180 --> 02:51:54,460
all right thank you very much for

2826
02:51:53,079 --> 02:51:55,899
joining me for the set a handmade Hero

2827
02:51:54,459 --> 02:51:57,729
it's been a pleasure coding with you as

2828
02:51:55,899 --> 02:51:59,170
always if you would like to follow along

2829
02:51:57,729 --> 02:52:01,209
with a stream at home you can always

2830
02:51:59,170 --> 02:52:03,819
peer to the game on handmade hero org

2831
02:52:01,209 --> 02:52:07,719
and it comes with the source code so

2832
02:52:03,819 --> 02:52:09,069
that you can play around with it we also

2833
02:52:07,719 --> 02:52:10,659
have a bunch of other stuff you can

2834
02:52:09,069 --> 02:52:12,340
check out on here there's a watch page

2835
02:52:10,659 --> 02:52:13,420
which will show the current schedule of

2836
02:52:12,340 --> 02:52:16,690
when we're going to be live and also

2837
02:52:13,420 --> 02:52:18,129
shows the stream when it is live and has

2838
02:52:16,690 --> 02:52:20,649
an episode guide you can use to search

2839
02:52:18,129 --> 02:52:21,939
the episode archives for all kinds of

2840
02:52:20,649 --> 02:52:23,680
stuff it's really cool you can jump

2841
02:52:21,940 --> 02:52:26,170
right to different topics and catch up

2842
02:52:23,680 --> 02:52:27,521
on anything you may have missed we also

2843
02:52:26,170 --> 02:52:28,960
have the handmade fun which is a place

2844
02:52:27,521 --> 02:52:30,311
where we fund things like that episode

2845
02:52:28,959 --> 02:52:31,689
guide which is actually community

2846
02:52:30,310 --> 02:52:33,520
maintained so if you want to contribute

2847
02:52:31,690 --> 02:52:35,860
to that there's a whole description of

2848
02:52:33,521 --> 02:52:38,380
it on there and all that also we have

2849
02:52:35,860 --> 02:52:40,090
mailing lists if you want to know what

2850
02:52:38,379 --> 02:52:41,350
we're up to it Molly Rocket and you can

2851
02:52:40,090 --> 02:52:42,969
always click on the little handmade hero

2852
02:52:41,351 --> 02:52:45,190
head to get to the rest of our projects

2853
02:52:42,969 --> 02:52:47,890
and our personal blogs if you want to

2854
02:52:45,190 --> 02:52:49,750
see what we're up to that's it for today

2855
02:52:47,890 --> 02:52:51,100
I will be back here tomorrow when we'll

2856
02:52:49,750 --> 02:52:53,049
take a look at some of those other API

2857
02:52:51,101 --> 02:52:56,351
calls I didn't get it didn't get to go

2858
02:52:53,049 --> 02:53:00,340
to today again all we're really doing

2859
02:52:56,351 --> 02:53:01,750
for this for that stream is just making

2860
02:53:00,340 --> 02:53:04,210
it nice and clean so the renderer can

2861
02:53:01,750 --> 02:53:07,390
kind of be baked and say here it is it's

2862
02:53:04,209 --> 02:53:10,199
all done and something that can be used

2863
02:53:07,390 --> 02:53:12,459
in you know external projects and so on

2864
02:53:10,200 --> 02:53:14,620
hope see you back here for that until

2865
02:53:12,459 --> 02:53:17,939
then have fun programming and I'll see

2866
02:53:14,620 --> 02:53:17,940
on the Internet take it easy everybody

