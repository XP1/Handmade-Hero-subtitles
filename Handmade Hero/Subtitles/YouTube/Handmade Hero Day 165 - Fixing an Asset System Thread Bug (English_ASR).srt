1
00:00:00,620 --> 00:00:04,889
hello everybody and welcome to handmade

2
00:00:03,149 --> 00:00:08,690
Hero the show we code a complete game

3
00:00:04,889 --> 00:00:12,330
live on stream no engines no libraries

4
00:00:08,689 --> 00:00:14,968
except we did give you the option in the

5
00:00:12,330 --> 00:00:16,859
asset Packer of using STB if you wanted

6
00:00:14,968 --> 00:00:18,839
to we've got an f0 in there so you do

7
00:00:16,859 --> 00:00:21,060
actually have the option in handmade

8
00:00:18,839 --> 00:00:23,219
heroes asset Packer of using one library

9
00:00:21,059 --> 00:00:26,848
otherwise you get a flop you can extract

10
00:00:23,219 --> 00:00:28,410
the font from windows of course but I

11
00:00:26,849 --> 00:00:30,329
feel like people probably would prefer

12
00:00:28,410 --> 00:00:34,710
to use the library because SDB libraries

13
00:00:30,329 --> 00:00:36,500
are so darn good and Windows is not that

14
00:00:34,710 --> 00:00:38,549
it's the opposite of that

15
00:00:36,500 --> 00:00:41,759
but yeah the mainline game handmade

16
00:00:38,549 --> 00:00:44,909
Heroes no library is still no engines

17
00:00:41,759 --> 00:00:47,670
still that's kind of still rules that's

18
00:00:44,909 --> 00:00:50,669
just the way it goes people and so

19
00:00:47,670 --> 00:00:52,379
that's where we're at right now to be

20
00:00:50,670 --> 00:00:53,850
honest with you I don't know exactly

21
00:00:52,378 --> 00:00:59,189
what we're gonna do today but I think

22
00:00:53,850 --> 00:01:02,100
that what we probably should be doing as

23
00:00:59,189 --> 00:01:04,829
it's been a couple days off well we

24
00:01:02,100 --> 00:01:07,590
probably should be doing is going

25
00:01:04,829 --> 00:01:11,280
through the font code now and figuring

26
00:01:07,590 --> 00:01:13,740
out how to do actual construction of

27
00:01:11,280 --> 00:01:16,228
sentences paragraphs that kind of thing

28
00:01:13,739 --> 00:01:18,209
with our font because all we really did

29
00:01:16,228 --> 00:01:21,090
with our font last week was show how to

30
00:01:18,209 --> 00:01:24,569
extract the font using either Sean

31
00:01:21,090 --> 00:01:27,780
parrots libraries or Windows directly

32
00:01:24,569 --> 00:01:29,069
and that was just for asset packing so

33
00:01:27,780 --> 00:01:30,930
all it did was just put that in our

34
00:01:29,069 --> 00:01:32,309
asset files but our game really just

35
00:01:30,930 --> 00:01:34,500
loads them and uses them exactly like

36
00:01:32,310 --> 00:01:37,140
bitmaps in right now there's absolutely

37
00:01:34,500 --> 00:01:38,849
no data stored with those bitmaps so

38
00:01:37,140 --> 00:01:41,129
there's no way for the game to actually

39
00:01:38,849 --> 00:01:42,509
reconstruct those into anything that

40
00:01:41,129 --> 00:01:45,239
would normally be considered a font you

41
00:01:42,509 --> 00:01:47,790
can't construct even a basic word with

42
00:01:45,239 --> 00:01:50,789
them because we don't even know stuff

43
00:01:47,790 --> 00:01:52,590
like you know that the letter O is short

44
00:01:50,790 --> 00:01:54,930
and like rests on the bottom of the base

45
00:01:52,590 --> 00:01:57,659
line whereas the the letter G like goes

46
00:01:54,930 --> 00:01:59,310
below it or something right so when we

47
00:01:57,659 --> 00:02:01,920
would actually put these if we tried to

48
00:01:59,310 --> 00:02:03,118
put these characters together to make a

49
00:02:01,920 --> 00:02:05,129
string we would end up with something

50
00:02:03,118 --> 00:02:07,769
that totally doesn't look like what what

51
00:02:05,129 --> 00:02:09,750
the font was supposed to look like so

52
00:02:07,769 --> 00:02:12,359
that's probably what we should do I do

53
00:02:09,750 --> 00:02:13,169
have a bug however that's the other

54
00:02:12,360 --> 00:02:14,250
thing that I

55
00:02:13,169 --> 00:02:15,479
to address that someone brought up on

56
00:02:14,250 --> 00:02:19,289
the forums I think they're absolutely

57
00:02:15,479 --> 00:02:23,129
correct I introduced a bug kind of late

58
00:02:19,289 --> 00:02:24,629
in the asset processing system and so I

59
00:02:23,129 --> 00:02:26,519
wonder if maybe what we should do

60
00:02:24,629 --> 00:02:28,139
instead before we go back to the font

61
00:02:26,520 --> 00:02:31,170
thing is just fixed that bug because

62
00:02:28,139 --> 00:02:34,219
it's a relatively important bug and you

63
00:02:31,169 --> 00:02:36,479
know like I said before if I can I

64
00:02:34,219 --> 00:02:37,979
always like to fix a bug immediately

65
00:02:36,479 --> 00:02:39,659
upon knowing about it and sometimes like

66
00:02:37,979 --> 00:02:40,619
I can't really do that on handmade hero

67
00:02:39,659 --> 00:02:43,109
because we're right in the middle of

68
00:02:40,620 --> 00:02:45,090
something and and you know it's hard for

69
00:02:43,110 --> 00:02:46,470
educational purposes if I'm just jumping

70
00:02:45,090 --> 00:02:47,759
around all the time totally randomly so

71
00:02:46,469 --> 00:02:49,560
I try to keep myself a more constrained

72
00:02:47,759 --> 00:02:51,568
where it's in my real day-to-day work I

73
00:02:49,560 --> 00:02:52,860
would absolutely stop right there and go

74
00:02:51,568 --> 00:02:55,318
fix it and then come back to what I was

75
00:02:52,860 --> 00:02:56,850
doing and so I feel like probably what

76
00:02:55,318 --> 00:02:58,229
we should do is fix the bug because we

77
00:02:56,849 --> 00:02:59,879
do have the opportunity to do so we

78
00:02:58,229 --> 00:03:01,109
already just had a few days off so it's

79
00:02:59,879 --> 00:03:02,699
not like we're we're right in the middle

80
00:03:01,110 --> 00:03:03,989
of something and the next thing that we

81
00:03:02,699 --> 00:03:07,289
were gonna do with fonts was really to

82
00:03:03,989 --> 00:03:09,000
start you know pushing sort of the

83
00:03:07,289 --> 00:03:10,048
metadata aspect of the fonts like what

84
00:03:09,000 --> 00:03:11,189
goes in there to tell you how to

85
00:03:10,049 --> 00:03:13,530
reconstruct stuff and so that's really

86
00:03:11,189 --> 00:03:16,019
different from the font glyph extraction

87
00:03:13,530 --> 00:03:18,359
anyways so I think that's what I'd like

88
00:03:16,019 --> 00:03:21,930
to do today is definitely a coding day

89
00:03:18,359 --> 00:03:24,269
so day 165 if you want to follow along

90
00:03:21,930 --> 00:03:26,370
at home with today's coding you will

91
00:03:24,269 --> 00:03:27,750
want to unpack day 164 source code if

92
00:03:26,370 --> 00:03:29,250
you have pre-ordered the game on a major

93
00:03:27,750 --> 00:03:31,229
org that zip that you can download

94
00:03:29,250 --> 00:03:33,060
actually there's two zips the ones for

95
00:03:31,229 --> 00:03:35,099
the old first 100 days and the one for

96
00:03:33,060 --> 00:03:37,859
the current block of 100 days you want

97
00:03:35,099 --> 00:03:40,079
that current zip should have a day 164

98
00:03:37,859 --> 00:03:41,700
source code in it that you can unpack

99
00:03:40,079 --> 00:03:44,250
into a directory and that's what I'm

100
00:03:41,699 --> 00:03:46,339
starting with right now so let me take a

101
00:03:44,250 --> 00:03:48,959
second to explain what the bug is and

102
00:03:46,340 --> 00:03:50,640
you'll probably if you if you're with me

103
00:03:48,959 --> 00:03:53,729
if you watched when we implemented the

104
00:03:50,639 --> 00:03:55,529
asset loading and streaming system you

105
00:03:53,729 --> 00:03:57,750
should be actually pretty familiar with

106
00:03:55,530 --> 00:04:01,280
the stuff what I'm about to say because

107
00:03:57,750 --> 00:04:01,280
we actually talked about it already

108
00:04:02,419 --> 00:04:08,969
cuz the bug was one that I specifically

109
00:04:06,259 --> 00:04:10,888
intentionally have put in protection for

110
00:04:08,969 --> 00:04:12,269
and then for some reason in that way

111
00:04:10,889 --> 00:04:13,709
that I guess when you're programming you

112
00:04:12,269 --> 00:04:15,180
do or maybe it's just because when

113
00:04:13,709 --> 00:04:16,918
you're streaming programming it's even

114
00:04:15,180 --> 00:04:21,090
more likely to happen

115
00:04:16,918 --> 00:04:23,339
I suppose this computer now - I removed

116
00:04:21,089 --> 00:04:24,929
the production that we had and so now we

117
00:04:23,339 --> 00:04:26,459
don't have that protection and it's a

118
00:04:24,930 --> 00:04:28,590
bug that's very unlikely

119
00:04:26,459 --> 00:04:30,209
to occur so having removed the

120
00:04:28,589 --> 00:04:31,978
protection we probably will never see

121
00:04:30,209 --> 00:04:33,478
the bug except for a baby in some rare

122
00:04:31,978 --> 00:04:34,949
circumstance and that's exactly the kind

123
00:04:33,478 --> 00:04:36,680
of bug that you don't want to have in

124
00:04:34,949 --> 00:04:41,220
your code because you will never find it

125
00:04:36,680 --> 00:04:42,930
and you know that is obviously a reason

126
00:04:41,220 --> 00:04:45,630
to take a look at it so let me explain

127
00:04:42,930 --> 00:04:48,389
what it is if you remember when I said

128
00:04:45,629 --> 00:04:50,279
let's go ahead and do our own memory

129
00:04:48,389 --> 00:04:53,038
management you'll remember we had this

130
00:04:50,279 --> 00:04:55,109
acquire asset memory function and what I

131
00:04:53,038 --> 00:04:56,939
did was in the middle of implementing

132
00:04:55,110 --> 00:04:59,610
acquire asset memory I decided that

133
00:04:56,939 --> 00:05:01,379
rather than doing this as a sequential

134
00:04:59,610 --> 00:05:04,139
step I would do it

135
00:05:01,379 --> 00:05:07,529
whenever the asset actually needed to be

136
00:05:04,139 --> 00:05:09,269
acquired we would free any memory that

137
00:05:07,529 --> 00:05:14,668
we needed to free and so if you remember

138
00:05:09,269 --> 00:05:18,089
that is happening that is happening in

139
00:05:14,668 --> 00:05:21,120
this actual loop so if we can find space

140
00:05:18,089 --> 00:05:23,969
for the asset we go ahead and and use

141
00:05:21,120 --> 00:05:26,579
that space but if we cannot find space

142
00:05:23,970 --> 00:05:28,740
for the asset we start to free things

143
00:05:26,579 --> 00:05:31,139
and we free things until we can now the

144
00:05:28,740 --> 00:05:34,110
problem with that is that when we go to

145
00:05:31,139 --> 00:05:36,360
free things like we are doing here that

146
00:05:34,110 --> 00:05:39,030
activity could easily free something

147
00:05:36,360 --> 00:05:41,370
that we were already depending on having

148
00:05:39,029 --> 00:05:43,829
this frame which would lead to us

149
00:05:41,370 --> 00:05:46,050
drawing a bunch of garbage on the screen

150
00:05:43,829 --> 00:05:48,839
not necessarily a catastrophic thing to

151
00:05:46,050 --> 00:05:57,650
have happen but certainly not a pleasant

152
00:05:48,839 --> 00:06:02,779
thing to have happen to our frame right

153
00:05:57,649 --> 00:06:04,679
so the question is how do we how is that

154
00:06:02,779 --> 00:06:06,718
you know how is it happening and how do

155
00:06:04,680 --> 00:06:11,280
we fix it right well it's happening

156
00:06:06,718 --> 00:06:12,959
because we build up a list of assets

157
00:06:11,279 --> 00:06:15,119
well we build up a list of render

158
00:06:12,959 --> 00:06:18,120
instructions right that's our render

159
00:06:15,120 --> 00:06:20,189
group it's this thing right we build up

160
00:06:18,120 --> 00:06:21,959
one of these that's all of the things

161
00:06:20,189 --> 00:06:23,550
that we need to render for a frame and

162
00:06:21,959 --> 00:06:25,228
then we kick it off to our multiple

163
00:06:23,550 --> 00:06:27,090
render threads which then do a bunch of

164
00:06:25,228 --> 00:06:30,000
rendering on it and that's all fine

165
00:06:27,089 --> 00:06:30,478
right the problem is when we actually do

166
00:06:30,000 --> 00:06:32,579
that

167
00:06:30,478 --> 00:06:35,430
it means that these bitmaps that are

168
00:06:32,579 --> 00:06:38,069
used in the render instructions can

169
00:06:35,430 --> 00:06:39,658
never be freed until after the rendering

170
00:06:38,069 --> 00:06:40,110
is completed and in fact we did some

171
00:06:39,658 --> 00:06:41,639
work

172
00:06:40,110 --> 00:06:43,500
to prevent that from happening with

173
00:06:41,639 --> 00:06:46,680
multi-threaded rendering that is where

174
00:06:43,500 --> 00:06:48,120
our asset locking comes in and all that

175
00:06:46,680 --> 00:06:50,009
stuff and so we kind of all knew about

176
00:06:48,120 --> 00:06:51,449
that and what I did to protect against

177
00:06:50,009 --> 00:06:53,519
that as I made it so that assets could

178
00:06:51,449 --> 00:06:56,009
only be evicted at a very specific time

179
00:06:53,519 --> 00:06:59,099
right I had a thing called evict assets

180
00:06:56,009 --> 00:07:00,839
as necessary or something like that and

181
00:06:59,100 --> 00:07:02,550
we would call that and that's where we

182
00:07:00,839 --> 00:07:03,810
do our eviction and I specifically said

183
00:07:02,550 --> 00:07:06,090
why I was doing at that time I was like

184
00:07:03,810 --> 00:07:09,600
so that we don't free things that are

185
00:07:06,089 --> 00:07:11,279
currently in flight like this but then

186
00:07:09,600 --> 00:07:12,990
what did I do when we implemented this

187
00:07:11,279 --> 00:07:14,939
function it's like oh I'd rather do it

188
00:07:12,990 --> 00:07:16,650
here and then I did it here and that

189
00:07:14,939 --> 00:07:18,540
totally reintroduces the bug that I was

190
00:07:16,649 --> 00:07:21,509
trying to avoid now assuming that we

191
00:07:18,540 --> 00:07:23,490
have enough memory so that we're never

192
00:07:21,509 --> 00:07:25,050
rendering close to our memory limit in

193
00:07:23,490 --> 00:07:26,639
terms of the number of things used on a

194
00:07:25,050 --> 00:07:28,439
frame which is pretty much certain to be

195
00:07:26,639 --> 00:07:30,629
the case we'll never actually hit this

196
00:07:28,439 --> 00:07:31,740
bug and so that's kind of good so in

197
00:07:30,629 --> 00:07:34,620
some sense we could just leave it in

198
00:07:31,740 --> 00:07:41,730
there and cross our fingers right that's

199
00:07:34,620 --> 00:07:46,079
something we could do but I don't know

200
00:07:41,730 --> 00:07:48,629
about that right I mean doesn't sound

201
00:07:46,079 --> 00:07:51,449
like a particularly robust thing to do

202
00:07:48,629 --> 00:07:54,269
and I think it should raise a question

203
00:07:51,449 --> 00:07:56,909
can we do something better and so what

204
00:07:54,269 --> 00:07:59,699
I'm wondering is do I now want to start

205
00:07:56,910 --> 00:08:03,000
you know maybe looking do I want to

206
00:07:59,699 --> 00:08:05,909
potentially look at doing something a

207
00:08:03,000 --> 00:08:07,829
little fancier is there something I

208
00:08:05,910 --> 00:08:11,310
could do that would actually allow me to

209
00:08:07,829 --> 00:08:15,680
mark assets definitively as being used

210
00:08:11,310 --> 00:08:18,990
or not used in some specific way right

211
00:08:15,680 --> 00:08:20,699
and the reason that I was thinking about

212
00:08:18,990 --> 00:08:22,379
this was till I was like I would like to

213
00:08:20,699 --> 00:08:24,120
be able to keep freeing stuff here I

214
00:08:22,379 --> 00:08:26,040
think that's a more efficient way to do

215
00:08:24,120 --> 00:08:27,629
it so that we only actually free when we

216
00:08:26,040 --> 00:08:30,150
know we actually need to free stuff that

217
00:08:27,629 --> 00:08:31,649
seems like a good idea and furthermore

218
00:08:30,149 --> 00:08:36,059
the other thing I was thinking of is in

219
00:08:31,649 --> 00:08:38,519
our asset system this locked nonsense it

220
00:08:36,059 --> 00:08:40,109
just complicates things right there's

221
00:08:38,519 --> 00:08:42,360
this notion that assets can be locked

222
00:08:40,110 --> 00:08:45,350
and if assets can be locked it means

223
00:08:42,360 --> 00:08:47,310
that they cannot be you know evicted

224
00:08:45,350 --> 00:08:49,560
well if we're gonna have that

225
00:08:47,309 --> 00:08:51,750
complication wouldn't it be nice to just

226
00:08:49,559 --> 00:08:53,099
have something that was a little bit

227
00:08:51,750 --> 00:08:53,909
more flexible and worked a little bit

228
00:08:53,100 --> 00:08:55,649
better right

229
00:08:53,909 --> 00:08:58,709
if we already have to have that for the

230
00:08:55,649 --> 00:09:00,779
background threads you know is that that

231
00:08:58,710 --> 00:09:02,400
lock thing is kind of a relatively

232
00:09:00,779 --> 00:09:04,470
crappy way of implementing that too

233
00:09:02,399 --> 00:09:07,199
because it means that if you remember if

234
00:09:04,470 --> 00:09:09,149
those assets can never be paged out even

235
00:09:07,200 --> 00:09:11,520
if the background processes aren't using

236
00:09:09,149 --> 00:09:12,990
them at this time right those assets get

237
00:09:11,519 --> 00:09:14,850
locked when the background tasks use

238
00:09:12,990 --> 00:09:16,350
them and never get unlocked right they

239
00:09:14,850 --> 00:09:18,720
have to stay in memory forever and

240
00:09:16,350 --> 00:09:20,070
that's not nearly as efficient as it

241
00:09:18,720 --> 00:09:22,259
could be especially if we end up having

242
00:09:20,070 --> 00:09:23,670
lots and lots of background art

243
00:09:22,259 --> 00:09:28,620
composition assets or something like

244
00:09:23,669 --> 00:09:30,240
this right so that's just I mean that's

245
00:09:28,620 --> 00:09:32,279
that's basically that's basically what

246
00:09:30,240 --> 00:09:34,649
we're dealing with that was the thing

247
00:09:32,279 --> 00:09:37,079
that I had written down and so I'm gonna

248
00:09:34,649 --> 00:09:38,909
just brainstorm for a second I'm just

249
00:09:37,080 --> 00:09:41,700
gonna kind of talk about the problem a

250
00:09:38,909 --> 00:09:43,740
little bit and see if I can arrive at a

251
00:09:41,700 --> 00:09:46,620
solution that would solve both of those

252
00:09:43,740 --> 00:09:48,029
problems in a way that maybe I would

253
00:09:46,620 --> 00:09:50,549
feel a little bit more comfortable about

254
00:09:48,029 --> 00:09:54,299
going forward so that's what we're gonna

255
00:09:50,549 --> 00:09:58,979
try to do today we will see if we can

256
00:09:54,299 --> 00:10:04,729
succeed so here is day 165 and this is

257
00:09:58,980 --> 00:10:13,370
going to be like asset or I should say

258
00:10:04,730 --> 00:10:18,019
in-flight asset protection and in-flight

259
00:10:13,370 --> 00:10:21,330
asset protection the word in-flight

260
00:10:18,019 --> 00:10:24,120
often is used in programming parlance to

261
00:10:21,330 --> 00:10:27,330
mean something that is being used in a

262
00:10:24,120 --> 00:10:28,710
system in a way that like matters to

263
00:10:27,330 --> 00:10:31,110
other systems right it's like if

264
00:10:28,710 --> 00:10:32,730
something's in flight then it means that

265
00:10:31,110 --> 00:10:34,860
like you know for example with the

266
00:10:32,730 --> 00:10:37,110
bitmaps if it Maps I'm saving this but

267
00:10:34,860 --> 00:10:38,820
in flight I mean that some system is

268
00:10:37,110 --> 00:10:40,470
currently in the process of using it and

269
00:10:38,820 --> 00:10:43,050
if somebody else comes in there and

270
00:10:40,470 --> 00:10:44,820
mucks with it during that process that

271
00:10:43,049 --> 00:10:47,789
could be very deleterious to this other

272
00:10:44,820 --> 00:10:48,810
system right so an in-flight asset is

273
00:10:47,789 --> 00:10:50,789
one that's like going through the

274
00:10:48,809 --> 00:10:53,099
process of being used which may take a

275
00:10:50,789 --> 00:10:54,360
while and so what we want to do is

276
00:10:53,100 --> 00:10:56,100
figure out a way of protecting our

277
00:10:54,360 --> 00:10:59,370
assets so that while they're being used

278
00:10:56,100 --> 00:11:02,610
in these rendering different rendering

279
00:10:59,370 --> 00:11:06,539
scenarios we don't evict them from the

280
00:11:02,610 --> 00:11:07,740
set of in-memory assets to replace them

281
00:11:06,539 --> 00:11:11,009
with some other asset

282
00:11:07,740 --> 00:11:12,180
right that might be used and so what

283
00:11:11,009 --> 00:11:14,909
we'd like to do is figure out a way to

284
00:11:12,179 --> 00:11:17,370
do that right so if we think about the

285
00:11:14,909 --> 00:11:24,079
usage pattern for this right if we have

286
00:11:17,370 --> 00:11:26,669
an asset we then have render groups and

287
00:11:24,080 --> 00:11:31,650
there are multiple render groups in the

288
00:11:26,669 --> 00:11:34,500
system these render groups use the asset

289
00:11:31,649 --> 00:11:36,029
right so we have a render group for

290
00:11:34,500 --> 00:11:38,759
example this might be a ground tile

291
00:11:36,029 --> 00:11:40,500
render group and this might be an actual

292
00:11:38,759 --> 00:11:42,659
game frame right this might be a frame

293
00:11:40,500 --> 00:11:44,940
of the actual game and they both might

294
00:11:42,659 --> 00:11:47,250
be using this asset and what we know is

295
00:11:44,940 --> 00:11:49,830
they begin using the asset at some time

296
00:11:47,250 --> 00:11:51,750
right in their existence and then there

297
00:11:49,830 --> 00:11:53,490
when they are done when the render group

298
00:11:51,750 --> 00:11:56,250
is completely committed and has finished

299
00:11:53,490 --> 00:11:58,379
if they no longer need the asset so

300
00:11:56,250 --> 00:12:01,519
there's basically an interval right

301
00:11:58,379 --> 00:12:05,279
there's sort of a usage interval right

302
00:12:01,519 --> 00:12:08,399
that we can talk about in regards to

303
00:12:05,279 --> 00:12:10,829
when this asset becomes used and when it

304
00:12:08,399 --> 00:12:13,199
is released right so it's kind of got an

305
00:12:10,830 --> 00:12:15,090
acquire release sort of semantics to it

306
00:12:13,200 --> 00:12:18,270
right like a reference counting sort of

307
00:12:15,090 --> 00:12:20,610
semantics to it where you say I'm using

308
00:12:18,269 --> 00:12:29,730
this thing now and now I am not using

309
00:12:20,610 --> 00:12:33,509
this thing anymore right and so yeah so

310
00:12:29,730 --> 00:12:35,129
what we would like to know is if we were

311
00:12:33,509 --> 00:12:37,169
going to replace a given asset because

312
00:12:35,129 --> 00:12:39,809
remember this is not garbage collection

313
00:12:37,169 --> 00:12:41,759
right this isn't saying that once an

314
00:12:39,809 --> 00:12:43,379
asset is no longer used anymore we want

315
00:12:41,759 --> 00:12:45,269
to get rid of it that's not true

316
00:12:43,379 --> 00:12:48,029
when an assets not used anymore we

317
00:12:45,269 --> 00:12:50,639
typically keep it we only want to get

318
00:12:48,029 --> 00:12:52,529
rid of the asset once we need space for

319
00:12:50,639 --> 00:12:55,649
it for it once we need it space for a

320
00:12:52,529 --> 00:12:59,120
different asset right so what we're

321
00:12:55,649 --> 00:13:02,610
trying to do here is not so much keep

322
00:12:59,120 --> 00:13:04,860
sort of keep track of what it's used to

323
00:13:02,610 --> 00:13:07,740
get rid of it we're trying to do is keep

324
00:13:04,860 --> 00:13:09,840
track - use to prevent sort of arts or

325
00:13:07,740 --> 00:13:11,430
other sort of thing which in some sense

326
00:13:09,840 --> 00:13:12,509
you could think of as the garbage

327
00:13:11,429 --> 00:13:14,309
collection over there it's not garbage

328
00:13:12,509 --> 00:13:17,069
so it's it's virtual memory paging

329
00:13:14,309 --> 00:13:18,750
basically write our paging system from

330
00:13:17,070 --> 00:13:21,260
ever paging it out

331
00:13:18,750 --> 00:13:25,110
when it is actively in use

332
00:13:21,259 --> 00:13:27,750
so obviously we could introduce literal

333
00:13:25,110 --> 00:13:29,879
acquire release semantics right if we

334
00:13:27,750 --> 00:13:31,200
wanted to we could literally have

335
00:13:29,879 --> 00:13:33,450
acquire and release

336
00:13:31,200 --> 00:13:36,350
we could have an integer on an asset

337
00:13:33,450 --> 00:13:39,420
that's like its usage count right and

338
00:13:36,350 --> 00:13:41,970
every time a one of these render groups

339
00:13:39,419 --> 00:13:45,889
uses it we increment the usage count and

340
00:13:41,970 --> 00:13:49,200
every time one of these things you know

341
00:13:45,889 --> 00:13:51,990
finishes using it it decrements the

342
00:13:49,200 --> 00:13:53,040
usage count now here's the problem with

343
00:13:51,990 --> 00:13:54,990
that approach because that'd be

344
00:13:53,039 --> 00:13:56,789
relatively easy right it would have to

345
00:13:54,990 --> 00:13:59,340
be atomic cuz these can happen from

346
00:13:56,789 --> 00:14:02,569
multiple threads but we could use an

347
00:13:59,340 --> 00:14:06,149
atomic increment or an atomic decrement

348
00:14:02,570 --> 00:14:08,100
we absolutely could use those but

349
00:14:06,149 --> 00:14:12,000
there's a problem we don't really know

350
00:14:08,100 --> 00:14:13,620
when we're done with them right so right

351
00:14:12,000 --> 00:14:15,919
now what happens as we go through the

352
00:14:13,620 --> 00:14:18,120
render group and we do all the rendering

353
00:14:15,919 --> 00:14:20,009
acquiring is easy we know exactly where

354
00:14:18,120 --> 00:14:21,480
that happens but right now we don't ever

355
00:14:20,009 --> 00:14:23,429
step through and figure out what all the

356
00:14:21,480 --> 00:14:25,740
things are we need to release so in

357
00:14:23,429 --> 00:14:27,659
order to actually execute that release

358
00:14:25,740 --> 00:14:29,700
in order to execute the decrement step

359
00:14:27,659 --> 00:14:31,919
to figure out if something's use count

360
00:14:29,700 --> 00:14:33,870
was zero right in order to increment the

361
00:14:31,919 --> 00:14:36,929
decrement step we'd have to run through

362
00:14:33,870 --> 00:14:39,389
the render groups contents a second time

363
00:14:36,929 --> 00:14:41,879
looking at all of the bitmaps in the

364
00:14:39,389 --> 00:14:44,759
render group and decrementing them so it

365
00:14:41,879 --> 00:14:47,189
introduces this whole other big old

366
00:14:44,759 --> 00:14:48,779
nasty piece of code that has to go

367
00:14:47,190 --> 00:14:50,520
through again I mean it's not like it's

368
00:14:48,779 --> 00:14:52,949
that complicated but you know it's

369
00:14:50,519 --> 00:14:55,590
totally extraneous superfluous work that

370
00:14:52,950 --> 00:14:57,750
is there for no reason other than to

371
00:14:55,590 --> 00:14:59,910
release these bitmaps and if that was

372
00:14:57,750 --> 00:15:01,950
the only alternative I might say leave

373
00:14:59,909 --> 00:15:04,469
the bug in there it's way more efficient

374
00:15:01,950 --> 00:15:05,970
to not do that it's potentially a lot

375
00:15:04,470 --> 00:15:08,340
less error-prone to not do that because

376
00:15:05,970 --> 00:15:09,690
we know the cost of our current bug is

377
00:15:08,340 --> 00:15:11,490
just we draw some garbage on the screen

378
00:15:09,690 --> 00:15:13,110
once in a while and probably it will

379
00:15:11,490 --> 00:15:14,879
actually never happen if we have enough

380
00:15:13,110 --> 00:15:16,320
memory will probably never actually have

381
00:15:14,879 --> 00:15:17,759
that happen because the chances of you

382
00:15:16,320 --> 00:15:19,560
evicting an asset you just used are

383
00:15:17,759 --> 00:15:21,029
extremely low you're much more likely to

384
00:15:19,559 --> 00:15:22,469
evict an asset that was used like two

385
00:15:21,029 --> 00:15:24,629
frames ago and that hasn't been used in

386
00:15:22,470 --> 00:15:26,820
a frame or two right that's what the

387
00:15:24,629 --> 00:15:29,519
least recently used thing eviction

388
00:15:26,820 --> 00:15:31,050
scheme does for us so before I would

389
00:15:29,519 --> 00:15:33,179
introduce that complexity which has a

390
00:15:31,049 --> 00:15:34,019
really bad failure case right the

391
00:15:33,179 --> 00:15:37,618
failure case they

392
00:15:34,019 --> 00:15:40,259
is the plus plus if you don't

393
00:15:37,619 --> 00:15:41,759
symmetrically subtract from one of the

394
00:15:40,259 --> 00:15:43,499
plus pluses you would end up

395
00:15:41,759 --> 00:15:44,789
incrementing your assets without ever

396
00:15:43,499 --> 00:15:46,589
decorating them properly and you just

397
00:15:44,789 --> 00:15:48,988
end up at with asset build up until you

398
00:15:46,589 --> 00:15:50,730
get flooding the entire system with

399
00:15:48,989 --> 00:15:52,649
assets that can't be evicted and then

400
00:15:50,730 --> 00:15:54,449
then the game can't run anymore right

401
00:15:52,649 --> 00:15:56,159
you wouldn't be able to load any new

402
00:15:54,448 --> 00:15:57,659
assets so you'd just only be able to see

403
00:15:56,159 --> 00:15:58,919
parts of the world you already saw and

404
00:15:57,659 --> 00:16:02,969
you wouldn't be able to see any new ones

405
00:15:58,919 --> 00:16:06,778
right so that's a problem so I feel like

406
00:16:02,970 --> 00:16:09,269
that is not a good option now what might

407
00:16:06,778 --> 00:16:15,298
be a more interesting option would be to

408
00:16:09,269 --> 00:16:16,558
use a sort of an ID sweep right or I

409
00:16:15,298 --> 00:16:19,588
guess I don't know if there's a good

410
00:16:16,558 --> 00:16:22,318
word for this I feel like generation

411
00:16:19,589 --> 00:16:27,709
index might be the best way to describe

412
00:16:22,318 --> 00:16:30,479
it but what you could imagine instead is

413
00:16:27,708 --> 00:16:33,448
instead of talking about assets as

414
00:16:30,480 --> 00:16:35,819
having a increment or decrement involved

415
00:16:33,448 --> 00:16:40,798
in them right what we could do instead

416
00:16:35,818 --> 00:16:43,740
is have some notion of the render groups

417
00:16:40,798 --> 00:16:48,178
as being a series and then using that

418
00:16:43,740 --> 00:16:50,730
series to lock our assets right so for

419
00:16:48,178 --> 00:16:54,088
example let's say that every time we

420
00:16:50,730 --> 00:16:57,119
create a new render group right it gets

421
00:16:54,089 --> 00:17:00,959
an ID and that ID is some kind of

422
00:16:57,119 --> 00:17:02,850
monotonically increasing thing right so

423
00:17:00,958 --> 00:17:06,629
the first render group gets zero the

424
00:17:02,850 --> 00:17:11,130
next render group right gets one and so

425
00:17:06,630 --> 00:17:12,689
on and these are all atomic so I do an

426
00:17:11,130 --> 00:17:14,339
atomic increment on a number and

427
00:17:12,689 --> 00:17:16,470
whatever I get back is my render group

428
00:17:14,338 --> 00:17:19,318
ID so I know that even on in a multi

429
00:17:16,470 --> 00:17:25,769
threading scenario no to render groups

430
00:17:19,318 --> 00:17:29,940
have the same number right okay so if we

431
00:17:25,769 --> 00:17:33,240
were to do that then what we could do is

432
00:17:29,940 --> 00:17:34,950
every time we use an asset instead of

433
00:17:33,240 --> 00:17:36,659
incrementing in usage count what we

434
00:17:34,950 --> 00:17:40,110
could do is we could write in the

435
00:17:36,659 --> 00:17:41,940
generation index into the asset right so

436
00:17:40,109 --> 00:17:46,259
every time we write it into the asset

437
00:17:41,940 --> 00:17:47,360
right so if the you know if a writer

438
00:17:46,259 --> 00:17:48,410
group goes and uses one

439
00:17:47,359 --> 00:17:52,879
does it right sit in there and

440
00:17:48,410 --> 00:17:58,429
furthermore we could do a scheme where

441
00:17:52,880 --> 00:18:00,799
we always keep the latest one right so

442
00:17:58,429 --> 00:18:04,009
basically you know we read out of the

443
00:18:00,798 --> 00:18:06,048
thing we read we read out unate AMA CLE

444
00:18:04,009 --> 00:18:08,420
so we just read whatever's in there we

445
00:18:06,048 --> 00:18:10,190
take our render group and it and we

446
00:18:08,420 --> 00:18:12,640
produce the maximum of those two and

447
00:18:10,190 --> 00:18:16,009
then we do an atomic compare exchange

448
00:18:12,640 --> 00:18:18,350
for the one we read out and ours and

449
00:18:16,009 --> 00:18:21,019
that way if someone else has come in and

450
00:18:18,349 --> 00:18:23,089
replaced it right it won't

451
00:18:21,019 --> 00:18:24,650
we won't replace we'll just sit in a

452
00:18:23,089 --> 00:18:26,058
little loop and try to replace it but if

453
00:18:24,650 --> 00:18:27,530
it is we'll replace it with the higher

454
00:18:26,058 --> 00:18:29,690
number right something that always

455
00:18:27,529 --> 00:18:32,829
basically replaces with a higher number

456
00:18:29,690 --> 00:18:35,360
and that would be pretty trivial to do

457
00:18:32,829 --> 00:18:37,819
okay so we could try to do something

458
00:18:35,359 --> 00:18:40,279
like this now if we did something like

459
00:18:37,819 --> 00:18:43,460
this what that means is that now an

460
00:18:40,279 --> 00:18:45,950
asset has you know basically a tag in

461
00:18:43,460 --> 00:18:49,308
the corner right it has a generation

462
00:18:45,950 --> 00:18:53,779
index and what that index tells us is

463
00:18:49,308 --> 00:18:57,200
that in until the render group with that

464
00:18:53,779 --> 00:18:59,869
number finishes and all prior render

465
00:18:57,200 --> 00:19:03,169
groups as well we cannot guarantee that

466
00:18:59,869 --> 00:19:06,709
the asset can be evicted so wait until

467
00:19:03,169 --> 00:19:08,960
then and do it so then all we need to do

468
00:19:06,710 --> 00:19:12,019
is we need to make sure that we can

469
00:19:08,960 --> 00:19:14,360
actually retire these render groups in a

470
00:19:12,019 --> 00:19:16,548
way that lets us know what generation

471
00:19:14,359 --> 00:19:18,889
index has actually completed right and

472
00:19:16,548 --> 00:19:20,298
that's actually not that hard to do it's

473
00:19:18,890 --> 00:19:22,460
a little annoying but it's not that hard

474
00:19:20,298 --> 00:19:25,308
to do and not super expensive and so

475
00:19:22,460 --> 00:19:27,529
once we do that we can then just compare

476
00:19:25,308 --> 00:19:29,720
our assets to the current renderer

477
00:19:27,529 --> 00:19:32,089
generation index and assuming that the

478
00:19:29,720 --> 00:19:34,220
asset compares below it we know that it

479
00:19:32,089 --> 00:19:36,019
could be evicted if it compares equal to

480
00:19:34,220 --> 00:19:41,000
or above it we know that it couldn't be

481
00:19:36,019 --> 00:19:42,679
right something like this and that would

482
00:19:41,000 --> 00:19:47,539
be one way of us knowing that we would

483
00:19:42,679 --> 00:19:50,890
never evac tassets you know that we see

484
00:19:47,539 --> 00:19:50,889
me I'm tired today

485
00:19:53,048 --> 00:19:58,179
it isn't a sleepy program dad don't mind

486
00:19:55,640 --> 00:20:02,150
telling you I fall asleep at work anyway

487
00:19:58,179 --> 00:20:04,600
so that is one thing we could do now

488
00:20:02,150 --> 00:20:09,980
there's a little bit of wonkiness there

489
00:20:04,599 --> 00:20:12,230
in that we do have a problem where we

490
00:20:09,980 --> 00:20:15,319
kind of need to watch out for rapping

491
00:20:12,230 --> 00:20:19,339
like when we get up to you aunt max

492
00:20:15,319 --> 00:20:22,069
right the maximum of a 32-bit integer we

493
00:20:19,339 --> 00:20:23,538
have to be aware of overflow right we'd

494
00:20:22,069 --> 00:20:26,928
have to design it so that when we check

495
00:20:23,538 --> 00:20:29,750
the asset we actually check for some

496
00:20:26,929 --> 00:20:32,390
kind of assigned distance between it and

497
00:20:29,750 --> 00:20:34,730
whatever the the this generation index

498
00:20:32,390 --> 00:20:36,500
is so that we don't have the bug where

499
00:20:34,730 --> 00:20:40,429
when we wrap around everything kind of

500
00:20:36,500 --> 00:20:42,190
freaks out right because you know if we

501
00:20:40,429 --> 00:20:45,080
are rendering at 60 frames a second

502
00:20:42,190 --> 00:20:50,210
right just to give you some perspective

503
00:20:45,079 --> 00:20:52,658
here at 60 frames a second right the you

504
00:20:50,210 --> 00:20:57,558
know if we were to take sort of that

505
00:20:52,659 --> 00:20:59,090
that integer maximum 1024 1024 10-4

506
00:20:57,558 --> 00:21:03,259
that's what an unsigned integer can hold

507
00:20:59,089 --> 00:21:05,720
if that was our our count at 60 frames a

508
00:21:03,259 --> 00:21:10,849
second right it's gonna be that many

509
00:21:05,720 --> 00:21:17,089
seconds that's that many minutes that's

510
00:21:10,849 --> 00:21:18,529
that many hours right all right maybe

511
00:21:17,089 --> 00:21:22,399
that's not quite right let's try that

512
00:21:18,529 --> 00:21:27,399
one more time like I said please sleepy

513
00:21:22,400 --> 00:21:36,019
day maximum value 60 frames a second

514
00:21:27,400 --> 00:21:41,890
right 60 seconds in a minute 60 minutes

515
00:21:36,019 --> 00:21:46,429
in an hour right 24 hours in a day and

516
00:21:41,890 --> 00:21:47,150
so yeah so you know rendering cersei

517
00:21:46,429 --> 00:21:50,360
frames a second

518
00:21:47,150 --> 00:21:53,809
that would be 2.2 years the game could

519
00:21:50,359 --> 00:21:55,009
run for without wrapping of course it's

520
00:21:53,808 --> 00:21:58,548
generating ground chunks in the

521
00:21:55,009 --> 00:22:00,470
background so figure you know at most 4

522
00:21:58,548 --> 00:22:03,408
or 5 times out of frame so you know I

523
00:22:00,470 --> 00:22:07,029
mean 6 months if you left the game

524
00:22:03,409 --> 00:22:07,030
running for 6 months you might wrap

525
00:22:07,049 --> 00:22:11,259
just something to think about

526
00:22:09,460 --> 00:22:14,860
so do we need to cover that okay maybe

527
00:22:11,259 --> 00:22:16,839
we don't I don't know it depends how you

528
00:22:14,859 --> 00:22:19,779
feel about it but I'm just saying that

529
00:22:16,839 --> 00:22:21,399
it's something to be sort of aware of is

530
00:22:19,779 --> 00:22:22,450
it likely to happen no most people

531
00:22:21,400 --> 00:22:25,120
aren't going to run the game for more

532
00:22:22,450 --> 00:22:27,640
than a couple days at a time at most but

533
00:22:25,119 --> 00:22:32,439
you know it's worth at least thinking

534
00:22:27,640 --> 00:22:40,650
about to say the least so I don't know

535
00:22:32,440 --> 00:22:49,230
that that seems to me like the most

536
00:22:40,650 --> 00:22:49,230
likely thing to work

537
00:22:52,660 --> 00:23:01,870
I don't think I don't know if I have any

538
00:22:55,089 --> 00:23:04,149
better ideas you made just because I'm

539
00:23:01,869 --> 00:23:09,069
sleepy maybe there's a better idea that

540
00:23:04,150 --> 00:23:12,009
I'm just not seeing that is there but

541
00:23:09,069 --> 00:23:15,909
that seems kind of like the most likely

542
00:23:12,009 --> 00:23:18,940
thing so the tricky part if we were to

543
00:23:15,910 --> 00:23:21,730
implement this is going to be something

544
00:23:18,940 --> 00:23:25,059
along the following lines we have render

545
00:23:21,730 --> 00:23:27,759
groups right that are completing their

546
00:23:25,059 --> 00:23:30,779
completing multi-threaded and as these

547
00:23:27,759 --> 00:23:35,410
render groups complete they obviously

548
00:23:30,779 --> 00:23:40,180
have you know their numbers in them

549
00:23:35,410 --> 00:23:42,279
right three five nine or something and

550
00:23:40,180 --> 00:23:46,120
what's gonna happen you know is nine

551
00:23:42,279 --> 00:23:50,859
might complete first right and then

552
00:23:46,119 --> 00:23:53,889
three and then five so we certainly

553
00:23:50,859 --> 00:23:56,319
can't write when a when a rotor group

554
00:23:53,890 --> 00:23:57,910
completes if we wanted to know what the

555
00:23:56,319 --> 00:23:59,919
current number was of like the

556
00:23:57,910 --> 00:24:02,860
completion status we certainly can't

557
00:23:59,920 --> 00:24:05,590
write nine you know to the like

558
00:24:02,859 --> 00:24:06,369
completed status area because three is

559
00:24:05,589 --> 00:24:08,980
still happening

560
00:24:06,369 --> 00:24:10,829
if nine completes first we can't write

561
00:24:08,980 --> 00:24:15,160
nine because we gotta wait for three

562
00:24:10,829 --> 00:24:16,990
right and so what we really need is we

563
00:24:15,160 --> 00:24:18,490
need a number that's like the last known

564
00:24:16,990 --> 00:24:20,049
thing that was completed which would be

565
00:24:18,490 --> 00:24:22,329
in this case like two or something right

566
00:24:20,049 --> 00:24:24,579
the last known thing completed would be

567
00:24:22,329 --> 00:24:27,509
like two and so if the thing that

568
00:24:24,579 --> 00:24:31,389
completes is not one after this thing

569
00:24:27,509 --> 00:24:34,329
then we don't increment the number so we

570
00:24:31,390 --> 00:24:36,009
look to see if the number is you know is

571
00:24:34,329 --> 00:24:39,429
the next number and if it is then we

572
00:24:36,009 --> 00:24:41,859
then we bump it up right so once three

573
00:24:39,430 --> 00:24:44,200
completes were good but now the problem

574
00:24:41,859 --> 00:24:45,459
is right and in fact I probably should

575
00:24:44,200 --> 00:24:48,220
have done this in a more straightforward

576
00:24:45,460 --> 00:24:49,539
way that shows it a little bit clearer

577
00:24:48,220 --> 00:24:51,880
that the other problems that we're gonna

578
00:24:49,539 --> 00:24:55,210
have so let me do that so let's say we

579
00:24:51,880 --> 00:25:00,120
have three four five right five

580
00:24:55,210 --> 00:25:04,090
completes first with em three then four

581
00:25:00,119 --> 00:25:05,619
right so we look at five you know and to

582
00:25:04,089 --> 00:25:07,389
is is the current number

583
00:25:05,619 --> 00:25:10,928
and we want this to monotonically

584
00:25:07,390 --> 00:25:12,970
increase as things complete so 5 is the

585
00:25:10,929 --> 00:25:14,200
is completed it looks at 2 it goes I'm

586
00:25:12,970 --> 00:25:16,089
not going to Inc that because it's not

587
00:25:14,200 --> 00:25:18,759
the next one it looks at 3 it is so it

588
00:25:16,089 --> 00:25:20,678
crosses it goes to 3 it looks at 4

589
00:25:18,759 --> 00:25:22,450
that's correct it goes to 4 and now it

590
00:25:20,679 --> 00:25:25,200
will stay it for forever because 5

591
00:25:22,450 --> 00:25:29,288
already completed a long time ago right

592
00:25:25,200 --> 00:25:32,590
so what we kind of need to do is we need

593
00:25:29,288 --> 00:25:34,750
to buffer these up right we need to

594
00:25:32,589 --> 00:25:40,178
store the fact that 5 completed and

595
00:25:34,750 --> 00:25:42,788
we're just waiting around you know we're

596
00:25:40,179 --> 00:25:45,460
just kind of waiting around for that to

597
00:25:42,788 --> 00:25:47,980
happen so as soon as it hits 4 it goes

598
00:25:45,460 --> 00:25:49,480
oh and also by the way I already saw 5

599
00:25:47,980 --> 00:25:53,099
being completed so let's increment this

600
00:25:49,480 --> 00:25:56,640
thing right and that's a little tricky

601
00:25:53,099 --> 00:26:02,528
normally you try to not have to do this

602
00:25:56,640 --> 00:26:10,480
right it's a little annoying but yeah

603
00:26:02,528 --> 00:26:12,269
what are you gonna do if we really want

604
00:26:10,480 --> 00:26:15,399
to have completely asynchronous stuff

605
00:26:12,269 --> 00:26:19,869
you kind of got to do it there's not a

606
00:26:15,398 --> 00:26:22,298
whole lot else that you can do so yeah

607
00:26:19,869 --> 00:26:23,528
so probably what we'd have to do is do

608
00:26:22,298 --> 00:26:25,418
some kind of buffering scheme normally

609
00:26:23,528 --> 00:26:27,909
what you do is you try to avoid this

610
00:26:25,419 --> 00:26:30,730
situation and what you try to do is have

611
00:26:27,909 --> 00:26:33,250
just countable x' so you just try to say

612
00:26:30,730 --> 00:26:35,259
like oh I three things and I need to

613
00:26:33,250 --> 00:26:36,730
know when they're all done so you have

614
00:26:35,259 --> 00:26:38,079
to have a counter and when that counter

615
00:26:36,730 --> 00:26:41,500
hits three you know that these all

616
00:26:38,079 --> 00:26:44,558
finished right that's what you typically

617
00:26:41,500 --> 00:26:48,519
want to do but in our case we actually

618
00:26:44,558 --> 00:26:49,898
want to know more granularly because we

619
00:26:48,519 --> 00:26:52,569
want to be able to start freeing assets

620
00:26:49,898 --> 00:26:54,788
so if four finishes or if three finished

621
00:26:52,569 --> 00:26:57,490
first we'd want to know that and start

622
00:26:54,788 --> 00:26:59,440
freeing those assets right so it doesn't

623
00:26:57,490 --> 00:27:02,679
you know using a countable situation

624
00:26:59,440 --> 00:27:04,509
doesn't really help us in this case so

625
00:27:02,679 --> 00:27:06,548
yeah so that's gonna be a little bit

626
00:27:04,509 --> 00:27:10,210
janky that that code is not going to be

627
00:27:06,548 --> 00:27:12,009
fabulous I'm not a fan of that but I

628
00:27:10,210 --> 00:27:14,710
can't think of anything better again off

629
00:27:12,009 --> 00:27:17,648
the top of my head so let's take a quick

630
00:27:14,710 --> 00:27:19,569
look at our current situation and see

631
00:27:17,648 --> 00:27:23,079
how likely it is for

632
00:27:19,569 --> 00:27:30,129
us too you know to be able to implement

633
00:27:23,079 --> 00:27:34,359
this alright and so pretty much get

634
00:27:30,130 --> 00:27:37,690
bitmap and get sound are what we're

635
00:27:34,359 --> 00:27:40,829
talking about here right so when we come

636
00:27:37,690 --> 00:27:43,450
in here to get bitmap or to get sound

637
00:27:40,829 --> 00:27:47,730
what we would want to do is we would

638
00:27:43,450 --> 00:27:50,289
want to do that that sort of asset lock

639
00:27:47,730 --> 00:27:52,450
right here right we want to be able to

640
00:27:50,289 --> 00:27:56,859
say now is the time to do the increment

641
00:27:52,450 --> 00:28:01,480
and off we go so I'm not sure exactly

642
00:27:56,859 --> 00:28:02,829
how you would want to do that off think

643
00:28:01,480 --> 00:28:05,559
about that because we need to make sure

644
00:28:02,829 --> 00:28:07,839
that the thing is loaded and so I'm

645
00:28:05,559 --> 00:28:19,659
wondering if we need something a little

646
00:28:07,839 --> 00:28:22,059
bit fancier there so here's what I'm

647
00:28:19,660 --> 00:28:27,820
thinking here's what I'm thinking we

648
00:28:22,059 --> 00:28:31,119
would do right so let's say we went into

649
00:28:27,819 --> 00:28:33,039
handmade asset here right and we've got

650
00:28:31,119 --> 00:28:34,149
this stuff we could get rid of locking

651
00:28:33,039 --> 00:28:37,420
because that's not going to happen

652
00:28:34,150 --> 00:28:40,150
anymore right so we have asset State

653
00:28:37,420 --> 00:28:42,730
I've got unloaded queued and loaded

654
00:28:40,150 --> 00:28:44,920
right and then we would if we didn't

655
00:28:42,730 --> 00:28:49,870
care about wrapping we would then have

656
00:28:44,920 --> 00:28:53,500
like our generation index or a

657
00:28:49,869 --> 00:28:57,879
generation zero right something like

658
00:28:53,500 --> 00:29:00,210
this so if we wanted to do that then

659
00:28:57,880 --> 00:29:06,160
what we could do is we could say alright

660
00:29:00,210 --> 00:29:08,350
get this get the thing out you know

661
00:29:06,160 --> 00:29:12,220
something like this get the state of

662
00:29:08,349 --> 00:29:16,769
this asset right and this is an asset

663
00:29:12,220 --> 00:29:20,769
state state get the state of the asset

664
00:29:16,769 --> 00:29:23,440
assuming that the asset is is greater

665
00:29:20,769 --> 00:29:25,450
than asset loaded then we're going to

666
00:29:23,440 --> 00:29:28,960
rewrite it with whatever our generation

667
00:29:25,450 --> 00:29:32,620
ID is right so it'd just be like assets

668
00:29:28,960 --> 00:29:33,350
you know generation ID we desert

669
00:29:32,619 --> 00:29:34,548
probably the

670
00:29:33,349 --> 00:29:38,000
that is always greater than equal to

671
00:29:34,548 --> 00:29:40,900
assets Tate loaded and we'd say okay you

672
00:29:38,000 --> 00:29:43,640
know this would be a compare exchange

673
00:29:40,900 --> 00:29:45,980
right I wish I forget what we ended up

674
00:29:43,640 --> 00:29:47,870
calling bull go look it up this would be

675
00:29:45,980 --> 00:29:51,230
a compare exchange and what we do is

676
00:29:47,869 --> 00:29:53,989
we'd say we want to see whatever this

677
00:29:51,230 --> 00:29:57,950
Steve was assuming we do we want to

678
00:29:53,990 --> 00:30:00,829
replace it with this right that's what

679
00:29:57,950 --> 00:30:03,340
we would want to do and so then we would

680
00:30:00,829 --> 00:30:05,960
do you know we'd make an assumption here

681
00:30:03,339 --> 00:30:09,319
we'd probably do something like this

682
00:30:05,960 --> 00:30:11,450
while that state is it's correct in fact

683
00:30:09,319 --> 00:30:15,500
I guess we would maybe do it possibly

684
00:30:11,450 --> 00:30:18,259
even just like this okay I'm inside sort

685
00:30:15,500 --> 00:30:19,220
of the standard multi-threading pattern

686
00:30:18,259 --> 00:30:22,099
where you just kind of have to try

687
00:30:19,220 --> 00:30:24,529
things right we get the state assuming

688
00:30:22,099 --> 00:30:27,500
that it's it's possible we try to do the

689
00:30:24,529 --> 00:30:29,298
compare exchange otherwise we break out

690
00:30:27,500 --> 00:30:31,880
of the loop and it's done like we didn't

691
00:30:29,298 --> 00:30:35,058
find anything right we do the compare

692
00:30:31,880 --> 00:30:37,820
exchange and assuming that we are able

693
00:30:35,058 --> 00:30:41,029
to do that generation ID swap then we go

694
00:30:37,819 --> 00:30:44,259
ahead and move the header to the front

695
00:30:41,029 --> 00:30:44,259
right now

696
00:30:44,538 --> 00:30:49,519
part of the problem with that again is

697
00:30:46,730 --> 00:30:52,460
this move header to front what would be

698
00:30:49,519 --> 00:31:00,048
nice about this too is if we could sort

699
00:30:52,460 --> 00:31:01,279
of get some notion because now you know

700
00:31:00,048 --> 00:31:03,619
the other thing about this is that

701
00:31:01,279 --> 00:31:09,259
generation ID also tells us how recently

702
00:31:03,619 --> 00:31:14,000
used the asset was right so it's like

703
00:31:09,259 --> 00:31:16,849
the move header to front thing doesn't

704
00:31:14,000 --> 00:31:18,980
super need to happen right it just

705
00:31:16,849 --> 00:31:22,759
doesn't it's not something that really

706
00:31:18,980 --> 00:31:24,529
needs to happen so I don't know and

707
00:31:22,759 --> 00:31:26,150
furthermore multi-threaded wise we don't

708
00:31:24,529 --> 00:31:33,908
really want multiple people hitting this

709
00:31:26,150 --> 00:31:33,909
move header to the front so yeah

710
00:31:37,440 --> 00:31:43,600
it's a bit tricky it's a bit tricky but

711
00:31:41,950 --> 00:31:44,890
anyway we would do this compare exchange

712
00:31:43,599 --> 00:31:46,599
and then assuming that we were able to

713
00:31:44,890 --> 00:31:48,670
do the comparison

714
00:31:46,599 --> 00:31:52,209
we would then do the sort of asset

715
00:31:48,670 --> 00:32:02,019
header bitmap thing and and off we would

716
00:31:52,210 --> 00:32:05,769
go so I guess I guess that would

717
00:32:02,019 --> 00:32:09,430
basically be it except for the problem

718
00:32:05,769 --> 00:32:12,210
of now how do we keep our assets sort of

719
00:32:09,430 --> 00:32:16,390
you know sifted in a way sorted in a way

720
00:32:12,210 --> 00:32:19,930
that's actually useful to us because you

721
00:32:16,390 --> 00:32:23,290
know when we do that sort of compare

722
00:32:19,930 --> 00:32:25,029
exchange that's that change it's kind of

723
00:32:23,289 --> 00:32:27,210
a little bit annoying like what would we

724
00:32:25,029 --> 00:32:30,480
act you know we want to be able to do

725
00:32:27,210 --> 00:32:32,710
something like one of those asset

726
00:32:30,480 --> 00:32:34,569
reorganizations but that's pretty hard

727
00:32:32,710 --> 00:32:35,829
to do multi-threaded because if you do

728
00:32:34,569 --> 00:32:38,079
it multi-threaded you're gonna have to

729
00:32:35,829 --> 00:32:39,699
take some kind of a lock doubly linked

730
00:32:38,079 --> 00:32:40,990
lists are like kind of annoying I mean

731
00:32:39,700 --> 00:32:42,759
you don't have take a lock per se but

732
00:32:40,990 --> 00:32:45,670
you know if you did it lock freed it's

733
00:32:42,759 --> 00:32:47,920
it's a huge nightmare it's not a good W

734
00:32:45,670 --> 00:32:50,740
linked lists are not fantastic in terms

735
00:32:47,920 --> 00:32:53,430
of lock free sorts of stuff that's

736
00:32:50,740 --> 00:32:53,430
that's not fun

737
00:33:07,299 --> 00:33:14,779
and I say but that's basically what I

738
00:33:11,869 --> 00:33:16,189
would want to do right and it seems like

739
00:33:14,779 --> 00:33:17,930
there should be something fairly clever

740
00:33:16,190 --> 00:33:20,420
that we could do here because once we

741
00:33:17,930 --> 00:33:23,029
have that generation ID like IRA saying

742
00:33:20,420 --> 00:33:26,450
that generation ID actually also tells

743
00:33:23,029 --> 00:33:28,609
us how old this particular asset is so

744
00:33:26,450 --> 00:33:30,680
it would let us know which ones we

745
00:33:28,609 --> 00:33:32,599
should free in addition to that it's

746
00:33:30,680 --> 00:33:38,740
just we would need some way of more

747
00:33:32,599 --> 00:33:41,659
quickly accessing you know one of them

748
00:33:38,740 --> 00:33:42,890
and in order to quickly access them

749
00:33:41,660 --> 00:33:44,750
we're going to need to keep them sorted

750
00:33:42,890 --> 00:33:47,030
in some way like with the heap or

751
00:33:44,750 --> 00:33:48,740
something and in order to do that we'd

752
00:33:47,029 --> 00:33:51,230
have the problem again of the

753
00:33:48,740 --> 00:33:53,599
multi-threaded heap you know is that's

754
00:33:51,230 --> 00:33:56,120
just kind of ugly and you could take a

755
00:33:53,599 --> 00:33:57,529
lock but then it's like okay you know if

756
00:33:56,119 --> 00:33:59,509
I take a lock then everybody who's

757
00:33:57,529 --> 00:34:02,089
trying to do rendering stalls up on get

758
00:33:59,509 --> 00:34:04,789
bitmap so it would it'd be kind of nice

759
00:34:02,089 --> 00:34:08,650
if we could figure out a way to not have

760
00:34:04,789 --> 00:34:08,650
to do that right

761
00:34:21,579 --> 00:34:30,340
but I'm not thinking of it I am not at

762
00:34:25,420 --> 00:34:32,170
the moment thinking of that and so you

763
00:34:30,340 --> 00:34:34,000
know there's things we could do right we

764
00:34:32,170 --> 00:34:36,400
could have it so that only the main

765
00:34:34,000 --> 00:34:39,730
thread actually does the move to front

766
00:34:36,400 --> 00:34:43,660
and that would solve that problem the

767
00:34:39,730 --> 00:34:46,719
problem is that then means that you know

768
00:34:43,659 --> 00:34:49,029
assets might get shoved to the back that

769
00:34:46,719 --> 00:34:51,879
we're just being used that they are

770
00:34:49,030 --> 00:34:53,500
actually frequently being used but just

771
00:34:51,880 --> 00:34:57,970
for ground chunks and never for anything

772
00:34:53,500 --> 00:35:00,900
else which is highly likely right hmm so

773
00:34:57,969 --> 00:35:11,679
this is a puzzler this is a nasty one

774
00:35:00,900 --> 00:35:12,820
this is a nasty one I'm not sure I'm not

775
00:35:11,679 --> 00:35:17,139
sure what to do about it

776
00:35:12,820 --> 00:35:21,360
I would like something cleverer here

777
00:35:17,139 --> 00:35:21,359
than anything that I'm thinking of

778
00:35:41,690 --> 00:35:46,920
this is where it would be helpful to

779
00:35:43,650 --> 00:35:52,170
have another programmer I would like to

780
00:35:46,920 --> 00:35:54,030
chat about this but you don't always

781
00:35:52,170 --> 00:35:57,000
have another programmer it's a bummer

782
00:35:54,030 --> 00:36:00,690
it's true but you can see what the

783
00:35:57,000 --> 00:36:02,099
problem is right so what I've got what

784
00:36:00,690 --> 00:36:04,108
we sort of we're saying is that okay

785
00:36:02,099 --> 00:36:06,088
we've got you know some thing in this

786
00:36:04,108 --> 00:36:09,299
case it happens to be a doubly linked

787
00:36:06,088 --> 00:36:12,059
list but we've got a doubly linked list

788
00:36:09,300 --> 00:36:17,789
of assets so here's acid a here's a set

789
00:36:12,059 --> 00:36:19,199
B here's asset C right and we're gonna

790
00:36:17,789 --> 00:36:22,529
come we're parachuting in here we're

791
00:36:19,199 --> 00:36:24,358
gonna like use this asset and what we

792
00:36:22,530 --> 00:36:26,730
were saying is well this thing is kept

793
00:36:24,358 --> 00:36:29,000
in sorted order right now so that the

794
00:36:26,730 --> 00:36:32,190
thing that was used the most recently

795
00:36:29,000 --> 00:36:36,510
gets moved to the front right so that we

796
00:36:32,190 --> 00:36:41,400
always know how to find the who most

797
00:36:36,510 --> 00:36:43,290
recently used elements but if there's

798
00:36:41,400 --> 00:36:45,838
two threads that could be coming in here

799
00:36:43,289 --> 00:36:47,909
and visiting this guy you really don't

800
00:36:45,838 --> 00:36:49,889
want this thread to be in the middle of

801
00:36:47,909 --> 00:36:51,299
updating these pointers when this thread

802
00:36:49,889 --> 00:36:52,440
then goes and tries to update them as

803
00:36:51,300 --> 00:36:55,099
well because they'll just end up with

804
00:36:52,440 --> 00:37:00,599
garbage and it could be really bad right

805
00:36:55,099 --> 00:37:03,180
so this is a frowny-face right and what

806
00:37:00,599 --> 00:37:04,950
we need is some way of figuring out you

807
00:37:03,179 --> 00:37:08,219
know how to get the frowny face out of

808
00:37:04,949 --> 00:37:12,469
there we need a way of reliably keeping

809
00:37:08,219 --> 00:37:15,000
our usage thing set up sorted without

810
00:37:12,469 --> 00:37:17,039
work you know the restriction that only

811
00:37:15,000 --> 00:37:19,710
one thread at a time could could access

812
00:37:17,039 --> 00:37:23,179
it right we'd like as many threads as we

813
00:37:19,710 --> 00:37:23,179
want to be able to access it right

814
00:37:28,320 --> 00:37:34,570
so I guess one thing we could do is just

815
00:37:31,090 --> 00:37:38,170
queue those right which is kind of

816
00:37:34,570 --> 00:37:40,180
absurd but we could do that right we

817
00:37:38,170 --> 00:37:43,389
could just introduce some scratch face

818
00:37:40,179 --> 00:37:46,210
and every time we touch an asset we

819
00:37:43,389 --> 00:37:49,629
write it into a queue right just into a

820
00:37:46,210 --> 00:37:50,920
nutty McCue like a stack right well it

821
00:37:49,630 --> 00:37:53,349
probably would be it would probably

822
00:37:50,920 --> 00:37:54,820
actually would be a FIFO right so we

823
00:37:53,349 --> 00:37:56,920
just write in there and we just write in

824
00:37:54,820 --> 00:37:59,289
every time we use something right you'd

825
00:37:56,920 --> 00:38:01,840
write it in there and then what you do

826
00:37:59,289 --> 00:38:04,360
is you'd have just one thread come

827
00:38:01,840 --> 00:38:05,620
through and do these things in order so

828
00:38:04,360 --> 00:38:08,200
that you know that it would do all the

829
00:38:05,619 --> 00:38:18,279
moves two fronts in particular order

830
00:38:08,199 --> 00:38:22,239
right I don't love it do I have a better

831
00:38:18,280 --> 00:38:23,440
suggestion yet no but you know that's

832
00:38:22,239 --> 00:38:26,169
one thing you can do right because it's

833
00:38:23,440 --> 00:38:28,409
easy to do to turn that into into such a

834
00:38:26,170 --> 00:38:28,409
thing

835
00:38:46,079 --> 00:38:52,119
what am I not thinking of what else

836
00:38:48,639 --> 00:38:54,789
could I try I guess they're so of the

837
00:38:52,119 --> 00:38:58,150
ways that we're looking through the

838
00:38:54,789 --> 00:38:59,889
assets themselves I feel like there's

839
00:38:58,150 --> 00:39:04,780
nothing particularly smart to be done

840
00:38:59,889 --> 00:39:09,879
there I guess we could try to see if a

841
00:39:04,780 --> 00:39:13,750
lock free heap was too difficult to do

842
00:39:09,880 --> 00:39:15,340
right like how much complexity and how

843
00:39:13,750 --> 00:39:18,099
difficult do we think it would be to do

844
00:39:15,340 --> 00:39:20,440
a lock free heap if the answer is not

845
00:39:18,099 --> 00:39:22,989
too bad then we could turn this into a

846
00:39:20,440 --> 00:39:24,550
heap sort of a structure in which case

847
00:39:22,989 --> 00:39:26,349
we could then update it from multiple

848
00:39:24,550 --> 00:39:34,180
threads without having to worry too much

849
00:39:26,349 --> 00:39:35,860
about it right and you know I mean it's

850
00:39:34,179 --> 00:39:41,049
not out of the question that that could

851
00:39:35,860 --> 00:39:49,809
happen it's not entirely implausible

852
00:39:41,050 --> 00:39:53,370
I guess there's one more thing that'd be

853
00:39:49,809 --> 00:39:53,369
kind of oh wait

854
00:39:58,610 --> 00:40:05,059
well I did just have an odd idea so

855
00:40:01,610 --> 00:40:07,630
humor me for a second and let's think

856
00:40:05,059 --> 00:40:07,630
about this

857
00:40:14,309 --> 00:40:17,759
well no you know that's gonna be the

858
00:40:16,079 --> 00:40:19,799
same problem I'll talk it through still

859
00:40:17,760 --> 00:40:20,970
just so that I say what I was thinking

860
00:40:19,800 --> 00:40:22,170
but then I realized the problem is I

861
00:40:20,969 --> 00:40:24,929
won't be able to figure out how to

862
00:40:22,170 --> 00:40:29,519
remove the links so doesn't actually

863
00:40:24,929 --> 00:40:36,179
help I don't think but anyway so you

864
00:40:29,519 --> 00:40:39,119
could imagine you could imagine if I

865
00:40:36,179 --> 00:40:42,349
were to take the render groups

866
00:40:39,119 --> 00:40:46,109
themselves right so like enter groups

867
00:40:42,349 --> 00:40:48,989
BCD right these sort of things if I were

868
00:40:46,110 --> 00:40:51,450
to have each render group and in those

869
00:40:48,989 --> 00:40:57,109
render groups I was to actually just

870
00:40:51,449 --> 00:40:57,109
link off the assets that were used right

871
00:40:57,800 --> 00:41:01,670
in those render groups

872
00:41:06,380 --> 00:41:12,470
then that would effectively give me my

873
00:41:09,230 --> 00:41:13,849
generation index thing right so you know

874
00:41:12,469 --> 00:41:15,500
each one of these guys would have a

875
00:41:13,849 --> 00:41:19,179
generation index in them when you go to

876
00:41:15,500 --> 00:41:21,980
use an asset if the asset has a lower

877
00:41:19,179 --> 00:41:24,679
generation index currently than the one

878
00:41:21,980 --> 00:41:27,980
that you that you are you move him into

879
00:41:24,679 --> 00:41:29,480
your list right and then you tag him

880
00:41:27,980 --> 00:41:32,179
with the new asset index and that way

881
00:41:29,480 --> 00:41:35,150
you know that he's always in the linked

882
00:41:32,179 --> 00:41:36,169
list of you know the the red roofs of

883
00:41:35,150 --> 00:41:41,900
the go and then when red roofs get

884
00:41:36,170 --> 00:41:45,559
retired you basically take whatever is

885
00:41:41,900 --> 00:41:48,380
in their list and move it to whatever

886
00:41:45,559 --> 00:41:51,110
the next render group in the sequence is

887
00:41:48,380 --> 00:41:52,910
you you give the list to them and then

888
00:41:51,110 --> 00:41:54,349
you know whenever you want to free

889
00:41:52,909 --> 00:41:56,420
something you just use whatever's on the

890
00:41:54,349 --> 00:41:57,710
front of that list what I realized is as

891
00:41:56,420 --> 00:42:00,880
I was saying that it doesn't actually

892
00:41:57,710 --> 00:42:03,470
help at all because in order to remove a

893
00:42:00,880 --> 00:42:04,910
an asset from one of these things I was

894
00:42:03,469 --> 00:42:06,559
thinking just in terms of adding and a

895
00:42:04,909 --> 00:42:08,509
singly linked list is trivial to do

896
00:42:06,559 --> 00:42:11,329
addition to a singly linked list is

897
00:42:08,510 --> 00:42:15,410
trivial to do lock-free it's just the

898
00:42:11,329 --> 00:42:18,079
exchange just a pointer exchange but

899
00:42:15,409 --> 00:42:21,199
that doesn't actually help because in

900
00:42:18,079 --> 00:42:24,079
order to get one of these moved to move

901
00:42:21,199 --> 00:42:26,750
it you would need it to be doubly linked

902
00:42:24,079 --> 00:42:28,239
again right and once we're back to W

903
00:42:26,750 --> 00:42:30,320
length then forget it

904
00:42:28,239 --> 00:42:31,789
it's the same as what we've got now

905
00:42:30,320 --> 00:42:33,950
right

906
00:42:31,789 --> 00:42:39,159
so the minimum thing is still too much

907
00:42:33,949 --> 00:42:39,159
it's still it's still too much of a deal

908
00:42:47,670 --> 00:42:52,920
so I guess another thing we could do is

909
00:42:50,619 --> 00:42:56,949
we could just sort all of these guys

910
00:42:52,920 --> 00:42:57,730
separately because I guess now that I

911
00:42:56,949 --> 00:43:01,179
think about it

912
00:42:57,730 --> 00:43:03,460
sorting is not really doesn't really

913
00:43:01,179 --> 00:43:15,609
have to be done in a multi-threaded

914
00:43:03,460 --> 00:43:22,119
sense right like even if the sort went

915
00:43:15,610 --> 00:43:24,340
wrong that's probably okay maybe it's

916
00:43:22,119 --> 00:43:26,500
not okay so what I'm thinking is let's

917
00:43:24,340 --> 00:43:30,010
say we've got all our assets in a table

918
00:43:26,500 --> 00:43:32,679
right and we've got their numbers right

919
00:43:30,010 --> 00:43:35,100
here's their generation index indices

920
00:43:32,679 --> 00:43:38,859
and we want to just sort these guys

921
00:43:35,099 --> 00:43:40,869
right so like here's the generation

922
00:43:38,860 --> 00:43:43,450
index here's the number and I wanted to

923
00:43:40,869 --> 00:43:46,539
sort these guys if these numbers are

924
00:43:43,449 --> 00:43:48,309
changing during the sort then the worst

925
00:43:46,539 --> 00:43:50,980
thing that would happen I was thinking

926
00:43:48,309 --> 00:43:54,190
was that the sort just doesn't quite

927
00:43:50,980 --> 00:43:55,690
sort quite right right I mean that's

928
00:43:54,190 --> 00:43:56,980
that's all that happens it's not really

929
00:43:55,690 --> 00:43:58,210
the end of the world because we're just

930
00:43:56,980 --> 00:44:01,179
using it to figure out what asked that

931
00:43:58,210 --> 00:44:03,280
we probably should get rid of but the

932
00:44:01,179 --> 00:44:07,029
problem is thinking is it might mean

933
00:44:03,280 --> 00:44:11,370
that the sort wouldn't terminate I think

934
00:44:07,030 --> 00:44:11,370
and that would be significantly worse

935
00:44:14,679 --> 00:44:20,409
whoo I'm so tired I tell you this is not

936
00:44:19,030 --> 00:44:22,840
the kind of problem that you want to

937
00:44:20,409 --> 00:44:25,259
tackle when you're tired but I got 12

938
00:44:22,840 --> 00:44:29,160
minutes left to the end of the stream so

939
00:44:25,260 --> 00:44:31,090
even though my brain is completely shot

940
00:44:29,159 --> 00:44:32,949
might as well look at it for 12 more

941
00:44:31,090 --> 00:44:36,280
minutes we're sick in a pizzazz you

942
00:44:32,949 --> 00:44:37,750
don't think of anything so yeah so I

943
00:44:36,280 --> 00:44:42,130
guess what I'm thinking of here is like

944
00:44:37,750 --> 00:44:45,190
right if we were to do a sort then could

945
00:44:42,130 --> 00:44:46,570
we do a sort where we knew that we would

946
00:44:45,190 --> 00:44:48,010
never get into a condition where the

947
00:44:46,570 --> 00:44:49,750
sort would never terminate like where

948
00:44:48,010 --> 00:44:51,160
people kept changing these values on

949
00:44:49,750 --> 00:44:54,099
other threads while the sort was

950
00:44:51,159 --> 00:44:57,099
happening is there a way we could

951
00:44:54,099 --> 00:44:59,019
guarantee that wouldn't be a problem and

952
00:44:57,099 --> 00:45:01,449
it feels to me like the answer is yes

953
00:44:59,019 --> 00:45:04,449
because if we pick something like a

954
00:45:01,449 --> 00:45:07,389
merge sort or something like that which

955
00:45:04,449 --> 00:45:09,579
doesn't loop per se it more just like

956
00:45:07,389 --> 00:45:11,799
divides and conquers then if one of

957
00:45:09,579 --> 00:45:13,659
those divide and conquer' steps is wrong

958
00:45:11,800 --> 00:45:15,460
because the generation index that gets

959
00:45:13,659 --> 00:45:16,079
used is the old one instead of the new

960
00:45:15,460 --> 00:45:18,789
one

961
00:45:16,079 --> 00:45:20,500
presumably that's okay it just means

962
00:45:18,789 --> 00:45:23,230
that your sort ends up being wrong at

963
00:45:20,500 --> 00:45:25,360
the end and maybe we don't care if the

964
00:45:23,230 --> 00:45:27,610
sort is wrong at the end furthermore it

965
00:45:25,360 --> 00:45:29,680
seems like we could make it we might be

966
00:45:27,610 --> 00:45:32,079
able to sort of design the sort a little

967
00:45:29,679 --> 00:45:33,669
bit around that notion and make it so

968
00:45:32,079 --> 00:45:36,099
that just because the sword is wrong it

969
00:45:33,670 --> 00:45:37,780
doesn't actually matter too much like

970
00:45:36,099 --> 00:45:41,099
that we still get a relatively correct

971
00:45:37,780 --> 00:45:41,100
result right

972
00:45:46,500 --> 00:45:52,420
and I suppose yet another thing we could

973
00:45:49,000 --> 00:45:56,679
do is we could just build this sort out

974
00:45:52,420 --> 00:45:58,450
of band man that seems like it's too

975
00:45:56,679 --> 00:45:59,919
expensive I mean you got to figure you

976
00:45:58,449 --> 00:46:02,139
know we may have like five thousand

977
00:45:59,920 --> 00:46:04,180
assets or something and so we would like

978
00:46:02,139 --> 00:46:06,509
to do is we would like to sort these

979
00:46:04,179 --> 00:46:11,349
guys we'd like to keep these guys sorted

980
00:46:06,510 --> 00:46:15,160
if we could because that number is gonna

981
00:46:11,349 --> 00:46:19,179
be real big so we really want this to be

982
00:46:15,159 --> 00:46:24,039
like a heap I don't know man

983
00:46:19,179 --> 00:46:25,869
I don't know all the top of my head I

984
00:46:24,039 --> 00:46:30,039
don't know how bad a multi-threaded heap

985
00:46:25,869 --> 00:46:36,279
is I don't know I don't know how nasty

986
00:46:30,039 --> 00:46:37,960
that is let's see let's see how bad it

987
00:46:36,280 --> 00:46:39,760
looks just you know just get that do

988
00:46:37,960 --> 00:46:41,349
that little spot check I like look at

989
00:46:39,760 --> 00:46:49,090
the paper and go should I be terrified

990
00:46:41,349 --> 00:46:54,069
or shouldn't I be right let's see let's

991
00:46:49,090 --> 00:46:57,100
see the logarithm is based on the

992
00:46:54,070 --> 00:46:59,650
sequential skip let's data structure we

993
00:46:57,099 --> 00:47:00,909
randomized and has a problem realization

994
00:46:59,650 --> 00:47:03,700
has promised with technical ecstasy of O

995
00:47:00,909 --> 00:47:05,469
log n randomized is not something I

996
00:47:03,699 --> 00:47:11,049
typically like to hear all that much but

997
00:47:05,469 --> 00:47:15,219
you know what are you gonna do so that's

998
00:47:11,050 --> 00:47:16,600
not too bad right I mean I have not I'm

999
00:47:15,219 --> 00:47:18,819
not reading this paper because it's not

1000
00:47:16,599 --> 00:47:22,299
really something you can do on stream

1001
00:47:18,820 --> 00:47:28,180
but you know that's not that's not awful

1002
00:47:22,300 --> 00:47:33,010
right that's not too bad and you know

1003
00:47:28,179 --> 00:47:35,289
it's got delete right it's got insert mm

1004
00:47:33,010 --> 00:47:36,790
you know does that look great no you

1005
00:47:35,289 --> 00:47:38,739
know there's a lot of complexity in

1006
00:47:36,789 --> 00:47:41,800
there right a lot of things that could

1007
00:47:38,739 --> 00:47:45,399
go wrong but if it was the only thing

1008
00:47:41,800 --> 00:47:48,010
that wouldn't you know wouldn't kill me

1009
00:47:45,400 --> 00:47:49,539
I wouldn't be like oh my god no maybe

1010
00:47:48,010 --> 00:47:52,410
we'd read a little bit test code for it

1011
00:47:49,539 --> 00:47:52,409
right

1012
00:47:53,530 --> 00:47:59,119
so yeah we could do that but the other

1013
00:47:57,079 --> 00:48:00,920
question then is like well you know also

1014
00:47:59,119 --> 00:48:02,960
we don't really know very much about how

1015
00:48:00,920 --> 00:48:04,930
that thing behaved so would it actually

1016
00:48:02,960 --> 00:48:07,280
just be better to just take a lock

1017
00:48:04,929 --> 00:48:11,118
quickly do the move and then release the

1018
00:48:07,280 --> 00:48:14,900
lock because you know uncontained in

1019
00:48:11,119 --> 00:48:16,250
locks are mostly free and so it's not

1020
00:48:14,900 --> 00:48:18,260
like we would pay very much most of the

1021
00:48:16,250 --> 00:48:20,420
time because most the time both

1022
00:48:18,260 --> 00:48:22,579
processors would certainly not be taking

1023
00:48:20,420 --> 00:48:24,710
the lock at the same time so it starts

1024
00:48:22,579 --> 00:48:29,030
to kind of seem like you know if you

1025
00:48:24,710 --> 00:48:31,789
looked at something like that that maybe

1026
00:48:29,030 --> 00:48:34,400
you do just want to take that lock you

1027
00:48:31,789 --> 00:48:39,730
want to like do the lock do the

1028
00:48:34,400 --> 00:48:43,608
operation and come back I don't know I

1029
00:48:39,730 --> 00:48:44,329
really don't but you know what would

1030
00:48:43,608 --> 00:48:48,139
that look like

1031
00:48:44,329 --> 00:48:51,650
if we were gonna do that probably

1032
00:48:48,139 --> 00:48:55,420
something like this right we'd say okay

1033
00:48:51,650 --> 00:48:57,889
there's like you know asset state

1034
00:48:55,420 --> 00:48:59,720
operating or something like this and

1035
00:48:57,889 --> 00:49:01,608
what we would do here is we'd say okay

1036
00:48:59,719 --> 00:49:04,129
we're gonna do we're gonna do a compare

1037
00:49:01,608 --> 00:49:07,969
exchange assuming the compare exchange

1038
00:49:04,130 --> 00:49:15,099
exceeds we do our operation and then we

1039
00:49:07,969 --> 00:49:17,899
write we write in just I guess we want

1040
00:49:15,099 --> 00:49:19,548
rights forfeiture rights we do our

1041
00:49:17,900 --> 00:49:22,940
little operation and then we would write

1042
00:49:19,548 --> 00:49:25,519
out the state - to be something else

1043
00:49:22,940 --> 00:49:27,950
so our asset state would would turn into

1044
00:49:25,519 --> 00:49:30,739
something else our asset state would

1045
00:49:27,949 --> 00:49:33,289
become whatever our generation index is

1046
00:49:30,739 --> 00:49:35,629
right so we do some kind of compare

1047
00:49:33,289 --> 00:49:38,659
exchange where we compare exchange in

1048
00:49:35,630 --> 00:49:47,059
some value that was like the operating

1049
00:49:38,659 --> 00:49:52,549
value right yeah

1050
00:49:47,059 --> 00:49:53,900
fact we might even do that well yeah I

1051
00:49:52,550 --> 00:49:55,670
don't know exactly what we would do

1052
00:49:53,900 --> 00:50:11,300
we'll think about that in a second

1053
00:49:55,670 --> 00:50:13,789
probably and this is really hard to say

1054
00:50:11,300 --> 00:50:16,610
but yeah what we would do here is we go

1055
00:50:13,789 --> 00:50:17,750
all right we need to operate on this and

1056
00:50:16,610 --> 00:50:18,980
we want to be the only person who's

1057
00:50:17,750 --> 00:50:20,539
operating on it right so we're already

1058
00:50:18,980 --> 00:50:22,429
in a loop because we know that we're

1059
00:50:20,539 --> 00:50:24,829
basically going to always do our

1060
00:50:22,429 --> 00:50:26,899
operation there's no way we won't do our

1061
00:50:24,829 --> 00:50:28,730
operation we just have to wait to make

1062
00:50:26,900 --> 00:50:29,780
sure that no other threads are in here

1063
00:50:28,730 --> 00:50:32,119
so it's basically just air traffic

1064
00:50:29,780 --> 00:50:35,269
control right so we need to do our

1065
00:50:32,119 --> 00:50:41,000
compare exchange here's our exchange

1066
00:50:35,269 --> 00:50:44,179
right here we go there we go atomic

1067
00:50:41,000 --> 00:50:46,940
compare exchange you in 32 we need to

1068
00:50:44,179 --> 00:50:50,809
take our asset state and we actually

1069
00:50:46,940 --> 00:50:53,210
need to modify it right we need to

1070
00:50:50,809 --> 00:50:54,769
modify it by passing in whatever we want

1071
00:50:53,210 --> 00:50:59,360
it to be which would be the new

1072
00:50:54,769 --> 00:51:01,789
generation ID for the you know for I

1073
00:50:59,360 --> 00:51:03,680
guess we probably actually want to pass

1074
00:51:01,789 --> 00:51:05,809
that in here at probably not quite that

1075
00:51:03,679 --> 00:51:07,039
right so it's some it's something that

1076
00:51:05,809 --> 00:51:08,840
we're actually going to be tracking now

1077
00:51:07,039 --> 00:51:12,380
we're the render group has to give

1078
00:51:08,840 --> 00:51:13,610
notice essentially as to what it's going

1079
00:51:12,380 --> 00:51:15,140
to actually do here so this would be a

1080
00:51:13,610 --> 00:51:17,210
value that would probably get put in

1081
00:51:15,139 --> 00:51:18,769
here we did the italic variance change

1082
00:51:17,210 --> 00:51:21,440
we'd say we want to set it to our

1083
00:51:18,769 --> 00:51:24,710
generation ID and what we expected it to

1084
00:51:21,440 --> 00:51:27,289
be I'm sorry that's not true yet we want

1085
00:51:24,710 --> 00:51:29,360
to set it to that operating value

1086
00:51:27,289 --> 00:51:33,009
basically that runway clearing value

1087
00:51:29,360 --> 00:51:39,140
right and what we expect it to be is

1088
00:51:33,010 --> 00:51:41,480
whatever it was before right and so in

1089
00:51:39,139 --> 00:51:44,239
order for us to even attempt this we

1090
00:51:41,480 --> 00:51:46,449
want to make sure that state is is

1091
00:51:44,239 --> 00:51:52,129
greater than equal to asset loaded and

1092
00:51:46,449 --> 00:51:56,769
state is I guess in here right if state

1093
00:51:52,130 --> 00:51:56,769
is not equal to asset state operating

1094
00:51:58,030 --> 00:52:05,840
then we do it right and what that means

1095
00:52:02,719 --> 00:52:07,250
to is we'd really wouldn't have to worry

1096
00:52:05,840 --> 00:52:09,200
about sort of the thing I was saying

1097
00:52:07,250 --> 00:52:11,659
where we just all do it in one step if

1098
00:52:09,199 --> 00:52:12,889
we were going to take a lock of that

1099
00:52:11,659 --> 00:52:13,759
nature you wouldn't have to do this

1100
00:52:12,889 --> 00:52:16,519
anymore

1101
00:52:13,760 --> 00:52:19,610
inside the asset you would just probably

1102
00:52:16,519 --> 00:52:22,070
have the generation ID right or you

1103
00:52:19,610 --> 00:52:24,079
could also do it inside the header gear

1104
00:52:22,070 --> 00:52:24,769
right in fact that's the better place to

1105
00:52:24,079 --> 00:52:26,750
put it

1106
00:52:24,769 --> 00:52:33,699
for certain because then you're not

1107
00:52:26,750 --> 00:52:33,699
using space in the asset right so yeah

1108
00:52:33,789 --> 00:52:38,809
so in this case and you know what really

1109
00:52:37,130 --> 00:52:41,480
this asset state thing probably could

1110
00:52:38,809 --> 00:52:43,009
could be fussed with a little bit

1111
00:52:41,480 --> 00:52:44,750
because we also have the fact that now

1112
00:52:43,010 --> 00:52:46,760
we point to a memory header if that

1113
00:52:44,750 --> 00:52:49,519
memory header is zero we know you are

1114
00:52:46,760 --> 00:52:50,840
unloaded so we probably could actually

1115
00:52:49,519 --> 00:52:53,139
streamline this a little bit in fact

1116
00:52:50,840 --> 00:52:59,480
I'll put a little to do here to do Kacie

1117
00:52:53,139 --> 00:53:07,909
streamline this by using header pointer

1118
00:52:59,480 --> 00:53:09,740
as an indicator of unloaded status but

1119
00:53:07,909 --> 00:53:12,079
yes so assuming that we were going to do

1120
00:53:09,739 --> 00:53:14,899
that we would do that atomic compare

1121
00:53:12,079 --> 00:53:16,730
exchange to make sure that we you know

1122
00:53:14,900 --> 00:53:21,380
could move it to an operating State and

1123
00:53:16,730 --> 00:53:23,300
then assume that we could again now what

1124
00:53:21,380 --> 00:53:26,800
we could do here is just say we assume

1125
00:53:23,300 --> 00:53:29,420
that it has to be equal to loading right

1126
00:53:26,800 --> 00:53:30,590
loaded is the only time that you get to

1127
00:53:29,420 --> 00:53:32,269
use this thing

1128
00:53:30,590 --> 00:53:34,670
because if it's not loaded you know

1129
00:53:32,269 --> 00:53:38,409
obviously you can't use it and so then

1130
00:53:34,670 --> 00:53:41,659
what we would do here is say oh okay if

1131
00:53:38,409 --> 00:53:43,429
state is not equal to acid op so that's

1132
00:53:41,659 --> 00:53:46,489
that state operating then you break so

1133
00:53:43,429 --> 00:53:48,829
in other words if it's loaded we will

1134
00:53:46,489 --> 00:53:50,689
try to do our work on it if it's not

1135
00:53:48,829 --> 00:53:52,250
loaded then just double check to make

1136
00:53:50,690 --> 00:53:54,230
sure that it's not just momentarily

1137
00:53:52,250 --> 00:53:56,570
blocked by somebody else who's trying to

1138
00:53:54,230 --> 00:53:59,659
stuff with it if it is then just go

1139
00:53:56,570 --> 00:54:01,910
ahead and loop again and try again if it

1140
00:53:59,659 --> 00:54:03,829
but on the you know on the chant on the

1141
00:54:01,909 --> 00:54:06,289
off chance that that is the case loop

1142
00:54:03,829 --> 00:54:07,909
again otherwise it's like either

1143
00:54:06,289 --> 00:54:10,009
unloaded or queued which means we can't

1144
00:54:07,909 --> 00:54:10,609
use it right now so just just flub it

1145
00:54:10,010 --> 00:54:14,030
forget it

1146
00:54:10,610 --> 00:54:15,860
it's not gonna happen right so we go

1147
00:54:14,030 --> 00:54:19,580
ahead and say assets they loaded that we

1148
00:54:15,860 --> 00:54:21,410
do generation ID we don't need to check

1149
00:54:19,579 --> 00:54:24,049
that anymore so then we come in here we

1150
00:54:21,409 --> 00:54:26,750
set it to operating ourselves and we

1151
00:54:24,050 --> 00:54:28,400
want to make sure that it actually does

1152
00:54:26,750 --> 00:54:30,230
what we think it does which is that it's

1153
00:54:28,400 --> 00:54:33,559
you know again during to kind of be that

1154
00:54:30,230 --> 00:54:35,240
sort of thing right in fact in fact we

1155
00:54:33,559 --> 00:54:37,789
know that it's or always asset state

1156
00:54:35,239 --> 00:54:39,649
loaded so we can almost just say we

1157
00:54:37,789 --> 00:54:42,650
could even just do it this way and say

1158
00:54:39,650 --> 00:54:46,070
okay we know that this always has to be

1159
00:54:42,650 --> 00:54:48,289
asset state loaded so it had always

1160
00:54:46,070 --> 00:54:51,440
better be a state loaded when we then

1161
00:54:48,289 --> 00:54:54,289
come in here and do our little monkey

1162
00:54:51,440 --> 00:54:56,570
business we then just reset the state

1163
00:54:54,289 --> 00:54:58,730
back to asset state loaded when we are

1164
00:54:56,570 --> 00:55:01,100
done with it

1165
00:54:58,730 --> 00:55:02,389
and now we can do whatever we want

1166
00:55:01,099 --> 00:55:06,670
because we know that nobody else will

1167
00:55:02,389 --> 00:55:09,879
try to do this right so that's fine

1168
00:55:06,670 --> 00:55:13,970
that's not the best thing in the world

1169
00:55:09,880 --> 00:55:18,710
you know it's it's is it fabulous no but

1170
00:55:13,969 --> 00:55:22,009
if we are doing it that way we avoid any

1171
00:55:18,710 --> 00:55:25,400
possibility of you know stepping on our

1172
00:55:22,010 --> 00:55:29,420
own stepping on our own toes here with

1173
00:55:25,400 --> 00:55:31,070
move header to front so then at that

1174
00:55:29,420 --> 00:55:32,570
point yeah it's pretty easy to update

1175
00:55:31,070 --> 00:55:34,220
the generation ID because we know that

1176
00:55:32,570 --> 00:55:36,289
nobody else can update the generation ID

1177
00:55:34,219 --> 00:55:37,730
because we just took a lock which means

1178
00:55:36,289 --> 00:55:39,469
that all we have to do with a generation

1179
00:55:37,730 --> 00:55:41,960
ID is make sure that if our generation

1180
00:55:39,469 --> 00:55:44,509
ID is higher than its generation ID that

1181
00:55:41,960 --> 00:55:46,940
we would set it right and so what we

1182
00:55:44,510 --> 00:55:52,160
want to do here is say if the asset

1183
00:55:46,940 --> 00:55:55,340
header generation ID is less than our

1184
00:55:52,159 --> 00:56:00,460
generation ID then we would want to

1185
00:55:55,340 --> 00:56:02,920
reset that all right so like so

1186
00:56:00,460 --> 00:56:04,329
I don't know is that that weird bug

1187
00:56:02,920 --> 00:56:05,680
where it yeah it is some reason

1188
00:56:04,329 --> 00:56:06,848
sometimes Emacs thinks when you type

1189
00:56:05,679 --> 00:56:08,259
this that you're starting a template

1190
00:56:06,849 --> 00:56:09,970
decoration and it won't get out of it

1191
00:56:08,260 --> 00:56:11,830
and you have to go delete it and put it

1192
00:56:09,969 --> 00:56:16,989
back that's why that these were just

1193
00:56:11,829 --> 00:56:18,848
momentarily indented a weird bug so yeah

1194
00:56:16,989 --> 00:56:20,229
so that would get us out of the locking

1195
00:56:18,849 --> 00:56:22,000
business we could also get out of the

1196
00:56:20,230 --> 00:56:23,349
get state business and the state masking

1197
00:56:22,000 --> 00:56:26,440
business and all that nonsense which

1198
00:56:23,349 --> 00:56:28,088
would be nice to say the least and then

1199
00:56:26,440 --> 00:56:32,019
we would just sort of look at the asset

1200
00:56:28,088 --> 00:56:34,869
state a little more directly and and

1201
00:56:32,019 --> 00:56:36,369
yeah and that would all be good so we

1202
00:56:34,869 --> 00:56:40,240
need to introduce that generation ID

1203
00:56:36,369 --> 00:56:44,829
thing other than that I think it's all

1204
00:56:40,239 --> 00:56:46,479
good in this case I suppose we want to

1205
00:56:44,829 --> 00:56:49,630
look we don't want to reread this really

1206
00:56:46,480 --> 00:56:52,809
so I suppose we do kind of want this to

1207
00:56:49,630 --> 00:57:02,700
be read out just so we can do the test

1208
00:56:52,809 --> 00:57:02,699
on the same value right so and off we go

1209
00:57:06,150 --> 00:57:11,230
right and that would preserve the state

1210
00:57:09,880 --> 00:57:16,690
as well I don't really know that we care

1211
00:57:11,230 --> 00:57:19,210
about that but there we go so that is

1212
00:57:16,690 --> 00:57:22,780
all she wrote I guess we could also just

1213
00:57:19,210 --> 00:57:24,460
make that at u-32 I don't think there's

1214
00:57:22,780 --> 00:57:26,140
anything else particularly much to it it

1215
00:57:24,460 --> 00:57:27,369
would be nice to share this piece of

1216
00:57:26,139 --> 00:57:28,598
code so that it doesn't have to be

1217
00:57:27,369 --> 00:57:29,950
duplicated since it is going to get

1218
00:57:28,599 --> 00:57:32,769
relatively complex in here as you can

1219
00:57:29,949 --> 00:57:35,319
see it would be nice to basically you

1220
00:57:32,769 --> 00:57:39,539
know do this thing they're exactly the

1221
00:57:35,320 --> 00:57:42,160
same piece of code even down to the part

1222
00:57:39,539 --> 00:57:44,230
where if you take a look

1223
00:57:42,159 --> 00:57:46,029
both the bitmap and the sound or

1224
00:57:44,230 --> 00:57:48,190
actually in the exact same place so

1225
00:57:46,030 --> 00:57:51,430
these things do literally exactly the

1226
00:57:48,190 --> 00:57:54,130
same thing so what we would want to do

1227
00:57:51,429 --> 00:57:55,629
here is we want to just probably just do

1228
00:57:54,130 --> 00:57:57,430
a thing where we return the asset header

1229
00:57:55,630 --> 00:58:01,059
right we'd want to do a thing where we

1230
00:57:57,429 --> 00:58:05,799
do like you know asset memory header you

1231
00:58:01,059 --> 00:58:09,489
know basically get assets and we would

1232
00:58:05,800 --> 00:58:12,320
want this thing to just do you know an

1233
00:58:09,489 --> 00:58:14,209
asset index right something like that

1234
00:58:12,320 --> 00:58:16,880
we could get rid of the must be lock

1235
00:58:14,210 --> 00:58:18,829
nonsense and then this thing would just

1236
00:58:16,880 --> 00:58:21,590
do its thing right it would just say

1237
00:58:18,829 --> 00:58:26,989
like alright I've got an asset memory

1238
00:58:21,590 --> 00:58:28,640
header here and instead of all the stuff

1239
00:58:26,989 --> 00:58:30,679
I'm just gonna use just the asset memory

1240
00:58:28,639 --> 00:58:32,599
header because there's no reason that I

1241
00:58:30,679 --> 00:58:33,859
couldn't do that I go through doing

1242
00:58:32,599 --> 00:58:36,079
everything that way and then when I get

1243
00:58:33,860 --> 00:58:38,960
down to the place where I would actually

1244
00:58:36,079 --> 00:58:40,699
take that snap that result instead of

1245
00:58:38,960 --> 00:58:42,860
trying to do the bitmap part of it I

1246
00:58:40,699 --> 00:58:45,139
just grab the header so that I'll return

1247
00:58:42,860 --> 00:58:47,329
that and then these guys can all just do

1248
00:58:45,139 --> 00:58:52,489
something really straightforward such as

1249
00:58:47,329 --> 00:58:54,230
asset memory header write equals get

1250
00:58:52,489 --> 00:59:02,959
asset assets

1251
00:58:54,230 --> 00:59:07,610
you got value if header right or I don't

1252
00:59:02,960 --> 00:59:12,949
have to do that or just do this load a

1253
00:59:07,610 --> 00:59:17,510
bitmap result is like header header

1254
00:59:12,949 --> 00:59:20,269
bitmap otherwise nothing and that'd be

1255
00:59:17,510 --> 00:59:25,610
like it right and then loaded sound

1256
00:59:20,269 --> 00:59:27,530
would do exactly the same thing so it's

1257
00:59:25,610 --> 00:59:29,690
just a question of getting the types

1258
00:59:27,530 --> 00:59:31,670
right for C's type checking there but

1259
00:59:29,690 --> 00:59:33,019
otherwise exactly the same code it's

1260
00:59:31,670 --> 00:59:34,099
even returning the exact same pointer

1261
00:59:33,019 --> 00:59:37,369
because these two would be at the exact

1262
00:59:34,099 --> 00:59:38,509
same address inside this thing 99% of

1263
00:59:37,369 --> 00:59:43,150
the time if there wasn't some kind of

1264
00:59:38,510 --> 00:59:48,350
alignment change but anyway so that is

1265
00:59:43,150 --> 00:59:51,340
mostly that think if borrowing the

1266
00:59:48,349 --> 00:59:56,719
generation ID stuff that's totally fine

1267
00:59:51,340 --> 00:59:59,210
right right am i right

1268
00:59:56,719 --> 01:00:04,809
I don't know if I'm right hopefully I'm

1269
00:59:59,210 --> 01:00:09,800
right get rid of all this locking stuff

1270
01:00:04,809 --> 01:00:12,049
final states equals that's loaded I'm

1271
01:00:09,800 --> 01:00:15,280
just gonna light I never liked this lock

1272
01:00:12,050 --> 01:00:15,280
stuff it was such a hack

1273
01:00:15,349 --> 01:00:20,900
did not like it and I don't like it now

1274
01:00:21,019 --> 01:00:29,489
didn't like it then don't like it now so

1275
01:00:24,358 --> 01:00:31,588
that's good that's all fine and so now

1276
01:00:29,489 --> 01:00:35,219
all we really need to address is sort of

1277
01:00:31,588 --> 01:00:37,469
that generation ID stuff right and so

1278
01:00:35,219 --> 01:00:40,199
the generation ID stuff is the part that

1279
01:00:37,469 --> 01:00:42,088
I talked about today and what we can

1280
01:00:40,199 --> 01:00:43,739
really do at the moment right is we

1281
01:00:42,088 --> 01:00:45,389
could start to try and get this code

1282
01:00:43,739 --> 01:00:49,199
working by just going like all right

1283
01:00:45,389 --> 01:00:51,868
forget about it like nobody cares let's

1284
01:00:49,199 --> 01:00:53,699
let's try to make the rest of the code

1285
01:00:51,869 --> 01:00:56,809
work first so we'll just say ok the new

1286
01:00:53,699 --> 01:01:01,919
plus key lock that's gone goodbye

1287
01:00:56,809 --> 01:01:02,818
recompile don't you just not take 3 that

1288
01:01:01,920 --> 01:01:05,789
is correct

1289
01:01:02,818 --> 01:01:06,779
assets should be locked it needs to go

1290
01:01:05,789 --> 01:01:13,199
away as well

1291
01:01:06,780 --> 01:01:14,579
assets should be locked let's fix all

1292
01:01:13,199 --> 01:01:19,189
this nonsense

1293
01:01:14,579 --> 01:01:21,750
yes it should be locked actually want

1294
01:01:19,190 --> 01:01:23,280
doo doo doo functions not take two

1295
01:01:21,750 --> 01:01:26,309
arguments so then we just have to take

1296
01:01:23,280 --> 01:01:29,569
our load bitmap which it looks like must

1297
01:01:26,309 --> 01:01:38,338
have got inspect here yeah there it is

1298
01:01:29,568 --> 01:01:41,579
and get rid of those so yeah I'm not

1299
01:01:38,338 --> 01:01:45,750
quite there yet right but working to

1300
01:01:41,579 --> 01:01:48,030
some degree and I don't know if the code

1301
01:01:45,750 --> 01:01:51,510
works at all code does not work at all

1302
01:01:48,030 --> 01:01:53,160
yeah so that's fine oh right probably

1303
01:01:51,510 --> 01:01:55,619
want to exit that for loop at some point

1304
01:01:53,159 --> 01:01:59,699
forgot about that little that little

1305
01:01:55,619 --> 01:02:05,099
detail we need to actually exit in the

1306
01:01:59,699 --> 01:02:10,489
case where we worked right can't can't

1307
01:02:05,099 --> 01:02:13,440
keep trying forever yeah so you know

1308
01:02:10,489 --> 01:02:14,308
working so that's good we didn't break

1309
01:02:13,440 --> 01:02:15,958
anything

1310
01:02:14,309 --> 01:02:19,109
but we haven't yet fixed the boat

1311
01:02:15,958 --> 01:02:21,598
because the bug is that we still need to

1312
01:02:19,108 --> 01:02:23,989
implement that generation ID so I think

1313
01:02:21,599 --> 01:02:27,239
you know I feel like I talked through it

1314
01:02:23,989 --> 01:02:30,358
reasonably well to the point where I'm

1315
01:02:27,239 --> 01:02:32,670
relatively happy that you know taking a

1316
01:02:30,358 --> 01:02:35,489
lock here isn't a huge deal because it's

1317
01:02:32,670 --> 01:02:38,159
not a very hard lock it's a forward

1318
01:02:35,489 --> 01:02:40,650
progress style lock this function this

1319
01:02:38,159 --> 01:02:41,998
will effectively be free ninety-nine

1320
01:02:40,650 --> 01:02:43,798
percent of the time because all its

1321
01:02:41,998 --> 01:02:47,038
gonna do is actually do that compare

1322
01:02:43,798 --> 01:02:50,038
exchange and be done and people aren't

1323
01:02:47,039 --> 01:02:55,079
probably gonna hit this almost ever

1324
01:02:50,039 --> 01:02:56,969
right so I think that should probably be

1325
01:02:55,079 --> 01:02:58,528
okay these are just there's almost

1326
01:02:56,969 --> 01:03:00,599
nothing happening it's only this move

1327
01:02:58,528 --> 01:03:03,449
header to front that's ever happening

1328
01:03:00,599 --> 01:03:05,880
there and so I feel like that's probably

1329
01:03:03,449 --> 01:03:07,650
fine and the other thing that we can do

1330
01:03:05,880 --> 01:03:09,959
is move header to front if we want to

1331
01:03:07,650 --> 01:03:11,430
kind of clean this up a little bit if I

1332
01:03:09,958 --> 01:03:14,969
take a look at what that's actually

1333
01:03:11,429 --> 01:03:16,558
doing you know is that is that doing

1334
01:03:14,969 --> 01:03:18,539
much it's it's not right it's it's

1335
01:03:16,559 --> 01:03:20,219
pretty straightforward so I think that

1336
01:03:18,539 --> 01:03:23,130
it would only be like a few cycles in

1337
01:03:20,219 --> 01:03:25,048
there hopefully you know less than a

1338
01:03:23,130 --> 01:03:26,640
thousand cycles or something that that

1339
01:03:25,048 --> 01:03:27,809
would ever be hitting even in the worst

1340
01:03:26,639 --> 01:03:29,400
case hopefully I don't know if that

1341
01:03:27,809 --> 01:03:31,319
might not be true we'd have to take a

1342
01:03:29,400 --> 01:03:33,088
look at a little more cleanly but so

1343
01:03:31,318 --> 01:03:35,748
that would do it and that would get our

1344
01:03:33,088 --> 01:03:38,338
generation ID stuff per spekt properly

1345
01:03:35,748 --> 01:03:40,708
so that then we could just use the

1346
01:03:38,338 --> 01:03:43,949
generation ID as a guard against

1347
01:03:40,708 --> 01:03:45,598
eviction which would finish sort of

1348
01:03:43,949 --> 01:03:46,889
getting rid of that bug and also getting

1349
01:03:45,599 --> 01:03:49,769
us out of the business of locking our

1350
01:03:46,889 --> 01:03:51,239
assets which is kind of a double win in

1351
01:03:49,768 --> 01:03:53,338
my opinion because we fixed the bug and

1352
01:03:51,239 --> 01:03:56,400
we get rid of the stupid thing that was

1353
01:03:53,338 --> 01:03:59,038
really janky in there and I think that's

1354
01:03:56,400 --> 01:04:03,298
a plus so let's go ahead and go to the

1355
01:03:59,039 --> 01:04:05,189
QA like I said I'm very sleepy today so

1356
01:04:03,298 --> 01:04:08,880
I apologize my answers are kind of just

1357
01:04:05,188 --> 01:04:12,498
random but if you have questions about

1358
01:04:08,880 --> 01:04:12,499
the sleepy stuff that I was doing today

1359
01:04:13,880 --> 01:04:18,570
you are welcome to ask me them now put Q

1360
01:04:17,010 --> 01:04:20,340
:

1361
01:04:18,570 --> 01:04:22,820
in front of it and I will answer the

1362
01:04:20,340 --> 01:04:22,820
question

1363
01:04:32,929 --> 01:04:37,210
oh I did not get enough sleep last night

1364
01:04:52,559 --> 01:04:56,920
sure luck 93 hit Casey can you do a

1365
01:04:55,510 --> 01:05:00,819
two-minute recap of everything done

1366
01:04:56,920 --> 01:05:02,200
today yeah I mean basically what I had

1367
01:05:00,818 --> 01:05:04,778
to do today was I wanted to look at some

1368
01:05:02,199 --> 01:05:06,608
code that wasn't right it was kind of a

1369
01:05:04,778 --> 01:05:08,440
little busted and basically what I had

1370
01:05:06,608 --> 01:05:16,088
done is I moved a function to a location

1371
01:05:08,440 --> 01:05:17,650
that would make it you know that would

1372
01:05:16,088 --> 01:05:19,568
introduce a bug that I didn't have

1373
01:05:17,650 --> 01:05:20,980
before I'd moved that function with and

1374
01:05:19,568 --> 01:05:25,599
what it was was we were evicting the

1375
01:05:20,980 --> 01:05:27,369
assets inside our function that

1376
01:05:25,599 --> 01:05:30,278
allocates new memory for the assets and

1377
01:05:27,369 --> 01:05:32,170
that function was called any time you

1378
01:05:30,278 --> 01:05:34,989
might try to go and load an asset right

1379
01:05:32,170 --> 01:05:38,559
and since we might be trying to load

1380
01:05:34,989 --> 01:05:42,848
assets in the middle of doing rendering

1381
01:05:38,559 --> 01:05:45,640
and stuff that means that we we'd end up

1382
01:05:42,849 --> 01:05:47,349
in in a situation where we could evict

1383
01:05:45,639 --> 01:05:52,389
an asset we were depending on being

1384
01:05:47,349 --> 01:05:54,220
there in a future render kick off right

1385
01:05:52,389 --> 01:05:55,808
because we like build up all the render

1386
01:05:54,219 --> 01:05:57,518
things we want to do and those point to

1387
01:05:55,809 --> 01:05:59,528
the bitmaps that they need and then we

1388
01:05:57,518 --> 01:06:01,358
kick it off if those bitmaps get evicted

1389
01:05:59,528 --> 01:06:02,980
in the middle of the render before it

1390
01:06:01,358 --> 01:06:04,630
has a chance to finish we just draw a

1391
01:06:02,980 --> 01:06:06,519
bunch of garbage to screen and that's

1392
01:06:04,630 --> 01:06:10,690
nobody likes that right that's ugly and

1393
01:06:06,518 --> 01:06:12,338
unprofessional so in order to fix that

1394
01:06:10,690 --> 01:06:14,619
what I wanted to do was come up with

1395
01:06:12,338 --> 01:06:16,509
some scheme where I could mark when

1396
01:06:14,619 --> 01:06:18,009
things were used and so what I'm gonna

1397
01:06:16,509 --> 01:06:19,480
do is I'm gonna use this generation I

1398
01:06:18,009 --> 01:06:21,849
need to do that but while we were doing

1399
01:06:19,480 --> 01:06:23,380
that I also wanted to fix the locking

1400
01:06:21,849 --> 01:06:25,509
concept which is what we were previously

1401
01:06:23,380 --> 01:06:27,960
doing to make sure that a thread that

1402
01:06:25,509 --> 01:06:29,889
was using rendered assets didn't have to

1403
01:06:27,960 --> 01:06:32,048
worry about the fact they might get

1404
01:06:29,889 --> 01:06:33,098
evicted by the main thread but it was

1405
01:06:32,048 --> 01:06:34,719
always a little janky because the way

1406
01:06:33,099 --> 01:06:36,309
that worked is it would just keep assets

1407
01:06:34,719 --> 01:06:37,750
loaded forever that the background

1408
01:06:36,309 --> 01:06:39,609
threads used it so that was kind of

1409
01:06:37,750 --> 01:06:42,548
nasty and stupid

1410
01:06:39,608 --> 01:06:44,469
so we also fixed that but in order to

1411
01:06:42,548 --> 01:06:47,528
fix those what I had to do was consider

1412
01:06:44,469 --> 01:06:49,509
how the locking profile would work for

1413
01:06:47,528 --> 01:06:50,829
these things so when you go to get an

1414
01:06:49,509 --> 01:06:53,829
asset there's things that we need to do

1415
01:06:50,829 --> 01:06:55,869
and those things can really only be done

1416
01:06:53,829 --> 01:06:57,609
from one thought at a time so what I did

1417
01:06:55,869 --> 01:06:59,710
was I said all right what I'm going to

1418
01:06:57,608 --> 01:07:02,318
do is I'm going to try to take an

1419
01:06:59,710 --> 01:07:05,860
optimistic lock by setting the state

1420
01:07:02,318 --> 01:07:08,170
field to this asset operating value

1421
01:07:05,860 --> 01:07:09,490
if it succeeds it'll do the stuff if it

1422
01:07:08,170 --> 01:07:12,190
fails it'll just try again

1423
01:07:09,489 --> 01:07:13,629
and it'll keep retrying forever because

1424
01:07:12,190 --> 01:07:14,920
I know that only so many threads are

1425
01:07:13,630 --> 01:07:19,030
ever gonna try this and they'll all

1426
01:07:14,920 --> 01:07:21,190
complete eventually right I mean

1427
01:07:19,030 --> 01:07:22,900
technically if you've got you could get

1428
01:07:21,190 --> 01:07:23,950
insufficient if you had some code where

1429
01:07:22,900 --> 01:07:26,170
they were all just calling this

1430
01:07:23,949 --> 01:07:28,269
repeatedly and doing nothing else maybe

1431
01:07:26,170 --> 01:07:31,710
that wouldn't happen but but really

1432
01:07:28,269 --> 01:07:31,710
that's not super possible so

1433
01:07:50,170 --> 01:07:59,740
how often do you actually implement

1434
01:07:52,429 --> 01:07:59,739
something from a paper uh not that often

1435
01:08:00,070 --> 01:08:05,809
not that often these days I think it it

1436
01:08:03,409 --> 01:08:09,649
largely depends on the discipline in

1437
01:08:05,809 --> 01:08:12,739
which you're programming like you know

1438
01:08:09,650 --> 01:08:15,079
if you're doing graphics work like 3d

1439
01:08:12,739 --> 01:08:16,219
graphics work you tend to read a lot of

1440
01:08:15,079 --> 01:08:18,199
papers because there's just a lot of

1441
01:08:16,219 --> 01:08:20,210
stuff and a lot of people doing research

1442
01:08:18,199 --> 01:08:22,278
on a lot of areas of it and so the

1443
01:08:20,210 --> 01:08:24,199
chances that you're going to find useful

1444
01:08:22,279 --> 01:08:26,000
information in a paper and and you know

1445
01:08:24,199 --> 01:08:28,130
you may not implement the paper exactly

1446
01:08:26,000 --> 01:08:32,119
but you'll get good information from the

1447
01:08:28,130 --> 01:08:33,680
paper right you know 2d game doesn't

1448
01:08:32,119 --> 01:08:35,750
happen that often not really right

1449
01:08:33,680 --> 01:08:39,200
because you know there's not that many

1450
01:08:35,750 --> 01:08:47,119
people doing research on 2d games and so

1451
01:08:39,199 --> 01:08:48,528
it's a little harder what would be the

1452
01:08:47,119 --> 01:08:50,059
worst case scenario if you had multiple

1453
01:08:48,529 --> 01:08:52,400
threads trying to remove an asset

1454
01:08:50,060 --> 01:08:55,130
couldn't you just wait till no thread

1455
01:08:52,399 --> 01:08:59,059
was trying to remove the asset well that

1456
01:08:55,130 --> 01:09:00,109
is kind of what we're doing right I mean

1457
01:08:59,060 --> 01:09:01,640
I'm not sure what you mean by trying to

1458
01:09:00,109 --> 01:09:02,838
remove the asset because removing the

1459
01:09:01,640 --> 01:09:05,509
asset is not really the problem it's

1460
01:09:02,838 --> 01:09:07,100
using the asset that's the problem and

1461
01:09:05,509 --> 01:09:10,430
what we're trying to do is implement a

1462
01:09:07,100 --> 01:09:13,870
scheme where we know definitively that

1463
01:09:10,430 --> 01:09:13,869
nobody is going to use that asset

1464
01:09:14,140 --> 01:09:18,588
pseudonym 73 one way to avoid the lock

1465
01:09:16,729 --> 01:09:22,068
is to split the least recently used list

1466
01:09:18,588 --> 01:09:24,229
into two parts keep the most recent 25%

1467
01:09:22,069 --> 01:09:27,020
of it in one partition and the least

1468
01:09:24,229 --> 01:09:28,729
recent in 75 percent in another only

1469
01:09:27,020 --> 01:09:32,150
move an asset to the head of the list if

1470
01:09:28,729 --> 01:09:35,088
it's in the least recent part how does

1471
01:09:32,149 --> 01:09:37,129
that help avoid the lock though don't

1472
01:09:35,088 --> 01:09:38,568
you still have to take the lock because

1473
01:09:37,130 --> 01:09:40,579
how are you keeping it partitioned into

1474
01:09:38,569 --> 01:09:41,930
those two pieces in order to keep it

1475
01:09:40,579 --> 01:09:43,460
partitioned into the two pieces you have

1476
01:09:41,930 --> 01:09:46,088
to take the lock at some point at the

1477
01:09:43,460 --> 01:09:46,088
boundary right

1478
01:09:54,970 --> 01:10:01,220
so if I understand correctly says James

1479
01:09:58,729 --> 01:10:03,169
Whitman our problem is that least

1480
01:10:01,220 --> 01:10:05,539
recently used in this context means

1481
01:10:03,170 --> 01:10:07,310
lease recently stopped being used in all

1482
01:10:05,539 --> 01:10:09,859
threads and we can't really know that

1483
01:10:07,310 --> 01:10:11,450
for certain without having some form of

1484
01:10:09,859 --> 01:10:19,429
inter thread communication is that

1485
01:10:11,449 --> 01:10:20,659
correct yes I mean I don't know that I

1486
01:10:19,430 --> 01:10:22,250
would have necessarily said it the way

1487
01:10:20,659 --> 01:10:24,949
you said it but I don't think that's an

1488
01:10:22,250 --> 01:10:27,529
incorrect way of saying it what I would

1489
01:10:24,949 --> 01:10:33,559
say is that we have a notion of lease

1490
01:10:27,529 --> 01:10:35,899
recently used that notion is just this

1491
01:10:33,560 --> 01:10:38,390
move header to front so that linked list

1492
01:10:35,899 --> 01:10:44,179
that we're keeping is always in

1493
01:10:38,390 --> 01:10:49,160
perfectly sorted order right if we just

1494
01:10:44,180 --> 01:10:52,760
wanted to be Bros about it right and you

1495
01:10:49,159 --> 01:10:56,180
want to be like you know bro I just

1496
01:10:52,760 --> 01:10:58,789
benched 375 of the gym yo right it's

1497
01:10:56,180 --> 01:11:01,190
like you know meathead protein powder

1498
01:10:58,789 --> 01:11:04,220
action right if you're just gonna go

1499
01:11:01,189 --> 01:11:07,429
that route with it then you would just

1500
01:11:04,220 --> 01:11:09,740
say that's fine we know the list is in

1501
01:11:07,430 --> 01:11:11,780
sorted order we know we will have enough

1502
01:11:09,739 --> 01:11:15,559
memory in the system so that we will

1503
01:11:11,779 --> 01:11:20,119
never be counting on using an asset in

1504
01:11:15,560 --> 01:11:22,880
the back you know 50% of the LRU list so

1505
01:11:20,119 --> 01:11:29,140
it's always fine to free what's in the

1506
01:11:22,880 --> 01:11:32,720
back of that list right we could do that

1507
01:11:29,140 --> 01:11:34,970
right now I would argue that even if we

1508
01:11:32,720 --> 01:11:36,650
did that we should still have introduced

1509
01:11:34,970 --> 01:11:38,780
this atomic compare exchange because

1510
01:11:36,649 --> 01:11:40,789
what we want to do when we do that is we

1511
01:11:38,779 --> 01:11:42,319
want to make sure that if you're going

1512
01:11:40,789 --> 01:11:44,000
to go delete an asset you're not

1513
01:11:42,319 --> 01:11:46,609
deleting one that another thread was

1514
01:11:44,000 --> 01:11:48,170
just about to move to front right

1515
01:11:46,609 --> 01:11:52,489
because you could have a race condition

1516
01:11:48,170 --> 01:11:53,930
there so you still want this I think but

1517
01:11:52,489 --> 01:11:55,159
in general this would totally solve the

1518
01:11:53,930 --> 01:11:56,450
problem the code that we just wrote

1519
01:11:55,159 --> 01:11:57,979
would be like fine

1520
01:11:56,449 --> 01:11:59,149
I mean bar in fact we should probably

1521
01:11:57,979 --> 01:12:00,919
step through and look for vibes and

1522
01:11:59,149 --> 01:12:02,420
stuff because I've just typed it in but

1523
01:12:00,920 --> 01:12:04,550
you know assuming that was working the

1524
01:12:02,420 --> 01:12:05,989
way that I wanted it to work and

1525
01:12:04,550 --> 01:12:08,579
debugged then yes

1526
01:12:05,988 --> 01:12:10,409
but the problem with it is if we wanted

1527
01:12:08,579 --> 01:12:13,559
to guard against the possibility of

1528
01:12:10,409 --> 01:12:16,139
evicting an asset that was still being

1529
01:12:13,560 --> 01:12:17,910
used because we're in some really tight

1530
01:12:16,140 --> 01:12:22,170
memory pressure scenario or who knows

1531
01:12:17,909 --> 01:12:24,569
what's going on where there's hardly any

1532
01:12:22,170 --> 01:12:26,690
memory for assets or something and so

1533
01:12:24,569 --> 01:12:29,488
it's possible to actually be using

1534
01:12:26,689 --> 01:12:33,149
everything in the lr in the in the whole

1535
01:12:29,488 --> 01:12:37,349
bank at once and so you shouldn't even

1536
01:12:33,149 --> 01:12:38,879
free the last guy in the list or if you

1537
01:12:37,350 --> 01:12:40,650
have a situation where one thread just

1538
01:12:38,880 --> 01:12:41,850
took a really long time and somehow it's

1539
01:12:40,649 --> 01:12:44,269
stuff is at the end of the list even

1540
01:12:41,850 --> 01:12:46,350
though it was like least recently used

1541
01:12:44,270 --> 01:12:48,210
you know because we're only doing it on

1542
01:12:46,350 --> 01:12:49,620
the move to on the the part where you

1543
01:12:48,210 --> 01:12:52,890
actually start using it not on the part

1544
01:12:49,619 --> 01:12:53,939
where you end using it right then we

1545
01:12:52,890 --> 01:12:56,760
don't have protection against that and

1546
01:12:53,939 --> 01:13:01,649
so generation ID was just a way of

1547
01:12:56,760 --> 01:13:04,199
adding that insurance so so that's you

1548
01:13:01,649 --> 01:13:06,389
know my description of it I think your

1549
01:13:04,199 --> 01:13:09,470
description of it is fine it sounds

1550
01:13:06,390 --> 01:13:09,470
correct to me as well

1551
01:13:18,380 --> 01:13:25,199
suitum 73 you don't take the lock on hot

1552
01:13:21,600 --> 01:13:28,980
assets most of the time well we don't

1553
01:13:25,199 --> 01:13:31,380
take the lock on assets at most the time

1554
01:13:28,979 --> 01:13:34,259
anyway right because there's no lock to

1555
01:13:31,380 --> 01:13:36,029
take really like all you're doing is

1556
01:13:34,260 --> 01:13:40,440
doing one at Gotama comparing exchange

1557
01:13:36,029 --> 01:13:43,859
right doing like you know ten mobs or

1558
01:13:40,439 --> 01:13:45,839
something and then setting the state so

1559
01:13:43,859 --> 01:13:48,809
the chance is that that lock ever

1560
01:13:45,840 --> 01:13:50,369
actually executes like meaning that

1561
01:13:48,810 --> 01:13:51,930
someone actually gets locked out by it

1562
01:13:50,369 --> 01:13:55,439
which is the only time it cost you

1563
01:13:51,930 --> 01:13:57,539
anything is I feel like going to be

1564
01:13:55,439 --> 01:14:00,509
really low but I could be wrong about

1565
01:13:57,539 --> 01:14:02,010
that not to mention the fact that the

1566
01:14:00,510 --> 01:14:03,989
assets used by the background threats

1567
01:14:02,010 --> 01:14:05,550
are often not the same assets that are

1568
01:14:03,989 --> 01:14:08,659
used by the foreground feds so I feel

1569
01:14:05,550 --> 01:14:11,010
like that lock is just never contended

1570
01:14:08,659 --> 01:14:12,869
probably ever like it's probably like

1571
01:14:11,010 --> 01:14:16,050
you know once in a blue moon kind of

1572
01:14:12,869 --> 01:14:17,460
thing right I haven't seen you drink any

1573
01:14:16,050 --> 01:14:19,650
milk in this stream is that where you're

1574
01:14:17,460 --> 01:14:21,890
retired it could be it could very well

1575
01:14:19,649 --> 01:14:21,889
be

1576
01:14:55,800 --> 01:15:00,820
easy fool says you can avoid the

1577
01:14:58,630 --> 01:15:06,940
generation ID gap checking list by

1578
01:15:00,819 --> 01:15:12,460
keeping min Max CNT render group done

1579
01:15:06,939 --> 01:15:16,178
IDs and freeing all assets max when C

1580
01:15:12,460 --> 01:15:23,618
and T equals max minus min then reset

1581
01:15:16,179 --> 01:15:26,908
min equals max I'm sorry I don't know

1582
01:15:23,618 --> 01:15:31,049
what you're talking about but I don't

1583
01:15:26,908 --> 01:15:33,339
think that would help us whatever it is

1584
01:15:31,050 --> 01:15:38,199
because why would keeping the minimum

1585
01:15:33,340 --> 01:15:39,760
the maximum help you and first of all

1586
01:15:38,198 --> 01:15:41,469
the problem is how do you even know what

1587
01:15:39,760 --> 01:15:45,520
the minimum is that's the whole problem

1588
01:15:41,469 --> 01:15:47,920
all you ever need is the minimum right I

1589
01:15:45,520 --> 01:15:48,880
mean the only thing you need to know is

1590
01:15:47,920 --> 01:15:50,800
the minimum then you could do everything

1591
01:15:48,880 --> 01:15:52,569
perfectly the problem is how do you know

1592
01:15:50,800 --> 01:15:54,489
what the minimum is their whole reason

1593
01:15:52,569 --> 01:15:55,929
you need to keep the checking list is to

1594
01:15:54,488 --> 01:16:02,019
search you know what the actual minimum

1595
01:15:55,929 --> 01:16:03,609
is right so keeping more stuff doesn't

1596
01:16:02,020 --> 01:16:04,630
really help you do that unless I'm

1597
01:16:03,609 --> 01:16:07,420
missing what you're trying to suggest

1598
01:16:04,630 --> 01:16:09,730
and also like I said we're not trying to

1599
01:16:07,420 --> 01:16:12,340
free the assets all we're trying to do

1600
01:16:09,729 --> 01:16:15,129
is prevent the assets from being freed

1601
01:16:12,340 --> 01:16:17,529
so if someone who looks at the LRU list

1602
01:16:15,130 --> 01:16:20,020
goes I need to free some asset space now

1603
01:16:17,529 --> 01:16:21,819
we just need a way of saying check the

1604
01:16:20,020 --> 01:16:24,000
generation ID and go no wait don't free

1605
01:16:21,819 --> 01:16:24,000
that

1606
01:16:34,279 --> 01:16:36,939
right

1607
01:17:02,930 --> 01:17:07,690
I see no more cue cones

1608
01:17:45,819 --> 01:17:50,229
easy fool you know the men render group

1609
01:17:48,279 --> 01:17:52,599
that completed but like you mentioned at

1610
01:17:50,229 --> 01:17:59,189
the start if they complete out of order

1611
01:17:52,599 --> 01:17:59,190
the men isn't isn't what

1612
01:18:12,930 --> 01:18:18,420
sorry I'm not sure if it like cut off

1613
01:18:14,819 --> 01:18:21,630
that or something they don't know all I

1614
01:18:18,420 --> 01:18:22,890
got was you know the min Ren render

1615
01:18:21,630 --> 01:18:24,390
group that completed but like you

1616
01:18:22,890 --> 01:18:26,640
mentioned at the start if they complete

1617
01:18:24,390 --> 01:18:27,600
out of order the min isn't and then I

1618
01:18:26,640 --> 01:18:32,940
don't see anything else

1619
01:18:27,600 --> 01:18:34,050
oh isn't correct when a cap Icarus we

1620
01:18:32,939 --> 01:18:36,449
need to track the interval and jump

1621
01:18:34,050 --> 01:18:39,090
ahead when it fills but maybe I'm just

1622
01:18:36,449 --> 01:18:40,260
misunderstanding situation no that's

1623
01:18:39,090 --> 01:18:41,670
correct that's what I'm saying that's

1624
01:18:40,260 --> 01:18:47,100
why you need to keep the list because

1625
01:18:41,670 --> 01:18:50,760
the only way to like fill up the to like

1626
01:18:47,100 --> 01:18:52,400
cross the gap is you need to know if all

1627
01:18:50,760 --> 01:18:55,949
of the numbers in the gap actually

1628
01:18:52,399 --> 01:19:00,119
happened right and so in the worst case

1629
01:18:55,949 --> 01:19:03,210
scenario you need to know exactly which

1630
01:19:00,119 --> 01:19:06,510
ones did that because otherwise you have

1631
01:19:03,210 --> 01:19:07,680
no idea right like it the thing that

1632
01:19:06,510 --> 01:19:09,869
you're talking about would just be like

1633
01:19:07,680 --> 01:19:11,430
an optimization to jump ahead in the

1634
01:19:09,869 --> 01:19:13,829
case where it happened that they all

1635
01:19:11,430 --> 01:19:15,480
completed but you don't care about that

1636
01:19:13,829 --> 01:19:17,430
case very much you care about knowing

1637
01:19:15,479 --> 01:19:19,529
how far to go in the normal case where

1638
01:19:17,430 --> 01:19:22,220
does just a couple missing right how far

1639
01:19:19,529 --> 01:19:22,219
forward can you go

1640
01:19:40,460 --> 01:19:46,079
I'm at the de 19 video improving audio

1641
01:19:43,890 --> 01:19:48,690
sync in order to get time begin period

1642
01:19:46,079 --> 01:19:52,880
to work I had to call it twice do you

1643
01:19:48,689 --> 01:19:52,879
have any idea why

1644
01:20:00,550 --> 01:20:12,880
do I have any idea why not off the top

1645
01:20:10,100 --> 01:20:12,880
of my head

1646
01:20:31,590 --> 01:20:37,889
I don't know I'm not sure why you would

1647
01:20:35,698 --> 01:20:41,908
have to call that twice are you sure

1648
01:20:37,889 --> 01:20:43,289
that's actually what happened are you

1649
01:20:41,908 --> 01:20:44,368
sure that you didn't just think that

1650
01:20:43,289 --> 01:20:46,829
that's what happened and maybe there was

1651
01:20:44,368 --> 01:20:50,069
some other thing that made it appear

1652
01:20:46,829 --> 01:20:51,658
like that was happening I mean it's

1653
01:20:50,069 --> 01:20:54,960
totally possible did that happen but

1654
01:20:51,658 --> 01:20:58,549
that is not something I would have a

1655
01:20:54,960 --> 01:20:58,550
guess about off the top of my head

1656
01:21:07,539 --> 01:21:13,180
any update and what algorithms who used

1657
01:21:09,520 --> 01:21:14,560
to do laundry these days I just keep

1658
01:21:13,180 --> 01:21:16,090
them in the laundry baskets like I did

1659
01:21:14,560 --> 01:21:17,500
when I the thing I described on the

1660
01:21:16,090 --> 01:21:19,480
podcast you're talking about is is

1661
01:21:17,500 --> 01:21:22,170
totally what I use I haven't really

1662
01:21:19,479 --> 01:21:22,169
upgraded it since

1663
01:21:37,029 --> 01:21:43,420
alright that it for qqs it's good

1664
01:21:40,670 --> 01:21:43,420
because I'm sleepy

1665
01:21:50,409 --> 01:21:55,220
he's a fool never mind my keyboard and

1666
01:21:52,970 --> 01:21:57,220
my internet seems to be dying away -

1667
01:21:55,220 --> 01:22:00,980
uh-oh

1668
01:21:57,220 --> 01:22:03,640
yikes that's too bad things to have died

1669
01:22:00,979 --> 01:22:03,639
on you at the same time

1670
01:22:11,609 --> 01:22:16,509
Sherlock 93 I think we should do it

1671
01:22:13,869 --> 01:22:18,039
detour and make a simple ray tracer we

1672
01:22:16,510 --> 01:22:19,449
should just yeah like eventually we'll

1673
01:22:18,039 --> 01:22:23,800
do like a handmade hero that's just all

1674
01:22:19,449 --> 01:22:25,210
retraced clearly of course I don't know

1675
01:22:23,800 --> 01:22:26,590
who's gonna make all the 3d art assets

1676
01:22:25,210 --> 01:22:31,060
that we would need if you wanted to do

1677
01:22:26,590 --> 01:22:33,810
that but a ray traced handmade hero

1678
01:22:31,060 --> 01:22:33,810
would be awesome

1679
01:22:43,170 --> 01:22:48,219
all right let's wind it down cuz I am

1680
01:22:45,969 --> 01:22:49,510
too sleepy to do any coding anyway I was

1681
01:22:48,219 --> 01:22:52,329
too sleepy to do the coding I actually

1682
01:22:49,510 --> 01:22:55,390
did on the stream let's be honest about

1683
01:22:52,329 --> 01:22:57,609
it that's just the way it was probably

1684
01:22:55,390 --> 01:23:00,219
was all really obvious stuff that I just

1685
01:22:57,609 --> 01:23:04,109
like was not thinking of anyway I made

1686
01:23:00,219 --> 01:23:05,829
it harder than it had to be anyway

1687
01:23:04,109 --> 01:23:06,729
ladies and gentlemen thank you for

1688
01:23:05,829 --> 01:23:08,229
joining me for another episode of

1689
01:23:06,729 --> 01:23:12,549
handmade hero it's an a pleasure coding

1690
01:23:08,229 --> 01:23:13,689
with you as always if you if you would

1691
01:23:12,550 --> 01:23:14,860
like to follow along at home you can

1692
01:23:13,689 --> 01:23:17,488
always pee order the game on handmade

1693
01:23:14,859 --> 01:23:19,839
hero or get come to the source code and

1694
01:23:17,488 --> 01:23:21,819
you can download it every night after I

1695
01:23:19,840 --> 01:23:24,190
finished programming I upload our latest

1696
01:23:21,819 --> 01:23:25,960
changes we also have forums we can go to

1697
01:23:24,189 --> 01:23:27,519
ask questions get an anti episode guide

1698
01:23:25,960 --> 01:23:29,859
ports to Mac and Linux all sorts of good

1699
01:23:27,520 --> 01:23:32,830
things that the community helpfully

1700
01:23:29,859 --> 01:23:34,210
maintains for you out of the goodness of

1701
01:23:32,829 --> 01:23:35,380
their heart we also have a patreon page

1702
01:23:34,210 --> 01:23:37,029
you could subscribe to to help support

1703
01:23:35,380 --> 01:23:38,170
the video series and tweet bot that

1704
01:23:37,029 --> 01:23:39,159
tweets the schedule at you so if you

1705
01:23:38,170 --> 01:23:42,550
want to know when the streams gonna be

1706
01:23:39,159 --> 01:23:46,329
live that's the place to go I am in the

1707
01:23:42,550 --> 01:23:49,000
middle right now of testing and like

1708
01:23:46,329 --> 01:23:54,039
getting the UNIX NISS happening properly

1709
01:23:49,000 --> 01:23:56,250
to have github authorizations occur so

1710
01:23:54,039 --> 01:23:58,479
hopefully in the not too distant future

1711
01:23:56,250 --> 01:24:00,699
you will be able to start getting

1712
01:23:58,479 --> 01:24:02,859
handmade hero from github if you have

1713
01:24:00,699 --> 01:24:05,649
pre-order the game so stay tuned for

1714
01:24:02,859 --> 01:24:07,420
that I will be explaining how to do it

1715
01:24:05,649 --> 01:24:09,189
as soon as I am confident that the

1716
01:24:07,420 --> 01:24:13,630
system is working reliably enough to

1717
01:24:09,189 --> 01:24:16,569
have anyone actually you try it yeah so

1718
01:24:13,630 --> 01:24:19,300
until then tomorrow I will be back here

1719
01:24:16,569 --> 01:24:21,130
at 8 p.m. Pacific Daylight Time

1720
01:24:19,300 --> 01:24:23,020
hopefully I will be more awake than I

1721
01:24:21,130 --> 01:24:25,779
was this evening for these late-night

1722
01:24:23,020 --> 01:24:27,700
streams and I hope to see you there

1723
01:24:25,779 --> 01:24:31,079
until then take it easy everyone and I

1724
01:24:27,699 --> 01:24:31,079
will see you guys on the Internet

