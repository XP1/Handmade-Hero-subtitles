1
00:00:00,199 --> 00:00:04,588
hello everyone and welcome to handmade

2
00:00:02,669 --> 00:00:07,199
hero show recode a complete game live on

3
00:00:04,589 --> 00:00:10,970
stream before we get started today just

4
00:00:07,200 --> 00:00:10,970
really briefly wanted to mention that

5
00:00:11,160 --> 00:00:17,039
abner whom many of you may know he was

6
00:00:15,570 --> 00:00:18,810
kind of the original organizer of

7
00:00:17,039 --> 00:00:21,689
handmade Network which is the place

8
00:00:18,809 --> 00:00:23,759
where a lot of projects like for coder

9
00:00:21,689 --> 00:00:26,849
the editor reason stream remedy the

10
00:00:23,760 --> 00:00:29,010
debugger we used on stream a lot of

11
00:00:26,849 --> 00:00:32,880
those projects have a home at a place

12
00:00:29,010 --> 00:00:36,359
called handmade Network and he was the

13
00:00:32,880 --> 00:00:39,050
original organizer of that project he

14
00:00:36,359 --> 00:00:42,390
worked with a couple people involved

15
00:00:39,049 --> 00:00:44,549
drone and Andrew and there's a bunch of

16
00:00:42,390 --> 00:00:47,299
people who made it happen but he's you

17
00:00:44,549 --> 00:00:51,988
know Andrews I'm sorry Abner's kind of a

18
00:00:47,299 --> 00:00:57,359
organization kind of guy and so he has

19
00:00:51,988 --> 00:00:59,009
decided to run a conference and it's

20
00:00:57,359 --> 00:01:02,039
gonna be in Seattle and it's

21
00:00:59,009 --> 00:01:03,960
specifically for the sorts of folks who

22
00:01:02,039 --> 00:01:07,349
like low-level programming like who

23
00:01:03,960 --> 00:01:08,728
watch this stream and he has announced

24
00:01:07,349 --> 00:01:11,069
the date

25
00:01:08,728 --> 00:01:15,868
it's November 16th and again that's

26
00:01:11,069 --> 00:01:16,949
that's in Seattle so if you are interest

27
00:01:15,868 --> 00:01:18,599
you think you might be interested in

28
00:01:16,950 --> 00:01:20,960
this there's obviously he hasn't really

29
00:01:18,599 --> 00:01:23,759
posted much information about it so

30
00:01:20,959 --> 00:01:26,969
you'll probably seeing some posts later

31
00:01:23,759 --> 00:01:29,728
on about you know what's gonna be like

32
00:01:26,969 --> 00:01:30,750
and you know who's gonna be talking if

33
00:01:29,728 --> 00:01:32,188
there's talks or whatever you know I

34
00:01:30,750 --> 00:01:33,959
don't know exactly how he's organizing

35
00:01:32,188 --> 00:01:36,449
it but whatever he ends up putting

36
00:01:33,959 --> 00:01:38,158
together for the program that hasn't

37
00:01:36,450 --> 00:01:40,290
been announced yet but if this is your

38
00:01:38,159 --> 00:01:43,890
kind of thing you might want to go ahead

39
00:01:40,290 --> 00:01:45,780
and make a mental note to keep or go

40
00:01:43,890 --> 00:01:49,469
into your calendar and mark November

41
00:01:45,780 --> 00:01:51,599
16th as something to to leave open and

42
00:01:49,469 --> 00:01:54,840
you can also go to this website that he

43
00:01:51,599 --> 00:01:57,569
is set up handmade Seattle comm and you

44
00:01:54,840 --> 00:02:01,350
can put your email address in here too

45
00:01:57,569 --> 00:02:03,929
and click on that notify button to be a

46
00:02:01,349 --> 00:02:05,728
part of the mailings which will say you

47
00:02:03,930 --> 00:02:09,060
know for example when there is more

48
00:02:05,728 --> 00:02:10,860
program information and talking about

49
00:02:09,060 --> 00:02:13,890
sort of what the conference will entail

50
00:02:10,860 --> 00:02:15,750
you can get mailed and and also when to

51
00:02:13,889 --> 00:02:17,250
gonna say like you can't buy tickets to

52
00:02:15,750 --> 00:02:19,740
it yet or anything like that either so

53
00:02:17,250 --> 00:02:21,780
all that information is forthcoming and

54
00:02:19,740 --> 00:02:23,640
if you're coming to the conference I

55
00:02:21,780 --> 00:02:26,640
would highly recommend going handmade CL

56
00:02:23,639 --> 00:02:28,769
comm make note of that date and put your

57
00:02:26,639 --> 00:02:33,089
email address in here and then Abner

58
00:02:28,770 --> 00:02:34,290
will send those notifications out and

59
00:02:33,090 --> 00:02:36,840
you can take a look the conference in

60
00:02:34,289 --> 00:02:39,989
more detail once he's posted the sort of

61
00:02:36,840 --> 00:02:42,539
the need agree but yeah just want to

62
00:02:39,989 --> 00:02:43,800
make everyone aware of that it's again

63
00:02:42,539 --> 00:02:45,889
it's the cut it's a conference

64
00:02:43,800 --> 00:02:50,670
specifically for the type of people who

65
00:02:45,889 --> 00:02:52,469
like to do low level programming like to

66
00:02:50,669 --> 00:02:53,939
care about performance like to care

67
00:02:52,469 --> 00:02:56,219
about the quality of the code that they

68
00:02:53,939 --> 00:02:59,759
write and if you're watching this show

69
00:02:56,219 --> 00:03:03,509
that's probably you so if you're

70
00:02:59,759 --> 00:03:05,250
interested in get together of that

71
00:03:03,509 --> 00:03:08,189
nature this is this is something to

72
00:03:05,250 --> 00:03:11,550
check out I will probably mention it

73
00:03:08,189 --> 00:03:14,430
again on the stream once there's more

74
00:03:11,550 --> 00:03:15,930
information but obviously not everyone

75
00:03:14,430 --> 00:03:17,010
catches every stream so I thought I

76
00:03:15,930 --> 00:03:20,489
would just bring it to your attention

77
00:03:17,009 --> 00:03:22,109
now for those folks watching and again

78
00:03:20,489 --> 00:03:23,969
just so you can keep your calendar free

79
00:03:22,110 --> 00:03:29,340
if that's something you might like don't

80
00:03:23,969 --> 00:03:32,459
plan any mid-november vacations just yet

81
00:03:29,340 --> 00:03:34,049
stay tuned to abner stuff for a little

82
00:03:32,459 --> 00:03:41,310
bit more information coming down the

83
00:03:34,049 --> 00:03:47,250
pipe also again that's handmade Seattle

84
00:03:41,310 --> 00:03:50,129
the old handmade con domain name I also

85
00:03:47,250 --> 00:03:52,379
remapped here so that we will be keeping

86
00:03:50,129 --> 00:03:55,439
an unofficial conference list so you can

87
00:03:52,379 --> 00:03:58,530
see it's showed up there and so we will

88
00:03:55,439 --> 00:04:00,659
try - generally speaking keep people

89
00:03:58,530 --> 00:04:03,989
appraised of if there are conferences

90
00:04:00,659 --> 00:04:07,079
for low level programming that people

91
00:04:03,989 --> 00:04:10,079
let us know about we will try to keep

92
00:04:07,079 --> 00:04:12,000
them listed here obviously we don't

93
00:04:10,079 --> 00:04:13,469
expect there to be too many low level

94
00:04:12,000 --> 00:04:16,019
programming it's not exactly the kind of

95
00:04:13,469 --> 00:04:19,470
thing that most people care about these

96
00:04:16,019 --> 00:04:20,788
days but for those who do we remap that

97
00:04:19,470 --> 00:04:22,730
as well so if you do go to handmade

98
00:04:20,788 --> 00:04:26,550
con-com or

99
00:04:22,730 --> 00:04:31,710
or handmade batch Seattle dot was it

100
00:04:26,550 --> 00:04:34,050
calm or door yeah yeah it'll calm yeah

101
00:04:31,709 --> 00:04:36,719
or handmade Seattle calm you can get

102
00:04:34,050 --> 00:04:40,560
that information and I think there's

103
00:04:36,720 --> 00:04:42,630
also a little newsfeed here which has

104
00:04:40,560 --> 00:04:44,910
like a little bit more information like

105
00:04:42,629 --> 00:04:47,459
where the venue is sort of what the

106
00:04:44,910 --> 00:04:50,250
layout looks like you can see it here so

107
00:04:47,459 --> 00:04:52,620
I guess the the plan is gonna be to have

108
00:04:50,250 --> 00:04:54,509
sort of booths for people doing

109
00:04:52,620 --> 00:04:56,069
low-level software stuff just to give

110
00:04:54,509 --> 00:04:57,329
demos and you know show what they've

111
00:04:56,069 --> 00:05:00,418
been working on that kind of thing

112
00:04:57,329 --> 00:05:02,430
and then I guess there's a set up for

113
00:05:00,418 --> 00:05:05,639
doing presentations and that's sort of

114
00:05:02,430 --> 00:05:08,129
stuff so again details will be

115
00:05:05,639 --> 00:05:11,479
forthcoming once there's a more concrete

116
00:05:08,129 --> 00:05:14,490
program for the conference but for now

117
00:05:11,480 --> 00:05:16,020
just keep the keep the slot free if it's

118
00:05:14,490 --> 00:05:17,900
something you're interested in and maybe

119
00:05:16,019 --> 00:05:20,849
just poke your email address into that

120
00:05:17,899 --> 00:05:22,409
into that mailing list so that you can

121
00:05:20,850 --> 00:05:24,660
get the information as soon as it's

122
00:05:22,410 --> 00:05:27,900
available and get notified for tickets

123
00:05:24,660 --> 00:05:30,860
it's not a huge venue it's similar in

124
00:05:27,899 --> 00:05:34,199
size to the first handmade con I think

125
00:05:30,860 --> 00:05:35,639
so depending on what the depending on

126
00:05:34,199 --> 00:05:39,360
what the demand is for tickets it that

127
00:05:35,639 --> 00:05:42,329
one it could sell out I think if it sold

128
00:05:39,360 --> 00:05:43,710
as many tickets as hand VidCon to sold

129
00:05:42,329 --> 00:05:47,399
it would probably would probably be at

130
00:05:43,709 --> 00:05:48,870
capacity or over capacity so so you

131
00:05:47,399 --> 00:05:50,969
probably do want if it's something issue

132
00:05:48,870 --> 00:05:52,550
you want to get on that early it could

133
00:05:50,970 --> 00:05:54,510
possibly sell out I don't know cuz I

134
00:05:52,550 --> 00:05:56,759
don't remember exactly what the capacity

135
00:05:54,509 --> 00:05:59,339
was when Abner's talking about it but it

136
00:05:56,759 --> 00:06:01,949
sounded like it was only about as much

137
00:05:59,339 --> 00:06:03,869
as the first handmade con and him back

138
00:06:01,949 --> 00:06:09,569
onto I think sold more than the capacity

139
00:06:03,870 --> 00:06:09,840
of that so just keeping that in mind all

140
00:06:09,569 --> 00:06:12,120
right

141
00:06:09,839 --> 00:06:16,199
all that being said let's go ahead and

142
00:06:12,120 --> 00:06:20,220
get started today we basically put the

143
00:06:16,199 --> 00:06:25,288
structural sort of scaffolding in place

144
00:06:20,220 --> 00:06:27,840
for doing sound we had already

145
00:06:25,288 --> 00:06:30,449
implemented that on handmade hero and so

146
00:06:27,839 --> 00:06:33,269
we have all the code that we need but

147
00:06:30,449 --> 00:06:35,279
we've added the notion of tags files as

148
00:06:33,269 --> 00:06:35,849
a way of listing all the stuff that we

149
00:06:35,279 --> 00:06:38,759
want

150
00:06:35,850 --> 00:06:40,950
into the game for shipping and it's a

151
00:06:38,759 --> 00:06:44,099
way of marking it up with the

152
00:06:40,949 --> 00:06:46,889
information that we want it to have and

153
00:06:44,100 --> 00:06:50,460
so since we've done that I just want to

154
00:06:46,889 --> 00:06:52,709
merge that wave processing code into the

155
00:06:50,459 --> 00:06:56,519
standard path so that people can hot

156
00:06:52,709 --> 00:06:59,599
load WAV file entries and have them

157
00:06:56,519 --> 00:07:01,859
listed in the same sort of manifest that

158
00:06:59,600 --> 00:07:04,050
everything else gets listed in for art

159
00:07:01,860 --> 00:07:06,210
it just makes it nice and simple and

160
00:07:04,050 --> 00:07:08,370
clean so you don't have to think about

161
00:07:06,209 --> 00:07:10,079
how to produce multiple assets different

162
00:07:08,370 --> 00:07:13,379
ways or that there's a big difference

163
00:07:10,079 --> 00:07:14,909
between art assets and sound assets I'd

164
00:07:13,379 --> 00:07:17,819
rather just have it be nice and uniform

165
00:07:14,910 --> 00:07:19,470
and easy to understand especially since

166
00:07:17,819 --> 00:07:21,060
this is an educational project and

167
00:07:19,470 --> 00:07:23,490
people probably do want to put their own

168
00:07:21,060 --> 00:07:25,530
art assets in eventually and stuff like

169
00:07:23,490 --> 00:07:27,720
that to add things to the game or you

170
00:07:25,529 --> 00:07:29,669
know anything like that so I feel like

171
00:07:27,720 --> 00:07:31,040
it's worth money sometime in there just

172
00:07:29,670 --> 00:07:35,699
making sure that all that stuff works

173
00:07:31,040 --> 00:07:39,660
relatively well now if I go ahead and

174
00:07:35,699 --> 00:07:42,810
open up the import layer and I open up

175
00:07:39,660 --> 00:07:45,360
the wave layer which has the parse wave

176
00:07:42,810 --> 00:07:51,120
function in it what I would like to do

177
00:07:45,360 --> 00:07:55,530
here okay can we note midlow can we note

178
00:07:51,120 --> 00:07:56,360
this part of the stream midlow are you

179
00:07:55,529 --> 00:07:59,389
out there

180
00:07:56,360 --> 00:08:06,199
can we note just what just happened

181
00:07:59,389 --> 00:08:09,089
there was a green flash on the for coder

182
00:08:06,199 --> 00:08:11,219
the green flash is something that we put

183
00:08:09,089 --> 00:08:13,949
in specifically to show a render buffer

184
00:08:11,220 --> 00:08:18,300
overflow so I want to be able to send

185
00:08:13,949 --> 00:08:22,050
this to alpha so whatever that timestamp

186
00:08:18,300 --> 00:08:24,930
was for the green flash I need to send

187
00:08:22,050 --> 00:08:26,370
it to Alan because I that indicates that

188
00:08:24,930 --> 00:08:28,139
the thing I was talking about on the for

189
00:08:26,370 --> 00:08:34,370
coder Jam about render buffer overflow

190
00:08:28,139 --> 00:08:34,370
did happen actually so that's good

191
00:08:37,710 --> 00:08:42,100
so hopefully we can get that marked I

192
00:08:40,269 --> 00:08:45,809
don't know what the stream time is right

193
00:08:42,100 --> 00:08:48,279
now thanks me blue thank you very much

194
00:08:45,809 --> 00:08:50,219
okay sorry about that that was just a

195
00:08:48,279 --> 00:08:53,769
little for coder interruption there

196
00:08:50,220 --> 00:08:56,860
anyway so what I want to do now is

197
00:08:53,769 --> 00:08:58,329
basically take the if zero block out of

198
00:08:56,860 --> 00:09:01,600
here so I want to go ahead and get rid

199
00:08:58,330 --> 00:09:02,710
of this you know sort of racer that's

200
00:09:01,600 --> 00:09:05,379
around here that was preventing this

201
00:09:02,710 --> 00:09:07,810
code from being compiled what I want to

202
00:09:05,379 --> 00:09:09,100
do is transition this code over from

203
00:09:07,809 --> 00:09:10,539
what I was doing before to basically

204
00:09:09,100 --> 00:09:13,060
doing things the way we need to do now

205
00:09:10,539 --> 00:09:14,649
but we basically want to do exactly the

206
00:09:13,059 --> 00:09:18,429
same thing as it was doing which is to

207
00:09:14,649 --> 00:09:21,819
say we want it to read a WAV file or WAV

208
00:09:18,429 --> 00:09:25,809
file parse the information in it and

209
00:09:21,820 --> 00:09:29,410
give us back a basically the blocks of

210
00:09:25,809 --> 00:09:31,809
sound samples that it uses and while

211
00:09:29,409 --> 00:09:34,659
it's doing that we don't really ever

212
00:09:31,809 --> 00:09:37,029
want to do an assertion this is file i/o

213
00:09:34,659 --> 00:09:38,679
so if it fails what I'd rather do

214
00:09:37,029 --> 00:09:41,189
because since this is in the actual game

215
00:09:38,679 --> 00:09:46,769
proper now that we have a coherent way

216
00:09:41,190 --> 00:09:51,040
of streaming errors out I would like to

217
00:09:46,769 --> 00:09:55,389
issue errors on the stream and allow

218
00:09:51,039 --> 00:09:56,980
those errors to be displayed to the

219
00:09:55,389 --> 00:09:59,049
person who did the import so if they

220
00:09:56,980 --> 00:10:00,129
know that something went horribly

221
00:09:59,049 --> 00:10:02,799
horribly wrong

222
00:10:00,129 --> 00:10:04,809
right so for example you know the

223
00:10:02,799 --> 00:10:06,129
previous way this code was working in a

224
00:10:04,809 --> 00:10:09,699
command-line utility because we didn't

225
00:10:06,129 --> 00:10:16,149
really care if you didn't input a sound

226
00:10:09,700 --> 00:10:17,980
at 48 K 16 bits per sample PCM it would

227
00:10:16,149 --> 00:10:19,209
just assert right but we don't really

228
00:10:17,980 --> 00:10:21,430
want to do that because an assert

229
00:10:19,210 --> 00:10:22,690
effectively crashes our app you know for

230
00:10:21,429 --> 00:10:25,209
all intents and persons it runs crimes

231
00:10:22,690 --> 00:10:26,800
moving to a halt if somebody was running

232
00:10:25,210 --> 00:10:29,410
the game what we would much rather have

233
00:10:26,799 --> 00:10:30,759
it do is just say hey you know some of

234
00:10:29,409 --> 00:10:33,579
those sound samples that you just tried

235
00:10:30,759 --> 00:10:35,620
to import these ones here are the wrong

236
00:10:33,580 --> 00:10:39,250
format you know you need to you need to

237
00:10:35,620 --> 00:10:40,720
go reformat them right so we'd rather be

238
00:10:39,250 --> 00:10:42,460
a little more user friendly there since

239
00:10:40,720 --> 00:10:43,990
we now have the opportunity to display

240
00:10:42,460 --> 00:10:46,930
error messages we already did that for

241
00:10:43,990 --> 00:10:49,509
the other parts of the system and so all

242
00:10:46,929 --> 00:10:50,229
of this stuff invalid channel count like

243
00:10:49,509 --> 00:10:52,990
the same

244
00:10:50,230 --> 00:10:55,090
per second format tag the whether not

245
00:10:52,990 --> 00:10:57,879
the headers are right you know all that

246
00:10:55,090 --> 00:10:59,889
stuff should now be handled as errors

247
00:10:57,879 --> 00:11:01,929
that we expect to encounter sometimes

248
00:10:59,889 --> 00:11:03,309
when someone gives us a bad file and

249
00:11:01,929 --> 00:11:05,709
we'd like to just print out what the

250
00:11:03,309 --> 00:11:07,779
problem was we don't have to be hyper

251
00:11:05,710 --> 00:11:10,060
aggressive if someone feeds us truly

252
00:11:07,779 --> 00:11:11,889
corrupted garbage and we crash I don't

253
00:11:10,059 --> 00:11:13,599
mind this isn't supposed to be like a

254
00:11:11,889 --> 00:11:15,759
secure system or anything like that

255
00:11:13,600 --> 00:11:17,980
but we might as well take the basic

256
00:11:15,759 --> 00:11:20,889
errors we expect to see turn them into

257
00:11:17,980 --> 00:11:23,710
printout that an artist or a sound

258
00:11:20,889 --> 00:11:25,360
designer would understand and go from

259
00:11:23,710 --> 00:11:27,879
there right that's our that's our

260
00:11:25,360 --> 00:11:30,610
primary goal for getting rid of those as

261
00:11:27,879 --> 00:11:32,019
well all right so if we take a look what

262
00:11:30,610 --> 00:11:33,580
happens when we come in to parse Wow if

263
00:11:32,019 --> 00:11:35,590
we've got a stream set up here where we

264
00:11:33,580 --> 00:11:36,940
can start reading from it the first

265
00:11:35,590 --> 00:11:38,649
thing that we wanted to do will work

266
00:11:36,940 --> 00:11:42,310
just fine which is we want to consume

267
00:11:38,649 --> 00:11:43,659
one of these wave header structures and

268
00:11:42,309 --> 00:11:46,149
then like I said really what we want to

269
00:11:43,659 --> 00:11:48,490
do now is just get rid of these

270
00:11:46,149 --> 00:11:51,039
assertions and turn them into something

271
00:11:48,490 --> 00:11:53,860
that actually just looks to see what it

272
00:11:51,039 --> 00:11:56,439
was that we got back and issues an error

273
00:11:53,860 --> 00:11:59,050
in the case where we don't get what we

274
00:11:56,440 --> 00:12:00,550
expect so assuming that the header looks

275
00:11:59,049 --> 00:12:03,339
like it has the things in it that we

276
00:12:00,549 --> 00:12:05,139
want we're gonna call that good and if

277
00:12:03,340 --> 00:12:07,330
it doesn't we're gonna issue an error

278
00:12:05,139 --> 00:12:11,679
now this is similar to what we did in

279
00:12:07,330 --> 00:12:13,810
the PNG so you can see in the PNG right

280
00:12:11,679 --> 00:12:17,859
that it's got like errors that that come

281
00:12:13,809 --> 00:12:19,959
out here and that error when we do like

282
00:12:17,860 --> 00:12:22,180
a particular call we pass an Airstream

283
00:12:19,960 --> 00:12:25,090
to it so you can see what's going on in

284
00:12:22,179 --> 00:12:27,609
here when this call gets made and you

285
00:12:25,090 --> 00:12:29,889
get the stream file there what's gonna

286
00:12:27,610 --> 00:12:31,659
happen is whenever we want to print out

287
00:12:29,889 --> 00:12:33,669
info like if we're just trying to dump

288
00:12:31,659 --> 00:12:35,620
information which is in case we're using

289
00:12:33,669 --> 00:12:37,029
this as part of a command line utility

290
00:12:35,620 --> 00:12:38,980
or something like that it goes to the

291
00:12:37,029 --> 00:12:41,519
info but when we have an error when yes

292
00:12:38,980 --> 00:12:43,779
thing that actually failed right okay

293
00:12:41,519 --> 00:12:46,240
then what we want to do is use the dot

294
00:12:43,779 --> 00:12:49,360
error stream right and that dot error

295
00:12:46,240 --> 00:12:51,639
stream I don't actually know what comp

296
00:12:49,360 --> 00:12:54,700
date is that just a renaming of I assume

297
00:12:51,639 --> 00:12:57,220
that's what file is but renamed yeah you

298
00:12:54,700 --> 00:12:59,290
can see here that it basically says hey

299
00:12:57,220 --> 00:13:02,310
I'm gonna take that file error stream

300
00:12:59,289 --> 00:13:02,309
and make a

301
00:13:06,309 --> 00:13:10,609
I'm going to make it onto a memory I'm

302
00:13:08,750 --> 00:13:12,740
gonna use that file Airstream as the

303
00:13:10,610 --> 00:13:15,080
error output for it right

304
00:13:12,740 --> 00:13:18,230
so anytime we're doing something with

305
00:13:15,080 --> 00:13:21,259
this file bit here which is the same as

306
00:13:18,230 --> 00:13:23,029
getting passed into our web parser we

307
00:13:21,259 --> 00:13:25,549
should be able to say if we want to

308
00:13:23,029 --> 00:13:27,350
output an error no no worries

309
00:13:25,549 --> 00:13:30,409
all we have to do is just say like the

310
00:13:27,350 --> 00:13:32,360
error stream that we were given as part

311
00:13:30,409 --> 00:13:34,250
of this stream so when we're parsing

312
00:13:32,360 --> 00:13:35,840
this stream if we see an error in the

313
00:13:34,250 --> 00:13:37,549
stream we send it to this other stream

314
00:13:35,840 --> 00:13:39,620
right it's sort of saying like when

315
00:13:37,549 --> 00:13:42,319
you're parsing this stream errors for it

316
00:13:39,620 --> 00:13:44,419
can go here just a convenience Abunda

317
00:13:42,320 --> 00:13:50,240
knows two things together we can say

318
00:13:44,419 --> 00:13:54,409
like error unable to parse wave header

319
00:13:50,240 --> 00:13:55,190
right and again we don't really know

320
00:13:54,409 --> 00:13:57,019
what that means

321
00:13:55,190 --> 00:14:00,080
right we have no idea what's actually

322
00:13:57,019 --> 00:14:02,029
going on there and it's okay like we

323
00:14:00,080 --> 00:14:04,040
only need to understand the kinds of

324
00:14:02,029 --> 00:14:05,449
wave files we expect to see so if

325
00:14:04,039 --> 00:14:06,740
there's some other kind that someone's

326
00:14:05,450 --> 00:14:10,660
trying to import it's not our problem

327
00:14:06,740 --> 00:14:10,659
right we're not a sound editing package

328
00:14:11,289 --> 00:14:15,799
we don't have to try and support all

329
00:14:13,460 --> 00:14:18,620
kinds of crazy formats we can just look

330
00:14:15,799 --> 00:14:20,839
at the basic ones that we want now the

331
00:14:18,620 --> 00:14:22,789
same thing is going to happen here so

332
00:14:20,840 --> 00:14:24,259
what we want to do instead again instead

333
00:14:22,789 --> 00:14:28,870
of these assertions is we want to have a

334
00:14:24,259 --> 00:14:32,590
notion here of like format okay

335
00:14:28,870 --> 00:14:35,539
right and we want to basically have

336
00:14:32,590 --> 00:14:37,340
something in here that's doing the check

337
00:14:35,539 --> 00:14:41,089
and says whether the format's okay or

338
00:14:37,340 --> 00:14:44,509
not right so when we encounter a wave

339
00:14:41,090 --> 00:14:48,220
chunk format field what we want to do is

340
00:14:44,509 --> 00:14:48,220
do like an if here oops

341
00:14:50,609 --> 00:14:57,160
that was a bad taste there we go um so

342
00:14:54,220 --> 00:14:59,019
we want to do is turn this check into

343
00:14:57,159 --> 00:15:05,198
something that says look if all of these

344
00:14:59,019 --> 00:15:11,589
things turn out to be true right like

345
00:15:05,198 --> 00:15:14,978
that so if the format's PCM if the

346
00:15:11,589 --> 00:15:16,839
samples per second is 48 K and the bits

347
00:15:14,979 --> 00:15:19,359
per sample is 16 then this is the format

348
00:15:16,839 --> 00:15:21,789
for sound that we expect we also check

349
00:15:19,359 --> 00:15:23,019
the block alignment because we don't

350
00:15:21,788 --> 00:15:30,149
actually support multiplying length we

351
00:15:23,019 --> 00:15:33,399
could support more of those but you know

352
00:15:30,149 --> 00:15:36,220
six of one half dozen or so anyway if we

353
00:15:33,399 --> 00:15:38,859
need to we will but so assuming that the

354
00:15:36,220 --> 00:15:41,139
format is what we expect we're good to

355
00:15:38,859 --> 00:15:43,538
go so we can say like format okay equals

356
00:15:41,139 --> 00:15:45,428
true we can say that the channel count

357
00:15:43,538 --> 00:15:49,119
equals however many channels it said

358
00:15:45,428 --> 00:15:51,639
that there were and so once we know that

359
00:15:49,119 --> 00:15:56,019
format we're good to go if it's not the

360
00:15:51,639 --> 00:15:59,019
case we can air out like we were before

361
00:15:56,019 --> 00:16:02,438
but we can also print out for example

362
00:15:59,019 --> 00:16:06,068
into the Airstream what the offending

363
00:16:02,438 --> 00:16:07,118
settings are just so people know might

364
00:16:06,068 --> 00:16:10,178
make it a little bit easier to see

365
00:16:07,119 --> 00:16:11,528
what's going wrong so we can say into

366
00:16:10,178 --> 00:16:18,909
the file Airstream you can just be like

367
00:16:11,528 --> 00:16:22,629
its Airstream unsupported WAV format you

368
00:16:18,909 --> 00:16:25,149
know percent u comma percent u comma

369
00:16:22,629 --> 00:16:31,678
percent u common percent you kind of a

370
00:16:25,149 --> 00:16:31,678
thing and maybe I'll label these so like

371
00:16:32,999 --> 00:16:42,579
maybe something like this that's the

372
00:16:36,308 --> 00:16:47,009
format here's the Hertz here's the bits

373
00:16:42,578 --> 00:16:47,008
per sample and here's the alignment and

374
00:16:47,908 --> 00:16:52,869
then I can just print these values out

375
00:16:50,708 --> 00:16:56,618
and that way if we do encounter waves

376
00:16:52,869 --> 00:17:00,548
that are set to something wrong this

377
00:16:56,619 --> 00:17:03,259
would tell you what the setting actually

378
00:17:00,548 --> 00:17:04,849
was right so that you would know that

379
00:17:03,259 --> 00:17:06,799
you could at least eyeball it and say oh

380
00:17:04,849 --> 00:17:10,730
it's supposed to be 4800 and you know

381
00:17:06,799 --> 00:17:13,099
the thing reported 44 you know that kind

382
00:17:10,730 --> 00:17:15,009
of thing so let's just go ahead and dump

383
00:17:13,099 --> 00:17:20,829
those values out here so here they are

384
00:17:15,009 --> 00:17:25,730
and samples per sec its per sample and

385
00:17:20,829 --> 00:17:28,699
block the line and then we will you know

386
00:17:25,730 --> 00:17:31,730
have an easier way to see that if we see

387
00:17:28,700 --> 00:17:34,610
wave chunk ID data that's basically

388
00:17:31,730 --> 00:17:42,589
telling us what we actually want to know

389
00:17:34,609 --> 00:17:46,369
there the problem here is we're now at

390
00:17:42,589 --> 00:17:49,669
the point where the Rif iteration part

391
00:17:46,369 --> 00:17:53,089
of things comes in and we want some way

392
00:17:49,670 --> 00:17:57,140
of using we probably want the equivalent

393
00:17:53,089 --> 00:18:00,519
of the Rif iterator to access the data

394
00:17:57,140 --> 00:18:05,330
in here and so I don't actually know

395
00:18:00,519 --> 00:18:07,430
again exactly how we want to do that we

396
00:18:05,329 --> 00:18:10,639
have to go look and see how we would

397
00:18:07,430 --> 00:18:12,769
like the interface to go and whether it

398
00:18:10,640 --> 00:18:15,470
should sort of be a part of the stream

399
00:18:12,769 --> 00:18:17,930
API or not I think ideally I would like

400
00:18:15,470 --> 00:18:19,370
it to be but you know we need to play

401
00:18:17,930 --> 00:18:21,110
around with that so I'm gonna leave that

402
00:18:19,369 --> 00:18:24,199
and just assume that we will mimic this

403
00:18:21,109 --> 00:18:26,539
API one way or the other and I'm gonna

404
00:18:24,200 --> 00:18:29,450
proceed down to the next part of the

405
00:18:26,539 --> 00:18:31,460
code so in here we've got an assertion

406
00:18:29,450 --> 00:18:34,250
where we've got channel count and sample

407
00:18:31,460 --> 00:18:36,319
data and so what that is doing is saying

408
00:18:34,250 --> 00:18:40,849
let's make sure that we got both this

409
00:18:36,319 --> 00:18:46,819
and this right now maybe one thing we

410
00:18:40,849 --> 00:18:48,799
could do is just say you know maybe we

411
00:18:46,819 --> 00:18:50,419
can use that as good enough I was gonna

412
00:18:48,799 --> 00:18:53,359
have that format okay in there but maybe

413
00:18:50,420 --> 00:18:56,050
we can just use this and so we can do

414
00:18:53,359 --> 00:18:58,939
here say look if both of these are okay

415
00:18:56,049 --> 00:19:01,339
then we can go ahead and do the parsing

416
00:18:58,940 --> 00:19:03,710
if they're not okay then we're back to

417
00:19:01,339 --> 00:19:09,099
another one of these sort of air

418
00:19:03,710 --> 00:19:12,100
conditions so I can say you know error

419
00:19:09,099 --> 00:19:12,099
couldn't

420
00:19:12,819 --> 00:19:23,139
I guess like unrecognized wave either

421
00:19:20,230 --> 00:19:26,829
way out because basically if we you know

422
00:19:23,140 --> 00:19:29,650
if we get here then the problem is we

423
00:19:26,829 --> 00:19:33,069
can't actually know once we get to this

424
00:19:29,650 --> 00:19:35,410
point we don't know like what kinds of

425
00:19:33,069 --> 00:19:37,839
other wave chunks might be in wave files

426
00:19:35,410 --> 00:19:40,390
right there's probably extended versions

427
00:19:37,839 --> 00:19:42,639
of these things that don't use either

428
00:19:40,390 --> 00:19:44,530
that maybe the format or the data or

429
00:19:42,640 --> 00:19:46,360
both and they've got other chunks that

430
00:19:44,529 --> 00:19:49,389
specify information that we just won't

431
00:19:46,359 --> 00:19:51,490
understand and so when somebody gives us

432
00:19:49,390 --> 00:19:54,250
one of those that doesn't have you know

433
00:19:51,490 --> 00:19:56,829
everything that's the right exactly way

434
00:19:54,250 --> 00:19:58,690
we want we're not gonna try and figure

435
00:19:56,829 --> 00:20:00,069
out what's going on we're just gonna air

436
00:19:58,690 --> 00:20:01,509
out and say look we don't understand

437
00:20:00,069 --> 00:20:04,179
this wave file save it in a simpler

438
00:20:01,509 --> 00:20:06,160
format use a different tool to convert

439
00:20:04,180 --> 00:20:09,009
it or who knows what but we need

440
00:20:06,160 --> 00:20:10,630
something more basic right but assuming

441
00:20:09,009 --> 00:20:12,519
that we do get both the sample data and

442
00:20:10,630 --> 00:20:14,800
the channel count then we can sort of go

443
00:20:12,519 --> 00:20:17,019
from there if you look at what's going

444
00:20:14,799 --> 00:20:18,599
on here you can see we're sort of

445
00:20:17,019 --> 00:20:21,190
starting to set like result information

446
00:20:18,599 --> 00:20:23,289
that result is one of these sound 16

447
00:20:21,190 --> 00:20:26,259
things we can still basically do exactly

448
00:20:23,289 --> 00:20:26,829
what we're doing here to set the channel

449
00:20:26,259 --> 00:20:29,609
count

450
00:20:26,829 --> 00:20:32,230
we just set it to exactly what it says

451
00:20:29,609 --> 00:20:35,289
to figure out the sample count we have

452
00:20:32,230 --> 00:20:39,819
to do a divide because it looks like we

453
00:20:35,289 --> 00:20:41,980
don't ever the wave data block just

454
00:20:39,819 --> 00:20:43,720
gives us a size it doesn't tell us how

455
00:20:41,980 --> 00:20:45,910
many samples there are so it assumes

456
00:20:43,720 --> 00:20:48,130
that we're gonna do a divide to figure

457
00:20:45,910 --> 00:20:52,330
out how big the the data that's in there

458
00:20:48,130 --> 00:20:54,790
is so that's what we have to do so when

459
00:20:52,329 --> 00:21:00,309
we do this you can see here we've got a

460
00:20:54,789 --> 00:21:02,680
channel count like one two thing I I

461
00:21:00,309 --> 00:21:04,029
don't love that I feel like we should

462
00:21:02,680 --> 00:21:07,539
just go ahead and support arbitrary

463
00:21:04,029 --> 00:21:09,910
numbers of samples you know it's

464
00:21:07,539 --> 00:21:12,099
channels because it's not particularly

465
00:21:09,910 --> 00:21:14,370
hard for us to do that and so if you

466
00:21:12,099 --> 00:21:16,750
look at what's going on here you can see

467
00:21:14,369 --> 00:21:21,069
for whatever reason we kind of do

468
00:21:16,750 --> 00:21:23,019
arbitrary garbage here where we are like

469
00:21:21,069 --> 00:21:27,789
patting out the end of

470
00:21:23,019 --> 00:21:30,759
thing two blocks of eight looks like I

471
00:21:27,789 --> 00:21:32,859
think that's just in case we want to

472
00:21:30,759 --> 00:21:35,039
load them sim D wise you know what I

473
00:21:32,859 --> 00:21:35,039
mean

474
00:21:36,029 --> 00:21:42,460
none of that is relevant to us I don't

475
00:21:39,160 --> 00:21:46,300
think I don't think we actually care

476
00:21:42,460 --> 00:21:48,759
about that and padding we definitely

477
00:21:46,299 --> 00:21:49,869
don't care about either and the reason

478
00:21:48,759 --> 00:21:52,420
that I say I don't think they care about

479
00:21:49,869 --> 00:21:54,750
that is because our model for asset

480
00:21:52,420 --> 00:21:58,390
loading now is pretty reasonable and

481
00:21:54,750 --> 00:22:00,549
when we load in we could do the padding

482
00:21:58,390 --> 00:22:02,530
on load right because we're gonna load

483
00:22:00,549 --> 00:22:05,200
into a block of memory that's designed

484
00:22:02,529 --> 00:22:07,539
to be handed to our mixer and so we

485
00:22:05,200 --> 00:22:11,080
don't actually have to do padding into

486
00:22:07,539 --> 00:22:13,779
the actual destination that seems like

487
00:22:11,079 --> 00:22:17,309
it's totally unnecessary so any kind of

488
00:22:13,779 --> 00:22:20,079
like padding like that just seems dumb

489
00:22:17,309 --> 00:22:23,049
and I think we'll just skip that right

490
00:22:20,079 --> 00:22:25,149
unless I can find some reason when I

491
00:22:23,049 --> 00:22:27,579
actually go to do the block based

492
00:22:25,150 --> 00:22:30,370
loading of these that makes it so that I

493
00:22:27,579 --> 00:22:33,159
can't do what I just said I'm not super

494
00:22:30,369 --> 00:22:34,929
inclined to pad the storage because

495
00:22:33,160 --> 00:22:36,700
there's no reason to pad the storage of

496
00:22:34,930 --> 00:22:41,500
the things we might as well just pad the

497
00:22:36,700 --> 00:22:43,840
in-memory version right okay so if we

498
00:22:41,500 --> 00:22:47,289
want to expand this part of the code to

499
00:22:43,839 --> 00:22:50,470
be better about actually unpacking any

500
00:22:47,289 --> 00:22:52,149
arbitrary number of channels then what

501
00:22:50,470 --> 00:22:54,069
we want to do obviously when we get the

502
00:22:52,150 --> 00:22:57,280
sample count and we do this operation

503
00:22:54,069 --> 00:23:00,099
here what we want to do is save that

504
00:22:57,279 --> 00:23:03,849
sample count right so at least we have

505
00:23:00,099 --> 00:23:05,769
that now so this basically gives us a

506
00:23:03,849 --> 00:23:07,689
way of setting all of the result stuff

507
00:23:05,769 --> 00:23:11,460
and the only thing we haven't done yet

508
00:23:07,690 --> 00:23:14,320
is is the samples part of things right

509
00:23:11,460 --> 00:23:17,220
now I think probably the easiest way to

510
00:23:14,319 --> 00:23:20,289
do this like I say is we want the code

511
00:23:17,220 --> 00:23:22,600
that's calling us to be able to think

512
00:23:20,289 --> 00:23:24,909
about these things in terms of just

513
00:23:22,599 --> 00:23:27,969
straight-up samples that are D

514
00:23:24,910 --> 00:23:30,790
interleaved by default I believe the way

515
00:23:27,970 --> 00:23:34,259
the WAV format will work and you can see

516
00:23:30,789 --> 00:23:37,259
us doing the D multiplex here actually

517
00:23:34,259 --> 00:23:37,259
right

518
00:23:37,759 --> 00:23:43,069
by default what happens I believe is

519
00:23:40,489 --> 00:23:46,100
they come in like order of channels

520
00:23:43,069 --> 00:23:47,839
first then sample so it's like if you

521
00:23:46,099 --> 00:23:50,028
know if you had a stereo sound it would

522
00:23:47,839 --> 00:23:51,589
be like sample for a Channel Zero sample

523
00:23:50,028 --> 00:23:53,659
of channel one sample for Channel Zero

524
00:23:51,589 --> 00:23:57,138
sample channel one right so they're

525
00:23:53,659 --> 00:24:00,440
interleaved and all of the samples that

526
00:23:57,138 --> 00:24:03,498
you would want for a given specific

527
00:24:00,440 --> 00:24:06,830
sample each channel sample are all

528
00:24:03,499 --> 00:24:09,679
packed together I don't you know we're

529
00:24:06,829 --> 00:24:12,888
not gonna want that I don't think you

530
00:24:09,679 --> 00:24:24,048
rarely do you want things organized that

531
00:24:12,888 --> 00:24:29,678
way well you know I say that and as I'm

532
00:24:24,048 --> 00:24:29,679
saying that I'm actually probably wrong

533
00:24:32,288 --> 00:24:38,239
if you think about what's you know what

534
00:24:34,579 --> 00:24:42,980
probably happens in the mixer is you you

535
00:24:38,239 --> 00:24:46,879
would apply all of your operations to

536
00:24:42,980 --> 00:24:50,329
one sample across all channels so you're

537
00:24:46,878 --> 00:24:53,209
probably going to do something like load

538
00:24:50,329 --> 00:24:55,428
an eight wide float register with all of

539
00:24:53,210 --> 00:24:57,669
the samples for with all of the channel

540
00:24:55,429 --> 00:25:03,470
samples for a particular sample index

541
00:24:57,669 --> 00:25:07,399
apply like the volume multiply against

542
00:25:03,470 --> 00:25:10,129
that and then continue

543
00:25:07,398 --> 00:25:13,849
so in some sense keeping them

544
00:25:10,128 --> 00:25:15,918
interleaved does seem to make a fair bit

545
00:25:13,849 --> 00:25:17,449
of sense because you're going to want

546
00:25:15,919 --> 00:25:22,999
them interleaved when you actually

547
00:25:17,450 --> 00:25:26,499
process them later right I mean you see

548
00:25:22,999 --> 00:25:30,259
what I'm saying they're the reason I'm

549
00:25:26,499 --> 00:25:33,970
hesitant to really do that is because

550
00:25:30,259 --> 00:25:37,128
most of the time you don't really do

551
00:25:33,970 --> 00:25:38,739
samples that have a check you don't

552
00:25:37,128 --> 00:25:43,118
really do sounds that have you know

553
00:25:38,739 --> 00:25:46,788
eight channels or something as the sound

554
00:25:43,118 --> 00:25:48,858
you know a 7.1 sort of thing where you

555
00:25:46,788 --> 00:25:49,750
have like eight actual channels that

556
00:25:48,858 --> 00:25:54,429
you're outputting to

557
00:25:49,750 --> 00:25:57,579
some kind of a crazy sound setup I don't

558
00:25:54,430 --> 00:26:00,340
think that usually actually has eight

559
00:25:57,579 --> 00:26:02,470
sound samples because typically you have

560
00:26:00,339 --> 00:26:05,529
two spatial eyes the sound first

561
00:26:02,470 --> 00:26:09,039
so you're usually dealing more with a

562
00:26:05,529 --> 00:26:12,359
Mont like a mono sample like a mono one

563
00:26:09,039 --> 00:26:14,769
channel and then the spatialization

564
00:26:12,359 --> 00:26:17,529
outputs what should be going to each of

565
00:26:14,769 --> 00:26:19,000
the like surround sound things because

566
00:26:17,529 --> 00:26:23,049
that's the only way you can have sounds

567
00:26:19,000 --> 00:26:25,000
move around right so sometimes you have

568
00:26:23,049 --> 00:26:27,129
particular sounds that have been

569
00:26:25,000 --> 00:26:29,529
mastered to be played and they're gonna

570
00:26:27,130 --> 00:26:31,420
they're not going to be moving or if

571
00:26:29,529 --> 00:26:32,559
they are moving it's baked in how they

572
00:26:31,420 --> 00:26:35,560
move like so they're just it's like a

573
00:26:32,559 --> 00:26:37,299
fixed thing and that would want to be

574
00:26:35,559 --> 00:26:38,679
interleaved in that way obviously

575
00:26:37,299 --> 00:26:40,839
because I think that would be the most

576
00:26:38,680 --> 00:26:42,910
efficient but just thinking it through

577
00:26:40,839 --> 00:26:44,829
I'm like is that really the case that we

578
00:26:42,910 --> 00:26:51,550
normally have because it's it kind of

579
00:26:44,829 --> 00:26:53,199
feels like it's not right and so I

580
00:26:51,549 --> 00:26:56,829
really just don't know what to make of

581
00:26:53,200 --> 00:26:59,049
that I think so I think what we really

582
00:26:56,829 --> 00:27:02,199
want to do is just have the sample so we

583
00:26:59,049 --> 00:27:04,450
would load them in we would blow out

584
00:27:02,200 --> 00:27:06,400
each you know we do a series of unpacks

585
00:27:04,450 --> 00:27:10,299
to blow them out to at least four Y

586
00:27:06,400 --> 00:27:12,460
possibly eight wide do the mix down on

587
00:27:10,299 --> 00:27:15,069
the mono to put it to each of the

588
00:27:12,460 --> 00:27:18,160
different channels and then go from

589
00:27:15,069 --> 00:27:22,539
there right so again that just really

590
00:27:18,160 --> 00:27:24,220
feels to me like not interleaved if we

591
00:27:22,539 --> 00:27:28,359
were gonna know if we knew we were

592
00:27:24,220 --> 00:27:31,450
always playing back 7.1 direct and we

593
00:27:28,359 --> 00:27:35,019
didn't have to map an N Way map to the

594
00:27:31,450 --> 00:27:37,480
different channels then sure but I just

595
00:27:35,019 --> 00:27:40,389
I don't think that's realistic I I just

596
00:27:37,480 --> 00:27:42,220
don't see us doing that so I'm thinking

597
00:27:40,390 --> 00:27:44,140
again that this just should be D

598
00:27:42,220 --> 00:27:45,670
interleaved and essentially when you

599
00:27:44,140 --> 00:27:48,100
load a sound that's got multiple

600
00:27:45,670 --> 00:27:53,920
channels in it they'll be treated as

601
00:27:48,099 --> 00:27:56,769
multiple sounds more or less right on

602
00:27:53,920 --> 00:28:00,550
the outside so you know like our sound

603
00:27:56,769 --> 00:28:02,259
assets we may literally never allow a

604
00:28:00,549 --> 00:28:05,079
multi-channel sound ass

605
00:28:02,259 --> 00:28:07,180
ever it may be that we just have if we

606
00:28:05,079 --> 00:28:08,980
want multiple channels for one of our

607
00:28:07,180 --> 00:28:11,049
sounds like for example if the music

608
00:28:08,980 --> 00:28:12,819
wants to have a left and a right channel

609
00:28:11,049 --> 00:28:14,889
or something like this then what we

610
00:28:12,819 --> 00:28:16,419
would do is have two sound assets one

611
00:28:14,890 --> 00:28:17,980
with the left tag and one with the right

612
00:28:16,420 --> 00:28:19,930
tag and you load them both and play them

613
00:28:17,980 --> 00:28:21,160
at the same time and assign their

614
00:28:19,930 --> 00:28:24,610
channel

615
00:28:21,160 --> 00:28:27,519
you know accordingly I think that's more

616
00:28:24,609 --> 00:28:29,649
what I want and again it's just sort of

617
00:28:27,519 --> 00:28:32,470
guessing based on how I see these things

618
00:28:29,650 --> 00:28:35,380
tend to go you know your mileage may

619
00:28:32,470 --> 00:28:36,789
vary think it through and think about

620
00:28:35,380 --> 00:28:38,500
what you're actually doing and you know

621
00:28:36,789 --> 00:28:40,750
the answer should become clearer as you

622
00:28:38,500 --> 00:28:41,950
go further down but that just feels like

623
00:28:40,750 --> 00:28:43,839
the right thing to me because I think

624
00:28:41,950 --> 00:28:47,049
most of our sounds are gonna be mono and

625
00:28:43,839 --> 00:28:49,359
then they'll get sort of spatialized and

626
00:28:47,049 --> 00:28:53,319
that just suggests that D interleave a

627
00:28:49,359 --> 00:28:55,539
path that expects check per channel work

628
00:28:53,319 --> 00:28:58,029
just makes a little bit more sense to me

629
00:28:55,539 --> 00:29:01,119
in terms of how things will fall out

630
00:28:58,029 --> 00:29:02,769
later down the line so once we get the

631
00:29:01,119 --> 00:29:04,389
channel in sample counting here doing

632
00:29:02,769 --> 00:29:06,490
that the interleave shouldn't be too big

633
00:29:04,390 --> 00:29:09,640
of a deal we know exactly how big of a

634
00:29:06,490 --> 00:29:13,509
sound we're gonna need we can use this

635
00:29:09,640 --> 00:29:15,850
right here to do our push right and so

636
00:29:13,509 --> 00:29:17,980
in a sense actually I guess this will

637
00:29:15,849 --> 00:29:19,419
get done for us so really I can just do

638
00:29:17,980 --> 00:29:22,000
this I can say look here it's the

639
00:29:19,420 --> 00:29:24,580
channel count here's the sample count go

640
00:29:22,000 --> 00:29:28,509
ahead and do that push for me this will

641
00:29:24,579 --> 00:29:30,759
give me exactly what I want I think so

642
00:29:28,509 --> 00:29:33,069
I can just say that arena that you gave

643
00:29:30,759 --> 00:29:35,920
me to store the thing in go ahead and

644
00:29:33,069 --> 00:29:37,839
make a block of memory in there with

645
00:29:35,920 --> 00:29:41,440
this sample count this channel count you

646
00:29:37,839 --> 00:29:42,759
can see that doing the layout there we

647
00:29:41,440 --> 00:29:45,400
can make this a little bit more

648
00:29:42,759 --> 00:29:47,470
understandable by doing this you know

649
00:29:45,400 --> 00:29:48,970
it's the same exact equation but just

650
00:29:47,470 --> 00:29:52,120
that way people can see that this is

651
00:29:48,970 --> 00:29:53,650
it's - you know what's - maybe they'd

652
00:29:52,119 --> 00:29:54,849
think that was like for stereo or

653
00:29:53,650 --> 00:29:56,050
something right if they didn't think

654
00:29:54,849 --> 00:29:59,049
about what was going with the channels

655
00:29:56,049 --> 00:30:00,849
if I put that size of in 16 there at

656
00:29:59,049 --> 00:30:03,849
least you know people maybe think oh

657
00:30:00,849 --> 00:30:05,529
right that's that's the sample format so

658
00:30:03,849 --> 00:30:07,419
that's where they're getting that from

659
00:30:05,529 --> 00:30:09,039
it just makes that line a little bit

660
00:30:07,420 --> 00:30:11,830
easier to read maybe for people coming

661
00:30:09,039 --> 00:30:14,779
at the code first time I should I should

662
00:30:11,829 --> 00:30:17,159
use our form so there's a s 16

663
00:30:14,779 --> 00:30:19,619
so coming back here we've got the wave

664
00:30:17,160 --> 00:30:22,200
chunk IDs stuff we're reading that stuff

665
00:30:19,619 --> 00:30:24,179
out coming through here got both of

666
00:30:22,200 --> 00:30:26,069
those if we you know assume we got both

667
00:30:24,180 --> 00:30:29,100
of those then we can come through and

668
00:30:26,069 --> 00:30:31,679
actually do our our reservation

669
00:30:29,099 --> 00:30:33,899
here's we now got the memory so then all

670
00:30:31,680 --> 00:30:36,450
that remains is we now have to kind of

671
00:30:33,900 --> 00:30:38,340
do that D intra leaf we don't know how

672
00:30:36,450 --> 00:30:40,620
many channels we have coming into this

673
00:30:38,339 --> 00:30:42,750
so we have to make our loops actually

674
00:30:40,619 --> 00:30:44,639
use a variable number of channels

675
00:30:42,750 --> 00:30:47,400
because channel count could be set to

676
00:30:44,640 --> 00:30:49,890
literally anything so what we want to do

677
00:30:47,400 --> 00:30:52,680
is do a sample index here where we loop

678
00:30:49,890 --> 00:30:54,980
through all the samples that we got like

679
00:30:52,680 --> 00:30:59,039
so and then we're gonna come through and

680
00:30:54,980 --> 00:31:02,670
loop over the channels like this and

681
00:30:59,039 --> 00:31:06,119
then that should give us all we need to

682
00:31:02,670 --> 00:31:09,090
do multiplex the you know 2d interleaf

683
00:31:06,119 --> 00:31:10,859
those samples as they come you can see

684
00:31:09,089 --> 00:31:12,179
here we were setting up some pointers I

685
00:31:10,859 --> 00:31:14,909
don't really care about that right now

686
00:31:12,180 --> 00:31:16,799
I'm gonna get rid of that and you can

687
00:31:14,910 --> 00:31:18,570
see what we were using for that D

688
00:31:16,799 --> 00:31:22,289
multiplexing or D interleaving planning

689
00:31:18,569 --> 00:31:24,450
I want to talk about that right here so

690
00:31:22,289 --> 00:31:29,940
what we were doing is saying oh okay

691
00:31:24,450 --> 00:31:33,029
let's grab the sample out exactly like

692
00:31:29,940 --> 00:31:41,580
this you can actually see how we were

693
00:31:33,029 --> 00:31:44,579
doing it I I guess so what we did here

694
00:31:41,579 --> 00:31:49,409
is we actually just D interleaved it in

695
00:31:44,579 --> 00:31:52,559
place right you can see us doing that

696
00:31:49,410 --> 00:31:54,990
here we would like load the source save

697
00:31:52,559 --> 00:31:57,599
it and then do it like this I don't

698
00:31:54,990 --> 00:32:00,509
really care about that we don't need to

699
00:31:57,599 --> 00:32:04,169
be conscientious about the memory use

700
00:32:00,509 --> 00:32:05,789
here so I'm not super inclined to

701
00:32:04,170 --> 00:32:08,910
Swizzle it in place I don't really see

702
00:32:05,789 --> 00:32:10,500
the point so I don't know that that just

703
00:32:08,910 --> 00:32:12,690
seems like it's not particularly

704
00:32:10,500 --> 00:32:15,990
necessary so what I think I'll do

705
00:32:12,690 --> 00:32:20,460
instead is just have like a sample

706
00:32:15,990 --> 00:32:22,440
pointer and so we'll just demultiplex it

707
00:32:20,460 --> 00:32:26,490
into you know from a source into a

708
00:32:22,440 --> 00:32:28,200
destination basically and we'll go from

709
00:32:26,490 --> 00:32:30,960
there now what I

710
00:32:28,200 --> 00:32:35,308
might do as well is I might make

711
00:32:30,960 --> 00:32:37,139
essentially an internal call here on the

712
00:32:35,308 --> 00:32:42,990
sound 16 that allows you to get out

713
00:32:37,138 --> 00:32:44,278
where each channel starts right so I

714
00:32:42,990 --> 00:32:48,538
kind of want something that's like get

715
00:32:44,278 --> 00:32:52,048
channel samples right and this way you

716
00:32:48,538 --> 00:32:55,230
can say for a given sound 16 that you

717
00:32:52,048 --> 00:32:57,720
wanted to access and you tell me which

718
00:32:55,230 --> 00:32:59,759
channel index you wanted right

719
00:32:57,720 --> 00:33:01,380
first of all I'll search for you that

720
00:32:59,759 --> 00:33:03,298
you're not asking for an out-of-bounds

721
00:33:01,380 --> 00:33:05,940
one because that's just a straight-up

722
00:33:03,298 --> 00:33:07,200
bug it shouldn't happen so we'll make

723
00:33:05,940 --> 00:33:09,120
sure if you're asking for one that's

724
00:33:07,200 --> 00:33:11,100
okay assuming that you are

725
00:33:09,119 --> 00:33:13,739
we will then say okay whatever the

726
00:33:11,099 --> 00:33:19,138
sample pointer was we're gonna give you

727
00:33:13,740 --> 00:33:21,929
back the correct block of samples in

728
00:33:19,138 --> 00:33:24,719
this overall block that's the one you

729
00:33:21,929 --> 00:33:27,440
wanted so doing that's easy we know that

730
00:33:24,720 --> 00:33:30,149
there are sample count samples per thing

731
00:33:27,440 --> 00:33:33,028
so we just need to say look whatever the

732
00:33:30,148 --> 00:33:35,788
channel index is times whatever the

733
00:33:33,028 --> 00:33:38,250
sample count is is how far we would go

734
00:33:35,788 --> 00:33:39,778
for every different one now remember we

735
00:33:38,250 --> 00:33:41,940
don't have to multiply by the size of

736
00:33:39,778 --> 00:33:44,970
this s 16 because this all of these

737
00:33:41,940 --> 00:33:47,580
pointers are already s 16 so C will

738
00:33:44,970 --> 00:33:49,829
silently do a little shift up by one in

739
00:33:47,579 --> 00:33:53,428
there for us to account for the size of

740
00:33:49,829 --> 00:33:55,829
the actual sample so I believe we should

741
00:33:53,429 --> 00:33:58,110
be done with just that go this many

742
00:33:55,829 --> 00:34:00,298
samples forward based on the channel

743
00:33:58,109 --> 00:34:02,579
index you provided because it's already

744
00:34:00,298 --> 00:34:04,648
in a 16 pointer it will move twice that

745
00:34:02,579 --> 00:34:07,949
far in actual memory space that's what

746
00:34:04,648 --> 00:34:10,409
we want so in here what we can do now is

747
00:34:07,950 --> 00:34:13,730
just say alright for every one of these

748
00:34:10,409 --> 00:34:20,068
channels we just say get channel samples

749
00:34:13,730 --> 00:34:21,719
for this channel index and for each of

750
00:34:20,068 --> 00:34:23,789
these we just would pass whatever the

751
00:34:21,719 --> 00:34:25,939
result you know that that result is this

752
00:34:23,789 --> 00:34:29,128
will give us back where we want to write

753
00:34:25,940 --> 00:34:31,980
and so we can just say alright wherever

754
00:34:29,128 --> 00:34:34,078
that block was right in whatever the

755
00:34:31,980 --> 00:34:39,210
sample is that we're talking about here

756
00:34:34,079 --> 00:34:41,960
so this sample data right I can start at

757
00:34:39,210 --> 00:34:41,960
the beginning of it

758
00:34:44,719 --> 00:34:51,059
like that and we know that this points

759
00:34:48,989 --> 00:34:53,279
to the beginning of all of the samples

760
00:34:51,059 --> 00:34:57,480
and we know they're interleaved so I

761
00:34:53,280 --> 00:34:59,810
should be able to literally just do you

762
00:34:57,480 --> 00:34:59,809
know that

763
00:34:59,900 --> 00:35:05,789
so basically get one sample at a time

764
00:35:02,909 --> 00:35:08,670
and spread it out to each channel as we

765
00:35:05,789 --> 00:35:10,559
go so take channel zero sample put it in

766
00:35:08,670 --> 00:35:12,630
there take channels one sample put it in

767
00:35:10,559 --> 00:35:15,380
there right so we're just grabbing the

768
00:35:12,630 --> 00:35:17,579
samples one at a time in order and

769
00:35:15,380 --> 00:35:21,690
diffusing you know we're scattering them

770
00:35:17,579 --> 00:35:25,069
out to each channels now unified block

771
00:35:21,690 --> 00:35:28,440
of samples in sort of just a very simple

772
00:35:25,070 --> 00:35:30,180
scatter operation taking an interleaved

773
00:35:28,440 --> 00:35:33,179
source and putting it into D interleaved

774
00:35:30,179 --> 00:35:35,730
destination we don't need this anymore

775
00:35:33,179 --> 00:35:38,369
this was the old one right so that

776
00:35:35,730 --> 00:35:40,559
should produce for us clean versions

777
00:35:38,369 --> 00:35:43,500
where each channel has its own block of

778
00:35:40,559 --> 00:35:45,360
contiguous samples ready to be accessed

779
00:35:43,500 --> 00:35:47,699
by the external code for whatever it

780
00:35:45,360 --> 00:35:50,220
wants to do now coming through here you

781
00:35:47,699 --> 00:35:52,109
can see this was there was even it to do

782
00:35:50,219 --> 00:35:54,059
here so maybe this is just I don't even

783
00:35:52,110 --> 00:35:54,900
know if this code guess what we didn't

784
00:35:54,059 --> 00:35:56,969
really even finish it

785
00:35:54,900 --> 00:35:58,920
I'd only supported one channel I guess

786
00:35:56,969 --> 00:36:03,029
you can see it cold setting the channel

787
00:35:58,920 --> 00:36:05,550
count to one and so we're already better

788
00:36:03,030 --> 00:36:07,500
than that now this was this padding and

789
00:36:05,550 --> 00:36:10,710
stuff all this stuff I should just go

790
00:36:07,500 --> 00:36:16,530
away we don't really want to do that and

791
00:36:10,710 --> 00:36:17,970
in here where we do this else was just a

792
00:36:16,530 --> 00:36:21,060
vestigial remains from the old one it's

793
00:36:17,969 --> 00:36:25,019
actually that now right and this is the

794
00:36:21,059 --> 00:36:27,449
finished routine so really it's pretty

795
00:36:25,019 --> 00:36:31,489
great right loading a sound out of a WAV

796
00:36:27,449 --> 00:36:34,649
file is is like you know here's the PNG

797
00:36:31,489 --> 00:36:38,159
right here's all the PNG code we had to

798
00:36:34,650 --> 00:36:39,690
write to load the images because of the

799
00:36:38,159 --> 00:36:43,829
you know compression I guess that's in

800
00:36:39,690 --> 00:36:47,579
there which is kind of janky it's not a

801
00:36:43,829 --> 00:36:49,289
great compression format and for the lab

802
00:36:47,579 --> 00:36:50,940
since we don't have any compression it's

803
00:36:49,289 --> 00:36:54,009
really pretty straightforward if you

804
00:36:50,940 --> 00:36:56,710
have a way to iterate riff

805
00:36:54,010 --> 00:36:59,820
so that just leaves us with one more

806
00:36:56,710 --> 00:37:05,800
task which is we have to have some way

807
00:36:59,820 --> 00:37:08,559
of doing that that riff parsing so let's

808
00:37:05,800 --> 00:37:10,390
go ahead and jump to the riff iterator

809
00:37:08,559 --> 00:37:11,969
that we had already written and just

810
00:37:10,389 --> 00:37:14,619
take a look at it here you can see it

811
00:37:11,969 --> 00:37:16,029
I'm gonna grab this code and then we're

812
00:37:14,619 --> 00:37:18,190
gonna decide what we want to do with it

813
00:37:16,030 --> 00:37:21,340
so this is the code that we wrote for

814
00:37:18,190 --> 00:37:24,460
the original asset importer obviously we

815
00:37:21,340 --> 00:37:27,309
want more or less the same thing but we

816
00:37:24,460 --> 00:37:30,849
need to think for a second about how we

817
00:37:27,309 --> 00:37:34,719
want it to look so let's take a look at

818
00:37:30,849 --> 00:37:36,519
that figure out what we want to do so if

819
00:37:34,719 --> 00:37:39,129
we're talking about a stream

820
00:37:36,519 --> 00:37:42,190
specifically and so if I go over to the

821
00:37:39,130 --> 00:37:46,390
stream set of things here you can see

822
00:37:42,190 --> 00:37:52,570
that the stream sort of expects to be

823
00:37:46,389 --> 00:37:55,750
able to operate on top of a variably

824
00:37:52,570 --> 00:37:57,850
filled chunk buffer right like it it

825
00:37:55,750 --> 00:38:01,300
doesn't assume that everything is

826
00:37:57,849 --> 00:38:04,839
contiguous so you have things like

827
00:38:01,300 --> 00:38:08,140
grabbing bits out per and so on so you

828
00:38:04,840 --> 00:38:10,030
know it looks to me like this is just

829
00:38:08,139 --> 00:38:12,460
something where the original way we were

830
00:38:10,030 --> 00:38:15,550
doing the riff Federation probably just

831
00:38:12,460 --> 00:38:17,949
is better and so I'm gonna go ahead and

832
00:38:15,550 --> 00:38:19,960
say let's keep the code the way that it

833
00:38:17,949 --> 00:38:22,059
was it just looks structurally better I

834
00:38:19,960 --> 00:38:24,820
don't think we want to support reading

835
00:38:22,059 --> 00:38:26,559
WAV files out of this stream format

836
00:38:24,820 --> 00:38:28,809
because we don't need to there's no

837
00:38:26,559 --> 00:38:30,179
reason for us to chunk them we can load

838
00:38:28,809 --> 00:38:33,519
the whole thing at once

839
00:38:30,179 --> 00:38:36,849
so I think we want to just say forget it

840
00:38:33,519 --> 00:38:42,550
like let's just make our own version

841
00:38:36,849 --> 00:38:45,460
that does use that does use the the Rif

842
00:38:42,550 --> 00:38:48,490
format reading and let's take a look at

843
00:38:45,460 --> 00:38:52,960
what that would look like so if in here

844
00:38:48,489 --> 00:38:57,489
I do a handmade riff just to put these

845
00:38:52,960 --> 00:38:59,769
in so here's our refrigerator and that

846
00:38:57,489 --> 00:39:02,979
way this can be used to read any old

847
00:38:59,769 --> 00:39:05,800
riff thing we want and so we can just

848
00:39:02,980 --> 00:39:06,588
say look there's the iterator it's just

849
00:39:05,800 --> 00:39:09,289
a pair of

850
00:39:06,588 --> 00:39:11,358
wieners it expects a contiguous thing to

851
00:39:09,289 --> 00:39:16,940
parse and then I'll pull this stuff out

852
00:39:11,358 --> 00:39:21,650
here and look and even do a little sort

853
00:39:16,940 --> 00:39:23,719
of header version where we just show how

854
00:39:21,650 --> 00:39:27,769
you might do this I don't remember what

855
00:39:23,719 --> 00:39:29,929
all the things are that we actually call

856
00:39:27,768 --> 00:39:31,699
here but I think we actually call all of

857
00:39:29,929 --> 00:39:33,379
these and I am I wrong about that I

858
00:39:31,699 --> 00:39:36,379
think I think all of these are actually

859
00:39:33,380 --> 00:39:39,920
called so if we just kind of convert

860
00:39:36,380 --> 00:39:44,269
this to like our modern way that we were

861
00:39:39,920 --> 00:39:47,659
doing things leave it like this think

862
00:39:44,268 --> 00:39:50,298
we're in good shape there we go

863
00:39:47,659 --> 00:39:52,038
and just you know here's a little riff

864
00:39:50,298 --> 00:39:55,909
reader with a little API for it's all

865
00:39:52,039 --> 00:39:59,390
nice and bundled up for you and should

866
00:39:55,909 --> 00:40:03,139
be pretty easy to use now okay that's

867
00:39:59,389 --> 00:40:05,629
interesting so for some reason we I

868
00:40:03,139 --> 00:40:09,199
guess we were using this stuff here

869
00:40:05,630 --> 00:40:12,680
because the wave chunk actually was the

870
00:40:09,199 --> 00:40:15,889
was all we would ever need but we should

871
00:40:12,679 --> 00:40:17,989
probably not do it quite that way

872
00:40:15,889 --> 00:40:21,440
we should probably actually have a thing

873
00:40:17,989 --> 00:40:29,269
here where we use a specific chunk

874
00:40:21,440 --> 00:40:35,059
header right something like something

875
00:40:29,268 --> 00:40:37,459
like that is it let's wave chunk right

876
00:40:35,059 --> 00:40:38,690
so it's actually this this is the one

877
00:40:37,460 --> 00:40:44,088
we're talking about although they are

878
00:40:38,690 --> 00:40:45,590
the same right something like this so

879
00:40:44,088 --> 00:40:47,259
here we kind of say look there's a

880
00:40:45,590 --> 00:40:50,809
[Music]

881
00:40:47,259 --> 00:40:53,179
there's a riff chunk header and that way

882
00:40:50,809 --> 00:40:56,210
we won't require there to have been a

883
00:40:53,179 --> 00:40:56,748
wave chunk defined in any of these kind

884
00:40:56,210 --> 00:40:58,579
of surf

885
00:40:56,748 --> 00:41:02,298
circumstances right so I can just do

886
00:40:58,579 --> 00:41:04,789
that because these are just hard-coded

887
00:41:02,298 --> 00:41:06,440
to read wave I mean it would have it

888
00:41:04,789 --> 00:41:08,119
would have worked for any other thing as

889
00:41:06,440 --> 00:41:10,809
well but we might as well just clean

890
00:41:08,119 --> 00:41:10,809
that up a little bit

891
00:41:13,219 --> 00:41:20,039
right so that seems good and if I go

892
00:41:18,028 --> 00:41:23,818
ahead and just clean up the rest of this

893
00:41:20,039 --> 00:41:25,859
and make this good to go I think we we

894
00:41:23,818 --> 00:41:27,179
can just start using that now there's a

895
00:41:25,858 --> 00:41:29,098
couple other things we want to go look

896
00:41:27,179 --> 00:41:32,909
at real quick but we'll get to those in

897
00:41:29,099 --> 00:41:34,559
a second this all looks fine let me see

898
00:41:32,909 --> 00:41:37,079
here I think we want to make might wanna

899
00:41:34,559 --> 00:41:38,759
make a little way a cleaner way of

900
00:41:37,079 --> 00:41:41,999
saying that you want to read the initial

901
00:41:38,759 --> 00:41:43,108
header that's sort of a separate part so

902
00:41:41,998 --> 00:41:47,398
we can take a look at that in a second

903
00:41:43,108 --> 00:41:54,380
here let me just get these two calls in

904
00:41:47,398 --> 00:41:54,380
there and there's our riff reader

905
00:41:55,489 --> 00:42:00,838
that'll looks pretty good and again that

906
00:41:59,548 --> 00:42:06,088
allows you to navigate through the whole

907
00:42:00,838 --> 00:42:08,788
riff file pretty easily so I think the

908
00:42:06,088 --> 00:42:11,668
only weird part is that in the wave

909
00:42:08,789 --> 00:42:14,579
reader you can see right here we say

910
00:42:11,668 --> 00:42:18,958
like we want to get the header and

911
00:42:14,579 --> 00:42:21,509
there's that wave header so I I'm kind

912
00:42:18,958 --> 00:42:25,348
of wondering just trying to think this

913
00:42:21,509 --> 00:42:31,079
through how wants to work I wonder if

914
00:42:25,349 --> 00:42:33,449
this is generic like I kind of feel like

915
00:42:31,079 --> 00:42:35,609
this might just generally be a riff

916
00:42:33,449 --> 00:42:37,199
header like other riff things would have

917
00:42:35,608 --> 00:42:38,969
this in it

918
00:42:37,199 --> 00:42:40,289
and if that's the case it shouldn't be

919
00:42:38,969 --> 00:42:41,519
called wave headers we called riff

920
00:42:40,289 --> 00:42:44,069
header

921
00:42:41,518 --> 00:42:45,328
similarly this wave chunk doesn't really

922
00:42:44,068 --> 00:42:47,548
need to be here either

923
00:42:45,329 --> 00:42:53,699
in fact I guess I don't know that anyone

924
00:42:47,548 --> 00:42:56,548
even use that yeah so so really this

925
00:42:53,699 --> 00:42:58,139
doesn't even need to be there and I'm

926
00:42:56,548 --> 00:43:00,418
and I'm thinking that maybe this can

927
00:42:58,139 --> 00:43:02,880
just be riff header right and then the

928
00:43:00,418 --> 00:43:06,618
first call you can have is get the riff

929
00:43:02,880 --> 00:43:06,619
header out of this thing

930
00:43:06,798 --> 00:43:12,148
just what I'm thinking I'm gonna take a

931
00:43:09,748 --> 00:43:16,908
quick gander at the docks assuming if

932
00:43:12,148 --> 00:43:20,159
there are any and see if that's true

933
00:43:16,909 --> 00:43:22,798
because I don't actually know so let's

934
00:43:20,159 --> 00:43:24,150
see I mean I probably did know at one

935
00:43:22,798 --> 00:43:28,929
point but I've longed for

936
00:43:24,150 --> 00:43:33,750
so where is the definition of the header

937
00:43:28,929 --> 00:43:37,929
of the thing let's see

938
00:43:33,750 --> 00:43:44,820
so are these docked anywhere format

939
00:43:37,929 --> 00:43:46,929
[Music]

940
00:43:44,820 --> 00:43:50,250
isn't there something that just says

941
00:43:46,929 --> 00:43:50,250
what the header would be

942
00:44:06,710 --> 00:44:12,099
all right let's see here

943
00:44:12,280 --> 00:44:17,630
whoa this is actually the Library of

944
00:44:15,380 --> 00:44:21,619
Congress the Library of Congress

945
00:44:17,630 --> 00:44:25,880
actually has an information about the

946
00:44:21,619 --> 00:44:27,469
Rif okay that's pretty cool anyway so

947
00:44:25,880 --> 00:44:29,809
I'm just want to see if there's a

948
00:44:27,469 --> 00:44:32,119
definition of header that that suggests

949
00:44:29,809 --> 00:44:33,949
that across multiple RIF files that

950
00:44:32,119 --> 00:44:36,829
that's the same header file generally

951
00:44:33,949 --> 00:44:39,289
speaking because I don't know if that's

952
00:44:36,829 --> 00:44:42,289
true or not so I'm kind of interested to

953
00:44:39,289 --> 00:44:44,900
know how that works I know that the

954
00:44:42,289 --> 00:44:47,949
chunks are generic but I just don't know

955
00:44:44,900 --> 00:44:50,660
about the headers being generic or not

956
00:44:47,949 --> 00:44:52,250
that I really just don't know I would

957
00:44:50,659 --> 00:44:55,069
assume that they are but I just kind of

958
00:44:52,250 --> 00:44:59,030
wanted to I was hoping that I could get

959
00:44:55,070 --> 00:45:04,280
some kind of a more specific definition

960
00:44:59,030 --> 00:45:05,930
that said that that was true this is

961
00:45:04,280 --> 00:45:11,600
probably what I want compound file

962
00:45:05,929 --> 00:45:13,719
structure so maybe I assume maybe 2:18

963
00:45:11,599 --> 00:45:19,929
maybe not

964
00:45:13,719 --> 00:45:19,929
let's take a look I can't actually tell

965
00:45:22,318 --> 00:45:28,739
well no that's not really what I want

966
00:45:25,728 --> 00:45:30,448
yeah I just want something that says

967
00:45:28,739 --> 00:45:37,079
what starts at the top of the file

968
00:45:30,449 --> 00:45:38,548
that's like all I really wanted but

969
00:45:37,079 --> 00:45:41,329
doesn't look like that's forthcoming

970
00:45:38,548 --> 00:45:43,559
unfortunately come on people

971
00:45:41,329 --> 00:45:45,329
I'm just looking in the wrong place I

972
00:45:43,559 --> 00:45:48,028
mean I know it's not that this isn't

973
00:45:45,329 --> 00:45:49,829
defined it's got to be like it's got to

974
00:45:48,028 --> 00:45:53,518
say what the file starts with if it

975
00:45:49,829 --> 00:45:54,689
starts I mean you would think that they

976
00:45:53,518 --> 00:46:02,659
would have something that just says

977
00:45:54,688 --> 00:46:02,659
here's what it is right these

978
00:46:10,989 --> 00:46:14,139
[Music]

979
00:46:20,009 --> 00:46:27,849
RIF wave so it's like they do have a

980
00:46:25,568 --> 00:46:30,788
definition so the fact that they sort of

981
00:46:27,849 --> 00:46:37,048
have RIF wave in it suggests that it is

982
00:46:30,789 --> 00:46:37,049
a standard chunk type right

983
00:46:44,849 --> 00:46:51,029
so that rift parentheses I think because

984
00:46:49,289 --> 00:46:52,980
I see it everywhere I can just assume

985
00:46:51,030 --> 00:46:57,450
that the header is the same on all of

986
00:46:52,980 --> 00:46:59,490
these and it's just the four CC and it

987
00:46:57,449 --> 00:47:02,909
should be the same so I'm rather than

988
00:46:59,489 --> 00:47:04,679
continuing to sort of pour over those

989
00:47:02,909 --> 00:47:08,789
docks to try and find the official

990
00:47:04,679 --> 00:47:13,319
confirmation I'm gonna say that this is

991
00:47:08,789 --> 00:47:17,300
actually also generic right so I think I

992
00:47:13,320 --> 00:47:17,300
should be able to do something like this

993
00:47:17,780 --> 00:47:25,230
where I just say all right these are

994
00:47:21,719 --> 00:47:29,069
actual file specific things this like

995
00:47:25,230 --> 00:47:34,380
WAV format and these enums but this is

996
00:47:29,070 --> 00:47:37,230
not and also you know this riff code

997
00:47:34,380 --> 00:47:40,320
thing should probably go in here right

998
00:47:37,230 --> 00:47:51,690
that's how you would create that and

999
00:47:40,320 --> 00:47:57,090
this we also would want for for this we

1000
00:47:51,690 --> 00:48:10,940
can probably make that exist outside so

1001
00:47:57,090 --> 00:48:16,490
we could say that I don't actually know

1002
00:48:10,940 --> 00:48:16,490
if we want to do that exactly but

1003
00:48:25,139 --> 00:48:34,690
something like that right I don't know

1004
00:48:31,980 --> 00:48:37,119
so assuming that we have something like

1005
00:48:34,690 --> 00:48:39,280
this we could potentially use us to read

1006
00:48:37,119 --> 00:48:41,679
any kind of riff file now so that's all

1007
00:48:39,280 --> 00:48:43,420
I really wanted to get to in terms of

1008
00:48:41,679 --> 00:48:45,699
how the parsing starts on one of these

1009
00:48:43,420 --> 00:48:48,430
so this is the part where we don't

1010
00:48:45,699 --> 00:48:50,679
really have anything in specific you can

1011
00:48:48,429 --> 00:48:52,329
see that it starts the parse chunk at

1012
00:48:50,679 --> 00:48:55,480
stuff here where it skips over the

1013
00:48:52,329 --> 00:49:00,340
header so what I'd rather do than that I

1014
00:48:55,480 --> 00:49:03,940
think is I would rather have a call that

1015
00:49:00,340 --> 00:49:11,559
you know get rid of this and do

1016
00:49:03,940 --> 00:49:14,230
something more like up here see how

1017
00:49:11,559 --> 00:49:18,460
would I do this I do something like this

1018
00:49:14,230 --> 00:49:22,559
that up here let's go ahead and loop

1019
00:49:18,460 --> 00:49:28,030
over an iterator like so I'm gonna get

1020
00:49:22,559 --> 00:49:30,070
the next chunk down here so it's a while

1021
00:49:28,030 --> 00:49:35,280
loop now and the iterator will just flow

1022
00:49:30,070 --> 00:49:42,420
through here so we'll do something like

1023
00:49:35,280 --> 00:49:44,950
you know iterate riff like this and

1024
00:49:42,420 --> 00:49:47,950
rather than ever calling parse chunk at

1025
00:49:44,949 --> 00:49:53,230
we will just have this provide us with

1026
00:49:47,949 --> 00:49:57,009
the buffer that's the contents we'll

1027
00:49:53,230 --> 00:49:59,559
pass that in and when we do this

1028
00:49:57,010 --> 00:50:01,780
iteration we will have a thing that

1029
00:49:59,559 --> 00:50:04,690
allows us to get back that header so

1030
00:50:01,780 --> 00:50:11,140
we'll assume we have a RIF header like

1031
00:50:04,690 --> 00:50:15,280
this and we'll say what are we saying

1032
00:50:11,139 --> 00:50:20,489
here for it get next chunk get header

1033
00:50:15,280 --> 00:50:23,110
chunk something like that so maybe this

1034
00:50:20,489 --> 00:50:25,859
how are we doing okay so we're just

1035
00:50:23,110 --> 00:50:25,860
doing it this way

1036
00:50:35,429 --> 00:50:49,809
this makes sense that seems a little bit

1037
00:50:47,380 --> 00:50:51,369
better to me and now this would work for

1038
00:50:49,809 --> 00:50:52,630
any rift file even though we're not

1039
00:50:51,369 --> 00:50:56,670
really doing anything differently it's

1040
00:50:52,630 --> 00:50:56,670
just the fact that we kind of unlatch

1041
00:50:57,358 --> 00:51:01,179
with how we'd parse any RIF file which I

1042
00:50:59,829 --> 00:51:03,039
just think is a better way to go in case

1043
00:51:01,179 --> 00:51:04,719
we ever wanted to use this code for

1044
00:51:03,039 --> 00:51:06,130
anything else it's just you know there's

1045
00:51:04,719 --> 00:51:07,659
no reason not to just do a little bit of

1046
00:51:06,130 --> 00:51:09,880
cleanup there so it's not dependent on

1047
00:51:07,659 --> 00:51:10,899
wave for no real reason so I think we

1048
00:51:09,880 --> 00:51:12,579
can do it this way where we just say

1049
00:51:10,900 --> 00:51:14,530
like iterate this riff get us the header

1050
00:51:12,579 --> 00:51:15,639
chunk out of it which is you know we

1051
00:51:14,530 --> 00:51:19,599
know that's gonna be the first thing in

1052
00:51:15,639 --> 00:51:21,368
the file I then go ahead and we can

1053
00:51:19,599 --> 00:51:25,330
cross the rest of it and go to the next

1054
00:51:21,369 --> 00:51:26,980
chunk you know here's the we can't even

1055
00:51:25,329 --> 00:51:28,299
do this if we want because we don't

1056
00:51:26,980 --> 00:51:30,280
really need to do it we're not gonna

1057
00:51:28,300 --> 00:51:33,660
actually if we don't actually recognize

1058
00:51:30,280 --> 00:51:39,339
what this is this right here would be

1059
00:51:33,659 --> 00:51:39,940
that and off we would go so I think that

1060
00:51:39,338 --> 00:51:42,039
should do it

1061
00:51:39,940 --> 00:51:46,389
and then the rest of these calls are

1062
00:51:42,039 --> 00:51:52,300
exactly the same as they were that's

1063
00:51:46,389 --> 00:51:57,519
really it I don't know about this guy

1064
00:51:52,300 --> 00:52:01,390
this seems maybe not as good because if

1065
00:51:57,519 --> 00:52:03,759
we do do a get chunk data that's not

1066
00:52:01,389 --> 00:52:06,690
actually guarantee guarantee of the size

1067
00:52:03,760 --> 00:52:11,440
is correct so we may want to actually

1068
00:52:06,690 --> 00:52:14,559
have a more specific look we could

1069
00:52:11,440 --> 00:52:20,980
actually have this take what it's trying

1070
00:52:14,559 --> 00:52:22,509
to look for and then validate it I don't

1071
00:52:20,980 --> 00:52:24,789
know not sure how I feel about it one

1072
00:52:22,510 --> 00:52:27,040
way or the other I'm gonna go ahead and

1073
00:52:24,789 --> 00:52:29,889
pass errors as a separate stream now so

1074
00:52:27,039 --> 00:52:34,019
we can get rid of this and then we can

1075
00:52:29,889 --> 00:52:38,618
go through all of this and have that

1076
00:52:34,019 --> 00:52:39,460
output to the air stream and that should

1077
00:52:38,619 --> 00:52:40,869
be good

1078
00:52:39,460 --> 00:52:44,769
I need these two

1079
00:52:40,869 --> 00:52:50,410
calls to actually exist now so I need a

1080
00:52:44,768 --> 00:52:52,588
way to iterate riff over a buffer and

1081
00:52:50,409 --> 00:53:06,278
then I need a way to get a header chunk

1082
00:52:52,588 --> 00:53:13,568
from one of these iterators so looking

1083
00:53:06,278 --> 00:53:20,588
at how we did the iterator I guess the

1084
00:53:13,568 --> 00:53:22,719
size part on so I'm guessing maybe this

1085
00:53:20,588 --> 00:53:24,578
API wouldn't quite work because the next

1086
00:53:22,719 --> 00:53:27,159
chunk part of things wouldn't actually

1087
00:53:24,579 --> 00:53:29,890
work it has to be on chunk header for

1088
00:53:27,159 --> 00:53:31,659
that to occur so I think maybe what we

1089
00:53:29,889 --> 00:53:34,538
want to do is change this a little bit

1090
00:53:31,659 --> 00:53:40,210
and say that this should look more like

1091
00:53:34,539 --> 00:53:44,890
this right so this would move us to the

1092
00:53:40,210 --> 00:53:46,298
first chunk automatically and because

1093
00:53:44,889 --> 00:53:48,670
that's the only thing that we actually

1094
00:53:46,298 --> 00:53:50,559
can do there's no way for us to do

1095
00:53:48,670 --> 00:53:54,690
anything else really

1096
00:53:50,559 --> 00:53:54,690
so in here it would be more like this

1097
00:53:57,568 --> 00:54:05,469
right and then this code just looks like

1098
00:54:02,380 --> 00:54:06,849
that and off we go so I think I'll do it

1099
00:54:05,469 --> 00:54:08,649
that way that just seems a little bit

1100
00:54:06,849 --> 00:54:10,568
better we'll leave it like that for now

1101
00:54:08,650 --> 00:54:12,329
and if I see if it turns out that that's

1102
00:54:10,568 --> 00:54:15,009
really bad and everything is horrible

1103
00:54:12,329 --> 00:54:17,528
then we'll you know we'll figure out a

1104
00:54:15,009 --> 00:54:19,748
way around it so assuming that we look

1105
00:54:17,528 --> 00:54:21,670
it looks like that then really what

1106
00:54:19,748 --> 00:54:26,730
we're gonna do here is we're gonna call

1107
00:54:21,670 --> 00:54:29,249
parse chunk at right off the bat right

1108
00:54:26,730 --> 00:54:31,719
so what we want to do is say okay

1109
00:54:29,248 --> 00:54:34,689
assuming you know that the buffer is

1110
00:54:31,719 --> 00:54:36,608
large enough we'll do something useful

1111
00:54:34,690 --> 00:54:40,028
here otherwise we won't

1112
00:54:36,608 --> 00:54:41,768
so we'll sort of have a case where we

1113
00:54:40,028 --> 00:54:44,579
would just clear whatever was passed

1114
00:54:41,768 --> 00:54:47,469
into us if the buffer isn't big enough

1115
00:54:44,579 --> 00:54:52,509
so if I go ahead and jump to our buffer

1116
00:54:47,469 --> 00:54:54,568
struct that's not what I wanted there it

1117
00:54:52,509 --> 00:54:54,568
is

1118
00:54:55,269 --> 00:55:01,989
so we have countin data here so I'm just

1119
00:54:57,699 --> 00:55:04,569
gonna say look if the count is greater

1120
00:55:01,989 --> 00:55:06,219
than or equal to the size that I expect

1121
00:55:04,570 --> 00:55:08,760
for a RIF header then we're in business

1122
00:55:06,219 --> 00:55:11,829
if it's not there's nothing I can do so

1123
00:55:08,760 --> 00:55:13,420
assuming that it's all good then what

1124
00:55:11,829 --> 00:55:16,239
I'll do is I'll just say great let's

1125
00:55:13,420 --> 00:55:21,340
read the header out of here and then

1126
00:55:16,239 --> 00:55:26,439
let's actually parse the chunk that's

1127
00:55:21,340 --> 00:55:28,539
one ahead so here on RIF header this is

1128
00:55:26,440 --> 00:55:31,320
valid it's probably important for us to

1129
00:55:28,539 --> 00:55:34,690
do as well

1130
00:55:31,320 --> 00:55:37,390
well okay we'll get to there so anyway

1131
00:55:34,690 --> 00:55:39,099
this RIF header the buffer data that

1132
00:55:37,389 --> 00:55:40,449
we're actually looking at here we can

1133
00:55:39,099 --> 00:55:42,190
just say let's interpret that as a

1134
00:55:40,449 --> 00:55:43,419
header structure put it in here give it

1135
00:55:42,190 --> 00:55:45,630
back to the person who's looking at it

1136
00:55:43,420 --> 00:55:48,369
later and we'll assume that they will

1137
00:55:45,630 --> 00:55:50,920
validate it however they want to

1138
00:55:48,369 --> 00:55:53,440
validate it after that's done assuming

1139
00:55:50,920 --> 00:55:56,139
that it actually worked what we'll do

1140
00:55:53,440 --> 00:55:59,409
there is we'll take an iterator and

1141
00:55:56,139 --> 00:56:03,250
we'll initialize that to something that

1142
00:55:59,409 --> 00:56:06,250
has the correct structure for this so I

1143
00:56:03,250 --> 00:56:11,829
will return an iterator that comes back

1144
00:56:06,250 --> 00:56:14,769
from this parse trunk at call right so

1145
00:56:11,829 --> 00:56:16,750
now what we want to do and I can look at

1146
00:56:14,769 --> 00:56:18,219
the original one we did here you can see

1147
00:56:16,750 --> 00:56:20,320
how we were doing that parse chunk that

1148
00:56:18,219 --> 00:56:23,109
we want that to essentially occur look

1149
00:56:20,320 --> 00:56:24,610
right here right so you can see what we

1150
00:56:23,110 --> 00:56:27,640
were doing we're saying alright so

1151
00:56:24,610 --> 00:56:30,160
wherever the header actually was we want

1152
00:56:27,639 --> 00:56:33,969
to go one pass that and then we also

1153
00:56:30,159 --> 00:56:36,639
have the header size field minus four

1154
00:56:33,969 --> 00:56:38,409
for the advancement that's saying how

1155
00:56:36,639 --> 00:56:44,369
much header day there is I guess let me

1156
00:56:38,409 --> 00:56:44,369
look and see so this size field

1157
00:56:45,090 --> 00:56:56,710
wait so could we actually have used it

1158
00:56:49,750 --> 00:56:58,130
as if it were one of these maybe we

1159
00:56:56,710 --> 00:56:59,720
could have

1160
00:56:58,130 --> 00:57:03,340
maybe I was wrong about that because it

1161
00:56:59,719 --> 00:57:03,339
does actually have a science field in it

1162
00:57:05,260 --> 00:57:11,380
so I wonder if this advancement code is

1163
00:57:08,329 --> 00:57:15,079
actually the same

1164
00:57:11,380 --> 00:57:16,670
it looks like it's not because it looks

1165
00:57:15,079 --> 00:57:18,920
like you have to account for the fact

1166
00:57:16,670 --> 00:57:23,349
that the file type ID was actually known

1167
00:57:18,920 --> 00:57:23,349
to be there because you see that - for

1168
00:57:24,550 --> 00:57:32,840
right oh wait no but that's fine because

1169
00:57:31,250 --> 00:57:37,309
that would just be the size of the chunk

1170
00:57:32,840 --> 00:57:39,410
header so it feels like you could just

1171
00:57:37,309 --> 00:57:43,099
call next chunk so I think maybe that

1172
00:57:39,409 --> 00:57:51,289
was premature because these are actually

1173
00:57:43,099 --> 00:58:07,519
the same right this is actually the same

1174
00:57:51,289 --> 00:58:09,190
here right one of these is in there so I

1175
00:58:07,519 --> 00:58:11,869
might just do that

1176
00:58:09,190 --> 00:58:14,630
maybe I maybe I maybe I spoke too soon

1177
00:58:11,869 --> 00:58:17,359
so maybe and we'll see if this is

1178
00:58:14,630 --> 00:58:19,880
actually true but maybe if you call

1179
00:58:17,360 --> 00:58:24,710
iterate riff all you really have to then

1180
00:58:19,880 --> 00:58:30,019
do is is tell it to parse the chunk at

1181
00:58:24,710 --> 00:58:32,329
that location and it can just advance as

1182
00:58:30,019 --> 00:58:36,710
it normally would because I think this

1183
00:58:32,329 --> 00:58:39,860
is what it would produce anyway I don't

1184
00:58:36,710 --> 00:58:41,960
see a lot of reason why that would fail

1185
00:58:39,860 --> 00:58:45,820
you're just advancing by the size which

1186
00:58:41,960 --> 00:58:45,820
is what you would expect to do anyway

1187
00:58:52,219 --> 00:58:57,329
although the stopped winner

1188
00:58:55,280 --> 00:58:58,800
you know the stop pointer would be the

1189
00:58:57,329 --> 00:59:05,610
same right because it's just the end of

1190
00:58:58,800 --> 00:59:06,900
the file I'm really I'm torn I don't

1191
00:59:05,610 --> 00:59:17,420
really know how I want to approach that

1192
00:59:06,900 --> 00:59:19,460
um I'm gonna I'm gonna keep it separate

1193
00:59:17,420 --> 00:59:21,450
I'm gonna keep it separate

1194
00:59:19,460 --> 00:59:23,010
we'll keep it doing the way that we were

1195
00:59:21,449 --> 00:59:25,769
doing it and we'll go from there

1196
00:59:23,010 --> 00:59:29,430
all right so what I want to do here is

1197
00:59:25,769 --> 00:59:33,179
say okay the buffer data fields that

1198
00:59:29,429 --> 00:59:36,719
we're talking about where the data

1199
00:59:33,179 --> 00:59:42,569
actually lives here what we want to do

1200
00:59:36,719 --> 00:59:46,459
is start after the RIF header right and

1201
00:59:42,570 --> 00:59:51,059
then in here we this is exactly the same

1202
00:59:46,460 --> 00:59:53,909
thing so we're actually just passing the

1203
00:59:51,059 --> 00:59:58,409
exact same thing but we want to take

1204
00:59:53,909 --> 01:00:00,000
that header size and and say that's how

1205
00:59:58,409 --> 01:00:01,500
much of the file we're willing to read

1206
01:00:00,000 --> 01:00:03,329
and then the minus four I'm assuming is

1207
01:00:01,500 --> 01:00:05,670
getting rid of the file type ID which is

1208
01:00:03,329 --> 01:00:07,440
part of the contents because these block

1209
01:00:05,670 --> 01:00:11,039
sizes I guess are inclusive right they

1210
01:00:07,440 --> 01:00:13,500
include their own data as well as all

1211
01:00:11,039 --> 01:00:15,059
the sub data and so this is just saying

1212
01:00:13,500 --> 01:00:19,590
here's the range right we're gonna go

1213
01:00:15,059 --> 01:00:21,539
from here to to there I might introduce

1214
01:00:19,590 --> 01:00:23,600
a pointer just for that just so it's

1215
01:00:21,539 --> 01:00:26,849
clear that these are exactly the same

1216
01:00:23,599 --> 01:00:31,039
like so and so it's just data start and

1217
01:00:26,849 --> 01:00:37,469
data start plus header size minus four

1218
01:00:31,039 --> 01:00:40,079
and I think that would do it I'm gonna

1219
01:00:37,469 --> 01:00:42,079
see about how that plays out and if

1220
01:00:40,079 --> 01:00:45,809
there's anything that I don't like there

1221
01:00:42,079 --> 01:00:50,159
we need to include that obviously inside

1222
01:00:45,809 --> 01:00:51,539
handmade CBP when we're actually

1223
01:00:50,159 --> 01:00:55,379
including like things and webs and all

1224
01:00:51,539 --> 01:00:58,500
that nonsense we need to include our

1225
01:00:55,380 --> 01:01:00,090
reader and so in the H file and in the

1226
01:00:58,500 --> 01:01:03,820
CPP file where we were previously

1227
01:01:00,090 --> 01:01:07,390
including file info stuff

1228
01:01:03,820 --> 01:01:09,580
think we're good so let's see here

1229
01:01:07,389 --> 01:01:13,539
what's going on

1230
01:01:09,579 --> 01:01:15,579
missing types best of fire what did I

1231
01:01:13,539 --> 01:01:17,739
not have we have riff iterator as a type

1232
01:01:15,579 --> 01:01:19,569
don't we yeah it's right there what's

1233
01:01:17,739 --> 01:01:28,019
the problem did I not save the file or

1234
01:01:19,570 --> 01:01:32,710
some things and made that H oh all right

1235
01:01:28,019 --> 01:01:38,949
so let's move along here what have we

1236
01:01:32,710 --> 01:01:42,699
got so the wave fmt stuff what's the

1237
01:01:38,949 --> 01:01:46,750
problem why are you complaining

1238
01:01:42,699 --> 01:01:47,769
the rift codes here how is that not

1239
01:01:46,750 --> 01:01:50,380
defined

1240
01:01:47,769 --> 01:02:01,659
oh yeah it isn't defined that's actually

1241
01:01:50,380 --> 01:02:04,539
true yep I agree with that first chunk

1242
01:02:01,659 --> 01:02:09,569
at does not take one premiere well we

1243
01:02:04,539 --> 01:02:13,210
fixed that um let's see previous local

1244
01:02:09,570 --> 01:02:15,100
iterate riff next chunk that's true

1245
01:02:13,210 --> 01:02:18,869
don't didn't want that that was just a

1246
01:02:15,099 --> 01:02:23,199
bug and see what else we got

1247
01:02:18,869 --> 01:02:27,880
wave format undeclared identifier okay

1248
01:02:23,199 --> 01:02:30,279
so did I not to find that so it it's is

1249
01:02:27,880 --> 01:02:32,769
here

1250
01:02:30,280 --> 01:02:34,810
Oh eyes right I made these lower case

1251
01:02:32,769 --> 01:02:37,900
because I didn't like the fact that they

1252
01:02:34,809 --> 01:02:39,880
were capitalized that looks like the

1253
01:02:37,900 --> 01:02:42,570
only place we used it though so we

1254
01:02:39,880 --> 01:02:42,570
should be okay

1255
01:02:42,869 --> 01:02:50,159
static function sound a sixteen parts

1256
01:02:45,340 --> 01:02:53,140
valve so we changed the format of that

1257
01:02:50,159 --> 01:02:56,379
so we got to go ahead and change the

1258
01:02:53,139 --> 01:02:58,750
forward declaration in the call so

1259
01:02:56,380 --> 01:03:01,720
instead of what we were doing for what

1260
01:02:58,750 --> 01:03:03,340
we need to do that and so we should get

1261
01:03:01,719 --> 01:03:06,189
an error where that was called here it

1262
01:03:03,340 --> 01:03:07,960
is so if you take a look at the content

1263
01:03:06,190 --> 01:03:09,700
stream that's being made here we

1264
01:03:07,960 --> 01:03:14,740
actually don't need that now we're gonna

1265
01:03:09,699 --> 01:03:17,319
pass these two things directly and that

1266
01:03:14,739 --> 01:03:17,808
to do turns out to be true right we want

1267
01:03:17,320 --> 01:03:19,729
to pass

1268
01:03:17,809 --> 01:03:23,298
the buffer so the answer to the to do

1269
01:03:19,728 --> 01:03:26,149
was yes we should so that finishes up

1270
01:03:23,298 --> 01:03:28,099
the the web parsing and that's great

1271
01:03:26,150 --> 01:03:29,660
and so now we can debug that code and

1272
01:03:28,099 --> 01:03:31,880
make sure we can actually parse wow

1273
01:03:29,659 --> 01:03:33,679
that's just fine what won't actually

1274
01:03:31,880 --> 01:03:35,539
happen is our asset won't be imported

1275
01:03:33,679 --> 01:03:37,998
the reason is because process audio

1276
01:03:35,539 --> 01:03:41,269
import is now what we have to actually

1277
01:03:37,998 --> 01:03:43,368
implement right so assuming that we got

1278
01:03:41,268 --> 01:03:45,588
our sound samples we would get we would

1279
01:03:43,369 --> 01:03:48,079
come in here and we would end up in a

1280
01:03:45,588 --> 01:03:49,639
situation where we actually didn't you

1281
01:03:48,079 --> 01:03:51,650
know we just feel like alright you told

1282
01:03:49,639 --> 01:03:55,608
me in poor this thing but I don't know

1283
01:03:51,650 --> 01:03:58,119
how to do that right so that part right

1284
01:03:55,608 --> 01:04:01,188
here we just have to figure out a way to

1285
01:03:58,119 --> 01:04:04,039
update the HHA file with that new

1286
01:04:01,188 --> 01:04:06,199
information and that's something again

1287
01:04:04,039 --> 01:04:08,778
that we we've already done so it's not

1288
01:04:06,199 --> 01:04:11,298
like we really have a whole lot of work

1289
01:04:08,778 --> 01:04:14,179
to do here what you can see is inside

1290
01:04:11,298 --> 01:04:16,400
the asset we now have like data offset

1291
01:04:14,179 --> 01:04:19,098
data size first tag when passed last tag

1292
01:04:16,400 --> 01:04:21,199
type you know that stuff if we just set

1293
01:04:19,099 --> 01:04:22,400
up that information exactly the way we

1294
01:04:21,199 --> 01:04:27,920
were setting it up for everything else

1295
01:04:22,400 --> 01:04:31,789
we end up down here in the the HHA sound

1296
01:04:27,920 --> 01:04:34,849
part of things that has the sample count

1297
01:04:31,789 --> 01:04:36,349
and the channel count and the chain

1298
01:04:34,849 --> 01:04:38,209
information which is if we want to break

1299
01:04:36,349 --> 01:04:40,759
it up into pieces and what you can see

1300
01:04:38,208 --> 01:04:42,379
is the data that it wants is exactly the

1301
01:04:40,759 --> 01:04:45,489
data we provided so we should be able to

1302
01:04:42,380 --> 01:04:47,959
write that out pretty much verbatim

1303
01:04:45,489 --> 01:04:50,298
because this is all exactly what we want

1304
01:04:47,958 --> 01:04:53,688
so the only thing we really need to do

1305
01:04:50,298 --> 01:04:58,099
here is the HHA sound chain part of

1306
01:04:53,688 --> 01:05:00,828
things I don't actually quite remember

1307
01:04:58,099 --> 01:05:04,219
how this was supposed to work but I

1308
01:05:00,829 --> 01:05:07,699
think what we want to do is we set HHA

1309
01:05:04,219 --> 01:05:09,528
sound chain advanced and then I think

1310
01:05:07,699 --> 01:05:11,900
what it does is it just adds one to the

1311
01:05:09,528 --> 01:05:14,708
asset number so basically we just put

1312
01:05:11,900 --> 01:05:18,639
these assets like in a row into the file

1313
01:05:14,708 --> 01:05:20,989
and that allows it to do streaming music

1314
01:05:18,639 --> 01:05:23,989
you know for things that we don't want

1315
01:05:20,989 --> 01:05:27,048
to load the whole thing in at once if I

1316
01:05:23,989 --> 01:05:30,349
just quickly do a search because I'm

1317
01:05:27,048 --> 01:05:31,610
just I just want to see where the HHA

1318
01:05:30,349 --> 01:05:37,630
sound chain

1319
01:05:31,610 --> 01:05:37,630
stuff is at so HHH sound chain advance

1320
01:05:38,050 --> 01:05:44,900
inside the actual handmade like this

1321
01:05:42,949 --> 01:05:46,399
part here right I just want to verify us

1322
01:05:44,900 --> 01:05:48,470
what happens you can see it happening

1323
01:05:46,400 --> 01:05:52,430
it's just taking that asset ID and

1324
01:05:48,469 --> 01:05:56,269
adding one so what we can do inside the

1325
01:05:52,429 --> 01:05:59,259
import asset you know path here is we

1326
01:05:56,269 --> 01:06:01,579
can look at the sample count and say how

1327
01:05:59,260 --> 01:06:08,120
often do we want to hit the disk for

1328
01:06:01,579 --> 01:06:10,460
this thing right alternatively we can

1329
01:06:08,119 --> 01:06:12,769
also look at the channel count stuff but

1330
01:06:10,460 --> 01:06:15,079
again well I think I want to do is just

1331
01:06:12,769 --> 01:06:17,059
break them up into channels so I think

1332
01:06:15,079 --> 01:06:19,159
what I want this this to look like

1333
01:06:17,059 --> 01:06:23,900
eventually should be something like this

1334
01:06:19,159 --> 01:06:26,210
right i channel index equals zero

1335
01:06:23,900 --> 01:06:29,090
channel index is less than sound channel

1336
01:06:26,210 --> 01:06:32,480
counts plus plus channel index each of

1337
01:06:29,090 --> 01:06:34,970
these should be its own asset export it

1338
01:06:32,480 --> 01:06:38,780
should use a tag in the file format

1339
01:06:34,969 --> 01:06:40,789
that's about which channel it is so for

1340
01:06:38,780 --> 01:06:43,550
example in here where we've got you know

1341
01:06:40,789 --> 01:06:45,289
all these different tags to identify

1342
01:06:43,550 --> 01:06:48,140
what's going on in our data I think what

1343
01:06:45,289 --> 01:06:50,090
we want here is channel index right so

1344
01:06:48,139 --> 01:06:52,609
that way sounds can just say this is the

1345
01:06:50,090 --> 01:06:56,260
the channel index that I'm talking about

1346
01:06:52,610 --> 01:07:01,930
for this sound and and off we would go

1347
01:06:56,260 --> 01:07:01,930
so that's this in here

1348
01:07:07,179 --> 01:07:12,998
that would just allow us to again de-mux

1349
01:07:09,909 --> 01:07:15,129
those sort of compounds out if if

1350
01:07:12,998 --> 01:07:19,149
someone does feed us some kind of weird

1351
01:07:15,130 --> 01:07:24,729
like Dolby 77.1 is kind of a more

1352
01:07:19,150 --> 01:07:28,989
standard thing nowadays right yeah I

1353
01:07:24,728 --> 01:07:31,288
love tool B's so such a train wreck in

1354
01:07:28,989 --> 01:07:33,789
progress

1355
01:07:31,289 --> 01:07:38,140
all of these sound formats are so

1356
01:07:33,789 --> 01:07:40,150
ridiculous but anyway so I believe 7.1

1357
01:07:38,139 --> 01:07:42,998
is kind of what you would do nowadays

1358
01:07:40,150 --> 01:07:46,509
most of the time like I mean just look

1359
01:07:42,998 --> 01:07:52,748
at these things look at how many stupid

1360
01:07:46,509 --> 01:07:55,150
formats like God just I don't even want

1361
01:07:52,748 --> 01:07:57,488
to get into it I hate this kind of crap

1362
01:07:55,150 --> 01:07:59,680
like how hard is it to just come up with

1363
01:07:57,489 --> 01:08:04,920
a spec for sound it's like the simplest

1364
01:07:59,679 --> 01:08:04,919
thing and they massively overcomplicated

1365
01:08:05,039 --> 01:08:12,069
it's nuts anyway uh so Dolby 7.1 is

1366
01:08:10,420 --> 01:08:14,289
probably a pretty safe format to go with

1367
01:08:12,068 --> 01:08:16,539
the reason I like 7.1 is because it

1368
01:08:14,289 --> 01:08:19,929
happens to pad out to an even number for

1369
01:08:16,539 --> 01:08:22,539
Simbi right if you're gonna mix down to

1370
01:08:19,929 --> 01:08:25,509
7.1 you've got eight Sindhi lanes which

1371
01:08:22,539 --> 01:08:29,289
is two SSC registers or one ATX register

1372
01:08:25,509 --> 01:08:32,229
and that's just kind of nice right

1373
01:08:29,289 --> 01:08:34,569
so I would say Dolby 7.1 is where we

1374
01:08:32,229 --> 01:08:37,329
should live here so if anyone does feed

1375
01:08:34,569 --> 01:08:39,520
us some giant eight sample eight channel

1376
01:08:37,329 --> 01:08:40,838
sound will de-mux it later on in the

1377
01:08:39,520 --> 01:08:42,279
mixer when we're mixing everything down

1378
01:08:40,838 --> 01:08:45,278
we output to eight channels we can

1379
01:08:42,279 --> 01:08:46,869
restore that sound as it was if we

1380
01:08:45,279 --> 01:08:48,520
wanted to and other sounds that are

1381
01:08:46,868 --> 01:08:51,670
supposed to be spatialized we can place

1382
01:08:48,520 --> 01:08:52,929
them as we want them placed at that time

1383
01:08:51,670 --> 01:08:55,389
but George thinking I want those

1384
01:08:52,929 --> 01:08:59,109
channels I think separated out into

1385
01:08:55,389 --> 01:09:02,770
separate assets when we are doing this

1386
01:08:59,109 --> 01:09:06,429
this way also for each one of these I

1387
01:09:02,770 --> 01:09:08,710
want to divide the channel up into

1388
01:09:06,429 --> 01:09:10,690
blocks based on the sample count so that

1389
01:09:08,710 --> 01:09:13,539
we can have some notion of what the

1390
01:09:10,689 --> 01:09:17,048
maximum sample count is we want to read

1391
01:09:13,539 --> 01:09:19,088
I don't know what that's gonna be just

1392
01:09:17,048 --> 01:09:22,000
yet but let's just say

1393
01:09:19,088 --> 01:09:30,729
you know that we said that we wanted I

1394
01:09:22,000 --> 01:09:31,810
don't know something like that 64k worth

1395
01:09:30,729 --> 01:09:35,138
of samples

1396
01:09:31,810 --> 01:09:38,619
I don't know 256k worth of the sample

1397
01:09:35,139 --> 01:09:41,409
count it's really so 128 would be if

1398
01:09:38,618 --> 01:09:44,048
each ones 16-bit right then each sample

1399
01:09:41,408 --> 01:09:46,929
count is gonna be that'll be 200 is 8k

1400
01:09:44,048 --> 01:09:49,088
of load per time you know we'll make up

1401
01:09:46,929 --> 01:09:51,130
something there that we like who knows

1402
01:09:49,088 --> 01:09:52,899
what it is but what we want to do is say

1403
01:09:51,130 --> 01:09:54,609
all right there's some max sample count

1404
01:09:52,899 --> 01:09:56,529
if someone feeds is a sound that's

1405
01:09:54,609 --> 01:09:59,579
longer than that sample count so it's

1406
01:09:56,529 --> 01:10:02,710
like music or a very long sound effect

1407
01:09:59,579 --> 01:10:04,689
we're gonna break it up into blocks that

1408
01:10:02,710 --> 01:10:07,630
can be streamed incrementally because

1409
01:10:04,689 --> 01:10:10,238
obviously we have that support in the

1410
01:10:07,630 --> 01:10:12,639
mixer already so we might as well use it

1411
01:10:10,238 --> 01:10:14,829
so what we'll do here is say okay when

1412
01:10:12,639 --> 01:10:19,050
you feed us one of these sounds will

1413
01:10:14,829 --> 01:10:22,988
sort of do a loop here going through

1414
01:10:19,050 --> 01:10:25,300
what we've got and using the max sample

1415
01:10:22,988 --> 01:10:27,669
count to break it up into chunks as

1416
01:10:25,300 --> 01:10:30,130
necessary so we'll enter into a loop

1417
01:10:27,670 --> 01:10:33,489
here and we'll say all right the sample

1418
01:10:30,130 --> 01:10:40,210
count right now we can actually do this

1419
01:10:33,488 --> 01:10:44,439
here will say like samples remaining or

1420
01:10:40,210 --> 01:10:45,939
maybe sample count remaining so what

1421
01:10:44,439 --> 01:10:50,198
we'll do here is we'll say load up the

1422
01:10:45,939 --> 01:10:53,529
sample count we'll do a for loop here

1423
01:10:50,198 --> 01:10:57,460
and we'll say the sample count for this

1424
01:10:53,529 --> 01:11:00,519
interior section here is going to be the

1425
01:10:57,460 --> 01:11:03,429
sample count remaining if that sample

1426
01:11:00,520 --> 01:11:07,150
count that we end up with is higher than

1427
01:11:03,429 --> 01:11:09,639
the maximum so we would overflow what

1428
01:11:07,149 --> 01:11:16,479
we're saying we want our maximum block

1429
01:11:09,639 --> 01:11:18,340
size to be will truncate then we'll

1430
01:11:16,479 --> 01:11:20,769
write it out and we'll take the sample

1431
01:11:18,340 --> 01:11:24,789
count remaining and subtract that sample

1432
01:11:20,770 --> 01:11:27,610
count from it right we can also do a

1433
01:11:24,789 --> 01:11:30,159
sample pointer right so we can say the

1434
01:11:27,609 --> 01:11:36,609
samples are

1435
01:11:30,159 --> 01:11:40,340
oops the samples are here so get those

1436
01:11:36,609 --> 01:11:42,769
and every time we advance by however

1437
01:11:40,340 --> 01:11:45,860
many we consumed that leaves us here

1438
01:11:42,770 --> 01:11:49,520
with a nice way of ready to write out an

1439
01:11:45,859 --> 01:11:54,739
asset of particular sample count and a

1440
01:11:49,520 --> 01:11:55,400
particular sample pointer and we're

1441
01:11:54,739 --> 01:11:58,369
ready to go

1442
01:11:55,399 --> 01:12:02,839
right so I think that should allow us to

1443
01:11:58,369 --> 01:12:07,309
do an audio import there as we you know

1444
01:12:02,840 --> 01:12:10,069
as we would and so just looking at how

1445
01:12:07,310 --> 01:12:14,150
the asset data stuff would happen you

1446
01:12:10,069 --> 01:12:16,399
can see like the sketch of that in the

1447
01:12:14,149 --> 01:12:19,549
image version of this right you can see

1448
01:12:16,399 --> 01:12:22,569
all that happening here and so what I

1449
01:12:19,550 --> 01:12:26,180
want to do is have that same thing

1450
01:12:22,569 --> 01:12:27,769
happen in process audio import so what

1451
01:12:26,180 --> 01:12:31,579
we would be doing there is saying all

1452
01:12:27,770 --> 01:12:33,950
right get you know this exact same

1453
01:12:31,579 --> 01:12:36,579
operation where we reserved the data and

1454
01:12:33,949 --> 01:12:39,739
everything we want to do exactly that

1455
01:12:36,579 --> 01:12:40,850
and then we want to actually set up the

1456
01:12:39,739 --> 01:12:44,000
rest of this stuff

1457
01:12:40,850 --> 01:12:46,100
accordingly the file asset indices part

1458
01:12:44,000 --> 01:12:52,039
we'd even use but it would just be for 0

1459
01:12:46,100 --> 01:12:53,030
0 because we oh well no yeah we we don't

1460
01:12:52,039 --> 01:12:54,920
really need anything any other

1461
01:12:53,029 --> 01:13:00,109
information there that that's pretty

1462
01:12:54,920 --> 01:13:02,239
much sufficient right alright so looking

1463
01:13:00,109 --> 01:13:04,789
at this we'd have the same thing here's

1464
01:13:02,239 --> 01:13:07,309
the asset index that we would try to

1465
01:13:04,789 --> 01:13:08,390
figure out where we be writing it you

1466
01:13:07,310 --> 01:13:10,070
know if we already have an existing

1467
01:13:08,390 --> 01:13:13,670
asset index for it I guess we can just

1468
01:13:10,069 --> 01:13:15,859
overwrite that asset and so that's all

1469
01:13:13,670 --> 01:13:20,239
we're doing here so we want to do that

1470
01:13:15,859 --> 01:13:24,109
same process and again we just don't

1471
01:13:20,239 --> 01:13:28,149
need the tile part of that so I don't

1472
01:13:24,109 --> 01:13:30,259
know if we want to make this stuff I

1473
01:13:28,149 --> 01:13:31,729
don't know how much of this we want to

1474
01:13:30,260 --> 01:13:34,880
just clone and how much we want to

1475
01:13:31,729 --> 01:13:38,359
actually have like a code path that we

1476
01:13:34,880 --> 01:13:40,100
share so I made try to pull some common

1477
01:13:38,359 --> 01:13:41,719
code out here once I see what it looks

1478
01:13:40,100 --> 01:13:43,249
like but we'll cross that bridge when we

1479
01:13:41,720 --> 01:13:47,349
come to it

1480
01:13:43,248 --> 01:13:47,349
so assuming that we look into 0-0

1481
01:13:47,618 --> 01:13:51,698
location because there's no such thing

1482
01:13:49,309 --> 01:13:54,050
as a gridded sound import for us

1483
01:13:51,698 --> 01:13:57,259
assuming that we get it we use it if we

1484
01:13:54,050 --> 01:14:00,349
don't then we reserve it and off we go

1485
01:13:57,260 --> 01:14:02,300
assuming we got one we now know we know

1486
01:14:00,349 --> 01:14:04,189
what the asset size is gonna be right

1487
01:14:02,300 --> 01:14:07,820
because we know that it's just a sample

1488
01:14:04,189 --> 01:14:09,739
count times that 16 right that's just

1489
01:14:07,819 --> 01:14:14,808
how big it is not a whole lot we have to

1490
01:14:09,738 --> 01:14:18,049
do there we don't need to do anything

1491
01:14:14,809 --> 01:14:22,809
well yeah we would need to do an unload

1492
01:14:18,050 --> 01:14:25,550
here we don't have an unload for sound

1493
01:14:22,809 --> 01:14:29,260
so hmm

1494
01:14:25,550 --> 01:14:33,439
oops you may have to make one of those

1495
01:14:29,260 --> 01:14:37,760
you can see in here doing the the clear

1496
01:14:33,439 --> 01:14:39,739
on this asset we don't need to clear

1497
01:14:37,760 --> 01:14:44,269
like the equivalent of a texture handle

1498
01:14:39,738 --> 01:14:45,589
because there isn't such a thing so I

1499
01:14:44,269 --> 01:14:50,119
don't really know that we need something

1500
01:14:45,590 --> 01:14:54,679
quite this hardcore but you know if I do

1501
01:14:50,118 --> 01:15:00,589
do an unload audio and we pass like a

1502
01:14:54,679 --> 01:15:04,128
audio ID what is this sound ID yeah so

1503
01:15:00,590 --> 01:15:09,559
if I if I pass one of these and we do

1504
01:15:04,128 --> 01:15:11,059
the exact same thing I don't I don't

1505
01:15:09,559 --> 01:15:13,038
really think we need to do anything else

1506
01:15:11,059 --> 01:15:16,699
fancy there what we can do is just go

1507
01:15:13,038 --> 01:15:18,768
ahead and and and set it to unloaded I

1508
01:15:16,698 --> 01:15:20,628
don't know that we need to do anything

1509
01:15:18,769 --> 01:15:23,179
else because there's nobody depending on

1510
01:15:20,628 --> 01:15:24,649
it but we should keep that path in place

1511
01:15:23,179 --> 01:15:28,189
so that in case we do need to do

1512
01:15:24,649 --> 01:15:30,590
something we're fancy in the future we

1513
01:15:28,189 --> 01:15:33,739
could I think that's probably what we

1514
01:15:30,590 --> 01:15:35,748
want to do alright so in here where we

1515
01:15:33,738 --> 01:15:38,478
have the asset file index test phone

1516
01:15:35,748 --> 01:15:41,448
it's like curiosity what clearing the

1517
01:15:38,479 --> 01:15:44,809
texture handle I guess we just let it

1518
01:15:41,448 --> 01:15:46,009
get reclamators some other time yeah I

1519
01:15:44,809 --> 01:15:50,149
guess the least recently used I'll just

1520
01:15:46,010 --> 01:15:51,949
clean that up but anyway so we then need

1521
01:15:50,149 --> 01:15:54,169
to finish this off so we're gonna say

1522
01:15:51,948 --> 01:15:55,428
the DES file index and all this stuff is

1523
01:15:54,168 --> 01:15:55,939
pretty much the same so that does kind

1524
01:15:55,429 --> 01:16:00,829
of argue for

1525
01:15:55,939 --> 01:16:03,198
maybe sharing this code pass we need to

1526
01:16:00,829 --> 01:16:07,819
reserve data for it if we don't have

1527
01:16:03,198 --> 01:16:12,409
enough room assuming we do I don't know

1528
01:16:07,819 --> 01:16:14,779
why this 64k part is relevant I don't

1529
01:16:12,409 --> 01:16:16,279
think we care about that so now we need

1530
01:16:14,779 --> 01:16:20,000
to do is we need to set the actual sound

1531
01:16:16,279 --> 01:16:22,880
data so in here where we look at how

1532
01:16:20,000 --> 01:16:24,920
those sound those hij sounds are set up

1533
01:16:22,880 --> 01:16:27,079
here's where they are we got the sample

1534
01:16:24,920 --> 01:16:28,640
count in the channel count so we know

1535
01:16:27,079 --> 01:16:31,369
what those are there's a sample count

1536
01:16:28,640 --> 01:16:34,699
and instead of source image it's just

1537
01:16:31,369 --> 01:16:35,559
you know that's just the sound so there

1538
01:16:34,698 --> 01:16:37,909
we go

1539
01:16:35,560 --> 01:16:40,489
at the moment for some reason those are

1540
01:16:37,909 --> 01:16:41,719
actually big so we don't actually have

1541
01:16:40,488 --> 01:16:43,909
to truncate them

1542
01:16:41,719 --> 01:16:45,230
we could have truncated the channel

1543
01:16:43,909 --> 01:16:46,399
count probably we didn't decide because

1544
01:16:45,229 --> 01:16:50,509
we had nothing else to store in that

1545
01:16:46,399 --> 01:16:54,469
room that we would have used there you

1546
01:16:50,510 --> 01:16:57,890
looking at this probably what we should

1547
01:16:54,469 --> 01:17:00,529
have done is weld the make a u16 channel

1548
01:16:57,890 --> 01:17:02,270
count in a u16 chain ID there's really

1549
01:17:00,529 --> 01:17:04,250
no need for those to both be 32 that's

1550
01:17:02,270 --> 01:17:08,800
just just just way too large there's no

1551
01:17:04,250 --> 01:17:08,800
point to that but

1552
01:17:24,689 --> 01:17:31,149
um so that's just kind of dumb but you

1553
01:17:28,539 --> 01:17:33,159
know no one's gonna care that's you know

1554
01:17:31,149 --> 01:17:34,869
you have these sounds that take up many

1555
01:17:33,159 --> 01:17:37,539
many kilobytes and then we just have

1556
01:17:34,869 --> 01:17:39,849
like sixteen wasted bits in here no

1557
01:17:37,539 --> 01:17:42,579
one's gonna care right it's not gonna

1558
01:17:39,850 --> 01:17:45,190
affect anything we can do with these so

1559
01:17:42,579 --> 01:17:51,159
it's not important to get it right but

1560
01:17:45,189 --> 01:17:58,839
you know it's just worth noting it's

1561
01:17:51,159 --> 01:18:01,300
dumb regardless so anyway getting rid of

1562
01:17:58,840 --> 01:18:06,219
all this stuff I don't think we need any

1563
01:18:01,300 --> 01:18:07,179
of this that can go so what we really

1564
01:18:06,219 --> 01:18:10,000
need to do here is just make sure that

1565
01:18:07,179 --> 01:18:13,449
it's labeled as a sound the rest of this

1566
01:18:10,000 --> 01:18:16,149
stuff is all exactly the same this stuff

1567
01:18:13,448 --> 01:18:19,809
is also set to zero all that stuff gonna

1568
01:18:16,149 --> 01:18:21,519
be exactly the same so again I do think

1569
01:18:19,810 --> 01:18:24,460
we could share a lot of this code it's

1570
01:18:21,520 --> 01:18:28,719
it's very very highly correlated to the

1571
01:18:24,460 --> 01:18:31,569
previous routine the bitmap version of

1572
01:18:28,719 --> 01:18:34,210
this so it does seem like we probably

1573
01:18:31,569 --> 01:18:36,159
want to pull some of this out so that's

1574
01:18:34,210 --> 01:18:37,750
not so that you know if we do need to

1575
01:18:36,159 --> 01:18:40,988
modify it change the way it was being

1576
01:18:37,750 --> 01:18:42,189
done that it won't you know we don't

1577
01:18:40,988 --> 01:18:44,409
have to remember to do it in whole bunch

1578
01:18:42,189 --> 01:18:48,609
of different places so I think we're

1579
01:18:44,409 --> 01:18:51,698
down to mostly the end now where we just

1580
01:18:48,609 --> 01:19:00,069
need to say okay the chain part of

1581
01:18:51,698 --> 01:19:02,379
things when we actually do that so a

1582
01:19:00,069 --> 01:19:05,448
couple things

1583
01:19:02,380 --> 01:19:05,449
[Music]

1584
01:19:05,829 --> 01:19:10,819
I'm thinking in my head as well that

1585
01:19:08,539 --> 01:19:16,460
actually we should reuse the grid system

1586
01:19:10,819 --> 01:19:22,039
here too we could have the grid actually

1587
01:19:16,460 --> 01:19:30,739
correspond to the channels that kind of

1588
01:19:22,039 --> 01:19:35,180
sounds somewhat compelling to me I like

1589
01:19:30,739 --> 01:19:36,679
that I think we should probably embrace

1590
01:19:35,180 --> 01:19:38,920
that that might require a couple of

1591
01:19:36,680 --> 01:19:42,590
changes but I think that might be nice

1592
01:19:38,920 --> 01:19:46,550
alright so going through here when we

1593
01:19:42,590 --> 01:19:49,909
actually have to fill out the chain data

1594
01:19:46,550 --> 01:19:55,489
we actually do know what that would be

1595
01:19:49,909 --> 01:19:58,760
and if this case gets hit that's when we

1596
01:19:55,489 --> 01:20:02,389
know we need to chain so what I propose

1597
01:19:58,760 --> 01:20:06,170
is we just have a chain value here we

1598
01:20:02,390 --> 01:20:09,170
set the chain value right off the bat to

1599
01:20:06,170 --> 01:20:12,319
be none and so normally when you now put

1600
01:20:09,170 --> 01:20:14,539
a sound it'll just get a none chain but

1601
01:20:12,319 --> 01:20:16,609
then when we come in here if we had to

1602
01:20:14,539 --> 01:20:21,019
clip that down to a max ammo count we

1603
01:20:16,609 --> 01:20:24,109
know that will go more times and so

1604
01:20:21,020 --> 01:20:26,540
we'll want to do an advance on that one

1605
01:20:24,109 --> 01:20:28,219
that way when we get down here it's time

1606
01:20:26,539 --> 01:20:31,550
to store it we just know what it was

1607
01:20:28,220 --> 01:20:33,199
that we needed to store so finally what

1608
01:20:31,550 --> 01:20:36,560
I guess I would say is now we can make

1609
01:20:33,199 --> 01:20:39,739
the while loop happen we can just say

1610
01:20:36,560 --> 01:20:45,530
well there were any samples keep going

1611
01:20:39,739 --> 01:20:47,389
and I think we're done so that's a

1612
01:20:45,529 --> 01:20:49,369
pretty stable way to output that that

1613
01:20:47,390 --> 01:20:55,310
looks pretty good I'm gonna slap it to

1614
01:20:49,369 --> 01:20:57,829
do in here because at some point we're

1615
01:20:55,310 --> 01:21:00,350
gonna know what we want our block size

1616
01:20:57,829 --> 01:21:02,199
for streaming to be because we'll have

1617
01:21:00,350 --> 01:21:06,260
some idea about how the streaming reads

1618
01:21:02,199 --> 01:21:08,149
perform and we'll want to say look use

1619
01:21:06,260 --> 01:21:09,650
this big of a buffer because that's what

1620
01:21:08,149 --> 01:21:12,109
we're using for backing so they'll be

1621
01:21:09,649 --> 01:21:15,170
something clearer about this at some

1622
01:21:12,109 --> 01:21:18,409
point right and so that's when we want

1623
01:21:15,170 --> 01:21:22,130
to take a look at that now when we do

1624
01:21:18,409 --> 01:21:26,029
the sort of output of the sounds here

1625
01:21:22,130 --> 01:21:27,890
remember they are not tagged so that's

1626
01:21:26,029 --> 01:21:30,889
the other end of this that we have to

1627
01:21:27,890 --> 01:21:37,670
make work and you can see that there is

1628
01:21:30,890 --> 01:21:39,110
part of it that won't work in fact let's

1629
01:21:37,670 --> 01:21:41,750
actually just go do it because we're

1630
01:21:39,109 --> 01:21:43,369
gonna have to so the part that won't

1631
01:21:41,750 --> 01:21:48,140
work is the fact that we split these up

1632
01:21:43,369 --> 01:21:49,579
into multiple channels and assets so we

1633
01:21:48,140 --> 01:21:52,760
kind of need to actually make this be

1634
01:21:49,579 --> 01:21:56,090
aware of that so in here where we do our

1635
01:21:52,760 --> 01:22:00,230
process audio import for each channel we

1636
01:21:56,090 --> 01:22:03,079
need to create a new asset ID and and

1637
01:22:00,229 --> 01:22:05,599
you can see that happening in here it's

1638
01:22:03,079 --> 01:22:09,500
not going to work properly right and

1639
01:22:05,600 --> 01:22:14,690
this asset index needs to this asset

1640
01:22:09,500 --> 01:22:18,409
index needs to increment as we go per

1641
01:22:14,689 --> 01:22:26,319
channel and per trunk so really this

1642
01:22:18,409 --> 01:22:29,359
part here this is pretty tricky

1643
01:22:26,319 --> 01:22:34,009
we need to reserve effectively a block

1644
01:22:29,359 --> 01:22:37,429
of assets and so as we go each time we

1645
01:22:34,010 --> 01:22:41,500
need to like set to incrementing asset

1646
01:22:37,430 --> 01:22:41,500
IDs as we go right

1647
01:22:57,689 --> 01:23:03,518
the only tricky part about that is right

1648
01:23:01,328 --> 01:23:07,078
now we don't actually compute how many

1649
01:23:03,519 --> 01:23:12,219
asset IDs we're gonna need ahead of time

1650
01:23:07,078 --> 01:23:15,009
but it's not particularly hard to do so

1651
01:23:12,219 --> 01:23:18,458
maybe we should just do that so let's

1652
01:23:15,010 --> 01:23:21,489
jump to reserve asset here and you can

1653
01:23:18,458 --> 01:23:22,988
see that when we do this we just have to

1654
01:23:21,488 --> 01:23:28,058
you know we would just need a thing

1655
01:23:22,988 --> 01:23:30,728
that's like normally just reserves a

1656
01:23:28,059 --> 01:23:35,679
single asset so we would want to say if

1657
01:23:30,729 --> 01:23:38,530
asset count plus asset count is less

1658
01:23:35,679 --> 01:23:39,340
than or equal to max asset count then

1659
01:23:38,529 --> 01:23:42,488
we're good to go

1660
01:23:39,340 --> 01:23:44,559
otherwise it's an error so in here when

1661
01:23:42,488 --> 01:23:47,828
we get this and we reserve one of these

1662
01:23:44,559 --> 01:23:50,949
what we could do now is say oh well the

1663
01:23:47,828 --> 01:23:52,779
results going to be asset count but then

1664
01:23:50,948 --> 01:23:54,279
we're gonna add an arbitrary number to

1665
01:23:52,779 --> 01:23:58,149
it so we basically reserve these in

1666
01:23:54,279 --> 01:24:00,819
blocks so then when we get this asset

1667
01:23:58,149 --> 01:24:02,348
index here that asset index is actually

1668
01:24:00,819 --> 01:24:04,359
going to be something a little bit more

1669
01:24:02,349 --> 01:24:07,420
Squinkie

1670
01:24:04,359 --> 01:24:13,689
so outside of here we have to do a

1671
01:24:07,420 --> 01:24:14,949
contiguous asset block acquire right and

1672
01:24:13,689 --> 01:24:16,899
so we have to think about this a little

1673
01:24:14,948 --> 01:24:18,788
bit harder as a result because that

1674
01:24:16,899 --> 01:24:20,558
asset index is actually a block of asset

1675
01:24:18,788 --> 01:24:23,819
indices and then we go through getting

1676
01:24:20,559 --> 01:24:23,820
them out one by one

1677
01:24:32,960 --> 01:24:38,029
what I don't really have a good way of

1678
01:24:35,448 --> 01:24:41,529
doing here is knowing whether I need to

1679
01:24:38,029 --> 01:24:41,529
rewrite them or not

1680
01:24:51,149 --> 01:24:55,469
but I think we could just let the

1681
01:24:52,979 --> 01:24:57,419
routine below do that like it can just

1682
01:24:55,470 --> 01:25:00,090
look at each individual asset and see

1683
01:24:57,420 --> 01:25:01,859
what part of it it needs to rewrite like

1684
01:25:00,090 --> 01:25:03,360
whether it needs to get new data or

1685
01:25:01,859 --> 01:25:05,880
whether can just rewrite to the same

1686
01:25:03,359 --> 01:25:12,859
location because it's the it's not going

1687
01:25:05,880 --> 01:25:15,720
to change size or something seems okay

1688
01:25:12,859 --> 01:25:20,099
so in here where we do asset index file

1689
01:25:15,720 --> 01:25:23,699
and we grab out just the 0 0 1 I really

1690
01:25:20,100 --> 01:25:26,010
we just need to know inside this piece

1691
01:25:23,699 --> 01:25:30,539
of information how many of these in a

1692
01:25:26,010 --> 01:25:32,159
run we're gonna do and we know that here

1693
01:25:30,539 --> 01:25:43,229
the thing that's gonna be tricky is in

1694
01:25:32,159 --> 01:25:45,000
the stamping so so in the stamping when

1695
01:25:43,229 --> 01:25:49,459
we go through each of these things to do

1696
01:25:45,000 --> 01:25:54,449
the the tag the problem that we have is

1697
01:25:49,460 --> 01:25:57,000
this that array of tags there that we're

1698
01:25:54,449 --> 01:26:00,389
storing in that asset source file as a

1699
01:25:57,000 --> 01:26:08,420
piece of information we don't really

1700
01:26:00,390 --> 01:26:13,369
have a way to do that for for sounds

1701
01:26:08,420 --> 01:26:18,289
because they could have arbitrarily long

1702
01:26:13,369 --> 01:26:21,449
asset chains associated with them and so

1703
01:26:18,289 --> 01:26:23,189
I'm not sure how to harmonize these two

1704
01:26:21,449 --> 01:26:27,000
paths because we basically want to call

1705
01:26:23,189 --> 01:26:29,429
the same thing and it almost works so

1706
01:26:27,000 --> 01:26:34,289
for any sound that wasn't streaming it

1707
01:26:29,430 --> 01:26:37,050
would work and we could even use the the

1708
01:26:34,289 --> 01:26:41,159
file asset indices to just record the

1709
01:26:37,050 --> 01:26:46,619
channels so that almost works but we

1710
01:26:41,159 --> 01:26:48,510
just don't have a run count for them and

1711
01:26:46,619 --> 01:26:51,739
I guess what we would need to do is add

1712
01:26:48,510 --> 01:26:51,739
that in here

1713
01:26:54,828 --> 01:27:10,908
but yeah oh wait

1714
01:27:07,029 --> 01:27:15,500
I'm over complicating this aren't I we

1715
01:27:10,908 --> 01:27:17,689
don't need to apply any tags at all to

1716
01:27:15,500 --> 01:27:21,408
the asset chunks that are just streaming

1717
01:27:17,689 --> 01:27:23,899
chunks because only the first chunk gets

1718
01:27:21,408 --> 01:27:27,429
pulled based on tag and then it just

1719
01:27:23,899 --> 01:27:37,848
advances to the next chunk so actually

1720
01:27:27,429 --> 01:27:44,469
we're fine yeah that that's actually not

1721
01:27:37,849 --> 01:27:47,750
a problem at all I take it back entirely

1722
01:27:44,469 --> 01:27:51,800
so really all we need to do is do this

1723
01:27:47,750 --> 01:27:55,809
per channel so inside here where we go

1724
01:27:51,800 --> 01:27:59,360
oh you know while sample count remaining

1725
01:27:55,809 --> 01:28:01,639
right before that part this is where we

1726
01:27:59,359 --> 01:28:04,549
would reserve the number of assets that

1727
01:28:01,639 --> 01:28:07,639
we think we need for the sample count

1728
01:28:04,550 --> 01:28:11,929
that we have right and so we would just

1729
01:28:07,639 --> 01:28:16,389
say like total chunk count and we would

1730
01:28:11,929 --> 01:28:16,389
say however many sound samples there are

1731
01:28:17,198 --> 01:28:28,189
whatever that max sample count is let's

1732
01:28:20,179 --> 01:28:30,529
do a roundup right so however many

1733
01:28:28,189 --> 01:28:32,479
chunks we're gonna have is this many

1734
01:28:30,529 --> 01:28:33,920
right because we're gonna when we do

1735
01:28:32,479 --> 01:28:40,058
that divide we know that we're gonna

1736
01:28:33,920 --> 01:28:40,059
have a rounded up number of chunks right

1737
01:28:41,050 --> 01:28:47,570
get that total chunk count reserve that

1738
01:28:43,609 --> 01:28:52,420
many assets right and so in here when we

1739
01:28:47,569 --> 01:28:56,058
get out which asset index we're using I

1740
01:28:52,420 --> 01:28:58,670
don't have a way of knowing whether this

1741
01:28:56,059 --> 01:29:01,969
audio can be used again the way that it

1742
01:28:58,670 --> 01:29:04,578
was because unless we actually stored

1743
01:29:01,969 --> 01:29:07,219
something in there that said how many it

1744
01:29:04,578 --> 01:29:07,759
was we actually can't figure that out I

1745
01:29:07,219 --> 01:29:12,770
don't

1746
01:29:07,760 --> 01:29:16,010
think right because just knowing the

1747
01:29:12,770 --> 01:29:23,840
base index we would have to go read the

1748
01:29:16,010 --> 01:29:33,369
chain length ahead of time which I guess

1749
01:29:23,840 --> 01:29:33,369
we could just do yeah I actually I

1750
01:29:37,180 --> 01:29:47,869
suppose we could just do that just check

1751
01:29:41,359 --> 01:29:50,389
the chain length actually yeah okay so

1752
01:29:47,869 --> 01:29:53,720
what we would do is do this we just say

1753
01:29:50,390 --> 01:29:55,039
look if we don't get an asset index then

1754
01:29:53,720 --> 01:29:59,000
we've got to go like that

1755
01:29:55,039 --> 01:30:02,840
and we've got to get you know out of the

1756
01:29:59,000 --> 01:30:04,279
asset store a chunk that's as many you

1757
01:30:02,840 --> 01:30:06,170
know we've got to get a block of

1758
01:30:04,279 --> 01:30:10,219
allocated asset and this is contiguous

1759
01:30:06,170 --> 01:30:12,800
that are as many as we need we can look

1760
01:30:10,220 --> 01:30:15,500
and see if from this asset index could

1761
01:30:12,800 --> 01:30:19,130
would it have reserved as many as we

1762
01:30:15,500 --> 01:30:21,319
wanted it to right we can't actually do

1763
01:30:19,130 --> 01:30:25,130
that because all we would have to do is

1764
01:30:21,319 --> 01:30:28,099
look through each individual one and see

1765
01:30:25,130 --> 01:30:34,609
whether or not it actually can be

1766
01:30:28,100 --> 01:30:42,680
chained right so in here when we get a

1767
01:30:34,609 --> 01:30:47,239
sound asset right in here if we just got

1768
01:30:42,680 --> 01:30:52,039
each asset as we go and verify that that

1769
01:30:47,239 --> 01:30:54,769
each one is set to chaining um I think

1770
01:30:52,039 --> 01:30:56,659
that's all we need right we don't really

1771
01:30:54,770 --> 01:30:59,570
need to do anything else and then we can

1772
01:30:56,659 --> 01:31:04,369
just save the exact we can just use the

1773
01:30:59,569 --> 01:31:08,199
exact set of asset IDs that we want so

1774
01:31:04,369 --> 01:31:12,819
in here we would just say for you know

1775
01:31:08,199 --> 01:31:14,889
shunk index equals zero chunk index is

1776
01:31:12,819 --> 01:31:19,750
less than blah plus plus chunk index

1777
01:31:14,890 --> 01:31:24,730
right and we would say look we want to

1778
01:31:19,750 --> 01:31:27,039
go up through we don't need to check the

1779
01:31:24,729 --> 01:31:29,619
last chunk because we don't care what

1780
01:31:27,039 --> 01:31:31,899
that's set to but for all of the other

1781
01:31:29,619 --> 01:31:37,930
chunks we just need to get them out of

1782
01:31:31,899 --> 01:31:39,759
the file which is this right and we need

1783
01:31:37,930 --> 01:31:42,520
to make sure that they're actually set

1784
01:31:39,760 --> 01:31:47,829
to streaming so we need to make sure

1785
01:31:42,520 --> 01:31:51,790
that like this thing is set to load its

1786
01:31:47,829 --> 01:31:59,519
next chunk so if we look at one of these

1787
01:31:51,789 --> 01:31:59,519
assets which is HHH sound dot chain if

1788
01:32:00,479 --> 01:32:07,479
it's equal we're fine if it's not equal

1789
01:32:03,670 --> 01:32:12,550
to what we want then we're done and you

1790
01:32:07,479 --> 01:32:14,469
know all bets are off right so basically

1791
01:32:12,550 --> 01:32:16,630
what we're doing is we're saying okay we

1792
01:32:14,470 --> 01:32:20,940
know we need this many contiguous at

1793
01:32:16,630 --> 01:32:23,230
contiguous asset indexes indices right

1794
01:32:20,939 --> 01:32:25,599
because we're gonna have to store this

1795
01:32:23,229 --> 01:32:28,629
sound as a block of that many assets

1796
01:32:25,600 --> 01:32:32,380
when we broke it up so what we want to

1797
01:32:28,630 --> 01:32:35,109
do is look at the current chain that we

1798
01:32:32,380 --> 01:32:37,810
recorded is it that long if it's more

1799
01:32:35,109 --> 01:32:39,639
than that long great if it's less than

1800
01:32:37,810 --> 01:32:43,690
that long then we need to allocate a new

1801
01:32:39,640 --> 01:32:47,190
block right so just change the chain and

1802
01:32:43,689 --> 01:32:50,049
see if it goes that long problem solved

1803
01:32:47,189 --> 01:32:52,210
so looking in here if I go up to file

1804
01:32:50,050 --> 01:32:56,260
formats and I put loop in there and we

1805
01:32:52,210 --> 01:32:58,300
go that will give us whether or not we

1806
01:32:56,260 --> 01:33:00,010
need to allocate new absently if we do

1807
01:32:58,300 --> 01:33:03,250
need to allocate a new asset index off

1808
01:33:00,010 --> 01:33:08,440
we go and we can store which one you

1809
01:33:03,250 --> 01:33:12,069
know we can do reuse asset equals false

1810
01:33:08,439 --> 01:33:15,569
or true or whatever I don't know and

1811
01:33:12,069 --> 01:33:15,569
then we can just do it here

1812
01:33:17,390 --> 01:33:22,760
so then when we come down in here we can

1813
01:33:20,359 --> 01:33:25,699
just do if you're if we're supposed to

1814
01:33:22,760 --> 01:33:29,570
reuse the asset block here then get it

1815
01:33:25,699 --> 01:33:32,269
out otherwise don't bother and we would

1816
01:33:29,569 --> 01:33:34,039
just need a way of making sure the asset

1817
01:33:32,270 --> 01:33:37,700
index gets updated appropriately which

1818
01:33:34,039 --> 01:33:45,710
is pretty simple to do so in here we

1819
01:33:37,699 --> 01:33:48,079
would just do this that gets out the one

1820
01:33:45,710 --> 01:33:49,850
from that chain and so if we're going to

1821
01:33:48,079 --> 01:33:52,850
reuse it we reuse it if not we just

1822
01:33:49,850 --> 01:33:55,039
start with nothing and off we go the

1823
01:33:52,850 --> 01:33:57,800
asset index at the end of this has to be

1824
01:33:55,039 --> 01:34:00,289
incremented because every time we're

1825
01:33:57,800 --> 01:34:02,449
gonna use a different slot and then

1826
01:34:00,289 --> 01:34:04,670
we're done so really the only thing

1827
01:34:02,449 --> 01:34:08,500
we're left with now is that this part

1828
01:34:04,670 --> 01:34:10,399
here it needs to take the channel index

1829
01:34:08,500 --> 01:34:12,529
and that's fine

1830
01:34:10,399 --> 01:34:16,909
what that means is we do have a maximum

1831
01:34:12,529 --> 01:34:25,699
channel count it's 64 channels like I

1832
01:34:16,909 --> 01:34:26,630
could even do it this way right what's

1833
01:34:25,699 --> 01:34:28,970
that

1834
01:34:26,630 --> 01:34:44,840
where's that where's that at show me

1835
01:34:28,970 --> 01:34:48,320
where that is at so what I could do even

1836
01:34:44,840 --> 01:34:51,590
is is address it like that right so we

1837
01:34:48,319 --> 01:34:55,729
can actually use asset import grid max

1838
01:34:51,590 --> 01:35:04,190
times asset grid port in max grid max

1839
01:34:55,729 --> 01:35:06,679
worth of channels we do still need to do

1840
01:35:04,189 --> 01:35:11,059
a check to make sure that we don't have

1841
01:35:06,680 --> 01:35:14,539
too many of those because that is still

1842
01:35:11,060 --> 01:35:18,320
a thing that could happen right soak in

1843
01:35:14,539 --> 01:35:21,590
here like we do have one other asset

1844
01:35:18,319 --> 01:35:25,239
memory problem of this error is not in

1845
01:35:21,590 --> 01:35:38,360
the right place either it should be

1846
01:35:25,239 --> 01:35:42,439
probably here if we didn't get one right

1847
01:35:38,359 --> 01:35:45,559
so if asset index isn't true we just do

1848
01:35:42,439 --> 01:35:50,359
the out here and say we ran out of

1849
01:35:45,560 --> 01:35:52,130
memory so think that's all good I don't

1850
01:35:50,359 --> 01:35:55,969
see anything else particularly

1851
01:35:52,130 --> 01:36:02,000
problematic about that everything seems

1852
01:35:55,970 --> 01:36:05,180
good there yeah so the only thing we

1853
01:36:02,000 --> 01:36:08,600
don't have is we currently don't have a

1854
01:36:05,180 --> 01:36:21,590
way of oh and also the error can happen

1855
01:36:08,600 --> 01:36:23,900
here too right so we need to clamp that

1856
01:36:21,590 --> 01:36:25,909
and we know the max channel count is

1857
01:36:23,899 --> 01:36:32,569
just however much we could have stored

1858
01:36:25,909 --> 01:36:34,789
in here so asset import grid max squared

1859
01:36:32,569 --> 01:36:37,609
that's however many things we can fit

1860
01:36:34,789 --> 01:36:39,229
and still flush through the pipeline I

1861
01:36:37,609 --> 01:36:40,519
you could argue that we should probably

1862
01:36:39,229 --> 01:36:44,419
that we maybe should have done this a

1863
01:36:40,520 --> 01:36:47,120
different way that could be true I don't

1864
01:36:44,420 --> 01:36:49,220
really know but you know just keeping

1865
01:36:47,119 --> 01:36:50,689
the pipelines simple or we might as well

1866
01:36:49,220 --> 01:36:54,579
not do anything too fancy

1867
01:36:50,689 --> 01:36:57,679
then the import grid tags side of things

1868
01:36:54,579 --> 01:37:00,739
that import grid tags can now have the

1869
01:36:57,680 --> 01:37:03,170
channel tag included on here so back

1870
01:37:00,739 --> 01:37:07,550
where we were actually gonna stamp this

1871
01:37:03,170 --> 01:37:10,789
guy so you know in the import path right

1872
01:37:07,550 --> 01:37:13,369
where we come through here oops sorry

1873
01:37:10,789 --> 01:37:16,090
that's the parser when we do update

1874
01:37:13,369 --> 01:37:19,970
asset metadata you know what I mean

1875
01:37:16,090 --> 01:37:22,760
that's got the the grid tags sort of

1876
01:37:19,970 --> 01:37:25,760
baked into it so you can see we've got

1877
01:37:22,760 --> 01:37:28,369
the append tags here on the import tag

1878
01:37:25,760 --> 01:37:30,530
array that's what we parse out and then

1879
01:37:28,369 --> 01:37:33,019
we have the grid tags here and that's

1880
01:37:30,529 --> 01:37:34,899
what comes from like the type of file so

1881
01:37:33,020 --> 01:37:36,130
this grid tag just needs to be set to

1882
01:37:34,899 --> 01:37:38,710
what

1883
01:37:36,130 --> 01:37:41,250
normally want to create four sounds

1884
01:37:38,710 --> 01:37:44,739
which is channel ideas for everything

1885
01:37:41,250 --> 01:37:49,420
and so that's pretty easy for us to do

1886
01:37:44,738 --> 01:37:51,939
we just need to save a version of this

1887
01:37:49,420 --> 01:37:55,000
that's like our global audio version of

1888
01:37:51,939 --> 01:37:56,649
that right and so that's what we would

1889
01:37:55,000 --> 01:37:57,880
need to do next time to get those

1890
01:37:56,649 --> 01:38:02,259
channel things correct

1891
01:37:57,880 --> 01:38:05,199
so effectively like in this h HT context

1892
01:38:02,260 --> 01:38:07,300
here like this part right what we would

1893
01:38:05,198 --> 01:38:10,479
want to do is have a thing that's like

1894
01:38:07,300 --> 01:38:20,110
these are the import grid tags that we

1895
01:38:10,479 --> 01:38:22,178
use like this like that right and so in

1896
01:38:20,109 --> 01:38:24,039
here where we come through and say oh

1897
01:38:22,179 --> 01:38:28,079
it's a sound or music we would just say

1898
01:38:24,039 --> 01:38:30,908
oh good just use the audio channel tags

1899
01:38:28,079 --> 01:38:33,279
and that'll stamp everything with the

1900
01:38:30,908 --> 01:38:39,670
correct tags for a channel as we go

1901
01:38:33,279 --> 01:38:41,738
right and that would be it so everything

1902
01:38:39,670 --> 01:38:43,329
else would just work and the metadata

1903
01:38:41,738 --> 01:38:45,009
update would just correctly stamp

1904
01:38:43,329 --> 01:38:47,380
everything which is awesome and I think

1905
01:38:45,010 --> 01:38:51,119
that's what we want right

1906
01:38:47,380 --> 01:38:51,119
that's source file

1907
01:38:53,488 --> 01:39:15,388
that's an audio ID by the way so sorry

1908
01:39:08,158 --> 01:39:15,388
why did I call it sound ID I don't know

1909
01:39:17,038 --> 01:39:28,268
just looping through here a sample count

1910
01:39:21,569 --> 01:39:42,698
it's true just make sure all that gets

1911
01:39:28,269 --> 01:39:48,940
lined up properly good I think that's it

1912
01:39:42,698 --> 01:39:53,018
I don't think there's anything else we

1913
01:39:48,939 --> 01:39:55,899
got to do there so I'm gonna call that a

1914
01:39:53,019 --> 01:39:57,159
day and so we've got I think we actually

1915
01:39:55,899 --> 01:40:01,808
have almost other call in there I do

1916
01:39:57,158 --> 01:40:11,649
need to actually create those channel so

1917
01:40:01,809 --> 01:40:14,139
I need to do this I need to make that

1918
01:40:11,649 --> 01:40:19,328
grid with the stamped ones but that's it

1919
01:40:14,139 --> 01:40:21,609
and so what I would like to do is go

1920
01:40:19,328 --> 01:40:24,969
ahead and save that for next weekend

1921
01:40:21,609 --> 01:40:26,228
everything seems to be in place so it's

1922
01:40:24,969 --> 01:40:27,609
really just a question of let's go

1923
01:40:26,229 --> 01:40:29,349
through and actually get out the

1924
01:40:27,609 --> 01:40:30,639
fine-tooth comb to bug it get it working

1925
01:40:29,349 --> 01:40:33,670
properly but then I think we're

1926
01:40:30,639 --> 01:40:36,729
importing sounds properly and music and

1927
01:40:33,670 --> 01:40:40,090
streaming really so everything's in

1928
01:40:36,729 --> 01:40:41,170
place and so next weekend we should be

1929
01:40:40,090 --> 01:40:44,019
able to actually go through there and

1930
01:40:41,170 --> 01:40:45,639
and get it working let's go ahead and go

1931
01:40:44,019 --> 01:40:50,110
to Q&amp;A if there's any questions about

1932
01:40:45,639 --> 01:40:52,409
what we were doing there let's get those

1933
01:40:50,109 --> 01:40:52,408
going

1934
01:41:08,260 --> 01:41:15,909
not related but do you have any thoughts

1935
01:41:10,550 --> 01:41:15,909
on Pony Lang nope I've never used it

1936
01:41:56,210 --> 01:42:01,769
no questions and that's good

1937
01:42:00,118 --> 01:42:02,788
flit let's hippo how are you feeling

1938
01:42:01,769 --> 01:42:05,010
about the way the asset system is

1939
01:42:02,788 --> 01:42:14,729
working out so far it's pretty good I

1940
01:42:05,010 --> 01:42:20,489
think I I don't know about the grid

1941
01:42:14,729 --> 01:42:23,238
based import idea really you know it's

1942
01:42:20,488 --> 01:42:26,308
basically I guess you know spritesheet

1943
01:42:23,238 --> 01:42:28,529
import thing I think it makes it easier

1944
01:42:26,309 --> 01:42:30,840
for the artists but I don't know so I'm

1945
01:42:28,529 --> 01:42:33,479
not not sure if that cuz we could have

1946
01:42:30,840 --> 01:42:36,719
just had you save out individual pngs or

1947
01:42:33,479 --> 01:42:37,979
something right so I'm not sure I don't

1948
01:42:36,719 --> 01:42:42,439
know if that was the right decision not

1949
01:42:37,979 --> 01:42:42,439
I like the way it's shaping up so far

1950
01:42:43,788 --> 01:42:50,578
basically the the there's a few things

1951
01:42:48,118 --> 01:42:51,960
about you know how the import goes that

1952
01:42:50,578 --> 01:42:54,090
you know we definitely could do better

1953
01:42:51,960 --> 01:42:55,349
if you know if I was working 8 hours a

1954
01:42:54,090 --> 01:42:57,090
day on this there's a bunch of things

1955
01:42:55,349 --> 01:43:01,940
I'd clean up but you know you can only

1956
01:42:57,090 --> 01:43:01,940
do what you can do but it's pretty good

1957
01:43:08,970 --> 01:43:13,150
what does good documentation look like I

1958
01:43:11,380 --> 01:43:14,800
think I've heard about you and John talk

1959
01:43:13,149 --> 01:43:16,299
about documentation being really bad and

1960
01:43:14,800 --> 01:43:17,800
soul-sucking when it's auto-generated so

1961
01:43:16,300 --> 01:43:20,430
what does good human documentation look

1962
01:43:17,800 --> 01:43:22,480
like for program reason for users I

1963
01:43:20,430 --> 01:43:25,150
guess what I say is I do like

1964
01:43:22,479 --> 01:43:27,069
auto-generated documentation for one

1965
01:43:25,149 --> 01:43:28,869
aspect of things which is I like

1966
01:43:27,069 --> 01:43:30,399
everything to be hyperlinked and that's

1967
01:43:28,869 --> 01:43:32,949
something that an auto generator can do

1968
01:43:30,399 --> 01:43:36,579
well so I do like that part

1969
01:43:32,949 --> 01:43:38,829
you know like MSDN actually used to do

1970
01:43:36,579 --> 01:43:41,769
this pretty well it kind of got a lot

1971
01:43:38,829 --> 01:43:44,260
worse but if you look at something like

1972
01:43:41,770 --> 01:43:44,740
you know create file X or something

1973
01:43:44,260 --> 01:43:48,760
right

1974
01:43:44,739 --> 01:43:51,969
we're sorry create file a it's fine so

1975
01:43:48,760 --> 01:43:54,070
it used to be I think and maybe I could

1976
01:43:51,970 --> 01:43:56,020
be maybe I'm making this up but you know

1977
01:43:54,069 --> 01:43:57,460
these were hyperlinked so you can click

1978
01:43:56,020 --> 01:44:03,270
on handle and get to the definition of

1979
01:43:57,460 --> 01:44:06,880
handle right when you come down in here

1980
01:44:03,270 --> 01:44:10,840
sometimes that happens so you know it's

1981
01:44:06,880 --> 01:44:12,159
like oh I go down to security attributes

1982
01:44:10,840 --> 01:44:13,930
and it's hyperlinked so I can go to that

1983
01:44:12,159 --> 01:44:16,710
and that's good

1984
01:44:13,930 --> 01:44:20,350
but I prefer all of those to really be

1985
01:44:16,710 --> 01:44:22,869
hyperlinked as well right and I like

1986
01:44:20,350 --> 01:44:24,880
that aspect of auto-generated right and

1987
01:44:22,869 --> 01:44:26,470
see also and those sorts of things I

1988
01:44:24,880 --> 01:44:27,880
like having a really dense

1989
01:44:26,470 --> 01:44:30,960
interconnectivity so I can just click

1990
01:44:27,880 --> 01:44:34,300
around what I don't love about

1991
01:44:30,960 --> 01:44:36,369
auto-generated is that when I need

1992
01:44:34,300 --> 01:44:40,600
documentation and this is not

1993
01:44:36,369 --> 01:44:42,659
necessarily a popular opinion so you

1994
01:44:40,600 --> 01:44:45,520
know I'm talking about my preference I

1995
01:44:42,659 --> 01:44:49,930
actually don't like this kind of doc you

1996
01:44:45,520 --> 01:44:53,770
people seem to like it I don't I don't

1997
01:44:49,930 --> 01:44:55,900
need you to tell me that LPC stur LP

1998
01:44:53,770 --> 01:44:57,310
file name is the file name right a lot

1999
01:44:55,899 --> 01:45:01,929
of times I see this documentation it's

2000
01:44:57,310 --> 01:45:03,820
like DD word desire to access the

2001
01:45:01,930 --> 01:45:05,350
desired access right and it's like I

2002
01:45:03,819 --> 01:45:06,670
don't need you to tell me that what I

2003
01:45:05,350 --> 01:45:10,510
need you to tell me is all the stuff I

2004
01:45:06,670 --> 01:45:13,510
can't tell by looking at this prototype

2005
01:45:10,510 --> 01:45:15,699
right so what I want to know is stuff

2006
01:45:13,510 --> 01:45:17,380
like okay you know when do I need to

2007
01:45:15,699 --> 01:45:19,328
fill out each template file and how are

2008
01:45:17,380 --> 01:45:21,699
they related this other thing so

2009
01:45:19,328 --> 01:45:24,578
parameter Docs actually don't like what

2010
01:45:21,698 --> 01:45:26,529
I like is per concept Docs so you know

2011
01:45:24,578 --> 01:45:29,108
give me a section called template file

2012
01:45:26,529 --> 01:45:30,788
and say the creation disposition flag

2013
01:45:29,109 --> 01:45:32,889
and the template file parameter work

2014
01:45:30,788 --> 01:45:34,328
together in this way if it's set to 1

2015
01:45:32,889 --> 01:45:35,918
then the tempo files to be pointing to

2016
01:45:34,328 --> 01:45:37,748
this kind of template you know that sort

2017
01:45:35,918 --> 01:45:39,279
of stuff and go through each of the

2018
01:45:37,748 --> 01:45:42,069
things that I need to understand to use

2019
01:45:39,279 --> 01:45:44,469
this effectively that's what I like

2020
01:45:42,069 --> 01:45:47,198
furthermore I like that as a broader

2021
01:45:44,469 --> 01:45:50,979
thing for individual Docs for a function

2022
01:45:47,198 --> 01:45:53,529
as well so create file should have close

2023
01:45:50,979 --> 01:45:56,168
handle discussed in it like I'd like to

2024
01:45:53,529 --> 01:45:59,078
see that create file close handle or

2025
01:45:56,168 --> 01:46:01,689
create file read right close right so I

2026
01:45:59,078 --> 01:46:03,458
can see like oh okay so this is supposed

2027
01:46:01,689 --> 01:46:05,969
to be like a set of things that go

2028
01:46:03,458 --> 01:46:08,800
together I like seeing that like okay I

2029
01:46:05,969 --> 01:46:10,588
open one of these I close it in-between

2030
01:46:08,800 --> 01:46:14,679
I can read and write or whatever right

2031
01:46:10,588 --> 01:46:16,748
so bringing me into the sort of the

2032
01:46:14,679 --> 01:46:17,979
stuff that you know cuz you made the API

2033
01:46:16,748 --> 01:46:20,648
but I don't know because I've never seen

2034
01:46:17,979 --> 01:46:22,929
it before giving me like what those

2035
01:46:20,649 --> 01:46:27,280
bundles are and how they work together

2036
01:46:22,929 --> 01:46:29,019
that helps a lot to write so keeping

2037
01:46:27,279 --> 01:46:37,988
those things in mind I think are pretty

2038
01:46:29,019 --> 01:46:39,820
good right I'm gonna take this reverse

2039
01:46:37,988 --> 01:46:41,049
order so like UNIX man pages because

2040
01:46:39,819 --> 01:46:42,788
they leaned closer to conceptual

2041
01:46:41,050 --> 01:46:46,869
documentation would be more preferable

2042
01:46:42,788 --> 01:46:49,300
yeah actually I like it broken down by

2043
01:46:46,868 --> 01:46:52,808
concept not by element because the

2044
01:46:49,300 --> 01:46:55,029
elements often work together if if one

2045
01:46:52,809 --> 01:46:58,628
of these parameters is truly standalone

2046
01:46:55,029 --> 01:47:01,688
so maybe DW share mode doesn't depend on

2047
01:46:58,628 --> 01:47:03,729
anything then great document that by

2048
01:47:01,689 --> 01:47:05,499
itself because that's what it is but

2049
01:47:03,729 --> 01:47:07,269
assuming you've got pieces that work

2050
01:47:05,498 --> 01:47:10,238
together I want you to discuss them

2051
01:47:07,269 --> 01:47:11,498
together does the C code run faster in

2052
01:47:10,238 --> 01:47:13,118
general if you play something like width

2053
01:47:11,498 --> 01:47:16,448
divided by 2 and height divided 2 by the

2054
01:47:13,118 --> 01:47:20,518
left binary shift no the compiler knows

2055
01:47:16,448 --> 01:47:23,888
those pretty well so usually you won't

2056
01:47:20,519 --> 01:47:27,338
usually the code that's generated by

2057
01:47:23,889 --> 01:47:31,739
those two would be the same sometimes

2058
01:47:27,338 --> 01:47:31,738
not but most the time yes

2059
01:47:33,250 --> 01:47:37,909
let's see about meow hash Germany

2060
01:47:36,229 --> 01:47:39,739
resources on how you came up with it or

2061
01:47:37,909 --> 01:47:44,029
where I could learn more about designing

2062
01:47:39,739 --> 01:47:47,289
such I guess what I would say is if you

2063
01:47:44,029 --> 01:47:49,699
want to design your own hash function

2064
01:47:47,289 --> 01:47:54,409
there's a lot of things that you want to

2065
01:47:49,699 --> 01:47:57,229
learn and I would say first of all you'd

2066
01:47:54,409 --> 01:48:01,609
have to have a good reason for why you

2067
01:47:57,229 --> 01:48:02,989
wanted to do it like why why do you want

2068
01:48:01,609 --> 01:48:05,509
to design your own hash function might

2069
01:48:02,989 --> 01:48:07,159
be the first start if it's just for

2070
01:48:05,510 --> 01:48:10,699
curiosity's sake

2071
01:48:07,159 --> 01:48:12,260
that's great otherwise I would say don't

2072
01:48:10,699 --> 01:48:14,929
make a new hash function unless you have

2073
01:48:12,260 --> 01:48:18,890
a goal with me I actually was to try and

2074
01:48:14,930 --> 01:48:20,630
be fast right because there really

2075
01:48:18,890 --> 01:48:24,740
aren't any fast hash functions out there

2076
01:48:20,630 --> 01:48:26,270
that are any good and that's still kind

2077
01:48:24,739 --> 01:48:27,679
of the case now hash isn't as good as

2078
01:48:26,270 --> 01:48:30,680
I'd like we're trying to make a better

2079
01:48:27,680 --> 01:48:32,090
one that still runs at full speed we

2080
01:48:30,680 --> 01:48:33,530
haven't quite gotten there yet we

2081
01:48:32,090 --> 01:48:35,739
thought we sort of had but we hadn't

2082
01:48:33,529 --> 01:48:38,119
quite yet so we're still working on that

2083
01:48:35,739 --> 01:48:39,949
so we're hoping that the final version

2084
01:48:38,119 --> 01:48:41,420
of meow hash will be higher quality than

2085
01:48:39,949 --> 01:48:42,500
the current meow hash is while still

2086
01:48:41,420 --> 01:48:46,699
running it basically the same speed

2087
01:48:42,500 --> 01:48:48,979
that's what we're working on now but

2088
01:48:46,699 --> 01:48:51,050
again like it's a pretty complex topic

2089
01:48:48,979 --> 01:48:53,779
you probably want to work with a

2090
01:48:51,050 --> 01:48:55,100
cryptographer on it if you're really

2091
01:48:53,779 --> 01:49:00,139
trying to do things serious cuz you need

2092
01:48:55,100 --> 01:49:05,270
a lot of domain expertise that's what

2093
01:49:00,140 --> 01:49:08,000
I'd say do modern gamers have their own

2094
01:49:05,270 --> 01:49:09,830
sound synthesizer or do they just import

2095
01:49:08,000 --> 01:49:12,710
sounds from other software libraries I

2096
01:49:09,829 --> 01:49:15,829
would say it's a mix typically what

2097
01:49:12,710 --> 01:49:19,550
happens is you have a bunch of audio

2098
01:49:15,829 --> 01:49:22,550
editing software that you that your

2099
01:49:19,550 --> 01:49:25,070
sound designers are using to produce all

2100
01:49:22,550 --> 01:49:26,630
sorts of stuff but then in the game

2101
01:49:25,069 --> 01:49:28,789
engine you typically do have something

2102
01:49:26,630 --> 01:49:32,000
that's more advanced than handmade hero

2103
01:49:28,789 --> 01:49:35,019
so at the very least you typically have

2104
01:49:32,000 --> 01:49:38,300
a lot of sound effect sort of stuff like

2105
01:49:35,020 --> 01:49:39,890
adding reverb dynamically depending on

2106
01:49:38,300 --> 01:49:42,699
like where the player is in the world

2107
01:49:39,890 --> 01:49:42,700
you know

2108
01:49:43,470 --> 01:49:47,159
having sort of different things Oh a

2109
01:49:45,210 --> 01:49:48,989
grenade went off near the player so now

2110
01:49:47,159 --> 01:49:50,519
the sound is like their ears are a

2111
01:49:48,989 --> 01:49:52,649
little shocked and things are happening

2112
01:49:50,520 --> 01:49:54,450
there and so it alters the sound as it

2113
01:49:52,649 --> 01:49:57,329
comes out of that or oh we're slowing

2114
01:49:54,449 --> 01:49:58,559
down time and so that's a fact right so

2115
01:49:57,329 --> 01:50:01,319
typically at least have all those

2116
01:49:58,560 --> 01:50:03,930
effects whether or not a modern game

2117
01:50:01,319 --> 01:50:07,769
engine employs employ stuff like FM

2118
01:50:03,930 --> 01:50:10,920
synth that really depends more on the

2119
01:50:07,770 --> 01:50:13,110
game and whether it makes any sense for

2120
01:50:10,920 --> 01:50:15,119
them to be doing things like that but

2121
01:50:13,109 --> 01:50:19,529
but it can certainly happen really again

2122
01:50:15,119 --> 01:50:21,599
it just depends on what you're doing if

2123
01:50:19,529 --> 01:50:25,050
you're using an audio library nowadays

2124
01:50:21,600 --> 01:50:29,760
those audio libraries like you know rad

2125
01:50:25,050 --> 01:50:31,770
ships the mouth sound system and like

2126
01:50:29,760 --> 01:50:37,020
there's all kinds of stuff in there

2127
01:50:31,770 --> 01:50:38,910
right like I mean it's just who even

2128
01:50:37,020 --> 01:50:40,590
knows I'm not up-to-date on like a lot

2129
01:50:38,909 --> 01:50:45,720
of stuff is but there's tons of crap

2130
01:50:40,590 --> 01:50:47,520
like mixing modifications and how sounds

2131
01:50:45,720 --> 01:50:50,610
go together and all this sort of stuff

2132
01:50:47,520 --> 01:50:57,090
and then there's like F mods another

2133
01:50:50,609 --> 01:51:00,269
popular one and again like I mean honest

2134
01:50:57,090 --> 01:51:04,199
don't even know like all this garbage

2135
01:51:00,270 --> 01:51:07,920
right I mean there's a modulator for

2136
01:51:04,199 --> 01:51:09,119
thing I'm who knows right I haven't

2137
01:51:07,920 --> 01:51:14,850
looked at any of this stuff but

2138
01:51:09,119 --> 01:51:17,939
basically yeah you've got just tons of

2139
01:51:14,850 --> 01:51:19,500
crap going in to the sound system how

2140
01:51:17,939 --> 01:51:21,239
much of it's actually necessary or makes

2141
01:51:19,500 --> 01:51:25,170
any difference whatsoever is I think

2142
01:51:21,239 --> 01:51:27,750
probably up for debate but what most of

2143
01:51:25,170 --> 01:51:29,279
it is designed around is sound designers

2144
01:51:27,750 --> 01:51:31,529
come from a specific world and they

2145
01:51:29,279 --> 01:51:33,029
think in a specific way a lot of what

2146
01:51:31,529 --> 01:51:35,039
those tools are designed to do is to

2147
01:51:33,029 --> 01:51:38,939
make it as easy as possible for them to

2148
01:51:35,039 --> 01:51:42,180
put to utilize their vocabulary of how

2149
01:51:38,939 --> 01:51:44,189
to make sound sound good without them

2150
01:51:42,180 --> 01:51:47,450
having to learn like a whole bunch of

2151
01:51:44,189 --> 01:51:51,000
other things right so a lot of what

2152
01:51:47,449 --> 01:51:52,829
those tools try to enable is let's give

2153
01:51:51,000 --> 01:51:55,229
the sound designer an interface similar

2154
01:51:52,829 --> 01:51:57,210
to what they're used to in a sound

2155
01:51:55,229 --> 01:51:58,799
package for what happens in the

2156
01:51:57,210 --> 01:52:01,859
one time game so when they tweak stuff

2157
01:51:58,800 --> 01:52:06,079
they can tweak stuff correctly like

2158
01:52:01,859 --> 01:52:06,079
endow unintuitive Lee right

2159
01:52:11,810 --> 01:52:14,949
[Applause]

2160
01:52:24,488 --> 01:52:27,759
can you demonstrate Lipstadt how you

2161
01:52:25,988 --> 01:52:34,209
implemented see mirror version control

2162
01:52:27,760 --> 01:52:36,789
it seems very interesting I mean yeah

2163
01:52:34,210 --> 01:52:39,520
maybe we can go in at some point the

2164
01:52:36,789 --> 01:52:40,840
short answer is the the version of see

2165
01:52:39,520 --> 01:52:42,610
mirror that I use now which is a

2166
01:52:40,840 --> 01:52:43,779
complete rewrite it's a totally it has

2167
01:52:42,609 --> 01:52:50,769
nothing to do with the one that was

2168
01:52:43,779 --> 01:52:54,729
publicly released it's it's based on the

2169
01:52:50,770 --> 01:52:57,219
concept that you just in addition to

2170
01:52:54,729 --> 01:53:00,369
storing the versions of files you also

2171
01:52:57,219 --> 01:53:04,149
store the all of the metadata in a

2172
01:53:00,369 --> 01:53:08,289
separate database and every machine

2173
01:53:04,149 --> 01:53:10,960
keeps that and then two machines talk to

2174
01:53:08,289 --> 01:53:15,479
each other they just ask each other what

2175
01:53:10,960 --> 01:53:18,760
they've got and update it that way right

2176
01:53:15,479 --> 01:53:21,000
so it's really a mirroring system that

2177
01:53:18,760 --> 01:53:25,390
happens to also understand versioning

2178
01:53:21,000 --> 01:53:27,460
and it just works way better than

2179
01:53:25,390 --> 01:53:28,900
anything that I've used before because

2180
01:53:27,460 --> 01:53:31,090
instead of all this nonsense about

2181
01:53:28,899 --> 01:53:34,689
branching and merging in all this crap

2182
01:53:31,090 --> 01:53:36,940
it's just like look I don't care about

2183
01:53:34,689 --> 01:53:38,799
any of that stuff I realize there's

2184
01:53:36,939 --> 01:53:40,689
reasons for it but I don't want any that

2185
01:53:38,800 --> 01:53:42,640
I just want all my machines to stay in

2186
01:53:40,689 --> 01:53:44,079
sync and if I create multiple versions

2187
01:53:42,640 --> 01:53:46,030
of a file because I edit it in two

2188
01:53:44,079 --> 01:53:48,488
places just give me both vs. freaking

2189
01:53:46,029 --> 01:53:50,829
file and I'll deal with it later

2190
01:53:48,488 --> 01:53:52,659
right and so that's what it's designed

2191
01:53:50,829 --> 01:53:54,670
to do is to keep all your machines in

2192
01:53:52,659 --> 01:53:56,319
sync and if there's if you've done

2193
01:53:54,670 --> 01:53:58,899
different things on different machines

2194
01:53:56,319 --> 01:54:01,750
instead of making that be this big

2195
01:53:58,899 --> 01:54:04,210
emergency that breaks everything it just

2196
01:54:01,750 --> 01:54:04,930
puts them all in place and says look do

2197
01:54:04,210 --> 01:54:06,550
whatever you want

2198
01:54:04,930 --> 01:54:09,310
here's several versions of this file

2199
01:54:06,550 --> 01:54:11,980
because everyone changed it I'm gonna

2200
01:54:09,310 --> 01:54:13,390
leave yours and you just merge in these

2201
01:54:11,979 --> 01:54:17,199
changes when you get around to it

2202
01:54:13,390 --> 01:54:19,390
right and it's much more pleasant that

2203
01:54:17,199 --> 01:54:20,949
way for for situations like what I do

2204
01:54:19,390 --> 01:54:23,020
where there's very few programmers or

2205
01:54:20,949 --> 01:54:24,789
artists or whatever have very very few

2206
01:54:23,020 --> 01:54:27,040
people doing things it just makes things

2207
01:54:24,789 --> 01:54:28,779
so much easier than the like let's grind

2208
01:54:27,039 --> 01:54:30,760
the entire team to screeching halt

2209
01:54:28,779 --> 01:54:33,670
because some source code control

2210
01:54:30,760 --> 01:54:36,039
conflict happened which is like the git

2211
01:54:33,670 --> 01:54:37,960
way of living with git

2212
01:54:36,039 --> 01:54:42,810
everyone's like running stash all the

2213
01:54:37,960 --> 01:54:42,810
time trying to like it's just a system

2214
01:55:01,899 --> 01:55:06,019
but how many times have people give me

2215
01:55:04,219 --> 01:55:07,189
the old why reinvent the wheel line I've

2216
01:55:06,019 --> 01:55:09,320
never seen a discussion about building

2217
01:55:07,189 --> 01:55:15,439
code from scratch not have at least

2218
01:55:09,319 --> 01:55:17,808
someone smugly break that one out yeah

2219
01:55:15,439 --> 01:55:23,959
like I guess what I would say about that

2220
01:55:17,809 --> 01:55:26,079
is that it's I don't even really

2221
01:55:23,958 --> 01:55:29,418
understand why people use that phrase

2222
01:55:26,078 --> 01:55:33,319
like we don't have any wheels anyway

2223
01:55:29,418 --> 01:55:34,908
like I mean the concept that we have

2224
01:55:33,319 --> 01:55:37,358
something as good as a wheel right now

2225
01:55:34,908 --> 01:55:39,799
and programming is ludicrous we don't

2226
01:55:37,359 --> 01:55:43,999
you know I think I've said this before a

2227
01:55:39,800 --> 01:55:45,739
wheel is a perfect machine the reason

2228
01:55:43,998 --> 01:55:48,738
you say why reinvent the wheel is

2229
01:55:45,738 --> 01:55:52,128
because it does exactly what you want it

2230
01:55:48,738 --> 01:55:54,319
to do there is literally nothing like

2231
01:55:52,128 --> 01:55:56,088
that in computing there is no game

2232
01:55:54,319 --> 01:55:59,599
engine you can get that's even close to

2233
01:55:56,088 --> 01:56:01,939
good let alone perfect and so it's

2234
01:55:59,599 --> 01:56:04,639
always you're making trade-offs right

2235
01:56:01,939 --> 01:56:08,088
you're saying well I want to save time

2236
01:56:04,639 --> 01:56:10,639
so if I use this you know it's similar

2237
01:56:08,088 --> 01:56:12,769
to saying like you know we have square

2238
01:56:10,639 --> 01:56:15,349
wheels is what we have in our world

2239
01:56:12,769 --> 01:56:16,729
right now and if you don't want to go

2240
01:56:15,349 --> 01:56:19,939
through the trouble of forging your own

2241
01:56:16,729 --> 01:56:21,739
wheel that might be better you can use

2242
01:56:19,939 --> 01:56:24,709
these like square shaped wheels and your

2243
01:56:21,738 --> 01:56:25,848
car will like go like this but you know

2244
01:56:24,708 --> 01:56:28,219
at least you didn't have to build a

2245
01:56:25,849 --> 01:56:30,199
wheeler yourself right so that's what

2246
01:56:28,219 --> 01:56:31,609
we're at so anyone who says why reinvent

2247
01:56:30,198 --> 01:56:36,438
the wheel I think fundamentally doesn't

2248
01:56:31,609 --> 01:56:41,959
understand what a wheel is might be the

2249
01:56:36,439 --> 01:56:44,179
way it is that is a and B even if you do

2250
01:56:41,958 --> 01:56:45,948
understand what a wheel is and you

2251
01:56:44,179 --> 01:56:48,078
thought that our current wheels were

2252
01:56:45,948 --> 01:56:49,518
similar like our current stuff we

2253
01:56:48,078 --> 01:56:50,988
haven't computing is similar to actual

2254
01:56:49,519 --> 01:56:53,510
wheels which i think is a ridiculous

2255
01:56:50,988 --> 01:56:56,118
notion that if you actually think that I

2256
01:56:53,510 --> 01:56:57,530
don't understand you you probably don't

2257
01:56:56,118 --> 01:56:59,448
really understand computing very much I

2258
01:56:57,529 --> 01:57:02,029
guess is what I'd say because we're just

2259
01:56:59,448 --> 01:57:04,158
not even close but let's say you thought

2260
01:57:02,029 --> 01:57:07,038
that even in the real world

2261
01:57:04,158 --> 01:57:09,348
how many vendors of tires are there in

2262
01:57:07,038 --> 01:57:12,679
the world and how many types of tires

2263
01:57:09,349 --> 01:57:14,779
are there I mean there are thousands of

2264
01:57:12,679 --> 01:57:15,050
different types of tires in the world

2265
01:57:14,779 --> 01:57:17,658
right

2266
01:57:15,050 --> 01:57:21,230
now and that's just the wheels that go

2267
01:57:17,658 --> 01:57:23,210
on a car there's the number of different

2268
01:57:21,229 --> 01:57:26,149
wheels made by people in the world is

2269
01:57:23,210 --> 01:57:27,980
stunning like there's all kinds of

2270
01:57:26,149 --> 01:57:29,029
wheels inside mechanisms those are all

2271
01:57:27,979 --> 01:57:30,348
made by different people and they're

2272
01:57:29,029 --> 01:57:31,429
different sizes and they work different

2273
01:57:30,349 --> 01:57:33,559
ways made out of different materials

2274
01:57:31,429 --> 01:57:35,179
with different heat profiles different

2275
01:57:33,559 --> 01:57:36,770
surface textures

2276
01:57:35,179 --> 01:57:38,210
there's wheels that are used for

2277
01:57:36,770 --> 01:57:39,949
grinding there's wheels that are used

2278
01:57:38,210 --> 01:57:42,109
for driving there's wheels that are used

2279
01:57:39,948 --> 01:57:46,178
in gearing there's wheels that are used

2280
01:57:42,109 --> 01:57:46,179
as disc brakes there's wheel I mean

2281
01:57:46,658 --> 01:57:50,988
saying why we have to do is just dumb

2282
01:57:48,828 --> 01:57:54,078
it's like it's sort of like saying I'm

2283
01:57:50,988 --> 01:57:56,750
too stupid to believe that humans can

2284
01:57:54,078 --> 01:57:59,569
make progress or something right like I

2285
01:57:56,750 --> 01:58:02,029
just believe we're done it just doesn't

2286
01:57:59,569 --> 01:58:04,670
make sense even people who make wheels

2287
01:58:02,029 --> 01:58:07,069
make new wheels right now and that's the

2288
01:58:04,670 --> 01:58:13,969
wheel it's been around for thousands of

2289
01:58:07,069 --> 01:58:15,229
years right I got nothing like I just

2290
01:58:13,969 --> 01:58:17,210
don't know what to say to people like

2291
01:58:15,229 --> 01:58:21,589
that it's like their brain just can't

2292
01:58:17,210 --> 01:58:28,279
even conceive of something better than

2293
01:58:21,590 --> 01:58:30,949
what they have it's like a child playing

2294
01:58:28,279 --> 01:58:32,960
in a sandbox they just don't they it's

2295
01:58:30,948 --> 01:58:37,158
like it's a very immature statement I

2296
01:58:32,960 --> 01:58:39,198
guess is what I would say speaking about

2297
01:58:37,158 --> 01:58:41,299
MSDN I had an issue where an old version

2298
01:58:39,198 --> 01:58:43,250
of Doc's had a remark that was important

2299
01:58:41,300 --> 01:58:45,260
for a certain call that some value

2300
01:58:43,250 --> 01:58:47,238
should be set a certain way destruct not

2301
01:58:45,260 --> 01:58:50,360
there on the new version oh great yeah

2302
01:58:47,238 --> 01:58:52,218
that does happen act anyway doesn't the

2303
01:58:50,359 --> 01:58:53,689
remark section usually have information

2304
01:58:52,219 --> 01:58:56,078
on things like closed file for the

2305
01:58:53,689 --> 01:59:02,779
create files call and so on yes and and

2306
01:58:56,078 --> 01:59:05,750
I like MSDN on the whole I think it's

2307
01:59:02,779 --> 01:59:07,670
pretty good documentation like if you've

2308
01:59:05,750 --> 01:59:09,939
ever used like Apple's documentation for

2309
01:59:07,670 --> 01:59:12,770
example it's a pretty clear step down

2310
01:59:09,939 --> 01:59:14,359
and so I think MSDN you know if you can

2311
01:59:12,770 --> 01:59:16,400
manage to produce dominations that's as

2312
01:59:14,359 --> 01:59:18,408
good as MSDN you're actually in good

2313
01:59:16,399 --> 01:59:20,359
shape that's a pretty high bar actually

2314
01:59:18,408 --> 01:59:23,779
for documentation a lot of documentation

2315
01:59:20,359 --> 01:59:28,279
isn't as good as MSDN so I wasn't trying

2316
01:59:23,779 --> 01:59:29,019
to slag MSDN at all there MSDN is pretty

2317
01:59:28,279 --> 01:59:31,960
good I think

2318
01:59:29,020 --> 01:59:33,730
got worse like it used to be better the

2319
01:59:31,960 --> 01:59:36,159
CD version you know you used to be able

2320
01:59:33,729 --> 01:59:38,229
to put in your machine it was a lot

2321
01:59:36,159 --> 01:59:40,989
better you had a faster index you could

2322
01:59:38,229 --> 01:59:43,269
use to jump to things quickly it had

2323
01:59:40,989 --> 01:59:45,279
more hot linking that worked better so

2324
01:59:43,270 --> 01:59:46,960
it's it's degraded over time as they've

2325
01:59:45,279 --> 01:59:48,399
done the web nonsense to it and they

2326
01:59:46,960 --> 01:59:49,449
probably ended up with people who don't

2327
01:59:48,399 --> 01:59:53,049
really know what they're doing you know

2328
01:59:49,449 --> 01:59:55,449
making that website so it got worse than

2329
01:59:53,050 --> 01:59:57,310
it was but it's still pretty good you

2330
01:59:55,449 --> 01:59:59,489
know in the pantheon of documentation

2331
01:59:57,310 --> 02:00:02,230
quality it's it's pretty high up there

2332
01:59:59,489 --> 02:00:05,019
and if if you produce documentation

2333
02:00:02,229 --> 02:00:08,789
that's as good as MSDN that's good

2334
02:00:05,020 --> 02:00:11,980
enough right could you do better sure

2335
02:00:08,789 --> 02:00:15,430
but you're already doing pretty good if

2336
02:00:11,979 --> 02:00:19,139
you've got to that level right a lot of

2337
02:00:15,430 --> 02:00:19,140
Doc's just fundamentally learn is good

2338
02:00:27,630 --> 02:00:37,650
my is functional programming not

2339
02:00:29,579 --> 02:00:40,559
dominating corporate programming cuz I

2340
02:00:37,649 --> 02:00:43,710
don't really understand the question

2341
02:00:40,560 --> 02:00:45,450
functional programming like any style of

2342
02:00:43,710 --> 02:00:48,720
programming is useful for some things

2343
02:00:45,449 --> 02:00:52,099
and not useful for others and I would

2344
02:00:48,720 --> 02:00:54,300
say generally speaking most people do do

2345
02:00:52,100 --> 02:00:55,410
functional programming if they're good

2346
02:00:54,300 --> 02:00:56,460
programmers they do do functional

2347
02:00:55,409 --> 02:00:59,789
programming in places where it's

2348
02:00:56,460 --> 02:01:02,609
possible but in a lot of cases it's just

2349
02:00:59,789 --> 02:01:05,369
not feasible to do functional

2350
02:01:02,609 --> 02:01:09,989
programming for the things you want to

2351
02:01:05,369 --> 02:01:11,640
do and so you know functional program

2352
02:01:09,989 --> 02:01:20,039
intends to live down in the leaf layers

2353
02:01:11,640 --> 02:01:21,119
of things business apps or otherwise all

2354
02:01:20,039 --> 02:01:32,220
right I think we're done here

2355
02:01:21,119 --> 02:01:37,489
oh I changed a bugger to remedy if you'd

2356
02:01:32,220 --> 02:01:41,850
go to remedy B GHI oh it's in there I

2357
02:01:37,489 --> 02:01:47,250
should probably change I don't know if

2358
02:01:41,850 --> 02:01:49,320
we let me ask let me look I don't

2359
02:01:47,250 --> 02:01:52,529
actually know if we can can we do

2360
02:01:49,319 --> 02:01:58,170
something here we're like let me see so

2361
02:01:52,529 --> 02:01:59,250
so if I go to boy scoot I don't know if

2362
02:01:58,170 --> 02:02:02,399
I don't know how to do this but I'm

2363
02:01:59,250 --> 02:02:07,310
gonna try so if we go to channel on

2364
02:02:02,399 --> 02:02:07,309
twitch if I edit

2365
02:02:12,659 --> 02:02:51,840
let me see edit panels so if I say I'm

2366
02:02:42,130 --> 02:02:51,840
gonna go ahead and try to add in here

2367
02:02:52,289 --> 02:02:57,720
links at the bottom of the twitch window

2368
02:02:58,409 --> 02:03:02,909
so if you're watching the stream live

2369
02:03:03,300 --> 02:03:14,440
you can get those

2370
02:03:05,350 --> 02:03:17,400
so let me link to those here or try to

2371
02:03:14,439 --> 02:03:20,349
and you can tell me if this works so

2372
02:03:17,399 --> 02:03:23,579
I'll put that one there

2373
02:03:20,350 --> 02:03:23,579
and for coder

2374
02:03:23,670 --> 02:03:30,810
I'll put cubes put here and

2375
02:03:37,020 --> 02:03:45,500
we'll see if this will update so let me

2376
02:03:43,050 --> 02:03:45,500
see

2377
02:03:49,208 --> 02:03:54,029
all right so if you refresh your twitch

2378
02:03:52,179 --> 02:03:56,260
window if you're watching this on Twitch

2379
02:03:54,029 --> 02:03:57,698
underneath there's like a thing that

2380
02:03:56,260 --> 02:03:58,809
says like about handmade here and

2381
02:03:57,698 --> 02:04:01,569
there's thing that says how to support

2382
02:03:58,809 --> 02:04:03,369
the project I added a line that says you

2383
02:04:01,569 --> 02:04:04,779
can also buy the tools used on stream

2384
02:04:03,368 --> 02:04:09,429
the editor is for a coder and the

2385
02:04:04,779 --> 02:04:11,948
debugger is remedy if you click on those

2386
02:04:09,429 --> 02:04:15,969
for coder or the remedy link they should

2387
02:04:11,948 --> 02:04:21,069
now take you to the itch to the itch i/o

2388
02:04:15,969 --> 02:04:23,349
page for each of those products so if

2389
02:04:21,069 --> 02:04:25,299
you want to buy the editor or buy the

2390
02:04:23,349 --> 02:04:26,769
debugger that we use on stream at some

2391
02:04:25,300 --> 02:04:33,219
point you should be able to find them

2392
02:04:26,769 --> 02:04:36,909
there that's I guess yeah that's that's

2393
02:04:33,219 --> 02:04:38,739
the way I would I would say it's easiest

2394
02:04:36,908 --> 02:04:40,748
to get to those things cuz I'm there

2395
02:04:38,738 --> 02:04:42,518
yeah there those links should probably

2396
02:04:40,748 --> 02:04:44,319
just be generally available someone

2397
02:04:42,519 --> 02:04:46,719
could probably bake those into in sohbat

2398
02:04:44,319 --> 02:04:49,208
as well who knows how to use in sohbat

2399
02:04:46,719 --> 02:04:51,719
so that when people ask on stream you

2400
02:04:49,208 --> 02:04:51,719
could answer

2401
02:04:59,498 --> 02:05:04,288
now for coder and remedy or commercial

2402
02:05:01,960 --> 02:05:06,340
you have to pay them they're very cheap

2403
02:05:04,288 --> 02:05:10,210
they're much cheaper than they probably

2404
02:05:06,340 --> 02:05:16,840
should be I think they're like nine and

2405
02:05:10,210 --> 02:05:18,578
twelve dollars so like yeah that's about

2406
02:05:16,840 --> 02:05:21,420
as cheap as any piece of software should

2407
02:05:18,578 --> 02:05:21,420
be in my opinion

2408
02:05:27,909 --> 02:05:31,029
do you know why functional protein

2409
02:05:29,680 --> 02:05:32,020
languages tend to be closely tied to

2410
02:05:31,029 --> 02:05:33,099
formal verification and more

2411
02:05:32,020 --> 02:05:35,080
theoretically a chance

2412
02:05:33,100 --> 02:05:37,990
yeah it's because thinking that you want

2413
02:05:35,079 --> 02:05:39,850
purely functional stuff is usually the

2414
02:05:37,989 --> 02:05:42,519
domain of programmers who want to be

2415
02:05:39,850 --> 02:05:44,470
thinking very analytically and formally

2416
02:05:42,520 --> 02:05:47,290
about things they just go hand in hand

2417
02:05:44,470 --> 02:05:49,710
to the mentality people who want to do

2418
02:05:47,289 --> 02:05:51,699
more like I'm programming a computer

2419
02:05:49,710 --> 02:05:55,630
computers aren't functional they're

2420
02:05:51,699 --> 02:06:00,279
procedural right so you know that's the

2421
02:05:55,630 --> 02:06:02,920
kind of thing that you want to that's

2422
02:06:00,279 --> 02:06:04,539
the kind of thing that you that's the

2423
02:06:02,920 --> 02:06:06,430
kind of thing that's just the people who

2424
02:06:04,539 --> 02:06:09,939
would bother making a pure functional

2425
02:06:06,430 --> 02:06:11,140
language or are close to it are there

2426
02:06:09,939 --> 02:06:12,789
gonna be people who are thinking along

2427
02:06:11,140 --> 02:06:14,410
those lines because why else you would

2428
02:06:12,789 --> 02:06:16,149
never build one otherwise CPUs aren't

2429
02:06:14,409 --> 02:06:17,319
functional you would never you would

2430
02:06:16,149 --> 02:06:19,179
never go I want to program a computer

2431
02:06:17,319 --> 02:06:20,099
with a functional language if what you

2432
02:06:19,180 --> 02:06:22,300
cared about its programming the computer

2433
02:06:20,100 --> 02:06:25,270
computers are functional so it's it's

2434
02:06:22,300 --> 02:06:27,640
inherently not the right language for

2435
02:06:25,270 --> 02:06:29,440
programming a computer but if you want

2436
02:06:27,640 --> 02:06:31,869
to program a theory right if you're

2437
02:06:29,439 --> 02:06:34,149
trying to make a theoretical verifiable

2438
02:06:31,869 --> 02:06:36,130
thing then function is exactly what you

2439
02:06:34,149 --> 02:06:39,839
want is the only thing you can verify

2440
02:06:36,130 --> 02:06:43,390
right is something that has 100%

2441
02:06:39,840 --> 02:06:46,779
deterministic input-output right I and

2442
02:06:43,390 --> 02:06:48,520
so you know I think those things make

2443
02:06:46,779 --> 02:06:50,529
perfect sense people who want to program

2444
02:06:48,520 --> 02:06:53,020
computers and get the most out of them

2445
02:06:50,529 --> 02:06:54,519
they want procedural people who want to

2446
02:06:53,020 --> 02:06:57,010
program computers and be able to prove

2447
02:06:54,520 --> 02:06:59,800
things about what they write they want

2448
02:06:57,010 --> 02:07:02,800
functional because you have to have it

2449
02:06:59,800 --> 02:07:04,000
you procedural languages is it's just

2450
02:07:02,800 --> 02:07:07,539
incredibly difficult if not impossible

2451
02:07:04,000 --> 02:07:12,819
to do formal verification on them you

2452
02:07:07,539 --> 02:07:14,680
know is it license based no neither are

2453
02:07:12,819 --> 02:07:16,989
license based in the sense that they

2454
02:07:14,680 --> 02:07:18,820
don't require any kind of DRM they are a

2455
02:07:16,989 --> 02:07:21,849
license based in the sense that you have

2456
02:07:18,819 --> 02:07:24,399
to buy a license per one that you want

2457
02:07:21,850 --> 02:07:25,720
to use but once you buy the license it

2458
02:07:24,399 --> 02:07:29,759
just installs in your machine you don't

2459
02:07:25,720 --> 02:07:29,760
have to run DRM or anything

2460
02:07:35,520 --> 02:07:39,270
all right last question from Brian

2461
02:07:37,439 --> 02:07:40,769
greetings Casey how do you find balance

2462
02:07:39,270 --> 02:07:42,150
balance of duplicating code versus

2463
02:07:40,770 --> 02:07:43,830
trying to generalize a function as an

2464
02:07:42,149 --> 02:07:46,139
exercise I took format string for hammer

2465
02:07:43,829 --> 02:07:47,519
here on wrote a format wide string in

2466
02:07:46,140 --> 02:07:49,920
the end I chose to simply take the

2467
02:07:47,520 --> 02:07:51,330
format call utf-8 for me to sing call

2468
02:07:49,920 --> 02:07:53,609
format string on a temp buffer and then

2469
02:07:51,329 --> 02:07:55,979
utf-16 from utf-8 but now I sacrifice

2470
02:07:53,609 --> 02:07:57,000
performance for maintenance other than

2471
02:07:55,979 --> 02:07:58,169
if it becomes a bottleneck when

2472
02:07:57,000 --> 02:07:59,789
profiling what other things do you look

2473
02:07:58,170 --> 02:08:02,159
for choosing to duplicate code and

2474
02:07:59,789 --> 02:08:03,689
making it more a pain to maintain then

2475
02:08:02,159 --> 02:08:06,659
the benefits of having specific versions

2476
02:08:03,689 --> 02:08:11,009
I would say you kind of stated it

2477
02:08:06,659 --> 02:08:14,369
exactly the right way maintenance costs

2478
02:08:11,010 --> 02:08:17,699
are real debugging costs are real they

2479
02:08:14,369 --> 02:08:20,090
cannot be ignored because you only have

2480
02:08:17,698 --> 02:08:22,889
a limited amount of development time so

2481
02:08:20,090 --> 02:08:25,140
usually what you want to do if you can

2482
02:08:22,890 --> 02:08:26,840
just do something like utf-8 to 16 and

2483
02:08:25,140 --> 02:08:31,230
then 16 to you if you fate or whatever

2484
02:08:26,840 --> 02:08:32,880
just do that first and then see whether

2485
02:08:31,229 --> 02:08:35,339
that becomes a hot spot just like you

2486
02:08:32,880 --> 02:08:36,600
said when you're profiling your app if

2487
02:08:35,340 --> 02:08:38,520
you start to see those things show up

2488
02:08:36,600 --> 02:08:40,590
then it's the time to start looking into

2489
02:08:38,520 --> 02:08:43,380
it if that never shows up on a profile

2490
02:08:40,590 --> 02:08:46,650
then it's not worth it right so you do

2491
02:08:43,380 --> 02:08:48,390
want to be aware you know you want to

2492
02:08:46,649 --> 02:08:50,369
remain aware of what's costing your time

2493
02:08:48,390 --> 02:08:52,170
but if you just don't see things like

2494
02:08:50,369 --> 02:08:55,319
that showing up that it's just not the

2495
02:08:52,170 --> 02:08:56,969
right time to to be focusing your

2496
02:08:55,319 --> 02:09:00,649
efforts there because again just like

2497
02:08:56,969 --> 02:09:04,890
you said I think I stated very well if

2498
02:09:00,649 --> 02:09:06,238
you make things more performant you

2499
02:09:04,890 --> 02:09:09,929
typically let's make them less

2500
02:09:06,238 --> 02:09:12,389
maintainable and that's a real cost and

2501
02:09:09,929 --> 02:09:13,739
so you don't want to pay the cost if

2502
02:09:12,390 --> 02:09:15,900
you're not getting the benefit and

2503
02:09:13,738 --> 02:09:17,609
having increased performance for a

2504
02:09:15,899 --> 02:09:19,259
particular routine only matters if that

2505
02:09:17,609 --> 02:09:23,750
routine actually is showing up is

2506
02:09:19,260 --> 02:09:23,750
costing you something right

2507
02:09:24,000 --> 02:09:28,350
okay let's wrap it up thank you everyone

2508
02:09:27,270 --> 02:09:29,700
for joining me for those sort of

2509
02:09:28,350 --> 02:09:31,500
handmade he wrote so no pleasure coding

2510
02:09:29,699 --> 02:09:33,260
you with you as always if you are

2511
02:09:31,500 --> 02:09:35,819
following series at home you can always

2512
02:09:33,260 --> 02:09:37,289
peer to the game on hand me here org it

2513
02:09:35,819 --> 02:09:39,299
comes to the source code so you can

2514
02:09:37,289 --> 02:09:42,300
follow along into your own experiments

2515
02:09:39,300 --> 02:09:45,360
with it I also want to remind everyone

2516
02:09:42,300 --> 02:09:47,250
handmade Seattle as I talked about at

2517
02:09:45,359 --> 02:09:50,130
the beginning of the stream Abner is

2518
02:09:47,250 --> 02:09:52,939
running a conference for those who don't

2519
02:09:50,130 --> 02:09:55,199
know him he's the fellow who organized

2520
02:09:52,939 --> 02:09:56,609
everyone to do handmade Network the

2521
02:09:55,199 --> 02:09:59,880
place where a lot of these products are

2522
02:09:56,609 --> 02:10:02,189
hosted and that's gonna be in Seattle on

2523
02:09:59,880 --> 02:10:04,380
November 16th so March of calendars and

2524
02:10:02,189 --> 02:10:06,899
if you are interested in that head over

2525
02:10:04,380 --> 02:10:09,869
to handmade Seattle comm put your email

2526
02:10:06,899 --> 02:10:12,000
into this notification box here and hit

2527
02:10:09,869 --> 02:10:15,420
notify data loops that's great

2528
02:10:12,000 --> 02:10:17,970
that'll basically put put you on the

2529
02:10:15,420 --> 02:10:19,859
mailing list so that when the conference

2530
02:10:17,970 --> 02:10:22,530
scheduled and when to buy tickets and

2531
02:10:19,859 --> 02:10:25,979
details on stuff come out you will get

2532
02:10:22,529 --> 02:10:30,989
notified with that information so you

2533
02:10:25,979 --> 02:10:34,559
can yeah plan the trip anyway that's it

2534
02:10:30,989 --> 02:10:37,050
for today I'll be back next weekend to

2535
02:10:34,560 --> 02:10:38,730
go ahead and get that sound import stuff

2536
02:10:37,050 --> 02:10:40,409
debugged I'm assuming we've you know all

2537
02:10:38,729 --> 02:10:41,729
we did was type it in assuming you got

2538
02:10:40,409 --> 02:10:45,300
some bugs in there so we want to go

2539
02:10:41,729 --> 02:10:47,759
through and actually put all this stuff

2540
02:10:45,300 --> 02:10:52,020
together and make sure that all of it

2541
02:10:47,760 --> 02:10:53,640
works that's about it until then have

2542
02:10:52,020 --> 02:10:56,810
fun programming I'll see everyone on the

2543
02:10:53,640 --> 02:10:56,810
Internet take it easy everybody

