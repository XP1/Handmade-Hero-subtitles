1
00:00:00,000 --> 00:00:07,620
all right we are back ends at the end of

2
00:00:03,448 --> 00:00:10,468
the last stream we had just switched to

3
00:00:07,620 --> 00:00:11,940
using indices to draw and the reason

4
00:00:10,468 --> 00:00:13,289
that I want to do that was just because

5
00:00:11,939 --> 00:00:15,419
I want to go ahead and switch to using

6
00:00:13,289 --> 00:00:18,210
indices here so that we don't have to do

7
00:00:15,419 --> 00:00:21,059
any primitive restarts in order to draw

8
00:00:18,210 --> 00:00:24,359
lots of different separated quads and

9
00:00:21,059 --> 00:00:28,710
for whatever reason quads as a first

10
00:00:24,359 --> 00:00:31,550
class citizen got demoted on graphics

11
00:00:28,710 --> 00:00:34,590
cards at least through Apogee L in

12
00:00:31,550 --> 00:00:35,910
opengl 3.0 I want to say or somewhere

13
00:00:34,590 --> 00:00:37,920
around there

14
00:00:35,909 --> 00:00:40,439
quads stopped being a thing that that

15
00:00:37,920 --> 00:00:43,260
you were allowed to use and we're just

16
00:00:40,439 --> 00:00:46,349
down to triangle strips triangles and

17
00:00:43,259 --> 00:00:47,339
fans as well as like lines and points

18
00:00:46,350 --> 00:00:48,780
but in terms of actually getting

19
00:00:47,340 --> 00:00:50,129
triangles on the screen this we have to

20
00:00:48,780 --> 00:00:51,780
do it and if you want to do anything

21
00:00:50,128 --> 00:00:54,448
else you kind of have to use your own

22
00:00:51,780 --> 00:00:55,980
kind of tests later tessellation shader

23
00:00:54,448 --> 00:00:57,988
geometry shaders these sorts of things

24
00:00:55,979 --> 00:01:00,709
if you stick on the front end to create

25
00:00:57,988 --> 00:01:02,759
your own primitives and we could do that

26
00:01:00,710 --> 00:01:04,290
but I don't think that's really gonna be

27
00:01:02,759 --> 00:01:06,539
necessary what I'd rather do is just use

28
00:01:04,290 --> 00:01:09,330
indices they're very compact they don't

29
00:01:06,540 --> 00:01:12,030
add very much space and so that will

30
00:01:09,329 --> 00:01:15,030
also allow us to do other things if we

31
00:01:12,030 --> 00:01:17,430
want to for example if you ever wanted

32
00:01:15,030 --> 00:01:19,799
to extend this system to draw some more

33
00:01:17,430 --> 00:01:21,360
arbitrary shapes like you wanted to be

34
00:01:19,799 --> 00:01:23,130
able to draw a sphere Zoar you want to

35
00:01:21,359 --> 00:01:25,950
be able to import some meshes and draw

36
00:01:23,129 --> 00:01:28,709
them this would allow you to pretty much

37
00:01:25,950 --> 00:01:30,540
do that for free and that seems like a

38
00:01:28,709 --> 00:01:32,908
useful thing to have as well so that you

39
00:01:30,540 --> 00:01:36,780
can kind of just have generic index

40
00:01:32,909 --> 00:01:38,340
messages coming through so what I want

41
00:01:36,780 --> 00:01:40,049
to do now is I want to take a look at

42
00:01:38,340 --> 00:01:42,299
how we're sending those things down just

43
00:01:40,049 --> 00:01:44,460
so I can show the place where this would

44
00:01:42,299 --> 00:01:46,590
normally happen so if you remember

45
00:01:44,459 --> 00:01:48,929
correctly when we look at our render

46
00:01:46,590 --> 00:01:51,060
commands that's what actually has these

47
00:01:48,930 --> 00:01:52,649
buffers in it so if you look at the game

48
00:01:51,060 --> 00:01:54,659
render commands you can see that there's

49
00:01:52,649 --> 00:01:58,439
stuff that gets stuck on here as vertex

50
00:01:54,659 --> 00:02:00,329
array there's quad bitmaps and you know

51
00:01:58,438 --> 00:02:02,188
this this white bitmap and stuff we're

52
00:02:00,328 --> 00:02:04,529
streaming out our vertices into this

53
00:02:02,188 --> 00:02:06,959
vertex array here and that's where we

54
00:02:04,530 --> 00:02:08,580
place all the information that we

55
00:02:06,959 --> 00:02:10,378
currently use for rendering all we

56
00:02:08,580 --> 00:02:13,200
really want to do to make this

57
00:02:10,378 --> 00:02:15,449
modification is we want to have

58
00:02:13,199 --> 00:02:20,699
way of streaming out those indices as

59
00:02:15,449 --> 00:02:24,810
well Jimmy so what I want to do here is

60
00:02:20,699 --> 00:02:28,439
I want to have a way of having a pointer

61
00:02:24,810 --> 00:02:30,060
to effectively an index array and then

62
00:02:28,439 --> 00:02:31,530
when we've got this vertex count here

63
00:02:30,060 --> 00:02:36,449
really what I'm going to change that to

64
00:02:31,530 --> 00:02:38,550
meaning is that I III want to probably

65
00:02:36,449 --> 00:02:40,768
still keep track of it so that when you

66
00:02:38,550 --> 00:02:43,349
push these vertices on there we still

67
00:02:40,769 --> 00:02:45,239
know if you've ever overflowed but

68
00:02:43,348 --> 00:02:49,139
really the main thing we're gonna be

69
00:02:45,239 --> 00:02:50,909
looking at now is that there's sort of

70
00:02:49,139 --> 00:02:53,250
an index array that's happening

71
00:02:50,909 --> 00:02:55,789
separately here and what I'd like to do

72
00:02:53,250 --> 00:02:59,848
is I'd like to make this index array

73
00:02:55,789 --> 00:03:02,250
bshorts so unsigned shorts so they're

74
00:02:59,848 --> 00:03:04,199
only 16 bits long and the reason for

75
00:03:02,250 --> 00:03:06,360
that is because we're trying to minimize

76
00:03:04,199 --> 00:03:08,609
the amount of overhead that we take when

77
00:03:06,360 --> 00:03:10,079
we use indices so when we use indices we

78
00:03:08,610 --> 00:03:11,280
use indices for a number of reasons one

79
00:03:10,079 --> 00:03:13,799
is so that we can refer to the same

80
00:03:11,280 --> 00:03:18,560
vertex multiple times to reduce the

81
00:03:13,799 --> 00:03:20,400
memory footprint of that index right

82
00:03:18,560 --> 00:03:23,099
because if you think of how we were

83
00:03:20,400 --> 00:03:25,769
doing it before we were specifying

84
00:03:23,099 --> 00:03:27,930
vertices for each piece of a thing so if

85
00:03:25,769 --> 00:03:30,509
we wanted to specify two triangles that

86
00:03:27,930 --> 00:03:31,950
each shared two vertices like they do in

87
00:03:30,509 --> 00:03:35,789
sort of a clod right you have two

88
00:03:31,949 --> 00:03:37,289
vertices shared well rather than specify

89
00:03:35,789 --> 00:03:38,578
the same vertex multiple times could be

90
00:03:37,289 --> 00:03:40,078
expensive because it's a normal there's

91
00:03:38,579 --> 00:03:42,389
UV there's colors all these things that

92
00:03:40,079 --> 00:03:43,889
might be stuck in there rather than

93
00:03:42,389 --> 00:03:47,010
doing that we'd rather do is just

94
00:03:43,889 --> 00:03:48,840
specify an index multiple times that

95
00:03:47,009 --> 00:03:52,560
reduces the amount of total space

96
00:03:48,840 --> 00:03:56,280
necessary but in addition to that it

97
00:03:52,560 --> 00:03:58,289
also reduces the amount of transforms

98
00:03:56,280 --> 00:04:01,079
that the card has to do because the card

99
00:03:58,289 --> 00:04:03,449
is smart enough to cache the transforms

100
00:04:01,079 --> 00:04:06,629
most of the time so if we tell it to use

101
00:04:03,449 --> 00:04:08,608
vertex two then a couple triangles later

102
00:04:06,629 --> 00:04:12,150
we still tell it to use vertex two again

103
00:04:08,609 --> 00:04:15,329
it's usually smart enough not to do the

104
00:04:12,150 --> 00:04:17,220
vertex shader twice it's usually smart

105
00:04:15,329 --> 00:04:20,489
enough to just cache the results of the

106
00:04:17,220 --> 00:04:23,370
vertex shader and use them two times so

107
00:04:20,488 --> 00:04:25,799
not only does having indices allow us to

108
00:04:23,370 --> 00:04:26,699
minimize the footprint of the actual

109
00:04:25,800 --> 00:04:30,800
information

110
00:04:26,699 --> 00:04:33,839
self but it also allows us to to

111
00:04:30,800 --> 00:04:35,699
leverage the cards ability to cash

112
00:04:33,839 --> 00:04:37,799
because the card is not really smart

113
00:04:35,699 --> 00:04:39,120
enough to cash and you wouldn't want it

114
00:04:37,800 --> 00:04:41,819
to because we'd have to do like trace

115
00:04:39,120 --> 00:04:43,050
hashes on the actual vertex data to see

116
00:04:41,819 --> 00:04:44,879
that they were the same like it just

117
00:04:43,050 --> 00:04:48,600
it's faster we just transform on what's

118
00:04:44,879 --> 00:04:50,069
the time probably right I'm gonna have

119
00:04:48,600 --> 00:04:53,790
some kind of hash lookup or nonsense

120
00:04:50,069 --> 00:04:56,009
like this so so that's really important

121
00:04:53,790 --> 00:04:57,660
to understand that what we're getting

122
00:04:56,009 --> 00:04:59,759
out of that there's multiple things once

123
00:04:57,660 --> 00:05:01,950
you want to start encoding topological

124
00:04:59,759 --> 00:05:04,980
information in there indices are really

125
00:05:01,949 --> 00:05:06,209
good at that we want to use them so I'm

126
00:05:04,980 --> 00:05:08,610
going to break this up into two things

127
00:05:06,209 --> 00:05:10,379
what I am going to do is just also point

128
00:05:08,610 --> 00:05:13,050
out the fact that if we are using shorts

129
00:05:10,379 --> 00:05:17,819
in this situation if we take a look at

130
00:05:13,050 --> 00:05:20,610
the math for a second we know that 6 6 5

131
00:05:17,819 --> 00:05:22,589
5 3 6 right Center number that's the

132
00:05:20,610 --> 00:05:23,790
maximum that a you 16 can talk about

133
00:05:22,589 --> 00:05:25,439
anyway

134
00:05:23,790 --> 00:05:27,030
we don't have to worry about numbers

135
00:05:25,439 --> 00:05:29,699
over 6 5 5 through 6

136
00:05:27,029 --> 00:05:31,589
what that means is that the number of

137
00:05:29,699 --> 00:05:34,050
vertices that we could possibly encode

138
00:05:31,589 --> 00:05:34,769
is not gonna ever be more than that

139
00:05:34,050 --> 00:05:37,259
right

140
00:05:34,769 --> 00:05:39,299
so our max vertex count if we were to

141
00:05:37,259 --> 00:05:41,849
look at how big a vertex is we can also

142
00:05:39,300 --> 00:05:44,879
see whether we ever want to actually do

143
00:05:41,850 --> 00:05:47,340
anything about that anywhere like if

144
00:05:44,879 --> 00:05:51,469
this is a textured vertex we can see how

145
00:05:47,339 --> 00:05:57,449
big it is it ends up being let's see 4

146
00:05:51,470 --> 00:06:04,170
that's 8 9 and then another 4 so what is

147
00:05:57,449 --> 00:06:07,079
that 13 set right 4 5 6 7 8 9 10 11 12

148
00:06:04,170 --> 00:06:07,500
13 well that should be really afford

149
00:06:07,079 --> 00:06:09,870
yeah

150
00:06:07,500 --> 00:06:11,399
I mean hard to say I guess because I'm

151
00:06:09,870 --> 00:06:15,420
not sure exactly what we're going to be

152
00:06:11,399 --> 00:06:18,419
doing with these per say but if we just

153
00:06:15,420 --> 00:06:20,310
assume that these things are like let's

154
00:06:18,420 --> 00:06:23,129
say they're gonna be under 64 bytes

155
00:06:20,310 --> 00:06:25,649
because right now they are so if we were

156
00:06:23,129 --> 00:06:27,509
imagining these would be 64 bytes what

157
00:06:25,649 --> 00:06:29,609
you can see here is that that even if we

158
00:06:27,509 --> 00:06:32,219
used every single vertex we could

159
00:06:29,610 --> 00:06:34,439
possibly refer to we're only gonna have

160
00:06:32,220 --> 00:06:36,870
a four megabyte vertex buffer that's the

161
00:06:34,439 --> 00:06:38,399
biggest it could possibly be so one of

162
00:06:36,870 --> 00:06:39,470
the things we might consider doing here

163
00:06:38,399 --> 00:06:41,810
is just saying look

164
00:06:39,470 --> 00:06:44,420
get rid of the deep like us ever having

165
00:06:41,810 --> 00:06:47,839
to actually think about this max vertex

166
00:06:44,420 --> 00:06:50,720
count and instead we'll just say that

167
00:06:47,839 --> 00:06:52,849
the the match vertex count is always 6 5

168
00:06:50,720 --> 00:06:54,290
5 4 6 right we could do that I'm not

169
00:06:52,850 --> 00:06:56,840
sure why I do that quite yet we

170
00:06:54,290 --> 00:06:58,879
definitely could do that all right so

171
00:06:56,839 --> 00:07:05,029
let's move forward and have this

172
00:06:58,879 --> 00:07:08,689
actually let's move forward and actually

173
00:07:05,029 --> 00:07:10,459
make this work this quad bit maps will

174
00:07:08,689 --> 00:07:12,920
be going away eventually so I'm gonna

175
00:07:10,459 --> 00:07:16,069
kind of shoehorn it in for now

176
00:07:12,920 --> 00:07:17,540
to load the bitmaps for a per block of 6

177
00:07:16,069 --> 00:07:20,480
indices because we know that these are

178
00:07:17,540 --> 00:07:23,840
quads but we can eliminate that entirely

179
00:07:20,480 --> 00:07:27,259
when we go to the next step of this

180
00:07:23,839 --> 00:07:30,859
process so let's start by just doing the

181
00:07:27,259 --> 00:07:33,500
basics here what I want to do is look

182
00:07:30,860 --> 00:07:35,780
for everywhere that we are sort of using

183
00:07:33,500 --> 00:07:38,620
the the vertex count in the max vertex

184
00:07:35,779 --> 00:07:44,119
count I want to sort of augment this now

185
00:07:38,620 --> 00:07:47,139
to have the the index groups included in

186
00:07:44,120 --> 00:07:50,540
there so that's what we're going to do

187
00:07:47,139 --> 00:07:53,599
let's see here so in here where we do

188
00:07:50,540 --> 00:07:58,400
max vertex count this render texture

189
00:07:53,600 --> 00:08:01,160
group I don't know that we care about

190
00:07:58,399 --> 00:08:03,339
this at all or what this even is in fact

191
00:08:01,160 --> 00:08:09,169
is this what is this hold on a second

192
00:08:03,339 --> 00:08:11,709
what do we what are we doing here what

193
00:08:09,168 --> 00:08:11,709
are these things

194
00:08:12,420 --> 00:08:20,560
these things are nothing's so these were

195
00:08:18,550 --> 00:08:22,990
us just hypothesizing what we were going

196
00:08:20,560 --> 00:08:24,790
to do four groups of textures we don't

197
00:08:22,990 --> 00:08:26,500
need those at all so let's get rid of

198
00:08:24,790 --> 00:08:30,660
that first of all because those are not

199
00:08:26,500 --> 00:08:32,500
there anymore let's keep going now

200
00:08:30,660 --> 00:08:34,779
all right so looking at where we're

201
00:08:32,500 --> 00:08:36,668
using the max vertex count so what you

202
00:08:34,779 --> 00:08:38,168
can see here is we're sort of specifying

203
00:08:36,668 --> 00:08:40,449
these when they begin the frame right

204
00:08:38,168 --> 00:08:41,829
we're grabbing these out here so what am

205
00:08:40,450 --> 00:08:44,050
I do is I'm going to follow that lead

206
00:08:41,830 --> 00:08:46,270
and just say look the OpenGL renderer is

207
00:08:44,049 --> 00:08:47,919
gonna say which of those were doing and

208
00:08:46,269 --> 00:08:49,120
then we're just gonna do this and what

209
00:08:47,919 --> 00:08:50,709
we want to do is where we specify the

210
00:08:49,120 --> 00:08:52,149
vertex array we're gonna specify an

211
00:08:50,710 --> 00:08:54,250
index array as well right so really

212
00:08:52,149 --> 00:08:56,079
we're just awed menteng the ability to

213
00:08:54,250 --> 00:08:57,720
send down vertices we're now augmenting

214
00:08:56,080 --> 00:09:00,370
that with the ability to send down

215
00:08:57,720 --> 00:09:02,830
indices as well as the vertices and

216
00:09:00,370 --> 00:09:04,149
really there's not a lot more to it than

217
00:09:02,830 --> 00:09:06,610
that right it's that simple

218
00:09:04,149 --> 00:09:08,409
so now when we do get current croisé we

219
00:09:06,610 --> 00:09:11,529
pacify a quad count there what we want

220
00:09:08,409 --> 00:09:14,069
to do is say look if we've got a current

221
00:09:11,529 --> 00:09:18,279
club that's open we want to make sure

222
00:09:14,070 --> 00:09:21,129
that that it fits right and if we can't

223
00:09:18,279 --> 00:09:22,329
then we just bail now in the future I

224
00:09:21,129 --> 00:09:24,399
think what we want to do here actually

225
00:09:22,330 --> 00:09:27,460
when we do get current quads what we

226
00:09:24,399 --> 00:09:29,769
actually want to do is just restart in

227
00:09:27,460 --> 00:09:31,090
the case where we can't so I'm not sure

228
00:09:29,769 --> 00:09:35,559
why we didn't write it that way to begin

229
00:09:31,090 --> 00:09:37,060
with it's kind of a little bit weird but

230
00:09:35,559 --> 00:09:39,429
if you think about it it's like the

231
00:09:37,059 --> 00:09:41,889
vertex count that we want here is the

232
00:09:39,429 --> 00:09:43,870
quad count times four and the index

233
00:09:41,889 --> 00:09:45,789
count that we want here is the quad

234
00:09:43,870 --> 00:09:48,509
count times six that's how much we're

235
00:09:45,789 --> 00:09:51,009
gonna send down for each quad right and

236
00:09:48,509 --> 00:09:52,450
so it kind of seems to me like this is

237
00:09:51,009 --> 00:09:55,029
just a little bit dumb what we did here

238
00:09:52,450 --> 00:09:56,440
because what we can do is say look why

239
00:09:55,029 --> 00:10:01,059
don't we just look at the current quads

240
00:09:56,440 --> 00:10:03,130
and see what it is and then restart if

241
00:10:01,059 --> 00:10:06,069
we can't oh never mind

242
00:10:03,129 --> 00:10:08,500
you know why it's because we don't

243
00:10:06,070 --> 00:10:10,180
allocate any additional when we're out

244
00:10:08,500 --> 00:10:11,470
so it doesn't matter anyway never mind I

245
00:10:10,179 --> 00:10:13,989
think it back we don't really need to

246
00:10:11,470 --> 00:10:15,340
look at that but we still do need to do

247
00:10:13,990 --> 00:10:17,620
these checks so if we're doing these

248
00:10:15,340 --> 00:10:21,759
checks we want to look at vertex here

249
00:10:17,620 --> 00:10:23,700
and similarly I want to be able to say

250
00:10:21,759 --> 00:10:27,389
look at the index count

251
00:10:23,700 --> 00:10:32,820
isn't going to work then we're in

252
00:10:27,389 --> 00:10:37,980
trouble here as well okay hmm so moving

253
00:10:32,820 --> 00:10:40,379
on oh and I suppose that's probably it

254
00:10:37,980 --> 00:10:45,000
but let me just double check for the

255
00:10:40,379 --> 00:10:51,870
places these are used here's where

256
00:10:45,000 --> 00:10:54,120
they're allocated yeah so this is all um

257
00:10:51,870 --> 00:10:59,330
so what I'd like to do here is where we

258
00:10:54,120 --> 00:11:01,649
pass in Max of vertex count there and

259
00:10:59,330 --> 00:11:02,910
actually in here do we even we don't

260
00:11:01,649 --> 00:11:12,629
need these anymore

261
00:11:02,909 --> 00:11:16,139
right these aren't used yeah please show

262
00:11:12,629 --> 00:11:17,759
me max vertex canvases right or it

263
00:11:16,139 --> 00:11:20,189
should be used when we allocate the

264
00:11:17,759 --> 00:11:22,819
memory correct all of this stuff is old

265
00:11:20,190 --> 00:11:22,820
right

266
00:11:28,068 --> 00:11:33,149
yeah so max quad count four frames

267
00:11:31,230 --> 00:11:34,589
getting passed in here that's the only

268
00:11:33,149 --> 00:11:36,089
thing we actually need now so all of

269
00:11:34,589 --> 00:11:37,619
that was list old vestigial code that we

270
00:11:36,089 --> 00:11:40,050
forgot to remove right we just have

271
00:11:37,619 --> 00:11:43,259
never gotten around to deleting it so

272
00:11:40,049 --> 00:11:45,568
now in cure you can see that we can do

273
00:11:43,259 --> 00:11:47,539
the same thing we did before based on

274
00:11:45,568 --> 00:11:49,948
the max Claude counts we can basically

275
00:11:47,539 --> 00:11:53,849
based on whatever it says the max Claude

276
00:11:49,948 --> 00:11:55,919
counts where we know we can use the NSE

277
00:11:53,850 --> 00:12:02,159
to refer to those now here's a problem

278
00:11:55,919 --> 00:12:05,360
that we would quickly run into and that

279
00:12:02,159 --> 00:12:08,249
is that for the max quad count per frame

280
00:12:05,360 --> 00:12:11,100
if we pass a large enough number we will

281
00:12:08,249 --> 00:12:13,350
blow out the size of the indices right

282
00:12:11,100 --> 00:12:17,399
we won't be able to specify enough

283
00:12:13,350 --> 00:12:21,689
indices because the indices can only

284
00:12:17,399 --> 00:12:24,149
represent 60 5 6 5 5 3 6 vertices and so

285
00:12:21,688 --> 00:12:26,759
if we allocate more than 65536 vertices

286
00:12:24,149 --> 00:12:29,759
we can't refer them anymore but that's

287
00:12:26,759 --> 00:12:33,568
actually ok because we can use different

288
00:12:29,759 --> 00:12:36,749
base vertices so we can slide our array

289
00:12:33,568 --> 00:12:39,419
window up so we will be able to actually

290
00:12:36,749 --> 00:12:45,629
reference more than 6 5 5 3 6 we just

291
00:12:39,419 --> 00:12:47,938
have to keep our index count we have to

292
00:12:45,629 --> 00:12:49,798
keep our indices low enough that they

293
00:12:47,938 --> 00:12:51,990
don't overflow that so what we'll do is

294
00:12:49,798 --> 00:12:54,659
we'll just keep building up indices

295
00:12:51,990 --> 00:12:57,119
until we've pushed too many vertices on

296
00:12:54,659 --> 00:12:59,639
and then we can sort of like I said just

297
00:12:57,119 --> 00:13:02,730
moving in sort of batches where we kind

298
00:12:59,639 --> 00:13:05,490
of slide our window forward so we don't

299
00:13:02,730 --> 00:13:08,879
really need to worry about this the fact

300
00:13:05,490 --> 00:13:10,528
that these will overflow the index range

301
00:13:08,879 --> 00:13:11,879
because we'll be able to handle that and

302
00:13:10,528 --> 00:13:15,808
I'll show you what I mean by that later

303
00:13:11,879 --> 00:13:18,089
on as we go so here's our max stuff and

304
00:13:15,808 --> 00:13:19,948
I'm literally just allocating a side

305
00:13:18,089 --> 00:13:24,929
bandar right here for our indices like

306
00:13:19,948 --> 00:13:27,568
so and there's nothing to it right this

307
00:13:24,928 --> 00:13:29,578
is this is all we're talking about so

308
00:13:27,568 --> 00:13:32,599
once we do that we should now have a

309
00:13:29,578 --> 00:13:32,599
thing that that

310
00:13:34,308 --> 00:13:38,188
that gives us exactly what we want for

311
00:13:36,568 --> 00:13:39,958
streaming out these indices we're just

312
00:13:38,188 --> 00:13:41,039
not using them right now and also the

313
00:13:39,958 --> 00:13:41,489
other thing we have to do is just to

314
00:13:41,039 --> 00:13:43,429
make sure

315
00:13:41,490 --> 00:13:46,200
that are open surrender actually has the

316
00:13:43,429 --> 00:13:47,870
members in it that we need so I haven't

317
00:13:46,200 --> 00:13:50,520
done that yet right you know here's our

318
00:13:47,870 --> 00:13:52,919
texture vertex or you know this sort of

319
00:13:50,519 --> 00:13:55,230
stuff we need that index array now so

320
00:13:52,919 --> 00:14:01,169
there is our index array and we also

321
00:13:55,230 --> 00:14:03,839
need those those counts so once we've

322
00:14:01,169 --> 00:14:06,169
got those we're good to go now and now

323
00:14:03,839 --> 00:14:09,149
we've got an index array it's prepared

324
00:14:06,169 --> 00:14:11,039
we're checking for it and all that good

325
00:14:09,149 --> 00:14:13,169
stuff it's just no one's putting

326
00:14:11,039 --> 00:14:17,419
anything in it yet so now what I'd like

327
00:14:13,169 --> 00:14:21,679
to do is I'd like to go ahead and and

328
00:14:17,419 --> 00:14:25,649
start by backing that number down so

329
00:14:21,679 --> 00:14:29,009
basically like if we go into the win32

330
00:14:25,649 --> 00:14:35,639
renderer test and we look at what we're

331
00:14:29,009 --> 00:14:36,778
doing with the if we go into the

332
00:14:35,639 --> 00:14:38,370
renderer test we look at what we're

333
00:14:36,778 --> 00:14:39,899
doing with how many things we pass on

334
00:14:38,370 --> 00:14:42,360
right we've got a maximum quad count

335
00:14:39,899 --> 00:14:44,070
what I'd like to do is say look I want

336
00:14:42,360 --> 00:14:46,829
this quad count to actually be really

337
00:14:44,070 --> 00:14:52,490
small temporarily I want to say the

338
00:14:46,828 --> 00:14:55,649
whole quad count has to fit inside one

339
00:14:52,490 --> 00:14:57,389
65536 vertex batch I know this right

340
00:14:55,649 --> 00:15:00,059
here is six five five three six right

341
00:14:57,389 --> 00:15:02,328
that's how many quads that would be

342
00:15:00,059 --> 00:15:04,979
sixty five six five five three six quads

343
00:15:02,328 --> 00:15:07,469
we know that each quad is going to take

344
00:15:04,980 --> 00:15:11,850
four vertices so we know that this

345
00:15:07,470 --> 00:15:14,100
number is four times right the the this

346
00:15:11,850 --> 00:15:15,480
total number is four times two hi so we

347
00:15:14,100 --> 00:15:17,759
actually need to back it off by two

348
00:15:15,480 --> 00:15:20,039
powers of two that's the maximum of

349
00:15:17,759 --> 00:15:21,569
quads we could sync per frame I'm then

350
00:15:20,039 --> 00:15:24,689
gonna compile and run this we should

351
00:15:21,570 --> 00:15:28,500
then hit the assert it should say oh now

352
00:15:24,690 --> 00:15:29,970
you you're hmm you're trying to do too

353
00:15:28,500 --> 00:15:32,879
many of these primitives per frames

354
00:15:29,970 --> 00:15:33,990
sorry we can't do that so I'm gonna go

355
00:15:32,879 --> 00:15:35,370
ahead and run that and we should hit

356
00:15:33,990 --> 00:15:35,730
that assert there's that assert right

357
00:15:35,370 --> 00:15:37,259
there

358
00:15:35,730 --> 00:15:39,389
so what I'm gonna do is just back off

359
00:15:37,259 --> 00:15:41,850
the number of grass elements that we're

360
00:15:39,389 --> 00:15:43,860
putting in there to take the pressure

361
00:15:41,850 --> 00:15:46,050
off of that while we do the switch to

362
00:15:43,860 --> 00:15:48,000
indices and that way we can make sure

363
00:15:46,049 --> 00:15:50,278
our indices are working properly when

364
00:15:48,000 --> 00:15:52,620
there's just one array and then we'll

365
00:15:50,278 --> 00:15:55,278
switch to the sliding window when we've

366
00:15:52,620 --> 00:15:57,230
done again this is breaking the problem

367
00:15:55,278 --> 00:15:59,269
two steps you always see me do this and

368
00:15:57,230 --> 00:16:01,759
the reason for that is to eliminate the

369
00:15:59,269 --> 00:16:03,919
places where the bugs can be if you do

370
00:16:01,759 --> 00:16:06,438
the in steps where you test each step

371
00:16:03,919 --> 00:16:07,909
then you don't have to worry about bugs

372
00:16:06,438 --> 00:16:11,230
that can operate across those steps

373
00:16:07,909 --> 00:16:13,818
limits and focuses your ability to bug

374
00:16:11,230 --> 00:16:15,319
much more specifically and it just

375
00:16:13,818 --> 00:16:17,019
reduces the total time it will take you

376
00:16:15,318 --> 00:16:19,778
to debug it so that's all I'm doing here

377
00:16:17,019 --> 00:16:22,610
so I'm going to go ahead and change this

378
00:16:19,778 --> 00:16:25,009
here this cover index to just not draw

379
00:16:22,610 --> 00:16:28,430
any grasses that should eliminate any

380
00:16:25,009 --> 00:16:30,919
work we were doing that goes over that

381
00:16:28,429 --> 00:16:32,149
texture limit so here's the world

382
00:16:30,919 --> 00:16:35,318
without any of the grass is being

383
00:16:32,149 --> 00:16:45,370
rendered and that definitely gives us

384
00:16:35,318 --> 00:16:50,948
what we need as far as a single buffer

385
00:16:45,370 --> 00:16:53,480
workflow at work load start Network flow

386
00:16:50,948 --> 00:16:55,909
okay so switching back to the OpenGL

387
00:16:53,480 --> 00:16:59,089
renderer now what I want to be able to

388
00:16:55,909 --> 00:17:03,318
do in here is something where these are

389
00:16:59,089 --> 00:17:05,720
all these draw elements calls are

390
00:17:03,318 --> 00:17:08,298
actually all just based on an index

391
00:17:05,720 --> 00:17:10,548
buffer that gets passed in so rather

392
00:17:08,298 --> 00:17:14,929
than the quads ever having anything to

393
00:17:10,548 --> 00:17:16,548
do with sort with only telling me sort

394
00:17:14,929 --> 00:17:20,899
of these vertex assets what I'd rather

395
00:17:16,548 --> 00:17:24,038
do is say look we come through here you

396
00:17:20,898 --> 00:17:29,229
can see us specifying this buffer data

397
00:17:24,038 --> 00:17:33,079
each one of these is specifying a set of

398
00:17:29,230 --> 00:17:34,940
triangles that's you know each one of

399
00:17:33,079 --> 00:17:37,519
these buffer data calls is sending down

400
00:17:34,940 --> 00:17:39,620
this many vertices and then you can see

401
00:17:37,519 --> 00:17:42,379
me referencing those vertices here using

402
00:17:39,619 --> 00:17:46,819
these arrays what I'd rather do here is

403
00:17:42,380 --> 00:17:49,909
send down the array of indices as well

404
00:17:46,819 --> 00:17:52,398
and then use that array right that's

405
00:17:49,909 --> 00:17:54,559
what I'd like to do now I want to do

406
00:17:52,398 --> 00:17:57,379
that and baby steps too so before

407
00:17:54,558 --> 00:18:00,408
actually doing that what I'm gonna do

408
00:17:57,380 --> 00:18:02,899
instead is I'm going to just use the

409
00:18:00,409 --> 00:18:05,179
offset in here to do that

410
00:18:02,898 --> 00:18:08,269
and so to do that what I need to do is

411
00:18:05,179 --> 00:18:08,590
augment our renderer structure in here

412
00:18:08,269 --> 00:18:11,200
just

413
00:18:08,589 --> 00:18:13,209
a little bit to give us the index offset

414
00:18:11,200 --> 00:18:16,900
as well so if you look at the quad

415
00:18:13,210 --> 00:18:19,090
structure here what you can see is this

416
00:18:16,900 --> 00:18:22,750
tells us we're in the vertex array we

417
00:18:19,089 --> 00:18:25,209
are what I want to do here is I want to

418
00:18:22,750 --> 00:18:33,788
say what's the index array offset as

419
00:18:25,210 --> 00:18:34,659
well and this is just saying tell me

420
00:18:33,788 --> 00:18:37,658
where to start

421
00:18:34,659 --> 00:18:39,820
okay and so in order to have it tell me

422
00:18:37,659 --> 00:18:43,690
where to start what I need to do is I

423
00:18:39,819 --> 00:18:46,298
need to when I specify this index array

424
00:18:43,690 --> 00:18:48,519
here rather than using this old one that

425
00:18:46,298 --> 00:18:51,220
we sort of put in place for the old draw

426
00:18:48,519 --> 00:18:56,349
raise what I want to do is sort of nerf

427
00:18:51,220 --> 00:19:00,038
that and instead have a call to draw

428
00:18:56,349 --> 00:19:02,589
elements that uses that pointer so we

429
00:19:00,038 --> 00:19:05,259
know that this index RA offset so the

430
00:19:02,589 --> 00:19:11,048
thing in the actual so much like here

431
00:19:05,259 --> 00:19:13,240
where we were using this sort of this GL

432
00:19:11,048 --> 00:19:15,908
buffer data to send down all of this

433
00:19:13,240 --> 00:19:18,278
stuff and then the vertex index itself

434
00:19:15,909 --> 00:19:20,679
was coming off of the entry si vertex

435
00:19:18,278 --> 00:19:22,390
array offsets we're starting what I want

436
00:19:20,679 --> 00:19:24,880
to do is I want to take that index

437
00:19:22,390 --> 00:19:28,480
pointer and I want to actually have that

438
00:19:24,880 --> 00:19:32,649
index pointer be offset by the index

439
00:19:28,480 --> 00:19:34,690
array offset right and when we do that

440
00:19:32,648 --> 00:19:37,058
we now know that we don't want this

441
00:19:34,690 --> 00:19:39,009
index array we want the actual index

442
00:19:37,058 --> 00:19:40,960
array that this would be referring into

443
00:19:39,009 --> 00:19:42,548
which itself is the one that comes off

444
00:19:40,960 --> 00:19:44,980
of the commands right it's the one that

445
00:19:42,548 --> 00:19:48,190
the game filled out and that's the index

446
00:19:44,980 --> 00:19:50,230
array that we're looking into okay so

447
00:19:48,190 --> 00:19:54,640
that should give us a way to just draw

448
00:19:50,230 --> 00:19:58,960
out of a prefab array that we go through

449
00:19:54,640 --> 00:20:02,200
and we no longer need this vertex array

450
00:19:58,960 --> 00:20:04,419
offset thing to really be encoded the

451
00:20:02,200 --> 00:20:07,470
way that it is we can change that

452
00:20:04,419 --> 00:20:09,970
encoding quite a bit if we would like

453
00:20:07,470 --> 00:20:11,649
but we're gonna have to do that in

454
00:20:09,970 --> 00:20:14,970
stages again just to avoid the

455
00:20:11,648 --> 00:20:14,969
possibility of bars creeping in there

456
00:20:19,808 --> 00:20:25,690
and to be more specific what I mean by

457
00:20:21,670 --> 00:20:27,429
that is that if you look at how this

458
00:20:25,690 --> 00:20:30,820
buffer data gets sent down we send down

459
00:20:27,429 --> 00:20:36,040
all of the data here in one giant step

460
00:20:30,819 --> 00:20:37,659
and then you know and and the reason

461
00:20:36,039 --> 00:20:39,460
this is kind of dumb is actually this

462
00:20:37,660 --> 00:20:41,650
sends it down multiple times potentially

463
00:20:39,460 --> 00:20:46,539
to we only really need to send this down

464
00:20:41,650 --> 00:20:52,330
once so this is just kind of dumb this

465
00:20:46,539 --> 00:20:58,440
could just be sent down here in fact

466
00:20:52,329 --> 00:20:58,439
what why is this happening here

467
00:21:05,349 --> 00:21:10,109
this is not right at all

468
00:21:12,509 --> 00:21:18,690
yeah so hold on one second

469
00:21:18,960 --> 00:21:27,450
put a little pause button on everything

470
00:21:21,759 --> 00:21:27,450
I said why do we still have that there

471
00:21:28,619 --> 00:21:36,928
right it's a little odd are we sending

472
00:21:33,069 --> 00:21:43,210
down that buffer every time for GL clods

473
00:21:36,929 --> 00:21:54,490
that's super busted what we really want

474
00:21:43,210 --> 00:21:57,690
to do is to do it here right I mean

475
00:21:54,490 --> 00:21:57,690
that's what we actually wanted

476
00:22:09,119 --> 00:22:14,019
so I don't know why we weren't doing

477
00:22:11,650 --> 00:22:15,910
that probably because we weren't being

478
00:22:14,019 --> 00:22:19,059
very smart about which buffers are being

479
00:22:15,910 --> 00:22:23,110
used when but this is what we actually

480
00:22:19,059 --> 00:22:28,419
wanted right I'm not sure what so that

481
00:22:23,109 --> 00:22:29,500
change seems like it does seem like

482
00:22:28,420 --> 00:22:34,150
we're getting some problems with our

483
00:22:29,500 --> 00:22:35,589
depth peeling though so mm-hmm here's

484
00:22:34,150 --> 00:22:47,440
what I think's happening where's our

485
00:22:35,589 --> 00:22:49,929
begin screen fill yeah so you can see

486
00:22:47,440 --> 00:22:53,019
the problem that we're having to have we

487
00:22:49,930 --> 00:22:54,549
only have one array buffer here and the

488
00:22:53,019 --> 00:22:58,629
problem with only having one array

489
00:22:54,549 --> 00:23:00,279
buffer is that we need to have like for

490
00:22:58,630 --> 00:23:01,990
example with this one where we're using

491
00:23:00,279 --> 00:23:04,509
a different array buffer to send down

492
00:23:01,990 --> 00:23:07,480
our stuff we end up in a bad situation

493
00:23:04,509 --> 00:23:11,410
where we need to be able to refer to

494
00:23:07,480 --> 00:23:15,819
this one buffer multiple times so the

495
00:23:11,410 --> 00:23:18,100
thing about that is we OpenGL lets us do

496
00:23:15,819 --> 00:23:21,490
that just fine it's just whichever

497
00:23:18,099 --> 00:23:24,009
buffer we bind right so you can see here

498
00:23:21,490 --> 00:23:26,309
we only have one array buffer if we just

499
00:23:24,009 --> 00:23:29,230
have multiple array buffers we'd be fine

500
00:23:26,309 --> 00:23:38,399
so what we want to do is have a vertex

501
00:23:29,230 --> 00:23:38,400
buffer and like let's take a look here

502
00:23:38,700 --> 00:23:44,769
what our other ones are so I mean you

503
00:23:42,309 --> 00:23:47,079
can see actually if you just look at the

504
00:23:44,769 --> 00:23:50,650
other buffer data that they're actually

505
00:23:47,079 --> 00:23:52,480
all fixed buffers so if we want to we

506
00:23:50,650 --> 00:23:55,509
can actually just specify each of these

507
00:23:52,480 --> 00:23:57,210
buffers as one of the buffers so we've

508
00:23:55,509 --> 00:24:01,089
we've got a couple different ones here

509
00:23:57,210 --> 00:24:07,900
Bob there's the screen fill buffer which

510
00:24:01,089 --> 00:24:12,399
is this one so let's just make that and

511
00:24:07,900 --> 00:24:14,680
then we also want the sort of post I

512
00:24:12,400 --> 00:24:23,230
think that's this the post processing

513
00:24:14,680 --> 00:24:26,500
stretch right the composite and those

514
00:24:23,230 --> 00:24:32,079
are the buffers we use since these don't

515
00:24:26,500 --> 00:24:34,359
change they're the same thing right we

516
00:24:32,079 --> 00:24:37,240
should be able to just create them right

517
00:24:34,359 --> 00:24:40,089
off the bat so for example when we Jen

518
00:24:37,240 --> 00:24:43,990
these buffers here what we'd rather do

519
00:24:40,089 --> 00:24:46,149
instead of calling this bind buffer what

520
00:24:43,990 --> 00:24:52,839
we'd rather do is just make these right

521
00:24:46,150 --> 00:24:59,580
here right so bind the composite vertex

522
00:24:52,839 --> 00:24:59,579
buffer like this and specify that data

523
00:25:02,970 --> 00:25:08,799
kind of like this right and then we can

524
00:25:06,009 --> 00:25:10,720
just bind that buffer here so we don't

525
00:25:08,799 --> 00:25:13,389
have to send down a buffer stream we

526
00:25:10,720 --> 00:25:15,430
just find a buffer and use it and the

527
00:25:13,390 --> 00:25:19,060
same can be true for our screen fill

528
00:25:15,430 --> 00:25:20,440
buffer this is just all this has nothing

529
00:25:19,059 --> 00:25:22,450
to do with the indices this is just

530
00:25:20,440 --> 00:25:24,220
better in general we should have done

531
00:25:22,450 --> 00:25:27,370
this before so this was just we didn't

532
00:25:24,220 --> 00:25:33,039
get to it right but this is just all

533
00:25:27,369 --> 00:25:34,389
better in all cases so if you look at

534
00:25:33,039 --> 00:25:39,909
the other places that we specify this

535
00:25:34,390 --> 00:25:41,530
I'm not sure what is this here that's oh

536
00:25:39,910 --> 00:25:43,540
that's just the one we're editing on the

537
00:25:41,529 --> 00:25:45,970
other side so there's only one other

538
00:25:43,539 --> 00:25:48,430
call to the buffer data that we care

539
00:25:45,970 --> 00:25:50,350
about which is right here and so the

540
00:25:48,430 --> 00:25:54,360
same is true for this wait this is the

541
00:25:50,349 --> 00:25:54,359
same this is exactly the same

542
00:25:58,089 --> 00:26:12,230
is it not that looks exactly same to me

543
00:26:07,130 --> 00:26:15,820
so actually we don't need the composite

544
00:26:12,230 --> 00:26:19,220
one at all we can just use a screen fill

545
00:26:15,819 --> 00:26:32,629
vertex buffer in both cases and we only

546
00:26:19,220 --> 00:26:35,058
need s only when we need right uh so

547
00:26:32,630 --> 00:26:41,570
what we want to do now I think is if you

548
00:26:35,058 --> 00:26:43,750
look at GL buffer data and you take a

549
00:26:41,569 --> 00:26:47,269
look at what it actually specifies

550
00:26:43,750 --> 00:26:48,980
there's sort of this this usage note and

551
00:26:47,269 --> 00:26:53,480
you can see those various uses notes on

552
00:26:48,980 --> 00:26:56,150
here and we don't actually need to

553
00:26:53,480 --> 00:26:58,880
modify this buffer this one stays the

554
00:26:56,150 --> 00:27:03,410
same so GL stream draw is like the wrong

555
00:26:58,880 --> 00:27:07,010
hint we are not going to be doing it the

556
00:27:03,410 --> 00:27:10,100
like none of this stuff is is as it as

557
00:27:07,009 --> 00:27:18,289
it should be so we want like a GL static

558
00:27:10,099 --> 00:27:21,289
draw yeah right so we want this for this

559
00:27:18,289 --> 00:27:23,779
buffer because it's not changing it's

560
00:27:21,289 --> 00:27:26,659
like we always use it exactly the way it

561
00:27:23,779 --> 00:27:30,109
appears here so it doesn't need to go

562
00:27:26,660 --> 00:27:32,300
that route okay so the screen fill

563
00:27:30,109 --> 00:27:33,919
buffer is there the composite buffer is

564
00:27:32,299 --> 00:27:35,599
here but we know that that's the same

565
00:27:33,920 --> 00:27:37,910
one so we should be able to just do this

566
00:27:35,599 --> 00:27:41,689
which means that for the rest of our

567
00:27:37,910 --> 00:27:44,570
stuff what we can do here is just know

568
00:27:41,690 --> 00:27:51,470
that when we submit this we will bind

569
00:27:44,569 --> 00:27:54,230
our vertex buffer here and send it all

570
00:27:51,470 --> 00:27:57,289
down and then whenever we go to draw in

571
00:27:54,230 --> 00:27:59,630
our texture quad set whenever we go to

572
00:27:57,289 --> 00:28:04,789
draw then we just find the vertex buffer

573
00:27:59,630 --> 00:28:07,700
in this case here right and that should

574
00:28:04,789 --> 00:28:10,849
basically do it so we want to suppose

575
00:28:07,700 --> 00:28:11,930
three screen fill we want to put space

576
00:28:10,849 --> 00:28:13,819
for storing this

577
00:28:11,930 --> 00:28:15,769
the index that they'd open she'll give

578
00:28:13,819 --> 00:28:19,029
this back we actually have to have that

579
00:28:15,769 --> 00:28:21,889
in here that was just stored in here

580
00:28:19,029 --> 00:28:24,259
right there so I'll just place another

581
00:28:21,890 --> 00:28:28,850
one in there so now we have the so now

582
00:28:24,259 --> 00:28:30,980
we have the other one okay

583
00:28:28,849 --> 00:28:32,869
and when we're calling this it looks

584
00:28:30,980 --> 00:28:34,519
like we need to know the point Open GL

585
00:28:32,869 --> 00:28:36,459
because we don't actually know where to

586
00:28:34,519 --> 00:28:40,009
get that screen fill buffer handle

587
00:28:36,460 --> 00:28:42,980
otherwise but that's pretty easy okay so

588
00:28:40,009 --> 00:28:45,379
now we should be able to use those

589
00:28:42,980 --> 00:28:49,400
arrays sort of in a more coherent

590
00:28:45,380 --> 00:28:51,680
fashion okay don't ask me why I inserted

591
00:28:49,400 --> 00:28:55,930
a six right there in place of our code

592
00:28:51,680 --> 00:28:59,750
and so now we look correct again right

593
00:28:55,930 --> 00:29:02,440
and and and now we're not calling that

594
00:28:59,750 --> 00:29:06,019
buffer transfer stuff a bunch of times

595
00:29:02,440 --> 00:29:07,700
so that's good too so the other thing I

596
00:29:06,019 --> 00:29:13,700
want to do there is I want to see what

597
00:29:07,700 --> 00:29:15,680
effect that had on on our ability to to

598
00:29:13,700 --> 00:29:17,720
have speedy rendering here because I I

599
00:29:15,680 --> 00:29:20,000
realized I didn't know we were calling

600
00:29:17,720 --> 00:29:22,789
that multiple times that's really bad

601
00:29:20,000 --> 00:29:24,710
that means we may have forced the OpenGL

602
00:29:22,789 --> 00:29:27,769
descent submit that buffer multiple

603
00:29:24,710 --> 00:29:30,920
times for no reason and that's just

604
00:29:27,769 --> 00:29:37,420
really stupid so okay let's just check I

605
00:29:30,920 --> 00:29:37,420
want to make sure that we don't have

606
00:29:38,680 --> 00:29:43,730
that we didn't just get a speed win from

607
00:29:41,599 --> 00:29:49,819
that right this is what I would like to

608
00:29:43,730 --> 00:29:52,420
do so now we're pushing down a ton of

609
00:29:49,819 --> 00:29:52,419
cover again

610
00:29:57,419 --> 00:30:09,778
and actually like it is strangely quite

611
00:30:01,470 --> 00:30:11,640
a bit zippy er honestly it looks like so

612
00:30:09,778 --> 00:30:21,089
I'm not sure how much of that might just

613
00:30:11,640 --> 00:30:22,890
not be in shade or cost really so that

614
00:30:21,089 --> 00:30:24,629
was probably a pretty big deal to be

615
00:30:22,890 --> 00:30:26,190
honest with you I know we weren't really

616
00:30:24,630 --> 00:30:28,440
taking any timing so that wasn't

617
00:30:26,190 --> 00:30:29,759
supposed to be part of the optimization

618
00:30:28,440 --> 00:30:31,169
thing but that was an important thing to

619
00:30:29,759 --> 00:30:34,470
get rid of we really didn't want to have

620
00:30:31,169 --> 00:30:36,899
to be doing that in that way I want to

621
00:30:34,470 --> 00:30:40,409
take a look just real quickly at the Z

622
00:30:36,898 --> 00:30:42,119
bias the Z bias program here I would

623
00:30:40,409 --> 00:30:45,240
like to go ahead and nerf the lighting

624
00:30:42,119 --> 00:30:49,428
call just temporarily so in here what I

625
00:30:45,240 --> 00:30:49,429
would like to do when we're doing our

626
00:30:50,269 --> 00:30:56,339
our lighting right I would like to sort

627
00:30:54,750 --> 00:30:58,859
of switch this around a little bit just

628
00:30:56,339 --> 00:31:02,240
temporarily I'd like to see what happens

629
00:30:58,859 --> 00:31:06,058
if we just get rid of the lighting and

630
00:31:02,240 --> 00:31:08,659
instead set running some to just be full

631
00:31:06,058 --> 00:31:08,658
full lighting

632
00:31:15,970 --> 00:31:20,559
just so I know that the shader isn't

633
00:31:18,220 --> 00:31:22,120
taking an inordinate amount of time it

634
00:31:20,559 --> 00:31:26,349
doesn't look like that really affected

635
00:31:22,119 --> 00:31:28,619
it much right it doesn't seem to be

636
00:31:26,349 --> 00:31:28,619
anyway

637
00:31:40,049 --> 00:31:43,480
well I guess I don't need to live to

638
00:31:41,980 --> 00:31:48,299
that I'm gonna put this back out because

639
00:31:43,480 --> 00:31:55,390
I'll be switching that back back around

640
00:31:48,299 --> 00:31:57,039
later on to I wonder it well actually

641
00:31:55,390 --> 00:31:58,570
can I make I can probably make that

642
00:31:57,039 --> 00:32:01,389
change even if root out so lighting

643
00:31:58,569 --> 00:32:03,669
disabled is actually a compilation

644
00:32:01,390 --> 00:32:05,350
switch we can do there too so I suppose

645
00:32:03,670 --> 00:32:08,380
I could just set lighting disabled as

646
00:32:05,349 --> 00:32:11,799
well so in the OpenGL renderer where

647
00:32:08,380 --> 00:32:14,440
we've got the lighting disabled it's not

648
00:32:11,799 --> 00:32:16,839
actually already happening let's take a

649
00:32:14,440 --> 00:32:25,200
look so when we actually compile that

650
00:32:16,839 --> 00:32:25,199
program let me see where we do

651
00:32:35,089 --> 00:32:39,449
so that's just gonna be the

652
00:32:37,140 --> 00:32:41,580
learning-disabled parameter so when we

653
00:32:39,450 --> 00:32:50,880
do compile the abacus program it's like

654
00:32:41,579 --> 00:32:52,470
def peel and then letting disabled so

655
00:32:50,880 --> 00:32:55,470
it's just lighting disabled whether

656
00:32:52,470 --> 00:32:57,870
that's turned on so what we could do to

657
00:32:55,470 --> 00:32:59,460
disable lighting entirely is just make

658
00:32:57,869 --> 00:33:01,949
sure that our settings are always set

659
00:32:59,460 --> 00:33:03,750
that way so inside the render or test

660
00:33:01,950 --> 00:33:07,110
where we set for example whether we

661
00:33:03,750 --> 00:33:19,829
wanted Z Z on vsync rather we could just

662
00:33:07,109 --> 00:33:22,699
say letting disabled equals true and now

663
00:33:19,829 --> 00:33:26,399
we should never call the lighting at all

664
00:33:22,700 --> 00:33:29,429
okay so in theory and again I don't know

665
00:33:26,400 --> 00:33:32,250
but in theory we should be seeing some

666
00:33:29,429 --> 00:33:34,788
slow down due to texture changes here we

667
00:33:32,250 --> 00:33:37,619
would like to take some profiling about

668
00:33:34,788 --> 00:33:39,960
about that if we could but I don't know

669
00:33:37,619 --> 00:33:45,569
to what extent we really can what I can

670
00:33:39,960 --> 00:33:46,829
tell you is if you look here at the the

671
00:33:45,569 --> 00:33:50,970
speed at which is rendering at the

672
00:33:46,829 --> 00:33:57,298
moment and again we actually do have a

673
00:33:50,970 --> 00:34:00,000
printout of how slow it is right so if

674
00:33:57,298 --> 00:34:03,538
we looked at this we could see you know

675
00:34:00,000 --> 00:34:07,529
if we forced it to shrink the display

676
00:34:03,538 --> 00:34:13,079
dimensions down what the difference in

677
00:34:07,529 --> 00:34:18,179
speed is right just to see to what

678
00:34:13,079 --> 00:34:21,960
extent it seems sensitive to that and it

679
00:34:18,179 --> 00:34:24,409
doesn't really look particularly

680
00:34:21,960 --> 00:34:24,409
different

681
00:34:29,568 --> 00:34:35,639
to me and I'll just trying to verify

682
00:34:33,778 --> 00:34:48,719
that that's actually the size that we're

683
00:34:35,639 --> 00:34:51,169
getting well where's our settings have

684
00:34:48,719 --> 00:34:51,168
changed

685
00:34:55,519 --> 00:35:07,519
let me just set a little breakpoint

686
00:34:57,920 --> 00:35:10,190
there so let's just make sure that we're

687
00:35:07,519 --> 00:35:14,119
using what I think we're using in terms

688
00:35:10,190 --> 00:35:17,570
of the sizes of things so we should only

689
00:35:14,119 --> 00:35:20,079
be up creating buffers of that size so

690
00:35:17,570 --> 00:35:25,430
for example when we go in here to create

691
00:35:20,079 --> 00:35:27,500
like whatever the depth is of our frame

692
00:35:25,429 --> 00:35:29,419
buffers yeah so all of this stuff should

693
00:35:27,500 --> 00:35:33,920
now be pretty pretty small so I think

694
00:35:29,420 --> 00:35:35,119
that just works and we are now like that

695
00:35:33,920 --> 00:35:38,900
should mean that we're really not

696
00:35:35,119 --> 00:35:43,160
spending much time in in that that

697
00:35:38,900 --> 00:35:47,079
shading okay so let's suppose we want to

698
00:35:43,159 --> 00:35:49,699
kind of move to the next stage of things

699
00:35:47,079 --> 00:35:52,730
also let's make sure we're in O 2 mode

700
00:35:49,699 --> 00:35:53,868
we are um so inside the renderer the

701
00:35:52,730 --> 00:35:59,570
next thing that I was going to suggest

702
00:35:53,869 --> 00:36:03,320
is that Jimmy I would like to now use

703
00:35:59,570 --> 00:36:05,210
the indices more directly so I would

704
00:36:03,320 --> 00:36:07,550
like to use an index of effort coming

705
00:36:05,210 --> 00:36:10,369
from the app rather than doing one of

706
00:36:07,550 --> 00:36:13,690
these every time so what I'm gonna do is

707
00:36:10,369 --> 00:36:16,160
I'm just going to set up something that

708
00:36:13,690 --> 00:36:19,070
takes a look at those indices and uses

709
00:36:16,159 --> 00:36:20,960
them now like I said I don't want to

710
00:36:19,070 --> 00:36:23,720
have all the graphs in here I don't want

711
00:36:20,960 --> 00:36:25,159
to have 60 as the amount of grass I want

712
00:36:23,719 --> 00:36:29,469
to do zeros the amount of grass and

713
00:36:25,159 --> 00:36:29,469
start with something like this

714
00:36:30,400 --> 00:36:38,570
go where I can be more specific about

715
00:36:36,400 --> 00:36:41,809
always having everything in a buffer

716
00:36:38,570 --> 00:36:45,050
first so we're gonna switch from doing

717
00:36:41,809 --> 00:36:47,000
this stuff we're gonna switch from doing

718
00:36:45,050 --> 00:36:48,560
that in a Verta in an indexed buffer

719
00:36:47,000 --> 00:36:49,820
that we create right here and we're

720
00:36:48,559 --> 00:36:54,380
gonna switch to one where we can just

721
00:36:49,820 --> 00:36:57,859
send down the index buffer right so what

722
00:36:54,380 --> 00:36:59,510
I want to do here is pretend okay let's

723
00:36:57,858 --> 00:37:03,009
suppose we had an index buffer how would

724
00:36:59,510 --> 00:37:03,010
this work exactly right

725
00:37:03,829 --> 00:37:08,090
I believe I don't know if it's really

726
00:37:06,079 --> 00:37:09,440
called that so you'll have to bear with

727
00:37:08,090 --> 00:37:21,590
me for a second I look up what the

728
00:37:09,440 --> 00:37:27,280
OpenGL term is for it it's this it's

729
00:37:21,590 --> 00:37:27,280
this one actually element array buffer

730
00:37:30,730 --> 00:37:42,380
and so if we have that so defined

731
00:37:34,190 --> 00:37:46,429
doesn't look like we actually do so in

732
00:37:42,380 --> 00:37:49,250
here where we define when we specify one

733
00:37:46,429 --> 00:37:53,779
of these buffers I'd like to be able to

734
00:37:49,250 --> 00:37:55,880
specify the element array buffer so that

735
00:37:53,780 --> 00:37:59,600
we can sort of say look here's this

736
00:37:55,880 --> 00:38:01,789
other array of indices I want you to use

737
00:37:59,599 --> 00:38:05,440
those I don't remember if that's the

738
00:38:01,789 --> 00:38:05,440
most compatible way to do it or not

739
00:38:06,570 --> 00:38:17,900
[Music]

740
00:38:09,340 --> 00:38:19,400
let's take a quick look here yeah so it

741
00:38:17,900 --> 00:38:21,950
looks like that goes back a long ways

742
00:38:19,400 --> 00:38:23,510
here's the es OpenGL ES 2.0 ducks so I

743
00:38:21,949 --> 00:38:27,789
think deal element array buffer should

744
00:38:23,510 --> 00:38:27,790
be fine for us so

745
00:38:38,880 --> 00:38:42,809
array elements

746
00:38:49,489 --> 00:38:59,159
so this is the actual identifier we need

747
00:38:56,389 --> 00:39:02,009
conveniently the one right after array

748
00:38:59,159 --> 00:39:06,358
buffer so we should be able to actually

749
00:39:02,010 --> 00:39:08,340
bind the index buffer now and I thought

750
00:39:06,358 --> 00:39:13,250
we had specified that as something that

751
00:39:08,340 --> 00:39:13,250
was off of opengl index array sorry oh

752
00:39:13,699 --> 00:39:18,689
no no no but we're talking about the

753
00:39:16,019 --> 00:39:22,739
buffer here so we need to create one of

754
00:39:18,690 --> 00:39:24,570
these for our indexes like so so we've

755
00:39:22,739 --> 00:39:27,419
got a vertex buffer index buffer we need

756
00:39:24,570 --> 00:39:29,609
to bind our index buffer right and we

757
00:39:27,420 --> 00:39:31,950
also need to send it down so just like

758
00:39:29,608 --> 00:39:33,900
we were doing before where we specify

759
00:39:31,949 --> 00:39:37,189
the buffer data we need to do the same

760
00:39:33,900 --> 00:39:40,880
thing for our indices so we need to do

761
00:39:37,190 --> 00:39:46,380
GL array element oh sorry

762
00:39:40,880 --> 00:39:49,349
element array buffer we want to specify

763
00:39:46,380 --> 00:39:54,470
that in exactly the same way only this

764
00:39:49,349 --> 00:39:58,349
time it's like this where we specify a

765
00:39:54,469 --> 00:40:01,399
certain number of you sixteens right

766
00:39:58,349 --> 00:40:04,289
otherwise everything is exactly the same

767
00:40:01,400 --> 00:40:08,309
similarly where we before we're doing

768
00:40:04,289 --> 00:40:09,960
our bind buffers to create the initial

769
00:40:08,309 --> 00:40:11,429
versions of these things we want to do

770
00:40:09,960 --> 00:40:13,440
the same thing here for that index

771
00:40:11,429 --> 00:40:15,118
buffer right so that we can have a

772
00:40:13,440 --> 00:40:17,400
separate handle for this buffer that

773
00:40:15,119 --> 00:40:19,200
we're going to use to specify those

774
00:40:17,400 --> 00:40:22,440
indices and then we can actually draw

775
00:40:19,199 --> 00:40:26,809
from them later so that will set all of

776
00:40:22,440 --> 00:40:29,490
our indices to be drawn but of course

777
00:40:26,809 --> 00:40:31,409
unless we actually refer to that buffer

778
00:40:29,489 --> 00:40:33,949
I don't believe anything will happen now

779
00:40:31,409 --> 00:40:36,299
because we're still passing a pointer

780
00:40:33,949 --> 00:40:38,639
although it looks like a long second

781
00:40:36,300 --> 00:40:40,260
here what's the complaint I wasn't

782
00:40:38,639 --> 00:40:42,269
expecting an error I was looking to just

783
00:40:40,260 --> 00:40:43,320
kind of not use it but I'm not sure what

784
00:40:42,269 --> 00:40:45,980
the error actually is let's take a look

785
00:40:43,320 --> 00:40:45,980
the message there

786
00:40:48,429 --> 00:40:58,699
encountered and out of memory error that

787
00:40:56,239 --> 00:41:04,639
seems like not true so we probably

788
00:40:58,699 --> 00:41:06,889
passed the wrong thing there my

789
00:41:04,639 --> 00:41:13,159
assumption is that's because when we

790
00:41:06,889 --> 00:41:14,539
actually were specifying the let's let's

791
00:41:13,159 --> 00:41:17,239
just take a look here when we were

792
00:41:14,539 --> 00:41:19,099
actually specifying the index count we

793
00:41:17,239 --> 00:41:21,199
did something like like maybe you can't

794
00:41:19,099 --> 00:41:27,830
say that the buffer has zero things in

795
00:41:21,199 --> 00:41:34,159
it or it means that it actually was

796
00:41:27,829 --> 00:41:35,690
using this thing which which I don't

797
00:41:34,159 --> 00:41:38,598
know if it actually is or not let me

798
00:41:35,690 --> 00:41:40,519
quickly just check that so suppose we

799
00:41:38,599 --> 00:41:43,130
wanted to know if it was actually trying

800
00:41:40,519 --> 00:41:44,809
to use this array well what we could do

801
00:41:43,130 --> 00:41:46,608
is just make sure it doesn't by

802
00:41:44,809 --> 00:41:49,250
unbinding it so now there's nothing

803
00:41:46,608 --> 00:41:50,779
bound to jail element array buffer so

804
00:41:49,250 --> 00:41:52,070
hopefully that'll let me focus my

805
00:41:50,780 --> 00:41:54,260
debugging on the thing that's actually

806
00:41:52,070 --> 00:41:58,369
the problem okay

807
00:41:54,260 --> 00:42:00,470
so I guess what's happening here is the

808
00:41:58,369 --> 00:42:01,820
thing that happens in OpenGL again this

809
00:42:00,469 --> 00:42:02,809
is one of the reasons open jules bad is

810
00:42:01,820 --> 00:42:05,030
because there's so much backwards

811
00:42:02,809 --> 00:42:06,349
compatibility stuff in it because I

812
00:42:05,030 --> 00:42:07,820
think a lot of the parts of OpenGL are

813
00:42:06,349 --> 00:42:09,260
actually designed pretty well in some

814
00:42:07,820 --> 00:42:11,240
cases if you just pick and choose

815
00:42:09,260 --> 00:42:12,859
certain parts or time pretty well but

816
00:42:11,239 --> 00:42:14,299
there's such a breadth and a long

817
00:42:12,858 --> 00:42:17,449
history there that some things are bad

818
00:42:14,300 --> 00:42:19,490
so I think what happens if I remember

819
00:42:17,449 --> 00:42:21,739
correctly it's very idiosyncratic if you

820
00:42:19,489 --> 00:42:25,069
bind an element array buffer then I

821
00:42:21,739 --> 00:42:28,819
think what happens is this call actually

822
00:42:25,070 --> 00:42:32,720
reads from that buffer but it uses this

823
00:42:28,820 --> 00:42:35,269
pointer as an offset so this pointer

824
00:42:32,719 --> 00:42:37,449
then becomes basically how far into the

825
00:42:35,269 --> 00:42:41,469
buffer you actually wanted to start

826
00:42:37,449 --> 00:42:46,939
right I'm pretty sure that's what it was

827
00:42:41,469 --> 00:42:51,679
so if we wanted to make this work you

828
00:42:46,940 --> 00:42:54,200
know this this goes away right we can we

829
00:42:51,679 --> 00:42:56,899
can do that just by saying okay these

830
00:42:54,199 --> 00:42:58,699
indices here this is actually

831
00:42:56,900 --> 00:42:59,160
technically an offset so even though

832
00:42:58,699 --> 00:43:01,019
we're cat

833
00:42:59,159 --> 00:43:03,929
sing it to avoid start it's not a

834
00:43:01,019 --> 00:43:12,630
pointer what we want to do is take that

835
00:43:03,929 --> 00:43:16,440
offset so this thing and we want to

836
00:43:12,630 --> 00:43:18,420
start at that offset right and then we

837
00:43:16,440 --> 00:43:20,579
want to move up our indexes based on

838
00:43:18,420 --> 00:43:25,430
that so really the way to think about

839
00:43:20,579 --> 00:43:25,429
this would be this becomes a loop now

840
00:43:26,360 --> 00:43:34,710
over the indices this is really an index

841
00:43:32,039 --> 00:43:39,750
index now that sounds weird that's what

842
00:43:34,710 --> 00:43:42,809
it is it's gonna go up by six that's

843
00:43:39,750 --> 00:43:44,989
just what it's gonna do right and we're

844
00:43:42,809 --> 00:43:50,639
gonna start at the index array offset

845
00:43:44,989 --> 00:43:54,500
specified here um now what we need to do

846
00:43:50,639 --> 00:43:57,750
in the quad bit maps is a little harder

847
00:43:54,500 --> 00:44:00,659
but that's okay because I'm just gonna

848
00:43:57,750 --> 00:44:05,369
say that for now we're gonna use all the

849
00:44:00,659 --> 00:44:07,799
same quad bit map right um so

850
00:44:05,369 --> 00:44:10,650
temporarily before we cuz again this is

851
00:44:07,800 --> 00:44:12,420
something we want to change I'm gonna

852
00:44:10,650 --> 00:44:15,960
say that in here when we grab out the

853
00:44:12,420 --> 00:44:19,019
texture what I'm actually gonna do is is

854
00:44:15,960 --> 00:44:21,690
just grab out some one of the random

855
00:44:19,019 --> 00:44:23,730
textures in the thing just the second

856
00:44:21,690 --> 00:44:25,380
texture you ever specify for some reason

857
00:44:23,730 --> 00:44:28,349
right I don't know whichever one it is

858
00:44:25,380 --> 00:44:30,869
it's fine with me so we're just gonna

859
00:44:28,349 --> 00:44:33,480
pick a random texture here to apply

860
00:44:30,869 --> 00:44:35,909
because we are gonna change how we're

861
00:44:33,480 --> 00:44:37,619
specifying this and then when we go

862
00:44:35,909 --> 00:44:40,170
through here I'm just gonna pass the

863
00:44:37,619 --> 00:44:42,109
index array offset as whatever the index

864
00:44:40,170 --> 00:44:46,769
is that we're currently on like that

865
00:44:42,110 --> 00:44:49,019
right and that's how many indices in we

866
00:44:46,769 --> 00:44:51,809
want to be now I think that has to be a

867
00:44:49,019 --> 00:44:59,190
byte offset so I think we want that to

868
00:44:51,809 --> 00:45:06,869
be like this but that's that's about it

869
00:44:59,190 --> 00:45:10,289
okay so now what we need to do because I

870
00:45:06,869 --> 00:45:13,349
think that's correct now what we need to

871
00:45:10,289 --> 00:45:14,759
do is actually put some indices into

872
00:45:13,349 --> 00:45:16,589
that buffer because what we're gonna

873
00:45:14,760 --> 00:45:20,630
find is now that buffer is just filled

874
00:45:16,590 --> 00:45:23,970
with garbage right oops we still get our

875
00:45:20,630 --> 00:45:27,360
am i accessing off of it for some reason

876
00:45:23,969 --> 00:45:29,309
oh well I don't know if that buffer is

877
00:45:27,360 --> 00:45:30,599
clear so let's fill it with indices

878
00:45:29,309 --> 00:45:32,940
first and then we'll don't look it

879
00:45:30,599 --> 00:45:36,329
so what we need to do is every time we

880
00:45:32,940 --> 00:45:39,840
push a quad in the renderer we need to

881
00:45:36,329 --> 00:45:52,319
actually go into the to the index buffer

882
00:45:39,840 --> 00:45:55,620
as well as every time we sort of want to

883
00:45:52,320 --> 00:45:58,410
access any kind of quad like every time

884
00:45:55,619 --> 00:46:01,319
we go into the push quad here we want

885
00:45:58,409 --> 00:46:03,989
all of our calls to push quad to be

886
00:46:01,320 --> 00:46:06,269
filling the index buffer in addition to

887
00:46:03,989 --> 00:46:09,839
the vertex buffer so much like how in

888
00:46:06,269 --> 00:46:10,530
here we do textured verts tar vert and

889
00:46:09,840 --> 00:46:13,710
off we go

890
00:46:10,530 --> 00:46:18,630
in here we also want to do the same

891
00:46:13,710 --> 00:46:24,240
thing we want to do like index index

892
00:46:18,630 --> 00:46:30,840
equals next count index count plus

893
00:46:24,239 --> 00:46:33,619
equals six and we want to assert that we

894
00:46:30,840 --> 00:46:33,620
line up okay

895
00:46:35,389 --> 00:46:51,859
we've won our index out to be at that

896
00:46:47,480 --> 00:46:53,449
place and then when we put these out we

897
00:46:51,860 --> 00:46:54,769
want to do exactly what we did before

898
00:46:53,449 --> 00:46:57,649
right

899
00:46:54,769 --> 00:46:59,389
so the vertice like exactly the way we

900
00:46:57,650 --> 00:47:02,410
did the vertices before we want to put

901
00:46:59,389 --> 00:47:06,670
those out here so we want to like index

902
00:47:02,409 --> 00:47:14,000
0 oops

903
00:47:06,670 --> 00:47:16,309
1 2 3 4 5 like so right

904
00:47:14,000 --> 00:47:18,289
and I suppose if we really wanted to do

905
00:47:16,309 --> 00:47:22,699
this you know we could do this

906
00:47:18,289 --> 00:47:26,199
I mean dividing by 6 is not a great idea

907
00:47:22,699 --> 00:47:26,199
but it's okay it's temporary right

908
00:47:33,119 --> 00:47:38,849
so we can do that and that still ends up

909
00:47:36,000 --> 00:47:42,929
being the correct thing and we can write

910
00:47:38,849 --> 00:47:45,210
that bitmap in there as well no harm no

911
00:47:42,929 --> 00:47:46,919
foul so when we ran out these indices

912
00:47:45,210 --> 00:47:49,110
now we need to actually write out what

913
00:47:46,920 --> 00:47:51,119
these vertex indices actually are and so

914
00:47:49,110 --> 00:47:53,670
we need to write out vert index relative

915
00:47:51,119 --> 00:47:55,710
things so here's our vertices and now we

916
00:47:53,670 --> 00:47:57,269
know that these things actually go the

917
00:47:55,710 --> 00:48:00,539
other way round from how I thought they

918
00:47:57,269 --> 00:48:02,340
went so they went like top down instead

919
00:48:00,539 --> 00:48:06,029
of bottom up which is kind of nuts

920
00:48:02,340 --> 00:48:07,650
that's what they do so if they go top

921
00:48:06,030 --> 00:48:11,760
down again we want so we're going to

922
00:48:07,650 --> 00:48:15,570
want 0 1 2 right and then we're going to

923
00:48:11,760 --> 00:48:19,700
want 1 2 3

924
00:48:15,570 --> 00:48:19,700
I think I'm not

925
00:48:31,889 --> 00:48:35,109
[Music]

926
00:48:40,920 --> 00:49:00,070
these of course need to be 16-bits and

927
00:48:46,239 --> 00:49:03,549
be sure to sort that so this way we

928
00:49:00,070 --> 00:49:05,080
would know if we ever tried to overrun

929
00:49:03,550 --> 00:49:06,820
those bounds we'd get an assertion here

930
00:49:05,079 --> 00:49:12,340
and that's going to be relevant in a

931
00:49:06,820 --> 00:49:13,930
little bit right okay so what this looks

932
00:49:12,340 --> 00:49:15,670
like interesting enough is apparently

933
00:49:13,929 --> 00:49:20,710
filling the index buffer now at least

934
00:49:15,670 --> 00:49:23,409
kept us within a range so so that's kind

935
00:49:20,710 --> 00:49:26,769
of cool actually I wasn't necessarily

936
00:49:23,409 --> 00:49:28,239
expecting that to solve that problem but

937
00:49:26,769 --> 00:49:30,429
we still have to actually now get stuff

938
00:49:28,239 --> 00:49:31,359
on the screen right and there's a number

939
00:49:30,429 --> 00:49:34,480
of things that could be wrong here

940
00:49:31,360 --> 00:49:36,870
including our our vertex indices like

941
00:49:34,480 --> 00:49:39,639
including all sorts of stuff right so

942
00:49:36,869 --> 00:49:41,949
our vert index here we know that that's

943
00:49:39,639 --> 00:49:45,219
the base vert index off of the vertex

944
00:49:41,949 --> 00:49:48,250
array so I believe that is the correct

945
00:49:45,219 --> 00:49:49,779
basis here also I don't know if this

946
00:49:48,250 --> 00:49:52,480
winding order is correct I got to go

947
00:49:49,780 --> 00:49:54,040
right down but it doesn't matter because

948
00:49:52,480 --> 00:49:55,869
if it was incorrect

949
00:49:54,039 --> 00:49:57,550
we'd just be seeing the back faces

950
00:49:55,869 --> 00:49:59,739
instead of the front faces so the fact

951
00:49:57,550 --> 00:50:02,050
that we're seeing nothing lets us know

952
00:49:59,739 --> 00:50:05,199
that that's not exactly the problem

953
00:50:02,050 --> 00:50:07,180
right now let's just make a couple quick

954
00:50:05,199 --> 00:50:09,159
adjustments here let's make sure we're

955
00:50:07,179 --> 00:50:10,750
using a white bitmap that way we know

956
00:50:09,159 --> 00:50:15,399
that we're not just picking a texture

957
00:50:10,750 --> 00:50:18,039
improperly so we're not seeing anything

958
00:50:15,400 --> 00:50:22,599
so that's means that that wasn't the

959
00:50:18,039 --> 00:50:23,500
problem there right hmm and then finally

960
00:50:22,599 --> 00:50:25,480
oh well here you go

961
00:50:23,500 --> 00:50:27,550
so these are these we're saying unsigned

962
00:50:25,480 --> 00:50:28,960
int for some reason we don't want them

963
00:50:27,550 --> 00:50:31,150
to say unsigned and we want going to be

964
00:50:28,960 --> 00:50:34,179
unsigned shorts so I don't know why that

965
00:50:31,150 --> 00:50:36,690
was still saying that we just forgot to

966
00:50:34,179 --> 00:50:36,690
change it

967
00:50:38,119 --> 00:50:42,589
sooo now when we look it looks like

968
00:50:40,880 --> 00:50:44,690
we've got one of our triangles wound

969
00:50:42,590 --> 00:50:51,170
wrong still let me just so let me just

970
00:50:44,690 --> 00:50:56,750
write this out now so the order of these

971
00:50:51,170 --> 00:51:02,389
we determined is actually not this way

972
00:50:56,750 --> 00:51:05,570
it's this way apparently apparently so

973
00:51:02,389 --> 00:51:11,079
if it goes like this and we want to do

974
00:51:05,570 --> 00:51:14,330
that we would do 0 1 2 for this

975
00:51:11,079 --> 00:51:29,210
counterclockwise triangle and then we

976
00:51:14,329 --> 00:51:31,789
would do 1 3 2 for the other one and so

977
00:51:29,210 --> 00:51:33,590
that should draw all of these things

978
00:51:31,789 --> 00:51:35,509
through the index buffer now and again

979
00:51:33,590 --> 00:51:37,340
this isn't in except for we're passing

980
00:51:35,510 --> 00:51:43,160
down from the app and that looks about

981
00:51:37,340 --> 00:51:45,140
right and now if I go over to the the

982
00:51:43,159 --> 00:51:52,719
actual render again and just put put

983
00:51:45,139 --> 00:51:52,719
back in the cloud bitmaps

984
00:51:58,130 --> 00:52:02,900
we should be good to go and that that

985
00:52:00,170 --> 00:52:06,769
looks about right to me so I think

986
00:52:02,900 --> 00:52:09,170
that's all good right um so now what we

987
00:52:06,769 --> 00:52:10,940
can do is stop doing this entirely so

988
00:52:09,170 --> 00:52:12,800
now what we can do is actually draw a

989
00:52:10,940 --> 00:52:15,409
huge batch and the problem will be that

990
00:52:12,800 --> 00:52:18,860
we won't know what bitmap to use but

991
00:52:15,409 --> 00:52:21,109
again if I just temporarily speaking say

992
00:52:18,860 --> 00:52:23,900
that the texture that I want to use is

993
00:52:21,110 --> 00:52:27,680
actually going to be a nerf this

994
00:52:23,900 --> 00:52:31,639
temporarily right this what I can do is

995
00:52:27,679 --> 00:52:39,019
say alright let's use a texture oops

996
00:52:31,639 --> 00:52:41,420
that we just Roberta pretends that it's

997
00:52:39,019 --> 00:52:44,530
okay we'll just use the white bitmap

998
00:52:41,420 --> 00:52:46,820
instead so we do white bitmap here

999
00:52:44,530 --> 00:52:48,260
instead of the actual bitmap that we

1000
00:52:46,820 --> 00:52:50,690
want we're always going to use the white

1001
00:52:48,260 --> 00:52:53,930
bitmap if we did that then we could

1002
00:52:50,690 --> 00:52:57,130
actually draw this in bulk right because

1003
00:52:53,929 --> 00:53:01,269
now we could just say look start here

1004
00:52:57,130 --> 00:53:06,250
like this is where I want you to start

1005
00:53:01,269 --> 00:53:10,190
and this is how many I want you to draw

1006
00:53:06,250 --> 00:53:12,230
right but now just don't bother with a

1007
00:53:10,190 --> 00:53:14,269
Ferrari loop tell OpenGL to draw them

1008
00:53:12,230 --> 00:53:16,460
all right and that takes us from having

1009
00:53:14,269 --> 00:53:21,039
one draw call per sprite to having one

1010
00:53:16,460 --> 00:53:24,769
draw call per entire scene pass right

1011
00:53:21,039 --> 00:53:27,199
and so that looks like this and again

1012
00:53:24,769 --> 00:53:28,579
it's totally correct for everything

1013
00:53:27,199 --> 00:53:30,699
other than the fact that we don't have a

1014
00:53:28,579 --> 00:53:32,719
way to vary the textures and that's why

1015
00:53:30,699 --> 00:53:34,759
we want to talk about things like

1016
00:53:32,719 --> 00:53:40,009
texture arrays because now what we want

1017
00:53:34,760 --> 00:53:43,250
is some way to vary our texture I in

1018
00:53:40,010 --> 00:53:46,430
some way that doesn't involve having to

1019
00:53:43,250 --> 00:53:52,340
restart that primitive right having to

1020
00:53:46,429 --> 00:53:57,049
restart that loop and so let's take this

1021
00:53:52,340 --> 00:53:59,900
one at a time if we take a look at the

1022
00:53:57,050 --> 00:54:01,730
frame speed here we can see that we're

1023
00:53:59,900 --> 00:54:03,800
still a little slow for reasons we

1024
00:54:01,730 --> 00:54:05,300
really just don't know what they are and

1025
00:54:03,800 --> 00:54:06,740
that's the place where we'd really like

1026
00:54:05,300 --> 00:54:09,260
to get some profiling in here because we

1027
00:54:06,739 --> 00:54:11,088
just don't know where these milliseconds

1028
00:54:09,260 --> 00:54:14,089
are going right we

1029
00:54:11,088 --> 00:54:15,768
do not fundamentally know why we aren't

1030
00:54:14,088 --> 00:54:21,710
hitting 60 frames a second for example

1031
00:54:15,768 --> 00:54:23,058
we have no idea and furthermore it's a

1032
00:54:21,710 --> 00:54:26,059
little weird because it looks like it's

1033
00:54:23,059 --> 00:54:32,450
fill rate related so again it could

1034
00:54:26,059 --> 00:54:34,670
because of the multi sampling right it

1035
00:54:32,449 --> 00:54:36,228
could be because of our shader is

1036
00:54:34,670 --> 00:54:38,900
screwed up in some way we don't know

1037
00:54:36,228 --> 00:54:40,248
right so we have no idea what the reason

1038
00:54:38,900 --> 00:54:43,219
for the slowness is and we're gonna have

1039
00:54:40,248 --> 00:54:44,988
to investigate that separately but what

1040
00:54:43,219 --> 00:54:46,608
we can see is like when we get down to a

1041
00:54:44,989 --> 00:54:50,210
smaller size then all of a sudden we do

1042
00:54:46,608 --> 00:54:52,278
run at 60 frames a second right and

1043
00:54:50,210 --> 00:54:53,900
they'll be interesting to find out why

1044
00:54:52,278 --> 00:54:56,170
that's where we're gonna have to hope we

1045
00:54:53,900 --> 00:54:59,838
can get insight working relatively well

1046
00:54:56,170 --> 00:55:04,298
all right so if we push that process

1047
00:54:59,838 --> 00:55:07,369
further just to see what's going on now

1048
00:55:04,298 --> 00:55:11,798
the next part of this process is getting

1049
00:55:07,369 --> 00:55:14,028
up above the unsigned short limit

1050
00:55:11,798 --> 00:55:17,210
because what we're gonna hit then at

1051
00:55:14,028 --> 00:55:19,548
that point now that we move to that is

1052
00:55:17,210 --> 00:55:26,599
we're gonna see a problem where when we

1053
00:55:19,548 --> 00:55:31,159
do inside our inside our renderer when

1054
00:55:26,599 --> 00:55:34,160
we go to render we'll blow out that that

1055
00:55:31,159 --> 00:55:36,170
index rate really quickly so now we want

1056
00:55:34,159 --> 00:55:37,548
to scale up to being able to do tons of

1057
00:55:36,170 --> 00:55:40,759
these things so we want to be able to

1058
00:55:37,548 --> 00:55:42,108
put that 60 in here again and what we're

1059
00:55:40,759 --> 00:55:44,119
gonna find is as soon as we do that

1060
00:55:42,108 --> 00:55:46,759
we're gonna blow out the addressable

1061
00:55:44,119 --> 00:55:48,079
range for an index right that's just not

1062
00:55:46,759 --> 00:55:51,769
going to work

1063
00:55:48,079 --> 00:55:53,539
so what we see here is again we haven't

1064
00:55:51,768 --> 00:55:55,399
exceeded the maximum number of vertices

1065
00:55:53,539 --> 00:55:58,039
we have room in the buffer to put

1066
00:55:55,400 --> 00:56:00,170
another vertex we haven't exceeded the

1067
00:55:58,039 --> 00:56:01,549
maximum number of indices we've got

1068
00:56:00,170 --> 00:56:04,639
plenty of room in the buffer to put in

1069
00:56:01,548 --> 00:56:11,829
another index what we don't have is

1070
00:56:04,639 --> 00:56:16,368
space in a you 16 to refer to a vertex

1071
00:56:11,829 --> 00:56:18,769
right that's the problem so what we need

1072
00:56:16,369 --> 00:56:21,588
to do is find a way to get our u16s to

1073
00:56:18,768 --> 00:56:23,359
be able to render up into more parts of

1074
00:56:21,588 --> 00:56:27,199
that buffer

1075
00:56:23,360 --> 00:56:29,599
so what we can do here I believe and

1076
00:56:27,199 --> 00:56:31,219
you'll have to forgive me for not

1077
00:56:29,599 --> 00:56:32,869
remembering off the top of my head how

1078
00:56:31,219 --> 00:56:35,029
to do it because again open Jo it's kind

1079
00:56:32,869 --> 00:56:38,239
of a sprawl of ridiculousness at this

1080
00:56:35,030 --> 00:56:47,620
point but what we want to be able to do

1081
00:56:38,239 --> 00:56:51,289
now is pass a an offset so that we can

1082
00:56:47,619 --> 00:56:54,710
so that we can say look we're using

1083
00:56:51,289 --> 00:56:56,750
these two buffers all the vertices are

1084
00:56:54,710 --> 00:56:58,610
in one buffer all the indices are in the

1085
00:56:56,750 --> 00:57:01,789
other buffer there's no problem with

1086
00:56:58,610 --> 00:57:03,200
that everything fits okay so we don't

1087
00:57:01,789 --> 00:57:04,909
need to talk to you about multiple

1088
00:57:03,199 --> 00:57:08,449
buffers or anything like that

1089
00:57:04,909 --> 00:57:10,819
but because we're using you sixteens we

1090
00:57:08,449 --> 00:57:14,119
need to do this in a couple different

1091
00:57:10,820 --> 00:57:16,930
batches potentially where we draw 65,000

1092
00:57:14,119 --> 00:57:20,769
vertices at a time and then the next

1093
00:57:16,929 --> 00:57:23,419
65,000 vertices at a time you know and

1094
00:57:20,769 --> 00:57:25,639
so what you can see here is like say

1095
00:57:23,420 --> 00:57:28,280
this GL draw elements base vertex rate

1096
00:57:25,639 --> 00:57:31,219
so what you can see here is that's

1097
00:57:28,280 --> 00:57:36,920
almost exactly the thing that we're

1098
00:57:31,219 --> 00:57:38,989
looking for this call does exactly the

1099
00:57:36,920 --> 00:57:41,690
same thing as the other call but it

1100
00:57:38,989 --> 00:57:45,769
allows us to pass in a number that

1101
00:57:41,690 --> 00:57:48,230
shifts up all of our indices past the

1102
00:57:45,769 --> 00:57:51,769
numbers that they could normally hit so

1103
00:57:48,230 --> 00:57:55,250
now we get the ability to add a 32-bit

1104
00:57:51,769 --> 00:57:57,619
offset to our 16-bit index and that can

1105
00:57:55,250 --> 00:58:04,039
slide us anywhere inside the buffer that

1106
00:57:57,619 --> 00:58:06,889
we need to be right so we don't have to

1107
00:58:04,039 --> 00:58:10,610
do this we could use 32-bit indices but

1108
00:58:06,889 --> 00:58:12,619
it's pretty easy for us to not and it's

1109
00:58:10,610 --> 00:58:16,880
just less data that has to get

1110
00:58:12,619 --> 00:58:19,699
transferred right so if we wanted to do

1111
00:58:16,880 --> 00:58:21,860
that how would we do it well luckily we

1112
00:58:19,699 --> 00:58:25,869
kind of know when we call get current

1113
00:58:21,860 --> 00:58:30,380
quads we kind of know what's up right

1114
00:58:25,869 --> 00:58:35,650
what we can do is say it would this set

1115
00:58:30,380 --> 00:58:38,420
of quads exceed the maximum number so

1116
00:58:35,650 --> 00:59:01,550
would the current quads that we have

1117
00:58:38,420 --> 00:59:04,180
right now exceed the max per batch so

1118
00:59:01,550 --> 00:59:08,990
what we want to say there is look I

1119
00:59:04,179 --> 00:59:12,919
can't take it that it's the maximum

1120
00:59:08,989 --> 00:59:16,189
thing that could fit into you 16 and

1121
00:59:12,920 --> 00:59:25,700
maybe I'll subtract one from that just

1122
00:59:16,190 --> 00:59:29,869
because I don't actually want to ever

1123
00:59:25,699 --> 00:59:31,069
fill entirely like the space because if

1124
00:59:29,869 --> 00:59:35,599
we ever did want to use primitive

1125
00:59:31,070 --> 00:59:38,090
restart I'll just leave one so if the

1126
00:59:35,599 --> 00:59:42,440
maximum number we could hold in a 16-bit

1127
00:59:38,090 --> 00:59:45,910
integer more or less if I divide that

1128
00:59:42,440 --> 00:59:48,619
number by four then that's how many

1129
00:59:45,909 --> 00:59:51,759
different vertices I could ever

1130
00:59:48,619 --> 00:59:59,599
reference so I'm going to look to see

1131
00:59:51,760 --> 01:00:02,390
would we exceed the number that maximum

1132
00:59:59,599 --> 01:00:06,230
quads would we exceed that by what we're

1133
01:00:02,389 --> 01:00:08,900
being asked and if the answer is that we

1134
01:00:06,230 --> 01:00:11,449
would then I need to push a new one on

1135
01:00:08,900 --> 01:00:14,480
so I'm just gonna say look forget about

1136
01:00:11,449 --> 01:00:16,429
the old one at that point it's a it's

1137
01:00:14,480 --> 01:00:19,070
done it's over I'm not going to talk

1138
01:00:16,429 --> 01:00:22,309
about another one so don't expect me to

1139
01:00:19,070 --> 01:00:25,970
write then I'll go ahead and say push a

1140
01:00:22,309 --> 01:00:28,099
new one on start it all over again the

1141
01:00:25,969 --> 01:00:30,399
vertex array offset is going to be

1142
01:00:28,099 --> 01:00:36,139
whatever this vertex count is here right

1143
01:00:30,400 --> 01:00:39,170
and off we're gonna go okay so what that

1144
01:00:36,139 --> 01:00:42,259
allows us to do is now inside the open

1145
01:00:39,170 --> 01:00:47,300
gel render pass when we send these down

1146
01:00:42,260 --> 01:00:49,160
we know that we can now call this call

1147
01:00:47,300 --> 01:00:54,200
instead which is GL draw element

1148
01:00:49,159 --> 01:00:57,828
base vertex and what we can do is pass

1149
01:00:54,199 --> 01:01:07,818
that down as the base vertex so this

1150
01:00:57,829 --> 01:01:11,568
entry knows that all of its offsets

1151
01:01:07,818 --> 01:01:15,199
start at this number and then when we

1152
01:01:11,568 --> 01:01:17,838
actually push our quad on instead of

1153
01:01:15,199 --> 01:01:20,058
using this vertex count as the vertex

1154
01:01:17,838 --> 01:01:22,369
count that we base our indices off of

1155
01:01:20,059 --> 01:01:27,410
right so we not going to use this vertex

1156
01:01:22,369 --> 01:01:28,940
anymore this vertex in here mark we're

1157
01:01:27,409 --> 01:01:34,989
going to use a different base index and

1158
01:01:28,940 --> 01:01:37,900
it's going to be the actual quads the

1159
01:01:34,989 --> 01:01:41,389
number that's in the actual quads itself

1160
01:01:37,900 --> 01:01:43,130
right so in here where we do this entry

1161
01:01:41,389 --> 01:01:44,719
quad count right

1162
01:01:43,130 --> 01:01:47,059
it's actually going to be based off that

1163
01:01:44,719 --> 01:01:50,919
number so right here we're gonna say the

1164
01:01:47,059 --> 01:01:50,920
current clods that we're talking about

1165
01:01:52,480 --> 01:02:00,048
that quad count times four is going to

1166
01:01:56,599 --> 01:02:03,109
be the actual base index because we

1167
01:02:00,048 --> 01:02:06,108
don't anymore actually you know what I

1168
01:02:03,108 --> 01:02:09,588
don't even need to do that that's not

1169
01:02:06,108 --> 01:02:14,838
what I wanted I can just use this it's

1170
01:02:09,588 --> 01:02:18,858
really just that right um so what I can

1171
01:02:14,838 --> 01:02:25,009
say is hey the first vert index that

1172
01:02:18,858 --> 01:02:27,920
you're gonna use is this one now that

1173
01:02:25,010 --> 01:02:30,170
vertex RA offset is the basis so

1174
01:02:27,920 --> 01:02:35,000
whatever vertex index you were going to

1175
01:02:30,170 --> 01:02:37,670
use subtract away whatever the whatever

1176
01:02:35,000 --> 01:02:40,159
this quads this current quad groups

1177
01:02:37,670 --> 01:02:43,430
based vertex index is just subtract that

1178
01:02:40,159 --> 01:02:45,670
away and that's your index you know I'm

1179
01:02:43,429 --> 01:02:45,669
saying

1180
01:02:47,730 --> 01:02:53,059
okay so now we just need this function

1181
01:02:50,519 --> 01:02:55,230
because this is a function we don't have

1182
01:02:53,059 --> 01:02:57,500
so what I want to do is go ahead and

1183
01:02:55,230 --> 01:02:57,500
grab it

1184
01:03:07,769 --> 01:03:18,539
and this is what it looks like right

1185
01:03:09,760 --> 01:03:21,460
here so where we were doing our open gel

1186
01:03:18,539 --> 01:03:23,079
our you know when we basically at this

1187
01:03:21,460 --> 01:03:25,800
part we have a big Lemongrab where we go

1188
01:03:23,079 --> 01:03:29,230
through and let me grab all the api's

1189
01:03:25,800 --> 01:03:31,330
that we want to take here that we want

1190
01:03:29,230 --> 01:03:44,190
to use and so I'm just going to go ahead

1191
01:03:31,329 --> 01:03:56,170
and put those in here I think that's it

1192
01:03:44,190 --> 01:03:57,309
so I'm gonna say we want that there's

1193
01:03:56,170 --> 01:04:00,039
our geo elements

1194
01:03:57,309 --> 01:04:01,690
Jill Drummond space vertex and then what

1195
01:04:00,039 --> 01:04:04,059
I have to do is somewhere here

1196
01:04:01,690 --> 01:04:14,110
eventually I have to actually ask for it

1197
01:04:04,059 --> 01:04:16,119
okay now that was a lot of stuff to add

1198
01:04:14,110 --> 01:04:20,019
so probably we're gonna run into some

1199
01:04:16,119 --> 01:04:21,369
trouble here and also this that

1200
01:04:20,019 --> 01:04:23,650
assertion needs to be modified to

1201
01:04:21,369 --> 01:04:27,759
actually be correct it's not correct

1202
01:04:23,650 --> 01:04:30,519
anymore um so we need to sort of create

1203
01:04:27,760 --> 01:04:32,170
a temporary here called base index and

1204
01:04:30,519 --> 01:04:38,559
that's the thing we want to make sure

1205
01:04:32,170 --> 01:04:49,829
that we can still equal after the cast

1206
01:04:38,559 --> 01:04:49,829
just to make sure so that's

1207
01:04:50,139 --> 01:04:56,038
I mean it looks pretty darn good

1208
01:04:53,289 --> 01:04:56,039
actually

1209
01:04:56,250 --> 01:04:59,289
[Music]

1210
01:05:08,360 --> 01:05:13,460
and you'll notice we're actually still

1211
01:05:10,489 --> 01:05:15,199
running at a high frame rate hi in this

1212
01:05:13,460 --> 01:05:17,210
case compared to what we were running

1213
01:05:15,199 --> 01:05:21,139
before I don't really know about the

1214
01:05:17,210 --> 01:05:23,630
texture fetching there though so I I do

1215
01:05:21,139 --> 01:05:30,409
think when we do render up in jail here

1216
01:05:23,630 --> 01:05:32,329
let me just do in render or test let me

1217
01:05:30,409 --> 01:05:37,609
go in and make sure that whatever we're

1218
01:05:32,329 --> 01:05:40,369
doing is not let me just make sure that

1219
01:05:37,610 --> 01:05:42,200
whatever we're doing is not just because

1220
01:05:40,369 --> 01:05:44,719
we're using the white bitmap now I'm

1221
01:05:42,199 --> 01:05:46,730
gonna try using like the grass spit map

1222
01:05:44,719 --> 01:05:50,089
or try to find a different bitmap to use

1223
01:05:46,730 --> 01:05:54,849
I I don't know how to get it exactly but

1224
01:05:50,090 --> 01:05:54,850
I'll just I'll pick one randomly oops

1225
01:06:00,460 --> 01:06:04,519
this will probably be grass most of the

1226
01:06:02,809 --> 01:06:12,769
things we've sent down our grass so you

1227
01:06:04,519 --> 01:06:15,559
know um so what you can see here is that

1228
01:06:12,769 --> 01:06:20,960
really just getting rid of that dispatch

1229
01:06:15,559 --> 01:06:22,219
totally fixed our problem right um you

1230
01:06:20,960 --> 01:06:23,659
know there's probably a bunch of things

1231
01:06:22,219 --> 01:06:25,699
we're still doing wrong in terms of

1232
01:06:23,659 --> 01:06:27,619
frame right here because you can see we

1233
01:06:25,699 --> 01:06:31,369
still aren't quite as good as we

1234
01:06:27,619 --> 01:06:32,809
probably should be of course we can't

1235
01:06:31,369 --> 01:06:33,980
tell cuz Windows is still capping our

1236
01:06:32,809 --> 01:06:36,019
frame rate even though we asked for

1237
01:06:33,980 --> 01:06:39,469
vsync to be off they totally decided to

1238
01:06:36,019 --> 01:06:41,480
ignore us oh well but what we can see

1239
01:06:39,469 --> 01:06:44,689
here is that we're not getting any of

1240
01:06:41,480 --> 01:06:46,490
those ridiculous slowdowns we're running

1241
01:06:44,690 --> 01:06:48,309
basically the same frame right we were

1242
01:06:46,489 --> 01:06:50,389
when we weren't putting any grass in

1243
01:06:48,309 --> 01:06:56,509
despite the fact that now we've put in

1244
01:06:50,389 --> 01:07:01,009
60 grass bitmaps / 2 per tile right so

1245
01:06:56,510 --> 01:07:02,810
we can immediately see that the dispatch

1246
01:07:01,010 --> 01:07:05,480
overhead is a huge was a huge issue for

1247
01:07:02,809 --> 01:07:07,639
us exactly as we thought and so all we

1248
01:07:05,480 --> 01:07:12,110
really need now to finish things off is

1249
01:07:07,639 --> 01:07:14,779
a way of changing the texture every time

1250
01:07:12,110 --> 01:07:16,760
we swap right every time we go to a

1251
01:07:14,780 --> 01:07:20,330
different quad we need a way of changing

1252
01:07:16,760 --> 01:07:22,640
the texture and we need

1253
01:07:20,329 --> 01:07:24,559
texture arrays to do that or a texture

1254
01:07:22,639 --> 01:07:27,710
apps right those are the only two ways

1255
01:07:24,559 --> 01:07:29,690
we can really make that happen there is

1256
01:07:27,710 --> 01:07:32,090
a third way that I'm just sort of saying

1257
01:07:29,690 --> 01:07:34,400
that we're not gonna do and that would

1258
01:07:32,090 --> 01:07:36,680
be to use by endless textures and the

1259
01:07:34,400 --> 01:07:38,840
reason that I don't want to do that is

1260
01:07:36,679 --> 01:07:49,159
just because I'm afraid of that it won't

1261
01:07:38,840 --> 01:07:50,780
be broad enough support for it so I

1262
01:07:49,159 --> 01:07:56,899
think I would really just rather use the

1263
01:07:50,780 --> 01:08:00,830
texture race so what I would like to do

1264
01:07:56,900 --> 01:08:03,139
is I'd like to go ahead and set up the

1265
01:08:00,829 --> 01:08:07,420
texture race I don't think I have a huge

1266
01:08:03,139 --> 01:08:07,420
amount of time maybe 45 minutes

1267
01:08:19,289 --> 01:08:25,119
so it's a little tight in terms of

1268
01:08:22,000 --> 01:08:27,699
getting that done but really that's the

1269
01:08:25,119 --> 01:08:30,279
main thing that that we haven't done yet

1270
01:08:27,699 --> 01:08:32,579
right is a way to make this work and so

1271
01:08:30,279 --> 01:08:35,349
what we'd like to do here is basically

1272
01:08:32,579 --> 01:08:37,239
when we do this bind texture we'd like

1273
01:08:35,350 --> 01:08:40,660
to do just a single line texture where

1274
01:08:37,239 --> 01:08:44,559
you just say this is the texture we're

1275
01:08:40,659 --> 01:08:49,059
binding and it's over and then each of

1276
01:08:44,560 --> 01:08:53,950
these each of these draw calls here

1277
01:08:49,060 --> 01:08:55,660
would each not drunk I'll sorry each of

1278
01:08:53,949 --> 01:08:57,699
the vertices pulled out by the draw call

1279
01:08:55,659 --> 01:09:04,358
would actually contain information in it

1280
01:08:57,699 --> 01:09:10,929
necessary to pick so let's take a look

1281
01:09:04,359 --> 01:09:17,380
at what would happen there I want to

1282
01:09:10,930 --> 01:09:20,430
look at the vertex descriptors here we

1283
01:09:17,380 --> 01:09:20,430
haven't looked at these in a while

1284
01:09:23,979 --> 01:09:31,750
so you can see here a vert PID vert nid

1285
01:09:27,798 --> 01:09:37,759
vert u VI d you like this stuff right

1286
01:09:31,750 --> 01:09:39,548
get a triplication that sort of stuff so

1287
01:09:37,759 --> 01:09:44,328
what I'd like to do here is extend that

1288
01:09:39,548 --> 01:09:46,429
in a sense so this vert u v I'd like to

1289
01:09:44,328 --> 01:09:49,960
actually have a an additional thing in

1290
01:09:46,429 --> 01:09:49,960
here that's that allows you to get

1291
01:09:51,099 --> 01:10:04,520
another value which is going to be used

1292
01:09:53,779 --> 01:10:07,219
as a texture array index so in terms of

1293
01:10:04,520 --> 01:10:10,750
which texture we're selecting there the

1294
01:10:07,219 --> 01:10:15,319
vert light index what you could should

1295
01:10:10,750 --> 01:10:17,389
hopefully we'll be able to see is that

1296
01:10:15,319 --> 01:10:20,090
we only really use that in one program

1297
01:10:17,389 --> 01:10:22,310
which is right here and this is our

1298
01:10:20,090 --> 01:10:24,050
general like fill function right it's

1299
01:10:22,310 --> 01:10:27,889
this the Z bias program which does all

1300
01:10:24,050 --> 01:10:30,020
of our filling so what I'd like to do

1301
01:10:27,889 --> 01:10:35,569
here is suggest that maybe what we can

1302
01:10:30,020 --> 01:10:36,829
do is pass in another another value into

1303
01:10:35,569 --> 01:10:48,948
the front end there that will get used

1304
01:10:36,828 --> 01:10:50,630
here I don't know yeah so there might be

1305
01:10:48,948 --> 01:10:51,769
other ways that that we would want to

1306
01:10:50,630 --> 01:10:53,239
think about this again like I said

1307
01:10:51,770 --> 01:10:55,719
because we don't need it actually it

1308
01:10:53,238 --> 01:10:59,629
doesn't need to be specified specified

1309
01:10:55,719 --> 01:11:03,198
per index it can just be something

1310
01:10:59,630 --> 01:11:04,849
that's specified once and done it's the

1311
01:11:03,198 --> 01:11:12,799
same as vert light index in that in that

1312
01:11:04,849 --> 01:11:16,400
sense so if I just call it texture index

1313
01:11:12,800 --> 01:11:18,500
here then what will happen is we're

1314
01:11:16,399 --> 01:11:24,078
gonna talk about it being passed in this

1315
01:11:18,500 --> 01:11:26,420
way even though it's not super necessary

1316
01:11:24,078 --> 01:11:28,219
because each vertex doesn't you specify

1317
01:11:26,420 --> 01:11:29,929
each triangle can specify it uniquely

1318
01:11:28,219 --> 01:11:32,948
right so that's the part that's a little

1319
01:11:29,929 --> 01:11:32,949
bit wasteful here

1320
01:11:33,998 --> 01:11:47,448
that we're not addressing but if we take

1321
01:11:44,748 --> 01:11:48,679
a fried texture index in here then what

1322
01:11:47,448 --> 01:11:50,958
we would be able to do is use that

1323
01:11:48,679 --> 01:11:52,969
texture index when we're actually doing

1324
01:11:50,958 --> 01:11:55,939
our textile fetching so for example

1325
01:11:52,969 --> 01:11:58,279
right in here for text sample we could

1326
01:11:55,939 --> 01:12:01,788
use that to fetch into the texture right

1327
01:11:58,279 --> 01:12:04,429
here rather than just into a flat single

1328
01:12:01,788 --> 01:12:06,018
2d texture so what I'd like to do is

1329
01:12:04,429 --> 01:12:08,809
make it so that we can pass that

1330
01:12:06,019 --> 01:12:13,489
information down so basically everywhere

1331
01:12:08,809 --> 01:12:17,929
that we see that light index that vert

1332
01:12:13,488 --> 01:12:33,158
light index happening I would just I

1333
01:12:17,929 --> 01:12:33,158
would put in for texture index like so

1334
01:12:34,340 --> 01:12:52,170
so we're basically just doing the same

1335
01:12:36,389 --> 01:12:54,119
thing here this is still being unsigned

1336
01:12:52,170 --> 01:12:59,100
short because we're not gonna allow more

1337
01:12:54,119 --> 01:13:14,039
than 65,000 textures and I ain't gonna

1338
01:12:59,100 --> 01:13:25,260
happen again just grab those out just

1339
01:13:14,039 --> 01:13:27,630
let them grab in this right here and

1340
01:13:25,260 --> 01:13:32,579
there's that I'm gonna call this vert

1341
01:13:27,630 --> 01:13:34,500
line index area I'm sorry for it text

1342
01:13:32,579 --> 01:13:37,260
for index again just because I want it

1343
01:13:34,500 --> 01:13:39,469
to kind of line up the same way that it

1344
01:13:37,260 --> 01:13:42,449
was before

1345
01:13:39,469 --> 01:13:47,399
uh and so that's really what we're

1346
01:13:42,448 --> 01:13:49,169
talking about I don't really know that

1347
01:13:47,399 --> 01:13:52,439
we'll need anything other than that

1348
01:13:49,170 --> 01:13:54,329
where is that out there it is there's

1349
01:13:52,439 --> 01:13:56,488
texture next so now all I need to do is

1350
01:13:54,329 --> 01:13:59,369
actually go in there and put that

1351
01:13:56,488 --> 01:14:02,879
texture index into the definition of our

1352
01:13:59,369 --> 01:14:08,010
renderers vertex format so in here where

1353
01:14:02,880 --> 01:14:10,170
we do where we've got the texture vertex

1354
01:14:08,010 --> 01:14:14,159
where is that thing textured vertex

1355
01:14:10,170 --> 01:14:15,980
textured vertex textured vertex I know

1356
01:14:14,158 --> 01:14:18,329
you're in here somewhere there you are

1357
01:14:15,979 --> 01:14:21,119
so what I want to do here is have a

1358
01:14:18,329 --> 01:14:23,158
thing where we're like texture index

1359
01:14:21,119 --> 01:14:24,479
again same as this lighting and

1360
01:14:23,158 --> 01:14:26,129
texturing are the same they wouldn't

1361
01:14:24,479 --> 01:14:27,750
have to be per vertex if you wanted to

1362
01:14:26,130 --> 01:14:29,969
make the renderer more advanced and have

1363
01:14:27,750 --> 01:14:31,889
a per primitive buffer that gets read

1364
01:14:29,969 --> 01:14:37,980
out of that's just replicated multiple

1365
01:14:31,889 --> 01:14:41,060
times right so that's that's that right

1366
01:14:37,979 --> 01:14:44,329
and in theory if we call this now

1367
01:14:41,060 --> 01:14:44,330
nothing should happen

1368
01:14:44,460 --> 01:14:49,850
I don't think well take it back

1369
01:14:50,750 --> 01:14:57,079
where's our errors here parameters

1370
01:14:58,069 --> 01:15:10,649
vertex errors and right errors undefined

1371
01:15:07,680 --> 01:15:13,909
variable frag texture index you are

1372
01:15:10,649 --> 01:15:13,909
correct that was the wrong

1373
01:15:15,109 --> 01:15:18,109
capitalization

1374
01:15:29,779 --> 01:15:36,438
can't see I love it

1375
01:15:32,359 --> 01:15:50,779
not not great you know for honest about

1376
01:15:36,439 --> 01:15:55,010
it not fat not fabulous not sure how we

1377
01:15:50,779 --> 01:15:57,550
would have made that particular mistake

1378
01:15:55,010 --> 01:15:57,550
here

1379
01:16:18,729 --> 01:16:29,170
oh um not true I actually do know how we

1380
01:16:24,010 --> 01:16:35,260
may have made that mistake hold on one

1381
01:16:29,170 --> 01:16:40,229
second so in addition to those buffers

1382
01:16:35,260 --> 01:16:43,659
we also have these and these buffers are

1383
01:16:40,229 --> 01:16:48,360
so if you look at how this texture these

1384
01:16:43,658 --> 01:16:55,598
textured vertices are are specified here

1385
01:16:48,359 --> 01:17:01,238
so this is the p-value this is the light

1386
01:16:55,599 --> 01:17:03,550
UV this is the UV this is the color then

1387
01:17:01,238 --> 01:17:09,339
we have the normal light servers well so

1388
01:17:03,550 --> 01:17:12,719
that should be still fine right I think

1389
01:17:09,340 --> 01:17:12,719
that should still all be fine

1390
01:17:15,538 --> 01:17:25,179
are we getting any we're not getting any

1391
01:17:18,219 --> 01:17:26,708
errors though I'm not sure what's wrong

1392
01:17:25,179 --> 01:17:28,269
with that let's take a look why are we

1393
01:17:26,708 --> 01:17:42,069
getting that why are we getting a

1394
01:17:28,269 --> 01:17:43,958
problem all we did is add all we did is

1395
01:17:42,069 --> 01:17:45,880
advert light index right that's the I

1396
01:17:43,958 --> 01:17:48,208
mean I've vert texture index that's all

1397
01:17:45,880 --> 01:17:48,208
we did

1398
01:17:55,010 --> 01:18:16,920
in his route light count is that even

1399
01:18:00,630 --> 01:18:20,609
used anymore yeah that's not so fruit

1400
01:18:16,920 --> 01:18:33,179
light index and her texture index are

1401
01:18:20,609 --> 01:18:35,189
both just ah okay that was a mess up but

1402
01:18:33,179 --> 01:18:38,149
those look pretty evenly paired so I

1403
01:18:35,189 --> 01:18:42,299
don't know what the problem was there

1404
01:18:38,149 --> 01:18:45,629
exactly okay so it was just that one

1405
01:18:42,300 --> 01:18:48,029
typo so now we're specifying your vertex

1406
01:18:45,630 --> 01:18:51,420
index in the vertex shader but we're not

1407
01:18:48,029 --> 01:18:53,279
actually using it anywhere if we pop

1408
01:18:51,420 --> 01:18:56,519
over to the render and take a look at

1409
01:18:53,279 --> 01:19:00,719
where we would actually use this so what

1410
01:18:56,519 --> 01:19:04,139
would happen is inside our actual push

1411
01:19:00,719 --> 01:19:12,408
quad all of these would now have a

1412
01:19:04,139 --> 01:19:16,109
texture index set to texture index and

1413
01:19:12,408 --> 01:19:18,779
again we don't much like light index and

1414
01:19:16,109 --> 01:19:21,238
normal we don't really need as many as

1415
01:19:18,779 --> 01:19:23,130
are actually in here so it's kind of

1416
01:19:21,238 --> 01:19:27,118
messed up but you know again these are

1417
01:19:23,130 --> 01:19:29,909
things that we may or may not decide to

1418
01:19:27,118 --> 01:19:32,939
optimize later because it does cost time

1419
01:19:29,908 --> 01:19:37,618
to do them so if we look at light index

1420
01:19:32,939 --> 01:19:40,399
here and texture index is going to be

1421
01:19:37,618 --> 01:19:44,130
similar where we just need to figure out

1422
01:19:40,399 --> 01:19:45,899
what texture index it should be and so

1423
01:19:44,130 --> 01:19:48,090
what we can do is say well that should

1424
01:19:45,899 --> 01:19:49,710
just be in the render or texture that's

1425
01:19:48,090 --> 01:19:55,440
just going to be the value that it is

1426
01:19:49,710 --> 01:19:58,158
right so if I go look at the what we

1427
01:19:55,439 --> 01:20:01,169
have specified the render texture to be

1428
01:19:58,158 --> 01:20:03,238
we just want that value to be directly

1429
01:20:01,170 --> 01:20:05,039
usable in the shader from now on so you

1430
01:20:03,238 --> 01:20:07,409
see here we've got this handle

1431
01:20:05,039 --> 01:20:18,149
what I want to do is just take that

1432
01:20:07,409 --> 01:20:19,949
handle and smush it down so we're just

1433
01:20:18,149 --> 01:20:22,559
going to compact the handle and say

1434
01:20:19,949 --> 01:20:25,380
that's the value and so then what we

1435
01:20:22,560 --> 01:20:29,610
will do going forwards is we'll just say

1436
01:20:25,380 --> 01:20:32,190
oh we'll just you know make render or

1437
01:20:29,609 --> 01:20:34,649
textures be things that get that it's

1438
01:20:32,189 --> 01:20:40,519
kind of smooshed handling them and then

1439
01:20:34,649 --> 01:20:43,589
we're done okay uh so what can we do now

1440
01:20:40,520 --> 01:20:45,750
to sort of push ourselves towards that

1441
01:20:43,590 --> 01:20:48,360
well the first thing we have to do is we

1442
01:20:45,750 --> 01:20:52,470
actually have to start using texture

1443
01:20:48,359 --> 01:20:54,000
arrays right and in order to do that we

1444
01:20:52,470 --> 01:21:02,449
have to have a way of specifying

1445
01:20:54,000 --> 01:21:04,500
textures as part of kind of one sort of

1446
01:21:02,449 --> 01:21:06,029
creating a single texture handle that

1447
01:21:04,500 --> 01:21:09,899
refers to like a deep texture that's

1448
01:21:06,029 --> 01:21:12,019
multiple slices right so if we take a

1449
01:21:09,899 --> 01:21:15,539
look at this here what you can see is

1450
01:21:12,020 --> 01:21:18,450
there's sort of this notion that we're

1451
01:21:15,539 --> 01:21:20,399
gonna call a slightly different function

1452
01:21:18,449 --> 01:21:22,500
and you can see here that there's like

1453
01:21:20,399 --> 01:21:24,269
this notion of a layer count so what

1454
01:21:22,500 --> 01:21:28,020
would happen is we're still talking

1455
01:21:24,270 --> 01:21:29,820
about 2d textures potentially and they

1456
01:21:28,020 --> 01:21:34,350
still have all the same parameters that

1457
01:21:29,819 --> 01:21:37,019
we did have before but what we want to

1458
01:21:34,350 --> 01:21:39,660
do here is talk about this additional

1459
01:21:37,020 --> 01:21:42,410
parameter that we're gonna say allows us

1460
01:21:39,659 --> 01:21:45,449
to specify multiple multiple slices and

1461
01:21:42,409 --> 01:21:48,239
so when we call text sub image we will

1462
01:21:45,449 --> 01:21:51,319
also to like update images out of this

1463
01:21:48,239 --> 01:21:54,649
texture we would also pass in an

1464
01:21:51,319 --> 01:21:57,889
information about which layer we were

1465
01:21:54,649 --> 01:22:02,489
targeting and other things like this

1466
01:21:57,890 --> 01:22:06,510
right so let's take a look at those

1467
01:22:02,489 --> 01:22:08,719
things in more detail where's our docks

1468
01:22:06,510 --> 01:22:08,720
top

1469
01:22:19,449 --> 01:22:26,289
so when we specify this piece of

1470
01:22:23,319 --> 01:22:28,869
information here right I you can see

1471
01:22:26,289 --> 01:22:31,390
that this call is just gonna specify

1472
01:22:28,869 --> 01:22:34,029
like an entire cube because it's got the

1473
01:22:31,390 --> 01:22:36,220
width the height and the depth right and

1474
01:22:34,029 --> 01:22:40,649
there's nothing we can really do to

1475
01:22:36,220 --> 01:22:43,840
adjust it so in order to actually

1476
01:22:40,649 --> 01:22:47,909
specify textures differently for every

1477
01:22:43,840 --> 01:22:51,360
slice in separate times we need a way to

1478
01:22:47,909 --> 01:22:55,210
control the array the layer information

1479
01:22:51,359 --> 01:22:57,519
that we want to pass there right so what

1480
01:22:55,210 --> 01:23:00,510
you can see here is this would let us do

1481
01:22:57,520 --> 01:23:05,230
that right we could pass the Z offset

1482
01:23:00,510 --> 01:23:07,329
and the the depth could still just be

1483
01:23:05,229 --> 01:23:09,969
one so I'm could do one slice of it and

1484
01:23:07,329 --> 01:23:12,220
what you can see is the target lets us

1485
01:23:09,970 --> 01:23:15,100
differentiate between whether this is

1486
01:23:12,220 --> 01:23:18,430
supposed to be a 3d texture that's an

1487
01:23:15,100 --> 01:23:20,260
actual like voxel or whether this is

1488
01:23:18,430 --> 01:23:25,090
actually just a 2d texture with a bunch

1489
01:23:20,260 --> 01:23:27,640
of slices you know I'm saying so that's

1490
01:23:25,090 --> 01:23:30,340
really what we are looking to do is use

1491
01:23:27,640 --> 01:23:32,410
this function to define different slices

1492
01:23:30,340 --> 01:23:36,159
of our texture each to be a completely

1493
01:23:32,409 --> 01:23:37,689
different image all right so now GL

1494
01:23:36,159 --> 01:23:39,849
texts some image I don't even know if

1495
01:23:37,689 --> 01:23:42,909
we've got that that may be one that we

1496
01:23:39,850 --> 01:23:44,890
have two calls well but what would

1497
01:23:42,909 --> 01:23:54,599
happen is when one of these textures

1498
01:23:44,890 --> 01:23:57,550
gets submitted OpenGL allocate texture

1499
01:23:54,600 --> 01:24:00,340
so in here what we would be doing

1500
01:23:57,550 --> 01:24:07,480
instead of this call we would actually

1501
01:24:00,340 --> 01:24:09,730
be doing this call to pass that out

1502
01:24:07,479 --> 01:24:14,409
right now I don't like I said don't

1503
01:24:09,729 --> 01:24:16,359
remember if we have that we do so if we

1504
01:24:14,409 --> 01:24:17,800
want to do this call you can see here's

1505
01:24:16,359 --> 01:24:22,019
all of our things that we need to pass

1506
01:24:17,800 --> 01:24:26,500
me to pass the target it would be a GL

1507
01:24:22,020 --> 01:24:29,440
texture 2d array we have to pass the

1508
01:24:26,500 --> 01:24:32,500
level again we're only gonna specify

1509
01:24:29,439 --> 01:24:35,799
zero at the moment we want to do MIT

1510
01:24:32,500 --> 01:24:38,738
maps eventually but not right now

1511
01:24:35,800 --> 01:24:41,739
X&amp;Y offsets are always going to be the

1512
01:24:38,738 --> 01:24:45,939
upper corner but the depth I'm sorry the

1513
01:24:41,738 --> 01:24:48,459
Z offset is gonna be a certain layer

1514
01:24:45,939 --> 01:24:50,529
like which slice so this is the like

1515
01:24:48,460 --> 01:24:53,409
this is the texture index that we're

1516
01:24:50,529 --> 01:24:55,809
talking about the width height and depth

1517
01:24:53,409 --> 01:24:59,409
are always gonna be whatever the width

1518
01:24:55,810 --> 01:25:01,570
hype height are and one now we're gonna

1519
01:24:59,409 --> 01:25:03,069
have to again constrain the width and

1520
01:25:01,569 --> 01:25:04,569
height to be something more sensible

1521
01:25:03,069 --> 01:25:08,799
potentially although there's other

1522
01:25:04,569 --> 01:25:10,238
things we can do there as well and then

1523
01:25:08,800 --> 01:25:12,190
finally we need the rest of this stuff

1524
01:25:10,238 --> 01:25:15,069
and that's gonna be the same as it was

1525
01:25:12,189 --> 01:25:19,629
before right so we need this information

1526
01:25:15,069 --> 01:25:22,059
here read RG RG be EBA whatever right we

1527
01:25:19,630 --> 01:25:24,819
know the one that we're specifying is BG

1528
01:25:22,060 --> 01:25:29,710
RA that's always the way that we want to

1529
01:25:24,819 --> 01:25:32,109
pass down our information and we also

1530
01:25:29,710 --> 01:25:34,779
know that we've got the type field is

1531
01:25:32,109 --> 01:25:39,009
the same always we don't have any other

1532
01:25:34,779 --> 01:25:44,380
kinds of data and then that's that

1533
01:25:39,010 --> 01:25:46,510
standard so that's actually all we'll

1534
01:25:44,380 --> 01:25:50,829
really need to do at the end of the day

1535
01:25:46,510 --> 01:25:53,800
to get started right but the harder part

1536
01:25:50,829 --> 01:25:57,729
now is going to be how we deal with when

1537
01:25:53,800 --> 01:26:02,739
we call this allocate texture we've kind

1538
01:25:57,729 --> 01:26:05,109
of got a deal with another not sure how

1539
01:26:02,738 --> 01:26:07,839
I put this we have to deal with the idea

1540
01:26:05,109 --> 01:26:09,759
that we actually now allocate the

1541
01:26:07,840 --> 01:26:12,310
texture only once and then we're just

1542
01:26:09,760 --> 01:26:14,170
putting things into these slices so this

1543
01:26:12,310 --> 01:26:16,270
isn't that hard of a change to make

1544
01:26:14,170 --> 01:26:19,869
actions actually so I'm just gonna go

1545
01:26:16,270 --> 01:26:21,520
ahead and kind of make it but what I

1546
01:26:19,869 --> 01:26:23,890
want to do is I want to kind of do it

1547
01:26:21,520 --> 01:26:28,510
again like we were in to sort of baby

1548
01:26:23,890 --> 01:26:30,039
steps so the first step is I want to

1549
01:26:28,510 --> 01:26:34,239
change the way that we're specifying

1550
01:26:30,039 --> 01:26:35,198
textures to be feed-forward right and

1551
01:26:34,238 --> 01:26:37,029
this is the thing that I was talking

1552
01:26:35,198 --> 01:26:40,089
about before and basically what this

1553
01:26:37,029 --> 01:26:43,029
means is we're just gonna assume that

1554
01:26:40,090 --> 01:26:46,210
there's a certain number of textures

1555
01:26:43,029 --> 01:26:49,300
the renderer handles and that's the end

1556
01:26:46,210 --> 01:26:50,079
of the story so when we come through

1557
01:26:49,300 --> 01:26:53,980
here

1558
01:26:50,079 --> 01:26:57,640
and you know you do an initialization on

1559
01:26:53,979 --> 01:27:01,299
the renderer kind of like we have at the

1560
01:26:57,640 --> 01:27:06,150
moment where you need to say here's how

1561
01:27:01,300 --> 01:27:06,150
the renderer gets an issue initialized

1562
01:27:06,810 --> 01:27:22,300
let me see where do we define that

1563
01:27:10,350 --> 01:27:30,670
function here it's in win32 right so

1564
01:27:22,300 --> 01:27:33,730
this load render entry yeah so this is

1565
01:27:30,670 --> 01:27:36,670
what we're talking about so when you go

1566
01:27:33,729 --> 01:27:39,069
to load you pass the max quad count per

1567
01:27:36,670 --> 01:27:45,789
frame what we want to do is say there's

1568
01:27:39,069 --> 01:27:51,579
also a max texture count right and the

1569
01:27:45,789 --> 01:27:54,399
max texture count is just gonna say

1570
01:27:51,579 --> 01:27:57,340
here's how many textures you're ever

1571
01:27:54,399 --> 01:27:59,019
gonna talk to me about you know I'm

1572
01:27:57,340 --> 01:28:02,650
saying like you're never gonna tell me

1573
01:27:59,020 --> 01:28:04,990
about some other texture that's like you

1574
01:28:02,649 --> 01:28:06,729
know not within this set of textures

1575
01:28:04,989 --> 01:28:09,429
you're always gonna say if you told me

1576
01:28:06,729 --> 01:28:11,679
32 you're always gonna talk to me about

1577
01:28:09,430 --> 01:28:17,680
32 textures that's just what you're

1578
01:28:11,680 --> 01:28:20,560
gonna do right and so that's an

1579
01:28:17,680 --> 01:28:23,400
additional piece of initialize

1580
01:28:20,560 --> 01:28:29,970
information initialization information

1581
01:28:23,399 --> 01:28:29,969
that comes through in the initializer

1582
01:28:30,479 --> 01:28:38,619
then when we actually have when to do an

1583
01:28:32,920 --> 01:28:41,369
it up in jail what we want to do here is

1584
01:28:38,619 --> 01:28:44,050
when we do our initializations

1585
01:28:41,369 --> 01:28:46,319
we want that piece of information to be

1586
01:28:44,050 --> 01:28:46,320
recorded

1587
01:28:50,788 --> 01:28:55,408
and I actually probably want this stuff

1588
01:28:53,219 --> 01:28:58,828
to be recorded earlier than when these

1589
01:28:55,408 --> 01:29:06,298
are actually I probably want those to be

1590
01:28:58,828 --> 01:29:07,858
set like right off the bat right so

1591
01:29:06,298 --> 01:29:10,649
everybody else who might want to know

1592
01:29:07,859 --> 01:29:13,048
about what these maximum values are they

1593
01:29:10,649 --> 01:29:14,669
can always count on them being set and

1594
01:29:13,048 --> 01:29:17,548
that way when we call open jailing it in

1595
01:29:14,668 --> 01:29:21,288
here that will actually create those

1596
01:29:17,548 --> 01:29:27,298
textures on the initialization call and

1597
01:29:21,288 --> 01:29:31,198
we're good to go from there hmm excuse

1598
01:29:27,298 --> 01:29:33,838
me all right so temporarily like I said

1599
01:29:31,198 --> 01:29:35,548
though I'm not quite gonna do that I'm

1600
01:29:33,838 --> 01:29:38,998
gonna go ahead and do something slightly

1601
01:29:35,548 --> 01:29:40,109
different well actually you know I don't

1602
01:29:38,998 --> 01:29:42,568
even think I do need to do something

1603
01:29:40,109 --> 01:29:45,239
slightly different I'm just gonna just

1604
01:29:42,569 --> 01:29:48,989
lean on the fact that open jail already

1605
01:29:45,238 --> 01:29:53,418
supports this and say okay if we do an

1606
01:29:48,988 --> 01:29:53,418
open jail allocate texture call here

1607
01:29:54,378 --> 01:29:59,608
what I want to do is I want to have

1608
01:29:56,788 --> 01:30:05,278
those calls take a texture index I want

1609
01:29:59,609 --> 01:30:10,649
to assert that the texture index is less

1610
01:30:05,279 --> 01:30:12,959
than the max texture count I'm just

1611
01:30:10,649 --> 01:30:15,179
going to use it so what I'm gonna do

1612
01:30:12,958 --> 01:30:19,139
instead of this stuff here is I'm not

1613
01:30:15,179 --> 01:30:22,679
gonna say GL Gen textures I'm just gonna

1614
01:30:19,139 --> 01:30:28,559
use the texture index directly by saying

1615
01:30:22,679 --> 01:30:31,439
this I'm not going to call that and just

1616
01:30:28,559 --> 01:30:33,389
so we we're gonna leave zero as a non

1617
01:30:31,439 --> 01:30:35,489
texture for now just like I usually do

1618
01:30:33,389 --> 01:30:37,828
so all this stuff is going to get called

1619
01:30:35,488 --> 01:30:40,858
as normal and then in here where we

1620
01:30:37,828 --> 01:30:43,548
specify this handle I'm just essentially

1621
01:30:40,859 --> 01:30:46,649
writing that texture index back through

1622
01:30:43,548 --> 01:30:48,059
all right so this means this will never

1623
01:30:46,649 --> 01:30:50,909
this is not actually going to do this

1624
01:30:48,059 --> 01:30:52,679
anymore we're not gonna have that and in

1625
01:30:50,908 --> 01:30:55,759
fact what we're gonna have is a thing

1626
01:30:52,679 --> 01:30:57,510
where we just pass in which one of these

1627
01:30:55,760 --> 01:31:00,480
textures we were actually

1628
01:30:57,510 --> 01:31:06,210
talking about and we could call this a

1629
01:31:00,479 --> 01:31:10,348
renderer texture texture here and and

1630
01:31:06,210 --> 01:31:14,840
maybe I'll just do this something like

1631
01:31:10,349 --> 01:31:18,840
that okay but it doesn't return a value

1632
01:31:14,840 --> 01:31:20,909
so then when we do manage textures what

1633
01:31:18,840 --> 01:31:23,069
we want to do is say in here where we

1634
01:31:20,908 --> 01:31:25,259
were assigning the result texture we

1635
01:31:23,069 --> 01:31:29,750
actually wanted the opposite of that we

1636
01:31:25,260 --> 01:31:29,750
want to pass the result texture like so

1637
01:31:30,019 --> 01:31:36,599
and then when we go to do deletion we

1638
01:31:34,500 --> 01:31:39,000
don't actually really need to do

1639
01:31:36,599 --> 01:31:44,130
deletion anymore so I'm going to remove

1640
01:31:39,000 --> 01:31:47,300
this path in its entirety right this

1641
01:31:44,130 --> 01:31:47,300
just isn't going to be a thing

1642
01:31:53,340 --> 01:32:08,829
all right sue now we need Supes I just

1643
01:32:06,970 --> 01:32:10,750
need to put some of those things in here

1644
01:32:08,829 --> 01:32:17,500
that I said that I had so you know in

1645
01:32:10,750 --> 01:32:25,869
here there's a max texture cap hoops hmm

1646
01:32:17,500 --> 01:32:29,619
I think that's all fine and that's just

1647
01:32:25,869 --> 01:32:35,380
a bigger that was a 64-bit value this

1648
01:32:29,619 --> 01:32:38,199
does not return a value OpenGL allocate

1649
01:32:35,380 --> 01:32:42,369
texture in this case again doesn't

1650
01:32:38,199 --> 01:32:45,069
really have to do it this way anymore

1651
01:32:42,369 --> 01:32:52,739
so what we actually want to do is say

1652
01:32:45,069 --> 01:32:56,729
that the open gel open gel white bitmap

1653
01:32:52,739 --> 01:33:02,649
it's passed in here so we need open gel

1654
01:32:56,729 --> 01:33:06,039
white bitmap in this case to be equal to

1655
01:33:02,649 --> 01:33:09,059
some handle value in this case let's

1656
01:33:06,039 --> 01:33:09,060
just say it equals one

1657
01:33:15,639 --> 01:33:22,029
oh and that's a pointer in the texture

1658
01:33:19,539 --> 01:33:22,689
management code which we don't need it

1659
01:33:22,029 --> 01:33:25,118
to be anymore

1660
01:33:22,689 --> 01:33:29,399
so as far as handmade renderer is

1661
01:33:25,118 --> 01:33:38,609
concerned when we have that texture up

1662
01:33:29,399 --> 01:33:40,960
the texture up here can just be that and

1663
01:33:38,609 --> 01:33:49,448
really we could call this texture op

1664
01:33:40,960 --> 01:33:51,189
allocate texture update and similarly we

1665
01:33:49,448 --> 01:33:53,289
can just say you don't DL okay textures

1666
01:33:51,189 --> 01:33:55,299
anymore you just update textures that

1667
01:33:53,289 --> 01:33:58,359
you want to talk about and it doesn't

1668
01:33:55,300 --> 01:34:01,960
have a trim command potentially right so

1669
01:33:58,359 --> 01:34:13,899
maybe it just says hey here's a texture

1670
01:34:01,960 --> 01:34:15,639
op update and it's not really an

1671
01:34:13,899 --> 01:34:16,359
allocation anymore this doesn't really

1672
01:34:15,639 --> 01:34:18,850
need to be here

1673
01:34:16,359 --> 01:34:20,649
fact it just looks like that and we can

1674
01:34:18,850 --> 01:34:22,510
choose whether we eventually want other

1675
01:34:20,649 --> 01:34:24,279
texture ops but it may be that then this

1676
01:34:22,510 --> 01:34:26,860
just becomes welded together we don't

1677
01:34:24,279 --> 01:34:29,109
want to do anything else all right

1678
01:34:26,859 --> 01:34:31,618
so for the time being that's just going

1679
01:34:29,109 --> 01:34:31,618
to work like that

1680
01:34:47,970 --> 01:34:52,710
we need to pass them a texture so we

1681
01:34:49,890 --> 01:35:14,430
want here we don't really need very many

1682
01:34:52,710 --> 01:35:16,409
but I'll just say 206 textures so now we

1683
01:35:14,430 --> 01:35:18,480
can see this is kind of nice or too

1684
01:35:16,409 --> 01:35:20,159
because like I said in here now we just

1685
01:35:18,479 --> 01:35:23,459
say which one of these we actually

1686
01:35:20,159 --> 01:35:25,500
wanted so we can say hey the texture

1687
01:35:23,460 --> 01:35:29,279
handle that we're gonna talk about here

1688
01:35:25,500 --> 01:35:32,850
is this one and it doesn't have to be an

1689
01:35:29,279 --> 01:35:36,329
address anymore so that means that the

1690
01:35:32,850 --> 01:35:38,720
load bitmap function gets simpler which

1691
01:35:36,329 --> 01:35:38,720
is good

1692
01:35:45,859 --> 01:35:50,269
so just continuing down with this code

1693
01:35:47,930 --> 01:35:54,230
change so now in here what we need to do

1694
01:35:50,270 --> 01:35:56,810
is this and what we want to do here is

1695
01:35:54,229 --> 01:35:59,119
just assign these values to things when

1696
01:35:56,810 --> 01:36:00,800
we initialize them right so what I want

1697
01:35:59,119 --> 01:36:16,069
to do here is actually just pick these

1698
01:36:00,800 --> 01:36:19,070
out and what I want to do is just set

1699
01:36:16,069 --> 01:36:21,259
these to be equal to numbers that I

1700
01:36:19,069 --> 01:36:29,799
understand so I want to say like render

1701
01:36:21,260 --> 01:36:29,800
or texture or you know texture handle

1702
01:36:31,569 --> 01:36:39,559
like this and right now I'm going to

1703
01:36:37,819 --> 01:36:41,179
kind of cheat and say that I know which

1704
01:36:39,560 --> 01:36:42,980
one I know that there's one reserved for

1705
01:36:41,180 --> 01:36:45,170
white but what I really want to do is

1706
01:36:42,979 --> 01:36:47,509
move away from the renderer creating its

1707
01:36:45,170 --> 01:36:49,430
own white bitmap and I'd rather us just

1708
01:36:47,510 --> 01:36:52,699
create the white bitmap you know I'm

1709
01:36:49,430 --> 01:36:55,930
saying so anywhere that we were and I

1710
01:36:52,699 --> 01:36:59,149
don't know that actually to be honest

1711
01:36:55,930 --> 01:37:00,380
okay so we don't nevermind so I don't

1712
01:36:59,149 --> 01:37:08,029
care about that because we don't use the

1713
01:37:00,380 --> 01:37:10,010
white bitmap anyway okay so let me look

1714
01:37:08,029 --> 01:37:12,229
inside the open jail I want to look and

1715
01:37:10,010 --> 01:37:18,079
see if we if this uses the white bitmap

1716
01:37:12,229 --> 01:37:20,809
anywhere it doesn't even better so again

1717
01:37:18,079 --> 01:37:23,300
we can probably just get rid of that

1718
01:37:20,810 --> 01:37:25,039
entirely and then just inside your own

1719
01:37:23,300 --> 01:37:26,510
code when you're using this renderer you

1720
01:37:25,039 --> 01:37:29,420
will create the white bitmap if you

1721
01:37:26,510 --> 01:37:32,840
wanted it it's not something that the

1722
01:37:29,420 --> 01:37:34,760
renderer cares or knows about at all so

1723
01:37:32,840 --> 01:37:36,680
this is what this would look like I want

1724
01:37:34,760 --> 01:37:39,199
to make a little function inside the

1725
01:37:36,680 --> 01:37:41,680
renderer code proper that's like looks

1726
01:37:39,199 --> 01:37:41,679
like this

1727
01:37:56,279 --> 01:38:00,550
something like that

1728
01:37:58,300 --> 01:38:02,110
and that way those are wrapped just for

1729
01:38:00,550 --> 01:38:03,760
the time being while we're playing

1730
01:38:02,109 --> 01:38:05,289
around with it here I'd like to make

1731
01:38:03,760 --> 01:38:10,869
sure that we kind of know what's going

1732
01:38:05,289 --> 01:38:12,640
on in that in that regard right okay so

1733
01:38:10,869 --> 01:38:14,529
what I want to do now is inside handmade

1734
01:38:12,640 --> 01:38:18,720
hero when we use these these should just

1735
01:38:14,529 --> 01:38:21,579
be things that are assigned based on

1736
01:38:18,720 --> 01:38:23,500
what's available in the bitmap system

1737
01:38:21,579 --> 01:38:27,899
what's available in the asset system

1738
01:38:23,500 --> 01:38:31,060
right so what I actually want to do here

1739
01:38:27,899 --> 01:38:34,059
is when we do a finalized asset bitmap

1740
01:38:31,060 --> 01:38:36,970
I'm just gonna I we're gonna want to do

1741
01:38:34,060 --> 01:38:39,910
this in a better way just in general um

1742
01:38:36,970 --> 01:38:41,260
but this bitmap texture handle is really

1743
01:38:39,909 --> 01:38:45,399
just going to be something that's set

1744
01:38:41,260 --> 01:38:50,190
right at the outset so when we actually

1745
01:38:45,399 --> 01:38:55,659
do that bitmap texture handle thing

1746
01:38:50,189 --> 01:38:58,750
Jimmy we're gonna set that when we

1747
01:38:55,659 --> 01:39:00,510
actually create the bitmap so let me

1748
01:38:58,750 --> 01:39:03,010
just go ahead and search for that here

1749
01:39:00,510 --> 01:39:06,880
and hand an asset so there's one use of

1750
01:39:03,010 --> 01:39:09,310
it here here's the D allocation call and

1751
01:39:06,880 --> 01:39:11,409
again that D allocation call is now

1752
01:39:09,310 --> 01:39:17,110
gonna be a different thing it doesn't

1753
01:39:11,409 --> 01:39:18,819
actually have to deallocate it it just

1754
01:39:17,109 --> 01:39:22,569
has to put it on its own free list

1755
01:39:18,819 --> 01:39:26,769
effectively so it knows it can use that

1756
01:39:22,569 --> 01:39:31,179
texture handle again so we don't really

1757
01:39:26,770 --> 01:39:34,300
need this to be here if I guess the way

1758
01:39:31,180 --> 01:39:36,070
I put it so we just need to remember

1759
01:39:34,300 --> 01:39:37,510
which texture handles we haven't haven't

1760
01:39:36,069 --> 01:39:39,159
used but we're gonna be able to collapse

1761
01:39:37,510 --> 01:39:42,300
all this code down so I'm not even

1762
01:39:39,159 --> 01:39:42,300
really gonna worry about that right now

1763
01:39:56,920 --> 01:40:00,940
so we don't need to do that just yet

1764
01:40:04,569 --> 01:40:13,399
this is not necessary and let's see in a

1765
01:40:11,779 --> 01:40:17,599
default renderer just needs to have one

1766
01:40:13,399 --> 01:40:24,469
of these I'm not sure what our next

1767
01:40:17,600 --> 01:40:28,630
texture cap should be I don't know if we

1768
01:40:24,470 --> 01:40:32,750
assume that we're gonna have 512 by 512

1769
01:40:28,630 --> 01:40:35,180
textures that means each texture is one

1770
01:40:32,750 --> 01:40:36,979
megabyte so I would think we'd want to

1771
01:40:35,180 --> 01:40:38,600
use like a half the megabyte and a half

1772
01:40:36,979 --> 01:40:42,739
gigabyte of texture memory or something

1773
01:40:38,600 --> 01:40:44,780
it's all we would really be using for

1774
01:40:42,739 --> 01:40:54,949
textures would all be in this one place

1775
01:40:44,779 --> 01:40:59,920
I think that's probably about right so

1776
01:40:54,949 --> 01:40:59,920
I'm not sure let's set it to 256 first

1777
01:41:09,229 --> 01:41:13,079
but we need to feed that forward to the

1778
01:41:11,550 --> 01:41:25,409
asset system eventually as well because

1779
01:41:13,079 --> 01:41:28,198
those have to line up okay so now inside

1780
01:41:25,409 --> 01:41:31,469
handmade assets when we're looking at

1781
01:41:28,198 --> 01:41:33,779
creating those asset bitmaps whenever we

1782
01:41:31,469 --> 01:41:38,219
go to load one of those we need to

1783
01:41:33,779 --> 01:41:40,109
actually get one of these texture

1784
01:41:38,219 --> 01:41:43,619
handles here so when we would when we

1785
01:41:40,109 --> 01:41:45,329
would kick off a load asset when we

1786
01:41:43,619 --> 01:41:51,689
would create one of these

1787
01:41:45,329 --> 01:41:53,309
so the finalized call if you will so

1788
01:41:51,689 --> 01:41:56,039
when we when we would kick one of these

1789
01:41:53,310 --> 01:41:58,289
off what we want to do is at this time

1790
01:41:56,039 --> 01:42:02,130
also assign it a text a place to go

1791
01:41:58,289 --> 01:42:04,560
right so when we set up that texture op

1792
01:42:02,130 --> 01:42:07,890
Q stuff in here where we have this

1793
01:42:04,560 --> 01:42:19,199
bitmap the bitmap texture handle wants

1794
01:42:07,890 --> 01:42:21,390
to be set here right and what we need to

1795
01:42:19,198 --> 01:42:23,159
do is we don't want to always set it to

1796
01:42:21,390 --> 01:42:25,920
zero we want it to set it to something

1797
01:42:23,159 --> 01:42:28,079
that isn't hasn't been used yet and so

1798
01:42:25,920 --> 01:42:31,289
what we don't know when we do when we

1799
01:42:28,079 --> 01:42:34,319
start to go into this task situation

1800
01:42:31,289 --> 01:42:37,529
here we don't really know what textures

1801
01:42:34,319 --> 01:42:40,889
are or aren't available so we want to be

1802
01:42:37,529 --> 01:42:42,689
able to to figure that out dynamically

1803
01:42:40,890 --> 01:42:45,770
somehow so again I'm just going to put

1804
01:42:42,689 --> 01:42:45,769
it to doing here for that

1805
01:42:52,010 --> 01:43:14,070
or so we're going to want to do this

1806
01:43:11,100 --> 01:43:16,320
sort of update the asset system as a

1807
01:43:14,069 --> 01:43:18,539
separate pass when we go through and do

1808
01:43:16,319 --> 01:43:21,000
the texture race stuff because it wants

1809
01:43:18,539 --> 01:43:22,890
to be aware of that right but so this

1810
01:43:21,000 --> 01:43:26,189
texture handle here where I specify what

1811
01:43:22,890 --> 01:43:29,670
it is what I can do is just inside the

1812
01:43:26,189 --> 01:43:31,529
asset system temporarily I can just have

1813
01:43:29,670 --> 01:43:34,170
a monotonically increasing value and

1814
01:43:31,529 --> 01:43:38,269
just set that to whatever we set that to

1815
01:43:34,170 --> 01:43:38,270
right so I can say like

1816
01:43:48,939 --> 01:43:57,519
this texture or use texture handle or

1817
01:43:55,170 --> 01:44:01,390
next three texture handle something like

1818
01:43:57,520 --> 01:44:04,630
that we can just say whatever the asset

1819
01:44:01,390 --> 01:44:07,020
system is here we're just going to use

1820
01:44:04,630 --> 01:44:10,090
one of those and off we go

1821
01:44:07,020 --> 01:44:12,489
and the renderer by the way will assert

1822
01:44:10,090 --> 01:44:14,610
if that's not appropriate

1823
01:44:12,488 --> 01:44:14,609
right

1824
01:44:22,420 --> 01:44:29,000
we don't ever want this one to be zero

1825
01:44:25,189 --> 01:44:32,109
so we also should probably set this to

1826
01:44:29,000 --> 01:44:35,659
what we want when we actually start so

1827
01:44:32,109 --> 01:44:38,689
when we are initializing the asset

1828
01:44:35,659 --> 01:44:41,389
system and you know everything sort of

1829
01:44:38,689 --> 01:44:49,479
gets started up here I also probably

1830
01:44:41,390 --> 01:44:52,220
want to do start with texture handle one

1831
01:44:49,479 --> 01:44:55,689
right and if we want white bitmap I

1832
01:44:52,220 --> 01:44:55,690
could even start with texture handle two

1833
01:45:00,729 --> 01:45:05,419
and that's I think all we really need to

1834
01:45:03,319 --> 01:45:08,000
do there so let's just see where we're

1835
01:45:05,420 --> 01:45:18,199
at in terms of actually reconstructing

1836
01:45:08,000 --> 01:45:21,590
what we're trying to do here I didn't

1837
01:45:18,199 --> 01:45:24,399
think we had to do that we don't have to

1838
01:45:21,590 --> 01:45:26,810
use an unnamed generated by OpenGL do we

1839
01:45:24,399 --> 01:45:30,250
aren't we allowed to use the name not

1840
01:45:26,810 --> 01:45:30,250
generated by up in jail

1841
01:45:35,199 --> 01:45:41,889
I could have sworn that vut you don't

1842
01:45:39,159 --> 01:45:48,630
have to call Jen textures that you can

1843
01:45:41,890 --> 01:45:48,630
just pass whatever handle you want here

1844
01:45:57,770 --> 01:46:00,770
hmm

1845
01:46:08,680 --> 01:46:15,320
that is weird so that I'm not sure about

1846
01:46:12,619 --> 01:46:17,840
them did they change they maybe change

1847
01:46:15,319 --> 01:46:22,159
that you didn't used to have to do that

1848
01:46:17,840 --> 01:46:24,110
it's not a big deal because it's pretty

1849
01:46:22,159 --> 01:46:27,050
trivial for us to just work around that

1850
01:46:24,109 --> 01:46:28,489
immediately but I thought I wouldn't

1851
01:46:27,050 --> 01:46:30,260
even have to do that and I'm not gonna

1852
01:46:28,489 --> 01:46:31,789
leave this code path in so I don't

1853
01:46:30,260 --> 01:46:32,960
really care that doesn't support it but

1854
01:46:31,789 --> 01:46:41,779
I thought that was something you could

1855
01:46:32,960 --> 01:46:45,619
just do however it's pretty easy for us

1856
01:46:41,779 --> 01:46:50,389
to work around that all we have to do if

1857
01:46:45,619 --> 01:46:52,970
we want to is instead of and wait a

1858
01:46:50,390 --> 01:47:03,500
minute and didn't white bitmap not do

1859
01:46:52,970 --> 01:47:09,560
that yeah this call didn't have a

1860
01:47:03,500 --> 01:47:13,699
problem with it maybe it didn't get

1861
01:47:09,560 --> 01:47:15,530
there yet but it's just a little bit

1862
01:47:13,699 --> 01:47:17,750
weird right because it should have been

1863
01:47:15,529 --> 01:47:20,179
doing that anyway if we don't want to do

1864
01:47:17,750 --> 01:47:22,340
that that's okay so in here where we do

1865
01:47:20,180 --> 01:47:24,710
our open gel in it and we initialize

1866
01:47:22,340 --> 01:47:26,690
this stuff for the the first time what

1867
01:47:24,710 --> 01:47:28,670
we can do is just say alright this is

1868
01:47:26,689 --> 01:47:34,129
going to be some kind of an allocation

1869
01:47:28,670 --> 01:47:36,170
thing here where we do a GL gem textures

1870
01:47:34,130 --> 01:47:38,300
call and just get a bunch of these

1871
01:47:36,170 --> 01:47:43,119
things so temporarily I'll just do one

1872
01:47:38,300 --> 01:47:43,119
here right

1873
01:48:00,050 --> 01:48:04,230
so when we call GL gen textures here

1874
01:48:02,640 --> 01:48:06,090
what I want to do is say look put a

1875
01:48:04,229 --> 01:48:08,969
bunch of texture handles into here for

1876
01:48:06,090 --> 01:48:17,550
me and then what I can do is when I do

1877
01:48:08,970 --> 01:48:20,400
my allocate texture call I should be

1878
01:48:17,550 --> 01:48:23,880
able when I pass the stuff in here right

1879
01:48:20,399 --> 01:48:27,089
I should be able to just use the array

1880
01:48:23,880 --> 01:48:30,600
that that you told me right so I can

1881
01:48:27,090 --> 01:48:43,500
just do like okay open gel texture

1882
01:48:30,600 --> 01:48:45,240
handles so that should allow me to

1883
01:48:43,500 --> 01:48:49,649
basically set these various texture

1884
01:48:45,239 --> 01:48:55,460
handles to whatever I want it to be

1885
01:48:49,649 --> 01:48:57,629
right and you know now we've got the

1886
01:48:55,460 --> 01:49:01,560
renderer setting those textures and

1887
01:48:57,630 --> 01:49:03,840
that's what we want okay so what we now

1888
01:49:01,560 --> 01:49:06,030
need to do for our final step is change

1889
01:49:03,840 --> 01:49:10,159
from using actual texture handles to

1890
01:49:06,029 --> 01:49:12,719
just using slices into the texture array

1891
01:49:10,159 --> 01:49:14,670
so again this should be pretty

1892
01:49:12,720 --> 01:49:19,920
straightforward we should just be able

1893
01:49:14,670 --> 01:49:24,779
to do this where we say okay we don't

1894
01:49:19,920 --> 01:49:27,210
use texture handles anymore at all all

1895
01:49:24,779 --> 01:49:32,609
we really do when we allocate a texture

1896
01:49:27,210 --> 01:49:38,220
is just update the slice so instead of

1897
01:49:32,609 --> 01:49:40,639
calling any of this stuff what we're

1898
01:49:38,220 --> 01:49:40,640
gonna do

1899
01:49:47,279 --> 01:50:01,569
is just do this actually it's not handle

1900
01:49:55,420 --> 01:50:03,310
really anymore so what we wanted to hear

1901
01:50:01,569 --> 01:50:04,929
say the texture handle should be lower

1902
01:50:03,310 --> 01:50:07,900
than the max texture count and then here

1903
01:50:04,930 --> 01:50:09,670
we we just have like a we grab that

1904
01:50:07,899 --> 01:50:18,159
handle out it's just going to be this

1905
01:50:09,670 --> 01:50:19,659
texture index right so that's actually

1906
01:50:18,159 --> 01:50:22,029
how we're gonna update textures from now

1907
01:50:19,659 --> 01:50:26,500
on where we do this this handle gets its

1908
01:50:22,029 --> 01:50:28,149
what gets passed down okay and so when

1909
01:50:26,500 --> 01:50:29,770
we actually update this the other thing

1910
01:50:28,149 --> 01:50:31,449
too is the width and the height are kind

1911
01:50:29,770 --> 01:50:33,010
of irrelevant like we don't really need

1912
01:50:31,449 --> 01:50:34,630
to pass them anymore because they always

1913
01:50:33,010 --> 01:50:35,890
have to be the same thing but that's

1914
01:50:34,630 --> 01:50:38,590
sort of a separate thing we can talk

1915
01:50:35,890 --> 01:50:41,500
about a little bit later because we

1916
01:50:38,590 --> 01:50:44,170
actually may need to do some UV updating

1917
01:50:41,500 --> 01:50:46,119
kinds of stuff in order to get like

1918
01:50:44,170 --> 01:50:48,489
rectangular regions out of our textures

1919
01:50:46,119 --> 01:50:50,430
so this would actually be the way that

1920
01:50:48,489 --> 01:50:55,659
we would update this from Taiwan and

1921
01:50:50,430 --> 01:51:02,340
this vine texture here would actually

1922
01:50:55,659 --> 01:51:02,340
always like always in all cases bind

1923
01:51:04,949 --> 01:51:17,470
just our giant array texture so we would

1924
01:51:09,130 --> 01:51:20,230
have that and this would just be a

1925
01:51:17,470 --> 01:51:21,550
single texture that we allocate at the

1926
01:51:20,229 --> 01:51:24,299
beginning that just has all of the

1927
01:51:21,550 --> 01:51:24,300
slices in it

1928
01:51:28,000 --> 01:51:34,060
however many this says there should be

1929
01:51:31,380 --> 01:51:37,090
so when we actually bind that texture

1930
01:51:34,060 --> 01:51:41,770
and update it we should be good to go

1931
01:51:37,090 --> 01:51:58,000
I believe we pass to dot array 2-d there

1932
01:51:41,770 --> 01:52:00,910
but let me just make sure so we can so

1933
01:51:58,000 --> 01:52:03,310
when we bind that text sub image now

1934
01:52:00,909 --> 01:52:07,149
we're just updating slices of that thing

1935
01:52:03,310 --> 01:52:14,380
so then if we just use this instead

1936
01:52:07,149 --> 01:52:17,129
during startup to you know inside OpenGL

1937
01:52:14,380 --> 01:52:19,329
in it where before we would have been

1938
01:52:17,130 --> 01:52:21,190
allocating all these texture handles

1939
01:52:19,329 --> 01:52:28,750
instead of what we're going to do is say

1940
01:52:21,189 --> 01:52:31,559
well inside the OpenGL texture array we

1941
01:52:28,750 --> 01:52:35,738
know that we've got each of these

1942
01:52:31,560 --> 01:52:38,230
textures packed into this one thing so

1943
01:52:35,738 --> 01:52:41,859
just bind it at the start make a 3d

1944
01:52:38,229 --> 01:52:47,549
image out of it set the parameters that

1945
01:52:41,859 --> 01:52:47,549
we want and then finish up right

1946
01:52:55,560 --> 01:53:00,970
so what we want to make sure we do here

1947
01:52:58,960 --> 01:53:02,529
when we're doing this sampling too

1948
01:53:00,970 --> 01:53:05,770
though because there's more to it than

1949
01:53:02,529 --> 01:53:09,550
this right is that we need to make sure

1950
01:53:05,770 --> 01:53:11,620
that when we bind these textures up we

1951
01:53:09,550 --> 01:53:13,029
want to make sure that we set the

1952
01:53:11,619 --> 01:53:14,829
filtering properly because we just

1953
01:53:13,029 --> 01:53:17,019
wanted to stay within a slice like we

1954
01:53:14,829 --> 01:53:18,699
never want them to kind of like sample

1955
01:53:17,020 --> 01:53:21,250
outside of the slice or do anything like

1956
01:53:18,699 --> 01:53:23,829
that so when we actually create this

1957
01:53:21,250 --> 01:53:26,260
texture right here and specify the

1958
01:53:23,829 --> 01:53:30,819
settings for this function will have to

1959
01:53:26,260 --> 01:53:32,079
update in a second this is gonna be like

1960
01:53:30,819 --> 01:53:34,809
a zero data pointer saying we're just

1961
01:53:32,079 --> 01:53:36,189
gonna set the layout of it but what we

1962
01:53:34,810 --> 01:53:38,710
need to do is make sure that we set

1963
01:53:36,189 --> 01:53:42,339
these other filter parameters correctly

1964
01:53:38,710 --> 01:53:43,810
for it the texture arrays now have the

1965
01:53:42,340 --> 01:53:46,960
right texture stuff up here yeah you can

1966
01:53:43,810 --> 01:53:51,120
see I don't know if there's any other of

1967
01:53:46,960 --> 01:53:51,119
these that we would actually need

1968
01:53:53,550 --> 01:54:01,960
doesn't really look like it so we may

1969
01:54:00,310 --> 01:54:06,600
actually get away with just doing this

1970
01:54:01,960 --> 01:54:06,600
and not really changing anything else

1971
01:54:13,510 --> 01:54:17,590
yeah so we might be able to just do

1972
01:54:15,970 --> 01:54:20,260
something like that where we said like

1973
01:54:17,590 --> 01:54:22,600
okay let's look at GL tech storage we

1974
01:54:20,260 --> 01:54:24,659
can just call geo text or egde set up

1975
01:54:22,600 --> 01:54:27,760
the size that we want this thing to be

1976
01:54:24,659 --> 01:54:31,590
and then just call into it making

1977
01:54:27,760 --> 01:54:31,590
updates to the layers as we go

1978
01:54:32,520 --> 01:54:45,640
that seems fine so here where we specify

1979
01:54:42,760 --> 01:54:47,619
the 2d array the mid-level count right

1980
01:54:45,640 --> 01:54:52,590
now we're not going to have but

1981
01:54:47,619 --> 01:54:52,590
eventually I think we probably will and

1982
01:54:58,679 --> 01:55:05,998
you know well that's alright anyway so

1983
01:55:03,269 --> 01:55:08,639
in our geotech storage 3d call we need

1984
01:55:05,998 --> 01:55:11,118
to set the default the format for it to

1985
01:55:08,639 --> 01:55:13,529
be whatever our defaults right format is

1986
01:55:11,118 --> 01:55:16,438
and then our width in our height we knew

1987
01:55:13,529 --> 01:55:18,268
at the moment anyway was 512 by 512 it I

1988
01:55:16,439 --> 01:55:20,670
think that probably has to be something

1989
01:55:18,269 --> 01:55:23,159
that we pass in like what do you want

1990
01:55:20,670 --> 01:55:27,689
your texture size to be if that makes

1991
01:55:23,158 --> 01:55:31,129
sense so we'll probably have to play

1992
01:55:27,689 --> 01:55:31,130
with that a little bit more as we go

1993
01:55:33,050 --> 01:55:43,860
probably pass in texture array dimension

1994
01:55:39,498 --> 01:55:45,899
okay so we want to probably update that

1995
01:55:43,859 --> 01:55:47,458
a little bit but other than that I think

1996
01:55:45,899 --> 01:55:49,170
when we push these through I think we're

1997
01:55:47,458 --> 01:55:51,238
okay here and then that way when we're

1998
01:55:49,170 --> 01:55:54,328
putting pushing these down we can sort

1999
01:55:51,238 --> 01:55:55,919
of go from there I don't know if we have

2000
01:55:54,328 --> 01:55:57,538
tech storage 3d that we probably didn't

2001
01:55:55,920 --> 01:56:03,208
make reading probably didn't grab that

2002
01:55:57,538 --> 01:56:05,069
call I'm sorry that that parameter yeah

2003
01:56:03,208 --> 01:56:08,420
we didn't so we need to grab those out

2004
01:56:05,069 --> 01:56:08,420
and that but that's about it

2005
01:56:13,430 --> 01:56:20,730
so I can't promise I'll do bug all of

2006
01:56:16,350 --> 01:56:25,320
these today but this is the the basics

2007
01:56:20,729 --> 01:56:26,939
of it there's not really much more to do

2008
01:56:25,319 --> 01:56:28,189
other than debugging it and then you

2009
01:56:26,939 --> 01:56:32,309
know we can kind of go from there so

2010
01:56:28,189 --> 01:56:34,409
let's see texture stuff is there a place

2011
01:56:32,310 --> 01:56:40,020
we put some of that already

2012
01:56:34,409 --> 01:56:46,920
not really so I'll put it in here looks

2013
01:56:40,020 --> 01:56:51,780
like it would go Morini um so we just

2014
01:56:46,920 --> 01:56:53,010
need our tech storage 3d now and that's

2015
01:56:51,779 --> 01:56:55,889
just the thing that says look I'm not

2016
01:56:53,010 --> 01:56:59,489
going to tell you all of the actual

2017
01:56:55,890 --> 01:57:01,230
layout of this thing like all of the

2018
01:56:59,488 --> 01:57:03,359
contents of it I'm just going to tell

2019
01:57:01,229 --> 01:57:05,839
you how big it would be and then I'm

2020
01:57:03,359 --> 01:57:11,219
gonna fill it out incrementally as we go

2021
01:57:05,840 --> 01:57:13,610
that's all that's doing right so again

2022
01:57:11,219 --> 01:57:13,609
we'll just

2023
01:57:25,909 --> 01:57:42,889
and then look at text sub image 3d and

2024
01:57:39,810 --> 01:57:42,890
that should be all we need

2025
01:57:43,130 --> 01:57:50,310
alright um so when we're binding these

2026
01:57:46,560 --> 01:57:52,110
textures now we again have the situation

2027
01:57:50,310 --> 01:57:54,480
where we don't really need to worry

2028
01:57:52,109 --> 01:57:57,479
about binding specific textures inside

2029
01:57:54,479 --> 01:57:59,669
our draw elements loop so if you look at

2030
01:57:57,479 --> 01:58:02,069
what's going on here we can now just

2031
01:57:59,670 --> 01:58:04,619
make one call and the idea is that we

2032
01:58:02,069 --> 01:58:07,319
would just bind one texture array and

2033
01:58:04,619 --> 01:58:10,289
that texture array would not come out of

2034
01:58:07,319 --> 01:58:12,689
the there be no quad bitmaps or anything

2035
01:58:10,289 --> 01:58:15,510
that's just gonna be deleted entirely

2036
01:58:12,689 --> 01:58:18,989
and instead what we would do is say that

2037
01:58:15,510 --> 01:58:21,510
we're always gonna pass down our texture

2038
01:58:18,989 --> 01:58:23,399
array as the thing that everything grabs

2039
01:58:21,510 --> 01:58:26,100
you know it'll just let them grab the

2040
01:58:23,399 --> 01:58:30,029
texture out of there and then we just

2041
01:58:26,100 --> 01:58:33,600
need to actually in our shader access

2042
01:58:30,029 --> 01:58:36,179
that texture array using the indices

2043
01:58:33,600 --> 01:58:38,400
that we get passed and that's really the

2044
01:58:36,180 --> 01:58:40,530
only thing we need to do to make the

2045
01:58:38,399 --> 01:58:41,670
rest of it work and all the infinite

2046
01:58:40,529 --> 01:58:43,289
amount of debugging we're gonna have to

2047
01:58:41,670 --> 01:58:44,789
do to figure out why OpenGL isn't

2048
01:58:43,289 --> 01:58:47,310
working because that's obviously also

2049
01:58:44,789 --> 01:58:52,140
like six years of work but in general

2050
01:58:47,310 --> 01:58:55,740
this is all we really need to do so in

2051
01:58:52,140 --> 01:58:57,030
order to sample it you can see inside

2052
01:58:55,739 --> 01:58:58,739
the shader it should be pretty

2053
01:58:57,029 --> 01:59:00,869
straightforward

2054
01:58:58,739 --> 01:59:03,510
it depends which one we're using I don't

2055
01:59:00,869 --> 01:59:04,800
they don't really note it here we don't

2056
01:59:03,510 --> 01:59:07,110
care about the min/max because we're

2057
01:59:04,800 --> 01:59:10,140
actually loading it in directly so we

2058
01:59:07,109 --> 01:59:13,229
should actually be able to do the

2059
01:59:10,140 --> 01:59:16,380
correct texture fetch just in general um

2060
01:59:13,229 --> 01:59:19,589
I don't know yeah so we use a different

2061
01:59:16,380 --> 01:59:22,230
sampler type there so we should be able

2062
01:59:19,590 --> 01:59:26,930
to set that sampler type and go from

2063
01:59:22,229 --> 01:59:26,929
there so inside the Z bias shader

2064
01:59:28,250 --> 01:59:34,619
this one right here here's the samplers

2065
01:59:32,279 --> 01:59:35,579
so this texture sampler is going to be

2066
01:59:34,619 --> 01:59:39,300
one of these

2067
01:59:35,579 --> 01:59:42,390
it's gonna be the 2d array it's not

2068
01:59:39,300 --> 01:59:44,909
capitalized yeah that's our texture

2069
01:59:42,390 --> 01:59:47,550
sampler and our texture sampler is only

2070
01:59:44,909 --> 01:59:53,550
used just to get the one texture sample

2071
01:59:47,550 --> 01:59:55,800
right so we should be able to just in

2072
01:59:53,550 --> 01:59:58,920
that texture sampler we should be able

2073
01:59:55,800 --> 02:00:02,130
to just do the array sample here and so

2074
01:59:58,920 --> 02:00:06,199
if we look up the geocell quick

2075
02:00:02,130 --> 02:00:10,710
reference the call for actually getting

2076
02:00:06,199 --> 02:00:15,739
a texture array where the texture

2077
02:00:10,710 --> 02:00:19,430
sampling is no no where's our GLS so

2078
02:00:15,739 --> 02:00:25,439
all's here they are here they are so

2079
02:00:19,430 --> 02:00:30,210
those are the types where is the texture

2080
02:00:25,439 --> 02:00:32,339
call here it is um so right now we're

2081
02:00:30,210 --> 02:00:33,810
just calling texture and you can see

2082
02:00:32,340 --> 02:00:35,970
here that like it's got a bunch

2083
02:00:33,810 --> 02:00:39,270
different kinds so when we call texture

2084
02:00:35,970 --> 02:00:42,780
if we call sampler 2d array and we say

2085
02:00:39,270 --> 02:00:45,030
here's the sampler here's the vector 3p

2086
02:00:42,779 --> 02:00:48,449
and then the the bias we don't care

2087
02:00:45,029 --> 02:00:50,550
about the moment so that that number

2088
02:00:48,449 --> 02:00:54,529
that we were passing it the frag UV is

2089
02:00:50,550 --> 02:00:57,449
like insufficient it doesn't have enough

2090
02:00:54,529 --> 02:01:00,989
actual information there so what we want

2091
02:00:57,449 --> 02:01:04,139
to do is make like an array UV so we

2092
02:01:00,989 --> 02:01:07,469
want to say look there's an array UV and

2093
02:01:04,140 --> 02:01:09,510
that array UV is gonna be the frag UV I

2094
02:01:07,470 --> 02:01:13,800
let me do this the way that they tend to

2095
02:01:09,510 --> 02:01:17,369
do it just in case them fits and starts

2096
02:01:13,800 --> 02:01:21,800
here so we're gonna make the the frag UV

2097
02:01:17,369 --> 02:01:24,630
x the Frog UV Y and then this actual Z

2098
02:01:21,800 --> 02:01:27,630
component of the texture is gonna be the

2099
02:01:24,630 --> 02:01:31,199
index right it's just gonna be the frag

2100
02:01:27,630 --> 02:01:34,020
texture index okay

2101
02:01:31,199 --> 02:01:35,699
and then I just have to figure out okay

2102
02:01:34,020 --> 02:01:39,710
what do they want the coordinates to be

2103
02:01:35,699 --> 02:01:39,710
for this because I don't actually know

2104
02:01:40,310 --> 02:01:47,869
it's just so if it is just the layer

2105
02:01:43,850 --> 02:01:51,050
it's clamped so it should be just that

2106
02:01:47,868 --> 02:01:55,068
like that should be it and then if we

2107
02:01:51,050 --> 02:01:57,559
access that as an array after the array

2108
02:01:55,069 --> 02:02:00,559
UV that should basically do it so it's

2109
02:01:57,559 --> 02:02:02,689
saying take the texture go to this slice

2110
02:02:00,559 --> 02:02:07,819
of it and here's the actual fragment

2111
02:02:02,689 --> 02:02:10,459
location of the thing um so let's

2112
02:02:07,819 --> 02:02:17,019
actually see what we can do here invalid

2113
02:02:10,458 --> 02:02:23,679
texture formats invalid texture format

2114
02:02:17,019 --> 02:02:36,139
here are you talking about be GRE be GRA

2115
02:02:23,679 --> 02:02:41,599
ext I'm not sure what exact problem they

2116
02:02:36,139 --> 02:02:42,559
have here I need to do in debug mode to

2117
02:02:41,599 --> 02:02:49,639
be able to inspect all those

2118
02:02:42,559 --> 02:02:51,979
unfortunately so what's interesting is

2119
02:02:49,639 --> 02:02:57,109
we did not get a problem for allocating

2120
02:02:51,979 --> 02:03:00,458
earth our original so we're only having

2121
02:02:57,109 --> 02:03:03,199
a problem here

2122
02:03:00,458 --> 02:03:05,179
why is our texture array set to zero did

2123
02:03:03,198 --> 02:03:08,148
that not get initialized I'm gonna stop

2124
02:03:05,179 --> 02:03:11,748
in OpenGL in it I'm gonna switch to

2125
02:03:08,149 --> 02:03:15,260
debug mode and I just want to see where

2126
02:03:11,748 --> 02:03:19,128
we're at so there's a compile in debug

2127
02:03:15,260 --> 02:03:21,309
mode let's go ahead and roll forward on

2128
02:03:19,128 --> 02:03:21,309
that

2129
02:03:26,840 --> 02:03:40,920
and here is open jail allocate the

2130
02:03:31,739 --> 02:03:42,510
OpenGL allocation 400 duh we still call

2131
02:03:40,920 --> 02:03:46,020
it for this white bitmap alright so I

2132
02:03:42,510 --> 02:03:49,289
gotta take that out as well I don't want

2133
02:03:46,020 --> 02:03:56,310
to see that call in there so that's got

2134
02:03:49,289 --> 02:03:57,810
to go but that should have nothing to do

2135
02:03:56,310 --> 02:04:00,960
with it that's just because it's getting

2136
02:03:57,810 --> 02:04:02,370
called well it might actually because if

2137
02:04:00,960 --> 02:04:05,119
we haven't initialized this yet you

2138
02:04:02,369 --> 02:04:05,119
can't call that

2139
02:04:14,988 --> 02:04:18,229
so in here this is probably just

2140
02:04:17,238 --> 02:04:21,079
complaining about the fact that our

2141
02:04:18,229 --> 02:04:31,819
mipmap count needs to at least be 1/4 GL

2142
02:04:21,079 --> 02:04:35,229
tech storage go ahead guess in there so

2143
02:04:31,819 --> 02:04:35,229
it seems to like that ok

2144
02:04:36,289 --> 02:04:46,369
we don't really know though yet whoa all

2145
02:04:40,399 --> 02:04:54,920
right I was not expecting that to work

2146
02:04:46,369 --> 02:05:09,340
the first time out yeah that's kind of

2147
02:04:54,920 --> 02:05:09,340
nuts but that appears to have worked ok

2148
02:05:09,969 --> 02:05:17,960
well I assume we still have some

2149
02:05:15,409 --> 02:05:21,829
problems in there but somehow that

2150
02:05:17,960 --> 02:05:24,380
actually worked which is crazy and I

2151
02:05:21,829 --> 02:05:28,219
don't know what to make of that I was

2152
02:05:24,380 --> 02:05:30,380
expecting that to be a long slog alright

2153
02:05:28,219 --> 02:05:33,409
well here's our renderer running with

2154
02:05:30,380 --> 02:05:41,659
correct textures and it's running I

2155
02:05:33,409 --> 02:05:44,090
think actually quite fast I think that's

2156
02:05:41,659 --> 02:05:49,309
probably within earshot of running at 60

2157
02:05:44,090 --> 02:05:52,640
now you can see we've got some issues

2158
02:05:49,310 --> 02:05:56,300
because our textures are not always I

2159
02:05:52,640 --> 02:05:57,770
think for textures that are we're

2160
02:05:56,300 --> 02:05:59,779
sending them down and they're always

2161
02:05:57,770 --> 02:06:03,290
going to be blown out to the 512 by 512

2162
02:05:59,779 --> 02:06:04,880
size so we kind of have some more work

2163
02:06:03,289 --> 02:06:09,560
to do because we need to remember the

2164
02:06:04,880 --> 02:06:12,739
sizes of things inside those inside

2165
02:06:09,560 --> 02:06:13,940
those textures right so we kind of need

2166
02:06:12,738 --> 02:06:15,619
to do a little bit more work there but

2167
02:06:13,939 --> 02:06:23,469
that's pretty awesome that that just

2168
02:06:15,619 --> 02:06:23,469
worked I also wonder I'm curious about

2169
02:06:25,229 --> 02:06:30,059
what's the Geo gym it Maps call

2170
02:06:38,948 --> 02:06:43,268
I was curious if we could call the

2171
02:06:40,840 --> 02:06:47,670
generate texture map we pretty we can't

2172
02:06:43,269 --> 02:06:50,139
really know because when you update one

2173
02:06:47,670 --> 02:06:52,868
we would only want to generate the MIT

2174
02:06:50,139 --> 02:06:55,498
maps for one slice and I don't think it

2175
02:06:52,868 --> 02:06:55,498
would really allow that

2176
02:07:03,909 --> 02:07:06,539
yeah

2177
02:07:14,439 --> 02:07:17,919
so we don't really want to call this I

2178
02:07:16,630 --> 02:07:19,180
was gonna say we could try to reminisce

2179
02:07:17,920 --> 02:07:20,500
but we're gonna have to send those down

2180
02:07:19,180 --> 02:07:23,680
ourselves because we want to send them

2181
02:07:20,500 --> 02:07:27,069
down per slice and we'd want to send

2182
02:07:23,680 --> 02:07:28,750
those down ourselves all right so we

2183
02:07:27,069 --> 02:07:31,809
still have a fair bit of work here to do

2184
02:07:28,750 --> 02:07:33,489
we're not done but I guess we did what I

2185
02:07:31,810 --> 02:07:37,300
want to do day which is get the texture

2186
02:07:33,489 --> 02:07:40,329
is working so handmade hero obviously is

2187
02:07:37,300 --> 02:07:46,840
gonna have some issues which you can

2188
02:07:40,329 --> 02:07:48,460
kind of see um at the moment and mainly

2189
02:07:46,840 --> 02:07:51,279
that's just because we don't have white

2190
02:07:48,460 --> 02:07:56,159
bitmap yet but the real thing is just

2191
02:07:51,279 --> 02:08:00,250
the texture sizes so you know yeah

2192
02:07:56,159 --> 02:08:07,449
having the white bitmap be specified at

2193
02:08:00,250 --> 02:08:10,029
some point obviously necessary now let's

2194
02:08:07,449 --> 02:08:11,679
just go ahead and do it so if we got rid

2195
02:08:10,029 --> 02:08:14,139
of white bitmap let's see where that's

2196
02:08:11,680 --> 02:08:18,190
actually being used okay so let's

2197
02:08:14,140 --> 02:08:21,039
suppose we just went ahead and specified

2198
02:08:18,189 --> 02:08:31,599
everything here and white bitmap has to

2199
02:08:21,039 --> 02:08:34,260
go away um so like all this stuff it's

2200
02:08:31,600 --> 02:08:34,260
just got to go

2201
02:08:34,859 --> 02:08:41,859
also quad bitmaps is not necessary

2202
02:08:37,779 --> 02:08:48,729
anymore either right like all that stuff

2203
02:08:41,859 --> 02:08:50,679
goes away and so it's gonna have to get

2204
02:08:48,729 --> 02:08:54,939
that white bitmap from somewhere else

2205
02:08:50,680 --> 02:08:57,970
and that's the important part for our

2206
02:08:54,939 --> 02:09:00,399
purposes here right and so that's what

2207
02:08:57,970 --> 02:09:02,140
we'll be working on in a second so what

2208
02:09:00,399 --> 02:09:04,539
I want to do is yeah get rid of quad

2209
02:09:02,140 --> 02:09:06,430
bitmaps because quad bitmaps we don't

2210
02:09:04,539 --> 02:09:08,710
want to use anymore right that just

2211
02:09:06,430 --> 02:09:10,210
never wants to get set never wants to

2212
02:09:08,710 --> 02:09:13,060
get talked about or set or anything

2213
02:09:10,210 --> 02:09:14,649
anywhere and then white bitmap wants to

2214
02:09:13,060 --> 02:09:16,930
come from somewhere that actually is

2215
02:09:14,649 --> 02:09:19,569
internal to the application it's not

2216
02:09:16,930 --> 02:09:24,450
something that the renderer provides for

2217
02:09:19,569 --> 02:09:24,449
you and looking this

2218
02:09:25,739 --> 02:09:30,929
see it looks like that's the only other

2219
02:09:28,439 --> 02:09:33,559
thing that we really have to worry about

2220
02:09:30,930 --> 02:09:33,560
right

2221
02:09:41,840 --> 02:09:48,560
yeah so I think all we really need to do

2222
02:09:45,470 --> 02:09:52,610
is figure out where else we're gonna get

2223
02:09:48,560 --> 02:09:56,960
that white bitmap from and my suspicion

2224
02:09:52,609 --> 02:09:58,880
is the best way that we could do that is

2225
02:09:56,960 --> 02:10:01,039
in the renderer inside the game render

2226
02:09:58,880 --> 02:10:02,869
commands when you create one of these if

2227
02:10:01,039 --> 02:10:07,689
you want to provide a white bitmap you

2228
02:10:02,869 --> 02:10:07,689
can and that would just be set in here

2229
02:10:10,119 --> 02:10:16,909
um so all of these would just say look

2230
02:10:14,649 --> 02:10:18,949
you're gonna get a white texture out of

2231
02:10:16,909 --> 02:10:21,649
here if there is one we don't guarantee

2232
02:10:18,949 --> 02:10:23,389
that there is someone can set that for

2233
02:10:21,649 --> 02:10:27,199
you but otherwise you just won't draw

2234
02:10:23,390 --> 02:10:34,090
you know I'm saying so all of these can

2235
02:10:27,199 --> 02:10:34,090
just say look white texture like texture

2236
02:10:36,039 --> 02:10:39,819
oops I missed one

2237
02:10:43,760 --> 02:10:49,579
and it's up to your application to make

2238
02:10:46,250 --> 02:11:02,300
that if you want it but we're not going

2239
02:10:49,579 --> 02:11:05,479
to make it for you and there are other

2240
02:11:02,300 --> 02:11:06,980
ways we could do it wait it's not a

2241
02:11:05,479 --> 02:11:30,379
member of render group I thought I'd

2242
02:11:06,979 --> 02:11:31,549
just added it so that's just going to be

2243
02:11:30,380 --> 02:11:32,930
something that the app can choose to

2244
02:11:31,550 --> 02:11:35,690
supply on their own if they wish

2245
02:11:32,930 --> 02:11:41,090
otherwise you know otherwise it won't be

2246
02:11:35,689 --> 02:11:45,109
if that makes sense so I think that's

2247
02:11:41,090 --> 02:11:47,060
all I really wanted to do there and then

2248
02:11:45,109 --> 02:11:48,409
you know when when you create one of

2249
02:11:47,060 --> 02:11:50,150
these render groups if you want to

2250
02:11:48,409 --> 02:11:52,819
specify a white bitmap you can otherwise

2251
02:11:50,149 --> 02:11:54,500
you don't get one and we can make one

2252
02:11:52,819 --> 02:11:58,279
inside handmade hero to restore that

2253
02:11:54,500 --> 02:12:04,220
functionality as necessary so if we you

2254
02:11:58,279 --> 02:12:07,359
know look at the places in handmade here

2255
02:12:04,220 --> 02:12:07,360
where that's actually used

2256
02:12:11,619 --> 02:12:20,930
and in fact since we actually do pass in

2257
02:12:15,170 --> 02:12:22,220
an assets parameter for that I suppose

2258
02:12:20,930 --> 02:12:24,500
that's something that really should be

2259
02:12:22,220 --> 02:12:25,240
set separately as well probably want to

2260
02:12:24,500 --> 02:12:27,409
clean that up

2261
02:12:25,239 --> 02:12:30,170
you shouldn't have to pass this year or

2262
02:12:27,409 --> 02:12:36,619
that that should just be like a user

2263
02:12:30,170 --> 02:12:39,800
pointer or something right but just

2264
02:12:36,619 --> 02:12:42,949
looking at this as it goes through you

2265
02:12:39,800 --> 02:12:44,720
can see where these are are set what we

2266
02:12:42,949 --> 02:12:46,819
really want to do is have that command

2267
02:12:44,720 --> 02:12:48,680
be something that you kind of do in your

2268
02:12:46,819 --> 02:12:51,109
app and then you can set that white

2269
02:12:48,680 --> 02:12:54,140
texture to whatever you want if you want

2270
02:12:51,109 --> 02:12:56,119
to so for example inside our asset

2271
02:12:54,140 --> 02:12:59,590
startup is probably the right place to

2272
02:12:56,119 --> 02:13:03,550
do that so inside here where we set

2273
02:12:59,590 --> 02:13:03,550
where we go ahead and set up the assets

2274
02:13:04,239 --> 02:13:09,889
what I would want to do is create the

2275
02:13:07,220 --> 02:13:12,409
white texture here so this is something

2276
02:13:09,890 --> 02:13:25,550
where you know we would push on texture

2277
02:13:12,409 --> 02:13:27,760
out to do that so texture something like

2278
02:13:25,550 --> 02:13:27,760
this

2279
02:13:37,380 --> 02:13:42,960
so we'd say okay the texture handle for

2280
02:13:40,859 --> 02:13:53,279
the white texture is going to be texture

2281
02:13:42,960 --> 02:14:04,140
1 the the width and height of it is also

2282
02:13:53,279 --> 02:14:06,449
1 the actual data for that is just

2283
02:14:04,140 --> 02:14:09,770
whatever our white texture is so I have

2284
02:14:06,449 --> 02:14:14,309
to put it somewhere where we know

2285
02:14:09,770 --> 02:14:16,200
there's going to be a single piece of of

2286
02:14:14,310 --> 02:14:17,640
memory that won't go away because we

2287
02:14:16,199 --> 02:14:30,840
don't know when this texture off will

2288
02:14:17,640 --> 02:14:37,680
complete right so that just allows us to

2289
02:14:30,840 --> 02:14:40,380
create one of those and off we go so now

2290
02:14:37,680 --> 02:14:42,630
there would always be a white texture

2291
02:14:40,380 --> 02:14:44,730
there we also could just say look if

2292
02:14:42,630 --> 02:14:49,739
it's just assumed that that's texture

2293
02:14:44,729 --> 02:14:54,269
handle 1 all the time or maybe that's

2294
02:14:49,739 --> 02:14:56,699
just always texture handle 0 that seems

2295
02:14:54,270 --> 02:14:59,250
even better so we just assume that

2296
02:14:56,699 --> 02:15:04,229
texture handle 0 is always the the null

2297
02:14:59,250 --> 02:15:05,579
texture in that sense and then I think

2298
02:15:04,229 --> 02:15:10,349
we're good to go because then what we

2299
02:15:05,579 --> 02:15:12,329
can do is inside handmade renderer when

2300
02:15:10,350 --> 02:15:15,750
we do begin group that will be what it's

2301
02:15:12,329 --> 02:15:19,590
already always default to so is if you

2302
02:15:15,750 --> 02:15:21,479
want to set that texture as white you

2303
02:15:19,590 --> 02:15:26,220
can but you could also do something else

2304
02:15:21,479 --> 02:15:28,139
right okay so this won't quite work and

2305
02:15:26,220 --> 02:15:30,690
the reason it won't quite work is

2306
02:15:28,140 --> 02:15:33,510
because again it's only the it doesn't

2307
02:15:30,689 --> 02:15:35,699
record the sizes but you know we

2308
02:15:33,510 --> 02:15:39,090
probably could fix even that if we

2309
02:15:35,699 --> 02:15:41,729
wanted to and the way that we would fix

2310
02:15:39,090 --> 02:15:44,190
that is actually kind of interesting I

2311
02:15:41,729 --> 02:15:45,659
we can ously want to encode in our

2312
02:15:44,189 --> 02:15:48,239
texture handles what the width and

2313
02:15:45,659 --> 02:15:50,869
height actually are which I know sounds

2314
02:15:48,239 --> 02:15:50,869
kind of weird

2315
02:15:51,319 --> 02:15:57,569
but if we want to we actually can so if

2316
02:15:55,859 --> 02:16:03,779
you think about how this is working we

2317
02:15:57,569 --> 02:16:06,059
have like a 512 by 512 bit map and we're

2318
02:16:03,779 --> 02:16:08,639
if we want to pick like sub regions out

2319
02:16:06,060 --> 02:16:09,810
of that it's actually not that hard to

2320
02:16:08,640 --> 02:16:12,360
do

2321
02:16:09,810 --> 02:16:15,330
what we can do is make the renderer

2322
02:16:12,359 --> 02:16:20,339
texture actually embed that data with it

2323
02:16:15,329 --> 02:16:24,329
and then when we send down our or actual

2324
02:16:20,340 --> 02:16:27,420
sprites they can just bake those sizes

2325
02:16:24,329 --> 02:16:29,460
into there You've ease so for example in

2326
02:16:27,420 --> 02:16:40,409
here when we actually have a renderer

2327
02:16:29,460 --> 02:16:43,229
texture if we look at what this looks

2328
02:16:40,409 --> 02:16:48,799
like what we can do is instead say all

2329
02:16:43,229 --> 02:16:52,559
right let's just say there's an index a

2330
02:16:48,799 --> 02:16:55,920
width and a height specified for this

2331
02:16:52,559 --> 02:16:56,489
thing and you know I mean it can look

2332
02:16:55,920 --> 02:17:00,510
like this

2333
02:16:56,489 --> 02:17:02,520
and so then it's a 64-bit value for your

2334
02:17:00,510 --> 02:17:09,000
renderer texture and this is what it

2335
02:17:02,520 --> 02:17:12,090
encodes so then when you do texture

2336
02:17:09,000 --> 02:17:13,319
handle you would just say like hey what

2337
02:17:12,090 --> 02:17:15,090
did you want the width and height of

2338
02:17:13,319 --> 02:17:19,138
your texture handle to be and this

2339
02:17:15,090 --> 02:17:21,809
actually is now just the thing you don't

2340
02:17:19,138 --> 02:17:29,339
need in the texture up to have anything

2341
02:17:21,809 --> 02:17:30,959
else so you just do this right and I

2342
02:17:29,340 --> 02:17:33,000
know this seems really strange but just

2343
02:17:30,959 --> 02:17:36,029
trust me for a second and watch how it

2344
02:17:33,000 --> 02:17:38,370
works so we've got a renderer texture we

2345
02:17:36,030 --> 02:17:40,920
just pack into 64 bits what the index

2346
02:17:38,370 --> 02:17:43,230
slice is and how big we want it to be in

2347
02:17:40,920 --> 02:17:45,540
the thing and to be honest we could even

2348
02:17:43,229 --> 02:17:48,388
be fancier about that we could actually

2349
02:17:45,540 --> 02:17:51,000
pack an offset in here if we wanted sub

2350
02:17:48,388 --> 02:17:54,739
regions of the texture we could get that

2351
02:17:51,000 --> 02:17:54,739
fancy if we really wanted to

2352
02:18:03,809 --> 02:18:08,649
so this actually can be kind of flexible

2353
02:18:06,549 --> 02:18:10,750
in that sense and so then if we look at

2354
02:18:08,649 --> 02:18:14,260
the texture handle call what we can say

2355
02:18:10,750 --> 02:18:32,079
is like hey pass me the index then pass

2356
02:18:14,260 --> 02:18:33,790
me with once I do that I now have all of

2357
02:18:32,079 --> 02:18:36,429
the information packed into my texture

2358
02:18:33,790 --> 02:18:39,640
handle that I actually need and I can

2359
02:18:36,429 --> 02:18:42,010
just force everyone else now to act to

2360
02:18:39,639 --> 02:18:46,090
call it to have to actually call it if I

2361
02:18:42,010 --> 02:18:49,600
look at the texture ops now it's just

2362
02:18:46,090 --> 02:18:53,079
this it's saying like here's where I'm

2363
02:18:49,600 --> 02:18:55,360
gonna put that texture and so then we

2364
02:18:53,079 --> 02:18:57,670
can just say okay here's the index let's

2365
02:18:55,360 --> 02:18:59,800
let's just you know grab that index out

2366
02:18:57,670 --> 02:19:05,079
in fact while we're at it we could just

2367
02:18:59,799 --> 02:19:06,968
say let's just use it here we also know

2368
02:19:05,079 --> 02:19:09,100
what the width and height are so here

2369
02:19:06,968 --> 02:19:13,899
they are that's how we're going to

2370
02:19:09,100 --> 02:19:16,090
update those pieces of information and

2371
02:19:13,899 --> 02:19:19,389
we don't need this anymore and we can

2372
02:19:16,090 --> 02:19:21,340
just go from there okay so then when we

2373
02:19:19,389 --> 02:19:23,229
talk about this thing where we pass open

2374
02:19:21,340 --> 02:19:25,210
gel okay texture we can get rid of those

2375
02:19:23,229 --> 02:19:32,590
two this those don't exist anymore

2376
02:19:25,209 --> 02:19:39,279
and that's fine and they don't exist

2377
02:19:32,590 --> 02:19:46,719
here either I don't really know what

2378
02:19:39,280 --> 02:19:49,260
clear does in this case for who's

2379
02:19:46,718 --> 02:19:49,259
calling it

2380
02:19:50,889 --> 02:19:56,510
but we can still do it it's certainly

2381
02:19:53,359 --> 02:19:57,709
not a problem and then in here when

2382
02:19:56,510 --> 02:19:59,988
we're actually starting to use this

2383
02:19:57,709 --> 02:20:03,229
stuff this is where we start to actually

2384
02:19:59,988 --> 02:20:06,559
have some we actually have to do stuff

2385
02:20:03,228 --> 02:20:08,868
right so here's our UVs that come in on

2386
02:20:06,559 --> 02:20:10,969
the push quad and what we now know is

2387
02:20:08,869 --> 02:20:12,470
that these UVs are not necessarily

2388
02:20:10,969 --> 02:20:14,299
correct because the size of the thing

2389
02:20:12,469 --> 02:20:16,760
that we loaded in may not be the size of

2390
02:20:14,299 --> 02:20:19,728
the entire texture so we need to correct

2391
02:20:16,760 --> 02:20:22,068
for those values by inverting the value

2392
02:20:19,728 --> 02:20:25,429
that comes in so what we first want to

2393
02:20:22,068 --> 02:20:33,228
do is grab the index out this way like

2394
02:20:25,430 --> 02:20:35,859
so and we probably want to do this to

2395
02:20:33,228 --> 02:20:38,988
make sure that it doesn't ruin our day

2396
02:20:35,859 --> 02:20:40,369
if that makes sense but then what we

2397
02:20:38,988 --> 02:20:42,590
want to do is we want to come up with a

2398
02:20:40,369 --> 02:20:44,270
way of processing that UV information

2399
02:20:42,590 --> 02:20:47,209
into here we're gonna do that in just a

2400
02:20:44,270 --> 02:20:51,949
second but give me give me one one

2401
02:20:47,209 --> 02:20:52,760
little scrimp is here to make sure that

2402
02:20:51,949 --> 02:20:55,908
that's okay

2403
02:20:52,760 --> 02:20:57,379
so with this feed-forward what we do

2404
02:20:55,908 --> 02:20:58,818
need to do is since we don't know the

2405
02:20:57,379 --> 02:21:00,739
sizes of these yet

2406
02:20:58,818 --> 02:21:03,738
before we load them in handmade hero we

2407
02:21:00,738 --> 02:21:05,628
always do but we don't know the sizes of

2408
02:21:03,738 --> 02:21:09,288
these before we load them inside this

2409
02:21:05,629 --> 02:21:11,359
app what we need to do is this won't be

2410
02:21:09,289 --> 02:21:13,369
able to be feed-forward in that sense it

2411
02:21:11,359 --> 02:21:16,189
will still have to rewrite just those

2412
02:21:13,369 --> 02:21:18,168
pieces of it right so we would still

2413
02:21:16,189 --> 02:21:24,229
have to do it this way which I don't

2414
02:21:18,168 --> 02:21:25,639
like I'd rather do it where we can just

2415
02:21:24,228 --> 02:21:28,728
do a fee for it but the nice part about

2416
02:21:25,639 --> 02:21:30,799
that is well it's feed-forward still to

2417
02:21:28,728 --> 02:21:33,068
a certain degree in that although this

2418
02:21:30,799 --> 02:21:35,778
has to fill in the width and the height

2419
02:21:33,068 --> 02:21:40,128
it doesn't have to fill in the handle

2420
02:21:35,779 --> 02:21:41,930
the handles always correct right so that

2421
02:21:40,129 --> 02:21:44,300
means the multi-threaded part it's still

2422
02:21:41,930 --> 02:21:46,699
better than it was even though it's not

2423
02:21:44,299 --> 02:21:48,498
as good as it is inside the actual hand

2424
02:21:46,699 --> 02:21:50,949
material code base where we always know

2425
02:21:48,498 --> 02:21:56,378
the size of something before we load it

2426
02:21:50,949 --> 02:21:56,379
that make sense so anyway

2427
02:22:00,101 --> 02:22:09,351
that means we still do have to do this

2428
02:22:02,479 --> 02:22:13,159
here but that's okay because really the

2429
02:22:09,351 --> 02:22:17,780
only thing we're doing here is is saying

2430
02:22:13,159 --> 02:22:22,399
that the texture handle with well and I

2431
02:22:17,780 --> 02:22:24,801
could do it this way I'm gonna do a

2432
02:22:22,399 --> 02:22:32,600
couple things here I also want to do

2433
02:22:24,800 --> 02:22:36,501
like I'm gonna call us a texture

2434
02:22:32,601 --> 02:22:42,230
reference for now maybe or refer to

2435
02:22:36,501 --> 02:22:44,511
texture something like that um so I'm

2436
02:22:42,229 --> 02:22:49,100
gonna actually when we call this I'm

2437
02:22:44,511 --> 02:22:51,649
gonna rewrite this here I'm gonna say

2438
02:22:49,101 --> 02:22:56,301
refer to texture I want the texture

2439
02:22:51,649 --> 02:22:58,460
handle index and I want the width and

2440
02:22:56,300 --> 02:23:03,560
height baked in there now now that I

2441
02:22:58,460 --> 02:23:05,840
knew what they actually are like so and

2442
02:23:03,560 --> 02:23:08,479
then I'm gonna use that and that's the

2443
02:23:05,841 --> 02:23:10,461
entirety of it now everywhere that was

2444
02:23:08,479 --> 02:23:15,439
clung texture handle has to actually be

2445
02:23:10,460 --> 02:23:17,960
like refer to texture and these can kind

2446
02:23:15,440 --> 02:23:19,370
of do this I I maybe will make it so you

2447
02:23:17,960 --> 02:23:20,630
don't have to pass in a width and a

2448
02:23:19,370 --> 02:23:23,841
height if you don't know what the width

2449
02:23:20,630 --> 02:23:28,399
and the height are yet so you can if you

2450
02:23:23,841 --> 02:23:32,291
want to specify that but I'm gonna hold

2451
02:23:28,399 --> 02:23:32,290
off on that just a little bit longer

2452
02:23:36,530 --> 02:23:43,970
um oh you know what no no no no no I'm

2453
02:23:41,670 --> 02:23:45,810
doing this totally wrong

2454
02:23:43,969 --> 02:23:48,840
this is way better

2455
02:23:45,810 --> 02:23:50,069
API wise let's do it this way again this

2456
02:23:48,840 --> 02:23:56,870
is how we kind of wanted to do it

2457
02:23:50,069 --> 02:23:59,640
originally right just place this in here

2458
02:23:56,870 --> 02:24:09,170
and then what I'm gonna do is say okay

2459
02:23:59,640 --> 02:24:12,600
grass texture is one two three four five

2460
02:24:09,170 --> 02:24:15,299
get rid of all of those and then the

2461
02:24:12,601 --> 02:24:17,579
load bitmap call is actually one that

2462
02:24:15,299 --> 02:24:22,049
refer returns a renderer texture just

2463
02:24:17,579 --> 02:24:24,090
like we wanted it to originally and then

2464
02:24:22,049 --> 02:24:29,090
what you do here this is just like the

2465
02:24:24,090 --> 02:24:29,090
texture index right

2466
02:24:39,109 --> 02:24:46,710
that seems much better because now what

2467
02:24:42,329 --> 02:24:52,770
we can do is say alright the renderer

2468
02:24:46,709 --> 02:24:55,079
texture texture equals refer to texture

2469
02:24:52,770 --> 02:24:57,300
and we know the texture index because

2470
02:24:55,079 --> 02:25:02,609
it's been passed to us and then we can

2471
02:24:57,299 --> 02:25:07,139
just say that that is what we are

2472
02:25:02,609 --> 02:25:07,738
returning much nicer much much much much

2473
02:25:07,139 --> 02:25:11,068
nicer

2474
02:25:07,738 --> 02:25:12,139
that's definitely much better than it

2475
02:25:11,068 --> 02:25:17,939
was okay

2476
02:25:12,139 --> 02:25:20,219
conversion from s 32 that's probably

2477
02:25:17,939 --> 02:25:23,609
true and in fact these probably want to

2478
02:25:20,219 --> 02:25:41,639
all be done sort of like this where we

2479
02:25:23,609 --> 02:25:42,960
can sort of assert them in this way we

2480
02:25:41,639 --> 02:25:45,930
can just test to make sure we haven't

2481
02:25:42,959 --> 02:25:47,309
lost any important bits I no one should

2482
02:25:45,930 --> 02:25:48,479
ever be passing us anything that figure

2483
02:25:47,309 --> 02:25:50,039
to begin with and we'll have other

2484
02:25:48,478 --> 02:25:56,039
things you want to check anyway but it

2485
02:25:50,040 --> 02:25:58,229
just nothing all right um so now when we

2486
02:25:56,040 --> 02:26:00,870
do that bitmap texture handle and we

2487
02:25:58,228 --> 02:26:03,209
actually assign a new one to it we want

2488
02:26:00,870 --> 02:26:06,390
to assign the bitmap width and height at

2489
02:26:03,209 --> 02:26:12,059
that time as well so when we actually do

2490
02:26:06,389 --> 02:26:14,549
a texture handle call like this in this

2491
02:26:12,059 --> 02:26:17,778
case we want to pass that width and

2492
02:26:14,549 --> 02:26:22,108
height in so we want to do it like this

2493
02:26:17,779 --> 02:26:26,930
right where we know exactly what we're

2494
02:26:22,109 --> 02:26:29,159
doing here like so

2495
02:26:26,930 --> 02:26:32,510
and like I said I'm kind of I don't know

2496
02:26:29,159 --> 02:26:32,510
what the name of this should be but like

2497
02:26:36,290 --> 02:26:45,569
it's something like that so that's

2498
02:26:42,329 --> 02:26:47,639
everything I wanted to do there and now

2499
02:26:45,568 --> 02:26:49,350
when we run it we should hopefully if I

2500
02:26:47,639 --> 02:26:51,448
didn't screw anything up

2501
02:26:49,350 --> 02:26:53,100
get exactly the same thing as we did

2502
02:26:51,449 --> 02:26:56,670
before so that should look like exactly

2503
02:26:53,100 --> 02:27:00,149
like it did and this should look exactly

2504
02:26:56,670 --> 02:27:02,908
like it did right but now that we have

2505
02:27:00,148 --> 02:27:04,289
bundled with the texture what section of

2506
02:27:02,908 --> 02:27:06,270
the texture rewind which by the way

2507
02:27:04,290 --> 02:27:09,149
would would have worked for texture

2508
02:27:06,270 --> 02:27:11,850
atlases too if you wanted to you just

2509
02:27:09,148 --> 02:27:14,760
have to use an offset in there instead

2510
02:27:11,850 --> 02:27:17,189
of an index then what I can do is just

2511
02:27:14,760 --> 02:27:21,510
say look when we go to actually push out

2512
02:27:17,189 --> 02:27:24,600
the quad just scale the UVs that you

2513
02:27:21,510 --> 02:27:26,130
were gonna use scale those down to use

2514
02:27:24,600 --> 02:27:32,520
the width and height that we've placed

2515
02:27:26,129 --> 02:27:36,329
in here for you so here's all our UVs

2516
02:27:32,520 --> 02:27:40,649
I just need to know that you know in

2517
02:27:36,329 --> 02:27:46,079
width and in height value so whatever

2518
02:27:40,648 --> 02:27:48,539
that UV was that UV is 0 to 1 based on a

2519
02:27:46,079 --> 02:27:52,318
sort of an understanding of how big the

2520
02:27:48,540 --> 02:27:54,810
textures were but in our case we have we

2521
02:27:52,318 --> 02:27:58,289
know that we want to base this on a

2522
02:27:54,809 --> 02:28:00,109
texture size whatever these are this is

2523
02:27:58,290 --> 02:28:02,880
something that we need to get

2524
02:28:00,109 --> 02:28:04,318
information about like I said later

2525
02:28:02,879 --> 02:28:06,420
needs to be sort of passed into the

2526
02:28:04,318 --> 02:28:09,269
render but what I can do is just say

2527
02:28:06,420 --> 02:28:11,908
look we know what our inverse is like

2528
02:28:09,270 --> 02:28:17,609
our inverse U and inverse V multipliers

2529
02:28:11,908 --> 02:28:21,329
are so I can just take the texture width

2530
02:28:17,609 --> 02:28:23,908
and the texture height figure out what

2531
02:28:21,329 --> 02:28:28,318
percentage those are and now all of my

2532
02:28:23,908 --> 02:28:32,000
UV scale just works right I can just say

2533
02:28:28,318 --> 02:28:32,000
in fact I can just make this a v2

2534
02:28:40,171 --> 02:28:47,229
okay once I have that all of my UVs can

2535
02:28:44,140 --> 02:29:00,931
now be transformed directly so I can do

2536
02:28:47,229 --> 02:29:05,591
this like so and now I know exactly

2537
02:29:00,931 --> 02:29:08,560
that's supposed to be height and now I

2538
02:29:05,591 --> 02:29:11,050
know exactly what region of this larger

2539
02:29:08,560 --> 02:29:14,319
texture right image I'm actually trying

2540
02:29:11,050 --> 02:29:16,210
to fill or actually trying to use so now

2541
02:29:14,319 --> 02:29:22,601
you see everything gets back up to the

2542
02:29:16,210 --> 02:29:25,270
correct size that it was and similarly

2543
02:29:22,601 --> 02:29:27,041
if I come in here to to handmade Hiro

2544
02:29:25,271 --> 02:29:30,281
everything's right because now we're

2545
02:29:27,040 --> 02:29:32,411
using the right size again for our UVs

2546
02:29:30,281 --> 02:29:37,480
to pick out the places in the texture

2547
02:29:32,411 --> 02:29:40,360
array we actually wanted makes sense um

2548
02:29:37,479 --> 02:29:43,149
so the only thing we have left to do is

2549
02:29:40,360 --> 02:29:45,400
make that not be a magic constant at the

2550
02:29:43,149 --> 02:29:47,800
moment I'm gonna leave it a magic

2551
02:29:45,399 --> 02:29:49,450
constant just not a magic constant

2552
02:29:47,800 --> 02:29:57,001
that's hidden in the code so you'll

2553
02:29:49,450 --> 02:29:57,000
never find it again I'm gonna say

2554
02:30:06,700 --> 02:30:11,569
this is gonna be called texture or a dim

2555
02:30:09,350 --> 02:30:16,180
and then what I'm gonna do is say

2556
02:30:11,568 --> 02:30:16,180
alright that just gets stuck in here

2557
02:30:17,020 --> 02:30:27,350
like so and that way I will know that

2558
02:30:24,489 --> 02:30:30,439
the other time that I used it here and

2559
02:30:27,350 --> 02:30:32,329
said we should pass it in I can stop

2560
02:30:30,439 --> 02:30:36,200
saying that now and just say this

2561
02:30:32,329 --> 02:30:39,379
instead that way when we go to update

2562
02:30:36,200 --> 02:30:43,220
that we will instantly be able to search

2563
02:30:39,379 --> 02:30:48,469
for everywhere that that occurred and I

2564
02:30:43,219 --> 02:30:50,108
think with that we're now doing texture

2565
02:30:48,469 --> 02:30:56,629
arrays happy birthday

2566
02:30:50,109 --> 02:30:58,100
right our game still looks like poop

2567
02:30:56,629 --> 02:31:00,170
right now because we haven't put any

2568
02:30:58,100 --> 02:31:04,000
bitmaps in but man we're so ready to do

2569
02:31:00,170 --> 02:31:07,159
that because now we're sending down

2570
02:31:04,000 --> 02:31:13,719
we're sending down bulk sending down

2571
02:31:07,159 --> 02:31:19,818
stuff in bulk so that's kind of cool and

2572
02:31:13,719 --> 02:31:23,239
and our our app over here is running

2573
02:31:19,818 --> 02:31:26,590
quite nice so I'm going to go ahead and

2574
02:31:23,239 --> 02:31:26,590
go to the Q&amp;A and wrap things up

2575
02:31:47,280 --> 02:31:52,260
let's see are there any benefits to

2576
02:31:50,280 --> 02:31:53,970
using pixel buffer objects for async

2577
02:31:52,260 --> 02:31:55,469
texture transfers these days I've heard

2578
02:31:53,969 --> 02:31:57,569
that drivers copy texture data into

2579
02:31:55,469 --> 02:31:59,129
their internal memory anyway so the call

2580
02:31:57,569 --> 02:32:07,110
returns immediately in behaves very

2581
02:31:59,129 --> 02:32:11,369
synchronous um so half and a half hold

2582
02:32:07,110 --> 02:32:14,970
on one second on that and let me explain

2583
02:32:11,370 --> 02:32:17,930
one thing so you pixel buffer objects I

2584
02:32:14,969 --> 02:32:21,109
don't think you ever want to use anymore

2585
02:32:17,930 --> 02:32:24,180
because you can just use buffers now

2586
02:32:21,110 --> 02:32:26,100
generalize buffers for these sorts of

2587
02:32:24,180 --> 02:32:27,540
transfers and that's gonna be the better

2588
02:32:26,100 --> 02:32:32,040
way to do it but I just want to address

2589
02:32:27,540 --> 02:32:34,680
one thing so you are correct in that the

2590
02:32:32,040 --> 02:32:36,870
graphics card when you call a texture

2591
02:32:34,680 --> 02:32:42,569
transfer if you're like other transfers

2592
02:32:36,870 --> 02:32:45,560
this block right when you call that it

2593
02:32:42,569 --> 02:32:47,819
will first copy the block into its

2594
02:32:45,559 --> 02:32:49,978
aperture for transferring the graphics

2595
02:32:47,819 --> 02:32:53,279
card which is memory that has been

2596
02:32:49,978 --> 02:32:54,688
locked so it's not virtual memory it's

2597
02:32:53,280 --> 02:32:58,579
actually physically addressable memory

2598
02:32:54,689 --> 02:33:03,329
so the graphics card can pull it and

2599
02:32:58,579 --> 02:33:06,620
then it will kick off the transfer so it

2600
02:33:03,329 --> 02:33:08,670
is true that the jeep the CPU to GPU

2601
02:33:06,620 --> 02:33:13,680
transfer will always happen

2602
02:33:08,670 --> 02:33:15,270
asynchronously in the sense that it's

2603
02:33:13,680 --> 02:33:18,780
not going to sit there and wait on the

2604
02:33:15,270 --> 02:33:21,239
call now it's not asynchronous per se

2605
02:33:18,780 --> 02:33:24,630
because as soon as you use that texture

2606
02:33:21,239 --> 02:33:26,819
it's gonna fence I believe so I think

2607
02:33:24,629 --> 02:33:31,679
there's some blocking that happens there

2608
02:33:26,819 --> 02:33:33,689
but putting that side that said that

2609
02:33:31,680 --> 02:33:39,239
doesn't mean there's nothing to be saved

2610
02:33:33,689 --> 02:33:40,860
by using a GPU side allocated buffer I'm

2611
02:33:39,239 --> 02:33:45,719
sorry a driver's side allocated buffer

2612
02:33:40,860 --> 02:33:48,810
why the reason is because that copy from

2613
02:33:45,719 --> 02:33:50,309
your memory to the Jeep to the aperture

2614
02:33:48,809 --> 02:33:53,398
that can be used for the transfer GPU

2615
02:33:50,309 --> 02:33:55,969
doesn't have to happen if you allocate a

2616
02:33:53,398 --> 02:33:59,099
buffer primed for that kind of transfer

2617
02:33:55,969 --> 02:33:59,760
through OpenGL put the memory in there

2618
02:33:59,100 --> 02:34:03,989
to begin

2619
02:33:59,760 --> 02:34:09,329
and then let it go it may not have to do

2620
02:34:03,989 --> 02:34:10,709
the SEC that second copy so depending on

2621
02:34:09,329 --> 02:34:13,950
the circumstances you may be able to

2622
02:34:10,709 --> 02:34:17,818
save a CPU to CPU copy the CP to GPU

2623
02:34:13,950 --> 02:34:20,550
copy yes that always happens correctly

2624
02:34:17,818 --> 02:34:28,409
either way but to CPU to CPU copy you

2625
02:34:20,549 --> 02:34:30,840
may be able to get rid of Martin's was

2626
02:34:28,409 --> 02:34:32,250
saying that in core profile you still

2627
02:34:30,840 --> 02:34:33,779
have to generate all names it's only the

2628
02:34:32,250 --> 02:34:37,228
compatibility profile that lets you do

2629
02:34:33,779 --> 02:34:38,670
the push that's too bad I mean it's like

2630
02:34:37,228 --> 02:34:40,879
fine because we're not actually using it

2631
02:34:38,670 --> 02:34:40,879
but

2632
02:34:49,409 --> 02:34:54,209
what's the recommended way to deal with

2633
02:34:51,329 --> 02:34:57,799
windows doing an infinite window proc

2634
02:34:54,209 --> 02:35:00,809
loop while moving or resizing a window

2635
02:34:57,799 --> 02:35:06,109
just ignore the messages I mean take

2636
02:35:00,809 --> 02:35:06,109
them and don't actually do any work so

2637
02:35:08,600 --> 02:35:13,500
yeah I mean they're saying much less

2638
02:35:10,439 --> 02:35:15,450
active than that like I mean note we

2639
02:35:13,500 --> 02:35:17,639
don't have any problem with that

2640
02:35:15,450 --> 02:35:20,430
right here's me moving the window around

2641
02:35:17,639 --> 02:35:23,129
like happy birthday and it's still

2642
02:35:20,430 --> 02:35:25,979
animating just fine and the way we did

2643
02:35:23,129 --> 02:35:35,459
that is we just don't really process

2644
02:35:25,978 --> 02:35:37,920
paint messages we just pretend we do so

2645
02:35:35,459 --> 02:35:40,859
we say oh thanks for the paint message

2646
02:35:37,920 --> 02:35:44,219
great we finished it up it was good it's

2647
02:35:40,860 --> 02:35:46,020
really fun thank you right but we don't

2648
02:35:44,219 --> 02:35:47,760
actually do anything there and all of

2649
02:35:46,020 --> 02:35:49,560
our rendering happens in another thread

2650
02:35:47,760 --> 02:35:50,728
that's just constantly going whether

2651
02:35:49,559 --> 02:35:52,260
windows cares or not

2652
02:35:50,728 --> 02:35:54,389
so we just put our render on a different

2653
02:35:52,260 --> 02:35:55,950
thread not the window thread so the

2654
02:35:54,389 --> 02:35:58,379
window thread can lock up all day long

2655
02:35:55,950 --> 02:36:02,149
it doesn't really affect our game that's

2656
02:35:58,379 --> 02:36:02,148
just windows being windows right

2657
02:36:13,530 --> 02:36:17,070
and Martin says you probably would want

2658
02:36:15,629 --> 02:36:18,719
to replace the geotech storage duty

2659
02:36:17,069 --> 02:36:30,779
which is a text image ad because text or

2660
02:36:18,719 --> 02:36:32,899
just from up until 4.2 I'll be honest

2661
02:36:30,780 --> 02:36:37,800
I'm not sure how to do it though

2662
02:36:32,899 --> 02:36:45,539
can I just pass zero because I was gonna

2663
02:36:37,799 --> 02:36:52,649
do that originally but now that we have

2664
02:36:45,540 --> 02:36:56,130
it working I could certainly try it you

2665
02:36:52,649 --> 02:37:01,289
know text I yeah because I wanted to use

2666
02:36:56,129 --> 02:37:05,159
geo text I want to use geo text image 3d

2667
02:37:01,290 --> 02:37:14,540
in the first place but I didn't think I

2668
02:37:05,159 --> 02:37:14,539
could I thought it was mad about that

2669
02:37:19,040 --> 02:37:37,710
so this one is well let me leave this in

2670
02:37:23,850 --> 02:37:40,640
here so in here we're passing you know

2671
02:37:37,709 --> 02:37:42,929
the level is one the internal format

2672
02:37:40,639 --> 02:37:49,109
where is this which is what we're saying

2673
02:37:42,930 --> 02:38:00,770
the width height and depth is exactly as

2674
02:37:49,110 --> 02:38:00,770
it is the border is zero format and type

2675
02:38:02,059 --> 02:38:20,728
is this so this right here would be X B

2676
02:38:08,670 --> 02:38:24,860
GRA right yeah you GRA X I believe so

2677
02:38:20,728 --> 02:38:24,859
that's what we would call here I think

2678
02:38:25,489 --> 02:38:29,420
just don't know if it will work

2679
02:38:41,709 --> 02:38:44,909
[Music]

2680
02:38:51,289 --> 02:38:56,299
invalid texture format so

2681
02:39:01,069 --> 02:39:07,250
what would I have to tell it in order to

2682
02:39:04,110 --> 02:39:07,250
get it to be okay

2683
02:39:15,209 --> 02:39:21,799
I mean maybe this can just be something

2684
02:39:19,530 --> 02:39:21,800
else

2685
02:39:31,498 --> 02:39:36,809
I just don't know how to make it work is

2686
02:39:34,139 --> 02:39:38,248
the main problem like I don't know how

2687
02:39:36,809 --> 02:39:43,049
to get open jail to be happy with that

2688
02:39:38,248 --> 02:39:46,439
if you have suggestions Martin's I am

2689
02:39:43,049 --> 02:39:49,219
all ears because I'm just not sure how

2690
02:39:46,439 --> 02:39:49,220
to make it work

2691
02:40:03,479 --> 02:40:09,329
do you still multiply the offset in the

2692
02:40:06,390 --> 02:40:12,569
GL draw elements base vertex call

2693
02:40:09,329 --> 02:40:15,510
because I never do it and never had any

2694
02:40:12,569 --> 02:40:19,369
problem so I don't understand what's

2695
02:40:15,510 --> 02:40:23,159
going on twice do you still multiply the

2696
02:40:19,370 --> 02:40:24,450
offset let me just see which multiply

2697
02:40:23,159 --> 02:40:26,610
you're probably talking about there

2698
02:40:24,450 --> 02:40:29,579
while we wait for Martins to tell us the

2699
02:40:26,610 --> 02:40:38,210
answer of how he thinks Geo text image

2700
02:40:29,579 --> 02:40:38,209
could work are you talking about this

2701
02:40:44,840 --> 02:40:49,440
let me read the docs we may be passing

2702
02:40:47,399 --> 02:40:52,020
that wrong and we wouldn't know because

2703
02:40:49,440 --> 02:40:53,610
unless we really look and see it's

2704
02:40:52,021 --> 02:40:57,230
possible that we would could be wrong

2705
02:40:53,610 --> 02:40:57,230
about that and not know let's just look

2706
02:41:17,120 --> 02:41:21,360
problem here is that we're gonna have to

2707
02:41:19,290 --> 02:41:34,680
find docs that actually talk about how

2708
02:41:21,360 --> 02:41:36,860
that offset works and that's easier said

2709
02:41:34,680 --> 02:41:36,860
than done

2710
02:42:02,439 --> 02:42:09,369
uh I don't see any answers from Martin's

2711
02:42:06,039 --> 02:42:11,020
I guess I'm not sure yeah um so let me

2712
02:42:09,369 --> 02:42:14,109
go ahead and and just take a quick look

2713
02:42:11,020 --> 02:42:16,600
at that draw them on base vertex and

2714
02:42:14,109 --> 02:42:24,609
I'll look at the spec for now oops

2715
02:42:16,600 --> 02:42:27,390
didn't mean actually close that don't

2716
02:42:24,609 --> 02:42:27,390
suppose this says

2717
02:42:33,860 --> 02:42:48,239
here's speck so void start indices it

2718
02:42:45,629 --> 02:42:50,250
looks like that's the base come into the

2719
02:42:48,239 --> 02:42:51,659
commands if the resulting value is

2720
02:42:50,250 --> 02:42:53,129
larger than max to verify that type it

2721
02:42:51,659 --> 02:42:55,260
would behave specular through the

2722
02:42:53,129 --> 02:43:09,839
operation is undefined sum would be

2723
02:42:55,260 --> 02:43:12,271
negative we need to find the we need to

2724
02:43:09,840 --> 02:43:15,889
find where this would actually be talked

2725
02:43:12,271 --> 02:43:18,890
about probably in the element array

2726
02:43:15,889 --> 02:43:18,889
buffer

2727
02:43:26,319 --> 02:43:29,810
for Serenity's from the buffer object

2728
02:43:28,670 --> 02:43:31,579
whose name is bound to omen hurry before

2729
02:43:29,810 --> 02:43:33,860
using their indices parameters as

2730
02:43:31,579 --> 02:43:38,050
offsets into the buffer object in the

2731
02:43:33,860 --> 02:43:38,051
same fashion described as 2 9 6

2732
02:43:39,940 --> 02:43:43,599
[Music]

2733
02:43:44,620 --> 02:43:49,579
philosophers are a buffer binding is

2734
02:43:47,300 --> 02:43:50,720
added to the client suit ok comments to

2735
02:43:49,579 --> 02:43:53,000
specify the location sorry submission

2736
02:43:50,720 --> 02:43:54,939
for blah blah blah it's require command

2737
02:43:53,000 --> 02:43:57,409
copy its value array buffer binding

2738
02:43:54,940 --> 02:43:58,610
christening to the client state love a

2739
02:43:57,409 --> 02:44:02,000
lot we're entering commands do our

2740
02:43:58,610 --> 02:44:04,790
reason to find appears to find we're

2741
02:44:02,000 --> 02:44:06,649
dating when arrays first reply prod at

2742
02:44:04,790 --> 02:44:10,221
the pointer value of that array is used

2743
02:44:06,649 --> 02:44:12,979
to compute an offset in machine units so

2744
02:44:10,220 --> 02:44:16,779
I'm pretty sure it's time I'm it it

2745
02:44:12,979 --> 02:44:16,779
should be time to do 16 Oh

2746
02:44:19,280 --> 02:44:22,880
Martin's wants to look at the call that

2747
02:44:20,989 --> 02:44:27,470
fails you talk about this one it's this

2748
02:44:22,879 --> 02:44:34,640
one right so what happens is if we call

2749
02:44:27,470 --> 02:44:39,079
this then our sub image call fails so if

2750
02:44:34,640 --> 02:44:41,779
we call text storage 3d then our text

2751
02:44:39,079 --> 02:44:45,011
sub image 3d call succeeds if we call

2752
02:44:41,780 --> 02:44:51,500
text image 3d write select for example

2753
02:44:45,011 --> 02:44:55,540
if I call tech storage 3d oops if I call

2754
02:44:51,500 --> 02:45:02,690
text storage 3d then what happens is

2755
02:44:55,540 --> 02:45:09,440
everything works just fine right if I

2756
02:45:02,690 --> 02:45:11,120
call text image 3d like this and it

2757
02:45:09,440 --> 02:45:13,540
doesn't seem to matter what I'm passing

2758
02:45:11,120 --> 02:45:16,900
here I tried passing different things

2759
02:45:13,540 --> 02:45:21,650
then what happens is I get a crash on

2760
02:45:16,899 --> 02:45:24,890
the actual on this call so when I

2761
02:45:21,649 --> 02:45:29,590
attempt to actually specify a slice it

2762
02:45:24,890 --> 02:45:29,590
doesn't like it and it says

2763
02:45:32,050 --> 02:45:41,091
that the type and format combination are

2764
02:45:35,091 --> 02:45:47,239
not valid uh but that's on the other

2765
02:45:41,091 --> 02:45:49,761
call right so I'm not sure you know I'm

2766
02:45:47,239 --> 02:45:52,220
guessing that just these two things have

2767
02:45:49,761 --> 02:45:55,001
to be set differently but I'm not sure

2768
02:45:52,220 --> 02:45:57,501
exactly what they need to be set to

2769
02:45:55,001 --> 02:46:00,649
originally what we tried is having them

2770
02:45:57,501 --> 02:46:07,940
set to the same thing so where we

2771
02:46:00,649 --> 02:46:11,149
actually specify right here we tried

2772
02:46:07,940 --> 02:46:22,851
just saying look it's gonna be be GRE

2773
02:46:11,149 --> 02:46:27,979
text that's the format and yeah it just

2774
02:46:22,851 --> 02:46:30,711
it just doesn't like it so I don't know

2775
02:46:27,979 --> 02:46:35,800
if it just doesn't like I mean maybe

2776
02:46:30,710 --> 02:46:35,800
this just has to be something else but

2777
02:46:44,770 --> 02:46:50,260
I'm not really sure what makes that goro

2778
02:46:47,709 --> 02:46:53,649
Gnaeus because this is just the

2779
02:46:50,260 --> 02:47:00,850
submission this is the sprite this is

2780
02:46:53,649 --> 02:47:03,909
the format right here right so I'm not

2781
02:47:00,850 --> 02:47:06,130
sure why I'm even having to specify that

2782
02:47:03,909 --> 02:47:21,309
because I don't need it to so it may be

2783
02:47:06,129 --> 02:47:22,629
that what I need to do is tell it yeah

2784
02:47:21,309 --> 02:47:25,199
I'm not sure maybe I just need to tell

2785
02:47:22,629 --> 02:47:25,199
it something different

2786
02:47:37,620 --> 02:47:41,880
it needs to be Jill rgba or whatever

2787
02:47:40,409 --> 02:47:44,250
value does not matter because it is for

2788
02:47:41,879 --> 02:47:46,589
the last argument pixel data which is no

2789
02:47:44,250 --> 02:47:48,780
yeah but that's not true right like I

2790
02:47:46,590 --> 02:47:52,829
can set it to RGB and it doesn't have

2791
02:47:48,780 --> 02:47:54,630
any it doesn't work right now maybe if

2792
02:47:52,829 --> 02:47:57,510
they're both set to RGB ba which would

2793
02:47:54,629 --> 02:48:04,529
give us incorrect results but maybe it

2794
02:47:57,510 --> 02:48:10,409
would wouldn't alt the driver no that

2795
02:48:04,530 --> 02:48:12,540
doesn't work either right so so that's

2796
02:48:10,409 --> 02:48:14,549
why we were calling the storage function

2797
02:48:12,540 --> 02:48:21,120
it's because that was actually what

2798
02:48:14,549 --> 02:48:22,679
works and I would be happy not to call

2799
02:48:21,120 --> 02:48:31,320
it but I don't know what else we would

2800
02:48:22,680 --> 02:48:36,060
do yeah correct you can pass anything

2801
02:48:31,319 --> 02:48:38,310
you want here it doesn't care it's it's

2802
02:48:36,060 --> 02:48:40,770
this call that fails and I don't know

2803
02:48:38,310 --> 02:48:43,319
what I could possibly pass that would

2804
02:48:40,771 --> 02:48:50,720
get this to succeed because we've passed

2805
02:48:43,319 --> 02:48:50,719
both of them and it doesn't work right

2806
02:48:52,190 --> 02:48:59,540
makes sense so I don't know any

2807
02:48:55,280 --> 02:48:59,540
combination of these two that would work

2808
02:49:03,200 --> 02:49:14,370
um I mean obviously I can pass the same

2809
02:49:09,271 --> 02:49:18,900
thing to both of them like so where

2810
02:49:14,370 --> 02:49:22,200
they're both getting RGB a so no txt in

2811
02:49:18,899 --> 02:49:28,069
this case and it does not care it's the

2812
02:49:22,200 --> 02:49:33,720
same problem right so we didn't that I

2813
02:49:28,069 --> 02:49:36,869
would have assumed and would would have

2814
02:49:33,719 --> 02:49:38,489
is to use the term lightly here I would

2815
02:49:36,870 --> 02:49:41,220
have assumed that this would work only

2816
02:49:38,489 --> 02:49:42,869
in the sense that the immediate the

2817
02:49:41,219 --> 02:49:46,049
reason I immediately check for 3d is I

2818
02:49:42,870 --> 02:49:51,690
remember having this problem in my own

2819
02:49:46,049 --> 02:49:57,020
I think GL Tech's image 3d is the

2820
02:49:51,690 --> 02:49:57,021
failing call I don't think it is

2821
02:50:05,829 --> 02:50:14,530
but we can double-check so I mean it

2822
02:50:12,909 --> 02:50:17,139
could be that it's just delaying the

2823
02:50:14,530 --> 02:50:27,460
error report but it's definitely not

2824
02:50:17,139 --> 02:50:30,729
where it fails so I'm probably gonna

2825
02:50:27,459 --> 02:50:34,899
call it for now we can figure out why

2826
02:50:30,729 --> 02:50:36,369
that's happening some other time but

2827
02:50:34,899 --> 02:50:39,069
Martin's I don't think what you're

2828
02:50:36,370 --> 02:50:42,370
suggesting actually works right it's you

2829
02:50:39,069 --> 02:50:45,069
you have to do something else not sure

2830
02:50:42,370 --> 02:50:48,160
what but something if you don't want to

2831
02:50:45,069 --> 02:50:50,560
call tech storage maybe you got it

2832
02:50:48,159 --> 02:50:56,079
called GL text image 3d in a different

2833
02:50:50,560 --> 02:50:57,850
way and just to be clear this doesn't

2834
02:50:56,079 --> 02:51:03,879
surprise me I had the same problem in my

2835
02:50:57,850 --> 02:51:05,680
code base in the in the 1935 code base I

2836
02:51:03,879 --> 02:51:07,299
remember specifically having this

2837
02:51:05,680 --> 02:51:10,771
problem I should go look to see if I

2838
02:51:07,299 --> 02:51:14,259
ever solved it without a storage call I

2839
02:51:10,771 --> 02:51:17,380
might have and just forgot what the

2840
02:51:14,260 --> 02:51:22,630
answer was but I remember this specific

2841
02:51:17,379 --> 02:51:31,589
problem where it's really obtuse what

2842
02:51:22,629 --> 02:51:39,420
has to happen here and I don't remember

2843
02:51:31,590 --> 02:51:39,420
what the answer was if there was one

2844
02:51:42,469 --> 02:52:22,859
yeah all right I'm gonna wrap it up we

2845
02:51:51,479 --> 02:52:26,129
can leave this in and just say so we'll

2846
02:52:22,860 --> 02:52:28,200
give that shot separately and just see

2847
02:52:26,129 --> 02:52:30,750
you know if we can figure out what's

2848
02:52:28,200 --> 02:52:37,070
going on there like why it's why it's

2849
02:52:30,750 --> 02:52:37,069
busted all right

2850
02:52:42,350 --> 02:52:46,500
all right thank you for joining me for

2851
02:52:45,149 --> 02:52:48,449
an episode of hand made here oh it's a

2852
02:52:46,500 --> 02:52:49,590
pleasure coding with you as always if

2853
02:52:48,450 --> 02:52:51,420
you would like to follow along with

2854
02:52:49,590 --> 02:52:54,540
series at home you can always peer to

2855
02:52:51,420 --> 02:52:56,219
the game on handmade he rode up org you

2856
02:52:54,540 --> 02:52:58,290
don't even need the slash game you can

2857
02:52:56,219 --> 02:52:59,819
just type it like that and it comes with

2858
02:52:58,290 --> 02:53:02,550
a source code so if you want to play

2859
02:52:59,819 --> 02:53:05,219
around at home maybe you want to figure

2860
02:53:02,549 --> 02:53:08,449
out how you actually have to call GL

2861
02:53:05,219 --> 02:53:10,949
techs image 3d in the magical set of

2862
02:53:08,450 --> 02:53:13,800
fantastical OpenGL parameters most of

2863
02:53:10,950 --> 02:53:18,060
which are very poorly specified which

2864
02:53:13,799 --> 02:53:19,129
one will magically work and I know what

2865
02:53:18,059 --> 02:53:22,379
you're thinking

2866
02:53:19,129 --> 02:53:24,149
Casey invalid texture format is a

2867
02:53:22,379 --> 02:53:25,679
fantastic error message that tells you

2868
02:53:24,149 --> 02:53:27,059
everything you might ever want to know

2869
02:53:25,680 --> 02:53:31,520
about why it failed and you're right

2870
02:53:27,059 --> 02:53:31,519
we're just kind of dense for not knowing

2871
02:53:31,790 --> 02:53:37,620
we're gonna be on break for a little bit

2872
02:53:34,219 --> 02:53:41,489
so I'll be back in a couple weeks time I

2873
02:53:37,620 --> 02:53:44,160
will be speaking in South Korea in two

2874
02:53:41,489 --> 02:53:49,289
weeks at the Busan indie connect

2875
02:53:44,159 --> 02:53:53,190
conference in in Busan and so if you

2876
02:53:49,290 --> 02:53:57,120
happen to be in the asia-pacific region

2877
02:53:53,190 --> 02:54:00,360
and just fancy a trip to Busan or if

2878
02:53:57,120 --> 02:54:01,590
maybe you live in Busan already check

2879
02:54:00,360 --> 02:54:08,489
out that conference

2880
02:54:01,590 --> 02:54:11,460
it's busan indie connect and also not

2881
02:54:08,489 --> 02:54:12,809
just me but chris hacker will be

2882
02:54:11,459 --> 02:54:14,219
speaking there as well some of you may

2883
02:54:12,809 --> 02:54:16,139
know him

2884
02:54:14,219 --> 02:54:17,609
I think we've he's been mentioned before

2885
02:54:16,139 --> 02:54:26,209
on the stream

2886
02:54:17,610 --> 02:54:26,210
he's oh my god

2887
02:54:28,280 --> 02:54:38,280
okay websites that play music by default

2888
02:54:31,290 --> 02:54:41,190
don't really care for them if you want

2889
02:54:38,280 --> 02:54:44,970
to turn your sound off and then go look

2890
02:54:41,190 --> 02:54:46,440
at their website you can I've shown you

2891
02:54:44,969 --> 02:54:50,909
how to get there I will never be going

2892
02:54:46,440 --> 02:54:52,680
there again okay anyway Chris Tucker

2893
02:54:50,909 --> 02:54:54,149
will also be sitting there he's the what

2894
02:54:52,680 --> 02:54:55,409
I was trying to say before I got blasted

2895
02:54:54,149 --> 02:55:00,560
with music

2896
02:54:55,409 --> 02:55:04,229
is he's the guy who does pie party and

2897
02:55:00,560 --> 02:55:06,299
he's speaking there as well there's also

2898
02:55:04,229 --> 02:55:07,709
a couple of speakers who I don't think

2899
02:55:06,299 --> 02:55:08,819
there are people who I've ever purchased

2900
02:55:07,709 --> 02:55:09,839
personally mentioned on the stream or

2901
02:55:08,819 --> 02:55:12,690
anything but they obviously have other

2902
02:55:09,840 --> 02:55:14,130
speakers speaking there so if you want

2903
02:55:12,690 --> 02:55:15,690
to see me speak at the conference or a

2904
02:55:14,129 --> 02:55:17,310
baby wants to see Chris speak at the

2905
02:55:15,690 --> 02:55:18,960
conference or maybe one of the other if

2906
02:55:17,310 --> 02:55:20,190
you can turn off your sound and go look

2907
02:55:18,959 --> 02:55:22,369
at the other speakers that were speaking

2908
02:55:20,190 --> 02:55:27,030
might be interested to you

2909
02:55:22,370 --> 02:55:32,160
check out that conference it's coming up

2910
02:55:27,030 --> 02:55:34,530
in two weeks okay until then if you

2911
02:55:32,159 --> 02:55:35,700
would like to watch old episodes or

2912
02:55:34,530 --> 02:55:38,460
hand-made here you can always go to the

2913
02:55:35,700 --> 02:55:39,780
watch page it's got old episodes on

2914
02:55:38,459 --> 02:55:42,390
there and it really easy to search

2915
02:55:39,780 --> 02:55:44,280
format so you can jump around it also

2916
02:55:42,390 --> 02:55:45,989
has a schedule so as soon as I post

2917
02:55:44,280 --> 02:55:48,470
schedule for when we will be returning

2918
02:55:45,989 --> 02:55:51,271
that's where it'll be Wow

2919
02:55:48,469 --> 02:55:54,000
we also have a fun page if you want to

2920
02:55:51,271 --> 02:55:55,950
support projects related to the series

2921
02:55:54,000 --> 02:55:58,709
like like the episode guide you'll find

2922
02:55:55,950 --> 02:56:02,190
on the watch page that other folks do

2923
02:55:58,709 --> 02:56:04,949
not me check that out that fund it's a

2924
02:56:02,190 --> 02:56:06,750
cool place to contribute that's about it

2925
02:56:04,950 --> 02:56:08,130
if you want to see what else we're up to

2926
02:56:06,750 --> 02:56:09,659
at Molly rocket you can always click on

2927
02:56:08,129 --> 02:56:11,909
the handmade hero head it'll jump you

2928
02:56:09,659 --> 02:56:13,649
right to our other sites of the other

2929
02:56:11,909 --> 02:56:14,579
stuff that we're working on or you can

2930
02:56:13,649 --> 02:56:15,840
always sign up for our mailing address

2931
02:56:14,579 --> 02:56:18,601
right down at the bottom it's pretty

2932
02:56:15,840 --> 02:56:20,250
easy to do that's it for the next few

2933
02:56:18,601 --> 02:56:23,300
weeks I'll be back here once my voice

2934
02:56:20,250 --> 02:56:28,260
recovers and after the Busan conference

2935
02:56:23,299 --> 02:56:30,899
- yeah I guess we did texture rays all

2936
02:56:28,260 --> 02:56:34,229
right so I'll be back to do a few more

2937
02:56:30,899 --> 02:56:36,420
things on on the renderer and sort of

2938
02:56:34,229 --> 02:56:39,899
harm harmonised the asset system with

2939
02:56:36,420 --> 02:56:41,760
the the renderer and and then we should

2940
02:56:39,899 --> 02:56:45,420
be good to go we could start decorating

2941
02:56:41,760 --> 02:56:47,810
our world with wall textures and little

2942
02:56:45,420 --> 02:56:50,790
other characters and stuff like that

2943
02:56:47,810 --> 02:56:52,409
alright I hope everyone has a good break

2944
02:56:50,790 --> 02:56:54,920
and I'll see you when we return ticket

2945
02:56:52,409 --> 02:56:54,920
use everybody

