1
00:00:00,920 --> 00:00:05,400
hello everyone and welcome to hand made

2
00:00:03,928 --> 00:00:09,959
here oh sure we code a complete game

3
00:00:05,400 --> 00:00:12,710
live on stream I apologize I was sick

4
00:00:09,960 --> 00:00:18,210
this week so my voice is a little

5
00:00:12,710 --> 00:00:21,240
gravelly today and but I'm feeling okay

6
00:00:18,210 --> 00:00:24,240
I'm not feeling too bad so I'm assuming

7
00:00:21,239 --> 00:00:25,768
that will be okay here we'll see how it

8
00:00:24,239 --> 00:00:27,868
goes we don't have anything to

9
00:00:25,768 --> 00:00:33,869
ridiculous plan for today so I'm

10
00:00:27,868 --> 00:00:37,379
assuming it'll be fine um what we

11
00:00:33,869 --> 00:00:41,218
stopped on last week was actually kind

12
00:00:37,380 --> 00:00:42,600
of promising I had kind of anticipated

13
00:00:41,219 --> 00:00:44,820
things being a little more difficult

14
00:00:42,600 --> 00:00:47,160
than they were which is always a

15
00:00:44,820 --> 00:00:49,020
surprise in programming because you know

16
00:00:47,159 --> 00:00:51,479
a lot of times in programming where you

17
00:00:49,020 --> 00:00:53,100
were more focused on the backwards

18
00:00:51,479 --> 00:00:55,259
surprise where you're like I thought

19
00:00:53,100 --> 00:00:56,850
this was gonna be easy or I thought this

20
00:00:55,259 --> 00:00:59,219
wouldn't take that long but then it did

21
00:00:56,850 --> 00:01:02,939
right because of unforeseen complexities

22
00:00:59,219 --> 00:01:05,308
that you know you didn't anticipate and

23
00:01:02,939 --> 00:01:06,929
so you know now you're you're having to

24
00:01:05,308 --> 00:01:09,478
do more work or spend more time on

25
00:01:06,930 --> 00:01:11,010
something than you thought but sometimes

26
00:01:09,478 --> 00:01:13,650
you get the opposite and it turned out

27
00:01:11,010 --> 00:01:16,100
we ended up getting the opposite here we

28
00:01:13,650 --> 00:01:18,299
were playing around with our sprites and

29
00:01:16,099 --> 00:01:21,000
saying I saying okay I got it for how to

30
00:01:18,299 --> 00:01:24,500
do the sorting now on these guys but it

31
00:01:21,000 --> 00:01:28,109
turned out actually that editing the

32
00:01:24,500 --> 00:01:31,379
y-values just as a direct slide

33
00:01:28,109 --> 00:01:34,379
proportional to the alignment as we did

34
00:01:31,379 --> 00:01:36,658
last Sunday turned out to give us

35
00:01:34,379 --> 00:01:40,109
basically perfect results like it's

36
00:01:36,659 --> 00:01:41,909
exactly what I wanted and I haven't seen

37
00:01:40,109 --> 00:01:45,629
any problems with it like it does

38
00:01:41,909 --> 00:01:49,259
exactly what I want pretty much all the

39
00:01:45,629 --> 00:01:55,319
time and so all we really needed to do

40
00:01:49,259 --> 00:01:56,930
today before saying all right great is

41
00:01:55,319 --> 00:02:00,449
we just have to do a little bit more

42
00:01:56,930 --> 00:02:01,170
formalization of that to make sure that

43
00:02:00,450 --> 00:02:03,990
we've got it

44
00:02:01,170 --> 00:02:06,240
where we want it now just to explain

45
00:02:03,989 --> 00:02:08,368
there's two parts of the formalization

46
00:02:06,239 --> 00:02:10,679
that need to happen

47
00:02:08,368 --> 00:02:13,379
and you know they're they're both a

48
00:02:10,679 --> 00:02:18,659
little bit different so if I

49
00:02:13,379 --> 00:02:20,759
like let me let me try to create a

50
00:02:18,659 --> 00:02:24,090
circumstance that's a little bit clearer

51
00:02:20,759 --> 00:02:26,069
here so you know let's suppose we've got

52
00:02:24,090 --> 00:02:28,020
the hero on here well you can already

53
00:02:26,069 --> 00:02:30,930
see right so we haven't set the

54
00:02:28,020 --> 00:02:32,580
alignment points for the hero and now we

55
00:02:30,930 --> 00:02:35,930
made this nice debug camera by the way I

56
00:02:32,580 --> 00:02:38,370
know for the folks who haven't been

57
00:02:35,930 --> 00:02:40,469
watching the past couple episodes you

58
00:02:38,370 --> 00:02:43,770
may have missed it our debug camera is

59
00:02:40,469 --> 00:02:45,960
pretty great now so yeah we were just in

60
00:02:43,770 --> 00:02:46,920
the middle of doing that stuff so we

61
00:02:45,960 --> 00:02:48,570
probably should finished up some of that

62
00:02:46,919 --> 00:02:51,329
do it looks like we've got a weirdness

63
00:02:48,569 --> 00:02:53,459
there though as I'm saying it's great

64
00:02:51,330 --> 00:02:57,719
I'm noticing that we were using the

65
00:02:53,460 --> 00:02:59,670
wrong axes there for sliding oh yeah we

66
00:02:57,719 --> 00:03:03,990
are we're not using the debug axes

67
00:02:59,669 --> 00:03:06,539
actually we're using the game axes for

68
00:03:03,990 --> 00:03:07,680
sliding we should change that in fact

69
00:03:06,539 --> 00:03:09,299
let me just change that right now before

70
00:03:07,680 --> 00:03:10,800
I even say what I was gonna say did you

71
00:03:09,300 --> 00:03:14,300
notice that I don't know if anyone

72
00:03:10,800 --> 00:03:17,100
noticed that but me probably if no-one

73
00:03:14,300 --> 00:03:20,520
played around with with the debug camera

74
00:03:17,099 --> 00:03:21,750
they wouldn't noticed it but anyway we

75
00:03:20,520 --> 00:03:23,490
did some really cool stuff video camera

76
00:03:21,750 --> 00:03:24,840
you can now switch for game camera debug

77
00:03:23,490 --> 00:03:26,370
camera which is pretty cool we solved

78
00:03:24,840 --> 00:03:27,780
for the you know it's not I've

79
00:03:26,370 --> 00:03:29,219
complicated solve but it's just fun to

80
00:03:27,780 --> 00:03:32,039
get stuff like a little stuff like that

81
00:03:29,219 --> 00:03:33,990
right we solved for the trig to place

82
00:03:32,039 --> 00:03:36,139
the orbit camera at the same place as a

83
00:03:33,990 --> 00:03:38,400
game camera so you get a seamless switch

84
00:03:36,139 --> 00:03:41,069
when you switch into debug camera mode

85
00:03:38,400 --> 00:03:43,409
which is really nice I like that but

86
00:03:41,069 --> 00:03:44,370
anyway yeah I noticed just now when I

87
00:03:43,409 --> 00:03:47,819
was sliding around we're using the wrong

88
00:03:44,370 --> 00:03:51,590
axis and that's true you can see here we

89
00:03:47,819 --> 00:03:55,409
get the camera x y and z-axes here and

90
00:03:51,590 --> 00:03:58,170
we use those right we process the the

91
00:03:55,409 --> 00:04:01,829
input here and then we go in here and do

92
00:03:58,169 --> 00:04:05,039
the use debug camera and here's those

93
00:04:01,830 --> 00:04:08,480
processing that transform right so the

94
00:04:05,039 --> 00:04:11,129
axes that we want are actually in here

95
00:04:08,479 --> 00:04:13,739
they're part of this debug camera oh

96
00:04:11,129 --> 00:04:17,370
right that's that's what's actually what

97
00:04:13,740 --> 00:04:22,590
we would want and so we actually need

98
00:04:17,370 --> 00:04:25,290
some way of pulling that part out in

99
00:04:22,589 --> 00:04:27,199
order to properly build the debug camera

100
00:04:25,290 --> 00:04:30,450
right

101
00:04:27,199 --> 00:04:32,250
so if you look at what happens one thing

102
00:04:30,449 --> 00:04:35,279
that's kind of nice about it is debug

103
00:04:32,250 --> 00:04:38,600
camera pan is actually used later on so

104
00:04:35,279 --> 00:04:43,319
if I wanted to I actually could do this

105
00:04:38,600 --> 00:04:46,230
and split these two out right that's

106
00:04:43,319 --> 00:04:49,620
totally possible and so what I can do is

107
00:04:46,230 --> 00:04:52,340
I can actually say oh alright if I just

108
00:04:49,620 --> 00:04:56,579
grab this part and move it down here

109
00:04:52,339 --> 00:04:58,560
then what will happen is well and you

110
00:04:56,579 --> 00:05:02,310
know we may even not quite want to do

111
00:04:58,560 --> 00:05:04,829
that because we may want to to use as

112
00:05:02,310 --> 00:05:06,899
much as we can on the input so for

113
00:05:04,829 --> 00:05:08,759
example if we want to use the rotation

114
00:05:06,899 --> 00:05:10,829
stuff we can the only thing that we

115
00:05:08,759 --> 00:05:14,670
would be wrong about would be right here

116
00:05:10,829 --> 00:05:16,500
the camera pan part so what I can do I

117
00:05:14,670 --> 00:05:18,840
can even go a little bit further and say

118
00:05:16,500 --> 00:05:20,910
oh actually you know what I should do is

119
00:05:18,839 --> 00:05:23,279
say here we are in you know using the

120
00:05:20,910 --> 00:05:26,189
debug camera and whatever let me

121
00:05:23,279 --> 00:05:29,159
actually do a second pass on the input

122
00:05:26,189 --> 00:05:33,719
here so I'm just gonna say look this

123
00:05:29,160 --> 00:05:35,790
input just as we were doing before I'm

124
00:05:33,720 --> 00:05:38,550
just gonna grab out the part where we do

125
00:05:35,790 --> 00:05:40,170
the panning and that way we still can

126
00:05:38,550 --> 00:05:43,259
update everything on the same frame

127
00:05:40,170 --> 00:05:45,689
right because I could have I need the

128
00:05:43,259 --> 00:05:47,279
axes that I'm computing here but those

129
00:05:45,689 --> 00:05:49,199
axes are dependent on the input because

130
00:05:47,279 --> 00:05:51,479
you might be rotating around but then I

131
00:05:49,199 --> 00:05:55,979
want to update the position based on

132
00:05:51,480 --> 00:05:58,830
those axes so I I could store them for

133
00:05:55,980 --> 00:06:00,840
the next frame that seems like bad to

134
00:05:58,829 --> 00:06:03,060
introduce a frame of lag so instead I'm

135
00:06:00,839 --> 00:06:05,519
just gonna do the partial update here

136
00:06:03,060 --> 00:06:09,300
and then after I know what this

137
00:06:05,519 --> 00:06:14,609
orientation is I can go ahead here and

138
00:06:09,300 --> 00:06:17,129
and snap these these axes to use right

139
00:06:14,610 --> 00:06:20,520
so that allows me to say look if we're

140
00:06:17,129 --> 00:06:22,319
using the debug camera and I can

141
00:06:20,519 --> 00:06:24,029
actually roll that into this code

142
00:06:22,319 --> 00:06:25,349
because this input only needs to happen

143
00:06:24,029 --> 00:06:28,619
in that case so we can actually put it

144
00:06:25,350 --> 00:06:32,490
right here in fact so if you know we're

145
00:06:28,620 --> 00:06:33,930
using debug camera and the input is

146
00:06:32,490 --> 00:06:35,550
valid so we're actually doing input

147
00:06:33,930 --> 00:06:36,660
we're not just you know doing some kind

148
00:06:35,550 --> 00:06:38,759
of processing that doesn't involve any

149
00:06:36,660 --> 00:06:40,600
input then all I need to do is just

150
00:06:38,759 --> 00:06:42,219
check to see if this part is down here

151
00:06:40,600 --> 00:06:44,260
right if the middle mouse button is down

152
00:06:42,220 --> 00:06:45,730
if the middle mouse button is down then

153
00:06:44,259 --> 00:06:49,180
your doing that panning right so I can

154
00:06:45,730 --> 00:06:53,140
just say look if the middle mouse button

155
00:06:49,180 --> 00:06:55,620
is down do the pant we need to make sure

156
00:06:53,139 --> 00:06:58,060
that the alt button is not down though

157
00:06:55,620 --> 00:07:00,670
because if the alt was down we would do

158
00:06:58,060 --> 00:07:03,879
the other one so we need to also say

159
00:07:00,670 --> 00:07:05,740
look don't let the alt be down but

160
00:07:03,879 --> 00:07:08,199
that's about it and so then when we do

161
00:07:05,740 --> 00:07:10,269
this this update of the debug camera pan

162
00:07:08,199 --> 00:07:12,159
then that will flow into here properly

163
00:07:10,269 --> 00:07:17,250
so the only other thing we would then

164
00:07:12,160 --> 00:07:17,250
need is we just need to do debug camera

165
00:07:18,459 --> 00:07:31,419
engines and debug camera why and then

166
00:07:28,750 --> 00:07:34,360
what we do is when we flow through this

167
00:07:31,420 --> 00:07:35,890
code we just need to say look if we're

168
00:07:34,360 --> 00:07:39,270
using debug camera so we've built the

169
00:07:35,889 --> 00:07:43,300
orientation matrix for the debug camera

170
00:07:39,269 --> 00:07:45,909
then what I can do is just get that I

171
00:07:43,300 --> 00:07:49,329
can get the axes out of there

172
00:07:45,910 --> 00:07:51,250
now these things need to persist down to

173
00:07:49,329 --> 00:07:53,439
here right because I need to be able to

174
00:07:51,250 --> 00:07:56,800
use them I need to be able to use both

175
00:07:53,439 --> 00:08:00,160
of those so I'm gonna go ahead and put

176
00:07:56,800 --> 00:08:03,460
them up I could also just always compute

177
00:08:00,160 --> 00:08:05,200
them if I want to write you know this

178
00:08:03,459 --> 00:08:07,419
this isn't something that's super

179
00:08:05,199 --> 00:08:09,550
computation intensive so if I want to I

180
00:08:07,420 --> 00:08:11,650
can actually do it like this where I'm

181
00:08:09,550 --> 00:08:15,220
always going to compute that right

182
00:08:11,649 --> 00:08:16,299
that's totally fine as well so if I want

183
00:08:15,220 --> 00:08:17,710
to I can make it look a little bit more

184
00:08:16,300 --> 00:08:19,480
like this

185
00:08:17,709 --> 00:08:20,799
and as this sort of falls out we could

186
00:08:19,480 --> 00:08:24,280
probably simplify this code a little bit

187
00:08:20,800 --> 00:08:26,590
too but you get the idea all right

188
00:08:24,279 --> 00:08:28,750
so assuming that that actually happens I

189
00:08:26,589 --> 00:08:30,639
guess that makes it even less necessary

190
00:08:28,750 --> 00:08:32,559
to do this because actually these can

191
00:08:30,639 --> 00:08:34,598
just happen in here where they would

192
00:08:32,559 --> 00:08:39,689
actually be used so right here we could

193
00:08:34,599 --> 00:08:39,690
just do that where we just do get column

194
00:08:40,349 --> 00:08:44,530
and so what I'm gonna do is take the

195
00:08:42,580 --> 00:08:46,300
orientation matrix and as we've gone

196
00:08:44,529 --> 00:08:48,819
over many many many times column of the

197
00:08:46,299 --> 00:08:51,609
orientation matrix tell me the axes of

198
00:08:48,820 --> 00:08:53,920
the object that we would be using that

199
00:08:51,610 --> 00:08:54,550
we would place using that orientation

200
00:08:53,919 --> 00:08:56,439
matrix

201
00:08:54,549 --> 00:09:00,909
so I'm just going to go ahead and pull

202
00:08:56,440 --> 00:09:03,000
out the x and y-axes of that matrix to

203
00:09:00,909 --> 00:09:05,850
get my debug camera and debug camera Y

204
00:09:03,000 --> 00:09:07,870
now at that point we don't really need

205
00:09:05,850 --> 00:09:10,149
these thing around anymore

206
00:09:07,870 --> 00:09:11,980
but you know whatever I'm just gonna

207
00:09:10,149 --> 00:09:14,949
leave them that way because it seems

208
00:09:11,980 --> 00:09:18,250
fine to do so so I'm gonna go ahead and

209
00:09:14,950 --> 00:09:22,629
build here and let me just take a look d

210
00:09:18,250 --> 00:09:28,090
Mouse what's going on there

211
00:09:22,629 --> 00:09:31,149
ah so D Mouse pee is actually just the

212
00:09:28,090 --> 00:09:36,190
difference that happens here so I think

213
00:09:31,149 --> 00:09:40,029
that's actually something that we could

214
00:09:36,190 --> 00:09:41,470
again preserve so you know there's no

215
00:09:40,029 --> 00:09:42,939
issue with doing that because if we

216
00:09:41,470 --> 00:09:45,190
didn't have input then there's just no

217
00:09:42,940 --> 00:09:49,480
no Delta Mouse which is exactly what we

218
00:09:45,190 --> 00:09:51,640
expect right all right so that minor

219
00:09:49,480 --> 00:09:53,230
patch there now should give us proper

220
00:09:51,639 --> 00:09:55,809
movement everywhere and you can see that

221
00:09:53,230 --> 00:09:58,000
it does so now we properly do the debug

222
00:09:55,809 --> 00:09:59,979
camera before again we were just we were

223
00:09:58,000 --> 00:10:01,210
doing proper camera relative motion we

224
00:09:59,980 --> 00:10:03,100
were just doing it relative to the game

225
00:10:01,210 --> 00:10:05,440
camera and that doesn't really help us

226
00:10:03,100 --> 00:10:07,060
right because we're only viewing from

227
00:10:05,440 --> 00:10:08,920
the game camera when we're not in debug

228
00:10:07,059 --> 00:10:12,279
mode so why would that you know why

229
00:10:08,919 --> 00:10:13,719
would we ever want to do that alright so

230
00:10:12,279 --> 00:10:15,429
hopefully that made sense to everybody

231
00:10:13,720 --> 00:10:17,220
now back to our story so let me switch

232
00:10:15,429 --> 00:10:19,929
back to game camera here for a second

233
00:10:17,220 --> 00:10:22,480
what I was trying to say before is all

234
00:10:19,929 --> 00:10:24,279
right so you know if you take a look at

235
00:10:22,480 --> 00:10:26,139
one of these sprites and you know I mean

236
00:10:24,279 --> 00:10:28,449
there's the hero if I switch into debug

237
00:10:26,139 --> 00:10:30,850
camera mode I can go in here and inspect

238
00:10:28,450 --> 00:10:32,170
what's going on right I can I can look

239
00:10:30,850 --> 00:10:34,840
at how we're actually rendering the

240
00:10:32,169 --> 00:10:38,679
world you can see if they're right how

241
00:10:34,840 --> 00:10:41,110
it sort of stacks up so what I wanted to

242
00:10:38,679 --> 00:10:43,059
be able to do here was have a coherent

243
00:10:41,110 --> 00:10:46,149
idea of how alignment points were to

244
00:10:43,059 --> 00:10:48,729
actually be working with the system that

245
00:10:46,149 --> 00:10:50,919
allows the sprites to to show up in Z

246
00:10:48,730 --> 00:10:52,269
properly right and we did a great job of

247
00:10:50,919 --> 00:10:55,889
that I was really surprised that the

248
00:10:52,269 --> 00:10:55,889
slide and Y was as simple as it was

249
00:10:58,919 --> 00:11:06,759
let that be a lesson but now we have to

250
00:11:05,589 --> 00:11:09,190
talk about actually setting these

251
00:11:06,759 --> 00:11:10,659
alignment points permanently and a

252
00:11:09,190 --> 00:11:12,250
couple things that we need to do in

253
00:11:10,659 --> 00:11:15,278
order to make all this work properly so

254
00:11:12,250 --> 00:11:16,958
first of all even if we were to just do

255
00:11:15,278 --> 00:11:19,870
what we already did which is slide the

256
00:11:16,958 --> 00:11:22,059
alignment points and why the current

257
00:11:19,870 --> 00:11:24,789
algorithm that we have is not quite

258
00:11:22,059 --> 00:11:27,099
sufficient the reason that the algorithm

259
00:11:24,789 --> 00:11:29,469
isn't quite sufficient is because if you

260
00:11:27,100 --> 00:11:31,720
imagine what would happen with rotate

261
00:11:29,470 --> 00:11:35,379
rotating one of these so imagine that it

262
00:11:31,720 --> 00:11:38,528
was spinning around we don't currently

263
00:11:35,379 --> 00:11:41,110
take into account tilting of the x and y

264
00:11:38,528 --> 00:11:44,549
axes in order to figure out where we

265
00:11:41,110 --> 00:11:47,800
would slide so when we rotate something

266
00:11:44,549 --> 00:11:51,429
we need to have an idea about what that

267
00:11:47,799 --> 00:11:54,609
rotation means in this sort of slanted

268
00:11:51,429 --> 00:11:57,819
space that keeps the sorting accurate

269
00:11:54,610 --> 00:12:00,700
right and so I'm gonna probably go throw

270
00:11:57,820 --> 00:12:04,028
in like maybe we'll just make the the

271
00:12:00,700 --> 00:12:06,370
fist rotate continuously or the head

272
00:12:04,028 --> 00:12:09,370
rotate continuously so you can see what

273
00:12:06,370 --> 00:12:11,560
I mean so that's the first thing you

274
00:12:09,370 --> 00:12:12,820
have to address these are in no

275
00:12:11,559 --> 00:12:14,289
particular order X reasons a first thing

276
00:12:12,820 --> 00:12:16,990
that's one thing after dress and the

277
00:12:14,289 --> 00:12:19,120
second thing we have to address is that

278
00:12:16,990 --> 00:12:21,220
if you look at how these things are

279
00:12:19,120 --> 00:12:23,470
being aligned right now we have this

280
00:12:21,220 --> 00:12:27,519
notion of alignment points so if I go in

281
00:12:23,470 --> 00:12:30,430
to the editor here and I just say look

282
00:12:27,519 --> 00:12:33,250
I'm gonna pick one of these things like

283
00:12:30,429 --> 00:12:37,919
I don't know I want to pick the the

284
00:12:33,250 --> 00:12:40,120
alignment of this base piece here right

285
00:12:37,919 --> 00:12:42,039
here's a list of all those alignment

286
00:12:40,120 --> 00:12:43,480
points and you can actually see white

287
00:12:42,039 --> 00:12:45,009
strip to the side right because we were

288
00:12:43,480 --> 00:12:48,789
playing with that the alignment points

289
00:12:45,009 --> 00:12:51,100
there and when so you know this right

290
00:12:48,789 --> 00:12:52,569
here was shifted to the side that it

291
00:12:51,100 --> 00:12:54,490
should really be more about halfway

292
00:12:52,570 --> 00:12:56,500
right so you can kind of see where that

293
00:12:54,490 --> 00:12:57,909
alignment point is there and the

294
00:12:56,500 --> 00:12:59,980
alignment points obviously actually I

295
00:12:57,909 --> 00:13:03,429
need to make it so that if the Alt key

296
00:12:59,980 --> 00:13:05,769
is down we don't process clicks should

297
00:13:03,429 --> 00:13:07,509
do that for ease of use but anyway if we

298
00:13:05,769 --> 00:13:10,960
go back here and take a look at what it

299
00:13:07,509 --> 00:13:12,970
looks like from the game camera right

300
00:13:10,960 --> 00:13:14,139
turn the sky off here you can see that

301
00:13:12,970 --> 00:13:15,700
the alignment points not in the right

302
00:13:14,139 --> 00:13:18,029
place so the actual place the alignment

303
00:13:15,700 --> 00:13:21,730
point needs to be is like you know

304
00:13:18,029 --> 00:13:23,470
probably like right there right that's

305
00:13:21,730 --> 00:13:25,539
like where it looks like it's more

306
00:13:23,470 --> 00:13:26,860
correctly anchored into the ground like

307
00:13:25,539 --> 00:13:29,289
at the point that it's supposed to be

308
00:13:26,860 --> 00:13:31,960
right so it's probably something like

309
00:13:29,289 --> 00:13:33,759
that and then this point which is where

310
00:13:31,960 --> 00:13:36,009
the head anchors on probably is like

311
00:13:33,759 --> 00:13:38,799
maybe there I you know I don't know

312
00:13:36,009 --> 00:13:41,379
exactly right but it's something like

313
00:13:38,799 --> 00:13:43,089
that and so then if you take a look at

314
00:13:41,379 --> 00:13:45,580
what that looks like and maybe I'll keep

315
00:13:43,090 --> 00:13:48,820
it turned off for now if we go into the

316
00:13:45,580 --> 00:13:49,930
debug camera mode right yeah I really

317
00:13:48,820 --> 00:13:51,550
got to fix that because otherwise it's

318
00:13:49,929 --> 00:13:54,339
gonna keep deselecting every time I

319
00:13:51,549 --> 00:13:59,469
rotate around but if you look at sort of

320
00:13:54,340 --> 00:14:06,009
where those points are right there they

321
00:13:59,470 --> 00:14:13,440
don't really they are drawn in the

322
00:14:06,009 --> 00:14:17,230
correct location for the object that

323
00:14:13,440 --> 00:14:19,750
they're on right because we compute what

324
00:14:17,230 --> 00:14:25,899
the axes are to render that object and

325
00:14:19,750 --> 00:14:29,049
then we move the those points to the

326
00:14:25,899 --> 00:14:32,649
right locations what I don't remember if

327
00:14:29,049 --> 00:14:34,179
we did is something that would do the

328
00:14:32,649 --> 00:14:36,490
right thing for the person we're

329
00:14:34,179 --> 00:14:38,559
attaching meaning I don't know if we

330
00:14:36,490 --> 00:14:40,090
take into account both sets of axes or

331
00:14:38,559 --> 00:14:44,079
if we assume that those axes are gonna

332
00:14:40,090 --> 00:14:45,280
actually be the same so what I don't

333
00:14:44,080 --> 00:14:48,400
know and this is the other part we have

334
00:14:45,279 --> 00:14:50,289
to look at is once you actually snap one

335
00:14:48,399 --> 00:14:54,340
of these things on there so we've got

336
00:14:50,289 --> 00:14:57,009
this base of neck thing right are those

337
00:14:54,340 --> 00:14:59,530
points now snap together properly do

338
00:14:57,009 --> 00:15:02,620
they line up correctly you know what I

339
00:14:59,529 --> 00:15:06,730
mean and so if we take a look at at

340
00:15:02,620 --> 00:15:08,649
where the different points are so this

341
00:15:06,730 --> 00:15:11,350
is those are the two points for the body

342
00:15:08,649 --> 00:15:13,509
I'm gonna grab the head here those are

343
00:15:11,350 --> 00:15:15,610
the two points for the body there's the

344
00:15:13,509 --> 00:15:17,559
point for the head that's supposed to

345
00:15:15,610 --> 00:15:19,889
align with it let's say add one on here

346
00:15:17,559 --> 00:15:21,729
right so if I were to create an

347
00:15:19,889 --> 00:15:22,470
arbitrary ups that supposed to be two

348
00:15:21,730 --> 00:15:24,539
parents all right

349
00:15:22,470 --> 00:15:27,899
if I was to create an arbitrator's

350
00:15:24,539 --> 00:15:31,799
placement would that still align two to

351
00:15:27,899 --> 00:15:35,490
the right place you know and if you look

352
00:15:31,799 --> 00:15:37,679
at it it seems like clearly that's not

353
00:15:35,490 --> 00:15:42,480
because that's the point that we're

354
00:15:37,679 --> 00:15:44,579
supposed to be aligning to right but

355
00:15:42,480 --> 00:15:46,920
here's the point that we're saying we're

356
00:15:44,580 --> 00:15:49,740
aligning and it doesn't line up right

357
00:15:46,919 --> 00:15:51,449
they don't so they're not you know

358
00:15:49,740 --> 00:15:54,180
they're supposed to be snapping together

359
00:15:51,450 --> 00:15:56,129
they're not snapping together and again

360
00:15:54,179 --> 00:15:58,529
that's because we're changing those axes

361
00:15:56,129 --> 00:16:00,840
and I don't think we actually did the

362
00:15:58,529 --> 00:16:02,189
work to say make sure that these two

363
00:16:00,840 --> 00:16:05,210
points in these two coordinate systems

364
00:16:02,190 --> 00:16:09,270
actually end up in the same apparent

365
00:16:05,210 --> 00:16:11,730
visual like location to the viewer at

366
00:16:09,269 --> 00:16:16,079
least if not in world space in their

367
00:16:11,730 --> 00:16:19,980
entirety right so that's another thing

368
00:16:16,080 --> 00:16:23,580
that we have to deal with and we want to

369
00:16:19,980 --> 00:16:25,440
make sure that that's correct as well so

370
00:16:23,580 --> 00:16:28,670
those are the two things that we have to

371
00:16:25,440 --> 00:16:31,350
do but fortunately they're quite easy

372
00:16:28,669 --> 00:16:33,569
meaning there's nothing unknown about

373
00:16:31,350 --> 00:16:35,730
that process now again any time we're

374
00:16:33,570 --> 00:16:38,610
dealing with 3d math there's a lot of

375
00:16:35,730 --> 00:16:40,110
stuff involved and so it might take us a

376
00:16:38,610 --> 00:16:42,389
little while to work through it and get

377
00:16:40,110 --> 00:16:47,100
it right and get it to bugged so it's

378
00:16:42,389 --> 00:16:48,899
not like it's easy as in quick but it is

379
00:16:47,100 --> 00:16:51,509
easy from the standpoint of we're not

380
00:16:48,899 --> 00:16:53,309
going into uncharted territory like we

381
00:16:51,509 --> 00:16:55,289
were before when it has like I don't

382
00:16:53,309 --> 00:16:57,689
really know what the best way to create

383
00:16:55,289 --> 00:17:01,289
these sprites in a way that sorts them

384
00:16:57,690 --> 00:17:03,180
into this real 3d environment you know

385
00:17:01,289 --> 00:17:05,938
you know given that we're doing so many

386
00:17:03,179 --> 00:17:07,859
things that normal 2d 3d games don't do

387
00:17:05,939 --> 00:17:09,630
like with real perspective shifts and

388
00:17:07,859 --> 00:17:11,369
stuff like that a lot of times I try to

389
00:17:09,630 --> 00:17:14,459
be more isometric to avoid a lot of

390
00:17:11,369 --> 00:17:15,688
these problems so we really wanted our

391
00:17:14,459 --> 00:17:18,620
territories there we came out the other

392
00:17:15,689 --> 00:17:22,160
end in fabulous forum which I'm you know

393
00:17:18,619 --> 00:17:24,509
luck was with us so that was pretty good

394
00:17:22,160 --> 00:17:28,590
you know you persevere sometimes luck is

395
00:17:24,509 --> 00:17:30,289
with you so this is not as hard that's

396
00:17:28,589 --> 00:17:32,159
what I thought we were gonna have to do

397
00:17:30,289 --> 00:17:33,569
which is going to be much more

398
00:17:32,160 --> 00:17:36,130
exploration --all

399
00:17:33,569 --> 00:17:39,789
all right so let's just start looking at

400
00:17:36,130 --> 00:17:42,090
the VAT code and let's try to bring that

401
00:17:39,789 --> 00:17:45,099
code in line with what we need it to do

402
00:17:42,089 --> 00:17:47,829
based on those things that I said so

403
00:17:45,099 --> 00:17:48,789
here's the entity code and we really

404
00:17:47,829 --> 00:17:52,119
have I'm going to move it to their

405
00:17:48,789 --> 00:17:53,589
window so my head's not in the way so

406
00:17:52,119 --> 00:17:56,139
here's the entity code and we really

407
00:17:53,589 --> 00:17:58,059
have you know a pretty straightforward

408
00:17:56,140 --> 00:17:59,800
thing we're doing here it's just there's

409
00:17:58,059 --> 00:18:02,859
a lot of bookkeeping involved so it's a

410
00:17:59,799 --> 00:18:06,730
little bit complicated all the stuff

411
00:18:02,859 --> 00:18:08,829
that goes in right so what you can see

412
00:18:06,730 --> 00:18:11,829
here is we've got these piece index

413
00:18:08,829 --> 00:18:15,240
things right that's a particular entity

414
00:18:11,829 --> 00:18:17,559
can have any number of these pieces and

415
00:18:15,240 --> 00:18:21,130
what you can see here is those pieces

416
00:18:17,559 --> 00:18:23,289
they kind of come together and you say

417
00:18:21,130 --> 00:18:27,850
all right I've got these piece indexes

418
00:18:23,289 --> 00:18:31,990
I've got a particular visible piece it's

419
00:18:27,849 --> 00:18:33,819
got you know some kind of deformations

420
00:18:31,990 --> 00:18:36,789
that I might want to put on it right

421
00:18:33,819 --> 00:18:38,379
like these axis deform stuff those are

422
00:18:36,789 --> 00:18:41,889
things for some of that procedural

423
00:18:38,380 --> 00:18:44,050
animation that we're doing Bob is the

424
00:18:41,890 --> 00:18:46,360
same right all the sort of stuff floor

425
00:18:44,049 --> 00:18:48,430
displacement all these things so we're

426
00:18:46,359 --> 00:18:49,899
computing some animation quantities

427
00:18:48,430 --> 00:18:51,299
those will probably get a little more

428
00:18:49,900 --> 00:18:54,940
complicated and a little bit more

429
00:18:51,299 --> 00:18:58,690
well-defined over time as we push more

430
00:18:54,940 --> 00:19:00,039
down the animation side of things but

431
00:18:58,690 --> 00:19:02,259
basically we've got those coming in to

432
00:19:00,039 --> 00:19:03,309
it and then what we want to know is all

433
00:19:02,259 --> 00:19:07,390
right

434
00:19:03,309 --> 00:19:09,039
let's go ahead and get our this part is

435
00:19:07,390 --> 00:19:12,100
for picking and stuff that we use the

436
00:19:09,039 --> 00:19:13,809
dev IDs and stuff that's for the for

437
00:19:12,099 --> 00:19:14,980
doing like you know the editor and stuff

438
00:19:13,809 --> 00:19:17,349
like that so we have to worry about that

439
00:19:14,980 --> 00:19:19,390
too much but then assuming that this

440
00:19:17,349 --> 00:19:22,419
thing isn't a light or a cube because

441
00:19:19,390 --> 00:19:27,790
lights and cubes are actually 3d so we

442
00:19:22,420 --> 00:19:30,640
don't have to do any like mojo you know

443
00:19:27,789 --> 00:19:32,529
we don't have to do extra work to make

444
00:19:30,640 --> 00:19:34,480
sure that those things place themselves

445
00:19:32,529 --> 00:19:36,099
into the environment properly we can

446
00:19:34,480 --> 00:19:38,950
just hand those to the render and

447
00:19:36,099 --> 00:19:39,429
because they're actual 3d shapes it just

448
00:19:38,950 --> 00:19:41,710
works

449
00:19:39,430 --> 00:19:43,539
through the pipeline right so really

450
00:19:41,710 --> 00:19:45,100
what we're worried about now is just

451
00:19:43,539 --> 00:19:46,159
this one case here where we're saying

452
00:19:45,099 --> 00:19:48,259
this is an entity

453
00:19:46,160 --> 00:19:50,600
peace this is a piece of an enemy that's

454
00:19:48,259 --> 00:19:54,369
got just a sprite you know it's got a

455
00:19:50,599 --> 00:19:57,319
bitmap that sticks on to a plane right

456
00:19:54,369 --> 00:20:00,469
so here we are with that and we get the

457
00:19:57,319 --> 00:20:03,470
bitmap back and we take a look at what

458
00:20:00,470 --> 00:20:05,600
the parent piece is gonna be so when we

459
00:20:03,470 --> 00:20:08,390
do that parent piece thing what that's

460
00:20:05,599 --> 00:20:12,049
telling us is who we're supposed to snap

461
00:20:08,390 --> 00:20:14,300
to right so you know we create one of

462
00:20:12,049 --> 00:20:15,409
these sprites we say maybe that's the

463
00:20:14,299 --> 00:20:16,909
body and then we say maybe it's got a

464
00:20:15,410 --> 00:20:20,630
head and we stick the head on to the

465
00:20:16,910 --> 00:20:22,519
body or something like this right so

466
00:20:20,630 --> 00:20:25,520
then when we do that we say alright

467
00:20:22,519 --> 00:20:27,589
let's find the alignment that's whatever

468
00:20:25,519 --> 00:20:30,190
you said we needed to use to stick these

469
00:20:27,589 --> 00:20:33,559
two together so we're just we're getting

470
00:20:30,190 --> 00:20:35,720
for any given piece we say what

471
00:20:33,559 --> 00:20:37,960
alignment point on its parent did you

472
00:20:35,720 --> 00:20:41,829
want it to stick to you know what are we

473
00:20:37,960 --> 00:20:44,150
supposed to stick it to right and

474
00:20:41,829 --> 00:20:48,589
where's the alignment point on this

475
00:20:44,150 --> 00:20:51,680
thing that we want to use SiC right so

476
00:20:48,589 --> 00:20:53,539
this one is the one that says this one

477
00:20:51,680 --> 00:20:56,509
is the one that gets the one that we're

478
00:20:53,539 --> 00:20:59,750
you know that's on us the you know the

479
00:20:56,509 --> 00:21:01,640
snap point on us and this one is the one

480
00:20:59,750 --> 00:21:04,009
that gets the snap point on our parent

481
00:21:01,640 --> 00:21:08,150
now since there isn't always a parents

482
00:21:04,009 --> 00:21:09,859
that's why we pre select the ground

483
00:21:08,150 --> 00:21:11,720
point of the entity where the entity is

484
00:21:09,859 --> 00:21:13,309
standing because if we don't have any

485
00:21:11,720 --> 00:21:15,920
other information if we don't have

486
00:21:13,309 --> 00:21:21,169
someone to stick our stick us to we'll

487
00:21:15,920 --> 00:21:23,120
stick to the ground right all right so

488
00:21:21,170 --> 00:21:27,170
after we do all of this right we've got

489
00:21:23,119 --> 00:21:29,809
all of that information ready then we

490
00:21:27,170 --> 00:21:32,240
say okay now it's time to actually do

491
00:21:29,809 --> 00:21:36,919
this computation so here is where we

492
00:21:32,240 --> 00:21:39,680
need to actually produce the the final

493
00:21:36,920 --> 00:21:42,769
results so this is the part you know all

494
00:21:39,680 --> 00:21:44,960
of that stuff really doesn't affect us

495
00:21:42,769 --> 00:21:46,910
it's just getting all of the bookkeeping

496
00:21:44,960 --> 00:21:49,850
in place even if all that stuff were

497
00:21:46,910 --> 00:21:52,009
wrong it's okay that's debugging for a

498
00:21:49,849 --> 00:21:54,319
different day the part where we come out

499
00:21:52,009 --> 00:21:56,089
with two points now we've got them so

500
00:21:54,319 --> 00:21:58,159
the question is stick them together and

501
00:21:56,089 --> 00:22:00,259
that's our job today

502
00:21:58,160 --> 00:22:03,380
stick those two points together right

503
00:22:00,259 --> 00:22:03,379
[Music]

504
00:22:05,079 --> 00:22:15,109
okay so the first thing you can see here

505
00:22:11,319 --> 00:22:18,279
is we're taking the initial placement

506
00:22:15,109 --> 00:22:21,829
point and that initial placement point

507
00:22:18,279 --> 00:22:25,700
is the you know is this alignment point

508
00:22:21,829 --> 00:22:29,449
here and the thing that you can see kind

509
00:22:25,700 --> 00:22:33,048
of right off the bat is this world P

510
00:22:29,450 --> 00:22:35,750
from a line P that's assuming that it

511
00:22:33,048 --> 00:22:38,480
can produce a world point from a

512
00:22:35,750 --> 00:22:41,269
particular alignment point in one of the

513
00:22:38,480 --> 00:22:43,009
parent sprites now I'm skeptical that

514
00:22:41,269 --> 00:22:45,889
it's actually doing that correctly at

515
00:22:43,009 --> 00:22:49,369
this point and so I want to see if

516
00:22:45,890 --> 00:22:50,960
that's actually true so you can see the

517
00:22:49,369 --> 00:22:53,479
sprite values here and you can see the

518
00:22:50,960 --> 00:22:56,419
alignment point here and you can see the

519
00:22:53,480 --> 00:22:58,220
scaled x axis scaled y axis see it you

520
00:22:56,419 --> 00:23:03,169
can see these alignment values right

521
00:22:58,220 --> 00:23:07,009
being what they are now just looking at

522
00:23:03,169 --> 00:23:11,059
that you can kind of see that will be

523
00:23:07,009 --> 00:23:14,599
correct if and only if the values min P

524
00:23:11,058 --> 00:23:18,639
that we recorded takes into account the

525
00:23:14,599 --> 00:23:22,788
Y bias that we were talking about before

526
00:23:18,640 --> 00:23:24,500
okay so here's our sprite values for up

527
00:23:22,788 --> 00:23:27,288
right call this is the one we were

528
00:23:24,500 --> 00:23:32,269
talking about here and what you can see

529
00:23:27,288 --> 00:23:36,740
is this this part right here where the

530
00:23:32,269 --> 00:23:38,359
min P gets gets created although I was

531
00:23:36,740 --> 00:23:41,390
skeptical that we were doing correctly

532
00:23:38,359 --> 00:23:44,240
it does look like we did right

533
00:23:41,390 --> 00:23:46,159
we took the aligned P and we said all

534
00:23:44,240 --> 00:23:47,720
right whatever the alignment point is

535
00:23:46,159 --> 00:23:51,590
that we're using we're gonna interpret

536
00:23:47,720 --> 00:23:53,870
it out this way and you know that's

537
00:23:51,589 --> 00:23:57,379
where it's gonna be drawn right that's

538
00:23:53,869 --> 00:23:59,779
what the Mindi so it really does sort of

539
00:23:57,380 --> 00:24:03,860
correctly represent that minimum base

540
00:23:59,779 --> 00:24:06,369
point using the slid out why that we

541
00:24:03,859 --> 00:24:08,359
were talking about before

542
00:24:06,369 --> 00:24:10,668
who knew

543
00:24:08,359 --> 00:24:13,428
so that's a good first step it means

544
00:24:10,669 --> 00:24:15,288
that we're already in a good shape for

545
00:24:13,429 --> 00:24:17,840
creating exactly what we need to create

546
00:24:15,288 --> 00:24:20,148
right now this isn't handling the

547
00:24:17,839 --> 00:24:22,908
rotation like we wanted to but again

548
00:24:20,148 --> 00:24:25,548
like I said the rotation part will come

549
00:24:22,909 --> 00:24:28,070
in later and the reason that this isn't

550
00:24:25,548 --> 00:24:31,879
handling the rotation part properly is

551
00:24:28,069 --> 00:24:35,240
again because this alignment Y slide has

552
00:24:31,880 --> 00:24:39,440
to take into account when these axes

553
00:24:35,240 --> 00:24:43,659
start to shift the actual points how

554
00:24:39,440 --> 00:24:47,690
they should be moved out in Y need to be

555
00:24:43,659 --> 00:24:49,730
considered individually so this part is

556
00:24:47,690 --> 00:24:52,100
going to get more complicated but before

557
00:24:49,730 --> 00:24:54,769
we start comp making it more complicated

558
00:24:52,099 --> 00:24:57,019
I want to get it correct for the non

559
00:24:54,769 --> 00:24:58,609
rotating case for obvious reasons right

560
00:24:57,019 --> 00:25:01,700
like let's start with a simpler case

561
00:24:58,609 --> 00:25:03,528
first alright so that actually seems

562
00:25:01,700 --> 00:25:05,509
pretty reasonable and then so the

563
00:25:03,528 --> 00:25:08,298
question is well what about the scaled x

564
00:25:05,509 --> 00:25:11,720
axis scaled y axis part of things and

565
00:25:08,298 --> 00:25:14,569
this aline p part right here so that

566
00:25:11,720 --> 00:25:18,139
world p from a line p that's happening

567
00:25:14,569 --> 00:25:20,418
there when that uses those scaled axes

568
00:25:18,138 --> 00:25:22,519
again that seems like that should be

569
00:25:20,419 --> 00:25:25,038
correct because those axes that we're

570
00:25:22,519 --> 00:25:27,528
recording here are actually the ones

571
00:25:25,038 --> 00:25:31,158
that are being used you know with the

572
00:25:27,528 --> 00:25:34,159
with the lie down taken into account so

573
00:25:31,159 --> 00:25:36,620
that point should slide along the

574
00:25:34,159 --> 00:25:40,549
slanted plane exactly the way that we

575
00:25:36,619 --> 00:25:42,619
think it should right so all of that

576
00:25:40,548 --> 00:25:45,138
seems pretty good to me

577
00:25:42,619 --> 00:25:47,058
and I'm not seeing any real reason why

578
00:25:45,138 --> 00:25:49,308
that part shouldn't produce correct

579
00:25:47,058 --> 00:25:52,099
answers now let's just take a quick

580
00:25:49,308 --> 00:25:55,788
second to make sure that what we see on

581
00:25:52,099 --> 00:25:58,250
the screen reflects that and and there

582
00:25:55,788 --> 00:26:00,500
isn't some other you know indication

583
00:25:58,250 --> 00:26:03,288
that that's not actually happening so if

584
00:26:00,500 --> 00:26:07,638
I go ahead back to the game here and I

585
00:26:03,288 --> 00:26:09,200
select one of these you know and I

586
00:26:07,638 --> 00:26:12,229
select one of these guys like the person

587
00:26:09,200 --> 00:26:14,450
we were working with before what I want

588
00:26:12,230 --> 00:26:17,480
to see now is if I go it went in here

589
00:26:14,450 --> 00:26:18,679
and I slid this point around maybe the

590
00:26:17,480 --> 00:26:20,269
easiest way to do it would be to get

591
00:26:18,679 --> 00:26:21,920
right in there and looking at the plane

592
00:26:20,269 --> 00:26:25,039
almost slide on

593
00:26:21,920 --> 00:26:27,259
right and so if I select this now and I

594
00:26:25,039 --> 00:26:29,629
go to the those alignment points this

595
00:26:27,259 --> 00:26:31,579
green point is this one here let's just

596
00:26:29,630 --> 00:26:33,950
make sure it actually slides along that

597
00:26:31,579 --> 00:26:36,319
plane properly right and it really does

598
00:26:33,950 --> 00:26:38,150
look like it's correct like if I go all

599
00:26:36,319 --> 00:26:39,829
the way up to the upper corner of that

600
00:26:38,150 --> 00:26:42,290
plane there right

601
00:26:39,829 --> 00:26:44,509
and then I I come back here and I take a

602
00:26:42,289 --> 00:26:47,389
look at it a little bit more closely so

603
00:26:44,509 --> 00:26:50,119
let me grab that again you know it's

604
00:26:47,390 --> 00:26:52,759
right where it should be so I would say

605
00:26:50,119 --> 00:26:56,569
that our initial attempt to sort of get

606
00:26:52,759 --> 00:26:57,769
those values out I'm relatively

607
00:26:56,569 --> 00:26:59,689
comfortable that doesn't look like

608
00:26:57,769 --> 00:27:02,420
there's a lot of surprises there so

609
00:26:59,690 --> 00:27:04,210
that's good alright so now let's talk

610
00:27:02,420 --> 00:27:08,420
about the part where we try to actually

611
00:27:04,210 --> 00:27:10,579
align to that snapped point because

612
00:27:08,420 --> 00:27:14,180
since we've seen that it doesn't seem to

613
00:27:10,579 --> 00:27:16,189
work but these points look correct that

614
00:27:14,180 --> 00:27:19,789
suggests that at least for the

615
00:27:16,190 --> 00:27:22,190
non-rotating rotated case we aren't

616
00:27:19,789 --> 00:27:26,200
doing the work we need to do in this

617
00:27:22,190 --> 00:27:28,549
next part of the algorithm here right

618
00:27:26,200 --> 00:27:32,180
because if we're producing the alignment

619
00:27:28,549 --> 00:27:34,159
point on our parent correctly but we're

620
00:27:32,180 --> 00:27:36,710
not snapping to that point the way we

621
00:27:34,160 --> 00:27:38,870
think we should that kind of only leaves

622
00:27:36,710 --> 00:27:44,930
one place for the bug at least in the

623
00:27:38,869 --> 00:27:47,989
obvious sense alright so here we are

624
00:27:44,930 --> 00:27:49,430
getting the world dimensions of this

625
00:27:47,990 --> 00:27:54,289
piece that we're going to be putting

626
00:27:49,430 --> 00:27:57,080
down and here's us asking for the sprite

627
00:27:54,289 --> 00:27:59,509
values for upright part of things so

628
00:27:57,079 --> 00:28:00,949
that gets us back into this routine and

629
00:27:59,509 --> 00:28:03,519
what we're doing is we're passing the x

630
00:28:00,950 --> 00:28:05,480
and y axis of rotation that we want

631
00:28:03,519 --> 00:28:07,759
imagining that we were in the plane

632
00:28:05,480 --> 00:28:10,490
eventually so this is just giving us

633
00:28:07,759 --> 00:28:13,129
regular 2d axes that we want for us

634
00:28:10,490 --> 00:28:16,849
right and that alignment point is the

635
00:28:13,130 --> 00:28:17,330
one that we've computed here right oh no

636
00:28:16,849 --> 00:28:19,549
I'm sorry

637
00:28:17,329 --> 00:28:23,960
initial P is the point we're aligning to

638
00:28:19,549 --> 00:28:25,819
a line P is the percentage in our space

639
00:28:23,960 --> 00:28:28,970
where the point we're trying to align

640
00:28:25,819 --> 00:28:30,559
you know where that would would would

641
00:28:28,970 --> 00:28:33,589
occur right look where that snapping

642
00:28:30,559 --> 00:28:35,659
point should be and so now we kind of

643
00:28:33,589 --> 00:28:39,649
have to figure out okay how is that go

644
00:28:35,660 --> 00:28:41,690
to work now this gets again more

645
00:28:39,650 --> 00:28:50,420
complicated because we have to remember

646
00:28:41,690 --> 00:28:52,640
that these planes we maybe that when we

647
00:28:50,420 --> 00:28:56,390
snap these things together we're not

648
00:28:52,640 --> 00:28:59,330
necessarily snapping them together in Z

649
00:28:56,390 --> 00:29:01,580
right we're snapping them together only

650
00:28:59,329 --> 00:29:05,240
from the perspective of the person

651
00:29:01,579 --> 00:29:06,409
looking and I can't really think oh well

652
00:29:05,240 --> 00:29:07,880
you know what let me just show you it in

653
00:29:06,410 --> 00:29:09,019
the games like I get draw a diagram but

654
00:29:07,880 --> 00:29:12,710
then I'm like you know what just showing

655
00:29:09,019 --> 00:29:14,269
you in the game is probably easier so if

656
00:29:12,710 --> 00:29:17,150
you look at what's going on here

657
00:29:14,269 --> 00:29:20,240
these two sprites are intentionally

658
00:29:17,150 --> 00:29:21,680
separated in Z and the reason that

659
00:29:20,240 --> 00:29:23,359
they're separated in Z and you know they

660
00:29:21,680 --> 00:29:27,110
don't really need to be separated that

661
00:29:23,359 --> 00:29:28,669
as much as they are necessarily but the

662
00:29:27,109 --> 00:29:31,879
reason if they're separated in Z like

663
00:29:28,670 --> 00:29:36,440
that is specifically because we don't

664
00:29:31,880 --> 00:29:38,630
want to stack them right on top of each

665
00:29:36,440 --> 00:29:40,220
other in the plane because if we stacked

666
00:29:38,630 --> 00:29:43,010
them right on top of each other in the

667
00:29:40,220 --> 00:29:45,980
plane then there's two things that don't

668
00:29:43,009 --> 00:29:48,369
work properly one is that we wouldn't

669
00:29:45,980 --> 00:29:50,720
necessarily get the proper perspective

670
00:29:48,369 --> 00:29:52,159
shifting that we might want from things

671
00:29:50,720 --> 00:29:54,620
that are supposed to be a little bit

672
00:29:52,160 --> 00:29:58,880
tall but the other thing that we

673
00:29:54,619 --> 00:30:00,649
wouldn't get is we wouldn't leave

674
00:29:58,880 --> 00:30:02,150
sufficient room for the z-buffer to

675
00:30:00,650 --> 00:30:03,769
resolve properly if they're right in the

676
00:30:02,150 --> 00:30:06,920
same plane you would get potentially

677
00:30:03,769 --> 00:30:08,599
z-fighting because since you know

678
00:30:06,920 --> 00:30:10,730
there's limited precision arithmetic

679
00:30:08,599 --> 00:30:12,740
going on and it's not an infinitely

680
00:30:10,730 --> 00:30:15,079
precise plane you get those little

681
00:30:12,740 --> 00:30:17,269
sparkly artifacts that you see sometimes

682
00:30:15,079 --> 00:30:19,039
in games when things it's called Z

683
00:30:17,269 --> 00:30:20,389
fighting when things are trying to write

684
00:30:19,039 --> 00:30:21,920
to the Z buffer and they don't precisely

685
00:30:20,390 --> 00:30:23,630
calculate the plane equation correctly

686
00:30:21,920 --> 00:30:25,580
so you get some pixels that show through

687
00:30:23,630 --> 00:30:27,830
in some pixels that don't show through

688
00:30:25,579 --> 00:30:29,329
from underlying objects so we do want

689
00:30:27,829 --> 00:30:30,369
there to be some separation there as

690
00:30:29,329 --> 00:30:33,740
well

691
00:30:30,369 --> 00:30:36,079
all right so we have to kind of define

692
00:30:33,740 --> 00:30:39,200
what it means to snap together in this

693
00:30:36,079 --> 00:30:41,149
way we have to kind of come up with some

694
00:30:39,200 --> 00:30:44,059
rules about what we actually expect to

695
00:30:41,150 --> 00:30:46,910
be true and this is somewhat complicated

696
00:30:44,059 --> 00:30:49,399
because there ways that we might want

697
00:30:46,910 --> 00:30:51,350
them to be true

698
00:30:49,400 --> 00:30:54,140
differ in terms of what we would

699
00:30:51,349 --> 00:30:56,750
consider a correct result so one thing

700
00:30:54,140 --> 00:30:58,580
that we could say is true is we could

701
00:30:56,750 --> 00:31:00,859
say that from the perspective of the

702
00:30:58,579 --> 00:31:02,809
camera we always want the alignment

703
00:31:00,859 --> 00:31:05,059
points to appear as if they're on top of

704
00:31:02,809 --> 00:31:07,399
each other right even though when we

705
00:31:05,059 --> 00:31:08,990
then zoom rotate around like that we

706
00:31:07,400 --> 00:31:11,509
will see that they are not in fact in

707
00:31:08,990 --> 00:31:13,160
the same place in 3d when we rotate back

708
00:31:11,509 --> 00:31:16,759
to here we would see that they come into

709
00:31:13,160 --> 00:31:21,080
alignment so from our perspective they

710
00:31:16,759 --> 00:31:22,819
would be right now that would be the

711
00:31:21,079 --> 00:31:24,619
correct thing to do if we were concerned

712
00:31:22,819 --> 00:31:26,599
only with the concept of an alignment

713
00:31:24,619 --> 00:31:29,359
point in the abstract sense we want to

714
00:31:26,599 --> 00:31:31,609
align these two points but there may be

715
00:31:29,359 --> 00:31:35,059
reasons why we don't actually want that

716
00:31:31,609 --> 00:31:36,979
to happen and it's again this is

717
00:31:35,059 --> 00:31:38,899
actually an aesthetic decision it has

718
00:31:36,980 --> 00:31:40,759
nothing to do with 3d math or anything

719
00:31:38,900 --> 00:31:43,610
else it's a it's an actually an artistic

720
00:31:40,759 --> 00:31:46,279
decision and what I'm gonna do is going

721
00:31:43,609 --> 00:31:49,419
to show you what I mean here in the

722
00:31:46,279 --> 00:31:53,329
hallway by selecting this particular

723
00:31:49,420 --> 00:31:59,090
fellow here I guess let me go ahead and

724
00:31:53,329 --> 00:32:04,579
go into debug cam so I can pick him yeah

725
00:31:59,089 --> 00:32:07,519
let's let's say let's say that we shrink

726
00:32:04,579 --> 00:32:09,349
the head down I know it's gonna be a

727
00:32:07,519 --> 00:32:13,869
little bit weird right let's say we

728
00:32:09,349 --> 00:32:17,079
shrink the head down like that and then

729
00:32:13,869 --> 00:32:21,979
let me go back to the game camera and

730
00:32:17,079 --> 00:32:25,099
let's let's go back here right so as I

731
00:32:21,980 --> 00:32:28,509
move across the screen I want you to pay

732
00:32:25,099 --> 00:32:32,000
attention to the location of the head

733
00:32:28,509 --> 00:32:34,819
relative to the body and what you can

734
00:32:32,000 --> 00:32:37,960
see is you actually get a sense of

735
00:32:34,819 --> 00:32:40,789
perspective even though these are not 3d

736
00:32:37,960 --> 00:32:43,069
they're 2d sprites and they're aligned

737
00:32:40,789 --> 00:32:45,889
to the camera to a certain degree but

738
00:32:43,069 --> 00:32:50,089
because we have allowed some of the 3d

739
00:32:45,890 --> 00:32:53,509
to affect the sprites and we allow the

740
00:32:50,089 --> 00:32:54,980
full 3d to affect their pin we allow

741
00:32:53,509 --> 00:32:57,940
their position to be fully effective in

742
00:32:54,980 --> 00:33:01,880
3d and we allow the slanting of them

743
00:32:57,940 --> 00:33:03,360
into full 3d to be partially true right

744
00:33:01,880 --> 00:33:07,830
we partially orient to the camera

745
00:33:03,359 --> 00:33:10,199
and we partially orient to the world but

746
00:33:07,829 --> 00:33:12,299
because we have enough of the 3d coming

747
00:33:10,200 --> 00:33:14,130
through what you can see is the

748
00:33:12,299 --> 00:33:16,710
perspective shift on the head is

749
00:33:14,130 --> 00:33:19,350
actually fairly pronounced you can sort

750
00:33:16,710 --> 00:33:21,120
it sort of feels a little bit more 3d as

751
00:33:19,349 --> 00:33:24,990
the character moves from side to side

752
00:33:21,119 --> 00:33:29,519
because you actually see him tip as if

753
00:33:24,990 --> 00:33:31,470
he was a real 3d object right so what we

754
00:33:29,519 --> 00:33:32,819
don't necessarily want to do because I

755
00:33:31,470 --> 00:33:35,130
think that's a fairly compelling

756
00:33:32,819 --> 00:33:37,079
artistic result that we can make use of

757
00:33:35,130 --> 00:33:39,990
as we actually build our sprites and

758
00:33:37,079 --> 00:33:42,329
align things what I don't think we want

759
00:33:39,990 --> 00:33:44,329
to do is make a rule that says let's

760
00:33:42,329 --> 00:33:46,859
actually pin these two points together

761
00:33:44,329 --> 00:33:48,689
using the cameras perspective because

762
00:33:46,859 --> 00:33:52,139
what that would do is that would

763
00:33:48,690 --> 00:33:55,920
actually eliminate some of that 3d

764
00:33:52,140 --> 00:34:00,200
motion by using the cameras actual 3d

765
00:33:55,920 --> 00:34:04,590
location to adjust the location of the

766
00:34:00,200 --> 00:34:06,930
head in the body right it would

767
00:34:04,589 --> 00:34:09,179
essentially be fighting the natural 3d

768
00:34:06,930 --> 00:34:11,369
motion by introducing this synthetic

769
00:34:09,179 --> 00:34:12,779
constraint that doesn't have anything to

770
00:34:11,369 --> 00:34:16,559
do with well it does have something to

771
00:34:12,780 --> 00:34:19,290
do with but that isn't as close as just

772
00:34:16,559 --> 00:34:22,440
the normal result would be to the 3d

773
00:34:19,289 --> 00:34:24,449
tilting of that stack of sprites so I

774
00:34:22,440 --> 00:34:27,510
think we want the to the 3d tilting of

775
00:34:24,449 --> 00:34:29,879
that stack of sprites to occur and so

776
00:34:27,510 --> 00:34:33,630
what I might propose is the best way to

777
00:34:29,880 --> 00:34:38,519
talk about our alignment is to say let's

778
00:34:33,630 --> 00:34:41,970
suppose that we were right in line with

779
00:34:38,519 --> 00:34:46,219
the camera so we're going to presuppose

780
00:34:41,969 --> 00:34:49,889
that the camera cannot be off access

781
00:34:46,219 --> 00:34:51,750
when we're doing alignment and let's say

782
00:34:49,889 --> 00:34:56,309
that the alignment point should line up

783
00:34:51,750 --> 00:34:58,739
there okay so we will try to do the

784
00:34:56,309 --> 00:35:00,840
correct math that forces these points

785
00:34:58,739 --> 00:35:04,039
into alignment when you're right down

786
00:35:00,840 --> 00:35:08,610
the barrel of the gun so to speak right

787
00:35:04,039 --> 00:35:12,090
but when you get to the sides we will

788
00:35:08,610 --> 00:35:14,760
continue to apply that same alignment as

789
00:35:12,090 --> 00:35:17,309
if the camera was over there so that we

790
00:35:14,760 --> 00:35:19,410
let the natural 3d display

791
00:35:17,309 --> 00:35:23,429
meant to the side do the work it would

792
00:35:19,409 --> 00:35:25,980
have done right so I think that is

793
00:35:23,429 --> 00:35:28,230
probably how we want to do it that way

794
00:35:25,980 --> 00:35:30,150
when we're authoring the points there's

795
00:35:28,230 --> 00:35:31,679
a natural way of talking about them they

796
00:35:30,150 --> 00:35:34,289
snap together when we're looking

797
00:35:31,679 --> 00:35:37,469
directly at them you know like this they

798
00:35:34,289 --> 00:35:40,380
will snap together but when you move to

799
00:35:37,469 --> 00:35:42,329
the side you'll get that sort of tilting

800
00:35:40,380 --> 00:35:45,349
of the stack that gives you again that

801
00:35:42,329 --> 00:35:48,239
extra feeling of real like tangibility

802
00:35:45,349 --> 00:35:49,380
that you don't get with sprites normally

803
00:35:48,239 --> 00:35:53,339
because when they move across the screen

804
00:35:49,380 --> 00:35:57,660
no you get no parallax in a 2-d game

805
00:35:53,340 --> 00:36:01,350
right so I think that's what I would

806
00:35:57,659 --> 00:36:04,670
like that alignment idea to reflect and

807
00:36:01,349 --> 00:36:07,319
when we look at how that's going to work

808
00:36:04,670 --> 00:36:10,260
what you can see here is when we call

809
00:36:07,320 --> 00:36:12,510
sprite values for upright we're passing

810
00:36:10,260 --> 00:36:15,360
an initial P that is the information

811
00:36:12,510 --> 00:36:18,150
that we would need to start with for

812
00:36:15,360 --> 00:36:20,190
where we're trying to match so we're

813
00:36:18,150 --> 00:36:22,500
giving it a proper world space location

814
00:36:20,190 --> 00:36:24,659
that's actually on the plane of the

815
00:36:22,500 --> 00:36:27,030
parent and that is the actual target

816
00:36:24,659 --> 00:36:28,649
point that we're trying to snap to so I

817
00:36:27,030 --> 00:36:30,750
would say that we've done our due

818
00:36:28,650 --> 00:36:32,039
diligence and we don't really have to

819
00:36:30,750 --> 00:36:34,289
worry about that point anymore at least

820
00:36:32,039 --> 00:36:36,059
not till we start addressing the

821
00:36:34,289 --> 00:36:39,630
rotation case which is the second part

822
00:36:36,059 --> 00:36:41,519
of it if I come over here to sprite

823
00:36:39,630 --> 00:36:43,440
values for upright and see what we're

824
00:36:41,519 --> 00:36:44,789
doing with that however because again

825
00:36:43,440 --> 00:36:47,010
remember them the only other thing we

826
00:36:44,789 --> 00:36:49,199
really give ourselves is the Xbox mu

827
00:36:47,010 --> 00:36:52,320
line P if we look at what we're doing

828
00:36:49,199 --> 00:36:54,319
with that you know we've got that you

829
00:36:52,320 --> 00:36:59,640
know so we've got that base P on there

830
00:36:54,320 --> 00:37:01,260
um well I mean I guess I should I should

831
00:36:59,639 --> 00:37:03,480
be more specific because it's actually

832
00:37:01,260 --> 00:37:07,410
little upstream via that they probably

833
00:37:03,480 --> 00:37:10,920
curse know what I said is not entirely

834
00:37:07,409 --> 00:37:14,489
correct this piece offset here has

835
00:37:10,920 --> 00:37:17,070
actually displaced right the snap to

836
00:37:14,489 --> 00:37:19,079
point in three dimensions before we've

837
00:37:17,070 --> 00:37:22,620
ever actually had a chance to snap to it

838
00:37:19,079 --> 00:37:26,039
right so in a sense what I said was a

839
00:37:22,619 --> 00:37:27,690
lie the part that I actually need to

840
00:37:26,039 --> 00:37:28,739
talk about here is this part right here

841
00:37:27,690 --> 00:37:32,130
and it has

842
00:37:28,739 --> 00:37:36,359
happened before we we passed it just

843
00:37:32,130 --> 00:37:37,410
right values for up right so that is

844
00:37:36,360 --> 00:37:39,329
actually the thing we're gonna have to

845
00:37:37,409 --> 00:37:41,670
deal with why here's why

846
00:37:39,329 --> 00:37:43,889
so sprite values for up right we get a

847
00:37:41,670 --> 00:37:46,470
base P in here and what you can see is

848
00:37:43,889 --> 00:37:48,000
that base piece serves as the offset for

849
00:37:46,469 --> 00:37:51,779
how we are going to construct the

850
00:37:48,000 --> 00:37:54,420
location of our plane you can see it

851
00:37:51,780 --> 00:37:57,720
happening in here right you can see the

852
00:37:54,420 --> 00:38:03,119
align px shifting us on the axis and the

853
00:37:57,719 --> 00:38:05,609
align py shifting us out in along the

854
00:38:03,119 --> 00:38:07,289
worldwide there right and what you can

855
00:38:05,610 --> 00:38:09,720
see happening here is that when we're

856
00:38:07,289 --> 00:38:13,320
actually doing those computations we

857
00:38:09,719 --> 00:38:15,239
have no knowledge actually of where

858
00:38:13,320 --> 00:38:18,660
we're actually trying to snap to anymore

859
00:38:15,239 --> 00:38:21,719
because this was the the point we were

860
00:38:18,659 --> 00:38:23,879
trying to snap to but we already offset

861
00:38:21,719 --> 00:38:27,149
it by something we never tell this

862
00:38:23,880 --> 00:38:29,940
routine about so there's no way that

863
00:38:27,150 --> 00:38:33,829
sprite values for up right can possibly

864
00:38:29,940 --> 00:38:40,679
align this thing because it has no idea

865
00:38:33,829 --> 00:38:45,210
right it just has no idea you know where

866
00:38:40,679 --> 00:38:47,250
it should put it now we have a couple of

867
00:38:45,210 --> 00:38:49,108
choices here sprite values for up right

868
00:38:47,250 --> 00:38:50,340
doesn't have to be the thing that does

869
00:38:49,108 --> 00:38:51,750
that alignment though so we don't

870
00:38:50,340 --> 00:38:54,660
necessarily have to think about this way

871
00:38:51,750 --> 00:38:57,659
what we could do instead is for example

872
00:38:54,659 --> 00:39:00,839
this base P is only used for this offset

873
00:38:57,659 --> 00:39:03,569
what we could do is get rid of that base

874
00:39:00,840 --> 00:39:05,490
P so what we could do is say sprite

875
00:39:03,570 --> 00:39:07,380
values for upright gives you the

876
00:39:05,489 --> 00:39:09,599
alignment as if you were just going to

877
00:39:07,380 --> 00:39:11,910
align yourself to world 0 and then

878
00:39:09,599 --> 00:39:15,868
outside here maybe this is where we

879
00:39:11,909 --> 00:39:20,670
actually do the snapping right it could

880
00:39:15,869 --> 00:39:23,400
be um I'm somewhat can I find that

881
00:39:20,670 --> 00:39:26,340
somewhat compelling right that that

882
00:39:23,400 --> 00:39:29,760
seems pretty interesting so I think I

883
00:39:26,340 --> 00:39:33,000
may start us off by going down that

884
00:39:29,760 --> 00:39:35,040
direction now we're probably going to

885
00:39:33,000 --> 00:39:36,599
get rid of Z bias it looks like we'll be

886
00:39:35,039 --> 00:39:39,630
able to accomplish the job that we need

887
00:39:36,599 --> 00:39:41,880
without Z bias and that will simplify

888
00:39:39,630 --> 00:39:42,180
our back-end pipeline because we will no

889
00:39:41,880 --> 00:39:45,329
longer

890
00:39:42,179 --> 00:39:47,250
have to pass down four wide vertices or

891
00:39:45,329 --> 00:39:49,259
if we do want to keep passing down four

892
00:39:47,250 --> 00:39:52,469
wide vertices we can put something else

893
00:39:49,260 --> 00:39:54,930
into the W component instead of having

894
00:39:52,469 --> 00:39:56,579
to rely on instead of having to use it

895
00:39:54,929 --> 00:40:01,409
for biasing the z-buffer

896
00:39:56,579 --> 00:40:03,029
so actually that all is I think going to

897
00:40:01,409 --> 00:40:05,670
be quite nice now that we've found that

898
00:40:03,030 --> 00:40:08,850
we can just use the Y displacement to

899
00:40:05,670 --> 00:40:11,220
make this work but so if I go ahead and

900
00:40:08,849 --> 00:40:13,589
get rid of that then what I could do is

901
00:40:11,219 --> 00:40:16,049
say all right so the align P align X

902
00:40:13,590 --> 00:40:18,329
thing all that sort of stuff if I just

903
00:40:16,050 --> 00:40:21,000
now start saying let's get rid of that

904
00:40:18,329 --> 00:40:23,219
base P offset so when you actually try

905
00:40:21,000 --> 00:40:25,079
to get sprite values we're just gonna

906
00:40:23,219 --> 00:40:27,719
give you them a line to the world and

907
00:40:25,079 --> 00:40:30,509
then what you need to do is on the

908
00:40:27,719 --> 00:40:31,889
outside you need to come up with how

909
00:40:30,510 --> 00:40:34,410
you're going to do your alignment

910
00:40:31,889 --> 00:40:38,400
separately right and that seems kind of

911
00:40:34,409 --> 00:40:40,529
compelling to me because whoops because

912
00:40:38,400 --> 00:40:45,090
that would allow us to do a little bit

913
00:40:40,530 --> 00:40:47,220
more that would allow us to take it into

914
00:40:45,090 --> 00:40:48,720
a more contextual setting rather than

915
00:40:47,219 --> 00:40:52,799
over here where we're just producing

916
00:40:48,719 --> 00:40:54,959
these these sprite sort of these sort of

917
00:40:52,800 --> 00:40:57,900
values that are isolated to the sprite

918
00:40:54,960 --> 00:40:59,880
otherwise so if we wanted to reproduce

919
00:40:57,900 --> 00:41:01,500
the exact situation we have now it's not

920
00:40:59,880 --> 00:41:04,110
particularly difficult we know that the

921
00:41:01,500 --> 00:41:06,570
min P that comes out of here is just not

922
00:41:04,110 --> 00:41:08,370
getting offset by this thing right so

923
00:41:06,570 --> 00:41:10,920
literally all we would have to do is say

924
00:41:08,369 --> 00:41:12,690
well whatever comes out of there why am

925
00:41:10,920 --> 00:41:14,760
I not give up there we go

926
00:41:12,690 --> 00:41:16,950
whatever comes out of there I know that

927
00:41:14,760 --> 00:41:18,960
I can just displace it by initial P and

928
00:41:16,949 --> 00:41:21,779
that's going to reproduce the exact

929
00:41:18,960 --> 00:41:25,470
results I had so it's pretty easy for me

930
00:41:21,780 --> 00:41:27,210
to not actually bother you know to not

931
00:41:25,469 --> 00:41:35,059
disturb anything that we had going on

932
00:41:27,210 --> 00:41:41,250
currently or or not what did I oh yeah

933
00:41:35,059 --> 00:41:42,509
sorry I accidentally deleted the minus

934
00:41:41,250 --> 00:41:43,980
there as well you can see that those are

935
00:41:42,510 --> 00:41:47,610
supposed to be minus alignments right

936
00:41:43,980 --> 00:41:50,490
because the align peas inside it so

937
00:41:47,610 --> 00:41:52,170
hopefully now yeah you can see we didn't

938
00:41:50,489 --> 00:41:53,309
change the alignment at all so you know

939
00:41:52,170 --> 00:41:55,110
we go in and look and it's exactly

940
00:41:53,309 --> 00:41:55,940
stacked the way that we had it before

941
00:41:55,110 --> 00:41:59,539
and everything

942
00:41:55,940 --> 00:42:01,730
right so now if we think about how this

943
00:41:59,539 --> 00:42:05,270
is working we now have the alignment

944
00:42:01,730 --> 00:42:07,159
points in both of our spaces and now the

945
00:42:05,269 --> 00:42:09,380
question is how do we make those two

946
00:42:07,159 --> 00:42:11,538
alignment points appear to line up to

947
00:42:09,380 --> 00:42:14,030
the camera right because that's what we

948
00:42:11,539 --> 00:42:17,030
actually want to do and that allows us

949
00:42:14,030 --> 00:42:19,250
to say oh well if we look at what goes

950
00:42:17,030 --> 00:42:20,569
on in here so you see where we're do you

951
00:42:19,250 --> 00:42:23,239
know where we're looking at this stuff

952
00:42:20,568 --> 00:42:25,219
if I look at initial P you can see that

953
00:42:23,239 --> 00:42:28,578
I don't really use it anywhere else

954
00:42:25,219 --> 00:42:31,009
right it's only used for that what that

955
00:42:28,579 --> 00:42:33,890
means is I can stop doing this piece off

956
00:42:31,010 --> 00:42:38,240
set this thing here I can stop doing I

957
00:42:33,889 --> 00:42:41,029
can do these as two separate steps right

958
00:42:38,239 --> 00:42:43,308
and again that will give me the exact

959
00:42:41,030 --> 00:42:45,200
same result that we already have because

960
00:42:43,309 --> 00:42:47,298
all I'm doing there is is applying the

961
00:42:45,199 --> 00:42:49,788
offset in two steps instead of one step

962
00:42:47,298 --> 00:42:52,429
right so I get the same thing so now

963
00:42:49,789 --> 00:42:54,140
what that means is I do actually know

964
00:42:52,429 --> 00:42:56,690
the exact alignment point I'm trying to

965
00:42:54,139 --> 00:43:00,650
align to it's this right that's the

966
00:42:56,690 --> 00:43:03,858
parent point I know the offset that we

967
00:43:00,650 --> 00:43:07,190
want to have in world space right so I

968
00:43:03,858 --> 00:43:09,679
have an actual displacement that I'm

969
00:43:07,190 --> 00:43:14,568
supposed to get because this piece is is

970
00:43:09,679 --> 00:43:19,548
this piece right and I furthermore know

971
00:43:14,568 --> 00:43:22,460
what I want I furthermore know the point

972
00:43:19,548 --> 00:43:24,650
that on me that I'm trying to snap you

973
00:43:22,460 --> 00:43:26,809
know to my parent because that's

974
00:43:24,650 --> 00:43:29,690
actually coming out here the sprite min

975
00:43:26,809 --> 00:43:30,980
P is the point in on this sprite before

976
00:43:29,690 --> 00:43:33,619
I adjust it at all

977
00:43:30,980 --> 00:43:39,619
that's the offset in me that I'm trying

978
00:43:33,619 --> 00:43:42,858
to snap to right that that point I said

979
00:43:39,619 --> 00:43:45,440
that a little bit wrong this is the

980
00:43:42,858 --> 00:43:47,328
basis sprite min P is the basis point

981
00:43:45,440 --> 00:43:50,809
you would draw the sprite around zero

982
00:43:47,329 --> 00:43:52,970
zero zero is in this in this sprite

983
00:43:50,809 --> 00:43:55,039
space is the point we would snap to

984
00:43:52,969 --> 00:43:58,219
right we had zero B the point you would

985
00:43:55,039 --> 00:44:00,109
snap to so we know that if we just

986
00:43:58,219 --> 00:44:02,088
aligned if we just figure out how to

987
00:44:00,108 --> 00:44:03,710
move this thing from being centered

988
00:44:02,088 --> 00:44:05,750
around zero zero zero as the snap point

989
00:44:03,710 --> 00:44:07,670
if we just move zero zero to the place

990
00:44:05,750 --> 00:44:09,670
you want to be snap to we would be done

991
00:44:07,670 --> 00:44:12,230
right

992
00:44:09,670 --> 00:44:14,329
now let's verify that to ourselves a

993
00:44:12,230 --> 00:44:17,510
little bit suppose I get rid of the

994
00:44:14,329 --> 00:44:19,460
piece offset right so now we don't have

995
00:44:17,510 --> 00:44:22,490
that additional offset that we're asking

996
00:44:19,460 --> 00:44:25,130
for here we want to get rid of that and

997
00:44:22,489 --> 00:44:27,799
let's see if now we snap directly

998
00:44:25,130 --> 00:44:28,190
because we should snap directly one two

999
00:44:27,800 --> 00:44:30,470
one

1000
00:44:28,190 --> 00:44:32,900
so if I look at what's going on now what

1001
00:44:30,469 --> 00:44:35,599
I should see and actually its I'm a

1002
00:44:32,900 --> 00:44:40,700
little bit weirded out why don't I see

1003
00:44:35,599 --> 00:44:44,809
anything there so I'm glad I did this

1004
00:44:40,699 --> 00:44:49,579
because I should have seen that much

1005
00:44:44,809 --> 00:44:53,440
more like I'm not sure where the Z

1006
00:44:49,579 --> 00:44:53,440
offset would be coming from

1007
00:44:54,460 --> 00:45:01,550
that's the offset look pretty

1008
00:44:57,099 --> 00:45:04,130
significant didn't it so I'm not okay

1009
00:45:01,550 --> 00:45:07,820
all right I take it back I'm a little

1010
00:45:04,130 --> 00:45:10,820
confused so there's something else we

1011
00:45:07,820 --> 00:45:14,960
need to account for here if we don't add

1012
00:45:10,820 --> 00:45:19,750
in the piece offset this is supposed to

1013
00:45:14,960 --> 00:45:19,750
Center us about zero zero zero right

1014
00:45:22,119 --> 00:45:29,269
well okay so no there is one more piece

1015
00:45:27,170 --> 00:45:33,619
of it if you look at what's going on

1016
00:45:29,269 --> 00:45:38,750
here the y-axis part has not actually

1017
00:45:33,619 --> 00:45:42,230
put us at the location that we would

1018
00:45:38,750 --> 00:45:46,340
need to be because the y-axis you can

1019
00:45:42,230 --> 00:45:49,030
see actually isn't taken into account

1020
00:45:46,340 --> 00:45:49,030
here at all

1021
00:45:56,039 --> 00:46:08,739
so that that I guess pretty much gives

1022
00:46:03,579 --> 00:46:10,778
us what we would need to know so I think

1023
00:46:08,739 --> 00:46:13,329
we still want to continue down the road

1024
00:46:10,778 --> 00:46:15,699
that I'm going down though I want this

1025
00:46:13,329 --> 00:46:17,349
to come out being centered around zero

1026
00:46:15,699 --> 00:46:19,209
zero zero because that gives us a

1027
00:46:17,349 --> 00:46:21,519
prepared piece that we can then do what

1028
00:46:19,208 --> 00:46:23,498
we want to do with so if you look at

1029
00:46:21,518 --> 00:46:25,748
what's happening here we will be

1030
00:46:23,498 --> 00:46:28,419
correctly centered around X because we

1031
00:46:25,748 --> 00:46:30,368
are moving backwards along the x axis

1032
00:46:28,420 --> 00:46:32,170
we're going to use for drawing by our

1033
00:46:30,369 --> 00:46:35,798
alignment point that keeps it aligned

1034
00:46:32,170 --> 00:46:38,229
properly we then move in Y backwards

1035
00:46:35,798 --> 00:46:42,130
along the world dim we don't use the y

1036
00:46:38,228 --> 00:46:46,179
axis part at all right what we want to

1037
00:46:42,130 --> 00:46:48,729
do now is say if we're doing that sort

1038
00:46:46,179 --> 00:46:51,489
of tilt right if that is what we're

1039
00:46:48,728 --> 00:46:53,889
doing we want zeros we still want to

1040
00:46:51,489 --> 00:46:57,969
Center this thing around zero zero zero

1041
00:46:53,889 --> 00:47:03,598
right and then presumably it's it's the

1042
00:46:57,969 --> 00:47:07,150
job of whoever's on the outside to

1043
00:47:03,599 --> 00:47:16,479
figure out how that alignments going to

1044
00:47:07,150 --> 00:47:18,749
work right so I realize that's a little

1045
00:47:16,478 --> 00:47:18,748
janky

1046
00:47:28,510 --> 00:47:33,860
let me draw this out for you because it

1047
00:47:31,179 --> 00:47:36,949
at least I think makes sense in my head

1048
00:47:33,860 --> 00:47:40,599
but I don't know other than a diagram a

1049
00:47:36,949 --> 00:47:45,039
good way to sort of show it to you and

1050
00:47:40,599 --> 00:47:45,039
and let you know what I'm thinking so

1051
00:47:49,329 --> 00:47:56,529
for doing alignment and again this is

1052
00:47:52,429 --> 00:47:59,899
really this is really a very simple case

1053
00:47:56,530 --> 00:48:06,790
all I'm trying to say with this is I

1054
00:47:59,900 --> 00:48:11,720
want away is there's the oh right okay

1055
00:48:06,789 --> 00:48:14,570
all I'm really trying to say is I want a

1056
00:48:11,719 --> 00:48:19,039
way for us to is there like a

1057
00:48:14,570 --> 00:48:22,400
full-screen yeah okay sorry

1058
00:48:19,039 --> 00:48:24,829
okay distracted what I'm trying to say

1059
00:48:22,400 --> 00:48:26,960
is I want a good way of telling the

1060
00:48:24,829 --> 00:48:28,670
exterior code which i think is the place

1061
00:48:26,960 --> 00:48:29,990
that the alignment should happen and you

1062
00:48:28,670 --> 00:48:32,119
know can use utility function to do the

1063
00:48:29,989 --> 00:48:34,429
alignment but it should work on these

1064
00:48:32,119 --> 00:48:37,969
two sprite things I want them to both

1065
00:48:34,429 --> 00:48:39,319
have concrete knowledge of the worlds

1066
00:48:37,969 --> 00:48:44,059
base points they're trying to align

1067
00:48:39,320 --> 00:48:46,940
right and so if I create this you know

1068
00:48:44,059 --> 00:48:48,289
the the sprite values for up right what

1069
00:48:46,940 --> 00:48:50,360
they're essentially doing is they're

1070
00:48:48,289 --> 00:48:53,150
saying okay you're giving me some point

1071
00:48:50,360 --> 00:48:55,010
like here and what I was doing is I say

1072
00:48:53,150 --> 00:48:56,960
well all right let's walk out about this

1073
00:48:55,010 --> 00:48:58,970
far right depending on the height of the

1074
00:48:56,960 --> 00:49:00,860
sprite and then we'll tilt it backwards

1075
00:48:58,969 --> 00:49:04,399
like that right so assuming that the

1076
00:49:00,860 --> 00:49:06,680
camera is looking from here you know and

1077
00:49:04,400 --> 00:49:11,480
that's gonna be the sprite points so I'm

1078
00:49:06,679 --> 00:49:13,759
gonna return min pees down here oops you

1079
00:49:11,480 --> 00:49:15,199
know and this part is the y-axis since

1080
00:49:13,760 --> 00:49:17,120
we're looking from the side here right

1081
00:49:15,199 --> 00:49:20,419
and you know if we wanted to draw it out

1082
00:49:17,119 --> 00:49:21,589
more completely it would be like okay if

1083
00:49:20,420 --> 00:49:24,050
we were looking from the cameras

1084
00:49:21,590 --> 00:49:25,490
perspective you give this point it walks

1085
00:49:24,050 --> 00:49:28,820
a little bit towards us in a little bit

1086
00:49:25,489 --> 00:49:31,279
out right we get sort of this we lie it

1087
00:49:28,820 --> 00:49:35,930
back a little bit and a little bit up

1088
00:49:31,280 --> 00:49:40,410
like that right we output this corner

1089
00:49:35,929 --> 00:49:43,018
point as min P we output these axes

1090
00:49:40,409 --> 00:49:45,750
right that's the y-axis this is the

1091
00:49:43,018 --> 00:49:48,469
x-axis and these are scaled right so it

1092
00:49:45,750 --> 00:49:52,349
includes that height value in there

1093
00:49:48,469 --> 00:49:54,298
that's what we're giving back now when

1094
00:49:52,349 --> 00:49:56,940
we do that when we get back them you

1095
00:49:54,298 --> 00:49:58,469
know these these coordinates what we

1096
00:49:56,940 --> 00:50:00,059
were doing before is we were passing in

1097
00:49:58,469 --> 00:50:02,189
the alignment point which was this thing

1098
00:50:00,059 --> 00:50:03,960
and then we were actually giving back to

1099
00:50:02,190 --> 00:50:06,539
world space like here's exactly where to

1100
00:50:03,960 --> 00:50:09,240
draw it I took out that alignment point

1101
00:50:06,539 --> 00:50:12,809
and so now what I want to do is have

1102
00:50:09,239 --> 00:50:15,000
zero zero zero be the alignment point so

1103
00:50:12,809 --> 00:50:17,480
the coordinates you get back are just

1104
00:50:15,000 --> 00:50:20,489
implicitly aligned around zero zero zero

1105
00:50:17,480 --> 00:50:22,588
so if you were to look at the sprite

1106
00:50:20,489 --> 00:50:24,778
itself like from the side on again

1107
00:50:22,588 --> 00:50:26,788
whatever the alignment point was that

1108
00:50:24,778 --> 00:50:29,429
you were trying to align to like say

1109
00:50:26,789 --> 00:50:31,440
this should actually be at zero zero

1110
00:50:29,429 --> 00:50:34,169
zero relative to where you're trying to

1111
00:50:31,440 --> 00:50:37,019
align right that means this whole thing

1112
00:50:34,170 --> 00:50:39,599
needs to get shifted down to line up

1113
00:50:37,018 --> 00:50:43,288
properly with that alignment point and

1114
00:50:39,599 --> 00:50:46,559
put it in the correct space okay so that

1115
00:50:43,289 --> 00:50:50,240
means I actually don't want that shift

1116
00:50:46,559 --> 00:50:54,740
the Y shifting that was happening here I

1117
00:50:50,239 --> 00:50:58,500
don't really want that to be happening

1118
00:50:54,739 --> 00:51:03,358
in the interior I want it to happen in

1119
00:50:58,500 --> 00:51:05,730
the exterior code okay and that's the

1120
00:51:03,358 --> 00:51:07,528
part I was trying to get to so the

1121
00:51:05,730 --> 00:51:09,358
reason I wanted in the exterior code is

1122
00:51:07,528 --> 00:51:11,429
because the exterior code needs to think

1123
00:51:09,358 --> 00:51:15,420
about it in order to figure out exactly

1124
00:51:11,429 --> 00:51:19,440
how it should snap the points together

1125
00:51:15,420 --> 00:51:21,838
right and so I just wanted to make sure

1126
00:51:19,440 --> 00:51:24,900
that was you know clearer in your head

1127
00:51:21,838 --> 00:51:27,449
as I do these next few things so that

1128
00:51:24,900 --> 00:51:29,970
means this code here right which I do

1129
00:51:27,449 --> 00:51:32,879
want to remember because it's good it's

1130
00:51:29,969 --> 00:51:35,548
the thing that actually worked right so

1131
00:51:32,880 --> 00:51:37,500
we like that but I don't actually want

1132
00:51:35,548 --> 00:51:40,798
to do it here what I want to do instead

1133
00:51:37,500 --> 00:51:42,778
is I want to retain exactly this piece

1134
00:51:40,798 --> 00:51:45,210
of information the thing that we were

1135
00:51:42,778 --> 00:51:49,259
doing before where we just create the

1136
00:51:45,210 --> 00:51:51,960
alignment I want to do that still okay

1137
00:51:49,259 --> 00:51:54,110
so even though this is gonna bring us

1138
00:51:51,960 --> 00:51:56,949
back to our old crappy

1139
00:51:54,110 --> 00:52:00,250
bad way of sorting that isn't good right

1140
00:51:56,949 --> 00:52:03,349
that's okay cuz it's temporary yeah

1141
00:52:00,250 --> 00:52:06,829
alright so now we should get exactly

1142
00:52:03,349 --> 00:52:11,150
aligned and we do right so Ennis and if

1143
00:52:06,829 --> 00:52:12,679
I go in here and switch to switch to a

1144
00:52:11,150 --> 00:52:16,010
debug mode where I look at those points

1145
00:52:12,679 --> 00:52:18,529
again if I add a point on here the two

1146
00:52:16,010 --> 00:52:21,320
parent matching point right whatever it

1147
00:52:18,530 --> 00:52:23,240
is so that's that red point there if I

1148
00:52:21,320 --> 00:52:25,010
look in here and I set the green point

1149
00:52:23,239 --> 00:52:29,599
the green point and the red point should

1150
00:52:25,010 --> 00:52:32,480
always agree right and they do right so

1151
00:52:29,599 --> 00:52:35,750
they're directly snapped one to the

1152
00:52:32,480 --> 00:52:39,170
other and that's what I want it so if I

1153
00:52:35,750 --> 00:52:40,969
start from that and now say okay how do

1154
00:52:39,170 --> 00:52:43,010
i construct that exterior code to snap

1155
00:52:40,969 --> 00:52:44,589
these two things together in a way that

1156
00:52:43,010 --> 00:52:48,650
makes sense right

1157
00:52:44,590 --> 00:52:52,970
well excuse me I apologize for blowing

1158
00:52:48,650 --> 00:52:59,869
my nose one of the consequences of

1159
00:52:52,969 --> 00:53:02,869
having too thick all right so if we take

1160
00:52:59,869 --> 00:53:04,639
a look at what's happening here what

1161
00:53:02,869 --> 00:53:06,889
were we sort of doing before where we

1162
00:53:04,639 --> 00:53:08,629
were just testing that code well all we

1163
00:53:06,889 --> 00:53:10,309
were really doing was saying look

1164
00:53:08,630 --> 00:53:12,769
instead of actually producing the

1165
00:53:10,309 --> 00:53:14,659
alignment point let's just tilt this

1166
00:53:12,769 --> 00:53:16,759
thing let's just push it outward and why

1167
00:53:14,659 --> 00:53:19,159
so that we still stay on the same z

1168
00:53:16,760 --> 00:53:22,790
plane as we were right just stay on the

1169
00:53:19,159 --> 00:53:24,049
same z plane well it's pretty easy for

1170
00:53:22,789 --> 00:53:26,210
me to make sure that we stay on the same

1171
00:53:24,050 --> 00:53:29,180
z plane as wherever I'm gonna align to

1172
00:53:26,210 --> 00:53:32,690
all I would have to do is look at what

1173
00:53:29,179 --> 00:53:37,129
the sprites outcoming Z values were form

1174
00:53:32,690 --> 00:53:39,050
in P and shift it back up right so if I

1175
00:53:37,130 --> 00:53:41,720
want to do essentially the same thing

1176
00:53:39,050 --> 00:53:45,289
that we were doing here I can I can just

1177
00:53:41,719 --> 00:53:51,469
do that myself on the outside right so

1178
00:53:45,289 --> 00:53:53,570
right here exactly this operation that

1179
00:53:51,469 --> 00:53:56,689
we were doing before where I say look I

1180
00:53:53,570 --> 00:53:59,240
want to shift this out I can do right

1181
00:53:56,690 --> 00:54:03,650
like this and if you look at what's

1182
00:53:59,239 --> 00:54:06,169
happening with the y axis there this

1183
00:54:03,650 --> 00:54:07,260
alignment would have been modifying the

1184
00:54:06,170 --> 00:54:09,090
Y in

1185
00:54:07,260 --> 00:54:12,180
some way right it definitely would have

1186
00:54:09,090 --> 00:54:15,210
modified the why of the alignment and if

1187
00:54:12,179 --> 00:54:17,819
we don't want the Y alignment to have

1188
00:54:15,210 --> 00:54:20,190
been modified you know look if we if we

1189
00:54:17,820 --> 00:54:22,559
don't want the Z or the Y or whatever to

1190
00:54:20,190 --> 00:54:25,800
have changed we can always also just

1191
00:54:22,559 --> 00:54:28,349
cold set those right so maybe we want

1192
00:54:25,800 --> 00:54:31,170
our Z to just always be like we don't

1193
00:54:28,349 --> 00:54:33,029
want our z axis to have been altered we

1194
00:54:31,170 --> 00:54:36,000
want to base it exactly on where it was

1195
00:54:33,030 --> 00:54:40,710
right we can also do anything we want to

1196
00:54:36,000 --> 00:54:43,980
do in that regard trivially right so on

1197
00:54:40,710 --> 00:54:47,880
the outside we can always fuss with what

1198
00:54:43,980 --> 00:54:51,329
comes back before we actually do any

1199
00:54:47,880 --> 00:54:54,780
additional work don't what is this bug

1200
00:54:51,329 --> 00:54:57,920
by the way we saw this before I wish we

1201
00:54:54,780 --> 00:54:57,920
had it in a debug build

1202
00:55:06,679 --> 00:55:17,299
it's asking to find an alignment and the

1203
00:55:13,639 --> 00:55:18,409
align points for a bitmap info let's

1204
00:55:17,300 --> 00:55:19,970
actually take a look at it

1205
00:55:18,409 --> 00:55:24,049
we saw it once before I'd like to know

1206
00:55:19,969 --> 00:55:25,730
what it is so we can fix it of course

1207
00:55:24,050 --> 00:55:29,140
the variable is optimized away I'm gonna

1208
00:55:25,730 --> 00:55:29,139
look at the disassembly really quickly

1209
00:55:33,099 --> 00:55:36,099
what

1210
00:55:44,309 --> 00:55:53,849
you I mean of course you can show me the

1211
00:55:48,579 --> 00:55:57,400
disassembly just show me where are you I

1212
00:55:53,849 --> 00:56:00,429
mean that's weird like just show me

1213
00:55:57,400 --> 00:56:03,150
where the code broke not that hard

1214
00:56:00,429 --> 00:56:05,889
alright anyway uh so just looking here

1215
00:56:03,150 --> 00:56:08,460
what are we actually trying to access so

1216
00:56:05,889 --> 00:56:10,868
it looks like we're loading off of RSI

1217
00:56:08,460 --> 00:56:16,210
it thinks that was the parent bitmap

1218
00:56:10,869 --> 00:56:20,200
info that was put into RSI it's looking

1219
00:56:16,210 --> 00:56:22,449
six off of RSI and then trying to access

1220
00:56:20,199 --> 00:56:33,939
it so if we actually look at the source

1221
00:56:22,449 --> 00:56:38,829
code there at this inline frame so the

1222
00:56:33,940 --> 00:56:40,690
align points P index I guess we don't

1223
00:56:38,829 --> 00:56:42,009
necessarily know what P index is but

1224
00:56:40,690 --> 00:56:44,590
maybe we can tell that from the

1225
00:56:42,010 --> 00:56:45,820
disassembly as well this is kind of a

1226
00:56:44,590 --> 00:56:50,460
pain in the butt to have to go back and

1227
00:56:45,820 --> 00:56:54,100
forth this way so in the disassembly

1228
00:56:50,460 --> 00:56:55,210
here we're doing a loop right so we're

1229
00:56:54,099 --> 00:56:59,108
testing clcl

1230
00:56:55,210 --> 00:57:01,650
updating render entities we jump back to

1231
00:56:59,108 --> 00:57:01,650
13

1232
00:57:08,519 --> 00:57:12,650
where is the actual loop here

1233
00:57:16,179 --> 00:57:22,819
whatever say we're comping can I can I

1234
00:57:20,269 --> 00:57:26,960
see you know what here's what I'm

1235
00:57:22,820 --> 00:57:33,890
wondering can I like see this at the

1236
00:57:26,960 --> 00:57:36,159
same time is that is that gonna be

1237
00:57:33,889 --> 00:57:36,159
possible

1238
00:57:40,588 --> 00:57:43,338
can we

1239
00:57:51,269 --> 00:57:55,800
so all I really want to do is I want to

1240
00:57:53,760 --> 00:57:56,910
see this routine source code and then I

1241
00:57:55,800 --> 00:57:59,610
want to look at this

1242
00:57:56,909 --> 00:58:03,629
disassembly at the same time but that

1243
00:57:59,610 --> 00:58:05,660
apparently is like way past what you

1244
00:58:03,630 --> 00:58:13,289
might want it to bugger to do apparently

1245
00:58:05,659 --> 00:58:14,219
can I do this okay anyways so I just

1246
00:58:13,289 --> 00:58:15,630
want to look and see if I can

1247
00:58:14,219 --> 00:58:17,009
deconstruct what's actually going on in

1248
00:58:15,630 --> 00:58:19,050
here just to give it a little bit more

1249
00:58:17,010 --> 00:58:21,840
so I can sort of see exactly what's

1250
00:58:19,050 --> 00:58:25,410
happening even the debugger won't tell

1251
00:58:21,840 --> 00:58:27,240
me so if we take a look at here what

1252
00:58:25,409 --> 00:58:30,389
we're looking at we got a P index it's

1253
00:58:27,239 --> 00:58:32,459
looping from zero to a known number

1254
00:58:30,389 --> 00:58:33,989
which is like twelve or something and

1255
00:58:32,460 --> 00:58:39,000
remember how many there are of this

1256
00:58:33,989 --> 00:58:42,659
right but that's all it's doing so if we

1257
00:58:39,000 --> 00:58:45,599
take a look at at if we try to reverse

1258
00:58:42,659 --> 00:58:46,980
engineer what the assem you know which

1259
00:58:45,599 --> 00:58:49,259
assembly language goes with this thing

1260
00:58:46,980 --> 00:58:51,150
since the debugger doesn't know but we

1261
00:58:49,260 --> 00:58:52,980
can probably figure it out if you look

1262
00:58:51,150 --> 00:58:55,858
at what's going on in here you can

1263
00:58:52,980 --> 00:58:57,840
actually see right there that's a comp

1264
00:58:55,858 --> 00:59:01,590
instruction that's compare this register

1265
00:58:57,840 --> 00:59:05,519
with this constant value and if we take

1266
00:59:01,590 --> 00:59:08,309
a look right at what that is that's oxo

1267
00:59:05,519 --> 00:59:10,619
C in for some reason assembly has the

1268
00:59:08,309 --> 00:59:13,590
convention of writing H at the end of

1269
00:59:10,619 --> 00:59:17,369
hexadecimal numbers whereas the C its Oh

1270
00:59:13,590 --> 00:59:22,140
X but there's the 12 right which if I

1271
00:59:17,369 --> 00:59:25,460
remember correctly is exactly how many a

1272
00:59:22,139 --> 00:59:25,460
line points there are right

1273
00:59:27,210 --> 00:59:40,119
um know how to actually get I'll just

1274
00:59:34,000 --> 00:59:45,190
look at it myself what's this an H H a

1275
00:59:40,119 --> 00:59:47,619
bitmap I guess yeah so you can see there

1276
00:59:45,190 --> 00:59:49,389
that that's that's the 12 so I'm just

1277
00:59:47,619 --> 00:59:51,039
using that right you can see how I'm

1278
00:59:49,389 --> 00:59:53,259
doing this just trying to explain how

1279
00:59:51,039 --> 00:59:54,849
you reverse engineer the assembly so

1280
00:59:53,260 --> 01:00:00,400
when they come when the debugger is a

1281
00:59:54,849 --> 01:00:02,049
piece of junk um because it always is so

1282
01:00:00,400 --> 01:00:03,970
you know trying to deconstruct where we

1283
01:00:02,050 --> 01:00:08,140
are on this loop you can see that comp

1284
01:00:03,969 --> 01:00:09,939
with 12 that's probably going to be this

1285
01:00:08,139 --> 01:00:14,949
loop condition because we were trying to

1286
01:00:09,940 --> 01:00:18,280
go from 0 to 12 so that strongly

1287
01:00:14,949 --> 01:00:21,599
suggests that this is the thing that's

1288
01:00:18,280 --> 01:00:23,260
doing that loop right let me go and see

1289
01:00:21,599 --> 01:00:28,150
if we go to 12

1290
01:00:23,260 --> 01:00:30,340
so when we do that that comp and we see

1291
01:00:28,150 --> 01:00:32,139
whether it's 12 or not that gives us an

1292
01:00:30,340 --> 01:00:32,680
indication that that's this piece of

1293
01:00:32,139 --> 01:00:38,589
code

1294
01:00:32,679 --> 01:00:42,250
it suggests that r9d right that is the

1295
01:00:38,590 --> 01:00:44,680
register that would be holding the P

1296
01:00:42,250 --> 01:00:48,219
index and what I wanted to know is I

1297
01:00:44,679 --> 01:00:50,529
wanted to know what the P index was I'm

1298
01:00:48,219 --> 01:00:54,789
assuming it's zero but I just wanted to

1299
01:00:50,530 --> 01:00:56,500
verify that fact for myself right so if

1300
01:00:54,789 --> 01:00:59,650
we look at what's going on here we're

1301
01:00:56,500 --> 01:01:02,380
gonna do an Inc r9d and we're gonna see

1302
01:00:59,650 --> 01:01:04,180
if we get it so that pretty much tells

1303
01:01:02,380 --> 01:01:07,869
me that that's the loop

1304
01:01:04,179 --> 01:01:10,359
let's take a look it is zero so it's our

1305
01:01:07,869 --> 01:01:12,400
first time through this loop that's all

1306
01:01:10,360 --> 01:01:15,280
I wanted to know because I assumed it

1307
01:01:12,400 --> 01:01:18,670
was but didn't want to you know be wrong

1308
01:01:15,280 --> 01:01:20,740
okay so then we're coming to this line

1309
01:01:18,670 --> 01:01:23,409
and the question is if we're looking at

1310
01:01:20,739 --> 01:01:25,629
the zero with one of this right then

1311
01:01:23,409 --> 01:01:30,879
presumably this bitmap info structure is

1312
01:01:25,630 --> 01:01:34,539
bogus it's not a valid value right so

1313
01:01:30,880 --> 01:01:39,690
what's going on there are si appears to

1314
01:01:34,539 --> 01:01:39,690
be where that was loaded

1315
01:01:39,699 --> 01:01:49,118
I guess because this looks like the

1316
01:01:47,019 --> 01:01:53,099
thing that was loading the bitmap info

1317
01:01:49,119 --> 01:01:53,099
in right

1318
01:01:53,880 --> 01:02:06,599
probably that seems to me to be the case

1319
01:02:01,630 --> 01:02:13,200
so in theory if I do Aris eye on this oh

1320
01:02:06,599 --> 01:02:13,200
and I'm apparently very wrong

1321
01:02:18,289 --> 01:02:27,650
oh okay I'm sorry I totally read that

1322
01:02:25,369 --> 01:02:29,929
wrong as sometimes I get confused

1323
01:02:27,650 --> 01:02:32,660
because in the debugger they do stuff

1324
01:02:29,929 --> 01:02:35,329
like this which isn't that's not

1325
01:02:32,659 --> 01:02:37,129
assembly language like there's no you

1326
01:02:35,329 --> 01:02:38,630
know there's no variables in it so

1327
01:02:37,130 --> 01:02:40,519
sometimes I get confused when I look at

1328
01:02:38,630 --> 01:02:42,769
stuff like that and I'm like thinking

1329
01:02:40,519 --> 01:02:44,360
it's doing something it's not this is

1330
01:02:42,769 --> 01:02:46,610
actually loading off of that pointer so

1331
01:02:44,360 --> 01:02:48,230
it's it's loading something off of the

1332
01:02:46,610 --> 01:02:49,610
parent bitmap info if that's even

1333
01:02:48,230 --> 01:02:51,289
accurate which we don't know what that

1334
01:02:49,610 --> 01:02:53,329
is but so the thing they're loading is

1335
01:02:51,289 --> 01:03:01,009
some number that's in there

1336
01:02:53,329 --> 01:03:02,569
my guess is actually that maybe because

1337
01:03:01,010 --> 01:03:07,190
there's nothing in particular you would

1338
01:03:02,570 --> 01:03:09,920
load out of there and you know adding

1339
01:03:07,190 --> 01:03:17,269
six to it right what is that trying to

1340
01:03:09,920 --> 01:03:19,280
do yeah I'm not sure so let's keep

1341
01:03:17,269 --> 01:03:23,599
trying to parse this apart here and see

1342
01:03:19,280 --> 01:03:29,930
what we're doing this right here is a

1343
01:03:23,599 --> 01:03:32,000
clear so it's putting zero into

1344
01:03:29,929 --> 01:03:34,909
something so this must be like in the

1345
01:03:32,000 --> 01:03:39,409
preamble code here we must be looking at

1346
01:03:34,909 --> 01:03:39,859
some part do go to source on this there

1347
01:03:39,409 --> 01:03:42,279
we go

1348
01:03:39,860 --> 01:03:47,289
you must be looking at something out

1349
01:03:42,280 --> 01:03:47,290
here I would guess

1350
01:03:51,929 --> 01:03:56,940
but I'll be honest I'm not sure what

1351
01:04:04,179 --> 01:04:07,230
let's get that one more time

1352
01:04:07,730 --> 01:04:10,730
well

1353
01:04:51,809 --> 01:04:56,970
so I'm not exactly sure what it's doing

1354
01:04:54,670 --> 01:04:56,970
here

1355
01:05:05,130 --> 01:05:10,950
it's doing a comparison against r15 D

1356
01:05:08,760 --> 01:05:15,990
and I'm not sure let's take a look and

1357
01:05:10,949 --> 01:05:19,409
see it's doing a comparison against

1358
01:05:15,989 --> 01:05:25,619
three that may be the thing that's

1359
01:05:19,409 --> 01:05:30,109
testing the type right so what it could

1360
01:05:25,619 --> 01:05:30,109
be doing is saying look RSI

1361
01:05:37,039 --> 01:05:45,389
okay I wasn't wrong

1362
01:05:40,050 --> 01:05:47,280
so RSI is the offset that it's trying to

1363
01:05:45,389 --> 01:05:53,400
load from it probably just had a zero

1364
01:05:47,280 --> 01:05:57,599
pointer to start with right and this

1365
01:05:53,400 --> 01:05:59,400
right here was trying to get that it was

1366
01:05:57,599 --> 01:06:04,320
trying to get that portion of the value

1367
01:05:59,400 --> 01:06:08,490
right so I'm assuming if we look at

1368
01:06:04,320 --> 01:06:11,760
alignment point that it's six up for the

1369
01:06:08,489 --> 01:06:14,489
type right so right you can see it doing

1370
01:06:11,760 --> 01:06:16,020
its ad six here where's that coming from

1371
01:06:14,489 --> 01:06:17,819
so I think what it's doing is it loads

1372
01:06:16,019 --> 01:06:19,170
the base pointer which just thinks it's

1373
01:06:17,820 --> 01:06:22,380
pointing to the beginning of alignment

1374
01:06:19,170 --> 01:06:24,630
point it's got two bytes for the first

1375
01:06:22,380 --> 01:06:27,030
one p % two bytes for the next one to

1376
01:06:24,630 --> 01:06:30,088
exercise that's six bytes up and there's

1377
01:06:27,030 --> 01:06:33,060
the type so this right here is saying

1378
01:06:30,088 --> 01:06:35,730
alright let's let's load RSI out of this

1379
01:06:33,059 --> 01:06:39,239
so it's got this what this load right

1380
01:06:35,730 --> 01:06:43,280
here this load failed so there was a

1381
01:06:39,239 --> 01:06:48,419
zero in here it then looked six up and

1382
01:06:43,280 --> 01:06:50,069
tried to get the type out right right

1383
01:06:48,420 --> 01:06:52,349
here where it actually I don't know what

1384
01:06:50,068 --> 01:06:55,259
I accidentally just clicked right here

1385
01:06:52,349 --> 01:06:57,809
where it tried to load that type it is

1386
01:06:55,260 --> 01:07:00,089
where it crashed so that's why it was

1387
01:06:57,809 --> 01:07:03,869
six so RSI was the pointer I wasn't

1388
01:07:00,088 --> 01:07:07,799
wrong before I was just not thinking all

1389
01:07:03,869 --> 01:07:10,829
right so the question is why is bitmap

1390
01:07:07,800 --> 01:07:14,390
info being passed as a zero there right

1391
01:07:10,829 --> 01:07:19,670
so if we unwind one level in the stack

1392
01:07:14,389 --> 01:07:25,199
we can see that that parent bitmap info

1393
01:07:19,670 --> 01:07:29,039
was supposed to come from here so you

1394
01:07:25,199 --> 01:07:32,429
know whatever this bitmap info array has

1395
01:07:29,039 --> 01:07:36,599
in it we were coming in here and asking

1396
01:07:32,429 --> 01:07:40,949
for one that we don't have right it does

1397
01:07:36,599 --> 01:07:45,059
not exist and so how does this happen

1398
01:07:40,949 --> 01:07:47,899
right how has this happened to us can we

1399
01:07:45,059 --> 01:07:47,900
access that array

1400
01:07:48,250 --> 01:07:59,510
yes we can I where is that array defined

1401
01:07:54,338 --> 01:08:01,778
entity max piece count so there's a

1402
01:07:59,510 --> 01:08:06,250
couple of years right who knows how many

1403
01:08:01,778 --> 01:08:11,568
they're all probably zero yeah right

1404
01:08:06,250 --> 01:08:12,219
so we're just wait a minute no that's

1405
01:08:11,568 --> 01:08:14,869
wrong too

1406
01:08:12,219 --> 01:08:19,908
that's just garbage that's not telling

1407
01:08:14,869 --> 01:08:22,520
me what I wanted at all that's what I

1408
01:08:19,908 --> 01:08:24,829
was trying to say um so we look at these

1409
01:08:22,520 --> 01:08:26,929
bitmap infos in the array there's

1410
01:08:24,829 --> 01:08:30,289
nothing in the array right it's just

1411
01:08:26,929 --> 01:08:31,489
it's empty and it gets up to I don't

1412
01:08:30,289 --> 01:08:33,798
know how many years I think you'd have

1413
01:08:31,488 --> 01:08:37,218
four so here's where the array ends I

1414
01:08:33,798 --> 01:08:38,179
remember what this value is but so I

1415
01:08:37,219 --> 01:08:39,889
think you're allowed to have four of

1416
01:08:38,179 --> 01:08:42,109
those so this is the array nothing has

1417
01:08:39,889 --> 01:08:44,319
been filled into the right yet and so

1418
01:08:42,109 --> 01:08:49,609
what's happening is there's a zero

1419
01:08:44,319 --> 01:08:52,210
meaning right we're tying its to we're

1420
01:08:49,609 --> 01:08:56,719
asking it to look up one of these things

1421
01:08:52,210 --> 01:08:59,298
but we must be on 0 because otherwise we

1422
01:08:56,719 --> 01:09:02,359
would have written them back I would

1423
01:08:59,298 --> 01:09:07,579
think so when we're going to access

1424
01:09:02,359 --> 01:09:13,329
these like this we must be getting a

1425
01:09:07,579 --> 01:09:19,899
parent aligned type that's nonzero on

1426
01:09:13,329 --> 01:09:19,899
the first person right

1427
01:09:22,298 --> 01:09:29,338
I mean that's fundamentally what's

1428
01:09:26,920 --> 01:09:29,338
happening

1429
01:09:34,689 --> 01:09:40,289
and I'm not sure why we're getting that

1430
01:09:43,890 --> 01:09:49,030
it seems like some kind of a bug in went

1431
01:09:47,289 --> 01:09:51,039
you know an entity we've constructed

1432
01:09:49,029 --> 01:09:58,420
somehow we've constructed an entity with

1433
01:09:51,039 --> 01:10:00,609
as its first thing something that attach

1434
01:09:58,420 --> 01:10:02,890
unfortunately I don't know how to really

1435
01:10:00,609 --> 01:10:12,239
look into it in more detail than that

1436
01:10:02,890 --> 01:10:16,000
see who was responsible looking at it

1437
01:10:12,239 --> 01:10:20,800
it's a great a be cat so this is Molly

1438
01:10:16,000 --> 01:10:26,350
beans fault Molly is causing causing the

1439
01:10:20,800 --> 01:10:29,860
problem right but I'm not 100% sure how

1440
01:10:26,350 --> 01:10:33,250
because the pieces of Molly should not

1441
01:10:29,859 --> 01:10:34,689
have had that property we can guard

1442
01:10:33,250 --> 01:10:37,539
against this kind of a crash really

1443
01:10:34,689 --> 01:10:40,299
easily and probably should but before I

1444
01:10:37,539 --> 01:10:42,010
do that I would like to understand how

1445
01:10:40,300 --> 01:10:45,670
we got a piece that did this in the

1446
01:10:42,010 --> 01:10:48,880
first place so I'm looking here at the

1447
01:10:45,670 --> 01:10:52,409
bitmap and you can actually see that

1448
01:10:48,880 --> 01:10:56,289
it's parent line type is very clearly 0

1449
01:10:52,409 --> 01:11:04,869
so the bitmap piece in question when we

1450
01:10:56,289 --> 01:11:12,720
did get this bitmap info should have

1451
01:11:04,869 --> 01:11:12,720
given us back a parent a line type

1452
01:11:19,399 --> 01:11:22,579
it should have given it fact it's not

1453
01:11:21,349 --> 01:11:25,329
even we're not even talking about this

1454
01:11:22,579 --> 01:11:28,329
we're talking about this right here

1455
01:11:25,329 --> 01:11:28,329
right

1456
01:11:33,979 --> 01:11:45,089
so I don't understand how we were ever

1457
01:11:36,988 --> 01:11:54,718
able to get inside that if statement I'd

1458
01:11:45,090 --> 01:11:56,909
like to go back to the disassembly so we

1459
01:11:54,719 --> 01:11:59,789
know that there should have been a test

1460
01:11:56,909 --> 01:12:05,159
to make sure that this value was not

1461
01:11:59,789 --> 01:12:07,649
zero right and because that's

1462
01:12:05,159 --> 01:12:09,889
specifically not here we don't care

1463
01:12:07,649 --> 01:12:12,689
about this

1464
01:12:09,890 --> 01:12:15,090
here's that source code here's this if

1465
01:12:12,689 --> 01:12:17,759
statement right bitmap P stop parent a

1466
01:12:15,090 --> 01:12:21,560
line type we should not be able to get

1467
01:12:17,760 --> 01:12:27,480
into this code if that was not true

1468
01:12:21,560 --> 01:12:31,800
right so you can see here that the last

1469
01:12:27,479 --> 01:12:36,119
thing we tested was CL on CL right we

1470
01:12:31,800 --> 01:12:37,920
were like CL equal to CL that was the

1471
01:12:36,119 --> 01:12:41,399
last thing we tested right or I should

1472
01:12:37,920 --> 01:12:44,010
say we asked the processor to compute

1473
01:12:41,399 --> 01:12:46,049
the difference between CL CL which will

1474
01:12:44,010 --> 01:12:49,820
set a bunch of flags that say you know

1475
01:12:46,050 --> 01:12:54,900
it's greater than or it's whatever right

1476
01:12:49,819 --> 01:13:06,569
we then did a jump to this effective

1477
01:12:54,899 --> 01:13:10,849
address a 5a which is way down here we

1478
01:13:06,569 --> 01:13:10,849
then jumped all the way down here if

1479
01:13:11,029 --> 01:13:23,000
based on the test so what what is this

1480
01:13:17,130 --> 01:13:23,000
probably doing for techs mmm

1481
01:13:23,210 --> 01:13:28,970
I mean that certainly could be

1482
01:13:25,850 --> 01:13:40,100
consistent with this spent a lot of chef

1483
01:13:28,970 --> 01:13:42,079
PS and unpacking going on here so yeah I

1484
01:13:40,100 --> 01:13:44,660
think that's right because all of this

1485
01:13:42,079 --> 01:13:47,090
shut this shuffling and unpacking is

1486
01:13:44,659 --> 01:13:49,729
probably taking the 16-bit values and

1487
01:13:47,090 --> 01:13:52,940
turning them into floats which you would

1488
01:13:49,729 --> 01:13:55,879
need to do so I I can believe that this

1489
01:13:52,939 --> 01:14:03,679
is actually doing that test so the cl-cl

1490
01:13:55,880 --> 01:14:18,890
test is probably this right so what is

1491
01:14:03,680 --> 01:14:21,470
CL CL is zero that's what we would

1492
01:14:18,890 --> 01:14:27,500
expect it to be to not enter this

1493
01:14:21,470 --> 01:14:29,750
routine right where did we load that

1494
01:14:27,500 --> 01:14:31,100
from let me try to get further

1495
01:14:29,750 --> 01:14:36,699
confirmation that I'm looking at the

1496
01:14:31,100 --> 01:14:36,700
right test here where did we get it

1497
01:14:40,538 --> 01:14:48,729
yeah why am I not seeing that you can

1498
01:14:47,260 --> 01:14:51,280
imagine debuggers that were actually

1499
01:14:48,729 --> 01:14:53,500
cool right you just like say where was

1500
01:14:51,279 --> 01:14:59,559
CL loaded in it would just tell you it

1501
01:14:53,500 --> 01:15:01,538
knows right it can just look back I mean

1502
01:14:59,559 --> 01:15:02,440
across jumps I guess it can't because it

1503
01:15:01,538 --> 01:15:03,819
doesn't necessarily know if they were

1504
01:15:02,439 --> 01:15:08,129
taken or not but it could still tell you

1505
01:15:03,819 --> 01:15:08,130
where the possible places it was nearby

1506
01:15:16,689 --> 01:15:22,239
so CL is just ECX though now I think

1507
01:15:20,680 --> 01:15:24,539
about so CL is just a quick way of

1508
01:15:22,239 --> 01:15:27,159
saying yeah I'm bad with some of those

1509
01:15:24,539 --> 01:15:30,130
quick ratios so actually it's not that

1510
01:15:27,159 --> 01:15:33,189
hard because that's just gonna be this

1511
01:15:30,130 --> 01:15:36,340
register extended register it's just

1512
01:15:33,189 --> 01:15:39,359
it's just testing only the bottom part

1513
01:15:36,340 --> 01:15:41,260
of it right so if you do just to make

1514
01:15:39,359 --> 01:15:41,979
this a little clearer and that's a

1515
01:15:41,260 --> 01:15:45,310
little bit weird

1516
01:15:41,979 --> 01:15:49,059
it's the Intel naming thing is the same

1517
01:15:45,310 --> 01:15:50,980
I don't program enough Intel assembly to

1518
01:15:49,060 --> 01:15:53,520
have it like quick in my head but

1519
01:15:50,979 --> 01:16:00,339
basically like these registers right

1520
01:15:53,520 --> 01:16:02,290
they started out being just you know 16

1521
01:16:00,340 --> 01:16:04,569
bits probably I'm guessing so they

1522
01:16:02,289 --> 01:16:08,649
started out being like that big and then

1523
01:16:04,569 --> 01:16:11,529
they went to being you know that big and

1524
01:16:08,649 --> 01:16:14,559
then they went to being that big and you

1525
01:16:11,529 --> 01:16:18,969
can still refer to the sub portions of

1526
01:16:14,560 --> 01:16:21,760
them so if you say are a you know RCX

1527
01:16:18,970 --> 01:16:24,850
you're talking about the whole 64 bits

1528
01:16:21,760 --> 01:16:27,940
if you say ECX you're only talking about

1529
01:16:24,850 --> 01:16:31,539
the 32-bit value on the bottom and if

1530
01:16:27,939 --> 01:16:33,369
you just say like CL I guess I don't

1531
01:16:31,539 --> 01:16:36,760
know so I don't remember how that works

1532
01:16:33,369 --> 01:16:39,189
if CL is only part of the register even

1533
01:16:36,760 --> 01:16:42,909
further but if you say that you're

1534
01:16:39,189 --> 01:16:45,159
talking about the non e non r version

1535
01:16:42,909 --> 01:16:48,819
then you're talking about just the

1536
01:16:45,159 --> 01:16:50,349
bottom so this is actually the part that

1537
01:16:48,819 --> 01:16:52,239
we're looking at this is the register

1538
01:16:50,350 --> 01:16:55,270
that we're looking at here I believe and

1539
01:16:52,239 --> 01:16:57,729
you can see that again not being

1540
01:16:55,270 --> 01:17:00,490
referred to as our CX but it's being

1541
01:16:57,729 --> 01:17:07,209
referred to as EC X here it's trying to

1542
01:17:00,489 --> 01:17:10,889
load this as just the bottom 32 bits of

1543
01:17:07,210 --> 01:17:16,930
that whatever's at that location right

1544
01:17:10,890 --> 01:17:21,850
so in theory RSP because that I believe

1545
01:17:16,930 --> 01:17:27,550
would be the stack there right am I

1546
01:17:21,850 --> 01:17:30,579
wrong about that that shouldn't have

1547
01:17:27,550 --> 01:17:34,090
changed so no one probably touched

1548
01:17:30,578 --> 01:17:36,549
on our way down here so RSP I would

1549
01:17:34,090 --> 01:17:39,130
assume we can just look and see what's

1550
01:17:36,550 --> 01:17:45,099
at that location to see what actually

1551
01:17:39,130 --> 01:17:50,500
got loaded in you know into ECX at this

1552
01:17:45,099 --> 01:17:53,078
point and then and then it just gets

1553
01:17:50,500 --> 01:18:05,889
tested so I think this is the location

1554
01:17:53,078 --> 01:18:07,479
we're looking for maybe right so that's

1555
01:18:05,889 --> 01:18:12,368
the actual place that we're looking for

1556
01:18:07,479 --> 01:18:13,868
and we loaded a 32-bit value out of it

1557
01:18:12,368 --> 01:18:15,639
but we're only testing the bottom part

1558
01:18:13,868 --> 01:18:17,198
of that anyway which makes sense because

1559
01:18:15,639 --> 01:18:25,179
the thing we were trying to test is only

1560
01:18:17,198 --> 01:18:28,539
supposed to be 16 bits long so if that

1561
01:18:25,179 --> 01:18:33,389
was an unsigned short pointer what would

1562
01:18:28,539 --> 01:18:37,170
it be so it's saying that that was 259

1563
01:18:33,389 --> 01:18:37,170
did I do that correctly

1564
01:19:07,078 --> 01:19:11,338
you sure I did that cuz that shouldn't

1565
01:19:09,269 --> 01:19:14,779
be right right because if we didn't

1566
01:19:11,338 --> 01:19:17,969
touch ECX since then although just test

1567
01:19:14,779 --> 01:19:21,499
here's the thing I don't remember what

1568
01:19:17,969 --> 01:19:24,889
tests effect on its register actually is

1569
01:19:21,498 --> 01:19:26,788
again just don't do nearly enough

1570
01:19:24,889 --> 01:19:29,939
assembly programming to remember stuff

1571
01:19:26,788 --> 01:19:32,488
like that I almost always ignore those

1572
01:19:29,939 --> 01:19:33,719
kind of things we're so far down the

1573
01:19:32,488 --> 01:19:37,438
rabbit hole at this point that I

1574
01:19:33,719 --> 01:19:39,859
actually just want to know though so I'm

1575
01:19:37,439 --> 01:19:42,269
gonna go ahead and do it how do I get I

1576
01:19:39,859 --> 01:19:47,789
just want to get back to the desktop

1577
01:19:42,269 --> 01:19:49,168
here so let's take a look I'm gonna go

1578
01:19:47,788 --> 01:19:50,998
ahead and pop over the architecture

1579
01:19:49,168 --> 01:19:53,010
reference man it's never too late to

1580
01:19:50,998 --> 01:19:56,818
learn assembly language folks don't let

1581
01:19:53,010 --> 01:19:58,739
anyone tell you otherwise um so you know

1582
01:19:56,819 --> 01:20:00,629
we've got the complete reference let's

1583
01:19:58,738 --> 01:20:02,488
just find it in fact I guess I can just

1584
01:20:00,628 --> 01:20:04,889
click on it in here it's usually the way

1585
01:20:02,488 --> 01:20:11,398
I do it so if we just scroll down here

1586
01:20:04,889 --> 01:20:13,708
and take a look that's the oh I opened

1587
01:20:11,399 --> 01:20:15,088
the wrong one that starts with B I need

1588
01:20:13,708 --> 01:20:18,868
a little bit back there we go I'm

1589
01:20:15,088 --> 01:20:22,998
through you so if I scroll through here

1590
01:20:18,868 --> 01:20:22,998
and find the test instruction

1591
01:20:30,270 --> 01:20:36,310
so I don't see anything that would

1592
01:20:34,300 --> 01:20:44,100
suggest that it would right back to the

1593
01:20:36,310 --> 01:20:48,970
sources I mean I don't know do you

1594
01:20:44,100 --> 01:20:51,490
so if you look at here you can see the

1595
01:20:48,970 --> 01:20:53,860
pseudocode for what intel is saying the

1596
01:20:51,489 --> 01:20:57,550
test instruction would do it says hey

1597
01:20:53,859 --> 01:21:01,659
we're going to compute the and of the

1598
01:20:57,550 --> 01:21:04,390
two things we you know we gave you and

1599
01:21:01,659 --> 01:21:10,210
then we're gonna set some flags right

1600
01:21:04,390 --> 01:21:13,960
based on that and it doesn't suggest at

1601
01:21:10,210 --> 01:21:17,789
least as far as I can see that source 1

1602
01:21:13,960 --> 01:21:22,890
in source 2 would ever get touched right

1603
01:21:17,789 --> 01:21:27,100
it should leave the value unadulterated

1604
01:21:22,890 --> 01:21:30,670
right so unless I'm reading that wrong

1605
01:21:27,100 --> 01:21:33,850
then I'm just confused when we're doing

1606
01:21:30,670 --> 01:21:37,480
the test cl-cl it seems like that should

1607
01:21:33,850 --> 01:21:40,410
leave it now what I don't know is maybe

1608
01:21:37,479 --> 01:21:43,199
because it's referred to as CL it's

1609
01:21:40,409 --> 01:21:48,010
clears part of the register because it

1610
01:21:43,199 --> 01:21:49,840
the top part is not referred to as part

1611
01:21:48,010 --> 01:21:52,900
of the CEO cuz like let's suppose we

1612
01:21:49,840 --> 01:21:54,250
took a look at this right of course even

1613
01:21:52,899 --> 01:21:57,579
if that were true you'd still see 3

1614
01:21:54,250 --> 01:21:59,439
there so what I don't understand is if

1615
01:21:57,579 --> 01:22:03,309
this is actually the assembly that

1616
01:21:59,439 --> 01:22:08,139
occurred what am I doing wrong we did a

1617
01:22:03,310 --> 01:22:10,270
mob oh well okay so I guess mob Z X we

1618
01:22:08,140 --> 01:22:11,789
should double-check what that does maybe

1619
01:22:10,270 --> 01:22:14,530
there's something special about that

1620
01:22:11,789 --> 01:22:21,609
that I'm forgetting but if this is the

1621
01:22:14,529 --> 01:22:23,380
last time we touched it I suppose our BP

1622
01:22:21,609 --> 01:22:29,769
and rst could point to the same thing

1623
01:22:23,380 --> 01:22:31,150
and this overrode it I mean that's the

1624
01:22:29,770 --> 01:22:34,450
only other thing it could be right

1625
01:22:31,149 --> 01:22:39,299
neither of those two things has been

1626
01:22:34,449 --> 01:22:39,300
touched right

1627
01:22:39,448 --> 01:22:56,879
ah nope here's the problem you see it so

1628
01:22:50,429 --> 01:23:02,779
ECX did get reloaded so when we tested

1629
01:22:56,880 --> 01:23:05,789
CL versus CL it obviously wasn't zero

1630
01:23:02,779 --> 01:23:09,090
and what we're getting here is it's just

1631
01:23:05,789 --> 01:23:12,269
it got overwritten by this so this may

1632
01:23:09,090 --> 01:23:14,819
be correct right this may actually be

1633
01:23:12,270 --> 01:23:17,010
what was in that location and it could

1634
01:23:14,819 --> 01:23:23,179
be that what was in that location was

1635
01:23:17,010 --> 01:23:26,640
actually 103 right was actually 259 and

1636
01:23:23,179 --> 01:23:29,880
that 259 would cause us to enter this

1637
01:23:26,640 --> 01:23:33,329
loop so the question is how the heck is

1638
01:23:29,880 --> 01:23:34,829
259 what's in there right why are we

1639
01:23:33,329 --> 01:23:38,760
getting something where the first thing

1640
01:23:34,829 --> 01:23:41,189
has a 259 in it so if we again look at

1641
01:23:38,760 --> 01:23:42,869
the hexadecimal for that what would is

1642
01:23:41,189 --> 01:23:47,250
to be nine even a valid value like

1643
01:23:42,869 --> 01:23:49,710
doesn't make sense right and so if you

1644
01:23:47,250 --> 01:23:51,329
look at what should be in an aligned

1645
01:23:49,710 --> 01:23:53,130
point type but because that's we're

1646
01:23:51,329 --> 01:23:56,460
looking at parent aligned type here

1647
01:23:53,130 --> 01:23:59,969
right you expect it to be something like

1648
01:23:56,460 --> 01:24:02,460
eight zero zero and then you know maybe

1649
01:23:59,969 --> 01:24:04,920
the three like one two three it could be

1650
01:24:02,460 --> 01:24:08,539
right base of neck could be totally

1651
01:24:04,920 --> 01:24:12,090
something that would be in there right I

1652
01:24:08,539 --> 01:24:17,399
don't think it should be but you know 0

1653
01:24:12,090 --> 01:24:21,210
1 2 3 that could be a value this bit

1654
01:24:17,399 --> 01:24:24,420
getting set we should never have done

1655
01:24:21,210 --> 01:24:29,219
that right there's no valid alignment

1656
01:24:24,420 --> 01:24:36,690
point that has a 1 in that location so

1657
01:24:29,219 --> 01:24:40,198
this looks very suspicious but again

1658
01:24:36,689 --> 01:24:45,329
unless I'm mistaken the actual

1659
01:24:40,198 --> 01:24:48,948
disassembly that we're seeing there how

1660
01:24:45,329 --> 01:24:48,948
do I actually go to area

1661
01:24:49,469 --> 01:24:56,969
that disassembly that we're seeing sure

1662
01:24:52,679 --> 01:24:59,729
looks like that's what was in there so

1663
01:24:56,969 --> 01:25:01,349
again let's do our due diligence and

1664
01:24:59,729 --> 01:25:06,329
just say if this was what we moved in

1665
01:25:01,349 --> 01:25:08,279
there and this code right here is the

1666
01:25:06,328 --> 01:25:11,340
only thing that could have interceded as

1667
01:25:08,279 --> 01:25:14,578
far as I can tell because and nothing

1668
01:25:11,340 --> 01:25:16,260
else actually did anything let's just

1669
01:25:14,578 --> 01:25:17,518
make sure that our SP and our VP aren't

1670
01:25:16,260 --> 01:25:19,679
pointing anywhere near each other I

1671
01:25:17,519 --> 01:25:31,050
don't see why they would be but let's

1672
01:25:19,679 --> 01:25:33,989
just see they're not gonna make it easy

1673
01:25:31,050 --> 01:25:43,619
on us are they so it turns out that our

1674
01:25:33,988 --> 01:25:48,658
SP and our BP are actually are actually

1675
01:25:43,618 --> 01:25:51,988
like right next to each other okay the

1676
01:25:48,658 --> 01:25:54,268
plot thickens if you ever wanted to see

1677
01:25:51,988 --> 01:25:57,118
having to dig through some assembly

1678
01:25:54,269 --> 01:25:58,469
language code to figure out where your

1679
01:25:57,118 --> 01:25:59,609
bug comes from well you're getting a

1680
01:25:58,469 --> 01:26:05,998
treat today because they're making it

1681
01:25:59,609 --> 01:26:07,319
hard on us I always like doing this

1682
01:26:05,998 --> 01:26:11,998
because it's educational for me like I

1683
01:26:07,319 --> 01:26:16,738
said I just I never did any x64 assembly

1684
01:26:11,998 --> 01:26:19,800
language programming I and so it's all

1685
01:26:16,738 --> 01:26:21,419
always educational right and little

1686
01:26:19,800 --> 01:26:25,800
things that you learn to do like oh

1687
01:26:21,420 --> 01:26:29,190
right you know remember to look for the

1688
01:26:25,800 --> 01:26:30,479
different versions of the register that

1689
01:26:29,189 --> 01:26:33,448
you wouldn't be used to doing on other

1690
01:26:30,479 --> 01:26:35,190
architectures necessarily every time you

1691
01:26:33,448 --> 01:26:36,928
get burned by something like that it's

1692
01:26:35,189 --> 01:26:38,728
like sticks in your head better so

1693
01:26:36,929 --> 01:26:41,279
you'll be quicker next time around right

1694
01:26:38,729 --> 01:26:43,079
so I don't know I I always find it to be

1695
01:26:41,279 --> 01:26:44,578
educational to do I mean it would be

1696
01:26:43,078 --> 01:26:46,198
great if you didn't have to do it

1697
01:26:44,578 --> 01:26:49,139
because the debugger actually could show

1698
01:26:46,198 --> 01:26:54,719
you this stuff in release mode but you

1699
01:26:49,139 --> 01:26:58,190
know if if wishes were unicorns we'd all

1700
01:26:54,719 --> 01:27:00,880
join the circus as they say so anyway

1701
01:26:58,189 --> 01:27:03,429
back to our story

1702
01:27:00,880 --> 01:27:05,859
let's see if we actually did we have a

1703
01:27:03,430 --> 01:27:07,840
problem with over writing here where it

1704
01:27:05,859 --> 01:27:10,059
may have obscured the actual value that

1705
01:27:07,840 --> 01:27:12,430
was originally in there because that one

1706
01:27:10,060 --> 01:27:15,460
you're just eating right isn't actually

1707
01:27:12,430 --> 01:27:18,579
super far away so that's a bit of an

1708
01:27:15,460 --> 01:27:20,770
issue these are the two locations that

1709
01:27:18,579 --> 01:27:24,479
we're talking about here let's look at

1710
01:27:20,770 --> 01:27:31,470
what they actually are so we have our SP

1711
01:27:24,479 --> 01:27:33,579
plus o X 59 and we have our BP - o X 60

1712
01:27:31,470 --> 01:27:38,530
those are the two locations that we're

1713
01:27:33,579 --> 01:27:45,789
looking at this mod is moving XM m 1 and

1714
01:27:38,529 --> 01:27:51,929
XM m 1 is just a 128-bit value right XM

1715
01:27:45,789 --> 01:27:57,010
m 1 is one of the cindy registers and

1716
01:27:51,930 --> 01:28:02,289
exactly this in analogous fashion to the

1717
01:27:57,010 --> 01:28:06,100
way the processor got added to the XM m

1718
01:28:02,289 --> 01:28:09,069
ones are the ones that were 128 bits

1719
01:28:06,100 --> 01:28:14,070
wide the ym m ones are when your tube do

1720
01:28:09,069 --> 01:28:17,920
6 and then the ZM m ones are one year I

1721
01:28:14,069 --> 01:28:21,639
don't really remember they're not on

1722
01:28:17,920 --> 01:28:26,130
here but so if you want to talk about

1723
01:28:21,640 --> 01:28:31,150
the lower part of one of these registers

1724
01:28:26,130 --> 01:28:34,029
128 bits part you call it XM m 0 if you

1725
01:28:31,149 --> 01:28:36,759
want to talk about the full width it's

1726
01:28:34,029 --> 01:28:38,859
ym 0 or if you're on a B X 512

1727
01:28:36,760 --> 01:28:43,570
I think it's zmm 0 to do the fab I'll

1728
01:28:38,859 --> 01:28:46,000
have exit I don't have a B X 512 on this

1729
01:28:43,569 --> 01:28:51,939
machine this chip doesn't the core i7

1730
01:28:46,000 --> 01:28:54,460
770 hon 7700 Kate didn't have avx-512 if

1731
01:28:51,939 --> 01:28:56,049
I remember correctly so we need so

1732
01:28:54,460 --> 01:29:00,880
that's why it came even turning on in

1733
01:28:56,050 --> 01:29:04,150
here alright so back to our story so

1734
01:29:00,880 --> 01:29:07,960
we're writing a 128-bit value that's 16

1735
01:29:04,149 --> 01:29:12,670
bytes right we're writing 16 bytes to

1736
01:29:07,960 --> 01:29:14,770
this location right here our BP - 6 th

1737
01:29:12,670 --> 01:29:18,579
and so I'm wondering with that even

1738
01:29:14,770 --> 01:29:21,370
interfered with what's here right that's

1739
01:29:18,579 --> 01:29:22,960
that's all I wanted to know and so if we

1740
01:29:21,369 --> 01:29:27,130
look back at this watch window what we

1741
01:29:22,960 --> 01:29:34,029
could say is well our BP minus 60 plus

1742
01:29:27,130 --> 01:29:37,000
16 would be here and reading out of here

1743
01:29:34,029 --> 01:29:40,179
those addresses are close but they don't

1744
01:29:37,000 --> 01:29:43,029
overlap right there's plenty of distance

1745
01:29:40,180 --> 01:29:47,070
between them you can see this you know

1746
01:29:43,029 --> 01:29:47,069
well yeah I can't even do this for you

1747
01:29:51,119 --> 01:30:00,189
here's that pointer here's this one so

1748
01:29:59,020 --> 01:30:03,430
you can see that they're actually

1749
01:30:00,189 --> 01:30:04,659
separated by quite a few bytes right

1750
01:30:03,430 --> 01:30:06,640
there's like there's there's a

1751
01:30:04,659 --> 01:30:10,469
significant distance between the two of

1752
01:30:06,640 --> 01:30:14,469
them and so we're not really gonna have

1753
01:30:10,469 --> 01:30:17,909
you know anything close just a sixth a

1754
01:30:14,469 --> 01:30:22,170
syllable 16 byte right is not going to

1755
01:30:17,909 --> 01:30:26,380
create a problem all right

1756
01:30:22,170 --> 01:30:27,760
so again bringing us back to what we

1757
01:30:26,380 --> 01:30:29,079
were talking about here again this is

1758
01:30:27,760 --> 01:30:31,390
the part of the code that we're looking

1759
01:30:29,079 --> 01:30:34,479
at so we loaded it here

1760
01:30:31,390 --> 01:30:37,810
we did a write from a register to a part

1761
01:30:34,479 --> 01:30:39,939
that was close by but not overlapping as

1762
01:30:37,810 --> 01:30:43,270
far as I can tell because we don't touch

1763
01:30:39,939 --> 01:30:49,750
either our SP or our BP anywhere down

1764
01:30:43,270 --> 01:30:52,230
through here that I can see make sure

1765
01:30:49,750 --> 01:30:52,229
that's right

1766
01:30:55,969 --> 01:31:00,439
because RSP this is why I city of

1767
01:30:58,189 --> 01:31:02,089
circumcision RSI and RSP are not the

1768
01:31:00,439 --> 01:31:05,179
same registers it's not a nominal Eicher

1769
01:31:02,090 --> 01:31:07,010
thing like the other ones right yeah so

1770
01:31:05,180 --> 01:31:08,000
those are not interfering being

1771
01:31:07,010 --> 01:31:12,219
interfered with at all

1772
01:31:08,000 --> 01:31:16,399
let's do here first I can see anyway

1773
01:31:12,219 --> 01:31:17,289
yeah so that means that unless I'm

1774
01:31:16,399 --> 01:31:20,960
mistaken

1775
01:31:17,289 --> 01:31:27,170
2:59 somehow got in there right we

1776
01:31:20,960 --> 01:31:29,930
somehow got a 259 into that bitmap piece

1777
01:31:27,170 --> 01:31:32,810
and I just don't understand where that

1778
01:31:29,930 --> 01:31:37,760
would have come from this value right

1779
01:31:32,810 --> 01:31:43,010
here is 259 and so you know do we have

1780
01:31:37,760 --> 01:31:44,510
some kind of a of a of a bug with the

1781
01:31:43,010 --> 01:31:46,699
way that we're doing these VIP map

1782
01:31:44,510 --> 01:31:48,829
pieces where we're like you know maybe

1783
01:31:46,698 --> 01:31:56,299
there's a weird bug somewhere that

1784
01:31:48,829 --> 01:32:02,448
actually writes 259 to that thing and

1785
01:31:56,300 --> 01:32:06,529
I'm not sure where you know it's loaded

1786
01:32:02,448 --> 01:32:09,710
out of here obviously but yeah I just

1787
01:32:06,529 --> 01:32:13,849
don't know I don't know where that would

1788
01:32:09,710 --> 01:32:16,460
have come from it makes me want to put

1789
01:32:13,850 --> 01:32:19,520
some guarding in here to look at these

1790
01:32:16,460 --> 01:32:22,609
particular things and see if we can

1791
01:32:19,520 --> 01:32:25,610
catch it a little earlier on to see

1792
01:32:22,609 --> 01:32:30,710
where that's coming from right so like

1793
01:32:25,609 --> 01:32:33,849
to get some idea of when 2:59 got stuck

1794
01:32:30,710 --> 01:32:39,198
into the bitmap piece in the first place

1795
01:32:33,850 --> 01:32:42,350
because where did it come from what

1796
01:32:39,198 --> 01:32:46,519
makes it even more confusing is remember

1797
01:32:42,350 --> 01:32:49,430
this actually isn't part of the art

1798
01:32:46,520 --> 01:32:53,989
stuff this is actually just where we

1799
01:32:49,430 --> 01:32:55,340
create those snap-together pieces that's

1800
01:32:53,988 --> 01:32:59,179
the only place that we set that

1801
01:32:55,340 --> 01:33:01,069
information up so for example let's say

1802
01:32:59,180 --> 01:33:04,670
actually I said I'm going to close that

1803
01:33:01,069 --> 01:33:07,099
down but let's suppose we go back to

1804
01:33:04,670 --> 01:33:09,819
where that sort of stuff happens right

1805
01:33:07,100 --> 01:33:09,820
and I don't know

1806
01:33:14,109 --> 01:33:21,679
that gets in here right so when we

1807
01:33:17,930 --> 01:33:25,369
actually create this stuff when we

1808
01:33:21,680 --> 01:33:27,890
create these pieces we've got this

1809
01:33:25,369 --> 01:33:30,439
connect piece call and then a connected

1810
01:33:27,890 --> 01:33:34,070
piece call like set some stuff up right

1811
01:33:30,439 --> 01:33:36,199
it says oh you know truncate this stuff

1812
01:33:34,069 --> 01:33:50,750
down and stuff it in here like this or

1813
01:33:36,199 --> 01:33:57,369
whatever right alright so looking at

1814
01:33:50,750 --> 01:33:57,369
that actually now those are 8-bit values

1815
01:34:04,020 --> 01:34:15,060
that's particularly justing to so CL was

1816
01:34:12,989 --> 01:34:19,800
really just loading the 8-bit value now

1817
01:34:15,060 --> 01:34:21,660
look at that alright so actually 209

1818
01:34:19,800 --> 01:34:27,750
isn't weird I'm sorry

1819
01:34:21,659 --> 01:34:30,630
203 what was it 103 hex was fine that

1820
01:34:27,750 --> 01:34:37,649
actually means that someone just set the

1821
01:34:30,630 --> 01:34:40,109
low thing to be in this parent line type

1822
01:34:37,649 --> 01:34:42,149
it was setting it right because it was

1823
01:34:40,109 --> 01:34:44,339
loading what we were actually seeing

1824
01:34:42,149 --> 01:34:47,579
there was it loading the next thing in

1825
01:34:44,340 --> 01:34:49,079
memory right and it wouldn't have loaded

1826
01:34:47,579 --> 01:34:52,050
that because well it wouldn't have used

1827
01:34:49,079 --> 01:34:54,449
that because it was testing CL 2 CL so

1828
01:34:52,050 --> 01:35:03,420
it would have only used a low 8 bits

1829
01:34:54,449 --> 01:35:06,510
I believe so that means it's not

1830
01:35:03,420 --> 01:35:11,960
necessarily garbage it's a totally valid

1831
01:35:06,510 --> 01:35:11,960
value in the totally wrong place right

1832
01:35:14,488 --> 01:35:21,479
so that's interesting so now the

1833
01:35:17,939 --> 01:35:24,329
question becomes how did that end up

1834
01:35:21,479 --> 01:35:25,559
right I mean let's let me just reset

1835
01:35:24,329 --> 01:35:26,840
that one more time so no there's a lot

1836
01:35:25,560 --> 01:35:29,969
going on there

1837
01:35:26,840 --> 01:35:33,150
so we reset that one more time in parent

1838
01:35:29,969 --> 01:35:37,260
a line type which is set in here how did

1839
01:35:33,149 --> 01:35:40,079
we end up having the first thing the

1840
01:35:37,260 --> 01:35:46,860
first piece in the entity say that it

1841
01:35:40,079 --> 01:35:51,539
was supposed to have a parent a line

1842
01:35:46,859 --> 01:35:56,839
type non zero how did it happen

1843
01:35:51,539 --> 01:35:59,840
right that's the question

1844
01:35:56,840 --> 01:35:59,840
so

1845
01:36:14,579 --> 01:36:21,909
one possibility is but we're not

1846
01:36:18,699 --> 01:36:23,349
clearing them properly we thought they

1847
01:36:21,909 --> 01:36:26,529
would all be zeros at the start but they

1848
01:36:23,350 --> 01:36:31,060
weren't or something that things that

1849
01:36:26,529 --> 01:36:35,289
likely and the reason that that seems

1850
01:36:31,060 --> 01:36:37,270
unlikely is there are only three valid

1851
01:36:35,289 --> 01:36:41,439
values that that thing could have taken

1852
01:36:37,270 --> 01:36:43,930
on and it was one of the valid values if

1853
01:36:41,439 --> 01:36:44,639
it wasn't if it was a non cleared memory

1854
01:36:43,930 --> 01:36:51,369
problem

1855
01:36:44,640 --> 01:36:53,590
you would expect it to be one of the 252

1856
01:36:51,369 --> 01:36:55,149
other things it could have been randomly

1857
01:36:53,590 --> 01:36:59,199
you would have thought it would have

1858
01:36:55,149 --> 01:37:01,119
been one of those more likely right so

1859
01:36:59,199 --> 01:37:04,210
it's a low probability thing we should

1860
01:37:01,119 --> 01:37:06,819
check it but it's low probability more

1861
01:37:04,210 --> 01:37:09,850
possible if somebody is calling connect

1862
01:37:06,819 --> 01:37:12,460
peace weirdly or something strange is

1863
01:37:09,850 --> 01:37:17,020
happening there now if we're right that

1864
01:37:12,460 --> 01:37:21,430
it was the tabie I mean if it was right

1865
01:37:17,020 --> 01:37:25,030
if it's Molly's fault then here in in

1866
01:37:21,430 --> 01:37:27,820
add cat this is where the problem would

1867
01:37:25,029 --> 01:37:32,340
have been so this add piece here where

1868
01:37:27,819 --> 01:37:32,340
we add the body in the head somehow

1869
01:37:39,569 --> 01:37:46,889
somehow this code was producing

1870
01:37:43,448 --> 01:37:56,579
something erroneous okay

1871
01:37:46,889 --> 01:37:56,579
now when we call add piece look here

1872
01:37:57,029 --> 01:38:02,679
what are we doing each time well we

1873
01:38:01,029 --> 01:38:04,269
assert that we haven't overflowed the

1874
01:38:02,679 --> 01:38:05,679
number of pieces we didn't hit that

1875
01:38:04,270 --> 01:38:07,810
assert and we assume that the assert

1876
01:38:05,679 --> 01:38:09,719
would have fired so we have entity

1877
01:38:07,810 --> 01:38:13,510
pieces plus entity piece count plus plus

1878
01:38:09,719 --> 01:38:21,460
right so we grab a piece out of this

1879
01:38:13,510 --> 01:38:28,480
array it pretty much I have to go in

1880
01:38:21,460 --> 01:38:37,480
order right I mean how could they not so

1881
01:38:28,479 --> 01:38:41,019
the body will come before the head the

1882
01:38:37,479 --> 01:38:44,138
body speed zero heads piece one when we

1883
01:38:41,020 --> 01:38:46,170
call connect piece to world just down

1884
01:38:44,139 --> 01:38:46,170
here

1885
01:38:50,349 --> 01:39:00,380
we're doing an HHA align nun as the

1886
01:38:55,578 --> 01:39:14,630
parent piece of line type not sure why

1887
01:39:00,380 --> 01:39:17,139
we don't just set it to zero so that's a

1888
01:39:14,630 --> 01:39:17,139
little odd

1889
01:39:24,809 --> 01:39:29,949
but let's I mean I'll double-check it

1890
01:39:27,309 --> 01:39:33,729
but that's pretty much not a problem for

1891
01:39:29,948 --> 01:39:41,938
us right because that's always gonna be

1892
01:39:33,729 --> 01:39:45,840
zero so I mean even if it wasn't cleared

1893
01:39:41,939 --> 01:39:49,800
this call should have done the work

1894
01:39:45,840 --> 01:39:56,860
right there shouldn't have been any way

1895
01:39:49,800 --> 01:39:59,199
for that to of this would have

1896
01:39:56,859 --> 01:40:01,418
overwritten whatever was there with a

1897
01:39:59,198 --> 01:40:06,339
zero they guess safe truncate to you

1898
01:40:01,418 --> 01:40:10,569
eight is literally just going to you

1899
01:40:06,340 --> 01:40:12,969
eight cast this value the value is 0 so

1900
01:40:10,569 --> 01:40:17,578
this bitmap parent a line type would

1901
01:40:12,969 --> 01:40:23,130
also be 0 and the entity as a result

1902
01:40:17,578 --> 01:40:23,130
should just be what it is right

1903
01:40:26,679 --> 01:40:37,649
it's a place cat no it's odd cat oh

1904
01:40:34,599 --> 01:40:41,159
right I can't jump to it because of the

1905
01:40:37,649 --> 01:40:44,978
parser doesn't understand the kind of

1906
01:40:41,158 --> 01:40:47,518
yeah long story on that one no matches

1907
01:40:44,979 --> 01:40:47,519
for add cat

1908
01:40:52,460 --> 01:40:58,680
so I'm still thoroughly stumped how is

1909
01:40:56,430 --> 01:41:01,920
it possible that we add body is zero

1910
01:40:58,680 --> 01:41:03,480
head as one we connect a piece to the

1911
01:41:01,920 --> 01:41:05,579
world which should have cleared this and

1912
01:41:03,479 --> 01:41:09,029
then we've got this connect piece here

1913
01:41:05,579 --> 01:41:10,680
that's operating on the head let's make

1914
01:41:09,029 --> 01:41:12,529
sure that connect piece doesn't do

1915
01:41:10,680 --> 01:41:15,750
something weird there I guess

1916
01:41:12,529 --> 01:41:19,590
so here's connect piece there's only one

1917
01:41:15,750 --> 01:41:21,630
version of it but I can see in here we

1918
01:41:19,590 --> 01:41:23,250
say we're gonna look at the child bitmap

1919
01:41:21,630 --> 01:41:25,109
so we're looking at the one that's off

1920
01:41:23,250 --> 01:41:32,640
of the head so we're not even touching

1921
01:41:25,109 --> 01:41:34,949
this body would hear.i we grab the

1922
01:41:32,640 --> 01:41:36,539
parent piece again doesn't that's not

1923
01:41:34,949 --> 01:41:38,399
gonna make any difference because it's

1924
01:41:36,539 --> 01:41:40,109
not the one we're not writing this back

1925
01:41:38,399 --> 01:41:44,219
to the one in question which is the zero

1926
01:41:40,109 --> 01:41:47,849
width you know the 0th entry so who even

1927
01:41:44,220 --> 01:41:51,050
cares how this function works we just do

1928
01:41:47,850 --> 01:41:51,050
not care even a little bit

1929
01:42:04,199 --> 01:42:12,119
I I literally can't see ya anyway that

1930
01:42:09,000 --> 01:42:15,060
that would have affected it so somehow

1931
01:42:12,119 --> 01:42:18,210
although I don't see any way for to

1932
01:42:15,060 --> 01:42:23,640
actually happen we are getting an

1933
01:42:18,210 --> 01:42:27,810
alignment value that is nonzero into the

1934
01:42:23,640 --> 01:42:30,810
first piece in our entity unless our

1935
01:42:27,810 --> 01:42:33,750
debugging of the assembly code was way

1936
01:42:30,810 --> 01:42:35,580
off base and the value we're getting we

1937
01:42:33,750 --> 01:42:37,649
actually know what the value was - right

1938
01:42:35,579 --> 01:42:41,989
it was one so it was

1939
01:42:37,649 --> 01:42:45,779
HHA aligned default was the parent

1940
01:42:41,989 --> 01:42:49,739
alignment so it's like it wrote the one

1941
01:42:45,779 --> 01:42:51,000
like if we if I had to make up a bug

1942
01:42:49,739 --> 01:42:57,389
that doesn't look like it's actually

1943
01:42:51,000 --> 01:43:01,380
there it looks like it wrote the parent

1944
01:42:57,390 --> 01:43:04,560
a line type HS a line none

1945
01:43:01,380 --> 01:43:07,920
instead it wrote the child type into the

1946
01:43:04,560 --> 01:43:10,230
parent a line type right like if it

1947
01:43:07,920 --> 01:43:16,739
wrote if these two lines had been

1948
01:43:10,229 --> 01:43:18,539
swapped that would be the bug right I

1949
01:43:16,739 --> 01:43:28,130
mean that's what the but that would have

1950
01:43:18,539 --> 01:43:28,130
been the bug but they're not swapped so

1951
01:43:31,460 --> 01:43:35,480
so I don't really know

1952
01:43:39,779 --> 01:43:48,149
I guess because I don't have any better

1953
01:43:44,130 --> 01:43:50,940
ideas should we go ahead and look at the

1954
01:43:48,149 --> 01:43:53,969
ad cat disassembly in release mode to

1955
01:43:50,939 --> 01:43:56,359
see what it actually does in case maybe

1956
01:43:53,970 --> 01:43:59,640
there's something we're just not

1957
01:43:56,359 --> 01:44:05,670
thinking about so here's the disassembly

1958
01:43:59,640 --> 01:44:10,050
I don't know why it's not sure which one

1959
01:44:05,670 --> 01:44:15,239
I want there but whatever so here's a

1960
01:44:10,050 --> 01:44:19,560
disassembly of that call right of

1961
01:44:15,239 --> 01:44:24,779
add cat eye and if I just look through

1962
01:44:19,560 --> 01:44:26,160
it here where I'm sort of stepping you

1963
01:44:24,779 --> 01:44:29,489
know let's take a look at the place

1964
01:44:26,159 --> 01:44:32,220
where we add those pieces I guess so

1965
01:44:29,489 --> 01:44:36,899
what I will say is I don't see any calls

1966
01:44:32,220 --> 01:44:39,900
in here right so there is a little bit

1967
01:44:36,899 --> 01:44:43,170
of a concern in my head now because I'm

1968
01:44:39,899 --> 01:44:46,859
like alright so it decided to inline the

1969
01:44:43,170 --> 01:44:50,609
call to connect peace to world and the

1970
01:44:46,859 --> 01:44:55,139
call to connect peace it inlined both of

1971
01:44:50,609 --> 01:44:57,899
those right and in fact also I guess it

1972
01:44:55,140 --> 01:44:59,300
in lines the call to add peace as well

1973
01:44:57,899 --> 01:45:05,339
right

1974
01:44:59,300 --> 01:45:07,289
here's it doing in fact if we take a

1975
01:45:05,340 --> 01:45:17,489
look back here

1976
01:45:07,289 --> 01:45:24,060
here's add peace right so px4 so here's

1977
01:45:17,489 --> 01:45:26,609
it doing the assertion right here we're

1978
01:45:24,060 --> 01:45:29,490
this right here I believe is it just

1979
01:45:26,609 --> 01:45:35,659
filling in let me try to show you here

1980
01:45:29,489 --> 01:45:35,659
filling in this right I believe

1981
01:45:39,010 --> 01:45:46,670
yeah so it's running on our registers I

1982
01:45:42,109 --> 01:45:50,239
think to pass these so it's putting them

1983
01:45:46,670 --> 01:45:56,539
on the stack cuz they're structs right

1984
01:45:50,239 --> 01:45:58,189
I think don't quote me on this it might

1985
01:45:56,539 --> 01:46:00,350
actually fling in default primers to I

1986
01:45:58,189 --> 01:46:01,849
don't know so we're going through here

1987
01:46:00,350 --> 01:46:05,380
though pretty straightforward right

1988
01:46:01,850 --> 01:46:05,380
we're just checking the assertions

1989
01:46:15,420 --> 01:46:20,130
I mean I yeah you know I mean I'm not

1990
01:46:18,029 --> 01:46:22,579
gonna follow this all the way through or

1991
01:46:20,130 --> 01:46:31,050
take a while here's the second ad piece

1992
01:46:22,579 --> 01:46:37,229
call and now we're down into the

1993
01:46:31,050 --> 01:46:38,190
connector calls right in theory so yeah

1994
01:46:37,229 --> 01:46:39,750
all right

1995
01:46:38,189 --> 01:46:48,569
looking at this a little bit more

1996
01:46:39,750 --> 01:46:50,989
closely here let's see what are we doing

1997
01:46:48,569 --> 01:46:50,989
here

1998
01:46:55,880 --> 01:47:00,050
so it looks like

1999
01:47:10,618 --> 01:47:23,539
so it looks like this test here was

2000
01:47:18,590 --> 01:47:23,539
probably this assertion I'm guessing

2001
01:47:23,840 --> 01:47:27,539
yeah you can see the assertion here

2002
01:47:26,039 --> 01:47:31,859
would have written to the zero address

2003
01:47:27,539 --> 01:47:33,210
to cause the crash right so remember our

2004
01:47:31,859 --> 01:47:35,098
assertion just writes to the zero page

2005
01:47:33,210 --> 01:47:38,189
so it halts the process immediately if

2006
01:47:35,099 --> 01:47:41,010
it happens so that here we were saying

2007
01:47:38,189 --> 01:47:43,649
alright let's go ahead and write the

2008
01:47:41,010 --> 01:47:48,539
rest of this stuff out so it's this is

2009
01:47:43,649 --> 01:47:51,948
where we would be doing that I would

2010
01:47:48,539 --> 01:47:54,960
assume assuming this actually didn't get

2011
01:47:51,948 --> 01:47:55,379
rearranged too much but let's take a

2012
01:47:54,960 --> 01:48:02,300
look

2013
01:47:55,380 --> 01:48:02,300
so our 11w

2014
01:48:10,399 --> 01:48:20,549
we go our 11 w and then 1 are the two

2015
01:48:17,639 --> 01:48:25,199
things that it's writing out if we look

2016
01:48:20,550 --> 01:48:31,289
at the structure of these bitmap pieces

2017
01:48:25,198 --> 01:48:33,750
in entity visible piece here's where

2018
01:48:31,289 --> 01:48:37,738
those are created the reserved value is

2019
01:48:33,750 --> 01:48:42,359
obviously 0 the parent piece in our case

2020
01:48:37,738 --> 01:48:44,488
is also going to be 0 out here or one in

2021
01:48:42,359 --> 01:48:46,679
the other as far as the other one and

2022
01:48:44,488 --> 01:48:47,789
the parent line type child the line type

2023
01:48:46,679 --> 01:48:49,230
that's the sort of thing that we're

2024
01:48:47,789 --> 01:48:54,359
looking at here how that's actually

2025
01:48:49,229 --> 01:48:57,899
getting added in there but yeah so if

2026
01:48:54,359 --> 01:49:02,158
you look at this it looks like the way

2027
01:48:57,899 --> 01:49:05,809
that that's working in here is it sort

2028
01:49:02,158 --> 01:49:11,189
of knows exactly what it wants to write

2029
01:49:05,810 --> 01:49:18,289
into this part of the struct I don't

2030
01:49:11,189 --> 01:49:18,289
know if we've got of course not

2031
01:49:18,408 --> 01:49:31,668
the ability to inspect it much here's AD

2032
01:49:23,868 --> 01:49:34,998
cat yeah it doesn't know anything no

2033
01:49:31,668 --> 01:49:39,819
entity does so if we take a look at the

2034
01:49:34,998 --> 01:49:43,929
pieces here here's them getting

2035
01:49:39,819 --> 01:49:46,549
structured so if we take a look inside

2036
01:49:43,929 --> 01:49:50,090
the pieces here and we look at the

2037
01:49:46,550 --> 01:49:55,159
bitmap part of this right so the first

2038
01:49:50,090 --> 01:49:58,878
one is supposed to get set to zero here

2039
01:49:55,158 --> 01:50:01,578
zero here and zero here but one should

2040
01:49:58,878 --> 01:50:02,779
get set right here and if you look at

2041
01:50:01,578 --> 01:50:05,208
the disassembly that looks like exactly

2042
01:50:02,779 --> 01:50:08,658
what's going to happen where do I get

2043
01:50:05,208 --> 01:50:11,719
that one go back here it is this is

2044
01:50:08,658 --> 01:50:15,768
setting the first part to zero so that's

2045
01:50:11,719 --> 01:50:18,408
setting these parts to zero here I

2046
01:50:15,769 --> 01:50:21,229
believe and then this part right here is

2047
01:50:18,408 --> 01:50:23,299
putting that one in place so I think

2048
01:50:21,229 --> 01:50:26,780
when we step over this that should go

2049
01:50:23,300 --> 01:50:30,498
yeah right so that set it up exactly as

2050
01:50:26,779 --> 01:50:35,179
we think that it should which is great

2051
01:50:30,498 --> 01:50:37,099
I mean quote unquote right now looking

2052
01:50:35,179 --> 01:50:38,779
for weird bugs that might be in this

2053
01:50:37,099 --> 01:50:45,979
code I guess so

2054
01:50:38,779 --> 01:50:51,158
are 11w I mean I don't know where the

2055
01:50:45,979 --> 01:50:51,159
last time that got set was

2056
01:50:56,448 --> 01:51:00,099
here's one place

2057
01:51:11,130 --> 01:51:29,400
I guess I couldn't tell you man like

2058
01:51:22,069 --> 01:51:32,849
where is that getting set this just

2059
01:51:29,399 --> 01:51:37,529
clears it right

2060
01:51:32,850 --> 01:51:41,579
but I guess now I think about it it can

2061
01:51:37,529 --> 01:51:43,859
only ever be zero so I guess that's just

2062
01:51:41,579 --> 01:51:51,210
fine that would always be correct right

2063
01:51:43,859 --> 01:51:53,939
so as long as our 11 doesn't get changed

2064
01:51:51,210 --> 01:51:56,010
again that would be fine do we ever

2065
01:51:53,939 --> 01:52:00,829
touch it again and we don't we we do a

2066
01:51:56,010 --> 01:52:00,829
mob here which is interesting

2067
01:52:04,609 --> 01:52:09,509
this is writing 0 to 0 this is writing 0

2068
01:52:08,010 --> 01:52:10,829
to hear which but that just might

2069
01:52:09,510 --> 01:52:14,239
because it happened to know it had a

2070
01:52:10,829 --> 01:52:14,239
zero so it used it for clearing

2071
01:52:17,760 --> 01:52:26,100
I don't know man so that seems like it

2072
01:52:23,159 --> 01:52:33,630
would pretty reliably write out exactly

2073
01:52:26,100 --> 01:52:36,530
what we think it should right I don't

2074
01:52:33,630 --> 01:52:39,630
have a lot of explanation for that

2075
01:52:36,529 --> 01:52:42,899
so that looks fine I guess I should

2076
01:52:39,630 --> 01:52:44,789
double-check again though before we say

2077
01:52:42,899 --> 01:52:48,029
that all looks fine that you know what

2078
01:52:44,789 --> 01:52:51,510
happens after that so here you know when

2079
01:52:48,029 --> 01:52:53,250
we're going through to figure out the

2080
01:52:51,510 --> 01:52:58,739
next part of it we've got the connect

2081
01:52:53,250 --> 01:53:01,439
piece call if we can I get that to go to

2082
01:52:58,738 --> 01:53:06,689
the source code yeah so here it needs to

2083
01:53:01,439 --> 01:53:09,089
do right this subtraction where it's got

2084
01:53:06,689 --> 01:53:13,039
to figure out what index this thing is

2085
01:53:09,090 --> 01:53:15,810
actually lining up for the parent piece

2086
01:53:13,039 --> 01:53:17,189
it doesn't really matter right it's

2087
01:53:15,810 --> 01:53:18,810
doing a shift to figure that out because

2088
01:53:17,189 --> 01:53:20,219
it knows that this happens to be 16

2089
01:53:18,810 --> 01:53:23,700
bytes long right so that's how it's

2090
01:53:20,220 --> 01:53:26,280
doing the divide there again I don't

2091
01:53:23,699 --> 01:53:27,809
think any of this matters because it's

2092
01:53:26,279 --> 01:53:31,738
not going to write to the person who we

2093
01:53:27,810 --> 01:53:34,500
care about anyway it's doing a jump here

2094
01:53:31,738 --> 01:53:39,389
this is the assertion again that it left

2095
01:53:34,500 --> 01:53:42,810
in which is fine and then it's yeah

2096
01:53:39,390 --> 01:53:44,340
looks like it's just again let me just I

2097
01:53:42,810 --> 01:53:45,930
don't know why it keeps moving us away

2098
01:53:44,340 --> 01:53:52,260
from that source I wanted to see this

2099
01:53:45,930 --> 01:53:54,420
source there we go so in here we're

2100
01:53:52,260 --> 01:53:55,710
looking at this bitmap parent piece it's

2101
01:53:54,420 --> 01:53:59,520
just looking to make sure I guess we

2102
01:53:55,710 --> 01:54:03,270
didn't yeah when we're doing that

2103
01:53:59,520 --> 01:54:05,820
connection we're saying make sure that

2104
01:54:03,270 --> 01:54:08,239
the thing we're connecting to is earlier

2105
01:54:05,819 --> 01:54:08,238
than we are

2106
01:54:12,920 --> 01:54:24,050
which again seems fine so I don't know

2107
01:54:19,819 --> 01:54:28,738
this is a real nasty bug somewhere

2108
01:54:24,050 --> 01:54:30,119
because I don't actually see where the

2109
01:54:28,738 --> 01:54:34,439
bug is coming from here

2110
01:54:30,119 --> 01:54:37,289
we can't repro it right meaning we only

2111
01:54:34,439 --> 01:54:40,649
get it once in a while and we don't

2112
01:54:37,289 --> 01:54:42,329
really know why we're getting it does it

2113
01:54:40,649 --> 01:54:44,909
have something to do with code reloading

2114
01:54:42,329 --> 01:54:58,500
like does it happen when I do this or

2115
01:54:44,909 --> 01:55:00,479
something so I don't know uh I guess you

2116
01:54:58,500 --> 01:55:02,609
know that was a sufficient looking into

2117
01:55:00,479 --> 01:55:05,069
of it right we didn't cheese out we

2118
01:55:02,609 --> 01:55:07,199
looked for it pretty hard so I think

2119
01:55:05,069 --> 01:55:09,689
what we're gonna have to do is possibly

2120
01:55:07,199 --> 01:55:12,840
add some more code to help us look for

2121
01:55:09,689 --> 01:55:16,529
it I guess in the future or hope we get

2122
01:55:12,840 --> 01:55:19,380
a lucky break and get an easier to debug

2123
01:55:16,529 --> 01:55:21,569
case down the line but I don't see

2124
01:55:19,380 --> 01:55:23,430
anything amiss in there and I don't

2125
01:55:21,569 --> 01:55:26,488
understand how that thing could have

2126
01:55:23,430 --> 01:55:29,250
happened exactly we can guard against it

2127
01:55:26,488 --> 01:55:32,099
pretty easily meaning inside the actual

2128
01:55:29,250 --> 01:55:35,909
entity code all we would have to do here

2129
01:55:32,100 --> 01:55:40,560
is just make sure that we don't actually

2130
01:55:35,909 --> 01:55:44,750
ever do this like you know we could even

2131
01:55:40,560 --> 01:55:49,260
move this code up above this line and

2132
01:55:44,750 --> 01:55:52,130
then we'd be fine right because we would

2133
01:55:49,260 --> 01:55:55,250
just look at our own bitmap info and

2134
01:55:52,130 --> 01:55:58,590
that would you know would crash right

2135
01:55:55,250 --> 01:56:01,529
but it's still wrong you know what I

2136
01:55:58,590 --> 01:56:03,449
mean like it's unclear to me I'd like to

2137
01:56:01,529 --> 01:56:05,759
figure out why we're ever getting this

2138
01:56:03,449 --> 01:56:11,039
because this should never be able to

2139
01:56:05,760 --> 01:56:12,960
actually happen we can certainly make

2140
01:56:11,039 --> 01:56:14,550
the bug occur a little bit further

2141
01:56:12,960 --> 01:56:18,960
upstream but not enough to actually

2142
01:56:14,550 --> 01:56:22,230
matter that I can think of anyway which

2143
01:56:18,960 --> 01:56:25,060
is to say that when we do this parent a

2144
01:56:22,229 --> 01:56:31,239
line type bit here when we get in here

2145
01:56:25,060 --> 01:56:33,850
could just say hey just so we know let's

2146
01:56:31,239 --> 01:56:41,609
make sure we never do this on a piece

2147
01:56:33,850 --> 01:56:44,020
index that's zero right so I don't know

2148
01:56:41,609 --> 01:56:45,159
right I don't really know what to make

2149
01:56:44,020 --> 01:56:51,730
of it

2150
01:56:45,159 --> 01:56:53,289
it's it's pretty weird but that's it and

2151
01:56:51,729 --> 01:56:54,639
I don't know I don't know how to track

2152
01:56:53,289 --> 01:56:58,390
it down further well go ahead and go to

2153
01:56:54,640 --> 01:56:59,800
the QA and I guess we'll finish up what

2154
01:56:58,390 --> 01:57:03,610
we were doing today we'll finish that up

2155
01:56:59,800 --> 01:57:04,659
tomorrow I'm glad we took a look into

2156
01:57:03,609 --> 01:57:06,339
that to see if there was anything

2157
01:57:04,659 --> 01:57:09,840
obviously but I didn't that

2158
01:57:06,340 --> 01:57:15,279
investigation turned up really not much

2159
01:57:09,840 --> 01:57:17,140
and so if anyone has any while that was

2160
01:57:15,279 --> 01:57:20,019
happening obviously you guys were

2161
01:57:17,140 --> 01:57:24,220
watching if you had any particular

2162
01:57:20,020 --> 01:57:28,360
Avenue you think I missed tell me you

2163
01:57:24,220 --> 01:57:29,920
know tell me what it was because I'd be

2164
01:57:28,359 --> 01:57:32,409
interested to know if there was anything

2165
01:57:29,920 --> 01:57:34,720
that I didn't pursue there that looked

2166
01:57:32,409 --> 01:57:40,239
like it could have been fruitful I don't

2167
01:57:34,720 --> 01:57:41,740
I don't have anything off the top of my

2168
01:57:40,239 --> 01:57:45,760
head that I think we could have done

2169
01:57:41,739 --> 01:57:46,929
that would have helped us in release

2170
01:57:45,760 --> 01:57:48,070
mode you know the debugger doesn't give

2171
01:57:46,930 --> 01:57:56,909
you much help so you're pretty much

2172
01:57:48,069 --> 01:57:56,909
reading on your own yeah I got nothing

2173
01:58:21,520 --> 01:58:27,260
so how do you like the progress of HH so

2174
01:58:23,988 --> 01:58:30,738
far um I like everything except the

2175
01:58:27,260 --> 01:58:34,340
lighting I'd like to do a pass and

2176
01:58:30,738 --> 01:58:37,069
lighting and fix that but I like I

2177
01:58:34,340 --> 01:58:38,750
really like where we ended up I like how

2178
01:58:37,069 --> 01:58:40,460
everything works now it's pretty good

2179
01:58:38,750 --> 01:58:46,010
it's the first time I've ever tried a

2180
01:58:40,460 --> 01:58:48,619
mix mode game I don't you know it's not

2181
01:58:46,010 --> 01:58:55,219
something I do I don't do like 2d 3d

2182
01:58:48,619 --> 01:58:58,880
stuff I usually just do 3d or straight

2183
01:58:55,219 --> 01:59:01,158
2d so it was really interesting going

2184
01:58:58,880 --> 01:59:02,539
through all of that and I feel like what

2185
01:59:01,158 --> 01:59:04,369
we ended up with is pretty novel I've

2186
01:59:02,539 --> 01:59:06,279
never seen anything that quite does

2187
01:59:04,369 --> 01:59:10,069
exactly what we do

2188
01:59:06,279 --> 01:59:11,630
and so I feel like we found some pretty

2189
01:59:10,069 --> 01:59:17,238
cool stuff I don't know I really like

2190
01:59:11,630 --> 01:59:20,810
the way it looks and seems like a pretty

2191
01:59:17,238 --> 01:59:22,488
solid engine so far it suffers from the

2192
01:59:20,810 --> 01:59:27,199
fact that not very much time has been

2193
01:59:22,488 --> 01:59:29,329
put into it you know engine work is it's

2194
01:59:27,198 --> 01:59:32,928
hard work it's long hours and it's like

2195
01:59:29,329 --> 01:59:35,000
you're a lot of stuff you have to do and

2196
01:59:32,929 --> 01:59:36,590
so it's pretty truncated compared to

2197
01:59:35,000 --> 01:59:37,939
what I would like to spend on the engine

2198
01:59:36,590 --> 01:59:39,829
you know I'd like to spend at least four

2199
01:59:37,939 --> 01:59:41,689
times as much time as we've spent on

2200
01:59:39,829 --> 01:59:43,729
stream for the same amount of code that

2201
01:59:41,689 --> 01:59:46,759
we've had just refining things making

2202
01:59:43,729 --> 01:59:48,138
them more robust and cleaning them up

2203
01:59:46,760 --> 01:59:50,150
and all that sort of stuff that I would

2204
01:59:48,139 --> 01:59:51,829
normally have plenty of time to do for

2205
01:59:50,149 --> 01:59:53,948
an engine of this complexity which is

2206
01:59:51,829 --> 02:00:00,109
not that high

2207
01:59:53,948 --> 02:00:02,388
but you know given the limitations of

2208
02:00:00,109 --> 02:00:03,500
the series and what I can do with the

2209
02:00:02,389 --> 02:00:06,739
way that we set it up

2210
02:00:03,500 --> 02:00:08,179
I think it's delightful I would like to

2211
02:00:06,738 --> 02:00:11,049
I would like to fix the lighting though

2212
02:00:08,179 --> 02:00:17,359
the lighting is not where it needs to be

2213
02:00:11,050 --> 02:00:20,439
it looks cool it's too slow and so I

2214
02:00:17,359 --> 02:00:22,389
think that's the last thing that we

2215
02:00:20,439 --> 02:00:24,668
I have some ideas about it that's the

2216
02:00:22,389 --> 02:00:28,239
last thing that I'm like yeah that's not

2217
02:00:24,668 --> 02:00:30,189
really solved right everything else

2218
02:00:28,238 --> 02:00:32,978
looks and feels great terms the

2219
02:00:30,189 --> 02:00:34,689
architecture and the things that we have

2220
02:00:32,979 --> 02:00:37,659
to do or more just like straight to do

2221
02:00:34,689 --> 02:00:39,519
items I don't see a lot of unknowns in

2222
02:00:37,658 --> 02:00:41,788
there but the lighting needs needs to be

2223
02:00:39,519 --> 02:00:41,789
improved

2224
02:01:23,000 --> 02:01:30,960
well you have 3d printers as collision

2225
02:01:25,079 --> 02:01:32,130
proxies we already have them you've

2226
02:01:30,960 --> 02:01:33,539
mentioned the past your climate for

2227
02:01:32,130 --> 02:01:36,199
exercise have you seen free soil yet I

2228
02:01:33,539 --> 02:01:38,159
have yes that stuff is nuts

2229
02:01:36,199 --> 02:01:39,090
now earlier the problem with handle it

2230
02:01:38,159 --> 02:01:40,319
some people assembly do you have a

2231
02:01:39,090 --> 02:01:44,789
chance to look at the burst compiler

2232
02:01:40,319 --> 02:01:49,170
demo from unities GDC 2019 keynote no I

2233
02:01:44,789 --> 02:01:50,579
mean you know unity just doesn't isn't

2234
02:01:49,170 --> 02:01:52,409
something I need to follow because I

2235
02:01:50,579 --> 02:01:55,409
don't use it so I don't really care what

2236
02:01:52,409 --> 02:01:57,180
they're doing most of the time so I

2237
02:01:55,409 --> 02:01:59,099
don't follow it I certainly don't care

2238
02:01:57,180 --> 02:02:00,180
about the birth compiler because well I

2239
02:01:59,100 --> 02:02:02,190
mean why would I care about the bris

2240
02:02:00,180 --> 02:02:04,320
compiler I think it's good though

2241
02:02:02,189 --> 02:02:07,469
because for people who have to use unity

2242
02:02:04,319 --> 02:02:09,409
which is a lot of people I think it's

2243
02:02:07,469 --> 02:02:15,800
good that they are trying to provide

2244
02:02:09,409 --> 02:02:22,469
ways of giving you access to actual

2245
02:02:15,800 --> 02:02:24,750
speed focused code right because it will

2246
02:02:22,469 --> 02:02:29,359
enable I would think it will enable

2247
02:02:24,750 --> 02:02:32,520
people who are programming in unity to

2248
02:02:29,359 --> 02:02:34,859
do things they couldn't have done that

2249
02:02:32,520 --> 02:02:36,690
are like custom to their game you know

2250
02:02:34,859 --> 02:02:40,199
that they really couldn't have done

2251
02:02:36,689 --> 02:02:43,799
before without like making a plug-in

2252
02:02:40,199 --> 02:02:46,079
right where they have to go right like

2253
02:02:43,800 --> 02:02:47,699
the C++ code themselves but just you

2254
02:02:46,079 --> 02:02:49,229
know the whole point of unity is that

2255
02:02:47,699 --> 02:02:51,439
you're not having to do that like the

2256
02:02:49,229 --> 02:02:53,699
whole point is that you don't have to go

2257
02:02:51,439 --> 02:02:55,949
do all the standard game development

2258
02:02:53,699 --> 02:02:58,439
stuff you can just use the stuff they've

2259
02:02:55,949 --> 02:03:00,238
already built but you know there are

2260
02:02:58,439 --> 02:03:01,799
specific things that you need to do in

2261
02:03:00,238 --> 02:03:04,619
your game that are specific to your game

2262
02:03:01,800 --> 02:03:08,010
and you don't want to have this

2263
02:03:04,619 --> 02:03:09,269
handcuffs on you where you can't get

2264
02:03:08,010 --> 02:03:11,880
reasonable for it sighs so I think the

2265
02:03:09,270 --> 02:03:17,730
best compiler is very good and I hope it

2266
02:03:11,880 --> 02:03:22,890
is successful at like Oh giving people

2267
02:03:17,729 --> 02:03:24,750
the ability to stay in the like the

2268
02:03:22,890 --> 02:03:28,260
confines of unity so they don't have to

2269
02:03:24,750 --> 02:03:29,640
learn a whole new environment and

2270
02:03:28,260 --> 02:03:33,150
programming language and all these other

2271
02:03:29,640 --> 02:03:36,099
sorts of things but still learn they can

2272
02:03:33,149 --> 02:03:38,259
learn a few things about how could

2273
02:03:36,099 --> 02:03:42,038
and how to do things quickly and then

2274
02:03:38,260 --> 02:03:46,149
access that power through a standard

2275
02:03:42,038 --> 02:03:49,658
unity you know interface so I think that

2276
02:03:46,149 --> 02:03:52,329
is just fundamentally good and will have

2277
02:03:49,658 --> 02:03:55,208
a positive impact on this you know the

2278
02:03:52,328 --> 02:03:57,340
the types of games you can make in unity

2279
02:03:55,208 --> 02:03:58,679
that maybe in the past would you know

2280
02:03:57,340 --> 02:04:01,328
you wouldn't really have been able to

2281
02:03:58,679 --> 02:04:02,590
make certain kinds of games because the

2282
02:04:01,328 --> 02:04:05,858
performance would have been a limiting

2283
02:04:02,590 --> 02:04:08,349
factor now you you know now you can

2284
02:04:05,859 --> 02:04:13,629
maybe consider those games whatever that

2285
02:04:08,349 --> 02:04:15,578
sort of space looks like right may blow

2286
02:04:13,628 --> 02:04:17,918
a couple of days late but now that we're

2287
02:04:15,578 --> 02:04:23,018
hopping in Z how about adding water so

2288
02:04:17,918 --> 02:04:23,769
the hero can go swimming I'm not averse

2289
02:04:23,019 --> 02:04:27,579
to it

2290
02:04:23,769 --> 02:04:29,079
but you know I'll be honest the thing is

2291
02:04:27,578 --> 02:04:31,509
I don't know that we really want to take

2292
02:04:29,078 --> 02:04:33,639
the time to do water rendering because

2293
02:04:31,510 --> 02:04:37,239
water rendering is kind of its own whole

2294
02:04:33,639 --> 02:04:40,149
thing and just based on like time

2295
02:04:37,238 --> 02:04:41,728
constraints right like you know I don't

2296
02:04:40,149 --> 02:04:49,030
know that we want to go down that road

2297
02:04:41,729 --> 02:04:52,320
so I would say that might be more left

2298
02:04:49,029 --> 02:04:54,698
as an exercise for the reader you know

2299
02:04:52,319 --> 02:04:56,828
it seems to me somewhat straightforward

2300
02:04:54,698 --> 02:04:58,478
how you would go about adding something

2301
02:04:56,828 --> 02:05:01,389
like that so I think most people would

2302
02:04:58,479 --> 02:05:03,128
be able to do it on their own and the

2303
02:05:01,389 --> 02:05:05,349
really big challenge is how do you draw

2304
02:05:03,128 --> 02:05:09,479
it right because you want the water to

2305
02:05:05,349 --> 02:05:09,479
look nice you want to look like water

2306
02:05:09,929 --> 02:05:15,368
and the question is how do you make it

2307
02:05:12,578 --> 02:05:18,279
respond you know when the when the hero

2308
02:05:15,368 --> 02:05:22,538
like jumps on in you know and do you do

2309
02:05:18,279 --> 02:05:25,868
some water simulation try to make it

2310
02:05:22,538 --> 02:05:27,458
look like it's rippling out and you know

2311
02:05:25,868 --> 02:05:28,569
those sorts of things and then what do

2312
02:05:27,458 --> 02:05:30,578
you do about you know do you want to try

2313
02:05:28,569 --> 02:05:33,368
and reflect things in it you know so

2314
02:05:30,578 --> 02:05:36,128
it's a pretty you know water is a bad

2315
02:05:33,368 --> 02:05:37,299
thing to add to a game if you don't want

2316
02:05:36,128 --> 02:05:42,668
to go down kind of a pretty big

2317
02:05:37,300 --> 02:05:46,208
rendering rathole because it's a tone

2318
02:05:42,668 --> 02:05:48,189
its its whole own thing now you could if

2319
02:05:46,208 --> 02:05:49,829
you just want cheap water that's not so

2320
02:05:48,189 --> 02:05:53,010
hard right it's just a trans loose

2321
02:05:49,829 --> 02:05:53,789
and plane you stick in there and that's

2322
02:05:53,010 --> 02:05:55,500
not so bad

2323
02:05:53,789 --> 02:05:57,689
so you know we could do really lousy

2324
02:05:55,500 --> 02:06:00,739
water but you know I'd probably rather

2325
02:05:57,689 --> 02:06:00,739
just not do water

2326
02:06:11,810 --> 02:06:15,180
not a question now Casey a Monday I'm

2327
02:06:13,920 --> 02:06:16,680
starting my first day of work at a

2328
02:06:15,180 --> 02:06:18,300
medium-sized game studio after working

2329
02:06:16,680 --> 02:06:19,950
for Microsoft for a few years just want

2330
02:06:18,300 --> 02:06:21,210
to say thanks to you among others for

2331
02:06:19,949 --> 02:06:24,210
the inspiration education that made this

2332
02:06:21,210 --> 02:06:27,810
career change possibly awesome yes

2333
02:06:24,210 --> 02:06:31,279
second person today who said that it's

2334
02:06:27,810 --> 02:06:33,770
good to see so many people or you know

2335
02:06:31,279 --> 02:06:37,829
finding new directions

2336
02:06:33,770 --> 02:06:41,570
Thanks just you know some increased

2337
02:06:37,829 --> 02:06:41,569
exposure to low-level programming stuff

2338
02:06:48,128 --> 02:06:54,128
like it was a good demo on about how a

2339
02:06:52,779 --> 02:06:57,038
bug can mess up the schedule and get you

2340
02:06:54,128 --> 02:07:01,149
2 hours of info but sadly nothing yeah I

2341
02:06:57,038 --> 02:07:03,429
mean that's and I guess the other thing

2342
02:07:01,149 --> 02:07:05,649
that I would say is that's why I think

2343
02:07:03,429 --> 02:07:07,899
debuggers are really underrated I mean a

2344
02:07:05,649 --> 02:07:10,749
lot of that time that we spent there was

2345
02:07:07,899 --> 02:07:13,840
time that a machine could have answered

2346
02:07:10,748 --> 02:07:16,569
the questions right look I wasn't doing

2347
02:07:13,840 --> 02:07:17,739
anything superhuman related not

2348
02:07:16,569 --> 02:07:22,198
superhuman buts

2349
02:07:17,738 --> 02:07:22,198
that was super related to humans

2350
02:07:22,828 --> 02:07:28,358
most of the enquiries that I performed

2351
02:07:26,378 --> 02:07:30,519
are ones that a machine could have

2352
02:07:28,359 --> 02:07:36,039
performed with very limited direction

2353
02:07:30,519 --> 02:07:39,149
right and so better debuggers would save

2354
02:07:36,038 --> 02:07:40,988
a lot of time for low-level programmers

2355
02:07:39,149 --> 02:07:45,010
debuggers right now we're just really

2356
02:07:40,988 --> 02:07:46,898
lousy and so improving debuggers and

2357
02:07:45,010 --> 02:07:48,878
making it so that you don't have to

2358
02:07:46,899 --> 02:07:50,739
spend very much time to debug release

2359
02:07:48,878 --> 02:07:54,998
mode code which is where a lot of bugs

2360
02:07:50,738 --> 02:07:57,038
happen would be a pretty major

2361
02:07:54,998 --> 02:07:59,408
improvement and like most of the two

2362
02:07:57,038 --> 02:08:01,538
hours of today well not two hours

2363
02:07:59,408 --> 02:08:04,118
because we spent an hour before it doing

2364
02:08:01,538 --> 02:08:08,198
that so it was a nap but an hour a good

2365
02:08:04,118 --> 02:08:13,058
hour was spent mostly doing things that

2366
02:08:08,198 --> 02:08:15,458
could have been automated right and so I

2367
02:08:13,059 --> 02:08:18,128
feel like you know I would really like

2368
02:08:15,458 --> 02:08:22,840
to emphasize just how bad the debugging

2369
02:08:18,128 --> 02:08:24,908
situation is we weren't doing things

2370
02:08:22,840 --> 02:08:27,248
that really needed to be done by a

2371
02:08:24,908 --> 02:08:30,698
person those were things that could have

2372
02:08:27,248 --> 02:08:32,728
been done by a computer but that we just

2373
02:08:30,698 --> 02:08:38,219
have to do manually for no real reason

2374
02:08:32,729 --> 02:08:38,219
just poor debuggers right

2375
02:09:21,069 --> 02:09:26,210
so there's a lot of questions here and

2376
02:09:23,689 --> 02:09:30,500
not sure how many we really want to get

2377
02:09:26,210 --> 02:09:32,510
into but we'll start with first one from

2378
02:09:30,500 --> 02:09:34,250
Bulma nadir hey Casey the way you think

2379
02:09:32,510 --> 02:09:35,360
teach how to think about maybe she's

2380
02:09:34,250 --> 02:09:37,550
helped me understand the transmission

2381
02:09:35,359 --> 02:09:39,319
pipe out a lot better but there's one

2382
02:09:37,550 --> 02:09:41,090
thing I think I'm missing at one point

2383
02:09:39,319 --> 02:09:44,389
you put the camera coordinates into clip

2384
02:09:41,090 --> 02:09:46,340
space I was wondering how you scale

2385
02:09:44,389 --> 02:10:00,260
world units to make sure things aren't

2386
02:09:46,340 --> 02:10:03,520
huge on screen so I guess I'm not really

2387
02:10:00,260 --> 02:10:03,520
sure how to answer that question

2388
02:10:26,788 --> 02:10:31,198
in order to give you a really good

2389
02:10:29,219 --> 02:10:33,779
complete answer I think it probably

2390
02:10:31,198 --> 02:10:42,988
would help I guess if I actually brought

2391
02:10:33,779 --> 02:10:48,569
the matrix up so this is the perspective

2392
02:10:42,988 --> 02:10:53,779
projection call that we're that we're

2393
02:10:48,569 --> 02:10:57,960
actually using in handmade Hiro right

2394
02:10:53,779 --> 02:11:03,198
and if you look at the way that this

2395
02:10:57,960 --> 02:11:03,198
matrix is structured what you can see is

2396
02:11:07,460 --> 02:11:14,099
this scale is given by two fundamental

2397
02:11:11,309 --> 02:11:20,760
values a times C and B times C right and

2398
02:11:14,099 --> 02:11:25,650
you can see them right here right in our

2399
02:11:20,760 --> 02:11:27,599
case we fix a at one point O which means

2400
02:11:25,649 --> 02:11:30,448
that we're sort of I don't know how to

2401
02:11:27,599 --> 02:11:32,250
put it but like x coordinate primal like

2402
02:11:30,448 --> 02:11:36,268
we're basically saying we're going to

2403
02:11:32,250 --> 02:11:40,170
adjust the scale in Y of the clip

2404
02:11:36,269 --> 02:11:43,380
transform to account for the aspect

2405
02:11:40,170 --> 02:11:48,269
ratio right because we're creating a

2406
02:11:43,380 --> 02:11:51,900
unit cube for our clip space and we're

2407
02:11:48,269 --> 02:11:54,420
choosing we have to either compress X or

2408
02:11:51,899 --> 02:11:56,219
compress Y differently to make sure that

2409
02:11:54,420 --> 02:12:00,899
we have the same aspirations our screen

2410
02:11:56,219 --> 02:12:04,408
right so hopefully a and B makes sense

2411
02:12:00,899 --> 02:12:05,759
they're neither of those two is scaling

2412
02:12:04,408 --> 02:12:08,638
anything right

2413
02:12:05,760 --> 02:12:13,079
a is 1.0 so it doesn't scale anything at

2414
02:12:08,639 --> 02:12:16,288
all and B is only applying a scale such

2415
02:12:13,078 --> 02:12:24,779
that our unit cube properly captures the

2416
02:12:16,288 --> 02:12:27,328
fact that the final height of the screen

2417
02:12:24,779 --> 02:12:29,309
the final height that we want to see of

2418
02:12:27,328 --> 02:12:33,268
the world you know that slice through

2419
02:12:29,309 --> 02:12:35,760
the world is wider than it is tall

2420
02:12:33,269 --> 02:12:38,010
right and you can see that it's a little

2421
02:12:35,760 --> 02:12:41,989
bit paradoxical its width over height

2422
02:12:38,010 --> 02:12:41,989
that we're putting in there right

2423
02:12:43,128 --> 02:12:47,399
instead of height over width which is

2424
02:12:45,628 --> 02:12:49,229
what you would expect if you were doing

2425
02:12:47,399 --> 02:12:51,359
the other way around but remember it's

2426
02:12:49,229 --> 02:12:54,298
because this is the compression not the

2427
02:12:51,359 --> 02:12:56,489
expansion so we're going the opposite

2428
02:12:54,298 --> 02:12:59,248
direction as we would if we were trying

2429
02:12:56,488 --> 02:13:01,348
to we're not trying to compute the

2430
02:12:59,248 --> 02:13:03,648
height from the width because if we were

2431
02:13:01,349 --> 02:13:05,519
would be the other way around

2432
02:13:03,649 --> 02:13:10,139
instead what we're trying to do is

2433
02:13:05,519 --> 02:13:13,168
compress the height into the same space

2434
02:13:10,139 --> 02:13:14,998
as the width right so that's why the

2435
02:13:13,168 --> 02:13:21,538
ratio is flipped from what you might

2436
02:13:14,998 --> 02:13:23,248
intuitively think okay so these two

2437
02:13:21,538 --> 02:13:25,469
values do not scale the world at all

2438
02:13:23,248 --> 02:13:27,719
they're just trying to make sure that we

2439
02:13:25,469 --> 02:13:29,878
end up with a cube that matches so we

2440
02:13:27,719 --> 02:13:32,668
don't get warping right that matches the

2441
02:13:29,878 --> 02:13:34,649
display because after this transfer

2442
02:13:32,668 --> 02:13:37,349
maccer x' we're going to multiply the

2443
02:13:34,649 --> 02:13:39,809
outcoming values by the number of pixels

2444
02:13:37,349 --> 02:13:41,969
in X&amp;Y and those numbers are different

2445
02:13:39,809 --> 02:13:43,769
so this is accounting for that

2446
02:13:41,969 --> 02:13:45,838
difference in scale on the other side

2447
02:13:43,769 --> 02:13:53,039
might be another way to think of it

2448
02:13:45,838 --> 02:13:56,760
right hopefully okay so what that leaves

2449
02:13:53,038 --> 02:14:00,059
you with is the C value this right here

2450
02:13:56,760 --> 02:14:03,119
and that C value is the thing that does

2451
02:14:00,059 --> 02:14:08,128
all of the scaling that's the focal

2452
02:14:03,118 --> 02:14:11,038
length of the lens right and that C

2453
02:14:08,128 --> 02:14:12,599
value is precisely the thing that gives

2454
02:14:11,038 --> 02:14:20,338
you the scaling that you're talking

2455
02:14:12,599 --> 02:14:22,529
about so the focal length of a lens and

2456
02:14:20,338 --> 02:14:24,689
this is not exactly true because

2457
02:14:22,529 --> 02:14:27,449
obviously we're not really simulating a

2458
02:14:24,689 --> 02:14:29,279
lens per se this is a kind of idealized

2459
02:14:27,448 --> 02:14:36,118
like pinhole camera kind of a thing

2460
02:14:29,279 --> 02:14:38,489
right but it is precisely that focal

2461
02:14:36,118 --> 02:14:42,538
length of the pinhole camera lens that

2462
02:14:38,488 --> 02:14:47,250
determines how big the world appears on

2463
02:14:42,538 --> 02:14:52,079
the cameras film back so that

2464
02:14:47,250 --> 02:14:55,439
is what that is right so that's the

2465
02:14:52,079 --> 02:14:56,069
thing to answer your question that right

2466
02:14:55,439 --> 02:14:59,309
there

2467
02:14:56,069 --> 02:15:03,179
that focal length value is what

2468
02:14:59,310 --> 02:15:05,730
determines how big or small the world

2469
02:15:03,180 --> 02:15:15,150
appears on the picture of it that you

2470
02:15:05,729 --> 02:15:18,239
are taking right I don't know if there's

2471
02:15:15,149 --> 02:15:20,269
any really better way to put it than

2472
02:15:18,239 --> 02:15:20,269
that

2473
02:15:20,630 --> 02:15:26,329
does that make any sense it might not

2474
02:15:23,880 --> 02:15:26,329
have but

2475
02:15:29,698 --> 02:15:44,369
and again it may seem a little bit that

2476
02:15:42,840 --> 02:15:46,319
may not have been a complete enough

2477
02:15:44,369 --> 02:15:47,340
explanation so you know it's an

2478
02:15:46,319 --> 02:15:49,289
important question that you're asking

2479
02:15:47,340 --> 02:15:53,250
this is a this is an important question

2480
02:15:49,289 --> 02:15:54,929
most you know 99% of all programmers

2481
02:15:53,250 --> 02:15:56,609
who've ever used a perspective

2482
02:15:54,929 --> 02:15:58,230
projection matrix don't know how it

2483
02:15:56,609 --> 02:16:00,238
works so it's good that you're asking

2484
02:15:58,229 --> 02:16:03,839
this question because most people don't

2485
02:16:00,238 --> 02:16:07,619
ask this question and and they just you

2486
02:16:03,840 --> 02:16:11,039
know never understand what's going on so

2487
02:16:07,619 --> 02:16:13,079
hmm just to be a little bit more

2488
02:16:11,039 --> 02:16:16,100
concrete and maybe this diagram will

2489
02:16:13,079 --> 02:16:19,140
help a little bit so in a normal camera

2490
02:16:16,100 --> 02:16:22,350
right you've got a thing called the lens

2491
02:16:19,140 --> 02:16:24,030
assembly and the lens assembly is some

2492
02:16:22,350 --> 02:16:25,860
nonsense that's got like all these

2493
02:16:24,029 --> 02:16:28,789
different lenses and crap in it right

2494
02:16:25,859 --> 02:16:31,920
and so the world is out here somewhere

2495
02:16:28,789 --> 02:16:34,200
you know what I mean that we're looking

2496
02:16:31,920 --> 02:16:37,079
at and what's actually happening with

2497
02:16:34,200 --> 02:16:38,880
those lenses is all kinds of light

2498
02:16:37,079 --> 02:16:40,590
bouncing around is happening in here and

2499
02:16:38,879 --> 02:16:42,839
then eventually it gets to a film back

2500
02:16:40,590 --> 02:16:44,610
and you know it exposes some part of the

2501
02:16:42,840 --> 02:16:46,889
film back or the CCD in the case of a

2502
02:16:44,610 --> 02:16:49,019
digital camera nowadays and that's how

2503
02:16:46,888 --> 02:16:50,638
we get the image right and so normally

2504
02:16:49,019 --> 02:16:52,469
when we talk about things like the

2505
02:16:50,638 --> 02:16:54,089
effective focal length of a lens we're

2506
02:16:52,468 --> 02:16:57,329
talking about something like this and

2507
02:16:54,090 --> 02:16:59,700
like okay we're not doing that so the

2508
02:16:57,329 --> 02:17:03,478
word focal length here is not really

2509
02:16:59,700 --> 02:17:06,659
talking about any kind of real-world

2510
02:17:03,478 --> 02:17:08,789
analog of a real lens assembly but it's

2511
02:17:06,659 --> 02:17:11,579
not that far off because what we are

2512
02:17:08,790 --> 02:17:16,019
actually talking about is the following

2513
02:17:11,579 --> 02:17:20,189
thing for a pinhole camera here is my

2514
02:17:16,019 --> 02:17:21,689
pinhole camera right and here is some

2515
02:17:20,189 --> 02:17:24,769
crap in the world

2516
02:17:21,689 --> 02:17:27,689
okay so let's suppose that I take

2517
02:17:24,769 --> 02:17:32,399
something in the world like this ball

2518
02:17:27,689 --> 02:17:36,149
and you are asking the question how

2519
02:17:32,399 --> 02:17:39,449
large is this ball going to appear in my

2520
02:17:36,149 --> 02:17:40,978
game because there's a world with 3d

2521
02:17:39,450 --> 02:17:43,770
coordinates and all this other stuff in

2522
02:17:40,978 --> 02:17:45,929
it but then I'm looking at a screen so

2523
02:17:43,770 --> 02:17:49,110
what you know how do those two things

2524
02:17:45,930 --> 02:17:50,760
correlate together ones like a flat 2d

2525
02:17:49,110 --> 02:17:53,100
display surface where things have an

2526
02:17:50,760 --> 02:17:56,010
actual size I can take a ruler out and

2527
02:17:53,100 --> 02:17:59,610
measure it on my actual screen it has a

2528
02:17:56,010 --> 02:18:02,280
real size in the real world reviewing it

2529
02:17:59,610 --> 02:18:04,829
in but there's also this fake world in

2530
02:18:02,280 --> 02:18:08,970
the game and we're saying stuff like one

2531
02:18:04,829 --> 02:18:10,289
unit is one meter how you know what I

2532
02:18:08,969 --> 02:18:11,879
don't understand right what you're

2533
02:18:10,290 --> 02:18:16,920
saying like I don't get how these things

2534
02:18:11,879 --> 02:18:20,189
are related and so the answer there is

2535
02:18:16,920 --> 02:18:22,500
that well okay the focal length of the

2536
02:18:20,190 --> 02:18:25,710
lens in this case what we're seeing is

2537
02:18:22,500 --> 02:18:27,319
how far from the aperture right the

2538
02:18:25,709 --> 02:18:33,029
thing that the light is passing through

2539
02:18:27,319 --> 02:18:38,789
how far back are we going to get to the

2540
02:18:33,030 --> 02:18:42,900
actual you know to the actual film back

2541
02:18:38,790 --> 02:18:47,100
right and you know so the place where

2542
02:18:42,899 --> 02:18:49,619
the light crosses and inverts there's

2543
02:18:47,100 --> 02:18:51,930
two ways that you can measure that I

2544
02:18:49,620 --> 02:18:53,700
don't actually remember the kind of

2545
02:18:51,930 --> 02:18:56,489
things that I'm too old they flick out

2546
02:18:53,700 --> 02:18:58,050
of my head I know on the days when I

2547
02:18:56,489 --> 02:18:59,430
write the code for this stuff because I

2548
02:18:58,049 --> 02:19:00,899
go relook it up and make sure I've got

2549
02:18:59,430 --> 02:19:04,050
it right so I'm not naming things

2550
02:19:00,899 --> 02:19:06,119
improperly in my actual code but then

2551
02:19:04,049 --> 02:19:11,489
you know I'm sorry so this is gonna be

2552
02:19:06,120 --> 02:19:13,260
slightly wrong in a real camera right

2553
02:19:11,489 --> 02:19:14,699
there's an aperture that light comes

2554
02:19:13,260 --> 02:19:16,530
through because you're getting more than

2555
02:19:14,700 --> 02:19:20,430
a pinhole right it's not a pinhole and

2556
02:19:16,530 --> 02:19:25,320
then there's a place where the light

2557
02:19:20,430 --> 02:19:28,200
crosses so that you know you've got a

2558
02:19:25,319 --> 02:19:31,829
single emanation point light is coming

2559
02:19:28,200 --> 02:19:35,400
out to the lens it's getting redirected

2560
02:19:31,829 --> 02:19:40,709
by the lens it's crossing and then it

2561
02:19:35,399 --> 02:19:44,369
hits right the film back and you know

2562
02:19:40,709 --> 02:19:49,229
like my brains never remembers do you is

2563
02:19:44,370 --> 02:19:53,130
that the focal length or is that the

2564
02:19:49,229 --> 02:19:55,170
focal length right it's probably that

2565
02:19:53,129 --> 02:19:57,509
one I don't remember it doesn't matter

2566
02:19:55,170 --> 02:19:58,859
for our cases because these aren't real

2567
02:19:57,510 --> 02:20:00,898
values we're not submitting a real

2568
02:19:58,859 --> 02:20:02,939
camera but if you were you'd better get

2569
02:20:00,898 --> 02:20:06,689
it right cuz you're gonna be off by two

2570
02:20:02,939 --> 02:20:09,450
right it's you mean 2x you're twice as

2571
02:20:06,689 --> 02:20:11,040
large or half as big depending on which

2572
02:20:09,450 --> 02:20:11,720
way you got it wrong you know what I

2573
02:20:11,040 --> 02:20:13,770
mean

2574
02:20:11,719 --> 02:20:14,879
so you do need to know what that

2575
02:20:13,770 --> 02:20:19,260
actually means if you're doing a real

2576
02:20:14,879 --> 02:20:21,119
camera we're not so the point is this

2577
02:20:19,260 --> 02:20:25,439
distance whether you measure it by half

2578
02:20:21,120 --> 02:20:27,960
or by whole this distance is what

2579
02:20:25,439 --> 02:20:30,809
determines how big the world will look

2580
02:20:27,959 --> 02:20:33,028
in a sense right because when we

2581
02:20:30,809 --> 02:20:35,789
actually project this thing through here

2582
02:20:33,029 --> 02:20:37,649
the pinhole is actually the place where

2583
02:20:35,790 --> 02:20:40,740
these things would flip around right

2584
02:20:37,648 --> 02:20:44,818
onto here and the further back we move

2585
02:20:40,739 --> 02:20:53,459
this thing right the further they would

2586
02:20:44,818 --> 02:20:55,139
diverge does that make sense so it's not

2587
02:20:53,459 --> 02:20:58,679
an accident that we called that the

2588
02:20:55,139 --> 02:21:01,528
focal length it's essentially measuring

2589
02:20:58,680 --> 02:21:04,829
how far back you're putting that camera

2590
02:21:01,529 --> 02:21:06,810
plate in the imaginary camera that we've

2591
02:21:04,829 --> 02:21:14,989
created to photograph this world with

2592
02:21:06,809 --> 02:21:14,989
right but you know

2593
02:21:18,699 --> 02:21:23,699
I don't know if that helps you picture a

2594
02:21:20,949 --> 02:21:31,680
little bit more what's going on in there

2595
02:21:23,699 --> 02:21:31,680
with that that focal length value so

2596
02:21:36,238 --> 02:21:47,189
yeah um trying to think if that makes

2597
02:21:44,949 --> 02:21:47,189
any sense

2598
02:21:56,431 --> 02:21:59,670
it's still not a very good explanation

2599
02:21:58,170 --> 02:22:01,409
because the intuition there was like

2600
02:21:59,670 --> 02:22:03,989
okay so I move this thing back further

2601
02:22:01,409 --> 02:22:07,771
but you know this thing gets bigger as

2602
02:22:03,989 --> 02:22:12,449
well so maybe I can draw this diagram a

2603
02:22:07,771 --> 02:22:16,710
little bit better I don't know if any of

2604
02:22:12,450 --> 02:22:20,280
this is helping it's probably not so

2605
02:22:16,709 --> 02:22:30,390
let's suppose that we're talking about a

2606
02:22:20,280 --> 02:22:37,051
nice 90 degree F over here and let's say

2607
02:22:30,390 --> 02:22:40,619
the camera is pointing this way okay so

2608
02:22:37,050 --> 02:22:43,680
here are the bounds of the camera when

2609
02:22:40,620 --> 02:22:50,280
I'm looking out right and so I'm

2610
02:22:43,681 --> 02:22:52,011
creating a film back here and then I'm

2611
02:22:50,280 --> 02:22:56,370
also going to create another film back

2612
02:22:52,011 --> 02:22:57,420
here it's further back right and then

2613
02:22:56,370 --> 02:23:00,450
I'm gonna create something that's that

2614
02:22:57,420 --> 02:23:03,829
big and I'm gonna pass it through as

2615
02:23:00,450 --> 02:23:03,829
delicately as I can

2616
02:23:13,600 --> 02:23:23,168
all right so let's say it's about that

2617
02:23:16,088 --> 02:23:25,328
big okay um so yeah like if we look at

2618
02:23:23,168 --> 02:23:27,639
what actually happens here when we've

2619
02:23:25,328 --> 02:23:29,288
got these sort of things and you know

2620
02:23:27,639 --> 02:23:46,418
like I said it's unfortunately not the

2621
02:23:29,289 --> 02:23:48,729
best but you know I if we try to imagine

2622
02:23:46,418 --> 02:23:57,969
what's happening here with if we

2623
02:23:48,728 --> 02:23:59,889
literally just made these as as our I'm

2624
02:23:57,969 --> 02:24:05,948
not sure what the right way to say this

2625
02:23:59,889 --> 02:24:10,538
would be if you just imagine these

2626
02:24:05,949 --> 02:24:13,439
things continuing to kind of extend out

2627
02:24:10,539 --> 02:24:13,439
as far as you can

2628
02:24:26,530 --> 02:24:30,190
I just need a better I need a better way

2629
02:24:28,421 --> 02:24:32,351
to draw these diagrams cuz this is just

2630
02:24:30,190 --> 02:24:35,041
I'm trying to show that those triangles

2631
02:24:32,351 --> 02:24:35,041
end up being

2632
02:24:47,109 --> 02:24:54,470
right okay so as best as I can actually

2633
02:24:51,290 --> 02:24:56,600
do this right these are going to be

2634
02:24:54,469 --> 02:24:59,989
similar triangles right so each one of

2635
02:24:56,600 --> 02:25:02,568
these the ratio should be the same right

2636
02:24:59,989 --> 02:25:04,039
I guess it's what I was trying to say so

2637
02:25:02,568 --> 02:25:06,170
the reason I was saying like this is not

2638
02:25:04,040 --> 02:25:10,279
a completely compelling way to actually

2639
02:25:06,170 --> 02:25:12,799
view the focal length effect is because

2640
02:25:10,279 --> 02:25:16,489
the diagram doesn't include the actual

2641
02:25:12,799 --> 02:25:18,789
part that makes this not produce the

2642
02:25:16,489 --> 02:25:22,728
exact same result right

2643
02:25:18,790 --> 02:25:24,500
whereas this diagram does include the

2644
02:25:22,728 --> 02:25:27,019
thing that makes it not produce the

2645
02:25:24,500 --> 02:25:29,209
exact same results which is the fact

2646
02:25:27,020 --> 02:25:33,739
that the aperture size is the same but

2647
02:25:29,209 --> 02:25:36,728
the focal length part is changing well

2648
02:25:33,739 --> 02:25:41,840
that's not a particularly useful way to

2649
02:25:36,728 --> 02:25:51,108
say it I guess but yeah not sure what

2650
02:25:41,840 --> 02:25:53,420
else to put on there so really really

2651
02:25:51,109 --> 02:25:59,090
what you have to imagine happening is

2652
02:25:53,420 --> 02:26:01,460
this pinhole mm has collapsed two parts

2653
02:25:59,090 --> 02:26:07,359
of this camera down into one part of the

2654
02:26:01,459 --> 02:26:14,148
camera so this part is actually changing

2655
02:26:07,359 --> 02:26:16,670
independently from this part and I don't

2656
02:26:14,148 --> 02:26:19,129
know how to draw that in a way that

2657
02:26:16,670 --> 02:26:23,930
makes better sense than what I've what

2658
02:26:19,129 --> 02:26:25,969
I've drawn if I was to draw the real

2659
02:26:23,930 --> 02:26:28,100
version of it I think it becomes a

2660
02:26:25,969 --> 02:26:30,920
little bit clearer right because you can

2661
02:26:28,100 --> 02:26:34,100
see what I mean by I have an aperture

2662
02:26:30,920 --> 02:26:37,430
that lets light in right I have a point

2663
02:26:34,100 --> 02:26:39,260
in the world that I'm projecting right

2664
02:26:37,430 --> 02:26:41,270
and you know maybe I've got if I've got

2665
02:26:39,260 --> 02:26:43,880
two of those points or something right

2666
02:26:41,270 --> 02:26:46,550
and they're both kind of doing something

2667
02:26:43,879 --> 02:26:50,589
that looks a little bit like this and

2668
02:26:46,549 --> 02:26:54,159
they're getting redirected from here

2669
02:26:50,590 --> 02:26:54,159
through a focus

2670
02:26:55,709 --> 02:27:03,448
right and there's the focus point from

2671
02:26:59,969 --> 02:27:07,289
there the film back gets moved forwards

2672
02:27:03,449 --> 02:27:10,920
or backwards right this point doesn't

2673
02:27:07,290 --> 02:27:18,390
change so the further back you move this

2674
02:27:10,920 --> 02:27:22,020
fixed size thing right the more you can

2675
02:27:18,389 --> 02:27:23,789
see how this would change size so the

2676
02:27:22,020 --> 02:27:33,210
right way to do it on this diagram would

2677
02:27:23,790 --> 02:27:34,319
be enforce a fixed size maybe this is

2678
02:27:33,209 --> 02:27:40,459
the way I should have drawn dat first

2679
02:27:34,318 --> 02:27:44,639
right so assume this fixed size here

2680
02:27:40,459 --> 02:27:47,488
right because it is gonna be a fixed

2681
02:27:44,639 --> 02:27:50,608
size right the thing that we produce

2682
02:27:47,488 --> 02:27:55,469
that unit cube is the unit cube that's

2683
02:27:50,609 --> 02:27:56,970
how big it is right so maybe this is the

2684
02:27:55,469 --> 02:27:58,948
best way to draw the diagram I don't

2685
02:27:56,969 --> 02:28:00,750
know it's like I think about it in these

2686
02:27:58,949 --> 02:28:03,620
terms nowadays because I'm used to

2687
02:28:00,750 --> 02:28:06,090
having to simulate real camera effects

2688
02:28:03,620 --> 02:28:08,819
so when you go to a pinhole camera I'm

2689
02:28:06,090 --> 02:28:12,210
not sure the best way to like visualize

2690
02:28:08,818 --> 02:28:16,799
what's going on in my head I think of it

2691
02:28:12,209 --> 02:28:21,568
like this diagram but we don't have that

2692
02:28:16,799 --> 02:28:22,978
part of this diagram so maybe a better

2693
02:28:21,568 --> 02:28:25,198
way to think it would be if this is a

2694
02:28:22,978 --> 02:28:26,549
fixed size the reason that we call it

2695
02:28:25,199 --> 02:28:29,010
focal length is because you can imagine

2696
02:28:26,549 --> 02:28:31,559
moving this fixed size plate backwards

2697
02:28:29,010 --> 02:28:34,380
and as you move that fixed size plate

2698
02:28:31,559 --> 02:28:38,250
backwards right this is going to take up

2699
02:28:34,379 --> 02:28:42,959
more room on the back of the plate and

2700
02:28:38,250 --> 02:28:46,100
get bigger right does that make sense so

2701
02:28:42,959 --> 02:28:52,379
as the focal length gets further back

2702
02:28:46,100 --> 02:28:56,340
this will get bigger so that's why when

2703
02:28:52,379 --> 02:28:58,589
you look on here these clips space for

2704
02:28:56,340 --> 02:29:01,590
dances that come out the focal length is

2705
02:28:58,590 --> 02:29:04,590
just a straight up scale and it's a

2706
02:29:01,590 --> 02:29:06,600
scale because it's effectively just

2707
02:29:04,590 --> 02:29:08,639
taking these and pushing them outwards

2708
02:29:06,600 --> 02:29:08,909
as the focal length gets bigger they

2709
02:29:08,639 --> 02:29:12,989
will

2710
02:29:08,909 --> 02:29:13,851
get larger right I don't know if that

2711
02:29:12,989 --> 02:29:20,459
makes any sense

2712
02:29:13,851 --> 02:29:23,970
um and so that's like effectively what

2713
02:29:20,459 --> 02:29:25,679
you're doing in a compressed pinhole

2714
02:29:23,969 --> 02:29:31,379
camera so that these things don't

2715
02:29:25,680 --> 02:29:33,271
actually really exist but you can think

2716
02:29:31,379 --> 02:29:35,719
of the you know you can still think of

2717
02:29:33,271 --> 02:29:39,780
this as the negative one positive one

2718
02:29:35,719 --> 02:29:41,729
bounds of the clip space right and so

2719
02:29:39,780 --> 02:29:46,170
that focal length is effectively

2720
02:29:41,729 --> 02:29:51,239
changing where this one one plane is

2721
02:29:46,170 --> 02:29:53,190
likes lit up versus your your camera

2722
02:29:51,239 --> 02:29:55,430
boundary there right versus the well not

2723
02:29:53,190 --> 02:29:58,800
for us our camera body versus the world

2724
02:29:55,430 --> 02:30:03,000
that you're looking into right so you're

2725
02:29:58,799 --> 02:30:04,890
you're changing how this fixed divide

2726
02:30:03,000 --> 02:30:08,129
because remember the divide doesn't

2727
02:30:04,890 --> 02:30:10,049
change right the divide is happening in

2728
02:30:08,129 --> 02:30:12,119
you know proportional to the near far

2729
02:30:10,049 --> 02:30:15,420
clip playing stuff for the Z coordinate

2730
02:30:12,120 --> 02:30:18,420
and just press relative to W directly

2731
02:30:15,420 --> 02:30:22,649
for the actual values that come out

2732
02:30:18,420 --> 02:30:24,810
right so as far as the projection is

2733
02:30:22,649 --> 02:30:28,049
concerned you can see it doesn't care

2734
02:30:24,810 --> 02:30:32,789
it's not even looking right at those

2735
02:30:28,049 --> 02:30:35,670
values so it really is just this is

2736
02:30:32,790 --> 02:30:40,430
fixed and you're just figuring out where

2737
02:30:35,670 --> 02:30:46,771
that focal length film back is placed

2738
02:30:40,430 --> 02:30:48,390
does that make sense so again I have a

2739
02:30:46,771 --> 02:30:50,010
really hard time explaining it and I'm

2740
02:30:48,390 --> 02:30:51,600
apologize for that because I just don't

2741
02:30:50,010 --> 02:30:53,909
think in terms of pinhole cameras much

2742
02:30:51,601 --> 02:30:56,130
anymore but that might be the best way

2743
02:30:53,909 --> 02:30:59,069
to say it right is that you're

2744
02:30:56,129 --> 02:31:01,170
effectively sliding the film back closer

2745
02:30:59,069 --> 02:31:03,390
to the pinhole or further from the

2746
02:31:01,170 --> 02:31:08,340
pinhole by adjusting that focal length

2747
02:31:03,390 --> 02:31:10,549
parameter sorry to take so long to get

2748
02:31:08,340 --> 02:31:10,549
there

2749
02:31:18,810 --> 02:31:23,170
0l PBM says I think in a pinhole camera

2750
02:31:21,370 --> 02:31:26,820
the focal length is zero and the focal

2751
02:31:23,170 --> 02:31:26,819
point is the actual pinhole itself

2752
02:31:28,829 --> 02:31:35,079
yeah that sounds about right

2753
02:31:32,681 --> 02:31:43,149
you've like moved those two things to be

2754
02:31:35,079 --> 02:31:57,640
coincidence yeah so you know what that

2755
02:31:43,149 --> 02:31:59,949
this phrase here it's really you know

2756
02:31:57,640 --> 02:32:04,000
that value is really the distance of the

2757
02:31:59,950 --> 02:32:06,460
film back from the pinhole I write do

2758
02:32:04,000 --> 02:32:09,819
you know what I mean and so I feel like

2759
02:32:06,459 --> 02:32:11,289
we just named that poorly we went

2760
02:32:09,819 --> 02:32:12,970
through lots of iterations of this and

2761
02:32:11,290 --> 02:32:14,800
we probably just kept this value called

2762
02:32:12,970 --> 02:32:16,359
focal length maybe it was the focal

2763
02:32:14,799 --> 02:32:21,640
length at one point it's definitely not

2764
02:32:16,360 --> 02:32:23,710
now but a better way to think of it it's

2765
02:32:21,640 --> 02:32:27,069
like that's the distance the film back

2766
02:32:23,709 --> 02:32:28,000
has moved from the pinhole which would

2767
02:32:27,069 --> 02:32:34,000
be the point

2768
02:32:28,000 --> 02:32:36,510
the focal point I guess it's the place

2769
02:32:34,000 --> 02:32:39,870
where all the light beams cross right

2770
02:32:36,510 --> 02:32:39,870
and invert

2771
02:32:45,420 --> 02:32:48,460
going the perspective question so

2772
02:32:47,260 --> 02:32:50,318
mathematically you were recreating the

2773
02:32:48,459 --> 02:32:52,688
space bounded by the near and far clip

2774
02:32:50,318 --> 02:32:54,158
frame in a space defined by the lens the

2775
02:32:52,689 --> 02:32:56,949
focal length so if you could imagine one

2776
02:32:54,158 --> 02:32:59,109
pixel as being a vector from the lens to

2777
02:32:56,949 --> 02:33:01,810
some point you are literally just doing

2778
02:32:59,109 --> 02:33:02,770
a magnitude scale if that's the case how

2779
02:33:01,809 --> 02:33:07,948
do you handle the fact that you're

2780
02:33:02,770 --> 02:33:07,949
mapping a curved surface onto a plane

2781
02:33:08,728 --> 02:33:24,219
you mean hmm what do you mean by a

2782
02:33:14,648 --> 02:33:28,209
curved surface G because remember we

2783
02:33:24,219 --> 02:33:30,879
don't really project curved surfaces in

2784
02:33:28,209 --> 02:33:33,669
the 3d pipeline hardly ever if there are

2785
02:33:30,879 --> 02:33:35,438
some things that we could talk about

2786
02:33:33,670 --> 02:33:38,828
that like if you're projecting NURBS

2787
02:33:35,439 --> 02:33:41,439
into from if you're going to project

2788
02:33:38,828 --> 02:33:43,750
things that actually themselves have the

2789
02:33:41,439 --> 02:33:46,328
ability to project there's a whole other

2790
02:33:43,750 --> 02:33:49,478
set of things you have to talk about but

2791
02:33:46,328 --> 02:33:51,520
we only really project points so we we

2792
02:33:49,478 --> 02:33:54,639
usually convert curved surfaces to fixed

2793
02:33:51,520 --> 02:34:02,729
points and we just use lots of them to

2794
02:33:54,639 --> 02:34:05,349
approximate the curved surface right so

2795
02:34:02,728 --> 02:34:07,959
we don't ever have to ask the question

2796
02:34:05,350 --> 02:34:11,649
how does a curved surface in the world

2797
02:34:07,959 --> 02:34:18,188
project onto a into a curved surface on

2798
02:34:11,648 --> 02:34:20,939
the film back right but maybe that's not

2799
02:34:18,189 --> 02:34:20,939
what you're asking

2800
02:34:28,930 --> 02:34:32,389
what you may send me since I think again

2801
02:34:31,280 --> 02:34:33,829
it thank you very much I'm gonna mess

2802
02:34:32,389 --> 02:34:35,059
around with it get things Cub yeah sorry

2803
02:34:33,829 --> 02:34:36,709
it took me so long get there like I said

2804
02:34:35,059 --> 02:34:37,670
one of the problems with the pinhole

2805
02:34:36,709 --> 02:34:41,289
camera thing is I've kind of forgotten

2806
02:34:37,670 --> 02:34:41,290
how to think about it very efficiently

2807
02:34:44,049 --> 02:34:48,590
there's just you know human brains

2808
02:34:46,250 --> 02:34:50,450
aren't great including mine and so I

2809
02:34:48,590 --> 02:34:52,549
forget a lot of stuff you know you work

2810
02:34:50,450 --> 02:34:54,740
through it and then you just you page it

2811
02:34:52,549 --> 02:34:57,858
out and you remember how to get back to

2812
02:34:54,739 --> 02:35:03,228
it if you need to but takes it sometime

2813
02:34:57,859 --> 02:35:06,079
so yeah how much do curve monitors

2814
02:35:03,228 --> 02:35:08,289
complicate this um they you know they

2815
02:35:06,079 --> 02:35:11,239
don't really complicate it much at all

2816
02:35:08,290 --> 02:35:14,060
if you wanted to take a curve monitor

2817
02:35:11,239 --> 02:35:16,789
into account you certainly can in your

2818
02:35:14,059 --> 02:35:20,029
projection the problem that you actually

2819
02:35:16,790 --> 02:35:22,430
get with curved monitors is that

2820
02:35:20,030 --> 02:35:24,170
piecewise linear approximations don't

2821
02:35:22,430 --> 02:35:27,220
actually work on curved monitors because

2822
02:35:24,170 --> 02:35:31,639
the monitor is curved so if you really

2823
02:35:27,219 --> 02:35:34,489
actually want to do proper rendering for

2824
02:35:31,639 --> 02:35:40,340
a curved monitor you actually need to

2825
02:35:34,489 --> 02:35:43,600
change the 3d pipeline to support proper

2826
02:35:40,340 --> 02:35:45,770
what's called perspective rasterization

2827
02:35:43,600 --> 02:35:51,470
that's actually not that hard

2828
02:35:45,770 --> 02:35:53,390
but it doesn't you can't do it on modern

2829
02:35:51,469 --> 02:35:58,039
hardware it doesn't support it because

2830
02:35:53,389 --> 02:36:00,799
the rasterizer is fixed to be more sin

2831
02:35:58,040 --> 02:36:02,660
fat what I'm talking about so if we

2832
02:36:00,799 --> 02:36:04,429
wanted to extend our projection

2833
02:36:02,659 --> 02:36:07,280
equations to work properly on a curve

2834
02:36:04,430 --> 02:36:09,739
monitor it's not that hard all we have

2835
02:36:07,280 --> 02:36:12,770
to do is say oh when we go ahead and

2836
02:36:09,739 --> 02:36:16,219
project these things then when we're

2837
02:36:12,770 --> 02:36:17,899
projecting instead of just forcing

2838
02:36:16,219 --> 02:36:21,500
things through a matrix and saying that

2839
02:36:17,898 --> 02:36:23,869
we're done we just need to go oh this

2840
02:36:21,500 --> 02:36:28,639
this back here that we're projecting

2841
02:36:23,870 --> 02:36:30,979
onto right is is curved so the distance

2842
02:36:28,639 --> 02:36:33,648
that things go when they come through

2843
02:36:30,978 --> 02:36:35,809
here is not going to be the same it's

2844
02:36:33,648 --> 02:36:39,019
not that hard to work out the math for

2845
02:36:35,809 --> 02:36:41,389
that because you know based on the

2846
02:36:39,020 --> 02:36:43,520
direction of the thing being projected

2847
02:36:41,389 --> 02:36:48,408
what that distance is for the curve

2848
02:36:43,520 --> 02:36:50,000
monitor right so it's not that bad if

2849
02:36:48,408 --> 02:36:52,398
you had to work that out but the problem

2850
02:36:50,000 --> 02:36:55,068
is then you're going to get specific

2851
02:36:52,398 --> 02:36:57,198
discrete answers for like points of a

2852
02:36:55,068 --> 02:36:59,000
polygon and then when you rasterize

2853
02:36:57,199 --> 02:37:02,210
you're going to interpolate between that

2854
02:36:59,000 --> 02:37:04,760
directly and that's not what you

2855
02:37:02,209 --> 02:37:07,818
actually want you want the whole you

2856
02:37:04,760 --> 02:37:09,710
want every pixel to to properly have

2857
02:37:07,818 --> 02:37:12,680
taken into account that perspective work

2858
02:37:09,709 --> 02:37:14,719
right but like I said that's it's

2859
02:37:12,680 --> 02:37:16,670
actually not that hard you could we

2860
02:37:14,719 --> 02:37:19,398
could have built all 3d Hardware to do

2861
02:37:16,670 --> 02:37:22,040
this it's just we didn't because

2862
02:37:19,398 --> 02:37:25,760
and by the way curved monitors isn't the

2863
02:37:22,040 --> 02:37:28,279
most interesting case it's actually lens

2864
02:37:25,760 --> 02:37:30,170
I optic that are usually the interesting

2865
02:37:28,279 --> 02:37:32,449
case but they have another problem which

2866
02:37:30,170 --> 02:37:36,460
is RGB gets shifted differently through

2867
02:37:32,449 --> 02:37:36,460
a lens it's really a long story but

2868
02:37:53,681 --> 02:37:59,009
like where

2869
02:37:55,860 --> 02:37:59,009
[Music]

2870
02:38:10,370 --> 02:38:20,689
um so I have a particular paper that I

2871
02:38:17,209 --> 02:38:22,429
want to reference right now and I'm

2872
02:38:20,689 --> 02:38:26,590
having a really hard time thinking of

2873
02:38:22,430 --> 02:38:26,590
what its name is so I can't find it

2874
02:38:42,398 --> 02:38:54,529
there it is I think yes um so this paper

2875
02:38:51,978 --> 02:38:56,358
is literally about this exact topic and

2876
02:38:54,530 --> 02:38:58,540
I highly recommend reading it if you

2877
02:38:56,359 --> 02:39:01,030
just want an interesting read it is

2878
02:38:58,540 --> 02:39:05,330
useful to no one at all at this point

2879
02:39:01,030 --> 02:39:08,659
because you can't do it in hardware as

2880
02:39:05,329 --> 02:39:12,170
far as I know but you know you could

2881
02:39:08,659 --> 02:39:14,739
have done it so at least I think am I

2882
02:39:12,170 --> 02:39:14,739
wrong about this

2883
02:39:24,340 --> 02:39:29,670
I don't remember if they came up with

2884
02:39:26,260 --> 02:39:29,670
like a way to hack it

2885
02:39:39,648 --> 02:39:43,549
I don't remember if they try to make a

2886
02:39:41,540 --> 02:39:46,010
way to hack it into a current GPU

2887
02:39:43,549 --> 02:39:49,639
pipeline or not I'm sorry I just don't

2888
02:39:46,010 --> 02:39:54,050
remember but the point is ignore whether

2889
02:39:49,639 --> 02:39:56,389
a GPU can do it or not you could make a

2890
02:39:54,049 --> 02:39:58,219
GPU do it because it actually works the

2891
02:39:56,389 --> 02:40:01,010
exact same way as current GPU

2892
02:39:58,219 --> 02:40:03,379
rasterization works it just takes the

2893
02:40:01,010 --> 02:40:06,889
bounds of what could be the projected

2894
02:40:03,379 --> 02:40:09,858
area of a particular triangle and then

2895
02:40:06,889 --> 02:40:13,728
when it actually computes the values at

2896
02:40:09,859 --> 02:40:18,979
the pixel coordinates it just does the

2897
02:40:13,728 --> 02:40:20,269
correct full 3d homogeneous computation

2898
02:40:18,978 --> 02:40:24,438
of what they should be through the

2899
02:40:20,270 --> 02:40:28,010
curved projection right so this does

2900
02:40:24,439 --> 02:40:31,970
literally the exact right thing for

2901
02:40:28,010 --> 02:40:38,020
curved projections and it's pretty cool

2902
02:40:31,969 --> 02:40:40,819
I that's I guess what I would say right

2903
02:40:38,020 --> 02:40:43,579
and like I said it's really just about

2904
02:40:40,819 --> 02:40:49,100
changing your idea of what the bounds of

2905
02:40:43,579 --> 02:40:51,489
the projected triangle are and then when

2906
02:40:49,100 --> 02:40:54,020
you compute what pixels are in or out

2907
02:40:51,489 --> 02:40:55,850
and what the values are they're pixels

2908
02:40:54,020 --> 02:40:57,020
you just use the homogeneous coordinates

2909
02:40:55,850 --> 02:40:59,809
still to make sure that you're actually

2910
02:40:57,020 --> 02:41:01,970
doing the full curve projection at each

2911
02:40:59,809 --> 02:41:04,100
point it just works the pits the same

2912
02:41:01,969 --> 02:41:06,019
pixel shaders will just work at that

2913
02:41:04,100 --> 02:41:09,319
point right so it's really just about

2914
02:41:06,020 --> 02:41:15,609
the rasterizer how it's doing the those

2915
02:41:09,319 --> 02:41:15,609
how it's feeding that right

2916
02:41:35,690 --> 02:41:41,829
I imagine the true surface as being an

2917
02:41:38,271 --> 02:41:46,521
arc with radius equals focal length oh

2918
02:41:41,829 --> 02:41:47,690
okay mmm-hmm so I maybe understand what

2919
02:41:46,521 --> 02:41:49,430
you're asking about with the curb

2920
02:41:47,690 --> 02:41:54,260
services now this is jumping back to the

2921
02:41:49,430 --> 02:42:00,440
previous question let me try to I give

2922
02:41:54,260 --> 02:42:04,159
you you a more clear impression here so

2923
02:42:00,440 --> 02:42:05,601
again with any camera right so we'll try

2924
02:42:04,159 --> 02:42:08,860
to get out of the pinhole versus regular

2925
02:42:05,601 --> 02:42:11,960
there is some point where this stuff is

2926
02:42:08,860 --> 02:42:14,569
inverting right and so for our pinhole

2927
02:42:11,959 --> 02:42:16,189
camera you know light from the world is

2928
02:42:14,569 --> 02:42:18,920
going through the pinhole and inverting

2929
02:42:16,190 --> 02:42:21,560
at the pinhole with our wide aperture

2930
02:42:18,920 --> 02:42:24,680
camera it's going through the aperture

2931
02:42:21,560 --> 02:42:26,329
right so it's like actually all of the

2932
02:42:24,680 --> 02:42:29,810
light is going across this entire

2933
02:42:26,329 --> 02:42:31,640
surface and then there's a pinhole like

2934
02:42:29,810 --> 02:42:36,649
this it's not pinhole there's a point

2935
02:42:31,640 --> 02:42:39,170
where the same location that goes

2936
02:42:36,649 --> 02:42:43,159
through two sides of the lens will

2937
02:42:39,170 --> 02:42:46,579
invert and project right so stuff like

2938
02:42:43,159 --> 02:42:49,039
this right if the focal length is set to

2939
02:42:46,579 --> 02:42:51,500
that you get here if you take these two

2940
02:42:49,040 --> 02:42:53,061
going through the same point so let's

2941
02:42:51,500 --> 02:42:56,149
say you took them both going through

2942
02:42:53,060 --> 02:42:58,250
here where they would cross is probably

2943
02:42:56,149 --> 02:43:00,729
the equivalent of the pinhole so

2944
02:42:58,250 --> 02:43:03,351
ignoring all that we have a point

2945
02:43:00,729 --> 02:43:06,969
somewhere where the light beams crossed

2946
02:43:03,351 --> 02:43:10,280
and we don't know how we got there right

2947
02:43:06,969 --> 02:43:13,250
when those beams cross even if this

2948
02:43:10,280 --> 02:43:17,329
surface is curved right versus straight

2949
02:43:13,250 --> 02:43:19,940
we don't care the film back just needs

2950
02:43:17,329 --> 02:43:21,890
to be the shape of the display so if

2951
02:43:19,940 --> 02:43:23,569
it's a photograph it's flat if it's a

2952
02:43:21,890 --> 02:43:24,859
monitor it's flat at the monitors flat

2953
02:43:23,569 --> 02:43:28,329
it would be curbed the monitor was

2954
02:43:24,860 --> 02:43:32,360
curved the actual projection on here

2955
02:43:28,329 --> 02:43:35,450
we're trying to ask where it hits a flat

2956
02:43:32,360 --> 02:43:36,250
surface we're not trying to ask how far

2957
02:43:35,450 --> 02:43:38,870
this went

2958
02:43:36,250 --> 02:43:42,021
we're not asking how long this ray is

2959
02:43:38,870 --> 02:43:45,829
we're waiting until the ray hits our

2960
02:43:42,021 --> 02:43:48,320
collector so it doesn't produce for a

2961
02:43:45,829 --> 02:43:49,370
flat collector it doesn't produce an

2962
02:43:48,319 --> 02:43:51,289
ideal function looks

2963
02:43:49,370 --> 02:43:53,329
that it's actually producing a

2964
02:43:51,290 --> 02:43:55,490
projection that is flat on the flat

2965
02:43:53,329 --> 02:44:01,459
surface and then we stick it on a flat

2966
02:43:55,489 --> 02:44:04,280
surface and we're done right so no there

2967
02:44:01,459 --> 02:44:06,169
isn't a curve induced by the fact that

2968
02:44:04,280 --> 02:44:09,260
these rays are traveling different

2969
02:44:06,170 --> 02:44:12,049
distances it's okay that they are right

2970
02:44:09,260 --> 02:44:13,909
that's okay because we're making a flat

2971
02:44:12,049 --> 02:44:15,019
collector of rays that are hitting it

2972
02:44:13,909 --> 02:44:17,239
and they were putting it onto a flat

2973
02:44:15,020 --> 02:44:20,540
surface we don't need to think about the

2974
02:44:17,239 --> 02:44:23,228
curvature at all there hopefully that

2975
02:44:20,540 --> 02:44:23,229
helps a little bit

2976
02:44:30,210 --> 02:44:40,489
all right I think I have definitely

2977
02:44:35,060 --> 02:44:40,489
talked enough today for my poor voice I

2978
02:44:40,521 --> 02:44:46,341
can't remember what questions we skipped

2979
02:44:42,899 --> 02:44:46,341
I hope they weren't super important

2980
02:44:48,440 --> 02:44:51,831
really quickly

2981
02:45:02,799 --> 02:45:06,198
so there's only one it looks like we

2982
02:45:04,818 --> 02:45:09,889
missed which was if I wanted to create

2983
02:45:06,199 --> 02:45:14,060
seamless terrains starting from a cube

2984
02:45:09,889 --> 02:45:16,458
like tile map what algorithm should I

2985
02:45:14,059 --> 02:45:18,168
look into so that's a little bit too

2986
02:45:16,459 --> 02:45:19,760
open-ended and it also was a little

2987
02:45:18,168 --> 02:45:22,789
under specified so I'd say I'm probably

2988
02:45:19,760 --> 02:45:24,318
not gonna take that one I apologize I'm

2989
02:45:22,789 --> 02:45:25,998
serious I was thinking that you'd want

2990
02:45:24,318 --> 02:45:27,648
to solve the problem that you'd get a

2991
02:45:25,998 --> 02:45:30,350
differential zooming but it seems like

2992
02:45:27,648 --> 02:45:31,788
this not too much an issue okay well as

2993
02:45:30,350 --> 02:45:33,318
long as alright so hopefully we've

2994
02:45:31,789 --> 02:45:35,088
addressed all the questions again sorry

2995
02:45:33,318 --> 02:45:38,628
I took me a while to get around to it to

2996
02:45:35,088 --> 02:45:42,949
a good diagram for what was happening in

2997
02:45:38,629 --> 02:45:44,989
the camera land it's confusing stuff

2998
02:45:42,949 --> 02:45:46,908
right and it's because there's so many

2999
02:45:44,988 --> 02:45:52,219
pieces that are interacting at that

3000
02:45:46,908 --> 02:45:53,600
point you know there's the concept that

3001
02:45:52,219 --> 02:45:56,328
we're shrinking it down into the clip

3002
02:45:53,600 --> 02:45:58,539
space so you know you're inherently

3003
02:45:56,328 --> 02:46:01,488
thinking of this like negative one one

3004
02:45:58,539 --> 02:46:04,489
space and then you're like well what

3005
02:46:01,488 --> 02:46:05,930
does that mean exactly because we're

3006
02:46:04,488 --> 02:46:07,430
also multiplying by this focal length

3007
02:46:05,930 --> 02:46:09,470
value why are we doing that and what's

3008
02:46:07,430 --> 02:46:10,939
that doing to the values and and then

3009
02:46:09,469 --> 02:46:13,578
there's the aspect ratio coming in as

3010
02:46:10,939 --> 02:46:15,588
well and there's a divide by Z and so

3011
02:46:13,578 --> 02:46:18,559
you know thinking all through all that

3012
02:46:15,588 --> 02:46:20,510
stuff you can see what it does

3013
02:46:18,559 --> 02:46:24,049
mathematically very easily by just

3014
02:46:20,510 --> 02:46:26,300
looking at the numbers and where they go

3015
02:46:24,049 --> 02:46:29,809
but it's hard to come up with an

3016
02:46:26,299 --> 02:46:32,599
intuitive picture so I tend to like the

3017
02:46:29,809 --> 02:46:34,278
film back distance way that's why I

3018
02:46:32,600 --> 02:46:35,328
usually went there but it was hard for

3019
02:46:34,279 --> 02:46:37,039
me to kind of get to the point where

3020
02:46:35,328 --> 02:46:39,708
it's like oh the right way to think

3021
02:46:37,039 --> 02:46:42,409
about that in this face is to say the

3022
02:46:39,709 --> 02:46:44,569
film back is a fixed size so as you move

3023
02:46:42,408 --> 02:46:47,029
it back it doesn't widen with those

3024
02:46:44,568 --> 02:46:50,299
projection lines it's the same size so

3025
02:46:47,029 --> 02:46:53,149
you're collecting more or less of that

3026
02:46:50,299 --> 02:46:55,488
as you change where you're at and that's

3027
02:46:53,148 --> 02:46:57,618
what scales the world effectively I

3028
02:46:55,488 --> 02:46:59,628
think that's a good way to think about

3029
02:46:57,619 --> 02:47:01,668
it intuitively there's a lot of ways you

3030
02:46:59,629 --> 02:47:03,770
could Intuit it I find that to be a good

3031
02:47:01,668 --> 02:47:06,408
way because I feel like it helps you

3032
02:47:03,770 --> 02:47:08,149
take the next step which is to start

3033
02:47:06,408 --> 02:47:10,248
thinking in terms of real lens assembly

3034
02:47:08,148 --> 02:47:12,288
sim which is where you have to go

3035
02:47:10,248 --> 02:47:14,229
eventually right once you start doing a

3036
02:47:12,289 --> 02:47:16,101
harder core 3d engine

3037
02:47:14,229 --> 02:47:18,709
you need to be able to think about

3038
02:47:16,101 --> 02:47:20,239
things like bokeh and lens aberration

3039
02:47:18,709 --> 02:47:21,949
and these sorts of things that just

3040
02:47:20,239 --> 02:47:25,220
don't happen with a pinhole camera and

3041
02:47:21,950 --> 02:47:27,471
so if you try to use just just a similar

3042
02:47:25,220 --> 02:47:30,649
triangles projection and it's the only

3043
02:47:27,470 --> 02:47:32,060
thing you ever thought about you can't

3044
02:47:30,649 --> 02:47:35,989
get there so it helps to have your

3045
02:47:32,060 --> 02:47:37,729
intuition think more about an actual

3046
02:47:35,989 --> 02:47:40,310
physical assembly I think that's a good

3047
02:47:37,729 --> 02:47:42,350
habit to get into cuz it'll shorten the

3048
02:47:40,310 --> 02:47:44,511
length that the it shortens the gap you

3049
02:47:42,351 --> 02:47:47,181
have to cross to start getting into more

3050
02:47:44,511 --> 02:47:48,710
advanced rendering techniques later we

3051
02:47:47,181 --> 02:47:50,120
don't do those on handmade Hiro but you

3052
02:47:48,709 --> 02:47:51,619
know if you're someone who goes into the

3053
02:47:50,120 --> 02:47:52,671
graphics running you're gonna have to do

3054
02:47:51,620 --> 02:48:02,120
that you're gonna have to think about

3055
02:47:52,671 --> 02:48:05,780
those later alright let's see here I'm

3056
02:48:02,120 --> 02:48:08,021
gonna go ahead and close things down

3057
02:48:05,780 --> 02:48:08,021
here

3058
02:48:08,120 --> 02:48:11,990
alright thanks everyone for joining me

3059
02:48:10,851 --> 02:48:13,159
for the episode of handmade Hiro it's

3060
02:48:11,989 --> 02:48:15,530
what a pleasure coating with you as

3061
02:48:13,159 --> 02:48:17,511
always if you want to follow along the

3062
02:48:15,530 --> 02:48:19,131
series at home you can always go to

3063
02:48:17,511 --> 02:48:20,931
handmade hero not org and pre-order the

3064
02:48:19,130 --> 02:48:22,130
game it comes with a source code so you

3065
02:48:20,931 --> 02:48:23,271
can play around with stuff like the

3066
02:48:22,130 --> 02:48:27,050
focal length perimeter and see what it

3067
02:48:23,271 --> 02:48:28,431
actually does that's it for tomorrow

3068
02:48:27,050 --> 02:48:30,921
I'm just gonna pick up where we left off

3069
02:48:28,431 --> 02:48:33,771
today we weren't able to find that bug

3070
02:48:30,921 --> 02:48:35,421
we're gonna have to see if we can cut it

3071
02:48:33,771 --> 02:48:37,610
down some other way it's a pretty

3072
02:48:35,421 --> 02:48:38,569
elusive one and I'm not really sure

3073
02:48:37,610 --> 02:48:40,190
where it's coming from

3074
02:48:38,569 --> 02:48:42,649
so it's gonna be a bit tricky but

3075
02:48:40,190 --> 02:48:46,250
hopefully we'll get it we'll try to pay

3076
02:48:42,649 --> 02:48:47,779
close attention let me see it next time

3077
02:48:46,250 --> 02:48:49,370
that's it I hope see you back here

3078
02:48:47,780 --> 02:48:51,320
tomorrow same time same place until then

3079
02:48:49,370 --> 02:48:54,261
have fun program everyone and I'll see

3080
02:48:51,319 --> 02:48:56,380
everybody on the Internet take it easy

3081
02:48:54,261 --> 02:48:56,381
everybody

