1
00:00:01,520 --> 00:00:04,769
okay hello everyone and welcome to hand

2
00:00:03,569 --> 00:00:08,279
made here oh sure we code a complete

3
00:00:04,769 --> 00:00:11,189
game live on stream we are going to take

4
00:00:08,279 --> 00:00:13,859
a look at doing some lighting refinement

5
00:00:11,189 --> 00:00:17,730
today it's actually kind of getting to a

6
00:00:13,859 --> 00:00:19,698
nice spot honestly I have been liking

7
00:00:17,730 --> 00:00:22,199
the lighting more and more as we go

8
00:00:19,699 --> 00:00:23,820
especially because in general these are

9
00:00:22,199 --> 00:00:26,070
not the sorts of systems that anyone

10
00:00:23,820 --> 00:00:27,480
really knows how to do well so it's

11
00:00:26,070 --> 00:00:29,579
always kind of a little bit of a

12
00:00:27,480 --> 00:00:32,368
exploration to figure out how to put

13
00:00:29,579 --> 00:00:34,890
something in there that's nice in

14
00:00:32,368 --> 00:00:40,710
general though we still are not quite

15
00:00:34,890 --> 00:00:41,939
there yet like what what well I feel

16
00:00:40,710 --> 00:00:47,058
like we kind of have to click on that

17
00:00:41,939 --> 00:00:50,128
button how likely is I would recommend

18
00:00:47,058 --> 00:00:51,780
that's hard to say I mean I guess I

19
00:00:50,128 --> 00:00:53,669
wouldn't know what else to recommend so

20
00:00:51,780 --> 00:00:56,100
in that sense I'm extremely likely if

21
00:00:53,670 --> 00:00:58,969
you're asking how much I like it well

22
00:00:56,100 --> 00:01:03,448
it's like a zero or a two or something

23
00:00:58,969 --> 00:01:05,579
we'll say five because I don't know what

24
00:01:03,448 --> 00:01:13,289
rate what changes would just get high

25
00:01:05,579 --> 00:01:18,118
rating much better performance see what

26
00:01:13,290 --> 00:01:22,969
else do we want here I think that's the

27
00:01:18,118 --> 00:01:29,129
biggest one what are the sorts of things

28
00:01:22,969 --> 00:01:32,069
don't pop up license windows and survey

29
00:01:29,129 --> 00:01:35,759
windows in the middle of me trying to

30
00:01:32,069 --> 00:01:39,658
code get rid of all the weird crap like

31
00:01:35,759 --> 00:01:45,109
the yellow flag that shows up in the

32
00:01:39,659 --> 00:01:50,570
corner and the web startup stuff and

33
00:01:45,109 --> 00:01:54,269
stop installing an SQL server and 15

34
00:01:50,569 --> 00:01:57,599
million services just to run the

35
00:01:54,269 --> 00:02:03,359
debugger and probably the other thing

36
00:01:57,599 --> 00:02:07,109
would be don't require an install at all

37
00:02:03,359 --> 00:02:09,449
just make an executable that runs like a

38
00:02:07,109 --> 00:02:14,030
normal program

39
00:02:09,449 --> 00:02:18,600
[Music]

40
00:02:14,030 --> 00:02:23,069
yeah I think that's basically it for

41
00:02:18,599 --> 00:02:28,109
debugging stuff make a way to view

42
00:02:23,069 --> 00:02:33,019
images in the debugger like pointer to

43
00:02:28,110 --> 00:02:38,730
an RGBA and you can specify the width

44
00:02:33,020 --> 00:02:45,770
height make a way to view 3d data like

45
00:02:38,729 --> 00:02:53,209
you can point to a float buffer and view

46
00:02:45,770 --> 00:02:53,210
three floats at a time in 3d window

47
00:02:53,479 --> 00:03:04,560
what else would I like make it

48
00:03:00,949 --> 00:03:09,299
instantaneous to step in the debugger

49
00:03:04,560 --> 00:03:13,080
right now it's very slow update the

50
00:03:09,300 --> 00:03:21,570
watch window instantaneously right now

51
00:03:13,080 --> 00:03:23,780
it lags way behind the step see what

52
00:03:21,569 --> 00:03:27,498
else we got here

53
00:03:23,780 --> 00:03:27,498
[Music]

54
00:03:30,080 --> 00:03:32,140
you

55
00:03:32,848 --> 00:03:41,639
make sure the compiler is just one eggsy

56
00:03:36,189 --> 00:03:44,620
that can be installed by itself with no

57
00:03:41,639 --> 00:03:49,408
dependencies and just called directly

58
00:03:44,620 --> 00:03:54,750
with no VC VARs or or anything like this

59
00:03:49,408 --> 00:03:56,128
for DLL path or nonsense like that

60
00:03:54,750 --> 00:04:03,549
[Music]

61
00:03:56,128 --> 00:04:11,068
output AST to a file via command-line

62
00:04:03,549 --> 00:04:11,069
switch so I can be in a well-documented

63
00:04:11,848 --> 00:04:21,579
format that I can easily load with no

64
00:04:16,410 --> 00:04:25,449
DLL or libraries just a simple single

65
00:04:21,579 --> 00:04:35,199
flat file load and then parse it myself

66
00:04:25,449 --> 00:04:40,680
easily clean up the PDB format so that

67
00:04:35,199 --> 00:04:40,680
it's simple to read and parse and use

68
00:04:50,038 --> 00:05:08,310
etc etc the debugger reads pdbs reliably

69
00:05:04,810 --> 00:05:13,470
and shows the source code and

70
00:05:08,310 --> 00:05:13,470
disassembly reliably which is nice

71
00:05:14,158 --> 00:05:21,029
everything else about visual Studios too

72
00:05:18,490 --> 00:05:21,030
bad these days

73
00:05:23,129 --> 00:05:26,550
[Music]

74
00:06:43,439 --> 00:06:54,519
what source control two's home research

75
00:06:49,149 --> 00:06:58,289
proprietary it house what choice do you

76
00:06:54,519 --> 00:06:58,289
have been using the Skloot tools none

77
00:06:59,129 --> 00:07:02,129
sure

78
00:07:13,480 --> 00:07:22,550
congratulations guys she filled out

79
00:07:15,139 --> 00:07:28,669
survey what do you think all right so

80
00:07:22,550 --> 00:07:30,800
moving on they want to follow up they

81
00:07:28,670 --> 00:07:33,439
can just watch the show they see me uses

82
00:07:30,800 --> 00:07:34,939
a bug relic I'm watch me stepping

83
00:07:33,439 --> 00:07:36,399
through and the watch window still shows

84
00:07:34,939 --> 00:07:39,410
results from like 10 years ago

85
00:07:36,399 --> 00:07:41,509
apparently there's like a watch update

86
00:07:39,410 --> 00:07:45,320
lag parameter that you can actually

87
00:07:41,509 --> 00:07:47,089
change that will speed that up because I

88
00:07:45,319 --> 00:07:49,040
guess it's just so slow that then it

89
00:07:47,089 --> 00:07:52,759
makes stepping slow so what they did is

90
00:07:49,040 --> 00:07:55,700
they decouple the two which is a crazy

91
00:07:52,759 --> 00:07:58,550
it's so nuts you're like wait instead of

92
00:07:55,699 --> 00:08:02,599
fixing the problem you made a new

93
00:07:58,550 --> 00:08:04,730
problem so weird anyway I don't want to

94
00:08:02,600 --> 00:08:07,010
know I don't want to know what goes on

95
00:08:04,730 --> 00:08:09,620
over there I am terrified to know how

96
00:08:07,009 --> 00:08:10,668
the development of this program goes I'm

97
00:08:09,620 --> 00:08:16,069
sure it's a c-sharp

98
00:08:10,668 --> 00:08:17,750
funhaus over there anyway so getting

99
00:08:16,069 --> 00:08:20,360
back to what we were trying to do I was

100
00:08:17,750 --> 00:08:22,279
trying to run the game here I just

101
00:08:20,360 --> 00:08:25,540
wanted to talk about where the lighting

102
00:08:22,279 --> 00:08:28,039
was so based on our current situation

103
00:08:25,540 --> 00:08:29,810
the lighting is actually working quite a

104
00:08:28,040 --> 00:08:31,520
bit better than it was working before

105
00:08:29,810 --> 00:08:33,979
but there's a couple things we want to

106
00:08:31,519 --> 00:08:35,509
do now one is we want to try and push

107
00:08:33,979 --> 00:08:36,889
them forwards a little further than it

108
00:08:35,509 --> 00:08:39,588
is right now because I still think it's

109
00:08:36,889 --> 00:08:41,179
it's too low compared to probably what

110
00:08:39,589 --> 00:08:43,640
we needed to be once we start dumping

111
00:08:41,179 --> 00:08:47,539
more stuff in there now one thing we

112
00:08:43,639 --> 00:08:49,519
could do is we certainly can go ahead

113
00:08:47,539 --> 00:08:51,409
and GPU eyes this potentially if you

114
00:08:49,519 --> 00:08:52,579
want to I don't know how wise that is

115
00:08:51,409 --> 00:08:55,100
but that's something we could certainly

116
00:08:52,580 --> 00:08:56,600
look into but we also have a lot of room

117
00:08:55,100 --> 00:08:59,480
left to improve how we're doing things

118
00:08:56,600 --> 00:09:02,029
currently on the CPU side for

119
00:08:59,480 --> 00:09:03,560
performance so that's one thing the next

120
00:09:02,029 --> 00:09:07,250
thing that we have to think about though

121
00:09:03,559 --> 00:09:09,349
as well is that the getting further rid

122
00:09:07,250 --> 00:09:10,940
of the noise and I think there's some

123
00:09:09,350 --> 00:09:13,220
things that I want to do there one thing

124
00:09:10,940 --> 00:09:16,400
that I was thinking about that I'd like

125
00:09:13,220 --> 00:09:18,500
to check out is we've never really

126
00:09:16,399 --> 00:09:25,039
verified that we converge to a good

127
00:09:18,500 --> 00:09:25,730
solution if we are if we just took a lot

128
00:09:25,039 --> 00:09:29,149
of samples

129
00:09:25,730 --> 00:09:31,399
right so one thing that I think we want

130
00:09:29,149 --> 00:09:33,678
to be able to do is like be able to hit

131
00:09:31,399 --> 00:09:36,759
a key and run like a single lighting

132
00:09:33,678 --> 00:09:40,238
solution that's you know really

133
00:09:36,759 --> 00:09:42,558
extensive that takes a long time and

134
00:09:40,239 --> 00:09:44,869
verify that it actually converges to

135
00:09:42,558 --> 00:09:46,488
something useful or more to the point

136
00:09:44,869 --> 00:09:49,699
maybe make it so that we can just say

137
00:09:46,489 --> 00:09:56,989
look stop updating the lighting solution

138
00:09:49,698 --> 00:09:58,668
from Lix stop assuming that the lighting

139
00:09:56,989 --> 00:10:00,019
solution is changing just let the

140
00:09:58,668 --> 00:10:01,999
lighting solution accumulate over time

141
00:10:00,019 --> 00:10:06,379
and just take the total average or

142
00:10:01,999 --> 00:10:09,350
something right because right now I'll

143
00:10:06,379 --> 00:10:10,879
be honest I'm not a hundred percent

144
00:10:09,350 --> 00:10:12,678
certain that all the flicker we're

145
00:10:10,879 --> 00:10:16,188
seeing is really flicker from sampling

146
00:10:12,678 --> 00:10:17,838
it may be flicker from sampling but it

147
00:10:16,188 --> 00:10:19,219
also may be that we still have bugs in

148
00:10:17,839 --> 00:10:22,999
there that we are not accounting for

149
00:10:19,220 --> 00:10:26,600
properly because I I really just can't

150
00:10:22,999 --> 00:10:28,928
quite tell at the moment if we really

151
00:10:26,600 --> 00:10:31,220
have if it's really correct

152
00:10:28,928 --> 00:10:33,438
how much flicker there is here because

153
00:10:31,220 --> 00:10:36,798
in some places it looks to me a little

154
00:10:33,438 --> 00:10:38,328
like it's maybe more buggy than we might

155
00:10:36,798 --> 00:10:41,538
think

156
00:10:38,328 --> 00:10:43,008
and I'm not sure and as always it's kind

157
00:10:41,538 --> 00:10:45,048
of deceptive because the lighting looks

158
00:10:43,009 --> 00:10:46,818
very consistent right now so when you

159
00:10:45,048 --> 00:10:49,489
look at it it's like yeah it looks like

160
00:10:46,818 --> 00:10:52,068
it's computing the lighting properly

161
00:10:49,489 --> 00:10:54,168
certainly that's true to a certain

162
00:10:52,068 --> 00:10:57,918
extent anyway given the limitations of

163
00:10:54,168 --> 00:11:00,259
the system but on the other hand it's

164
00:10:57,918 --> 00:11:02,958
not immediately clear to me that that

165
00:11:00,259 --> 00:11:05,989
it's all the way right because you know

166
00:11:02,958 --> 00:11:08,048
it's it's hard to look at something like

167
00:11:05,989 --> 00:11:10,668
this and know if you have maybe more

168
00:11:08,048 --> 00:11:12,828
subtle bugs going on in there right then

169
00:11:10,668 --> 00:11:16,038
then what you know about at the moment

170
00:11:12,828 --> 00:11:19,909
so I do think we need a little bit more

171
00:11:16,038 --> 00:11:22,399
I think we need a little bit more

172
00:11:19,909 --> 00:11:24,858
information about our scheme and we need

173
00:11:22,399 --> 00:11:26,359
a little bit better ways to test it than

174
00:11:24,859 --> 00:11:29,480
what we have right now because right now

175
00:11:26,359 --> 00:11:33,109
we just really don't have any way to

176
00:11:29,480 --> 00:11:34,999
know much about subtle bugs that might

177
00:11:33,109 --> 00:11:38,149
be working lurking in the system we can

178
00:11:34,999 --> 00:11:39,500
see gross error like we can see things

179
00:11:38,149 --> 00:11:41,299
that are really egregious Lee

180
00:11:39,500 --> 00:11:44,210
wrong but we just don't have a way of

181
00:11:41,299 --> 00:11:48,649
looking at things that are maybe more

182
00:11:44,210 --> 00:11:50,780
subtly wrong that we that could be like

183
00:11:48,649 --> 00:11:53,179
a source of that noise in addition to

184
00:11:50,779 --> 00:11:54,709
honest sampling error and so rather than

185
00:11:53,179 --> 00:11:57,169
try to fight the sampling error right

186
00:11:54,710 --> 00:11:58,370
off the bat I would like a way of sort

187
00:11:57,169 --> 00:12:00,469
of getting a little further down that

188
00:11:58,370 --> 00:12:03,830
road so those are two things I'd like to

189
00:12:00,470 --> 00:12:06,440
do depending on how much time we have we

190
00:12:03,830 --> 00:12:09,050
can look at both this weekend so if I

191
00:12:06,440 --> 00:12:10,460
take a look inside the lighting code the

192
00:12:09,049 --> 00:12:13,129
question is where do we want to go first

193
00:12:10,460 --> 00:12:14,629
I might go ahead and say let's let's

194
00:12:13,129 --> 00:12:16,490
look at the lighting code a little bit

195
00:12:14,629 --> 00:12:18,500
on the performance side of things today

196
00:12:16,490 --> 00:12:20,930
and see if we can't improve that a

197
00:12:18,500 --> 00:12:23,570
little bit so inside compute light

198
00:12:20,929 --> 00:12:25,639
propagation we have been collecting some

199
00:12:23,570 --> 00:12:27,950
statistics now so for example when we

200
00:12:25,639 --> 00:12:29,539
run this you can see down here we have

201
00:12:27,950 --> 00:12:31,400
some statistics that are being tracked

202
00:12:29,539 --> 00:12:34,750
we know how many castes are being

203
00:12:31,399 --> 00:12:40,370
initiated 120,000 Ray's are being

204
00:12:34,750 --> 00:12:43,789
requested and those are just those are

205
00:12:40,370 --> 00:12:46,789
rays that are just initial that Ray's in

206
00:12:43,789 --> 00:12:49,399
our system don't bounce right we send

207
00:12:46,789 --> 00:12:52,370
light to surfaces and then we bounce it

208
00:12:49,399 --> 00:12:55,610
again on like we keep bouncing it sort

209
00:12:52,370 --> 00:12:58,850
of in a stored State we don't do paths

210
00:12:55,610 --> 00:13:00,710
that go for a long way so that's total

211
00:12:58,850 --> 00:13:10,629
cast one in twenty thousand is the total

212
00:13:00,710 --> 00:13:12,650
number we're casting per frame okay

213
00:13:10,629 --> 00:13:15,289
so then if you look down there and you

214
00:13:12,649 --> 00:13:17,209
look at total leaves tested and total

215
00:13:15,289 --> 00:13:18,649
partitions tested what you can see is

216
00:13:17,210 --> 00:13:26,480
that we're testing a lot more partitions

217
00:13:18,649 --> 00:13:29,029
than leaves right do you think that is

218
00:13:26,480 --> 00:13:32,180
probably not great there's a number of

219
00:13:29,029 --> 00:13:34,699
things that we have to consider when

220
00:13:32,179 --> 00:13:36,409
we're looking at this and one of the

221
00:13:34,700 --> 00:13:40,310
things that we see like we're testing

222
00:13:36,409 --> 00:13:44,088
eighteen partitions per cast and only

223
00:13:40,309 --> 00:13:46,039
five leaves right and so what that kind

224
00:13:44,089 --> 00:13:48,050
of says to me is we're probably wasting

225
00:13:46,039 --> 00:13:50,149
too much time testing partitions because

226
00:13:48,049 --> 00:13:53,029
really partitions are supposed to

227
00:13:50,149 --> 00:13:55,370
eliminate leaves from testing

228
00:13:53,029 --> 00:13:57,589
right and so at some point if your

229
00:13:55,370 --> 00:13:59,389
partition number gets too high then

230
00:13:57,590 --> 00:14:01,009
you're really wasting work because

231
00:13:59,389 --> 00:14:03,259
you're just partition test to tell you

232
00:14:01,009 --> 00:14:05,870
nothing right only thing a partition

233
00:14:03,259 --> 00:14:07,460
test actually ends up doing is telling

234
00:14:05,870 --> 00:14:10,970
you what leaves to test now that's not

235
00:14:07,460 --> 00:14:12,080
entirely true here and I suppose we have

236
00:14:10,970 --> 00:14:13,879
to be a little bit more careful about

237
00:14:12,080 --> 00:14:15,980
how we talk about this I probably need

238
00:14:13,879 --> 00:14:17,179
one more number here which is like and

239
00:14:15,980 --> 00:14:19,820
in fact let's just put it in before we

240
00:14:17,179 --> 00:14:21,859
talk about it since we allow early outs

241
00:14:19,820 --> 00:14:23,270
and we test partitions and use the

242
00:14:21,860 --> 00:14:25,450
lighting from partitions we really need

243
00:14:23,269 --> 00:14:27,769
to consider those to be some other thing

244
00:14:25,450 --> 00:14:31,610
they're not leaves but they're like

245
00:14:27,769 --> 00:14:34,970
partition leaves right something like

246
00:14:31,610 --> 00:14:43,310
that and we need to sort of store this

247
00:14:34,970 --> 00:14:45,290
information so that we know how many

248
00:14:43,309 --> 00:14:47,179
partitions are actually being used as

249
00:14:45,289 --> 00:14:48,589
leaves because that may change our

250
00:14:47,179 --> 00:14:52,959
opinion of what's going on and make it

251
00:14:48,590 --> 00:14:52,960
look more favorable we don't know yet

252
00:15:04,970 --> 00:15:11,090
so this will be essentially like it's

253
00:15:07,940 --> 00:15:13,720
not tested but it's like s used right is

254
00:15:11,090 --> 00:15:13,720
maybe the right thing

255
00:15:16,269 --> 00:15:23,569
so total partition leaves used is the

256
00:15:21,440 --> 00:15:26,410
thing which basically lets us know how

257
00:15:23,570 --> 00:15:29,660
many times that that thing has happened

258
00:15:26,409 --> 00:15:35,299
where is our work we gotta clear those

259
00:15:29,659 --> 00:15:40,159
out of our work table somewhere here not

260
00:15:35,299 --> 00:15:49,250
there it's in compute light propagation

261
00:15:40,159 --> 00:15:51,230
at the top there it is so we're we clear

262
00:15:49,250 --> 00:15:54,440
the whole thing so I guess now we know

263
00:15:51,230 --> 00:15:58,700
so anyway inside here we know this is

264
00:15:54,440 --> 00:16:01,940
our array cast here

265
00:15:58,700 --> 00:16:02,840
and when our ray cast terminates right

266
00:16:01,940 --> 00:16:05,480
we know there's two different

267
00:16:02,840 --> 00:16:08,030
circumstances one is that the close

268
00:16:05,480 --> 00:16:09,889
enough thing will happen or not and so

269
00:16:08,029 --> 00:16:11,689
that's the thing that we have to check

270
00:16:09,889 --> 00:16:14,029
in this case because when we come

271
00:16:11,690 --> 00:16:15,440
through here we're gonna see if this box

272
00:16:14,029 --> 00:16:19,730
has a child count we're gonna count it

273
00:16:15,440 --> 00:16:22,460
as a partition if this box has a has a

274
00:16:19,730 --> 00:16:24,139
leaf doesn't have a child count then

275
00:16:22,460 --> 00:16:26,720
it's gonna be counted as a leaf right

276
00:16:24,139 --> 00:16:28,909
that we're testing but then when we get

277
00:16:26,720 --> 00:16:32,480
down here you know maybe we tested the

278
00:16:28,909 --> 00:16:34,730
partition if we decide in here to push

279
00:16:32,480 --> 00:16:38,740
the box on then it's an honest partition

280
00:16:34,730 --> 00:16:41,810
but if instead we look and see that it's

281
00:16:38,740 --> 00:16:44,690
that it was all true here right that we

282
00:16:41,809 --> 00:16:47,449
that we exited out after just using it

283
00:16:44,690 --> 00:16:49,720
entirely then it's a partition used as

284
00:16:47,450 --> 00:16:49,720
leaves

285
00:16:56,230 --> 00:17:01,808
right so that's then that's this value

286
00:17:04,328 --> 00:17:19,099
so if we take a look at that oh forgot

287
00:17:11,838 --> 00:17:21,168
these have to be padded it's pretty cool

288
00:17:19,099 --> 00:17:25,578
that assertion that just saved us a huge

289
00:17:21,169 --> 00:17:27,380
speed hit so here is the new version

290
00:17:25,578 --> 00:17:30,859
running the same but now we get this

291
00:17:27,380 --> 00:17:32,510
information here oh but I need to

292
00:17:30,859 --> 00:17:36,250
actually output it which I'm not doing

293
00:17:32,509 --> 00:17:36,250
currently hold on one second

294
00:17:56,940 --> 00:18:05,200
so taking a look here at this we've got

295
00:18:01,059 --> 00:18:08,440
a pretty low number actually so we're

296
00:18:05,200 --> 00:18:10,480
not really doing that very much in terms

297
00:18:08,440 --> 00:18:13,930
of early outing we're still going down

298
00:18:10,480 --> 00:18:15,519
further to do the more tests so again

299
00:18:13,930 --> 00:18:18,730
that just strikes me as too many

300
00:18:15,519 --> 00:18:24,369
partition tests so I guess what I would

301
00:18:18,730 --> 00:18:29,549
say here is that you know if we looked

302
00:18:24,369 --> 00:18:32,229
at our split box call just for starters

303
00:18:29,549 --> 00:18:34,299
when we're doing our split box I do

304
00:18:32,230 --> 00:18:37,630
wonder here if maybe we want to split

305
00:18:34,299 --> 00:18:40,269
into say four boxes right do more of a

306
00:18:37,630 --> 00:18:41,770
quad three kind of a thing so or

307
00:18:40,269 --> 00:18:45,579
something like that so you know what we

308
00:18:41,769 --> 00:18:47,139
could do is say okay you know in general

309
00:18:45,579 --> 00:18:49,329
if you take a look at what happens here

310
00:18:47,140 --> 00:18:54,640
I pretty sure there's really no

311
00:18:49,329 --> 00:18:55,720
difference I mean as far as I can see

312
00:18:54,640 --> 00:18:58,900
anyway there's really no difference

313
00:18:55,720 --> 00:19:02,789
between these paths so what we could do

314
00:18:58,900 --> 00:19:05,920
is we could say something like you know

315
00:19:02,789 --> 00:19:09,430
if zero this out

316
00:19:05,920 --> 00:19:12,580
I think this count B just splits along a

317
00:19:09,430 --> 00:19:14,740
plane there right and so what we could

318
00:19:12,579 --> 00:19:17,349
do is say all right if we're gonna split

319
00:19:14,740 --> 00:19:20,950
along a plane maybe we can split along

320
00:19:17,349 --> 00:19:24,959
two planes instead and and count them up

321
00:19:20,950 --> 00:19:24,960
or something like this right

322
00:19:38,369 --> 00:19:58,929
so this for example is the so this is

323
00:19:57,069 --> 00:20:01,480
the the one that's KD tree like right

324
00:19:58,930 --> 00:20:10,150
it's saying that we're gonna take for

325
00:20:01,480 --> 00:20:16,930
any given me grab the mill tongue today

326
00:20:10,150 --> 00:20:18,190
is today day for 33 so this is the one

327
00:20:16,930 --> 00:20:20,110
that's basically saying alright we're

328
00:20:18,190 --> 00:20:21,660
gonna split things in half and then

329
00:20:20,109 --> 00:20:25,959
we're gonna split them in half again

330
00:20:21,660 --> 00:20:30,430
right so we would do this is you know

331
00:20:25,960 --> 00:20:32,769
box a this is box B this is box C splits

332
00:20:30,430 --> 00:20:35,259
these in half what we could do instead

333
00:20:32,769 --> 00:20:38,410
is something like okay pick two planes

334
00:20:35,259 --> 00:20:40,990
and this these are both split plates are

335
00:20:38,410 --> 00:20:43,900
both applied in block box a and then

336
00:20:40,990 --> 00:20:46,180
another one just split in Box B right so

337
00:20:43,900 --> 00:20:48,220
a quadtree or an octree kind of approach

338
00:20:46,180 --> 00:20:52,860
we're basically gonna say let's just go

339
00:20:48,220 --> 00:20:52,860
ahead and split these up more

340
00:20:52,920 --> 00:21:00,880
aggressively and I don't know if that's

341
00:20:56,829 --> 00:21:04,119
that's another way we could do this so

342
00:21:00,880 --> 00:21:06,640
if we go ahead and and pursue that a

343
00:21:04,119 --> 00:21:10,359
little bit further what we could do is

344
00:21:06,640 --> 00:21:13,120
just say look anything that's a certain

345
00:21:10,359 --> 00:21:16,569
number yeah this number here is also

346
00:21:13,119 --> 00:21:18,250
obviously tunable I mean one thing so

347
00:21:16,569 --> 00:21:20,259
before I even do that right

348
00:21:18,250 --> 00:21:21,819
we can also take a look at what happens

349
00:21:20,259 --> 00:21:25,089
if we just say look you can have eight

350
00:21:21,819 --> 00:21:27,279
leaves in a child instead so just to see

351
00:21:25,089 --> 00:21:29,679
what happens if we make a shallow err

352
00:21:27,279 --> 00:21:32,799
hierarchy for example would be another

353
00:21:29,680 --> 00:21:33,970
thing to take a look at right and it

354
00:21:32,799 --> 00:21:37,839
looks like that doesn't really change

355
00:21:33,970 --> 00:21:39,069
the runtime much appreciably but you can

356
00:21:37,839 --> 00:21:41,799
see that it reduced the number of

357
00:21:39,069 --> 00:21:43,269
partitions per cast right and it

358
00:21:41,799 --> 00:21:46,299
increased the total number of leaves

359
00:21:43,269 --> 00:21:47,500
tested so we could also print out and we

360
00:21:46,299 --> 00:21:49,039
could print out some other values there

361
00:21:47,500 --> 00:21:51,319
to help us just understand what's

362
00:21:49,039 --> 00:21:55,639
on more quickly than not so that we

363
00:21:51,319 --> 00:21:59,319
don't have to you know write do the math

364
00:21:55,640 --> 00:22:10,759
in our heads so we can do something like

365
00:21:59,319 --> 00:22:17,899
partitions per leaf and that would just

366
00:22:10,759 --> 00:22:35,829
be total partitions tested over total

367
00:22:17,900 --> 00:22:35,830
Leafs tested syntax error huh I agree

368
00:22:37,309 --> 00:22:41,929
so if I run that now then we can also

369
00:22:39,619 --> 00:22:44,539
see like how many partitions we test per

370
00:22:41,930 --> 00:22:48,470
leaf so that's about one partition per

371
00:22:44,539 --> 00:22:53,409
leaf whereas if we change the source

372
00:22:48,470 --> 00:22:56,360
count to four here that's a three

373
00:22:53,410 --> 00:22:59,390
partitions per leaf you know and you can

374
00:22:56,359 --> 00:23:02,319
see those numbers change it doesn't

375
00:22:59,390 --> 00:23:02,320
really change uh speed much though

376
00:23:08,130 --> 00:23:15,210
yeah I'm also you know what I be it

377
00:23:10,380 --> 00:23:19,160
should - no - if we don't call compute

378
00:23:15,210 --> 00:23:19,160
light propagation what's the speed

379
00:23:24,319 --> 00:23:28,898
I'm not sure why we would get a stack

380
00:23:26,119 --> 00:23:28,898
check fail on that

381
00:23:44,279 --> 00:23:47,089
what

382
00:23:48,950 --> 00:23:58,940
so now we see that we actually have

383
00:23:52,279 --> 00:24:00,980
bigger problems here so I guess we kind

384
00:23:58,940 --> 00:24:02,019
of saw this the other day it guess it's

385
00:24:00,980 --> 00:24:06,470
worse than I thought

386
00:24:02,019 --> 00:24:09,410
so at the moment we are actually in a

387
00:24:06,470 --> 00:24:13,279
situation where our lighting is not the

388
00:24:09,410 --> 00:24:16,220
problem so we can't really profile below

389
00:24:13,279 --> 00:24:19,579
that unless we fix the problem with our

390
00:24:16,220 --> 00:24:24,920
shader right I mean you can see that

391
00:24:19,579 --> 00:24:27,079
very clearly so I guess that is that so

392
00:24:24,920 --> 00:24:34,370
we got to go finish up that stuff first

393
00:24:27,079 --> 00:24:36,559
otherwise this is irrelevant so what

394
00:24:34,369 --> 00:24:42,229
happens what's going what's going on

395
00:24:36,559 --> 00:24:44,750
here so I guess what's interesting about

396
00:24:42,230 --> 00:24:49,490
this is because this is overlapped it

397
00:24:44,750 --> 00:24:53,119
gets over counted so this is this is not

398
00:24:49,490 --> 00:24:55,130
really telling us so yet so this view

399
00:24:53,119 --> 00:24:57,469
actually tells us more what we needed to

400
00:24:55,130 --> 00:24:59,210
know right which is that this stuff

401
00:24:57,470 --> 00:25:02,170
completed way sooner and there's this

402
00:24:59,210 --> 00:25:04,789
huge chunk here that's a problem right

403
00:25:02,170 --> 00:25:06,440
so we do have to speed up the lighting

404
00:25:04,789 --> 00:25:08,089
but we can't speed up the lighting

405
00:25:06,440 --> 00:25:14,990
before we speed up the shading is I

406
00:25:08,089 --> 00:25:15,220
guess what we've learned so yeah good to

407
00:25:14,990 --> 00:25:17,870
know

408
00:25:15,220 --> 00:25:21,799
so if we take the shading out of the

409
00:25:17,869 --> 00:25:24,799
equation right then we can actually see

410
00:25:21,799 --> 00:25:28,960
more accurately what our time is let's

411
00:25:24,799 --> 00:25:28,960
see here no there we go

412
00:25:31,000 --> 00:25:37,910
so you can see how dramatically this bar

413
00:25:34,130 --> 00:25:40,660
kind of grows right and then when we get

414
00:25:37,910 --> 00:25:40,660
to here

415
00:25:42,680 --> 00:25:49,990
I'm guessing that that is now just like

416
00:25:46,309 --> 00:25:49,990
the vsync bar or whatever right

417
00:25:59,460 --> 00:26:22,120
so I'm interested to know let's take a

418
00:26:02,140 --> 00:26:28,630
look we'll take out swap interval it I

419
00:26:22,119 --> 00:26:31,889
wanted we'll take out swap interval and

420
00:26:28,630 --> 00:26:31,890
take a look here

421
00:26:38,420 --> 00:26:46,940
so I'm really not sure what this time

422
00:26:41,450 --> 00:26:49,309
delay is we may need to investigate that

423
00:26:46,940 --> 00:26:51,440
further right I don't know what's taking

424
00:26:49,309 --> 00:26:54,559
the time here because it's not pixel

425
00:26:51,440 --> 00:26:56,720
shading anything at that point and that

426
00:26:54,559 --> 00:27:01,480
bar doesn't seem to be responsive in the

427
00:26:56,720 --> 00:27:01,480
same way that I would expect it to here

428
00:27:04,059 --> 00:27:07,779
so something's weird

429
00:27:33,259 --> 00:27:40,730
so you can see very clearly right that

430
00:27:36,589 --> 00:27:42,678
we're at 19 milliseconds here or so or

431
00:27:40,730 --> 00:27:45,529
20 when I come in here

432
00:27:42,679 --> 00:27:51,679
I've spiked all the way up to 29 almost

433
00:27:45,529 --> 00:27:58,039
30 milliseconds per frame right and if I

434
00:27:51,679 --> 00:28:06,380
look at the threads here that part's

435
00:27:58,039 --> 00:28:08,089
very large right frame display debug

436
00:28:06,380 --> 00:28:16,070
collation is really not that long but

437
00:28:08,089 --> 00:28:18,970
frame display is huge and now if I if I

438
00:28:16,069 --> 00:28:18,970
draw us out

439
00:28:22,539 --> 00:28:26,450
it definitely shrinks but now as much as

440
00:28:25,099 --> 00:28:32,089
you would think now that may be because

441
00:28:26,450 --> 00:28:40,160
the debug system right I'm not 100%

442
00:28:32,089 --> 00:28:42,519
certain about that I think we have a

443
00:28:40,160 --> 00:28:44,630
knock at the door hold on a second

444
00:28:42,519 --> 00:28:47,679
look at this graph and figure out what's

445
00:28:44,630 --> 00:28:47,679
going on and while I'm gone

446
00:28:56,099 --> 00:28:59,709
[Music]

447
00:29:02,769 --> 00:29:06,338
[Music]

448
00:29:18,029 --> 00:29:25,389
all right so there they are fixing the

449
00:29:21,970 --> 00:29:29,890
heater or in theory fixing the office

450
00:29:25,390 --> 00:29:33,130
heater today so they will probably you

451
00:29:29,890 --> 00:29:34,780
will see people come in to that I can't

452
00:29:33,130 --> 00:29:35,170
put point at to that breaker box right

453
00:29:34,779 --> 00:29:38,980
there

454
00:29:35,170 --> 00:29:43,450
and reset it at some point assuming it

455
00:29:38,980 --> 00:29:45,430
works all right so anyway you know I

456
00:29:43,450 --> 00:29:46,660
think that this is a little bit

457
00:29:45,430 --> 00:29:52,299
misleading looking at this thing right

458
00:29:46,660 --> 00:29:53,920
here because these these lighting

459
00:29:52,299 --> 00:29:56,460
threads are accounting for a fixed

460
00:29:53,920 --> 00:29:59,019
amount of time that we know about right

461
00:29:56,460 --> 00:30:01,120
we can see how many cycles that that

462
00:29:59,019 --> 00:30:02,410
sort of the game update is taking total

463
00:30:01,119 --> 00:30:05,679
and the lighting is accounting for most

464
00:30:02,410 --> 00:30:07,090
of it right so we kind of know roughly

465
00:30:05,680 --> 00:30:09,400
what's going on there the thing that we

466
00:30:07,089 --> 00:30:11,169
don't know is exactly what's going on

467
00:30:09,400 --> 00:30:15,519
here now there's a lot of reasons why

468
00:30:11,170 --> 00:30:17,529
this might be relatively long for

469
00:30:15,519 --> 00:30:19,269
example just the the fact that we're

470
00:30:17,529 --> 00:30:21,759
still doing a lot of texture changes

471
00:30:19,269 --> 00:30:23,200
there and so on we don't really know

472
00:30:21,759 --> 00:30:25,180
what's accounting for most of that time

473
00:30:23,200 --> 00:30:26,950
we can profile that using insight

474
00:30:25,180 --> 00:30:30,450
probably a little bit more specifically

475
00:30:26,950 --> 00:30:33,220
and then we would have a better idea but

476
00:30:30,450 --> 00:30:36,009
again it's pretty hard at this point to

477
00:30:33,220 --> 00:30:38,019
get a sense for how much time the

478
00:30:36,009 --> 00:30:39,490
lighting is taking looking at this

479
00:30:38,019 --> 00:30:42,549
number so I think what we're gonna have

480
00:30:39,490 --> 00:30:44,289
to do is get a little bit more specific

481
00:30:42,549 --> 00:30:46,180
about it and be able to print out a

482
00:30:44,289 --> 00:30:49,539
number that's that's more reasonable

483
00:30:46,180 --> 00:30:52,029
that sort of more accurately reflects

484
00:30:49,539 --> 00:30:53,829
the total lighting time and so in order

485
00:30:52,029 --> 00:30:56,649
to do that I think what we want to do is

486
00:30:53,829 --> 00:30:58,750
is just profile this one directly and

487
00:30:56,650 --> 00:31:01,570
then print out the timer directly just

488
00:30:58,750 --> 00:31:03,039
for that one so that we know exactly how

489
00:31:01,569 --> 00:31:06,789
long the lighting is taking in a more

490
00:31:03,039 --> 00:31:08,859
specific way I think that's probably all

491
00:31:06,789 --> 00:31:11,170
we're gonna be able to do for now until

492
00:31:08,859 --> 00:31:14,500
we bounce back over and improve the

493
00:31:11,170 --> 00:31:15,310
overall throughput for all this stuff so

494
00:31:14,500 --> 00:31:17,140
I'm gonna stop looking at that

495
00:31:15,309 --> 00:31:18,579
millisecond number it's just we're down

496
00:31:17,140 --> 00:31:21,820
to the point where that's just not going

497
00:31:18,579 --> 00:31:24,159
to cut it as a way of actually analyzing

498
00:31:21,819 --> 00:31:26,369
this information but what we want to do

499
00:31:24,160 --> 00:31:29,860
now is we want to go ahead and take

500
00:31:26,369 --> 00:31:31,389
take the extra step of putting in some

501
00:31:29,859 --> 00:31:33,759
kind of profiling for this that we can

502
00:31:31,390 --> 00:31:38,350
measure more directly so I'm going to

503
00:31:33,759 --> 00:31:41,710
take a look at how we might want to do

504
00:31:38,349 --> 00:31:44,500
that it's sort of something we may want

505
00:31:41,710 --> 00:31:47,440
in the debug system more properly I'm

506
00:31:44,500 --> 00:31:48,730
guessing I mean I'm not 100% sure where

507
00:31:47,440 --> 00:31:50,740
that should go but if you take a look at

508
00:31:48,730 --> 00:31:53,110
how we're printing it out here we

509
00:31:50,740 --> 00:31:57,400
probably want that to be something

510
00:31:53,109 --> 00:31:59,339
that's going to be usable more than once

511
00:31:57,400 --> 00:32:08,470
[Music]

512
00:31:59,339 --> 00:32:11,079
hard to say yeah so I'm not 100% sure

513
00:32:08,470 --> 00:32:12,519
how we want to do that so you know

514
00:32:11,079 --> 00:32:15,939
normally we've got these timed block

515
00:32:12,519 --> 00:32:18,789
things and so each of those you know in

516
00:32:15,940 --> 00:32:24,309
the debug system it's it's possible that

517
00:32:18,789 --> 00:32:25,869
we could do something like say this here

518
00:32:24,309 --> 00:32:27,879
where we do like the lighting test and

519
00:32:25,869 --> 00:32:29,379
we've got you know time function maybe

520
00:32:27,880 --> 00:32:32,050
we could do something here where we

521
00:32:29,380 --> 00:32:37,390
specifically say that we want a function

522
00:32:32,049 --> 00:32:39,869
to always show up as its timer so

523
00:32:37,390 --> 00:32:46,710
something where we could say like okay

524
00:32:39,869 --> 00:32:49,029
we want a like a HUD timed function and

525
00:32:46,710 --> 00:32:49,840
the HUD time function would literally be

526
00:32:49,029 --> 00:32:52,289
exactly the same

527
00:32:49,839 --> 00:32:56,199
it just it would pass something here

528
00:32:52,289 --> 00:33:02,859
that lets us know you know that it's

529
00:32:56,200 --> 00:33:04,090
special right and that seems pretty good

530
00:33:02,859 --> 00:33:05,889
to me so if you take a look at what

531
00:33:04,089 --> 00:33:07,629
happens here right the debug table

532
00:33:05,890 --> 00:33:11,680
that's the stuff here that's that's

533
00:33:07,630 --> 00:33:18,340
globally applicable we should be able to

534
00:33:11,680 --> 00:33:22,450
tell it when it outputs the HUD to grab

535
00:33:18,339 --> 00:33:26,939
a specific event value out and to show

536
00:33:22,450 --> 00:33:26,940
just that value or that just that timer

537
00:33:28,200 --> 00:33:35,140
and that seems like the best thing that

538
00:33:32,440 --> 00:33:36,519
way in here we could just do HUD time

539
00:33:35,140 --> 00:33:38,080
function and then it would show up there

540
00:33:36,519 --> 00:33:38,750
and we wouldn't have to expand the debug

541
00:33:38,079 --> 00:33:40,970
window too

542
00:33:38,750 --> 00:33:44,839
show it and we'd get a more stable view

543
00:33:40,970 --> 00:33:47,990
of that thing that's what I think we

544
00:33:44,839 --> 00:33:50,419
want to do so let's go ahead and make

545
00:33:47,990 --> 00:33:52,029
that happen as best we can so let's say

546
00:33:50,420 --> 00:33:55,009
we've got a HUD time function here

547
00:33:52,029 --> 00:33:58,759
that's gonna call this time block stuff

548
00:33:55,009 --> 00:34:00,829
right and inside the time block stuff we

549
00:33:58,759 --> 00:34:03,859
probably want to have some way of

550
00:34:00,829 --> 00:34:06,169
setting the debug tables information so

551
00:34:03,859 --> 00:34:14,299
that it knows that this is important so

552
00:34:06,170 --> 00:34:19,849
the global debug table in here right it

553
00:34:14,300 --> 00:34:22,070
just kind of knows some stuff yeah so we

554
00:34:19,849 --> 00:34:23,779
should be able to do is put what we

555
00:34:22,070 --> 00:34:27,289
actually wanted to print out we should

556
00:34:23,780 --> 00:34:30,550
be able to put that in here and I guess

557
00:34:27,289 --> 00:34:41,690
we can just put that by string probably

558
00:34:30,550 --> 00:34:43,730
so we could put like that maybe I don't

559
00:34:41,690 --> 00:34:45,829
know but that that seems reasonable to

560
00:34:43,730 --> 00:34:48,860
me so you know maybe we go in here and

561
00:34:45,829 --> 00:34:52,759
we just say ok so a time block is really

562
00:34:48,860 --> 00:34:57,710
just where we say global debug table HUD

563
00:34:52,760 --> 00:35:00,140
function equals function and you know

564
00:34:57,710 --> 00:35:01,699
the debug name I guess we could even do

565
00:35:00,139 --> 00:35:05,589
see bug name of the function I don't

566
00:35:01,699 --> 00:35:05,589
remember if we need that I think we do

567
00:35:06,969 --> 00:35:14,929
because this is what it'll be recorded

568
00:35:09,500 --> 00:35:16,610
as in the system I think so I think we

569
00:35:14,929 --> 00:35:18,829
probably just want to set it to the

570
00:35:16,610 --> 00:35:20,539
whole thing so we want to say like okay

571
00:35:18,829 --> 00:35:26,619
you know the debug name the problem is

572
00:35:20,539 --> 00:35:30,889
the counter value will I think I think

573
00:35:26,619 --> 00:35:34,250
increment twice here so what we may have

574
00:35:30,889 --> 00:35:43,759
to do is do something like this where we

575
00:35:34,250 --> 00:35:50,500
say like okay HUD time function dot dot

576
00:35:43,760 --> 00:35:50,500
dot is going to call this

577
00:35:53,958 --> 00:36:05,389
so that I can put out the name twice you

578
00:36:01,940 --> 00:36:09,229
know I'm saying no I don't know why we

579
00:36:05,389 --> 00:36:12,759
pass the name and the debug name I guess

580
00:36:09,228 --> 00:36:15,889
those are just for friendly printouts

581
00:36:12,759 --> 00:36:17,329
probably but I'm not sure so don't quote

582
00:36:15,889 --> 00:36:19,568
me on that I don't remember when we

583
00:36:17,329 --> 00:36:22,670
wrote the system why we had to do that

584
00:36:19,568 --> 00:36:25,548
but yeah we'll just assume that that's

585
00:36:22,670 --> 00:36:28,548
the case so in here we've got the HUD

586
00:36:25,548 --> 00:36:30,889
time function and we're gonna go ahead

587
00:36:28,548 --> 00:36:33,259
and delete this part from it and we'll

588
00:36:30,889 --> 00:36:36,949
just call this separately with the debug

589
00:36:33,259 --> 00:36:38,478
name so that can get used twice and it

590
00:36:36,949 --> 00:36:42,558
doesn't need anything else other than

591
00:36:38,478 --> 00:36:45,288
the VAR ours I think you need to paste

592
00:36:42,559 --> 00:36:47,539
on there right so in theory that should

593
00:36:45,289 --> 00:36:50,420
just work and should create one of these

594
00:36:47,539 --> 00:36:51,920
things and I as long as we fix the

595
00:36:50,420 --> 00:36:53,959
compiler errors here which I don't know

596
00:36:51,920 --> 00:36:56,028
if there are any there aren't that

597
00:36:53,958 --> 00:36:57,440
should still just do what it was

598
00:36:56,028 --> 00:36:58,880
currently doing like it shouldn't do

599
00:36:57,440 --> 00:37:00,548
anything different the only difference

600
00:36:58,880 --> 00:37:02,930
is now it's setting that global variable

601
00:37:00,548 --> 00:37:05,059
so that we know which one of those we

602
00:37:02,929 --> 00:37:06,828
were inspecting so compute light

603
00:37:05,059 --> 00:37:08,420
propagation well it wasn't that when

604
00:37:06,829 --> 00:37:13,009
it's lighting tests actually somewhere

605
00:37:08,420 --> 00:37:15,259
in here right lighting test so lighting

606
00:37:13,009 --> 00:37:19,699
test is still getting counted just like

607
00:37:15,259 --> 00:37:26,208
it normally would be and we can go from

608
00:37:19,699 --> 00:37:29,989
there so now if I go down to the debug

609
00:37:26,208 --> 00:37:31,669
system proper in theory where it prints

610
00:37:29,989 --> 00:37:35,179
out that HUD which is probably in the UI

611
00:37:31,670 --> 00:37:42,039
I'm guessing see where does that get

612
00:37:35,179 --> 00:37:55,179
printed actually those blocks

613
00:37:42,039 --> 00:37:57,840
oops so here's where we print this the

614
00:37:55,179 --> 00:38:00,519
HUD line out there

615
00:37:57,840 --> 00:38:01,900
so you know what I want to do is I want

616
00:38:00,519 --> 00:38:03,969
to be able to add something to this that

617
00:38:01,900 --> 00:38:07,300
just shows us that HUD function if we're

618
00:38:03,969 --> 00:38:09,039
looking at the HUD function so you know

619
00:38:07,300 --> 00:38:10,750
if there is one we'll just like stick it

620
00:38:09,039 --> 00:38:12,250
one line lower you know or something

621
00:38:10,750 --> 00:38:14,199
like that where we can just print out

622
00:38:12,250 --> 00:38:16,960
what the information is now I like how

623
00:38:14,199 --> 00:38:19,210
input Mouse and house wired thing passed

624
00:38:16,960 --> 00:38:21,519
here for some reason even though they're

625
00:38:19,210 --> 00:38:24,130
not getting used which is pretty great

626
00:38:21,519 --> 00:38:26,980
in fact I don't even know what what this

627
00:38:24,130 --> 00:38:30,220
versus that is none of these are getting

628
00:38:26,980 --> 00:38:35,699
used right we've got one two three four

629
00:38:30,219 --> 00:38:37,689
five six one two three four five six so

630
00:38:35,699 --> 00:38:38,669
probably used to print them but we don't

631
00:38:37,690 --> 00:38:43,179
print them anymore

632
00:38:38,670 --> 00:38:44,950
so if we take a look at at what this is

633
00:38:43,179 --> 00:38:46,449
doing the question here is like how do

634
00:38:44,949 --> 00:38:50,519
we get access to that particular

635
00:38:46,449 --> 00:38:53,619
function that we've now got the name of

636
00:38:50,519 --> 00:38:55,829
and so we've got to go double check like

637
00:38:53,619 --> 00:38:58,809
how that stuff gets handled and I think

638
00:38:55,829 --> 00:39:01,690
if I remember correctly right we we

639
00:38:58,809 --> 00:39:04,360
basically have like ways of looking at

640
00:39:01,690 --> 00:39:07,829
the events in here by their name I

641
00:39:04,360 --> 00:39:09,760
believe that's how we do it right

642
00:39:07,829 --> 00:39:12,909
because that's how we were like

643
00:39:09,760 --> 00:39:17,410
collating blocks with each other and so

644
00:39:12,909 --> 00:39:21,239
on so here's like some of that stuff

645
00:39:17,409 --> 00:39:21,239
let's see here

646
00:39:32,230 --> 00:39:40,329
element top clocks list about there's a

647
00:39:37,789 --> 00:39:40,329
lot of stuff in here

648
00:39:40,449 --> 00:39:52,730
profile bars debug ID debugging

649
00:39:48,710 --> 00:39:55,568
interaction Wow you know this is there's

650
00:39:52,730 --> 00:39:55,568
a lot of stuff in here

651
00:39:55,599 --> 00:40:07,519
so I think this is probably what we

652
00:39:59,088 --> 00:40:09,469
would need is to to it like that that

653
00:40:07,518 --> 00:40:13,278
debug name is going to be the gooood

654
00:40:09,469 --> 00:40:14,719
that we've got there and so once we have

655
00:40:13,278 --> 00:40:16,818
well I guess this gives it to us

656
00:40:14,719 --> 00:40:19,399
directly once we have that I think we

657
00:40:16,818 --> 00:40:26,449
should be able to get the element from

658
00:40:19,400 --> 00:40:31,700
it right and presumably that would be

659
00:40:26,449 --> 00:40:36,199
all we should need I think we don't need

660
00:40:31,699 --> 00:40:39,048
to parse the names because that will be

661
00:40:36,199 --> 00:40:41,239
done for us so I think this is all we

662
00:40:39,048 --> 00:40:42,798
really need and that would give us a

663
00:40:41,239 --> 00:40:49,338
debug element now the question is does

664
00:40:42,798 --> 00:40:51,788
the debug element get us enough let's

665
00:40:49,338 --> 00:40:51,788
find out

666
00:41:00,389 --> 00:41:04,079
let's find out

667
00:41:20,389 --> 00:41:32,058
so this does give us the number of

668
00:41:22,449 --> 00:41:36,469
frames and all the events that were

669
00:41:32,059 --> 00:41:46,400
stored but it doesn't necessarily give

670
00:41:36,469 --> 00:41:59,808
us anything more profound node yeah we

671
00:41:46,400 --> 00:42:01,910
kind of want we want this stuff so you

672
00:41:59,809 --> 00:42:04,599
can see here where we do our profile

673
00:42:01,909 --> 00:42:04,598
bars right

674
00:42:13,699 --> 00:42:20,279
in here this debug profile node is

675
00:42:18,300 --> 00:42:22,769
something that we store inside the

676
00:42:20,280 --> 00:42:27,720
stored event right so we have that

677
00:42:22,769 --> 00:42:30,539
information for the stored event but

678
00:42:27,719 --> 00:42:33,868
there's one of those for every frame so

679
00:42:30,539 --> 00:42:35,940
I guess in theory if we just query the

680
00:42:33,869 --> 00:42:40,440
debug element that will give us all the

681
00:42:35,940 --> 00:42:43,409
frames we can then do what we wish with

682
00:42:40,440 --> 00:42:45,599
that information we can either knock out

683
00:42:43,409 --> 00:42:47,699
the like just get one of the frames and

684
00:42:45,599 --> 00:42:49,530
print it or we could look at like the

685
00:42:47,699 --> 00:42:59,879
running average or the min max or

686
00:42:49,530 --> 00:43:02,490
whatever right so I guess that's what

687
00:42:59,880 --> 00:43:08,130
I'm gonna try so if we take a look at

688
00:43:02,489 --> 00:43:13,199
where that was happening did I actually

689
00:43:08,130 --> 00:43:16,050
make a change it says I did yes okay so

690
00:43:13,199 --> 00:43:18,269
in here after we do all of the updating

691
00:43:16,050 --> 00:43:20,579
in debug and we're ready to print stuff

692
00:43:18,269 --> 00:43:22,019
out so I should be able to do a format

693
00:43:20,579 --> 00:43:24,180
strength here and I should be able to do

694
00:43:22,019 --> 00:43:27,659
this you know based on whether or not we

695
00:43:24,179 --> 00:43:31,828
have something in that slot so you know

696
00:43:27,659 --> 00:43:33,960
what I can do is say whatever is in the

697
00:43:31,829 --> 00:43:36,869
global table and I don't know if we've

698
00:43:33,960 --> 00:43:39,269
referenced the global table out to a non

699
00:43:36,869 --> 00:43:41,880
global table here it looks like not so

700
00:43:39,269 --> 00:43:43,829
we'll just take the global table so if

701
00:43:41,880 --> 00:43:46,559
we take the global table and we look at

702
00:43:43,829 --> 00:43:49,680
the HUD function what we can do is do

703
00:43:46,559 --> 00:43:53,519
get debug element that by ID like that

704
00:43:49,679 --> 00:43:54,838
element from grid right and I think we

705
00:43:53,519 --> 00:44:00,929
can get it out of here

706
00:43:54,838 --> 00:44:02,880
so debug elements HUD element or if your

707
00:44:00,929 --> 00:44:05,068
HUD function we can get the debug

708
00:44:02,880 --> 00:44:07,380
element this way I think we have to pass

709
00:44:05,068 --> 00:44:08,880
the debug State for that probably and

710
00:44:07,380 --> 00:44:12,210
then if we have one of those we can

711
00:44:08,880 --> 00:44:15,269
print it out right and so let me just do

712
00:44:12,210 --> 00:44:19,050
that at the moment how do we print out

713
00:44:15,269 --> 00:44:25,800
strings here probably this way

714
00:44:19,050 --> 00:44:33,360
and I think that's probably all I'll do

715
00:44:25,800 --> 00:44:38,150
for the moment I'm going to take a look

716
00:44:33,360 --> 00:44:38,150
at the route info route info size thing

717
00:44:40,130 --> 00:44:46,140
so I feel like for the route info route

718
00:44:43,619 --> 00:44:50,339
info size thing so we have this tooltip

719
00:44:46,139 --> 00:44:55,769
thing I feel like we basically want that

720
00:44:50,340 --> 00:44:58,289
right for the most part so the draw

721
00:44:55,769 --> 00:45:00,360
tooltips thing I feel like we want to

722
00:44:58,289 --> 00:45:10,909
just expand that to be a thing that we

723
00:45:00,360 --> 00:45:13,140
can use for everything so something like

724
00:45:10,909 --> 00:45:14,909
something like a debug line buffer or

725
00:45:13,139 --> 00:45:16,829
something like this right so that when

726
00:45:14,909 --> 00:45:20,069
we look at the tooltips here we just

727
00:45:16,829 --> 00:45:23,039
have instead of it being about tooltips

728
00:45:20,070 --> 00:45:25,769
we just have like a line count in a line

729
00:45:23,039 --> 00:45:30,900
text something like that so that we just

730
00:45:25,769 --> 00:45:39,480
can make these as much as we want so we

731
00:45:30,900 --> 00:45:47,869
have tooltips and hood and I feel like

732
00:45:39,480 --> 00:45:47,869
that is probably the right thing to do I

733
00:45:48,949 --> 00:45:56,609
don't know it seems like the most useful

734
00:45:51,260 --> 00:45:58,590
so if we have those two then instead of

735
00:45:56,610 --> 00:46:02,010
the route info we would just print into

736
00:45:58,590 --> 00:46:04,559
one of these and so if we take a look at

737
00:46:02,010 --> 00:46:05,880
where the tooltip stuff is which the

738
00:46:04,559 --> 00:46:07,349
compiler will actually tell me because

739
00:46:05,880 --> 00:46:10,140
it's going to not be able to find what

740
00:46:07,349 --> 00:46:12,239
it used to be doing so this stuff right

741
00:46:10,139 --> 00:46:16,529
here we have add tooltips and draw

742
00:46:12,239 --> 00:46:19,399
tooltips we would really have instead

743
00:46:16,530 --> 00:46:19,400
something like

744
00:46:22,420 --> 00:46:28,070
and here these would be based on the

745
00:46:25,550 --> 00:46:30,500
line buffer so instead of passing debug

746
00:46:28,070 --> 00:46:33,559
state by itself and not saying which

747
00:46:30,500 --> 00:46:35,630
line buffer to actually use we would say

748
00:46:33,559 --> 00:46:40,039
give up line buffer buffer right and

749
00:46:35,630 --> 00:46:42,410
then when you do that it would know

750
00:46:40,039 --> 00:46:44,719
which one you wanted to use so it goes

751
00:46:42,409 --> 00:46:47,629
ahead and does exactly all this stuff

752
00:46:44,719 --> 00:46:49,659
here but now with the new format so

753
00:46:47,630 --> 00:46:53,690
instead of tooltip text its line text

754
00:46:49,659 --> 00:46:56,179
right and then it says okay debug state

755
00:46:53,690 --> 00:47:01,990
tooltip count again that's buffer line

756
00:46:56,179 --> 00:47:04,879
count and this is buffer line text right

757
00:47:01,989 --> 00:47:07,519
then in here where we actually do this

758
00:47:04,880 --> 00:47:08,690
result stuff can is ignore ball at the

759
00:47:07,519 --> 00:47:10,719
moment because it's still gonna work a

760
00:47:08,690 --> 00:47:12,920
sack the same way plain text again and

761
00:47:10,719 --> 00:47:14,599
again all I'm doing is just trying to

762
00:47:12,920 --> 00:47:16,010
reuse this code so we don't have two of

763
00:47:14,599 --> 00:47:18,079
these sitting around at buffer up some

764
00:47:16,010 --> 00:47:23,840
number of lines cuz that's just wasteful

765
00:47:18,079 --> 00:47:27,409
and yeah no point to it so once we've

766
00:47:23,840 --> 00:47:29,900
got that then the same thing would be

767
00:47:27,409 --> 00:47:31,159
true for draw tooltips the only

768
00:47:29,900 --> 00:47:33,440
difference is here when we call draw

769
00:47:31,159 --> 00:47:35,690
tooltips now instead you can see we're

770
00:47:33,440 --> 00:47:38,179
doing a like a particular layout here

771
00:47:35,690 --> 00:47:39,800
and then the layout gets things put into

772
00:47:38,179 --> 00:47:42,049
it what we can do is just pass in

773
00:47:39,800 --> 00:47:44,000
different layout so that way we can pass

774
00:47:42,050 --> 00:47:45,680
a different layout and print the route

775
00:47:44,000 --> 00:47:47,780
tooltips into the route one in the mouse

776
00:47:45,679 --> 00:47:51,079
went into the mouse one and everything

777
00:47:47,780 --> 00:47:53,810
will be fine right so here we've got our

778
00:47:51,079 --> 00:47:56,659
draw tooltips we need to be able to pass

779
00:47:53,809 --> 00:48:00,170
the line buffer we probably need the

780
00:47:56,659 --> 00:48:01,279
debug state as well though because we're

781
00:48:00,170 --> 00:48:07,909
gonna need like the render group and

782
00:48:01,280 --> 00:48:09,500
things like that yeah yeah because we

783
00:48:07,909 --> 00:48:12,139
need all like the font metrics and all

784
00:48:09,500 --> 00:48:13,429
that stuff right so what we're gonna do

785
00:48:12,139 --> 00:48:15,049
here is anywhere that we were looking

786
00:48:13,429 --> 00:48:16,699
for the tooltips before we're gonna

787
00:48:15,050 --> 00:48:20,000
instead look for the buffer or line

788
00:48:16,699 --> 00:48:23,089
count and then here we're going to use

789
00:48:20,000 --> 00:48:25,219
the buffer line text like so and these

790
00:48:23,090 --> 00:48:30,039
are going to be like draw line buffer

791
00:48:25,219 --> 00:48:35,099
and line

792
00:48:30,039 --> 00:48:38,440
something like that yeah

793
00:48:35,099 --> 00:48:43,179
so let's keep going here at tool tip

794
00:48:38,440 --> 00:48:50,230
it's gonna be add line debug state tool

795
00:48:43,179 --> 00:49:04,199
tips oops and anywhere we see that it's

796
00:48:50,230 --> 00:49:11,608
just going to be add lime chips just see

797
00:49:04,199 --> 00:49:11,608
tooltips so that seems all pretty good

798
00:49:17,519 --> 00:49:23,670
and now we've got let's see this stuff

799
00:49:21,940 --> 00:49:26,739
doesn't matter

800
00:49:23,670 --> 00:49:26,739
[Music]

801
00:49:37,360 --> 00:49:55,130
name so this is actually the root group

802
00:49:48,559 --> 00:50:01,759
of the of the debug system that you can

803
00:49:55,130 --> 00:50:09,700
like pop down right which I guess we

804
00:50:01,760 --> 00:50:09,700
want to keep although not really

805
00:50:19,099 --> 00:50:22,980
I'm not sure how we want to do that

806
00:50:21,210 --> 00:50:24,420
because the names can't have space in

807
00:50:22,980 --> 00:50:26,190
them and we want potentially multiple

808
00:50:24,420 --> 00:50:29,610
wines to be printed up there at the top

809
00:50:26,190 --> 00:50:33,420
I mean I could create another group for

810
00:50:29,610 --> 00:50:40,950
it I suppose and not do it this way but

811
00:50:33,420 --> 00:50:43,500
I don't love that right meaning this

812
00:50:40,949 --> 00:50:44,849
this thing is one of those little UI

813
00:50:43,500 --> 00:50:46,409
elements that you can kind of put on the

814
00:50:44,849 --> 00:50:50,099
screen and we could just put another one

815
00:50:46,409 --> 00:50:51,809
up there like if we see a HUD function

816
00:50:50,099 --> 00:51:04,259
then we could have another one up there

817
00:50:51,809 --> 00:51:06,860
I suppose that's not awful telling how I

818
00:51:04,260 --> 00:51:06,860
feel about that

819
00:51:14,309 --> 00:51:34,049
I don't know how I feel about that I

820
00:51:19,969 --> 00:51:45,750
want to keep these changes though there

821
00:51:34,050 --> 00:51:47,880
we go and so this should still work

822
00:51:45,750 --> 00:51:55,860
exactly the way it was before I'm just

823
00:51:47,880 --> 00:51:57,809
gonna nerf this meeting our tooltips now

824
00:51:55,860 --> 00:52:01,320
just go through that so we can do more

825
00:51:57,809 --> 00:52:04,529
of those if we want to but I guess so

826
00:52:01,320 --> 00:52:06,450
the way we could do this right is if you

827
00:52:04,530 --> 00:52:09,269
look at what's happening with that root

828
00:52:06,449 --> 00:52:11,939
node that we could just put another node

829
00:52:09,269 --> 00:52:18,509
up there that actually is a its own UI

830
00:52:11,940 --> 00:52:21,000
element and yeah I just don't know if I

831
00:52:18,510 --> 00:52:22,860
just I'm not sure how I feel about it

832
00:52:21,000 --> 00:52:27,000
like maybe that's good maybe that's not

833
00:52:22,860 --> 00:52:29,070
good it's really hard to say but if you

834
00:52:27,000 --> 00:52:32,280
take a look at what's going on here in

835
00:52:29,070 --> 00:52:34,550
you know I don't even remember how this

836
00:52:32,280 --> 00:52:34,550
works

837
00:52:40,429 --> 00:52:47,489
because I thought you could like pull

838
00:52:42,539 --> 00:52:55,259
these things off or something I don't

839
00:52:47,489 --> 00:52:57,000
really remember how that stuff worked it

840
00:52:55,260 --> 00:52:59,760
doesn't seem to look we used to have

841
00:52:57,000 --> 00:53:03,510
something in there clone things I don't

842
00:52:59,760 --> 00:53:06,180
even remember anyway so when we put on

843
00:53:03,510 --> 00:53:08,250
this route group thing here that's just

844
00:53:06,179 --> 00:53:11,250
printing a different name into that

845
00:53:08,250 --> 00:53:14,429
buffer that you know was already set up

846
00:53:11,250 --> 00:53:19,769
specifically for that so what we can do

847
00:53:14,429 --> 00:53:23,849
here is just I guess take the the route

848
00:53:19,769 --> 00:53:25,380
group that was placed there because you

849
00:53:23,849 --> 00:53:27,779
can see here we can just add another

850
00:53:25,380 --> 00:53:29,910
tree to the system that just works so

851
00:53:27,780 --> 00:53:32,660
you know in theory if we wanted to we

852
00:53:29,909 --> 00:53:34,759
could just say like okay yeah you know

853
00:53:32,659 --> 00:53:44,489
[Music]

854
00:53:34,760 --> 00:53:46,500
something like this or we just say all

855
00:53:44,489 --> 00:53:49,919
right there's another one here called

856
00:53:46,500 --> 00:53:54,599
functions that we use and I guess this

857
00:53:49,920 --> 00:53:59,250
thing takes the count 1 2 3 4 5 6 7 9

858
00:53:54,599 --> 00:54:01,559
don't ask me why so we can if we want to

859
00:53:59,250 --> 00:54:04,619
just say like okay we're gonna have one

860
00:54:01,559 --> 00:54:07,529
of these things I don't know why there's

861
00:54:04,619 --> 00:54:10,349
the route group name and the route info

862
00:54:07,530 --> 00:54:12,260
I guess like I don't know why we chose

863
00:54:10,349 --> 00:54:15,839
to keep those in two different places

864
00:54:12,260 --> 00:54:19,760
for some reason it doesn't make a whole

865
00:54:15,840 --> 00:54:19,760
lot of sense but

866
00:54:21,838 --> 00:55:02,788
we can't make another one of those for

867
00:54:23,548 --> 00:55:04,858
you want to so the route group so I

868
00:55:02,789 --> 00:55:06,209
guess that's roughly it right and that

869
00:55:04,858 --> 00:55:09,208
would create a new one that we could

870
00:55:06,208 --> 00:55:10,798
then add to whatever we want if that

871
00:55:09,208 --> 00:55:14,368
makes sense so we can add another tree

872
00:55:10,798 --> 00:55:16,199
here if we wanted to for example it

873
00:55:14,369 --> 00:55:18,298
could be down at the bottom of the

874
00:55:16,199 --> 00:55:22,979
screen instead or whatever we wanted to

875
00:55:18,298 --> 00:55:29,759
do or on the other end right so we could

876
00:55:22,978 --> 00:55:34,278
put that one at like right in the middle

877
00:55:29,759 --> 00:55:39,019
let's say you don't really need the and

878
00:55:34,278 --> 00:55:41,998
I think that would effectively add it to

879
00:55:39,018 --> 00:55:44,338
the top as a separate drop-down kind of

880
00:55:41,998 --> 00:55:47,238
a box which I guess is just more the way

881
00:55:44,338 --> 00:55:50,099
we were doing things in the debug system

882
00:55:47,239 --> 00:55:51,298
so that's fine with me so it's been a

883
00:55:50,099 --> 00:55:52,890
long time to be doing anything here so I

884
00:55:51,298 --> 00:55:54,509
don't really remember how we like to do

885
00:55:52,889 --> 00:55:58,858
things in here or what the design was

886
00:55:54,509 --> 00:56:01,469
but inside here when we print this out

887
00:55:58,858 --> 00:56:04,558
if we print this out to the function in

888
00:56:01,469 --> 00:56:13,369
fair-sized function that's right

889
00:56:04,559 --> 00:56:13,369
debug state function info then in theory

890
00:56:14,929 --> 00:56:40,849
should be okay I would think so make

891
00:56:38,309 --> 00:56:40,849
sure that's correct

892
00:56:45,250 --> 00:57:01,909
we set up this group correctly and we

893
00:56:56,960 --> 00:57:04,760
added it but of course there's nothing

894
00:57:01,909 --> 00:57:07,399
in it which I don't know to what extent

895
00:57:04,760 --> 00:57:14,540
that makes the problem let me just

896
00:57:07,400 --> 00:57:26,389
double check so when we try to add this

897
00:57:14,539 --> 00:57:30,550
tree it's does not like it however I'm

898
00:57:26,389 --> 00:57:30,549
not sure why cuz it should be okay

899
00:57:38,039 --> 00:57:41,529
since there's nothing particularly weird

900
00:57:39,940 --> 00:57:43,539
going on there I should compile in debug

901
00:57:41,530 --> 00:57:46,140
mode as well so we can step in

902
00:57:43,539 --> 00:57:46,139
double-check

903
00:58:01,268 --> 00:58:13,928
so the problem here is that element is

904
00:58:06,289 --> 00:58:16,369
no so when we go here to draw these

905
00:58:13,929 --> 00:58:20,088
right you can see we're calling draw

906
00:58:16,369 --> 00:58:22,338
trees when we're in draw trees we're

907
00:58:20,088 --> 00:58:26,028
going through the trees and we get to

908
00:58:22,338 --> 00:58:32,588
the one that we just placed right so it

909
00:58:26,028 --> 00:58:36,338
goes into its group and it's got two

910
00:58:32,588 --> 00:58:36,338
children here it looks like

911
00:58:44,588 --> 00:58:50,548
so you can see that we did print out the

912
00:58:46,659 --> 00:58:50,548
name properly right so there's the name

913
00:58:57,478 --> 00:59:05,608
it's listed as having an actual group

914
00:59:06,719 --> 00:59:10,259
let's step in here

915
00:59:15,030 --> 00:59:22,329
so here's our first tree and this is the

916
00:59:20,199 --> 00:59:24,539
regular tree the one we've had for a

917
00:59:22,329 --> 00:59:24,539
while

918
00:59:33,099 --> 00:59:37,929
and so I'm not sure how we got to there

919
00:59:36,010 --> 00:59:45,310
from here because we should have had to

920
00:59:37,929 --> 00:59:47,589
loop through this again so draw tree

921
00:59:45,309 --> 00:59:50,549
link is doing that from here that's

922
00:59:47,590 --> 00:59:50,550
making sense does it

923
01:00:01,190 --> 01:00:05,130
because you can see oh that's the next I

924
01:00:03,780 --> 01:00:06,960
was looking at so this actually is the

925
01:00:05,130 --> 01:00:10,740
initial and sorry I was looking at the

926
01:00:06,960 --> 01:00:12,630
next one alright so then it goes to do

927
01:00:10,739 --> 01:00:20,519
the draw tree link what so what's our

928
01:00:12,630 --> 01:00:22,380
layout look like here so this is this is

929
01:00:20,519 --> 01:00:24,300
the actual new one right there's the

930
01:00:22,380 --> 01:00:26,190
zero so the other one is at negative

931
01:00:24,300 --> 01:00:30,630
right it's in the corner this one's in

932
01:00:26,190 --> 01:00:33,420
the middle so looking at the next in

933
01:00:30,630 --> 01:00:37,110
previous the next one that's our old one

934
01:00:33,420 --> 01:00:40,409
that we used to have it's normal it's

935
01:00:37,110 --> 01:00:44,490
looking at our group our group does have

936
01:00:40,409 --> 01:00:47,369
a child listed in it which doesn't make

937
01:00:44,489 --> 01:00:51,899
any sense because I have no idea I guess

938
01:00:47,369 --> 01:00:55,409
it must be us or oh so it's just a it's

939
01:00:51,900 --> 01:00:56,940
just a circularly linked list is long so

940
01:00:55,409 --> 01:00:59,460
it doesn't have any children in it and

941
01:00:56,940 --> 01:01:02,369
it just has this one name and it's got

942
01:00:59,460 --> 01:01:03,329
no element so I'm wondering but it

943
01:01:02,369 --> 01:01:05,489
shouldn't have an element there's

944
01:01:03,329 --> 01:01:07,710
nothing there so what did we do for this

945
01:01:05,489 --> 01:01:10,439
other tree right what does it do for an

946
01:01:07,710 --> 01:01:12,360
element because it's got an element of

947
01:01:10,440 --> 01:01:15,300
null as well but it doesn't seem to have

948
01:01:12,360 --> 01:01:17,700
any problem with that right so I'm not

949
01:01:15,300 --> 01:01:18,870
sure what it's doing that makes that'd

950
01:01:17,699 --> 01:01:25,829
be fine

951
01:01:18,869 --> 01:01:29,759
I guess it's if you don't have children

952
01:01:25,829 --> 01:01:32,090
or something right so let's take a look

953
01:01:29,760 --> 01:01:32,090
at that

954
01:01:46,019 --> 01:02:00,030
so it says it does not have children so

955
01:01:49,349 --> 01:02:04,559
it should skip that which it correctly

956
01:02:00,030 --> 01:02:07,080
did and of course the link element is no

957
01:02:04,559 --> 01:02:09,119
so I guess the reason it was working the

958
01:02:07,079 --> 01:02:12,569
I guess the problem is that if you have

959
01:02:09,119 --> 01:02:18,510
no element and no children we just never

960
01:02:12,570 --> 01:02:19,619
handled that case I guess which doesn't

961
01:02:18,510 --> 01:02:23,910
really make much sense cuz you would

962
01:02:19,619 --> 01:02:26,640
think that would have to happen I guess

963
01:02:23,909 --> 01:02:28,440
it never did it's a bit strange don't

964
01:02:26,639 --> 01:02:30,210
you think I mean it seems like that

965
01:02:28,440 --> 01:02:43,409
should be there but maybe I'm wrong

966
01:02:30,210 --> 01:02:48,389
about that so in here right this this

967
01:02:43,409 --> 01:02:50,129
part I'm not sure what we want to do I

968
01:02:48,389 --> 01:02:53,699
mean maybe the smarter way to do it is

969
01:02:50,130 --> 01:03:00,210
just in debug draw element right where

970
01:02:53,699 --> 01:03:01,919
we would be using element like all this

971
01:03:00,210 --> 01:03:07,740
stuff right to figure out what element

972
01:03:01,920 --> 01:03:13,769
it is you know you want it to just do a

973
01:03:07,739 --> 01:03:15,089
generic default print out here right I

974
01:03:13,769 --> 01:03:15,630
mean that's all we really wanted it to

975
01:03:15,090 --> 01:03:18,630
do

976
01:03:15,630 --> 01:03:22,108
so in some sense right we kind of have

977
01:03:18,630 --> 01:03:29,579
and I guess one one way to look at it

978
01:03:22,108 --> 01:03:31,259
would be in here linked out elements

979
01:03:29,579 --> 01:03:33,779
only used if we get past the has

980
01:03:31,260 --> 01:03:36,119
children thing so it might be more

981
01:03:33,780 --> 01:03:38,130
correct to say like hey look the has

982
01:03:36,119 --> 01:03:39,539
children thing is going to be something

983
01:03:38,130 --> 01:03:41,430
that we assume if you don't have an

984
01:03:39,539 --> 01:03:43,108
element you must be a child thing you

985
01:03:41,429 --> 01:03:51,949
must be something that can have children

986
01:03:43,108 --> 01:03:55,889
right don't know where that

987
01:03:51,949 --> 01:04:00,929
function is here we go so I don't really

988
01:03:55,889 --> 01:04:02,400
know like has children and can have

989
01:04:00,929 --> 01:04:05,489
children are kind of two different

990
01:04:02,400 --> 01:04:09,240
things so I don't know the degree to

991
01:04:05,489 --> 01:04:11,099
which it uses that it's like has

992
01:04:09,239 --> 01:04:13,529
children is really the wrong way to look

993
01:04:11,099 --> 01:04:15,150
at it it's really it's it's not has

994
01:04:13,530 --> 01:04:22,710
children it should be can have children

995
01:04:15,150 --> 01:04:24,840
right and to degree to which you can

996
01:04:22,710 --> 01:04:29,369
have children is presumably predicated

997
01:04:24,840 --> 01:04:31,079
entirely on whether or not you um are an

998
01:04:29,369 --> 01:04:33,170
element or just a node in a tree that

999
01:04:31,079 --> 01:04:35,460
doesn't have any corresponding element

1000
01:04:33,170 --> 01:04:39,480
that would be my assumption so it seems

1001
01:04:35,460 --> 01:04:41,579
like this should really be can have

1002
01:04:39,480 --> 01:04:47,550
children and can't have children is if

1003
01:04:41,579 --> 01:04:50,429
there's no element that seems more like

1004
01:04:47,550 --> 01:04:56,880
it I don't know and maybe I'm wrong

1005
01:04:50,429 --> 01:04:59,219
about that but looking through here that

1006
01:04:56,880 --> 01:05:01,380
seems a little more sane to me and I'm

1007
01:04:59,219 --> 01:05:04,699
not sure right but so let's go ahead and

1008
01:05:01,380 --> 01:05:04,700
switch back to release now

1009
01:05:21,539 --> 01:05:29,880
so now we correctly have this guy which

1010
01:05:25,559 --> 01:05:31,139
in theory you know we can do anything we

1011
01:05:29,880 --> 01:05:34,169
want with we've got to put some

1012
01:05:31,139 --> 01:05:41,009
information in here and just so does

1013
01:05:34,168 --> 01:05:43,398
this thing remember how this stuff is

1014
01:05:41,009 --> 01:05:43,398
supposed to work

1015
01:05:51,809 --> 01:05:58,679
I really felt there was some way to

1016
01:05:53,280 --> 01:06:01,440
clone these things there's even a clone

1017
01:05:58,679 --> 01:06:03,059
function there I don't know anyway so

1018
01:06:01,440 --> 01:06:04,349
once we've got this up here we can now

1019
01:06:03,059 --> 01:06:07,949
print out the information that we were

1020
01:06:04,349 --> 01:06:09,869
actually looking for and maybe we don't

1021
01:06:07,949 --> 01:06:11,519
want to print the whole thing out like

1022
01:06:09,869 --> 01:06:15,090
that because this is just the query name

1023
01:06:11,519 --> 01:06:18,349
and so we want to actually just use

1024
01:06:15,090 --> 01:06:21,059
maybe the proper name for this thing

1025
01:06:18,349 --> 01:06:25,050
which is you know it's not this unique

1026
01:06:21,059 --> 01:06:29,009
identifier sort of situation so in order

1027
01:06:25,050 --> 01:06:32,400
to do that inside the debug system where

1028
01:06:29,010 --> 01:06:35,250
we do that print out I believe once

1029
01:06:32,400 --> 01:06:37,230
we've got the debug element itself then

1030
01:06:35,250 --> 01:06:41,119
we actually already have that

1031
01:06:37,230 --> 01:06:41,119
information parsed out for us I think

1032
01:06:41,329 --> 01:06:47,489
let's see here so like we've got sort of

1033
01:06:45,300 --> 01:06:49,200
just this regular name parameter and I

1034
01:06:47,489 --> 01:06:51,269
think that might be more what we're

1035
01:06:49,199 --> 01:06:53,669
looking for right so maybe we just want

1036
01:06:51,269 --> 01:06:58,920
to print out just the name of the

1037
01:06:53,670 --> 01:07:01,019
function and that way we can see like

1038
01:06:58,920 --> 01:07:05,220
okay yeah it's just lighting test right

1039
01:07:01,019 --> 01:07:06,869
now if this thing is expanded or not we

1040
01:07:05,219 --> 01:07:12,598
should be able to like insert things

1041
01:07:06,869 --> 01:07:14,820
below it I would think so we could try

1042
01:07:12,599 --> 01:07:17,760
to do that and we'll see what happens if

1043
01:07:14,820 --> 01:07:19,500
we do that but at the moment what I what

1044
01:07:17,760 --> 01:07:23,640
I want to do too is I want to just print

1045
01:07:19,500 --> 01:07:28,199
out here the millisecond ink total time

1046
01:07:23,639 --> 01:07:31,019
and so inside the debug system when

1047
01:07:28,199 --> 01:07:33,719
we've got those profile nodes so it's

1048
01:07:31,019 --> 01:07:35,519
got duration and duration of children so

1049
01:07:33,719 --> 01:07:40,649
I don't know exactly how we're tracking

1050
01:07:35,519 --> 01:07:42,960
duration and duration of children but

1051
01:07:40,650 --> 01:07:44,760
assuming that duration is the total

1052
01:07:42,960 --> 01:07:46,679
duration that's the thing that we

1053
01:07:44,760 --> 01:07:50,820
actually want right we want to know like

1054
01:07:46,679 --> 01:07:52,980
the whole time that it took so what I'm

1055
01:07:50,820 --> 01:07:57,210
gonna do here is I'm gonna say like

1056
01:07:52,980 --> 01:08:05,280
let's print that information out let's

1057
01:07:57,210 --> 01:08:08,820
do a like a point Oh - I don't

1058
01:08:05,280 --> 01:08:12,330
no if we have a way to relate cycles to

1059
01:08:08,820 --> 01:08:14,640
milliseconds at the moment and it's

1060
01:08:12,329 --> 01:08:17,909
always a little bit dicey to do so

1061
01:08:14,639 --> 01:08:19,739
anyway so that might not be right so

1062
01:08:17,909 --> 01:08:22,649
what we could do instead is just print

1063
01:08:19,739 --> 01:08:25,548
out like the cycle count here in some

1064
01:08:22,649 --> 01:08:29,479
way that's relatively easy to met to

1065
01:08:25,548 --> 01:08:32,460
internalize let kilocycles

1066
01:08:29,479 --> 01:08:36,479
let's say or something like that or

1067
01:08:32,460 --> 01:08:38,010
megacycles gb megahertz so we could

1068
01:08:36,479 --> 01:08:41,039
print out like kilohertz or megahertz

1069
01:08:38,010 --> 01:08:46,739
something like this and that seems a

1070
01:08:41,039 --> 01:08:52,769
little bit more sane so maybe like

1071
01:08:46,739 --> 01:08:54,119
kilocycles I guess we could do well it's

1072
01:08:52,770 --> 01:08:56,069
not cycles per second so it wouldn't be

1073
01:08:54,119 --> 01:09:01,260
Hertz right it's not it's not per second

1074
01:08:56,069 --> 01:09:10,740
it's just her frame so yeah so we could

1075
01:09:01,260 --> 01:09:13,020
do something like that and and that

1076
01:09:10,739 --> 01:09:14,899
seems reasonable so let's try it so if I

1077
01:09:13,020 --> 01:09:20,839
print out this let's print out

1078
01:09:14,899 --> 01:09:20,838
kilocycles all right we could just get

1079
01:09:22,640 --> 01:09:32,390
so if I want to know what this is and me

1080
01:09:28,588 --> 01:09:32,390
you know maybe we also want to do like

1081
01:09:38,210 --> 01:09:52,039
the minimum one as well so let's say min

1082
01:09:44,658 --> 01:10:04,549
duration here equals 364 Max and I guess

1083
01:09:52,039 --> 01:10:07,670
we don't have that all right so we're

1084
01:10:04,550 --> 01:10:09,820
gonna do the loop over all of the frames

1085
01:10:07,670 --> 01:10:14,230
for this function that we've got and

1086
01:10:09,819 --> 01:10:17,869
we're gonna see which one is the most

1087
01:10:14,229 --> 01:10:24,139
the lowest and maybe we'll see which

1088
01:10:17,869 --> 01:10:27,609
one's the highest as well and we'll go

1089
01:10:24,140 --> 01:10:34,340
from there we could also take an average

1090
01:10:27,609 --> 01:10:36,649
if we wanted to so let's go ahead and

1091
01:10:34,340 --> 01:10:43,310
loop over that so proof the debug

1092
01:10:36,649 --> 01:10:49,250
profile node here let's get that out so

1093
01:10:43,310 --> 01:10:54,080
the HUD function profile node that's

1094
01:10:49,250 --> 01:10:55,609
under stored event get that in here and

1095
01:10:54,079 --> 01:10:57,559
so for the sort event so inside this

1096
01:10:55,609 --> 01:11:01,219
element we've got these frames and the

1097
01:10:57,560 --> 01:11:05,030
debug element frame has all of the

1098
01:11:01,219 --> 01:11:08,050
events for this right so we have to kind

1099
01:11:05,029 --> 01:11:12,170
of loop over each frame and then look at

1100
01:11:08,050 --> 01:11:14,690
the events so I'm not sure exactly how

1101
01:11:12,170 --> 01:11:16,789
we have this structured in here like how

1102
01:11:14,689 --> 01:11:19,698
we would know necessarily which one of

1103
01:11:16,789 --> 01:11:21,109
these we're looking at because I don't

1104
01:11:19,698 --> 01:11:23,389
remember exactly how we saw it functions

1105
01:11:21,109 --> 01:11:24,859
right but if we look through each of the

1106
01:11:23,390 --> 01:11:27,560
ones that we have here this is how many

1107
01:11:24,859 --> 01:11:29,779
events we would have and we can go

1108
01:11:27,560 --> 01:11:31,789
through them all and look at what the

1109
01:11:29,779 --> 01:11:34,550
event is or what the profile note is and

1110
01:11:31,789 --> 01:11:36,920
again I'm not sure how to know which one

1111
01:11:34,550 --> 01:11:39,619
of the two we have but presumably it's

1112
01:11:36,920 --> 01:11:42,158
it's specified in the debug type I'm

1113
01:11:39,619 --> 01:11:42,158
guessing

1114
01:11:44,109 --> 01:11:54,460
I mean that's my assumption anyway so

1115
01:11:52,720 --> 01:11:56,289
I'm assuming that in here it's like okay

1116
01:11:54,460 --> 01:11:58,390
depending on which one of these you are

1117
01:11:56,289 --> 01:12:01,029
that's gonna tell us that's going to

1118
01:11:58,390 --> 01:12:03,550
tell us which of the things you have

1119
01:12:01,029 --> 01:12:05,050
look whether you have events or profile

1120
01:12:03,550 --> 01:12:07,480
notes or whatever so I guess we don't

1121
01:12:05,050 --> 01:12:10,390
really know which of these we've got and

1122
01:12:07,479 --> 01:12:12,609
we may need to do some investigation

1123
01:12:10,390 --> 01:12:20,230
here right so let's actually do that

1124
01:12:12,609 --> 01:12:29,559
let's let's do this so we know we've

1125
01:12:20,229 --> 01:12:33,299
gotten this many frames and we know on

1126
01:12:29,560 --> 01:12:33,300
each one we have give a government frame

1127
01:12:43,890 --> 01:12:48,490
so for each one of these we now know

1128
01:12:46,960 --> 01:12:49,989
that we've got a particular frame of

1129
01:12:48,489 --> 01:12:52,960
data that we can look at and it's got

1130
01:12:49,989 --> 01:12:56,349
this many events in it for that frame

1131
01:12:52,960 --> 01:12:58,569
now for this we would expect to only

1132
01:12:56,350 --> 01:13:00,010
have one event per frame well two events

1133
01:12:58,569 --> 01:13:02,859
that they're open and closed I'm

1134
01:13:00,010 --> 01:13:05,220
assuming so let's just go ahead and loop

1135
01:13:02,859 --> 01:13:05,219
over those

1136
01:13:23,970 --> 01:13:30,640
like so so we can't look over all these

1137
01:13:29,199 --> 01:13:34,238
however these should have already been

1138
01:13:30,640 --> 01:13:36,220
collated as well so again I'm not 100%

1139
01:13:34,238 --> 01:13:39,189
sure we may want to look this up inside

1140
01:13:36,220 --> 01:13:41,530
the profile tree right because remember

1141
01:13:39,189 --> 01:13:47,169
the way that this worked was we have a

1142
01:13:41,529 --> 01:13:48,069
route profile element and so maybe we

1143
01:13:47,170 --> 01:13:51,329
need to look at this a little bit

1144
01:13:48,069 --> 01:13:51,329
differently but let's take a look here

1145
01:14:05,670 --> 01:14:19,470
so here's where we actually do this

1146
01:14:08,710 --> 01:14:19,470
profile elements

1147
01:14:28,359 --> 01:14:34,899
so you can see here the element that

1148
01:14:32,680 --> 01:14:38,829
you're viewing comes through here as

1149
01:14:34,899 --> 01:14:41,379
root element and it looks through each

1150
01:14:38,829 --> 01:14:43,210
of the frames each of the events and

1151
01:14:41,380 --> 01:14:47,050
those events are profile notes because

1152
01:14:43,210 --> 01:14:49,180
it's in the profile tree right so for us

1153
01:14:47,050 --> 01:14:52,659
I mean it's a little bit tricky because

1154
01:14:49,180 --> 01:14:57,490
yeah I don't know how to get directly to

1155
01:14:52,659 --> 01:14:59,260
the profile tree from just the debug

1156
01:14:57,489 --> 01:15:01,569
events because they're not necessarily

1157
01:14:59,260 --> 01:15:06,970
going to go into the profile tree I

1158
01:15:01,569 --> 01:15:08,739
don't think now maybe that's not true it

1159
01:15:06,970 --> 01:15:20,020
may be that functions that's where they

1160
01:15:08,739 --> 01:15:27,579
go right so let's take a look so

1161
01:15:20,020 --> 01:15:35,740
interesting enough that does look like

1162
01:15:27,579 --> 01:15:37,269
how that works so you can see here we

1163
01:15:35,739 --> 01:15:39,519
need to get element from event it's

1164
01:15:37,270 --> 01:15:42,310
doing it off of the debug profile group

1165
01:15:39,520 --> 01:15:44,230
here so maybe that is how that works I

1166
01:15:42,310 --> 01:15:46,590
don't know we're going to find out in a

1167
01:15:44,229 --> 01:15:46,589
second

1168
01:15:52,920 --> 01:16:15,690
let's see here just going to stub these

1169
01:16:13,449 --> 01:16:15,689
out

1170
01:16:32,319 --> 01:16:40,808
just so you can have like a min average

1171
01:16:34,788 --> 01:16:40,809
Max something like that

1172
01:16:46,809 --> 01:16:51,929
so if I have

1173
01:17:14,609 --> 01:17:31,319
I suppose these can just be D so I'm

1174
01:17:28,439 --> 01:17:34,019
gonna step into this line now and see

1175
01:17:31,319 --> 01:17:37,639
what those actually are

1176
01:17:34,020 --> 01:17:43,670
so inside debug and where we actually

1177
01:17:37,639 --> 01:17:46,980
groups where we actually look at it

1178
01:17:43,670 --> 01:17:48,658
inside here I'm going to go ahead and

1179
01:17:46,979 --> 01:17:53,839
just set a breakpoint so I can find out

1180
01:17:48,658 --> 01:17:53,839
what we're actually looking at why that

1181
01:17:56,960 --> 01:18:13,550
is there a reason this does it did it

1182
01:18:07,229 --> 01:18:13,549
not recompile what's going on there

1183
01:18:19,328 --> 01:18:28,469
did it uh-oh cuz we're still in snow

1184
01:18:24,550 --> 01:18:31,929
Marty we're still an ode to so it just

1185
01:18:28,469 --> 01:18:34,630
optimized out the whole loop which good

1186
01:18:31,929 --> 01:18:37,599
for it it doesn't do anything that's a

1187
01:18:34,630 --> 01:18:40,719
good a good idea I would have done that

1188
01:18:37,599 --> 01:18:44,409
too if I was an optimizer um so there's

1189
01:18:40,719 --> 01:18:46,719
no events for this thing okay

1190
01:18:44,408 --> 01:18:50,859
then there were just on that one time

1191
01:18:46,719 --> 01:18:52,270
that makes sense I guess actually I have

1192
01:18:50,859 --> 01:18:57,848
to let the frame buffer kind of fill up

1193
01:18:52,270 --> 01:19:01,030
here so once we have enough frames to

1194
01:18:57,849 --> 01:19:08,289
actually fill then I suppose we're okay

1195
01:19:01,029 --> 01:19:12,158
right right as this moves through and

1196
01:19:08,289 --> 01:19:15,639
fills up frames then when we stop here

1197
01:19:12,158 --> 01:19:17,158
we should start to see some so there are

1198
01:19:15,639 --> 01:19:20,260
some events in this particular frame

1199
01:19:17,158 --> 01:19:22,328
here's the most recent one

1200
01:19:20,260 --> 01:19:27,630
so if we take a look at what's on here

1201
01:19:22,328 --> 01:19:30,630
here's the event and the profile node

1202
01:19:27,630 --> 01:19:30,630
version

1203
01:19:35,819 --> 01:19:43,380
so let's see what does HUD functions

1204
01:19:39,100 --> 01:19:47,489
type evaluate - it's a begin block type

1205
01:19:43,380 --> 01:19:47,489
so a begin block

1206
01:20:13,658 --> 01:20:19,059
I mean it looks to me like that actually

1207
01:20:16,510 --> 01:20:23,289
will store the profile nerd into here

1208
01:20:19,060 --> 01:20:32,289
right so I feel like if we just look for

1209
01:20:23,289 --> 01:20:34,329
the end block that is what we want so I

1210
01:20:32,289 --> 01:20:35,859
think this does have the exact

1211
01:20:34,329 --> 01:20:48,760
information that we're looking for I

1212
01:20:35,859 --> 01:20:55,750
think don't quote me on that so I think

1213
01:20:48,760 --> 01:20:58,420
in here if we just say although I guess

1214
01:20:55,750 --> 01:21:01,300
we need to know where the end block is

1215
01:20:58,420 --> 01:21:07,060
for this begin block though so when we

1216
01:21:01,300 --> 01:21:16,360
come through here since it's this

1217
01:21:07,060 --> 01:21:20,469
element is actually in here this element

1218
01:21:16,359 --> 01:21:22,809
itself is the begin block right so I

1219
01:21:20,469 --> 01:21:26,760
don't know how that necessarily squares

1220
01:21:22,810 --> 01:21:26,760
with the way this works here

1221
01:21:37,210 --> 01:21:40,930
yes I don't think it gets one of those

1222
01:21:39,609 --> 01:21:52,299
right I think it should have one of

1223
01:21:40,930 --> 01:21:54,869
these so yeah this is probably inside

1224
01:21:52,300 --> 01:21:54,869
the profile node

1225
01:22:06,109 --> 01:22:13,460
I mean I think this is what we need so

1226
01:22:09,618 --> 01:22:14,899
let's try it and we'll see

1227
01:22:13,460 --> 01:22:18,029
so just inside here yeah

1228
01:22:14,899 --> 01:22:18,029
[Music]

1229
01:22:22,479 --> 01:22:27,488
just looking at the events I think would

1230
01:22:24,310 --> 01:22:29,440
tell us that now the question is per

1231
01:22:27,488 --> 01:22:31,000
frame if there's more than one event

1232
01:22:29,439 --> 01:22:32,589
what do we want to do about it

1233
01:22:31,000 --> 01:22:41,470
I assume we still just want to use the

1234
01:22:32,590 --> 01:22:42,940
duration either way but we'll see so

1235
01:22:41,470 --> 01:22:44,650
when we come through here and we look at

1236
01:22:42,939 --> 01:22:49,479
all the events I think we just want to

1237
01:22:44,649 --> 01:23:00,279
do debug profile node node equals frame

1238
01:22:49,479 --> 01:23:01,719
node and once we have this we can just

1239
01:23:00,279 --> 01:23:04,809
look at the duration of it and I think

1240
01:23:01,720 --> 01:23:07,390
that's all we really need so we can say

1241
01:23:04,810 --> 01:23:09,250
you know if the minimum duration is

1242
01:23:07,390 --> 01:23:14,560
greater than the node duration then the

1243
01:23:09,250 --> 01:23:19,289
mid duration equals the node duration if

1244
01:23:14,560 --> 01:23:28,300
the max duration is less than it equals

1245
01:23:19,289 --> 01:23:29,409
the total duration can just sum and we

1246
01:23:28,300 --> 01:23:36,279
want to keep it count

1247
01:23:29,409 --> 01:23:39,939
right and the count isn't there can't be

1248
01:23:36,279 --> 01:23:43,300
that many of them so now we know how

1249
01:23:39,939 --> 01:23:47,969
many we did so as far as figure out what

1250
01:23:43,300 --> 01:23:52,150
the current cycles are I that one I'm

1251
01:23:47,970 --> 01:23:54,460
not sure exactly how to do because I'm

1252
01:23:52,149 --> 01:23:58,329
assuming we would have to look at what

1253
01:23:54,460 --> 01:24:00,340
debug frame were actually on and so I

1254
01:23:58,329 --> 01:24:02,199
guess that's technically we do keep that

1255
01:24:00,340 --> 01:24:06,039
in here I think that's the viewing frame

1256
01:24:02,199 --> 01:24:17,260
index right so I think that actually is

1257
01:24:06,039 --> 01:24:21,130
in here that is in here so I think if we

1258
01:24:17,260 --> 01:24:24,869
just said like okay you know if the

1259
01:24:21,130 --> 01:24:28,739
frame index listed in the node is the

1260
01:24:24,869 --> 01:24:28,738
one we're looking at

1261
01:24:30,069 --> 01:24:35,750
so essentially we say all right if the

1262
01:24:33,020 --> 01:24:38,120
event frame index you know equals

1263
01:24:35,750 --> 01:24:43,189
whatever the framer knows they're

1264
01:24:38,119 --> 01:24:48,859
reviewing then I think that the curd

1265
01:24:43,189 --> 01:24:50,929
duration is set there don't quote me on

1266
01:24:48,859 --> 01:24:56,089
that because I don't know but let's just

1267
01:24:50,930 --> 01:24:59,329
say that's true so then I think all we

1268
01:24:56,090 --> 01:25:09,590
really have to do is just multiplied

1269
01:24:59,329 --> 01:25:11,119
these here max min and the average we

1270
01:25:09,590 --> 01:25:15,470
don't actually keep we only keep the

1271
01:25:11,119 --> 01:25:21,079
total so we want to do 2 divided by 1000

1272
01:25:15,470 --> 01:25:26,840
times the total count which is how many

1273
01:25:21,079 --> 01:25:28,670
of these like we summed up right so yeah

1274
01:25:26,840 --> 01:25:31,520
I think that's about right the only

1275
01:25:28,670 --> 01:25:33,949
thing is you know it's not this is not

1276
01:25:31,520 --> 01:25:35,480
100% accurate here because we really

1277
01:25:33,949 --> 01:25:38,840
should summer right this should really

1278
01:25:35,479 --> 01:25:40,309
be summarized outside I think because

1279
01:25:38,840 --> 01:25:41,930
we're looking for frames so let's say

1280
01:25:40,310 --> 01:25:45,490
the thing hits multiple times for frame

1281
01:25:41,930 --> 01:25:49,430
I think really what we want to do here

1282
01:25:45,489 --> 01:25:51,380
is some the duration this way so I think

1283
01:25:49,430 --> 01:25:54,020
we want to do like duration equals zero

1284
01:25:51,380 --> 01:25:56,060
then we want to drape in plus equals you

1285
01:25:54,020 --> 01:26:00,980
know event duration or sorry note

1286
01:25:56,060 --> 01:26:02,660
duration like that and then this

1287
01:26:00,979 --> 01:26:06,349
actually just wants to work off of that

1288
01:26:02,659 --> 01:26:08,090
value so that way it's like okay if this

1289
01:26:06,350 --> 01:26:09,560
hit many times in this frame we're it's

1290
01:26:08,090 --> 01:26:11,600
gonna sum them all together and get the

1291
01:26:09,560 --> 01:26:16,480
frame the total time for this frame and

1292
01:26:11,600 --> 01:26:16,480
then we're gonna work off of that

1293
01:26:27,989 --> 01:26:34,199
is it frame frame index what is how does

1294
01:26:31,329 --> 01:26:34,199
this actually work

1295
01:26:37,590 --> 01:26:41,819
so in here

1296
01:26:49,979 --> 01:27:00,090
inside the profile node we don't know it

1297
01:26:56,248 --> 01:27:08,788
inside the event we do know it and so

1298
01:27:00,090 --> 01:27:11,399
yeah I'm not sure I'll be honest I don't

1299
01:27:08,788 --> 01:27:13,319
really know why we store a frame index

1300
01:27:11,399 --> 01:27:15,119
here necessarily because it seems like

1301
01:27:13,319 --> 01:27:17,130
you wouldn't really need to do that

1302
01:27:15,118 --> 01:27:23,639
since it's here where that would make

1303
01:27:17,130 --> 01:27:28,380
the most sense so I don't quite get that

1304
01:27:23,639 --> 01:27:30,090
like that doesn't that doesn't make a

1305
01:27:28,380 --> 01:27:32,998
lot of sense to me it seems like the

1306
01:27:30,090 --> 01:27:35,328
frame index so who who looks at that and

1307
01:27:32,998 --> 01:27:35,328
why

1308
01:27:54,679 --> 01:27:57,279
so

1309
01:28:02,460 --> 01:28:07,770
so you're telling me that that is

1310
01:28:04,329 --> 01:28:07,769
literally not used

1311
01:28:26,208 --> 01:28:34,618
okay well my intuition was right about

1312
01:28:31,738 --> 01:28:38,819
it I guess I'm not sure how that still

1313
01:28:34,618 --> 01:28:46,130
stays in there but I guess it shouldn't

1314
01:28:38,819 --> 01:28:52,380
be in there I guess I'm right about that

1315
01:28:46,130 --> 01:28:59,219
well good so I assume then is it safe to

1316
01:28:52,380 --> 01:29:04,139
say that this frame index here I mean

1317
01:28:59,219 --> 01:29:06,719
that doesn't necessarily line up I mean

1318
01:29:04,139 --> 01:29:14,279
does it or doesn't it line up with

1319
01:29:06,719 --> 01:29:18,389
whichever frame were actually viewing

1320
01:29:14,279 --> 01:29:22,198
right so these events in here you know

1321
01:29:18,389 --> 01:29:24,269
they're stored in this array does that

1322
01:29:22,198 --> 01:29:26,728
array necessarily correspond with the

1323
01:29:24,269 --> 01:29:29,458
ordinals right or are the ordinals

1324
01:29:26,729 --> 01:29:31,139
unrelated to that and I'm not sure so

1325
01:29:29,458 --> 01:29:32,819
you know we could do this and just

1326
01:29:31,139 --> 01:29:35,069
assume that they are right just say oh

1327
01:29:32,819 --> 01:29:36,779
you know which which one of these are

1328
01:29:35,069 --> 01:29:37,768
you looking at but that may not actually

1329
01:29:36,779 --> 01:29:39,478
be accurate

1330
01:29:37,769 --> 01:29:40,860
not that we super care because that's

1331
01:29:39,479 --> 01:29:43,979
not actually a value we particularly

1332
01:29:40,859 --> 01:29:46,708
care about necessarily but that is

1333
01:29:43,979 --> 01:29:50,300
roughly what we want to know right all

1334
01:29:46,708 --> 01:29:50,300
right so let's take a look here

1335
01:29:51,119 --> 01:29:54,670
[Music]

1336
01:29:59,579 --> 01:30:04,340
all right so we should be able to get

1337
01:30:01,260 --> 01:30:04,340
some print out now

1338
01:30:16,770 --> 01:30:22,720
and I don't know whether we want to go

1339
01:30:19,239 --> 01:30:25,029
from oldest to newest so this is a

1340
01:30:22,720 --> 01:30:27,520
singly linked or list right and it goes

1341
01:30:25,029 --> 01:30:30,179
in one particular direction so if you

1342
01:30:27,520 --> 01:30:30,180
take a look at

1343
01:30:30,479 --> 01:30:34,899
it's got oldest event two most recent

1344
01:30:33,310 --> 01:30:38,140
event and then it's got the next pointer

1345
01:30:34,899 --> 01:30:49,869
and so the question is which of these

1346
01:30:38,140 --> 01:30:53,380
two does it add on to right oops so

1347
01:30:49,869 --> 01:30:57,189
looking through here when this gets

1348
01:30:53,380 --> 01:31:00,880
added on so you can see that it's

1349
01:30:57,189 --> 01:31:02,559
chained off of the most recent so it

1350
01:31:00,880 --> 01:31:10,420
starts at oldest in ghost

1351
01:31:02,560 --> 01:31:13,030
it goes from oldest to newest so now

1352
01:31:10,420 --> 01:31:16,060
we're printing out the min the max and

1353
01:31:13,029 --> 01:31:20,409
the average as you would expect the zero

1354
01:31:16,060 --> 01:31:22,570
value is in there until we roll the

1355
01:31:20,409 --> 01:31:24,099
counter because there's always going to

1356
01:31:22,569 --> 01:31:26,109
be frames in there that didn't have this

1357
01:31:24,100 --> 01:31:29,680
getting called until we fill up that

1358
01:31:26,109 --> 01:31:32,049
entire array so I think that's mostly

1359
01:31:29,680 --> 01:31:33,850
all we wanted at this point so if I go

1360
01:31:32,050 --> 01:31:35,710
back and switch us to the optimized bill

1361
01:31:33,850 --> 01:31:38,590
this would give us the actual cycle

1362
01:31:35,710 --> 01:31:45,100
count that we are taking in order to

1363
01:31:38,590 --> 01:31:49,360
fill the lighting right so here's our

1364
01:31:45,100 --> 01:31:56,800
sort of mid max average print out it

1365
01:31:49,359 --> 01:32:03,009
doesn't look right though so you can see

1366
01:31:56,800 --> 01:32:05,199
here like the average value can't be

1367
01:32:03,010 --> 01:32:07,539
higher than the max but it is right so

1368
01:32:05,199 --> 01:32:09,309
that's a little busted so not quite

1369
01:32:07,539 --> 01:32:12,130
there yet get in there but not quite

1370
01:32:09,310 --> 01:32:14,700
there yet all right so let's go fix that

1371
01:32:12,130 --> 01:32:14,699
oops

1372
01:32:23,738 --> 01:32:29,539
alright so on here we're gonna loop over

1373
01:32:27,350 --> 01:32:32,329
all the frames we're gonna sum up the

1374
01:32:29,539 --> 01:32:35,269
duration which i think is now correctly

1375
01:32:32,329 --> 01:32:39,109
adding all of the times that we've seen

1376
01:32:35,270 --> 01:32:41,630
this thing get profiled right and then

1377
01:32:39,109 --> 01:32:45,439
we're gonna produce some values here

1378
01:32:41,630 --> 01:32:48,050
based off of what we've got so we're

1379
01:32:45,439 --> 01:32:59,238
gonna sum the total count and the total

1380
01:32:48,050 --> 01:33:06,529
duration like so and then we're going to

1381
01:32:59,238 --> 01:33:16,609
print cur min okay well that's probably

1382
01:33:06,529 --> 01:33:18,409
the most of it alright so once this

1383
01:33:16,609 --> 01:33:21,229
stabilizes and what we could do is we

1384
01:33:18,409 --> 01:33:29,920
could drop zero values so what we could

1385
01:33:21,229 --> 01:33:36,919
do is say look if in here if frame

1386
01:33:29,920 --> 01:33:38,750
oldest event so you know don't don't

1387
01:33:36,920 --> 01:33:41,359
actually count it if there's no samples

1388
01:33:38,750 --> 01:33:43,939
on a frame just just leave those out so

1389
01:33:41,359 --> 01:33:45,769
just just only sample things only sample

1390
01:33:43,939 --> 01:33:48,109
only tell me about frames when we

1391
01:33:45,770 --> 01:33:49,489
actually called this function so that'll

1392
01:33:48,109 --> 01:33:50,659
get rid of the start up and also we

1393
01:33:49,488 --> 01:33:52,579
found a particular frame it didn't get

1394
01:33:50,659 --> 01:33:58,849
called it just won't profile that one

1395
01:33:52,579 --> 01:34:02,119
right so taking a look here this this

1396
01:33:58,850 --> 01:34:04,400
looks like what we want right so we've

1397
01:34:02,119 --> 01:34:05,840
got the average we've got the minimum so

1398
01:34:04,399 --> 01:34:07,988
that's the fastest we can be we've got

1399
01:34:05,840 --> 01:34:11,270
the max which is the slowest we can be

1400
01:34:07,988 --> 01:34:13,519
and we've got our average so you can see

1401
01:34:11,270 --> 01:34:17,870
here that to compute the lighting

1402
01:34:13,520 --> 01:34:22,179
according to this if it's accurate it's

1403
01:34:17,869 --> 01:34:24,738
taking about 61 million cycles right and

1404
01:34:22,179 --> 01:34:28,480
that's you know that's still probably

1405
01:34:24,738 --> 01:34:28,479
way too much you know I'm saying

1406
01:34:29,679 --> 01:34:37,489
so our job here is to get that number

1407
01:34:32,389 --> 01:34:41,269
down right we want to get that below 61

1408
01:34:37,488 --> 01:34:45,488
million for sure

1409
01:34:41,269 --> 01:34:48,440
and what I'd also like to do is you know

1410
01:34:45,488 --> 01:34:51,408
yet now take a look at these here so you

1411
01:34:48,439 --> 01:34:53,498
can see that we've got the this some of

1412
01:34:51,408 --> 01:34:56,299
these stats that we were looking at here

1413
01:34:53,498 --> 01:35:01,158
where we were trying to say okay how

1414
01:34:56,300 --> 01:35:02,989
many you know what's the right balance

1415
01:35:01,158 --> 01:35:04,670
here for partitions forecasts or leaves

1416
01:35:02,988 --> 01:35:05,899
forecast or whatever and I sort of

1417
01:35:04,670 --> 01:35:09,408
played with this value and we were

1418
01:35:05,899 --> 01:35:12,439
looking at this here and so now we can

1419
01:35:09,408 --> 01:35:17,839
sort of see more specifically if we look

1420
01:35:12,439 --> 01:35:19,669
at split box so with the source count

1421
01:35:17,840 --> 01:35:21,889
here if we want to change what that

1422
01:35:19,670 --> 01:35:23,569
number is right we can look and say okay

1423
01:35:21,889 --> 01:35:27,170
it's you know it's a certain value you

1424
01:35:23,569 --> 01:35:28,969
can see how the value changes as we go

1425
01:35:27,170 --> 01:35:31,038
what the like the minimum is for example

1426
01:35:28,969 --> 01:35:32,630
or something like that because the

1427
01:35:31,038 --> 01:35:34,038
minimum is a good indication of like

1428
01:35:32,630 --> 01:35:35,269
just how fast the thing can be it's like

1429
01:35:34,038 --> 01:35:38,479
never gonna go any faster than the

1430
01:35:35,269 --> 01:35:40,248
minimum right um I'd also like to get

1431
01:35:38,479 --> 01:35:42,529
out of the business of having this do

1432
01:35:40,248 --> 01:35:45,380
that crashes on strings so I wonder if

1433
01:35:42,529 --> 01:35:50,210
we can also make that not happen we'll

1434
01:35:45,380 --> 01:35:51,739
see when we get there but so if we take

1435
01:35:50,210 --> 01:35:54,198
a look at what happens here you can see

1436
01:35:51,738 --> 01:35:56,209
if we change it up to eight it actually

1437
01:35:54,198 --> 01:36:01,189
isn't flattering for us right this

1438
01:35:56,210 --> 01:36:04,489
actually went up and our our average

1439
01:36:01,189 --> 01:36:09,109
appears to have gone up as well right so

1440
01:36:04,488 --> 01:36:11,419
it doesn't appear like flipping that up

1441
01:36:09,109 --> 01:36:15,948
to a higher value really does anything

1442
01:36:11,420 --> 01:36:19,460
particularly good for us you know arm in

1443
01:36:15,948 --> 01:36:21,319
arm in definitely went up you know maybe

1444
01:36:19,460 --> 01:36:23,779
another in-between value is better I

1445
01:36:21,319 --> 01:36:26,868
don't know hard to say but you can see

1446
01:36:23,779 --> 01:36:27,979
like it goes down right so so as we sort

1447
01:36:26,868 --> 01:36:31,158
of reduced that number

1448
01:36:27,979 --> 01:36:33,049
it was definitely going down there right

1449
01:36:31,158 --> 01:36:37,029
so there's a you know sort of sitting at

1450
01:36:33,050 --> 01:36:37,029
55 average of 63

1451
01:36:37,760 --> 01:36:45,449
let's see if we drop it way down so then

1452
01:36:43,319 --> 01:36:47,729
we kind of go back up a little but

1453
01:36:45,449 --> 01:36:49,500
actually no that's it's kind of hard to

1454
01:36:47,729 --> 01:36:51,419
say right it's a little bit variable now

1455
01:36:49,500 --> 01:36:54,289
it looks like it's it's almost more

1456
01:36:51,420 --> 01:36:57,989
variable and that's where we're testing

1457
01:36:54,289 --> 01:37:02,220
just a lot of partitions forecast a lot

1458
01:36:57,989 --> 01:37:03,689
more right but either way so just

1459
01:37:02,220 --> 01:37:05,699
looking at it in general what you can

1460
01:37:03,689 --> 01:37:08,579
sort of say though regardless of

1461
01:37:05,699 --> 01:37:11,460
anything else is there's not a lot of

1462
01:37:08,579 --> 01:37:14,880
play in there right it's not like

1463
01:37:11,460 --> 01:37:19,199
changing that number gets us to X or

1464
01:37:14,880 --> 01:37:20,250
something no matter how we might fine

1465
01:37:19,199 --> 01:37:22,319
tune it

1466
01:37:20,250 --> 01:37:24,869
we can probably tank the frame rate by

1467
01:37:22,319 --> 01:37:27,710
making it very high potentially maybe

1468
01:37:24,869 --> 01:37:32,779
but you know even that we really can't

1469
01:37:27,710 --> 01:37:35,939
so so putting a lot of leaves in there

1470
01:37:32,779 --> 01:37:43,279
really doesn't affect it as much as you

1471
01:37:35,939 --> 01:37:43,279
might think so let's keep cranking it up

1472
01:37:49,118 --> 01:37:54,168
so yeah I mean you know it's it's not

1473
01:37:52,038 --> 01:37:56,238
nothing but it's just it's not as as

1474
01:37:54,168 --> 01:37:57,859
dramatic as you might like and so I

1475
01:37:56,238 --> 01:37:59,808
think one of the things that maybe that

1476
01:37:57,859 --> 01:38:03,828
tells us a little bit is that which we

1477
01:37:59,809 --> 01:38:05,989
kind of already know is that our spatial

1478
01:38:03,828 --> 01:38:08,958
partition is not fantastic right which

1479
01:38:05,988 --> 01:38:11,799
we kind of already knew but you know in

1480
01:38:08,958 --> 01:38:15,708
theory modifying the spatial partition

1481
01:38:11,800 --> 01:38:19,248
that much we would like it to have a

1482
01:38:15,708 --> 01:38:23,118
pretty dramatic effect on the frame on

1483
01:38:19,248 --> 01:38:25,099
the total cycle count and you know maybe

1484
01:38:23,118 --> 01:38:26,478
at the moment it's maybe not having as

1485
01:38:25,099 --> 01:38:27,708
much as we would like but it did you

1486
01:38:26,479 --> 01:38:29,689
know did have some you know going from

1487
01:38:27,708 --> 01:38:31,309
54 to like 80 or whatever that you know

1488
01:38:29,689 --> 01:38:33,860
it's getting closer to doubling right

1489
01:38:31,309 --> 01:38:37,360
that's so that's something I don't want

1490
01:38:33,859 --> 01:38:41,630
to be too harsh on it all right

1491
01:38:37,359 --> 01:38:43,009
so looking at those numbers and again

1492
01:38:41,630 --> 01:38:45,139
one of the nice things here is so you

1493
01:38:43,010 --> 01:38:48,019
can see as we start to do this stuff

1494
01:38:45,139 --> 01:38:51,288
right those numbers really don't change

1495
01:38:48,019 --> 01:38:55,579
a lot and that's what we wanted so we

1496
01:38:51,288 --> 01:38:57,648
can sort of take that out of the

1497
01:38:55,578 --> 01:39:01,458
equation so that instead of looking at

1498
01:38:57,649 --> 01:39:03,199
very variable millisecond times that can

1499
01:39:01,458 --> 01:39:06,529
change a lot depending on like what

1500
01:39:03,198 --> 01:39:07,969
we've got open here and how much we're

1501
01:39:06,529 --> 01:39:09,469
drawing and all this other stuff you can

1502
01:39:07,969 --> 01:39:11,059
see there's like it's going it's a very

1503
01:39:09,469 --> 01:39:12,708
wide range it's it's a there's a whole

1504
01:39:11,059 --> 01:39:16,159
range of ten milliseconds it can run

1505
01:39:12,708 --> 01:39:18,498
through there these values remain much

1506
01:39:16,158 --> 01:39:19,879
more stable and so that's the reason I

1507
01:39:18,498 --> 01:39:22,219
wanted that so that we're not sort of

1508
01:39:19,880 --> 01:39:23,899
chasing a phony thing up here that's

1509
01:39:22,219 --> 01:39:27,979
going to be variable and weird this way

1510
01:39:23,899 --> 01:39:35,289
we can actually see the information more

1511
01:39:27,979 --> 01:39:35,289
clearly as we're testing all right so

1512
01:39:35,909 --> 01:39:40,649
there's a couple different things about

1513
01:39:37,619 --> 01:39:42,420
this that's worth looking at so the

1514
01:39:40,649 --> 01:39:44,879
first thing that's worth noticing is

1515
01:39:42,420 --> 01:39:50,730
like so if we take a look at our raycast

1516
01:39:44,880 --> 01:39:53,100
function you know probably if we're

1517
01:39:50,729 --> 01:39:54,809
gonna stick with box a a B based testing

1518
01:39:53,100 --> 01:39:56,340
one of the things that we're not doing

1519
01:39:54,810 --> 01:39:59,160
right now is is we're not really doing

1520
01:39:56,340 --> 01:40:00,690
that in a very good fashion so if you

1521
01:39:59,159 --> 01:40:03,359
look at how we're doing it we're

1522
01:40:00,689 --> 01:40:05,879
actually still looping over axes so

1523
01:40:03,359 --> 01:40:11,159
first of all like right we could unroll

1524
01:40:05,880 --> 01:40:12,900
this certainly and just have all three

1525
01:40:11,159 --> 01:40:14,880
cases sort of stacked on top of each

1526
01:40:12,899 --> 01:40:16,949
other so that there is no loop because

1527
01:40:14,880 --> 01:40:19,109
we don't know to what extent the

1528
01:40:16,949 --> 01:40:22,050
compiler is able to understand that

1529
01:40:19,109 --> 01:40:24,179
particularly well and it may be that we

1530
01:40:22,050 --> 01:40:26,390
can help it out quite a bit and do less

1531
01:40:24,180 --> 01:40:29,340
work if we were doing the the

1532
01:40:26,390 --> 01:40:30,690
intersection more cleanly also we don't

1533
01:40:29,340 --> 01:40:31,890
really know if we're if that's a

1534
01:40:30,689 --> 01:40:34,469
particularly smart way to do that

1535
01:40:31,890 --> 01:40:36,180
intersection so for example it's it's

1536
01:40:34,470 --> 01:40:44,810
actually very simple to do stuff like

1537
01:40:36,180 --> 01:40:44,810
closest point on an a a b2 and to am

1538
01:40:45,319 --> 01:40:55,139
closest point on an a B to a point is a

1539
01:40:48,989 --> 01:40:59,489
much simpler function to do than Ray

1540
01:40:55,140 --> 01:41:01,800
intersection and so I don't know if

1541
01:40:59,489 --> 01:41:04,019
there's also a similarly easier way to

1542
01:41:01,800 --> 01:41:09,210
do the Ray intersection than what we're

1543
01:41:04,020 --> 01:41:11,990
doing right now but my guess is there

1544
01:41:09,210 --> 01:41:11,989
probably is

1545
01:41:16,819 --> 01:41:24,349
so it might make sense to look up some

1546
01:41:18,949 --> 01:41:27,529
good fast AAB test and just see what

1547
01:41:24,350 --> 01:41:30,310
people have done that are that are

1548
01:41:27,529 --> 01:41:30,309
particularly good

1549
01:41:43,198 --> 01:41:49,049
Blucher coordinates oh yes

1550
01:42:33,399 --> 01:42:37,529
so yeah I mean

1551
01:42:43,369 --> 01:42:52,369
it seems like going this route could

1552
01:42:46,250 --> 01:42:58,579
simplify things quite a bit let's see

1553
01:42:52,369 --> 01:43:01,329
what this fellow says here it's a basic

1554
01:42:58,579 --> 01:43:01,329
Ranger section

1555
01:43:38,510 --> 01:43:42,960
so you can actually see going through

1556
01:43:40,560 --> 01:43:45,450
time here we are the old school right

1557
01:43:42,960 --> 01:43:48,390
every face of the AAB t-test right which

1558
01:43:45,449 --> 01:43:50,579
is the old way and you can see them

1559
01:43:48,390 --> 01:43:53,220
going through different ones here which

1560
01:43:50,579 --> 01:43:57,720
we couldn't actually we you know we

1561
01:43:53,220 --> 01:44:00,510
haven't done but this does seem like a

1562
01:43:57,720 --> 01:44:02,159
pretty nice one if this actually is a

1563
01:44:00,510 --> 01:44:04,050
good way to test we'll have to work

1564
01:44:02,159 --> 01:44:08,159
through the math here but looking at

1565
01:44:04,050 --> 01:44:10,079
this since all of these are ORS we

1566
01:44:08,159 --> 01:44:12,449
should be able to do this SSE wise

1567
01:44:10,079 --> 01:44:13,979
pretty well as as well right you stack

1568
01:44:12,449 --> 01:44:17,689
them up and then just do one check at

1569
01:44:13,979 --> 01:44:17,689
the end to so it should be pretty easy

1570
01:44:18,109 --> 01:44:23,250
and since we are testing the Ray against

1571
01:44:21,329 --> 01:44:26,420
multiple boxes it does line up well with

1572
01:44:23,250 --> 01:44:29,640
what they were anticipating here right

1573
01:44:26,420 --> 01:44:31,170
which is that you pre compute stuff for

1574
01:44:29,640 --> 01:44:35,610
your array which is this information

1575
01:44:31,170 --> 01:44:37,350
here so the X Y Z IJ K starting

1576
01:44:35,609 --> 01:44:39,179
directions tough thing gets expanded out

1577
01:44:37,350 --> 01:44:42,060
into a bunch of things like the inverses

1578
01:44:39,180 --> 01:44:45,930
of the Ray directions and some

1579
01:44:42,060 --> 01:44:52,940
information regarding the cross like

1580
01:44:45,930 --> 01:44:52,940
cross terms of those and so yeah

1581
01:45:02,399 --> 01:45:20,018
so that seems pretty good as well so we

1582
01:45:13,630 --> 01:45:21,340
definitely could do something like this

1583
01:45:20,019 --> 01:45:22,630
and it looks like we would get a massive

1584
01:45:21,340 --> 01:45:25,360
speed up from that because we're just

1585
01:45:22,630 --> 01:45:26,828
kind of being really dumb right now with

1586
01:45:25,359 --> 01:45:29,368
how we're doing it so just cleaning that

1587
01:45:26,828 --> 01:45:33,609
up could be a pretty reasonable approach

1588
01:45:29,368 --> 01:45:36,339
and so what you can see let's without

1589
01:45:33,609 --> 01:45:46,960
actually going through the paper yet so

1590
01:45:36,340 --> 01:45:48,639
what you can see here is what they're

1591
01:45:46,960 --> 01:45:53,948
suggesting at first is just saying like

1592
01:45:48,639 --> 01:45:56,170
okay so let's suppose that we've got all

1593
01:45:53,948 --> 01:45:58,598
of these planes let's just clip the Ray

1594
01:45:56,170 --> 01:46:00,819
to the planes first and then we'll just

1595
01:45:58,599 --> 01:46:03,699
see if we have anything left was

1596
01:46:00,819 --> 01:46:05,649
essentially what they were saying so

1597
01:46:03,698 --> 01:46:07,538
what they said is like alright first

1598
01:46:05,649 --> 01:46:10,750
flip it to this plane which would give

1599
01:46:07,538 --> 01:46:12,670
you here right then clip it you know to

1600
01:46:10,750 --> 01:46:14,380
that plane which would give you here and

1601
01:46:12,670 --> 01:46:16,179
you'd that would be further so you would

1602
01:46:14,380 --> 01:46:17,949
throw that clip out then clip it to this

1603
01:46:16,179 --> 01:46:19,809
plane which would give you here again

1604
01:46:17,948 --> 01:46:25,259
further you'd throw it out then clip it

1605
01:46:19,809 --> 01:46:25,260
to this plane right which is I guess

1606
01:46:27,929 --> 01:46:32,609
well that would give you like here

1607
01:46:37,229 --> 01:46:46,599
so I'm not sure how they deal with that

1608
01:46:39,970 --> 01:46:49,800
part of it I'm not sure how they deal

1609
01:46:46,600 --> 01:46:52,210
with the fact that if you clip it to

1610
01:46:49,800 --> 01:46:59,140
well I guess what you're trying to say

1611
01:46:52,210 --> 01:47:02,980
there is that you always take the most

1612
01:46:59,140 --> 01:47:13,900
interior value of the two clippings so

1613
01:47:02,979 --> 01:47:17,009
when you clip to here and here so now

1614
01:47:13,899 --> 01:47:17,009
I'm not sure how you deal with that

1615
01:47:17,729 --> 01:47:21,669
because they're not really taking it

1616
01:47:20,590 --> 01:47:23,140
yeah I don't know we're gonna have to

1617
01:47:21,670 --> 01:47:27,420
read this because they're not really

1618
01:47:23,140 --> 01:47:29,920
checking them together with each other

1619
01:47:27,420 --> 01:47:35,190
how was this person this person's was

1620
01:47:29,920 --> 01:47:35,190
not as simplified

1621
01:47:43,238 --> 01:47:49,000
because you can't see you know for any

1622
01:47:45,488 --> 01:47:54,189
individual clipping pair you're gonna

1623
01:47:49,000 --> 01:47:57,069
get a range that is inside that pair so

1624
01:47:54,189 --> 01:47:59,049
I assume you first have to use the pair

1625
01:47:57,069 --> 01:48:02,109
you have to respect the pair's

1626
01:47:59,050 --> 01:48:05,279
in in and of themselves meaning you have

1627
01:48:02,109 --> 01:48:09,130
to you have to find the min and the max

1628
01:48:05,279 --> 01:48:11,679
for these two and then you can clip

1629
01:48:09,130 --> 01:48:13,750
those that min and that max to here and

1630
01:48:11,680 --> 01:48:16,150
here and then it would shrink it in

1631
01:48:13,750 --> 01:48:20,020
right I think you've got to do it that

1632
01:48:16,149 --> 01:48:21,879
way and it does look like yeah so that

1633
01:48:20,020 --> 01:48:23,920
is what they're doing so they just say

1634
01:48:21,880 --> 01:48:26,020
like look okay let's produce a pair and

1635
01:48:23,920 --> 01:48:28,569
then we'll clip that pair to the next

1636
01:48:26,020 --> 01:48:30,580
pair so we just keep moving it in that

1637
01:48:28,569 --> 01:48:33,039
makes sense and so then you just say

1638
01:48:30,579 --> 01:48:35,619
look whichever the furthest one away was

1639
01:48:33,039 --> 01:48:38,590
and the closest one I'm gonna narrow in

1640
01:48:35,619 --> 01:48:40,510
that only that much I'm not gonna ever

1641
01:48:38,590 --> 01:48:41,529
accidentally flip those two which would

1642
01:48:40,510 --> 01:48:42,730
produce the case that I was talking

1643
01:48:41,529 --> 01:48:45,819
about before where you're like I don't

1644
01:48:42,729 --> 01:48:47,349
know what to do with this one right so

1645
01:48:45,819 --> 01:48:49,299
you wouldn't have that problem because

1646
01:48:47,350 --> 01:48:53,969
you're comparing this one and this one

1647
01:48:49,300 --> 01:48:56,949
and then you take this one of those two

1648
01:48:53,969 --> 01:48:58,989
right so you produced this two here then

1649
01:48:56,949 --> 01:49:05,920
you'd get these two and then finally

1650
01:48:58,988 --> 01:49:10,809
you'd have the ones three dimensions so

1651
01:49:05,920 --> 01:49:12,789
yeah so this seems probably it's pretty

1652
01:49:10,810 --> 01:49:15,400
these these are pretty darn similar

1653
01:49:12,789 --> 01:49:17,769
actually but this looks a little worse

1654
01:49:15,399 --> 01:49:18,939
because it's got a lot of min maxing in

1655
01:49:17,770 --> 01:49:20,800
there

1656
01:49:18,939 --> 01:49:24,849
whereas this looks like they've got it

1657
01:49:20,800 --> 01:49:31,750
down to actually no min maxing right

1658
01:49:24,850 --> 01:49:35,110
it's just zero tests so basically you

1659
01:49:31,750 --> 01:49:36,760
just compute this value this value this

1660
01:49:35,109 --> 01:49:39,960
value this value this value this value

1661
01:49:36,760 --> 01:49:43,329
and then you just do tests against zero

1662
01:49:39,960 --> 01:49:47,430
or those in with a few greater than or

1663
01:49:43,329 --> 01:49:47,430
less than tests and then you're done

1664
01:49:48,619 --> 01:49:53,279
now one of the problems with this I

1665
01:49:51,420 --> 01:50:00,539
suppose is that it doesn't tell you

1666
01:49:53,279 --> 01:50:02,009
where so one problem is from this we'd

1667
01:50:00,539 --> 01:50:03,869
have to figure out whether that gives

1668
01:50:02,010 --> 01:50:10,800
you enough information to determine the

1669
01:50:03,869 --> 01:50:14,880
hit because that may be a reason like to

1670
01:50:10,800 --> 01:50:16,949
prefer one that looks like this because

1671
01:50:14,880 --> 01:50:19,319
one that looks like this would tell us

1672
01:50:16,949 --> 01:50:23,609
where since we know that the team in

1673
01:50:19,319 --> 01:50:27,929
value or the T Max value depending on

1674
01:50:23,609 --> 01:50:34,019
which one if they're greater than zero

1675
01:50:27,930 --> 01:50:36,150
right would tell us nice suppose it's

1676
01:50:34,020 --> 01:50:38,040
always the T million min value because

1677
01:50:36,149 --> 01:50:39,569
if the T min value was less than zero

1678
01:50:38,039 --> 01:50:40,920
the T max value was greater than zero

1679
01:50:39,569 --> 01:50:44,670
that would mean we started inside the

1680
01:50:40,920 --> 01:50:47,970
box and so we would take the other

1681
01:50:44,670 --> 01:50:50,550
branch so it's always the team in in the

1682
01:50:47,970 --> 01:50:53,880
actual case for processing an

1683
01:50:50,550 --> 01:50:57,779
intersection it would always be the T

1684
01:50:53,880 --> 01:51:00,359
min so that should be able to speed us

1685
01:50:57,779 --> 01:51:03,449
up quite a bit beyond just just because

1686
01:51:00,359 --> 01:51:04,859
this is a crap function at this point I

1687
01:51:03,449 --> 01:51:07,649
mean it's not that much stuff in it but

1688
01:51:04,859 --> 01:51:09,750
this loop needs to go and so if we were

1689
01:51:07,649 --> 01:51:11,099
to use a more simplified method of

1690
01:51:09,750 --> 01:51:13,109
checking then we could get rid of this

1691
01:51:11,100 --> 01:51:16,230
and we would be out of this business

1692
01:51:13,109 --> 01:51:17,939
right so I think that's probably what we

1693
01:51:16,229 --> 01:51:19,559
want to do here I guess we'll do that

1694
01:51:17,939 --> 01:51:21,599
tomorrow because we're already over time

1695
01:51:19,560 --> 01:51:23,550
and we'll see if we can't get those

1696
01:51:21,600 --> 01:51:26,760
numbers down and then we can try to

1697
01:51:23,550 --> 01:51:28,409
improve our our spatial Harkey as well

1698
01:51:26,760 --> 01:51:31,579
but at the moment it seems like that

1699
01:51:28,409 --> 01:51:34,680
would be a great thing for us right

1700
01:51:31,579 --> 01:51:37,500
because we can definitely I can

1701
01:51:34,680 --> 01:51:43,079
definitely write it this way I already

1702
01:51:37,500 --> 01:51:44,640
know how to write it this way we're

1703
01:51:43,079 --> 01:51:51,359
gonna have to read more closely because

1704
01:51:44,640 --> 01:51:53,700
you know just looking at this I have no

1705
01:51:51,359 --> 01:51:58,699
idea what that tells us right I just

1706
01:51:53,699 --> 01:52:02,210
have to take his word for it so yeah I

1707
01:51:58,699 --> 01:52:02,210
would have to take

1708
01:52:04,630 --> 01:52:11,539
well it's not his word I guess I would

1709
01:52:07,399 --> 01:52:19,698
have to take Iceman Grosch Muller and

1710
01:52:11,539 --> 01:52:20,988
Magners word for it oh my god so we need

1711
01:52:19,698 --> 01:52:23,118
to have to take a look at this one and

1712
01:52:20,988 --> 01:52:26,419
see and understand what this is actually

1713
01:52:23,118 --> 01:52:29,328
doing it looks like it would potentially

1714
01:52:26,420 --> 01:52:31,789
be faster than what the other one is

1715
01:52:29,328 --> 01:52:35,630
suggesting if you actually get the

1716
01:52:31,789 --> 01:52:37,250
intersection T from it if you don't get

1717
01:52:35,630 --> 01:52:38,420
the intersection T from it then I don't

1718
01:52:37,250 --> 01:52:39,770
know that it's actually that useful

1719
01:52:38,420 --> 01:52:42,130
because we actually need that

1720
01:52:39,770 --> 01:52:42,130
information

1721
01:53:29,159 --> 01:53:38,130
um oops I did not mean to go to the

1722
01:53:35,819 --> 01:53:42,719
bibliography how do I go back I can't

1723
01:53:38,130 --> 01:53:46,159
okay they don't seem to really talk

1724
01:53:42,720 --> 01:53:46,159
about this in here

1725
01:53:58,350 --> 01:54:02,460
so I guess what I would say is this

1726
01:54:00,329 --> 01:54:03,720
sounds less good because they are

1727
01:54:02,460 --> 01:54:06,449
already saying and assuming they

1728
01:54:03,720 --> 01:54:09,119
understand their own routine they're

1729
01:54:06,449 --> 01:54:11,659
essentially saying that they don't have

1730
01:54:09,119 --> 01:54:17,149
the computation necessary to determine

1731
01:54:11,659 --> 01:54:20,340
where the actual intersection occurred

1732
01:54:17,149 --> 01:54:22,500
so it may be that we just want to do a

1733
01:54:20,340 --> 01:54:24,480
tea based test and this is pretty

1734
01:54:22,500 --> 01:54:30,479
straightforward it's just the series of

1735
01:54:24,479 --> 01:54:34,349
plane tests right so we can implement

1736
01:54:30,479 --> 01:54:36,000
this one really simply and it would

1737
01:54:34,350 --> 01:54:37,800
still be an improvement over what we've

1738
01:54:36,000 --> 01:54:42,329
got now and it doesn't look like it's

1739
01:54:37,800 --> 01:54:43,739
quite as good in terms of the minimum

1740
01:54:42,329 --> 01:54:45,569
number of tests to see whether we

1741
01:54:43,739 --> 01:54:49,050
intersect but because we really do need

1742
01:54:45,569 --> 01:54:51,090
to know the T value and you're

1743
01:54:49,050 --> 01:54:54,420
implicitly computing that directly in

1744
01:54:51,090 --> 01:54:58,670
this anyway that just seems like a

1745
01:54:54,420 --> 01:54:58,670
better plan right

1746
01:55:05,099 --> 01:55:10,789
and it's not like it's that much more

1747
01:55:07,590 --> 01:55:10,789
work than the other one

1748
01:55:10,849 --> 01:55:17,250
it looks pretty comparable right this is

1749
01:55:15,210 --> 01:55:20,760
only doing two backsies so you you have

1750
01:55:17,250 --> 01:55:23,399
to add you know third in there and at

1751
01:55:20,760 --> 01:55:29,280
this one this becomes another like this

1752
01:55:23,399 --> 01:55:31,769
comes become stacked right so you're

1753
01:55:29,279 --> 01:55:39,868
gonna do another another round of all of

1754
01:55:31,770 --> 01:55:42,659
this but it still seems pretty

1755
01:55:39,868 --> 01:55:44,189
reasonable and it does the same sort of

1756
01:55:42,658 --> 01:55:49,170
stuff as the other one meaning that it

1757
01:55:44,189 --> 01:55:55,698
does the inverses precomputed which also

1758
01:55:49,170 --> 01:55:55,699
seems like you know pretty reasonable so

1759
01:55:57,408 --> 01:56:00,408
yeah

1760
01:56:14,310 --> 01:56:19,530
I am contempt to write that now because

1761
01:56:16,710 --> 01:56:24,060
the gist gets rid of a lot of this let's

1762
01:56:19,529 --> 01:56:32,309
just see how long it would take so let's

1763
01:56:24,060 --> 01:56:34,820
suppose that we wanted to have this part

1764
01:56:32,310 --> 01:56:34,820
here

1765
01:56:53,609 --> 01:57:02,799
so let's suppose in here we just said

1766
01:56:56,140 --> 01:57:05,550
okay we know we want to do the inverses

1767
01:57:02,800 --> 01:57:12,940
first right because the reason for that

1768
01:57:05,550 --> 01:57:14,739
is is simply that if simply that we want

1769
01:57:12,939 --> 01:57:16,809
to avoid that divide we want to just be

1770
01:57:14,738 --> 01:57:20,679
able to do a multiply if that makes

1771
01:57:16,810 --> 01:57:22,480
sense and all you know we can we can

1772
01:57:20,680 --> 01:57:24,850
check ahead of time to see for the zeros

1773
01:57:22,479 --> 01:57:29,469
and if so we can just make this zero out

1774
01:57:24,850 --> 01:57:31,150
right I think that makes sense so we

1775
01:57:29,470 --> 01:57:32,409
should be okay let's let's take a look

1776
01:57:31,149 --> 01:57:36,029
and they talk about that a little bit

1777
01:57:32,409 --> 01:57:39,720
here right they basically say like okay

1778
01:57:36,029 --> 01:57:42,699
we're component direction is zero the

1779
01:57:39,720 --> 01:57:44,199
there'll be infinite which will make the

1780
01:57:42,699 --> 01:57:47,439
team in the team acts do what we want

1781
01:57:44,199 --> 01:57:54,550
them to do right so in theory we should

1782
01:57:47,439 --> 01:57:56,049
be okay with that and off we go so all

1783
01:57:54,550 --> 01:58:01,600
right so let's suppose we want to do

1784
01:57:56,050 --> 01:58:05,380
that first I need to create one of these

1785
01:58:01,600 --> 01:58:07,030
guys one of our v3 for X's which is

1786
01:58:05,380 --> 01:58:12,579
going to be our inverse ray direction

1787
01:58:07,029 --> 01:58:16,869
and that's just going to be 1.0 divided

1788
01:58:12,579 --> 01:58:19,019
by the actual rate erection we still

1789
01:58:16,869 --> 01:58:22,899
call it r ad for X that was just rady

1790
01:58:19,020 --> 01:58:25,780
yeah right so we want to produce our

1791
01:58:22,899 --> 01:58:28,210
inverse and we can just trust the

1792
01:58:25,779 --> 01:58:30,519
that'll produce an infinite infinity in

1793
01:58:28,210 --> 01:58:32,409
the case that we divide by zero here

1794
01:58:30,520 --> 01:58:35,739
because this is going to happen on the

1795
01:58:32,409 --> 01:58:37,000
Sindhi unit which should have the which

1796
01:58:35,738 --> 01:58:38,500
should have the exceptions turned off

1797
01:58:37,000 --> 01:58:42,359
for divided by zero if it doesn't want

1798
01:58:38,500 --> 01:58:42,359
to deal with that we can test that

1799
01:58:47,899 --> 01:58:52,639
so once we pre-compute that this stuff

1800
01:58:50,779 --> 01:58:54,979
is going to happen essentially the same

1801
01:58:52,640 --> 01:58:57,410
way that it was before we have to

1802
01:58:54,979 --> 01:58:59,839
compute the I mean we have to pull the

1803
01:58:57,409 --> 01:59:04,639
box out of the stack and look at the

1804
01:58:59,840 --> 01:59:06,170
various children that it has and then we

1805
01:59:04,640 --> 01:59:07,579
still need to compute the same stuff we

1806
01:59:06,170 --> 01:59:10,460
need to know whether or not we're going

1807
01:59:07,579 --> 01:59:14,380
to you know descend into the box and so

1808
01:59:10,460 --> 01:59:16,670
on so we're gonna start a pure though

1809
01:59:14,380 --> 01:59:24,020
and you can see what we want to compute

1810
01:59:16,670 --> 01:59:27,050
here is we want to compute the X the we

1811
01:59:24,020 --> 01:59:30,080
want to compute the x and y and z

1812
01:59:27,050 --> 01:59:32,210
intersections for those slabs in T right

1813
01:59:30,079 --> 01:59:34,159
so let's just work that out ourselves

1814
01:59:32,210 --> 01:59:37,579
instead of reading the paper because the

1815
01:59:34,159 --> 01:59:39,859
paper told us what to do so I shouldn't

1816
01:59:37,579 --> 01:59:41,689
say paper the website publication tell

1817
01:59:39,859 --> 01:59:44,000
us what to do but let's make sure we

1818
01:59:41,689 --> 01:59:45,259
could do it for ourselves right because

1819
01:59:44,000 --> 01:59:49,460
it's very simple and we've already done

1820
01:59:45,260 --> 01:59:51,170
this before so if we want to do a pair

1821
01:59:49,460 --> 01:59:53,480
of these two things here so let's

1822
01:59:51,170 --> 01:59:55,550
suppose that we've got our Ray so we've

1823
01:59:53,479 --> 01:59:57,859
already done ray intersecting plane and

1824
01:59:55,550 --> 01:59:59,720
we know that this is a plane right and

1825
01:59:57,859 --> 02:00:02,630
we know what furthermore we know exactly

1826
01:59:59,720 --> 02:00:05,960
what kind of plane it is so let's say

1827
02:00:02,630 --> 02:00:09,380
this is an X plane an X plane is going

1828
02:00:05,960 --> 02:00:11,180
to have a normal which is very

1829
02:00:09,380 --> 02:00:16,250
structured right it's going to have

1830
02:00:11,180 --> 02:00:19,070
negative 1 0 0 as a normal or 1 0 0 as a

1831
02:00:16,250 --> 02:00:25,609
normal so this is negative 1 0 0 and

1832
02:00:19,069 --> 02:00:29,059
this is 1 0 0 so then when we go to

1833
02:00:25,609 --> 02:00:33,019
actually determine the intersection in

1834
02:00:29,060 --> 02:00:35,240
question here all we're really talking

1835
02:00:33,020 --> 02:00:37,850
about is where these things are we know

1836
02:00:35,239 --> 02:00:39,979
that that's the case but we also know

1837
02:00:37,850 --> 02:00:42,950
that there's a specific location where

1838
02:00:39,979 --> 02:00:47,809
these are as well right and we have to

1839
02:00:42,949 --> 02:00:49,399
deal with that problem too ok so we have

1840
02:00:47,810 --> 02:00:52,250
a ray origin and we have our ray

1841
02:00:49,399 --> 02:00:53,839
direction and we know that what we're

1842
02:00:52,250 --> 02:00:56,479
talking about here for an equation is we

1843
02:00:53,840 --> 02:00:58,050
have a ray origin plus T times the

1844
02:00:56,479 --> 02:01:01,319
Radian

1845
02:00:58,050 --> 02:01:06,119
and what we want to know is when will

1846
02:01:01,319 --> 02:01:10,498
this end up producing a zero value for

1847
02:01:06,118 --> 02:01:15,328
this plane right so we want to know if

1848
02:01:10,498 --> 02:01:17,760
this value right here is our new point

1849
02:01:15,328 --> 02:01:21,929
that we're talking about we want to know

1850
02:01:17,760 --> 02:01:24,590
when we could dot it with this normal

1851
02:01:21,929 --> 02:01:24,590
right

1852
02:01:24,748 --> 02:01:30,929
and produce zero that would only be true

1853
02:01:28,859 --> 02:01:33,328
if was on the zero itself so we really

1854
02:01:30,929 --> 02:01:34,889
also want a displacement there so we

1855
02:01:33,328 --> 02:01:36,658
want to know we want to know a

1856
02:01:34,889 --> 02:01:41,940
particular value here which is the

1857
02:01:36,658 --> 02:01:43,558
location of the plane right so I don't

1858
02:01:41,939 --> 02:01:45,569
know what we want to call that value but

1859
02:01:43,559 --> 02:01:47,309
that's our constant right so we're

1860
02:01:45,569 --> 02:01:49,049
really talking about this we're saying

1861
02:01:47,309 --> 02:01:51,288
that it you know if we add a constant to

1862
02:01:49,050 --> 02:01:53,400
this thing then we're going to get zero

1863
02:01:51,288 --> 02:01:56,130
we want to know where that's going to be

1864
02:01:53,399 --> 02:01:58,589
true and if you look at what this ends

1865
02:01:56,130 --> 02:02:01,498
up being when you write it out you're

1866
02:01:58,590 --> 02:02:03,779
going to get C plus the normal being

1867
02:02:01,498 --> 02:02:05,158
negative one zero zero right this dot

1868
02:02:03,779 --> 02:02:07,800
product is going to be a pretty

1869
02:02:05,158 --> 02:02:10,078
straightforward dot product it's going

1870
02:02:07,800 --> 02:02:12,510
to get rid of because remember a dot

1871
02:02:10,078 --> 02:02:14,368
product is going to be you know NX we'll

1872
02:02:12,510 --> 02:02:16,440
call this little thing right here

1873
02:02:14,368 --> 02:02:20,460
we'll just call this whole thing capital

1874
02:02:16,439 --> 02:02:26,969
R so it's going to be our X plus and yr

1875
02:02:20,460 --> 02:02:28,198
y plus and Z or Z right right now and

1876
02:02:26,969 --> 02:02:29,908
that dot product in there but rather

1877
02:02:28,198 --> 02:02:31,618
than having to deal with that we just

1878
02:02:29,908 --> 02:02:34,049
look at the fact that it's an a a being

1879
02:02:31,618 --> 02:02:36,768
we say well these are gone right because

1880
02:02:34,050 --> 02:02:38,760
the only thing in here is that X

1881
02:02:36,769 --> 02:02:41,998
component and it's either negative or

1882
02:02:38,760 --> 02:02:44,639
positive one so the only things that

1883
02:02:41,998 --> 02:02:46,469
change are the C and whether this is

1884
02:02:44,639 --> 02:02:50,309
negative or positive one so really what

1885
02:02:46,469 --> 02:02:56,300
we're looking at is a C plus NX times

1886
02:02:50,309 --> 02:03:00,179
this here right our 0x plus T our DX

1887
02:02:56,300 --> 02:03:03,269
right that's all we're talking about

1888
02:03:00,179 --> 02:03:05,908
equals zero and that's the entirety of

1889
02:03:03,269 --> 02:03:09,570
what we need to compute for that now

1890
02:03:05,908 --> 02:03:11,489
furthermore you know when we solve this

1891
02:03:09,569 --> 02:03:13,439
the NX only changes between

1892
02:03:11,489 --> 02:03:16,139
negative and positive one as well so

1893
02:03:13,439 --> 02:03:25,349
that's even simpler so we we end up with

1894
02:03:16,140 --> 02:03:28,500
a c NX r 0x + t + XR DX equals 0 and if

1895
02:03:25,350 --> 02:03:30,780
we factor for T here we would just get n

1896
02:03:28,500 --> 02:03:33,289
we move this to their side negative C

1897
02:03:30,779 --> 02:03:36,569
negative NX r 0x

1898
02:03:33,289 --> 02:03:43,560
/ this term here which divides through

1899
02:03:36,569 --> 02:03:46,489
right NX r DX right now what an

1900
02:03:43,560 --> 02:03:57,740
interesting things here is in this case

1901
02:03:46,489 --> 02:04:01,590
we also kind of know I'm tempted right

1902
02:03:57,739 --> 02:04:03,479
to just say well you know I I would

1903
02:04:01,590 --> 02:04:06,989
probably left to my own devices maybe

1904
02:04:03,479 --> 02:04:09,329
even say let's multiply this by NX / NX

1905
02:04:06,989 --> 02:04:14,429
right we know this is positive or

1906
02:04:09,329 --> 02:04:23,000
negative 1 so if we did that we would

1907
02:04:14,430 --> 02:04:26,940
end up with negative n XC minus r0 x

1908
02:04:23,000 --> 02:04:31,470
over our DX I think the reason for that

1909
02:04:26,939 --> 02:04:32,969
is so these become squared and since we

1910
02:04:31,470 --> 02:04:35,510
know this is either positive 1 or

1911
02:04:32,970 --> 02:04:39,480
negative 1 if we square it we just get 1

1912
02:04:35,510 --> 02:04:42,869
so I think this is really all we need to

1913
02:04:39,479 --> 02:04:50,849
do would be my guess I think it would

1914
02:04:42,869 --> 02:04:57,329
just be negative n XC minus r0 x / r DX

1915
02:04:50,850 --> 02:05:01,380
i think so

1916
02:04:57,329 --> 02:05:03,619
this value you can pre-compute for the

1917
02:05:01,380 --> 02:05:03,619
box

1918
02:05:07,180 --> 02:05:12,270
and the other two values are just the

1919
02:05:09,399 --> 02:05:12,269
Ray origin in the right direction

1920
02:05:21,199 --> 02:05:30,170
I mean that's what it looks like to me

1921
02:05:27,079 --> 02:05:32,470
anyway so it looks like you would just

1922
02:05:30,170 --> 02:05:32,470
have

1923
02:05:39,479 --> 02:05:44,069
yeah and that looks like exactly what

1924
02:05:41,889 --> 02:05:44,069
they do

1925
02:06:00,128 --> 02:06:05,260
now what I'm not sure about there is why

1926
02:06:02,050 --> 02:06:08,309
the sign is the same for the TX 1 and

1927
02:06:05,260 --> 02:06:08,309
the TX 2

1928
02:06:15,220 --> 02:06:23,350
I guess because you don't care so I

1929
02:06:21,880 --> 02:06:26,770
suppose that's another way of looking at

1930
02:06:23,350 --> 02:06:28,950
this right I guess you could say you

1931
02:06:26,770 --> 02:06:32,610
don't care which way the normals facing

1932
02:06:28,949 --> 02:06:35,409
so why bother doing that part that I did

1933
02:06:32,609 --> 02:06:37,210
why bother saying that like why not just

1934
02:06:35,409 --> 02:06:42,069
say they both point that direction

1935
02:06:37,210 --> 02:06:44,109
cuz who cares right and that does seem

1936
02:06:42,069 --> 02:06:45,819
pretty smart because then are actually

1937
02:06:44,109 --> 02:06:48,909
just both point that directions so it's

1938
02:06:45,819 --> 02:06:52,929
just both ones so then really you don't

1939
02:06:48,909 --> 02:06:58,269
need that value at all you really don't

1940
02:06:52,930 --> 02:07:00,760
need that part at all so that seems even

1941
02:06:58,270 --> 02:07:02,140
smarter I did the squared thing but

1942
02:07:00,760 --> 02:07:08,289
that's it looks like the other way is

1943
02:07:02,140 --> 02:07:11,230
even better right so if we did do it

1944
02:07:08,289 --> 02:07:13,689
that way so if we did say okay what we

1945
02:07:11,229 --> 02:07:18,989
want to do here is we want to do you

1946
02:07:13,689 --> 02:07:23,049
know the C value plus normal transpose

1947
02:07:18,989 --> 02:07:26,079
rate origin plus T rate Direction equals

1948
02:07:23,050 --> 02:07:29,079
zero if we know that this is literally

1949
02:07:26,079 --> 02:07:33,760
always just one zero zero no matter

1950
02:07:29,079 --> 02:07:35,380
which one we're doing right then what we

1951
02:07:33,760 --> 02:07:36,970
can do is just say well okay if they're

1952
02:07:35,380 --> 02:07:39,039
always pointing in that direction then

1953
02:07:36,970 --> 02:07:44,230
when we hit the plane all we really need

1954
02:07:39,039 --> 02:07:45,699
to know is that we've got C + bar zero X

1955
02:07:44,229 --> 02:07:49,599
because again we're just picking out the

1956
02:07:45,699 --> 02:07:52,899
X component now plus T times our DX

1957
02:07:49,600 --> 02:07:57,340
right equals zero and then we just need

1958
02:07:52,899 --> 02:08:03,039
to solve for T so T equals negative C

1959
02:07:57,340 --> 02:08:05,529
negative R zero x over our DX and in

1960
02:08:03,039 --> 02:08:10,649
this case if we wanted to simplify from

1961
02:08:05,529 --> 02:08:17,590
the two minuses we could multiply it and

1962
02:08:10,649 --> 02:08:21,089
say C + R zero x over negative r DX like

1963
02:08:17,590 --> 02:08:21,090
so right

1964
02:08:22,420 --> 02:08:27,310
so the other thing we could do is just

1965
02:08:25,119 --> 02:08:28,899
store see negated and that actually

1966
02:08:27,310 --> 02:08:30,520
makes a lot of sense too because if we

1967
02:08:28,899 --> 02:08:32,229
assume that these were actually the min

1968
02:08:30,520 --> 02:08:34,180
and the max values they would appear on

1969
02:08:32,229 --> 02:08:43,359
this side right so we would actually

1970
02:08:34,180 --> 02:08:46,450
have this let's say right or constant

1971
02:08:43,359 --> 02:08:53,500
and at that point again even easier our

1972
02:08:46,449 --> 02:08:57,809
0x plus t rd x equals c and then when

1973
02:08:53,500 --> 02:09:06,279
you saw if you get T equals C minus r0 x

1974
02:08:57,810 --> 02:09:08,380
over R DX so yeah I mean that's pretty

1975
02:09:06,279 --> 02:09:10,479
great and pretty straightforward and

1976
02:09:08,380 --> 02:09:18,190
then C is just the minimum than the max

1977
02:09:10,479 --> 02:09:23,409
on the x axis I love it I'm a fan yes

1978
02:09:18,189 --> 02:09:26,139
good so I feel like we understand that

1979
02:09:23,409 --> 02:09:28,420
pretty well it's really simple it

1980
02:09:26,140 --> 02:09:29,170
matches what they've got there and it

1981
02:09:28,420 --> 02:09:32,199
makes perfect sense

1982
02:09:29,170 --> 02:09:35,199
right so I feel like that's pretty easy

1983
02:09:32,199 --> 02:09:36,880
to do all we have to do is for our boxes

1984
02:09:35,199 --> 02:09:39,220
we need to produce the actual mins and

1985
02:09:36,880 --> 02:09:40,989
maxes now unfortunately we are not

1986
02:09:39,220 --> 02:09:42,340
storing in a min max form so we may want

1987
02:09:40,989 --> 02:09:43,389
to change the story to MU next more now

1988
02:09:42,340 --> 02:09:45,220
that we know that that's will be

1989
02:09:43,390 --> 02:09:48,340
intersecting against but it's pretty

1990
02:09:45,220 --> 02:09:52,869
easy to produce min max temporarily with

1991
02:09:48,340 --> 02:09:55,300
just one op so you know we can play with

1992
02:09:52,869 --> 02:09:58,210
whether we want to get rid of this act

1993
02:09:55,300 --> 02:10:01,090
these two extraneous operations here but

1994
02:09:58,210 --> 02:10:03,850
in the meantime it's just plus the

1995
02:10:01,090 --> 02:10:06,390
radius and minus the radius right so

1996
02:10:03,850 --> 02:10:06,390
we've got the

1997
02:10:12,810 --> 02:10:17,020
we can get the Box mint-in-box max

1998
02:10:15,069 --> 02:10:21,309
really easily it's just it's unclear we

1999
02:10:17,020 --> 02:10:26,730
may want to we may want to get rid of

2000
02:10:21,310 --> 02:10:29,770
that by storing them in min max form

2001
02:10:26,729 --> 02:10:31,779
that's all we'll see if that could be

2002
02:10:29,770 --> 02:10:33,510
costly or it could be trivial probably

2003
02:10:31,779 --> 02:10:37,029
is trivial so we probably want to do it

2004
02:10:33,510 --> 02:10:38,710
so once we have the Box min max then we

2005
02:10:37,029 --> 02:10:41,079
can just do the exact intersection

2006
02:10:38,710 --> 02:10:46,180
testing on it so again we know what it

2007
02:10:41,079 --> 02:10:47,380
is here it's just the min well we'll go

2008
02:10:46,180 --> 02:10:49,360
ahead and do it and we do it for it we

2009
02:10:47,380 --> 02:10:53,380
can do it for all axes at the same time

2010
02:10:49,359 --> 02:10:55,509
I believe it's I don't don't think

2011
02:10:53,380 --> 02:10:57,850
there's any problem with that so what we

2012
02:10:55,510 --> 02:11:02,980
would want to do here is an F through

2013
02:10:57,850 --> 02:11:06,010
two for X which is our T value for the

2014
02:11:02,979 --> 02:11:10,509
Box min and then our T value for the Box

2015
02:11:06,010 --> 02:11:16,180
Max and it's just going to be that so

2016
02:11:10,510 --> 02:11:21,070
we've got our box min - are our Ray

2017
02:11:16,180 --> 02:11:27,850
origin right that's our Ray origin and

2018
02:11:21,069 --> 02:11:30,599
then we want to do the divide by the by

2019
02:11:27,850 --> 02:11:30,600
the rate erection

2020
02:11:35,270 --> 02:11:40,700
and that would actually produce and I

2021
02:11:37,189 --> 02:11:43,279
guess this is still a v3 right that

2022
02:11:40,699 --> 02:11:47,960
actually produces the XY and Z box mins

2023
02:11:43,279 --> 02:11:49,279
all at once because remember we can just

2024
02:11:47,960 --> 02:11:52,550
do them that way there's no real reason

2025
02:11:49,279 --> 02:11:53,840
not to it's not any faster it's still

2026
02:11:52,550 --> 02:11:55,460
doing all of them it's just we've got a

2027
02:11:53,840 --> 02:11:58,880
utility class that does three at a time

2028
02:11:55,460 --> 02:12:01,970
right so so this would produce all of

2029
02:11:58,880 --> 02:12:05,359
them and then our question is just

2030
02:12:01,970 --> 02:12:07,190
processing those right so now we need to

2031
02:12:05,359 --> 02:12:11,949
do is we need to take our team in and

2032
02:12:07,189 --> 02:12:11,949
Tmax and actually produce a single one

2033
02:12:14,260 --> 02:12:19,909
from that right now this parts a little

2034
02:12:18,289 --> 02:12:21,859
bit squirrely here so we now need to

2035
02:12:19,909 --> 02:12:23,779
think about how we're gonna do this so

2036
02:12:21,859 --> 02:12:26,229
first of all we have our x-men in our

2037
02:12:23,779 --> 02:12:26,229
xmax

2038
02:12:26,619 --> 02:12:32,000
which is you know the bounds for the X

2039
02:12:29,810 --> 02:12:33,950
so we need to like shrink down shrink

2040
02:12:32,000 --> 02:12:36,260
down shrink down I think is the way we

2041
02:12:33,949 --> 02:12:38,210
want to do it I'd have to think it

2042
02:12:36,260 --> 02:12:43,250
through but you know it would be

2043
02:12:38,210 --> 02:12:48,020
something like okay you know the f32

2044
02:12:43,250 --> 02:12:49,670
forex team in here we need to take a

2045
02:12:48,020 --> 02:12:53,110
minimum of

2046
02:12:49,670 --> 02:12:53,109
tbox min X

2047
02:13:00,939 --> 02:13:06,769
well let's think about this for a second

2048
02:13:03,139 --> 02:13:19,039
actually let's go back to our little

2049
02:13:06,770 --> 02:13:23,420
drawing here so once I produced my

2050
02:13:19,039 --> 02:13:28,069
intersection I have a minimum and a

2051
02:13:23,420 --> 02:13:30,380
maximum value but really I don't know

2052
02:13:28,069 --> 02:13:32,299
which those are right because I don't

2053
02:13:30,380 --> 02:13:36,109
know if the Ray was pointing backwards

2054
02:13:32,300 --> 02:13:40,130
or pointing forwards in reference to the

2055
02:13:36,109 --> 02:13:43,250
mins and maxes so this is my box min and

2056
02:13:40,130 --> 02:13:46,130
my box max but the teaming and t max

2057
02:13:43,250 --> 02:13:50,439
might go in either order so if we were

2058
02:13:46,130 --> 02:13:52,609
to do it sorry if we were to do it fully

2059
02:13:50,439 --> 02:13:53,839
sequentially and we can probably opt by

2060
02:13:52,609 --> 02:13:55,579
this and we'll look I'm sure they've

2061
02:13:53,840 --> 02:13:57,829
done that so we can go look with a

2062
02:13:55,579 --> 02:14:00,769
device want us to go through it once

2063
02:13:57,829 --> 02:14:02,960
first to make sure we understand it

2064
02:14:00,770 --> 02:14:05,560
right I never like to implant something

2065
02:14:02,960 --> 02:14:05,560
I don't understand

2066
02:14:07,329 --> 02:14:11,738
some maybe random number generators

2067
02:14:09,939 --> 02:14:13,789
anyway

2068
02:14:11,738 --> 02:14:15,529
so if we take a look at what happens

2069
02:14:13,789 --> 02:14:17,658
here right what we would need to do

2070
02:14:15,529 --> 02:14:22,039
first is figure out which was the min

2071
02:14:17,658 --> 02:14:24,649
and which was the max right so to start

2072
02:14:22,039 --> 02:14:26,260
off with we might say okay the t-box min

2073
02:14:24,649 --> 02:14:31,039
X and the tea box

2074
02:14:26,260 --> 02:14:32,989
max X we actually need to take the

2075
02:14:31,039 --> 02:14:36,100
minimum of those two to figure out which

2076
02:14:32,988 --> 02:14:36,099
one we actually have

2077
02:14:40,189 --> 02:14:48,138
so that would tell us right which the

2078
02:14:43,500 --> 02:14:51,000
minimum is in which the maximum is there

2079
02:14:48,139 --> 02:14:54,600
and we probably just need to do that the

2080
02:14:51,000 --> 02:14:57,569
whole way round right so now we would

2081
02:14:54,600 --> 02:14:59,940
have a team in in a team ax value that

2082
02:14:57,569 --> 02:15:01,019
would actually be proper for each of

2083
02:14:59,939 --> 02:15:02,219
them it would actually be the balance

2084
02:15:01,020 --> 02:15:05,190
for each of them and then we could

2085
02:15:02,219 --> 02:15:07,560
successively narrow right so then we

2086
02:15:05,189 --> 02:15:10,799
could say like okay then we've got an f3

2087
02:15:07,560 --> 02:15:27,090
2 for X and maybe this is like something

2088
02:15:10,800 --> 02:15:30,869
like that and then we could say for each

2089
02:15:27,090 --> 02:15:33,300
of the axes we will successively narrow

2090
02:15:30,869 --> 02:15:39,809
so we would say okay whatever the team

2091
02:15:33,300 --> 02:15:43,710
in 3 is I need to take the minimum well

2092
02:15:39,810 --> 02:15:45,210
okay so I now know from each of these

2093
02:15:43,710 --> 02:15:47,279
what our minimum and Max was each to

2094
02:15:45,210 --> 02:15:51,480
mention we then need to push them the

2095
02:15:47,279 --> 02:15:53,460
opposite direction right so previously

2096
02:15:51,479 --> 02:15:56,218
what we were doing is saying let's take

2097
02:15:53,460 --> 02:15:59,429
the min and max so that we sort which

2098
02:15:56,219 --> 02:16:01,920
ones we have here right so that we know

2099
02:15:59,429 --> 02:16:03,600
that they go in order and then what we

2100
02:16:01,920 --> 02:16:06,480
need to do is we actually need to push

2101
02:16:03,600 --> 02:16:08,630
them as far in as possible so if pre you

2102
02:16:06,479 --> 02:16:14,488
know if these are our intersections

2103
02:16:08,630 --> 02:16:16,050
along the Ray then these are our two

2104
02:16:14,488 --> 02:16:18,689
maxes these are our 2 mins

2105
02:16:16,050 --> 02:16:21,600
these are our two maxes right we need to

2106
02:16:18,689 --> 02:16:29,638
take the maximum minimum to get this and

2107
02:16:21,600 --> 02:16:32,880
the minimum maximum to get that right so

2108
02:16:29,639 --> 02:16:39,030
here we actually need to take Max's of

2109
02:16:32,879 --> 02:16:41,129
the mins as weird as that sounds and

2110
02:16:39,030 --> 02:16:44,149
here we would need to take minimums of

2111
02:16:41,129 --> 02:16:44,148
the maximums

2112
02:16:49,659 --> 02:17:02,600
and that way we now would know what our

2113
02:16:53,600 --> 02:17:07,489
actual bracket was so now what we would

2114
02:17:02,600 --> 02:17:10,639
say I think is our t max value should

2115
02:17:07,489 --> 02:17:16,218
tell us whether we're whether this box

2116
02:17:10,638 --> 02:17:28,699
is rejectable right so I should then be

2117
02:17:16,218 --> 02:17:37,069
able to say if any if any are true so

2118
02:17:28,700 --> 02:17:47,750
let me go ahead and do the test here so

2119
02:17:37,069 --> 02:17:50,059
we sexually have after 2 0 F 32 for X so

2120
02:17:47,750 --> 02:17:53,090
if our T max is greater than zero we

2121
02:17:50,059 --> 02:17:55,159
know that the box isn't entirely behind

2122
02:17:53,090 --> 02:17:57,799
the red now we may be starting out

2123
02:17:55,159 --> 02:18:00,379
inside of it so that we need to know but

2124
02:17:57,799 --> 02:18:01,369
we're not in it's not entirely behind us

2125
02:18:00,379 --> 02:18:04,609
and that's important

2126
02:18:01,370 --> 02:18:07,100
so if anything's true in max paths then

2127
02:18:04,610 --> 02:18:09,980
we know we actually can process this ray

2128
02:18:07,100 --> 02:18:12,260
this box if not then we don't care about

2129
02:18:09,979 --> 02:18:14,239
it at all because we can't it literally

2130
02:18:12,260 --> 02:18:21,790
can't be hit by us it's behind us we

2131
02:18:14,239 --> 02:18:27,170
can't see it from this Ray ok so then

2132
02:18:21,790 --> 02:18:29,270
this actually needs to put B up above

2133
02:18:27,170 --> 02:18:31,579
probably to be honest with you so this

2134
02:18:29,270 --> 02:18:33,110
probably needs to get that pushed up

2135
02:18:31,579 --> 02:18:42,020
here too actually if we're going to try

2136
02:18:33,110 --> 02:18:45,110
and count that statistic properly so if

2137
02:18:42,020 --> 02:18:48,440
we go ahead and take a look at at this

2138
02:18:45,110 --> 02:18:50,150
any true here then what we can do is we

2139
02:18:48,440 --> 02:18:53,030
can figure out whether we're in the box

2140
02:18:50,149 --> 02:18:57,049
by now computing whether the min passes

2141
02:18:53,030 --> 02:18:58,670
right so if the min passes that's if

2142
02:18:57,049 --> 02:18:59,718
mean is out in front as well if I mean

2143
02:18:58,670 --> 02:19:00,679
there's also inference that means we

2144
02:18:59,718 --> 02:19:03,500
actually hit the

2145
02:19:00,679 --> 02:19:05,329
if means behind us but max was in front

2146
02:19:03,500 --> 02:19:08,569
of us then we're actually inside the box

2147
02:19:05,329 --> 02:19:17,870
and then we need would need to descend

2148
02:19:08,569 --> 02:19:21,260
into it for child testing right so yeah

2149
02:19:17,870 --> 02:19:23,179
so if any is true in the max pass or I

2150
02:19:21,260 --> 02:19:26,179
guess and in the min pass we don't

2151
02:19:23,179 --> 02:19:28,010
because if we know that max passed and a

2152
02:19:26,179 --> 02:19:29,750
min passed then we know that the min and

2153
02:19:28,010 --> 02:19:32,329
the max both passed on that one it would

2154
02:19:29,750 --> 02:19:34,968
not be possible for the T max to have

2155
02:19:32,329 --> 02:19:37,549
passed on a different Lane than the min

2156
02:19:34,968 --> 02:19:39,049
pass min pass has to pass at least on

2157
02:19:37,549 --> 02:19:43,429
the same rate the lane as the max pass

2158
02:19:39,049 --> 02:19:48,520
if any do right so once we're we know

2159
02:19:43,429 --> 02:19:51,771
that is in box is just if any are true

2160
02:19:48,521 --> 02:19:58,420
if the child so let me get rid of this

2161
02:19:51,771 --> 02:20:05,811
here right so once we know min pass if

2162
02:19:58,420 --> 02:20:08,060
any true in min pass then we know we're

2163
02:20:05,810 --> 02:20:10,729
in then we know we're in the box right

2164
02:20:08,060 --> 02:20:16,579
and so we can actually just do that in

2165
02:20:10,729 --> 02:20:20,600
here otherwise we got to do the rest of

2166
02:20:16,579 --> 02:20:22,370
the work right so I'm pretty sure that's

2167
02:20:20,601 --> 02:20:24,771
right so we just test to see if any of

2168
02:20:22,370 --> 02:20:27,290
the Max passes are true or then we need

2169
02:20:24,771 --> 02:20:29,300
to look at this box if any of the min

2170
02:20:27,290 --> 02:20:37,120
passes are true as well then we are

2171
02:20:29,299 --> 02:20:37,119
inside I'm sorry I have that backwards

2172
02:20:37,959 --> 02:20:44,119
we need to know the IaaS so I've got

2173
02:20:41,000 --> 02:20:49,819
that I've got that backwards sorry it's

2174
02:20:44,120 --> 02:20:53,360
not min pass its min fail basically and

2175
02:20:49,819 --> 02:20:55,510
we do need to check to see if they're

2176
02:20:53,360 --> 02:20:55,510
the same

2177
02:21:06,379 --> 02:21:15,009
yeah I take it back I take it back

2178
02:21:11,719 --> 02:21:15,010
so we do need to do

2179
02:21:16,090 --> 02:21:24,020
oops we do need to do this check and

2180
02:21:22,158 --> 02:21:25,789
really I guess the we don't even really

2181
02:21:24,020 --> 02:21:35,390
need to produce quite this so we just do

2182
02:21:25,790 --> 02:21:40,369
max pass and I think that's really all

2183
02:21:35,389 --> 02:21:45,198
we need to do here so we basically say

2184
02:21:40,369 --> 02:21:48,710
okay if the max pass is on the same Lane

2185
02:21:45,199 --> 02:21:50,960
as something that was also the teaming

2186
02:21:48,709 --> 02:21:52,818
was less than zero then we started out

2187
02:21:50,959 --> 02:22:00,648
inside the box and we have to consider

2188
02:21:52,818 --> 02:22:03,408
the box if we can write for starting out

2189
02:22:00,648 --> 02:22:04,778
inside a box that's a that's a leaf box

2190
02:22:03,408 --> 02:22:06,469
I don't think we do anything about that

2191
02:22:04,779 --> 02:22:08,090
specifically that's kind of just an

2192
02:22:06,469 --> 02:22:09,559
error to cast from inside the leaf box

2193
02:22:08,090 --> 02:22:11,630
but you know I guess we'll have to deal

2194
02:22:09,559 --> 02:22:14,539
with that a little bit separately but

2195
02:22:11,629 --> 02:22:16,129
anyway if we take a look in here at the

2196
02:22:14,540 --> 02:22:18,380
rest of this stuff so this stuff all

2197
02:22:16,129 --> 02:22:19,789
goes away now and hopefully that's why

2198
02:22:18,379 --> 02:22:22,728
we're hoping for a speed improvement

2199
02:22:19,790 --> 02:22:25,220
using this technique obviously what we

2200
02:22:22,728 --> 02:22:26,898
want to do here is now skip right down

2201
02:22:25,219 --> 02:22:28,429
to this part which we should be able to

2202
02:22:26,898 --> 02:22:34,158
work out just from the key values that

2203
02:22:28,430 --> 02:22:35,720
we actually already have right so what

2204
02:22:34,158 --> 02:22:39,079
we should be able to do now is we should

2205
02:22:35,719 --> 02:22:42,978
be able to say okay the T value that we

2206
02:22:39,079 --> 02:22:45,500
care about is updating is out here

2207
02:22:42,978 --> 02:22:48,170
somewhere this right here so this tier a

2208
02:22:45,500 --> 02:22:51,829
value that's what we actually need to

2209
02:22:48,170 --> 02:22:53,238
update correctly and so you can see us

2210
02:22:51,829 --> 02:22:55,398
doing the Select on it here so we have

2211
02:22:53,238 --> 02:22:57,439
to produce whatever the t hid value is

2212
02:22:55,398 --> 02:22:59,930
and it's gonna be T min basically for

2213
02:22:57,439 --> 02:23:01,309
anyone who actually hits so what we have

2214
02:22:59,930 --> 02:23:03,619
to do here is just figure out who

2215
02:23:01,309 --> 02:23:05,448
actually does hit and since we've

2216
02:23:03,619 --> 02:23:08,720
already produced the team in all we

2217
02:23:05,449 --> 02:23:13,729
really have to do is know which ones

2218
02:23:08,719 --> 02:23:16,818
aren't flipped right so really all we

2219
02:23:13,728 --> 02:23:18,559
have to do here because here we've

2220
02:23:16,818 --> 02:23:19,340
checked greater than zero and less than

2221
02:23:18,559 --> 02:23:23,350
zero right

2222
02:23:19,340 --> 02:23:26,510
here we have to check T valid

2223
02:23:23,350 --> 02:23:33,079
essentially and what that would be is if

2224
02:23:26,510 --> 02:23:35,180
the T min is less than the T Max if the

2225
02:23:33,079 --> 02:23:38,148
team in isn't less than the T max that

2226
02:23:35,180 --> 02:23:41,450
means that we didn't hit that lane right

2227
02:23:38,148 --> 02:23:43,719
so T valid is our Max for who hit and T

2228
02:23:41,450 --> 02:23:46,729
is our actual value that we care about

2229
02:23:43,719 --> 02:23:49,129
so we need to know that the T is valid

2230
02:23:46,728 --> 02:23:54,909
and then what we need to know is what

2231
02:23:49,129 --> 02:23:57,349
the actual tear a is and to do that we

2232
02:23:54,909 --> 02:24:00,379
well I guess that's just the team in

2233
02:23:57,350 --> 02:24:03,559
right so the mask value that we're going

2234
02:24:00,379 --> 02:24:10,459
to pick here again is just that T valid

2235
02:24:03,559 --> 02:24:13,489
oh no it's not and they've got to be

2236
02:24:10,459 --> 02:24:15,228
closer so the other thing we have to do

2237
02:24:13,489 --> 02:24:18,139
here to produce our masked value is say

2238
02:24:15,228 --> 02:24:20,389
we need the T to be valid and we need

2239
02:24:18,139 --> 02:24:23,599
the team in to be less than the one we

2240
02:24:20,389 --> 02:24:29,989
already had so if it's not a closer hit

2241
02:24:23,600 --> 02:24:32,659
we need to throw it out right close

2242
02:24:29,989 --> 02:24:35,109
enough is presumably got to be

2243
02:24:32,659 --> 02:24:43,309
calculated the same way which is this

2244
02:24:35,109 --> 02:24:47,540
and we can change this to be close

2245
02:24:43,309 --> 02:24:54,409
enough so and just pull that out so that

2246
02:24:47,540 --> 02:25:02,120
both sides will use the same value and

2247
02:24:54,409 --> 02:25:03,859
that can be tested the same way right

2248
02:25:02,120 --> 02:25:05,840
so that'll figure that out and that will

2249
02:25:03,859 --> 02:25:09,380
decide whether or not we have to descend

2250
02:25:05,840 --> 02:25:11,840
or not now we can in theory collapse

2251
02:25:09,379 --> 02:25:13,369
these two a little bit so since these

2252
02:25:11,840 --> 02:25:15,020
are pretty simple checks we could do

2253
02:25:13,370 --> 02:25:19,280
something like say look let's just do

2254
02:25:15,020 --> 02:25:21,370
these like this and then we could say

2255
02:25:19,280 --> 02:25:23,780
like look if it has a child count and

2256
02:25:21,370 --> 02:25:26,919
either of these two things are true

2257
02:25:23,780 --> 02:25:26,918
[Music]

2258
02:25:29,699 --> 02:25:40,408
then we need to make that scalar

2259
02:25:31,469 --> 02:25:41,969
decision otherwise then we can go ahead

2260
02:25:40,408 --> 02:25:54,988
and look to see if we need to deal with

2261
02:25:41,969 --> 02:25:57,929
this branch right uh so yeah I think

2262
02:25:54,988 --> 02:26:01,228
that's roughly what we need and again

2263
02:25:57,930 --> 02:26:03,540
this divide can be changed to a x pre

2264
02:26:01,228 --> 02:26:12,299
inverting the Ray which we can you know

2265
02:26:03,540 --> 02:26:22,109
let's make a note of and let's go from

2266
02:26:12,299 --> 02:26:31,219
there remember what we specify for this

2267
02:26:22,109 --> 02:26:31,220
to load you don't need that yet

2268
02:26:36,379 --> 02:26:41,399
we got to do something about the fact

2269
02:26:38,459 --> 02:26:44,179
that we don't do a Hadamard product like

2270
02:26:41,399 --> 02:26:44,180
that yet

2271
02:26:44,930 --> 02:26:51,239
see what else we got here though and we

2272
02:26:49,290 --> 02:26:58,050
don't have min max so we've got to add

2273
02:26:51,239 --> 02:27:06,659
those is that it oh right I meant

2274
02:26:58,049 --> 02:27:09,119
regular ant it's confusing because these

2275
02:27:06,659 --> 02:27:10,590
are scalar so they have to be and the

2276
02:27:09,120 --> 02:27:26,600
regular kind well they don't have to be

2277
02:27:10,590 --> 02:27:26,600
I suppose this is there was that

2278
02:27:28,459 --> 02:27:34,969
all right so yeah so now we kind of have

2279
02:27:32,899 --> 02:27:38,770
some issues to address here and this I

2280
02:27:34,969 --> 02:27:48,769
guess will be a little bit more

2281
02:27:38,770 --> 02:27:50,960
troublesome here so the problem is we

2282
02:27:48,770 --> 02:27:55,640
have to be able to return which of these

2283
02:27:50,959 --> 02:27:58,250
we were actually dealing with which side

2284
02:27:55,639 --> 02:28:00,260
of the box we hit because right we need

2285
02:27:58,250 --> 02:28:03,079
to know how to use the color information

2286
02:28:00,260 --> 02:28:05,690
that comes back and that's actually

2287
02:28:03,079 --> 02:28:08,870
pretty tough to determine because that

2288
02:28:05,690 --> 02:28:11,239
information got lost in here because we

2289
02:28:08,870 --> 02:28:14,479
don't know which min value we actually

2290
02:28:11,239 --> 02:28:16,579
used right we have them all but we don't

2291
02:28:14,478 --> 02:28:19,219
know whether we used the X the Y or the

2292
02:28:16,579 --> 02:28:24,110
Z and we don't know which one of those

2293
02:28:19,219 --> 02:28:31,639
it was so really trying to back out that

2294
02:28:24,110 --> 02:28:32,810
information is pretty tough to tell so

2295
02:28:31,639 --> 02:28:37,489
that's going to be a pretty big

2296
02:28:32,809 --> 02:28:39,789
challenge actually yeah

2297
02:28:37,489 --> 02:28:39,789
Lake

2298
02:28:47,530 --> 02:28:54,820
I mean the only way we can really do it

2299
02:28:52,271 --> 02:28:58,920
I think is seeing where the value we

2300
02:28:54,819 --> 02:28:58,920
ended up with actually came from

2301
02:29:08,170 --> 02:29:13,158
I'm not sure how else to do it right

2302
02:29:11,119 --> 02:29:15,500
like in other words at the end we've got

2303
02:29:13,158 --> 02:29:19,639
a team in value and the team in value

2304
02:29:15,500 --> 02:29:22,699
that we've that we end up with he's

2305
02:29:19,639 --> 02:29:28,430
going to be from one of these mins and

2306
02:29:22,699 --> 02:29:33,500
Max's right it will be tea box min X Y

2307
02:29:28,430 --> 02:29:36,710
or Z or tea box max X Y or Z right and

2308
02:29:33,500 --> 02:29:40,129
which one of those six it is tells us

2309
02:29:36,709 --> 02:29:42,709
which face it is but testing against all

2310
02:29:40,129 --> 02:29:44,328
of those is kind of expensive now we

2311
02:29:42,709 --> 02:29:48,049
only have to do it when we actually

2312
02:29:44,328 --> 02:29:53,299
record a hit so that's a plus but it's

2313
02:29:48,049 --> 02:29:59,090
still nasty and I'm not sure how to do

2314
02:29:53,299 --> 02:30:00,828
it in any particularly good way because

2315
02:29:59,090 --> 02:30:02,988
it's kind of just this nasty select

2316
02:30:00,828 --> 02:30:07,389
operation that just like literally has

2317
02:30:02,988 --> 02:30:07,389
to check right

2318
02:30:24,299 --> 02:30:27,629
so I mean

2319
02:30:40,049 --> 02:30:42,108
you

2320
02:30:42,440 --> 02:30:49,560
yeah I mean I really don't know what the

2321
02:30:45,360 --> 02:30:50,940
what the right way to do that is but if

2322
02:30:49,559 --> 02:31:05,369
you imagine what this is going to look

2323
02:30:50,940 --> 02:31:07,470
like it's really bad so it's like so

2324
02:31:05,370 --> 02:31:09,479
these are the possible values that we

2325
02:31:07,469 --> 02:31:13,349
could have ended up with after doing the

2326
02:31:09,478 --> 02:31:33,179
mins and maxes and so essentially what

2327
02:31:13,350 --> 02:31:44,550
you're doing is this so this will

2328
02:31:33,180 --> 02:31:48,809
produce the mask value and you just got

2329
02:31:44,549 --> 02:31:50,340
a byte six comparisons right I don't

2330
02:31:48,809 --> 02:31:53,939
know any other way you would do it from

2331
02:31:50,340 --> 02:31:56,549
that the the price of getting a cheap

2332
02:31:53,940 --> 02:32:01,290
check is that you don't end up with the

2333
02:31:56,549 --> 02:32:02,519
information at the end right so then you

2334
02:32:01,290 --> 02:32:08,490
would have to do a thing that says well

2335
02:32:02,520 --> 02:32:18,390
box surface index right is going to be

2336
02:32:08,489 --> 02:32:20,760
an end of the loaded value that

2337
02:32:18,389 --> 02:32:26,189
corresponds with whichever you know when

2338
02:32:20,760 --> 02:32:27,478
you're looking at and you just got to do

2339
02:32:26,190 --> 02:32:29,760
them all I don't know any other way to

2340
02:32:27,478 --> 02:32:35,099
do it so you'd start out and say well

2341
02:32:29,760 --> 02:32:36,780
okay the Box surface index I guess we'll

2342
02:32:35,100 --> 02:32:40,140
start out we don't really need to check

2343
02:32:36,780 --> 02:32:42,690
this one because if the X if the minimum

2344
02:32:40,139 --> 02:32:48,170
x value I don't know how we ordered our

2345
02:32:42,690 --> 02:32:48,170
faces exactly so let's just check

2346
02:32:56,450 --> 02:33:01,190
where's that box side thing

2347
02:33:11,790 --> 02:33:17,160
I want the function that actually gets

2348
02:33:14,760 --> 02:33:23,059
get box surface is the function I

2349
02:33:17,159 --> 02:33:26,138
actually want this one

2350
02:33:23,059 --> 02:33:26,138
[Music]

2351
02:33:32,809 --> 02:33:39,308
so for each of these the normal equals

2352
02:33:36,110 --> 02:33:39,309
[Music]

2353
02:33:40,728 --> 02:33:49,019
its spacing to negative x positive x

2354
02:33:44,930 --> 02:33:53,880
negative Y positive y negative Z

2355
02:33:49,020 --> 02:34:08,670
positive Z so I'm pretty sure it's just

2356
02:33:53,879 --> 02:34:11,938
this right so just the minimum X is T

2357
02:34:08,670 --> 02:34:15,840
min maximum X 2 T min is if it would be

2358
02:34:11,939 --> 02:34:18,210
1 and we just were in the you know the

2359
02:34:15,840 --> 02:34:20,670
ones that pass right whichever one

2360
02:34:18,209 --> 02:34:26,398
passes is the one that carries the day

2361
02:34:20,670 --> 02:34:27,000
in any particular lane and yeah it's

2362
02:34:26,398 --> 02:34:31,049
ugly

2363
02:34:27,000 --> 02:34:33,568
right that's 1 2 3 4 5 6 verses 4 to 2

2364
02:34:31,049 --> 02:34:37,250
and the load so it's you know you're

2365
02:34:33,568 --> 02:34:40,170
talking about something nasty like 1 2 3

2366
02:34:37,250 --> 02:34:42,148
6 like it's like 18 operations or

2367
02:34:40,170 --> 02:34:44,639
something just just to recover that one

2368
02:34:42,148 --> 02:34:52,639
piece of information that that gets

2369
02:34:44,639 --> 02:35:02,309
destroyed in the process right and

2370
02:34:52,639 --> 02:35:04,108
enough to go so yeah on the plus side I

2371
02:35:02,309 --> 02:35:06,028
think that is it so that would be the

2372
02:35:04,109 --> 02:35:07,409
entirety of the P it's still probably a

2373
02:35:06,029 --> 02:35:12,029
lot better than our old routine

2374
02:35:07,409 --> 02:35:13,859
I think it's hard to say right who knows

2375
02:35:12,029 --> 02:35:17,840
how good the compiler was at dealing

2376
02:35:13,859 --> 02:35:20,939
with this I'm not sure but I feel like

2377
02:35:17,840 --> 02:35:24,000
chances are that this this is if once we

2378
02:35:20,939 --> 02:35:27,870
debug it will be faster and we can test

2379
02:35:24,000 --> 02:35:31,200
them against each other certainly so

2380
02:35:27,870 --> 02:35:32,520
let's take a look and just go ahead and

2381
02:35:31,200 --> 02:35:35,370
finish off the implementation of the

2382
02:35:32,520 --> 02:35:40,439
cindy side of things so we need mins and

2383
02:35:35,370 --> 02:35:43,649
maxes here but that's pretty simple so

2384
02:35:40,439 --> 02:35:44,760
let's take a look if we have an A and a

2385
02:35:43,648 --> 02:35:48,180
B

2386
02:35:44,760 --> 02:35:48,569
and we want to do them in how do we do

2387
02:35:48,181 --> 02:35:50,700
that

2388
02:35:48,569 --> 02:35:53,010
so it should be pretty straightforward

2389
02:35:50,700 --> 02:36:02,490
right all we should really have to do is

2390
02:35:53,010 --> 02:36:08,101
do the actual min max calls because I

2391
02:36:02,489 --> 02:36:10,229
believe they both exist in sse2 so in

2392
02:36:08,101 --> 02:36:13,351
theory that's all we have to do for the

2393
02:36:10,229 --> 02:36:18,779
men in the Max's and then to do them in

2394
02:36:13,351 --> 02:36:21,360
the max for the v3 4x that should be

2395
02:36:18,780 --> 02:36:23,909
really straightforward as well because

2396
02:36:21,360 --> 02:36:29,851
that's just going to call the other ones

2397
02:36:23,909 --> 02:36:49,771
right so for example this could be made

2398
02:36:29,851 --> 02:36:52,409
like this and I think that's all there

2399
02:36:49,771 --> 02:36:56,790
is to it so the only thing that we're

2400
02:36:52,409 --> 02:36:58,969
left with is the divide and so for the

2401
02:36:56,790 --> 02:37:02,101
divide I guess we probably since its

2402
02:36:58,969 --> 02:37:03,949
vector divide doesn't really make a

2403
02:37:02,101 --> 02:37:06,391
whole lot of sense

2404
02:37:03,950 --> 02:37:08,010
it's really a Hadamard product here with

2405
02:37:06,390 --> 02:37:09,750
the inverse right it's kind of what

2406
02:37:08,010 --> 02:37:14,219
we're talking about we're doing straight

2407
02:37:09,750 --> 02:37:16,351
across rows so we can implement be the

2408
02:37:14,219 --> 02:37:18,209
divide operator I just don't know that

2409
02:37:16,351 --> 02:37:19,860
we necessarily want to I mean it can't

2410
02:37:18,209 --> 02:37:26,640
really mean anything else so maybe we

2411
02:37:19,860 --> 02:37:32,340
just do you know who knows but here's

2412
02:37:26,640 --> 02:37:33,931
what it would be right it just be scalar

2413
02:37:32,340 --> 02:37:37,829
Lane divide oh whoops

2414
02:37:33,931 --> 02:37:40,250
that's 4x I don't want that I want the

2415
02:37:37,829 --> 02:37:40,250
3x

2416
02:37:41,181 --> 02:37:57,780
so the v3 for X if I just take operator

2417
02:37:52,681 --> 02:37:59,579
plus here operator divide just divide

2418
02:37:57,780 --> 02:38:04,891
the lanes than that then you have that

2419
02:37:59,579 --> 02:38:06,810
right so yeah so we can run that now but

2420
02:38:04,890 --> 02:38:08,341
you know we would assume we get some

2421
02:38:06,810 --> 02:38:10,550
bugs in there I don't know it's hard to

2422
02:38:08,341 --> 02:38:10,550
say

2423
02:38:10,670 --> 02:38:16,409
although honestly that looks pretty

2424
02:38:13,829 --> 02:38:19,351
similar so maybe we don't have any bugs

2425
02:38:16,409 --> 02:38:21,780
in there but you can see that it

2426
02:38:19,351 --> 02:38:24,659
definitely got faster right it's not

2427
02:38:21,780 --> 02:38:27,261
like order of magnitude faster

2428
02:38:24,659 --> 02:38:32,101
but before we were quite a bit higher

2429
02:38:27,261 --> 02:38:36,659
here we were more like 50 60 and now

2430
02:38:32,101 --> 02:38:38,851
we're down below 40 right and so it's

2431
02:38:36,659 --> 02:38:40,979
not nothing right and we can double

2432
02:38:38,851 --> 02:38:44,579
check that because we left both routines

2433
02:38:40,979 --> 02:38:54,000
and so we can try compiling different

2434
02:38:44,579 --> 02:39:00,720
ones in and out interchangeably look

2435
02:38:54,000 --> 02:39:03,620
here so we're at 38 min there yeah and

2436
02:39:00,720 --> 02:39:11,130
that that jumps up to like 60 so the

2437
02:39:03,620 --> 02:39:14,250
minimum is yeah it's at least 20 million

2438
02:39:11,130 --> 02:39:21,029
cycles hot you know saved which is great

2439
02:39:14,250 --> 02:39:23,940
right which is very good so I'd say

2440
02:39:21,030 --> 02:39:26,790
that's a win across the board it's still

2441
02:39:23,940 --> 02:39:32,069
not clear to me that we're doing it

2442
02:39:26,790 --> 02:39:34,230
right be the way that we should be

2443
02:39:32,069 --> 02:39:38,931
because again having to produce this box

2444
02:39:34,229 --> 02:39:38,930
surface index is kind of expensive there

2445
02:39:40,040 --> 02:39:45,471
so that's just kind of a nasty side

2446
02:39:43,079 --> 02:39:45,470
effect

2447
02:39:47,170 --> 02:39:52,930
and I'm not sure there's a lot we can do

2448
02:39:50,139 --> 02:39:56,680
about that we could take a look at what

2449
02:39:52,930 --> 02:40:01,000
happens if we pre compute the REA so if

2450
02:39:56,680 --> 02:40:10,000
we wanted to do a straight across

2451
02:40:01,000 --> 02:40:15,488
multiply there we can and that just

2452
02:40:10,000 --> 02:40:27,728
looks like V 3 for X in brady equals and

2453
02:40:15,488 --> 02:40:31,329
we had this up here before i coups this

2454
02:40:27,728 --> 02:40:33,389
just looks like the the end of the

2455
02:40:31,329 --> 02:40:46,600
inversion of the right direction like so

2456
02:40:33,389 --> 02:40:48,930
right of course I don't know we have to

2457
02:40:46,600 --> 02:40:48,930
do this

2458
02:40:53,770 --> 02:41:14,680
yeah so you know this is what's the men

2459
02:40:58,418 --> 02:41:19,869
running apps running at 37 642 hey you

2460
02:41:14,680 --> 02:41:24,148
know it's it's a little better right but

2461
02:41:19,869 --> 02:41:24,149
it's really not particularly noticeable

2462
02:41:24,539 --> 02:41:30,220
you know that's not really gonna make a

2463
02:41:27,009 --> 02:41:31,658
huge difference I guess I so the other

2464
02:41:30,219 --> 02:41:33,309
thing is that we don't really know here

2465
02:41:31,658 --> 02:41:38,139
right we don't really know the breakdown

2466
02:41:33,309 --> 02:41:40,689
of what's taking what time you know if

2467
02:41:38,139 --> 02:41:42,398
this stuff here was important we could

2468
02:41:40,689 --> 02:41:45,009
switch to min Max and that would be

2469
02:41:42,398 --> 02:41:48,639
something interesting we can also get

2470
02:41:45,009 --> 02:41:51,520
rid of some of our of our checks here we

2471
02:41:48,639 --> 02:41:53,139
don't know how expensive those are so

2472
02:41:51,520 --> 02:41:54,729
you know for example we could take a

2473
02:41:53,139 --> 02:41:58,198
look at what happens if we get rid of

2474
02:41:54,728 --> 02:42:05,019
some of these checks so you know here's

2475
02:41:58,199 --> 02:42:10,658
the 36 784 minimum right if I get rid of

2476
02:42:05,020 --> 02:42:13,838
that check you know it's actually kind

2477
02:42:10,658 --> 02:42:15,699
of expensive right to store the

2478
02:42:13,838 --> 02:42:21,219
statistics so we know the stats are a

2479
02:42:15,699 --> 02:42:23,020
little bit annoying potentially although

2480
02:42:21,219 --> 02:42:24,818
checking things like that can be kind of

2481
02:42:23,020 --> 02:42:26,289
if you're if they're that tiny can be

2482
02:42:24,818 --> 02:42:27,788
kind of hard to do because you don't

2483
02:42:26,289 --> 02:42:29,259
know if maybe just the alignment of the

2484
02:42:27,789 --> 02:42:31,810
code changed or something and it's not

2485
02:42:29,259 --> 02:42:34,389
really the gathering of the scat that

2486
02:42:31,809 --> 02:42:36,639
was important it was like the way that

2487
02:42:34,389 --> 02:42:41,288
it changed where things lined up on the

2488
02:42:36,639 --> 02:42:43,509
stack or things like this right so hard

2489
02:42:41,289 --> 02:42:46,918
to say but anyway you can sort of see

2490
02:42:43,509 --> 02:42:46,918
where we're going with this

2491
02:42:49,229 --> 02:42:55,300
yeah and off we go

2492
02:42:52,181 --> 02:42:58,301
we can also see what happens nuking this

2493
02:42:55,300 --> 02:43:01,140
assert you know to what degree that

2494
02:42:58,300 --> 02:43:01,140
affects the runtime

2495
02:43:07,079 --> 02:43:15,450
again not too much so there we go so now

2496
02:43:13,049 --> 02:43:18,358
that we have that information yet we're

2497
02:43:15,450 --> 02:43:27,420
also I don't know what's going on here

2498
02:43:18,359 --> 02:43:28,950
exactly it's around freshmen so now that

2499
02:43:27,420 --> 02:43:30,299
we have that information and we can also

2500
02:43:28,950 --> 02:43:31,740
go back and look at the profile now to

2501
02:43:30,299 --> 02:43:33,299
look at the threads you can see that

2502
02:43:31,739 --> 02:43:36,299
that definitely took these down a bit

2503
02:43:33,299 --> 02:43:40,019
right and we're spending a lot more time

2504
02:43:36,299 --> 02:43:42,679
up in here so I think you know our

2505
02:43:40,020 --> 02:43:45,450
lighting is actually at least the the

2506
02:43:42,680 --> 02:43:48,120
computation part is actually doing a

2507
02:43:45,450 --> 02:43:50,819
pretty good job of staying within a

2508
02:43:48,120 --> 02:43:52,920
reasonable frame budget so that's pretty

2509
02:43:50,818 --> 02:43:54,750
nice as well so one of the interesting

2510
02:43:52,920 --> 02:43:56,700
things too is we can see too how elastic

2511
02:43:54,750 --> 02:43:58,590
this is at this point because we can

2512
02:43:56,700 --> 02:44:00,060
always for one of the things you can do

2513
02:43:58,590 --> 02:44:03,870
for optimization right is we can just

2514
02:44:00,059 --> 02:44:08,898
crank the stress on the system up way

2515
02:44:03,870 --> 02:44:13,200
higher and and you know use that as

2516
02:44:08,898 --> 02:44:15,329
another way of figuring out how our

2517
02:44:13,200 --> 02:44:16,829
speed is doing right so if I crank that

2518
02:44:15,329 --> 02:44:19,950
up we should tank our frame rate

2519
02:44:16,829 --> 02:44:27,680
massively right and so now we should see

2520
02:44:19,950 --> 02:44:31,460
a lot more yeah we would see a lot more

2521
02:44:27,680 --> 02:44:33,960
variability I'm sorry a lot more

2522
02:44:31,459 --> 02:44:35,879
variation from small changes because

2523
02:44:33,959 --> 02:44:37,709
since we're doing a lot more in theory

2524
02:44:35,879 --> 02:44:43,438
right that would have more of an effect

2525
02:44:37,709 --> 02:44:47,699
hard to say anyway still pretty cool

2526
02:44:43,439 --> 02:44:51,389
that we've got still interactive rates

2527
02:44:47,700 --> 02:44:54,810
with that many rays per point being

2528
02:44:51,389 --> 02:44:55,978
sampled but you know another thing again

2529
02:44:54,809 --> 02:44:57,629
like I was saying I think we need to

2530
02:44:55,978 --> 02:44:59,129
look a little more closely because I

2531
02:44:57,629 --> 02:45:01,949
think we still have some bugs with how

2532
02:44:59,129 --> 02:45:04,108
things are getting recorded it's only

2533
02:45:01,950 --> 02:45:06,750
supposed to be able to change up to a

2534
02:45:04,109 --> 02:45:10,530
tenth and some of these still flicker

2535
02:45:06,750 --> 02:45:12,629
even with 256 rays cast and a framerate

2536
02:45:10,530 --> 02:45:15,180
this slow it's just I think we've got

2537
02:45:12,629 --> 02:45:16,920
some other bugs in there so we've got to

2538
02:45:15,180 --> 02:45:19,079
do a little bit more work on on that

2539
02:45:16,920 --> 02:45:20,310
part but anyway I'm happy with that so

2540
02:45:19,079 --> 02:45:23,030
let's go ahead and

2541
02:45:20,310 --> 02:45:27,770
- a brief Q&amp;A here I'm happy with that

2542
02:45:23,030 --> 02:45:27,771
new way of doing the box testing there

2543
02:46:00,869 --> 02:46:08,350
surface index lookup table move math

2544
02:46:03,670 --> 02:46:11,859
team in equals box min and just choose

2545
02:46:08,350 --> 02:46:18,939
the first bit set in the return from the

2546
02:46:11,859 --> 02:46:23,890
move max for which index well but you

2547
02:46:18,939 --> 02:46:27,340
have to do that twice right 40 minute

2548
02:46:23,889 --> 02:46:31,299
and T box Max and then two table lookups

2549
02:46:27,340 --> 02:46:38,170
and then and then you have to do a bit

2550
02:46:31,299 --> 02:46:39,368
scan right well though I guess what

2551
02:46:38,170 --> 02:46:43,408
you're saying is use surface index

2552
02:46:39,369 --> 02:46:43,409
lookup table to pick the first bit set

2553
02:46:49,109 --> 02:46:55,529
well no cuz move mask does it by byte

2554
02:46:55,949 --> 02:47:01,479
right so you're actually gonna you

2555
02:46:59,978 --> 02:47:06,340
couldn't really use a table for that

2556
02:47:01,478 --> 02:47:06,908
could you because the table have to be

2557
02:47:06,340 --> 02:47:16,510
too big

2558
02:47:06,908 --> 02:47:19,270
am I wrong about that we would get an

2559
02:47:16,510 --> 02:47:21,010
improve switch all the V 3 2 V 3 4 X

2560
02:47:19,270 --> 02:47:25,420
with a little bit value into the M 128

2561
02:47:21,010 --> 02:47:32,828
each frame potentially yes but I don't

2562
02:47:25,420 --> 02:47:34,779
know usually you want to minimize the

2563
02:47:32,828 --> 02:47:37,379
memory traffic so I don't know that that

2564
02:47:34,779 --> 02:47:37,380
would actually help

2565
02:47:40,671 --> 02:47:47,470
yeah I don't think a 256 entry lookup

2566
02:47:44,060 --> 02:47:50,001
table is such a good idea there though

2567
02:47:47,470 --> 02:47:53,710
and are you sure that it would be I

2568
02:47:50,001 --> 02:47:53,710
don't actually know that that's true

2569
02:48:05,209 --> 02:48:08,869
log scale book could you recap how we

2570
02:48:07,340 --> 02:48:11,959
retain the state of the debug UI between

2571
02:48:08,869 --> 02:48:14,180
frames this state of the debug UI it's

2572
02:48:11,959 --> 02:48:17,199
just it's actually stored in an actual

2573
02:48:14,180 --> 02:48:17,199
hierarchy in memory

2574
02:48:30,860 --> 02:48:35,220
yeah so what I'm trying to say here

2575
02:48:33,659 --> 02:48:39,719
about the move mass construction right

2576
02:48:35,219 --> 02:48:42,239
is that we have we have four bytes four

2577
02:48:39,719 --> 02:48:46,769
bytes four bytes four bytes so it's

2578
02:48:42,239 --> 02:48:50,039
gonna put four ones in four ones into

2579
02:48:46,770 --> 02:48:53,689
the result for every one true we

2580
02:48:50,040 --> 02:49:00,439
actually have June I'm saying

2581
02:48:53,689 --> 02:49:02,399
so the lookup table for the move mask is

2582
02:49:00,439 --> 02:49:05,960
gonna be huge

2583
02:49:02,399 --> 02:49:10,350
if you don't first condense it right

2584
02:49:05,959 --> 02:49:14,549
because it's byte wise and there's 16

2585
02:49:10,350 --> 02:49:17,210
bytes so it's gonna be 16 bits worth of

2586
02:49:14,549 --> 02:49:17,209
data isn't it

2587
02:49:23,389 --> 02:49:28,590
Gina I'm saying it ain't gonna be 256

2588
02:49:26,069 --> 02:49:30,569
bits unless you first you'd have to

2589
02:49:28,590 --> 02:49:35,010
first opt to condense it you seen him

2590
02:49:30,569 --> 02:49:41,850
saying you have to do like a move mask

2591
02:49:35,010 --> 02:49:44,639
and then shift the move mask over and or

2592
02:49:41,850 --> 02:49:49,020
it in dude I'm talking you and I'm

2593
02:49:44,639 --> 02:49:50,579
saying yeah yeah exactly so then by the

2594
02:49:49,020 --> 02:49:55,800
time you do all that I don't think

2595
02:49:50,579 --> 02:49:57,780
you've saved any instructions right cuz

2596
02:49:55,799 --> 02:50:01,229
now you need to do you need you two of

2597
02:49:57,780 --> 02:50:04,079
those so you do two table lookups with

2598
02:50:01,229 --> 02:50:08,399
to move masks both that have to op three

2599
02:50:04,079 --> 02:50:10,860
ops per to collapse them I think that's

2600
02:50:08,399 --> 02:50:15,600
slower dude if anything I think that's

2601
02:50:10,860 --> 02:50:17,310
slower because if we don't do that much

2602
02:50:15,600 --> 02:50:19,500
right I mean we'd have to test it to

2603
02:50:17,309 --> 02:50:21,149
know which one was faster but here you

2604
02:50:19,500 --> 02:50:26,899
can see exactly what we're doing here

2605
02:50:21,149 --> 02:50:29,789
right you got a load these values in

2606
02:50:26,899 --> 02:50:31,430
right and you know who knows how exactly

2607
02:50:29,790 --> 02:50:33,660
the compiler is gonna decide to do that

2608
02:50:31,430 --> 02:50:36,809
but otherwise you've got an and it

2609
02:50:33,659 --> 02:50:38,879
equals in an or for each step and you've

2610
02:50:36,809 --> 02:50:41,729
only got one two three four or five of

2611
02:50:38,879 --> 02:50:43,619
them and then two more here right so

2612
02:50:41,729 --> 02:50:51,659
you're talking about a very low number

2613
02:50:43,620 --> 02:50:53,520
of ops right and so if you have to do

2614
02:50:51,659 --> 02:50:55,559
you have to do the move mask in any case

2615
02:50:53,520 --> 02:50:59,909
right you've got to do that move mask

2616
02:50:55,559 --> 02:51:02,850
you've got to do the move max twice once

2617
02:50:59,909 --> 02:51:05,010
for the min and once for the max so you

2618
02:51:02,850 --> 02:51:08,880
still have to do two of these equals and

2619
02:51:05,010 --> 02:51:11,819
then to move masks right then you have

2620
02:51:08,879 --> 02:51:14,339
to do the collapses on the move masks

2621
02:51:11,819 --> 02:51:16,409
which will be at least what two more

2622
02:51:14,340 --> 02:51:18,960
instructions per sets for more

2623
02:51:16,409 --> 02:51:23,250
instructions there then you have to look

2624
02:51:18,959 --> 02:51:28,649
up into the table and then you have to

2625
02:51:23,250 --> 02:51:30,059
actually keep it per Lane right there's

2626
02:51:28,649 --> 02:51:32,100
no way there's no way what you're

2627
02:51:30,059 --> 02:51:33,859
suggesting is faster I mean in go

2628
02:51:32,100 --> 02:51:35,998
implement it and prove me wrong for sure

2629
02:51:33,860 --> 02:51:39,209
but that just

2630
02:51:35,998 --> 02:51:43,828
it does not sound good that sound that

2631
02:51:39,209 --> 02:51:45,989
sounds like like definitely slower table

2632
02:51:43,828 --> 02:51:47,609
lookups in general are a good idea like

2633
02:51:45,988 --> 02:51:50,100
what you're suggesting is a good idea I

2634
02:51:47,609 --> 02:51:52,318
don't want to dismiss it it's a good

2635
02:51:50,100 --> 02:51:54,748
idea just not for this particular case I

2636
02:51:52,318 --> 02:51:58,350
think because it's so simple if we were

2637
02:51:54,748 --> 02:52:01,048
doing something more here then we you

2638
02:51:58,350 --> 02:52:02,879
know table lookups can be very good it's

2639
02:52:01,049 --> 02:52:04,919
just I think this happens to be simple

2640
02:52:02,879 --> 02:52:07,020
enough that I'm and the in the table

2641
02:52:04,918 --> 02:52:11,369
lookup happens to be troublesome enough

2642
02:52:07,020 --> 02:52:13,408
is the other part of it right sometimes

2643
02:52:11,369 --> 02:52:20,399
the table lookups really clean and in

2644
02:52:13,408 --> 02:52:21,988
this case it isn't Rome says team in

2645
02:52:20,398 --> 02:52:24,628
three will always be the closest in

2646
02:52:21,988 --> 02:52:27,448
distance to Rea origin since rady that

2647
02:52:24,629 --> 02:52:32,759
hits box max will result in tea box max

2648
02:52:27,449 --> 02:52:33,838
less than two box big no-no so if the

2649
02:52:32,759 --> 02:52:37,439
Ray is pointing in the negative

2650
02:52:33,838 --> 02:52:40,588
direction then box max will actually hit

2651
02:52:37,439 --> 02:52:42,418
sooner than box min right because

2652
02:52:40,588 --> 02:52:44,430
remember the array can be going can be

2653
02:52:42,418 --> 02:52:46,828
going negative Direction down negative X

2654
02:52:44,430 --> 02:52:51,088
instead of positive x for example and

2655
02:52:46,828 --> 02:52:53,100
then it will hit the X max first then

2656
02:52:51,088 --> 02:52:55,619
the X min whereas if it's coming from

2657
02:52:53,100 --> 02:53:05,100
the low and going high then it will hit

2658
02:52:55,619 --> 02:53:05,668
min first and max right so so to be more

2659
02:53:05,100 --> 02:53:08,158
specific

2660
02:53:05,668 --> 02:53:12,328
let's just take a one dimensional array

2661
02:53:08,158 --> 02:53:15,868
right so here's my bounds here is my min

2662
02:53:12,328 --> 02:53:18,509
here's my max if the direction of the

2663
02:53:15,869 --> 02:53:19,680
Ray is going down the positive right so

2664
02:53:18,509 --> 02:53:21,930
it's starting somewhere and going

2665
02:53:19,680 --> 02:53:25,020
positive it will hit min and then max

2666
02:53:21,930 --> 02:53:27,809
right first min then max but if I

2667
02:53:25,020 --> 02:53:31,680
started high and employing negative then

2668
02:53:27,809 --> 02:53:33,958
I will hit max first then min so we need

2669
02:53:31,680 --> 02:53:36,658
to do some tests to determine now we

2670
02:53:33,959 --> 02:53:38,759
could just do that test on the raid

2671
02:53:36,658 --> 02:53:42,689
erection right because we know it ahead

2672
02:53:38,759 --> 02:53:45,180
of time actually so in in theory we

2673
02:53:42,689 --> 02:53:48,088
could instead do it this way where in

2674
02:53:45,180 --> 02:53:48,899
addition to doing in Grady here we just

2675
02:53:48,088 --> 02:53:51,000
do one two

2676
02:53:48,899 --> 02:53:59,250
that's the mask for that so we could say

2677
02:53:51,000 --> 02:54:01,591
like okay you know ray positive or

2678
02:53:59,250 --> 02:54:06,709
something right and that's just like

2679
02:54:01,591 --> 02:54:06,710
okay you know is if I take the zero

2680
02:54:07,310 --> 02:54:16,829
vector and I want to know if if if the

2681
02:54:13,079 --> 02:54:18,959
the raid erection is is greater right so

2682
02:54:16,829 --> 02:54:21,420
I just want to know if the Ray is

2683
02:54:18,959 --> 02:54:25,020
positive down any dent down any

2684
02:54:21,420 --> 02:54:27,450
particular axis right and then in theory

2685
02:54:25,021 --> 02:54:29,700
you know down here instead of actually

2686
02:54:27,450 --> 02:54:31,801
doing the min or the Max we could select

2687
02:54:29,700 --> 02:54:35,240
it with a mask that was based on this

2688
02:54:31,800 --> 02:54:35,239
Ray position right

2689
02:54:46,280 --> 02:54:53,931
but it's just not faster right this is

2690
02:54:50,601 --> 02:54:56,300
one operation so there's just no need I

2691
02:54:53,931 --> 02:54:59,271
don't think for this to occur we still

2692
02:54:56,299 --> 02:55:00,979
need the men in the max because we need

2693
02:54:59,271 --> 02:55:03,170
to know whether they're ray intersected

2694
02:55:00,979 --> 02:55:09,340
at all so we need to make sure there is

2695
02:55:03,170 --> 02:55:09,340
room between these two in that way so

2696
02:55:13,959 --> 02:55:20,529
you know I just don't think you'd do

2697
02:55:16,220 --> 02:55:20,529
anything with that does that make sense

2698
02:55:33,280 --> 02:55:38,590
so I'm pretty sure that's not soon can

2699
02:55:36,440 --> 02:55:43,180
actually take advantage of unfortunately

2700
02:55:38,590 --> 02:55:43,180
and so you know

2701
02:55:52,841 --> 02:55:56,521
yeah it is what it is

2702
02:56:07,620 --> 02:56:14,260
alright no more questions so I think

2703
02:56:09,850 --> 02:56:15,370
tomorrow what I'd like to do maybe we'll

2704
02:56:14,260 --> 02:56:17,050
take a look at the facial hierarchy just

2705
02:56:15,370 --> 02:56:24,670
to like finish off some of the

2706
02:56:17,049 --> 02:56:29,309
optimization stuff I don't know what to

2707
02:56:24,670 --> 02:56:29,309
think about the cycle counts currently

2708
02:56:32,100 --> 02:56:43,950
36 million isn't isn't awful certainly

2709
02:56:50,920 --> 02:56:57,158
and it does look like the work is pretty

2710
02:56:54,699 --> 02:56:59,380
reasonable so let's pause the profile so

2711
02:56:57,158 --> 02:57:01,420
you know I'm just taking a look at this

2712
02:56:59,379 --> 02:57:02,648
here so one of the things that you have

2713
02:57:01,420 --> 02:57:04,779
to think about when you're when you're

2714
02:57:02,648 --> 02:57:07,778
looking at multi-threaded programming as

2715
02:57:04,779 --> 02:57:10,720
well is you have to make sure that

2716
02:57:07,779 --> 02:57:13,590
you're not like wasting too much work

2717
02:57:10,719 --> 02:57:17,829
and so as you can see with the

2718
02:57:13,590 --> 02:57:19,389
multi-threading part of this is we

2719
02:57:17,829 --> 02:57:22,209
really don't have too much of a problem

2720
02:57:19,389 --> 02:57:24,158
with with drain out like we don't have

2721
02:57:22,209 --> 02:57:26,228
problems where there's huge gaps up here

2722
02:57:24,158 --> 02:57:27,398
so we're pretty well balanced and you

2723
02:57:26,228 --> 02:57:29,889
know I'm pretty happy that the amount of

2724
02:57:27,398 --> 02:57:31,959
time we would save by trying to like use

2725
02:57:29,889 --> 02:57:34,299
smaller buckets probably isn't much

2726
02:57:31,959 --> 02:57:36,459
right but you can imagine if these

2727
02:57:34,299 --> 02:57:37,988
buckets were too big like so for example

2728
02:57:36,459 --> 02:57:40,228
let's just let me just show you what I

2729
02:57:37,988 --> 02:57:40,228
mean

2730
02:57:40,770 --> 02:57:48,100
so in here right when we divide up the

2731
02:57:45,699 --> 02:57:49,479
work so you know let's just say that we

2732
02:57:48,100 --> 02:57:52,238
divide up the work into much larger

2733
02:57:49,478 --> 02:57:55,539
buckets then then we're talking about

2734
02:57:52,238 --> 02:58:00,309
here right so when we take a look at

2735
02:57:55,540 --> 02:58:02,890
that and we look at the threads and we

2736
02:58:00,309 --> 02:58:05,289
pause that you can see that the gaps get

2737
02:58:02,889 --> 02:58:07,209
much larger and the reason that the gaps

2738
02:58:05,290 --> 02:58:08,920
get much larger is because the size of

2739
02:58:07,209 --> 02:58:12,698
the work that we're allocating out is

2740
02:58:08,920 --> 02:58:14,590
just too big right so you end up looking

2741
02:58:12,699 --> 02:58:16,540
at these threads here and there's what

2742
02:58:14,590 --> 02:58:19,658
how many one two three four five six

2743
02:58:16,540 --> 02:58:21,670
right they each get one batch of work to

2744
02:58:19,658 --> 02:58:23,619
do and then one of them gets the tail

2745
02:58:21,670 --> 02:58:26,500
end and the rest of them just have to

2746
02:58:23,620 --> 02:58:28,029
wait so you end up with a lot of unused

2747
02:58:26,500 --> 02:58:33,728
cut these threads are just sitting here

2748
02:58:28,029 --> 02:58:34,988
doing nothing during that time right so

2749
02:58:33,728 --> 02:58:37,329
you typically want to make sure this

2750
02:58:34,988 --> 02:58:39,129
quanta is low enough right and we could

2751
02:58:37,329 --> 02:58:40,809
imagine you know dropping it down and

2752
02:58:39,129 --> 02:58:44,139
down and down but I don't think we want

2753
02:58:40,809 --> 02:58:47,469
drop any lower than 256 but you can take

2754
02:58:44,139 --> 02:58:49,988
a look at how that's breaking down and

2755
02:58:47,469 --> 02:58:52,539
you can kind of see how much empty space

2756
02:58:49,988 --> 02:58:55,238
you're wasting there and what you want

2757
02:58:52,540 --> 02:58:58,359
is usually the largest quantity very

2758
02:58:55,238 --> 02:58:59,709
little empty space because that way you

2759
02:58:58,359 --> 02:59:02,408
know you're not spending a lot of time

2760
02:58:59,709 --> 02:59:04,629
on the bookkeeping in the overhead but

2761
02:59:02,408 --> 02:59:09,069
you're still getting you know up

2762
02:59:04,629 --> 02:59:12,519
reasonable amount of that still keeping

2763
02:59:09,069 --> 02:59:13,898
it very flush so that's one aspect the

2764
02:59:12,520 --> 02:59:16,540
other aspect and this is the part that

2765
02:59:13,898 --> 02:59:19,930
we're not looking at currently is your

2766
02:59:16,540 --> 02:59:22,689
dead laying count right so the other

2767
02:59:19,930 --> 02:59:24,610
thing that happens is you've got you

2768
02:59:22,689 --> 02:59:26,950
know multi-threading and so there's one

2769
02:59:24,610 --> 02:59:28,239
way of looking at dead time is threads

2770
02:59:26,950 --> 02:59:29,890
are sitting there with nothing to do

2771
02:59:28,239 --> 02:59:32,260
because there's no quanta to give them

2772
02:59:29,889 --> 02:59:34,869
there you're out of work and they're

2773
02:59:32,260 --> 02:59:37,148
waiting for the last thread that got a

2774
02:59:34,870 --> 02:59:41,110
quanta of work to do to finish that

2775
02:59:37,148 --> 02:59:44,260
quanta right the other way to look at it

2776
02:59:41,110 --> 02:59:47,200
is on any particular thread you've also

2777
02:59:44,260 --> 02:59:51,309
got lanes in our case we've got four

2778
02:59:47,200 --> 02:59:53,470
lanes that's good four lanes worth of

2779
02:59:51,309 --> 02:59:55,449
work and what we're counting on is that

2780
02:59:53,469 --> 02:59:57,519
these lanes all have active stuff

2781
02:59:55,450 --> 03:00:00,040
happening in them but what actually

2782
02:59:57,520 --> 03:00:01,960
happens is that at some point lanes get

2783
03:00:00,040 --> 03:00:04,750
knocked out they've already computed

2784
03:00:01,959 --> 03:00:06,459
their results and the other lanes are

2785
03:00:04,750 --> 03:00:08,500
still active so they're just along for

2786
03:00:06,459 --> 03:00:10,629
the ride and at some point you can get

2787
03:00:08,500 --> 03:00:13,239
into pretty bad scenarios where one ray

2788
03:00:10,629 --> 03:00:15,969
is still causing the whole thing to go

2789
03:00:13,239 --> 03:00:18,728
but the rest of the rays were already

2790
03:00:15,969 --> 03:00:22,349
done and so you're essentially losing up

2791
03:00:18,728 --> 03:00:27,069
to 75% of the computation power

2792
03:00:22,350 --> 03:00:29,909
computing dead rays so one of the things

2793
03:00:27,069 --> 03:00:34,059
that people will do is they'll actually

2794
03:00:29,909 --> 03:00:36,369
for lack of a better term multi Multi

2795
03:00:34,059 --> 03:00:38,559
threads the Ray I don't know how to say

2796
03:00:36,370 --> 03:00:41,470
this exactly but one of the things that

2797
03:00:38,559 --> 03:00:45,219
they'll do is so in here what we do is

2798
03:00:41,469 --> 03:00:47,978
we just stuff the Ray value as one value

2799
03:00:45,219 --> 03:00:51,969
and do the whole thing you know straight

2800
03:00:47,978 --> 03:00:54,129
through right so we get four Ray's in

2801
03:00:51,969 --> 03:00:58,659
here and we do them all and that's all

2802
03:00:54,129 --> 03:01:00,938
we do if at some point we found that our

2803
03:00:58,659 --> 03:01:03,309
lane masked masked out so we were like

2804
03:01:00,939 --> 03:01:05,889
this Ray is done we don't need to

2805
03:01:03,309 --> 03:01:08,340
compute it anymore it found its hit or

2806
03:01:05,889 --> 03:01:11,199
whatever and we know that you could

2807
03:01:08,340 --> 03:01:15,370
replace that ray value with a new ray

2808
03:01:11,200 --> 03:01:17,800
value right and so one way that people

2809
03:01:15,370 --> 03:01:18,700
will do this is they'll actually the

2810
03:01:17,799 --> 03:01:21,430
Quan

2811
03:01:18,700 --> 03:01:24,521
it'll pull in new Ray's as the Rays

2812
03:01:21,431 --> 03:01:27,069
finish and just stay in the rach ekang

2813
03:01:24,521 --> 03:01:30,911
loop pulling in new Ray's that you never

2814
03:01:27,069 --> 03:01:33,640
lose Lane fill that might be a little

2815
03:01:30,911 --> 03:01:35,050
bit too advanced for us because then you

2816
03:01:33,640 --> 03:01:37,149
have to architect your whole thing as

2817
03:01:35,050 --> 03:01:39,581
like a ray pipeline so rays are coming

2818
03:01:37,149 --> 03:01:42,251
in and getting distributed and they're

2819
03:01:39,581 --> 03:01:43,751
you're traversing the hierarchy and you

2820
03:01:42,251 --> 03:01:46,091
remember we're in the hierarchy you are

2821
03:01:43,751 --> 03:01:49,479
per ray and it just it's a lot more

2822
03:01:46,091 --> 03:01:52,030
complicated but it is more not more

2823
03:01:49,479 --> 03:01:53,560
complicated to implement more cop gating

2824
03:01:52,030 --> 03:01:55,511
and you got to work through a lot more

2825
03:01:53,560 --> 03:01:56,979
stuff that may be a bridge too far but

2826
03:01:55,511 --> 03:01:59,470
point we just wanted to point out that

2827
03:01:56,979 --> 03:02:01,810
is something we're not measuring right

2828
03:01:59,470 --> 03:02:03,819
now we don't really have a way of

2829
03:02:01,810 --> 03:02:06,040
knowing how much dead computation time

2830
03:02:03,819 --> 03:02:06,699
we have how much computation time we're

2831
03:02:06,040 --> 03:02:08,620
effectively

2832
03:02:06,700 --> 03:02:10,721
spending on things that we really just

2833
03:02:08,620 --> 03:02:12,069
don't care what the result is because

2834
03:02:10,720 --> 03:02:16,270
they're just sitting in lanes that are

2835
03:02:12,069 --> 03:02:22,001
never gonna get used anyway right so

2836
03:02:16,271 --> 03:02:26,640
that's something to be aware of I go

2837
03:02:22,001 --> 03:02:30,069
down the stairs here sue yeah

2838
03:02:26,639 --> 03:02:30,069
[Music]

2839
03:02:33,719 --> 03:02:40,949
I don't really have much more to say so

2840
03:02:39,359 --> 03:02:42,210
I think we can probably end I really

2841
03:02:40,950 --> 03:02:44,430
like the way this letting is shaping up

2842
03:02:42,209 --> 03:02:46,500
I mean it's so cool that you can get

2843
03:02:44,430 --> 03:02:48,568
like the lighting in here it's bouncing

2844
03:02:46,500 --> 03:02:50,728
off of there and hitting here and stuff

2845
03:02:48,568 --> 03:02:58,728
and it gets a little bit of that shine

2846
03:02:50,728 --> 03:02:58,728
and it's pretty Pleasant

2847
03:03:02,860 --> 03:03:20,250
anyway alright folks I'm gonna close

2848
03:03:06,340 --> 03:03:20,250
down I'm gonna try to anyway

2849
03:03:27,110 --> 03:03:31,159
yes you can see and this was we never

2850
03:03:29,870 --> 03:03:32,720
really finished looking at this cuz we

2851
03:03:31,159 --> 03:03:34,610
just implanted ourselves but you can see

2852
03:03:32,719 --> 03:03:36,649
what they did the same thing right so

2853
03:03:34,610 --> 03:03:38,600
they take the min and the max to figure

2854
03:03:36,649 --> 03:03:40,100
out which one is which cuz they don't

2855
03:03:38,600 --> 03:03:41,840
know right they don't even call them min

2856
03:03:40,100 --> 03:03:43,940
and Max to start with they just they use

2857
03:03:41,840 --> 03:03:45,771
the min and Max in here for the bounding

2858
03:03:43,940 --> 03:03:47,120
box with things calm one and two then

2859
03:03:45,771 --> 03:03:48,890
they use the min and the max to figure

2860
03:03:47,120 --> 03:03:51,680
out which one is them into the max then

2861
03:03:48,889 --> 03:03:59,389
they use the max of the minimums right

2862
03:03:51,680 --> 03:04:01,639
which is whoa this is editable okay and

2863
03:03:59,389 --> 03:04:08,329
so that's exactly what we did as well

2864
03:04:01,639 --> 03:04:10,069
which is what we would think so yeah all

2865
03:04:08,329 --> 03:04:11,329
right thank you everyone for joining me

2866
03:04:10,069 --> 03:04:12,590
first on a handmade hero it's been a

2867
03:04:11,329 --> 03:04:14,930
pleasure coding with you as always if

2868
03:04:12,590 --> 03:04:16,219
you would like to follow my series at

2869
03:04:14,930 --> 03:04:18,440
home you can always peer to the game it

2870
03:04:16,219 --> 03:04:20,209
comes with a source code so head to hand

2871
03:04:18,440 --> 03:04:23,030
made here org if you want to play on the

2872
03:04:20,209 --> 03:04:25,369
source yourself I will be back tomorrow

2873
03:04:23,030 --> 03:04:27,230
when we will either continue with the

2874
03:04:25,370 --> 03:04:28,430
optimization stuff or maybe start to

2875
03:04:27,229 --> 03:04:30,020
drill down on why we're doing that

2876
03:04:28,430 --> 03:04:32,780
flicker I don't think that flicker is

2877
03:04:30,021 --> 03:04:34,930
entirely due to sampling I think we've

2878
03:04:32,780 --> 03:04:37,220
got bugs then we need to fix those bugs

2879
03:04:34,930 --> 03:04:38,840
so we'll do a little more debugging on

2880
03:04:37,219 --> 03:04:42,319
that really like how the lighting looks

2881
03:04:38,840 --> 03:04:44,840
now I'm pretty happy with it I think at

2882
03:04:42,319 --> 03:04:46,610
some point we have to go try playing

2883
03:04:44,840 --> 03:04:48,290
with the world generation code so that

2884
03:04:46,610 --> 03:04:49,700
we can actually use the lighting points

2885
03:04:48,290 --> 03:04:53,210
more effectively than they're being used

2886
03:04:49,700 --> 03:04:55,040
now so we've got to kind of work on that

2887
03:04:53,209 --> 03:04:56,419
back end a little bit we got to like

2888
03:04:55,040 --> 03:04:58,760
work on how we're actually gonna you

2889
03:04:56,420 --> 03:05:00,799
know use the lighting artistically in

2890
03:04:58,760 --> 03:05:03,860
the scene so we're kind of moving slowly

2891
03:05:00,799 --> 03:05:05,239
towards that part where we'll kind of

2892
03:05:03,860 --> 03:05:06,470
have a different look at a different

2893
03:05:05,239 --> 03:05:08,629
side of the lighting which is you know

2894
03:05:06,469 --> 03:05:10,279
now that we have ways of computing it

2895
03:05:08,629 --> 03:05:11,420
and as we get that way of computing it

2896
03:05:10,280 --> 03:05:14,210
good enough that we think we could use

2897
03:05:11,420 --> 03:05:16,219
it in the ship and game we actually need

2898
03:05:14,209 --> 03:05:18,109
it for how we do want to actually use it

2899
03:05:16,219 --> 03:05:20,149
and so that's kind of where we're

2900
03:05:18,110 --> 03:05:23,120
looking at now all right

2901
03:05:20,149 --> 03:05:24,469
until then help us see everyone back

2902
03:05:23,120 --> 03:05:25,521
here for that until then have fun

2903
03:05:24,469 --> 03:05:25,879
programming I'll see everyone on the

2904
03:05:25,521 --> 03:05:28,630
Internet

2905
03:05:25,879 --> 03:05:28,629
take it easy everybody

