1
00:00:01,850 --> 00:00:05,609
hello everyone and welcome to handmade

2
00:00:04,200 --> 00:00:08,490
Hero the show we code a complete game

3
00:00:05,609 --> 00:00:11,009
live on stream today we have to start

4
00:00:08,490 --> 00:00:14,759
looking at our lighting system to see

5
00:00:11,009 --> 00:00:16,980
how we can improve its actual runtime

6
00:00:14,759 --> 00:00:19,589
performance and we have a lot of ways

7
00:00:16,980 --> 00:00:21,210
that we can do that but we you know

8
00:00:19,589 --> 00:00:24,929
we're only just starting out what we did

9
00:00:21,210 --> 00:00:28,080
was we took the the first step of making

10
00:00:24,929 --> 00:00:31,439
it so that the light tracing that we

11
00:00:28,079 --> 00:00:34,109
were doing before can be done via a

12
00:00:31,439 --> 00:00:37,079
spatial hierarchy now so already just

13
00:00:34,109 --> 00:00:39,030
from that one change which is a

14
00:00:37,079 --> 00:00:41,609
performance oriented change but it

15
00:00:39,030 --> 00:00:43,109
wasn't really ever measured in terms of

16
00:00:41,609 --> 00:00:46,259
performance or anything like that it's

17
00:00:43,109 --> 00:00:48,058
not really a targeted optimization it

18
00:00:46,259 --> 00:00:50,369
was more just okay we know we're gonna

19
00:00:48,058 --> 00:00:52,049
need a spatial Harkey to begin working

20
00:00:50,369 --> 00:00:56,488
with these things in some way that will

21
00:00:52,049 --> 00:00:59,099
speed them up but even just from that we

22
00:00:56,488 --> 00:01:01,858
already got to the place where an entire

23
00:00:59,100 --> 00:01:04,769
level sized chunk of the game being lit

24
00:01:01,859 --> 00:01:08,478
entire the whole thing being lit with

25
00:01:04,769 --> 00:01:11,939
full ray tracing on right now is already

26
00:01:08,478 --> 00:01:13,769
doing reasonably well now it's not quite

27
00:01:11,938 --> 00:01:16,109
representative so we have a little bit

28
00:01:13,769 --> 00:01:19,140
more we have more stress we should put

29
00:01:16,109 --> 00:01:21,030
on this eventually and so we're not

30
00:01:19,140 --> 00:01:23,728
really quite done knowing exactly how

31
00:01:21,030 --> 00:01:26,009
slow it would be it'd probably be again

32
00:01:23,728 --> 00:01:28,590
a bit more slow the reason for that is

33
00:01:26,009 --> 00:01:30,629
because these trees here are currently

34
00:01:28,590 --> 00:01:32,310
not being lit when we turn on lighting

35
00:01:30,629 --> 00:01:33,539
for like the trees and entities we're

36
00:01:32,310 --> 00:01:36,299
gonna you know I don't know if we're

37
00:01:33,540 --> 00:01:40,530
quite double but we'd be more up in the

38
00:01:36,299 --> 00:01:42,509
200 milliseconds per frame so obviously

39
00:01:40,530 --> 00:01:45,019
we're only getting something like five

40
00:01:42,509 --> 00:01:48,060
frames a second probably in reality here

41
00:01:45,019 --> 00:01:49,890
which isn't bad at the outset but

42
00:01:48,060 --> 00:01:52,590
obviously it's a long way from where we

43
00:01:49,890 --> 00:01:54,450
need to be so what we need to do now is

44
00:01:52,590 --> 00:01:57,600
start looking at how we're gonna make

45
00:01:54,450 --> 00:01:58,740
this stuff work in terms of running at a

46
00:01:57,599 --> 00:02:01,199
reasonable frame rate now there's a

47
00:01:58,739 --> 00:02:03,569
couple things as you can see here one is

48
00:02:01,200 --> 00:02:05,879
that we really need to probably call

49
00:02:03,569 --> 00:02:08,909
what we're actually lighting and what

50
00:02:05,879 --> 00:02:11,489
we're not so if you look at how much of

51
00:02:08,909 --> 00:02:12,669
the world is being simulated we simulate

52
00:02:11,489 --> 00:02:15,849
much more of the

53
00:02:12,669 --> 00:02:17,109
at a time then we really need to see the

54
00:02:15,848 --> 00:02:19,289
reason for that is we wanted to

55
00:02:17,110 --> 00:02:21,640
potentially be able to have it so that

56
00:02:19,289 --> 00:02:24,939
when you're looking at a particular area

57
00:02:21,639 --> 00:02:27,129
of the game a wider region would be

58
00:02:24,939 --> 00:02:30,068
simulated so that stuff that happens off

59
00:02:27,129 --> 00:02:31,599
at least one screen to the side would

60
00:02:30,068 --> 00:02:33,939
still potentially affect what you were

61
00:02:31,599 --> 00:02:35,979
doing so for example if a monster was

62
00:02:33,939 --> 00:02:39,310
chasing you from the previous screen and

63
00:02:35,979 --> 00:02:39,759
you hopped on to this screen we aren't

64
00:02:39,310 --> 00:02:41,318
sure yet

65
00:02:39,759 --> 00:02:44,590
as a Sara Lee but we were considering

66
00:02:41,318 --> 00:02:46,149
that maybe we want that to be something

67
00:02:44,590 --> 00:02:48,519
where the monster could follow you over

68
00:02:46,150 --> 00:02:50,319
and if all we ever did was when you move

69
00:02:48,519 --> 00:02:52,269
to another screen we just only simulate

70
00:02:50,318 --> 00:02:53,979
the screen you're looking at you can't

71
00:02:52,269 --> 00:02:56,980
have really anything dynamic like that

72
00:02:53,979 --> 00:02:58,689
occur so the idea here was that if the

73
00:02:56,979 --> 00:03:00,459
world consisted of a path that looked

74
00:02:58,689 --> 00:03:03,759
like this that you would Traverse maybe

75
00:03:00,459 --> 00:03:05,500
we still you know simulate some number

76
00:03:03,759 --> 00:03:07,179
of screens to the side because the

77
00:03:05,500 --> 00:03:10,539
simulation probably isn't very expensive

78
00:03:07,180 --> 00:03:15,069
at the end of the day and we can afford

79
00:03:10,539 --> 00:03:17,578
to do more of it okay so that's really

80
00:03:15,068 --> 00:03:20,589
all we were thinking of doing here and

81
00:03:17,579 --> 00:03:22,659
given that it makes sense to have all

82
00:03:20,590 --> 00:03:24,489
this stuff pulled into the system what

83
00:03:22,659 --> 00:03:26,590
doesn't make sense however is us

84
00:03:24,489 --> 00:03:28,509
actually processing these things for

85
00:03:26,590 --> 00:03:30,009
lighting because what you can see is

86
00:03:28,509 --> 00:03:31,929
that the lighting that happens over here

87
00:03:30,009 --> 00:03:33,909
is never really gonna affect the

88
00:03:31,930 --> 00:03:35,950
lighting that happens over here and even

89
00:03:33,909 --> 00:03:37,599
if it was gonna affect it we don't have

90
00:03:35,949 --> 00:03:39,069
to capture that right we're still gonna

91
00:03:37,599 --> 00:03:41,620
get good lighting by just doing here

92
00:03:39,069 --> 00:03:43,120
that the users never gonna notice the

93
00:03:41,620 --> 00:03:44,700
error because they're never gonna even

94
00:03:43,120 --> 00:03:47,620
know there was a light over here really

95
00:03:44,699 --> 00:03:49,599
so in terms of visible error in the

96
00:03:47,620 --> 00:03:52,030
system that's just not something that

97
00:03:49,599 --> 00:03:53,469
realistically is going to occur and so

98
00:03:52,030 --> 00:03:55,109
at that point it really doesn't make

99
00:03:53,469 --> 00:03:58,150
sense to have this much stuff in there

100
00:03:55,109 --> 00:04:02,650
so what we would like to do is more

101
00:03:58,150 --> 00:04:04,659
aggressively call what is and is what is

102
00:04:02,650 --> 00:04:06,730
and is not a part of the lighting

103
00:04:04,659 --> 00:04:08,590
solution so that we're not even lighting

104
00:04:06,729 --> 00:04:11,709
this stuff here and that will drop our

105
00:04:08,590 --> 00:04:13,560
frame I'm down quite a bit just in and

106
00:04:11,709 --> 00:04:16,298
of itself so I think we want to do that

107
00:04:13,560 --> 00:04:17,680
before we do anything else for sure but

108
00:04:16,298 --> 00:04:19,569
then in addition to that we're gonna

109
00:04:17,680 --> 00:04:21,158
need more techniques here and those

110
00:04:19,569 --> 00:04:23,079
techniques will probably revolve around

111
00:04:21,158 --> 00:04:24,788
how we build the spatial hierarchy and

112
00:04:23,079 --> 00:04:26,139
how we process the spatial hierarchy

113
00:04:24,788 --> 00:04:27,938
because right now we're doing

114
00:04:26,139 --> 00:04:29,710
the simplest possible thing which is

115
00:04:27,939 --> 00:04:32,169
just building a basic spatial hierarchy

116
00:04:29,709 --> 00:04:33,788
and recasting against it still using the

117
00:04:32,168 --> 00:04:37,448
exact same methods we were using before

118
00:04:33,788 --> 00:04:39,459
with no modification so I think we can

119
00:04:37,449 --> 00:04:41,110
improve on that quite a bit anyway and

120
00:04:39,459 --> 00:04:44,288
we're gonna take a look at that as we go

121
00:04:41,110 --> 00:04:45,788
forward so let's start with introducing

122
00:04:44,288 --> 00:04:47,589
some basic calling to the lighting

123
00:04:45,788 --> 00:04:49,930
system so that the lighting system is

124
00:04:47,589 --> 00:04:51,968
not actually going to process anybody

125
00:04:49,930 --> 00:04:54,310
who's too far outside of the lighting

126
00:04:51,968 --> 00:04:55,748
bounds so what I'm gonna do here is I'm

127
00:04:54,310 --> 00:04:58,899
going to go ahead and I'm gonna load up

128
00:04:55,749 --> 00:05:01,419
the handmade hero project and we're

129
00:04:58,899 --> 00:05:05,168
gonna go and look at the rendering right

130
00:05:01,418 --> 00:05:08,528
here so what we want to do is we want to

131
00:05:05,168 --> 00:05:09,878
go ahead and and take a look at where

132
00:05:08,528 --> 00:05:12,788
we're actually pushing this lighting on

133
00:05:09,879 --> 00:05:15,580
and what I would say is when we do a

134
00:05:12,788 --> 00:05:17,949
push cube to push lighting on I think

135
00:05:15,579 --> 00:05:21,639
what we want to do is get rid of any

136
00:05:17,949 --> 00:05:23,528
lighting that isn't inside a light bound

137
00:05:21,639 --> 00:05:25,930
and I think we want to do that right

138
00:05:23,528 --> 00:05:27,550
away so meaning all of this work that

139
00:05:25,930 --> 00:05:28,658
we're doing to push on lighting in the

140
00:05:27,550 --> 00:05:31,060
first place

141
00:05:28,658 --> 00:05:33,038
while that may get simpler over time as

142
00:05:31,060 --> 00:05:35,860
we optimize this more it's still work

143
00:05:33,038 --> 00:05:39,818
and in so the two ways that we could

144
00:05:35,860 --> 00:05:41,468
attack this problem one by just never

145
00:05:39,819 --> 00:05:43,360
pushing on stuff that is outside the

146
00:05:41,468 --> 00:05:45,158
light bounds and two by calling things

147
00:05:43,360 --> 00:05:46,750
afterwards by looking at everything and

148
00:05:45,158 --> 00:05:49,418
only processing things that are in the

149
00:05:46,750 --> 00:05:50,740
light bounds I think we want to go with

150
00:05:49,418 --> 00:05:52,688
the one that just never puts them into

151
00:05:50,740 --> 00:05:54,009
the lighting solution at all and the

152
00:05:52,689 --> 00:05:56,979
reason that I think that's a good idea

153
00:05:54,009 --> 00:05:59,408
is because that way it just never even

154
00:05:56,978 --> 00:06:01,959
generates the data traffic right if we

155
00:05:59,408 --> 00:06:03,728
can call earlier rather than later that

156
00:06:01,959 --> 00:06:05,348
seems like a better solution so I'm

157
00:06:03,728 --> 00:06:06,699
going to start by trying calling early

158
00:06:05,348 --> 00:06:07,810
and if we find that there's problems

159
00:06:06,699 --> 00:06:09,939
with calling early and we really need to

160
00:06:07,810 --> 00:06:12,519
call later for some reason we can always

161
00:06:09,939 --> 00:06:15,129
switch to that I think that's how I

162
00:06:12,519 --> 00:06:17,500
would like to do it so in here we see we

163
00:06:15,129 --> 00:06:19,389
have light index store what I'd like to

164
00:06:17,500 --> 00:06:23,079
do is say well when we have light index

165
00:06:19,389 --> 00:06:28,240
store going on what I want to do is say

166
00:06:23,079 --> 00:06:30,188
okay if we weren't going to use this

167
00:06:28,240 --> 00:06:31,689
light because it's out of bounds what I

168
00:06:30,189 --> 00:06:34,149
could do is just check right at that

169
00:06:31,689 --> 00:06:38,800
head end we know that if I don't enter

170
00:06:34,149 --> 00:06:39,579
this light index store branch then it

171
00:06:38,800 --> 00:06:40,900
doesn't push the

172
00:06:39,579 --> 00:06:42,908
lighting because we already have the

173
00:06:40,899 --> 00:06:44,408
ability to specify that you don't want

174
00:06:42,908 --> 00:06:48,279
lighting when you put something down

175
00:06:44,408 --> 00:06:55,478
here right so all I have to really do is

176
00:06:48,279 --> 00:06:57,549
say if I wasn't going to get any

177
00:06:55,478 --> 00:07:00,459
lighting on this guy because he's out of

178
00:06:57,550 --> 00:07:07,329
range whatever it is we could just put a

179
00:07:00,459 --> 00:07:13,750
nest inside here we could just put a

180
00:07:07,329 --> 00:07:16,180
nest inside here like so and what I

181
00:07:13,750 --> 00:07:19,269
could do is check the bounds like in

182
00:07:16,180 --> 00:07:21,009
light bounds here if we're not in the

183
00:07:19,269 --> 00:07:31,060
light bounds then I can just overwrite

184
00:07:21,009 --> 00:07:32,740
that light index door with zeros here so

185
00:07:31,060 --> 00:07:34,149
basically when this is being passed in

186
00:07:32,740 --> 00:07:35,620
you can kind of see here we have

187
00:07:34,149 --> 00:07:38,168
lighting next door it's being passed in

188
00:07:35,620 --> 00:07:41,620
as a zero here we know we need to sort

189
00:07:38,168 --> 00:07:43,990
of clear that out light index the light

190
00:07:41,620 --> 00:07:47,050
count here as we have it right is six

191
00:07:43,990 --> 00:07:48,699
times four it's 24 of these right so

192
00:07:47,050 --> 00:07:52,439
what we can do here is say alright if

193
00:07:48,699 --> 00:07:55,629
we're gonna do we can just do with zero

194
00:07:52,439 --> 00:07:59,050
size here and say we're gonna do you

195
00:07:55,629 --> 00:08:03,479
know six times 24 times sighs oops

196
00:07:59,050 --> 00:08:03,478
nice start late an indexed door

197
00:08:03,759 --> 00:08:08,949
we can just say look we're gonna clear

198
00:08:06,579 --> 00:08:11,288
out all of that so if anybody was

199
00:08:08,949 --> 00:08:13,270
previously getting lighting at this

200
00:08:11,288 --> 00:08:14,528
location and now they've moved out we're

201
00:08:13,269 --> 00:08:16,918
just gonna clear it you don't get

202
00:08:14,528 --> 00:08:19,478
lighting anymore sorry my friend okay

203
00:08:16,918 --> 00:08:21,549
and we may need to work on that and make

204
00:08:19,478 --> 00:08:23,439
that more efficient depending on the

205
00:08:21,550 --> 00:08:24,728
circumstances and blah blah blah but for

206
00:08:23,439 --> 00:08:27,098
the most part right this is all we

207
00:08:24,728 --> 00:08:28,478
really need to do all of this stuff here

208
00:08:27,098 --> 00:08:29,860
is gonna get cleaned up a little bit

209
00:08:28,478 --> 00:08:32,098
because remember we're gonna have to put

210
00:08:29,860 --> 00:08:34,599
in a little like light slot allocator

211
00:08:32,099 --> 00:08:36,870
for a number of reasons and so that's

212
00:08:34,599 --> 00:08:39,849
gonna be sort of a separate issue there

213
00:08:36,870 --> 00:08:42,759
anyway so this is what we're doing and

214
00:08:39,849 --> 00:08:43,930
so what we need to do now is just figure

215
00:08:42,759 --> 00:08:45,338
out a way to test whether it's inside

216
00:08:43,929 --> 00:08:48,278
the lighting bounds and what I want to

217
00:08:45,339 --> 00:08:50,800
do for that is you remember the render

218
00:08:48,278 --> 00:08:52,389
group has lighting enabled what I'd like

219
00:08:50,799 --> 00:08:53,349
to do is in addition to say lighting

220
00:08:52,389 --> 00:08:55,299
enabled I'd like to have a

221
00:08:53,350 --> 00:08:58,420
select rectangle three in here which is

222
00:08:55,299 --> 00:09:00,759
like light bounds and so what I want to

223
00:08:58,419 --> 00:09:04,209
do is say once we get one of these cubes

224
00:09:00,759 --> 00:09:07,360
we effectively have knowledge of its min

225
00:09:04,210 --> 00:09:09,759
max right we know where it is because we

226
00:09:07,360 --> 00:09:15,750
build that right here right so if we

227
00:09:09,759 --> 00:09:20,710
wanted to we can build a rectangle and

228
00:09:15,750 --> 00:09:25,269
we could say rectangle min max 3 assume

229
00:09:20,710 --> 00:09:27,310
we have one of these something like that

230
00:09:25,269 --> 00:09:30,340
I could specify the min corner in the

231
00:09:27,309 --> 00:09:36,789
max corner and then I could say if you

232
00:09:30,340 --> 00:09:39,340
know intersects at all the cube bounds

233
00:09:36,789 --> 00:09:43,480
with the what did we call this in this

234
00:09:39,340 --> 00:09:48,250
routine group group with the light

235
00:09:43,480 --> 00:09:50,080
bounds so if they intersect then we know

236
00:09:48,250 --> 00:09:51,279
that will push a light on if they don't

237
00:09:50,080 --> 00:09:52,780
intersect then we're not going to

238
00:09:51,279 --> 00:09:54,909
regardless of whether they told us we

239
00:09:52,779 --> 00:09:58,179
want lighting or not that light bounce

240
00:09:54,909 --> 00:10:01,870
is gonna you know magically make the

241
00:09:58,179 --> 00:10:04,269
lights disappear if they're outside okay

242
00:10:01,870 --> 00:10:06,580
so and remember when I say light bounce

243
00:10:04,269 --> 00:10:08,350
I don't literally mean the boundary for

244
00:10:06,580 --> 00:10:09,550
things that are illuminated I mean the

245
00:10:08,350 --> 00:10:10,779
boundary for things that participate in

246
00:10:09,549 --> 00:10:12,789
the lighting solutions so even just

247
00:10:10,779 --> 00:10:14,589
opaque objects that do not emit light

248
00:10:12,789 --> 00:10:16,719
but are receiving light those are also

249
00:10:14,590 --> 00:10:18,700
discarded so the only things that go

250
00:10:16,720 --> 00:10:23,620
into the lighting solution are ones that

251
00:10:18,700 --> 00:10:25,450
are in this box so what I need to do

252
00:10:23,620 --> 00:10:26,919
here is I need to make sure we have

253
00:10:25,450 --> 00:10:29,950
these functions I don't know if we've

254
00:10:26,919 --> 00:10:32,319
done much with rectangle three eyes so

255
00:10:29,950 --> 00:10:34,990
let's take a look we've got a few

256
00:10:32,320 --> 00:10:37,740
functions here let's see what they are

257
00:10:34,990 --> 00:10:45,789
we have the rectum in max which we need

258
00:10:37,740 --> 00:10:48,399
we have a point test so here's what we

259
00:10:45,789 --> 00:10:49,779
need rectangles intersect so in here we

260
00:10:48,399 --> 00:10:51,789
just need to say all right if the

261
00:10:49,779 --> 00:10:55,120
rectangles intersect then it's inside

262
00:10:51,789 --> 00:11:02,250
and off we go so if we were to run this

263
00:10:55,120 --> 00:11:02,250
it's if we were to run this now

264
00:11:02,730 --> 00:11:10,629
what I should get hopefully what's

265
00:11:08,230 --> 00:11:12,909
happened here I was definitely not

266
00:11:10,629 --> 00:11:20,769
expecting that did I clear too much of

267
00:11:12,909 --> 00:11:22,779
my light oh this just stores the first

268
00:11:20,769 --> 00:11:25,149
one never mind

269
00:11:22,779 --> 00:11:27,100
that's actually great light and next

270
00:11:25,149 --> 00:11:29,439
door can now just be cleared that way I

271
00:11:27,100 --> 00:11:31,560
thought we had I thought it stored the

272
00:11:29,440 --> 00:11:34,840
whole range it doesn't that's fantastic

273
00:11:31,559 --> 00:11:37,349
so what should happen now is we should

274
00:11:34,840 --> 00:11:40,420
get no lighting on most of these things

275
00:11:37,350 --> 00:11:43,149
right or all of them because we have a

276
00:11:40,419 --> 00:11:45,069
light bound that doesn't actually appear

277
00:11:43,149 --> 00:11:47,379
anywhere right there there is no light

278
00:11:45,070 --> 00:11:49,540
bound at the moment so what I should be

279
00:11:47,379 --> 00:11:53,549
able to do is I should now be able to

280
00:11:49,539 --> 00:11:53,549
set that light bound to be something

281
00:11:54,899 --> 00:11:59,139
relatively small that that fits on the

282
00:11:57,610 --> 00:12:01,710
screen and we should be able to see the

283
00:11:59,139 --> 00:12:04,659
lighting only occurring inside that

284
00:12:01,710 --> 00:12:06,879
boundary right that that's what we

285
00:12:04,659 --> 00:12:08,860
should be able to see so when we call

286
00:12:06,879 --> 00:12:10,750
enable lighting what I want to do is

287
00:12:08,860 --> 00:12:14,080
have a rectangle three here that's like

288
00:12:10,750 --> 00:12:19,750
all right the rectangle three is the

289
00:12:14,080 --> 00:12:22,720
lighting bounds and when we do that

290
00:12:19,750 --> 00:12:29,980
switching of it on I'm just gonna set it

291
00:12:22,720 --> 00:12:33,730
there so the light bounds are set here I

292
00:12:29,980 --> 00:12:35,800
also want to just take a look here

293
00:12:33,730 --> 00:12:37,420
I assume the way this works is that

294
00:12:35,799 --> 00:12:40,809
lighting if yeah there it is it'll just

295
00:12:37,419 --> 00:12:42,579
clear that out like so

296
00:12:40,809 --> 00:12:44,199
so if Lighting's not unable to just

297
00:12:42,580 --> 00:12:45,070
ignores that that part of the function I

298
00:12:44,200 --> 00:12:46,750
don't know if that's what we want to do

299
00:12:45,070 --> 00:12:50,100
it eventually maybe we want to clear the

300
00:12:46,750 --> 00:12:50,100
thing as well

301
00:12:54,370 --> 00:12:59,750
I'm not sure how that monster work

302
00:12:56,450 --> 00:13:05,450
eventually oops but we'll deal with that

303
00:12:59,750 --> 00:13:07,309
a little bit later okay so if we want to

304
00:13:05,450 --> 00:13:09,680
just have the same thing as we were

305
00:13:07,309 --> 00:13:11,419
doing before we have the simulation

306
00:13:09,679 --> 00:13:14,719
boundary we could pass there and that

307
00:13:11,419 --> 00:13:18,259
would do lighting on everything right so

308
00:13:14,720 --> 00:13:21,100
the sim bounds for example I believe are

309
00:13:18,259 --> 00:13:24,319
all we would need to do the entire world

310
00:13:21,100 --> 00:13:26,990
that's what we were doing before so if I

311
00:13:24,320 --> 00:13:32,300
pass those I should see everything in

312
00:13:26,990 --> 00:13:33,799
the world get lit now and let's see that

313
00:13:32,299 --> 00:13:36,469
looks about right you know so you're

314
00:13:33,799 --> 00:13:39,679
getting getting all of the stuff in

315
00:13:36,470 --> 00:13:41,269
there we Stephanie still have some bugs

316
00:13:39,679 --> 00:13:42,739
by the way like I remember looking at

317
00:13:41,269 --> 00:13:43,970
this at the end of last stream there's a

318
00:13:42,740 --> 00:13:46,039
couple things that look like they're not

319
00:13:43,970 --> 00:13:48,970
getting processed properly so that's

320
00:13:46,039 --> 00:13:51,559
crummy summer after you have to look at

321
00:13:48,970 --> 00:13:53,360
but anyway when we do enable lighting

322
00:13:51,559 --> 00:13:56,119
now that we passed those same bounds we

323
00:13:53,360 --> 00:13:58,669
can choose to shrink those down to be

324
00:13:56,120 --> 00:14:01,310
much more tight right so they don't have

325
00:13:58,669 --> 00:14:04,099
to be the same size as everything else

326
00:14:01,309 --> 00:14:06,379
so for example the standard room

327
00:14:04,100 --> 00:14:08,570
dimension which tells us roughly where

328
00:14:06,379 --> 00:14:10,580
we're at if I wanted to I could set the

329
00:14:08,570 --> 00:14:14,060
sim bounds I could take that standard

330
00:14:10,580 --> 00:14:17,120
room dimension and I could change how

331
00:14:14,059 --> 00:14:19,399
we're computing the size of it right so

332
00:14:17,120 --> 00:14:25,490
I could say that the light bounds for

333
00:14:19,399 --> 00:14:29,949
example like so are going to just be you

334
00:14:25,490 --> 00:14:32,419
know smaller a smaller size increase I

335
00:14:29,950 --> 00:14:35,060
could also say that since you can see

336
00:14:32,419 --> 00:14:37,459
the whole Z range I could make it so

337
00:14:35,059 --> 00:14:41,959
that the whole Z range does participate

338
00:14:37,460 --> 00:14:47,660
in it so for example the light Minzy

339
00:14:41,960 --> 00:14:50,750
would equal the Simmons E and the max as

340
00:14:47,659 --> 00:14:53,949
well something like this right so we

341
00:14:50,750 --> 00:14:56,539
have the ability to change that now and

342
00:14:53,950 --> 00:14:58,400
we should be able to now more tightly

343
00:14:56,539 --> 00:15:01,009
bound where the light computation is

344
00:14:58,399 --> 00:15:03,139
actually going to occur so if I run the

345
00:15:01,009 --> 00:15:04,639
game you can see we got quite a speed

346
00:15:03,139 --> 00:15:06,799
increase just from doing that because

347
00:15:04,639 --> 00:15:07,909
hey there's a lot less stuff actually

348
00:15:06,799 --> 00:15:10,639
involved in the light

349
00:15:07,909 --> 00:15:13,009
now so let's pull back and we can see

350
00:15:10,639 --> 00:15:14,360
now like all of this stuff out here no

351
00:15:13,009 --> 00:15:16,610
longer participates in the lighting

352
00:15:14,360 --> 00:15:18,289
solution and doesn't need to right

353
00:15:16,610 --> 00:15:20,539
because this is plenty what's getting

354
00:15:18,289 --> 00:15:22,519
simulated here there's definitely no

355
00:15:20,539 --> 00:15:25,069
need to simulate anything more than this

356
00:15:22,519 --> 00:15:27,919
range in fact we could probably do less

357
00:15:25,070 --> 00:15:31,970
so we could probably even go a little

358
00:15:27,919 --> 00:15:35,209
bit further along those lines and say

359
00:15:31,970 --> 00:15:36,649
here that maybe we only need 1.0 times

360
00:15:35,210 --> 00:15:38,720
the standard room to mention there and

361
00:15:36,649 --> 00:15:41,179
that would be sufficient so if we take a

362
00:15:38,720 --> 00:15:43,160
look at this now we're running at a good

363
00:15:41,179 --> 00:15:45,349
30 frames per second they're not quite

364
00:15:43,159 --> 00:15:46,699
60 but you can see that the lighting

365
00:15:45,350 --> 00:15:48,230
solution kind of stops there

366
00:15:46,700 --> 00:15:50,690
so remember looking at it here that's

367
00:15:48,230 --> 00:15:53,720
probably reasonably good it's not quite

368
00:15:50,690 --> 00:15:56,150
right but so we can also see now I'm

369
00:15:53,720 --> 00:16:00,560
glad we can see this bug a little bit

370
00:15:56,149 --> 00:16:02,750
better so if I run the game now one

371
00:16:00,559 --> 00:16:06,229
thing that you can see is I'm getting

372
00:16:02,750 --> 00:16:09,289
buggy behavior from this light so it's

373
00:16:06,230 --> 00:16:10,850
affecting stuff that's not it's it's

374
00:16:09,289 --> 00:16:13,879
sort of getting some weird light

375
00:16:10,850 --> 00:16:15,590
wraparound behavior so we definitely

376
00:16:13,879 --> 00:16:17,149
have some bugs in here and how we're

377
00:16:15,590 --> 00:16:19,190
processing the lighting that we didn't

378
00:16:17,149 --> 00:16:20,689
have before when we move to the spatial

379
00:16:19,190 --> 00:16:22,190
hierarchy we're getting some kind of a

380
00:16:20,690 --> 00:16:24,650
weird like spillover effect that's

381
00:16:22,190 --> 00:16:27,140
happening there so we need to go check

382
00:16:24,649 --> 00:16:28,669
that down as well it's gonna be

383
00:16:27,139 --> 00:16:30,110
something kind of separate that has to

384
00:16:28,669 --> 00:16:31,610
do with our enumeration that has nothing

385
00:16:30,110 --> 00:16:33,560
to do with the light bound stuff we just

386
00:16:31,610 --> 00:16:35,389
put in it was in there at the end of

387
00:16:33,559 --> 00:16:37,339
last dream before we ever start started

388
00:16:35,389 --> 00:16:39,769
mucking with that but you can kind of

389
00:16:37,340 --> 00:16:41,960
see it happening right like you can see

390
00:16:39,769 --> 00:16:44,449
that this stuff over here should

391
00:16:41,960 --> 00:16:46,970
definitely not have this light source

392
00:16:44,450 --> 00:16:49,640
involved with it at all but it's getting

393
00:16:46,970 --> 00:16:52,180
it right and so what's happening there

394
00:16:49,639 --> 00:16:54,439
probably is we've got some index

395
00:16:52,179 --> 00:16:57,799
behavior that's going wrong or something

396
00:16:54,440 --> 00:16:59,630
something weird is happening where

397
00:16:57,799 --> 00:17:02,329
somebody who should be getting light

398
00:16:59,629 --> 00:17:03,379
over here or some computation that would

399
00:17:02,330 --> 00:17:05,120
have been happening over here is

400
00:17:03,379 --> 00:17:08,690
actually writing to lights that are over

401
00:17:05,119 --> 00:17:10,129
here or something like this right so

402
00:17:08,690 --> 00:17:11,990
that's you know what we're looking at

403
00:17:10,130 --> 00:17:13,880
there now the other thing I want to

404
00:17:11,990 --> 00:17:15,950
point out here is this just that change

405
00:17:13,880 --> 00:17:18,080
by itself though considering a smaller

406
00:17:15,950 --> 00:17:21,289
region has already gotten us into

407
00:17:18,079 --> 00:17:24,139
striking distance in terms of

408
00:17:21,289 --> 00:17:25,879
running this at a fast speed and so if

409
00:17:24,140 --> 00:17:28,370
we were to imagine moving this to the

410
00:17:25,880 --> 00:17:31,670
GPU or multi-threading this on the cpu

411
00:17:28,369 --> 00:17:34,909
where we're basically done right this is

412
00:17:31,670 --> 00:17:36,769
fast enough now so we'll have to double

413
00:17:34,910 --> 00:17:41,300
check because we'll have to actually see

414
00:17:36,769 --> 00:17:43,849
I don't know at the moment for example I

415
00:17:41,299 --> 00:17:49,069
don't know what the speed is like in

416
00:17:43,849 --> 00:17:50,689
terms of if we actually have everything

417
00:17:49,069 --> 00:17:52,189
running but should be running and

418
00:17:50,690 --> 00:17:55,039
furthermore as you can kind of see

419
00:17:52,190 --> 00:17:56,390
moving here slows us down because now

420
00:17:55,039 --> 00:17:58,759
there's more stuff on either side of us

421
00:17:56,390 --> 00:18:00,170
so we really need a good test case we

422
00:17:58,759 --> 00:18:03,680
should probably make one where there's

423
00:18:00,170 --> 00:18:06,110
stuff all around us so we can see how we

424
00:18:03,680 --> 00:18:08,029
would actually be getting like this this

425
00:18:06,109 --> 00:18:10,519
puts us back into kind of a not-so-good

426
00:18:08,029 --> 00:18:12,920
range right so when we get more stuff

427
00:18:10,519 --> 00:18:15,379
happening we still looks like we have

428
00:18:12,920 --> 00:18:17,720
more work to do right so we still have a

429
00:18:15,380 --> 00:18:19,070
little bit of a ways to go there so we

430
00:18:17,720 --> 00:18:25,160
probably need to do a little more work

431
00:18:19,069 --> 00:18:26,299
with that etc etc but again still think

432
00:18:25,160 --> 00:18:28,070
we're in pretty good shape here because

433
00:18:26,299 --> 00:18:30,680
we haven't really begun to really push

434
00:18:28,069 --> 00:18:32,629
on this stuff performance wise and so I

435
00:18:30,680 --> 00:18:35,240
think we're you know probably not going

436
00:18:32,630 --> 00:18:37,460
to have too much trouble getting this to

437
00:18:35,240 --> 00:18:38,960
somewhere we want to be but like I said

438
00:18:37,460 --> 00:18:41,059
first things first we got to start

439
00:18:38,960 --> 00:18:43,789
debugging the stuff and we haven't even

440
00:18:41,059 --> 00:18:45,470
really drawn what's going on in any way

441
00:18:43,789 --> 00:18:47,240
yet so we don't really even know how our

442
00:18:45,470 --> 00:18:52,039
spatial partition is working we did kind

443
00:18:47,240 --> 00:18:53,569
of a a pretty arbitrary thing to get our

444
00:18:52,039 --> 00:18:54,799
space book to our spatial partition

445
00:18:53,569 --> 00:18:59,240
working and we don't even really know if

446
00:18:54,799 --> 00:19:00,559
we built one that's any good so

447
00:18:59,240 --> 00:19:02,990
obviously we've got more work to do

448
00:19:00,559 --> 00:19:04,279
there as well okay so the first thing

449
00:19:02,990 --> 00:19:05,809
I'm going to do now that we've fixed

450
00:19:04,279 --> 00:19:07,250
that and we've got the ability to sort

451
00:19:05,809 --> 00:19:08,809
of limit our lighting to thing only

452
00:19:07,250 --> 00:19:10,190
things that are potentially going to

453
00:19:08,809 --> 00:19:12,289
actually be seen by the player or

454
00:19:10,190 --> 00:19:14,360
noticed by the player which is the only

455
00:19:12,289 --> 00:19:16,670
thing we really need lighting for what

456
00:19:14,359 --> 00:19:18,409
I'd like to do now is go into the

457
00:19:16,670 --> 00:19:19,550
lighting calculations and start to

458
00:19:18,410 --> 00:19:21,259
figure out how I could debug these

459
00:19:19,549 --> 00:19:23,419
because they're gonna be very hard to

460
00:19:21,259 --> 00:19:25,069
debug because lighting is a very

461
00:19:23,420 --> 00:19:28,269
nebulous sort of thing it's it's pretty

462
00:19:25,069 --> 00:19:30,169
hard to know what's going on there so

463
00:19:28,269 --> 00:19:34,359
we're gonna have to think of some

464
00:19:30,170 --> 00:19:34,360
creative ways that we can debug this

465
00:19:39,969 --> 00:19:52,099
excuse me I'm a bit stuffy today as is

466
00:19:46,398 --> 00:19:54,939
often the case I think I'm sort of

467
00:19:52,098 --> 00:19:57,319
allergic to everything but only slightly

468
00:19:54,940 --> 00:19:59,389
not in the like I almost died from a bee

469
00:19:57,319 --> 00:20:03,908
sting kind of away but in the like I'm

470
00:19:59,388 --> 00:20:08,058
always a little bit stuffy alright so

471
00:20:03,909 --> 00:20:09,469
what we want to do here is start to take

472
00:20:08,058 --> 00:20:11,298
a look at what our lighting is actually

473
00:20:09,469 --> 00:20:13,969
doing and figure out how we could start

474
00:20:11,298 --> 00:20:15,888
to debug some of the pieces of it now

475
00:20:13,969 --> 00:20:18,859
there's two distinct aspects of this

476
00:20:15,888 --> 00:20:20,209
lighting that can have bugs and we need

477
00:20:18,858 --> 00:20:21,978
to come up with ways of visualizing both

478
00:20:20,210 --> 00:20:25,098
of them probably if we want to do this

479
00:20:21,979 --> 00:20:29,838
well the first thing that can have a bug

480
00:20:25,098 --> 00:20:31,069
is the the placement I'm gonna do the

481
00:20:29,838 --> 00:20:32,778
opposite of the thing I did yesterday by

482
00:20:31,069 --> 00:20:34,788
the way my feet are now too hot this is

483
00:20:32,778 --> 00:20:38,239
the eternal problem so I have to take my

484
00:20:34,788 --> 00:20:40,069
socks off in order to cool them down

485
00:20:38,239 --> 00:20:42,259
remember yesterday they were too cold

486
00:20:40,069 --> 00:20:45,829
and I de put socks on well today I had

487
00:20:42,259 --> 00:20:47,419
to do the absent anyway so what we need

488
00:20:45,829 --> 00:20:50,269
to do is we need to figure out ways to

489
00:20:47,419 --> 00:20:52,788
attack two different kinds of bugs the

490
00:20:50,269 --> 00:20:55,868
first bug that we have is we've got this

491
00:20:52,788 --> 00:20:59,989
system where lighting elements are

492
00:20:55,868 --> 00:21:03,829
enumerated relative to certain like

493
00:20:59,989 --> 00:21:05,989
larger cube elements right so we have

494
00:21:03,829 --> 00:21:10,398
cubes they're not really cubes they're

495
00:21:05,989 --> 00:21:12,499
boxes they don't have to be equal with

496
00:21:10,398 --> 00:21:14,868
height and depth so we've got these

497
00:21:12,499 --> 00:21:16,489
boxes and the boxes are the things that

498
00:21:14,868 --> 00:21:19,968
actually get raycast so when we're a

499
00:21:16,489 --> 00:21:22,819
cast we just ray cast against a box when

500
00:21:19,969 --> 00:21:25,759
we hit the box though we then go ahead

501
00:21:22,819 --> 00:21:27,888
and look at what lighting like

502
00:21:25,759 --> 00:21:30,378
individual light sample points scattered

503
00:21:27,888 --> 00:21:32,028
around the box on the surface of the box

504
00:21:30,378 --> 00:21:33,918
although I guess they don't really even

505
00:21:32,028 --> 00:21:35,118
have to be on the surface of the box if

506
00:21:33,919 --> 00:21:37,788
we don't want them to be they could even

507
00:21:35,118 --> 00:21:40,788
be set apart from the box or other weird

508
00:21:37,788 --> 00:21:43,489
things like this but the lighting points

509
00:21:40,788 --> 00:21:47,179
that are for the moment anyway scattered

510
00:21:43,489 --> 00:21:48,179
along the surface of the box those

511
00:21:47,179 --> 00:21:52,259
lighting points

512
00:21:48,179 --> 00:21:57,090
are enumerated relative to the box so

513
00:21:52,259 --> 00:21:59,519
every box has a list by saying what the

514
00:21:57,089 --> 00:22:01,259
first light sample point is and then

515
00:21:59,519 --> 00:22:08,690
there's a count of how many light sample

516
00:22:01,259 --> 00:22:11,519
points there are that process itself is

517
00:22:08,690 --> 00:22:13,980
one that can have bugs in it separately

518
00:22:11,519 --> 00:22:17,009
right so that that alone the

519
00:22:13,980 --> 00:22:19,829
correspondence of boxes to sample points

520
00:22:17,009 --> 00:22:22,319
that could be buggy

521
00:22:19,829 --> 00:22:23,638
it can't be so buggy that it just

522
00:22:22,319 --> 00:22:25,259
doesn't work at all because we are

523
00:22:23,638 --> 00:22:26,668
seeing some lighting that makes sense so

524
00:22:25,259 --> 00:22:28,829
it's got to be at least somewhat working

525
00:22:26,669 --> 00:22:31,169
but it could have plenty of subtle bugs

526
00:22:28,829 --> 00:22:33,480
like let's say maybe it writes too far

527
00:22:31,169 --> 00:22:35,519
over and so we're filling more than the

528
00:22:33,480 --> 00:22:38,399
number of light sample points in blah

529
00:22:35,519 --> 00:22:41,009
blah blah we wouldn't get crashes in

530
00:22:38,398 --> 00:22:42,748
those scenarios because we pre allocate

531
00:22:41,009 --> 00:22:46,589
a big block for our lighting samples and

532
00:22:42,749 --> 00:22:47,999
we don't use all of it so we could do a

533
00:22:46,589 --> 00:22:50,308
number of simple things already we could

534
00:22:47,999 --> 00:22:51,839
start to assert bounds and make sure

535
00:22:50,308 --> 00:22:53,970
that we don't overwrite and something so

536
00:22:51,839 --> 00:22:55,558
we can already start to put some things

537
00:22:53,970 --> 00:22:58,169
into place that would try to make sure

538
00:22:55,558 --> 00:23:00,210
we're not doing anything weird there and

539
00:22:58,169 --> 00:23:02,610
stuff like that so we can start to

540
00:23:00,210 --> 00:23:05,278
attack that problem just are we properly

541
00:23:02,609 --> 00:23:07,859
corresponding our lights with their

542
00:23:05,278 --> 00:23:11,308
boxes and so on is that happening at all

543
00:23:07,859 --> 00:23:14,609
and are there bugs there so that's one

544
00:23:11,308 --> 00:23:17,638
source of bugs another source of bugs is

545
00:23:14,609 --> 00:23:19,378
the back assignment of them so that's a

546
00:23:17,638 --> 00:23:21,388
source of bugs just the process like the

547
00:23:19,378 --> 00:23:23,609
actual handling of those lights have

548
00:23:21,388 --> 00:23:24,990
what's inside the letting routine right

549
00:23:23,609 --> 00:23:26,278
you know I should probably write these

550
00:23:24,990 --> 00:23:27,569
down because I'm about to enumerate a

551
00:23:26,278 --> 00:23:29,579
bunch of them and then we don't want to

552
00:23:27,569 --> 00:23:31,439
forget them as soon as I say them so

553
00:23:29,579 --> 00:23:34,158
let's just go ahead and pop Milton open

554
00:23:31,440 --> 00:23:34,159
open here

555
00:23:41,569 --> 00:23:53,899
so what we want to do here is we want to

556
00:23:44,690 --> 00:24:00,429
say one you know our cubes or I'll use

557
00:23:53,900 --> 00:24:00,429
the term boxes boxes and sample points

558
00:24:01,990 --> 00:24:25,250
correctly attributed to each other in

559
00:24:14,900 --> 00:24:36,110
the lighting solution to our rendered

560
00:24:25,250 --> 00:24:44,380
elements so the quads picking the

561
00:24:36,109 --> 00:24:44,379
correct sample points because remember

562
00:24:45,369 --> 00:24:50,119
once we compute the lighting solution we

563
00:24:48,140 --> 00:24:51,500
now have a set of lighting points that

564
00:24:50,119 --> 00:24:53,119
are scattered throughout the world and

565
00:24:51,500 --> 00:24:55,220
there's a number of different ways we

566
00:24:53,119 --> 00:24:56,750
can use those letting sample points one

567
00:24:55,220 --> 00:24:58,039
way to use those letting sample points

568
00:24:56,750 --> 00:25:01,429
is to do something like putting them in

569
00:24:58,039 --> 00:25:04,009
a voxel looking them spatially inside

570
00:25:01,429 --> 00:25:07,160
the actual rasterizer right

571
00:25:04,009 --> 00:25:08,390
and I decided I didn't really want to do

572
00:25:07,160 --> 00:25:11,150
that because it's a little bit too

573
00:25:08,390 --> 00:25:12,259
error-prone in my opinion what happens

574
00:25:11,150 --> 00:25:13,580
when you do that is you have to have

575
00:25:12,259 --> 00:25:15,289
good ways of knowing whether or not a

576
00:25:13,579 --> 00:25:17,178
sample point is actually valid for the

577
00:25:15,289 --> 00:25:18,470
surface that you're talking about and a

578
00:25:17,179 --> 00:25:19,790
lot of times you it becomes very

579
00:25:18,470 --> 00:25:21,769
difficult to be able to determine

580
00:25:19,789 --> 00:25:24,589
whether it is or it isn't and there's

581
00:25:21,769 --> 00:25:27,558
entire sets of graphics research papers

582
00:25:24,589 --> 00:25:29,209
believe me tons of them based on

583
00:25:27,558 --> 00:25:31,548
lighting reconstruction from sample

584
00:25:29,210 --> 00:25:34,190
points and there's lots and lots of

585
00:25:31,548 --> 00:25:36,259
artifact issues lots of them and you end

586
00:25:34,190 --> 00:25:38,900
up doing a ton of work to make sure you

587
00:25:36,259 --> 00:25:40,519
don't get artifacts and I don't really

588
00:25:38,900 --> 00:25:42,790
want to do that if I don't have to right

589
00:25:40,519 --> 00:25:45,308
because it costs both development time

590
00:25:42,789 --> 00:25:47,690
that we'd spend developing it but also

591
00:25:45,308 --> 00:25:49,099
potential artifacts that maybe we never

592
00:25:47,690 --> 00:25:51,200
get rid of or that you can't get rid of

593
00:25:49,099 --> 00:25:53,000
it run time and blah blah blah so there

594
00:25:51,200 --> 00:25:54,710
a whole sort of rat's nest there that I

595
00:25:53,000 --> 00:25:56,690
just don't want to get into so we

596
00:25:54,710 --> 00:26:00,048
manually correspond doors when we build

597
00:25:56,690 --> 00:26:01,220
the world we say which which sample

598
00:26:00,048 --> 00:26:03,849
points are going to be used for

599
00:26:01,220 --> 00:26:07,308
interpolation for any given surface and

600
00:26:03,849 --> 00:26:09,859
I think that's great but it means that

601
00:26:07,308 --> 00:26:11,960
we end up in a situation where we have

602
00:26:09,859 --> 00:26:14,689
to make sure that we don't have bugs in

603
00:26:11,960 --> 00:26:16,639
that correspondence right so in addition

604
00:26:14,690 --> 00:26:18,288
to the first part which is inside the

605
00:26:16,638 --> 00:26:20,509
lighting solution when we're actually

606
00:26:18,288 --> 00:26:23,179
doing our light tracing on the boxes are

607
00:26:20,509 --> 00:26:24,798
we actually using the right points every

608
00:26:23,179 --> 00:26:26,269
time we hit a box are we putting the

609
00:26:24,798 --> 00:26:29,869
light in the right place of sample

610
00:26:26,269 --> 00:26:33,319
points that's error possibility one but

611
00:26:29,869 --> 00:26:36,768
error possibility two is that when we go

612
00:26:33,319 --> 00:26:39,109
to pick which sample points to use for a

613
00:26:36,769 --> 00:26:41,929
given quad are we picking the right ones

614
00:26:39,109 --> 00:26:43,849
so there can be an index mismatch in

615
00:26:41,929 --> 00:26:45,710
either case and we need to make sure

616
00:26:43,849 --> 00:26:47,778
that we're not having that right because

617
00:26:45,710 --> 00:26:49,190
either one of those is a bug and there

618
00:26:47,778 --> 00:26:51,009
are two separate kinds of bugs that

619
00:26:49,190 --> 00:26:57,139
could occur even though they're similar

620
00:26:51,009 --> 00:27:03,408
right so then we have number three which

621
00:26:57,138 --> 00:27:04,939
is I guess I'm not sure how to write

622
00:27:03,409 --> 00:27:07,820
this one because I'm not trying to state

623
00:27:04,940 --> 00:27:08,929
it too succinctly let me try to say it

624
00:27:07,819 --> 00:27:12,500
first and then we'll see if something

625
00:27:08,929 --> 00:27:15,070
jumps out that's a easy phrase so when

626
00:27:12,500 --> 00:27:19,669
we move to using a spatial hierarchy

627
00:27:15,069 --> 00:27:22,849
that act of creating the spatial

628
00:27:19,669 --> 00:27:24,649
hierarchy and traversing it if there is

629
00:27:22,849 --> 00:27:28,189
a bug in the traversal of the spatial

630
00:27:24,648 --> 00:27:32,719
hierarchy that somehow produces

631
00:27:28,190 --> 00:27:36,320
erroneous results with hit testing we

632
00:27:32,720 --> 00:27:45,069
may falsely attribute a light hit to a

633
00:27:36,319 --> 00:27:45,069
box that never actually got hit so false

634
00:27:45,700 --> 00:27:52,298
light interactions or see

635
00:27:53,029 --> 00:28:03,319
are there false light interactions

636
00:28:03,680 --> 00:28:22,039
occurring as a result what's happen

637
00:28:12,630 --> 00:28:22,040
there as a result of the spatial

638
00:28:24,019 --> 00:28:36,690
hierarchy traversal so we've got these

639
00:28:35,430 --> 00:28:42,900
three and these are basically

640
00:28:36,690 --> 00:28:44,940
bookkeeping errors right so chances are

641
00:28:42,900 --> 00:28:46,590
we don't have a lot of problems I mean

642
00:28:44,940 --> 00:28:52,799
we might have Rekha in fact I guess I

643
00:28:46,589 --> 00:29:00,119
should write this one down is the ray

644
00:28:52,799 --> 00:29:02,869
caster producing correct box

645
00:29:00,119 --> 00:29:02,869
interceptions

646
00:29:08,230 --> 00:29:12,950
so that's obviously another separate

647
00:29:10,849 --> 00:29:14,589
issue we might be having something where

648
00:29:12,950 --> 00:29:16,970
we're getting spurious intersections

649
00:29:14,589 --> 00:29:19,879
that are not right so the algorithms

650
00:29:16,970 --> 00:29:28,659
busted is producing the wrong results so

651
00:29:19,880 --> 00:29:33,169
these are bugs they are correctness bugs

652
00:29:28,659 --> 00:29:34,880
and we have to look at those those are

653
00:29:33,169 --> 00:29:38,809
just terms in terms of getting a proper

654
00:29:34,880 --> 00:29:47,710
lighting solution we've then got another

655
00:29:38,808 --> 00:29:47,710
one which is is the spatial hierarchy

656
00:29:51,099 --> 00:30:01,189
properly constructed because if we've

657
00:29:57,740 --> 00:30:03,200
got bugs this this would not produce a

658
00:30:01,190 --> 00:30:09,350
correctness bug this is a performance

659
00:30:03,200 --> 00:30:10,759
bug let's say for example we thought we

660
00:30:09,349 --> 00:30:12,949
were producing a spatial hierarchy but

661
00:30:10,759 --> 00:30:15,079
actually we still included tons of boxes

662
00:30:12,950 --> 00:30:16,548
in various nodes of our spatial

663
00:30:15,079 --> 00:30:20,449
hierarchy that didn't need to be there

664
00:30:16,548 --> 00:30:22,220
if we did that we would easily end up in

665
00:30:20,450 --> 00:30:23,750
a situation where we weren't getting as

666
00:30:22,220 --> 00:30:25,278
much performance from our spatial Harkey

667
00:30:23,750 --> 00:30:28,878
as we should have even with no

668
00:30:25,278 --> 00:30:31,579
modifications to the routine that uses

669
00:30:28,878 --> 00:30:33,048
it simply because we're including -

670
00:30:31,579 --> 00:30:35,089
we're over including boxes that just

671
00:30:33,048 --> 00:30:36,888
don't need to be in various nodes so

672
00:30:35,089 --> 00:30:38,089
that is a kind of bug you can have that

673
00:30:36,888 --> 00:30:40,428
doesn't actually produce incorrect

674
00:30:38,089 --> 00:30:42,109
results we could put every box into

675
00:30:40,429 --> 00:30:45,830
every node as page larkey it would run

676
00:30:42,109 --> 00:30:47,178
awful it would be very slow right but it

677
00:30:45,829 --> 00:30:50,000
would still work just fine there would

678
00:30:47,179 --> 00:30:51,740
be no errors in the resulting routine so

679
00:30:50,000 --> 00:30:54,169
there's steadily two classes of bugs we

680
00:30:51,740 --> 00:30:56,000
can have inside a routine like this one

681
00:30:54,169 --> 00:30:58,220
type of bug will actually produce

682
00:30:56,000 --> 00:30:59,538
incorrect results possibly subtle that

683
00:30:58,220 --> 00:31:01,610
are hard to notice but that are

684
00:30:59,538 --> 00:31:02,569
incorrect or blatant like the one we

685
00:31:01,609 --> 00:31:03,979
have right now where it's clear that

686
00:31:02,569 --> 00:31:06,589
there's light going to areas that

687
00:31:03,980 --> 00:31:08,599
shouldn't have light in them so there's

688
00:31:06,589 --> 00:31:10,788
two kinds of bugs we can have there

689
00:31:08,599 --> 00:31:12,230
certainly but then there's you know this

690
00:31:10,788 --> 00:31:14,990
other kind of bug that isn't about

691
00:31:12,230 --> 00:31:18,049
correctness this is about actual

692
00:31:14,990 --> 00:31:20,660
performance where it's like the bug does

693
00:31:18,049 --> 00:31:22,720
didn't show up in any visual sense the

694
00:31:20,660 --> 00:31:25,100
only way you would know it's there is

695
00:31:22,720 --> 00:31:26,990
that maybe your performance is worse

696
00:31:25,099 --> 00:31:29,059
than you think it should be but more

697
00:31:26,990 --> 00:31:32,299
importantly when you go to investigate

698
00:31:29,059 --> 00:31:33,799
you see somehow you create some way of

699
00:31:32,299 --> 00:31:36,710
visualizing the spatial park and you can

700
00:31:33,799 --> 00:31:38,659
see oh wait a minute this is supposed to

701
00:31:36,710 --> 00:31:40,100
only include the things in this area yet

702
00:31:38,660 --> 00:31:44,300
all of these other things are being

703
00:31:40,099 --> 00:31:45,799
included what's going on right so that's

704
00:31:44,299 --> 00:31:47,750
a very different kind of bug but again

705
00:31:45,799 --> 00:31:50,210
it's the same kind of bug for purposes

706
00:31:47,750 --> 00:31:51,769
of this investigation which is that all

707
00:31:50,210 --> 00:31:53,299
of these are things that would be pretty

708
00:31:51,769 --> 00:31:55,339
hard to find

709
00:31:53,299 --> 00:31:57,109
without instrumenting our code in some

710
00:31:55,339 --> 00:31:58,879
way like just looking at the results

711
00:31:57,109 --> 00:32:02,089
isn't really gonna be able to find these

712
00:31:58,880 --> 00:32:03,710
kind of bugs the best we can do is for

713
00:32:02,089 --> 00:32:06,709
really blatant bugs like that lighting

714
00:32:03,710 --> 00:32:08,930
one kind of see that something's off but

715
00:32:06,710 --> 00:32:13,579
it really you know I mean looking at

716
00:32:08,930 --> 00:32:19,299
this right even sort of knowing that

717
00:32:13,579 --> 00:32:19,299
that issue that we've got there

718
00:32:25,289 --> 00:32:31,049
so here is a bunch of light coming into

719
00:32:28,440 --> 00:32:33,180
this corner right and here is where the

720
00:32:31,049 --> 00:32:34,740
light actually is now there's no way

721
00:32:33,180 --> 00:32:36,750
that those two things are getting that

722
00:32:34,740 --> 00:32:38,309
light it's pretty clear that they're

723
00:32:36,750 --> 00:32:40,410
acting like they're sitting over here

724
00:32:38,309 --> 00:32:42,450
getting light from what these guys are

725
00:32:40,410 --> 00:32:45,779
getting light from or something you know

726
00:32:42,450 --> 00:32:51,240
so something's obviously up there but

727
00:32:45,779 --> 00:32:54,990
just looking at that I have no idea why

728
00:32:51,240 --> 00:32:58,380
or how right I just I just don't know I

729
00:32:54,990 --> 00:33:02,359
there's no I mean I can tell it's

730
00:32:58,380 --> 00:33:08,330
probably an index issue maybe because

731
00:33:02,359 --> 00:33:10,979
it's like it seems to be kind of regular

732
00:33:08,329 --> 00:33:13,439
right like you can see it strobing

733
00:33:10,980 --> 00:33:16,769
through as I move so it looks like we've

734
00:33:13,440 --> 00:33:20,130
probably got an index error where you

735
00:33:16,769 --> 00:33:22,980
know these things are getting light from

736
00:33:20,130 --> 00:33:26,250
these indices or something you know I

737
00:33:22,980 --> 00:33:27,930
can tell something's up that probably

738
00:33:26,250 --> 00:33:30,269
has to do with innocents but I don't

739
00:33:27,930 --> 00:33:32,460
really know and I don't think it would

740
00:33:30,269 --> 00:33:36,210
really tell me much about the

741
00:33:32,460 --> 00:33:38,009
circumstance right or how to find it so

742
00:33:36,210 --> 00:33:40,559
I can go double-check the index code

743
00:33:38,009 --> 00:33:42,299
that's about all I can do so again we're

744
00:33:40,559 --> 00:33:44,789
really gonna need something that shows

745
00:33:42,299 --> 00:33:46,680
us more information here so one thing

746
00:33:44,789 --> 00:33:48,659
that we can do and probably the first

747
00:33:46,680 --> 00:33:50,820
thing I'd like to do after I'd like to

748
00:33:48,660 --> 00:33:52,650
go just check the code just by

749
00:33:50,819 --> 00:33:56,609
inspection and get rid of any bugs I can

750
00:33:52,650 --> 00:33:59,519
just find by looking after we do that

751
00:33:56,609 --> 00:34:01,409
what I'd like to do is say okay let's

752
00:33:59,519 --> 00:34:03,720
try to figure out some ways of maybe

753
00:34:01,410 --> 00:34:07,860
like we can pick a lighting element or

754
00:34:03,720 --> 00:34:12,000
pick a voxel I mean a bounding box in

755
00:34:07,859 --> 00:34:14,909
the spatial hierarchy and let's draw it

756
00:34:12,000 --> 00:34:17,219
and draw its children and it's light

757
00:34:14,909 --> 00:34:20,398
sample points so that we can just say

758
00:34:17,219 --> 00:34:22,199
like look okay just inspection wise does

759
00:34:20,398 --> 00:34:25,159
any of this stuff even look like what we

760
00:34:22,199 --> 00:34:31,349
think it looks like or is it just borked

761
00:34:25,159 --> 00:34:32,550
you know okay so let's let's first go

762
00:34:31,349 --> 00:34:34,079
through and take a quick survey of the

763
00:34:32,550 --> 00:34:36,300
code and then let's start trying to

764
00:34:34,079 --> 00:34:37,559
focus on a way we can actually get some

765
00:34:36,300 --> 00:34:41,130
kind of a

766
00:34:37,559 --> 00:34:45,989
a light debug sort of inspection going

767
00:34:41,130 --> 00:34:54,510
on time to switch to coffee from coffee

768
00:34:45,989 --> 00:34:55,949
to lemon water everyone knows it's time

769
00:34:54,510 --> 00:35:01,350
for that so I won't even bother labor

770
00:34:55,949 --> 00:35:04,099
the point okay so let's just start with

771
00:35:01,349 --> 00:35:07,679
the basics here the push cube function

772
00:35:04,099 --> 00:35:10,289
takes the light in next-door and when

773
00:35:07,679 --> 00:35:11,940
you pass this laid in next door it's

774
00:35:10,289 --> 00:35:14,849
expecting to have the letting store

775
00:35:11,940 --> 00:35:16,920
written back into it so the only thing

776
00:35:14,849 --> 00:35:20,130
it knows is where the light in next door

777
00:35:16,920 --> 00:35:21,510
starts and that's fine if we're going to

778
00:35:20,130 --> 00:35:23,760
write into the light index store we can

779
00:35:21,510 --> 00:35:27,830
kind of see here that we pick a light

780
00:35:23,760 --> 00:35:32,310
count and we know that the light index

781
00:35:27,829 --> 00:35:35,639
is going to get advanced right by six

782
00:35:32,309 --> 00:35:37,440
times the light count so in here we say

783
00:35:35,639 --> 00:35:39,089
all right the light index equals the

784
00:35:37,440 --> 00:35:41,099
light next door if we previously stored

785
00:35:39,090 --> 00:35:42,930
one if we didn't we store where we were

786
00:35:41,099 --> 00:35:46,019
and we essentially allocate one out of

787
00:35:42,929 --> 00:35:47,819
here again this is a to do because we

788
00:35:46,019 --> 00:35:50,009
have not really done the roving

789
00:35:47,820 --> 00:35:51,030
allocation of the light sources yet that

790
00:35:50,010 --> 00:35:53,100
hasn't been something that we've

791
00:35:51,030 --> 00:35:55,860
actually done yet it's something that we

792
00:35:53,099 --> 00:35:57,960
need to do and so that's again something

793
00:35:55,860 --> 00:36:00,750
that and for all we know maybe that's

794
00:35:57,960 --> 00:36:03,900
already causing a bug right we we don't

795
00:36:00,750 --> 00:36:07,889
really know we don't really know what's

796
00:36:03,900 --> 00:36:10,460
going on there yet so what we want to do

797
00:36:07,889 --> 00:36:10,460
here is

798
00:36:14,108 --> 00:36:17,440
you know what and in fact now that I'm

799
00:36:16,119 --> 00:36:19,329
looking at that that does look like

800
00:36:17,440 --> 00:36:20,920
something that I don't know that it can

801
00:36:19,329 --> 00:36:24,400
cause a bug yet because we're sending

802
00:36:20,920 --> 00:36:25,960
down the same things all the time but it

803
00:36:24,400 --> 00:36:27,460
could cause a bug when things are coming

804
00:36:25,960 --> 00:36:29,289
in and out of the set now that we do

805
00:36:27,460 --> 00:36:31,960
call things this actually could

806
00:36:29,289 --> 00:36:35,470
potentially cause one I think so I think

807
00:36:31,960 --> 00:36:37,480
we may actually need to address this now

808
00:36:35,469 --> 00:36:42,909
this may be something we want to

809
00:36:37,480 --> 00:36:44,920
actually fix so I'm gonna go ahead and

810
00:36:42,909 --> 00:36:46,838
say that that needs to get addressed so

811
00:36:44,920 --> 00:36:50,289
let's take a look at how this is working

812
00:36:46,838 --> 00:36:52,538
here inside our platform layer we sort

813
00:36:50,289 --> 00:36:54,400
of have the notion that we've got some

814
00:36:52,539 --> 00:36:57,999
number of light when we go ahead and

815
00:36:54,400 --> 00:37:00,369
jump to there oh you know what you

816
00:36:57,998 --> 00:37:01,899
pulled it out in here we have a notion

817
00:37:00,369 --> 00:37:03,608
that there's a certain number of light

818
00:37:01,900 --> 00:37:05,798
indices that we can work with so right

819
00:37:03,608 --> 00:37:08,440
now we're dealing with about 16,000

820
00:37:05,798 --> 00:37:10,900
light elements right that's how many you

821
00:37:08,440 --> 00:37:14,048
can have and so when we write back data

822
00:37:10,900 --> 00:37:16,088
we can have that many of them so what we

823
00:37:14,048 --> 00:37:21,579
want to do here is we want to be able to

824
00:37:16,088 --> 00:37:26,009
allocate these responsibly just like

825
00:37:21,579 --> 00:37:28,390
drip something onto my keyboard oh well

826
00:37:26,009 --> 00:37:32,048
so what I want to do is I want to be

827
00:37:28,389 --> 00:37:33,670
able to process these in some way that

828
00:37:32,048 --> 00:37:35,650
allows me to sort of do a fixed size

829
00:37:33,670 --> 00:37:38,289
allocator kind of a thing on top of them

830
00:37:35,650 --> 00:37:40,358
right so inside here where we do our

831
00:37:38,289 --> 00:37:42,009
letting solution and I've got

832
00:37:40,358 --> 00:37:45,778
information that I'm working on where I

833
00:37:42,009 --> 00:37:48,099
say like all right I've got sort of my

834
00:37:45,778 --> 00:37:50,498
my lighting solution which persists over

835
00:37:48,099 --> 00:37:52,869
time and we do the averaging and so

836
00:37:50,498 --> 00:37:54,909
forth in here what I want to do is have

837
00:37:52,869 --> 00:37:57,999
a way of knowing how these things have

838
00:37:54,909 --> 00:38:02,348
been allocated you know I need some way

839
00:37:57,998 --> 00:38:04,179
of tracking what is and is not used so

840
00:38:02,349 --> 00:38:07,450
what I need to do for that I think is I

841
00:38:04,179 --> 00:38:09,699
need to just have exactly as it sounds

842
00:38:07,449 --> 00:38:12,879
sort of a thing that like partitions

843
00:38:09,699 --> 00:38:14,919
these light light points into blocks

844
00:38:12,880 --> 00:38:16,869
that I hand out and then when someone

845
00:38:14,920 --> 00:38:19,778
doesn't use it anymore I actually have

846
00:38:16,869 --> 00:38:21,190
like a free store that just tracks them

847
00:38:19,778 --> 00:38:23,048
and this is very easy we've done this a

848
00:38:21,190 --> 00:38:24,849
lot of times before and it's pretty

849
00:38:23,048 --> 00:38:26,829
trivial for me to put in something like

850
00:38:24,849 --> 00:38:27,970
this what I'm gonna do is I'm going to

851
00:38:26,829 --> 00:38:31,200
say that we've got

852
00:38:27,969 --> 00:38:33,509
essentially a first free lighting point

853
00:38:31,199 --> 00:38:35,858
here's the lighting points here right

854
00:38:33,510 --> 00:38:38,710
and what I'm gonna do is I'm gonna track

855
00:38:35,858 --> 00:38:43,329
this in here and say first free lighting

856
00:38:38,710 --> 00:38:45,970
point like so and what I want to do is I

857
00:38:43,329 --> 00:38:49,150
want to make this as fast as possible in

858
00:38:45,969 --> 00:38:51,039
on any particular frame so at startup

859
00:38:49,150 --> 00:38:52,960
I'll probably seed it so that it's set

860
00:38:51,039 --> 00:38:56,289
up as a free list that goes all the way

861
00:38:52,960 --> 00:39:00,789
through and then from there it'll always

862
00:38:56,289 --> 00:39:03,039
be a free list for always right so let's

863
00:39:00,789 --> 00:39:05,019
take a look at how that would work what

864
00:39:03,039 --> 00:39:07,710
I want to do here is say okay when we do

865
00:39:05,019 --> 00:39:12,489
this if on the index on the light

866
00:39:07,710 --> 00:39:15,010
storage what we're saying here is if we

867
00:39:12,489 --> 00:39:16,719
already are saying here is the light

868
00:39:15,010 --> 00:39:18,970
index we want to use to store this then

869
00:39:16,719 --> 00:39:20,679
that's great we will use it if this one

870
00:39:18,969 --> 00:39:23,559
doesn't have it then what we have to do

871
00:39:20,679 --> 00:39:25,319
is pull one off of the FreeStore so we

872
00:39:23,559 --> 00:39:28,150
need to have the lighting solution

873
00:39:25,320 --> 00:39:30,550
available to us right that needs to be

874
00:39:28,150 --> 00:39:31,780
something that we can bake in there and

875
00:39:30,550 --> 00:39:33,280
we'll figure out how we want to do that

876
00:39:31,780 --> 00:39:34,930
later it doesn't actually have to be

877
00:39:33,280 --> 00:39:36,040
stored in here it doesn't really matter

878
00:39:34,929 --> 00:39:37,598
where it's stored it could be stored in

879
00:39:36,039 --> 00:39:44,349
the command list for example so you know

880
00:39:37,599 --> 00:39:46,539
we could if we want to inside here right

881
00:39:44,349 --> 00:39:47,980
we could store it so it doesn't really

882
00:39:46,539 --> 00:39:49,210
matter where it's stored this might be

883
00:39:47,980 --> 00:39:50,440
the better place for it because this is

884
00:39:49,210 --> 00:39:52,530
the thing that persists frame-to-frame

885
00:39:50,440 --> 00:39:54,909
through the platform layer and the

886
00:39:52,530 --> 00:40:00,570
opengl so it's probably a little more

887
00:39:54,909 --> 00:40:00,569
appropriate to put it in here so anyway

888
00:40:00,780 --> 00:40:05,920
inside here we could say we've got a

889
00:40:03,190 --> 00:40:08,679
lighting point which we're going to use

890
00:40:05,920 --> 00:40:11,108
to track with the first free lighting

891
00:40:08,679 --> 00:40:14,079
point is and then inside the the

892
00:40:11,108 --> 00:40:15,789
lighting points here these are things

893
00:40:14,079 --> 00:40:18,848
that get pushed on right you can see

894
00:40:15,789 --> 00:40:21,250
them getting pushed on like so and this

895
00:40:18,849 --> 00:40:23,619
is tracking the maximum light index what

896
00:40:21,250 --> 00:40:26,619
we want to do is now stop that entirely

897
00:40:23,619 --> 00:40:28,690
so instead of having a light point count

898
00:40:26,619 --> 00:40:30,338
here we're just not going to do that

899
00:40:28,690 --> 00:40:32,889
anymore we're gonna get rid of that

900
00:40:30,338 --> 00:40:34,750
probably and say we don't have a light

901
00:40:32,889 --> 00:40:36,219
point count anymore we just don't know

902
00:40:34,750 --> 00:40:38,858
how many there are there's just an array

903
00:40:36,219 --> 00:40:40,868
of them or something like this right and

904
00:40:38,858 --> 00:40:41,920
we assume that the array is the proper

905
00:40:40,869 --> 00:40:45,579
size that has

906
00:40:41,920 --> 00:40:50,019
as many as need to be there

907
00:40:45,579 --> 00:40:52,839
and again the lighting point is one of

908
00:40:50,019 --> 00:40:57,639
these things a reflected color and

909
00:40:52,838 --> 00:40:59,409
normal in a position okay all right so

910
00:40:57,639 --> 00:41:02,739
when we're looking at this this thing

911
00:40:59,409 --> 00:41:05,379
doesn't need to occur at all although I

912
00:41:02,739 --> 00:41:06,909
probably should leave in this part where

913
00:41:05,380 --> 00:41:09,130
we just assert that we're not writing

914
00:41:06,909 --> 00:41:15,509
outside of the bounds of the legal size

915
00:41:09,130 --> 00:41:18,730
of our light solution but that's it okay

916
00:41:15,510 --> 00:41:20,380
so now there's no more concept of the

917
00:41:18,730 --> 00:41:22,210
light point count we just have a giant

918
00:41:20,380 --> 00:41:24,068
block of them and they get allocated as

919
00:41:22,210 --> 00:41:25,750
a however they get allocated that's just

920
00:41:24,068 --> 00:41:27,699
how that works

921
00:41:25,750 --> 00:41:30,269
so then when we come through here and we

922
00:41:27,699 --> 00:41:34,230
have our light indexed or when we're

923
00:41:30,269 --> 00:41:41,739
rendering these things we sort of have a

924
00:41:34,230 --> 00:41:44,260
bit of a tough problem and allocation is

925
00:41:41,739 --> 00:41:46,539
easy we just pull something off the free

926
00:41:44,260 --> 00:41:48,460
list the hard part is knowing when to

927
00:41:46,539 --> 00:41:51,818
put something back on to the free list

928
00:41:48,460 --> 00:41:54,400
that's actually very tricky and the

929
00:41:51,818 --> 00:41:58,750
reason that that's tricky is because we

930
00:41:54,400 --> 00:42:00,630
don't know ahead of time what has

931
00:41:58,750 --> 00:42:04,900
happened to the people who previously

932
00:42:00,630 --> 00:42:07,798
were holding light indices right we

933
00:42:04,900 --> 00:42:10,358
don't know whether they got used or not

934
00:42:07,798 --> 00:42:13,329
so in order to track whether they got

935
00:42:10,358 --> 00:42:18,460
used there's a number of ways we could

936
00:42:13,329 --> 00:42:22,180
go about this and I'll do the dumbest

937
00:42:18,460 --> 00:42:28,048
one first but we need a pretty good way

938
00:42:22,179 --> 00:42:28,048
of of handling this

939
00:42:33,409 --> 00:42:40,589
so here's the way I would look at this

940
00:42:36,260 --> 00:42:42,810
let's go ahead and say that when we talk

941
00:42:40,590 --> 00:42:45,690
about the first free lighting point or

942
00:42:42,809 --> 00:42:47,670
things like that let's actually

943
00:42:45,690 --> 00:42:50,670
introduce the concept of a lighting slot

944
00:42:47,670 --> 00:42:53,880
essentially or a lighting chunk and a

945
00:42:50,670 --> 00:42:57,210
lighting chunk is going to be basically

946
00:42:53,880 --> 00:43:00,119
a package of lighting points that are

947
00:42:57,210 --> 00:43:02,099
you know suck 24 or whatever like lights

948
00:43:00,119 --> 00:43:04,650
you know we're gonna have a number that

949
00:43:02,099 --> 00:43:06,000
you allocate at a time so you can

950
00:43:04,650 --> 00:43:08,700
allocate more than that if you want to

951
00:43:06,000 --> 00:43:12,090
but you have to basically deal with them

952
00:43:08,699 --> 00:43:14,099
in terms of these 24 wide chunks or

953
00:43:12,090 --> 00:43:16,289
something like that right so in here we

954
00:43:14,099 --> 00:43:18,630
would have this notion inside the

955
00:43:16,289 --> 00:43:19,769
lighting routine that maybe we say all

956
00:43:18,630 --> 00:43:24,720
right

957
00:43:19,769 --> 00:43:32,429
the light chunk size or light points per

958
00:43:24,719 --> 00:43:36,959
chunk is 24 right nowhere light camp

959
00:43:32,429 --> 00:43:38,909
gets okay so it gets used here let's say

960
00:43:36,960 --> 00:43:44,280
that's fine

961
00:43:38,909 --> 00:43:47,489
so this is going to be light points per

962
00:43:44,280 --> 00:43:49,710
chunk and this is going to be weighed

963
00:43:47,489 --> 00:43:53,909
point chunk divided by the number of

964
00:43:49,710 --> 00:43:55,769
phases so in this case right we're just

965
00:43:53,909 --> 00:43:58,349
talking about saying these this is how

966
00:43:55,769 --> 00:43:59,969
these things are gonna get allocated and

967
00:43:58,349 --> 00:44:03,059
when we allocate them what I'm gonna do

968
00:43:59,969 --> 00:44:04,919
is the light index store this is

969
00:44:03,059 --> 00:44:07,139
actually going to be something else it's

970
00:44:04,920 --> 00:44:09,659
going to be the light chunk store which

971
00:44:07,139 --> 00:44:12,839
is just saying here is what block I'm

972
00:44:09,659 --> 00:44:15,809
storing this thing in so when I look at

973
00:44:12,840 --> 00:44:19,079
the light chunk store and I look over

974
00:44:15,809 --> 00:44:22,320
this instead of assigning this to a

975
00:44:19,079 --> 00:44:23,819
particular instead of looking at the

976
00:44:22,320 --> 00:44:25,769
light index as being exactly what's

977
00:44:23,820 --> 00:44:27,420
stored here instead I'm going to say

978
00:44:25,769 --> 00:44:29,579
that whatever we get out of here is

979
00:44:27,420 --> 00:44:34,470
gonna get multiplied by the light points

980
00:44:29,579 --> 00:44:39,269
per chunk so essentially I'm talking

981
00:44:34,469 --> 00:44:41,969
about keeping 24 points for every one

982
00:44:39,269 --> 00:44:43,469
slot we're actually tracking because

983
00:44:41,969 --> 00:44:45,899
since I know we want to give out these

984
00:44:43,469 --> 00:44:46,449
lights in in quantity because they get

985
00:44:45,900 --> 00:44:48,220
scattered

986
00:44:46,449 --> 00:44:55,210
all over a particular cube or something

987
00:44:48,219 --> 00:44:56,409
I don't want to track each individual

988
00:44:55,210 --> 00:44:58,780
light point because that's just a waste

989
00:44:56,409 --> 00:45:01,838
of bookkeeping I want to track a whole

990
00:44:58,780 --> 00:45:03,250
block that I give out in time so when I

991
00:45:01,838 --> 00:45:05,230
give out a whole block at a time

992
00:45:03,250 --> 00:45:08,650
I give out light points for chunk worth

993
00:45:05,230 --> 00:45:10,838
of that block so then what I want to do

994
00:45:08,650 --> 00:45:13,570
is say all right if I needed to allocate

995
00:45:10,838 --> 00:45:16,210
a new one of these then what I can do is

996
00:45:13,570 --> 00:45:19,990
I like look at whatever the first free

997
00:45:16,210 --> 00:45:22,570
one was and that's again pretty

998
00:45:19,989 --> 00:45:26,229
straightforward so what I can do here is

999
00:45:22,570 --> 00:45:29,920
just say alright I've got in my in my

1000
00:45:26,230 --> 00:45:31,570
lighting platform code I've got my first

1001
00:45:29,920 --> 00:45:34,599
free lighting chunk and that's the thing

1002
00:45:31,570 --> 00:45:37,800
that says where I would get this from

1003
00:45:34,599 --> 00:45:43,440
so I'd say my first free lighting chunk

1004
00:45:37,800 --> 00:45:43,440
the light in next-door is gonna get that

1005
00:45:43,559 --> 00:45:57,159
so maybe I'll do if if it doesn't

1006
00:45:54,400 --> 00:45:59,470
already have one then give it one and

1007
00:45:57,159 --> 00:46:02,469
then assume that if we can get one we

1008
00:45:59,469 --> 00:46:03,848
will use it and if not we won't right so

1009
00:46:02,469 --> 00:46:06,689
we kind of want to do something that

1010
00:46:03,849 --> 00:46:06,690
looks like this

1011
00:46:14,389 --> 00:46:18,598
as we sort of push forward a little bit

1012
00:46:16,650 --> 00:46:21,200
on this so what I want to do is say all

1013
00:46:18,599 --> 00:46:23,068
right if we asked for lighting at all

1014
00:46:21,199 --> 00:46:24,719
then we're going to start doing the

1015
00:46:23,068 --> 00:46:26,248
lighting if we actually intersect the

1016
00:46:24,719 --> 00:46:27,480
light bounds we will process it if we

1017
00:46:26,248 --> 00:46:30,239
don't intersect the light Browns then

1018
00:46:27,480 --> 00:46:33,088
we're just not going to process it we

1019
00:46:30,239 --> 00:46:34,858
then go okay the light count is gonna be

1020
00:46:33,088 --> 00:46:36,900
fixed for now still we're not assigning

1021
00:46:34,858 --> 00:46:40,078
multiple different numbers for cube yet

1022
00:46:36,900 --> 00:46:41,278
although we could write and then we have

1023
00:46:40,079 --> 00:46:42,720
the slight index store where we're going

1024
00:46:41,278 --> 00:46:46,619
to store the light index here

1025
00:46:42,719 --> 00:46:48,389
if there was no lighting last frame for

1026
00:46:46,619 --> 00:46:50,068
this guy then what we'll do is say

1027
00:46:48,389 --> 00:46:51,778
whatever the first free lighting chunk

1028
00:46:50,068 --> 00:46:56,068
is that we've got we'll give it to you

1029
00:46:51,778 --> 00:46:58,559
then what we'll do is say well if this

1030
00:46:56,068 --> 00:47:00,509
was actually valid right if this

1031
00:46:58,559 --> 00:47:04,079
actually had in fact we could do the F

1032
00:47:00,509 --> 00:47:07,199
here before we even do the assignment if

1033
00:47:04,079 --> 00:47:13,519
this was actually valid then whatever is

1034
00:47:07,199 --> 00:47:16,828
at light index stores position right

1035
00:47:13,518 --> 00:47:19,139
this for the lighting point we'll assume

1036
00:47:16,829 --> 00:47:23,068
that that store is the free list on top

1037
00:47:19,139 --> 00:47:27,808
of the existing data so when you are not

1038
00:47:23,068 --> 00:47:30,259
used this is effectively oops a Union

1039
00:47:27,809 --> 00:47:30,259
here

1040
00:47:39,380 --> 00:47:42,380
oops

1041
00:47:43,699 --> 00:47:50,429
so normally connects SP ref C and n but

1042
00:47:48,420 --> 00:47:52,280
in the case where this is not a real

1043
00:47:50,429 --> 00:47:54,779
lighting point and it's actually free

1044
00:47:52,280 --> 00:47:58,050
then we will just store the next free

1045
00:47:54,780 --> 00:48:02,269
pointer there okay so in that case we're

1046
00:47:58,050 --> 00:48:02,269
gonna look up into the command structure

1047
00:48:02,449 --> 00:48:15,210
where is that here and this is how we

1048
00:48:12,539 --> 00:48:18,090
will pull out that information we'll say

1049
00:48:15,210 --> 00:48:20,070
all right the next free chunk that we've

1050
00:48:18,090 --> 00:48:24,720
got is going to be whatever the light

1051
00:48:20,070 --> 00:48:26,460
points were to begin with we expect the

1052
00:48:24,719 --> 00:48:27,029
next free one to be stored in there

1053
00:48:26,460 --> 00:48:34,260
somewhere

1054
00:48:27,030 --> 00:48:39,030
like so so that's it that seems

1055
00:48:34,260 --> 00:48:41,250
reasonable to me and that'll just allow

1056
00:48:39,030 --> 00:48:44,310
us to recycle light chunks as they are

1057
00:48:41,250 --> 00:48:47,909
freed if we don't get one that just

1058
00:48:44,309 --> 00:48:49,710
doesn't get lighting right and so what

1059
00:48:47,909 --> 00:48:58,889
we can do here is also place an

1060
00:48:49,710 --> 00:49:00,840
assertion in here and so this way at

1061
00:48:58,889 --> 00:49:02,369
runtime if we did hit this in the actual

1062
00:49:00,840 --> 00:49:05,579
game you would just get something that

1063
00:49:02,369 --> 00:49:07,980
didn't get lit which is not a huge

1064
00:49:05,579 --> 00:49:09,750
problem it's a visual bug so we don't

1065
00:49:07,980 --> 00:49:12,000
want to happen but it's not the end of

1066
00:49:09,750 --> 00:49:14,190
the world so we still handle that error

1067
00:49:12,000 --> 00:49:15,960
but in debug mode we'd like to know

1068
00:49:14,190 --> 00:49:17,639
because ideally we would never under

1069
00:49:15,960 --> 00:49:19,559
flow we'd always have a big enough array

1070
00:49:17,639 --> 00:49:21,629
that we never have scenes with so many

1071
00:49:19,559 --> 00:49:25,920
things in it that it blows out the

1072
00:49:21,630 --> 00:49:27,329
lighting size right so let me go through

1073
00:49:25,920 --> 00:49:29,849
here we say all right if we got our

1074
00:49:27,329 --> 00:49:32,940
lighting in next door so we can actually

1075
00:49:29,849 --> 00:49:34,829
process what we're doing here and I

1076
00:49:32,940 --> 00:49:36,929
guess to be fair we've already done that

1077
00:49:34,829 --> 00:49:38,639
if so really that just goes in here

1078
00:49:36,929 --> 00:49:40,440
so we don't really need this if anymore

1079
00:49:38,639 --> 00:49:41,639
I suppose well not really because this

1080
00:49:40,440 --> 00:49:43,950
is only in the case where we tried to

1081
00:49:41,639 --> 00:49:46,559
allocate so assuming we could get an

1082
00:49:43,949 --> 00:49:48,149
indexed door at all then we know what

1083
00:49:46,559 --> 00:49:49,980
the light index is so this stuff like

1084
00:49:48,150 --> 00:49:52,200
group light index just goes away because

1085
00:49:49,980 --> 00:49:55,199
we're now using an alligator we don't

1086
00:49:52,199 --> 00:49:56,789
keep a running tally that's gone so now

1087
00:49:55,199 --> 00:50:00,119
we go alright we're going to get the

1088
00:49:56,789 --> 00:50:02,190
lighting index from whatever the the

1089
00:50:00,119 --> 00:50:05,099
chunk says it should be we've got a

1090
00:50:02,190 --> 00:50:08,490
lightbox here that we're gonna pull out

1091
00:50:05,099 --> 00:50:10,920
based on that right and that lightbox

1092
00:50:08,489 --> 00:50:13,619
count that gets written every frame so

1093
00:50:10,920 --> 00:50:15,690
this this is not based on the the chunk

1094
00:50:13,619 --> 00:50:17,630
because it doesn't persist at all right

1095
00:50:15,690 --> 00:50:20,369
this is new every frame so that's fine

1096
00:50:17,630 --> 00:50:22,289
we go through here and just assign

1097
00:50:20,369 --> 00:50:32,779
exactly what we expect to assign so

1098
00:50:22,289 --> 00:50:32,779
that's all good and this all just works

1099
00:50:46,329 --> 00:51:00,039
now I suppose actually there we go

1100
00:50:56,960 --> 00:51:00,039
that's just that

1101
00:51:03,949 --> 00:51:12,529
so now when we do if light index store

1102
00:51:07,099 --> 00:51:15,179
this is really in the wrong place so

1103
00:51:12,530 --> 00:51:20,990
what we want to do here is say if we

1104
00:51:15,179 --> 00:51:20,989
don't intersect and this is light chunk

1105
00:51:35,539 --> 00:51:41,159
sorry I just forgot the name change

1106
00:51:38,579 --> 00:51:43,139
there so when we come through here if we

1107
00:51:41,159 --> 00:51:44,549
have a light chunk store then what we

1108
00:51:43,139 --> 00:51:47,190
need to do is we need to write back to

1109
00:51:44,550 --> 00:51:50,480
it in basically all cases so what we

1110
00:51:47,190 --> 00:51:54,559
want to do here is if we don't intersect

1111
00:51:50,480 --> 00:51:54,559
then we want to make sure we clear it

1112
00:51:54,800 --> 00:52:00,420
right so this needs to get freed and so

1113
00:51:58,710 --> 00:52:03,539
if we're going to clear it what we need

1114
00:52:00,420 --> 00:52:06,780
to do is in here the light chunk store

1115
00:52:03,539 --> 00:52:08,969
actually needs to get pushed on to the

1116
00:52:06,780 --> 00:52:10,860
free list so what we want to do is

1117
00:52:08,969 --> 00:52:13,669
basically have a free light chunk

1118
00:52:10,860 --> 00:52:13,670
function really

1119
00:52:19,650 --> 00:52:24,690
that works like this so we pass in the

1120
00:52:23,070 --> 00:52:30,840
light chunk that we want to free and

1121
00:52:24,690 --> 00:52:32,639
it'll free it and then we get this this

1122
00:52:30,840 --> 00:52:34,050
place where you the whoever on the

1123
00:52:32,639 --> 00:52:35,369
outside who was doing the lighting the

1124
00:52:34,050 --> 00:52:36,630
person who was storing where we were

1125
00:52:35,369 --> 00:52:39,900
doing the lighting that just gets

1126
00:52:36,630 --> 00:52:42,630
overwritten right so I think that's all

1127
00:52:39,900 --> 00:52:43,950
roughly what we want now wouldn't we get

1128
00:52:42,630 --> 00:52:45,599
in here and we do decide to participate

1129
00:52:43,949 --> 00:52:47,519
in the lighting then we're gonna

1130
00:52:45,599 --> 00:52:48,989
allocate if we can't allocate we don't

1131
00:52:47,519 --> 00:52:50,460
need to do anything because if we can't

1132
00:52:48,989 --> 00:52:51,689
allocate we're already we don't need to

1133
00:52:50,460 --> 00:52:54,480
push any on the free list we already

1134
00:52:51,690 --> 00:52:55,559
don't have anything to work with so we

1135
00:52:54,480 --> 00:52:57,389
just wouldn't actually this loop

1136
00:52:55,559 --> 00:53:00,239
assuming we do exit this loop then we're

1137
00:52:57,389 --> 00:53:05,009
all good so in here after we do our

1138
00:53:00,239 --> 00:53:08,879
light index situation we can we can grab

1139
00:53:05,010 --> 00:53:12,170
this out here like so so we don't have

1140
00:53:08,880 --> 00:53:17,280
to worry about that anymore either right

1141
00:53:12,170 --> 00:53:19,940
so I think that's it I think that's I

1142
00:53:17,280 --> 00:53:19,940
think that's it

1143
00:53:21,599 --> 00:53:25,380
so anyway this will probably have to get

1144
00:53:24,179 --> 00:53:27,329
cleaned up a bit and there's more stuff

1145
00:53:25,380 --> 00:53:29,519
that we're gonna want to do here but

1146
00:53:27,329 --> 00:53:40,369
that pretty much tells us what we need

1147
00:53:29,519 --> 00:53:43,170
to know all right now on to phase 2 so

1148
00:53:40,369 --> 00:53:44,639
that will allow us to free light chunks

1149
00:53:43,170 --> 00:53:47,550
and reuse the free light chunks to

1150
00:53:44,639 --> 00:53:49,829
allocate what it won't let us do is let

1151
00:53:47,550 --> 00:53:51,690
us know when an entity that was

1152
00:53:49,829 --> 00:53:53,340
previously holding some light indices

1153
00:53:51,690 --> 00:53:53,880
for example just doesn't need them

1154
00:53:53,340 --> 00:53:55,829
anymore

1155
00:53:53,880 --> 00:53:57,990
because it's not on the screen or

1156
00:53:55,829 --> 00:54:00,860
something or it got deleted right if an

1157
00:53:57,989 --> 00:54:02,879
entity got deleted poof then it's gone

1158
00:54:00,860 --> 00:54:04,860
so there's two ways we can address this

1159
00:54:02,880 --> 00:54:06,510
problem one is we can actually track

1160
00:54:04,860 --> 00:54:08,099
when entities aren't being used anymore

1161
00:54:06,510 --> 00:54:09,600
and say we gotta free the lighting

1162
00:54:08,099 --> 00:54:10,799
points I don't like that solution

1163
00:54:09,599 --> 00:54:13,110
because that solution is very

1164
00:54:10,800 --> 00:54:15,060
error-prone if we ever get a case where

1165
00:54:13,110 --> 00:54:16,500
we get rid of an entity and accidentally

1166
00:54:15,059 --> 00:54:18,539
forget to free its light we've got a

1167
00:54:16,500 --> 00:54:20,039
light memory leak offense effectively

1168
00:54:18,539 --> 00:54:24,389
which would just build up over time and

1169
00:54:20,039 --> 00:54:26,610
ruin the lighting solution so what I'd

1170
00:54:24,389 --> 00:54:29,039
rather do is have some way of just

1171
00:54:26,610 --> 00:54:31,530
storing whether or not these light

1172
00:54:29,039 --> 00:54:33,739
things were used and I think the easiest

1173
00:54:31,530 --> 00:54:35,600
way to do that at first anyway

1174
00:54:33,739 --> 00:54:36,829
and we could compact this down in fact

1175
00:54:35,599 --> 00:54:43,489
I'll put a little - do you want it here

1176
00:54:36,829 --> 00:54:44,599
compact down to a bit array what I want

1177
00:54:43,489 --> 00:54:52,579
to do here is just say

1178
00:54:44,599 --> 00:54:55,460
light point used so here there would be

1179
00:54:52,579 --> 00:54:58,639
a light point used array that light

1180
00:54:55,460 --> 00:55:01,309
point used array and I guess this call

1181
00:54:58,639 --> 00:55:02,900
like this that light point used array is

1182
00:55:01,309 --> 00:55:04,549
just gonna say whether or not on any

1183
00:55:02,900 --> 00:55:09,110
given frame the light points actually

1184
00:55:04,550 --> 00:55:11,090
got used or didn't get used so what

1185
00:55:09,110 --> 00:55:13,660
we're gonna do is when we actually begin

1186
00:55:11,090 --> 00:55:17,750
rendering this has to get cleared right

1187
00:55:13,659 --> 00:55:20,420
and then every time we go to use one of

1188
00:55:17,750 --> 00:55:22,070
these when we actually use it so in this

1189
00:55:20,420 --> 00:55:26,530
case here we're we're actually gonna use

1190
00:55:22,070 --> 00:55:30,080
whatever the light chunk is we say so

1191
00:55:26,530 --> 00:55:32,300
so whatever the light chunk store says

1192
00:55:30,079 --> 00:55:38,539
whatever that thing that got written

1193
00:55:32,300 --> 00:55:41,360
back in there is that is going to that

1194
00:55:38,539 --> 00:55:45,380
is going to get set in the light point

1195
00:55:41,360 --> 00:55:47,660
used array and say okay this light point

1196
00:55:45,380 --> 00:55:52,039
is going to get used now so we set it

1197
00:55:47,659 --> 00:55:55,460
equal to one hopefully that makes some

1198
00:55:52,039 --> 00:55:57,590
sense all right so what we want to do

1199
00:55:55,460 --> 00:55:59,929
now is we want to actually implement the

1200
00:55:57,590 --> 00:56:02,120
things that that handle this stuff right

1201
00:55:59,929 --> 00:56:04,909
so we've got two different functions we

1202
00:56:02,119 --> 00:56:07,309
need to implement here one of them is

1203
00:56:04,909 --> 00:56:10,730
free light chunk free light chunk is

1204
00:56:07,309 --> 00:56:12,860
going to take this game render command

1205
00:56:10,730 --> 00:56:17,990
structure here which stores all of the

1206
00:56:12,860 --> 00:56:19,960
data and it's going to take a light

1207
00:56:17,989 --> 00:56:25,729
chunk index and it's going to free it

1208
00:56:19,960 --> 00:56:30,730
the other kind we're gonna do is a sort

1209
00:56:25,730 --> 00:56:30,730
of like begin light or

1210
00:56:33,389 --> 00:56:37,349
I don't really know what to call this

1211
00:56:35,760 --> 00:56:41,100
but we're gonna call it once before we

1212
00:56:37,349 --> 00:56:43,739
start every frame which is a frame sweep

1213
00:56:41,099 --> 00:56:45,420
here this doesn't need to be in mind not

1214
00:56:43,739 --> 00:56:49,199
that the compiler cares what I say there

1215
00:56:45,420 --> 00:56:50,579
but you know to be fair this is the

1216
00:56:49,199 --> 00:56:52,589
thing we're gonna do every frame that

1217
00:56:50,579 --> 00:56:54,179
sweeps over the light points used and

1218
00:56:52,590 --> 00:56:58,559
sees whether any of them need to get

1219
00:56:54,179 --> 00:57:00,599
freed all right so how this works is

1220
00:56:58,559 --> 00:57:04,500
we'll just say exactly what you would

1221
00:57:00,599 --> 00:57:11,000
think we would say this is just a light

1222
00:57:04,500 --> 00:57:18,619
chunk index here zero light chunk index

1223
00:57:11,000 --> 00:57:21,119
is less than light data with / light

1224
00:57:18,619 --> 00:57:25,349
points per chunk that's how many chunks

1225
00:57:21,119 --> 00:57:28,230
do we have and this is a little

1226
00:57:25,349 --> 00:57:33,750
misleading so it's really gonna be like

1227
00:57:28,230 --> 00:57:35,550
so for example if we take a look at how

1228
00:57:33,750 --> 00:57:44,820
much light data width is it's two times

1229
00:57:35,550 --> 00:57:47,760
8192 I believe is that correct yeah it's

1230
00:57:44,820 --> 00:57:50,340
two times 8192 that's what we've got

1231
00:57:47,760 --> 00:57:52,740
here so that's how many light you know

1232
00:57:50,340 --> 00:57:56,280
things we have to allocate so two times

1233
00:57:52,739 --> 00:57:58,709
81 92 or can I just do answer divide it

1234
00:57:56,280 --> 00:58:01,590
yeah so that total number of lights

1235
00:57:58,710 --> 00:58:04,639
divided by 24 is not an even number

1236
00:58:01,590 --> 00:58:07,980
right so it means we don't actually have

1237
00:58:04,639 --> 00:58:09,989
all the light chunks that we might want

1238
00:58:07,980 --> 00:58:13,199
we actually hemorrhage a little at the

1239
00:58:09,989 --> 00:58:15,089
end that's okay I'm fine with that we

1240
00:58:13,199 --> 00:58:17,009
don't really care about that at all it

1241
00:58:15,090 --> 00:58:18,329
does mean that probably light data width

1242
00:58:17,010 --> 00:58:20,220
should be a multiple of this or we

1243
00:58:18,329 --> 00:58:21,779
should give out 32 / or something but

1244
00:58:20,219 --> 00:58:24,149
again that's all stuff we can do for

1245
00:58:21,780 --> 00:58:25,260
tuning later doesn't really matter so

1246
00:58:24,150 --> 00:58:26,460
when we do the light Chuck frames tree

1247
00:58:25,260 --> 00:58:29,310
we're going to go over each of the

1248
00:58:26,460 --> 00:58:33,769
chunks that we have here in each chunk

1249
00:58:29,309 --> 00:58:38,299
we're gonna see if a light chunk used

1250
00:58:33,769 --> 00:58:38,300
does I actually call it light point used

1251
00:58:40,219 --> 00:58:55,098
I did that's dumb I want to say is like

1252
00:58:45,230 --> 00:58:56,510
chunk used so if it's not used or I

1253
00:58:55,099 --> 00:58:59,330
guess what we could should say we could

1254
00:58:56,510 --> 00:59:03,950
do it this way if we see that the light

1255
00:58:59,329 --> 00:59:06,139
chunk is used we will set it to zero if

1256
00:59:03,949 --> 00:59:16,699
we see that it was not used to be free

1257
00:59:06,139 --> 00:59:18,559
it makes sense that's it so every frame

1258
00:59:16,699 --> 00:59:20,659
we sweep over all the light chunks any

1259
00:59:18,559 --> 00:59:23,420
one that was not used we free any one

1260
00:59:20,659 --> 00:59:26,389
that was used we clear - zero so that we

1261
00:59:23,420 --> 00:59:27,889
have two so we know that on the next

1262
00:59:26,389 --> 00:59:29,509
frame it has to get used again in order

1263
00:59:27,889 --> 00:59:31,670
for us to not free it when we come back

1264
00:59:29,510 --> 00:59:36,590
around in order to free a light chunk

1265
00:59:31,670 --> 00:59:39,769
pretty easy it's just those light points

1266
00:59:36,590 --> 00:59:45,769
there again light chunk index times

1267
00:59:39,769 --> 00:59:48,500
light points per chunk that's the point

1268
00:59:45,769 --> 00:59:50,630
that we're gonna be addressing here

1269
00:59:48,500 --> 00:59:53,260
again we're just using that space

1270
00:59:50,630 --> 00:59:53,260
effectively

1271
00:59:59,190 --> 01:00:04,889
this gives us a next free pointer the

1272
01:00:03,570 --> 01:00:06,510
next free pointer is this going to be

1273
01:00:04,889 --> 01:00:07,710
the commands first free lighting chunk

1274
01:00:06,510 --> 01:00:10,350
and then the first relaying chunk is

1275
01:00:07,710 --> 01:00:13,500
gonna be the light chunk index so that's

1276
01:00:10,349 --> 01:00:17,579
it right

1277
01:00:13,500 --> 01:00:19,889
very very very basic nothing to it so

1278
01:00:17,579 --> 01:00:23,429
all we really need to do now is every

1279
01:00:19,889 --> 01:00:24,869
time we go to begin

1280
01:00:23,429 --> 01:00:27,329
whatever rendering we're gonna be doing

1281
01:00:24,869 --> 01:00:29,789
in our platform layer so for example

1282
01:00:27,329 --> 01:00:31,199
where we deal with this stuff

1283
01:00:29,789 --> 01:00:32,880
the default writing codes we are gonna

1284
01:00:31,199 --> 01:00:36,569
have to provide memory for it so that's

1285
01:00:32,880 --> 01:00:38,820
fine that's really not a big deal but

1286
01:00:36,570 --> 01:00:42,090
more importantly what we have to do is

1287
01:00:38,820 --> 01:00:44,670
we have to sweep through and clear it

1288
01:00:42,090 --> 01:00:48,510
every frame right that's the that's the

1289
01:00:44,670 --> 01:00:50,639
sort of more pressing issue here so what

1290
01:00:48,510 --> 01:00:52,920
we want to do is before we ever do any

1291
01:00:50,639 --> 01:00:56,279
rendering so before anyone could do any

1292
01:00:52,920 --> 01:01:00,090
rendering at all where we would sort of

1293
01:00:56,280 --> 01:01:01,890
do those operations you can see in here

1294
01:01:00,090 --> 01:01:03,260
while we do well global running or

1295
01:01:01,889 --> 01:01:07,489
whatever and we start to do stuff here

1296
01:01:03,260 --> 01:01:09,870
just right at the head end we should I

1297
01:01:07,489 --> 01:01:12,449
guess where so let's see here Xbox

1298
01:01:09,869 --> 01:01:14,609
controllers processing I don't think we

1299
01:01:12,449 --> 01:01:18,899
do any rendering of any kind here so

1300
01:01:14,610 --> 01:01:20,460
here we go with our our back buffer off

1301
01:01:18,900 --> 01:01:21,750
screen puffer nonsense here I don't know

1302
01:01:20,460 --> 01:01:24,139
why that's still there do we even use

1303
01:01:21,750 --> 01:01:24,139
this anymore

1304
01:01:31,889 --> 01:01:41,409
is this actually used I don't know maybe

1305
01:01:34,210 --> 01:01:43,000
it is anyway so when we come through

1306
01:01:41,409 --> 01:01:44,379
here and we we start to do this stuff

1307
01:01:43,000 --> 01:01:46,630
with the game update what I'm gonna do

1308
01:01:44,380 --> 01:01:52,110
is I'm going to call that light from

1309
01:01:46,630 --> 01:01:57,519
frame sweep that's actually gonna get

1310
01:01:52,110 --> 01:02:01,539
performed on the render commands like so

1311
01:01:57,519 --> 01:02:04,719
so this is something that has to live in

1312
01:02:01,539 --> 01:02:08,889
code that can be accessible to the

1313
01:02:04,719 --> 01:02:12,159
platform layer and at least for now and

1314
01:02:08,889 --> 01:02:14,049
so that has to be you know in maybe and

1315
01:02:12,159 --> 01:02:15,509
handmade lighting dot H is a fine place

1316
01:02:14,050 --> 01:02:18,490
for it because it's an entirely lighting

1317
01:02:15,510 --> 01:02:19,780
based thing you know or I don't know

1318
01:02:18,489 --> 01:02:23,769
doesn't really matter where it is at the

1319
01:02:19,780 --> 01:02:24,370
moment because only one person is really

1320
01:02:23,769 --> 01:02:26,739
dealing with it

1321
01:02:24,369 --> 01:02:34,349
so there we go so I think that would be

1322
01:02:26,739 --> 01:02:34,349
fine very well

1323
01:02:45,030 --> 01:02:50,750
I guess commands isn't pulled out here

1324
01:02:51,079 --> 01:03:06,809
under what is this college game under

1325
01:02:58,380 --> 01:03:08,460
commands yeah um so let's just go ahead

1326
01:03:06,809 --> 01:03:09,989
and fix the compile errors lighting

1327
01:03:08,460 --> 01:03:11,699
point does not have an operator arrow

1328
01:03:09,989 --> 01:03:14,869
that's a good point

1329
01:03:11,699 --> 01:03:22,739
it definitely doesn't light point used

1330
01:03:14,869 --> 01:03:27,779
this is light chunk used free light

1331
01:03:22,739 --> 01:03:31,069
chunk conversion from u-32 Oh light

1332
01:03:27,780 --> 01:03:50,040
chunk store is a youth thirty-two store

1333
01:03:31,070 --> 01:04:03,809
so it is that is no longer used like

1334
01:03:50,039 --> 01:04:10,309
point count so I don't know how we want

1335
01:04:03,809 --> 01:04:10,309
to deal with this particular issue I

1336
01:04:10,940 --> 01:04:15,170
guess we need

1337
01:04:24,619 --> 01:04:30,029
we would need some way of figuring out

1338
01:04:27,420 --> 01:04:32,720
which of these light points is actually

1339
01:04:30,030 --> 01:04:32,720
getting used

1340
01:04:33,239 --> 01:04:39,899
I suppose in order for us to do some of

1341
01:04:37,829 --> 01:04:44,039
the things in here let me let's just

1342
01:04:39,900 --> 01:04:47,309
take a look here that's really the last

1343
01:04:44,039 --> 01:04:58,500
of the stuff the issues that we would

1344
01:04:47,309 --> 01:05:00,420
have so if we take a look at where light

1345
01:04:58,500 --> 01:05:02,219
point count is actually used in the

1346
01:05:00,420 --> 01:05:03,659
solution that's what I'd like to do

1347
01:05:02,219 --> 01:05:07,349
because I want to know everywhere we use

1348
01:05:03,659 --> 01:05:09,750
it and see what we want to do about that

1349
01:05:07,349 --> 01:05:11,759
so if I go ahead in here and just get

1350
01:05:09,750 --> 01:05:13,639
rid of the point count I want to see

1351
01:05:11,760 --> 01:05:17,790
what sorts of things we're using it for

1352
01:05:13,639 --> 01:05:21,059
so we loop over the points here rather

1353
01:05:17,789 --> 01:05:24,619
than the boxes right and then we do it I

1354
01:05:21,059 --> 01:05:24,619
think that might change

1355
01:05:34,028 --> 01:05:38,679
here we normalize them down

1356
01:05:50,280 --> 01:05:59,450
and here we sort of store their previous

1357
01:05:53,969 --> 01:05:59,449
values into a separate buffer right

1358
01:06:23,338 --> 01:06:34,318
so I'm not sure what the best way to

1359
01:06:26,199 --> 01:06:34,318
handle this problem is

1360
01:06:46,539 --> 01:06:49,539
hmm

1361
01:07:05,610 --> 01:07:10,390
so I guess what I would say is for

1362
01:07:08,320 --> 01:07:23,110
something like output lighting textures

1363
01:07:10,389 --> 01:07:25,839
I mean Mesa the problem we have is we've

1364
01:07:23,110 --> 01:07:27,400
got lights scattered throughout this

1365
01:07:25,840 --> 01:07:29,470
array and there's holes in it where

1366
01:07:27,400 --> 01:07:33,190
there's stuff that isn't actually used

1367
01:07:29,469 --> 01:07:35,739
by anybody and we need a way of making

1368
01:07:33,190 --> 01:07:37,920
sure that we don't do a bunch of

1369
01:07:35,739 --> 01:07:41,139
processing on stuff that doesn't exist

1370
01:07:37,920 --> 01:07:43,450
I'm not sure to what extent we want to

1371
01:07:41,139 --> 01:07:46,509
go though because it's mostly gonna be

1372
01:07:43,449 --> 01:07:50,169
dense like we're always anytime we

1373
01:07:46,510 --> 01:07:52,210
freeze something we're going to use it

1374
01:07:50,170 --> 01:07:54,430
on the next frame for a new people that

1375
01:07:52,210 --> 01:07:56,679
come in so it's not like we're gonna

1376
01:07:54,429 --> 01:08:01,329
leave huge holes lying around for very

1377
01:07:56,679 --> 01:08:05,019
long so I don't think we want to do too

1378
01:08:01,329 --> 01:08:07,750
much work to deal with that and so most

1379
01:08:05,019 --> 01:08:12,219
of the time here I think we're okay as

1380
01:08:07,750 --> 01:08:22,050
far as just you know processing light

1381
01:08:12,219 --> 01:08:25,029
points as as an array I'm just not sure

1382
01:08:22,050 --> 01:08:28,420
the only place I think we really have a

1383
01:08:25,029 --> 01:08:30,639
problem is we don't ever want to spend

1384
01:08:28,420 --> 01:08:32,260
time computing lighting at points that

1385
01:08:30,640 --> 01:08:38,260
we don't actually need to compute it for

1386
01:08:32,260 --> 01:08:39,579
because there's no box there so for

1387
01:08:38,260 --> 01:08:40,989
something like output loading textures

1388
01:08:39,579 --> 01:08:46,380
I'd be fine with just sweeping over the

1389
01:08:40,989 --> 01:08:49,630
entire array not using the point count

1390
01:08:46,380 --> 01:08:52,460
at all right just using the entire data

1391
01:08:49,630 --> 01:08:55,550
width and that's fine

1392
01:08:52,460 --> 01:08:55,550
[Music]

1393
01:09:01,899 --> 01:09:09,889
because I think we have to keep that

1394
01:09:03,890 --> 01:09:12,170
number relatively low anyway and then

1395
01:09:09,890 --> 01:09:21,619
for example in here we don't really ever

1396
01:09:12,170 --> 01:09:26,929
use I also don't know why get current

1397
01:09:21,619 --> 01:09:28,309
quads I'm not sure what get current

1398
01:09:26,929 --> 01:09:31,579
quads is doing there because we call

1399
01:09:28,310 --> 01:09:34,699
push quad which call itself calls get

1400
01:09:31,579 --> 01:09:35,988
current quads doesn't it so I don't even

1401
01:09:34,698 --> 01:09:38,329
know why I get current clots it's being

1402
01:09:35,988 --> 01:09:40,428
called there that that actually isn't is

1403
01:09:38,329 --> 01:09:42,130
not this routine is not dependent on the

1404
01:09:40,429 --> 01:09:53,949
point count in reality I don't think

1405
01:09:42,130 --> 01:09:53,949
push quad oops yeah

1406
01:09:57,159 --> 01:10:04,269
so that's only if you want actual access

1407
01:10:00,140 --> 01:10:06,650
to that group which we don't care about

1408
01:10:04,270 --> 01:10:11,720
right we're not setting anything on the

1409
01:10:06,649 --> 01:10:14,589
entry there so I'm not sure why we would

1410
01:10:11,720 --> 01:10:14,590
really care about that

1411
01:10:20,649 --> 01:10:30,579
I mean I guess it puts those all in a

1412
01:10:23,439 --> 01:10:38,049
group it makes sure there is a group I

1413
01:10:30,579 --> 01:10:41,800
suppose that's one thing but again you

1414
01:10:38,050 --> 01:10:48,039
know we know we're looping over this

1415
01:10:41,800 --> 01:10:50,170
many things and we know you know that's

1416
01:10:48,039 --> 01:10:51,969
how many each one's going to output so I

1417
01:10:50,170 --> 01:10:54,760
don't really know that it's all that

1418
01:10:51,969 --> 01:11:01,960
complicated anyway I think that's

1419
01:10:54,760 --> 01:11:04,300
basically it so I really think comes

1420
01:11:01,960 --> 01:11:05,529
down to like okay so this routine it

1421
01:11:04,300 --> 01:11:07,659
doesn't really matter what this could

1422
01:11:05,529 --> 01:11:13,689
loop over all of them right this this

1423
01:11:07,658 --> 01:11:16,658
could say loop over all the ones there

1424
01:11:13,689 --> 01:11:21,039
are and just do them and for those that

1425
01:11:16,658 --> 01:11:22,809
are you know invalid values it doesn't

1426
01:11:21,039 --> 01:11:26,408
matter right it'll just process the

1427
01:11:22,810 --> 01:11:28,300
invalid values and stick them in into

1428
01:11:26,408 --> 01:11:30,939
the data stream but no one will ever

1429
01:11:28,300 --> 01:11:32,560
process them so it should be fine so I'm

1430
01:11:30,939 --> 01:11:35,460
pretty sure that's actually fine and

1431
01:11:32,560 --> 01:11:37,840
even if it wasn't we could use the the

1432
01:11:35,460 --> 01:11:40,510
array that marks whether things are used

1433
01:11:37,840 --> 01:11:42,550
or not as our guide and maybe that's the

1434
01:11:40,510 --> 01:11:50,010
right way to do it maybe the chunk index

1435
01:11:42,550 --> 01:11:50,010
is the better better way to do that

1436
01:11:55,198 --> 01:11:58,759
for example I could do this

1437
01:12:19,350 --> 01:12:25,150
right so I could do something like this

1438
01:12:22,390 --> 01:12:44,079
where we just say alright we've got the

1439
01:12:25,149 --> 01:12:49,139
chunk count so for each one of these

1440
01:12:44,079 --> 01:12:49,140
we're just gonna do you know chunk index

1441
01:12:49,619 --> 01:13:01,779
times light points for chunk that's the

1442
01:12:52,689 --> 01:13:03,759
one we'll start at we'll go to the next

1443
01:13:01,779 --> 01:13:08,519
one

1444
01:13:03,760 --> 01:13:15,630
and so in here we'll just say if group

1445
01:13:08,520 --> 01:13:15,630
commands light chunk used chunk index

1446
01:13:19,529 --> 01:13:24,639
then push it down so basically what

1447
01:13:22,840 --> 01:13:26,829
happens here is we only update the

1448
01:13:24,640 --> 01:13:31,600
lighting if we know that this thing was

1449
01:13:26,829 --> 01:13:33,130
used and off we go so that gets us out

1450
01:13:31,600 --> 01:13:36,630
of the business of ever checking that

1451
01:13:33,130 --> 01:13:36,630
particular value anyway

1452
01:13:44,329 --> 01:13:55,739
and that leaves us with just that

1453
01:13:48,090 --> 01:13:57,659
routine I think right so then most of

1454
01:13:55,739 --> 01:13:59,909
what we have to worry about is sort of

1455
01:13:57,659 --> 01:14:02,210
where we were doing this information

1456
01:13:59,909 --> 01:14:04,800
that really should be ping-ponged anyway

1457
01:14:02,210 --> 01:14:10,050
where we have average direction to light

1458
01:14:04,800 --> 01:14:15,440
and last direction that kind of just

1459
01:14:10,050 --> 01:14:15,440
want to be swapped you know I'm saying

1460
01:14:15,920 --> 01:14:22,680
so the you know you really don't want to

1461
01:14:18,569 --> 01:14:26,429
have to do those copies but even if we

1462
01:14:22,680 --> 01:14:31,230
were going to write we can just do the

1463
01:14:26,430 --> 01:14:34,530
whole set for now so we don't really

1464
01:14:31,229 --> 01:14:37,769
have to modify back we just copy more

1465
01:14:34,529 --> 01:14:39,210
than we need to copy and that's fine

1466
01:14:37,770 --> 01:14:42,530
because that's not a particularly slow

1467
01:14:39,210 --> 01:14:42,529
part of the process yet

1468
01:15:00,510 --> 01:15:14,560
signed unsigned mismatched you tell me

1469
01:15:07,229 --> 01:15:17,309
is that so because this gets introduced

1470
01:15:14,560 --> 01:15:17,310
all right

1471
01:15:27,948 --> 01:15:34,079
so I think that's really all we need to

1472
01:15:30,658 --> 01:15:37,829
do now to keep everything actually

1473
01:15:34,079 --> 01:15:44,819
working on an allocation basis so this

1474
01:15:37,829 --> 01:15:48,630
to do this big to do is now gone right

1475
01:15:44,819 --> 01:15:49,279
we've got that we've got that taken care

1476
01:15:48,630 --> 01:15:54,510
of

1477
01:15:49,279 --> 01:15:56,579
so looking a little further down the

1478
01:15:54,510 --> 01:15:57,960
line now if we want to actually get this

1479
01:15:56,579 --> 01:15:59,729
running and then we've got a ton of

1480
01:15:57,960 --> 01:16:05,730
debugging work to do next weekend is

1481
01:15:59,729 --> 01:16:07,459
gonna be debug tastic looking down the

1482
01:16:05,729 --> 01:16:11,250
line a little bit here now we say okay

1483
01:16:07,460 --> 01:16:16,050
when we go into this we're gonna have to

1484
01:16:11,250 --> 01:16:19,738
allocate first so we're gonna have again

1485
01:16:16,050 --> 01:16:23,029
inside the the platform layer here where

1486
01:16:19,738 --> 01:16:27,059
we've got this this bit doing its thing

1487
01:16:23,029 --> 01:16:28,618
we've got our Amit c0 was the last thing

1488
01:16:27,060 --> 01:16:35,000
we do before we now we now need our

1489
01:16:28,618 --> 01:16:35,000
light chunk used memory here

1490
01:16:40,729 --> 01:17:11,519
and that light chunk he used is just

1491
01:17:08,819 --> 01:17:13,319
that so now we've got the light chunk

1492
01:17:11,520 --> 01:17:14,850
used that's going to be zero when it

1493
01:17:13,319 --> 01:17:16,799
passes in which is exactly what we want

1494
01:17:14,850 --> 01:17:18,900
and that's gonna be initialized properly

1495
01:17:16,800 --> 01:17:24,239
so really all we have now is the problem

1496
01:17:18,899 --> 01:17:27,089
of this iteration over the point count

1497
01:17:24,239 --> 01:17:30,420
here and this iteration over the point

1498
01:17:27,090 --> 01:17:35,449
count is again we could just do it chunk

1499
01:17:30,420 --> 01:17:39,899
wise and you only use the ones that are

1500
01:17:35,449 --> 01:17:43,409
are actually active in some situations

1501
01:17:39,899 --> 01:17:45,689
we don't care we could just do them all

1502
01:17:43,409 --> 01:17:48,930
in other situations we probably do care

1503
01:17:45,689 --> 01:17:55,549
so it's a little bit hard to say which

1504
01:17:48,930 --> 01:17:55,550
one we want to do there yeah

1505
01:17:58,710 --> 01:18:03,929
and given the fact that point zero is

1506
01:18:01,408 --> 01:18:06,899
never used here we also have to make

1507
01:18:03,929 --> 01:18:11,940
sure we can account by leaving the first

1508
01:18:06,899 --> 01:18:13,439
chunk open so when we take a look at

1509
01:18:11,939 --> 01:18:16,229
what's happening inside lighting here

1510
01:18:13,439 --> 01:18:21,479
when we do light chunk frames sweep we

1511
01:18:16,229 --> 01:18:24,539
kind of have to say note chunk zero is

1512
01:18:21,479 --> 01:18:28,889
always skipped because the zero light

1513
01:18:24,539 --> 01:18:35,010
index value is reserved for people who

1514
01:18:28,890 --> 01:18:38,340
don't use a light index so in this case

1515
01:18:35,010 --> 01:18:41,280
we never want to actually consider

1516
01:18:38,340 --> 01:18:44,640
somebody free who's in that first chunk

1517
01:18:41,279 --> 01:18:47,670
that chunk is just invalid and we're

1518
01:18:44,640 --> 01:18:49,650
only gonna right we're only gonna deal

1519
01:18:47,670 --> 01:18:51,300
with chunks that come after it so what

1520
01:18:49,649 --> 01:18:53,460
you can see here is kind of what happens

1521
01:18:51,300 --> 01:18:55,590
the first frame when we call light chunk

1522
01:18:53,460 --> 01:19:00,739
frame sweep it builds a free list that

1523
01:18:55,590 --> 01:19:00,739
runs through the entire light chunk set

1524
01:19:01,158 --> 01:19:06,329
and unfortunately it runs through it it

1525
01:19:04,439 --> 01:19:07,710
builds that free list backwards which

1526
01:19:06,329 --> 01:19:09,840
would be probably I don't know if we

1527
01:19:07,710 --> 01:19:12,329
want to fix that by running through the

1528
01:19:09,840 --> 01:19:16,319
list backwards on the frame sweep hard

1529
01:19:12,329 --> 01:19:19,109
to say but you know it's going to build

1530
01:19:16,319 --> 01:19:20,819
the free list everything all chunks

1531
01:19:19,109 --> 01:19:24,448
besides chunk zero will be on the free

1532
01:19:20,819 --> 01:19:27,889
list we could also assert in here that

1533
01:19:24,448 --> 01:19:27,889
we never try to free trunk zero

1534
01:19:36,560 --> 01:19:43,250
and that every chunk we try to free is

1535
01:19:38,300 --> 01:19:46,159
in bounds so yeah all of that seems fine

1536
01:19:43,250 --> 01:19:48,619
so when we loop over our emitters here

1537
01:19:46,159 --> 01:20:02,539
we could loop over them again per chunk

1538
01:19:48,619 --> 01:20:03,890
instead of looping over them and the way

1539
01:20:02,539 --> 01:20:06,979
we would do that is actually pretty

1540
01:20:03,890 --> 01:20:09,470
straightforward so if we were doing this

1541
01:20:06,979 --> 01:20:14,809
loop here I think all we really need to

1542
01:20:09,470 --> 01:20:20,030
do is just say you know start with emit

1543
01:20:14,810 --> 01:20:22,930
index with the first valid point and

1544
01:20:20,029 --> 01:20:27,079
what we can do here is say all right if

1545
01:20:22,930 --> 01:20:38,690
the emit index you know divided by the

1546
01:20:27,079 --> 01:20:39,979
light points for chunk I don't know if

1547
01:20:38,689 --> 01:20:42,169
this is actually the best way to do this

1548
01:20:39,979 --> 01:20:44,359
but if we were just looping over them

1549
01:20:42,170 --> 01:20:56,420
kind of straightforwardly what we could

1550
01:20:44,359 --> 01:21:03,979
say is look if the light chunk used for

1551
01:20:56,420 --> 01:21:09,739
this particular emitter is 0 then we

1552
01:21:03,979 --> 01:21:16,009
just skip it right otherwise we come and

1553
01:21:09,738 --> 01:21:17,329
and we skip skip ahead so we could do

1554
01:21:16,010 --> 01:21:19,280
something like that

1555
01:21:17,329 --> 01:21:21,350
I'm not sure that's the same way to do

1556
01:21:19,279 --> 01:21:22,670
it I'm thinking that the probably the

1557
01:21:21,350 --> 01:21:25,460
same is way to do it is the way we're

1558
01:21:22,670 --> 01:21:28,359
doing it before where we loop over you

1559
01:21:25,460 --> 01:21:28,359
know a chunk index

1560
01:21:31,118 --> 01:21:49,179
oops and then we loop over emitters

1561
01:21:40,689 --> 01:21:57,609
inside there so basically this is just

1562
01:21:49,179 --> 01:22:03,699
an if that wraps this guy and this is a

1563
01:21:57,609 --> 01:22:07,089
if light chunk used chunk index then we

1564
01:22:03,698 --> 01:22:10,629
go ahead otherwise we just don't this is

1565
01:22:07,090 --> 01:22:24,730
going to be chunk index times light

1566
01:22:10,630 --> 01:22:28,029
points for chunk so that's that

1567
01:22:24,729 --> 01:22:33,069
so this would loop us over the chump

1568
01:22:28,029 --> 01:22:34,630
you know chunk by chunk and I think

1569
01:22:33,069 --> 01:22:38,079
that's really all there is to it

1570
01:22:34,630 --> 01:22:42,219
this same loop has to get done in

1571
01:22:38,079 --> 01:22:46,988
multiple places so here for example this

1572
01:22:42,219 --> 01:22:54,130
loop has to occur for the point indices

1573
01:22:46,988 --> 01:22:56,579
as well so point index point index point

1574
01:22:54,130 --> 01:22:56,579
index

1575
01:22:57,949 --> 01:23:01,099
[Music]

1576
01:23:03,229 --> 01:23:14,159
there's all of our stuff for that seems

1577
01:23:10,229 --> 01:23:28,219
like we're missing this is correct

1578
01:23:14,159 --> 01:23:32,960
that's inside the iteration right yeah

1579
01:23:28,220 --> 01:23:36,320
so I think that's correct so this though

1580
01:23:32,960 --> 01:23:36,319
is not

1581
01:23:46,488 --> 01:23:53,549
all right so this is gonna do per chunk

1582
01:23:51,029 --> 01:23:56,609
the old stuff that was going to do we

1583
01:23:53,550 --> 01:23:59,039
were doing to update the decimate

1584
01:23:56,609 --> 01:24:00,420
emission and we're gonna half the rate

1585
01:23:59,039 --> 01:24:01,500
count every time through the duration

1586
01:24:00,420 --> 01:24:05,010
but then we go back up and do another

1587
01:24:01,500 --> 01:24:07,319
iteration again everything based on

1588
01:24:05,010 --> 01:24:14,610
chunks finally we get to the end this

1589
01:24:07,319 --> 01:24:24,960
also has to be done on chunks so there

1590
01:24:14,609 --> 01:24:27,929
we go and I think that's all there is to

1591
01:24:24,960 --> 01:24:30,659
it now we don't actually save this light

1592
01:24:27,930 --> 01:24:33,110
chunk used into the lighting solution so

1593
01:24:30,659 --> 01:24:36,180
I'm gonna have to put that in here so

1594
01:24:33,109 --> 01:24:39,059
like lung this is just a copy out of the

1595
01:24:36,180 --> 01:24:41,520
pointer so light chunk used when we go

1596
01:24:39,060 --> 01:24:44,580
through and we start the lighting when

1597
01:24:41,520 --> 01:24:47,310
we in here are in our letting test that

1598
01:24:44,579 --> 01:24:49,590
we can do solution light chunk used

1599
01:24:47,310 --> 01:24:53,489
those commands a chunk used and that's

1600
01:24:49,590 --> 01:24:55,170
it's really all there is to it

1601
01:24:53,488 --> 01:24:56,698
alright so this is gonna be an epic

1602
01:24:55,170 --> 01:24:58,109
disaster because we just added a ton of

1603
01:24:56,698 --> 01:25:00,539
stuff in here and so we're gonna have a

1604
01:24:58,109 --> 01:25:03,420
lot of debugging to do this is gonna be

1605
01:25:00,539 --> 01:25:04,560
you know this is gonna be rough but

1606
01:25:03,420 --> 01:25:08,130
let's at least run it and see what we

1607
01:25:04,560 --> 01:25:09,870
get and off we go

1608
01:25:08,130 --> 01:25:13,079
so it looks like we're getting an

1609
01:25:09,869 --> 01:25:18,119
assertion here in in our free light free

1610
01:25:13,079 --> 01:25:19,050
light chunk call and it looks like that

1611
01:25:18,119 --> 01:25:22,528
is because

1612
01:25:19,050 --> 01:25:22,529
[Music]

1613
01:25:25,010 --> 01:25:32,210
ah so we wouldn't actually be freeing

1614
01:25:29,659 --> 01:25:35,420
this light chunk if okay I see what's

1615
01:25:32,210 --> 01:25:37,760
going on there that's the case of in if

1616
01:25:35,420 --> 01:25:39,590
we go to free the light chunk we have to

1617
01:25:37,760 --> 01:25:42,619
make sure that there actually was one to

1618
01:25:39,590 --> 01:25:44,779
free so in this case we've got you know

1619
01:25:42,619 --> 01:25:47,720
one that didn't intersect the lighting

1620
01:25:44,779 --> 01:25:49,219
bounds so we can get rid of it what I

1621
01:25:47,720 --> 01:25:51,739
just realized though is we don't

1622
01:25:49,220 --> 01:25:53,480
actually have to do that right away we

1623
01:25:51,738 --> 01:25:55,429
can just wait till the next frame to

1624
01:25:53,479 --> 01:25:56,809
free that guy so I'm not sure if we

1625
01:25:55,430 --> 01:25:59,810
actually need to do that or not

1626
01:25:56,810 --> 01:26:01,250
because the light chunk used part of

1627
01:25:59,810 --> 01:26:03,950
things will automatically have that

1628
01:26:01,250 --> 01:26:13,869
happen so what we could do if we wanted

1629
01:26:03,949 --> 01:26:13,869
to is we could just just nuke that here

1630
01:26:28,109 --> 01:26:35,219
and there's gonna be one more thing

1631
01:26:30,270 --> 01:26:40,260
that's a little nasty here that also

1632
01:26:35,219 --> 01:26:42,750
probably has to happen actually which is

1633
01:26:40,260 --> 01:26:45,630
when somebody comes back into the used

1634
01:26:42,750 --> 01:26:49,229
set we have to sort of do a check

1635
01:26:45,630 --> 01:26:51,630
against their entity ID so again it's a

1636
01:26:49,229 --> 01:26:53,578
little more it's it's definitely a

1637
01:26:51,630 --> 01:26:55,650
little bit more nasty and this is again

1638
01:26:53,578 --> 01:26:57,448
just to try to make it so that we don't

1639
01:26:55,649 --> 01:27:06,420
have the issue of trying to figure out

1640
01:26:57,448 --> 01:27:09,779
when people stop using stop using a

1641
01:27:06,420 --> 01:27:11,309
particular light which is to say that if

1642
01:27:09,779 --> 01:27:13,828
you imagine how this is working right

1643
01:27:11,309 --> 01:27:15,389
now when we go through here and we look

1644
01:27:13,828 --> 01:27:17,488
at what comes in the light roaster we

1645
01:27:15,389 --> 01:27:19,170
just assume that if someone says they

1646
01:27:17,488 --> 01:27:21,569
had a particular light chunk that they

1647
01:27:19,170 --> 01:27:27,719
have it but that may not be true because

1648
01:27:21,569 --> 01:27:29,698
we may have jettisoned it right and so

1649
01:27:27,719 --> 01:27:31,920
if we jettisoned it because it wasn't

1650
01:27:29,698 --> 01:27:38,789
used then we don't have any way of

1651
01:27:31,920 --> 01:27:41,550
confirming you know confirming who

1652
01:27:38,789 --> 01:27:49,289
actually used it so if you take a look

1653
01:27:41,550 --> 01:27:51,360
in in like the entity stuff where we've

1654
01:27:49,289 --> 01:27:56,460
got this entity ID here which is like a

1655
01:27:51,359 --> 01:28:03,439
value that says which which entity is

1656
01:27:56,460 --> 01:28:04,939
doing something right that entity ID is

1657
01:28:03,439 --> 01:28:09,000
[Music]

1658
01:28:04,939 --> 01:28:16,678
something we would need to check to make

1659
01:28:09,000 --> 01:28:23,010
sure that we always have the same person

1660
01:28:16,679 --> 01:28:25,078
occupying a particular light chunk yeah

1661
01:28:23,010 --> 01:28:27,539
and so the only thing that's nasty about

1662
01:28:25,078 --> 01:28:29,340
that is just the degree the amount of

1663
01:28:27,539 --> 01:28:31,408
data that's processed for frame to

1664
01:28:29,340 --> 01:28:36,328
validate that information is pretty

1665
01:28:31,408 --> 01:28:39,750
significant right so like for example

1666
01:28:36,328 --> 01:28:41,788
it's not that hard for us to make that

1667
01:28:39,750 --> 01:28:46,748
work

1668
01:28:41,788 --> 01:28:49,899
when we pass in the light chunk storage

1669
01:28:46,748 --> 01:28:54,340
value here it's not that difficult for

1670
01:28:49,899 --> 01:28:59,018
us to make that work we can just say you

1671
01:28:54,340 --> 01:29:03,550
know you also pass in your entity ID or

1672
01:28:59,019 --> 01:29:05,110
whatever right and we'll track that or

1673
01:29:03,550 --> 01:29:07,659
your unique ID you know whatever it is

1674
01:29:05,109 --> 01:29:10,630
that actually has to be ratified there

1675
01:29:07,658 --> 01:29:12,308
it's not that bad the problem is the

1676
01:29:10,630 --> 01:29:15,130
processing of that array just becomes

1677
01:29:12,309 --> 01:29:17,170
more expensive all the time it's four

1678
01:29:15,130 --> 01:29:19,179
times more expensive now to process it

1679
01:29:17,170 --> 01:29:19,809
because it's got four times more data in

1680
01:29:19,179 --> 01:29:21,279
it

1681
01:29:19,809 --> 01:29:23,019
because it has to store entity IDs

1682
01:29:21,279 --> 01:29:25,210
instead of just storing a used field

1683
01:29:23,019 --> 01:29:26,739
that's 0 or 1 which could have been

1684
01:29:25,210 --> 01:29:29,109
compressed all the way down to a bit in

1685
01:29:26,738 --> 01:29:32,198
fact so it's actually 32 times slower to

1686
01:29:29,109 --> 01:29:38,049
process in a sense and that's not great

1687
01:29:32,198 --> 01:29:43,408
uh so yeah you know I'm trying to think

1688
01:29:38,050 --> 01:29:43,409
if there is some way that we could I

1689
01:29:44,998 --> 01:29:51,569
really just don't see it though I don't

1690
01:29:47,618 --> 01:29:51,569
see a way of making this

1691
01:30:08,698 --> 01:30:11,698
so

1692
01:30:19,868 --> 01:30:24,380
the only other way I can think of that

1693
01:30:22,368 --> 01:30:26,420
this would work and it seems like this

1694
01:30:24,380 --> 01:30:28,578
is just a bad idea so I don't think I

1695
01:30:26,420 --> 01:30:30,559
would want to do it is that entities

1696
01:30:28,578 --> 01:30:32,269
just store their previous letting

1697
01:30:30,559 --> 01:30:35,510
information directly inside their

1698
01:30:32,270 --> 01:30:36,860
storage and then when they pass in push

1699
01:30:35,510 --> 01:30:41,510
cube they just pass what their old

1700
01:30:36,859 --> 01:30:43,609
lighting was right so the reason I don't

1701
01:30:41,510 --> 01:30:44,750
like that is because entities never know

1702
01:30:43,609 --> 01:30:46,368
when they could get rid of that

1703
01:30:44,750 --> 01:30:52,399
information so when they get packed

1704
01:30:46,368 --> 01:30:55,098
back into a particular when they get

1705
01:30:52,399 --> 01:30:57,259
packed back into their storage for a

1706
01:30:55,099 --> 01:30:59,090
given region they're storing all that

1707
01:30:57,260 --> 01:31:01,010
data and that will never get freed so

1708
01:30:59,090 --> 01:31:02,659
the your enemies are always that big

1709
01:31:01,010 --> 01:31:05,059
they they have all the lighting

1710
01:31:02,658 --> 01:31:09,138
information still stored in them now

1711
01:31:05,059 --> 01:31:11,480
maybe that's fine and the reason maybe

1712
01:31:09,139 --> 01:31:14,328
that's fine is maybe what you do is you

1713
01:31:11,479 --> 01:31:15,979
then say you keep a hot list oh well

1714
01:31:14,328 --> 01:31:18,799
yeah this is actually it's way better

1715
01:31:15,979 --> 01:31:21,078
isn't it so I guess then what you do is

1716
01:31:18,800 --> 01:31:23,809
you say okay we just keep a list of all

1717
01:31:21,078 --> 01:31:27,948
the people who went into storage last

1718
01:31:23,809 --> 01:31:30,260
frame not people but regions and if

1719
01:31:27,948 --> 01:31:32,058
those regions aren't loaded this frame

1720
01:31:30,260 --> 01:31:34,969
then we go through and repack them

1721
01:31:32,059 --> 01:31:36,650
without that data so actually that's

1722
01:31:34,969 --> 01:31:39,739
probably just way better because it's

1723
01:31:36,649 --> 01:31:41,779
the exact same bookkeeping meaning you

1724
01:31:39,738 --> 01:31:43,308
just have to check but now you don't

1725
01:31:41,779 --> 01:31:45,460
have a free list or any of this other

1726
01:31:43,309 --> 01:31:45,460
stuff

1727
01:31:52,909 --> 01:32:02,369
that seems strictly better to me in all

1728
01:31:55,710 --> 01:32:05,460
possible ways I think that's just

1729
01:32:02,369 --> 01:32:15,210
smarter I think that's just entirely

1730
01:32:05,460 --> 01:32:18,119
smarter I think I think that is really

1731
01:32:15,210 --> 01:32:20,250
what we should be doing so essentially

1732
01:32:18,119 --> 01:32:22,439
what you could say is okay if the

1733
01:32:20,250 --> 01:32:28,380
lighting is not enabled we don't use

1734
01:32:22,439 --> 01:32:31,019
this light store that's fine but now

1735
01:32:28,380 --> 01:32:39,150
what we're doing instead is the light

1736
01:32:31,020 --> 01:32:49,920
chunks are actually these things this is

1737
01:32:39,149 --> 01:32:52,379
this is way better I think this is way

1738
01:32:49,920 --> 01:32:56,130
better so I think what we do here is we

1739
01:32:52,380 --> 01:33:00,600
say something like this how many lights

1740
01:32:56,130 --> 01:33:04,170
do you want and and where do you want

1741
01:33:00,600 --> 01:33:08,460
them and then I think we just go from

1742
01:33:04,170 --> 01:33:12,149
there right those get packed those get

1743
01:33:08,460 --> 01:33:13,560
packed in to the lighting array and as

1744
01:33:12,149 --> 01:33:15,479
long as you don't overflow the right

1745
01:33:13,560 --> 01:33:16,860
lighting array you're fine

1746
01:33:15,479 --> 01:33:19,129
they get packed in and they get packed

1747
01:33:16,859 --> 01:33:19,130
out

1748
01:33:27,659 --> 01:33:35,489
I think that's just better it it costs

1749
01:33:33,060 --> 01:33:38,130
some to do the pack in in the pack outs

1750
01:33:35,489 --> 01:33:40,590
but the amount you save in bookkeeping

1751
01:33:38,130 --> 01:33:42,270
seems well worth it because there's so

1752
01:33:40,590 --> 01:33:43,949
much Finnick eNOS here that has to get

1753
01:33:42,270 --> 01:33:46,050
done to track all that stuff it seems

1754
01:33:43,949 --> 01:33:48,300
that if you just got rid of it it might

1755
01:33:46,050 --> 01:33:50,340
actually even be faster because you are

1756
01:33:48,300 --> 01:34:02,159
doing a rote process every time that's

1757
01:33:50,340 --> 01:34:05,300
just not you know it just it just seems

1758
01:34:02,159 --> 01:34:05,300
strictly better to do that

1759
01:34:28,770 --> 01:34:40,770
let me take a quick look here so the

1760
01:34:33,219 --> 01:34:40,770
lightbox itself this thing

1761
01:35:07,659 --> 01:35:18,529
hmm hmm I say so the only thing I'm not

1762
01:35:16,609 --> 01:35:28,639
sure about is exactly what I want to

1763
01:35:18,529 --> 01:35:31,579
store there I'm quite certain that I

1764
01:35:28,640 --> 01:35:34,130
want to do this into the entities now so

1765
01:35:31,579 --> 01:35:57,319
I'm pretty sure that that this is gonna

1766
01:35:34,130 --> 01:36:00,170
be the right thing in the long run so in

1767
01:35:57,319 --> 01:36:10,279
here we just need to store the lighting

1768
01:36:00,170 --> 01:36:11,810
points for this entity right and the

1769
01:36:10,279 --> 01:36:14,448
tough thing is we don't know how many

1770
01:36:11,810 --> 01:36:15,830
there are right so we're not sure how

1771
01:36:14,448 --> 01:36:17,238
many of these things we actually would

1772
01:36:15,829 --> 01:36:19,309
store but that's okay because our entity

1773
01:36:17,238 --> 01:36:21,769
struct when we go to do the game code is

1774
01:36:19,310 --> 01:36:23,300
flexible anyway the whole goal of the

1775
01:36:21,770 --> 01:36:25,640
system is that these things get packed

1776
01:36:23,300 --> 01:36:28,070
in in a some kind of a streaming sense

1777
01:36:25,640 --> 01:36:29,750
and then unpacked so that's actually

1778
01:36:28,069 --> 01:36:32,630
going to be fine we have to deal with

1779
01:36:29,750 --> 01:36:34,969
that stuff anyway and it'll be okay so

1780
01:36:32,630 --> 01:36:36,350
most of the problem here and we can just

1781
01:36:34,969 --> 01:36:39,109
assume that this is how it works at the

1782
01:36:36,350 --> 01:36:42,350
moment most of the problem here is just

1783
01:36:39,109 --> 01:36:43,969
going to be that I don't know what we

1784
01:36:42,350 --> 01:36:51,590
want to do about making these things

1785
01:36:43,969 --> 01:36:54,649
flexible from the standpoint of lighting

1786
01:36:51,590 --> 01:36:57,100
that wants to have more information to

1787
01:36:54,649 --> 01:36:59,659
it so in the case where you want to

1788
01:36:57,100 --> 01:37:01,910
smooth lighting between two different

1789
01:36:59,659 --> 01:37:03,670
things or some of the more complex

1790
01:37:01,909 --> 01:37:07,760
lighting stuff that we might want to do

1791
01:37:03,670 --> 01:37:09,800
I'm not sure exactly how that stuff will

1792
01:37:07,760 --> 01:37:14,860
get handled since entities are sort of

1793
01:37:09,800 --> 01:37:14,860
separated that's gonna be tricky

1794
01:37:25,890 --> 01:37:31,200
that's gonna be really tricky and I'm

1795
01:37:28,029 --> 01:37:31,199
not sure how we're gonna handle it

1796
01:37:40,448 --> 01:37:46,219
yeah so just to be a little clearer on

1797
01:37:43,969 --> 01:37:50,288
how the stuff goes down so if we have

1798
01:37:46,219 --> 01:37:50,288
lighting points like just as an example

1799
01:37:57,338 --> 01:38:05,479
where is my belt Emeritus so this is the

1800
01:38:03,588 --> 01:38:07,668
part that I'm just not sure about and to

1801
01:38:05,479 --> 01:38:09,529
be fair this has nothing to do with what

1802
01:38:07,668 --> 01:38:11,208
we're talking about right now it's just

1803
01:38:09,529 --> 01:38:13,669
a thing that like would have come up one

1804
01:38:11,208 --> 01:38:16,458
way or another but let's suppose that we

1805
01:38:13,668 --> 01:38:18,139
have some walls that go like this and

1806
01:38:16,458 --> 01:38:19,849
furthermore I guess we can make a more

1807
01:38:18,139 --> 01:38:24,159
complicated scenario just to illustrate

1808
01:38:19,849 --> 01:38:24,159
the full problem that we're gonna have

1809
01:38:32,239 --> 01:38:37,609
so let's suppose we have a wall section

1810
01:38:34,920 --> 01:38:37,609
that looks like this

1811
01:38:49,929 --> 01:38:54,250
and we make it up out of a couple

1812
01:38:52,300 --> 01:38:57,070
different entities you know here's m2t

1813
01:38:54,250 --> 01:39:02,229
one hears entity two here's in two to

1814
01:38:57,069 --> 01:39:04,210
three now ideally what we would like to

1815
01:39:02,229 --> 01:39:06,908
do for lighting is maybe place a light

1816
01:39:04,210 --> 01:39:15,489
sample point here here you know here

1817
01:39:06,908 --> 01:39:21,479
here maybe some here here here here here

1818
01:39:15,488 --> 01:39:23,619
here there something like that you know

1819
01:39:21,479 --> 01:39:25,599
so we'd like to kind of scatter those

1820
01:39:23,619 --> 01:39:27,460
lighting points along the surface and

1821
01:39:25,600 --> 01:39:29,650
then what we'd like to do is we'd like

1822
01:39:27,460 --> 01:39:33,760
to sample those letting points to

1823
01:39:29,649 --> 01:39:36,369
reproduce the rendering as we go across

1824
01:39:33,760 --> 01:39:38,949
these quads so this quad here you kind

1825
01:39:36,369 --> 01:39:42,099
of want to sample all of these this quad

1826
01:39:38,948 --> 01:39:46,178
here I'd want a sample like all of those

1827
01:39:42,100 --> 01:39:51,630
you know and the problem is we have

1828
01:39:46,179 --> 01:39:51,630
lighting points here sampled per entity

1829
01:39:52,738 --> 01:39:57,879
that want to be shared right so you want

1830
01:39:55,929 --> 01:39:59,440
to you want to have a light sample point

1831
01:39:57,880 --> 01:40:01,869
that gets used for interpolating two

1832
01:39:59,439 --> 01:40:03,669
different and it is quads and the reason

1833
01:40:01,869 --> 01:40:05,260
you want to do that is because you want

1834
01:40:03,670 --> 01:40:09,789
the lighting to line up very closely

1835
01:40:05,260 --> 01:40:12,100
along those seams you know and so the

1836
01:40:09,789 --> 01:40:14,800
problem that I foresee is I don't

1837
01:40:12,100 --> 01:40:23,860
understand how I'm going to get that

1838
01:40:14,800 --> 01:40:26,110
behavior to occur in this system I just

1839
01:40:23,859 --> 01:40:27,880
don't know how I would articulate the

1840
01:40:26,109 --> 01:40:29,769
renderer could handle it just fine I

1841
01:40:27,880 --> 01:40:32,650
just don't know how to tell the renderer

1842
01:40:29,770 --> 01:40:35,110
to do it because I have no idea how I

1843
01:40:32,649 --> 01:40:36,488
would ever take two entities which was

1844
01:40:35,109 --> 01:40:38,619
stored completely separately and have

1845
01:40:36,488 --> 01:40:41,559
completely different data I don't know

1846
01:40:38,619 --> 01:40:43,420
how I would tell it oh hey these two

1847
01:40:41,560 --> 01:40:45,640
entities share this lighting point that

1848
01:40:43,420 --> 01:40:48,960
I need you to use like how would we ever

1849
01:40:45,640 --> 01:40:51,960
do that it seems like totally impossible

1850
01:40:48,960 --> 01:40:51,960
right

1851
01:40:56,819 --> 01:41:01,118
and you know the sorts of things I can

1852
01:40:59,618 --> 01:41:03,158
think of that would allow us to do that

1853
01:41:01,118 --> 01:41:05,738
or just really like fanciful they're

1854
01:41:03,158 --> 01:41:07,748
like oh I'd have to have every lighting

1855
01:41:05,738 --> 01:41:10,208
point is actually sort of its own you

1856
01:41:07,748 --> 01:41:12,908
know they aren't entities per se but

1857
01:41:10,208 --> 01:41:14,800
there's sort of their own identified

1858
01:41:12,908 --> 01:41:18,368
units they're their own identified

1859
01:41:14,800 --> 01:41:21,689
elements you know and those elements are

1860
01:41:18,368 --> 01:41:21,688
actually like

1861
01:41:33,199 --> 01:41:47,399
well okay all right okay um I mean maybe

1862
01:41:44,430 --> 01:41:52,800
I can sort of see one way you could do

1863
01:41:47,399 --> 01:41:56,879
this so maybe one way you could do this

1864
01:41:52,800 --> 01:42:00,690
is by putting lighting into blocks that

1865
01:41:56,880 --> 01:42:05,880
are large so basically I would say all

1866
01:42:00,689 --> 01:42:08,309
right you know let's say I've got a

1867
01:42:05,880 --> 01:42:10,650
screen I'm looking down on and you know

1868
01:42:08,310 --> 01:42:12,720
that's like a dungeon screen so it looks

1869
01:42:10,649 --> 01:42:16,349
like this or something

1870
01:42:12,720 --> 01:42:18,270
here's the walls right and so I've got

1871
01:42:16,350 --> 01:42:21,560
all these lighting sample points strewn

1872
01:42:18,270 --> 01:42:21,560
all over the thing like this

1873
01:42:28,250 --> 01:42:42,989
right I suppose what I could do here is

1874
01:42:35,909 --> 01:42:46,319
say all right suppose I broke lighting

1875
01:42:42,989 --> 01:42:48,029
into chunks where the chunks actually

1876
01:42:46,319 --> 01:42:52,229
are arbitrary sized chunks and are

1877
01:42:48,029 --> 01:42:55,050
entities so lighting is stored as an

1878
01:42:52,229 --> 01:42:59,429
entity some any number that you want

1879
01:42:55,050 --> 01:43:02,550
that you put back into you know a region

1880
01:42:59,430 --> 01:43:04,079
and that lighting entity gets pulled out

1881
01:43:02,550 --> 01:43:05,340
or maybe they're not stored in the

1882
01:43:04,079 --> 01:43:08,069
chunks maybe they're stored separately

1883
01:43:05,340 --> 01:43:11,250
but the point is they do have a unique

1884
01:43:08,069 --> 01:43:13,229
reference ID and so there's a certain

1885
01:43:11,250 --> 01:43:15,720
number of lighting point distributions

1886
01:43:13,229 --> 01:43:20,609
and you pull one out right so I would

1887
01:43:15,720 --> 01:43:27,840
say okay this lighting set of points is

1888
01:43:20,609 --> 01:43:32,569
you know this is point oops this is

1889
01:43:27,840 --> 01:43:35,840
point set X where X is some you know

1890
01:43:32,569 --> 01:43:35,840
unique ID

1891
01:43:41,698 --> 01:43:50,379
so when point set X gets pulled out any

1892
01:43:47,469 --> 01:43:54,760
entity can refer to this point set right

1893
01:43:50,380 --> 01:43:58,599
and so when you go to push an entity on

1894
01:43:54,760 --> 01:44:01,570
you do actually do like a hash-table

1895
01:43:58,599 --> 01:44:03,340
resolve for whether that point set has

1896
01:44:01,569 --> 01:44:05,979
been pulled out yet and if it hasn't you

1897
01:44:03,340 --> 01:44:12,328
pull it out and you block it into

1898
01:44:05,979 --> 01:44:16,000
somewhere in the summer into the region

1899
01:44:12,328 --> 01:44:18,130
so you effectively say okay yeah we've

1900
01:44:16,000 --> 01:44:22,029
got a point set that point set gets

1901
01:44:18,130 --> 01:44:26,489
pulled out of the of sort of the set of

1902
01:44:22,029 --> 01:44:30,250
lighting points that are in flight and

1903
01:44:26,488 --> 01:44:37,058
and you can refer to anybody in it as

1904
01:44:30,250 --> 01:44:38,979
part of your lighting solution I mean

1905
01:44:37,059 --> 01:44:43,170
I'm okay with that

1906
01:44:38,979 --> 01:44:46,988
that seems fine to me

1907
01:44:43,170 --> 01:44:53,800
and then we just don't have that problem

1908
01:44:46,988 --> 01:44:56,078
anymore because now you really can say

1909
01:44:53,800 --> 01:44:57,730
hey this is the lights that I use and if

1910
01:44:56,078 --> 01:44:59,139
those lights are still around great if

1911
01:44:57,729 --> 01:45:01,928
they're not still around then you just

1912
01:44:59,139 --> 01:45:04,889
have to recreate them and so that would

1913
01:45:01,929 --> 01:45:04,889
probably just work

1914
01:45:17,828 --> 01:45:27,819
yeah I mean I think that's fine that's

1915
01:45:24,300 --> 01:45:40,179
probably fine yeah I mean I think that

1916
01:45:27,819 --> 01:45:43,139
that's okay and that allows entities to

1917
01:45:40,179 --> 01:45:45,969
share information about lighting in some

1918
01:45:43,139 --> 01:45:48,069
predefined way as necessary which we

1919
01:45:45,969 --> 01:45:49,719
kind of need to do for like continuous

1920
01:45:48,069 --> 01:45:57,340
wall segments and stuff like that I

1921
01:45:49,719 --> 01:45:59,500
think I mean the only other option I

1922
01:45:57,340 --> 01:46:01,750
could think of is that when points

1923
01:45:59,500 --> 01:46:08,670
lighting points get added to the system

1924
01:46:01,750 --> 01:46:12,340
they get merged if they're the same

1925
01:46:08,670 --> 01:46:13,929
that's another option we could do so

1926
01:46:12,340 --> 01:46:15,760
that would be you just have entities

1927
01:46:13,929 --> 01:46:17,170
specify the light points each entity

1928
01:46:15,760 --> 01:46:18,929
specifies the light points that it

1929
01:46:17,170 --> 01:46:22,118
actually wants when these light points

1930
01:46:18,929 --> 01:46:26,679
come into existence they get merged

1931
01:46:22,118 --> 01:46:34,569
based on their location in some kind of

1932
01:46:26,679 --> 01:46:36,699
a spatial merge to be honest I'm not

1933
01:46:34,569 --> 01:46:38,948
really sure which of those is gonna be

1934
01:46:36,698 --> 01:46:41,428
better in the long run it's pretty

1935
01:46:38,948 --> 01:46:41,428
tricky

1936
01:46:57,908 --> 01:47:04,899
I guess I what I would say is that it

1937
01:47:01,479 --> 01:47:07,958
does seem a little bit like this way is

1938
01:47:04,899 --> 01:47:09,938
to static so if you were to use point

1939
01:47:07,958 --> 01:47:11,979
sets in this way well it does sound kind

1940
01:47:09,939 --> 01:47:14,199
of elegant at first what I'm thinking

1941
01:47:11,979 --> 01:47:16,150
about is assuming you want things like

1942
01:47:14,198 --> 01:47:18,819
destructible walls or things like this

1943
01:47:16,149 --> 01:47:20,018
which we might want in this game you end

1944
01:47:18,819 --> 01:47:21,488
up having a lot of problems because

1945
01:47:20,019 --> 01:47:23,229
you're gonna have to update these point

1946
01:47:21,488 --> 01:47:24,609
sets and you end up in a situation where

1947
01:47:23,229 --> 01:47:26,050
entities can't really be treated

1948
01:47:24,609 --> 01:47:27,668
individually anymore because they've got

1949
01:47:26,050 --> 01:47:29,889
this sort of information finding we've

1950
01:47:27,668 --> 01:47:31,479
kind of tried to stay away from that so

1951
01:47:29,889 --> 01:47:33,760
that everything is kind of this flexible

1952
01:47:31,479 --> 01:47:35,409
independent element so I guess what I

1953
01:47:33,760 --> 01:47:36,849
would say is maybe that's a good

1954
01:47:35,408 --> 01:47:39,129
argument against the point sets and

1955
01:47:36,849 --> 01:47:40,779
maybe what we have to do is we have to

1956
01:47:39,130 --> 01:47:43,689
do something where we can just say all

1957
01:47:40,779 --> 01:47:45,340
right light points get merged when they

1958
01:47:43,689 --> 01:47:47,619
come in if we want that to happen it's a

1959
01:47:45,340 --> 01:47:49,779
post pass that happens and you're just

1960
01:47:47,618 --> 01:47:51,759
gonna have to make that work because we

1961
01:47:49,779 --> 01:47:55,840
don't want to have to specify this stuff

1962
01:47:51,760 --> 01:47:57,309
ahead of time you know I'm saying so if

1963
01:47:55,840 --> 01:47:58,840
that were the case then yet it looks

1964
01:47:57,309 --> 01:48:03,699
more like this where we've got these

1965
01:47:58,840 --> 01:48:05,590
lighting points here where we would just

1966
01:48:03,698 --> 01:48:08,348
say okay entities have their lighting

1967
01:48:05,590 --> 01:48:11,469
points when you come in and you want to

1968
01:48:08,349 --> 01:48:13,958
push one of them on you push on you know

1969
01:48:11,469 --> 01:48:17,109
whatever the lighting points are that

1970
01:48:13,958 --> 01:48:18,938
you want to push and that's where they

1971
01:48:17,109 --> 01:48:21,069
go right that's just where that

1972
01:48:18,939 --> 01:48:23,199
information goes so then when you come

1973
01:48:21,069 --> 01:48:25,029
through here you don't have any free

1974
01:48:23,198 --> 01:48:26,589
lists or anything like that it's simply

1975
01:48:25,029 --> 01:48:28,719
not something that's ever managed

1976
01:48:26,590 --> 01:48:31,239
instead what you do is you say well if

1977
01:48:28,719 --> 01:48:36,908
these things intersect then what we're

1978
01:48:31,238 --> 01:48:43,208
going to do in this case is we're going

1979
01:48:36,908 --> 01:48:45,969
to say that we just push on like I guess

1980
01:48:43,208 --> 01:48:51,248
just a pointer to that information like

1981
01:48:45,969 --> 01:48:54,069
we just point to it really it's maybe I

1982
01:48:51,248 --> 01:48:55,899
get it's hard to say I mean let's do it

1983
01:48:54,069 --> 01:48:57,308
the most straightforward way first I

1984
01:48:55,899 --> 01:49:00,158
guess which is just record these things

1985
01:48:57,309 --> 01:49:04,840
individually so instead of the light

1986
01:49:00,158 --> 01:49:07,748
chunk used and what the heck was that I

1987
01:49:04,840 --> 01:49:09,899
have no idea what's going on here my

1988
01:49:07,748 --> 01:49:12,368
graphics card seems to be freaking out

1989
01:49:09,899 --> 01:49:14,860
so what I want to do is I want to say

1990
01:49:12,368 --> 01:49:17,679
that the command structure right what

1991
01:49:14,859 --> 01:49:20,348
that's going to store is individual

1992
01:49:17,679 --> 01:49:22,569
light chunk information so along with

1993
01:49:20,349 --> 01:49:24,639
the light boxes and I guess this could

1994
01:49:22,569 --> 01:49:26,889
just be stored with each box because

1995
01:49:24,639 --> 01:49:29,409
that's just kind of how it goes

1996
01:49:26,889 --> 01:49:34,828
I guess this lighting point array thing

1997
01:49:29,408 --> 01:49:37,148
just would not be stored at all anymore

1998
01:49:34,828 --> 01:49:42,698
they would just get pulled out as part

1999
01:49:37,149 --> 01:49:45,699
of the lighting solution right so the

2000
01:49:42,698 --> 01:49:50,498
emit C 0 and the light points I think

2001
01:49:45,698 --> 01:49:53,438
that stuff just goes away I'm not really

2002
01:49:50,498 --> 01:49:57,368
sure why the emit C 0 is there in the

2003
01:49:53,439 --> 01:50:01,418
first place let me really quick see

2004
01:49:57,368 --> 01:50:03,819
where that's coming from because I think

2005
01:50:01,418 --> 01:50:05,788
that's not necessary that was just

2006
01:50:03,819 --> 01:50:13,929
getting stored sort of as a long hall

2007
01:50:05,788 --> 01:50:20,498
thing yeah so I'm pretty sure that would

2008
01:50:13,929 --> 01:50:25,708
just get rolled in no no that's not true

2009
01:50:20,498 --> 01:50:25,708
it does get stored per light point here

2010
01:50:26,359 --> 01:50:29,460
[Music]

2011
01:50:33,630 --> 01:50:46,809
so that is kind of a light box attribute

2012
01:50:43,769 --> 01:50:48,760
yeah so I guess the what I would say

2013
01:50:46,809 --> 01:50:50,918
there is you know inside the lighting

2014
01:50:48,760 --> 01:50:53,530
box maybe then what we would say is that

2015
01:50:50,918 --> 01:50:56,038
the you know the emission value goes in

2016
01:50:53,529 --> 01:51:00,038
there perhaps would probably be more

2017
01:50:56,038 --> 01:51:02,559
what I would want and I don't know how

2018
01:51:00,038 --> 01:51:14,380
we want to store the emission value

2019
01:51:02,559 --> 01:51:16,929
maybe we want it to be her face cuz

2020
01:51:14,380 --> 01:51:19,149
right now we're over specifying it right

2021
01:51:16,929 --> 01:51:21,189
we specify the emit C 0 but we don't

2022
01:51:19,149 --> 01:51:23,469
really need to because the amid C 0 is

2023
01:51:21,189 --> 01:51:25,749
not actually necessary

2024
01:51:23,469 --> 01:51:27,969
to be stored here because at the

2025
01:51:25,748 --> 01:51:30,130
especially at the moment we can only say

2026
01:51:27,969 --> 01:51:31,979
that a cube comes down and the whole

2027
01:51:30,130 --> 01:51:34,809
thing is lit it has an emission value

2028
01:51:31,979 --> 01:51:40,809
now in the future I could see us wanting

2029
01:51:34,809 --> 01:51:45,070
to do something where cubes only like

2030
01:51:40,809 --> 01:51:50,829
had one face lit maybe at the moment we

2031
01:51:45,069 --> 01:51:55,569
don't though so you know maybe there's

2032
01:51:50,828 --> 01:51:57,009
top emit and like side in it or

2033
01:51:55,569 --> 01:51:58,899
something I don't know something like

2034
01:51:57,010 --> 01:52:00,639
that we could do in the future but at

2035
01:51:58,899 --> 01:52:06,089
the moment I think what I'm gonna do is

2036
01:52:00,639 --> 01:52:10,420
just put a name it there maybe and so

2037
01:52:06,090 --> 01:52:14,019
yeah if we just store an eval you here

2038
01:52:10,420 --> 01:52:16,090
maybe we just pack that in and that gets

2039
01:52:14,019 --> 01:52:17,498
stored along with the light box for

2040
01:52:16,090 --> 01:52:18,909
example I mean the other thing we could

2041
01:52:17,498 --> 01:52:20,908
do is just leave this pad since we don't

2042
01:52:18,908 --> 01:52:22,629
really care at the moment I suppose

2043
01:52:20,908 --> 01:52:23,859
exactly how we're doing this maybe

2044
01:52:22,630 --> 01:52:25,118
there's an emission value here and

2045
01:52:23,859 --> 01:52:28,328
that's just emission value for the whole

2046
01:52:25,118 --> 01:52:29,948
cube so rather than storing emit c0

2047
01:52:28,328 --> 01:52:32,198
which I don't really think we need to

2048
01:52:29,948 --> 01:52:34,629
store in here at all we can get rid of

2049
01:52:32,198 --> 01:52:38,768
all of this stuff it's just gone right

2050
01:52:34,630 --> 01:52:41,199
and we don't store any of these pieces

2051
01:52:38,769 --> 01:52:43,780
of information did I delete something I

2052
01:52:41,198 --> 01:52:45,189
shouldn't have there no I didn't so

2053
01:52:43,779 --> 01:52:47,828
light points are gone

2054
01:52:45,189 --> 01:52:49,748
light junk used is gone all that's gone

2055
01:52:47,828 --> 01:52:53,529
we just store the boxes and the boxes

2056
01:52:49,748 --> 01:52:57,219
store the emission in them and then the

2057
01:52:53,529 --> 01:53:00,849
points will get generated later on by

2058
01:52:57,219 --> 01:53:05,139
the Box information let's say so maybe

2059
01:53:00,849 --> 01:53:06,519
like we will have something that lets it

2060
01:53:05,139 --> 01:53:09,670
know how it wants to do that or

2061
01:53:06,519 --> 01:53:11,710
something like this but I you know at

2062
01:53:09,670 --> 01:53:16,569
the moment anyway we'll we're just gonna

2063
01:53:11,710 --> 01:53:18,429
pass that information down directly so

2064
01:53:16,569 --> 01:53:20,049
that seems pretty reasonable to me and

2065
01:53:18,429 --> 01:53:22,899
then this surface index stuff that

2066
01:53:20,050 --> 01:53:25,538
unpacks that'll go somewhere else so

2067
01:53:22,899 --> 01:53:28,118
inside the lighting box now what we want

2068
01:53:25,538 --> 01:53:31,238
to do is we want to say okay the the

2069
01:53:28,118 --> 01:53:35,728
lighting box that we generate here this

2070
01:53:31,238 --> 01:53:35,728
thing has a pointer in it

2071
01:53:37,449 --> 01:53:41,800
for the light for the storage and so

2072
01:53:39,939 --> 01:53:43,509
when we do light points they get stored

2073
01:53:41,800 --> 01:53:47,020
back into there and that's what we'd

2074
01:53:43,510 --> 01:53:50,590
actually be providing here is the place

2075
01:53:47,020 --> 01:53:52,989
where we write back or read from that

2076
01:53:50,590 --> 01:53:57,130
piece of information when when we want

2077
01:53:52,988 --> 01:54:05,889
to actually use this thing I think that

2078
01:53:57,130 --> 01:54:10,600
makes more sense and so I'm gonna go

2079
01:54:05,890 --> 01:54:21,670
ahead and undo that what did I call this

2080
01:54:10,600 --> 01:54:26,170
thing light store so that I really like

2081
01:54:21,670 --> 01:54:27,850
a lot better like a lot better and the

2082
01:54:26,170 --> 01:54:32,289
reason that I like that a lot better is

2083
01:54:27,850 --> 01:54:34,329
because now we the the decision to

2084
01:54:32,289 --> 01:54:35,949
persist lighting information for

2085
01:54:34,329 --> 01:54:37,569
smoothing purposes which is the whole

2086
01:54:35,949 --> 01:54:40,059
reason we needed that in the first place

2087
01:54:37,569 --> 01:54:41,920
is just something that can be handed off

2088
01:54:40,060 --> 01:54:44,530
to the entity system which is already

2089
01:54:41,920 --> 01:54:46,329
doing stuff like that so we don't have a

2090
01:54:44,529 --> 01:54:48,039
separate system inside lighting for

2091
01:54:46,329 --> 01:54:49,569
storing information the entity system

2092
01:54:48,039 --> 01:54:51,579
we'll just record lighting information

2093
01:54:49,569 --> 01:54:52,840
as it sees fit and when it decides that

2094
01:54:51,579 --> 01:54:54,519
it doesn't need to keep letting it from

2095
01:54:52,840 --> 01:54:56,529
a frame or it just throws it out and

2096
01:54:54,520 --> 01:54:58,390
that seems a lot nicer to me because

2097
01:54:56,529 --> 01:55:01,420
then we don't have this situation where

2098
01:54:58,390 --> 01:55:02,860
you know you've got sort of two

2099
01:55:01,420 --> 01:55:04,060
redundant systems operating in parallel

2100
01:55:02,859 --> 01:55:05,469
and having this kind of nasty

2101
01:55:04,060 --> 01:55:07,870
bookkeeping going on between them and

2102
01:55:05,469 --> 01:55:09,880
all sorts of other crap like that that I

2103
01:55:07,869 --> 01:55:12,210
don't really like the sound of you know

2104
01:55:09,880 --> 01:55:12,210
I'm saying

2105
01:55:15,458 --> 01:55:25,769
all right so if I come through here and

2106
01:55:28,380 --> 01:55:43,389
need to kind of clean up how this stuff

2107
01:55:30,488 --> 01:55:49,448
is working I don't know what that was

2108
01:55:43,389 --> 01:55:51,788
supposed to say no 148 million okay

2109
01:55:49,448 --> 01:55:56,708
that's a great note Casey thanks for

2110
01:55:51,788 --> 01:55:59,708
keeping that in there so what I want to

2111
01:55:56,708 --> 01:56:01,538
do here is I can restore a point count

2112
01:55:59,708 --> 01:56:03,340
now and things could work based on point

2113
01:56:01,538 --> 01:56:05,170
count and we'll see how that'll go in a

2114
01:56:03,340 --> 01:56:10,150
second I think so that should be pretty

2115
01:56:05,170 --> 01:56:12,429
good as well so yeah I think we should

2116
01:56:10,149 --> 01:56:14,578
be able to now make this work in a more

2117
01:56:12,429 --> 01:56:17,170
sane fashion than we were doing before

2118
01:56:14,578 --> 01:56:18,759
when we push these quads on here we

2119
01:56:17,170 --> 01:56:20,859
still have the issue if we do have to

2120
01:56:18,760 --> 01:56:22,179
know where the light indices line up in

2121
01:56:20,859 --> 01:56:24,069
terms of what we're actually sending

2122
01:56:22,179 --> 01:56:25,689
down to the graphics card so in this

2123
01:56:24,069 --> 01:56:30,308
case we actually do need that light

2124
01:56:25,689 --> 01:56:31,269
index to make some sense right but this

2125
01:56:30,309 --> 01:56:33,579
becomes a little bit more

2126
01:56:31,269 --> 01:56:36,280
straightforward as we go we should be

2127
01:56:33,578 --> 01:56:37,688
able to now just say go back to the way

2128
01:56:36,279 --> 01:56:40,809
we were doing it before we're lighting

2129
01:56:37,689 --> 01:56:44,559
this just equals group light index and

2130
01:56:40,809 --> 01:56:51,070
the group light index plus equals light

2131
01:56:44,559 --> 01:56:52,479
points per chunk like so so that method

2132
01:56:51,069 --> 01:56:54,728
of operation could be restored now if

2133
01:56:52,479 --> 01:56:56,650
they just stream out and they are unique

2134
01:56:54,729 --> 01:56:58,179
per frame so these light indices never

2135
01:56:56,649 --> 01:56:59,879
get persisted nobody stores them

2136
01:56:58,179 --> 01:57:03,010
anywhere no one does anything with them

2137
01:56:59,880 --> 01:57:05,489
we can then also say this light count

2138
01:57:03,010 --> 01:57:05,489
here

2139
01:57:06,788 --> 01:57:13,498
I guess this also come in here

2140
01:57:13,880 --> 01:57:18,510
this all looks right so now we've got

2141
01:57:16,770 --> 01:57:20,130
this light in next year and the light

2142
01:57:18,510 --> 01:57:23,250
brush truck all this stuff looks like

2143
01:57:20,130 --> 01:57:25,350
it's operating how it should when we

2144
01:57:23,250 --> 01:57:26,789
come through here this just needs to

2145
01:57:25,350 --> 01:57:29,160
know where the light next are that's

2146
01:57:26,789 --> 01:57:31,739
copying out and you know it did exactly

2147
01:57:29,159 --> 01:57:33,960
that so it keeps all track of that

2148
01:57:31,739 --> 01:57:36,359
information exactly as it used to

2149
01:57:33,960 --> 01:57:37,980
it's storing where it's gonna write

2150
01:57:36,359 --> 01:57:41,399
these back when it eventually needs to

2151
01:57:37,979 --> 01:57:44,129
to so and then this piece of code here

2152
01:57:41,399 --> 01:57:47,339
that that was generating the points on

2153
01:57:44,130 --> 01:57:51,300
the surface that can actually be moved

2154
01:57:47,340 --> 01:57:56,819
now out to the lighting solution proper

2155
01:57:51,300 --> 01:57:59,760
I believe so inside handmade lighting

2156
01:57:56,819 --> 01:58:03,170
but when it goes to do the actual

2157
01:57:59,760 --> 01:58:06,449
lighting test and do this nonsense here

2158
01:58:03,170 --> 01:58:10,100
before it does anything that actually

2159
01:58:06,449 --> 01:58:13,380
does the light propagation it can do

2160
01:58:10,100 --> 01:58:14,190
this piece of work here so we can do

2161
01:58:13,380 --> 01:58:16,500
this

2162
01:58:14,189 --> 01:58:23,609
I'll just bracket it so we can see that

2163
01:58:16,500 --> 01:58:27,479
it's able to do here and so then what I

2164
01:58:23,609 --> 01:58:29,250
can do is say okay when I go to push one

2165
01:58:27,479 --> 01:58:30,750
of these things on I just push the light

2166
01:58:29,250 --> 01:58:33,060
box on I don't push anything else

2167
01:58:30,750 --> 01:58:35,939
that'll get processed here later on

2168
01:58:33,060 --> 01:58:37,500
which is what I want I come through here

2169
01:58:35,939 --> 01:58:40,379
and I store all the information about

2170
01:58:37,500 --> 01:58:42,659
how this light is supposed to work and

2171
01:58:40,380 --> 01:58:44,369
then the light index and the light count

2172
01:58:42,659 --> 01:58:46,260
should be set properly on the way out of

2173
01:58:44,369 --> 01:58:50,300
here to correspond these two where I

2174
01:58:46,260 --> 01:58:53,460
said they were going to be inside my

2175
01:58:50,300 --> 01:58:54,570
inside my lighting solution right so

2176
01:58:53,460 --> 01:58:56,909
I've got two things here I've got the

2177
01:58:54,569 --> 01:58:59,399
storage that comes in and that's this

2178
01:58:56,909 --> 01:59:02,099
piece of information here and then I've

2179
01:58:59,399 --> 01:59:03,599
got the light indices inside the

2180
01:59:02,100 --> 01:59:07,020
lighting system and what I can do is

2181
01:59:03,600 --> 01:59:11,720
copy in and copy out that information to

2182
01:59:07,020 --> 01:59:11,720
produce what I wanted to produce right

2183
01:59:15,238 --> 01:59:22,299
okay so let's talk about how that's

2184
01:59:20,498 --> 01:59:25,078
going to work on the back end now that

2185
01:59:22,300 --> 01:59:27,849
that would be how this would work here

2186
01:59:25,078 --> 01:59:32,920
what I want to do now is I do need a

2187
01:59:27,849 --> 01:59:36,038
scratch array for this stuff for my

2188
01:59:32,920 --> 01:59:39,010
points so this is going to become an

2189
01:59:36,038 --> 01:59:40,569
actual array now and it will have an

2190
01:59:39,010 --> 01:59:42,070
actual point count because that's going

2191
01:59:40,569 --> 01:59:44,469
to be how many of those things we

2192
01:59:42,069 --> 01:59:46,799
actually pushed in there so that's a

2193
01:59:44,469 --> 01:59:50,288
real value now that actually has meaning

2194
01:59:46,800 --> 01:59:51,969
emits c0 and emits c1 are actually going

2195
01:59:50,288 --> 01:59:53,800
to be stored now too so all of this

2196
01:59:51,969 --> 01:59:56,739
information is going to be sort of kept

2197
01:59:53,800 --> 01:59:58,599
in there last admit and last Direction

2198
01:59:56,738 --> 02:00:00,038
are the pieces of information we would

2199
01:59:58,599 --> 02:00:02,710
actually need to store in the light

2200
02:00:00,038 --> 02:00:05,198
storage and I guess now that I think

2201
02:00:02,710 --> 02:00:07,389
about it I I suppose those have to be

2202
02:00:05,198 --> 02:00:09,038
kept in here then because this is the

2203
02:00:07,389 --> 02:00:13,569
piece of information that we're actually

2204
02:00:09,038 --> 02:00:15,518
keeping right so when we copy these out

2205
02:00:13,569 --> 02:00:18,038
we need some place to put them so the

2206
02:00:15,519 --> 02:00:19,479
lighting points themselves is I guess

2207
02:00:18,038 --> 02:00:23,050
you know I don't know how exactly we

2208
02:00:19,479 --> 02:00:24,610
want to think about this but the

2209
02:00:23,050 --> 02:00:26,619
lighting information that we have to

2210
02:00:24,609 --> 02:00:29,738
pass into that routine has to be able to

2211
02:00:26,618 --> 02:00:32,679
be unpacked into this so the lighting

2212
02:00:29,738 --> 02:00:36,129
point I guess is the wrong thing to

2213
02:00:32,679 --> 02:00:42,609
store what we need there is actually the

2214
02:00:36,130 --> 02:00:50,019
lighting memory it's like a thing that

2215
02:00:42,609 --> 02:00:52,658
we remember lighting state and what

2216
02:00:50,019 --> 02:00:59,320
that's going to have is the emit and the

2217
02:00:52,658 --> 02:01:00,848
direction so really this is not a

2218
02:00:59,319 --> 02:01:03,179
lighting point it's a lighting point

2219
02:01:00,849 --> 02:01:03,179
state

2220
02:01:05,420 --> 02:01:11,449
I don't know what that is still doing

2221
02:01:11,060 --> 02:01:13,219
there

2222
02:01:11,448 --> 02:01:17,960
I guess we previously were type toughing

2223
02:01:13,219 --> 02:01:18,920
these maybe we should again I don't know

2224
02:01:17,960 --> 02:01:22,369
we'll deal with that later with some

2225
02:01:18,920 --> 02:01:24,020
complaints so anyway inside here what we

2226
02:01:22,369 --> 02:01:26,149
want to do is we want to say the

2227
02:01:24,020 --> 02:01:29,390
lighting Point State is the thing that

2228
02:01:26,149 --> 02:01:31,099
we're keeping so that lighting points

2229
02:01:29,390 --> 02:01:33,500
themselves are just created as an

2230
02:01:31,100 --> 02:01:35,570
artifact of this particular routine the

2231
02:01:33,500 --> 02:01:39,590
lighting point information is what gets

2232
02:01:35,569 --> 02:01:41,659
copied in I and then the rest of this

2233
02:01:39,590 --> 02:01:45,679
stuff gets copied back out to there

2234
02:01:41,659 --> 02:01:49,939
right I think that's all we really

2235
02:01:45,679 --> 02:01:51,710
needed so at the beginning what we would

2236
02:01:49,939 --> 02:01:54,198
do is when we come through here and

2237
02:01:51,710 --> 02:01:56,149
expand these points we would copy the

2238
02:01:54,198 --> 02:01:58,549
information there at that point you can

2239
02:01:56,149 --> 02:02:01,519
see here we save the average direction

2240
02:01:58,550 --> 02:02:03,920
to light and then we zero the one that

2241
02:02:01,520 --> 02:02:05,630
we're actually using so in this case we

2242
02:02:03,920 --> 02:02:08,090
would be just zeroing the one that we're

2243
02:02:05,630 --> 02:02:10,940
actually using this copy would now

2244
02:02:08,090 --> 02:02:13,100
happen after this so that would happen

2245
02:02:10,939 --> 02:02:14,719
here where the average direction to

2246
02:02:13,100 --> 02:02:17,270
light gets copied out along with the

2247
02:02:14,719 --> 02:02:20,960
emission these copies will actually be

2248
02:02:17,270 --> 02:02:25,310
per elements now out to the lighting

2249
02:02:20,960 --> 02:02:27,579
boxes and these are per lighting box as

2250
02:02:25,310 --> 02:02:27,580
well

2251
02:02:35,109 --> 02:02:45,829
yeah so I think that should be fine I

2252
02:02:43,670 --> 02:02:48,140
don't think we need to keep last

2253
02:02:45,829 --> 02:02:50,569
direction or last omit because I think

2254
02:02:48,140 --> 02:02:53,750
those can actually just be warm loaded

2255
02:02:50,569 --> 02:02:59,380
in the place wherever they actually need

2256
02:02:53,750 --> 02:03:15,409
to be so I think these can go away and

2257
02:02:59,380 --> 02:03:26,659
last is valid can also go away last is

2258
02:03:15,409 --> 02:03:29,859
valid is actually a bit tricky so the

2259
02:03:26,659 --> 02:03:33,380
only complication I see here is

2260
02:03:29,859 --> 02:03:33,380
[Music]

2261
02:03:51,658 --> 02:03:57,788
we will actually have to do last is

2262
02:03:54,998 --> 02:04:01,779
valid as something that happens per

2263
02:03:57,788 --> 02:04:04,509
lighting point at per lighting box so

2264
02:04:01,779 --> 02:04:07,090
when we push this data in there we have

2265
02:04:04,510 --> 02:04:08,859
to know did it come did we actually have

2266
02:04:07,090 --> 02:04:11,319
stuff in there that's actually workable

2267
02:04:08,859 --> 02:04:13,599
or is it just garbage and it needs to

2268
02:04:11,319 --> 02:04:15,398
get erased right and it needs to get

2269
02:04:13,599 --> 02:04:17,800
overwritten with whatever you solve on

2270
02:04:15,399 --> 02:04:22,329
this particular frame does that make

2271
02:04:17,800 --> 02:04:24,159
sense so I definitely want to do that

2272
02:04:22,328 --> 02:04:28,628
per box because that's gonna have to

2273
02:04:24,158 --> 02:04:30,728
occur now all right so now we're

2274
02:04:28,628 --> 02:04:32,229
actually not too bad off what we're

2275
02:04:30,729 --> 02:04:35,168
gonna do here is we're going to loop

2276
02:04:32,229 --> 02:04:37,929
through each of these and I can actually

2277
02:04:35,168 --> 02:04:40,779
store I can actually restore the concept

2278
02:04:37,929 --> 02:04:42,609
of the point count now and this can be

2279
02:04:40,779 --> 02:04:45,938
made more straightforward so we have a

2280
02:04:42,609 --> 02:04:50,439
point count end points all of this stuff

2281
02:04:45,939 --> 02:04:51,820
can be done as was being done before so

2282
02:04:50,439 --> 02:04:55,829
what I'm gonna do here is I'm just going

2283
02:04:51,819 --> 02:04:55,828
to loop through the boxes

2284
02:05:15,260 --> 02:05:19,460
that we got as input now I want to do

2285
02:05:17,930 --> 02:05:20,900
this before we build the spatial

2286
02:05:19,460 --> 02:05:23,029
partition because the spatial partition

2287
02:05:20,899 --> 02:05:26,299
is going to add boxes and I don't want

2288
02:05:23,029 --> 02:05:28,519
to process any boxes that I don't have

2289
02:05:26,300 --> 02:05:31,190
to so I know that all the ones that are

2290
02:05:28,520 --> 02:05:33,800
coming in here are real boxes for lack

2291
02:05:31,189 --> 02:05:36,559
of a better term and so I want to

2292
02:05:33,800 --> 02:05:38,930
restrict myself to only dealing with

2293
02:05:36,560 --> 02:05:41,690
those you know I'm saying

2294
02:05:38,930 --> 02:05:44,960
so for each one of these now I could

2295
02:05:41,689 --> 02:05:47,389
loop through my point indices so I want

2296
02:05:44,960 --> 02:05:52,310
to loop through point index whatever the

2297
02:05:47,390 --> 02:05:58,539
box light index 0 is I want to go

2298
02:05:52,310 --> 02:06:02,150
through the light index 6 I believe

2299
02:05:58,539 --> 02:06:04,939
which is the last one here and then I

2300
02:06:02,149 --> 02:06:07,069
plus plus point index so now I'm going

2301
02:06:04,939 --> 02:06:10,069
to go through and each point index that

2302
02:06:07,069 --> 02:06:12,949
I have I'm gonna pull it out of the

2303
02:06:10,069 --> 02:06:15,710
storage right now I could just use a mem

2304
02:06:12,949 --> 02:06:17,449
copy here which might be better well I

2305
02:06:15,710 --> 02:06:19,250
don't know we can look at stuff like

2306
02:06:17,449 --> 02:06:20,750
that later I think the compiler should

2307
02:06:19,250 --> 02:06:21,920
be good enough oh well no you know what

2308
02:06:20,750 --> 02:06:28,489
I can't do that because I got to do this

2309
02:06:21,920 --> 02:06:31,730
right so I have to actually make these

2310
02:06:28,489 --> 02:06:36,789
things work properly so no that's that's

2311
02:06:31,729 --> 02:06:36,789
not true right so I need to do something

2312
02:06:42,380 --> 02:06:58,130
I need to something more like this right

2313
02:06:54,770 --> 02:07:00,830
where I go through surfaces one through

2314
02:06:58,130 --> 02:07:02,690
zero through five I actually get these

2315
02:07:00,829 --> 02:07:05,840
out I build the lighting points from

2316
02:07:02,689 --> 02:07:09,198
them and I should be able to do that by

2317
02:07:05,840 --> 02:07:10,579
actually just looking at whichever light

2318
02:07:09,198 --> 02:07:12,529
index we're actually talking about here

2319
02:07:10,579 --> 02:07:14,719
right now we know these light indices

2320
02:07:12,529 --> 02:07:16,729
are contiguous so what I should be able

2321
02:07:14,719 --> 02:07:23,539
to do is say light index equals solution

2322
02:07:16,729 --> 02:07:25,069
our box light index zero start with that

2323
02:07:23,539 --> 02:07:27,560
and push all of these in here

2324
02:07:25,069 --> 02:07:29,000
now if storage was valid then I could

2325
02:07:27,560 --> 02:07:33,170
just copy them out if it wasn't I can't

2326
02:07:29,000 --> 02:07:35,090
what I could do is I can make I can

2327
02:07:33,170 --> 02:07:37,340
basically make concessions to that later

2328
02:07:35,090 --> 02:07:39,260
on as we go we'll deal with that a

2329
02:07:37,340 --> 02:07:41,060
little bit later so what you can see

2330
02:07:39,260 --> 02:07:43,520
here is when you're initializing emits e

2331
02:07:41,060 --> 02:07:45,800
zero that's a piece of information again

2332
02:07:43,520 --> 02:07:47,330
that's gonna be right here now it's

2333
02:07:45,800 --> 02:07:49,699
gonna be in the solution so when we

2334
02:07:47,329 --> 02:07:53,719
release we're gonna initialize emits e

2335
02:07:49,698 --> 02:07:56,178
zero directly now not as a adjective the

2336
02:07:53,719 --> 02:07:59,300
command state and this infer me this

2337
02:07:56,179 --> 02:08:03,560
should basically be just whatever the

2338
02:07:59,300 --> 02:08:07,460
box said it's a mission was I believe we

2339
02:08:03,560 --> 02:08:12,100
properly store that no we did it so we

2340
02:08:07,460 --> 02:08:12,100
want to make this actually be

2341
02:08:12,550 --> 02:08:18,159
mm well okay you know what

2342
02:08:21,158 --> 02:08:28,158
I'm not sure how we want to store that

2343
02:08:25,460 --> 02:08:31,130
information so when we're sending a

2344
02:08:28,158 --> 02:08:33,319
mission down here I don't know if we're

2345
02:08:31,130 --> 02:08:35,000
sending it down how we want to send it

2346
02:08:33,319 --> 02:08:37,578
down if we want to send it down zero to

2347
02:08:35,000 --> 02:08:41,198
one which seems logical to me

2348
02:08:37,578 --> 02:08:41,198
in fact I'll put an assertion in here

2349
02:08:44,889 --> 02:08:49,909
then we can multiply it out in here and

2350
02:08:47,389 --> 02:08:54,560
that'll be fine this is just the boxes

2351
02:08:49,908 --> 02:08:56,960
emission value right and so all of them

2352
02:08:54,560 --> 02:08:58,610
inherit that same value so this will

2353
02:08:56,960 --> 02:09:04,158
initialize all the lighting points in

2354
02:08:58,609 --> 02:09:08,238
question right and then when we're done

2355
02:09:04,158 --> 02:09:14,109
here we can say if solution light point

2356
02:09:08,238 --> 02:09:17,959
count as we were before or point count

2357
02:09:14,109 --> 02:09:22,328
is less than the light index solution

2358
02:09:17,960 --> 02:09:24,560
point count equals light index like so

2359
02:09:22,328 --> 02:09:27,738
although we should actually know what

2360
02:09:24,560 --> 02:09:29,179
that should actually be known so to be

2361
02:09:27,738 --> 02:09:31,009
honest I think we don't even want to do

2362
02:09:29,179 --> 02:09:32,510
that that's just a waste of ifs for no

2363
02:09:31,010 --> 02:09:34,730
reason I think what we really want to do

2364
02:09:32,510 --> 02:09:37,610
is a solution point count equals group

2365
02:09:34,729 --> 02:09:40,069
commands light point count because they

2366
02:09:37,609 --> 02:09:41,479
get serialized now so there's no need to

2367
02:09:40,069 --> 02:09:45,948
do a bounced check so that should just

2368
02:09:41,479 --> 02:09:47,598
be tracked the entire way through okay

2369
02:09:45,948 --> 02:09:51,379
so this will distribute all of our

2370
02:09:47,599 --> 02:09:53,590
points as we want them distributed we

2371
02:09:51,380 --> 02:09:56,840
can then do everything as we were before

2372
02:09:53,590 --> 02:09:58,550
the copy out hat we can do in a separate

2373
02:09:56,840 --> 02:10:00,949
place and we'll talk about that in a

2374
02:09:58,550 --> 02:10:04,639
second we've got stuff we might want to

2375
02:10:00,948 --> 02:10:06,439
there but in here when we zero the

2376
02:10:04,639 --> 02:10:09,078
average direction to light just to clear

2377
02:10:06,439 --> 02:10:13,789
out that array that can still happen the

2378
02:10:09,078 --> 02:10:14,479
way we wanted to because that's just a

2379
02:10:13,789 --> 02:10:19,880
scratch area

2380
02:10:14,479 --> 02:10:23,238
Ament see zero I think is to see one we

2381
02:10:19,880 --> 02:10:25,939
never cleared see one I assume that's

2382
02:10:23,238 --> 02:10:35,708
because we clear it up here

2383
02:10:25,939 --> 02:10:39,110
right yeah so that just kind of gets

2384
02:10:35,708 --> 02:10:40,550
dealt with down here what I would like

2385
02:10:39,109 --> 02:10:41,948
to do is we can get rid of this stuff

2386
02:10:40,550 --> 02:10:45,590
now

2387
02:10:41,948 --> 02:11:09,529
right the emitter index can go back to

2388
02:10:45,590 --> 02:11:11,630
being what it was before okay so this

2389
02:11:09,529 --> 02:11:14,538
can just behave the way that it was

2390
02:11:11,630 --> 02:11:16,309
behaving again same thing with this so

2391
02:11:14,538 --> 02:11:18,649
we don't have to do all that nonsense

2392
02:11:16,309 --> 02:11:38,989
that I was doing before which I was not

2393
02:11:18,649 --> 02:11:41,029
liking and now what we can see here is

2394
02:11:38,988 --> 02:11:43,538
when this produces the new lighting

2395
02:11:41,029 --> 02:11:49,639
solution what we want to do is in here

2396
02:11:43,538 --> 02:11:53,029
this last pass you can see that it's its

2397
02:11:49,639 --> 02:11:55,788
operating kind of over the was going to

2398
02:11:53,029 --> 02:11:59,238
operate over the point four and we want

2399
02:11:55,788 --> 02:12:01,969
it to be able to use this last the the

2400
02:11:59,238 --> 02:12:04,698
sort of the last emission last Direction

2401
02:12:01,969 --> 02:12:07,849
information what we want to do here is

2402
02:12:04,698 --> 02:12:09,529
we want to stop doing it that way this

2403
02:12:07,849 --> 02:12:12,110
is the part now where we want to loop

2404
02:12:09,529 --> 02:12:14,988
over the boxes again and actually grab

2405
02:12:12,109 --> 02:12:18,828
the previous results to the extent that

2406
02:12:14,988 --> 02:12:21,888
we have them right and furthermore in

2407
02:12:18,828 --> 02:12:23,748
here you know we can make this B we

2408
02:12:21,889 --> 02:12:25,368
could actually pull this out so when we

2409
02:12:23,748 --> 02:12:27,679
do compute letting solution this part

2410
02:12:25,368 --> 02:12:30,859
here this finalization we could actually

2411
02:12:27,679 --> 02:12:32,719
pull this out if we wanted to and say

2412
02:12:30,859 --> 02:12:34,819
that that's actually part of this so we

2413
02:12:32,719 --> 02:12:37,939
can see it a little more cleanly here

2414
02:12:34,819 --> 02:12:39,159
the the two stages of the copy out and

2415
02:12:37,939 --> 02:12:40,869
the copy back

2416
02:12:39,159 --> 02:12:43,420
so you can see here where we do this

2417
02:12:40,869 --> 02:12:45,189
copy and storing that information we're

2418
02:12:43,420 --> 02:12:46,840
not going to do that anymore here

2419
02:12:45,189 --> 02:12:49,000
instead what we're gonna do is we're

2420
02:12:46,840 --> 02:12:52,000
gonna mimic what we did at the outset

2421
02:12:49,000 --> 02:12:58,300
where we actually go through the lights

2422
02:12:52,000 --> 02:13:00,340
that are involved per box and for each

2423
02:12:58,300 --> 02:13:02,230
of those will grab the previous

2424
02:13:00,340 --> 02:13:04,630
information and blend it after we're

2425
02:13:02,229 --> 02:13:06,549
done blending it will write it back so

2426
02:13:04,630 --> 02:13:09,789
basically we're gonna pull it out blend

2427
02:13:06,550 --> 02:13:12,279
right back now we may want to in the

2428
02:13:09,789 --> 02:13:15,220
future pull out the emission information

2429
02:13:12,279 --> 02:13:16,899
so instead of blending the way that

2430
02:13:15,220 --> 02:13:19,300
we're blending here we may want to blend

2431
02:13:16,899 --> 02:13:21,189
in a different way I know this sounds a

2432
02:13:19,300 --> 02:13:22,690
little confusing but basically what

2433
02:13:21,189 --> 02:13:24,639
we're doing right now is we're redoing

2434
02:13:22,689 --> 02:13:27,039
the lighting calculation every frame

2435
02:13:24,640 --> 02:13:29,500
which means that any light propagated on

2436
02:13:27,039 --> 02:13:32,529
a previous frame is not reap rocketed on

2437
02:13:29,500 --> 02:13:34,119
a subsequent frame so the light restarts

2438
02:13:32,529 --> 02:13:36,550
the lighting solution restarts every

2439
02:13:34,119 --> 02:13:38,529
frame and the extent to which we use the

2440
02:13:36,550 --> 02:13:42,520
previous frames information is just as a

2441
02:13:38,529 --> 02:13:47,009
blend to try to sort of keep the light

2442
02:13:42,520 --> 02:13:47,010
from changing too much per frame

2443
02:13:47,789 --> 02:13:54,909
that's probably dumb we can probably do

2444
02:13:52,869 --> 02:13:57,069
much better than that by saying let's

2445
02:13:54,909 --> 02:13:59,680
just track the propagation frame by

2446
02:13:57,069 --> 02:14:01,449
frame and keep what we did on the

2447
02:13:59,680 --> 02:14:03,130
previous frame alive for the next frame

2448
02:14:01,449 --> 02:14:05,289
so that the propagation just gets better

2449
02:14:03,130 --> 02:14:09,190
and better so we can probably do stuff

2450
02:14:05,289 --> 02:14:10,840
that's smarter there and I'll put a note

2451
02:14:09,189 --> 02:14:12,189
about that but at the moment we don't

2452
02:14:10,840 --> 02:14:13,690
want to go down that path because we're

2453
02:14:12,189 --> 02:14:15,849
just trying to sort of clean up how our

2454
02:14:13,689 --> 02:14:20,639
accidents and debug it without that

2455
02:14:15,850 --> 02:14:20,640
extra sort of complexity introduced

2456
02:14:39,189 --> 02:14:43,760
so that's just one thing that we should

2457
02:14:41,779 --> 02:14:45,889
look into in the future and that again

2458
02:14:43,760 --> 02:14:47,300
is just about getting a better lighting

2459
02:14:45,889 --> 02:14:49,010
solution for the same amount of

2460
02:14:47,300 --> 02:14:49,909
computation time because one of the

2461
02:14:49,010 --> 02:14:51,139
things that's true in something like

2462
02:14:49,908 --> 02:14:53,089
lighting were you really what you're

2463
02:14:51,139 --> 02:14:55,189
trying to get a particular you're trying

2464
02:14:53,090 --> 02:14:56,689
to get a particular result that you know

2465
02:14:55,189 --> 02:14:58,820
you can never achieve which is like the

2466
02:14:56,689 --> 02:15:00,530
perfect propagation of light of what

2467
02:14:58,819 --> 02:15:01,908
would really happen in in the real world

2468
02:15:00,529 --> 02:15:03,590
with these lights or something right

2469
02:15:01,908 --> 02:15:04,728
and you're never gonna get that the

2470
02:15:03,590 --> 02:15:06,619
amount of complication necessary to

2471
02:15:04,729 --> 02:15:09,050
produce that is it's hours of

2472
02:15:06,618 --> 02:15:10,549
computation potentially right depending

2473
02:15:09,050 --> 02:15:12,050
on the situation I mean maybe not

2474
02:15:10,550 --> 02:15:13,099
anymore because computers are much

2475
02:15:12,050 --> 02:15:15,829
faster you days but it's you know

2476
02:15:13,099 --> 02:15:17,569
minutes of computation let's say even on

2477
02:15:15,828 --> 02:15:18,978
a very fast machine for certain scenes

2478
02:15:17,569 --> 02:15:20,029
and so we know we're never gonna get

2479
02:15:18,979 --> 02:15:22,039
that so what we're trying to do is

2480
02:15:20,029 --> 02:15:23,359
figure out well okay we've got a certain

2481
02:15:22,038 --> 02:15:25,668
budget we got a certain amount of

2482
02:15:23,359 --> 02:15:27,139
computation we can spend what's the way

2483
02:15:25,668 --> 02:15:29,148
to make sure that we're spending that

2484
02:15:27,139 --> 02:15:30,859
computation time to get the best result

2485
02:15:29,149 --> 02:15:31,909
we can because we certainly don't want

2486
02:15:30,859 --> 02:15:33,228
to sit around doing a bunch of

2487
02:15:31,908 --> 02:15:35,268
computations that are throwing away

2488
02:15:33,229 --> 02:15:37,340
parts of the information we have

2489
02:15:35,269 --> 02:15:38,630
revealed that we could have used to

2490
02:15:37,340 --> 02:15:40,449
produce a better lighting solution so

2491
02:15:38,630 --> 02:15:42,618
you want to make every flop count and

2492
02:15:40,448 --> 02:15:44,988
that's something that we can look into

2493
02:15:42,618 --> 02:15:46,518
kind of later as we go how do we make

2494
02:15:44,988 --> 02:15:48,648
sure that for the computations that we

2495
02:15:46,519 --> 02:15:51,019
are that we do have time to do are we

2496
02:15:48,649 --> 02:15:53,059
doing them as efficiently as possible or

2497
02:15:51,019 --> 02:15:56,059
are sure rather are we getting as much

2498
02:15:53,059 --> 02:15:58,189
information as them as we can right so

2499
02:15:56,059 --> 02:15:59,360
the smoothing is one way to just simply

2500
02:15:58,189 --> 02:16:01,459
make the lighting look better by

2501
02:15:59,359 --> 02:16:02,779
reducing the flicker but it's possible

2502
02:16:01,458 --> 02:16:05,658
that we could get a lot more mileage out

2503
02:16:02,779 --> 02:16:07,728
of that storage by actually using it to

2504
02:16:05,658 --> 02:16:09,319
like help guide our solution every frame

2505
02:16:07,729 --> 02:16:10,820
and so that's something that we want to

2506
02:16:09,319 --> 02:16:12,319
kind of develop going forwards and again

2507
02:16:10,819 --> 02:16:13,698
that's not gonna speed us up but it's

2508
02:16:12,319 --> 02:16:15,319
gonna get us a better solution for the

2509
02:16:13,698 --> 02:16:20,178
same amount of speed and that's

2510
02:16:15,319 --> 02:16:21,438
important as well right okay so what we

2511
02:16:20,179 --> 02:16:26,918
want to do here is take a look at the

2512
02:16:21,439 --> 02:16:33,429
Box value here and this is that box is

2513
02:16:26,918 --> 02:16:33,429
valid barrel

2514
02:16:35,359 --> 02:16:43,889
weird that's what that lighting box

2515
02:16:39,228 --> 02:16:46,978
right there so if the storage contents

2516
02:16:43,888 --> 02:16:48,628
are not valid what we want to do here is

2517
02:16:46,978 --> 02:16:49,888
point to alternate storage so what I'm

2518
02:16:48,629 --> 02:16:55,050
going to do is going to say okay let's

2519
02:16:49,888 --> 02:16:55,918
say we've got lighting point state here

2520
02:16:55,049 --> 02:17:00,388
right

2521
02:16:55,918 --> 02:17:02,189
that's my storage and we sort of have

2522
02:17:00,388 --> 02:17:06,148
two cases in fact I guess I can just

2523
02:17:02,189 --> 02:17:07,769
handle the two cases if the storage

2524
02:17:06,148 --> 02:17:10,198
contents are valid we do one thing

2525
02:17:07,769 --> 02:17:13,379
otherwise we do another thing

2526
02:17:10,199 --> 02:17:15,569
so the point state here in fact I guess

2527
02:17:13,379 --> 02:17:16,859
I don't even do this if the storage

2528
02:17:15,568 --> 02:17:18,568
counts are valid then we're gonna do

2529
02:17:16,859 --> 02:17:20,729
exactly what we were going to do before

2530
02:17:18,568 --> 02:17:25,458
right everything is exactly the way it

2531
02:17:20,728 --> 02:17:30,028
was so I'm going to start with the boxes

2532
02:17:25,459 --> 02:17:37,829
light index zero I'm gonna go until the

2533
02:17:30,029 --> 02:17:39,959
boxes light index 7 / 6 right and I'm

2534
02:17:37,828 --> 02:17:43,049
gonna go through each of those in series

2535
02:17:39,959 --> 02:17:44,699
for each of those that we're gonna do we

2536
02:17:43,049 --> 02:17:46,528
know what the point index is I guess you

2537
02:17:44,699 --> 02:17:55,559
know what I should do should do it this

2538
02:17:46,529 --> 02:17:57,899
way right house I'm going to go through

2539
02:17:55,558 --> 02:17:59,728
each of the points and then I know that

2540
02:17:57,898 --> 02:18:01,828
we can look at whatever is in our

2541
02:17:59,728 --> 02:18:04,049
solution which are these things here I

2542
02:18:01,828 --> 02:18:10,199
know that I can look at those using that

2543
02:18:04,049 --> 02:18:14,878
point index directly I'm sorry I using

2544
02:18:10,199 --> 02:18:16,619
an offset of that index so I can say

2545
02:18:14,879 --> 02:18:18,569
alright my point in next year is going

2546
02:18:16,619 --> 02:18:21,719
to be the local index plus whatever the

2547
02:18:18,568 --> 02:18:24,028
initial box index offset was right so

2548
02:18:21,718 --> 02:18:27,028
that's my point index and then I know I

2549
02:18:24,029 --> 02:18:29,729
can look in the box the box of storage

2550
02:18:27,029 --> 02:18:31,859
to get what it was so here where I come

2551
02:18:29,728 --> 02:18:40,108
through I say all right the omit C 0

2552
02:18:31,859 --> 02:18:42,569
value of this thing wait could I even do

2553
02:18:40,109 --> 02:18:46,100
this the same way I was doing before

2554
02:18:42,569 --> 02:18:46,100
I guess I could couldn't I

2555
02:18:58,429 --> 02:19:06,049
only if I actually make these be

2556
02:19:01,968 --> 02:19:06,049
parallel but I could

2557
02:19:12,209 --> 02:19:14,268
you

2558
02:19:14,939 --> 02:19:19,658
so in other words if we said something

2559
02:19:17,648 --> 02:19:27,278
like this is a pointer to one of these

2560
02:19:19,658 --> 02:19:28,629
and it stores that right then I could do

2561
02:19:27,279 --> 02:19:31,840
it because now I've got an array of

2562
02:19:28,629 --> 02:19:33,938
emitters array of directions I could

2563
02:19:31,840 --> 02:19:36,789
also do it by saying that the emissions

2564
02:19:33,939 --> 02:19:39,130
and the directions are interleaved and

2565
02:19:36,789 --> 02:19:40,869
then I could also just do it directly so

2566
02:19:39,129 --> 02:19:42,788
for example if I was to say that

2567
02:19:40,869 --> 02:19:45,340
lighting point state which has the

2568
02:19:42,789 --> 02:19:47,469
emission and the direction in here that

2569
02:19:45,340 --> 02:19:49,389
those were actually just stored as part

2570
02:19:47,468 --> 02:19:57,179
of the point state so for example I said

2571
02:19:49,389 --> 02:19:57,180
this right then I could do that as well

2572
02:20:14,728 --> 02:20:25,719
seems plausible to me especially because

2573
02:20:23,920 --> 02:20:31,318
you can imagine packing this thing down

2574
02:20:25,719 --> 02:20:31,318
in a pretty concise way potentially to

2575
02:20:41,059 --> 02:20:50,748
so yeah maybe I'll do it that way

2576
02:20:46,189 --> 02:20:52,859
let me just see what admit Siwon is

2577
02:20:50,748 --> 02:20:56,510
doing here just in case there's anything

2578
02:20:52,859 --> 02:20:56,510
weird cuz we're not ping pong it right

2579
02:21:03,420 --> 02:21:07,960
now we are so you can see here we've got

2580
02:21:06,398 --> 02:21:16,658
like a source emit see in ad estimate

2581
02:21:07,959 --> 02:21:19,259
see Oh although it doesn't actually ever

2582
02:21:16,658 --> 02:21:19,260
ping-pong them

2583
02:21:32,649 --> 02:21:37,369
so I guess technically yeah if we wanted

2584
02:21:35,360 --> 02:21:39,471
to I'm just not sure if I want to give

2585
02:21:37,370 --> 02:21:42,790
up that sort of cleanliness of having

2586
02:21:39,470 --> 02:21:45,140
those be the direct packed arrays

2587
02:21:42,790 --> 02:21:48,551
because we could ping-pong them in the

2588
02:21:45,140 --> 02:21:48,550
future I don't know if we're going to

2589
02:21:50,050 --> 02:21:54,920
there was no reason to do so here

2590
02:21:52,909 --> 02:22:01,039
because we had to renormalize the

2591
02:21:54,920 --> 02:22:08,060
samples but if you look at what's

2592
02:22:01,040 --> 02:22:11,090
happening here this sort of copy and

2593
02:22:08,060 --> 02:22:16,601
clear you could imagine this being done

2594
02:22:11,090 --> 02:22:20,601
a lot more efficiently right so yeah

2595
02:22:16,601 --> 02:22:22,641
it's a little dicey it's a little dicey

2596
02:22:20,601 --> 02:22:25,579
so I'm gonna go ahead and stick with

2597
02:22:22,640 --> 02:22:28,489
what I had before I don't really want to

2598
02:22:25,579 --> 02:22:30,200
go down that route yet cuz I'm just not

2599
02:22:28,489 --> 02:22:32,899
sure about it and it seems a little bit

2600
02:22:30,200 --> 02:22:35,420
iffy to me so I'm gonna just say we

2601
02:22:32,899 --> 02:22:38,420
don't do that yet and we'll cross that

2602
02:22:35,420 --> 02:22:42,550
bridge when we come to it so if I'm here

2603
02:22:38,420 --> 02:22:44,210
and I'm looking at my box index you know

2604
02:22:42,550 --> 02:22:46,159
situation I'm just gonna do these

2605
02:22:44,209 --> 02:22:47,869
separately I'm not gonna try to do

2606
02:22:46,159 --> 02:22:49,640
anything fancy so if the storage

2607
02:22:47,870 --> 02:22:51,320
contents aren't valid then there's

2608
02:22:49,640 --> 02:22:54,140
really not much that we actually have to

2609
02:22:51,319 --> 02:22:59,629
do here we just write back the values

2610
02:22:54,140 --> 02:23:02,209
and that's it I go ahead and clear that

2611
02:22:59,629 --> 02:23:05,539
out if the source contents aren't valid

2612
02:23:02,209 --> 02:23:07,039
then we need to average them so let's

2613
02:23:05,540 --> 02:23:09,880
take the easier case first when the

2614
02:23:07,040 --> 02:23:13,040
storage storage contents are not valid

2615
02:23:09,879 --> 02:23:16,579
then we don't need this lerp here and we

2616
02:23:13,040 --> 02:23:19,070
can just say that whatever the solution

2617
02:23:16,579 --> 02:23:25,159
says that it is is what the solution

2618
02:23:19,069 --> 02:23:28,220
says is what it is right so if we take a

2619
02:23:25,159 --> 02:23:31,761
look at this here we know that our omit

2620
02:23:28,220 --> 02:23:33,680
c0 is just going to be whatever it is so

2621
02:23:31,761 --> 02:23:35,390
we don't need to touch it at all right

2622
02:23:33,681 --> 02:23:37,040
so we know we're going to write back

2623
02:23:35,390 --> 02:23:38,840
something here and then our average

2624
02:23:37,040 --> 02:23:42,051
direction to light is going to get

2625
02:23:38,840 --> 02:23:45,560
normalized which is this so we do

2626
02:23:42,050 --> 02:23:46,670
actually need to figure that part out so

2627
02:23:45,560 --> 02:23:51,680
well

2628
02:23:46,670 --> 02:24:01,760
we'll get the direction here here's the

2629
02:23:51,680 --> 02:24:03,800
omit here's the direction and so what we

2630
02:24:01,760 --> 02:24:05,148
want to do is we need to write back we

2631
02:24:03,799 --> 02:24:06,259
don't need to write back the emission we

2632
02:24:05,148 --> 02:24:08,930
do need to write back the direction

2633
02:24:06,260 --> 02:24:10,550
because we are normalizing it and then

2634
02:24:08,930 --> 02:24:12,620
what we want to do is we want to take

2635
02:24:10,549 --> 02:24:15,920
wherever these were stored in the box

2636
02:24:12,620 --> 02:24:21,020
itself and we need to write those back

2637
02:24:15,920 --> 02:24:27,680
so inside the box we know we've got this

2638
02:24:21,020 --> 02:24:29,479
right here so the storage for the

2639
02:24:27,680 --> 02:24:33,318
emission is going to be the emission the

2640
02:24:29,478 --> 02:24:36,228
storage for the direction is going to be

2641
02:24:33,318 --> 02:24:37,670
the direction and I suppose we can make

2642
02:24:36,228 --> 02:24:39,590
this a little bit more cheeky if we

2643
02:24:37,670 --> 02:24:41,420
wanted to by saying well okay so since

2644
02:24:39,590 --> 02:24:42,500
this only gets used in one place we can

2645
02:24:41,420 --> 02:24:44,540
just do it like that

2646
02:24:42,500 --> 02:24:46,549
and if we just abuse having the equal

2647
02:24:44,540 --> 02:24:57,380
signs line up we can also do this like

2648
02:24:46,549 --> 02:24:59,539
this so here we say in the case where

2649
02:24:57,379 --> 02:25:03,379
the storage contents are not valid we

2650
02:24:59,540 --> 02:25:08,120
basically make them valid like so by

2651
02:25:03,379 --> 02:25:09,559
saying you know into that storage we're

2652
02:25:08,120 --> 02:25:12,020
going to write back whatever the

2653
02:25:09,559 --> 02:25:13,908
emission was that we computed and into

2654
02:25:12,020 --> 02:25:15,710
the directional part we're going to

2655
02:25:13,908 --> 02:25:17,689
write back the normalized version which

2656
02:25:15,709 --> 02:25:22,028
we will also write back into the actual

2657
02:25:17,689 --> 02:25:26,779
array that we use that we send down to

2658
02:25:22,029 --> 02:25:31,010
you know the to the game right to the to

2659
02:25:26,779 --> 02:25:33,550
the GPU this doesn't have to be done

2660
02:25:31,010 --> 02:25:33,550
this way anymore

2661
02:25:48,261 --> 02:25:51,740
so in this case we can go back to what

2662
02:25:50,271 --> 02:25:53,721
we're doing before exactly as we were

2663
02:25:51,740 --> 02:25:55,101
doing it before this one again has

2664
02:25:53,720 --> 02:25:58,630
always worked this way and can continue

2665
02:25:55,101 --> 02:26:01,251
to work this way so that's totally fine

2666
02:25:58,630 --> 02:26:03,280
it can go back to doing this if it wants

2667
02:26:01,251 --> 02:26:03,281
to

2668
02:26:05,531 --> 02:26:11,480
so in here really this is all we need to

2669
02:26:09,620 --> 02:26:14,030
finish now this particular piece of

2670
02:26:11,479 --> 02:26:15,591
information has to this particular

2671
02:26:14,031 --> 02:26:20,061
operation still has to occur up here

2672
02:26:15,591 --> 02:26:22,101
just in a slightly different way I think

2673
02:26:20,060 --> 02:26:23,690
all that looks right so when I come

2674
02:26:22,101 --> 02:26:25,610
through here what I want to do is do

2675
02:26:23,690 --> 02:26:27,980
this blend exactly the same thing we're

2676
02:26:25,610 --> 02:26:29,480
doing here I want to do the double store

2677
02:26:27,979 --> 02:26:31,761
so basically what I want to do is say

2678
02:26:29,479 --> 02:26:33,591
okay I'm gonna go ahead and store

2679
02:26:31,761 --> 02:26:36,021
whatever the last thing was the last

2680
02:26:33,591 --> 02:26:37,970
thing here is gonna have to be pulled

2681
02:26:36,021 --> 02:26:42,021
out as well so here's that emission

2682
02:26:37,970 --> 02:26:43,880
value right there here's the new ones so

2683
02:26:42,021 --> 02:26:45,591
the new the old one will lurk to the new

2684
02:26:43,880 --> 02:26:47,630
one at this rate and we'll store them

2685
02:26:45,591 --> 02:26:50,631
both back into the things that we

2686
02:26:47,630 --> 02:26:54,050
actually process same is true for the

2687
02:26:50,630 --> 02:26:55,220
last direction so this part right here

2688
02:26:54,050 --> 02:26:57,200
where we're storing back the last

2689
02:26:55,220 --> 02:26:59,511
direction that comes in here we don't

2690
02:26:57,200 --> 02:27:01,370
need to normalize it because we know

2691
02:26:59,511 --> 02:27:02,751
it's already normalized since it had to

2692
02:27:01,370 --> 02:27:04,310
get stored on the last frame as a

2693
02:27:02,751 --> 02:27:06,740
normalized value so we're just doing the

2694
02:27:04,310 --> 02:27:08,360
lerp here again reading out those values

2695
02:27:06,740 --> 02:27:08,720
from the storage and then going from

2696
02:27:08,360 --> 02:27:10,881
there

2697
02:27:08,720 --> 02:27:12,470
so think that's everything that actually

2698
02:27:10,880 --> 02:27:14,479
needs to happen here I don't think

2699
02:27:12,470 --> 02:27:16,700
anything else needs to occur this light

2700
02:27:14,479 --> 02:27:20,780
index value for box this this is not

2701
02:27:16,700 --> 02:27:24,050
used anymore so that's just gone so now

2702
02:27:20,781 --> 02:27:26,301
we have some cleanup to do right we've

2703
02:27:24,050 --> 02:27:27,859
got to figure out how we want this stuff

2704
02:27:26,300 --> 02:27:37,149
to work this is actually the lighting

2705
02:27:27,860 --> 02:27:37,150
storage here this is something like this

2706
02:27:38,261 --> 02:27:41,720
no Nova right specifier I'm assuming

2707
02:27:40,550 --> 02:27:44,140
that's because lighting storage is not

2708
02:27:41,720 --> 02:27:44,140
defined

2709
02:27:45,838 --> 02:27:55,859
like point state that's what I meant but

2710
02:27:52,260 --> 02:28:01,049
I guess this is not defined

2711
02:27:55,859 --> 02:28:03,449
yeah it should have been because the

2712
02:28:01,049 --> 02:28:08,029
lighting information should have been

2713
02:28:03,449 --> 02:28:08,029
specified let me just take a look

2714
02:28:13,010 --> 02:28:20,719
entities here lighting that's BP is here

2715
02:28:17,328 --> 02:28:20,719
there's our problem

2716
02:28:34,170 --> 02:28:42,329
inside our lighting solution v3

2717
02:28:38,090 --> 02:28:44,549
semicolon so this needs to get

2718
02:28:42,329 --> 02:28:47,521
implemented and that's fine we'll do

2719
02:28:44,549 --> 02:28:58,909
that in a second storage equals light

2720
02:28:47,521 --> 02:29:03,829
store there we go and so now we're down

2721
02:28:58,909 --> 02:29:07,079
mostly to it so in here we don't need

2722
02:29:03,829 --> 02:29:12,120
points we don't need a MIT we don't need

2723
02:29:07,079 --> 02:29:17,340
chunk used all that stuff goes away and

2724
02:29:12,120 --> 02:29:21,681
we do need to however in our pushing

2725
02:29:17,340 --> 02:29:29,310
these things on we do need to clear it

2726
02:29:21,681 --> 02:29:31,230
for the commands so I don't know since

2727
02:29:29,310 --> 02:29:34,351
these have to be unique across the

2728
02:29:31,229 --> 02:29:37,500
entire time we use them I think

2729
02:29:34,351 --> 02:29:42,079
technically it's got to be in here so I

2730
02:29:37,500 --> 02:29:42,079
think technically this has to be in here

2731
02:29:42,470 --> 02:29:57,359
and so this is actually right and so

2732
02:29:55,170 --> 02:29:59,579
that is something that actually does

2733
02:29:57,360 --> 02:30:01,620
have to get cleared down at the bottom

2734
02:29:59,579 --> 02:30:06,090
right so when we do this we have to do

2735
02:30:01,620 --> 02:30:09,480
like point index equals zero although

2736
02:30:06,090 --> 02:30:13,370
actually I suppose since zero is never

2737
02:30:09,479 --> 02:30:18,390
used technically what we need to do is

2738
02:30:13,370 --> 02:30:22,760
do this plus equals beforehand so you

2739
02:30:18,390 --> 02:30:22,760
know this actually has to be like this

2740
02:30:23,720 --> 02:30:30,899
although we only want to skip one of

2741
02:30:25,829 --> 02:30:32,940
them so it's it's this right when we

2742
02:30:30,899 --> 02:30:35,129
start doing a rendering here this thing

2743
02:30:32,940 --> 02:30:42,590
wants to be when it gets initialized

2744
02:30:35,129 --> 02:30:42,589
right this thing wants to to do that

2745
02:30:45,239 --> 02:30:49,379
so when here when we're doing push cube

2746
02:30:47,520 --> 02:30:51,630
now we actually have to do something a

2747
02:30:49,379 --> 02:30:54,028
little bit fancier than that and we've

2748
02:30:51,629 --> 02:30:56,699
got a bunch of stuff we're gonna have to

2749
02:30:54,029 --> 02:30:59,310
deal with so let's go ahead and make

2750
02:30:56,700 --> 02:31:03,750
that happen this is actually a light

2751
02:30:59,309 --> 02:31:07,409
point index not light point count we got

2752
02:31:03,750 --> 02:31:09,180
light points in here that is not true so

2753
02:31:07,409 --> 02:31:19,279
those should be actually stored and they

2754
02:31:09,180 --> 02:31:19,279
are so that's good this is just box

2755
02:31:22,818 --> 02:31:33,799
right this is just points

2756
02:31:38,780 --> 02:31:46,079
coloured RGB so that needs to get

2757
02:31:43,530 --> 02:31:50,010
specified as part of the box as well

2758
02:31:46,079 --> 02:31:52,190
doesn't it because inside here we don't

2759
02:31:50,010 --> 02:32:06,060
actually store that piece of information

2760
02:31:52,190 --> 02:32:14,940
so I guess that is one downside of not

2761
02:32:06,060 --> 02:32:16,709
storing the light separately here this

2762
02:32:14,940 --> 02:32:18,630
really doesn't have to look like it does

2763
02:32:16,709 --> 02:32:21,229
at the moment either there's probably a

2764
02:32:18,629 --> 02:32:24,359
lot of stuff we could simplify here

2765
02:32:21,229 --> 02:32:26,010
because right now we're kind of we're

2766
02:32:24,360 --> 02:32:28,200
also being a little bit aggressive in

2767
02:32:26,010 --> 02:32:38,670
terms of what we actually you know

2768
02:32:28,200 --> 02:32:40,260
remember but here's the ref see and so

2769
02:32:38,670 --> 02:32:43,409
what I could do is when we push that on

2770
02:32:40,260 --> 02:32:54,300
there we could store that information so

2771
02:32:43,409 --> 02:32:57,209
when we do our emission value and then

2772
02:32:54,299 --> 02:33:04,199
in here you know we just track that

2773
02:32:57,209 --> 02:33:05,850
information so that I think is mostly

2774
02:33:04,200 --> 02:33:11,040
okay now we just have to kind of deal

2775
02:33:05,851 --> 02:33:12,659
with some of the fallout here that's

2776
02:33:11,040 --> 02:33:13,681
gonna be assigned unsigned miss mismatch

2777
02:33:12,659 --> 02:33:16,289
which is fine

2778
02:33:13,681 --> 02:33:19,829
let me just promote these to you 32s

2779
02:33:16,290 --> 02:33:23,101
before the subtraction let's take a look

2780
02:33:19,829 --> 02:33:25,860
at what's going on here the storage I

2781
02:33:23,101 --> 02:33:32,880
think it's called direction actually I

2782
02:33:25,860 --> 02:33:35,181
don't know why I type Durr let's expand

2783
02:33:32,879 --> 02:33:35,180
that out

2784
02:33:36,250 --> 02:33:44,079
and that's about it really now we just

2785
02:33:42,880 --> 02:33:47,319
have to make sure that when we actually

2786
02:33:44,079 --> 02:33:53,409
push these things on they're pushed on

2787
02:33:47,319 --> 02:33:56,470
in the same way right all right so now

2788
02:33:53,409 --> 02:34:09,819
when we do push cubed this has to be a

2789
02:33:56,470 --> 02:34:13,209
light point state and unfortunately for

2790
02:34:09,819 --> 02:34:15,431
us this is a little bit dicey it's kind

2791
02:34:13,209 --> 02:34:25,060
of hard to know what's going on here per

2792
02:34:15,431 --> 02:34:27,631
se we will I'm sure do some various non

2793
02:34:25,060 --> 02:34:27,630
senses

2794
02:34:34,569 --> 02:34:38,369
whereas this little piece here we go

2795
02:34:41,799 --> 02:34:50,489
this is just completely piggy actually

2796
02:34:48,250 --> 02:34:56,079
you know what I'm not gonna put it there

2797
02:34:50,489 --> 02:35:00,271
get out here I leave it where it was so

2798
02:34:56,079 --> 02:35:00,271
when we have these pieces here

2799
02:35:22,478 --> 02:35:32,929
so what I want to do here is say well

2800
02:35:24,799 --> 02:35:34,579
alright this will put the lighting in

2801
02:35:32,930 --> 02:35:36,350
here for now but eventually we're gonna

2802
02:35:34,579 --> 02:35:37,939
do this in a very different way so I'm

2803
02:35:36,350 --> 02:35:41,689
not gonna think too hard about it at the

2804
02:35:37,939 --> 02:35:43,460
moment what I'll do is say instead of

2805
02:35:41,689 --> 02:35:45,050
addressing off the piece here I'm going

2806
02:35:43,459 --> 02:36:01,398
to use the actual piece index and use

2807
02:35:45,049 --> 02:36:07,340
the lighting information like so so that

2808
02:36:01,398 --> 02:36:15,648
will actually not what I wanted

2809
02:36:07,340 --> 02:36:17,779
I just wanted lighting so I think that's

2810
02:36:15,648 --> 02:36:21,709
what we need now so would you push light

2811
02:36:17,779 --> 02:36:25,760
there same thing here

2812
02:36:21,709 --> 02:36:28,478
bitmap Stoke get one and then inside

2813
02:36:25,760 --> 02:36:28,478
push cube

2814
02:36:42,100 --> 02:36:45,259
[Music]

2815
02:37:07,510 --> 02:37:11,309
and we know that this thing has to be

2816
02:37:13,079 --> 02:37:23,409
that wide so again a little this is a

2817
02:37:17,500 --> 02:37:24,780
bit loose there obviously because we're

2818
02:37:23,409 --> 02:37:27,340
kind of fussing with it a little bit

2819
02:37:24,780 --> 02:37:29,800
what we don't have right now is a good

2820
02:37:27,340 --> 02:37:32,770
way of knowing whether or not this thing

2821
02:37:29,799 --> 02:37:36,279
was accurate before what I realized is

2822
02:37:32,770 --> 02:37:38,020
actually we have that information so I'm

2823
02:37:36,280 --> 02:37:39,970
kind of dumb for thinking I need you to

2824
02:37:38,020 --> 02:37:43,630
store that so if we take a look at what

2825
02:37:39,969 --> 02:37:45,398
happens inside the lighting box we don't

2826
02:37:43,629 --> 02:37:49,000
really need storage contents are valid

2827
02:37:45,398 --> 02:37:50,978
like that's just not necessary at all

2828
02:37:49,000 --> 02:37:53,590
storage contents are valid is a waste of

2829
02:37:50,978 --> 02:37:55,059
time because we don't need to look at

2830
02:37:53,590 --> 02:37:59,219
storage contents are valid instead we

2831
02:37:55,059 --> 02:38:02,409
can just look to see whether or not the

2832
02:37:59,219 --> 02:38:07,090
whether or not the normal of the first

2833
02:38:02,409 --> 02:38:11,489
point is a valid normal or not right so

2834
02:38:07,090 --> 02:38:11,489
if we wanted to we could just say okay

2835
02:38:12,299 --> 02:38:23,109
we've got a lighting point here so

2836
02:38:15,030 --> 02:38:27,430
where's the storage so this this storage

2837
02:38:23,110 --> 02:38:33,460
value here let's just take a look at

2838
02:38:27,430 --> 02:38:37,270
lighting point state that's the first

2839
02:38:33,459 --> 02:38:39,879
point right that's that's what that's

2840
02:38:37,270 --> 02:38:46,649
going to be what we can do here is just

2841
02:38:39,879 --> 02:38:46,648
check if the direction

2842
02:38:50,408 --> 02:39:05,498
of any of these is non-0 Venice valid

2843
02:39:06,010 --> 02:39:09,978
because it's a direction it can't be

2844
02:39:08,629 --> 02:39:12,408
equal to zero zero zero

2845
02:39:09,978 --> 02:39:14,719
although the reflected one could be if

2846
02:39:12,408 --> 02:39:17,529
we have zero zero zero here before then

2847
02:39:14,719 --> 02:39:20,118
there wasn't any information here right

2848
02:39:17,529 --> 02:39:22,670
there wasn't we never collected even a

2849
02:39:20,119 --> 02:39:24,619
single sample the previous frame so it

2850
02:39:22,670 --> 02:39:26,059
definitely never got a valid lighting

2851
02:39:24,619 --> 02:39:31,550
solution and whatever you got this frame

2852
02:39:26,059 --> 02:39:34,728
we should probably use right this is not

2853
02:39:31,549 --> 02:39:36,948
what I wanted to actually want that so I

2854
02:39:34,728 --> 02:39:38,688
think that correctly does everything

2855
02:39:36,949 --> 02:39:40,880
now we're massively over time now and

2856
02:39:38,689 --> 02:39:44,600
this isn't gonna work because I made so

2857
02:39:40,879 --> 02:39:47,328
many changes it's nuts but you get the

2858
02:39:44,600 --> 02:39:49,399
idea so I'm gonna leave this I guess I

2859
02:39:47,328 --> 02:39:52,219
could just debug the basic crashing

2860
02:39:49,398 --> 02:40:03,309
stuff but yeah I'll do a quick little

2861
02:39:52,219 --> 02:40:03,309
check is this correct No

2862
02:40:15,670 --> 02:40:40,000
box okay box so the storage got set to

2863
02:40:36,920 --> 02:40:47,840
something but that's something is not

2864
02:40:40,000 --> 02:40:54,040
legal which is a bit weird so let's find

2865
02:40:47,840 --> 02:40:58,069
out why the light boxes all come from

2866
02:40:54,040 --> 02:40:59,960
the solution here right says there's 67

2867
02:40:58,069 --> 02:41:05,090
of these presumably they all got pushed

2868
02:40:59,959 --> 02:41:10,419
on let's go take a look really quickly

2869
02:41:05,090 --> 02:41:10,420
here of where they actually get pushed

2870
02:41:16,220 --> 02:41:20,960
sooo in here when I push one on

2871
02:41:18,591 --> 02:41:23,899
presumably the storage always gets set

2872
02:41:20,960 --> 02:41:27,680
and so this should be a valid value

2873
02:41:23,899 --> 02:41:29,060
right because in order to actually get

2874
02:41:27,681 --> 02:41:34,310
one pushed on here

2875
02:41:29,060 --> 02:41:54,261
you have to actually have reasonable

2876
02:41:34,310 --> 02:41:57,950
data also so I'm not sure exactly why

2877
02:41:54,261 --> 02:41:59,360
that would be causing a problem but we

2878
02:41:57,950 --> 02:42:01,130
certainly could try to make it fail

2879
02:41:59,360 --> 02:42:03,411
earlier and give us a hint of what was

2880
02:42:01,130 --> 02:42:05,600
going on by saying well if the storage

2881
02:42:03,411 --> 02:42:07,851
value is wrong then what I could do is

2882
02:42:05,601 --> 02:42:09,411
just reach into it here right say okay

2883
02:42:07,851 --> 02:42:13,810
whatever the light story is let's just

2884
02:42:09,411 --> 02:42:13,810
set the direction equal to some value

2885
02:42:14,171 --> 02:42:20,300
right and so that should crash like

2886
02:42:17,181 --> 02:42:22,911
right away on push if it was actually a

2887
02:42:20,300 --> 02:42:25,850
problem of storing the boxes but it

2888
02:42:22,911 --> 02:42:27,890
looks like it's not because it's it's

2889
02:42:25,851 --> 02:42:31,371
trying to access this first point here

2890
02:42:27,890 --> 02:42:33,890
that appears to be the problem so I feel

2891
02:42:31,370 --> 02:42:36,439
like the box itself that are getting

2892
02:42:33,890 --> 02:42:40,161
pulled out is is the issue there and not

2893
02:42:36,440 --> 02:42:41,931
the ones that are getting pushed on so

2894
02:42:40,161 --> 02:42:43,610
let me go in here and just see what's

2895
02:42:41,931 --> 02:42:48,501
going on there if there's something

2896
02:42:43,610 --> 02:42:49,431
strange that I don't understand yeah and

2897
02:42:48,501 --> 02:42:50,661
in fact you know what else I can do let

2898
02:42:49,431 --> 02:42:51,951
me step into this routine and just

2899
02:42:50,661 --> 02:42:53,690
quickly take a look at what that box

2900
02:42:51,950 --> 02:42:57,770
array looks like when it actually comes

2901
02:42:53,690 --> 02:43:03,530
in so if I set a breakpoint here on

2902
02:42:57,771 --> 02:43:05,271
lighting test here's my box count at 67

2903
02:43:03,530 --> 02:43:11,271
let's take a look at what the boxes

2904
02:43:05,271 --> 02:43:15,230
actually are and even the first one

2905
02:43:11,271 --> 02:43:17,900
storage is garbage right so something

2906
02:43:15,229 --> 02:43:19,399
bizarre is happening here is it just

2907
02:43:17,899 --> 02:43:21,470
like that the first one gets overwritten

2908
02:43:19,399 --> 02:43:24,100
or are they all garbage so they're all

2909
02:43:21,470 --> 02:43:24,100
garbage

2910
02:43:25,220 --> 02:43:41,329
oh that's actually to be expected so in

2911
02:43:39,380 --> 02:43:43,729
order for them not to be garbage the

2912
02:43:41,329 --> 02:43:45,950
lighting solution has to be run prior to

2913
02:43:43,729 --> 02:43:47,659
throwing away the simulation state

2914
02:43:45,950 --> 02:43:53,450
because we're gonna write the entities

2915
02:43:47,659 --> 02:43:57,079
back back in so we actually need this to

2916
02:43:53,450 --> 02:44:05,240
run the lighting test to run that

2917
02:43:57,079 --> 02:44:08,479
actually needs to run in line so this

2918
02:44:05,239 --> 02:44:10,851
right here actually has to be done like

2919
02:44:08,479 --> 02:44:15,649
this because we want to capture the

2920
02:44:10,851 --> 02:44:19,671
information that it's given so that that

2921
02:44:15,649 --> 02:44:22,761
might be part of it

2922
02:44:19,671 --> 02:44:24,829
yeah and that looks a lot better it

2923
02:44:22,761 --> 02:44:27,159
looks like the last box is invalid

2924
02:44:24,829 --> 02:44:27,159
however

2925
02:44:35,090 --> 02:44:40,279
oh wait no with this it says there's 106

2926
02:44:38,059 --> 02:44:42,350
now this is how many boxes there were

2927
02:44:40,279 --> 02:44:56,060
last time it thinks there's a hundred

2928
02:44:42,350 --> 02:44:58,689
and six boxes this time so that's a

2929
02:44:56,059 --> 02:44:58,689
little bit weird

2930
02:45:17,630 --> 02:45:32,069
let me go back to testing what I was

2931
02:45:19,710 --> 02:45:34,409
testing before because by the time I get

2932
02:45:32,069 --> 02:45:35,640
in here I mean light store has to be set

2933
02:45:34,409 --> 02:45:38,069
to something or I couldn't have gotten

2934
02:45:35,640 --> 02:45:39,989
here right so I'm not sure how I would

2935
02:45:38,069 --> 02:45:40,440
get the light box count to do what it

2936
02:45:39,989 --> 02:45:43,591
just did

2937
02:45:40,440 --> 02:45:46,051
now I guess I should double check inside

2938
02:45:43,591 --> 02:45:48,479
the render grip here oops

2939
02:45:46,050 --> 02:45:50,220
inside the hand made to make sure that

2940
02:45:48,479 --> 02:45:55,501
I'm resetting that value correctly every

2941
02:45:50,220 --> 02:45:58,921
frame but I am so the only question

2942
02:45:55,501 --> 02:46:00,210
would be if it gets like fussed with in

2943
02:45:58,921 --> 02:46:09,841
some way that it shouldn't be fussed

2944
02:46:00,210 --> 02:46:11,310
with yeah that's that's peculiar so if

2945
02:46:09,841 --> 02:46:16,021
we take a look at what happens when I

2946
02:46:11,310 --> 02:46:20,699
step in here the first time through we

2947
02:46:16,021 --> 02:46:23,851
should have 67 and all 67 of them are

2948
02:46:20,700 --> 02:46:26,280
fine or they're not ah that's why

2949
02:46:23,851 --> 02:46:28,021
because we're looking through boxes that

2950
02:46:26,280 --> 02:46:31,561
have been added as part of the spatial

2951
02:46:28,021 --> 02:46:33,360
partition so on the way out we strictly

2952
02:46:31,560 --> 02:46:37,130
want to confine ourselves to the

2953
02:46:33,360 --> 02:46:40,700
original set of boxes so that's fine

2954
02:46:37,130 --> 02:46:40,699
that's totally fine

2955
02:46:41,149 --> 02:46:44,369
[Music]

2956
02:46:52,729 --> 02:46:56,329
so really what we want to do here is

2957
02:46:54,409 --> 02:47:07,389
confine ourselves to the original box

2958
02:46:56,329 --> 02:47:07,389
count like so all right

2959
02:47:09,978 --> 02:47:16,279
okay so now we're at least running

2960
02:47:13,639 --> 02:47:18,260
we're totally wrong this is not a good

2961
02:47:16,280 --> 02:47:20,060
lighting solution but that's fine for

2962
02:47:18,260 --> 02:47:25,069
today so next weekend will be our

2963
02:47:20,059 --> 02:47:26,659
debugging festival and we can get the

2964
02:47:25,069 --> 02:47:29,209
rest of this stuff working but now we

2965
02:47:26,659 --> 02:47:31,700
don't have any of that sort of really

2966
02:47:29,209 --> 02:47:33,889
nasty bookkeeping in there that I was

2967
02:47:31,700 --> 02:47:35,150
uncomfortable with I I just didn't feel

2968
02:47:33,889 --> 02:47:37,699
like it was gonna go particularly well

2969
02:47:35,149 --> 02:47:40,309
for us so now what we've got is okay

2970
02:47:37,700 --> 02:47:41,570
entities can store the information about

2971
02:47:40,309 --> 02:47:42,859
their lighting in them while they're

2972
02:47:41,569 --> 02:47:44,689
still in a place where it's going to

2973
02:47:42,860 --> 02:47:46,400
matter as soon as we detect if they've

2974
02:47:44,689 --> 02:47:48,110
gone too far out of there we can

2975
02:47:46,399 --> 02:47:50,180
jettison it so that's part of the enemy

2976
02:47:48,110 --> 02:47:54,170
packing and repacking stuff when we put

2977
02:47:50,180 --> 02:47:58,069
that in later on in the games lifecycle

2978
02:47:54,170 --> 02:47:59,899
and so that will be the place where that

2979
02:47:58,069 --> 02:48:02,209
can happen and now we just store that

2980
02:47:59,899 --> 02:48:04,189
that information directly back into the

2981
02:48:02,209 --> 02:48:05,659
entity so when an entity puts its

2982
02:48:04,189 --> 02:48:06,889
graphics information into the world it

2983
02:48:05,659 --> 02:48:08,119
also puts its lighting information if

2984
02:48:06,889 --> 02:48:09,859
that letting information existed on the

2985
02:48:08,120 --> 02:48:11,300
previous frame and if it didn't it

2986
02:48:09,860 --> 02:48:13,939
didn't we don't care we recompute it

2987
02:48:11,299 --> 02:48:17,259
right so that's way saner than it was

2988
02:48:13,939 --> 02:48:20,420
and I'm pretty happy with it all right

2989
02:48:17,260 --> 02:48:24,469
I'll go to like the briefest of Q&amp;A so

2990
02:48:20,420 --> 02:48:26,389
only completely on topic questions if

2991
02:48:24,469 --> 02:48:29,199
there's a very on topic question I will

2992
02:48:26,389 --> 02:48:29,199
take it otherwise

2993
02:49:58,101 --> 02:50:01,579
but he's right the 148 million was the

2994
02:50:00,681 --> 02:50:04,420
number of typhus later

2995
02:50:01,579 --> 02:50:04,420
ah okay great

2996
02:50:14,250 --> 02:50:19,719
so I see no really on topic questions is

2997
02:50:18,370 --> 02:50:22,420
this your usual design process a bit ad

2998
02:50:19,719 --> 02:50:25,929
hoc well difference you mean by design

2999
02:50:22,420 --> 02:50:27,700
process that's not really a very

3000
02:50:25,930 --> 02:50:30,280
specific term and doesn't refer to

3001
02:50:27,700 --> 02:50:33,070
anything in terms of trying to develop

3002
02:50:30,280 --> 02:50:34,870
new algorithms obviously yes you have to

3003
02:50:33,069 --> 02:50:38,799
be exploratory so you have to try things

3004
02:50:34,870 --> 02:50:41,020
and see what works once you're done with

3005
02:50:38,799 --> 02:50:44,199
them then you can maybe talk about a

3006
02:50:41,020 --> 02:50:45,909
design process which would be we know

3007
02:50:44,200 --> 02:50:47,710
exactly what we're doing and now we're

3008
02:50:45,909 --> 02:50:50,439
going to design say an API for it or

3009
02:50:47,709 --> 02:50:52,179
something like that or design exactly

3010
02:50:50,439 --> 02:50:54,309
how we want the system to function in a

3011
02:50:52,180 --> 02:50:57,460
shipping sense which is a different

3012
02:50:54,309 --> 02:50:59,500
thing so there's two kinds of design

3013
02:50:57,459 --> 02:51:01,688
there's exploratory design and there's

3014
02:50:59,500 --> 02:51:03,159
like shipping design exploratory design

3015
02:51:01,689 --> 02:51:04,300
has to be ad hoc because you obviously

3016
02:51:03,159 --> 02:51:06,389
don't know what you're doing or you

3017
02:51:04,299 --> 02:51:08,199
wouldn't have to be exploring a solution

3018
02:51:06,389 --> 02:51:09,489
whereas something where you're just

3019
02:51:08,200 --> 02:51:14,100
you're done you're like this is what it

3020
02:51:09,489 --> 02:51:18,699
is and now we just want to make it be

3021
02:51:14,100 --> 02:51:20,439
sort of ready packaged up and you know

3022
02:51:18,700 --> 02:51:23,370
designed for maintenance and that sort

3023
02:51:20,439 --> 02:51:23,370
of stuff that's a different process

3024
02:52:00,430 --> 02:52:05,319
all right look no further questions

3025
02:52:13,569 --> 02:52:17,569
all right all right thank you for

3026
02:52:16,459 --> 02:52:18,919
joining me for the episode of handmade

3027
02:52:17,569 --> 02:52:20,840
hero it's been a pleasure coding with

3028
02:52:18,920 --> 02:52:21,950
you as always if you would like to

3029
02:52:20,840 --> 02:52:23,239
follow along the series at home you can

3030
02:52:21,950 --> 02:52:26,090
always peer to the game on handmade hero

3031
02:52:23,239 --> 02:52:28,879
dot-org it comes with the source code so

3032
02:52:26,090 --> 02:52:33,139
you can play around with it I'm gonna be

3033
02:52:28,879 --> 02:52:35,659
back to debug this stuff next week I'm

3034
02:52:33,139 --> 02:52:36,920
pretty happy with what we decided to do

3035
02:52:35,659 --> 02:52:38,809
with the caching there that's a lot

3036
02:52:36,920 --> 02:52:41,989
saner than where we were going before so

3037
02:52:38,809 --> 02:52:45,739
I think that's gonna work out better in

3038
02:52:41,989 --> 02:52:47,030
the long term but we've got a bunch of

3039
02:52:45,739 --> 02:52:48,590
debugging and performance optimization

3040
02:52:47,030 --> 02:52:50,570
to do now so we just gotta like roll up

3041
02:52:48,590 --> 02:52:55,130
our sleeves and do that and I think we

3042
02:52:50,569 --> 02:52:58,189
should be in good shape so that you come

3043
02:52:55,129 --> 02:53:00,139
back to join me for that I may only do

3044
02:52:58,189 --> 02:53:02,450
one stream next weekend because I may

3045
02:53:00,139 --> 02:53:04,699
have a prior engagement one of the days

3046
02:53:02,450 --> 02:53:05,780
so either way we will start the

3047
02:53:04,700 --> 02:53:06,710
debugging next weekend though I just

3048
02:53:05,780 --> 02:53:08,180
don't know if it'll be two days it might

3049
02:53:06,709 --> 02:53:09,319
only be one day either way that's what

3050
02:53:08,180 --> 02:53:10,520
we're gonna be doing so see you back

3051
02:53:09,319 --> 02:53:12,709
here for that till then have fun

3052
02:53:10,520 --> 02:53:15,700
programming and I'll see y'all on the

3053
02:53:12,709 --> 02:53:15,699
Internet take it easy everybody

