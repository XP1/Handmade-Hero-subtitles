1
00:00:01,219 --> 00:00:06,028
alright hello everyone and welcome to

2
00:00:04,830 --> 00:00:09,419
hand made here oh sure we code a

3
00:00:06,028 --> 00:00:10,679
complete game live on stream you may

4
00:00:09,419 --> 00:00:11,968
have noticed we've got a Kickstarter

5
00:00:10,679 --> 00:00:14,219
going right now for those of you

6
00:00:11,968 --> 00:00:17,189
interested in comics you might want to

7
00:00:14,218 --> 00:00:19,108
check it out Anna and I I'm working on

8
00:00:17,190 --> 00:00:20,910
it for the past year or so and there's a

9
00:00:19,109 --> 00:00:22,199
print edition up now so there's a banner

10
00:00:20,910 --> 00:00:23,518
on the handmade hero page so if you

11
00:00:22,199 --> 00:00:26,699
visit the handmade hero page is pretty

12
00:00:23,518 --> 00:00:30,719
easy to find we're gonna jump right into

13
00:00:26,699 --> 00:00:33,059
the coding today we have a bunch of work

14
00:00:30,719 --> 00:00:37,049
we can do now we set ourselves up to do

15
00:00:33,058 --> 00:00:38,968
some optimization of our rendering pass

16
00:00:37,049 --> 00:00:40,979
well specifically the lighting the ray

17
00:00:38,969 --> 00:00:42,570
casting in our rendering pass and we

18
00:00:40,979 --> 00:00:45,599
actually set ourselves up to call the

19
00:00:42,570 --> 00:00:47,308
entire path actually so one of the

20
00:00:45,600 --> 00:00:50,399
interesting things is we can now also

21
00:00:47,308 --> 00:00:53,039
work in isolated fashion on optimizing

22
00:00:50,399 --> 00:00:55,739
the texture processing if we want to so

23
00:00:53,039 --> 00:00:58,230
that's all pretty good stuff so we now

24
00:00:55,738 --> 00:01:02,369
have this HH light prof and if we

25
00:00:58,229 --> 00:01:06,569
actually run that you can see if we go

26
00:01:02,369 --> 00:01:08,700
to the handmade directory and we have

27
00:01:06,569 --> 00:01:10,500
like a debug dump here that we dumped of

28
00:01:08,700 --> 00:01:12,600
all of our lighting data which i think

29
00:01:10,500 --> 00:01:13,560
is included right now I don't know if

30
00:01:12,599 --> 00:01:15,750
it's a go to the get up asking lease

31
00:01:13,560 --> 00:01:18,269
included in the it's probably including

32
00:01:15,750 --> 00:01:20,489
the github but it's presumably included

33
00:01:18,269 --> 00:01:22,679
in the zip files that you download from

34
00:01:20,489 --> 00:01:24,118
send owl or you can take those dumps

35
00:01:22,680 --> 00:01:25,200
yourself using the source code depending

36
00:01:24,118 --> 00:01:28,828
on how you're doing it but once you get

37
00:01:25,200 --> 00:01:31,920
those dumps we can actually run our HH

38
00:01:28,828 --> 00:01:37,530
Lite prof executable it will load those

39
00:01:31,920 --> 00:01:39,090
dumps it will do a Texel match to see to

40
00:01:37,530 --> 00:01:41,129
what extent were agreeing with our

41
00:01:39,090 --> 00:01:42,719
previous results so for example if we

42
00:01:41,129 --> 00:01:45,539
look at this number and it's relatively

43
00:01:42,719 --> 00:01:47,849
low we're in fairly good shape and then

44
00:01:45,540 --> 00:01:49,680
it will tell us how long it took to do

45
00:01:47,849 --> 00:01:52,078
things and you can see here how many

46
00:01:49,680 --> 00:01:53,700
seconds elapsed total and basically what

47
00:01:52,078 --> 00:01:55,589
this is doing is it's just taking the

48
00:01:53,700 --> 00:01:58,079
thing that handmade hero does for

49
00:01:55,590 --> 00:02:00,210
lighting every frame and it just runs at

50
00:01:58,078 --> 00:02:03,209
a ton of time so it runs it for you know

51
00:02:00,209 --> 00:02:04,500
seven seconds and it just keeps running

52
00:02:03,209 --> 00:02:06,359
it running it running it running it and

53
00:02:04,500 --> 00:02:08,159
the reason for that is just because it

54
00:02:06,359 --> 00:02:09,750
runs so fast normally because you know

55
00:02:08,159 --> 00:02:11,609
anything that has to run at 30 frames a

56
00:02:09,750 --> 00:02:13,530
second or 60 frames a second is probably

57
00:02:11,610 --> 00:02:13,920
already down to the to the point even

58
00:02:13,530 --> 00:02:16,020
before we

59
00:02:13,919 --> 00:02:17,519
mine's at hardcore where it's you know

60
00:02:16,020 --> 00:02:19,469
it's running fast enough that it's hard

61
00:02:17,520 --> 00:02:20,370
to time because the variants that you're

62
00:02:19,469 --> 00:02:21,959
going to get in there is a little bit

63
00:02:20,370 --> 00:02:23,550
too much so we're just running it lots

64
00:02:21,959 --> 00:02:24,989
of times so that we can kind of smooth

65
00:02:23,550 --> 00:02:27,060
that variance out a little bit and get

66
00:02:24,989 --> 00:02:29,340
somewhat consistent run times out of it

67
00:02:27,060 --> 00:02:33,150
so we can see how our changes actually

68
00:02:29,340 --> 00:02:35,969
affect things so what I'd like to do is

69
00:02:33,150 --> 00:02:38,730
I'd like to take a look today a little

70
00:02:35,969 --> 00:02:40,500
bit more at just reducing the amount of

71
00:02:38,729 --> 00:02:42,060
computation that we're actually doing

72
00:02:40,500 --> 00:02:44,098
here there's a couple of different

73
00:02:42,060 --> 00:02:46,199
things that we can do that we haven't

74
00:02:44,098 --> 00:02:47,939
really looked at yet and so if we look

75
00:02:46,199 --> 00:02:50,699
at how our lighting solutions actually

76
00:02:47,939 --> 00:02:51,479
working we can actually go to the the

77
00:02:50,699 --> 00:02:54,899
raycast

78
00:02:51,479 --> 00:02:56,669
and and see this right now we did the

79
00:02:54,900 --> 00:02:59,099
work already of splitting it into two

80
00:02:56,669 --> 00:03:01,649
types of loops you can see those loops

81
00:02:59,099 --> 00:03:03,419
operating here and there's a whole bunch

82
00:03:01,650 --> 00:03:06,180
of stuff that's not immediately clear

83
00:03:03,419 --> 00:03:08,099
out of it I hope that most people

84
00:03:06,180 --> 00:03:10,409
watched last week because it's gonna be

85
00:03:08,099 --> 00:03:12,769
kind of hard for me to explain what's

86
00:03:10,409 --> 00:03:15,180
going on here if you haven't seen it all

87
00:03:12,769 --> 00:03:17,640
but what I can try to do to bring you up

88
00:03:15,180 --> 00:03:19,890
to speed a little bit is there's two

89
00:03:17,639 --> 00:03:22,078
signs of the loop in the Ray caster and

90
00:03:19,889 --> 00:03:24,539
one side of the loop which is actually

91
00:03:22,079 --> 00:03:26,219
represented by the first part here is

92
00:03:24,539 --> 00:03:29,429
actually the part that does the Ray

93
00:03:26,219 --> 00:03:32,129
casting against our actual like volumes

94
00:03:29,430 --> 00:03:34,170
we hit so this is actually the part that

95
00:03:32,129 --> 00:03:37,439
does all of the Ray casting that can

96
00:03:34,169 --> 00:03:38,849
actually produce results right but then

97
00:03:37,439 --> 00:03:40,889
we have another side of the branch

98
00:03:38,849 --> 00:03:42,840
that's here which is basically the thing

99
00:03:40,889 --> 00:03:45,599
that does all of the Ray casting against

100
00:03:42,840 --> 00:03:48,140
things which categorize space so this

101
00:03:45,599 --> 00:03:51,449
right here is something that categorizes

102
00:03:48,139 --> 00:03:55,439
you know it looks to see which parts of

103
00:03:51,449 --> 00:03:57,929
various structures you're actually going

104
00:03:55,439 --> 00:04:00,060
down right and so this allows us to take

105
00:03:57,930 --> 00:04:01,409
our spatial hierarchy and pass it and

106
00:04:00,060 --> 00:04:03,810
figure out which parts of the spatial

107
00:04:01,409 --> 00:04:07,139
hierarchy need to be examined and which

108
00:04:03,810 --> 00:04:10,199
ones don't and so it's not really

109
00:04:07,139 --> 00:04:12,449
producing actual ray intersections what

110
00:04:10,199 --> 00:04:15,000
it's doing is testing to see whether the

111
00:04:12,449 --> 00:04:16,108
Ray hits a particular region so that we

112
00:04:15,000 --> 00:04:17,459
know whether we need to look at the

113
00:04:16,108 --> 00:04:19,288
things inside that region and that's

114
00:04:17,459 --> 00:04:22,079
recursive right it doesn't actually use

115
00:04:19,288 --> 00:04:23,610
functions to recurse it actually just

116
00:04:22,079 --> 00:04:25,259
keeps a little stack but it's still

117
00:04:23,610 --> 00:04:27,449
doing it recursively in the sense that

118
00:04:25,259 --> 00:04:28,889
it looks at something and then goes

119
00:04:27,449 --> 00:04:30,930
oh if I hit that I'm gonna put more

120
00:04:28,889 --> 00:04:33,990
things on to my stack to process right

121
00:04:30,930 --> 00:04:35,519
so that's the way this is actually

122
00:04:33,990 --> 00:04:37,590
working and what's interesting about

123
00:04:35,519 --> 00:04:39,990
that is it means that we have two

124
00:04:37,589 --> 00:04:41,639
specific two totally different right

125
00:04:39,990 --> 00:04:43,319
specific ways that we're doing our

126
00:04:41,639 --> 00:04:47,639
testing and they don't necessarily have

127
00:04:43,319 --> 00:04:49,379
much to do with each other so if we go

128
00:04:47,639 --> 00:04:53,009
look at something like the lighting box

129
00:04:49,379 --> 00:04:55,469
structure what you can see is that if

130
00:04:53,009 --> 00:04:57,209
you take a look at this here we have

131
00:04:55,470 --> 00:04:59,430
this lighting pack which has this

132
00:04:57,209 --> 00:05:01,289
information in it right and then we have

133
00:04:59,430 --> 00:05:04,980
this stuff which has the P the radius

134
00:05:01,290 --> 00:05:07,620
and the ref color and what we know at

135
00:05:04,980 --> 00:05:10,080
least at the moment is that it's unclear

136
00:05:07,620 --> 00:05:11,730
to us that we ever actually care about

137
00:05:10,079 --> 00:05:14,669
like what we're actually storing here

138
00:05:11,730 --> 00:05:16,980
the Box P and radius what you can see is

139
00:05:14,670 --> 00:05:18,840
that more or less all the time we

140
00:05:16,980 --> 00:05:21,300
actually use that we expand it to box

141
00:05:18,839 --> 00:05:23,609
min and box max and the only time we

142
00:05:21,300 --> 00:05:26,129
ever actually use the p and radius is to

143
00:05:23,610 --> 00:05:28,110
store those to be used finally at the

144
00:05:26,129 --> 00:05:31,019
end when we actually know what our hit

145
00:05:28,110 --> 00:05:33,420
is and so we could trivially reconstruct

146
00:05:31,019 --> 00:05:35,430
those things by just actually storing

147
00:05:33,420 --> 00:05:37,890
min and Max and so the first thing we

148
00:05:35,430 --> 00:05:40,110
may want to do just to get rid of this

149
00:05:37,889 --> 00:05:43,289
cruft like this stuff that's happening

150
00:05:40,110 --> 00:05:44,850
here to get rid of this cruft what we

151
00:05:43,290 --> 00:05:46,680
might want to do is just let's just take

152
00:05:44,850 --> 00:05:48,030
the simple step of saying we're just not

153
00:05:46,680 --> 00:05:50,670
going to do that anymore we're gonna

154
00:05:48,029 --> 00:05:52,919
store box min in box Max and that's it

155
00:05:50,670 --> 00:05:54,780
and also while we're at it let's take a

156
00:05:52,920 --> 00:05:56,939
look at how this thing is working ref

157
00:05:54,779 --> 00:05:58,229
color here also is the kind of thing

158
00:05:56,939 --> 00:05:59,399
that we could look at and say you know

159
00:05:58,230 --> 00:06:01,560
what that's too big

160
00:05:59,399 --> 00:06:03,629
we could easily eliminate some of that

161
00:06:01,560 --> 00:06:05,670
by stuffing that into the lighting box

162
00:06:03,629 --> 00:06:08,670
pack as a u-32 or something like this

163
00:06:05,670 --> 00:06:10,890
right that's just the color value that's

164
00:06:08,670 --> 00:06:11,400
like RGB and like a scaler or something

165
00:06:10,889 --> 00:06:13,649
like that

166
00:06:11,399 --> 00:06:15,989
so it turns out that like this could

167
00:06:13,649 --> 00:06:18,120
also be optimized away in some way that

168
00:06:15,990 --> 00:06:19,769
would make a lot of sense too so there's

169
00:06:18,120 --> 00:06:21,810
other things here that we could do but

170
00:06:19,769 --> 00:06:23,279
for the time being I think the first

171
00:06:21,810 --> 00:06:24,870
change I'd like to make is just get rid

172
00:06:23,279 --> 00:06:26,489
of extraneous computation because as

173
00:06:24,870 --> 00:06:28,259
we're like working through this there's

174
00:06:26,490 --> 00:06:30,720
really no sense in having extraneous

175
00:06:28,259 --> 00:06:32,670
computation and we know that both sides

176
00:06:30,720 --> 00:06:35,100
of our branch are doing this extraneous

177
00:06:32,670 --> 00:06:37,770
computation so it's not like this is

178
00:06:35,100 --> 00:06:39,270
going to be something that we will like

179
00:06:37,769 --> 00:06:40,500
if we decide to separate these two

180
00:06:39,269 --> 00:06:41,159
branches out into completely different

181
00:06:40,500 --> 00:06:43,139
routine

182
00:06:41,160 --> 00:06:45,150
are completely different passes it

183
00:06:43,139 --> 00:06:46,979
doesn't really matter because both sides

184
00:06:45,149 --> 00:06:49,159
want this change so doesn't seem like

185
00:06:46,980 --> 00:06:51,540
there's any downside to it to me right

186
00:06:49,160 --> 00:06:53,790
so what I'm gonna do here is say let's

187
00:06:51,540 --> 00:06:56,280
pretend there's a box min and box max

188
00:06:53,790 --> 00:06:58,140
here where we just say okay we're gonna

189
00:06:56,279 --> 00:07:00,029
go ahead and take this to do and take it

190
00:06:58,139 --> 00:07:01,439
seriously so instead of the radius we're

191
00:07:00,029 --> 00:07:04,259
just gonna get rid of that right and

192
00:07:01,439 --> 00:07:05,910
we're gonna do everywhere that we were

193
00:07:04,259 --> 00:07:07,949
previously filling these out we're just

194
00:07:05,910 --> 00:07:10,500
gonna take the P and radius and do

195
00:07:07,949 --> 00:07:13,139
exactly this so we're gonna say look the

196
00:07:10,500 --> 00:07:15,029
box min is gonna be the P minus radius

197
00:07:13,139 --> 00:07:17,819
right and we're gonna say that the Box

198
00:07:15,029 --> 00:07:19,589
max is going to be the P plus the radius

199
00:07:17,819 --> 00:07:22,050
and that's what we're actually gonna

200
00:07:19,589 --> 00:07:23,489
store so when the person actually gives

201
00:07:22,050 --> 00:07:25,020
us to us we're gonna store it that way

202
00:07:23,490 --> 00:07:29,040
now you may ask a question and it's a

203
00:07:25,019 --> 00:07:30,990
perfectly legitimate question why does

204
00:07:29,040 --> 00:07:32,970
it matter where we do this like if we're

205
00:07:30,990 --> 00:07:35,310
gonna have to do this expansion anyway

206
00:07:32,970 --> 00:07:36,990
like don't we have to back propagate

207
00:07:35,310 --> 00:07:38,759
this to the people actually calling us

208
00:07:36,990 --> 00:07:40,139
or anything like that to order to do the

209
00:07:38,759 --> 00:07:44,430
savings the answer is no because

210
00:07:40,139 --> 00:07:47,399
remember every single ray we trace has

211
00:07:44,430 --> 00:07:49,410
to do this to every box it encounters

212
00:07:47,399 --> 00:07:51,269
whereas this only happens when you

213
00:07:49,410 --> 00:07:52,830
create the box itself so when we

214
00:07:51,269 --> 00:07:55,919
actually push the occluders on each

215
00:07:52,829 --> 00:08:00,089
frame so this happens once per box per

216
00:07:55,920 --> 00:08:02,610
frame this happens once per box per Ray

217
00:08:00,089 --> 00:08:04,619
per frame and since we know we have

218
00:08:02,610 --> 00:08:06,629
thousands tens of thousands but actually

219
00:08:04,620 --> 00:08:08,910
hundreds of thousands of Ray's there's

220
00:08:06,629 --> 00:08:10,319
an extra multiplier of a thousand or ten

221
00:08:08,910 --> 00:08:12,660
thousand or a hundred thousand on here

222
00:08:10,319 --> 00:08:15,719
depending on how many times this box

223
00:08:12,660 --> 00:08:18,419
gets hit so the difference in multiplier

224
00:08:15,720 --> 00:08:20,669
here is massive so doing it once here

225
00:08:18,418 --> 00:08:22,560
versus doing it thousands or tens of

226
00:08:20,668 --> 00:08:23,639
thousand times here that's the savings

227
00:08:22,560 --> 00:08:25,379
I'm looking for right

228
00:08:23,639 --> 00:08:26,519
it's like it just seems obvious to me

229
00:08:25,379 --> 00:08:28,110
that we just want to get rid of that

230
00:08:26,519 --> 00:08:29,399
crust now it may not have much effect

231
00:08:28,110 --> 00:08:31,830
because it could be that this isn't the

232
00:08:29,399 --> 00:08:33,000
slow part but again one of the things

233
00:08:31,829 --> 00:08:34,740
you have to do when you're optimizing

234
00:08:33,000 --> 00:08:37,110
since there's so many variables involved

235
00:08:34,740 --> 00:08:38,879
is just don't do anything obviously

236
00:08:37,110 --> 00:08:40,050
stupid get it out of your way so you

237
00:08:38,879 --> 00:08:41,849
just have to think about it anymore and

238
00:08:40,049 --> 00:08:44,549
this is a clear thing we can just get

239
00:08:41,849 --> 00:08:46,259
out of our way right so what I'm gonna

240
00:08:44,549 --> 00:08:47,609
do now is just get rid of that so that

241
00:08:46,259 --> 00:08:49,799
we're clear about that and then from

242
00:08:47,610 --> 00:08:51,750
then on now here we can just go all

243
00:08:49,799 --> 00:08:53,459
right every time we were doing this we

244
00:08:51,750 --> 00:08:54,450
can just always use those other values

245
00:08:53,460 --> 00:08:57,600
so instead of

246
00:08:54,450 --> 00:08:59,910
Center hack half dim I can do min/max

247
00:08:57,600 --> 00:09:01,529
and just you know create the rectangle

248
00:08:59,909 --> 00:09:05,189
out of that pretty easily here

249
00:09:01,529 --> 00:09:06,779
same thing here recommend max you know

250
00:09:05,190 --> 00:09:08,550
what this actually looks like it's just

251
00:09:06,779 --> 00:09:11,389
using these since we don't need the

252
00:09:08,549 --> 00:09:13,559
extents value here at all it looks like

253
00:09:11,389 --> 00:09:15,360
we probably don't even need to do that

254
00:09:13,559 --> 00:09:20,159
but you know okay whatever you know it's

255
00:09:15,360 --> 00:09:21,570
it's fine so inside the box min box max

256
00:09:20,159 --> 00:09:24,059
stuff here we'll just do it like this

257
00:09:21,570 --> 00:09:26,040
and then we just need to update our

258
00:09:24,059 --> 00:09:27,269
actual lighting routines to use these

259
00:09:26,039 --> 00:09:32,219
right so you can see those happening

260
00:09:27,269 --> 00:09:33,870
there and you can see us doing a some of

261
00:09:32,220 --> 00:09:35,879
the work with it in our actual tree

262
00:09:33,870 --> 00:09:36,990
construction so this again is gonna be

263
00:09:35,879 --> 00:09:40,649
something we're gonna have to work with

264
00:09:36,990 --> 00:09:43,110
as well so let's go ahead and do the

265
00:09:40,649 --> 00:09:45,480
first the easy part first which is this

266
00:09:43,110 --> 00:09:47,460
routine here so in here we've got the

267
00:09:45,480 --> 00:09:49,200
box P in the box radius and we don't

268
00:09:47,460 --> 00:09:52,650
actually want this anymore so we're

269
00:09:49,200 --> 00:09:54,090
literally just gonna load up the we're

270
00:09:52,649 --> 00:09:56,549
gonna change what this is to just saying

271
00:09:54,090 --> 00:10:00,480
look we're gonna load these directly out

272
00:09:56,549 --> 00:10:02,069
of there to corresponding members there

273
00:10:00,480 --> 00:10:04,320
and we're not going to construct them

274
00:10:02,070 --> 00:10:06,930
anymore so if we just do this we should

275
00:10:04,320 --> 00:10:08,460
find that now we don't have any need for

276
00:10:06,929 --> 00:10:10,919
those other than the place where we

277
00:10:08,460 --> 00:10:12,660
store them for use later and so in here

278
00:10:10,919 --> 00:10:14,189
where we actually store them where we've

279
00:10:12,659 --> 00:10:15,419
got the hitbox Center and that sort of

280
00:10:14,190 --> 00:10:18,000
stuff we're actually gonna do here is

281
00:10:15,419 --> 00:10:20,370
say look hit hit box min and hit box max

282
00:10:18,000 --> 00:10:22,350
so we're gonna store the min and Max so

283
00:10:20,370 --> 00:10:23,820
again exactly the same code but we're

284
00:10:22,350 --> 00:10:28,350
just changing it so that now it doesn't

285
00:10:23,820 --> 00:10:33,690
use those values okay so now all we have

286
00:10:28,350 --> 00:10:35,190
to do is hit box min bucks max now all

287
00:10:33,690 --> 00:10:36,990
we have to do is at the end where we

288
00:10:35,190 --> 00:10:39,390
actually use these anywhere that we

289
00:10:36,990 --> 00:10:41,549
actually needed the radius so in places

290
00:10:39,389 --> 00:10:43,500
where we actually needed to use that we

291
00:10:41,549 --> 00:10:45,479
can reconstruct it now eventually we

292
00:10:43,500 --> 00:10:47,639
probably want to do this it's possible

293
00:10:45,480 --> 00:10:50,310
like I think it's it's it's likely we

294
00:10:47,639 --> 00:10:52,230
could actually make this work by instead

295
00:10:50,309 --> 00:10:55,049
of using the position and the radius by

296
00:10:52,230 --> 00:10:56,550
using something else but in this

297
00:10:55,049 --> 00:10:58,799
particular case I don't really care

298
00:10:56,549 --> 00:11:01,589
about that because since this this part

299
00:10:58,799 --> 00:11:04,559
of the code is so rare like this happens

300
00:11:01,590 --> 00:11:07,560
only after you've done all the loops up

301
00:11:04,559 --> 00:11:08,309
here only one time it's pretty free for

302
00:11:07,559 --> 00:11:10,259
us to do

303
00:11:08,309 --> 00:11:11,459
any calculations we want to do here

304
00:11:10,259 --> 00:11:14,399
because it happens so infrequently

305
00:11:11,460 --> 00:11:15,600
compared to everything else so I don't

306
00:11:14,399 --> 00:11:17,009
really care about this right now so I'm

307
00:11:15,600 --> 00:11:21,990
not gonna spend much time on it I'm just

308
00:11:17,009 --> 00:11:23,429
gonna recompute the hit center although

309
00:11:21,990 --> 00:11:26,220
wait does it even need that so it looks

310
00:11:23,429 --> 00:11:28,528
like it only needs the radius so if it

311
00:11:26,220 --> 00:11:30,629
only needs the hitbox radius then that's

312
00:11:28,528 --> 00:11:32,490
fine so all we have to do for that is

313
00:11:30,629 --> 00:11:34,500
we're just gonna do a multiplication

314
00:11:32,490 --> 00:11:37,080
here and what we need to do is subtract

315
00:11:34,500 --> 00:11:39,629
the two and then take half of it right

316
00:11:37,080 --> 00:11:41,670
so we have the Box max minus the Box min

317
00:11:39,629 --> 00:11:43,740
that gives us the diameter and then

318
00:11:41,669 --> 00:11:45,929
multiplying that by a half will give us

319
00:11:43,740 --> 00:11:50,759
the radius so we can just recompute that

320
00:11:45,929 --> 00:11:52,409
right sorry its hitbox min hitbox max um

321
00:11:50,759 --> 00:11:53,730
so it's pretty trivial oh there it is

322
00:11:52,409 --> 00:11:55,110
hitbox Center I'm like I thought we

323
00:11:53,730 --> 00:11:56,490
needed that you know it was like we

324
00:11:55,110 --> 00:11:58,889
should have needed that so to do the

325
00:11:56,490 --> 00:12:00,360
hitbox Center again pretty pretty

326
00:11:58,889 --> 00:12:02,278
straightforward it's the same thing and

327
00:12:00,360 --> 00:12:04,050
again I'm not thinking about these at

328
00:12:02,278 --> 00:12:05,370
all I don't care about how fast this

329
00:12:04,049 --> 00:12:06,569
part runs because I just don't think

330
00:12:05,370 --> 00:12:09,360
it's gonna be particularly relevant to

331
00:12:06,570 --> 00:12:12,000
us um so then it just leaves us I think

332
00:12:09,360 --> 00:12:13,710
with just this one routine that was made

333
00:12:12,000 --> 00:12:15,509
to work on other kinds of bounding boxes

334
00:12:13,710 --> 00:12:17,960
and I think so it's just the spatial

335
00:12:15,509 --> 00:12:21,059
partition stuff that's necessary I think

336
00:12:17,960 --> 00:12:23,280
yeah so basically we're just looking at

337
00:12:21,059 --> 00:12:26,489
two things split box and then the stuff

338
00:12:23,279 --> 00:12:27,480
that calls split box right now it looks

339
00:12:26,490 --> 00:12:30,120
like this one's actually pretty

340
00:12:27,480 --> 00:12:32,490
straightforward it looks like in this

341
00:12:30,120 --> 00:12:34,649
case we can just use some different

342
00:12:32,490 --> 00:12:36,299
calls and we'll just it'll just work so

343
00:12:34,649 --> 00:12:39,269
this routine looks like it's pretty

344
00:12:36,299 --> 00:12:41,609
straightforward to park out to port in

345
00:12:39,269 --> 00:12:45,210
this case we're just doing a rect min

346
00:12:41,610 --> 00:12:47,210
max here is all we actually need so

347
00:12:45,210 --> 00:12:51,959
there's our box min

348
00:12:47,210 --> 00:12:56,430
there's our box Max and and this is much

349
00:12:51,958 --> 00:12:57,719
like what was it in the letting

350
00:12:56,429 --> 00:12:59,639
computation where were we actually

351
00:12:57,720 --> 00:13:03,750
looking at this before let me let me

352
00:12:59,639 --> 00:13:08,429
just do a quick search air box or rect

353
00:13:03,750 --> 00:13:10,200
min max yeah okay so in get lightly for

354
00:13:08,429 --> 00:13:11,939
P you can see was the other place we

355
00:13:10,200 --> 00:13:14,120
were doing those rectum and maxes right

356
00:13:11,940 --> 00:13:16,460
so in through here

357
00:13:14,120 --> 00:13:17,899
but that's about it so yeah in here we

358
00:13:16,460 --> 00:13:19,940
can just do recommend Max and this is

359
00:13:17,899 --> 00:13:21,470
just to build up the total bounds of the

360
00:13:19,940 --> 00:13:22,130
lighting so again it doesn't really

361
00:13:21,470 --> 00:13:23,779
matter

362
00:13:22,129 --> 00:13:27,379
we're just unioning these two things

363
00:13:23,779 --> 00:13:29,480
together in here we are pulling those

364
00:13:27,379 --> 00:13:31,100
out as a peon or radius but we could

365
00:13:29,480 --> 00:13:33,710
just pull them out as a minute and max

366
00:13:31,100 --> 00:13:35,450
instead so that should be relatively

367
00:13:33,710 --> 00:13:38,660
straightforward as well we can just do

368
00:13:35,450 --> 00:13:40,820
like you know get min get max kind of a

369
00:13:38,659 --> 00:13:43,899
thing which is just a direct access so

370
00:13:40,820 --> 00:13:46,640
it's literally just this I believe

371
00:13:43,899 --> 00:13:49,129
am I right about that

372
00:13:46,639 --> 00:13:49,490
sorry weird look at this function there

373
00:13:49,129 --> 00:13:52,759
we go

374
00:13:49,490 --> 00:13:54,649
yeah and so it's again really really

375
00:13:52,759 --> 00:13:56,569
simple we don't actually use this root

376
00:13:54,649 --> 00:13:58,279
lightbox stuff anymore and so we're

377
00:13:56,570 --> 00:13:59,780
probably gonna pull that out but I've

378
00:13:58,279 --> 00:14:01,339
been leaving it in just in case we

379
00:13:59,779 --> 00:14:04,069
decide we want to try some light

380
00:14:01,340 --> 00:14:07,399
shooting approximations where we where

381
00:14:04,070 --> 00:14:08,660
we are some biasing towards lighting in

382
00:14:07,399 --> 00:14:10,699
the future I don't know if we want to do

383
00:14:08,659 --> 00:14:12,350
that we probably don't but I just wanted

384
00:14:10,700 --> 00:14:14,390
to keep that in there in case we find we

385
00:14:12,350 --> 00:14:15,860
want to try it again so yeah it looks

386
00:14:14,389 --> 00:14:18,439
like our errors are now isolated

387
00:14:15,860 --> 00:14:20,480
entirely to the split box routine and

388
00:14:18,440 --> 00:14:23,060
since now we're only looking at this lit

389
00:14:20,480 --> 00:14:24,889
box routine we can concentrate on what

390
00:14:23,059 --> 00:14:28,279
actually needs to happen here now some

391
00:14:24,889 --> 00:14:30,740
of the porting is exact the same sort of

392
00:14:28,279 --> 00:14:35,209
stuff we're doing before so box min box

393
00:14:30,740 --> 00:14:39,680
max here again just really simple min

394
00:14:35,210 --> 00:14:41,480
maxing here right so instead of getting

395
00:14:39,679 --> 00:14:43,309
the center in the P out we just do it

396
00:14:41,480 --> 00:14:44,899
this way so when we do the bouncy bounce

397
00:14:43,309 --> 00:14:47,449
B we're really just you know producing

398
00:14:44,899 --> 00:14:49,669
those mins and maxes directly so this

399
00:14:47,450 --> 00:14:51,470
again if anything this is actually just

400
00:14:49,669 --> 00:14:53,509
more efficient than it used to be

401
00:14:51,470 --> 00:14:56,000
because now we're always using mins and

402
00:14:53,509 --> 00:14:58,490
maxes instead of using center radiuses

403
00:14:56,000 --> 00:15:00,230
which didn't really ever were ever

404
00:14:58,490 --> 00:15:02,500
really what we wanted in any of these

405
00:15:00,230 --> 00:15:04,700
routines as far as I can tell right and

406
00:15:02,500 --> 00:15:06,529
now we're literally just down to a

407
00:15:04,700 --> 00:15:09,290
couple things which is the inner product

408
00:15:06,529 --> 00:15:10,909
with the actual center of the box looks

409
00:15:09,289 --> 00:15:13,819
like the only thing that will be less

410
00:15:10,909 --> 00:15:18,469
efficient in here again recked min max

411
00:15:13,820 --> 00:15:24,910
is quicker so we can just do that and

412
00:15:18,470 --> 00:15:24,910
that again just uses the Box min box max

413
00:15:25,830 --> 00:15:32,590
right so I think that's basically it and

414
00:15:30,610 --> 00:15:34,300
all we're left with now is the fact that

415
00:15:32,590 --> 00:15:36,850
look we're trying to classify the

416
00:15:34,299 --> 00:15:38,949
Centers of these things you can see us

417
00:15:36,850 --> 00:15:41,470
doing that here and so we just need a

418
00:15:38,950 --> 00:15:45,460
way to compute box P and really that's

419
00:15:41,470 --> 00:15:48,610
just getting the center right so all

420
00:15:45,460 --> 00:15:50,080
this is right here is just look box P in

421
00:15:48,610 --> 00:15:52,210
our case and we don't really even need

422
00:15:50,080 --> 00:15:55,960
to do this we can just do it here we can

423
00:15:52,210 --> 00:16:01,060
just say look this parent this thing

424
00:15:55,960 --> 00:16:06,220
here we've got a box min and a box max

425
00:16:01,059 --> 00:16:07,750
right we've got a box min in a box max

426
00:16:06,220 --> 00:16:12,190
and we just want to take the middle

427
00:16:07,750 --> 00:16:13,539
right so that's that's it we're just

428
00:16:12,190 --> 00:16:15,730
getting the center of that thing right

429
00:16:13,539 --> 00:16:20,500
and the same would be true here so

430
00:16:15,730 --> 00:16:23,279
instead of parent box it's just box but

431
00:16:20,500 --> 00:16:25,720
in theory that's all we need right at

432
00:16:23,279 --> 00:16:27,279
that point we've gotten rid of anywhere

433
00:16:25,720 --> 00:16:29,410
and it depends if we introduce any bugs

434
00:16:27,279 --> 00:16:32,980
there but that's really all we needed to

435
00:16:29,409 --> 00:16:35,829
do so we can see probably pretty easy ly

436
00:16:32,980 --> 00:16:38,769
if we got any errors by just looking at

437
00:16:35,830 --> 00:16:41,620
what the what the actual errors you can

438
00:16:38,769 --> 00:16:46,179
see I must have had an error there

439
00:16:41,620 --> 00:16:48,539
because oh no we have to recapture now

440
00:16:46,179 --> 00:16:51,219
actually no I think about it because

441
00:16:48,539 --> 00:16:53,529
we've changed the storage format so

442
00:16:51,220 --> 00:16:55,330
we're gonna have to recapture our dump

443
00:16:53,529 --> 00:16:58,179
which is unfortunate but that's just how

444
00:16:55,330 --> 00:17:01,000
it's gonna be we can't actually see to

445
00:16:58,179 --> 00:17:03,069
what extent that helped us well you know

446
00:17:01,000 --> 00:17:06,039
we could though now that I think about

447
00:17:03,070 --> 00:17:08,500
it we could do that so here's one way we

448
00:17:06,039 --> 00:17:11,289
can still use the same dump when we load

449
00:17:08,500 --> 00:17:16,269
this thing in so when we actually do our

450
00:17:11,289 --> 00:17:18,399
debug load so in light prof when we load

451
00:17:16,269 --> 00:17:20,799
in this information for the debug load

452
00:17:18,400 --> 00:17:23,490
here so this stuff right here what we

453
00:17:20,799 --> 00:17:26,859
can do is we can quickly do a debug pass

454
00:17:23,490 --> 00:17:30,819
that just updates those those pieces of

455
00:17:26,859 --> 00:17:32,559
information so in here where we do right

456
00:17:30,819 --> 00:17:34,869
before we call internal lightning core

457
00:17:32,559 --> 00:17:36,379
right we can do a quick sweep over all

458
00:17:34,869 --> 00:17:38,569
of the boxes in the system

459
00:17:36,380 --> 00:17:41,840
and we can change them so we can just

460
00:17:38,569 --> 00:17:43,939
say alright we've got a box index the

461
00:17:41,839 --> 00:17:48,470
box index is gonna go up to whatever the

462
00:17:43,940 --> 00:17:51,529
box count is right so we just go through

463
00:17:48,470 --> 00:17:54,950
all of the boxes and we take each

464
00:17:51,529 --> 00:17:59,299
lighting box and we transform it right

465
00:17:54,950 --> 00:18:05,539
so we can say okay for whatever box were

466
00:17:59,299 --> 00:18:14,539
on we take box min and box max and we

467
00:18:05,539 --> 00:18:17,119
compute values for those and all we have

468
00:18:14,539 --> 00:18:18,680
to do is recognize that box min the

469
00:18:17,119 --> 00:18:21,769
value be loaded in is actually gonna be

470
00:18:18,680 --> 00:18:25,310
the p value right so all we have to do

471
00:18:21,769 --> 00:18:27,559
is say look here's the trick if this was

472
00:18:25,309 --> 00:18:33,379
that you know this was the old p value

473
00:18:27,559 --> 00:18:36,379
right in fact I can just do it this way

474
00:18:33,380 --> 00:18:36,950
and this was the old R value right is

475
00:18:36,380 --> 00:18:39,200
that clear

476
00:18:36,950 --> 00:18:41,809
hopefully that's clear so then we can

477
00:18:39,200 --> 00:18:43,640
just say okay the old P minus the old R

478
00:18:41,809 --> 00:18:46,659
that's gonna be the radius and the old P

479
00:18:43,640 --> 00:18:50,540
plus the old R that's going to be the

480
00:18:46,660 --> 00:18:52,759
the new max right and so now we should

481
00:18:50,539 --> 00:18:55,269
be able to debug this without actually

482
00:18:52,759 --> 00:18:57,319
having to take a new capture right and

483
00:18:55,269 --> 00:18:59,210
if we look at what happened there you

484
00:18:57,319 --> 00:19:01,250
can see now we actually get the same

485
00:18:59,210 --> 00:19:03,769
results right we actually get the exact

486
00:19:01,250 --> 00:19:06,200
same results and what's nice is as an

487
00:19:03,769 --> 00:19:09,139
added bonus we actually got faster right

488
00:19:06,200 --> 00:19:11,960
so here's the old speed that we used to

489
00:19:09,140 --> 00:19:14,990
be running at 7.15 seconds for the test

490
00:19:11,960 --> 00:19:16,700
run now it's down to 6.7 seconds and all

491
00:19:14,990 --> 00:19:19,579
we did was change the data storage

492
00:19:16,700 --> 00:19:21,950
format right that's it we didn't do

493
00:19:19,579 --> 00:19:24,199
anything else I'm gonna put it to do

494
00:19:21,950 --> 00:19:29,539
around this because once we do a new

495
00:19:24,200 --> 00:19:33,740
capture we don't want to do this anymore

496
00:19:29,539 --> 00:19:37,700
right so we only want to do this while

497
00:19:33,740 --> 00:19:40,039
we're while we're using old captures so

498
00:19:37,700 --> 00:19:42,490
we don't want to do this once we do new

499
00:19:40,039 --> 00:19:42,490
captures

500
00:19:43,619 --> 00:19:51,839
um so that's fine right all right so

501
00:19:47,609 --> 00:19:54,028
again really great a cheap optimization

502
00:19:51,839 --> 00:19:57,148
for us there all we were doing is

503
00:19:54,028 --> 00:19:59,519
removing cruft right we we worked

504
00:19:57,148 --> 00:20:01,918
backwards going look we optimized this

505
00:19:59,519 --> 00:20:04,409
routine at least somewhat and we can see

506
00:20:01,919 --> 00:20:06,450
that we never really care about the

507
00:20:04,409 --> 00:20:08,940
position and radius in the inner loops

508
00:20:06,450 --> 00:20:10,590
of this thing so we don't really want

509
00:20:08,940 --> 00:20:12,389
that to be primal right we want

510
00:20:10,589 --> 00:20:14,308
something else to be primal which is the

511
00:20:12,388 --> 00:20:16,469
Box Manan box max so let's just do that

512
00:20:14,308 --> 00:20:18,538
and then in the cases where we think we

513
00:20:16,470 --> 00:20:20,009
might want the radius in the center we

514
00:20:18,538 --> 00:20:22,048
can just regenerate them because that's

515
00:20:20,009 --> 00:20:23,999
only happening at times that aren't

516
00:20:22,048 --> 00:20:26,220
performance critical right so it's just

517
00:20:23,999 --> 00:20:28,259
shifting the data storage format so that

518
00:20:26,220 --> 00:20:31,350
we're not doing spurious computations in

519
00:20:28,259 --> 00:20:34,829
in sort of more specific scenarios here

520
00:20:31,349 --> 00:20:36,240
that are expensive right so there's a

521
00:20:34,829 --> 00:20:38,339
lot of other things we could choose to

522
00:20:36,240 --> 00:20:40,378
do here and they start to get kind of

523
00:20:38,339 --> 00:20:43,138
Squinkie particularly fast but there's

524
00:20:40,378 --> 00:20:44,490
one thing that I do want to know there's

525
00:20:43,138 --> 00:20:46,048
a couple of things that we've tried so

526
00:20:44,490 --> 00:20:47,669
we took a look at this routine before

527
00:20:46,048 --> 00:20:50,609
and one of the things we were looking at

528
00:20:47,669 --> 00:20:52,649
is whether branchless whether making

529
00:20:50,609 --> 00:20:54,839
this routine work branchless lee was a

530
00:20:52,648 --> 00:20:57,028
win or not and one of the things I

531
00:20:54,839 --> 00:20:59,038
realized was because our trees are

532
00:20:57,028 --> 00:21:01,980
effectively binary trees they split the

533
00:20:59,038 --> 00:21:06,148
world in half each time this loop is not

534
00:21:01,980 --> 00:21:09,538
really a loop right every time we look

535
00:21:06,148 --> 00:21:12,268
like the way to look at it is this is

536
00:21:09,538 --> 00:21:13,679
not only a perfectly for this branch is

537
00:21:12,269 --> 00:21:16,079
not only perfectly predictable it

538
00:21:13,679 --> 00:21:18,028
happens every other time but it's also

539
00:21:16,079 --> 00:21:21,089
not really a loop meaning we're just

540
00:21:18,028 --> 00:21:23,519
loading two things right and one of the

541
00:21:21,089 --> 00:21:26,519
really stupid things about this is we

542
00:21:23,519 --> 00:21:28,470
don't actually need to do two tests we

543
00:21:26,519 --> 00:21:30,509
could just do one test and know what

544
00:21:28,470 --> 00:21:34,379
we're pushing on because all we really

545
00:21:30,509 --> 00:21:37,079
need to know is does this particular Ray

546
00:21:34,378 --> 00:21:41,009
cross both regions that this is split in

547
00:21:37,079 --> 00:21:43,470
two or just one right or neither right

548
00:21:41,009 --> 00:21:45,899
there's there's basically three cases it

549
00:21:43,470 --> 00:21:49,548
crosses one it crosses two it crosses

550
00:21:45,898 --> 00:21:49,548
zero or zero one and two right

551
00:21:51,059 --> 00:21:58,269
and so we have a lot of issues that we

552
00:21:56,920 --> 00:22:00,940
want to start thinking about now in

553
00:21:58,269 --> 00:22:03,250
order to speed this part up and this is

554
00:22:00,940 --> 00:22:07,750
the part right here that does the work

555
00:22:03,250 --> 00:22:09,069
that we actually care about and trying

556
00:22:07,750 --> 00:22:14,109
to go how to explain all the issues here

557
00:22:09,069 --> 00:22:17,439
so we have three main points we now have

558
00:22:14,109 --> 00:22:21,639
to start looking at and pushing on point

559
00:22:17,440 --> 00:22:24,820
one how do we actually want to store our

560
00:22:21,640 --> 00:22:26,440
tree right because what we did before is

561
00:22:24,819 --> 00:22:29,529
we just stored it in the lighting box

562
00:22:26,440 --> 00:22:32,890
structure we already had and we don't

563
00:22:29,529 --> 00:22:35,170
really know a if we want that meaning do

564
00:22:32,890 --> 00:22:38,140
we want to do it that way or not do we

565
00:22:35,170 --> 00:22:42,580
want to store some other struct that's

566
00:22:38,140 --> 00:22:44,950
separate - what does this tree want to

567
00:22:42,579 --> 00:22:47,399
look like if it's a KD tree like right

568
00:22:44,950 --> 00:22:49,930
now it's a KD tree that's what it is

569
00:22:47,400 --> 00:22:52,090
we're not actually storing it as a KD

570
00:22:49,930 --> 00:22:56,620
tree we're storing it as if it could be

571
00:22:52,089 --> 00:22:59,109
an NRI tree an NRI AAB tree basically if

572
00:22:56,619 --> 00:23:01,029
we're gonna do a KD tree if we're gonna

573
00:22:59,109 --> 00:23:02,619
decide right now KD tree is what we're

574
00:23:01,029 --> 00:23:04,269
doing and we're gonna go forward with

575
00:23:02,619 --> 00:23:06,459
that we should just make something

576
00:23:04,269 --> 00:23:08,259
that's purpose-built for KD trees and

577
00:23:06,460 --> 00:23:12,160
doesn't have a whole bunch of extra crap

578
00:23:08,259 --> 00:23:14,980
in it right so there's that and then

579
00:23:12,160 --> 00:23:17,529
finally do we actually want these in the

580
00:23:14,980 --> 00:23:19,509
same loop or not because there's two

581
00:23:17,529 --> 00:23:20,829
different ways we could do this the way

582
00:23:19,509 --> 00:23:24,400
that we're doing right now is

583
00:23:20,829 --> 00:23:27,429
oscillatory so we basically we go down

584
00:23:24,400 --> 00:23:29,200
sort of depth first and we process some

585
00:23:27,430 --> 00:23:31,060
hits then we pop up process some more

586
00:23:29,200 --> 00:23:33,730
hits and so on right so it's a depth

587
00:23:31,059 --> 00:23:35,950
first walk of this tree but we don't

588
00:23:33,730 --> 00:23:37,630
have to do that we could do more of a

589
00:23:35,950 --> 00:23:40,569
breadth-first thing where we do all of

590
00:23:37,630 --> 00:23:43,390
the calling first build some kind of a

591
00:23:40,569 --> 00:23:47,470
list where we use where we go through

592
00:23:43,390 --> 00:23:50,110
that list right and we could do

593
00:23:47,470 --> 00:23:52,750
something like that and right now I

594
00:23:50,109 --> 00:23:55,409
don't know which of those two things we

595
00:23:52,750 --> 00:23:55,410
actually want to do

596
00:23:59,069 --> 00:24:04,778
so I think what I need to start doing

597
00:24:01,749 --> 00:24:07,659
now is investigating how is this

598
00:24:04,778 --> 00:24:11,169
actually what's the most efficient way

599
00:24:07,659 --> 00:24:12,789
to actually use what we have here right

600
00:24:11,169 --> 00:24:15,909
so what's the most efficient way to

601
00:24:12,788 --> 00:24:19,868
stream these pieces of information out

602
00:24:15,909 --> 00:24:23,320
right that's what I actually want to

603
00:24:19,868 --> 00:24:25,988
know and so I'm gonna try I think I'm

604
00:24:23,319 --> 00:24:28,689
gonna try constructing what we have

605
00:24:25,989 --> 00:24:32,048
right now so without touching really

606
00:24:28,690 --> 00:24:34,749
anything else I want to see what happens

607
00:24:32,048 --> 00:24:39,038
if I change the way that we're

608
00:24:34,749 --> 00:24:40,929
structuring these loops right and I just

609
00:24:39,038 --> 00:24:44,798
I just want to get a feel for whether or

610
00:24:40,929 --> 00:24:46,719
not we can make a market improvement by

611
00:24:44,798 --> 00:24:49,179
for example separating these into two

612
00:24:46,719 --> 00:24:52,959
different loops that are unrelated to

613
00:24:49,179 --> 00:24:55,149
each other okay so that's all that's all

614
00:24:52,959 --> 00:25:00,940
we're doing and the way I'm gonna do

615
00:24:55,148 --> 00:25:05,378
that is I'm gonna essentially keep more

616
00:25:00,940 --> 00:25:18,609
or less what we have here and I'm just

617
00:25:05,378 --> 00:25:20,168
gonna maybe if zero out one of my hmm so

618
00:25:18,608 --> 00:25:22,918
it's gonna be kind of tough to test

619
00:25:20,169 --> 00:25:22,919
unfortunately

620
00:25:33,740 --> 00:25:37,919
because we're gonna have to make some

621
00:25:35,909 --> 00:25:39,659
decisions even just to test it and

622
00:25:37,919 --> 00:25:41,820
that's unfortunate but I just want to

623
00:25:39,659 --> 00:25:44,669
see what it what the difference is if we

624
00:25:41,819 --> 00:25:47,398
just change it into two loops and so

625
00:25:44,669 --> 00:25:50,070
what would happen is as we do our loop

626
00:25:47,398 --> 00:25:53,699
here we would just have a thing that

627
00:25:50,069 --> 00:25:57,509
allows us to do a a see move on to a

628
00:25:53,700 --> 00:25:59,519
totally separate stack so right that's

629
00:25:57,509 --> 00:26:03,929
all we're talking about here so

630
00:25:59,519 --> 00:26:08,089
basically what I want to do is in the

631
00:26:03,929 --> 00:26:10,860
lighting work structure is basically

632
00:26:08,089 --> 00:26:13,168
there would be a scratch array that can

633
00:26:10,859 --> 00:26:16,079
be used for streaming so that you can

634
00:26:13,169 --> 00:26:18,809
basically yeah I mean well here I'll

635
00:26:16,079 --> 00:26:21,388
show you so I'm gonna go ahead and go to

636
00:26:18,808 --> 00:26:24,210
the lighting work structure and in here

637
00:26:21,388 --> 00:26:25,888
what we're gonna do is say in addition

638
00:26:24,210 --> 00:26:28,139
to all this other garbage that's in here

639
00:26:25,888 --> 00:26:30,538
we're gonna take a little bit more off

640
00:26:28,138 --> 00:26:34,498
the big pad so we're gonna subtract

641
00:26:30,538 --> 00:26:36,388
another 8 from that and get down to 2

642
00:26:34,499 --> 00:26:40,110
give us like space for another pointer

643
00:26:36,388 --> 00:26:42,240
right so we're gonna have big pad is is

644
00:26:40,109 --> 00:26:45,269
not really a big pad anymore it's more

645
00:26:42,240 --> 00:26:48,868
of a small pad and in here we're just

646
00:26:45,269 --> 00:26:52,798
gonna have a lighting stack thing that

647
00:26:48,868 --> 00:26:55,168
we push on right so we already know we

648
00:26:52,798 --> 00:26:57,028
can represent all of this by just having

649
00:26:55,169 --> 00:26:58,470
a lighting box pack so what we're gonna

650
00:26:57,028 --> 00:27:00,749
do here is gonna say look there's a

651
00:26:58,470 --> 00:27:05,850
lighting box pack and the lighting box

652
00:27:00,749 --> 00:27:07,889
pack is like the scratch space right

653
00:27:05,849 --> 00:27:10,709
it's just a scratch array that we're

654
00:27:07,888 --> 00:27:12,839
gonna use for whatever stack random crap

655
00:27:10,710 --> 00:27:15,360
we need here and we're gonna assume that

656
00:27:12,839 --> 00:27:17,609
whoever is running this thing is gonna

657
00:27:15,359 --> 00:27:20,359
allocate enough space here so that we

658
00:27:17,609 --> 00:27:22,888
know that we won't run out right and

659
00:27:20,359 --> 00:27:24,748
that may be a lot of memory actually but

660
00:27:22,888 --> 00:27:25,138
doesn't matter as long as we don't touch

661
00:27:24,749 --> 00:27:27,899
it

662
00:27:25,138 --> 00:27:31,519
right so what we're gonna do there is

663
00:27:27,898 --> 00:27:35,008
just say ok so during the course of the

664
00:27:31,519 --> 00:27:36,509
of the allocation of work units so you

665
00:27:35,009 --> 00:27:40,048
know when we're actually creating the

666
00:27:36,509 --> 00:27:43,230
the work units we're gonna want to

667
00:27:40,048 --> 00:27:45,210
assign them to some memory right so in

668
00:27:43,230 --> 00:27:48,489
here where we go through and

669
00:27:45,210 --> 00:27:52,269
zero-out destruct what we're gonna want

670
00:27:48,489 --> 00:27:53,979
to do is stop this zeroing so we don't

671
00:27:52,269 --> 00:27:56,679
want to do this we want to be able to

672
00:27:53,979 --> 00:28:00,159
leave in certain values that are going

673
00:27:56,679 --> 00:28:03,190
to persist so if you look like diffuse

674
00:28:00,159 --> 00:28:04,869
Atlas and speck Atlas work Index entropy

675
00:28:03,190 --> 00:28:05,528
these are things that actually need to

676
00:28:04,868 --> 00:28:09,788
get set

677
00:28:05,528 --> 00:28:12,999
solution does not right so solution

678
00:28:09,788 --> 00:28:17,999
doesn't need to be set that can be set

679
00:28:12,999 --> 00:28:17,999
outside and so can the scratch space

680
00:28:18,298 --> 00:28:27,339
somewhere yeah so the stuff that

681
00:28:25,118 --> 00:28:31,178
actually wants to be zeroed is like

682
00:28:27,339 --> 00:28:35,939
total casts initiated total partitions

683
00:28:31,179 --> 00:28:38,710
tested total partition leaves used and

684
00:28:35,940 --> 00:28:42,239
total leaves tested and we may change

685
00:28:38,710 --> 00:28:45,399
those stats in the future as well

686
00:28:42,239 --> 00:28:46,808
according to our needs right and so what

687
00:28:45,398 --> 00:28:49,298
we want to do here is we want to set

688
00:28:46,808 --> 00:28:50,979
these up somewhere else right and we

689
00:28:49,298 --> 00:28:52,749
want to go ahead and like you know

690
00:28:50,979 --> 00:28:54,848
initialize all the things we might

691
00:28:52,749 --> 00:28:56,288
initialize here and so we're gonna need

692
00:28:54,848 --> 00:28:58,239
to initialize the solution in the

693
00:28:56,288 --> 00:28:59,888
scratch space the scratch base is going

694
00:28:58,239 --> 00:29:01,840
to be something that we may lock out

695
00:28:59,888 --> 00:29:05,048
that's basically like lighting packed

696
00:29:01,839 --> 00:29:07,388
box pack structures and it's just gonna

697
00:29:05,048 --> 00:29:10,569
be like the size of a lighting box pack

698
00:29:07,388 --> 00:29:12,368
structure times some number right and so

699
00:29:10,569 --> 00:29:14,858
what we want to do is before we get

700
00:29:12,368 --> 00:29:18,148
started on anything else you know when

701
00:29:14,858 --> 00:29:20,288
we're in our actual page light Prof and

702
00:29:18,148 --> 00:29:22,628
we'll have to back port this into

703
00:29:20,288 --> 00:29:24,069
hand-made here as well if we end up

704
00:29:22,628 --> 00:29:27,248
keeping it if we don't then we don't

705
00:29:24,069 --> 00:29:30,579
have to then what we're gonna do is when

706
00:29:27,249 --> 00:29:33,788
we do our when we do our setup here so

707
00:29:30,579 --> 00:29:36,189
when we malloc this nonsense here right

708
00:29:33,788 --> 00:29:39,489
what we're gonna want to do is go

709
00:29:36,190 --> 00:29:41,379
through the like a lock work count

710
00:29:39,489 --> 00:29:45,129
basically which is you know we set it to

711
00:29:41,378 --> 00:29:47,709
this we're going to go through the a

712
00:29:45,128 --> 00:29:53,199
lock work count and for each of these

713
00:29:47,710 --> 00:29:55,970
lighting work structures we're just

714
00:29:53,200 --> 00:29:59,819
going to go ahead and

715
00:29:55,970 --> 00:30:03,179
set these values now we want to know

716
00:29:59,819 --> 00:30:06,000
like what's the maximum you know max box

717
00:30:03,179 --> 00:30:08,190
or the max work stack depth right like

718
00:30:06,000 --> 00:30:09,839
how many of these are gonna be and we're

719
00:30:08,190 --> 00:30:12,419
just gonna say look it's possible that

720
00:30:09,839 --> 00:30:15,209
every box gets pushed on I mean sure

721
00:30:12,419 --> 00:30:16,919
right I don't care so we're just gonna

722
00:30:15,210 --> 00:30:18,840
say look for every one of our work

723
00:30:16,919 --> 00:30:20,700
distribution units we're just gonna say

724
00:30:18,839 --> 00:30:24,028
that we have a max work staff depth

725
00:30:20,700 --> 00:30:26,308
right now the problem with this is it's

726
00:30:24,028 --> 00:30:28,200
not quite exactly what we want because

727
00:30:26,308 --> 00:30:31,109
there's more of these than there are

728
00:30:28,200 --> 00:30:33,240
threads so what we really want is one

729
00:30:31,109 --> 00:30:35,129
per thread and the problem is we don't

730
00:30:33,240 --> 00:30:39,599
really have a way to express that at the

731
00:30:35,130 --> 00:30:42,630
moment right so this is not the best

732
00:30:39,599 --> 00:30:56,908
possible thing we can do I'm just gonna

733
00:30:42,630 --> 00:30:58,440
put it to do here on that and the

734
00:30:56,909 --> 00:31:00,778
problem is that we don't really have

735
00:30:58,440 --> 00:31:03,690
that concept in our system at the moment

736
00:31:00,778 --> 00:31:05,849
I don't think now I could be wrong about

737
00:31:03,690 --> 00:31:07,710
that because I think we actually do have

738
00:31:05,849 --> 00:31:09,629
in fact maybe this is all a waste of

739
00:31:07,710 --> 00:31:15,090
time what I'm doing maybe we actually

740
00:31:09,630 --> 00:31:20,278
already did this and if we did

741
00:31:15,089 --> 00:31:24,259
oops but let me just see where is our

742
00:31:20,278 --> 00:31:24,259
actual thread work stuff

743
00:31:34,160 --> 00:31:49,529
so yeah we didn't really do it right as

744
00:31:43,380 --> 00:31:51,090
far as I can tell because when we call

745
00:31:49,529 --> 00:31:56,819
through to these things or maybe wheat

746
00:31:51,089 --> 00:31:59,819
well here's the type def yeah so we

747
00:31:56,819 --> 00:32:01,759
passed like a work queue but we don't

748
00:31:59,819 --> 00:32:05,399
actually pass any other information

749
00:32:01,759 --> 00:32:06,839
right and that's kind of a mess up you

750
00:32:05,400 --> 00:32:11,250
know that's kind of not what we really

751
00:32:06,839 --> 00:32:13,169
want and inside like whatever the the

752
00:32:11,250 --> 00:32:18,029
queue entry point is so like for

753
00:32:13,170 --> 00:32:20,279
whatever our actual work queues are we

754
00:32:18,029 --> 00:32:23,579
probably shouldn't have done that when

755
00:32:20,279 --> 00:32:26,819
we look inside like win32 handmade and

756
00:32:23,579 --> 00:32:31,740
we go down to like whatever the like you

757
00:32:26,819 --> 00:32:35,399
know so if you look here we've got our

758
00:32:31,740 --> 00:32:39,680
curry thread and we you know we have our

759
00:32:35,400 --> 00:32:43,680
do worker work nonsense here right

760
00:32:39,680 --> 00:32:44,670
so in our win32 make queue where we say

761
00:32:43,680 --> 00:32:46,920
like we're gonna make one of these

762
00:32:44,670 --> 00:32:49,500
thread procs and we look at the thread

763
00:32:46,920 --> 00:32:53,400
prop you can see here what it does is it

764
00:32:49,500 --> 00:32:55,380
calls this win32 do next work entry you

765
00:32:53,400 --> 00:32:58,400
can see that sort of doing a call here

766
00:32:55,380 --> 00:33:01,560
and it does the callback on the queue

767
00:32:58,400 --> 00:33:07,710
what we really should have done is given

768
00:33:01,559 --> 00:33:09,509
this this whenever you call someone back

769
00:33:07,710 --> 00:33:11,640
using the callback you should have given

770
00:33:09,509 --> 00:33:16,140
them an arena is what should have

771
00:33:11,640 --> 00:33:18,690
happened so you know there should have

772
00:33:16,140 --> 00:33:22,460
been something look like that on the

773
00:33:18,690 --> 00:33:22,460
thread there should have been an arena

774
00:33:49,419 --> 00:33:53,390
and so that's just a screw-up and I mean

775
00:33:52,609 --> 00:33:56,359
one of the things you have to remember

776
00:33:53,390 --> 00:33:58,130
is handmade hero was started and a lot

777
00:33:56,359 --> 00:34:00,019
of this stuff was done like several

778
00:33:58,130 --> 00:34:01,760
years ago and I've done a lot more

779
00:34:00,019 --> 00:34:05,898
multi-threaded programming since then

780
00:34:01,759 --> 00:34:06,919
and so you know if it was today this

781
00:34:05,898 --> 00:34:09,079
system would look a lot different

782
00:34:06,919 --> 00:34:10,579
because I have a lot more experience and

783
00:34:09,079 --> 00:34:13,338
I would not have done some of the things

784
00:34:10,579 --> 00:34:15,739
that I did so you know this is just like

785
00:34:13,338 --> 00:34:17,449
experience talking right I can tell you

786
00:34:15,739 --> 00:34:18,709
you definitely want that if you're

787
00:34:17,449 --> 00:34:20,148
serious about multi-threading and

788
00:34:18,710 --> 00:34:22,280
handmade hero we're not that serious

789
00:34:20,148 --> 00:34:23,809
about mother threading we do it to do

790
00:34:22,280 --> 00:34:25,849
some of the heavy lifting work but we

791
00:34:23,809 --> 00:34:28,849
don't really multi thread that much we

792
00:34:25,849 --> 00:34:31,039
don't really need to but you know if you

793
00:34:28,849 --> 00:34:33,139
are you need there to be a scratch arena

794
00:34:31,039 --> 00:34:35,659
for each thread because you want threads

795
00:34:33,139 --> 00:34:37,820
to not talk to each other about memory

796
00:34:35,659 --> 00:34:40,039
management every time a thread has a

797
00:34:37,820 --> 00:34:41,750
pass to do memory management in a way

798
00:34:40,039 --> 00:34:43,250
that another thread can see you're just

799
00:34:41,750 --> 00:34:46,608
locking up your threads and it's bad

800
00:34:43,250 --> 00:34:48,949
right so we're gonna leave this like

801
00:34:46,608 --> 00:34:51,679
this for now just because we don't have

802
00:34:48,949 --> 00:34:52,809
per thread Arenas we should and so

803
00:34:51,679 --> 00:34:56,000
that's something you can think about

804
00:34:52,809 --> 00:34:57,889
separately anyway in here we're gonna

805
00:34:56,000 --> 00:35:00,500
create this scratch base and the scratch

806
00:34:57,889 --> 00:35:02,210
base now can be used I'm gonna call the

807
00:35:00,500 --> 00:35:03,980
HH light prof just to prove that nothing

808
00:35:02,210 --> 00:35:06,079
changed but we kind of knew that because

809
00:35:03,980 --> 00:35:10,219
we haven't actually put this change into

810
00:35:06,079 --> 00:35:12,980
place yet so if we now go up to see in

811
00:35:10,219 --> 00:35:16,399
our ray caster if we start to actually

812
00:35:12,980 --> 00:35:19,519
use that information then the first

813
00:35:16,400 --> 00:35:22,309
thing I could do for example is this box

814
00:35:19,519 --> 00:35:24,050
tack information here I could for

815
00:35:22,309 --> 00:35:26,119
example or should be able to just do

816
00:35:24,050 --> 00:35:26,359
something like this where I just say all

817
00:35:26,119 --> 00:35:30,588
right

818
00:35:26,358 --> 00:35:34,009
instead of au 64 right I could do this

819
00:35:30,588 --> 00:35:36,820
where I say the scratch what is this

820
00:35:34,010 --> 00:35:36,820
called again

821
00:35:38,380 --> 00:35:44,660
scratch base I should be able to use

822
00:35:41,780 --> 00:35:50,240
that scratch space here where I just do

823
00:35:44,659 --> 00:35:53,649
a cast of the u32 and the box tack is

824
00:35:50,239 --> 00:35:59,389
now and let me see if I ever take any

825
00:35:53,650 --> 00:36:02,119
thing weird about that box stack I don't

826
00:35:59,389 --> 00:36:03,379
so now we should be able to run this

827
00:36:02,119 --> 00:36:05,119
without crashing and it should work

828
00:36:03,380 --> 00:36:07,400
properly and basically all that's doing

829
00:36:05,119 --> 00:36:09,710
is using that scratch space right and

830
00:36:07,400 --> 00:36:11,000
I'm gonna undo that change almost

831
00:36:09,710 --> 00:36:13,639
immediately because I don't actually

832
00:36:11,000 --> 00:36:15,590
want to use that scratch space that's

833
00:36:13,639 --> 00:36:17,509
not the goal I just wanted to make sure

834
00:36:15,590 --> 00:36:19,789
I had some scratch space there so this

835
00:36:17,510 --> 00:36:23,480
box stack is probably fine to use

836
00:36:19,789 --> 00:36:26,029
exactly as we were so the only thing I'm

837
00:36:23,480 --> 00:36:29,090
doing here is I'm gonna say oh hey by

838
00:36:26,030 --> 00:36:31,250
the way we're also gonna have another

839
00:36:29,090 --> 00:36:34,430
one of these doodads here where we say

840
00:36:31,250 --> 00:36:39,670
alright there's like a different u32

841
00:36:34,429 --> 00:36:49,039
stack here that we're gonna use also I

842
00:36:39,670 --> 00:36:50,539
assume we see to you sir at this no I'm

843
00:36:49,039 --> 00:36:53,509
gonna start that the lighting box pack

844
00:36:50,539 --> 00:36:56,469
here is the same size as you 32 because

845
00:36:53,510 --> 00:37:01,540
that's just what we're doing right

846
00:36:56,469 --> 00:37:03,799
that's required anyway so in the you 32

847
00:37:01,539 --> 00:37:06,829
start here what I want to do is I want

848
00:37:03,800 --> 00:37:09,410
to load up that you know that works

849
00:37:06,829 --> 00:37:12,019
truck we have the scratch space and I

850
00:37:09,409 --> 00:37:14,269
want to call this like some other things

851
00:37:12,019 --> 00:37:16,300
so this is instead of the regular box

852
00:37:14,269 --> 00:37:20,199
that we were doing this is our like leaf

853
00:37:16,300 --> 00:37:25,519
count right and this is our like leaf

854
00:37:20,199 --> 00:37:26,779
stack I don't know right or leaves and

855
00:37:25,519 --> 00:37:28,849
so what we're gonna do is we're just

856
00:37:26,780 --> 00:37:31,100
gonna stream our leaves out into the

857
00:37:28,849 --> 00:37:33,889
scratch space that's that's all we're

858
00:37:31,099 --> 00:37:36,739
doing so we're gonna pull this routine

859
00:37:33,889 --> 00:37:40,369
out right we're gonna say look this is

860
00:37:36,739 --> 00:37:45,039
not gonna happen anymore okay and so

861
00:37:40,369 --> 00:37:45,039
instead of oops

862
00:37:45,420 --> 00:37:48,670
and so instead of doing what we were

863
00:37:47,438 --> 00:37:51,518
doing there we're gonna do something

864
00:37:48,670 --> 00:37:53,949
different right now because I can run

865
00:37:51,518 --> 00:37:56,649
these two in line I'm actually going to

866
00:37:53,949 --> 00:37:58,989
do that so what I'm gonna do instead is

867
00:37:56,650 --> 00:38:01,088
I'm gonna say all right since we have

868
00:37:58,989 --> 00:38:04,019
the ability to run both of these I'm

869
00:38:01,088 --> 00:38:07,808
actually gonna do and if zero here and

870
00:38:04,018 --> 00:38:10,838
literally take like this entire thing

871
00:38:07,809 --> 00:38:13,619
and copy it just so I can flip between

872
00:38:10,838 --> 00:38:17,558
them pretty easily if I want to right

873
00:38:13,619 --> 00:38:19,929
and again I wish compilers made this

874
00:38:17,559 --> 00:38:21,369
sort of thing easier they don't like

875
00:38:19,929 --> 00:38:23,439
programming in general kind of sucks

876
00:38:21,369 --> 00:38:26,079
because stuff where you want to do a/b

877
00:38:23,438 --> 00:38:28,659
testing is so poorly supported pretty

878
00:38:26,079 --> 00:38:31,539
much everywhere it's just annoying but

879
00:38:28,659 --> 00:38:33,009
you know what do you do so what we're

880
00:38:31,539 --> 00:38:36,369
gonna do here is we're gonna get rid of

881
00:38:33,009 --> 00:38:39,219
this loop right so this one's going away

882
00:38:36,369 --> 00:38:42,459
and instead we're just gonna have just

883
00:38:39,219 --> 00:38:44,499
this one and then we're gonna have a

884
00:38:42,458 --> 00:38:48,998
totally secondary pass that happens

885
00:38:44,498 --> 00:38:51,308
completely separately right i and so you

886
00:38:48,998 --> 00:38:53,798
can see what I'm going for here so what

887
00:38:51,309 --> 00:38:56,410
we're gonna do is we're going to break

888
00:38:53,798 --> 00:38:58,929
up these two loops the first loop here

889
00:38:56,409 --> 00:39:01,268
is going to loop over the stack like it

890
00:38:58,929 --> 00:39:03,519
normally would so this is working

891
00:39:01,268 --> 00:39:07,598
exactly as you would expect it to work

892
00:39:03,518 --> 00:39:11,588
right so nothing nothing weird happening

893
00:39:07,599 --> 00:39:14,789
there right whereas this one is going to

894
00:39:11,588 --> 00:39:18,130
do streaming so it's going to just like

895
00:39:14,789 --> 00:39:20,829
loop over the leaves if that makes sense

896
00:39:18,130 --> 00:39:22,900
and there's some things that are a

897
00:39:20,829 --> 00:39:26,619
little bit confusing about this which is

898
00:39:22,900 --> 00:39:33,329
that I don't know when we exactly want

899
00:39:26,619 --> 00:39:36,818
that to happen like I don't I don't know

900
00:39:33,329 --> 00:39:41,528
to what extent we want things pushed on

901
00:39:36,818 --> 00:39:48,130
in like a sane order and in in to what

902
00:39:41,528 --> 00:39:50,829
extent we don't right I think what we

903
00:39:48,130 --> 00:39:54,548
probably will want to do long term is

904
00:39:50,829 --> 00:39:57,160
when we actually sort these boxes in the

905
00:39:54,548 --> 00:39:57,730
actual startup routine we probably just

906
00:39:57,159 --> 00:40:01,719
want them

907
00:39:57,730 --> 00:40:04,300
they're already sorted so that you don't

908
00:40:01,719 --> 00:40:05,169
have to do this indirect reference if

909
00:40:04,300 --> 00:40:10,210
that makes sense

910
00:40:05,170 --> 00:40:12,389
but it doesn't matter anyway

911
00:40:10,210 --> 00:40:20,170
so what I want to do here is I want to

912
00:40:12,389 --> 00:40:22,358
loop over the leaf stack here reading

913
00:40:20,170 --> 00:40:24,369
out each leaf and running over each of

914
00:40:22,358 --> 00:40:28,559
the leaves in turn so in here we're just

915
00:40:24,369 --> 00:40:37,358
gonna say look what's our leaf index

916
00:40:28,559 --> 00:40:38,449
what's our leaf count and then for each

917
00:40:37,358 --> 00:40:39,750
of those

918
00:40:38,449 --> 00:40:47,108
[Music]

919
00:40:39,750 --> 00:40:49,269
I'm gonna grab out the pack and this is

920
00:40:47,108 --> 00:40:58,900
just going to come from our what did I

921
00:40:49,269 --> 00:41:01,179
call it leaves so we're just loading

922
00:40:58,900 --> 00:41:04,420
these out right and I guess this is

923
00:41:01,179 --> 00:41:07,299
called entry so we're just gonna load

924
00:41:04,420 --> 00:41:10,420
these out and process them in order that

925
00:41:07,300 --> 00:41:12,250
they come so now we don't have that test

926
00:41:10,420 --> 00:41:13,840
in there we do have this kind of

927
00:41:12,250 --> 00:41:15,699
annoying test which is we don't know how

928
00:41:13,840 --> 00:41:17,950
many of these they're gonna be each time

929
00:41:15,699 --> 00:41:20,108
and so the thing I'm not sure about is

930
00:41:17,949 --> 00:41:21,759
do we want to unpack these here or do we

931
00:41:20,108 --> 00:41:23,799
want to unpack these here and I don't

932
00:41:21,760 --> 00:41:26,290
actually know right that's just who

933
00:41:23,800 --> 00:41:28,990
knows I have no idea so then if we come

934
00:41:26,289 --> 00:41:31,779
up into here what we need to do is we

935
00:41:28,989 --> 00:41:34,299
need to go ahead and take a look at the

936
00:41:31,780 --> 00:41:36,580
this part of the routine we're pushing

937
00:41:34,300 --> 00:41:39,280
things on and what we need to do here is

938
00:41:36,579 --> 00:41:41,889
we need this to be predicated so this

939
00:41:39,280 --> 00:41:43,540
part here we're and we're not actually

940
00:41:41,889 --> 00:41:46,650
using that part we're using the top part

941
00:41:43,539 --> 00:41:49,960
here so we're choosing this part right

942
00:41:46,650 --> 00:41:51,639
and so in this part of the routine what

943
00:41:49,960 --> 00:41:55,030
we need to do is we actually need to do

944
00:41:51,639 --> 00:41:57,519
an if on this and we need to do like a

945
00:41:55,030 --> 00:42:01,119
switch on it right so we want to take

946
00:41:57,519 --> 00:42:05,190
what we're gonna pack right and we can

947
00:42:01,119 --> 00:42:05,190
grab that this way

948
00:42:05,409 --> 00:42:08,469
so you want to take what we're gonna

949
00:42:06,820 --> 00:42:10,930
pack and we're gonna pack it into one of

950
00:42:08,469 --> 00:42:13,629
two places so either we're gonna pack it

951
00:42:10,929 --> 00:42:15,129
into here and we can dispense with this

952
00:42:13,630 --> 00:42:16,900
because we know these C mobs are not

953
00:42:15,130 --> 00:42:19,090
actually being done but you know oh well

954
00:42:16,900 --> 00:42:21,940
so what we need to do is we need to take

955
00:42:19,090 --> 00:42:24,160
that test where we say look is this

956
00:42:21,940 --> 00:42:26,110
going to be a leaf or is it not going to

957
00:42:24,159 --> 00:42:29,409
be a leaf right so we basically want to

958
00:42:26,110 --> 00:42:31,870
say all right is this box is this is

959
00:42:29,409 --> 00:42:34,750
this thing a leaf container or isn't it

960
00:42:31,869 --> 00:42:35,949
if it's a leaf container we actually

961
00:42:34,750 --> 00:42:37,900
want these the other way around if it's

962
00:42:35,949 --> 00:42:44,169
a leaf container we need to go ahead and

963
00:42:37,900 --> 00:42:56,590
push it on to our leaves um and if it's

964
00:42:44,170 --> 00:42:58,180
not then we don't right oops and so all

965
00:42:56,590 --> 00:43:00,550
we're doing is breaking these loops into

966
00:42:58,179 --> 00:43:03,279
two passes that's all I did and

967
00:43:00,550 --> 00:43:06,400
hopefully I didn't screw it up right and

968
00:43:03,280 --> 00:43:08,800
it looks like I did like that's wrong so

969
00:43:06,400 --> 00:43:10,780
I've got some issue here that I gotta go

970
00:43:08,800 --> 00:43:13,030
address so the timing is going to be

971
00:43:10,780 --> 00:43:15,640
meaningless because we've got an error

972
00:43:13,030 --> 00:43:20,019
so let me just see if I can correct

973
00:43:15,639 --> 00:43:22,480
whatever mistake we made there and let

974
00:43:20,019 --> 00:43:25,210
me take a look at it so if the box we're

975
00:43:22,480 --> 00:43:28,690
about to pack is a leaf container we

976
00:43:25,210 --> 00:43:32,289
push it on to our leaves right like so

977
00:43:28,690 --> 00:43:34,179
and if the box is not then we push it on

978
00:43:32,289 --> 00:43:35,829
to the stack that we're using at the

979
00:43:34,179 --> 00:43:38,049
moment right

980
00:43:35,829 --> 00:43:41,139
and then we loop and then we continue

981
00:43:38,050 --> 00:43:43,660
looping right so this this thing keeps

982
00:43:41,139 --> 00:43:45,940
going at that point right and that's

983
00:43:43,659 --> 00:43:47,710
while the depth is is valid when we get

984
00:43:45,940 --> 00:43:50,349
through here we go through the leaves

985
00:43:47,710 --> 00:43:55,829
one by one so this should go through all

986
00:43:50,349 --> 00:43:57,880
the leaves we load each one of the Leafs

987
00:43:55,829 --> 00:43:59,679
well we're loading actually the thing

988
00:43:57,880 --> 00:44:02,079
right above the leaves we go over each

989
00:43:59,679 --> 00:44:04,859
of the children and we produce the

990
00:44:02,079 --> 00:44:04,860
values for it

991
00:44:10,710 --> 00:44:24,630
to be honest I guess I'm not sure what I

992
00:44:13,420 --> 00:44:32,190
screwed up there that seem sane hmm

993
00:44:24,630 --> 00:44:34,800
so what did I mess up

994
00:44:32,190 --> 00:44:38,320
while depth greater than zero so this

995
00:44:34,800 --> 00:44:41,619
should not have changed like it's still

996
00:44:38,320 --> 00:44:49,450
accessing the box stack exactly the way

997
00:44:41,619 --> 00:44:53,590
you would expect it's weird that I wrote

998
00:44:49,449 --> 00:44:59,348
those two different ways should probably

999
00:44:53,590 --> 00:45:09,519
not do that let's try to be a little

1000
00:44:59,349 --> 00:45:11,950
more consistent so in theory this should

1001
00:45:09,519 --> 00:45:13,840
just run exactly the same way as it was

1002
00:45:11,949 --> 00:45:17,319
before I mean I don't see any reason why

1003
00:45:13,840 --> 00:45:20,449
that would be different right

1004
00:45:17,320 --> 00:45:20,449
[Music]

1005
00:45:21,119 --> 00:45:30,940
the leaf count gets incremented and we

1006
00:45:24,849 --> 00:45:35,710
pack into the leaves array as we go and

1007
00:45:30,940 --> 00:45:43,710
that seems just like what you would

1008
00:45:35,710 --> 00:45:43,710
expect right we didn't touch this branch

1009
00:45:45,659 --> 00:45:51,889
gosh

1010
00:45:48,278 --> 00:45:53,509
yeah I don't really know what we did

1011
00:45:51,889 --> 00:45:55,460
wrong there I mean it seems pretty

1012
00:45:53,509 --> 00:45:57,380
straightforward and you know I can

1013
00:45:55,460 --> 00:45:59,150
eliminate this code out of this branch

1014
00:45:57,380 --> 00:46:00,739
for now because we don't we can always

1015
00:45:59,150 --> 00:46:01,999
cut and paste it from above if we want

1016
00:46:00,739 --> 00:46:04,789
to try it so it's not like we're gonna

1017
00:46:01,998 --> 00:46:07,518
lose that right but I mean that's the

1018
00:46:04,789 --> 00:46:12,859
that's the whole routine right so

1019
00:46:07,518 --> 00:46:17,538
becoming here we yeah we we just go

1020
00:46:12,858 --> 00:46:19,420
through the box stack we push on the

1021
00:46:17,539 --> 00:46:21,440
leaves for every time we would have

1022
00:46:19,420 --> 00:46:23,630
every time we would have put one of

1023
00:46:21,440 --> 00:46:28,400
those on our own stack we don't do that

1024
00:46:23,630 --> 00:46:29,930
and then in the leaf index run case we

1025
00:46:28,400 --> 00:46:35,028
just run through all the ones that we

1026
00:46:29,929 --> 00:46:40,489
have yeah what hmm what did I mess up

1027
00:46:35,028 --> 00:46:45,728
there that's a puzzler cuz the total

1028
00:46:40,489 --> 00:46:50,150
error should be eight and it's thirteen

1029
00:46:45,728 --> 00:46:52,968
and the max Texel error got high like

1030
00:46:50,150 --> 00:46:55,190
it's just wrong so you can see that it's

1031
00:46:52,969 --> 00:47:02,659
not actually doing what it should be

1032
00:46:55,190 --> 00:47:04,630
doing but why I'm assuming nothing else

1033
00:47:02,659 --> 00:47:07,068
got touched because I'm assuming if I

1034
00:47:04,630 --> 00:47:09,579
re-enable the old case I should get

1035
00:47:07,068 --> 00:47:13,759
right back to the valid version right

1036
00:47:09,579 --> 00:47:16,818
and I do so it's only the difference

1037
00:47:13,759 --> 00:47:18,318
between these two cases if entry is

1038
00:47:16,818 --> 00:47:20,739
light leaf container and is leaf

1039
00:47:18,318 --> 00:47:20,739
container

1040
00:47:35,539 --> 00:47:48,259
oh wait wait wait wait wait wait hold on

1041
00:47:39,650 --> 00:47:51,710
a second am I doing this right

1042
00:47:48,260 --> 00:47:54,950
so I load an entry well no I I know I

1043
00:47:51,710 --> 00:47:56,720
think I am because it was going to test

1044
00:47:54,949 --> 00:47:58,429
this before to determine which one of

1045
00:47:56,719 --> 00:48:01,159
the loops to do so in theory this should

1046
00:47:58,429 --> 00:48:06,349
have worked right because as long as it

1047
00:48:01,159 --> 00:48:10,480
was a leaf container before now this

1048
00:48:06,349 --> 00:48:10,480
should properly pull out it's children

1049
00:48:11,800 --> 00:48:15,920
I'm under stuff do this yeah I don't I

1050
00:48:14,329 --> 00:48:21,559
don't there's a subtlety here I'm not

1051
00:48:15,920 --> 00:48:23,480
appreciating where I've done something

1052
00:48:21,559 --> 00:48:28,570
stupid but I'm not sure what the stupid

1053
00:48:23,480 --> 00:48:28,570
thing relates to it doesn't look

1054
00:48:33,699 --> 00:48:53,529
Oh duh to state the obvious I need to

1055
00:48:51,010 --> 00:48:56,740
actually check to see whether I need to

1056
00:48:53,530 --> 00:49:00,400
push if I don't need to push I don't do

1057
00:48:56,739 --> 00:49:03,459
these things so yeah I was only checking

1058
00:49:00,400 --> 00:49:07,920
the should push in this case so I guess

1059
00:49:03,460 --> 00:49:13,079
that's yeah that's the obvious error I

1060
00:49:07,920 --> 00:49:18,909
was pushing all of those on all the time

1061
00:49:13,079 --> 00:49:20,859
of course I guess that means technically

1062
00:49:18,909 --> 00:49:23,019
I wasn't producing an error so much as I

1063
00:49:20,858 --> 00:49:28,480
just wasn't using the early-out

1064
00:49:23,019 --> 00:49:29,650
conditions that we allow so yeah so that

1065
00:49:28,480 --> 00:49:31,568
was definitely wrong let's see if

1066
00:49:29,650 --> 00:49:33,970
anything else is wrong here so that's

1067
00:49:31,568 --> 00:49:36,338
still not right which doesn't look like

1068
00:49:33,969 --> 00:49:44,230
it right because that compiled correctly

1069
00:49:36,338 --> 00:49:49,650
and we still have the air oh no no

1070
00:49:44,230 --> 00:49:49,650
that's right is it

1071
00:49:54,219 --> 00:49:58,449
no no so that's that's still wrong

1072
00:49:56,320 --> 00:50:02,019
because that's our max error protects

1073
00:49:58,449 --> 00:50:08,409
all right normally and we're getting a

1074
00:50:02,019 --> 00:50:09,789
different max error protects 'l now so

1075
00:50:08,409 --> 00:50:12,219
we still have something wrong so we do

1076
00:50:09,789 --> 00:50:17,320
should push we look to see whether we

1077
00:50:12,219 --> 00:50:19,089
need to push if we do need to push we

1078
00:50:17,320 --> 00:50:20,920
check to see whether it's a leaf or not

1079
00:50:19,090 --> 00:50:25,960
and we push it on to the correct stack

1080
00:50:20,920 --> 00:50:28,780
right leaf containers go here non leaf

1081
00:50:25,960 --> 00:50:30,369
containers go on to our box stack and in

1082
00:50:28,780 --> 00:50:43,150
either case we're just pushing on the

1083
00:50:30,369 --> 00:50:44,949
information that we need hmm again

1084
00:50:43,150 --> 00:50:48,039
totally puzzled though I have no idea

1085
00:50:44,949 --> 00:50:51,419
even I don't really even understand of

1086
00:50:48,039 --> 00:50:51,420
why that can possibly be wrong

1087
00:50:59,329 --> 00:51:08,029
I guess I would like to assert this

1088
00:51:03,380 --> 00:51:10,579
potentially like every time we pull one

1089
00:51:08,030 --> 00:51:16,190
of these off let me just go ahead and do

1090
00:51:10,579 --> 00:51:18,139
an assert here because that obviously

1091
00:51:16,190 --> 00:51:29,659
should be true but I just I mean let's

1092
00:51:18,139 --> 00:51:33,259
make sure it is yep so we're only

1093
00:51:29,659 --> 00:51:36,699
getting leaves in our leaf loop and so

1094
00:51:33,260 --> 00:51:42,280
the only thing that I guess could be

1095
00:51:36,699 --> 00:51:45,619
wrong there is where we're not

1096
00:51:42,280 --> 00:51:47,630
descending down some boxes we should or

1097
00:51:45,619 --> 00:51:57,259
we are descending down some boxes we

1098
00:51:47,630 --> 00:51:59,930
shouldn't I guess so in the original

1099
00:51:57,260 --> 00:52:01,250
routine when we pulled one off right we

1100
00:51:59,929 --> 00:52:05,210
just needed to know which of these two

1101
00:52:01,250 --> 00:52:07,880
we were doing seems straightforward

1102
00:52:05,210 --> 00:52:12,340
enough we then are doing the exact same

1103
00:52:07,880 --> 00:52:16,720
loop like this is identical right oh

1104
00:52:12,340 --> 00:52:16,720
sorry this is identical

1105
00:52:20,989 --> 00:52:26,868
yeah I mean that all just seems fine

1106
00:52:23,989 --> 00:52:29,629
right we do it should push and if we

1107
00:52:26,869 --> 00:52:38,869
should push we push on to one of the two

1108
00:52:29,630 --> 00:52:42,019
stacks otherwise we don't right and then

1109
00:52:38,869 --> 00:52:44,750
we didn't even touch this routine this

1110
00:52:42,019 --> 00:52:46,730
version up here right that's just

1111
00:52:44,750 --> 00:52:56,630
exactly the same we didn't even modify

1112
00:52:46,730 --> 00:53:05,900
it at all its operating 100% the same so

1113
00:52:56,630 --> 00:53:08,539
how did that change and like I don't

1114
00:53:05,900 --> 00:53:11,900
feel like photos like floating point

1115
00:53:08,539 --> 00:53:14,358
error is implicated here because you can

1116
00:53:11,900 --> 00:53:18,200
see that the maximum error protects all

1117
00:53:14,358 --> 00:53:23,239
is like very different it's ten times

1118
00:53:18,199 --> 00:53:29,269
higher and while you know it's it's

1119
00:53:23,239 --> 00:53:31,098
never obviously true that you I mean

1120
00:53:29,269 --> 00:53:34,159
could it be possible sure but is it

1121
00:53:31,099 --> 00:53:38,599
likely no right it's much more likely

1122
00:53:34,159 --> 00:53:40,789
that there's a bug in these two so let

1123
00:53:38,599 --> 00:53:44,088
me go ahead and see what happens I guess

1124
00:53:40,789 --> 00:53:45,679
when we look at the decision list

1125
00:53:44,088 --> 00:53:48,349
between these two like I mean let's I

1126
00:53:45,679 --> 00:53:49,969
guess try to look to see what is

1127
00:53:48,349 --> 00:53:53,390
actually happening in terms of the

1128
00:53:49,969 --> 00:53:56,838
leaves that are tested and why we're

1129
00:53:53,389 --> 00:53:59,329
getting certain sets of these tested in

1130
00:53:56,838 --> 00:54:01,519
one and not the other right I mean I

1131
00:53:59,329 --> 00:54:04,329
don't know what else to do unless chat

1132
00:54:01,519 --> 00:54:04,329
already found it

1133
00:54:12,130 --> 00:54:22,910
did Chad already see it no doesn't look

1134
00:54:17,298 --> 00:54:24,980
like anyone did it's a bummer you're

1135
00:54:22,909 --> 00:54:26,659
supposed to find these typos for me the

1136
00:54:24,980 --> 00:54:29,510
wild depth loop doesn't wrap the second

1137
00:54:26,659 --> 00:54:33,649
loop yeah but it's not supposed to write

1138
00:54:29,510 --> 00:54:36,380
this this the point of this is that this

1139
00:54:33,650 --> 00:54:39,740
wild depth loop produces a second count

1140
00:54:36,380 --> 00:54:42,380
which is leaf count and then this runs

1141
00:54:39,739 --> 00:54:45,199
through it in one pass so it's not

1142
00:54:42,380 --> 00:54:48,740
supposed to be wrapped this is supposed

1143
00:54:45,199 --> 00:54:55,699
to generate all of the leaves you know

1144
00:54:48,739 --> 00:55:08,229
I'm saying but but it doesn't and so I

1145
00:54:55,699 --> 00:55:08,230
don't know how is that able to produce a

1146
00:55:09,010 --> 00:55:16,280
totally different thing let's take a

1147
00:55:11,750 --> 00:55:22,190
look at let's just stream out I mean

1148
00:55:16,280 --> 00:55:25,390
right so let's just stream out what

1149
00:55:22,190 --> 00:55:25,389
boxes were testing

1150
00:55:31,130 --> 00:55:40,190
I can't quite do that in here can I so

1151
00:55:37,940 --> 00:55:42,740
here's what I'm gonna do I'm gonna add

1152
00:55:40,190 --> 00:55:46,340
some macros because everyone loves

1153
00:55:42,739 --> 00:55:47,929
macros and what I'm gonna do is I'm just

1154
00:55:46,340 --> 00:55:50,900
gonna stream out which boxes we were

1155
00:55:47,929 --> 00:55:55,039
testing in each case so I'm just gonna

1156
00:55:50,900 --> 00:56:00,440
have a thing called like record leaf box

1157
00:55:55,039 --> 00:56:10,639
and I'm gonna pass the box and then I'm

1158
00:56:00,440 --> 00:56:14,210
gonna have a record partition box and

1159
00:56:10,639 --> 00:56:16,159
pass it there so in both cases I'm gonna

1160
00:56:14,210 --> 00:56:18,650
just record and I'm gonna do this in the

1161
00:56:16,159 --> 00:56:27,319
secondary side as well so same thing

1162
00:56:18,650 --> 00:56:28,610
here and I'm gonna record the leaves and

1163
00:56:27,320 --> 00:56:32,539
I'm going to Accord the partitions in

1164
00:56:28,610 --> 00:56:36,349
both cases now what I do at the top is

1165
00:56:32,539 --> 00:56:47,239
I'm just going to say look if nobody has

1166
00:56:36,349 --> 00:56:54,259
defined these things then we just don't

1167
00:56:47,239 --> 00:56:55,879
do them right so basically like normally

1168
00:56:54,260 --> 00:56:58,600
you can pile it those things just

1169
00:56:55,880 --> 00:57:03,170
disappear because they don't do nothing

1170
00:56:58,599 --> 00:57:04,969
however instead in the HH Lite prof what

1171
00:57:03,170 --> 00:57:07,849
we can do is before we do anything else

1172
00:57:04,969 --> 00:57:12,709
we can go up here and say look let's

1173
00:57:07,849 --> 00:57:16,909
define the macros in this case to be

1174
00:57:12,710 --> 00:57:22,809
like an F printf or something yeah i'm

1175
00:57:16,909 --> 00:57:22,809
santi to like leaf box out

1176
00:57:25,219 --> 00:57:33,618
and petition box out see I'm doing here

1177
00:57:30,920 --> 00:57:39,409
and so I'm just gonna stream out those

1178
00:57:33,619 --> 00:57:42,170
box indices so this way we'll just print

1179
00:57:39,409 --> 00:57:44,299
out all of the box indices into files

1180
00:57:42,170 --> 00:57:47,119
that we can then diff and see what the

1181
00:57:44,300 --> 00:57:51,680
heck is going on here so all we need to

1182
00:57:47,119 --> 00:58:01,070
do is create actual file handles for

1183
00:57:51,679 --> 00:58:17,739
those so like you know no this is gonna

1184
00:58:01,070 --> 00:58:17,740
work I think it will so like right here

1185
00:58:22,389 --> 00:58:36,799
and I guess I can actually do this so

1186
00:58:33,050 --> 00:58:39,440
now we will actually compile in sort of

1187
00:58:36,800 --> 00:58:41,750
a debug sync that can just send all this

1188
00:58:39,440 --> 00:58:44,630
crap out and what I'll do is at the

1189
00:58:41,750 --> 00:58:51,889
outset like when we actually start I'll

1190
00:58:44,630 --> 00:58:55,760
just open up like you know some of these

1191
00:58:51,889 --> 00:58:59,750
where we're just like yeah leaf box out

1192
00:58:55,760 --> 00:59:05,869
equals F open actually guess these are

1193
00:58:59,750 --> 00:59:14,119
not binary some files so this is going

1194
00:59:05,869 --> 00:59:20,680
to be like a leaf box traversal dot text

1195
00:59:14,119 --> 00:59:20,680
and partition box traversal dot text

1196
00:59:25,730 --> 00:59:32,000
and then we just have a nice quick and

1197
00:59:27,860 --> 00:59:33,980
dirty way to make those work and I can

1198
00:59:32,000 --> 00:59:45,280
even predicate these I can just say look

1199
00:59:33,980 --> 00:59:48,280
if like this thing is defined go nuts

1200
00:59:45,280 --> 00:59:48,280
right

1201
00:59:48,400 --> 01:00:00,460
oops there so now when we run this thing

1202
00:59:54,949 --> 01:00:03,439
we should get a dump file like of those

1203
01:00:00,460 --> 01:00:08,480
outputs so they've been streamed out and

1204
01:00:03,440 --> 01:00:11,720
there's just gigantic huge files like

1205
01:00:08,480 --> 01:00:13,130
they're gonna be massive right of just

1206
01:00:11,719 --> 01:00:20,689
like thousands and thousands of

1207
01:00:13,130 --> 01:00:26,869
traversal integers and I guess the leaf

1208
01:00:20,690 --> 01:00:28,250
box ones well in theory this actually in

1209
01:00:26,869 --> 01:00:33,079
theory this should actually produce the

1210
01:00:28,250 --> 01:00:35,960
exact same results I think in both cases

1211
01:00:33,079 --> 01:00:38,329
I also now that I think about it

1212
01:00:35,960 --> 01:00:47,900
we only want them from one run so I

1213
01:00:38,329 --> 01:00:52,150
probably also want to do this I only

1214
01:00:47,900 --> 01:00:52,150
want that first one

1215
01:00:58,260 --> 01:01:05,320
all right so there's our two text files

1216
01:01:01,800 --> 01:01:07,330
like I said they're just giant lists of

1217
01:01:05,320 --> 01:01:10,600
integers that's the order of the boxes

1218
01:01:07,329 --> 01:01:12,849
that were tested and now we can see like

1219
01:01:10,599 --> 01:01:14,230
is it just totally weird or is it

1220
01:01:12,849 --> 01:01:16,809
roughly the same and there's just a few

1221
01:01:14,230 --> 01:01:19,000
differences so what I'm going to do is

1222
01:01:16,809 --> 01:01:22,509
that one if you remember so if we go to

1223
01:01:19,000 --> 01:01:25,059
the Ray caster it's in here

1224
01:01:22,510 --> 01:01:28,030
you can see that that was the new way so

1225
01:01:25,059 --> 01:01:33,610
like if we rename those files like these

1226
01:01:28,030 --> 01:01:46,240
two here this is like new and if I do it

1227
01:01:33,610 --> 01:01:55,450
again with this IFFT in now I've got the

1228
01:01:46,239 --> 01:01:58,179
old ones so oops and in theory we could

1229
01:01:55,449 --> 01:02:00,069
use I think we use meld for this

1230
01:01:58,179 --> 01:02:03,009
normally I think that's the difficulty

1231
01:02:00,070 --> 01:02:05,080
we decided to use on stream um so in

1232
01:02:03,010 --> 01:02:08,440
theory like I should be able to compare

1233
01:02:05,079 --> 01:02:11,319
those files and see like how similar

1234
01:02:08,440 --> 01:02:12,550
they are right like this is just to give

1235
01:02:11,320 --> 01:02:14,430
me some idea of what the heck is

1236
01:02:12,550 --> 01:02:17,920
happening in there cuz I have no idea

1237
01:02:14,429 --> 01:02:22,329
oops that was not in the file I wanted

1238
01:02:17,920 --> 01:02:24,220
it all so let's start with the league

1239
01:02:22,329 --> 01:02:26,769
with the partitions because that's

1240
01:02:24,219 --> 01:02:30,489
actually the part that I'm most

1241
01:02:26,769 --> 01:02:33,960
interested to see so old partition box

1242
01:02:30,489 --> 01:02:41,709
traversal and then new partition box

1243
01:02:33,960 --> 01:02:45,400
traversal compare so here's a comparison

1244
01:02:41,710 --> 01:02:51,000
right I don't actually know how to use

1245
01:02:45,400 --> 01:02:51,000
meld I use beyond compare normally so I

1246
01:02:52,380 --> 01:02:58,869
mean that seems to be suggesting they're

1247
01:02:54,969 --> 01:03:01,259
exactly the same is that with that

1248
01:02:58,869 --> 01:03:01,259
saying

1249
01:03:04,599 --> 01:03:07,929
but they're not

1250
01:03:08,829 --> 01:03:10,890
you

1251
01:03:13,429 --> 01:03:21,919
what's what's going on here so does this

1252
01:03:18,289 --> 01:03:25,340
utility work like what I've wanted if

1253
01:03:21,920 --> 01:03:33,409
these do can you tell me the difference

1254
01:03:25,340 --> 01:03:37,670
between them actually it looks like it

1255
01:03:33,409 --> 01:03:40,099
just Scrolls them wrong man all right I

1256
01:03:37,670 --> 01:03:42,019
should probably just install beyond

1257
01:03:40,099 --> 01:03:44,469
compare here because this is pretty

1258
01:03:42,019 --> 01:03:44,469
crappy

1259
01:03:51,989 --> 01:04:00,000
and it's hung all right so yeah I guess

1260
01:03:56,190 --> 01:04:04,039
this is what we're gonna do I use beyond

1261
01:04:00,000 --> 01:04:06,750
compare at work it's inexpensive and

1262
01:04:04,039 --> 01:04:10,639
since this doesn't work let's just go

1263
01:04:06,750 --> 01:04:16,289
ahead and and say look you can afford it

1264
01:04:10,639 --> 01:04:24,618
get a real comparison utility I guess so

1265
01:04:16,289 --> 01:04:24,619
here's the download let's see on Windows

1266
01:04:29,179 --> 01:04:34,469
so let me well I guess I don't care if

1267
01:04:32,969 --> 01:04:36,809
it gets installed on this machine

1268
01:04:34,469 --> 01:04:38,039
normally at work I just use zip files

1269
01:04:36,809 --> 01:04:41,929
because I like to put them into source

1270
01:04:38,039 --> 01:04:41,929
code control but this should be fine

1271
01:04:56,780 --> 01:05:01,710
all right so let's try this in beyond

1272
01:05:00,239 --> 01:05:05,869
compare and see if they fare any better

1273
01:05:01,710 --> 01:05:10,349
so in beyond compare I'm gonna say look

1274
01:05:05,869 --> 01:05:11,750
this is the left side this is the right

1275
01:05:10,349 --> 01:05:17,460
side

1276
01:05:11,750 --> 01:05:20,610
give me a comparison and here we go so

1277
01:05:17,460 --> 01:05:24,769
you can see that these are actually

1278
01:05:20,610 --> 01:05:26,910
different in terms of the order anyway

1279
01:05:24,769 --> 01:05:29,059
and it does look like they're actually

1280
01:05:26,909 --> 01:05:31,469
legitimately different like that

1281
01:05:29,059 --> 01:05:35,909
wouldn't matter cuz that's just an order

1282
01:05:31,469 --> 01:05:39,209
difference there but it's then it starts

1283
01:05:35,909 --> 01:05:42,029
to get to the to the point where I don't

1284
01:05:39,210 --> 01:05:43,920
know about that part right but more

1285
01:05:42,030 --> 01:05:45,800
importantly I'm not sure I know why

1286
01:05:43,920 --> 01:05:49,260
there would be that order difference

1287
01:05:45,800 --> 01:05:58,680
right so the fact that those are there I

1288
01:05:49,260 --> 01:06:01,140
don't actually know I don't actually

1289
01:05:58,679 --> 01:06:04,549
know why that would be so I think we

1290
01:06:01,139 --> 01:06:04,549
definitely have an issue here

1291
01:06:05,989 --> 01:06:19,199
furthermore well you know what let me go

1292
01:06:14,639 --> 01:06:21,150
let me check the partitions first that's

1293
01:06:19,199 --> 01:06:22,859
that's actually I guess what I wanted to

1294
01:06:21,150 --> 01:06:25,380
do so let's check the partitions first

1295
01:06:22,860 --> 01:06:26,820
and I'll refrain from comment until we

1296
01:06:25,380 --> 01:06:35,670
actually do that but yeah

1297
01:06:26,820 --> 01:06:44,490
point being looks bad all right so

1298
01:06:35,670 --> 01:06:46,019
here's just a big old chunk and it

1299
01:06:44,489 --> 01:06:48,629
really does look like we're traversing a

1300
01:06:46,019 --> 01:06:54,900
bunch of extra boxes so like I see a

1301
01:06:48,630 --> 01:06:56,910
bunch of differences on this side and I

1302
01:06:54,900 --> 01:06:59,280
don't see it on this other side so it's

1303
01:06:56,909 --> 01:07:03,379
like we're pushing boxes on that we

1304
01:06:59,280 --> 01:07:03,380
shouldn't be in the partition traversal

1305
01:07:09,559 --> 01:07:15,179
so why is that so what we're basically

1306
01:07:13,320 --> 01:07:21,859
saying is that when we switch this to

1307
01:07:15,179 --> 01:07:25,559
zero and we come through cure this this

1308
01:07:21,858 --> 01:07:30,719
we're pushing things on that we

1309
01:07:25,559 --> 01:07:34,289
previously weren't now what's weird

1310
01:07:30,719 --> 01:07:35,519
about that right I mean you're less I'm

1311
01:07:34,289 --> 01:07:37,019
missing something what's weird about

1312
01:07:35,519 --> 01:07:40,380
that is if anything this thing should

1313
01:07:37,019 --> 01:07:44,269
push less I mean if there was a bug in

1314
01:07:40,380 --> 01:07:46,829
this it would push less things on right

1315
01:07:44,269 --> 01:07:48,420
so it's weird that like what we're

1316
01:07:46,829 --> 01:07:58,429
actually doing is we're pushing more

1317
01:07:48,420 --> 01:07:58,430
things on how are we doing that

1318
01:08:16,640 --> 01:08:24,109
like somehow sort of fairly soon to

1319
01:08:28,550 --> 01:08:48,960
write on box so we we push on 2:29 is

1320
01:08:36,210 --> 01:09:02,899
that in here anywhere so we visit to

1321
01:08:48,960 --> 01:09:02,899
wavelet so this thing visits to 29 twice

1322
01:09:04,640 --> 01:09:13,160
right did you see that there's one

1323
01:09:10,039 --> 01:09:13,159
there's two

1324
01:09:20,329 --> 01:09:33,689
what the heck oh well okay but it's per

1325
01:09:29,970 --> 01:09:36,210
ray so that's yeah sorry I was freaking

1326
01:09:33,689 --> 01:09:39,000
out there since it's per ray that's fine

1327
01:09:36,210 --> 01:09:44,880
I should probably put in like a marker

1328
01:09:39,000 --> 01:09:48,479
for each time so that we can look at

1329
01:09:44,880 --> 01:09:51,060
that more carefully because like yeah we

1330
01:09:48,479 --> 01:09:53,579
if we only look at one ray then we would

1331
01:09:51,060 --> 01:09:55,680
expect to see a partition only visited

1332
01:09:53,579 --> 01:09:59,309
one time but since we're looking at many

1333
01:09:55,680 --> 01:10:04,140
rays that's you're going to traverse

1334
01:09:59,310 --> 01:10:07,220
those route boxes a lot of times all

1335
01:10:04,140 --> 01:10:07,220
right so

1336
01:10:15,819 --> 01:10:20,828
so how did we mess that up

1337
01:10:35,899 --> 01:10:41,819
so let's put one more assertion in here

1338
01:10:39,060 --> 01:10:44,130
let's assert that we never accidentally

1339
01:10:41,819 --> 01:10:48,949
process a non-leaf in the partition

1340
01:10:44,130 --> 01:10:51,750
container right in the partition loop

1341
01:10:48,949 --> 01:10:55,619
I'm assuming the answer is that won't

1342
01:10:51,750 --> 01:10:58,550
happen but I just want to see and we can

1343
01:10:55,619 --> 01:11:00,689
also actually turn this off for now

1344
01:10:58,550 --> 01:11:15,090
because we don't need to record it at

1345
01:11:00,689 --> 01:11:27,659
the moment so I guess I need a separate

1346
01:11:15,090 --> 01:11:30,420
switch for these as well so I'll make it

1347
01:11:27,659 --> 01:11:37,199
a thing called record break a stack put

1348
01:11:30,420 --> 01:11:41,399
that in here and now I think we're good

1349
01:11:37,199 --> 01:11:48,659
alright so if we're gonna record the

1350
01:11:41,399 --> 01:11:58,519
raycast stack then we do if we're not

1351
01:11:48,659 --> 01:12:01,470
then we don't and again no assertions so

1352
01:11:58,520 --> 01:12:05,940
really strange this is like curiouser

1353
01:12:01,470 --> 01:12:12,350
and curiouser I feel like I feel like

1354
01:12:05,939 --> 01:12:15,750
we've hit a stumper here so um somehow

1355
01:12:12,350 --> 01:12:20,600
we are pushing too many things on the

1356
01:12:15,750 --> 01:12:22,590
box stack even though we never

1357
01:12:20,600 --> 01:12:29,640
accidentally process something that's

1358
01:12:22,590 --> 01:12:32,010
not a leaf nor do we accidentally leaf

1359
01:12:29,640 --> 01:12:34,020
process something that we never process

1360
01:12:32,010 --> 01:12:35,760
um that is a leaf in the wrong time or

1361
01:12:34,020 --> 01:12:39,440
is not a leaf at the wrong time

1362
01:12:35,760 --> 01:12:39,440
far as I can tell anyway

1363
01:13:00,368 --> 01:13:06,880
how many boxes are there let's start

1364
01:13:04,578 --> 01:13:06,880
with that

1365
01:13:10,149 --> 01:13:19,939
so in here mm-hmm Jimmy

1366
01:13:14,618 --> 01:13:27,429
when we load and we print out like when

1367
01:13:19,939 --> 01:13:27,428
we print out that summary so like here

1368
01:13:41,649 --> 01:13:49,158
could we just say how many boxes do we

1369
01:13:43,908 --> 01:13:51,979
take in and how many boxes do we put

1370
01:13:49,158 --> 01:13:56,948
forth so basically before we build this

1371
01:13:51,979 --> 01:13:56,948
base partition we would print this

1372
01:14:07,948 --> 01:14:15,569
so we're inputting 1488 and are

1373
01:14:11,649 --> 01:14:15,569
outputting 2550

1374
01:14:22,890 --> 01:14:29,289
so I guess what I would say is I am now

1375
01:14:26,010 --> 01:14:32,050
thoroughly confused I have absolutely no

1376
01:14:29,289 --> 01:14:35,979
idea what's going on so what that would

1377
01:14:32,050 --> 01:14:47,230
imply to me right so like if we look at

1378
01:14:35,979 --> 01:14:48,879
this how the heck are we getting the

1379
01:14:47,229 --> 01:14:55,839
numbers that we're getting like okay so

1380
01:14:48,880 --> 01:14:58,529
let's just go up to the top how do I go

1381
01:14:55,840 --> 01:14:58,529
to the beginning this file

1382
01:15:06,569 --> 01:15:15,149
all right so here's line zero of the

1383
01:15:11,100 --> 01:15:17,370
photo or not but these files are just

1384
01:15:15,149 --> 01:15:19,019
too big like no I guess diff utility is

1385
01:15:17,369 --> 01:15:22,199
just can't handle large files or

1386
01:15:19,020 --> 01:15:27,740
something like I'm having a hard time

1387
01:15:22,199 --> 01:15:31,079
viewing this file at all tell you what

1388
01:15:27,739 --> 01:15:33,689
maybe what we should do is make it so

1389
01:15:31,079 --> 01:15:36,180
that if we're actually doing a profile

1390
01:15:33,689 --> 01:15:39,000
run where we're doing the dumps

1391
01:15:36,180 --> 01:15:42,630
maybe we just only do like one of these

1392
01:15:39,000 --> 01:15:44,550
so that we can make these smaller so we

1393
01:15:42,630 --> 01:15:46,500
can see them better I mean I don't know

1394
01:15:44,550 --> 01:15:48,480
what else to say so like maybe what we

1395
01:15:46,500 --> 01:15:49,949
do just to make this tractable because

1396
01:15:48,479 --> 01:15:52,619
even beyond compare so having trouble

1397
01:15:49,949 --> 01:15:57,050
with it so maybe what we do is in the

1398
01:15:52,619 --> 01:15:57,050
raycast er we basically say like look

1399
01:15:59,119 --> 01:16:04,920
previously we were doing like tons of

1400
01:16:01,350 --> 01:16:06,270
ray casting right we go through all

1401
01:16:04,920 --> 01:16:08,880
these work orders and all this stuff

1402
01:16:06,270 --> 01:16:10,740
maybe in the Ray caster now we just say

1403
01:16:08,880 --> 01:16:23,010
look stop dumping after the first time

1404
01:16:10,739 --> 01:16:25,559
or something right so something like

1405
01:16:23,010 --> 01:16:26,760
that where we say look this is the end

1406
01:16:25,560 --> 01:16:36,480
or it's like oh okay

1407
01:16:26,760 --> 01:16:39,650
like if it's the end then we stop so we

1408
01:16:36,479 --> 01:16:39,649
just say look there's a switch

1409
01:16:50,469 --> 01:17:04,849
so there's a stack time switch these are

1410
01:16:53,719 --> 01:17:09,139
actually enclosed in if-statements right

1411
01:17:04,849 --> 01:17:14,029
and so when the raycast ends we just say

1412
01:17:09,139 --> 01:17:16,550
like stop that stop dumping and then the

1413
01:17:14,029 --> 01:17:18,738
raycast end in the lighting code we can

1414
01:17:16,550 --> 01:17:20,270
just be so we just we record a single

1415
01:17:18,738 --> 01:17:23,149
ray cast and that way the file isn't

1416
01:17:20,270 --> 01:17:25,460
huge right because we only really care

1417
01:17:23,149 --> 01:17:27,439
about one probably as long as it's

1418
01:17:25,460 --> 01:17:30,770
different as long as it has a difference

1419
01:17:27,439 --> 01:17:33,109
in it then we're fine so we can probably

1420
01:17:30,770 --> 01:17:36,409
just do it that way and that way we can

1421
01:17:33,109 --> 01:17:41,269
not have this utility failure problem

1422
01:17:36,408 --> 01:17:45,789
right alright so we'll just say look at

1423
01:17:41,270 --> 01:17:50,349
that point we've cast array so it's over

1424
01:17:45,789 --> 01:17:50,349
so like don't worry about it

1425
01:17:50,469 --> 01:17:58,189
and then up here we can just say you

1426
01:17:54,710 --> 01:18:02,868
know it's defined nothing all right one

1427
01:17:58,189 --> 01:18:05,839
more time so now if I rerun this I

1428
01:18:02,868 --> 01:18:07,429
should be able to go like okay first

1429
01:18:05,840 --> 01:18:10,369
let's actually let's see which one we're

1430
01:18:07,429 --> 01:18:13,130
on I don't remember all right so this is

1431
01:18:10,368 --> 01:18:15,799
the new way right that'll dump the new

1432
01:18:13,130 --> 01:18:20,679
way oops

1433
01:18:15,800 --> 01:18:20,679
no one well

1434
01:18:23,408 --> 01:18:29,328
all right so that'll dump the new way

1435
01:18:27,050 --> 01:18:40,119
hopefully so now we should have like

1436
01:18:29,328 --> 01:18:40,118
smaller files so we didn't get any

1437
01:18:41,139 --> 01:18:46,309
so that ray didn't hit anything is the

1438
01:18:45,769 --> 01:18:48,889
answer

1439
01:18:46,309 --> 01:18:54,760
apparently all right well let me just

1440
01:18:48,889 --> 01:18:54,760
let's take this case just to see right

1441
01:19:04,238 --> 01:19:11,138
so there's the new one and let me now

1442
01:19:07,389 --> 01:19:11,139
make it do the old one

1443
01:19:22,279 --> 01:19:30,469
so those operated exactly the same so

1444
01:19:26,460 --> 01:19:35,250
the answer is we do have to get to Jimmy

1445
01:19:30,469 --> 01:19:38,000
we do have to get to something so maybe

1446
01:19:35,250 --> 01:19:38,000
I'll do it this way

1447
01:19:43,849 --> 01:19:49,949
right will basically say like look if

1448
01:19:47,279 --> 01:19:52,979
the stack dumps which is at a certain

1449
01:19:49,948 --> 01:19:57,210
level like hey we'll do

1450
01:19:52,979 --> 01:20:00,000
16 Ray casts and then we'll stop no I'm

1451
01:19:57,210 --> 01:20:08,880
saying to you so let's try this one more

1452
01:20:00,000 --> 01:20:10,019
time and again this is just to try to

1453
01:20:08,880 --> 01:20:11,849
get the data down so we can actually

1454
01:20:10,019 --> 01:20:15,389
look at it in utilities without them

1455
01:20:11,849 --> 01:20:18,860
freaking out alright so there we run we

1456
01:20:15,389 --> 01:20:22,460
did we compile so this is the old way

1457
01:20:18,859 --> 01:20:26,069
here's the leaf boxes here's the

1458
01:20:22,460 --> 01:20:28,170
partition boxes right which again I

1459
01:20:26,069 --> 01:20:30,389
don't understand what's going on because

1460
01:20:28,170 --> 01:20:33,480
we shouldn't I didn't think partition

1461
01:20:30,389 --> 01:20:36,029
boxes could ever actually be below the

1462
01:20:33,479 --> 01:20:40,018
box count so something's weird already

1463
01:20:36,029 --> 01:20:41,488
like I need to go look at how this stuff

1464
01:20:40,019 --> 01:20:52,500
works because I obviously don't

1465
01:20:41,488 --> 01:20:55,158
understand right I mean 25:48 is the

1466
01:20:52,500 --> 01:20:58,849
root box right which makes perfect sense

1467
01:20:55,158 --> 01:21:06,058
but these are the input boxes so 1488

1468
01:20:58,849 --> 01:21:09,000
anything anything above 1488 is a

1469
01:21:06,059 --> 01:21:09,809
partition box anything below 1488 is a

1470
01:21:09,000 --> 01:21:12,658
leaf box

1471
01:21:09,809 --> 01:21:15,559
these are partition boxes coming from

1472
01:21:12,658 --> 01:21:20,879
the old way of doing things

1473
01:21:15,559 --> 01:21:25,260
what are those obviously the wrong kind

1474
01:21:20,880 --> 01:21:28,940
of box right doing on there again 1488

1475
01:21:25,260 --> 01:21:28,940
is the minimum that

1476
01:21:30,109 --> 01:21:45,920
that's a that's actually a leaf like

1477
01:21:32,868 --> 01:21:52,069
what is the leaf doing on on there so

1478
01:21:45,920 --> 01:21:57,578
like that's just wrong it's yes it's not

1479
01:21:52,069 --> 01:22:01,698
a leaf container but it's an actual leaf

1480
01:21:57,578 --> 01:22:08,590
so how was it not processed as just a

1481
01:22:01,698 --> 01:22:13,009
one of the iterator things we got issues

1482
01:22:08,590 --> 01:22:16,699
and by the way assuming that this is

1483
01:22:13,010 --> 01:22:18,800
correct it's actually good these are

1484
01:22:16,698 --> 01:22:20,689
good issues because if there were bugs

1485
01:22:18,800 --> 01:22:22,849
in the original routine of the traversal

1486
01:22:20,689 --> 01:22:24,859
that we didn't know about they could be

1487
01:22:22,849 --> 01:22:26,809
causing artificial slowness that we can

1488
01:22:24,859 --> 01:22:28,609
get rid of right this could mean that we

1489
01:22:26,809 --> 01:22:29,779
have optimization fat in there that's

1490
01:22:28,609 --> 01:22:33,558
just due to bugs which would be

1491
01:22:29,779 --> 01:22:36,439
fantastic so let's hope that's actually

1492
01:22:33,559 --> 01:22:41,110
the case it might not be but let's hope

1493
01:22:36,439 --> 01:22:41,109
all right

1494
01:22:45,060 --> 01:22:55,410
so I make sure I'm dumping these right

1495
01:22:48,020 --> 01:22:56,760
it looks like I am um so let's uh you

1496
01:22:55,409 --> 01:22:59,460
know what I don't even want to do a

1497
01:22:56,760 --> 01:23:02,610
comparison yet I want to know what the

1498
01:22:59,460 --> 01:23:07,829
heck is going on here with this so let's

1499
01:23:02,609 --> 01:23:10,739
find out in split box is something how

1500
01:23:07,829 --> 01:23:14,340
is this working so when we call split

1501
01:23:10,739 --> 01:23:17,159
box right we go through and we say if

1502
01:23:14,340 --> 01:23:26,550
the number of things that are if the

1503
01:23:17,159 --> 01:23:28,319
source count right is more than four

1504
01:23:26,550 --> 01:23:31,110
boxes then we're gonna split the thing

1505
01:23:28,319 --> 01:23:35,159
we look to see if we can split the thing

1506
01:23:31,109 --> 01:23:37,139
and assuming that we could right so

1507
01:23:35,159 --> 01:23:40,319
assuming that like we actually found a

1508
01:23:37,140 --> 01:23:44,280
plane that splits them then we split

1509
01:23:40,319 --> 01:23:52,710
them right and if we split them into two

1510
01:23:44,279 --> 01:23:57,569
then we yeah we record whether or not we

1511
01:23:52,710 --> 01:23:59,850
split them or not so if we split meaning

1512
01:23:57,569 --> 01:24:02,519
the things that we got input in we split

1513
01:23:59,850 --> 01:24:05,760
we say alright whatever the box is that

1514
01:24:02,520 --> 01:24:07,550
we came in with it's gonna become a leaf

1515
01:24:05,760 --> 01:24:11,909
container or not

1516
01:24:07,550 --> 01:24:15,329
based on that so either it becomes a

1517
01:24:11,909 --> 01:24:18,930
leaf container because it didn't split

1518
01:24:15,329 --> 01:24:25,019
so it's you know its contents are are

1519
01:24:18,930 --> 01:24:27,780
things you test against or it clears the

1520
01:24:25,020 --> 01:24:30,420
leaf container flag if the things in it

1521
01:24:27,779 --> 01:24:33,929
are therefore if it therefore is

1522
01:24:30,420 --> 01:24:40,819
containing actual splits right actual

1523
01:24:33,930 --> 01:24:40,820
split partitions right

1524
01:24:48,649 --> 01:24:54,529
and I guess the thing here is I guess

1525
01:24:52,460 --> 01:24:59,510
maybe it's the indirection table that's

1526
01:24:54,529 --> 01:25:03,429
confusing me and I wonder if this

1527
01:24:59,510 --> 01:25:03,430
indirection table should even be here

1528
01:25:14,090 --> 01:25:18,539
so I kind of want to say that this

1529
01:25:16,710 --> 01:25:22,260
indirection table just shouldn't even be

1530
01:25:18,539 --> 01:25:24,269
here so let's get because that's

1531
01:25:22,260 --> 01:25:25,409
probably what I'm seeing so the reason

1532
01:25:24,270 --> 01:25:27,060
that we're seeing these are is probably

1533
01:25:25,409 --> 01:25:32,220
cuz these are not the actual boxes

1534
01:25:27,060 --> 01:25:33,750
they're box indices and you know since

1535
01:25:32,220 --> 01:25:35,789
we're doing such heavy ray casting on

1536
01:25:33,750 --> 01:25:38,010
these things having that indirection is

1537
01:25:35,789 --> 01:25:40,560
just stupid it's just an extra read into

1538
01:25:38,010 --> 01:25:45,329
a table for no reason I feel like we

1539
01:25:40,560 --> 01:25:47,490
should just get rid of that so let's

1540
01:25:45,329 --> 01:25:49,949
pause for one second before we try to

1541
01:25:47,489 --> 01:25:52,889
debug this any further and say all right

1542
01:25:49,949 --> 01:26:01,139
stop the recording that's not gonna

1543
01:25:52,890 --> 01:26:02,910
happen run the old routine right make

1544
01:26:01,140 --> 01:26:06,750
sure it's working right there's our old

1545
01:26:02,909 --> 01:26:10,199
Texel error we expected right six point

1546
01:26:06,750 --> 01:26:13,770
six seconds let's just pull out that

1547
01:26:10,199 --> 01:26:17,189
entire thing so let's say that in the

1548
01:26:13,770 --> 01:26:19,950
lighting now we're not gonna have you 16

1549
01:26:17,189 --> 01:26:22,439
indices here I also don't know what the

1550
01:26:19,949 --> 01:26:26,069
heck the scratch AB&amp;C stuff is actually

1551
01:26:22,439 --> 01:26:28,429
for is that really necessary how is this

1552
01:26:26,069 --> 01:26:28,429
working

1553
01:26:46,779 --> 01:26:58,309
so what is that what does that work so

1554
01:26:54,739 --> 01:27:00,380
it gets past a source on a desk and

1555
01:26:58,310 --> 01:27:02,960
they're like scratch buffers and it goes

1556
01:27:00,380 --> 01:27:06,560
through those and tries to partition

1557
01:27:02,960 --> 01:27:11,140
them into two lists right so that all

1558
01:27:06,560 --> 01:27:11,140
seems fine actually

1559
01:27:18,789 --> 01:27:23,859
so I guess just looking at this right

1560
01:27:33,719 --> 01:27:37,479
so looking at this I feel like it

1561
01:27:36,219 --> 01:27:44,408
wouldn't be that hard for us to

1562
01:27:37,479 --> 01:27:47,649
rearrange this to just work directly so

1563
01:27:44,408 --> 01:27:50,018
ad box storage is the thing that we're

1564
01:27:47,649 --> 01:27:52,628
thinking about right and it's this thing

1565
01:27:50,019 --> 01:27:55,599
and all we would really need to do here

1566
01:27:52,628 --> 01:27:57,908
is say let's move ad box storage so

1567
01:27:55,599 --> 01:28:01,088
instead of ever a box references would

1568
01:27:57,908 --> 01:28:03,668
just not exist anymore right and if I

1569
01:28:01,088 --> 01:28:07,439
remember correctly like ad box reference

1570
01:28:03,668 --> 01:28:13,898
if you look the only times we do that is

1571
01:28:07,439 --> 01:28:16,149
just to come Jimmy is literally only in

1572
01:28:13,899 --> 01:28:19,059
the case where we're doing it here so

1573
01:28:16,149 --> 01:28:21,489
this could just copy the boxes right of

1574
01:28:19,059 --> 01:28:24,369
each of the children it could just say

1575
01:28:21,488 --> 01:28:27,009
like let's copy those and so we only

1576
01:28:24,368 --> 01:28:28,779
have two cases we have one case where we

1577
01:28:27,010 --> 01:28:30,369
know we added the Box storage is here

1578
01:28:28,779 --> 01:28:36,099
and we could obviously add them

1579
01:28:30,368 --> 01:28:38,408
symmetrically like there those are now

1580
01:28:36,099 --> 01:28:40,418
in a row so we know we have two children

1581
01:28:38,408 --> 01:28:53,078
and they go right one after each other

1582
01:28:40,418 --> 01:28:55,118
right like right we could say look we

1583
01:28:53,078 --> 01:28:57,938
know those are contiguous you know I'm

1584
01:28:55,118 --> 01:28:59,378
saying so we know that these two that

1585
01:28:57,939 --> 01:29:02,619
these two children would be contiguous

1586
01:28:59,378 --> 01:29:05,979
and we know that if we didn't actually

1587
01:29:02,618 --> 01:29:08,918
split then we can just copy the boxes to

1588
01:29:05,979 --> 01:29:12,039
make those contiguous right so we could

1589
01:29:08,918 --> 01:29:13,838
just add box storage as we go so here in

1590
01:29:12,038 --> 01:29:16,088
this one where we say it is a leaf

1591
01:29:13,838 --> 01:29:22,408
container we can just add box storage

1592
01:29:16,088 --> 01:29:22,408
for each child right so like this

1593
01:29:30,179 --> 01:29:33,788
so in here when we go like let's go

1594
01:29:32,319 --> 01:29:36,460
through the sources to this particular

1595
01:29:33,788 --> 01:29:38,500
box what we want to do is like get that

1596
01:29:36,460 --> 01:29:43,389
box and just add the box storage for

1597
01:29:38,500 --> 01:29:47,460
that box into our set and then all the

1598
01:29:43,389 --> 01:29:50,650
boxes would just be continuous right we

1599
01:29:47,460 --> 01:29:52,689
we wouldn't need indirect referencing

1600
01:29:50,649 --> 01:29:58,268
for anything because all the references

1601
01:29:52,689 --> 01:30:00,419
would be correct if that makes sense to

1602
01:29:58,269 --> 01:30:00,420
me

1603
01:30:01,050 --> 01:30:07,929
and off we would go so another way to

1604
01:30:06,340 --> 01:30:10,360
look at this would be like look the

1605
01:30:07,929 --> 01:30:11,739
actually split case which is here we

1606
01:30:10,359 --> 01:30:13,479
could actually just change this to a

1607
01:30:11,738 --> 01:30:15,279
look if you didn't actually split and

1608
01:30:13,479 --> 01:30:18,939
then this comes up here so we'd say

1609
01:30:15,279 --> 01:30:21,609
alright in this case we set everything

1610
01:30:18,939 --> 01:30:23,888
right so in the case up here where we

1611
01:30:21,609 --> 01:30:25,868
say like if we actually split the thing

1612
01:30:23,889 --> 01:30:28,300
we're gonna leave and we're not gonna do

1613
01:30:25,868 --> 01:30:30,670
anything else this stuff now becomes

1614
01:30:28,300 --> 01:30:36,570
like determinative right so the child

1615
01:30:30,670 --> 01:30:39,699
count here like is 2 we don't set these

1616
01:30:36,569 --> 01:30:43,448
because you know it's continuous right

1617
01:30:39,698 --> 01:30:51,098
so then the first child index in this

1618
01:30:43,448 --> 01:30:54,238
case because this isn't like an output

1619
01:30:51,099 --> 01:30:54,239
box at this point right

1620
01:31:02,680 --> 01:31:07,840
wait nope it's not even quite that I can

1621
01:31:06,670 --> 01:31:17,380
just leave it like this now I think

1622
01:31:07,840 --> 01:31:19,810
about it so during this what we would do

1623
01:31:17,380 --> 01:31:28,779
is we'd actually add a new one for the

1624
01:31:19,810 --> 01:31:31,240
parent box right entirely so it's a

1625
01:31:28,779 --> 01:31:32,859
little complicated to do it because just

1626
01:31:31,239 --> 01:31:34,869
in order to make this routine still work

1627
01:31:32,859 --> 01:31:36,219
the same way that it was before but to

1628
01:31:34,869 --> 01:31:37,899
stream them out directly it's a little

1629
01:31:36,220 --> 01:31:39,250
bit more work once you've added the

1630
01:31:37,899 --> 01:31:40,659
children you know that the children are

1631
01:31:39,250 --> 01:31:42,430
added in order so now you should be able

1632
01:31:40,659 --> 01:31:50,909
to add the parent and that parent should

1633
01:31:42,430 --> 01:31:50,909
be basically in order as well right so

1634
01:31:52,409 --> 01:32:03,569
yeah so I think that's fine yeah I think

1635
01:32:01,000 --> 01:32:03,569
that's fine

1636
01:32:04,380 --> 01:32:08,949
the only thing I'm not sure about is the

1637
01:32:07,180 --> 01:32:10,869
fact that as you're walking the tree you

1638
01:32:08,949 --> 01:32:12,569
use different indices so in here when

1639
01:32:10,869 --> 01:32:15,039
you're getting these things out this

1640
01:32:12,569 --> 01:32:26,019
source said oh but it's not because it

1641
01:32:15,039 --> 01:32:27,819
comes from here yeah all right so I

1642
01:32:26,020 --> 01:32:29,200
think we're fine so I think that I think

1643
01:32:27,819 --> 01:32:30,849
we can actually just basically leave

1644
01:32:29,199 --> 01:32:32,859
this as is and the only difference here

1645
01:32:30,850 --> 01:32:40,240
is that instead of this like the first

1646
01:32:32,859 --> 01:32:42,130
child index bit here the way that that

1647
01:32:40,239 --> 01:32:45,010
works has to change slightly so when we

1648
01:32:42,130 --> 01:32:46,270
do child box a child box B and the add

1649
01:32:45,010 --> 01:32:48,850
box references

1650
01:32:46,270 --> 01:32:50,950
this part needs to change and instead

1651
01:32:48,850 --> 01:32:52,810
what has to happen is we just have a

1652
01:32:50,949 --> 01:32:55,960
first child index on a child count here

1653
01:32:52,810 --> 01:32:57,610
so we need those to get set so let's

1654
01:32:55,960 --> 01:32:59,859
just set them where they actually happen

1655
01:32:57,609 --> 01:33:02,889
so in here we'll just say look this is

1656
01:32:59,859 --> 01:33:06,819
going to be two right so we're just

1657
01:33:02,890 --> 01:33:09,850
gonna set this like the parent box here

1658
01:33:06,819 --> 01:33:12,369
we're gonna set and then we need the

1659
01:33:09,850 --> 01:33:14,650
first child right the parent box packed

1660
01:33:12,369 --> 01:33:16,599
first child index that's just going to

1661
01:33:14,649 --> 01:33:23,458
be this child box

1662
01:33:16,599 --> 01:33:26,590
at right so that's all we're doing here

1663
01:33:23,458 --> 01:33:28,569
you know I'm saying to you so that's all

1664
01:33:26,590 --> 01:33:33,729
we need to set in that case this case

1665
01:33:28,569 --> 01:33:35,618
doesn't need to happen at all right this

1666
01:33:33,729 --> 01:33:37,628
doesn't need to happen either so then

1667
01:33:35,618 --> 01:33:39,848
all we need to do is when we are a leaf

1668
01:33:37,628 --> 01:33:43,300
container all we need to do is just set

1669
01:33:39,849 --> 01:33:45,128
these things up right and the way that

1670
01:33:43,300 --> 01:33:49,059
we need to do that is we need to do ad

1671
01:33:45,128 --> 01:33:54,189
box storage for all of the boxes in our

1672
01:33:49,059 --> 01:33:58,659
set right so we need to do like four ad

1673
01:33:54,189 --> 01:34:02,889
box storage we would do like box count

1674
01:33:58,658 --> 01:34:04,328
equals one or whatever right and then in

1675
01:34:02,889 --> 01:34:08,139
here we would say look let's make sure

1676
01:34:04,328 --> 01:34:10,868
we can fix fit that many in and then you

1677
01:34:08,139 --> 01:34:12,159
can add as many as you want at a time so

1678
01:34:10,868 --> 01:34:14,319
then what we would do is say well the

1679
01:34:12,158 --> 01:34:18,368
child count is just the source count

1680
01:34:14,319 --> 01:34:21,158
right we know it's a leaf container the

1681
01:34:18,368 --> 01:34:23,408
first child index is the ad box storage

1682
01:34:21,158 --> 01:34:26,138
of however many of these things we

1683
01:34:23,408 --> 01:34:28,509
actually have which is that and then we

1684
01:34:26,139 --> 01:34:33,219
just need to copy them so we need to do

1685
01:34:28,510 --> 01:34:36,369
like child index zero you know and these

1686
01:34:33,219 --> 01:34:42,908
are 16s I guess seanix is less than the

1687
01:34:36,368 --> 01:34:48,429
child count hmm and for each of these we

1688
01:34:42,908 --> 01:34:57,518
copy it in so whatever the solution box

1689
01:34:48,429 --> 01:35:00,729
is child index like so right that's

1690
01:34:57,519 --> 01:35:02,769
gonna be copied from the source box so

1691
01:35:00,729 --> 01:35:04,989
you know it's this actually I guess it's

1692
01:35:02,769 --> 01:35:08,918
it's this way might be the right way to

1693
01:35:04,988 --> 01:35:11,348
do it so we say look here's our sources

1694
01:35:08,918 --> 01:35:15,929
and each one of those needs to be copied

1695
01:35:11,349 --> 01:35:15,929
into like one of the parent boxes

1696
01:35:22,369 --> 01:35:33,059
oops as a bit of a miss click there

1697
01:35:26,369 --> 01:35:39,390
there we go so now that streams out um

1698
01:35:33,060 --> 01:35:40,890
where we say Jimmy we now have a compact

1699
01:35:39,390 --> 01:35:43,380
list where we just say look we're gonna

1700
01:35:40,890 --> 01:35:46,199
stream these out in order so now there's

1701
01:35:43,380 --> 01:35:48,810
no box references ever so the box

1702
01:35:46,198 --> 01:35:52,379
reference concept would go away meaning

1703
01:35:48,810 --> 01:35:55,770
this right here would would go away I

1704
01:35:52,380 --> 01:35:59,760
believe and the get box concept would

1705
01:35:55,770 --> 01:36:01,199
also go away I think so I'm going to try

1706
01:35:59,760 --> 01:36:05,520
that real quick and just see if I can

1707
01:36:01,198 --> 01:36:08,609
make that work mm-hmm so in here where

1708
01:36:05,520 --> 01:36:14,100
we do lightbox index again forget box

1709
01:36:08,609 --> 01:36:15,539
this would no longer use ref I mean the

1710
01:36:14,100 --> 01:36:20,190
other way we could do it I suppose is

1711
01:36:15,539 --> 01:36:26,670
get box could just work without the box

1712
01:36:20,189 --> 01:36:28,198
table so we could just do this right we

1713
01:36:26,670 --> 01:36:31,460
could also assert that like solution

1714
01:36:28,198 --> 01:36:43,619
that like box index is less than

1715
01:36:31,460 --> 01:36:45,659
solution last gap right so what else so

1716
01:36:43,619 --> 01:36:47,609
in this case when we add the root box

1717
01:36:45,659 --> 01:36:51,170
here again we're not adding references

1718
01:36:47,609 --> 01:36:55,109
anymore we just add storage like this

1719
01:36:51,170 --> 01:36:57,180
right I'm not sure we actually need to

1720
01:36:55,109 --> 01:36:58,769
do anything else here's the child count

1721
01:36:57,180 --> 01:37:02,400
equaling a source count you can only

1722
01:36:58,770 --> 01:37:05,219
have you 16 of those I mean we can

1723
01:37:02,399 --> 01:37:14,359
assert the source count is less than you

1724
01:37:05,219 --> 01:37:17,929
know you 16 max but it's not going to be

1725
01:37:14,359 --> 01:37:19,710
8 max sorry

1726
01:37:17,929 --> 01:37:24,840
because we already said it had to be

1727
01:37:19,710 --> 01:37:32,039
less than four look we don't have a u8

1728
01:37:24,840 --> 01:37:37,079
max somehow yeah we don't know no biggie

1729
01:37:32,039 --> 01:37:38,670
we've got one now all right and so now

1730
01:37:37,079 --> 01:37:42,408
we have to see whether that works at all

1731
01:37:38,670 --> 01:37:42,408
I mean it might be a total disaster

1732
01:37:42,810 --> 01:37:52,639
and we'll see so yeah still looks buggy

1733
01:37:48,960 --> 01:37:56,639
there right like that's not quite right

1734
01:37:52,639 --> 01:37:59,400
so what did we mess up wrong to me what

1735
01:37:56,639 --> 01:38:02,639
did we mess up there let's take a quick

1736
01:37:59,399 --> 01:38:05,460
look so when we're actually pushing

1737
01:38:02,639 --> 01:38:07,380
these on and now we're just calling get

1738
01:38:05,460 --> 01:38:10,939
box I guess in let me just make sure all

1739
01:38:07,380 --> 01:38:10,940
the places we're calling it makes sense

1740
01:38:17,149 --> 01:38:21,769
so getting the route light box should be

1741
01:38:19,920 --> 01:38:24,539
fine

1742
01:38:21,770 --> 01:38:27,290
getting the child indices here that

1743
01:38:24,539 --> 01:38:27,289
should be fine

1744
01:38:28,219 --> 01:38:39,679
same here on the same here

1745
01:38:40,460 --> 01:38:53,100
yep so all those are what you expect the

1746
01:38:45,810 --> 01:38:56,250
ref see there should be fine yep yep so

1747
01:38:53,100 --> 01:38:58,620
all of that should be fine so let me see

1748
01:38:56,250 --> 01:39:03,408
so our split box must be slightly wrong

1749
01:38:58,619 --> 01:39:06,658
somehow hmm

1750
01:39:03,408 --> 01:39:09,559
so we passed the sources down here how

1751
01:39:06,658 --> 01:39:09,559
do we pass those

1752
01:39:14,670 --> 01:39:22,679
because I'm not sure how this dest bit

1753
01:39:16,710 --> 01:39:26,039
works here so you can see that what we

1754
01:39:22,679 --> 01:39:30,440
do is we loop through and we write out

1755
01:39:26,039 --> 01:39:30,439
the refs into destination arrays right

1756
01:39:35,750 --> 01:39:49,829
yes so we pull out each box and so I

1757
01:39:48,119 --> 01:39:52,738
would assume that if we actually made it

1758
01:39:49,829 --> 01:39:56,909
down to here where you know if we

1759
01:39:52,738 --> 01:40:00,029
actually split we remove the leaf

1760
01:39:56,909 --> 01:40:07,019
container whereas if we didn't actually

1761
01:40:00,029 --> 01:40:08,340
split we store it the child count is

1762
01:40:07,020 --> 01:40:13,730
going to be the source count that we

1763
01:40:08,340 --> 01:40:17,429
were given the first child index hmm

1764
01:40:13,729 --> 01:40:19,439
we're gonna add that many boxes right

1765
01:40:17,429 --> 01:40:21,469
however many we had make sure that is

1766
01:40:19,439 --> 01:40:21,469
right

1767
01:40:27,639 --> 01:40:35,440
nope that's wrong so this is actually

1768
01:40:31,179 --> 01:40:38,739
that and we have to do the increment

1769
01:40:35,439 --> 01:40:41,408
after right that was just a screw-up

1770
01:40:38,738 --> 01:40:43,388
there so because the result is going to

1771
01:40:41,408 --> 01:40:45,579
be what at the Box hat was that plus

1772
01:40:43,389 --> 01:40:47,800
equals was not like that would give you

1773
01:40:45,579 --> 01:40:51,639
the wrong results so let me try that one

1774
01:40:47,800 --> 01:40:53,920
more time okay so now we're back to the

1775
01:40:51,639 --> 01:40:58,510
correct Texel error so that's a good

1776
01:40:53,920 --> 01:41:02,980
sign and what we can see here is we

1777
01:40:58,510 --> 01:41:04,480
saved some time again right so before we

1778
01:41:02,979 --> 01:41:08,618
were running it like six six I believe

1779
01:41:04,479 --> 01:41:10,779
pretty routinely and you know we we

1780
01:41:08,618 --> 01:41:14,259
managed to drop down again like you can

1781
01:41:10,779 --> 01:41:16,509
look up back at our our starting runs as

1782
01:41:14,260 --> 01:41:19,389
we were working through those we got

1783
01:41:16,510 --> 01:41:20,860
down to six six right but we never had

1784
01:41:19,389 --> 01:41:26,350
anything as low as a six four so

1785
01:41:20,859 --> 01:41:28,299
removing that table helps us to write so

1786
01:41:26,350 --> 01:41:30,670
now that we've removed that table we

1787
01:41:28,300 --> 01:41:33,300
don't have those in directed box arrays

1788
01:41:30,670 --> 01:41:36,429
so now our lighting structure is also

1789
01:41:33,300 --> 01:41:38,770
more straightforward so we can for

1790
01:41:36,429 --> 01:41:43,050
example remove the ref count the box

1791
01:41:38,770 --> 01:41:46,869
table all of that stuff can go away now

1792
01:41:43,050 --> 01:41:51,779
since we flat load this thing we can't

1793
01:41:46,868 --> 01:41:51,779
just nerf them yet but we can say like

1794
01:41:53,880 --> 01:42:01,109
hey all of this now can be removed right

1795
01:42:01,770 --> 01:42:08,770
so that entire box table and all of the

1796
01:42:06,100 --> 01:42:10,869
box references would would be removed

1797
01:42:08,770 --> 01:42:13,389
and furthermore I can nerf them

1798
01:42:10,868 --> 01:42:15,069
explicitly here so that I can check to

1799
01:42:13,389 --> 01:42:17,949
see if anyone's actually doing anything

1800
01:42:15,069 --> 01:42:21,519
with them and get rid of it

1801
01:42:17,948 --> 01:42:28,839
so this debug dump now is irrelevant it

1802
01:42:21,520 --> 01:42:32,860
doesn't have to happen anymore this box

1803
01:42:28,840 --> 01:42:35,699
ref count here can go away it doesn't

1804
01:42:32,859 --> 01:42:35,698
need to be there anymore

1805
01:42:36,279 --> 01:42:43,050
this check is not relevant because we

1806
01:42:39,158 --> 01:42:43,049
don't need box references

1807
01:42:44,069 --> 01:42:52,179
all right so that stuff can go away and

1808
01:42:49,329 --> 01:42:54,789
we can simplify our lives by just doing

1809
01:42:52,179 --> 01:42:59,020
a recapture there and off we go

1810
01:42:54,789 --> 01:43:01,658
so our 6.4 is now like hey we're

1811
01:42:59,020 --> 01:43:04,600
actually like a full second faster on

1812
01:43:01,658 --> 01:43:06,219
our on our test yet and we haven't even

1813
01:43:04,600 --> 01:43:08,530
really started to optimize this thing

1814
01:43:06,219 --> 01:43:10,239
like all we're really doing here is just

1815
01:43:08,529 --> 01:43:12,429
the basic work of getting us into

1816
01:43:10,238 --> 01:43:13,539
position to optimize like we haven't

1817
01:43:12,429 --> 01:43:15,819
really even looked at our performance

1818
01:43:13,539 --> 01:43:17,260
counter numbers we just got it working

1819
01:43:15,819 --> 01:43:20,019
with vtune but we didn't actually do

1820
01:43:17,260 --> 01:43:21,699
anything yet so I mean this is great

1821
01:43:20,020 --> 01:43:23,320
like this is good progress if that's

1822
01:43:21,698 --> 01:43:35,229
being made we're just de crusting the

1823
01:43:23,319 --> 01:43:36,729
routine all right so now we want to go

1824
01:43:35,229 --> 01:43:38,289
back to what I was doing before where I

1825
01:43:36,729 --> 01:43:39,669
say like look now we should be able to

1826
01:43:38,289 --> 01:43:41,229
see those values and they should be

1827
01:43:39,670 --> 01:43:44,230
clearer what's happening so now let's

1828
01:43:41,229 --> 01:43:45,099
actually take the dump let's actually

1829
01:43:44,229 --> 01:43:49,269
take a dump

1830
01:43:45,100 --> 01:43:51,579
uh-huh and and see what's going on so if

1831
01:43:49,270 --> 01:43:55,150
I build now with the old way of doing

1832
01:43:51,579 --> 01:43:58,329
things I should be able to score some

1833
01:43:55,149 --> 01:44:01,149
traversals here that let me see what's

1834
01:43:58,329 --> 01:44:03,219
happening so there's a run here's the

1835
01:44:01,149 --> 01:44:05,729
old way and now we should see

1836
01:44:03,219 --> 01:44:08,770
exclusively high numbers and we do right

1837
01:44:05,729 --> 01:44:10,569
so that's easier now because I can

1838
01:44:08,770 --> 01:44:13,449
verify that there's no leaves in there

1839
01:44:10,569 --> 01:44:15,309
which I was just nervous about that so

1840
01:44:13,448 --> 01:44:18,279
this is the old leaf traversal here's

1841
01:44:15,310 --> 01:44:21,190
the old partition traversal now let's go

1842
01:44:18,279 --> 01:44:23,289
ahead and do another run where we do the

1843
01:44:21,189 --> 01:44:28,559
new traversal and let's see what that

1844
01:44:23,289 --> 01:44:32,889
looks like because again this is broken

1845
01:44:28,560 --> 01:44:35,020
we think right and you can see that the

1846
01:44:32,889 --> 01:44:36,819
max Texel error jumped up like

1847
01:44:35,020 --> 01:44:39,489
dramatically and we don't know why

1848
01:44:36,819 --> 01:44:41,590
something's busted so now let's take a

1849
01:44:39,488 --> 01:44:44,619
look here's the new leaf box traversal

1850
01:44:41,590 --> 01:44:46,239
the new partition box traversal and

1851
01:44:44,619 --> 01:44:54,090
let's go ahead and diff those so here's

1852
01:44:46,238 --> 01:44:54,089
the old one here's the new one

1853
01:44:54,850 --> 01:45:03,140
and there's a very small difference so

1854
01:45:00,140 --> 01:45:06,829
it's interesting in that looking at

1855
01:45:03,140 --> 01:45:12,829
these you can see that that the the

1856
01:45:06,829 --> 01:45:15,470
routine behaves fairly similar to what

1857
01:45:12,829 --> 01:45:17,210
you would expect except for one minor

1858
01:45:15,470 --> 01:45:22,940
difference now this is good because

1859
01:45:17,210 --> 01:45:24,380
again it helps us to if there's only a

1860
01:45:22,939 --> 01:45:26,779
small number juices we can start to

1861
01:45:24,380 --> 01:45:28,699
isolate in those differences I do want

1862
01:45:26,779 --> 01:45:30,769
to do one difference one thing that's a

1863
01:45:28,699 --> 01:45:40,489
little bit odd here so I'm gonna say

1864
01:45:30,770 --> 01:45:42,860
source I want to know who caused the

1865
01:45:40,489 --> 01:45:46,670
Edition to happen so like what I'd like

1866
01:45:42,859 --> 01:45:52,909
to see here is when we go and record a

1867
01:45:46,670 --> 01:45:54,440
partition box and I don't know there's

1868
01:45:52,909 --> 01:45:59,840
really any way to do it actually

1869
01:45:54,439 --> 01:46:04,279
so maybe not it'd be nice to record who

1870
01:45:59,840 --> 01:46:07,690
pushed it you know I'm saying to you so

1871
01:46:04,279 --> 01:46:10,909
maybe what we could do here is say hey

1872
01:46:07,689 --> 01:46:18,129
when someone pushes someone on will

1873
01:46:10,909 --> 01:46:18,130
record that too so like

1874
01:46:27,439 --> 01:46:47,488
we'll send the should push will say who

1875
01:46:39,109 --> 01:46:50,698
got pushed and we'll go from there so we

1876
01:46:47,488 --> 01:46:54,179
know that we want to push down this Fox

1877
01:46:50,698 --> 01:46:56,729
pack right so basically what we could

1878
01:46:54,180 --> 01:47:01,199
say is like here's the box pack that got

1879
01:46:56,729 --> 01:47:04,799
pushed and here's who pushed it so we

1880
01:47:01,198 --> 01:47:07,019
know the source index right because we

1881
01:47:04,800 --> 01:47:09,270
would have just written that out so we

1882
01:47:07,020 --> 01:47:12,180
can do a record partition push here and

1883
01:47:09,270 --> 01:47:18,030
the same would be true in our other case

1884
01:47:12,180 --> 01:47:22,619
we can do that here as well right so we

1885
01:47:18,029 --> 01:47:30,960
could just dupes actually we can just do

1886
01:47:22,619 --> 01:47:39,479
this and that way we have yet another

1887
01:47:30,960 --> 01:47:44,969
piece of information so record partition

1888
01:47:39,479 --> 01:47:48,238
push in this case has two things one is

1889
01:47:44,969 --> 01:47:52,100
the should push and the other is the

1890
01:47:48,238 --> 01:47:56,069
pack and this can just do like look if

1891
01:47:52,100 --> 01:48:03,210
stack them switch and should push then F

1892
01:47:56,069 --> 01:48:05,069
print F petition box out and we'll just

1893
01:48:03,210 --> 01:48:07,369
do a loops just do a little push line

1894
01:48:05,069 --> 01:48:07,369
here

1895
01:48:16,579 --> 01:48:21,829
so that's the pact up first child index

1896
01:48:28,130 --> 01:48:32,900
and I guess we'll do it like this that

1897
01:48:39,739 --> 01:48:48,109
seemed good let's see how that does

1898
01:48:54,770 --> 01:49:04,010
so inside raycast like I'm going to go

1899
01:48:59,550 --> 01:49:10,039
ahead and try taking the old one now and

1900
01:49:04,010 --> 01:49:10,039
again just do another recapture here so

1901
01:49:11,689 --> 01:49:16,519
here's the old way of doing things

1902
01:49:24,390 --> 01:49:32,989
and so in the partition box traversal

1903
01:49:27,179 --> 01:49:32,989
here well why didn't that push anything

1904
01:49:41,180 --> 01:49:49,970
seems like that should have pushed

1905
01:49:42,739 --> 01:49:52,909
something right like we're in this

1906
01:49:49,970 --> 01:50:01,240
branch oh whoops

1907
01:49:52,909 --> 01:50:12,349
that's in the wrong place there we go

1908
01:50:01,239 --> 01:50:15,139
try that one more time there we go so

1909
01:50:12,350 --> 01:50:18,320
now we can see like who was doing what

1910
01:50:15,140 --> 01:50:20,480
here and I'll be honest it looks a

1911
01:50:18,319 --> 01:50:26,509
little weird like what is happening with

1912
01:50:20,479 --> 01:50:28,279
that oscillation I guess those are

1913
01:50:26,510 --> 01:50:31,579
multiple ray casts so those rays didn't

1914
01:50:28,279 --> 01:50:47,239
cast so nevermind you know what let's

1915
01:50:31,579 --> 01:50:49,550
add that too because I'm tired of

1916
01:50:47,239 --> 01:50:51,649
getting confused about that part of it

1917
01:50:49,550 --> 01:50:53,989
so let's just put a blank line in there

1918
01:50:51,649 --> 01:51:00,019
so we can see when the raycast actually

1919
01:50:53,989 --> 01:51:02,210
ends so there we have each ray so like

1920
01:51:00,020 --> 01:51:05,990
here's an example of array like 1498

1921
01:51:02,210 --> 01:51:07,789
pushed 92 through 94 then it did 91 that

1922
01:51:05,989 --> 01:51:09,289
didn't push anything then it went to 92

1923
01:51:07,789 --> 01:51:11,000
right so now we can see the stack

1924
01:51:09,289 --> 01:51:18,439
traversal a little more clearly and

1925
01:51:11,000 --> 01:51:20,390
again that's the that's the old way and

1926
01:51:18,439 --> 01:51:23,689
now let's go ahead and see what happens

1927
01:51:20,390 --> 01:51:29,210
with the new way so I'm gonna go ahead

1928
01:51:23,689 --> 01:51:30,049
and swap in the the broken way or at

1929
01:51:29,210 --> 01:51:31,279
least we think it's broken

1930
01:51:30,050 --> 01:51:32,869
maybe it's actually one that's working

1931
01:51:31,279 --> 01:51:35,170
properly on the other ones broken we

1932
01:51:32,869 --> 01:51:35,170
don't know

1933
01:51:39,699 --> 01:51:47,750
so here's the new one and now if I take

1934
01:51:45,560 --> 01:51:53,020
a look at these two so here's the old

1935
01:51:47,750 --> 01:51:53,020
one and here's the new one

1936
01:51:55,750 --> 01:52:09,949
whoops I just want new leaf box

1937
01:52:04,729 --> 01:52:11,559
traversal there we go a new partition

1938
01:52:09,949 --> 01:52:14,750
box there we go

1939
01:52:11,560 --> 01:52:16,789
so if I look at this now I should be

1940
01:52:14,750 --> 01:52:19,670
able to see like where the push went

1941
01:52:16,789 --> 01:52:23,779
wrong so what looks like it happened is

1942
01:52:19,670 --> 01:52:25,489
on box 1638 for some reason this thought

1943
01:52:23,779 --> 01:52:34,719
it needed to push the children of that

1944
01:52:25,489 --> 01:52:34,719
box but this didn't hmm right so

1945
01:52:50,479 --> 01:52:57,039
I just the only thing I'm not sure about

1946
01:52:54,500 --> 01:52:57,039
though is

1947
01:53:06,029 --> 01:53:12,869
well no this I mean yeah so this should

1948
01:53:09,659 --> 01:53:15,899
record both top types of push so if you

1949
01:53:12,869 --> 01:53:20,220
were supposed to push in either case it

1950
01:53:15,899 --> 01:53:23,670
records the push whether it was a

1951
01:53:20,220 --> 01:53:32,340
weather was leaf boxes or not and so you

1952
01:53:23,670 --> 01:53:36,779
can see here like 1639 and 1638 both

1953
01:53:32,340 --> 01:53:40,260
pushed and then those pushes even pushed

1954
01:53:36,779 --> 01:53:44,699
right like there was actual results of

1955
01:53:40,260 --> 01:53:47,489
those that went down so we now know a

1956
01:53:44,699 --> 01:53:50,939
specific person we could look at like we

1957
01:53:47,489 --> 01:53:55,380
can look at 1638 explicitly if we want

1958
01:53:50,939 --> 01:53:59,579
to and see why that happened the same

1959
01:53:55,380 --> 01:54:02,489
would be true of 1844 it looks like so

1960
01:53:59,579 --> 01:54:04,859
something is happening with those that

1961
01:54:02,489 --> 01:54:08,159
it's like causing a push and we don't

1962
01:54:04,859 --> 01:54:12,929
know why like why would those why are

1963
01:54:08,159 --> 01:54:18,329
those getting a push and the end only

1964
01:54:12,930 --> 01:54:23,550
those right fortunately this is pretty

1965
01:54:18,329 --> 01:54:25,699
easy to look at I guess so I mean it's

1966
01:54:23,550 --> 01:54:25,699
just

1967
01:54:37,359 --> 01:54:52,210
16:38 I mean something like that and I'm

1968
01:54:47,649 --> 01:55:01,210
guessing that like I mean I guess I

1969
01:54:52,210 --> 01:55:03,699
could just do this so that would stop me

1970
01:55:01,210 --> 01:55:07,359
in remedy right there

1971
01:55:03,699 --> 01:55:09,760
and I can see you know what what's

1972
01:55:07,359 --> 01:55:12,309
happening I guess and the same would be

1973
01:55:09,760 --> 01:55:17,020
true in here so I can just do the same

1974
01:55:12,310 --> 01:55:20,260
thing just right before the should push

1975
01:55:17,020 --> 01:55:22,210
you know I can put that that breakpoint

1976
01:55:20,260 --> 01:55:30,159
in there I guess I can do this even

1977
01:55:22,210 --> 01:55:33,779
further down right and I'm gonna go

1978
01:55:30,159 --> 01:55:37,119
ahead and compile in debug mode here and

1979
01:55:33,779 --> 01:55:38,649
verify that I mean I would like to just

1980
01:55:37,119 --> 01:55:41,199
be able to not have to do this in

1981
01:55:38,649 --> 01:55:44,349
release so I'm gonna verify that the

1982
01:55:41,199 --> 01:55:46,809
same thing happens on both I don't know

1983
01:55:44,350 --> 01:55:51,990
that it will because there could be

1984
01:55:46,810 --> 01:55:55,570
problems with that so let me just first

1985
01:55:51,989 --> 01:55:59,170
verify that this is true so in I'm in

1986
01:55:55,569 --> 01:56:02,170
the case where the old way happens I'm

1987
01:55:59,170 --> 01:56:04,020
gonna take a look and say all right

1988
01:56:02,170 --> 01:56:06,520
don't quite do that yet

1989
01:56:04,020 --> 01:56:12,910
run a trace and make sure the trace is

1990
01:56:06,520 --> 01:56:18,870
the same so there's the trace mmm here's

1991
01:56:12,909 --> 01:56:22,659
the the old partition box traversal and

1992
01:56:18,869 --> 01:56:25,630
then here's the that same one

1993
01:56:22,659 --> 01:56:25,930
compared with itself they're exactly the

1994
01:56:25,630 --> 01:56:29,140
same

1995
01:56:25,930 --> 01:56:31,000
so in debug mode I should be able to

1996
01:56:29,140 --> 01:56:36,880
just reproduce this just fine so if I

1997
01:56:31,000 --> 01:56:39,850
now do this and run it under remedy like

1998
01:56:36,880 --> 01:56:44,880
so I should stop on the one we actually

1999
01:56:39,850 --> 01:56:47,880
care about right so here's source index

2000
01:56:44,880 --> 01:56:47,880
1638

2001
01:56:48,539 --> 01:56:57,488
so if I actually clear this out and just

2002
01:56:50,829 --> 01:56:59,439
look their source index 1638 and what we

2003
01:56:57,488 --> 01:57:01,929
want to know now is like alright so

2004
01:56:59,439 --> 01:57:04,479
we're assuming that any like these these

2005
01:57:01,930 --> 01:57:06,220
numbers are wrong or right these are the

2006
01:57:04,479 --> 01:57:08,799
correct ones I should say and they're

2007
01:57:06,220 --> 01:57:13,900
what's wrong in the other one so any

2008
01:57:08,800 --> 01:57:18,610
inside should push so all of these are

2009
01:57:13,899 --> 01:57:20,529
false right nothing actually hit the box

2010
01:57:18,609 --> 01:57:24,238
that we're looking at so if we look at

2011
01:57:20,529 --> 01:57:24,238
the actual box structure here

2012
01:57:39,529 --> 01:57:48,300
so I just thought of something I want to

2013
01:57:45,180 --> 01:57:54,480
check sorry to derail that train of

2014
01:57:48,300 --> 01:57:56,940
thought so when we push on to the other

2015
01:57:54,479 --> 01:58:00,119
stack we should check to make sure that

2016
01:57:56,939 --> 01:58:04,979
the leaf count isn't larger than the

2017
01:58:00,119 --> 01:58:07,109
total size we have right so like in

2018
01:58:04,979 --> 01:58:08,969
because that could we could just be

2019
01:58:07,109 --> 01:58:11,939
overwriting that memory maybe that's all

2020
01:58:08,970 --> 01:58:16,079
it is right so if you look in here where

2021
01:58:11,939 --> 01:58:21,889
we actually create these oh this is

2022
01:58:16,079 --> 01:58:24,269
garbage right we don't know that that's

2023
01:58:21,890 --> 01:58:25,710
well no it's not because if that's the

2024
01:58:24,270 --> 01:58:27,840
total number of boxes there are we

2025
01:58:25,710 --> 01:58:35,489
couldn't actually push more more than

2026
01:58:27,840 --> 01:58:39,860
that good way but you see why we could

2027
01:58:35,488 --> 01:58:39,859
have a problem there right so

2028
01:58:51,529 --> 01:59:01,699
so I think we do kind of want to at

2029
01:58:53,720 --> 01:59:03,650
least validate that right so I'm not

2030
01:59:01,699 --> 01:59:05,960
sure exactly the best way to do that

2031
01:59:03,649 --> 01:59:09,309
because the box count itself has been

2032
01:59:05,960 --> 01:59:12,260
modified at that point so it's harder to

2033
01:59:09,310 --> 01:59:14,890
have some way to record that but I can

2034
01:59:12,260 --> 01:59:14,890
just do this

2035
01:59:16,180 --> 01:59:33,079
oops so if I save the global max work

2036
01:59:31,159 --> 01:59:46,010
stack depth here just for debugging

2037
01:59:33,079 --> 01:59:49,130
purposes right then I can do an

2038
01:59:46,010 --> 01:59:54,079
assertion here that it doesn't get over

2039
01:59:49,130 --> 01:59:57,440
pushed right so for example in this case

2040
01:59:54,079 --> 01:59:59,420
here where we push onto the leaf count I

2041
01:59:57,439 --> 02:00:02,299
can just do an assert that like the leaf

2042
01:59:59,420 --> 02:00:10,159
count is less than the global max works

2043
02:00:02,300 --> 02:00:12,699
tap depth here right and off we should

2044
02:00:10,159 --> 02:00:12,699
go now

2045
02:00:15,289 --> 02:00:23,300
I will admit oh but I didn't file a case

2046
02:00:20,869 --> 02:00:25,909
so now if I turn this off I should get

2047
02:00:23,300 --> 02:00:27,770
yeah I should get an error in the non

2048
02:00:25,909 --> 02:00:32,139
light perf build that that's undefined

2049
02:00:27,770 --> 02:00:32,140
and that's fine and now when I run this

2050
02:00:33,430 --> 02:00:46,460
beautiful okay so the problem is we were

2051
02:00:37,250 --> 02:00:57,619
actually somehow generating too many box

2052
02:00:46,460 --> 02:00:59,300
pushes what the hey man so I wouldn't

2053
02:00:57,619 --> 02:01:01,189
have thought that was possible since

2054
02:00:59,300 --> 02:01:05,239
each one of those can have at most one

2055
02:01:01,189 --> 02:01:09,169
child I'm sorry at least one child or

2056
02:01:05,239 --> 02:01:11,630
they wouldn't get pushed so how the heck

2057
02:01:09,170 --> 02:01:16,300
are we pushing more than the total

2058
02:01:11,630 --> 02:01:16,300
number of leaves worth of partitions

2059
02:01:28,199 --> 02:01:41,800
am I missing something there oh wait no

2060
02:01:41,140 --> 02:01:44,470
nevermind

2061
02:01:41,800 --> 02:01:45,159
that was the T bug break never mind

2062
02:01:44,470 --> 02:01:47,350
never mind

2063
02:01:45,159 --> 02:01:49,599
everyone calm down I was gonna say that

2064
02:01:47,350 --> 02:01:54,190
that was surprising me alright so I'm

2065
02:01:49,600 --> 02:01:58,690
going to nerf this real quick we're not

2066
02:01:54,189 --> 02:01:59,829
gonna do the debug break cuz it's gonna

2067
02:01:58,689 --> 02:02:01,839
say that shouldn't have been the case

2068
02:01:59,829 --> 02:02:02,949
but let's see maybe it still is so I

2069
02:02:01,840 --> 02:02:05,890
want to see whether I ever hit that

2070
02:02:02,949 --> 02:02:14,289
assertion right this assertion right

2071
02:02:05,890 --> 02:02:16,030
here and doesn't look like we do and in

2072
02:02:14,289 --> 02:02:19,420
fact I can probably verify that like

2073
02:02:16,029 --> 02:02:23,829
here so I come down here and you look at

2074
02:02:19,420 --> 02:02:26,050
leaf count right um you can see like the

2075
02:02:23,829 --> 02:02:29,439
number of leaves that we get is like

2076
02:02:26,050 --> 02:02:36,190
super low right it's just not that high

2077
02:02:29,439 --> 02:02:38,799
so I don't know what the maximum leaf

2078
02:02:36,189 --> 02:02:41,319
can't would be but it's not gonna be

2079
02:02:38,800 --> 02:02:42,579
that big I don't think and so we don't

2080
02:02:41,319 --> 02:02:44,769
actually ever hit that assertion

2081
02:02:42,579 --> 02:02:46,149
okay good good cuz I was like you

2082
02:02:44,770 --> 02:02:47,350
shouldn't ever be able to hit that

2083
02:02:46,149 --> 02:02:50,979
assertion it should be completely

2084
02:02:47,350 --> 02:02:53,350
impossible to do so alright so we're not

2085
02:02:50,979 --> 02:02:54,759
over writing that I don't think although

2086
02:02:53,350 --> 02:02:56,890
it's possible that we allocated two

2087
02:02:54,760 --> 02:02:59,550
little memory for it somehow otherwise

2088
02:02:56,890 --> 02:03:02,170
in this sort of hacked routine here

2089
02:02:59,550 --> 02:03:10,960
where we do the stacks stack space we

2090
02:03:02,170 --> 02:03:13,899
malloc the max worked ah and we did so I

2091
02:03:10,960 --> 02:03:15,699
think that was it right or no we didn't

2092
02:03:13,899 --> 02:03:18,250
why do I keep thinking I keep miss

2093
02:03:15,699 --> 02:03:20,979
reading that as the work count so nope

2094
02:03:18,250 --> 02:03:27,010
totally fine that our Kate's as many as

2095
02:03:20,979 --> 02:03:29,889
we wanted that's what we would expect so

2096
02:03:27,010 --> 02:03:30,940
yeah I don't know so let's go back to

2097
02:03:29,890 --> 02:03:32,440
what we're doing before I just want to

2098
02:03:30,939 --> 02:03:34,509
check that and make sure nothing was

2099
02:03:32,439 --> 02:03:35,779
weird there so we'll pull out that

2100
02:03:34,510 --> 02:03:40,730
assertion

2101
02:03:35,779 --> 02:03:43,149
and this I'll go grab the global maximum

2102
02:03:40,729 --> 02:03:47,448
stacked up there we go

2103
02:03:43,149 --> 02:03:51,469
and now we can put these back in so

2104
02:03:47,448 --> 02:03:54,888
let's just take a look now at 1638 Bock

2105
02:03:51,469 --> 02:03:57,260
1638 in both cases so we can see why

2106
02:03:54,889 --> 02:03:59,599
like one thinks we should push and one

2107
02:03:57,260 --> 02:04:03,889
thinks we shouldn't push because I have

2108
02:03:59,599 --> 02:04:05,960
no idea why so we'll look at this case

2109
02:04:03,889 --> 02:04:09,288
first and we'll just like we'll just

2110
02:04:05,960 --> 02:04:11,960
dump like we'll just like manually

2111
02:04:09,288 --> 02:04:14,029
inspect the box and see if there's

2112
02:04:11,960 --> 02:04:15,368
anything weird about that box right so

2113
02:04:14,029 --> 02:04:19,788
here we go

2114
02:04:15,368 --> 02:04:23,380
unbox 1638 we can look here it's like

2115
02:04:19,788 --> 02:04:23,380
negative thirty seven negative nine zero

2116
02:04:23,920 --> 02:04:32,090
negative twenty eight zero six zero five

2117
02:04:27,109 --> 02:04:33,558
right I mean I don't know we could try

2118
02:04:32,090 --> 02:04:36,250
to copy these values I don't know if

2119
02:04:33,559 --> 02:04:40,460
there's any way to dump the watch window

2120
02:04:36,250 --> 02:04:42,590
I don't know if George is watching but a

2121
02:04:40,460 --> 02:04:46,010
way to like dump the watch window would

2122
02:04:42,590 --> 02:04:47,869
be pretty great like I know save watch

2123
02:04:46,010 --> 02:04:50,599
window to file or something like that I

2124
02:04:47,868 --> 02:04:53,868
don't you know I'm saying um so what I'd

2125
02:04:50,599 --> 02:04:55,309
like to do is say look we know that all

2126
02:04:53,868 --> 02:04:59,000
of this came out zero in our reference

2127
02:04:55,309 --> 02:05:03,288
case so we're not gonna push this thing

2128
02:04:59,000 --> 02:05:05,840
on the stack we know that the box looks

2129
02:05:03,288 --> 02:05:10,340
like this and so we should in theory

2130
02:05:05,840 --> 02:05:13,010
have exactly the same results right and

2131
02:05:10,340 --> 02:05:14,328
the pack well we don't care because that

2132
02:05:13,010 --> 02:05:17,210
doesn't even matter what the pack is

2133
02:05:14,328 --> 02:05:20,029
because we never push it so we just want

2134
02:05:17,210 --> 02:05:30,739
to know that these are the same and so

2135
02:05:20,029 --> 02:05:31,880
like that's not really what I want so I

2136
02:05:30,738 --> 02:05:34,729
really just want to know this stuff

2137
02:05:31,880 --> 02:05:37,578
right and I guess I could just put it in

2138
02:05:34,729 --> 02:05:45,149
a little like temp area somewhere like I

2139
02:05:37,578 --> 02:06:04,929
don't know like notepad plus plus right

2140
02:05:45,149 --> 02:06:06,670
here we go and then here's box max and

2141
02:06:04,929 --> 02:06:08,529
that's just so I can see if the boxes

2142
02:06:06,670 --> 02:06:10,420
look any different which hopefully they

2143
02:06:08,529 --> 02:06:13,059
wouldn't but you know what if they do

2144
02:06:10,420 --> 02:06:15,489
and then similarly I can also look to

2145
02:06:13,060 --> 02:06:20,230
see like the other only other thing is

2146
02:06:15,488 --> 02:06:24,279
like the Ray origin and stuff right

2147
02:06:20,229 --> 02:06:26,678
and the invar ad right like this stuff

2148
02:06:24,279 --> 02:06:29,259
and those should should not change at

2149
02:06:26,679 --> 02:06:31,119
all like those know if someone's like

2150
02:06:29,260 --> 02:06:45,670
mucking with those then we have a

2151
02:06:31,119 --> 02:06:48,369
problem right um so right so the Ray

2152
02:06:45,670 --> 02:06:49,690
origin should be duplicated because it's

2153
02:06:48,369 --> 02:06:55,029
multiple rays coming from out of the

2154
02:06:49,689 --> 02:06:58,269
same origin and then the raid erection

2155
02:06:55,029 --> 02:07:04,000
should be well you know so I mean it's I

2156
02:06:58,270 --> 02:07:05,830
guess we'll copy that in as well I don't

2157
02:07:04,000 --> 02:07:07,270
know I don't really think that's gonna

2158
02:07:05,829 --> 02:07:09,969
change but I suppose we should just

2159
02:07:07,270 --> 02:07:12,070
double-check it didn't I mean it

2160
02:07:09,969 --> 02:07:13,960
couldn't because if these two changed

2161
02:07:12,069 --> 02:07:16,750
then everything downstream would change

2162
02:07:13,960 --> 02:07:24,630
so I really don't know what's up so we

2163
02:07:16,750 --> 02:07:24,630
got the Box we've computed these

2164
02:07:28,600 --> 02:07:35,670
ah yes okay so I really don't need to go

2165
02:07:33,640 --> 02:07:40,000
any further I know what's going on here

2166
02:07:35,670 --> 02:07:42,220
so we will actually produce different

2167
02:07:40,000 --> 02:07:46,210
results and the reason that will produce

2168
02:07:42,220 --> 02:07:49,180
different results here is that the team

2169
02:07:46,210 --> 02:07:51,880
acts values well although you know what

2170
02:07:49,180 --> 02:07:54,820
I guess I'm not sure why we produce

2171
02:07:51,880 --> 02:07:58,810
different answers but what's happening

2172
02:07:54,819 --> 02:08:01,989
here is we aren't actually testing

2173
02:07:58,810 --> 02:08:05,140
things in the boxes as we visit them and

2174
02:08:01,989 --> 02:08:08,109
so the result is that we will test more

2175
02:08:05,140 --> 02:08:19,119
boxes because we push more leaves on to

2176
02:08:08,109 --> 02:08:20,769
the stack so I guess we really yeah so I

2177
02:08:19,119 --> 02:08:22,659
guess now that I drilled down to that

2178
02:08:20,770 --> 02:08:24,760
that does sort of answer my question

2179
02:08:22,659 --> 02:08:27,819
which is that it seems like you don't

2180
02:08:24,760 --> 02:08:30,730
want to stream this because as you go

2181
02:08:27,819 --> 02:08:36,009
down you want to test the things in the

2182
02:08:30,729 --> 02:08:38,679
closest box first always and if you hit

2183
02:08:36,010 --> 02:08:41,199
something there you don't want to test

2184
02:08:38,680 --> 02:08:44,380
the other side you don't ever want to go

2185
02:08:41,199 --> 02:08:45,760
down it alright so I think I don't

2186
02:08:44,380 --> 02:08:49,170
actually want to even drill down any

2187
02:08:45,760 --> 02:08:52,780
further then so that answers my question

2188
02:08:49,170 --> 02:08:56,890
streaming is not happening because we

2189
02:08:52,779 --> 02:09:01,899
need to actually early out right so that

2190
02:08:56,890 --> 02:09:04,480
is over goodbye you're gone so actually

2191
02:09:01,899 --> 02:09:06,909
what we want to focus on here is doing

2192
02:09:04,479 --> 02:09:11,319
this sidedness in the correct way too

2193
02:09:06,909 --> 02:09:12,909
early out so so I think that's really

2194
02:09:11,319 --> 02:09:15,179
what we want so what we want to do

2195
02:09:12,909 --> 02:09:17,979
tomorrow now I know what we're doing

2196
02:09:15,180 --> 02:09:19,420
since we're doing Katie tree probably so

2197
02:09:17,979 --> 02:09:21,219
we haven't really talked about not doing

2198
02:09:19,420 --> 02:09:23,260
that if we're gonna go forth Katie what

2199
02:09:21,220 --> 02:09:25,869
you want to do is test the nearside of

2200
02:09:23,260 --> 02:09:29,770
the Katie tree first if there's a hit

2201
02:09:25,869 --> 02:09:32,380
we just don't test the farside so that's

2202
02:09:29,770 --> 02:09:34,510
what we need to actually do right so we

2203
02:09:32,380 --> 02:09:36,579
need to keep those bounds right so we do

2204
02:09:34,510 --> 02:09:41,380
want to do depth-first we want to walk

2205
02:09:36,579 --> 02:09:41,909
down all the way down test the closest

2206
02:09:41,380 --> 02:09:43,529
things

2207
02:09:41,909 --> 02:09:44,939
and only start testing further things

2208
02:09:43,529 --> 02:09:47,329
out when they don't hit so that's we're

2209
02:09:44,939 --> 02:09:50,309
doing tomorrow that's what we're doing

2210
02:09:47,329 --> 02:09:54,659
I've declared it I've declared it that's

2211
02:09:50,310 --> 02:09:56,220
what we're doing okay so before I'm not

2212
02:09:54,659 --> 02:09:57,689
going to actually stop today

2213
02:09:56,220 --> 02:10:13,110
oops I got to get rid of those debug

2214
02:09:57,689 --> 02:10:16,019
breaks so before we stop today I want to

2215
02:10:13,109 --> 02:10:19,380
go create I want to go back out the

2216
02:10:16,020 --> 02:10:21,660
scratch buffer change since that doesn't

2217
02:10:19,380 --> 02:10:24,239
need to be there anymore because we're

2218
02:10:21,659 --> 02:10:27,180
not going to use it right so so that's

2219
02:10:24,239 --> 02:10:28,979
just gone so let's go ahead and test

2220
02:10:27,180 --> 02:10:30,270
this here's the debug mode I'm gonna I'm

2221
02:10:28,979 --> 02:10:33,359
gonna flip it to release mode in a

2222
02:10:30,270 --> 02:10:38,010
second here you know what let's just

2223
02:10:33,359 --> 02:10:47,009
stop that and I want to go into lighting

2224
02:10:38,010 --> 02:11:02,159
and just say like alright so let's just

2225
02:10:47,010 --> 02:11:03,600
get rid of this that's gone goodbye and

2226
02:11:02,159 --> 02:11:07,859
the internal lighting core this can now

2227
02:11:03,600 --> 02:11:13,200
do the work solution set again so this

2228
02:11:07,859 --> 02:11:17,789
doesn't have to happen and I think we're

2229
02:11:13,199 --> 02:11:20,359
good now all right so let's run the

2230
02:11:17,789 --> 02:11:20,359
lighting core

2231
02:11:23,460 --> 02:11:38,948
looks about right let's run the actual

2232
02:11:28,840 --> 02:11:41,110
version looks about right seems fine to

2233
02:11:38,948 --> 02:11:44,828
me let me just see what our profile

2234
02:11:41,109 --> 02:11:47,939
looks like so yeah I mean that looks

2235
02:11:44,828 --> 02:11:47,939
looks like what we would expect

2236
02:11:55,929 --> 02:12:04,260
yeah so that looks fine

2237
02:12:00,600 --> 02:12:04,260
I'm gonna do a brief QA

2238
02:12:37,789 --> 02:12:58,140
want to let you know we have a is memory

2239
02:12:40,350 --> 02:13:09,900
equal oh so we do where is it memory is

2240
02:12:58,140 --> 02:13:14,940
equal so we do have that hmm

2241
02:13:09,899 --> 02:13:21,869
so I just couldn't find it I guess when

2242
02:13:14,939 --> 02:13:23,819
I tried before so this doesn't have to

2243
02:13:21,869 --> 02:13:29,220
do that it could just do like memory is

2244
02:13:23,819 --> 02:13:35,670
equal right and you can just pass it to

2245
02:13:29,220 --> 02:13:38,760
buffers looks like I don't have exactly

2246
02:13:35,670 --> 02:13:43,289
what I want though because I need one

2247
02:13:38,760 --> 02:13:49,500
that takes the counts so I guess we'll

2248
02:13:43,289 --> 02:13:51,420
leave it like that for now off topic my

2249
02:13:49,500 --> 02:13:54,000
nose relays bla post oh thank you I

2250
02:13:51,420 --> 02:13:57,810
probably forgot to set it I manually

2251
02:13:54,000 --> 02:14:01,220
enter the date on those because um you

2252
02:13:57,810 --> 02:14:05,750
know it gets generated and then pushed

2253
02:14:01,220 --> 02:14:09,409
let me let me remind myself to fix that

2254
02:14:05,750 --> 02:14:09,409
I'll push a change today

2255
02:14:18,988 --> 02:14:22,138
all right

2256
02:14:44,449 --> 02:14:47,399
why is it this software companies

2257
02:14:46,470 --> 02:14:57,900
increasingly seem to not care about

2258
02:14:47,399 --> 02:15:01,049
performance so the reason is that I mean

2259
02:14:57,899 --> 02:15:03,000
there's the reason that it happened but

2260
02:15:01,050 --> 02:15:06,570
I don't know if that's really what you

2261
02:15:03,000 --> 02:15:11,189
want to know the reason is because they

2262
02:15:06,569 --> 02:15:12,989
can write so previously what would

2263
02:15:11,189 --> 02:15:15,719
happen is nobody would have used a piece

2264
02:15:12,989 --> 02:15:18,420
of software if it took so long to type

2265
02:15:15,720 --> 02:15:19,890
characters that like you know like if

2266
02:15:18,420 --> 02:15:21,690
you program software the way you program

2267
02:15:19,890 --> 02:15:24,090
it today and you know the Machine you

2268
02:15:21,689 --> 02:15:25,649
had was a Commodore 64 no one could use

2269
02:15:24,090 --> 02:15:27,480
that piece of software so no one it

2270
02:15:25,649 --> 02:15:30,420
wouldn't have existed that company

2271
02:15:27,479 --> 02:15:32,069
couldn't have sold software right but

2272
02:15:30,420 --> 02:15:35,159
you know more or less what happened

2273
02:15:32,069 --> 02:15:38,309
today in today's world is like users

2274
02:15:35,159 --> 02:15:40,729
don't really demand much performance

2275
02:15:38,310 --> 02:15:48,740
they demand only very passing

2276
02:15:40,729 --> 02:15:51,479
performance so that's the end of it if

2277
02:15:48,739 --> 02:15:53,760
your users don't demand good performance

2278
02:15:51,479 --> 02:15:56,849
then companies can keep selling bad

2279
02:15:53,760 --> 02:15:58,199
performance and so I don't really know

2280
02:15:56,850 --> 02:16:00,300
how to say it any other way than that

2281
02:15:58,199 --> 02:16:01,619
it's because companies can stay in

2282
02:16:00,300 --> 02:16:04,590
business who ship poor performing

2283
02:16:01,619 --> 02:16:09,269
software that's it if users stopped

2284
02:16:04,590 --> 02:16:16,730
accepting low performance then you would

2285
02:16:09,270 --> 02:16:16,730
get high performance right

2286
02:16:17,199 --> 02:16:22,119
you have to look at software as the

2287
02:16:19,479 --> 02:16:27,429
software you have is the software that

2288
02:16:22,119 --> 02:16:30,539
can exist right so companies just

2289
02:16:27,430 --> 02:16:32,860
generate software and unless you are

2290
02:16:30,539 --> 02:16:34,750
actively weeding out companies that

2291
02:16:32,860 --> 02:16:38,230
generate bad software you just have bad

2292
02:16:34,750 --> 02:16:40,930
software so at some level it's just like

2293
02:16:38,229 --> 02:16:43,239
look maybe someday people will start to

2294
02:16:40,930 --> 02:16:45,280
demand performance and maybe that

2295
02:16:43,239 --> 02:16:46,989
happens because some companies start

2296
02:16:45,280 --> 02:16:49,420
shipping high performance stuff and then

2297
02:16:46,989 --> 02:16:52,510
people gravitate towards that like oh

2298
02:16:49,420 --> 02:16:54,370
why would I wait you know 30 seconds for

2299
02:16:52,510 --> 02:16:55,780
my freaking Facebook page to load when I

2300
02:16:54,370 --> 02:16:59,440
can just use this other service that's

2301
02:16:55,780 --> 02:17:04,870
instant and then you get that service

2302
02:16:59,440 --> 02:17:07,290
right but until then you just won't it's

2303
02:17:04,870 --> 02:17:07,290
not going to happen

2304
02:17:20,520 --> 02:17:29,180
to the git repo for any of your code so

2305
02:17:24,500 --> 02:17:31,950
not really no I don't use git or github

2306
02:17:29,180 --> 02:17:35,040
the handmade hero source code is

2307
02:17:31,950 --> 02:17:43,170
available if you preorder the game so

2308
02:17:35,040 --> 02:17:44,760
like if you go to if you preorder the

2309
02:17:43,170 --> 02:17:48,059
game here it comes with the source code

2310
02:17:44,760 --> 02:17:50,280
that you can look at there is a github a

2311
02:17:48,059 --> 02:17:51,989
private github that you can get access

2312
02:17:50,280 --> 02:17:58,230
to if you've pre-ordered but it's

2313
02:17:51,989 --> 02:18:01,129
unsupported so like when you pre-order

2314
02:17:58,229 --> 02:18:03,779
the game it will give you this screen

2315
02:18:01,129 --> 02:18:06,809
which basically tells you you get

2316
02:18:03,780 --> 02:18:09,450
absolutely no support for the github so

2317
02:18:06,809 --> 02:18:11,609
the only thing I actually guarantee you

2318
02:18:09,450 --> 02:18:13,020
get is the downloadable source code

2319
02:18:11,610 --> 02:18:16,590
which is like it's just you just click

2320
02:18:13,020 --> 02:18:18,420
it's like zip file right but they're

2321
02:18:16,590 --> 02:18:20,370
technically is a github I just don't

2322
02:18:18,420 --> 02:18:24,270
support it people wanted it so it's

2323
02:18:20,370 --> 02:18:25,560
there it gets automatically updated so

2324
02:18:24,270 --> 02:18:31,170
the github for this source code is

2325
02:18:25,559 --> 02:18:32,789
actually there right but it's private

2326
02:18:31,170 --> 02:18:34,559
cuz this is not public domain software

2327
02:18:32,790 --> 02:18:36,830
right this is like a commercial thing

2328
02:18:34,559 --> 02:18:36,829
right

2329
02:19:03,888 --> 02:19:09,238
about my question before the stream

2330
02:19:06,209 --> 02:19:12,268
started I am looking for a doubly linked

2331
02:19:09,238 --> 02:19:14,760
list structure and usually that's done

2332
02:19:12,269 --> 02:19:17,699
through a structure with the first and

2333
02:19:14,760 --> 02:19:21,210
last entry pointers and those have a

2334
02:19:17,699 --> 02:19:23,819
structure with a next pre Vande value

2335
02:19:21,209 --> 02:19:26,339
pointers let's call this entry structure

2336
02:19:23,818 --> 02:19:28,978
in order to add an item to the end of

2337
02:19:26,340 --> 02:19:30,929
the list you need to create a new entry

2338
02:19:28,978 --> 02:19:33,658
structure set the pre-fire to the

2339
02:19:30,929 --> 02:19:38,068
previous last entry and update the last

2340
02:19:33,658 --> 02:19:42,449
entry structure in order to have the

2341
02:19:38,068 --> 02:19:44,189
next point to the new last item is there

2342
02:19:42,449 --> 02:19:46,949
any other service that does without this

2343
02:19:44,189 --> 02:19:48,689
prerequisite again I just I'm sorry if

2344
02:19:46,949 --> 02:19:50,939
I'm misunderstanding you but I have no

2345
02:19:48,689 --> 02:19:52,829
idea what you're asking a doubly-linked

2346
02:19:50,939 --> 02:19:56,460
list is just a link tiss that has next

2347
02:19:52,829 --> 02:19:58,590
in previous pointers III don't know what

2348
02:19:56,459 --> 02:20:00,509
you mean by prerequisite obviously you

2349
02:19:58,590 --> 02:20:02,609
have to update the next and previous

2350
02:20:00,510 --> 02:20:04,770
pointers when you insert something

2351
02:20:02,609 --> 02:20:08,430
because they have to point to the new

2352
02:20:04,770 --> 02:20:13,170
thing so what is it that you're trying

2353
02:20:08,430 --> 02:20:16,920
to avoid if I insert an item so if I

2354
02:20:13,170 --> 02:20:19,529
insert item B after item a I have to go

2355
02:20:16,920 --> 02:20:22,799
change is previous pointer to point to B

2356
02:20:19,529 --> 02:20:24,510
and furthermore assuming that you know

2357
02:20:22,799 --> 02:20:27,778
you're keeping a doubly linked list then

2358
02:20:24,510 --> 02:20:30,719
if you have a and C that are in the list

2359
02:20:27,779 --> 02:20:32,640
and I insert B between them a zest

2360
02:20:30,719 --> 02:20:36,079
pointer has to point to B and C's

2361
02:20:32,639 --> 02:20:38,608
previous pointer has to point to B so

2362
02:20:36,079 --> 02:20:40,529
you have to update those two pointers

2363
02:20:38,609 --> 02:20:43,318
and I'm not sure what you're asking for

2364
02:20:40,529 --> 02:20:45,569
like how could you not update them your

2365
02:20:43,318 --> 02:20:47,250
you would not have a properly linked

2366
02:20:45,568 --> 02:20:51,738
list if you didn't update those two

2367
02:20:47,250 --> 02:20:51,738
pointers on insertion right

2368
02:21:01,399 --> 02:21:05,639
are there any scalability usability

2369
02:21:03,780 --> 02:21:09,620
issues when using enums versus something

2370
02:21:05,639 --> 02:21:09,619
like a hash table for indexing assets

2371
02:21:10,489 --> 02:21:20,729
well enums are more scalable than hash

2372
02:21:17,850 --> 02:21:24,329
tables so do you mean just usability

2373
02:21:20,729 --> 02:21:26,729
like like enums would be compact and

2374
02:21:24,329 --> 02:21:28,440
perfect so they scale perfectly whereas

2375
02:21:26,729 --> 02:21:29,850
a hash table actually cost you something

2376
02:21:28,440 --> 02:21:31,640
it cost you the amount of time it takes

2377
02:21:29,850 --> 02:21:34,260
to hash something right

2378
02:21:31,639 --> 02:21:36,750
so enumerate in your assets with a

2379
02:21:34,260 --> 02:21:39,510
globally unique set of indices is like

2380
02:21:36,750 --> 02:21:43,469
the fastest possible thing usability

2381
02:21:39,510 --> 02:21:45,780
wise yeah there are some issues which is

2382
02:21:43,469 --> 02:21:47,789
to say that you have to have a way of

2383
02:21:45,780 --> 02:21:49,710
allocating those enums and you don't

2384
02:21:47,790 --> 02:21:52,860
want to leave like gaps in the enums

2385
02:21:49,709 --> 02:21:56,119
otherwise you waste memory in the table

2386
02:21:52,860 --> 02:22:01,771
so you do have a usability issue there

2387
02:21:56,120 --> 02:22:04,021
ok I want to say that the witness is

2388
02:22:01,771 --> 02:22:05,880
John here I don't think naysayers here

2389
02:22:04,021 --> 02:22:08,040
but if John's here you can answer this

2390
02:22:05,879 --> 02:22:09,689
question I don't really I I didn't look

2391
02:22:08,040 --> 02:22:12,870
particularly hard at how the witness did

2392
02:22:09,690 --> 02:22:16,710
their enum allocation by wanna almost

2393
02:22:12,870 --> 02:22:19,440
say the witness didn't even compact its

2394
02:22:16,709 --> 02:22:22,199
enum list before shipping like it was

2395
02:22:19,440 --> 02:22:24,690
something John was going to do and then

2396
02:22:22,200 --> 02:22:27,090
didn't even have to do cuz it just

2397
02:22:24,690 --> 02:22:38,399
didn't matter it was just wasted some

2398
02:22:27,090 --> 02:22:40,530
memory but no one cared right so so yeah

2399
02:22:38,399 --> 02:22:42,149
but he would be a better person you know

2400
02:22:40,530 --> 02:22:43,650
well if he's streaming right now we're

2401
02:22:42,149 --> 02:22:46,440
just gonna go raid him after this anyway

2402
02:22:43,649 --> 02:22:48,899
so you should ask John that question

2403
02:22:46,440 --> 02:22:51,630
because he actually ships games on the

2404
02:22:48,899 --> 02:22:54,029
enum method not the hash table method so

2405
02:22:51,629 --> 02:22:56,879
he can probably tell you exactly what

2406
02:22:54,030 --> 02:22:59,659
you want to know from experience rather

2407
02:22:56,879 --> 02:22:59,659
than hypothesis

2408
02:23:09,450 --> 02:23:13,511
do you know if some sane way of learning

2409
02:23:11,739 --> 02:23:14,829
a bit of dx11 other than trial and error

2410
02:23:13,511 --> 02:23:16,690
while discovering information I

2411
02:23:14,829 --> 02:23:20,289
understand there's got to be a dx11

2412
02:23:16,690 --> 02:23:21,460
tutorial somewhere how would you

2413
02:23:20,290 --> 02:23:22,570
recommend writing assembly directly for

2414
02:23:21,459 --> 02:23:24,970
a function to the compiler refuses to

2415
02:23:22,569 --> 02:23:26,860
optimize it the way you want usually

2416
02:23:24,970 --> 02:23:29,250
what you have to do is one of two things

2417
02:23:26,860 --> 02:23:32,641
either you just have to make a NASM file

2418
02:23:29,250 --> 02:23:37,329
so you just write the function in NASM

2419
02:23:32,640 --> 02:23:38,800
or you just fuss with the c and try to

2420
02:23:37,329 --> 02:23:40,841
get the compiler to eventually do the

2421
02:23:38,800 --> 02:23:44,020
azzam you want which sometimes works

2422
02:23:40,841 --> 02:23:46,989
often it works if you happen to be using

2423
02:23:44,021 --> 02:23:50,351
compiler that isn't Visual Studio so if

2424
02:23:46,989 --> 02:23:52,449
you're using clang or GCC those

2425
02:23:50,351 --> 02:23:55,150
compilers actually have some inline

2426
02:23:52,450 --> 02:23:57,070
assembler facilities so you may be able

2427
02:23:55,149 --> 02:23:58,841
to just put some inline assembler in

2428
02:23:57,069 --> 02:24:00,130
there and that can help tremendously but

2429
02:23:58,841 --> 02:24:02,829
Visual Studio doesn't support that

2430
02:24:00,130 --> 02:24:05,170
because you know you've seen how fast

2431
02:24:02,829 --> 02:24:07,351
Visual Studio runs are you surprised

2432
02:24:05,170 --> 02:24:09,220
that they don't allow inline assembly I

2433
02:24:07,351 --> 02:24:10,271
imagine the people working a buddy list

2434
02:24:09,220 --> 02:24:17,709
of you don't even know

2435
02:24:10,271 --> 02:24:19,239
assembly at this point how important is

2436
02:24:17,709 --> 02:24:20,619
it in game development and in general to

2437
02:24:19,239 --> 02:24:22,209
be concerned with microarchitecture

2438
02:24:20,620 --> 02:24:24,120
level optimizations and using metrics

2439
02:24:22,209 --> 02:24:30,250
from seed before it's just critical I

2440
02:24:24,120 --> 02:24:31,990
would say I would say that basically if

2441
02:24:30,250 --> 02:24:33,640
you don't understand microarchitecture

2442
02:24:31,989 --> 02:24:37,390
you probably shouldn't be an engine

2443
02:24:33,640 --> 02:24:39,970
programmer at some level maybe if you're

2444
02:24:37,390 --> 02:24:43,289
just on an architecture side I mean just

2445
02:24:39,970 --> 02:24:43,289
period you should just know that stuff

2446
02:24:50,610 --> 02:24:59,040
how many lines of code are there in the

2447
02:24:52,799 --> 02:25:01,979
HH project like 50,000 or something it's

2448
02:24:59,040 --> 02:25:09,450
like less than 50,000 I think sorry not

2449
02:25:01,979 --> 02:25:13,819
even 15,000 maybe Adam don't we have

2450
02:25:09,450 --> 02:25:13,820
clock on here somewhere

2451
02:25:26,959 --> 02:25:35,919
so 34,000 total lines and that counts

2452
02:25:31,728 --> 02:25:38,840
everything I think so

2453
02:25:35,920 --> 02:25:40,809
including like the rake at not the

2454
02:25:38,840 --> 02:25:43,069
nothing ray Kassar including like the

2455
02:25:40,809 --> 02:25:48,649
art asset processing like whatever

2456
02:25:43,069 --> 02:25:50,239
everything involved if you do another

2457
02:25:48,649 --> 02:25:51,319
programming discussion with John do you

2458
02:25:50,239 --> 02:25:56,750
think it would be valuable to do

2459
02:25:51,319 --> 02:26:01,430
discussion about entity systems I mean

2460
02:25:56,750 --> 02:26:03,770
no like John is set a million times

2461
02:26:01,430 --> 02:26:04,819
entity systems are stupid like it's a

2462
02:26:03,770 --> 02:26:06,739
waste of everyone's time

2463
02:26:04,819 --> 02:26:12,879
and I don't know why people harp on them

2464
02:26:06,739 --> 02:26:12,879
right they're just it's not a thing

2465
02:26:14,139 --> 02:26:19,909
vs 19 is support for x86 but not excess

2466
02:26:17,389 --> 02:26:25,819
for assembly why is it one bit on the

2467
02:26:19,909 --> 02:26:27,200
other oh um so I don't actually know the

2468
02:26:25,819 --> 02:26:28,279
internal reasons reason I know you're

2469
02:26:27,200 --> 02:26:30,800
asking let me summarize this people

2470
02:26:28,280 --> 02:26:33,710
don't know so Visual Studio doesn't

2471
02:26:30,799 --> 02:26:36,529
support inline assembly but it used to

2472
02:26:33,709 --> 02:26:38,089
so it uses of writing line assembly and

2473
02:26:36,530 --> 02:26:40,040
why does it not anymore

2474
02:26:38,090 --> 02:26:43,100
well the answer is because when they

2475
02:26:40,040 --> 02:26:45,590
went from x86 the x86 compiler to the

2476
02:26:43,100 --> 02:26:47,690
x64 compiler that's where they lost the

2477
02:26:45,590 --> 02:26:50,090
support so if you switch back to the

2478
02:26:47,690 --> 02:26:52,100
32-bit compiler you can actually have

2479
02:26:50,090 --> 02:26:55,549
inline assembly back but when you're

2480
02:26:52,100 --> 02:26:58,520
doing in on modern 64-bit build you

2481
02:26:55,549 --> 02:27:00,289
can't do it I don't know why I think

2482
02:26:58,520 --> 02:27:01,370
it's because they didn't want to do the

2483
02:27:00,290 --> 02:27:05,090
work I think it's just pure laziness

2484
02:27:01,370 --> 02:27:07,700
they didn't want to have the code paths

2485
02:27:05,090 --> 02:27:09,228
necessary to ensure that user assembly

2486
02:27:07,700 --> 02:27:17,840
could be inserted into the back end and

2487
02:27:09,228 --> 02:27:19,969
work so derp I meant like what you guys

2488
02:27:17,840 --> 02:27:23,389
sitter is a good approach yeah the the

2489
02:27:19,969 --> 02:27:27,590
point is if you're thinking about entity

2490
02:27:23,389 --> 02:27:31,369
code as a system then you should stop

2491
02:27:27,590 --> 02:27:33,680
doing that that part of the code is the

2492
02:27:31,370 --> 02:27:36,590
structure of your game it should not be

2493
02:27:33,680 --> 02:27:38,590
systematized it depends on the game and

2494
02:27:36,590 --> 02:27:40,960
it should be like

2495
02:27:38,590 --> 02:27:43,270
written in the way that makes the most

2496
02:27:40,959 --> 02:27:45,669
sense for you to express the behavior of

2497
02:27:43,270 --> 02:27:48,159
the game which is not which is

2498
02:27:45,670 --> 02:27:51,420
inherently not systematize Abul unless

2499
02:27:48,159 --> 02:27:51,420
your game is very generic

2500
02:28:02,209 --> 02:28:08,528
alright looks like that's it for cues

2501
02:28:04,329 --> 02:28:11,359
did we ever hear back from Mario Manzano

2502
02:28:08,529 --> 02:28:12,920
about the doubly linked list because I

2503
02:28:11,359 --> 02:28:17,930
still don't feel like I actually

2504
02:28:12,920 --> 02:28:22,449
understand the question but I don't know

2505
02:28:17,930 --> 02:28:26,659
if maybe that's just because I am

2506
02:28:22,449 --> 02:28:30,050
thinking he's asking or I guess I don't

2507
02:28:26,659 --> 02:28:36,100
know if it's Mahdi as is male or female

2508
02:28:30,049 --> 02:28:36,099
but they are asking a question about

2509
02:28:37,659 --> 02:28:42,289
about like updating pointers in a doubly

2510
02:28:40,370 --> 02:28:45,920
linked list or whether they're asking

2511
02:28:42,290 --> 02:28:47,270
about some other thing and he's just

2512
02:28:45,920 --> 02:28:50,090
mentioning the pointers or whatever I

2513
02:28:47,270 --> 02:28:51,620
don't quite understand and so I just

2514
02:28:50,090 --> 02:28:53,449
want to make sure is there an actual

2515
02:28:51,620 --> 02:28:57,079
thought to that question that clarifies

2516
02:28:53,449 --> 02:28:58,909
it at all or what cuz I still that when

2517
02:28:57,079 --> 02:29:07,760
I did not answer but it's because I

2518
02:28:58,909 --> 02:29:12,789
don't understand it so I don't know if

2519
02:29:07,760 --> 02:29:12,790
we could get a clarification in there

2520
02:29:27,489 --> 02:29:35,138
[Music]

2521
02:29:58,700 --> 02:30:02,659
oh I think you're saying you think they

2522
02:30:01,670 --> 02:30:04,159
wanted to know if there something that

2523
02:30:02,659 --> 02:30:08,119
acts like a doubly-linked list that

2524
02:30:04,159 --> 02:30:11,439
isn't actually a doubly-linked list so

2525
02:30:08,120 --> 02:30:11,439
just like something that's easy to

2526
02:30:12,610 --> 02:30:18,579
remove things from I guess

2527
02:30:41,370 --> 02:30:47,110
all right well I'm gonna wrap it up they

2528
02:30:44,319 --> 02:30:52,750
can get back to me with a more specific

2529
02:30:47,110 --> 02:30:54,700
question if they have one later but all

2530
02:30:52,750 --> 02:30:55,931
right thank you everyone for joining me

2531
02:30:54,700 --> 02:30:57,040
for another episode of hand made here

2532
02:30:55,931 --> 02:30:59,471
it's been a pleasure coding with you as

2533
02:30:57,040 --> 02:31:00,790
always if you want to follow along with

2534
02:30:59,470 --> 02:31:02,739
the series at home you can always

2535
02:31:00,790 --> 02:31:05,080
pre-order the game on hand made here org

2536
02:31:02,739 --> 02:31:08,171
it comes with a source code so that you

2537
02:31:05,079 --> 02:31:09,431
can follow along with it we also have a

2538
02:31:08,171 --> 02:31:11,829
Kickstarter going right now for our

2539
02:31:09,431 --> 02:31:15,069
comic be sure to check that out if you

2540
02:31:11,829 --> 02:31:16,959
like comics it's pretty easy to find the

2541
02:31:15,069 --> 02:31:19,239
banner should be on our pages at the top

2542
02:31:16,959 --> 02:31:21,579
you must click through there and it is

2543
02:31:19,239 --> 02:31:25,209
here it is funded too so if you back it

2544
02:31:21,579 --> 02:31:30,130
you will be getting a comic from Anna

2545
02:31:25,209 --> 02:31:33,699
and I when the Kickstarter closes we

2546
02:31:30,130 --> 02:31:36,430
will be be sending it off to the

2547
02:31:33,700 --> 02:31:38,561
printers so that's about it for today

2548
02:31:36,431 --> 02:31:40,210
I'll be back here tomorrow when now that

2549
02:31:38,560 --> 02:31:42,640
I'm pretty sure I know what's going on

2550
02:31:40,209 --> 02:31:45,430
in our loop in terms of what I want it

2551
02:31:42,640 --> 02:31:47,709
to do we can go ahead and do that I'm

2552
02:31:45,431 --> 02:31:49,120
gonna go rage on stream now I don't know

2553
02:31:47,709 --> 02:31:50,859
what he's doing over there but we're

2554
02:31:49,120 --> 02:31:51,940
gonna go find out so for those of you

2555
02:31:50,860 --> 02:31:54,460
want to stay tuned

2556
02:31:51,940 --> 02:31:58,271
I will not actually end the stream I

2557
02:31:54,459 --> 02:32:09,630
will go raid now so see folks tomorrow

2558
02:31:58,271 --> 02:32:13,210
and let's go rage on wait what the heck

2559
02:32:09,630 --> 02:32:16,409
I'm not seeing I'm not seeing anything

2560
02:32:13,209 --> 02:32:16,409
on here though

