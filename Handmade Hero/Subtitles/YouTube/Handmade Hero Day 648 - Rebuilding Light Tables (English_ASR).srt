1
00:00:01,520 --> 00:00:08,160
hello everybody and welcome to handmade

2
00:00:03,759 --> 00:00:08,160
hero today we have um

3
00:00:08,558 --> 00:00:14,638
kind of just an assignment from our past

4
00:00:10,880 --> 00:00:17,600
self uh we have to figure out some good

5
00:00:14,638 --> 00:00:19,278
way to rebuild our

6
00:00:17,600 --> 00:00:20,960
uh sampling

7
00:00:19,278 --> 00:00:23,920
tables our sampling tables for lighting

8
00:00:20,960 --> 00:00:26,560
we found were actually broken um they

9
00:00:23,920 --> 00:00:29,359
had been broken for a while it seems so

10
00:00:26,559 --> 00:00:33,199
that was an issue

11
00:00:29,359 --> 00:00:35,120
but they are especially showing uh

12
00:00:33,200 --> 00:00:37,440
they're especially causing a problem now

13
00:00:35,119 --> 00:00:38,718
because we're trying to debug uh the

14
00:00:37,439 --> 00:00:39,919
simplification to the lighting that we

15
00:00:38,719 --> 00:00:44,480
did

16
00:00:39,920 --> 00:00:47,520
and in so trying we discovered that

17
00:00:44,479 --> 00:00:49,359
like the rays we're casting are totally

18
00:00:47,520 --> 00:00:50,480
not distributed the way that we thought

19
00:00:49,359 --> 00:00:52,159
they were

20
00:00:50,479 --> 00:00:55,119
so uh what we're trying to do at the

21
00:00:52,159 --> 00:00:56,640
moment is oops this is actually debug

22
00:00:55,119 --> 00:00:58,878
builds which i didn't actually mean to

23
00:00:56,640 --> 00:00:58,878
do

24
00:00:59,840 --> 00:01:04,000
let me go ahead and do a release build

25
00:01:01,679 --> 00:01:04,000
there

26
00:01:06,478 --> 00:01:09,478
so

27
00:01:14,478 --> 00:01:19,200
there we go

28
00:01:15,920 --> 00:01:21,680
um so if we run uh our lighting as it is

29
00:01:19,200 --> 00:01:25,200
currently it actually is it's pretty

30
00:01:21,680 --> 00:01:27,040
good uh we're we're not really um

31
00:01:25,200 --> 00:01:29,200
we're we're in a very good state the

32
00:01:27,040 --> 00:01:31,360
problem is there's this weird like sort

33
00:01:29,200 --> 00:01:33,600
of color bleed that happens

34
00:01:31,359 --> 00:01:35,040
and so we think we have some problems

35
00:01:33,599 --> 00:01:36,158
with just like maybe the apron and stuff

36
00:01:35,040 --> 00:01:37,759
you can see when it starts up it

37
00:01:36,159 --> 00:01:39,520
actually looks quite nice

38
00:01:37,759 --> 00:01:41,840
um so we're pretty close i don't think

39
00:01:39,519 --> 00:01:43,519
we're like super far from

40
00:01:41,840 --> 00:01:45,040
uh having it work but you can see that

41
00:01:43,519 --> 00:01:46,879
we've got sort of this weird like color

42
00:01:45,040 --> 00:01:48,479
bleed problem usually those feedback

43
00:01:46,879 --> 00:01:50,239
problems are from like we're sampling

44
00:01:48,478 --> 00:01:52,319
off of the apron or something is like

45
00:01:50,239 --> 00:01:53,359
over getting over added or weird things

46
00:01:52,319 --> 00:01:55,359
like that

47
00:01:53,359 --> 00:01:56,879
um and so we need to debug that and as

48
00:01:55,359 --> 00:01:59,359
we were debugging it we realized that

49
00:01:56,879 --> 00:02:01,679
like as we looked at the raycasts the

50
00:01:59,359 --> 00:02:03,118
ray choices of rays

51
00:02:01,680 --> 00:02:04,799
there were like all of these rays

52
00:02:03,118 --> 00:02:07,118
pointing straight down

53
00:02:04,799 --> 00:02:08,879
right um

54
00:02:07,118 --> 00:02:09,919
and it turns out that our our sampling

55
00:02:08,878 --> 00:02:12,560
table

56
00:02:09,919 --> 00:02:15,199
um if you go and look at it is just not

57
00:02:12,560 --> 00:02:16,080
correct like there actually is

58
00:02:15,199 --> 00:02:16,878
um

59
00:02:16,080 --> 00:02:20,000
a

60
00:02:16,878 --> 00:02:22,479
uh a situation where like every so often

61
00:02:20,000 --> 00:02:23,680
like you see that zero zero

62
00:02:22,479 --> 00:02:26,799
uh one

63
00:02:23,680 --> 00:02:29,280
zero zero one zero zero like

64
00:02:26,800 --> 00:02:32,560
there we should never sample sample the

65
00:02:29,280 --> 00:02:35,199
same ray twice right i mean we never

66
00:02:32,560 --> 00:02:38,479
want to do that um and yet here we are

67
00:02:35,199 --> 00:02:41,039
doing that a ton of times right

68
00:02:38,479 --> 00:02:42,479
and so we clearly have a bad

69
00:02:41,039 --> 00:02:45,120
distribution that we're that we're

70
00:02:42,479 --> 00:02:47,840
putting in here that's not good uh and

71
00:02:45,120 --> 00:02:50,159
we really want to be able to fix that

72
00:02:47,840 --> 00:02:51,519
but while we're doing it uh we also

73
00:02:50,159 --> 00:02:54,560
probably just want to rebuild these

74
00:02:51,519 --> 00:02:58,560
sampling tables to be a little bit more

75
00:02:54,560 --> 00:02:58,560
uh sensible anyway right

76
00:03:00,639 --> 00:03:04,639
because now we know

77
00:03:02,959 --> 00:03:07,439
that we're actually just sampling the

78
00:03:04,639 --> 00:03:09,359
whole sphere every time like before we

79
00:03:07,439 --> 00:03:10,959
were doing sort of an overtime sampling

80
00:03:09,360 --> 00:03:12,720
because we were trying to sample a lot

81
00:03:10,959 --> 00:03:14,800
more probes

82
00:03:12,719 --> 00:03:16,318
now we just don't have that problem

83
00:03:14,800 --> 00:03:18,400
uh because we've got a lot more

84
00:03:16,318 --> 00:03:20,719
horsepower since we've reduced

85
00:03:18,400 --> 00:03:21,840
we're not using z anymore

86
00:03:20,719 --> 00:03:23,359
um

87
00:03:21,840 --> 00:03:24,878
z stacks

88
00:03:23,360 --> 00:03:27,519
so there's just a lot fewer probes we

89
00:03:24,878 --> 00:03:30,000
can cast a lot more rays and so and we

90
00:03:27,519 --> 00:03:33,039
also optimized the raycasting to be very

91
00:03:30,000 --> 00:03:35,039
fast so it doesn't take very much time

92
00:03:33,039 --> 00:03:36,639
to do the samples anyway

93
00:03:35,039 --> 00:03:38,798
so we probably want to do something

94
00:03:36,639 --> 00:03:40,958
where we just like create a sample

95
00:03:38,799 --> 00:03:42,959
sphere that's pretty reasonable with

96
00:03:40,959 --> 00:03:45,759
respect to um

97
00:03:42,959 --> 00:03:48,319
you know just chunks where we have

98
00:03:45,759 --> 00:03:50,239
16 rays or so going out of one face and

99
00:03:48,318 --> 00:03:52,399
16 rays going out of another face 16

100
00:03:50,239 --> 00:03:53,280
rays going out of another face

101
00:03:52,400 --> 00:03:55,519
um

102
00:03:53,280 --> 00:03:58,400
we kind of want these like i do think we

103
00:03:55,519 --> 00:03:59,920
want these to be a blue noise pattern

104
00:03:58,400 --> 00:04:02,959
blue noise sampling is always better

105
00:03:59,919 --> 00:04:04,798
than white noise uh for you know because

106
00:04:02,959 --> 00:04:08,080
uh white noise is

107
00:04:04,799 --> 00:04:10,080
very uh is is going to over sample some

108
00:04:08,080 --> 00:04:12,000
areas and undersample others whereas

109
00:04:10,080 --> 00:04:13,360
blue noise is always like fairly

110
00:04:12,000 --> 00:04:16,639
distributed

111
00:04:13,360 --> 00:04:21,199
the problem is how do we generate a blue

112
00:04:16,639 --> 00:04:22,319
noise sample that has exactly 16

113
00:04:21,199 --> 00:04:23,960
points

114
00:04:22,319 --> 00:04:26,240
in the

115
00:04:23,959 --> 00:04:29,439
[Music]

116
00:04:26,240 --> 00:04:31,600
in the region of the face

117
00:04:29,439 --> 00:04:33,279
the the octahedral face that we're

118
00:04:31,600 --> 00:04:34,879
sampling from

119
00:04:33,279 --> 00:04:35,839
and

120
00:04:34,879 --> 00:04:40,680
you know

121
00:04:35,839 --> 00:04:40,679
that's a that's a tougher question

122
00:04:43,279 --> 00:04:48,319
i can think of sort of ways we might do

123
00:04:46,000 --> 00:04:49,600
it like for example if you were to make

124
00:04:48,319 --> 00:04:53,199
a dense

125
00:04:49,600 --> 00:04:57,600
blue noise pattern on a sphere

126
00:04:53,199 --> 00:04:59,840
and then you just like scale that up

127
00:04:57,600 --> 00:05:01,280
over like you just searched for a scale

128
00:04:59,839 --> 00:05:03,359
factor

129
00:05:01,279 --> 00:05:06,478
where it as you scaled it up you would

130
00:05:03,360 --> 00:05:08,639
get uh only a certain number like you

131
00:05:06,478 --> 00:05:10,319
basically like restrict the size

132
00:05:08,639 --> 00:05:11,918
of the stuff on the sphere until you get

133
00:05:10,319 --> 00:05:13,439
ones that are yeah but even that's not

134
00:05:11,918 --> 00:05:14,959
going to be the same as for distance

135
00:05:13,439 --> 00:05:17,918
it's a tough problem like i don't know

136
00:05:14,959 --> 00:05:17,918
exactly how you do it

137
00:05:22,160 --> 00:05:25,520
like i don't know how you do a blue

138
00:05:23,839 --> 00:05:27,758
noise pattern where you basically say

139
00:05:25,519 --> 00:05:29,359
look we're going to divide the sphere

140
00:05:27,759 --> 00:05:32,080
into eight

141
00:05:29,360 --> 00:05:33,280
uh you know octants and we want each

142
00:05:32,079 --> 00:05:35,839
octant

143
00:05:33,279 --> 00:05:39,359
to have 16 evenly distributed sample

144
00:05:35,839 --> 00:05:41,599
points that are like you know

145
00:05:39,360 --> 00:05:43,520
uh

146
00:05:41,600 --> 00:05:46,160
sort of like equally

147
00:05:43,519 --> 00:05:50,839
you know spaced out or whatever

148
00:05:46,160 --> 00:05:50,840
i don't know how you do that um

149
00:05:59,680 --> 00:06:03,759
i would also

150
00:06:01,038 --> 00:06:06,639
ask is it just per pixel should we just

151
00:06:03,759 --> 00:06:08,720
do it per pixel because this is another

152
00:06:06,639 --> 00:06:09,918
problem so let's think about this real

153
00:06:08,720 --> 00:06:10,720
quick

154
00:06:09,918 --> 00:06:14,719
um

155
00:06:10,720 --> 00:06:16,639
so if we were to look at the the map dim

156
00:06:14,720 --> 00:06:17,680
right the octahedral map is eight by

157
00:06:16,639 --> 00:06:21,038
eight

158
00:06:17,680 --> 00:06:23,360
so there's there's 64

159
00:06:21,038 --> 00:06:23,360
um

160
00:06:25,038 --> 00:06:30,800
there's 64 like taxels that we're

161
00:06:28,319 --> 00:06:30,800
filling

162
00:06:31,038 --> 00:06:35,839
right

163
00:06:32,399 --> 00:06:35,839
um and

164
00:06:37,839 --> 00:06:43,198
let me run speed crunch oops

165
00:06:40,959 --> 00:06:46,478
let me run speed crunch here

166
00:06:43,199 --> 00:06:51,759
if there's 64 texels we're filling

167
00:06:46,478 --> 00:06:55,519
um and we are actually for each one of

168
00:06:51,759 --> 00:06:57,919
those texels yeah so there would be 16

169
00:06:55,519 --> 00:07:00,639
samples per texel

170
00:06:57,918 --> 00:07:00,639
is that correct

171
00:07:00,720 --> 00:07:07,199
because we write out a row at a time

172
00:07:04,240 --> 00:07:09,360
um so there's eight

173
00:07:07,199 --> 00:07:13,759
yeah so i think that's what we would be

174
00:07:09,360 --> 00:07:13,759
doing it's 16 samples per textile right

175
00:07:14,160 --> 00:07:18,479
so i think what we actually probably

176
00:07:15,759 --> 00:07:21,680
want to do is just generate

177
00:07:18,478 --> 00:07:23,360
samples in the texel

178
00:07:21,680 --> 00:07:25,680
probably

179
00:07:23,360 --> 00:07:25,680
um

180
00:07:25,918 --> 00:07:30,079
and best tardis we don't have

181
00:07:28,000 --> 00:07:33,519
any temporal

182
00:07:30,079 --> 00:07:35,519
uh variance anymore i mean we could add

183
00:07:33,519 --> 00:07:38,318
some more in but at the moment we are

184
00:07:35,519 --> 00:07:40,318
just sampling a fixed set of rays and i

185
00:07:38,319 --> 00:07:41,840
know there's like issues with that but

186
00:07:40,319 --> 00:07:43,199
the idea is to be dense enough that we

187
00:07:41,839 --> 00:07:45,519
don't care because it seemed like we

188
00:07:43,199 --> 00:07:46,800
were we will be able to do that

189
00:07:45,519 --> 00:07:48,560
um

190
00:07:46,800 --> 00:07:50,079
possibly

191
00:07:48,560 --> 00:07:50,879
um

192
00:07:50,079 --> 00:07:53,199
so

193
00:07:50,879 --> 00:07:55,919
yeah like

194
00:07:53,199 --> 00:07:59,840
maybe the right answer is we generate

195
00:07:55,918 --> 00:08:00,799
blue noise a blue noise tile

196
00:07:59,839 --> 00:08:02,318
for

197
00:08:00,800 --> 00:08:05,199
the texel

198
00:08:02,319 --> 00:08:08,160
and then we just compute the directions

199
00:08:05,199 --> 00:08:08,160
out of the texel

200
00:08:08,879 --> 00:08:13,599
so because it's not that hard to make

201
00:08:11,598 --> 00:08:16,159
blue noise where we

202
00:08:13,598 --> 00:08:17,680
uh generate 16

203
00:08:16,160 --> 00:08:19,199
points in a

204
00:08:17,680 --> 00:08:21,519
in a square

205
00:08:19,199 --> 00:08:23,120
it it is and in fact we could even use

206
00:08:21,519 --> 00:08:24,240
sort of something that's not quite blue

207
00:08:23,120 --> 00:08:27,120
noise like something that's like

208
00:08:24,240 --> 00:08:28,240
pseudoblue noise sampling pattern that's

209
00:08:27,120 --> 00:08:30,478
you know because we don't need it to be

210
00:08:28,240 --> 00:08:31,759
exactly blue noise it could be

211
00:08:30,478 --> 00:08:33,278
sort of like

212
00:08:31,759 --> 00:08:36,560
blue noise

213
00:08:33,278 --> 00:08:36,559
light like um

214
00:08:37,200 --> 00:08:39,360
you know what i mean

215
00:08:38,559 --> 00:08:41,518
uh

216
00:08:39,360 --> 00:08:43,440
so we could do something like that

217
00:08:41,519 --> 00:08:44,959
we could do something like that

218
00:08:43,440 --> 00:08:46,880
um i'm just trying to think of what's

219
00:08:44,958 --> 00:08:48,000
the most straightforward way to do it

220
00:08:46,879 --> 00:08:50,240
uh

221
00:08:48,000 --> 00:08:50,240
like

222
00:08:51,600 --> 00:08:55,600
the other thing is i guess we could just

223
00:08:53,519 --> 00:08:58,000
tune the parameter manually

224
00:08:55,600 --> 00:08:59,759
so we can just tune the blue noise

225
00:08:58,000 --> 00:09:02,639
distance parameter so that we know that

226
00:08:59,759 --> 00:09:05,039
it's like roughly correct like

227
00:09:02,639 --> 00:09:07,278
you know this gets 16

228
00:09:05,039 --> 00:09:10,000
and it's like a little sparse but it's

229
00:09:07,278 --> 00:09:12,320
you know it's good enough or something

230
00:09:10,000 --> 00:09:12,320
um

231
00:09:13,600 --> 00:09:17,839
so yeah so let's take a look at hh

232
00:09:15,759 --> 00:09:20,639
sphere uh and let's just try to rewrite

233
00:09:17,839 --> 00:09:22,959
it to something else uh let's also get

234
00:09:20,639 --> 00:09:26,799
it so that we can draw it so like if we

235
00:09:22,958 --> 00:09:29,759
look uh inside handmade lighting

236
00:09:26,799 --> 00:09:35,359
there's this like sphere drawing thing

237
00:09:29,759 --> 00:09:35,360
that we have um here right so this thing

238
00:09:35,759 --> 00:09:40,080
draws the sphere and so what we could do

239
00:09:37,839 --> 00:09:42,480
is try to get that working in some way

240
00:09:40,080 --> 00:09:43,278
where we can see uh the light

241
00:09:42,480 --> 00:09:45,120
uh

242
00:09:43,278 --> 00:09:48,720
values here

243
00:09:45,120 --> 00:09:51,919
um and if we run that we should see like

244
00:09:48,720 --> 00:09:53,600
a sampling sphere sitting there right

245
00:09:51,919 --> 00:09:55,439
and the point of this there's not a

246
00:09:53,600 --> 00:09:57,920
whole lot of point to this at the moment

247
00:09:55,440 --> 00:09:59,120
but what we can do is

248
00:09:57,919 --> 00:10:00,319
we can

249
00:09:59,120 --> 00:10:02,720
verify

250
00:10:00,320 --> 00:10:06,000
by modifying this routine

251
00:10:02,720 --> 00:10:08,480
we can verify that this

252
00:10:06,000 --> 00:10:11,919
comes out looking evenly distributed

253
00:10:08,480 --> 00:10:14,399
somehow right like um

254
00:10:11,919 --> 00:10:17,199
we can adjust this drawing routine to

255
00:10:14,399 --> 00:10:20,559
draw like the each patch

256
00:10:17,200 --> 00:10:22,399
in like a different color or something

257
00:10:20,559 --> 00:10:24,479
uh and

258
00:10:22,399 --> 00:10:26,720
from there we can like we have this get

259
00:10:24,480 --> 00:10:28,639
debug color four right you can see this

260
00:10:26,720 --> 00:10:30,720
part here so we can do something where

261
00:10:28,639 --> 00:10:34,000
we basically rebuild the table

262
00:10:30,720 --> 00:10:36,160
then we draw the table here where we

263
00:10:34,000 --> 00:10:39,120
show each patch and we can sort of

264
00:10:36,159 --> 00:10:41,360
verify that it's roughly correct

265
00:10:39,120 --> 00:10:41,360
right

266
00:10:42,320 --> 00:10:48,720
so i think that's mostly what we want

267
00:10:46,240 --> 00:10:50,720
um so in hh sphere

268
00:10:48,720 --> 00:10:54,879
what we would like i think there's like

269
00:10:50,720 --> 00:10:56,959
a fair bit of cruft in here now um

270
00:10:54,879 --> 00:11:00,078
so like things like interleave

271
00:10:56,958 --> 00:11:02,000
directions like we don't actually want

272
00:11:00,078 --> 00:11:03,039
this anymore

273
00:11:02,000 --> 00:11:04,480
um

274
00:11:03,039 --> 00:11:05,919
i don't think

275
00:11:04,480 --> 00:11:07,519
like

276
00:11:05,919 --> 00:11:10,399
like we don't want some of these things

277
00:11:07,519 --> 00:11:13,200
anymore like interleave directions

278
00:11:10,399 --> 00:11:15,839
we don't want to actually do

279
00:11:13,200 --> 00:11:15,839
um

280
00:11:16,240 --> 00:11:19,519
we want to generate

281
00:11:21,759 --> 00:11:27,000
we want to generate things differently

282
00:11:23,679 --> 00:11:27,000
than that

283
00:11:32,399 --> 00:11:39,480
i also don't know like why

284
00:11:34,559 --> 00:11:39,479
do we even want those at the moment

285
00:11:42,720 --> 00:11:47,278
that's kind of a good question

286
00:11:46,000 --> 00:11:51,519
light sampling

287
00:11:47,278 --> 00:11:51,519
sphere float table do we use that

288
00:11:52,480 --> 00:11:57,360
what is that used

289
00:11:54,839 --> 00:12:00,320
for there's a light sampling so the

290
00:11:57,360 --> 00:12:00,320
sampling spheres

291
00:12:00,879 --> 00:12:03,519
are here

292
00:12:04,480 --> 00:12:09,360
and the directions

293
00:12:07,039 --> 00:12:11,679
like why are there two like

294
00:12:09,360 --> 00:12:13,039
we haven't done this in long enough that

295
00:12:11,679 --> 00:12:14,719
i don't

296
00:12:13,039 --> 00:12:16,799
remember why it's doing it this way i

297
00:12:14,720 --> 00:12:19,278
also have like no idea why there are ray

298
00:12:16,799 --> 00:12:20,240
bundles per sphere this way

299
00:12:19,278 --> 00:12:22,559
um

300
00:12:20,240 --> 00:12:25,560
is that because we load them as 4x

301
00:12:22,559 --> 00:12:25,559
values

302
00:12:30,320 --> 00:12:34,639
like what do we do there

303
00:12:32,399 --> 00:12:37,799
uh when we load this end do we do some

304
00:12:34,639 --> 00:12:37,799
kind of

305
00:12:44,879 --> 00:12:49,439
so we use something called ray d single

306
00:12:46,958 --> 00:12:50,399
which is a sample ray direction pulled

307
00:12:49,440 --> 00:12:53,120
out of

308
00:12:50,399 --> 00:12:55,360
the light sample directions right

309
00:12:53,120 --> 00:12:55,360
so

310
00:12:56,720 --> 00:13:01,600
it's just it's just that

311
00:12:59,360 --> 00:13:04,079
so what do we need

312
00:13:01,600 --> 00:13:08,399
what do we actually use

313
00:13:04,078 --> 00:13:10,559
the sample spheres part of things four

314
00:13:08,399 --> 00:13:11,440
like does anyone use

315
00:13:10,559 --> 00:13:13,439
this

316
00:13:11,440 --> 00:13:15,279
was this just for back when we were

317
00:13:13,440 --> 00:13:16,320
doing other things

318
00:13:15,278 --> 00:13:18,879
um

319
00:13:16,320 --> 00:13:21,680
because i don't know right so like do we

320
00:13:18,879 --> 00:13:23,838
ever look up a light sampling sphere at

321
00:13:21,679 --> 00:13:23,838
all

322
00:13:25,919 --> 00:13:28,240
oops

323
00:13:30,720 --> 00:13:35,120
like i don't think we do so let's remove

324
00:13:33,440 --> 00:13:36,560
this because that may be another source

325
00:13:35,120 --> 00:13:38,000
of confusion is that we're generating

326
00:13:36,559 --> 00:13:39,759
these two things because we used to use

327
00:13:38,000 --> 00:13:41,600
one of them and we don't anymore and

328
00:13:39,759 --> 00:13:43,278
just like getting that out of there will

329
00:13:41,600 --> 00:13:45,600
reduce the chances that we do something

330
00:13:43,278 --> 00:13:47,198
stupid like are looking at one like

331
00:13:45,600 --> 00:13:50,240
because we're drawing one and like using

332
00:13:47,198 --> 00:13:51,679
the other right which is really bad um

333
00:13:50,240 --> 00:13:54,399
that could be

334
00:13:51,679 --> 00:13:56,239
making us think like something right so

335
00:13:54,399 --> 00:13:57,600
this is why i say like you know doing

336
00:13:56,240 --> 00:13:58,639
this pass to clean up the code is very

337
00:13:57,600 --> 00:14:00,079
important because we've done all these

338
00:13:58,639 --> 00:14:01,360
experiments and now we need to condense

339
00:14:00,078 --> 00:14:02,958
down to just like

340
00:14:01,360 --> 00:14:03,839
just one so that we can focus on getting

341
00:14:02,958 --> 00:14:05,439
it right

342
00:14:03,839 --> 00:14:08,399
um

343
00:14:05,440 --> 00:14:10,560
and nice and shippable right like anyway

344
00:14:08,399 --> 00:14:13,198
so uh if we just take the sampling

345
00:14:10,559 --> 00:14:14,159
spheres out of here who complains

346
00:14:13,198 --> 00:14:14,958
right

347
00:14:14,159 --> 00:14:18,000
um

348
00:14:14,958 --> 00:14:20,000
let's find out so

349
00:14:18,000 --> 00:14:21,759
i don't know what rays per probe is

350
00:14:20,000 --> 00:14:24,720
there so if we get rid of this what else

351
00:14:21,759 --> 00:14:27,278
we got this i don't know what that is

352
00:14:24,720 --> 00:14:30,160
um and this is just drawing it so like

353
00:14:27,278 --> 00:14:31,600
if we turn off the drawing

354
00:14:30,159 --> 00:14:33,519
um

355
00:14:31,600 --> 00:14:37,120
is that it

356
00:14:33,519 --> 00:14:39,198
so yeah so none of that was getting used

357
00:14:37,120 --> 00:14:41,839
none of that is getting used

358
00:14:39,198 --> 00:14:43,679
so so that entire thing where we do like

359
00:14:41,839 --> 00:14:47,519
the interleave values like that whole

360
00:14:43,679 --> 00:14:47,519
thing just doesn't even matter

361
00:14:48,958 --> 00:14:54,239
so this like we're only using this part

362
00:14:51,919 --> 00:14:57,599
of the entire thing so presumably if we

363
00:14:54,240 --> 00:14:59,440
went to this this part here

364
00:14:57,600 --> 00:15:02,720
so we've got this like light sample

365
00:14:59,440 --> 00:15:04,800
direction presumably if we just deleted

366
00:15:02,720 --> 00:15:06,079
like the rest of this stuff

367
00:15:04,799 --> 00:15:06,958
like this

368
00:15:06,078 --> 00:15:10,519
um

369
00:15:06,958 --> 00:15:10,518
it would be fine

370
00:15:16,320 --> 00:15:19,440
like i think we just left this in here

371
00:15:17,679 --> 00:15:21,359
because we were using it but and now we

372
00:15:19,440 --> 00:15:23,440
don't so let's just get rid of it and

373
00:15:21,360 --> 00:15:27,839
see what happens like if i get rid of

374
00:15:23,440 --> 00:15:27,839
that entirely does anyone complain

375
00:15:29,120 --> 00:15:32,560
okay

376
00:15:30,159 --> 00:15:34,319
so basically like we've we know now that

377
00:15:32,559 --> 00:15:36,319
we're actually down to just the table

378
00:15:34,320 --> 00:15:37,759
that actually we care about which is

379
00:15:36,320 --> 00:15:40,160
good

380
00:15:37,759 --> 00:15:41,839
um

381
00:15:40,159 --> 00:15:43,759
so that means we can also delete all

382
00:15:41,839 --> 00:15:45,920
this other stuff right so here is the

383
00:15:43,759 --> 00:15:47,199
only table this is the only table we're

384
00:15:45,919 --> 00:15:48,479
actually using

385
00:15:47,198 --> 00:15:50,639
was is that

386
00:15:48,480 --> 00:15:53,519
we don't care about any of these they're

387
00:15:50,639 --> 00:15:55,600
not relevant so they can all go away

388
00:15:53,519 --> 00:15:56,639
um and that means that the sample

389
00:15:55,600 --> 00:15:58,639
direction

390
00:15:56,639 --> 00:16:00,879
like bundle thing

391
00:15:58,639 --> 00:16:03,278
doesn't have to happen so it's just the

392
00:16:00,879 --> 00:16:05,519
raw directions that we need

393
00:16:03,278 --> 00:16:08,320
and if we look at the raw directions

394
00:16:05,519 --> 00:16:09,759
oops um

395
00:16:08,320 --> 00:16:13,278
i'm not sure where these are actually

396
00:16:09,759 --> 00:16:13,278
defined uh probably

397
00:16:19,120 --> 00:16:25,120
somewhere sphere store

398
00:16:21,600 --> 00:16:26,720
so where is sphere store

399
00:16:25,120 --> 00:16:29,039
okay

400
00:16:26,720 --> 00:16:29,040
um

401
00:16:30,240 --> 00:16:35,278
so the sphere store here the raw

402
00:16:32,879 --> 00:16:37,120
directions is really the part we

403
00:16:35,278 --> 00:16:40,078
actually care about and that's just the

404
00:16:37,120 --> 00:16:41,600
v3 the sphere store i don't think we

405
00:16:40,078 --> 00:16:43,919
actually need

406
00:16:41,600 --> 00:16:47,278
so if we look at spheres

407
00:16:43,919 --> 00:16:49,120
in theory that should just be like not

408
00:16:47,278 --> 00:16:51,838
even a thing

409
00:16:49,120 --> 00:16:51,839
anymore

410
00:16:52,639 --> 00:16:56,079
it's not used in the output

411
00:16:57,839 --> 00:17:03,320
is it used in here

412
00:16:59,759 --> 00:17:03,320
i don't think so

413
00:17:06,880 --> 00:17:11,199
so yeah i think like basically we can

414
00:17:08,959 --> 00:17:12,558
remove interleave directions we can

415
00:17:11,199 --> 00:17:14,160
remove

416
00:17:12,558 --> 00:17:16,318
i don't think cube store is used at all

417
00:17:14,160 --> 00:17:18,959
so we can remove all of these

418
00:17:16,318 --> 00:17:21,519
and i think we're good like uh we can

419
00:17:18,959 --> 00:17:24,720
just really remove all this stuff

420
00:17:21,519 --> 00:17:26,160
uh are we compiling this though

421
00:17:24,720 --> 00:17:28,240
that shouldn't have compiled so i think

422
00:17:26,160 --> 00:17:29,440
we're just not compiling hh sphere so

423
00:17:28,240 --> 00:17:31,120
let's

424
00:17:29,440 --> 00:17:33,840
make sure we are

425
00:17:31,119 --> 00:17:33,839
there we go

426
00:17:34,960 --> 00:17:38,240
okay so if i remove

427
00:17:37,519 --> 00:17:42,240
uh

428
00:17:38,240 --> 00:17:43,200
this stuff so we remove that we remove

429
00:17:42,240 --> 00:17:45,279
the

430
00:17:43,200 --> 00:17:47,200
the use of spheres everywhere

431
00:17:45,279 --> 00:17:49,519
so we just have like

432
00:17:47,200 --> 00:17:51,600
generate some stuff for us

433
00:17:49,519 --> 00:17:54,160
and store the raw directions no more

434
00:17:51,599 --> 00:17:54,159
spheres

435
00:17:54,240 --> 00:17:58,400
right no more sphere stuff happening

436
00:17:58,839 --> 00:18:04,159
i think

437
00:18:01,440 --> 00:18:06,400
then we're good so we don't need any of

438
00:18:04,160 --> 00:18:06,400
this

439
00:18:07,119 --> 00:18:12,558
and now like our

440
00:18:09,279 --> 00:18:14,480
our program is vastly simplified

441
00:18:12,558 --> 00:18:16,720
right and we're all good so that's all

442
00:18:14,480 --> 00:18:16,720
fine

443
00:18:16,960 --> 00:18:21,120
so now all we're doing is calling

444
00:18:18,640 --> 00:18:22,880
generate octahedral lighting pattern uh

445
00:18:21,119 --> 00:18:23,759
and we have a thing that outputs that

446
00:18:22,880 --> 00:18:25,360
here

447
00:18:23,759 --> 00:18:27,919
which i think is correct i don't think

448
00:18:25,359 --> 00:18:29,279
we really need to modify it particularly

449
00:18:27,919 --> 00:18:31,440
much

450
00:18:29,279 --> 00:18:33,519
the raw directions though need to

451
00:18:31,440 --> 00:18:37,200
actually be packed in a different way so

452
00:18:33,519 --> 00:18:39,918
we want to like change the order of them

453
00:18:37,200 --> 00:18:41,038
um so that in here like we're gonna want

454
00:18:39,919 --> 00:18:43,360
to have

455
00:18:41,038 --> 00:18:45,359
uh for

456
00:18:43,359 --> 00:18:47,519
we're gonna want to have this load

457
00:18:45,359 --> 00:18:49,759
properly

458
00:18:47,519 --> 00:18:52,400
so that you

459
00:18:49,759 --> 00:18:53,359
do the casts in like the right order

460
00:18:52,400 --> 00:18:55,440
right

461
00:18:53,359 --> 00:18:58,159
um

462
00:18:55,440 --> 00:18:59,759
and that's easier said than done because

463
00:18:58,160 --> 00:19:00,880
it's kind of complicated to unwind in

464
00:18:59,759 --> 00:19:02,160
your mind

465
00:19:00,880 --> 00:19:03,039
if you look at the way that it's working

466
00:19:02,160 --> 00:19:05,200
now

467
00:19:03,038 --> 00:19:07,119
we have like this octahedron index and

468
00:19:05,200 --> 00:19:09,919
it loops over and you do eight ray

469
00:19:07,119 --> 00:19:11,119
indices right you can see them happening

470
00:19:09,919 --> 00:19:12,640
here

471
00:19:11,119 --> 00:19:16,479
um

472
00:19:12,640 --> 00:19:17,679
and i don't think we actually want to do

473
00:19:16,480 --> 00:19:21,038
it that way

474
00:19:17,679 --> 00:19:21,919
i think what we probably would rather do

475
00:19:21,038 --> 00:19:25,038
is

476
00:19:21,919 --> 00:19:26,960
build the ray

477
00:19:25,038 --> 00:19:28,798
build this one do the loops the other

478
00:19:26,960 --> 00:19:30,240
way around

479
00:19:28,798 --> 00:19:31,839
if that makes sense

480
00:19:30,240 --> 00:19:33,839
so in other words

481
00:19:31,839 --> 00:19:37,359
we would pick

482
00:19:33,839 --> 00:19:40,720
we walk the table in order we do eight

483
00:19:37,359 --> 00:19:43,119
or sorry uh however many light sampling

484
00:19:40,720 --> 00:19:45,759
octahedron counts there are we do that

485
00:19:43,119 --> 00:19:47,678
many in a row on the same accumulator

486
00:19:45,759 --> 00:19:49,038
then we move to the next

487
00:19:47,679 --> 00:19:52,038
texel

488
00:19:49,038 --> 00:19:52,038
right

489
00:19:54,240 --> 00:19:59,558
i think that's how we would do it

490
00:19:56,558 --> 00:19:59,558
um

491
00:20:06,720 --> 00:20:09,919
i think that's how we would do it

492
00:20:18,159 --> 00:20:22,799
yeah

493
00:20:19,359 --> 00:20:25,279
um so if we're doing it that way

494
00:20:22,798 --> 00:20:28,000
then we know that this output right is

495
00:20:25,279 --> 00:20:30,960
just going to be the this table of light

496
00:20:28,000 --> 00:20:30,960
sample directions

497
00:20:31,359 --> 00:20:34,719
uh

498
00:20:32,558 --> 00:20:35,918
the light lighting octahedral map

499
00:20:34,720 --> 00:20:38,159
dimension

500
00:20:35,919 --> 00:20:39,919
is fine as a pound defined output we

501
00:20:38,159 --> 00:20:41,120
need to know that right

502
00:20:39,919 --> 00:20:43,759
the

503
00:20:41,119 --> 00:20:46,239
light sampling octahedron mask is not

504
00:20:43,759 --> 00:20:48,319
going to be a thing anymore

505
00:20:46,240 --> 00:20:49,679
because we don't step through them

506
00:20:48,319 --> 00:20:52,158
unpredictably

507
00:20:49,679 --> 00:20:53,120
so that would go away

508
00:20:52,159 --> 00:20:56,240
the

509
00:20:53,119 --> 00:20:58,479
light sample directions for octahedron

510
00:20:56,240 --> 00:20:58,480
um

511
00:20:58,720 --> 00:21:03,200
i don't

512
00:21:00,720 --> 00:21:05,200
think

513
00:21:03,200 --> 00:21:06,880
i don't think that would actually ever

514
00:21:05,200 --> 00:21:10,640
be used

515
00:21:06,880 --> 00:21:12,799
so really all you need is

516
00:21:10,640 --> 00:21:14,480
the map dimension

517
00:21:12,798 --> 00:21:18,720
and the

518
00:21:14,480 --> 00:21:19,919
count of the rays coming out of a single

519
00:21:18,720 --> 00:21:22,159
texel

520
00:21:19,919 --> 00:21:23,679
so it would be like

521
00:21:22,159 --> 00:21:25,120
you know

522
00:21:23,679 --> 00:21:26,240
lighting

523
00:21:25,119 --> 00:21:29,239
uh

524
00:21:26,240 --> 00:21:29,240
octahedral

525
00:21:29,359 --> 00:21:34,240
samples per texel or raise per texel

526
00:21:35,599 --> 00:21:41,519
right

527
00:21:37,279 --> 00:21:43,440
and that number is actually a parameter

528
00:21:41,519 --> 00:21:46,639
we could generate like more or less of

529
00:21:43,440 --> 00:21:49,840
those depending on how much cpu power we

530
00:21:46,640 --> 00:21:53,038
want to spend versus the quality of the

531
00:21:49,839 --> 00:21:53,038
sampling right

532
00:21:53,440 --> 00:21:57,360
um so instead of raised per octahedron i

533
00:21:55,599 --> 00:21:59,839
think what we want here is raise per

534
00:21:57,359 --> 00:21:59,839
texel

535
00:22:00,319 --> 00:22:04,000
and that would get printed the

536
00:22:01,919 --> 00:22:05,200
octahedron count would not be a thing

537
00:22:04,000 --> 00:22:07,599
because we were that was sort of a

538
00:22:05,200 --> 00:22:09,360
surrogate that was actually what raised

539
00:22:07,599 --> 00:22:11,439
protection was

540
00:22:09,359 --> 00:22:13,839
but i don't think we want that

541
00:22:11,440 --> 00:22:16,000
and so then the total count which is how

542
00:22:13,839 --> 00:22:19,119
many of these we're going to have

543
00:22:16,000 --> 00:22:19,919
is just the dimension squared

544
00:22:19,119 --> 00:22:21,918
uh

545
00:22:19,919 --> 00:22:23,120
times the

546
00:22:21,919 --> 00:22:25,200
um

547
00:22:23,119 --> 00:22:26,558
the raised per texel

548
00:22:25,200 --> 00:22:28,798
right so it's

549
00:22:26,558 --> 00:22:28,798
it's

550
00:22:33,440 --> 00:22:37,279
bat

551
00:22:35,599 --> 00:22:38,959
and since i don't know if square will

552
00:22:37,279 --> 00:22:40,960
evaluate fairly

553
00:22:38,960 --> 00:22:45,120
i'll just do or like a compile time

554
00:22:40,960 --> 00:22:45,120
right i'll just manually do it

555
00:22:45,839 --> 00:22:49,918
like so

556
00:22:47,440 --> 00:22:53,200
so that's the count and that is just how

557
00:22:49,919 --> 00:22:55,120
that's how many will be in here uh and i

558
00:22:53,200 --> 00:22:57,120
think what we'd rather do instead of

559
00:22:55,119 --> 00:23:00,319
putting this in there we should make

560
00:22:57,119 --> 00:23:02,719
that be a automatic compiler-sized thing

561
00:23:00,319 --> 00:23:05,678
and then we should just like assert i

562
00:23:02,720 --> 00:23:07,519
don't know if we have a ct assert

563
00:23:05,679 --> 00:23:08,640
um

564
00:23:07,519 --> 00:23:11,679
we do

565
00:23:08,640 --> 00:23:15,280
uh we should ct assert that like these

566
00:23:11,679 --> 00:23:16,640
come out correct because we want we want

567
00:23:15,279 --> 00:23:19,279
this number

568
00:23:16,640 --> 00:23:21,759
to always be the same as the number that

569
00:23:19,279 --> 00:23:22,399
we print out and if they aren't rather

570
00:23:21,759 --> 00:23:24,640
than

571
00:23:22,400 --> 00:23:26,320
forcing them to be we would rather print

572
00:23:24,640 --> 00:23:27,919
out an error message it's like hey by

573
00:23:26,319 --> 00:23:30,798
the way

574
00:23:27,919 --> 00:23:32,320
this totally didn't work uh right

575
00:23:30,798 --> 00:23:37,839
so we probably want to do a thing that's

576
00:23:32,319 --> 00:23:37,839
like hey uh assert that the array count

577
00:23:38,079 --> 00:23:41,678
of the sample direction table

578
00:23:41,839 --> 00:23:46,158
is equal to the the amount that we said

579
00:23:44,480 --> 00:23:50,079
we were going to do

580
00:23:46,159 --> 00:23:53,360
and that way we we rather than force it

581
00:23:50,079 --> 00:23:56,079
uh we will yeah we'd make it do

582
00:23:53,359 --> 00:23:56,879
make it do the thing

583
00:23:56,079 --> 00:23:59,278
so

584
00:23:56,880 --> 00:24:02,000
uh raise protection is here

585
00:23:59,278 --> 00:24:05,000
so we have

586
00:24:02,000 --> 00:24:05,000
um

587
00:24:07,359 --> 00:24:11,678
square the octahedron dim i don't know

588
00:24:09,759 --> 00:24:13,200
if square we should probably do it this

589
00:24:11,679 --> 00:24:14,880
way because like i said i don't know if

590
00:24:13,200 --> 00:24:16,640
it's that that may be

591
00:24:14,880 --> 00:24:19,799
not for integers may only be for floats

592
00:24:16,640 --> 00:24:19,799
i don't remember

593
00:24:20,159 --> 00:24:22,480
okay

594
00:24:25,919 --> 00:24:30,880
so i think that's everything

595
00:24:28,240 --> 00:24:33,919
that we need to do to print out the

596
00:24:30,880 --> 00:24:36,159
correct thing like to the file

597
00:24:33,919 --> 00:24:36,159
right

598
00:24:40,319 --> 00:24:44,480
we then just need to

599
00:24:42,480 --> 00:24:47,519
think about how we actually want to

600
00:24:44,480 --> 00:24:51,278
sieve these properly and you can see

601
00:24:47,519 --> 00:24:51,278
like we've got some kind of a like

602
00:24:52,079 --> 00:24:57,599
we

603
00:24:53,839 --> 00:24:59,199
we put a bunch of directions out on this

604
00:24:57,599 --> 00:25:02,319
thing

605
00:24:59,200 --> 00:25:02,319
and then we sieve them

606
00:25:05,278 --> 00:25:10,558
right uh into like

607
00:25:07,839 --> 00:25:10,558
ones that go

608
00:25:10,720 --> 00:25:14,278
you know i don't

609
00:25:14,720 --> 00:25:18,480
it just doesn't seem like a very good

610
00:25:16,720 --> 00:25:20,240
way to do this

611
00:25:18,480 --> 00:25:21,759
i mean maybe it's the only way to do it

612
00:25:20,240 --> 00:25:24,000
i don't know

613
00:25:21,759 --> 00:25:24,000
but

614
00:25:26,720 --> 00:25:31,200
because like it so here's how we did

615
00:25:28,640 --> 00:25:31,200
this right

616
00:25:31,839 --> 00:25:36,639
so we allocate some space

617
00:25:34,400 --> 00:25:38,640
uh for this thing

618
00:25:36,640 --> 00:25:40,480
for where we're putting

619
00:25:38,640 --> 00:25:42,960
for we allocate some space for like ray

620
00:25:40,480 --> 00:25:44,798
directions on a sphere we randomly

621
00:25:42,960 --> 00:25:47,120
initialize them to white noise so we

622
00:25:44,798 --> 00:25:49,918
start with white noise

623
00:25:47,119 --> 00:25:51,678
um then we use basically like energy

624
00:25:49,919 --> 00:25:52,880
repulsion like we basically just like

625
00:25:51,679 --> 00:25:53,919
look

626
00:25:52,880 --> 00:25:56,960
and

627
00:25:53,919 --> 00:25:57,840
repulse points based on how many things

628
00:25:56,960 --> 00:25:59,360
are

629
00:25:57,839 --> 00:26:00,798
close to them

630
00:25:59,359 --> 00:26:03,119
you know what i mean

631
00:26:00,798 --> 00:26:03,119
um

632
00:26:03,200 --> 00:26:08,880
and

633
00:26:05,519 --> 00:26:10,720
we stop when we are within like

634
00:26:08,880 --> 00:26:12,559
a range

635
00:26:10,720 --> 00:26:14,798
uh

636
00:26:12,558 --> 00:26:16,798
right you can see here

637
00:26:14,798 --> 00:26:18,400
we try to get the

638
00:26:16,798 --> 00:26:20,798
the distance

639
00:26:18,400 --> 00:26:23,440
to converge to some arbitrary thing we

640
00:26:20,798 --> 00:26:23,440
picked right

641
00:26:23,759 --> 00:26:27,759
and that's how we produced our sampling

642
00:26:25,359 --> 00:26:30,479
sphere

643
00:26:27,759 --> 00:26:33,599
like i said the problem with that

644
00:26:30,480 --> 00:26:36,079
is that we don't guarantee we'll get

645
00:26:33,599 --> 00:26:37,519
enough uh

646
00:26:36,079 --> 00:26:41,439
actual points

647
00:26:37,519 --> 00:26:44,400
for any particular uh octahedron

648
00:26:41,440 --> 00:26:46,159
so what i propose we do now is i pros we

649
00:26:44,400 --> 00:26:48,320
don't actually modify this algorithm at

650
00:26:46,159 --> 00:26:50,880
all i propose we run

651
00:26:48,319 --> 00:26:52,960
this crappy one

652
00:26:50,880 --> 00:26:55,440
go do a visualization of it so because

653
00:26:52,960 --> 00:26:56,798
remember we were drawing the wrong thing

654
00:26:55,440 --> 00:27:00,640
um

655
00:26:56,798 --> 00:27:04,000
so we don't really want that right

656
00:27:00,640 --> 00:27:07,840
so uh go fix the drawing of this down in

657
00:27:04,000 --> 00:27:11,759
the sampling spheres drawing thingy

658
00:27:07,839 --> 00:27:12,879
uh to actually draw them and colored by

659
00:27:11,759 --> 00:27:15,119
texel

660
00:27:12,880 --> 00:27:15,120
right

661
00:27:16,880 --> 00:27:20,399
we do that

662
00:27:18,480 --> 00:27:22,480
and then we

663
00:27:20,398 --> 00:27:25,359
should be able to visually see that the

664
00:27:22,480 --> 00:27:25,360
result is bad

665
00:27:25,919 --> 00:27:29,278
and

666
00:27:27,359 --> 00:27:32,079
then we can pop back to h8 sphere and

667
00:27:29,278 --> 00:27:35,599
try to fix it

668
00:27:32,079 --> 00:27:36,960
so if we have it all

669
00:27:35,599 --> 00:27:39,839
um

670
00:27:36,960 --> 00:27:43,278
if we've

671
00:27:39,839 --> 00:27:44,558
go ahead and do uh redo this

672
00:27:43,278 --> 00:27:47,359
loop

673
00:27:44,558 --> 00:27:48,480
where we loop through the texels i guess

674
00:27:47,359 --> 00:27:50,240
like this

675
00:27:48,480 --> 00:27:53,038
um

676
00:27:50,240 --> 00:27:54,798
i don't even know that we care so much

677
00:27:53,038 --> 00:27:57,519
about

678
00:27:54,798 --> 00:27:57,519
these but

679
00:27:57,759 --> 00:28:02,398
um i'm gonna i'm gonna do it this way

680
00:28:00,480 --> 00:28:04,798
for now so so

681
00:28:02,398 --> 00:28:04,798
all right

682
00:28:04,880 --> 00:28:11,120
so we loop through t y and it's light

683
00:28:07,519 --> 00:28:12,240
sampling octahedron map dim

684
00:28:11,119 --> 00:28:13,678
light

685
00:28:12,240 --> 00:28:16,640
lighting sorry

686
00:28:13,679 --> 00:28:19,519
uh octahedron map dim

687
00:28:16,640 --> 00:28:22,559
uh so if we loop over

688
00:28:19,519 --> 00:28:24,319
i don't know why that's indented further

689
00:28:22,558 --> 00:28:26,639
that doesn't seem to make a whole lot of

690
00:28:24,319 --> 00:28:31,839
sense but okay

691
00:28:26,640 --> 00:28:31,840
why is that who is indenting is it this

692
00:28:36,640 --> 00:28:40,559
is there something like a hanging indent

693
00:28:38,960 --> 00:28:43,038
above here that's causing this to be

694
00:28:40,558 --> 00:28:43,038
busted

695
00:28:43,519 --> 00:28:48,798
apparently so what's the what's the

696
00:28:45,278 --> 00:28:48,798
problem for code or why are you confused

697
00:28:49,119 --> 00:28:54,000
there must be like something if zeroed

698
00:28:51,038 --> 00:28:56,480
out up here that's like

699
00:28:54,000 --> 00:28:57,599
causing some

700
00:28:56,480 --> 00:29:00,159
weird

701
00:28:57,599 --> 00:29:02,798
like everything is is one over from

702
00:29:00,159 --> 00:29:06,159
where it should be

703
00:29:02,798 --> 00:29:06,158
why why is that

704
00:29:06,319 --> 00:29:09,960
anyone want to guess

705
00:29:14,480 --> 00:29:20,120
it's this isn't it

706
00:29:17,119 --> 00:29:20,119
okay

707
00:29:32,398 --> 00:29:34,798
better

708
00:29:37,359 --> 00:29:41,278
okay

709
00:29:39,440 --> 00:29:43,759
so if i loop over

710
00:29:41,278 --> 00:29:45,839
these

711
00:29:43,759 --> 00:29:47,759
txty values

712
00:29:45,839 --> 00:29:50,079
like so

713
00:29:47,759 --> 00:29:50,079
um

714
00:29:50,159 --> 00:29:53,200
i should be able to

715
00:29:52,240 --> 00:29:55,919
then

716
00:29:53,200 --> 00:29:58,399
for each one of these loop over the

717
00:29:55,919 --> 00:30:00,880
total number of rays

718
00:29:58,398 --> 00:30:01,678
per texel

719
00:30:00,880 --> 00:30:04,559
um

720
00:30:01,679 --> 00:30:07,759
and pick out like each one

721
00:30:04,558 --> 00:30:09,119
from the sample direction

722
00:30:07,759 --> 00:30:12,158
the

723
00:30:09,119 --> 00:30:14,558
these things come from a table

724
00:30:12,159 --> 00:30:14,559
that

725
00:30:15,440 --> 00:30:21,080
will have been

726
00:30:16,919 --> 00:30:21,080
loaded here

727
00:30:22,319 --> 00:30:25,678
um

728
00:30:23,278 --> 00:30:25,679
and

729
00:30:29,839 --> 00:30:34,959
we're really just going down these in

730
00:30:31,839 --> 00:30:39,278
order so meaning we would start by

731
00:30:34,960 --> 00:30:41,919
saying like rader equals the first one

732
00:30:39,278 --> 00:30:44,720
in the table i guess we

733
00:30:41,919 --> 00:30:45,600
need to look at sampling direction so

734
00:30:44,720 --> 00:30:48,558
um

735
00:30:45,599 --> 00:30:51,359
so sampter equals you know whatever the

736
00:30:48,558 --> 00:30:53,359
the first thing in the table is

737
00:30:51,359 --> 00:30:57,199
and then each time through here when we

738
00:30:53,359 --> 00:30:58,079
draw a ray we want to go to the next one

739
00:30:57,200 --> 00:31:00,880
um

740
00:30:58,079 --> 00:31:01,678
the position of this thing

741
00:31:00,880 --> 00:31:04,000
is

742
00:31:01,679 --> 00:31:04,880
looks like we're just kind of hacking it

743
00:31:04,000 --> 00:31:07,038
um

744
00:31:04,880 --> 00:31:09,278
so we can literally just say like okay

745
00:31:07,038 --> 00:31:11,359
the sample directions uh i don't

746
00:31:09,278 --> 00:31:14,159
remember what the actual name for this

747
00:31:11,359 --> 00:31:16,319
is it's ray d i guess

748
00:31:14,159 --> 00:31:19,039
um so the ray direction we get out of

749
00:31:16,319 --> 00:31:22,000
here then we draw this thing

750
00:31:19,038 --> 00:31:23,119
and what i want to do is make the color

751
00:31:22,000 --> 00:31:24,000
of it

752
00:31:23,119 --> 00:31:27,918
um

753
00:31:24,000 --> 00:31:31,038
just be something that only gets updated

754
00:31:27,919 --> 00:31:32,559
uh as we go through the

755
00:31:31,038 --> 00:31:35,919
texel area

756
00:31:32,558 --> 00:31:37,038
so so there'd be like a color index here

757
00:31:35,919 --> 00:31:39,200
and the you know what the other thing we

758
00:31:37,038 --> 00:31:40,720
could do is just actually cut

759
00:31:39,200 --> 00:31:42,880
we don't even really need to use the

760
00:31:40,720 --> 00:31:45,038
debug colors so

761
00:31:42,880 --> 00:31:47,200
what we could do is say like

762
00:31:45,038 --> 00:31:50,000
this is checker

763
00:31:47,200 --> 00:31:53,120
here we could make just a checker board

764
00:31:50,000 --> 00:31:55,519
right where we do like um

765
00:31:53,119 --> 00:31:55,518
either

766
00:31:56,079 --> 00:31:59,720
white or black

767
00:32:01,119 --> 00:32:05,199
i don't know if we have the ability to

768
00:32:02,720 --> 00:32:07,278
turn lighting off easily

769
00:32:05,200 --> 00:32:08,960
for things i don't remember how we did

770
00:32:07,278 --> 00:32:10,558
that but it will make it kind of harder

771
00:32:08,960 --> 00:32:15,558
to see

772
00:32:10,558 --> 00:32:15,558
uh in that sense but we could

773
00:32:18,319 --> 00:32:20,960
like

774
00:32:19,038 --> 00:32:22,558
do these debug things i don't remember

775
00:32:20,960 --> 00:32:24,480
how these debug things work so i don't

776
00:32:22,558 --> 00:32:25,599
know we'll have to play with that later

777
00:32:24,480 --> 00:32:28,159
but

778
00:32:25,599 --> 00:32:31,439
um

779
00:32:28,159 --> 00:32:33,360
the checkerboard pattern would be like

780
00:32:31,440 --> 00:32:36,399
just the bottom bit

781
00:32:33,359 --> 00:32:39,359
if the bottom bits of x and y are

782
00:32:36,398 --> 00:32:39,359
different then

783
00:32:39,599 --> 00:32:45,119
we use one color otherwise use another

784
00:32:42,960 --> 00:32:46,079
you know what i mean

785
00:32:45,119 --> 00:32:48,319
um

786
00:32:46,079 --> 00:32:51,119
i feel like that's probably all we need

787
00:32:48,319 --> 00:32:52,879
so like you know you start out txt why

788
00:32:51,119 --> 00:32:54,639
they're equal if you step one in either

789
00:32:52,880 --> 00:32:56,240
direction they're now not equal you step

790
00:32:54,640 --> 00:32:58,720
one in the other one and now they're

791
00:32:56,240 --> 00:32:59,919
equal again right so it should that

792
00:32:58,720 --> 00:33:02,079
should produce like a checkerboard

793
00:32:59,919 --> 00:33:04,480
pattern which is all we need to see

794
00:33:02,079 --> 00:33:04,480
i think

795
00:33:04,960 --> 00:33:08,319
um

796
00:33:05,919 --> 00:33:10,720
so i think that produces a drawing of

797
00:33:08,319 --> 00:33:12,319
the actual thing uh that we want so now

798
00:33:10,720 --> 00:33:13,360
we just need to like run the actual

799
00:33:12,319 --> 00:33:15,119
program

800
00:33:13,359 --> 00:33:18,000
have it print out the directions and

801
00:33:15,119 --> 00:33:19,918
call it a day uh unfortunately like i

802
00:33:18,000 --> 00:33:21,440
said this program i don't know that this

803
00:33:19,919 --> 00:33:22,880
is actually outputting the correct order

804
00:33:21,440 --> 00:33:25,840
i'm not sure

805
00:33:22,880 --> 00:33:25,840
um

806
00:33:34,880 --> 00:33:42,480
yeah so this loop is kind of busted uh

807
00:33:38,240 --> 00:33:44,798
so we probably want to fix this loop

808
00:33:42,480 --> 00:33:44,798
um

809
00:33:47,200 --> 00:33:50,798
to look like this

810
00:33:50,839 --> 00:33:56,158
right like this wants to look like

811
00:33:56,640 --> 00:33:59,679
i think

812
00:33:58,000 --> 00:34:02,880
like this

813
00:33:59,679 --> 00:34:04,840
um so that we loop over the txty

814
00:34:02,880 --> 00:34:08,240
uh with the map

815
00:34:04,839 --> 00:34:08,239
dim uh

816
00:34:08,878 --> 00:34:14,398
we don't really care

817
00:34:11,599 --> 00:34:14,399
about

818
00:34:16,320 --> 00:34:21,519
that

819
00:34:18,239 --> 00:34:24,878
so it's this is

820
00:34:21,519 --> 00:34:24,878
this is the dimension right

821
00:34:27,440 --> 00:34:30,960
this is the oct map dim here

822
00:34:31,519 --> 00:34:37,599
so we loop over the ocmap dim

823
00:34:34,719 --> 00:34:39,519
and then we've got rays per texel

824
00:34:37,599 --> 00:34:40,720
uh and the total number of directions

825
00:34:39,519 --> 00:34:42,320
here is

826
00:34:40,719 --> 00:34:44,638
is this

827
00:34:42,320 --> 00:34:47,119
oct map dim squared times the rays per

828
00:34:44,639 --> 00:34:47,119
texel

829
00:34:47,599 --> 00:34:49,838
um

830
00:34:51,519 --> 00:34:54,559
this

831
00:34:52,878 --> 00:34:57,519
is like

832
00:34:54,559 --> 00:34:59,599
hard coded

833
00:34:57,519 --> 00:35:01,920
so

834
00:34:59,599 --> 00:35:04,400
that to me suggests that like like this

835
00:35:01,920 --> 00:35:06,079
shouldn't this should be

836
00:35:04,400 --> 00:35:09,599
like these are all like totally

837
00:35:06,079 --> 00:35:11,839
hardcoded it looks like for some reason

838
00:35:09,599 --> 00:35:11,838
um

839
00:35:12,880 --> 00:35:17,119
which doesn't make a lot of sense maybe

840
00:35:14,639 --> 00:35:18,000
we'll do v2s

841
00:35:17,119 --> 00:35:20,880
um

842
00:35:18,000 --> 00:35:23,679
or do we have a u okay

843
00:35:20,880 --> 00:35:26,000
maybe we'll do v2u of ocmapdim so that

844
00:35:23,679 --> 00:35:28,639
in here we basically say like look the

845
00:35:26,000 --> 00:35:29,599
dimension of this thing

846
00:35:28,639 --> 00:35:31,759
um

847
00:35:29,599 --> 00:35:35,519
for the light atlas or whatever is just

848
00:35:31,760 --> 00:35:36,880
going to be the oct map dim plus two

849
00:35:35,519 --> 00:35:38,559
which is what it should be

850
00:35:36,880 --> 00:35:39,838
and then instead of having that dxdy

851
00:35:38,559 --> 00:35:42,078
there we're just like look we loop

852
00:35:39,838 --> 00:35:43,920
through the x's we loop through the y's

853
00:35:42,079 --> 00:35:45,359
uh and we have arrays raise protection

854
00:35:43,920 --> 00:35:47,680
right

855
00:35:45,358 --> 00:35:47,679
um

856
00:35:52,559 --> 00:35:57,400
okay

857
00:35:54,400 --> 00:35:57,400
so

858
00:35:59,599 --> 00:36:03,680
you can actually you can even see how

859
00:36:01,760 --> 00:36:05,839
this is obviously wrong like you can

860
00:36:03,679 --> 00:36:07,598
even see where the bug is coming from so

861
00:36:05,838 --> 00:36:09,039
we compute the total direction count

862
00:36:07,599 --> 00:36:10,320
like we were doing that before we were

863
00:36:09,039 --> 00:36:11,759
computing it differently but it still

864
00:36:10,320 --> 00:36:13,280
was like how many of these do we want to

865
00:36:11,760 --> 00:36:15,040
put out right

866
00:36:13,280 --> 00:36:17,760
and then we're asking for a poisson

867
00:36:15,039 --> 00:36:20,400
distribution that's the exact number now

868
00:36:17,760 --> 00:36:23,920
a random distribution over the sphere

869
00:36:20,400 --> 00:36:26,480
is going to on average give you

870
00:36:23,920 --> 00:36:29,838
1 8 of the

871
00:36:26,480 --> 00:36:32,000
rays on each texel

872
00:36:29,838 --> 00:36:34,078
well not each textual 164th of the rays

873
00:36:32,000 --> 00:36:35,280
on each texel if it's eight by eight

874
00:36:34,079 --> 00:36:36,079
right

875
00:36:35,280 --> 00:36:37,920
um

876
00:36:36,079 --> 00:36:41,440
but the problem is

877
00:36:37,920 --> 00:36:43,838
uh if you if you actually look at any

878
00:36:41,440 --> 00:36:45,358
given texel it's gonna be off by one

879
00:36:43,838 --> 00:36:47,440
like in either direction because it's

880
00:36:45,358 --> 00:36:50,319
random so there's there's gonna be some

881
00:36:47,440 --> 00:36:52,838
that have like one less or one more on

882
00:36:50,320 --> 00:36:55,760
them and so when you then go to output

883
00:36:52,838 --> 00:36:58,320
exactly 16 or something

884
00:36:55,760 --> 00:37:01,520
from that square you're not gonna get 16

885
00:36:58,320 --> 00:37:01,519
right that's not going to happen

886
00:37:07,199 --> 00:37:09,838
you know what i'm saying

887
00:37:23,039 --> 00:37:26,480
i'm hungry and i need some crunch i i

888
00:37:24,880 --> 00:37:28,240
feel like i need the little i need some

889
00:37:26,480 --> 00:37:29,760
little chicharrones i feel like we need

890
00:37:28,239 --> 00:37:32,000
to take like a 10 second chicharron

891
00:37:29,760 --> 00:37:32,000
break

892
00:37:32,079 --> 00:37:35,119
uh to try and get downstairs and get

893
00:37:33,440 --> 00:37:36,639
some chicharrones but that's separate

894
00:37:35,119 --> 00:37:38,240
that's neither here nor there i suppose

895
00:37:36,639 --> 00:37:40,559
all right anyway

896
00:37:38,239 --> 00:37:43,199
um so yeah this was kind of busted and

897
00:37:40,559 --> 00:37:45,679
now it's a little less busted so um but

898
00:37:43,199 --> 00:37:48,399
this is still a problem so i feel like

899
00:37:45,679 --> 00:37:51,759
we would have to increase the total

900
00:37:48,400 --> 00:37:54,480
number of directions we ask for in the

901
00:37:51,760 --> 00:37:56,560
distribution

902
00:37:54,480 --> 00:37:59,119
like this total direction count needs to

903
00:37:56,559 --> 00:38:00,880
be like higher because when we pull

904
00:37:59,119 --> 00:38:03,440
stuff out of the thing

905
00:38:00,880 --> 00:38:05,358
we gotta have more there has to be

906
00:38:03,440 --> 00:38:09,280
proportionally more

907
00:38:05,358 --> 00:38:12,159
uh random points than we need otherwise

908
00:38:09,280 --> 00:38:15,280
it's not going to come out to 16 per

909
00:38:12,159 --> 00:38:16,559
it's just not going to happen right

910
00:38:15,280 --> 00:38:19,680
and so

911
00:38:16,559 --> 00:38:20,559
i don't know the best way to do that

912
00:38:19,679 --> 00:38:23,759
but

913
00:38:20,559 --> 00:38:23,759
you know um

914
00:38:30,079 --> 00:38:33,839
i also don't know how this thing knows

915
00:38:32,320 --> 00:38:35,838
how many directions there would be

916
00:38:33,838 --> 00:38:37,440
that's a little bit weird as well so i

917
00:38:35,838 --> 00:38:38,559
feel like this is just kind of a little

918
00:38:37,440 --> 00:38:40,320
broken

919
00:38:38,559 --> 00:38:42,799
and i don't love it

920
00:38:40,320 --> 00:38:44,079
this is fine in that you ask it to do

921
00:38:42,800 --> 00:38:46,800
some number of directions and it

922
00:38:44,079 --> 00:38:49,200
produces like a bundle right

923
00:38:46,800 --> 00:38:52,079
um but i think we want something maybe

924
00:38:49,199 --> 00:38:53,519
like storage for this that takes with it

925
00:38:52,079 --> 00:38:54,400
the size

926
00:38:53,519 --> 00:38:56,719
so

927
00:38:54,400 --> 00:38:56,720
like

928
00:38:57,679 --> 00:39:03,358
something like

929
00:38:59,440 --> 00:39:07,119
uh direction builder or i don't know

930
00:39:03,358 --> 00:39:07,119
direction gen you know

931
00:39:09,519 --> 00:39:13,519
so that you know how many of these you

932
00:39:11,519 --> 00:39:16,159
generated

933
00:39:13,519 --> 00:39:18,559
uh i think you want that

934
00:39:16,159 --> 00:39:21,559
you know what i'm saying

935
00:39:18,559 --> 00:39:21,559
uh

936
00:39:29,679 --> 00:39:37,279
so generate poisson samples here

937
00:39:34,159 --> 00:39:37,279
nobody calls

938
00:39:38,480 --> 00:39:43,838
we call generate poisson

939
00:39:41,199 --> 00:39:43,838
distribution

940
00:39:44,960 --> 00:39:49,599
but nobody calls generate poisson

941
00:39:47,039 --> 00:39:49,599
samples

942
00:39:50,159 --> 00:39:56,960
so let's get rid of it

943
00:39:52,960 --> 00:40:00,880
focus on what we actually have

944
00:39:56,960 --> 00:40:00,880
nobody calls test funk either

945
00:40:01,679 --> 00:40:05,118
okay

946
00:40:03,119 --> 00:40:08,079
um so when we call

947
00:40:05,119 --> 00:40:11,340
uh generate poisson distribution here

948
00:40:08,079 --> 00:40:12,480
maybe we give this uh like hey

949
00:40:11,340 --> 00:40:14,000
[Music]

950
00:40:12,480 --> 00:40:16,960
you know return us one of these

951
00:40:14,000 --> 00:40:18,559
direction gen things

952
00:40:16,960 --> 00:40:20,079
um

953
00:40:18,559 --> 00:40:22,880
and

954
00:40:20,079 --> 00:40:25,359
it looks like it doesn't care like this

955
00:40:22,880 --> 00:40:28,160
displacements is just the thing

956
00:40:25,358 --> 00:40:30,719
that it uses like internally

957
00:40:28,159 --> 00:40:30,719
it seems

958
00:40:31,599 --> 00:40:35,880
so we don't have to return that

959
00:40:45,199 --> 00:40:48,199
um

960
00:40:53,760 --> 00:41:01,119
what is this used

961
00:40:57,280 --> 00:41:01,119
dur index equals false

962
00:41:02,079 --> 00:41:05,039
what is that for

963
00:41:03,599 --> 00:41:07,519
that

964
00:41:05,039 --> 00:41:09,358
doesn't seem to

965
00:41:07,519 --> 00:41:12,318
be a thing

966
00:41:09,358 --> 00:41:14,400
like like that's not actually a thing

967
00:41:12,318 --> 00:41:15,679
so it seems like this is

968
00:41:14,400 --> 00:41:18,079
bogus

969
00:41:15,679 --> 00:41:18,078
i guess

970
00:41:18,480 --> 00:41:23,039
i don't know

971
00:41:20,480 --> 00:41:25,039
um so anyway uh if we take a look at

972
00:41:23,039 --> 00:41:26,960
this direction gen generate poisson

973
00:41:25,039 --> 00:41:28,960
samples thing if we imagine that this

974
00:41:26,960 --> 00:41:31,199
was going to return us

975
00:41:28,960 --> 00:41:32,880
uh a result here uh the result

976
00:41:31,199 --> 00:41:34,960
directions in fact i guess we can just

977
00:41:32,880 --> 00:41:37,119
move it down here because i don't care

978
00:41:34,960 --> 00:41:38,720
um the result i don't know why there is

979
00:41:37,119 --> 00:41:40,800
a printf but i guess it's just because

980
00:41:38,719 --> 00:41:42,318
it prints out a status

981
00:41:40,800 --> 00:41:44,240
right it's like it's printing out a

982
00:41:42,318 --> 00:41:46,239
status with a backslash r so this just

983
00:41:44,239 --> 00:41:47,679
advances the line

984
00:41:46,239 --> 00:41:48,799
um

985
00:41:47,679 --> 00:41:50,879
whatever

986
00:41:48,800 --> 00:41:52,640
so directions equals directions whatever

987
00:41:50,880 --> 00:41:54,240
and result equals result and blah blah

988
00:41:52,639 --> 00:41:56,480
blah

989
00:41:54,239 --> 00:41:56,479
so

990
00:41:57,358 --> 00:42:01,000
if we want to

991
00:42:02,880 --> 00:42:06,800
uh

992
00:42:03,838 --> 00:42:09,759
if we want to in here take the

993
00:42:06,800 --> 00:42:13,920
total direction count

994
00:42:09,760 --> 00:42:13,920
that was requested and save it

995
00:42:15,358 --> 00:42:19,199
now we can do that and at least now

996
00:42:17,039 --> 00:42:21,920
we're passing around something that

997
00:42:19,199 --> 00:42:23,439
has a size because we're going to need

998
00:42:21,920 --> 00:42:25,358
that uh

999
00:42:23,440 --> 00:42:26,240
eventually

1000
00:42:25,358 --> 00:42:28,000
so

1001
00:42:26,239 --> 00:42:30,959
we've got that now

1002
00:42:28,000 --> 00:42:34,000
um and that's good and so when you do

1003
00:42:30,960 --> 00:42:35,519
like a generate uh poisson

1004
00:42:34,000 --> 00:42:36,800
lighting pattern or whatever i guess we

1005
00:42:35,519 --> 00:42:38,239
don't care about this one because we

1006
00:42:36,800 --> 00:42:39,760
don't use poisson lighting pattern

1007
00:42:38,239 --> 00:42:41,519
anymore right

1008
00:42:39,760 --> 00:42:42,800
so when we do generate octahedral

1009
00:42:41,519 --> 00:42:45,838
lighting pattern

1010
00:42:42,800 --> 00:42:45,839
like we do here

1011
00:42:46,000 --> 00:42:48,239
um

1012
00:42:48,400 --> 00:42:54,800
somehow the oct map dim doesn't have a

1013
00:42:50,800 --> 00:42:54,800
plus operator you're kidding me

1014
00:42:56,639 --> 00:43:02,639
like v2u plus v2u isn't a thing

1015
00:43:01,199 --> 00:43:05,960
that can't be right

1016
00:43:02,639 --> 00:43:05,960
can it be

1017
00:43:16,480 --> 00:43:21,599
have we literally never had to add two

1018
00:43:18,880 --> 00:43:21,599
of these together

1019
00:43:22,000 --> 00:43:27,440
also we do have a v

1020
00:43:24,639 --> 00:43:30,639
oh no that's v3s never mind

1021
00:43:27,440 --> 00:43:30,639
i guess we don't

1022
00:43:33,679 --> 00:43:36,318
i

1023
00:43:34,880 --> 00:43:39,800
i mean

1024
00:43:36,318 --> 00:43:39,800
it ain't there

1025
00:43:40,719 --> 00:43:45,039
so i guess we just never needed that

1026
00:43:43,119 --> 00:43:46,800
we've only ever added operators that we

1027
00:43:45,039 --> 00:43:50,318
actually use

1028
00:43:46,800 --> 00:43:50,318
and i guess we never used it

1029
00:43:51,119 --> 00:43:57,920
i ain't seeing it

1030
00:43:54,639 --> 00:43:59,838
um so v2u just doesn't seem to have much

1031
00:43:57,920 --> 00:44:01,358
any in general like there's hardly

1032
00:43:59,838 --> 00:44:02,719
anything here for it

1033
00:44:01,358 --> 00:44:05,039
um

1034
00:44:02,719 --> 00:44:09,399
is there even a v2u operations section

1035
00:44:05,039 --> 00:44:09,400
there isn't even a section for it

1036
00:44:09,599 --> 00:44:13,599
so i guess we want a thing here for

1037
00:44:14,800 --> 00:44:18,200
b2 operations

1038
00:44:28,159 --> 00:44:32,399
not a lot to see here but

1039
00:44:30,400 --> 00:44:35,400
probably something we want

1040
00:44:32,400 --> 00:44:35,400
right

1041
00:44:36,480 --> 00:44:40,000
okay

1042
00:44:37,679 --> 00:44:42,399
uh back to our story so the poisson

1043
00:44:40,000 --> 00:44:44,559
distribution will now return like a

1044
00:44:42,400 --> 00:44:45,358
thing that actually keeps how many there

1045
00:44:44,559 --> 00:44:46,719
are

1046
00:44:45,358 --> 00:44:47,440
right

1047
00:44:46,719 --> 00:44:51,199
so

1048
00:44:47,440 --> 00:44:54,000
this way we get uh input directions

1049
00:44:51,199 --> 00:44:55,679
uh we'll just call that input for now

1050
00:44:54,000 --> 00:44:57,440
so we generate poisson distribution with

1051
00:44:55,679 --> 00:44:59,199
the total direction count

1052
00:44:57,440 --> 00:45:02,240
uh and this is like

1053
00:44:59,199 --> 00:45:03,679
uh the total direction count would be

1054
00:45:02,239 --> 00:45:06,239
saved in here

1055
00:45:03,679 --> 00:45:06,239
you know what i'm saying

1056
00:45:08,159 --> 00:45:11,199
i feel like that's better

1057
00:45:17,199 --> 00:45:20,879
and we probably have

1058
00:45:19,599 --> 00:45:22,160
sort of like

1059
00:45:20,880 --> 00:45:24,318
a

1060
00:45:22,159 --> 00:45:26,480
a uh

1061
00:45:24,318 --> 00:45:28,318
outputter account

1062
00:45:26,480 --> 00:45:30,159
and an input dirt count and they're

1063
00:45:28,318 --> 00:45:31,599
different because of that scaling

1064
00:45:30,159 --> 00:45:33,440
difference that i said like we know that

1065
00:45:31,599 --> 00:45:34,559
we have to generate more a denser

1066
00:45:33,440 --> 00:45:35,760
covering if we want to be able to

1067
00:45:34,559 --> 00:45:37,199
extract

1068
00:45:35,760 --> 00:45:40,160
points from it

1069
00:45:37,199 --> 00:45:42,159
so the input direction count is going to

1070
00:45:40,159 --> 00:45:43,519
kind of be like this

1071
00:45:42,159 --> 00:45:45,440
times

1072
00:45:43,519 --> 00:45:46,960
some extra

1073
00:45:45,440 --> 00:45:48,480
you know what i mean

1074
00:45:46,960 --> 00:45:50,880
like

1075
00:45:48,480 --> 00:45:50,880
um

1076
00:45:52,480 --> 00:45:55,760
i don't really know

1077
00:45:55,920 --> 00:46:00,960
how to sensibly

1078
00:45:57,519 --> 00:46:03,358
figure that out but it's gonna have to

1079
00:46:00,960 --> 00:46:05,199
be like oh you generate 20 extra or

1080
00:46:03,358 --> 00:46:06,400
something right it's a 20 denser

1081
00:46:05,199 --> 00:46:08,480
distribution

1082
00:46:06,400 --> 00:46:11,280
or something right

1083
00:46:08,480 --> 00:46:11,280
so it'd be like

1084
00:46:12,239 --> 00:46:17,358
hey uh yeah take the output count

1085
00:46:18,000 --> 00:46:21,358
and

1086
00:46:19,280 --> 00:46:24,000
you know we're gonna multiply it by some

1087
00:46:21,358 --> 00:46:25,519
scaling factor that we we just randomly

1088
00:46:24,000 --> 00:46:30,239
have to pick

1089
00:46:25,519 --> 00:46:31,599
um and then we ask for that number

1090
00:46:30,239 --> 00:46:34,559
right

1091
00:46:31,599 --> 00:46:37,200
and the output direction count

1092
00:46:34,559 --> 00:46:38,719
uh is

1093
00:46:37,199 --> 00:46:40,159
is actually going to be a different

1094
00:46:38,719 --> 00:46:41,358
thing right

1095
00:46:40,159 --> 00:46:43,039
i wonder if we

1096
00:46:41,358 --> 00:46:45,519
direction

1097
00:46:43,039 --> 00:46:47,759
array let's call this direction array

1098
00:46:45,519 --> 00:46:49,599
so that way like we can be a little bit

1099
00:46:47,760 --> 00:46:51,520
a little bit better here where we say

1100
00:46:49,599 --> 00:46:54,240
like okay we get an input direction

1101
00:46:51,519 --> 00:46:54,239
array back

1102
00:46:55,280 --> 00:47:00,000
um from generating the samples

1103
00:46:57,760 --> 00:47:00,000
and

1104
00:47:02,960 --> 00:47:06,960
we can allocate one of these

1105
00:47:05,199 --> 00:47:08,799
we could also have like a thing that

1106
00:47:06,960 --> 00:47:11,358
allocates these for us so that we don't

1107
00:47:08,800 --> 00:47:14,400
have to have all these mallocs around

1108
00:47:11,358 --> 00:47:14,400
like we could do this

1109
00:47:18,880 --> 00:47:24,680
where we just say hey how many of those

1110
00:47:20,559 --> 00:47:24,680
did you want right

1111
00:47:34,318 --> 00:47:37,599
and we don't really have to care about

1112
00:47:35,679 --> 00:47:40,078
this code at all because it's just some

1113
00:47:37,599 --> 00:47:41,920
offline tool we run it can be as crappy

1114
00:47:40,079 --> 00:47:44,160
as you want but i'm just trying to make

1115
00:47:41,920 --> 00:47:45,760
it easy to read and simple right

1116
00:47:44,159 --> 00:47:47,598
uh because we have to debug it so i

1117
00:47:45,760 --> 00:47:49,520
don't want it to be like it can be

1118
00:47:47,599 --> 00:47:53,039
somewhat horrible but i don't want it to

1119
00:47:49,519 --> 00:47:55,358
be like excruciatingly horrible right

1120
00:47:53,039 --> 00:47:57,119
um

1121
00:47:55,358 --> 00:47:59,679
so okay we can allocate a direction

1122
00:47:57,119 --> 00:48:01,358
array uh and so now we can sort of do

1123
00:47:59,679 --> 00:48:03,759
something more like this where we say

1124
00:48:01,358 --> 00:48:07,679
okay the result here

1125
00:48:03,760 --> 00:48:10,000
gets allocated up at the front

1126
00:48:07,679 --> 00:48:13,358
where we say okay

1127
00:48:10,000 --> 00:48:15,280
the result is allocator array of the

1128
00:48:13,358 --> 00:48:17,279
total count

1129
00:48:15,280 --> 00:48:18,839
there's we can also use this to get the

1130
00:48:17,280 --> 00:48:21,920
other thing which is like

1131
00:48:18,838 --> 00:48:22,880
displacements um

1132
00:48:21,920 --> 00:48:25,358
and

1133
00:48:22,880 --> 00:48:26,720
we could also make these be e

1134
00:48:25,358 --> 00:48:29,920
right

1135
00:48:26,719 --> 00:48:29,919
just simplify that a little bit

1136
00:48:30,000 --> 00:48:33,760
like the elements of it so it's just

1137
00:48:31,838 --> 00:48:36,159
like a little bit cleaner

1138
00:48:33,760 --> 00:48:38,880
not cleaner simpler to read

1139
00:48:36,159 --> 00:48:41,118
so we allocate a direction array

1140
00:48:38,880 --> 00:48:42,640
for each of these the results and the

1141
00:48:41,119 --> 00:48:43,599
displacements

1142
00:48:42,639 --> 00:48:45,358
um

1143
00:48:43,599 --> 00:48:47,119
now that gets handled automatically then

1144
00:48:45,358 --> 00:48:48,239
we just have to change this to like in

1145
00:48:47,119 --> 00:48:50,318
fact we could even rename this

1146
00:48:48,239 --> 00:48:52,239
directions then it's even simpler so

1147
00:48:50,318 --> 00:48:54,239
it's just directions dot e

1148
00:48:52,239 --> 00:48:58,239
is the direction itself

1149
00:48:54,239 --> 00:49:02,838
um and then the displacements would oops

1150
00:48:58,239 --> 00:49:02,838
displacements will also be e

1151
00:49:03,599 --> 00:49:07,359
but otherwise the code remains the same

1152
00:49:12,400 --> 00:49:16,000
okay

1153
00:49:13,838 --> 00:49:17,679
so that's pretty easy and then these for

1154
00:49:16,000 --> 00:49:19,679
the outputs would do the exact same

1155
00:49:17,679 --> 00:49:23,358
thing so the direction array for the

1156
00:49:19,679 --> 00:49:25,598
output uh would also say hey i need

1157
00:49:23,358 --> 00:49:25,598
um

1158
00:49:26,639 --> 00:49:29,358
an

1159
00:49:27,559 --> 00:49:30,400
allocary

1160
00:49:29,358 --> 00:49:32,719
like so

1161
00:49:30,400 --> 00:49:35,200
and off we go

1162
00:49:32,719 --> 00:49:35,199
so

1163
00:49:40,318 --> 00:49:46,159
that's the basics of what we're doing um

1164
00:49:44,800 --> 00:49:48,000
this here

1165
00:49:46,159 --> 00:49:52,399
is

1166
00:49:48,000 --> 00:49:54,639
not useful this is so raise protection

1167
00:49:52,400 --> 00:49:55,440
goes on here

1168
00:49:54,639 --> 00:49:57,279
um

1169
00:49:55,440 --> 00:49:58,880
we've

1170
00:49:57,280 --> 00:50:01,200
have it all

1171
00:49:58,880 --> 00:50:02,800
so we have our tx already set up and our

1172
00:50:01,199 --> 00:50:04,639
ray index also

1173
00:50:02,800 --> 00:50:06,240
uh but now we've got to actually write

1174
00:50:04,639 --> 00:50:08,078
this internal

1175
00:50:06,239 --> 00:50:11,358
bit to work properly

1176
00:50:08,079 --> 00:50:12,640
we also need to return the output

1177
00:50:11,358 --> 00:50:14,880
here

1178
00:50:12,639 --> 00:50:14,879
so

1179
00:50:15,838 --> 00:50:21,159
and then we have to look at how this

1180
00:50:16,880 --> 00:50:21,160
thing actually works so

1181
00:50:26,318 --> 00:50:30,639
all we're doing here is searching like

1182
00:50:28,159 --> 00:50:32,879
in an n squared slow way

1183
00:50:30,639 --> 00:50:33,759
this is just searching to find

1184
00:50:32,880 --> 00:50:36,960
um

1185
00:50:33,760 --> 00:50:36,960
in the inputs right

1186
00:50:38,719 --> 00:50:42,318
it's like we search over the inputs by

1187
00:50:40,719 --> 00:50:44,239
the way i need to fix that like you

1188
00:50:42,318 --> 00:50:46,639
can't see the semicolon with the cursor

1189
00:50:44,239 --> 00:50:49,759
the way it is in for coda right now

1190
00:50:46,639 --> 00:50:50,799
that cursor probably needs to be

1191
00:50:49,760 --> 00:50:53,200
a little bit different i have to

1192
00:50:50,800 --> 00:50:55,200
remember to try to fix that

1193
00:50:53,199 --> 00:50:58,159
um it's like too fat you can't actually

1194
00:50:55,199 --> 00:51:03,480
see what the thing is underneath it

1195
00:50:58,159 --> 00:51:03,480
um anyway uh so input directions

1196
00:51:03,760 --> 00:51:08,119
just called input right yeah

1197
00:51:09,280 --> 00:51:13,920
so we're looking over the inputs to find

1198
00:51:11,760 --> 00:51:15,520
one that is pointing in the direction we

1199
00:51:13,920 --> 00:51:16,480
actually needed to assuming that we find

1200
00:51:15,519 --> 00:51:19,199
it we

1201
00:51:16,480 --> 00:51:21,199
assign it to like a value that we know

1202
00:51:19,199 --> 00:51:23,118
marks it as having been used so we won't

1203
00:51:21,199 --> 00:51:24,639
use it again

1204
00:51:23,119 --> 00:51:30,318
and then

1205
00:51:24,639 --> 00:51:30,318
we output it as one for this thing

1206
00:51:31,760 --> 00:51:34,000
right

1207
00:51:34,079 --> 00:51:38,720
we then probably want to make this

1208
00:51:35,920 --> 00:51:39,838
really harsh like we probably want to

1209
00:51:38,719 --> 00:51:43,118
just like

1210
00:51:39,838 --> 00:51:47,480
print an error if we don't find one

1211
00:51:43,119 --> 00:51:47,480
so so basically like

1212
00:51:52,559 --> 00:51:55,680
if

1213
00:51:53,440 --> 00:51:55,679
like

1214
00:52:01,119 --> 00:52:06,559
it'd be more like this

1215
00:52:03,679 --> 00:52:10,078
if we find one great if we don't we're

1216
00:52:06,559 --> 00:52:12,079
in trouble so like if we don't find one

1217
00:52:10,079 --> 00:52:15,720
we like print out an error like that

1218
00:52:12,079 --> 00:52:15,720
this is really bad

1219
00:52:23,599 --> 00:52:29,838
like for this texel we could not find

1220
00:52:27,519 --> 00:52:31,199
um

1221
00:52:29,838 --> 00:52:34,400
enough

1222
00:52:31,199 --> 00:52:35,439
like we we just ran out

1223
00:52:34,400 --> 00:52:36,800
right

1224
00:52:35,440 --> 00:52:38,800
and we just want that to be an error

1225
00:52:36,800 --> 00:52:40,559
because like basically like we need to

1226
00:52:38,800 --> 00:52:42,800
go fix the code like it just it's not

1227
00:52:40,559 --> 00:52:47,000
good enough at that point right and we

1228
00:52:42,800 --> 00:52:47,000
need to we need to fix it

1229
00:52:47,280 --> 00:52:53,119
um all right so then we have

1230
00:52:50,559 --> 00:52:56,079
our direction array

1231
00:52:53,119 --> 00:52:57,119
uh that we get back from this

1232
00:52:56,079 --> 00:53:00,480
and

1233
00:52:57,119 --> 00:53:03,838
uh the things that we're now reading are

1234
00:53:00,480 --> 00:53:05,599
we have the octahedron dimension that's

1235
00:53:03,838 --> 00:53:07,279
correct

1236
00:53:05,599 --> 00:53:11,760
um

1237
00:53:07,280 --> 00:53:11,760
and we have the rays per texel

1238
00:53:12,239 --> 00:53:15,838
right

1239
00:53:13,679 --> 00:53:15,838
so

1240
00:53:17,039 --> 00:53:25,759
this is really octahedron side

1241
00:53:20,480 --> 00:53:28,559
uh and so the v2u for the octahedron dim

1242
00:53:25,760 --> 00:53:31,520
um is going to be the

1243
00:53:28,559 --> 00:53:32,800
side like twice because we're only doing

1244
00:53:31,519 --> 00:53:34,880
square right now although we you know

1245
00:53:32,800 --> 00:53:36,640
can change that but at the moment we

1246
00:53:34,880 --> 00:53:39,039
don't have any plans to

1247
00:53:36,639 --> 00:53:39,838
and the raise for texel is just directly

1248
00:53:39,039 --> 00:53:41,759
in

1249
00:53:39,838 --> 00:53:43,279
um i don't know why these are out of

1250
00:53:41,760 --> 00:53:44,880
order

1251
00:53:43,280 --> 00:53:47,359
so you'd think you'd write it like that

1252
00:53:44,880 --> 00:53:51,358
like how many rays how many things maybe

1253
00:53:47,358 --> 00:53:51,358
you want it more like that um

1254
00:53:53,599 --> 00:53:57,838
so

1255
00:53:54,400 --> 00:53:57,838
let's do it this way

1256
00:54:14,318 --> 00:54:19,838
i don't know uh

1257
00:54:16,480 --> 00:54:19,838
octahedron texel

1258
00:54:23,599 --> 00:54:27,680
there needs to be a better word for when

1259
00:54:25,280 --> 00:54:31,359
you have a square texture

1260
00:54:27,679 --> 00:54:31,358
you're saying one of them

1261
00:54:32,159 --> 00:54:35,159
um

1262
00:54:44,239 --> 00:54:47,439
something like that it's really really

1263
00:54:46,159 --> 00:54:50,159
cumbersome

1264
00:54:47,440 --> 00:54:50,159
but um

1265
00:54:51,039 --> 00:54:56,079
oh well uh and then here we have raise

1266
00:54:53,519 --> 00:54:56,079
for texal

1267
00:54:57,760 --> 00:55:00,079
right

1268
00:54:59,280 --> 00:55:01,359
so

1269
00:55:00,079 --> 00:55:03,119
and then the destination file of course

1270
00:55:01,358 --> 00:55:05,358
which is a separate issue

1271
00:55:03,119 --> 00:55:07,280
um so we get the octahedron side we get

1272
00:55:05,358 --> 00:55:09,598
the rays per texel

1273
00:55:07,280 --> 00:55:12,559
and we pass those in

1274
00:55:09,599 --> 00:55:14,798
uh and then later when we do outper

1275
00:55:12,559 --> 00:55:18,000
output sphere inl

1276
00:55:14,798 --> 00:55:20,159
uh we just pass the same things again so

1277
00:55:18,000 --> 00:55:21,599
actually it's not a huge count sorry

1278
00:55:20,159 --> 00:55:25,558
it's ox dim

1279
00:55:21,599 --> 00:55:25,559
so we'd pass the same thing

1280
00:55:34,880 --> 00:55:37,440
so i think that's okay

1281
00:55:36,480 --> 00:55:39,199
uh

1282
00:55:37,440 --> 00:55:41,358
and then the output sphere thing just

1283
00:55:39,199 --> 00:55:45,798
needs to change slightly

1284
00:55:41,358 --> 00:55:45,798
right to be a little bit different

1285
00:55:57,280 --> 00:56:00,960
this is going to be one of them arrays

1286
00:56:00,159 --> 00:56:02,960
right

1287
00:56:00,960 --> 00:56:05,920
so this is

1288
00:56:02,960 --> 00:56:05,920
a direction array

1289
00:56:09,039 --> 00:56:11,838
we output

1290
00:56:10,639 --> 00:56:14,639
the

1291
00:56:11,838 --> 00:56:16,400
sample direction thing we output the map

1292
00:56:14,639 --> 00:56:19,118
dim

1293
00:56:16,400 --> 00:56:21,358
the rays for texel

1294
00:56:19,119 --> 00:56:22,960
and this is going to be like a only one

1295
00:56:21,358 --> 00:56:23,920
of them at the moment because we don't

1296
00:56:22,960 --> 00:56:25,760
support

1297
00:56:23,920 --> 00:56:28,159
rectangular

1298
00:56:25,760 --> 00:56:28,160
output

1299
00:56:28,639 --> 00:56:32,480
even though we would properly handle it

1300
00:56:30,318 --> 00:56:33,599
we just don't bother i guess

1301
00:56:32,480 --> 00:56:36,240
um

1302
00:56:33,599 --> 00:56:38,318
we then have this thing here do exactly

1303
00:56:36,239 --> 00:56:39,838
what you would think uh the total

1304
00:56:38,318 --> 00:56:41,440
direction account goes away because i

1305
00:56:39,838 --> 00:56:43,199
now pass that through properly like i

1306
00:56:41,440 --> 00:56:46,240
wanted to before

1307
00:56:43,199 --> 00:56:48,879
um and

1308
00:56:46,239 --> 00:56:48,879
off we go

1309
00:56:52,079 --> 00:56:56,960
okay

1310
00:56:53,920 --> 00:56:58,798
so now i think we've got it all we've

1311
00:56:56,960 --> 00:57:00,720
we've have it all

1312
00:56:58,798 --> 00:57:03,280
and i think the whole process should now

1313
00:57:00,719 --> 00:57:04,159
work barring bugs which there are always

1314
00:57:03,280 --> 00:57:06,079
are

1315
00:57:04,159 --> 00:57:09,279
but i think we're more or less good

1316
00:57:06,079 --> 00:57:12,280
right like that should output the thing

1317
00:57:09,280 --> 00:57:12,280
and

1318
00:57:20,400 --> 00:57:23,358
i don't i don't think we'd need to do

1319
00:57:21,920 --> 00:57:27,318
anything else i mean we have the kind of

1320
00:57:23,358 --> 00:57:27,318
bs constant of 0.2

1321
00:57:27,920 --> 00:57:31,200
or 1.2 i should say

1322
00:57:32,639 --> 00:57:35,440
but you know

1323
00:57:36,719 --> 00:57:42,318
what can you do

1324
00:57:38,639 --> 00:57:43,838
so uh if we've

1325
00:57:42,318 --> 00:57:46,079
built it

1326
00:57:43,838 --> 00:57:46,078
um

1327
00:57:46,239 --> 00:57:51,039
we can now run the h8 sphere

1328
00:57:49,599 --> 00:57:55,039
program

1329
00:57:51,039 --> 00:57:58,400
and we can say that it's like eight

1330
00:57:55,039 --> 00:58:00,719
uh and that the raise per texel is

1331
00:57:58,400 --> 00:58:02,480
16 which i think is roughly what we were

1332
00:58:00,719 --> 00:58:05,759
targeting

1333
00:58:02,480 --> 00:58:07,358
uh and then the destination inl is like

1334
00:58:05,760 --> 00:58:09,040
i don't remember it's like sphere

1335
00:58:07,358 --> 00:58:11,279
samples or

1336
00:58:09,039 --> 00:58:12,880
hh lighting or i don't even remember

1337
00:58:11,280 --> 00:58:15,200
what the heck it's called

1338
00:58:12,880 --> 00:58:15,200
um

1339
00:58:15,679 --> 00:58:19,519
handmade sampling spheres

1340
00:58:18,000 --> 00:58:23,000
handmade

1341
00:58:19,519 --> 00:58:23,000
sampling spheres

1342
00:58:25,358 --> 00:58:28,480
and so let's like

1343
00:58:29,199 --> 00:58:33,838
kill this

1344
00:58:31,358 --> 00:58:35,759
buffer

1345
00:58:33,838 --> 00:58:36,880
let's run this program

1346
00:58:35,760 --> 00:58:38,640
and

1347
00:58:36,880 --> 00:58:40,160
and who knows what it's going to do i

1348
00:58:38,639 --> 00:58:41,598
certainly don't

1349
00:58:40,159 --> 00:58:43,920
um

1350
00:58:41,599 --> 00:58:43,920
and

1351
00:58:46,318 --> 00:58:52,639
i think when this gets below 2-5 if it

1352
00:58:49,280 --> 00:58:54,000
ever gets below two five it might not

1353
00:58:52,639 --> 00:58:56,239
no it did

1354
00:58:54,000 --> 00:58:56,239
um

1355
00:58:56,960 --> 00:59:01,358
so you can see here like it it

1356
00:58:58,960 --> 00:59:03,599
definitely has a problem it can't find

1357
00:59:01,358 --> 00:59:04,960
enough texels

1358
00:59:03,599 --> 00:59:07,200
right

1359
00:59:04,960 --> 00:59:07,199
um

1360
00:59:08,719 --> 00:59:14,399
which may be due to bugs i'm not sure

1361
00:59:12,239 --> 00:59:16,479
um but anyway

1362
00:59:14,400 --> 00:59:18,720
that's the program running we have to go

1363
00:59:16,480 --> 00:59:20,960
make it work better than it does

1364
00:59:18,719 --> 00:59:20,959
but

1365
00:59:21,199 --> 00:59:24,239
if we now

1366
00:59:22,400 --> 00:59:25,280
look at the sampling spheres what we

1367
00:59:24,239 --> 00:59:28,078
should see

1368
00:59:25,280 --> 00:59:30,400
is because we're flooding the if we

1369
00:59:28,079 --> 00:59:31,359
didn't find one

1370
00:59:30,400 --> 00:59:34,639
then

1371
00:59:31,358 --> 00:59:35,759
output zero we can now much more easily

1372
00:59:34,639 --> 00:59:37,039
see

1373
00:59:35,760 --> 00:59:38,720
who

1374
00:59:37,039 --> 00:59:42,318
was able to fill

1375
00:59:38,719 --> 00:59:44,239
their uh quota like and who wasn't

1376
00:59:42,318 --> 00:59:48,000
right

1377
00:59:44,239 --> 00:59:50,000
now we also should be able to uh

1378
00:59:48,000 --> 00:59:53,599
like our lighting will be totally borked

1379
00:59:50,000 --> 00:59:56,079
because it's reading the table wrong now

1380
00:59:53,599 --> 00:59:58,640
oh what's this this is good our this

1381
00:59:56,079 --> 00:59:59,599
this is saying that it's not

1382
00:59:58,639 --> 01:00:01,679
enough

1383
00:59:59,599 --> 01:00:04,318
things right oh no it's not it's just

1384
01:00:01,679 --> 01:00:04,318
saying that it

1385
01:00:05,920 --> 01:00:08,358
it's missing

1386
01:00:07,440 --> 01:00:11,838
a

1387
01:00:08,358 --> 01:00:13,519
parentheses before semicolon is that the

1388
01:00:11,838 --> 01:00:16,159
total light did i print this out wrong

1389
01:00:13,519 --> 01:00:19,519
this number

1390
01:00:16,159 --> 01:00:22,000
oh yeah like

1391
01:00:19,519 --> 01:00:24,798
why is that word wrapping

1392
01:00:22,000 --> 01:00:27,039
i guess because this is an inl file

1393
01:00:24,798 --> 01:00:29,838
but anyway you can see it's missing

1394
01:00:27,039 --> 01:00:31,358
the closing paren

1395
01:00:29,838 --> 01:00:33,599
so

1396
01:00:31,358 --> 01:00:35,598
um okay so now we can change our stuff

1397
01:00:33,599 --> 01:00:37,599
to read from this properly and draw it

1398
01:00:35,599 --> 01:00:39,760
but it's going to be wrong um so that's

1399
01:00:37,599 --> 01:00:41,519
fine also i don't know what this that

1400
01:00:39,760 --> 01:00:43,359
says there's a missing

1401
01:00:41,519 --> 01:00:46,159
a pound if

1402
01:00:43,358 --> 01:00:48,159
that's hanging here apparently

1403
01:00:46,159 --> 01:00:51,159
so i don't know what that's about

1404
01:00:48,159 --> 01:00:51,159
but

1405
01:00:58,559 --> 01:01:01,599
did we accidentally

1406
01:01:06,639 --> 01:01:10,279
that all looks right

1407
01:01:12,880 --> 01:01:16,358
that looks right

1408
01:01:28,639 --> 01:01:33,039
i will say i don't quite understand what

1409
01:01:30,400 --> 01:01:34,480
that if is for so uh you know what we

1410
01:01:33,039 --> 01:01:36,558
this is what happened

1411
01:01:34,480 --> 01:01:38,960
we forgot to remove this when we

1412
01:01:36,559 --> 01:01:40,640
commented this out right so that one it

1413
01:01:38,960 --> 01:01:42,720
shouldn't be there anymore

1414
01:01:40,639 --> 01:01:44,480
that was the only weirdness

1415
01:01:42,719 --> 01:01:46,078
okay so before we do anything else let's

1416
01:01:44,480 --> 01:01:47,119
go back to h8 sphere and put in the

1417
01:01:46,079 --> 01:01:48,559
missing

1418
01:01:47,119 --> 01:01:49,920
closing paren because the next time we

1419
01:01:48,559 --> 01:01:52,798
run this program it's going to output a

1420
01:01:49,920 --> 01:01:55,039
bogus file if we don't do that um so

1421
01:01:52,798 --> 01:01:56,318
then we can go through here and fix this

1422
01:01:55,039 --> 01:01:58,240
stuff so

1423
01:01:56,318 --> 01:02:00,798
uh the ray weight here is now just

1424
01:01:58,239 --> 01:02:04,000
always going to be we know that it's the

1425
01:02:00,798 --> 01:02:05,519
the uh raise per texel because that's

1426
01:02:04,000 --> 01:02:07,440
that's always going to be

1427
01:02:05,519 --> 01:02:08,798
the number that the the ratio that we

1428
01:02:07,440 --> 01:02:11,200
want to use because we're always going

1429
01:02:08,798 --> 01:02:13,599
to be summing

1430
01:02:11,199 --> 01:02:16,318
over that many right

1431
01:02:13,599 --> 01:02:19,680
um when we loop through here we now know

1432
01:02:16,318 --> 01:02:21,440
also that this is not really ray index

1433
01:02:19,679 --> 01:02:22,960
so this is

1434
01:02:21,440 --> 01:02:24,798
like

1435
01:02:22,960 --> 01:02:27,760
there's two things now there's a ray

1436
01:02:24,798 --> 01:02:31,119
index and a texel index and right now

1437
01:02:27,760 --> 01:02:34,079
ray index is actually also texal index

1438
01:02:31,119 --> 01:02:36,240
so if you at least i think and that's

1439
01:02:34,079 --> 01:02:37,599
wrong so we don't want that i also don't

1440
01:02:36,239 --> 01:02:38,879
think we need to keep this around like

1441
01:02:37,599 --> 01:02:39,838
we're not going to be doing it through

1442
01:02:38,880 --> 01:02:42,079
that

1443
01:02:39,838 --> 01:02:42,078
um

1444
01:02:42,239 --> 01:02:47,038
so uh

1445
01:02:43,838 --> 01:02:50,798
the transfer pps pulling out of this ray

1446
01:02:47,039 --> 01:02:52,400
index here that is actually not correct

1447
01:02:50,798 --> 01:02:55,038
if that makes sense

1448
01:02:52,400 --> 01:02:56,960
so we need to do a slight modification

1449
01:02:55,039 --> 01:02:59,839
here which is to say that the transfer

1450
01:02:56,960 --> 01:03:02,000
pps value there's really going to be a

1451
01:02:59,838 --> 01:03:04,078
different way that this works so the way

1452
01:03:02,000 --> 01:03:08,480
that this will actually work is more

1453
01:03:04,079 --> 01:03:11,920
like this we will have on the outside

1454
01:03:08,480 --> 01:03:13,199
where we're looping over the actual like

1455
01:03:11,920 --> 01:03:16,880
um

1456
01:03:13,199 --> 01:03:19,038
the actual texels one at a time

1457
01:03:16,880 --> 01:03:20,798
um

1458
01:03:19,039 --> 01:03:22,319
and by the way we need to make sure that

1459
01:03:20,798 --> 01:03:23,519
this is actually looped this way yeah it

1460
01:03:22,318 --> 01:03:24,960
is

1461
01:03:23,519 --> 01:03:26,639
um

1462
01:03:24,960 --> 01:03:28,720
what we need to do here is say the

1463
01:03:26,639 --> 01:03:29,679
actual that actually transfer pps is

1464
01:03:28,719 --> 01:03:31,199
going to be

1465
01:03:29,679 --> 01:03:33,759
summed

1466
01:03:31,199 --> 01:03:35,838
for by an accumulator so whichever one

1467
01:03:33,760 --> 01:03:37,760
we're on right now

1468
01:03:35,838 --> 01:03:40,000
we're going to have a transfer pps

1469
01:03:37,760 --> 01:03:42,880
accumulator which is just one

1470
01:03:40,000 --> 01:03:45,838
vector that we sum into over and over

1471
01:03:42,880 --> 01:03:48,559
for each ray and then the texel index

1472
01:03:45,838 --> 01:03:50,558
that we are actually advancing across

1473
01:03:48,559 --> 01:03:52,880
that is going to pick out which transfer

1474
01:03:50,559 --> 01:03:54,880
pps value we're actually targeting

1475
01:03:52,880 --> 01:03:57,039
so these right here are going to be

1476
01:03:54,880 --> 01:03:59,838
transfer pps accum

1477
01:03:57,039 --> 01:03:59,839
like so

1478
01:04:03,599 --> 01:04:06,318
and you can see we already have a to do

1479
01:04:04,960 --> 01:04:09,599
here to fix this because this is not

1480
01:04:06,318 --> 01:04:13,318
really necessary to do it this way right

1481
01:04:09,599 --> 01:04:13,318
we could make that better

1482
01:04:14,079 --> 01:04:18,720
so when we do that accumulation

1483
01:04:16,798 --> 01:04:21,280
we actually want to have both of those

1484
01:04:18,719 --> 01:04:23,279
and so now we've got two things we've

1485
01:04:21,280 --> 01:04:25,039
got the ray index as it moves through

1486
01:04:23,280 --> 01:04:28,798
the table

1487
01:04:25,039 --> 01:04:30,480
and we have the uh texel index as it

1488
01:04:28,798 --> 01:04:31,519
moves across

1489
01:04:30,480 --> 01:04:34,639
right

1490
01:04:31,519 --> 01:04:37,759
so this right here is texal index is

1491
01:04:34,639 --> 01:04:37,759
less than um

1492
01:04:39,119 --> 01:04:43,119
this value the octahedral map dim

1493
01:04:43,920 --> 01:04:48,639
so we're stepping across those

1494
01:04:45,920 --> 01:04:51,519
um and while we're in here we have this

1495
01:04:48,639 --> 01:04:52,879
transfer pps a cube value

1496
01:04:51,519 --> 01:04:54,318
and that's going to be the thing that's

1497
01:04:52,880 --> 01:04:55,920
actually zero this doesn't have to get

1498
01:04:54,318 --> 01:04:57,358
initialized because it will get written

1499
01:04:55,920 --> 01:04:58,639
each one of them will get written to

1500
01:04:57,358 --> 01:05:00,558
because we're going across this eight

1501
01:04:58,639 --> 01:05:02,719
here right

1502
01:05:00,559 --> 01:05:05,920
like so in fact you could actually just

1503
01:05:02,719 --> 01:05:08,399
say this is array count

1504
01:05:05,920 --> 01:05:09,920
of transfer pps

1505
01:05:08,400 --> 01:05:13,440
like that

1506
01:05:09,920 --> 01:05:16,480
so we're stepping across um

1507
01:05:13,440 --> 01:05:19,039
each one of the tr each one of the

1508
01:05:16,480 --> 01:05:21,440
texels that we're going to have to write

1509
01:05:19,039 --> 01:05:22,480
we're accumulating across all of the

1510
01:05:21,440 --> 01:05:24,000
rays

1511
01:05:22,480 --> 01:05:25,760
that we're going to do and that's going

1512
01:05:24,000 --> 01:05:28,318
to be in here and that's going to be

1513
01:05:25,760 --> 01:05:31,520
over the rays per texel

1514
01:05:28,318 --> 01:05:31,519
value like so

1515
01:05:31,679 --> 01:05:35,440
um and that raised for texel value i can

1516
01:05:34,239 --> 01:05:37,038
probably make this a little bit easier

1517
01:05:35,440 --> 01:05:38,960
to read by doing that um the raise

1518
01:05:37,039 --> 01:05:41,039
protects the value

1519
01:05:38,960 --> 01:05:42,798
uh we're just looping over these picking

1520
01:05:41,039 --> 01:05:44,880
out different directions to cast out of

1521
01:05:42,798 --> 01:05:48,318
the same texel

1522
01:05:44,880 --> 01:05:50,640
um and then when we sum it in at the end

1523
01:05:48,318 --> 01:05:53,358
like we sum it in right here

1524
01:05:50,639 --> 01:05:55,519
so we we just we we like accumulate

1525
01:05:53,358 --> 01:05:57,679
accumulate accumulate on the same texel

1526
01:05:55,519 --> 01:05:59,199
write it out once

1527
01:05:57,679 --> 01:06:01,440
to that texel

1528
01:05:59,199 --> 01:06:03,439
then at the very end we blend that into

1529
01:06:01,440 --> 01:06:05,358
the texture map here after we've done

1530
01:06:03,440 --> 01:06:08,960
all eight we load them up and blend them

1531
01:06:05,358 --> 01:06:08,960
in one wide operation

1532
01:06:10,880 --> 01:06:15,200
so now we just need to be able to step

1533
01:06:13,280 --> 01:06:16,960
the table properly

1534
01:06:15,199 --> 01:06:19,838
and stepping the table properly just

1535
01:06:16,960 --> 01:06:22,720
requires us being on the correct row

1536
01:06:19,838 --> 01:06:24,719
so when we look at this like direction

1537
01:06:22,719 --> 01:06:27,279
offset this whole nonsense we don't

1538
01:06:24,719 --> 01:06:29,199
really need any of this anymore um so

1539
01:06:27,280 --> 01:06:30,240
really all we're doing is setting this

1540
01:06:29,199 --> 01:06:32,399
once

1541
01:06:30,239 --> 01:06:34,639
there's like basically like a

1542
01:06:32,400 --> 01:06:34,639
uh

1543
01:06:36,798 --> 01:06:40,719
how should i put this

1544
01:06:38,400 --> 01:06:40,720
um

1545
01:06:42,079 --> 01:06:48,760
we'd be setting this once and it would

1546
01:06:43,519 --> 01:06:48,759
just advance each time um

1547
01:07:00,798 --> 01:07:03,119
so

1548
01:07:01,400 --> 01:07:06,798
[Music]

1549
01:07:03,119 --> 01:07:09,798
the walk table offset here

1550
01:07:06,798 --> 01:07:09,798
um

1551
01:07:14,559 --> 01:07:19,119
i would say probably all we really need

1552
01:07:17,440 --> 01:07:22,240
to do is

1553
01:07:19,119 --> 01:07:22,240
at the outset

1554
01:07:22,400 --> 01:07:28,880
just set the sample

1555
01:07:25,358 --> 01:07:31,679
dir to the correct thing here

1556
01:07:28,880 --> 01:07:34,400
each time through we just do the sample

1557
01:07:31,679 --> 01:07:37,919
dir ray d and the sample dir

1558
01:07:34,400 --> 01:07:40,240
um walk table offset we load those up

1559
01:07:37,920 --> 01:07:44,639
and then at the end

1560
01:07:40,239 --> 01:07:48,318
we just each time through the loop uh we

1561
01:07:44,639 --> 01:07:48,318
increment the sample direction

1562
01:07:48,798 --> 01:07:52,239
probably

1563
01:07:50,318 --> 01:07:54,000
because there's so much float work going

1564
01:07:52,239 --> 01:07:55,919
on in here we probably can just spare

1565
01:07:54,000 --> 01:07:58,159
the extra add and then you don't have to

1566
01:07:55,920 --> 01:07:59,200
do any kind of addressing so it seems

1567
01:07:58,159 --> 01:08:01,679
like that's probably the right thing to

1568
01:07:59,199 --> 01:08:02,960
do is to just step it

1569
01:08:01,679 --> 01:08:05,759
um

1570
01:08:02,960 --> 01:08:05,760
that'd be my guess

1571
01:08:06,000 --> 01:08:11,639
so at that point we're left with um

1572
01:08:16,880 --> 01:08:22,400
we no longer have octahedral

1573
01:08:19,520 --> 01:08:23,120
indexes we just have like

1574
01:08:22,399 --> 01:08:24,559
a

1575
01:08:23,119 --> 01:08:25,838
texel index

1576
01:08:24,560 --> 01:08:27,920
and

1577
01:08:25,838 --> 01:08:29,359
ray index right

1578
01:08:27,920 --> 01:08:30,960
so

1579
01:08:29,359 --> 01:08:36,838
um

1580
01:08:30,960 --> 01:08:36,838
for debug sake the debug pic value

1581
01:08:38,238 --> 01:08:42,718
it's really just txty and ray

1582
01:08:46,238 --> 01:08:49,838
so

1583
01:08:47,759 --> 01:08:53,838
it would be

1584
01:08:49,838 --> 01:08:53,838
it would be texil index

1585
01:08:53,920 --> 01:08:59,359
is the thing that equals debug pick tx

1586
01:08:57,039 --> 01:08:59,359
oops

1587
01:09:00,798 --> 01:09:05,119
like so

1588
01:09:02,000 --> 01:09:06,399
and array index would be debug pick ray

1589
01:09:05,119 --> 01:09:09,119
index

1590
01:09:06,399 --> 01:09:10,960
um and again like at this point it

1591
01:09:09,119 --> 01:09:13,920
becomes kind of weird that we don't just

1592
01:09:10,960 --> 01:09:15,759
do the while loop in here as well

1593
01:09:13,920 --> 01:09:17,119
because there isn't really any reason

1594
01:09:15,759 --> 01:09:20,479
not to do that

1595
01:09:17,119 --> 01:09:22,479
um so you probably like this

1596
01:09:20,479 --> 01:09:24,718
should probably be renamed instead of

1597
01:09:22,479 --> 01:09:27,039
taxel index it should just be tx because

1598
01:09:24,719 --> 01:09:28,158
now it actually is tx

1599
01:09:27,039 --> 01:09:30,560
um

1600
01:09:28,158 --> 01:09:32,399
and

1601
01:09:30,560 --> 01:09:34,400
eventually we should just make that loop

1602
01:09:32,399 --> 01:09:36,158
over ty as well

1603
01:09:34,399 --> 01:09:37,920
one would assume

1604
01:09:36,158 --> 01:09:40,238
you know what i'm saying

1605
01:09:37,920 --> 01:09:42,640
so for sample directions really this

1606
01:09:40,238 --> 01:09:45,759
part just needs to

1607
01:09:42,640 --> 01:09:47,679
be set to the correct place in the table

1608
01:09:45,759 --> 01:09:50,880
and in order to do that we would need to

1609
01:09:47,679 --> 01:09:53,759
know what row we were on

1610
01:09:50,880 --> 01:09:55,679
uh so this sy right is the is the thing

1611
01:09:53,759 --> 01:09:58,479
that's telling us that

1612
01:09:55,679 --> 01:10:01,119
so it's again kind of annoying it may

1613
01:09:58,479 --> 01:10:03,039
make more sense again to just like

1614
01:10:01,119 --> 01:10:04,479
push that in

1615
01:10:03,039 --> 01:10:06,079
like

1616
01:10:04,479 --> 01:10:07,359
to just start at the root of the sample

1617
01:10:06,079 --> 01:10:10,399
table and just go through the whole

1618
01:10:07,359 --> 01:10:13,039
thing by having the ty loop here

1619
01:10:10,399 --> 01:10:17,639
it's unclear why we wouldn't do that so

1620
01:10:13,039 --> 01:10:17,640
i might just do that um

1621
01:10:21,920 --> 01:10:26,480
because you can see here now there's

1622
01:10:23,198 --> 01:10:29,119
just this extra nonsense for no reason

1623
01:10:26,479 --> 01:10:30,879
right like like it's unclear why we

1624
01:10:29,119 --> 01:10:32,719
don't just have

1625
01:10:30,880 --> 01:10:34,400
um

1626
01:10:32,719 --> 01:10:37,198
it do the entire

1627
01:10:34,399 --> 01:10:39,839
chunk at the same time like why does

1628
01:10:37,198 --> 01:10:42,479
this happen we don't know

1629
01:10:39,840 --> 01:10:45,360
so it seems like we probably would want

1630
01:10:42,479 --> 01:10:48,319
to just like

1631
01:10:45,359 --> 01:10:48,319
take this loop

1632
01:10:49,359 --> 01:10:54,880
and move it out so grid raycast rather

1633
01:10:52,158 --> 01:10:56,879
than passing an sy

1634
01:10:54,880 --> 01:10:59,840
just passes the light probe p the spec

1635
01:10:56,880 --> 01:11:01,840
atlas uh the spec texel a just gets

1636
01:10:59,840 --> 01:11:04,880
compute would get computed

1637
01:11:01,840 --> 01:11:07,360
uh directly in the thing what about tile

1638
01:11:04,880 --> 01:11:10,159
that the tile i suppose

1639
01:11:07,359 --> 01:11:13,158
we would need to pass in now right

1640
01:11:10,158 --> 01:11:13,158
so

1641
01:11:15,600 --> 01:11:19,280
instead of spectexel a you would just

1642
01:11:17,279 --> 01:11:21,439
pass the tile

1643
01:11:19,279 --> 01:11:23,198
um and then the rest of the stuff is

1644
01:11:21,439 --> 01:11:24,158
exactly as it is

1645
01:11:23,198 --> 01:11:27,599
so

1646
01:11:24,158 --> 01:11:29,839
this loop would come

1647
01:11:27,600 --> 01:11:29,840
out

1648
01:11:31,359 --> 01:11:36,559
ingrid raycast

1649
01:11:33,198 --> 01:11:39,599
and we would take

1650
01:11:36,560 --> 01:11:41,840
this part here and make this be the ty

1651
01:11:39,600 --> 01:11:41,840
loop

1652
01:11:45,039 --> 01:11:48,079
right and

1653
01:11:53,600 --> 01:11:58,239
the cast initiated part

1654
01:11:56,479 --> 01:12:00,718
is really just a statistics gathering

1655
01:11:58,238 --> 01:12:02,000
thing for us so we know

1656
01:12:00,719 --> 01:12:04,560
what this is

1657
01:12:02,000 --> 01:12:05,920
uh it's just gonna be the total it like

1658
01:12:04,560 --> 01:12:08,080
we do them all

1659
01:12:05,920 --> 01:12:09,679
so it's literally it's literally the

1660
01:12:08,079 --> 01:12:11,760
entire table

1661
01:12:09,679 --> 01:12:14,399
it's it's literally

1662
01:12:11,760 --> 01:12:15,840
total light sample direction count

1663
01:12:14,399 --> 01:12:17,439
right

1664
01:12:15,840 --> 01:12:17,850
so then we do

1665
01:12:17,439 --> 01:12:19,279
um

1666
01:12:17,850 --> 01:12:21,440
[Music]

1667
01:12:19,279 --> 01:12:23,359
the sample direction just starts at the

1668
01:12:21,439 --> 01:12:25,198
beginning of the table

1669
01:12:23,359 --> 01:12:27,039
we walk the table

1670
01:12:25,198 --> 01:12:30,000
uh pulling out the

1671
01:12:27,039 --> 01:12:31,519
the correct tile each time

1672
01:12:30,000 --> 01:12:34,840
and that's

1673
01:12:31,520 --> 01:12:34,840
our loop

1674
01:12:39,439 --> 01:12:44,238
so i think that's basically what we're

1675
01:12:42,000 --> 01:12:46,399
looking at here um

1676
01:12:44,238 --> 01:12:46,399
the

1677
01:12:47,600 --> 01:12:51,840
that's there's no such thing as sy

1678
01:12:49,679 --> 01:12:53,199
anymore it's just t y

1679
01:12:51,840 --> 01:12:56,560
um

1680
01:12:53,198 --> 01:13:00,158
and the tile is going to come in

1681
01:12:56,560 --> 01:13:03,199
as inst up here instead of sy

1682
01:13:00,158 --> 01:13:06,879
right we're not passing that anymore

1683
01:13:03,198 --> 01:13:09,439
and instead of spectacle we're passing

1684
01:13:06,880 --> 01:13:13,600
the tile

1685
01:13:09,439 --> 01:13:18,678
i don't remember what that is

1686
01:13:13,600 --> 01:13:18,679
it's some kind of tile thing

1687
01:13:26,158 --> 01:13:28,639
or not

1688
01:13:30,399 --> 01:13:34,639
so what is that value

1689
01:13:32,640 --> 01:13:37,440
we just saw it what is the name of the

1690
01:13:34,640 --> 01:13:41,600
type light atlas texl oh it's so it's

1691
01:13:37,439 --> 01:13:44,759
just light atlas texl tile

1692
01:13:41,600 --> 01:13:44,760
i guess

1693
01:13:46,079 --> 01:13:50,079
um

1694
01:13:48,079 --> 01:13:52,479
i don't know what that was for we can

1695
01:13:50,079 --> 01:13:54,000
put it back in if we need it someday

1696
01:13:52,479 --> 01:13:55,439
um so

1697
01:13:54,000 --> 01:13:58,399
yeah

1698
01:13:55,439 --> 01:13:58,399
this is tx

1699
01:13:58,960 --> 01:14:05,840
and the spectacle is now

1700
01:14:02,319 --> 01:14:08,639
um not a it's just

1701
01:14:05,840 --> 01:14:08,640
spectacular

1702
01:14:09,520 --> 01:14:14,810
the

1703
01:14:10,880 --> 01:14:14,810
[Music]

1704
01:14:18,399 --> 01:14:22,000
the sy needs to go away

1705
01:14:22,800 --> 01:14:28,400
and

1706
01:14:24,560 --> 01:14:30,800
this ray index needs to be

1707
01:14:28,399 --> 01:14:33,039
clamped

1708
01:14:30,800 --> 01:14:33,039
to

1709
01:14:41,279 --> 01:14:49,359
i guess i don't know what atlas index

1710
01:14:45,840 --> 01:14:49,360
means here

1711
01:14:50,640 --> 01:14:54,640
atlas index is just the global

1712
01:14:52,960 --> 01:14:59,520
uh enumerator i guess

1713
01:14:54,640 --> 01:14:59,520
so uh yeah so basically like

1714
01:15:06,719 --> 01:15:12,560
this is kind of just not

1715
01:15:10,560 --> 01:15:15,679
necessary anymore this can actually just

1716
01:15:12,560 --> 01:15:17,679
be moved out like we don't have to call

1717
01:15:15,679 --> 01:15:18,640
this again

1718
01:15:17,679 --> 01:15:20,640
right

1719
01:15:18,640 --> 01:15:23,840
we can just call

1720
01:15:20,640 --> 01:15:26,159
uh solution debug

1721
01:15:23,840 --> 01:15:26,159
here

1722
01:15:26,238 --> 01:15:28,799
like so

1723
01:15:32,238 --> 01:15:36,399
meaning if we're debugging then this

1724
01:15:34,238 --> 01:15:38,000
just happens

1725
01:15:36,399 --> 01:15:38,879
and i don't even know that we need to do

1726
01:15:38,000 --> 01:15:42,319
that

1727
01:15:38,880 --> 01:15:45,679
because this stuff can now happen

1728
01:15:42,319 --> 01:15:47,279
inside the old version

1729
01:15:45,679 --> 01:15:51,119
so

1730
01:15:47,279 --> 01:15:51,119
like we can just pass down

1731
01:15:51,679 --> 01:15:56,079
we can just prep and pass down a thing

1732
01:15:53,679 --> 01:15:57,199
that checks the atlas and off we go

1733
01:15:56,079 --> 01:15:59,760
i think

1734
01:15:57,198 --> 01:16:03,279
so in grid raycast here

1735
01:15:59,760 --> 01:16:03,280
where we pass this debug pick

1736
01:16:04,000 --> 01:16:07,520
um

1737
01:16:04,960 --> 01:16:08,880
debug pick enabled

1738
01:16:07,520 --> 01:16:12,239
would just be

1739
01:16:08,880 --> 01:16:13,920
uh we would just expand the check

1740
01:16:12,238 --> 01:16:15,519
in

1741
01:16:13,920 --> 01:16:16,719
where did you go

1742
01:16:15,520 --> 01:16:19,120
here you are

1743
01:16:16,719 --> 01:16:23,198
we would just expand the check here to

1744
01:16:19,119 --> 01:16:24,079
check against the t y value as well

1745
01:16:23,198 --> 01:16:27,519
and

1746
01:16:24,079 --> 01:16:29,279
so then we just do if the atlas index is

1747
01:16:27,520 --> 01:16:34,760
equal up here

1748
01:16:29,279 --> 01:16:34,759
so this entire thing would just be like

1749
01:16:43,679 --> 01:16:47,039
we could we could keep basically exactly

1750
01:16:45,679 --> 01:16:51,359
this

1751
01:16:47,039 --> 01:16:54,238
um get rid of the sting that calls it uh

1752
01:16:51,359 --> 01:16:54,238
that calls um

1753
01:16:54,960 --> 01:16:58,079
grid raycast twice

1754
01:16:59,760 --> 01:17:03,480
and just pass

1755
01:17:04,479 --> 01:17:09,119
true or false based you know that the

1756
01:17:06,000 --> 01:17:09,119
solution debug pick

1757
01:17:09,359 --> 01:17:13,198
we just pass it if we happen to be

1758
01:17:13,840 --> 01:17:17,840
the correct value so debug ray pick

1759
01:17:18,640 --> 01:17:23,119
pick equals nothing

1760
01:17:20,479 --> 01:17:24,559
if we're equal then it equals the debug

1761
01:17:23,119 --> 01:17:28,679
pick

1762
01:17:24,560 --> 01:17:28,679
right so that will pass down

1763
01:17:35,840 --> 01:17:40,079
so that leaves it off

1764
01:17:38,399 --> 01:17:42,158
in the case where it's not the

1765
01:17:40,079 --> 01:17:43,519
particular atlas and on in the case

1766
01:17:42,158 --> 01:17:46,879
where it is

1767
01:17:43,520 --> 01:17:48,239
the ray index has to be clamped now

1768
01:17:46,880 --> 01:17:51,119
to

1769
01:17:48,238 --> 01:17:54,599
whatever we called this value so

1770
01:17:51,119 --> 01:17:54,599
the per texel

1771
01:17:58,079 --> 01:18:03,519
and now i think we're good

1772
01:18:01,439 --> 01:18:06,960
so a lot of reorganization but getting

1773
01:18:03,520 --> 01:18:06,960
closer to a reasonable thing

1774
01:18:08,880 --> 01:18:12,960
okay so that should now

1775
01:18:11,039 --> 01:18:14,238
i guess we should like debug crashes

1776
01:18:12,960 --> 01:18:16,239
right because we're going to be like

1777
01:18:14,238 --> 01:18:18,639
wrong we're like stepping too far along

1778
01:18:16,238 --> 01:18:20,158
something or who knows what right

1779
01:18:18,640 --> 01:18:22,480
um so the first thing we want to do is

1780
01:18:20,158 --> 01:18:24,879
like debug crashes in what we just did

1781
01:18:22,479 --> 01:18:27,599
because again this is really like

1782
01:18:24,880 --> 01:18:30,800
aggressively optimize code so we've got

1783
01:18:27,600 --> 01:18:32,640
a lot of like you know

1784
01:18:30,800 --> 01:18:34,800
hand tuned stuff that is

1785
01:18:32,640 --> 01:18:37,360
is going to have a lot of like

1786
01:18:34,800 --> 01:18:38,880
fragility to it right

1787
01:18:37,359 --> 01:18:41,039
because this is like the most heavily

1788
01:18:38,880 --> 01:18:44,159
optimized thing we have in the entire

1789
01:18:41,039 --> 01:18:44,158
system by far

1790
01:18:47,760 --> 01:18:50,760
um

1791
01:19:00,158 --> 01:19:05,359
so that looks like a legit

1792
01:19:03,198 --> 01:19:07,279
that's not an unaligned that's not on

1793
01:19:05,359 --> 01:19:10,079
the line that's actually just off which

1794
01:19:07,279 --> 01:19:11,359
is good it's easier um

1795
01:19:10,079 --> 01:19:14,319
so

1796
01:19:11,359 --> 01:19:16,719
it looks like we're stepping too

1797
01:19:14,319 --> 01:19:16,719
much

1798
01:19:16,800 --> 01:19:22,640
here there's probably like one of the

1799
01:19:18,880 --> 01:19:23,760
things on the interior is doing like a

1800
01:19:22,640 --> 01:19:25,360
uh

1801
01:19:23,760 --> 01:19:26,880
is is

1802
01:19:25,359 --> 01:19:31,000
counting on something having been set up

1803
01:19:26,880 --> 01:19:31,000
and walking through it only once

1804
01:19:40,000 --> 01:19:45,840
although that's

1805
01:19:42,158 --> 01:19:45,839
just looking up into the table

1806
01:19:46,319 --> 01:19:51,399
so that's like a problem with the walk

1807
01:19:48,399 --> 01:19:51,399
table

1808
01:19:53,600 --> 01:19:56,600
probably

1809
01:20:07,359 --> 01:20:13,000
let's take a quick look

1810
01:20:08,880 --> 01:20:13,000
at walk table

1811
01:20:23,920 --> 01:20:26,920
hmm

1812
01:20:38,560 --> 01:20:42,239
solution

1813
01:20:40,479 --> 01:20:47,079
light sampling

1814
01:20:42,238 --> 01:20:47,079
walk table quadrant index

1815
01:20:49,039 --> 01:20:53,119
starts in a reasonable place

1816
01:20:50,880 --> 01:20:53,119
uh

1817
01:20:53,760 --> 01:20:56,480
sampleder

1818
01:20:56,880 --> 01:21:01,840
walktable well actually just show me the

1819
01:20:59,439 --> 01:21:01,839
whole thing

1820
01:21:04,719 --> 01:21:07,198
oh

1821
01:21:05,840 --> 01:21:08,079
right

1822
01:21:07,198 --> 01:21:09,439
yeah

1823
01:21:08,079 --> 01:21:13,039
hmm

1824
01:21:09,439 --> 01:21:15,198
so a zero zero zero will make it so that

1825
01:21:13,039 --> 01:21:17,519
it's yeah like

1826
01:21:15,198 --> 01:21:18,879
i mean we sh this should still not crash

1827
01:21:17,520 --> 01:21:20,639
it should be we should make it so that

1828
01:21:18,880 --> 01:21:22,159
this works fine but when it gets to

1829
01:21:20,639 --> 01:21:26,039
something that's zero zero zero it will

1830
01:21:22,158 --> 01:21:26,039
never step through the table

1831
01:21:28,639 --> 01:21:30,880
so

1832
01:21:35,279 --> 01:21:38,639
i don't know what we want to do about

1833
01:21:36,800 --> 01:21:41,639
that

1834
01:21:38,639 --> 01:21:41,639
um

1835
01:21:42,238 --> 01:21:45,039
maybe just special case it in the walk

1836
01:21:43,840 --> 01:21:47,520
table build

1837
01:21:45,039 --> 01:21:47,519
so like

1838
01:21:49,760 --> 01:21:52,639
like if we can

1839
01:21:54,479 --> 01:21:57,119
i'm trying to think of like how you

1840
01:21:55,840 --> 01:21:59,600
would build these tables so that that

1841
01:21:57,119 --> 01:22:01,279
would still work

1842
01:21:59,600 --> 01:22:02,960
so when we compute the walk table right

1843
01:22:01,279 --> 01:22:04,639
you can see what would happen here is it

1844
01:22:02,960 --> 01:22:06,760
never really would hit

1845
01:22:04,639 --> 01:22:10,840
uh the padded max cost per

1846
01:22:06,760 --> 01:22:10,840
ray um

1847
01:22:21,679 --> 01:22:26,000
you still would i mean shouldn't you

1848
01:22:23,679 --> 01:22:26,000
march

1849
01:22:35,198 --> 01:22:39,599
i i like i guess the problem would be

1850
01:22:37,198 --> 01:22:42,000
maybe if t terminate is picked

1851
01:22:39,600 --> 01:22:44,159
incorrectly

1852
01:22:42,000 --> 01:22:46,079
which it obviously is and how is t

1853
01:22:44,158 --> 01:22:48,319
terminate set in the case where it was

1854
01:22:46,079 --> 01:22:51,279
going to be zero like that

1855
01:22:48,319 --> 01:22:53,198
t terminate is zero

1856
01:22:51,279 --> 01:22:57,119
t terminate

1857
01:22:53,198 --> 01:22:57,119
gets updated by t best

1858
01:22:59,279 --> 01:23:04,238
and so in v the problem here is that nv

1859
01:23:02,719 --> 01:23:07,119
ray d

1860
01:23:04,238 --> 01:23:09,519
right

1861
01:23:07,119 --> 01:23:12,158
envy ray d is

1862
01:23:09,520 --> 01:23:12,159
is wrong

1863
01:23:14,079 --> 01:23:19,158
so we probably just need to like

1864
01:23:22,158 --> 01:23:26,759
actually do a safe divide here

1865
01:23:49,359 --> 01:23:54,399
because if all of these are imph

1866
01:23:51,840 --> 01:23:56,800
because they're all zero so nobody like

1867
01:23:54,399 --> 01:23:58,000
they will all be imp and nobody will be

1868
01:23:56,800 --> 01:23:59,920
picked

1869
01:23:58,000 --> 01:24:02,000
it will be forced to pick a random one

1870
01:23:59,920 --> 01:24:03,359
effectively

1871
01:24:02,000 --> 01:24:05,600
um if it's not random it's predictable

1872
01:24:03,359 --> 01:24:08,238
it will pick you know the last the first

1873
01:24:05,600 --> 01:24:11,280
one i guess right

1874
01:24:08,238 --> 01:24:13,839
but that will be inf

1875
01:24:11,279 --> 01:24:16,960
so we probably want to do something like

1876
01:24:13,840 --> 01:24:18,400
comparing it and making sure that if t

1877
01:24:16,960 --> 01:24:20,480
terminate

1878
01:24:18,399 --> 01:24:23,119
is

1879
01:24:20,479 --> 01:24:23,119
too high

1880
01:24:23,840 --> 01:24:29,159
if it's in you know then it gets clamped

1881
01:24:32,000 --> 01:24:37,119
something like that because

1882
01:24:34,319 --> 01:24:39,679
my recollection is it needs to sample at

1883
01:24:37,119 --> 01:24:41,920
the terminator and so the problem is

1884
01:24:39,679 --> 01:24:43,760
that if you never leave the square if

1885
01:24:41,920 --> 01:24:45,039
you have no way of ever knowing where it

1886
01:24:43,760 --> 01:24:46,560
should end up

1887
01:24:45,039 --> 01:24:48,399
then what's going to happen is that t

1888
01:24:46,560 --> 01:24:50,400
terminate value is going to be infant

1889
01:24:48,399 --> 01:24:52,638
here

1890
01:24:50,399 --> 01:24:52,638
and

1891
01:24:52,719 --> 01:24:57,198
you can see when it ends the probe

1892
01:24:55,039 --> 01:24:58,399
sample piece single

1893
01:24:57,198 --> 01:25:01,119
is then going to be

1894
01:24:58,399 --> 01:25:03,920
a completely out of bounds value

1895
01:25:01,119 --> 01:25:05,279
when we then do the sample that's what's

1896
01:25:03,920 --> 01:25:07,440
going to have

1897
01:25:05,279 --> 01:25:09,759
this texal pointer because the base

1898
01:25:07,439 --> 01:25:11,198
offset that we compute right

1899
01:25:09,760 --> 01:25:12,639
is going to be out in the middle of

1900
01:25:11,198 --> 01:25:14,879
nowhere and it's going to load a

1901
01:25:12,639 --> 01:25:17,440
completely bogus value so it's a very

1902
01:25:14,880 --> 01:25:21,520
predictable error

1903
01:25:17,439 --> 01:25:21,519
the problem is like what do we set it to

1904
01:25:22,319 --> 01:25:25,439
it should never happen

1905
01:25:24,319 --> 01:25:26,479
so

1906
01:25:25,439 --> 01:25:28,319
i

1907
01:25:26,479 --> 01:25:30,079
we only care about it while we're doing

1908
01:25:28,319 --> 01:25:32,319
this debugging process of making sure

1909
01:25:30,079 --> 01:25:33,679
the table doesn't have zeros in it but

1910
01:25:32,319 --> 01:25:35,439
we want to be able to run while that's

1911
01:25:33,679 --> 01:25:36,719
doing that so i think we just want to

1912
01:25:35,439 --> 01:25:40,079
clamp it

1913
01:25:36,719 --> 01:25:41,520
like look you know clamp this between

1914
01:25:40,079 --> 01:25:43,439
you know

1915
01:25:41,520 --> 01:25:45,440
zero

1916
01:25:43,439 --> 01:25:46,719
um

1917
01:25:45,439 --> 01:25:47,919
and

1918
01:25:46,719 --> 01:25:53,800
some

1919
01:25:47,920 --> 01:25:53,800
large value right i don't know what well

1920
01:25:59,198 --> 01:26:04,960
you know maybe we just want to do like

1921
01:26:02,158 --> 01:26:04,960
if it's inf

1922
01:26:05,439 --> 01:26:09,079
do we have an ism

1923
01:26:15,198 --> 01:26:19,198
you know like some really large

1924
01:26:19,840 --> 01:26:23,840
this is terrible

1925
01:26:21,439 --> 01:26:23,839
um

1926
01:26:24,079 --> 01:26:28,800
it can be used

1927
01:26:26,158 --> 01:26:30,638
but if it's not um if it's this if it's

1928
01:26:28,800 --> 01:26:34,000
a bogus value

1929
01:26:30,639 --> 01:26:38,159
um we probably want to add an is in

1930
01:26:34,000 --> 01:26:40,719
for for this very purpose um

1931
01:26:38,158 --> 01:26:41,759
because we we we do have a case where

1932
01:26:40,719 --> 01:26:43,600
that is what we need to know what is

1933
01:26:41,760 --> 01:26:45,280
this what is complaining about

1934
01:26:43,600 --> 01:26:49,960
fatal error

1935
01:26:45,279 --> 01:26:49,960
why can it not open handmade hero

1936
01:26:51,600 --> 01:26:55,760
why are you not

1937
01:26:54,158 --> 01:26:58,399
stop

1938
01:26:55,760 --> 01:27:00,239
stop debugging

1939
01:26:58,399 --> 01:27:01,759
it cannot stop

1940
01:27:00,238 --> 01:27:05,439
apparently

1941
01:27:01,760 --> 01:27:09,280
folks debugging cannot be stopped

1942
01:27:05,439 --> 01:27:09,279
why can't it be stopped we do not know

1943
01:27:14,719 --> 01:27:19,920
can we be billed

1944
01:27:16,840 --> 01:27:22,319
now yes

1945
01:27:19,920 --> 01:27:24,000
um what version of remedy am i using i

1946
01:27:22,319 --> 01:27:26,479
may have to update

1947
01:27:24,000 --> 01:27:29,439
three five oh yeah um i should probably

1948
01:27:26,479 --> 01:27:30,879
update that at some point uh because

1949
01:27:29,439 --> 01:27:32,399
that's

1950
01:27:30,880 --> 01:27:35,840
it's a bit out

1951
01:27:32,399 --> 01:27:35,839
of date right like

1952
01:27:40,079 --> 01:27:43,639
the uh

1953
01:27:47,039 --> 01:27:53,519
the actual current version is like

1954
01:27:50,639 --> 01:27:54,800
three six three and i'm on three five so

1955
01:27:53,520 --> 01:27:56,719
we're pretty

1956
01:27:54,800 --> 01:27:58,239
we're gonna

1957
01:27:56,719 --> 01:27:59,679
have to remember to do that we're like

1958
01:27:58,238 --> 01:28:02,718
way

1959
01:27:59,679 --> 01:28:02,719
way out of date

1960
01:28:05,679 --> 01:28:07,760
okay

1961
01:28:06,800 --> 01:28:11,119
um

1962
01:28:07,760 --> 01:28:14,400
so we need to fix that bug uh so that

1963
01:28:11,119 --> 01:28:17,039
this doesn't happen on load on like out

1964
01:28:14,399 --> 01:28:18,960
of bounds loads basically

1965
01:28:17,039 --> 01:28:21,279
um and so we have to figure out like how

1966
01:28:18,960 --> 01:28:23,920
we're gonna make that happen so now we

1967
01:28:21,279 --> 01:28:25,519
fix the t terminate to be zero uh which

1968
01:28:23,920 --> 01:28:27,600
is good i think

1969
01:28:25,520 --> 01:28:29,280
um but we're still having like a let's

1970
01:28:27,600 --> 01:28:32,000
look at what the

1971
01:28:29,279 --> 01:28:32,960
so when we compute the diffuse atlas

1972
01:28:32,000 --> 01:28:35,920
um

1973
01:28:32,960 --> 01:28:35,920
base offset here

1974
01:28:36,238 --> 01:28:41,039
i mean no

1975
01:28:38,960 --> 01:28:44,880
like just not an acceptable value in

1976
01:28:41,039 --> 01:28:44,880
case anyone was wondering

1977
01:28:48,560 --> 01:28:53,199
how did this happen

1978
01:28:50,479 --> 01:28:55,439
if it's zero how would we does this also

1979
01:28:53,198 --> 01:28:58,000
use an inverse

1980
01:28:55,439 --> 01:28:59,759
it may be that like there's no way to

1981
01:28:58,000 --> 01:29:01,760
run zeros through this thing because

1982
01:28:59,760 --> 01:29:04,320
it's you know simply not built to have

1983
01:29:01,760 --> 01:29:06,239
rays that don't march right race

1984
01:29:04,319 --> 01:29:09,238
they're expected to be normal

1985
01:29:06,238 --> 01:29:09,238
right

1986
01:29:17,359 --> 01:29:22,158
so yeah i'm not sure

1987
01:29:19,279 --> 01:29:24,559
why we're getting that but you know

1988
01:29:22,158 --> 01:29:27,359
broadcast

1989
01:29:24,560 --> 01:29:27,360
one norm

1990
01:29:28,000 --> 01:29:33,000
one over one norm for iuv

1991
01:29:38,960 --> 01:29:43,600
yep so this uses an inverse as well so

1992
01:29:41,760 --> 01:29:45,920
so i think basically like i don't think

1993
01:29:43,600 --> 01:29:48,159
there's any way to

1994
01:29:45,920 --> 01:29:48,158
um

1995
01:29:51,520 --> 01:29:56,480
i don't think there's any way to shove

1996
01:29:53,279 --> 01:29:58,399
zeroes through this thing unfortunately

1997
01:29:56,479 --> 01:29:59,198
because everybody expects you to be able

1998
01:29:58,399 --> 01:30:01,119
to

1999
01:29:59,198 --> 01:30:03,119
un do the rate the ray is supposed to be

2000
01:30:01,119 --> 01:30:05,279
a normal

2001
01:30:03,119 --> 01:30:07,359
you know what i mean

2002
01:30:05,279 --> 01:30:10,559
um

2003
01:30:07,359 --> 01:30:10,559
so i guess we can't do that

2004
01:30:18,079 --> 01:30:22,079
so i guess um

2005
01:30:21,039 --> 01:30:23,760
if we

2006
01:30:22,079 --> 01:30:25,679
want to do something like this we have

2007
01:30:23,760 --> 01:30:27,360
to output something that is at least a

2008
01:30:25,679 --> 01:30:29,359
valid ray direction and we can still

2009
01:30:27,359 --> 01:30:31,599
make it be like 0 0 1 so it's very

2010
01:30:29,359 --> 01:30:34,000
obvious that it's wrong and of course we

2011
01:30:31,600 --> 01:30:36,719
also print out the values so but i guess

2012
01:30:34,000 --> 01:30:38,719
we're going to have to just do

2013
01:30:36,719 --> 01:30:40,960
cast straight up

2014
01:30:38,719 --> 01:30:42,800
if you don't know where to go right

2015
01:30:40,960 --> 01:30:45,198
because we really can't like none of

2016
01:30:42,800 --> 01:30:47,199
this code it all assumes that because

2017
01:30:45,198 --> 01:30:49,678
they're coming from a table they all

2018
01:30:47,198 --> 01:30:51,198
have to be valid you know

2019
01:30:49,679 --> 01:30:52,399
normal

2020
01:30:51,198 --> 01:30:55,599
they can't

2021
01:30:52,399 --> 01:30:55,599
be garbage right

2022
01:30:58,639 --> 01:31:02,239
so let's try remaking our sampling

2023
01:31:00,158 --> 01:31:04,559
spheres again

2024
01:31:02,238 --> 01:31:04,559
um

2025
01:31:08,079 --> 01:31:10,719
you know what this is going to run

2026
01:31:09,198 --> 01:31:12,479
really slowly because we're running it

2027
01:31:10,719 --> 01:31:16,399
in debug

2028
01:31:12,479 --> 01:31:18,399
although i did want to go get

2029
01:31:16,399 --> 01:31:20,879
some snacks so

2030
01:31:18,399 --> 01:31:22,559
there is that i wonder if that's like we

2031
01:31:20,880 --> 01:31:26,600
should run it in debug mode so it's slow

2032
01:31:22,560 --> 01:31:26,600
and then i run and get snacks

2033
01:31:47,439 --> 01:31:51,279
okay

2034
01:31:49,279 --> 01:31:52,880
so in theory

2035
01:31:51,279 --> 01:31:54,238
if i build now

2036
01:31:52,880 --> 01:31:56,079
um

2037
01:31:54,238 --> 01:31:57,678
we should not have those so we shouldn't

2038
01:31:56,079 --> 01:31:59,359
get that particular bug we may have a

2039
01:31:57,679 --> 01:32:00,319
different bug but we shouldn't get that

2040
01:31:59,359 --> 01:32:01,198
one

2041
01:32:00,319 --> 01:32:03,599
um

2042
01:32:01,198 --> 01:32:05,759
can i revert this buffer

2043
01:32:03,600 --> 01:32:05,760
no

2044
01:32:08,479 --> 01:32:12,238
so here we are and you can see now that

2045
01:32:10,319 --> 01:32:15,599
like our zeros have been replaced with

2046
01:32:12,238 --> 01:32:17,119
ones in the z column for bad for like

2047
01:32:15,600 --> 01:32:18,800
failed

2048
01:32:17,119 --> 01:32:20,960
um

2049
01:32:18,800 --> 01:32:23,119
outputs and we compile just fine

2050
01:32:20,960 --> 01:32:26,840
uh now we can go see what happens uh

2051
01:32:23,119 --> 01:32:26,840
when we actually run

2052
01:32:31,520 --> 01:32:36,000
all right so actually that's better than

2053
01:32:34,238 --> 01:32:37,039
i would have expected so we're in good

2054
01:32:36,000 --> 01:32:39,600
shape

2055
01:32:37,039 --> 01:32:42,960
um i would like to know how to properly

2056
01:32:39,600 --> 01:32:46,480
draw this thing like i

2057
01:32:42,960 --> 01:32:49,039
why our debug lines

2058
01:32:46,479 --> 01:32:51,119
are are

2059
01:32:49,039 --> 01:32:53,279
i don't know why our debug lines

2060
01:32:51,119 --> 01:32:55,679
are like not lit properly like you can

2061
01:32:53,279 --> 01:32:58,079
sell like this is sort of wrong

2062
01:32:55,679 --> 01:32:59,520
at least i think it is maybe i'm i'm

2063
01:32:58,079 --> 01:33:00,800
incorrect about that but it looks like

2064
01:32:59,520 --> 01:33:02,400
the fact that

2065
01:33:00,800 --> 01:33:04,239
these are

2066
01:33:02,399 --> 01:33:05,759
in the wrong place means they're not

2067
01:33:04,238 --> 01:33:07,119
getting drawn in white and black as they

2068
01:33:05,760 --> 01:33:11,520
should be

2069
01:33:07,119 --> 01:33:11,519
i'm not totally sure about that though

2070
01:33:12,079 --> 01:33:16,158
that could be incorrect

2071
01:33:14,479 --> 01:33:18,718
so

2072
01:33:16,158 --> 01:33:18,719
let me take a

2073
01:33:20,840 --> 01:33:24,639
look so for example when we draw

2074
01:33:23,198 --> 01:33:26,559
diagrams

2075
01:33:24,639 --> 01:33:29,600
um

2076
01:33:26,560 --> 01:33:29,600
how does this stuff work

2077
01:33:33,039 --> 01:33:39,639
is there anything that says what makes

2078
01:33:35,359 --> 01:33:39,639
things emissive i don't know

2079
01:33:55,520 --> 01:34:00,800
so it looks like enable lighting

2080
01:33:58,560 --> 01:34:00,800
is

2081
01:34:00,960 --> 01:34:05,840
like is actually still on for things

2082
01:34:03,359 --> 01:34:07,759
like diagrams so

2083
01:34:05,840 --> 01:34:09,679
i don't know it might be that there is

2084
01:34:07,760 --> 01:34:11,360
no way to do that like i haven't really

2085
01:34:09,679 --> 01:34:12,719
looked to see if that's something we we

2086
01:34:11,359 --> 01:34:13,759
really do

2087
01:34:12,719 --> 01:34:14,480
um

2088
01:34:13,760 --> 01:34:16,159
but

2089
01:34:14,479 --> 01:34:17,839
so i'm not sure but i'm gonna go into

2090
01:34:16,158 --> 01:34:19,279
the

2091
01:34:17,840 --> 01:34:21,039
lighting drawing thing and just see what

2092
01:34:19,279 --> 01:34:25,800
happens

2093
01:34:21,039 --> 01:34:25,800
if we don't move these up as high

2094
01:34:34,639 --> 01:34:38,480
yeah so it's just it's just like

2095
01:34:36,000 --> 01:34:40,238
lighting like they they get lit and even

2096
01:34:38,479 --> 01:34:42,238
though i i don't really want them to be

2097
01:34:40,238 --> 01:34:44,319
we don't have a super good way of

2098
01:34:42,238 --> 01:34:47,759
avoiding that so you can see the

2099
01:34:44,319 --> 01:34:48,960
octahedral map pattern here um and

2100
01:34:47,760 --> 01:34:51,679
unfortunately there's like too much

2101
01:34:48,960 --> 01:34:53,198
other crap in the way

2102
01:34:51,679 --> 01:34:56,800
but you can see it

2103
01:34:53,198 --> 01:35:00,399
and you can also see like

2104
01:34:56,800 --> 01:35:02,560
where the stuff is missing

2105
01:35:00,399 --> 01:35:05,279
right you can see the gaps

2106
01:35:02,560 --> 01:35:07,760
and those gaps are almost certainly the

2107
01:35:05,279 --> 01:35:10,079
places where it you know couldn't find

2108
01:35:07,760 --> 01:35:10,079
um

2109
01:35:10,319 --> 01:35:13,599
values that fell within the texel

2110
01:35:12,238 --> 01:35:15,839
because they happen to be like slightly

2111
01:35:13,600 --> 01:35:16,960
on the wrong side like towards one of

2112
01:35:15,840 --> 01:35:18,560
the other

2113
01:35:16,960 --> 01:35:20,560
tiers or something

2114
01:35:18,560 --> 01:35:22,800
right presumably that's what's happening

2115
01:35:20,560 --> 01:35:24,400
although we don't really know

2116
01:35:22,800 --> 01:35:26,000
but it's still a reasonable sampling

2117
01:35:24,399 --> 01:35:28,158
streak it's not horrible at the moment

2118
01:35:26,000 --> 01:35:30,719
it's just not good

2119
01:35:28,158 --> 01:35:30,719
you know what i mean

2120
01:35:31,840 --> 01:35:36,480
um okay so now we have to figure out

2121
01:35:33,520 --> 01:35:39,280
what the heck is going on of course

2122
01:35:36,479 --> 01:35:39,279
so there is that

2123
01:35:39,840 --> 01:35:44,000
so we're not out of the woods yet uh but

2124
01:35:41,600 --> 01:35:45,440
we're getting closer slowly

2125
01:35:44,000 --> 01:35:47,520
uh because we're obviously still not

2126
01:35:45,439 --> 01:35:49,279
some summing these things properly uh

2127
01:35:47,520 --> 01:35:51,280
but at least now we're not doing

2128
01:35:49,279 --> 01:35:52,719
completely ridiculous stuff like we were

2129
01:35:51,279 --> 01:35:55,198
before where we were crashing because

2130
01:35:52,719 --> 01:35:58,079
we're sampling out of bounds

2131
01:35:55,198 --> 01:36:01,439
so uh if we now look and see what's

2132
01:35:58,079 --> 01:36:03,600
going on here i i guess we have some

2133
01:36:01,439 --> 01:36:05,118
questions to ask ourselves about

2134
01:36:03,600 --> 01:36:07,039
whether or not we're stepping through

2135
01:36:05,118 --> 01:36:08,839
the texels properly and all that kind of

2136
01:36:07,039 --> 01:36:12,079
good stuff

2137
01:36:08,840 --> 01:36:14,000
um when we

2138
01:36:12,079 --> 01:36:15,359
work on rows here we create this

2139
01:36:14,000 --> 01:36:19,118
accumulator

2140
01:36:15,359 --> 01:36:21,519
um and basically we're going to be uh

2141
01:36:19,118 --> 01:36:25,679
that ray the weight that we add for each

2142
01:36:21,520 --> 01:36:27,360
ray right is going to be based on

2143
01:36:25,679 --> 01:36:29,600
um

2144
01:36:27,359 --> 01:36:32,079
the inverse of however many rays we cast

2145
01:36:29,600 --> 01:36:35,600
for every texel

2146
01:36:32,079 --> 01:36:38,399
uh when we step through these

2147
01:36:35,600 --> 01:36:39,760
i feel like this should just work like i

2148
01:36:38,399 --> 01:36:42,719
don't feel like we should have to do

2149
01:36:39,760 --> 01:36:42,719
anything special here

2150
01:36:47,359 --> 01:36:53,759
um and after we sample

2151
01:36:50,000 --> 01:36:57,600
um right we just

2152
01:36:53,760 --> 01:36:59,679
we're just summing the the accumulator

2153
01:36:57,600 --> 01:37:01,119
over the rays

2154
01:36:59,679 --> 01:37:03,520
ah

2155
01:37:01,118 --> 01:37:05,439
that is a problem

2156
01:37:03,520 --> 01:37:09,600
so it's not a summation there it's just

2157
01:37:05,439 --> 01:37:09,599
setting it equal is all that's happening

2158
01:37:10,158 --> 01:37:12,319
so

2159
01:37:12,560 --> 01:37:15,920
there we go

2160
01:37:14,960 --> 01:37:19,520
um

2161
01:37:15,920 --> 01:37:21,359
so now at least we're stably

2162
01:37:19,520 --> 01:37:23,840
we are stably evaluating the lighting

2163
01:37:21,359 --> 01:37:25,679
we're evaluating it in the correct order

2164
01:37:23,840 --> 01:37:28,480
um

2165
01:37:25,679 --> 01:37:29,920
and we now just have to figure out like

2166
01:37:28,479 --> 01:37:31,919
why we're getting

2167
01:37:29,920 --> 01:37:34,639
first of all we have to fix the holes in

2168
01:37:31,920 --> 01:37:37,118
the sampling sphere which you can see

2169
01:37:34,639 --> 01:37:37,118
here again

2170
01:37:42,000 --> 01:37:44,560
so we want to try and fix that so we're

2171
01:37:43,520 --> 01:37:46,960
not

2172
01:37:44,560 --> 01:37:49,199
sampling down all the time and then we

2173
01:37:46,960 --> 01:37:51,279
have two more problems one is we're

2174
01:37:49,198 --> 01:37:53,599
getting that light flooding and we don't

2175
01:37:51,279 --> 01:37:56,158
really know where that's coming from

2176
01:37:53,600 --> 01:37:57,840
uh but the other problem we have is also

2177
01:37:56,158 --> 01:38:00,238
that uh

2178
01:37:57,840 --> 01:38:03,440
there's when we move

2179
01:38:00,238 --> 01:38:05,118
there's some weird like on movement we

2180
01:38:03,439 --> 01:38:07,519
get

2181
01:38:05,118 --> 01:38:08,799
some dimming artifact i have no idea

2182
01:38:07,520 --> 01:38:10,320
where that's coming from

2183
01:38:08,800 --> 01:38:11,600
doesn't

2184
01:38:10,319 --> 01:38:13,439
stand to reason that should be happening

2185
01:38:11,600 --> 01:38:15,679
so i think that's just a bug

2186
01:38:13,439 --> 01:38:17,759
uh that that is happening

2187
01:38:15,679 --> 01:38:19,600
with how we're accumulating or something

2188
01:38:17,760 --> 01:38:20,719
something bad is happening there

2189
01:38:19,600 --> 01:38:23,119
right

2190
01:38:20,719 --> 01:38:25,439
um like it's like it's being cleared or

2191
01:38:23,118 --> 01:38:27,359
something which is totally wrong

2192
01:38:25,439 --> 01:38:29,039
but we're pretty close and if you look

2193
01:38:27,359 --> 01:38:32,079
at sort of like if you imagine you got

2194
01:38:29,039 --> 01:38:34,158
rid of that dimming effect

2195
01:38:32,079 --> 01:38:37,198
this would be pretty stable pretty good

2196
01:38:34,158 --> 01:38:39,359
lighting right it's it's pretty close

2197
01:38:37,198 --> 01:38:41,118
it's not that far from what we actually

2198
01:38:39,359 --> 01:38:42,839
want so we have some weird things we've

2199
01:38:41,118 --> 01:38:46,079
got like the the green

2200
01:38:42,840 --> 01:38:48,079
bleed um we've got the the weird dimming

2201
01:38:46,079 --> 01:38:50,639
as we move

2202
01:38:48,079 --> 01:38:52,800
but we're pretty close to good and we're

2203
01:38:50,639 --> 01:38:55,359
we're very respectable frame rate wise

2204
01:38:52,800 --> 01:38:57,679
even with all the debug stuff on we're

2205
01:38:55,359 --> 01:38:59,839
30

2206
01:38:57,679 --> 01:39:03,039
we're well above 30. so i think we're

2207
01:38:59,840 --> 01:39:05,119
probably uh able to do this at 60fps as

2208
01:39:03,039 --> 01:39:07,118
well right i think we'll probably be

2209
01:39:05,118 --> 01:39:09,599
able to

2210
01:39:07,118 --> 01:39:09,599
to um

2211
01:39:10,000 --> 01:39:13,359
button this down

2212
01:39:11,679 --> 01:39:17,039
and this is on an old machine too right

2213
01:39:13,359 --> 01:39:17,039
like this is not on a new machine

2214
01:39:20,479 --> 01:39:24,158
okay so

2215
01:39:21,760 --> 01:39:26,480
first questions first how do we fix our

2216
01:39:24,158 --> 01:39:28,000
sphere to not have this problem with

2217
01:39:26,479 --> 01:39:29,599
being unable to find stuff do we just

2218
01:39:28,000 --> 01:39:31,198
need to make it denser

2219
01:39:29,600 --> 01:39:32,800
do we need to change the way we're doing

2220
01:39:31,198 --> 01:39:35,678
this like maybe this is just a bad way

2221
01:39:32,800 --> 01:39:39,400
to do it unfortunately um are we picking

2222
01:39:35,679 --> 01:39:39,399
wrong i don't know

2223
01:40:00,399 --> 01:40:05,960
so octahedral from unit vector

2224
01:40:27,600 --> 01:40:33,039
so this will be correctly using the plus

2225
01:40:30,800 --> 01:40:35,440
one offsets

2226
01:40:33,039 --> 01:40:37,840
that all seems fine

2227
01:40:35,439 --> 01:40:37,839
and

2228
01:40:39,279 --> 01:40:44,719
so i don't know is like 20 like like

2229
01:40:42,158 --> 01:40:47,359
let's let's check by using a massively

2230
01:40:44,719 --> 01:40:51,840
over sampled sphere

2231
01:40:47,359 --> 01:40:51,839
so this is twice as sampled right

2232
01:40:54,319 --> 01:40:58,000
and i guess we might say

2233
01:41:03,279 --> 01:41:07,279
this this might not converge though

2234
01:41:05,279 --> 01:41:08,960
because this is an arbitrary this value

2235
01:41:07,279 --> 01:41:11,679
doesn't mean anything

2236
01:41:08,960 --> 01:41:15,279
um it probably needs to be scaled like

2237
01:41:11,679 --> 01:41:15,279
by the total direction count

2238
01:41:15,679 --> 01:41:20,520
uh in some way

2239
01:41:17,279 --> 01:41:24,559
so like you know it would have to be

2240
01:41:20,520 --> 01:41:25,760
increased or decreased correctly

2241
01:41:24,560 --> 01:41:27,840
um

2242
01:41:25,760 --> 01:41:29,920
so like this value probably needs to be

2243
01:41:27,840 --> 01:41:32,719
lower at that point right this needs to

2244
01:41:29,920 --> 01:41:34,719
be like something else and i don't know

2245
01:41:32,719 --> 01:41:37,039
for 2x we should probably try to figure

2246
01:41:34,719 --> 01:41:38,639
that out

2247
01:41:37,039 --> 01:41:40,238
what that should realistically be if

2248
01:41:38,639 --> 01:41:41,679
we're gonna use this repulsion but you

2249
01:41:40,238 --> 01:41:42,879
know that might also be an argument like

2250
01:41:41,679 --> 01:41:44,880
i said for like we need to do something

2251
01:41:42,880 --> 01:41:47,840
that's not repulsion like repulsion is

2252
01:41:44,880 --> 01:41:47,840
just too sloppy

2253
01:42:24,158 --> 01:42:27,799
it's not looking good

2254
01:42:43,198 --> 01:42:46,559
well we'll leave it at that difference

2255
01:42:45,600 --> 01:42:48,320
for now

2256
01:42:46,560 --> 01:42:50,239
that's just the difference between the

2257
01:42:48,319 --> 01:42:51,840
maximum distance and the minimum

2258
01:42:50,238 --> 01:42:54,399
distance so it's the variance on the

2259
01:42:51,840 --> 01:42:57,360
sphere so you know in some sense

2260
01:42:54,399 --> 01:42:59,279
it's not entirely implausible where did

2261
01:42:57,359 --> 01:43:02,399
my command go

2262
01:42:59,279 --> 01:43:02,399
i don't know what happened there

2263
01:43:03,679 --> 01:43:08,480
it's not entirely implausible that you

2264
01:43:05,679 --> 01:43:09,600
could continue to use it that way but

2265
01:43:08,479 --> 01:43:11,839
yeah

2266
01:43:09,600 --> 01:43:11,840
um

2267
01:43:13,600 --> 01:43:16,400
so 8

2268
01:43:15,118 --> 01:43:17,759
16

2269
01:43:16,399 --> 01:43:18,879
um

2270
01:43:17,760 --> 01:43:21,119
handmade

2271
01:43:18,880 --> 01:43:23,520
sampling spheres

2272
01:43:21,118 --> 01:43:25,118
um so we'll see if we massively over

2273
01:43:23,520 --> 01:43:28,560
sample the sphere

2274
01:43:25,118 --> 01:43:30,158
will that like let it pick enough

2275
01:43:28,560 --> 01:43:31,520
for each texel if it doesn't that

2276
01:43:30,158 --> 01:43:33,359
suggests maybe we've got a bug where

2277
01:43:31,520 --> 01:43:35,119
it's actually not picking properly

2278
01:43:33,359 --> 01:43:37,519
because with twice as many you'd think

2279
01:43:35,118 --> 01:43:39,198
there would be plenty in any given

2280
01:43:37,520 --> 01:43:42,480
section of the octahedron to get the

2281
01:43:39,198 --> 01:43:43,919
number that was necessary right

2282
01:43:42,479 --> 01:43:46,319
and this doesn't really look all that

2283
01:43:43,920 --> 01:43:48,000
much different right

2284
01:43:46,319 --> 01:43:49,359
so it kind of feels like it's just

2285
01:43:48,000 --> 01:43:50,560
broken

2286
01:43:49,359 --> 01:43:52,880
like

2287
01:43:50,560 --> 01:43:54,560
you know what i mean and it's it's it's

2288
01:43:52,880 --> 01:43:56,480
really weird that that would be the case

2289
01:43:54,560 --> 01:43:58,560
so i think like this may just be broken

2290
01:43:56,479 --> 01:44:00,879
like this is not working properly or

2291
01:43:58,560 --> 01:44:06,119
something

2292
01:44:00,880 --> 01:44:06,118
because if the total direction count um

2293
01:44:15,279 --> 01:44:20,198
if the total direction count that you

2294
01:44:16,960 --> 01:44:20,198
ask for

2295
01:44:24,479 --> 01:44:29,599
is

2296
01:44:26,000 --> 01:44:32,000
twice as many as you need

2297
01:44:29,600 --> 01:44:33,679
then how would you not and they're like

2298
01:44:32,000 --> 01:44:35,279
point repulsed so they're relatively

2299
01:44:33,679 --> 01:44:39,719
well distributed

2300
01:44:35,279 --> 01:44:39,719
how would you not get enough

2301
01:45:19,520 --> 01:45:24,080
like something is really off about that

2302
01:45:21,600 --> 01:45:25,760
but i don't know what it is is it

2303
01:45:24,079 --> 01:45:28,319
because our get octahedral offset

2304
01:45:25,760 --> 01:45:29,600
routine is busted or something

2305
01:45:28,319 --> 01:45:33,198
like you can see how this is working

2306
01:45:29,600 --> 01:45:36,400
it's stepping through the tx and tys

2307
01:45:33,198 --> 01:45:39,279
and then it is for every

2308
01:45:36,399 --> 01:45:42,479
ray that it needs to output

2309
01:45:39,279 --> 01:45:44,719
it does raise per texel of those for

2310
01:45:42,479 --> 01:45:47,519
that tx and t y by just looping through

2311
01:45:44,719 --> 01:45:48,800
like literally n squared just looping

2312
01:45:47,520 --> 01:45:53,000
through

2313
01:45:48,800 --> 01:45:53,000
looking for something that matches

2314
01:46:06,158 --> 01:46:10,719
and it just doesn't make any sense

2315
01:46:08,880 --> 01:46:13,279
that you wouldn't have

2316
01:46:10,719 --> 01:46:14,960
enough in in it like how would that be

2317
01:46:13,279 --> 01:46:17,039
possible i i'm trying to think if

2318
01:46:14,960 --> 01:46:19,760
there's an error in my reasoning but

2319
01:46:17,039 --> 01:46:21,198
it doesn't feel like you could possibly

2320
01:46:19,760 --> 01:46:23,840
have

2321
01:46:21,198 --> 01:46:23,839
so few

2322
01:46:24,238 --> 01:46:29,118
on the sphere at that point

2323
01:46:27,118 --> 01:46:32,238
um

2324
01:46:29,118 --> 01:46:34,079
that you couldn't sieve them

2325
01:46:32,238 --> 01:46:36,158
it just doesn't stand to reason that

2326
01:46:34,079 --> 01:46:40,519
that seems like

2327
01:46:36,158 --> 01:46:40,519
obviously has to be wrong

2328
01:46:43,279 --> 01:46:46,809
so

2329
01:46:43,680 --> 01:46:46,810
[Music]

2330
01:46:53,279 --> 01:46:57,719
now that's what it did look like

2331
01:47:08,238 --> 01:47:12,479
and honestly it really doesn't even look

2332
01:47:10,079 --> 01:47:12,479
different

2333
01:47:17,118 --> 01:47:21,839
despite asking for twice as many points

2334
01:47:20,000 --> 01:47:23,118
is there something like that i'm missing

2335
01:47:21,840 --> 01:47:24,719
here

2336
01:47:23,118 --> 01:47:26,079
like we call generate price on

2337
01:47:24,719 --> 01:47:28,239
distribution

2338
01:47:26,079 --> 01:47:31,559
with input duracount

2339
01:47:28,238 --> 01:47:31,559
so like

2340
01:47:37,279 --> 01:47:41,198
hmm

2341
01:47:39,039 --> 01:47:45,319
what am i missing

2342
01:47:41,198 --> 01:47:45,319
i'm definitely missing something

2343
01:48:12,000 --> 01:48:15,679
i feel like we're going to need a snack

2344
01:48:13,279 --> 01:48:15,679
for this

2345
01:48:16,880 --> 01:48:20,480
we definitely want to solve this problem

2346
01:48:18,719 --> 01:48:22,560
and we need a snack for this so i'm

2347
01:48:20,479 --> 01:48:24,879
going to call break time

2348
01:48:22,560 --> 01:48:26,159
and we're going to get a snack

2349
01:48:24,880 --> 01:48:27,679
and then we're going to

2350
01:48:26,158 --> 01:48:29,198
check it again we're going to figure it

2351
01:48:27,679 --> 01:48:30,960
out

2352
01:48:29,198 --> 01:48:33,039
that's my official call everyone takes

2353
01:48:30,960 --> 01:48:34,399
snack break

2354
01:48:33,039 --> 01:48:37,159
do it

2355
01:48:34,399 --> 01:48:51,589
i'll be back in a moment

2356
01:48:37,159 --> 01:48:51,590
[Music]

2357
01:48:52,719 --> 01:49:01,088
foreign

2358
01:48:54,670 --> 01:49:01,088
[Music]

2359
01:49:04,238 --> 01:49:07,238
bye

2360
01:49:11,319 --> 01:50:26,840
[Music]

2361
01:50:32,399 --> 01:50:35,369
so

2362
01:50:35,210 --> 01:50:38,439
[Music]

2363
01:50:35,369 --> 01:50:38,439
[Applause]

2364
01:50:40,310 --> 01:50:53,500
[Music]

2365
01:50:56,960 --> 01:50:59,960
do

2366
01:51:05,069 --> 01:51:10,139
[Music]

2367
01:51:11,840 --> 01:51:14,840
oh

2368
01:51:27,520 --> 01:51:35,799
uh

2369
01:51:29,390 --> 01:51:35,798
[Music]

2370
01:51:38,960 --> 01:51:41,960
bye

2371
01:51:46,029 --> 01:51:58,559
[Music]

2372
01:51:56,238 --> 01:51:58,559
all right

2373
01:51:59,520 --> 01:52:02,520
so

2374
01:52:12,719 --> 01:52:16,920
we have two choices here really

2375
01:52:18,319 --> 01:52:21,920
one is we just abandon the scheme a

2376
01:52:20,238 --> 01:52:23,919
priori

2377
01:52:21,920 --> 01:52:25,118
and say look we're gonna generate them

2378
01:52:23,920 --> 01:52:26,399
in a different way that doesn't involve

2379
01:52:25,118 --> 01:52:30,279
picking the other is we debug the

2380
01:52:26,399 --> 01:52:30,279
picking because it must be broken

2381
01:52:31,118 --> 01:52:34,639
unless somehow

2382
01:52:33,118 --> 01:52:36,639
generating twice as many points in the

2383
01:52:34,639 --> 01:52:40,599
sphere still somehow doesn't have enough

2384
01:52:36,639 --> 01:52:40,599
on each octahedral point

2385
01:52:52,000 --> 01:52:55,359
which doesn't seem to make sense

2386
01:52:55,760 --> 01:52:58,920
to me

2387
01:52:59,279 --> 01:53:03,319
16 was raised for texel

2388
01:53:12,719 --> 01:53:16,480
so we're generating 32

2389
01:53:18,560 --> 01:53:24,960
times 64.

2390
01:53:21,599 --> 01:53:26,560
yeah we generate 32 choices

2391
01:53:24,960 --> 01:53:28,719
per texel

2392
01:53:26,560 --> 01:53:31,679
and then when we go to look for 16 of

2393
01:53:28,719 --> 01:53:34,960
them we find that there supposedly

2394
01:53:31,679 --> 01:53:36,880
aren't 16

2395
01:53:34,960 --> 01:53:39,880
in some of the texels

2396
01:53:36,880 --> 01:53:39,880
right

2397
01:53:44,639 --> 01:53:50,920
supposedly

2398
01:53:47,279 --> 01:53:50,920
that's what we are told

2399
01:53:55,520 --> 01:53:58,239
and if we look

2400
01:53:59,520 --> 01:54:02,320
at the inl

2401
01:54:02,479 --> 01:54:08,479
you can see that it's like very specific

2402
01:54:05,118 --> 01:54:10,399
like it's not like everybody is missing

2403
01:54:08,479 --> 01:54:12,879
one or two

2404
01:54:10,399 --> 01:54:15,598
it's like there's very specific holes

2405
01:54:12,880 --> 01:54:17,679
like a giant hole in one of the things

2406
01:54:15,599 --> 01:54:19,840
and then another one hat is completely

2407
01:54:17,679 --> 01:54:21,279
full

2408
01:54:19,840 --> 01:54:23,279
which makes me think there's some kind

2409
01:54:21,279 --> 01:54:24,960
of bug

2410
01:54:23,279 --> 01:54:27,118
either in the repulsion so that it's

2411
01:54:24,960 --> 01:54:30,480
like repelling things more at that point

2412
01:54:27,118 --> 01:54:32,000
because of some way that we wrote it

2413
01:54:30,479 --> 01:54:35,399
or something else

2414
01:54:32,000 --> 01:54:35,399
i'm not sure

2415
01:54:46,639 --> 01:54:49,639
but

2416
01:54:50,000 --> 01:54:53,039
we should probably try to

2417
01:54:55,599 --> 01:54:58,639
debug the octahedral map thing a little

2418
01:54:57,439 --> 01:55:00,079
bit

2419
01:54:58,639 --> 01:55:02,639
because i don't know maybe that routine

2420
01:55:00,079 --> 01:55:04,399
is kind of busted

2421
01:55:02,639 --> 01:55:07,359
as well look we don't know

2422
01:55:04,399 --> 01:55:07,359
if that routine is right

2423
01:55:08,479 --> 01:55:11,439
it may be totally wrong

2424
01:55:13,920 --> 01:55:17,239
you know what i'm saying

2425
01:55:21,118 --> 01:55:26,319
oh and if you wanna know the indexes

2426
01:55:22,479 --> 01:55:26,319
here's the indexes like zero zero

2427
01:55:26,719 --> 01:55:30,639
like

2428
01:55:27,760 --> 01:55:35,119
it's right on the edge right so zeros

2429
01:55:30,639 --> 01:55:35,118
threes fours fives sevens the

2430
01:55:36,479 --> 01:55:41,519
the middle numbers like two two that

2431
01:55:38,319 --> 01:55:43,439
sort of thing never shows up here

2432
01:55:41,520 --> 01:55:46,440
right

2433
01:55:43,439 --> 01:55:46,439
um

2434
01:55:46,560 --> 01:55:50,960
so it seems like maybe the um to me that

2435
01:55:49,439 --> 01:55:52,960
it's possible that the thing that's

2436
01:55:50,960 --> 01:55:55,039
doing the classifying is classifying

2437
01:55:52,960 --> 01:55:57,359
wrong

2438
01:55:55,039 --> 01:55:57,359
maybe

2439
01:55:58,719 --> 01:56:02,319
i don't know there is one other

2440
01:56:00,399 --> 01:56:04,079
possibility

2441
01:56:02,319 --> 01:56:06,319
which is that

2442
01:56:04,079 --> 01:56:06,319
look

2443
01:56:06,800 --> 01:56:12,159
an octahedron

2444
01:56:08,719 --> 01:56:13,439
by definition warps a sphere

2445
01:56:12,158 --> 01:56:16,158
in the place

2446
01:56:13,439 --> 01:56:20,238
where it is warped it will be hard for

2447
01:56:16,158 --> 01:56:20,238
that texel to find anything right

2448
01:56:20,560 --> 01:56:26,760
because it's covering less area of the

2449
01:56:22,560 --> 01:56:26,760
sphere you know what i mean

2450
01:56:29,760 --> 01:56:34,639
so

2451
01:56:31,439 --> 01:56:34,638
you know i could believe it

2452
01:56:35,359 --> 01:56:38,238
um

2453
01:56:36,560 --> 01:56:40,560
which is why also i'm wondering like

2454
01:56:38,238 --> 01:56:44,598
okay

2455
01:56:40,560 --> 01:56:44,599
what's next uh cheat your owns

2456
01:57:20,960 --> 01:57:25,079
not enough i should have gotten more

2457
01:57:25,198 --> 01:57:31,039
i need like two bowls of chicharrons is

2458
01:57:27,679 --> 01:57:31,039
what i really need in life

2459
01:57:31,439 --> 01:57:36,158
the more bowls of chicharrons you have

2460
01:57:33,599 --> 01:57:38,319
the better your life is

2461
01:57:36,158 --> 01:57:40,158
i mean i think that's just everyone

2462
01:57:38,319 --> 01:57:43,439
knows that

2463
01:57:40,158 --> 01:57:43,439
we don't need to labor the point

2464
01:57:43,679 --> 01:57:46,158
okay so

2465
01:57:48,238 --> 01:57:52,158
i guess what i would say here is i do

2466
01:57:50,079 --> 01:57:53,439
think we may have to change the way this

2467
01:57:52,158 --> 01:57:55,439
is working

2468
01:57:53,439 --> 01:57:56,638
so i might not bother debugging this

2469
01:57:55,439 --> 01:57:58,000
part because

2470
01:57:56,639 --> 01:58:00,639
when i think about the fact that the

2471
01:57:58,000 --> 01:58:02,319
octahedral map is by definition a warp

2472
01:58:00,639 --> 01:58:05,760
of the sphere

2473
01:58:02,319 --> 01:58:07,759
then to me that suggests that i am going

2474
01:58:05,760 --> 01:58:10,560
to have like i'm not going to get a

2475
01:58:07,760 --> 01:58:13,520
choice i'm going to have to

2476
01:58:10,560 --> 01:58:15,760
distribute points in the actual texels

2477
01:58:13,520 --> 01:58:18,560
and make them be evenly distributed like

2478
01:58:15,760 --> 01:58:20,159
in textile space because otherwise

2479
01:58:18,560 --> 01:58:22,320
you can't evenly distribute things in

2480
01:58:20,158 --> 01:58:24,000
sphere space or like

2481
01:58:22,319 --> 01:58:26,079
you're like that's not going to work

2482
01:58:24,000 --> 01:58:28,479
because the octane doesn't pull evenly

2483
01:58:26,079 --> 01:58:30,800
from those

2484
01:58:28,479 --> 01:58:34,000
so it kind of does feel like i i need to

2485
01:58:30,800 --> 01:58:36,239
do something slightly different here um

2486
01:58:34,000 --> 01:58:38,880
and i don't know exactly what that thing

2487
01:58:36,238 --> 01:58:41,118
should be but maybe that what that

2488
01:58:38,880 --> 01:58:44,400
should be is we try to do more blue

2489
01:58:41,118 --> 01:58:46,639
noise on like inside the texel

2490
01:58:44,399 --> 01:58:48,000
but as far as like textile to texel we

2491
01:58:46,639 --> 01:58:50,159
don't try to evenly distribute those

2492
01:58:48,000 --> 01:58:52,158
across the sphere because

2493
01:58:50,158 --> 01:58:54,719
like it wouldn't help if we did

2494
01:58:52,158 --> 01:58:56,879
or we try to do something else where we

2495
01:58:54,719 --> 01:58:59,198
just like seed things

2496
01:58:56,880 --> 01:58:59,199
um

2497
01:59:01,039 --> 01:59:05,039
okay here's the thought here's a thought

2498
01:59:02,560 --> 01:59:05,810
here's a thought

2499
01:59:05,039 --> 01:59:06,960
what if we

2500
01:59:05,810 --> 01:59:09,760
[Music]

2501
01:59:06,960 --> 01:59:09,760
what if we

2502
01:59:11,520 --> 01:59:15,800
here's my proposal you ready for this

2503
01:59:16,158 --> 01:59:19,359
hold on to your mankas

2504
01:59:24,158 --> 01:59:27,279
what if we

2505
01:59:26,238 --> 01:59:29,598
seed

2506
01:59:27,279 --> 01:59:32,639
the number of rays per texel that we

2507
01:59:29,599 --> 01:59:35,520
want using white noise

2508
01:59:32,639 --> 01:59:37,920
inside each texel

2509
01:59:35,520 --> 01:59:39,679
so we start with something that is white

2510
01:59:37,920 --> 01:59:41,920
noise

2511
01:59:39,679 --> 01:59:44,239
with 16 rays

2512
01:59:41,920 --> 01:59:45,920
coming out of each texel face on the

2513
01:59:44,238 --> 01:59:46,959
sphere

2514
01:59:45,920 --> 01:59:47,760
we then

2515
01:59:46,960 --> 01:59:49,599
run

2516
01:59:47,760 --> 01:59:51,199
the distributor

2517
01:59:49,599 --> 01:59:54,400
but

2518
01:59:51,198 --> 01:59:55,839
we refuse to let

2519
01:59:54,399 --> 01:59:57,439
any texel

2520
01:59:55,840 --> 02:00:01,440
leave

2521
01:59:57,439 --> 02:00:01,439
the octant that it is in

2522
02:00:06,800 --> 02:00:09,360
what do you think

2523
02:00:11,520 --> 02:00:16,880
anyone

2524
02:00:13,679 --> 02:00:22,079
anyone want to weigh in on that

2525
02:00:16,880 --> 02:00:24,880
so we we start with 64x6 you know 64 8x8

2526
02:00:22,079 --> 02:00:28,158
so 64 texels

2527
02:00:24,880 --> 02:00:31,199
octahedron we generate white noise

2528
02:00:28,158 --> 02:00:34,319
shooting out of those texels

2529
02:00:31,198 --> 02:00:37,598
we then run the sphere repulsion

2530
02:00:34,319 --> 02:00:39,679
but we don't let texel we don't let any

2531
02:00:37,599 --> 02:00:43,760
rays leave the texels that they're in so

2532
02:00:39,679 --> 02:00:45,520
there's always exactly 16 per texel

2533
02:00:43,760 --> 02:00:49,360
but they can repulse to try and get

2534
02:00:45,520 --> 02:00:49,360
themselves spread more evenly apart

2535
02:00:50,719 --> 02:00:53,719
right

2536
02:01:02,719 --> 02:01:07,118
won't you get clamping on the edges

2537
02:01:05,760 --> 02:01:08,639
well

2538
02:01:07,118 --> 02:01:10,960
i mean

2539
02:01:08,639 --> 02:01:10,960
yeah

2540
02:01:11,118 --> 02:01:17,198
you can't move past the edge but the

2541
02:01:13,118 --> 02:01:19,439
point is other texels should in theory

2542
02:01:17,198 --> 02:01:21,359
other samples that are in the

2543
02:01:19,439 --> 02:01:23,519
neighboring texel should in theory push

2544
02:01:21,359 --> 02:01:26,399
you

2545
02:01:23,520 --> 02:01:26,400
still right

2546
02:01:27,359 --> 02:01:32,079
now the fact that it's a warped space

2547
02:01:29,760 --> 02:01:32,079
you know

2548
02:01:34,158 --> 02:01:38,158
is a problem but

2549
02:01:38,238 --> 02:01:42,238
i think we should go do something like

2550
02:01:40,000 --> 02:01:45,279
that though because we can start by just

2551
02:01:42,238 --> 02:01:47,439
doing 16 rays uh randomly generated

2552
02:01:45,279 --> 02:01:49,599
white noise out each texel and that's

2553
02:01:47,439 --> 02:01:51,839
some place to start anyway

2554
02:01:49,599 --> 02:01:54,719
and then the repulsion just has to try

2555
02:01:51,840 --> 02:01:56,079
and improve that slightly right like

2556
02:01:54,719 --> 02:01:57,679
we could just use the white noise

2557
02:01:56,079 --> 02:01:59,279
directly but it's not the best sampling

2558
02:01:57,679 --> 02:02:00,639
pattern because it's going to be a

2559
02:01:59,279 --> 02:02:04,960
little clumpy

2560
02:02:00,639 --> 02:02:08,400
so we could just look at it that way

2561
02:02:04,960 --> 02:02:09,679
so maybe let's start with that

2562
02:02:08,399 --> 02:02:11,439
um

2563
02:02:09,679 --> 02:02:12,880
because we can start by using the white

2564
02:02:11,439 --> 02:02:15,439
noise directly without actually having

2565
02:02:12,880 --> 02:02:17,359
any repulsion and then we can

2566
02:02:15,439 --> 02:02:19,678
turn on the repulsion and work on that

2567
02:02:17,359 --> 02:02:21,920
separately so let's suppose we uh

2568
02:02:19,679 --> 02:02:22,880
basically nerf the propuls the repulsion

2569
02:02:21,920 --> 02:02:24,319
part

2570
02:02:22,880 --> 02:02:25,920
right

2571
02:02:24,319 --> 02:02:28,639
um and we're just going to seed the

2572
02:02:25,920 --> 02:02:30,158
directions um

2573
02:02:28,639 --> 02:02:34,159
out of the texel

2574
02:02:30,158 --> 02:02:34,960
so we use the like octahedral

2575
02:02:34,158 --> 02:02:39,839
to

2576
02:02:34,960 --> 02:02:39,840
offset something thingy right

2577
02:02:40,479 --> 02:02:44,359
um

2578
02:02:41,359 --> 02:02:44,359
so

2579
02:02:47,920 --> 02:02:54,658
this unit vector from octahedral

2580
02:02:51,539 --> 02:02:54,658
[Music]

2581
02:02:56,158 --> 02:02:58,479
will

2582
02:02:58,880 --> 02:03:01,840
give us

2583
02:03:02,639 --> 02:03:05,960
a sampling

2584
02:03:19,920 --> 02:03:24,880
so the oxy coefficient is going to be

2585
02:03:22,319 --> 02:03:26,238
like one over the value right so so

2586
02:03:24,880 --> 02:03:29,840
as long as we

2587
02:03:26,238 --> 02:03:29,839
put these into uv space basically

2588
02:03:30,158 --> 02:03:34,399
unit vector from octahedral

2589
02:03:32,238 --> 02:03:37,759
from octahedral should give us

2590
02:03:34,399 --> 02:03:39,039
everything we want

2591
02:03:37,760 --> 02:03:42,039
right

2592
02:03:39,039 --> 02:03:42,039
um

2593
02:03:44,560 --> 02:03:49,039
yeah

2594
02:03:46,238 --> 02:03:50,879
so i think

2595
02:03:49,039 --> 02:03:54,800
that would do it

2596
02:03:50,880 --> 02:03:54,800
because that's a zero to one value

2597
02:03:54,840 --> 02:03:59,039
right

2598
02:03:56,800 --> 02:03:59,039
um

2599
02:04:04,479 --> 02:04:08,479
so let's let's see what happens

2600
02:04:07,039 --> 02:04:11,519
let's see what happens i'm going to call

2601
02:04:08,479 --> 02:04:13,118
unit vector from octahedral so so inside

2602
02:04:11,520 --> 02:04:15,760
hh sphere what we're actually going to

2603
02:04:13,118 --> 02:04:18,719
do is not this we're going to seed these

2604
02:04:15,760 --> 02:04:20,320
differently right

2605
02:04:18,719 --> 02:04:22,158
so in this place points on the sphere

2606
02:04:20,319 --> 02:04:25,039
poorly thing and we're going to change

2607
02:04:22,158 --> 02:04:26,319
this to place points on the sphere

2608
02:04:25,039 --> 02:04:27,599
um

2609
02:04:26,319 --> 02:04:29,519
16

2610
02:04:27,599 --> 02:04:32,960
randomly

2611
02:04:29,520 --> 02:04:32,960
per or not 16. uh

2612
02:04:33,118 --> 02:04:37,479
raise per texel randomly

2613
02:04:38,479 --> 02:04:42,959
uh per texel

2614
02:04:40,399 --> 02:04:45,039
so uh when we call this we would no

2615
02:04:42,960 --> 02:04:47,520
longer be able to tell it how many we

2616
02:04:45,039 --> 02:04:50,399
wanted we would have to specifically say

2617
02:04:47,520 --> 02:04:53,679
like what's the oct dim

2618
02:04:50,399 --> 02:04:55,519
um and how many rays per texel we have

2619
02:04:53,679 --> 02:04:57,679
we would then have yet another of the

2620
02:04:55,520 --> 02:04:59,199
exact same structure of loop like

2621
02:04:57,679 --> 02:05:01,679
everything basically just looks like

2622
02:04:59,198 --> 02:05:03,759
this in these routines right

2623
02:05:01,679 --> 02:05:07,920
so we basically just go through and we

2624
02:05:03,760 --> 02:05:09,440
say all right um the total direction

2625
02:05:07,920 --> 02:05:12,480
count is now

2626
02:05:09,439 --> 02:05:13,439
uh as it was before it's always going to

2627
02:05:12,479 --> 02:05:15,678
be

2628
02:05:13,439 --> 02:05:15,678
um

2629
02:05:16,479 --> 02:05:22,000
octave x times octave y times rays per

2630
02:05:20,238 --> 02:05:25,519
texel

2631
02:05:22,000 --> 02:05:26,560
uh and then we're going to seed them

2632
02:05:25,520 --> 02:05:30,920
by

2633
02:05:26,560 --> 02:05:30,920
uh doing this nonsense

2634
02:05:46,719 --> 02:05:50,560
uh and maybe i'll call this seed der

2635
02:05:48,479 --> 02:05:53,839
index just so it's not confused with any

2636
02:05:50,560 --> 02:05:56,000
variables below that we might use

2637
02:05:53,840 --> 02:05:58,800
um we're going to call unit vector from

2638
02:05:56,000 --> 02:06:02,639
octahedral and we need to basically have

2639
02:05:58,800 --> 02:06:04,400
this direction that comes back

2640
02:06:02,639 --> 02:06:05,279
um

2641
02:06:04,399 --> 02:06:07,679
we

2642
02:06:05,279 --> 02:06:10,238
when we do generate octahedral lighting

2643
02:06:07,679 --> 02:06:11,359
pattern this now no longer has to happen

2644
02:06:10,238 --> 02:06:13,439
so the

2645
02:06:11,359 --> 02:06:15,519
things that come back from generate

2646
02:06:13,439 --> 02:06:18,078
poisson distribution are just going to

2647
02:06:15,520 --> 02:06:21,040
be correct there's no actual work that

2648
02:06:18,078 --> 02:06:22,158
needs to be done so this pick would go

2649
02:06:21,039 --> 02:06:24,880
away

2650
02:06:22,158 --> 02:06:28,000
and you would just call

2651
02:06:24,880 --> 02:06:30,880
generate poisson distribution right

2652
02:06:28,000 --> 02:06:33,599
so in here we just say generate poisson

2653
02:06:30,880 --> 02:06:33,599
distribution

2654
02:06:33,840 --> 02:06:37,520
um and

2655
02:06:35,279 --> 02:06:39,599
it would just give you back the actual

2656
02:06:37,520 --> 02:06:40,639
answer right

2657
02:06:39,599 --> 02:06:42,639
so

2658
02:06:40,639 --> 02:06:45,359
what we do need to do here though is

2659
02:06:42,639 --> 02:06:48,239
generate random unilaterals that would

2660
02:06:45,359 --> 02:06:51,439
give us the correct offset so basically

2661
02:06:48,238 --> 02:06:51,439
like the v2

2662
02:06:51,679 --> 02:06:57,520
um this is like the the uv coordinate

2663
02:06:54,399 --> 02:06:59,039
right we would generate white noise

2664
02:06:57,520 --> 02:07:01,760
by uh

2665
02:06:59,039 --> 02:07:05,118
you know generating a unit vector from

2666
02:07:01,760 --> 02:07:07,280
a portion inside the text the texture

2667
02:07:05,118 --> 02:07:09,920
that represents one texel the specific

2668
02:07:07,279 --> 02:07:12,800
ty tx texel here

2669
02:07:09,920 --> 02:07:15,760
so we would essentially do like there's

2670
02:07:12,800 --> 02:07:19,440
there's going to be like a u

2671
02:07:15,760 --> 02:07:20,480
like a u span like how big is is a um or

2672
02:07:19,439 --> 02:07:24,078
like

2673
02:07:20,479 --> 02:07:25,759
text dim basically or like a uv dim i

2674
02:07:24,078 --> 02:07:27,920
don't know how you want to say that i'm

2675
02:07:25,760 --> 02:07:29,679
not sure what a good name is for it

2676
02:07:27,920 --> 02:07:33,039
but it would be

2677
02:07:29,679 --> 02:07:33,039
a uv dim

2678
02:07:33,439 --> 02:07:36,719
times a unilateral so we're going to go

2679
02:07:35,359 --> 02:07:39,598
like some

2680
02:07:36,719 --> 02:07:40,399
distance like you know

2681
02:07:39,599 --> 02:07:43,360
uh

2682
02:07:40,399 --> 02:07:45,359
some random distance along the the uv

2683
02:07:43,359 --> 02:07:47,598
dimension

2684
02:07:45,359 --> 02:07:47,598
um

2685
02:07:50,479 --> 02:07:55,198
like so and uh

2686
02:07:52,639 --> 02:07:58,480
the so the uv dim is like the oct map

2687
02:07:55,198 --> 02:08:01,519
dim one over the octa-map dim right so

2688
02:07:58,479 --> 02:08:04,238
it would be like tx plus

2689
02:08:01,520 --> 02:08:06,480
uh some random unilateral

2690
02:08:04,238 --> 02:08:09,118
so we start at like

2691
02:08:06,479 --> 02:08:10,799
whichever texel we're on

2692
02:08:09,118 --> 02:08:13,598
we add some

2693
02:08:10,800 --> 02:08:16,880
fractional value to it and we multiply

2694
02:08:13,599 --> 02:08:19,840
that by whatever the uv reciprocal is or

2695
02:08:16,880 --> 02:08:21,359
like you know i don't know uh

2696
02:08:19,840 --> 02:08:24,480
in oct

2697
02:08:21,359 --> 02:08:24,479
jim something like that

2698
02:08:25,599 --> 02:08:28,800
that seems about right

2699
02:08:30,560 --> 02:08:33,760
does that seem reasonable

2700
02:08:35,118 --> 02:08:37,759
uh so

2701
02:08:36,399 --> 02:08:40,719
we would have

2702
02:08:37,760 --> 02:08:43,280
a inv octam which is like one over the

2703
02:08:40,719 --> 02:08:43,279
octam

2704
02:08:44,319 --> 02:08:51,439
uh and that way like it steps through

2705
02:08:48,158 --> 02:08:53,839
correctly and uh yeah is that just is

2706
02:08:51,439 --> 02:08:53,839
that it

2707
02:08:55,118 --> 02:08:59,519
oops

2708
02:08:56,719 --> 02:09:01,439
um and then we just like write those out

2709
02:08:59,520 --> 02:09:04,440
uh in order

2710
02:09:01,439 --> 02:09:04,439
um

2711
02:09:08,399 --> 02:09:15,000
so is there really no inverse operator

2712
02:09:10,639 --> 02:09:15,000
there i guess there isn't that's fine

2713
02:09:18,319 --> 02:09:22,479
uh and so maybe that's right we don't

2714
02:09:21,599 --> 02:09:25,520
know

2715
02:09:22,479 --> 02:09:28,479
uh so let's try hh sphere

2716
02:09:25,520 --> 02:09:30,639
we disabled the rest of it right yeah

2717
02:09:28,479 --> 02:09:34,078
so maybe that's right we don't really

2718
02:09:30,639 --> 02:09:36,159
know um but we can

2719
02:09:34,078 --> 02:09:39,359
look at what it made

2720
02:09:36,158 --> 02:09:40,799
and see how bad it is right

2721
02:09:39,359 --> 02:09:42,519
so

2722
02:09:40,800 --> 02:09:45,520
you know they at least look

2723
02:09:42,520 --> 02:09:47,360
semi-coherent so it's not entirely

2724
02:09:45,520 --> 02:09:48,880
fictional what's been written here but

2725
02:09:47,359 --> 02:09:52,799
you know we have no way of knowing if

2726
02:09:48,880 --> 02:09:54,078
it's if it's really correct um

2727
02:09:52,800 --> 02:09:55,279
right

2728
02:09:54,078 --> 02:09:58,840
so

2729
02:09:55,279 --> 02:10:01,519
let's take a look if we now uh com

2730
02:09:58,840 --> 02:10:03,760
recompile we'll be compiling with those

2731
02:10:01,520 --> 02:10:05,119
new values we can at least look at them

2732
02:10:03,760 --> 02:10:06,079
in

2733
02:10:05,118 --> 02:10:07,839
um

2734
02:10:06,078 --> 02:10:11,279
on the drawing

2735
02:10:07,840 --> 02:10:12,960
like and see what we have

2736
02:10:11,279 --> 02:10:14,479
okay so something weird is happening

2737
02:10:12,960 --> 02:10:15,520
we're only getting

2738
02:10:14,479 --> 02:10:16,879
one

2739
02:10:15,520 --> 02:10:18,480
like we're not actually moving all the

2740
02:10:16,880 --> 02:10:21,719
way around did i did i mess up my for

2741
02:10:18,479 --> 02:10:21,718
loop there

2742
02:10:33,198 --> 02:10:38,638
oh are these uvs actually is that is it

2743
02:10:36,960 --> 02:10:43,078
not actually uv

2744
02:10:38,639 --> 02:10:43,078
is it actually positive negative

2745
02:10:53,039 --> 02:10:58,158
okay so actually it's negative one to

2746
02:10:55,840 --> 02:10:58,159
one

2747
02:10:59,039 --> 02:11:04,560
right

2748
02:11:00,399 --> 02:11:06,719
um so that's why we're not getting yeah

2749
02:11:04,560 --> 02:11:08,840
so it's actually negative one to one

2750
02:11:06,719 --> 02:11:12,158
these are so

2751
02:11:08,840 --> 02:11:12,159
the uh

2752
02:11:12,479 --> 02:11:19,759
the division of that well

2753
02:11:16,158 --> 02:11:19,759
so does that mean it's like

2754
02:11:20,000 --> 02:11:22,880
negative four

2755
02:11:23,039 --> 02:11:28,319
like negative one is the zeroth texel

2756
02:11:26,479 --> 02:11:30,000
and one

2757
02:11:28,319 --> 02:11:30,960
yeah i don't really know

2758
02:11:30,000 --> 02:11:33,118
so

2759
02:11:30,960 --> 02:11:37,118
i guess that's fine that's pretty easy

2760
02:11:33,118 --> 02:11:39,118
to to fix if that actually is all it is

2761
02:11:37,118 --> 02:11:42,319
it would just be

2762
02:11:39,118 --> 02:11:42,319
you know two times

2763
02:11:42,639 --> 02:11:46,800
uh the value and then you bias it back

2764
02:11:44,800 --> 02:11:48,000
by one right

2765
02:11:46,800 --> 02:11:49,840
um

2766
02:11:48,000 --> 02:11:52,078
so that's not really

2767
02:11:49,840 --> 02:11:54,000
a problem if that's all it was i'm not

2768
02:11:52,078 --> 02:11:55,279
sure though because it's been a while

2769
02:11:54,000 --> 02:11:56,479
since we worked with these octahedral

2770
02:11:55,279 --> 02:11:59,359
maps

2771
02:11:56,479 --> 02:12:03,799
so i don't really remember oops i have

2772
02:11:59,359 --> 02:12:03,799
to actually run this again

2773
02:12:09,520 --> 02:12:13,840
all right

2774
02:12:10,639 --> 02:12:16,078
um so there's our sphere

2775
02:12:13,840 --> 02:12:16,078
right

2776
02:12:16,479 --> 02:12:21,519
and you know it's kinda sucky like it's

2777
02:12:20,158 --> 02:12:24,238
clumpy

2778
02:12:21,520 --> 02:12:27,119
exactly as you'd expect

2779
02:12:24,238 --> 02:12:27,118
but it's a sphere

2780
02:12:31,198 --> 02:12:34,559
and

2781
02:12:32,719 --> 02:12:36,158
you know

2782
02:12:34,560 --> 02:12:38,079
and it's a sphere i don't know what else

2783
02:12:36,158 --> 02:12:40,319
to say

2784
02:12:38,078 --> 02:12:40,319
um

2785
02:12:46,319 --> 02:12:50,880
the copying artifact thing is still

2786
02:12:48,880 --> 02:12:52,560
definitely there so we should like

2787
02:12:50,880 --> 02:12:54,239
totally unrelated to it it seems that's

2788
02:12:52,560 --> 02:12:55,840
just like stable

2789
02:12:54,238 --> 02:12:58,319
um and the green bleed is there so those

2790
02:12:55,840 --> 02:13:02,360
are separate bugs presumably

2791
02:12:58,319 --> 02:13:02,359
i think we're getting closer

2792
02:13:04,880 --> 02:13:09,760
so let's try now to

2793
02:13:06,960 --> 02:13:09,760
uh like

2794
02:13:10,560 --> 02:13:14,719
if we did want some repulsion here

2795
02:13:15,359 --> 02:13:19,460
i'm trying to think of like how we would

2796
02:13:17,520 --> 02:13:22,590
actually do this so

2797
02:13:19,460 --> 02:13:22,590
[Music]

2798
02:13:27,760 --> 02:13:31,840
so if we were doing some repulsion

2799
02:13:37,840 --> 02:13:43,039
i'm assuming what we would mostly do is

2800
02:13:40,479 --> 02:13:45,839
just say if the displacement would take

2801
02:13:43,039 --> 02:13:45,840
you

2802
02:13:46,399 --> 02:13:53,598
would change your texel index

2803
02:13:50,158 --> 02:13:53,598
then you can't do it

2804
02:13:57,359 --> 02:14:02,238
probably something like that i don't

2805
02:13:59,840 --> 02:14:02,239
actually know

2806
02:14:05,920 --> 02:14:11,800
uh look i'm not sure how plausible that

2807
02:14:07,520 --> 02:14:11,800
is it's an actual algorithm right

2808
02:14:25,840 --> 02:14:27,920
you

2809
02:14:41,599 --> 02:14:47,279
i might try it just because why not

2810
02:14:45,039 --> 02:14:49,599
so effectively what that would look like

2811
02:14:47,279 --> 02:14:52,399
is when you have

2812
02:14:49,599 --> 02:14:55,840
one of these so you're calling

2813
02:14:52,399 --> 02:14:55,839
unit vector from octahedral

2814
02:14:56,238 --> 02:15:01,359
uh we would just call octahedral from

2815
02:14:58,960 --> 02:15:02,480
unit vector

2816
02:15:01,359 --> 02:15:03,519
and then

2817
02:15:02,479 --> 02:15:05,359
clamp

2818
02:15:03,520 --> 02:15:07,440
right uh or

2819
02:15:05,359 --> 02:15:09,439
quantize

2820
02:15:07,439 --> 02:15:11,198
um

2821
02:15:09,439 --> 02:15:13,118
we could also just call get octhesial

2822
02:15:11,198 --> 02:15:15,279
offset which already does

2823
02:15:13,118 --> 02:15:16,078
that quantize

2824
02:15:15,279 --> 02:15:19,439
so

2825
02:15:16,078 --> 02:15:23,840
maybe we just do that so in here we say

2826
02:15:19,439 --> 02:15:23,839
all right we turn the repulsion back on

2827
02:15:24,639 --> 02:15:29,840
we go into the update step which is this

2828
02:15:28,238 --> 02:15:32,718
i think

2829
02:15:29,840 --> 02:15:35,360
and where we would update the direction

2830
02:15:32,719 --> 02:15:36,800
which is here we only update the

2831
02:15:35,359 --> 02:15:39,598
direction

2832
02:15:36,800 --> 02:15:40,480
uh if it would stay in the same quadrant

2833
02:15:39,599 --> 02:15:42,960
right

2834
02:15:40,479 --> 02:15:46,959
so we basically say like

2835
02:15:42,960 --> 02:15:49,279
if the octahedral uh if they're not

2836
02:15:46,960 --> 02:15:51,679
or if they if they are equal

2837
02:15:49,279 --> 02:15:55,359
we can take the step otherwise we can't

2838
02:15:51,679 --> 02:15:57,599
so if get octahedral offset for

2839
02:15:55,359 --> 02:15:57,598
the

2840
02:15:57,679 --> 02:16:02,639
direction that it was and the new

2841
02:16:00,000 --> 02:16:05,639
direction are not the same

2842
02:16:02,639 --> 02:16:05,639
um

2843
02:16:06,639 --> 02:16:12,000
and the octim coefficient

2844
02:16:09,920 --> 02:16:15,480
is whatever the light atlas would have

2845
02:16:12,000 --> 02:16:15,479
said that it was

2846
02:16:33,840 --> 02:16:39,318
so i think that would just require us

2847
02:16:36,000 --> 02:16:39,318
doing this

2848
02:16:49,439 --> 02:16:52,880
it has the padding around the border

2849
02:16:51,200 --> 02:16:54,800
right which is kind of annoying but

2850
02:16:52,879 --> 02:16:56,478
that's just how

2851
02:16:54,799 --> 02:16:58,239
that's just how computers have to work

2852
02:16:56,478 --> 02:17:01,239
i'm afraid

2853
02:16:58,239 --> 02:17:01,239
um

2854
02:17:02,239 --> 02:17:07,519
so the atlas has the octim coefficient

2855
02:17:04,879 --> 02:17:10,000
in it and so we can in theory just make

2856
02:17:07,519 --> 02:17:12,239
it so that you can't push it in a way

2857
02:17:10,000 --> 02:17:14,079
that would upset that particular apple

2858
02:17:12,239 --> 02:17:16,318
cart

2859
02:17:14,079 --> 02:17:16,318
right

2860
02:17:25,280 --> 02:17:29,399
and i think that's all we need there

2861
02:17:36,718 --> 02:17:38,989
so

2862
02:17:38,398 --> 02:17:41,279
uh

2863
02:17:38,989 --> 02:17:44,159
[Music]

2864
02:17:41,280 --> 02:17:47,960
we have these for other things but not

2865
02:17:44,159 --> 02:17:47,959
this particular one

2866
02:17:57,840 --> 02:18:01,519
so i think that would work although it's

2867
02:17:59,760 --> 02:18:03,280
you know i don't really know that's kind

2868
02:18:01,519 --> 02:18:04,960
of clumsy i don't know that we have any

2869
02:18:03,280 --> 02:18:06,319
reason to believe that such a a

2870
02:18:04,959 --> 02:18:08,159
particular repulsion thing like this

2871
02:18:06,318 --> 02:18:10,478
would actually work

2872
02:18:08,159 --> 02:18:12,718
in this regard uh this criteria probably

2873
02:18:10,478 --> 02:18:17,519
won't be correct either

2874
02:18:12,718 --> 02:18:17,518
so it's a bit dicey but you know

2875
02:18:20,478 --> 02:18:23,599
and you can see like it quickly locks up

2876
02:18:22,239 --> 02:18:24,398
not being able to really displace

2877
02:18:23,599 --> 02:18:27,799
anybody

2878
02:18:24,398 --> 02:18:27,799
it looks like

2879
02:19:08,478 --> 02:19:12,959
so i'm not sure where to end this it

2880
02:19:10,398 --> 02:19:12,959
looks like

2881
02:19:19,359 --> 02:19:24,239
the difference here is quite substantial

2882
02:19:21,200 --> 02:19:26,399
right like like it's like

2883
02:19:24,239 --> 02:19:29,199
that's how far it got

2884
02:19:26,398 --> 02:19:30,079
which is not far

2885
02:19:29,200 --> 02:19:32,319
so

2886
02:19:30,079 --> 02:19:35,120
again it and the problem is since the

2887
02:19:32,318 --> 02:19:37,439
thing is warped you can't really compare

2888
02:19:35,120 --> 02:19:40,399
i guess you could compare distances in

2889
02:19:37,439 --> 02:19:42,719
uv space

2890
02:19:40,398 --> 02:19:45,519
but like

2891
02:19:42,718 --> 02:19:47,518
probably not good

2892
02:19:45,519 --> 02:19:50,159
so i don't know not sure how useful this

2893
02:19:47,519 --> 02:19:50,159
really would be

2894
02:20:00,079 --> 02:20:06,600
like again it's like not horrible but

2895
02:20:02,318 --> 02:20:06,600
it's definitely not like good

2896
02:20:23,439 --> 02:20:28,318
so like it might make more sense to try

2897
02:20:25,920 --> 02:20:30,239
and do this like on the uv map and let

2898
02:20:28,318 --> 02:20:32,239
the sphere be warped as a result i mean

2899
02:20:30,239 --> 02:20:34,239
it's not as good because you're trying

2900
02:20:32,239 --> 02:20:35,119
to sample in the sphere space but i

2901
02:20:34,239 --> 02:20:36,879
don't know

2902
02:20:35,120 --> 02:20:38,800
i'm not really sure what else to do this

2903
02:20:36,879 --> 02:20:40,799
isn't my area of expertise so i don't

2904
02:20:38,799 --> 02:20:43,039
really have a lot to draw on here like

2905
02:20:40,799 --> 02:20:45,119
sampling is not my strong suit so i

2906
02:20:43,040 --> 02:20:46,640
don't really have much to say

2907
02:20:45,120 --> 02:20:48,399
um

2908
02:20:46,639 --> 02:20:50,478
about like how that should

2909
02:20:48,398 --> 02:20:52,000
be structured right

2910
02:20:50,478 --> 02:20:54,239
um

2911
02:20:52,000 --> 02:20:55,840
but either way like let's say that

2912
02:20:54,239 --> 02:20:57,920
that's good enough for now and look at

2913
02:20:55,840 --> 02:21:00,559
some of the other bugs because really

2914
02:20:57,920 --> 02:21:02,719
this is probably not our problem at the

2915
02:21:00,559 --> 02:21:04,079
moment like the fact that this sphere is

2916
02:21:02,719 --> 02:21:06,079
not great

2917
02:21:04,079 --> 02:21:08,478
is not what's causing our more severe

2918
02:21:06,079 --> 02:21:10,719
artifacts so we can probably afford to

2919
02:21:08,478 --> 02:21:12,159
start looking at those now

2920
02:21:10,719 --> 02:21:14,079
since we know that the tables are at

2921
02:21:12,159 --> 02:21:15,119
least not completely messed up at this

2922
02:21:14,079 --> 02:21:17,359
point

2923
02:21:15,120 --> 02:21:17,359
um

2924
02:21:17,520 --> 02:21:22,000
if that makes sense so you know we've

2925
02:21:20,000 --> 02:21:26,879
got like our ray

2926
02:21:22,000 --> 02:21:29,120
cast now that we had um from before here

2927
02:21:26,879 --> 02:21:29,119
and

2928
02:21:29,760 --> 02:21:34,040
these should now be more sane

2929
02:21:51,520 --> 02:21:56,720
and you know the i mean the raycasts

2930
02:21:53,280 --> 02:21:58,960
themselves look fine

2931
02:21:56,719 --> 02:21:58,959
right

2932
02:22:00,478 --> 02:22:07,559
i mean it looks like it's actually

2933
02:22:02,239 --> 02:22:07,559
correct and like i don't see

2934
02:22:09,200 --> 02:22:14,960
you know i mean i i just don't see a lot

2935
02:22:10,879 --> 02:22:16,799
of evidence of bugginess going on there

2936
02:22:14,959 --> 02:22:18,000
that should be minus one

2937
02:22:16,799 --> 02:22:20,239
and it's not

2938
02:22:18,000 --> 02:22:23,840
that's gonna bug me so i'm gonna fix it

2939
02:22:20,239 --> 02:22:23,840
even though it doesn't really matter

2940
02:22:29,840 --> 02:22:32,840
um

2941
02:22:39,680 --> 02:22:42,880
so yeah so i guess like our next

2942
02:22:41,439 --> 02:22:45,680
question is like where are we getting

2943
02:22:42,879 --> 02:22:47,679
this weird green blur from

2944
02:22:45,680 --> 02:22:49,200
um that's probably the hardest one to

2945
02:22:47,680 --> 02:22:51,200
solve unfortunately because it's going

2946
02:22:49,200 --> 02:22:52,560
to be very weird to try and

2947
02:22:51,200 --> 02:22:54,319
determine what the heck that's coming

2948
02:22:52,559 --> 02:22:55,439
from i suppose

2949
02:22:54,318 --> 02:22:57,359
um

2950
02:22:55,439 --> 02:22:59,680
but the only other one we really have

2951
02:22:57,359 --> 02:23:02,079
now is that dimming

2952
02:22:59,680 --> 02:23:05,760
that happens when you move so the the

2953
02:23:02,079 --> 02:23:08,398
light leakage here seems like probably

2954
02:23:05,760 --> 02:23:10,719
the most important thing to look at

2955
02:23:08,398 --> 02:23:10,719
um

2956
02:23:12,318 --> 02:23:16,840
because like where is that coming from

2957
02:23:19,040 --> 02:23:24,160
i guess one question i have is are we

2958
02:23:21,040 --> 02:23:26,319
doing more adding than we should be able

2959
02:23:24,159 --> 02:23:26,318
to

2960
02:23:26,398 --> 02:23:30,318
are we adding more frequently than we

2961
02:23:28,799 --> 02:23:33,679
should be able to and that i don't

2962
02:23:30,318 --> 02:23:35,039
actually know

2963
02:23:33,680 --> 02:23:37,040
it's just a linear blend though so

2964
02:23:35,040 --> 02:23:39,760
that's not true so i don't think we're

2965
02:23:37,040 --> 02:23:42,720
at risk of of doing too much addition

2966
02:23:39,760 --> 02:23:44,880
because we sum by the inverse like

2967
02:23:42,719 --> 02:23:44,879
the

2968
02:23:45,280 --> 02:23:51,439
the ray weight here

2969
02:23:48,799 --> 02:23:53,519
is correct in that it prevents you from

2970
02:23:51,439 --> 02:23:55,040
summing up more than what you started

2971
02:23:53,520 --> 02:23:57,439
with right

2972
02:23:55,040 --> 02:24:00,160
um so that seems fine and the transfer

2973
02:23:57,439 --> 02:24:01,280
pps values are blended right they're

2974
02:24:00,159 --> 02:24:03,359
they're

2975
02:24:01,280 --> 02:24:04,880
one minus

2976
02:24:03,359 --> 02:24:06,000
that they're

2977
02:24:04,879 --> 02:24:08,239
lerped

2978
02:24:06,000 --> 02:24:10,478
together so you're not adding any energy

2979
02:24:08,239 --> 02:24:13,478
there

2980
02:24:10,478 --> 02:24:13,478
um

2981
02:24:15,359 --> 02:24:20,640
so i don't know how we're getting this

2982
02:24:18,159 --> 02:24:20,639
sort of

2983
02:24:21,040 --> 02:24:26,120
i don't know how we're getting this

2984
02:24:22,639 --> 02:24:26,119
energy bleed

2985
02:24:49,120 --> 02:24:52,120
hmm

2986
02:24:57,040 --> 02:25:00,319
um i'm curious like

2987
02:25:01,520 --> 02:25:06,000
it's definitely just like a very clear

2988
02:25:03,600 --> 02:25:08,000
energy bleed like it's like you can see

2989
02:25:06,000 --> 02:25:09,439
it happen right like in fact like i

2990
02:25:08,000 --> 02:25:11,600
don't know if i can

2991
02:25:09,439 --> 02:25:14,600
turn off the scaling there

2992
02:25:11,600 --> 02:25:14,600
um

2993
02:25:31,280 --> 02:25:35,439
the light map

2994
02:25:33,120 --> 02:25:37,040
debug buffer

2995
02:25:35,439 --> 02:25:39,040
so

2996
02:25:37,040 --> 02:25:40,240
let's take a look at what we're putting

2997
02:25:39,040 --> 02:25:43,920
in there because i think the light map

2998
02:25:40,239 --> 02:25:45,439
debug buffer basically gets like some

2999
02:25:43,920 --> 02:25:47,840
garbage values put in it yeah you can

3000
02:25:45,439 --> 02:25:51,880
see here for like filtering out like

3001
02:25:47,840 --> 02:25:51,880
looking at particular textures

3002
02:25:52,719 --> 02:26:01,079
so we could definitely change these

3003
02:25:55,040 --> 02:26:01,080
values to something else to look at um

3004
02:26:20,079 --> 02:26:23,760
i mean it seems like we probably just

3005
02:26:21,920 --> 02:26:26,559
want to do this so if we want to take

3006
02:26:23,760 --> 02:26:26,559
the uv min

3007
02:26:26,639 --> 02:26:32,000
and the uv max and just set these equal

3008
02:26:29,760 --> 02:26:35,840
to like zero and one

3009
02:26:32,000 --> 02:26:35,840
would that just show us the whole map

3010
02:26:49,200 --> 02:26:56,120
uh maybe i'll look at slightly less of

3011
02:26:52,000 --> 02:26:56,120
it just to see

3012
02:27:03,600 --> 02:27:05,920
oops

3013
02:27:14,000 --> 02:27:17,500
wait shouldn't that have that should

3014
02:27:16,639 --> 02:27:20,648
have done

3015
02:27:17,500 --> 02:27:20,648
[Music]

3016
02:27:22,879 --> 02:27:27,039
uh i guess it's just it's really that

3017
02:27:24,879 --> 02:27:31,358
tiny i guess

3018
02:27:27,040 --> 02:27:35,520
that that looked counterintuitive to me

3019
02:27:31,359 --> 02:27:35,520
what i just saw but i guess i'm wrong

3020
02:27:37,439 --> 02:27:41,760
like it looks like the stretching like

3021
02:27:39,520 --> 02:27:41,760
in

3022
02:27:43,120 --> 02:27:45,840
i don't get it

3023
02:27:47,280 --> 02:27:53,040
oh is that because we currently stack in

3024
02:27:50,478 --> 02:27:55,760
z only yeah okay that's probably because

3025
02:27:53,040 --> 02:27:57,600
these are stacked oddly

3026
02:27:55,760 --> 02:28:00,239
which is probably also something we

3027
02:27:57,600 --> 02:28:03,280
would want to fix eventually

3028
02:28:00,239 --> 02:28:03,280
now that i think about it

3029
02:28:05,280 --> 02:28:09,120
because they're only stacked too high

3030
02:28:09,840 --> 02:28:13,840
which don't make a whole lot of sense

3031
02:28:14,239 --> 02:28:18,159
you know

3032
02:28:16,398 --> 02:28:19,920
um

3033
02:28:18,159 --> 02:28:22,719
stacking them too high is kind of dumb

3034
02:28:19,920 --> 02:28:23,840
like they probably should be

3035
02:28:22,719 --> 02:28:27,199
uh

3036
02:28:23,840 --> 02:28:30,639
you know x by y

3037
02:28:27,200 --> 02:28:32,640
and then just two copies of that

3038
02:28:30,639 --> 02:28:35,199
you know for the z or whatever so that's

3039
02:28:32,639 --> 02:28:37,039
probably a mistake

3040
02:28:35,200 --> 02:28:39,280
uh but oh well you know we're probably

3041
02:28:37,040 --> 02:28:41,840
not going to fix it right

3042
02:28:39,280 --> 02:28:41,840
um

3043
02:28:55,600 --> 02:28:58,159
so

3044
02:28:56,318 --> 02:29:00,318
it does look like a pretty consistent

3045
02:28:58,159 --> 02:29:02,000
light bleed where it's just you're

3046
02:29:00,318 --> 02:29:03,600
getting energy added to the system and

3047
02:29:02,000 --> 02:29:05,840
it just spreads throughout the system

3048
02:29:03,600 --> 02:29:06,800
and the question is where is that energy

3049
02:29:05,840 --> 02:29:09,799
getting

3050
02:29:06,799 --> 02:29:09,799
uh

3051
02:29:10,318 --> 02:29:13,840
where is that energy coming from

3052
02:29:14,000 --> 02:29:17,200
you know

3053
02:29:15,600 --> 02:29:19,200
like

3054
02:29:17,200 --> 02:29:23,079
it's coming from somewhere

3055
02:29:19,200 --> 02:29:23,079
but i don't know where

3056
02:29:36,959 --> 02:29:40,639
and like there's very specific places

3057
02:29:38,879 --> 02:29:43,039
where it's unstable is it because it's

3058
02:29:40,639 --> 02:29:45,199
sampling from an apron in some way

3059
02:29:43,040 --> 02:29:49,800
that it's not supposed to happen like

3060
02:29:45,200 --> 02:29:49,800
like is something weird happening there

3061
02:29:56,318 --> 02:29:59,760
like it's very clearly like

3062
02:29:58,639 --> 02:30:01,840
only

3063
02:29:59,760 --> 02:30:04,840
possible when certain areas are

3064
02:30:01,840 --> 02:30:04,840
available

3065
02:30:05,439 --> 02:30:08,239
which is odd

3066
02:30:09,840 --> 02:30:14,960
and the fact that the copies are wrong

3067
02:30:11,760 --> 02:30:18,920
as well is it's so weird like it's very

3068
02:30:14,959 --> 02:30:18,919
strange what's happening

3069
02:30:20,159 --> 02:30:22,639
like ha

3070
02:30:21,040 --> 02:30:24,720
that i can't even come up with an

3071
02:30:22,639 --> 02:30:26,000
explanation it's one of those times we

3072
02:30:24,719 --> 02:30:27,119
have them every so often i am here i

3073
02:30:26,000 --> 02:30:28,879
can't even come up with an explanation

3074
02:30:27,120 --> 02:30:32,079
of what's going on there like if you if

3075
02:30:28,879 --> 02:30:35,199
you ask me to write this exact thing

3076
02:30:32,079 --> 02:30:35,200
what i would have to do

3077
02:30:35,280 --> 02:30:40,479
to make this happen doesn't seem

3078
02:30:38,639 --> 02:30:44,439
commensurate with

3079
02:30:40,478 --> 02:30:44,438
what i would expect now

3080
02:30:54,318 --> 02:30:57,760
i want to go look at the copy

3081
02:30:59,200 --> 02:31:02,399
because it's obviously wrong with start

3082
02:31:01,280 --> 02:31:04,079
there

3083
02:31:02,398 --> 02:31:07,199
i'm going to kill this

3084
02:31:04,079 --> 02:31:07,200
buffer of values

3085
02:31:09,120 --> 02:31:14,560
the copy obviously doesn't work because

3086
02:31:11,040 --> 02:31:15,520
we're getting that weird like

3087
02:31:14,559 --> 02:31:18,318
uh

3088
02:31:15,520 --> 02:31:20,640
on every time the voxel slides the

3089
02:31:18,318 --> 02:31:23,039
values are all wrong so the part where

3090
02:31:20,639 --> 02:31:24,959
we actually copy the voxel is just

3091
02:31:23,040 --> 02:31:27,960
totally busted

3092
02:31:24,959 --> 02:31:27,959
um

3093
02:31:28,639 --> 02:31:32,959
so this block copy atlas thing is

3094
02:31:31,760 --> 02:31:36,318
totally

3095
02:31:32,959 --> 02:31:36,318
bogus and doesn't work

3096
02:31:36,559 --> 02:31:41,439
why that would be i don't know because

3097
02:31:39,760 --> 02:31:43,600
in theory it shouldn't really have

3098
02:31:41,439 --> 02:31:45,040
changed much but i guess it's because of

3099
02:31:43,600 --> 02:31:47,840
how we

3100
02:31:45,040 --> 02:31:49,359
um are are computing like the offsets of

3101
02:31:47,840 --> 02:31:50,960
these things because we did sort of

3102
02:31:49,359 --> 02:31:52,800
change

3103
02:31:50,959 --> 02:31:55,519
how they were sized

3104
02:31:52,799 --> 02:31:57,279
you know we obviously screwed that up

3105
02:31:55,520 --> 02:32:00,079
so i'll start with

3106
02:31:57,280 --> 02:32:02,239
with uh first things first here and just

3107
02:32:00,079 --> 02:32:04,799
say like z doesn't matter

3108
02:32:02,239 --> 02:32:04,799
anymore

3109
02:32:05,120 --> 02:32:11,439
um so we should be able to assert that

3110
02:32:07,359 --> 02:32:13,040
the d voxel z value is always zero

3111
02:32:11,439 --> 02:32:15,040
and if it's not

3112
02:32:13,040 --> 02:32:17,760
uh that could be one of our problems

3113
02:32:15,040 --> 02:32:19,600
right like if the d voxel z value is

3114
02:32:17,760 --> 02:32:23,120
wrong

3115
02:32:19,600 --> 02:32:25,359
then uh that would explain a lot

3116
02:32:23,120 --> 02:32:28,240
so maybe that's the problem

3117
02:32:25,359 --> 02:32:28,239
uh but i don't know

3118
02:32:28,398 --> 02:32:33,279
doesn't look like it

3119
02:32:29,920 --> 02:32:36,239
so d voxel z is correctly staying

3120
02:32:33,280 --> 02:32:38,239
at zero which is what we would expect

3121
02:32:36,239 --> 02:32:41,520
so then the question is are other d

3122
02:32:38,239 --> 02:32:43,840
voxel values somehow wrong

3123
02:32:41,520 --> 02:32:43,840
um

3124
02:32:44,398 --> 02:32:48,719
so the way we're doing this

3125
02:32:47,120 --> 02:32:51,120
is we're taking

3126
02:32:48,719 --> 02:32:53,519
the origin value

3127
02:32:51,120 --> 02:32:55,760
and we're looking at the delta between

3128
02:32:53,520 --> 02:32:55,760
them

3129
02:33:03,200 --> 02:33:10,760
we are then trying to move

3130
02:33:06,799 --> 02:33:10,759
so every time

3131
02:33:22,159 --> 02:33:27,439
every time the origin moves by some

3132
02:33:24,719 --> 02:33:30,879
number of chunks we assume that the

3133
02:33:27,439 --> 02:33:32,079
number of chunks

3134
02:33:30,879 --> 02:33:36,719
is

3135
02:33:32,079 --> 02:33:36,719
aligned with our voxel cell dimension

3136
02:33:37,280 --> 02:33:39,920
evenly

3137
02:33:44,799 --> 02:33:48,840
which could be completely wrong

3138
02:33:50,559 --> 02:33:59,920
but b even if it was completely wrong

3139
02:33:55,920 --> 02:34:03,840
i'm not sure i know why we would see the

3140
02:33:59,920 --> 02:34:03,840
behavior we're seeing

3141
02:34:06,879 --> 02:34:11,119
i guess we would see that behavior if it

3142
02:34:09,120 --> 02:34:14,920
moved too much

3143
02:34:11,120 --> 02:34:14,920
so if the invoxeldim

3144
02:34:18,079 --> 02:34:21,920
cause the multiple to be too high

3145
02:34:29,520 --> 02:34:34,040
that would do it i guess

3146
02:35:13,040 --> 02:35:16,479
hmm

3147
02:35:14,079 --> 02:35:18,079
so i kind of want to know what these

3148
02:35:16,478 --> 02:35:20,318
values are

3149
02:35:18,079 --> 02:35:20,318
like

3150
02:35:21,359 --> 02:35:24,359
so

3151
02:35:30,239 --> 02:35:35,680
in normal operation at 60 fps these

3152
02:35:33,200 --> 02:35:37,520
should always be

3153
02:35:35,680 --> 02:35:39,200
like one or less

3154
02:35:37,520 --> 02:35:41,680
right

3155
02:35:39,200 --> 02:35:42,720
and so i'm kind of wondering maybe if

3156
02:35:41,680 --> 02:35:45,040
they are

3157
02:35:42,719 --> 02:35:45,039
um

3158
02:35:47,600 --> 02:35:51,079
if they're not

3159
02:35:59,280 --> 02:36:03,100
looks like we don't have an abs for ins

3160
02:36:02,799 --> 02:36:06,079
um

3161
02:36:03,100 --> 02:36:09,079
[Music]

3162
02:36:06,079 --> 02:36:09,079
fine

3163
02:36:18,799 --> 02:36:23,279
um so i'm just kind of interested to

3164
02:36:20,719 --> 02:36:25,679
know uh i guess the problem is i have to

3165
02:36:23,280 --> 02:36:27,439
kind of enable this later because

3166
02:36:25,680 --> 02:36:29,920
on the first time through

3167
02:36:27,439 --> 02:36:30,800
it's not going to be the case because

3168
02:36:29,920 --> 02:36:31,370
you're

3169
02:36:30,799 --> 02:36:32,639
moving to

3170
02:36:31,370 --> 02:36:33,760
[Music]

3171
02:36:32,639 --> 02:36:37,840
um

3172
02:36:33,760 --> 02:36:37,840
you know a different one but

3173
02:36:48,159 --> 02:36:51,840
some kind of garbage like this

3174
02:36:56,318 --> 02:37:01,119
so you know the first time through fine

3175
02:36:58,879 --> 02:37:05,839
get it set up but the next for from then

3176
02:37:01,120 --> 02:37:05,840
on we should never see any sliding right

3177
02:37:05,920 --> 02:37:10,159
it should always be like one tile at a

3178
02:37:07,920 --> 02:37:10,159
time

3179
02:37:15,680 --> 02:37:21,920
all right so it's correctly only moving

3180
02:37:18,398 --> 02:37:21,920
a single tile at a time

3181
02:37:25,600 --> 02:37:27,920
right

3182
02:37:28,398 --> 02:37:31,398
um

3183
02:37:36,559 --> 02:37:39,519
and yet somehow

3184
02:37:40,959 --> 02:37:45,279
we're getting this weird uh

3185
02:37:43,920 --> 02:37:48,960
this weird difference why are there two

3186
02:37:45,280 --> 02:37:48,960
copies of block copy atlas

3187
02:37:50,719 --> 02:37:54,599
oh it's just a yeah

3188
02:38:13,840 --> 02:38:15,920
you

3189
02:39:14,079 --> 02:39:18,318
so i mean that all looks pretty sane

3190
02:39:16,318 --> 02:39:22,920
like i don't really see

3191
02:39:18,318 --> 02:39:22,920
what the problem would be there

3192
02:39:52,559 --> 02:39:58,478
so it could be something slip we'll have

3193
02:39:55,040 --> 02:39:58,479
to look at this more carefully

3194
02:40:03,280 --> 02:40:05,680
i'm going to turn off those overlays

3195
02:40:04,719 --> 02:40:09,079
because i don't really need them at the

3196
02:40:05,680 --> 02:40:09,079
immediate moment

3197
02:40:25,120 --> 02:40:31,680
i might also be interested in in a very

3198
02:40:28,318 --> 02:40:35,000
slowed down version just to see

3199
02:40:31,680 --> 02:40:35,000
what's happening

3200
02:41:09,680 --> 02:41:14,559
i mean it's unmistakable on the copy it

3201
02:41:12,478 --> 02:41:18,079
everything gets dimmer for just just a

3202
02:41:14,559 --> 02:41:22,920
brief flash so the copy is just wrong

3203
02:41:18,079 --> 02:41:22,920
but i do not know how it's wrong

3204
02:41:49,920 --> 02:41:54,239
here's another question for you suppose

3205
02:41:52,159 --> 02:41:56,318
we were to turn off interpolation what

3206
02:41:54,239 --> 02:41:58,398
would it look like

3207
02:41:56,318 --> 02:42:01,199
so if the t update blend

3208
02:41:58,398 --> 02:42:01,199
were just one

3209
02:42:01,359 --> 02:42:05,439
so there's no interpolation anymore we

3210
02:42:03,359 --> 02:42:08,559
just see the whatever happens on this

3211
02:42:05,439 --> 02:42:12,600
frame is what we see

3212
02:42:08,559 --> 02:42:12,600
right which is this

3213
02:42:28,719 --> 02:42:32,920
that is just really weird

3214
02:42:47,279 --> 02:42:50,479
so i do think we're probably going to

3215
02:42:48,639 --> 02:42:51,599
have to construct some test cases here i

3216
02:42:50,478 --> 02:42:53,278
don't think there's any chance of us

3217
02:42:51,600 --> 02:42:55,359
debugging this in

3218
02:42:53,279 --> 02:42:56,239
in situ

3219
02:42:55,359 --> 02:42:56,510
right

3220
02:42:56,239 --> 02:42:58,639
um

3221
02:42:56,510 --> 02:43:01,520
[Music]

3222
02:42:58,639 --> 02:43:03,760
what we can debug

3223
02:43:01,520 --> 02:43:03,760
uh

3224
02:43:03,920 --> 02:43:07,680
we have

3225
02:43:05,680 --> 02:43:11,359
i think so i think we're gonna have to

3226
02:43:07,680 --> 02:43:11,359
create more test cases

3227
02:43:13,840 --> 02:43:17,279
and you can see like so whenever this

3228
02:43:16,079 --> 02:43:19,359
thing moves

3229
02:43:17,279 --> 02:43:20,960
you know that it has changed the

3230
02:43:19,359 --> 02:43:23,040
placement of the lighting you can see

3231
02:43:20,959 --> 02:43:25,919
very clearly that it blinks

3232
02:43:23,040 --> 02:43:29,359
once for every move it is clearly on the

3233
02:43:25,920 --> 02:43:31,600
copy so the copy is just wrong

3234
02:43:29,359 --> 02:43:34,239
but we have no idea why the copy would

3235
02:43:31,600 --> 02:43:37,840
be wrong it doesn't make sense for the

3236
02:43:34,239 --> 02:43:37,840
copy to be wrong

3237
02:44:05,040 --> 02:44:09,560
what is validate texla atlas

3238
02:44:24,318 --> 02:44:27,318
interesting

3239
02:44:33,120 --> 02:44:37,040
hey so what if we turned this on

3240
02:44:44,799 --> 02:44:48,639
wonder if we get any traps we don't

3241
02:44:49,920 --> 02:44:54,559
we should though eventually as we like

3242
02:44:52,719 --> 02:44:59,000
right that's just saying that we don't

3243
02:44:54,559 --> 02:44:59,000
have super high values i guess

3244
02:45:00,079 --> 02:45:03,920
not super low values it looks like

3245
02:45:06,639 --> 02:45:11,358
so it does eventually trap

3246
02:45:09,520 --> 02:45:15,800
it just takes a little while

3247
02:45:11,359 --> 02:45:15,800
but that feedback eventually hits

3248
02:45:17,120 --> 02:45:20,120
um

3249
02:45:34,318 --> 02:45:40,278
so you get you get out of bounds values

3250
02:45:36,879 --> 02:45:40,278
like right away

3251
02:45:44,318 --> 02:45:47,519
and it's from the raycast because it

3252
02:45:46,000 --> 02:45:49,439
can't be from the copy since the copy

3253
02:45:47,520 --> 02:45:51,200
validates on either end

3254
02:45:49,439 --> 02:45:53,040
right

3255
02:45:51,200 --> 02:45:55,200
so you get like out of bounds light

3256
02:45:53,040 --> 02:45:57,840
values right away

3257
02:45:55,200 --> 02:45:57,840
um

3258
02:46:08,318 --> 02:46:14,600
and again we really don't have any idea

3259
02:46:10,719 --> 02:46:14,599
why that would be

3260
02:46:24,159 --> 02:46:27,760
i'm guessing we should probably call it

3261
02:46:25,600 --> 02:46:29,600
a day for today uh because this is gonna

3262
02:46:27,760 --> 02:46:31,760
be really involved right we're gonna

3263
02:46:29,600 --> 02:46:33,680
need at least another four hours

3264
02:46:31,760 --> 02:46:34,719
just of set up time to like track this

3265
02:46:33,680 --> 02:46:36,479
down

3266
02:46:34,719 --> 02:46:38,000
because we we definitely have problems

3267
02:46:36,478 --> 02:46:39,760
with the light atlas now that have

3268
02:46:38,000 --> 02:46:41,760
something to do with how we you know

3269
02:46:39,760 --> 02:46:43,200
simplified it down

3270
02:46:41,760 --> 02:46:45,840
and we're going to have to go through

3271
02:46:43,200 --> 02:46:48,319
the whole like re-approval process like

3272
02:46:45,840 --> 02:46:50,239
to like narrow it down right

3273
02:46:48,318 --> 02:46:52,478
and again this is just this is that's

3274
02:46:50,239 --> 02:46:55,840
just how it is whenever you try to do

3275
02:46:52,478 --> 02:46:57,599
extremely like optimized code like this

3276
02:46:55,840 --> 02:47:00,239
where you're pushing everything into

3277
02:46:57,600 --> 02:47:02,318
like these extremely like special case

3278
02:47:00,239 --> 02:47:04,398
ways of doing stuff

3279
02:47:02,318 --> 02:47:05,760
your bugs are very hard to track right

3280
02:47:04,398 --> 02:47:07,680
there's really no way around that it's

3281
02:47:05,760 --> 02:47:10,719
why we don't normally write this code if

3282
02:47:07,680 --> 02:47:11,600
we don't have to right like

3283
02:47:10,719 --> 02:47:13,199
um

3284
02:47:11,600 --> 02:47:16,559
modern languages don't make it easy to

3285
02:47:13,200 --> 02:47:16,560
write optimize code

3286
02:47:18,559 --> 02:47:23,278
so uh it's kind of what you would expect

3287
02:47:21,680 --> 02:47:25,600
because there's probably some rather

3288
02:47:23,279 --> 02:47:27,439
obvious stupidity lurking in here but

3289
02:47:25,600 --> 02:47:28,399
it's just very hard to see because we

3290
02:47:27,439 --> 02:47:30,239
have

3291
02:47:28,398 --> 02:47:31,599
turned the crank so many times on it to

3292
02:47:30,239 --> 02:47:34,478
get it down to something that will run

3293
02:47:31,600 --> 02:47:35,840
fast enough

3294
02:47:34,478 --> 02:47:38,000
uh

3295
02:47:35,840 --> 02:47:40,000
that we don't really you know we don't

3296
02:47:38,000 --> 02:47:43,200
have the luxury of a simple

3297
02:47:40,000 --> 02:47:46,200
walkthrough right

3298
02:47:43,200 --> 02:47:46,200
um

3299
02:48:01,760 --> 02:48:05,840
adding some

3300
02:48:03,040 --> 02:48:08,479
opt-in bounds checking in here would

3301
02:48:05,840 --> 02:48:10,719
probably be a good idea right

3302
02:48:08,478 --> 02:48:10,719
like

3303
02:48:11,760 --> 02:48:15,840
validating that probe p single is in

3304
02:48:14,318 --> 02:48:17,600
bounds

3305
02:48:15,840 --> 02:48:19,840
would be good like we can add some

3306
02:48:17,600 --> 02:48:21,840
assertions here that are relatively

3307
02:48:19,840 --> 02:48:24,079
uh unobtrusive you know they'll get

3308
02:48:21,840 --> 02:48:25,520
compiled out

3309
02:48:24,079 --> 02:48:26,719
when we turn off

3310
02:48:25,520 --> 02:48:29,720
asserts

3311
02:48:26,719 --> 02:48:29,719
um

3312
02:48:30,000 --> 02:48:34,079
we could put some things in here that

3313
02:48:31,279 --> 02:48:35,600
would probably be okay

3314
02:48:34,079 --> 02:48:37,520
um

3315
02:48:35,600 --> 02:48:39,040
that would help us know that we're not

3316
02:48:37,520 --> 02:48:40,720
doing something weird like that for

3317
02:48:39,040 --> 02:48:42,800
example that bleed could happen from

3318
02:48:40,719 --> 02:48:46,840
things like fetching out of bounds or

3319
02:48:42,799 --> 02:48:46,840
something like that it could happen

3320
02:49:13,520 --> 02:49:19,359
so let's take a quick look so uh probe p

3321
02:49:16,879 --> 02:49:19,358
single

3322
02:49:25,600 --> 02:49:28,640
didn't i just look at it

3323
02:49:36,079 --> 02:49:40,279
probe sample piece angle

3324
02:49:56,879 --> 02:50:00,879
we could do some assertions here

3325
02:50:06,719 --> 02:50:12,799
and just verify that this is okay so

3326
02:50:09,840 --> 02:50:12,799
basically we'd say

3327
02:50:15,520 --> 02:50:20,120
okay

3328
02:50:17,120 --> 02:50:20,120
um

3329
02:50:23,200 --> 02:50:26,560
pull out the base

3330
02:50:24,719 --> 02:50:28,159
location

3331
02:50:26,559 --> 02:50:30,398
like so

3332
02:50:28,159 --> 02:50:32,239
and assert that it's not like out of

3333
02:50:30,398 --> 02:50:36,439
bounds or the thing that we're looking

3334
02:50:32,239 --> 02:50:36,439
up in which is the diffuse atlas

3335
02:50:36,959 --> 02:50:40,719
um

3336
02:50:38,398 --> 02:50:43,920
so like

3337
02:50:40,719 --> 02:50:48,199
assert that this is in bounds of well

3338
02:50:43,920 --> 02:50:48,200
does the atlas do that for us

3339
02:51:07,040 --> 02:51:13,600
so it would be nice if this

3340
02:51:11,520 --> 02:51:15,279
had a way of just telling you if you

3341
02:51:13,600 --> 02:51:19,479
were inside or not

3342
02:51:15,279 --> 02:51:19,479
but it doesn't actually seem to

3343
02:51:25,200 --> 02:51:28,000
so you can see here that we actually

3344
02:51:27,040 --> 02:51:29,359
have

3345
02:51:28,000 --> 02:51:30,639
the thing

3346
02:51:29,359 --> 02:51:33,600
that we want

3347
02:51:30,639 --> 02:51:35,489
which is this test but we don't have a

3348
02:51:33,600 --> 02:51:36,960
way to

3349
02:51:35,489 --> 02:51:40,719
[Music]

3350
02:51:36,959 --> 02:51:40,719
access it outside

3351
02:51:41,920 --> 02:51:47,439
so we could do that right we could do

3352
02:51:45,520 --> 02:51:50,600
like a vector is inside

3353
02:51:47,439 --> 02:51:50,600
or whatever

3354
02:52:02,719 --> 02:52:10,079
so we could do something like uh like

3355
02:52:06,000 --> 02:52:10,079
voxel index is in dimension

3356
02:52:12,840 --> 02:52:17,920
and

3357
02:52:14,398 --> 02:52:21,439
put this in there so that the checks

3358
02:52:17,920 --> 02:52:21,439
for each one being inside

3359
02:52:22,559 --> 02:52:28,359
would

3360
02:52:24,159 --> 02:52:28,359
be something you could call elsewhere

3361
02:52:35,920 --> 02:52:40,398
so then we would just do voxel index is

3362
02:52:38,478 --> 02:52:43,398
in dim of the light atlas we'd assert

3363
02:52:40,398 --> 02:52:43,398
that

3364
02:52:45,279 --> 02:52:52,120
as probably like

3365
02:52:48,318 --> 02:52:52,119
this would be an index

3366
02:53:03,520 --> 02:53:05,760
so

3367
02:53:06,719 --> 02:53:14,079
if we just pass the xyz to the

3368
02:53:11,760 --> 02:53:16,639
function here as our assert

3369
02:53:14,079 --> 02:53:19,439
then people outside can also call that

3370
02:53:16,639 --> 02:53:22,239
assert which is what we want right

3371
02:53:19,439 --> 02:53:25,200
so here we would just say assert that

3372
02:53:22,239 --> 02:53:29,600
voxel index is in dim

3373
02:53:25,200 --> 02:53:32,640
and there's a few at diffuse atlas and a

3374
02:53:29,600 --> 02:53:32,640
place that we're trying to check

3375
02:53:33,920 --> 02:53:36,398
um

3376
02:53:35,040 --> 02:53:39,840
and

3377
02:53:36,398 --> 02:53:39,840
that would in theory tell us

3378
02:53:47,279 --> 02:53:51,680
although i guess probe sample piece

3379
02:53:50,159 --> 02:53:55,279
single

3380
02:53:51,680 --> 02:53:55,279
still has to be converted

3381
02:54:01,439 --> 02:54:06,720
so we still need something that maps

3382
02:54:04,478 --> 02:54:09,039
into there which i guess we don't really

3383
02:54:06,719 --> 02:54:09,039
have

3384
02:54:09,120 --> 02:54:11,359
right

3385
02:54:18,840 --> 02:54:23,760
okay so we would need to actually divide

3386
02:54:22,398 --> 02:54:26,760
by the

3387
02:54:23,760 --> 02:54:26,760
um

3388
02:54:38,639 --> 02:54:42,239
by the cell dim i guess

3389
02:54:46,318 --> 02:54:51,920
so i guess we actually kind of did have

3390
02:54:48,478 --> 02:54:53,199
what we needed because although you know

3391
02:54:51,920 --> 02:54:55,040
although we probably do want this

3392
02:54:53,200 --> 02:54:57,279
function as a separate thing

3393
02:54:55,040 --> 02:55:00,279
i guess we actually can just use the

3394
02:54:57,279 --> 02:55:00,279
grid

3395
02:55:18,159 --> 02:55:22,879
so we'd say get index for p and then a

3396
02:55:20,159 --> 02:55:22,879
certain bounds

3397
02:55:23,040 --> 02:55:26,040
right

3398
02:55:38,719 --> 02:55:42,199
something like this

3399
02:55:49,760 --> 02:55:52,880
so when we're debugging at least this

3400
02:55:51,200 --> 02:55:54,640
would tell us if we ever tried to fetch

3401
02:55:52,879 --> 02:55:56,639
out of bounds and i don't know if we

3402
02:55:54,639 --> 02:55:59,439
quite did that correctly but

3403
02:55:56,639 --> 02:56:00,559
you know

3404
02:55:59,439 --> 02:56:04,159
maybe

3405
02:56:00,559 --> 02:56:05,278
so let's let this trip a few times in it

3406
02:56:04,159 --> 02:56:08,478
no

3407
02:56:05,279 --> 02:56:09,520
uh in a debug build and let's see if we

3408
02:56:08,478 --> 02:56:11,278
can

3409
02:56:09,520 --> 02:56:15,159
see if there's anything particularly

3410
02:56:11,279 --> 02:56:15,159
squinky going on there

3411
02:56:30,000 --> 02:56:33,279
okay

3412
02:56:30,959 --> 02:56:33,278
so

3413
02:56:38,318 --> 02:56:42,159
there's the actual sample point we're

3414
02:56:39,600 --> 02:56:42,159
trying to take

3415
02:56:43,359 --> 02:56:47,559
that is obviously wrong

3416
02:56:54,559 --> 02:56:59,959
it's not only wrong but it's weird

3417
02:57:12,239 --> 02:57:15,239
um

3418
02:57:25,200 --> 02:57:28,880
so you can kind of see like basically

3419
02:57:26,879 --> 02:57:30,879
these all have the exact same pattern

3420
02:57:28,879 --> 02:57:34,159
they are all like

3421
02:57:30,879 --> 02:57:37,119
totally bogus z values there are some

3422
02:57:34,159 --> 02:57:39,119
x's that are off one

3423
02:57:37,120 --> 02:57:41,520
apron wise

3424
02:57:39,120 --> 02:57:43,600
but the z values are just complete

3425
02:57:41,520 --> 02:57:45,840
garbage

3426
02:57:43,600 --> 02:57:45,840
right

3427
02:57:45,920 --> 02:57:49,520
so i don't know if that's because i'm

3428
02:57:47,279 --> 02:57:53,479
doing something wrong here but that

3429
02:57:49,520 --> 02:57:53,479
seems bad

3430
02:58:06,318 --> 02:58:11,278
so what what would make

3431
02:58:09,600 --> 02:58:13,439
us happy here

3432
02:58:11,279 --> 02:58:13,439
so

3433
02:58:14,478 --> 02:58:19,039
the total bounds let's look at this sp

3434
02:58:17,520 --> 02:58:21,840
right

3435
02:58:19,040 --> 02:58:24,080
so the total bounds like how is that z

3436
02:58:21,840 --> 02:58:27,079
value how are we getting that z value at

3437
02:58:24,079 --> 02:58:27,079
all

3438
02:58:37,040 --> 02:58:40,319
i

3439
02:58:37,760 --> 02:58:42,960
okay yeah i

3440
02:58:40,318 --> 02:58:47,079
i get it i get it

3441
02:58:42,959 --> 02:58:47,079
i totally get it

3442
02:58:47,439 --> 02:58:50,720
i totally get it

3443
02:58:52,398 --> 02:58:55,959
here's what's happening

3444
02:59:00,000 --> 02:59:02,318
okay

3445
02:59:10,398 --> 02:59:15,760
so in compute walk table

3446
02:59:12,879 --> 02:59:19,358
we don't anymore bother to check

3447
02:59:15,760 --> 02:59:21,120
z values because there is no z

3448
02:59:19,359 --> 02:59:22,318
voxel

3449
02:59:21,120 --> 02:59:24,800
anymore

3450
02:59:22,318 --> 02:59:26,719
right we we only have

3451
02:59:24,799 --> 02:59:27,679
an x y

3452
02:59:26,719 --> 02:59:30,079
sort

3453
02:59:27,680 --> 02:59:32,079
of the things

3454
02:59:30,079 --> 02:59:34,318
that's all we have

3455
02:59:32,079 --> 02:59:34,318
right

3456
02:59:37,200 --> 02:59:40,880
so when we step through the spatial

3457
02:59:38,639 --> 02:59:43,199
partition and and i i don't remember if

3458
02:59:40,879 --> 02:59:44,879
we're drawing this or not um

3459
02:59:43,200 --> 02:59:47,040
i guess i'd have to turn that off but

3460
02:59:44,879 --> 02:59:48,959
this is very good like so this this

3461
02:59:47,040 --> 02:59:52,399
answer is a big part of our question of

3462
02:59:48,959 --> 02:59:54,639
why we're why we're messed up right

3463
02:59:52,398 --> 02:59:56,879
so this is very good this was this was a

3464
02:59:54,639 --> 02:59:58,079
very important i'm really glad we just

3465
02:59:56,879 --> 02:59:58,959
added this

3466
02:59:58,079 --> 03:00:00,639
um

3467
02:59:58,959 --> 03:00:04,318
this was this was big

3468
03:00:00,639 --> 03:00:04,318
this will help us tremendously okay

3469
03:00:05,439 --> 03:00:10,720
so what's happening here uh if we

3470
03:00:08,799 --> 03:00:12,879
if we've have it all we gotta update our

3471
03:00:10,719 --> 03:00:15,119
remedy we need to be able to to kill our

3472
03:00:12,879 --> 03:00:17,119
app which we can't anymore it looks like

3473
03:00:15,120 --> 03:00:18,079
that stopped working

3474
03:00:17,120 --> 03:00:20,319
um

3475
03:00:18,079 --> 03:00:20,318
but

3476
03:00:22,000 --> 03:00:25,000
we

3477
03:00:25,279 --> 03:00:27,520
i

3478
03:00:35,439 --> 03:00:39,159
let me

3479
03:00:36,719 --> 03:00:41,039
put this in o2 and

3480
03:00:39,159 --> 03:00:45,039
simultaneously

3481
03:00:41,040 --> 03:00:46,800
uh let me go and draw the actual

3482
03:00:45,040 --> 03:00:49,600
cells again

3483
03:00:46,799 --> 03:00:51,920
so that we can see them

3484
03:00:49,600 --> 03:00:54,159
which you know we don't need this right

3485
03:00:51,920 --> 03:00:54,159
now

3486
03:01:04,840 --> 03:01:11,279
spatial grid

3487
03:01:06,799 --> 03:01:11,278
that's what i want draw spatial grid

3488
03:01:12,559 --> 03:01:18,719
so debug draw spatial grid

3489
03:01:15,120 --> 03:01:21,920
will step over each of the grid

3490
03:01:18,719 --> 03:01:24,079
areas and it will draw the

3491
03:01:21,920 --> 03:01:26,879
bounds of them

3492
03:01:24,079 --> 03:01:28,879
right if i do that

3493
03:01:26,879 --> 03:01:32,559
this will just draw just the boundary

3494
03:01:28,879 --> 03:01:33,358
box so this shows what grid cells there

3495
03:01:32,559 --> 03:01:34,478
are

3496
03:01:33,359 --> 03:01:37,520
in this

3497
03:01:34,478 --> 03:01:39,760
spatial grid right

3498
03:01:37,520 --> 03:01:39,760
so

3499
03:01:40,239 --> 03:01:44,639
i gotta i gotta turn off all the

3500
03:01:41,840 --> 03:01:48,920
validation that we were just using

3501
03:01:44,639 --> 03:01:48,920
so that i can actually look at it

3502
03:01:58,639 --> 03:02:04,159
okay

3503
03:02:00,478 --> 03:02:05,519
so here are all of this the grid cells

3504
03:02:04,159 --> 03:02:08,719
right and you can see that it's just a

3505
03:02:05,520 --> 03:02:10,479
two-dimensional array of grid cells

3506
03:02:08,719 --> 03:02:12,478
and so what we're doing with the

3507
03:02:10,478 --> 03:02:14,799
marching table

3508
03:02:12,478 --> 03:02:17,039
is the marching table

3509
03:02:14,799 --> 03:02:21,039
that we use to to

3510
03:02:17,040 --> 03:02:21,040
find out where we're where we are

3511
03:02:26,799 --> 03:02:30,799
if you were if you're

3512
03:02:28,639 --> 03:02:32,719
normally casting inside the actual

3513
03:02:30,799 --> 03:02:34,559
geometry it's totally fine because

3514
03:02:32,719 --> 03:02:37,679
you'll always hit something

3515
03:02:34,559 --> 03:02:40,079
as you're trying to go up or down right

3516
03:02:37,680 --> 03:02:41,840
but the geometry is incomplete and like

3517
03:02:40,079 --> 03:02:43,520
in some places like there's like we

3518
03:02:41,840 --> 03:02:47,040
don't have anything there array would

3519
03:02:43,520 --> 03:02:48,640
just go and it will go forever right

3520
03:02:47,040 --> 03:02:50,560
now before that wasn't a problem because

3521
03:02:48,639 --> 03:02:52,000
we actually had

3522
03:02:50,559 --> 03:02:52,799
an apron

3523
03:02:52,000 --> 03:02:55,279
for

3524
03:02:52,799 --> 03:02:57,438
stopping like we do right now where

3525
03:02:55,279 --> 03:03:00,640
there's an apron along the outside where

3526
03:02:57,439 --> 03:03:02,880
if you hit that apron you stop marching

3527
03:03:00,639 --> 03:03:05,278
but we don't have that for z anymore so

3528
03:03:02,879 --> 03:03:07,759
what happens is you just go as far as

3529
03:03:05,279 --> 03:03:09,760
you go in z which can be infinitely far

3530
03:03:07,760 --> 03:03:11,279
doesn't matter right

3531
03:03:09,760 --> 03:03:13,760
and then you try to sample and you

3532
03:03:11,279 --> 03:03:15,520
sample complete garbage out there

3533
03:03:13,760 --> 03:03:17,120
so whenever we do that sampling we're

3534
03:03:15,520 --> 03:03:18,960
going to have to clamp

3535
03:03:17,120 --> 03:03:20,479
right we're going to have to say like if

3536
03:03:18,959 --> 03:03:23,839
you would leave

3537
03:03:20,478 --> 03:03:23,840
if you've left the area

3538
03:03:24,639 --> 03:03:29,039
if you've left the bounds

3539
03:03:26,879 --> 03:03:30,879
then you stop

3540
03:03:29,040 --> 03:03:32,479
uh and you you know you you wouldn't

3541
03:03:30,879 --> 03:03:34,478
sample that ray

3542
03:03:32,478 --> 03:03:37,840
right you wouldn't download a ferrari

3543
03:03:34,478 --> 03:03:37,840
and you wouldn't sample that ray

3544
03:03:39,439 --> 03:03:42,720
that's almost certainly where our bleed

3545
03:03:40,959 --> 03:03:44,239
is coming from we're sampling completely

3546
03:03:42,719 --> 03:03:46,159
out into garbage land and then that

3547
03:03:44,239 --> 03:03:48,318
contaminates everyone

3548
03:03:46,159 --> 03:03:51,119
that also explains why you only get to

3549
03:03:48,318 --> 03:03:54,318
bleed sometimes because if all if you

3550
03:03:51,120 --> 03:03:56,479
move to a place in the world where all

3551
03:03:54,318 --> 03:03:59,199
of the lighting computations are being

3552
03:03:56,478 --> 03:04:01,039
done in places that actually will hit

3553
03:03:59,200 --> 03:04:04,000
something

3554
03:04:01,040 --> 03:04:05,520
then you will not get the bleed

3555
03:04:04,000 --> 03:04:07,600
right

3556
03:04:05,520 --> 03:04:09,520
so i think that totally explains this

3557
03:04:07,600 --> 03:04:13,079
problem the question is just what do we

3558
03:04:09,520 --> 03:04:13,079
do about it

3559
03:04:26,799 --> 03:04:30,239
i also don't know why we were getting

3560
03:04:28,318 --> 03:04:33,760
like negative one

3561
03:04:30,239 --> 03:04:36,159
in x that seems broken

3562
03:04:33,760 --> 03:04:37,920
so that may be like a legit rounding bug

3563
03:04:36,159 --> 03:04:39,600
or something that we have in the walk

3564
03:04:37,920 --> 03:04:41,920
table or like it's hitting the apron

3565
03:04:39,600 --> 03:04:41,920
wrong

3566
03:04:42,398 --> 03:04:44,639
right

3567
03:04:45,040 --> 03:04:47,920
so i'm not sure what we want to do about

3568
03:04:46,719 --> 03:04:50,318
this

3569
03:04:47,920 --> 03:04:51,760
one thing we could do about this is we

3570
03:04:50,318 --> 03:04:57,439
actually just

3571
03:04:51,760 --> 03:04:57,439
when we sample we clamp the sample to

3572
03:04:57,520 --> 03:05:02,399
the cage so we just clamp it to a valid

3573
03:05:00,000 --> 03:05:02,398
value

3574
03:05:03,040 --> 03:05:07,040
that has the bonus of working for

3575
03:05:04,639 --> 03:05:09,439
everything that would be outside so that

3576
03:05:07,040 --> 03:05:12,640
might be the best way

3577
03:05:09,439 --> 03:05:15,920
um the other option

3578
03:05:12,639 --> 03:05:15,920
would be that we

3579
03:05:17,439 --> 03:05:23,600
we discard so if you are outside you

3580
03:05:21,040 --> 03:05:25,520
just don't sum that one in it's just

3581
03:05:23,600 --> 03:05:26,000
zero

3582
03:05:25,520 --> 03:05:27,279
um

3583
03:05:26,000 --> 03:05:29,920
[Music]

3584
03:05:27,279 --> 03:05:32,960
in theory this should never happen in a

3585
03:05:29,920 --> 03:05:35,359
improperly constructed environments

3586
03:05:32,959 --> 03:05:37,679
so i think it probably we should just do

3587
03:05:35,359 --> 03:05:40,159
whichever one's more efficient because

3588
03:05:37,680 --> 03:05:42,079
we won't have to care about the quality

3589
03:05:40,159 --> 03:05:43,840
of the result in those circumstances

3590
03:05:42,079 --> 03:05:46,559
because they're only there for catching

3591
03:05:43,840 --> 03:05:49,760
bugs and like numerical errors and stuff

3592
03:05:46,559 --> 03:05:51,519
um it's not actually there to do any

3593
03:05:49,760 --> 03:05:53,040
kind of like

3594
03:05:51,520 --> 03:05:55,439
real work

3595
03:05:53,040 --> 03:05:57,439
that we care about

3596
03:05:55,439 --> 03:06:00,559
so it probably is just whichever is more

3597
03:05:57,439 --> 03:06:01,680
expedient like throwing it out or clamp

3598
03:06:00,559 --> 03:06:03,680
clamping

3599
03:06:01,680 --> 03:06:05,200
probably clamping is easier because that

3600
03:06:03,680 --> 03:06:06,960
way it doesn't introduce any kind of

3601
03:06:05,200 --> 03:06:08,880
branch it just kind of says all right

3602
03:06:06,959 --> 03:06:09,919
the mixes will at least now always be

3603
03:06:08,879 --> 03:06:12,159
valid

3604
03:06:09,920 --> 03:06:13,439
it's just you may end up fetching

3605
03:06:12,159 --> 03:06:16,879
something that you probably shouldn't

3606
03:06:13,439 --> 03:06:16,880
have bothered adding or something right

3607
03:06:19,920 --> 03:06:25,120
that's my guess

3608
03:06:22,459 --> 03:06:26,318
[Music]

3609
03:06:25,120 --> 03:06:28,160
so yeah

3610
03:06:26,318 --> 03:06:30,239
so here where we end up with a probe

3611
03:06:28,159 --> 03:06:34,478
piece single and then you can see here

3612
03:06:30,239 --> 03:06:35,680
what we're doing is we're we're um

3613
03:06:34,478 --> 03:06:39,119
producing

3614
03:06:35,680 --> 03:06:41,680
here with invisalign and total bounds

3615
03:06:39,120 --> 03:06:42,720
this floor function here is what's doing

3616
03:06:41,680 --> 03:06:43,120
it

3617
03:06:42,719 --> 03:06:44,799
um

3618
03:06:43,120 --> 03:06:46,880
[Music]

3619
03:06:44,799 --> 03:06:48,879
so yeah so you can see us actually we

3620
03:06:46,879 --> 03:06:50,799
are clamping

3621
03:06:48,879 --> 03:06:54,278
right here

3622
03:06:50,799 --> 03:06:54,278
uh to

3623
03:06:56,478 --> 03:07:00,478
okay so we already are doing this

3624
03:06:57,760 --> 03:07:02,398
clamping so i guess i i spoke too soon

3625
03:07:00,478 --> 03:07:04,478
this won't actually solve our bug

3626
03:07:02,398 --> 03:07:07,799
because we are actually doing the clamp

3627
03:07:04,478 --> 03:07:07,799
it looks like

3628
03:07:14,559 --> 03:07:20,318
but that doesn't quite add up now does

3629
03:07:16,559 --> 03:07:20,318
it because if that were true

3630
03:07:22,079 --> 03:07:27,200
if that were true

3631
03:07:24,478 --> 03:07:27,199
then why

3632
03:07:33,040 --> 03:07:37,439
why when we ran this before were we able

3633
03:07:34,959 --> 03:07:40,879
to sample out of bounds for zero for

3634
03:07:37,439 --> 03:07:40,880
rays that were equal to zero

3635
03:07:45,680 --> 03:07:51,200
i get is that just because the clamp

3636
03:07:48,639 --> 03:07:54,719
wouldn't work

3637
03:07:51,200 --> 03:07:54,720
on like in for something

3638
03:08:01,120 --> 03:08:06,279
like something still seems a little bit

3639
03:08:02,799 --> 03:08:06,278
fishy there

3640
03:08:37,840 --> 03:08:41,600
yeah i would have assumed that if would

3641
03:08:39,600 --> 03:08:45,200
just be fine in that comparison right i

3642
03:08:41,600 --> 03:08:48,559
mean i'm always a little hazy on on

3643
03:08:45,200 --> 03:08:49,279
what cindy will do

3644
03:08:48,559 --> 03:08:50,959
but

3645
03:08:49,279 --> 03:08:53,600
you know

3646
03:08:50,959 --> 03:08:56,879
if and negative imp should just compare

3647
03:08:53,600 --> 03:08:59,200
as would a large number in that

3648
03:08:56,879 --> 03:09:01,119
direction

3649
03:08:59,200 --> 03:09:04,159
so you would think that clamp would

3650
03:09:01,120 --> 03:09:04,160
correctly clamp it down

3651
03:09:10,478 --> 03:09:16,079
so that should always be clamping so how

3652
03:09:13,120 --> 03:09:18,160
the heck did that ever actually sample

3653
03:09:16,079 --> 03:09:21,159
outside of where it was supposed to

3654
03:09:18,159 --> 03:09:21,159
sample

3655
03:09:40,719 --> 03:09:45,159
like that doesn't make a lot of sense

3656
03:10:05,840 --> 03:10:08,559
that just does not make a heck of a lot

3657
03:10:07,359 --> 03:10:12,159
of sense like we should be able to set

3658
03:10:08,559 --> 03:10:14,398
that value to whatever we want

3659
03:10:12,159 --> 03:10:14,398
right

3660
03:10:15,439 --> 03:10:18,880
so i wonder if there's like a subtle bug

3661
03:10:17,200 --> 03:10:21,120
in here somewhere where there's some pla

3662
03:10:18,879 --> 03:10:24,599
way we can actually

3663
03:10:21,120 --> 03:10:24,600
sample outside

3664
03:10:58,879 --> 03:11:02,318
so yeah i don't really know what's up

3665
03:11:01,120 --> 03:11:05,319
with that

3666
03:11:02,318 --> 03:11:05,318
um

3667
03:11:08,238 --> 03:11:12,559
i don't know what to make of that

3668
03:11:10,318 --> 03:11:15,119
i'm pretty confused

3669
03:11:12,559 --> 03:11:18,879
so you can see like the general flow of

3670
03:11:15,120 --> 03:11:20,399
this code we start by producing the

3671
03:11:18,879 --> 03:11:22,559
coordinate

3672
03:11:20,398 --> 03:11:25,760
by flooring the

3673
03:11:22,559 --> 03:11:27,920
this is basically the voxel lookup so p

3674
03:11:25,760 --> 03:11:29,439
right is the is the place we're going to

3675
03:11:27,920 --> 03:11:32,960
sample

3676
03:11:29,439 --> 03:11:34,720
we subtract the minimum value

3677
03:11:32,959 --> 03:11:36,799
um which is exactly what you would

3678
03:11:34,719 --> 03:11:38,639
expect

3679
03:11:36,799 --> 03:11:39,920
we then multiply by the inverse cell

3680
03:11:38,639 --> 03:11:42,000
dimension which is the same as dividing

3681
03:11:39,920 --> 03:11:44,879
by the cell dimension we then floor that

3682
03:11:42,000 --> 03:11:48,318
that gives us our voxel coordinate

3683
03:11:44,879 --> 03:11:53,119
our uvw is where uh the fractional part

3684
03:11:48,318 --> 03:11:53,119
of that which is what you'd expect right

3685
03:11:53,680 --> 03:11:57,680
um

3686
03:11:55,680 --> 03:11:59,600
we then say okay

3687
03:11:57,680 --> 03:12:00,960
the maximum

3688
03:11:59,600 --> 03:12:02,960
place

3689
03:12:00,959 --> 03:12:04,799
that you could sample on this vauxhall

3690
03:12:02,959 --> 03:12:07,119
the like the maximum address you could

3691
03:12:04,799 --> 03:12:10,159
use is the dimension of the voxel minus

3692
03:12:07,120 --> 03:12:11,760
one one one right like it just subtracts

3693
03:12:10,159 --> 03:12:15,439
one from that

3694
03:12:11,760 --> 03:12:16,639
we clamp between zero and that maximum

3695
03:12:15,439 --> 03:12:18,800
value

3696
03:12:16,639 --> 03:12:21,519
the base chord and the bass chord plus

3697
03:12:18,799 --> 03:12:22,639
one so those are the two corners like of

3698
03:12:21,520 --> 03:12:25,520
the voxel

3699
03:12:22,639 --> 03:12:27,358
that we'd like that we'd like to sample

3700
03:12:25,520 --> 03:12:29,279
right

3701
03:12:27,359 --> 03:12:31,359
we take the difference between them

3702
03:12:29,279 --> 03:12:33,120
which is our way of saying if we

3703
03:12:31,359 --> 03:12:35,200
flattened up against an edge we don't

3704
03:12:33,120 --> 03:12:36,640
want to step in those directions at all

3705
03:12:35,200 --> 03:12:37,520
right

3706
03:12:36,639 --> 03:12:40,000
um

3707
03:12:37,520 --> 03:12:41,920
and then we produce the base x y by

3708
03:12:40,000 --> 03:12:43,760
saying okay whatever the minimum is that

3709
03:12:41,920 --> 03:12:45,439
we're going to sample we multiply that

3710
03:12:43,760 --> 03:12:49,680
by the stride

3711
03:12:45,439 --> 03:12:52,000
um and then we also add here like

3712
03:12:49,680 --> 03:12:54,398
whatever this nonsense is which is

3713
03:12:52,000 --> 03:12:56,639
basically like the roast ride for z i

3714
03:12:54,398 --> 03:12:56,639
guess

3715
03:12:57,600 --> 03:13:01,399
tyleros stride

3716
03:13:07,760 --> 03:13:12,120
times t x y

3717
03:13:14,159 --> 03:13:21,920
okay so that's that's the offset for the

3718
03:13:17,359 --> 03:13:21,920
specific va like the actual texel

3719
03:13:23,920 --> 03:13:29,159
right it's the xy offset of the texel

3720
03:13:36,959 --> 03:13:39,959
um

3721
03:13:51,680 --> 03:13:56,159
and then you just sample that thing

3722
03:13:53,600 --> 03:13:58,079
which is exactly right yes so i don't i

3723
03:13:56,159 --> 03:14:00,559
don't see how that was i don't see how

3724
03:13:58,079 --> 03:14:04,238
that was screwing up exactly i wonder if

3725
03:14:00,559 --> 03:14:06,959
it's we kind of need to go look at that

3726
03:14:04,238 --> 03:14:06,959
code again

3727
03:14:08,719 --> 03:14:14,079
um

3728
03:14:11,520 --> 03:14:17,120
maybe to provoke that

3729
03:14:14,079 --> 03:14:20,639
crash that we had um

3730
03:14:17,120 --> 03:14:20,640
with the zeros in there

3731
03:14:20,959 --> 03:14:25,759
to see what was actually happening so i

3732
03:14:23,920 --> 03:14:27,279
kind of want to do that so i think i'm

3733
03:14:25,760 --> 03:14:28,079
going to do that before we call it a day

3734
03:14:27,279 --> 03:14:31,520
here

3735
03:14:28,079 --> 03:14:33,920
so in our walk table like i'm pretty

3736
03:14:31,520 --> 03:14:35,040
sure all we have to do is just load this

3737
03:14:33,920 --> 03:14:39,318
up

3738
03:14:35,040 --> 03:14:39,319
and spam a zero in here

3739
03:14:39,840 --> 03:14:45,359
i'm pretty sure that just makes us crash

3740
03:14:43,120 --> 03:14:45,359
right

3741
03:14:51,359 --> 03:14:56,079
yeah

3742
03:14:52,719 --> 03:14:58,238
so if i look at those values i i just

3743
03:14:56,079 --> 03:14:59,359
want to get like a good understanding of

3744
03:14:58,238 --> 03:15:01,439
exactly

3745
03:14:59,359 --> 03:15:03,200
why that particular piece of code is

3746
03:15:01,439 --> 03:15:04,720
crashing i could have understood other

3747
03:15:03,200 --> 03:15:06,239
pieces of code crashing maybe but now

3748
03:15:04,719 --> 03:15:11,039
that i've looked at this if it's all

3749
03:15:06,238 --> 03:15:11,039
clamped how is that happening right

3750
03:15:11,840 --> 03:15:14,079
um

3751
03:15:14,238 --> 03:15:20,799
so here let's examine these actual

3752
03:15:17,120 --> 03:15:24,160
values so we can see what they are so

3753
03:15:20,799 --> 03:15:25,039
we're gonna take an f chord here

3754
03:15:24,159 --> 03:15:28,000
um

3755
03:15:25,040 --> 03:15:29,840
right and it's just all garbage

3756
03:15:28,000 --> 03:15:32,079
which is what you would expect

3757
03:15:29,840 --> 03:15:32,079
right

3758
03:15:32,719 --> 03:15:36,398
well you know what those are actual

3759
03:15:34,959 --> 03:15:38,719
nands though

3760
03:15:36,398 --> 03:15:40,238
so that might not clamp

3761
03:15:38,719 --> 03:15:42,478
in fact it won't

3762
03:15:40,238 --> 03:15:42,478
um

3763
03:15:42,799 --> 03:15:46,318
you would have to actually nand check

3764
03:15:44,639 --> 03:15:48,959
that so that

3765
03:15:46,318 --> 03:15:51,600
would explain it if that's actually

3766
03:15:48,959 --> 03:15:51,599
what's happening

3767
03:16:01,680 --> 03:16:05,359
so that actually looks fine though like

3768
03:16:04,000 --> 03:16:07,120
i would have thought that nan's wouldn't

3769
03:16:05,359 --> 03:16:07,920
clamp but they did

3770
03:16:07,120 --> 03:16:09,600
uh

3771
03:16:07,920 --> 03:16:12,079
like i said i'm always a little hazy on

3772
03:16:09,600 --> 03:16:16,359
what cindy willer won't do there

3773
03:16:12,079 --> 03:16:16,359
so these all actually look correct

3774
03:16:17,520 --> 03:16:22,960
the min and max are both zeros and the

3775
03:16:20,079 --> 03:16:22,959
delta is zero

3776
03:16:28,639 --> 03:16:34,398
so

3777
03:16:31,520 --> 03:16:36,479
so it does it does actually clamp nands

3778
03:16:34,398 --> 03:16:39,519
so that's great

3779
03:16:36,478 --> 03:16:39,519
so the question is

3780
03:16:40,398 --> 03:16:45,840
why did base offset end up being so

3781
03:16:43,120 --> 03:16:45,840
busted

3782
03:16:47,439 --> 03:16:51,880
which is the actual value that's

3783
03:16:48,879 --> 03:16:51,879
offensive

3784
03:17:01,040 --> 03:17:04,239
so base x y z

3785
03:17:06,799 --> 03:17:12,199
is min x y z times stride x y z

3786
03:17:14,079 --> 03:17:19,520
which is right

3787
03:17:16,478 --> 03:17:22,760
and min x y z

3788
03:17:19,520 --> 03:17:22,760
is zeros

3789
03:17:30,318 --> 03:17:35,278
i don't follow so

3790
03:17:33,040 --> 03:17:35,279
if

3791
03:17:37,520 --> 03:17:42,319
if base offset is computed from base x y

3792
03:17:41,120 --> 03:17:43,520
z

3793
03:17:42,318 --> 03:17:45,519
right

3794
03:17:43,520 --> 03:17:47,840
then we know that it's wrong because

3795
03:17:45,520 --> 03:17:50,880
base x what the reason this is messed up

3796
03:17:47,840 --> 03:17:53,920
is because base x y z is garbage values

3797
03:17:50,879 --> 03:17:54,879
base x y z is min x y z times stride x y

3798
03:17:53,920 --> 03:17:56,879
z

3799
03:17:54,879 --> 03:17:57,839
that should just be zeros

3800
03:17:56,879 --> 03:17:59,358
right

3801
03:17:57,840 --> 03:18:00,719
plus

3802
03:17:59,359 --> 03:18:03,040
this

3803
03:18:00,719 --> 03:18:05,358
line here which

3804
03:18:03,040 --> 03:18:09,560
should just be correct is t x y

3805
03:18:05,359 --> 03:18:09,559
so t x y is broken

3806
03:18:10,079 --> 03:18:14,559
so it's t x y that's actually the

3807
03:18:12,159 --> 03:18:14,559
problem

3808
03:18:19,920 --> 03:18:22,879
okay

3809
03:18:21,359 --> 03:18:24,720
so actually

3810
03:18:22,879 --> 03:18:27,039
i misinterpreted what was happening

3811
03:18:24,719 --> 03:18:29,438
before

3812
03:18:27,040 --> 03:18:32,399
really it's just the fact that it can't

3813
03:18:29,439 --> 03:18:36,318
invert that value is producing a bogus

3814
03:18:32,398 --> 03:18:38,719
txy fetch

3815
03:18:36,318 --> 03:18:41,278
so when i thought this has something to

3816
03:18:38,719 --> 03:18:43,278
do with the actual grid cell it doesn't

3817
03:18:41,279 --> 03:18:44,560
that's a lie because that always gets

3818
03:18:43,279 --> 03:18:46,960
clamped

3819
03:18:44,559 --> 03:18:49,760
so it's just the txy that was actually

3820
03:18:46,959 --> 03:18:52,238
causing it and that comes from r

3821
03:18:49,760 --> 03:18:54,880
which we do know would be wrong

3822
03:18:52,238 --> 03:18:56,959
so i guess like surprise it turns out

3823
03:18:54,879 --> 03:18:58,799
this wasn't actually a problem

3824
03:18:56,959 --> 03:19:00,238
oh well

3825
03:18:58,799 --> 03:19:02,719
um

3826
03:19:00,238 --> 03:19:03,520
that's a little bit of a bummer

3827
03:19:02,719 --> 03:19:05,358
but

3828
03:19:03,520 --> 03:19:07,600
what can you do because that would have

3829
03:19:05,359 --> 03:19:09,600
been nice if it turned out that you know

3830
03:19:07,600 --> 03:19:10,880
if that had actually been happening then

3831
03:19:09,600 --> 03:19:14,399
that would have probably been an easy

3832
03:19:10,879 --> 03:19:14,398
fix but no such luck

3833
03:19:15,040 --> 03:19:21,439
okay

3834
03:19:17,279 --> 03:19:21,439
so let's take the bogus value out

3835
03:19:21,520 --> 03:19:25,120
and put it back

3836
03:19:23,120 --> 03:19:26,960
to where it was

3837
03:19:25,120 --> 03:19:29,200
all right well

3838
03:19:26,959 --> 03:19:29,199
um

3839
03:19:29,600 --> 03:19:34,238
i guess we got to call it for today and

3840
03:19:31,760 --> 03:19:37,200
we're gonna have to

3841
03:19:34,238 --> 03:19:38,719
um pick this up back up next time when

3842
03:19:37,200 --> 03:19:41,600
our goal will be to

3843
03:19:38,719 --> 03:19:43,278
look at these last two problems here and

3844
03:19:41,600 --> 03:19:44,640
probably have to dig in pretty hard i

3845
03:19:43,279 --> 03:19:46,960
don't know where they're coming from i

3846
03:19:44,639 --> 03:19:49,680
don't have any guesses at the moment

3847
03:19:46,959 --> 03:19:51,358
so we're kind of just gonna have to

3848
03:19:49,680 --> 03:19:54,720
go through

3849
03:19:51,359 --> 03:19:58,600
slowly but surely and eliminate

3850
03:19:54,719 --> 03:19:58,599
sources of problems

3851
03:20:08,559 --> 03:20:13,039
it's too bad because

3852
03:20:10,559 --> 03:20:14,799
uh we're really close to good

3853
03:20:13,040 --> 03:20:15,840
it's too bad about this

3854
03:20:14,799 --> 03:20:18,238
because

3855
03:20:15,840 --> 03:20:21,200
it's very close to being

3856
03:20:18,238 --> 03:20:23,439
a really good lighting actually

3857
03:20:21,200 --> 03:20:26,479
but we're obviously just sampling really

3858
03:20:23,439 --> 03:20:31,040
weirdly we have a weird thing too where

3859
03:20:26,478 --> 03:20:31,039
the light you can see um

3860
03:20:32,079 --> 03:20:36,398
as it goes through because we have this

3861
03:20:34,959 --> 03:20:38,398
weird problem

3862
03:20:36,398 --> 03:20:40,719
that's a separate problem

3863
03:20:38,398 --> 03:20:43,719
of uh

3864
03:20:40,719 --> 03:20:43,719
the

3865
03:20:44,000 --> 03:20:48,719
the lights as they go through

3866
03:20:47,200 --> 03:20:50,960
other like

3867
03:20:48,719 --> 03:20:54,079
lights themselves

3868
03:20:50,959 --> 03:20:56,719
are occluders in the system right now

3869
03:20:54,079 --> 03:20:59,279
and we don't handle that properly

3870
03:20:56,719 --> 03:21:00,799
so uh you get this weird thing too

3871
03:20:59,279 --> 03:21:02,238
that's a separate issue that's what's

3872
03:21:00,799 --> 03:21:04,079
happened when you've

3873
03:21:02,238 --> 03:21:07,600
moved through things separately i would

3874
03:21:04,079 --> 03:21:07,600
also ask what the heck that is

3875
03:21:08,639 --> 03:21:13,039
oh that's the light yeah so in this case

3876
03:21:11,279 --> 03:21:15,680
you can see like this our light is

3877
03:21:13,040 --> 03:21:17,680
actually moving through another light

3878
03:21:15,680 --> 03:21:18,960
right it's this light here

3879
03:21:17,680 --> 03:21:20,800
um

3880
03:21:18,959 --> 03:21:22,159
we can actually probably see it if we

3881
03:21:20,799 --> 03:21:27,478
change

3882
03:21:22,159 --> 03:21:27,478
the uh drawing area

3883
03:21:42,879 --> 03:21:46,799
why is that only drawing sometimes

3884
03:21:48,159 --> 03:21:52,039
doesn't that seem bad

3885
03:22:00,559 --> 03:22:03,359
what's up with that

3886
03:22:04,879 --> 03:22:09,679
so you see how y

3887
03:22:07,840 --> 03:22:13,639
seems like it mostly correctly works

3888
03:22:09,680 --> 03:22:13,639
although it doesn't work right there

3889
03:22:21,120 --> 03:22:27,720
oh that's just because it's inside

3890
03:22:22,719 --> 03:22:27,719
something that's why never mind

3891
03:22:41,200 --> 03:22:45,359
yeah i mean we just we have some really

3892
03:22:42,879 --> 03:22:46,799
weird problems right and i i think we're

3893
03:22:45,359 --> 03:22:49,200
close

3894
03:22:46,799 --> 03:22:52,318
but it's gonna be a real grind to get

3895
03:22:49,200 --> 03:22:56,439
down to zero right

3896
03:22:52,318 --> 03:22:56,439
we're close but it's gonna be a grind

3897
03:23:08,318 --> 03:23:12,199
unreal engine 6.

3898
03:23:18,639 --> 03:23:22,559
all right i'm going to call it for today

3899
03:23:21,120 --> 03:23:24,160
uh we're going to have to look pretty

3900
03:23:22,559 --> 03:23:26,238
carefully at this stuff this that's

3901
03:23:24,159 --> 03:23:27,760
going to be a real grind next weekend

3902
03:23:26,238 --> 03:23:29,279
unfortunately but that's just where

3903
03:23:27,760 --> 03:23:30,559
we're at

3904
03:23:29,279 --> 03:23:32,800
um so

3905
03:23:30,559 --> 03:23:34,799
we will do it

3906
03:23:32,799 --> 03:23:37,358
uh so i'll be back here next weekend and

3907
03:23:34,799 --> 03:23:39,679
take a look at that until then everyone

3908
03:23:37,359 --> 03:23:41,439
have fun programming and i will see

3909
03:23:39,680 --> 03:23:45,000
everybody on the internet

3910
03:23:41,439 --> 03:23:45,000
take it easy everybody

