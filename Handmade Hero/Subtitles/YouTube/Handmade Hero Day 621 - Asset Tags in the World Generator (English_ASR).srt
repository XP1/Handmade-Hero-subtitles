1
00:00:01,679 --> 00:00:05,439
hello everybody and welcome

2
00:00:04,000 --> 00:00:07,120
to handmade hero show we could a

3
00:00:05,440 --> 00:00:11,039
complete game live on stream

4
00:00:07,120 --> 00:00:12,960
um we have some

5
00:00:11,039 --> 00:00:14,399
sort of hanging out stuff that we were

6
00:00:12,960 --> 00:00:16,320
doing um

7
00:00:14,400 --> 00:00:17,600
we oh you know what i gotta turn off

8
00:00:16,320 --> 00:00:19,519
that so

9
00:00:17,600 --> 00:00:21,840
you know what here's the thing ryan how

10
00:00:19,519 --> 00:00:24,000
did how what's the plan we need a plan

11
00:00:21,839 --> 00:00:25,039
for how i can turn off battery saver at

12
00:00:24,000 --> 00:00:29,039
startup

13
00:00:25,039 --> 00:00:31,359
no one knows um anyway uh

14
00:00:29,039 --> 00:00:32,480
what i want to do here is i want to take

15
00:00:31,359 --> 00:00:34,559
a look today

16
00:00:32,479 --> 00:00:36,078
at getting the tag stuff working we we

17
00:00:34,558 --> 00:00:37,199
basically did all the stuff i wanted to

18
00:00:36,079 --> 00:00:38,960
do but we're going to want to like

19
00:00:37,200 --> 00:00:40,559
rebuild the asset files

20
00:00:38,960 --> 00:00:42,239
uh and simplify the tag stuff a little

21
00:00:40,558 --> 00:00:43,359
bit and then i i kind of had some

22
00:00:42,238 --> 00:00:44,959
questions about it

23
00:00:43,359 --> 00:00:46,399
because i was thinking just in terms of

24
00:00:44,960 --> 00:00:48,079
like now that we sort of have a

25
00:00:46,399 --> 00:00:50,320
you know a vague plan for what we want

26
00:00:48,079 --> 00:00:52,079
to do um

27
00:00:50,320 --> 00:00:53,840
in terms of cleaning up the file format

28
00:00:52,079 --> 00:00:56,878
stuff

29
00:00:53,840 --> 00:00:59,039
what i don't really know right is i

30
00:00:56,878 --> 00:01:00,558
don't really know

31
00:00:59,039 --> 00:01:02,320
i don't really know what we want to do

32
00:01:00,558 --> 00:01:03,599
about tag order i was i was thinking

33
00:01:02,320 --> 00:01:05,359
about this a little bit just kind of the

34
00:01:03,600 --> 00:01:08,478
back of my head

35
00:01:05,359 --> 00:01:09,519
and if you take a look now at the way uh

36
00:01:08,478 --> 00:01:12,239
the tags

37
00:01:09,519 --> 00:01:13,200
were working or whatever then you can

38
00:01:12,239 --> 00:01:16,319
kind of see

39
00:01:13,200 --> 00:01:20,400
like uh in here where we do the

40
00:01:16,319 --> 00:01:21,359
tag hash stuff we take a bunch of tags

41
00:01:20,400 --> 00:01:24,880
and we build them

42
00:01:21,359 --> 00:01:26,799
into a sort of a 64-bit

43
00:01:24,879 --> 00:01:28,798
identifier that packs like which you

44
00:01:26,799 --> 00:01:30,000
know up to four tags and a category

45
00:01:28,799 --> 00:01:32,159
together

46
00:01:30,000 --> 00:01:33,680
uh and then and and to be honest with

47
00:01:32,159 --> 00:01:35,040
you i'm not sure why we even bother with

48
00:01:33,680 --> 00:01:35,920
the basic category anymore because that

49
00:01:35,040 --> 00:01:37,439
could just be

50
00:01:35,920 --> 00:01:38,879
like you could just have four tags and

51
00:01:37,438 --> 00:01:40,959
the first tag is the category like these

52
00:01:38,879 --> 00:01:43,519
things don't have to be

53
00:01:40,959 --> 00:01:45,280
separate and so we should probably still

54
00:01:43,519 --> 00:01:49,599
we should probably look at that stuff

55
00:01:45,280 --> 00:01:51,040
a little bit more uh carefully later but

56
00:01:49,599 --> 00:01:53,759
uh the biggest thing that i wanted to

57
00:01:51,040 --> 00:01:56,880
point out is that the order of the tags

58
00:01:53,759 --> 00:01:59,118
matters in this system so in other words

59
00:01:56,879 --> 00:02:00,319
if you were because the hash is going to

60
00:01:59,118 --> 00:02:03,519
hash these values

61
00:02:00,319 --> 00:02:06,559
as one 64-bit value

62
00:02:03,519 --> 00:02:10,318
um you're gonna end up in a situation

63
00:02:06,560 --> 00:02:13,759
where you if you swapped the order so

64
00:02:10,318 --> 00:02:16,878
like for example if i load up

65
00:02:13,759 --> 00:02:18,878
one of these tags files you can see that

66
00:02:16,878 --> 00:02:21,120
we have stuff like wall man-made wood

67
00:02:18,878 --> 00:02:23,120
drywall or something like that

68
00:02:21,120 --> 00:02:25,360
um and if you swapped that to like

69
00:02:23,120 --> 00:02:26,000
man-made wall wood drywall it would be a

70
00:02:25,360 --> 00:02:29,280
different

71
00:02:26,000 --> 00:02:29,759
tag now i don't necessarily know if we

72
00:02:29,280 --> 00:02:31,840
care

73
00:02:29,759 --> 00:02:34,878
because we can just make sure we already

74
00:02:31,840 --> 00:02:38,159
we always have those things

75
00:02:34,878 --> 00:02:40,959
uh set up in a way that you know

76
00:02:38,159 --> 00:02:41,439
uh keeps them what's the word i'm

77
00:02:40,959 --> 00:02:42,959
looking for

78
00:02:41,439 --> 00:02:45,199
we can always have those things set up

79
00:02:42,959 --> 00:02:48,400
in a way that make sure they

80
00:02:45,199 --> 00:02:50,159
uh are like we we never would tag things

81
00:02:48,400 --> 00:02:51,360
in a way that doesn't go in in a strict

82
00:02:50,159 --> 00:02:54,318
order

83
00:02:51,360 --> 00:02:56,080
so that seems fine but there's also an

84
00:02:54,318 --> 00:02:58,639
open question of whether we want the

85
00:02:56,080 --> 00:03:02,239
system to support

86
00:02:58,639 --> 00:03:05,598
uh doing that differently right

87
00:03:02,239 --> 00:03:08,878
and the only reason

88
00:03:05,598 --> 00:03:09,439
i i can't really say that i know of a

89
00:03:08,878 --> 00:03:13,359
reason

90
00:03:09,439 --> 00:03:15,280
not to do it one way like

91
00:03:13,360 --> 00:03:17,040
you know vaguely if we just look at the

92
00:03:15,280 --> 00:03:19,759
performance

93
00:03:17,039 --> 00:03:20,400
uh characteristics of of how this thing

94
00:03:19,759 --> 00:03:23,120
would work

95
00:03:20,400 --> 00:03:25,280
like if i look uh at this hash function

96
00:03:23,120 --> 00:03:28,400
that we have here you can see

97
00:03:25,280 --> 00:03:32,000
how it's working is you get an aes

98
00:03:28,400 --> 00:03:34,080
deck um of the seed here

99
00:03:32,000 --> 00:03:36,158
and you know nominally the argument you

100
00:03:34,080 --> 00:03:38,480
would make is like well you know okay so

101
00:03:36,158 --> 00:03:40,878
each one of these takes four cycles

102
00:03:38,479 --> 00:03:41,919
so this you know this this process here

103
00:03:40,878 --> 00:03:45,199
where we do like

104
00:03:41,919 --> 00:03:48,238
hash hash um into

105
00:03:45,199 --> 00:03:51,598
x would be eight cycles of

106
00:03:48,239 --> 00:03:52,878
cpu time to produce and so if you looked

107
00:03:51,598 --> 00:03:55,039
at what you would do

108
00:03:52,878 --> 00:03:56,959
if you wanted to make it so that it was

109
00:03:55,039 --> 00:03:58,878
order independent

110
00:03:56,959 --> 00:04:00,560
then what you would need to do is hash

111
00:03:58,878 --> 00:04:04,000
each tag separately

112
00:04:00,560 --> 00:04:05,680
and then like xor the results together

113
00:04:04,000 --> 00:04:07,039
or something else that would be like

114
00:04:05,680 --> 00:04:11,439
order independent

115
00:04:07,039 --> 00:04:14,560
right um because

116
00:04:11,438 --> 00:04:16,079
like xoring two things together and then

117
00:04:14,560 --> 00:04:18,399
xoring a third

118
00:04:16,079 --> 00:04:19,600
i believe would always it would always

119
00:04:18,399 --> 00:04:22,159
swap like

120
00:04:19,600 --> 00:04:23,520
they become the same right like and you

121
00:04:22,160 --> 00:04:24,400
could imagine using anything that had

122
00:04:23,519 --> 00:04:28,879
that property like

123
00:04:24,399 --> 00:04:30,079
addition right um would like be the same

124
00:04:28,879 --> 00:04:32,000
way like anything

125
00:04:30,079 --> 00:04:33,439
where you like put a bunch of things

126
00:04:32,000 --> 00:04:36,800
together

127
00:04:33,439 --> 00:04:39,279
um and you just say like all right

128
00:04:36,800 --> 00:04:41,360
we you know we know that the result will

129
00:04:39,279 --> 00:04:42,799
be the same

130
00:04:41,360 --> 00:04:44,240
that would make it so this would work so

131
00:04:42,800 --> 00:04:44,879
the reason that this doesn't work right

132
00:04:44,240 --> 00:04:47,439
now

133
00:04:44,879 --> 00:04:49,680
in terms for ordered uh if you wanted to

134
00:04:47,439 --> 00:04:52,959
be order independent is because the hash

135
00:04:49,680 --> 00:04:54,720
is taking everything as one 64-bit chunk

136
00:04:52,959 --> 00:04:56,719
and then producing a hash value that

137
00:04:54,720 --> 00:04:58,560
encompasses all of that which is great

138
00:04:56,720 --> 00:05:00,240
if we want it to be that way if we don't

139
00:04:58,560 --> 00:05:01,918
want it to be that way

140
00:05:00,240 --> 00:05:04,000
what would we do well we'd have to do

141
00:05:01,918 --> 00:05:04,959
this for each chunk independently so

142
00:05:04,000 --> 00:05:08,399
we'd have to like

143
00:05:04,959 --> 00:05:08,719
decouple the hash into hashing each set

144
00:05:08,399 --> 00:05:12,638
of

145
00:05:08,720 --> 00:05:12,639
bits separately right

146
00:05:17,120 --> 00:05:23,199
and the argument there would just be

147
00:05:21,439 --> 00:05:25,600
the argument against that would be well

148
00:05:23,199 --> 00:05:29,520
now if i had to do this four times

149
00:05:25,600 --> 00:05:33,199
one for each tag that would actually

150
00:05:29,519 --> 00:05:35,439
go from eight cycles right to 32 cycles

151
00:05:33,199 --> 00:05:38,560
which seems like a really bad

152
00:05:35,439 --> 00:05:42,000
idea but it's important to remember that

153
00:05:38,560 --> 00:05:45,120
actually aes deck is

154
00:05:42,000 --> 00:05:48,240
latency 4 but it's throughput one

155
00:05:45,120 --> 00:05:50,240
so actually if we were to have four

156
00:05:48,240 --> 00:05:52,000
independent hashes so the reason this

157
00:05:50,240 --> 00:05:55,918
takes eight cycles is because

158
00:05:52,000 --> 00:05:58,079
it uses the output of of the first one

159
00:05:55,918 --> 00:06:00,318
as the input to the second one right so

160
00:05:58,079 --> 00:06:03,038
this goes into here

161
00:06:00,319 --> 00:06:04,720
so it has to wait four cycles and then

162
00:06:03,038 --> 00:06:05,439
wait another four cycles before it can

163
00:06:04,720 --> 00:06:07,280
extract

164
00:06:05,439 --> 00:06:08,879
right because it's a serial it's a

165
00:06:07,279 --> 00:06:12,159
serial dependency chain

166
00:06:08,879 --> 00:06:13,360
build hash like build like munch the

167
00:06:12,160 --> 00:06:16,720
bits munch the bits

168
00:06:13,360 --> 00:06:17,038
extract the bits right but because you

169
00:06:16,720 --> 00:06:21,039
can

170
00:06:17,038 --> 00:06:24,399
actually issue one aes deck every clock

171
00:06:21,038 --> 00:06:25,439
if we wanted to we could actually do all

172
00:06:24,399 --> 00:06:29,679
of these

173
00:06:25,439 --> 00:06:33,120
in the same at the same time

174
00:06:29,680 --> 00:06:35,120
right so we could just do four aes

175
00:06:33,120 --> 00:06:36,879
decks with a different hash values and

176
00:06:35,120 --> 00:06:37,280
then four aes decks with different hat

177
00:06:36,879 --> 00:06:39,759
with

178
00:06:37,279 --> 00:06:41,758
you know for the second round of each

179
00:06:39,759 --> 00:06:45,520
and all of those would overlap

180
00:06:41,759 --> 00:06:49,280
so rather than going from 8 to 32

181
00:06:45,519 --> 00:06:51,598
it would go like from 8 to 12. right

182
00:06:49,279 --> 00:06:51,598
um

183
00:06:53,759 --> 00:06:59,038
so you know it's it's really not

184
00:06:56,959 --> 00:07:01,279
it wouldn't be a big deal for us to do

185
00:06:59,038 --> 00:07:04,399
that said i'm just not sure

186
00:07:01,279 --> 00:07:06,399
why we would do it right i don't know

187
00:07:04,399 --> 00:07:09,679
what the point would be

188
00:07:06,399 --> 00:07:10,638
of of actually going that far because i

189
00:07:09,680 --> 00:07:13,199
can't really see

190
00:07:10,639 --> 00:07:14,720
a whole lot of reason why we can't just

191
00:07:13,199 --> 00:07:18,319
keep it this way

192
00:07:14,720 --> 00:07:21,440
now one thing i will say is i don't

193
00:07:18,319 --> 00:07:22,080
i i strongly suspect that a bunch of

194
00:07:21,439 --> 00:07:25,519
these

195
00:07:22,079 --> 00:07:29,598
tags are like not

196
00:07:25,519 --> 00:07:33,918
necessary because things like orphan

197
00:07:29,598 --> 00:07:33,918
don't do anything like um

198
00:07:34,160 --> 00:07:37,599
there's there's just a bunch of things

199
00:07:35,759 --> 00:07:39,360
where i'm not sure we really care but

200
00:07:37,598 --> 00:07:40,399
i'm gonna leave them as they are because

201
00:07:39,360 --> 00:07:43,840
there's really no

202
00:07:40,399 --> 00:07:44,719
harm to it um but just to give you an

203
00:07:43,839 --> 00:07:47,918
example like

204
00:07:44,720 --> 00:07:49,759
you know if you have chair um and you

205
00:07:47,918 --> 00:07:50,560
look at this you're like orphan man-made

206
00:07:49,759 --> 00:07:53,439
chair sofa

207
00:07:50,560 --> 00:07:53,759
like we don't need all those because it

208
00:07:53,439 --> 00:07:55,918
just

209
00:07:53,759 --> 00:07:56,800
it gets a little bit ridiculous right

210
00:07:55,918 --> 00:07:58,959
and so

211
00:07:56,800 --> 00:08:00,319
at some point here we're gonna have to

212
00:07:58,959 --> 00:08:03,359
like deal

213
00:08:00,319 --> 00:08:05,280
uh with this stuff and i don't really

214
00:08:03,360 --> 00:08:06,080
know exactly how we want to but we're

215
00:08:05,279 --> 00:08:08,159
gonna have to

216
00:08:06,079 --> 00:08:10,079
organize the tags a little bit and at

217
00:08:08,160 --> 00:08:12,400
that point we wanna think about these

218
00:08:10,079 --> 00:08:13,439
like we don't need chair and sofa like

219
00:08:12,399 --> 00:08:15,038
we're either gonna

220
00:08:13,439 --> 00:08:16,719
put in a chair or we're gonna put in a

221
00:08:15,038 --> 00:08:20,000
sofa so like you know we're

222
00:08:16,720 --> 00:08:22,240
at the very least gonna do that um but

223
00:08:20,000 --> 00:08:23,279
you know we just have to kind of think

224
00:08:22,240 --> 00:08:27,519
these things through

225
00:08:23,279 --> 00:08:28,159
and like you know and these would need

226
00:08:27,519 --> 00:08:29,839
like these are

227
00:08:28,160 --> 00:08:32,240
if these are both the same right they

228
00:08:29,839 --> 00:08:34,718
would need like a variant here

229
00:08:32,240 --> 00:08:38,000
um and and and they don't need they

230
00:08:34,719 --> 00:08:38,000
probably don't need like

231
00:08:38,839 --> 00:08:42,640
um

232
00:08:40,320 --> 00:08:43,360
they probably don't need man-made

233
00:08:42,639 --> 00:08:46,399
anymore

234
00:08:43,360 --> 00:08:48,720
because it's like or or you know because

235
00:08:46,399 --> 00:08:50,000
if it's the orphanage

236
00:08:48,720 --> 00:08:51,839
like they're not gonna have in the

237
00:08:50,000 --> 00:08:53,839
orphanage some other chair so

238
00:08:51,839 --> 00:08:56,080
a lot of this stuff i feel like can just

239
00:08:53,839 --> 00:08:57,040
be sort of simplified is i guess all i

240
00:08:56,080 --> 00:08:58,959
mean

241
00:08:57,039 --> 00:09:00,719
um like the man-made tag we probably

242
00:08:58,958 --> 00:09:03,199
just don't need right because like

243
00:09:00,720 --> 00:09:04,480
the orphan table the and the orphan rug

244
00:09:03,200 --> 00:09:07,440
and so on

245
00:09:04,480 --> 00:09:08,560
um can someone tell me like how to get

246
00:09:07,440 --> 00:09:10,480
rid of that

247
00:09:08,559 --> 00:09:12,559
uh also here's another thing for the

248
00:09:10,480 --> 00:09:14,320
list of i have a little list of things

249
00:09:12,559 --> 00:09:16,479
in four code that i want to fix

250
00:09:14,320 --> 00:09:17,440
like you want to be able to just like

251
00:09:16,480 --> 00:09:21,680
delete

252
00:09:17,440 --> 00:09:23,519
um if you've if you've already done that

253
00:09:21,679 --> 00:09:25,599
like if you were here and you go like

254
00:09:23,519 --> 00:09:27,679
that you want to get rid of the comma

255
00:09:25,600 --> 00:09:29,360
but you can't it like eats the whole

256
00:09:27,679 --> 00:09:30,239
thing i don't know when you'd ever

257
00:09:29,360 --> 00:09:32,959
actually want

258
00:09:30,240 --> 00:09:32,959
that to happen

259
00:09:35,039 --> 00:09:38,958
but i feel like there's probably some

260
00:09:36,720 --> 00:09:41,040
way to fix that uh

261
00:09:38,958 --> 00:09:42,479
i think i was using like my own version

262
00:09:41,039 --> 00:09:44,319
of those before

263
00:09:42,480 --> 00:09:45,440
and so like i never noticed that that

264
00:09:44,320 --> 00:09:46,560
was the way that these worked or

265
00:09:45,440 --> 00:09:46,959
something but i feel like there should

266
00:09:46,559 --> 00:09:49,439
be

267
00:09:46,958 --> 00:09:50,239
a one that actually deletes a token at a

268
00:09:49,440 --> 00:09:52,560
time

269
00:09:50,240 --> 00:09:53,600
and doesn't think of commas as somehow

270
00:09:52,559 --> 00:09:54,799
not being a token

271
00:09:53,600 --> 00:09:56,879
it looks like there's something there

272
00:09:54,799 --> 00:09:59,439
that's like oh well delete

273
00:09:56,879 --> 00:10:01,439
token but not you know not comma like

274
00:09:59,440 --> 00:10:04,000
comma is not gonna be considered a token

275
00:10:01,440 --> 00:10:08,240
or something right

276
00:10:04,000 --> 00:10:10,559
um anyway so you know basically i'm just

277
00:10:08,240 --> 00:10:12,560
just sort of blabbering about this but

278
00:10:10,559 --> 00:10:14,078
you get the idea right so we need to

279
00:10:12,559 --> 00:10:16,399
make sure all of this stuff

280
00:10:14,078 --> 00:10:18,239
actually ends up meaning something that

281
00:10:16,399 --> 00:10:21,440
we actually care about

282
00:10:18,240 --> 00:10:23,120
um and you know i think it's roughly

283
00:10:21,440 --> 00:10:33,839
sort of where it needs to be

284
00:10:23,120 --> 00:10:33,839
but we'll play around with it

285
00:10:38,879 --> 00:10:44,399
okay um so yeah

286
00:10:42,159 --> 00:10:45,600
so moving on let's just take a look i

287
00:10:44,399 --> 00:10:50,720
don't know

288
00:10:45,600 --> 00:10:50,720
um where exactly we are in terms of

289
00:10:50,958 --> 00:10:55,039
of actually like running stuff here but

290
00:10:54,000 --> 00:10:55,759
i think what we were in the middle of

291
00:10:55,039 --> 00:10:58,078
doing

292
00:10:55,759 --> 00:11:00,799
at the end of last week was just looking

293
00:10:58,078 --> 00:11:02,719
through all of our usage code here

294
00:11:00,799 --> 00:11:03,919
and converting it to something that

295
00:11:02,720 --> 00:11:07,120
makes sense

296
00:11:03,919 --> 00:11:08,559
from uh the standpoint of the new tag

297
00:11:07,120 --> 00:11:11,120
system

298
00:11:08,559 --> 00:11:12,078
so if you take a look here you can kind

299
00:11:11,120 --> 00:11:13,839
of see that we've got

300
00:11:12,078 --> 00:11:15,278
two of these things here and we were

301
00:11:13,839 --> 00:11:18,000
doing like an ad tag

302
00:11:15,278 --> 00:11:18,000
thing oops

303
00:11:18,799 --> 00:11:23,120
i've got to fix that too let's just fix

304
00:11:20,639 --> 00:11:27,360
to it let's just fix that one so

305
00:11:23,120 --> 00:11:28,720
because it it kills me every time um

306
00:11:27,360 --> 00:11:30,399
let's go in here and just into our

307
00:11:28,720 --> 00:11:33,920
bindings file so that was just because

308
00:11:30,399 --> 00:11:37,679
j doesn't work everywhere

309
00:11:33,919 --> 00:11:39,679
um so this

310
00:11:37,679 --> 00:11:42,239
needs to work like everywhere in all

311
00:11:39,679 --> 00:11:43,679
files not just code files was there

312
00:11:42,240 --> 00:11:46,000
anything else that needed that

313
00:11:43,679 --> 00:11:46,000
um

314
00:11:47,600 --> 00:11:53,759
doesn't look like it so let me just move

315
00:11:51,360 --> 00:11:53,759
that up

316
00:11:53,919 --> 00:11:57,838
and put that in here

317
00:11:58,879 --> 00:12:05,600
i think it would be jump or

318
00:12:02,480 --> 00:12:07,600
there it is um so

319
00:12:05,600 --> 00:12:09,519
also while we're in here what's the key

320
00:12:07,600 --> 00:12:11,440
what's the key command for expanding the

321
00:12:09,519 --> 00:12:14,399
compilation window

322
00:12:11,440 --> 00:12:16,000
um because i would bind that to insert

323
00:12:14,399 --> 00:12:19,200
as well

324
00:12:16,000 --> 00:12:23,120
while we're at it so like something

325
00:12:19,200 --> 00:12:27,519
would be insert like

326
00:12:23,120 --> 00:12:30,639
flurry expand compilation

327
00:12:27,519 --> 00:12:34,639
window or something

328
00:12:30,639 --> 00:12:34,639
flurry toggle compilation expand

329
00:12:37,600 --> 00:12:39,839
all right

330
00:12:40,720 --> 00:12:46,800
um so let's go ahead and

331
00:12:43,839 --> 00:12:46,800
see how that goes

332
00:12:47,519 --> 00:12:54,720
and if i um

333
00:12:51,679 --> 00:12:58,239
now go to here j works perfect

334
00:12:54,720 --> 00:13:02,399
uh and also yeah

335
00:12:58,240 --> 00:13:05,440
all right that's pretty cool um

336
00:13:02,399 --> 00:13:06,480
okay so if i want to go to this add tag

337
00:13:05,440 --> 00:13:08,720
function

338
00:13:06,480 --> 00:13:08,720
um

339
00:13:10,078 --> 00:13:15,599
so that's i don't

340
00:13:13,278 --> 00:13:17,838
i don't know that we ever actually want

341
00:13:15,600 --> 00:13:20,240
that anymore anyway

342
00:13:17,839 --> 00:13:21,760
like add tag is probably just not a

343
00:13:20,240 --> 00:13:25,839
thing we ever need to

344
00:13:21,759 --> 00:13:25,838
do um

345
00:13:27,200 --> 00:13:34,639
and like in here where we're doing ad

346
00:13:30,240 --> 00:13:38,320
piece and that takes an asset tag hash

347
00:13:34,639 --> 00:13:41,759
um i'm assuming that yeah like that

348
00:13:38,320 --> 00:13:47,199
can just be nulled out

349
00:13:41,759 --> 00:13:47,198
um and so i don't actually know

350
00:13:47,519 --> 00:13:52,720
what happens these days let's just let

351
00:13:50,639 --> 00:13:58,799
me just see

352
00:13:52,720 --> 00:13:58,800
oh man so wait that actually works

353
00:14:01,278 --> 00:14:04,639
how is that possible

354
00:14:07,600 --> 00:14:11,920
that is so confusing that that works

355
00:14:12,240 --> 00:14:20,879
like that that works

356
00:14:17,120 --> 00:14:25,039
there's just okay

357
00:14:20,879 --> 00:14:25,039
someone explained me this

358
00:14:25,440 --> 00:14:31,839
in the land of the c plus ridiculous

359
00:14:28,839 --> 00:14:31,839
nonsense

360
00:14:32,078 --> 00:14:38,638
so you're telling me that if i

361
00:14:35,440 --> 00:14:42,320
in here was to say

362
00:14:38,639 --> 00:14:44,159
right like you know i don't know like

363
00:14:42,320 --> 00:14:45,440
what's what's the highest warning level

364
00:14:44,159 --> 00:14:49,519
i can ask for

365
00:14:45,440 --> 00:14:51,760
w all maybe be it um

366
00:14:49,519 --> 00:14:54,000
i'm not sure but like let's go ahead and

367
00:14:51,759 --> 00:14:55,600
take like the most pedantic compiler in

368
00:14:54,000 --> 00:14:59,278
the universe

369
00:14:55,600 --> 00:15:02,079
um clang

370
00:14:59,278 --> 00:15:05,679
uh and and let's let me let me just just

371
00:15:02,078 --> 00:15:08,799
verify this so if i have a structure

372
00:15:05,679 --> 00:15:12,239
um in here and i say like

373
00:15:08,799 --> 00:15:15,120
okay like in x and then i say that i'm

374
00:15:12,240 --> 00:15:18,399
going to have my square function

375
00:15:15,120 --> 00:15:24,879
actually takes a foo

376
00:15:18,399 --> 00:15:24,879
um so here's my new square function

377
00:15:25,039 --> 00:15:28,559
so you're telling me that if i have some

378
00:15:27,759 --> 00:15:31,919
other thing

379
00:15:28,559 --> 00:15:35,518
over here and i say like

380
00:15:31,919 --> 00:15:38,879
there's a foo right

381
00:15:35,519 --> 00:15:40,000
like that and i would call the square

382
00:15:38,879 --> 00:15:43,039
function on it

383
00:15:40,000 --> 00:15:45,600
like so that that would work but so

384
00:15:43,039 --> 00:15:45,599
would this

385
00:15:47,440 --> 00:15:51,360
how is that possible because correct me

386
00:15:50,320 --> 00:15:53,360
if i'm wrong

387
00:15:51,360 --> 00:15:55,199
but like other stuff that would

388
00:15:53,360 --> 00:15:58,079
obviously should work

389
00:15:55,198 --> 00:16:00,719
if you had the ability to look up the

390
00:15:58,078 --> 00:16:02,638
parameter of a function

391
00:16:00,720 --> 00:16:03,759
and use its type information in your

392
00:16:02,639 --> 00:16:09,839
language

393
00:16:03,759 --> 00:16:09,839
wouldn't this work

394
00:16:14,799 --> 00:16:18,000
i'm so confused right now

395
00:16:20,839 --> 00:16:23,839
uh

396
00:16:25,039 --> 00:16:29,278
what's the thing that i want to try we

397
00:16:26,720 --> 00:16:32,480
went over this just the other day

398
00:16:29,278 --> 00:16:37,838
it's the looking up in the space oh the

399
00:16:32,480 --> 00:16:37,839
name place yeah

400
00:16:49,839 --> 00:16:51,920
you

401
00:17:18,640 --> 00:17:22,559
i'm so confused

402
00:17:26,880 --> 00:17:33,360
yes so i i don't understand so they

403
00:17:30,160 --> 00:17:33,840
have the idea that you can look up that

404
00:17:33,359 --> 00:17:37,038
that

405
00:17:33,839 --> 00:17:38,000
the compiler knows what type this must

406
00:17:37,038 --> 00:17:40,240
have been

407
00:17:38,000 --> 00:17:41,359
because the only way for it to process

408
00:17:40,240 --> 00:17:43,359
this properly

409
00:17:41,359 --> 00:17:44,639
was to look up and figure out what ad

410
00:17:43,359 --> 00:17:48,079
piece was and then

411
00:17:44,640 --> 00:17:52,400
know that the blank thing that it needed

412
00:17:48,079 --> 00:17:54,639
was an asset tag hash right

413
00:17:52,400 --> 00:17:55,440
so when you call something in a

414
00:17:54,640 --> 00:17:57,200
namespace

415
00:17:55,440 --> 00:17:58,640
how come it can't look that up in the

416
00:17:57,200 --> 00:18:03,679
namespace

417
00:17:58,640 --> 00:18:03,679
how come you have to do that still

418
00:18:04,558 --> 00:18:10,558
right like what is the what is the point

419
00:18:08,240 --> 00:18:10,558
of that

420
00:18:13,759 --> 00:18:17,919
furthermore the the lookup looks works

421
00:18:16,000 --> 00:18:29,759
the opposite way oops i didn't

422
00:18:17,919 --> 00:18:32,960
mean to do that i meant that

423
00:18:29,759 --> 00:18:36,160
you can do this because of konig lookup

424
00:18:32,960 --> 00:18:39,440
right that will work

425
00:18:36,160 --> 00:18:39,440
i should probably return here

426
00:18:40,400 --> 00:18:44,559
like that will work it will go oh square

427
00:18:43,200 --> 00:18:45,919
came from this namespace because the

428
00:18:44,558 --> 00:18:49,839
parameter came through

429
00:18:45,919 --> 00:18:49,840
but this doesn't

430
00:18:52,480 --> 00:18:57,839
so weird

431
00:19:02,240 --> 00:19:05,279
like it's the opposite one that i would

432
00:19:04,400 --> 00:19:07,280
want

433
00:19:05,279 --> 00:19:08,879
right like if i had to pick between

434
00:19:07,279 --> 00:19:12,960
these two i'd want

435
00:19:08,880 --> 00:19:16,240
i'd want um that one to work

436
00:19:12,960 --> 00:19:17,600
and that one not to work just if i

437
00:19:16,240 --> 00:19:19,359
thought about it for a second i'd be

438
00:19:17,599 --> 00:19:24,000
like yeah if i had to pick

439
00:19:19,359 --> 00:19:27,599
but that's just really strange that that

440
00:19:24,000 --> 00:19:32,000
doesn't work um

441
00:19:27,599 --> 00:19:32,240
but but this does like it does go look

442
00:19:32,000 --> 00:19:36,000
up

443
00:19:32,240 --> 00:19:38,480
like what that thing was god

444
00:19:36,000 --> 00:19:40,240
c plus plus it never ceases to amaze me

445
00:19:38,480 --> 00:19:42,319
like they always

446
00:19:40,240 --> 00:19:43,519
manage to like half implement everything

447
00:19:42,319 --> 00:19:45,279
it's so strange

448
00:19:43,519 --> 00:19:47,599
like they just have no idea what they're

449
00:19:45,279 --> 00:19:47,599
doing

450
00:19:47,759 --> 00:19:51,839
well okay i mean i guess it's cool

451
00:19:49,440 --> 00:19:53,440
though that at least we can do this now

452
00:19:51,839 --> 00:19:54,798
i just always assume that you couldn't

453
00:19:53,440 --> 00:19:56,320
do that because i'm like well if they

454
00:19:54,798 --> 00:19:57,440
could look up by parameter then these

455
00:19:56,319 --> 00:19:58,079
other things would work that i know

456
00:19:57,440 --> 00:19:59,679
don't work

457
00:19:58,079 --> 00:20:02,720
so i never even thought to try it but it

458
00:19:59,679 --> 00:20:06,320
looks like it does now

459
00:20:02,720 --> 00:20:08,798
which is great

460
00:20:06,319 --> 00:20:10,079
are too bad they like they can only ever

461
00:20:08,798 --> 00:20:12,558
half implement stuff

462
00:20:10,079 --> 00:20:12,558
i guess

463
00:20:14,640 --> 00:20:21,840
all right

464
00:20:30,558 --> 00:20:36,879
yuck anyway um so

465
00:20:33,599 --> 00:20:38,480
let's just go ahead and uh

466
00:20:36,880 --> 00:20:40,400
go back to what we're doing and try not

467
00:20:38,480 --> 00:20:42,960
to be too upset about how awful c

468
00:20:40,400 --> 00:20:44,480
plus is all the time uh so we want to do

469
00:20:42,960 --> 00:20:45,600
a tag hash here and you can see that

470
00:20:44,480 --> 00:20:50,000
we've got like

471
00:20:45,599 --> 00:20:53,119
body head item hand and whatever right

472
00:20:50,000 --> 00:20:56,558
and if we look at the

473
00:20:53,119 --> 00:20:57,918
um the asset stuff here you can kind of

474
00:20:56,558 --> 00:21:00,319
see that there's like a thing that we

475
00:20:57,919 --> 00:21:03,360
want to be able to do

476
00:21:00,319 --> 00:21:03,918
and it makes me think like i probably

477
00:21:03,359 --> 00:21:07,439
want so

478
00:21:03,919 --> 00:21:10,880
so much the way this part here uh

479
00:21:07,440 --> 00:21:11,519
allows you to sort of change or or i

480
00:21:10,880 --> 00:21:16,320
shouldn't say

481
00:21:11,519 --> 00:21:19,440
change to get uh the to

482
00:21:16,319 --> 00:21:22,079
to get a tag hash

483
00:21:19,440 --> 00:21:22,720
by using a basic category and then some

484
00:21:22,079 --> 00:21:25,359
exists

485
00:21:22,720 --> 00:21:27,038
existing hash i feel like we probably

486
00:21:25,359 --> 00:21:30,399
want something similar

487
00:21:27,038 --> 00:21:35,119
for like doing basic changes because

488
00:21:30,400 --> 00:21:36,960
um well i mean i guess in this case we

489
00:21:35,119 --> 00:21:39,119
it looks like we actually only need just

490
00:21:36,960 --> 00:21:40,558
that one part so

491
00:21:39,119 --> 00:21:42,639
yeah so i guess we don't have to worry

492
00:21:40,558 --> 00:21:44,158
right now but in the future i'm thinking

493
00:21:42,640 --> 00:21:46,640
we probably want one that allows us to

494
00:21:44,159 --> 00:21:48,960
change targeted ones of these

495
00:21:46,640 --> 00:21:51,038
uh probably in other ways i'm not sure

496
00:21:48,960 --> 00:21:52,400
though so we may want something a little

497
00:21:51,038 --> 00:21:54,240
fancier here

498
00:21:52,400 --> 00:21:55,679
eventually for right now it looks like

499
00:21:54,240 --> 00:21:58,558
it just works

500
00:21:55,679 --> 00:21:59,360
um we just put like tag orphan tag hero

501
00:21:58,558 --> 00:22:04,240
there

502
00:21:59,359 --> 00:22:07,439
um and we leave the basic asset category

503
00:22:04,240 --> 00:22:10,159
as like asset none um

504
00:22:07,440 --> 00:22:11,600
and we can delete these now the that

505
00:22:10,159 --> 00:22:15,600
part about it's

506
00:22:11,599 --> 00:22:18,399
where we've got the um

507
00:22:15,599 --> 00:22:19,199
like looking at the whether it's orphan

508
00:22:18,400 --> 00:22:21,360
hero or whatever

509
00:22:19,200 --> 00:22:22,558
i just want to look as i don't remember

510
00:22:21,359 --> 00:22:23,199
even though we just looked at it i

511
00:22:22,558 --> 00:22:25,440
wasn't paying

512
00:22:23,200 --> 00:22:26,798
very close attention to that part of it

513
00:22:25,440 --> 00:22:28,880
i just want to make sure it's actually

514
00:22:26,798 --> 00:22:32,158
orphan hero yeah it is

515
00:22:28,880 --> 00:22:33,520
so we don't really need this um we can

516
00:22:32,159 --> 00:22:36,159
just get rid of that

517
00:22:33,519 --> 00:22:37,918
and we can do the same thing here so we

518
00:22:36,159 --> 00:22:40,960
can have

519
00:22:37,919 --> 00:22:44,640
an asset tag hash that's made for

520
00:22:40,960 --> 00:22:49,200
the hero and we can have an asset um

521
00:22:44,640 --> 00:22:49,200
tag hash that's made for the glove

522
00:22:49,679 --> 00:22:56,159
and in both cases uh we can just leave

523
00:22:53,759 --> 00:22:58,000
the you know this part of it out this is

524
00:22:56,159 --> 00:23:00,960
i guess glove with fingers

525
00:22:58,000 --> 00:23:02,000
is what that is and so if we get rid of

526
00:23:00,960 --> 00:23:05,200
that part of it

527
00:23:02,000 --> 00:23:07,200
and put uh when we do this part here

528
00:23:05,200 --> 00:23:08,558
we now just have to switch out what the

529
00:23:07,200 --> 00:23:13,679
type of the asset is

530
00:23:08,558 --> 00:23:13,678
so we can just do get asset tag um

531
00:23:15,440 --> 00:23:18,558
get tag hash sorry

532
00:23:19,440 --> 00:23:24,400
and just swap right so each of these

533
00:23:22,960 --> 00:23:27,759
will just be a swap

534
00:23:24,400 --> 00:23:29,600
on the thing on the type of thing we're

535
00:23:27,759 --> 00:23:30,720
looking for but leaving the tags the

536
00:23:29,599 --> 00:23:33,918
same

537
00:23:30,720 --> 00:23:38,159
um so here's the like hero tags

538
00:23:33,919 --> 00:23:38,159
and the glove tags oops

539
00:23:45,278 --> 00:23:51,440
um and yeah

540
00:23:49,038 --> 00:23:53,278
look at that look at look at how smooth

541
00:23:51,440 --> 00:23:56,480
kind of stylish

542
00:23:53,278 --> 00:23:59,359
all right um

543
00:23:56,480 --> 00:24:01,519
you know also i should i don't want to

544
00:23:59,359 --> 00:24:04,959
spoil the surprise

545
00:24:01,519 --> 00:24:08,158
wait till next weekend um all right so

546
00:24:04,960 --> 00:24:11,360
uh let's go ahead and

547
00:24:08,159 --> 00:24:15,039
just do this for everything so

548
00:24:11,359 --> 00:24:19,839
here's us creating stuff

549
00:24:15,038 --> 00:24:19,839
and we're putting in a scenery tag

550
00:24:20,000 --> 00:24:27,278
or a scenery asset type

551
00:24:23,038 --> 00:24:27,278
and i don't know

552
00:24:28,079 --> 00:24:34,798
what that would do because

553
00:24:31,759 --> 00:24:38,240
anymore because when someone actually

554
00:24:34,798 --> 00:24:38,798
goes to use this inanimate it's gonna

555
00:24:38,240 --> 00:24:42,640
have to

556
00:24:38,798 --> 00:24:46,319
set that part separately anyway

557
00:24:42,640 --> 00:24:50,320
so i'm pretty sure we just don't care

558
00:24:46,319 --> 00:24:54,240
about that at all right

559
00:24:50,319 --> 00:24:55,359
um and so i'm assuming what we'd want to

560
00:24:54,240 --> 00:24:58,880
start doing here

561
00:24:55,359 --> 00:25:01,839
is passing in so in the gen crate entity

562
00:24:58,880 --> 00:25:01,840
um

563
00:25:02,000 --> 00:25:06,798
so in the gen create any macro here

564
00:25:04,640 --> 00:25:08,720
right where it's getting this sim region

565
00:25:06,798 --> 00:25:10,079
um i'm assuming what we would want to do

566
00:25:08,720 --> 00:25:12,960
here is like pass

567
00:25:10,079 --> 00:25:15,599
in the asset tags that we actually want

568
00:25:12,960 --> 00:25:20,000
to use um

569
00:25:15,599 --> 00:25:24,240
that would be my assumption and and like

570
00:25:20,000 --> 00:25:27,599
uh like this crap here is

571
00:25:24,240 --> 00:25:29,440
pointless and we don't need it um so i

572
00:25:27,599 --> 00:25:30,158
feel like we can just kind of like fix

573
00:25:29,440 --> 00:25:33,519
that

574
00:25:30,159 --> 00:25:36,880
part of it um

575
00:25:33,519 --> 00:25:39,038
but i don't know so let's

576
00:25:36,880 --> 00:25:40,880
let's look at the calling code for this

577
00:25:39,038 --> 00:25:44,400
first

578
00:25:40,880 --> 00:25:47,919
and make sure that we have a reasonable

579
00:25:44,400 --> 00:25:50,720
like you know sort of feel for

580
00:25:47,919 --> 00:25:52,159
what we want to have happen there just

581
00:25:50,720 --> 00:25:53,679
because i don't know

582
00:25:52,159 --> 00:25:56,240
you know what that's what that really

583
00:25:53,679 --> 00:25:56,559
looks like so presumably that's going to

584
00:25:56,240 --> 00:26:00,798
be

585
00:25:56,558 --> 00:26:03,839
in room gen um and

586
00:26:00,798 --> 00:26:06,639
when we're adding these sorts of things

587
00:26:03,839 --> 00:26:08,319
there's going to be like some kind of

588
00:26:06,640 --> 00:26:10,080
call that we're going to make right

589
00:26:08,319 --> 00:26:12,319
and we haven't looked at this code in a

590
00:26:10,079 --> 00:26:13,759
while so i don't remember much about the

591
00:26:12,319 --> 00:26:15,599
specifics but

592
00:26:13,759 --> 00:26:17,440
we sort of have this idea that there's

593
00:26:15,599 --> 00:26:20,558
just like a um a function

594
00:26:17,440 --> 00:26:22,400
pointer um that's you know someone can

595
00:26:20,558 --> 00:26:23,918
load up like what you're adding and then

596
00:26:22,400 --> 00:26:26,320
you just call add on it and you don't

597
00:26:23,919 --> 00:26:27,840
really have to know what you were adding

598
00:26:26,319 --> 00:26:29,839
uh i think that was made to like

599
00:26:27,839 --> 00:26:32,399
facilitate

600
00:26:29,839 --> 00:26:33,199
use in here where we're we're doing tag

601
00:26:32,400 --> 00:26:36,159
uh

602
00:26:33,200 --> 00:26:37,360
we would add tags to an entity um sort

603
00:26:36,159 --> 00:26:40,000
of after the fact

604
00:26:37,359 --> 00:26:40,399
right so i think what largely happens

605
00:26:40,000 --> 00:26:42,240
here

606
00:26:40,400 --> 00:26:44,400
is this kind of code like you do in add

607
00:26:42,240 --> 00:26:45,839
entity and then you add tags to the

608
00:26:44,400 --> 00:26:49,360
entity

609
00:26:45,839 --> 00:26:50,798
and at some point you then make a call

610
00:26:49,359 --> 00:26:53,119
to actually

611
00:26:50,798 --> 00:26:54,960
uh yeah like add tree tags or something

612
00:26:53,119 --> 00:26:57,119
to like put the tags in that are like

613
00:26:54,960 --> 00:27:00,558
what the thing was supposed to be

614
00:26:57,119 --> 00:27:04,839
right um and we may still want

615
00:27:00,558 --> 00:27:08,079
it to work that way i don't know uh

616
00:27:04,839 --> 00:27:08,079
but we

617
00:27:11,519 --> 00:27:15,200
we're changing from a system where the

618
00:27:14,240 --> 00:27:17,679
entity has

619
00:27:15,200 --> 00:27:20,558
a series of tags on it and then each

620
00:27:17,679 --> 00:27:21,038
piece just has an asset type to having

621
00:27:20,558 --> 00:27:22,960
each

622
00:27:21,038 --> 00:27:24,640
piece of the entity can specify

623
00:27:22,960 --> 00:27:26,558
everything itself so

624
00:27:24,640 --> 00:27:28,320
i just don't know whether we need to

625
00:27:26,558 --> 00:27:29,278
make something that then goes and stamps

626
00:27:28,319 --> 00:27:32,639
the pieces

627
00:27:29,278 --> 00:27:34,480
with those additional tags or whether

628
00:27:32,640 --> 00:27:36,000
the reason we did it that way

629
00:27:34,480 --> 00:27:39,278
was just a vestigial remain because

630
00:27:36,000 --> 00:27:41,519
that's the way it actually happens

631
00:27:39,278 --> 00:27:41,519
uh

632
00:27:44,000 --> 00:27:47,599
because we want because that's actually

633
00:27:45,759 --> 00:27:50,720
the good thing right

634
00:27:47,599 --> 00:27:51,759
so just want to find uh where that

635
00:27:50,720 --> 00:27:54,480
particular code

636
00:27:51,759 --> 00:27:55,519
gets called for the callback and then

637
00:27:54,480 --> 00:27:58,399
we'll look

638
00:27:55,519 --> 00:27:59,599
um we'll look at that in a little bit

639
00:27:58,398 --> 00:28:02,639
more detail

640
00:27:59,599 --> 00:28:16,079
okay so if we look in here where we do

641
00:28:02,640 --> 00:28:19,520
generate room

642
00:28:16,079 --> 00:28:22,079
the create entity function itself

643
00:28:19,519 --> 00:28:22,720
doesn't actually do this right so it's

644
00:28:22,079 --> 00:28:25,839
going to be

645
00:28:22,720 --> 00:28:29,440
like a helper function to

646
00:28:25,839 --> 00:28:31,839
uh to that right that gets called and in

647
00:28:29,440 --> 00:28:35,440
fact these

648
00:28:31,839 --> 00:28:45,839
call add entity um

649
00:28:35,440 --> 00:28:45,840
not create entity

650
00:28:48,000 --> 00:28:51,059
so yeah like if you look at how this

651
00:28:49,919 --> 00:28:53,200
works um

652
00:28:51,059 --> 00:28:55,839
[Music]

653
00:28:53,200 --> 00:28:57,360
none of these calls actually touch that

654
00:28:55,839 --> 00:29:00,480
piece of it right they all

655
00:28:57,359 --> 00:29:03,519
just so this would have been called like

656
00:29:00,480 --> 00:29:07,679
earth at the earliest in the chain

657
00:29:03,519 --> 00:29:07,679
um and that function

658
00:29:09,519 --> 00:29:15,918
where's the macro here it is um

659
00:29:12,720 --> 00:29:19,440
that gen create entity type

660
00:29:15,919 --> 00:29:19,440
i'm gonna look for that here

661
00:29:23,759 --> 00:29:27,278
all right so if we look at the gen

662
00:29:25,519 --> 00:29:31,759
create entity type

663
00:29:27,278 --> 00:29:36,000
you can see this function here is

664
00:29:31,759 --> 00:29:37,919
yeah is like placing a record

665
00:29:36,000 --> 00:29:39,200
that like you wanted to generate this

666
00:29:37,919 --> 00:29:41,120
type of entity

667
00:29:39,200 --> 00:29:43,038
and then presumably we just retire these

668
00:29:41,119 --> 00:29:47,199
like in order

669
00:29:43,038 --> 00:29:49,599
yeah okay so i mean honestly

670
00:29:47,200 --> 00:29:51,200
we probably can just leave this working

671
00:29:49,599 --> 00:29:53,918
exactly the way that it was

672
00:29:51,200 --> 00:29:55,600
so like in here where we've got this

673
00:29:53,919 --> 00:29:57,360
nonsense happening

674
00:29:55,599 --> 00:29:58,639
we can just say look you get four of

675
00:29:57,359 --> 00:30:02,398
these and

676
00:29:58,640 --> 00:30:04,000
when you do the add tag function

677
00:30:02,398 --> 00:30:05,599
we just record which ones you were

678
00:30:04,000 --> 00:30:09,200
adding um

679
00:30:05,599 --> 00:30:11,359
so like right here

680
00:30:09,200 --> 00:30:12,240
um this code would still work the same

681
00:30:11,359 --> 00:30:14,398
way

682
00:30:12,240 --> 00:30:16,640
except for the fact that it wouldn't put

683
00:30:14,398 --> 00:30:20,000
in this value

684
00:30:16,640 --> 00:30:22,480
here right so

685
00:30:20,000 --> 00:30:24,240
and where that would actually come from

686
00:30:22,480 --> 00:30:27,759
i'm not sure because

687
00:30:24,240 --> 00:30:32,640
we like presumably we want to still

688
00:30:27,759 --> 00:30:32,640
have the like four wide

689
00:30:33,038 --> 00:30:38,558
assets selector that's actually coming

690
00:30:37,038 --> 00:30:41,919
from the

691
00:30:38,558 --> 00:30:41,918
thing itself though so

692
00:30:42,720 --> 00:30:46,798
the only thing that wouldn't work with

693
00:30:44,558 --> 00:30:51,839
would be variance

694
00:30:46,798 --> 00:30:51,839
so that part is a little bit

695
00:30:53,038 --> 00:30:55,759
meow

696
00:30:59,759 --> 00:31:03,359
so i i that's the only part i'm not 100

697
00:31:02,640 --> 00:31:05,919
sure about

698
00:31:03,359 --> 00:31:08,158
i want to look and see like what are all

699
00:31:05,919 --> 00:31:11,679
the places where ad tag

700
00:31:08,159 --> 00:31:13,278
is used for that um and i just want to

701
00:31:11,679 --> 00:31:15,200
look and see

702
00:31:13,278 --> 00:31:16,398
so like here's the part that's going to

703
00:31:15,200 --> 00:31:17,679
be bad like

704
00:31:16,398 --> 00:31:19,518
this is the part that we have to figure

705
00:31:17,679 --> 00:31:22,159
out how we want to tackle

706
00:31:19,519 --> 00:31:24,000
so in terms of adding like variants here

707
00:31:22,159 --> 00:31:26,799
where we just want to be able to like

708
00:31:24,000 --> 00:31:26,798
randomize

709
00:31:30,839 --> 00:31:33,839
stuff

710
00:31:36,960 --> 00:31:46,480
that part is the only part that like i'm

711
00:31:39,679 --> 00:31:50,080
not sure about

712
00:31:46,480 --> 00:31:54,240
so like if you imagine going back to

713
00:31:50,079 --> 00:31:56,879
uh the andy gen stuff

714
00:31:54,240 --> 00:31:58,399
i'm i'm sorry no in the entity code

715
00:31:56,880 --> 00:31:59,519
right you remember how this stuff was

716
00:31:58,398 --> 00:32:01,839
going

717
00:31:59,519 --> 00:32:01,839
um

718
00:32:03,038 --> 00:32:06,158
so we have like

719
00:32:09,200 --> 00:32:12,960
we have this notion that like in here

720
00:32:11,679 --> 00:32:16,080
when we come

721
00:32:12,960 --> 00:32:19,440
into the update and render entities like

722
00:32:16,079 --> 00:32:22,798
you know we process this stuff

723
00:32:19,440 --> 00:32:23,440
and then we come down to this part where

724
00:32:22,798 --> 00:32:26,960
we're going to do

725
00:32:23,440 --> 00:32:30,000
the get best best match bitmap from

726
00:32:26,960 --> 00:32:33,120
and we had this like facing direction

727
00:32:30,000 --> 00:32:33,519
stuff that we were doing here yeah to

728
00:32:33,119 --> 00:32:36,879
make

729
00:32:33,519 --> 00:32:40,319
this match vector right

730
00:32:36,880 --> 00:32:42,480
and so the thing that i'm like

731
00:32:40,319 --> 00:32:44,480
the part that i'm just like not sure how

732
00:32:42,480 --> 00:32:48,480
we want to do

733
00:32:44,480 --> 00:32:51,599
is like how does that

734
00:32:48,480 --> 00:32:52,798
how does that combine like in a sensible

735
00:32:51,599 --> 00:32:57,839
way

736
00:32:52,798 --> 00:32:57,839
uh with with the um

737
00:32:58,240 --> 00:33:12,240
with the piece we had before

738
00:33:10,398 --> 00:33:14,158
so that you know like the tag hash comes

739
00:33:12,240 --> 00:33:15,599
from here and then the match vector

740
00:33:14,159 --> 00:33:17,278
comes from here

741
00:33:15,599 --> 00:33:19,119
and you know i'm just thinking that

742
00:33:17,278 --> 00:33:22,798
through and i'm like so

743
00:33:19,119 --> 00:33:26,479
so actually though don't we want the

744
00:33:22,798 --> 00:33:29,679
visible piece to also have

745
00:33:26,480 --> 00:33:33,038
a match vector

746
00:33:29,679 --> 00:33:36,480
and this match vector is just

747
00:33:33,038 --> 00:33:38,960
merged with that match vector right

748
00:33:36,480 --> 00:33:40,640
because whatever that match vector is

749
00:33:38,960 --> 00:33:45,360
supposed to be

750
00:33:40,640 --> 00:33:47,519
like the at least the variant part

751
00:33:45,359 --> 00:33:48,798
is supposed to kind of get shoved in

752
00:33:47,519 --> 00:33:50,640
there

753
00:33:48,798 --> 00:33:52,158
i mean at least one thing we would at

754
00:33:50,640 --> 00:33:55,120
least say is that

755
00:33:52,159 --> 00:33:55,120
the variant

756
00:33:56,159 --> 00:34:03,120
the variant would want to be encoded in

757
00:33:59,359 --> 00:34:08,239
in this entity visible piece part

758
00:34:03,119 --> 00:34:08,239
if nothing else i think

759
00:34:09,280 --> 00:34:13,280
i mean the other way to do it would be

760
00:34:10,559 --> 00:34:15,039
to put the variant on the entity

761
00:34:13,280 --> 00:34:17,040
but i'm not sure why you would bother

762
00:34:15,039 --> 00:34:18,960
with that because presumably you would

763
00:34:17,039 --> 00:34:20,559
like the ability to have the different

764
00:34:18,960 --> 00:34:22,320
parts of an entity each be different

765
00:34:20,559 --> 00:34:23,918
variants

766
00:34:22,320 --> 00:34:25,519
of whatever the thing is that they are

767
00:34:23,918 --> 00:34:27,598
without having them to all be the same

768
00:34:25,519 --> 00:34:35,838
variant for any particular reason

769
00:34:27,599 --> 00:34:35,838
but i guess i don't know

770
00:34:46,838 --> 00:34:49,918
um

771
00:34:48,159 --> 00:34:51,519
so that's a tough call and i don't know

772
00:34:49,918 --> 00:35:03,838
the answer to that question

773
00:34:51,519 --> 00:35:03,838
um and

774
00:35:14,239 --> 00:35:17,759
if we look at something like variant

775
00:35:16,239 --> 00:35:19,358
mapping

776
00:35:17,760 --> 00:35:21,200
you know we could imagine going like

777
00:35:19,358 --> 00:35:22,880
what's the total number of variants that

778
00:35:21,199 --> 00:35:31,519
something has

779
00:35:22,880 --> 00:35:32,960
and presumably it's you know um

780
00:35:31,519 --> 00:35:45,838
presumably it's something like pretty

781
00:35:32,960 --> 00:35:45,838
large right

782
00:35:52,480 --> 00:35:59,838
yeah i just don't know i just don't know

783
00:36:03,760 --> 00:36:07,119
so i want to think about this a little

784
00:36:06,400 --> 00:36:10,000
harder

785
00:36:07,119 --> 00:36:11,200
because i'm just not convinced that

786
00:36:10,000 --> 00:36:16,000
particular part

787
00:36:11,199 --> 00:36:16,000
is quite right um

788
00:36:17,358 --> 00:36:24,319
here's the get asset from thing

789
00:36:21,199 --> 00:36:27,919
um and if you

790
00:36:24,320 --> 00:36:28,800
look at the match anything so like we're

791
00:36:27,920 --> 00:36:30,639
going through

792
00:36:28,800 --> 00:36:31,839
and we're like knocking out particular

793
00:36:30,639 --> 00:36:33,838
matches so

794
00:36:31,838 --> 00:36:37,279
if you look at this part of the code

795
00:36:33,838 --> 00:36:37,279
like just this one part

796
00:36:38,838 --> 00:36:44,719
um

797
00:36:40,880 --> 00:36:47,119
you know i guess who's to say

798
00:36:44,719 --> 00:36:47,838
that this actually shouldn't just have

799
00:36:47,119 --> 00:36:51,358
remained

800
00:36:47,838 --> 00:36:52,838
working the exact same way that it used

801
00:36:51,358 --> 00:36:56,000
to

802
00:36:52,838 --> 00:36:59,199
like it occurs to me that like

803
00:36:56,000 --> 00:37:02,559
the best the like

804
00:36:59,199 --> 00:37:07,199
the matching of the thing

805
00:37:02,559 --> 00:37:07,199
by doing whatever is the closest one

806
00:37:07,599 --> 00:37:11,680
maybe isn't totally stupid

807
00:37:12,559 --> 00:37:16,320
because then you could just have the

808
00:37:15,199 --> 00:37:17,679
variance still be

809
00:37:16,320 --> 00:37:23,838
just a floating point number or

810
00:37:17,679 --> 00:37:23,838
something you know

811
00:37:28,559 --> 00:37:37,838
i'm just really not sure

812
00:38:17,358 --> 00:38:23,358
i'm gonna i'm gonna go ahead and say

813
00:38:20,159 --> 00:38:23,358
maybe we just do that

814
00:38:26,480 --> 00:38:29,920
because if you think about it we've

815
00:38:28,159 --> 00:38:32,639
completely gotten rid of the

816
00:38:29,920 --> 00:38:34,559
entire problem we had before of these

817
00:38:32,639 --> 00:38:38,319
things not being like

818
00:38:34,559 --> 00:38:41,599
like they wouldn't be fast enough right

819
00:38:38,320 --> 00:38:42,880
because this asset tag lookup will get

820
00:38:41,599 --> 00:38:45,680
us to

821
00:38:42,880 --> 00:38:46,720
a very small subset of the things that

822
00:38:45,679 --> 00:38:49,598
we need

823
00:38:46,719 --> 00:38:51,039
we can make the hash table as large as

824
00:38:49,599 --> 00:38:53,440
we want

825
00:38:51,039 --> 00:38:56,880
here and aes deck will give us a

826
00:38:53,440 --> 00:38:59,679
basically perfectly scrambled

827
00:38:56,880 --> 00:39:01,200
like we should have a perfect histogram

828
00:38:59,679 --> 00:39:02,559
right that comes out the other end of

829
00:39:01,199 --> 00:39:04,799
that

830
00:39:02,559 --> 00:39:04,799
um

831
00:39:11,920 --> 00:39:18,559
so i i want to say that we could just

832
00:39:15,119 --> 00:39:20,240
have left this in in the interior the

833
00:39:18,559 --> 00:39:23,279
same there

834
00:39:20,239 --> 00:39:25,039
um i

835
00:39:23,280 --> 00:39:26,839
want to say that i don't actually know

836
00:39:25,039 --> 00:39:30,800
that that's true of course

837
00:39:26,838 --> 00:39:32,880
um so let's see can we can we go into

838
00:39:30,800 --> 00:39:37,119
github here how do you sign in

839
00:39:32,880 --> 00:39:43,838
sign in we can go look at the old

840
00:39:37,119 --> 00:39:43,838
code uh and uh and see what happens

841
00:39:47,039 --> 00:39:50,400
where's the let's see

842
00:39:55,039 --> 00:40:00,800
so if we take a look at

843
00:39:58,079 --> 00:40:01,440
uh the the way this code was working

844
00:40:00,800 --> 00:40:04,880
right

845
00:40:01,440 --> 00:40:07,280
so in the you know in the actual

846
00:40:04,880 --> 00:40:08,079
old version of the asset code if we if

847
00:40:07,280 --> 00:40:10,640
we

848
00:40:08,079 --> 00:40:11,680
go back a little bit right like you know

849
00:40:10,639 --> 00:40:14,799
who cares

850
00:40:11,679 --> 00:40:17,118
something like this uh

851
00:40:14,800 --> 00:40:18,480
when we were doing sort of the look up

852
00:40:17,119 --> 00:40:20,240
version

853
00:40:18,480 --> 00:40:22,400
you know we use the weights and stuff

854
00:40:20,239 --> 00:40:25,039
which we don't really need because

855
00:40:22,400 --> 00:40:26,800
those don't have to be passed in they

856
00:40:25,039 --> 00:40:28,400
can become from the asset because the

857
00:40:26,800 --> 00:40:32,560
asset knows

858
00:40:28,400 --> 00:40:32,559
what you would be matching on right

859
00:40:32,639 --> 00:40:35,759
but if we look at the way this code used

860
00:40:34,159 --> 00:40:36,960
to work i'm wondering do we just run the

861
00:40:35,760 --> 00:40:39,680
same code again

862
00:40:36,960 --> 00:40:41,440
um i don't actually know it's probably

863
00:40:39,679 --> 00:40:44,159
in the h file isn't it

864
00:40:41,440 --> 00:40:45,679
in which case this is not what we

865
00:40:44,159 --> 00:40:47,759
actually want to do oh no there it was i

866
00:40:45,679 --> 00:40:53,838
was like literally just there

867
00:40:47,760 --> 00:40:53,839
so like if we look at this code

868
00:40:56,800 --> 00:41:01,519
i wonder if we just keep this code and

869
00:40:58,639 --> 00:41:01,519
get rid of the weight

870
00:41:03,358 --> 00:41:08,318
i mean seems like we just can

871
00:41:14,159 --> 00:41:19,759
it seems like that would just work

872
00:41:17,199 --> 00:41:20,480
right and i don't know maybe i'm missing

873
00:41:19,760 --> 00:41:22,480
something but

874
00:41:20,480 --> 00:41:24,719
it seems like maybe we should just keep

875
00:41:22,480 --> 00:41:24,719
that

876
00:41:24,880 --> 00:41:28,480
it's a tough call but you know like i

877
00:41:27,039 --> 00:41:30,000
said because it's sort of we're right at

878
00:41:28,480 --> 00:41:31,519
that point where now we want to actually

879
00:41:30,000 --> 00:41:32,838
do like the right thing here because we

880
00:41:31,519 --> 00:41:34,079
have enough information to make the

881
00:41:32,838 --> 00:41:35,679
decision

882
00:41:34,079 --> 00:41:38,000
it seems like we might as well just

883
00:41:35,679 --> 00:41:41,519
leave that and the reason i say that

884
00:41:38,000 --> 00:41:44,880
is because uh the

885
00:41:41,519 --> 00:41:44,880
so the usage of this

886
00:41:45,280 --> 00:41:52,160
we would like the code that picks random

887
00:41:49,440 --> 00:41:54,240
versions of things to not have to know

888
00:41:52,159 --> 00:41:56,159
how many random versions there were

889
00:41:54,239 --> 00:41:57,358
so that people can like add more over

890
00:41:56,159 --> 00:42:00,559
time if they want to

891
00:41:57,358 --> 00:42:02,559
and the code would still work right so

892
00:42:00,559 --> 00:42:05,679
in terms of things that actually

893
00:42:02,559 --> 00:42:09,519
want to have a variant value

894
00:42:05,679 --> 00:42:12,960
or gradient values it seems like we'd

895
00:42:09,519 --> 00:42:15,199
want those to be a thing

896
00:42:12,960 --> 00:42:17,440
and then we can i don't think it would

897
00:42:15,199 --> 00:42:19,118
really cost us anything to actually do

898
00:42:17,440 --> 00:42:20,559
the best match because we're only

899
00:42:19,119 --> 00:42:23,838
checking

900
00:42:20,559 --> 00:42:26,559
like four things um

901
00:42:23,838 --> 00:42:28,400
or ten things or something for that best

902
00:42:26,559 --> 00:42:31,440
match

903
00:42:28,400 --> 00:42:32,318
and that probably isn't too much based

904
00:42:31,440 --> 00:42:34,318
on

905
00:42:32,318 --> 00:42:36,480
the amount of horsepower that we have

906
00:42:34,318 --> 00:42:38,318
and the low number of sprites we're

907
00:42:36,480 --> 00:42:40,000
actually talking about

908
00:42:38,318 --> 00:42:42,000
i wouldn't think that it would be

909
00:42:40,000 --> 00:42:44,159
particularly expensive to do

910
00:42:42,000 --> 00:42:45,358
and i and that could be wrong

911
00:42:44,159 --> 00:42:47,759
[Music]

912
00:42:45,358 --> 00:42:47,759
um

913
00:42:51,039 --> 00:42:55,199
but i you know i just i don't expect

914
00:42:53,519 --> 00:42:58,159
this would be that costly

915
00:42:55,199 --> 00:43:00,719
i mean you know you're talking about a

916
00:42:58,159 --> 00:43:03,598
pretty small number of

917
00:43:00,719 --> 00:43:05,679
of actual like bitmaps on the screen at

918
00:43:03,599 --> 00:43:08,800
any given time typically

919
00:43:05,679 --> 00:43:10,719
and they can be baked so like when we do

920
00:43:08,800 --> 00:43:13,440
like the grasses and stuff

921
00:43:10,719 --> 00:43:14,480
when you generate grasses we actually

922
00:43:13,440 --> 00:43:17,760
just do that

923
00:43:14,480 --> 00:43:19,838
down to individual bitmap ids so at any

924
00:43:17,760 --> 00:43:22,160
given time you can cache

925
00:43:19,838 --> 00:43:26,239
the value if you were really worried

926
00:43:22,159 --> 00:43:29,279
about the speed of it

927
00:43:26,239 --> 00:43:32,078
so i might just say like let's try this

928
00:43:29,280 --> 00:43:32,079
um oops

929
00:43:32,559 --> 00:43:39,199
like let's just try doing it this way so

930
00:43:35,679 --> 00:43:42,159
let's just say like uh hey yeah there's

931
00:43:39,199 --> 00:43:45,279
like a match value that comes in here

932
00:43:42,159 --> 00:43:48,078
and like there'll be a weight value

933
00:43:45,280 --> 00:43:48,800
which is like the match any flags will

934
00:43:48,079 --> 00:43:52,720
tell us

935
00:43:48,800 --> 00:43:52,720
like what it is i guess so we'll we'll

936
00:43:52,838 --> 00:43:59,838
um we can use that

937
00:43:55,838 --> 00:44:02,960
feature to to like continue to do that

938
00:43:59,838 --> 00:44:05,519
that checking um and so when we

939
00:44:02,960 --> 00:44:06,079
when we do it we will do essentially

940
00:44:05,519 --> 00:44:09,119
this

941
00:44:06,079 --> 00:44:10,960
same thing here so we won't we won't do

942
00:44:09,119 --> 00:44:11,599
this part obviously or any of that or

943
00:44:10,960 --> 00:44:15,519
whatever

944
00:44:11,599 --> 00:44:19,838
but uh we will keep this part

945
00:44:15,519 --> 00:44:19,838
oops so we'll still do that

946
00:44:20,800 --> 00:44:25,359
where we have a way to knock out

947
00:44:22,719 --> 00:44:25,358
particular

948
00:44:28,400 --> 00:44:32,160
so we will have a match any flags thing

949
00:44:30,800 --> 00:44:35,440
and i guess what we'll do

950
00:44:32,159 --> 00:44:39,920
in the case where we do a match any um

951
00:44:35,440 --> 00:44:40,400
is and and this part we still always

952
00:44:39,920 --> 00:44:42,400
want

953
00:44:40,400 --> 00:44:44,559
right so we don't want to cons we don't

954
00:44:42,400 --> 00:44:47,200
want to contin consider someone at all

955
00:44:44,559 --> 00:44:49,199
who doesn't match the hash value if

956
00:44:47,199 --> 00:44:52,399
someone matches the hash value

957
00:44:49,199 --> 00:44:57,039
we then want to like sum up the

958
00:44:52,400 --> 00:44:59,280
level of matching that we got right

959
00:44:57,039 --> 00:44:59,279
so

960
00:45:02,400 --> 00:45:06,318
we would do something like that um and

961
00:45:05,519 --> 00:45:09,519
we would

962
00:45:06,318 --> 00:45:12,719
keep the check index

963
00:45:09,519 --> 00:45:16,838
as a result from the best match

964
00:45:12,719 --> 00:45:19,838
right um and we would

965
00:45:16,838 --> 00:45:19,838
want

966
00:45:22,159 --> 00:45:25,440
something like this

967
00:45:29,039 --> 00:45:34,559
yeah so okay

968
00:45:38,960 --> 00:45:43,280
so it would just loop through the assets

969
00:45:41,679 --> 00:45:47,039
in the tag hash

970
00:45:43,280 --> 00:45:49,040
right um and it would look at each one

971
00:45:47,039 --> 00:45:50,960
and then apply the same like matching we

972
00:45:49,039 --> 00:45:54,239
were doing before

973
00:45:50,960 --> 00:45:59,280
you know uh and so

974
00:45:54,239 --> 00:46:02,318
the match vector e e index here

975
00:45:59,280 --> 00:46:03,599
um is gonna pull that crap out the

976
00:46:02,318 --> 00:46:06,960
weighted version

977
00:46:03,599 --> 00:46:11,119
would not be a thing uh

978
00:46:06,960 --> 00:46:13,519
and so we would get rid of that

979
00:46:11,119 --> 00:46:14,720
uh and our only thing is here is this

980
00:46:13,519 --> 00:46:17,838
looks like it's going

981
00:46:14,719 --> 00:46:21,118
the other way around why

982
00:46:17,838 --> 00:46:28,480
do we do a one minus here when we could

983
00:46:21,119 --> 00:46:33,039
just take the largest value

984
00:46:28,480 --> 00:46:36,639
what so what's going on there so we say

985
00:46:33,039 --> 00:46:40,880
match vector and then we grab the tag

986
00:46:36,639 --> 00:46:44,960
um the tags version itself

987
00:46:40,880 --> 00:46:45,599
which um should be in the asset hash

988
00:46:44,960 --> 00:46:47,838
right

989
00:46:45,599 --> 00:46:47,838
like

990
00:46:52,559 --> 00:46:57,838
so it's gonna be like

991
00:46:58,800 --> 00:47:01,039
that

992
00:47:04,960 --> 00:47:09,838
so we have a and b and

993
00:47:08,318 --> 00:47:11,920
those are our two values that we're

994
00:47:09,838 --> 00:47:13,679
trying to see like which one is closest

995
00:47:11,920 --> 00:47:15,519
we look at the absolute difference

996
00:47:13,679 --> 00:47:20,078
between the two

997
00:47:15,519 --> 00:47:20,079
um we do like us map

998
00:47:20,400 --> 00:47:28,079
we do like a periodic domain

999
00:47:25,039 --> 00:47:31,119
mapping here and

1000
00:47:28,079 --> 00:47:34,318
again i'm not sure why we

1001
00:47:31,119 --> 00:47:36,880
do that because i don't know that we

1002
00:47:34,318 --> 00:47:38,318
really need to because we could have

1003
00:47:36,880 --> 00:47:41,760
just

1004
00:47:38,318 --> 00:47:43,279
mapped the thing properly when we

1005
00:47:41,760 --> 00:47:44,319
actually like we could have just f

1006
00:47:43,280 --> 00:47:49,119
modded the

1007
00:47:44,318 --> 00:47:53,838
direction properly so like this

1008
00:47:49,119 --> 00:47:53,838
seems stupid um

1009
00:48:00,880 --> 00:48:05,519
like this just seems ill advised like

1010
00:48:03,679 --> 00:48:07,039
that that doesn't really make a lot of

1011
00:48:05,519 --> 00:48:09,039
sense

1012
00:48:07,039 --> 00:48:10,719
but you know like okay we can leave it

1013
00:48:09,039 --> 00:48:14,639
that way for now

1014
00:48:10,719 --> 00:48:18,239
i suppose i don't know

1015
00:48:14,639 --> 00:48:20,159
it feels dumb um in fact

1016
00:48:18,239 --> 00:48:21,358
while we're doing this i i'm just gonna

1017
00:48:20,159 --> 00:48:24,639
go ahead and say like let's just

1018
00:48:21,358 --> 00:48:25,598
let's just not do that that's stupid um

1019
00:48:24,639 --> 00:48:29,598
so we have

1020
00:48:25,599 --> 00:48:32,318
these and we're gonna like

1021
00:48:29,599 --> 00:48:33,440
just say that's the difference value

1022
00:48:32,318 --> 00:48:37,920
right

1023
00:48:33,440 --> 00:48:42,159
so whatever the difference here is

1024
00:48:37,920 --> 00:48:44,960
uh we we add up all the differences

1025
00:48:42,159 --> 00:48:46,078
for anything where we at where we don't

1026
00:48:44,960 --> 00:48:48,318
match any

1027
00:48:46,079 --> 00:48:49,359
so this piece of code wants to actually

1028
00:48:48,318 --> 00:48:53,519
be negated

1029
00:48:49,358 --> 00:48:55,358
right like it wants to be like that

1030
00:48:53,519 --> 00:48:56,800
and so if this thing doesn't match

1031
00:48:55,358 --> 00:48:59,199
anything from this lane

1032
00:48:56,800 --> 00:49:00,720
then we actually add in the value here

1033
00:48:59,199 --> 00:49:04,318
that we that we've

1034
00:49:00,719 --> 00:49:06,879
got and then we do a total match um

1035
00:49:04,318 --> 00:49:07,838
add that distance so the match values

1036
00:49:06,880 --> 00:49:12,960
will get higher

1037
00:49:07,838 --> 00:49:12,960
as they get worse in this scheme right

1038
00:49:13,920 --> 00:49:19,200
um and so if the best match is lower

1039
00:49:17,119 --> 00:49:22,480
than the total match you know whatever

1040
00:49:19,199 --> 00:49:22,480
then then uh

1041
00:49:23,199 --> 00:49:27,358
we would take it and in order to make

1042
00:49:25,440 --> 00:49:28,639
that work right we want to be as close

1043
00:49:27,358 --> 00:49:30,480
we would want to be like as close to

1044
00:49:28,639 --> 00:49:32,159
zero as possible so if you look at the

1045
00:49:30,480 --> 00:49:33,838
way this works what we would want to do

1046
00:49:32,159 --> 00:49:36,879
here is just say like look just

1047
00:49:33,838 --> 00:49:39,199
decrease the total match value

1048
00:49:36,880 --> 00:49:41,599
as we go and so the largest negative

1049
00:49:39,199 --> 00:49:45,199
number right is what we want

1050
00:49:41,599 --> 00:49:47,920
um i'm sorry the

1051
00:49:45,199 --> 00:49:47,919
no that's not right

1052
00:49:52,960 --> 00:49:56,240
uh because this is still this is always

1053
00:49:54,800 --> 00:49:56,800
going to be the case we wouldn't get

1054
00:49:56,239 --> 00:49:58,879
away

1055
00:49:56,800 --> 00:50:00,160
with with that so what we want to do

1056
00:49:58,880 --> 00:50:02,240
here is say look we want the lowest

1057
00:50:00,159 --> 00:50:06,399
value so this would have to start out

1058
00:50:02,239 --> 00:50:06,399
at like the highest possible value right

1059
00:50:06,800 --> 00:50:09,039
um

1060
00:50:10,000 --> 00:50:13,838
and i think that produces what we want

1061
00:50:12,559 --> 00:50:17,359
so that still gives

1062
00:50:13,838 --> 00:50:21,679
us the the same basic idea

1063
00:50:17,358 --> 00:50:23,519
as we had before we switched the system

1064
00:50:21,679 --> 00:50:25,598
but now we get two important benefits

1065
00:50:23,519 --> 00:50:27,358
one is we can accelerate this part as

1066
00:50:25,599 --> 00:50:28,800
fast as we want so that the number of

1067
00:50:27,358 --> 00:50:32,318
things we're looking at is

1068
00:50:28,800 --> 00:50:33,839
remains hopefully quite low um but the

1069
00:50:32,318 --> 00:50:37,358
other thing that we can do

1070
00:50:33,838 --> 00:50:39,599
is now we also have exact matching on

1071
00:50:37,358 --> 00:50:41,759
tags which was a problem before so we

1072
00:50:39,599 --> 00:50:42,800
get exact match on tags first and then

1073
00:50:41,760 --> 00:50:44,960
the fuzzy matching

1074
00:50:42,800 --> 00:50:46,240
only happens which is why we can get rid

1075
00:50:44,960 --> 00:50:47,920
of like weight vectors

1076
00:50:46,239 --> 00:50:50,318
because now we know that these have to

1077
00:50:47,920 --> 00:50:51,838
match exactly so you start out narrowing

1078
00:50:50,318 --> 00:50:53,440
yourself down to just the things that

1079
00:50:51,838 --> 00:50:55,199
you actually care about

1080
00:50:53,440 --> 00:50:56,480
and then you can actually do the fuzzy

1081
00:50:55,199 --> 00:51:00,719
match based on

1082
00:50:56,480 --> 00:51:00,719
um like things like variant or whatever

1083
00:51:00,880 --> 00:51:04,559
and so if we then look at the asset

1084
00:51:02,719 --> 00:51:05,439
asset match vector types we've got in

1085
00:51:04,559 --> 00:51:07,680
here or face vector

1086
00:51:05,440 --> 00:51:09,200
variant now it makes a lot of sense so

1087
00:51:07,679 --> 00:51:09,679
now we're just going to set these things

1088
00:51:09,199 --> 00:51:12,480
to be

1089
00:51:09,679 --> 00:51:14,799
actual uh floating point values and off

1090
00:51:12,480 --> 00:51:16,318
we go so this can now return to the way

1091
00:51:14,800 --> 00:51:19,440
that it was

1092
00:51:16,318 --> 00:51:23,838
um and that will just work right

1093
00:51:19,440 --> 00:51:23,838
and hopefully

1094
00:51:26,400 --> 00:51:32,639
uh now everything will just magically

1095
00:51:29,760 --> 00:51:33,839
you know float around like a beautiful

1096
00:51:32,639 --> 00:51:36,318
morning spring

1097
00:51:33,838 --> 00:51:37,119
dove who has learned the beauty of

1098
00:51:36,318 --> 00:51:40,719
flight

1099
00:51:37,119 --> 00:51:43,119
you know uh so i think that's all

1100
00:51:40,719 --> 00:51:45,039
fine and i don't have a lot to say about

1101
00:51:43,119 --> 00:51:47,200
that uh tag range

1102
00:51:45,039 --> 00:51:48,239
i think could just go away now right

1103
00:51:47,199 --> 00:51:51,118
because

1104
00:51:48,239 --> 00:51:51,919
i think we should just fix that this is

1105
00:51:51,119 --> 00:51:55,280
garbage

1106
00:51:51,920 --> 00:51:57,440
it's not necessary um

1107
00:51:55,280 --> 00:51:58,800
let's see what's going on here those we

1108
00:51:57,440 --> 00:52:02,079
don't care about uh

1109
00:51:58,800 --> 00:52:03,519
going to the entity code so this stuff

1110
00:52:02,079 --> 00:52:06,000
is just stupid now

1111
00:52:03,519 --> 00:52:06,639
so facing direction the only change that

1112
00:52:06,000 --> 00:52:09,760
i want to make

1113
00:52:06,639 --> 00:52:09,759
is that it's supposed to do

1114
00:52:10,079 --> 00:52:17,280
um that matching we just

1115
00:52:13,199 --> 00:52:19,039
this part where we do importer pi

1116
00:52:17,280 --> 00:52:20,319
and then the one and the rap and blah

1117
00:52:19,039 --> 00:52:24,800
blah blah

1118
00:52:20,318 --> 00:52:28,239
so the the modulus side of things

1119
00:52:24,800 --> 00:52:29,760
um i don't know where what we've got for

1120
00:52:28,239 --> 00:52:33,838
modulus

1121
00:52:29,760 --> 00:52:33,839
do we have a modulus

1122
00:52:36,760 --> 00:52:40,859
[Music]

1123
00:52:42,639 --> 00:52:49,440
so we don't really have modulus in here

1124
00:52:45,920 --> 00:52:50,880
we've never actually done that but

1125
00:52:49,440 --> 00:52:53,200
it's not a particularly difficult

1126
00:52:50,880 --> 00:52:53,920
operation to do and i don't know that we

1127
00:52:53,199 --> 00:52:56,480
even really

1128
00:52:53,920 --> 00:52:58,838
need it because the facing direction

1129
00:52:56,480 --> 00:53:01,838
index stuff

1130
00:52:58,838 --> 00:53:01,838
um

1131
00:53:02,960 --> 00:53:06,800
i assume the output we're getting is

1132
00:53:05,920 --> 00:53:12,159
like

1133
00:53:06,800 --> 00:53:12,160
zero to two pi

1134
00:53:12,318 --> 00:53:16,239
i don't really know what we're setting

1135
00:53:13,838 --> 00:53:19,279
those two but you know let's

1136
00:53:16,239 --> 00:53:20,078
let's take a look so in the asset

1137
00:53:19,280 --> 00:53:23,599
processing

1138
00:53:20,079 --> 00:53:25,760
um side of things

1139
00:53:23,599 --> 00:53:27,359
where we do the imports uh we've got

1140
00:53:25,760 --> 00:53:30,160
like these tag array

1141
00:53:27,358 --> 00:53:30,159
nonsenses

1142
00:53:32,559 --> 00:53:35,920
where we set this kind of stuff

1143
00:53:38,639 --> 00:53:45,679
i don't really remember uh

1144
00:53:42,639 --> 00:53:49,279
when or why or how we did this

1145
00:53:45,679 --> 00:53:49,279
i just remember that we did this

1146
00:53:51,599 --> 00:53:58,318
so so this is is it

1147
00:53:54,838 --> 00:53:58,318
right and

1148
00:54:01,599 --> 00:54:05,119
it looks like

1149
00:54:10,400 --> 00:54:14,079
so it looks like if you read out the

1150
00:54:12,559 --> 00:54:16,000
facing direction stuff the way we're

1151
00:54:14,079 --> 00:54:19,440
attacking it before

1152
00:54:16,000 --> 00:54:23,440
it's it is literally just

1153
00:54:19,440 --> 00:54:26,720
the y index mod 4 times tau

1154
00:54:23,440 --> 00:54:30,159
so it's it's just doing that winding

1155
00:54:26,719 --> 00:54:33,118
so if we want this to match properly

1156
00:54:30,159 --> 00:54:35,358
uh i really think we can just simplify

1157
00:54:33,119 --> 00:54:36,720
this entire process right

1158
00:54:35,358 --> 00:54:38,639
so rather than what we're doing before

1159
00:54:36,719 --> 00:54:40,239
we had tag ranges so that we knew that

1160
00:54:38,639 --> 00:54:41,920
some were mapped periodically and all

1161
00:54:40,239 --> 00:54:43,279
this other garbage

1162
00:54:41,920 --> 00:54:45,920
i don't think we actually need any of

1163
00:54:43,280 --> 00:54:46,880
that um

1164
00:54:45,920 --> 00:54:48,480
i don't think any of that would be

1165
00:54:46,880 --> 00:54:50,318
necessary all we'd really have to do

1166
00:54:48,480 --> 00:54:55,358
here is just say

1167
00:54:50,318 --> 00:54:55,358
okay so the facing direction

1168
00:54:55,920 --> 00:55:06,000
is just going to be whatever the facing

1169
00:54:57,519 --> 00:55:09,838
direction actually is

1170
00:55:06,000 --> 00:55:12,559
uh and all we have to do is slide it

1171
00:55:09,838 --> 00:55:13,358
so that the way that it will match

1172
00:55:12,559 --> 00:55:16,720
against

1173
00:55:13,358 --> 00:55:20,000
something that ex that is uh pre like

1174
00:55:16,719 --> 00:55:23,358
some previously existing thing will just

1175
00:55:20,000 --> 00:55:24,239
map properly right so i think literally

1176
00:55:23,358 --> 00:55:27,279
the only

1177
00:55:24,239 --> 00:55:30,479
change we would actually have to make is

1178
00:55:27,280 --> 00:55:35,839
the end part of it so like if

1179
00:55:30,480 --> 00:55:35,838
the entity facing direction um

1180
00:55:36,079 --> 00:55:44,720
is less than uh or sorry greater than

1181
00:55:40,239 --> 00:55:48,399
if if you're in that last octant

1182
00:55:44,719 --> 00:55:52,000
so um if you're if you're

1183
00:55:48,400 --> 00:55:56,240
greater than a full circle

1184
00:55:52,000 --> 00:55:56,239
minus a quarter uh

1185
00:55:56,318 --> 00:56:03,039
or sorry minus a an octant right

1186
00:55:59,920 --> 00:56:03,039
uh define my eight

1187
00:56:04,480 --> 00:56:09,760
right so if you're in like the last

1188
00:56:08,960 --> 00:56:12,639
octant

1189
00:56:09,760 --> 00:56:14,640
of the circle and another way i guess we

1190
00:56:12,639 --> 00:56:17,838
could do that is just say

1191
00:56:14,639 --> 00:56:20,960
yeah like so suppose

1192
00:56:17,838 --> 00:56:23,679
we have an octant of a circle right so

1193
00:56:20,960 --> 00:56:25,039
7 8 would just be the number we're

1194
00:56:23,679 --> 00:56:28,239
looking for so we could just

1195
00:56:25,039 --> 00:56:30,880
put that in there it's not that

1196
00:56:28,239 --> 00:56:32,078
confusing right um so we could say if

1197
00:56:30,880 --> 00:56:35,680
you're in that

1198
00:56:32,079 --> 00:56:37,200
uh upper octant then that final one we

1199
00:56:35,679 --> 00:56:40,318
just want to make sure you're

1200
00:56:37,199 --> 00:56:43,358
gonna uh be at zero like you're gonna

1201
00:56:40,318 --> 00:56:47,599
map to the zero direction

1202
00:56:43,358 --> 00:56:49,598
region you know what i mean um

1203
00:56:47,599 --> 00:56:51,039
and so we can just just handle it there

1204
00:56:49,599 --> 00:56:54,880
and the reason that we

1205
00:56:51,039 --> 00:56:58,400
didn't handle it there before uh

1206
00:56:54,880 --> 00:56:58,880
is just because we wanted to make sure

1207
00:56:58,400 --> 00:57:02,480
you could

1208
00:56:58,880 --> 00:57:03,039
add in more of them but i i don't think

1209
00:57:02,480 --> 00:57:07,119
i really

1210
00:57:03,039 --> 00:57:09,119
care about that enough like

1211
00:57:07,119 --> 00:57:10,960
we don't have enough facing directions

1212
00:57:09,119 --> 00:57:14,079
that we're gonna have more than eight

1213
00:57:10,960 --> 00:57:16,400
in there anyway if that makes sense

1214
00:57:14,079 --> 00:57:16,400
um

1215
00:57:18,880 --> 00:57:22,079
i mean we're not gonna have more than

1216
00:57:24,838 --> 00:57:27,838
four

1217
00:57:28,079 --> 00:57:30,880
on the other hand i do kind of feel

1218
00:57:29,280 --> 00:57:32,319
stupid removing a feature that we had

1219
00:57:30,880 --> 00:57:40,798
before

1220
00:57:32,318 --> 00:57:42,079
it does feel a little dumb

1221
00:57:40,798 --> 00:57:44,239
you can see what we were doing here

1222
00:57:42,079 --> 00:57:46,079
right and so just the

1223
00:57:44,239 --> 00:57:48,318
the tag range for the for the facing

1224
00:57:46,079 --> 00:57:49,920
direction being tau 32

1225
00:57:48,318 --> 00:57:52,480
what it would do in here is it would

1226
00:57:49,920 --> 00:57:53,599
just basically with the old matching it

1227
00:57:52,480 --> 00:57:58,798
would make sure that the

1228
00:57:53,599 --> 00:57:58,798
yeah all right fine

1229
00:57:59,599 --> 00:58:05,039
i really i feel like we should remove

1230
00:58:01,760 --> 00:58:05,040
this but i'm just like

1231
00:58:05,199 --> 00:58:09,838
past casey wasn't wrong like that does

1232
00:58:08,000 --> 00:58:10,719
mean that the artist can then add more

1233
00:58:09,838 --> 00:58:12,639
of them

1234
00:58:10,719 --> 00:58:15,279
i mean they're not going to do that so i

1235
00:58:12,639 --> 00:58:17,920
feel dumb doing this

1236
00:58:15,280 --> 00:58:17,920
but it's like

1237
00:58:19,199 --> 00:58:26,078
it is the correct way to write that

1238
00:58:22,960 --> 00:58:28,400
feature right

1239
00:58:26,079 --> 00:58:28,400
i mean

1240
00:58:35,838 --> 00:58:38,880
arguably it's better

1241
00:58:40,798 --> 00:58:45,759
it's really hard to say like you know i

1242
00:58:43,920 --> 00:58:46,480
kind of feel like that should be removed

1243
00:58:45,760 --> 00:58:49,760
but it's like

1244
00:58:46,480 --> 00:58:50,240
i don't know like it's an intelligent

1245
00:58:49,760 --> 00:58:52,559
way to

1246
00:58:50,239 --> 00:58:54,959
do that thing this doesn't really cost

1247
00:58:52,559 --> 00:58:57,920
us anything

1248
00:58:54,960 --> 00:58:57,920
so like

1249
00:58:59,519 --> 00:59:05,838
i guess it stays i guess

1250
00:59:08,639 --> 00:59:14,318
i don't know so at that point i think

1251
00:59:12,239 --> 00:59:16,078
our choice is clear here which is just

1252
00:59:14,318 --> 00:59:18,079
to say that before we

1253
00:59:16,079 --> 00:59:20,000
load up any one of these we just say

1254
00:59:18,079 --> 00:59:22,000
that the match element

1255
00:59:20,000 --> 00:59:23,760
variant for this is whatever the piece

1256
00:59:22,000 --> 00:59:26,880
variant is

1257
00:59:23,760 --> 00:59:30,000
um so in the piece

1258
00:59:26,880 --> 00:59:30,640
the entity piece uh here we would just

1259
00:59:30,000 --> 00:59:33,519
have

1260
00:59:30,639 --> 00:59:34,159
a u32 for i'm sorry an f32 for the

1261
00:59:33,519 --> 00:59:39,119
variant

1262
00:59:34,159 --> 00:59:41,039
value um and i think that

1263
00:59:39,119 --> 00:59:43,119
that puts us right back at where we were

1264
00:59:41,039 --> 00:59:46,318
but with all the problems solved

1265
00:59:43,119 --> 00:59:50,480
i think i mean that may be a

1266
00:59:46,318 --> 00:59:54,079
little bit optimistic

1267
00:59:50,480 --> 00:59:55,760
certainly um you know i don't want to

1268
00:59:54,079 --> 00:59:57,599
do like an aircraft carrier mission

1269
00:59:55,760 --> 00:59:58,240
accomplished kind of a scene or anything

1270
00:59:57,599 --> 01:00:01,760
because

1271
00:59:58,239 --> 01:00:04,879
uh you know it's not over until

1272
01:00:01,760 --> 01:00:09,920
uh the fat lady runs the code but

1273
01:00:04,880 --> 01:00:09,920
i i feel like it's it's pretty close

1274
01:00:12,838 --> 01:00:15,838
um

1275
01:00:19,599 --> 01:00:29,838
all right so

1276
01:00:22,960 --> 01:00:29,838
uh yeah okay i mean sure

1277
01:00:32,239 --> 01:00:35,838
uh and in the original code here where

1278
01:00:34,719 --> 01:00:39,118
we're setting that

1279
01:00:35,838 --> 01:00:40,000
uh nonsense thing right uh we we

1280
01:00:39,119 --> 01:00:43,280
actually

1281
01:00:40,000 --> 01:00:45,519
don't need to do anything here

1282
01:00:43,280 --> 01:00:46,640
uh other than i mean i guess we could

1283
01:00:45,519 --> 01:00:50,239
still do it this way

1284
01:00:46,639 --> 01:00:53,199
there's we there are so few of these now

1285
01:00:50,239 --> 01:00:56,798
um that we don't have to to worry about

1286
01:00:53,199 --> 01:01:01,039
that anymore but um

1287
01:00:56,798 --> 01:01:02,559
has there any news hey ryan

1288
01:01:01,039 --> 01:01:04,719
you don't happen to know if allen ever

1289
01:01:02,559 --> 01:01:06,240
fixed the indentation do you

1290
01:01:04,719 --> 01:01:10,558
like are we getting a build with fixed

1291
01:01:06,239 --> 01:01:15,598
indentation or not

1292
01:01:10,559 --> 01:01:15,599
because i i i didn't actually know um

1293
01:01:17,119 --> 01:01:20,798
so this is not really tag range it's

1294
01:01:19,599 --> 01:01:24,880
like

1295
01:01:20,798 --> 01:01:30,000
a match vector

1296
01:01:24,880 --> 01:01:30,000
element right um

1297
01:01:30,159 --> 01:01:34,798
for e-index right so it's it's actually

1298
01:01:32,639 --> 01:01:39,199
it's not a tag type

1299
01:01:34,798 --> 01:01:43,039
um anymore and

1300
01:01:39,199 --> 01:01:46,239
it's actually a match element

1301
01:01:43,039 --> 01:01:50,159
which is a different thing uh

1302
01:01:46,239 --> 01:01:52,239
and so i think

1303
01:01:50,159 --> 01:01:53,838
oh yeah because it would be nice to know

1304
01:01:52,239 --> 01:01:55,358
when that was gonna get fixed if that if

1305
01:01:53,838 --> 01:01:56,480
that was gonna get fixed soon it would

1306
01:01:55,358 --> 01:01:57,920
be nice

1307
01:01:56,480 --> 01:01:59,440
um because it's really annoying like

1308
01:01:57,920 --> 01:02:01,599
there's no way to get the for loops to

1309
01:01:59,440 --> 01:02:03,358
look right like they go like that

1310
01:02:01,599 --> 01:02:04,880
which in a weird way does line something

1311
01:02:03,358 --> 01:02:05,199
up i assume it doesn't actually line up

1312
01:02:04,880 --> 01:02:07,200
yeah

1313
01:02:05,199 --> 01:02:09,199
so it's just for some reason it likes to

1314
01:02:07,199 --> 01:02:11,919
go an extra four in there

1315
01:02:09,199 --> 01:02:12,719
on parentheses it's always four extra on

1316
01:02:11,920 --> 01:02:14,318
parentheses

1317
01:02:12,719 --> 01:02:15,838
any anywhere you have parentheses as far

1318
01:02:14,318 --> 01:02:18,558
as i can tell nowadays

1319
01:02:15,838 --> 01:02:19,519
like if you do here you get the same

1320
01:02:18,559 --> 01:02:22,160
thing

1321
01:02:19,519 --> 01:02:22,798
right so it used to be that it lined up

1322
01:02:22,159 --> 01:02:25,118
dropped

1323
01:02:22,798 --> 01:02:27,038
with the parentheses uh which is what i

1324
01:02:25,119 --> 01:02:27,920
wanted and now it seems to be kind of

1325
01:02:27,039 --> 01:02:30,880
like

1326
01:02:27,920 --> 01:02:32,880
a weird like four plus thing like it's

1327
01:02:30,880 --> 01:02:36,240
got an extra increment

1328
01:02:32,880 --> 01:02:36,240
for reasons i don't i understand

1329
01:02:36,880 --> 01:02:40,798
all right so anyway um all right so that

1330
01:02:39,838 --> 01:02:44,318
match element

1331
01:02:40,798 --> 01:02:46,480
nonsense is is now uh in there

1332
01:02:44,318 --> 01:02:48,480
and everyone's happy about it they're

1333
01:02:46,480 --> 01:02:51,280
probably not that happy about it

1334
01:02:48,480 --> 01:02:52,240
uh and so i can get back to just the the

1335
01:02:51,280 --> 01:02:54,720
basic porting but

1336
01:02:52,239 --> 01:02:55,279
i think all that is now what i would

1337
01:02:54,719 --> 01:02:58,959
want

1338
01:02:55,280 --> 01:02:58,960
right that all seems good

1339
01:03:00,838 --> 01:03:05,759
um yeah so

1340
01:03:03,358 --> 01:03:07,679
what else so now we've got these things

1341
01:03:05,760 --> 01:03:10,559
where we're doing this ad piece call

1342
01:03:07,679 --> 01:03:12,239
and when we look at how entities get

1343
01:03:10,559 --> 01:03:16,480
added here

1344
01:03:12,239 --> 01:03:19,759
uh when we do

1345
01:03:16,480 --> 01:03:22,639
this so

1346
01:03:19,760 --> 01:03:24,160
the add entity call that adds it to this

1347
01:03:22,639 --> 01:03:26,558
region

1348
01:03:24,159 --> 01:03:28,239
at some point somebody probably bakes

1349
01:03:26,559 --> 01:03:30,559
these

1350
01:03:28,239 --> 01:03:33,519
tags and i think we would probably want

1351
01:03:30,559 --> 01:03:36,798
that to be something that kind of comes

1352
01:03:33,519 --> 01:03:40,079
in through here if we look at the gen

1353
01:03:36,798 --> 01:03:40,960
and entity uh i mean i i guess we can

1354
01:03:40,079 --> 01:03:43,119
still have it be

1355
01:03:40,960 --> 01:03:44,400
you know happen after the fact but when

1356
01:03:43,119 --> 01:03:47,519
you actually do this and you

1357
01:03:44,400 --> 01:03:59,200
you stick the entity in here

1358
01:03:47,519 --> 01:04:02,798
and you call this uh

1359
01:03:59,199 --> 01:04:04,480
um yeah okay so no one knows so we'll

1360
01:04:02,798 --> 01:04:06,480
see what alan says later

1361
01:04:04,480 --> 01:04:07,760
um so we may just want to leave this and

1362
01:04:06,480 --> 01:04:11,199
then we can stamp the

1363
01:04:07,760 --> 01:04:14,240
asset tags in later right for the pieces

1364
01:04:11,199 --> 01:04:16,239
as necessary that's one way to go

1365
01:04:14,239 --> 01:04:18,239
uh the problem with that is that it

1366
01:04:16,239 --> 01:04:19,439
doesn't give these functions really much

1367
01:04:18,239 --> 01:04:22,558
of an ability to like

1368
01:04:19,440 --> 01:04:24,318
kind of like fix to

1369
01:04:22,559 --> 01:04:26,559
to do what they would want to do here so

1370
01:04:24,318 --> 01:04:27,920
i'm thinking that like this call would

1371
01:04:26,559 --> 01:04:31,440
want to pass down

1372
01:04:27,920 --> 01:04:34,079
like you know here's the asset tag hash

1373
01:04:31,440 --> 01:04:34,079
to work with

1374
01:04:34,318 --> 01:04:37,679
uh like the base hash right and then

1375
01:04:36,639 --> 01:04:39,838
they can like

1376
01:04:37,679 --> 01:04:42,000
fuss with it right they can do like a

1377
01:04:39,838 --> 01:04:45,038
get tag hash

1378
01:04:42,000 --> 01:04:45,920
um and and pass the base hash there

1379
01:04:45,039 --> 01:04:49,359
right and that

1380
01:04:45,920 --> 01:04:55,200
that seems like what should be happening

1381
01:04:49,358 --> 01:04:57,679
um i would think

1382
01:04:55,199 --> 01:04:59,519
but i don't know oops i probably did

1383
01:04:57,679 --> 01:05:02,239
that huh

1384
01:04:59,519 --> 01:05:03,280
uh that to me seems like the smartest

1385
01:05:02,239 --> 01:05:05,279
thing to do

1386
01:05:03,280 --> 01:05:07,599
and we'll see like as we play with it a

1387
01:05:05,280 --> 01:05:08,640
little bit uh if that's actually what we

1388
01:05:07,599 --> 01:05:11,039
want

1389
01:05:08,639 --> 01:05:12,318
you know or not because i don't know uh

1390
01:05:11,039 --> 01:05:15,440
but we'll find out

1391
01:05:12,318 --> 01:05:15,440
i don't know we'll check it out

1392
01:05:17,119 --> 01:05:37,440
anyone here at frank zappa man

1393
01:05:23,358 --> 01:05:39,838
this is the central scrutinizer

1394
01:05:37,440 --> 01:05:39,838
so

1395
01:05:46,159 --> 01:05:51,838
a little uh scratchy

1396
01:05:54,639 --> 01:06:00,558
all right uh

1397
01:05:58,079 --> 01:06:02,000
so yeah i think basically now there's

1398
01:06:00,559 --> 01:06:04,160
really not much to this

1399
01:06:02,000 --> 01:06:05,199
uh at the moment because we're just

1400
01:06:04,159 --> 01:06:07,598
gonna

1401
01:06:05,199 --> 01:06:09,519
basically port all this code to the sort

1402
01:06:07,599 --> 01:06:11,039
of only slightly modified new way of

1403
01:06:09,519 --> 01:06:12,400
doing things

1404
01:06:11,039 --> 01:06:14,240
and then we've just got to go handle the

1405
01:06:12,400 --> 01:06:16,559
asset creation side

1406
01:06:14,239 --> 01:06:18,000
of things which will take a little bit

1407
01:06:16,559 --> 01:06:21,519
of work uh

1408
01:06:18,000 --> 01:06:22,159
but off we'll go so here when we do gen

1409
01:06:21,519 --> 01:06:24,239
entity at p

1410
01:06:22,159 --> 01:06:25,519
yeah again so this sort of stuff needs

1411
01:06:24,239 --> 01:06:28,558
to have an

1412
01:06:25,519 --> 01:06:32,960
asset tag hash

1413
01:06:28,559 --> 01:06:34,798
that gets passed in and

1414
01:06:32,960 --> 01:06:36,798
at least that's that's my argument and

1415
01:06:34,798 --> 01:06:39,119
i'm and i'm sticking to it

1416
01:06:36,798 --> 01:06:39,119
um

1417
01:06:40,880 --> 01:06:44,880
this code is not particularly good

1418
01:06:42,960 --> 01:06:47,199
anyway like we haven't really

1419
01:06:44,880 --> 01:06:49,280
done a whole lot of stuff with world gen

1420
01:06:47,199 --> 01:06:52,639
so i'm assuming we will probably do

1421
01:06:49,280 --> 01:06:57,839
more in the future with that

1422
01:06:52,639 --> 01:06:57,838
but uh so yeah

1423
01:06:59,679 --> 01:07:03,199
i would assume that we would want to

1424
01:07:01,519 --> 01:07:07,759
pass in

1425
01:07:03,199 --> 01:07:07,759
base hashes for like these things

1426
01:07:13,119 --> 01:07:16,240
because we want to be able to set like

1427
01:07:14,480 --> 01:07:20,000
what kind of monster it is

1428
01:07:16,239 --> 01:07:21,838
i i would assume but i don't really know

1429
01:07:20,000 --> 01:07:23,760
it might be that we weren't intending to

1430
01:07:21,838 --> 01:07:29,838
do that kind of stuff just yet

1431
01:07:23,760 --> 01:07:29,839
um and we'll see

1432
01:07:35,358 --> 01:07:40,838
so i think that's all good

1433
01:07:38,789 --> 01:07:43,838
[Music]

1434
01:07:40,838 --> 01:07:43,838
and

1435
01:07:45,039 --> 01:07:51,359
um yeah i don't think there's much else

1436
01:07:48,559 --> 01:07:51,839
to worry about there so here's us doing

1437
01:07:51,358 --> 01:07:53,679
some

1438
01:07:51,838 --> 01:07:56,239
stuff with like room generation and

1439
01:07:53,679 --> 01:07:58,798
adding pieces uh

1440
01:07:56,239 --> 01:08:00,798
so in this case where we're gonna we've

1441
01:07:58,798 --> 01:08:04,559
got like tags and stuff

1442
01:08:00,798 --> 01:08:07,920
that we add like later on right

1443
01:08:04,559 --> 01:08:08,480
so we've got like tree tags and lamp tag

1444
01:08:07,920 --> 01:08:11,920
and

1445
01:08:08,480 --> 01:08:14,240
and that sort of thing and we add

1446
01:08:11,920 --> 01:08:17,039
occluders here

1447
01:08:14,239 --> 01:08:18,000
in terms of adding this visual piece i'm

1448
01:08:17,039 --> 01:08:21,198
not sure

1449
01:08:18,000 --> 01:08:22,798
that we have to do that here so we could

1450
01:08:21,198 --> 01:08:25,119
in theory

1451
01:08:22,798 --> 01:08:26,560
change this to being something where we

1452
01:08:25,119 --> 01:08:30,318
like come down

1453
01:08:26,560 --> 01:08:34,239
and put this like over here right

1454
01:08:30,319 --> 01:08:34,239
um and

1455
01:08:36,399 --> 01:08:40,000
although actually that just those don't

1456
01:08:38,399 --> 01:08:40,960
actually look related so i think

1457
01:08:40,000 --> 01:08:42,880
actually

1458
01:08:40,960 --> 01:08:44,399
just this version right here where we

1459
01:08:42,880 --> 01:08:45,279
add them i think that's really the end

1460
01:08:44,399 --> 01:08:47,278
of it is

1461
01:08:45,279 --> 01:08:50,080
it's never really used other than to add

1462
01:08:47,279 --> 01:08:52,100
the cube uv layout right

1463
01:08:50,079 --> 01:08:53,838
so in terms of the

1464
01:08:52,100 --> 01:08:57,838
[Music]

1465
01:08:53,838 --> 01:09:00,158
the piece stuff it it really

1466
01:08:57,838 --> 01:09:01,838
it really doesn't matter actually so i

1467
01:09:00,158 --> 01:09:03,599
think that's actually the end of it and

1468
01:09:01,838 --> 01:09:04,000
and the really the question here is just

1469
01:09:03,600 --> 01:09:09,279
like

1470
01:09:04,000 --> 01:09:11,039
these tags uh that we have here

1471
01:09:09,279 --> 01:09:12,640
i don't actually know what those are

1472
01:09:11,039 --> 01:09:15,679
doing we got a lot of

1473
01:09:12,640 --> 01:09:15,679
these um

1474
01:09:15,838 --> 01:09:20,479
so the entity like has a bunch of tags

1475
01:09:18,000 --> 01:09:24,079
on it right

1476
01:09:20,479 --> 01:09:26,798
and and that's going to go away i think

1477
01:09:24,079 --> 01:09:27,359
so maybe what i want to do is delete

1478
01:09:26,798 --> 01:09:31,600
this

1479
01:09:27,359 --> 01:09:35,600
function so like that just goes away

1480
01:09:31,600 --> 01:09:38,640
uh and then we can

1481
01:09:35,600 --> 01:09:41,759
deal with the aftermath of that

1482
01:09:38,640 --> 01:09:43,279
uh as an easy way to have the compiler

1483
01:09:41,759 --> 01:09:45,039
like help us out

1484
01:09:43,279 --> 01:09:46,640
and so this is kind of nice right

1485
01:09:45,039 --> 01:09:48,238
because it gets rid of a bunch of

1486
01:09:46,640 --> 01:09:51,838
garbage that was there

1487
01:09:48,238 --> 01:09:53,838
that wasn't good um and

1488
01:09:51,838 --> 01:09:54,960
so now we can kind of look at this a

1489
01:09:53,838 --> 01:09:58,079
little bit

1490
01:09:54,960 --> 01:09:58,079
uh better right

1491
01:09:58,479 --> 01:10:02,399
so here we were looking to see whether

1492
01:10:00,319 --> 01:10:03,840
we were going to have like winter trees

1493
01:10:02,399 --> 01:10:06,639
or non-winter trees

1494
01:10:03,840 --> 01:10:08,239
or whatever and this kind of stuff and i

1495
01:10:06,640 --> 01:10:08,960
like i said we didn't we didn't really

1496
01:10:08,238 --> 01:10:11,198
have

1497
01:10:08,960 --> 01:10:12,880
uh a way of of working with these

1498
01:10:11,198 --> 01:10:15,759
particularly

1499
01:10:12,880 --> 01:10:17,199
uh usefully or not so in this case all

1500
01:10:15,760 --> 01:10:18,800
we really want to do is like kind of

1501
01:10:17,198 --> 01:10:20,399
randomly pick which one of these we

1502
01:10:18,800 --> 01:10:20,960
wanted now in this case we sort of were

1503
01:10:20,399 --> 01:10:22,479
just doing

1504
01:10:20,960 --> 01:10:25,039
some testing i think to say like whether

1505
01:10:22,479 --> 01:10:25,839
they should have uh a wintry look to

1506
01:10:25,039 --> 01:10:28,079
them or not

1507
01:10:25,840 --> 01:10:29,039
and that part of it which it's really

1508
01:10:28,079 --> 01:10:30,399
just like

1509
01:10:29,039 --> 01:10:32,479
we we only have like winter and

1510
01:10:30,399 --> 01:10:33,198
non-mentor trees so it's really just

1511
01:10:32,479 --> 01:10:35,279
like

1512
01:10:33,198 --> 01:10:36,479
a pit it was just a random choice do you

1513
01:10:35,279 --> 01:10:37,519
want to have a winter tree or do not

1514
01:10:36,479 --> 01:10:39,919
want to have one

1515
01:10:37,520 --> 01:10:41,679
these were only there to prevent picking

1516
01:10:39,920 --> 01:10:45,119
other trees which thankfully now

1517
01:10:41,679 --> 01:10:48,319
won't be a problem right

1518
01:10:45,119 --> 01:10:51,439
and so if we look at like the tags files

1519
01:10:48,319 --> 01:10:54,158
uh like this hht file right

1520
01:10:51,439 --> 01:10:55,839
and we look at things like where winter

1521
01:10:54,158 --> 01:10:57,439
was getting used here you can see it's

1522
01:10:55,840 --> 01:10:59,119
just like a tree winter it's like that's

1523
01:10:57,439 --> 01:11:01,678
the only

1524
01:10:59,119 --> 01:11:03,279
uh thing we actually have and the rest

1525
01:11:01,679 --> 01:11:05,039
of the things in there are variants so

1526
01:11:03,279 --> 01:11:08,158
so this part we do want

1527
01:11:05,039 --> 01:11:10,479
like that's a thing but tag

1528
01:11:08,158 --> 01:11:11,599
winter is just like either you add it or

1529
01:11:10,479 --> 01:11:13,678
you don't so

1530
01:11:11,600 --> 01:11:14,880
really all this would be is it's not an

1531
01:11:13,679 --> 01:11:18,719
add tag

1532
01:11:14,880 --> 01:11:22,159
right it's actually editing that value

1533
01:11:18,719 --> 01:11:24,800
of the match vector so

1534
01:11:22,158 --> 01:11:27,839
for add tree tags if we look at what

1535
01:11:24,800 --> 01:11:31,920
that's actually doing

1536
01:11:27,840 --> 01:11:35,440
um and again like we may

1537
01:11:31,920 --> 01:11:37,119
you know like we will see

1538
01:11:35,439 --> 01:11:39,279
but where if we actually go look at

1539
01:11:37,119 --> 01:11:40,319
where ad tree tags actually does stuff

1540
01:11:39,279 --> 01:11:43,599
you can see

1541
01:11:40,319 --> 01:11:46,399
like it's editing this entity here

1542
01:11:43,600 --> 01:11:47,039
where it just said like added the asset

1543
01:11:46,399 --> 01:11:49,359
scenery

1544
01:11:47,039 --> 01:11:51,119
we would want to pass in uh the correct

1545
01:11:49,359 --> 01:11:54,559
stuff for that

1546
01:11:51,119 --> 01:11:56,399
and where it produced variance right the

1547
01:11:54,560 --> 01:11:58,880
variance

1548
01:11:56,399 --> 01:12:00,960
i mean at some level unless you care

1549
01:11:58,880 --> 01:12:04,560
variance should kind of always be set to

1550
01:12:00,960 --> 01:12:08,719
a random unilateral value

1551
01:12:04,560 --> 01:12:10,560
right i mean so in some sense what we

1552
01:12:08,719 --> 01:12:13,439
would want to do is just say

1553
01:12:10,560 --> 01:12:15,679
okay like when you add a piece at all

1554
01:12:13,439 --> 01:12:15,678
right

1555
01:12:15,920 --> 01:12:19,359
so when you're in here putting one of

1556
01:12:17,840 --> 01:12:22,319
these in at all

1557
01:12:19,359 --> 01:12:24,719
presumably what we would want to do is

1558
01:12:22,319 --> 01:12:27,359
you would always

1559
01:12:24,719 --> 01:12:28,719
just generate some entropy and and you

1560
01:12:27,359 --> 01:12:32,238
know

1561
01:12:28,719 --> 01:12:34,239
and set the variant to a random value

1562
01:12:32,238 --> 01:12:36,079
for for almost every place that we would

1563
01:12:34,238 --> 01:12:37,039
ever do that like that's what we would

1564
01:12:36,079 --> 01:12:40,559
want to do

1565
01:12:37,039 --> 01:12:41,920
right and so in here the major problem

1566
01:12:40,560 --> 01:12:42,480
is we just don't have a source of

1567
01:12:41,920 --> 01:12:44,319
entropy

1568
01:12:42,479 --> 01:12:46,000
you know we don't we don't pass that

1569
01:12:44,319 --> 01:12:47,119
down and so when you have things like

1570
01:12:46,000 --> 01:12:50,238
this where you know it's the world

1571
01:12:47,119 --> 01:12:51,599
generator or whatever that would

1572
01:12:50,238 --> 01:12:54,479
normally be editing that

1573
01:12:51,600 --> 01:12:56,000
so when we do the the add piece calls

1574
01:12:54,479 --> 01:12:58,559
they're not really getting

1575
01:12:56,000 --> 01:12:59,439
uh access to the entropy now they kind

1576
01:12:58,560 --> 01:13:02,080
of it feels like they

1577
01:12:59,439 --> 01:13:03,599
they probably should have been uh in the

1578
01:13:02,079 --> 01:13:04,399
world generated side of things because

1579
01:13:03,600 --> 01:13:07,360
people don't

1580
01:13:04,399 --> 01:13:09,039
add pieces to things without world

1581
01:13:07,359 --> 01:13:10,880
generation

1582
01:13:09,039 --> 01:13:12,880
but you can understand why we might need

1583
01:13:10,880 --> 01:13:17,119
that for other things

1584
01:13:12,880 --> 01:13:19,020
and you you would need to make a thing

1585
01:13:17,119 --> 01:13:20,399
in here somewhere where you

1586
01:13:19,020 --> 01:13:23,040
[Music]

1587
01:13:20,399 --> 01:13:24,879
where you have one it needs to get a

1588
01:13:23,039 --> 01:13:28,000
source of energy from somewhere right

1589
01:13:24,880 --> 01:13:29,520
or you need to pass it in

1590
01:13:28,000 --> 01:13:31,439
so one thing we might consider is

1591
01:13:29,520 --> 01:13:34,080
expanding this notion

1592
01:13:31,439 --> 01:13:36,479
um and so and maybe that's what i'll do

1593
01:13:34,079 --> 01:13:38,640
so if we go look at like tag hash

1594
01:13:36,479 --> 01:13:40,319
we've got the these two things and

1595
01:13:38,640 --> 01:13:42,480
they're separate

1596
01:13:40,319 --> 01:13:44,639
so maybe what we want to do is kind of

1597
01:13:42,479 --> 01:13:46,799
make a combined

1598
01:13:44,640 --> 01:13:48,719
one of these and make something like

1599
01:13:46,800 --> 01:13:52,960
okay the tag hash and the mash

1600
01:13:48,719 --> 01:13:55,039
match vector and we combine those into

1601
01:13:52,960 --> 01:13:58,800
like one uniform thing

1602
01:13:55,039 --> 01:14:02,880
called like an asset match

1603
01:13:58,800 --> 01:14:05,119
you know um

1604
01:14:02,880 --> 01:14:06,400
i don't know something we want a struct

1605
01:14:05,119 --> 01:14:14,319
that has these two things

1606
01:14:06,399 --> 01:14:16,079
right it's got the vector and the hash

1607
01:14:14,319 --> 01:14:19,359
we want an easy way to like pass those

1608
01:14:16,079 --> 01:14:20,238
around right so it's basically 128 bits

1609
01:14:19,359 --> 01:14:23,679
of data it's

1610
01:14:20,238 --> 01:14:27,279
two floating point matching constants

1611
01:14:23,679 --> 01:14:30,480
and then a tag that you know can be

1612
01:14:27,279 --> 01:14:32,319
can be looked up on right and so we want

1613
01:14:30,479 --> 01:14:34,399
some way of passing those as a unit

1614
01:14:32,319 --> 01:14:35,759
i don't know what that should be called

1615
01:14:34,399 --> 01:14:39,759
um an asset

1616
01:14:35,760 --> 01:14:43,840
match info

1617
01:14:39,760 --> 01:14:43,840
bundle packet

1618
01:14:43,920 --> 01:14:51,199
oh yawn time it's an

1619
01:14:46,960 --> 01:14:51,198
asset match fun

1620
01:14:51,359 --> 01:14:58,319
fun matching times thing

1621
01:14:55,279 --> 01:14:58,960
um so i don't know what we would call

1622
01:14:58,319 --> 01:15:00,639
that

1623
01:14:58,960 --> 01:15:04,719
uh i'm just gonna call it an asset

1624
01:15:00,640 --> 01:15:04,719
matcher asset match

1625
01:15:05,600 --> 01:15:11,840
nugget asset

1626
01:15:13,679 --> 01:15:21,119
look up i don't know

1627
01:15:17,679 --> 01:15:24,719
don't care um so anyway inside here

1628
01:15:21,119 --> 01:15:27,439
if you know you would pass this um

1629
01:15:24,719 --> 01:15:28,079
this asset look up and it would be the

1630
01:15:27,439 --> 01:15:29,839
thing that

1631
01:15:28,079 --> 01:15:31,679
would be recorded and it would be like

1632
01:15:29,840 --> 01:15:34,719
variant and facing direction

1633
01:15:31,679 --> 01:15:36,480
would would both be in there um so we

1634
01:15:34,719 --> 01:15:38,480
could do something like that

1635
01:15:36,479 --> 01:15:40,319
the problem that i have with that is

1636
01:15:38,479 --> 01:15:41,759
it's still like fairly decoupled like

1637
01:15:40,319 --> 01:15:44,319
the facing direction

1638
01:15:41,760 --> 01:15:45,039
always comes from outside and the

1639
01:15:44,319 --> 01:15:48,399
variant

1640
01:15:45,039 --> 01:15:51,840
always comes from inside so

1641
01:15:48,399 --> 01:15:53,839
in a way we actually want this to be

1642
01:15:51,840 --> 01:15:57,440
specific

1643
01:15:53,840 --> 01:16:00,560
uh so we may want like an entity

1644
01:15:57,439 --> 01:16:04,399
piece like

1645
01:16:00,560 --> 01:16:09,360
asset something like that

1646
01:16:04,399 --> 01:16:10,879
and it's literally just this right

1647
01:16:09,359 --> 01:16:12,399
so that would actually be the thing

1648
01:16:10,880 --> 01:16:14,960
you'd pass in here

1649
01:16:12,399 --> 01:16:15,519
it's whatever part you would normally

1650
01:16:14,960 --> 01:16:18,960
have

1651
01:16:15,520 --> 01:16:22,719
inside uh the entity piece

1652
01:16:18,960 --> 01:16:27,119
itself and so uh

1653
01:16:22,719 --> 01:16:31,800
you know be like that

1654
01:16:27,119 --> 01:16:35,840
and off we go and this would be

1655
01:16:31,800 --> 01:16:35,840
that and

1656
01:16:37,359 --> 01:16:42,238
in the actual piece function here

1657
01:16:43,279 --> 01:16:49,840
maybe like

1658
01:16:54,960 --> 01:16:57,198
right

1659
01:17:00,640 --> 01:17:03,840
so you know

1660
01:17:05,359 --> 01:17:09,119
i don't know how you feel about that but

1661
01:17:06,880 --> 01:17:11,119
that's sort of

1662
01:17:09,119 --> 01:17:13,359
maybe something that makes some sense to

1663
01:17:11,119 --> 01:17:16,289
somebody sometimes

1664
01:17:13,359 --> 01:17:17,759
right and so in here we would say

1665
01:17:16,289 --> 01:17:21,279
[Music]

1666
01:17:17,760 --> 01:17:23,440
that uh we would peel those out as

1667
01:17:21,279 --> 01:17:26,479
necessary right so you would go

1668
01:17:23,439 --> 01:17:30,000
and you'd get uh out of the

1669
01:17:26,479 --> 01:17:33,439
asset oops

1670
01:17:30,000 --> 01:17:37,760
of the asset you'd get the variance um

1671
01:17:33,439 --> 01:17:41,039
and you would look up the oops the hash

1672
01:17:37,760 --> 01:17:42,880
uh like so and and that would be

1673
01:17:41,039 --> 01:17:45,840
you know that would be how you'd have

1674
01:17:42,880 --> 01:17:49,600
have uh fun

1675
01:17:45,840 --> 01:17:54,159
uh during the lockdown right so

1676
01:17:49,600 --> 01:17:56,159
i think that makes some sense and

1677
01:17:54,158 --> 01:17:57,439
i don't know why this is now complaining

1678
01:17:56,158 --> 01:18:02,000
but it is

1679
01:17:57,439 --> 01:18:04,960
and that's fine so if we're gonna pass

1680
01:18:02,000 --> 01:18:05,920
these entity piece assets in here uh

1681
01:18:04,960 --> 01:18:07,679
this would then

1682
01:18:05,920 --> 01:18:10,399
so that looks like so now it is

1683
01:18:07,679 --> 01:18:13,760
complaining about this for some reason

1684
01:18:10,399 --> 01:18:17,359
uh it doesn't know which thing to call

1685
01:18:13,760 --> 01:18:22,320
i guess is the problem um

1686
01:18:17,359 --> 01:18:26,000
out of these so it's got two of them

1687
01:18:22,319 --> 01:18:29,599
and i guess because they both take

1688
01:18:26,000 --> 01:18:31,279
the asset wait why does it not know

1689
01:18:29,600 --> 01:18:34,400
which one of those you would call that

1690
01:18:31,279 --> 01:18:36,719
seems pretty straightforward

1691
01:18:34,399 --> 01:18:36,719
um

1692
01:18:37,439 --> 01:18:41,839
how is that ambiguous i don't actually

1693
01:18:41,119 --> 01:18:44,719
know

1694
01:18:41,840 --> 01:18:45,360
um but let me just do this for one

1695
01:18:44,719 --> 01:18:55,760
second

1696
01:18:45,359 --> 01:18:58,319
and and see

1697
01:18:55,760 --> 01:18:58,320
fantastic

1698
01:19:00,880 --> 01:19:08,159
uh so anyway c plus being a gigantic

1699
01:19:05,279 --> 01:19:09,759
steaming pile of garbage aside uh let's

1700
01:19:08,158 --> 01:19:13,839
just take a look

1701
01:19:09,760 --> 01:19:17,600
uh at the rest of this and leave that

1702
01:19:13,840 --> 01:19:20,960
in its uh festering you know

1703
01:19:17,600 --> 01:19:23,840
pi in its festering steaming wreckage

1704
01:19:20,960 --> 01:19:23,840
uh so

1705
01:19:24,560 --> 01:19:28,000
looking at how we would do add tree tags

1706
01:19:26,880 --> 01:19:31,679
really what this would be

1707
01:19:28,000 --> 01:19:35,359
more like is like get tree tags

1708
01:19:31,679 --> 01:19:36,640
and it would do um you know

1709
01:19:35,359 --> 01:19:39,759
we haven't thought this through but you

1710
01:19:36,640 --> 01:19:41,920
know it would do like entity peace asset

1711
01:19:39,760 --> 01:19:42,960
uh as this return value and here we

1712
01:19:41,920 --> 01:19:51,840
would just do like get

1713
01:19:42,960 --> 01:19:51,840
tag hash um

1714
01:19:51,920 --> 01:19:56,000
and we don't care what asset type it is

1715
01:19:54,719 --> 01:19:56,719
because that'll get filled in by someone

1716
01:19:56,000 --> 01:19:59,119
else later

1717
01:19:56,719 --> 01:20:00,960
uh we know that we want the the winter

1718
01:19:59,119 --> 01:20:03,359
tag in here

1719
01:20:00,960 --> 01:20:05,198
um and i guess we sort of were saying we

1720
01:20:03,359 --> 01:20:09,279
want it sometimes

1721
01:20:05,198 --> 01:20:11,839
so we would either do

1722
01:20:09,279 --> 01:20:13,599
like that or tag none based on like a

1723
01:20:11,840 --> 01:20:16,719
random choice

1724
01:20:13,600 --> 01:20:18,639
um and i don't know like what kind of

1725
01:20:16,719 --> 01:20:21,279
choice that was supposed to be

1726
01:20:18,639 --> 01:20:21,840
uh we have a random choice function

1727
01:20:21,279 --> 01:20:25,599
right

1728
01:20:21,840 --> 01:20:27,440
yeah so you know sometimes we

1729
01:20:25,600 --> 01:20:29,440
we tack on the winter tags sometimes we

1730
01:20:27,439 --> 01:20:33,039
don't check on the winter tag i guess

1731
01:20:29,439 --> 01:20:35,839
is like the theory um there

1732
01:20:33,039 --> 01:20:36,479
and then in the variant side of things

1733
01:20:35,840 --> 01:20:39,679
we just

1734
01:20:36,479 --> 01:20:40,559
throw in a random variant as as

1735
01:20:39,679 --> 01:20:43,039
necessary

1736
01:20:40,560 --> 01:20:43,840
and that would be how we would get the

1737
01:20:43,039 --> 01:20:46,319
tree tags

1738
01:20:43,840 --> 01:20:48,400
and so then in here when we're actually

1739
01:20:46,319 --> 01:20:50,639
going to use that function

1740
01:20:48,399 --> 01:20:51,920
we just reverse the order in which this

1741
01:20:50,639 --> 01:20:54,960
happens

1742
01:20:51,920 --> 01:20:57,760
so when we call git enter to get

1743
01:20:54,960 --> 01:21:00,480
entity at traversable we would actually

1744
01:20:57,760 --> 01:21:04,239
just call like get tree tags

1745
01:21:00,479 --> 01:21:07,759
um to get the the tags we actually want

1746
01:21:04,238 --> 01:21:11,279
for trees in in this area or whatever

1747
01:21:07,760 --> 01:21:13,600
and presumably we don't need to actually

1748
01:21:11,279 --> 01:21:16,399
have the entity anymore because all we

1749
01:21:13,600 --> 01:21:17,760
need is the entropy source

1750
01:21:16,399 --> 01:21:19,839
because we're not actually editing the

1751
01:21:17,760 --> 01:21:21,520
end the entity at all we're just getting

1752
01:21:19,840 --> 01:21:25,520
the tree tags so that we can

1753
01:21:21,520 --> 01:21:30,400
call get end of the um

1754
01:21:25,520 --> 01:21:30,400
sorry gen entity at traversible

1755
01:21:31,198 --> 01:21:38,079
and that will now take an entity piece

1756
01:21:34,880 --> 01:21:41,679
asset um so the base

1757
01:21:38,079 --> 01:21:42,639
the base values now are always passed in

1758
01:21:41,679 --> 01:21:46,639
in terms of

1759
01:21:42,639 --> 01:21:50,960
that and these

1760
01:21:46,639 --> 01:21:54,000
generation calls will also be that

1761
01:21:50,960 --> 01:21:57,520
right um and then when

1762
01:21:54,000 --> 01:21:58,960
pieces are actually added to the extent

1763
01:21:57,520 --> 01:22:02,000
that it's necessary

1764
01:21:58,960 --> 01:22:04,639
um when we do these the base hash

1765
01:22:02,000 --> 01:22:05,520
is now actually in the like this is the

1766
01:22:04,639 --> 01:22:07,679
actual like

1767
01:22:05,520 --> 01:22:08,960
asset or base asset i guess would be

1768
01:22:07,679 --> 01:22:13,279
what it would be called

1769
01:22:08,960 --> 01:22:16,880
right and so you can get the base asset

1770
01:22:13,279 --> 01:22:18,319
hash if you want to um but when you do

1771
01:22:16,880 --> 01:22:19,039
add piece you're going to want both of

1772
01:22:18,319 --> 01:22:20,880
those

1773
01:22:19,039 --> 01:22:22,639
so i'm assuming we probably want

1774
01:22:20,880 --> 01:22:26,560
something

1775
01:22:22,639 --> 01:22:27,199
that will uh that will do this same

1776
01:22:26,560 --> 01:22:28,880
function

1777
01:22:27,198 --> 01:22:30,879
automatically for us but pass the

1778
01:22:28,880 --> 01:22:34,719
variant through

1779
01:22:30,880 --> 01:22:38,079
so here we would do something like um

1780
01:22:34,719 --> 01:22:41,679
you know just change asset

1781
01:22:38,079 --> 01:22:41,679
type or something like that

1782
01:22:47,520 --> 01:22:54,719
or change hash

1783
01:22:52,479 --> 01:22:54,718
so

1784
01:22:55,600 --> 01:23:00,079
we'd get the base asset we'd change the

1785
01:22:57,920 --> 01:23:01,199
hash as necessary but we'd pass through

1786
01:23:00,079 --> 01:23:07,840
the variant part

1787
01:23:01,198 --> 01:23:07,839
like unchanged you know what i'm saying

1788
01:23:14,719 --> 01:23:18,079
and i feel like that's converging on

1789
01:23:16,319 --> 01:23:21,840
something kind of nice now

1790
01:23:18,079 --> 01:23:24,079
like we're getting somewhere with that

1791
01:23:21,840 --> 01:23:24,960
um and this function is just a nonsense

1792
01:23:24,079 --> 01:23:27,198
function

1793
01:23:24,960 --> 01:23:28,960
it's like super simple right it's

1794
01:23:27,198 --> 01:23:32,000
literally just

1795
01:23:28,960 --> 01:23:35,520
um in

1796
01:23:32,000 --> 01:23:36,960
the the entity piece hash or any piece

1797
01:23:35,520 --> 01:23:40,239
asset thing right

1798
01:23:36,960 --> 01:23:40,239
you're just taking in one

1799
01:23:42,238 --> 01:23:49,519
and you're changing the asset type

1800
01:23:46,840 --> 01:23:52,639
uh like so

1801
01:23:49,520 --> 01:23:56,000
is it uh i can't remember in the or

1802
01:23:52,639 --> 01:23:58,079
sorry get tag hash i can't remember

1803
01:23:56,000 --> 01:23:59,039
that's a basic category is what it is

1804
01:23:58,079 --> 01:24:02,719
it's that

1805
01:23:59,039 --> 01:24:03,920
right and so all you're doing here is

1806
01:24:02,719 --> 01:24:06,560
saying look the result

1807
01:24:03,920 --> 01:24:07,279
is just whatever you passed in ex but

1808
01:24:06,560 --> 01:24:09,840
the hash

1809
01:24:07,279 --> 01:24:09,840
is going to be

1810
01:24:11,039 --> 01:24:17,840
modified to have

1811
01:24:18,079 --> 01:24:23,920
the new type right

1812
01:24:21,679 --> 01:24:23,920
so

1813
01:24:28,479 --> 01:24:35,439
whoops typing

1814
01:24:32,000 --> 01:24:39,520
so i think that should

1815
01:24:35,439 --> 01:24:42,319
solve the problem uh

1816
01:24:39,520 --> 01:24:42,880
and then what's our complaint here

1817
01:24:42,319 --> 01:24:45,039
cannot

1818
01:24:42,880 --> 01:24:46,560
change convert all blah blah blah to

1819
01:24:45,039 --> 01:24:50,560
blah blah blah

1820
01:24:46,560 --> 01:24:54,000
so ad piece uh is that a thing that's

1821
01:24:50,560 --> 01:24:54,000
like what's the problem so

1822
01:24:54,238 --> 01:24:58,079
it's just calling this one this change

1823
01:24:57,119 --> 01:25:01,439
hash is supposed

1824
01:24:58,079 --> 01:25:01,439
to uh

1825
01:25:01,600 --> 01:25:05,520
is supposed to return it into peace

1826
01:25:03,119 --> 01:25:06,719
asset right i mean it does it's right

1827
01:25:05,520 --> 01:25:09,040
there

1828
01:25:06,719 --> 01:25:09,039
um

1829
01:25:11,679 --> 01:25:16,399
base asset is base asset though

1830
01:25:17,359 --> 01:25:20,880
any piece asset base asset so that

1831
01:25:19,760 --> 01:25:23,520
should be right right because that's the

1832
01:25:20,880 --> 01:25:25,359
base asset is there

1833
01:25:23,520 --> 01:25:27,040
and that should produce the thing we

1834
01:25:25,359 --> 01:25:30,719
wanted right

1835
01:25:27,039 --> 01:25:34,719
and and add peace

1836
01:25:30,719 --> 01:25:37,600
is just height offset color

1837
01:25:34,719 --> 01:25:37,600
and then flags

1838
01:25:39,039 --> 01:25:42,960
although i don't know where that's

1839
01:25:40,238 --> 01:25:42,959
actually defined

1840
01:25:47,039 --> 01:25:52,880
it'd be nice if this said whether it was

1841
01:25:48,479 --> 01:25:52,879
a prototype or an actual function

1842
01:25:53,600 --> 01:25:57,440
so they're right there ahaha

1843
01:25:58,399 --> 01:26:01,920
so that is probably what c plus was

1844
01:26:01,198 --> 01:26:03,919
getting

1845
01:26:01,920 --> 01:26:05,359
hung up on right because of course c

1846
01:26:03,920 --> 01:26:06,480
plus has no idea what the functions in

1847
01:26:05,359 --> 01:26:08,880
your program are

1848
01:26:06,479 --> 01:26:11,119
unless you tell them ahead of time what

1849
01:26:08,880 --> 01:26:13,679
they all are

1850
01:26:11,119 --> 01:26:14,719
um you know heaven for fend so my

1851
01:26:13,679 --> 01:26:18,719
assumption is that

1852
01:26:14,719 --> 01:26:20,719
actually the thing where we had uh

1853
01:26:18,719 --> 01:26:22,079
this null asset we could now remove

1854
01:26:20,719 --> 01:26:25,359
right oops not that

1855
01:26:22,079 --> 01:26:25,750
one this one right i mean now it should

1856
01:26:25,359 --> 01:26:27,439
know

1857
01:26:25,750 --> 01:26:31,039
[Music]

1858
01:26:27,439 --> 01:26:34,399
yeah so

1859
01:26:31,039 --> 01:26:36,800
that's fine and

1860
01:26:34,399 --> 01:26:38,158
in here where we've got this nonsense

1861
01:26:36,800 --> 01:26:40,480
happening

1862
01:26:38,158 --> 01:26:42,399
uh now all we really would want to do

1863
01:26:40,479 --> 01:26:46,079
here i think

1864
01:26:42,399 --> 01:26:50,079
is since that

1865
01:26:46,079 --> 01:26:52,319
wants a variant as well

1866
01:26:50,079 --> 01:26:54,960
uh i would say like in much the same way

1867
01:26:52,319 --> 01:26:58,158
that we had that other utility function

1868
01:26:54,960 --> 01:27:04,000
so uh

1869
01:26:58,158 --> 01:27:07,920
you know

1870
01:27:04,000 --> 01:27:10,319
maybe we want you know do we want this

1871
01:27:07,920 --> 01:27:10,319
to be

1872
01:27:12,079 --> 01:27:14,880
you know i'm just

1873
01:27:15,439 --> 01:27:19,599
i'm just thinking right like i feel like

1874
01:27:18,238 --> 01:27:22,638
we want this to be that and

1875
01:27:19,600 --> 01:27:24,960
and you know shouldn't it shouldn't it

1876
01:27:22,639 --> 01:27:27,199
set like the variance

1877
01:27:24,960 --> 01:27:30,079
as well in case you had like multiple

1878
01:27:27,198 --> 01:27:33,678
hero over or something i mean it seems

1879
01:27:30,079 --> 01:27:37,279
like you would want to but

1880
01:27:33,679 --> 01:27:37,279
there isn't any actual

1881
01:27:37,760 --> 01:27:41,920
you know there isn't any actual entropy

1882
01:27:40,639 --> 01:27:45,359
um

1883
01:27:41,920 --> 01:27:49,520
flowing into that

1884
01:27:45,359 --> 01:27:52,880
um there really needs to be

1885
01:27:49,520 --> 01:27:55,199
a difference between a prototype and

1886
01:27:52,880 --> 01:27:56,639
a function and like and a forward

1887
01:27:55,198 --> 01:27:59,039
declaration needs to be listed in there

1888
01:27:56,639 --> 01:28:02,719
so you know which one you're jumping to

1889
01:27:59,039 --> 01:28:06,800
um separate issue anyway

1890
01:28:02,719 --> 01:28:09,359
uh so yeah like there's no entropy in

1891
01:28:06,800 --> 01:28:10,159
in a sim region although one might argue

1892
01:28:09,359 --> 01:28:14,719
there should be

1893
01:28:10,158 --> 01:28:19,039
because you know it makes some sense

1894
01:28:14,719 --> 01:28:20,399
but you know i feel almost like you

1895
01:28:19,039 --> 01:28:29,840
should kind of have it here now

1896
01:28:20,399 --> 01:28:29,839
it doesn't which is fine um

1897
01:28:31,840 --> 01:28:35,039
so we could just say that like if you

1898
01:28:33,760 --> 01:28:36,960
call this and it

1899
01:28:35,039 --> 01:28:38,639
and it's not doesn't have one of those

1900
01:28:36,960 --> 01:28:40,560
you know just gives you

1901
01:28:38,639 --> 01:28:41,840
it just gives you the thing back so you

1902
01:28:40,560 --> 01:28:43,120
know you're just like all right you know

1903
01:28:41,840 --> 01:28:45,440
whatever so there's a

1904
01:28:43,119 --> 01:28:46,800
there's one of these and it's like get

1905
01:28:45,439 --> 01:28:48,960
piece asset

1906
01:28:46,800 --> 01:28:51,199
and it's basically just the same as as

1907
01:28:48,960 --> 01:28:53,520
the get tag hash

1908
01:28:51,198 --> 01:28:53,519
um

1909
01:28:54,840 --> 01:28:58,480
call you know which is kind of annoying

1910
01:28:57,279 --> 01:29:01,039
and again it sort of the fact that

1911
01:28:58,479 --> 01:29:05,119
there's duplication there suggests to me

1912
01:29:01,039 --> 01:29:07,119
uh that perhaps we would want to

1913
01:29:05,119 --> 01:29:11,599
think about whether these should just be

1914
01:29:07,119 --> 01:29:25,039
welded into one type permanently

1915
01:29:11,600 --> 01:29:27,600
and i don't know

1916
01:29:25,039 --> 01:29:28,960
uh it's a legitimate question and i i

1917
01:29:27,600 --> 01:29:31,840
don't really know

1918
01:29:28,960 --> 01:29:32,719
um i haven't really thought about it

1919
01:29:31,840 --> 01:29:36,400
enough

1920
01:29:32,719 --> 01:29:37,520
yet uh to really i want that to not be

1921
01:29:36,399 --> 01:29:41,759
by made

1922
01:29:37,520 --> 01:29:45,120
um we need something

1923
01:29:41,760 --> 01:29:48,159
in uh that knows

1924
01:29:45,119 --> 01:29:51,359
that this is up here and

1925
01:29:48,158 --> 01:29:55,119
prevents anything from like

1926
01:29:51,359 --> 01:29:57,359
that will automatically scroll early

1927
01:29:55,119 --> 01:29:58,158
in this side of the window for people

1928
01:29:57,359 --> 01:30:00,479
who have

1929
01:29:58,158 --> 01:30:02,399
a webcam going right like that would be

1930
01:30:00,479 --> 01:30:05,678
pretty baller

1931
01:30:02,399 --> 01:30:10,479
um like a mode you know uh okay

1932
01:30:05,679 --> 01:30:10,480
so you know yeah like

1933
01:30:18,238 --> 01:30:22,399
something like that uh and that feels

1934
01:30:21,039 --> 01:30:24,719
all right to me

1935
01:30:22,399 --> 01:30:24,719
um

1936
01:30:26,238 --> 01:30:29,759
and and this would produce those entity

1937
01:30:28,238 --> 01:30:35,919
visible pieces

1938
01:30:29,760 --> 01:30:38,639
uh or entity um piece assets

1939
01:30:35,920 --> 01:30:40,319
that that will then go in here and these

1940
01:30:38,639 --> 01:30:42,480
are just change hash calls

1941
01:30:40,319 --> 01:30:42,479
right

1942
01:30:44,000 --> 01:30:48,079
so you know i'm okay with that uh that

1943
01:30:47,198 --> 01:30:50,000
seems fine to me

1944
01:30:48,079 --> 01:30:51,359
it does seem like this is this is

1945
01:30:50,000 --> 01:30:53,279
complaining about it

1946
01:30:51,359 --> 01:30:55,359
for some reason i'm not sure why we've

1947
01:30:53,279 --> 01:30:58,399
given it the tags it wants

1948
01:30:55,359 --> 01:31:00,000
right so it should be okay

1949
01:30:58,399 --> 01:31:01,920
but it looks like it's not oh we just

1950
01:31:00,000 --> 01:31:04,158
need change hash to also be forward

1951
01:31:01,920 --> 01:31:08,319
declared is all there is

1952
01:31:04,158 --> 01:31:08,319
to that um

1953
01:31:09,760 --> 01:31:17,840
all right so yeah

1954
01:31:13,039 --> 01:31:17,840
off we go um

1955
01:31:21,840 --> 01:31:24,880
that all looks fine

1956
01:31:26,000 --> 01:31:32,399
and what else what else you got

1957
01:31:30,560 --> 01:31:34,159
change hash already has a body i agree

1958
01:31:32,399 --> 01:31:34,879
with that i don't know why i duplicated

1959
01:31:34,158 --> 01:31:36,719
that twice

1960
01:31:34,880 --> 01:31:38,159
probably just because i don't know what

1961
01:31:36,719 --> 01:31:41,039
i'm doing

1962
01:31:38,158 --> 01:31:42,000
um and then we're good all right so that

1963
01:31:41,039 --> 01:31:46,880
seems fine

1964
01:31:42,000 --> 01:31:46,880
uh this is base asset

1965
01:31:47,439 --> 01:31:51,039
um this is

1966
01:31:52,560 --> 01:31:55,440
change hash

1967
01:31:57,679 --> 01:32:00,800
that space asset

1968
01:32:01,039 --> 01:32:10,600
um that is change hash

1969
01:32:06,000 --> 01:32:14,158
in both cases and base asset

1970
01:32:10,600 --> 01:32:14,159
and off we go

1971
01:32:18,560 --> 01:32:26,159
okay and that seems

1972
01:32:22,399 --> 01:32:28,319
good uh

1973
01:32:26,158 --> 01:32:30,960
and that's probably a good place to end

1974
01:32:28,319 --> 01:32:34,000
it for now

1975
01:32:30,960 --> 01:32:37,439
uh we can finish the rest of the sport

1976
01:32:34,000 --> 01:32:37,439
next weekend

1977
01:32:38,840 --> 01:32:41,840
uh

1978
01:32:44,158 --> 01:32:49,679
oh i just forgot to rename it i'm like

1979
01:32:47,920 --> 01:32:54,399
didn't i just do that and the answer is

1980
01:32:49,679 --> 01:32:57,440
i did but i forgot to type in base asset

1981
01:32:54,399 --> 01:32:58,719
okay so in here if we look at what's

1982
01:32:57,439 --> 01:33:00,799
happening on the entity where we're

1983
01:32:58,719 --> 01:33:01,600
adding these tags right these are tags

1984
01:33:00,800 --> 01:33:04,800
that are then

1985
01:33:01,600 --> 01:33:08,159
meant to like uh affect this

1986
01:33:04,800 --> 01:33:10,239
piece so i assume what we want here is

1987
01:33:08,158 --> 01:33:12,079
like a thing that we just say like okay

1988
01:33:10,238 --> 01:33:14,158
we're gonna try and like set what all

1989
01:33:12,079 --> 01:33:18,479
these tags are

1990
01:33:14,158 --> 01:33:18,479
um and

1991
01:33:18,560 --> 01:33:21,920
like i said i think i wanna do that next

1992
01:33:20,719 --> 01:33:23,760
time because this is pretty

1993
01:33:21,920 --> 01:33:24,960
straightforward to do but but we'd like

1994
01:33:23,760 --> 01:33:26,639
to do it

1995
01:33:24,960 --> 01:33:28,319
cleanly i don't want to get started now

1996
01:33:26,639 --> 01:33:28,960
and then we would just pass it to add

1997
01:33:28,319 --> 01:33:32,238
piece

1998
01:33:28,960 --> 01:33:33,520
here right so that seems pretty

1999
01:33:32,238 --> 01:33:34,638
straightforward and the same would be

2000
01:33:33,520 --> 01:33:37,840
true

2001
01:33:34,639 --> 01:33:40,880
um here so get like tree tags right

2002
01:33:37,840 --> 01:33:44,719
is is uh getting one of these uh

2003
01:33:40,880 --> 01:33:48,639
ndp's uh asset things and then

2004
01:33:44,719 --> 01:33:48,639
gen entity at traversible

2005
01:33:48,840 --> 01:33:51,840
um

2006
01:33:52,399 --> 01:33:57,599
why is that complaining that should be

2007
01:33:53,760 --> 01:33:59,840
correct right because it is now doing

2008
01:33:57,600 --> 01:33:59,840
um

2009
01:34:02,840 --> 01:34:05,840
although

2010
01:34:09,359 --> 01:34:13,759
it's out of order so

2011
01:34:15,198 --> 01:34:21,519
so this creator actually came

2012
01:34:18,399 --> 01:34:22,879
here right uh

2013
01:34:21,520 --> 01:34:25,120
and so that should actually work like

2014
01:34:22,880 --> 01:34:26,560
that and then this like tag lamp

2015
01:34:25,119 --> 01:34:28,639
right that would just get passed in here

2016
01:34:26,560 --> 01:34:30,320
so that all looks right to me now and so

2017
01:34:28,639 --> 01:34:32,880
i think all this will be pretty easy to

2018
01:34:30,319 --> 01:34:36,399
port i don't see any problems there

2019
01:34:32,880 --> 01:34:37,279
um yeah this should be pretty

2020
01:34:36,399 --> 01:34:39,359
straightforward

2021
01:34:37,279 --> 01:34:40,960
so i think that's converging on good i

2022
01:34:39,359 --> 01:34:42,319
don't necessarily know if i'm crazy

2023
01:34:40,960 --> 01:34:43,520
about the fact yeah this is pretty

2024
01:34:42,319 --> 01:34:44,399
straightforward to finish we'll do that

2025
01:34:43,520 --> 01:34:47,520
next weekend

2026
01:34:44,399 --> 01:34:50,799
i'm just not super positive

2027
01:34:47,520 --> 01:34:53,199
that there should really be like both

2028
01:34:50,800 --> 01:34:55,199
things like the tag hash not having the

2029
01:34:53,198 --> 01:34:55,519
variant attached to it like maybe it

2030
01:34:55,198 --> 01:34:59,678
just

2031
01:34:55,520 --> 01:35:02,719
should but i don't know

2032
01:34:59,679 --> 01:35:05,440
all right we'll do a brief q a and then

2033
01:35:02,719 --> 01:35:05,439
call it a day

2034
01:35:07,600 --> 01:35:15,840
can i do this yes

2035
01:35:11,760 --> 01:35:15,840
apparently i can

2036
01:35:40,840 --> 01:35:43,840
ah

2037
01:35:47,679 --> 01:35:52,880
uh so ryan i i told him about the bug

2038
01:35:51,279 --> 01:35:53,519
already though i was just curious if the

2039
01:35:52,880 --> 01:35:56,800
fix

2040
01:35:53,520 --> 01:36:00,400
was happening like i sent him

2041
01:35:56,800 --> 01:36:03,360
that bug last weekend so he knows about

2042
01:36:00,399 --> 01:36:11,679
it i just don't know if he knows

2043
01:36:03,359 --> 01:36:13,439
what is causing it

2044
01:36:11,679 --> 01:36:14,719
are asset tags used for something like

2045
01:36:13,439 --> 01:36:18,158
lister panels

2046
01:36:14,719 --> 01:36:21,039
no we don't

2047
01:36:18,158 --> 01:36:23,118
really use them for that we just use

2048
01:36:21,039 --> 01:36:25,840
them for accessing the assets

2049
01:36:23,118 --> 01:36:25,839
programmatically

2050
01:36:32,880 --> 01:36:36,400
the api you mentioned not existing

2051
01:36:34,639 --> 01:36:39,600
earlier for bulk sending packets

2052
01:36:36,399 --> 01:36:42,158
why doesn't it exist i don't know

2053
01:36:39,600 --> 01:36:43,920
because people don't i don't know

2054
01:36:42,158 --> 01:36:45,920
operating systems stopped evolving in

2055
01:36:43,920 --> 01:36:49,199
like 1985 or something

2056
01:36:45,920 --> 01:36:50,639
i guess because the api does exist on

2057
01:36:49,198 --> 01:36:51,279
special purpose hardware like you can

2058
01:36:50,639 --> 01:36:56,639
get

2059
01:36:51,279 --> 01:36:56,639
vendor-specific network apis

2060
01:36:56,880 --> 01:37:04,560
um that will do that

2061
01:37:01,840 --> 01:37:06,079
they just aren't you know berkeley

2062
01:37:04,560 --> 01:37:08,400
sockets never got updated

2063
01:37:06,079 --> 01:37:10,079
right and windows didn't extend it to do

2064
01:37:08,399 --> 01:37:11,839
it i don't know why

2065
01:37:10,079 --> 01:37:13,600
it seems really obvious to me that you

2066
01:37:11,840 --> 01:37:18,400
would want this

2067
01:37:13,600 --> 01:37:18,840
um and it doesn't seem like a difficult

2068
01:37:18,399 --> 01:37:20,079
thing

2069
01:37:18,840 --> 01:37:23,220
either but

2070
01:37:20,079 --> 01:37:23,220
[Music]

2071
01:37:26,560 --> 01:37:30,480
i think another problem is that people

2072
01:37:28,800 --> 01:37:30,960
don't seem to appreciate that like

2073
01:37:30,479 --> 01:37:35,839
function

2074
01:37:30,960 --> 01:37:35,840
calls are bad right

2075
01:37:37,198 --> 01:37:41,839
um i actually had this argument with

2076
01:37:39,920 --> 01:37:43,359
john blue the other day

2077
01:37:41,840 --> 01:37:45,360
um because he he doesn't think they're

2078
01:37:43,359 --> 01:37:47,359
bad either but i do like like if you're

2079
01:37:45,359 --> 01:37:49,118
gonna call a function

2080
01:37:47,359 --> 01:37:51,359
not only do you have to pay the overhead

2081
01:37:49,118 --> 01:37:54,479
of the function call which is bad

2082
01:37:51,359 --> 01:37:55,839
but the bigger problem is that it can't

2083
01:37:54,479 --> 01:37:58,559
be optimized so

2084
01:37:55,840 --> 01:37:59,600
if an operating system forces you to

2085
01:37:58,560 --> 01:38:02,480
call a function

2086
01:37:59,600 --> 01:38:04,159
every time you want to do something then

2087
01:38:02,479 --> 01:38:04,559
the number of times you can do that

2088
01:38:04,158 --> 01:38:06,719
thing

2089
01:38:04,560 --> 01:38:08,719
is inherently limited to like a very low

2090
01:38:06,719 --> 01:38:10,719
number right

2091
01:38:08,719 --> 01:38:12,399
so you're not going to do like a million

2092
01:38:10,719 --> 01:38:13,439
things a second by calling a function on

2093
01:38:12,399 --> 01:38:14,238
each one of them it's not going to

2094
01:38:13,439 --> 01:38:18,559
happen

2095
01:38:14,238 --> 01:38:20,799
right um and so

2096
01:38:18,560 --> 01:38:20,800
the

2097
01:38:22,800 --> 01:38:26,480
you want to specify data as much as

2098
01:38:25,439 --> 01:38:28,158
possible

2099
01:38:26,479 --> 01:38:29,678
and then the function call should just

2100
01:38:28,158 --> 01:38:32,960
be called like kickoff

2101
01:38:29,679 --> 01:38:36,639
right and you only call kickoff with

2102
01:38:32,960 --> 01:38:41,118
like bulk like you know every 256

2103
01:38:36,639 --> 01:38:43,760
or 1024 of the thing you're doing right

2104
01:38:41,118 --> 01:38:45,920
um and the application can like scale

2105
01:38:43,760 --> 01:38:47,440
that thing

2106
01:38:45,920 --> 01:38:49,440
i don't really feel like that's an

2107
01:38:47,439 --> 01:38:51,279
argument i feel like that's objectively

2108
01:38:49,439 --> 01:38:53,599
true like you can just prove it's true

2109
01:38:51,279 --> 01:38:54,719
just look at the code you can't do

2110
01:38:53,600 --> 01:38:56,800
high-volume stuff

2111
01:38:54,719 --> 01:38:59,840
by calling we we know this already from

2112
01:38:56,800 --> 01:38:59,840
graphics right

2113
01:39:01,039 --> 01:39:04,238
function call overhead like absolutely

2114
01:39:03,198 --> 01:39:07,759
destroyed

2115
01:39:04,238 --> 01:39:09,839
um like

2116
01:39:07,760 --> 01:39:11,119
batch stuff in the old date right like

2117
01:39:09,840 --> 01:39:13,520
the whole problem

2118
01:39:11,118 --> 01:39:15,118
with having to like batch up primitives

2119
01:39:13,520 --> 01:39:15,840
was because the function call overheads

2120
01:39:15,118 --> 01:39:17,198
are too high

2121
01:39:15,840 --> 01:39:18,960
right i mean that's the problem it's

2122
01:39:17,198 --> 01:39:20,238
like the doing that work whatever's

2123
01:39:18,960 --> 01:39:22,239
gonna happen there you want that

2124
01:39:20,238 --> 01:39:24,399
welded into the app side of things

2125
01:39:22,238 --> 01:39:27,519
because it can optimize away a lot of

2126
01:39:24,399 --> 01:39:29,279
the stuff that was happening right

2127
01:39:27,520 --> 01:39:31,040
and so you just don't code shouldn't

2128
01:39:29,279 --> 01:39:32,960
work that way like you don't want code

2129
01:39:31,039 --> 01:39:35,920
to call functions

2130
01:39:32,960 --> 01:39:37,520
when it could just write data you want

2131
01:39:35,920 --> 01:39:38,960
to minimize the number of times you

2132
01:39:37,520 --> 01:39:40,800
actually call a function

2133
01:39:38,960 --> 01:39:42,639
and just maximize the amount of time

2134
01:39:40,800 --> 01:39:44,159
that your code is just writing out data

2135
01:39:42,639 --> 01:39:47,359
because that can be like

2136
01:39:44,158 --> 01:39:50,238
optimized aggressively by you

2137
01:39:47,359 --> 01:39:50,238
or the compiler

2138
01:39:52,840 --> 01:39:55,840
so

2139
01:40:20,840 --> 01:40:25,199
so

2140
01:40:22,158 --> 01:40:26,960
thoughts on unity unreal good oh their

2141
01:40:25,198 --> 01:40:29,198
quality how would engine

2142
01:40:26,960 --> 01:40:32,000
made by you look like so that's too

2143
01:40:29,198 --> 01:40:32,000
broad of a question

2144
01:40:32,560 --> 01:40:37,840
mostly i think what i would say is like

2145
01:40:34,960 --> 01:40:37,840
broadly speaking

2146
01:40:37,920 --> 01:40:40,960
obviously i think there's some kind of

2147
01:40:39,198 --> 01:40:42,559
ridiculous stuff like that i've heard

2148
01:40:40,960 --> 01:40:44,560
like with the unreal engine taking

2149
01:40:42,560 --> 01:40:46,320
like a long time to build and you know

2150
01:40:44,560 --> 01:40:46,800
it's just very large and whatever and

2151
01:40:46,319 --> 01:40:48,000
you know

2152
01:40:46,800 --> 01:40:50,239
there's a bunch of things that are like

2153
01:40:48,000 --> 01:40:52,479
unwieldy and weird and all that

2154
01:40:50,238 --> 01:40:54,238
but on the whole if you just assume that

2155
01:40:52,479 --> 01:40:56,879
like the best way to assess something is

2156
01:40:54,238 --> 01:40:58,879
that the proof is in the pudding

2157
01:40:56,880 --> 01:41:00,159
it seems like unreal engine is probably

2158
01:40:58,880 --> 01:41:02,159
a good engine and

2159
01:41:00,158 --> 01:41:04,238
unity and godot probably aren't at least

2160
01:41:02,158 --> 01:41:07,279
not yet right

2161
01:41:04,238 --> 01:41:08,799
because the unity and unity and godot

2162
01:41:07,279 --> 01:41:12,079
have never seen like a real

2163
01:41:08,800 --> 01:41:15,119
like serious triple a's game

2164
01:41:12,079 --> 01:41:17,279
made on them ever right

2165
01:41:15,118 --> 01:41:18,799
so you know that while that might just

2166
01:41:17,279 --> 01:41:20,880
be for lack of trying

2167
01:41:18,800 --> 01:41:22,159
until you actually see it then you know

2168
01:41:20,880 --> 01:41:23,840
i'm not willing to

2169
01:41:22,158 --> 01:41:26,479
believe that it's really capable of

2170
01:41:23,840 --> 01:41:26,480
producing

2171
01:41:26,719 --> 01:41:30,480
uh you know a real game out of it right

2172
01:41:28,880 --> 01:41:34,880
like a serious

2173
01:41:30,479 --> 01:41:37,839
uh high stress on on the system game

2174
01:41:34,880 --> 01:41:40,000
whereas unreal there's been you know

2175
01:41:37,840 --> 01:41:42,800
countless

2176
01:41:40,000 --> 01:41:43,118
um aaa games shipped on it so you know

2177
01:41:42,800 --> 01:41:46,320
it

2178
01:41:43,118 --> 01:41:50,158
it does that right

2179
01:41:46,319 --> 01:41:53,039
um so like

2180
01:41:50,158 --> 01:41:54,638
i would say that's at least something

2181
01:41:53,039 --> 01:41:56,399
you can hang your hat on if you were

2182
01:41:54,639 --> 01:41:58,239
looking at an engine and going like what

2183
01:41:56,399 --> 01:42:01,439
am i going to use

2184
01:41:58,238 --> 01:42:04,799
at least you know that unreal is

2185
01:42:01,439 --> 01:42:08,960
capable of doing um

2186
01:42:04,800 --> 01:42:08,960
like a really like big

2187
01:42:09,600 --> 01:42:14,079
you know streaming and tons of assets

2188
01:42:13,600 --> 01:42:17,360
and

2189
01:42:14,079 --> 01:42:21,198
cutscenes and facial animation and

2190
01:42:17,359 --> 01:42:21,198
all that stuff you know

2191
01:42:26,840 --> 01:42:29,840
so

2192
01:42:49,439 --> 01:42:52,799
uh no orion the will of the wisp i

2193
01:42:51,679 --> 01:42:55,359
wouldn't consider

2194
01:42:52,800 --> 01:42:56,560
aaa even remotely right it's not even

2195
01:42:55,359 --> 01:42:59,279
like

2196
01:42:56,560 --> 01:43:00,560
it doesn't even it's not even really 3d

2197
01:42:59,279 --> 01:43:01,439
in the sense that it doesn't have to

2198
01:43:00,560 --> 01:43:03,840
deal with like

2199
01:43:01,439 --> 01:43:06,319
looking out over large horizons and so

2200
01:43:03,840 --> 01:43:09,600
on right

2201
01:43:06,319 --> 01:43:13,599
it's it's just a platformer right like

2202
01:43:09,600 --> 01:43:14,800
i mean that just doesn't bring in a lot

2203
01:43:13,600 --> 01:43:16,239
of

2204
01:43:14,800 --> 01:43:17,840
the more advanced problems that you

2205
01:43:16,238 --> 01:43:21,599
would face if you're trying to do you

2206
01:43:17,840 --> 01:43:21,600
know grand theft auto or something right

2207
01:43:22,840 --> 01:43:25,840
so

2208
01:43:28,560 --> 01:43:31,520
it doesn't mean you can't make good

2209
01:43:29,760 --> 01:43:32,480
games i've played like good games made

2210
01:43:31,520 --> 01:43:35,760
in unity right

2211
01:43:32,479 --> 01:43:38,879
like um i

2212
01:43:35,760 --> 01:43:40,400
i i i don't know maybe

2213
01:43:38,880 --> 01:43:42,800
not off the top of my head but i mean i

2214
01:43:40,399 --> 01:43:44,719
know that i have right like so it you

2215
01:43:42,800 --> 01:43:48,159
can make good games they're just not

2216
01:43:44,719 --> 01:43:51,439
broad expansive modern games

2217
01:43:48,158 --> 01:43:53,198
are not capable of doing i i've never

2218
01:43:51,439 --> 01:43:54,799
seen it done in unity like maybe you can

2219
01:43:53,198 --> 01:43:55,198
but i've never seen anyone actually do

2220
01:43:54,800 --> 01:43:56,719
it

2221
01:43:55,198 --> 01:43:58,960
and so until someone actually does i

2222
01:43:56,719 --> 01:44:03,039
would say that's kind of a

2223
01:43:58,960 --> 01:44:03,039
negative checkmark um

2224
01:44:03,359 --> 01:44:06,960
against that because it's like you need

2225
01:44:05,439 --> 01:44:08,158
that proof of concept like you want to

2226
01:44:06,960 --> 01:44:10,319
see

2227
01:44:08,158 --> 01:44:11,920
you know gears of war 17 or whatever

2228
01:44:10,319 --> 01:44:13,840
made in this engine so you know like

2229
01:44:11,920 --> 01:44:16,639
okay it can do that right like they've

2230
01:44:13,840 --> 01:44:18,960
worked out all of those problems

2231
01:44:16,639 --> 01:44:20,079
and i just haven't seen that happen in

2232
01:44:18,960 --> 01:44:22,239
unity or godot

2233
01:44:20,079 --> 01:44:23,279
so until they get to that point i would

2234
01:44:22,238 --> 01:44:24,559
say you know

2235
01:44:23,279 --> 01:44:26,238
if you're talking about picking an

2236
01:44:24,560 --> 01:44:27,840
engine the safer bet is probably going

2237
01:44:26,238 --> 01:44:28,638
to be something like unreal because you

2238
01:44:27,840 --> 01:44:31,520
know it

2239
01:44:28,639 --> 01:44:32,880
it's not going to like roll over and die

2240
01:44:31,520 --> 01:44:34,880
when you need to do whatever the thing

2241
01:44:32,880 --> 01:44:36,319
is that you're going to need to do

2242
01:44:34,880 --> 01:44:39,039
separately on ori and the will of the

2243
01:44:36,319 --> 01:44:41,039
wits i heard absolute

2244
01:44:39,039 --> 01:44:42,158
terrifying horror stories from the devs

2245
01:44:41,039 --> 01:44:43,840
on that

2246
01:44:42,158 --> 01:44:45,519
that like asset rebuilds were taking

2247
01:44:43,840 --> 01:44:47,600
like eight hours and things like

2248
01:44:45,520 --> 01:44:49,040
i don't even remember what like the

2249
01:44:47,600 --> 01:44:50,159
ridiculous things i was hearing but it's

2250
01:44:49,039 --> 01:44:52,639
like

2251
01:44:50,158 --> 01:44:53,519
anyone who's tried to make a serious

2252
01:44:52,639 --> 01:44:56,639
game at all

2253
01:44:53,520 --> 01:44:58,239
in unity i've heard really bad horror

2254
01:44:56,639 --> 01:45:00,400
stories from them about it

2255
01:44:58,238 --> 01:45:02,000
like looking at the presentation the

2256
01:45:00,399 --> 01:45:04,158
guys from inside did on

2257
01:45:02,000 --> 01:45:06,479
having to like micromanage the garbage

2258
01:45:04,158 --> 01:45:08,479
collector in unity to get the thing to

2259
01:45:06,479 --> 01:45:10,319
to like have a constant like it just

2260
01:45:08,479 --> 01:45:11,599
doesn't sound like a real engine to me

2261
01:45:10,319 --> 01:45:13,198
yet right

2262
01:45:11,600 --> 01:45:15,119
unity sounds like more of a thing for

2263
01:45:13,198 --> 01:45:18,399
like kind of like

2264
01:45:15,118 --> 01:45:22,399
small scale not

2265
01:45:18,399 --> 01:45:26,879
particularly large asset based

2266
01:45:22,399 --> 01:45:30,719
stuff right um

2267
01:45:26,880 --> 01:45:32,960
so if a game's kind of a little bit more

2268
01:45:30,719 --> 01:45:34,800
like has a lot less of those sorts of

2269
01:45:32,960 --> 01:45:39,039
things in it

2270
01:45:34,800 --> 01:45:40,320
um then then maybe uni's fine but i i

2271
01:45:39,039 --> 01:45:42,800
just wouldn't trust it

2272
01:45:40,319 --> 01:45:44,079
yet and they might get there someday but

2273
01:45:42,800 --> 01:45:45,600
it just like at the moment

2274
01:45:44,079 --> 01:45:48,319
i would say unreal just kind of seems

2275
01:45:45,600 --> 01:45:50,079
like the safer bet

2276
01:45:48,319 --> 01:45:51,359
that said i don't care so i don't spend

2277
01:45:50,079 --> 01:45:52,800
much time thinking about this because i

2278
01:45:51,359 --> 01:45:54,880
literally don't care

2279
01:45:52,800 --> 01:45:56,560
um but if you know if you had to ask me

2280
01:45:54,880 --> 01:45:58,079
data free like

2281
01:45:56,560 --> 01:46:01,199
you know you don't get to go evaluate

2282
01:45:58,079 --> 01:46:01,198
everything carefully but

2283
01:46:01,600 --> 01:46:07,039
you have to pick one right now i would

2284
01:46:03,118 --> 01:46:07,039
say just unreal for safety reasons

2285
01:46:09,279 --> 01:46:13,840
that's all

2286
01:46:51,520 --> 01:46:55,360
have you ever explained bit fields and

2287
01:46:53,118 --> 01:46:56,880
if not can you and as a solution today i

2288
01:46:55,359 --> 01:47:00,079
just saw that in old code

2289
01:46:56,880 --> 01:47:03,359
base to do the flags so you know i

2290
01:47:00,079 --> 01:47:06,399
i can sort of explain bit fields but

2291
01:47:03,359 --> 01:47:09,279
i can't really offer

2292
01:47:06,399 --> 01:47:09,759
much in the way of useful uh insight

2293
01:47:09,279 --> 01:47:14,079
there

2294
01:47:09,760 --> 01:47:17,039
only because i kind of got trained

2295
01:47:14,079 --> 01:47:17,920
out of using bit fields in the old days

2296
01:47:17,039 --> 01:47:21,198
because

2297
01:47:17,920 --> 01:47:23,920
so in in um

2298
01:47:21,198 --> 01:47:25,678
like in the code that you see us right

2299
01:47:23,920 --> 01:47:27,679
on like handmade here or whatever

2300
01:47:25,679 --> 01:47:29,279
you see us do basically what bit fields

2301
01:47:27,679 --> 01:47:32,319
were meant to do

2302
01:47:29,279 --> 01:47:35,279
which is like if maybe you want

2303
01:47:32,319 --> 01:47:37,840
a series of booleans but you don't want

2304
01:47:35,279 --> 01:47:37,840
to pay for them

2305
01:47:38,479 --> 01:47:43,198
you can pack them in as bits of a single

2306
01:47:41,118 --> 01:47:45,039
value so you can have like a u32 that's

2307
01:47:43,198 --> 01:47:46,079
32 bits and each bit can stand for a

2308
01:47:45,039 --> 01:47:48,479
different

2309
01:47:46,079 --> 01:47:50,158
boolean value rather than having bool

2310
01:47:48,479 --> 01:47:53,519
you know brackets 32

2311
01:47:50,158 --> 01:47:55,118
right for an array of 32 billions

2312
01:47:53,520 --> 01:47:56,960
bit fields were meant to like simplify

2313
01:47:55,118 --> 01:47:58,719
that process for you um

2314
01:47:56,960 --> 01:48:00,560
so that you can basically say like hey

2315
01:47:58,719 --> 01:48:01,359
here's the bit field and bit 1 is this

2316
01:48:00,560 --> 01:48:04,480
but 2 is this

2317
01:48:01,359 --> 01:48:08,319
bits 3 and 4 stand for this

2318
01:48:04,479 --> 01:48:10,000
and it's kind of cool but i got sort of

2319
01:48:08,319 --> 01:48:12,079
in the habit of not using it because in

2320
01:48:10,000 --> 01:48:13,439
the early days the compiler would not do

2321
01:48:12,079 --> 01:48:15,679
a very good job

2322
01:48:13,439 --> 01:48:16,638
of producing the code you actually

2323
01:48:15,679 --> 01:48:20,079
wanted

2324
01:48:16,639 --> 01:48:21,600
when you were using those so my main

2325
01:48:20,079 --> 01:48:24,880
reason i don't use them

2326
01:48:21,600 --> 01:48:28,000
is historical so

2327
01:48:24,880 --> 01:48:31,359
nowadays compilers might

2328
01:48:28,000 --> 01:48:35,118
generally always output

2329
01:48:31,359 --> 01:48:37,359
good quality code for bit fields

2330
01:48:35,118 --> 01:48:38,960
and if that was the case it's probably

2331
01:48:37,359 --> 01:48:40,719
dumb that i'm not using them because

2332
01:48:38,960 --> 01:48:44,239
they would read

2333
01:48:40,719 --> 01:48:46,880
um better but i don't know

2334
01:48:44,238 --> 01:48:48,559
and so the main reason i don't use them

2335
01:48:46,880 --> 01:48:50,719
is i just haven't gone and done that

2336
01:48:48,560 --> 01:48:51,920
work to see whether they are actually

2337
01:48:50,719 --> 01:48:55,279
usable

2338
01:48:51,920 --> 01:48:58,158
and interesting or not right

2339
01:48:55,279 --> 01:48:58,719
it may be that there are reasons to use

2340
01:48:58,158 --> 01:49:00,559
them now

2341
01:48:58,719 --> 01:49:02,319
it may be that there are still reasons

2342
01:49:00,560 --> 01:49:07,520
not to use them

2343
01:49:02,319 --> 01:49:09,679
um and like that's just something that

2344
01:49:07,520 --> 01:49:10,960
you know i haven't done and couldn't

2345
01:49:09,679 --> 01:49:13,840
tell you

2346
01:49:10,960 --> 01:49:14,239
but it's basically to get rid of like

2347
01:49:13,840 --> 01:49:15,760
little

2348
01:49:14,238 --> 01:49:18,079
like well you know what we just

2349
01:49:15,760 --> 01:49:21,280
literally did one in fact

2350
01:49:18,079 --> 01:49:24,399
um it's basically to get rid of

2351
01:49:21,279 --> 01:49:25,599
uh of this sort of code right

2352
01:49:24,399 --> 01:49:28,000
i mean you can see that this kind of

2353
01:49:25,599 --> 01:49:30,400
code is stupid right like there's no

2354
01:49:28,000 --> 01:49:32,800
reason i had to write that i could i

2355
01:49:30,399 --> 01:49:34,960
it's way better if i just said

2356
01:49:32,800 --> 01:49:37,039
here's a value that's got eight bits for

2357
01:49:34,960 --> 01:49:41,039
the category

2358
01:49:37,039 --> 01:49:42,960
um and then you know 16 bits for each

2359
01:49:41,039 --> 01:49:45,039
additional thing or whatever 20 what's

2360
01:49:42,960 --> 01:49:49,039
whatever the remaining amount is so

2361
01:49:45,039 --> 01:49:51,198
we might so two four so 14. so 14 bits

2362
01:49:49,039 --> 01:49:52,238
for these each of these and eight bits

2363
01:49:51,198 --> 01:49:55,519
for this

2364
01:49:52,238 --> 01:49:59,039
right like that would be way better

2365
01:49:55,520 --> 01:49:59,520
right so a bit field was meant to do

2366
01:49:59,039 --> 01:50:00,960
that

2367
01:49:59,520 --> 01:50:02,880
was meant to make it so you didn't have

2368
01:50:00,960 --> 01:50:06,239
to write this you could just say result

2369
01:50:02,880 --> 01:50:07,840
dot cat equals cat result.e0 and it

2370
01:50:06,238 --> 01:50:09,279
would do like the bit shuffles and

2371
01:50:07,840 --> 01:50:12,400
packing for you

2372
01:50:09,279 --> 01:50:14,639
right um

2373
01:50:12,399 --> 01:50:16,559
so i'm just not in the habit of doing

2374
01:50:14,639 --> 01:50:20,639
that because i find

2375
01:50:16,560 --> 01:50:22,960
uh that i like learned not to do it

2376
01:50:20,639 --> 01:50:26,880
long ago and then never revisited it but

2377
01:50:22,960 --> 01:50:26,880
so there might be reasons now

2378
01:50:27,359 --> 01:50:32,639
but you know

2379
01:50:35,359 --> 01:50:38,960
you can pack the booleans in one or two

2380
01:50:37,198 --> 01:50:39,678
bytes instead of taking up a byte for

2381
01:50:38,960 --> 01:50:43,679
each one

2382
01:50:39,679 --> 01:50:43,679
yeah but we already don't do that right

2383
01:50:46,238 --> 01:50:50,319
like we just use we just use actual ands

2384
01:50:49,520 --> 01:50:53,679
and ors

2385
01:50:50,319 --> 01:50:56,559
when we're doing bit fields right

2386
01:50:53,679 --> 01:50:59,760
so we don't really care about that it'd

2387
01:50:56,560 --> 01:50:59,760
just be different notation

2388
01:51:05,039 --> 01:51:09,679
um we don't really overtly use version

2389
01:51:08,960 --> 01:51:13,279
control

2390
01:51:09,679 --> 01:51:15,520
on the stream but it is updated to the

2391
01:51:13,279 --> 01:51:17,039
github right like the github does keep

2392
01:51:15,520 --> 01:51:19,599
track of the code i don't know if you

2393
01:51:17,039 --> 01:51:22,639
saw that today right so like every

2394
01:51:19,599 --> 01:51:25,360
time we finish an episode

2395
01:51:22,639 --> 01:51:27,599
the code goes up on the private github

2396
01:51:25,359 --> 01:51:27,598
um

2397
01:51:28,560 --> 01:51:36,639
and you know

2398
01:51:32,560 --> 01:51:41,039
we can look at it so if we want to know

2399
01:51:36,639 --> 01:51:44,480
what the code was on some day

2400
01:51:41,039 --> 01:51:47,439
you know we can scroll back and say like

2401
01:51:44,479 --> 01:51:47,439
all right on day

2402
01:51:47,760 --> 01:51:52,079
something something wow this is

2403
01:51:50,800 --> 01:51:54,800
inconvenient

2404
01:51:52,079 --> 01:51:57,599
wow you you couldn't list more than like

2405
01:51:54,800 --> 01:51:59,679
10 of these at a time

2406
01:51:57,599 --> 01:52:01,920
the web ladies and gentlemen we're

2407
01:51:59,679 --> 01:52:03,359
listing a thousand items is considered

2408
01:52:01,920 --> 01:52:05,679
like an impossible problem that you

2409
01:52:03,359 --> 01:52:08,880
would never try to solve

2410
01:52:05,679 --> 01:52:10,158
um so you know you can go to like one of

2411
01:52:08,880 --> 01:52:12,159
these things and you can say

2412
01:52:10,158 --> 01:52:14,000
like okay so here was the capturing the

2413
01:52:12,158 --> 01:52:16,238
light data day or whatever and

2414
01:52:14,000 --> 01:52:17,520
and we could like look at look at it or

2415
01:52:16,238 --> 01:52:19,839
whatever

2416
01:52:17,520 --> 01:52:19,840
um

2417
01:52:20,639 --> 01:52:25,359
so you know off you go

2418
01:52:28,560 --> 01:52:32,080
all right i'm gonna wrap it up um and

2419
01:52:31,279 --> 01:52:34,399
one last thing

2420
01:52:32,079 --> 01:52:35,840
is so also i would i would sort of say

2421
01:52:34,399 --> 01:52:38,399
separately

2422
01:52:35,840 --> 01:52:40,239
like in terms of like quote unquote bit

2423
01:52:38,399 --> 01:52:42,839
fields for networking

2424
01:52:40,238 --> 01:52:45,598
so if you're concerned about space for

2425
01:52:42,840 --> 01:52:47,440
networking um

2426
01:52:45,599 --> 01:52:49,199
and you're actually trying to do

2427
01:52:47,439 --> 01:52:52,319
something there that's about

2428
01:52:49,198 --> 01:52:54,479
minimizing transmission bandwidth

2429
01:52:52,319 --> 01:52:55,920
then actually what you what you actually

2430
01:52:54,479 --> 01:52:59,598
want is a compressor

2431
01:52:55,920 --> 01:53:02,079
so you don't want bitfields

2432
01:52:59,599 --> 01:53:03,520
um bitfields really have nothing to

2433
01:53:02,079 --> 01:53:06,639
offer what you want

2434
01:53:03,520 --> 01:53:07,199
is a compressor because compressors look

2435
01:53:06,639 --> 01:53:10,400
across

2436
01:53:07,198 --> 01:53:14,399
bits anyway and you'll just get a lot

2437
01:53:10,399 --> 01:53:17,519
better probably in most circumstances

2438
01:53:14,399 --> 01:53:18,319
than you know if you're gonna for like

2439
01:53:17,520 --> 01:53:21,360
bit fields

2440
01:53:18,319 --> 01:53:24,399
don't have anything really to do

2441
01:53:21,359 --> 01:53:25,198
with that but could explain the downside

2442
01:53:24,399 --> 01:53:28,479
of the json

2443
01:53:25,198 --> 01:53:31,279
data format well there isn't

2444
01:53:28,479 --> 01:53:32,799
so there's a lot of downsides to the

2445
01:53:31,279 --> 01:53:34,639
json data format but

2446
01:53:32,800 --> 01:53:37,520
it's not a bad data format like i don't

2447
01:53:34,639 --> 01:53:40,000
have a problem with json

2448
01:53:37,520 --> 01:53:41,760
in terms of the actual like structure of

2449
01:53:40,000 --> 01:53:44,719
json

2450
01:53:41,760 --> 01:53:46,320
the primary problem with json is that

2451
01:53:44,719 --> 01:53:48,000
it's not a very good

2452
01:53:46,319 --> 01:53:49,599
like i don't really think text data

2453
01:53:48,000 --> 01:53:52,800
formats are really that great

2454
01:53:49,599 --> 01:53:54,480
most of the time and so the major

2455
01:53:52,800 --> 01:53:57,520
problem with json

2456
01:53:54,479 --> 01:54:00,799
as a data format is the lack of

2457
01:53:57,520 --> 01:54:04,880
like the fact that it's not

2458
01:54:00,800 --> 01:54:07,039
binary is most of it right

2459
01:54:04,880 --> 01:54:08,639
like if if instead if it was based

2460
01:54:07,039 --> 01:54:10,000
exactly the same as it is right now but

2461
01:54:08,639 --> 01:54:11,760
it was binary and subtext

2462
01:54:10,000 --> 01:54:13,920
i would probably not have much of a

2463
01:54:11,760 --> 01:54:15,440
problem with it honestly

2464
01:54:13,920 --> 01:54:17,039
there's a couple things that they should

2465
01:54:15,439 --> 01:54:18,479
have done like they should have had a

2466
01:54:17,039 --> 01:54:22,079
way for you to pull out

2467
01:54:18,479 --> 01:54:25,039
repetitive types so basically like

2468
01:54:22,079 --> 01:54:25,679
instead of having to include in a giant

2469
01:54:25,039 --> 01:54:27,920
array

2470
01:54:25,679 --> 01:54:29,039
the name of each thing every time you

2471
01:54:27,920 --> 01:54:31,118
should be able to say

2472
01:54:29,039 --> 01:54:32,960
this is an array and the names are this

2473
01:54:31,118 --> 01:54:33,920
this and this and then every data member

2474
01:54:32,960 --> 01:54:38,719
is just the data

2475
01:54:33,920 --> 01:54:41,039
right so there's like rep repetition

2476
01:54:38,719 --> 01:54:43,198
stupidity in jstone that probably just

2477
01:54:41,039 --> 01:54:46,639
should have gotten rid of

2478
01:54:43,198 --> 01:54:47,198
um but like it's the text nature of it

2479
01:54:46,639 --> 01:54:49,039
that i think

2480
01:54:47,198 --> 01:54:51,279
is really the problem it should have

2481
01:54:49,039 --> 01:54:53,439
probably just been a binary format

2482
01:54:51,279 --> 01:54:55,599
and then if you wanted to have a text

2483
01:54:53,439 --> 01:54:57,359
format that you could convert that to

2484
01:54:55,599 --> 01:54:59,119
when you need to like edit it by hand or

2485
01:54:57,359 --> 01:55:01,759
something that's fine

2486
01:54:59,118 --> 01:55:04,079
but most of the time like text is just a

2487
01:55:01,760 --> 01:55:07,119
really bad idea and not just because

2488
01:55:04,079 --> 01:55:08,639
text tends to be bloated but actually

2489
01:55:07,118 --> 01:55:10,639
more because text tends to be

2490
01:55:08,639 --> 01:55:11,599
error-prone so there's just a lot of

2491
01:55:10,639 --> 01:55:13,920
stuff it's like

2492
01:55:11,599 --> 01:55:15,360
where people screw up the escaping of

2493
01:55:13,920 --> 01:55:17,199
things and you have to like

2494
01:55:15,359 --> 01:55:19,839
have all this weirdness in the parser to

2495
01:55:17,198 --> 01:55:21,678
like handle the escaping properly

2496
01:55:19,840 --> 01:55:24,400
um and you get all of these like

2497
01:55:21,679 --> 01:55:26,719
security exploits and round-trip errors

2498
01:55:24,399 --> 01:55:28,238
and like things that come out with weird

2499
01:55:26,719 --> 01:55:29,279
characters in the output and all this

2500
01:55:28,238 --> 01:55:31,198
garbage

2501
01:55:29,279 --> 01:55:32,639
because it's just because it was taxed

2502
01:55:31,198 --> 01:55:33,919
instead of binary right and if you just

2503
01:55:32,639 --> 01:55:35,440
had had it be binary none of those

2504
01:55:33,920 --> 01:55:37,599
things would have happened

2505
01:55:35,439 --> 01:55:37,598
so

2506
01:55:40,319 --> 01:55:44,319
why do you use 3gb bulls instead of

2507
01:55:41,920 --> 01:55:46,639
something smaller well we would

2508
01:55:44,319 --> 01:55:48,880
because usually we don't care about the

2509
01:55:46,639 --> 01:55:52,079
size that a boolean is because

2510
01:55:48,880 --> 01:55:52,800
on the stack like we probably just want

2511
01:55:52,079 --> 01:55:54,639
things

2512
01:55:52,800 --> 01:55:55,920
to work the way that they work and we

2513
01:55:54,639 --> 01:55:57,599
don't care so we just

2514
01:55:55,920 --> 01:55:59,199
think of all integers as being roughly

2515
01:55:57,599 --> 01:56:01,119
interchangeable

2516
01:55:59,198 --> 01:56:03,118
when we actually care about the size we

2517
01:56:01,118 --> 01:56:05,359
just make a bit vector so we just make

2518
01:56:03,118 --> 01:56:07,359
like a u32 that's like flags

2519
01:56:05,359 --> 01:56:09,279
and then we define one bit per flag when

2520
01:56:07,359 --> 01:56:12,960
we actually care about the size

2521
01:56:09,279 --> 01:56:14,000
right so the way to say it was either we

2522
01:56:12,960 --> 01:56:15,599
care about the size or we

2523
01:56:14,000 --> 01:56:17,679
don't when we don't we just leave them

2524
01:56:15,599 --> 01:56:19,199
32-bit because that way we don't have to

2525
01:56:17,679 --> 01:56:20,000
worry about whether there's weird like

2526
01:56:19,198 --> 01:56:21,359
okay at half

2527
01:56:20,000 --> 01:56:22,960
the compiler is now thinking about the

2528
01:56:21,359 --> 01:56:23,839
fact that this thing had to be a byte so

2529
01:56:22,960 --> 01:56:26,079
if it sets

2530
01:56:23,840 --> 01:56:27,520
a 32-bit value equal to the 8-bit value

2531
01:56:26,079 --> 01:56:29,118
it's got a truncate the top

2532
01:56:27,520 --> 01:56:30,960
which may be slower on certain blah blah

2533
01:56:29,118 --> 01:56:32,639
blah blah blah blah right we just say

2534
01:56:30,960 --> 01:56:33,920
look everything's 32-bit

2535
01:56:32,639 --> 01:56:36,960
so the compiler doesn't have to worry

2536
01:56:33,920 --> 01:56:40,319
about it and if we actually care

2537
01:56:36,960 --> 01:56:43,920
about the actual size of something

2538
01:56:40,319 --> 01:56:45,679
uh then we use a

2539
01:56:43,920 --> 01:56:47,118
bit like a bit vector so that we know

2540
01:56:45,679 --> 01:56:50,079
that bulls just take up one bit

2541
01:56:47,118 --> 01:56:51,439
a piece right have you heard about z

2542
01:56:50,079 --> 01:56:53,599
standard

2543
01:56:51,439 --> 01:56:55,359
developed by facebook um you know i've

2544
01:56:53,599 --> 01:56:57,119
heard about it a little bit

2545
01:56:55,359 --> 01:56:58,719
at the moment like it's pretty obvious

2546
01:56:57,118 --> 01:57:00,319
that rad has the best compression

2547
01:56:58,719 --> 01:57:01,359
technology and it's like drastically

2548
01:57:00,319 --> 01:57:03,118
better than things like z

2549
01:57:01,359 --> 01:57:04,719
standard so i don't really tend to go

2550
01:57:03,118 --> 01:57:06,559
look at like how

2551
01:57:04,719 --> 01:57:09,039
much worse is facebook's compression

2552
01:57:06,560 --> 01:57:11,920
than raz or something

2553
01:57:09,039 --> 01:57:13,760
like i might if i cared enough about it

2554
01:57:11,920 --> 01:57:15,520
to go look but

2555
01:57:13,760 --> 01:57:17,199
you know since i know it's kind of

2556
01:57:15,520 --> 01:57:25,840
inferior tech i haven't bothered to look

2557
01:57:17,198 --> 01:57:25,839
at what it actually is

2558
01:57:30,319 --> 01:57:34,399
all right let's wrap it up

2559
01:57:37,279 --> 01:57:40,880
all right thank you everyone for joining

2560
01:57:39,118 --> 01:57:42,319
me for another episode of handmade hero

2561
01:57:40,880 --> 01:57:43,840
it's been a pleasure coding with you as

2562
01:57:42,319 --> 01:57:45,118
always if you would like to follow along

2563
01:57:43,840 --> 01:57:47,279
throughs at home you can always go to

2564
01:57:45,118 --> 01:57:48,559
handmadehero.org and pre-order the game

2565
01:57:47,279 --> 01:57:50,079
it comes with a source code so you can

2566
01:57:48,560 --> 01:57:52,639
follow along

2567
01:57:50,079 --> 01:57:53,599
um i will be reposting the schedule and

2568
01:57:52,639 --> 01:57:55,359
i also

2569
01:57:53,599 --> 01:57:57,360
uh i noticed that yeah the embedded

2570
01:57:55,359 --> 01:57:58,559
episode guide while conveniently on the

2571
01:57:57,359 --> 01:58:00,479
front page now

2572
01:57:58,560 --> 01:58:02,719
that allows you to search for old

2573
01:58:00,479 --> 01:58:05,118
episodes and stuff like that and so on

2574
01:58:02,719 --> 01:58:06,000
um i know it's a little bit hard to use

2575
01:58:05,118 --> 01:58:09,279
because it doesn't seem

2576
01:58:06,000 --> 01:58:11,359
to have a full screen option in here but

2577
01:58:09,279 --> 01:58:14,000
i will try to add

2578
01:58:11,359 --> 01:58:16,158
um a button in here for you for full

2579
01:58:14,000 --> 01:58:18,399
screen at some point

2580
01:58:16,158 --> 01:58:20,719
uh so we'll take a look at that but

2581
01:58:18,399 --> 01:58:22,479
otherwise yeah handmadehero.org if you

2582
01:58:20,719 --> 01:58:24,079
need any resources if you want

2583
01:58:22,479 --> 01:58:25,439
to pre-order the game gas source code if

2584
01:58:24,079 --> 01:58:26,000
you want the schedule or if you want to

2585
01:58:25,439 --> 01:58:28,079
look up

2586
01:58:26,000 --> 01:58:30,079
stuff that happened on old episodes uh

2587
01:58:28,079 --> 01:58:31,840
it's all in one place now

2588
01:58:30,079 --> 01:58:34,479
um and i'll try to get that updated with

2589
01:58:31,840 --> 01:58:36,960
a button for for everyone

2590
01:58:34,479 --> 01:58:37,678
uh and we'll leave it at that that's it

2591
01:58:36,960 --> 01:58:39,679
for today

2592
01:58:37,679 --> 01:58:41,520
uh see you all back here probably next

2593
01:58:39,679 --> 01:58:43,440
weekend keep an eye on the schedule if

2594
01:58:41,520 --> 01:58:44,639
you want to know when uh until then have

2595
01:58:43,439 --> 01:58:45,439
fun programming and i'll see everyone on

2596
01:58:44,639 --> 01:58:49,840
the internet

2597
01:58:45,439 --> 01:58:49,839
take it easy everybody

