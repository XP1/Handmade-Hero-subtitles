1
00:00:00,000 --> 00:00:05,759
start recording hello everyone and

2
00:00:03,810 --> 00:00:08,400
welcome back to handmade hero the show

3
00:00:05,759 --> 00:00:10,650
recode a complete game live on stream we

4
00:00:08,400 --> 00:00:14,298
are coming back up

5
00:00:10,650 --> 00:00:17,160
alpha a long and distinguished break

6
00:00:14,298 --> 00:00:21,170
it's been a couple weeks here without a

7
00:00:17,160 --> 00:00:21,170
handmade hero good to see everyone again

8
00:00:21,920 --> 00:00:27,289
and it's good to be back programming

9
00:00:26,609 --> 00:00:32,460
with you guys

10
00:00:27,289 --> 00:00:35,429
now here is question we stopped in the

11
00:00:32,460 --> 00:00:38,549
middle of doing our printf routine and I

12
00:00:35,429 --> 00:00:41,789
believe we had pretty much suppressed

13
00:00:38,549 --> 00:00:44,308
surprisingly but surprisingly quickly we

14
00:00:41,789 --> 00:00:46,950
were able to reproduce like all of

15
00:00:44,308 --> 00:00:48,659
printf formatting and everything else in

16
00:00:46,950 --> 00:00:53,160
just a really short period of time which

17
00:00:48,659 --> 00:00:55,288
is great but I think we may have gotten

18
00:00:53,159 --> 00:00:57,750
ourselves down to the point where the

19
00:00:55,289 --> 00:01:01,140
only thing we actually have left to do

20
00:00:57,750 --> 00:01:05,789
at the moment is floating-point printout

21
00:01:01,140 --> 00:01:09,390
so I think we have kind of gotten

22
00:01:05,790 --> 00:01:11,729
ourselves into a bit of a a bit of a

23
00:01:09,390 --> 00:01:14,219
bind because if we want to finish this

24
00:01:11,728 --> 00:01:16,408
part section of the code and move on I

25
00:01:14,219 --> 00:01:18,269
think we have no choice but to

26
00:01:16,409 --> 00:01:21,650
essentially tackle the floating point

27
00:01:18,269 --> 00:01:25,188
printout problem which is a pretty nasty

28
00:01:21,650 --> 00:01:29,549
problem it's not great it is not great

29
00:01:25,188 --> 00:01:31,949
so let's let's double check to make sure

30
00:01:29,549 --> 00:01:33,450
that that's the case but I think it is

31
00:01:31,950 --> 00:01:36,719
and so I think we're just gonna have to

32
00:01:33,450 --> 00:01:40,770
deal with it now we're here on day 328

33
00:01:36,719 --> 00:01:43,048
which of course if you are line follow

34
00:01:40,769 --> 00:01:44,339
along with me day 327 source code is

35
00:01:43,049 --> 00:01:46,649
that is the source code you're going to

36
00:01:44,340 --> 00:01:48,359
want to start with I believe let's just

37
00:01:46,649 --> 00:01:49,560
double let's let's double check to make

38
00:01:48,359 --> 00:01:50,459
sure that that's correct since we've

39
00:01:49,560 --> 00:01:53,009
been away for a while

40
00:01:50,459 --> 00:01:56,879
I want to make sure we're we're on the

41
00:01:53,009 --> 00:02:03,859
right day day 328 oh no that's not good

42
00:01:56,879 --> 00:02:06,868
it says day 328 we need to be on day 329

43
00:02:03,859 --> 00:02:10,409
right because already is the day 328 I

44
00:02:06,868 --> 00:02:14,610
don't know why that got set wrong okay

45
00:02:10,409 --> 00:02:15,810
all right so day 328 is the source code

46
00:02:14,610 --> 00:02:20,340
then if you're so sweet starting with

47
00:02:15,810 --> 00:02:21,840
here on day 329 and let's go ahead and

48
00:02:20,340 --> 00:02:24,120
just jump into the code because it's

49
00:02:21,840 --> 00:02:26,039
been a long time and we'll probably just

50
00:02:24,120 --> 00:02:29,460
need to sort of reef Emilio's ourselves

51
00:02:26,039 --> 00:02:34,079
a little bit with what's going on so

52
00:02:29,460 --> 00:02:36,180
here we go back into handmade do our

53
00:02:34,080 --> 00:02:39,000
little build everything's building okay

54
00:02:36,180 --> 00:02:39,599
so that's great we can you know what I

55
00:02:39,000 --> 00:02:42,780
wonder

56
00:02:39,599 --> 00:02:44,280
so a fresh build is one point five seven

57
00:02:42,780 --> 00:02:47,219
four seconds right

58
00:02:44,280 --> 00:02:49,710
what's a warm build one point three oh

59
00:02:47,219 --> 00:02:52,710
nine so not that much different between

60
00:02:49,710 --> 00:02:55,849
a warm build and a and they and a cold

61
00:02:52,710 --> 00:02:58,050
build they're about 0.2 seconds anyway

62
00:02:55,849 --> 00:03:00,469
so let's take a look at what's going on

63
00:02:58,050 --> 00:03:03,360
here I think like I said that we have

64
00:03:00,469 --> 00:03:05,400
just everything kind of working except

65
00:03:03,360 --> 00:03:06,750
for the floating point printout and you

66
00:03:05,400 --> 00:03:09,719
know you can remember sort of what was

67
00:03:06,750 --> 00:03:12,530
happening here here's our an example of

68
00:03:09,719 --> 00:03:15,120
some code that should have had you know

69
00:03:12,530 --> 00:03:16,680
some numbers in there right but they're

70
00:03:15,120 --> 00:03:18,480
not getting printed out so I think

71
00:03:16,680 --> 00:03:20,730
everything is currently getting printed

72
00:03:18,479 --> 00:03:21,959
except for those percentages so you can

73
00:03:20,729 --> 00:03:25,500
kind of see here for example we're

74
00:03:21,960 --> 00:03:27,120
printing out integer numbers just fine

75
00:03:25,500 --> 00:03:29,189
in these places but after these

76
00:03:27,120 --> 00:03:30,599
percentages there should be information

77
00:03:29,189 --> 00:03:31,829
there same with this millisecond count

78
00:03:30,599 --> 00:03:34,199
same with that millisecond count up

79
00:03:31,830 --> 00:03:35,850
there so right now I think we're at a

80
00:03:34,199 --> 00:03:38,549
point where everything's moving along

81
00:03:35,849 --> 00:03:40,139
okay but we do have to add

82
00:03:38,550 --> 00:03:42,420
floating-point print if we want to

83
00:03:40,139 --> 00:03:44,339
restore our previously existing

84
00:03:42,419 --> 00:03:46,979
functionality but everything else is

85
00:03:44,340 --> 00:03:49,379
fine right so I think that's all we got

86
00:03:46,979 --> 00:03:53,819
that's what we've I think that's where

87
00:03:49,379 --> 00:03:56,459
we are at okay so if we go back to our

88
00:03:53,819 --> 00:03:59,159
code I think someone else is sent in a

89
00:03:56,459 --> 00:04:02,400
bug I don't remember if they put it into

90
00:03:59,159 --> 00:04:04,289
the if they put it into the github or

91
00:04:02,400 --> 00:04:07,260
not I think someone also sent me in a

92
00:04:04,289 --> 00:04:11,189
bug or posted bug on the forums that we

93
00:04:07,259 --> 00:04:13,439
had done we there was a mistake in the

94
00:04:11,189 --> 00:04:18,259
array count see I don't remember the

95
00:04:13,439 --> 00:04:20,819
citizen shared yeah somewhere I

96
00:04:18,259 --> 00:04:22,439
accidentally took the array account of a

97
00:04:20,819 --> 00:04:24,209
pointer yeah you can see I did it here

98
00:04:22,439 --> 00:04:27,029
right this was supposed to be a

99
00:04:24,209 --> 00:04:29,250
of the buffer but instead I did a rate

100
00:04:27,029 --> 00:04:30,418
count of the pointer it'd be nice if

101
00:04:29,250 --> 00:04:32,189
that's the kind of thing we could get

102
00:04:30,418 --> 00:04:35,129
warned about but of course you know it's

103
00:04:32,189 --> 00:04:37,439
not quite meta programmable enough in C

104
00:04:35,129 --> 00:04:38,850
to really do that but anyway that was a

105
00:04:37,439 --> 00:04:41,038
little bit of a bug there so it meant

106
00:04:38,850 --> 00:04:42,240
that we would never have as we would

107
00:04:41,038 --> 00:04:43,949
only have eight characters worth of

108
00:04:42,240 --> 00:04:46,139
space because it was taking the length

109
00:04:43,949 --> 00:04:48,660
of a pointer like how big is the pointer

110
00:04:46,139 --> 00:04:50,519
and a pointer is 8 bytes in 64 a bit so

111
00:04:48,660 --> 00:04:53,729
it was saying that the maximum we could

112
00:04:50,519 --> 00:04:54,899
fit was 8 characters but we really want

113
00:04:53,728 --> 00:04:57,029
to be able to fit a lot more than that

114
00:04:54,899 --> 00:04:58,888
in case the number was long so we wanted

115
00:04:57,029 --> 00:05:04,679
to fit 64 so now this will correctly

116
00:04:58,889 --> 00:05:10,800
give 64 instead of you know of what it

117
00:05:04,680 --> 00:05:12,569
was before so that's I think is really

118
00:05:10,800 --> 00:05:18,509
all there is to that I don't know is

119
00:05:12,569 --> 00:05:26,279
this tempting even used anywhere is this

120
00:05:18,509 --> 00:05:29,430
actually do we even need this yeah okay

121
00:05:26,279 --> 00:05:34,129
so I guess we do so I can't get rid of

122
00:05:29,430 --> 00:05:34,129
it to avoid said mistake but that's okay

123
00:05:35,269 --> 00:05:40,978
all right so I think like I said that

124
00:05:39,269 --> 00:05:42,689
we're in good shape for everything else

125
00:05:40,978 --> 00:05:44,250
so the only real thing that we've got

126
00:05:42,689 --> 00:05:50,098
that's a problem here is all of these

127
00:05:44,250 --> 00:05:52,139
guys you know F eg and a they all read

128
00:05:50,098 --> 00:05:54,029
their floating-point argument off of the

129
00:05:52,139 --> 00:05:56,310
stack like we want but then they just

130
00:05:54,029 --> 00:05:57,629
throw it away right so what we want to

131
00:05:56,310 --> 00:05:59,550
do is we want to have something that's

132
00:05:57,629 --> 00:06:02,219
similar to the way the thing was working

133
00:05:59,550 --> 00:06:04,860
before in the other cases right so we've

134
00:06:02,220 --> 00:06:07,110
got this used 64 to ASCII and then we're

135
00:06:04,860 --> 00:06:08,610
sort of doing some you know nonsense

136
00:06:07,110 --> 00:06:10,080
with it after but what we really want to

137
00:06:08,610 --> 00:06:13,590
do here is we want to basically have a

138
00:06:10,079 --> 00:06:18,120
an F 64 to ASCII write we want something

139
00:06:13,589 --> 00:06:19,918
like this and I don't know why we've got

140
00:06:18,120 --> 00:06:21,090
the basis here I guess that was because

141
00:06:19,918 --> 00:06:22,109
so we could have hack something like

142
00:06:21,089 --> 00:06:23,908
that so we don't really need that

143
00:06:22,110 --> 00:06:25,379
because the basis is always known we'll

144
00:06:23,908 --> 00:06:28,589
probably have to pass some other things

145
00:06:25,379 --> 00:06:30,629
to this piece of code later but for

146
00:06:28,589 --> 00:06:32,399
right now I'm gonna ignore most of the

147
00:06:30,629 --> 00:06:33,750
formatting things here at the eff like

148
00:06:32,399 --> 00:06:35,489
what the difference is between all of

149
00:06:33,750 --> 00:06:37,709
these guys I'm gonna ignore that for now

150
00:06:35,490 --> 00:06:38,069
and just stuff all these guys with the

151
00:06:37,709 --> 00:06:40,739
thing we

152
00:06:38,069 --> 00:06:45,300
says hey let's just get printout working

153
00:06:40,740 --> 00:06:47,970
at all and and off we go now a I don't

154
00:06:45,300 --> 00:06:51,090
remember what a is but I guess it must

155
00:06:47,970 --> 00:06:56,130
be some other formatting thing all right

156
00:06:51,089 --> 00:07:00,750
so we've got a 64 to ASCII right let's

157
00:06:56,129 --> 00:07:05,310
go ahead and put this in here and that's

158
00:07:00,750 --> 00:07:06,810
sort of the the basic piece of

159
00:07:05,310 --> 00:07:07,560
information that we need and we know

160
00:07:06,810 --> 00:07:09,209
we're going to print out a

161
00:07:07,560 --> 00:07:14,459
floating-point number here oh and this

162
00:07:09,209 --> 00:07:18,180
should take an actual float right so we

163
00:07:14,459 --> 00:07:20,039
have a couple problems first of all we

164
00:07:18,180 --> 00:07:23,240
need to know some more information than

165
00:07:20,040 --> 00:07:25,740
just this because if I recall correctly

166
00:07:23,240 --> 00:07:28,680
precision we have not really been using

167
00:07:25,740 --> 00:07:30,120
yet because we haven't really had to but

168
00:07:28,680 --> 00:07:32,610
we're going to want to pass a precision

169
00:07:30,120 --> 00:07:35,310
value here because floating-point values

170
00:07:32,610 --> 00:07:38,400
unlike integer values have this sort of

171
00:07:35,310 --> 00:07:40,079
additional concept of a format that says

172
00:07:38,399 --> 00:07:44,039
how many things after the decimal point

173
00:07:40,079 --> 00:07:45,269
could we print out maximally right so in

174
00:07:44,040 --> 00:07:46,710
addition to the normal stuff that's

175
00:07:45,269 --> 00:07:48,689
going to happen with our number like the

176
00:07:46,709 --> 00:07:49,859
width of it you know keeping the width

177
00:07:48,689 --> 00:07:53,009
correct and all that sort of stuff which

178
00:07:49,860 --> 00:07:54,449
is about the total printout size we also

179
00:07:53,009 --> 00:07:56,219
have another piece of information which

180
00:07:54,449 --> 00:07:57,659
is that after the decimal point we may

181
00:07:56,220 --> 00:07:59,010
want to restrict how many there are so

182
00:07:57,660 --> 00:08:02,189
for example a lot of cases will do

183
00:07:59,009 --> 00:08:05,300
something like percent 0.02 or something

184
00:08:02,189 --> 00:08:07,649
which says hey we want there to be two

185
00:08:05,300 --> 00:08:10,189
things past the decimal point so you

186
00:08:07,649 --> 00:08:12,539
know keep that in mind right or whatever

187
00:08:10,189 --> 00:08:14,939
and so that's going to be important

188
00:08:12,540 --> 00:08:17,280
because it does affect how much stuff we

189
00:08:14,939 --> 00:08:22,290
print out when we're doing the f60 for

190
00:08:17,279 --> 00:08:24,569
it to ASCII now actually I don't know

191
00:08:22,290 --> 00:08:26,819
that it's that hard to print out when

192
00:08:24,569 --> 00:08:29,370
you know what the precision actually is

193
00:08:26,819 --> 00:08:30,839
I mean there's probably some cases that

194
00:08:29,370 --> 00:08:32,460
we would care about that we wouldn't

195
00:08:30,839 --> 00:08:33,959
handle quite properly and maybe the

196
00:08:32,460 --> 00:08:35,460
accuracy you know there might be some

197
00:08:33,960 --> 00:08:36,570
accuracy problems there are other things

198
00:08:35,460 --> 00:08:39,150
like that

199
00:08:36,570 --> 00:08:41,669
but I think in general the real

200
00:08:39,149 --> 00:08:43,348
trickiness is figuring out what the

201
00:08:41,668 --> 00:08:45,419
minimum number of digits we would have

202
00:08:43,349 --> 00:08:47,790
to print out would be to represent the

203
00:08:45,419 --> 00:08:49,649
value correctly and let me just say

204
00:08:47,789 --> 00:08:51,329
really quickly why that is so you have

205
00:08:49,649 --> 00:08:53,720
some idea of it I'm not a floating-point

206
00:08:51,330 --> 00:08:53,720
guru

207
00:08:57,049 --> 00:09:01,500
so you know take it with a grain of salt

208
00:08:59,789 --> 00:09:03,449
but I'm just gonna try to give you a

209
00:09:01,500 --> 00:09:09,708
little bit of why this is kind of a

210
00:09:03,450 --> 00:09:17,149
nasty problem all right so day three 29

211
00:09:09,708 --> 00:09:26,159
float printing and baby will say like

212
00:09:17,149 --> 00:09:29,610
not very good float printing so curious

213
00:09:26,159 --> 00:09:31,469
fundamentally the problem right when we

214
00:09:29,610 --> 00:09:35,339
were talking before about decimal

215
00:09:31,470 --> 00:09:39,720
numbers what we have is remember we have

216
00:09:35,339 --> 00:09:41,310
a binary representation of a number for

217
00:09:39,720 --> 00:09:43,110
our decimals right so maybe our binary

218
00:09:41,309 --> 00:09:46,229
representation is like something like

219
00:09:43,110 --> 00:09:48,180
this right one zero zero one one and

220
00:09:46,230 --> 00:09:49,589
then we have a decimal representation of

221
00:09:48,179 --> 00:09:51,149
that number that's what we want to print

222
00:09:49,589 --> 00:09:52,500
out because we don't want to print it

223
00:09:51,149 --> 00:09:54,149
out in binary or at least we usually

224
00:09:52,500 --> 00:09:55,350
don't want to print out my nuri we want

225
00:09:54,149 --> 00:09:56,909
to print it out in decimal because

226
00:09:55,350 --> 00:09:58,290
decimal is what humans are used to

227
00:09:56,909 --> 00:09:59,309
reading sometimes we want hex with

228
00:09:58,289 --> 00:10:01,799
decimal other things like that but

229
00:09:59,309 --> 00:10:03,869
usually the point is the base is not

230
00:10:01,799 --> 00:10:06,539
base to its base something else like

231
00:10:03,870 --> 00:10:08,879
base ten right so this is base two this

232
00:10:06,539 --> 00:10:11,639
is base 10 well we want to print out a

233
00:10:08,879 --> 00:10:13,350
binary number in base 10 we then have to

234
00:10:11,639 --> 00:10:15,360
sort of think about how we converted it

235
00:10:13,350 --> 00:10:17,490
and we were using dividing by ten as a

236
00:10:15,360 --> 00:10:20,159
way to do that right so what's this you

237
00:10:17,490 --> 00:10:23,159
know binary number in decimal well I've

238
00:10:20,159 --> 00:10:26,759
got a 1 plus a 2 we don't add a 4 we

239
00:10:23,159 --> 00:10:29,399
don't add in an 8 we do add a 16 right

240
00:10:26,759 --> 00:10:31,019
so we add these together and we get 19

241
00:10:29,399 --> 00:10:35,000
right and so that's like what we want to

242
00:10:31,019 --> 00:10:39,389
print out there right 1 plus 2 plus 16

243
00:10:35,000 --> 00:10:41,458
and so this print out process this is

244
00:10:39,389 --> 00:10:44,189
relatively easy for us to do because all

245
00:10:41,458 --> 00:10:47,989
we actually had to do is go alright why

246
00:10:44,190 --> 00:10:50,070
don't we just divide this thing by 10

247
00:10:47,990 --> 00:10:52,620
periodically using an integer divide

248
00:10:50,070 --> 00:10:54,629
find the remainders and print out the

249
00:10:52,620 --> 00:10:57,328
the remainders right and you remember

250
00:10:54,629 --> 00:10:58,860
how we did that here we you know we kind

251
00:10:57,328 --> 00:11:00,659
of came through this is are you 64 to

252
00:10:58,860 --> 00:11:02,909
ASCII routine we would just say all

253
00:11:00,659 --> 00:11:05,019
right whatever the current remainder is

254
00:11:02,909 --> 00:11:07,209
base 10 that is

255
00:11:05,019 --> 00:11:09,610
we're going to print and of course those

256
00:11:07,210 --> 00:11:12,610
got printed out in reverse order because

257
00:11:09,610 --> 00:11:14,460
you know if you took we had this 19 here

258
00:11:12,610 --> 00:11:16,419
we divided by we look at the remainder

259
00:11:14,460 --> 00:11:19,090
when you divide by 10 we're getting at

260
00:11:16,419 --> 00:11:21,759
the 9 first and then we kind of actually

261
00:11:19,090 --> 00:11:23,889
do that divided and then we look at the

262
00:11:21,759 --> 00:11:25,600
next digit which is a 1 so as we went

263
00:11:23,889 --> 00:11:27,189
through the number we were going in this

264
00:11:25,600 --> 00:11:31,389
direction right because we were dividing

265
00:11:27,190 --> 00:11:33,880
by 10 sequentially as we went okay so

266
00:11:31,389 --> 00:11:35,529
the problem that happens in float and

267
00:11:33,879 --> 00:11:38,799
let me let me just go ahead and label

268
00:11:35,529 --> 00:11:40,659
this side integer here the problem that

269
00:11:38,799 --> 00:11:42,939
happens in float is we have a very

270
00:11:40,659 --> 00:11:46,000
different circumstance going on right in

271
00:11:42,940 --> 00:11:49,240
floating point what we actually have is

272
00:11:46,000 --> 00:11:51,370
we have some concept of where a decimal

273
00:11:49,240 --> 00:11:52,720
point is relative to the number but that

274
00:11:51,370 --> 00:11:54,279
decimal point doesn't have to be at the

275
00:11:52,720 --> 00:11:55,750
end so right here we always knew that

276
00:11:54,279 --> 00:11:57,759
the decimal point was going to be after

277
00:11:55,750 --> 00:12:00,009
this thing so we could just divide by 10

278
00:11:57,759 --> 00:12:01,029
and just pick it off as we go right and

279
00:12:00,009 --> 00:12:03,100
we knew that we were not really

280
00:12:01,029 --> 00:12:05,649
suffering any accuracy loss there right

281
00:12:03,100 --> 00:12:07,509
we weren't there was no real concern

282
00:12:05,649 --> 00:12:09,279
that we would get like incorrect answers

283
00:12:07,509 --> 00:12:11,169
by doing the divide by 10 it's just you

284
00:12:09,279 --> 00:12:12,519
know it's it's a perfectly safe thing

285
00:12:11,169 --> 00:12:16,209
for us to do looking at the remainder

286
00:12:12,519 --> 00:12:18,039
mod 10 now in floating point we have a

287
00:12:16,210 --> 00:12:20,769
different circumstance in floating point

288
00:12:18,039 --> 00:12:23,319
you know we may still have a thing that

289
00:12:20,769 --> 00:12:25,419
looks like this but we may be told that

290
00:12:23,320 --> 00:12:25,840
the decimal point is effectively here on

291
00:12:25,419 --> 00:12:27,639
it

292
00:12:25,840 --> 00:12:29,769
right because remember how floating

293
00:12:27,639 --> 00:12:31,870
point numbers are encoded they have a

294
00:12:29,769 --> 00:12:36,009
thing like this it kind of looks like

295
00:12:31,870 --> 00:12:37,000
this we've got a sign bit right so we've

296
00:12:36,009 --> 00:12:40,210
got a bit that says whether it's

297
00:12:37,000 --> 00:12:43,840
positive or negative we've got an

298
00:12:40,210 --> 00:12:47,530
exponent right and the exponent says

299
00:12:43,840 --> 00:12:50,170
what 2 to the what power this number is

300
00:12:47,529 --> 00:12:52,299
going to be and then here we've got a

301
00:12:50,169 --> 00:12:54,039
mantissa which is the actual thing that

302
00:12:52,299 --> 00:12:56,529
will be multiplied by that exponent

303
00:12:54,039 --> 00:13:00,429
right that will be essentially shifted

304
00:12:56,529 --> 00:13:02,529
right by that exponent so it's entirely

305
00:13:00,429 --> 00:13:07,269
possible for this exponent to be

306
00:13:02,529 --> 00:13:09,699
negative right so it can be a fractional

307
00:13:07,269 --> 00:13:12,220
value right it's entirely possible that

308
00:13:09,700 --> 00:13:14,350
this exponent won't be negative but

309
00:13:12,220 --> 00:13:16,629
won't be enough to make the mantissa be

310
00:13:14,350 --> 00:13:18,879
entirely on one side of the decimal on

311
00:13:16,629 --> 00:13:20,679
this other decimal point so we can often

312
00:13:18,879 --> 00:13:22,539
have a case where the number that's

313
00:13:20,679 --> 00:13:25,449
encoded right if this is if this is

314
00:13:22,539 --> 00:13:27,219
encoded in here if this exponent isn't

315
00:13:25,450 --> 00:13:28,930
enough to push the decimal place all the

316
00:13:27,220 --> 00:13:31,810
way to the side then we're in a

317
00:13:28,929 --> 00:13:33,489
decidedly different scenario in terms of

318
00:13:31,809 --> 00:13:35,439
what the number means and the reason for

319
00:13:33,490 --> 00:13:37,000
that is because although the part on

320
00:13:35,440 --> 00:13:38,980
this side of the decimal point

321
00:13:37,000 --> 00:13:41,950
could still be printed out in exactly

322
00:13:38,980 --> 00:13:44,470
the same way the number on this side of

323
00:13:41,950 --> 00:13:47,050
the decimal point works kind of in a

324
00:13:44,470 --> 00:13:51,040
much more squirrelly fashion right this

325
00:13:47,049 --> 00:13:54,849
you know is 1 over 2 this is 1 over 4

326
00:13:51,039 --> 00:13:57,819
right this is going to be 1 over 8 right

327
00:13:54,850 --> 00:14:03,250
so as these things go they some smaller

328
00:13:57,820 --> 00:14:08,140
and smaller values kind of going out you

329
00:14:03,250 --> 00:14:11,320
know as they go right so what we kind of

330
00:14:08,139 --> 00:14:13,600
need to know there is how many decimal

331
00:14:11,320 --> 00:14:15,790
places would we need to print out in

332
00:14:13,600 --> 00:14:19,750
order to actually capture this value

333
00:14:15,789 --> 00:14:23,399
whatever it is write in decimal is

334
00:14:19,750 --> 00:14:23,399
something that's a little bit tricky so

335
00:14:27,179 --> 00:14:31,929
if you think about what's going to

336
00:14:29,409 --> 00:14:34,029
happen here first we could we could try

337
00:14:31,929 --> 00:14:36,039
to break this problem down right we

338
00:14:34,029 --> 00:14:39,159
could try to say well it's pretty easy

339
00:14:36,039 --> 00:14:42,309
for us to remove the part of this number

340
00:14:39,159 --> 00:14:44,079
that is fractional temporarily so it's

341
00:14:42,309 --> 00:14:45,729
probably free if I want to just

342
00:14:44,080 --> 00:14:46,930
architect again not trying to do a

343
00:14:45,730 --> 00:14:48,820
particularly good job here I'm just

344
00:14:46,929 --> 00:14:51,250
trying to walk through the problem so

345
00:14:48,820 --> 00:14:53,890
you can kind of see me like try to fuss

346
00:14:51,250 --> 00:14:58,210
with it and maybe get a better idea

347
00:14:53,889 --> 00:14:59,799
about why it's kind of tricky but I can

348
00:14:58,210 --> 00:15:02,470
remove this part of the problem if I

349
00:14:59,799 --> 00:15:04,899
wanted to right I could probably find a

350
00:15:02,470 --> 00:15:07,120
pretty simple way of just taking in a

351
00:15:04,899 --> 00:15:09,789
fractional part of this number and in

352
00:15:07,120 --> 00:15:11,980
fact there's actually library routine

353
00:15:09,789 --> 00:15:13,360
already to do it but we would probably

354
00:15:11,980 --> 00:15:16,930
want to write it ourselves but I believe

355
00:15:13,360 --> 00:15:21,970
there's a like a fracked is there fact

356
00:15:16,929 --> 00:15:24,359
these days in in C or is there not let's

357
00:15:21,970 --> 00:15:24,360
take a look

358
00:15:24,500 --> 00:15:29,509
yeah here you go so if we want to

359
00:15:27,559 --> 00:15:31,309
fracked I think is the one from the

360
00:15:29,509 --> 00:15:34,700
shader of languages that's that's what

361
00:15:31,309 --> 00:15:36,709
I'm thinking of there but so if you want

362
00:15:34,700 --> 00:15:38,750
to for example write we can make a we

363
00:15:36,710 --> 00:15:40,370
can make call to see you runtime IRA we

364
00:15:38,750 --> 00:15:42,919
could also imagine ways of us doing this

365
00:15:40,370 --> 00:15:46,429
ourselves right where we can split a

366
00:15:42,919 --> 00:15:48,279
number into its fractional and and non

367
00:15:46,429 --> 00:15:50,929
fractional parts its whole number parts

368
00:15:48,279 --> 00:15:53,209
so if we want to we could call mod F for

369
00:15:50,929 --> 00:15:55,370
example and mod F would would do that

370
00:15:53,210 --> 00:15:57,170
split for us and then we would be able

371
00:15:55,370 --> 00:16:00,049
to print out the integer part separately

372
00:15:57,169 --> 00:16:01,759
and know that we were left only with the

373
00:16:00,049 --> 00:16:04,189
part that we actually wanted and you can

374
00:16:01,759 --> 00:16:08,149
also see how we would probably do that

375
00:16:04,190 --> 00:16:10,700
in terms of in terms of doing this

376
00:16:08,149 --> 00:16:13,449
directly ourselves since we know the

377
00:16:10,700 --> 00:16:16,370
what a floating-point number looks like

378
00:16:13,450 --> 00:16:18,800
we can certainly do work with the

379
00:16:16,370 --> 00:16:21,470
exponent ourselves right so we could

380
00:16:18,799 --> 00:16:25,929
certainly say well whatever the exponent

381
00:16:21,470 --> 00:16:29,990
value is if that exponent value is not

382
00:16:25,929 --> 00:16:31,939
is if that exponent value is you know

383
00:16:29,990 --> 00:16:34,190
zero or negative then we know that all

384
00:16:31,940 --> 00:16:36,140
the bits are fractional right if that

385
00:16:34,190 --> 00:16:37,970
number is greater than the number of

386
00:16:36,139 --> 00:16:40,210
bits in the mantissa right if it's going

387
00:16:37,970 --> 00:16:43,190
to push it further out then the mantissa

388
00:16:40,210 --> 00:16:45,410
then we know that the entire thing is

389
00:16:43,190 --> 00:16:46,670
going to be the non fractional part and

390
00:16:45,409 --> 00:16:49,579
we just have to shift it up by however

391
00:16:46,669 --> 00:16:51,919
many places we would need to based on

392
00:16:49,580 --> 00:16:53,090
the exponent right and so the only thing

393
00:16:51,919 --> 00:16:54,469
we really have to handle is the case

394
00:16:53,090 --> 00:16:56,530
where it's right in the middle right

395
00:16:54,470 --> 00:17:00,410
where it's something right in the middle

396
00:16:56,529 --> 00:17:03,919
even so it'd be pretty trivial for us to

397
00:17:00,409 --> 00:17:06,009
do this just didn't see by actually

398
00:17:03,919 --> 00:17:08,180
casting it to an integer right like

399
00:17:06,009 --> 00:17:09,710
removing the floating-point part of it

400
00:17:08,180 --> 00:17:12,620
cassadee sure and doing like a

401
00:17:09,710 --> 00:17:13,640
subtraction to remove the integer part

402
00:17:12,619 --> 00:17:14,689
and then we're left with just the

403
00:17:13,640 --> 00:17:16,880
fractional part which we can then

404
00:17:14,690 --> 00:17:18,740
subtract from the whole thing to give us

405
00:17:16,880 --> 00:17:20,120
just the integer part also in a float so

406
00:17:18,740 --> 00:17:22,099
you can even see like ways we could do

407
00:17:20,119 --> 00:17:25,099
that pretty trivially so if we wanted to

408
00:17:22,099 --> 00:17:26,899
we could probably remove that part we

409
00:17:25,099 --> 00:17:29,269
could probably make things simpler by

410
00:17:26,900 --> 00:17:31,640
getting rid of this thing but we would

411
00:17:29,269 --> 00:17:34,339
still be left with something like this

412
00:17:31,640 --> 00:17:37,009
right where we have to figure out a way

413
00:17:34,339 --> 00:17:38,359
to print this out now if you look at

414
00:17:37,009 --> 00:17:42,289
what happens here

415
00:17:38,359 --> 00:17:43,549
you know we've got 1/2 1/4 1/8 if we

416
00:17:42,289 --> 00:17:44,960
want to send these together it's kind of

417
00:17:43,549 --> 00:17:47,089
a pain in the butt still but you know we

418
00:17:44,960 --> 00:17:52,579
can do it right we would want to

419
00:17:47,089 --> 00:17:55,099
multiply this guy by 4 over 4 right so

420
00:17:52,579 --> 00:17:58,369
we would have 4 eighths we would want to

421
00:17:55,099 --> 00:18:04,969
multiply this guy by 2 over 4 right

422
00:17:58,369 --> 00:18:07,159
I believe so we'd kind of go right and

423
00:18:04,970 --> 00:18:10,970
then we would want to multiply I'm sorry

424
00:18:07,160 --> 00:18:12,440
2 over 8 and then we would not multiply

425
00:18:10,970 --> 00:18:14,240
this guy by anything so basically just

426
00:18:12,440 --> 00:18:16,370
making a common denominator for this

427
00:18:14,240 --> 00:18:19,819
guy's we would add them up and we get

428
00:18:16,369 --> 00:18:22,549
exactly what you expect right 7/8 so you

429
00:18:19,819 --> 00:18:26,240
can kind of almost see how that process

430
00:18:22,549 --> 00:18:28,279
works it's it's sort of just the exact

431
00:18:26,240 --> 00:18:32,690
same process that we were going through

432
00:18:28,279 --> 00:18:34,730
up here you know each each bit is

433
00:18:32,690 --> 00:18:37,370
contributing a number to the top and

434
00:18:34,730 --> 00:18:40,579
then the divisor is just whatever the

435
00:18:37,369 --> 00:18:46,669
furthest out bit was right it's pretty

436
00:18:40,579 --> 00:18:48,139
straight forward anyway so I if you take

437
00:18:46,670 --> 00:18:50,060
a look at what happens here we ended up

438
00:18:48,140 --> 00:18:51,410
with something like 7/8 so the number

439
00:18:50,059 --> 00:18:57,440
that we would want to print out here are

440
00:18:51,410 --> 00:19:00,650
7/8 good to do looks like that right so

441
00:18:57,440 --> 00:19:03,590
we want to print out 0.875 but the

442
00:19:00,650 --> 00:19:08,530
question is how do we get there from the

443
00:19:03,589 --> 00:19:13,699
floating point representation right

444
00:19:08,529 --> 00:19:15,230
well we could in theory again if we're

445
00:19:13,700 --> 00:19:17,360
trying to do and not very good one so we

446
00:19:15,230 --> 00:19:20,990
don't care about all of the destruction

447
00:19:17,359 --> 00:19:22,399
that will happen to our number and you

448
00:19:20,990 --> 00:19:24,380
know for handmade here oh it's probably

449
00:19:22,400 --> 00:19:25,400
fine right because this isn't a project

450
00:19:24,380 --> 00:19:27,110
about printing out floating-point

451
00:19:25,400 --> 00:19:28,759
numbers accurately and like I said

452
00:19:27,109 --> 00:19:31,099
that's really difficult but for our

453
00:19:28,759 --> 00:19:33,319
purposes what we could do is say well

454
00:19:31,099 --> 00:19:34,699
alright if we know how to print out

455
00:19:33,319 --> 00:19:36,769
things when we have them in the whole

456
00:19:34,700 --> 00:19:39,200
number what we could do is just multiply

457
00:19:36,769 --> 00:19:41,359
this number by 10 right that would shift

458
00:19:39,200 --> 00:19:42,950
the fractional part over 1 and now we

459
00:19:41,359 --> 00:19:44,839
could look at the integer part and print

460
00:19:42,950 --> 00:19:46,309
out that integer part and then after

461
00:19:44,839 --> 00:19:47,899
we're done with that we can print out by

462
00:19:46,309 --> 00:19:48,889
10 again and look at the next it right

463
00:19:47,900 --> 00:19:50,900
because we know how to pronounce that

464
00:19:48,890 --> 00:19:51,490
for a city it's just mod 10 it's just

465
00:19:50,900 --> 00:19:55,179
the number

466
00:19:51,490 --> 00:20:00,160
ten right so if we just keep shifting

467
00:19:55,179 --> 00:20:01,660
digits periodically over until we don't

468
00:20:00,160 --> 00:20:02,950
feel like there's any digits left that

469
00:20:01,660 --> 00:20:05,200
would be one way to do it now the

470
00:20:02,950 --> 00:20:07,120
question of when there's no digits left

471
00:20:05,200 --> 00:20:09,460
is kind of a little bit of an open-ended

472
00:20:07,119 --> 00:20:12,699
thing still but you can see how that

473
00:20:09,460 --> 00:20:15,519
would work right so let's start by just

474
00:20:12,700 --> 00:20:17,920
trying to approach the problem in that

475
00:20:15,519 --> 00:20:21,609
way right let's start by removing the

476
00:20:17,920 --> 00:20:23,350
fractional part of the I'm sorry

477
00:20:21,609 --> 00:20:24,759
biron taking the integer part and

478
00:20:23,349 --> 00:20:26,649
printing that out the way we already

479
00:20:24,759 --> 00:20:28,720
know how to do it and then printing out

480
00:20:26,650 --> 00:20:31,150
the fractional part by just shifting it

481
00:20:28,720 --> 00:20:33,100
up by multiple do multiplies by ten just

482
00:20:31,150 --> 00:20:34,240
shift it up into the integer part so

483
00:20:33,099 --> 00:20:36,669
that we can just print those out

484
00:20:34,240 --> 00:20:38,319
sequentially as well right that seems

485
00:20:36,670 --> 00:20:40,480
like a relative shape word before we do

486
00:20:38,319 --> 00:20:42,519
it now again not the best way to do it

487
00:20:40,480 --> 00:20:44,319
probably because as we're doing those

488
00:20:42,519 --> 00:20:46,058
multiplies we are losing floating-point

489
00:20:44,319 --> 00:20:48,308
precision percentual e there and we may

490
00:20:46,058 --> 00:20:49,329
destroy bits that we actually need this

491
00:20:48,308 --> 00:20:52,839
is why printing out floating-point

492
00:20:49,329 --> 00:20:54,189
numbers is tricky but if we just want

493
00:20:52,839 --> 00:20:57,220
something that basically prints out

494
00:20:54,190 --> 00:21:01,720
floats without a lot of fuss then it's

495
00:20:57,220 --> 00:21:04,690
probably not a huge deal right okay so

496
00:21:01,720 --> 00:21:07,019
let's let's see what we can do now first

497
00:21:04,690 --> 00:21:10,990
of all it looks like we're not handling

498
00:21:07,019 --> 00:21:12,429
negatives here as far as I could tell so

499
00:21:10,990 --> 00:21:14,049
I assume we're handling negatives kind

500
00:21:12,429 --> 00:21:15,130
of more at the front end now I don't

501
00:21:14,049 --> 00:21:17,349
know where that's actually getting

502
00:21:15,130 --> 00:21:19,030
handled so I'm a little confused about

503
00:21:17,349 --> 00:21:21,730
that let's take a look so that's

504
00:21:19,029 --> 00:21:23,649
actually here that's getting handled

505
00:21:21,730 --> 00:21:28,740
here where we do the prefix negative

506
00:21:23,650 --> 00:21:28,740
positive or this now I don't really know

507
00:21:29,250 --> 00:21:34,750
where we want to handle that but I think

508
00:21:31,960 --> 00:21:35,980
I'm gonna put it up in here for now so

509
00:21:34,750 --> 00:21:38,170
what I'm gonna do first is I'm just

510
00:21:35,980 --> 00:21:40,360
gonna say alright if the value is less

511
00:21:38,170 --> 00:21:43,660
than zero I'm gonna want to out care a

512
00:21:40,359 --> 00:21:45,159
negative and we'll sort of work on the

513
00:21:43,660 --> 00:21:48,610
formatting parts of that later if we

514
00:21:45,160 --> 00:21:50,769
want to write out put a negative in that

515
00:21:48,609 --> 00:21:52,569
case and then I'm gonna take the value

516
00:21:50,769 --> 00:21:53,710
and I'm gonna make it positive so now we

517
00:21:52,569 --> 00:21:55,269
know we don't have to deal with negative

518
00:21:53,710 --> 00:21:56,920
numbers anymore cuz we printed out the

519
00:21:55,269 --> 00:21:58,299
negative if there was one and then we

520
00:21:56,920 --> 00:21:59,620
flipped the sign to clear the sign bit

521
00:21:58,299 --> 00:22:03,058
so now we don't think about the sign bit

522
00:21:59,619 --> 00:22:03,058
anymore right

523
00:22:03,210 --> 00:22:09,120
okay so now we do have a slight problem

524
00:22:06,859 --> 00:22:12,119
which is that we know this number is

525
00:22:09,119 --> 00:22:13,888
going to be reversed so really I suppose

526
00:22:12,119 --> 00:22:15,750
if this whole string is going to get

527
00:22:13,888 --> 00:22:17,609
reversed we need to sort of do a thing

528
00:22:15,750 --> 00:22:19,169
like we did before where we remember

529
00:22:17,609 --> 00:22:20,849
whether the thing was negative or not so

530
00:22:19,169 --> 00:22:25,288
is it negative is it not negative and

531
00:22:20,849 --> 00:22:30,719
only at the end would we do the actual

532
00:22:25,288 --> 00:22:35,369
print out so we'd still want to do the

533
00:22:30,720 --> 00:22:36,778
negation but we don't want to print out

534
00:22:35,369 --> 00:22:38,219
the minus to the end because remember we

535
00:22:36,778 --> 00:22:40,798
put this out and then they get reversed

536
00:22:38,220 --> 00:22:43,860
I believe let me double check maybe they

537
00:22:40,798 --> 00:22:45,210
don't always get reversed here I think

538
00:22:43,859 --> 00:22:49,349
we had the ability to do either but I

539
00:22:45,210 --> 00:22:51,419
think we want to keep that ability yeah

540
00:22:49,349 --> 00:22:53,490
I think we do want to keep that we want

541
00:22:51,419 --> 00:22:55,200
to keep that ability for this because

542
00:22:53,490 --> 00:22:57,690
we're going to print out the integers in

543
00:22:55,200 --> 00:23:04,950
the wrong order so I think we want that

544
00:22:57,690 --> 00:23:08,970
right although the ones after the

545
00:23:04,950 --> 00:23:11,038
decimal place will be printed in that

546
00:23:08,970 --> 00:23:12,538
order right because as we multiply by

547
00:23:11,038 --> 00:23:15,000
ten we're printing them individually so

548
00:23:12,538 --> 00:23:17,069
this is kind of a bummer right because

549
00:23:15,000 --> 00:23:18,929
it means we we have some that come in

550
00:23:17,069 --> 00:23:21,119
the reverse order and some that come in

551
00:23:18,929 --> 00:23:23,700
the forward order which is a real pain

552
00:23:21,119 --> 00:23:26,609
right that's not fun at all but I guess

553
00:23:23,700 --> 00:23:28,649
we'll do we'll do what we can so if

554
00:23:26,609 --> 00:23:30,298
that's the case let me take a look here

555
00:23:28,648 --> 00:23:34,709
at how we were doing that because I

556
00:23:30,298 --> 00:23:36,808
think we do like when we do strings we

557
00:23:34,710 --> 00:23:38,730
had to do reverse equals together we get

558
00:23:36,808 --> 00:23:40,950
reverse equals false so what we could do

559
00:23:38,730 --> 00:23:49,139
is we could say for these guys we don't

560
00:23:40,950 --> 00:23:51,960
want reversal because since you know in

561
00:23:49,138 --> 00:23:54,769
fact how many people have reverse equals

562
00:23:51,960 --> 00:23:54,769
false I guess

563
00:23:55,190 --> 00:24:02,120
I guess all of these guys do so that's

564
00:23:59,089 --> 00:24:05,119
fine at this point it's probably easier

565
00:24:02,119 --> 00:24:06,979
to just put reverse folding the cases

566
00:24:05,119 --> 00:24:08,059
that we actually care about so since in

567
00:24:06,980 --> 00:24:09,920
this case we're gonna have to do the

568
00:24:08,059 --> 00:24:12,829
reversal ourselves that also kind of

569
00:24:09,920 --> 00:24:13,700
suggests that maybe the you 64 to a ski

570
00:24:12,829 --> 00:24:18,069
should be the thing that does the

571
00:24:13,700 --> 00:24:22,580
reversal I'm gonna put to do here to do

572
00:24:18,069 --> 00:24:25,639
put reversal here instead seems like it

573
00:24:22,579 --> 00:24:29,089
makes more sense to just go through and

574
00:24:25,640 --> 00:24:31,880
flip them anyway f/64 to a ski here we

575
00:24:29,089 --> 00:24:33,589
go in this case I can revert to doing it

576
00:24:31,880 --> 00:24:34,400
sort of the cleaner way if we know that

577
00:24:33,589 --> 00:24:36,379
we don't have to worry about the

578
00:24:34,400 --> 00:24:37,910
reversal case if it's negative then I

579
00:24:36,380 --> 00:24:43,210
can just print out the negative first

580
00:24:37,910 --> 00:24:45,380
and put the value in there as a positive

581
00:24:43,210 --> 00:24:47,809
so then what we want to do is we

582
00:24:45,380 --> 00:24:50,120
basically want to just do a you 64 to a

583
00:24:47,809 --> 00:24:51,440
ski right and it's gonna be backwards

584
00:24:50,119 --> 00:24:55,250
for now but we'll deal with that in a

585
00:24:51,440 --> 00:24:56,360
second so if we do au 64 to a ski we're

586
00:24:55,250 --> 00:24:58,099
gonna want to do the same stuff here

587
00:24:56,359 --> 00:24:59,449
we're gonna want to pass the desk we're

588
00:24:58,099 --> 00:25:01,159
gonna want to paste the value we're

589
00:24:59,450 --> 00:25:03,590
gonna want to print the base is we know

590
00:25:01,160 --> 00:25:06,350
is 10 and the digits I don't know where

591
00:25:03,589 --> 00:25:10,579
our digits are I assume they're in here

592
00:25:06,349 --> 00:25:12,559
somewhere but I don't really know where

593
00:25:10,579 --> 00:25:14,000
my digits at where my digit well they're

594
00:25:12,559 --> 00:25:15,940
gonna look like that right there they

595
00:25:14,000 --> 00:25:17,960
are

596
00:25:15,940 --> 00:25:21,830
so I guess I should kind of come out

597
00:25:17,960 --> 00:25:22,340
here and just say okay yeah here's our

598
00:25:21,829 --> 00:25:29,049
cares

599
00:25:22,339 --> 00:25:31,639
we want our duck Karras here cares and

600
00:25:29,049 --> 00:25:34,579
that should be it so we'll put that in

601
00:25:31,640 --> 00:25:38,300
base ten that will advance us to the

602
00:25:34,579 --> 00:25:40,159
point where that well I guess I should

603
00:25:38,299 --> 00:25:43,369
say we first have to actually produce

604
00:25:40,160 --> 00:25:48,170
that number so I'm gonna say let's get

605
00:25:43,369 --> 00:25:49,729
the the value integer part and in order

606
00:25:48,170 --> 00:25:51,800
to do that I think all I really have to

607
00:25:49,730 --> 00:25:53,299
do is say well give me whatever the

608
00:25:51,799 --> 00:25:54,649
value would be in an integer right

609
00:25:53,299 --> 00:25:56,599
because that's gonna truncate the value

610
00:25:54,650 --> 00:25:58,310
which is exactly what I want it's just

611
00:25:56,599 --> 00:25:59,599
gonna give me the integer portion so I

612
00:25:58,309 --> 00:26:01,460
think that's enough

613
00:25:59,599 --> 00:26:03,859
and then in theory I should be able to

614
00:26:01,460 --> 00:26:05,870
say well now let's subtract away let's

615
00:26:03,859 --> 00:26:07,399
get rid of that part of it right so I

616
00:26:05,869 --> 00:26:09,579
should be able to subtract the integer

617
00:26:07,400 --> 00:26:12,950
part back off

618
00:26:09,579 --> 00:26:14,720
so here I am getting whatever the

619
00:26:12,950 --> 00:26:16,190
integer part was without the fractional

620
00:26:14,720 --> 00:26:19,579
part then I'm stalking it off so now the

621
00:26:16,190 --> 00:26:24,590
value is just the fractional part and I

622
00:26:19,579 --> 00:26:28,159
can print out the integer part so that's

623
00:26:24,589 --> 00:26:31,808
fine so now I've got this fractional

624
00:26:28,160 --> 00:26:35,269
part I need to output the decimal point

625
00:26:31,808 --> 00:26:38,210
at this point and then I need to start

626
00:26:35,269 --> 00:26:40,879
printing out characters in terms of the

627
00:26:38,210 --> 00:26:42,920
divide now what am I do first is I'm

628
00:26:40,880 --> 00:26:44,690
just gonna pass the precision because

629
00:26:42,920 --> 00:26:47,179
maybe we'll just only support passed

630
00:26:44,690 --> 00:26:52,640
precision I don't know but what that

631
00:26:47,179 --> 00:26:55,519
means is I'm just gonna say okay I'm

632
00:26:52,640 --> 00:26:58,309
just gonna say for however much

633
00:26:55,519 --> 00:27:00,529
precision we have we're going to print

634
00:26:58,308 --> 00:27:02,869
out things after the decimal place and

635
00:27:00,529 --> 00:27:04,399
this is again pretty straightforward for

636
00:27:02,869 --> 00:27:07,189
us to do there's not a lot of mystery

637
00:27:04,400 --> 00:27:08,990
here all we have to do is keep

638
00:27:07,190 --> 00:27:10,700
multiplying the number by 10 so

639
00:27:08,990 --> 00:27:13,789
basically we just take the number we

640
00:27:10,700 --> 00:27:17,240
multiply it by 10 to move whatever would

641
00:27:13,789 --> 00:27:20,029
be 1 after the decimal point to 1 before

642
00:27:17,240 --> 00:27:23,509
the decimal point then we can just print

643
00:27:20,029 --> 00:27:26,569
that number out right we can just say

644
00:27:23,509 --> 00:27:29,929
all right give me the integer part in

645
00:27:26,569 --> 00:27:33,980
this case it's just you know a number

646
00:27:29,929 --> 00:27:36,920
from 0 to 10 so just get that one

647
00:27:33,980 --> 00:27:40,610
integer part take the value and subtract

648
00:27:36,920 --> 00:27:44,960
away the integer part so it clears that

649
00:27:40,609 --> 00:27:47,689
out right and then we just want to print

650
00:27:44,960 --> 00:27:55,610
out whatever that integer says in the

651
00:27:47,690 --> 00:27:57,650
integer table you know so then we just

652
00:27:55,609 --> 00:27:59,629
need to actually pass the precision here

653
00:27:57,650 --> 00:28:04,269
which I believe we should already have

654
00:27:59,630 --> 00:28:06,530
right so here's the precision right here

655
00:28:04,269 --> 00:28:08,660
and we'll have to do something about

656
00:28:06,529 --> 00:28:10,819
when the precision isn't specified but

657
00:28:08,660 --> 00:28:12,470
maybe what I'll do for that is I will

658
00:28:10,819 --> 00:28:18,000
just set it to a default precision like

659
00:28:12,470 --> 00:28:20,069
6 and we'll call it a day right okay

660
00:28:18,000 --> 00:28:26,450
so let's come through here and actually

661
00:28:20,069 --> 00:28:34,189
pass our precision precision precision

662
00:28:26,450 --> 00:28:37,980
precision precision precision precision

663
00:28:34,190 --> 00:28:47,640
and precision okay

664
00:28:37,980 --> 00:28:48,809
so need that anymore what we should be

665
00:28:47,640 --> 00:28:50,460
able to do now is take a look at this

666
00:28:48,809 --> 00:28:51,990
now our numbers are going to be

667
00:28:50,460 --> 00:28:55,590
backwards because remember we did not

668
00:28:51,990 --> 00:28:57,180
flip them right so to start with we're

669
00:28:55,589 --> 00:29:01,259
gonna be a little bit janky although

670
00:28:57,180 --> 00:29:04,500
this looks especially janky I don't know

671
00:29:01,259 --> 00:29:07,079
exactly why so yeah not great not off to

672
00:29:04,500 --> 00:29:09,299
a good start but that's okay you know we

673
00:29:07,079 --> 00:29:11,929
can't always be off to a good start and

674
00:29:09,299 --> 00:29:14,159
this actually looks not totally wrong

675
00:29:11,930 --> 00:29:16,500
you can see that the numbers are flipped

676
00:29:14,160 --> 00:29:17,820
but otherwise it's not you know the

677
00:29:16,500 --> 00:29:20,250
worst possible thing that happened

678
00:29:17,819 --> 00:29:22,200
however our precision looks looks messed

679
00:29:20,250 --> 00:29:24,150
up I think that's just because again

680
00:29:22,200 --> 00:29:26,069
we're not actually specifying it

681
00:29:24,150 --> 00:29:27,060
properly or maybe we are I think for

682
00:29:26,069 --> 00:29:28,679
some of those numbers we should have

683
00:29:27,059 --> 00:29:29,730
been specifying it so it seems like our

684
00:29:28,680 --> 00:29:31,140
precision should have been set to

685
00:29:29,730 --> 00:29:33,360
something valid but on the other hand

686
00:29:31,140 --> 00:29:40,770
doesn't really seem like perhaps that it

687
00:29:33,359 --> 00:29:46,169
was so I'm not sure what's going on

688
00:29:40,769 --> 00:29:48,889
there we'll have to take a look I'm

689
00:29:46,170 --> 00:29:48,890
gonna put this though

690
00:29:55,150 --> 00:30:01,870
oh I gotta upgrade my for coder Allen

691
00:29:58,329 --> 00:30:02,919
already fixed that bug I think you did I

692
00:30:01,869 --> 00:30:04,329
don't remember that happening at work

693
00:30:02,920 --> 00:30:07,539
right now were two doesn't allow now

694
00:30:04,329 --> 00:30:10,750
specified Precision's so we just set

695
00:30:07,539 --> 00:30:13,990
non-specified decisions to raise

696
00:30:10,750 --> 00:30:16,299
specified value so in this case we'll

697
00:30:13,990 --> 00:30:18,130
just do well precision is going to equal

698
00:30:16,299 --> 00:30:18,849
eight or something let's say or maybe

699
00:30:18,130 --> 00:30:25,720
six

700
00:30:18,849 --> 00:30:27,669
if precision specified is false then

701
00:30:25,720 --> 00:30:29,740
we'll set it so then we know our

702
00:30:27,670 --> 00:30:31,590
precision is always something okay

703
00:30:29,740 --> 00:30:33,579
so let's take a look at the reverse

704
00:30:31,589 --> 00:30:35,079
thing that's been going on here and

705
00:30:33,579 --> 00:30:37,149
maybe we can just get rid of that

706
00:30:35,079 --> 00:30:40,329
entirely cuz here's what's happening

707
00:30:37,150 --> 00:30:42,009
with reverse right and I don't really

708
00:30:40,329 --> 00:30:44,079
like it I think what we could do is just

709
00:30:42,009 --> 00:30:48,569
say let's just always print out the

710
00:30:44,079 --> 00:30:50,859
number as it is without the reversal and

711
00:30:48,569 --> 00:30:53,049
then what we'll do is we'll just

712
00:30:50,859 --> 00:30:55,209
actually bake the reversal into

713
00:30:53,049 --> 00:30:58,089
everything that needed the reversal in

714
00:30:55,210 --> 00:31:00,539
the first place right so like these

715
00:30:58,089 --> 00:31:11,439
things for example none of these things

716
00:31:00,539 --> 00:31:14,349
needed reversal at all right oops so

717
00:31:11,440 --> 00:31:18,279
that's not reversing not reversing not

718
00:31:14,349 --> 00:31:19,359
reverse saying that reversing and then

719
00:31:18,279 --> 00:31:22,329
when we get up to the things that are

720
00:31:19,359 --> 00:31:25,869
reversing you know you can see the you

721
00:31:22,329 --> 00:31:27,909
64 to ASCII is is in every single one of

722
00:31:25,869 --> 00:31:30,189
them right here's all the people who

723
00:31:27,910 --> 00:31:33,308
were reversing they're all you 64 to

724
00:31:30,190 --> 00:31:36,640
ASCII right you 6040 ASCII you 64 to

725
00:31:33,308 --> 00:31:38,170
ASCII you 64 to ASCII so it seems to me

726
00:31:36,640 --> 00:31:39,730
like the smartest thing to do there

727
00:31:38,170 --> 00:31:42,039
rather than being fancy like we were

728
00:31:39,730 --> 00:31:44,799
before you should just do the reversal

729
00:31:42,039 --> 00:31:50,379
here so we know at this point we can

730
00:31:44,799 --> 00:31:53,529
track the range so let's just bake the

731
00:31:50,380 --> 00:31:59,910
reversal into this routine and save

732
00:31:53,529 --> 00:31:59,910
ourselves some trouble here we can

733
00:32:00,608 --> 00:32:08,618
let's see there is no shared CPP oh no

734
00:32:05,489 --> 00:32:10,629
for coder where have you gone

735
00:32:08,618 --> 00:32:12,218
yeah I got up I clearly effed up to it I

736
00:32:10,628 --> 00:32:14,138
must be using it what version of forked

737
00:32:12,219 --> 00:32:16,599
or am i meeting using I haven't had a

738
00:32:14,138 --> 00:32:22,358
crash in ages for a coder tell me your

739
00:32:16,598 --> 00:32:26,158
version 4.0 point 10 I don't know what

740
00:32:22,358 --> 00:32:28,928
I'm on but I don't think it's that I

741
00:32:26,159 --> 00:32:33,129
don't know what for coder I'm on not to

742
00:32:28,929 --> 00:32:34,149
look I will but just not right now

743
00:32:33,128 --> 00:32:37,028
because I'm in the middle of something

744
00:32:34,148 --> 00:32:44,348
here okay so let's get back to where I

745
00:32:37,028 --> 00:32:46,509
was shared all right so let's take a

746
00:32:44,348 --> 00:32:49,658
look at what I was doing there reverse

747
00:32:46,509 --> 00:32:52,239
equals false so let's go back to what I

748
00:32:49,659 --> 00:32:54,129
was about to do I think all the rest of

749
00:32:52,239 --> 00:32:56,440
this stuff is right so I'm just gonna

750
00:32:54,128 --> 00:32:58,658
bake the the reversal stuff into here so

751
00:32:56,440 --> 00:33:00,249
I'm gonna take reverse and I guess I

752
00:32:58,659 --> 00:33:02,950
forgot to do this on the last pasture

753
00:33:00,249 --> 00:33:09,669
I'm gonna remove that entirely and I

754
00:33:02,950 --> 00:33:12,838
guess I can just use that to ensure that

755
00:33:09,669 --> 00:33:12,839
I've gotten rid of all of them

756
00:33:21,269 --> 00:33:34,720
okay so I think that is all we need to

757
00:33:32,259 --> 00:33:36,879
do for that and then in here when I'm

758
00:33:34,720 --> 00:33:42,960
going to do my you 64 to a ski all I

759
00:33:36,880 --> 00:33:42,960
need to do is remember where I was

760
00:33:43,019 --> 00:33:47,680
can't remember what the desk thing is

761
00:33:45,609 --> 00:33:53,369
here what is that structure there's a

762
00:33:47,680 --> 00:33:53,370
structure that we're using format dest

763
00:33:54,960 --> 00:34:07,509
for coder tell me where that is okay

764
00:33:58,019 --> 00:34:09,909
there we go all right so all I should

765
00:34:07,509 --> 00:34:12,070
have to do if I want to just reverse

766
00:34:09,909 --> 00:34:14,320
this thing is say well I've got this

767
00:34:12,070 --> 00:34:16,539
format desk construct right and I know

768
00:34:14,320 --> 00:34:21,539
where it would start so I could say like

769
00:34:16,539 --> 00:34:23,949
the start of this thing is here right

770
00:34:21,539 --> 00:34:25,590
then when I get to the end I know the

771
00:34:23,949 --> 00:34:28,898
end of the thing is wherever it stopped

772
00:34:25,590 --> 00:34:30,700
so if I want to reverse that if I want

773
00:34:28,898 --> 00:34:33,279
to reverse the order of the things that

774
00:34:30,699 --> 00:34:37,000
I printed out there remember this is one

775
00:34:33,280 --> 00:34:40,840
past the end yeah but I know how many

776
00:34:37,000 --> 00:34:43,510
there were total right I know that the

777
00:34:40,840 --> 00:34:45,309
care count is just gonna be n - start

778
00:34:43,510 --> 00:34:47,950
right that's how many there are

779
00:34:45,309 --> 00:34:50,679
so once I know how many of them there

780
00:34:47,949 --> 00:34:52,599
are it's pretty easy for me to just walk

781
00:34:50,679 --> 00:34:57,280
through half and switch them with the

782
00:34:52,599 --> 00:35:01,389
other half right all I have to do is say

783
00:34:57,280 --> 00:35:04,450
well swap index you know equals zero

784
00:35:01,389 --> 00:35:06,159
swap index is less than care count / -

785
00:35:04,449 --> 00:35:07,299
because I just have to go through half

786
00:35:06,159 --> 00:35:10,449
the buffer and swap it with the other

787
00:35:07,300 --> 00:35:15,190
half right and then I can just say all

788
00:35:10,449 --> 00:35:17,889
right I need you I need to take you know

789
00:35:15,190 --> 00:35:20,139
whatever the end is and I guess I need

790
00:35:17,889 --> 00:35:22,779
to pre I need to sort of pre step the

791
00:35:20,139 --> 00:35:24,940
end back one so I kinda have to do like

792
00:35:22,780 --> 00:35:28,269
you know please step the end back one so

793
00:35:24,940 --> 00:35:32,170
that's in a legal slot I have to say

794
00:35:28,269 --> 00:35:33,250
whatever you know the the in fact you

795
00:35:32,170 --> 00:35:34,869
know what I don't even really need the

796
00:35:33,250 --> 00:35:38,679
care count do I

797
00:35:34,869 --> 00:35:41,799
I don't even really need the care count

798
00:35:38,679 --> 00:35:45,730
now think about it all I have to do is

799
00:35:41,800 --> 00:35:46,990
say while start is not equal to end or

800
00:35:45,730 --> 00:35:48,750
rather yet

801
00:35:46,989 --> 00:35:52,059
well the start is less than the end

802
00:35:48,750 --> 00:35:53,769
right I don't need the care count at all

803
00:35:52,059 --> 00:35:56,079
because I have the end and I have the

804
00:35:53,769 --> 00:36:02,250
start all I have to do is just move the

805
00:35:56,079 --> 00:36:02,250
end back into a valid position right

806
00:36:02,489 --> 00:36:09,429
read it set it to whatever the start is

807
00:36:07,599 --> 00:36:11,230
and then set the start to whatever the

808
00:36:09,429 --> 00:36:13,750
end was and then move the start forward

809
00:36:11,230 --> 00:36:16,360
that should just right it should be two

810
00:36:13,750 --> 00:36:18,820
pointers that just kind of move swapping

811
00:36:16,360 --> 00:36:22,019
the values that they had I think that

812
00:36:18,820 --> 00:36:26,110
would just work to be completely honest

813
00:36:22,019 --> 00:36:28,599
yeah so I think let's double check that

814
00:36:26,110 --> 00:36:30,160
I'm right about that

815
00:36:28,599 --> 00:36:33,159
but I think that's really all we would

816
00:36:30,159 --> 00:36:38,369
need to do I'm going to just I kind of

817
00:36:33,159 --> 00:36:40,119
want to take a look at the oh and hey

818
00:36:38,369 --> 00:36:42,819
probably I should put it in the right

819
00:36:40,119 --> 00:36:45,009
routine it's just just thinking maybe we

820
00:36:42,820 --> 00:36:46,210
should put it in the right routine just

821
00:36:45,010 --> 00:36:48,040
seems like a good idea instead of

822
00:36:46,210 --> 00:36:49,420
putting it in the wrong routine where

823
00:36:48,039 --> 00:36:50,739
it's not gonna do what we wanted to do

824
00:36:49,420 --> 00:36:52,630
because not even working on the right

825
00:36:50,739 --> 00:36:54,729
code maybe we'll put it in the right

826
00:36:52,630 --> 00:36:55,900
routine so yeah that goes alright so

827
00:36:54,730 --> 00:36:57,340
there we still have to start at the end

828
00:36:55,900 --> 00:36:58,900
in the middle of our loop that prints

829
00:36:57,340 --> 00:37:00,820
out values then we've kind of described

830
00:36:58,900 --> 00:37:04,269
this relatively simple situation here

831
00:37:00,820 --> 00:37:06,460
that we can use okay so let's take a

832
00:37:04,269 --> 00:37:08,789
look at what that does just to make sure

833
00:37:06,460 --> 00:37:10,990
that I wrote it even remotely correctly

834
00:37:08,789 --> 00:37:13,360
because you know it's been a long day

835
00:37:10,989 --> 00:37:14,409
could make some mistakes make some

836
00:37:13,360 --> 00:37:18,519
mistakes up in there

837
00:37:14,409 --> 00:37:21,369
all right so let's see what we've got

838
00:37:18,519 --> 00:37:24,219
first time through the loop or first

839
00:37:21,369 --> 00:37:26,079
time through the code so we've got start

840
00:37:24,219 --> 00:37:27,429
and ends not particularly interesting

841
00:37:26,079 --> 00:37:30,759
word we're literally just printing out

842
00:37:27,429 --> 00:37:32,199
the values 0 here apparently but that's

843
00:37:30,760 --> 00:37:33,760
good we can test the case of only

844
00:37:32,199 --> 00:37:34,989
printing out a single digit which we

845
00:37:33,760 --> 00:37:38,260
want to make sure we get correct

846
00:37:34,989 --> 00:37:39,969
certainly so here we go we look to see

847
00:37:38,260 --> 00:37:41,320
if the start and the end are different

848
00:37:39,969 --> 00:37:43,809
of course they are because end is

849
00:37:41,320 --> 00:37:45,940
pointing to one past where the start is

850
00:37:43,809 --> 00:37:47,650
pointing so we back it up and now

851
00:37:45,940 --> 00:37:48,639
they're both pointing the same value we

852
00:37:47,650 --> 00:37:52,210
read out

853
00:37:48,639 --> 00:37:53,889
into temp we assigns End and starts for

854
00:37:52,210 --> 00:37:56,440
basically overwrite itself and then we

855
00:37:53,889 --> 00:37:58,119
assign start to every red we then move

856
00:37:56,440 --> 00:38:00,130
the start pointer forwards now the start

857
00:37:58,119 --> 00:38:01,960
pointer is pointing past the end pointer

858
00:38:00,130 --> 00:38:05,260
so we exit the loop we have

859
00:38:01,960 --> 00:38:07,840
quote-unquote reversed it and and off we

860
00:38:05,260 --> 00:38:09,640
go let's hope that we get something a

861
00:38:07,840 --> 00:38:14,800
little bit more complicated here

862
00:38:09,639 --> 00:38:21,489
we didn't unfortunately so oh well

863
00:38:14,800 --> 00:38:24,490
come on man give me something all right

864
00:38:21,489 --> 00:38:26,199
fine I'm a cheat because I can I want to

865
00:38:24,489 --> 00:38:28,629
see this printout something longer I'm

866
00:38:26,199 --> 00:38:31,719
gonna say that the value I'm just gonna

867
00:38:28,630 --> 00:38:33,460
use the debugger to set the actual value

868
00:38:31,719 --> 00:38:36,189
and memory of value to be something else

869
00:38:33,460 --> 00:38:38,909
so let's say that it's going to be one

870
00:38:36,190 --> 00:38:42,429
two three four five six seven eight nine

871
00:38:38,909 --> 00:38:44,469
right so now when I run this hopefully

872
00:38:42,429 --> 00:38:46,569
if that debugger actually set that value

873
00:38:44,469 --> 00:38:48,669
properly hopefully when we get the

874
00:38:46,570 --> 00:38:50,140
string we'll get that backwards right

875
00:38:48,670 --> 00:38:50,470
nine eight seven six five four three two

876
00:38:50,139 --> 00:38:52,269
one

877
00:38:50,469 --> 00:38:55,449
which is what we wanted to see so that's

878
00:38:52,269 --> 00:38:59,380
good so now let's see if it reverses it

879
00:38:55,449 --> 00:39:02,079
properly I'm gonna snap a pointer to

880
00:38:59,380 --> 00:39:03,400
that right I'm just gonna say here's the

881
00:39:02,079 --> 00:39:04,750
beginning of the string so as these

882
00:39:03,400 --> 00:39:05,500
things move we can actually watch it

883
00:39:04,750 --> 00:39:07,840
work

884
00:39:05,500 --> 00:39:09,099
I'm gonna set that as a character and so

885
00:39:07,840 --> 00:39:11,590
here we can see the string that we

886
00:39:09,099 --> 00:39:13,329
started with and now I'm just gonna go

887
00:39:11,590 --> 00:39:15,100
ahead and let it do its thing so I can

888
00:39:13,329 --> 00:39:17,349
verify that it's actually doing the swap

889
00:39:15,099 --> 00:39:19,150
incorrectly and hey there you can see in

890
00:39:17,349 --> 00:39:21,819
the painfully slowly updating watch

891
00:39:19,150 --> 00:39:23,950
window of visual studio that they're

892
00:39:21,820 --> 00:39:27,550
actually swapping those values which is

893
00:39:23,949 --> 00:39:30,099
what we want to have happen right so now

894
00:39:27,550 --> 00:39:31,630
it's 1 2 3 4 5 6 7 8 9 and that's what

895
00:39:30,099 --> 00:39:33,789
we want so I think that's a reasonable

896
00:39:31,630 --> 00:39:37,000
way to bake that in there that seems

897
00:39:33,789 --> 00:39:38,380
fine so now we can go back to our other

898
00:39:37,000 --> 00:39:41,679
problem which is figuring out why the

899
00:39:38,380 --> 00:39:44,260
precision part of our thing was not

900
00:39:41,679 --> 00:39:52,239
working properly like with the dots and

901
00:39:44,260 --> 00:39:54,190
so on right ok so let's move on from

902
00:39:52,239 --> 00:39:55,929
there now we've got our numbers

903
00:39:54,190 --> 00:39:57,400
reversing properly it looks like they're

904
00:39:55,929 --> 00:39:59,409
printing out the correct numbers we're

905
00:39:57,400 --> 00:40:01,960
just not printing out anything past the

906
00:39:59,409 --> 00:40:04,348
decimal point on these particular cases

907
00:40:01,960 --> 00:40:06,789
here it looks like we're maybe doing

908
00:40:04,349 --> 00:40:09,160
things a little bit more correctly that

909
00:40:06,789 --> 00:40:11,829
looks like a more plausible printout so

910
00:40:09,159 --> 00:40:13,858
it looks like when we're specifying our

911
00:40:11,829 --> 00:40:16,029
Precision's like these are ones with

912
00:40:13,858 --> 00:40:18,579
prespecified Precision's we're only

913
00:40:16,030 --> 00:40:20,320
getting two things printed out I have an

914
00:40:18,579 --> 00:40:22,539
inkling of why that might be if I don't

915
00:40:20,320 --> 00:40:24,280
know for sure but anyway it looks like

916
00:40:22,539 --> 00:40:27,159
we're you know we're within striking

917
00:40:24,280 --> 00:40:29,740
distance this is not a good printout I

918
00:40:27,159 --> 00:40:31,389
would like to stress that again because

919
00:40:29,739 --> 00:40:32,979
like I said we're just doing the really

920
00:40:31,389 --> 00:40:35,799
the stupidest possible thing here to

921
00:40:32,980 --> 00:40:38,199
print out these floating-point numbers

922
00:40:35,800 --> 00:40:39,820
but at least we're printing out

923
00:40:38,199 --> 00:40:43,809
something that's resembling the correct

924
00:40:39,820 --> 00:40:45,160
value to some extent right okay so let's

925
00:40:43,809 --> 00:40:46,858
figure out what's going on with our

926
00:40:45,159 --> 00:40:49,088
precision there and try to make that

927
00:40:46,858 --> 00:40:51,460
work a little bit better also how much

928
00:40:49,088 --> 00:40:53,858
time do we have here at 858 okay so

929
00:40:51,460 --> 00:40:56,858
we've got about 15 minutes left before

930
00:40:53,858 --> 00:40:59,500
the QA I guess that won't tell me but I

931
00:40:56,858 --> 00:41:05,199
I think we've got until they started at

932
00:40:59,500 --> 00:41:08,260
8:15 so we got till 9:15 all right so

933
00:41:05,199 --> 00:41:09,939
there's our s 64 to ASCII we've got this

934
00:41:08,260 --> 00:41:11,680
precision index and we want to be less

935
00:41:09,940 --> 00:41:13,780
than precision as we print things out so

936
00:41:11,679 --> 00:41:15,309
it and this does appear to be working

937
00:41:13,780 --> 00:41:18,760
nominally again I don't think it's

938
00:41:15,309 --> 00:41:24,039
pickly accurate but and I could put it

939
00:41:18,760 --> 00:41:31,990
to do here to note that this is not an

940
00:41:24,039 --> 00:41:35,949
accurate way to do this so what we have

941
00:41:31,989 --> 00:41:38,588
at this point is a problem with whatever

942
00:41:35,949 --> 00:41:39,969
is happening printout wise here so the

943
00:41:38,588 --> 00:41:42,159
first thing I want to do is I want to

944
00:41:39,969 --> 00:41:44,618
look at the debug code to see what I'm

945
00:41:42,159 --> 00:41:47,108
actually passing as a precision

946
00:41:44,619 --> 00:41:50,619
specifier there I assume that I'm

947
00:41:47,108 --> 00:41:52,929
passing like yeah so I'm passing Oh 2.0

948
00:41:50,619 --> 00:41:55,900
to F right that's what I'm actually

949
00:41:52,929 --> 00:41:58,929
passing and so my question is just how

950
00:41:55,900 --> 00:42:02,800
is the point O two point O two gettin

951
00:41:58,929 --> 00:42:08,529
interpreted and it's it would it would

952
00:42:02,800 --> 00:42:12,099
seem to me and I guess I don't know but

953
00:42:08,530 --> 00:42:15,050
it would seem to me that the width

954
00:42:12,099 --> 00:42:18,910
specifier of

955
00:42:15,050 --> 00:42:21,500
point o2 in the floating-point case is

956
00:42:18,909 --> 00:42:23,629
actually doesn't work the same way it

957
00:42:21,500 --> 00:42:25,369
works in the decimal case like it's not

958
00:42:23,630 --> 00:42:27,760
the total width that this thing should

959
00:42:25,369 --> 00:42:31,759
be it's just the width of the thing

960
00:42:27,760 --> 00:42:34,760
before the decimal point right so I want

961
00:42:31,760 --> 00:42:38,630
to go take a quick peek at the printf

962
00:42:34,760 --> 00:42:41,090
formatting specifiers documentation so

963
00:42:38,630 --> 00:42:44,390
that I know what even it's supposed to

964
00:42:41,090 --> 00:42:47,019
be in that case because I guess I don't

965
00:42:44,389 --> 00:42:48,289
really know what the spec oh dear oh

966
00:42:47,019 --> 00:42:58,630
dear

967
00:42:48,289 --> 00:42:59,869
Chrome hello chrome Chrome you can do it

968
00:42:58,630 --> 00:43:03,710
all right

969
00:42:59,869 --> 00:43:05,949
maybe you can't do it chrome what is the

970
00:43:03,710 --> 00:43:09,710
problem all right there we go

971
00:43:05,949 --> 00:43:16,909
so here are my width and precision

972
00:43:09,710 --> 00:43:19,550
specifiers and yeah minimum number of

973
00:43:16,909 --> 00:43:21,019
characters to be printed is the width if

974
00:43:19,550 --> 00:43:22,280
the value is pretty short in this number

975
00:43:21,019 --> 00:43:25,009
of the result of spatter the exercise

976
00:43:22,280 --> 00:43:26,510
desires not truncated sauce is larger so

977
00:43:25,010 --> 00:43:29,720
I guess the problem is we were

978
00:43:26,510 --> 00:43:32,540
truncating the value if it was larger so

979
00:43:29,719 --> 00:43:38,929
I guess I was not really doing what the

980
00:43:32,539 --> 00:43:43,039
spec told me to do there right am i

981
00:43:38,929 --> 00:43:48,019
right about this why am I looking at

982
00:43:43,039 --> 00:43:50,480
that it's not really right so I think

983
00:43:48,019 --> 00:43:55,400
that's not what we were doing in this

984
00:43:50,480 --> 00:43:58,940
case we have width and in here we were

985
00:43:55,400 --> 00:44:02,480
saying well I think we truncate we

986
00:43:58,940 --> 00:44:04,720
truncate the value if it can't fit in

987
00:44:02,480 --> 00:44:04,719
width

988
00:44:10,360 --> 00:44:15,050
yeah so I think we're kind of I think

989
00:44:13,190 --> 00:44:16,760
we're kind of following the specific

990
00:44:15,050 --> 00:44:19,850
we're following the wrong specification

991
00:44:16,760 --> 00:44:21,170
here right we did we did not do what the

992
00:44:19,849 --> 00:44:23,630
width was actually supposed to be

993
00:44:21,170 --> 00:44:25,190
because you can see here that you know

994
00:44:23,630 --> 00:44:26,599
okay if the width wasn't specified use

995
00:44:25,190 --> 00:44:29,240
the precision plus the prefix like this

996
00:44:26,599 --> 00:44:32,449
etc these were supposed to be minimum

997
00:44:29,239 --> 00:44:38,779
values that came through but then we're

998
00:44:32,449 --> 00:44:40,609
doing loops that sort of stopped if the

999
00:44:38,780 --> 00:44:44,810
width is not right

1000
00:44:40,610 --> 00:44:49,640
like if the width is not sufficient to

1001
00:44:44,809 --> 00:44:52,269
print them we stopped and that's wrong I

1002
00:44:49,639 --> 00:44:55,489
guess we should have kept going

1003
00:44:52,269 --> 00:44:58,309
regardless of whether or not we have any

1004
00:44:55,489 --> 00:45:09,609
width left all we really wanted to do

1005
00:44:58,309 --> 00:45:09,610
was pad if we needed to right yeah

1006
00:45:15,760 --> 00:45:27,190
yeah that seems to be the case so we use

1007
00:45:22,059 --> 00:45:29,679
precision is going to be whatever the

1008
00:45:27,190 --> 00:45:31,720
size of the thing is so when we say

1009
00:45:29,679 --> 00:45:35,199
pointer to that precision also usually

1010
00:45:31,719 --> 00:45:37,209
is in for floating-point values it means

1011
00:45:35,199 --> 00:45:39,069
something different so we probably will

1012
00:45:37,210 --> 00:45:44,769
even have to sort of adjust this

1013
00:45:39,070 --> 00:45:47,050
condition here because because that's

1014
00:45:44,769 --> 00:45:48,909
not really what the precision means in

1015
00:45:47,050 --> 00:45:51,010
the floating-point case does that mean

1016
00:45:48,909 --> 00:45:52,539
there's no real way in the Profoto point

1017
00:45:51,010 --> 00:45:54,190
case to do the equivalent thing I don't

1018
00:45:52,539 --> 00:45:56,320
know printf is crazy the way they do

1019
00:45:54,190 --> 00:45:59,200
their format specification is kind of

1020
00:45:56,320 --> 00:46:00,670
not so it's it's really hard to

1021
00:45:59,199 --> 00:46:02,279
understand exactly how all the things

1022
00:46:00,670 --> 00:46:07,539
are supposed to interact with each other

1023
00:46:02,280 --> 00:46:09,040
but you know what do you know anyway so

1024
00:46:07,539 --> 00:46:11,170
if we take a look at this what that

1025
00:46:09,039 --> 00:46:13,329
would mean if we wanted to relax that

1026
00:46:11,170 --> 00:46:20,440
restriction I think what that would mean

1027
00:46:13,329 --> 00:46:23,230
is that this use width stuff really

1028
00:46:20,440 --> 00:46:25,570
would allow they use with the only thing

1029
00:46:23,230 --> 00:46:29,530
we really need to do is just make it so

1030
00:46:25,570 --> 00:46:31,359
that they use with itself is always

1031
00:46:29,530 --> 00:46:32,980
expanding that we can even leave the

1032
00:46:31,358 --> 00:46:35,349
code the way it is we could just make

1033
00:46:32,980 --> 00:46:37,358
sure that they use with itself is always

1034
00:46:35,349 --> 00:46:43,029
expanded to include the entire size of

1035
00:46:37,358 --> 00:46:45,190
the thing if it's less right so I think

1036
00:46:43,030 --> 00:46:50,980
all we really need to do there is say

1037
00:46:45,190 --> 00:46:51,400
well you know if we need like a computed

1038
00:46:50,980 --> 00:46:57,090
width

1039
00:46:51,400 --> 00:46:57,090
you know we need to say

1040
00:47:03,750 --> 00:47:09,550
instead of doing if not with specified I

1041
00:47:06,579 --> 00:47:13,889
think what we want to do is say if they

1042
00:47:09,550 --> 00:47:18,460
use width is less than the computed with

1043
00:47:13,889 --> 00:47:23,879
the use with equals computed with so I

1044
00:47:18,460 --> 00:47:23,880
think that's probably a little more

1045
00:47:24,360 --> 00:47:29,230
correct now I don't think that should

1046
00:47:27,190 --> 00:47:30,849
affect anything you know I think that

1047
00:47:29,230 --> 00:47:33,000
should leave our printouts pretty much

1048
00:47:30,849 --> 00:47:35,110
untouched if I'm not mistaken so

1049
00:47:33,000 --> 00:47:38,139
everything should be fine here and it

1050
00:47:35,110 --> 00:47:39,910
does seem to be so that's good so now

1051
00:47:38,139 --> 00:47:42,900
what we need to do is make it so that

1052
00:47:39,909 --> 00:47:44,739
this precision here is actually computed

1053
00:47:42,900 --> 00:47:46,450
differently if it's a floating-point

1054
00:47:44,739 --> 00:47:48,669
value right because floating-point

1055
00:47:46,449 --> 00:47:51,309
values need to have their precision

1056
00:47:48,670 --> 00:47:53,200
specified in a different way or rather

1057
00:47:51,309 --> 00:47:56,559
the precision specifier for them does

1058
00:47:53,199 --> 00:47:58,868
not mean that you are trying to box how

1059
00:47:56,559 --> 00:48:01,449
big the value is it's talking about the

1060
00:47:58,869 --> 00:48:03,840
part after the decimal point right so

1061
00:48:01,449 --> 00:48:06,189
that's what precision means in this case

1062
00:48:03,840 --> 00:48:07,720
for these it's the number of dishes

1063
00:48:06,190 --> 00:48:11,980
written after the decimal point

1064
00:48:07,719 --> 00:48:13,239
which by default is 6 right so hey we

1065
00:48:11,980 --> 00:48:14,679
set it to the right value there right

1066
00:48:13,239 --> 00:48:20,409
that's what we said it - if it's not

1067
00:48:14,679 --> 00:48:22,210
specified ok so we will need to record

1068
00:48:20,409 --> 00:48:30,159
whether or not it's float unfortunately

1069
00:48:22,210 --> 00:48:33,639
I believe and then we'll have to set

1070
00:48:30,159 --> 00:48:36,069
that to true of these cases because we

1071
00:48:33,639 --> 00:48:37,389
have to handle the precision differently

1072
00:48:36,070 --> 00:48:39,869
depending on which one it is we're

1073
00:48:37,389 --> 00:48:39,868
talking about

1074
00:48:47,139 --> 00:48:53,349
okay and so in this case what we would

1075
00:48:51,010 --> 00:48:59,200
need to do is say okay if we are going

1076
00:48:53,349 --> 00:49:01,000
to use if we were using a floating point

1077
00:48:59,199 --> 00:49:04,029
number so the precision was used for

1078
00:49:01,000 --> 00:49:07,420
that purpose then what this means is we

1079
00:49:04,030 --> 00:49:10,630
would always use this value meaning we

1080
00:49:07,420 --> 00:49:13,539
would not so we'd say like you know if

1081
00:49:10,630 --> 00:49:17,650
it is a float or the presenter was not

1082
00:49:13,539 --> 00:49:20,590
specified then we will use the total

1083
00:49:17,650 --> 00:49:26,889
size of the thing being printed as the

1084
00:49:20,590 --> 00:49:30,490
amount to print instead okay

1085
00:49:26,889 --> 00:49:32,259
so that's looking better but we still

1086
00:49:30,489 --> 00:49:36,159
have the problem of that's not looking

1087
00:49:32,260 --> 00:49:38,320
like it's padding properly and that

1088
00:49:36,159 --> 00:49:42,099
makes sense because the width value that

1089
00:49:38,320 --> 00:49:44,530
we specified I don't know what that

1090
00:49:42,099 --> 00:49:47,440
width value is really even talking about

1091
00:49:44,530 --> 00:49:51,490
at this point should it have put a space

1092
00:49:47,440 --> 00:49:53,320
in front I don't know I don't really

1093
00:49:51,489 --> 00:49:56,139
know if it should ever shouldn't have I

1094
00:49:53,320 --> 00:49:58,240
think it should have but then again if

1095
00:49:56,139 --> 00:50:01,539
you read that spec it kind of makes it

1096
00:49:58,239 --> 00:50:03,369
sound like it shouldn't minimum number

1097
00:50:01,539 --> 00:50:04,420
of characters be printed if the value to

1098
00:50:03,369 --> 00:50:06,009
be printed is shorter than this number

1099
00:50:04,420 --> 00:50:08,680
the result is padded with blank spaces

1100
00:50:06,010 --> 00:50:12,040
the value is not truncated oh sorry that

1101
00:50:08,679 --> 00:50:19,239
doesn't say before the decimal point

1102
00:50:12,039 --> 00:50:22,619
right so it kind of sounds like actually

1103
00:50:19,239 --> 00:50:22,619
that's the correct behavior

1104
00:50:27,559 --> 00:50:35,969
honestly right I mean if you actually

1105
00:50:33,179 --> 00:50:38,039
read the spec it makes it sound like

1106
00:50:35,969 --> 00:50:41,159
that's doing the correct thing and it

1107
00:50:38,039 --> 00:50:43,769
sounds like you know if you actually if

1108
00:50:41,159 --> 00:50:47,309
that spec was actually correct then

1109
00:50:43,769 --> 00:51:00,230
really the part that's like doing this

1110
00:50:47,309 --> 00:51:02,250
stuff these should really be 5.02 right

1111
00:51:00,230 --> 00:51:04,860
because you you're want to print out

1112
00:51:02,250 --> 00:51:06,659
five total characters which is what the

1113
00:51:04,860 --> 00:51:09,900
wit specifier is supposed to be saying

1114
00:51:06,659 --> 00:51:11,429
so percent o 2 O 2 is not actually

1115
00:51:09,900 --> 00:51:13,410
correct even though I think that's what

1116
00:51:11,429 --> 00:51:15,469
I normally use it makes me feel like

1117
00:51:13,409 --> 00:51:17,579
maybe that spec is wrong or the

1118
00:51:15,469 --> 00:51:19,889
normalization of printf is wrong I don't

1119
00:51:17,579 --> 00:51:23,309
know but you understand my dilemma there

1120
00:51:19,889 --> 00:51:25,469
because you know this makes it look like

1121
00:51:23,309 --> 00:51:27,329
it would be the part before the decimal

1122
00:51:25,469 --> 00:51:29,519
point and you're specifying how wide

1123
00:51:27,329 --> 00:51:31,529
that should be but that's not really

1124
00:51:29,519 --> 00:51:33,780
what the spec suggests the spec does not

1125
00:51:31,530 --> 00:51:35,670
suggest that at all I shouldn't say spec

1126
00:51:33,780 --> 00:51:37,950
it's not the spec it's some stupid help

1127
00:51:35,670 --> 00:51:39,809
page so maybe that's totally wrong but

1128
00:51:37,949 --> 00:51:42,839
you can see what I mean like that feels

1129
00:51:39,809 --> 00:51:45,750
like what I should actually have done to

1130
00:51:42,840 --> 00:51:47,250
make the correct printout and and I

1131
00:51:45,750 --> 00:51:49,590
don't know who's right in this case

1132
00:51:47,250 --> 00:51:55,170
right and hey there you go now it's now

1133
00:51:49,590 --> 00:51:57,690
it's correct uh so I don't know I don't

1134
00:51:55,170 --> 00:52:03,659
know what to make of that is there a

1135
00:51:57,690 --> 00:52:05,639
better specification is there a better

1136
00:52:03,659 --> 00:52:08,179
specification for this somewhere right I

1137
00:52:05,639 --> 00:52:08,179
don't know

1138
00:52:12,409 --> 00:52:18,048
the width field specifies a minimum

1139
00:52:16,099 --> 00:52:22,190
number of curse output and is typically

1140
00:52:18,048 --> 00:52:24,588
okay is typically used to pad fix with

1141
00:52:22,190 --> 00:52:26,119
fields and tabulated output where the

1142
00:52:24,588 --> 00:52:28,489
fields would otherwise be smaller

1143
00:52:26,119 --> 00:52:30,920
although it does not cause truncation of

1144
00:52:28,489 --> 00:52:33,588
oversized fields the width field may be

1145
00:52:30,920 --> 00:52:35,119
omitted or a numeric integer value or

1146
00:52:33,588 --> 00:52:36,849
dynamic value and passed as other

1147
00:52:35,119 --> 00:52:39,920
argument when indicated by an asterisk

1148
00:52:36,849 --> 00:52:42,170
for example and it prints that out

1149
00:52:39,920 --> 00:52:44,358
though not part of the width field a

1150
00:52:42,170 --> 00:52:45,769
leading zero is interpreted as the zero

1151
00:52:44,358 --> 00:52:47,328
padding flag mentioned above and

1152
00:52:45,768 --> 00:52:49,578
negative values tree is the positive

1153
00:52:47,329 --> 00:52:58,220
value in conjunction with the left

1154
00:52:49,579 --> 00:53:04,160
alignment flag I don't know I don't know

1155
00:52:58,219 --> 00:53:06,949
what to make it as folks I mean I guess

1156
00:53:04,159 --> 00:53:09,259
I don't care that's some level it's our

1157
00:53:06,949 --> 00:53:11,778
printout now we can make the

1158
00:53:09,259 --> 00:53:13,548
specification be whatever we want but I

1159
00:53:11,778 --> 00:53:15,650
was just following the printf format

1160
00:53:13,548 --> 00:53:17,329
specifiers for kind of a principle of

1161
00:53:15,650 --> 00:53:19,130
least surprise sort of thing so that it

1162
00:53:17,329 --> 00:53:19,660
was just you know it's what you would

1163
00:53:19,130 --> 00:53:21,470
expect

1164
00:53:19,659 --> 00:53:23,118
unfortunately when I'm reading this I

1165
00:53:21,469 --> 00:53:27,828
really don't know what it's supposed to

1166
00:53:23,119 --> 00:53:30,140
be but I mean you can see right here

1167
00:53:27,829 --> 00:53:32,900
what the expected output is that three

1168
00:53:30,139 --> 00:53:34,879
would mean three characters total if we

1169
00:53:32,900 --> 00:53:37,160
were to believe what these width aspire

1170
00:53:34,880 --> 00:53:40,460
say and if you look that is four

1171
00:53:37,159 --> 00:53:43,368
characters right so clearly you know

1172
00:53:40,460 --> 00:53:44,778
much much as my intuition and having

1173
00:53:43,369 --> 00:53:47,119
used printf my whole life

1174
00:53:44,778 --> 00:53:48,980
would have expected that's not what that

1175
00:53:47,119 --> 00:53:50,660
value means yet if you look at what

1176
00:53:48,980 --> 00:53:52,278
these things are saying they're

1177
00:53:50,659 --> 00:53:54,048
suggesting something completely

1178
00:53:52,278 --> 00:53:55,548
different and I don't know what I really

1179
00:53:54,048 --> 00:53:57,409
don't know what to make of that that's

1180
00:53:55,548 --> 00:53:58,699
very confusing is all this documentation

1181
00:53:57,409 --> 00:54:01,788
just wrong

1182
00:53:58,699 --> 00:54:07,639
are they like not stating it properly

1183
00:54:01,789 --> 00:54:10,660
and I don't know let's see what

1184
00:54:07,639 --> 00:54:10,659
Microsoft has to say

1185
00:54:10,789 --> 00:54:14,039
optional decimal number that specifies

1186
00:54:13,050 --> 00:54:17,220
the minimum of the kerrick's that our

1187
00:54:14,039 --> 00:54:20,699
output for more information see printf

1188
00:54:17,219 --> 00:54:22,500
with specification oh well you know what

1189
00:54:20,699 --> 00:54:24,629
know though since it's the minimum

1190
00:54:22,500 --> 00:54:27,420
number I should I spoke a little bit too

1191
00:54:24,630 --> 00:54:29,789
soon there since the minimum number that

1192
00:54:27,420 --> 00:54:31,680
that could be allowed it would only be

1193
00:54:29,789 --> 00:54:32,909
if yeah so that that's fine because it

1194
00:54:31,679 --> 00:54:39,659
is allowed to print out for if you

1195
00:54:32,909 --> 00:54:41,489
specify three right three positions

1196
00:54:39,659 --> 00:54:43,559
before the decimal point called width

1197
00:54:41,489 --> 00:54:45,899
see even there but they're saying it

1198
00:54:43,559 --> 00:54:48,869
that way they're saying it that way and

1199
00:54:45,900 --> 00:54:52,280
that's not what they mean or that's not

1200
00:54:48,869 --> 00:54:55,590
what this what the spec seems suggests

1201
00:54:52,280 --> 00:54:56,790
although here they say it the right way

1202
00:54:55,590 --> 00:55:00,720
or they say it the way the spec

1203
00:54:56,789 --> 00:55:02,369
suggested is I don't know I'm gonna call

1204
00:55:00,719 --> 00:55:08,579
it four here I'm gonna say it's time to

1205
00:55:02,369 --> 00:55:10,860
go to the QA because I feel like I feel

1206
00:55:08,579 --> 00:55:14,579
like this is something where maybe

1207
00:55:10,860 --> 00:55:17,690
people should have an opinion about this

1208
00:55:14,579 --> 00:55:23,608
separately and we can maybe take a look

1209
00:55:17,690 --> 00:55:26,309
at the we could take a look at what what

1210
00:55:23,608 --> 00:55:27,509
people on the internet feel in terms of

1211
00:55:26,309 --> 00:55:28,049
how we do that because I don't know what

1212
00:55:27,510 --> 00:55:31,560
to make of that

1213
00:55:28,050 --> 00:55:33,300
I don't know what to make of that I feel

1214
00:55:31,559 --> 00:55:34,650
like it's really confusing because it

1215
00:55:33,300 --> 00:55:37,950
looks like people sort of think both

1216
00:55:34,650 --> 00:55:40,730
things I'm not sure who to believe but

1217
00:55:37,949 --> 00:55:40,730
but there you go

1218
00:55:48,170 --> 00:56:14,900
all right so any q and A's at the moment

1219
00:55:52,489 --> 00:56:14,899
any q and A's at the moment I'm tired

1220
00:56:16,579 --> 00:56:28,409
looks like the Q and a bot is not

1221
00:56:18,989 --> 00:56:32,309
working does the float printout account

1222
00:56:28,409 --> 00:56:33,899
for left or right alignment yeah I think

1223
00:56:32,309 --> 00:56:39,929
it does because it's still just using

1224
00:56:33,900 --> 00:56:41,970
the same code path so I think I believe

1225
00:56:39,929 --> 00:56:46,379
it would do the alignment for us

1226
00:56:41,969 --> 00:56:49,439
properly I let's see if we could verify

1227
00:56:46,380 --> 00:56:50,670
that so if I was to do this if to

1228
00:56:49,440 --> 00:56:55,500
construct a case where that actually

1229
00:56:50,670 --> 00:56:57,680
happens so if I'm to do this you can see

1230
00:56:55,500 --> 00:57:02,429
that this is right aligning the number

1231
00:56:57,679 --> 00:57:05,250
so I assume if we wanted to we could

1232
00:57:02,429 --> 00:57:08,369
left align that number how does it do

1233
00:57:05,250 --> 00:57:11,159
it's it's negative is that right this

1234
00:57:08,369 --> 00:57:16,109
requires me to actually remember how you

1235
00:57:11,159 --> 00:57:19,019
left a line which I never do yeah so so

1236
00:57:16,110 --> 00:57:21,000
it does appear that the float obeys that

1237
00:57:19,019 --> 00:57:24,119
properly because again we're just

1238
00:57:21,000 --> 00:57:28,469
piggybacking on the same code path which

1239
00:57:24,119 --> 00:57:30,599
is you know it's you'll note I did not

1240
00:57:28,469 --> 00:57:32,369
write this printf for like being super

1241
00:57:30,599 --> 00:57:34,349
performant because we don't care about

1242
00:57:32,369 --> 00:57:38,219
the speed of our printf right it's a

1243
00:57:34,349 --> 00:57:39,630
debugging tool and so I wrote the code

1244
00:57:38,219 --> 00:57:41,669
so that everything kind of goes to the

1245
00:57:39,630 --> 00:57:43,619
same path even if that's slower because

1246
00:57:41,670 --> 00:57:46,409
that allows us to implement all these

1247
00:57:43,619 --> 00:57:49,109
finicky things and without a ton of code

1248
00:57:46,409 --> 00:57:50,940
right you could imagine if you your

1249
00:57:49,110 --> 00:57:52,620
mandate was like okay print us an actual

1250
00:57:50,940 --> 00:57:53,789
serious thing we're really concerned

1251
00:57:52,619 --> 00:57:56,400
about how many print tests we're going

1252
00:57:53,789 --> 00:57:58,139
to be doing then you probably don't have

1253
00:57:56,400 --> 00:57:59,519
that luxury you might have to do things

1254
00:57:58,139 --> 00:58:01,289
so that you're actually smarter about

1255
00:57:59,519 --> 00:58:04,079
handling a lot of special case

1256
00:58:01,289 --> 00:58:05,550
and like oh this is the one for printing

1257
00:58:04,079 --> 00:58:07,679
out a floating-point number

1258
00:58:05,550 --> 00:58:10,970
with left alignment and it's like

1259
00:58:07,679 --> 00:58:10,969
specific you know or whatever

1260
00:58:17,000 --> 00:58:23,039
sure luck 93 are we stuck on what

1261
00:58:19,769 --> 00:58:25,679
something percent 3d means I was away

1262
00:58:23,039 --> 00:58:28,170
not really so we're very clear on what

1263
00:58:25,679 --> 00:58:31,559
percent 3d means because nobody seems to

1264
00:58:28,170 --> 00:58:34,019
be confused about that the width

1265
00:58:31,559 --> 00:58:37,079
specifier on integers is just obviously

1266
00:58:34,019 --> 00:58:38,820
the minimum space that it could take up

1267
00:58:37,079 --> 00:58:41,639
so it'll be padded if it's if it's less

1268
00:58:38,820 --> 00:58:43,410
than that so we get that the thing that

1269
00:58:41,639 --> 00:58:46,109
was confusing is some references on the

1270
00:58:43,409 --> 00:58:49,469
internet seem to believe or act like

1271
00:58:46,110 --> 00:58:52,260
when used with a floating-point number

1272
00:58:49,469 --> 00:58:53,849
it meant how many things before the

1273
00:58:52,260 --> 00:58:56,670
decimal point as opposed to how many

1274
00:58:53,849 --> 00:58:58,110
things total and so we were trying to

1275
00:58:56,670 --> 00:59:02,909
get confirmation that that was in fact

1276
00:58:58,110 --> 00:59:08,570
not true and that % 3f for example or %

1277
00:59:02,909 --> 00:59:10,920
3.3 F means three characters minimum not

1278
00:59:08,570 --> 00:59:18,180
three characters minimum before the

1279
00:59:10,920 --> 00:59:20,579
decimal point Culver fly sorry if it

1280
00:59:18,179 --> 00:59:21,989
sounds rude but why do you even care

1281
00:59:20,579 --> 00:59:23,610
about the specs why don't you just print

1282
00:59:21,989 --> 00:59:26,099
whatever you want to be I mean it's your

1283
00:59:23,610 --> 00:59:27,420
code yeah well like I said I kind of

1284
00:59:26,099 --> 00:59:29,339
just was obeying the principle of least

1285
00:59:27,420 --> 00:59:32,039
surprise there I mean we basically

1286
00:59:29,340 --> 00:59:34,650
cloned printf so it seemed like it might

1287
00:59:32,039 --> 00:59:40,139
be worth you know copying what their

1288
00:59:34,650 --> 00:59:42,420
format stuff was but no we don't have to

1289
00:59:40,139 --> 00:59:44,339
care right we are not trying to be a

1290
00:59:42,420 --> 00:59:46,920
drop-in replacement we did not for

1291
00:59:44,340 --> 00:59:51,090
example and probably won't do scientific

1292
00:59:46,920 --> 00:59:53,190
notation right so like technically if we

1293
00:59:51,090 --> 00:59:54,960
wanted to be complete right we have to

1294
00:59:53,190 --> 00:59:57,690
actually now go and differentiate

1295
00:59:54,960 --> 01:00:00,480
between these cases like G and E and F

1296
00:59:57,690 --> 01:00:02,940
instead of calling them all the same and

1297
01:00:00,480 --> 01:00:05,780
you know I might even say we could

1298
01:00:02,940 --> 01:00:05,780
probably just do

1299
01:00:14,050 --> 01:00:20,980
this for now

1300
01:00:24,389 --> 01:00:29,328
is that right these already exactly the

1301
01:00:26,429 --> 01:00:29,328
same thing right yeah

1302
01:01:01,048 --> 01:01:06,639
Sherlock 93 as far as I know percent 3.3

1303
01:01:04,989 --> 01:01:09,338
F means three numbers before the decimal

1304
01:01:06,639 --> 01:01:11,739
and precisely three decimal numbers that

1305
01:01:09,338 --> 01:01:16,389
is not what any of the documentation

1306
01:01:11,739 --> 01:01:21,159
suggests right I was sort of thinking

1307
01:01:16,389 --> 01:01:23,190
the same as you were thinking that that

1308
01:01:21,159 --> 01:01:25,989
was my intuition going to it as well and

1309
01:01:23,190 --> 01:01:27,909
that is why I was confused when the

1310
01:01:25,989 --> 01:01:29,940
documentation very clearly did not say

1311
01:01:27,909 --> 01:01:29,940
that

1312
01:01:30,268 --> 01:01:39,308
right and Martin's is posting that you

1313
01:01:37,298 --> 01:01:41,559
know CVB reference state citizen it's a

1314
01:01:39,309 --> 01:01:47,979
minimum width and that's what I was

1315
01:01:41,559 --> 01:01:51,609
seeing yeah so it you know it seems like

1316
01:01:47,978 --> 01:01:59,379
I am you know my intuition about what

1317
01:01:51,608 --> 01:02:01,150
that meant is not correct so I think the

1318
01:01:59,380 --> 01:02:05,170
way we have it implemented now is more

1319
01:02:01,150 --> 01:02:07,798
correct per the documentation forever

1320
01:02:05,170 --> 01:02:07,798
whatever that's worth

1321
01:02:12,280 --> 01:02:19,519
so I think we'll keep it like that I

1322
01:02:15,429 --> 01:02:23,500
think we will keep it like that

1323
01:02:19,519 --> 01:02:27,159
and Sherlock 93 you are not alone I

1324
01:02:23,500 --> 01:02:32,480
think that's what I thought it was too

1325
01:02:27,159 --> 01:02:34,609
so you know you can program a long time

1326
01:02:32,480 --> 01:02:38,570
still be wrong about stuff that you use

1327
01:02:34,610 --> 01:02:40,690
it's not not uncommon happens to me all

1328
01:02:38,570 --> 01:02:40,690
the time

1329
01:02:41,559 --> 01:02:52,519
insofar as can you say something

1330
01:02:44,150 --> 01:02:54,470
quotable for test purposes well I feel

1331
01:02:52,519 --> 01:02:58,869
like it's hard to say something quotable

1332
01:02:54,469 --> 01:02:58,869
on demand right

1333
01:03:11,719 --> 01:03:15,679
and three why gun yes I agree minimum

1334
01:03:14,300 --> 01:03:17,980
width makes it more consistent across

1335
01:03:15,679 --> 01:03:19,879
all types of printf which is why I'm

1336
01:03:17,980 --> 01:03:23,230
leaning towards assuming that the

1337
01:03:19,880 --> 01:03:23,230
documentation is actually correct

1338
01:03:23,858 --> 01:03:28,818
program gamer so wait is it a behavior

1339
01:03:26,929 --> 01:03:30,559
problem or a bad spec problem

1340
01:03:28,818 --> 01:03:32,630
it's neither we just wanted to know

1341
01:03:30,559 --> 01:03:35,108
because we can do either right it's it's

1342
01:03:32,630 --> 01:03:37,190
easy for us to support either one and

1343
01:03:35,108 --> 01:03:38,750
the way I had originally written the

1344
01:03:37,190 --> 01:03:41,358
code I was doing it kind of the way we

1345
01:03:38,750 --> 01:03:42,858
assumed but now that I read the spec I

1346
01:03:41,358 --> 01:03:45,500
changed it to do the other way so that

1347
01:03:42,858 --> 01:03:48,139
we'd go along with the spec and I think

1348
01:03:45,500 --> 01:03:53,170
that's probably just where we should you

1349
01:03:48,139 --> 01:03:53,170
know the way we should leave it

1350
01:04:03,630 --> 01:04:07,140
Elven do you think it's worth

1351
01:04:05,309 --> 01:04:09,470
implementing a custom string class that

1352
01:04:07,139 --> 01:04:11,460
uses a custom heap or allocation and

1353
01:04:09,469 --> 01:04:13,318
disposition of memory instead of dealing

1354
01:04:11,460 --> 01:04:21,409
directly with military FC strings

1355
01:04:13,318 --> 01:04:25,400
talking mostly for tools programming I

1356
01:04:21,409 --> 01:04:28,348
feel like that's really a question about

1357
01:04:25,400 --> 01:04:31,889
dependent about the context and it has I

1358
01:04:28,349 --> 01:04:34,789
don't feel like it has a generic answer

1359
01:04:31,889 --> 01:04:34,788
right

1360
01:04:38,869 --> 01:04:42,809
Sherlock 93 thanks to the stream have a

1361
01:04:41,159 --> 01:04:44,788
good evening going to work are you gonna

1362
01:04:42,809 --> 01:04:46,019
stream at this time from now on yes I

1363
01:04:44,789 --> 01:04:51,119
believe we will probably be back at the

1364
01:04:46,018 --> 01:04:52,409
8 p.m. timeslot because that was my

1365
01:04:51,119 --> 01:04:53,970
original time slot it's the one that's

1366
01:04:52,409 --> 01:04:56,879
baked into the trailer for example and

1367
01:04:53,969 --> 01:04:59,189
it was only because of you know personal

1368
01:04:56,880 --> 01:05:02,369
schedule situations which I no longer

1369
01:04:59,190 --> 01:05:05,940
have to worry about that it was ever

1370
01:05:02,369 --> 01:05:08,539
moved to 5:00 so I much prefer it at 8

1371
01:05:05,940 --> 01:05:11,219
it allows me to have a more relaxed day

1372
01:05:08,539 --> 01:05:15,239
and so it will probably stay there for

1373
01:05:11,219 --> 01:05:16,528
the foreseeable future but you know it

1374
01:05:15,239 --> 01:05:19,829
doesn't mean we won't occasionally have

1375
01:05:16,528 --> 01:05:21,329
streams at other times it just means

1376
01:05:19,829 --> 01:05:25,048
that they'll probably be at 8 again like

1377
01:05:21,329 --> 01:05:26,910
they were when it first started as Zelda

1378
01:05:25,048 --> 01:05:28,829
is text printing speed interfering with

1379
01:05:26,909 --> 01:05:29,998
your profiling accuracy in a significant

1380
01:05:28,829 --> 01:05:34,650
way

1381
01:05:29,998 --> 01:05:37,798
so not the printf part of it but the

1382
01:05:34,650 --> 01:05:39,749
sort is and so what we would like to do

1383
01:05:37,798 --> 01:05:41,489
is turn this that's sorting off at some

1384
01:05:39,748 --> 01:05:45,389
point because we don't really need

1385
01:05:41,489 --> 01:05:48,989
sorting to be happening on the on our

1386
01:05:45,389 --> 01:05:52,618
debug output in that way so we that

1387
01:05:48,989 --> 01:05:54,739
that's you know that's definitely the

1388
01:05:52,619 --> 01:05:54,739
case

1389
01:05:55,949 --> 01:06:00,399
toreador what advantages advantages does

1390
01:05:58,900 --> 01:06:03,789
this version of printf have over the

1391
01:06:00,400 --> 01:06:06,789
standard library printf none it is not

1392
01:06:03,789 --> 01:06:09,340
meant to be an advantage it is simply

1393
01:06:06,789 --> 01:06:11,800
that our mandate for handmade hero as

1394
01:06:09,340 --> 01:06:13,680
you know you you know if you've watched

1395
01:06:11,800 --> 01:06:16,720
show for a while is to write everything

1396
01:06:13,679 --> 01:06:18,969
so we're trying to show for example how

1397
01:06:16,719 --> 01:06:20,949
printf works just like we wrote a

1398
01:06:18,969 --> 01:06:22,899
software rasterizer is there an

1399
01:06:20,949 --> 01:06:25,599
advantage to our software rasterizer

1400
01:06:22,900 --> 01:06:27,160
overusing opengl no opengl is in fact

1401
01:06:25,599 --> 01:06:29,319
better right because it leverages the

1402
01:06:27,159 --> 01:06:33,250
hardware and it can be faster than we

1403
01:06:29,320 --> 01:06:34,750
can be because it uses the GPU which we

1404
01:06:33,250 --> 01:06:38,110
don't have access to if we're just

1405
01:06:34,750 --> 01:06:40,690
writing in x86 code so we don't have

1406
01:06:38,110 --> 01:06:43,630
access to a bunch of the computer but

1407
01:06:40,690 --> 01:06:45,340
the point of a made hero is not that

1408
01:06:43,630 --> 01:06:46,720
we're only writing code when we can

1409
01:06:45,340 --> 01:06:48,220
write code that's better than some

1410
01:06:46,719 --> 01:06:49,599
existing code that's not the point at

1411
01:06:48,219 --> 01:06:51,129
all the point of handmade hero is to

1412
01:06:49,599 --> 01:06:54,009
show how all of the code is written and

1413
01:06:51,130 --> 01:06:55,539
so our goal by the end of the project is

1414
01:06:54,010 --> 01:06:57,910
to have literally no libraries at all

1415
01:06:55,539 --> 01:06:59,739
we've never used like we've never

1416
01:06:57,909 --> 01:07:01,449
actually gone and used a library

1417
01:06:59,739 --> 01:07:03,669
explicitly we've always written

1418
01:07:01,449 --> 01:07:06,519
everything ourselves but just the fact

1419
01:07:03,670 --> 01:07:08,829
that we started up compiling in see on a

1420
01:07:06,519 --> 01:07:11,849
C compiler meant we had the C runtime

1421
01:07:08,829 --> 01:07:13,539
library being linked to us and

1422
01:07:11,849 --> 01:07:15,400
eventually we'd like to get rid of that

1423
01:07:13,539 --> 01:07:17,139
because we can't actually go do some

1424
01:07:15,400 --> 01:07:19,930
fiddling with the compiler switches and

1425
01:07:17,139 --> 01:07:24,219
some other things to actually tell it to

1426
01:07:19,929 --> 01:07:27,789
stop by you know default including that

1427
01:07:24,219 --> 01:07:29,199
library that we've had and so there's a

1428
01:07:27,789 --> 01:07:31,539
few things we need to do to make that

1429
01:07:29,199 --> 01:07:33,489
happen and printf was a big one because

1430
01:07:31,539 --> 01:07:35,440
we were using printf so the nice thing

1431
01:07:33,489 --> 01:07:37,899
now is we can get that off the list and

1432
01:07:35,440 --> 01:07:41,050
say okay now we're not using any library

1433
01:07:37,900 --> 01:07:42,340
code and so we're getting close to not

1434
01:07:41,050 --> 01:07:44,830
really having any library code at all

1435
01:07:42,340 --> 01:07:45,940
any C runtime library code at all which

1436
01:07:44,829 --> 01:07:47,440
would be pretty great because then we

1437
01:07:45,940 --> 01:07:49,329
would be literally library free we've

1438
01:07:47,440 --> 01:07:51,579
always like I said we've never gone and

1439
01:07:49,329 --> 01:07:53,319
used the library explicitly but just the

1440
01:07:51,579 --> 01:07:54,880
fact that we started up in cement our

1441
01:07:53,320 --> 01:07:56,710
code was being linked with the C runtime

1442
01:07:54,880 --> 01:07:58,470
library and that's still a library and

1443
01:07:56,710 --> 01:08:01,860
I'd like to make sure that handmade hero

1444
01:07:58,469 --> 01:08:04,059
doesn't use any libraries when it ships

1445
01:08:01,860 --> 01:08:08,579
that was part of the idea behind the

1446
01:08:04,059 --> 01:08:08,579
behind the program

1447
01:08:11,469 --> 01:08:15,109
long boolean right now you are padding

1448
01:08:13,760 --> 01:08:16,759
with zero is the spec at least in one

1449
01:08:15,110 --> 01:08:20,150
example except as it faces actually we

1450
01:08:16,759 --> 01:08:24,588
pad with both it's it's edible so if you

1451
01:08:20,149 --> 01:08:26,599
put a zero in front of it it uses pad

1452
01:08:24,588 --> 01:08:28,519
with zeros and if you don't it uses

1453
01:08:26,600 --> 01:08:29,930
power spaces which is exactly what the

1454
01:08:28,520 --> 01:08:34,400
spec says to do in my is my

1455
01:08:29,930 --> 01:08:38,810
understanding elven when is the next

1456
01:08:34,399 --> 01:08:40,460
handmade con it is November 19th and you

1457
01:08:38,810 --> 01:08:43,630
can get tickets right now if you would

1458
01:08:40,460 --> 01:08:47,449
like you can just go to handmade Kong

1459
01:08:43,630 --> 01:08:49,250
org you missed the early bird special so

1460
01:08:47,449 --> 01:08:52,329
you have to pay full price unfortunately

1461
01:08:49,250 --> 01:08:54,979
I tweeted about it multiple times so you

1462
01:08:52,329 --> 01:08:57,229
don't say you weren't warned but you

1463
01:08:54,979 --> 01:09:00,108
have to go to handmade con dot org you

1464
01:08:57,229 --> 01:09:04,309
can buy tickets to handmade con 2016 if

1465
01:09:00,109 --> 01:09:06,920
that is going to be on your schedule I

1466
01:09:04,310 --> 01:09:09,350
am in fact going to be announcing some

1467
01:09:06,920 --> 01:09:11,060
things about that soon one thing I will

1468
01:09:09,350 --> 01:09:14,000
say is we're having a job fair this year

1469
01:09:11,060 --> 01:09:16,819
which will be pretty awesome it looks

1470
01:09:14,000 --> 01:09:18,859
like we're gonna be able to have members

1471
01:09:16,819 --> 01:09:23,060
of the Engine teams from almost every

1472
01:09:18,859 --> 01:09:26,240
major triple-a engine that currently

1473
01:09:23,060 --> 01:09:29,319
exists and maybe even some not you know

1474
01:09:26,239 --> 01:09:31,729
some smaller engine teams as well

1475
01:09:29,319 --> 01:09:33,380
available for we're gonna have her like

1476
01:09:31,729 --> 01:09:35,149
a reception where you know you can go up

1477
01:09:33,380 --> 01:09:38,529
and talk to them and learn about what

1478
01:09:35,149 --> 01:09:40,759
it's like to program on their teams and

1479
01:09:38,529 --> 01:09:43,339
maybe make some contacts if you you know

1480
01:09:40,759 --> 01:09:45,319
so who did send your resume to who to

1481
01:09:43,338 --> 01:09:47,960
you know hit up for a job when you think

1482
01:09:45,319 --> 01:09:49,339
you're ready so that's a pretty cool

1483
01:09:47,960 --> 01:09:50,720
thing that's coming to handmade con this

1484
01:09:49,338 --> 01:09:53,899
year that's gonna be a big a big

1485
01:09:50,720 --> 01:09:57,020
addition that we didn't have Hamid Khan

1486
01:09:53,899 --> 01:09:58,639
2015 so that's gonna be pretty pretty

1487
01:09:57,020 --> 01:09:59,960
great I think I'm really I think that'd

1488
01:09:58,640 --> 01:10:02,320
be really great for a lot of people who

1489
01:09:59,960 --> 01:10:02,319
were wondering

1490
01:10:09,159 --> 01:10:14,750
music guru what else is left other than

1491
01:10:12,770 --> 01:10:16,550
printf that would need to remove there's

1492
01:10:14,750 --> 01:10:23,020
a cup it's just a couple math functions

1493
01:10:16,550 --> 01:10:23,020
I think like like cosine and cosine

1494
01:10:23,029 --> 01:10:27,469
there there actually is no processor

1495
01:10:25,189 --> 01:10:32,238
command for sine and cosine that there

1496
01:10:27,470 --> 01:10:33,260
was actually in the x87 so so originally

1497
01:10:32,238 --> 01:10:35,659
intel chips the floating-point

1498
01:10:33,260 --> 01:10:38,270
coprocessor did actually have a function

1499
01:10:35,659 --> 01:10:41,300
called F sin cos which actually did

1500
01:10:38,270 --> 01:10:43,580
compute a sine and cosine but those are

1501
01:10:41,300 --> 01:10:45,710
those no longer exists in the x64

1502
01:10:43,579 --> 01:10:51,019
architecture so if you want sine and

1503
01:10:45,710 --> 01:10:53,420
cosine or a tan to another common math

1504
01:10:51,020 --> 01:10:57,860
function we will need sine cosine a tan

1505
01:10:53,420 --> 01:10:59,779
- those are actually you have to

1506
01:10:57,859 --> 01:11:01,729
essentially write your own code that

1507
01:10:59,779 --> 01:11:04,039
computes them by using like series

1508
01:11:01,729 --> 01:11:07,099
expansion or you know you base it that

1509
01:11:04,039 --> 01:11:10,550
construct a numerical technique that

1510
01:11:07,100 --> 01:11:11,660
will solve the sine and cosine that you

1511
01:11:10,550 --> 01:11:13,970
want that will compute the sine cosine

1512
01:11:11,659 --> 01:11:16,010
that you want in in a few Cindy

1513
01:11:13,970 --> 01:11:19,640
instructions and so we have to write

1514
01:11:16,010 --> 01:11:21,590
those that's about it look we don't we

1515
01:11:19,640 --> 01:11:22,880
tried very hard to never really use

1516
01:11:21,590 --> 01:11:24,230
anything in the sea run teller so like I

1517
01:11:22,880 --> 01:11:26,869
said it's not like we have been leaning

1518
01:11:24,229 --> 01:11:29,209
on it as a crutch or anything printf was

1519
01:11:26,869 --> 01:11:31,099
definitely the biggest one in terms of

1520
01:11:29,210 --> 01:11:33,800
amount of code but there still are a

1521
01:11:31,100 --> 01:11:35,630
couple tiny ones such that if we were to

1522
01:11:33,800 --> 01:11:37,340
remove the standard library we would

1523
01:11:35,630 --> 01:11:40,489
definitely get a couple linking errors

1524
01:11:37,340 --> 01:11:46,610
against a tan and that sort of stuff now

1525
01:11:40,488 --> 01:11:48,559
in fact I I would suspect that since

1526
01:11:46,609 --> 01:11:51,619
this is our only pound include now that

1527
01:11:48,560 --> 01:11:54,770
I know of that includes something from

1528
01:11:51,619 --> 01:11:58,010
the C runtime library I think just doing

1529
01:11:54,770 --> 01:12:01,010
that compile you can see what we need so

1530
01:11:58,010 --> 01:12:04,070
squirt is trivial because that's in the

1531
01:12:01,010 --> 01:12:05,900
processor round is pretty trivial floor

1532
01:12:04,069 --> 01:12:09,159
and sealed pretty trivial F abs really

1533
01:12:05,899 --> 01:12:11,389
trivial so those wouldn't take too long

1534
01:12:09,159 --> 01:12:14,300
trivial is probably the wrong word first

1535
01:12:11,390 --> 01:12:18,230
floor and seal they're not trivial but

1536
01:12:14,300 --> 01:12:18,529
they're easy a sine cosine in a tan or a

1537
01:12:18,229 --> 01:12:21,019
little

1538
01:12:18,529 --> 01:12:22,099
more numerical in terms of you have to

1539
01:12:21,020 --> 01:12:26,030
understand a bunch of stuff to be able

1540
01:12:22,099 --> 01:12:27,260
to do them so and round F floor F and C

1541
01:12:26,029 --> 01:12:31,578
left actually if you're if you're

1542
01:12:27,260 --> 01:12:32,750
willing to require SSC for their

1543
01:12:31,578 --> 01:12:35,269
actually they are built into the

1544
01:12:32,750 --> 01:12:38,599
processor now they weren't built in the

1545
01:12:35,270 --> 01:12:40,820
processor before which is actually even

1546
01:12:38,599 --> 01:12:42,349
that's not true they actually have

1547
01:12:40,819 --> 01:12:44,269
always been built in the processor it's

1548
01:12:42,349 --> 01:12:46,219
just it was too hard to access them you

1549
01:12:44,270 --> 01:12:48,320
had to set the rounding mode first to

1550
01:12:46,219 --> 01:12:49,609
get to them and it's too expensive to

1551
01:12:48,319 --> 01:12:51,460
like set the rounding mode do the

1552
01:12:49,609 --> 01:12:55,969
operation of set the running mode back

1553
01:12:51,460 --> 01:12:58,069
what I mean to say is in SSC 4.1 or

1554
01:12:55,969 --> 01:13:01,309
something I don't remember what they

1555
01:12:58,069 --> 01:13:03,948
added a rounding function that allows

1556
01:13:01,309 --> 01:13:06,199
you to specify the rounding mode so that

1557
01:13:03,948 --> 01:13:08,269
you can floor or seal with one

1558
01:13:06,198 --> 01:13:10,399
instruction to say here's what I wanted

1559
01:13:08,270 --> 01:13:12,789
to do seal the value or floor the value

1560
01:13:10,399 --> 01:13:12,788
right

1561
01:13:32,729 --> 01:13:35,669
could you explain briefly why the simple

1562
01:13:34,470 --> 01:13:37,050
approach of printing floats can lead to

1563
01:13:35,670 --> 01:13:41,449
precision errors yes it's because

1564
01:13:37,050 --> 01:13:47,400
dividing by 10 is not a power of 2 right

1565
01:13:41,449 --> 01:13:49,409
so what happens is what you would want

1566
01:13:47,399 --> 01:13:50,789
to do is you know if we were printing

1567
01:13:49,409 --> 01:13:52,920
this out in binary it'd be really easy

1568
01:13:50,789 --> 01:13:54,630
you just shift 8 over 1 each time and

1569
01:13:52,920 --> 01:13:58,350
print out whatever the binary digit was

1570
01:13:54,630 --> 01:14:01,020
well you divide by 10 that doesn't shift

1571
01:13:58,350 --> 01:14:02,910
the number over by an even number of

1572
01:14:01,020 --> 01:14:05,340
binary digits so what happens is the

1573
01:14:02,909 --> 01:14:06,960
whole number changes and so when you do

1574
01:14:05,340 --> 01:14:08,909
that divide by 10 you're changing the

1575
01:14:06,960 --> 01:14:12,720
whole number and you're gonna lose bits

1576
01:14:08,909 --> 01:14:13,769
at the end when you do that right so if

1577
01:14:12,720 --> 01:14:14,610
you really want to print out a

1578
01:14:13,770 --> 01:14:16,800
floating-point number

1579
01:14:14,609 --> 01:14:18,359
precisely I don't think you can divide

1580
01:14:16,800 --> 01:14:20,579
but I don't think whatever issue an

1581
01:14:18,359 --> 01:14:22,380
actual divide by 10 so I think that's

1582
01:14:20,579 --> 01:14:23,640
why you need to go use one of the real

1583
01:14:22,380 --> 01:14:26,730
techniques like that one that I

1584
01:14:23,640 --> 01:14:28,770
referenced back before break and

1585
01:14:26,729 --> 01:14:30,119
actually read up on how to be more

1586
01:14:28,770 --> 01:14:31,830
intelligent about how you're printing it

1587
01:14:30,119 --> 01:14:32,789
out like I said I'm handmade here oh we

1588
01:14:31,829 --> 01:14:34,380
probably all need to care about that

1589
01:14:32,789 --> 01:14:36,269
it's not the sort of thing that we care

1590
01:14:34,380 --> 01:14:37,619
about here but it's definitely the case

1591
01:14:36,270 --> 01:14:38,820
that if you're trying to print out

1592
01:14:37,619 --> 01:14:42,109
floating-point numbers accurately this

1593
01:14:38,819 --> 01:14:45,299
is not good enough it's not good enough

1594
01:14:42,109 --> 01:14:47,960
and you need to have a more specific

1595
01:14:45,300 --> 01:14:47,960
approach

1596
01:14:52,260 --> 01:14:55,809
will everything be recorded at hand-made

1597
01:14:54,698 --> 01:14:58,868
Khan considering what nearly happened

1598
01:14:55,809 --> 01:15:01,090
last year I'm a little worried again

1599
01:14:58,868 --> 01:15:03,938
recording and streaming we make no

1600
01:15:01,090 --> 01:15:06,400
promises we try to record streaming we

1601
01:15:03,939 --> 01:15:07,719
probably just won't try I don't think

1602
01:15:06,399 --> 01:15:11,879
we'll try to get it streamed this year

1603
01:15:07,719 --> 01:15:14,618
but we will try to get it recorded as

1604
01:15:11,880 --> 01:15:16,029
best we can the only way to guarantee

1605
01:15:14,618 --> 01:15:17,920
that you get to see what happens at

1606
01:15:16,029 --> 01:15:19,389
handmade con obviously is to go to

1607
01:15:17,920 --> 01:15:20,199
handmade con I mean it's a conference

1608
01:15:19,389 --> 01:15:22,269
that's the point

1609
01:15:20,198 --> 01:15:24,219
but obviously we're trying as hard as we

1610
01:15:22,269 --> 01:15:26,860
can to record because I think that's

1611
01:15:24,219 --> 01:15:28,538
valuable for archival purposes so people

1612
01:15:26,859 --> 01:15:30,998
can go see what was said and have access

1613
01:15:28,538 --> 01:15:32,559
to it so we will be trying to record it

1614
01:15:30,998 --> 01:15:33,550
I probably won't bother trying to stream

1615
01:15:32,559 --> 01:15:38,110
it this year because it's just too much

1616
01:15:33,550 --> 01:15:39,610
of a hassle so we'll probably just try

1617
01:15:38,109 --> 01:15:42,038
to record but we will try very hard to

1618
01:15:39,609 --> 01:15:43,630
make sure we'd record it you know

1619
01:15:42,038 --> 01:15:46,469
correctly for multiple cameras so we

1620
01:15:43,630 --> 01:15:46,469
have some redundancy

1621
01:16:05,828 --> 01:16:16,319
that's here think we're done with

1622
01:16:13,420 --> 01:16:16,319
questions

1623
01:16:23,948 --> 01:16:31,589
I think we are done I'm gonna wrap it up

1624
01:16:32,488 --> 01:16:36,968
thank you everyone for joining me for

1625
01:16:35,019 --> 01:16:38,380
another episode of handmade hero it has

1626
01:16:36,969 --> 01:16:41,170
been a pleasure coding with you as

1627
01:16:38,380 --> 01:16:46,170
always I'm going to remove that

1628
01:16:41,170 --> 01:16:48,340
so what we're still compiling there okay

1629
01:16:46,170 --> 01:16:50,380
thanks for coming back after the break

1630
01:16:48,340 --> 01:16:53,170
it's been good seeing everyone again and

1631
01:16:50,380 --> 01:16:54,969
coding with you if you would like to

1632
01:16:53,170 --> 01:16:56,859
follow along at home as always the

1633
01:16:54,969 --> 01:16:58,479
source code you can pre-order the game

1634
01:16:56,859 --> 01:17:00,219
on handmade hero or it comes with a

1635
01:16:58,479 --> 01:17:03,639
source code I updated every night so you

1636
01:17:00,219 --> 01:17:04,809
can play around with the latest build we

1637
01:17:03,639 --> 01:17:05,800
also have a forum site you can go to if

1638
01:17:04,809 --> 01:17:07,360
you want to ask questions we have a

1639
01:17:05,800 --> 01:17:09,159
patreon page you can go to if you want

1640
01:17:07,359 --> 01:17:10,630
to support the video series we have a

1641
01:17:09,158 --> 01:17:12,129
schedule but that tells you when the

1642
01:17:10,630 --> 01:17:14,109
series will be live so if you want to

1643
01:17:12,130 --> 01:17:15,880
keep up with that that's a great way to

1644
01:17:14,109 --> 01:17:19,439
do it we have an episode guide

1645
01:17:15,880 --> 01:17:23,319
maintained by the fabulous midlow who

1646
01:17:19,439 --> 01:17:25,538
keeps like chronological sort of indexes

1647
01:17:23,319 --> 01:17:27,429
into the episodes that are super helpful

1648
01:17:25,538 --> 01:17:29,590
for catching up on past episodes so I

1649
01:17:27,429 --> 01:17:31,118
highly recommend checking that out and

1650
01:17:29,590 --> 01:17:32,519
also supporting his patreon he has a

1651
01:17:31,118 --> 01:17:36,130
patreon that's listed up there as well

1652
01:17:32,519 --> 01:17:38,019
if you enjoy that service he is the one

1653
01:17:36,130 --> 01:17:40,779
who makes it happen

1654
01:17:38,019 --> 01:17:42,219
that's about it for handmade hero we'll

1655
01:17:40,779 --> 01:17:45,158
be back here tomorrow same time same

1656
01:17:42,219 --> 01:17:47,260
place 8 p.m. Pacific Daylight Time I

1657
01:17:45,158 --> 01:17:48,728
believe right now are we in PDT I don't

1658
01:17:47,260 --> 01:17:53,559
think we're in PST I think we're at PDT

1659
01:17:48,729 --> 01:17:57,249
I don't remember so come back and join

1660
01:17:53,559 --> 01:17:59,949
us for I guess we'll be done with the

1661
01:17:57,248 --> 01:18:01,478
printf for looking at some other

1662
01:17:59,948 --> 01:18:03,488
finishing stuff so we can move on to

1663
01:18:01,479 --> 01:18:05,769
Game Code because I think we're just

1664
01:18:03,488 --> 01:18:08,198
about wrapping up sort of our engine

1665
01:18:05,769 --> 01:18:10,269
stuff that's about it hope to see you

1666
01:18:08,198 --> 01:18:12,129
guys tomorrow until then have fun

1667
01:18:10,269 --> 01:18:15,479
programming and I will see you guys on

1668
01:18:12,130 --> 01:18:15,479
the Internet take it easy everyone

