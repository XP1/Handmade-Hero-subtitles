1
00:00:01,550 --> 00:00:05,309
hello everyone and welcome to hand made

2
00:00:03,990 --> 00:00:07,319
here oh sure we code a complete game

3
00:00:05,309 --> 00:00:09,269
live on stream before we start

4
00:00:07,318 --> 00:00:11,789
programming today I just wanted to

5
00:00:09,269 --> 00:00:13,859
update some software on this machine to

6
00:00:11,789 --> 00:00:17,160
handmade programs that we use actually

7
00:00:13,859 --> 00:00:20,429
Milton our drawing program and remedy

8
00:00:17,160 --> 00:00:23,460
our debugger both made in response to

9
00:00:20,429 --> 00:00:26,518
the series actually by programmers who

10
00:00:23,460 --> 00:00:29,278
did some really great work we use both

11
00:00:26,518 --> 00:00:31,018
of these on stream regularly so I'm

12
00:00:29,278 --> 00:00:35,130
gonna go ahead and update our existing

13
00:00:31,018 --> 00:00:37,920
copies with these copies the update to

14
00:00:35,130 --> 00:00:42,059
remedy is not something we actually need

15
00:00:37,920 --> 00:00:44,520
at the moment it's something that is you

16
00:00:42,058 --> 00:00:49,229
know I think it has like new some new

17
00:00:44,520 --> 00:00:51,750
features and some fixes I don't remember

18
00:00:49,229 --> 00:00:53,189
exactly what was in - 8 - I think it

19
00:00:51,750 --> 00:00:54,600
fixed some string printing stuff there

20
00:00:53,189 --> 00:00:57,149
was some there was some stuff that I

21
00:00:54,600 --> 00:01:00,329
actually very specifically needed at

22
00:00:57,149 --> 00:01:02,340
work I remember but I I just don't

23
00:01:00,329 --> 00:01:04,680
remember exactly what they were I but we

24
00:01:02,340 --> 00:01:07,680
were not having any issues on the stream

25
00:01:04,680 --> 00:01:09,330
with it so this is not an update to

26
00:01:07,680 --> 00:01:11,490
dress anything that we were doing it's

27
00:01:09,329 --> 00:01:13,340
just might as well get up-to-date so

28
00:01:11,489 --> 00:01:16,709
that we don't run into any problems

29
00:01:13,340 --> 00:01:18,478
Milton on the other hand is actually an

30
00:01:16,709 --> 00:01:20,519
update that was made in response to

31
00:01:18,478 --> 00:01:22,109
something I requested I said it would be

32
00:01:20,519 --> 00:01:25,170
great if we could if I could stop

33
00:01:22,109 --> 00:01:27,060
drawing lines on the screen myself for

34
00:01:25,170 --> 00:01:30,240
grids and just have a thing that drops

35
00:01:27,060 --> 00:01:32,460
down a grid I and that was actually made

36
00:01:30,239 --> 00:01:35,099
I don't actually know the person's name

37
00:01:32,459 --> 00:01:35,669
who made it I only know their Twitter

38
00:01:35,099 --> 00:01:39,899
handle

39
00:01:35,670 --> 00:01:43,079
excuse me but thanks here goes out to

40
00:01:39,900 --> 00:01:46,399
Amin sayig I guess I assume that's their

41
00:01:43,078 --> 00:01:53,129
actual name I don't really know but at

42
00:01:46,399 --> 00:01:56,099
amee and SI y e GH if you go check that

43
00:01:53,129 --> 00:01:59,250
out on Twitter that's the person who

44
00:01:56,099 --> 00:02:01,709
actually wrote in and patched Milton for

45
00:01:59,250 --> 00:02:03,989
us they made their own version that has

46
00:02:01,709 --> 00:02:06,118
the tool I asked for out stream which is

47
00:02:03,989 --> 00:02:08,038
a way to lay down like a regular grid

48
00:02:06,118 --> 00:02:11,400
because I do that a lot and of course

49
00:02:08,038 --> 00:02:13,019
drawing lines accurately is not my forte

50
00:02:11,400 --> 00:02:14,370
and you want like a bunch of equally

51
00:02:13,020 --> 00:02:16,170
spaced ones

52
00:02:14,370 --> 00:02:18,599
for doing things like here's a pixel

53
00:02:16,169 --> 00:02:21,179
array or whatever so that's pretty

54
00:02:18,598 --> 00:02:23,609
awesome and we're gonna try it out we'll

55
00:02:21,180 --> 00:02:25,920
just see how it works but basically in

56
00:02:23,610 --> 00:02:27,959
the Milton directory I guess that was in

57
00:02:25,919 --> 00:02:32,518
the root here I should probably move the

58
00:02:27,959 --> 00:02:36,420
Milton directory into the apps directory

59
00:02:32,519 --> 00:02:41,489
actually should start getting into that

60
00:02:36,419 --> 00:02:45,509
habit there we go so this was the old

61
00:02:41,489 --> 00:02:49,259
Milton and you know there is no such

62
00:02:45,509 --> 00:02:59,608
tool this is the new patched version of

63
00:02:49,259 --> 00:03:03,358
Milton we'll give it a shot here it is

64
00:02:59,609 --> 00:03:07,049
I guess this thing here is sort of a

65
00:03:03,359 --> 00:03:09,989
brush window that gives us the option of

66
00:03:07,049 --> 00:03:16,849
drawing a grid you can see the G key

67
00:03:09,989 --> 00:03:16,849
here so I guess if I do G I'm on grid

68
00:03:31,610 --> 00:03:37,040
so it looks like it's pretty easy to

69
00:03:33,989 --> 00:03:37,039
stamp down one of these

70
00:03:44,680 --> 00:03:49,269
it's like here's what we were working on

71
00:03:46,150 --> 00:03:52,090
so it looks like if I just set the brush

72
00:03:49,269 --> 00:03:55,530
size low and then I set some maybe a

73
00:03:52,090 --> 00:03:57,908
standard size here I don't know

74
00:03:55,530 --> 00:03:59,739
something like that then it would be

75
00:03:57,908 --> 00:04:02,078
pretty easy for us to slap down little

76
00:03:59,739 --> 00:04:03,878
pixel grids and so that just I think

77
00:04:02,079 --> 00:04:05,439
makes things a lot easier and it would

78
00:04:03,878 --> 00:04:06,489
make my diagrams a little more clear

79
00:04:05,438 --> 00:04:09,370
because you know they're usually pretty

80
00:04:06,489 --> 00:04:12,878
messy and so if we just have a way to do

81
00:04:09,370 --> 00:04:15,219
that so if I'm drawing let me just test

82
00:04:12,878 --> 00:04:19,629
it here if I'm drawing here and then I

83
00:04:15,219 --> 00:04:21,759
just hit G and then B that seems nice

84
00:04:19,629 --> 00:04:25,779
right because then I can just slap one

85
00:04:21,759 --> 00:04:28,538
down so thank you very much I mean for

86
00:04:25,779 --> 00:04:39,159
that and I think that's probably all we

87
00:04:28,538 --> 00:04:44,110
need if that makes sense I guess one

88
00:04:39,160 --> 00:04:45,580
nice feature that maybe we should go in

89
00:04:44,110 --> 00:04:51,879
and add since everyone else did all the

90
00:04:45,579 --> 00:04:54,609
work here if we switch to grid the

91
00:04:51,879 --> 00:04:58,418
opacity I assume is the same as it was

92
00:04:54,610 --> 00:05:02,110
on the brush so if you go to 50% and

93
00:04:58,418 --> 00:05:04,149
then you switch oh no it's not Wow

94
00:05:02,110 --> 00:05:09,158
that's great well I was gonna say is we

95
00:05:04,149 --> 00:05:11,799
could leave the opacity of the grid sort

96
00:05:09,158 --> 00:05:14,050
of locked down at something less so that

97
00:05:11,800 --> 00:05:16,509
when we stamp it down and then we switch

98
00:05:14,050 --> 00:05:18,069
back to brush it's like a dim grid

99
00:05:16,509 --> 00:05:21,089
because usually we don't want the grid

100
00:05:18,069 --> 00:05:23,379
to be too bright probably that's great

101
00:05:21,089 --> 00:05:26,948
so let's say we set it down to something

102
00:05:23,379 --> 00:05:28,870
like that and then I just go like this

103
00:05:26,949 --> 00:05:32,169
and then we've got a nice little dim

104
00:05:28,870 --> 00:05:32,680
pixel grid then we come up here that's

105
00:05:32,168 --> 00:05:36,098
great

106
00:05:32,680 --> 00:05:37,750
I don't know what Lyons does all right

107
00:05:36,098 --> 00:05:40,120
so it looks like we should probably take

108
00:05:37,750 --> 00:05:41,649
advantage of this as well I don't know

109
00:05:40,120 --> 00:05:43,990
if this was added or if this has always

110
00:05:41,649 --> 00:05:46,750
been in Milton but I should probably get

111
00:05:43,990 --> 00:05:48,930
used to doing L as well just looking at

112
00:05:46,750 --> 00:05:48,930
that

113
00:05:51,860 --> 00:05:59,270
yeah all right so we've got some nice

114
00:05:56,220 --> 00:06:07,020
new tools B G and L I'll remember those

115
00:05:59,269 --> 00:06:09,089
that's that's B that's G that's L let me

116
00:06:07,019 --> 00:06:14,370
try it with the let me try it with the

117
00:06:09,089 --> 00:06:23,669
actual pad just to make sure that that

118
00:06:14,370 --> 00:06:29,600
nothing has broken there it looks a

119
00:06:23,670 --> 00:06:29,600
little different like there's

120
00:06:34,949 --> 00:06:45,300
it's definitely maggots okay now it

121
00:06:42,478 --> 00:06:47,158
definitely looks a little weird I wonder

122
00:06:45,300 --> 00:06:54,900
if this is just a version of Milton

123
00:06:47,158 --> 00:06:58,379
issue 1 6 2 G 1 I like it's definitely

124
00:06:54,899 --> 00:07:00,948
like not doing it's not as smooth as the

125
00:06:58,379 --> 00:07:00,949
other one was

126
00:07:09,968 --> 00:07:13,968
yeah it's it's not like and there's a

127
00:07:12,589 --> 00:07:18,498
lot of little like laggy there

128
00:07:13,968 --> 00:07:22,218
something's wrong with this do you guys

129
00:07:18,499 --> 00:07:24,349
know what's up with that so I would I

130
00:07:22,218 --> 00:07:26,658
would be interested to know what's going

131
00:07:24,348 --> 00:07:27,378
on there because we the previous version

132
00:07:26,658 --> 00:07:29,300
was fine

133
00:07:27,379 --> 00:07:32,569
this one looks looks kind of a little

134
00:07:29,300 --> 00:07:35,509
bit busted we could up to it we could

135
00:07:32,569 --> 00:07:41,080
update the pen drivers as well I don't

136
00:07:35,509 --> 00:07:44,389
want to do that on stream but maybe

137
00:07:41,079 --> 00:07:45,948
maybe let's let's try to try to do that

138
00:07:44,389 --> 00:07:47,750
a link here's what we'll do

139
00:07:45,949 --> 00:07:53,139
because I'd like to start programming

140
00:07:47,750 --> 00:07:53,139
it's been too long trying to update this

141
00:08:00,939 --> 00:08:08,028
so we'll we'll take a look and see leave

142
00:08:06,259 --> 00:08:11,150
that up and then hopefully we'll just

143
00:08:08,028 --> 00:08:12,528
we'll see that when we go to shutdown or

144
00:08:11,149 --> 00:08:13,638
something you know I'll update them

145
00:08:12,528 --> 00:08:20,769
after the stream is over

146
00:08:13,639 --> 00:08:26,360
seems like it you know fair idea ok

147
00:08:20,769 --> 00:08:29,568
let's do this so where we left off we

148
00:08:26,360 --> 00:08:31,098
kind of made a pretty cool utility which

149
00:08:29,569 --> 00:08:34,129
is this is where we stopped last time we

150
00:08:31,098 --> 00:08:36,679
were programming we made a cool utility

151
00:08:34,129 --> 00:08:38,328
that generates sampling spheres and I

152
00:08:36,679 --> 00:08:41,569
want to say it was pretty looking pretty

153
00:08:38,328 --> 00:08:44,028
sweet actually when we stopped last time

154
00:08:41,570 --> 00:08:45,800
and basically it just writes them into

155
00:08:44,028 --> 00:08:52,129
our executable so it you know writes

156
00:08:45,799 --> 00:08:54,979
them into our like it puts them as like

157
00:08:52,129 --> 00:08:56,929
a array into our directly into our code

158
00:08:54,980 --> 00:08:58,879
so it compiles into our executable and

159
00:08:56,929 --> 00:09:01,039
you can see it's a very nice like

160
00:08:58,879 --> 00:09:02,958
sampling sphere the colors on the

161
00:09:01,039 --> 00:09:06,349
sampling sphere are the different frames

162
00:09:02,958 --> 00:09:08,028
on which the samples will be taken and

163
00:09:06,350 --> 00:09:10,579
you can see the sphere is really nicely

164
00:09:08,028 --> 00:09:12,289
covered there I think and the colors are

165
00:09:10,578 --> 00:09:14,328
pretty well distributed right you don't

166
00:09:12,289 --> 00:09:16,429
see any patterns really to the colors

167
00:09:14,328 --> 00:09:18,649
either they're very nice and well

168
00:09:16,429 --> 00:09:21,039
distributed so I think we've done a good

169
00:09:18,649 --> 00:09:23,589
job doing what we wanted to do

170
00:09:21,039 --> 00:09:27,548
which is to make sure that we had a nice

171
00:09:23,589 --> 00:09:30,519
set of samples to use and that's exactly

172
00:09:27,548 --> 00:09:34,028
what we've got here so I think we are

173
00:09:30,519 --> 00:09:36,629
now ready to proceed to the final stage

174
00:09:34,028 --> 00:09:40,088
of the lighting process before

175
00:09:36,629 --> 00:09:41,949
optimization which is getting all of the

176
00:09:40,089 --> 00:09:45,029
pipeline stuff working properly so that

177
00:09:41,948 --> 00:09:47,409
we're actually sampling the lighting at

178
00:09:45,028 --> 00:09:49,749
instead of previously we were sampling

179
00:09:47,409 --> 00:09:53,798
them on all services we just sampled

180
00:09:49,749 --> 00:09:55,600
them at probe locations now and the

181
00:09:53,798 --> 00:09:57,278
biggest problem that I have with the way

182
00:09:55,600 --> 00:09:59,709
that we're doing things now you know

183
00:09:57,278 --> 00:10:01,149
we're also gonna try and think of if

184
00:09:59,708 --> 00:10:03,638
there's anything we can do to address

185
00:10:01,149 --> 00:10:06,369
sort of the the one thing that feels is

186
00:10:03,639 --> 00:10:07,600
still a little bit Squinkie to me which

187
00:10:06,369 --> 00:10:09,639
is that if you look at how we're doing

188
00:10:07,600 --> 00:10:14,949
the lighting at the moment and you go in

189
00:10:09,639 --> 00:10:17,619
here to look at how actually pulled them

190
00:10:14,948 --> 00:10:18,909
out on Mikey caps off if you look in

191
00:10:17,619 --> 00:10:20,350
here at how we're doing the lighting

192
00:10:18,909 --> 00:10:24,278
currently one of the things that you'll

193
00:10:20,350 --> 00:10:26,168
notice is that the lighting itself is

194
00:10:24,278 --> 00:10:28,019
very efficient to compute now I think

195
00:10:26,168 --> 00:10:33,369
the way that we're doing it because we

196
00:10:28,019 --> 00:10:37,119
we know we will know directly which

197
00:10:33,369 --> 00:10:38,860
light sort of where the light that we

198
00:10:37,119 --> 00:10:40,480
hit is supposed to be written back

199
00:10:38,860 --> 00:10:43,629
because when we look at our sampling

200
00:10:40,480 --> 00:10:45,789
sphere we'll know it was going in this

201
00:10:43,629 --> 00:10:51,879
direction so it should be added to this

202
00:10:45,789 --> 00:10:56,078
set of this should be set added to this

203
00:10:51,879 --> 00:10:59,110
set of light probe information but what

204
00:10:56,078 --> 00:11:00,698
kind of is what's kind of nasty is when

205
00:10:59,110 --> 00:11:04,839
you have the light probe set up the way

206
00:11:00,698 --> 00:11:09,508
we do where you've got six directions of

207
00:11:04,839 --> 00:11:09,509
a cube it's really not particularly good

208
00:11:10,139 --> 00:11:16,119
because six directions of a cube is

209
00:11:13,470 --> 00:11:23,019
exactly a multiple of nothing zoondy

210
00:11:16,119 --> 00:11:25,329
wise right it just doesn't it just

211
00:11:23,019 --> 00:11:27,759
doesn't make for a particularly clean

212
00:11:25,328 --> 00:11:29,918
way of doing things and obviously we

213
00:11:27,759 --> 00:11:33,129
have another problem which is that Cindy

214
00:11:29,918 --> 00:11:34,509
can't do memory accesses so we have to

215
00:11:33,129 --> 00:11:36,550
downshift there but that's all

216
00:11:34,509 --> 00:11:39,069
voidable so no matter what we do that's

217
00:11:36,549 --> 00:11:41,679
gonna happen so it's really just the

218
00:11:39,070 --> 00:11:44,260
fact that I don't love how weird the six

219
00:11:41,679 --> 00:11:46,209
what like the fact that our lighting

220
00:11:44,259 --> 00:11:54,600
samples are six directions they're the

221
00:11:46,210 --> 00:11:54,600
faces of the cube so here's a thought I

222
00:11:56,879 --> 00:12:02,649
just randomly had this thought sitting

223
00:11:59,649 --> 00:12:10,779
here and it may be a terrible idea I

224
00:12:02,649 --> 00:12:14,199
don't know but what if we instead just

225
00:12:10,779 --> 00:12:20,769
say there were eight directions so that

226
00:12:14,200 --> 00:12:22,030
instead of being six it's eight I know

227
00:12:20,769 --> 00:12:29,829
this sounds a little weird but I just

228
00:12:22,029 --> 00:12:30,819
thought of it randomly in my head so you

229
00:12:29,830 --> 00:12:34,120
know I should also make sure this is

230
00:12:30,820 --> 00:12:37,020
pinned to the taskbar oops I probably

231
00:12:34,120 --> 00:12:40,440
was already confessed but so here's this

232
00:12:37,019 --> 00:12:40,439
sort of weirdness

233
00:12:43,139 --> 00:12:51,569
so eight wide light probes this may

234
00:12:50,309 --> 00:12:52,769
already be a thing in the literature I

235
00:12:51,570 --> 00:12:55,440
don't know I haven't read up on it

236
00:12:52,769 --> 00:12:58,220
because I intentionally didn't want to

237
00:12:55,440 --> 00:13:02,280
so we could try a crack at it ourselves

238
00:12:58,220 --> 00:13:05,910
on the show but here's one thing I'm

239
00:13:02,279 --> 00:13:08,399
thinking i you know intuitively just

240
00:13:05,909 --> 00:13:10,139
when we were typing in the code I was

241
00:13:08,399 --> 00:13:12,929
like well if I'm going to probe light

242
00:13:10,139 --> 00:13:14,699
let's pretend I have a cube and we'll

243
00:13:12,929 --> 00:13:18,149
have each face of the cube

244
00:13:14,700 --> 00:13:20,670
you know Sam will record the light

245
00:13:18,149 --> 00:13:26,159
that's incoming on each of the faces of

246
00:13:20,669 --> 00:13:29,189
the cube well a cube has six faces so if

247
00:13:26,159 --> 00:13:33,209
you do that you are talking about six

248
00:13:29,190 --> 00:13:35,070
wide light sampling and so no matter

249
00:13:33,210 --> 00:13:39,060
what your situation is if the lights

250
00:13:35,070 --> 00:13:41,460
have colors or not you're talking about

251
00:13:39,059 --> 00:13:44,489
taking six and multiplying it by

252
00:13:41,460 --> 00:13:47,639
something and the only something that

253
00:13:44,490 --> 00:13:50,940
you could multiply it by in order to

254
00:13:47,639 --> 00:13:53,610
make it be aligned to four wide Cindy

255
00:13:50,940 --> 00:13:58,650
lanes right wow that's really gonna bug

256
00:13:53,610 --> 00:14:01,830
me those little loops there hopefully we

257
00:13:58,649 --> 00:14:05,220
can fix that those four wide Cindy lanes

258
00:14:01,830 --> 00:14:07,800
I the only way there's there's no real

259
00:14:05,220 --> 00:14:10,649
way to ensure that other than

260
00:14:07,799 --> 00:14:12,569
multiplying this by two right because if

261
00:14:10,649 --> 00:14:16,740
we wanted to make sure this number was

262
00:14:12,570 --> 00:14:19,080
divisible by four well 6 is 2 times 3 4

263
00:14:16,740 --> 00:14:22,440
is 2 times 2 they have one common factor

264
00:14:19,080 --> 00:14:24,389
which is 2 but this 3 here means that we

265
00:14:22,440 --> 00:14:29,700
would have to multiply this by 3 in

266
00:14:24,389 --> 00:14:31,230
order to make a common multiple right so

267
00:14:29,700 --> 00:14:34,590
basically what would happen here is we'd

268
00:14:31,230 --> 00:14:37,050
have to have 12 light samples in order

269
00:14:34,590 --> 00:14:38,759
to make sure it was divided by both

270
00:14:37,049 --> 00:14:40,740
lower 4 and I'm not even really sure

271
00:14:38,759 --> 00:14:43,200
what those 12 would be it would be 2

272
00:14:40,740 --> 00:14:45,389
samples per face or something right

273
00:14:43,200 --> 00:14:46,740
but you can see why this it doesn't

274
00:14:45,389 --> 00:14:50,399
really line up with Cindy lanes

275
00:14:46,740 --> 00:14:54,810
particularly well if I wanted it to you

276
00:14:50,399 --> 00:14:57,379
know it doesn't really and so I don't

277
00:14:54,809 --> 00:15:01,558
know that it necessarily matters

278
00:14:57,379 --> 00:15:03,089
much but I kind of think we do want it

279
00:15:01,558 --> 00:15:05,278
to line up with semi lanes and the

280
00:15:03,089 --> 00:15:08,550
reason is because if you think about how

281
00:15:05,278 --> 00:15:10,049
these light probes work I don't really

282
00:15:08,549 --> 00:15:12,568
know that you can quite do them in

283
00:15:10,049 --> 00:15:14,969
parallel very well because you're going

284
00:15:12,568 --> 00:15:16,438
to have to downshift to do your memory

285
00:15:14,970 --> 00:15:19,379
lookup and when you do your memory

286
00:15:16,438 --> 00:15:23,490
lookup you're doing a different cube for

287
00:15:19,379 --> 00:15:25,230
every ray that got intersected and maybe

288
00:15:23,490 --> 00:15:28,110
the answer is well then you just load

289
00:15:25,230 --> 00:15:32,188
from all four of those and do the ads

290
00:15:28,110 --> 00:15:35,159
for one at a time and you know thinking

291
00:15:32,188 --> 00:15:39,899
about that in my head that it seems

292
00:15:35,159 --> 00:15:41,749
plausible I guess but it would probably

293
00:15:39,899 --> 00:15:44,370
be nicer if we didn't have to do that

294
00:15:41,749 --> 00:15:46,170
because it makes the code a little bit

295
00:15:44,370 --> 00:15:48,870
uglier if all the operations have to be

296
00:15:46,169 --> 00:15:51,870
strided across for light probes all the

297
00:15:48,870 --> 00:15:54,179
time so what I was thinking is well

298
00:15:51,870 --> 00:15:56,730
another option is to observe the fact

299
00:15:54,179 --> 00:16:00,448
that although a cube does have six

300
00:15:56,730 --> 00:16:06,539
phases it also has 8 vertices and 8

301
00:16:00,448 --> 00:16:09,299
vertices that is actually aligned to

302
00:16:06,539 --> 00:16:17,490
four wide Cymbeline's it's to Cindy

303
00:16:09,299 --> 00:16:18,719
lanes exactly or one AVX Lane right so

304
00:16:17,490 --> 00:16:21,568
maybe that's a little more interesting

305
00:16:18,720 --> 00:16:24,480
and if you think about how that would be

306
00:16:21,568 --> 00:16:29,938
arranged we actually could more or less

307
00:16:24,480 --> 00:16:32,009
keep a pretty simple a pretty similar

308
00:16:29,938 --> 00:16:36,778
lighting scheme to what we have

309
00:16:32,009 --> 00:16:41,928
if you imagined lining up the cube a

310
00:16:36,778 --> 00:16:48,720
little differently so we just said okay

311
00:16:41,928 --> 00:16:54,028
here's how this is gonna go you know we

312
00:16:48,720 --> 00:16:57,499
have some kind of a diamond shape right

313
00:16:54,028 --> 00:16:57,499
and along the other axis

314
00:16:59,950 --> 00:17:10,970
we have another diamond shape right so

315
00:17:07,460 --> 00:17:15,350
here's the here's two tetrahedrons that

316
00:17:10,970 --> 00:17:18,860
form the faces of a cube right the ones

317
00:17:15,349 --> 00:17:23,179
that we have here so if we wanted to

318
00:17:18,859 --> 00:17:26,269
have the lighting still make some sense

319
00:17:23,180 --> 00:17:29,330
in this organization I'm just trying to

320
00:17:26,269 --> 00:17:33,410
think if there's any way to do it you

321
00:17:29,329 --> 00:17:35,539
know there's I was gonna say we could

322
00:17:33,410 --> 00:17:37,550
just tilt the cube and just kind of

323
00:17:35,539 --> 00:17:40,609
accept a little bit of off axis nough so

324
00:17:37,549 --> 00:17:42,289
suppose we have the cube so that one

325
00:17:40,609 --> 00:17:47,539
vertex is pointing up in one vertex is

326
00:17:42,289 --> 00:17:50,119
pointing down still then in that world

327
00:17:47,539 --> 00:17:54,769
so if you assume that that was this

328
00:17:50,119 --> 00:18:00,159
transversal here right then you just get

329
00:17:54,769 --> 00:18:06,049
a hexagon around the other side there so

330
00:18:00,160 --> 00:18:13,790
boy this is hard to imagine in in 3d

331
00:18:06,049 --> 00:18:22,759
without an actual tool can we rotate the

332
00:18:13,789 --> 00:18:25,430
3d cube yeah so just looking at a 3d

333
00:18:22,759 --> 00:18:28,640
cube here right if you imagine the poles

334
00:18:25,430 --> 00:18:31,400
being like that then what you can see is

335
00:18:28,640 --> 00:18:34,970
the lighting would kind of oscillate

336
00:18:31,400 --> 00:18:40,009
around like it would be up down up down

337
00:18:34,970 --> 00:18:42,140
up down like that and I mean I guess

338
00:18:40,009 --> 00:18:44,750
there's no real reason why we would even

339
00:18:42,140 --> 00:18:46,790
have to do that in theory we could make

340
00:18:44,750 --> 00:18:54,710
it a non cube so we could just make it

341
00:18:46,789 --> 00:18:55,759
be like to kind of cones right and you

342
00:18:54,710 --> 00:18:57,620
don't know that there'd be really any

343
00:18:55,759 --> 00:18:59,049
penalty for that so another option I

344
00:18:57,619 --> 00:19:02,679
guess would be to do it like this

345
00:18:59,049 --> 00:19:02,680
instead of a cube

346
00:19:04,279 --> 00:19:09,009
where we basically said like okay here's

347
00:19:09,099 --> 00:19:22,609
moles do on the x-axis here's some fixed

348
00:19:13,220 --> 00:19:24,769
points right and as we go around here we

349
00:19:22,609 --> 00:19:27,619
know that we actually want to have six

350
00:19:24,769 --> 00:19:29,629
points instead of four so normally as

351
00:19:27,619 --> 00:19:32,089
we'd have those four axes instead what

352
00:19:29,630 --> 00:19:37,280
we're going to do is divide it into six

353
00:19:32,089 --> 00:19:40,459
and so we would figure you know sixty

354
00:19:37,279 --> 00:19:43,539
degrees or so for each you know so

355
00:19:40,460 --> 00:19:43,539
something like this

356
00:19:49,538 --> 00:19:55,089
probably so would be more like there

357
00:20:01,140 --> 00:20:12,950
so like same thing thing something like

358
00:20:10,740 --> 00:20:12,950
this

359
00:20:18,660 --> 00:20:30,730
right so we just have like a hexagon and

360
00:20:23,730 --> 00:20:32,950
then up and down and you know I don't

361
00:20:30,730 --> 00:20:34,180
know that there's any real reason not to

362
00:20:32,950 --> 00:20:36,789
do it that way

363
00:20:34,180 --> 00:20:38,200
the only reason that that maybe doesn't

364
00:20:36,789 --> 00:20:40,359
make a whole lot of sense is it adds

365
00:20:38,200 --> 00:20:41,769
operations in the pixel shader right

366
00:20:40,359 --> 00:20:43,269
because you figure you got to actually

367
00:20:41,769 --> 00:20:46,000
sample the lighting from these things

368
00:20:43,269 --> 00:20:50,109
somehow right so you have to have some

369
00:20:46,000 --> 00:20:52,829
way of actually asking what is the

370
00:20:50,109 --> 00:20:56,679
lighting at a particular point and so

371
00:20:52,829 --> 00:20:59,189
you know you would prefer to have a way

372
00:20:56,680 --> 00:21:02,590
of sampling it

373
00:20:59,190 --> 00:21:05,860
that was as inexpensive as as possible

374
00:21:02,589 --> 00:21:12,609
and this perhaps isn't necessarily that

375
00:21:05,859 --> 00:21:13,929
thing right so I guess that's you know

376
00:21:12,609 --> 00:21:17,049
one reason not to do it

377
00:21:13,930 --> 00:21:18,310
I don't know I'm gonna leave that for

378
00:21:17,049 --> 00:21:19,930
now because I don't have a strong

379
00:21:18,309 --> 00:21:23,440
opinion about it it's just something to

380
00:21:19,930 --> 00:21:26,289
think about like because we control this

381
00:21:23,440 --> 00:21:28,570
on both ends of the pipeline we control

382
00:21:26,289 --> 00:21:31,529
the sampling of it at the head end and

383
00:21:28,569 --> 00:21:33,939
then we control I'm sorry we control the

384
00:21:31,529 --> 00:21:35,710
they're both sampling we control the

385
00:21:33,940 --> 00:21:39,130
light propagation and so how how we

386
00:21:35,710 --> 00:21:40,750
actually build these we control that and

387
00:21:39,130 --> 00:21:43,390
then we also control how they're sampled

388
00:21:40,750 --> 00:21:48,490
in the pixel shader and so there really

389
00:21:43,390 --> 00:21:51,400
isn't a lot of issue there to you know

390
00:21:48,490 --> 00:21:53,259
to us coming up with arbitrary shapes

391
00:21:51,400 --> 00:21:55,420
that whatever would be the most

392
00:21:53,259 --> 00:21:57,670
efficient probably the pixel shader is

393
00:21:55,420 --> 00:21:59,470
the most important one for efficiency so

394
00:21:57,670 --> 00:22:03,250
just making sure that that's easy to

395
00:21:59,470 --> 00:22:05,589
sample that seems like you know the

396
00:22:03,250 --> 00:22:09,579
right the right idea there but you know

397
00:22:05,589 --> 00:22:13,299
we'll see um so I guess here's what I

398
00:22:09,579 --> 00:22:16,240
want to do now moving on I just want to

399
00:22:13,299 --> 00:22:19,509
get that out there so I'd like to start

400
00:22:16,240 --> 00:22:21,579
sort of a bi-directional process here to

401
00:22:19,509 --> 00:22:25,390
try and converge on finishing up our

402
00:22:21,579 --> 00:22:27,939
lighting so now that we have we've got

403
00:22:25,390 --> 00:22:32,110
our sampling spheres we've got our light

404
00:22:27,940 --> 00:22:33,250
probe locations we have our ray casting

405
00:22:32,109 --> 00:22:35,709
and we need to bring these all together

406
00:22:33,250 --> 00:22:37,569
now to make a final lighting solution

407
00:22:35,710 --> 00:22:40,269
that we then optimize and and try to

408
00:22:37,569 --> 00:22:44,408
make into something we believe we could

409
00:22:40,269 --> 00:22:47,288
argue is shippable right so what we need

410
00:22:44,409 --> 00:22:49,299
to do there's a lot of things you have

411
00:22:47,288 --> 00:22:50,710
to do I'd like to start on both sides of

412
00:22:49,298 --> 00:22:52,808
the process and kind of ping-pong back

413
00:22:50,710 --> 00:22:55,600
and forth on the one side of the process

414
00:22:52,808 --> 00:22:57,398
we have our pixel shader and the pixel

415
00:22:55,599 --> 00:23:01,719
shader is sampling the actual lighting

416
00:22:57,398 --> 00:23:03,579
and we need that to be efficient and to

417
00:23:01,720 --> 00:23:05,288
be able to do its lookups and blends and

418
00:23:03,579 --> 00:23:08,019
all that stuff in a way that that's

419
00:23:05,288 --> 00:23:09,129
reasonable so we want to work on that

420
00:23:08,019 --> 00:23:11,319
and the other thing we want to work on

421
00:23:09,130 --> 00:23:13,450
is getting the actual lighting solution

422
00:23:11,319 --> 00:23:14,888
propagating light properly and that's

423
00:23:13,450 --> 00:23:16,750
the other side and that you know we've

424
00:23:14,888 --> 00:23:19,000
already done that but we're

425
00:23:16,750 --> 00:23:20,798
reconfiguring it and so we have to like

426
00:23:19,000 --> 00:23:22,028
debug the new parts that we put in there

427
00:23:20,798 --> 00:23:23,319
and make sure that they're they're

428
00:23:22,028 --> 00:23:24,940
operating properly and that we haven't

429
00:23:23,319 --> 00:23:27,189
broken the ray casting and all that sort

430
00:23:24,940 --> 00:23:29,019
of stuff so I'd like to ping-pong back

431
00:23:27,190 --> 00:23:31,600
and forth between these today tomorrow

432
00:23:29,019 --> 00:23:32,980
probably next weekend until we get

433
00:23:31,599 --> 00:23:35,138
everything kind of working coherently

434
00:23:32,980 --> 00:23:36,730
and then we can sort of start an

435
00:23:35,138 --> 00:23:39,668
optimization pass on it to try and get

436
00:23:36,730 --> 00:23:43,569
things working more cleanly now there

437
00:23:39,669 --> 00:23:47,950
are some issues we have if you look at

438
00:23:43,569 --> 00:23:51,428
an optimized build of the game which I

439
00:23:47,950 --> 00:23:54,269
can now turn on so if I just build an o2

440
00:23:51,429 --> 00:23:54,269
version here

441
00:23:58,029 --> 00:24:10,099
oops there we go so if I build an o2

442
00:24:07,309 --> 00:24:13,369
version here and look at the speed of

443
00:24:10,099 --> 00:24:15,679
the game when I open up the profiler so

444
00:24:13,369 --> 00:24:17,659
you know here's the game running as it

445
00:24:15,680 --> 00:24:20,570
normally would when I open up the

446
00:24:17,660 --> 00:24:27,620
profiler here and I look at our frame

447
00:24:20,569 --> 00:24:31,250
timing so obsessed the memory here is

448
00:24:27,619 --> 00:24:40,069
the timing cross frames and here is the

449
00:24:31,250 --> 00:24:42,619
frame rate right at the moment I don't

450
00:24:40,069 --> 00:24:47,659
see any real issues oops I don't know

451
00:24:42,619 --> 00:24:50,779
how to at the moment I don't see any

452
00:24:47,660 --> 00:24:52,580
real issues with stutter but I thought

453
00:24:50,779 --> 00:24:56,599
we were using too much memory on the GPU

454
00:24:52,579 --> 00:24:57,710
I still think we are not in terms of our

455
00:24:56,599 --> 00:25:00,019
sprites rather than that but just

456
00:24:57,710 --> 00:25:01,940
because we create too many frame buffers

457
00:25:00,019 --> 00:25:03,379
for the depth feeling and we just do

458
00:25:01,940 --> 00:25:06,920
stuff that isn't particularly conducive

459
00:25:03,380 --> 00:25:09,440
to fast rendering so if we look at this

460
00:25:06,920 --> 00:25:14,180
I was gonna say I think and it does look

461
00:25:09,440 --> 00:25:16,759
like occasionally we miss I think it

462
00:25:14,180 --> 00:25:19,900
does look like that to me I don't know

463
00:25:16,759 --> 00:25:19,900
maybe not it's hard to say exactly

464
00:25:32,130 --> 00:25:37,570
so yeah I mean I see there's definite

465
00:25:35,680 --> 00:25:41,920
stutter there like there's just definite

466
00:25:37,569 --> 00:25:43,960
stutter there and I assume if we took a

467
00:25:41,920 --> 00:25:46,600
look at what was going on I assume that

468
00:25:43,960 --> 00:25:48,640
the majority of the problem there is not

469
00:25:46,599 --> 00:25:51,159
that we're doing anything particularly

470
00:25:48,640 --> 00:25:54,160
difficult for the renderer on the GPU to

471
00:25:51,160 --> 00:25:59,050
handle I think it's more that what we

472
00:25:54,160 --> 00:26:05,160
are have not only being we got it we got

473
00:25:59,049 --> 00:26:05,159
an enter in an interloping puss-puss

474
00:26:05,250 --> 00:26:11,400
what are you doing Molly what's going on

475
00:26:09,029 --> 00:26:13,480
do you wanna look out the window

476
00:26:11,400 --> 00:26:15,130
let's see if we can distract her with

477
00:26:13,480 --> 00:26:17,170
the window because otherwise she's gonna

478
00:26:15,130 --> 00:26:21,250
start typing and that becomes an issue

479
00:26:17,170 --> 00:26:25,240
very quickly here you go you want to

480
00:26:21,250 --> 00:26:28,269
take a look out there yeah yeah watch

481
00:26:25,240 --> 00:26:30,640
take a look at this okay not that didn't

482
00:26:28,269 --> 00:26:34,539
work particularly well what do you want

483
00:26:30,640 --> 00:26:36,250
being one of the problems is that Molly

484
00:26:34,539 --> 00:26:37,930
doesn't really know how to program so

485
00:26:36,250 --> 00:26:40,390
when she types on the keyboard it

486
00:26:37,930 --> 00:26:42,400
doesn't really amount to much that we

487
00:26:40,390 --> 00:26:44,370
can use and I don't know that she really

488
00:26:42,400 --> 00:26:48,670
knows very much about lighting either

489
00:26:44,369 --> 00:26:51,369
what's going on kiddo I'm gonna see if I

490
00:26:48,670 --> 00:26:54,550
can get her to sit in the cat tree and

491
00:26:51,369 --> 00:26:55,989
give us some reprieve just just to

492
00:26:54,549 --> 00:26:57,909
finish that just to finish the lighting

493
00:26:55,990 --> 00:27:01,240
code just to finish the lighting code

494
00:26:57,910 --> 00:27:05,340
that's all here you go you wanna come up

495
00:27:01,240 --> 00:27:08,109
trying to come up in there there you go

496
00:27:05,339 --> 00:27:09,579
all right so let's hope that works look

497
00:27:08,109 --> 00:27:12,579
out here look at how much there's good

498
00:27:09,579 --> 00:27:15,789
stuff out there go find some birds I

499
00:27:12,579 --> 00:27:17,319
know you like birds all right what's I

500
00:27:15,789 --> 00:27:20,769
don't know this is this is dicey we'll

501
00:27:17,319 --> 00:27:22,539
see we can do so I I do feel like we

502
00:27:20,769 --> 00:27:23,859
kind of have another issue here which is

503
00:27:22,539 --> 00:27:26,049
that if we want to start working on that

504
00:27:23,859 --> 00:27:30,159
pixel shader I think we're just using

505
00:27:26,049 --> 00:27:32,409
too much GPU memory because of all the

506
00:27:30,160 --> 00:27:36,120
frame buffering and we had some things

507
00:27:32,410 --> 00:27:39,970
that you know want to get fixed there so

508
00:27:36,119 --> 00:27:42,099
like I said really really big spread of

509
00:27:39,970 --> 00:27:43,809
things to work on right now over the

510
00:27:42,099 --> 00:27:46,389
next few weekends so try and dial

511
00:27:43,809 --> 00:27:49,329
stuff in and I'd like to kind of start

512
00:27:46,390 --> 00:27:51,280
to get a better handle on them so one

513
00:27:49,329 --> 00:27:55,299
thing that I would suggest maybe we do

514
00:27:51,279 --> 00:27:58,329
today just to get started here is maybe

515
00:27:55,299 --> 00:28:02,919
we say pause on the actual lighting

516
00:27:58,329 --> 00:28:05,649
improvement for a few minutes let's go

517
00:28:02,920 --> 00:28:08,920
take an insight profile of what we're

518
00:28:05,650 --> 00:28:12,310
looking at on the screen here and let's

519
00:28:08,920 --> 00:28:14,670
see if we can't optimize our actual

520
00:28:12,309 --> 00:28:18,940
rendering to the point where we know

521
00:28:14,670 --> 00:28:20,560
that we're not over stressing the GPU

522
00:28:18,940 --> 00:28:24,640
because what I'm worried about is when

523
00:28:20,559 --> 00:28:26,220
we go to put in the sampling I'm worried

524
00:28:24,640 --> 00:28:28,600
that I'm gonna have all kinds of

525
00:28:26,220 --> 00:28:30,960
confusion about what's going on because

526
00:28:28,599 --> 00:28:33,459
we're not in a great place to begin with

527
00:28:30,960 --> 00:28:34,840
because I think we're using too much GPU

528
00:28:33,460 --> 00:28:37,480
memory on the frame buffer side of

529
00:28:34,839 --> 00:28:39,069
things that's what I that's that's my

530
00:28:37,480 --> 00:28:41,650
guess and again because it's because of

531
00:28:39,069 --> 00:28:44,319
that multi sampling that we turned on

532
00:28:41,650 --> 00:28:47,500
and so just to give you some perspective

533
00:28:44,319 --> 00:28:49,720
on what I mean by that is if we take a

534
00:28:47,500 --> 00:28:53,079
look at what's going on here remember we

535
00:28:49,720 --> 00:28:55,660
do four we have four depth peels because

536
00:28:53,079 --> 00:28:57,699
we use def peeling as a more advanced

537
00:28:55,660 --> 00:28:59,740
rendering technique to allow us to just

538
00:28:57,700 --> 00:29:01,150
splat sprites onto the screen in any

539
00:28:59,740 --> 00:29:04,359
order and still get really good

540
00:29:01,150 --> 00:29:08,980
anti-aliasing results around the edges

541
00:29:04,359 --> 00:29:10,839
right so we have four depth field

542
00:29:08,980 --> 00:29:13,809
buffers we know that those deaf people

543
00:29:10,839 --> 00:29:15,609
buffers are at least 1920 by 1080 when

544
00:29:13,809 --> 00:29:24,129
were when were rendering at full

545
00:29:15,609 --> 00:29:29,829
resolution and they need at least for at

546
00:29:24,130 --> 00:29:32,380
least four bytes per pixel but if we're

547
00:29:29,829 --> 00:29:34,389
honest about it we probably want if

548
00:29:32,380 --> 00:29:36,310
we're doing accumulation into those

549
00:29:34,390 --> 00:29:41,290
buffers we may want more like eight

550
00:29:36,309 --> 00:29:43,720
right for intermediate results like half

551
00:29:41,289 --> 00:29:46,839
with float or just sixteen bits per gun

552
00:29:43,720 --> 00:29:50,079
or something so it's a little worse than

553
00:29:46,839 --> 00:29:52,629
that potentially right and then we have

554
00:29:50,079 --> 00:29:54,549
multi sampling turned on so if we have

555
00:29:52,630 --> 00:29:57,640
like really high quality anti-aliasing

556
00:29:54,549 --> 00:30:02,619
or something and you look

557
00:29:57,640 --> 00:30:06,220
if we did 16 samples per pixel for multi

558
00:30:02,619 --> 00:30:09,069
sampling it's just nuts right the amount

559
00:30:06,220 --> 00:30:10,990
of memory that it's gonna take now we

560
00:30:09,069 --> 00:30:13,539
don't have to pay for those 16 samples

561
00:30:10,990 --> 00:30:16,210
in terms of computing because a lot of

562
00:30:13,539 --> 00:30:19,869
times there's only one thing covering

563
00:30:16,210 --> 00:30:22,690
the pixel so we're not necessarily going

564
00:30:19,869 --> 00:30:25,928
to be pixel shader bound on having to do

565
00:30:22,690 --> 00:30:28,630
this many pixel samples but we are

566
00:30:25,929 --> 00:30:31,059
storing them there's space reserved for

567
00:30:28,630 --> 00:30:34,240
them either way and so what you can see

568
00:30:31,058 --> 00:30:38,769
is we can very easily get up to an

569
00:30:34,240 --> 00:30:42,009
extraordinarily large sort of reserve

570
00:30:38,769 --> 00:30:46,509
sighs that's a gigabyte of GPU memory

571
00:30:42,009 --> 00:30:50,890
right and that's just too much you know

572
00:30:46,509 --> 00:30:52,660
it's that's not gonna work and again the

573
00:30:50,890 --> 00:30:54,730
reason that's not going to work is it's

574
00:30:52,660 --> 00:30:57,130
not just because we don't want to

575
00:30:54,730 --> 00:30:58,990
require a GPU with 4 gigabytes of memory

576
00:30:57,130 --> 00:31:01,990
or something not that that isn't very

577
00:30:58,990 --> 00:31:04,240
common today but we just it's clear that

578
00:31:01,990 --> 00:31:06,700
our game really shouldn't need that but

579
00:31:04,240 --> 00:31:08,859
the other reason is not so much that

580
00:31:06,700 --> 00:31:11,259
it's that even if we did decide that

581
00:31:08,859 --> 00:31:12,729
like hey the heck with it you got to

582
00:31:11,259 --> 00:31:16,629
have a beefy machine to run handmade

583
00:31:12,730 --> 00:31:20,019
here oh my friend even if we decide to

584
00:31:16,630 --> 00:31:24,340
do that the bandwidth cost of working on

585
00:31:20,019 --> 00:31:28,539
that much memory is significant right so

586
00:31:24,339 --> 00:31:30,428
we're slowing down our max framerate by

587
00:31:28,539 --> 00:31:33,159
having so much memory have to move

588
00:31:30,429 --> 00:31:38,650
through the GPU so what I would like to

589
00:31:33,160 --> 00:31:40,960
do is just address that in a simple way

590
00:31:38,650 --> 00:31:44,080
we don't necessarily have to go nuts

591
00:31:40,960 --> 00:31:49,110
right but I'd like to see if there's a

592
00:31:44,079 --> 00:31:49,109
way to address that a little bit more

593
00:31:49,349 --> 00:31:54,399
constructively first now last time we

594
00:31:52,509 --> 00:31:56,440
did insight we did children amorta we're

595
00:31:54,400 --> 00:31:59,440
back to handmade here now so I want to

596
00:31:56,440 --> 00:32:03,610
load up the handmade Hiro frame here

597
00:31:59,440 --> 00:32:08,169
that's in our debug directory I think or

598
00:32:03,609 --> 00:32:09,879
not it's in NVIDIA directory all right

599
00:32:08,169 --> 00:32:11,380
I'm gonna cut that and put that in our

600
00:32:09,880 --> 00:32:16,410
debug directory I don't know

601
00:32:11,380 --> 00:32:19,650
we need to directories let's do this

602
00:32:16,410 --> 00:32:19,650
here we go

603
00:32:20,069 --> 00:32:34,569
okay seems fine I'll save it out that

604
00:32:27,460 --> 00:32:38,880
looks right and so I'm just gonna launch

605
00:32:34,569 --> 00:32:38,879
the frame profiler here and see okay

606
00:32:45,430 --> 00:32:56,350
I don't know what happened there it

607
00:32:51,849 --> 00:33:00,099
didn't look good so I don't know if

608
00:32:56,349 --> 00:33:01,329
that's post to happen on this version

609
00:33:00,099 --> 00:33:07,919
let's see if we can watch the frame

610
00:33:01,329 --> 00:33:23,519
debugger so I guess we can't run it

611
00:33:07,920 --> 00:33:23,519
anymore so I wonder if there's something

612
00:33:23,970 --> 00:33:28,450
something bad happening here last time

613
00:33:26,950 --> 00:33:32,019
we had a problem like this Nvidia

614
00:33:28,450 --> 00:33:35,559
actually fixed it for us maybe we can

615
00:33:32,019 --> 00:33:39,369
get them to fix it again but I'm not

616
00:33:35,559 --> 00:33:41,500
sure what's broken there did I need to

617
00:33:39,369 --> 00:33:43,959
assert something busted about our

618
00:33:41,500 --> 00:33:48,759
project file maybe I need to close the

619
00:33:43,960 --> 00:33:53,579
project file and make a new one I don't

620
00:33:48,759 --> 00:33:53,579
know let's try it new project

621
00:33:59,210 --> 00:34:04,669
I'm gonna say I'm gonna use the complete

622
00:34:02,278 --> 00:34:07,589
path here rather than the subsidized

623
00:34:04,669 --> 00:34:10,980
because Nvidia substant Drive may be the

624
00:34:07,589 --> 00:34:12,949
subsidized don't work I don't know it's

625
00:34:10,980 --> 00:34:15,628
hard to say so I'm gonna go in and

626
00:34:12,949 --> 00:34:21,088
sometimes substituted drives don't show

627
00:34:15,628 --> 00:34:24,569
up properly just because when you

628
00:34:21,088 --> 00:34:27,179
subsidize its per user so if the program

629
00:34:24,570 --> 00:34:29,220
switches into root or kernel mode or

630
00:34:27,179 --> 00:34:31,918
somewhere you won't see those subsidized

631
00:34:29,219 --> 00:34:33,329
so if we use the W Drive here you can

632
00:34:31,918 --> 00:34:34,949
create problems with some utilities that

633
00:34:33,329 --> 00:34:37,139
need to run with administrator access

634
00:34:34,949 --> 00:34:41,098
and stuff like that so I'm just gonna

635
00:34:37,139 --> 00:34:44,490
double check I'm gonna go ahead and and

636
00:34:41,099 --> 00:34:46,950
make the entire path work that way just

637
00:34:44,489 --> 00:34:48,809
temporarily it's not my preference but I

638
00:34:46,949 --> 00:34:51,628
just want to give it the maximum chance

639
00:34:48,809 --> 00:34:55,289
of working and so that's the only thing

640
00:34:51,628 --> 00:34:57,750
I could think of that I can do to make

641
00:34:55,289 --> 00:35:03,659
sure that that's not an issue so I'm

642
00:34:57,750 --> 00:35:05,309
just doing the path to our stuff like we

643
00:35:03,659 --> 00:35:06,598
would normally do W handmaids we're just

644
00:35:05,309 --> 00:35:08,639
doing C work handmade because that's

645
00:35:06,599 --> 00:35:10,650
where the substance drive is just making

646
00:35:08,639 --> 00:35:14,098
sure that that all makes sense right so

647
00:35:10,650 --> 00:35:18,660
that would be these two and I'm gonna go

648
00:35:14,099 --> 00:35:23,210
ahead and save that like so and just

649
00:35:18,659 --> 00:35:28,009
give it one more shot not hopeful but

650
00:35:23,210 --> 00:35:32,369
yeah so I have no idea what we're doing

651
00:35:28,010 --> 00:35:34,950
that's causing this problem so I guess

652
00:35:32,369 --> 00:35:39,140
that I won't do that today that's what I

653
00:35:34,949 --> 00:35:44,219
was gonna do but apparently apparently

654
00:35:39,139 --> 00:35:46,409
insight has other ideas I don't know

655
00:35:44,219 --> 00:35:49,608
what we would be doing that's so crazy a

656
00:35:46,409 --> 00:35:54,059
lot of people have said we should retry

657
00:35:49,608 --> 00:35:55,739
using render doc maybe today's the day

658
00:35:54,059 --> 00:35:59,099
we do that because I would really like

659
00:35:55,739 --> 00:36:00,629
to be able to take a look at the GP

660
00:35:59,099 --> 00:36:03,330
rendering here and obviously we can do

661
00:36:00,630 --> 00:36:06,588
it from the other side without that but

662
00:36:03,329 --> 00:36:06,588
I don't really want to

663
00:36:12,219 --> 00:36:15,219
yeah

664
00:36:16,780 --> 00:36:23,410
so I don't know I'm gonna delete these

665
00:36:19,090 --> 00:36:28,660
because they don't work so I don't know

666
00:36:23,409 --> 00:36:31,839
Nvidia you tell me what's going on there

667
00:36:28,659 --> 00:36:33,549
I have no idea if if you need something

668
00:36:31,840 --> 00:36:35,710
else from me please let me know I would

669
00:36:33,550 --> 00:36:37,990
like to get that working if possible

670
00:36:35,710 --> 00:36:43,150
let's take a look at render doc and see

671
00:36:37,989 --> 00:36:44,769
if it works any better we last time we

672
00:36:43,150 --> 00:36:46,690
tried this it didn't work at all for us

673
00:36:44,769 --> 00:36:49,380
it was the opposite we were able to get

674
00:36:46,690 --> 00:36:53,409
insight to work render doc didn't work

675
00:36:49,380 --> 00:36:56,410
so we'll just take a look and see if

676
00:36:53,409 --> 00:37:00,009
it's something we can do this time and

677
00:36:56,409 --> 00:37:02,710
maybe it will succeed again render doc

678
00:37:00,010 --> 00:37:05,170
is the same as n cite basically it's the

679
00:37:02,710 --> 00:37:08,380
same basic idea it's just a like an

680
00:37:05,170 --> 00:37:11,789
open-source version that in theory works

681
00:37:08,380 --> 00:37:14,950
on other platforms so on nvidia on

682
00:37:11,789 --> 00:37:17,110
insight you can only use it on an nvidia

683
00:37:14,949 --> 00:37:21,819
part as far as i know like i don't think

684
00:37:17,110 --> 00:37:23,559
it works on anything else so let's try

685
00:37:21,820 --> 00:37:28,180
render doc and see if we get anything

686
00:37:23,559 --> 00:37:29,500
better but again the principles are

687
00:37:28,179 --> 00:37:32,889
exactly the same so it's not

688
00:37:29,500 --> 00:37:34,900
particularly difficult to adapt from one

689
00:37:32,889 --> 00:37:38,789
to the other so i'm going to go ahead

690
00:37:34,900 --> 00:37:38,789
and and put it over here

691
00:37:47,239 --> 00:37:50,690
it's installing

692
00:37:59,510 --> 00:38:02,510
okay

693
00:38:05,969 --> 00:38:18,399
here it is I'm not sure what it wants

694
00:38:11,440 --> 00:38:20,409
it's just take a look at the shortcut

695
00:38:18,400 --> 00:38:27,639
here not sure what it wants its actual

696
00:38:20,409 --> 00:38:29,289
program to be target render doc so is

697
00:38:27,639 --> 00:38:34,029
this actually not running directly

698
00:38:29,289 --> 00:38:36,039
interesting alright so let's take a look

699
00:38:34,030 --> 00:38:39,040
if I run render doc I'm running it for

700
00:38:36,039 --> 00:38:41,980
the Start menu here here's what it what

701
00:38:39,039 --> 00:38:43,119
it gathers I'm fine with this on the

702
00:38:41,980 --> 00:38:47,820
Hameed here much even if it wants to

703
00:38:43,119 --> 00:38:47,819
gather statistics that's fine with me

704
00:38:48,360 --> 00:38:54,910
render doc v1 for I don't have any idea

705
00:38:53,170 --> 00:38:56,800
how to use the interface but you know it

706
00:38:54,909 --> 00:38:59,049
looks pretty straightforward and similar

707
00:38:56,800 --> 00:39:02,019
to any debugging utility you would you

708
00:38:59,050 --> 00:39:05,470
know see the basic executable working

709
00:39:02,019 --> 00:39:10,360
path command-line argument stuff it

710
00:39:05,469 --> 00:39:13,509
doesn't look like I'm just looking at it

711
00:39:10,360 --> 00:39:16,690
here it doesn't look like there's like a

712
00:39:13,510 --> 00:39:18,130
real file menu here for saving and

713
00:39:16,690 --> 00:39:21,130
loading projects it looks like maybe

714
00:39:18,130 --> 00:39:24,700
this is more where that happens just

715
00:39:21,130 --> 00:39:26,920
guessing based on the UI layout so I'm

716
00:39:24,699 --> 00:39:29,529
gonna go ahead and try here first we'll

717
00:39:26,920 --> 00:39:31,960
try actually using our our paths and if

718
00:39:29,530 --> 00:39:35,260
those don't work we'll try it another

719
00:39:31,960 --> 00:39:39,070
way so if I go in here and oops look at

720
00:39:35,260 --> 00:39:43,000
the build directory and have it build

721
00:39:39,070 --> 00:39:49,420
win32 a run win32 handmade there and

722
00:39:43,000 --> 00:39:53,679
then here we do handmade data that is

723
00:39:49,420 --> 00:39:56,380
all we really need these don't really

724
00:39:53,679 --> 00:39:57,669
matter as far as I can tell there's

725
00:39:56,380 --> 00:39:59,559
nothing there we don't need child

726
00:39:57,670 --> 00:40:04,389
processes we don't watch any or anything

727
00:39:59,559 --> 00:40:08,110
like that I don't I don't see anything

728
00:40:04,389 --> 00:40:10,179
weird going on there so I'm gonna go

729
00:40:08,110 --> 00:40:12,970
ahead and do save settings I'm going to

730
00:40:10,179 --> 00:40:14,919
do the same thing that I just said I was

731
00:40:12,969 --> 00:40:17,919
going to do which is put it in the debug

732
00:40:14,920 --> 00:40:19,090
directory like for Nvidia and I'm going

733
00:40:17,920 --> 00:40:24,460
to save the settings

734
00:40:19,090 --> 00:40:25,090
as handmade Brender doc and hoped for

735
00:40:24,460 --> 00:40:28,059
the best

736
00:40:25,090 --> 00:40:30,700
so in launch applications I'm just gonna

737
00:40:28,059 --> 00:40:37,509
hit launch now and we'll see what

738
00:40:30,699 --> 00:40:55,839
happens so basically everybody crashes

739
00:40:37,510 --> 00:40:57,940
but I don't actually know why uh so I

740
00:40:55,840 --> 00:41:00,010
guess like you know normally I'd say

741
00:40:57,940 --> 00:41:04,000
well if we crash on both are we the ones

742
00:41:00,010 --> 00:41:08,550
crashing but as far as I can tell what

743
00:41:04,000 --> 00:41:08,550
they're saying is they crashed not us

744
00:41:08,730 --> 00:41:12,070
because presumably they know the

745
00:41:10,840 --> 00:41:13,870
difference I mean it would be fairly

746
00:41:12,070 --> 00:41:17,080
obvious if you launch a child process

747
00:41:13,869 --> 00:41:22,750
whether it crashed are you crashed so

748
00:41:17,079 --> 00:41:27,039
we're doing something I guess that's

749
00:41:22,750 --> 00:41:38,460
creating this issue I don't know what

750
00:41:27,039 --> 00:41:40,659
the issue is so there you have it folks

751
00:41:38,460 --> 00:41:44,679
that's kind of what modern programming

752
00:41:40,659 --> 00:41:46,299
is like nothing ever works even though

753
00:41:44,679 --> 00:41:51,929
we're not doing anything

754
00:41:46,300 --> 00:41:51,930
I mean it's handmade here oh it's a

755
00:41:56,639 --> 00:41:59,639
oops

756
00:42:12,978 --> 00:42:22,858
it's 32 thousand lines of code right but

757
00:42:20,099 --> 00:42:25,459
you know you try to just run a thing

758
00:42:22,858 --> 00:42:27,509
that just inspects the GPU usage and

759
00:42:25,458 --> 00:42:30,778
that's impossible

760
00:42:27,509 --> 00:42:33,088
literally impossible for a simple 32,000

761
00:42:30,778 --> 00:42:36,719
line program this is not the Unreal

762
00:42:33,088 --> 00:42:43,469
Engine you know this is not Red Dead

763
00:42:36,719 --> 00:42:45,509
Redemption - this is just a little tiny

764
00:42:43,469 --> 00:42:49,489
baby little program and that apparently

765
00:42:45,509 --> 00:42:49,489
is totally out of the question

766
00:42:50,150 --> 00:42:56,910
and that's just how things go these days

767
00:42:53,778 --> 00:42:59,849
so that's pretty sad I guess we just

768
00:42:56,909 --> 00:43:02,068
can't do that so let's go back to

769
00:42:59,849 --> 00:43:04,579
handmade hero and I guess we'll just

770
00:43:02,068 --> 00:43:06,900
proceed blind because you know what

771
00:43:04,579 --> 00:43:09,079
that's how we used to do things anyway

772
00:43:06,900 --> 00:43:11,639
you didn't used to have debugging tools

773
00:43:09,079 --> 00:43:14,309
for GPUs at all when they were first

774
00:43:11,639 --> 00:43:15,509
introduced kind of like when CPUs were

775
00:43:14,309 --> 00:43:18,150
first introduced you didn't have

776
00:43:15,509 --> 00:43:22,858
debuggers probably at least not reliable

777
00:43:18,150 --> 00:43:25,680
ones so you know I guess that's where

778
00:43:22,858 --> 00:43:30,828
we're at so all right I can do this

779
00:43:25,679 --> 00:43:35,489
audit by hand and I guess we just will

780
00:43:30,829 --> 00:43:39,298
so let's go into our graphics subsystem

781
00:43:35,489 --> 00:43:42,358
here here's the OpenGL layer and I guess

782
00:43:39,298 --> 00:43:44,639
what I would say is let's try and add

783
00:43:42,358 --> 00:43:46,768
something that just sums up how much

784
00:43:44,639 --> 00:43:49,889
memory were actually using right because

785
00:43:46,768 --> 00:43:53,129
it's not that hard to imagine us keeping

786
00:43:49,889 --> 00:43:55,288
track of a ballpark statistic at least

787
00:43:53,130 --> 00:43:59,759
for frame buffers and textures or even

788
00:43:55,289 --> 00:44:01,799
just frame buffers right it wouldn't be

789
00:43:59,759 --> 00:44:03,630
that hard to actually determine what

790
00:44:01,798 --> 00:44:06,478
that is because if we look through the

791
00:44:03,630 --> 00:44:08,579
code here and we look for frame buffers

792
00:44:06,478 --> 00:44:11,629
and we just see like what are we

793
00:44:08,579 --> 00:44:17,009
actually doing with these frame buffers

794
00:44:11,630 --> 00:44:19,079
the GL gen frame buffer call is gonna

795
00:44:17,009 --> 00:44:22,579
occur anywhere that we're creating one

796
00:44:19,079 --> 00:44:31,950
of these right so if I just search

797
00:44:22,579 --> 00:44:34,650
4gl Jen frame buffers like so and I look

798
00:44:31,949 --> 00:44:37,799
at what's available there you can kind

799
00:44:34,650 --> 00:44:40,950
of see it's pretty obvious right that

800
00:44:37,800 --> 00:44:42,960
anywhere we call this we're going to be

801
00:44:40,949 --> 00:44:45,179
creating a new one of these frame

802
00:44:42,960 --> 00:44:48,480
buffers and then when we call GL frame

803
00:44:45,179 --> 00:44:50,250
buffer texture 2d we would be specifying

804
00:44:48,480 --> 00:44:51,659
a texture on it but the GL Jen frame

805
00:44:50,250 --> 00:44:53,039
buffers will tell us at least which

806
00:44:51,659 --> 00:44:55,858
handles are available and if we just

807
00:44:53,039 --> 00:44:57,449
track how big those frame buffers are

808
00:44:55,858 --> 00:45:01,409
then we know how much we're spending on

809
00:44:57,449 --> 00:45:07,019
frame buffer memory right so let's take

810
00:45:01,409 --> 00:45:11,730
a look at all the places we actually do

811
00:45:07,019 --> 00:45:16,739
that you can see here we've got one in

812
00:45:11,730 --> 00:45:19,039
create frame buffer one in this is some

813
00:45:16,739 --> 00:45:19,039
old

814
00:45:23,989 --> 00:45:33,789
this is some old lighting nonsense thank

815
00:45:35,750 --> 00:45:38,380
so

816
00:45:40,179 --> 00:45:47,098
I don't know what this is doing while

817
00:45:43,778 --> 00:45:51,489
texts with greater than one text site

818
00:45:47,099 --> 00:45:54,369
why are we still doing this light

819
00:45:51,489 --> 00:45:56,189
buffers we don't even use those anymore

820
00:45:54,369 --> 00:45:58,450
do we

821
00:45:56,190 --> 00:46:04,659
so we don't care about any of this stuff

822
00:45:58,449 --> 00:46:11,618
I don't think yeah this stuff is just

823
00:46:04,659 --> 00:46:14,889
old so if we take a look at these light

824
00:46:11,619 --> 00:46:18,190
buffers I think this is from our very

825
00:46:14,889 --> 00:46:21,639
first experiment with lighting I don't

826
00:46:18,190 --> 00:46:28,750
think we're actually doing the up-down

827
00:46:21,639 --> 00:46:30,308
part of that at all right let me just

828
00:46:28,750 --> 00:46:35,170
take a look at where those are actually

829
00:46:30,309 --> 00:46:38,140
getting used so if we look at where

830
00:46:35,170 --> 00:46:39,818
they're stored light buffers twelve I'm

831
00:46:38,139 --> 00:46:43,239
just curious what happens if I nuke this

832
00:46:39,818 --> 00:46:45,730
entirely so I've I've eliminated it from

833
00:46:43,239 --> 00:46:48,068
the actual code there I'm just looking

834
00:46:45,730 --> 00:46:50,920
to see who actually uses it yes

835
00:46:48,068 --> 00:46:54,099
so nobody uses it right so if we were to

836
00:46:50,920 --> 00:46:58,108
literally nuke these right here we would

837
00:46:54,099 --> 00:47:02,559
be fine right we don't actually use them

838
00:46:58,108 --> 00:47:05,288
we actually use these other this other

839
00:47:02,559 --> 00:47:10,619
information here so I'm going to go

840
00:47:05,289 --> 00:47:10,619
ahead and just if zero this out oops

841
00:47:11,429 --> 00:47:16,679
so we won't actually need any of this

842
00:47:22,260 --> 00:47:26,380
that will not really I don't think I

843
00:47:25,000 --> 00:47:31,059
have too much of a material effect

844
00:47:26,380 --> 00:47:33,548
effect on our like on our usage at all

845
00:47:31,059 --> 00:47:36,250
anyway but I just want to make sure that

846
00:47:33,548 --> 00:47:38,739
we are eliminating things that we don't

847
00:47:36,250 --> 00:47:41,349
need just to make sure we're you know

848
00:47:38,739 --> 00:47:43,149
counting what we should be counting okay

849
00:47:41,349 --> 00:47:44,588
so if we run and meet here oh this way

850
00:47:43,150 --> 00:47:47,940
now there should be no change because

851
00:47:44,588 --> 00:47:50,139
all we did is remove a vestigial remain

852
00:47:47,940 --> 00:47:54,460
and so you know this would be exactly

853
00:47:50,139 --> 00:47:59,618
the same it is so now if I redo that

854
00:47:54,460 --> 00:48:01,900
search for geo gem frame buffers again

855
00:47:59,619 --> 00:48:05,099
we have one there and then one in create

856
00:48:01,900 --> 00:48:08,260
frame buffer so really the only one then

857
00:48:05,099 --> 00:48:10,900
that we have is in create frame buffers

858
00:48:08,260 --> 00:48:14,109
a great frame buffer right because these

859
00:48:10,900 --> 00:48:17,440
two are now nerfed so this is the only

860
00:48:14,108 --> 00:48:21,219
one we have which means that GL create

861
00:48:17,440 --> 00:48:23,829
frame buffer if we had sort of a paired

862
00:48:21,219 --> 00:48:25,538
version that was like GL delete or sorry

863
00:48:23,829 --> 00:48:26,798
I'd just create frame buffer if we had

864
00:48:25,539 --> 00:48:29,500
another one that was like delete frame

865
00:48:26,798 --> 00:48:31,838
buffer and we just ballparked the memory

866
00:48:29,500 --> 00:48:33,219
that it was probably going to use we

867
00:48:31,838 --> 00:48:36,608
could keep track of that memory

868
00:48:33,219 --> 00:48:38,649
accurately so if I take a look at where

869
00:48:36,608 --> 00:48:45,548
we're doing like delete frame buffers

870
00:48:38,650 --> 00:48:49,210
right again it looks like it actually is

871
00:48:45,548 --> 00:48:52,659
paired pretty much exactly right because

872
00:48:49,210 --> 00:48:54,789
there's three frame buffer so that makes

873
00:48:52,659 --> 00:48:56,920
me think it would be pretty easy if we

874
00:48:54,789 --> 00:48:59,769
did something like this where we passed

875
00:48:56,920 --> 00:49:06,700
in the OpenGL handle to free frame

876
00:48:59,768 --> 00:49:09,098
buffer here we could just add and

877
00:49:06,699 --> 00:49:14,588
subtract how much memory we were

878
00:49:09,099 --> 00:49:18,400
actually using so if I go to my create

879
00:49:14,588 --> 00:49:20,018
frame buffer call and we sort of try to

880
00:49:18,400 --> 00:49:22,690
compute how much memory were actually

881
00:49:20,018 --> 00:49:24,939
using on this frame buffer we could then

882
00:49:22,690 --> 00:49:25,420
just store that information you know

883
00:49:24,940 --> 00:49:28,568
what I mean

884
00:49:25,420 --> 00:49:32,159
so basically what I want here is we

885
00:49:28,568 --> 00:49:34,469
would say all right OpenGL you know

886
00:49:32,159 --> 00:49:37,769
total frame buffer memory or something

887
00:49:34,469 --> 00:49:40,588
like that so it's tracked the open jail

888
00:49:37,769 --> 00:49:43,949
total frame buffer memory would just add

889
00:49:40,588 --> 00:49:48,538
and subtract here so we would subtract

890
00:49:43,949 --> 00:50:00,659
away however much memory this frame

891
00:49:48,539 --> 00:50:02,130
buffer may be like this so we would

892
00:50:00,659 --> 00:50:03,989
basically add and subtract away the

893
00:50:02,130 --> 00:50:05,849
amount that the frame buffer took and

894
00:50:03,989 --> 00:50:07,828
then we would have a single variable

895
00:50:05,849 --> 00:50:10,079
that we could inspect that would tell us

896
00:50:07,829 --> 00:50:11,910
at any given time how much memory we

897
00:50:10,079 --> 00:50:14,160
thought we were using it's not as good

898
00:50:11,909 --> 00:50:16,558
as actually asking the GPU but at least

899
00:50:14,159 --> 00:50:21,509
it's like this is the amount the GPU

900
00:50:16,559 --> 00:50:23,460
would have to have right so in here what

901
00:50:21,510 --> 00:50:26,369
I would do is that create frame buffer

902
00:50:23,460 --> 00:50:28,849
time I would do the symmetric call which

903
00:50:26,369 --> 00:50:31,710
is I'll just add in here frame buffer

904
00:50:28,849 --> 00:50:33,329
GPU memory used and then all I need to

905
00:50:31,710 --> 00:50:35,900
do is actually come up with that

906
00:50:33,329 --> 00:50:41,068
estimate somehow so when we actually

907
00:50:35,900 --> 00:50:45,720
create one of one of these results here

908
00:50:41,068 --> 00:50:48,538
I just need in you know I need to make

909
00:50:45,719 --> 00:50:53,269
something here which just says what's

910
00:50:48,539 --> 00:50:58,079
this value gonna be so all of these have

911
00:50:53,269 --> 00:51:00,659
a consequence right so once we know each

912
00:50:58,079 --> 00:51:03,750
of these then at that point we would

913
00:51:00,659 --> 00:51:07,440
know what the the approximate memory

914
00:51:03,750 --> 00:51:11,190
usage is so first of all we know if it

915
00:51:07,440 --> 00:51:12,119
has a depth buffer we have to add well I

916
00:51:11,190 --> 00:51:14,429
mean we could just step through the

917
00:51:12,119 --> 00:51:16,349
process exactly actually and in fact one

918
00:51:14,429 --> 00:51:18,389
way to do this would be to say it

919
00:51:16,349 --> 00:51:20,609
already initialized is at 0 let's just

920
00:51:18,389 --> 00:51:22,889
add in every time we attach something to

921
00:51:20,608 --> 00:51:25,108
the frame buffer we add add something in

922
00:51:22,889 --> 00:51:29,400
so you can see when we do frame buffer

923
00:51:25,108 --> 00:51:31,739
Tex image here and we have the format we

924
00:51:29,400 --> 00:51:36,568
also have the filter type there filter

925
00:51:31,739 --> 00:51:41,149
type I think is so I don't know where

926
00:51:36,568 --> 00:51:41,150
multi sampling actually comes in here

927
00:51:41,719 --> 00:51:51,989
is the only thing I guess it's the slot

928
00:51:46,469 --> 00:51:54,329
yeah it's the slot it's this so the only

929
00:51:51,989 --> 00:51:56,009
thing that's a little bit squeaky here

930
00:51:54,329 --> 00:51:58,889
is that we don't actually know what the

931
00:51:56,010 --> 00:52:01,680
multi sample requirement is here in

932
00:51:58,889 --> 00:52:08,309
terms of the amount of memory so if I

933
00:52:01,679 --> 00:52:10,409
look at frame buffer Tex image the thing

934
00:52:08,309 --> 00:52:13,199
that's a little confusing is you can see

935
00:52:10,409 --> 00:52:16,440
here if we're doing multi sampling we're

936
00:52:13,199 --> 00:52:17,730
using this max multi sample count and I

937
00:52:16,440 --> 00:52:19,769
don't know what that actually is going

938
00:52:17,730 --> 00:52:21,480
to be but that's okay cuz I could read

939
00:52:19,769 --> 00:52:26,429
it in both places so I could basically

940
00:52:21,480 --> 00:52:28,889
say like look let's just take that max

941
00:52:26,429 --> 00:52:31,230
multi sample count and use it now the

942
00:52:28,889 --> 00:52:33,629
reason that's a little weird I wonder if

943
00:52:31,230 --> 00:52:35,760
maybe what we should do is instead of

944
00:52:33,630 --> 00:52:38,369
passing the slot down here we should

945
00:52:35,760 --> 00:52:41,280
pass the sample count so if that sample

946
00:52:38,369 --> 00:52:42,989
count is like 1 or 0 like is 1 then it's

947
00:52:41,280 --> 00:52:44,790
it's a regular buffer and it just goes

948
00:52:42,989 --> 00:52:46,469
through this path and if it's higher

949
00:52:44,789 --> 00:52:48,449
than 1 it goes through the multi sample

950
00:52:46,469 --> 00:52:50,429
path that might be more interesting

951
00:52:48,449 --> 00:52:52,739
because then that way you know exactly

952
00:52:50,429 --> 00:52:55,279
how many samples you're asking for and

953
00:52:52,739 --> 00:52:57,959
on the callers end you know what I mean

954
00:52:55,280 --> 00:52:59,790
so that seems like me me a little bit

955
00:52:57,960 --> 00:53:01,500
better than what we were doing I might

956
00:52:59,789 --> 00:53:04,730
do that in two phases but I think that's

957
00:53:01,500 --> 00:53:04,730
a little bit better perhaps

958
00:53:09,340 --> 00:53:13,450
but for the meantime or sorry in the

959
00:53:12,309 --> 00:53:15,489
meantime what I'm gonna do is just

960
00:53:13,449 --> 00:53:18,699
actually compute the number as it is so

961
00:53:15,489 --> 00:53:22,659
the open Jill max multi sample count is

962
00:53:18,699 --> 00:53:27,849
how many samples per pixel we would have

963
00:53:22,659 --> 00:53:31,269
a idea here if it's float it's going to

964
00:53:27,849 --> 00:53:33,579
be four times four otherwise it's just

965
00:53:31,269 --> 00:53:36,190
going to be four right so if it's float

966
00:53:33,579 --> 00:53:38,799
it's going to be 32 bit or whatever

967
00:53:36,190 --> 00:53:40,990
right per channel whereas if it's not

968
00:53:38,800 --> 00:53:43,240
gonna be eight bit per channel so that's

969
00:53:40,989 --> 00:53:45,969
the like texture format part times the

970
00:53:43,239 --> 00:53:52,719
sample count and then we need to know

971
00:53:45,969 --> 00:53:56,259
the width and height right so all of

972
00:53:52,719 --> 00:53:59,529
that put together that is going to be

973
00:53:56,260 --> 00:54:05,440
our GPU memory used and we gotta add

974
00:53:59,530 --> 00:54:07,330
that in here right like so now when we

975
00:54:05,440 --> 00:54:09,820
get down to the depth buffer we have to

976
00:54:07,329 --> 00:54:11,349
add that as well and the depth buffer we

977
00:54:09,820 --> 00:54:14,350
don't actually know how big the depth

978
00:54:11,349 --> 00:54:16,029
samples are but this OpenGL depth

979
00:54:14,349 --> 00:54:18,489
component type here would presumably

980
00:54:16,030 --> 00:54:21,700
tell us some information about it right

981
00:54:18,489 --> 00:54:24,849
so you can see here 32f is just a

982
00:54:21,699 --> 00:54:26,589
floating point depth buffer and so all

983
00:54:24,849 --> 00:54:32,259
that would do is we just say all right

984
00:54:26,590 --> 00:54:38,650
result dot chief you remember used plus

985
00:54:32,260 --> 00:54:42,130
equals width times height times four and

986
00:54:38,650 --> 00:54:44,740
that's probably a safe assumption so we

987
00:54:42,130 --> 00:54:49,890
could do 24-bit and said and that would

988
00:54:44,739 --> 00:54:49,889
be reduced I don't know maybe we do this

989
00:54:59,280 --> 00:55:11,560
their bytes per sample something like

990
00:55:03,280 --> 00:55:14,950
that now my assumption here again is

991
00:55:11,559 --> 00:55:17,650
that the depth is gonna be recorded per

992
00:55:14,949 --> 00:55:20,139
sample because otherwise you wouldn't be

993
00:55:17,650 --> 00:55:22,119
able to do proper sampling and so I

994
00:55:20,139 --> 00:55:23,889
think you have to multiply this by the

995
00:55:22,119 --> 00:55:26,049
open Jillson another example count as

996
00:55:23,889 --> 00:55:30,269
well right and you can see why this is

997
00:55:26,050 --> 00:55:32,830
so bad you know what I'm saying to you

998
00:55:30,269 --> 00:55:36,789
we're just using way too much frame

999
00:55:32,829 --> 00:55:38,860
buffer memory here it's not good and

1000
00:55:36,789 --> 00:55:40,059
we're gonna need to get that down I

1001
00:55:38,860 --> 00:55:43,750
think that's probably our biggest

1002
00:55:40,059 --> 00:55:46,210
problem right now in terms of speed and

1003
00:55:43,750 --> 00:55:48,190
I also don't know like what our max

1004
00:55:46,210 --> 00:55:49,179
frame rate is but yeah at the moment I

1005
00:55:48,190 --> 00:55:51,179
don't think it's particularly good

1006
00:55:49,179 --> 00:55:53,710
probably right

1007
00:55:51,179 --> 00:55:55,750
we tried turning vsync off and it didn't

1008
00:55:53,710 --> 00:55:59,949
really work so that was a little bit of

1009
00:55:55,750 --> 00:56:02,469
an issue as well so anyway so this would

1010
00:55:59,949 --> 00:56:04,539
allow us to sum up the sizes of things

1011
00:56:02,469 --> 00:56:07,269
that's all the total size that there is

1012
00:56:04,539 --> 00:56:10,900
and then at the end we would just add in

1013
00:56:07,269 --> 00:56:15,489
how much that size was so this is

1014
00:56:10,900 --> 00:56:19,930
actually a result there so if I build

1015
00:56:15,489 --> 00:56:22,209
now I think I'm pretty good on those

1016
00:56:19,929 --> 00:56:25,509
computations all I need to do is add

1017
00:56:22,210 --> 00:56:27,970
these variables in where I said they

1018
00:56:25,510 --> 00:56:31,480
were going to be right oh and then I

1019
00:56:27,969 --> 00:56:33,069
need to actually make frame buffer when

1020
00:56:31,480 --> 00:56:40,199
we call free frame buffer we need to

1021
00:56:33,070 --> 00:56:41,999
pass in the OpenGL handle so like so

1022
00:56:40,199 --> 00:56:44,938
right

1023
00:56:41,998 --> 00:56:47,398
um so that's pretty much it let me go

1024
00:56:44,938 --> 00:56:49,768
ahead and add those values in here to

1025
00:56:47,398 --> 00:56:53,518
the you know the various places they

1026
00:56:49,768 --> 00:56:55,138
belong I'm gonna add in here total GPU

1027
00:56:53,518 --> 00:56:59,008
frame buffer memory I want to make this

1028
00:56:55,139 --> 00:57:01,829
a um M because again if we're summing up

1029
00:56:59,009 --> 00:57:03,869
GPU memory we don't you know we could in

1030
00:57:01,829 --> 00:57:06,389
theory at least during testing be using

1031
00:57:03,869 --> 00:57:08,039
more than two gigabytes more than four

1032
00:57:06,389 --> 00:57:11,068
gigabytes even if you were doing some

1033
00:57:08,039 --> 00:57:14,519
crazy stuff so we don't want to wrap an

1034
00:57:11,068 --> 00:57:17,128
integer or an unsigned integer so let's

1035
00:57:14,518 --> 00:57:20,578
just recorded as a 64-bit value

1036
00:57:17,128 --> 00:57:22,828
it's obviously not important to do so in

1037
00:57:20,579 --> 00:57:28,399
the normal case but you know I feel like

1038
00:57:22,829 --> 00:57:28,399
we should be overly cautious there so

1039
00:57:29,028 --> 00:57:35,518
those will be tracked as 64 just in case

1040
00:57:33,179 --> 00:57:38,878
even though we probably don't need it in

1041
00:57:35,518 --> 00:57:39,958
this particular instance because I don't

1042
00:57:38,878 --> 00:57:46,438
think we're getting up over four gigs

1043
00:57:39,958 --> 00:57:48,178
but so if we run this now and I just you

1044
00:57:46,438 --> 00:57:49,438
know compute that value in theory it's

1045
00:57:48,179 --> 00:57:51,599
computing but we don't have any way to

1046
00:57:49,438 --> 00:57:53,398
see it and so what I'd like to do is is

1047
00:57:51,599 --> 00:57:55,289
put that in here you can see we're

1048
00:57:53,398 --> 00:57:59,548
dumping some random rendering stuff we

1049
00:57:55,289 --> 00:58:02,729
don't really dump much a value here but

1050
00:57:59,548 --> 00:58:04,469
you can kind of see you know Oh in fact

1051
00:58:02,728 --> 00:58:06,268
there we go I this time we actually were

1052
00:58:04,469 --> 00:58:08,878
able to get vsync turned off it does

1053
00:58:06,268 --> 00:58:13,648
look like we get some faster frames

1054
00:58:08,878 --> 00:58:15,028
maybe a little bit hard to say so what

1055
00:58:13,648 --> 00:58:18,719
I'd like to do is be able to print that

1056
00:58:15,028 --> 00:58:21,088
number out right so I'm gonna go ahead

1057
00:58:18,719 --> 00:58:23,608
and add in something here where we're

1058
00:58:21,088 --> 00:58:26,398
actually doing our debug values there

1059
00:58:23,608 --> 00:58:30,228
I'm gonna try and print that out and if

1060
00:58:26,398 --> 00:58:32,188
I look at the debug values for that I

1061
00:58:30,228 --> 00:58:38,628
don't actually know where we've been

1062
00:58:32,188 --> 00:58:38,628
putting those oops at the moment

1063
00:58:39,349 --> 00:58:46,909
mmm-hmm why don't I see the render stuff

1064
00:58:43,550 --> 00:58:46,910
in here

1065
00:58:52,429 --> 00:59:13,859
shouldn't we see the debug datablock so

1066
00:59:11,369 --> 00:59:18,269
this is the data block oh because

1067
00:59:13,860 --> 00:59:20,309
they're all boolean's that's why so I

1068
00:59:18,269 --> 00:59:23,250
think if I just open this data block

1069
00:59:20,309 --> 00:59:25,529
inside the OpenGL renderer and put forth

1070
00:59:23,250 --> 00:59:27,510
the information I think that's probably

1071
00:59:25,530 --> 00:59:32,850
all we really need

1072
00:59:27,510 --> 00:59:34,950
so if we take a look inside the probably

1073
00:59:32,849 --> 00:59:44,909
the actual frame update call I guess

1074
00:59:34,949 --> 00:59:47,909
would be the don't even remember what

1075
00:59:44,909 --> 00:59:51,119
the frame and it's actually called it's

1076
00:59:47,909 --> 00:59:53,339
not end UI frame OpenGL and frame so in

1077
00:59:51,119 --> 00:59:55,889
OpenGL end frame here is where the

1078
00:59:53,340 --> 00:59:58,230
actual you know meet of the of the

1079
00:59:55,889 --> 01:00:00,299
rendering takes place so what we could

1080
00:59:58,230 --> 01:00:02,250
do here is just say look at the end of

1081
01:00:00,300 --> 01:00:05,240
that or something let's update that

1082
01:00:02,250 --> 01:00:15,090
variable so you know I could just say

1083
01:00:05,239 --> 01:00:17,359
all right at this point in time we've

1084
01:00:15,090 --> 01:00:17,360
got

1085
01:00:19,280 --> 01:00:28,320
OpenGL total GPU memory total GPU frame

1086
01:00:25,710 --> 01:00:33,570
buffer memory and in theory we could

1087
01:00:28,320 --> 01:00:35,370
sort of poof that forth right although I

1088
01:00:33,570 --> 01:00:39,210
guess now I think about it I don't know

1089
01:00:35,369 --> 01:00:40,889
if we actually there is a little bit of

1090
01:00:39,210 --> 01:00:43,019
an issue there which is I don't know

1091
01:00:40,889 --> 01:00:45,119
that we actually have the debug stuff

1092
01:00:43,019 --> 01:00:47,190
wired up in here I don't know if it

1093
01:00:45,119 --> 01:00:49,230
would actually work correctly because

1094
01:00:47,190 --> 01:00:53,159
this is a separate DLL I don't know if

1095
01:00:49,230 --> 01:00:57,449
we actually took the time to wire it up

1096
01:00:53,159 --> 01:00:59,069
for debug output that way we probably

1097
01:00:57,449 --> 01:01:03,359
didn't because we tried to make it stand

1098
01:00:59,070 --> 01:01:05,640
alone so what I might do is not quite

1099
01:01:03,360 --> 01:01:08,640
that then what I might do is just make

1100
01:01:05,639 --> 01:01:10,440
it so that the platform renderer part of

1101
01:01:08,639 --> 01:01:15,599
things contains it and then someone else

1102
01:01:10,440 --> 01:01:18,510
can print it out right so in here like

1103
01:01:15,599 --> 01:01:20,819
in this platform renderer header I think

1104
01:01:18,510 --> 01:01:23,130
I might just put it in there so it's in

1105
01:01:20,820 --> 01:01:24,830
the header instead of anything else so

1106
01:01:23,130 --> 01:01:27,480
there's just some vague like statistics

1107
01:01:24,829 --> 01:01:34,079
you know what I mean so in here where we

1108
01:01:27,480 --> 01:01:36,829
have platform renderer I'm just going to

1109
01:01:34,079 --> 01:01:36,829
put this in here

1110
01:01:43,159 --> 01:01:55,139
something like this all right so if I go

1111
01:01:48,989 --> 01:01:57,959
now and force it to use those instead of

1112
01:01:55,139 --> 01:01:59,129
like you know opengl arrow total GPU

1113
01:01:57,960 --> 01:02:05,820
frame buffer memory now it's gonna be

1114
01:01:59,130 --> 01:02:07,110
like OpenGL like header right and same

1115
01:02:05,820 --> 01:02:10,860
within the other place where I'm

1116
01:02:07,110 --> 01:02:15,180
actually using it open Jill header total

1117
01:02:10,860 --> 01:02:17,220
frame buffer memory so at that point

1118
01:02:15,179 --> 01:02:18,750
I've pretty much got it in a place where

1119
01:02:17,219 --> 01:02:20,789
now I can just output it with the rest

1120
01:02:18,750 --> 01:02:22,769
of the stuff that we're doing and so in

1121
01:02:20,789 --> 01:02:25,259
here we should be able to do that

1122
01:02:22,769 --> 01:02:29,340
because since we have the platform

1123
01:02:25,260 --> 01:02:32,640
available available to us we should also

1124
01:02:29,340 --> 01:02:36,840
be able to get the renderer information

1125
01:02:32,639 --> 01:02:40,589
from there right so when we look at the

1126
01:02:36,840 --> 01:02:42,780
platform renderer we should be I assume

1127
01:02:40,590 --> 01:02:44,430
we have a way of accessing that easily I

1128
01:02:42,780 --> 01:02:45,269
guess no I think about it I don't

1129
01:02:44,429 --> 01:02:47,279
actually know that that's necessarily

1130
01:02:45,269 --> 01:02:48,809
true we may have to make sure that that

1131
01:02:47,280 --> 01:02:50,130
also gets passed through I mean it

1132
01:02:48,809 --> 01:02:53,070
should have but I don't know that we

1133
01:02:50,130 --> 01:02:56,610
ever actually did that if I take a look

1134
01:02:53,070 --> 01:02:59,730
for platform renderer just not sure

1135
01:02:56,610 --> 01:03:07,200
where all that goes in so yeah if you

1136
01:02:59,730 --> 01:03:09,389
look here the the win32 call that

1137
01:03:07,199 --> 01:03:11,759
actually does this went through to in a

1138
01:03:09,389 --> 01:03:13,019
default renderer there you can see it

1139
01:03:11,760 --> 01:03:15,960
went through your hand made we're

1140
01:03:13,019 --> 01:03:18,179
calling it I'm not actually sure we ever

1141
01:03:15,960 --> 01:03:22,190
tell the application about that now

1142
01:03:18,179 --> 01:03:22,190
technically we don't have to

1143
01:03:26,420 --> 01:03:32,028
so I guess we just won't because in here

1144
01:03:30,108 --> 01:03:36,048
we can output the debug information just

1145
01:03:32,028 --> 01:03:38,119
fine which should be reasonable right so

1146
01:03:36,048 --> 01:03:41,690
in here where we go to do like our end

1147
01:03:38,119 --> 01:03:42,858
frame call that's presumably the only

1148
01:03:41,690 --> 01:03:48,889
place we would really need to do it

1149
01:03:42,858 --> 01:03:51,588
right so I'm just gonna say let's do it

1150
01:03:48,889 --> 01:03:55,009
that way so in here where we go into

1151
01:03:51,588 --> 01:03:57,500
frame display that seems like probably

1152
01:03:55,010 --> 01:04:00,380
the right place to put it so you know we

1153
01:03:57,500 --> 01:04:01,838
do an end frame and then we record these

1154
01:04:00,380 --> 01:04:04,460
values for next time

1155
01:04:01,838 --> 01:04:06,469
or maybe we do them right before the end

1156
01:04:04,460 --> 01:04:08,480
frame I don't know where the debug

1157
01:04:06,469 --> 01:04:12,439
collation actually occurs maybe we do it

1158
01:04:08,480 --> 01:04:15,460
before the debug collation so maybe we

1159
01:04:12,440 --> 01:04:15,460
do it like right here

1160
01:04:22,400 --> 01:04:27,930
so maybe before we collate we just stick

1161
01:04:25,349 --> 01:04:30,659
them in here so let's just open that

1162
01:04:27,929 --> 01:04:36,539
same block so much like we were doing

1163
01:04:30,659 --> 01:04:39,389
here we'll open this block and output

1164
01:04:36,539 --> 01:04:42,750
some debug values so we know the

1165
01:04:39,389 --> 01:04:46,409
renderer has the total frame buffer

1166
01:04:42,750 --> 01:04:53,840
memory years and we can also go in and

1167
01:04:46,409 --> 01:04:53,839
add the texture memory usage as well

1168
01:04:57,409 --> 01:05:05,579
ambiguous call to overloaded function Oh

1169
01:05:00,840 --> 01:05:07,440
probably because these are UMMS which I

1170
01:05:05,579 --> 01:05:17,940
don't know do we not support that in our

1171
01:05:07,440 --> 01:05:20,579
debug data no we do so look you know we

1172
01:05:17,940 --> 01:05:24,440
could easily have a size for that but at

1173
01:05:20,579 --> 01:05:29,119
the moment it looks like we don't right

1174
01:05:24,440 --> 01:05:29,119
so I guess yeah

1175
01:05:35,050 --> 01:05:39,550
so that's a little bit of knowing too so

1176
01:05:37,489 --> 01:05:42,019
we don't currently have a you mm sized

1177
01:05:39,550 --> 01:05:44,480
variable here like we only have a you 32

1178
01:05:42,019 --> 01:05:45,800
sized variable I don't really know why

1179
01:05:44,480 --> 01:05:49,608
we did that because you'd think we'd

1180
01:05:45,800 --> 01:05:52,039
want to store a you 64 as well but

1181
01:05:49,608 --> 01:05:53,900
that's the reason that this is you know

1182
01:05:52,039 --> 01:05:56,659
having trouble there I'm tempted to just

1183
01:05:53,900 --> 01:06:00,410
add one if I look at all the places that

1184
01:05:56,659 --> 01:06:03,049
are using debug u-32 you can see that

1185
01:06:00,409 --> 01:06:07,608
really it's just this so in theory if I

1186
01:06:03,050 --> 01:06:09,140
just wanted to do that right in theory

1187
01:06:07,608 --> 01:06:13,519
we could do something like this and just

1188
01:06:09,139 --> 01:06:16,608
have a value 6u 64 that gets printed out

1189
01:06:13,519 --> 01:06:19,280
here now I don't actually know when we

1190
01:06:16,608 --> 01:06:23,630
do a format string I don't know what we

1191
01:06:19,280 --> 01:06:24,680
made for 64-bit print out to the extent

1192
01:06:23,630 --> 01:06:27,050
that we did

1193
01:06:24,679 --> 01:06:28,940
I'll look if we've got one but even if

1194
01:06:27,050 --> 01:06:31,220
we didn't we can still do sort of a cast

1195
01:06:28,940 --> 01:06:33,409
in print or do it as a float there for

1196
01:06:31,219 --> 01:06:35,959
example in fact I could just make these

1197
01:06:33,409 --> 01:06:38,659
floats and be done with it but we'll see

1198
01:06:35,960 --> 01:06:41,980
so let's take a look and see did we

1199
01:06:38,659 --> 01:06:45,170
actually do any 64-bit print out here

1200
01:06:41,980 --> 01:06:49,909
did we make it easy for ourselves to do

1201
01:06:45,170 --> 01:06:59,119
that so it looks like X anyway pointers

1202
01:06:49,909 --> 01:07:00,769
print out s 64 M from memory so you can

1203
01:06:59,119 --> 01:07:03,050
see we actually did a memory thing here

1204
01:07:00,769 --> 01:07:05,539
and we actually do gigabytes this is

1205
01:07:03,050 --> 01:07:06,830
perfect this is exactly what we want so

1206
01:07:05,539 --> 01:07:10,190
what I would do is they just say look

1207
01:07:06,829 --> 01:07:13,400
let's do it actually as a debug type um

1208
01:07:10,190 --> 01:07:16,130
M here let's actually just do that so

1209
01:07:13,400 --> 01:07:18,680
then in the debug interface we would

1210
01:07:16,130 --> 01:07:20,720
have debug type um M which is our memory

1211
01:07:18,679 --> 01:07:22,190
type that we print out that would be

1212
01:07:20,719 --> 01:07:23,839
perfect for what we're doing here

1213
01:07:22,190 --> 01:07:27,679
because this is a memory size

1214
01:07:23,840 --> 01:07:29,059
specifically so that seems good and then

1215
01:07:27,679 --> 01:07:32,839
in here we would just need a place to

1216
01:07:29,059 --> 01:07:35,239
store it so value um M like that I think

1217
01:07:32,840 --> 01:07:37,850
that's really all we would need to do

1218
01:07:35,239 --> 01:07:41,000
and so in here where we have this sort

1219
01:07:37,849 --> 01:07:42,889
of you know a set of things that that

1220
01:07:41,000 --> 01:07:45,139
are you know basically just garbage

1221
01:07:42,889 --> 01:07:47,420
because C C and C++ are pretty terrible

1222
01:07:45,139 --> 01:07:48,440
at this sort of thing we

1223
01:07:47,420 --> 01:07:50,838
should now have a way of recording

1224
01:07:48,440 --> 01:07:52,700
memory sized things into the debug

1225
01:07:50,838 --> 01:07:55,849
stream and printing them out as memory

1226
01:07:52,699 --> 01:07:59,779
sizes pretty simple but probably worth

1227
01:07:55,849 --> 01:08:01,670
it right so here you can see this is the

1228
01:07:59,780 --> 01:08:05,390
disaster I was talking about we don't

1229
01:08:01,670 --> 01:08:07,849
know we don't know if that number is

1230
01:08:05,389 --> 01:08:13,568
correct so I mean I could be computing

1231
01:08:07,849 --> 01:08:16,069
it incorrectly but it probably is right

1232
01:08:13,568 --> 01:08:22,630
because remember that back of the

1233
01:08:16,069 --> 01:08:25,069
envelope calculation I did 1920 x 1080

1234
01:08:22,630 --> 01:08:26,539
let's see what that max sample count is

1235
01:08:25,069 --> 01:08:27,980
actually I guess I don't know what that

1236
01:08:26,539 --> 01:08:32,988
is is do we have that on here we don't

1237
01:08:27,979 --> 01:08:37,000
so let's let's forward that value out as

1238
01:08:32,988 --> 01:08:41,358
well at the moment because you know

1239
01:08:37,000 --> 01:08:43,909
that's kind of a disaster there so if we

1240
01:08:41,359 --> 01:08:51,548
go in here to handmade renderer I also

1241
01:08:43,909 --> 01:08:51,548
want to put like you know maybe likes

1242
01:08:58,380 --> 01:09:03,849
something like this so here's the you

1243
01:09:01,658 --> 01:09:05,708
the what it decided to use for a multi

1244
01:09:03,849 --> 01:09:08,949
sample account I'll just shove that in

1245
01:09:05,708 --> 01:09:13,649
there as well so then inside open gel

1246
01:09:08,948 --> 01:09:18,278
when we're actually it's handmade nope

1247
01:09:13,649 --> 01:09:24,488
render open gel when we're actually sort

1248
01:09:18,279 --> 01:09:26,139
of doing the change settings we can

1249
01:09:24,488 --> 01:09:28,388
actually look to see like okay what are

1250
01:09:26,139 --> 01:09:30,788
we doing with the multi sampling and so

1251
01:09:28,389 --> 01:09:35,170
and what is that number going to be

1252
01:09:30,788 --> 01:09:40,568
right so in here we can specify what

1253
01:09:35,170 --> 01:09:43,088
that what that number is when we use

1254
01:09:40,569 --> 01:09:45,339
opengl multi sampling here and we put in

1255
01:09:43,088 --> 01:09:48,488
the DEF appeal flags like this you can

1256
01:09:45,338 --> 01:09:50,349
see i can just go ahead and set the

1257
01:09:48,488 --> 01:10:00,598
header there to show which one we're

1258
01:09:50,349 --> 01:10:05,170
using so in our open jail oops header

1259
01:10:00,599 --> 01:10:07,719
dot used multi sample count i can just

1260
01:10:05,170 --> 01:10:11,380
say hey the multi sample count that

1261
01:10:07,719 --> 01:10:15,670
we're actually using is that max right

1262
01:10:11,380 --> 01:10:18,279
max multi sample count that thing and if

1263
01:10:15,670 --> 01:10:22,479
we don't use multi sampling then it's

1264
01:10:18,279 --> 01:10:26,738
just gonna be one and then when we print

1265
01:10:22,479 --> 01:10:31,840
this out in hand made that cpp exactly

1266
01:10:26,738 --> 01:10:37,288
like before oh sorry know what's in

1267
01:10:31,840 --> 01:10:37,288
there who's here i'll put that out here

1268
01:10:39,270 --> 01:10:43,200
and so a theory now we can also see what

1269
01:10:40,949 --> 01:10:44,729
that multi sample count is then we can

1270
01:10:43,199 --> 01:10:49,019
do the back of the envelope completely

1271
01:10:44,729 --> 01:10:50,669
computation correctly it would be nice

1272
01:10:49,020 --> 01:10:52,560
to verify this value but you know

1273
01:10:50,670 --> 01:10:54,239
without inside or something we can't

1274
01:10:52,560 --> 01:10:56,010
really verify it so we don't know that

1275
01:10:54,239 --> 01:10:57,989
it's actually correct but if it's 16

1276
01:10:56,010 --> 01:11:00,869
which is the highest you know possible

1277
01:10:57,989 --> 01:11:03,149
multi sampling then what we've got here

1278
01:11:00,869 --> 01:11:07,500
is exactly what I thought right we have

1279
01:11:03,149 --> 01:11:11,969
four depth peels at 1920 by 1080 each

1280
01:11:07,500 --> 01:11:16,520
one actually has four times four because

1281
01:11:11,970 --> 01:11:24,119
it's four bytes for a float times for

1282
01:11:16,520 --> 01:11:27,030
RGB a right so that's 16 right four

1283
01:11:24,119 --> 01:11:30,840
times nine 20 times seven eighty times

1284
01:11:27,029 --> 01:11:35,489
16 and then each one of those is 16

1285
01:11:30,840 --> 01:11:41,150
samples right so in addition to those

1286
01:11:35,489 --> 01:11:48,679
four we also have the depth buffer which

1287
01:11:41,149 --> 01:11:48,679
I guess

1288
01:11:51,748 --> 01:11:56,149
so the thing that I'm not sure about is

1289
01:11:53,908 --> 01:12:01,319
the depth buffer we wouldn't need one

1290
01:11:56,149 --> 01:12:06,899
per frame buffer the depth buffer would

1291
01:12:01,319 --> 01:12:08,698
be the same for all of them right but

1292
01:12:06,899 --> 01:12:10,618
I'm not sure at the moment if we're

1293
01:12:08,698 --> 01:12:13,799
actually smart enough to be doing that

1294
01:12:10,618 --> 01:12:25,768
so I'm pretty sure even that actually

1295
01:12:13,800 --> 01:12:29,400
goes like this right so I'm pretty sure

1296
01:12:25,769 --> 01:12:39,090
that that actually this gets added in

1297
01:12:29,399 --> 01:12:42,089
there and so it looks like

1298
01:12:39,090 --> 01:12:45,599
back-of-the-envelope wise we are like

1299
01:12:42,090 --> 01:12:48,059
using at least two point four gigs and

1300
01:12:45,599 --> 01:12:50,639
that's it's just absurd right it's just

1301
01:12:48,059 --> 01:12:53,010
totally unacceptable and so we need to

1302
01:12:50,639 --> 01:12:55,979
start reducing that number pretty

1303
01:12:53,010 --> 01:12:58,670
dramatically obviously and there's a

1304
01:12:55,979 --> 01:13:01,380
number of ways that we could do that

1305
01:12:58,670 --> 01:13:07,828
and we should we should we should start

1306
01:13:01,380 --> 01:13:14,760
by you know kind of addressing as much

1307
01:13:07,828 --> 01:13:16,920
of that as we can so if we look I guess

1308
01:13:14,760 --> 01:13:19,260
a couple things here there's a number of

1309
01:13:16,920 --> 01:13:23,489
things we could do the first one I think

1310
01:13:19,260 --> 01:13:25,079
is probably the most sensible and it's a

1311
01:13:23,488 --> 01:13:26,339
little bit tough to do but I think we

1312
01:13:25,078 --> 01:13:29,609
should at least try to get it working

1313
01:13:26,340 --> 01:13:34,139
and that is that we don't actually need

1314
01:13:29,609 --> 01:13:40,439
to store multi sampling after our first

1315
01:13:34,139 --> 01:13:42,449
pass right if that makes sense by the

1316
01:13:40,439 --> 01:13:43,859
way I noticed I just happened to see how

1317
01:13:42,448 --> 01:13:44,848
the card of my I so I was asking why

1318
01:13:43,859 --> 01:13:47,549
there are four channels in the Deaf

1319
01:13:44,849 --> 01:13:49,050
buffer there aren't this is just four

1320
01:13:47,550 --> 01:13:52,639
bytes for the floating-point value

1321
01:13:49,050 --> 01:13:52,639
that's stored right

1322
01:13:56,420 --> 01:14:06,380
so anyway the depth buffer I don't even

1323
01:14:01,698 --> 01:14:15,229
know that we would need to keep the

1324
01:14:06,380 --> 01:14:19,190
depth buffer like in theory we only need

1325
01:14:15,229 --> 01:14:21,500
to depth buffers right so in theory we

1326
01:14:19,189 --> 01:14:23,479
only need to store to depth buffers the

1327
01:14:21,500 --> 01:14:26,238
one that we're on right now and the one

1328
01:14:23,479 --> 01:14:28,269
that we was for the previous pass the

1329
01:14:26,238 --> 01:14:30,709
reason I say that is because obviously

1330
01:14:28,270 --> 01:14:33,889
when we're you know doing the rendering

1331
01:14:30,710 --> 01:14:36,859
pass we need to record our depth buffer

1332
01:14:33,889 --> 01:14:39,079
and we also need to look up and check

1333
01:14:36,859 --> 01:14:41,479
against the existing depth buffer to see

1334
01:14:39,079 --> 01:14:46,969
whether or not we're past it in order to

1335
01:14:41,479 --> 01:14:51,769
do the depth field properly but once we

1336
01:14:46,969 --> 01:14:52,908
compute the DEF peel we don't need we

1337
01:14:51,770 --> 01:14:54,290
don't need to know that anymore because

1338
01:14:52,908 --> 01:14:55,879
I don't think we use the depth

1339
01:14:54,289 --> 01:14:58,698
information when we actually do our

1340
01:14:55,880 --> 01:15:08,230
final composite right am I wrong about

1341
01:14:58,698 --> 01:15:08,229
that let's see

1342
01:15:09,859 --> 01:15:15,000
so here you can see a sampling it right

1343
01:15:12,510 --> 01:15:20,969
so we don't when we actually blend the

1344
01:15:15,000 --> 01:15:25,199
four def buffers for the four death

1345
01:15:20,969 --> 01:15:27,899
feels together we don't need the the

1346
01:15:25,199 --> 01:15:30,449
death buffer anymore so we really only

1347
01:15:27,899 --> 01:15:31,500
need two depth buffers total right so

1348
01:15:30,449 --> 01:15:34,800
I'm just going to come up with a a

1349
01:15:31,500 --> 01:15:41,670
ballpark estimate here right so let's

1350
01:15:34,800 --> 01:15:44,670
say we retained two floating-point depth

1351
01:15:41,670 --> 01:15:45,600
buffers which we could probably get away

1352
01:15:44,670 --> 01:15:50,399
with 16-bit

1353
01:15:45,600 --> 01:15:55,010
just fine but let's say we used full

1354
01:15:50,399 --> 01:15:58,109
float or 24-bit but full float let's say

1355
01:15:55,010 --> 01:16:01,800
anyway so worst case scenario full float

1356
01:15:58,109 --> 01:16:08,479
so we need to have two depth buffers

1357
01:16:01,800 --> 01:16:16,130
times 1920 by 1080 times 16 samples

1358
01:16:08,479 --> 01:16:16,129
times four right is what we would need

1359
01:16:18,920 --> 01:16:23,760
so checking out how many gigabytes that

1360
01:16:21,600 --> 01:16:28,980
is you can obviously see like it's it's

1361
01:16:23,760 --> 01:16:31,469
drastically less because you know it

1362
01:16:28,979 --> 01:16:34,919
would it would have the number it's

1363
01:16:31,469 --> 01:16:39,420
still not great so I do wonder a little

1364
01:16:34,920 --> 01:16:41,449
bit again about trying to think if

1365
01:16:39,420 --> 01:16:41,449
there's

1366
01:16:46,829 --> 01:16:53,529
like going down to a single one of those

1367
01:16:49,510 --> 01:16:56,679
would be preferable certainly you know

1368
01:16:53,529 --> 01:16:59,109
what I mean getting away with that would

1369
01:16:56,679 --> 01:17:13,890
probably the best possible scenario for

1370
01:16:59,109 --> 01:17:13,889
us just trying to think it through

1371
01:17:14,130 --> 01:17:21,760
because I think you want multi sampling

1372
01:17:17,829 --> 01:17:23,408
and you want a depth buffer and you want

1373
01:17:21,760 --> 01:17:25,890
to use the depth buffer with the multi

1374
01:17:23,408 --> 01:17:28,448
sampling that all seems true

1375
01:17:25,890 --> 01:17:30,460
now you could get away I think with just

1376
01:17:28,448 --> 01:17:32,559
one at that resolution because I think

1377
01:17:30,460 --> 01:17:35,649
once you're done with it you can map it

1378
01:17:32,560 --> 01:17:39,340
down you wouldn't you could just assume

1379
01:17:35,649 --> 01:17:47,170
that that pixel had whatever the depth

1380
01:17:39,340 --> 01:17:49,960
was on the largest pass so I think we

1381
01:17:47,170 --> 01:17:52,390
could get away with just one multi

1382
01:17:49,960 --> 01:17:58,329
sample depth buffer actually and that

1383
01:17:52,390 --> 01:18:03,210
would be what's that like 128 Meg's yeah

1384
01:17:58,329 --> 01:18:06,429
so 128 megabytes for the depth buffer

1385
01:18:03,210 --> 01:18:09,779
isn't awful at 16x multi sample which is

1386
01:18:06,429 --> 01:18:09,779
very good multi sampling

1387
01:18:13,029 --> 01:18:25,279
so let's say we do that we would then

1388
01:18:21,289 --> 01:18:27,590
also need one resolve depth buffer but

1389
01:18:25,279 --> 01:18:29,868
that would be trivial it would be like

1390
01:18:27,590 --> 01:18:31,489
that or something it would be like 8

1391
01:18:29,868 --> 01:18:34,670
megabytes no one would care because it

1392
01:18:31,488 --> 01:18:41,269
would be uh none multi sampled so I feel

1393
01:18:34,670 --> 01:18:43,670
like I feel like that would work if we

1394
01:18:41,270 --> 01:18:45,889
if we went that route I mean we'll see

1395
01:18:43,670 --> 01:18:47,510
but I feel like that would work so I

1396
01:18:45,889 --> 01:18:50,480
think we could get it down to 128

1397
01:18:47,510 --> 01:18:57,579
megabytes for a depth buffer and that

1398
01:18:50,479 --> 01:19:00,759
would be a savings of 4x right basically

1399
01:18:57,579 --> 01:19:03,350
but but that's the small potatoes

1400
01:19:00,760 --> 01:19:06,350
because the color buffers are really the

1401
01:19:03,350 --> 01:19:12,760
huge thing and a single color buffer

1402
01:19:06,350 --> 01:19:21,829
right now is 1920 by 1080 x 16 x 16

1403
01:19:12,760 --> 01:19:29,539
right uh and so a single just one color

1404
01:19:21,829 --> 01:19:34,340
buffer just one is half a gigabyte right

1405
01:19:29,539 --> 01:19:37,729
just one color buffer and so a couple

1406
01:19:34,340 --> 01:19:40,969
things we can do to attack that the

1407
01:19:37,729 --> 01:19:42,559
first one is obviously we can reduce the

1408
01:19:40,969 --> 01:19:44,420
number of multi sampled color buffers we

1409
01:19:42,560 --> 01:19:47,300
store and so again I think the answer

1410
01:19:44,420 --> 01:19:49,460
here is going to be draw AB depth peel

1411
01:19:47,300 --> 01:19:55,250
with multi sampling on but then resolve

1412
01:19:49,460 --> 01:19:58,189
the multi sample down first because

1413
01:19:55,250 --> 01:20:00,560
after we do the def peel we don't need

1414
01:19:58,189 --> 01:20:03,439
to keep that multi sampled stuff around

1415
01:20:00,560 --> 01:20:05,090
so just have one and do it and be done

1416
01:20:03,439 --> 01:20:09,259
that would get us down to half a

1417
01:20:05,090 --> 01:20:11,719
gigabyte rather than two gigabytes so

1418
01:20:09,260 --> 01:20:13,760
it's a good first step but half a

1419
01:20:11,719 --> 01:20:16,130
gigabyte is still way too large so the

1420
01:20:13,760 --> 01:20:18,530
next question is can we stop storing

1421
01:20:16,130 --> 01:20:20,810
floating-point information well

1422
01:20:18,529 --> 01:20:23,569
obviously we don't need float for the

1423
01:20:20,810 --> 01:20:25,460
Alpha Channel that's absurd

1424
01:20:23,569 --> 01:20:27,099
we only need an 8-bit value for the

1425
01:20:25,460 --> 01:20:31,038
Alpha Channel

1426
01:20:27,099 --> 01:20:32,690
but for the color Channel I don't know

1427
01:20:31,038 --> 01:20:35,268
we could certainly switch away from

1428
01:20:32,689 --> 01:20:38,958
float right now and it wouldn't really

1429
01:20:35,269 --> 01:20:42,679
do much harm but we may in the future

1430
01:20:38,958 --> 01:20:46,248
want to have better lighting information

1431
01:20:42,679 --> 01:20:49,219
recorded and so I think keeping at least

1432
01:20:46,248 --> 01:20:58,670
16 bits per sample would probably be

1433
01:20:49,219 --> 01:21:01,519
important it's hard to say you know

1434
01:20:58,670 --> 01:21:04,038
whether we could get away with a you

1435
01:21:01,519 --> 01:21:06,110
know 10 bits per gun kind of a sample

1436
01:21:04,038 --> 01:21:07,788
format or something or 11 bits per gun

1437
01:21:06,109 --> 01:21:09,319
or something like that because there are

1438
01:21:07,788 --> 01:21:12,889
some hybrid formats that have that sort

1439
01:21:09,319 --> 01:21:18,828
of thing you know maybe but if we went

1440
01:21:12,889 --> 01:21:22,519
down to 16 bits per gun instead that

1441
01:21:18,828 --> 01:21:26,478
drops us down to 256 Meg's which isn't

1442
01:21:22,519 --> 01:21:28,340
bad again all of these numbers become

1443
01:21:26,479 --> 01:21:30,889
trivially better if you just reduced a

1444
01:21:28,340 --> 01:21:32,569
Multi sampling count so this is only the

1445
01:21:30,889 --> 01:21:35,989
highest end system that would be running

1446
01:21:32,569 --> 01:21:37,670
a 16x multi sample right on lower end

1447
01:21:35,988 --> 01:21:39,589
systems we can drop the multi sample

1448
01:21:37,670 --> 01:21:42,408
down or turn it off entirely and the

1449
01:21:39,590 --> 01:21:44,269
graphics just look a little crispier but

1450
01:21:42,408 --> 01:21:49,129
then none of this then your memory usage

1451
01:21:44,269 --> 01:21:51,469
drops by 16x right and it's all nonsense

1452
01:21:49,130 --> 01:21:54,949
right if we just if we just got rid of

1453
01:21:51,469 --> 01:21:59,300
the multi sampling your 10 to 15

1454
01:21:54,948 --> 01:22:01,279
megabytes right so it's the multi

1455
01:21:59,300 --> 01:22:04,279
sampling that's really killing us but

1456
01:22:01,279 --> 01:22:06,529
we're trying to use it to give it give a

1457
01:22:04,279 --> 01:22:12,309
really high quality image and so we do

1458
01:22:06,529 --> 01:22:14,658
want to have that B be available now

1459
01:22:12,309 --> 01:22:17,329
there's another option we could think

1460
01:22:14,658 --> 01:22:19,908
about here and that is that multi

1461
01:22:17,328 --> 01:22:21,708
sampling is only necessary for objects

1462
01:22:19,908 --> 01:22:26,018
which themselves actually don't need to

1463
01:22:21,708 --> 01:22:26,019
be def field right

1464
01:22:30,609 --> 01:22:35,960
Multi sampling is unnecessary for our

1465
01:22:33,800 --> 01:22:37,699
sprites our sprites we can critically

1466
01:22:35,960 --> 01:22:41,720
sample properly just by using bit

1467
01:22:37,699 --> 01:22:44,359
mapping and they do not have geometric

1468
01:22:41,720 --> 01:22:46,100
edges so the only thing we're using the

1469
01:22:44,359 --> 01:22:50,238
only thing we're using the multi

1470
01:22:46,100 --> 01:22:54,829
sampling for right now is our cubes so

1471
01:22:50,238 --> 01:23:00,139
the question is if we wanted to say that

1472
01:22:54,829 --> 01:23:03,439
our cubes cannot have alpha right cubes

1473
01:23:00,140 --> 01:23:05,960
are solid if we just say that cubes are

1474
01:23:03,439 --> 01:23:08,929
solid then we can actually do something

1475
01:23:05,960 --> 01:23:14,270
even better than any of this which is we

1476
01:23:08,930 --> 01:23:18,340
can draw cubes only in like like solids

1477
01:23:14,270 --> 01:23:22,730
only basically with multi sampling and

1478
01:23:18,340 --> 01:23:24,920
then alpha things we turn the multi

1479
01:23:22,729 --> 01:23:26,238
sampling on in the depth feeling on I'm

1480
01:23:24,920 --> 01:23:31,159
sorry which are the multi sampling off

1481
01:23:26,238 --> 01:23:34,219
and the depth peeling on so we would not

1482
01:23:31,159 --> 01:23:38,479
use multi sample frame buffers for that

1483
01:23:34,220 --> 01:23:41,090
process that would lead to a pretty nice

1484
01:23:38,479 --> 01:23:48,559
way of running things which is to say we

1485
01:23:41,090 --> 01:23:51,050
have won a single multi sampling buffer

1486
01:23:48,560 --> 01:23:54,430
we render the cubes into it with depth

1487
01:23:51,050 --> 01:23:58,159
feeling turned off we resolve it and

1488
01:23:54,430 --> 01:24:01,010
then we just use that as something we

1489
01:23:58,159 --> 01:24:03,189
composite our alpha things with at the

1490
01:24:01,010 --> 01:24:03,190
end

1491
01:24:04,659 --> 01:24:18,300
uh I like the sound of that right

1492
01:24:27,649 --> 01:24:36,189
I like the sound of that and I think

1493
01:24:31,069 --> 01:24:39,378
that might be a good answer because

1494
01:24:36,189 --> 01:24:42,289
actually if you did that you could still

1495
01:24:39,378 --> 01:24:45,469
use cubes with alpha on them if you

1496
01:24:42,288 --> 01:24:48,889
wanted to and they would just go into

1497
01:24:45,469 --> 01:24:51,168
the other pass so you wouldn't get multi

1498
01:24:48,889 --> 01:24:53,029
sampling on cubes with alpha but that's

1499
01:24:51,168 --> 01:24:58,368
the only restriction everything else

1500
01:24:53,029 --> 01:25:01,389
would just work right that to me sounds

1501
01:24:58,368 --> 01:25:01,389
pretty compelling

1502
01:25:08,600 --> 01:25:16,760
I think that's what we should do that's

1503
01:25:11,149 --> 01:25:20,359
my argument I'm it that's what we're

1504
01:25:16,760 --> 01:25:25,789
going to do so here's the way we would

1505
01:25:20,359 --> 01:25:35,420
do this so let's suppose we took a look

1506
01:25:25,789 --> 01:25:39,710
at at this information right here so I

1507
01:25:35,420 --> 01:25:42,170
think effectively this compositor would

1508
01:25:39,710 --> 01:25:44,810
work exactly the same as it does now if

1509
01:25:42,170 --> 01:25:47,720
we went down to the multipath part of

1510
01:25:44,810 --> 01:25:51,440
the rendering so here's where that

1511
01:25:47,720 --> 01:25:53,780
happens when we first set it up so you

1512
01:25:51,439 --> 01:25:56,599
can see here we do like the full clear

1513
01:25:53,779 --> 01:26:07,039
and we begin the peals what you can see

1514
01:25:56,600 --> 01:26:12,820
here is we say look when we are doing

1515
01:26:07,039 --> 01:26:18,140
our depth feel and I don't actually know

1516
01:26:12,819 --> 01:26:19,819
here's on peel index so when we are

1517
01:26:18,140 --> 01:26:23,960
doing our def peel and we're working our

1518
01:26:19,819 --> 01:26:30,649
way backwards what you can see here is

1519
01:26:23,960 --> 01:26:36,640
that the the load so if we're peeling

1520
01:26:30,649 --> 01:26:41,869
right the load of the depth handle

1521
01:26:36,640 --> 01:26:47,800
doesn't occur if we are on the first

1522
01:26:41,869 --> 01:26:47,800
depth feel right so it basically says

1523
01:26:49,750 --> 01:26:54,590
you know when we go in here and render

1524
01:26:52,550 --> 01:26:58,010
where we're going to make sure that we

1525
01:26:54,590 --> 01:27:01,270
start loading from that depth peel and

1526
01:26:58,010 --> 01:27:01,270
off we go

1527
01:27:03,559 --> 01:27:07,788
which I guess we still sort of have to

1528
01:27:06,109 --> 01:27:10,670
have happen I'm just trying to figure

1529
01:27:07,788 --> 01:27:14,118
out how we would actually load in these

1530
01:27:10,670 --> 01:27:19,340
how we would get these cubes into the

1531
01:27:14,118 --> 01:27:23,149
system though so I guess what we do is

1532
01:27:19,340 --> 01:27:28,250
we just render the image as its own

1533
01:27:23,149 --> 01:27:31,848
depth peel as part of the depth field

1534
01:27:28,250 --> 01:27:36,559
process so I guess what we do is when

1535
01:27:31,849 --> 01:27:39,219
you get to the end so yeah okay this is

1536
01:27:36,559 --> 01:27:43,400
what we do so when we get to the end of

1537
01:27:39,219 --> 01:27:51,189
our depth peels we then render one

1538
01:27:43,399 --> 01:27:56,000
fullscreen quad that is the texture of

1539
01:27:51,189 --> 01:27:57,979
our pre render of the cubes right so we

1540
01:27:56,000 --> 01:27:59,929
render the cubes we have now a frame

1541
01:27:57,979 --> 01:28:03,799
buffer and depth buffer resolve that are

1542
01:27:59,929 --> 01:28:09,618
just simple 1920 by 1080 by four so very

1543
01:28:03,800 --> 01:28:12,199
small we render those in the pre pass we

1544
01:28:09,618 --> 01:28:14,210
then just composite those in when we're

1545
01:28:12,198 --> 01:28:16,399
doing our def peeling every time so we

1546
01:28:14,210 --> 01:28:21,288
just do one full screen quad to

1547
01:28:16,399 --> 01:28:23,420
basically like blip that in into the

1548
01:28:21,288 --> 01:28:26,840
depth peel so that it gets properly

1549
01:28:23,420 --> 01:28:29,079
sorted into that depth peel I think

1550
01:28:26,840 --> 01:28:32,270
that's the best way to do it

1551
01:28:29,079 --> 01:28:32,269
[Music]

1552
01:28:44,319 --> 01:28:49,019
I think that's probably the best way to

1553
01:28:46,689 --> 01:28:49,019
do it

1554
01:28:56,128 --> 01:29:03,658
I can't think of anything better than

1555
01:29:00,300 --> 01:29:05,429
that and it's pretty cheap right one

1556
01:29:03,658 --> 01:29:08,578
full screen blit on modern graphs cars

1557
01:29:05,429 --> 01:29:11,519
is actually fairly cheap and it's just

1558
01:29:08,578 --> 01:29:13,708
gonna run a simple fragment check so

1559
01:29:11,519 --> 01:29:21,079
basically like you know the this

1560
01:29:13,708 --> 01:29:21,078
fragment code here it's just going to do

1561
01:29:22,368 --> 01:29:41,819
this right it's just going to do that

1562
01:29:30,918 --> 01:29:44,269
that compare so does that work I think

1563
01:29:41,819 --> 01:29:44,268
it does

1564
01:29:50,289 --> 01:29:54,310
it seems off the complicated though

1565
01:29:52,289 --> 01:29:57,250
she's trying to think if there's some

1566
01:29:54,310 --> 01:29:59,440
simpler way to do this I can't really

1567
01:29:57,250 --> 01:30:01,029
think of anything simpler I mean I think

1568
01:29:59,439 --> 01:30:02,559
we basically have to split off the

1569
01:30:01,029 --> 01:30:07,960
rendering into things that require

1570
01:30:02,560 --> 01:30:22,210
multisample and things that don't so

1571
01:30:07,960 --> 01:30:26,130
here's here's a question I mean is it

1572
01:30:22,210 --> 01:30:31,029
smarter to just store the depth peels

1573
01:30:26,130 --> 01:30:34,779
depth values and then when we composite

1574
01:30:31,029 --> 01:30:42,789
just insert the cubes in where they

1575
01:30:34,779 --> 01:30:44,889
belong during the final composite and I

1576
01:30:42,789 --> 01:30:47,948
don't really know but you can see what

1577
01:30:44,890 --> 01:30:50,320
I'm getting at there hopefully when we

1578
01:30:47,948 --> 01:30:54,039
render these we're effectively going to

1579
01:30:50,319 --> 01:30:57,179
have you know five images if you will if

1580
01:30:54,039 --> 01:31:01,329
we just talk about the abstract content

1581
01:30:57,179 --> 01:31:02,949
one image is the 3d geometry which when

1582
01:31:01,329 --> 01:31:06,510
rendered through multi sampling without

1583
01:31:02,948 --> 01:31:09,069
any depth feels is just correct right

1584
01:31:06,510 --> 01:31:10,840
because or the solid geometry I should

1585
01:31:09,069 --> 01:31:15,460
say so stuff that doesn't have alpha in

1586
01:31:10,840 --> 01:31:18,520
it it's correct because the multi

1587
01:31:15,460 --> 01:31:22,000
sampling took care of the edge the

1588
01:31:18,520 --> 01:31:24,310
blending along the edges and so it's

1589
01:31:22,000 --> 01:31:28,000
just correct you know it's as good as

1590
01:31:24,310 --> 01:31:31,870
it's going to get so if we have that

1591
01:31:28,000 --> 01:31:35,140
image we then have our sprites and

1592
01:31:31,869 --> 01:31:37,689
things with you know that have partial

1593
01:31:35,140 --> 01:31:40,600
alpha so edges that are defined in the

1594
01:31:37,689 --> 01:31:44,979
bitmap or translucency so like or

1595
01:31:40,600 --> 01:31:45,880
transparency right we can kind of see

1596
01:31:44,979 --> 01:31:49,899
through them or see through them

1597
01:31:45,880 --> 01:31:53,949
partially when we do those those we are

1598
01:31:49,899 --> 01:31:57,549
constructing for peeled images of so

1599
01:31:53,948 --> 01:32:01,349
that we can blend them together at the

1600
01:31:57,550 --> 01:32:01,350
end and

1601
01:32:07,368 --> 01:32:13,779
I guess even as I'm saying that I'm

1602
01:32:10,069 --> 01:32:16,759
realizing why do we even need to do that

1603
01:32:13,779 --> 01:32:20,359
so probably we just did this for

1604
01:32:16,760 --> 01:32:26,659
expedience but if you think about it we

1605
01:32:20,359 --> 01:32:31,039
actually we actually don't need to do it

1606
01:32:26,658 --> 01:32:36,670
that way at all do we a depth peel can

1607
01:32:31,039 --> 01:32:46,250
do its blend when it's done right

1608
01:32:36,670 --> 01:32:48,819
because look at the compositor the

1609
01:32:46,250 --> 01:32:54,158
zeroeth peel which is the frontmost peel

1610
01:32:48,819 --> 01:32:57,198
right if once you know what that peel is

1611
01:32:54,158 --> 01:33:00,698
you know exactly how much alpha you have

1612
01:32:57,198 --> 01:33:00,698
left for the next peel

1613
01:33:08,250 --> 01:33:21,279
so if I'm not mistaken we really only

1614
01:33:14,170 --> 01:33:25,050
need to depth field buffers total no

1615
01:33:21,279 --> 01:33:27,880
matter how many passes you do right

1616
01:33:25,050 --> 01:33:30,279
because all you would need to do is just

1617
01:33:27,880 --> 01:33:32,440
render the first one when you render the

1618
01:33:30,279 --> 01:33:34,539
second one right after you're done

1619
01:33:32,439 --> 01:33:36,789
rendering it blend it back into the

1620
01:33:34,539 --> 01:33:39,488
first one using however much alpha is

1621
01:33:36,789 --> 01:33:42,550
left you then update the alpha channel

1622
01:33:39,488 --> 01:33:54,368
with the with the remaining alpha left

1623
01:33:42,550 --> 01:33:57,570
right and repeat the process I think

1624
01:33:54,368 --> 01:33:57,569
that's all there is to it

1625
01:33:59,010 --> 01:34:08,590
at least I'm pretty sure right so I

1626
01:34:05,198 --> 01:34:10,839
think actually now that we've kind of

1627
01:34:08,590 --> 01:34:11,980
worked this out maybe what we should do

1628
01:34:10,840 --> 01:34:14,380
we're kind of running out of time here

1629
01:34:11,979 --> 01:34:16,329
maybe what we should do tomorrow is say

1630
01:34:14,380 --> 01:34:20,829
let's convert our def peel render into

1631
01:34:16,329 --> 01:34:23,289
using only two depth fields and at that

1632
01:34:20,829 --> 01:34:27,609
point we would reduce our memory

1633
01:34:23,289 --> 01:34:30,389
footprint immediately by half which

1634
01:34:27,609 --> 01:34:30,389
would be a good start

1635
01:34:38,359 --> 01:34:44,039
and I guess I'm not sure it still seems

1636
01:34:42,119 --> 01:34:47,640
at that point it's not gonna be quite

1637
01:34:44,039 --> 01:34:49,199
small enough so you know again looking

1638
01:34:47,640 --> 01:34:51,300
at just trying to do the back of the

1639
01:34:49,199 --> 01:34:54,149
envelope here to get roughly what we

1640
01:34:51,300 --> 01:34:56,820
should have so if we were to take our

1641
01:34:54,149 --> 01:35:04,829
original equation here which looks like

1642
01:34:56,819 --> 01:35:06,239
this so I'm copying it back in so if we

1643
01:35:04,829 --> 01:35:10,619
take a look at this original equation

1644
01:35:06,239 --> 01:35:12,329
and we assume that there are four sets

1645
01:35:10,619 --> 01:35:16,019
of these and that's what was giving us

1646
01:35:12,329 --> 01:35:18,539
this if we drop down to two its 1.2

1647
01:35:16,020 --> 01:35:23,430
gigabytes which is still too high in my

1648
01:35:18,539 --> 01:35:26,760
opinion right so looking at where the

1649
01:35:23,430 --> 01:35:28,470
fat comes in you know this number I get

1650
01:35:26,760 --> 01:35:30,900
I said could be dropped down to eight

1651
01:35:28,470 --> 01:35:33,630
pretty trivially I think without a lot

1652
01:35:30,899 --> 01:35:36,779
of work that gets us under a gigabyte

1653
01:35:33,630 --> 01:35:39,300
still a little bit high and so the

1654
01:35:36,779 --> 01:35:45,929
question is can we reduce it further and

1655
01:35:39,300 --> 01:35:52,050
again I think the answer there is we can

1656
01:35:45,930 --> 01:35:54,210
drop it down to two a sum of two of

1657
01:35:52,050 --> 01:35:55,800
these by just changing the way that we

1658
01:35:54,210 --> 01:35:59,699
do the depth feel so instead of the

1659
01:35:55,800 --> 01:36:01,739
depth peel being multi sampled I think

1660
01:35:59,699 --> 01:36:04,470
we can we can condense the depth field

1661
01:36:01,739 --> 01:36:08,819
into being recording the multi samples

1662
01:36:04,470 --> 01:36:12,350
only for the past it's actually on and I

1663
01:36:08,819 --> 01:36:12,349
think that's probably fine

1664
01:36:16,479 --> 01:36:27,469
it may be a little loss of quality I

1665
01:36:19,069 --> 01:36:28,880
think that's probably fine I want to do

1666
01:36:27,470 --> 01:36:32,180
a quick check as the last thing we do

1667
01:36:28,880 --> 01:36:33,770
today so for a create frame buffer I'm

1668
01:36:32,180 --> 01:36:37,670
curious how many of these we actually

1669
01:36:33,770 --> 01:36:43,730
have so if you take a look at what we've

1670
01:36:37,670 --> 01:36:48,010
got here you can see that we have four

1671
01:36:43,729 --> 01:36:49,399
each depth feel we're creating either oh

1672
01:36:48,010 --> 01:36:56,150
what's this

1673
01:36:49,399 --> 01:36:57,859
death peel resolve buffer as well so

1674
01:36:56,149 --> 01:37:01,099
wait a minute are we already doing it

1675
01:36:57,859 --> 01:37:07,489
death perazol wait it's been a while

1676
01:37:01,100 --> 01:37:11,650
since we looked at this render so

1677
01:37:07,489 --> 01:37:11,649
actually we're doing the resolve already

1678
01:37:18,380 --> 01:37:25,440
so wait a minute if we're so did we just

1679
01:37:21,720 --> 01:37:33,690
not bother to throw away the set of

1680
01:37:25,439 --> 01:37:37,439
frame buffers we were using hold on if

1681
01:37:33,689 --> 01:37:41,549
we resolve at the end of every single

1682
01:37:37,439 --> 01:37:47,210
one of these then we don't need a

1683
01:37:41,550 --> 01:37:47,210
different one for each depth peel right

1684
01:37:49,279 --> 01:37:55,889
so if that's the case then like in here

1685
01:37:52,949 --> 01:37:59,429
right where we do the clearing each time

1686
01:37:55,890 --> 01:38:09,800
and we bind this buffer I guess I'm just

1687
01:37:59,430 --> 01:38:09,800
not sure can we just do this

1688
01:38:25,930 --> 01:38:35,630
I'm just gonna look at resolve

1689
01:38:27,770 --> 01:38:37,880
multisample so in here we say bind the

1690
01:38:35,630 --> 01:38:41,960
Fromm's def handle and the claret colour

1691
01:38:37,880 --> 01:38:46,810
handle and then we're going to begin the

1692
01:38:41,960 --> 01:38:46,810
screen on the two frame buffer handle

1693
01:38:53,998 --> 01:38:57,109
but is that

1694
01:38:59,579 --> 01:39:06,479
I guess what I don't quite understand

1695
01:39:01,409 --> 01:39:08,939
though is yeah it's in it's that's the

1696
01:39:06,479 --> 01:39:14,609
resolved buffer so I'm just curious if

1697
01:39:08,939 --> 01:39:19,219
we just do this so we're only ever using

1698
01:39:14,609 --> 01:39:19,219
the first one does that work

1699
01:39:25,109 --> 01:39:31,619
so hilariously we already had

1700
01:39:28,140 --> 01:39:35,640
implemented exactly what I just said we

1701
01:39:31,619 --> 01:39:38,880
should start with and as far as I can

1702
01:39:35,640 --> 01:39:41,750
tell I'm a zoom in on some overlapping

1703
01:39:38,880 --> 01:39:41,750
stuff here

1704
01:39:47,158 --> 01:39:59,488
that looks pretty darn good so I think

1705
01:39:54,020 --> 01:40:01,949
we can reduce our usage basically for

1706
01:39:59,488 --> 01:40:03,899
free right now because we already did

1707
01:40:01,948 --> 01:40:05,428
the work and just never bothered to

1708
01:40:03,899 --> 01:40:06,658
throw away these buffers probably

1709
01:40:05,429 --> 01:40:10,520
because we saved them just so we could

1710
01:40:06,658 --> 01:40:13,559
view them for debugging or something but

1711
01:40:10,520 --> 01:40:17,600
basically that means the depth peel

1712
01:40:13,560 --> 01:40:21,420
buffer here can just allocate only one

1713
01:40:17,600 --> 01:40:29,840
right so we would just do this

1714
01:40:21,420 --> 01:40:29,840
I want to say

1715
01:40:48,300 --> 01:40:54,119
again just going through and quickly

1716
01:40:50,770 --> 01:40:54,120
making this slight change

1717
01:41:04,708 --> 01:41:11,149
so I'm not sure if anyone uses get depth

1718
01:41:07,198 --> 01:41:16,428
peel read buffer looks like we do here

1719
01:41:11,149 --> 01:41:16,429
so in get depth peel read buffer

1720
01:41:24,380 --> 01:41:28,789
it looks like there's a slight issue

1721
01:41:26,569 --> 01:41:31,670
with this which is that if multi

1722
01:41:28,789 --> 01:41:33,739
samplings turned off maybe this doesn't

1723
01:41:31,670 --> 01:41:36,109
quite work and we might have to like do

1724
01:41:33,739 --> 01:41:40,849
a little bit of massaging to make that

1725
01:41:36,109 --> 01:41:44,889
happen so I guess I don't really know

1726
01:41:40,850 --> 01:41:44,890
but I think we want to do this

1727
01:42:06,119 --> 01:42:12,000
what with that why does that have to be

1728
01:42:09,449 --> 01:42:16,109
an address of that's a bit weird all

1729
01:42:12,000 --> 01:42:20,310
right okay so let's just try running

1730
01:42:16,109 --> 01:42:25,259
this so if I take a look at what's going

1731
01:42:20,310 --> 01:42:27,240
on now I mean I don't know that image

1732
01:42:25,260 --> 01:42:29,039
looks pretty high-quality to me I don't

1733
01:42:27,239 --> 01:42:34,529
see really much in the way of

1734
01:42:29,039 --> 01:42:39,510
degradation there and everything seems

1735
01:42:34,529 --> 01:42:44,609
to still be running correctly right so

1736
01:42:39,510 --> 01:42:47,550
if we take a look at our render usage

1737
01:42:44,609 --> 01:42:49,979
here in theory we dropped I think it was

1738
01:42:47,550 --> 01:42:52,829
three points something before and now

1739
01:42:49,979 --> 01:42:56,909
it's two right so in theory that got us

1740
01:42:52,829 --> 01:42:58,409
down already just just doing that if we

1741
01:42:56,909 --> 01:43:00,149
turn off request vsync I'm just curious

1742
01:42:58,409 --> 01:43:02,869
what our frame rate is probably didn't

1743
01:43:00,149 --> 01:43:02,869
change much but

1744
01:43:07,069 --> 01:43:13,019
yeah didn't really forget effective that

1745
01:43:09,270 --> 01:43:15,330
much but so that's pretty weird and wild

1746
01:43:13,020 --> 01:43:17,520
but it looks like we kind of got some of

1747
01:43:15,329 --> 01:43:19,260
that for free now in terms of where this

1748
01:43:17,520 --> 01:43:22,830
two gigabytes coming from I'd like to

1749
01:43:19,260 --> 01:43:24,539
kind of know roughly what that value

1750
01:43:22,829 --> 01:43:27,359
actually is and so I'm gonna step

1751
01:43:24,539 --> 01:43:30,000
through the code real quick as the last

1752
01:43:27,359 --> 01:43:36,899
thing we'll do today just to understand

1753
01:43:30,000 --> 01:43:40,170
what's going on there so I'm going to

1754
01:43:36,899 --> 01:43:42,739
take a break point in create frame

1755
01:43:40,170 --> 01:43:48,859
buffer I don't know if it's create frame

1756
01:43:42,739 --> 01:43:48,859
buffer cap I think it might be actually

1757
01:43:51,710 --> 01:44:02,600
create frame buffer lower case all right

1758
01:43:59,210 --> 01:44:07,380
so I want to take a look at this code

1759
01:44:02,600 --> 01:44:11,100
here and what I want to do is just see

1760
01:44:07,380 --> 01:44:14,250
how much memory it thinks it's using so

1761
01:44:11,100 --> 01:44:18,360
if we take a look at the result here it

1762
01:44:14,250 --> 01:44:24,090
should start off at zero and does we add

1763
01:44:18,359 --> 01:44:25,289
in one of the color buffers right and so

1764
01:44:24,090 --> 01:44:26,460
we would expect that I'm gonna just

1765
01:44:25,289 --> 01:44:28,710
double check with the width and height

1766
01:44:26,460 --> 01:44:32,189
all right yeah so we would expect that

1767
01:44:28,710 --> 01:44:34,859
to be 1920 by 1080 and we would expect

1768
01:44:32,189 --> 01:44:40,729
it to currently it's it's float right

1769
01:44:34,859 --> 01:44:40,729
I'm assuming oh this is not float

1770
01:44:43,810 --> 01:44:51,560
so this is our resolve buffer which is

1771
01:44:46,880 --> 01:44:58,550
the actual screen one so never mind that

1772
01:44:51,560 --> 01:45:00,199
let's just step out of here so the

1773
01:44:58,550 --> 01:45:05,210
OpenGL resolve buffer should be a

1774
01:45:00,198 --> 01:45:12,439
negligible size and let's just make sure

1775
01:45:05,210 --> 01:45:16,340
it is so 1920 by 1080 for why is that

1776
01:45:12,439 --> 01:45:19,609
that seems too large for the resolve

1777
01:45:16,340 --> 01:45:23,750
frame buffer so I guess I do want to

1778
01:45:19,609 --> 01:45:25,960
step in there sorry what's going on

1779
01:45:23,750 --> 01:45:25,960
there

1780
01:45:37,420 --> 01:45:46,079
what can I set this breakpoint oh yeah

1781
01:45:47,279 --> 01:45:50,279
what

1782
01:45:56,078 --> 01:46:01,408
did I do something I'm getting all

1783
01:45:58,840 --> 01:46:01,409
confused here

1784
01:46:07,899 --> 01:46:14,679
oh you know what I just realized I

1785
01:46:10,170 --> 01:46:18,640
wonder if that's what was happening we I

1786
01:46:14,680 --> 01:46:22,210
wonder if because we set that directory

1787
01:46:18,640 --> 01:46:27,490
incorrectly because we changed it from

1788
01:46:22,210 --> 01:46:29,170
handmade data didn't we you know what I

1789
01:46:27,489 --> 01:46:30,789
wonder if I've been her min the whole

1790
01:46:29,170 --> 01:46:33,970
time or Herbert the whole time here I

1791
01:46:30,789 --> 01:46:37,390
don't actually know they still shouldn't

1792
01:46:33,970 --> 01:46:40,329
have crashed but it's probably that's

1793
01:46:37,390 --> 01:46:43,810
probably what happened so in here I

1794
01:46:40,329 --> 01:46:45,550
think when we set this up originally the

1795
01:46:43,810 --> 01:46:48,580
problem was we changed our working

1796
01:46:45,550 --> 01:46:53,739
directory so our working directory is

1797
01:46:48,579 --> 01:46:56,920
this now oh man so we could totally have

1798
01:46:53,739 --> 01:47:00,699
profiled this ah that's that's an Al

1799
01:46:56,920 --> 01:47:03,880
shame so basically like I don't know why

1800
01:47:00,699 --> 01:47:05,710
they didn't say we crashed but I guess

1801
01:47:03,880 --> 01:47:07,600
it was probably just that we were I

1802
01:47:05,710 --> 01:47:09,489
don't know sending something down bogus

1803
01:47:07,600 --> 01:47:10,690
when we don't have our working directory

1804
01:47:09,489 --> 01:47:13,929
set up properly

1805
01:47:10,689 --> 01:47:16,599
we probably like called something that

1806
01:47:13,930 --> 01:47:21,460
they didn't like and so we crashed them

1807
01:47:16,600 --> 01:47:25,600
before we got to a point where where our

1808
01:47:21,460 --> 01:47:31,989
app would crash or something right but

1809
01:47:25,600 --> 01:47:33,970
but yeah okay so let's now let's see if

1810
01:47:31,989 --> 01:47:37,809
we can actually verify our numbers at

1811
01:47:33,970 --> 01:47:39,400
all here I don't really need the

1812
01:47:37,810 --> 01:47:41,580
performance counters at the moment thank

1813
01:47:39,399 --> 01:47:41,579
you

1814
01:47:56,960 --> 01:47:59,619
oops

1815
01:48:07,279 --> 01:48:17,329
okay so actually we're fine so let's go

1816
01:48:14,449 --> 01:48:19,220
now and see if we can get it to tell us

1817
01:48:17,329 --> 01:48:21,350
how much memory we're using on the GPU

1818
01:48:19,220 --> 01:48:23,750
so that we can corroborate that number a

1819
01:48:21,350 --> 01:48:24,980
little bit and we're not counting the

1820
01:48:23,750 --> 01:48:30,170
text remember yet so we should probably

1821
01:48:24,979 --> 01:48:31,759
add that in there but anyway let me go

1822
01:48:30,170 --> 01:48:32,989
ahead and do what I was doing step two

1823
01:48:31,760 --> 01:48:35,030
and then we're gonna run through insight

1824
01:48:32,989 --> 01:48:38,300
at least once and get that information

1825
01:48:35,029 --> 01:48:40,670
so if we take a look in here like I said

1826
01:48:38,300 --> 01:48:44,239
I wasn't sure why this was so large so

1827
01:48:40,670 --> 01:48:46,460
ah I see what the problem is we're using

1828
01:48:44,239 --> 01:48:49,309
OpenGL max multics sample count even if

1829
01:48:46,460 --> 01:48:51,800
multi sampling is not enabled right and

1830
01:48:49,310 --> 01:48:52,900
that's that's wrong so that that's the

1831
01:48:51,800 --> 01:48:57,110
problem right there

1832
01:48:52,899 --> 01:48:59,779
so we're over counting four buffers that

1833
01:48:57,109 --> 01:49:02,059
actually aren't being used for multi

1834
01:48:59,779 --> 01:49:04,399
sampling so what we want here is multi

1835
01:49:02,060 --> 01:49:07,150
sampled we should actually take the

1836
01:49:04,399 --> 01:49:07,149
sample count here

1837
01:49:18,960 --> 01:49:24,130
like so and that way we can say okay

1838
01:49:22,630 --> 01:49:27,609
let's just multiply by the sample count

1839
01:49:24,130 --> 01:49:29,770
and we now know that that is set

1840
01:49:27,609 --> 01:49:34,329
properly depending on which one they ask

1841
01:49:29,770 --> 01:49:37,660
for and we won't over count like the

1842
01:49:34,329 --> 01:49:39,609
frame buffer the regular actual like

1843
01:49:37,659 --> 01:49:41,949
thing we display on the screen that

1844
01:49:39,609 --> 01:49:46,229
won't get counted as that wanting multi

1845
01:49:41,949 --> 01:49:50,949
sampling right okay so now we should see

1846
01:49:46,229 --> 01:50:03,250
hopefully we should see this frame

1847
01:49:50,949 --> 01:50:19,470
buffer as a much more normal size here

1848
01:50:03,250 --> 01:50:19,470
we can't inspect any values and step out

1849
01:50:23,198 --> 01:50:27,979
there we go so now I think we're

1850
01:50:26,270 --> 01:50:29,750
computing these values more correctly

1851
01:50:27,979 --> 01:50:31,639
let's take a look at one of the ones

1852
01:50:29,750 --> 01:50:37,189
that does have stuff turned on so here

1853
01:50:31,640 --> 01:50:41,150
is a sample count of 16 probably right

1854
01:50:37,189 --> 01:50:45,829
and so in here when we sum these up what

1855
01:50:41,149 --> 01:50:53,869
we would expect to see is 1920 by 1080

1856
01:50:45,829 --> 01:50:58,340
times 4 I'm sorry times 16 times 16 for

1857
01:50:53,869 --> 01:51:02,238
the color buffer plus 1920 at 1080 times

1858
01:50:58,340 --> 01:51:06,140
4 times 16 for the flip for the depth

1859
01:51:02,238 --> 01:51:08,238
buffer something like this right and

1860
01:51:06,140 --> 01:51:14,199
let's see if that's at all what we

1861
01:51:08,238 --> 01:51:17,119
actually saw did I do that wrong

1862
01:51:14,198 --> 01:51:20,809
actually 20 times 10 8 times 16 times 16

1863
01:51:17,119 --> 01:51:28,429
plus 19 21 I've seen attempts 4 times 16

1864
01:51:20,810 --> 01:51:31,449
I think that's correct let me do it

1865
01:51:28,429 --> 01:51:31,449
speed crunch first

1866
01:51:34,899 --> 01:51:37,899
hmm

1867
01:51:43,368 --> 01:51:48,250
so I'm not sure how it got this value

1868
01:51:49,630 --> 01:51:55,510
and or how I'm getting the wrong value

1869
01:51:57,010 --> 01:52:02,150
so I guess I'll double-check my

1870
01:51:59,300 --> 01:52:09,110
assumptions is float so this is not

1871
01:52:02,149 --> 01:52:13,368
float so that's the that's the reason

1872
01:52:09,109 --> 01:52:18,069
this is a non float multi sampled frame

1873
01:52:13,368 --> 01:52:18,069
buffer what who is asking for this

1874
01:52:33,719 --> 01:52:41,550
I'm sorry I my death feel flags so who

1875
01:52:39,930 --> 01:52:43,949
is asking for this and I thought we were

1876
01:52:41,550 --> 01:52:49,199
asking for float did we turn off float

1877
01:52:43,948 --> 01:53:06,448
usage or something like this add FP of

1878
01:52:49,198 --> 01:53:08,988
flags of five in the renderer I would

1879
01:53:06,448 --> 01:53:18,238
agree that does not appear to have

1880
01:53:08,988 --> 01:53:21,738
floating point turned on so actually so

1881
01:53:18,238 --> 01:53:25,139
actually that computation is correct so

1882
01:53:21,738 --> 01:53:26,849
we're not using float then how are we

1883
01:53:25,140 --> 01:53:28,199
adding up to such a large number if

1884
01:53:26,850 --> 01:53:28,829
we're not using float it should be

1885
01:53:28,198 --> 01:53:35,698
smaller

1886
01:53:28,829 --> 01:53:37,859
where are the depth feel flags yeah so

1887
01:53:35,698 --> 01:53:41,939
it's not actually using a floating point

1888
01:53:37,859 --> 01:53:44,429
frame buffer interesting so how are we

1889
01:53:41,939 --> 01:53:48,509
getting such a large number then let's

1890
01:53:44,430 --> 01:53:51,440
let's keep going at this so I'm gonna

1891
01:53:48,510 --> 01:53:51,440
return the result here

1892
01:53:55,649 --> 01:54:06,670
if I look at open Jill Deppe she'll

1893
01:54:01,779 --> 01:54:10,029
buffer that's less than I was thinking

1894
01:54:06,670 --> 01:54:12,250
we're going to make four more of those

1895
01:54:10,029 --> 01:54:13,809
so we should how yeah it doesn't seem

1896
01:54:12,250 --> 01:54:16,569
like we should be getting to two

1897
01:54:13,810 --> 01:54:22,270
gigabytes this way it should be like one

1898
01:54:16,569 --> 01:54:27,429
gigabyte right because it's not using

1899
01:54:22,270 --> 01:54:28,210
float for anything there except maybe

1900
01:54:27,430 --> 01:54:31,450
the depth field

1901
01:54:28,210 --> 01:54:33,670
I guess the Deaf peeled buffer all right

1902
01:54:31,449 --> 01:54:39,849
so that's a bit odd let's take a look at

1903
01:54:33,670 --> 01:54:42,850
OpenGL total or sorry header and take a

1904
01:54:39,850 --> 01:54:45,789
look here right so there's the total

1905
01:54:42,850 --> 01:54:51,990
memory and it's going to go up now one

1906
01:54:45,789 --> 01:54:51,989
two three four and that's it

1907
01:54:56,670 --> 01:55:03,000
so that number just is not commensurate

1908
01:54:59,399 --> 01:55:08,189
with what we were seeing and I think is

1909
01:55:03,000 --> 01:55:18,810
there some other no I see it so if we

1910
01:55:08,189 --> 01:55:28,949
say 347 oh 400 divided by 1024 x 1024 x

1911
01:55:18,810 --> 01:55:32,330
94 my miss counting the zero is there am

1912
01:55:28,949 --> 01:55:40,349
I going crazy that to me looks like 340

1913
01:55:32,329 --> 01:55:49,380
million how is that getting three oh wow

1914
01:55:40,350 --> 01:55:56,880
what a typo so that is actually quite

1915
01:55:49,380 --> 01:55:59,789
low do we have the same typo in our

1916
01:55:56,880 --> 01:56:03,900
printf somehow how is so how is it

1917
01:55:59,789 --> 01:56:05,010
printing out such a high number or is it

1918
01:56:03,899 --> 01:56:06,239
not printing out such a high number

1919
01:56:05,010 --> 01:56:07,770
anymore but I thought it's putting out

1920
01:56:06,239 --> 01:56:15,179
like two megabytes or something are two

1921
01:56:07,770 --> 01:56:17,220
gigabytes right no okay so I guess we

1922
01:56:15,180 --> 01:56:20,250
just didn't recheck it after doing that

1923
01:56:17,220 --> 01:56:21,900
or something okay so now we've we've

1924
01:56:20,250 --> 01:56:24,869
drastically reduced it I didn't realize

1925
01:56:21,899 --> 01:56:26,759
we weren't using float so we're much

1926
01:56:24,869 --> 01:56:27,989
better now we've like drastically

1927
01:56:26,760 --> 01:56:29,909
reduced the amount of frame buffer

1928
01:56:27,989 --> 01:56:34,050
memory we're using because again now we

1929
01:56:29,909 --> 01:56:36,119
don't actually store those huge multi

1930
01:56:34,050 --> 01:56:38,520
sample buffers for every deaf peel for

1931
01:56:36,119 --> 01:56:40,500
no reason so we've reduced we've gotten

1932
01:56:38,520 --> 01:56:43,650
rid of that multiply by four that was

1933
01:56:40,500 --> 01:56:47,039
happening there so that's actually a

1934
01:56:43,649 --> 01:56:48,779
good yeah a good start and we were over

1935
01:56:47,039 --> 01:56:50,519
counting before so we weren't as bad as

1936
01:56:48,779 --> 01:56:53,639
we thought because we were multiplying

1937
01:56:50,520 --> 01:56:55,680
by 16 every time instead of only the

1938
01:56:53,640 --> 01:56:57,180
times what it actually was turned on so

1939
01:56:55,680 --> 01:57:01,950
that was drastically inflating our

1940
01:56:57,180 --> 01:57:04,140
number but so now now at least on this

1941
01:57:01,949 --> 01:57:05,760
GPU we can still do better than that but

1942
01:57:04,140 --> 01:57:07,980
now on this GPU I'm not worried about

1943
01:57:05,760 --> 01:57:10,260
that anymore we can keep going at that

1944
01:57:07,979 --> 01:57:11,819
level and that's totally fine so

1945
01:57:10,260 --> 01:57:16,710
is actually a surprise mission

1946
01:57:11,819 --> 01:57:18,239
accomplished in a sense and now what I'd

1947
01:57:16,710 --> 01:57:20,010
like to do is just take a look at what

1948
01:57:18,239 --> 01:57:23,130
open jail actually thinks is going on if

1949
01:57:20,010 --> 01:57:25,289
we can so I'm gonna I'm gonna now take

1950
01:57:23,130 --> 01:57:26,730
it just a quick look at that insight

1951
01:57:25,289 --> 01:57:32,460
that I wasn't able to do before because

1952
01:57:26,729 --> 01:57:33,779
we had set the value wrong just the

1953
01:57:32,460 --> 01:57:35,069
working directory wrong we should just

1954
01:57:33,779 --> 01:57:36,509
put in something that pops up a message

1955
01:57:35,069 --> 01:57:38,159
if the working directory is wrong

1956
01:57:36,510 --> 01:57:40,530
because I don't know what actually

1957
01:57:38,159 --> 01:57:45,720
happens when you do that in fact let's

1958
01:57:40,529 --> 01:57:48,840
find out should just find out at some

1959
01:57:45,720 --> 01:57:51,380
point all right so let's run this

1960
01:57:48,840 --> 01:57:55,170
through insight see what it has to say

1961
01:57:51,380 --> 01:57:58,050
also I think we can turn on the

1962
01:57:55,170 --> 01:58:01,050
profiling options as well so like if we

1963
01:57:58,050 --> 01:58:02,789
go in here and we try to be the launch

1964
01:58:01,050 --> 01:58:04,619
frame profiler I think it will tell us

1965
01:58:02,789 --> 01:58:10,229
that it can't access the GPU counters or

1966
01:58:04,619 --> 01:58:12,750
whatever so we'll see but if we turn

1967
01:58:10,229 --> 01:58:14,669
vsync off as well so you know let me go

1968
01:58:12,750 --> 01:58:21,239
in here and see about asking for vsync

1969
01:58:14,670 --> 01:58:23,460
off right so here's the information

1970
01:58:21,239 --> 01:58:28,109
about how many milliseconds per frame it

1971
01:58:23,460 --> 01:58:34,289
thinks we're using and there's me

1972
01:58:28,109 --> 01:58:36,389
hopping along and so not a horrible

1973
01:58:34,289 --> 01:58:39,779
render time but not great I mean we can

1974
01:58:36,390 --> 01:58:43,100
improve it certainly but you know let's

1975
01:58:39,779 --> 01:58:46,050
go ahead and and see if we can't get a

1976
01:58:43,100 --> 01:58:48,870
capture for live analysis on here okay

1977
01:58:46,050 --> 01:58:50,250
so here's the problem so this is the

1978
01:58:48,869 --> 01:58:51,479
thing I was talking about where we don't

1979
01:58:50,250 --> 01:58:54,840
have permission to access the GPU

1980
01:58:51,479 --> 01:58:56,459
performance counters so if I remember

1981
01:58:54,840 --> 01:58:59,190
correctly this is actually pretty

1982
01:58:56,460 --> 01:59:00,300
trivial trivial to enable though you

1983
01:58:59,189 --> 01:59:02,489
have to do much do you have to install

1984
01:59:00,300 --> 01:59:03,930
like special drivers or anything so if

1985
01:59:02,489 --> 01:59:05,880
you want to be able to access the the

1986
01:59:03,930 --> 01:59:09,289
performance profilers I believe you just

1987
01:59:05,880 --> 01:59:09,289
go into your settings

1988
01:59:13,319 --> 01:59:19,539
here we go I believe you just go into

1989
01:59:16,600 --> 01:59:22,090
your settings and turn on the developer

1990
01:59:19,539 --> 01:59:25,180
settings on the driver and they allow

1991
01:59:22,090 --> 01:59:27,430
you to enable these so I think for those

1992
01:59:25,180 --> 01:59:29,350
of you watching at home I think we can

1993
01:59:27,430 --> 01:59:32,409
just do something like this and get

1994
01:59:29,350 --> 01:59:33,850
access to those it's not like with vtune

1995
01:59:32,409 --> 01:59:37,239
or something where sometimes there are

1996
01:59:33,850 --> 01:59:40,840
some hoops to jump through but so on

1997
01:59:37,239 --> 01:59:42,369
here you can just go to enable developer

1998
01:59:40,840 --> 01:59:45,850
settings like that

1999
01:59:42,369 --> 01:59:48,430
and then you get additional features in

2000
01:59:45,850 --> 01:59:55,810
here you open this up and you can say

2001
01:59:48,430 --> 01:59:57,220
allow access like so hopefully you can

2002
01:59:55,810 --> 01:59:59,890
still see the stream let me double check

2003
01:59:57,220 --> 02:00:04,090
to make sure that didn't Bogart anybody

2004
01:59:59,890 --> 02:00:06,550
yeah okay right so now you have access

2005
02:00:04,090 --> 02:00:08,710
to the performance the the GPU

2006
02:00:06,550 --> 02:00:13,710
performance counters can be accessed by

2007
02:00:08,710 --> 02:00:18,340
our you know tools that we run and so

2008
02:00:13,710 --> 02:00:23,399
now I think maybe possibly if I relaunch

2009
02:00:18,340 --> 02:00:23,400
I know why it thinks it crashed there

2010
02:00:25,979 --> 02:00:32,909
there we go let me try running it again

2011
02:00:29,220 --> 02:00:34,560
and we'll see if it can actually avoid

2012
02:00:32,909 --> 02:00:46,639
that error message so let me launch the

2013
02:00:34,560 --> 02:00:46,640
profiler and I think now we're okay this

2014
02:00:47,659 --> 02:00:53,729
don't know where insight went it seems

2015
02:00:51,000 --> 02:00:59,340
to have disappeared which is not

2016
02:00:53,729 --> 02:01:07,409
reassuring yeah so that didn't go so

2017
02:00:59,340 --> 02:01:07,650
well if we're honest about it try that

2018
02:01:07,409 --> 02:01:09,619
one more time

2019
02:01:07,649 --> 02:01:13,049
[Music]

2020
02:01:09,619 --> 02:01:15,059
okay so work that time maybe we'd said

2021
02:01:13,050 --> 02:01:20,329
to restart after changing the driver

2022
02:01:15,060 --> 02:01:23,010
settings all right so once we're done

2023
02:01:20,329 --> 02:01:26,479
getting this all configured I assume we

2024
02:01:23,010 --> 02:01:32,090
can do a capture for live analysis and

2025
02:01:26,479 --> 02:01:32,089
take a look there we go

2026
02:01:33,260 --> 02:01:40,050
here is the readout of all of the open

2027
02:01:36,720 --> 02:01:43,800
gels stuff we've got right and if we

2028
02:01:40,050 --> 02:01:45,900
take a look at the the profiler view

2029
02:01:43,800 --> 02:01:48,770
here we can see that it tries to it

2030
02:01:45,899 --> 02:01:52,619
tries to give us some information about

2031
02:01:48,770 --> 02:01:56,430
who took what time and where right I'm

2032
02:01:52,619 --> 02:01:59,279
actually more interested just as a you

2033
02:01:56,430 --> 02:02:02,659
know quick look into what's going on if

2034
02:01:59,279 --> 02:02:06,149
there is a way to get a total amount of

2035
02:02:02,659 --> 02:02:09,539
GPU memory committed as a part of this

2036
02:02:06,149 --> 02:02:11,339
right just because like I saying it

2037
02:02:09,539 --> 02:02:13,649
would be nice to validate our numbers

2038
02:02:11,340 --> 02:02:16,800
those are just numbers we made up by

2039
02:02:13,649 --> 02:02:19,679
counting ourselves but it would be best

2040
02:02:16,800 --> 02:02:22,890
if it could tell us hey here's how much

2041
02:02:19,680 --> 02:02:27,390
memory we think you're using know what

2042
02:02:22,890 --> 02:02:29,720
this is here I stare a red flag oh it's

2043
02:02:27,390 --> 02:02:29,720
just that

2044
02:02:34,119 --> 02:02:44,289
but I don't see much like like this is I

2045
02:02:41,920 --> 02:02:47,590
believe just telling us how much like

2046
02:02:44,289 --> 02:02:49,479
throughput there was I don't think

2047
02:02:47,590 --> 02:02:52,449
that's telling us like how much total

2048
02:02:49,479 --> 02:02:54,909
we've we've added we look that we had in

2049
02:02:52,449 --> 02:02:56,349
there so I'm not sure you have to

2050
02:02:54,909 --> 02:02:59,649
forgive me for not knowing my way around

2051
02:02:56,350 --> 02:03:03,510
insight as well as I probably should I'm

2052
02:02:59,649 --> 02:03:07,659
not seeing a whole lot of information

2053
02:03:03,510 --> 02:03:11,500
about that like here's the API

2054
02:03:07,659 --> 02:03:13,180
statistics but it doesn't really it just

2055
02:03:11,500 --> 02:03:15,729
says how much time was spent in there

2056
02:03:13,180 --> 02:03:19,240
doesn't say like how much memory they

2057
02:03:15,729 --> 02:03:21,519
ended up allocating out here we've got

2058
02:03:19,239 --> 02:03:23,289
again a good layout of the time taken to

2059
02:03:21,520 --> 02:03:26,560
view things again not really what I was

2060
02:03:23,289 --> 02:03:30,420
looking for and presumably this is just

2061
02:03:26,560 --> 02:03:30,420
based on oops

2062
02:03:31,529 --> 02:03:35,880
which one of these I select right

2063
02:03:38,300 --> 02:03:43,070
I've seemed to have got it thoroughly

2064
02:03:40,309 --> 02:03:44,599
confused there okay so if I select one

2065
02:03:43,069 --> 02:03:47,948
of those right it's gonna show me that

2066
02:03:44,599 --> 02:03:50,510
the statistics for this particular call

2067
02:03:47,948 --> 02:04:01,248
and it's not really what I wanted to

2068
02:03:50,510 --> 02:04:03,079
know so I don't see sadly I don't see a

2069
02:04:01,248 --> 02:04:07,639
good way get totals you can see here

2070
02:04:03,078 --> 02:04:10,719
right there is a memory value that's on

2071
02:04:07,639 --> 02:04:14,630
there but it doesn't tell me like a

2072
02:04:10,719 --> 02:04:18,828
combined memory value that just says

2073
02:04:14,630 --> 02:04:21,109
like everything and you know it's

2074
02:04:18,828 --> 02:04:23,420
probably not the most fun thing in the

2075
02:04:21,109 --> 02:04:27,529
world to scroll through through these

2076
02:04:23,420 --> 02:04:29,118
and ask for each one you can see the DEF

2077
02:04:27,529 --> 02:04:38,469
peels are now only taking 8 megabytes

2078
02:04:29,118 --> 02:04:43,268
that was really nice I I would say I oh

2079
02:04:38,469 --> 02:04:43,269
no that's that's what we expect I guess

2080
02:04:45,248 --> 02:04:47,880
yeah

2081
02:04:59,090 --> 02:05:06,440
so looking at the frame buffers

2082
02:05:00,800 --> 02:05:07,970
themselves I guess though those are not

2083
02:05:06,439 --> 02:05:14,869
frame buffers those are buffers it's got

2084
02:05:07,970 --> 02:05:26,420
the drawables unsurprising there yeah so

2085
02:05:14,869 --> 02:05:33,409
I don't know here's a that's a bunch of

2086
02:05:26,420 --> 02:05:36,369
unrelated stuff so I can't even find I

2087
02:05:33,409 --> 02:05:38,750
guess there we go so these are our

2088
02:05:36,369 --> 02:05:40,000
actual front look at our actual drawing

2089
02:05:38,750 --> 02:05:43,630
buffers

2090
02:05:40,000 --> 02:05:43,630
there's the depth buffer

2091
02:05:49,779 --> 02:06:00,139
with the multi sampling right yes so I

2092
02:05:57,649 --> 02:06:03,050
don't actually know any way to get this

2093
02:06:00,139 --> 02:06:04,340
to sum them for me but it looks like it

2094
02:06:03,050 --> 02:06:06,769
would add up to roughly the same amount

2095
02:06:04,340 --> 02:06:08,659
because right you've got two buffers

2096
02:06:06,769 --> 02:06:11,659
here each of which are 128 megabytes

2097
02:06:08,658 --> 02:06:13,248
that's 256 megabytes and then you've got

2098
02:06:11,658 --> 02:06:15,618
like some stragglers here that

2099
02:06:13,248 --> 02:06:19,788
presumably as you add it up enough of

2100
02:06:15,618 --> 02:06:22,639
those you get up more towards the 300

2101
02:06:19,788 --> 02:06:25,458
megabyte range when you count the final

2102
02:06:22,639 --> 02:06:28,880
resolved buffer and all that stuff so I

2103
02:06:25,458 --> 02:06:34,510
guess seems like it correlates at least

2104
02:06:28,880 --> 02:06:40,969
close probably not to too far off anyway

2105
02:06:34,510 --> 02:06:44,208
I would say I'm seeing one less than I

2106
02:06:40,969 --> 02:06:46,819
expect to see because I like to see the

2107
02:06:44,208 --> 02:06:50,719
final resolved buffer in here I don't

2108
02:06:46,819 --> 02:06:54,648
see it which is weird

2109
02:06:50,719 --> 02:06:56,719
you know what I'm saying so I don't know

2110
02:06:54,649 --> 02:06:59,119
this isn't perfect view I would like

2111
02:06:56,719 --> 02:07:01,368
something better if we look at the

2112
02:06:59,118 --> 02:07:06,880
actual just regular profile view in here

2113
02:07:01,368 --> 02:07:10,188
we can see it I don't quite know why

2114
02:07:06,880 --> 02:07:13,609
there's like a bit I can't see off the

2115
02:07:10,189 --> 02:07:14,689
end that seems less than good I don't

2116
02:07:13,609 --> 02:07:17,708
know if that's just because it's docked

2117
02:07:14,689 --> 02:07:17,709
weirdly or something

2118
02:07:19,899 --> 02:07:26,000
now it seems like that's just that's

2119
02:07:23,899 --> 02:07:27,409
just how that's just it's just drawing

2120
02:07:26,000 --> 02:07:29,930
it as a tiny little thing and you have

2121
02:07:27,409 --> 02:07:33,199
to zoom in in order to scroll it so

2122
02:07:29,930 --> 02:07:36,020
that's how that's by design back over

2123
02:07:33,199 --> 02:07:36,670
here so actually that's not where that

2124
02:07:36,020 --> 02:07:41,180
went

2125
02:07:36,670 --> 02:07:44,350
right so you know looking at this you

2126
02:07:41,180 --> 02:07:47,380
can see the the time is spread sort of

2127
02:07:44,350 --> 02:07:50,060
exactly as we would expect I guess I

2128
02:07:47,380 --> 02:07:51,859
think like that's the first FPL second

2129
02:07:50,060 --> 02:07:56,150
FPO third death peel forth death peel

2130
02:07:51,859 --> 02:08:00,139
right and so each each depth peel takes

2131
02:07:56,149 --> 02:08:03,710
one millisecond to draw us to four

2132
02:08:00,140 --> 02:08:06,950
milliseconds total and then we've got

2133
02:08:03,710 --> 02:08:08,840
you know some some extra stuff in here

2134
02:08:06,949 --> 02:08:12,529
for like prepping and clearing and stuff

2135
02:08:08,840 --> 02:08:20,119
like that see what this is why so that

2136
02:08:12,529 --> 02:08:22,489
that must be submitting that so it kind

2137
02:08:20,119 --> 02:08:24,680
of looks like if that really is taking

2138
02:08:22,489 --> 02:08:27,590
all that time it looks like we could

2139
02:08:24,680 --> 02:08:29,210
actually save a non-trivial like not

2140
02:08:27,590 --> 02:08:33,110
huge but natural amount of time by

2141
02:08:29,210 --> 02:08:35,390
submitting the vertex buffer more

2142
02:08:33,109 --> 02:08:36,859
cleanly because it looks like it thinks

2143
02:08:35,390 --> 02:08:41,119
it has two retransform it every time

2144
02:08:36,859 --> 02:08:42,920
also I'm just looking at that and that's

2145
02:08:41,119 --> 02:08:45,260
probably an OpenGL thing right because

2146
02:08:42,920 --> 02:08:47,300
we didn't we didn't lock it down and say

2147
02:08:45,260 --> 02:08:49,190
hey look we're not touching this so I

2148
02:08:47,300 --> 02:08:52,220
think it has to retransmitted every time

2149
02:08:49,189 --> 02:08:55,189
so that we could save you know a

2150
02:08:52,220 --> 02:08:56,990
millisecond or something off of our time

2151
02:08:55,189 --> 02:08:58,489
which would not be insignificant but if

2152
02:08:56,989 --> 02:09:01,399
you look at it like the actual drawing

2153
02:08:58,489 --> 02:09:07,550
time I feel like these here just looking

2154
02:09:01,399 --> 02:09:09,409
at that at those at those vertex base

2155
02:09:07,550 --> 02:09:11,690
calls I don't I don't see any reason why

2156
02:09:09,409 --> 02:09:13,939
you would be paying that larger price

2157
02:09:11,689 --> 02:09:15,619
for those so I feel like we could go in

2158
02:09:13,939 --> 02:09:18,859
and get rid of a little of that fat too

2159
02:09:15,619 --> 02:09:22,519
in here if I look at in fact maybe it'll

2160
02:09:18,859 --> 02:09:25,779
tell me too if I look at where it's

2161
02:09:22,520 --> 02:09:25,780
actually spending the time there

2162
02:09:35,279 --> 02:09:38,729
so maybe I don't know maybe that's not

2163
02:09:37,140 --> 02:09:43,550
maybe that's not what that's telling me

2164
02:09:38,729 --> 02:09:43,549
I'm not sure but you know if I just look

2165
02:09:46,130 --> 02:09:55,890
if I just look at it it feels like it

2166
02:09:54,090 --> 02:09:57,420
feels like we could save time there by

2167
02:09:55,890 --> 02:10:00,420
just telling it look these are this is

2168
02:09:57,420 --> 02:10:04,050
the same thing you can pre transform it

2169
02:10:00,420 --> 02:10:05,850
once into temporary memory and not have

2170
02:10:04,050 --> 02:10:08,630
to ever run any of those shaders again I

2171
02:10:05,850 --> 02:10:11,190
don't know that might not really matter

2172
02:10:08,630 --> 02:10:14,720
again I'm not familiar with using this

2173
02:10:11,189 --> 02:10:16,529
profiler really so I may be just

2174
02:10:14,720 --> 02:10:19,800
misinterpreting what it's actually

2175
02:10:16,529 --> 02:10:21,449
saying but anyway you can kind of see

2176
02:10:19,800 --> 02:10:24,539
that there is some cruft to clean up in

2177
02:10:21,449 --> 02:10:28,199
there even beyond at the call if you

2178
02:10:24,539 --> 02:10:32,670
look at the actual call itself it looks

2179
02:10:28,199 --> 02:10:37,109
like you know at least in here you can

2180
02:10:32,670 --> 02:10:39,060
sort of see like the vertex attribute

2181
02:10:37,109 --> 02:10:43,529
fetching and the primitive dispatch and

2182
02:10:39,060 --> 02:10:47,850
stuff is totally like not implicated

2183
02:10:43,529 --> 02:10:49,349
right so in here you can see this this

2184
02:10:47,850 --> 02:10:51,390
is presumably Lucas trading unit here

2185
02:10:49,350 --> 02:10:58,800
this is how much texture fetch time is

2186
02:10:51,390 --> 02:11:00,360
going on here right you can see there's

2187
02:10:58,800 --> 02:11:02,760
a fair bit of that I don't know if we

2188
02:11:00,359 --> 02:11:04,789
can inspect specifically and say how

2189
02:11:02,760 --> 02:11:09,810
much time is in like a pixel shader

2190
02:11:04,789 --> 02:11:11,670
specifically this is the this is the

2191
02:11:09,810 --> 02:11:14,960
shading engine I assume she's telling us

2192
02:11:11,670 --> 02:11:14,960
what's going on in there right

2193
02:11:21,969 --> 02:11:33,859
so here is an this is like a clear I'm

2194
02:11:28,429 --> 02:11:34,399
in or resolve rather right wait is that

2195
02:11:33,859 --> 02:11:43,098
true

2196
02:11:34,399 --> 02:11:43,908
so vertex shader implications for wait a

2197
02:11:43,099 --> 02:11:46,190
minute wait a minute

2198
02:11:43,908 --> 02:11:49,448
so I'm interpreting this backwards then

2199
02:11:46,189 --> 02:11:53,839
depending on how this looks so these are

2200
02:11:49,448 --> 02:11:59,178
actually these drawing calls are

2201
02:11:53,840 --> 02:12:03,130
actually just the ones that have that

2202
02:11:59,179 --> 02:12:03,130
all the time I said are the resolves

2203
02:12:04,328 --> 02:12:08,268
there's no way of thinking one point two

2204
02:12:06,679 --> 02:12:09,828
seven milliseconds to do a resolve is

2205
02:12:08,269 --> 02:12:17,110
there well I guess it has to pull

2206
02:12:09,828 --> 02:12:17,109
through 128 megabytes of samples though

2207
02:12:18,639 --> 02:12:27,109
yikes so you we need to tell me that if

2208
02:12:23,269 --> 02:12:31,130
this profile is accurate this which is

2209
02:12:27,109 --> 02:12:35,018
drawing all of the data right there's

2210
02:12:31,130 --> 02:12:41,809
the 65,000 vertex shader invocations

2211
02:12:35,019 --> 02:12:45,349
right and and just looking at that is

2212
02:12:41,809 --> 02:12:48,469
that is am I to understand that was a

2213
02:12:45,349 --> 02:12:54,349
basically free and that no one cares and

2214
02:12:48,469 --> 02:12:59,630
then like this this triangle strip to

2215
02:12:54,349 --> 02:13:02,469
resolve the multi sampling that was the

2216
02:12:59,630 --> 02:13:02,469
thing that took the time

2217
02:13:08,458 --> 02:13:20,840
I guess what I would say is I don't know

2218
02:13:15,719 --> 02:13:27,719
if I believe that it seems not very

2219
02:13:20,840 --> 02:13:29,788
possible I mean I could construct an

2220
02:13:27,719 --> 02:13:32,279
argument for why that was true but it

2221
02:13:29,788 --> 02:13:33,658
would be a bit of a stretch so I'm kind

2222
02:13:32,279 --> 02:13:36,408
of thinking that doesn't make a whole

2223
02:13:33,658 --> 02:13:36,408
lot of sense

2224
02:13:46,118 --> 02:13:51,248
hmm so I don't know about that

2225
02:13:51,918 --> 02:13:58,399
I don't know if I believe that's

2226
02:13:53,630 --> 02:14:04,340
actually true so I would probably take

2227
02:13:58,399 --> 02:14:06,319
that with a grain of salt but who knows

2228
02:14:04,340 --> 02:14:07,819
if that were the case then that

2229
02:14:06,319 --> 02:14:10,248
basically just means that we need to

2230
02:14:07,819 --> 02:14:14,448
speed up the multi sample resolve that

2231
02:14:10,248 --> 02:14:17,978
one is what the clear I don't know I'm

2232
02:14:14,448 --> 02:14:17,978
not super convinced here

2233
02:14:28,469 --> 02:14:37,500
I don't know if I really believe those

2234
02:14:31,219 --> 02:14:40,409
timings I would have to get a GPU expert

2235
02:14:37,500 --> 02:14:42,390
to tell me if that was really possible

2236
02:14:40,409 --> 02:14:44,569
because I don't really know if I believe

2237
02:14:42,390 --> 02:14:44,570
it

2238
02:14:45,350 --> 02:14:51,150
it doesn't seem likely just based on

2239
02:14:48,329 --> 02:14:53,609
what that was showing there so maybe

2240
02:14:51,149 --> 02:14:56,238
that's not super useful but hey at least

2241
02:14:53,609 --> 02:14:58,829
we got a tree running so that's nice

2242
02:14:56,238 --> 02:15:00,689
alright so I think we've done what I

2243
02:14:58,829 --> 02:15:04,140
wanted to do which was get that memory

2244
02:15:00,689 --> 02:15:05,969
usage down to a sane level which turned

2245
02:15:04,140 --> 02:15:07,710
out to be free after we analyzed it

2246
02:15:05,969 --> 02:15:10,680
looks like we had already done the work

2247
02:15:07,710 --> 02:15:12,750
we just never actually removed the old

2248
02:15:10,680 --> 02:15:14,159
buffers probably for debugging reasons

2249
02:15:12,750 --> 02:15:15,719
we left them around so we could see them

2250
02:15:14,159 --> 02:15:17,460
more easily or something I don't know

2251
02:15:15,719 --> 02:15:18,899
why we did it but we probably just

2252
02:15:17,460 --> 02:15:21,149
weren't thinking about memory usage at

2253
02:15:18,899 --> 02:15:22,769
the time and so actually we'd already

2254
02:15:21,149 --> 02:15:24,389
done the work we needed and it was

2255
02:15:22,770 --> 02:15:27,449
pretty simple for us to just go ahead

2256
02:15:24,390 --> 02:15:29,130
and turn off the intermediate storage so

2257
02:15:27,448 --> 02:15:30,750
now we're much more sane and we're

2258
02:15:29,130 --> 02:15:35,190
hitting the graphics card a lot less

2259
02:15:30,750 --> 02:15:37,310
hard even just already so that's great

2260
02:15:35,189 --> 02:15:40,619
so tomorrow what I'll do is I'll put in

2261
02:15:37,310 --> 02:15:43,910
some some pixel shading there that tries

2262
02:15:40,619 --> 02:15:46,019
to sample simulate the sampling of those

2263
02:15:43,909 --> 02:15:47,609
light probes even though we don't really

2264
02:15:46,020 --> 02:15:49,290
have the data for them we'll try and

2265
02:15:47,609 --> 02:15:52,349
like sort of pseudo simulate what's

2266
02:15:49,289 --> 02:15:54,738
happening with those and then we can go

2267
02:15:52,350 --> 02:15:57,989
and see how much that's gonna cost us

2268
02:15:54,738 --> 02:16:02,218
and just get a ballpark on that so we'll

2269
02:15:57,988 --> 02:16:05,968
do that tomorrow until then I guess what

2270
02:16:02,219 --> 02:16:07,619
I'd say is sorry to have that be a

2271
02:16:05,969 --> 02:16:08,819
little anti-climatic I thought we would

2272
02:16:07,619 --> 02:16:10,289
have to actually do some work there but

2273
02:16:08,819 --> 02:16:12,539
turns out we were smarter than we

2274
02:16:10,289 --> 02:16:15,829
thought we were me it already laid the

2275
02:16:12,539 --> 02:16:21,510
groundwork for it so that's a good sign

2276
02:16:15,829 --> 02:16:25,649
anyway we'll come back tomorrow to do

2277
02:16:21,510 --> 02:16:27,390
that to just start the work on the pixel

2278
02:16:25,649 --> 02:16:29,488
shader and see how that performs or

2279
02:16:27,390 --> 02:16:31,170
changed the performance profile it would

2280
02:16:29,488 --> 02:16:33,869
be nice to see why we're taking so long

2281
02:16:31,170 --> 02:16:36,478
for frame and that profile that was

2282
02:16:33,870 --> 02:16:38,400
shown there didn't really illuminate why

2283
02:16:36,478 --> 02:16:39,959
that would be my suspicion would just be

2284
02:16:38,399 --> 02:16:42,000
because again it's a lot of memory to

2285
02:16:39,959 --> 02:16:43,709
chew through because

2286
02:16:42,000 --> 02:16:45,299
doing that really heavy over sampling

2287
02:16:43,709 --> 02:16:48,528
but that's something we can pretty

2288
02:16:45,299 --> 02:16:52,259
easily check and so if we just go in and

2289
02:16:48,529 --> 02:16:53,550
turn the multi sampling down or off in

2290
02:16:52,260 --> 02:16:54,960
fact I don't even we might even be able

2291
02:16:53,549 --> 02:16:56,938
to do that pretty easily I don't know if

2292
02:16:54,959 --> 02:16:59,789
our multi sampling button actually works

2293
02:16:56,939 --> 02:17:02,969
yet because we've kind of mucked around

2294
02:16:59,790 --> 02:17:06,420
with it but if we take a look at the

2295
02:17:02,968 --> 02:17:10,250
frame time we turn vsync off so it's

2296
02:17:06,420 --> 02:17:13,888
rendering as fast as it as it can right

2297
02:17:10,250 --> 02:17:17,099
if I go in there and turn multi sampling

2298
02:17:13,888 --> 02:17:18,750
off well that's not all right never mind

2299
02:17:17,099 --> 02:17:20,159
so we do need to go fix that multi

2300
02:17:18,750 --> 02:17:21,659
sampling Reed that was the thing that I

2301
02:17:20,159 --> 02:17:22,950
put them in to do so what we should

2302
02:17:21,659 --> 02:17:24,779
probably do tomorrow's fix that mother

2303
02:17:22,950 --> 02:17:26,760
Sam I read look at the difference in

2304
02:17:24,779 --> 02:17:30,059
time between multi sampling on and off

2305
02:17:26,760 --> 02:17:32,609
and just verify that the that the frame

2306
02:17:30,058 --> 02:17:36,058
rate increases as multi as we back off

2307
02:17:32,609 --> 02:17:39,238
of multi sampling if it doesn't then the

2308
02:17:36,058 --> 02:17:40,799
extra bandwidth extra sampling time but

2309
02:17:39,238 --> 02:17:42,420
mostly extra bandwidth because most time

2310
02:17:40,799 --> 02:17:44,849
all the sample for us probably isn't

2311
02:17:42,420 --> 02:17:47,760
actually taking additional samples so

2312
02:17:44,849 --> 02:17:49,439
the extra bandwidth there we will be

2313
02:17:47,760 --> 02:17:50,639
able to see that that that was actually

2314
02:17:49,439 --> 02:17:52,260
the case and so rather than just

2315
02:17:50,638 --> 02:17:54,388
assuming it's the case I'd like to go in

2316
02:17:52,260 --> 02:17:58,889
and actually try and verify that backing

2317
02:17:54,388 --> 02:18:01,799
off the multi sampling clearly produces

2318
02:17:58,888 --> 02:18:03,839
the improvement in rendering time that

2319
02:18:01,799 --> 02:18:05,129
we would expect and if it doesn't then

2320
02:18:03,840 --> 02:18:06,719
we're gonna go on a little bit of a hunt

2321
02:18:05,129 --> 02:18:08,759
to find out what's actually the problem

2322
02:18:06,718 --> 02:18:09,869
right so we'll do that tomorrow I hope

2323
02:18:08,760 --> 02:18:11,790
you couldn't see you back here for that

2324
02:18:09,870 --> 02:18:13,200
until then if you want found serious at

2325
02:18:11,790 --> 02:18:14,910
home you know which period of the game

2326
02:18:13,200 --> 02:18:16,319
at handmade Hero org comes with the

2327
02:18:14,909 --> 02:18:20,189
source code already so you can play

2328
02:18:16,318 --> 02:18:21,238
around with it as we work on it and yeah

2329
02:18:20,189 --> 02:18:22,738
until tomorrow

2330
02:18:21,238 --> 02:18:23,968
have fun programming and I'll see

2331
02:18:22,738 --> 02:18:26,269
everyone on the Internet take it easy

2332
02:18:23,968 --> 02:18:26,268
everybody

2333
02:18:29,600 --> 02:18:31,659
you

