1
00:00:00,000 --> 00:00:02,100
String begins now is to begin the stream.

2
00:00:02,500 --> 00:00:04,000
I think we can all agree on that.

3
00:00:04,700 --> 00:00:05,500
All right, everyone.

4
00:00:05,500 --> 00:00:07,100
Thank you so much for joining us.

5
00:00:07,100 --> 00:00:07,500
Again.

6
00:00:07,900 --> 00:00:10,400
This is handmade hero day, 13.

7
00:00:10,800 --> 00:00:15,000
Where we are making an entire professional quality game from scratch,

8
00:00:15,000 --> 00:00:16,900
right before your very eyes.

9
00:00:18,000 --> 00:00:22,300
We are in the middle of a process where we are basically taking our

10
00:00:22,300 --> 00:00:26,100
Windows code, which is what we did the first two weeks and we are

11
00:00:26,100 --> 00:00:29,700
turning that into platform independent code.

12
00:00:30,000 --> 00:00:32,700
Just a little Windows layer and that'll set us up for Success.

13
00:00:32,800 --> 00:00:35,200
Kind of going forwards, where we can have this run on lots of

14
00:00:35,200 --> 00:00:35,700
platforms.

15
00:00:35,700 --> 00:00:39,700
And we won't have to touch any of the code that is in the mainline

16
00:00:39,700 --> 00:00:40,200
game.

17
00:00:40,500 --> 00:00:43,000
So we left off yesterday.

18
00:00:43,100 --> 00:00:47,000
We had just moved sound output over from being platform, specific to

19
00:00:47,000 --> 00:00:48,500
being platform nonspecific.

20
00:00:48,700 --> 00:00:53,300
And so today we actually have to do the same thing for input.

21
00:00:53,400 --> 00:00:55,500
So basically what we're going to try and do is we're going to try and

22
00:00:55,500 --> 00:00:58,400
end the day with having input being processed on the other side.

23
00:00:58,600 --> 00:00:59,800
Now, there's one little thing.

24
00:01:00,000 --> 00:01:03,400
He made cheese out today because I want to talk about it in depth

25
00:01:03,400 --> 00:01:07,100
tomorrow, but we're going to do most of the work for the input today.

26
00:01:07,700 --> 00:01:09,600
So loading up win32 handmade.

27
00:01:09,600 --> 00:01:13,800
This is our win32 code here and then loading up handmade .h.

28
00:01:13,800 --> 00:01:16,900
+ dot CPP over here, which is our platform non specific code.

29
00:01:17,800 --> 00:01:18,300
Basically.

30
00:01:18,300 --> 00:01:22,100
What you can see what we've already done is we're already passing some

31
00:01:22,100 --> 00:01:25,300
generic structures that just are the off-screen, the graphics buffer

32
00:01:25,400 --> 00:01:28,500
and the sound buffer to the game and then the game feels those in.

33
00:01:28,500 --> 00:01:29,800
But what you can see here, obviously,

34
00:01:29,900 --> 00:01:32,700
Cecily, is that we're still having to pass in things like blue offset

35
00:01:32,700 --> 00:01:39,200
and green offset, which are essentially, they are allowing the

36
00:01:39,200 --> 00:01:43,900
platform layer to process the input from the GamePad, or the keyboard

37
00:01:43,900 --> 00:01:46,600
or whatever, do whatever it's going to do and then pass that

38
00:01:46,600 --> 00:01:51,100
information to the game so that it can render the the off-screen

39
00:01:51,100 --> 00:01:51,500
buffer.

40
00:01:51,500 --> 00:01:55,100
But Peru, you know what this is kind of interesting here.

41
00:01:55,100 --> 00:01:56,800
Let me finish that gonna say but then I want to show you something

42
00:01:56,800 --> 00:01:57,200
else.

43
00:01:57,200 --> 00:01:59,800
Something a little fun, but

44
00:02:00,800 --> 00:02:05,000
What we're not doing is we're not actually passing the input across

45
00:02:05,000 --> 00:02:06,100
and letting the game.

46
00:02:06,100 --> 00:02:06,800
Do that processing.

47
00:02:06,800 --> 00:02:10,600
So all of the actual results of the input processing are still sitting

48
00:02:10,699 --> 00:02:12,900
in our win32 code and we don't want to do that.

49
00:02:12,900 --> 00:02:15,700
We want to have all of the logic for processing, the input, on the

50
00:02:15,700 --> 00:02:20,200
platform independent side, and we just want the win32 code to do the

51
00:02:20,200 --> 00:02:25,400
work necessary to sort of like process it out of win32 format into

52
00:02:25,400 --> 00:02:28,700
some convenient, generic format, that all platforms.

53
00:02:28,700 --> 00:02:30,400
Can provide hand that over.

54
00:02:30,600 --> 00:02:32,200
The game and then go from there.

55
00:02:33,000 --> 00:02:35,800
So that's we're going to do.

56
00:02:35,800 --> 00:02:36,600
I want to say one thing.

57
00:02:36,600 --> 00:02:38,800
Now, you'll notice, if I cut and paste this here.

58
00:02:39,300 --> 00:02:40,100
We didn't notice this.

59
00:02:40,100 --> 00:02:40,800
No one on the stream.

60
00:02:40,800 --> 00:02:44,400
Notice it either see anything going on here.

61
00:02:45,200 --> 00:02:48,500
The deaf the definition for our function is here, but the Declaration,

62
00:02:48,500 --> 00:02:51,300
the forward declaration up here is missing this.

63
00:02:51,400 --> 00:02:53,900
It doesn't have in tone, right?

64
00:02:54,400 --> 00:02:55,400
So how did that work?

65
00:02:55,500 --> 00:02:56,300
What happened there?

66
00:02:56,300 --> 00:02:56,800
Right?

67
00:02:57,000 --> 00:02:58,300
Shouldn't we have gotten some kind of error?

68
00:02:58,300 --> 00:02:59,400
Well, the answer is

69
00:03:00,300 --> 00:03:06,000
That actually in C++ anyway, when which is what the mode we're

70
00:03:06,000 --> 00:03:06,500
compiling.

71
00:03:06,500 --> 00:03:07,200
And we're compiling.

72
00:03:07,200 --> 00:03:10,000
Mostly, what is C code, but we are compiling and C++ mode.

73
00:03:10,000 --> 00:03:12,300
So we can use C++ features when we want to.

74
00:03:12,300 --> 00:03:16,900
If we want to one of the things we get in C++ mode is function

75
00:03:16,900 --> 00:03:17,600
overloading.

76
00:03:17,900 --> 00:03:20,700
And what that means is you're allowed to Define multiple functions

77
00:03:20,700 --> 00:03:23,600
with the same name that take different inputs.

78
00:03:23,700 --> 00:03:26,900
So, for example, I could Define many different functions, Each of

79
00:03:26,900 --> 00:03:29,900
which took a different set of parameters.

80
00:03:30,000 --> 00:03:32,200
Ders, you can see what I'm talking about here.

81
00:03:32,200 --> 00:03:34,400
For example, each of those is different.

82
00:03:34,400 --> 00:03:37,300
I can compile this and it is totally legal.

83
00:03:37,500 --> 00:03:41,300
I can each make each of these, be its own function, and there's no

84
00:03:41,300 --> 00:03:43,300
problem with that totally legal.

85
00:03:44,300 --> 00:03:45,100
No warnings.

86
00:03:45,100 --> 00:03:45,700
No errors.

87
00:03:45,700 --> 00:03:46,400
No nothing.

88
00:03:46,400 --> 00:03:46,700
It is.

89
00:03:46,700 --> 00:03:51,800
It is flat-out, completely legal, get that up there above my window so

90
00:03:51,800 --> 00:03:52,700
I can see it.

91
00:03:52,900 --> 00:03:53,400
There we go.

92
00:03:54,700 --> 00:03:56,200
And so you may ask yourself.

93
00:03:56,200 --> 00:03:59,900
Well, in this one actually is a duplicate because

94
00:04:00,100 --> 00:04:01,000
Well, okay, you know what?

95
00:04:01,000 --> 00:04:01,600
It's good that I did that.

96
00:04:01,600 --> 00:04:04,600
I could tell you why it's to put, basically, you may ask.

97
00:04:04,600 --> 00:04:06,800
How does it know which one to call when you go to call one?

98
00:04:06,800 --> 00:04:10,900
The answer is it just matches the parameters and sees which one

99
00:04:11,200 --> 00:04:11,700
matches.

100
00:04:11,700 --> 00:04:15,600
So, if I go down to win32 handmade where this is called game update

101
00:04:15,600 --> 00:04:19,500
and render, you'll notice that I'm passing one, two, three, four, five

102
00:04:19,500 --> 00:04:19,899
parameters.

103
00:04:19,899 --> 00:04:23,400
So, it's just going to look and say, oh, okay, all of these, there's

104
00:04:23,400 --> 00:04:24,400
only one.

105
00:04:25,100 --> 00:04:25,700
Right?

106
00:04:26,100 --> 00:04:28,700
That actually takes that many parameters.

107
00:04:28,800 --> 00:04:29,000
Sorry.

108
00:04:29,000 --> 00:04:29,800
That's a five.

109
00:04:30,100 --> 00:04:32,000
That's that's that's what 12345.

110
00:04:34,200 --> 00:04:34,400
Yes.

111
00:04:34,400 --> 00:04:34,800
That's right.

112
00:04:34,800 --> 00:04:36,900
And this is 1 2 3 4.

113
00:04:36,900 --> 00:04:37,700
Which doesn't count.

114
00:04:37,700 --> 00:04:38,500
This is 3.

115
00:04:38,500 --> 00:04:39,200
This is 3.

116
00:04:39,200 --> 00:04:39,900
This is 2.

117
00:04:39,900 --> 00:04:40,600
This is 3.

118
00:04:40,700 --> 00:04:43,400
So the only one that counts is this one with five parameters.

119
00:04:43,400 --> 00:04:44,100
So it's just going to go.

120
00:04:44,100 --> 00:04:46,900
Oh, it's the five parameter one and try to call that.

121
00:04:47,000 --> 00:04:51,000
Now thing is can get a little more complicated if we have ones that

122
00:04:51,000 --> 00:04:52,500
have the same number of parameters.

123
00:04:52,500 --> 00:04:56,700
So let's say we had five parameters in both of them, but I have this

124
00:04:56,700 --> 00:04:59,800
one, be a float like that, it still would work.

125
00:05:00,000 --> 00:05:02,800
In theory, let me get rid of this guy because I'm not gonna talk about

126
00:05:02,800 --> 00:05:02,900
me.

127
00:05:02,900 --> 00:05:06,500
It still would work because most of the time, the compiler will be

128
00:05:06,500 --> 00:05:09,800
able to tell that you were trying to pass an integer.

129
00:05:09,800 --> 00:05:10,900
Not a floating-point.

130
00:05:10,900 --> 00:05:13,200
So it's going to call the integer 1 whereas if you pass the floating

131
00:05:13,200 --> 00:05:14,900
point, it would pass the other one.

132
00:05:15,400 --> 00:05:18,800
So you can see that basically it's going to do its best to kind of

133
00:05:18,800 --> 00:05:19,700
match those up.

134
00:05:19,900 --> 00:05:23,500
But sometimes it doesn't know what to do and then you will get an

135
00:05:23,500 --> 00:05:23,700
error.

136
00:05:23,700 --> 00:05:25,200
And that's that one that I deleted here.

137
00:05:25,700 --> 00:05:29,100
So let's say I have ENT green offset and it blew off set and that's

138
00:05:29,100 --> 00:05:29,800
the only difference.

139
00:05:29,900 --> 00:05:31,200
It's between these two functions.

140
00:05:31,500 --> 00:05:32,600
Well, which one does it call?

141
00:05:32,600 --> 00:05:36,600
If I pass it, you know, a buffer, an integer and then the sound

142
00:05:36,600 --> 00:05:39,200
buffer, the answer is, it has no idea.

143
00:05:39,300 --> 00:05:41,600
It does not know how to differentiate between those two because they

144
00:05:41,600 --> 00:05:42,600
both take an integer.

145
00:05:42,700 --> 00:05:44,100
And so that is an error.

146
00:05:44,200 --> 00:05:48,000
You would have to change one of these or rename one of these in some

147
00:05:48,000 --> 00:05:49,300
way in order to differentiate them.

148
00:05:49,300 --> 00:05:50,700
In a way the compiler understands.

149
00:05:51,500 --> 00:05:54,500
That's the, you know, the simple capsule overview of function

150
00:05:54,500 --> 00:05:59,200
overloading basically, I don't use function overloading a whole lot

151
00:05:59,200 --> 00:05:59,700
but I do.

152
00:06:00,000 --> 00:06:01,000
Having access to it.

153
00:06:01,000 --> 00:06:01,800
It's one of the reasons.

154
00:06:01,800 --> 00:06:04,300
I like compiling with CPP files.

155
00:06:04,400 --> 00:06:07,800
I don't know if c99 let you start doing function overloading or not.

156
00:06:08,000 --> 00:06:12,200
I've never really looked at the c99 spec, but C++ let you do it.

157
00:06:12,200 --> 00:06:15,500
And it's one of the things that I like as compared to see one of the

158
00:06:15,500 --> 00:06:19,100
reasons I like it is because it allows me to basically have a few

159
00:06:19,100 --> 00:06:21,900
different ways to call the same function without having to have

160
00:06:21,900 --> 00:06:24,200
different names for them and it just makes things a little more

161
00:06:24,200 --> 00:06:26,400
convenient and easier to read in a lot of cases.

162
00:06:26,800 --> 00:06:29,900
So I don't go Hog Wild with it, but I do like it.

163
00:06:30,000 --> 00:06:33,300
It and I think it's a useful feature something to be aware of there.

164
00:06:34,100 --> 00:06:37,000
So anyway, what was happening here is we just had a completely

165
00:06:37,000 --> 00:06:38,100
erroneous declaration.

166
00:06:38,100 --> 00:06:41,500
This is not a function that ever existed, and I just forgot to update

167
00:06:41,500 --> 00:06:42,000
here.

168
00:06:42,100 --> 00:06:44,600
We don't need to actually put this here.

169
00:06:45,100 --> 00:06:45,400
It is.

170
00:06:45,400 --> 00:06:47,100
Strictly sort of for legibility.

171
00:06:47,100 --> 00:06:49,500
I like kind of sticking things together so I can quickly look at what

172
00:06:49,500 --> 00:06:53,400
the definition of definition is of my platform layer, but basically

173
00:06:53,400 --> 00:06:54,600
like we don't even need this here.

174
00:06:54,600 --> 00:06:57,900
We could have it be completely not defined at all because since

175
00:06:57,900 --> 00:06:59,900
handmade dot CPP gets included.

176
00:07:00,000 --> 00:07:02,000
We're win32 handmade dot CPP.

177
00:07:02,700 --> 00:07:04,000
We are totally fine.

178
00:07:04,500 --> 00:07:08,100
It'll pick up the actual definition here in, doesn't need a forward

179
00:07:08,100 --> 00:07:09,100
declaration at all.

180
00:07:09,500 --> 00:07:17,300
So I hope that basically works and and Jagger 27.

181
00:07:17,300 --> 00:07:20,000
I know my face hides the code, but I can't see that code either.

182
00:07:20,000 --> 00:07:20,800
I can't see it now.

183
00:07:20,800 --> 00:07:21,800
It's blocked for me as well.

184
00:07:21,800 --> 00:07:22,500
So I promise you.

185
00:07:22,500 --> 00:07:23,700
It will never hide code.

186
00:07:23,800 --> 00:07:24,800
That I can see.

187
00:07:25,000 --> 00:07:28,200
It'll only hide code that I can't see either.

188
00:07:28,600 --> 00:07:29,800
All right, so moving.

189
00:07:29,900 --> 00:07:34,900
On basically what we've got here is we have a situation where we need

190
00:07:34,900 --> 00:07:37,500
to extend this so that it starts taking input.

191
00:07:37,500 --> 00:07:40,900
So the first thing I'm going to do is I'm going to basically pull out

192
00:07:40,900 --> 00:07:46,100
these guys into Statics because I don't want to get to memory yet.

193
00:07:46,100 --> 00:07:48,900
Like I said, that's going to be the topic of tomorrow's entire thing.

194
00:07:48,900 --> 00:07:52,100
Unless we somehow speed, through input tonight, which I don't expect,

195
00:07:52,100 --> 00:07:55,100
we will, I expect there's plenty of explanation to do there.

196
00:07:55,100 --> 00:07:59,000
So, all I'm going to do is, I'm basically going to pull these out here

197
00:07:59,000 --> 00:07:59,900
and I'm going to

198
00:08:00,600 --> 00:08:04,400
I'm going to basically make them be equal to whatever they were by

199
00:08:04,400 --> 00:08:05,100
default.

200
00:08:05,200 --> 00:08:08,600
So the X offset y offset here that were equal to zero before.

201
00:08:09,000 --> 00:08:10,100
I guess we'll just leave them is 0.

202
00:08:10,100 --> 00:08:10,700
Now.

203
00:08:10,800 --> 00:08:13,800
That's what they would have been initialized to anyway, but no big

204
00:08:13,800 --> 00:08:14,200
deal.

205
00:08:14,600 --> 00:08:16,500
Tone hurts here was 256.

206
00:08:16,700 --> 00:08:18,200
So we'll go ahead and make that 256.

207
00:08:18,200 --> 00:08:22,600
I'm gonna go ahead and nuke that from this, as well as the tone

208
00:08:22,600 --> 00:08:25,600
volume, because those are should not be used anymore in the platform,

209
00:08:25,600 --> 00:08:27,800
code, tone hurts and tone volume are gone.

210
00:08:28,000 --> 00:08:29,700
I don't know if we use running sample index.

211
00:08:29,700 --> 00:08:29,800
I

212
00:08:29,900 --> 00:08:31,200
Leave we still do out here.

213
00:08:31,200 --> 00:08:32,900
Correct to figure out where to lock yet.

214
00:08:33,200 --> 00:08:37,200
So think that's basically everything that needs to be removed from

215
00:08:37,200 --> 00:08:38,299
that struct.

216
00:08:38,299 --> 00:08:41,000
Let me go ahead and pull that struck out up to the top as well.

217
00:08:41,000 --> 00:08:43,100
I tend to like to have these up here.

218
00:08:43,500 --> 00:08:45,900
In fact, what I usually like to do as well as they usually like to

219
00:08:45,900 --> 00:08:47,600
have an h-file even if I don't need one.

220
00:08:47,600 --> 00:08:51,000
And I like to kind of put that stuff in there, so I can quickly, see

221
00:08:51,000 --> 00:08:52,200
it quickly flip between it.

222
00:08:52,400 --> 00:08:55,600
So I may just go ahead and and and straight up do that right like

223
00:08:55,600 --> 00:08:56,900
that, that makes sense.

224
00:08:57,600 --> 00:08:59,800
So basically the wave period.

225
00:09:00,100 --> 00:09:01,400
That's also should be gone.

226
00:09:01,500 --> 00:09:03,000
So, let's get rid of that.

227
00:09:03,500 --> 00:09:06,000
What else do we need to ice these two.

228
00:09:06,000 --> 00:09:06,900
Not going to happen.

229
00:09:06,900 --> 00:09:10,400
Now, we're going to have to do those ourselves tone hurts.

230
00:09:11,000 --> 00:09:12,300
That's not going to happen.

231
00:09:12,700 --> 00:09:13,700
I got to get rid of that.

232
00:09:13,700 --> 00:09:14,800
And the wave period.

233
00:09:14,800 --> 00:09:17,800
Also, they all that stuff's going to have to be dealt with differently

234
00:09:17,800 --> 00:09:19,200
and we're not going to pass them anymore.

235
00:09:19,200 --> 00:09:23,300
So we're basically just down to this and now we get to a situation

236
00:09:23,300 --> 00:09:25,600
where we've done a little bit of feature regression there.

237
00:09:25,900 --> 00:09:29,700
We have removed all of the ability to control what's going on.

238
00:09:30,400 --> 00:09:33,100
And we're going to have to start moving that into the platform layer.

239
00:09:33,100 --> 00:09:36,300
So there we are, things still working, but we cannot use our joystick

240
00:09:36,300 --> 00:09:36,800
anymore.

241
00:09:37,200 --> 00:09:40,700
Basically, if I go ahead and and pull out our lovely pink joystick

242
00:09:40,700 --> 00:09:41,100
here.

243
00:09:41,200 --> 00:09:44,300
This guy there is no, does not matter what I do.

244
00:09:44,300 --> 00:09:48,100
I can Mash on that all day long and we're not getting anything from

245
00:09:48,100 --> 00:09:48,700
our game.

246
00:09:48,700 --> 00:09:54,400
So now what we need to do is we need to decide basically what we're

247
00:09:54,400 --> 00:09:58,800
going to pass the game and this is a little bit complicated because we

248
00:09:58,800 --> 00:09:59,800
have not written the game.

249
00:10:00,000 --> 00:10:00,400
Yet.

250
00:10:00,500 --> 00:10:02,400
And so one of the things that's very important.

251
00:10:02,400 --> 00:10:05,000
Like I've said many times on the string is, you always want to write

252
00:10:05,000 --> 00:10:08,600
the usage code first and we are at a bit of a disadvantage because

253
00:10:08,600 --> 00:10:13,400
since we don't have the game, we don't actually know exactly how we're

254
00:10:13,400 --> 00:10:15,100
going to be using the user input.

255
00:10:15,200 --> 00:10:18,200
If the game was done and someone handed it to us and said, hey here,

256
00:10:18,200 --> 00:10:20,400
make a platform layer that supports this game.

257
00:10:20,500 --> 00:10:23,600
Well, we could very easily see what the optimal way to pass that input

258
00:10:23,600 --> 00:10:27,200
to the game would be, we don't have that and so we know going into

259
00:10:27,200 --> 00:10:28,900
this and it's important to know these things.

260
00:10:29,300 --> 00:10:29,800
We know going

261
00:10:29,900 --> 00:10:32,000
NG into this that what we're doing here is a first pass.

262
00:10:32,000 --> 00:10:35,400
This is a first pass attempt on the interface time for some almond

263
00:10:35,400 --> 00:10:35,900
milk.

264
00:10:45,400 --> 00:10:46,700
Bit of a long Swig there.

265
00:10:48,000 --> 00:10:51,000
If you are drinking along at home wasn't your own almond milk, I

266
00:10:51,000 --> 00:10:53,500
highly recommend taking a pretty strong hit.

267
00:10:53,700 --> 00:10:55,700
Sometimes it helps especially when you have a cold.

268
00:10:55,800 --> 00:11:01,700
Alright, so basically what I'm trying to get across the areas API

269
00:11:01,700 --> 00:11:05,500
design and platform layer design and just code in general.

270
00:11:06,900 --> 00:11:10,400
You always need to have a little bit of Consciousness.

271
00:11:10,400 --> 00:11:13,800
You have a little bit of a voice in the back of your head that lets,

272
00:11:13,800 --> 00:11:14,900
you know, exactly what it is.

273
00:11:14,900 --> 00:11:17,700
You're doing at any given time because the type of code that you're

274
00:11:17,700 --> 00:11:20,500
going to type in, is going to be different depending on the

275
00:11:20,500 --> 00:11:22,300
circumstance and the circumstance.

276
00:11:22,300 --> 00:11:27,500
In this case is, we are iterating towards the API that we want, which

277
00:11:27,500 --> 00:11:31,200
is not the same as typing in the exact final API.

278
00:11:31,800 --> 00:11:34,800
The reason this is important is because it means, you have to let

279
00:11:34,800 --> 00:11:36,300
there be a little slop in there.

280
00:11:36,600 --> 00:11:39,300
It means that you have to not spend a lot of time on a lot of the

281
00:11:39,300 --> 00:11:39,600
code.

282
00:11:39,600 --> 00:11:42,800
Now, you'll notice that our win32 code is pretty darn janky.

283
00:11:43,100 --> 00:11:44,800
That is not because we're being lazy.

284
00:11:44,800 --> 00:11:46,900
That is because we're trying to save ourselves work.

285
00:11:46,900 --> 00:11:49,600
We know we're going to rewrite a lot of that stuff when we go to

286
00:11:49,600 --> 00:11:52,600
tighten it down for shipping and the time that we would spend

287
00:11:52,900 --> 00:11:55,400
tightening it down now with just be wasting because it would all be

288
00:11:55,400 --> 00:11:56,100
deleted.

289
00:11:56,300 --> 00:11:58,700
So, we need to remember, what kind of code were writing.

290
00:11:58,800 --> 00:11:59,800
We need to know what kind of

291
00:12:00,000 --> 00:12:01,500
Anders that code has to be up to.

292
00:12:01,700 --> 00:12:04,100
We need to know, what kind of future that codes going to have.

293
00:12:04,400 --> 00:12:07,700
And all of those things in the back of our head, informing us with how

294
00:12:07,700 --> 00:12:12,600
we should proceed are very important because they'll save us work

295
00:12:12,700 --> 00:12:15,900
doing too much analysis and too much work on code too.

296
00:12:15,900 --> 00:12:18,200
Early in the process is bad.

297
00:12:18,700 --> 00:12:20,000
There's the old adage.

298
00:12:20,100 --> 00:12:23,200
Premature optimization is the root of all evil and a lot of people

299
00:12:23,200 --> 00:12:26,200
take that to mean that the optimization is making code fast.

300
00:12:26,300 --> 00:12:29,800
Well, that may be true doing that at the head end might

301
00:12:30,000 --> 00:12:33,300
Be bad, you might spend a lot of time doing optimization on code that

302
00:12:33,300 --> 00:12:36,200
didn't need to be optimized or that you optimize in the wrong way.

303
00:12:36,200 --> 00:12:38,400
Because later, you change it, you have to undo it all and do different

304
00:12:38,400 --> 00:12:39,100
optimizations.

305
00:12:39,100 --> 00:12:41,100
That's all true.

306
00:12:41,100 --> 00:12:46,000
But what's also true is that optimization really, in this case, for

307
00:12:46,000 --> 00:12:49,800
purposes of the adage can refer also to the design of the code itself.

308
00:12:49,800 --> 00:12:56,100
Premature design is one of the most and I repeat most destructive

309
00:12:56,100 --> 00:12:57,600
forces in Computing today.

310
00:12:57,600 --> 00:12:59,900
It is the thing that cost the most time it.

311
00:13:00,000 --> 00:13:03,500
The thing that results in the most problems in shipping code,

312
00:13:03,600 --> 00:13:05,500
premature design is awful.

313
00:13:05,700 --> 00:13:08,700
You have to remember what you are doing at any given time.

314
00:13:08,800 --> 00:13:12,700
So right now, we are at the beginning of the design phase for this API

315
00:13:12,800 --> 00:13:15,900
and we need to understand that these are experiments and we need to

316
00:13:15,900 --> 00:13:19,700
use them as such and guide our code up to the point where we can start

317
00:13:19,700 --> 00:13:21,600
to do final API work on it.

318
00:13:21,700 --> 00:13:25,900
And that is the time to start tightening down those those, although it

319
00:13:25,900 --> 00:13:29,400
crossing the eyes and dotting the T's, or crossing the t's and

320
00:13:29,400 --> 00:13:29,800
dotting, the

321
00:13:29,900 --> 00:13:33,800
Why's depending on which language you happen to be using that, that is

322
00:13:33,800 --> 00:13:34,600
the time for that?

323
00:13:34,600 --> 00:13:35,000
Okay.

324
00:13:36,300 --> 00:13:40,500
So basically, what I want to do here is I want to start to imagine

325
00:13:40,600 --> 00:13:44,400
what would be useful for my game in terms of input, coming from the

326
00:13:44,400 --> 00:13:45,400
platform layer.

327
00:13:45,600 --> 00:13:49,200
Now, I know that this game is not really going to care too much about

328
00:13:49,200 --> 00:13:52,000
which controller you're using keyboard or joystick.

329
00:13:52,000 --> 00:13:54,200
It needs to be able to work with keyboard and Gamepad.

330
00:13:54,200 --> 00:13:54,900
That's true.

331
00:13:55,200 --> 00:13:56,900
But I do at least want to know.

332
00:14:00,300 --> 00:14:06,600
For purposes of tuning whether the user is Using a Gamepad or they're

333
00:14:06,600 --> 00:14:10,500
using a keyboard because at least for movement, where one of them

334
00:14:10,500 --> 00:14:14,100
might be analog and one of them might not be, I kind of want to know

335
00:14:14,100 --> 00:14:14,500
this.

336
00:14:14,700 --> 00:14:18,900
So I feel like I'm gonna at least want there to be something, you

337
00:14:18,900 --> 00:14:23,000
know, like the input dot is analog or something.

338
00:14:23,200 --> 00:14:26,000
I'm going to want to be able to do some checking on something like

339
00:14:26,000 --> 00:14:26,600
that.

340
00:14:26,800 --> 00:14:27,300
Right?

341
00:14:27,300 --> 00:14:29,400
And I'm going to want to be able to do things in here.

342
00:14:29,400 --> 00:14:29,800
They're like

343
00:14:30,200 --> 00:14:36,000
Use analog movement tuning and in here, I'm going to want to do use

344
00:14:36,000 --> 00:14:37,500
digital movement tuning, right?

345
00:14:37,500 --> 00:14:41,800
And so I'm gonna, I'm gonna expect there to be differences in how I

346
00:14:41,800 --> 00:14:45,100
might want to tune the motion of the character based on which one it

347
00:14:45,100 --> 00:14:46,200
is now for the buttons.

348
00:14:46,200 --> 00:14:48,400
I don't expect that to be true for the buttons.

349
00:14:48,400 --> 00:14:50,800
You push a button on a keyboard, you push a button on the GamePad for

350
00:14:50,800 --> 00:14:51,500
the purpose of this game.

351
00:14:51,500 --> 00:14:54,300
I think those are going to be roughly the same, so you won't need to

352
00:14:54,300 --> 00:14:55,300
tell the game about that.

353
00:14:55,300 --> 00:14:57,600
But for the stick, I'm going to want that.

354
00:15:01,500 --> 00:15:02,700
So again, just Pie in the Sky.

355
00:15:02,700 --> 00:15:04,100
I was just saying, I want that.

356
00:15:04,100 --> 00:15:05,000
It's got to be in there.

357
00:15:05,200 --> 00:15:06,300
Whatever this thing is going to be.

358
00:15:06,300 --> 00:15:08,800
It's going to have to tell me that piece of information.

359
00:15:08,900 --> 00:15:10,500
So we've got that.

360
00:15:10,500 --> 00:15:11,000
Now.

361
00:15:11,400 --> 00:15:15,600
I'm also going to want to basically be able to look at that at that

362
00:15:15,600 --> 00:15:16,900
motion of the stick.

363
00:15:17,000 --> 00:15:20,400
And now when I've got to think about here, and maybe I'll bring up the

364
00:15:20,400 --> 00:15:25,200
diagram for a second, the awesome, Microsoft Paint, one of the most

365
00:15:25,200 --> 00:15:27,100
powerful paint packages in the world.

366
00:15:27,200 --> 00:15:30,100
Certainly, the one that most game art is made on.

367
00:15:30,300 --> 00:15:31,100
Microsoft Paint.

368
00:15:31,100 --> 00:15:35,700
Everyone knows that professional paint artists love their Microsoft

369
00:15:35,700 --> 00:15:36,000
Paint.

370
00:15:36,000 --> 00:15:41,000
So, in in here, basically, you've, you know, the ubiquitous Arrow

371
00:15:41,000 --> 00:15:42,700
diagram that I draw every time.

372
00:15:43,100 --> 00:15:44,400
This is time here.

373
00:15:44,500 --> 00:15:47,900
T going forwards and we've got frames right?

374
00:15:47,900 --> 00:15:49,800
We've got frames worth of processing.

375
00:15:50,100 --> 00:15:52,700
So in here, this is frame one that we're processing or actually, let's

376
00:15:52,700 --> 00:15:53,400
call it frame 0.

377
00:15:53,400 --> 00:15:56,800
Let's start at 0, like a good programmer would and going forwards.

378
00:15:57,000 --> 00:16:00,100
Now what we have to remember is the yu-er user is viewing, a

379
00:16:00,200 --> 00:16:02,400
Mmmmm, basically, after we compute it.

380
00:16:02,400 --> 00:16:05,400
So, if this is, if this is which frame, we're Computing, right?

381
00:16:05,400 --> 00:16:08,500
If we're Computing frame 0 in this time, it's actually going to get

382
00:16:08,500 --> 00:16:12,400
displayed here and they're going to view frame 0 here, right?

383
00:16:12,500 --> 00:16:14,900
And then they're going to view frame one here, and they're going to

384
00:16:14,900 --> 00:16:16,000
view frame to here.

385
00:16:16,100 --> 00:16:18,800
So, it's always, it's always kind of going like this, right?

386
00:16:18,800 --> 00:16:19,900
Hoops made that Arrow.

387
00:16:19,900 --> 00:16:21,000
Go a little too far.

388
00:16:21,200 --> 00:16:21,700
There we go.

389
00:16:22,700 --> 00:16:24,400
Can't blame Microsoft Paint for that people.

390
00:16:24,900 --> 00:16:25,300
Alright.

391
00:16:25,300 --> 00:16:28,900
So basically what happens is, if we are Computing during this period,

392
00:16:28,900 --> 00:16:30,000
let's say our will actually use it.

393
00:16:30,200 --> 00:16:31,000
We're sort of up here.

394
00:16:31,000 --> 00:16:34,700
So we're just playing frame 0 and during the time when the user is

395
00:16:34,700 --> 00:16:37,000
looking at frame 0, right.

396
00:16:37,000 --> 00:16:40,500
They are moving the joystick around right there, moving the joystick

397
00:16:40,500 --> 00:16:42,400
left and up, and who knows?

398
00:16:42,400 --> 00:16:45,800
Maybe they rolled it around now, they've only got a 30th or a 60th of

399
00:16:45,800 --> 00:16:46,400
a second.

400
00:16:46,400 --> 00:16:49,900
They don't have that much time, but they still could be doing some

401
00:16:49,900 --> 00:16:52,600
small amount of motion on the stick in that time, right?

402
00:16:52,600 --> 00:16:56,500
They might slightly move it, you know, from from you know, if the

403
00:16:56,500 --> 00:16:59,300
stick is one of these things and it's over here, right?

404
00:16:59,300 --> 00:17:00,000
You could imagine

405
00:17:00,200 --> 00:17:01,200
In a 60th of a second.

406
00:17:01,200 --> 00:17:04,099
Second, if you were really wailing on it, you could whale it down a

407
00:17:04,099 --> 00:17:06,400
little bit in a sixtieth of a second.

408
00:17:07,000 --> 00:17:10,000
And especially for going at 30 frames a second, and we've got a 30th

409
00:17:10,000 --> 00:17:10,900
of a second to do that.

410
00:17:10,900 --> 00:17:12,800
Well, they might be able to move it twice as far.

411
00:17:13,099 --> 00:17:14,000
They move it even further.

412
00:17:14,000 --> 00:17:14,500
Right?

413
00:17:14,900 --> 00:17:18,300
So the user is moving their, their joystick in response to what they

414
00:17:18,300 --> 00:17:19,300
saw on the screen.

415
00:17:19,500 --> 00:17:23,900
We're not going to get this input until after we've already computed

416
00:17:23,900 --> 00:17:24,599
frame 1.

417
00:17:24,700 --> 00:17:28,099
So the next frame they're going to see is not going to incorporate any

418
00:17:28,099 --> 00:17:30,100
of the input they were doing when

419
00:17:30,200 --> 00:17:31,700
They actually saw frame 0.

420
00:17:31,700 --> 00:17:34,500
This is one of the reasons that having a high frame rate is good

421
00:17:34,900 --> 00:17:38,400
because basically, you have to act on the input that you got last

422
00:17:38,400 --> 00:17:41,300
frame to compute this Frame, which means you're always essentially one

423
00:17:41,300 --> 00:17:42,100
frame behind.

424
00:17:42,300 --> 00:17:45,900
If you do your input stupidly, you can even be two frames behind but

425
00:17:45,900 --> 00:17:46,900
no matter what you do.

426
00:17:47,000 --> 00:17:50,700
It's not instantaneous the response, It's Always bucketed by that

427
00:17:50,700 --> 00:17:53,300
frame rate and you're going to be one sixtieth of a second behind

428
00:17:53,300 --> 00:17:55,900
possibly more depending on the circumstances.

429
00:17:56,900 --> 00:17:58,400
So we have some decisions to make here.

430
00:17:58,800 --> 00:17:58,900
Now.

431
00:17:58,900 --> 00:17:59,800
We got another thing which is

432
00:18:00,000 --> 00:18:02,000
Let's say they push the a button, right?

433
00:18:02,000 --> 00:18:04,600
They push the a button down then they let up on the a button, then

434
00:18:04,600 --> 00:18:05,500
they push the a button.

435
00:18:05,500 --> 00:18:05,900
Again.

436
00:18:06,100 --> 00:18:08,300
Probably pretty hard to do that in a 30th of a second.

437
00:18:08,300 --> 00:18:10,400
But who knows maybe there really wailing on it?

438
00:18:13,800 --> 00:18:15,000
Maybe they got magic fingers.

439
00:18:15,000 --> 00:18:15,400
I don't know.

440
00:18:15,700 --> 00:18:18,600
Maybe they hooked up one of those old turbo joysticks that does the

441
00:18:18,600 --> 00:18:19,800
automatic repeat fire.

442
00:18:19,800 --> 00:18:23,300
I don't know, who knows what could happen but point being.

443
00:18:23,300 --> 00:18:26,000
If we imagine this Frame to be impossibly long.

444
00:18:26,000 --> 00:18:29,400
Let's say we were running at one frame a second, then you can

445
00:18:29,400 --> 00:18:29,800
certainly

446
00:18:30,000 --> 00:18:33,100
Imagine the user pushing the button a couple times during that one

447
00:18:33,100 --> 00:18:33,800
second.

448
00:18:34,100 --> 00:18:37,300
And of course, that is something to be aware of as well.

449
00:18:37,300 --> 00:18:41,200
And so, what we need to do now as a game is, we need to decide what

450
00:18:41,200 --> 00:18:45,600
about this series of operations that is happening in here.

451
00:18:45,700 --> 00:18:47,900
Do we want to actually record?

452
00:18:48,000 --> 00:18:51,100
So like, what do we save, right?

453
00:18:52,100 --> 00:18:55,200
And of course, we have some restrictions on what we can save because

454
00:18:55,200 --> 00:18:57,100
the joystick itself is only pulling.

455
00:18:57,500 --> 00:18:59,900
There was its own state for a

456
00:19:00,000 --> 00:19:01,100
/ of times a second.

457
00:19:01,200 --> 00:19:02,900
So we actually just get snapshots.

458
00:19:02,900 --> 00:19:03,600
You know what, we get.

459
00:19:03,600 --> 00:19:07,400
If we look across this, depending on the polling frequency is we just

460
00:19:07,400 --> 00:19:09,900
get a series of little positions of the stick.

461
00:19:09,900 --> 00:19:10,300
Right?

462
00:19:10,400 --> 00:19:13,000
We don't actually know what happened in between there.

463
00:19:13,300 --> 00:19:15,900
We don't know what happens in between the polling frequency.

464
00:19:16,200 --> 00:19:17,500
So no matter what it is.

465
00:19:17,500 --> 00:19:20,100
It's kind of a discrete approximation of the actual motion that

466
00:19:20,100 --> 00:19:21,000
happened on the stick.

467
00:19:21,100 --> 00:19:22,100
Same thing with the button.

468
00:19:22,100 --> 00:19:26,000
If somehow the user could press the button twice fast enough that the

469
00:19:26,000 --> 00:19:29,800
joystick itself wasn't pulling fast enough to catch that you

470
00:19:29,900 --> 00:19:33,400
Could imagine a circumstance where a button pressed was completely

471
00:19:33,400 --> 00:19:34,200
missed, right?

472
00:19:34,800 --> 00:19:36,600
So there are limitations of what we can do.

473
00:19:36,600 --> 00:19:40,500
But certainly what we do want to do at a minimum isn't sure that

474
00:19:40,500 --> 00:19:44,400
anything that's important for our game to have happen that we don't

475
00:19:44,400 --> 00:19:44,800
miss.

476
00:19:44,800 --> 00:19:48,600
So for example, if the user happens to let up on the a button here,

477
00:19:48,800 --> 00:19:51,000
press down on it and then let up on it again.

478
00:19:51,300 --> 00:19:52,200
That's a button press.

479
00:19:52,200 --> 00:19:53,500
We don't want to miss it.

480
00:19:53,600 --> 00:19:56,200
We never want to miss a button press because then the user press the

481
00:19:56,200 --> 00:19:58,300
button and didn't shoot or didn't do whatever it is.

482
00:19:58,300 --> 00:19:59,400
The game's going to do.

483
00:19:59,900 --> 00:20:03,600
When you push that button in, that feels awful to the player, so we

484
00:20:03,600 --> 00:20:06,200
want to respect those things as much as possible.

485
00:20:06,200 --> 00:20:07,200
Okay?

486
00:20:07,200 --> 00:20:10,400
So what we need to decide now is how we're going to collect this

487
00:20:10,400 --> 00:20:14,100
information and how we're going to pass it on to the user because we

488
00:20:14,100 --> 00:20:18,100
can always decide to pull those devices more frequently.

489
00:20:18,100 --> 00:20:21,500
If the operating system lets us do that or try to get, you know,

490
00:20:21,500 --> 00:20:23,100
access to lower level data.

491
00:20:23,100 --> 00:20:27,100
We can always try to improve how we get the data, but no matter how

492
00:20:27,100 --> 00:20:28,700
much of the data we get.

493
00:20:28,700 --> 00:20:29,600
And how

494
00:20:29,900 --> 00:20:30,200
Accurate.

495
00:20:30,200 --> 00:20:32,900
It is we still are always going to have sell a problem of how do we

496
00:20:32,900 --> 00:20:36,900
encode it properly so that when we pass it to the game, it has the

497
00:20:36,900 --> 00:20:39,400
easiest time understanding it.

498
00:20:44,300 --> 00:20:45,800
Okay, so

499
00:20:48,300 --> 00:20:50,800
What I like to do in general.

500
00:20:51,900 --> 00:20:56,900
is I like to think about what the possibilities are for the various

501
00:20:56,900 --> 00:20:59,800
things in the game, and on the

502
00:21:00,000 --> 00:21:01,300
On the, on the joystick.

503
00:21:01,400 --> 00:21:05,000
And the first one I'm going to talk about is basically looking at sort

504
00:21:05,000 --> 00:21:06,800
of what people will often do.

505
00:21:06,800 --> 00:21:10,400
And then I'm going to say why I often don't do that thing, sort of as

506
00:21:10,400 --> 00:21:11,800
a compare and contrast.

507
00:21:11,800 --> 00:21:15,100
So what people will often do is, they'll often do something like this.

508
00:21:15,300 --> 00:21:16,200
They'll well, you know what?

509
00:21:16,200 --> 00:21:18,500
I can write it, encodes you, so you don't have to look at like an

510
00:21:18,500 --> 00:21:19,200
interface.

511
00:21:19,400 --> 00:21:22,300
You can actually see what the code would look like when they write it,

512
00:21:22,300 --> 00:21:23,600
they often do something.

513
00:21:24,200 --> 00:21:26,000
That's that looks something like this.

514
00:21:26,100 --> 00:21:29,900
You've got a for Loop, and it's going to do something like, let's

515
00:21:30,000 --> 00:21:34,900
I'd say event index equals 0 that is, if I can type tonight, which who

516
00:21:34,900 --> 00:21:39,900
knows event, count plus event index like this and then they'll go

517
00:21:39,900 --> 00:21:43,600
through and they'll have something that's like an event array and

518
00:21:43,600 --> 00:21:47,400
they'll look into the event or a and they'll do like switch event or a

519
00:21:47,400 --> 00:21:51,100
you know, what type of event this is.

520
00:21:51,100 --> 00:21:56,000
Oh it's, you know, event a button or something like that, you know,

521
00:21:56,000 --> 00:21:56,500
that sort of thing.

522
00:21:56,500 --> 00:21:59,900
So they'll have like a type of event or the events will just be

523
00:22:00,000 --> 00:22:01,600
A state of the joystick.

524
00:22:01,600 --> 00:22:05,500
So basically it'll just be like, okay, there's an event index and

525
00:22:05,500 --> 00:22:08,500
we've got the stick X in here, right?

526
00:22:08,800 --> 00:22:13,200
Stick Y in here, that sort of thing, you know, whatever a button is

527
00:22:13,200 --> 00:22:16,300
either up or down that sort of stuff and basically what happens is

528
00:22:16,300 --> 00:22:20,900
again, it's a very minimal amount of processing that the that the

529
00:22:21,500 --> 00:22:22,700
platform layer does.

530
00:22:22,800 --> 00:22:26,700
And the platform layer, basically goes ahead and and takes its

531
00:22:26,700 --> 00:22:27,500
information.

532
00:22:28,000 --> 00:22:29,700
Does the minimal amount of processing on it?

533
00:22:29,700 --> 00:22:29,800
And

534
00:22:29,900 --> 00:22:31,600
Hands it over to the game and says here you go.

535
00:22:31,600 --> 00:22:35,300
You look at the series of pulling results and you figure out what's

536
00:22:35,300 --> 00:22:35,900
going on.

537
00:22:36,500 --> 00:22:37,000
Now.

538
00:22:37,000 --> 00:22:41,600
The thing that I don't like about this is that it has an inherent kind

539
00:22:41,600 --> 00:22:48,200
of limitation in it, that forces us to think about something and that

540
00:22:48,200 --> 00:22:52,300
limitation is you've got to have somewhere to store these events.

541
00:22:53,300 --> 00:22:56,500
And the number of them that you choose to store it determines exactly

542
00:22:56,500 --> 00:23:00,400
how many times the buttons can be pressed inside a given frame.

543
00:23:00,400 --> 00:23:03,700
Now that may not sound like much and it isn't because memory is really

544
00:23:03,700 --> 00:23:04,700
cheap nowadays.

545
00:23:04,800 --> 00:23:09,500
You could just have 10 megabytes of button store and go to town on

546
00:23:09,500 --> 00:23:12,200
your little party and then no matter what the user was doing or no

547
00:23:12,200 --> 00:23:15,600
matter how long, the frame took you will not be able to generate

548
00:23:15,600 --> 00:23:16,300
enough events.

549
00:23:16,300 --> 00:23:19,500
Even if you're pulling it some you know, if it took one second long

550
00:23:19,500 --> 00:23:21,900
and you were pulling it, you know, 1,000 Hertz.

551
00:23:21,900 --> 00:23:22,300
Well,

552
00:23:23,100 --> 00:23:25,600
Events is not going to be a really huge deal.

553
00:23:25,600 --> 00:23:29,600
But in my mind, I still tend to think of it.

554
00:23:29,600 --> 00:23:32,400
As you know, why would I

555
00:23:34,000 --> 00:23:40,500
Incur the downsides of having a variable-length set of storage if I

556
00:23:40,500 --> 00:23:41,200
don't need to.

557
00:23:41,200 --> 00:23:44,800
And so what I ask when I see stuff like this is, do we really care

558
00:23:44,800 --> 00:23:45,600
about that?

559
00:23:45,700 --> 00:23:48,500
And for this particular game, I don't know that I actually do.

560
00:23:48,500 --> 00:23:52,500
And so what I like to do is I like to do something more, like having

561
00:23:52,500 --> 00:23:53,400
the input.

562
00:23:54,700 --> 00:23:55,600
Just say something.

563
00:23:55,600 --> 00:23:59,600
Like let's say a button started down.

564
00:24:00,100 --> 00:24:00,800
Right?

565
00:24:00,800 --> 00:24:09,300
A button ended down or something like that and number of transitions

566
00:24:09,300 --> 00:24:10,300
or something, right?

567
00:24:10,300 --> 00:24:16,200
Because what I can do is I can essentially turn any one of these

568
00:24:16,200 --> 00:24:18,600
buttons right into something.

569
00:24:18,600 --> 00:24:19,500
Let's say the button.

570
00:24:19,500 --> 00:24:21,400
Let's let's say that we have over time.

571
00:24:21,400 --> 00:24:27,500
If this was a diagram of our a button, this is is this is a up and

572
00:24:27,500 --> 00:24:30,100
this is down for a button if over the course.

573
00:24:30,200 --> 00:24:32,700
First of the frame, it started up press it down.

574
00:24:32,700 --> 00:24:33,500
Went up again.

575
00:24:33,500 --> 00:24:34,100
They left it up.

576
00:24:34,100 --> 00:24:36,800
They pressed it down again and it went up, they press it down.

577
00:24:36,900 --> 00:24:38,500
Right then.

578
00:24:38,500 --> 00:24:42,300
Basically, I know that I can encode this signal.

579
00:24:42,400 --> 00:24:45,800
Right this like, up, down, up, down up down, kind of a signal, right.

580
00:24:46,100 --> 00:24:49,600
I know that I can encode the signal by just saying, how many of the

581
00:24:49,600 --> 00:24:51,400
transitions I went through, right?

582
00:24:51,500 --> 00:24:55,200
I can just say, how many times it went from up to down, or down to up.

583
00:24:55,200 --> 00:24:58,800
I can just treat that I can treat that as one or transition.

584
00:24:58,900 --> 00:24:59,900
Or I can count half.

585
00:25:00,100 --> 00:25:01,300
Transitions, right?

586
00:25:01,300 --> 00:25:04,300
I can count down to up and up to down, I can count that.

587
00:25:04,300 --> 00:25:08,500
So it'd be a basically two transitions or two, half transitions per

588
00:25:08,500 --> 00:25:09,500
press, right?

589
00:25:09,500 --> 00:25:10,300
Half Transitions.

590
00:25:10,500 --> 00:25:15,100
And if I encode it as half transitions, I can basically say, well all

591
00:25:15,100 --> 00:25:18,400
I need to really know is what state the button is at the end.

592
00:25:18,400 --> 00:25:20,700
And then I know the number of half, transitions tells me what the

593
00:25:20,700 --> 00:25:21,700
state was the beginning.

594
00:25:21,900 --> 00:25:25,700
So basically I have two things I need which is is the button down now

595
00:25:25,700 --> 00:25:28,800
and how many Taff transitions did it go through for the course of this

596
00:25:28,800 --> 00:25:30,000
Frame, right?

597
00:25:30,200 --> 00:25:34,000
So what I want to know here is basically, okay.

598
00:25:35,200 --> 00:25:42,600
Do I ever actually care about subframe resolution for the button being

599
00:25:42,600 --> 00:25:43,900
held down?

600
00:25:44,900 --> 00:25:45,300
Right?

601
00:25:45,300 --> 00:25:47,600
Because what I lose by encoding it this way.

602
00:25:47,600 --> 00:25:52,100
What I lose in this encoding is if the user was able to differentiate

603
00:25:52,100 --> 00:25:56,400
between say a hundred and twentieth of a second press, That's this

604
00:25:56,400 --> 00:25:56,900
long.

605
00:25:57,400 --> 00:26:02,500
And one that's like a 240th of a s press which is like that long or

606
00:26:02,500 --> 00:26:02,900
something.

607
00:26:02,900 --> 00:26:03,200
Right?

608
00:26:03,200 --> 00:26:03,700
I don't know.

609
00:26:03,800 --> 00:26:04,800
I'm drawing, this poorly.

610
00:26:05,000 --> 00:26:07,800
This diagram has gotten out of control, but you basically know what I

611
00:26:07,800 --> 00:26:08,000
mean.

612
00:26:08,000 --> 00:26:11,500
If I, if this was our, if this was our time here, right?

613
00:26:11,800 --> 00:26:14,500
And I've got this is 1/60 of a

614
00:26:14,700 --> 00:26:16,100
Can't right here, right?

615
00:26:16,600 --> 00:26:20,300
Then as I go through this, if I was to look at the the button press

616
00:26:20,300 --> 00:26:21,000
going from up.

617
00:26:21,000 --> 00:26:24,800
So if the button is up and then it goes down for a whole 1/20 of a

618
00:26:24,800 --> 00:26:25,300
second.

619
00:26:25,300 --> 00:26:26,400
This region right here.

620
00:26:26,500 --> 00:26:29,900
Do I want to differentiate between that and something that just looks

621
00:26:30,000 --> 00:26:31,300
like this right?

622
00:26:31,300 --> 00:26:34,900
Where it sits down for only half that time.

623
00:26:35,400 --> 00:26:39,700
And my answer to that is I don't think any player can even do that,

624
00:26:39,700 --> 00:26:40,200
right?

625
00:26:40,300 --> 00:26:43,400
Players can't really distinguish between a press.

626
00:26:43,400 --> 00:26:44,500
That's a 60th of a second.

627
00:26:44,600 --> 00:26:46,000
And a 30th of a second.

628
00:26:46,700 --> 00:26:50,400
Maybe they couldn't a 15th of a second, but intentionally, that's not

629
00:26:50,400 --> 00:26:52,600
really the case when we're talking about the difference between a

630
00:26:52,600 --> 00:26:56,800
button hold and not, we're talking about a hold across many frames.

631
00:26:56,800 --> 00:26:57,400
I think.

632
00:26:57,400 --> 00:26:59,300
So, I'll hold is going to be, you know.

633
00:27:00,300 --> 00:27:04,000
A quarter of a second or something like this or an eighth of a second

634
00:27:04,300 --> 00:27:06,100
and that's going to be across many frames.

635
00:27:06,800 --> 00:27:10,300
So at that point, I tend to kind of think of it as well.

636
00:27:10,800 --> 00:27:14,300
I don't really think I want to try and track that and I don't know if

637
00:27:14,300 --> 00:27:17,400
most operating systems are even going to give me anything at an

638
00:27:17,400 --> 00:27:20,300
accuracy, that would even let me see that.

639
00:27:20,400 --> 00:27:23,300
So I think it's probably just a waste of time to encode it.

640
00:27:26,600 --> 00:27:27,200
Okay.

641
00:27:28,500 --> 00:27:31,500
So what I'm going to say is, I basically just want to try something

642
00:27:31,500 --> 00:27:34,900
that's basically like the a button started down, you know?

643
00:27:35,200 --> 00:27:39,100
And and the a button half transition count and that's all I'm going to

644
00:27:39,100 --> 00:27:40,100
do per button.

645
00:27:40,200 --> 00:27:42,600
So we had four buttons we have for those, right?

646
00:27:42,600 --> 00:27:45,400
So I'm just going to go through those and we don't actually use the

647
00:27:45,400 --> 00:27:46,500
button right now, for anything.

648
00:27:46,500 --> 00:27:48,300
We'll have to invent something for it to do.

649
00:27:48,900 --> 00:27:51,900
But basically I guess what we'll do is we can do something like a know

650
00:27:51,900 --> 00:27:55,300
and I wanted ended down not started down basically for now.

651
00:27:55,300 --> 00:27:58,100
What I'll do is since we don't have anything else to do right now.

652
00:27:58,500 --> 00:28:02,900
I'll basically just say that if the a button ended down, I will, I

653
00:28:02,900 --> 00:28:05,400
will make on any frame where your swear.

654
00:28:05,400 --> 00:28:06,400
You're still holding it.

655
00:28:06,500 --> 00:28:11,200
I'll make the green offset, kind of increment by 1 or something like

656
00:28:11,200 --> 00:28:11,400
that.

657
00:28:11,400 --> 00:28:12,400
Let's say, just for now.

658
00:28:12,400 --> 00:28:15,100
It's not a good example of doing anything useful.

659
00:28:15,400 --> 00:28:17,500
Once we get some like projectiles or something.

660
00:28:17,500 --> 00:28:18,800
We can start doing some real code.

661
00:28:18,800 --> 00:28:19,100
In there.

662
00:28:19,100 --> 00:28:22,000
We look at the half transition count and launched as many as we

663
00:28:22,000 --> 00:28:25,000
should, and things like that, but for now, we're not going to do that.

664
00:28:25,100 --> 00:28:26,400
Alright, so we did that, right?

665
00:28:26,400 --> 00:28:28,100
We've got the a button-down and a half.

666
00:28:28,200 --> 00:28:28,800
Encount.

667
00:28:28,800 --> 00:28:30,100
That's what I'd like to do four buttons.

668
00:28:30,200 --> 00:28:33,800
Now the stick and the stick is a little more complicated because it

669
00:28:33,800 --> 00:28:35,400
depends what we're going to want to do with it.

670
00:28:35,500 --> 00:28:37,500
If we had a d-pad and be a little clearer.

671
00:28:37,600 --> 00:28:40,100
I think if we knew that we were going to be on a machine that had a

672
00:28:40,100 --> 00:28:40,900
good d-pad.

673
00:28:40,900 --> 00:28:43,600
I might want to do stuff like allow you to do that.

674
00:28:43,600 --> 00:28:45,500
Old Dash thing that people used to be able to do.

675
00:28:45,500 --> 00:28:47,900
Do you know, the one I'm talking about where they basically could like

676
00:28:47,900 --> 00:28:51,000
double click this thing in a direction and you dodge.

677
00:28:54,000 --> 00:28:55,300
You know, I'd love to have that.

678
00:28:55,300 --> 00:28:59,000
I'm worried that that is too difficult to do.

679
00:28:59,600 --> 00:29:03,400
Basically I'm worried that's a little bit too difficult to do with an

680
00:29:03,400 --> 00:29:04,100
analogue stick.

681
00:29:04,100 --> 00:29:08,300
I don't know what I do know is analog sticks are so clumsy that no

682
00:29:08,300 --> 00:29:12,000
one's probably going to be able to do much in a 60th of a second with

683
00:29:12,000 --> 00:29:12,400
that.

684
00:29:12,900 --> 00:29:16,400
But the reason that I mention it is because I'm a little worried about

685
00:29:16,400 --> 00:29:19,200
how to capture that motion.

686
00:29:20,300 --> 00:29:22,200
If we were going to do quick dodges.

687
00:29:22,300 --> 00:29:25,900
Oh and the reason I say that is basically because if you think about

688
00:29:25,900 --> 00:29:29,400
what we're trying to do here, let's say we were pulling fairly

689
00:29:29,500 --> 00:29:30,300
frequently.

690
00:29:30,600 --> 00:29:32,300
We got a 60th of a second here.

691
00:29:32,500 --> 00:29:32,800
Right?

692
00:29:32,800 --> 00:29:36,400
We've got this 60th a second and basically let's say we were pulling

693
00:29:36,400 --> 00:29:41,500
it, some kind of a thing like a 1,000 samples, a second.

694
00:29:41,600 --> 00:29:42,200
Right?

695
00:29:42,300 --> 00:29:48,300
So basically we're talking about we're talking about having a thousand

696
00:29:48,300 --> 00:29:52,200
samples of s and we've got 60 buckets into which those can fall.

697
00:29:52,300 --> 00:29:52,500
All.

698
00:29:52,500 --> 00:29:57,500
So there's actually 16 samples like this, right?

699
00:30:00,200 --> 00:30:05,000
That that that that dot dot dot da.

700
00:30:05,400 --> 00:30:05,800
Okay.

701
00:30:05,900 --> 00:30:06,800
There's our samples.

702
00:30:07,500 --> 00:30:16,700
123456789 Loops 1 2 3 4 5 6 7 8 9 10 11 12, 13 14 15 16.

703
00:30:16,900 --> 00:30:19,900
So they each go one sample in each of these buckets, right?

704
00:30:20,000 --> 00:30:22,100
We got a stick position in each of these buckets.

705
00:30:22,700 --> 00:30:25,700
So let's say that we were pulling at some ungodly frequency because

706
00:30:25,700 --> 00:30:26,600
we're trying to be mr.

707
00:30:26,600 --> 00:30:27,900
Amazing action game.

708
00:30:28,100 --> 00:30:29,800
And we've got some crazy.

709
00:30:30,000 --> 00:30:35,000
You know the dude spent eight thousand dollars on his razor massive

710
00:30:35,000 --> 00:30:37,800
joystick thing that pulls perfectly and for Street Fighter.

711
00:30:37,800 --> 00:30:38,900
He's playing at Evo.

712
00:30:38,900 --> 00:30:40,100
God knows what's going on.

713
00:30:40,500 --> 00:30:44,000
We're trying to do that and we basically want to look at this and say

714
00:30:44,000 --> 00:30:44,600
well, okay.

715
00:30:44,600 --> 00:30:48,300
So what happened here was he started wailing the stick right here.

716
00:30:48,600 --> 00:30:53,600
So basically the stick at this point and so from this point to this

717
00:30:53,600 --> 00:30:59,000
point went from neutral, right to basically wailed all the way over.

718
00:30:59,000 --> 00:30:59,900
He just full-on slut.

719
00:31:00,000 --> 00:31:01,500
And it and he's got magic fingers.

720
00:31:01,500 --> 00:31:06,300
So it went really quick then he released the stick and it returned 20

721
00:31:06,300 --> 00:31:07,500
here, right?

722
00:31:08,400 --> 00:31:12,000
Well, the problem with this is, if I'm trying to text it, if I average

723
00:31:12,000 --> 00:31:14,800
the stick value over this time or something to pass to the game.

724
00:31:15,000 --> 00:31:19,600
I'm going to get an average that's like somewhere, you know, in the

725
00:31:19,600 --> 00:31:21,800
middle of that range, right?

726
00:31:22,200 --> 00:31:26,100
And this could happen even in a wonky way across frames, you know, you

727
00:31:26,100 --> 00:31:29,800
could imagine something where, like, I've got a situation like this,

728
00:31:30,300 --> 00:31:35,000
where the stick was held this way, across two frames, but here it's

729
00:31:35,000 --> 00:31:35,600
dead.

730
00:31:35,700 --> 00:31:37,500
And here it's dead, right?

731
00:31:37,500 --> 00:31:38,100
This

732
00:31:38,200 --> 00:31:42,300
And the average of these is going to be something that never shows,

733
00:31:42,300 --> 00:31:44,800
the stick fully wailed, right?

734
00:31:44,800 --> 00:31:46,500
It's always going to be halfway old.

735
00:31:46,500 --> 00:31:47,900
And in know, who cares about half wailing.

736
00:31:47,900 --> 00:31:50,100
Nobody half, Wales the stick, that's not even a phrase.

737
00:31:50,100 --> 00:31:50,800
No one's ever said.

738
00:31:50,800 --> 00:31:52,200
I have failed my name pad.

739
00:31:52,200 --> 00:31:52,900
That's not a thing.

740
00:31:56,400 --> 00:31:56,800
Hmm.

741
00:31:57,300 --> 00:31:59,300
Got that kind of caught your kind of caught a little bit.

742
00:31:59,300 --> 00:32:00,700
You see that, you got to hold it back.

743
00:32:00,800 --> 00:32:01,100
You got it.

744
00:32:01,100 --> 00:32:02,200
This is how you do it.

745
00:32:02,300 --> 00:32:05,200
If you got one of these bottles, you got to hold that back.

746
00:32:05,200 --> 00:32:07,900
And then you, you know what?

747
00:32:07,900 --> 00:32:08,100
I'm

748
00:32:08,200 --> 00:32:10,100
Saying those of you have these know what I'm talking about.

749
00:32:10,100 --> 00:32:12,000
Otherwise it gets up in their gets all up in your face.

750
00:32:12,000 --> 00:32:13,700
And there's nothing you can do about, it's too late.

751
00:32:13,700 --> 00:32:15,800
That point is no recovery possible.

752
00:32:15,800 --> 00:32:16,400
All right.

753
00:32:16,800 --> 00:32:20,700
So basically, what I, what I'm worried about here, if we were, if we

754
00:32:20,700 --> 00:32:25,900
were just doing, you know, a lot tip, my hand too much here.

755
00:32:25,900 --> 00:32:31,700
But let's just say that Legend of Zelda or Binding of Isaac, were in

756
00:32:31,700 --> 00:32:32,700
the realm of things.

757
00:32:32,700 --> 00:32:36,700
We were trying to do here, and we want to move a little character

758
00:32:36,700 --> 00:32:38,100
around the environment in like, a

759
00:32:38,200 --> 00:32:41,800
Top down any kind of way if all we were doing was cloning those sorts

760
00:32:41,800 --> 00:32:42,500
of games.

761
00:32:42,600 --> 00:32:43,400
Exactly.

762
00:32:43,400 --> 00:32:46,500
I would say, does not matter, that kind of stick move.

763
00:32:46,500 --> 00:32:47,300
It does not matter.

764
00:32:47,300 --> 00:32:50,200
We'll just pass the average stick and we will be fine.

765
00:32:50,600 --> 00:32:53,200
But because like I said, not tipping, my hand too much.

766
00:32:53,200 --> 00:32:55,500
I'm not really doing exactly that.

767
00:32:55,600 --> 00:32:58,900
Or at least I'm not planning on doing exactly that kind of a thing.

768
00:33:00,200 --> 00:33:02,800
We have a little bit more to worry about because I might want to try

769
00:33:02,800 --> 00:33:07,000
to get some stuff working that involves these kind of tap motions at a

770
00:33:07,000 --> 00:33:07,700
quick Tap.

771
00:33:07,700 --> 00:33:12,100
Maybe not a double tap it at least that one quick tap, so.

772
00:33:14,600 --> 00:33:15,700
What am I going to do?

773
00:33:15,900 --> 00:33:17,800
What am I going to do?

774
00:33:19,000 --> 00:33:22,500
And the answer is, I think for purposes of this.

775
00:33:22,500 --> 00:33:27,800
I'm going to go with a stick interval and this may be a bad idea.

776
00:33:27,800 --> 00:33:31,100
It may be that I should just shove 16 samples down the thing at a

777
00:33:31,100 --> 00:33:31,400
time.

778
00:33:31,400 --> 00:33:33,400
It may be that I should switch to an event thing.

779
00:33:33,400 --> 00:33:35,400
Like I said, but I don't know.

780
00:33:36,000 --> 00:33:37,000
I'm not sure.

781
00:33:37,000 --> 00:33:39,900
I think I might just want to go with some kind of stick interval.

782
00:33:40,100 --> 00:33:43,400
So you can kind of see how far the stick move that kind of a thing.

783
00:33:43,400 --> 00:33:43,700
So like

784
00:33:43,800 --> 00:33:46,500
Min max sort of a thing if that makes sense.

785
00:33:46,600 --> 00:33:49,800
And so what I think I'm going to do is I'm just going to go with an

786
00:33:49,800 --> 00:33:56,300
input kind of thing where it's like we've got a Min X and like and

787
00:33:56,300 --> 00:34:00,200
like a Min y kind of a thing and they'll have Max as well for the

788
00:34:00,200 --> 00:34:02,100
stick that kind of a thing, right?

789
00:34:02,100 --> 00:34:05,800
So that I can basically see where the Min and the max was and then

790
00:34:05,800 --> 00:34:08,199
maybe where you ended on, right?

791
00:34:08,199 --> 00:34:12,000
And so the same as before, you know, end X, right?

792
00:34:12,100 --> 00:34:13,600
And I could even do a scar decks as well.

793
00:34:13,699 --> 00:34:16,100
Well, so we can basically see where it started, where it was in the

794
00:34:16,100 --> 00:34:17,400
Middle, where it ended, right?

795
00:34:17,400 --> 00:34:18,300
That kind of a thing.

796
00:34:19,199 --> 00:34:24,400
I do know, like I said, experimenting totally being experimental here.

797
00:34:24,500 --> 00:34:26,699
Not saying this is the right way to make a game.

798
00:34:26,900 --> 00:34:29,500
Not even saying this is the right way to make this game.

799
00:34:29,699 --> 00:34:32,900
I'm just saying that's what I'm going to try and we're going to see

800
00:34:33,100 --> 00:34:34,000
how it works.

801
00:34:34,199 --> 00:34:36,900
So, how does that work in practice here?

802
00:34:36,900 --> 00:34:38,199
I want to write the usage code.

803
00:34:38,199 --> 00:34:38,800
First.

804
00:34:39,100 --> 00:34:41,400
I want to basically take our tone hurts, right?

805
00:34:41,400 --> 00:34:42,900
I'm going to take our tone hurts here.

806
00:34:43,000 --> 00:34:43,600
I want to update.

807
00:34:43,900 --> 00:34:44,500
That.

808
00:34:44,699 --> 00:34:48,300
So I'm basically going to take the tone hurts and say that the the

809
00:34:48,300 --> 00:34:54,300
tone Hertz is going to be plus it, plus some small amount of Wiggle.

810
00:34:54,699 --> 00:34:58,400
Basically, that's going to be it's going to be on there, right?

811
00:34:58,600 --> 00:35:00,800
I'm going to do this in floating point because as you'll see, we're

812
00:35:00,800 --> 00:35:03,600
going to actually start moving, almost everything to floating-point

813
00:35:03,700 --> 00:35:05,900
pretty soon, but we're still an integer here.

814
00:35:05,900 --> 00:35:09,300
So I'm just casting back to it for a sake of our tone hurts again.

815
00:35:09,300 --> 00:35:12,200
One thing at a time, always one thing time, and I'm just going to go

816
00:35:12,200 --> 00:35:13,600
ahead and say that, whatever it ended.

817
00:35:13,700 --> 00:35:16,900
Adan again, because that's the easiest thing for me to do at all times

818
00:35:17,200 --> 00:35:20,700
and we can trivially test to make sure our thing is working at all by

819
00:35:20,800 --> 00:35:23,800
like sort of going there, right by getting that to work.

820
00:35:24,000 --> 00:35:26,900
So I'm gonna make our town hurts, be that, and then I'm going to make

821
00:35:26,900 --> 00:35:32,800
our blue offset B plus equal to, let's say whatever the intent is of,

822
00:35:33,700 --> 00:35:34,200
I don't know.

823
00:35:34,200 --> 00:35:40,300
Let's say up to 4 pixels at a time, maybe times whatever that that

824
00:35:40,300 --> 00:35:41,000
stick is.

825
00:35:42,100 --> 00:35:42,500
What is that?

826
00:35:42,500 --> 00:35:43,600
Stick going to be that?

827
00:35:43,700 --> 00:35:46,900
It is going to be and why location, right?

828
00:35:47,400 --> 00:35:49,800
And that is what I think I'm going to want.

829
00:35:49,900 --> 00:35:52,900
That should basically work for the most part.

830
00:35:52,900 --> 00:35:57,300
I think except for the fact that I don't actually have anything to

831
00:35:57,300 --> 00:35:59,500
find yet, but it looks good to me.

832
00:36:00,600 --> 00:36:03,500
I'm gonna go ahead and say game input is here.

833
00:36:04,100 --> 00:36:07,800
And basically what I want to do is I want to blow this out a little

834
00:36:07,800 --> 00:36:12,100
bit because I feel like we're going to have a situation where well,

835
00:36:12,100 --> 00:36:18,000
you know, what if we want to support multiple players, right?

836
00:36:18,500 --> 00:36:20,300
What if I want more than one player time?

837
00:36:21,000 --> 00:36:24,000
Basically, what I want to do is say well this input thing whatever the

838
00:36:24,000 --> 00:36:28,100
input thing is the input equals like, you know, the player one input,

839
00:36:28,100 --> 00:36:28,600
right?

840
00:36:28,700 --> 00:36:29,800
I want to be able to get just play.

841
00:36:30,000 --> 00:36:33,000
ER one, let's say for now later, we'd have a way to like join in know

842
00:36:33,000 --> 00:36:36,400
who was joining, but we kind of want Player, 1 input, probably, and

843
00:36:36,400 --> 00:36:38,500
then we just kind of go and say, well, whatever player.

844
00:36:38,500 --> 00:36:41,600
One input actually is then then we'll do that.

845
00:36:41,600 --> 00:36:48,100
So, maybe input is like a game controller input, and we get that back.

846
00:36:48,300 --> 00:36:52,400
We some, we take the random thing, we say, input, and we say input, I

847
00:36:52,400 --> 00:36:53,600
guess we should say zero.

848
00:36:53,900 --> 00:36:55,800
So player input 0, something like that.

849
00:36:55,800 --> 00:36:58,200
I'll just, you know, grab out of an array of inputs.

850
00:36:58,600 --> 00:36:59,800
That will say, well, how are you?

851
00:37:00,000 --> 00:37:04,700
Players, we support may be 0 may be one and then I'll say we know that

852
00:37:04,700 --> 00:37:05,700
that's accurate.

853
00:37:05,700 --> 00:37:06,200
Right?

854
00:37:06,600 --> 00:37:07,200
There we go.

855
00:37:07,700 --> 00:37:09,300
We know that that's going to work.

856
00:37:09,300 --> 00:37:10,800
So I don't really have to test anything.

857
00:37:11,100 --> 00:37:13,500
Then this is going to be a pointer input 0.

858
00:37:14,000 --> 00:37:15,400
I want to know if it's analog or not.

859
00:37:15,400 --> 00:37:17,000
I'm not really doing anything with that yet, though.

860
00:37:17,100 --> 00:37:20,300
Well, there is one thing I could do, which we could we could play

861
00:37:20,300 --> 00:37:22,200
around with which is which one of these were going to do.

862
00:37:22,600 --> 00:37:26,800
So, for the moment, we could say that, you know, will use is analog

863
00:37:26,800 --> 00:37:27,200
there.

864
00:37:27,300 --> 00:37:28,400
Let's do that.

865
00:37:28,700 --> 00:37:29,400
That'll be good.

866
00:37:29,400 --> 00:37:29,800
And then

867
00:37:29,900 --> 00:37:32,700
I will also do our button thing that happens.

868
00:37:32,700 --> 00:37:34,200
Whether it's analog or not.

869
00:37:34,200 --> 00:37:37,200
We'll do the digital movement there and just try to think through, if

870
00:37:37,200 --> 00:37:39,200
there's anything else we needed, that's fine.

871
00:37:39,600 --> 00:37:41,800
A button into down that all looks pretty good to me.

872
00:37:42,200 --> 00:37:44,200
So I'm going to say, let's go with that for now.

873
00:37:44,300 --> 00:37:46,400
Let's just see how that works.

874
00:37:46,800 --> 00:37:49,800
Make sure that there's nothing particularly surprising going on in

875
00:37:49,800 --> 00:37:50,200
there.

876
00:37:50,600 --> 00:37:51,600
We'll just see how that works.

877
00:37:51,600 --> 00:37:54,800
So, I'm going to say, we've got this game controller input thing, the

878
00:37:54,800 --> 00:37:58,500
game controller input is going to have the things that I talked about.

879
00:37:58,500 --> 00:37:59,800
I also probably want something

880
00:38:00,000 --> 00:38:06,800
Like this game button state that will have the half transition count

881
00:38:07,400 --> 00:38:10,200
and the ended down flag.

882
00:38:10,400 --> 00:38:12,200
That's actually going to be a Boolean for now.

883
00:38:12,500 --> 00:38:14,000
So I've got some button States.

884
00:38:14,200 --> 00:38:17,500
I know that I wanted I think I said that I wanted six buttons on this

885
00:38:17,500 --> 00:38:21,400
thing, the two shoulders, and the a xyb.

886
00:38:21,500 --> 00:38:24,200
Now, I don't know how I want those to be right now.

887
00:38:24,400 --> 00:38:29,800
I am not sure so I'm just going to call these up down left.

888
00:38:29,900 --> 00:38:31,100
Left, right.

889
00:38:31,300 --> 00:38:32,000
Let's see.

890
00:38:32,000 --> 00:38:38,200
And then left shoulder and right Loops, right?

891
00:38:38,200 --> 00:38:39,700
Shoulder like that.

892
00:38:39,900 --> 00:38:40,700
I'm just going to say that.

893
00:38:40,700 --> 00:38:42,100
That's what those are for.

894
00:38:42,100 --> 00:38:42,600
Now.

895
00:38:42,900 --> 00:38:44,500
We might want to put them in an array later.

896
00:38:44,500 --> 00:38:47,500
If we decide to, if we decide we want to, if it makes things easier, I

897
00:38:47,500 --> 00:38:51,000
could also make a union out of these, I could do something fancy.

898
00:38:51,000 --> 00:38:54,800
For example, I could do this if I was mr.

899
00:38:54,900 --> 00:38:59,300
Crazy town and wanted them to be accessible in both ways.

900
00:38:59,500 --> 00:38:59,800
I could.

901
00:39:00,000 --> 00:39:01,800
Do something like this?

902
00:39:03,000 --> 00:39:04,600
I don't know if that makes any sense to you.

903
00:39:04,600 --> 00:39:05,600
When you take a look at it.

904
00:39:05,600 --> 00:39:09,500
Maybe I'll do it just so you can see how that's going assuming that I

905
00:39:09,500 --> 00:39:10,200
type that in, right?

906
00:39:10,200 --> 00:39:11,100
We'll see you in a second.

907
00:39:11,100 --> 00:39:14,800
The game input will just have a bunch of these controllers because we

908
00:39:14,800 --> 00:39:16,300
might want to have some controllers.

909
00:39:16,500 --> 00:39:20,100
Let's just say the thieves are the I guess we should call them

910
00:39:20,100 --> 00:39:22,700
controllers not players because they're not really mapped two players

911
00:39:22,700 --> 00:39:24,800
will say that we support for controllers coming in.

912
00:39:25,400 --> 00:39:28,500
We're going to maybe need to do some work on that in the future to

913
00:39:28,500 --> 00:39:29,600
make that a little more robust.

914
00:39:30,000 --> 00:39:32,300
Being on the circumstances, but we'll just say that's good.

915
00:39:32,600 --> 00:39:34,700
And then we'll just do controllers there.

916
00:39:34,700 --> 00:39:34,900
Right?

917
00:39:34,900 --> 00:39:38,100
And so that's sort of what I'm thinking, then we obviously have some

918
00:39:38,100 --> 00:39:39,700
floating Point values here.

919
00:39:40,000 --> 00:39:42,900
The floating Point values, are the stick X and stick.

920
00:39:42,900 --> 00:39:46,800
Why there's some stuff that I probably want to do with that in the

921
00:39:46,800 --> 00:39:51,100
future, but I'm going to leave those as x + y, is right now because we

922
00:39:51,100 --> 00:39:55,400
haven't really talked about vectors and don't want to jump right in

923
00:39:55,400 --> 00:39:59,700
with vectors if we're not ready for them yet min.

924
00:40:00,000 --> 00:40:07,200
X Min y but those of you who know know what vectors are you pretty

925
00:40:07,200 --> 00:40:08,000
much know.

926
00:40:08,100 --> 00:40:09,100
You can see it coming.

927
00:40:09,400 --> 00:40:12,400
I think when you look at that right there, you're pretty much going to

928
00:40:12,400 --> 00:40:14,900
know what I'm talking about when I say the vectors are coming.

929
00:40:15,200 --> 00:40:19,700
Alright, so Hoops for a little semicolon there.

930
00:40:20,400 --> 00:40:26,200
I gotta actually pass this stuff to the actual thing.

931
00:40:26,200 --> 00:40:29,800
So going to need to pass my game in.

932
00:40:29,900 --> 00:40:36,700
Input and we'll just go ahead and send that in this way nice and clean

933
00:40:37,000 --> 00:40:41,500
and we will delete those extraneous erroneous parameters.

934
00:40:41,500 --> 00:40:44,800
We now have that going for us put that in there.

935
00:40:45,200 --> 00:40:47,100
Lovely lovely, lovely.

936
00:40:47,800 --> 00:40:50,500
Like one of those cooking shows when they put in like the basil and

937
00:40:50,500 --> 00:40:53,700
they're like, you know, starting to smell delicious.

938
00:40:53,700 --> 00:40:54,000
You can.

939
00:40:54,200 --> 00:40:57,500
You could almost just feel the aroma of the fresh pasta and they say

940
00:40:57,500 --> 00:40:58,300
all these things right?

941
00:40:58,300 --> 00:40:59,800
And you get really excited about it and you're like, wow.

942
00:41:00,000 --> 00:41:02,400
And I'm not going to eat that at the end.

943
00:41:02,500 --> 00:41:06,100
That's one of the things we have ladies and gentlemen, over a cooking

944
00:41:06,100 --> 00:41:06,300
show.

945
00:41:06,300 --> 00:41:09,000
If you think about it, you are going to get to play the game.

946
00:41:09,000 --> 00:41:10,400
The actual game at the end.

947
00:41:10,400 --> 00:41:12,100
You even get to have the source code at the end.

948
00:41:12,200 --> 00:41:16,100
You it's like the cooking show reaches out and hands you the pasta.

949
00:41:17,900 --> 00:41:19,000
How cool is that?

950
00:41:19,600 --> 00:41:20,100
I mean, yes.

951
00:41:20,100 --> 00:41:21,500
Okay, I charge $15 for it.

952
00:41:21,500 --> 00:41:22,100
I apologize.

953
00:41:22,100 --> 00:41:25,600
It is actually a commercial product but that you can't you can't like

954
00:41:25,700 --> 00:41:27,400
pay $15 and get the food in the cooking show.

955
00:41:27,400 --> 00:41:29,500
Which by the way, I would probably do.

956
00:41:29,800 --> 00:41:32,100
If you could do that just kind of came to you guys like a download

957
00:41:32,100 --> 00:41:33,600
link and you could like get the pasta.

958
00:41:33,600 --> 00:41:37,200
It'd be like, I want to buy that when they have replicators of Star

959
00:41:37,200 --> 00:41:39,800
Trek, works in the future and you just like, have like Gordon Ramsay,

960
00:41:39,800 --> 00:41:42,500
cook some stuff and you push the button and like it charges, you 15

961
00:41:42,500 --> 00:41:46,300
bucks, but you get this whole meal like that's like going to be

962
00:41:46,400 --> 00:41:47,500
totally crazy.

963
00:41:47,600 --> 00:41:49,400
Right, like how awesome is that going to be?

964
00:41:49,400 --> 00:41:51,900
Of course, it make it harder to make cooking shows because the stuff

965
00:41:51,900 --> 00:41:54,100
comes out and tastes lousy everyone at home knows.

966
00:41:54,100 --> 00:41:55,900
Now, they can just lie basically, right?

967
00:41:55,900 --> 00:41:57,600
And be like, oh, it tastes delicious.

968
00:41:57,600 --> 00:41:59,000
Maybe it tastes terrible, right?

969
00:41:59,000 --> 00:41:59,700
And you don't know.

970
00:42:00,200 --> 00:42:01,200
But anyway, so that's this.

971
00:42:01,200 --> 00:42:02,000
All, we're just.

972
00:42:02,000 --> 00:42:04,500
That's where like one step ahead of the Food Network here on Twitch.

973
00:42:04,500 --> 00:42:06,100
Okay, that's that's where we're at.

974
00:42:06,200 --> 00:42:07,300
So, this is some good stuff.

975
00:42:07,600 --> 00:42:10,200
This is, this is this is the future that isn't gentleman's the future.

976
00:42:11,200 --> 00:42:13,400
It's the future of food in a roundabout way.

977
00:42:13,700 --> 00:42:16,400
Alright, so basically where we're at is we're just going to have to

978
00:42:16,400 --> 00:42:20,700
now do the porting work necessary to shove this stuff down to the game

979
00:42:20,800 --> 00:42:23,300
from the platform layer, which shouldn't be too hard for got one of

980
00:42:23,300 --> 00:42:25,000
the things I wanted which was analog.

981
00:42:25,000 --> 00:42:28,500
So each controller is going to have a Boolean up on top, which is

982
00:42:28,500 --> 00:42:29,200
analog.

983
00:42:29,400 --> 00:42:29,800
There we go.

984
00:42:30,000 --> 00:42:30,300
Go.

985
00:42:30,600 --> 00:42:31,500
That's fine.

986
00:42:32,400 --> 00:42:33,500
What is the problem?

987
00:42:33,500 --> 00:42:35,200
Not a member of controller input.

988
00:42:35,300 --> 00:42:36,500
What are you talking about?

989
00:42:36,500 --> 00:42:42,200
Did I mess that up is analog.

990
00:42:42,200 --> 00:42:43,000
Oh nice.

991
00:42:43,200 --> 00:42:44,500
Then put the is in front of it.

992
00:42:44,700 --> 00:42:46,000
That's not going to help anyone.

993
00:42:46,500 --> 00:42:50,900
Okay, and so this is ended down.

994
00:42:51,300 --> 00:42:55,400
So we've basically got whatever the a button is the button that points

995
00:42:55,400 --> 00:42:55,800
down.

996
00:42:55,800 --> 00:42:59,300
So that's the down button on our controller.

997
00:43:00,000 --> 00:43:04,300
In game update and render now seems to take one of these.

998
00:43:04,400 --> 00:43:04,900
Okay.

999
00:43:05,400 --> 00:43:08,800
So this is going to be a real straightforward thing here.

1000
00:43:08,800 --> 00:43:10,800
This is not going to be particularly difficult.

1001
00:43:11,100 --> 00:43:11,900
Basically.

1002
00:43:11,900 --> 00:43:14,300
The only thing that we're going to have to do is for keyboard inputs.

1003
00:43:14,300 --> 00:43:17,300
Going to be a little janky and I'll show you why in a second.

1004
00:43:17,500 --> 00:43:21,200
But basically, what we can do here for the most part is we can just go

1005
00:43:21,200 --> 00:43:23,700
ahead and take this game button State.

1006
00:43:23,900 --> 00:43:27,600
I mean, I'm sorry game input, stay thing here and we can just cheese

1007
00:43:27,600 --> 00:43:28,200
out.

1008
00:43:28,600 --> 00:43:29,800
Cheese out entirely.

1009
00:43:29,900 --> 00:43:33,900
And go up here and say, all right, when we go to actually do, you know

1010
00:43:33,900 --> 00:43:34,900
our message or whatever?

1011
00:43:34,900 --> 00:43:38,000
Here's our input State, everything gets initialized to 0.

1012
00:43:38,000 --> 00:43:38,600
Why not?

1013
00:43:39,600 --> 00:43:42,900
For now, we're going to go with that later and basically in here we

1014
00:43:42,900 --> 00:43:47,000
can sort of do all the stuff that we said we were going to do now.

1015
00:43:47,000 --> 00:43:50,500
We only get we are only taking one sample per frame right now.

1016
00:43:50,600 --> 00:43:54,000
So it's trivial to set up the things that we want to set up like

1017
00:43:54,000 --> 00:43:55,000
really really trivial.

1018
00:44:01,200 --> 00:44:02,100
That almond milk.

1019
00:44:02,100 --> 00:44:02,700
All right.

1020
00:44:02,700 --> 00:44:04,800
I need to get some kind of endorsement for almond milk.

1021
00:44:05,000 --> 00:44:06,200
I like it so much.

1022
00:44:06,300 --> 00:44:07,900
I don't know how you drink the store brand.

1023
00:44:07,900 --> 00:44:08,300
That's a proud.

1024
00:44:08,300 --> 00:44:09,500
No one's ever gonna give you your.

1025
00:44:09,500 --> 00:44:10,900
Not going to get this week deals, right?

1026
00:44:10,900 --> 00:44:14,200
You're not going to get the NASCAR stuff where you got like the

1027
00:44:14,200 --> 00:44:16,300
emblems on you for the store brand, right?

1028
00:44:16,300 --> 00:44:18,100
Like nobody that, that doesn't happen.

1029
00:44:18,400 --> 00:44:19,700
And I just drink the store brand.

1030
00:44:19,700 --> 00:44:20,800
So that's yeah.

1031
00:44:20,800 --> 00:44:21,600
What are you gonna do?

1032
00:44:22,100 --> 00:44:22,900
What are you gonna do?

1033
00:44:22,900 --> 00:44:24,500
You got to sell out sometimes people.

1034
00:44:24,500 --> 00:44:25,300
That's the thing.

1035
00:44:25,700 --> 00:44:26,800
You got to sell out sometimes.

1036
00:44:26,800 --> 00:44:27,100
Alright.

1037
00:44:27,100 --> 00:44:30,100
So basically, we've got the d-pad up down left, right?

1038
00:44:30,200 --> 00:44:30,500
That's

1039
00:44:30,600 --> 00:44:31,900
Our stick situation.

1040
00:44:32,100 --> 00:44:36,800
So we basically going to have to handle these four are stick and and

1041
00:44:36,800 --> 00:44:37,800
take a look at those.

1042
00:44:37,800 --> 00:44:38,600
We have some stuff.

1043
00:44:38,600 --> 00:44:41,400
We need to think about in terms of how we're going to handle that, but

1044
00:44:41,400 --> 00:44:44,600
we'll think about that in a second namely, what the analog, how we

1045
00:44:44,600 --> 00:44:47,300
want to answer analog for something that could be using both the

1046
00:44:47,300 --> 00:44:52,500
analog or not analog hard to say, so we'll take a look at that in a

1047
00:44:52,500 --> 00:44:53,100
second.

1048
00:44:53,700 --> 00:44:57,200
We will also go here and do the button so the button should be pretty

1049
00:44:57,200 --> 00:44:57,700
easy.

1050
00:44:57,900 --> 00:44:59,800
Basically, we can just do something.

1051
00:45:00,300 --> 00:45:00,900
Like this.

1052
00:45:00,900 --> 00:45:03,400
So we can say for our input.

1053
00:45:04,800 --> 00:45:08,900
We have our button State and our button State just has this.

1054
00:45:09,100 --> 00:45:15,400
So the we have a half transition count and we have whether it ended

1055
00:45:15,400 --> 00:45:15,900
down.

1056
00:45:16,300 --> 00:45:17,400
This is our button.

1057
00:45:17,400 --> 00:45:18,800
Here are buttons direct.

1058
00:45:18,800 --> 00:45:20,300
There we go button.

1059
00:45:20,900 --> 00:45:21,400
Okay.

1060
00:45:21,700 --> 00:45:25,100
So basically what we need to do here is if the button ended down

1061
00:45:25,200 --> 00:45:28,000
really all we need to know is was it down before?

1062
00:45:28,200 --> 00:45:31,100
And if it was down before then there was a half transition.

1063
00:45:31,100 --> 00:45:32,900
If it wasn't down before then it wasn't

1064
00:45:35,300 --> 00:45:36,600
Really not a whole lot to it.

1065
00:45:37,100 --> 00:45:42,100
So basically all we actually need to do is say something like was it

1066
00:45:42,100 --> 00:45:43,600
down previously?

1067
00:45:43,700 --> 00:45:44,200
Right?

1068
00:45:44,200 --> 00:45:46,900
Like we don't know if it was down previously than the half transition.

1069
00:45:46,900 --> 00:45:48,400
Count is 1.

1070
00:45:48,500 --> 00:45:52,800
If it wasn't down previously, then it's 0 or I should say more

1071
00:45:52,800 --> 00:45:54,400
specifically if was it down?

1072
00:45:54,400 --> 00:45:57,500
Previously equals whether it's down now, right?

1073
00:45:57,600 --> 00:46:00,000
Something like that, right, make some sense.

1074
00:46:00,000 --> 00:46:01,100
Hopefully, that's pretty clear.

1075
00:46:01,500 --> 00:46:02,700
So, basically if the button was down,

1076
00:46:03,100 --> 00:46:03,200
SLI.

1077
00:46:03,200 --> 00:46:04,600
And now it's not that's a transition.

1078
00:46:04,600 --> 00:46:07,000
If it wasn't down previously, and now it is, that's a transition.

1079
00:46:07,100 --> 00:46:12,000
And then whether or not it ended down is just the state of the button.

1080
00:46:12,000 --> 00:46:15,500
So that's just going to be something that looks like that, right.

1081
00:46:15,900 --> 00:46:17,900
So what we can do we've got a lot of buttons here.

1082
00:46:17,900 --> 00:46:20,400
What I'd like to do is basically generalize that out so I don't have

1083
00:46:20,400 --> 00:46:21,700
to type it that many times.

1084
00:46:22,100 --> 00:46:25,300
So basically, what I'm going to do is I'm going to say something like

1085
00:46:25,300 --> 00:46:25,700
this.

1086
00:46:25,900 --> 00:46:29,500
I'm going to go up here and say, well, I've got an internal function

1087
00:46:29,700 --> 00:46:33,000
and that function is, you know, in

1088
00:46:33,200 --> 00:46:41,000
Maybe let's say, process process digital button or process xinput

1089
00:46:41,700 --> 00:46:42,400
digital button.

1090
00:46:42,400 --> 00:46:44,700
Let's say because that will basically.

1091
00:46:44,700 --> 00:46:45,800
Yeah, there we go.

1092
00:46:46,100 --> 00:46:50,600
So that will be our call here and it will take the information that we

1093
00:46:50,600 --> 00:46:53,200
need to do this press thing, and then we'll just call it for each one.

1094
00:46:53,400 --> 00:46:55,900
So this guy right here, I believe is the d word normally.

1095
00:46:55,900 --> 00:46:59,700
So this is the button bit that we've got button bit.

1096
00:46:59,800 --> 00:47:00,300
There we go.

1097
00:47:01,200 --> 00:47:02,900
We've got the button itself.

1098
00:47:03,100 --> 00:47:04,000
Which is this thing?

1099
00:47:04,200 --> 00:47:07,700
All right, this is the thing we're going to call this new state.

1100
00:47:07,700 --> 00:47:10,900
That's the result that we want to compute.

1101
00:47:10,900 --> 00:47:12,200
And then we're going to have to pass it.

1102
00:47:12,200 --> 00:47:15,700
The Old State as well because it needs to know whether it was down and

1103
00:47:15,700 --> 00:47:16,600
what's going on there, right?

1104
00:47:16,600 --> 00:47:17,700
That's going to have to happen.

1105
00:47:18,000 --> 00:47:19,100
So the half transition.

1106
00:47:19,100 --> 00:47:24,500
Count is basically going to be if the Old State ended down, right?

1107
00:47:25,600 --> 00:47:31,300
Let's just say and the new state ended down are not the same.

1108
00:47:31,300 --> 00:47:34,300
Then there was a transition, 1/2 transition up to down.

1109
00:47:34,500 --> 00:47:38,700
We're not pulling frequently enough to make that happen any

1110
00:47:38,700 --> 00:47:39,300
differently.

1111
00:47:39,600 --> 00:47:42,200
So in the future if we do up the polling rate, that's where we'll put

1112
00:47:42,200 --> 00:47:44,700
it and we can probably do that on a separate thread.

1113
00:47:44,700 --> 00:47:47,700
If we wanted to, I've never really tried that with xinput.

1114
00:47:47,700 --> 00:47:50,500
I'm not sure how effective it is, but maybe we can play with that and

1115
00:47:50,500 --> 00:47:53,400
see I don't know if you can turn on Buffer it in put in some of the

1116
00:47:53,400 --> 00:47:55,200
later versions of the xinput library, but

1117
00:47:55,300 --> 00:47:57,000
Like I said, I'm want to leave the platform layer.

1118
00:47:57,000 --> 00:47:59,800
A lot of room to get us better data if it can so that

1119
00:48:00,000 --> 00:48:03,600
Forms that do support higher polling rates will get that data.

1120
00:48:03,600 --> 00:48:06,200
So that's something I just want to make sure that we're future-proof

1121
00:48:06,200 --> 00:48:07,400
essentially down the road.

1122
00:48:07,400 --> 00:48:08,800
So the game can get that information.

1123
00:48:08,800 --> 00:48:09,000
All right.

1124
00:48:09,000 --> 00:48:13,600
So if it ended down is just whether or not this right here equals the

1125
00:48:13,600 --> 00:48:14,400
button bit, right?

1126
00:48:14,400 --> 00:48:16,000
Basically, that's that's all we're saying.

1127
00:48:16,100 --> 00:48:19,900
If the if that button bit was high, we are good to go.

1128
00:48:20,300 --> 00:48:22,400
I think that's about all we need.

1129
00:48:24,400 --> 00:48:27,900
That is, that is looking pretty straightforward to me.

1130
00:48:28,600 --> 00:48:32,400
So, this is New State and down new state half transition count, old

1131
00:48:32,400 --> 00:48:33,900
state looks good.

1132
00:48:33,900 --> 00:48:36,800
So now we've got this digital button thing here.

1133
00:48:37,000 --> 00:48:37,700
Oh, that's right.

1134
00:48:37,700 --> 00:48:40,300
And we need, we need the actual button state.

1135
00:48:40,900 --> 00:48:43,800
So X input button State.

1136
00:48:44,000 --> 00:48:45,500
We need to actually look at that as well.

1137
00:48:45,600 --> 00:48:47,100
So that's X input and state.

1138
00:48:47,200 --> 00:48:48,300
So, that's all we need.

1139
00:48:48,300 --> 00:48:53,300
I think, then we come down here and we actually go ahead and process

1140
00:48:53,300 --> 00:48:54,000
all these buttons.

1141
00:48:54,200 --> 00:48:56,700
So we've basically got a call here.

1142
00:48:57,100 --> 00:49:02,100
It's going to be passing the button bit that's appropriate for it and

1143
00:49:02,100 --> 00:49:06,100
the button state which is pad W buttons, right like that.

1144
00:49:06,900 --> 00:49:08,000
So we're going to do that.

1145
00:49:08,000 --> 00:49:10,400
Then we need to take our input.

1146
00:49:10,400 --> 00:49:14,400
So this is our controller and this is going to be a particular.

1147
00:49:14,600 --> 00:49:17,300
This is old controller, I guess, and it's state.

1148
00:49:18,000 --> 00:49:23,600
And then we're going to do a new controller and it's state and there

1149
00:49:23,600 --> 00:49:23,900
we go.

1150
00:49:24,100 --> 00:49:26,000
Go and then the button bit, right?

1151
00:49:26,100 --> 00:49:29,400
So then I just blow this out for everyone that we need.

1152
00:49:29,400 --> 00:49:30,800
Not particularly tough.

1153
00:49:31,100 --> 00:49:31,700
Basically.

1154
00:49:31,700 --> 00:49:35,300
I've got the a button there.

1155
00:49:36,000 --> 00:49:36,200
What else?

1156
00:49:36,200 --> 00:49:40,600
We got the B button as soon as I like over pronouncing the word button

1157
00:49:41,000 --> 00:49:42,200
button, right?

1158
00:49:42,200 --> 00:49:44,800
It's very satisfying, button button.

1159
00:49:45,400 --> 00:49:48,900
It says button, when you kind of swallow it, it doesn't sound as

1160
00:49:48,900 --> 00:49:50,100
proper, right?

1161
00:49:50,100 --> 00:49:51,800
It doesn't sound like, you really mean it.

1162
00:49:52,100 --> 00:49:54,000
You didn't really care about the button.

1163
00:49:54,100 --> 00:49:56,600
But you cared about the button, right?

1164
00:49:57,000 --> 00:49:58,200
You know what I'm talking about.

1165
00:49:58,200 --> 00:50:02,300
Anyway, so basically all I did here was I just cut and pasted that

1166
00:50:02,300 --> 00:50:06,100
code there so that we can basically crack things out.

1167
00:50:06,200 --> 00:50:06,400
Now.

1168
00:50:06,400 --> 00:50:09,100
I'm not actually tracking the start in the back button because I'm not

1169
00:50:09,100 --> 00:50:10,600
sure if we actually care about those.

1170
00:50:10,800 --> 00:50:13,900
So we're just going to leave those blank for now, nothing particular

1171
00:50:13,900 --> 00:50:17,400
happening there and then we got to do our Dead Zone processing up here

1172
00:50:17,400 --> 00:50:18,400
as well, which will do.

1173
00:50:19,200 --> 00:50:22,000
So basically what I need now is I need to get these things that I was

1174
00:50:22,000 --> 00:50:23,500
talking about here.

1175
00:50:23,500 --> 00:50:23,800
So

1176
00:50:24,000 --> 00:50:24,900
Old controller.

1177
00:50:25,200 --> 00:50:28,600
The state for the button is going to be each one of these.

1178
00:50:28,600 --> 00:50:31,200
We said that a button points downward on the controller.

1179
00:50:31,200 --> 00:50:31,900
Yes, it does.

1180
00:50:32,300 --> 00:50:34,800
So that's a, that's an old controller down.

1181
00:50:35,400 --> 00:50:38,100
Then we've got the Y button, which is the up button.

1182
00:50:38,700 --> 00:50:41,200
So that is this one, right?

1183
00:50:41,200 --> 00:50:47,100
Then we've got the x button, which is left, that's left, and we've got

1184
00:50:47,100 --> 00:50:49,500
the B button, which is right.

1185
00:50:49,900 --> 00:50:50,900
So there we go.

1186
00:50:51,100 --> 00:50:53,900
Now, we just basically craft those out and basically, all

1187
00:50:54,100 --> 00:50:54,300
Done.

1188
00:50:54,300 --> 00:50:58,500
Here is just made a reusable piece of code that we can call so left

1189
00:50:58,500 --> 00:50:59,800
shoulder as well.

1190
00:51:00,300 --> 00:51:02,400
That we can call to crack all our buttons for us.

1191
00:51:02,400 --> 00:51:05,400
So we don't have to keep cutting pasting the code, we can basically

1192
00:51:05,400 --> 00:51:07,800
just make this is like a table base with that goes through each one

1193
00:51:07,800 --> 00:51:10,000
for us and we're all good to go.

1194
00:51:10,000 --> 00:51:10,500
Right?

1195
00:51:10,700 --> 00:51:11,900
So that should be fine.

1196
00:51:12,100 --> 00:51:14,200
We just now need to get the controller State.

1197
00:51:14,200 --> 00:51:18,300
Now, fortunately, we know that basically this user X User maxed out

1198
00:51:18,300 --> 00:51:18,600
here.

1199
00:51:19,500 --> 00:51:24,200
What we want to do here is say controller Max controller count.

1200
00:51:24,200 --> 00:51:29,300
Oops, controller, count, equals X User Max count, right?

1201
00:51:29,400 --> 00:51:29,900
And I just

1202
00:51:30,000 --> 00:51:33,100
I want to make sure that if someday they add more controllers, so if

1203
00:51:33,100 --> 00:51:37,800
the mass controller count is actually higher than the number that are

1204
00:51:37,800 --> 00:51:44,600
in this right here then input, uh controllers recounts.

1205
00:51:44,600 --> 00:51:46,500
I will tell you how to write that function in.

1206
00:51:46,500 --> 00:51:47,300
Just one second.

1207
00:51:47,300 --> 00:51:51,100
If it's greater than that, then I want to basically make it be equal

1208
00:51:51,100 --> 00:51:51,600
to that.

1209
00:51:51,900 --> 00:51:55,200
This is just basically capping that, let's say, the X User Max count

1210
00:51:55,200 --> 00:51:56,000
was 12.

1211
00:51:56,200 --> 00:51:59,000
I don't want to get into a situation where I'm filling out right off

1212
00:51:59,000 --> 00:51:59,800
the end of this array.

1213
00:52:00,400 --> 00:52:03,200
By reading into the 5th, 6th 7th 8th and 9th, elements, and so on.

1214
00:52:03,400 --> 00:52:06,400
So I'm just going to try and cap it here and say it's the maximum

1215
00:52:06,800 --> 00:52:12,200
value is either the max count of X input or if that's too high for our

1216
00:52:12,400 --> 00:52:14,700
for our input will make a smaller one.

1217
00:52:14,900 --> 00:52:17,500
All right, so I'm going to tell you about how to write this array

1218
00:52:17,500 --> 00:52:20,200
count thing in a second here because actually see doesn't do that for

1219
00:52:20,200 --> 00:52:20,400
you.

1220
00:52:20,400 --> 00:52:23,200
It doesn't tell you how many elements there are in a static array and

1221
00:52:23,200 --> 00:52:26,100
not static array, but in an array that's fixed size.

1222
00:52:26,200 --> 00:52:27,900
It doesn't have a way to actually tell you that.

1223
00:52:28,000 --> 00:52:29,800
So you gotta write that yourself and I'll show you how in a

1224
00:52:29,900 --> 00:52:32,200
And it's real easy doesn't?

1225
00:52:32,200 --> 00:52:34,400
It's not hard and it can be done at compile time.

1226
00:52:34,400 --> 00:52:35,300
So anyway, we're going to do that.

1227
00:52:35,300 --> 00:52:37,900
We're going to go through the mask mask controller count.

1228
00:52:37,900 --> 00:52:40,300
We're going to go over each one of those and at the top of this, we're

1229
00:52:40,300 --> 00:52:44,000
basically going to say, well, alright, we've essentially got the game.

1230
00:52:44,000 --> 00:52:47,400
Controller input is the input that we're going to be looking at here

1231
00:52:47,500 --> 00:52:51,100
is the old controller is going to be old input, which will have to

1232
00:52:51,100 --> 00:52:58,900
save old input controllers, that and we'll do a new controller State.

1233
00:52:59,300 --> 00:52:59,800
There we go.

1234
00:53:00,000 --> 00:53:01,200
Is new input.

1235
00:53:01,600 --> 00:53:04,800
So I should actually also make this be whatever the one we're riding

1236
00:53:04,800 --> 00:53:06,100
into like that.

1237
00:53:06,300 --> 00:53:07,100
Let's do it that way.

1238
00:53:07,500 --> 00:53:10,200
New and put controllers, and we're going to take the controller index.

1239
00:53:10,400 --> 00:53:11,500
We're going to grab those out of there.

1240
00:53:11,500 --> 00:53:11,700
Right?

1241
00:53:11,700 --> 00:53:14,100
So we're going to get those and we're going to write into them.

1242
00:53:15,200 --> 00:53:15,800
There we go.

1243
00:53:16,400 --> 00:53:18,500
So that should give us what we wanted to do.

1244
00:53:19,300 --> 00:53:21,600
And then at the end of it, the end of it.

1245
00:53:21,600 --> 00:53:23,500
All, when we're done.

1246
00:53:23,700 --> 00:53:25,300
We're just going to swap those two.

1247
00:53:25,900 --> 00:53:28,800
So at the very end here, when we're done, we're going to want to swap

1248
00:53:28,800 --> 00:53:29,400
our input.

1249
00:53:29,400 --> 00:53:34,900
So we're going to want to do something like games swap, you know, swap

1250
00:53:34,900 --> 00:53:36,100
pointers or something like that.

1251
00:53:36,100 --> 00:53:38,400
Well, I don't know if I really want to do that and we'll make it a

1252
00:53:38,400 --> 00:53:39,500
macro for now.

1253
00:53:41,400 --> 00:53:43,800
This is the place where I really wish I had metaprogramming.

1254
00:53:44,300 --> 00:53:44,800
This is the place.

1255
00:53:45,000 --> 00:53:45,700
People often use templates.

1256
00:53:45,700 --> 00:53:46,700
I don't really like to use templates.

1257
00:53:49,400 --> 00:53:51,400
My metaprogramming sort of fellow, but if you have templates, you'd

1258
00:53:51,400 --> 00:53:52,100
use them right here.

1259
00:53:52,400 --> 00:53:55,100
I'll just write it myself for now and we'll think about what we want

1260
00:53:55,100 --> 00:53:57,500
to do for stuff like that, a little bit later on.

1261
00:53:58,600 --> 00:53:59,800
I'll put that actually up in here.

1262
00:54:00,400 --> 00:54:01,300
I was put it to do.

1263
00:54:02,500 --> 00:54:03,100
To do.

1264
00:54:05,600 --> 00:54:08,500
Swap min-max, macros.

1265
00:54:09,700 --> 00:54:10,400
Oh, yeah.

1266
00:54:11,300 --> 00:54:11,600
Alright.

1267
00:54:11,600 --> 00:54:15,800
So in here, we're just going to do the game controller input thing.

1268
00:54:15,800 --> 00:54:21,600
This game input temp, equals new input, new input, equals old input

1269
00:54:21,600 --> 00:54:25,700
old, input equals new input, and we will leave it at that.

1270
00:54:25,700 --> 00:54:29,800
Now, whether we need to clear these, I don't know to do Casey's.

1271
00:54:29,800 --> 00:54:32,200
Should I clear these here?

1272
00:54:32,300 --> 00:54:33,900
Possibly, we should.

1273
00:54:34,300 --> 00:54:36,300
And will think about that in a second.

1274
00:54:36,300 --> 00:54:39,600
But basically what I want to do now, like I said, is, I basically

1275
00:54:39,800 --> 00:54:43,900
They just want to have to input buffers and so I can look at whatever

1276
00:54:43,900 --> 00:54:46,500
the last one was because that's something that I wanted for button up

1277
00:54:46,500 --> 00:54:47,200
button down.

1278
00:54:47,600 --> 00:54:49,700
So basically what I'm going to do is I'm going to go look at that

1279
00:54:49,700 --> 00:54:54,300
input that game input thing and I'm basically just going to Define two

1280
00:54:54,400 --> 00:54:58,100
inputs right structures for the game input.

1281
00:54:58,100 --> 00:55:00,900
And I'm going to say that my new input one, right?

1282
00:55:01,300 --> 00:55:03,100
Equals input zero.

1283
00:55:03,400 --> 00:55:08,200
And I'm going to say that my old input equals input one like that.

1284
00:55:08,400 --> 00:55:09,600
And that way, I can just swap.

1285
00:55:09,700 --> 00:55:12,600
Op the the pointers to them later and it'll be fine.

1286
00:55:12,600 --> 00:55:14,000
Excuse your, max count.

1287
00:55:14,000 --> 00:55:16,800
Oh, did I accidentally delete something important from that?

1288
00:55:17,300 --> 00:55:21,700
Let me take a look at the xinput documentation.

1289
00:55:21,700 --> 00:55:22,200
Oh, well, you know what?

1290
00:55:22,200 --> 00:55:23,600
I could actually do, I could guess.

1291
00:55:26,100 --> 00:55:27,000
I guess correctly.

1292
00:55:27,200 --> 00:55:28,800
I'm gonna show you how to write that one in a second.

1293
00:55:29,000 --> 00:55:29,900
What is the problem here?

1294
00:55:29,900 --> 00:55:32,500
Can I state to button States star?

1295
00:55:33,100 --> 00:55:33,900
Okay, right.

1296
00:55:33,900 --> 00:55:36,500
These just need to pass the address of it because they are taking a

1297
00:55:36,500 --> 00:55:37,600
look at the address.

1298
00:55:37,600 --> 00:55:41,000
I could not, I could not bother to pass the address of the first one

1299
00:55:41,000 --> 00:55:42,000
for not writing into it.

1300
00:55:42,000 --> 00:55:43,100
But who cares?

1301
00:55:43,600 --> 00:55:48,500
All right, got that one game update and render is going to take the

1302
00:55:48,500 --> 00:55:51,600
new input always and then the array count.

1303
00:55:52,000 --> 00:55:54,800
All right, so I think

1304
00:55:55,500 --> 00:55:56,700
We are one second.

1305
00:55:56,700 --> 00:55:59,700
My screen has blanked out here, that will make it hard for me to read

1306
00:55:59,700 --> 00:56:00,300
the questions.

1307
00:56:01,300 --> 00:56:01,900
Let's see.

1308
00:56:02,300 --> 00:56:03,100
There we go.

1309
00:56:04,200 --> 00:56:04,500
Okay.

1310
00:56:04,500 --> 00:56:05,800
So for swapping.

1311
00:56:06,600 --> 00:56:09,000
That is that was, that's not, that's always good.

1312
00:56:09,600 --> 00:56:10,800
All right, for swapping.

1313
00:56:11,000 --> 00:56:12,500
I'm just doing a swamp here.

1314
00:56:12,700 --> 00:56:15,400
Basically, this is just we should have a function that does this.

1315
00:56:15,600 --> 00:56:18,200
What I wrote at the bottom here was I wanted to basically just ping

1316
00:56:18,200 --> 00:56:19,300
pong between two buffers.

1317
00:56:19,300 --> 00:56:22,500
I wanted to use one buffer and leave the old one around switch to

1318
00:56:22,500 --> 00:56:24,700
using the other buffer so that it would leave the previous one around.

1319
00:56:24,700 --> 00:56:24,800
So

1320
00:56:24,900 --> 00:56:26,700
We always have access to the last buffer.

1321
00:56:26,700 --> 00:56:28,000
We used in the previous frame.

1322
00:56:28,300 --> 00:56:33,400
So all I did was I can't, I can't say, you know, new input equals old

1323
00:56:33,400 --> 00:56:38,400
input because now when I say, I can't say there's nothing left it

1324
00:56:38,400 --> 00:56:38,700
over.

1325
00:56:38,700 --> 00:56:41,000
Wrote what the value of new the pointer to new input.

1326
00:56:41,000 --> 00:56:42,300
I have no pointer to it anymore.

1327
00:56:42,400 --> 00:56:42,900
Right?

1328
00:56:43,200 --> 00:56:45,600
So that that's a bummer right if that makes sense.

1329
00:56:45,900 --> 00:56:49,500
So basically what I had to do is I had the first snap a pointer to the

1330
00:56:49,500 --> 00:56:52,400
what new input was so that when I overwrite the pointer new input with

1331
00:56:52,400 --> 00:56:54,800
the pointer old input, I have the temp back.

1332
00:56:54,900 --> 00:56:55,500
Right.

1333
00:56:55,500 --> 00:56:56,200
Does that make sense?

1334
00:56:57,500 --> 00:56:58,200
Yeah, really?

1335
00:56:58,200 --> 00:56:59,400
What I wanted to do was say

1336
00:57:00,200 --> 00:57:04,300
New input old input, but I wanted to kind of wait till we actually

1337
00:57:04,300 --> 00:57:06,600
write a swap function to do that.

1338
00:57:06,600 --> 00:57:08,100
So I'm just doing that temporarily.

1339
00:57:08,400 --> 00:57:12,100
So now we have to go and take a look at this.

1340
00:57:12,100 --> 00:57:12,600
Okay.

1341
00:57:13,100 --> 00:57:15,300
What is the problem here?

1342
00:57:15,300 --> 00:57:15,800
Missing?

1343
00:57:15,800 --> 00:57:16,700
Semicolon.

1344
00:57:16,700 --> 00:57:17,700
Yes, it did.

1345
00:57:18,000 --> 00:57:18,300
Okay.

1346
00:57:18,300 --> 00:57:21,400
So now I just got to teach you how to write this guy, and then we have

1347
00:57:21,400 --> 00:57:23,300
the start of our input.

1348
00:57:23,300 --> 00:57:24,500
We might have to go a little long tonight.

1349
00:57:24,500 --> 00:57:27,700
Looks like we're a little behind schedule from where I would like to

1350
00:57:27,700 --> 00:57:28,100
be.

1351
00:57:29,200 --> 00:57:29,900
All right.

1352
00:57:30,100 --> 00:57:34,500
So basically defining this, this guy array count and it takes an

1353
00:57:34,500 --> 00:57:34,900
array.

1354
00:57:35,000 --> 00:57:36,900
Oops, takes an array.

1355
00:57:37,900 --> 00:57:42,200
All this does is it basically just ask for the size of the array,

1356
00:57:42,300 --> 00:57:43,600
whatever the array is.

1357
00:57:43,800 --> 00:57:45,500
That's the total size of the array.

1358
00:57:45,700 --> 00:57:48,800
And then we're going to divide by the size of the zeroth element of

1359
00:57:48,800 --> 00:57:51,900
that array because that tells us how many there are, right?

1360
00:57:52,500 --> 00:57:55,500
The total number of bytes used by an array divided.

1361
00:57:55,500 --> 00:57:58,900
By the number of bytes used for a single element that gives us how

1362
00:57:59,100 --> 00:57:59,400
Elements.

1363
00:57:59,400 --> 00:58:01,600
There were so that's all I'm going to do.

1364
00:58:01,900 --> 00:58:02,900
That's that's it.

1365
00:58:03,300 --> 00:58:04,800
I don't know if I can bracket this.

1366
00:58:04,800 --> 00:58:05,700
I'd like to bracket it.

1367
00:58:05,700 --> 00:58:07,500
I don't know if I can, I can so that's good.

1368
00:58:07,900 --> 00:58:08,300
Basically.

1369
00:58:08,300 --> 00:58:10,300
I didn't know, I didn't want to make sure I wanted to make sure that

1370
00:58:10,300 --> 00:58:13,200
everything bracketed because basically in a macro this thing is going

1371
00:58:13,200 --> 00:58:14,400
to get inserted into here.

1372
00:58:14,500 --> 00:58:17,900
And so if it was something like an expression that I didn't want the

1373
00:58:17,900 --> 00:58:22,000
02 like, you know, if it was if they passed in something like if I had

1374
00:58:22,000 --> 00:58:25,700
this and they pass in something like food plus bar, right?

1375
00:58:25,800 --> 00:58:28,900
I didn't want that to expand to Food Plus bar because

1376
00:58:29,000 --> 00:58:30,500
then the zeros only on the bar.

1377
00:58:30,500 --> 00:58:32,600
I wanted it to be expand to something like that.

1378
00:58:32,600 --> 00:58:36,000
So you kind of have to be careful in macros to always pair, you know,

1379
00:58:36,000 --> 00:58:39,800
put parentheses around more things than you would ever have had to in

1380
00:58:39,800 --> 00:58:40,600
another case.

1381
00:58:41,100 --> 00:58:41,400
All right.

1382
00:58:41,400 --> 00:58:42,800
So let's see where we're at here.

1383
00:58:43,100 --> 00:58:46,500
That was a lot of code very quickly, but it actually works just fine

1384
00:58:46,500 --> 00:58:49,300
and pushing the a button and it's going up there.

1385
00:58:49,400 --> 00:58:51,300
All right, so that works just fine.

1386
00:58:51,600 --> 00:58:55,200
So really the only problem that we've got right now is our stick and

1387
00:58:55,200 --> 00:58:56,700
so we've got to get our stick in there.

1388
00:58:57,400 --> 00:59:00,500
Now the stick has a thing called a dead zone and I guess I'm going to

1389
00:59:00,500 --> 00:59:03,100
have to defer that processing to later because we don't have time.

1390
00:59:03,400 --> 00:59:05,000
So we're still going to say to do.

1391
00:59:05,300 --> 00:59:07,600
And basically what I'm going to do is I'm just going to turn this

1392
00:59:07,600 --> 00:59:12,300
stick value directly into the input value that we're saying.

1393
00:59:12,600 --> 00:59:16,100
So basically the start X Min x max x and x thing.

1394
00:59:16,500 --> 00:59:20,400
I'm basically going to do those directly here real quick just so we

1395
00:59:20,400 --> 00:59:21,300
can be working.

1396
00:59:21,600 --> 00:59:24,500
And I guess we don't do we don't need any of these right now.

1397
00:59:24,500 --> 00:59:25,500
These are the d-pad.

1398
00:59:25,500 --> 00:59:27,000
So I'm going to say to do

1399
00:59:27,600 --> 00:59:29,900
D-pad and see what we want to do with that.

1400
00:59:29,900 --> 00:59:33,900
But basically the thumb this thing right here, I'm going to turn that

1401
00:59:33,900 --> 00:59:34,800
into a float.

1402
00:59:34,900 --> 00:59:39,400
I'm turn that into a float and I'm going to divide by well, so this is

1403
00:59:39,400 --> 00:59:39,900
a question.

1404
00:59:39,900 --> 00:59:42,500
I don't actually know what the min/max values are allowed to be for

1405
00:59:42,500 --> 00:59:43,200
this thing.

1406
00:59:44,500 --> 00:59:46,700
I'm going to assume it's 3655.

1407
00:59:46,700 --> 00:59:47,800
36 divided by 2.

1408
00:59:47,800 --> 00:59:48,400
I don't actually know.

1409
00:59:48,400 --> 00:59:52,000
Let's take a look and make sure we know what that actually is.

1410
00:59:52,300 --> 00:59:54,100
So we're going to go a little long here.

1411
00:59:54,500 --> 00:59:54,900
It's the end.

1412
00:59:54,900 --> 00:59:56,900
This will make up for it in Q&A.

1413
00:59:58,200 --> 00:59:58,900
Let's take a look.

1414
00:59:58,900 --> 00:59:59,800
I just want to pass.

1415
01:00:00,000 --> 01:00:03,400
Stick but I don't actually know what the values are.

1416
01:00:03,400 --> 01:00:04,500
So here they are this.

1417
01:00:04,500 --> 01:00:06,500
This is what the documentation claims and values are.

1418
01:00:06,500 --> 01:00:10,200
So it is the maximum range people of a short.

1419
01:00:10,300 --> 01:00:11,300
It looks like to me.

1420
01:00:11,700 --> 01:00:13,700
So basically, this is what we're what we've got.

1421
01:00:13,700 --> 01:00:15,100
Now, we have an interesting problem.

1422
01:00:16,200 --> 01:00:17,600
We have an interesting problem.

1423
01:00:17,900 --> 01:00:19,600
We want to normalize this value.

1424
01:00:20,300 --> 01:00:22,800
We want to normalize this value, so which do we divided by?

1425
01:00:22,800 --> 01:00:25,400
And the answer is, we actually want to do it accurately, be kind of

1426
01:00:25,400 --> 01:00:28,300
have to divide by different value, depending on which is positive or

1427
01:00:28,300 --> 01:00:32,300
negative because the range of - is greater than the Nate range of the

1428
01:00:32,300 --> 01:00:33,200
positive.

1429
01:00:33,200 --> 01:00:37,700
So technically right we should do something like

1430
01:00:39,200 --> 01:00:45,100
X equals whatever the value is like that /.

1431
01:00:45,100 --> 01:00:45,800
This.

1432
01:00:46,800 --> 01:00:53,800
If and only if if this is less than 0, right?

1433
01:00:53,800 --> 01:00:58,100
Like that, technically, that's what I want to do something like that.

1434
01:00:58,700 --> 01:01:03,800
Otherwise, if it's not, I actually want to do the same value, divided

1435
01:01:03,800 --> 01:01:05,900
by that, right?

1436
01:01:06,300 --> 01:01:08,100
So that right there.

1437
01:01:08,500 --> 01:01:11,800
What I'm trying to do is I'm trying to turn this integer value which

1438
01:01:11,800 --> 01:01:15,000
isn't particularly meaningful and is hard to use mathematically

1439
01:01:15,000 --> 01:01:18,100
because it's just some arbitrary range that just has to do with how

1440
01:01:18,100 --> 01:01:20,500
many bits are in a short, which is irrelevant.

1441
01:01:20,900 --> 01:01:24,400
I'm trying to change it into a number between negative 1 and 1.

1442
01:01:24,600 --> 01:01:27,100
And the reason that I want to do that that's called a normalized.

1443
01:01:27,100 --> 01:01:30,900
Number normalized is when you divide something to produce something of

1444
01:01:30,900 --> 01:01:33,200
unit length will be talking about these things.

1445
01:01:33,200 --> 01:01:33,600
A lot.

1446
01:01:33,600 --> 01:01:34,800
When we start talking about vectors.

1447
01:01:35,500 --> 01:01:38,000
Basically I want to do that because that way, it's always

1448
01:01:38,200 --> 01:01:41,500
Easy to take some other quantity, like the maximum movement, speed of

1449
01:01:41,500 --> 01:01:46,300
my guy, and multiply it, by the number between negative 1 and 1 and

1450
01:01:46,300 --> 01:01:48,500
get out how fast he should be moving.

1451
01:01:48,500 --> 01:01:48,700
Right?

1452
01:01:48,700 --> 01:01:50,100
So it's a nice normalized value.

1453
01:01:50,100 --> 01:01:54,800
It takes away the size of the thing on one side so that you only have

1454
01:01:54,800 --> 01:01:57,000
to be concerned with the size of it on the other side.

1455
01:01:57,100 --> 01:02:00,500
So I just want to normalize this value like that, right?

1456
01:02:00,500 --> 01:02:01,700
I want to do this to it.

1457
01:02:02,000 --> 01:02:02,500
Okay.

1458
01:02:03,700 --> 01:02:04,700
That's what I want to do.

1459
01:02:04,900 --> 01:02:08,000
And so then I'm just going to stuff a new controller for now.

1460
01:02:08,000 --> 01:02:09,700
I'm going to say that new controllers.

1461
01:02:10,100 --> 01:02:13,100
Start x equals old controllers and X.

1462
01:02:13,100 --> 01:02:14,400
That's pretty straightforward.

1463
01:02:14,600 --> 01:02:16,000
Same with this, right?

1464
01:02:16,000 --> 01:02:16,800
Like that.

1465
01:02:17,100 --> 01:02:23,000
And then I'm also going to say new controller, Min x, equals new

1466
01:02:23,000 --> 01:02:31,300
controller, Max x equals something, excuse me, equals and x.

1467
01:02:31,400 --> 01:02:33,000
And this is not exactly correct, but

1468
01:02:33,400 --> 01:02:39,700
You with that, to do min max macros, because we're going to need those

1469
01:02:39,700 --> 01:02:40,000
here.

1470
01:02:40,400 --> 01:02:43,700
And then that's actually all going to be equal to that x value that.

1471
01:02:43,700 --> 01:02:48,000
We just computed basically right here like that.

1472
01:02:48,000 --> 01:02:49,500
So, there's our x value.

1473
01:02:49,900 --> 01:02:53,500
And which one did I use in here in handmade?

1474
01:02:53,700 --> 01:02:57,800
I used ndex in NY.

1475
01:02:57,800 --> 01:02:59,300
I think I actually want these reversed.

1476
01:02:59,300 --> 01:02:59,800
I want that.

1477
01:03:00,300 --> 01:03:04,200
The blue offset to be on end X and I want the tone to be on end.

1478
01:03:04,200 --> 01:03:04,500
Why?

1479
01:03:04,500 --> 01:03:08,200
All right, so, I can change that to y41.

1480
01:03:08,200 --> 01:03:10,400
We're going to have to abstract those coalesce.

1481
01:03:10,400 --> 01:03:14,900
Those two Loops can't read it because it's underneath my lovely

1482
01:03:14,900 --> 01:03:16,000
talking head.

1483
01:03:16,000 --> 01:03:16,600
There we go.

1484
01:03:17,500 --> 01:03:20,100
All right, so that I hastily put that in there.

1485
01:03:20,100 --> 01:03:20,700
I didn't really check it.

1486
01:03:20,700 --> 01:03:22,100
So it might be kind of busted.

1487
01:03:22,300 --> 01:03:24,800
So I'm not actually sure if that's going to do anything at all.

1488
01:03:24,900 --> 01:03:26,600
In fact, it does not appear to do anything at all.

1489
01:03:26,600 --> 01:03:27,900
So that's not that good.

1490
01:03:28,200 --> 01:03:29,000
So let's double check.

1491
01:03:29,000 --> 01:03:29,900
What did I mess up?

1492
01:03:30,100 --> 01:03:43,800
Our let's see, put all those in there and X Y and Y, and that should

1493
01:03:44,400 --> 01:03:46,000
have done something.

1494
01:03:46,600 --> 01:03:50,900
But I'm going to go ahead and step through that just so I can see like

1495
01:03:50,900 --> 01:03:53,800
I said, when I kind of hastily bang something out like that,

1496
01:03:54,000 --> 01:03:57,600
especially when I'm talking, there's a high probability of messing up.

1497
01:03:57,700 --> 01:03:59,900
So I just want to take a look at what's going.

1498
01:04:00,000 --> 01:04:00,700
Going on in here.

1499
01:04:00,700 --> 01:04:06,200
So X and Y, are both the values that I think they should be actually.

1500
01:04:06,700 --> 01:04:09,200
So let's take a look at new controller.

1501
01:04:10,300 --> 01:04:10,900
There we go.

1502
01:04:11,200 --> 01:04:12,300
New controller.

1503
01:04:12,300 --> 01:04:13,000
Oh, duh.

1504
01:04:13,000 --> 01:04:14,400
We didn't set it to analog.

1505
01:04:14,700 --> 01:04:19,200
So obviously we also have to set it to analog in order to use the

1506
01:04:19,200 --> 01:04:20,000
analog path.

1507
01:04:20,100 --> 01:04:21,400
That was our only problem.

1508
01:04:21,400 --> 01:04:23,300
Probably I'm guessing.

1509
01:04:23,700 --> 01:04:24,600
So let's take a look.

1510
01:04:24,600 --> 01:04:27,100
Now if we've got something a little more reasonable.

1511
01:04:27,100 --> 01:04:27,900
There we go.

1512
01:04:28,200 --> 01:04:28,800
Yeah.

1513
01:04:29,100 --> 01:04:29,700
All right.

1514
01:04:30,100 --> 01:04:35,600
One last thing I messed up is of course, we got to preserve the - in

1515
01:04:35,600 --> 01:04:36,000
there.

1516
01:04:36,700 --> 01:04:39,100
So basically we got to have got to get rid of that negative, that

1517
01:04:39,100 --> 01:04:41,300
would dividing by a negative, would flip the sign.

1518
01:04:41,300 --> 01:04:42,400
And we didn't want to flip the sign.

1519
01:04:42,400 --> 01:04:45,000
We still want the sign to be - if we didn't.

1520
01:04:45,000 --> 01:04:46,000
That's what we should have done.

1521
01:04:46,500 --> 01:04:46,900
All right.

1522
01:04:46,900 --> 01:04:47,500
There we go.

1523
01:04:50,500 --> 01:04:52,100
And we are back.

1524
01:04:52,600 --> 01:04:53,500
We are back.

1525
01:04:53,600 --> 01:04:54,000
Lovely.

1526
01:04:54,500 --> 01:04:55,400
So that's it.

1527
01:04:55,700 --> 01:04:56,700
That's all I wanted to do.

1528
01:04:56,700 --> 01:04:57,900
Just get that stuff working.

1529
01:04:58,100 --> 01:05:02,500
We want to do min max macros and tomorrow we'll have to also do dead

1530
01:05:02,500 --> 01:05:03,400
zone processing.

1531
01:05:03,400 --> 01:05:04,100
Finally.

1532
01:05:05,300 --> 01:05:06,800
Oh, actually, I guess I've already got this.

1533
01:05:07,800 --> 01:05:11,000
So let's say that we actually want to do those tomorrow because we're

1534
01:05:11,000 --> 01:05:11,500
going to need them.

1535
01:05:11,500 --> 01:05:13,600
We can't put it off any longer because we're asking to be using this

1536
01:05:13,600 --> 01:05:17,500
input for real stuff and we have to do the min/max macro.

1537
01:05:17,500 --> 01:05:18,800
So we'll do those tomorrow.

1538
01:05:19,100 --> 01:05:20,100
Otherwise, I think

1539
01:05:20,200 --> 01:05:21,400
Are good for the day.

1540
01:05:21,800 --> 01:05:26,500
Ladies and gentlemen, we have successfully gotten to the point where

1541
01:05:26,500 --> 01:05:29,500
we are almost almost.

1542
01:05:30,800 --> 01:05:32,200
At a reasonable platform layer.

1543
01:05:32,400 --> 01:05:33,200
We're pretty close.

1544
01:05:33,200 --> 01:05:34,300
By next week.

1545
01:05:34,500 --> 01:05:35,300
I'm going to say.

1546
01:05:35,500 --> 01:05:37,100
We will actually be game programming.

1547
01:05:37,100 --> 01:05:37,700
I think next week.

1548
01:05:37,700 --> 01:05:40,000
I want to take some time to kind of go tighten stuff down.

1549
01:05:40,200 --> 01:05:43,900
Fix some stuff that we kind of left kind of hanging for a while.

1550
01:05:44,200 --> 01:05:46,500
But that is pretty darn good.

1551
01:05:46,500 --> 01:05:48,400
13 days in tomorrow.

1552
01:05:48,400 --> 01:05:50,700
We will have memory as well.

1553
01:05:50,900 --> 01:05:55,400
So that will be 14 days in and, and that is just not a lot of

1554
01:05:55,400 --> 01:05:55,800
programming.

1555
01:05:55,800 --> 01:05:58,600
When you consider how much talking I've been doing and explaining a

1556
01:05:58,600 --> 01:05:59,800
stuff, I mean,

1557
01:06:00,000 --> 01:06:04,600
Are talking about something on the order of two hours of code.

1558
01:06:04,600 --> 01:06:09,200
Total to write the entire abstraction layer for a win32 prototyping

1559
01:06:09,200 --> 01:06:09,500
thing.

1560
01:06:09,800 --> 01:06:11,500
That is pretty darn good.

1561
01:06:11,500 --> 01:06:15,200
Do not let anyone ever tell you that it takes too long to make this

1562
01:06:15,200 --> 01:06:16,100
stuff from scratch.

1563
01:06:16,100 --> 01:06:18,100
That was just not that much.

1564
01:06:18,100 --> 01:06:23,500
I mean, it just isn't that much really when you when you factor in all

1565
01:06:23,500 --> 01:06:26,600
the stuff and how quickly this has gone even with explanations.

1566
01:06:26,600 --> 01:06:27,900
It's kind of crazy.

1567
01:06:28,100 --> 01:06:29,800
But anyway, thank you.

1568
01:06:29,800 --> 01:06:29,900
Very

1569
01:06:30,000 --> 01:06:31,200
Very much, of course for joining us.

1570
01:06:31,200 --> 01:06:31,800
It is time.

1571
01:06:31,800 --> 01:06:32,800
Now for the Q&A.

1572
01:06:32,800 --> 01:06:33,900
We didn't really even go over that much.

1573
01:06:33,900 --> 01:06:35,500
We got 5 x 5 extra minutes.

1574
01:06:35,500 --> 01:06:36,900
We took that's not much.

1575
01:06:37,100 --> 01:06:40,000
So let's do a good 25 minutes of Q&A now or what we'll go five minutes

1576
01:06:40,000 --> 01:06:40,600
long in the Q&A.

1577
01:06:40,600 --> 01:06:46,900
If we need to to remember to put see Mira Tori somewhere in your

1578
01:06:46,900 --> 01:06:49,400
question because I have a thing that just shows that so that people

1579
01:06:49,400 --> 01:06:53,900
can talk on the stream without me having to see it as and get confused

1580
01:06:53,900 --> 01:06:54,800
about where the questions are.

1581
01:06:54,800 --> 01:06:57,100
So question time is now

1582
01:07:00,500 --> 01:07:01,700
Let's see.

1583
01:07:05,500 --> 01:07:10,000
When normalizing the thumbstick value is it worse to just add 32 768

1584
01:07:10,000 --> 01:07:13,900
then multiply it by 2 over 65535 then subtract 1.

1585
01:07:14,200 --> 01:07:17,000
I don't like the necessary if statement personally.

1586
01:07:25,900 --> 01:07:27,900
I want to say,

1587
01:07:29,000 --> 01:07:32,300
So, the re the aunt, the full answer is I don't know because I've

1588
01:07:32,300 --> 01:07:33,700
never thought about that before.

1589
01:07:34,200 --> 01:07:35,500
I want to say.

1590
01:07:35,800 --> 01:07:40,100
If you do that, please make sure it doesn't offset your zero value.

1591
01:07:40,200 --> 01:07:43,300
A fractional amount in One Direction.

1592
01:07:43,300 --> 01:07:46,000
If fractional amount down, do you know what I'm saying?

1593
01:07:47,300 --> 01:07:50,500
Because because your range doesn't have a mid point.

1594
01:07:50,500 --> 01:07:51,200
Exactly.

1595
01:07:51,500 --> 01:07:54,400
And you really care that 0 maps to 0.

1596
01:07:54,700 --> 01:07:57,900
So so I don't know that there's anything wrong with what you're

1597
01:07:57,900 --> 01:07:58,800
suggesting.

1598
01:08:00,200 --> 01:08:02,400
But if you could, please first check.

1599
01:08:02,400 --> 01:08:04,000
If you don't want to do what I did.

1600
01:08:04,000 --> 01:08:07,300
If you could please check or you know, what I should do here to, I

1601
01:08:07,300 --> 01:08:15,400
should say to do collapse to single function, please double check that

1602
01:08:15,400 --> 01:08:16,700
it leaves 0 where it should be.

1603
01:08:16,800 --> 01:08:17,000
That's the

1604
01:08:17,200 --> 01:08:17,800
That sort of thing.

1605
01:08:20,100 --> 01:08:22,899
Or or don't care about zero and let the dead zone.

1606
01:08:22,899 --> 01:08:26,600
Do The Dead Zone after you do the thing you were talking about, do the

1607
01:08:26,600 --> 01:08:31,800
dead zone afterwards to suck up to make the 0 value, really big, and

1608
01:08:31,800 --> 01:08:32,700
then, it wouldn't matter that.

1609
01:08:32,700 --> 01:08:36,100
You had a slight bias in One Direction, right?

1610
01:08:46,000 --> 01:08:48,800
Gasps blizzard nitpick, but is it a bit misleading that the half

1611
01:08:48,800 --> 01:08:52,300
transition count is 0 or 1 rather than an actual count.

1612
01:08:52,300 --> 01:08:52,600
I'm sorry.

1613
01:08:52,600 --> 01:08:53,800
I'm not sure what you mean by that.

1614
01:08:53,800 --> 01:08:59,700
We are only pulling once a frame, so we can't actually count yet.

1615
01:09:00,200 --> 01:09:02,000
In order to count, this more accurately.

1616
01:09:02,000 --> 01:09:05,100
We would have to have a higher polling rate.

1617
01:09:05,100 --> 01:09:08,700
So until we increase the polling rate, we I don't I'm not sure what

1618
01:09:08,700 --> 01:09:09,100
you mean.

1619
01:09:13,300 --> 01:09:15,000
Let's see.

1620
01:09:17,899 --> 01:09:20,300
Will you completely ignoring platform code for most of the rest of the

1621
01:09:20,300 --> 01:09:20,899
series?

1622
01:09:21,399 --> 01:09:24,700
Yes, there there will be a couple times when we'll do more platform

1623
01:09:24,700 --> 01:09:25,000
work.

1624
01:09:25,300 --> 01:09:28,800
Basically when we do our resource system, that'll be platforming.

1625
01:09:30,500 --> 01:09:33,800
And then when we do our rendering stuff, that'll be platforming, our

1626
01:09:33,800 --> 01:09:36,899
Hardware rendering, but other than that we won't be doing platform

1627
01:09:36,899 --> 01:09:37,600
stuff anymore.

1628
01:09:39,100 --> 01:09:41,700
And yes, obviously for Mac, Linux ports, and Raspberry Pi.

1629
01:09:41,700 --> 01:09:44,300
That's all platform stuff, but that's way down the road.

1630
01:09:48,600 --> 01:09:51,200
Can you describe the struct inside of the Union in more detail?

1631
01:09:51,500 --> 01:09:52,600
Yeah, that's a good point.

1632
01:09:52,600 --> 01:09:55,700
I totally just, I was thinking, oh, I'll explain this later and then I

1633
01:09:55,700 --> 01:09:56,700
never explain it later.

1634
01:09:56,700 --> 01:09:57,600
So let's explain it.

1635
01:09:58,200 --> 01:10:00,500
So basically what happens is anytime you want, right?

1636
01:10:00,500 --> 01:10:04,000
You can create a struct and we've been doing this all the time, right?

1637
01:10:04,000 --> 01:10:07,300
We can create a struct and we can just shove some stuff in it, right?

1638
01:10:07,400 --> 01:10:12,600
So, I can create this struct called Foo, and I can create this struct

1639
01:10:12,600 --> 01:10:14,300
called bar, right?

1640
01:10:14,500 --> 01:10:16,200
That's totally good to go.

1641
01:10:16,200 --> 01:10:16,700
And we both were

1642
01:10:16,900 --> 01:10:18,200
No, we were kind of comforting with these.

1643
01:10:18,200 --> 01:10:18,300
Now.

1644
01:10:18,300 --> 01:10:19,500
We've used them through the whole series.

1645
01:10:19,500 --> 01:10:21,900
I hope most people would know what happened there, right?

1646
01:10:24,000 --> 01:10:24,600
but,

1647
01:10:26,400 --> 01:10:31,700
Let's say that I wanted to now include the stuff from this struct in

1648
01:10:31,700 --> 01:10:37,700
this struct here, but I didn't actually want to have to use.

1649
01:10:37,800 --> 01:10:38,300
So, okay.

1650
01:10:38,300 --> 01:10:39,900
So I'll give you a concrete example.

1651
01:10:40,200 --> 01:10:42,200
I could do this right now.

1652
01:10:42,200 --> 01:10:45,900
All of the stuff that's in a foo is also in a bar, but to access it.

1653
01:10:45,900 --> 01:10:51,000
I have to do my bar dot my fuu DOT the thing, right?

1654
01:10:51,000 --> 01:10:56,000
It's I gotta use the foo every time so it's that, you know, it's

1655
01:10:56,200 --> 01:10:58,700
It's down its left.

1656
01:10:58,700 --> 01:10:59,300
Right?

1657
01:10:59,600 --> 01:11:04,700
But what I can do as well is if I actually have it declared inside,

1658
01:11:04,900 --> 01:11:05,500
right?

1659
01:11:05,600 --> 01:11:07,800
This is what that would look like declared inside.

1660
01:11:08,000 --> 01:11:13,200
If I actually have it declared inside, I can opt to just drop all of

1661
01:11:13,200 --> 01:11:16,500
the Declarations from it, entirely like this and then, it's

1662
01:11:16,500 --> 01:11:19,200
essentially just a pass-through, just whatever was in.

1663
01:11:19,200 --> 01:11:24,000
There is just up at the at the higher up in the higher one.

1664
01:11:24,000 --> 01:11:25,900
So now I could just do barred up.

1665
01:11:26,100 --> 01:11:27,800
Bar dot down bar dot left.

1666
01:11:27,800 --> 01:11:31,000
Now that doesn't really matter much because you just say well, why

1667
01:11:31,000 --> 01:11:32,100
wouldn't you just do this?

1668
01:11:32,400 --> 01:11:33,000
Right?

1669
01:11:33,200 --> 01:11:35,700
And the answer is because of unions.

1670
01:11:35,800 --> 01:11:39,100
So what a union does is a union allows you to put two things in the

1671
01:11:39,100 --> 01:11:40,600
same place, right?

1672
01:11:43,100 --> 01:11:43,900
That's a union.

1673
01:11:44,100 --> 01:11:49,300
It basically, says, I only want 32 bits and I'm going to access X or

1674
01:11:49,300 --> 01:11:50,900
Y, depending on which one.

1675
01:11:51,100 --> 01:11:52,500
So this is like integer.

1676
01:11:52,500 --> 01:11:55,300
It's probably say, integer X or float X.

1677
01:11:55,500 --> 01:11:58,800
I'm going to access whichever one I wanted and you have to really know

1678
01:11:58,800 --> 01:11:59,800
what you're doing here.

1679
01:12:00,000 --> 01:12:02,300
If you do stuff like this because they're the same memory.

1680
01:12:02,300 --> 01:12:05,300
So if you write a float to float X and then try to read it as an

1681
01:12:05,300 --> 01:12:09,000
integer, it's going to be the, the bits of the float in an integer,

1682
01:12:09,000 --> 01:12:10,200
which is not the number.

1683
01:12:10,200 --> 01:12:13,900
It's some other thing, right, but that's what a union loves you do it,

1684
01:12:13,900 --> 01:12:15,600
lets you to use the same memory for multiple things.

1685
01:12:15,600 --> 01:12:19,900
So all I did was use the anonymous struct inside.

1686
01:12:19,900 --> 01:12:25,800
A union to, basically, let these names all exist in the same places,

1687
01:12:25,800 --> 01:12:26,300
this array.

1688
01:12:26,300 --> 01:12:29,600
So we could alternatively, we could basically say button.

1689
01:12:30,000 --> 01:12:30,500
Zero.

1690
01:12:30,700 --> 01:12:34,800
And that would be the same memory as up, right?

1691
01:12:34,800 --> 01:12:37,700
And buttons, one is in the same memory as down, so it just gives me

1692
01:12:37,700 --> 01:12:40,100
two ways of accessing and code the thing.

1693
01:12:40,100 --> 01:12:43,000
So if I want something that just Loops over all the buttons, I can do

1694
01:12:43,000 --> 01:12:46,000
that trivially or if I want something that accesses the buttons by

1695
01:12:46,000 --> 01:12:47,800
name, I can do that as well.

1696
01:12:48,300 --> 01:12:48,900
Furthermore.

1697
01:12:48,900 --> 01:12:52,900
I use the exact same trick again on the union because normally the

1698
01:12:52,900 --> 01:12:56,500
union would have a name, but I just did decided not to name it either.

1699
01:12:56,600 --> 01:12:59,800
So that all this stuff is just in up in the outer game controller.

1700
01:13:00,100 --> 01:13:05,300
And you can just say, you know, controller dot up instead of having to

1701
01:13:05,300 --> 01:13:10,400
do controller dot, some Union name dot up some struck name, right?

1702
01:13:10,400 --> 01:13:13,900
That would be way more verbose and not actually meaningful because I

1703
01:13:13,900 --> 01:13:14,500
don't care.

1704
01:13:16,000 --> 01:13:17,000
Hopefully, that makes some sense.

1705
01:13:25,800 --> 01:13:27,100
Let's see.

1706
01:13:34,200 --> 01:13:34,800
um,

1707
01:13:39,600 --> 01:13:42,700
Does it give any problems with capturing inputs over time?

1708
01:13:42,700 --> 01:13:44,700
When due to some circumstances from Windows?

1709
01:13:44,700 --> 01:13:47,500
The game lags and the frame time base expands?

1710
01:13:49,000 --> 01:13:50,700
I'm not sure exactly what your question is.

1711
01:13:50,700 --> 01:13:54,000
But what I can say is like Windows is not a real time.

1712
01:13:54,000 --> 01:13:56,900
Operating system is not by any stretch.

1713
01:13:56,900 --> 01:13:58,800
It's not even a soft real-time operating system.

1714
01:13:58,800 --> 01:14:00,500
Let alone a hard real-time operating system.

1715
01:14:00,700 --> 01:14:03,400
And what that means is that, yeah, it's actually not that great of an

1716
01:14:03,400 --> 01:14:06,600
operating system for games, because sure stuff can happen all the time

1717
01:14:06,600 --> 01:14:08,400
in Windows, that causes our game to lag out.

1718
01:14:08,400 --> 01:14:09,300
And if that point

1719
01:14:09,500 --> 01:14:11,600
All bets are off, you know, who knows?

1720
01:14:11,600 --> 01:14:14,000
What was when the display got updated.

1721
01:14:14,000 --> 01:14:18,100
And when we don't know how to sink when this play gets updated with

1722
01:14:18,100 --> 01:14:20,900
when the input samples are even if we were sampling the input.

1723
01:14:20,900 --> 01:14:22,700
There's a lot of bad stuff that can happen.

1724
01:14:22,800 --> 01:14:26,300
There can be USB latency on the USB bus or stuff like this.

1725
01:14:26,900 --> 01:14:30,300
All sorts of things can happen, the system as a whole is not set up

1726
01:14:30,300 --> 01:14:34,300
for us to be really accurate and that's just the facts of life.

1727
01:14:34,300 --> 01:14:37,400
When we're on the Raspberry Pi, I think we may be able to use the gpio

1728
01:14:37,400 --> 01:14:39,200
pins and the outboard I/O.

1729
01:14:39,400 --> 01:14:42,600
Board to make a real joystick that actually works that we can pull at

1730
01:14:42,600 --> 01:14:45,600
a high frequency and it's super exact.

1731
01:14:45,600 --> 01:14:47,300
So I'm kind of interested in those sorts of things.

1732
01:14:47,300 --> 01:14:50,800
But until we get on a platform that we control entirely, there's you

1733
01:14:50,800 --> 01:14:53,400
just going to have to live with the fact that it's a little sloppy and

1734
01:14:53,400 --> 01:14:54,700
there's nothing you can do about it.

1735
01:14:57,100 --> 01:14:59,200
I mean, well, there's something could do you cannot make it worse

1736
01:14:59,600 --> 01:14:59,800
base?

1737
01:15:00,000 --> 01:15:00,500
We're going to try.

1738
01:15:00,500 --> 01:15:03,300
Like I said to kind capture all the nuances of the input as much as

1739
01:15:03,300 --> 01:15:03,800
possible.

1740
01:15:03,800 --> 01:15:06,200
And maybe we'll pull a little, will try not to make it worse.

1741
01:15:06,600 --> 01:15:09,700
But I guess what I'm saying is, there's a minimum bar there and

1742
01:15:09,700 --> 01:15:12,500
windows sets that minimum bar pretty sloppy.

1743
01:15:12,600 --> 01:15:15,000
So you're never no matter what you do, you're never going to get too

1744
01:15:15,000 --> 01:15:19,000
far through that slop because there's always, you know, someone runs

1745
01:15:19,000 --> 01:15:21,900
Adobe Acrobat in the background doesn't realize it and it's sucking

1746
01:15:21,900 --> 01:15:25,400
down 25% of the CPU and randomly inserting spikes this like, who knows

1747
01:15:25,400 --> 01:15:26,400
what could happen, right?

1748
01:15:27,300 --> 01:15:28,600
It's banana cakes.

1749
01:15:32,800 --> 01:15:34,800
Let's see.

1750
01:15:38,600 --> 01:15:40,400
I can't find all the questions.

1751
01:15:40,400 --> 01:15:41,700
There's so many of them.

1752
01:15:43,500 --> 01:15:43,700
Them.

1753
01:15:51,500 --> 01:15:52,700
I got, I got nothing.

1754
01:15:52,700 --> 01:15:53,500
There's so many questions.

1755
01:15:53,500 --> 01:15:55,300
A lot of them aren't about the code.

1756
01:15:58,000 --> 01:15:59,100
Let's see.

1757
01:16:02,500 --> 01:16:04,500
To Vault, eval Amo.

1758
01:16:04,600 --> 01:16:06,400
Your normalizing code has an error.

1759
01:16:06,700 --> 01:16:08,800
They both divided by positive.

1760
01:16:09,000 --> 01:16:10,800
You should normalize thusly.

1761
01:16:13,000 --> 01:16:14,800
I don't know that.

1762
01:16:14,800 --> 01:16:16,600
I do have an error.

1763
01:16:17,400 --> 01:16:19,200
This is correct.

1764
01:16:19,500 --> 01:16:20,700
As far as I know.

1765
01:16:21,200 --> 01:16:25,100
So if the value is negative, we divided by the maximum negative value

1766
01:16:25,400 --> 01:16:28,500
and we want the thing to be -1 at maximum.

1767
01:16:28,600 --> 01:16:29,500
So this is negative.

1768
01:16:29,500 --> 01:16:31,400
So a negative divided by a positive is a negative.

1769
01:16:31,500 --> 01:16:32,300
That's right.

1770
01:16:32,800 --> 01:16:34,100
This is the positive Branch.

1771
01:16:34,100 --> 01:16:36,400
So a positive divided by a positive is also positive.

1772
01:16:37,300 --> 01:16:39,100
So it's also correct.

1773
01:16:39,200 --> 01:16:42,100
So basically this is the most correct way to normalize as far as

1774
01:16:42,300 --> 01:16:45,700
I don't think you can normalize any more correctly than this.

1775
01:16:46,700 --> 01:16:48,600
I think the slightly less correct way.

1776
01:16:48,600 --> 01:16:52,300
Potentially would be the way that misc Annex or mechanics, or whatever

1777
01:16:52,700 --> 01:16:53,800
had suggested.

1778
01:16:53,900 --> 01:16:56,800
I think that way would be possibly a little faster due to the

1779
01:16:56,800 --> 01:16:57,300
branchless.

1780
01:16:57,300 --> 01:16:58,100
I'm not sure.

1781
01:16:59,000 --> 01:17:02,900
And so, if I was going to be concerned with speed, I would probably do

1782
01:17:02,900 --> 01:17:06,600
it the other way, but then again, this is, I mean, even caring about

1783
01:17:06,600 --> 01:17:08,700
the optimization of this is crazy.

1784
01:17:09,300 --> 01:17:11,400
There is, it doesn't matter the memory.

1785
01:17:12,100 --> 01:17:14,200
Us here are going to be all that you care about the nothing.

1786
01:17:14,300 --> 01:17:18,100
This computation is so minor in a relevant that even thinking about

1787
01:17:18,100 --> 01:17:19,900
the performance, doesn't make any sense to me.

1788
01:17:20,300 --> 01:17:23,100
So yeah, so I think this is the most correct way you could do it.

1789
01:17:23,400 --> 01:17:24,900
I'm not sure if there is a more correct way.

1790
01:17:24,900 --> 01:17:26,900
But if there is someone else could say, it's certainly I don't think

1791
01:17:26,900 --> 01:17:28,200
the one you're talking about though.

1792
01:17:34,100 --> 01:17:35,500
Let's see.

1793
01:17:51,600 --> 01:17:55,400
So many questions to read through what happens if there's a name

1794
01:17:55,400 --> 01:17:59,700
conflict between struct scope and a non Nest instruct as far as I know

1795
01:17:59,700 --> 01:17:59,800
it.

1796
01:18:00,000 --> 01:18:02,600
An error and I can try that for you.

1797
01:18:02,800 --> 01:18:05,500
I don't think I've ever actually caught in this error myself.

1798
01:18:05,500 --> 01:18:11,300
But yeah, so if I do a struct foo or a union Foo as what we were doing

1799
01:18:11,300 --> 01:18:18,000
before, and I do in X and then I do struct float X, I pretty much

1800
01:18:18,000 --> 01:18:19,000
think you just get an error.

1801
01:18:19,300 --> 01:18:19,700
Yeah.

1802
01:18:20,900 --> 01:18:23,500
Basically you just you just can't do that and you don't have to worry

1803
01:18:23,500 --> 01:18:26,000
about it because the compiler will just, it'll just catch it for you.

1804
01:18:26,000 --> 01:18:28,700
It's not an area that will ever show up in your, in your compiled

1805
01:18:28,700 --> 01:18:28,900
code.

1806
01:18:28,900 --> 01:18:29,200
It's

1807
01:18:30,000 --> 01:18:31,100
totally caught at compile time.

1808
01:18:36,900 --> 01:18:38,800
Do you plan on abstracting the input more?

1809
01:18:38,900 --> 01:18:41,100
For example, instead of having a player respond to a button, press

1810
01:18:41,100 --> 01:18:42,300
have them respond to an action.

1811
01:18:42,300 --> 01:18:43,900
That is bound to a button or stick.

1812
01:18:43,900 --> 01:18:47,100
No, I don't think we're going to do re bindable controls.

1813
01:18:48,300 --> 01:18:48,900
In other words.

1814
01:18:48,900 --> 01:18:53,200
I don't think I'm going to let the person bind like a to the thing

1815
01:18:53,200 --> 01:18:55,800
that used to be bound to the Y button, I think.

1816
01:18:56,800 --> 01:19:01,800
And and that's that's not because I think that you shouldn't do that

1817
01:19:01,800 --> 01:19:05,400
or that like I have that you that there's a coding reason not to do it

1818
01:19:05,400 --> 01:19:06,000
if you want.

1819
01:19:06,200 --> 01:19:09,400
Ahead and extend handmade here at everybody will controls be my guest.

1820
01:19:09,900 --> 01:19:12,900
But the reason I don't want to do it is I don't like games where I

1821
01:19:12,900 --> 01:19:14,500
boot them up and there's all these options.

1822
01:19:14,900 --> 01:19:17,400
I'd much rather prefer to just reboot the game and it's the game and

1823
01:19:17,400 --> 01:19:18,000
there's no options.

1824
01:19:18,000 --> 01:19:22,500
The options are set to the way they should be set and off you go.

1825
01:19:24,100 --> 01:19:26,800
Because otherwise what happens is if there's an option screen, I go

1826
01:19:26,800 --> 01:19:28,600
start thinking about how to refine the controls.

1827
01:19:28,600 --> 01:19:30,900
And I don't really want to think about Brandon controls, and I want

1828
01:19:30,900 --> 01:19:34,000
the controls to be so simple, that people wouldn't have to remind the

1829
01:19:34,000 --> 01:19:34,600
controls.

1830
01:19:34,600 --> 01:19:36,000
Like it's just like, yeah,

1831
01:19:36,100 --> 01:19:38,500
There's four buttons and the 4-way stick and the buttons.

1832
01:19:38,500 --> 01:19:40,200
Do something that's in a direction or something.

1833
01:19:40,200 --> 01:19:43,000
So, there's like, there's no way you'd ever remind them different

1834
01:19:43,200 --> 01:19:43,600
differently.

1835
01:19:43,600 --> 01:19:44,600
I like that better.

1836
01:19:45,400 --> 01:19:48,800
So I'm going to try and be more on that side of the philosophical

1837
01:19:48,800 --> 01:19:51,400
fence, where the controls are dead simple, and you'd never have to

1838
01:19:51,400 --> 01:19:54,900
rebuy them rather than let's do a whole system for a binding, the

1839
01:19:54,900 --> 01:19:57,800
controls and make a pretty interface with people, don't mind the fact

1840
01:19:57,800 --> 01:19:59,500
that they have to rebuy in the controls and whatever.

1841
01:20:02,700 --> 01:20:05,100
Why is game update and render internal when they designed to be called

1842
01:20:05,100 --> 01:20:05,500
for the pipe?

1843
01:20:05,500 --> 01:20:07,100
Where all our functions are internal?

1844
01:20:07,700 --> 01:20:10,000
They are all internal because we only have one translation unit.

1845
01:20:10,000 --> 01:20:13,000
So everything has static in front of it effectively because that's

1846
01:20:13,000 --> 01:20:15,100
just faster for the compiler because it knows it's never going to have

1847
01:20:15,100 --> 01:20:18,100
to do any external linking for anything because everything is all

1848
01:20:18,100 --> 01:20:19,300
pound included into one file.

1849
01:20:19,300 --> 01:20:20,600
We're just compiling as one big file.

1850
01:20:20,600 --> 01:20:21,600
So everything is internal.

1851
01:20:24,800 --> 01:20:25,900
Let's see.

1852
01:20:27,300 --> 01:20:29,000
Let's see.

1853
01:20:36,300 --> 01:20:38,800
So left-handed people can't play with a Gamepad though.

1854
01:20:38,800 --> 01:20:40,500
They'd never be able to push the buttons.

1855
01:20:41,100 --> 01:20:43,500
I mean, maybe if you say you want to do re bindable keys for

1856
01:20:43,500 --> 01:20:47,900
left-handed, people on a keyboard then maybe that makes some sense.

1857
01:20:48,700 --> 01:20:53,900
But on a joystick, there's no I mean like I'm holding a Gamepad.

1858
01:20:54,000 --> 01:20:57,800
There's no way there's no buttons on the left side of this thing.

1859
01:20:57,900 --> 01:20:59,900
So there'd be no way to actually play it.

1860
01:21:01,200 --> 01:21:02,500
In a left-handed way.

1861
01:21:02,700 --> 01:21:03,700
And if that makes any sense.

1862
01:21:14,600 --> 01:21:15,900
Let's see.

1863
01:21:18,000 --> 01:21:21,000
When we decide to actually remove, all to dues in your code, so we'll

1864
01:21:21,000 --> 01:21:23,000
probably never remove all the two dudes in the code.

1865
01:21:23,500 --> 01:21:25,100
They'll probably keep sort of piling up.

1866
01:21:25,100 --> 01:21:27,600
And then we'll do kind of ways where we cut them down next week.

1867
01:21:27,600 --> 01:21:30,600
I want to do a pass on some of the to dues that are in there.

1868
01:21:30,800 --> 01:21:33,800
And so next week, probably will do a cleanup week where we go through

1869
01:21:33,800 --> 01:21:34,900
and tighten everything down.

1870
01:21:35,500 --> 01:21:38,400
I want to go through and get the audio sync, proper and stuff like

1871
01:21:38,400 --> 01:21:38,600
that.

1872
01:21:38,600 --> 01:21:40,900
So, next week, we'll probably will get rid of some

1873
01:21:43,700 --> 01:21:45,100
See.

1874
01:21:48,200 --> 01:21:49,600
Let's see.

1875
01:21:52,400 --> 01:21:55,400
And by the way, like I said, I'm not saying there's anything wrong

1876
01:21:55,400 --> 01:21:56,200
with her binding Keys.

1877
01:21:56,200 --> 01:21:58,900
It's just it's my game and I don't really want to go down that road.

1878
01:21:59,000 --> 01:21:59,200
Right?

1879
01:21:59,200 --> 01:22:02,200
Like re bindable keys are decision that.

1880
01:22:02,200 --> 01:22:06,000
The designer makes that they put in the game and you can also have a

1881
01:22:06,000 --> 01:22:09,100
way to rebind Keys, external to the game like with a text file or you

1882
01:22:09,100 --> 01:22:11,100
can run utilities that ribeye the case and that's fine.

1883
01:22:11,100 --> 01:22:13,800
But putting them in the game is just something I just don't want to

1884
01:22:13,800 --> 01:22:14,000
do.

1885
01:22:14,000 --> 01:22:17,100
I don't like that and so I'm not going to do that.

1886
01:22:17,500 --> 01:22:22,000
And if anything, what I would do is if there was a left, right?

1887
01:22:22,200 --> 01:22:25,000
Russell that had to happen for left-handedness, which I don't even

1888
01:22:25,000 --> 01:22:27,600
know if there is because I don't think of when I think of the kind of

1889
01:22:27,600 --> 01:22:30,400
game, this is I don't think of there being a bonus to one hand of the

1890
01:22:30,400 --> 01:22:32,400
other you need to use both hands effectively.

1891
01:22:32,600 --> 01:22:36,700
So I don't think there's any way that a left-handed person can can get

1892
01:22:36,700 --> 01:22:38,300
a disadvantage or an advantage.

1893
01:22:38,400 --> 01:22:39,900
It's like you need both hands.

1894
01:22:40,500 --> 01:22:44,400
So basically what I would say is that I if I was gonna do something

1895
01:22:44,400 --> 01:22:48,300
that I put it in game more so that like when I said like move the guy

1896
01:22:48,300 --> 01:22:51,700
around whichever thing they tapped, that's what I'll make be movement

1897
01:22:51,700 --> 01:22:52,000
or

1898
01:22:52,100 --> 01:22:53,100
Like this, but yet.

1899
01:23:02,100 --> 01:23:04,600
How is the old controller persisted across frames?

1900
01:23:04,600 --> 01:23:08,000
So that was actually just like I said, it was just kind of cheese.

1901
01:23:08,000 --> 01:23:09,000
I didn't do anything.

1902
01:23:09,300 --> 01:23:11,900
I just put it outside the game Loop.

1903
01:23:12,100 --> 01:23:13,000
So we come in here.

1904
01:23:13,000 --> 01:23:14,100
We open the window.

1905
01:23:14,200 --> 01:23:18,500
We allocate space on the stack by just like saying, I want to inputs

1906
01:23:18,700 --> 01:23:21,700
and then I pointed one pointer at the first one and one pointer at the

1907
01:23:21,700 --> 01:23:22,300
second one.

1908
01:23:22,500 --> 01:23:23,800
Then, inside the loop.

1909
01:23:23,900 --> 01:23:25,400
We just write to one of them.

1910
01:23:25,600 --> 01:23:29,200
We write two new input and we look at old input, right?

1911
01:23:30,000 --> 01:23:33,400
And then at the end, we swap the two pointers so that we're pointing

1912
01:23:33,600 --> 01:23:36,200
new input at the old input and open at the new input.

1913
01:23:36,300 --> 01:23:39,200
So that the new input effectively becomes the old input that we would

1914
01:23:39,200 --> 01:23:41,300
compare against in the next Loop through.

1915
01:23:41,500 --> 01:23:44,000
So, the way it persists is just because it's declared outside the

1916
01:23:44,000 --> 01:23:44,100
loop.

1917
01:23:44,100 --> 01:23:47,000
It's on the stack before we enter the loop and just stays on the

1918
01:23:47,000 --> 01:23:47,500
stack.

1919
01:23:51,500 --> 01:23:54,400
Do do, do do.

1920
01:24:00,000 --> 01:24:02,000
Will the windows callbacks for keyboard inputs required?

1921
01:24:02,000 --> 01:24:03,500
Great deal of extra work for you to implement.

1922
01:24:03,500 --> 01:24:07,100
No, and I would like to get to that tomorrow.

1923
01:24:07,100 --> 01:24:08,600
Pretty simply like basically.

1924
01:24:08,600 --> 01:24:11,300
All we're going to do here is inside these.

1925
01:24:11,600 --> 01:24:14,700
We're going to set the think the same things that we were going to set

1926
01:24:15,000 --> 01:24:19,700
before we could even probably do that very quickly.

1927
01:24:19,700 --> 01:24:22,700
The problem is assigning controllers to it.

1928
01:24:22,700 --> 01:24:27,800
So I'm probably just going to let it be controller zero right now as

1929
01:24:27,800 --> 01:24:28,400
well.

1930
01:24:28,500 --> 01:24:29,900
So both of them go to the same.

1931
01:24:30,000 --> 01:24:31,400
Roller for testing purposes.

1932
01:24:31,500 --> 01:24:33,700
The problem is the is analog thing.

1933
01:24:33,900 --> 01:24:35,200
Like I'm not sure how to set that.

1934
01:24:35,200 --> 01:24:35,600
Exactly.

1935
01:24:35,600 --> 01:24:38,600
So we'll have to sort of think about how we get the keyboard input in

1936
01:24:38,600 --> 01:24:38,900
there.

1937
01:24:39,000 --> 01:24:43,100
Maybe I'll just put it on controller, one, always and only sample the

1938
01:24:43,100 --> 01:24:44,800
first controller here or something like that.

1939
01:24:44,800 --> 01:24:45,100
I don't know.

1940
01:24:45,100 --> 01:24:47,200
We got to think about how we're going to sign controllers.

1941
01:24:47,400 --> 01:24:51,000
It's real easy on a console when you know that there's four slots and

1942
01:24:51,000 --> 01:24:54,400
the controllers go into those slots, but on a computer it's kind of

1943
01:24:54,400 --> 01:24:54,700
wonky.

1944
01:24:54,700 --> 01:24:57,900
Like if there's four controllers plugged into the computer which there

1945
01:24:57,900 --> 01:24:59,800
could be and there's a keyboard.

1946
01:25:00,700 --> 01:25:04,200
Which controllers are, which is the first one you hit, like it's kind

1947
01:25:04,200 --> 01:25:05,600
of confusing how you want to do that.

1948
01:25:05,600 --> 01:25:06,900
In terms of ux.

1949
01:25:07,000 --> 01:25:10,200
It's not hard to program once you've decided what should happen, but

1950
01:25:10,200 --> 01:25:12,200
it is kind of hard to decide what should happen.

1951
01:25:12,800 --> 01:25:13,900
So something like that.

1952
01:25:18,700 --> 01:25:20,600
What about people who only have left arms?

1953
01:25:20,800 --> 01:25:23,600
Will you can actually play the game if you only have left arms because

1954
01:25:23,600 --> 01:25:25,300
it requires two hands to play.

1955
01:25:25,400 --> 01:25:28,000
Unfortunately, that's just the way the game works.

1956
01:25:37,600 --> 01:25:39,300
Let's see.

1957
01:25:39,400 --> 01:25:47,000
I do not have any more questions that I'm seeing, will we eventually

1958
01:25:47,000 --> 01:25:50,100
be using a timer to pull the controller input or just a thread?

1959
01:25:52,000 --> 01:25:56,100
So we can't really use a timer depending on what you mean by that

1960
01:25:57,500 --> 01:25:58,500
because well,

1961
01:26:01,200 --> 01:26:04,300
So, I don't know of maybe you could use a timer.

1962
01:26:04,600 --> 01:26:08,700
I don't know of any timer in Windows, that's accurate enough for that.

1963
01:26:08,900 --> 01:26:12,300
So, I would say we would have to use a thread on Windows on other

1964
01:26:12,300 --> 01:26:13,000
operating systems.

1965
01:26:13,000 --> 01:26:15,900
There may be timers that are accurate Enough by don't know if Windows,

1966
01:26:15,900 --> 01:26:18,500
especially Windows XP, which will be our minimum Target.

1967
01:26:18,800 --> 01:26:21,900
I don't know if there would actually be a tart a way to do that.

1968
01:26:22,400 --> 01:26:29,500
We would probably do something with a separate thread hard to say, we

1969
01:26:29,500 --> 01:26:30,700
may also be able to do some

1970
01:26:30,900 --> 01:26:33,300
Good stuff with xinput.

1971
01:26:33,300 --> 01:26:33,600
I don't know.

1972
01:26:33,600 --> 01:26:35,200
We'll see what I don't know yet.

1973
01:26:35,200 --> 01:26:36,600
That's that's to be determined.

1974
01:26:41,200 --> 01:26:42,200
Time to compare One Way Ticket.

1975
01:26:42,200 --> 01:26:43,400
One millisecond resolution.

1976
01:26:43,400 --> 01:26:45,000
Yeah, so timer begin period.

1977
01:26:45,000 --> 01:26:49,500
One might ticket one millisecond resolution, but it might not.

1978
01:26:50,600 --> 01:26:56,100
Like I said, it's it means that you might be able to do a one sec Ms.

1979
01:26:56,100 --> 01:26:56,600
Sleep.

1980
01:26:56,700 --> 01:26:58,400
It doesn't guarantee that you will.

1981
01:26:58,400 --> 01:26:59,800
It could put you to sleep for far.

1982
01:27:00,000 --> 01:27:04,000
Longer than that, so it's hard to say if you really wanted to be mr.

1983
01:27:04,000 --> 01:27:05,300
Doesn't care about the CPU.

1984
01:27:05,300 --> 01:27:08,100
You just spin lock on the pole.

1985
01:27:08,500 --> 01:27:09,600
But yeah, I don't know what.

1986
01:27:09,600 --> 01:27:10,600
We'll look into that.

1987
01:27:10,600 --> 01:27:11,500
We'll look into that.

1988
01:27:16,700 --> 01:27:21,300
I think we basically got all the questions trying to see if I missed

1989
01:27:21,300 --> 01:27:21,900
anything.

1990
01:27:25,300 --> 01:27:27,300
I think we've got all the questions.

1991
01:27:31,500 --> 01:27:32,800
Got three minutes left.

1992
01:27:32,900 --> 01:27:35,600
Someone asks have I done much physics?

1993
01:27:35,600 --> 01:27:36,600
Coding?

1994
01:27:37,200 --> 01:27:39,500
Does that say have I done much finished cutting related to games or

1995
01:27:39,500 --> 01:27:40,000
otherwise?

1996
01:27:40,000 --> 01:27:40,300
Yes.

1997
01:27:40,300 --> 01:27:41,700
I have done a ton of physics coding.

1998
01:27:41,700 --> 01:27:45,700
In fact, I worked on one of the first game physics engines for

1999
01:27:45,700 --> 01:27:46,700
definition six.

2000
01:27:46,800 --> 01:27:49,900
Unfortunately, it never shipped in an actual product.

2001
01:27:50,400 --> 01:27:52,500
But yes, I did a ton of physics coding back then.

2002
01:27:53,600 --> 01:27:59,600
It is the only reason I really no real physics code instead of like

2003
01:27:59,600 --> 01:28:01,200
sort of wrong game physics code.

2004
01:28:02,400 --> 01:28:02,800
Not that.

2005
01:28:02,800 --> 01:28:06,100
We really need real physics code for this game, but it's why.

2006
01:28:06,100 --> 01:28:09,300
I know, for example, I would know how to program angular momentum,

2007
01:28:09,800 --> 01:28:13,400
which almost no game physics ever has, unless it uses a real game

2008
01:28:13,400 --> 01:28:15,600
physics engine, but that's the only reason I knew that because Chris

2009
01:28:15,600 --> 01:28:19,700
Hecker was really into it at the time and so I learned a bunch of that

2010
01:28:19,700 --> 01:28:21,200
stuff at the time.

2011
01:28:25,900 --> 01:28:28,300
Would you be fine with people using the platform as a base for making

2012
01:28:28,300 --> 01:28:29,700
their own games with attribution?

2013
01:28:29,700 --> 01:28:31,800
No, not until it's released.

2014
01:28:32,500 --> 01:28:34,400
That that's actually answered in here.

2015
01:28:35,000 --> 01:28:37,500
You can see on the handmade hero thing.

2016
01:28:38,200 --> 01:28:39,500
There's the source code.

2017
01:28:39,600 --> 01:28:40,700
It says right here.

2018
01:28:40,800 --> 01:28:42,600
How will the source code will be licensed?

2019
01:28:43,000 --> 01:28:44,500
You can go read that if you want to.

2020
01:28:44,800 --> 01:28:46,200
And so basically all the source code.

2021
01:28:46,200 --> 01:28:47,700
You still have to get a license from us.

2022
01:28:47,700 --> 01:28:52,000
If you want to use it until two years after the game is done, or the

2023
01:28:52,000 --> 01:28:53,900
game is released after that.

2024
01:28:53,900 --> 01:28:55,200
It becomes public domain and you

2025
01:28:55,500 --> 01:28:58,900
Do whatever you want with it, including use it without attribution.

2026
01:28:58,900 --> 01:29:02,000
So you will not even have to give attribution to it after that

2027
01:29:02,000 --> 01:29:03,200
two-year time period.

2028
01:29:03,200 --> 01:29:05,800
But up until then you will have to get a license from us.

2029
01:29:05,800 --> 01:29:07,800
That does not mean we wouldn't give you a license.

2030
01:29:07,800 --> 01:29:10,100
If you ask her when it just means you have to talk with us.

2031
01:29:10,300 --> 01:29:13,400
And we will have to agree that your project is something we're okay

2032
01:29:13,400 --> 01:29:14,400
with before.

2033
01:29:14,400 --> 01:29:15,400
You could do that.

2034
01:29:20,500 --> 01:29:22,800
But yet, obviously this is a learning project.

2035
01:29:22,800 --> 01:29:25,600
So the goal is at some point and it will be at least two year.

2036
01:29:25,600 --> 01:29:28,100
It will be at least before that two-year clock.

2037
01:29:28,100 --> 01:29:31,300
The to your clock is the maximum that time it will all be released in

2038
01:29:31,300 --> 01:29:31,900
the public domain.

2039
01:29:31,900 --> 01:29:35,700
So, at that point, after we've basically been able to recoup the money

2040
01:29:35,700 --> 01:29:36,500
on the game.

2041
01:29:36,500 --> 01:29:41,200
Hopefully, if we're lucky, then, you know, we'll release in the public

2042
01:29:41,200 --> 01:29:41,500
domain.

2043
01:29:41,500 --> 01:29:43,900
So, everyone could just party on it, and you can do whatever you want.

2044
01:29:44,100 --> 01:29:45,200
You can make commercial games with it.

2045
01:29:45,200 --> 01:29:47,300
You don't have to credit us, you have to do anything against go to

2046
01:29:47,300 --> 01:29:47,700
town.

2047
01:29:50,300 --> 01:29:52,500
How much will you need to explore other platforms for and doing what

2048
01:29:52,500 --> 01:29:53,800
the abstraction API will look like?

2049
01:29:54,400 --> 01:29:56,100
I won't have to explore them at all.

2050
01:29:56,200 --> 01:29:58,700
Pretty much because I've done so much cross-platform programming.

2051
01:29:58,700 --> 01:29:59,800
So I just know the stuff we're doing.

2052
01:30:00,000 --> 01:30:00,900
I work mostly.

2053
01:30:01,800 --> 01:30:05,400
But yeah, if you were doing this yourself and you had no experience,

2054
01:30:05,700 --> 01:30:07,500
what you'd want to do is not what we're doing.

2055
01:30:07,600 --> 01:30:10,400
You wouldn't want to do one platform and then make the game, you'd

2056
01:30:10,400 --> 01:30:15,600
want to do a bunch of platforms with a Prototype game and get, you

2057
01:30:15,600 --> 01:30:17,500
know, all the platform stuff, straightened out.

2058
01:30:17,600 --> 01:30:19,600
And then be like, okay, we're good to go and go forwards.

2059
01:30:19,900 --> 01:30:20,800
That's what you want to do.

2060
01:30:22,300 --> 01:30:24,200
I think we're basically out of time.

2061
01:30:24,200 --> 01:30:25,600
The stream has ended according to the clock.

2062
01:30:25,600 --> 01:30:26,800
Let's see if there's anything else.

2063
01:30:27,400 --> 01:30:30,000
What kinds of numerical methods are used in game physics.

2064
01:30:31,100 --> 01:30:33,700
How is that a question related to today's code?

2065
01:30:33,900 --> 01:30:37,900
How you had to know when you type that in, that was not related to

2066
01:30:37,900 --> 01:30:41,300
today's code because we haven't done any physics in today's code.

2067
01:30:41,400 --> 01:30:42,700
There was no physics in there.

2068
01:30:42,900 --> 01:30:43,200
There.

2069
01:30:43,300 --> 01:30:44,800
We aren't even passing the time.

2070
01:30:44,800 --> 01:30:49,300
You don't even passing t t by definite physics is by definition, the

2071
01:30:49,300 --> 01:30:52,000
computation of what happens to objects in the game.

2072
01:30:52,200 --> 01:30:53,600
Game over a Time.

2073
01:30:53,600 --> 01:30:54,100
Step T.

2074
01:30:54,100 --> 01:30:56,300
And we're not even passing a tea.

2075
01:30:56,400 --> 01:30:58,100
How could we have physics questions?

2076
01:30:58,500 --> 01:30:59,200
How

2077
01:31:02,700 --> 01:31:03,700
What can you do to people?

2078
01:31:03,800 --> 01:31:04,900
What can you do?

2079
01:31:09,400 --> 01:31:10,100
All right.

2080
01:31:10,600 --> 01:31:11,800
Let's see.

2081
01:31:12,000 --> 01:31:14,000
So think we are done with all the questions.

2082
01:31:14,600 --> 01:31:18,000
I think we will are done with everything.

2083
01:31:22,900 --> 01:31:25,300
I don't see anything left.

2084
01:31:25,400 --> 01:31:30,100
So I am going to call that done ladies and gentlemen, if you would

2085
01:31:30,100 --> 01:31:34,100
like a copy of the source code for now and forever more, you can

2086
01:31:34,100 --> 01:31:35,100
pre-order here.

2087
01:31:35,400 --> 01:31:37,500
Like I said, the license is described down here.

2088
01:31:37,500 --> 01:31:39,700
It's also in the actual game proper.

2089
01:31:40,200 --> 01:31:42,900
And yeah, for people who didn't know about this or didn't read this.

2090
01:31:42,900 --> 01:31:43,600
It is true.

2091
01:31:43,600 --> 01:31:47,000
The source code will eventually be released in the public domain.

2092
01:31:47,000 --> 01:31:50,600
So if you are thinking of taking the final stuff and basing your own

2093
01:31:50,600 --> 01:31:52,200
game on it, that will

2094
01:31:52,400 --> 01:31:57,300
The thing that is possible, you can contact us and get a license to it

2095
01:31:57,300 --> 01:32:01,000
earlier if you really need one, but you can also just know that that

2096
01:32:01,000 --> 01:32:02,600
it will be in the public domain two years after.

2097
01:32:02,600 --> 01:32:04,000
So you could start building things on it.

2098
01:32:04,000 --> 01:32:07,900
And by the time your game was done, you'd be okay with it probably.

2099
01:32:08,200 --> 01:32:10,600
But anyway, if you want a copy source code to follow it, home, that

2100
01:32:10,600 --> 01:32:12,500
comes with any pre-order of the game.

2101
01:32:12,500 --> 01:32:13,400
Just gets the source code.

2102
01:32:13,400 --> 01:32:14,200
You could do that here.

2103
01:32:14,400 --> 01:32:18,000
If you need to discuss things ask questions, or just generally want to

2104
01:32:18,000 --> 01:32:20,200
chat with other people about handmade hero.

2105
01:32:20,400 --> 01:32:22,200
The news and forums buttons will let you do that.

2106
01:32:22,300 --> 01:32:22,700
That.

2107
01:32:22,900 --> 01:32:25,400
And of course, the video archived on YouTube is also there.

2108
01:32:25,600 --> 01:32:29,500
There's also a great resource put up by some people from the community

2109
01:32:29,500 --> 01:32:32,700
who do an awesome job at it called the episode guide which has older

2110
01:32:32,700 --> 01:32:35,800
episodes annotated so you can go in there and get them annotated.

2111
01:32:35,800 --> 01:32:36,700
That's really great.

2112
01:32:36,800 --> 01:32:39,400
Take a look at these guys up here who have done all the hard work to

2113
01:32:40,100 --> 01:32:43,200
their you can say thanks to them on Twitter, which would be very nice

2114
01:32:43,200 --> 01:32:45,000
because they put together some really amazing stuff.

2115
01:32:45,100 --> 01:32:48,800
So anyway, thank you all for joining us for another episode of

2116
01:32:48,800 --> 01:32:49,800
handmade Hero.

2117
01:32:50,200 --> 01:32:51,100
Please come back.

2118
01:32:51,100 --> 01:32:52,200
Tomorrow, 8:00 p.m.

2119
01:32:52,300 --> 01:32:57,000
Pacific Standard time when we will be finishing up our input code and

2120
01:32:57,000 --> 01:32:59,900
moving on to memory and perhaps,

2121
01:33:00,000 --> 01:33:02,000
We'll pass the time down as well.

2122
01:33:02,300 --> 01:33:03,600
So that should all be tomorrow.

2123
01:33:03,600 --> 01:33:06,000
If not, it will spill over a little bit into Friday, but that should

2124
01:33:06,000 --> 01:33:09,800
be basically it for abstraction layer, and then we can move on next

2125
01:33:09,800 --> 01:33:10,700
week, to cleaning things up.

2126
01:33:10,700 --> 01:33:13,600
Before we start coding, the game, which is pretty exciting.

2127
01:33:13,800 --> 01:33:15,500
So hope to see you all here tomorrow.

2128
01:33:15,500 --> 01:33:20,700
Thank you very much for joining us and have a fantastic rest of your

2129
01:33:20,700 --> 01:33:21,400
Thursday.

2130
01:33:21,500 --> 01:33:24,400
Sorry, your Wednesday night and your Thursday day.

2131
01:33:24,600 --> 01:33:25,300
Thanks, everyone.

