1
00:00:02,400 --> 00:00:04,900
Hello, everyone, and welcome to handmade hero show.

2
00:00:04,900 --> 00:00:08,900
Rico to complete game live on stream last week.

3
00:00:09,000 --> 00:00:16,200
I believe, we got to the point where we have sort of a pretty clean

4
00:00:16,200 --> 00:00:21,200
version of our rendering system working, where we really eliminated, a

5
00:00:21,200 --> 00:00:26,600
lot of sort of the weirdnesses that that we had inherited over the,

6
00:00:27,000 --> 00:00:31,000
you know, over the work on our renderer where we, you know, kind of

7
00:00:31,000 --> 00:00:31,600
had had a bunch.

8
00:00:31,800 --> 00:00:35,100
Stuff we were doing to support you know, 2D sorting and all these are

9
00:00:35,100 --> 00:00:35,800
the sorts of things.

10
00:00:36,000 --> 00:00:38,300
We went to the 3D pipeline 11 stuff was necessary anymore.

11
00:00:38,300 --> 00:00:41,800
And so we kind of cleaned everything out and we now have stuff working

12
00:00:41,800 --> 00:00:42,200
in.

13
00:00:42,200 --> 00:00:43,800
What is a pretty sane fashion?

14
00:00:44,000 --> 00:00:45,100
You can actually see that.

15
00:00:45,100 --> 00:00:49,300
Now, we've just really only got one basic operation that we asked our

16
00:00:49,300 --> 00:00:50,000
renderer to do.

17
00:00:50,000 --> 00:00:53,000
And that is to draw a series of textured quads, which is what you'd

18
00:00:53,000 --> 00:00:56,400
expect in a Sprite Style game and it to that end.

19
00:00:58,000 --> 00:01:00,900
We've been able to implement some additional features like we have

20
00:01:00,900 --> 00:01:02,200
now, depth, based fog.

21
00:01:02,500 --> 00:01:06,700
And so this weekend, probably, I think the best thing to do would be

22
00:01:06,700 --> 00:01:10,400
to just look at some of the rest of the cleanup that might be implied

23
00:01:10,400 --> 00:01:10,900
by this.

24
00:01:13,100 --> 00:01:17,700
Transition and to look at other things that we may need to do along

25
00:01:17,700 --> 00:01:18,300
those lines.

26
00:01:18,300 --> 00:01:24,100
So for example, one of the things that we had working at one point in

27
00:01:24,100 --> 00:01:29,400
the original, renderer was the ability to Alpha Fade Out, the sort of

28
00:01:29,400 --> 00:01:37,200
part of the, you know, the I'm not sure how to describe it really.

29
00:01:37,200 --> 00:01:40,900
But in the case, where the game had a stack of levels on top of each

30
00:01:40,900 --> 00:01:42,000
other a stack of

31
00:01:42,300 --> 00:01:43,400
Rooms on top of each other.

32
00:01:43,400 --> 00:01:47,100
So, you know, you'd imagine stairwells going up and down in between

33
00:01:47,100 --> 00:01:50,400
these rooms or something like this and the player being able to

34
00:01:50,400 --> 00:01:52,100
navigate through them.

35
00:01:52,500 --> 00:01:57,500
In that case, you ended up in a situation where you could have a room,

36
00:01:57,500 --> 00:02:00,500
you know, completely obscuring, the view of the player and obviously,

37
00:02:00,500 --> 00:02:01,200
this is not good.

38
00:02:01,200 --> 00:02:04,300
So one things we put it in the older version of the render was the

39
00:02:04,300 --> 00:02:08,100
ability to Alpha Fade Out that top level room.

40
00:02:09,199 --> 00:02:13,600
And the problem that we face now is we don't have that anymore.

41
00:02:13,600 --> 00:02:17,200
And in order to implement that, again, the way that we implemented it

42
00:02:17,700 --> 00:02:21,700
originally would require adding in a lot of these sort of elements

43
00:02:21,700 --> 00:02:25,800
that I don't think are very useful such as sorting Sprites or

44
00:02:25,800 --> 00:02:28,800
introducing some kind of a partition where the people who are

45
00:02:28,800 --> 00:02:30,500
specifying the Sprites artificially.

46
00:02:30,500 --> 00:02:33,900
Tell you, when you've hit the set of Sprites that's going to be in

47
00:02:33,900 --> 00:02:37,500
that top part verses in the part that shouldn't be elevated out and

48
00:02:37,500 --> 00:02:38,000
stuff like this.

49
00:02:38,200 --> 00:02:38,800
And so what we're

50
00:02:38,900 --> 00:02:39,500
Kind of interested.

51
00:02:39,500 --> 00:02:46,500
Here is looking a little bit more closely at how we would Alpha fade.

52
00:02:46,500 --> 00:02:52,600
Something out more automatically right like what can we do in this

53
00:02:52,600 --> 00:02:59,800
case to prevent things from obscuring the player in a more automated

54
00:02:59,800 --> 00:02:59,800
way.

55
00:03:00,300 --> 00:03:02,000
Right, that's what we're really looking for.

56
00:03:06,400 --> 00:03:08,900
So what I'd like to do today is start to investigate that a little bit

57
00:03:08,900 --> 00:03:12,400
more and I think we've kind of got two things on the table that we're

58
00:03:12,400 --> 00:03:15,900
going to need to sort of work on with respect to that.

59
00:03:16,800 --> 00:03:21,400
The first thing we're going to have to work on is just how we will

60
00:03:21,400 --> 00:03:23,300
approach such an alpha fate.

61
00:03:23,600 --> 00:03:26,100
The second thing that we have to work on is our camera.

62
00:03:26,900 --> 00:03:30,600
We kind of need to upgrade that to 3D now obviously our renderer

63
00:03:30,600 --> 00:03:34,700
supports a full 3D camera our game at the moment doesn't really have a

64
00:03:34,700 --> 00:03:36,000
very solid.

65
00:03:36,700 --> 00:03:40,800
Understanding of what the camera is or where it's looking, it's kind

66
00:03:40,800 --> 00:03:43,800
of ad hoc and always has been so now, would probably be the time to

67
00:03:43,800 --> 00:03:47,400
upgrade that to something a little more intelligent, little more

68
00:03:47,400 --> 00:03:48,000
sensible.

69
00:03:48,500 --> 00:03:52,600
And so we've got to deal with those two and then eventually, after

70
00:03:52,900 --> 00:03:56,400
that is done, we probably have some other like sort of remaining

71
00:03:56,400 --> 00:04:01,800
issues to deal with such as finishing up our cliprect support.

72
00:04:01,800 --> 00:04:05,600
Because right now our debug UI

73
00:04:06,100 --> 00:04:08,800
So it is re-enabled we don't we didn't fully Port.

74
00:04:08,800 --> 00:04:12,400
Some of that stuff like the cliprect stuff is not properly working in

75
00:04:12,400 --> 00:04:12,500
there.

76
00:04:12,500 --> 00:04:13,600
If I remember correctly.

77
00:04:14,500 --> 00:04:18,899
We've got to deal with our particle systems, right?

78
00:04:18,899 --> 00:04:19,300
Right now.

79
00:04:19,300 --> 00:04:23,500
They are not able to Output efficiently.

80
00:04:23,500 --> 00:04:28,600
Really, you know our renderer now has the ability to intelligently do

81
00:04:28,600 --> 00:04:34,100
things such as not, switch textures every particle if we wanted it to

82
00:04:34,600 --> 00:04:36,000
so we could patch up our particles.

83
00:04:36,200 --> 00:04:39,300
A large groups and submit them much more efficiently which seems like

84
00:04:39,300 --> 00:04:43,200
a pretty good idea because particles probably at the end of the day

85
00:04:43,400 --> 00:04:46,800
are going to comprise a lot of our draw calls.

86
00:04:47,100 --> 00:04:50,200
If we were actually changing textures, every particle, right?

87
00:04:50,200 --> 00:04:51,700
That's a very expensive thing to do.

88
00:04:52,900 --> 00:04:54,100
And it's not at all necessary.

89
00:04:54,100 --> 00:04:56,200
Now, that the Z buffer is sorting things.

90
00:04:56,200 --> 00:05:01,100
So our particle systems probably want to come down in a very specific

91
00:05:01,200 --> 00:05:05,800
additional way that would add one more set to the render is, or it

92
00:05:05,800 --> 00:05:08,600
could even use the same thing that we've got now.

93
00:05:08,600 --> 00:05:13,800
But just a Boolean that says, whether the texture changes, every quad

94
00:05:13,800 --> 00:05:17,700
or not would be sufficient for us to make sure that that wasn't going

95
00:05:17,700 --> 00:05:18,200
to happen.

96
00:05:21,000 --> 00:05:25,100
So we've got a lot of stuff we can look at now and I don't have any

97
00:05:25,100 --> 00:05:27,000
real opinion about anything needing to happen.

98
00:05:27,000 --> 00:05:29,900
First, we're just trying to sort of sweep through and make sure our

99
00:05:29,900 --> 00:05:32,600
new renderer is working nicely.

100
00:05:32,600 --> 00:05:34,100
And everything is good.

101
00:05:34,800 --> 00:05:37,600
So I'm just going to jump in there and start doing stuff.

102
00:05:37,700 --> 00:05:40,800
If you would like to jump in with me, it's 376 today.

103
00:05:41,200 --> 00:05:45,800
So used a 375 source code as your starting point, and that is what I

104
00:05:45,800 --> 00:05:47,500
am going to be working with as we go.

105
00:05:48,200 --> 00:05:49,500
So, here we go.

106
00:05:49,700 --> 00:05:54,700
in terms of just checking out where we are at at the moment, if I open

107
00:05:54,700 --> 00:05:56,400
up the code as it stands,

108
00:05:58,200 --> 00:05:59,700
Let's go ahead and run that.

109
00:06:00,500 --> 00:06:05,300
This is what we're looking like right now and everything is pretty

110
00:06:05,300 --> 00:06:10,300
good here, there's nothing particularly problematic as we go.

111
00:06:10,300 --> 00:06:14,300
You can kind of see that actually you get a pretty nice 3d effect here

112
00:06:14,600 --> 00:06:15,000
again.

113
00:06:15,000 --> 00:06:19,100
At some point we're probably going to have to you'll notice we're not

114
00:06:19,100 --> 00:06:20,400
getting our 60 frames a second.

115
00:06:20,400 --> 00:06:24,000
That's because again of that function that we have in there that does

116
00:06:24,000 --> 00:06:27,700
the get traversal, stuff is kind of bad.

117
00:06:27,700 --> 00:06:29,800
So what I could do is I can just compiled that

118
00:06:30,000 --> 00:06:33,000
violations on to fix that for the time being while we're playing

119
00:06:33,000 --> 00:06:36,600
around with it, but it would be nice to run at 60 frames a second and

120
00:06:36,600 --> 00:06:40,300
debug mode and really there's only a few small reasons why that's not

121
00:06:40,300 --> 00:06:41,500
possible at the moment.

122
00:06:42,300 --> 00:06:46,100
Okay, so anyway, here we are at 60 frames a second and so if I kind of

123
00:06:46,100 --> 00:06:50,000
come down here, you can see, you know, some of the problems that we do

124
00:06:50,000 --> 00:06:50,500
have.

125
00:06:50,700 --> 00:06:55,500
So here I am, you know, bouncing around at the bottom level and you

126
00:06:55,500 --> 00:06:58,400
can kind of see that you'll have to ignore the fact that currently we

127
00:06:58,400 --> 00:06:59,800
allow familiar is to float.

128
00:07:00,000 --> 00:07:02,300
In between levels, which is not particularly good.

129
00:07:02,800 --> 00:07:06,700
So that that dude right there is literally just kind of floating up in

130
00:07:06,700 --> 00:07:09,300
the air, which he's not really supposed to do, but you know what, he

131
00:07:09,300 --> 00:07:14,400
gonna do anyway, you can see that when I get down here, it's very

132
00:07:14,400 --> 00:07:21,000
problematic because, you know, obviously we would like the upper area

133
00:07:21,000 --> 00:07:24,100
to kind of go away at this point or something to happen here.

134
00:07:25,000 --> 00:07:26,800
And again there's just a whole host of problems here.

135
00:07:26,800 --> 00:07:29,800
We also don't really prevent you from hopping up in.

136
00:07:29,900 --> 00:07:30,700
Through the ceiling.

137
00:07:30,700 --> 00:07:32,900
Like, you can see this happen a couple times here, right?

138
00:07:32,900 --> 00:07:35,700
Where you, we allow you to pick stuff that this not even really

139
00:07:35,700 --> 00:07:36,600
connected.

140
00:07:37,300 --> 00:07:41,500
If there's something blocking your ability to jump, we don't really

141
00:07:41,500 --> 00:07:42,000
prevent it.

142
00:07:42,000 --> 00:07:46,700
So you know, if you're coming along here and you know this guy's in

143
00:07:46,700 --> 00:07:47,500
your way or something.

144
00:07:47,500 --> 00:07:52,700
Well or I guess that guys in my way when I hop I'm allowed to kind of

145
00:07:52,700 --> 00:07:53,300
hop up.

146
00:07:53,300 --> 00:07:56,100
I believe here I'm not actually 100% sure if that's true.

147
00:07:56,300 --> 00:07:56,500
Yeah.

148
00:07:56,500 --> 00:07:58,800
Well looks like it skips over there so I'm not sure why it did it

149
00:07:58,800 --> 00:07:59,800
there but point being

150
00:08:00,000 --> 00:08:04,000
Popping stuff is completely, you know, just placeholder at this point.

151
00:08:04,100 --> 00:08:05,700
So we get some weird stuff like that.

152
00:08:06,100 --> 00:08:08,900
But in terms of the renderer that's really not a an issue.

153
00:08:09,000 --> 00:08:11,700
What is an issue in terms of the render is what we're looking at right

154
00:08:11,700 --> 00:08:15,100
now, which is a situation that will absolutely occur, even if the

155
00:08:15,100 --> 00:08:18,700
hopping code is all quite correct.

156
00:08:18,700 --> 00:08:22,000
And that is specifically that when I'm hopping along down here, if the

157
00:08:22,000 --> 00:08:24,800
camera was, and again, the camera is just kind of picking randomly at

158
00:08:24,800 --> 00:08:25,500
the moment.

159
00:08:25,500 --> 00:08:28,400
But if the camera does decide to be up here, which is a reasonable

160
00:08:28,400 --> 00:08:29,800
Place, potentially for it to be,

161
00:08:30,100 --> 00:08:35,900
We would like this to go away and more specifically, you know, as you

162
00:08:35,900 --> 00:08:39,299
come up and down those stairs as the camera moves in and out, we would

163
00:08:39,299 --> 00:08:42,799
like it to go away in a nice clean fashion, right?

164
00:08:44,300 --> 00:08:47,200
So I think the first thing that I want to do probably is fixed the

165
00:08:47,200 --> 00:08:50,600
camera code and so there's a couple different things that have to

166
00:08:50,600 --> 00:08:51,300
happen there.

167
00:08:51,600 --> 00:08:54,600
But basically what I'd like to do is make it so that the camera is

168
00:08:54,600 --> 00:08:58,300
doing really, you know, more more.

169
00:08:58,300 --> 00:08:59,600
What we expect it to do.

170
00:09:00,400 --> 00:09:02,000
In the final game, right?

171
00:09:02,000 --> 00:09:05,600
So, you know, actually I have the camera code properly follow the

172
00:09:05,600 --> 00:09:09,200
person around properly, understand what room it's looking at and

173
00:09:09,200 --> 00:09:13,300
properly, understand when would need to transition between two rooms

174
00:09:14,000 --> 00:09:17,500
in order to better support the players view of things, right?

175
00:09:17,600 --> 00:09:20,900
And we don't really have that right now, largely, because when we

176
00:09:20,900 --> 00:09:24,700
moved to the 3D system, we haven't really finished upgrading our

177
00:09:24,700 --> 00:09:28,700
notion of rooms in order to really like allow the camera to think

178
00:09:28,700 --> 00:09:29,600
about them properly.

179
00:09:31,900 --> 00:09:32,400
Okay.

180
00:09:34,400 --> 00:09:37,800
So let's see what we can do with that and you know, with an eye

181
00:09:37,800 --> 00:09:40,100
towards actually having the camera, be proper.

182
00:09:40,100 --> 00:09:47,000
Now I'm going to go ahead and eliminate some of the rooms that we

183
00:09:47,000 --> 00:09:47,300
have.

184
00:09:47,300 --> 00:09:50,200
Just a weekend, keep things a little more straightforward for

185
00:09:50,200 --> 00:09:50,800
debugging.

186
00:09:51,000 --> 00:09:55,300
I want to get us down to a simpler case rather than two rooms.

187
00:09:55,300 --> 00:09:56,900
You know, let's just try.

188
00:09:57,700 --> 00:09:58,000
I'm sorry.

189
00:09:58,000 --> 00:10:02,400
Rather than 10 rooms, let's try two or three rooms here, which again

190
00:10:02,400 --> 00:10:03,700
will also speed things up because

191
00:10:03,800 --> 00:10:05,700
That one function that costs all our time.

192
00:10:05,700 --> 00:10:07,200
So we'll least be a little bit faster too.

193
00:10:09,000 --> 00:10:12,100
So what we're going to look at cure is just this one case, you can

194
00:10:12,100 --> 00:10:14,800
kind of see what we're looking at here.

195
00:10:15,300 --> 00:10:18,000
In terms of, you know what else?

196
00:10:18,000 --> 00:10:20,400
I probably do turn off fog when we're in debug mode.

197
00:10:20,500 --> 00:10:23,700
So Fox should probably only be on here and when we're out here we

198
00:10:23,700 --> 00:10:25,200
should probably turn off that fog.

199
00:10:25,300 --> 00:10:26,700
Its pleasant though, isn't it?

200
00:10:27,000 --> 00:10:27,800
I like it.

201
00:10:28,300 --> 00:10:31,900
It's just not really conducive to debugging.

202
00:10:33,900 --> 00:10:36,400
That's relatively straightforward to do, thankfully, because the way

203
00:10:36,400 --> 00:10:40,900
that we've structured, the fog is that when you actually do a setup

204
00:10:40,900 --> 00:10:42,500
push, right?

205
00:10:42,500 --> 00:10:48,800
When you come in here to the camera setting code, which is here, we

206
00:10:48,800 --> 00:10:51,200
actually know which one we're doing, right?

207
00:10:51,200 --> 00:10:54,500
We know whether this is a debug camera or not because you can see that

208
00:10:54,500 --> 00:10:55,600
we set the flags here.

209
00:10:55,900 --> 00:10:57,800
So we could do is say that.

210
00:10:57,800 --> 00:11:01,600
In this case, the fog start distance, and distance and Direction

211
00:11:01,600 --> 00:11:02,000
there.

212
00:11:02,500 --> 00:11:03,300
We could go ahead and

213
00:11:03,800 --> 00:11:08,600
Let's let's only do that in the case where we're actually not debug

214
00:11:09,100 --> 00:11:09,500
you know?

215
00:11:10,700 --> 00:11:14,700
And so in the case where we're not debug, I'd have to see here.

216
00:11:14,900 --> 00:11:18,800
It always uses the last set up so we probably want to do here again is

217
00:11:18,800 --> 00:11:22,700
make sure that the fog direction is is getting cleared.

218
00:11:23,000 --> 00:11:27,700
So I think we'll probably want to do is say in fact really I guess we

219
00:11:27,700 --> 00:11:30,700
don't really need to worry about setting the start and end distance

220
00:11:30,700 --> 00:11:31,000
really.

221
00:11:31,000 --> 00:11:33,200
All we need to do is worry about that fog distance.

222
00:11:33,500 --> 00:11:36,600
Because remember, this fog distance is what is the vector that will be

223
00:11:36,600 --> 00:11:42,500
used as a DOT product to determine how far away something is from the

224
00:11:42,500 --> 00:11:43,100
camera.

225
00:11:43,500 --> 00:11:47,600
And again, we've set it to the cameras location because we set camera

226
00:11:47,600 --> 00:11:48,100
P, right?

227
00:11:48,100 --> 00:11:49,500
We set camera P right here.

228
00:11:49,600 --> 00:11:55,400
And we're going to measure along this Vector that camera P, right?

229
00:11:55,500 --> 00:11:58,600
But the crucial thing to understand there is that when we do that

230
00:11:58,600 --> 00:11:59,500
measurement,

231
00:12:03,000 --> 00:12:08,800
At that point, we can just say well okay if it's a debug camera is

232
00:12:08,800 --> 00:12:12,800
just measure along something that never will produce any value at all.

233
00:12:12,800 --> 00:12:13,300
Right.

234
00:12:13,600 --> 00:12:16,800
If we give it the zero vector and say measure how far away something

235
00:12:16,800 --> 00:12:19,300
is along this, it'll say well it's zero along it because the dot

236
00:12:19,300 --> 00:12:23,100
product with it is always again, A B cosine Theta.

237
00:12:23,100 --> 00:12:27,200
Remember I say that every time that a b cosine, Theta, in this case,

238
00:12:27,200 --> 00:12:31,000
if the a or the B where zero length, then the whole term is zero

239
00:12:31,000 --> 00:12:31,600
length.

240
00:12:31,600 --> 00:12:32,600
In this case, we're just giving

241
00:12:33,000 --> 00:12:36,200
A Direction with zero length, with means that when you specify debug

242
00:12:36,200 --> 00:12:39,600
camera, you will get no fog at all and you can see that.

243
00:12:39,600 --> 00:12:42,000
Now, when I switch between them, right, there's the fogging you can

244
00:12:42,000 --> 00:12:46,100
see that it gets darker as it goes back and closer to the gray value

245
00:12:46,300 --> 00:12:47,500
when I switch the debug camera.

246
00:12:47,500 --> 00:12:50,200
Now, they're all the same color, which is exactly what I want.

247
00:12:50,300 --> 00:12:55,300
And so now if I want to look at things like so I can look at them

248
00:12:55,300 --> 00:12:58,300
without them fading away, which is what I wanted.

249
00:12:58,700 --> 00:13:01,300
And so there's my three rooms stacked, on top of each other.

250
00:13:01,600 --> 00:13:02,600
Then I'm going to use here.

251
00:13:03,000 --> 00:13:07,200
And what I'd like to do first again is kind of return us to a sort of

252
00:13:07,200 --> 00:13:10,800
a more rigorous way of defining, what a room actually is.

253
00:13:11,000 --> 00:13:13,800
And I'm going to have to think about that a little bit because in

254
00:13:13,800 --> 00:13:17,500
order to really figure out what's going on with that, I'm going to

255
00:13:17,500 --> 00:13:20,600
have to start thinking a little harder.

256
00:13:23,800 --> 00:13:26,700
About how we're defining some of the things that were defining.

257
00:13:29,200 --> 00:13:32,200
For example, I think our Collision volume stuff is kind of a little

258
00:13:32,200 --> 00:13:32,600
crappy.

259
00:13:32,600 --> 00:13:36,800
It's not very good right now and the way that we're sort of doing that

260
00:13:36,800 --> 00:13:41,400
is probably not the best way for, you know, defining something like a

261
00:13:41,400 --> 00:13:41,700
room.

262
00:13:41,700 --> 00:13:44,700
We kind of just want to say here is what the bounds of the room are

263
00:13:44,700 --> 00:13:48,300
and I don't know that we really want to go into all that much more

264
00:13:48,300 --> 00:13:51,100
detail than that to be completely honest.

265
00:13:51,100 --> 00:13:52,300
So I feel like there's

266
00:13:54,500 --> 00:13:58,400
Is a certain degree of bogus - to how we're doing that.

267
00:13:58,400 --> 00:14:01,000
And we'll have to, I have to double-check and make sure I don't want

268
00:14:01,000 --> 00:14:02,900
to change a little bit of that as well.

269
00:14:02,900 --> 00:14:07,100
But what I'd like to do now is basically have something that, you

270
00:14:07,100 --> 00:14:10,900
know, creates sort of boundary right.

271
00:14:11,200 --> 00:14:17,100
You know, a bounding box here where I'm going to draw, you know, a

272
00:14:17,100 --> 00:14:23,900
volume that shows where each of these rooms considers itself to be an

273
00:14:24,100 --> 00:14:27,700
One of the problems with doing this and I don't really know what our

274
00:14:27,700 --> 00:14:31,600
definition of it should be, but one of the problems with doing this is

275
00:14:31,600 --> 00:14:35,800
I don't really know how to define the extents of these rooms all that.

276
00:14:35,800 --> 00:14:39,200
Well, but what, I think should probably be the case.

277
00:14:39,200 --> 00:14:41,700
And again, I'm just sort of speculating here from looking at.

278
00:14:41,700 --> 00:14:45,100
This is what I think, should probably be the case, is that a room

279
00:14:45,100 --> 00:14:50,400
should be defined as being the lowest point, that any of it, of these

280
00:14:50,400 --> 00:14:53,800
sort of, you know, standard standing pieces.

281
00:14:54,100 --> 00:14:59,800
Probably the lowest point of one of those up to where the Next Room.

282
00:15:00,000 --> 00:15:00,900
Started.

283
00:15:01,900 --> 00:15:05,600
so, like the lowest point on one of its to the lowest point on its

284
00:15:05,600 --> 00:15:06,300
upper neighbor,

285
00:15:07,700 --> 00:15:12,400
You know that's the size of a room, right stated alternately.

286
00:15:12,500 --> 00:15:17,300
If each room was going to be the roughly the same size stacking wise,

287
00:15:17,300 --> 00:15:21,100
which again we don't actually require them to be for any particular

288
00:15:21,100 --> 00:15:26,000
reason and so we don't have to do that necessarily we can have some

289
00:15:26,000 --> 00:15:31,200
rooms that are taller than other rooms in order to make that a little

290
00:15:31,200 --> 00:15:31,700
cleaner.

291
00:15:31,700 --> 00:15:35,600
I just have to figure out some way of saying, okay, let's just make

292
00:15:35,600 --> 00:15:37,400
sure that when we Define what a

293
00:15:37,600 --> 00:15:42,000
Is when we place the standing blocks on it, let's just never put any

294
00:15:42,000 --> 00:15:46,900
of those down low enough that they, you know, cross through the bottom

295
00:15:46,900 --> 00:15:49,800
of the rooms lower plane, right?

296
00:15:54,500 --> 00:15:57,100
That's just one intuitive idea about how those should be specified.

297
00:15:57,100 --> 00:15:59,100
I don't have any real reason for picking that.

298
00:15:59,100 --> 00:16:02,100
Just a purely can, you know, it's pure conjecture on my part.

299
00:16:02,100 --> 00:16:05,300
I don't have a lot of and I mean the back that up.

300
00:16:06,000 --> 00:16:08,800
So I don't know if that'll actually be what we do, but something like

301
00:16:08,800 --> 00:16:12,000
this needs to happen and so what I'd like to do now is get to a place

302
00:16:12,000 --> 00:16:16,300
where we can see that happening maybe add the ability to draw that.

303
00:16:16,300 --> 00:16:17,500
I don't know what that's doing there.

304
00:16:17,600 --> 00:16:18,300
All right.

305
00:16:18,900 --> 00:16:23,700
Maybe add the ability to draw that in so that I can see it.

306
00:16:23,900 --> 00:16:28,000
As I would like to be able to verify that as something that's going

307
00:16:28,000 --> 00:16:28,400
on.

308
00:16:28,900 --> 00:16:31,800
So I would like to be able to see those boundaries.

309
00:16:32,000 --> 00:16:36,100
And at the moment, the only thing that we have right now in terms of

310
00:16:36,100 --> 00:16:42,300
what we can draw our these sort of flat rectangular outlines.

311
00:16:42,500 --> 00:16:46,100
And so I think what might be more interesting to do at this point is

312
00:16:46,100 --> 00:16:50,400
say let's add something that can draw a volume.

313
00:16:51,500 --> 00:16:56,900
I want to say that my blow actually requested this last weekend and I

314
00:16:57,100 --> 00:16:59,500
believe at that time, I said that would be a very good idea.

315
00:17:00,400 --> 00:17:02,700
Not only do, I think it's a very good idea, but I think we should go

316
00:17:02,700 --> 00:17:06,300
ahead and do it right now because I'm going to need exactly that.

317
00:17:06,800 --> 00:17:10,000
So let's take a look at how that would work so you can see on here.

318
00:17:10,000 --> 00:17:14,099
We've got a notion of a push wrecked and we've got a notion of a push

319
00:17:14,099 --> 00:17:14,900
wrecked outline.

320
00:17:15,400 --> 00:17:18,000
And the interesting thing about the push wrecked in the push wrecked,

321
00:17:18,000 --> 00:17:20,500
outline is at the moment.

322
00:17:20,500 --> 00:17:21,000
They all

323
00:17:21,200 --> 00:17:24,700
Assume that they're going to draw a rectangle which is flat to the

324
00:17:24,700 --> 00:17:26,200
world z, right?

325
00:17:28,000 --> 00:17:28,900
In other words,

326
00:17:31,200 --> 00:17:32,300
if you were to take,

327
00:17:39,400 --> 00:17:43,700
If you were to take the flat sheets of the of the game, like a flat

328
00:17:43,700 --> 00:17:48,500
sheet, you know, wherever you want to imagine it and you imagine us

329
00:17:48,500 --> 00:17:52,000
sitting here at the top looking down on this here with our little

330
00:17:52,000 --> 00:17:53,500
camera, you know.

331
00:17:53,500 --> 00:17:55,800
I'm going to draw an eyeball because I'm we're used to drawing that.

332
00:18:01,100 --> 00:18:04,200
So, if we're looking down on this with our eyeball, previously, all we

333
00:18:04,200 --> 00:18:06,200
could really do is say, let's draw.

334
00:18:06,200 --> 00:18:09,300
You know, a thing that looks like this and the way that we were

335
00:18:09,300 --> 00:18:11,900
drawing that is either we'd solid, fill it.

336
00:18:12,000 --> 00:18:15,400
That was pushed wrecked or push tricked-out line with just draw

337
00:18:15,400 --> 00:18:20,600
several solid, filled ones that just expanded along sort of the, the X

338
00:18:20,600 --> 00:18:27,600
and y-axis to produce for filled rectangles, which made it look like

339
00:18:27,900 --> 00:18:28,700
an outline.

340
00:18:29,100 --> 00:18:29,800
So, the

341
00:18:30,000 --> 00:18:34,200
Question I have here is, can we just go ahead and say let's get

342
00:18:34,200 --> 00:18:38,900
something that's like push volume outline that basically does exactly

343
00:18:38,900 --> 00:18:39,700
the same thing.

344
00:18:39,900 --> 00:18:42,200
So if I want to hear, I'm going to try it.

345
00:18:42,300 --> 00:18:45,900
I like that that expanded too inefficient in line.

346
00:18:47,700 --> 00:18:50,200
There are definitely a lot of things we do that are inefficient here.

347
00:18:50,800 --> 00:18:53,000
Maybe someday we'll fix those, I don't know.

348
00:18:53,900 --> 00:18:58,300
So if we have a push volume outline and I take, you know, basically

349
00:18:58,300 --> 00:18:59,400
the same parameters here.

350
00:18:59,800 --> 00:19:03,800
So I've kind of got an object transform and then instead here I guess

351
00:19:03,800 --> 00:19:06,700
I would take a rectangle three assuming we have one of those and

352
00:19:06,700 --> 00:19:07,900
remember forever to find one of those.

353
00:19:08,200 --> 00:19:13,100
So there'd be nosy, they're just be a color and a thickness and that

354
00:19:13,100 --> 00:19:14,100
would be it, right?

355
00:19:14,100 --> 00:19:17,000
And and so this would be what we would be looking at.

356
00:19:22,200 --> 00:19:25,400
Okay, so if that was what we were going to do and also these other

357
00:19:25,400 --> 00:19:28,200
transforms are probably things we could possibly get rid of by now as

358
00:19:28,200 --> 00:19:28,500
well.

359
00:19:28,900 --> 00:19:31,500
I should just mention that because we're sort of since we're fully 3D

360
00:19:31,500 --> 00:19:31,900
now.

361
00:19:31,900 --> 00:19:34,900
The app transform is really all that necessary to take a look at

362
00:19:34,900 --> 00:19:35,900
what's actually in there.

363
00:19:36,500 --> 00:19:38,100
It's got almost nothing in it.

364
00:19:38,800 --> 00:19:42,300
It's really kind of a relevant and so this maybe

365
00:19:44,800 --> 00:19:47,100
This may have become irrelevant.

366
00:19:47,900 --> 00:19:50,600
So at some point, we're going to probably want to do one final pass

367
00:19:50,600 --> 00:19:51,300
over this stuff.

368
00:19:51,300 --> 00:19:52,700
We're we're just like, okay we're done with everything.

369
00:19:52,700 --> 00:19:56,800
Now let's just do a cleanup pass on anything that we think is kind of

370
00:19:56,800 --> 00:20:01,100
dumb because at some point we probably, you know, after you do all

371
00:20:01,100 --> 00:20:03,000
your experimentation and work and you're like, this is what we're

372
00:20:03,000 --> 00:20:03,600
going with.

373
00:20:04,200 --> 00:20:07,000
You typically need a little bit of time to sort of straighten out the

374
00:20:07,000 --> 00:20:08,600
Legacy vestigial remains.

375
00:20:09,500 --> 00:20:12,800
So if we push a volume outline here than what we can look at and say,

376
00:20:12,800 --> 00:20:14,000
well, okay, we've got

377
00:20:16,000 --> 00:20:18,800
This ability to push these rectangles on here but these rectangles are

378
00:20:18,800 --> 00:20:22,500
not really exactly what I want because we look at how they work again.

379
00:20:22,500 --> 00:20:26,400
They they're very heavily, biased towards having the Z values, be a

380
00:20:26,400 --> 00:20:28,900
specific thing and that's not really what I want.

381
00:20:28,900 --> 00:20:32,400
So what I'd rather do here is I'd rather start looking more for

382
00:20:32,400 --> 00:20:36,100
example, like at push Cube and say, let's let's start with the push

383
00:20:36,100 --> 00:20:38,500
Cube code because push cube is really more.

384
00:20:38,500 --> 00:20:39,900
What I'm, what I'm looking for.

385
00:20:39,900 --> 00:20:40,400
Right.

386
00:20:41,400 --> 00:20:44,200
And, you know, in fact, Let me let me kind of

387
00:20:44,300 --> 00:20:48,400
Move this up here to where the push Cube stuff is and we'll take a

388
00:20:48,400 --> 00:20:49,900
little bit more of a closer look there.

389
00:20:50,200 --> 00:20:53,500
So I'm going to go through here and say, all right, let's go ahead and

390
00:20:53,500 --> 00:20:55,900
grab this squaws group here.

391
00:20:56,700 --> 00:20:59,300
And I'm going to go ahead and put that into push volume outline.

392
00:21:00,000 --> 00:21:02,300
You can see that we've got a bunch of stuff here like texture

393
00:21:02,300 --> 00:21:05,800
coordinates and stuff which won't really, really be necessary because

394
00:21:05,800 --> 00:21:07,600
we won't really be using a texture here.

395
00:21:08,200 --> 00:21:12,600
But that is kind of neither here nor there what we will be doing.

396
00:21:12,600 --> 00:21:17,200
In this case when we is will be following push Rex example in one case

397
00:21:17,600 --> 00:21:21,200
which is that we will not actually be setting any particular bitmap

398
00:21:21,200 --> 00:21:25,700
color, sorry any particular bitmap value will be using the white

399
00:21:25,700 --> 00:21:29,800
bitmap so that we don't get any contribution at all from it.

400
00:21:30,000 --> 00:21:30,100
It.

401
00:21:30,400 --> 00:21:32,500
So we're going to we're just going to go ahead and do it that way.

402
00:21:33,100 --> 00:21:36,900
So what we'd like to do here is we'd like again to pass a rectangle

403
00:21:36,900 --> 00:21:37,500
three down.

404
00:21:37,500 --> 00:21:39,000
I don't know if we have one of those.

405
00:21:39,000 --> 00:21:40,800
Let's I hope we do.

406
00:21:41,500 --> 00:21:42,500
I thought think we do.

407
00:21:43,100 --> 00:21:43,700
Yeah we do.

408
00:21:44,600 --> 00:21:48,400
So what we want to do is take this rectangle 3 and we want to be able

409
00:21:48,400 --> 00:21:53,700
to draw something that looks to the viewer.

410
00:21:53,800 --> 00:21:55,500
Again only for debug purposes.

411
00:21:55,500 --> 00:21:59,800
So it doesn't have to be perfect but that looks to the viewer like a

412
00:22:00,400 --> 00:22:04,300
Outline of a volume so you can kind of see where the volume is, right?

413
00:22:06,800 --> 00:22:11,700
And so if you look at what we're going to have to do this, this set of

414
00:22:11,700 --> 00:22:13,900
push quads is not particularly useful to us.

415
00:22:13,900 --> 00:22:15,200
And the reason for that is this set.

416
00:22:15,200 --> 00:22:18,200
Of course quads is drawing faces, right?

417
00:22:18,600 --> 00:22:21,900
And so there's six of them because it's drawing six faces of a cube

418
00:22:22,400 --> 00:22:24,500
but we would rather do right?

419
00:22:25,100 --> 00:22:30,000
Is we want to draw the edges of the cube, right?

420
00:22:30,000 --> 00:22:34,800
So instead of drawing 6, there are 6 faces to a cube 8 vertices but if

421
00:22:34,800 --> 00:22:35,900
you look at how many

422
00:22:36,400 --> 00:22:37,400
Just there are right.

423
00:22:37,400 --> 00:22:39,700
There's one, two, three, four on this face.

424
00:22:39,900 --> 00:22:44,700
One two, three, four on the back face and then for attached, you know,

425
00:22:44,700 --> 00:22:46,800
connecting each one together.

426
00:22:47,100 --> 00:22:52,500
So there's actually three times 4 or 12 edges, right?

427
00:22:53,200 --> 00:22:54,900
You know, we've got eight vertices.

428
00:22:57,300 --> 00:23:00,900
Six faces 12 edges, right?

429
00:23:01,300 --> 00:23:04,200
So we want to do is we want to draw these 12 edges.

430
00:23:04,900 --> 00:23:08,200
And we want to enumerate what all those 12 edges are.

431
00:23:09,000 --> 00:23:12,900
And so what we could do here again is is sort of figure out a way to

432
00:23:12,900 --> 00:23:15,600
push some kind of a line segment that you can see.

433
00:23:16,700 --> 00:23:20,600
And so instead of a push quad, what I want here is push line segment

434
00:23:20,600 --> 00:23:24,700
or something like that, where I passed the group and the bitmap and

435
00:23:24,700 --> 00:23:26,900
then I pass two endpoints.

436
00:23:27,400 --> 00:23:32,300
And probably two pieces of text or data or something like this, or

437
00:23:32,300 --> 00:23:35,100
maybe the texture is inferred because it goes along the line at it and

438
00:23:35,100 --> 00:23:36,600
then fact that's probably what happened.

439
00:23:38,000 --> 00:23:38,500
Right.

440
00:23:39,100 --> 00:23:43,700
And so, what I want to do here is have the ability to specify for each

441
00:23:43,700 --> 00:23:45,200
of our points on the cube.

442
00:23:45,600 --> 00:23:46,100
What's going on.

443
00:23:46,100 --> 00:23:49,000
So, if you take a look, we've got Negative X positive x, negative, y

444
00:23:49,000 --> 00:23:50,600
positive, negative positive Z.

445
00:23:50,800 --> 00:23:52,200
And then we built these up.

446
00:23:52,200 --> 00:23:59,600
P0 P1 P2 P3 P4 P5 P6 p7 as the combinations of those things, right?

447
00:24:00,000 --> 00:24:03,500
And so what happens is in this case, we're getting them from a

448
00:24:03,500 --> 00:24:07,000
different place, but other than that, everything can stay the same.

449
00:24:07,200 --> 00:24:11,000
So if you look at this, we can just say like okay, all of these values

450
00:24:11,000 --> 00:24:13,500
we can still extract out of our rectangle 3.

451
00:24:13,800 --> 00:24:16,900
So here's our rectangle, for example, this is just going to be Minn

452
00:24:16,900 --> 00:24:17,600
dot X.

453
00:24:20,100 --> 00:24:21,300
This is going to be Max X, right?

454
00:24:21,300 --> 00:24:25,400
Because the positive X and then these are all going to be basically

455
00:24:25,400 --> 00:24:25,900
equivalent.

456
00:24:25,900 --> 00:24:27,300
This is the why version?

457
00:24:27,300 --> 00:24:31,200
This is the Z version min-max, right?

458
00:24:31,400 --> 00:24:35,900
So then these P numberings can are all totally reasonable and can be

459
00:24:35,900 --> 00:24:36,800
the same thing.

460
00:24:37,500 --> 00:24:41,000
And in this case, we don't really have in terms of top color and

461
00:24:41,000 --> 00:24:44,800
bottom color, we really only have one color we could make the color

462
00:24:44,800 --> 00:24:47,500
vary across the line, but at the moment we don't really need to.

463
00:24:47,900 --> 00:24:49,600
So all I really need to do

464
00:24:50,300 --> 00:24:52,200
Is specify one, oops.

465
00:24:54,700 --> 00:24:58,700
But that did there we really only need one of those and I don't need

466
00:24:58,700 --> 00:25:00,500
to vary that at all.

467
00:25:00,600 --> 00:25:03,100
So, all of this stuff can kind of be ignored.

468
00:25:03,800 --> 00:25:07,300
The same is true for the texture coordinates at the moment.

469
00:25:07,300 --> 00:25:10,700
Although I guess what I could do here is well,

470
00:25:13,800 --> 00:25:15,400
Well, you know, I'm going to, I'm ignore it.

471
00:25:16,000 --> 00:25:19,600
So, anyway, so when we want to draw the line, it's now what I want to

472
00:25:19,600 --> 00:25:22,600
do is I want to draw a line segments between each of these that's

473
00:25:22,600 --> 00:25:23,300
relevant.

474
00:25:23,800 --> 00:25:28,600
And so we kind of need here is just a reason why or how to know like

475
00:25:28,600 --> 00:25:29,700
which to do, right?

476
00:25:29,700 --> 00:25:31,900
How to know what we want to draw.

477
00:25:32,300 --> 00:25:33,900
We've got P0 P1 P2 P3.

478
00:25:33,900 --> 00:25:35,500
How do we know which ones to draw between?

479
00:25:36,000 --> 00:25:39,800
Well, what you can see here is essentially there, I know this is going

480
00:25:39,800 --> 00:25:42,300
to sound a little weird, but just bear with me.

481
00:25:43,100 --> 00:25:45,800
Take a look at how the edges of a cube are formed.

482
00:25:45,900 --> 00:25:51,800
What you can say about it is an edge, a cube has an edge between any

483
00:25:51,800 --> 00:25:58,500
two vertices who differ solely by the positive or negative version of

484
00:25:58,900 --> 00:26:00,600
one of the variables, right?

485
00:26:01,400 --> 00:26:05,700
Like we were talking about before this being Center and dimension or

486
00:26:05,700 --> 00:26:07,400
maybe we're talking about Min and Max.

487
00:26:07,700 --> 00:26:10,600
And so we basically have, you know, to Define where all these are.

488
00:26:10,600 --> 00:26:12,900
We're always like, oh, okay, the vertices.

489
00:26:13,000 --> 00:26:16,300
These of a cube right that.

490
00:26:16,300 --> 00:26:17,200
Wow, that was good.

491
00:26:17,300 --> 00:26:21,800
The vertices of a cube are defined by the enumeration of all possible

492
00:26:21,800 --> 00:26:26,500
combinations of the Min, and the max for each coordinate, right?

493
00:26:26,500 --> 00:26:33,700
So if I have X Y & Z, I end up with Min, you know, Min Min, you know,

494
00:26:33,700 --> 00:26:41,200
Min Min, Max min, max Min blah, blah blah, right.

495
00:26:41,200 --> 00:26:42,800
And there's eight of these because

496
00:26:43,100 --> 00:26:46,900
Specifically two possibilities for each of these Min and Max, and I'm

497
00:26:46,900 --> 00:26:47,800
doing all of them.

498
00:26:47,900 --> 00:26:51,800
So, it's 2 times 2 times, 2, or 2 to the third, which is 8, right?

499
00:26:51,800 --> 00:26:55,200
So vertices is basically the like, 2 to the Third

500
00:26:56,600 --> 00:26:59,400
It's all the possible combinations of Min and Max.

501
00:27:00,300 --> 00:27:04,600
Right, that's what vertices are and that's why there's eight of them

502
00:27:06,000 --> 00:27:06,400
edges.

503
00:27:06,400 --> 00:27:09,200
On the other hand, which is what I care about now is slightly

504
00:27:09,200 --> 00:27:10,000
different.

505
00:27:10,100 --> 00:27:18,600
There is an edge between any pair of vertices where only one of these

506
00:27:19,200 --> 00:27:19,900
differs.

507
00:27:20,700 --> 00:27:21,300
Right.

508
00:27:21,500 --> 00:27:25,400
So, if I'm from this particular Edge and I've got, you know, let's say

509
00:27:25,400 --> 00:27:29,300
this is Min Min Min if I want to go to another

510
00:27:30,100 --> 00:27:34,900
Tell you, I have to go to Max Min Min, Min, Max Min or Min, Min Max.

511
00:27:34,900 --> 00:27:36,500
Those are the three I could go to.

512
00:27:37,800 --> 00:27:38,200
Right.

513
00:27:40,000 --> 00:27:42,800
And so if you think about what that means is that means for each

514
00:27:42,800 --> 00:27:48,100
eight, you know, for each of the 8 vertices, there are three different

515
00:27:48,500 --> 00:27:52,800
ones I can go to which would appear to be equal to 24 which is not

516
00:27:52,800 --> 00:27:53,500
what I said, right.

517
00:27:53,500 --> 00:27:57,500
I said there's 12 Y and that is because the edge that goes in One

518
00:27:57,500 --> 00:28:00,700
Direction doesn't need to be drawn in the reverse Direction.

519
00:28:00,800 --> 00:28:05,400
So this Edge which went this way doesn't need to be drawn in that way,

520
00:28:05,400 --> 00:28:05,700
right?

521
00:28:05,700 --> 00:28:07,000
Because I've already drawn it.

522
00:28:07,000 --> 00:28:09,000
So I only have to consider half of

523
00:28:09,200 --> 00:28:10,200
Goes right?

524
00:28:10,200 --> 00:28:11,700
And that's where my 12 comes from.

525
00:28:14,000 --> 00:28:17,700
So, if I want to draw these, all I have to do is start with each of

526
00:28:17,700 --> 00:28:22,500
these and do exactly that process that I just said, which is go to the

527
00:28:22,500 --> 00:28:24,900
ones that are one different from it.

528
00:28:24,900 --> 00:28:30,400
So, let's just start at P0 for example, and I know that p 0 is n and

529
00:28:30,400 --> 00:28:30,900
p.

530
00:28:31,400 --> 00:28:34,000
So, p and p would be one of them.

531
00:28:38,500 --> 00:28:43,500
Right, PPP would not be one of them because that's which has two of

532
00:28:43,500 --> 00:28:43,900
them.

533
00:28:44,300 --> 00:28:49,000
NPP would be one of them and now I know there's three that should come

534
00:28:49,000 --> 00:28:49,700
out of P0.

535
00:28:49,700 --> 00:28:51,600
So what's the other one, right?

536
00:28:54,300 --> 00:28:58,900
N and n would be the other one and then the rest of these won't be

537
00:28:58,900 --> 00:29:03,000
right, like that one switches to that once which has three and that

538
00:29:03,000 --> 00:29:04,300
one switches to.

539
00:29:05,100 --> 00:29:10,600
So, there's three of my edges, the ones that come off the pp0 right

540
00:29:11,900 --> 00:29:13,400
now to maximize things here.

541
00:29:13,400 --> 00:29:17,500
I know that if I pick the P0 this time, right, what I should probably

542
00:29:17,500 --> 00:29:20,600
do is make sure I pick one that hasn't been talked about at all.

543
00:29:20,600 --> 00:29:22,500
So P2 has not been talked about here.

544
00:29:22,500 --> 00:29:23,700
So let's go to P2.

545
00:29:24,600 --> 00:29:26,100
So here's Pichu, that's positive.

546
00:29:26,100 --> 00:29:27,100
Positive positive.

547
00:29:27,300 --> 00:29:28,800
So negative positive positive.

548
00:29:28,800 --> 00:29:29,400
That works.

549
00:29:31,500 --> 00:29:31,800
Oops.

550
00:29:37,600 --> 00:29:40,000
- - does not work positive, doesn't work.

551
00:29:40,000 --> 00:29:40,500
Positive.

552
00:29:40,500 --> 00:29:41,500
Positive negative does.

553
00:29:41,500 --> 00:29:42,400
That's P 6.

554
00:29:46,300 --> 00:29:48,400
And similarly, positive negative positive work.

555
00:29:48,400 --> 00:29:49,700
So that's only one switch.

556
00:29:50,400 --> 00:29:52,700
So 13 and 6, all valid there.

557
00:29:54,100 --> 00:29:56,700
Right, and again, I never talked about P2 here so there's no risk of

558
00:29:56,700 --> 00:29:57,500
duplication.

559
00:30:04,600 --> 00:30:09,400
All right, so one more time you notice we have p 0, 1, 2 3 4.

560
00:30:09,600 --> 00:30:11,400
We've never talked about five.

561
00:30:11,500 --> 00:30:13,200
So let's go ahead and talk about five.

562
00:30:14,800 --> 00:30:17,600
Here's P5 positive negative negative, right?

563
00:30:17,600 --> 00:30:18,800
Never one that we've drawn to.

564
00:30:19,400 --> 00:30:22,000
So here, we've got positive positive negative, that counts.

565
00:30:22,000 --> 00:30:23,100
So, that's P 6.

566
00:30:26,900 --> 00:30:28,500
- positive - that counts.

567
00:30:28,500 --> 00:30:29,400
That's p7.

568
00:30:32,000 --> 00:30:34,000
and now, we've got

569
00:30:36,000 --> 00:30:40,200
Let's see here, positive negative negative.

570
00:30:42,800 --> 00:30:43,500
There we go.

571
00:30:43,600 --> 00:30:44,800
Positive negative positive.

572
00:30:44,800 --> 00:30:45,500
That's P1.

573
00:30:49,500 --> 00:30:49,900
Right.

574
00:30:49,900 --> 00:30:52,800
So now I've got all these guys drawn, P0 to P1.

575
00:30:52,800 --> 00:30:53,900
P0 p 3 p.

576
00:30:53,900 --> 00:30:55,100
0 to p 4 2.

577
00:30:55,100 --> 00:30:55,200
2.

578
00:30:55,200 --> 00:30:55,500
P 1.

579
00:30:55,500 --> 00:30:55,800
P 2.

580
00:30:55,800 --> 00:30:56,200
P 3.

581
00:30:56,200 --> 00:30:57,900
P 2 p 6, P, 52.

582
00:30:57,900 --> 00:31:02,000
B 65-57 P5 to be one, right?

583
00:31:03,800 --> 00:31:07,000
So we've got all those guys drawn and again, don't have to worry about

584
00:31:07,000 --> 00:31:11,900
any duplication there because they're, you know, we basically picked

585
00:31:12,400 --> 00:31:16,000
people who didn't have any overlap in common essentially.

586
00:31:16,000 --> 00:31:19,300
If you imagine, let's see if we can draw this out here.

587
00:31:19,300 --> 00:31:22,700
In fact, why don't I go ahead and do it so you can see what we end up

588
00:31:22,700 --> 00:31:23,200
drawing.

589
00:31:31,200 --> 00:31:31,800
All right.

590
00:31:32,200 --> 00:31:34,400
So if you take a look at how this worked, right?

591
00:31:36,500 --> 00:31:40,600
We can look at what these were set up, to be P0 P1 P2 P3, right?

592
00:31:41,300 --> 00:31:43,300
So, I'm going to draw the little axis here.

593
00:31:43,500 --> 00:31:45,100
I'm going to assume that we've got this.

594
00:31:47,800 --> 00:31:50,500
So here Z, here's X, here's y.

595
00:31:52,600 --> 00:31:54,000
So, like this in the corner?

596
00:31:54,000 --> 00:31:56,800
For example, actually, I guess would be this in this corner.

597
00:31:57,100 --> 00:32:04,500
This guy is, you know, - - - right, that's like - in all directions.

598
00:32:05,400 --> 00:32:08,200
And then if we picked this guy here, this would be positive.

599
00:32:08,200 --> 00:32:09,200
Positive positive.

600
00:32:11,300 --> 00:32:11,800
Right.

601
00:32:13,400 --> 00:32:16,500
So anyway, if we take a look at where these guys are p, 0 is negative

602
00:32:16,500 --> 00:32:18,900
negative positive Z, surround the positive Z.

603
00:32:18,900 --> 00:32:21,800
In fact, if you look at this, this is all the positive Z faces it

604
00:32:21,800 --> 00:32:24,900
starts at - - so it starts at down here, right?

605
00:32:24,900 --> 00:32:29,900
This is p 0 and then we go to positive negative positive, right?

606
00:32:29,900 --> 00:32:35,700
So that's that's going to write here for P1 again, because it's that -

607
00:32:35,700 --> 00:32:37,100
is it's not going up in y.

608
00:32:37,400 --> 00:32:41,100
So, this is p 3, this is p 4 and

609
00:32:41,200 --> 00:32:44,400
Then, oops, P2.

610
00:32:45,400 --> 00:32:46,400
P3.

611
00:32:48,200 --> 00:32:49,500
Got to make that a little clearer there.

612
00:32:50,800 --> 00:32:51,500
You too.

613
00:32:52,600 --> 00:32:53,300
P3.

614
00:32:53,300 --> 00:32:55,700
There we go, and it certainly got the negatives here.

615
00:32:55,700 --> 00:32:58,800
We had negative negative positive, right?

616
00:32:58,800 --> 00:32:59,800
So we were doing exactly this.

617
00:33:00,000 --> 00:33:01,900
The same process.

618
00:33:02,100 --> 00:33:04,500
So this down here is P for, right?

619
00:33:04,500 --> 00:33:06,000
And it went P, 508.

620
00:33:06,900 --> 00:33:08,400
Know, we probably went the other way around, right?

621
00:33:09,000 --> 00:33:10,800
So p 4 is negative negative negative.

622
00:33:10,800 --> 00:33:11,400
This is p.

623
00:33:11,400 --> 00:33:13,500
5 is positive negative negative.

624
00:33:13,500 --> 00:33:14,400
So it goes down X.

625
00:33:14,400 --> 00:33:17,400
Now, I guess what that is, what we did Q5.

626
00:33:17,900 --> 00:33:20,200
So P, 6 P 7.

627
00:33:22,600 --> 00:33:28,100
So, presumably in that case, negative positive positive is p 6.

628
00:33:29,900 --> 00:33:31,700
Yeah, positive positive negative.

629
00:33:33,100 --> 00:33:34,700
All right, I guess that's what we did.

630
00:33:35,100 --> 00:33:38,500
So anyway, those were our points and if you look at what we're doing,

631
00:33:38,500 --> 00:33:40,800
four line segments here, it's P0 went to one.

632
00:33:40,800 --> 00:33:41,600
Three and four.

633
00:33:41,900 --> 00:33:45,900
So P0 went to one right?

634
00:33:46,000 --> 00:33:50,600
Three and four which is exactly what we'd expect.

635
00:33:50,600 --> 00:33:56,300
We then move to P2, which is this sausage gentleman right here and as

636
00:33:56,300 --> 00:33:58,000
P 1 p 3 and P 6.

637
00:33:58,600 --> 00:33:59,500
So that's P 1.

638
00:34:01,200 --> 00:34:01,900
P3.

639
00:34:03,200 --> 00:34:09,199
And P6 and then we then move to P5 which is six seven and one, right?

640
00:34:09,300 --> 00:34:12,199
So there's one there's six.

641
00:34:14,199 --> 00:34:15,199
Wait, how do we get 7?

642
00:34:15,199 --> 00:34:17,199
That's just did I mess that up?

643
00:34:26,300 --> 00:34:28,800
I've drawn something wrong here because that would go like that.

644
00:34:29,199 --> 00:34:33,500
According to this diagram 7 is negative positive negative.

645
00:34:35,400 --> 00:34:35,699
Right.

646
00:34:35,699 --> 00:34:36,300
Which is there?

647
00:34:36,300 --> 00:34:37,100
That's correct.

648
00:34:37,199 --> 00:34:41,000
P5 is positive negative negative, which is this.

649
00:34:42,800 --> 00:34:44,199
So these two should not.

650
00:34:44,199 --> 00:34:46,800
Yeah, that's a double switch, that's just wrong.

651
00:34:47,400 --> 00:34:48,900
That should have gone to 4.

652
00:34:51,400 --> 00:34:52,800
But we use a diagram folks.

653
00:34:53,600 --> 00:34:54,100
There we go.

654
00:34:55,000 --> 00:34:59,700
And that would leave us with p7, which is what should have happened

655
00:34:59,700 --> 00:35:03,000
there, but of course, I misread my own chart.

656
00:35:03,800 --> 00:35:06,000
I misread my own code here.

657
00:35:06,300 --> 00:35:08,900
Anyway, p7 in this case.

658
00:35:12,200 --> 00:35:14,100
I need to go to anyone with one change away from it.

659
00:35:14,100 --> 00:35:16,300
So here's p7 negative positive negative.

660
00:35:16,900 --> 00:35:19,400
So, positive positive negative would be one switch.

661
00:35:19,400 --> 00:35:20,400
That's P6.

662
00:35:24,600 --> 00:35:25,800
What else we got here?

663
00:35:27,700 --> 00:35:28,600
That's two.

664
00:35:29,200 --> 00:35:30,700
Here's one soapy for

665
00:35:33,400 --> 00:35:34,500
and finally,

666
00:35:35,900 --> 00:35:39,900
We would probably expect what negative positive positive.

667
00:35:40,100 --> 00:35:40,400
Yeah.

668
00:35:40,400 --> 00:35:41,000
P3.

669
00:35:43,500 --> 00:35:52,900
So 64 and three, there's three, there's four and there's six and those

670
00:35:52,900 --> 00:35:55,400
are all the sides of our Cube.

671
00:35:55,400 --> 00:35:58,700
So now that we've got all that underway, let me just sort these by

672
00:35:58,700 --> 00:35:59,900
ascending order here.

673
00:36:00,000 --> 00:36:01,500
Why not one for 63-46?

674
00:36:04,100 --> 00:36:07,800
So, those are all of our line segments, we would need to draw to form

675
00:36:07,800 --> 00:36:09,400
a complete volume.

676
00:36:09,400 --> 00:36:13,200
And so, if I want to complete this here, all I need to do is figure

677
00:36:13,200 --> 00:36:19,400
out how to actually draw a line segment, given the information that

678
00:36:19,400 --> 00:36:20,400
we're past here.

679
00:36:20,700 --> 00:36:23,600
So I'm going to need that line color, right?

680
00:36:26,500 --> 00:36:28,400
And let's see here.

681
00:36:30,300 --> 00:36:31,400
There's my push quad.

682
00:36:31,700 --> 00:36:32,700
Here's my push quad.

683
00:36:32,900 --> 00:36:37,100
So actually, I suppose this push line segment, should probably come up

684
00:36:37,100 --> 00:36:37,600
here.

685
00:36:39,200 --> 00:36:42,800
Let's see here Squad

686
00:36:49,000 --> 00:36:51,300
And it's got that packing going on there.

687
00:36:52,000 --> 00:36:53,500
I'm going to do the same thing down here.

688
00:36:53,500 --> 00:36:55,100
So here's push line segment.

689
00:36:58,400 --> 00:37:01,300
It wants exactly the same stuff right.

690
00:37:04,300 --> 00:37:06,800
So we're going to do gamer commands commands, render touch quads

691
00:37:06,800 --> 00:37:08,000
equals current quads.

692
00:37:08,000 --> 00:37:10,900
We're going to add a quad per line segment.

693
00:37:11,600 --> 00:37:15,200
We're going to add a bitmap to it, which is whichever this bitmap, is

694
00:37:15,400 --> 00:37:19,600
that we're getting past, we're going to add four vertices, which is

695
00:37:19,600 --> 00:37:22,900
correct, but the way that we're going to add these vertices is now

696
00:37:22,900 --> 00:37:24,100
going to be different, right?

697
00:37:24,400 --> 00:37:27,600
So really what I could do because I'm going to you know because we're

698
00:37:27,600 --> 00:37:29,800
going to essentially use exactly the same code.

699
00:37:29,800 --> 00:37:33,600
What I could do is just push a quad here and put an end just

700
00:37:34,100 --> 00:37:37,700
Compute the values that I would push to the quad, right?

701
00:37:37,700 --> 00:37:40,600
So what I can do here is say alright we're going to go from this P to

702
00:37:40,600 --> 00:37:45,100
this P using this color and I guess in order to be a little more

703
00:37:45,100 --> 00:37:47,600
consistent here probably should do this.

704
00:37:50,200 --> 00:37:50,500
Right?

705
00:37:50,500 --> 00:37:51,400
That's a little bit better.

706
00:37:52,800 --> 00:37:55,900
Similarly, I don't know if we want to specify UV coordinates, it's a

707
00:37:55,900 --> 00:37:56,600
good question.

708
00:38:04,400 --> 00:38:08,300
I'm not really sure but at any rate, we're going to have to specify a

709
00:38:08,300 --> 00:38:09,900
thickness, as well.

710
00:38:10,800 --> 00:38:14,600
So looking at this, what we need to do now is compute how to call this

711
00:38:15,000 --> 00:38:15,900
with what were given.

712
00:38:16,600 --> 00:38:19,300
So here's the values that we're actually going to need, right?

713
00:38:21,600 --> 00:38:24,500
We have the group in the bitmap, so those are obvious.

714
00:38:25,100 --> 00:38:27,400
So now the question is just how do we compute the rest of these

715
00:38:27,400 --> 00:38:28,000
values?

716
00:38:30,700 --> 00:38:33,200
and so we could say is, you know,

717
00:38:35,600 --> 00:38:36,200
go ahead and

718
00:38:39,100 --> 00:38:40,400
move these out a little bit here.

719
00:38:50,300 --> 00:38:50,900
There we go.

720
00:38:56,200 --> 00:38:58,300
So this is what we want to figure out.

721
00:39:03,700 --> 00:39:05,900
And I'm going to have to name these slightly differently because it,

722
00:39:05,900 --> 00:39:08,500
since we already kind of have a nomenclature for these in the quad.

723
00:39:08,500 --> 00:39:12,700
I'd rather sort of have, you know, this be, you know, maybe this is

724
00:39:12,700 --> 00:39:16,300
from from sea or from P2P.

725
00:39:21,300 --> 00:39:24,900
Like so just you kind of say like okay I'm going from this point to

726
00:39:24,900 --> 00:39:27,900
this point kind of a kind of an idea, right?

727
00:39:37,700 --> 00:39:40,200
So, that's what we're looking at here now.

728
00:39:43,400 --> 00:39:46,400
We've got a bunch of work to do, obviously to try and figure out how

729
00:39:46,400 --> 00:39:49,600
we would make these values.

730
00:39:49,600 --> 00:39:52,600
Given what we have, some of them are a little, are easier than others.

731
00:39:52,900 --> 00:39:57,800
So for example, in the UV case I think we don't probably want to

732
00:39:57,800 --> 00:40:01,200
support a lot of UV stuff here because we're probably never going to

733
00:40:01,200 --> 00:40:03,300
be really doing anything with these.

734
00:40:03,600 --> 00:40:07,400
So what we could say is well it's just going to be you know, the

735
00:40:07,400 --> 00:40:08,800
basics UV.

736
00:40:08,800 --> 00:40:11,300
It's just going to map the entire texture to the line.

737
00:40:12,400 --> 00:40:13,400
Whatever, right?

738
00:40:13,400 --> 00:40:16,800
And maybe that's a dumb idea but until we actually would have some

739
00:40:16,800 --> 00:40:17,500
reason

740
00:40:18,700 --> 00:40:23,000
Why we might think of doing something else here?

741
00:40:23,000 --> 00:40:24,300
I guess I should probably do it this way.

742
00:40:28,700 --> 00:40:32,100
Until I think of some reason why we're going to actually use texture

743
00:40:32,100 --> 00:40:33,100
mapping with lines.

744
00:40:33,800 --> 00:40:38,300
I don't really think there's any need to get fancier here, right.

745
00:40:39,100 --> 00:40:40,500
Similarly, with our colors.

746
00:40:40,500 --> 00:40:42,700
I think we can just always use one.

747
00:40:44,800 --> 00:40:48,500
In this case, we can just do one single pack down.

748
00:40:48,500 --> 00:40:51,100
Oh, well, I guess what we said is we could do it from C and A to see.

749
00:40:51,100 --> 00:40:54,500
So I guess in this case, I'm going to do a pact

750
00:41:08,000 --> 00:41:09,100
So let's do it this way.

751
00:41:17,200 --> 00:41:18,100
You don't call that f.

752
00:41:19,600 --> 00:41:20,500
Floating-point version.

753
00:41:21,600 --> 00:41:24,900
So we'll pack those two down, and then we know that like anything

754
00:41:24,900 --> 00:41:28,800
that's going to be on the, from side, which I guess, is these two here

755
00:41:29,500 --> 00:41:32,800
will get that color and anything that's on the two side will get the

756
00:41:32,800 --> 00:41:33,400
other color.

757
00:41:34,000 --> 00:41:34,600
All right.

758
00:41:35,900 --> 00:41:39,500
So, our main goal here is just to figure out what these points should

759
00:41:39,500 --> 00:41:40,200
actually be.

760
00:41:40,900 --> 00:41:42,500
And so, let's take a look at a diagram.

761
00:41:42,500 --> 00:41:45,600
So we can figure out what we're trying to do what we've been given.

762
00:41:46,500 --> 00:41:50,200
In this case is a situation that looks like this.

763
00:41:50,500 --> 00:41:54,300
And what we want to do is we want to draw a line segment something

764
00:41:54,300 --> 00:41:58,500
that will allow us to get, you know, some thickness here, right?

765
00:41:58,500 --> 00:41:59,800
So we want to dress something.

766
00:42:00,300 --> 00:42:01,400
Now, that looks like that.

767
00:42:05,500 --> 00:42:09,300
Now, there's a lot of ways you might approach this problem if we were

768
00:42:09,300 --> 00:42:12,200
trying to If This Were part of the game.

769
00:42:12,600 --> 00:42:15,600
So if you're trying to push line segments as something that we wanted,

770
00:42:15,600 --> 00:42:20,200
like a really good-looking end-user anti-aliased like beautiful line

771
00:42:20,200 --> 00:42:21,600
segment thing.

772
00:42:22,900 --> 00:42:26,200
What we would probably do actually is Implement a some kind of a

773
00:42:26,200 --> 00:42:28,500
distance field in a Shader, right?

774
00:42:28,500 --> 00:42:29,700
Honestly is what we do that way.

775
00:42:29,700 --> 00:42:32,000
It would be per pixel accurate and all this other stuff.

776
00:42:32,800 --> 00:42:35,200
Always correct, no math involved.

777
00:42:35,400 --> 00:42:36,300
Outside of it.

778
00:42:37,600 --> 00:42:42,700
And off, we would go, right, glyph drawing by using shaders is a kind

779
00:42:42,700 --> 00:42:44,700
of a well-known thing right now and that's something we would

780
00:42:44,700 --> 00:42:47,600
investigate if we were trying to draw like really pretty lines for the

781
00:42:47,600 --> 00:42:51,000
game, but in this case, we are just in a debug scenario.

782
00:42:51,200 --> 00:42:54,100
So really all we need to do is figure out what direction the line is

783
00:42:54,100 --> 00:42:55,500
going and construct.

784
00:42:55,500 --> 00:42:57,600
We just need to construct these points.

785
00:42:59,000 --> 00:42:59,500
Right.

786
00:43:01,600 --> 00:43:05,700
So what we know is we can compute this Vector, right?

787
00:43:05,700 --> 00:43:10,600
If this is p 0 and this is p 1, we can certainly compute P, 1, minus p

788
00:43:10,600 --> 00:43:11,100
0.

789
00:43:11,300 --> 00:43:15,900
And furthermore if we were to normalize that, right, we would get a

790
00:43:15,900 --> 00:43:17,800
vector pointing in this Direction.

791
00:43:19,000 --> 00:43:23,200
With that information, it would then be relatively easy for us to walk

792
00:43:23,200 --> 00:43:28,100
out the perpendicular of that and construct, something that looks

793
00:43:28,100 --> 00:43:30,900
exactly like the diagram that I have drawn here.

794
00:43:31,300 --> 00:43:35,300
So if we assume that this is actually from P, shouldn't say p 0.

795
00:43:35,300 --> 00:43:44,700
And this is 2p and we want P0 P1 P2 P3 to, you know, prepare a proper

796
00:43:44,700 --> 00:43:45,400
quad.

797
00:43:46,000 --> 00:43:49,500
Then you can see that in this case, if we walk backwards along the

798
00:43:49,500 --> 00:43:51,800
perpendicular by the thickness, right?

799
00:43:51,800 --> 00:43:53,500
This is the thickness value right here.

800
00:43:55,000 --> 00:43:56,900
Or half the thickness depending on how we want it.

801
00:43:56,900 --> 00:44:00,200
Whether whether thickness is our radius or diameter, I don't know

802
00:44:00,200 --> 00:44:03,200
whether which we want to consider, it's up to us.

803
00:44:04,200 --> 00:44:07,400
But anyway, from p, in this case, if we walk backwards along the

804
00:44:07,400 --> 00:44:11,200
perpendicular, by from P, we would get to p 0.

805
00:44:11,200 --> 00:44:16,100
If we walk forwards along it, we would get 2 p 3 and the same would be

806
00:44:16,100 --> 00:44:17,800
true from to pee.

807
00:44:17,800 --> 00:44:21,800
So really all we have to do is produce that little perpendicular,

808
00:44:21,800 --> 00:44:24,200
that's our entire job and we

809
00:44:24,400 --> 00:44:29,800
Haven't talked much about the cross product here, but that's actually

810
00:44:29,800 --> 00:44:31,400
what we would need to use.

811
00:44:31,400 --> 00:44:32,400
In this case,

812
00:44:36,800 --> 00:44:40,200
Technically, we wouldn't necessarily have to use it.

813
00:44:40,200 --> 00:44:43,600
There are other ways that we can go about Computing.

814
00:44:43,600 --> 00:44:48,600
This that would involve mapping onto the screen, axes first, and then

815
00:44:48,600 --> 00:44:52,900
doing the dot product but probably the easiest way is going to be the

816
00:44:52,900 --> 00:44:53,400
cross product.

817
00:44:53,400 --> 00:44:55,900
So probably the best thing for me to do is just kind of briefly,

818
00:44:55,900 --> 00:44:58,000
describe what it is and how it works.

819
00:44:58,000 --> 00:44:59,500
So you can have a little bit more.

820
00:45:00,000 --> 00:45:00,400
Of it.

821
00:45:02,200 --> 00:45:10,200
All right, so the cross product is kind of usually talked about in

822
00:45:10,200 --> 00:45:12,800
terms of vector products with the dot product.

823
00:45:13,400 --> 00:45:19,700
In sort of the old notion of, I think, I think the correct term is

824
00:45:19,700 --> 00:45:20,800
Vector calculus.

825
00:45:25,400 --> 00:45:30,800
I think, but don't don't blame me if that's the wrong term.

826
00:45:32,000 --> 00:45:32,700
In general.

827
00:45:32,700 --> 00:45:39,500
There's been a lot of movement away from these, these ways of looking

828
00:45:39,500 --> 00:45:46,300
at vectors sort of over the course of my lifetime actually not to

829
00:45:46,300 --> 00:45:49,300
things that have been invented recently, but actually two things that

830
00:45:49,300 --> 00:45:52,100
have invented a long time ago, but that we're just not the predominant

831
00:45:52,100 --> 00:45:55,100
way of looking at things for whatever reason, Vector calculus,

832
00:45:55,200 --> 00:45:57,200
Kind of dominated the engineering literature.

833
00:45:59,400 --> 00:46:02,800
For the better part of the 20th century.

834
00:46:03,100 --> 00:46:06,900
I don't pretend to know why I'm not a math historian, but there are

835
00:46:06,900 --> 00:46:07,800
other things.

836
00:46:08,400 --> 00:46:11,600
There's, I believe, differential geometry, Seth.

837
00:46:17,000 --> 00:46:20,900
Is one of them in computational Geometry or sorry, geometric algebra.

838
00:46:27,600 --> 00:46:32,000
There are these other ways of thinking about Vector spaces and stuff

839
00:46:32,000 --> 00:46:37,700
like this that have been pushed as more modern or more useful.

840
00:46:37,700 --> 00:46:40,300
Alternatives, even though again like a lot of them were actually

841
00:46:40,300 --> 00:46:41,500
created quite some time ago.

842
00:46:41,500 --> 00:46:46,300
They were not inventions of the 1990s or so when I think I sort of

843
00:46:46,300 --> 00:46:49,500
first saw them being pushed in a wider sense.

844
00:46:51,500 --> 00:46:56,100
and you will see a lot of things that sort of talk about the, the

845
00:46:56,200 --> 00:47:01,000
standard Vector calculations which are DOT product, cross product

846
00:47:01,600 --> 00:47:05,000
gradient Divergence,

847
00:47:06,300 --> 00:47:07,200
And curl.

848
00:47:09,300 --> 00:47:13,300
these folks, as kind of being very old school,

849
00:47:15,300 --> 00:47:20,000
And new school is like all a whole other set of things that I'm not

850
00:47:20,100 --> 00:47:23,800
even remotely qualified to say, whether they're better or worse.

851
00:47:24,100 --> 00:47:29,700
I can simply tell you that there is a great deal of discussion about

852
00:47:29,700 --> 00:47:32,800
it and that if this is the sort of thing that that you're interested

853
00:47:32,800 --> 00:47:35,700
in, you probably would want to take a look at some of these things.

854
00:47:36,200 --> 00:47:39,500
Differential geometry specifically is the one that talks about these

855
00:47:39,500 --> 00:47:40,900
Saucy gentleman right here.

856
00:47:41,300 --> 00:47:42,800
Gradient, Divergence and curl.

857
00:47:43,800 --> 00:47:47,900
And geometric algebra is the one that talks about these sausage

858
00:47:47,900 --> 00:47:48,400
element.

859
00:47:48,400 --> 00:47:52,200
Obviously, there's a plenty of overlap in between here, but geometric

860
00:47:52,200 --> 00:47:56,700
algebra is basically, a way of of no longer conceptualizing things.

861
00:47:56,700 --> 00:47:59,600
Just in terms of vector, it's more about sort of like plates and

862
00:48:00,400 --> 00:48:04,100
But by factors and by vectors and they have by vectors are sort of two

863
00:48:04,100 --> 00:48:07,600
vectors together that Define a like a parallelogram kind of a thing

864
00:48:08,700 --> 00:48:11,800
and it's sort of a more unified way of looking at a lot of these

865
00:48:11,800 --> 00:48:12,300
things.

866
00:48:13,600 --> 00:48:16,600
Differential geometry, I know almost nothing about.

867
00:48:16,700 --> 00:48:19,800
But you know, for example, there is a book, literally called grad, dip

868
00:48:19,800 --> 00:48:25,700
and curl are dead, um, and I don't know if it was ever published.

869
00:48:25,700 --> 00:48:28,800
The guy who I think the guy who was running a died before finishing

870
00:48:28,800 --> 00:48:29,900
it, he had published.

871
00:48:30,000 --> 00:48:32,000
Stan earlier one though that was talking about that.

872
00:48:32,000 --> 00:48:33,700
But anyway, it's neither here, nor there.

873
00:48:35,900 --> 00:48:41,200
So, you know, depending on how much you want to understand sort of the

874
00:48:41,300 --> 00:48:45,100
the all of the powerful ways you could use a lot of this stuff.

875
00:48:45,100 --> 00:48:48,800
You may want to look a lot deeper into this stuff than then I'm going

876
00:48:48,800 --> 00:48:50,000
to mention it all today.

877
00:48:50,800 --> 00:48:53,400
But before I mention something like cross product, I just feel obliged

878
00:48:53,400 --> 00:48:57,500
to bring this up because while the dot product or inner product is

879
00:48:57,500 --> 00:49:00,900
more of a fundamental linear algebra operation.

880
00:49:02,200 --> 00:49:06,200
The kind of needs to be understood on its own terms, regardless of how

881
00:49:06,200 --> 00:49:09,900
you wish to build up the rest of your Calculus or geometry

882
00:49:09,900 --> 00:49:10,800
understanding.

883
00:49:11,700 --> 00:49:15,000
The cross product is not really that way.

884
00:49:15,600 --> 00:49:18,300
The cross product is kind of like a

885
00:49:20,500 --> 00:49:24,400
It's kind of a special case kind of the thing that's sort of really

886
00:49:24,400 --> 00:49:25,600
only useful in three.

887
00:49:25,600 --> 00:49:30,300
Dimensions and isn't really probably the right way to think about

888
00:49:30,300 --> 00:49:30,800
stuff.

889
00:49:31,000 --> 00:49:35,500
Most of the time, if you have a better understanding of these sorts of

890
00:49:35,500 --> 00:49:40,200
things, and it's the kind of operator that is specifically, why a lot

891
00:49:40,200 --> 00:49:44,600
of people would tell you to take different approaches to learning

892
00:49:44,600 --> 00:49:48,800
these sorts of things than the traditional method of the vector

893
00:49:48,800 --> 00:49:49,300
calculus.

894
00:49:49,500 --> 00:49:53,900
On a style, which emphasizes things like Dot and cross products as the

895
00:49:53,900 --> 00:49:55,600
fundamental way of thinking about things.

896
00:49:56,800 --> 00:50:00,000
And so I feel like the dot product kind of survive scrutiny.

897
00:50:00,700 --> 00:50:03,600
No matter how you wish to conceptualize Vector spaces and how they

898
00:50:03,600 --> 00:50:04,100
work.

899
00:50:04,800 --> 00:50:10,800
But the cross product I guess I would say doesn't the cross product

900
00:50:10,800 --> 00:50:16,100
can kind of be thought of more as a special case, thing that falls out

901
00:50:16,100 --> 00:50:19,300
of these other kinds of ways of doing things.

902
00:50:19,400 --> 00:50:22,600
Things and that probably you should understand those maybe a little

903
00:50:22,600 --> 00:50:25,000
bit better if you really want to understand what was going on there.

904
00:50:27,500 --> 00:50:30,300
I think that's probably pretty fair to say, I say that as someone who

905
00:50:30,300 --> 00:50:32,000
isn't super familiar with all the math.

906
00:50:32,400 --> 00:50:34,900
So you know, take it with a grain of salt but I guess I would just

907
00:50:34,900 --> 00:50:38,800
point out that the reason I didn't mention this stuff very much when

908
00:50:38,800 --> 00:50:40,700
we were talking about the dot product of so I feel like the dot

909
00:50:40,700 --> 00:50:45,200
product is kind of universal and the cross product really isn't, it

910
00:50:45,200 --> 00:50:48,500
cost product kind of a hack and there is an on hacky way of

911
00:50:48,500 --> 00:50:52,600
conceptualizing these things if you wish to kind of dive deeper into

912
00:50:52,600 --> 00:50:52,900
it.

913
00:50:55,300 --> 00:50:58,500
Or at least there are alternatives, there are proposals of ways that

914
00:50:58,500 --> 00:50:59,500
might be less tacky.

915
00:51:00,100 --> 00:51:02,500
All right, so, all of that sort of front loading, out of the way.

916
00:51:02,500 --> 00:51:05,000
Let's talk about what the cross product actually is.

917
00:51:05,700 --> 00:51:07,300
And why you might want to use it.

918
00:51:07,300 --> 00:51:11,100
Bearing in mind that a deeper theoretical understanding of the math

919
00:51:11,100 --> 00:51:14,100
here, would lead you to other things.

920
00:51:14,200 --> 00:51:18,700
And the cross product would kind of be sort of just this one form of

921
00:51:18,700 --> 00:51:21,300
the equations that you end up with if you're only considering a

922
00:51:21,300 --> 00:51:22,100
special case

923
00:51:23,500 --> 00:51:27,900
All right, so we know that the let's take the inner product or dot

924
00:51:27,900 --> 00:51:31,400
product on this side, just so you understand what I'm talking about

925
00:51:31,400 --> 00:51:31,600
here.

926
00:51:31,600 --> 00:51:38,000
You know, as we said, I write it in its standard Vector form.

927
00:51:38,000 --> 00:51:44,100
If I have two different vectors here, x let's say well that's not news

928
00:51:44,100 --> 00:51:44,400
those.

929
00:51:44,400 --> 00:51:44,600
I guess.

930
00:51:44,600 --> 00:51:49,100
Let's use a and b a transpose B for the dot product.

931
00:51:49,100 --> 00:51:53,400
In this case, it's the length of a time's the length of B times the

932
00:51:53,400 --> 00:51:53,500
cosine

933
00:51:53,500 --> 00:51:57,900
No sign of the angles between those two that we've said many many

934
00:51:57,900 --> 00:52:01,800
times on handmade hero and again, very easy to understand.

935
00:52:01,800 --> 00:52:07,500
Once you kind of get used to it, it can construction wise, you can

936
00:52:07,500 --> 00:52:12,900
kind of think of it as if you have say, for example, a b, which is

937
00:52:12,900 --> 00:52:13,700
unit length.

938
00:52:14,300 --> 00:52:15,600
In this case, equals 1.

939
00:52:16,200 --> 00:52:20,000
And then you have your a out here, you can think of it as sort of

940
00:52:20,000 --> 00:52:22,200
projecting onto

941
00:52:23,400 --> 00:52:24,300
This right, right here.

942
00:52:25,600 --> 00:52:30,300
Again, it's that cosine Theta term here is the Theta and this is sort

943
00:52:30,300 --> 00:52:32,000
of that projection onto their forms.

944
00:52:32,000 --> 00:52:36,000
The cosine Theta, length of a term again, a being the hypotenuse of a

945
00:52:36,000 --> 00:52:39,900
right triangle, the right triangle, being constructed in such a way if

946
00:52:39,900 --> 00:52:41,600
you think about that fundamental document.

947
00:52:41,600 --> 00:52:45,500
And I'm saying it quickly, because I'm, we've said it so many times on

948
00:52:45,500 --> 00:52:48,300
handmade hero, that I hope everyone is very familiar with this if

949
00:52:48,300 --> 00:52:48,700
you're not.

950
00:52:48,700 --> 00:52:51,900
I don't know how to say it any more than I have already said it

951
00:52:52,100 --> 00:52:54,400
because we've talked about it so many times, so hopefully you're very

952
00:52:54,400 --> 00:52:54,700
familiar.

953
00:52:54,700 --> 00:52:55,200
You're not

954
00:52:55,400 --> 00:52:58,300
Please go back to earlier episodes where we talked about the product

955
00:52:58,300 --> 00:53:02,400
may be using that really cool tool by ASF Gartner to search for inner

956
00:53:02,400 --> 00:53:03,700
product or dot product.

957
00:53:04,900 --> 00:53:08,100
So, hopefully, everyone's comfortable with this, what I'd like to

958
00:53:08,100 --> 00:53:12,400
introduce today is the cross product cross product usually.

959
00:53:12,700 --> 00:53:14,800
And again, you can sort of see right off the bat.

960
00:53:14,800 --> 00:53:16,000
It doesn't really make any sense.

961
00:53:16,000 --> 00:53:16,400
It's written.

962
00:53:16,400 --> 00:53:20,600
Like this often times, you can notice not a linear algebra.

963
00:53:20,600 --> 00:53:24,100
Operator here, really, this is a matrix product.

964
00:53:24,100 --> 00:53:28,500
I mean, this is a very fundamental kind of product in linear algebra.

965
00:53:28,600 --> 00:53:34,600
This is not, this is just kind of like, and it's kind of like a

966
00:53:36,800 --> 00:53:42,800
Sort of a something that almost a descendant of of the determinant of

967
00:53:42,800 --> 00:53:43,400
a matrix.

968
00:53:43,400 --> 00:53:47,300
It's it's really like I said, I just want to emphasize the

969
00:53:47,300 --> 00:53:51,800
uncomfortableness of the dot product not that it's not very useful to

970
00:53:51,800 --> 00:53:55,100
just kind of know how to use one now into that again but just to keep

971
00:53:55,100 --> 00:53:59,800
you sort of with the understanding that there's better math out.

972
00:54:00,300 --> 00:54:05,100
That sort of postdates or whose acceptance anyway, postdates.

973
00:54:05,100 --> 00:54:06,600
When I learned a lot of this stuff

974
00:54:07,800 --> 00:54:09,600
That can help you get more traction on it.

975
00:54:09,900 --> 00:54:10,400
Anyway.

976
00:54:10,900 --> 00:54:14,500
It's written like this and it's actually very closely related.

977
00:54:14,900 --> 00:54:18,900
It's basically this it's almost the exact analog.

978
00:54:20,100 --> 00:54:23,300
It's basically this length of a length of B sine Theta.

979
00:54:23,700 --> 00:54:27,700
And so in some ways it's extremely close to the dot product but

980
00:54:27,700 --> 00:54:31,600
there's one really big difference that makes it not exactly that.

981
00:54:32,300 --> 00:54:35,200
And that is that it goes in a Direction.

982
00:54:35,500 --> 00:54:40,900
So if you take a look at this, in this case we have a vector here and

983
00:54:40,900 --> 00:54:45,600
we have a vector here but this contraction of the two vectors together

984
00:54:45,700 --> 00:54:47,900
produces a scalar on this side.

985
00:54:48,900 --> 00:54:49,700
And so if I wrote

986
00:54:49,900 --> 00:54:50,200
Equation.

987
00:54:50,200 --> 00:54:51,000
Exactly like this.

988
00:54:51,000 --> 00:54:52,800
That's exactly what we would have for the cross product.

989
00:54:52,800 --> 00:54:54,100
We'd have a vector here.

990
00:54:55,800 --> 00:54:57,000
And a vector here.

991
00:54:58,900 --> 00:55:01,100
And we'd have a scalar on the other side, right?

992
00:55:01,100 --> 00:55:04,100
A single value, because remember, the dot properties is a single

993
00:55:04,100 --> 00:55:05,900
value, right?

994
00:55:06,000 --> 00:55:07,200
And we know how its produced, right?

995
00:55:07,200 --> 00:55:13,400
It's ax BX + a YB y, plus, AZ, bz, right?

996
00:55:13,400 --> 00:55:14,900
So you can see it's a scalar.

997
00:55:14,900 --> 00:55:16,500
It's just a sum of a set of terms.

998
00:55:16,700 --> 00:55:18,200
There's no Vector here.

999
00:55:18,200 --> 00:55:19,400
There's only one value.

1000
00:55:19,500 --> 00:55:22,600
So, no matter how long these were, this could have been nine, thousand

1001
00:55:22,600 --> 00:55:23,500
units long.

1002
00:55:23,800 --> 00:55:26,800
And this could have been nine thousand units long when we transpose

1003
00:55:26,800 --> 00:55:27,600
them together.

1004
00:55:28,500 --> 00:55:32,200
We just get one big long thing of 9,000 terms that all smashes down

1005
00:55:32,200 --> 00:55:33,800
into one scalar, right?

1006
00:55:34,000 --> 00:55:37,300
So no matter how big the vectors were to begin with the dot product

1007
00:55:37,300 --> 00:55:41,500
always works and it always produces a scalar and it always produces

1008
00:55:41,500 --> 00:55:43,300
the scalar that follows this rule.

1009
00:55:46,700 --> 00:55:51,300
And again, it is dimension free in terms of its operation.

1010
00:55:51,700 --> 00:55:56,200
The only requirement is that the length of the, the number of elements

1011
00:55:56,200 --> 00:56:00,000
of a, the dimensionality of a has to be the same as dimensionality of

1012
00:56:00,000 --> 00:56:00,400
be.

1013
00:56:00,500 --> 00:56:03,100
So I can't dot product of three dimensional Vector with a 12

1014
00:56:03,100 --> 00:56:06,200
dimensional Vector, but I can dot product, a 12 dimensional Vector

1015
00:56:06,200 --> 00:56:07,500
with a, with a 12-inch elector.

1016
00:56:07,500 --> 00:56:12,100
So, as long as they're, they're sort of dimensions are equivalent,

1017
00:56:12,200 --> 00:56:13,300
then I can do this.

1018
00:56:14,900 --> 00:56:15,400
And why?

1019
00:56:15,500 --> 00:56:17,500
Because the matrix product, right?

1020
00:56:17,500 --> 00:56:20,300
It's fundamentally something that looks like this, right?

1021
00:56:20,400 --> 00:56:24,200
It's some number of elements here, some number of rows here, some

1022
00:56:24,200 --> 00:56:27,400
number of columns here, they both have to be equal and then I produce

1023
00:56:27,500 --> 00:56:28,100
a scalar

1024
00:56:31,400 --> 00:56:33,400
Okay, so the cross product is not that way.

1025
00:56:33,400 --> 00:56:35,300
It does not produce a term, that looks like this.

1026
00:56:35,500 --> 00:56:40,100
Rather this term is actually the length of the result.

1027
00:56:40,300 --> 00:56:44,400
And the length of the result is actually, the result itself is

1028
00:56:44,400 --> 00:56:45,300
actually a vector.

1029
00:56:45,600 --> 00:56:51,000
It's a vector where this is the length and the direction is some

1030
00:56:51,900 --> 00:56:55,600
Vector is along some Vector C, right?

1031
00:56:55,700 --> 00:56:58,200
Which is perpendicular to A and B.

1032
00:56:58,600 --> 00:56:59,600
So, C,

1033
00:57:00,000 --> 00:57:04,900
Perpendicular to A and C is perpendicular to B, right?

1034
00:57:05,200 --> 00:57:10,400
So if you imagine the diagram for this, you end up with a thing where

1035
00:57:10,400 --> 00:57:16,900
this part here, this this diagram, this right here is going to be the

1036
00:57:16,900 --> 00:57:19,900
sine Theta times a.

1037
00:57:19,900 --> 00:57:24,100
For example, if we had b as a unit length again, and we applied the

1038
00:57:24,100 --> 00:57:25,100
cross product.

1039
00:57:25,100 --> 00:57:29,200
We would get this same term for the length, sine Theta, a right.

1040
00:57:30,400 --> 00:57:33,800
But rather than just producing that length, we end up with it going in

1041
00:57:33,800 --> 00:57:37,000
a particular direction and the direction it goes is perpendicular to

1042
00:57:37,000 --> 00:57:37,600
both of them.

1043
00:57:37,800 --> 00:57:40,900
What that means is no matter what these two vectors are, right?

1044
00:57:40,900 --> 00:57:44,100
So here's the two vectors, let's say and here's Theta, right?

1045
00:57:44,700 --> 00:57:49,700
We're going to get this this as the length, but we're going to get it

1046
00:57:49,700 --> 00:57:51,700
in a vector that goes in a direction.

1047
00:57:52,100 --> 00:57:57,000
And that direction is coming out of the plane that contains these two.

1048
00:57:57,100 --> 00:57:59,700
So, whatever this plane is that these two vectors are.

1049
00:57:59,900 --> 00:58:02,500
And I don't know what that plane is, but whatever the plane is that's

1050
00:58:02,500 --> 00:58:04,900
formed by these two vectors, right?

1051
00:58:06,600 --> 00:58:10,100
This result of the cross product comes up and out of the plane.

1052
00:58:10,500 --> 00:58:15,500
So it's actually another three dimensional Vector that we are

1053
00:58:15,500 --> 00:58:16,200
producing.

1054
00:58:16,200 --> 00:58:19,300
We have one three dimensional Vector, a 1 3 dimensional Vector.

1055
00:58:19,300 --> 00:58:22,700
B, we cross them together, we end up with another three dimensional

1056
00:58:22,700 --> 00:58:28,300
Vector C and you know, it's time, I guess you could say, depends on

1057
00:58:28,300 --> 00:58:29,700
what to do it, but we have

1058
00:58:29,800 --> 00:58:33,900
Some director Vector, it's going in the perpendicular Direction and

1059
00:58:33,900 --> 00:58:34,900
it's going to be this long.

1060
00:58:37,300 --> 00:58:37,700
Right.

1061
00:58:39,000 --> 00:58:41,000
That's what the cross product actually does.

1062
00:58:41,900 --> 00:58:45,000
And then there's the question of, how does the cross product actually

1063
00:58:45,200 --> 00:58:46,600
do it, right?

1064
00:58:46,600 --> 00:58:47,200
How does the cross?

1065
00:58:47,200 --> 00:58:53,200
But how do we actually form a cross product that satisfies these

1066
00:58:53,200 --> 00:58:53,500
things?

1067
00:58:53,500 --> 00:58:57,900
And you know that we're going to have right three elements.

1068
00:58:58,000 --> 00:59:02,700
So we're going to have one term two terms, three terms.

1069
00:59:03,500 --> 00:59:07,000
And we know that the length of these things is going

1070
00:59:07,100 --> 00:59:08,600
To come out to be.

1071
00:59:13,400 --> 00:59:16,500
Is going to come out to be this and it's direction is going to come

1072
00:59:16,500 --> 00:59:17,100
out to be this.

1073
00:59:17,300 --> 00:59:21,700
So we know ahead of time, for example, that whatever this result is

1074
00:59:21,700 --> 00:59:27,800
this a b sine Theta, C, if we were to, then cross it with a, I'm

1075
00:59:27,800 --> 00:59:31,000
sorry, if we were to dot product, it with a or b, we would get zero.

1076
00:59:31,200 --> 00:59:34,100
So, regardless of the length, actually, even if we just took just the

1077
00:59:34,100 --> 00:59:36,200
C term, which is the directional term here.

1078
00:59:37,000 --> 00:59:42,100
If we said c transpose a, we would get 0 if we said see,

1079
00:59:42,200 --> 00:59:43,500
E transpose B.

1080
00:59:43,700 --> 00:59:44,600
We would get zero.

1081
00:59:45,700 --> 00:59:49,300
That's that's just something that we know by the definition of

1082
00:59:49,300 --> 00:59:50,500
perpendicularity.

1083
00:59:50,800 --> 00:59:54,200
And so what we could say, is that, whatever we ended up with here, in

1084
00:59:54,200 --> 00:59:59,800
terms of our values, whatever X, Y and Z were in this

1085
01:00:00,000 --> 01:00:03,800
Is we would end up knowing that once we dot product, done with our

1086
01:00:03,800 --> 01:00:06,500
original vectors, we would end up with zeros.

1087
01:00:07,100 --> 01:00:13,400
Now, the I don't know, I've never tried to solve for the dot product

1088
01:00:13,400 --> 01:00:14,600
in that way.

1089
01:00:18,500 --> 01:00:20,600
I wonder if you just could do that.

1090
01:00:22,500 --> 01:00:26,300
I know this is probably what no one wants to watch today, but you

1091
01:00:26,300 --> 01:00:29,000
know, it's unfortunately, my show which means I can do whatever I

1092
01:00:29,000 --> 01:00:29,600
want.

1093
01:00:31,700 --> 01:00:36,500
And so I guess I might just ask that question because I don't think

1094
01:00:36,500 --> 01:00:37,700
I've ever asked that question.

1095
01:00:37,900 --> 01:00:40,400
So I know that

1096
01:00:42,500 --> 01:00:45,600
That A cross B equals.

1097
01:00:50,100 --> 01:00:51,900
A bee.

1098
01:00:55,700 --> 01:01:03,000
Sine Theta times this C term here, if I know that that has to be the

1099
01:01:03,000 --> 01:01:03,700
length of it.

1100
01:01:03,700 --> 01:01:09,000
So what I could say is the length of a cross B equals a b sine Theta.

1101
01:01:11,600 --> 01:01:15,800
And I know that this C term here.

1102
01:01:21,400 --> 01:01:24,900
Well, I guess what I could say is, I know that A cross B.

1103
01:01:30,500 --> 01:01:36,000
Transpose a equal 0 and a groups.

1104
01:01:36,800 --> 01:01:41,000
A cross B transpose b equals 0.

1105
01:01:41,500 --> 01:01:44,000
If I know all of these things are true.

1106
01:01:48,600 --> 01:01:53,400
In theory, there are only three components to a cross product.

1107
01:01:53,400 --> 01:01:55,300
Could I just solve

1108
01:01:56,800 --> 01:02:01,200
After a long bout with mathematics, for what they had to be.

1109
01:02:03,900 --> 01:02:10,200
It's intriguing to me and kind of want to see if it's true.

1110
01:02:10,400 --> 01:02:13,500
So let's suppose that instead of looking at see this way, let's

1111
01:02:13,500 --> 01:02:19,100
suppose that I just start off by saying that C equals A cross B.

1112
01:02:19,500 --> 01:02:20,900
That is what C equals.

1113
01:02:21,200 --> 01:02:25,600
So what I'm really saying here is the length of C, whatever that is is

1114
01:02:25,600 --> 01:02:28,600
a b sine Theta.

1115
01:02:30,500 --> 01:02:31,600
C transpose.

1116
01:02:31,600 --> 01:02:33,500
A is 0, C.

1117
01:02:33,500 --> 01:02:34,200
Transpose.

1118
01:02:34,200 --> 01:02:36,000
B is 0, right?

1119
01:02:37,000 --> 01:02:43,700
This is what I'm starting with, in this case and so I can write these

1120
01:02:43,700 --> 01:02:45,400
down, right?

1121
01:02:46,000 --> 01:02:53,400
I can just say that c x ax, + Cy, b y, + CZ.

1122
01:02:53,900 --> 01:02:55,700
B, z equals 0.

1123
01:02:57,100 --> 01:02:59,800
I can say that CX.

1124
01:03:00,100 --> 01:03:06,800
BX + C, YB y + C ZB, Z, Oops.

1125
01:03:06,800 --> 01:03:09,500
Why did those change I'm bad at math?

1126
01:03:10,700 --> 01:03:11,100
We go.

1127
01:03:14,800 --> 01:03:16,400
This is why I can never be a mathematician.

1128
01:03:17,900 --> 01:03:22,400
All right, so I know that those two things are true.

1129
01:03:22,900 --> 01:03:26,700
And furthermore, I know that this is true and that's a much more

1130
01:03:29,600 --> 01:03:32,000
Fancy equation, certainly, right?

1131
01:03:32,700 --> 01:03:35,100
But I could in theory if I want to

1132
01:03:36,900 --> 01:03:37,700
I think.

1133
01:03:41,000 --> 01:03:44,900
I feel like I can just Square those two, right?

1134
01:03:44,900 --> 01:03:48,600
I don't think there's any particular reason why I couldn't.

1135
01:03:48,800 --> 01:03:55,300
So I could say for example that this term here, I believe, if you just

1136
01:03:55,300 --> 01:03:59,500
multiply both sides by themselves, since they are equal, that should

1137
01:03:59,500 --> 01:04:06,000
be legitimate, you'd get cc equals a

1138
01:04:08,200 --> 01:04:14,300
The B sine Theta, sine Theta, right?

1139
01:04:14,700 --> 01:04:20,500
Which contracts to just you know, c squared.

1140
01:04:22,300 --> 01:04:24,600
A squared, B, squared sine squared.

1141
01:04:25,600 --> 01:04:28,600
Thank don't see any reason why not?

1142
01:04:29,200 --> 01:04:36,400
Which is to say that I could rewrite that as just see x squared plus,

1143
01:04:36,400 --> 01:04:39,100
c, y squared, plus c z squared,

1144
01:04:41,900 --> 01:04:43,100
All right, that's this term here.

1145
01:04:46,300 --> 01:04:52,500
Equals ax squared, plus BX squared plus CX squared.

1146
01:04:56,200 --> 01:04:57,400
I don't know what I just did there.

1147
01:04:57,400 --> 01:04:58,200
That's nuts.

1148
01:04:58,500 --> 01:05:02,200
I meant a y squared, plus a z squared.

1149
01:05:02,800 --> 01:05:04,800
Yeah, be x squared.

1150
01:05:04,800 --> 01:05:08,200
Plus b, y squared plus DZ squared.

1151
01:05:10,900 --> 01:05:12,200
Sine squared, theta.

1152
01:05:14,300 --> 01:05:14,900
Right?

1153
01:05:15,900 --> 01:05:20,800
I mean again like can't say I want to try and solve these equations.

1154
01:05:20,800 --> 01:05:22,800
But in theory, at least,

1155
01:05:24,800 --> 01:05:26,700
This is just a known quantity.

1156
01:05:27,500 --> 01:05:29,100
This is just a known quantity.

1157
01:05:29,700 --> 01:05:31,300
This is just a known quantity.

1158
01:05:32,100 --> 01:05:34,700
These are the only unknowns, right?

1159
01:05:34,900 --> 01:05:38,900
So I've only got in each case.

1160
01:05:39,300 --> 01:05:41,200
I've only got three unknowns

1161
01:05:45,200 --> 01:05:46,800
And I have three equations.

1162
01:05:47,000 --> 01:05:52,000
So in theory just based on the definition although the plug-in

1163
01:05:52,000 --> 01:05:55,700
chugging in this case would be extremely onerous especially due to

1164
01:05:55,700 --> 01:05:57,600
this Saucy gentleman right here.

1165
01:06:00,000 --> 01:06:07,100
it sure seems to me like, you could do it and

1166
01:06:08,400 --> 01:06:10,300
Yeah, I don't see a lot of reason.

1167
01:06:10,300 --> 01:06:11,600
Why you couldn't

1168
01:06:15,600 --> 01:06:18,500
So I would be interested to just shove this into a computer algebra.

1169
01:06:18,500 --> 01:06:20,400
I don't have any desire to go through it.

1170
01:06:20,400 --> 01:06:21,700
Actually try to do that.

1171
01:06:22,600 --> 01:06:27,800
I would love to be able to solve that in a computer algebra, which I'm

1172
01:06:28,000 --> 01:06:31,600
kicking myself right now for not installing one, because actually

1173
01:06:31,600 --> 01:06:37,900
someone sent me one recently and I wish I could remember it, there was

1174
01:06:37,900 --> 01:06:43,200
a freely available one that people had recently been pushing

1175
01:06:53,300 --> 01:06:55,500
That I was wondering if we could possibly get to work.

1176
01:06:55,500 --> 01:06:58,900
I think it was say age was its age.

1177
01:07:01,300 --> 01:07:02,600
You take a look here?

1178
01:07:08,000 --> 01:07:09,200
Yes, this was it.

1179
01:07:10,200 --> 01:07:13,200
So I wonder if we just read, you know I don't know.

1180
01:07:13,200 --> 01:07:17,300
It's a it's a it's kind of a saucy Saturday at this point.

1181
01:07:17,400 --> 01:07:20,900
I wonder if we could just figure out how to use one of these and you

1182
01:07:20,900 --> 01:07:24,100
could help me write, we could learn it together and then we could have

1183
01:07:24,100 --> 01:07:27,200
it solve this equation for us because it's not a particularly

1184
01:07:27,200 --> 01:07:28,000
difficult equation.

1185
01:07:28,000 --> 01:07:32,600
I don't think it's just a lot of symbol manipulation in this case.

1186
01:07:32,800 --> 01:07:37,400
And so I would think that we could get a computer algebra system to do

1187
01:07:37,400 --> 01:07:37,600
it.

1188
01:07:38,500 --> 01:07:39,400
I should imagine.

1189
01:07:40,600 --> 01:07:42,000
Let's see what happens.

1190
01:07:42,400 --> 01:07:45,100
Here is some download information.

1191
01:07:46,000 --> 01:07:47,000
I am in America.

1192
01:07:47,000 --> 01:07:49,100
North the University of Washington in.

1193
01:07:49,100 --> 01:07:51,700
Seattle is actually, in my hometown.

1194
01:07:53,200 --> 01:07:56,400
Is this something that would run on say, windows?

1195
01:07:57,100 --> 01:07:57,900
I don't know.

1196
01:07:58,100 --> 01:08:05,500
I have no idea when OVA is, so I guess that's kind of confusing.

1197
01:08:05,500 --> 01:08:08,200
It says, download binaries for Microsoft Windows.

1198
01:08:08,200 --> 01:08:10,200
So, presumably the OVA is

1199
01:08:10,400 --> 01:08:13,400
I want I just don't know what that actually is.

1200
01:08:15,300 --> 01:08:18,500
I guess I'll just click on it and we'll find out.

1201
01:08:23,100 --> 01:08:24,600
So yeah.

1202
01:08:31,300 --> 01:08:33,600
Can't say that's going particularly quickly.

1203
01:08:33,800 --> 01:08:38,600
And also, if I'm reading this correctly, I guess that's trying to tell

1204
01:08:38,600 --> 01:08:39,100
me.

1205
01:08:40,300 --> 01:08:45,300
That the computer algebra system is 3.2 GB.

1206
01:08:47,200 --> 01:08:49,500
Is that possible?

1207
01:08:55,700 --> 01:08:56,100
I,

1208
01:09:00,000 --> 01:09:00,399
Todd.

1209
01:09:01,200 --> 01:09:03,399
Well, okay.

1210
01:09:03,600 --> 01:09:05,500
So that's a little more troubling.

1211
01:09:08,700 --> 01:09:10,100
Let's cancel that.

1212
01:09:11,300 --> 01:09:11,899
Wow.

1213
01:09:11,899 --> 01:09:12,399
Okay.

1214
01:09:12,899 --> 01:09:16,000
So do you have to run it in a virtual machine?

1215
01:09:16,000 --> 01:09:17,500
Is that really the case?

1216
01:09:22,500 --> 01:09:25,700
I, it's a computer algebra system.

1217
01:09:25,700 --> 01:09:27,300
How is that even possible?

1218
01:09:29,399 --> 01:09:30,500
I don't know.

1219
01:09:30,500 --> 01:09:33,000
Let's take a look at some of these other things.

1220
01:09:33,300 --> 01:09:36,600
Is there anything else we could do here?

1221
01:09:53,100 --> 01:09:55,100
So that's 57 MB.

1222
01:09:55,100 --> 01:09:57,900
Let's go with that one, shall we?

1223
01:09:57,900 --> 01:10:04,400
Let's since we don't really need anything in particular.

1224
01:10:05,000 --> 01:10:09,100
Let's just see if we can get this one to work.

1225
01:10:09,100 --> 01:10:10,300
Now, bear in mind.

1226
01:10:10,300 --> 01:10:15,500
The last time I did a lot of serious math work, I use Mathematica.

1227
01:10:15,500 --> 01:10:17,700
That's the program.

1228
01:10:17,700 --> 01:10:18,700
I'm most familiar with.

1229
01:10:18,900 --> 01:10:23,100
I have no idea how to use this, who knows if it'll work.

1230
01:10:23,200 --> 01:10:23,800
Cannot.

1231
01:10:26,000 --> 01:10:28,700
Your guess is as good as mine, but I figure we should at least start

1232
01:10:28,700 --> 01:10:33,000
with one that doesn't require installing a virtual machine to run an

1233
01:10:33,000 --> 01:10:33,500
equation.

1234
01:10:33,500 --> 01:10:34,100
Solver

1235
01:10:39,400 --> 01:10:43,000
I your guess is as good as mine, apparently.

1236
01:10:43,000 --> 01:10:43,900
That's where we're at.

1237
01:10:43,900 --> 01:10:45,100
That's where we've arrived.

1238
01:10:45,100 --> 01:10:48,900
In terms of our ability to program things these days, is it requires a

1239
01:10:48,900 --> 01:10:54,700
virtual machine of 33.6 GB, install footprint to run up, you know

1240
01:10:54,700 --> 01:10:55,000
program.

1241
01:10:55,000 --> 01:11:00,800
They used to be like a megabyte long and and there that's just.

1242
01:11:00,800 --> 01:11:02,800
Okay, that's where it that's where you go.

1243
01:11:07,500 --> 01:11:08,200
Hoof.

1244
01:11:08,200 --> 01:11:09,900
Okay, I don't know what to make of that.

1245
01:11:09,900 --> 01:11:13,100
I mean, I'm just thinking trying to put that in perspective, so 1935

1246
01:11:13,100 --> 01:11:19,000
right now has a footprint of 120 gigabytes of uncompressed data and

1247
01:11:19,000 --> 01:11:22,500
our current shipping footprint for that is one point six gigabytes.

1248
01:11:22,700 --> 01:11:25,800
So the actual thing you need to download is 1.2 gigabytes for 160

1249
01:11:25,800 --> 01:11:29,300
gigabyte footprint game in terms of uncompressed art assets, which of

1250
01:11:29,300 --> 01:11:33,400
course you'd never really do, but that's how big the actual data pack

1251
01:11:33,400 --> 01:11:33,700
is.

1252
01:11:34,000 --> 01:11:37,000
So this thing to run a computer algebra system is

1253
01:11:37,200 --> 01:11:42,800
twice the size roughly of a game that has 160 gigabytes worth of art

1254
01:11:42,800 --> 01:11:43,700
assets in it.

1255
01:11:48,400 --> 01:11:51,000
It's impressive to say the least.

1256
01:11:51,000 --> 01:11:57,100
I should think I don't know what they're doing with all of those, but

1257
01:11:57,500 --> 01:11:58,700
there you, there you go.

1258
01:11:59,000 --> 01:11:59,500
Okay.

1259
01:12:00,000 --> 01:12:01,800
It's so here we go.

1260
01:12:03,800 --> 01:12:05,200
Let's see if this works here.

1261
01:12:06,200 --> 01:12:07,900
It's doing its thing, right?

1262
01:12:07,900 --> 01:12:10,400
You can see it's uncompressing some stuff.

1263
01:12:10,400 --> 01:12:12,400
Got little cutie going on there.

1264
01:12:13,100 --> 01:12:14,300
Always good sign.

1265
01:12:18,100 --> 01:12:20,400
Here's the here's a program.

1266
01:12:20,500 --> 01:12:22,500
Got some got a gooey here.

1267
01:12:23,700 --> 01:12:24,700
See what it does.

1268
01:12:24,900 --> 01:12:25,500
There you go?

1269
01:12:25,500 --> 01:12:26,400
Looking good?

1270
01:12:26,700 --> 01:12:33,400
I mean, that's that's a right I mean, that's something looks like it's

1271
01:12:33,400 --> 01:12:35,200
got something going on here.

1272
01:12:35,200 --> 01:12:35,600
I don't know.

1273
01:12:35,600 --> 01:12:37,400
Let's, let's see what happens.

1274
01:12:39,000 --> 01:12:44,600
We should probably read it tutorial first but maybe we can say, you

1275
01:12:44,600 --> 01:12:49,100
know, in this case, Q equals 5.

1276
01:12:52,400 --> 01:12:53,100
False.

1277
01:12:55,800 --> 01:12:57,600
Maybe I have to set P recall 25.

1278
01:12:59,200 --> 01:13:00,100
Out five.

1279
01:13:01,500 --> 01:13:05,600
Okay, so, you know, this shouldn't be too hard, that's pretty

1280
01:13:05,600 --> 01:13:06,300
understandable.

1281
01:13:06,300 --> 01:13:07,100
What's going on here?

1282
01:13:07,100 --> 01:13:08,100
I guess, right?

1283
01:13:08,500 --> 01:13:12,000
This is this must be equivalents, like, does q equal 5 and it's like,

1284
01:13:12,000 --> 01:13:14,900
no, it doesn't because you haven't told me what Q is then.

1285
01:13:14,900 --> 01:13:17,300
I said Q was equal to 5 and I just guessed that.

1286
01:13:17,300 --> 01:13:19,500
That might be the syntax that use for assignment.

1287
01:13:19,500 --> 01:13:22,400
I turned out to be right, that was pure conjecture on my part.

1288
01:13:22,400 --> 01:13:23,900
So then I said, okay what's q?

1289
01:13:23,900 --> 01:13:27,100
And it said Q is equal to 5, I can work with this.

1290
01:13:27,900 --> 01:13:28,500
Right.

1291
01:13:29,900 --> 01:13:30,900
This seems reasonable.

1292
01:13:31,500 --> 01:13:34,900
So let's see here, if I can teach it some of these things, I've got

1293
01:13:34,900 --> 01:13:40,300
some equations here and so I guess, I guess what I need to know is how

1294
01:13:40,300 --> 01:13:42,200
you do solve, right?

1295
01:13:42,800 --> 01:13:45,500
And so, there should be some way to ask it to solve a system of

1296
01:13:45,500 --> 01:13:46,300
equations.

1297
01:13:46,600 --> 01:13:48,200
And that's all we really need to know.

1298
01:13:49,600 --> 01:13:53,300
So, here's some solve, it looks like you've got solve equation

1299
01:13:53,300 --> 01:13:55,400
variable, that's what we need.

1300
01:13:55,400 --> 01:13:58,400
The only problem is we need multiple variables, right?

1301
01:13:58,900 --> 01:13:59,500
And so we need

1302
01:13:59,700 --> 01:14:01,000
System of equations.

1303
01:14:11,200 --> 01:14:13,900
So, it looks like this is the only one that can solve a system of

1304
01:14:13,900 --> 01:14:14,300
equations.

1305
01:14:14,300 --> 01:14:17,400
The fact that they call that old solve doesn't fill me with bristling

1306
01:14:17,400 --> 01:14:21,100
confidence, but maybe I'm missing something.

1307
01:14:22,200 --> 01:14:23,900
Let's take a look at what else we got here.

1308
01:14:39,900 --> 01:14:40,600
So, let's see.

1309
01:14:42,900 --> 01:14:44,300
Here's the definition of it.

1310
01:14:51,400 --> 01:14:53,900
So it looks like this is all we would really need.

1311
01:14:58,100 --> 01:14:59,300
So I'll give it a shot.

1312
01:15:01,600 --> 01:15:03,800
I mean, according to that documentation there, right?

1313
01:15:04,100 --> 01:15:07,200
I can just put as many equations in here as I want and I can put in

1314
01:15:07,200 --> 01:15:09,800
the variables that I'm trying to solve for here and it should do.

1315
01:15:09,800 --> 01:15:13,900
So now it doesn't sound like it's got a particularly good solver

1316
01:15:13,900 --> 01:15:19,300
engine, so there's that but you know, we'll give it a shot, right?

1317
01:15:20,900 --> 01:15:21,600
Let's try it.

1318
01:15:21,800 --> 01:15:23,200
So, let's say, CX X.

1319
01:15:23,200 --> 01:15:23,800
Ax.

1320
01:15:24,500 --> 01:15:31,500
+, Cy x, a y, + CZ, x, a z, equals 0.

1321
01:15:34,700 --> 01:15:35,400
That's equation.

1322
01:15:35,400 --> 01:15:39,800
One equation, two is just the same thing but with B

1323
01:15:42,600 --> 01:15:43,300
And then equation.

1324
01:15:43,300 --> 01:15:50,600
3 is this god-awful monstrosity here, namely CX X CX.

1325
01:15:51,800 --> 01:15:56,900
+ Cy X Cy + z z times.

1326
01:15:56,900 --> 01:16:03,200
Z z is equal to ax times ax plus.

1327
01:16:04,100 --> 01:16:12,100
Ay, y x, a y, +, AZ X, AZ that.

1328
01:16:12,300 --> 01:16:18,900
Plies be x times PX, + py x b--, y, plus Z times bz.

1329
01:16:20,000 --> 01:16:23,200
And then finally, we've got sine Theta, which I'll just call St.

1330
01:16:23,200 --> 01:16:27,100
Because in this case, we don't need it to know that what sine Theta

1331
01:16:27,100 --> 01:16:27,300
is.

1332
01:16:27,300 --> 01:16:31,100
It's just a term between the, you know, in this case.

1333
01:16:31,300 --> 01:16:32,100
Oh well, you know what?

1334
01:16:32,100 --> 01:16:36,200
I guess that's not true in this case sine Theta, that is a bit of an

1335
01:16:36,200 --> 01:16:39,600
issue because Theta is the angle between the two vectors.

1336
01:16:39,900 --> 01:16:42,100
So actually, I guess that's a tougher.

1337
01:16:42,200 --> 01:16:45,300
Thing that I had been anticipating, because in this case, we don't

1338
01:16:45,300 --> 01:16:52,000
really have a way to specify what that actually means in terms of the

1339
01:16:52,900 --> 01:16:54,700
variables involved.

1340
01:16:56,600 --> 01:16:57,900
So, that is tougher.

1341
01:17:00,200 --> 01:17:04,100
I wonder if I can do something simpler first because if you think

1342
01:17:04,100 --> 01:17:08,900
about what this means, right, I have these two things and in this

1343
01:17:08,900 --> 01:17:13,700
case, we're talking about this part between them right here is

1344
01:17:13,700 --> 01:17:16,500
difficult for me to tell it how to construct.

1345
01:17:16,900 --> 01:17:19,300
Its this equation is just far too complicated.

1346
01:17:19,300 --> 01:17:21,800
These two are really easy, right?

1347
01:17:23,100 --> 01:17:26,200
These to involve nothing but the scalar terms without any real

1348
01:17:26,400 --> 01:17:29,800
understanding of the relationship between them but

1349
01:17:30,000 --> 01:17:32,900
This one is much tougher and the reason that it's much tougher is

1350
01:17:32,900 --> 01:17:36,100
because of this term right here, if we could get rid of this term

1351
01:17:36,100 --> 01:17:39,900
entirely, then we would be in good shape because then it would still

1352
01:17:39,900 --> 01:17:41,500
be very clear what was going on.

1353
01:17:42,100 --> 01:17:46,000
But because this term is there, we have this issue of not really

1354
01:17:46,000 --> 01:17:50,700
having any way of defining what Theta is because the angle between the

1355
01:17:50,700 --> 01:17:51,300
two vectors.

1356
01:17:51,300 --> 01:17:54,700
Well, how do you define the angle between the two vectors, right?

1357
01:17:56,200 --> 01:17:59,700
How do you compute that angle, right?

1358
01:18:00,600 --> 01:18:04,500
So, when we could do that is by turning to the dot product, right?

1359
01:18:05,500 --> 01:18:10,800
We could say something like oh you know in this case we know what the

1360
01:18:10,800 --> 01:18:13,900
angle of the thing is because we could take the dot product of these

1361
01:18:13,900 --> 01:18:19,400
two vectors together and use a b cosine Theta.

1362
01:18:23,100 --> 01:18:25,400
Which we could compute, right?

1363
01:18:26,400 --> 01:18:28,000
Since it has both of these terms.

1364
01:18:28,400 --> 01:18:33,300
The only part that we don't know again, is that, that final part, I'm

1365
01:18:33,300 --> 01:18:36,400
trying to think if there's an interesting way we could go about

1366
01:18:36,900 --> 01:18:40,000
producing the transform between these two because it's got both of

1367
01:18:40,000 --> 01:18:41,100
these terms in it.

1368
01:18:41,100 --> 01:18:42,800
So the A and the B, stay the same.

1369
01:18:43,000 --> 01:18:44,900
And then the cosine is the only part that's different.

1370
01:18:45,000 --> 01:18:47,600
I can't think of any real way of doing that off the top of my head

1371
01:18:47,600 --> 01:18:49,400
though, again, seems pretty complicated.

1372
01:19:06,300 --> 01:19:09,700
So, yeah, I can't, I honestly can't say, I can think of a good way to

1373
01:19:09,700 --> 01:19:14,100
do that cleanly, since we know that these two are our the case.

1374
01:19:14,500 --> 01:19:19,500
Right since I knew that these are the conditions that have to hold

1375
01:19:19,500 --> 01:19:23,100
true in order to solve for this Vector.

1376
01:19:23,300 --> 01:19:27,700
Really, what, you know, I could say here is that, maybe Let's ignore

1377
01:19:27,700 --> 01:19:28,700
this part for now.

1378
01:19:28,700 --> 01:19:32,100
Right, let's just see if we can get it to solve for something that

1379
01:19:32,100 --> 01:19:35,500
goes in the correct direction, which is what this is about this.

1380
01:19:35,600 --> 01:19:36,800
About the correct direction.

1381
01:19:36,900 --> 01:19:40,200
This right here is about the correct length, right?

1382
01:19:41,100 --> 01:19:44,500
So, in order to sort of start with, I wonder if we can get something

1383
01:19:44,500 --> 01:19:47,300
that figures out how to solve for something that goes in the correct

1384
01:19:47,300 --> 01:19:47,800
direction.

1385
01:19:48,000 --> 01:19:50,600
And I had to think about how I would specify that.

1386
01:19:50,700 --> 01:19:54,500
So in terms of the length here, I guess what I'll just say is let's

1387
01:19:54,500 --> 01:19:57,000
pretend, there's some additional.

1388
01:19:58,300 --> 01:20:01,600
Let's like I said, let's just pretend we know what that value is and

1389
01:20:01,600 --> 01:20:02,600
we prescribe it.

1390
01:20:02,900 --> 01:20:04,800
So I think I'll stick with what I said here.

1391
01:20:05,300 --> 01:20:05,400
This

1392
01:20:05,500 --> 01:20:09,500
it won't be exactly what we want, but at least it's a start and we

1393
01:20:09,500 --> 01:20:12,100
don't really know if this can solve it anyway, right?

1394
01:20:12,100 --> 01:20:14,900
We don't know if this thing actually has a reasonable enough solver to

1395
01:20:14,900 --> 01:20:17,500
actually do this equation, but we'll try

1396
01:20:20,100 --> 01:20:20,800
It's thinking.

1397
01:20:29,000 --> 01:20:29,500
Well.

1398
01:20:38,300 --> 01:20:38,900
Hmm.

1399
01:20:43,100 --> 01:20:48,000
I can't say I know what that is supposed to be, did I input the

1400
01:20:48,000 --> 01:20:49,600
variables wrong or something?

1401
01:21:21,000 --> 01:21:23,700
The list of results returned at each result is a list containing the

1402
01:21:23,700 --> 01:21:25,700
values of the variables in vilest.

1403
01:21:26,000 --> 01:21:28,100
Again at most a single solution is returned.

1404
01:21:30,200 --> 01:21:33,300
Task of solving an equation is simply delegated to such that equation.

1405
01:21:33,300 --> 01:21:34,600
We solve recursively first.

1406
01:21:34,600 --> 01:21:37,500
See because this is not, it doesn't make any sense.

1407
01:21:38,100 --> 01:21:39,100
C y, equals c.

1408
01:21:39,100 --> 01:21:40,800
Why is hardly a solution?

1409
01:21:41,000 --> 01:21:43,300
Because we know that's true all the time.

1410
01:21:52,500 --> 01:21:54,900
this starts to look a little bit more correct here, but

1411
01:21:56,500 --> 01:21:57,800
It's still a bit odd.

1412
01:21:58,400 --> 01:22:02,100
I'm not filled with confidence here so I don't know about this.

1413
01:22:02,400 --> 01:22:05,100
I don't know about this gentleman, maybe this is why you need the

1414
01:22:05,100 --> 01:22:07,300
three point eight gigabyte version.

1415
01:22:12,900 --> 01:22:17,100
Well, we tried let's at least just say that we tried.

1416
01:22:22,100 --> 01:22:23,900
Let me see if there's anybody else we should try.

1417
01:22:24,000 --> 01:22:27,400
That's not quite so large.

1418
01:22:58,500 --> 01:23:02,300
I have no idea what's going on right now, sourceforge, ladies and

1419
01:23:02,300 --> 01:23:02,900
gentlemen.

1420
01:23:03,500 --> 01:23:07,100
We're probably getting all kinds of viruses right now.

1421
01:23:08,200 --> 01:23:09,600
Delivered to our system.

1422
01:23:13,100 --> 01:23:13,600
Hello.

1423
01:23:16,000 --> 01:23:16,400
Okay.

1424
01:23:19,400 --> 01:23:21,800
So I don't really know, we'll try one more to see cuz we should be

1425
01:23:21,800 --> 01:23:23,900
able to get just some simple solves going here.

1426
01:23:24,000 --> 01:23:26,000
We weren't even really trying to solve the whole thing there.

1427
01:23:26,000 --> 01:23:29,900
I was just trying to ask it for a basic preliminary solve that I feel

1428
01:23:29,900 --> 01:23:31,500
like should have produced something.

1429
01:23:31,700 --> 01:23:36,000
Maybe I'm wrong about that, but we'll see, I certainly think it would

1430
01:23:36,000 --> 01:23:40,400
have in Mathematica anyway, using the power of Stephen Wolfram.

1431
01:23:43,700 --> 01:23:47,100
Who personally solves all the equations for you in Mathematica.

1432
01:23:50,400 --> 01:23:51,200
Let's see here.

1433
01:23:52,800 --> 01:23:53,300
There we go.

1434
01:23:54,500 --> 01:23:55,000
Okay.

1435
01:23:57,800 --> 01:23:59,800
Let's get our, let's go ahead and get our sourceforge.

1436
01:24:00,000 --> 01:24:01,300
Iris is installed.

1437
01:24:03,100 --> 01:24:04,300
Just some good, you know.

1438
01:24:04,600 --> 01:24:05,500
Excellent virus.

1439
01:24:07,500 --> 01:24:08,000
Nice.

1440
01:24:08,600 --> 01:24:09,700
Tasty viruses.

1441
01:24:10,800 --> 01:24:13,700
Viruses within viruses installed on our viruses.

1442
01:24:21,900 --> 01:24:22,300
Good luck.

1443
01:24:22,300 --> 01:24:23,800
Getting some python in here.

1444
01:24:25,500 --> 01:24:27,400
For our previous one was in Java.

1445
01:24:27,600 --> 01:24:29,800
It looked like or JavaScript.

1446
01:24:29,800 --> 01:24:33,200
I don't remember maybe JavaScript this one's in Python.

1447
01:24:34,700 --> 01:24:37,800
So just having some different bunch of different languages.

1448
01:24:39,100 --> 01:24:40,500
Working on our math here.

1449
01:24:56,200 --> 01:24:58,600
I don't know if this is actually something that's meant to be end-user

1450
01:24:58,600 --> 01:24:59,700
facing, but we'll see.

1451
01:25:01,400 --> 01:25:02,200
Give it a shot.

1452
01:25:04,600 --> 01:25:05,400
Here's gooey.

1453
01:25:12,500 --> 01:25:13,200
All right.

1454
01:25:14,600 --> 01:25:15,500
So let's take a look.

1455
01:25:15,500 --> 01:25:18,000
Here, here is a command.

1456
01:25:19,500 --> 01:25:22,000
Let's let's see if we can do the same thing we did before.

1457
01:25:24,700 --> 01:25:28,100
Argument cannot be an atom or subscripted memoizing function.

1458
01:25:30,400 --> 01:25:33,900
Alright, well let's get some help first.

1459
01:25:39,400 --> 01:25:41,800
Let's see if we can solve because all we're again, all we're trying to

1460
01:25:41,800 --> 01:25:43,700
do is solve an equation here.

1461
01:25:55,400 --> 01:25:57,400
We don't need differential equations solve.

1462
01:25:58,700 --> 01:26:00,200
We just need a basic silver.

1463
01:26:05,800 --> 01:26:06,800
Maybe that's what we need.

1464
01:26:06,800 --> 01:26:11,200
Let's just see what regular solve does solves the algebraic equation.

1465
01:26:11,600 --> 01:26:13,700
Expression of variable X and Returns the solutions.

1466
01:26:13,700 --> 01:26:15,500
Equations in X if pressure is not equation.

1467
01:26:15,500 --> 01:26:19,300
Equation is for certain is assuming its place so it looks like this

1468
01:26:19,300 --> 01:26:21,800
can take a series right?

1469
01:26:24,600 --> 01:26:26,400
and so, if that's the case,

1470
01:26:31,000 --> 01:26:33,800
It solves it simultaneously on a pond of equations.

1471
01:26:33,800 --> 01:26:36,200
By calling wind solve or excess returns, a list of solutions.

1472
01:26:36,700 --> 01:26:39,300
This case didn't solve, this addition to this argument.

1473
01:26:39,300 --> 01:26:41,900
So that's looks like what we would want their.

1474
01:26:42,900 --> 01:26:45,300
So maybe I can try that.

1475
01:26:45,300 --> 01:26:50,700
Now, the format of the equations, it would be nice if I could get an

1476
01:26:50,700 --> 01:26:51,800
example of this.

1477
01:26:52,800 --> 01:26:56,500
So let's let's just see if just so I get the syntax correct, that

1478
01:26:56,500 --> 01:26:57,100
makes sense.

1479
01:27:00,000 --> 01:27:06,200
I just wanted to see if I could sort of get an example of solving.

1480
01:27:07,900 --> 01:27:10,200
See if I can can I search inside here?

1481
01:27:11,300 --> 01:27:12,600
Not really, unfortunately.

1482
01:27:17,900 --> 01:27:21,600
Back substitute Dimension solve Global solve.

1483
01:27:23,200 --> 01:27:24,000
Let's see.

1484
01:27:24,600 --> 01:27:25,900
So here is an example.

1485
01:27:26,900 --> 01:27:29,600
There's there's an example of exactly what we need.

1486
01:27:29,800 --> 01:27:32,400
Global sulfur's are trying to Susan for this file in sulfide.

1487
01:27:32,400 --> 01:27:35,500
Okay, now we might need some tweaking here but we'll try.

1488
01:27:37,200 --> 01:27:39,800
So here is a solve, right?

1489
01:27:40,400 --> 01:27:41,800
Let's go ahead and see if it works.

1490
01:27:42,200 --> 01:27:46,900
So it produced an output where it's solved for these for these guys.

1491
01:27:47,200 --> 01:27:51,000
So in theory, I should be able to sort of put what we wanted to put in

1492
01:27:51,000 --> 01:27:51,400
here.

1493
01:27:53,300 --> 01:27:54,500
And see if it works.

1494
01:27:57,000 --> 01:28:00,100
Right, and so let's go ahead and try that.

1495
01:28:03,000 --> 01:28:04,200
And we'll just give this one a shot.

1496
01:28:04,200 --> 01:28:06,400
Maybe it'll be maybe we'll have better luck this time.

1497
01:28:07,200 --> 01:28:13,300
So in this case we want c x ax plus Cy, a y plus z z a z,

1498
01:28:15,200 --> 01:28:21,100
Right here, I want c x BX plus C.

1499
01:28:21,100 --> 01:28:25,300
YB y naught plus c z BZ.

1500
01:28:28,800 --> 01:28:29,700
Equal 0.

1501
01:28:31,000 --> 01:28:31,700
Zero.

1502
01:28:32,500 --> 01:28:36,100
And then finally got the last equation here.

1503
01:28:37,900 --> 01:28:44,900
Which is the one that's not really correct that c XC x + Cy, Cy, c zc

1504
01:28:44,900 --> 01:28:50,800
z and that equals ax ax plus BX Loops.

1505
01:28:50,800 --> 01:29:00,000
+ 8, y KY, plus a z, a z times BX BX plus Q by B.

1506
01:29:00,000 --> 01:29:00,500
Why?

1507
01:29:04,200 --> 01:29:04,800
Plus.

1508
01:29:07,100 --> 01:29:09,700
Easy peasy, Bzz Bzz.

1509
01:29:10,600 --> 01:29:16,200
And again, I'm just numbing in that this term sine Theta, which is not

1510
01:29:16,200 --> 01:29:17,600
really correct, right?

1511
01:29:18,200 --> 01:29:20,000
And I want to solve it for those three variables.

1512
01:29:20,000 --> 01:29:23,700
I'm going to hit shift enter and see if it can do anything here.

1513
01:29:28,500 --> 01:29:30,000
The answer appears to be no.

1514
01:29:33,200 --> 01:29:33,800
I guess.

1515
01:29:44,500 --> 01:29:46,900
It looks like it's telling me that it can't find any solutions.

1516
01:29:46,900 --> 01:29:49,600
I'm not really sure if that's what it's saying to me.

1517
01:29:49,600 --> 01:29:50,500
Italy honest with you.

1518
01:30:05,800 --> 01:30:07,500
I wonder if I change this term.

1519
01:30:09,300 --> 01:30:12,600
What if I just said that the sign between them always had to be one or

1520
01:30:12,600 --> 01:30:13,200
something?

1521
01:30:13,800 --> 01:30:14,900
Could then it do it.

1522
01:30:16,500 --> 01:30:17,700
Holy cow.

1523
01:30:20,100 --> 01:30:24,200
Well, can't say the layout looks particularly good on that one, but at

1524
01:30:24,200 --> 01:30:27,200
least it sort of did something.

1525
01:30:36,000 --> 01:30:40,300
Okay, well, that has been our foray into computer algebra systems.

1526
01:30:40,700 --> 01:30:42,200
I guess what I would say is

1527
01:30:44,300 --> 01:30:45,200
A little rough.

1528
01:30:48,600 --> 01:30:50,000
This is kind of experience.

1529
01:30:50,000 --> 01:30:54,200
I often have with computer algebra systems, which is to say that the

1530
01:30:54,200 --> 01:30:56,800
notion that they're kind of these things that maybe you could have to

1531
01:30:56,800 --> 01:31:00,200
just help you out with stuff, is a little bit naive.

1532
01:31:00,900 --> 01:31:04,100
You kind of have to actually take time to learn to use them really

1533
01:31:04,100 --> 01:31:08,400
well like possibly those ones could have been used to help us here but

1534
01:31:08,400 --> 01:31:10,900
it's pretty clear that like the idea that you could just enter some

1535
01:31:10,900 --> 01:31:15,100
math into them and say hey could you give us some insight into what's

1536
01:31:15,100 --> 01:31:15,600
going on here?

1537
01:31:15,600 --> 01:31:18,100
It's kind of not true you kind of just get

1538
01:31:18,300 --> 01:31:18,800
Spammed.

1539
01:31:20,200 --> 01:31:22,600
And either you get nothing out of them, are you get craziness out of

1540
01:31:22,600 --> 01:31:23,000
them?

1541
01:31:23,800 --> 01:31:25,500
So that's not really super useful.

1542
01:31:26,100 --> 01:31:29,200
So, maybe I will abandon this for now, I was just kind of curious if

1543
01:31:29,200 --> 01:31:29,900
we could do that.

1544
01:31:30,000 --> 01:31:33,000
I was kind of hoping that maybe we could do something along those

1545
01:31:33,000 --> 01:31:37,800
lines, but it looks like even even if simplified version, where, I'm

1546
01:31:37,800 --> 01:31:40,800
not even asking it to do, sort of the full solve for the cross

1547
01:31:40,800 --> 01:31:45,700
product, is maybe pushing the limit or maybe, you know, maybe I just

1548
01:31:45,700 --> 01:31:47,600
missed under misunderstanding, what's happening there?

1549
01:31:48,000 --> 01:31:48,900
That could also be

1550
01:31:50,000 --> 01:31:53,200
We could also try the 3.6 GB one at some point, but I don't want to

1551
01:31:53,200 --> 01:31:55,400
try that right now because we have to wait 30 minutes for it to

1552
01:31:55,400 --> 01:31:56,100
download.

1553
01:31:57,100 --> 01:32:01,000
And so yeah, that that's probably not the best use of our time.

1554
01:32:01,300 --> 01:32:04,000
Anyway, we tried, we failed.

1555
01:32:04,100 --> 01:32:07,200
That's just how that goes, sometimes not a lot, you can do about that.

1556
01:32:08,700 --> 01:32:12,700
All right, so I guess what I'll do here is let's just start with the

1557
01:32:12,700 --> 01:32:16,600
actual textbook definition of the of the cross product I'll show it

1558
01:32:16,600 --> 01:32:20,500
working and then I will maybe try to think tonight and maybe people

1559
01:32:20,500 --> 01:32:23,000
can post what the best way is for us to derive.

1560
01:32:23,000 --> 01:32:29,100
This I could look up some good derivations of it and just see what the

1561
01:32:29,100 --> 01:32:30,200
simplest one is.

1562
01:32:30,600 --> 01:32:34,300
Because there's probably something that's a lot simpler than trying to

1563
01:32:34,300 --> 01:32:34,500
go.

1564
01:32:34,500 --> 01:32:38,400
This route that we could do to sort of get into it and maybe that's

1565
01:32:38,500 --> 01:32:40,800
Easiest thing to do is since sort of the Brute Force approach.

1566
01:32:40,800 --> 01:32:45,200
I was just curious about took too much time in is not going to pan

1567
01:32:45,200 --> 01:32:45,500
out.

1568
01:32:45,900 --> 01:32:47,900
Alright, so let's skip that for now.

1569
01:32:51,400 --> 01:32:55,000
And we will simply show you here what the actual definition of the

1570
01:32:55,000 --> 01:32:58,400
cross product is and you can see here there's that diagram, that's

1571
01:32:58,400 --> 01:32:59,800
very much like what?

1572
01:33:00,000 --> 01:33:02,300
Wrote and you can kind of see here.

1573
01:33:02,700 --> 01:33:05,800
The actual definition of the dot product is actually very simple.

1574
01:33:05,800 --> 01:33:09,500
This is what I was hoping we'd be able to solve for and you can see

1575
01:33:09,500 --> 01:33:11,400
here, it looks like they've got a reasonable derivation.

1576
01:33:11,400 --> 01:33:12,300
That's not too bad.

1577
01:33:12,300 --> 01:33:15,600
I mean, it's a little lengthy in terms of this looks like what they're

1578
01:33:15,600 --> 01:33:18,700
doing, is they Define a few basis vectors and what the rules for the

1579
01:33:18,700 --> 01:33:23,200
basis vectors are and then they can produce the results.

1580
01:33:23,200 --> 01:33:25,700
They're so maybe we could work that one through tomorrow.

1581
01:33:27,700 --> 01:33:29,400
And and show how that works.

1582
01:33:29,800 --> 01:33:32,800
Here's the part I was talking about it falling out of the determinant

1583
01:33:32,800 --> 01:33:33,300
as well.

1584
01:33:33,900 --> 01:33:36,800
But anyway, so maybe work through that tomorrow and that can be the

1585
01:33:36,800 --> 01:33:39,700
way we'll drive it instead rather than trying to derive it from the

1586
01:33:39,800 --> 01:33:46,400
from the, from the properties that we wanted, we can sort of, you

1587
01:33:46,400 --> 01:33:51,200
know, I guess you could sort of still say that this is driving it that

1588
01:33:51,200 --> 01:33:51,400
way.

1589
01:33:51,400 --> 01:33:51,900
But

1590
01:33:53,400 --> 01:33:56,500
It's definitely sort of showing a level of understanding of it that

1591
01:33:56,500 --> 01:34:00,000
you'd probably only have after you already knew what it was.

1592
01:34:00,100 --> 01:34:03,100
So it's a little less appealing to me than a way where we literally

1593
01:34:03,100 --> 01:34:05,800
just State what the properties are and then out pops the equation.

1594
01:34:05,900 --> 01:34:10,200
So I was kind of hoping we could get to it from there but you know

1595
01:34:10,200 --> 01:34:13,400
maybe that's just too complicated and requires too much.

1596
01:34:15,100 --> 01:34:16,200
Working it through, I don't know.

1597
01:34:16,900 --> 01:34:20,700
But anyway, this is the actual standard form of the dot product as you

1598
01:34:21,900 --> 01:34:25,100
when you actually get through and figure out what it actually is.

1599
01:34:25,500 --> 01:34:27,700
And you can see here, it's again, 3 element Vector.

1600
01:34:27,700 --> 01:34:32,100
It only really works in three dimensions and you need to go into those

1601
01:34:32,100 --> 01:34:33,600
other sorts of branches of math.

1602
01:34:33,600 --> 01:34:36,200
That I was talking about to start working on ones that work in more

1603
01:34:36,200 --> 01:34:39,900
dimensions and you can see here, it's actually got a relatively simple

1604
01:34:39,900 --> 01:34:40,400
form.

1605
01:34:41,000 --> 01:34:44,800
It's basically, you know, these 12s and 3 Sr X y&z, right?

1606
01:34:44,900 --> 01:34:50,200
Our case, and you can see here that it's y, z minus z y, right?

1607
01:34:51,100 --> 01:34:53,700
So, whatever your first, this is a univee, it's kind of hard to see

1608
01:34:53,700 --> 01:34:55,500
here because you, and these look very similar.

1609
01:34:56,500 --> 01:34:59,000
But, you know, if this were an A, and A B, let's say right.

1610
01:34:59,100 --> 01:35:01,900
It's y z, minus z y, right?

1611
01:35:03,600 --> 01:35:06,200
Then, it's then it's z x.

1612
01:35:06,200 --> 01:35:12,400
Minus x z and then it's X Y, minus y x, right?

1613
01:35:12,800 --> 01:35:14,800
So at the end of the day, even

1614
01:35:14,900 --> 01:35:17,700
though, like I said, I'm not sure there's a really straightforward

1615
01:35:17,700 --> 01:35:18,700
derivation for it.

1616
01:35:18,700 --> 01:35:22,200
Even this one is kind of assuming that you already decided, you've got

1617
01:35:22,200 --> 01:35:24,300
these basis vectors and here's the rules for them.

1618
01:35:24,600 --> 01:35:27,700
So, hey, you know, you're kind of already kind of already.

1619
01:35:28,100 --> 01:35:33,000
Have figured out how it works, in a sense, assuming that you actually

1620
01:35:33,000 --> 01:35:35,600
do work at three, you end up with something that's very, very simple

1621
01:35:35,800 --> 01:35:38,300
and very easy to code.

1622
01:35:39,200 --> 01:35:42,600
It just may not be obvious exactly how you get there, right?

1623
01:35:44,200 --> 01:35:47,100
But at the end of the day, like I said, it's not owner, it's only

1624
01:35:47,100 --> 01:35:50,900
onerous to derive in that sense, it's not ownerís to actually use.

1625
01:35:50,900 --> 01:35:55,200
And so if we go to our inner product here, where we've got inner 3,

1626
01:35:56,900 --> 01:35:59,800
inner V 3, V 3, if we want to do,

1627
01:36:00,000 --> 01:36:01,900
Adopt product version of one of those.

1628
01:36:02,300 --> 01:36:04,100
I'm sorry I cross product version of one of those.

1629
01:36:04,300 --> 01:36:08,500
It's very light on the computation it's not hard at all.

1630
01:36:09,200 --> 01:36:11,700
So the result again is just going to be equal.

1631
01:36:12,200 --> 01:36:14,700
In this case, write it out this way.

1632
01:36:20,000 --> 01:36:23,700
To some very straightforward terms is it as simple as the dot product?

1633
01:36:23,700 --> 01:36:26,200
No, but it's, you know, it's pretty close.

1634
01:36:26,600 --> 01:36:32,800
So in this case, I'm just going to end up with an AZ b, y and, and I'm

1635
01:36:32,800 --> 01:36:37,700
going to subtract this from an A Y bz, like, so.

1636
01:36:38,400 --> 01:36:46,800
And then I've got an ax b z, minus AZ, b x.

1637
01:36:46,800 --> 01:36:49,000
And then finally, I've got an A why?

1638
01:36:49,800 --> 01:36:50,700
BX.

1639
01:36:54,300 --> 01:37:00,900
- A a x b y and let me just double-check that I've got this terms.

1640
01:37:00,900 --> 01:37:01,200
Correct.

1641
01:37:01,200 --> 01:37:05,900
Their said so it's 231 right 231.

1642
01:37:05,900 --> 01:37:06,400
Okay.

1643
01:37:06,400 --> 01:37:09,200
So no, not quite right 231.

1644
01:37:10,500 --> 01:37:11,800
I had these guys backwards.

1645
01:37:14,200 --> 01:37:14,700
There you go.

1646
01:37:22,300 --> 01:37:22,700
Yeah.

1647
01:37:24,300 --> 01:37:24,800
All right.

1648
01:37:26,100 --> 01:37:28,600
So yes, we have a y ZX Z, XY.

1649
01:37:28,600 --> 01:37:31,700
And again, these always go in the same order as well.

1650
01:37:31,700 --> 01:37:34,400
You can kind of see here that it's always XYZ.

1651
01:37:34,400 --> 01:37:35,600
It's just rolled around.

1652
01:37:35,600 --> 01:37:42,700
So it's x y, z, x, y, z, x y, z, x y z, right?

1653
01:37:44,100 --> 01:37:47,200
And again, that's just, this is just has them numbered, instead of,

1654
01:37:48,200 --> 01:37:49,500
instead of, as the actual values.

1655
01:37:49,700 --> 01:37:50,800
So it's one, two, three.

1656
01:37:50,900 --> 01:37:51,700
One, two, three,

1657
01:37:52,200 --> 01:37:54,800
One, two, three, one, two, three, and they just swap from either side.

1658
01:37:54,800 --> 01:37:57,200
So, it's y, ZZ y ZX ramp.

1659
01:37:58,500 --> 01:38:01,000
And again, it's very similar to The Dot product.

1660
01:38:01,000 --> 01:38:05,900
In the sense that the actual reason why you want, it is very difficult

1661
01:38:05,900 --> 01:38:09,200
to understand from the final form, right?

1662
01:38:09,700 --> 01:38:14,100
And so, these equations that I wrote, originally are the ones.

1663
01:38:14,100 --> 01:38:17,200
These are the ones that actually tell you why you care about it,

1664
01:38:17,200 --> 01:38:17,700
right?

1665
01:38:18,700 --> 01:38:21,900
Like this stuff right here is actually the important part.

1666
01:38:23,700 --> 01:38:27,800
But the actual implementation of it doesn't really show any of that.

1667
01:38:28,200 --> 01:38:31,600
So it's hard when you start, if you just were to look at this or same

1668
01:38:31,600 --> 01:38:33,300
with the dot product, we were just look at this.

1669
01:38:33,400 --> 01:38:36,800
You'd be like, I don't know why I care about basically squaring the

1670
01:38:36,800 --> 01:38:41,900
values, you know, are doing x times, x, y times, y, z times Z, I don't

1671
01:38:41,900 --> 01:38:42,900
know what that gives me.

1672
01:38:42,900 --> 01:38:44,300
What you know, why do I care about that?

1673
01:38:44,300 --> 01:38:47,300
Similarly, you'll care in your like I don't understand why this would

1674
01:38:47,300 --> 01:38:48,300
actually matter.

1675
01:38:48,700 --> 01:38:51,500
But the reason that it matters is because what it computes

1676
01:38:52,000 --> 01:38:56,000
is again something that's perpendicular to both A and B, both the

1677
01:38:56,000 --> 01:38:59,800
input vectors and something, which has a length that's proportional to

1678
01:39:00,000 --> 01:39:01,900
A b sine Theta, right?

1679
01:39:02,900 --> 01:39:06,300
And so, any one of these properties may be valuable to you and in the

1680
01:39:06,300 --> 01:39:10,600
case just in the interest of finishing up quickly in the interest of

1681
01:39:10,600 --> 01:39:12,000
doing what we want to do here.

1682
01:39:12,000 --> 01:39:16,100
Again, the reason we care is because we want to be able to produce a

1683
01:39:16,100 --> 01:39:17,100
perpendicular.

1684
01:39:17,400 --> 01:39:21,500
So, if we have this cross product available to us, what we could do,

1685
01:39:21,500 --> 01:39:25,400
in this case is produce a perpendicular, that does exactly what we

1686
01:39:25,400 --> 01:39:25,700
want.

1687
01:39:25,700 --> 01:39:28,800
Now, if you look at it, you might go well, how do, how does the dot

1688
01:39:28,800 --> 01:39:29,200
product mean?

1689
01:39:29,200 --> 01:39:29,800
How does the cross?

1690
01:39:30,000 --> 01:39:30,600
Our to help me.

1691
01:39:31,000 --> 01:39:34,500
What I said is I wanted a perpendicular to this Vector, but the cross

1692
01:39:34,500 --> 01:39:37,000
product requires two vectors and I've only got one.

1693
01:39:37,000 --> 01:39:40,800
I've only got the directional Vector, that goes from the starting

1694
01:39:40,800 --> 01:39:43,000
point to the ending point, right?

1695
01:39:43,700 --> 01:39:45,400
How do I end up producing this other one?

1696
01:39:45,400 --> 01:39:48,500
Well, if you think about it, really, this is a three-dimensional

1697
01:39:48,500 --> 01:39:49,200
construction.

1698
01:39:49,400 --> 01:39:50,700
I've got this line.

1699
01:39:51,700 --> 01:39:55,600
In 3D and I'm viewing it from somewhere, right?

1700
01:39:55,600 --> 01:39:59,900
And I want this to line to be flat onto the screen.

1701
01:40:00,500 --> 01:40:04,300
So I actually know another Vector which is the vector coming out of

1702
01:40:04,300 --> 01:40:05,400
the screen at me.

1703
01:40:05,500 --> 01:40:07,400
That's the cameras Z Vector.

1704
01:40:08,400 --> 01:40:15,300
So, if I was to cross the cameras e Vector with right that other

1705
01:40:15,300 --> 01:40:15,600
Vector.

1706
01:40:15,600 --> 01:40:19,100
That to Vector here, I would get this Vector coming up out

1707
01:40:20,000 --> 01:40:20,500
Right?

1708
01:40:21,000 --> 01:40:22,100
So the cameras e.

1709
01:40:23,700 --> 01:40:26,500
Cross the line vector.

1710
01:40:27,700 --> 01:40:31,500
That is going to give me that perpendicular value that I want, right?

1711
01:40:31,700 --> 01:40:33,300
Because fundamentally this

1712
01:40:34,300 --> 01:40:35,500
Right here is the line.

1713
01:40:36,400 --> 01:40:39,500
Here's the Z this cross.

1714
01:40:39,500 --> 01:40:41,900
This is going to give me something that's perpendicular to both of

1715
01:40:41,900 --> 01:40:42,300
them.

1716
01:40:42,400 --> 01:40:45,200
Which is exactly the value that I want here.

1717
01:40:45,300 --> 01:40:45,800
Right?

1718
01:40:46,300 --> 01:40:47,500
Exactly that vector.

1719
01:40:49,800 --> 01:40:51,900
So the cross product is actually perfect for this.

1720
01:40:52,100 --> 01:40:54,700
The only problem is its length is not perfect for this.

1721
01:40:54,900 --> 01:40:57,700
We know that the length will be proportional to the length of these

1722
01:40:57,700 --> 01:40:58,300
two vectors.

1723
01:40:58,400 --> 01:40:59,600
The line Vector.

1724
01:40:59,600 --> 01:41:02,400
If I just used this whole Vector here is whatever the length of the

1725
01:41:02,400 --> 01:41:06,100
line is and the cameras e Vector is a unit length, so I'm going to get

1726
01:41:06,100 --> 01:41:09,000
something that's as tall as the line, right?

1727
01:41:09,000 --> 01:41:11,100
I'm going to get something that would draw a square as tall as the

1728
01:41:11,100 --> 01:41:11,600
line.

1729
01:41:11,900 --> 01:41:16,400
But that's okay, because I can just normalize that Vector down to unit

1730
01:41:16,400 --> 01:41:18,500
length by dividing by its length, right?

1731
01:41:18,500 --> 01:41:19,000
I have the

1732
01:41:19,400 --> 01:41:20,200
Normalize the vector.

1733
01:41:20,400 --> 01:41:23,200
So what I can do is just start with the vector there, normalize it

1734
01:41:23,200 --> 01:41:27,400
down and then have the vector that I actually need to be able to draw.

1735
01:41:28,500 --> 01:41:30,400
My line segment, right?

1736
01:41:31,500 --> 01:41:35,200
So in this case, what I want to do is I want to form that perp, right?

1737
01:41:35,500 --> 01:41:40,000
And so this is going to be basically my, I guess my, I don't know, I

1738
01:41:40,000 --> 01:41:43,600
could say the vertical or lime purp like this.

1739
01:41:45,200 --> 01:41:47,600
and this case, what I want to do is they want to take the cross

1740
01:41:47,600 --> 01:41:53,000
product again, of that sort of the line Vector itself, which in this

1741
01:41:53,000 --> 01:41:58,100
case is going to be, you know, the going from the front point to the

1742
01:41:58,100 --> 01:41:59,800
two point, and I want to cross

1743
01:42:00,400 --> 01:42:02,700
With the cameras Z, right?

1744
01:42:02,700 --> 01:42:05,700
So, if I go here and I say, you can look at the

1745
01:42:07,500 --> 01:42:07,900
The camera.

1746
01:42:07,900 --> 01:42:11,400
Now since this is for debugging, what I would assume we would want to

1747
01:42:11,400 --> 01:42:14,600
do here is in the, in the render setup.

1748
01:42:14,900 --> 01:42:15,400
Right?

1749
01:42:15,800 --> 01:42:20,600
When we're doing here, we're storing the transform for both the

1750
01:42:20,600 --> 01:42:21,300
debugging game.

1751
01:42:21,300 --> 01:42:24,200
We probably want the debug transform because this is again for

1752
01:42:24,200 --> 01:42:24,700
debugging.

1753
01:42:24,700 --> 01:42:29,300
So we probably want to draw those in, in terms of facing our, debug

1754
01:42:29,300 --> 01:42:29,800
camera.

1755
01:42:29,800 --> 01:42:31,800
Not our game camera, I'm guessing.

1756
01:42:32,800 --> 01:42:35,900
So, what I probably want to do here is say all right, I've got the cam

1757
01:42:35,900 --> 01:42:37,200
Z Vector, the

1758
01:42:37,300 --> 01:42:38,800
Vector is going to be whatever.

1759
01:42:38,800 --> 01:42:43,800
Again, the debug transform is, I'm going to want that, that Z value,

1760
01:42:44,300 --> 01:42:44,600
right?

1761
01:42:44,600 --> 01:42:45,300
In this case,

1762
01:42:47,300 --> 01:42:48,900
look so, and

1763
01:42:50,400 --> 01:42:53,700
I'll have to also make sure that that debug transform gets set

1764
01:42:53,700 --> 01:42:57,100
whenever the game transform would get set to.

1765
01:42:57,100 --> 01:43:00,000
So, we might have to take a look at those just to make sure that

1766
01:43:00,000 --> 01:43:02,200
they're all kosher there.

1767
01:43:02,200 --> 01:43:05,500
But anyway, so that's what that value should be.

1768
01:43:06,600 --> 01:43:09,200
And like I said, we want to take that camera Z vector and cross it

1769
01:43:09,200 --> 01:43:11,600
with the line Vector, that's going to give our line perp.

1770
01:43:11,700 --> 01:43:14,500
But of course, we also want to do a normalization on it.

1771
01:43:14,500 --> 01:43:18,500
And of course, we have that ability to do our normalization on it.

1772
01:43:18,700 --> 01:43:20,000
You can see here, we've got our normal

1773
01:43:20,200 --> 01:43:23,800
Is now again, we want to avoid dividing by zero and we don't know how

1774
01:43:23,800 --> 01:43:24,600
long the line is.

1775
01:43:24,600 --> 01:43:26,300
Maybe someone gave us a degenerate line.

1776
01:43:26,500 --> 01:43:29,600
So I'm going to go ahead and say normalizer 0 on this cross product,

1777
01:43:29,600 --> 01:43:35,700
so I can get back my perpendicular like so, okay from here, it becomes

1778
01:43:35,700 --> 01:43:36,800
fairly academic.

1779
01:43:36,800 --> 01:43:39,600
Like I was saying before we know the construction as long as we have

1780
01:43:39,600 --> 01:43:42,900
that perpendicular, it's just the thickness times it.

1781
01:43:43,300 --> 01:43:46,600
So what I can even do here is I can just pre multiply by the thickness

1782
01:43:46,600 --> 01:43:47,800
as well, right?

1783
01:43:48,300 --> 01:43:50,000
So now I know I'm just adding my line

1784
01:43:50,100 --> 01:43:51,800
A poor subtracting, my line perp.

1785
01:43:51,800 --> 01:43:54,400
So what I want to do is I want to start at the front P, add my LINE,

1786
01:43:54,400 --> 01:43:58,400
perp right for P0 actually subtract the the purple line prep.

1787
01:43:58,400 --> 01:43:59,900
I guess I'm going backwards along it.

1788
01:43:59,900 --> 01:44:03,900
Like so the P 1 is just going to be the same exact thing but it's

1789
01:44:03,900 --> 01:44:05,400
going to be from the, to pee, right?

1790
01:44:05,400 --> 01:44:08,000
It's going to be out here and coming backwards.

1791
01:44:08,500 --> 01:44:08,800
Oops.

1792
01:44:11,300 --> 01:44:11,900
Similarly here.

1793
01:44:11,900 --> 01:44:17,900
I'm going to add the line perp and again, add the line perp and that's

1794
01:44:17,900 --> 01:44:19,100
really all we need.

1795
01:44:19,500 --> 01:44:20,900
That's everything we need.

1796
01:44:21,200 --> 01:44:26,800
And then we can pass everything that we've computed to the push quad,

1797
01:44:26,800 --> 01:44:30,500
to just push the standard quad on because now we know all the values

1798
01:44:30,500 --> 01:44:32,200
that the quad has to take.

1799
01:44:38,600 --> 01:44:39,700
And that's really it.

1800
01:44:40,000 --> 01:44:44,300
So now moving on, you can see we need for element vectors obviously

1801
01:44:44,700 --> 01:44:47,600
and that's fine because those are just the the only reason we're

1802
01:44:47,600 --> 01:44:51,400
pushing for element vectors on, there is specifically because we need

1803
01:44:51,400 --> 01:44:52,900
that xevious component.

1804
01:44:52,900 --> 01:44:54,800
In this case, we're never going to buy us disease.

1805
01:44:54,800 --> 01:44:58,900
So we just put a zero as the as the final one and we're good our line

1806
01:44:58,900 --> 01:44:59,800
segment in this case

1807
01:45:00,000 --> 01:45:02,300
It's to have that line color here.

1808
01:45:03,000 --> 01:45:06,500
I'm going to just call this C for now because we only have one of them

1809
01:45:07,100 --> 01:45:08,900
and I'll go ahead and put that on.

1810
01:45:09,100 --> 01:45:15,300
You can see if I go back to where our push line segment call.

1811
01:45:15,300 --> 01:45:18,700
Was it needs a from in a, to, in the sea case.

1812
01:45:18,700 --> 01:45:20,000
So basically, we need

1813
01:45:22,800 --> 01:45:23,600
See here.

1814
01:45:26,000 --> 01:45:26,900
Something like this.

1815
01:45:34,700 --> 01:45:38,100
And that just allows you to draw a line that would go from one color

1816
01:45:38,100 --> 01:45:38,800
to another.

1817
01:45:39,300 --> 01:45:41,600
In this case, we don't ever really need to do that.

1818
01:45:41,600 --> 01:45:45,400
We're always going to be using just one color for our volume, but you

1819
01:45:45,400 --> 01:45:49,100
can see how you might want to have that line be different.

1820
01:45:49,800 --> 01:45:50,200
There we go.

1821
01:45:53,400 --> 01:45:57,600
I don't know why I left that in there was steak obviously

1822
01:46:01,300 --> 01:46:05,700
I really need to modify my for coder config to suck up white space

1823
01:46:05,700 --> 01:46:09,200
when I do a delete it waste so much time.

1824
01:46:09,200 --> 01:46:11,200
That I don't do that and I just haven't done it yet.

1825
01:46:11,200 --> 01:46:12,200
I need to do it.

1826
01:46:13,800 --> 01:46:16,200
All right, so let's take a look here at that.

1827
01:46:16,200 --> 01:46:19,000
Push line segment line.

1828
01:46:22,400 --> 01:46:25,200
And really we should be in the Q and A now, so I should stop soon but

1829
01:46:26,500 --> 01:46:28,800
I think the only thing I need to do is now pass the thickness down.

1830
01:46:29,500 --> 01:46:29,900
There we go.

1831
01:46:30,500 --> 01:46:30,900
Oops.

1832
01:46:38,000 --> 01:46:38,400
Okay.

1833
01:46:41,500 --> 01:46:44,600
And these don't need to be the forest anymore.

1834
01:46:46,500 --> 01:46:50,400
Because that expansion gets taken care of a little later and we don't

1835
01:46:50,400 --> 01:46:53,400
really want them to be because again they need to be cross product and

1836
01:46:53,400 --> 01:46:55,900
so on inside there, so there we go.

1837
01:46:55,900 --> 01:46:59,200
And now what I'd like to do is just briefly test it before I go to the

1838
01:46:59,200 --> 01:47:02,800
Q&A and maybe do a little debugging of it just so we can get it

1839
01:47:02,800 --> 01:47:03,300
working.

1840
01:47:05,100 --> 01:47:09,600
Inside cure, for example in when we're doing this world transform,

1841
01:47:10,500 --> 01:47:13,100
what I'd like to do is just say like okay let's try drawing a

1842
01:47:13,100 --> 01:47:16,700
rectangle, just a simple rectangle that we can look at.

1843
01:47:16,700 --> 01:47:21,900
So if I was going to push a volume outline on here and I just did you

1844
01:47:21,900 --> 01:47:29,900
know rectangle min-max for example and I did two of these for you know

1845
01:47:29,900 --> 01:47:33,600
and just said something that was going to be very simple like - 11 1

1846
01:47:33,600 --> 01:47:34,400
to positive 1.

1847
01:47:34,600 --> 01:47:35,700
One, right?

1848
01:47:36,400 --> 01:47:41,700
And I'm going to draw that as a purple rectangle in this case and I

1849
01:47:41,700 --> 01:47:46,100
don't know what the thickness is going to be will do 0.1 F4.

1850
01:47:46,100 --> 01:47:49,000
Now I don't know if that's about even remotely Reese.

1851
01:47:49,000 --> 01:47:49,900
Well that's in World space.

1852
01:47:49,900 --> 01:47:54,600
It's probably a little too thick so there's that, but whatever.

1853
01:47:55,300 --> 01:47:59,000
So let's go ahead and see if I can run that now and we can just take a

1854
01:47:59,000 --> 01:47:59,600
look at what that

1855
01:48:00,100 --> 01:48:00,400
Us.

1856
01:48:00,800 --> 01:48:06,900
So, I'm going to move back here and take a look and you can kind of

1857
01:48:06,900 --> 01:48:09,100
see what we've got here.

1858
01:48:09,100 --> 01:48:10,900
It's not quite right.

1859
01:48:11,100 --> 01:48:15,000
It's, it's, it's not awful, but it's not quite right.

1860
01:48:15,000 --> 01:48:17,600
You can kind of see some rotation, they're happening.

1861
01:48:18,000 --> 01:48:23,300
So I think we're not quite doing the right dot product, there in all

1862
01:48:23,300 --> 01:48:25,100
cases, but we're closed right.

1863
01:48:25,100 --> 01:48:28,900
You know, we're just drawing little like line fins, which is exactly

1864
01:48:28,900 --> 01:48:29,300
what.

1865
01:48:30,000 --> 01:48:33,600
We had wanted to draw, but we do have a little bit of an issue there.

1866
01:48:34,100 --> 01:48:35,100
So let's just

1867
01:48:37,200 --> 01:48:39,200
Let's just go take a quick check.

1868
01:48:40,700 --> 01:48:42,400
Push line segment.

1869
01:48:45,000 --> 01:48:46,500
I'm in the wrong function.

1870
01:48:47,400 --> 01:48:49,200
Push line segment.

1871
01:48:52,400 --> 01:48:55,600
And let's just take a quick check to make sure that this is, is saying

1872
01:48:55,600 --> 01:48:56,200
what I was doing.

1873
01:48:56,200 --> 01:49:01,900
Here, we have the camera Z value, and the line Z value, we should

1874
01:49:01,900 --> 01:49:05,300
double-check our cross product are normalizing your 0 in our thickness

1875
01:49:05,300 --> 01:49:05,800
for that.

1876
01:49:05,900 --> 01:49:06,900
Seems to make pretty good sense.

1877
01:49:06,900 --> 01:49:08,400
Here's our to pee and are from p.

1878
01:49:09,300 --> 01:49:13,200
And so, in theory, I would think we should get something relatively

1879
01:49:13,200 --> 01:49:18,700
stable from that, I'll have to double check just for me for my own

1880
01:49:18,700 --> 01:49:21,000
purposes, to make sure that that's really going to give us.

1881
01:49:22,300 --> 01:49:25,400
what we want, but I feel like

1882
01:49:33,400 --> 01:49:35,000
Just think about this for one second.

1883
01:49:38,200 --> 01:49:39,200
Just a hot second.

1884
01:49:40,000 --> 01:49:41,900
So one of the things with this,

1885
01:49:44,700 --> 01:49:46,300
is, you know, if we've got

1886
01:49:48,700 --> 01:49:53,600
This in the world and then I've got something coming directly out of

1887
01:49:53,600 --> 01:49:54,300
the screen.

1888
01:49:55,900 --> 01:50:03,600
It is true that the tilt of this Vector Z wise is probably going to

1889
01:50:03,600 --> 01:50:08,900
be, is going to be dependent on how this is, you know, it's really

1890
01:50:08,900 --> 01:50:10,200
hard to draw these unfortunately.

1891
01:50:10,200 --> 01:50:12,900
But, you know, let's say this was the cameras e vector.

1892
01:50:13,100 --> 01:50:16,100
And this was kind of pointing off in that direction versus pointing

1893
01:50:16,100 --> 01:50:18,300
off in this direction, the tilt of this

1894
01:50:18,500 --> 01:50:20,300
Is going to vary a bit there.

1895
01:50:21,000 --> 01:50:24,300
So it is also the case that we may want to

1896
01:50:25,600 --> 01:50:31,000
confine this to only being in the plane of the screen before we do our

1897
01:50:31,000 --> 01:50:32,100
cross product for example.

1898
01:50:32,300 --> 01:50:37,500
So we could do this in a slightly different way that wouldn't involve

1899
01:50:42,400 --> 01:50:47,700
You know, that that wouldn't involve that that extra tilt, right?

1900
01:50:47,800 --> 01:50:51,100
We could do it sort of a way that pre projects down to the screen.

1901
01:50:51,100 --> 01:50:52,400
I have to think about

1902
01:50:54,500 --> 01:50:56,000
I have to think about how that would work.

1903
01:50:56,000 --> 01:50:57,000
Exactly right.

1904
01:50:57,600 --> 01:50:58,600
But for example,

1905
01:51:00,500 --> 01:51:05,900
Here is the line equation that goes to P from P if I wanted to remove.

1906
01:51:05,900 --> 01:51:12,700
For example, the Zeke and the component of this that is outside of the

1907
01:51:15,200 --> 01:51:19,200
if I wanted to keep this in an XY plane relative, the screen I could,

1908
01:51:19,200 --> 01:51:24,700
if I wanted to, for example, subtract away the portion of it that

1909
01:51:27,400 --> 01:51:31,100
that actually fell in line with the cameras Z axis, right?

1910
01:51:31,100 --> 01:51:32,400
I could do that.

1911
01:51:39,500 --> 01:51:43,700
And I should probably explain a little bit more about what's going on

1912
01:51:43,700 --> 01:51:46,700
there, but hold on one second and let's actually see if this is more

1913
01:51:46,700 --> 01:51:51,100
what I had in mind, but I don't, I don't know that it actually should

1914
01:51:51,100 --> 01:51:52,000
matter all that much.

1915
01:51:53,400 --> 01:51:54,000
You can kind of.

1916
01:51:54,000 --> 01:51:55,700
See I'm still getting sort of

1917
01:51:57,100 --> 01:52:00,300
not exactly what I would have expected there, right?

1918
01:52:00,600 --> 01:52:02,200
So I want to look at that a little more closely.

1919
01:52:02,200 --> 01:52:05,800
And the other thing I would like to do is check that off for now.

1920
01:52:06,400 --> 01:52:08,400
The other thing I would like to do is check my

1921
01:52:11,800 --> 01:52:15,800
I cross product, which we haven't actually done to make sure that that

1922
01:52:15,800 --> 01:52:18,900
the terms and here are correct and that there's nothing.

1923
01:52:20,600 --> 01:52:22,100
Nothing weird happening in there.

1924
01:52:22,500 --> 01:52:24,300
They look right to me.

1925
01:52:26,800 --> 01:52:27,800
At the moment.

1926
01:52:27,800 --> 01:52:31,200
So I'm pretty comfortable that we have that correct.

1927
01:52:33,000 --> 01:52:33,700
X y, z.

1928
01:52:33,700 --> 01:52:34,300
X y.

1929
01:52:34,300 --> 01:52:36,700
Yeah, so that looks, that looks correct to me.

1930
01:52:39,800 --> 01:52:42,000
I'm pretty sure get rid of this now.

1931
01:52:43,000 --> 01:52:46,200
And so, my only question is, whether or not we need do anything

1932
01:52:46,200 --> 01:52:47,200
fancier here.

1933
01:52:47,200 --> 01:52:52,500
I feel like these should be more stable as we go, especially if you

1934
01:52:52,500 --> 01:52:54,000
were to remove.

1935
01:52:54,000 --> 01:52:55,500
Like I was saying the,

1936
01:52:57,100 --> 01:53:02,900
If you were to remove the part that is, you know, remove the part of

1937
01:53:02,900 --> 01:53:07,400
the, the line that isn't in the plane of the screen, which this should

1938
01:53:07,400 --> 01:53:08,100
do.

1939
01:53:18,400 --> 01:53:22,300
I would think that would give you a very stable perpendicular for

1940
01:53:22,300 --> 01:53:26,100
purposes of the line, but that one looked like it was tilting in a

1941
01:53:26,100 --> 01:53:29,400
way, that was sort of counterintuitive to me how that would work.

1942
01:53:32,100 --> 01:53:35,000
So I'm just not sure exactly why that would be the case.

1943
01:53:35,600 --> 01:53:38,800
I'd have to think about that a little bit, a little bit more closely

1944
01:53:38,800 --> 01:53:41,300
here but again you can kind of see

1945
01:53:44,000 --> 01:53:44,200
Yeah.

1946
01:53:44,200 --> 01:53:47,700
How that construction plays out again?

1947
01:53:47,700 --> 01:53:48,800
It's pretty straightforward.

1948
01:53:49,000 --> 01:53:51,800
So what, you know what I could do to here?

1949
01:53:51,900 --> 01:53:52,700
Let me take a look.

1950
01:53:52,700 --> 01:53:54,800
If I remove just for

1951
01:54:00,300 --> 01:54:04,500
person inspection, if I only have one of them,

1952
01:54:10,400 --> 01:54:11,100
So here it is.

1953
01:54:11,500 --> 01:54:16,200
So you can see the part that's kind of a little bit weird to me, which

1954
01:54:16,200 --> 01:54:18,700
is that I would expect this to be.

1955
01:54:21,100 --> 01:54:24,900
Kind of there should be a place where it does become singular when I'm

1956
01:54:24,900 --> 01:54:26,400
looking directly at it like this.

1957
01:54:26,400 --> 01:54:30,000
It should be wrong because, of course, it can't find, there is no way

1958
01:54:30,000 --> 01:54:33,700
to like really produce a line, in that case because I'm just, I'm

1959
01:54:33,700 --> 01:54:35,300
looking straight down at it.

1960
01:54:35,300 --> 01:54:38,900
There is no span of the line in the space of the screen, but pretty

1961
01:54:38,900 --> 01:54:39,800
much everywhere else.

1962
01:54:39,800 --> 01:54:43,300
I would have expected it to be better in terms of that.

1963
01:54:43,300 --> 01:54:46,100
So, in this case, for example, you know, where it's coming out here,

1964
01:54:46,900 --> 01:54:50,700
and so, if you imagine that in the plane of the screen, that

1965
01:54:51,000 --> 01:54:53,100
A pretty reasonable perpendicular.

1966
01:54:53,100 --> 01:54:54,000
I suppose.

1967
01:54:54,800 --> 01:54:56,200
But it just

1968
01:55:00,000 --> 01:55:02,900
I don't know, maybe that is a pre pretty reasonable perpendicular.

1969
01:55:02,900 --> 01:55:03,400
I don't know.

1970
01:55:05,300 --> 01:55:10,000
I guess now that I look at it is behaving relatively good in terms of

1971
01:55:10,000 --> 01:55:13,600
facing at the screen and it's really only when I look at it quite head

1972
01:55:13,600 --> 01:55:16,800
on that it becomes sort of tilted like that.

1973
01:55:17,500 --> 01:55:20,100
So I don't know, maybe that actually is relatively reasonable.

1974
01:55:23,500 --> 01:55:27,900
And again, all this is trying to do in this case is really, just make

1975
01:55:27,900 --> 01:55:33,000
sure that we're always getting some kind of width towards where the

1976
01:55:33,000 --> 01:55:34,700
camera is facing, right?

1977
01:55:34,700 --> 01:55:38,400
We're just trying to produce a 3D with that's oriented towards the

1978
01:55:38,400 --> 01:55:41,200
camera, which I guess is exactly what it's doing.

1979
01:55:41,700 --> 01:55:44,500
So I guess I don't maybe have as much complaint as I thought I did

1980
01:55:44,500 --> 01:55:45,300
originally with it.

1981
01:55:45,500 --> 01:55:46,800
That actually looks pretty good.

1982
01:55:48,600 --> 01:55:49,600
So maybe that's fine.

1983
01:55:50,100 --> 01:55:50,400
The thing.

1984
01:55:50,400 --> 01:55:53,100
I'm not sure about again to is whether we

1985
01:55:53,200 --> 01:55:55,100
Actually care about doing that.

1986
01:55:56,000 --> 01:56:00,700
That step of removing, the non-sweet space portion, that might not

1987
01:56:00,700 --> 01:56:02,200
really be so necessary, but

1988
01:56:08,000 --> 01:56:09,200
So here that is again.

1989
01:56:11,500 --> 01:56:13,600
And yeah, I mean, I guess that is pretty good.

1990
01:56:13,600 --> 01:56:16,100
Now that I look at it, those things are always turning to face me

1991
01:56:16,100 --> 01:56:17,600
pretty much most of the time.

1992
01:56:18,500 --> 01:56:19,500
So that's not bad.

1993
01:56:20,000 --> 01:56:22,300
I don't think about whether there's maybe it should be done a little

1994
01:56:22,300 --> 01:56:24,600
bit better, in the case of sort of those ones.

1995
01:56:24,600 --> 01:56:28,300
Again, the kind of spin around when we're looking kind of dead off

1996
01:56:28,300 --> 01:56:31,700
them because it doesn't create a particular usable version there.

1997
01:56:31,700 --> 01:56:34,100
But other than that, yeah, I suppose that's fine.

1998
01:56:34,900 --> 01:56:37,400
Again, this is only for debug purposes, so I suppose, as long as

1999
01:56:37,400 --> 01:56:37,700
they're

2000
01:56:37,800 --> 01:56:40,400
Always sort of orienting roughly towards me.

2001
01:56:40,400 --> 01:56:41,200
That's okay.

2002
01:56:41,900 --> 01:56:43,400
The thickness in this case.

2003
01:56:45,500 --> 01:56:47,100
Like I said, it's probably too high.

2004
01:56:47,900 --> 01:56:51,600
We probably don't really want that kind of thing.

2005
01:56:54,500 --> 01:56:58,100
Probably want more like this, right?

2006
01:56:58,800 --> 01:56:59,400
Certainly.

2007
01:56:59,400 --> 01:56:59,700
And so

2008
01:57:00,000 --> 01:57:01,700
Really more, what it's supposed to be drawing.

2009
01:57:02,000 --> 01:57:04,800
And again, when you look at it that way, now it becomes a lot less

2010
01:57:04,800 --> 01:57:08,400
objectionable that sort of rotation because they're not really

2011
01:57:08,400 --> 01:57:11,300
particularly big, but you can still see the problem right?

2012
01:57:11,300 --> 01:57:15,200
When its head on like that, it just has a really hard time generating

2013
01:57:15,200 --> 01:57:18,200
that that value, right?

2014
01:57:18,200 --> 01:57:19,500
That perpendicular value.

2015
01:57:20,300 --> 01:57:23,800
So what we could do in that scenario also is, we could, we could try

2016
01:57:23,800 --> 01:57:25,500
to compensate for that, right?

2017
01:57:25,500 --> 01:57:27,900
That, you know, we could also try to produce something that's a little

2018
01:57:27,900 --> 01:57:29,800
bit more aware of

2019
01:57:30,000 --> 01:57:30,700
That situation.

2020
01:57:30,700 --> 01:57:33,400
So for example, when we do push the line segment

2021
01:57:34,700 --> 01:57:38,400
On what we could do here is say, well, you know, when we, when we

2022
01:57:38,400 --> 01:57:41,500
produce this line, whatever it's going to be.

2023
01:57:41,500 --> 01:57:45,100
We could then say, well, let's take the line length, right?

2024
01:57:46,600 --> 01:57:49,800
And take a look at what it is.

2025
01:57:50,600 --> 01:57:54,200
So in this case, we take the length squared of the line, although I

2026
01:57:54,200 --> 01:57:55,500
guess we're always going to need the length.

2027
01:57:55,500 --> 01:57:57,200
So we might as well just take the actual length.

2028
01:57:57,400 --> 01:58:01,500
So we take the length of the line and we know what it is and then

2029
01:58:01,500 --> 01:58:04,300
inordinate, you know, in ordinary circumstances.

2030
01:58:04,500 --> 01:58:08,100
Answers in this case, I guess.

2031
01:58:08,100 --> 01:58:10,600
Now I think about it, we don't even really needed quite do that.

2032
01:58:10,800 --> 01:58:13,400
What I can do instead is wait till we're done with this, right?

2033
01:58:13,400 --> 01:58:17,400
I could take the lime purp and say, well, okay, you know, take the

2034
01:58:17,400 --> 01:58:20,100
cross product here of the line, perpendicular out.

2035
01:58:20,100 --> 01:58:23,200
What that is, and then, let's take whatever the

2036
01:58:25,700 --> 01:58:27,100
The line Pro length is.

2037
01:58:29,500 --> 01:58:30,100
There we go.

2038
01:58:31,000 --> 01:58:34,700
And then I'll take the line prayer and I'm going to, you know, divide

2039
01:58:34,700 --> 01:58:36,800
it by whatever that is right.

2040
01:58:37,100 --> 01:58:39,400
That's exactly the same thing as we were doing before.

2041
01:58:40,700 --> 01:58:43,900
And so that will produce the exact same result, right or should.

2042
01:58:43,900 --> 01:58:44,400
Anyway.

2043
01:58:45,000 --> 01:58:47,100
Let's go ahead and zoom in there and make sure it does.

2044
01:58:49,100 --> 01:58:52,900
Oh, and I forgot, I still need to do that thickness multiplied.

2045
01:59:00,200 --> 01:59:03,000
Okay, so that would produce the exact same results as before.

2046
01:59:03,100 --> 01:59:09,000
But now instead we have the opportunity, right to modify this as as

2047
01:59:09,000 --> 01:59:10,600
necessary based on what the length is.

2048
01:59:10,800 --> 01:59:14,600
So what we could do is say, well, if the line perp length, so, you

2049
01:59:14,600 --> 01:59:17,700
know, if this, if this result that we're getting is just very, very

2050
01:59:17,700 --> 01:59:19,100
tiny, right?

2051
01:59:19,300 --> 01:59:22,700
So let's say, if the line perp length is like less than the thickness

2052
01:59:22,700 --> 01:59:23,400
or something.

2053
01:59:25,200 --> 01:59:26,400
We'll do something else.

2054
01:59:26,600 --> 01:59:30,700
Otherwise we'll do you know what we would normally do or something?

2055
01:59:31,700 --> 01:59:34,900
And so we could say is well there's some thresholds here which as that

2056
01:59:34,900 --> 01:59:36,100
cross product to generate.

2057
01:59:36,100 --> 01:59:39,100
So, as the, the values come together and you can understand

2058
01:59:39,100 --> 01:59:40,500
mathematically, sort of what's happening there.

2059
01:59:40,500 --> 01:59:41,400
Right?

2060
01:59:41,400 --> 01:59:44,700
I've got a sine Theta term in here.

2061
01:59:44,700 --> 01:59:48,900
So I've got my two vectors and right, this is the definition of the

2062
01:59:48,900 --> 01:59:54,200
length of that cross product term as this sine Theta term goes to 0

2063
01:59:54,200 --> 01:59:56,700
which it will as these two things collapse.

2064
01:59:56,700 --> 01:59:59,800
Right as these two things come sort each other we end up with no.

2065
02:00:00,000 --> 02:00:00,700
Through it all.

2066
02:00:01,200 --> 02:00:03,000
And so that's not going to be very useful, right?

2067
02:00:03,000 --> 02:00:05,400
It doesn't matter what the length of the two vectors are that come in,

2068
02:00:05,400 --> 02:00:09,600
if the angle between them collapses to zero, the sine becomes 0 and

2069
02:00:09,600 --> 02:00:10,700
then we lose our term.

2070
02:00:11,100 --> 02:00:14,000
So as this collapses towards 0, what we could do is say let's

2071
02:00:14,000 --> 02:00:18,900
substitute something else in there for the perpendicular that we can

2072
02:00:18,900 --> 02:00:20,200
use, right?

2073
02:00:21,200 --> 02:00:22,600
And that might help us a little bit.

2074
02:00:22,700 --> 02:00:24,800
So what we could do is just say, well, whatever, you know.

2075
02:00:24,800 --> 02:00:28,500
Okay, fine, let's just use, we know the cameras Z axis in the cameras,

2076
02:00:28,500 --> 02:00:29,900
x axis or perpendicular.

2077
02:00:30,000 --> 02:00:32,600
And so, we'll just use that or something, right?

2078
02:00:32,600 --> 02:00:35,900
The, the x axis can be the thing we use for our perpendicular, in the

2079
02:00:35,900 --> 02:00:39,600
case, where we start to generate down below the thickness threshold,

2080
02:00:39,600 --> 02:00:39,900
right?

2081
02:00:39,900 --> 02:00:45,000
Or whatever, something like that and maybe that'll help us.

2082
02:00:45,500 --> 02:00:48,700
So now if we take a look at what happens there, I don't know if we get

2083
02:00:48,700 --> 02:00:51,300
really a much better, it doesn't look like we get particularly better

2084
02:00:51,300 --> 02:00:51,500
here.

2085
02:00:51,500 --> 02:00:54,500
I'm going to see what happens if we do something.

2086
02:00:54,500 --> 02:00:55,100
Maybe.

2087
02:00:58,900 --> 02:01:01,900
Maybe in this case a little bit above that so I don't know.

2088
02:01:01,900 --> 02:01:05,600
Let's let's, let's do something a little more, more thickness wise.

2089
02:01:05,600 --> 02:01:08,500
It doesn't look like we're really getting that case happening much at

2090
02:01:08,500 --> 02:01:08,800
all.

2091
02:01:18,800 --> 02:01:21,600
Me to see if this is happening at all here.

2092
02:01:22,800 --> 02:01:23,300
There we go.

2093
02:01:26,800 --> 02:01:29,600
So, there's what happens if you actually just always substitute in the

2094
02:01:29,600 --> 02:01:30,800
x-axis, right?

2095
02:01:33,300 --> 02:01:36,800
And similarly, I could alternatively, you know, use the y-axis, right?

2096
02:01:36,800 --> 02:01:37,800
And that looks like this.

2097
02:01:40,100 --> 02:01:41,000
Some kind of see there.

2098
02:01:41,600 --> 02:01:44,100
And so what I could do here is just say, like, okay, yeah, I want to

2099
02:01:44,100 --> 02:01:45,400
substitute that in, why?

2100
02:01:45,400 --> 02:01:47,500
I'm not getting more substitution of that.

2101
02:01:47,500 --> 02:01:51,700
I'm not sure because it looks like that's never substituting in, but

2102
02:01:51,700 --> 02:01:54,200
it should any time the perpendicular length is less than this.

2103
02:01:54,200 --> 02:01:56,000
This seems like a very high value.

2104
02:01:56,300 --> 02:01:59,500
A high bar to set, it looks like it's get.

2105
02:01:59,500 --> 02:02:05,300
It doesn't ever seem to be actually Crossing into that territory,

2106
02:02:05,300 --> 02:02:08,000
which doesn't make a lot of sense to me, because the length of this

2107
02:02:08,900 --> 02:02:09,700
line purpose,

2108
02:02:09,900 --> 02:02:14,000
Cross product here should get pretty tiny once we get to that case.

2109
02:02:14,100 --> 02:02:17,800
So I feel like this is an absurdly high value to have to set in order

2110
02:02:17,800 --> 02:02:22,900
for that to actually be true, which strikes me as kind of a little bit

2111
02:02:22,900 --> 02:02:24,000
odd, right?

2112
02:02:24,100 --> 02:02:27,400
So I feel like there's something bizarre going on there, so maybe I'll

2113
02:02:27,400 --> 02:02:28,400
save that for next time.

2114
02:02:28,400 --> 02:02:30,900
We can look at that in a little bit more detail for now.

2115
02:02:30,900 --> 02:02:34,600
I'll just leave it going with the way that it was going before and we

2116
02:02:34,600 --> 02:02:36,200
can, we can sort of escalator.

2117
02:02:36,200 --> 02:02:39,100
So this one will still have the problem of the lines, kind of

2118
02:02:39,100 --> 02:02:39,700
degenerating.

2119
02:02:39,800 --> 02:02:41,700
and when they get a little bit too head on,

2120
02:02:45,300 --> 02:02:48,800
Or when they become a little bit too, coincident, right with the

2121
02:02:48,800 --> 02:02:50,800
directionality of the, of the line.

2122
02:02:52,600 --> 02:02:56,000
In this case, I suppose, when I look at it too, I suppose part of the

2123
02:02:56,000 --> 02:02:57,200
problem there.

2124
02:03:19,700 --> 02:03:20,200
so,

2125
02:03:25,000 --> 02:03:27,800
using the cameras Z axis.

2126
02:03:29,600 --> 02:03:35,700
Also is kind of is not necessarily what we would want for projection,

2127
02:03:36,000 --> 02:03:36,900
right?

2128
02:03:37,000 --> 02:03:38,500
So if you think about it,

2129
02:03:40,100 --> 02:03:42,700
Sorry, I'm not still not taking questions by just one thing through.

2130
02:03:43,300 --> 02:03:45,600
So if we take a look at something on the screen, right?

2131
02:03:45,700 --> 02:03:48,400
And you think about how this is getting projected down out there in

2132
02:03:48,400 --> 02:03:51,200
the world, I've got something and I'm looking at its projection here,

2133
02:03:51,500 --> 02:03:56,200
if I want to create something, you know, and then I've got, you know,

2134
02:03:56,200 --> 02:03:57,800
I should say, I've got two things, right?

2135
02:03:57,800 --> 02:04:00,300
One there, and one there, and I'm projecting them both onto the

2136
02:04:00,300 --> 02:04:03,000
screen, and I'm drawing the line between them.

2137
02:04:03,800 --> 02:04:08,700
If I want to look at a perpendicular to it, to this.

2138
02:04:08,900 --> 02:04:09,700
Line.

2139
02:04:09,700 --> 02:04:17,300
In either case, I guess one problem here is that direction itself?

2140
02:04:21,800 --> 02:04:28,500
Do I actually want to use, for example, the vector to the camera from,

2141
02:04:28,700 --> 02:04:32,200
you know, the end points of the line to determine where those, those

2142
02:04:32,200 --> 02:04:34,900
perpendicular values should be.

2143
02:04:35,500 --> 02:04:39,400
So, you do two cross products, produce a separate fin in both cases

2144
02:04:39,600 --> 02:04:42,600
because the fin is going to be projected as well.

2145
02:04:44,000 --> 02:04:46,500
And so what is perpendicular to the camera?

2146
02:04:49,600 --> 02:04:50,600
Either point.

2147
02:04:52,900 --> 02:04:58,100
It's hard to say, right because that line, that gets that gets

2148
02:04:58,100 --> 02:04:59,500
projected into the screen.

2149
02:05:07,300 --> 02:05:08,600
Yeah, I can't decide on that.

2150
02:05:09,800 --> 02:05:12,400
Maybe I'll go to the Q&A first because I feel like this is too big of

2151
02:05:12,400 --> 02:05:12,800
a topic.

2152
02:05:12,800 --> 02:05:15,700
I kind of want to go into this in a lot more detail actually.

2153
02:05:15,700 --> 02:05:18,400
Now I think about it because of the geometric construction is a little

2154
02:05:18,400 --> 02:05:18,600
bit more.

2155
02:05:18,600 --> 02:05:19,100
Interesting.

2156
02:05:19,800 --> 02:05:23,500
So let me go to the Q&A and we'll deal with this more tomorrow unless

2157
02:05:23,500 --> 02:05:25,800
the Q&A is all about it and then we can keep going.

2158
02:05:42,500 --> 02:05:43,300
Oh no.

2159
02:05:43,900 --> 02:05:45,400
Why is the Q&A button?

2160
02:05:45,400 --> 02:05:47,600
Not working is in sabac gone.

2161
02:05:49,500 --> 02:05:50,400
What happened?

2162
02:05:55,800 --> 02:05:58,800
I hit I hit exclamation point Q&A.

2163
02:06:01,200 --> 02:06:02,500
But there's no.

2164
02:06:19,100 --> 02:06:21,100
Does anyone know what happened in sohbat?

2165
02:06:24,200 --> 02:06:24,900
Oh hm.

2166
02:06:24,900 --> 02:06:27,500
D-bots handles the Q and a message and seems to be dead.

2167
02:06:27,500 --> 02:06:29,900
It does see we did like hmd Bots, not on there.

2168
02:06:29,900 --> 02:06:31,200
Like it's not on the list.

2169
02:06:37,800 --> 02:06:41,000
So I don't know what happened to hmd, but hmd bot is dead.

2170
02:06:43,500 --> 02:06:48,500
That's unfortunate but well, alright, you know, that's just that's

2171
02:06:48,500 --> 02:06:49,900
just what happens sometimes.

2172
02:06:54,300 --> 02:06:56,400
All right, so apparently, okay.

2173
02:06:56,400 --> 02:07:01,100
So just so you says, you can solve those equations in Maxima.

2174
02:07:03,000 --> 02:07:07,600
It looks like somehow your Maxima is actually able to lay out the

2175
02:07:07,700 --> 02:07:09,600
results properly which is nice.

2176
02:07:50,200 --> 02:07:54,500
Engineer, what would be the downside of drawing your debug lines as 3D

2177
02:07:54,500 --> 02:07:56,800
cylinders or extruded rectangles.

2178
02:07:57,600 --> 02:08:00,400
It seems like that would look a little nice.

2179
02:08:00,400 --> 02:08:06,000
When viewed from all angles we could do that.

2180
02:08:06,700 --> 02:08:07,000
Yeah.

2181
02:08:07,000 --> 02:08:07,800
If you'd like.

2182
02:08:11,600 --> 02:08:17,300
So a cylinder in this case would be relatively simple.

2183
02:08:17,300 --> 02:08:20,800
The hardest part about the cylinder is going to be the end caps of it,

2184
02:08:21,400 --> 02:08:30,900
which I suppose we could you know maybe avoid to a certain extent but

2185
02:08:30,900 --> 02:08:32,600
yeah, cylinders not too bad.

2186
02:08:32,600 --> 02:08:39,200
A cylinder is just, you know, a circle with stuff on either end if we

2187
02:08:39,200 --> 02:08:39,500
wanted.

2188
02:08:39,600 --> 02:08:40,500
To do that.

2189
02:08:40,700 --> 02:08:41,300
Let's see.

2190
02:08:43,800 --> 02:08:46,800
so, if we wanted to draw line segments, that way, I'll just if 0 this

2191
02:08:46,800 --> 02:08:47,600
part out here,

2192
02:08:56,400 --> 02:08:59,300
if we wanted to do it as a cylinder, then basically what we're talking

2193
02:08:59,300 --> 02:08:59,800
about here.

2194
02:09:00,000 --> 02:09:06,100
Is just some number of angles around sort of a radius Vector, right?

2195
02:09:06,100 --> 02:09:08,900
And we need to do sort of some, of the same things.

2196
02:09:08,900 --> 02:09:12,700
So we still need to do this, right?

2197
02:09:12,700 --> 02:09:15,800
We still need to come up with this because that's going to be sort of

2198
02:09:15,800 --> 02:09:19,400
the central Direction.

2199
02:09:19,400 --> 02:09:23,600
You know I shouldn't do this in the Q&A because the the same problem

2200
02:09:23,600 --> 02:09:26,900
is going to occur just in a slightly different way which is that we

2201
02:09:26,900 --> 02:09:29,300
have one axis and we're going to need to produce

2202
02:09:30,000 --> 02:09:34,900
two more axes to use as the basis for the cylinder and we'd have to

2203
02:09:34,900 --> 02:09:36,300
talk about how to do that.

2204
02:09:37,900 --> 02:09:42,500
So I think I'd probably rather wait till tomorrow to do that.

2205
02:09:50,400 --> 02:09:53,900
It's not quite exactly the same but we still need a way of producing

2206
02:09:53,900 --> 02:09:55,000
the cylinder basis.

2207
02:09:55,300 --> 02:09:57,800
And so we're still going to have to have, we still have the problem of

2208
02:09:57,800 --> 02:10:01,900
producing two other coordinates via its in easier problem because we

2209
02:10:01,900 --> 02:10:07,000
don't have to care about the camera facing Miss of it, so that has

2210
02:10:07,000 --> 02:10:11,000
nothing to do with the camera anymore but it's still a problem.

2211
02:10:18,300 --> 02:10:22,000
And someone was saying we should go ahead and do the lines around

2212
02:10:22,000 --> 02:10:24,300
rooms and yes we totally could do that.

2213
02:10:24,800 --> 02:10:29,400
Pretty simply right, let me see.

2214
02:10:32,200 --> 02:10:35,100
Where that happens.

2215
02:10:38,900 --> 02:10:40,100
Not sure.

2216
02:10:43,500 --> 02:10:46,100
There's a traversable is here, our volumes.

2217
02:10:47,300 --> 02:10:50,100
So what I can do here is just say, like, okay,

2218
02:10:53,500 --> 02:10:55,100
push volume outline.

2219
02:11:04,800 --> 02:11:08,600
And I don't know, let me just check to see here.

2220
02:11:11,900 --> 02:11:14,600
I don't think there's anything in particular that has to do with rooms

2221
02:11:14,600 --> 02:11:15,000
here.

2222
02:11:17,100 --> 02:11:18,600
I think it's just part of the Collision volume.

2223
02:11:20,400 --> 02:11:25,100
yeah so the Collision volumes right are getting pulled out here and if

2224
02:11:25,100 --> 02:11:29,600
I do a push volume outline I need to

2225
02:11:31,100 --> 02:11:33,300
Put these on this way, here's the color.

2226
02:11:33,500 --> 02:11:37,200
I'll copy the same color we were using for them before.

2227
02:11:39,500 --> 02:11:41,500
And then direct min-max.

2228
02:11:41,700 --> 02:11:47,400
What I want to do is just take the volume offset p and the volume dim

2229
02:11:47,900 --> 02:11:49,000
and just say,

2230
02:11:52,800 --> 02:11:54,900
Volume offset P.

2231
02:11:54,900 --> 02:11:58,700
I think I want Rec, Center Dim, volume dim.

2232
02:11:58,800 --> 02:11:59,800
I think that should give

2233
02:12:00,100 --> 02:12:01,900
The rectangle that want.

2234
02:12:04,800 --> 02:12:05,900
And I can delete this.

2235
02:12:06,400 --> 02:12:10,200
So I think that should draw Collision volumes around everything.

2236
02:12:11,300 --> 02:12:15,500
And we should be able to see those in theory here.

2237
02:12:15,500 --> 02:12:19,800
Now, whether or not that's actually working correctly, I'm not sure we

2238
02:12:19,800 --> 02:12:24,400
would have to because we don't actually I think have all the Collision

2239
02:12:24,400 --> 02:12:26,000
volume set correctly at the moment.

2240
02:12:26,000 --> 02:12:29,500
I don't really remember so we'd have to go.

2241
02:12:29,500 --> 02:12:33,300
See I feel like people have I don't really remember who has Collision

2242
02:12:33,300 --> 02:12:34,600
volumes and who doesn't

2243
02:12:37,800 --> 02:12:40,200
Oh, I suppose, the other thing we have to do is actually use the

2244
02:12:40,200 --> 02:12:41,200
entity transform.

2245
02:12:41,700 --> 02:12:44,700
So one of the things that we weren't doing in the volume outline case

2246
02:12:45,800 --> 02:12:48,500
with the object transfers, we're not actually using the object

2247
02:12:48,500 --> 02:12:50,100
transform here, right?

2248
02:12:50,200 --> 02:12:53,400
And we would need to, it's got that offset p.

2249
02:12:54,000 --> 02:12:57,400
And so that actually has to be taken into account here.

2250
02:12:58,300 --> 02:13:02,300
So I suppose we would need to do something along the lines of

2251
02:13:14,600 --> 02:13:15,100
Abyss.

2252
02:13:33,700 --> 02:13:37,000
And I think the the scale probably also would need to be taken into

2253
02:13:37,000 --> 02:13:37,600
account here.

2254
02:13:39,000 --> 02:13:45,000
So that's, you know, the actual Collision volumes there.

2255
02:13:45,000 --> 02:13:48,400
I think that are involved, you can kind of see that.

2256
02:13:48,400 --> 02:13:51,700
The heads got one too, that's moving around with the head at the

2257
02:13:51,700 --> 02:13:54,300
moment, which is again.

2258
02:13:54,300 --> 02:14:00,000
Correct, I think because it's, you know, we're drawing it here but

2259
02:14:00,200 --> 02:14:01,100
actually is

2260
02:14:02,800 --> 02:14:07,600
Correct to where it should be and so yeah you can kind of see where

2261
02:14:07,600 --> 02:14:08,600
all those are.

2262
02:14:08,600 --> 02:14:11,200
And those look, you know, pretty good those that's those are

2263
02:14:11,200 --> 02:14:16,500
definitely the tree ones look right to me so I think that's pretty

2264
02:14:16,500 --> 02:14:17,200
close again.

2265
02:14:17,200 --> 02:14:21,700
I think we gotta, we want to eliminate that object transform scale bit

2266
02:14:21,700 --> 02:14:22,200
there.

2267
02:14:24,500 --> 02:14:26,900
So little by little we're getting back to something where everything

2268
02:14:26,900 --> 02:14:28,100
is relatively sane.

2269
02:14:28,500 --> 02:14:31,300
Now, one of the things that we don't do it currently is when we're

2270
02:14:31,300 --> 02:14:32,400
back in the game view.

2271
02:14:32,400 --> 02:14:32,500
We

2272
02:14:32,700 --> 02:14:37,200
Don't set the debug View at.

2273
02:14:37,200 --> 02:14:38,300
All, right?

2274
02:14:38,300 --> 02:14:43,200
And so I'm not sure how we want to handle that.

2275
02:14:44,200 --> 02:14:46,700
Like, you can see here, we got the use, debug camera thing.

2276
02:14:47,300 --> 02:14:52,900
I don't know if we want to do something where we just set the debug

2277
02:14:52,900 --> 02:14:55,300
camera to be the same thing as the game camera.

2278
02:14:55,700 --> 02:14:59,000
I mean, one way to do that and I said, I don't know to what extent we

2279
02:14:59,000 --> 02:14:59,800
want to do at this.

2280
02:15:00,500 --> 02:15:04,300
But I'm just gonna throw it out there as an option is when we actually

2281
02:15:04,300 --> 02:15:06,300
do set, the camera transform.

2282
02:15:06,700 --> 02:15:08,300
If we're not, if we're

2283
02:15:10,600 --> 02:15:15,000
When we do a push set up, you know, if it's a debug camera or as it's

2284
02:15:15,000 --> 02:15:19,100
not a debug camera, we also set the debug camera, right?

2285
02:15:19,100 --> 02:15:22,000
So we do, you know, render group

2286
02:15:26,100 --> 02:15:27,300
Debug transform.

2287
02:15:30,600 --> 02:15:32,600
Equals render group game X form.

2288
02:15:32,800 --> 02:15:36,500
So, basically, any time we set the game transform, we also set the

2289
02:15:36,500 --> 02:15:39,900
debug transform, but you can then override the debug transform and

2290
02:15:39,900 --> 02:15:40,700
what that does, right.

2291
02:15:40,700 --> 02:15:49,900
Is that just makes it so that we can, you know, render our our debug

2292
02:15:49,900 --> 02:15:53,200
stuff in the game view as well, so you can actually see them all.

2293
02:15:54,400 --> 02:15:57,600
So, you know, here's here's the debug camera, right?

2294
02:15:58,100 --> 02:16:00,100
And then we switch back, we still get, you know.

2295
02:16:00,300 --> 02:16:02,800
Actual placement for some of this stuff.

2296
02:16:05,600 --> 02:16:09,500
You know, and again, that's just sort of a way for us to make that

2297
02:16:09,500 --> 02:16:12,200
stuff flow a little bit nicer.

2298
02:16:44,299 --> 02:16:44,600
This.

2299
02:16:44,600 --> 02:16:47,200
You said you mentioned that you use discriminated unions.

2300
02:16:47,200 --> 02:16:49,500
Have you seen rust implementation of some types?

2301
02:16:49,700 --> 02:16:54,100
I have not, I have not really looked at rest so I have not seen

2302
02:16:54,100 --> 02:16:55,900
breasts implementation of anything really.

2303
02:16:59,700 --> 02:17:00,500
Jesse 23.

2304
02:17:00,500 --> 02:17:03,100
I was looking at how the vector types are set up in handmade here, as

2305
02:17:03,100 --> 02:17:03,600
unions.

2306
02:17:03,900 --> 02:17:07,000
As far as I know, it's undefined Behavior to write a value to one type

2307
02:17:07,000 --> 02:17:07,700
of a union.

2308
02:17:08,100 --> 02:17:10,799
And then read as another type is doing something like this.

2309
02:17:10,799 --> 02:17:15,000
Well, defined Veeck, l, dot x equals 5 and then read as veck.

2310
02:17:15,000 --> 02:17:19,600
L.E 0, or is it one of the cases where we rely that a reasonable

2311
02:17:19,600 --> 02:17:19,900
compiler?

2312
02:17:19,900 --> 02:17:21,100
Will do the right thing.

2313
02:17:22,000 --> 02:17:24,000
The answer there is I have no idea.

2314
02:17:25,299 --> 02:17:30,299
I pretty much just use see as the best thing I have for an improved

2315
02:17:30,299 --> 02:17:31,299
Assembly Language.

2316
02:17:31,900 --> 02:17:36,000
And so I can guarantee that that works just fine on all the platforms

2317
02:17:36,000 --> 02:17:37,299
that you ship games on.

2318
02:17:38,100 --> 02:17:41,400
And so, that's pretty much the end of the inquiry for me, as to

2319
02:17:41,400 --> 02:17:46,000
whether the spec allows it as far as I'm concerned, the C plus plus

2320
02:17:46,000 --> 02:17:47,400
spec is just terrible.

2321
02:17:47,400 --> 02:17:48,200
Like, I hate it.

2322
02:17:48,700 --> 02:17:51,400
It doesn't guarantee any of the things that I usually want to

2323
02:17:51,400 --> 02:17:52,100
guarantee.

2324
02:17:52,400 --> 02:17:54,900
And so there's tons of cases where

2325
02:17:55,000 --> 02:17:58,400
There's stuff in there that I'm just like, I I don't know how you're

2326
02:17:58,400 --> 02:17:59,799
supposed to write reasonable code.

2327
02:18:00,000 --> 02:18:03,299
And make use of these features with the way that it works, right?

2328
02:18:05,600 --> 02:18:06,600
And so, I don't know.

2329
02:18:06,799 --> 02:18:10,799
I have no idea what the latest version of the spec says about that

2330
02:18:11,000 --> 02:18:12,299
aspect of unions.

2331
02:18:13,000 --> 02:18:15,799
If you can't do that, then unions are kind of useless.

2332
02:18:15,799 --> 02:18:18,500
And I don't know why you have them, right?

2333
02:18:19,799 --> 02:18:24,400
Because if you can't use the values in Play It's really just a space

2334
02:18:24,400 --> 02:18:29,299
saving feature at that point, which is a very limited which is very,

2335
02:18:29,299 --> 02:18:29,799
very limited.

2336
02:18:30,000 --> 02:18:33,200
In terms of utility, especially nowadays, when computers have so much

2337
02:18:33,200 --> 02:18:33,700
memory.

2338
02:18:33,900 --> 02:18:37,400
The idea that the only thing you can use a union for is to Overlay Two

2339
02:18:37,400 --> 02:18:41,600
Types on top of each other in a space-saving way, seems incredibly

2340
02:18:41,600 --> 02:18:42,400
misguided.

2341
02:18:42,799 --> 02:18:45,299
So, I would sure hope that the spec doesn't say that, but it wouldn't

2342
02:18:45,299 --> 02:18:46,299
surprise me if it did.

2343
02:18:46,299 --> 02:18:49,799
Because the spec says, some pretty ridiculous things that I feel like

2344
02:18:49,900 --> 02:18:50,600
a reasonable.

2345
02:18:50,700 --> 02:18:51,600
No reasonable programmer.

2346
02:18:51,600 --> 02:18:53,400
Could ever really say was a good idea.

2347
02:20:40,100 --> 02:20:43,800
Would you describe discriminated Union to the general public?

2348
02:20:45,300 --> 02:20:45,900
Sure.

2349
02:20:50,600 --> 02:20:51,100
Sue.

2350
02:20:54,700 --> 02:20:55,200
You know.

2351
02:20:58,600 --> 02:20:59,700
In programming.

2352
02:21:00,800 --> 02:21:04,100
Even practical programming, not just theoretical programming.

2353
02:21:04,100 --> 02:21:09,400
A lot of times were pretty concerned about the idea of defining

2354
02:21:10,000 --> 02:21:14,700
collection of named elements that oftentimes, you know, take up space

2355
02:21:14,700 --> 02:21:15,500
or whatever else.

2356
02:21:15,800 --> 02:21:19,200
And so, a pretty common thing that we would do, you know, in any

2357
02:21:19,200 --> 02:21:23,400
programming language in C C++, there's a notion of struct, right?

2358
02:21:23,900 --> 02:21:28,300
And we might Define one structure and we say that that structure

2359
02:21:28,300 --> 02:21:29,800
involves some variables like

2360
02:21:30,000 --> 02:21:32,700
Context, you know, float.

2361
02:21:32,700 --> 02:21:33,300
Why

2362
02:21:35,500 --> 02:21:37,100
Well, that's really good writing there.

2363
02:21:42,500 --> 02:21:43,100
Right?

2364
02:21:43,400 --> 02:21:46,300
So in this case we've got struck Foo index float.

2365
02:21:46,300 --> 02:21:48,200
Why it's fairly understandable?

2366
02:21:48,200 --> 02:21:49,100
What we're doing there?

2367
02:21:49,100 --> 02:21:51,000
Everyone knows what that is in.

2368
02:21:51,000 --> 02:21:55,100
Another case, we may have some other thing here and maybe that's got

2369
02:21:55,100 --> 02:21:56,000
something else in it.

2370
02:21:56,000 --> 02:21:58,000
Maybe that's got like Kara star.

2371
02:21:59,600 --> 02:22:00,200
Name.

2372
02:22:03,800 --> 02:22:04,200
Right.

2373
02:22:07,100 --> 02:22:09,900
So when you look at these two things, what we've defined here is two

2374
02:22:09,900 --> 02:22:11,600
separate bags of data.

2375
02:22:12,100 --> 02:22:13,500
They each have sizes.

2376
02:22:13,500 --> 02:22:14,400
What are the sizes?

2377
02:22:14,400 --> 02:22:19,700
Well, in 64-bit worlds on an x 64 machine, for example, this is 4

2378
02:22:19,700 --> 02:22:20,300
bytes,

2379
02:22:21,600 --> 02:22:23,000
And this is 4 bytes.

2380
02:22:23,900 --> 02:22:26,400
So this whole structure takes up eight bytes of space.

2381
02:22:27,200 --> 02:22:29,800
This guy right here is 8 bytes by himself.

2382
02:22:29,800 --> 02:22:30,500
He's a pointer.

2383
02:22:30,500 --> 02:22:31,300
So, he's bigger.

2384
02:22:32,400 --> 02:22:34,500
And so, this whole thing takes up, eight bytes as well.

2385
02:22:34,500 --> 02:22:40,000
These two are the same size, so a single chunk of 8, B could be talked

2386
02:22:40,000 --> 02:22:41,100
about, in either way.

2387
02:22:42,100 --> 02:22:46,600
And really what we're saying is that we've got something of 8, bytes,

2388
02:22:46,600 --> 02:22:47,200
right?

2389
02:22:48,900 --> 02:22:52,400
0 1 2 3, 4 5 6.

2390
02:22:55,000 --> 02:22:57,700
Seven groups like dude, one more than I needed.

2391
02:22:59,400 --> 02:23:01,000
Seven right.

2392
02:23:01,900 --> 02:23:02,100
Really?

2393
02:23:02,100 --> 02:23:04,200
What we're talking about here is this is memory.

2394
02:23:05,200 --> 02:23:08,200
We can talk about this memory into different ways, right?

2395
02:23:08,200 --> 02:23:11,500
One way is the Foo way and the foo way looks like this.

2396
02:23:13,400 --> 02:23:14,500
This is the Foo way.

2397
02:23:15,500 --> 02:23:21,900
This guy here is X, and here is y, another way is the bar way.

2398
02:23:23,900 --> 02:23:24,500
Right.

2399
02:23:26,500 --> 02:23:30,200
And the bar way is saying this whole thing is the name pointer, right?

2400
02:23:31,000 --> 02:23:31,800
It's a pointer.

2401
02:23:33,500 --> 02:23:34,300
Called name.

2402
02:23:34,300 --> 02:23:36,900
In this case, it's an inn called X and a float call why.

2403
02:23:37,600 --> 02:23:41,700
Now, hopefully, we're all very familiar with this idea that basically

2404
02:23:41,700 --> 02:23:45,200
programming languages, give us ways to talk about memory in a

2405
02:23:45,200 --> 02:23:49,300
structured fashion that lets us quickly refer to some portion of that

2406
02:23:49,300 --> 02:23:52,300
memory and have the compiler understand the way.

2407
02:23:52,300 --> 02:23:55,000
We want that memory treated as an end as a float as a pointer,

2408
02:23:55,000 --> 02:23:55,600
whatever.

2409
02:23:55,700 --> 02:23:59,800
Right so this is just a general thing that basically every programming

2410
02:24:00,000 --> 02:24:05,800
It has is the ability to talk about a chunk of memory in a structured

2411
02:24:05,800 --> 02:24:06,000
way.

2412
02:24:06,000 --> 02:24:09,200
That's more than just, what are some bites that are in that memory,

2413
02:24:09,800 --> 02:24:10,300
okay?

2414
02:24:12,300 --> 02:24:15,900
so furthermore, we can usually in most programming languages and see

2415
02:24:15,900 --> 02:24:17,100
it's called a union

2416
02:24:19,600 --> 02:24:23,800
We can talk about something that could be either, right?

2417
02:24:24,000 --> 02:24:26,800
And the way that we do that is we say okay, we've got a foo

2418
02:24:28,400 --> 02:24:28,900
Here.

2419
02:24:30,500 --> 02:24:31,700
And we've got a bar.

2420
02:24:33,300 --> 02:24:33,800
Here.

2421
02:24:35,500 --> 02:24:40,500
Now, we got some Union, that's like, you know, Foo or bar, and it can

2422
02:24:40,500 --> 02:24:43,800
be either of these two things and then what happens in the code,

2423
02:24:43,800 --> 02:24:44,100
right.

2424
02:24:44,100 --> 02:24:45,800
And we've seen ourselves use these.

2425
02:24:45,800 --> 02:24:47,500
And in handmade here.

2426
02:24:47,500 --> 02:24:52,200
All the time is now when someone has one of these, when they're using

2427
02:24:52,200 --> 02:24:56,500
one of these, they can choose to refer to the food section or the bar

2428
02:24:56,500 --> 02:25:02,500
section, depending on what they believe, the one they have is, right?

2429
02:25:03,800 --> 02:25:04,900
So a union is just a

2430
02:25:05,300 --> 02:25:08,100
Of representing exactly what I just drew here.

2431
02:25:08,300 --> 02:25:11,500
A union is a way of saying I have a chunk of memory.

2432
02:25:11,600 --> 02:25:13,400
I might talk about it in one way.

2433
02:25:13,400 --> 02:25:17,700
I might talk about it in another way, it's up to my code, which way it

2434
02:25:17,700 --> 02:25:20,300
wants to talk about this same piece of memory.

2435
02:25:22,800 --> 02:25:23,700
And now it's worth noting.

2436
02:25:23,700 --> 02:25:26,800
Before I go any further that these two don't have to be the same size,

2437
02:25:26,900 --> 02:25:31,600
the union will, but just be defined to be as big as necessary to hold

2438
02:25:31,600 --> 02:25:32,700
the biggest one.

2439
02:25:33,000 --> 02:25:38,400
So if this one had a second pointer in there, Kara star name to, which

2440
02:25:38,400 --> 02:25:41,000
would have blown this out to be another eight bytes long.

2441
02:25:41,000 --> 02:25:45,300
Even though Foo ends here and bar ends here, it wouldn't matter.

2442
02:25:45,300 --> 02:25:49,600
We could still do this Union it would just be a 16 byte Union with

2443
02:25:49,600 --> 02:25:51,900
eight bytes of nothing at the end.

2444
02:25:52,100 --> 02:25:56,400
if you were using it as a foo or all 16 B used is, if you were using

2445
02:25:56,400 --> 02:25:57,600
it as a bar,

2446
02:25:58,700 --> 02:25:59,100
Right.

2447
02:26:00,500 --> 02:26:04,700
So structured data, Union is a combination of structured data where we

2448
02:26:04,700 --> 02:26:08,800
say we can look at it in one of two ways or n ways we can add more

2449
02:26:08,800 --> 02:26:09,500
than 2.

2450
02:26:10,600 --> 02:26:13,700
And so then that finally brings us to the concept of a discriminated

2451
02:26:13,700 --> 02:26:14,200
Union

2452
02:26:22,600 --> 02:26:26,600
A discriminated Union is exactly what its name implies, it is a union,

2453
02:26:27,100 --> 02:26:31,000
whatever that means in your programming language and see it is

2454
02:26:31,200 --> 02:26:37,000
generally talking about literally a union like the keyword Union, but

2455
02:26:37,000 --> 02:26:39,000
it may be called something else in other programs, right?

2456
02:26:40,000 --> 02:26:46,200
That is include some way of figuring out, which of the ones that's,

2457
02:26:46,700 --> 02:26:49,600
which of the elements of the Union is actually, the one being used in

2458
02:26:49,600 --> 02:26:50,200
this case.

2459
02:26:51,300 --> 02:26:56,100
So, it looks like exactly like what we had before.

2460
02:26:59,700 --> 02:26:59,800
Right.

2461
02:27:04,900 --> 02:27:09,300
It looks like that but now it is wrapped inside a struct.

2462
02:27:15,300 --> 02:27:19,700
And that struct has in it, a type field.

2463
02:27:29,300 --> 02:27:31,700
This is the discriminating part.

2464
02:27:31,900 --> 02:27:36,900
It's saying that I'm remembering which of the two I was, and I'm

2465
02:27:36,900 --> 02:27:42,700
writing a code into the memory that is reserved for this to specify

2466
02:27:42,700 --> 02:27:43,500
which one it is.

2467
02:27:44,100 --> 02:27:46,100
This is typically an enum

2468
02:27:54,900 --> 02:27:56,200
This flu or a bar type.

2469
02:27:56,200 --> 02:28:01,300
Typically then says, okay, you know, I am type.

2470
02:28:03,500 --> 02:28:08,000
Fuu, you know is one let's say or maybe I don't even specify anything

2471
02:28:08,200 --> 02:28:10,500
say type Foo type bar.

2472
02:28:10,800 --> 02:28:12,800
So this gets assigned to a one.

2473
02:28:12,900 --> 02:28:13,800
I'm sorry a zero.

2474
02:28:13,800 --> 02:28:18,800
This gets assigned to a 1 and so then in the code, what I do typically

2475
02:28:19,700 --> 02:28:23,500
what the programmer does not me specifically is they look at the type

2476
02:28:23,500 --> 02:28:27,600
field and that lets them know which of these they're going to be

2477
02:28:27,600 --> 02:28:28,400
looking at.

2478
02:28:29,100 --> 02:28:29,900
Right?

2479
02:28:29,900 --> 02:28:32,400
So this is how we get a discriminated Union.

2480
02:28:32,600 --> 02:28:36,800
It's a union of things, but rather than just being candid and having

2481
02:28:36,800 --> 02:28:40,800
no idea, which of them might be the one that was actually intended by

2482
02:28:40,800 --> 02:28:43,700
the person who originally created this memory, somewhere early in the

2483
02:28:43,700 --> 02:28:48,200
program, whoever created the memory is now telling you which one it

2484
02:28:48,200 --> 02:28:48,500
is.

2485
02:28:49,000 --> 02:28:50,300
And that's very useful.

2486
02:28:50,700 --> 02:28:53,500
So typically that's get used with the switch statement.

2487
02:28:55,500 --> 02:28:59,300
So you say in this case, you know, I get one of these past in, you

2488
02:28:59,300 --> 02:29:03,500
know, maybe it's a one, you know, I get one of these discs Foo or

2489
02:29:03,500 --> 02:29:04,200
bars, right?

2490
02:29:04,200 --> 02:29:09,100
So I have a discriminated Foo or bar.

2491
02:29:09,100 --> 02:29:16,500
A I have that here and then I'm going to say a DOT type in my switch.

2492
02:29:16,900 --> 02:29:19,500
And then I come through when I say, case, you know,

2493
02:29:20,600 --> 02:29:23,400
type Foo, and in this case,

2494
02:29:25,400 --> 02:29:26,900
I use it as a foo.

2495
02:29:27,000 --> 02:29:31,600
So I'm going to see stuff like a DOT Foo something, right?

2496
02:29:31,900 --> 02:29:34,600
And then I have a case for type bar.

2497
02:29:35,600 --> 02:29:36,200
As well.

2498
02:29:41,300 --> 02:29:41,800
Right.

2499
02:29:46,500 --> 02:29:49,600
and so this is how a discriminative union typically is used first,

2500
02:29:49,600 --> 02:29:52,700
there is something that checks the discriminate or write the thing

2501
02:29:52,700 --> 02:29:56,600
that tells me what the type of thing is, and then I do different code

2502
02:29:56,800 --> 02:29:59,300
based on which type it actually is

2503
02:30:01,300 --> 02:30:02,500
Hopefully, that makes some sense.

2504
02:30:04,600 --> 02:30:07,200
Now, it's worth noting that, you know,

2505
02:30:09,500 --> 02:30:14,600
I don't know why I imagine that somewhere.

2506
02:30:14,600 --> 02:30:19,300
There is some record of Darkness, true stripper, whatever explaining

2507
02:30:19,300 --> 02:30:21,600
why he didn't like discriminated unions.

2508
02:30:23,500 --> 02:30:27,900
I have no idea why because rather than properly just supporting

2509
02:30:27,900 --> 02:30:29,900
discriminated unions in C++.

2510
02:30:30,500 --> 02:30:34,700
He instead chose to use inheritance as the primary model for sort of

2511
02:30:34,700 --> 02:30:40,500
the Poor Man's discriminated Union and it took a long time to even get

2512
02:30:40,500 --> 02:30:43,100
to the point where it could do, the things that has remained.

2513
02:30:43,100 --> 02:30:48,000
Union can do it, required are TTI before you could ever even.

2514
02:30:48,000 --> 02:30:48,800
Get to that point.

2515
02:30:48,800 --> 02:30:49,400
Our T t.i.

2516
02:30:49,400 --> 02:30:53,100
and and, and casting.

2517
02:30:53,700 --> 02:30:58,900
Are the only way you can really emulate them and at that, even at that

2518
02:30:58,900 --> 02:31:02,900
point it's really weak and isn't as good as the manual implementation,

2519
02:31:02,900 --> 02:31:04,100
which is the one I've written here.

2520
02:31:05,600 --> 02:31:09,800
So for whatever reason, he failed to appreciate the necessity for or

2521
02:31:09,800 --> 02:31:14,400
underestimated the degree to, which category Theory demands this and

2522
02:31:14,500 --> 02:31:18,500
and can clearly tell you that inheritance is not a substitute for

2523
02:31:18,900 --> 02:31:19,600
discriminated.

2524
02:31:19,600 --> 02:31:20,100
Unions.

2525
02:31:21,900 --> 02:31:25,500
At least not the kind of inheritance in C++ provides I suspect.

2526
02:31:25,500 --> 02:31:30,700
It was just a lack of understanding of the fundamentals of how

2527
02:31:30,700 --> 02:31:33,700
programming Works, which, again, is endemic to C++.

2528
02:31:33,700 --> 02:31:36,000
And one of things you can say about the design of C++ pretty much

2529
02:31:36,000 --> 02:31:40,600
across the board, is that it lacks any real understanding of the

2530
02:31:40,600 --> 02:31:43,700
fundamental principles of programming, I would say either practical or

2531
02:31:43,700 --> 02:31:47,300
theoretical, like I suspect that a theoretical programming

2532
02:31:47,300 --> 02:31:50,800
perspective, person would have no end to the Greet, which they thought

2533
02:31:50,800 --> 02:31:51,200
C++.

2534
02:31:51,400 --> 02:31:51,900
Awful.

2535
02:31:52,300 --> 02:31:54,300
And the same thing is true of practical programming.

2536
02:31:54,700 --> 02:31:56,700
They're just so many ways where you're like, I don't know how you

2537
02:31:56,700 --> 02:31:59,700
didn't understand how important discriminated univer, but you didn't

2538
02:32:00,300 --> 02:32:02,100
and that's just unfortunate.

2539
02:32:02,100 --> 02:32:06,000
But, you know, you can construct the manually and that's what I do in

2540
02:32:06,000 --> 02:32:07,200
a better programming language.

2541
02:32:07,200 --> 02:32:09,200
These would be constructed automatically for you.

2542
02:32:09,400 --> 02:32:11,600
You would just say I have a discriminated Union.

2543
02:32:11,600 --> 02:32:13,400
The discriminating Union is of these types.

2544
02:32:13,500 --> 02:32:18,300
It would automatically create the type field for you in a stable way

2545
02:32:18,300 --> 02:32:21,200
that you could control and blah, blah blah, but

2546
02:32:21,300 --> 02:32:24,500
But C++ is not that language and it cannot do that thing.

2547
02:32:24,800 --> 02:32:26,200
So that's where we're at.

2548
02:32:33,400 --> 02:32:34,800
G 1642.

2549
02:32:34,800 --> 02:32:38,000
Can you give a motivating example for these discriminating unions?

2550
02:32:40,000 --> 02:32:40,900
Yes, I can.

2551
02:32:41,700 --> 02:32:46,900
So typically, the, the point of a discriminated Union is, is really

2552
02:32:46,900 --> 02:32:52,700
very straightforward, and it happens everywhere in programming and if

2553
02:32:52,700 --> 02:32:58,000
I could summarize, I'll go sort of explain the importance of

2554
02:32:58,000 --> 02:32:59,900
discriminated unions by

2555
02:33:00,000 --> 02:33:03,100
Sing them to with.

2556
02:33:05,200 --> 02:33:08,400
With say inheritance which specifically doesn't support the thing that

2557
02:33:08,400 --> 02:33:09,200
I'm talking about.

2558
02:33:11,100 --> 02:33:15,400
So, suppose that I have two pieces of code that are separated by

2559
02:33:15,400 --> 02:33:17,200
control flow in my program.

2560
02:33:17,200 --> 02:33:20,900
So I have, let's say to make it very straight forward.

2561
02:33:24,300 --> 02:33:30,500
I have two pieces of code I have startup right and I have shut down,

2562
02:33:31,100 --> 02:33:38,000
let's say, right and so, in start-up what I'm going to do is I'm going

2563
02:33:38,000 --> 02:33:40,800
to pick whether or not my back end.

2564
02:33:41,000 --> 02:33:42,500
To the code, right?

2565
02:33:44,900 --> 02:33:47,400
Is going to be Vulcan or opengl.

2566
02:33:47,700 --> 02:33:49,500
Let's say right?

2567
02:33:50,000 --> 02:33:56,400
So I'm going to create a renderer and I want to create and start up

2568
02:33:56,400 --> 02:33:59,100
one that's either going to be Vulcan or opengl.

2569
02:33:59,200 --> 02:34:02,800
So I'm going to have some preference, let's say maybe and I'm going to

2570
02:34:02,800 --> 02:34:06,500
do an if on that preference and in one case I'm going to do like, you

2571
02:34:06,500 --> 02:34:07,500
know, renderer

2572
02:34:09,100 --> 02:34:15,700
Equals Vulcan and in the other case I'm going to do and you know I

2573
02:34:15,700 --> 02:34:19,400
guess like maybe let's do it this way render equals in it Vulcan that

2574
02:34:19,400 --> 02:34:21,300
returns you know, one of these things.

2575
02:34:24,200 --> 02:34:29,700
And in the else Clause I'm going to do render equals in it opengl

2576
02:34:29,700 --> 02:34:30,200
right?

2577
02:34:30,200 --> 02:34:34,800
Because maybe you know, I've got an opengl path but it's not as good

2578
02:34:34,800 --> 02:34:35,800
and I got a Vulcan path.

2579
02:34:35,800 --> 02:34:38,200
That's like more highly optimized because I got, you know, more

2580
02:34:38,200 --> 02:34:39,800
control off of it or whatever.

2581
02:34:40,200 --> 02:34:41,200
Who knows, what?

2582
02:34:41,300 --> 02:34:43,700
So some stuff happens here and I'm trying to figure out which one I'm

2583
02:34:43,700 --> 02:34:45,400
going to dump to, or maybe it doesn't even matter.

2584
02:34:45,400 --> 02:34:49,600
They're both good paths but the opengl one requires some extensions or

2585
02:34:49,600 --> 02:34:50,900
I don't know what like, who knows.

2586
02:34:51,100 --> 02:34:53,200
But I've got a preference here, maybe the user even pick.

2587
02:34:53,400 --> 02:34:54,500
At which one they want to run.

2588
02:34:56,200 --> 02:35:00,600
Okay, so now in shutdown, I want to call some shut down.

2589
02:35:00,700 --> 02:35:04,900
I need to call like d in it Vulcan or D init opengl, right?

2590
02:35:06,500 --> 02:35:11,100
and so, what I want to do here is say, you know, if you know it was

2591
02:35:11,100 --> 02:35:11,800
Vulcan

2592
02:35:14,500 --> 02:35:19,300
then I want to do like d in it or you know, do unit Vulcan

2593
02:35:20,900 --> 02:35:21,600
Renderer.

2594
02:35:25,200 --> 02:35:26,500
And here I want to say,

2595
02:35:28,200 --> 02:35:30,200
Gian it opengl.

2596
02:35:32,000 --> 02:35:32,300
Right.

2597
02:35:32,300 --> 02:35:33,300
Very straightforward.

2598
02:35:34,500 --> 02:35:39,700
Now this is the case where both techniques work equally.

2599
02:35:39,700 --> 02:35:45,000
Well okay, so if I want to implement this by a discriminated Union you

2600
02:35:45,000 --> 02:35:46,500
can see how I would do it.

2601
02:35:46,500 --> 02:35:52,100
The renderer just has a type field in it which says which one it is

2602
02:35:52,900 --> 02:35:56,600
and then it has some data that comes after it that is completely

2603
02:35:56,600 --> 02:35:59,800
specialized to Vulcan or completely specifies to opengl and the

2604
02:36:00,000 --> 02:36:04,100
Then who's using it doesn't have to know anywhere in between here

2605
02:36:04,300 --> 02:36:07,500
what, which one it actually is right?

2606
02:36:07,500 --> 02:36:09,900
And when it gets to the end, it can switch on the type.

2607
02:36:10,300 --> 02:36:14,200
Similarly, I could implement this using inheritance by having.

2608
02:36:14,200 --> 02:36:16,400
You know, I've already said how to do those criminal Union when I just

2609
02:36:16,400 --> 02:36:17,400
said that right.

2610
02:36:17,400 --> 02:36:22,400
But I could do one by inheritance by having you know a struct renderer

2611
02:36:24,600 --> 02:36:26,100
That's some Base Class here.

2612
02:36:26,200 --> 02:36:32,200
Right here is the base class definition and in the base class, I would

2613
02:36:32,200 --> 02:36:33,700
have something like in it.

2614
02:36:34,900 --> 02:36:35,800
And T in it.

2615
02:36:37,200 --> 02:36:37,700
Right.

2616
02:36:37,700 --> 02:36:39,500
And these would be virtual calls.

2617
02:36:44,000 --> 02:36:47,900
Okay, and then I would have a struct Vulcan renderer.

2618
02:36:54,100 --> 02:36:55,400
In a struct.

2619
02:36:56,800 --> 02:36:57,900
Opengl renderer.

2620
02:37:02,300 --> 02:37:05,600
And both of these would have a public in them where they inherit from

2621
02:37:05,600 --> 02:37:06,200
renderer.

2622
02:37:10,300 --> 02:37:11,900
Okay, right.

2623
02:37:11,900 --> 02:37:13,100
We all know how that would look.

2624
02:37:13,700 --> 02:37:16,600
And what would happen there is the startup and shutdown instead of

2625
02:37:16,600 --> 02:37:18,000
doing this, right?

2626
02:37:18,200 --> 02:37:21,700
You would just have to in this case, still switch on the preference

2627
02:37:21,900 --> 02:37:26,700
and you would create one of these derived classes here, right?

2628
02:37:26,700 --> 02:37:29,400
But then when you get to shut down, you never do this.

2629
02:37:29,400 --> 02:37:35,600
If instead, what you do is just renderer Arrow right d in it and you

2630
02:37:35,600 --> 02:37:39,700
trust that the virtual function, dispatch will call down into one of

2631
02:37:39,700 --> 02:37:39,900
these.

2632
02:37:40,100 --> 02:37:45,800
You Saucy, gentleman here that actually handle the call, right?

2633
02:37:47,100 --> 02:37:48,000
Hopefully, that makes sense.

2634
02:37:49,000 --> 02:37:51,000
So what C++ decided was?

2635
02:37:51,000 --> 02:37:53,500
This was the only one you ever needed.

2636
02:37:53,600 --> 02:37:56,500
They were like, I don't understand why you couldn't just Implement all

2637
02:37:56,500 --> 02:37:58,000
your code in terms of this.

2638
02:37:58,100 --> 02:38:00,400
Look at it works, just fine in here.

2639
02:38:00,400 --> 02:38:04,000
You just create one of the derived classes and then at the end you

2640
02:38:04,000 --> 02:38:08,900
just called e in it and you don't do the if right off we go

2641
02:38:08,900 --> 02:38:09,700
everything's fine.

2642
02:38:10,900 --> 02:38:15,900
However, this is a really shallow understanding of how code actually

2643
02:38:15,900 --> 02:38:21,300
works because what it assumes a priority is that you always have

2644
02:38:21,300 --> 02:38:23,000
what's called single dispatch.

2645
02:38:27,800 --> 02:38:33,000
Which is to say that the only thing that ever determines, how a code

2646
02:38:33,000 --> 02:38:40,400
path will work, is the type of one object in the code path, right?

2647
02:38:40,900 --> 02:38:41,600
Why?

2648
02:38:41,900 --> 02:38:46,000
Because virtual functions can only dispatch on one type.

2649
02:38:46,400 --> 02:38:50,800
There is no such thing as a union virtual dispatch that dispatchers

2650
02:38:50,800 --> 02:38:53,400
off of the type of two things, right?

2651
02:38:54,000 --> 02:38:56,800
And furthermore, this gets into a really sort of

2652
02:38:56,900 --> 02:39:00,000
Deep, very core aspect of programming that.

2653
02:39:00,000 --> 02:39:04,500
Everybody should understand, and the people who design C++ should

2654
02:39:04,500 --> 02:39:10,000
understand, but didn't which is that single dispatch is tractable

2655
02:39:10,000 --> 02:39:12,200
because it is 0n, right?

2656
02:39:12,400 --> 02:39:18,600
Single dispatch is tractable to write as a systemic sort of stupid,

2657
02:39:18,600 --> 02:39:20,600
derived version here, right?

2658
02:39:20,700 --> 02:39:25,000
Because it's 0n, there's only ever as many dispatches as there.

2659
02:39:25,000 --> 02:39:27,400
Are derived types, right?

2660
02:39:31,800 --> 02:39:34,800
So the end here is how many different derive types we have.

2661
02:39:35,000 --> 02:39:40,000
And so that's pretty tractable, on the other hand, a double dispatch

2662
02:39:40,000 --> 02:39:42,500
or worse yet triple or quadruple.

2663
02:39:42,500 --> 02:39:44,000
Dispatch, or God knows what?

2664
02:39:44,100 --> 02:39:49,200
Right is N squared, right?

2665
02:39:49,700 --> 02:39:53,100
Which is completely intractable in most cases and we can talk about

2666
02:39:53,100 --> 02:39:56,000
why it's so important to have discriminated unions in order to be able

2667
02:39:56,000 --> 02:39:58,100
to support and square it and I can talk about why?

2668
02:39:58,300 --> 02:40:01,500
So let's say why so what's doubled

2669
02:40:01,600 --> 02:40:06,600
Patch double dispatch occurs in situations for example, where you've

2670
02:40:06,600 --> 02:40:09,400
got something like, Collision detection, right?

2671
02:40:09,600 --> 02:40:12,700
So, let's say I've got something where I want to do, you know, a

2672
02:40:12,700 --> 02:40:15,300
discriminated Union and I've got, you know, struct

2673
02:40:16,200 --> 02:40:17,000
Collider.

2674
02:40:19,600 --> 02:40:22,900
Well, the C++ inheritance model would have us believe that everything

2675
02:40:22,900 --> 02:40:28,400
that you wanted to support to describe in terms of collisions, right?

2676
02:40:28,900 --> 02:40:33,400
Could be described in terms of like collider, you know, cylinder.

2677
02:40:33,400 --> 02:40:34,200
Let's say,

2678
02:40:38,400 --> 02:40:43,800
Collider volume Collider.

2679
02:40:45,500 --> 02:40:46,000
I don't know.

2680
02:40:46,200 --> 02:40:48,100
Cylinder volume and sphere.

2681
02:40:49,600 --> 02:40:50,800
Blah, blah blah, right?

2682
02:40:52,800 --> 02:40:56,100
So when you have these situations, you've got cylinder, volume sphere

2683
02:40:56,100 --> 02:40:56,800
at cetera.

2684
02:40:59,300 --> 02:41:01,300
And each one of these is going to be public collider.

2685
02:41:01,400 --> 02:41:04,000
You end up in a situation where you're going to have something like

2686
02:41:04,100 --> 02:41:06,000
you know, you know.

2687
02:41:07,500 --> 02:41:08,800
Intersex.

2688
02:41:10,500 --> 02:41:14,800
Or, you know, does intersect, right?

2689
02:41:15,200 --> 02:41:18,900
And you're going to have to test for intersection with to colliders

2690
02:41:19,200 --> 02:41:23,400
collider a, and collider be.

2691
02:41:24,100 --> 02:41:27,600
And right here already, we're in a huge conundrum.

2692
02:41:27,900 --> 02:41:32,700
As far as C++ has original conceptualization of how type should work.

2693
02:41:33,000 --> 02:41:36,300
And the reason why you're in a huge conundrum here is because you

2694
02:41:36,300 --> 02:41:39,600
cannot dispatch at all in a

2695
02:41:40,100 --> 02:41:41,700
Double way, right?

2696
02:41:42,500 --> 02:41:46,700
There's no way for you to say, I would like to do a double dispatch

2697
02:41:46,700 --> 02:41:50,200
here, where I want to collide two, two different types with each

2698
02:41:50,200 --> 02:41:50,800
other, right?

2699
02:41:50,800 --> 02:41:54,700
And I want you to pick the right, one in this Matrix, that looks like

2700
02:41:54,700 --> 02:41:59,800
this right cylinder volume sphere.

2701
02:42:00,900 --> 02:42:06,800
Cylinder volume sphere like so right.

2702
02:42:06,900 --> 02:42:08,100
There's no way to do it.

2703
02:42:08,100 --> 02:42:13,000
It's literally not a thing that they support originally, right?

2704
02:42:14,100 --> 02:42:17,300
And the reason for that is because if you just have to colliders you

2705
02:42:17,300 --> 02:42:23,100
have no idea, you can't call a, you can't call a function on a and

2706
02:42:23,100 --> 02:42:26,600
habit, know what the type was of be because you can't know what the

2707
02:42:26,600 --> 02:42:30,900
type is of be the whole idea of C++ has inheritance model is you don't

2708
02:42:30,900 --> 02:42:32,000
know what the type is.

2709
02:42:32,200 --> 02:42:33,500
They didn't have our T, t.i.

2710
02:42:33,500 --> 02:42:33,900
at the beginning.

2711
02:42:33,900 --> 02:42:36,300
So you couldn't even ask what the type was.

2712
02:42:37,200 --> 02:42:41,600
But you know, and you couldn't do sort of a dynamic cast later.

2713
02:42:41,600 --> 02:42:43,800
What they did is they added Dynamic cast,

2714
02:42:43,900 --> 02:42:47,400
Civically for these kind of situations where it's like, well, somebody

2715
02:42:47,400 --> 02:42:49,800
at some point it's going to have to figure out what B is.

2716
02:42:50,800 --> 02:42:51,400
Right?

2717
02:42:52,100 --> 02:42:54,100
Because at that point, we've got a problem.

2718
02:42:54,300 --> 02:42:58,400
So the poor man solution to this and C++ and I can't believe I ever

2719
02:42:58,400 --> 02:43:00,300
thought this was good, but this is what you had to do.

2720
02:43:00,900 --> 02:43:03,800
Was you had to do sort of a round tripping thing.

2721
02:43:04,700 --> 02:43:07,400
What you do was you'd go down and say, all right, for each of the

2722
02:43:07,400 --> 02:43:08,500
derived types.

2723
02:43:08,900 --> 02:43:13,300
I'm now going to write a function on those derived types that calls

2724
02:43:13,300 --> 02:43:15,600
back into the main type.

2725
02:43:15,800 --> 02:43:16,500
Where was my?

2726
02:43:17,200 --> 02:43:20,500
Yeah, that calls back into the main type with the

2727
02:43:20,600 --> 02:43:22,200
Up early typed parameter.

2728
02:43:22,900 --> 02:43:26,400
So what it does is it says well okay the first virtual function call

2729
02:43:26,500 --> 02:43:28,800
is like begin Collide or something.

2730
02:43:28,800 --> 02:43:30,500
I don't know what I'm going to call this, right?

2731
02:43:30,500 --> 02:43:34,300
But something there's a virtual function when it gets down to one of

2732
02:43:34,300 --> 02:43:35,000
these types.

2733
02:43:35,000 --> 02:43:36,000
I have to implement that.

2734
02:43:36,000 --> 02:43:38,900
Begin Collide in each of these guys, right?

2735
02:43:40,200 --> 02:43:44,100
And then in each of these guys, I call back into here to a like

2736
02:43:44,100 --> 02:43:50,200
continue Collide call or something, or the actual Collide call with

2737
02:43:50,200 --> 02:43:54,100
the first parameter of that Collide call or the thing that I'm

2738
02:43:54,100 --> 02:43:56,700
colliding with is now fully typed.

2739
02:43:56,700 --> 02:43:59,300
So, I've got collider cylinder in here.

2740
02:43:59,500 --> 02:44:03,800
Collider volume collider sphere, right?

2741
02:44:04,400 --> 02:44:09,700
So the first virtual call is the thing that discovers what the type of

2742
02:44:09,700 --> 02:44:09,800
a

2743
02:44:10,000 --> 02:44:15,400
Is let's say right and then it calls back with its type.

2744
02:44:15,500 --> 02:44:20,400
Now determined as the first parameter and the undetermined type of B

2745
02:44:20,400 --> 02:44:23,700
is the actual virtual call now because you call it on be.

2746
02:44:23,700 --> 02:44:28,400
So first you call A's begin Collide which then calls the Collide on be

2747
02:44:28,400 --> 02:44:29,700
with now the correct type.

2748
02:44:30,700 --> 02:44:34,900
Okay, so basically the way you implement a double dispatch is you

2749
02:44:34,900 --> 02:44:39,000
first dispatch on a to get you into the right row and then you

2750
02:44:39,000 --> 02:44:39,700
dispatch on

2751
02:44:39,900 --> 02:44:43,600
Be to get you into the right column and then you finally get to a

2752
02:44:43,600 --> 02:44:47,000
freaking function that actually does some collision between two

2753
02:44:47,000 --> 02:44:48,600
things, right?

2754
02:44:51,700 --> 02:44:57,100
Now if that sounds absolutely ridiculous to you, I would say that's

2755
02:44:57,100 --> 02:44:59,700
because it is when you want to collide.

2756
02:45:00,000 --> 02:45:02,600
Is what you want to be able to do is just look at what the type of the

2757
02:45:02,600 --> 02:45:04,300
two things are right.

2758
02:45:04,600 --> 02:45:07,000
What you want to do is you want to be able to write a function that

2759
02:45:07,000 --> 02:45:08,300
just says Collide.

2760
02:45:09,300 --> 02:45:11,300
And I want to be able to say collider a

2761
02:45:13,600 --> 02:45:17,300
collider be and I want to put all the code in here.

2762
02:45:17,600 --> 02:45:19,600
This is where the coach should go for Collision.

2763
02:45:19,700 --> 02:45:23,700
I don't want it spread throughout code base in two sets of virtual

2764
02:45:23,700 --> 02:45:27,500
dispatches that are used to discover the types of things and have to

2765
02:45:27,500 --> 02:45:29,800
go like RI you know, Jigger all of those to have.

2766
02:45:29,800 --> 02:45:33,100
Make sure that every single one of them has a call for each different

2767
02:45:33,100 --> 02:45:36,000
type that it could have ended up with and blah, blah blah, right?

2768
02:45:36,400 --> 02:45:37,100
It's awful.

2769
02:45:38,300 --> 02:45:39,700
I just want to write it in here.

2770
02:45:39,800 --> 02:45:43,200
And what I want to be able to do in here is I want to be able to

2771
02:45:43,200 --> 02:45:46,200
compress my O N squared Matrix.

2772
02:45:46,400 --> 02:45:50,300
However, I want and this is really, really, really crucial.

2773
02:45:50,400 --> 02:45:50,900
Right?

2774
02:45:50,900 --> 02:45:54,000
This is the fundamental thing that they didn't get when they were

2775
02:45:54,000 --> 02:45:55,100
designing C++.

2776
02:45:56,000 --> 02:45:57,700
I don't know if they were, like aware of it.

2777
02:45:57,700 --> 02:46:00,300
And didn't think it was important or just had no idea.

2778
02:46:00,400 --> 02:46:05,000
I suspect it was the latter but you know, who knows.

2779
02:46:06,300 --> 02:46:10,900
The problem here is as these matrices get really large, right?

2780
02:46:11,100 --> 02:46:14,800
So let's say we have 32 types by 32 types here, right?

2781
02:46:16,600 --> 02:46:19,000
This would be impossible to implement the C++ way.

2782
02:46:19,200 --> 02:46:22,600
You'd be typing in so many virtual function, signatures all over your

2783
02:46:22,600 --> 02:46:27,100
code that you would just be crying yourself to sleep every night.

2784
02:46:27,100 --> 02:46:30,100
Even thinking about the disaster that you had created.

2785
02:46:30,700 --> 02:46:35,300
The point here is no one is going to ever be able to write code that

2786
02:46:35,400 --> 02:46:42,600
actually involves 32 by 32 different cases, handled uniquely, right?

2787
02:46:42,700 --> 02:46:45,100
It's nuts to think about this, right?

2788
02:46:45,400 --> 02:46:46,300
That's 2 to the

2789
02:46:46,400 --> 02:46:47,900
Times two to the fifth right?

2790
02:46:47,900 --> 02:46:49,600
Otherwise known as 2 to the 10th.

2791
02:46:49,900 --> 02:46:51,200
Forget it right?

2792
02:46:51,300 --> 02:46:55,300
You know no one's going to be writing this many pieces of code.

2793
02:46:57,700 --> 02:46:58,400
Uniquely.

2794
02:46:59,300 --> 02:47:03,100
So what you're always talking about in the case of a no N squared,

2795
02:47:03,100 --> 02:47:07,100
dispatch is you're talking about a sparse Matrix, right?

2796
02:47:07,200 --> 02:47:11,800
You're talking about a sparse set of cases where only certain patches

2797
02:47:11,800 --> 02:47:16,400
of the Matrix actually involved uniqueness and everything else Maps

2798
02:47:16,400 --> 02:47:19,300
into those cases in some way.

2799
02:47:21,200 --> 02:47:25,500
And discriminated unions are by far the most efficient way to write

2800
02:47:25,500 --> 02:47:29,900
that code because it lets you think about what you want to think

2801
02:47:29,900 --> 02:47:30,500
about.

2802
02:47:30,500 --> 02:47:34,700
You can do any arbitrary Turing complete analysis.

2803
02:47:34,700 --> 02:47:38,500
You wish to generate the actual cases you care about.

2804
02:47:38,600 --> 02:47:42,600
So for example in this case I can say stuff like if a

2805
02:47:44,800 --> 02:47:54,400
You know, if a is type is a cylinder, you know and you know and B's,

2806
02:47:55,700 --> 02:47:59,800
you know and and could you know and and sphere.

2807
02:48:00,000 --> 02:48:02,900
Close, which is some function.

2808
02:48:02,900 --> 02:48:06,100
I'm defining that says whether it's close to being spherical or close

2809
02:48:06,100 --> 02:48:10,000
enough to be, you know, then I want to do this thing.

2810
02:48:10,100 --> 02:48:12,500
Otherwise I want to do something else, right?

2811
02:48:12,500 --> 02:48:15,400
And this thing may not even be the Collision routine, it may just be

2812
02:48:15,400 --> 02:48:18,700
something that sets some variables here that later are defined to do

2813
02:48:18,700 --> 02:48:19,600
whatever, right?

2814
02:48:21,200 --> 02:48:24,900
And so you can write incredibly complicated Preamble code.

2815
02:48:24,900 --> 02:48:29,200
Working with the types of the different things, solve exactly what you

2816
02:48:29,200 --> 02:48:29,600
want.

2817
02:48:29,600 --> 02:48:32,600
In terms of figure out what you're going to do, and then do it, right?

2818
02:48:32,700 --> 02:48:37,000
And it's very clean, very easy to read any program can come come, come

2819
02:48:37,000 --> 02:48:40,300
through now and see how the collider actually works.

2820
02:48:41,100 --> 02:48:41,800
Take this.

2821
02:48:41,800 --> 02:48:46,600
And imagine it getting dispersed out into tons of virtual dispatches,

2822
02:48:46,700 --> 02:48:49,500
on all sorts of different objects strewn throughout the code base

2823
02:48:49,500 --> 02:48:50,700
often in multiple files.

2824
02:48:51,000 --> 02:48:55,100
And you can quickly see why this is just an untenable way to try and

2825
02:48:55,100 --> 02:49:00,200
write a complex, sparse Matrix contraction, using the tools that C++

2826
02:49:00,200 --> 02:49:04,900
gives you discriminated, unions are very, very good at representing

2827
02:49:04,900 --> 02:49:07,800
complex interactions between varying types.

2828
02:49:08,800 --> 02:49:11,600
And there are able to do that in more ways than one.

2829
02:49:11,900 --> 02:49:16,100
This is one of them the other way is the memory way, right?

2830
02:49:16,400 --> 02:49:19,800
That they happen to also be the same size because they overlay on top

2831
02:49:19,800 --> 02:49:23,600
of each other which also allows you a lot more freedom with how you

2832
02:49:23,600 --> 02:49:24,900
work with them in other ways.

2833
02:49:24,900 --> 02:49:28,200
So that's also a plus but that's a separate plus that has to do with

2834
02:49:28,200 --> 02:49:29,100
memory layout.

2835
02:49:29,100 --> 02:49:32,900
That's not really related to the bonus of the discriminated unions.

2836
02:49:34,200 --> 02:49:37,400
And so, the takeaway here, if you believe nothing else about what I

2837
02:49:37,400 --> 02:49:42,400
said, hopefully at least, it's put the thought in your head.

2838
02:49:42,600 --> 02:49:49,100
That being able to write code complex code, which looks at the way, in

2839
02:49:49,100 --> 02:49:53,600
which types are set between more than among more than one object.

2840
02:49:54,900 --> 02:50:00,500
Is crucial to well-functioning code and that is where discriminated

2841
02:50:00,500 --> 02:50:00,800
unions.

2842
02:50:00,800 --> 02:50:08,800
Really shine C++ is sort of procrustean, you know, sort of I guess I

2843
02:50:08,800 --> 02:50:12,800
might call it, you know, amateur conceptualization of how types should

2844
02:50:12,800 --> 02:50:14,700
have been discussed.

2845
02:50:15,900 --> 02:50:22,100
At its foundation is really just way too primitive and forces you to

2846
02:50:22,100 --> 02:50:26,300
use something much much weaker than a fully full Turing complete

2847
02:50:26,300 --> 02:50:27,000
language.

2848
02:50:27,000 --> 02:50:30,200
In order to, I should say filtering complete one.

2849
02:50:30,200 --> 02:50:33,400
That makes it almost impossible to access the Turing completeness of

2850
02:50:33,400 --> 02:50:33,700
the language.

2851
02:50:33,700 --> 02:50:37,500
You can probably eventually if you wanted to construct everything you

2852
02:50:37,500 --> 02:50:40,000
needed out of virtual functions, right?

2853
02:50:40,000 --> 02:50:42,600
But it's just not a good way to write it.

2854
02:50:42,600 --> 02:50:45,900
So what I should say, is it robs you of all of the

2855
02:50:46,000 --> 02:50:50,300
Expressive power of your language and forces you to create the

2856
02:50:50,300 --> 02:50:55,000
compression of your dispatch Matrix in terms of incredibly convoluted

2857
02:50:55,000 --> 02:50:58,900
set of calls that can only use one thing, which is a virtual dispatch,

2858
02:50:59,300 --> 02:50:59,800
why would?

2859
02:51:00,000 --> 02:51:00,700
I want that right.

2860
02:51:00,700 --> 02:51:02,700
There's literally no reason for it.

2861
02:51:02,700 --> 02:51:04,900
It doesn't give you anything in return.

2862
02:51:05,000 --> 02:51:07,900
And that's the really cool.

2863
02:51:07,900 --> 02:51:11,800
Part of it, is that if you go down that road of thinking, you're doing

2864
02:51:11,800 --> 02:51:14,400
an incredible amount of work, you're not getting anything back.

2865
02:51:14,500 --> 02:51:15,400
The discriminated unions.

2866
02:51:15,400 --> 02:51:18,700
Give you everything that you could have wanted, you're not, you're

2867
02:51:18,700 --> 02:51:19,600
giving that up.

2868
02:51:19,700 --> 02:51:21,700
You're not getting anything in return, right?

2869
02:51:23,500 --> 02:51:26,800
And so that is the really, really crucial part of.

2870
02:51:26,800 --> 02:51:31,800
It is just that ability to talk about the types using plain language

2871
02:51:31,800 --> 02:51:36,700
with a power of functional decomposition and equivalences and being

2872
02:51:36,700 --> 02:51:40,700
able to look at the state of more than one thing at once.

2873
02:51:41,100 --> 02:51:44,100
Being able to write that code, very cleanly is the real power of

2874
02:51:44,100 --> 02:51:48,100
discriminated unions and I cannot stress enough how much more powerful

2875
02:51:48,100 --> 02:51:49,200
that is than inheritance.

2876
02:51:49,200 --> 02:51:52,600
Which is very, very weak by comparison.

2877
02:51:53,700 --> 02:51:58,200
Now, like I said, unfortunately, C++ because at its outset, it

2878
02:51:58,200 --> 02:52:01,500
believed in this inheritance model which is in my opinion just

2879
02:52:01,500 --> 02:52:05,300
complete, it just complete Amateur hour.

2880
02:52:05,300 --> 02:52:09,100
It's just it's bad, it's a bad type system, it's just not very good.

2881
02:52:10,300 --> 02:52:14,200
You don't get the benefit of having the language help you with your

2882
02:52:14,200 --> 02:52:16,700
discriminated Union, construction, which I think is one of the reasons

2883
02:52:16,700 --> 02:52:20,700
why people don't like it as much in C++ or think that inheritance is

2884
02:52:20,700 --> 02:52:21,000
good.

2885
02:52:21,000 --> 02:52:23,000
Is because the language doesn't really

2886
02:52:23,500 --> 02:52:27,200
View any any real support for discriminate units Beyond just the union

2887
02:52:27,200 --> 02:52:28,400
keyword which was already in.

2888
02:52:28,400 --> 02:52:35,400
See but again other languages that are that are have a more deeper

2889
02:52:35,400 --> 02:52:38,700
understanding of what types are and why they're important don't make

2890
02:52:38,700 --> 02:52:39,300
that mistake.

2891
02:52:39,400 --> 02:52:41,900
And in those languages discriminated unions should shine.

2892
02:52:41,900 --> 02:52:46,200
Even brighter, they already even even though C++ did not appreciate

2893
02:52:46,200 --> 02:52:48,000
them as never supported them properly.

2894
02:52:49,100 --> 02:52:53,300
They're still actually one of the best ways to do types in C, and C++.

2895
02:52:53,400 --> 02:52:55,900
Plus, despite the fact that the designers are language, never

2896
02:52:55,900 --> 02:52:59,400
understood them and I think that's also a testament to just how

2897
02:52:59,500 --> 02:53:00,700
powerful they really are.

2898
02:53:00,900 --> 02:53:03,700
But you can imagine how great it would be if your language actually

2899
02:53:03,700 --> 02:53:04,200
supported them.

2900
02:53:04,200 --> 02:53:08,300
Some people in the chat I've been suggesting that rust is a language

2901
02:53:08,300 --> 02:53:09,500
that does support them properly.

2902
02:53:09,500 --> 02:53:14,800
I could not say I have not programmed in rest, but again, I would

2903
02:53:14,800 --> 02:53:18,200
encourage you to look to other languages where people designed them

2904
02:53:18,200 --> 02:53:20,800
who had a better understanding of why types are important in how they

2905
02:53:20,800 --> 02:53:21,300
work.

2906
02:53:21,600 --> 02:53:23,300
Because those languages always do

2907
02:53:23,500 --> 02:53:26,600
For it discriminated, unions and they are going to support them a lot

2908
02:53:26,600 --> 02:53:30,500
better than C++, which is never really embraced them.

2909
02:53:44,200 --> 02:53:45,600
All right, I got to wrap it up soon.

2910
02:53:45,600 --> 02:53:49,300
We're way past the point where I was going to be done talking.

2911
02:53:49,300 --> 02:53:53,000
Cuba cab says, how would you feel if you wrote the functions for

2912
02:53:53,000 --> 02:53:56,100
colliding, each pair of types and allowed the compiler to generate the

2913
02:53:56,100 --> 02:53:57,500
sparse Matrix of function calls for you?

2914
02:53:57,500 --> 02:53:59,600
The answer is that

2915
02:54:00,000 --> 02:54:02,000
What this is right?

2916
02:54:03,300 --> 02:54:04,800
This, that is what this is.

2917
02:54:06,400 --> 02:54:10,100
This Collide function with a switch statement is exactly what I want,

2918
02:54:10,800 --> 02:54:11,300
right?

2919
02:54:14,300 --> 02:54:19,000
And the reason for that is I don't want to just write a few sparse

2920
02:54:19,000 --> 02:54:19,900
cases here.

2921
02:54:20,200 --> 02:54:24,300
I'm the whole Matrix needs to be full, a lot of the time.

2922
02:54:24,800 --> 02:54:28,300
It's just that I don't want to actually have different pieces of code

2923
02:54:28,300 --> 02:54:29,000
executes everywhere.

2924
02:54:29,200 --> 02:54:32,600
I oftentimes want subtly different ones that just set some variables

2925
02:54:32,600 --> 02:54:33,500
different or whatever.

2926
02:54:33,800 --> 02:54:37,800
And that is what this gives me write a Collide function, which reasons

2927
02:54:37,800 --> 02:54:40,100
about the types sets up some State.

2928
02:54:40,100 --> 02:54:42,700
And then as a switch statement, that does a few different cases

2929
02:54:42,700 --> 02:54:43,900
depending on which one I'm doing.

2930
02:54:44,200 --> 02:54:46,200
Is exactly what I want.

2931
02:54:47,300 --> 02:54:47,800
Right.

2932
02:55:04,400 --> 02:55:05,200
If that makes sense.

2933
02:55:09,700 --> 02:55:13,000
so yeah, and again that's that's just

2934
02:55:15,000 --> 02:55:16,700
I would highly recommend it.

2935
02:55:16,700 --> 02:55:21,800
Also if you think that it's a matter of opinion, whether discriminated

2936
02:55:21,800 --> 02:55:22,900
unions are good or not.

2937
02:55:23,500 --> 02:55:29,200
I would highly highly suggest that you define sort of maybe look into

2938
02:55:29,200 --> 02:55:32,400
category Theory because my understanding is actually that

2939
02:55:32,400 --> 02:55:36,300
discriminated unions aren't a practical question.

2940
02:55:36,300 --> 02:55:41,700
You can actually theoretically prove that they are required to do

2941
02:55:41,700 --> 02:55:44,100
computation the way that you want to do it.

2942
02:55:44,300 --> 02:55:48,200
If this makes sense, like, discriminated unions are like a fundamental

2943
02:55:48,200 --> 02:55:53,400
Concept in terms of how to do efficient Computing.

2944
02:55:54,200 --> 02:55:58,300
So, I am not equipped to make those kinds of arguments.

2945
02:55:58,500 --> 02:56:04,200
So, I certainly would not be the one to make that argument at all,

2946
02:56:04,200 --> 02:56:07,000
rather as opposed to convincingly, but my understanding about

2947
02:56:07,000 --> 02:56:07,600
discriminated.

2948
02:56:07,600 --> 02:56:12,400
Unions is actually, it's not just like a oh yeah, my sort of opinion

2949
02:56:12,400 --> 02:56:13,400
is they're practically useful.

2950
02:56:13,400 --> 02:56:14,000
It's like no, no.

2951
02:56:14,200 --> 02:56:18,600
Oh, they're like theoretically required to properly, think about

2952
02:56:19,100 --> 02:56:19,800
programming.

2953
02:56:20,100 --> 02:56:22,000
You actually need them.

2954
02:56:22,800 --> 02:56:24,700
They are a fundamental part of the math.

2955
02:56:25,700 --> 02:56:28,500
And so, you know, I guess what I would say is ignore them at your

2956
02:56:28,500 --> 02:56:34,700
peril because I don't think it's really a case of like this guy says

2957
02:56:34,700 --> 02:56:35,100
they're good.

2958
02:56:35,100 --> 02:56:38,300
This other person says that they're not

2959
02:56:40,200 --> 02:56:40,700
It's more.

2960
02:56:40,700 --> 02:56:42,700
It's a lot more fundamental than that.

2961
02:56:43,000 --> 02:56:43,900
If that makes sense.

2962
02:56:53,100 --> 02:56:54,700
Close some of this stuff down here.

2963
02:57:28,600 --> 02:57:29,800
Let's see here.

2964
02:57:33,000 --> 02:57:35,000
This is not going to give me very much information.

2965
02:57:35,000 --> 02:57:35,600
I assume.

2966
02:57:51,900 --> 02:57:54,100
So this is mainly the computer science part of it.

2967
02:57:55,900 --> 02:57:59,700
I wish we had maybe suited him 73 on here to give you a good reference

2968
02:57:59,700 --> 02:58:01,500
for this because I don't really know where it is.

2969
02:58:01,500 --> 02:58:03,600
And this is kind of a really Bare Bones.

2970
02:58:08,300 --> 02:58:11,300
Sort of a bare-bones one but really like you need to get a little

2971
02:58:11,300 --> 02:58:17,300
deeper into this to get be able to give any kind of really sort of

2972
02:58:17,300 --> 02:58:19,200
deep understanding of why they're important.

2973
02:58:20,000 --> 02:58:21,500
But like I said I feel like this.

2974
02:58:21,500 --> 02:58:28,500
This goes into the math it's not just a matter of opinion and

2975
02:58:31,600 --> 02:58:35,400
I guess I would say, like, if you want to know a little bit more about

2976
02:58:35,400 --> 02:58:38,900
that aspect of it, hopefully, there's some way we could get some

2977
02:58:38,900 --> 02:58:39,700
references on it.

2978
02:58:39,700 --> 02:58:48,400
Unfortunately, a lot of these things that a lot of these things that

2979
02:58:48,400 --> 02:58:51,900
are sort of about the sort of fundamental truths that they are sort of

2980
02:58:51,900 --> 02:58:56,100
start to discover about programming are not always made available to

2981
02:58:56,100 --> 02:59:01,200
practical, you know, practitioners such as as myself.

2982
02:59:01,400 --> 02:59:05,100
Are the other folks in the chat a lot of times you know, the

2983
02:59:05,100 --> 02:59:08,000
literature is just extremely impenetrable and it's like unless you

2984
02:59:08,000 --> 02:59:10,900
really devoted a great deal of time to, it's very hard to really

2985
02:59:10,900 --> 02:59:13,000
understand what's being said.

2986
02:59:15,100 --> 02:59:19,100
And so unfortunately you end up in this scenario where like, you know,

2987
02:59:19,100 --> 02:59:22,100
learning about how essential some of these things are can be

2988
02:59:22,100 --> 02:59:26,900
incredibly difficult to, you know, release us out.

2989
02:59:27,100 --> 02:59:31,100
So I'm just going by, what people who know category Theory have told

2990
02:59:31,100 --> 02:59:31,200
me?

2991
02:59:31,300 --> 02:59:37,300
Me, and like I said, it's something that I've never had the, I guess

2992
02:59:37,300 --> 02:59:41,200
time to really sit down and decide to pursue, so I cannot give you

2993
02:59:41,200 --> 02:59:45,600
even remotely a way to think about that.

2994
02:59:45,600 --> 02:59:46,200
End of it.

2995
02:59:46,300 --> 02:59:48,900
All I can tell you is that practical programming wise is extremely

2996
02:59:48,900 --> 02:59:49,700
important.

2997
02:59:49,700 --> 02:59:51,000
I can guarantee you that

2998
02:59:52,400 --> 02:59:56,400
but you know, that's that's very different from saying that that it's

2999
02:59:56,400 --> 02:59:58,900
theoretically important because that involves a lot of things that,

3000
02:59:58,900 --> 02:59:59,800
you know, our way out

3001
03:00:00,000 --> 03:00:01,100
My area of expertise.

3002
03:00:12,200 --> 03:00:14,700
And somehow Quran says, are you hoping J?

3003
03:00:14,700 --> 03:00:16,000
I will have discriminated unions.

3004
03:00:16,300 --> 03:00:18,500
Certainly, I am but I haven't been.

3005
03:00:18,600 --> 03:00:20,400
I'm not very up-to-date on j.i.

3006
03:00:20,400 --> 03:00:21,400
at the moment.

3007
03:00:21,400 --> 03:00:22,800
It may already have them.

3008
03:00:25,800 --> 03:00:26,300
You know.

3009
03:00:31,700 --> 03:00:33,800
So, all right, I'm going to wind down here.

3010
03:00:35,700 --> 03:00:37,700
Thanks everyone for joining me from those sort of handmade hero.

3011
03:00:37,700 --> 03:00:38,800
It's been a pleasure coding with you.

3012
03:00:38,800 --> 03:00:41,200
As always, if you want follow along series at home, you can always

3013
03:00:41,200 --> 03:00:43,000
pre-order the game on hand made her a torque.

3014
03:00:43,400 --> 03:00:46,300
It comes with a source code so you can play around with it yourself.

3015
03:00:46,600 --> 03:00:48,900
We also have a forum so you can go to if you want to ask questions a

3016
03:00:48,900 --> 03:00:51,800
patreon page and go to if you want to support the video series a

3017
03:00:51,800 --> 03:00:52,200
schedule.

3018
03:00:52,200 --> 03:00:54,200
But you can you can look at it.

3019
03:00:54,200 --> 03:00:54,500
Find out.

3020
03:00:54,500 --> 03:00:58,600
We're going to be live and an episode guide that lets you know, sort

3021
03:00:58,600 --> 03:01:01,300
of what's happened in the past and allows you to catch up on old

3022
03:01:02,000 --> 03:01:05,200
material, that's about it for today.

3023
03:01:05,300 --> 03:01:07,200
I'll be back here tomorrow at the same time.

3024
03:01:07,400 --> 03:01:10,700
I'll be doing a later stream again, tomorrow, 2 p.m.

3025
03:01:12,000 --> 03:01:14,200
Here in Pacific Daylight time.

3026
03:01:15,300 --> 03:01:19,500
Until then have fun programming and I will see everyone on the

3027
03:01:19,500 --> 03:01:20,100
internet.

3028
03:01:20,100 --> 03:01:21,000
Take it easy, everybody.

