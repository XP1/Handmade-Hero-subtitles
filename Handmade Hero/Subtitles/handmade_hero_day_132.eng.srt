1
00:00:01,700 --> 00:00:03,800
Hello, everyone, and welcome to handmade hero show.

2
00:00:03,800 --> 00:00:06,100
Where we could complete game live on Twitch.

3
00:00:06,200 --> 00:00:08,600
We do not use any engines or libraries here.

4
00:00:09,200 --> 00:00:13,100
The only thing that we use is the platform that we're forced to run on

5
00:00:13,100 --> 00:00:15,100
top of which today is Windows.

6
00:00:16,500 --> 00:00:17,200
What you going to do?

7
00:00:17,800 --> 00:00:19,400
That's what you got to ship games on these days.

8
00:00:19,400 --> 00:00:20,300
So that's what we use.

9
00:00:20,300 --> 00:00:23,600
But other than that, it's all our own code and we show basically how

10
00:00:23,600 --> 00:00:24,900
to do absolutely everything.

11
00:00:25,400 --> 00:00:26,700
We don't even use the GPU.

12
00:00:26,700 --> 00:00:27,400
We actually did.

13
00:00:27,400 --> 00:00:30,100
All of the rendering ourselves, write down every little pixel.

14
00:00:31,000 --> 00:00:34,600
Something that we put there and thought about how it was supposed to

15
00:00:34,600 --> 00:00:34,800
work.

16
00:00:34,800 --> 00:00:36,900
So we're in pretty good shape right now.

17
00:00:36,900 --> 00:00:41,800
We've done a bunch of the stuff that we need to do to get ourselves

18
00:00:42,100 --> 00:00:44,500
into into the state of having an engine.

19
00:00:45,700 --> 00:00:51,200
And I don't know today, I'm just kind of, I don't ever, we've said

20
00:00:51,200 --> 00:00:52,900
this multiple times on handmade hero.

21
00:00:52,900 --> 00:00:56,500
I don't really ever feel the need to try to stick to any kind of

22
00:00:56,500 --> 00:01:00,200
schedule because I find that programming works best when you are, when

23
00:01:00,200 --> 00:01:00,900
you tackle whatever.

24
00:01:01,000 --> 00:01:05,600
Ever is the most logical program problem at any given time and so not

25
00:01:05,600 --> 00:01:07,700
sure exactly going to do today, but I think we may do something that

26
00:01:07,700 --> 00:01:09,500
we weren't supposed to do or something like that.

27
00:01:09,500 --> 00:01:11,500
I'm just getting that feeling so that's probably what's going to

28
00:01:11,500 --> 00:01:12,800
happen anyway.

29
00:01:12,800 --> 00:01:17,600
If you'd like to follow along today is day, 132 so unpacked a 131

30
00:01:17,600 --> 00:01:18,500
source code from the zip.

31
00:01:18,500 --> 00:01:21,400
If you have pre-ordered, the game that is the source code that I am

32
00:01:21,400 --> 00:01:23,800
working with and if you would like to follow along at home, that is

33
00:01:23,800 --> 00:01:26,400
what you should use yesterday.

34
00:01:26,400 --> 00:01:30,900
We did a little bit of work to get ourselves background.

35
00:01:31,000 --> 00:01:34,400
And for graphics, resources and stuff like this.

36
00:01:34,400 --> 00:01:38,900
And so, as you saw yesterday, we now don't have problems with hiccups

37
00:01:38,900 --> 00:01:45,900
when week recompute background Graphics, so that's always good and to

38
00:01:45,900 --> 00:01:48,500
a large extent, that means we pretty much our stall free now.

39
00:01:48,500 --> 00:01:53,700
But there is a little bit of sort of a hidden stall in there that we

40
00:01:53,700 --> 00:01:57,300
haven't really addressed yet and that is sort of asset loading.

41
00:01:57,500 --> 00:02:00,800
You can see that when we are starting up the game we actually

42
00:02:00,900 --> 00:02:06,700
Load all of the bitmap bitmaps when we use see here.

43
00:02:07,400 --> 00:02:07,900
It map.

44
00:02:08,400 --> 00:02:11,500
You can see in here that we actually load all the bitmaps manually

45
00:02:11,500 --> 00:02:14,100
because we haven't really ever thought about what we want to do.

46
00:02:14,500 --> 00:02:18,300
As far as that's concerned and we did have a thing on here that's like

47
00:02:18,300 --> 00:02:22,500
got asset streaming as a thing and I don't know.

48
00:02:24,800 --> 00:02:26,100
We made some thread stuff.

49
00:02:26,100 --> 00:02:28,100
I feel like we might as well just go for it.

50
00:02:29,000 --> 00:02:32,400
Why not just say this asset streaming is incredibly trivial?

51
00:02:32,900 --> 00:02:34,700
There's almost nothing to it.

52
00:02:34,700 --> 00:02:37,100
It's an increased extraordinarily simple.

53
00:02:37,600 --> 00:02:41,200
You've already seen me do almost absolutely everything that you need

54
00:02:41,200 --> 00:02:42,100
in order to ask the streaming.

55
00:02:42,100 --> 00:02:45,000
So we might as well just move it out there and just like say that's

56
00:02:45,000 --> 00:02:45,600
what we're going to do.

57
00:02:46,900 --> 00:02:49,800
I think that's probably reasonable and if we don't do all the SS

58
00:02:49,800 --> 00:02:50,500
streaming, that's fine.

59
00:02:50,500 --> 00:02:52,600
Because at the moment, we don't necessarily know if maybe there's

60
00:02:52,600 --> 00:02:55,300
going to be something other than bitmaps and sound files that we might

61
00:02:55,300 --> 00:02:59,900
have to stream in, but, you know, as far as I'm concerned,

62
00:03:00,000 --> 00:03:03,100
Like I think that's pretty much, pretty much all of it.

63
00:03:03,600 --> 00:03:06,100
I think that's mostly everything that we would need to stream in.

64
00:03:06,500 --> 00:03:11,300
And so I feel like we can probably just go ahead and do that, right?

65
00:03:11,300 --> 00:03:13,700
We know, we don't have any 3D assets because this is supposed to be a

66
00:03:13,700 --> 00:03:14,500
2-D game.

67
00:03:14,700 --> 00:03:18,700
And so pretty much loading bitmaps and and sound files is probably

68
00:03:18,700 --> 00:03:19,900
most of what we would want to do.

69
00:03:19,900 --> 00:03:24,100
And in addition to that, we are trying to do mostly procedural

70
00:03:24,100 --> 00:03:24,700
animation.

71
00:03:24,700 --> 00:03:29,000
So it's highly unlikely that we're going to be doing something like

72
00:03:29,000 --> 00:03:29,800
streaming in anime.

73
00:03:30,000 --> 00:03:30,500
Ation files.

74
00:03:30,500 --> 00:03:35,000
Now we may have some things to say that we want to access that are

75
00:03:35,000 --> 00:03:40,200
like structural in case we want the game to support like, you know,

76
00:03:41,000 --> 00:03:46,100
sort of mods or downloadable content or stuff stuff where there's like

77
00:03:46,100 --> 00:03:49,200
some kind of package that comes in and it augments the game that

78
00:03:49,200 --> 00:03:52,900
doesn't actually change what's currently on the disc that you just

79
00:03:52,900 --> 00:03:54,600
kind of add into it or something like this.

80
00:03:55,200 --> 00:03:57,800
So, you know, maybe we want to do something like that, maybe we don't,

81
00:03:57,800 --> 00:03:58,200
I don't know.

82
00:03:58,200 --> 00:03:59,900
But at the very least, we can put in the

83
00:04:00,000 --> 00:04:03,800
Basic stuff of streaming in a pretty straightforward fashion, to

84
00:04:03,800 --> 00:04:05,800
really not particularly difficult.

85
00:04:05,900 --> 00:04:06,300
So,

86
00:04:09,600 --> 00:04:13,600
I am going to go ahead and start doing that.

87
00:04:14,200 --> 00:04:18,100
And what you can see, actually at the moment, you can already kind of

88
00:04:18,100 --> 00:04:23,200
see that we've got a concept of asset streaming already kind of in

89
00:04:23,200 --> 00:04:23,700
place.

90
00:04:23,700 --> 00:04:27,900
The most important part of thinking about any asset system actually is

91
00:04:27,900 --> 00:04:30,300
kind of already in place just by what we wrote naturally.

92
00:04:30,300 --> 00:04:33,100
And it's kind of important to sort of sit there and go, okay, I see

93
00:04:33,100 --> 00:04:33,700
what's going on.

94
00:04:33,700 --> 00:04:35,000
So I'm just going to mention it quickly.

95
00:04:35,900 --> 00:04:41,900
And that is that the primary sort of boundary layer in your game code

96
00:04:42,000 --> 00:04:45,000
that you have to worry about when you're thinking about how assets are

97
00:04:45,000 --> 00:04:49,500
loaded and managed is the place where the game code.

98
00:04:49,800 --> 00:04:55,600
And the assets have to agree on the name of something.

99
00:04:56,200 --> 00:04:56,700
Okay?

100
00:04:57,800 --> 00:05:02,100
And you can see that we've already done that here, this code right

101
00:05:02,100 --> 00:05:05,500
here, is the place where those names are essentially.

102
00:05:05,600 --> 00:05:06,500
Pound, right?

103
00:05:06,500 --> 00:05:11,300
You can see that our game talks about the grasp, it Maps the stone,

104
00:05:11,300 --> 00:05:15,600
the tuft right as these loaded bitmap things, and it's accessing them

105
00:05:15,600 --> 00:05:18,000
off of game State and saying grass.

106
00:05:18,000 --> 00:05:21,500
That's how it refers to wanting a, you know, that grass bitmap or

107
00:05:21,500 --> 00:05:21,800
whatever.

108
00:05:21,800 --> 00:05:26,900
And you know, here in the debug load bitmap, you can see that we have

109
00:05:26,900 --> 00:05:31,000
what the asset system, essentially considers the name which is a file

110
00:05:31,000 --> 00:05:33,100
like a file path on disk, right?

111
00:05:34,400 --> 00:05:36,000
And so this is the code right here.

112
00:05:36,000 --> 00:05:37,000
The very simple code.

113
00:05:37,000 --> 00:05:40,100
In terms of asset loading that we have right now, which is doing that

114
00:05:40,100 --> 00:05:40,500
binding.

115
00:05:40,500 --> 00:05:45,900
It's saying here is a way to refer to actual data somewhere.

116
00:05:46,900 --> 00:05:51,200
And here is the name that the code is going to use to refer to that

117
00:05:51,200 --> 00:05:52,800
data, right?

118
00:05:53,100 --> 00:05:56,100
So that's what's going on at the moment now.

119
00:05:58,500 --> 00:05:59,800
What I want to emphasize here.

120
00:06:01,300 --> 00:06:06,400
Is that really all you need to do to have a reasonable asset streaming

121
00:06:06,400 --> 00:06:07,000
system?

122
00:06:07,700 --> 00:06:12,600
Is you need to make sure that the names that the game's refers to are

123
00:06:12,600 --> 00:06:18,200
things that are always in scope, essentially that cannot become

124
00:06:18,200 --> 00:06:23,300
invalid or crash, able right like a pointer could, for example, like,

125
00:06:23,300 --> 00:06:26,300
if you're referring to your assets by a pointer, you have a problem

126
00:06:26,300 --> 00:06:29,600
because if you're streaming and you're pointing into something and

127
00:06:29,600 --> 00:06:30,600
that thing,

128
00:06:30,800 --> 00:06:32,800
Gets evicted, you've got problems, right?

129
00:06:32,800 --> 00:06:36,200
So, you know, things like a pointer to memory, not a great way to

130
00:06:36,200 --> 00:06:37,900
refer to a particular asset.

131
00:06:39,100 --> 00:06:42,100
So you have you have that sort of thing to worry about and the other

132
00:06:42,100 --> 00:06:47,100
thing that you have to think about is how those things get, sort of

133
00:06:48,000 --> 00:06:52,100
resolved, like how you can, you know, how is the game going to be able

134
00:06:52,100 --> 00:06:56,700
to give it a give it some kind of identifier and name and say here's

135
00:06:56,700 --> 00:06:57,700
what I want.

136
00:06:58,200 --> 00:07:01,800
Here's the thing that I speak about my semantics what I'm trying to

137
00:07:01,800 --> 00:07:05,200
ask for and you need to kind of go grab that thing.

138
00:07:05,300 --> 00:07:06,300
How is that?

139
00:07:06,400 --> 00:07:08,500
You know, process sort of working

140
00:07:10,000 --> 00:07:13,000
And so that's what we're going to start thinking about what I want to

141
00:07:13,000 --> 00:07:16,600
do here is just point out that we kind of have a pretty simple sort of

142
00:07:16,600 --> 00:07:19,900
set up going and we can almost see just from having written this usage

143
00:07:19,900 --> 00:07:20,300
code.

144
00:07:20,600 --> 00:07:23,700
The sorts of things that we want to talk about here, you can see that

145
00:07:23,700 --> 00:07:30,000
we essentially have, if you will three kinds of of elements already

146
00:07:30,000 --> 00:07:32,800
happening and they happen to be the three kinds of elements that I

147
00:07:32,800 --> 00:07:36,300
strongly suspect, we will see over and over again.

148
00:07:36,300 --> 00:07:38,700
So even just just from having

149
00:07:38,900 --> 00:07:43,100
The code in the most obvious way, which again, I always emphasize just

150
00:07:43,100 --> 00:07:44,000
removing written the code.

151
00:07:44,000 --> 00:07:47,900
In the, most obvious way, we already see pretty much the sorts of

152
00:07:47,900 --> 00:07:51,400
stuff that we're probably going to need all throughout development and

153
00:07:51,400 --> 00:07:57,000
that is, we're going to have an array of options for things, right?

154
00:07:57,000 --> 00:08:02,900
So an artist May specify, some number of bitmaps that all correspond

155
00:08:02,900 --> 00:08:06,400
to the same logical ID in the program, right?

156
00:08:06,400 --> 00:08:08,700
Meaning the engine wants to think about

157
00:08:08,800 --> 00:08:09,700
out grass.

158
00:08:10,000 --> 00:08:15,400
It has a way of referring to grass and it needs to be able to know

159
00:08:15,600 --> 00:08:17,300
what are all of the options.

160
00:08:17,300 --> 00:08:21,200
The artist has supplied in terms of grass right now, right?

161
00:08:21,200 --> 00:08:24,500
And you can see that we did our very simple, very basic implementation

162
00:08:24,500 --> 00:08:27,400
of this was just, you have an array of bitmaps.

163
00:08:27,500 --> 00:08:31,300
So that we know, there are two grasses and we said the two grasses

164
00:08:31,300 --> 00:08:32,700
came from these two files, right?

165
00:08:32,700 --> 00:08:35,500
So a very simple way of handling that, but again, a very important

166
00:08:35,500 --> 00:08:38,700
logical concept that is is action to carry.

167
00:08:38,900 --> 00:08:40,100
Four words, it was not.

168
00:08:40,100 --> 00:08:41,799
The concept itself is not trivial.

169
00:08:41,799 --> 00:08:45,200
The concept is important and will carry straight to the development.

170
00:08:45,200 --> 00:08:47,000
It's just our implementation of it here.

171
00:08:47,000 --> 00:08:50,600
That was simple because we were not at the point where we're thinking

172
00:08:50,600 --> 00:08:51,500
about asset loading.

173
00:08:51,800 --> 00:08:55,500
So that's a very important concept right concept.

174
00:08:55,500 --> 00:08:58,700
The, the second concept of course, which actually, I guess I probably

175
00:08:58,700 --> 00:08:59,800
explain these in the opposite order is

176
00:09:00,000 --> 00:09:03,800
The concept of a basic bitmap right that we want to load and so this

177
00:09:03,800 --> 00:09:05,000
is really an extension of that.

178
00:09:05,000 --> 00:09:08,400
It's saying that there are several objects options for that bitmap,

179
00:09:08,400 --> 00:09:09,000
right?

180
00:09:09,300 --> 00:09:12,100
And then the final thing we have is sort of a the concept of a

181
00:09:12,100 --> 00:09:16,100
structured set of bitmaps and you if you heart it can kind of remember

182
00:09:16,100 --> 00:09:19,600
back to when we did this hero bitmaps thing, the reason that we wanted

183
00:09:19,600 --> 00:09:23,400
to do that was because our hero had several facing directions, right?

184
00:09:23,400 --> 00:09:27,300
He had left right up and down in each of those facing directions

185
00:09:27,500 --> 00:09:29,800
actually had in it a

186
00:09:30,000 --> 00:09:31,200
A set of bitmaps.

187
00:09:31,200 --> 00:09:34,000
They had a head, a cape and a torso, right?

188
00:09:34,200 --> 00:09:36,500
And because there are several sets of bitmaps

189
00:09:40,400 --> 00:09:44,800
We wanted to make it easy to have routines That animated these sets of

190
00:09:44,800 --> 00:09:48,600
bitmaps together without actually knowing with which direction it was

191
00:09:48,600 --> 00:09:50,200
going to go, right.

192
00:09:50,200 --> 00:09:53,300
We wanted a thing that could could draw it here on the screen without

193
00:09:53,300 --> 00:09:54,800
knowing which direction it was talking about.

194
00:09:54,800 --> 00:09:58,500
And so we created a structure that allows it to do exactly that by

195
00:09:58,500 --> 00:10:00,500
having like head cape and torso here.

196
00:10:00,500 --> 00:10:01,000
Right.

197
00:10:02,200 --> 00:10:06,700
So I think that is sort of very much.

198
00:10:06,700 --> 00:10:09,400
So with with the with the exception of fact that we don't have sounded

199
00:10:09,400 --> 00:10:12,400
here yet, which is, you know, something obviously that we have to work

200
00:10:12,400 --> 00:10:15,300
on the exception of the fact that we don't have sound in here yet.

201
00:10:15,500 --> 00:10:19,500
We've really seen pretty much exactly what we want out of the graphic

202
00:10:19,500 --> 00:10:23,600
system at least at a fundamental level in terms of how we're going to

203
00:10:23,600 --> 00:10:27,700
talk about Assets in that respect, okay?

204
00:10:30,500 --> 00:10:31,000
so,

205
00:10:33,200 --> 00:10:38,200
what we can do now is we can say, how do we again, you know, sort of

206
00:10:38,300 --> 00:10:41,900
using the principles of, you know, incremental, you know, compression

207
00:10:41,900 --> 00:10:42,500
oriented programming.

208
00:10:42,600 --> 00:10:48,400
How do we take what we've already done and sort of build upon what we

209
00:10:48,400 --> 00:10:52,500
know, we actually want in the code to do something that gives us that

210
00:10:52,500 --> 00:10:53,100
flexibility.

211
00:10:53,100 --> 00:10:57,500
But also allows us to trivially stream the Assets in if we want to

212
00:10:57,500 --> 00:11:01,200
write and maybe while we're at it, maybe try to look for a couple

213
00:11:01,400 --> 00:11:02,100
opportunities.

214
00:11:02,500 --> 00:11:06,700
To expand some things that were previously hard-coded into stuff.

215
00:11:06,700 --> 00:11:08,900
That's a little more flexible such as the engine.

216
00:11:08,900 --> 00:11:12,400
Not having to know, you know, not having to hard code here, that there

217
00:11:12,400 --> 00:11:16,600
are two grasses, maybe it would be nice if we could say when it goes

218
00:11:16,600 --> 00:11:20,000
ahead and loads its resource pack, you know, in at the beginning of

219
00:11:20,000 --> 00:11:23,500
the game or whatever, it's just has a number of grasses in there and

220
00:11:23,500 --> 00:11:26,400
however, many grasses there are, that's how many the engine will use.

221
00:11:26,400 --> 00:11:29,500
And so that's another thing that would be something that would be

222
00:11:29,500 --> 00:11:32,100
nice, sort of to keep an eye on as we go.

223
00:11:32,500 --> 00:11:36,000
Can we start to maybe remove some of the restrictions that just having

224
00:11:36,000 --> 00:11:39,400
typed it in as just straight, see with nothing fancy going on?

225
00:11:40,400 --> 00:11:44,200
How you know, how can we maybe get rid of some of those restrictions

226
00:11:44,200 --> 00:11:47,500
or limitations that, you know, would sort of as we go forward that

227
00:11:47,500 --> 00:11:49,600
would, you know, potentially present themselves

228
00:11:50,700 --> 00:11:52,600
So that's what I'm going to do.

229
00:11:52,600 --> 00:11:53,800
I'm just going to focus on that.

230
00:11:53,800 --> 00:11:55,600
And again, we want this to be able to work in the background.

231
00:11:55,600 --> 00:11:58,000
So I'm going to keep that in the back of my mind as we go.

232
00:11:58,800 --> 00:11:59,800
But the first thing that I

233
00:12:00,000 --> 00:12:06,600
Do is really to take one small, sort of compression step and to just

234
00:12:06,600 --> 00:12:10,800
move out the things that we were using into one place.

235
00:12:11,200 --> 00:12:14,300
And you'll sort of see why I want to do that as we kind of go

236
00:12:14,300 --> 00:12:14,800
forwards.

237
00:12:15,000 --> 00:12:18,700
But this is basically trying to get these out into a place where we're

238
00:12:18,700 --> 00:12:22,200
starting to think about the assets separate from everything else in

239
00:12:22,200 --> 00:12:22,600
the code.

240
00:12:22,600 --> 00:12:26,500
So here is all, you know, all this stuff is not assets, right?

241
00:12:26,500 --> 00:12:29,800
These are not loaded, none of this stuff is loaded from disk, okay?

242
00:12:30,300 --> 00:12:34,400
But this stuff is right, so you can imagine we had like a game asset

243
00:12:34,400 --> 00:12:38,900
structure here and now I've got this game asset structure.

244
00:12:39,100 --> 00:12:41,800
I'm just going to go ahead and say, we've got game assets down at the

245
00:12:41,800 --> 00:12:42,400
bottom.

246
00:12:42,400 --> 00:12:43,500
Right there we go.

247
00:12:44,100 --> 00:12:49,600
And all I'm going to do literally is just fix this, this thing where

248
00:12:49,600 --> 00:12:53,400
we've got, you know, I've got to put assets, doc grass in there.

249
00:12:53,400 --> 00:12:55,500
That's literally all I'm going to do, right?

250
00:12:55,500 --> 00:12:59,400
It's the it's the, you know, the dumbest of the dumb.

251
00:12:59,400 --> 00:12:59,800
It's

252
00:13:00,000 --> 00:13:01,000
Dumbest possible thing.

253
00:13:02,800 --> 00:13:03,300
Let's see.

254
00:13:03,300 --> 00:13:06,700
Here assets assets.

255
00:13:08,900 --> 00:13:09,400
so,

256
00:13:10,700 --> 00:13:11,300
Here we go.

257
00:13:12,900 --> 00:13:16,200
And these are all going to be assets as well, right?

258
00:13:17,000 --> 00:13:20,600
And again, not, I'm literally not doing anything here.

259
00:13:20,900 --> 00:13:22,500
There is no code change.

260
00:13:22,600 --> 00:13:28,400
I'm just slowly putting these, you know, kind of into a more, you

261
00:13:28,400 --> 00:13:33,800
know, a more isolated State just kind of really really straightforward

262
00:13:34,100 --> 00:13:34,800
fashion there.

263
00:13:36,000 --> 00:13:38,300
Okay, let's go ahead and do that.

264
00:13:40,100 --> 00:13:40,400
And

265
00:13:40,500 --> 00:13:45,800
Like so it's like you got a few more in here in the drawing routines,

266
00:13:48,400 --> 00:13:48,800
okay?

267
00:13:50,900 --> 00:13:51,400
Go.

268
00:13:53,400 --> 00:13:54,400
and,

269
00:13:55,700 --> 00:13:56,300
Oops.

270
00:13:57,200 --> 00:13:57,800
It's wrong.

271
00:13:59,000 --> 00:14:03,700
Okay, and again, this should, you know, just run shouldn't do anything

272
00:14:03,700 --> 00:14:06,500
different than what it was doing before, it's all good.

273
00:14:07,600 --> 00:14:12,800
So, now I've got these guys out here right now, when I want to do is I

274
00:14:12,800 --> 00:14:18,800
want to observe for a second that I want to start by taking the

275
00:14:18,800 --> 00:14:23,000
simplest of these assets, this back drop, shadow, tree, sword, and

276
00:14:23,000 --> 00:14:23,600
stairwell.

277
00:14:23,700 --> 00:14:26,600
Because remember these guys, I'm going to kind of break these up here,

278
00:14:26,600 --> 00:14:27,100
right?

279
00:14:27,600 --> 00:14:28,300
These

280
00:14:28,900 --> 00:14:33,200
Are arrayed assets, right?

281
00:14:33,900 --> 00:14:37,800
And these are structured assets, right?

282
00:14:39,500 --> 00:14:44,400
Whereas these guys here, these guys here don't have any structure to

283
00:14:44,400 --> 00:14:44,600
them.

284
00:14:44,600 --> 00:14:48,900
They are just a plain vanilla bitmap so they make sense for me to

285
00:14:48,900 --> 00:14:53,300
start with them first because they have the least amount of metadata

286
00:14:53,300 --> 00:14:54,400
associated with them right there.

287
00:14:54,400 --> 00:14:57,100
Yes they're a bunch of bits and yes they have a little bit of metadata

288
00:14:57,100 --> 00:14:59,900
which is like the width and height of the bitmap for

289
00:15:00,000 --> 00:15:03,000
People or you know what the sort of Hotpoint is.

290
00:15:03,000 --> 00:15:07,200
So there's some but there's only one, you know, sort of logical unit

291
00:15:07,200 --> 00:15:10,000
of rendering that the renderer looks at their right?

292
00:15:10,000 --> 00:15:12,200
Is that that that just that one piece?

293
00:15:13,000 --> 00:15:17,600
So that is a lot easier than starting with something that has sort of

294
00:15:17,600 --> 00:15:20,900
a number of things or that has a structure to it, where we know that

295
00:15:20,900 --> 00:15:22,400
it's got different components.

296
00:15:22,600 --> 00:15:25,300
So I'm going to start with the simplest one first and going to

297
00:15:25,300 --> 00:15:29,400
abstract away, sort of, sort of some of the, the shouldn't say

298
00:15:29,400 --> 00:15:29,800
abstract.

299
00:15:30,000 --> 00:15:36,200
Yeah, but I'm going to kind of make it change its form if you will.

300
00:15:38,600 --> 00:15:39,000
Okay.

301
00:15:40,500 --> 00:15:44,300
So what is the fundamental problem that I'm looking at here when I

302
00:15:44,300 --> 00:15:48,200
think about asset streaming and I look at what's right in front of me

303
00:15:48,200 --> 00:15:50,100
in terms of game assets.

304
00:15:50,300 --> 00:15:55,100
Okay the thing that's that's there's there's something to things right

305
00:15:55,100 --> 00:15:58,300
that are that are problematic about what I'm looking at.

306
00:15:58,300 --> 00:15:59,300
I guess the way I would say it.

307
00:15:59,900 --> 00:16:04,200
The first one is that you can see that like the data that I'm actually

308
00:16:04,200 --> 00:16:07,000
talking about all has to be here, right?

309
00:16:07,000 --> 00:16:09,700
Like I'm talking about this whole loaded bitmap and it's got its width

310
00:16:09,900 --> 00:16:10,600
Heights and everything.

311
00:16:10,800 --> 00:16:13,400
It's all the spaces, reserved essentially.

312
00:16:13,400 --> 00:16:16,800
And maybe yeah, there's a pointer to memory in here so I could set

313
00:16:16,800 --> 00:16:20,900
that pointer 20 but I can't actually get rid of the whole bit map

314
00:16:20,900 --> 00:16:23,900
itself and if you know that could actually be an appreciable amount of

315
00:16:23,900 --> 00:16:27,600
memory, you know, I'd like to maybe make that boiled down to

316
00:16:28,000 --> 00:16:31,800
something, you know, something smaller if you will right or maybe boil

317
00:16:31,800 --> 00:16:33,300
down to nothing at all.

318
00:16:33,300 --> 00:16:34,000
Potentially.

319
00:16:34,200 --> 00:16:38,500
So there's our, there's that the other thing that's obviously

320
00:16:38,500 --> 00:16:39,600
problematic about it.

321
00:16:39,800 --> 00:16:42,500
It is that anyone who's going to refer to this thing is going to refer

322
00:16:42,500 --> 00:16:43,900
directly to it, right?

323
00:16:43,900 --> 00:16:47,000
It's going to refer directly to, you know, sort of the

324
00:16:50,600 --> 00:16:55,600
It's going to it's going to, it's going to directly access this, this

325
00:16:55,600 --> 00:16:59,600
particular piece of memory which means that of course I don't really

326
00:16:59,600 --> 00:17:04,099
have any way of knowing who's using what or whether or not something

327
00:17:04,099 --> 00:17:06,500
has to, you know, whether something could be evicted.

328
00:17:06,500 --> 00:17:08,700
There's all sorts of things that are just problematic about that,

329
00:17:08,700 --> 00:17:09,200
right?

330
00:17:10,500 --> 00:17:13,500
So what I want to start doing is I want to start making it so that

331
00:17:13,500 --> 00:17:16,099
people are going to talk about these things.

332
00:17:16,400 --> 00:17:20,000
In a slightly more indirect way so that I could,

333
00:17:20,500 --> 00:17:24,099
So that they could talk about them without ever necessarily knowing

334
00:17:24,099 --> 00:17:27,000
where they were or what they were, they could just use some kind of

335
00:17:27,000 --> 00:17:28,200
other name, right?

336
00:17:29,800 --> 00:17:32,100
So what I'm going to do first is I'm just going to introduce the

337
00:17:32,100 --> 00:17:33,600
simplest possible thing again.

338
00:17:33,900 --> 00:17:37,800
I want to introduce an ID that allows the game to talk about something

339
00:17:38,700 --> 00:17:40,400
like one of these guys, right.

340
00:17:40,500 --> 00:17:44,900
I want to be able to, you know, maybe I'll say game asset ID or

341
00:17:44,900 --> 00:17:45,800
something like this.

342
00:17:45,800 --> 00:17:49,600
I want to, I want to have some way of referring to these things in

343
00:17:49,600 --> 00:17:50,100
here.

344
00:17:50,700 --> 00:17:56,800
That do not actually, you know, use the pointer of the thing that

345
00:17:56,800 --> 00:17:58,300
we're talking about, okay?

346
00:17:59,000 --> 00:17:59,800
So, you know, I'm

347
00:18:00,000 --> 00:18:04,600
Do something like this where I've got my list of names that the game

348
00:18:04,600 --> 00:18:06,000
could use to talk about something.

349
00:18:06,700 --> 00:18:09,900
And then what I'm going to do here is I'm going to say, oh I've just

350
00:18:09,900 --> 00:18:12,200
got an array of bitmaps now.

351
00:18:12,600 --> 00:18:15,200
And I've got this game asset ID.

352
00:18:15,200 --> 00:18:16,900
I know Hoops, that's no good.

353
00:18:17,700 --> 00:18:22,700
I know I've got as many of those as as there are IDs.

354
00:18:22,700 --> 00:18:24,600
I know, I'm going to need that many of them.

355
00:18:24,600 --> 00:18:28,000
If I want to implement this, again exactly the same way, but just

356
00:18:28,000 --> 00:18:29,900
pulling out, one more level.

357
00:18:30,000 --> 00:18:30,900
Well, I'm just saying.

358
00:18:30,900 --> 00:18:35,900
Okay, now you don't access it by the name that way you accesses it in

359
00:18:35,900 --> 00:18:37,200
a slightly different way, right?

360
00:18:37,800 --> 00:18:42,300
And since I know that people are all going to be you know accessing

361
00:18:42,300 --> 00:18:48,500
this as a pointer there, I'm going to say maybe we just have some way

362
00:18:48,500 --> 00:18:53,300
of saying that you get the bitmap, you know, from from the ID, right?

363
00:18:53,300 --> 00:18:58,700
So I say, you know, pass me the game assets structure.

364
00:19:00,000 --> 00:19:01,100
Tell me which I D.

365
00:19:01,100 --> 00:19:06,200
It is you're looking for and I will go ahead and return that one to

366
00:19:06,200 --> 00:19:06,900
you, right?

367
00:19:06,900 --> 00:19:11,600
So that you don't exactly directly access out of it anymore again

368
00:19:11,600 --> 00:19:14,000
because this is in preparation or the fact where there won't be

369
00:19:14,000 --> 00:19:17,400
anything to direct access and so you will have to call to a function

370
00:19:17,400 --> 00:19:18,400
that actually does work.

371
00:19:18,400 --> 00:19:21,500
There will be no way to directly do it.

372
00:19:21,500 --> 00:19:22,900
So I'm going to do it that way.

373
00:19:23,000 --> 00:19:26,200
I'm going to go ahead and return that there it's just that wrong.

374
00:19:26,200 --> 00:19:26,800
There we go.

375
00:19:27,500 --> 00:19:29,600
So I'm going to go ahead and compile that

376
00:19:30,600 --> 00:19:32,900
And oh and I forgot one of the thing I guess.

377
00:19:33,100 --> 00:19:37,900
I need a way to actually store these as well for the loading but I

378
00:19:37,900 --> 00:19:41,200
guess I can just really because it's returning me a pointer I still

379
00:19:41,200 --> 00:19:46,400
probably could go ahead and do it by just just doing it this way in

380
00:19:46,400 --> 00:19:46,800
the future.

381
00:19:46,800 --> 00:19:49,100
That's going to we're not going to care because the stuff is going to

382
00:19:49,100 --> 00:19:50,200
get loaded in a different way.

383
00:19:50,200 --> 00:19:50,900
So that's fine.

384
00:19:51,200 --> 00:19:55,700
So I guess I can just do it this way like so on right, I suppose that

385
00:19:55,700 --> 00:19:57,100
will just work, right.

386
00:19:58,200 --> 00:20:00,700
IGA I grass?

387
00:20:01,300 --> 00:20:05,600
What oh wait, no grasses grasses.

388
00:20:05,600 --> 00:20:07,500
Should still be working, just fine.

389
00:20:08,200 --> 00:20:09,700
So I'm looking at the wrong one here.

390
00:20:09,700 --> 00:20:10,900
Sorry, that was my bad.

391
00:20:11,300 --> 00:20:12,500
Got a little ahead of myself there.

392
00:20:12,500 --> 00:20:13,900
We haven't gotten to that yet.

393
00:20:14,700 --> 00:20:15,500
So there we go.

394
00:20:15,500 --> 00:20:18,700
That will set the backdrop or at least it should

395
00:20:20,400 --> 00:20:24,600
And I gotta pass the address there but I think that should give me

396
00:20:24,600 --> 00:20:29,800
essentially what I'm looking for for this next step.

397
00:20:29,800 --> 00:20:30,300
Right?

398
00:20:30,700 --> 00:20:36,700
And again, just trying to do some simple transformations to slowly

399
00:20:36,700 --> 00:20:41,800
move the code into a new sort of position that gives me a little more

400
00:20:41,800 --> 00:20:44,000
power than I had before.

401
00:20:44,900 --> 00:20:47,000
So alright, let's take a look here.

402
00:20:47,900 --> 00:20:49,600
Got to put those a saint

403
00:20:50,800 --> 00:20:51,500
There we go.

404
00:20:53,000 --> 00:20:56,000
And again the same is going to go here.

405
00:20:56,400 --> 00:20:59,800
We've got that, get bitmap, a Sanjay.

406
00:21:00,000 --> 00:21:01,700
Shadows, that gets it there.

407
00:21:03,200 --> 00:21:06,700
And now we will do the same thing.

408
00:21:06,700 --> 00:21:19,800
Get bitmap assets GI tree, and same thing here bitmap J, eyeshadow and

409
00:21:19,900 --> 00:21:21,300
last one.

410
00:21:21,500 --> 00:21:22,600
Yeah, I sword.

411
00:21:22,900 --> 00:21:27,800
Okay, couple more down here.

412
00:21:31,300 --> 00:21:34,400
See and again, nothing strange going on here.

413
00:21:34,400 --> 00:21:39,200
I'm literally just translating these calls directly, I am not changing

414
00:21:39,200 --> 00:21:42,100
them in any way and I'm essentially I'm not really even changing how

415
00:21:42,100 --> 00:21:43,000
the codes working at all.

416
00:21:43,000 --> 00:21:49,000
It's just going through a slightly more indirect route because we're

417
00:21:49,000 --> 00:21:50,300
sort of making a little.

418
00:21:50,300 --> 00:21:53,100
We're basically like sort of separating it out in a preparation for

419
00:21:53,100 --> 00:21:54,500
putting something in between it kind of thing.

420
00:21:54,500 --> 00:21:54,900
Right.

421
00:21:56,000 --> 00:21:59,600
Okay, so that's all well and good, right?

422
00:22:00,000 --> 00:22:01,900
We've got those those guys in there.

423
00:22:02,600 --> 00:22:07,900
And, and so now I'm able to talk about game assets by ID rather than

424
00:22:07,900 --> 00:22:10,900
by B that pointer if I want to because I can always get the bit that

425
00:22:10,900 --> 00:22:14,200
pointer out later, which is, you know, kind of one step there.

426
00:22:17,100 --> 00:22:17,700
but,

427
00:22:18,800 --> 00:22:22,900
Now I kind of have another question, which is like, oh, you know, how

428
00:22:22,900 --> 00:22:25,900
do I, what am I going to do for these other guys here?

429
00:22:25,900 --> 00:22:31,500
Right, these sort of array assets and these structured Assets in here

430
00:22:31,500 --> 00:22:33,300
where I've kind of got other stuff going on.

431
00:22:33,300 --> 00:22:36,900
Well, like I said, I don't really want to talk about those yet.

432
00:22:37,000 --> 00:22:42,800
I think that it might be a little premature to to really kind of deal

433
00:22:42,800 --> 00:22:44,700
with those in any in any significant way.

434
00:22:45,300 --> 00:22:48,500
So what I'd like to do temporarily again, this is just

435
00:22:49,300 --> 00:22:51,800
This is this is not how I want to deal with it at the end of the day.

436
00:22:51,800 --> 00:22:55,200
But so that we can make everything kind of flow through a little more

437
00:22:55,700 --> 00:22:56,600
appropriately.

438
00:22:56,700 --> 00:23:01,100
What I want to do here is I want to be able to refer

439
00:23:03,400 --> 00:23:08,000
I want to be able to refer to those bitmaps so that they still have

440
00:23:08,000 --> 00:23:09,100
some kind of a slot.

441
00:23:11,300 --> 00:23:13,200
Kind of think of whether this is a good idea or not.

442
00:23:15,800 --> 00:23:17,100
Mmm-hmm.

443
00:23:21,100 --> 00:23:21,700
You know what?

444
00:23:21,800 --> 00:23:22,900
I'm not gonna do that yet.

445
00:23:23,500 --> 00:23:25,100
I'm gonna wait, I'm gonna wait.

446
00:23:25,500 --> 00:23:28,900
So, all right now that I have this, what I'm going to do is I'm going

447
00:23:28,900 --> 00:23:31,700
to just wait on those guys because I feel like it's probably just

448
00:23:31,700 --> 00:23:34,000
better for me to wait until I Implement one of these.

449
00:23:34,000 --> 00:23:37,000
I think it's going to be clear explanation wise as well.

450
00:23:37,800 --> 00:23:39,300
So I'll just put that aside.

451
00:23:40,000 --> 00:23:42,600
So what I want to do now is the push bitmap call.

452
00:23:42,800 --> 00:23:46,200
What I'd like to do with the push bitmap call is I'd like to make the

453
00:23:46,200 --> 00:23:47,000
push bitmap call.

454
00:23:47,000 --> 00:23:50,100
Actually take one of those, right?

455
00:23:50,300 --> 00:23:50,700
So we're going to

456
00:23:50,800 --> 00:23:55,000
to do is essentially the same thing that we have here in terms of what

457
00:23:55,000 --> 00:23:56,900
the the bitmap takes in, right?

458
00:23:56,900 --> 00:23:59,600
It takes in this render group and the load a bit Mouse of right.

459
00:24:00,700 --> 00:24:05,000
And all we're going to do is we're going to change this to take a game

460
00:24:05,000 --> 00:24:07,200
asset ID, right like so on.

461
00:24:08,500 --> 00:24:12,900
And again, game asset ID is probably the wrong thing to use here.

462
00:24:12,900 --> 00:24:16,300
Technically speaking, because we're probably going to want something

463
00:24:16,300 --> 00:24:19,000
that's like a bitmap ID, which is not exactly necessarily the same as

464
00:24:19,000 --> 00:24:19,800
the game asset idea.

465
00:24:19,800 --> 00:24:20,600
We'll see.

466
00:24:20,800 --> 00:24:22,900
But for right now it's fine because we haven't actually made that

467
00:24:22,900 --> 00:24:23,300
distinction.

468
00:24:23,300 --> 00:24:27,900
So we'll sort of will expand that distinction when the time comes and

469
00:24:27,900 --> 00:24:29,400
not get ahead of ourselves, right?

470
00:24:30,600 --> 00:24:34,800
So what I'm going to do there is I'm going to go ahead and take that

471
00:24:35,300 --> 00:24:39,500
that get bitmap code and I'm just going to call it in here instead,

472
00:24:39,600 --> 00:24:40,100
right?

473
00:24:40,100 --> 00:24:46,100
And I'm going to assume that the render group has been set up so that

474
00:24:46,100 --> 00:24:50,800
has a specific place where it expects assets to come from, right?

475
00:24:50,900 --> 00:24:53,600
So we're going to say, all right, we've got an asset pointer that's in

476
00:24:53,600 --> 00:24:54,500
the render group.

477
00:24:54,500 --> 00:24:58,900
We're going to ask for the the bitmap that corresponds to a particular

478
00:24:58,900 --> 00:24:59,400
ID.

479
00:25:00,500 --> 00:25:04,100
We're going to, you know, sort of go forwards with that.

480
00:25:04,100 --> 00:25:04,600
Right?

481
00:25:05,200 --> 00:25:08,100
And I guess I'm gonna, you know, I'm also going to maybe pull it out

482
00:25:08,100 --> 00:25:10,400
here just so I can do it this way.

483
00:25:12,000 --> 00:25:14,200
Like so, okay.

484
00:25:18,900 --> 00:25:19,500
Okay.

485
00:25:21,700 --> 00:25:23,800
And we do this look this bitmap.

486
00:25:23,800 --> 00:25:25,900
Loading we get a look at the assets.

487
00:25:25,900 --> 00:25:27,000
We got the ID there.

488
00:25:28,600 --> 00:25:34,600
That all looks good and trying to think if there's anything else that

489
00:25:34,600 --> 00:25:36,200
I care about here.

490
00:25:38,800 --> 00:25:40,600
No, that looks about, right?

491
00:25:40,700 --> 00:25:44,200
So once we get that bitmap act, then we're all good and you can call

492
00:25:44,200 --> 00:25:45,200
this function, just fine.

493
00:25:45,200 --> 00:25:48,800
So, what I need to do again, to make that work, is I need to look at

494
00:25:48,800 --> 00:25:50,300
the render group, right?

495
00:25:51,400 --> 00:25:55,500
And I need to make sure that the render group has a notion of who it

496
00:25:55,500 --> 00:25:57,200
gets its game assets from, right.

497
00:25:57,200 --> 00:26:01,600
So when you're rendering any particular, there we go.

498
00:26:02,400 --> 00:26:07,900
Any particular group knows who it's going to ask for assets, that will

499
00:26:07,900 --> 00:26:10,500
be something that when you create an out, when you allocate a render

500
00:26:10,500 --> 00:26:13,300
group, you are required to pass in, right?

501
00:26:13,600 --> 00:26:16,500
So game assets assets.

502
00:26:16,800 --> 00:26:19,300
So you, you have to pass those in.

503
00:26:19,300 --> 00:26:20,700
That's just a flat

504
00:26:22,000 --> 00:26:27,200
And yeah, I think that will do it.

505
00:26:27,200 --> 00:26:33,500
I just have to actually store it here, like so yeah.

506
00:26:34,700 --> 00:26:37,800
Okay, so if I go ahead and compile that

507
00:26:40,100 --> 00:26:40,700
Looks like that.

508
00:26:40,700 --> 00:26:42,700
Sonata Moon thing at the time, that's fine.

509
00:26:43,300 --> 00:26:43,700
Okay.

510
00:26:45,200 --> 00:26:46,900
And

511
00:26:48,100 --> 00:26:49,700
I need to pass it here.

512
00:26:49,800 --> 00:26:52,900
I also don't know if it should really be in the game State.

513
00:26:53,400 --> 00:26:58,400
I feel like it's kind of a transient thing to be honest.

514
00:26:58,500 --> 00:26:59,900
Now it's going to be transitioning.

515
00:27:00,000 --> 00:27:01,100
Because it's going to fluctuate.

516
00:27:01,100 --> 00:27:05,300
So I feel like game assets to be completely honest with you, is

517
00:27:05,300 --> 00:27:08,800
actually something that should probably be in the transient pool.

518
00:27:09,600 --> 00:27:12,600
So I'm going to go ahead and stick it in there, okay?

519
00:27:13,000 --> 00:27:16,400
So in here, when we allocate the render group, we're going to pass the

520
00:27:16,400 --> 00:27:20,100
trance State assets, along with it, there we go.

521
00:27:21,000 --> 00:27:24,500
And all of these guys, for game State assets, they're all going to

522
00:27:24,500 --> 00:27:29,100
take trance State assets like so.

523
00:27:30,000 --> 00:27:30,800
There we go.

524
00:27:33,200 --> 00:27:36,100
Lobos in there and so on.

525
00:27:36,100 --> 00:27:40,900
And of course, we have to actually, if we're doing that loading, we

526
00:27:40,900 --> 00:27:46,300
have to do that out where we can actually make that stuff be in the

527
00:27:46,300 --> 00:27:47,400
transient state.

528
00:27:47,500 --> 00:27:49,000
So, I'm going to grab this out here.

529
00:27:49,700 --> 00:27:53,100
I don't think there's any real dependencies on that anywhere, but I

530
00:27:53,100 --> 00:27:56,200
can come in here and then after we've sort of done, the ground chunk

531
00:27:56,200 --> 00:27:59,700
stuff, I can put that in there and in theory, that's that's all going

532
00:27:59,700 --> 00:28:00,800
to be totally fine.

533
00:28:01,300 --> 00:28:02,800
And nothing weird will happen.

534
00:28:03,800 --> 00:28:07,400
Hopefully, that's, you know, Famous Last Words, Right?

535
00:28:07,400 --> 00:28:08,500
Famous last words.

536
00:28:09,800 --> 00:28:10,800
So, here we go.

537
00:28:11,600 --> 00:28:15,700
We've, you know, we're working just fine loading as expected.

538
00:28:15,900 --> 00:28:20,200
So now, I'm going to go ahead and in those push bitmap calls in the

539
00:28:20,200 --> 00:28:26,000
ones where I can, I'm going to go ahead and make all of the push

540
00:28:26,000 --> 00:28:26,800
bitmap calls.

541
00:28:26,800 --> 00:28:30,900
Actually just use those bitmap IDs if possible.

542
00:28:31,200 --> 00:28:31,400
Right.

543
00:28:31,400 --> 00:28:35,300
So anywhere that can use a bitmap ID at will so you can see that we

544
00:28:35,300 --> 00:28:37,700
were previously calling get that map here instead.

545
00:28:37,700 --> 00:28:39,100
I'm just going to call.

546
00:28:41,000 --> 00:28:45,900
I'm just going to render with the actual ID that I was trying to use

547
00:28:46,100 --> 00:28:47,800
to render this thing, right?

548
00:28:47,900 --> 00:28:49,100
And so there we go.

549
00:28:50,400 --> 00:28:54,000
Like so again, this is really really straightforward.

550
00:28:54,200 --> 00:29:01,100
I'm just moving it slowly slowly, one step at a time down into sort of

551
00:29:01,400 --> 00:29:06,900
The renderer doing that query and again, no, big surprises games,

552
00:29:06,900 --> 00:29:07,600
looks the same.

553
00:29:07,600 --> 00:29:10,200
Everything is loaded as we would expect.

554
00:29:11,100 --> 00:29:11,400
Okay?

555
00:29:11,400 --> 00:29:16,600
So now we have, the renderer is actually the one who's talking about

556
00:29:16,600 --> 00:29:20,900
these assets and the important part about that, and the reason that I

557
00:29:20,900 --> 00:29:23,200
am sort of bringing it to your attention,

558
00:29:24,800 --> 00:29:28,100
Or rather that I, you know, I'm sort of doing these slow things, you

559
00:29:28,100 --> 00:29:32,400
can see how they go and and see each individual step of the process,

560
00:29:33,100 --> 00:29:35,500
is that what we have now done?

561
00:29:35,700 --> 00:29:40,300
And this is a very crucial step in my opinion, to doing background

562
00:29:40,300 --> 00:29:44,700
screaming properly, because a lot of people say, background swimming

563
00:29:44,700 --> 00:29:45,500
is really hard.

564
00:29:46,700 --> 00:29:48,100
And I don't really know why that is.

565
00:29:48,500 --> 00:29:49,900
I've never found it to be difficult.

566
00:29:49,900 --> 00:29:56,400
I've always thought it's very straightforward and so I feel like it's

567
00:29:56,400 --> 00:29:59,800
important to kind of go through all of the, the steps and just show.

568
00:30:00,200 --> 00:30:03,600
How they work and how they logically follow from each other, just in

569
00:30:04,100 --> 00:30:08,600
to clear up, whatever the confusion is about background stamp.

570
00:30:08,700 --> 00:30:09,200
So anyway,

571
00:30:10,700 --> 00:30:14,300
So what we've done here now right is we put ourselves in a position

572
00:30:14,500 --> 00:30:20,900
where the renderer is getting an asset ID and it's asking the asset

573
00:30:21,400 --> 00:30:24,600
storage to give it back the bitmap for that ID.

574
00:30:25,700 --> 00:30:30,300
What we can now do is, say if, for some reason that bitmap was not

575
00:30:30,300 --> 00:30:33,200
available, we can just not draw it, right?

576
00:30:33,600 --> 00:30:38,600
So we get rid of one of the critical failure cases, which is that

577
00:30:38,600 --> 00:30:41,400
somebody goes to render something and they have a pointer into some

578
00:30:41,400 --> 00:30:43,900
invalid data or worse case or whatever.

579
00:30:44,200 --> 00:30:48,000
And we also get rid of the problem of over trying to render something

580
00:30:48,000 --> 00:30:50,500
and maybe it's off screen but we don't know that.

581
00:30:50,500 --> 00:30:52,500
And then we end up in a situation where we're trying to run or

582
00:30:52,500 --> 00:30:55,300
something that hasn't been streamed in yet and it causes this problem.

583
00:30:55,700 --> 00:30:59,100
And locks up the frame because it's waiting for that or whatever.

584
00:31:00,000 --> 00:31:03,800
We can actually just get rid of all that and say, look, when we try to

585
00:31:03,800 --> 00:31:06,900
render something, if it's not there, we just don't render right.

586
00:31:07,300 --> 00:31:12,200
And in my mind that's actually always the right decision because, you

587
00:31:12,200 --> 00:31:16,200
know, your game should be set up so that the streaming is always ahead

588
00:31:16,700 --> 00:31:18,900
if the streaming ever falls behind.

589
00:31:19,000 --> 00:31:21,200
I would rather not have the frame rate.

590
00:31:21,200 --> 00:31:22,100
Take a hit.

591
00:31:23,300 --> 00:31:25,300
I mean as far as I'm concerned, that's just a bug.

592
00:31:25,700 --> 00:31:28,300
Because the frame rate should just shouldn't slow down.

593
00:31:29,400 --> 00:31:32,600
There are ways that we can make it so that the frame rate does stall

594
00:31:32,900 --> 00:31:36,500
by basically here if the bitmaps, not there you basically.

595
00:31:36,500 --> 00:31:41,100
Oh you know go ahead and stall stall the frame but I usually just do

596
00:31:41,100 --> 00:31:41,800
it this way.

597
00:31:42,000 --> 00:31:44,700
And I just say okay we always make sure the streaming system is fast

598
00:31:44,700 --> 00:31:47,400
enough to keep up and if for some reason to keep up, the worst is

599
00:31:47,400 --> 00:31:49,800
you'll get some kind of flicker where a bitmap That was supposed to be

600
00:31:49,800 --> 00:31:52,500
loaded wasn't loaded and there's other things we can do to mitigate

601
00:31:52,500 --> 00:31:54,200
that by using fallback that Maps as well.

602
00:31:54,200 --> 00:31:54,800
And so on,

603
00:31:57,800 --> 00:31:58,300
But yeah.

604
00:31:59,400 --> 00:32:04,500
So now we've got a situation where we could just not return something

605
00:32:04,900 --> 00:32:06,600
if we have it loaded it, right?

606
00:32:07,400 --> 00:32:12,600
They couldn't just full-on return 0 and the renderer just won't render

607
00:32:12,600 --> 00:32:13,500
it, right?

608
00:32:13,600 --> 00:32:15,100
No, big deal.

609
00:32:15,700 --> 00:32:20,100
What that means is, I can now go up here to my game assets.

610
00:32:21,600 --> 00:32:23,200
And what I can do is I can change it.

611
00:32:23,200 --> 00:32:27,400
So that actually now we don't necessarily have all of them loaded,

612
00:32:27,600 --> 00:32:27,900
right?

613
00:32:27,900 --> 00:32:33,300
There's maybe maybe we don't have them loaded, we just have a pointer

614
00:32:33,600 --> 00:32:37,400
and that pointer is going to be null when we start out because there

615
00:32:37,400 --> 00:32:41,400
are no bitmaps yet and off you go, right?

616
00:32:41,500 --> 00:32:46,900
And so what would happen there if we were to do that is when we when

617
00:32:46,900 --> 00:32:48,300
we do this here, right?

618
00:32:48,900 --> 00:32:50,500
We would actually grab out the pointer.

619
00:32:50,700 --> 00:32:51,800
ER and the pointer may be known.

620
00:32:51,800 --> 00:32:52,400
That's fine.

621
00:32:52,400 --> 00:32:53,300
And we return it.

622
00:32:53,300 --> 00:32:53,800
Okay.

623
00:32:55,100 --> 00:32:59,800
So I feel like now I mean this

624
00:33:00,000 --> 00:33:01,600
Still work just fine, right?

625
00:33:01,800 --> 00:33:02,400
Oh no.

626
00:33:04,200 --> 00:33:07,600
It won't because we haven't actually we haven't actually allocated

627
00:33:07,600 --> 00:33:08,600
space for those guys yet.

628
00:33:08,600 --> 00:33:11,800
So we need at least some kind of a little debug loading guy here.

629
00:33:12,700 --> 00:33:14,800
Alright, so I'm going to grab these guys here.

630
00:33:14,800 --> 00:33:16,800
All of the things that were in the assets.

631
00:33:16,800 --> 00:33:19,200
These are the guys that are in the assets, right?

632
00:33:19,600 --> 00:33:25,800
I'm going to grab them up and I'm going to put them in in a separate

633
00:33:25,800 --> 00:33:26,500
routine here.

634
00:33:26,900 --> 00:33:27,300
Right?

635
00:33:27,800 --> 00:33:31,300
This routine is called you know load assets or something, I don't

636
00:33:31,300 --> 00:33:31,700
know.

637
00:33:31,700 --> 00:33:33,400
Kick your favorite name for it.

638
00:33:34,300 --> 00:33:38,700
And what that's going to do here, this is going to take a game assets

639
00:33:38,700 --> 00:33:41,800
structure and it's going to go ahead and do the loading.

640
00:33:42,200 --> 00:33:46,600
But again, what we do now, when we do debug look bitmap, what that

641
00:33:46,600 --> 00:33:49,000
actually does is that gives us about a bitmap structure.

642
00:33:49,100 --> 00:33:52,000
We haven't actually allocated space to store any of these.

643
00:33:52,400 --> 00:33:53,900
So that's a little bit of a problem.

644
00:33:54,200 --> 00:33:54,900
Oh whoops.

645
00:33:55,000 --> 00:33:56,100
I grabbed the wrong, guys.

646
00:33:57,400 --> 00:33:58,000
My bad.

647
00:33:58,900 --> 00:34:00,100
Sorry about that.

648
00:34:03,600 --> 00:34:07,000
Nobody saw me just pretend that never happened.

649
00:34:07,800 --> 00:34:12,800
All right, so if I go in here and I just sort of clean this up a

650
00:34:12,800 --> 00:34:14,699
little bit, right?

651
00:34:14,699 --> 00:34:17,400
The only thing that we would need to do here is we need to figure out

652
00:34:17,400 --> 00:34:19,600
again some way that we can.

653
00:34:19,600 --> 00:34:25,500
We can make these guys allocate actual storage space and that's not

654
00:34:25,500 --> 00:34:27,000
particularly difficult, right?

655
00:34:27,000 --> 00:34:31,400
In debug load bitmap, when we're calling it here, I could just go

656
00:34:31,400 --> 00:34:36,800
ahead and and allocate the extra space for the bitmap by making sort

657
00:34:36,800 --> 00:34:37,500
of a temporary.

658
00:34:37,900 --> 00:34:40,600
in here, which is like

659
00:34:42,699 --> 00:34:48,000
You know, allocate or debug allocate load bitmap, something like this.

660
00:34:49,000 --> 00:34:51,100
Let's go ahead and put those in there, okay?

661
00:34:51,100 --> 00:34:54,699
Little bit map allocate, the bitmap, allocate load bitmap.

662
00:34:55,300 --> 00:35:00,400
And what this will do is this will take the transient state so that it

663
00:35:00,400 --> 00:35:03,700
can go ahead and allocate space for bitmaps as it loads them.

664
00:35:04,200 --> 00:35:04,500
Okay.

665
00:35:04,500 --> 00:35:07,600
So there's the trance, State and off we go.

666
00:35:08,400 --> 00:35:09,700
So, we've got that in there.

667
00:35:10,000 --> 00:35:12,400
This function is just going to call debug load bitmap.

668
00:35:12,900 --> 00:35:17,500
It's going to pass all of the same stuff that it got right in here.

669
00:35:18,100 --> 00:35:19,600
Line-X top down a line.

670
00:35:19,600 --> 00:35:25,100
Y and all I'm going to do is I'm going to take that transient State

671
00:35:25,300 --> 00:35:30,000
and I'm going to use the transient Arena to basically get ourselves

672
00:35:30,300 --> 00:35:32,900
some space for that bitmap structure, right?

673
00:35:32,900 --> 00:35:35,900
So I've Got Loaded bitmap, like so,

674
00:35:43,100 --> 00:35:47,900
Okay, I've got my load to bitmap that I'm going to allocate here and I

675
00:35:47,900 --> 00:35:52,000
essentially want that to go put this little do a little result here.

676
00:35:52,700 --> 00:35:55,700
And I guess also, this will just return a pointer.

677
00:35:56,200 --> 00:35:58,000
We're not actually even going to have to do.

678
00:36:00,300 --> 00:36:03,600
This is call anymore, right?

679
00:36:03,800 --> 00:36:09,900
This is just going to be assets bitmaps.

680
00:36:11,800 --> 00:36:12,400
There we go.

681
00:36:16,500 --> 00:36:17,000
Oops.

682
00:36:22,000 --> 00:36:30,200
Doodoo text transformation, just enough to be annoying, but not enough

683
00:36:30,200 --> 00:36:33,200
to try and wrestle with an E Max macro, you know, it is.

684
00:36:33,900 --> 00:36:38,100
All right, so what I do that, I'm going to try to allocate one of

685
00:36:38,100 --> 00:36:41,200
these bitmaps here by getting it off of the transient Arena.

686
00:36:41,200 --> 00:36:43,600
I'll you know, take a look at bitmap and that'll be fine.

687
00:36:44,400 --> 00:36:47,500
I'm then going to try and do the debug look bitmap.

688
00:36:47,500 --> 00:36:50,600
Call I have the result that that I want.

689
00:36:50,600 --> 00:36:51,700
So that's I'm going to

690
00:36:52,200 --> 00:36:56,400
Oops, I'm going to write into that with debug bitmap, whatever comes

691
00:36:56,400 --> 00:36:59,700
back and then I'm going to return the results, right?

692
00:37:00,400 --> 00:37:01,000
And

693
00:37:04,700 --> 00:37:05,700
What did I do?

694
00:37:05,700 --> 00:37:07,600
Wrong loaded bitmap illegal.

695
00:37:07,600 --> 00:37:10,000
Use the type of expression is push size.

696
00:37:12,300 --> 00:37:13,900
Not the right function?

697
00:37:13,900 --> 00:37:14,900
It's push struct.

698
00:37:15,800 --> 00:37:16,600
That's videos.

699
00:37:20,000 --> 00:37:22,100
I don't know what the name of this arena is.

700
00:37:22,600 --> 00:37:26,000
Actually I guess it's Train Arena, so that's fine.

701
00:37:27,200 --> 00:37:32,000
And the thread, when we call load assets, I guess I have to pass that,

702
00:37:32,000 --> 00:37:32,300
I guess.

703
00:37:32,300 --> 00:37:34,800
I have to actually pass both of these, unfortunately.

704
00:37:35,600 --> 00:37:37,400
So we'll go ahead and put those on there.

705
00:37:38,500 --> 00:37:44,800
And then, I think we should be good memory.

706
00:37:45,300 --> 00:37:46,100
Oh, right.

707
00:37:46,300 --> 00:37:48,300
So, this can just be read entire file.

708
00:37:49,500 --> 00:37:56,400
Go read entire file and there we go.

709
00:38:01,800 --> 00:38:05,000
All right, hopefully not too many, more little things to do.

710
00:38:05,000 --> 00:38:05,600
There we go.

711
00:38:07,100 --> 00:38:11,000
And it does not take four arguments.

712
00:38:12,000 --> 00:38:13,100
That is true.

713
00:38:13,900 --> 00:38:19,400
I guess there's a default parameter on those guys, debug or maybe not

714
00:38:20,900 --> 00:38:22,300
one, two, three.

715
00:38:23,200 --> 00:38:26,300
So if there's no, default parameter what was test background.

716
00:38:27,300 --> 00:38:31,000
Previously using it.

717
00:38:31,200 --> 00:38:31,700
Is there one?

718
00:38:31,700 --> 00:38:32,300
That's now.

719
00:38:32,300 --> 00:38:33,500
There it is right there.

720
00:38:34,200 --> 00:38:36,100
So it's actually doing these guys here.

721
00:38:36,700 --> 00:38:38,500
Yeah, it's using .5 and point.

722
00:38:38,500 --> 00:38:42,100
Five is the aligned percentage in the case where nothing was

723
00:38:42,100 --> 00:38:42,900
specified.

724
00:38:44,600 --> 00:38:47,500
That's frustrating, but that's okay.

725
00:38:48,000 --> 00:38:51,200
Again, this is only a temporary routine, so we'll just Spam it for

726
00:38:51,200 --> 00:38:51,700
now.

727
00:38:52,500 --> 00:38:53,400
It's totally fine.

728
00:38:54,400 --> 00:38:57,500
Not what I would prefer but it works.

729
00:38:58,200 --> 00:38:59,800
Alright, so now we should

730
00:39:00,300 --> 00:39:07,500
Nothing right in the places where there are where we were where we're

731
00:39:07,500 --> 00:39:10,100
going through that path because we've never called that loading

732
00:39:10,100 --> 00:39:11,300
function, right?

733
00:39:11,300 --> 00:39:13,200
So we're never going to see those, okay?

734
00:39:13,200 --> 00:39:14,600
And we don't and that's correct.

735
00:39:14,600 --> 00:39:19,100
And now if we actually call the load assets function, we should, we

736
00:39:19,100 --> 00:39:21,200
should see them show up, right?

737
00:39:22,000 --> 00:39:22,800
So here we go.

738
00:39:24,400 --> 00:39:29,600
There's that brand state with the assets and thread context.

739
00:39:29,600 --> 00:39:33,500
And I saved this here because I never remember what it is.

740
00:39:33,500 --> 00:39:39,300
There it is, that read entire file, okay?

741
00:39:39,500 --> 00:39:39,900
Oops.

742
00:39:42,400 --> 00:39:44,500
Load assets can iron it to.

743
00:39:44,600 --> 00:39:45,400
That's true.

744
00:39:45,400 --> 00:39:46,700
That needs an ampersand.

745
00:39:48,200 --> 00:39:51,100
And so now those guys should be loaded and show up and they do, which

746
00:39:51,100 --> 00:39:53,600
is what we would have expected and that's good.

747
00:39:53,600 --> 00:39:57,000
So we've got our trees back and so on and our shadow and all that

748
00:39:57,000 --> 00:39:57,800
other good stuff.

749
00:39:58,800 --> 00:40:03,900
All right, so now that we've got those assets, loading this way, what

750
00:40:03,900 --> 00:40:08,000
we can also do now right is we can make those assets if we want to.

751
00:40:08,000 --> 00:40:11,700
We don't actually have to load those assets until somebody actually

752
00:40:11,700 --> 00:40:13,000
asked for them, right?

753
00:40:13,900 --> 00:40:17,000
We're now sort of in a position to actually start implementing a

754
00:40:17,000 --> 00:40:18,400
little bit of that delayed loading.

755
00:40:21,300 --> 00:40:22,300
If we sow toes.

756
00:40:25,500 --> 00:40:28,100
So the question is, how would we go about doing that, right?

757
00:40:28,700 --> 00:40:33,800
And here's the part where we probably want to start getting into the

758
00:40:33,800 --> 00:40:37,600
operating system stuff because we would like to be able to queue up

759
00:40:37,600 --> 00:40:42,400
the disk reads, but we can sort of simulate that because since we

760
00:40:42,400 --> 00:40:44,600
actually do have a task system.

761
00:40:44,600 --> 00:40:48,900
Now we can kind of put that we can kind of use that a little bit.

762
00:40:49,500 --> 00:40:54,700
I just want to emphasize the fact that at least at the moment it's not

763
00:40:54,700 --> 00:40:55,100
really.

764
00:40:55,300 --> 00:41:00,200
Case that we want to necessarily use the task system and let it block

765
00:41:00,200 --> 00:41:03,500
for some reasons that we'll talk about a little bit later, but we can

766
00:41:03,500 --> 00:41:05,000
start by doing it that way.

767
00:41:05,000 --> 00:41:08,700
And then maybe go into the OS layer and add some additional support

768
00:41:08,700 --> 00:41:13,100
that we're going to want for doing loading in a smarter way than

769
00:41:14,600 --> 00:41:15,400
then this way.

770
00:41:15,800 --> 00:41:16,300
So

771
00:41:17,800 --> 00:41:19,100
what are some things to think about here?

772
00:41:19,700 --> 00:41:22,800
So when we're doing load assets, right?

773
00:41:22,800 --> 00:41:24,700
We're loading all these assets at once.

774
00:41:24,700 --> 00:41:28,500
What I'd like to do now instead is have a way, have a function that

775
00:41:28,500 --> 00:41:30,000
just loads an asset.

776
00:41:30,300 --> 00:41:33,600
And again this is going to be probably like one of the dumbest things

777
00:41:33,600 --> 00:41:34,700
that you've ever seen.

778
00:41:35,000 --> 00:41:39,000
But we're still again like I said one step at a time very very

779
00:41:39,000 --> 00:41:42,300
important to do one step at a time and so that's what we're going to

780
00:41:42,300 --> 00:41:43,500
do, right?

781
00:41:44,200 --> 00:41:47,400
I'm literally just going to wrap this in a switch statement.

782
00:41:47,700 --> 00:41:51,400
So that we're literally calling the exact same code.

783
00:41:51,400 --> 00:41:55,700
We're not doing anything else one step at a time.

784
00:41:56,000 --> 00:41:58,000
So we're wrapping it in the switch statement.

785
00:41:58,300 --> 00:41:59,800
And so now we know we can

786
00:42:00,000 --> 00:42:00,900
Just one of these.

787
00:42:00,900 --> 00:42:04,800
And, and again, the only thing that's changing here is that the switch

788
00:42:04,800 --> 00:42:08,200
statement makes it so that it only calls one instead of calling them

789
00:42:08,200 --> 00:42:10,100
all in a row, right?

790
00:42:10,100 --> 00:42:14,900
So what I want to do here is say, alright, we're going to call load

791
00:42:14,900 --> 00:42:18,900
assets, and instead, it's just going to be load a set, right?

792
00:42:18,900 --> 00:42:24,200
And it's going to take in here some ID, right?

793
00:42:24,200 --> 00:42:29,800
It's going to take a game asset ID, there's the ID, and it's going to

794
00:42:30,000 --> 00:42:31,100
Live it, right?

795
00:42:31,800 --> 00:42:32,400
So

796
00:42:34,300 --> 00:42:35,800
This call goes away now.

797
00:42:36,900 --> 00:42:39,800
And again if we don't do anything since we're never calling that

798
00:42:39,800 --> 00:42:44,500
function, we don't see anything at all but if we go back in here now

799
00:42:44,500 --> 00:42:49,300
we can opt to actually make that call at various times if we so chose

800
00:42:50,600 --> 00:42:53,800
it's a little bit what we probably want to do because it's a little

801
00:42:53,800 --> 00:42:59,100
bit gnarly to actually call is we would like to be able to have our

802
00:42:59,100 --> 00:43:00,500
load asset call.

803
00:43:00,900 --> 00:43:03,400
Actually do something you know

804
00:43:03,500 --> 00:43:07,100
Oh, maybe it keeps a couple of these things, kind of a little more

805
00:43:07,100 --> 00:43:10,900
understood so that doesn't have to have them all passed in all the

806
00:43:10,900 --> 00:43:12,100
time, right?

807
00:43:12,400 --> 00:43:16,900
Especially because I yeah, like we're not really going to be calling

808
00:43:16,900 --> 00:43:19,900
this debug allocate load BMP thing.

809
00:43:20,700 --> 00:43:24,900
So it kind of just gets annoying to pass all these, all these things

810
00:43:24,900 --> 00:43:28,000
in here when we're going to probably go ahead and get rid of this and

811
00:43:28,000 --> 00:43:30,800
switch to something that we can use a cue for, right.

812
00:43:34,500 --> 00:43:37,000
Okay, so let's see.

813
00:43:37,400 --> 00:43:38,400
What do we want to do here?

814
00:43:39,700 --> 00:43:44,500
I guess what I'd like to do is say, well when we call in here, I guess

815
00:43:44,500 --> 00:43:45,300
we will pass.

816
00:43:45,300 --> 00:43:51,800
Maybe the transient state will pass the game assets thread context.

817
00:43:52,400 --> 00:43:57,000
Yeah, yeah, hmm.

818
00:43:59,900 --> 00:44:04,300
So for the next step, I have two choices and I'm not sure which one I

819
00:44:04,300 --> 00:44:05,400
want to do.

820
00:44:06,800 --> 00:44:10,800
Choice one is to have the renderer directly request assets to be

821
00:44:10,800 --> 00:44:11,500
loaded.

822
00:44:12,400 --> 00:44:18,600
And number two is to have them go into a queue to be loaded later.

823
00:44:21,400 --> 00:44:26,600
I think what I would like to do is probably I think I would like to

824
00:44:26,600 --> 00:44:30,200
make it so that the render requests access directly, even though

825
00:44:30,200 --> 00:44:34,500
that's a little less clean, I would say that eventually, I feel like

826
00:44:34,500 --> 00:44:37,600
we're going to be in a situation where certain background render

827
00:44:37,600 --> 00:44:42,700
processes are going to have to block on assets that they need loaded

828
00:44:42,700 --> 00:44:44,800
in order to do compositing properly.

829
00:44:45,300 --> 00:44:50,400
And so I think we're going to want the renderer to be able to force

830
00:44:50,600 --> 00:44:52,900
That issue if that makes sense.

831
00:44:54,700 --> 00:44:57,300
Although we could force the issue from outside.

832
00:44:59,200 --> 00:44:59,800
Hmm.

833
00:45:04,200 --> 00:45:06,600
Man, that's a tough one.

834
00:45:07,600 --> 00:45:09,300
That's a tough one.

835
00:45:10,300 --> 00:45:10,700
Well,

836
00:45:12,600 --> 00:45:17,600
I guess I'll just have to experiment a little bit and see but anyway

837
00:45:17,600 --> 00:45:20,800
for the for the time being let's let's try to make a little bit of

838
00:45:20,800 --> 00:45:21,800
forward progress there.

839
00:45:22,300 --> 00:45:24,800
We only have about 10 minutes left on the stream anyway.

840
00:45:24,800 --> 00:45:29,200
So let's just keep going with where we were and you know as we sort of

841
00:45:29,300 --> 00:45:32,500
root around in there a little bit more hopefully it'll become clear

842
00:45:32,700 --> 00:45:35,600
what the correct choice is for that particular thing.

843
00:45:35,600 --> 00:45:39,400
So let's say we were taking one of these guys and we were going to do

844
00:45:39,400 --> 00:45:42,200
this this this push-fit map call right.

845
00:45:42,900 --> 00:45:44,700
And this push bitmap call again.

846
00:45:44,700 --> 00:45:49,200
Needs the the game asset system needs to be able to do this stuff.

847
00:45:49,200 --> 00:45:52,700
The only thing that I'm not crazy about is this thread context thing

848
00:45:52,700 --> 00:45:53,100
here.

849
00:45:53,700 --> 00:45:57,300
And so I think I'm just going to go ahead and just cheat about that

850
00:45:57,300 --> 00:46:00,000
because I really like, I said, don't want this guy to ever be talking

851
00:46:00,000 --> 00:46:00,400
about a threat.

852
00:46:00,400 --> 00:46:01,800
I don't want them to know about a threat.

853
00:46:01,800 --> 00:46:04,300
I don't want any of that stuff happening in there, but because of the

854
00:46:04,300 --> 00:46:07,200
way we set up our debug allocate little bit map, it takes it just as a

855
00:46:07,200 --> 00:46:10,300
dummy, which probably was a stupid idea.

856
00:46:10,500 --> 00:46:12,200
But, you know, sometimes,

857
00:46:12,400 --> 00:46:13,200
Stupid ideas.

858
00:46:13,700 --> 00:46:18,700
So anyway, I'm going to go ahead and say that we've got an arena in

859
00:46:18,700 --> 00:46:19,300
here.

860
00:46:21,700 --> 00:46:23,300
In the game asset Arena.

861
00:46:24,200 --> 00:46:27,800
So this is going to be a memory Arena asset Arena.

862
00:46:29,200 --> 00:46:31,200
And that's where it's going to get its assets from.

863
00:46:31,900 --> 00:46:36,300
So it's going to get rid of the trance State and it's going to instead

864
00:46:36,300 --> 00:46:40,200
of passing trance State here, it's just going to pass an arena

865
00:46:40,200 --> 00:46:40,900
directly.

866
00:46:41,200 --> 00:46:42,800
So it'll pass a memory Arena.

867
00:46:43,100 --> 00:46:45,100
Here's the arena like so on.

868
00:46:46,200 --> 00:46:46,800
There we go.

869
00:46:48,500 --> 00:46:51,800
And so this will just pass that Arena directly through.

870
00:46:53,100 --> 00:46:53,700
There we go.

871
00:46:55,300 --> 00:46:58,700
And we will store read entire file.

872
00:46:59,200 --> 00:47:00,400
For now in here.

873
00:47:00,700 --> 00:47:05,700
So the fats in there as well, that way that goes away and then thread.

874
00:47:05,700 --> 00:47:09,600
We're basically going to put 20 to do.

875
00:47:12,000 --> 00:47:20,200
Get rid of this thread thing when I load through a q instead of the

876
00:47:20,200 --> 00:47:22,400
debug call, right?

877
00:47:24,800 --> 00:47:29,800
So anyway, got our game assets here and we've got the ID.

878
00:47:29,800 --> 00:47:33,000
So now it only needs those two things, which is what I wanted.

879
00:47:33,200 --> 00:47:36,900
It goes to heads and passes, I guess we'll just say this is the arena.

880
00:47:37,200 --> 00:47:40,200
Let me know it's the assets Arena because it's in the asset structure.

881
00:47:40,800 --> 00:47:43,500
So we'll go ahead and make all that happen.

882
00:47:43,900 --> 00:47:50,700
There we go and continue on assets Arena.

883
00:47:53,300 --> 00:47:54,900
And read entire file.

884
00:47:55,900 --> 00:47:59,700
I'll just dear f it out here assets.

885
00:48:00,100 --> 00:48:01,000
The entire file.

886
00:48:02,000 --> 00:48:04,300
And now I would like to compile.

887
00:48:04,300 --> 00:48:04,900
There we go.

888
00:48:05,800 --> 00:48:08,700
And when I set up that game asset structure at the beginning, now I

889
00:48:08,700 --> 00:48:12,500
have to actually I have to actually do it.

890
00:48:12,500 --> 00:48:16,000
I have to actually get that stuff initialized since right now, it's

891
00:48:16,000 --> 00:48:17,100
not set in anything.

892
00:48:17,600 --> 00:48:18,100
Right?

893
00:48:18,600 --> 00:48:24,500
And so inside our transient State initialization here, I need to do

894
00:48:24,500 --> 00:48:25,700
game assets.

895
00:48:26,300 --> 00:48:28,200
So oops, I guess I should do it.

896
00:48:28,200 --> 00:48:29,600
Probably up a little higher, huh?

897
00:48:30,500 --> 00:48:33,600
when we initialize this stuff, I'm going to go ahead and say,

898
00:48:35,000 --> 00:48:37,100
That we have our game assets.

899
00:48:39,700 --> 00:48:48,200
Has it Arena and that arena is a sub Arena like so of the trance State

900
00:48:48,200 --> 00:48:49,000
Tran Arena.

901
00:48:51,700 --> 00:48:55,200
And that's going to be at the moment, you know, this is going to be

902
00:48:55,200 --> 00:48:58,500
eventually our biggest thing because it's going to store all of the

903
00:48:58,500 --> 00:48:59,300
assets that are loaded.

904
00:48:59,300 --> 00:49:03,000
But at the moment, we will not actually be doing that.

905
00:49:03,000 --> 00:49:05,500
So I'll just I'll keep it a little conservative here, but eventually

906
00:49:05,500 --> 00:49:06,900
we'll make that pretty large.

907
00:49:07,700 --> 00:49:08,800
So we put that in there.

908
00:49:10,100 --> 00:49:13,300
And then we need to set up read entire file as well.

909
00:49:13,600 --> 00:49:21,400
Oops should be trance State, trance State assets, read entire file

910
00:49:21,600 --> 00:49:23,900
equals memory debug lead.

911
00:49:23,900 --> 00:49:25,600
Entire file lat.

912
00:49:26,800 --> 00:49:28,200
Lat for me entire file.

913
00:49:29,500 --> 00:49:31,600
And that's the only things I think we had to set up.

914
00:49:32,000 --> 00:49:36,700
Okay, so now it's as simple as just calling that load assets, right?

915
00:49:36,700 --> 00:49:37,900
That load a set function.

916
00:49:38,400 --> 00:49:42,200
And so if I want to do this now even though it's synchronous inside

917
00:49:42,200 --> 00:49:46,600
render group, I can go ahead and say, you know, if the bitmap isn't in

918
00:49:46,600 --> 00:49:47,100
there.

919
00:49:47,100 --> 00:49:48,200
Well, that's okay.

920
00:49:48,200 --> 00:49:52,500
Why don't you just go ahead and tell somebody to go get it right?

921
00:49:52,800 --> 00:49:56,000
So that it'll be there next time, right?

922
00:49:56,100 --> 00:49:56,400
That seems

923
00:49:56,600 --> 00:50:00,400
Good idea, load asset.

924
00:50:00,500 --> 00:50:04,700
Now needs to be something that can be called externally we go.

925
00:50:06,100 --> 00:50:11,700
And so now in theory, when we run stuff, stuff gets loaded, right?

926
00:50:13,000 --> 00:50:14,000
And off we go.

927
00:50:14,700 --> 00:50:20,600
Okay, so furthermore, we can even probably now if we really want to,

928
00:50:20,800 --> 00:50:24,200
and we're not quite in the full position to do so yet.

929
00:50:24,300 --> 00:50:27,700
But if we want to, we could probably now even make this, the

930
00:50:27,800 --> 00:50:30,600
background loaded thing, right?

931
00:50:31,100 --> 00:50:35,900
What we can do here is we can say, okay, if we want a background load

932
00:50:35,900 --> 00:50:39,700
this, remember how we did our background stuff for say doing the

933
00:50:39,700 --> 00:50:40,800
ground chunks, right?

934
00:50:41,100 --> 00:50:42,700
We had something that looked like this.

935
00:50:44,300 --> 00:50:49,800
And so, what we could do is we could say, you know, we have a thing

936
00:50:49,800 --> 00:50:52,000
called load asset work.

937
00:50:53,200 --> 00:50:55,300
And the load up 5-minute warning.

938
00:50:56,100 --> 00:50:59,600
The load asset work is just going to take the stuff that this thing

939
00:50:59,600 --> 00:50:59,800
means.

940
00:51:00,300 --> 00:51:01,800
To actually do stuff.

941
00:51:02,700 --> 00:51:05,800
Okay, so it's going to need the ID.

942
00:51:05,800 --> 00:51:07,600
It's going to need the asset structure.

943
00:51:08,200 --> 00:51:11,500
It's going to need that fake thread, right?

944
00:51:13,300 --> 00:51:19,100
Which like I said, we'll need to go away, it'll need read entire file,

945
00:51:19,100 --> 00:51:21,600
but it can get that just out of here.

946
00:51:22,000 --> 00:51:25,100
And then it's going to need the file name of thing that's supposed to

947
00:51:25,100 --> 00:51:26,500
load, right?

948
00:51:27,900 --> 00:51:29,800
So I think that's

949
00:51:30,000 --> 00:51:33,800
So most everything that it would need there.

950
00:51:34,900 --> 00:51:43,000
So if I went ahead and said that we had load asset work and I grab

951
00:51:43,000 --> 00:51:47,900
that out, then if, as long as I have, I think really all I need is

952
00:51:47,900 --> 00:51:50,000
assets and the file name, right?

953
00:51:50,500 --> 00:51:53,900
So it really just be that thing.

954
00:51:56,200 --> 00:51:58,100
Oh and the ID, right?

955
00:51:58,700 --> 00:51:59,600
I think that's it.

956
00:52:01,000 --> 00:52:04,700
And then that would ya be just about everything, right?

957
00:52:05,200 --> 00:52:09,300
So we'd have we'd have became assets.

958
00:52:11,300 --> 00:52:11,800
Pointer.

959
00:52:12,900 --> 00:52:16,800
We would have the file name.

960
00:52:18,500 --> 00:52:20,900
And we would have the game asset ID.

961
00:52:25,400 --> 00:52:30,200
So if we wanted to then fill ground chump work, we can look at how

962
00:52:30,200 --> 00:52:32,000
that was happening here, right?

963
00:52:33,500 --> 00:52:38,200
We have some some little bit more work to do to actually get it out

964
00:52:38,200 --> 00:52:40,500
there asset.

965
00:52:42,300 --> 00:52:45,700
We would need it to do something where it actually gets a struct to

966
00:52:45,700 --> 00:52:50,500
fill out the work order and then actually does a platform, a tend to

967
00:52:50,500 --> 00:52:51,900
entry on it.

968
00:52:53,100 --> 00:52:53,800
Like, so.

969
00:52:54,300 --> 00:52:55,100
And that would need

970
00:52:55,300 --> 00:52:58,100
At that priority queue I'd put that in there.

971
00:52:58,200 --> 00:53:00,500
Our asset load Q, something like this.

972
00:53:02,700 --> 00:53:06,700
And this would use that load asset work function.

973
00:53:07,700 --> 00:53:10,900
So there is load asset work.

974
00:53:11,000 --> 00:53:12,300
There is the work order.

975
00:53:12,700 --> 00:53:14,400
There's the cue that it would use.

976
00:53:14,800 --> 00:53:19,600
And what I want to do here is say again, we need to do that sort of

977
00:53:19,600 --> 00:53:21,300
begin tasked with memory thing.

978
00:53:22,000 --> 00:53:26,900
So if we're going to do a begin task with memory like so,

979
00:53:28,900 --> 00:53:33,400
Then if I remember correctly, the task has its own Arena so we can go

980
00:53:33,400 --> 00:53:35,200
ahead and grab that in here.

981
00:53:35,200 --> 00:53:37,000
There's nothing special we have to do there.

982
00:53:37,600 --> 00:53:41,900
The work order for this guy is assets, file name, right?

983
00:53:42,000 --> 00:53:43,600
So it's assets.

984
00:53:45,300 --> 00:53:49,600
Filename and that'll actually be what's handled here, right?

985
00:53:49,600 --> 00:53:52,000
So assets, file name, so

986
00:54:04,100 --> 00:54:05,300
Keep it going.

987
00:54:07,600 --> 00:54:08,700
Almost there.

988
00:54:12,000 --> 00:54:15,100
Again, just not quite enough to make an emac Smacker out of it.

989
00:54:16,200 --> 00:54:21,300
Just a little more than his fun to type in what you gonna do.

990
00:54:22,200 --> 00:54:22,800
Maybe mr.

991
00:54:22,800 --> 00:54:25,800
Fourth dimension will finish his editor and will fix all these things

992
00:54:25,800 --> 00:54:26,500
who knows?

993
00:54:27,100 --> 00:54:27,800
You never know.

994
00:54:28,600 --> 00:54:32,400
All right, so we need to specify the rest of the stuff here.

995
00:54:32,400 --> 00:54:36,200
We got task, what was the other thing that we needed their?

996
00:54:36,200 --> 00:54:37,700
Oh, the ID, right?

997
00:54:37,700 --> 00:54:38,800
So there is the ID.

998
00:54:40,600 --> 00:54:41,700
So if

999
00:54:41,800 --> 00:54:43,500
We go ahead and do that.

1000
00:54:45,000 --> 00:54:48,700
Now, Technically, when we go ahead and do this, this debug allocate

1001
00:54:48,700 --> 00:54:51,300
stuff that'll happen on the separate thread.

1002
00:54:51,300 --> 00:54:54,400
The only thing that we don't really that, that's not particularly good

1003
00:54:54,400 --> 00:54:57,900
about that, and you can kind of see it happening here.

1004
00:54:58,900 --> 00:55:03,700
Is that if we do this, we put ourselves in a position where

1005
00:55:05,900 --> 00:55:08,500
oh, you know what I lied.

1006
00:55:09,900 --> 00:55:10,900
I lied.

1007
00:55:11,400 --> 00:55:13,300
There are a couple of other things we need here.

1008
00:55:13,900 --> 00:55:15,800
There's the alignment stuff.

1009
00:55:17,000 --> 00:55:20,400
So not quite we need the alignment.

1010
00:55:21,000 --> 00:55:24,100
So we need work file name equals, there we go.

1011
00:55:24,600 --> 00:55:28,100
But we also need these guys, right work groups.

1012
00:55:29,900 --> 00:55:34,700
So now, it maybe would have been good for new, Max macro see work file

1013
00:55:34,700 --> 00:55:35,100
name.

1014
00:55:35,700 --> 00:55:38,800
So I'm not going to worry about this just yet, but I want to leave him

1015
00:55:38,800 --> 00:55:42,000
here since we did the work of actually figuring out what they were,

1016
00:55:42,100 --> 00:55:42,700
right?

1017
00:55:43,900 --> 00:55:45,800
I don't want to, I don't want to delete those.

1018
00:55:45,800 --> 00:55:46,300
So,

1019
00:55:47,800 --> 00:55:50,500
Otherwise we just have to go look at a previous version to get them

1020
00:55:50,500 --> 00:55:55,300
back and that's no fun for those of you who source code control, you

1021
00:55:55,300 --> 00:55:56,500
know how annoying that is.

1022
00:55:56,600 --> 00:55:57,000
Oops.

1023
00:55:59,000 --> 00:56:00,500
So that one doesn't have it, I guess.

1024
00:56:01,600 --> 00:56:02,200
All right.

1025
00:56:02,600 --> 00:56:02,900
Well,

1026
00:56:04,300 --> 00:56:09,300
I guess that's another one that does not have any kind of censoring to

1027
00:56:09,300 --> 00:56:09,600
it.

1028
00:56:10,500 --> 00:56:11,400
This one does though,

1029
00:56:16,000 --> 00:56:20,700
so that's really all we need to do to get that jobs fall on the only

1030
00:56:20,700 --> 00:56:20,900
thing.

1031
00:56:20,900 --> 00:56:23,800
That's a little nasty about this that I don't like right.

1032
00:56:23,900 --> 00:56:25,800
Oh, and of course I got to fix this part right here.

1033
00:56:26,000 --> 00:56:34,100
Work ID was ID, work tasks equals task work file name, equals nothing

1034
00:56:34,100 --> 00:56:35,200
till it's get set.

1035
00:56:37,200 --> 00:56:38,700
So, the only thing that's a little bit annoying.

1036
00:56:38,700 --> 00:56:42,900
There is, I don't actually want this guy to be playing with the

1037
00:56:42,900 --> 00:56:44,700
transient Arena while he's working that.

1038
00:56:44,800 --> 00:56:45,600
It's no good.

1039
00:56:45,700 --> 00:56:46,900
I don't like that at all.

1040
00:56:47,600 --> 00:56:52,100
So what I would rather do here is I would rather have him do something

1041
00:56:53,100 --> 00:56:55,600
where he does not actually take the arena.

1042
00:56:55,900 --> 00:56:59,200
I'd rather have the loaded bitmap result thing.

1043
00:57:00,500 --> 00:57:02,200
Outside right.

1044
00:57:02,300 --> 00:57:07,400
I'd rather have it happen here where we do like the bitmap and we do

1045
00:57:07,400 --> 00:57:08,600
that push struct.

1046
00:57:08,800 --> 00:57:14,200
I'd rather have it happen here where it does assets Arena here because

1047
00:57:14,200 --> 00:57:18,100
that way nobody is touching that, that asset Arena multi-threaded

1048
00:57:18,100 --> 00:57:21,600
because right now, we don't actually have any kind of synchronization

1049
00:57:21,600 --> 00:57:22,900
happening with that Arena.

1050
00:57:22,900 --> 00:57:26,900
So I want to make sure that only one thread can ever touch it at once,

1051
00:57:26,900 --> 00:57:29,800
and that's not really too much of

1052
00:57:30,000 --> 00:57:32,700
a big deal and that also means I can get rid of the other thing that I

1053
00:57:32,700 --> 00:57:36,600
was doing here that can go away, which is I can go ahead and make this

1054
00:57:36,600 --> 00:57:39,200
guy actually just take that

1055
00:57:42,700 --> 00:57:47,100
Just that take that bitmap and right to it directly, right?

1056
00:57:47,200 --> 00:57:50,400
So it'll go right to the bitmap directly and then once it's done,

1057
00:57:50,700 --> 00:57:54,100
writing to the bitmap directly, I'm also going to make a little to do

1058
00:57:54,100 --> 00:57:56,000
here fence.

1059
00:57:57,200 --> 00:58:00,200
Then we can go ahead and say oh whatever the assets are now.

1060
00:58:00,200 --> 00:58:03,900
Go ahead and make sure that they point to that to that bitmap.

1061
00:58:05,600 --> 00:58:07,500
So that's all we really need to do there.

1062
00:58:07,500 --> 00:58:09,800
And these guys, now, I believe go away.

1063
00:58:10,900 --> 00:58:14,500
Because we can just call debug load bitmap directly on them.

1064
00:58:14,600 --> 00:58:15,200
Right?

1065
00:58:15,600 --> 00:58:19,200
Just by taking the thread entire file and work file name.

1066
00:58:19,400 --> 00:58:21,900
Now, we have to pass that a line X align.

1067
00:58:21,900 --> 00:58:26,200
Why eventually so again that'll be our task for tomorrow.

1068
00:58:26,200 --> 00:58:29,100
I'm not going to do it now but now I'm just going to go through and

1069
00:58:29,100 --> 00:58:31,600
clean up and then we'll call it a day.

1070
00:58:32,300 --> 00:58:35,100
So loaded bitmap, there's bitmap

1071
00:58:38,000 --> 00:58:39,700
Begin testing a trance state.

1072
00:58:40,300 --> 00:58:41,900
Do we have a trance State here?

1073
00:58:42,600 --> 00:58:43,000
I guess.

1074
00:58:43,000 --> 00:58:45,000
In order to begin a task, we need the trance state.

1075
00:58:45,000 --> 00:58:50,200
So I suppose that fine kind of puts us in a position where it seems

1076
00:58:50,200 --> 00:58:55,200
kind of clear that the game assets kind of need access to that trance

1077
00:58:55,200 --> 00:58:56,600
State kind of annoying.

1078
00:58:56,600 --> 00:59:01,200
It's nice to not have to do that but what you gonna do, right?

1079
00:59:02,100 --> 00:59:05,800
So we have our our transient State here.

1080
00:59:06,500 --> 00:59:10,700
I'm just going to add it in there and we'll make that happen like

1081
00:59:10,700 --> 00:59:11,100
that.

1082
00:59:12,700 --> 00:59:18,000
So we've got assets game assets, not be filtering.

1083
00:59:18,000 --> 00:59:20,400
That's because that's not what I was trying to do.

1084
00:59:20,400 --> 00:59:22,400
I wanted a load asset work.

1085
00:59:23,400 --> 00:59:24,000
There we go.

1086
00:59:24,400 --> 00:59:25,400
Good asset work.

1087
00:59:26,700 --> 00:59:31,600
Push size needs to take the arena there and the asset load Q.

1088
00:59:31,600 --> 00:59:34,600
I guess it's not such a big deal anymore because we can just now use

1089
00:59:34,600 --> 00:59:36,100
the low priority queue for that.

1090
00:59:36,900 --> 00:59:43,500
And then finally down here where I do the trance State asset stuff,

1091
00:59:44,100 --> 00:59:49,500
which is right here, I'm going to go ahead and make it so that it has

1092
00:59:49,500 --> 00:59:50,900
a pointer back to trance State.

1093
00:59:50,900 --> 00:59:56,800
Not thrilled about that lot to think about that to do Casey, not

1094
00:59:56,800 --> 00:59:59,800
thrilled about this back pointer.

1095
01:00:01,800 --> 01:00:02,700
But that's okay.

1096
01:00:02,700 --> 01:00:05,000
It's not going to cause us any any real grief.

1097
01:00:06,300 --> 01:00:09,900
All right, so this probably won't work because we slammed a lot of

1098
01:00:09,900 --> 01:00:13,500
stuff in there at once or just will work.

1099
01:00:14,600 --> 01:00:19,300
So, hey, guess what we background load now and happy birthday.

1100
01:00:19,400 --> 01:00:22,200
So now all of our assets are streaming, there's a bunch of stuff we

1101
01:00:22,200 --> 01:00:23,100
haven't done yet.

1102
01:00:23,200 --> 01:00:25,700
As you can tell people are in the wrong position because we haven't

1103
01:00:25,700 --> 01:00:27,900
passed their alignment through, but that's just a little bit more

1104
01:00:27,900 --> 01:00:29,500
typing that I have to go and do.

1105
01:00:30,900 --> 01:00:31,100
There.

1106
01:00:31,100 --> 01:00:31,500
You go.

1107
01:00:32,100 --> 01:00:33,400
Ask the streaming in an hour.

1108
01:00:35,500 --> 01:00:39,300
So really all we have to do, there's no not that much more to it

1109
01:00:39,700 --> 01:00:39,900
really.

1110
01:00:39,900 --> 01:00:41,300
That's that's most of it.

1111
01:00:42,200 --> 01:00:46,300
But we have some things with resource reuse that we have to worry

1112
01:00:46,300 --> 01:00:46,500
about.

1113
01:00:46,500 --> 01:00:48,500
There's some there's some things in there that are kind of tricky.

1114
01:00:48,500 --> 01:00:52,600
So we've got a little more to do but for now we'll go to

1115
01:00:54,300 --> 01:01:00,200
Go ahead and go to the Q&A here so we can make that happen.

1116
01:01:03,500 --> 01:01:07,600
All right, so anyone has a question please prefix, it with q: and try

1117
01:01:07,600 --> 01:01:09,700
to keep the questions to stuff that we just did.

1118
01:01:10,000 --> 01:01:10,700
There's a ton of stuff.

1119
01:01:10,700 --> 01:01:15,700
I just did there with asset streaming if you have questions.

1120
01:01:15,700 --> 01:01:17,500
Now is a good time to ask them.

1121
01:01:20,400 --> 01:01:24,200
Robbie says, is it useful when assets can be modified from outside

1122
01:01:24,200 --> 01:01:25,400
file on disk over, right?

1123
01:01:25,400 --> 01:01:27,800
Maybe even in memory and still work in game.

1124
01:01:27,800 --> 01:01:30,000
Is it now supported after an asset is loaded?

1125
01:01:30,000 --> 01:01:33,900
As I could not see any call back to check if a file is modified as

1126
01:01:33,900 --> 01:01:37,000
your glazing, speed refactoring, was way too fast for me.

1127
01:01:38,000 --> 01:01:39,800
So no, we have not added that yet.

1128
01:01:39,800 --> 01:01:42,400
I think you're referring to kind of hot loading, right?

1129
01:01:44,300 --> 01:01:48,000
That's obviously very easy to add in a system like this, the way that

1130
01:01:48,000 --> 01:01:49,900
you do that is you just have

1131
01:01:50,000 --> 01:01:53,600
A secondary check that goes through periodically and looks at dates,

1132
01:01:53,600 --> 01:01:55,500
you just or the dates of things, then you to reload them.

1133
01:01:55,500 --> 01:01:59,500
If you want, we are probably never going to implement that here

1134
01:01:59,500 --> 01:02:03,500
because all of our art comes from an artist and the artist isn't

1135
01:02:03,500 --> 01:02:05,600
running the game and in fact, the artist can't run the game because

1136
01:02:05,600 --> 01:02:06,800
there isn't a game yet.

1137
01:02:06,900 --> 01:02:08,100
And so she makes them before.

1138
01:02:08,100 --> 01:02:10,800
We actually have the game right now, maybe we should add that sometime

1139
01:02:10,800 --> 01:02:14,100
just for fun, but we don't actually have any use for that feature.

1140
01:02:14,100 --> 01:02:16,200
So we probably won't implement it till much later.

1141
01:02:16,200 --> 01:02:18,900
If we implanted at all, that's just nature.

1142
01:02:18,900 --> 01:02:19,500
Right, if

1143
01:02:19,900 --> 01:02:22,200
This were a different type of game where I was actually able to work

1144
01:02:22,200 --> 01:02:25,400
40 hours a week on it as opposed to having to wait to do it in an

1145
01:02:25,400 --> 01:02:25,600
hour.

1146
01:02:25,600 --> 01:02:28,000
Long trunks on stream, I would absolutely implement the feature you're

1147
01:02:28,000 --> 01:02:29,800
talking about because it doesn't take very long to do.

1148
01:02:30,000 --> 01:02:32,400
And then it helps the art artist to do it.

1149
01:02:32,600 --> 01:02:35,500
But because the programming is so slow on this game because it can

1150
01:02:35,500 --> 01:02:37,500
only go one hour a night.

1151
01:02:39,100 --> 01:02:42,900
You know, she's probably has to do a lot of art assets without

1152
01:02:42,900 --> 01:02:44,800
actually playing the game if that makes sense.

1153
01:02:50,400 --> 01:02:51,300
In load asset work.

1154
01:02:51,300 --> 01:02:52,600
Where is the memory for the file name?

1155
01:02:52,600 --> 01:02:57,600
Stewart, it is not there, there is no memory used for the file names

1156
01:02:58,000 --> 01:02:59,800
in addition to just their the string

1157
01:03:00,000 --> 01:03:00,500
Since.

1158
01:03:00,700 --> 01:03:06,800
So, those string constants are just they're just being used in C++,

1159
01:03:06,800 --> 01:03:07,000
right?

1160
01:03:07,000 --> 01:03:10,200
They're stored in the in the executable and they get loaded in as part

1161
01:03:10,200 --> 01:03:12,800
of the executable and they get used as front of the executable.

1162
01:03:14,300 --> 01:03:16,600
So there is no storage for for that.

1163
01:03:17,700 --> 01:03:21,900
These will go away eventually because once we have an asset pack,

1164
01:03:21,900 --> 01:03:23,700
there won't really be file names anymore.

1165
01:03:24,500 --> 01:03:27,200
So even if we did have to store space for them, you wouldn't really

1166
01:03:27,200 --> 01:03:29,900
have to think about it too much if you

1167
01:03:30,000 --> 01:03:31,700
wanted to store them.

1168
01:03:31,700 --> 01:03:33,900
Anyway, it'd be pretty easy to do.

1169
01:03:33,900 --> 01:03:38,700
So what you would do here is you just have the file name right here.

1170
01:03:38,900 --> 01:03:41,300
You just push it onto the task Arena.

1171
01:03:41,500 --> 01:03:44,200
So, you know, in fact, I'll just do that for you.

1172
01:03:44,200 --> 01:03:45,800
So you can see right.

1173
01:03:46,000 --> 01:03:49,200
We have a task Arena, which is just a little area that scratched base

1174
01:03:49,200 --> 01:03:50,200
for the task.

1175
01:03:50,200 --> 01:03:54,000
So if you wanted to, you could truly trivially, just go ahead and do

1176
01:03:54,000 --> 01:03:54,900
that, right?

1177
01:03:55,300 --> 01:03:58,600
That's all you'd have to do, and that pushed in would just be a thing

1178
01:03:58,600 --> 01:03:59,900
that copies the string on there, but

1179
01:04:00,000 --> 01:04:03,300
You don't have to really care about that at the moment.

1180
01:04:03,500 --> 01:04:06,400
If we were going to leave those in their long-term, I might do what I

1181
01:04:06,400 --> 01:04:12,000
just did permanently just for the sake of our of our code hot reload

1182
01:04:12,000 --> 01:04:15,100
because those strings will move and so if there's a background task

1183
01:04:15,100 --> 01:04:17,300
loading an asset that string would move and that would cause a

1184
01:04:17,300 --> 01:04:17,700
problem.

1185
01:04:17,700 --> 01:04:19,900
But since we're not going to leave those things in long-term renet,

1186
01:04:19,900 --> 01:04:21,900
that's just not a case we care about fixing

1187
01:04:31,000 --> 01:04:32,500
What are the trade-offs to give him?

1188
01:04:32,500 --> 01:04:37,700
More power forcing render pushes out of the rendering Q order.

1189
01:04:39,200 --> 01:04:41,800
I do not understand the question.

1190
01:04:41,800 --> 01:04:42,200
Sorry.

1191
01:04:43,600 --> 01:04:46,400
You said, we got assets treating done in an hour, but do we need to do

1192
01:04:46,400 --> 01:04:49,300
multiple passes on it if so why.

1193
01:04:50,100 --> 01:04:54,400
Yeah, so when I said asset streaming in an hour I'm just kind of being

1194
01:04:54,400 --> 01:04:55,100
flippant.

1195
01:04:55,800 --> 01:04:59,600
I don't consider us done all we did was the first part of asset

1196
01:04:59,600 --> 01:05:03,900
streaming which is to actually get our assets, loading deferred,

1197
01:05:04,100 --> 01:05:04,700
right.

1198
01:05:05,200 --> 01:05:07,900
But there's a bunch of things we want to do which is how to assets,

1199
01:05:07,900 --> 01:05:09,000
get evicted.

1200
01:05:09,400 --> 01:05:12,200
So that if we want to run in a fixed amount of memory, like, right

1201
01:05:12,200 --> 01:05:13,300
now, we

1202
01:05:14,000 --> 01:05:17,000
We can only run if there's enough memory for all the Assets in the

1203
01:05:17,000 --> 01:05:20,500
game but I feel like it would be more appropriate for us to be able to

1204
01:05:20,500 --> 01:05:23,900
just set a memory budget like say this game runs into and 256

1205
01:05:23,900 --> 01:05:26,700
megabytes of memory or a gigabyte of memory or whatever and then the

1206
01:05:26,700 --> 01:05:31,000
asset streaming just goes ahead and uses that size and in fix things

1207
01:05:31,000 --> 01:05:32,500
when it needs to, right?

1208
01:05:33,100 --> 01:05:33,800
There's that.

1209
01:05:33,800 --> 01:05:36,300
And then there's also the fact that I was saying, I want to go ahead

1210
01:05:36,300 --> 01:05:40,100
and Tackle these guys as well, so that we can have ways of streaming

1211
01:05:40,100 --> 01:05:41,100
and more complex objects.

1212
01:05:41,100 --> 01:05:43,200
So basically, like the bass extreme,

1213
01:05:43,300 --> 01:05:45,500
My stuff is done but I want to do more.

1214
01:05:45,500 --> 01:05:48,300
There's more things that I want to add features, right?

1215
01:05:48,300 --> 01:05:50,600
I don't that's not all that.

1216
01:05:50,600 --> 01:05:52,500
I want out of an asset system.

1217
01:05:53,400 --> 01:05:55,100
I want additional features.

1218
01:06:05,400 --> 01:06:06,000
Where are you?

1219
01:06:06,000 --> 01:06:08,200
Check if an asset

1220
01:06:11,000 --> 01:06:13,000
Will you check if an asset is already loaded or not?

1221
01:06:13,000 --> 01:06:15,500
If an asset would take a very long time to load?

1222
01:06:15,500 --> 01:06:19,100
Would it check if it's loaded again to try to live the asset again?

1223
01:06:19,100 --> 01:06:20,600
Not sure if that makes sense.

1224
01:06:21,200 --> 01:06:24,800
Yes, so there's a couple things again, that we're not act that were

1225
01:06:24,800 --> 01:06:27,300
also not doing it all here in any smart kind of way.

1226
01:06:27,400 --> 01:06:27,900
Right?

1227
01:06:29,200 --> 01:06:34,100
Which is that when you call load asset, we don't Mark that asset, as

1228
01:06:34,100 --> 01:06:38,700
already being sort of loaded to give you a preview of what we're going

1229
01:06:38,700 --> 01:06:39,600
to do tomorrow.

1230
01:06:44,400 --> 01:06:48,400
We will probably do something like, you know, asset state or

1231
01:06:48,400 --> 01:06:49,400
something, right?

1232
01:06:50,200 --> 01:06:54,300
And the loaded bitmap will go in here, right?

1233
01:06:54,800 --> 01:06:58,500
And, you know it's cute or something.

1234
01:06:58,500 --> 01:07:00,100
They'll be like a thing in here.

1235
01:07:00,100 --> 01:07:02,200
Will it actually be asked?

1236
01:07:02,200 --> 01:07:06,900
It'd probably be more like this asset handle or something like this,

1237
01:07:07,300 --> 01:07:07,800
right?

1238
01:07:20,900 --> 01:07:21,500
Right.

1239
01:07:21,900 --> 01:07:25,400
And so what will actually happen is that when it goes to load an asset

1240
01:07:25,400 --> 01:07:31,700
it will Elevate the asset handle to mark it as being queued so that

1241
01:07:31,700 --> 01:07:34,400
other people won't launch another task to load it.

1242
01:07:35,200 --> 01:07:38,000
Because you're right it'll just try to load it again and you could

1243
01:07:38,000 --> 01:07:40,400
fire off multiple tasks right now.

1244
01:07:40,400 --> 01:07:42,500
We're kind of Saved by the fact that we have a very small number of

1245
01:07:42,500 --> 01:07:43,700
people in our work queue.

1246
01:07:44,500 --> 01:07:48,200
So it wouldn't it doesn't, you know, immediately cause this disastrous

1247
01:07:48,200 --> 01:07:48,800
problem

1248
01:07:49,300 --> 01:07:52,600
of like a bird trying to load 32 trees and we are trying to draw 32

1249
01:07:52,600 --> 01:07:56,900
trees and we loaded the tree 32 times but yes that's that's exactly

1250
01:07:56,900 --> 01:07:58,600
the way that we will do that.

1251
01:07:58,700 --> 01:07:59,900
Also can let me make sure

1252
01:08:00,900 --> 01:08:03,800
Yeah, I said I didn't want to make sure that I left the code and

1253
01:08:03,800 --> 01:08:04,700
compiling state.

1254
01:08:10,400 --> 01:08:13,100
Do you consider terrain and asset to so that it can stream?

1255
01:08:13,100 --> 01:08:15,600
Well, our terrain is is dynamically generated.

1256
01:08:15,600 --> 01:08:16,399
So

1257
01:08:20,200 --> 01:08:22,000
I mean it's kind of a separate.

1258
01:08:22,899 --> 01:08:24,300
It's not loaded in that way.

1259
01:08:32,800 --> 01:08:36,899
Constantinople asks about just the way that I structure my ifs.

1260
01:08:37,000 --> 01:08:43,100
He was saying why do it this way instead of just doing it this way.

1261
01:08:45,100 --> 01:08:45,700
Right.

1262
01:08:49,000 --> 01:08:49,500
Same.

1263
01:08:49,500 --> 01:08:51,000
Same basic idea, right?

1264
01:08:51,800 --> 01:08:56,700
The reason that I never ever, ever ever write code that way, I think

1265
01:08:56,700 --> 01:08:59,800
you have probably seen me do a lot of coding now.

1266
01:09:00,000 --> 01:09:01,399
And you've never seen me do that.

1267
01:09:01,399 --> 01:09:06,200
The reason is because I always like to have a clear exit point from a

1268
01:09:06,200 --> 01:09:06,700
function.

1269
01:09:07,200 --> 01:09:10,600
So that if I have things I want to add to the function when it is

1270
01:09:10,600 --> 01:09:12,700
done, I know that they always will happen.

1271
01:09:12,700 --> 01:09:17,100
And I don't have to worry about if someone put a little bungee pit in

1272
01:09:17,100 --> 01:09:21,000
here to thwart Me by returning out from the middle and it won't

1273
01:09:21,000 --> 01:09:22,200
happen, right?

1274
01:09:22,500 --> 01:09:25,000
So I never ever, ever use that other format.

1275
01:09:34,800 --> 01:09:36,500
Let's see.

1276
01:09:39,899 --> 01:09:42,700
What are the trade-offs to give the rendering Cube?

1277
01:09:42,700 --> 01:09:46,300
More power forcing render pushes out of the ready queue order when it

1278
01:09:46,300 --> 01:09:47,600
is multi-threaded.

1279
01:09:47,600 --> 01:09:49,200
So the rendering can be controlled more 500.

1280
01:09:50,600 --> 01:09:51,000
Okay.

1281
01:09:51,000 --> 01:09:51,399
Okay.

1282
01:09:51,399 --> 01:09:55,400
Okay, okay, I think well, I think I understand what the question is

1283
01:09:55,400 --> 01:09:55,900
now.

1284
01:09:57,400 --> 01:09:58,500
So, I'll answer the question.

1285
01:09:58,500 --> 01:10:00,400
I think you're asking because it's a good question.

1286
01:10:00,500 --> 01:10:04,000
If this isn't the question please, please rephrase it.

1287
01:10:04,000 --> 01:10:06,400
One more time and we'll see if I can get it that time.

1288
01:10:07,500 --> 01:10:10,900
Well, I think you're saying is okay, we have threads, right?

1289
01:10:11,000 --> 01:10:14,400
And those threads are doing work, but there's a lot of different work

1290
01:10:14,400 --> 01:10:15,000
to do.

1291
01:10:15,800 --> 01:10:19,400
For example, there's threads that are rendering the game.

1292
01:10:19,800 --> 01:10:22,900
So they're, they're trying to make the images that were using, right?

1293
01:10:22,900 --> 01:10:24,700
We have the rendering threaded.

1294
01:10:25,100 --> 01:10:26,500
There are there threads

1295
01:10:26,700 --> 01:10:31,000
Are doing background work like composing ground tiles and now asset

1296
01:10:31,000 --> 01:10:31,500
loading.

1297
01:10:32,500 --> 01:10:36,600
And so the question is like what what are we going to do to like

1298
01:10:36,600 --> 01:10:39,200
balance that and like what can the render queue?

1299
01:10:39,600 --> 01:10:42,800
Can we have the render queue maybe take threads when it needs them to

1300
01:10:42,800 --> 01:10:44,300
get more rendering, power, whatever?

1301
01:10:45,500 --> 01:10:50,000
And So my answer to that is I don't know that.

1302
01:10:52,200 --> 01:10:53,700
I don't really know.

1303
01:10:55,300 --> 01:10:56,600
That there's all that much.

1304
01:10:56,600 --> 01:11:03,400
We really want to do there because at the end of the day you know the

1305
01:11:03,400 --> 01:11:05,700
performance of the renderer seems pretty good.

1306
01:11:05,700 --> 01:11:11,700
I don't know that it has to do a lot of work stealing and when we

1307
01:11:11,700 --> 01:11:14,400
want, if we really find ourselves in a position where we need that

1308
01:11:14,400 --> 01:11:16,700
performance boost, we have the GPU, right?

1309
01:11:16,700 --> 01:11:21,000
We aren't even using the GPU yet in the system because our software

1310
01:11:21,000 --> 01:11:22,300
under was so darn fast.

1311
01:11:22,600 --> 01:11:25,000
And so, you know I think maybe

1312
01:11:25,100 --> 01:11:30,000
It would be better to concentrate our task stuff on, not on having the

1313
01:11:30,000 --> 01:11:31,800
renderer be something that steals tasks.

1314
01:11:31,800 --> 01:11:34,700
I think that may just be kind of a waste of time even though if we

1315
01:11:34,700 --> 01:11:38,200
were going to Target software rendering as our primary shipping

1316
01:11:38,200 --> 01:11:40,600
platform, maybe that would make sense.

1317
01:11:40,600 --> 01:11:41,400
So I don't know.

1318
01:11:42,100 --> 01:11:45,000
I don't really have a lot more thoughts on it at the moment beyond

1319
01:11:45,000 --> 01:11:46,900
what I said, previously, on other streams.

1320
01:11:51,700 --> 01:11:54,000
How much of the DirectX opengl typical pipeline?

1321
01:11:54,000 --> 01:11:54,700
Are you preemptively?

1322
01:11:54,700 --> 01:11:59,300
Designing into your code now, none actually.

1323
01:12:01,200 --> 01:12:03,800
If for no other reason that no one's going to be programming DirectX

1324
01:12:03,800 --> 01:12:05,100
or opengl in a year, right?

1325
01:12:05,100 --> 01:12:08,000
They're all going to be using Vulcan d3d, 12 or metal, right?

1326
01:12:09,000 --> 01:12:14,200
So, the DirectX opengl typical pipeline is, is gone.

1327
01:12:14,900 --> 01:12:20,000
It, it's out in the back waiting to be put down.

1328
01:12:29,300 --> 01:12:33,700
Any other questions that are on topic?

1329
01:12:33,700 --> 01:12:37,500
I will answer some off-topic ones here that I see if no one has any.

1330
01:12:37,500 --> 01:12:38,900
I don't see any other on topic one.

1331
01:12:38,900 --> 01:12:43,100
So, so I'll answer, there are a couple of programming questions on

1332
01:12:43,100 --> 01:12:44,700
here that we're not on topic.

1333
01:12:45,900 --> 01:12:50,300
So somebody said, what do you think about Microsoft's Vector call as a

1334
01:12:50,300 --> 01:12:52,200
calling convention for Speed?

1335
01:12:53,900 --> 01:12:56,900
I don't think I've looked at Vector call specifically.

1336
01:12:58,100 --> 01:12:59,300
I am happy to do.

1337
01:12:59,300 --> 01:13:03,100
So, what is that?

1338
01:13:03,100 --> 01:13:04,100
Calling convention?

1339
01:13:11,200 --> 01:13:11,700
Hello.

1340
01:13:18,500 --> 01:13:20,200
Okay, ventricles knife is artist.

1341
01:13:20,200 --> 01:13:23,000
Two functions are used to faster registers when possible.

1342
01:13:25,600 --> 01:13:26,800
Well yeah, I mean

1343
01:13:28,100 --> 01:13:28,900
That's fine.

1344
01:13:28,900 --> 01:13:34,400
So, so all this is, is normally the x64 calling convention, already,

1345
01:13:34,400 --> 01:13:34,900
specifies.

1346
01:13:34,900 --> 01:13:38,100
That arguments are passed in registers, but only up to a point.

1347
01:13:38,600 --> 01:13:43,300
And so really, it's about the trade-off between leaving registers free

1348
01:13:43,300 --> 01:13:46,500
and, you know, whether you have to save, restore them stuff like that.

1349
01:13:47,100 --> 01:13:51,100
I usually find that this sort of stuff is just not that, interesting,

1350
01:13:51,400 --> 01:13:52,000
right?

1351
01:13:52,200 --> 01:13:56,200
Like why are you making so many function calls that this is going to

1352
01:13:56,200 --> 01:13:57,700
be a big deal is usually my

1353
01:13:57,900 --> 01:13:58,600
Thinking right?

1354
01:13:58,600 --> 01:14:02,300
If the if it's really a big deal that you're calling functions that

1355
01:14:02,300 --> 01:14:06,700
often that you gotta worry about the calling convention, I usually

1356
01:14:06,700 --> 01:14:10,300
feel like, maybe that code was not structured properly right now.

1357
01:14:10,300 --> 01:14:12,600
That's not to say that there aren't circumstances where it could be

1358
01:14:12,600 --> 01:14:13,200
true.

1359
01:14:13,400 --> 01:14:14,900
So, I'm not trying to say that.

1360
01:14:14,900 --> 01:14:16,700
If you use Vector call, you're stupid or something.

1361
01:14:16,700 --> 01:14:17,700
That's not true.

1362
01:14:18,000 --> 01:14:21,600
I'm just trying to say that my first thought on things like Factor

1363
01:14:21,600 --> 01:14:26,300
call is that like usually those tend to be patch ups for situations

1364
01:14:26,300 --> 01:14:27,700
that probably shouldn't got yourself into

1365
01:14:27,800 --> 01:14:31,500
In the first place, and the coach be restructured that said, like

1366
01:14:31,500 --> 01:14:35,500
anything else, if you look at the code and you've determined that, the

1367
01:14:35,500 --> 01:14:41,100
problem is stack pushes and pops, and that's why it's slow.

1368
01:14:41,200 --> 01:14:43,500
Hey, doctor call me help you, right?

1369
01:14:45,800 --> 01:14:48,500
You know, so so yeah but not a lot.

1370
01:14:48,500 --> 01:14:50,200
Oops, not a lot to say about that.

1371
01:14:50,600 --> 01:14:51,900
It's kind of an old concept.

1372
01:14:51,900 --> 01:14:52,900
It's been around for a while.

1373
01:15:05,000 --> 01:15:11,500
Is it possible for the OS to lose track of memory that you asked for?

1374
01:15:14,300 --> 01:15:14,800
Um,

1375
01:15:18,400 --> 01:15:21,200
I guess, I'm not sure how to answer that question.

1376
01:15:23,400 --> 01:15:28,100
What I would say is that obviously, if the operating system has a bug,

1377
01:15:28,900 --> 01:15:35,500
it could, it could miss fill out the memory, like the page tables.

1378
01:15:36,500 --> 01:15:39,700
And then when they get, when your process gets swapped in, it would,

1379
01:15:40,300 --> 01:15:43,100
it would have the wrong address layout.

1380
01:15:43,200 --> 01:15:44,400
That's certainly possible.

1381
01:15:46,600 --> 01:15:49,500
I mean, but if that was the case, you know, everything would crash.

1382
01:15:49,500 --> 01:15:52,000
I mean, there's nothing you can do about it, right?

1383
01:15:52,000 --> 01:15:55,900
I mean, that's just a straight up bug and it's game over that point.

1384
01:16:00,100 --> 01:16:02,700
Could you elaborate on opengl and DirectX death?

1385
01:16:03,800 --> 01:16:05,800
Well, I mean there's not a lot to say about it.

1386
01:16:05,800 --> 01:16:11,800
Other than the fact that the the models that DirectX and opengl we're

1387
01:16:11,800 --> 01:16:15,500
using, we're just somewhat Antiquated in terms of how they map to

1388
01:16:15,500 --> 01:16:16,000
Hardware.

1389
01:16:16,000 --> 01:16:24,000
They were to their, to based on setting individual pieces of state and

1390
01:16:24,000 --> 01:16:28,600
not in in sort of having those things, be more structured.

1391
01:16:28,600 --> 01:16:28,700
The

1392
01:16:28,900 --> 01:16:30,600
The card actually thinks about them.

1393
01:16:31,200 --> 01:16:36,300
And so the reason that Vulcan and direct3d 12 have to happen and, you

1394
01:16:36,300 --> 01:16:38,900
know, they're kind of based off of what was happening with mantle, and

1395
01:16:38,900 --> 01:16:44,300
then metal, same way is just because they're trying to realign how you

1396
01:16:44,300 --> 01:16:47,900
talk to graphics cards to be more like what the graphics card actually

1397
01:16:47,900 --> 01:16:48,900
needs to do.

1398
01:16:51,300 --> 01:16:53,800
And that way, you eliminate, just a huge amount of overhead that

1399
01:16:53,800 --> 01:16:58,700
drivers were previously doing to turn opengl and DirectX calls into

1400
01:16:58,700 --> 01:17:02,700
the actual stuff that the graphics card accepts, right?

1401
01:17:06,800 --> 01:17:07,300
so,

1402
01:17:15,600 --> 01:17:19,600
It's like that is the end of the questions, Maybe.

1403
01:17:38,300 --> 01:17:41,400
What would be a good way to expand asset stripping to support,

1404
01:17:41,400 --> 01:17:43,800
increasing level of details?

1405
01:17:44,000 --> 01:17:46,800
What I'm thinking of is loading a smaller version of the asset first

1406
01:17:47,000 --> 01:17:48,800
and then bigger size resources

1407
01:17:51,100 --> 01:17:59,800
so if you're yeah, if you're doing that, then what you need to sew

1408
01:18:00,500 --> 01:18:01,500
I can I can sort of

1409
01:18:02,900 --> 01:18:03,800
Explain that here.

1410
01:18:04,500 --> 01:18:07,700
So hopefully we can see what we're going towards here.

1411
01:18:07,700 --> 01:18:11,500
Like what we did today, you can kind of extrapolate out words how this

1412
01:18:11,500 --> 01:18:12,300
is going to go.

1413
01:18:13,100 --> 01:18:15,300
We won't really be dealing with the level of detail thing because

1414
01:18:15,300 --> 01:18:17,900
we're a 2d games, so level details and make a whole lot of sense.

1415
01:18:18,400 --> 01:18:20,600
But in a 3D game, you would have the situation.

1416
01:18:20,800 --> 01:18:25,400
There are actually times that it does make sense in 2D, but I won't go

1417
01:18:25,400 --> 01:18:25,900
into those.

1418
01:18:27,300 --> 01:18:31,600
So anyway, when you take a look at what's Happening Here, essentially,

1419
01:18:31,600 --> 01:18:32,400
you have

1420
01:18:33,300 --> 01:18:36,900
People talking about a game asset as just an ID.

1421
01:18:37,200 --> 01:18:40,700
And so if you wanted to update this, to be more about getting a

1422
01:18:40,700 --> 01:18:45,500
particular level of detail, you would just need to upgrade this notion

1423
01:18:45,800 --> 01:18:51,700
so that the asset handle right would also know what level of detail it

1424
01:18:51,700 --> 01:18:52,500
was loaded at.

1425
01:18:52,800 --> 01:18:55,200
And then when the renderer goes to render, it would say.

1426
01:18:55,200 --> 01:18:58,600
What level of detail it was wanted based on the size of the bitmap was

1427
01:18:58,600 --> 01:18:59,700
being drawn on the screen.

1428
01:19:00,200 --> 01:19:02,400
And then the, the game a

1429
01:19:02,700 --> 01:19:03,200
That would go.

1430
01:19:03,200 --> 01:19:04,300
Oh, is that the level of detail?

1431
01:19:04,300 --> 01:19:06,900
I'm at if yes, just return it.

1432
01:19:06,900 --> 01:19:10,400
If no, then cue up a load for the higher level detail.

1433
01:19:10,400 --> 01:19:12,900
And if I have a low level of detail return that right?

1434
01:19:14,600 --> 01:19:16,700
So it's really pretty straightforward.

1435
01:19:16,700 --> 01:19:18,100
Like, there's not a whole lot to it.

1436
01:19:19,200 --> 01:19:21,000
Hopefully you can see how that would go.

1437
01:19:22,900 --> 01:19:23,300
so,

1438
01:19:25,200 --> 01:19:28,400
I recently started from the beginning of the series on 13 at the

1439
01:19:28,400 --> 01:19:28,700
moment.

1440
01:19:28,700 --> 01:19:31,400
Do you suggest watching all of the q&a's are just going episode to

1441
01:19:31,400 --> 01:19:32,100
episode?

1442
01:19:34,800 --> 01:19:38,600
I mean I think it probably depends on how well you understood all the

1443
01:19:38,600 --> 01:19:39,300
episodes.

1444
01:19:39,600 --> 01:19:43,200
If you feel like you totally understood all 13 episodes, you probably

1445
01:19:43,200 --> 01:19:46,000
don't need the q&a's because most the time of people ask about the

1446
01:19:46,000 --> 01:19:48,500
q&a's is something that happened on that episode of previous episodes.

1447
01:19:49,400 --> 01:19:52,500
And so, while there is good information in those q&a's that if you

1448
01:19:52,500 --> 01:19:54,600
have the time to watch them, you probably.

1449
01:19:54,800 --> 01:19:57,700
Would learn some things, maybe because people sometimes ask questions

1450
01:19:57,700 --> 01:20:01,200
that are sort of tangential, like the person you just ask about level

1451
01:20:01,200 --> 01:20:02,300
of detail, right?

1452
01:20:04,300 --> 01:20:05,000
So that's good.

1453
01:20:05,000 --> 01:20:07,800
But if you feel like you have a really solid understanding of what I

1454
01:20:07,800 --> 01:20:12,800
did, then just in terms of being able to program handmade hero, you

1455
01:20:12,800 --> 01:20:15,000
probably don't need the Q&A is because the stuff that's going to be

1456
01:20:15,000 --> 01:20:18,000
about programming your here on there is you've already got it, right?

1457
01:20:18,000 --> 01:20:20,000
But if you find yourself, you feel like you're a little shaky that I'd

1458
01:20:20,000 --> 01:20:23,400
say, watch the Q&A because people probably asked the questions that

1459
01:20:23,400 --> 01:20:24,200
you have.

1460
01:20:24,800 --> 01:20:25,300
Right.

1461
01:20:32,400 --> 01:20:35,200
And I'll take one last question here because it's kind of funny.

1462
01:20:39,000 --> 01:20:41,800
How infuriating is it to deal with massive asset pipelines?

1463
01:20:41,800 --> 01:20:45,400
Dealing with dozens of pieces of software on large asset, large AAA

1464
01:20:45,400 --> 01:20:46,200
project.

1465
01:20:46,700 --> 01:20:48,000
Absolutely infuriating.

1466
01:20:50,400 --> 01:20:54,600
It's, it's just awful and because invariably, these these pieces of

1467
01:20:54,600 --> 01:20:58,800
suffer are incredibly unwieldy and have all sorts of problems with

1468
01:20:58,800 --> 01:20:59,400
them.

1469
01:21:00,000 --> 01:21:04,700
And, you know, they don't support running in an easy way.

1470
01:21:04,700 --> 01:21:08,000
And they come with all this digital Rights Management nonsense.

1471
01:21:08,000 --> 01:21:12,700
So like the build machine, like can't run the thing unless the license

1472
01:21:12,700 --> 01:21:16,100
server is on there, but like it's a Linux machine and they don't ship

1473
01:21:16,100 --> 01:21:20,800
the thing for that or like, they're just all these really awful things

1474
01:21:20,800 --> 01:21:23,700
that happen when you bring software into your pipeline that you didn't

1475
01:21:23,700 --> 01:21:27,200
write, like not invented here.

1476
01:21:27,700 --> 01:21:29,100
There's a reason for it.

1477
01:21:29,200 --> 01:21:29,900
And it's because

1478
01:21:30,000 --> 01:21:34,200
Because nowadays the software that you buy is by and large awful, and

1479
01:21:34,200 --> 01:21:38,600
is really hard to deal with and comes with a bunch of restrictions

1480
01:21:38,600 --> 01:21:43,500
that are hard to work around and yeah, it's just, it's awful.

1481
01:21:44,400 --> 01:21:46,100
So you're right.

1482
01:21:46,600 --> 01:21:50,800
The answer is very infuriating and I try to keep that stuff to a

1483
01:21:50,800 --> 01:21:51,100
minimum.

1484
01:21:51,100 --> 01:21:56,400
Now, on the current project we use Photoshop on their next product,

1485
01:21:56,400 --> 01:21:58,700
I'm hoping very much to eliminate it.

1486
01:21:59,900 --> 01:22:02,500
Because it just causes headaches like everything else.

1487
01:22:03,100 --> 01:22:06,100
Fortunately with Photoshop you can read its files directly.

1488
01:22:06,400 --> 01:22:09,700
So that gets you out of the business of having to do exporter plugins

1489
01:22:09,700 --> 01:22:10,700
and stuff like that.

1490
01:22:11,300 --> 01:22:14,300
For 3D software, you're often not so lucky for 3D software often

1491
01:22:14,300 --> 01:22:17,800
times, you have to write an exporter that's like welded into that

1492
01:22:17,800 --> 01:22:20,400
version of the software and when that version of the software upgrades

1493
01:22:20,400 --> 01:22:24,800
you got to redo your export plugins and there's just it's just just

1494
01:22:24,800 --> 01:22:25,200
awful.

1495
01:22:25,400 --> 01:22:28,700
So yeah, so large AAA projects, you know?

1496
01:22:32,100 --> 01:22:36,700
Those devs go through, a lot of crap.

1497
01:22:36,800 --> 01:22:41,400
I mean, they Wade through a lot of crap for you, to be able to play

1498
01:22:41,400 --> 01:22:42,800
those games and

1499
01:22:44,300 --> 01:22:46,200
Yeah, it's not fun.

1500
01:22:47,000 --> 01:22:47,900
It is not fun.

1501
01:22:48,900 --> 01:22:51,500
All right, looks like we're just about out of time.

1502
01:22:51,500 --> 01:22:54,000
So let's go ahead and call it a day.

1503
01:22:55,100 --> 01:23:00,400
Let's go ahead and call it a day, that was pretty good work.

1504
01:23:00,400 --> 01:23:04,600
Today, background asset streaming in an hour, not bad, got more work

1505
01:23:04,600 --> 01:23:08,900
to do on it, but hey, that's going to be, I don't know, a couple days

1506
01:23:08,900 --> 01:23:12,900
and we'll have a whole that whole to-do item just gone, right?

1507
01:23:13,000 --> 01:23:13,900
It's just out.

1508
01:23:16,400 --> 01:23:19,200
So, hey lot easier than the renderer, right?

1509
01:23:19,400 --> 01:23:21,600
And again this is why I say it understand why people say it makes your

1510
01:23:21,600 --> 01:23:24,800
architecture weird or that it's hardness of, I have no idea like asset

1511
01:23:24,800 --> 01:23:27,400
streaming has always been something that you just do and it takes, you

1512
01:23:27,400 --> 01:23:31,000
know, a couple hours of work and then you know, maybe there's some

1513
01:23:31,000 --> 01:23:33,600
debugging at some point but it's like asset streaming is Trivial.

1514
01:23:33,600 --> 01:23:39,300
And yeah, if there's someone out there who knows why it's supposedly

1515
01:23:39,300 --> 01:23:39,700
hard?

1516
01:23:39,700 --> 01:23:40,200
I don't know.

1517
01:23:41,600 --> 01:23:44,100
Maybe it's because you just got too much of a pointer Festival

1518
01:23:44,100 --> 01:23:46,100
happening or or

1519
01:23:46,200 --> 01:23:46,600
I don't know.

1520
01:23:46,800 --> 01:23:48,900
But anyway so hopefully that's good.

1521
01:23:48,900 --> 01:23:51,800
We got a little more work to do so it's not as easy as I made it look

1522
01:23:51,800 --> 01:23:53,900
today because we do have some other things that we got to do.

1523
01:23:53,900 --> 01:23:56,400
So it's a little more complicated than that a few more hours that we

1524
01:23:56,400 --> 01:23:57,400
want to put into it.

1525
01:23:57,600 --> 01:23:59,800
And so if you'd like to see those, please come back tomorrow.

1526
01:24:00,000 --> 01:24:00,500
5 p.m.

1527
01:24:00,500 --> 01:24:01,600
Pacific Daylight time.

1528
01:24:01,800 --> 01:24:05,300
I'd love to see here and I will show you the other parts that we got

1529
01:24:05,300 --> 01:24:07,500
to do to kind of make it a little bit more of a real system.

1530
01:24:08,000 --> 01:24:08,700
All right.

1531
01:24:09,400 --> 01:24:14,000
As always if you would like to follow along at home, you can pre-order

1532
01:24:14,000 --> 01:24:15,800
the game on handmade hero dot-org.

1533
01:24:16,600 --> 01:24:18,800
You can pre-order with this handy, little p R2 button and it comes

1534
01:24:18,800 --> 01:24:21,000
with all the source code so you can play around with it at home.

1535
01:24:21,100 --> 01:24:23,800
I uploaded every night after I'm done so you're always current.

1536
01:24:24,200 --> 01:24:26,700
We also have forums you can go ask questions through the episode.

1537
01:24:26,700 --> 01:24:29,800
Guide with annotations, you can get ports to Mac and Linux that.

1538
01:24:30,000 --> 01:24:30,900
Community members have done.

1539
01:24:30,900 --> 01:24:31,900
If you're trying to do that.

1540
01:24:32,300 --> 01:24:33,500
We also have a patreon page.

1541
01:24:33,500 --> 01:24:34,800
You can support the video series.

1542
01:24:34,800 --> 01:24:39,200
If you like what you saw, we're always very much appreciated for

1543
01:24:39,200 --> 01:24:40,700
people who subscribe to the patreon.

1544
01:24:41,200 --> 01:24:45,100
It's a super nice thing for you to do and we also have the tweetbot

1545
01:24:45,100 --> 01:24:46,100
with to schedule at yourself.

1546
01:24:46,100 --> 01:24:47,900
You're trying to catch this live and you want to know what Scott is

1547
01:24:47,900 --> 01:24:48,700
going to be an advanced.

1548
01:24:48,700 --> 01:24:49,900
That's the place to do it.

1549
01:24:50,700 --> 01:24:51,600
That's about it.

1550
01:24:51,600 --> 01:24:54,100
Thank you very much for joining me for another episode of handmade

1551
01:24:54,100 --> 01:24:54,300
hero.

1552
01:24:54,300 --> 01:24:57,000
It's a pleasure coding with you as always and I hope to see you all

1553
01:24:57,000 --> 01:24:58,000
back here tomorrow.

1554
01:24:58,000 --> 01:24:58,900
Take it easy, everyone.

