1
00:00:01,700 --> 00:00:04,500
Hello, everyone, and welcome to handmade hero show.

2
00:00:04,500 --> 00:00:07,000
Rico to complete game live on Twitch.

3
00:00:07,000 --> 00:00:08,600
No engines, no libraries.

4
00:00:09,300 --> 00:00:11,800
And right now, we're doing some optimization work.

5
00:00:12,100 --> 00:00:14,700
This is the first time we've done optimization work on handmade hero.

6
00:00:14,700 --> 00:00:15,600
It's going really well.

7
00:00:17,300 --> 00:00:23,000
The stream was yesterday, we, you know, on the schedule, it's the

8
00:00:23,000 --> 00:00:25,500
first time we've ever done a Thursday stream and then a Saturday

9
00:00:25,500 --> 00:00:26,400
stream here today.

10
00:00:26,800 --> 00:00:28,700
But that's because I was speaking at a conference yesterday.

11
00:00:28,900 --> 00:00:29,800
A lot of people.

12
00:00:29,800 --> 00:00:30,100
So I

13
00:00:30,300 --> 00:00:32,800
Didn't want to do to speaking to public things in a row because, you

14
00:00:32,800 --> 00:00:34,500
know, your voice only got so much voice.

15
00:00:34,500 --> 00:00:36,500
It was already pretty hard on my voice doing the speaking thing

16
00:00:36,500 --> 00:00:37,500
because I did a rehearsal.

17
00:00:37,500 --> 00:00:43,000
And then the regular and yeah, anyway, long story but point being a

18
00:00:43,000 --> 00:00:44,900
lot of people have asked where they can see the lecture

19
00:00:46,900 --> 00:00:49,300
If it was recorded etcetera, etcetera, it was recorded.

20
00:00:49,300 --> 00:00:53,500
The AV people looked pretty professional actually for a small

21
00:00:53,500 --> 00:00:54,100
conference like this.

22
00:00:54,100 --> 00:00:58,600
They actually looked like they were some pretty serious AV people, so

23
00:00:58,600 --> 00:01:03,600
it will be available at some point but I don't have a firm date for

24
00:01:03,600 --> 00:01:07,000
when they will get all of the video processed and up but just as soon

25
00:01:07,000 --> 00:01:10,800
as it is I will mention it on the start of the stream here.

26
00:01:10,800 --> 00:01:15,400
And I will also post a link to the Twitter, the Twitter feed.

27
00:01:15,400 --> 00:01:16,800
So this guy right here

28
00:01:17,800 --> 00:01:20,500
He will have a post of it when it is ready.

29
00:01:20,700 --> 00:01:23,700
So I'll let you know as soon as I know, but I don't know anything yet.

30
00:01:24,600 --> 00:01:26,100
All right, let's get to it.

31
00:01:26,100 --> 00:01:28,600
Today is day 1, 21.

32
00:01:29,800 --> 00:01:32,200
If you would like to follow along the source code, you can unzip day

33
00:01:32,200 --> 00:01:35,800
120 source code because that is the source code that I am starting

34
00:01:35,800 --> 00:01:36,600
with right now.

35
00:01:37,700 --> 00:01:43,500
So I one of the things that was tough on Thursday, was that we tried a

36
00:01:43,500 --> 00:01:48,800
new tool that Fabien had sent over, that allows us to analyze the use

37
00:01:48,800 --> 00:01:50,900
of the processor of the Nehalem processor.

38
00:01:50,900 --> 00:01:51,800
That's in this machine.

39
00:01:52,500 --> 00:01:56,700
It allows to analyze use the processor on the code that we wrote and

40
00:01:56,700 --> 00:01:57,500
it's much.

41
00:01:57,500 --> 00:01:59,900
It's like a much more complete version of what I thought we might have

42
00:01:59,900 --> 00:02:03,300
to build our ourselves because I was like, well, you know, I showed

43
00:02:03,300 --> 00:02:06,100
on, I think Wednesday stream how to use intrinsics to kind of go in

44
00:02:06,100 --> 00:02:07,400
and how to use

45
00:02:07,600 --> 00:02:09,199
Pound Defiance, the count your intrinsics.

46
00:02:09,699 --> 00:02:14,400
They basically did a thing that kind of cooler where they would employ

47
00:02:15,100 --> 00:02:19,500
inject into the executable markers that they could grab.

48
00:02:19,600 --> 00:02:22,100
And then they would just read the source code out from the actual

49
00:02:22,100 --> 00:02:25,100
executable and it would be able to do analysis on it.

50
00:02:25,100 --> 00:02:28,900
There which is also pretty cool and honestly we didn't really go over

51
00:02:28,900 --> 00:02:30,000
this too much.

52
00:02:30,400 --> 00:02:32,000
I'll kind of pointed out again.

53
00:02:32,600 --> 00:02:36,100
It's not it's not super relevant to what we happen to be doing right

54
00:02:36,100 --> 00:02:37,400
now by just it.

55
00:02:37,500 --> 00:02:40,700
Was kind of interesting to me just in general.

56
00:02:40,700 --> 00:02:43,600
I I didn't really know about this.

57
00:02:44,900 --> 00:02:48,400
So anyway, I just want to point it out the way they were doing.

58
00:02:48,400 --> 00:02:50,800
That was with the thing that I didn't know you could do in the

59
00:02:50,800 --> 00:02:51,400
compiler.

60
00:02:51,700 --> 00:02:56,300
So if you remember you put these like I acav c64 start and ends.

61
00:02:56,700 --> 00:02:59,800
You put those around the part that you wanted to have it.

62
00:03:00,000 --> 00:03:00,500
Lies.

63
00:03:00,900 --> 00:03:02,900
And then if you include,

64
00:03:04,600 --> 00:03:09,700
Zica when 64 is a marks you just have to include these little markers

65
00:03:10,300 --> 00:03:13,400
and what it would do on the 64-bit compiler was just this thing right

66
00:03:13,400 --> 00:03:13,800
here.

67
00:03:14,100 --> 00:03:16,700
So I didn't know you could do this, right?

68
00:03:16,700 --> 00:03:21,400
GS B and what's kind of neat just I just want to point out what this

69
00:03:21,400 --> 00:03:25,700
does because it's it was kind of news to me and I'm it's something

70
00:03:25,700 --> 00:03:28,500
that I might play with in the future because it's kind of cool.

71
00:03:29,900 --> 00:03:32,400
But basically, what this does.

72
00:03:34,000 --> 00:03:41,400
Is it actually writes actual like, a Known Unknown piece of

73
00:03:41,400 --> 00:03:42,200
information?

74
00:03:42,200 --> 00:03:44,600
Basically, write it like it writes whatever.

75
00:03:44,600 --> 00:03:48,300
This thing is in here you can see what it's but it's writing, right?

76
00:03:49,600 --> 00:03:52,800
It's actually doing a write of a particular piece of information.

77
00:03:52,800 --> 00:03:59,000
It's inserting that directly into directly into the program I guess

78
00:03:59,000 --> 00:03:59,700
might be a way to say it.

79
00:03:59,700 --> 00:04:02,900
So I want to just I want to show here

80
00:04:03,500 --> 00:04:05,900
Roughly what this does and how this works.

81
00:04:05,900 --> 00:04:09,500
Because it's just kind of interesting and today since it's a Saturday,

82
00:04:09,600 --> 00:04:10,900
I don't have a schedule.

83
00:04:11,300 --> 00:04:13,200
We could stream all night if we want to.

84
00:04:13,400 --> 00:04:16,300
So if we want to spend a bunch of time going on tangents or doing

85
00:04:16,300 --> 00:04:20,000
whatever we want, as long as we do an hour of actual programming, on

86
00:04:20,000 --> 00:04:24,000
the actual game, we can do whatever else we want and it's not really a

87
00:04:24,000 --> 00:04:24,500
big deal.

88
00:04:24,500 --> 00:04:28,000
So I don't feel super time constrained.

89
00:04:29,100 --> 00:04:32,500
so, if I go in here and I turn this on and right,

90
00:04:34,700 --> 00:04:35,800
Let's go ahead and do that.

91
00:04:37,700 --> 00:04:42,900
If I turn that on and then I go ahead and and, and launch our game.

92
00:04:47,100 --> 00:04:54,500
And I'm going to draw rectangle quickly that when we get here, what we

93
00:04:54,500 --> 00:04:57,300
should see and you know what also too, just to make it easier to find.

94
00:04:57,300 --> 00:05:01,400
You know what I should do is turn go ahead and turn off optimizations

95
00:05:01,400 --> 00:05:04,700
in the compiler so that our code will be, you know, more

96
00:05:04,800 --> 00:05:08,700
straightforward and more similar to the actual code that we, that we

97
00:05:08,700 --> 00:05:09,100
have.

98
00:05:10,400 --> 00:05:11,200
So, here we go.

99
00:05:14,500 --> 00:05:22,300
And let's see here is that code is run to it and I'm going to right

100
00:05:22,300 --> 00:05:26,100
click here and click go to disassembly so that we can see what's going

101
00:05:26,100 --> 00:05:26,400
on.

102
00:05:26,800 --> 00:05:27,200
Right?

103
00:05:28,900 --> 00:05:33,800
So now what I assumed and I could be very wrong about this, but what I

104
00:05:33,800 --> 00:05:40,000
assume they have done here and you can see, you know, this code right?

105
00:05:41,300 --> 00:05:47,700
This 6fh, right 6fh or o6f, right?

106
00:05:47,700 --> 00:05:48,600
As we know it.

107
00:05:49,100 --> 00:05:50,500
Is that one, one, one, one,

108
00:05:53,100 --> 00:05:58,800
And you can kind of see that that that's what they had passed in that

109
00:05:58,800 --> 00:05:59,800
that marker, right?

110
00:06:00,300 --> 00:06:01,600
One one, one, one, two.

111
00:06:01,600 --> 00:06:01,800
Two, two.

112
00:06:01,800 --> 00:06:02,200
Two.

113
00:06:03,600 --> 00:06:08,800
So what they've done here, is they've inserted a thing that I believe

114
00:06:08,800 --> 00:06:12,600
their idea is that this is a thing that's very unlikely for the

115
00:06:12,600 --> 00:06:16,200
compiler to ever have produced for any reason on its own.

116
00:06:17,600 --> 00:06:22,400
A right to the general this the GS segment thing a right to that

117
00:06:22,400 --> 00:06:26,700
location is not something the compiler will ever produce right?

118
00:06:27,700 --> 00:06:32,400
And so it's not that it actually needs a right to go to that location.

119
00:06:32,700 --> 00:06:35,000
It's that it just needs a instruction.

120
00:06:35,000 --> 00:06:39,300
It knows that the compiler will never put in the command stream so

121
00:06:39,300 --> 00:06:43,000
that when you tell it to analyze something, it can just scan the

122
00:06:43,000 --> 00:06:44,400
executable for this.

123
00:06:44,500 --> 00:06:46,600
It's going to look for that, right?

124
00:06:46,600 --> 00:06:46,700
It's

125
00:06:47,000 --> 00:06:48,100
Just going to grab the up.

126
00:06:48,100 --> 00:06:49,000
Sorry, not that.

127
00:06:49,200 --> 00:06:51,100
It's going to look for.

128
00:06:52,000 --> 00:06:52,500
Here we go.

129
00:06:53,200 --> 00:06:57,000
This is the address where this is the actual location, the executable.

130
00:06:57,300 --> 00:06:57,500
Oops.

131
00:06:57,500 --> 00:06:59,100
Sorry, this is the actual case Chancellor.

132
00:06:59,300 --> 00:07:01,600
It's going to look for this, right?

133
00:07:01,700 --> 00:07:06,200
It's going to look for the byte code that saying, you know, the well,

134
00:07:06,400 --> 00:07:09,800
byte codes for other one word, it's going to look for the encoded

135
00:07:09,800 --> 00:07:13,400
instruction that does this operation, because it knows the compiler

136
00:07:13,400 --> 00:07:16,800
had to insert that and would never probably insert it for

137
00:07:16,900 --> 00:07:20,000
Any other reason and then they do the same thing for ends.

138
00:07:20,000 --> 00:07:24,000
They just use a slightly different value, so then it can scan from

139
00:07:24,000 --> 00:07:30,000
there through the executable until it gets to the corresponding, where

140
00:07:30,000 --> 00:07:30,700
are you?

141
00:07:35,600 --> 00:07:40,500
Come to me, Erica till I get to the corresponding right to the GS

142
00:07:40,500 --> 00:07:42,000
segment, right?

143
00:07:43,900 --> 00:07:46,300
And it's basically got, it's basically.

144
00:07:46,300 --> 00:07:50,200
Now, it's almost like you can think of it like DNA markup, right?

145
00:07:50,200 --> 00:07:54,900
It's almost like inserting these markers into the code that it can use

146
00:07:54,900 --> 00:07:57,600
to look and see where it is.

147
00:07:57,600 --> 00:07:59,400
You want it to analyze.

148
00:08:00,200 --> 00:08:03,600
Now, the reason that I point this out is because if you again, one of

149
00:08:03,600 --> 00:08:05,900
the things we try to do on the stream is encouraged sort of these

150
00:08:05,900 --> 00:08:09,600
Advanced programming practices of like, hey, you know, I just want to

151
00:08:09,600 --> 00:08:12,900
kind of expose everyone who may not have had.

152
00:08:13,500 --> 00:08:16,000
The opportunity to see some of these things before in their

153
00:08:16,000 --> 00:08:16,700
programming.

154
00:08:17,000 --> 00:08:19,200
I just want to point out where we see these things that are kind of

155
00:08:19,200 --> 00:08:20,300
advanced programming tricks.

156
00:08:20,300 --> 00:08:21,700
That's a pretty interesting one.

157
00:08:21,700 --> 00:08:24,200
In fact, it's one I didn't really even know about.

158
00:08:25,100 --> 00:08:27,800
It's the kind of thing you used to do with the inline assembler, but

159
00:08:27,800 --> 00:08:31,100
they remove the inline assembler in the x64 compiler.

160
00:08:31,100 --> 00:08:34,100
I never really thought about how you might get that trick back, but

161
00:08:34,100 --> 00:08:35,299
now it's back.

162
00:08:36,500 --> 00:08:38,900
This is a good pretty cool way to do it.

163
00:08:39,000 --> 00:08:41,900
And so, what this means is, you can mark up the code using this,

164
00:08:41,900 --> 00:08:42,200
right?

165
00:08:42,200 --> 00:08:42,900
GS B.

166
00:08:43,000 --> 00:08:43,100
Thing.

167
00:08:43,100 --> 00:08:47,500
And then if you have an external tool, that wants to grab chunks of

168
00:08:47,500 --> 00:08:52,800
the actual code that came out, for whatever reason analysis or, you

169
00:08:52,800 --> 00:08:55,700
know, moving code chunks around hot, loading them going, who knows

170
00:08:55,700 --> 00:08:57,000
what you might want to do with it, right?

171
00:08:57,000 --> 00:08:59,900
But if you whatever you might want to do,

172
00:09:00,000 --> 00:09:03,800
This allows you to insert those markers in there, in a way that an

173
00:09:03,800 --> 00:09:09,200
external tool can trivially sweep through and find without having to

174
00:09:09,200 --> 00:09:12,000
know anything else about that executable, right?

175
00:09:12,000 --> 00:09:18,000
It doesn't need to know, like, how to read Microsoft's pdb file or how

176
00:09:18,000 --> 00:09:20,800
to read a map file, or anything else of the compartments really

177
00:09:20,800 --> 00:09:24,700
doesn't need to know how to read some other markup to figure out where

178
00:09:24,700 --> 00:09:25,300
the code is.

179
00:09:25,300 --> 00:09:27,100
It can just use this.

180
00:09:27,100 --> 00:09:29,800
And so I think that's a pretty cool trick.

181
00:09:30,000 --> 00:09:31,000
And I just wanted to highlight it.

182
00:09:31,000 --> 00:09:31,900
That's how that's working.

183
00:09:33,500 --> 00:09:37,000
Okay, so let's clean up another thing from the other day which is that

184
00:09:37,100 --> 00:09:39,900
I had to try and figure out how to use that tool on the stream, which

185
00:09:39,900 --> 00:09:41,000
was way too hard for me.

186
00:09:41,600 --> 00:09:43,400
I'll be honest, it's very difficult.

187
00:09:43,500 --> 00:09:47,000
I've said this multiple times but it's very very difficult to talk

188
00:09:47,000 --> 00:09:50,700
while you are programming and the only real reason that I'm able to do

189
00:09:50,700 --> 00:09:55,100
it as was I've programmed for so long and because I talk way too much

190
00:09:55,100 --> 00:09:56,100
in my normal everyday life.

191
00:09:56,100 --> 00:09:58,600
So, it's like, I've had so much practice about those things that I can

192
00:09:58,600 --> 00:09:59,300
make it work.

193
00:10:00,800 --> 00:10:02,900
But when I'm faced with something that

194
00:10:03,000 --> 00:10:04,700
Never seen before ever.

195
00:10:06,200 --> 00:10:08,000
It's really hard for me to integrate.

196
00:10:08,000 --> 00:10:10,900
So I had a really hard time parsing that thing and I needed a little

197
00:10:10,900 --> 00:10:12,800
bit of time to like, spend on it on my own.

198
00:10:12,800 --> 00:10:16,100
So I could understand how to use the tool and so now I can give a much

199
00:10:16,100 --> 00:10:19,800
better explanation of how it works for anyone who maybe didn't get it.

200
00:10:19,800 --> 00:10:22,200
I suspect most people did because I feel like when you're able to look

201
00:10:22,200 --> 00:10:24,300
at on the stream and you don't have to talk it probably sunk in a

202
00:10:24,300 --> 00:10:26,100
little bit better but just in case it didn't.

203
00:10:26,100 --> 00:10:29,900
I want to now say now that I know how it works, I want to explain a

204
00:10:29,900 --> 00:10:32,600
little bit better about how it works because I didn't I was not able

205
00:10:32,600 --> 00:10:32,800
to do that.

206
00:10:32,900 --> 00:10:34,800
That because I didn't know how it worked, right?

207
00:10:34,800 --> 00:10:38,600
And so now I kind of do, all right, so the first thing I want to say

208
00:10:38,600 --> 00:10:42,600
is I want to explain what my confusion was about the tool first,

209
00:10:42,600 --> 00:10:45,000
because I think that's also potentially kind of interesting.

210
00:10:47,500 --> 00:10:53,200
So, I don't know if you guys remember this, but a long time ago, I'm

211
00:10:53,200 --> 00:10:58,100
trying to remember where this actually was.

212
00:11:00,500 --> 00:11:03,200
Where is this going to be?

213
00:11:03,300 --> 00:11:05,200
I don't know.

214
00:11:05,200 --> 00:11:09,200
But I think it's probably

215
00:11:11,800 --> 00:11:15,500
In here somewhere.

216
00:11:16,200 --> 00:11:17,400
Hmm.

217
00:11:19,500 --> 00:11:22,600
Where do I find it where?

218
00:11:22,600 --> 00:11:27,100
Indeed, let's search for it by name and hope we find it.

219
00:11:28,000 --> 00:11:28,300
Hmm.

220
00:11:30,000 --> 00:11:30,900
I don't know if we will.

221
00:11:32,300 --> 00:11:36,000
I don't even know if it's on this machine anymore but we will.

222
00:11:36,000 --> 00:11:40,000
We will know when the little searching Searcher thing.

223
00:11:41,800 --> 00:11:46,100
If the little search researcher thing, actually completes will be able

224
00:11:46,100 --> 00:11:46,900
to find it.

225
00:11:48,700 --> 00:11:49,700
I actually showed it before.

226
00:11:49,700 --> 00:11:52,700
So I know what you see least used to be on this machine.

227
00:11:53,100 --> 00:11:56,300
What I don't know is if I like deleted it off, this machine at some

228
00:11:56,300 --> 00:11:59,900
point and this machine is a totally old Nan used machine anymore.

229
00:12:00,000 --> 00:12:05,100
Are so I don't actually know, you know, I don't actually remember

230
00:12:05,100 --> 00:12:06,200
exactly what's on it yet.

231
00:12:07,200 --> 00:12:08,700
It feels like it should have been on.

232
00:12:08,700 --> 00:12:09,900
I feel like

233
00:12:12,900 --> 00:12:16,000
it should have been on here somewhere, but

234
00:12:17,100 --> 00:12:22,600
I'm not seeing it which makes me a little bit.

235
00:12:22,600 --> 00:12:24,200
Now that's not going to be there it is.

236
00:12:24,700 --> 00:12:28,500
Yeah I don't even remember where things are on this machine so it

237
00:12:28,500 --> 00:12:32,300
doesn't look like it is, which is weird because it was I wonder if it

238
00:12:32,300 --> 00:12:34,500
just got deleted at some point.

239
00:12:35,600 --> 00:12:36,600
Hmm.

240
00:12:41,700 --> 00:12:42,100
Look at it.

241
00:12:42,100 --> 00:12:45,400
It's got look at it going towards the end there.

242
00:12:45,500 --> 00:12:46,300
What's with the word?

243
00:12:47,200 --> 00:12:49,700
Why is this little part taking so long?

244
00:12:52,500 --> 00:12:58,000
Come on, come on, you can get there, but looks like it's not there.

245
00:12:58,000 --> 00:13:00,100
So unfortunately,

246
00:13:01,300 --> 00:13:02,500
Maybe it's in temp.

247
00:13:02,500 --> 00:13:03,800
Oh, it's in Tempe.

248
00:13:05,100 --> 00:13:05,900
There it is.

249
00:13:07,000 --> 00:13:09,700
Now, people ask me if this was because I was mad at Jonathan Blow.

250
00:13:09,900 --> 00:13:12,600
We show this on the stream once before it was like on the desktop or

251
00:13:12,600 --> 00:13:16,900
something and no it's not I don't think I've ever been mad at Jonathan

252
00:13:16,900 --> 00:13:17,300
blue.

253
00:13:18,300 --> 00:13:22,900
For some reason I were just popping my head sometimes and I think I

254
00:13:22,900 --> 00:13:29,000
was combining like blowhard with retard or something and I was mad at

255
00:13:29,000 --> 00:13:33,400
something like a dev kit and so I type that in I think that's just how

256
00:13:33,400 --> 00:13:34,300
that works sometimes.

257
00:13:34,800 --> 00:13:35,500
So anyway,

258
00:13:37,600 --> 00:13:38,900
I'm going to go ahead and show this here.

259
00:13:39,900 --> 00:13:42,900
So this is the output of a tool that I wrote.

260
00:13:43,500 --> 00:13:48,700
It was a compiler and what it was is a compiler that was designed to

261
00:13:48,700 --> 00:13:54,800
make blit code for the Xbox 360 of various kinds of blitko, spry the

262
00:13:54,800 --> 00:14:00,300
wrong word, but operations it was designed to generate 360 stuff.

263
00:14:01,800 --> 00:14:06,900
And so the way the powerpc works, the this processor is fairly

264
00:14:06,900 --> 00:14:07,800
document this point.

265
00:14:07,800 --> 00:14:11,000
So I'm not really violent and enen DA's by explaining some of this

266
00:14:11,800 --> 00:14:13,800
because they've actually reverse engineered at all.

267
00:14:16,900 --> 00:14:17,700
I checked.

268
00:14:20,700 --> 00:14:21,700
On the Xbox 360.

269
00:14:21,700 --> 00:14:24,300
Got a processor that could issue if I remember correctly.

270
00:14:24,300 --> 00:14:28,000
And again like I said it's might be a little hazy of exact I can't

271
00:14:28,000 --> 00:14:29,800
remember a lot of the exact specifics but

272
00:14:31,300 --> 00:14:35,200
Basically, what happened on that processor was that you could issue to

273
00:14:35,200 --> 00:14:39,800
instructions every cycle, but you could only issues those two

274
00:14:39,800 --> 00:14:41,100
instructions, every cycle.

275
00:14:41,600 --> 00:14:45,300
If nothing was was none of the resources that they needed were

276
00:14:45,300 --> 00:14:46,000
blocked.

277
00:14:47,700 --> 00:14:50,000
It's kind of similar to any processor, like we've been talking about

278
00:14:50,000 --> 00:14:51,700
with units, right?

279
00:14:52,800 --> 00:14:55,500
And so, you know, the processor has units and if those units are

280
00:14:55,500 --> 00:14:57,300
available, you could issue it.

281
00:14:58,200 --> 00:14:58,800
So

282
00:15:00,500 --> 00:15:04,800
Unlike the processor that we're working on, now, the Xbox 360 was an

283
00:15:04,800 --> 00:15:05,800
inorder processor.

284
00:15:05,800 --> 00:15:10,200
Which means that as you go through the instruction stream, the only

285
00:15:10,200 --> 00:15:15,000
instructions that it can execute are the instructions that come

286
00:15:15,000 --> 00:15:17,100
immediately after the ones that just got executed.

287
00:15:17,100 --> 00:15:19,700
So, when it comes in here and you see something like a die,

288
00:15:21,500 --> 00:15:23,600
Which, I think refers to add immediate.

289
00:15:23,600 --> 00:15:28,400
So it means take the register 18 and the register 0, right?

290
00:15:28,800 --> 00:15:31,400
I don't remember the ordering for these things.

291
00:15:31,400 --> 00:15:33,200
If it's are 18 to ours.

292
00:15:33,200 --> 00:15:36,400
Oh well, but r0 is just going to be 0, right?

293
00:15:36,400 --> 00:15:38,100
So I suspect, it's probably.

294
00:15:38,100 --> 00:15:38,400
All right.

295
00:15:38,400 --> 00:15:42,500
Teen is the register for the destination and our zeros the register

296
00:15:42,500 --> 00:15:44,300
for the source, that's my guess.

297
00:15:47,000 --> 00:15:47,700
Different.

298
00:15:49,600 --> 00:15:54,300
Different assembly notations, have different conventions for whether

299
00:15:54,300 --> 00:15:56,500
the destination register comes first or second.

300
00:15:57,000 --> 00:16:00,200
But looking at this, I believe are zero on these risc processors.

301
00:16:00,200 --> 00:16:00,900
On the, on a powerpc.

302
00:16:00,900 --> 00:16:03,400
Processors are zero, isn't really a register.

303
00:16:03,400 --> 00:16:05,300
It's just a constant value 0.

304
00:16:05,300 --> 00:16:06,000
You can use.

305
00:16:06,200 --> 00:16:08,300
I don't remember if that's true, like I said, I don't remember a lot

306
00:16:08,300 --> 00:16:11,600
of things about this, but basically, that's the thing I'm using to

307
00:16:11,600 --> 00:16:14,400
determine that probably is Source register here because you can't

308
00:16:14,400 --> 00:16:15,000
write to R.

309
00:16:15,000 --> 00:16:16,700
0 would be my guest.

310
00:16:16,700 --> 00:16:19,100
In fact, we could sort of do a quick spot check and see.

311
00:16:19,300 --> 00:16:22,000
B, r0 is never written to but of course it's not running some other

312
00:16:22,000 --> 00:16:22,600
registers to.

313
00:16:22,600 --> 00:16:23,800
But so anyway,

314
00:16:25,800 --> 00:16:27,500
It would come in here and do something.

315
00:16:28,000 --> 00:16:30,900
Like let's say, we start on this line of execution, then what would

316
00:16:30,900 --> 00:16:33,700
happen is it would be able to issue these two instructions,

317
00:16:33,700 --> 00:16:34,400
potentially.

318
00:16:34,900 --> 00:16:41,300
So it would be able to issue a die, so it would add 0 and 16 to and

319
00:16:41,300 --> 00:16:43,500
put it in 18 in register 18.

320
00:16:43,600 --> 00:16:45,100
And that's an actual immediate 16th.

321
00:16:45,100 --> 00:16:48,400
The value 16 and then it would try to issue.

322
00:16:48,400 --> 00:16:52,200
Add our 20s are three and are five those two registers together and

323
00:16:52,200 --> 00:16:55,500
put it in our 27, okay, that's just what it

324
00:16:55,700 --> 00:17:00,100
We try to do and those are the only two instructions that the

325
00:17:00,100 --> 00:17:02,900
processor can can attempt to execute at that time.

326
00:17:04,000 --> 00:17:08,300
So literally there is no, it does not matter if there's anything else

327
00:17:08,300 --> 00:17:11,700
in here that it could be executing, it can only try to execute these

328
00:17:11,700 --> 00:17:12,000
two.

329
00:17:13,099 --> 00:17:17,300
So it will definitely execute the first one we assume because we don't

330
00:17:17,300 --> 00:17:19,400
have anything, we're not considering the code above it.

331
00:17:19,400 --> 00:17:23,000
So it's going to execute this one and then it will try to execute this

332
00:17:23,000 --> 00:17:24,599
one on the same clock cycle.

333
00:17:25,400 --> 00:17:26,000
If it can.

334
00:17:26,900 --> 00:17:29,700
Now, what you can see from the output of my tool here, which which

335
00:17:29,700 --> 00:17:33,200
generates both the code and markup of the code, it's how I wished

336
00:17:33,200 --> 00:17:33,600
compiler.

337
00:17:33,800 --> 00:17:34,700
Normally worked, right?

338
00:17:34,700 --> 00:17:38,300
I wish compilers normally outputted the code and markup of the code so

339
00:17:38,300 --> 00:17:40,200
that you could see what it at least.

340
00:17:40,200 --> 00:17:42,300
Believed would be the problems on the chip.

341
00:17:42,900 --> 00:17:45,600
Unfortunately, I don't do that, but I thought I want.

342
00:17:45,600 --> 00:17:47,500
So when I wrote the thing, that's what I did.

343
00:17:49,300 --> 00:17:55,100
So, what it does here is, it's telling you right down the side.

344
00:17:55,400 --> 00:17:57,500
It's basically telling you what it thinks.

345
00:17:57,500 --> 00:17:59,400
The execution clock is going to be

346
00:18:00,300 --> 00:18:03,200
So it's saying I'm going to execute this on clock 0.

347
00:18:03,200 --> 00:18:04,700
I'm going to execute this on clock one.

348
00:18:04,700 --> 00:18:08,800
I'm going to execute this on clock five and what you can see here is

349
00:18:08,800 --> 00:18:12,300
this thing over here, tells you the reason

350
00:18:14,000 --> 00:18:19,700
Why it is not able to execute this instruction and how many cycles it

351
00:18:19,700 --> 00:18:20,500
was delayed for.

352
00:18:21,200 --> 00:18:25,400
So it basically says, okay, you know, I can't execute this add-on

353
00:18:26,300 --> 00:18:30,100
cycle 0, which is where I would have been able to execute it normally

354
00:18:30,100 --> 00:18:32,200
because I can actually I know the prospects for taking the time

355
00:18:32,500 --> 00:18:38,300
because the pipeline for the ad is full, there's only one AB pipeline

356
00:18:38,300 --> 00:18:42,400
I think on the 360 which means that once this ad went into it, the

357
00:18:42,400 --> 00:18:42,900
second dad.

358
00:18:43,000 --> 00:18:47,200
I cannot go into it, so it has to wait one cycle for the first ad to

359
00:18:47,200 --> 00:18:47,800
finish.

360
00:18:49,700 --> 00:18:50,700
Does that make sense?

361
00:18:51,700 --> 00:18:52,400
Not to finish?

362
00:18:52,400 --> 00:18:56,300
Sorry for the first ad to move out of that stage of the pipeline?

363
00:18:57,200 --> 00:19:00,400
Because remember, on a processor, things can be staged in pipelines.

364
00:19:00,400 --> 00:19:02,300
So, the adding unit, right?

365
00:19:02,800 --> 00:19:05,300
Is probably pipeline, which means that things move through it in a

366
00:19:05,300 --> 00:19:10,500
couple stages on a couple Cycles so maybe you can have many ads and

367
00:19:10,500 --> 00:19:14,500
flight at a time but you may only be able to issue one at a time into

368
00:19:14,500 --> 00:19:18,500
the front of the pipeline because there's only one slot for an ad in

369
00:19:18,500 --> 00:19:19,300
every stage.

370
00:19:19,600 --> 00:19:19,800
It.

371
00:19:20,500 --> 00:19:23,900
So it goes into the pipeline, the first one goes in and on the same

372
00:19:23,900 --> 00:19:26,700
cycle, you can't put another one in, but on the next cycle, you could,

373
00:19:26,700 --> 00:19:27,700
for example, right?

374
00:19:27,700 --> 00:19:28,500
So, that's what it's saying.

375
00:19:28,500 --> 00:19:31,900
Saying, the pipeline was full, I need to wait one cycle, to get

376
00:19:31,900 --> 00:19:33,900
another add in there, so it does.

377
00:19:33,900 --> 00:19:37,100
And then on the on execution clock one, it'll put it in there then

378
00:19:37,100 --> 00:19:38,100
there's this followed by yet.

379
00:19:38,100 --> 00:19:39,700
Another ad, right?

380
00:19:41,000 --> 00:19:47,400
And so that other AD now gets delayed for much longer.

381
00:19:47,600 --> 00:19:48,700
As you can see, right?

382
00:19:49,300 --> 00:19:51,900
It says that it can't execute that until clock five.

383
00:19:52,300 --> 00:19:56,200
It says that there would have been a pipeline stall of one cycle.

384
00:19:56,700 --> 00:20:00,800
Because again, when it got here and waited a cycle to issue this, if

385
00:20:00,800 --> 00:20:04,400
this were not another ad, it could have issued this right away on the

386
00:20:04,400 --> 00:20:05,800
same cycle, xx1?

387
00:20:07,000 --> 00:20:09,500
Because if this were something other than an ad, that could go in a

388
00:20:09,500 --> 00:20:10,600
separate pipeline, it wouldn't have.

389
00:20:10,800 --> 00:20:11,100
Fine.

390
00:20:11,100 --> 00:20:14,000
So it's like, I gotta wait one of the pipeline but it turns out that

391
00:20:14,000 --> 00:20:15,400
that's not the worst thing.

392
00:20:16,000 --> 00:20:19,500
The worst thing is it actually also has to wait for our 27 to become

393
00:20:19,600 --> 00:20:24,700
free, which is additional three, which is an additional three Cycles,

394
00:20:25,300 --> 00:20:26,000
right?

395
00:20:26,400 --> 00:20:29,500
So you can and the reason you there, you can see, is that our 27 was

396
00:20:29,500 --> 00:20:32,900
used here and then it immediately gets used again.

397
00:20:34,000 --> 00:20:34,700
Does that make sense?

398
00:20:35,400 --> 00:20:41,000
So it has to wait for our 27 to be completely to for the result of

399
00:20:41,000 --> 00:20:42,200
this ad before.

400
00:20:42,200 --> 00:20:43,400
It can issue this ad.

401
00:20:44,700 --> 00:20:45,500
Does this make sense?

402
00:20:46,100 --> 00:20:48,100
And you can see as we go down here, right?

403
00:20:48,100 --> 00:20:50,600
The, the comparative, pretty good job.

404
00:20:50,600 --> 00:20:55,200
In fact, this, I think was a pretty good routine as far as things go.

405
00:20:55,300 --> 00:20:59,800
There's very few stalls in it if you take a look at this routine,

406
00:21:00,000 --> 00:21:02,700
See that most of the time it got perfect pairing.

407
00:21:02,900 --> 00:21:05,600
So most of the time it was dual issuing, right?

408
00:21:05,700 --> 00:21:08,800
If you don't see anything over here besides the execution cycle, that

409
00:21:08,800 --> 00:21:10,700
means it got a dual issue on it, right?

410
00:21:11,100 --> 00:21:14,400
And you can see dual issue dual issue, dual issues, right?

411
00:21:14,600 --> 00:21:17,300
All over the place, so it's pretty good.

412
00:21:18,900 --> 00:21:21,600
But this is what I was used to thinking about because that's the last

413
00:21:21,600 --> 00:21:23,000
time I did one of these things.

414
00:21:23,600 --> 00:21:26,800
And like I said, this is why I say I was much better at Xbox 360

415
00:21:27,400 --> 00:21:31,200
understanding how to do optimization on that because, you know, I

416
00:21:31,200 --> 00:21:34,100
actually wrote a compiler, that could do all this, you know, a bunch

417
00:21:34,100 --> 00:21:35,000
of stuff on it.

418
00:21:35,100 --> 00:21:38,600
And I actually had it down to thinking about exactly how to schedule

419
00:21:38,600 --> 00:21:39,700
each individual instruction.

420
00:21:39,700 --> 00:21:42,200
And to do that, I had to know all about exactly how the processor

421
00:21:42,200 --> 00:21:44,900
worked, and all that sort of stuff, right?

422
00:21:45,700 --> 00:21:48,600
So that's what I was thinking about which is why.

423
00:21:48,800 --> 00:21:51,500
You know, like I said on stream to, it was difficult for me to figure

424
00:21:51,500 --> 00:21:55,700
out what was going on with the tool because the tool is nothing like

425
00:21:55,700 --> 00:21:56,100
that.

426
00:21:56,100 --> 00:21:58,600
And I thought I was sort of looking at a readout that was like, what

427
00:21:58,600 --> 00:22:01,300
my thing produced that is not what this is and there's good reason for

428
00:22:01,300 --> 00:22:01,800
that.

429
00:22:02,000 --> 00:22:03,500
And we'll talk about that in a second.

430
00:22:04,500 --> 00:22:09,600
So let me go ahead and bring up what the tool does, right?

431
00:22:09,800 --> 00:22:11,300
So it's a 64 bit of a largely.

432
00:22:11,300 --> 00:22:14,500
We want to look at Nehalem which is our the processor architecture

433
00:22:14,500 --> 00:22:15,900
that we happen to be on at the moment.

434
00:22:20,600 --> 00:22:21,200
and,

435
00:22:26,800 --> 00:22:27,600
I think that's it.

436
00:22:27,600 --> 00:22:28,600
That's all I need this app.

437
00:22:29,100 --> 00:22:34,300
So let's go ahead and grab that file doesn't really matter which one I

438
00:22:34,300 --> 00:22:36,400
guess we look at.

439
00:22:36,400 --> 00:22:36,800
But

440
00:22:38,100 --> 00:22:38,700
Here we go.

441
00:22:39,300 --> 00:22:39,900
Oh wait.

442
00:22:39,900 --> 00:22:43,500
That's not what I want to look at build a made-up doula.

443
00:22:47,000 --> 00:22:49,900
Invalid Arch, I guess that's be capitalized.

444
00:22:52,100 --> 00:22:52,500
Okay.

445
00:22:53,900 --> 00:22:57,900
So why are you having trouble?

446
00:23:01,300 --> 00:23:01,800
There we go.

447
00:23:02,400 --> 00:23:03,700
Guess that's to be an optimized bill.

448
00:23:03,700 --> 00:23:04,300
That's weird.

449
00:23:06,100 --> 00:23:07,000
Oh well doesn't matter.

450
00:23:07,700 --> 00:23:10,400
Anyway point being so, here we go.

451
00:23:11,900 --> 00:23:12,200
What?

452
00:23:12,200 --> 00:23:13,700
I thought I was seeing here, right?

453
00:23:13,700 --> 00:23:16,400
Was something what I thought this would be showing with something

454
00:23:16,400 --> 00:23:18,400
similar to what I was looking at.

455
00:23:19,100 --> 00:23:22,600
So I was expecting these things to be something about the way.

456
00:23:22,600 --> 00:23:27,400
The processor would execute stuff, but that's not what this shows.

457
00:23:28,400 --> 00:23:33,400
So what this actually shows is really has nothing to do with order at

458
00:23:33,400 --> 00:23:33,700
all.

459
00:23:34,400 --> 00:23:38,400
The only thing this this is just a straight table, it's not an actual

460
00:23:38,400 --> 00:23:39,500
step-by-step.

461
00:23:39,500 --> 00:23:43,600
Read out like what my tool produced what this is is it's just telling

462
00:23:43,600 --> 00:23:44,400
you, okay?

463
00:23:44,600 --> 00:23:50,800
This instruction cost, this many micro Ops in this slot.

464
00:23:51,000 --> 00:23:51,600
That's it.

465
00:23:51,700 --> 00:23:55,400
It's just a table and that was the majority of my confusion.

466
00:23:56,100 --> 00:23:59,800
so, literally, all this table is showing you is it's a

467
00:24:00,100 --> 00:24:03,500
If you want to know for any particular, one of these instructions, if

468
00:24:03,500 --> 00:24:08,100
you want to know what my crops, it generates on which ports of the

469
00:24:08,100 --> 00:24:09,000
processor, right?

470
00:24:09,000 --> 00:24:11,500
And ports are basically the like those units where you're putting

471
00:24:11,500 --> 00:24:12,900
things into the unit's, right?

472
00:24:14,700 --> 00:24:17,600
If you want to know how many microbes go into how many to which

473
00:24:17,600 --> 00:24:20,900
courts, I mean instruction, this tells you and that's it.

474
00:24:22,700 --> 00:24:28,100
So the reason that this is like that and does not look like something

475
00:24:28,100 --> 00:24:30,900
like my tool because something like my tool is what you need that.

476
00:24:30,900 --> 00:24:34,900
I think the way my tool works is exactly what you want for a processor

477
00:24:34,900 --> 00:24:36,300
like 360s processor.

478
00:24:38,900 --> 00:24:40,800
the reason that they do it this way,

479
00:24:42,100 --> 00:24:47,000
Is because the x64 is a highly out of order processor.

480
00:24:47,000 --> 00:24:48,800
It has a giant micro app window.

481
00:24:48,800 --> 00:24:52,600
I think some on the stream posted 196, my crops or something like

482
00:24:52,600 --> 00:24:56,500
this, I don't know if that's correct but it either way, I think I

483
00:24:56,500 --> 00:25:02,600
remember it being something like 40, 40 Micro Ops on the original P6

484
00:25:02,600 --> 00:25:06,400
or something like that, and that was 10 years ago or something, so I

485
00:25:06,400 --> 00:25:09,600
could believe that it was up to 190 something like, Rob's now,

486
00:25:11,400 --> 00:25:14,000
Right, so that's plausible.

487
00:25:15,300 --> 00:25:18,100
So basically because it's so highly out of order.

488
00:25:18,100 --> 00:25:20,700
What the processor is really doing is this looking at, you know

489
00:25:20,700 --> 00:25:24,100
basically two pages of this roughly or some even more really like a

490
00:25:24,100 --> 00:25:25,200
couple pages of this.

491
00:25:25,400 --> 00:25:28,900
In fact this whole thing they fit in the micro app window, right?

492
00:25:29,500 --> 00:25:32,200
I don't know how many lines is this told them our newest to waiting

493
00:25:32,200 --> 00:25:32,400
for.

494
00:25:32,600 --> 00:25:39,100
So basically half of this Loop over half like two-thirds of this Loop

495
00:25:39,400 --> 00:25:44,500
fit in the micro up window which means that that it can execute any of

496
00:25:44,500 --> 00:25:44,900
these things.

497
00:25:45,300 --> 00:25:47,900
As long as they're not see really dependent on each other, it couldn't

498
00:25:47,900 --> 00:25:49,300
pick pick any of them at a given time.

499
00:25:49,300 --> 00:25:52,000
So showing a step-by-step thing would be kind of impossible because

500
00:25:52,000 --> 00:25:54,700
it's like, we don't know which one the process is going to pick next.

501
00:25:54,700 --> 00:25:56,500
It could be tons of these.

502
00:25:57,200 --> 00:26:01,300
So instead what they try to give you to help you, optimize is just an

503
00:26:01,300 --> 00:26:08,700
idea of what port will be the most heavily utilized, first of all,

504
00:26:09,900 --> 00:26:12,800
and we can see that right now in this particular one, it's Port 1,

505
00:26:12,800 --> 00:26:13,000
right?

506
00:26:13,000 --> 00:26:13,700
97.

507
00:26:14,500 --> 00:26:18,300
And in fact, it lists that for us here and the reason that that is an

508
00:26:18,300 --> 00:26:22,900
interesting number is because we know that even if the processor did a

509
00:26:22,900 --> 00:26:27,400
hunt, 100% perfect job and there were zero serial dependencies

510
00:26:27,400 --> 00:26:32,100
meaning, you could execute any of the commands at any time, you would

511
00:26:32,100 --> 00:26:36,100
still only be able to go 97 Cycles.

512
00:26:36,600 --> 00:26:38,400
You that would be the fastest, you could go would be ninety.

513
00:26:38,400 --> 00:26:39,200
Seven Cycles.

514
00:26:39,700 --> 00:26:43,800
Cuz we know that the processor cannot issue two, instructions to a

515
00:26:43,800 --> 00:26:45,500
single port in a single cycle.

516
00:26:46,400 --> 00:26:47,600
So basically, that is it.

517
00:26:47,600 --> 00:26:52,200
It's like, you have 97 of these things that have to go to this port,

518
00:26:53,100 --> 00:26:59,700
that means you will require 97 Cycles right now, you may take a lot

519
00:26:59,700 --> 00:26:59,900
longer.

520
00:27:00,000 --> 00:27:04,400
Than that depending on other aspects of the processing, but you

521
00:27:04,400 --> 00:27:09,200
absolutely will take 97 Cycles at a minimum.

522
00:27:10,600 --> 00:27:13,400
And so that's the single most important number.

523
00:27:15,800 --> 00:27:19,500
And then the second most important thing is this critical path thing

524
00:27:19,500 --> 00:27:24,800
here, which I haven't really played around with too much but I believe

525
00:27:24,800 --> 00:27:28,700
all the critical path thing is actually showing because there's two

526
00:27:28,700 --> 00:27:31,700
things that I kind of thought about for critical path.

527
00:27:31,700 --> 00:27:32,700
That it might be showing.

528
00:27:33,100 --> 00:27:36,600
But when I looked at it, I was like, okay, I think this is actually

529
00:27:36,600 --> 00:27:37,400
not what that is.

530
00:27:38,900 --> 00:27:43,800
I believe what the critical path is showing is just it's marking the

531
00:27:43,800 --> 00:27:45,200
cycle, the it's Mark

532
00:27:45,400 --> 00:27:48,100
Instructions that have to go to the high pressure port.

533
00:27:49,100 --> 00:27:54,100
So basically, CP as far as I can tell is just is basically at least on

534
00:27:54,100 --> 00:27:58,600
the readouts for the hilum is basically just telling you when there

535
00:27:58,600 --> 00:28:06,100
are when an instruction issues to the port that is that is the high

536
00:28:06,100 --> 00:28:10,300
pressure port, the highest pressure port because there's other things,

537
00:28:10,300 --> 00:28:11,800
I was thinking that CP could be.

538
00:28:11,900 --> 00:28:17,600
It could be the longest serial dependency chain and it doesn't look

539
00:28:17,600 --> 00:28:18,500
like that's what it is.

540
00:28:19,000 --> 00:28:19,400
Right.

541
00:28:19,400 --> 00:28:22,800
It just it looks like it's just literally telling you this but I could

542
00:28:22,800 --> 00:28:23,700
be wrong about that.

543
00:28:24,800 --> 00:28:28,800
Now, the reason that I say that it still might be that is because

544
00:28:28,800 --> 00:28:33,900
since all of those things combined, since all of the things have to

545
00:28:33,900 --> 00:28:37,200
combine to the right at the end, it's possible that critical path.

546
00:28:37,200 --> 00:28:41,800
Really does still do the analysis of the longest serial dependency

547
00:28:41,800 --> 00:28:42,300
chain.

548
00:28:42,400 --> 00:28:44,900
And it's just that since all of these things are in some sense

549
00:28:44,900 --> 00:28:45,700
dependent.

550
00:28:46,700 --> 00:28:48,300
That's what it's showing us, but I don't know.

551
00:28:48,900 --> 00:28:53,600
So anyway, so CP looks to me like I'll have to play with this tool

552
00:28:53,600 --> 00:28:58,200
more to really say, but it doesn't look like CP at least for what

553
00:28:58,200 --> 00:28:59,900
we're doing is all that interesting.

554
00:29:00,600 --> 00:29:06,400
But this, this right here is very interesting, the port, the port

555
00:29:06,400 --> 00:29:07,900
thing, so,

556
00:29:09,400 --> 00:29:12,800
Okay, with that, in mind, we can go back to the routine and just take

557
00:29:12,800 --> 00:29:17,200
a quick look at some things that we want to sort of verify.

558
00:29:18,200 --> 00:29:21,100
And, you know, I was talking to Fabien, actually a starting to Fabian

559
00:29:21,100 --> 00:29:21,600
last night.

560
00:29:21,600 --> 00:29:28,400
I went over to see him and Sean on the, on the east side and because I

561
00:29:28,400 --> 00:29:29,700
was already in Bellevue for the conference.

562
00:29:29,700 --> 00:29:34,200
And so, you know, we try to hang out periodically and just catch up.

563
00:29:34,900 --> 00:29:38,100
And so, you know, he actually mentioned something that I don't

564
00:29:38,100 --> 00:29:39,000
remember us finding to

565
00:29:39,200 --> 00:29:39,900
Be the case.

566
00:29:40,300 --> 00:29:45,000
So it's a little weird, but, like he was saying that you can't run

567
00:29:45,000 --> 00:29:47,900
programs that have the markups markers in them, but we were able to do

568
00:29:47,900 --> 00:29:49,600
that, like, this is running with the markers that.

569
00:29:49,600 --> 00:29:52,900
He was saying it crashes when you get there, but it doesn't crash for

570
00:29:52,900 --> 00:29:53,300
us.

571
00:29:53,800 --> 00:29:58,100
And so, I don't know if that's just luck that GS, right?

572
00:29:58,100 --> 00:29:59,800
Doesn't actually cause a problem because of

573
00:30:00,100 --> 00:30:01,900
Other aspect of our system or something.

574
00:30:01,900 --> 00:30:07,900
You know, I don't know why he said that and why we're not seeing that

575
00:30:08,200 --> 00:30:12,400
but I guess we're just lucky because I mean I'd he wouldn't just

576
00:30:12,400 --> 00:30:13,500
imagine that right.

577
00:30:13,500 --> 00:30:16,200
Like presumably he didn't imagine that.

578
00:30:16,200 --> 00:30:19,300
It might crash, I mean he uses the tool himself so he must have seen

579
00:30:19,300 --> 00:30:22,500
it crash but we are not actually getting that crash.

580
00:30:22,500 --> 00:30:26,300
So we must just be not happening to hit the situation that he was

581
00:30:26,300 --> 00:30:28,900
hitting either through good fortune or because we're doing something

582
00:30:28,900 --> 00:30:29,800
slightly differently.

583
00:30:30,400 --> 00:30:32,600
So we're actually able to run with that on, which is kind of cool.

584
00:30:32,600 --> 00:30:36,200
But either way something to mention if you are using if you decide to

585
00:30:36,200 --> 00:30:39,800
use this tool as part of your development environment at home, be on

586
00:30:39,800 --> 00:30:44,000
the lookout for that because Fabien said that he crashed for him if

587
00:30:44,000 --> 00:30:44,500
you ran it.

588
00:30:44,500 --> 00:30:47,800
So you could only use it for analysis and then you try to turn it off.

589
00:30:47,800 --> 00:30:48,700
You want to run the program?

590
00:30:48,800 --> 00:30:52,100
We haven't seen that happen on the stream, but I don't want people to

591
00:30:52,100 --> 00:30:53,200
get caught off guard.

592
00:30:53,200 --> 00:30:55,600
If that turns out to be the case,

593
00:30:57,500 --> 00:31:03,500
So what I want to point out here is that we have sort of, we're caught

594
00:31:03,500 --> 00:31:07,300
between a little bit of a rock and a hard place if we want to get our

595
00:31:07,300 --> 00:31:08,400
cycle countdown.

596
00:31:08,700 --> 00:31:11,500
Now, at this point, it's unclear that we really need to get the cycle

597
00:31:11,500 --> 00:31:15,900
count down yet because at this point, it kind of looks like and, you

598
00:31:15,900 --> 00:31:18,500
know, we haven't really done a whole lot of looking at this yet, but

599
00:31:18,500 --> 00:31:22,800
it looks more like we are hitting memory problems in terms of the

600
00:31:22,800 --> 00:31:25,900
memory, throughput that we can get through in order to look up the

601
00:31:25,900 --> 00:31:26,800
textiles and to

602
00:31:26,900 --> 00:31:28,800
The pixels out.

603
00:31:29,000 --> 00:31:34,200
It looks like that is more of a thing than our block throughput.

604
00:31:34,400 --> 00:31:36,900
And the reason that I say that is because if you take a look at what

605
00:31:36,900 --> 00:31:40,000
this block, throughput is actually telling us even right now it's

606
00:31:40,000 --> 00:31:44,200
saying 97 cycles and if we take a look at that 97 Cycles,

607
00:31:47,000 --> 00:31:50,400
if I take a look at the 97 cycles and I divide that by the fact that

608
00:31:50,400 --> 00:31:52,200
we're doing for pixels, right?

609
00:31:53,500 --> 00:31:58,500
You can see that we get 24 Cycles out of that, right or 25 Cycles.

610
00:31:59,600 --> 00:32:02,500
And so if we're thinking that we should be getting 25 Cycles but we're

611
00:32:02,500 --> 00:32:04,000
actually seeing 40 Cycles.

612
00:32:05,100 --> 00:32:11,200
Then probably, there are some stalls in here, due to memory, but I

613
00:32:11,200 --> 00:32:15,200
want to take care of one thing first, that, that also that Fabien

614
00:32:15,200 --> 00:32:15,800
mentioned.

615
00:32:16,400 --> 00:32:20,400
He was saying that one of the things that the analyzer doesn't do is

616
00:32:20,400 --> 00:32:24,600
take Loops into account, and we do have one Loop in here, right, we've

617
00:32:24,600 --> 00:32:25,700
got this for, I Loop.

618
00:32:26,400 --> 00:32:29,300
And so when the analyzer is going through and looking at your code,

619
00:32:29,700 --> 00:32:31,600
it's not going to expand those Loops.

620
00:32:31,600 --> 00:32:34,700
So it's going to miss count the number of operations that you actually

621
00:32:34,900 --> 00:32:38,800
To do so, what I'm going to do, even though it's not necessarily

622
00:32:38,800 --> 00:32:41,900
having to do with optimization is I'm going to manually unroll this

623
00:32:41,900 --> 00:32:46,700
Loop since it's a very small Loop, so that there are no branches at

624
00:32:46,700 --> 00:32:50,800
all in the code that comes out of the compiler.

625
00:32:51,300 --> 00:32:55,400
And that way, what will be able to do is get a more accurate count out

626
00:32:55,400 --> 00:32:56,400
of that tool?

627
00:32:57,900 --> 00:32:58,600
So, here we go.

628
00:33:03,000 --> 00:33:05,200
There we got four pixels, right?

629
00:33:05,500 --> 00:33:10,300
And now, all I have to do is change the i in each of these to be

630
00:33:10,300 --> 00:33:11,200
whichever Pixel.

631
00:33:11,200 --> 00:33:14,800
It was supposed to have been on because that is the only thing that

632
00:33:14,800 --> 00:33:18,100
was actually varying in the loop was the I right?

633
00:33:18,100 --> 00:33:22,200
So there's the I here we go with the other eye.

634
00:33:28,200 --> 00:33:28,600
Go.

635
00:33:30,900 --> 00:33:32,400
and,

636
00:33:37,700 --> 00:33:40,000
Okay, so let's go ahead and run this.

637
00:33:42,300 --> 00:33:42,900
There we go.

638
00:33:44,300 --> 00:33:46,000
So that is now expanded.

639
00:33:46,700 --> 00:33:49,700
What's interesting about that is, it's also slower, which is a little

640
00:33:49,700 --> 00:33:51,000
bit odd, right?

641
00:33:51,000 --> 00:33:56,300
You can see the Cycles have gone up somewhat, which is a little

642
00:33:58,000 --> 00:33:59,200
A little bit unnerving.

643
00:34:00,000 --> 00:34:01,800
But all right.

644
00:34:02,300 --> 00:34:03,600
That's kind of weird, right?

645
00:34:03,700 --> 00:34:06,800
I guess it doesn't like these to be expanded out.

646
00:34:07,400 --> 00:34:10,699
I don't have to think about why that is exactly.

647
00:34:12,500 --> 00:34:16,500
I suppose one thing I should do as well is this is not a particularly

648
00:34:16,500 --> 00:34:18,600
good way to do this potentially for the compiler.

649
00:34:22,500 --> 00:34:25,400
I feel like we should probably try to reorganize this a little bit.

650
00:34:25,600 --> 00:34:28,400
In fact, I might just go ahead and do that right now, right?

651
00:34:29,600 --> 00:34:33,900
What I would kind of like to do is, I need to figure out some way to

652
00:34:33,900 --> 00:34:38,199
get these fetches stuff out, but I guess, I guess we can't really do

653
00:34:38,199 --> 00:34:39,400
much about that at the moment.

654
00:34:39,400 --> 00:34:43,199
So I'm going to go ahead and make these into individual fetches here,

655
00:34:43,900 --> 00:34:44,500
like so.

656
00:34:49,500 --> 00:34:50,100
There we go.

657
00:34:53,199 --> 00:34:54,000
A few stitches.

658
00:34:56,699 --> 00:34:58,300
I'm going to delete the asserts for now.

659
00:34:58,500 --> 00:35:06,600
We do not have any problems with the asserts, the moment again, I'm

660
00:35:06,600 --> 00:35:10,300
going to go ahead and add great our Texel guys here.

661
00:35:11,900 --> 00:35:12,200
Oops.

662
00:35:13,500 --> 00:35:14,400
See, all that.

663
00:35:15,400 --> 00:35:17,800
So we basically got for textile pointers.

664
00:35:19,700 --> 00:35:23,100
And that will be fetched zero.

665
00:35:25,800 --> 00:35:30,400
Oops, 1 2 3, 3 2 1.

666
00:35:30,800 --> 00:35:34,900
Okay, so those are all the fetches and then these guys are all off of

667
00:35:34,900 --> 00:35:36,400
each individual Texel pointer.

668
00:35:36,400 --> 00:35:42,400
So 0, 0, 0, 1 1, 1 2, 2, 2, 3, 3 3, right?

669
00:35:44,200 --> 00:35:44,900
What?

670
00:35:45,100 --> 00:35:45,900
What just happened?

671
00:35:46,000 --> 00:35:48,700
Oh, I was dumb.

672
00:35:50,000 --> 00:35:53,300
Got to get rid of the Open Bracket there, okay?

673
00:35:55,700 --> 00:35:56,800
So let's go and run that.

674
00:35:56,800 --> 00:35:57,700
Make sure that's running.

675
00:35:59,000 --> 00:35:59,800
It's crazy.

676
00:36:00,000 --> 00:36:01,900
How the cycle counts change, right?

677
00:36:01,900 --> 00:36:07,200
Like it's kind of a bizarre, that's that whole thing with stabilizer.

678
00:36:07,200 --> 00:36:08,700
I don't know if yours ever seen stabilizer.

679
00:36:08,700 --> 00:36:11,300
There's a thing which basically tries to randomize your code layout,

680
00:36:11,300 --> 00:36:15,000
to see what's actually affecting performance because there's so much

681
00:36:15,000 --> 00:36:16,400
variability nowadays in it.

682
00:36:16,400 --> 00:36:21,000
That the same exact code just offset where it is, aligned in memory,

683
00:36:21,000 --> 00:36:24,900
sometimes can change the performance and lead you to think that things

684
00:36:24,900 --> 00:36:27,700
are costing more when they're actually the same and so on and so

685
00:36:27,700 --> 00:36:28,000
forth.

686
00:36:28,000 --> 00:36:28,800
But all right.

687
00:36:28,800 --> 00:36:29,400
So anyway,

688
00:36:31,400 --> 00:36:34,900
What I want to do here, now is just grouped by sample Group, by what

689
00:36:34,900 --> 00:36:38,900
we're setting for the moment off to think about, if maybe there's a

690
00:36:38,900 --> 00:36:42,900
better way to do this, by just want to kind of get this organized a

691
00:36:42,900 --> 00:36:47,100
little bit more, so I can start to, think about it a little bit more

692
00:36:47,100 --> 00:36:50,700
carefully, because we've basically got a, we're trying to build some

693
00:36:50,700 --> 00:36:52,100
Cindy stuff here, right?

694
00:36:52,100 --> 00:36:56,300
We're trying to build, you know, Cindy registers that have the

695
00:36:56,300 --> 00:36:59,200
appropriate values in them for us to do our computations

696
00:37:00,100 --> 00:37:02,200
And so what I want to do is just change this so that I can actually

697
00:37:02,200 --> 00:37:07,600
do, okay, sample, a is just it, just an M&M set PS4, it's of the

698
00:37:07,600 --> 00:37:10,700
compiler can see very clearly what I'm actually trying to do, it's

699
00:37:10,700 --> 00:37:11,600
like oh okay.

700
00:37:11,900 --> 00:37:16,300
I just I just am trying to set one of these guys to be essentially

701
00:37:16,800 --> 00:37:19,500
each each thing of the textile pointer, right?

702
00:37:21,700 --> 00:37:25,500
now, I think this this is the

703
00:37:27,200 --> 00:37:27,800
There we go.

704
00:37:28,600 --> 00:37:30,700
This is the thing where it's always going to be the wrong one.

705
00:37:30,700 --> 00:37:35,300
But we one of the things that Fabienne suggested on Twitter a long

706
00:37:35,300 --> 00:37:38,200
time ago because I was complaining about is he was saying just always

707
00:37:38,200 --> 00:37:42,200
use set our he was like I don't know why they even have the other one,

708
00:37:42,500 --> 00:37:43,100
right?

709
00:37:44,100 --> 00:37:46,700
But basically I was complaining that set.

710
00:37:46,700 --> 00:37:54,400
PS always went the wrong way and and so yeah, I he was saying just use

711
00:37:54,400 --> 00:37:56,900
this one because that way it goes the correct way.

712
00:37:57,000 --> 00:37:58,300
You can see what I wanted was.

713
00:37:58,300 --> 00:38:03,000
I want the low value to go here and then the next I want memory order

714
00:38:03,000 --> 00:38:05,700
basically, and this one is in memory order.

715
00:38:05,700 --> 00:38:10,100
Whereas set is in register order, like register read out order and I

716
00:38:10,100 --> 00:38:11,600
it's just I find that super confusing.

717
00:38:12,200 --> 00:38:14,800
So anyway I'm going to I'm going to use set are so I can do it in that

718
00:38:14,800 --> 00:38:15,300
order.

719
00:38:15,600 --> 00:38:19,600
And I probably will convert to using that permanently because it's

720
00:38:19,600 --> 00:38:21,000
just the way I tend to think about it.

721
00:38:21,000 --> 00:38:22,300
And so I would just do it.

722
00:38:22,300 --> 00:38:26,100
Helped me make it would probably keep me from making some careless

723
00:38:26,100 --> 00:38:26,800
errors, right?

724
00:38:27,000 --> 00:38:31,400
Right where I forget that it's the wrong way or something, you know

725
00:38:31,500 --> 00:38:31,800
Oops.

726
00:38:33,000 --> 00:38:35,700
Why can't I go right kill rectangle.

727
00:38:36,800 --> 00:38:38,800
Yank rectangle.

728
00:38:40,400 --> 00:38:41,000
There we go.

729
00:38:43,500 --> 00:38:44,400
so,

730
00:38:49,300 --> 00:38:50,100
that's correct.

731
00:38:52,500 --> 00:38:53,200
Oh whoops.

732
00:38:53,400 --> 00:38:56,700
I guess I didn't quite mean to gank the rectangle in that way but all

733
00:38:56,700 --> 00:38:57,300
right.

734
00:38:57,500 --> 00:38:58,400
Will you live with that?

735
00:38:58,400 --> 00:38:58,900
That's fine.

736
00:39:00,100 --> 00:39:00,900
So, there we go.

737
00:39:03,000 --> 00:39:04,400
and,

738
00:39:14,100 --> 00:39:14,900
Let's get this one.

739
00:39:21,900 --> 00:39:22,200
Wow.

740
00:39:22,200 --> 00:39:23,900
I am sloppy typist tonight.

741
00:39:25,900 --> 00:39:29,900
I was really exhausted from, I hadn't been sleeping all that.

742
00:39:29,900 --> 00:39:34,000
Well, sometimes my sleep schedule gets really off, you know?

743
00:39:34,700 --> 00:39:41,100
And I just like, I have a hard time falling asleep, that's just how it

744
00:39:41,100 --> 00:39:41,300
is.

745
00:39:41,300 --> 00:39:42,100
I don't know why.

746
00:39:42,100 --> 00:39:46,100
I've always had a really hard time falling asleep, like I can't just

747
00:39:46,100 --> 00:39:51,900
go to sleep for whatever reason, and sometimes it's just like, I don't

748
00:39:51,900 --> 00:39:52,200
know.

749
00:39:52,500 --> 00:39:55,000
It's really annoying because I wish I could like, always keep on a

750
00:39:55,000 --> 00:39:55,300
regular.

751
00:39:55,600 --> 00:39:58,300
because it makes a lot of things easier for you obviously because, you

752
00:39:58,300 --> 00:40:02,700
know, the world operates at a particular time, but

753
00:40:03,800 --> 00:40:07,300
What the long and short of it is, is I have not been sleeping too

754
00:40:07,300 --> 00:40:10,500
well, because I've been getting up relatively early but I can't seem

755
00:40:10,500 --> 00:40:12,500
to fall asleep so I don't get that much sleep.

756
00:40:12,500 --> 00:40:16,500
So, I took a nap today just before the stream, actually, and still a

757
00:40:16,500 --> 00:40:17,300
little groggy

758
00:40:18,400 --> 00:40:22,800
But anyway, so I'm going to go ahead and get this all working

759
00:40:22,800 --> 00:40:25,800
properly, so I should have dinner.

760
00:40:25,800 --> 00:40:26,300
Wearing art.

761
00:40:26,300 --> 00:40:26,600
Curators.

762
00:40:26,600 --> 00:40:27,800
You went 3-2 to float.

763
00:40:27,800 --> 00:40:28,300
Oh, right.

764
00:40:28,400 --> 00:40:31,100
These are supposed to be set epi32 s, right?

765
00:40:31,200 --> 00:40:36,100
Hopefully there is one of those, yes, forgot where we're not setting

766
00:40:36,200 --> 00:40:37,100
packed singles.

767
00:40:37,500 --> 00:40:39,600
Pat, we're doing packed integers.

768
00:40:43,100 --> 00:40:43,500
Yeah.

769
00:40:45,400 --> 00:40:47,300
So, let's go ahead and run that.

770
00:40:50,900 --> 00:40:51,300
Okay.

771
00:40:53,100 --> 00:40:54,900
And it's so weird.

772
00:40:54,900 --> 00:40:57,300
You know it's just so weird.

773
00:40:58,300 --> 00:41:01,400
The cycle counts now, we're magically faster than when we started at

774
00:41:01,400 --> 00:41:02,300
40 Cycles.

775
00:41:03,900 --> 00:41:05,400
Yeah, so much variability.

776
00:41:05,400 --> 00:41:07,500
Like you think that's basically what the compiler would have already

777
00:41:07,500 --> 00:41:07,900
done.

778
00:41:08,000 --> 00:41:11,900
It's not so that's okay, that's maybe maybe it was hard for it to

779
00:41:11,900 --> 00:41:14,300
figure out that these were fusing like that.

780
00:41:15,200 --> 00:41:15,700
So, yeah.

781
00:41:16,200 --> 00:41:17,500
But anyway, so there we go.

782
00:41:19,100 --> 00:41:25,000
I don't know these all look relatively sane to me.

783
00:41:27,000 --> 00:41:28,800
Okay, I don't think we're doing anything, particularly stupid here.

784
00:41:28,800 --> 00:41:30,000
That's how we have to figure.

785
00:41:30,000 --> 00:41:33,200
That's how we have to access that texture memory.

786
00:41:33,500 --> 00:41:35,400
That seems pretty reasonable.

787
00:41:35,400 --> 00:41:37,900
There is one thing we could do here.

788
00:41:38,000 --> 00:41:42,700
I don't know if we want to do it but we'll we'll try it.

789
00:41:43,800 --> 00:41:46,000
And we'll see if it makes a little more sense.

790
00:41:49,300 --> 00:41:55,500
And like I said, I'm probably planning to go pretty long today, I'm in

791
00:41:55,500 --> 00:41:56,500
the mood to do some programming.

792
00:41:56,500 --> 00:41:59,700
I haven't programmed in like two days which

793
00:42:00,000 --> 00:42:04,500
Grumpy about, I mean, I did do a little bit but it was for a separate

794
00:42:04,500 --> 00:42:04,800
thing.

795
00:42:05,500 --> 00:42:09,000
So anyway, take a look at these here.

796
00:42:09,500 --> 00:42:12,000
In fact, one thing, I guess we want to do now.

797
00:42:12,000 --> 00:42:13,600
I might want to check out here.

798
00:42:13,600 --> 00:42:14,500
We've got o to on, right?

799
00:42:14,500 --> 00:42:18,500
Yeah, I want to take a look at that total throughput count now, as

800
00:42:18,500 --> 00:42:19,800
well, right?

801
00:42:20,500 --> 00:42:22,600
I just want to get that that read out.

802
00:42:26,200 --> 00:42:29,700
And so 103 Cycles.

803
00:42:29,900 --> 00:42:35,500
So now, at least in theory this one, at least in theory, this 103

804
00:42:35,500 --> 00:42:42,200
Cycles is actually the number of cycles that the thing takes because

805
00:42:42,200 --> 00:42:45,200
the loop is, is actually enrolled.

806
00:42:45,200 --> 00:42:49,000
So, it's accounting for all of the instructions that actually have to

807
00:42:49,000 --> 00:42:54,200
occur right before it would have, had a jump at estimate jump in here.

808
00:42:54,500 --> 00:42:54,600
And

809
00:42:54,800 --> 00:42:58,600
Test in the jump, it would not have actually counted how many times

810
00:42:58,600 --> 00:43:01,500
the loop it would have had to have gone and you can understand why,

811
00:43:01,500 --> 00:43:04,500
because most of the time the loop is not going to be over a constant

812
00:43:04,500 --> 00:43:04,800
number.

813
00:43:04,800 --> 00:43:08,400
Probably, it would be over a variable and it doesn't know what the

814
00:43:08,400 --> 00:43:12,200
variables value will be because, you know, it's looking at the code,

815
00:43:12,200 --> 00:43:16,200
it doesn't have the state of the thing at the time, so there's that

816
00:43:18,200 --> 00:43:21,100
Okay, I need some more soy milk.

817
00:43:21,100 --> 00:43:21,800
Hold on a second.

818
00:43:45,400 --> 00:43:47,300
I ran out and it's that's no good.

819
00:43:48,000 --> 00:43:48,400
Okay.

820
00:43:54,100 --> 00:43:55,600
Oh wait, you know did I say soy milk?

821
00:43:55,700 --> 00:43:56,600
I meant almond milk.

822
00:43:56,600 --> 00:43:58,400
Sorry, I need more.

823
00:43:58,400 --> 00:43:59,100
Almond milk.

824
00:44:00,400 --> 00:44:03,600
I do drink soy milk occasionally to, like, like in coffee.

825
00:44:03,600 --> 00:44:06,800
Like, if you go to a coffee shop, I'll get soy milk, sometimes.

826
00:44:06,800 --> 00:44:08,800
Sometimes they have almond milk, which is good too, but

827
00:44:12,000 --> 00:44:15,200
A lot of coffee shops originally only had soy milk for people like me

828
00:44:15,200 --> 00:44:16,500
who can't drink regular milk.

829
00:44:17,000 --> 00:44:17,500
All right.

830
00:44:18,800 --> 00:44:21,300
so anyway, what I wanted to see here, I was just thinking, like, oh,

831
00:44:21,300 --> 00:44:27,700
you know, maybe we could go through and we could, you know, since we

832
00:44:27,700 --> 00:44:31,600
know like you can see like these two guys here when they're actually

833
00:44:31,600 --> 00:44:35,500
doing these, these fetches, I feel like

834
00:44:39,700 --> 00:44:40,200
Well.

835
00:44:42,100 --> 00:44:44,600
Now you know what, I think that pretty much has to say the way it is.

836
00:44:44,700 --> 00:44:47,800
Now I think about it because it could be fetching any other textile,

837
00:44:47,800 --> 00:44:49,700
because of the way that it's stepping through there.

838
00:44:49,700 --> 00:44:53,500
So I don't know that there's really anything else we can do here when

839
00:44:53,500 --> 00:44:55,400
we actually load these things in

840
00:45:02,100 --> 00:45:04,300
When we actually load these things in, here's what I'm thinking.

841
00:45:04,700 --> 00:45:06,100
So you see how these guys here?

842
00:45:06,100 --> 00:45:07,900
We have tech support, no 0, 1 2 3.

843
00:45:07,900 --> 00:45:13,300
And then we immediately load txt file, pointer 0, 1, 2 3, + 1 integer

844
00:45:13,300 --> 00:45:13,800
over.

845
00:45:14,200 --> 00:45:18,600
I was wondering if we just did a load you on that, I was wondering if

846
00:45:18,600 --> 00:45:23,000
we could just load it and then load do a load once and then from just

847
00:45:23,000 --> 00:45:26,400
doing the load once grab out the two values that we needed.

848
00:45:30,100 --> 00:45:31,100
That's what I was thinking.

849
00:45:32,200 --> 00:45:34,400
And I'm not sure that that actually saves any time.

850
00:45:35,000 --> 00:45:37,900
Like I'm not sure that actually does anything for us.

851
00:45:39,600 --> 00:45:41,800
But that is what I was thinking.

852
00:45:41,800 --> 00:45:46,400
So like, you know, if we went over to the Blackboard, just to give you

853
00:45:46,900 --> 00:45:49,300
a little bit of a feel for what's going on there, right?

854
00:45:49,400 --> 00:45:51,200
If it's day 121

855
00:45:52,700 --> 00:45:56,500
What I was thinking was okay, so we know that when we load the thing,

856
00:45:56,500 --> 00:45:56,900
right?

857
00:45:56,900 --> 00:46:01,400
We know that when we load it, what we are doing is we're loading this

858
00:46:01,400 --> 00:46:04,700
textile and then this textile and then this text will end this

859
00:46:04,700 --> 00:46:05,200
textile.

860
00:46:06,100 --> 00:46:09,200
So this is 32 bits, this is 32 bits.

861
00:46:11,600 --> 00:46:14,600
So, I was thinking we could just load this in one load.

862
00:46:15,700 --> 00:46:16,200
Right.

863
00:46:16,800 --> 00:46:17,900
Just load it once.

864
00:46:19,100 --> 00:46:23,800
And when we load it once we then would have a register.

865
00:46:25,500 --> 00:46:29,200
That would have like, you know, the 0th one here, the one here, and

866
00:46:29,200 --> 00:46:29,800
then two things.

867
00:46:29,800 --> 00:46:32,200
We didn't care about here, right?

868
00:46:32,400 --> 00:46:36,700
We could also try to do a 64-bit load, which I think we can also do or

869
00:46:36,700 --> 00:46:37,900
we just load these two.

870
00:46:38,100 --> 00:46:41,800
I can't remember if that works well or not, but we could do those and

871
00:46:41,800 --> 00:46:44,200
then just grab it out of the register.

872
00:46:45,100 --> 00:46:46,200
I don't actually know why.

873
00:46:46,200 --> 00:46:49,500
That would be any faster I suspect that it probably wouldn't be, but

874
00:46:49,500 --> 00:46:52,300
it might save some kind of work where

875
00:46:55,900 --> 00:46:58,600
Where, you know, things didn't have to happen quite the same way.

876
00:47:01,700 --> 00:47:02,800
So we could take a look at that.

877
00:47:04,500 --> 00:47:04,900
Do the thing.

878
00:47:04,900 --> 00:47:05,200
You know what?

879
00:47:05,200 --> 00:47:06,300
We should probably take a look at.

880
00:47:06,300 --> 00:47:08,000
We should probably have up while we're doing this.

881
00:47:09,600 --> 00:47:12,400
Hail mm architecture.

882
00:47:12,500 --> 00:47:14,500
Wikimedia diagram.

883
00:47:18,200 --> 00:47:21,100
So this was kind of a handy diagram, someone pointed to the other day

884
00:47:22,400 --> 00:47:23,200
on the stream.

885
00:47:23,500 --> 00:47:26,400
And the thing that I kind of liked about this was, I could it actually

886
00:47:26,400 --> 00:47:28,600
let us see some stuff about what was going on.

887
00:47:28,600 --> 00:47:31,100
Like, here's the floating Point, Adder, on Port 1.

888
00:47:31,400 --> 00:47:34,300
Here's the floating-point multiply on Port 0, right?

889
00:47:34,700 --> 00:47:36,000
It also has like,

890
00:47:39,700 --> 00:47:43,300
Some other information like it has integer an integer ALU on each of

891
00:47:43,300 --> 00:47:45,600
these guys, which I assume that that integer.

892
00:47:45,600 --> 00:47:48,900
ALU means we could do integer ads on multiple ports or something like

893
00:47:48,900 --> 00:47:49,300
this.

894
00:47:50,300 --> 00:47:51,100
Not actually sure.

895
00:47:51,400 --> 00:47:55,400
So it would be cool if we could find something that actually had a

896
00:47:55,400 --> 00:47:57,200
really explicit listing.

897
00:47:57,600 --> 00:47:59,800
Because one of the things that's kind of annoying is

898
00:48:00,900 --> 00:48:05,800
Once we actually put an instruction in here, we can see which porticos

899
00:48:05,800 --> 00:48:06,200
to.

900
00:48:06,900 --> 00:48:09,800
But before we put an instruction in here, we have no idea which

901
00:48:09,800 --> 00:48:13,300
porticos to write because the Intel intrinsics guide.

902
00:48:13,300 --> 00:48:18,800
Like we were using before I write like this thing, the until

903
00:48:18,800 --> 00:48:22,900
intrinsics guy doesn't actually tell us anything about that.

904
00:48:23,600 --> 00:48:26,700
You know, we go in and look up one of these routines right?

905
00:48:26,700 --> 00:48:30,100
Look, I want to know how something works or whatever when I come in

906
00:48:30,100 --> 00:48:30,400
here.

907
00:48:30,800 --> 00:48:34,800
I don't actually know what what that's going to do, right?

908
00:48:34,800 --> 00:48:36,500
I don't know what port that's going to go to.

909
00:48:37,200 --> 00:48:41,200
So if I want to do like one of these guys or something, you know it

910
00:48:41,200 --> 00:48:44,800
doesn't tell me any information about what port that goes to, it'll

911
00:48:44,800 --> 00:48:48,700
tell me the throughput information, which is like kind of has a little

912
00:48:48,700 --> 00:48:52,500
bit of that knowledge of like, what it's going to do built into it.

913
00:48:53,200 --> 00:48:57,500
But it doesn't tell me anything about how it would issue in tandem

914
00:48:57,500 --> 00:48:58,600
with another instruction.

915
00:48:58,800 --> 00:49:00,500
So, like the ad and the multiply

916
00:49:00,700 --> 00:49:03,900
Both lists the throughput number but I don't it doesn't tell me

917
00:49:03,900 --> 00:49:06,800
whether the ad in the multiply could go together and therefore

918
00:49:06,800 --> 00:49:09,400
overlap, or whether they would have to be cereal because they use the

919
00:49:09,400 --> 00:49:11,100
same port, right?

920
00:49:12,100 --> 00:49:14,800
And so it would be nice to find and I suspect that this is something

921
00:49:14,800 --> 00:49:20,000
that I can sort of go off to the stream, push off to the stream here

922
00:49:22,300 --> 00:49:26,400
but basically like if there was, it would be pretty cool.

923
00:49:26,400 --> 00:49:30,000
If there was a resource similar to this one, that would allow you to

924
00:49:30,000 --> 00:49:36,000
quickly without having to page through a bunch of stuff quickly, get

925
00:49:36,000 --> 00:49:40,800
to the port assignment information so that you could see when you were

926
00:49:40,800 --> 00:49:41,600
using instructions.

927
00:49:41,900 --> 00:49:42,200
Ports.

928
00:49:42,200 --> 00:49:46,000
They were going to go to without having to actually first do them and

929
00:49:46,000 --> 00:49:48,200
then look and go like oh okay.

930
00:49:48,300 --> 00:49:50,200
Max is on Port 1.

931
00:49:50,900 --> 00:49:51,700
It would have been cool.

932
00:49:51,700 --> 00:49:54,700
If it had just been in here where I come down and go, maybe I'll send

933
00:49:54,700 --> 00:49:58,100
it to Intel and be like please because you can imagine adding to this

934
00:49:58,100 --> 00:50:02,000
tool a thing which basically like you know I mean in fact they already

935
00:50:02,000 --> 00:50:05,100
kind of have since they already have it / architecture, they could

936
00:50:05,100 --> 00:50:07,400
just have Port maybe.

937
00:50:08,700 --> 00:50:11,000
And you know, I feel like that would be just your Good extra piece of

938
00:50:11,000 --> 00:50:11,700
information to have

939
00:50:11,800 --> 00:50:12,400
That is all.

940
00:50:16,200 --> 00:50:20,200
Anyway, maybe I'll send them at, who knows?

941
00:50:20,200 --> 00:50:21,000
Maybe they'll listen.

942
00:50:22,100 --> 00:50:27,600
Until it's a, you know, they have developer relations, they might be

943
00:50:27,600 --> 00:50:29,000
like, oh yeah, good idea.

944
00:50:29,000 --> 00:50:29,600
Let's do it.

945
00:50:30,200 --> 00:50:32,400
You never know anyway.

946
00:50:33,900 --> 00:50:36,100
So, the thing I was thinking is like, yeah, when we're doing these

947
00:50:36,100 --> 00:50:39,500
loads, I do wonder if the, you know, if the compiler is actually doing

948
00:50:39,500 --> 00:50:44,000
the best job of managing those, and if there's something, if there's

949
00:50:44,000 --> 00:50:47,500
something we could do to help it, understand what it is that we're

950
00:50:47,500 --> 00:50:50,300
doing better so that it can produce better code.

951
00:50:50,300 --> 00:50:52,200
And I don't actually know if that's true.

952
00:50:52,200 --> 00:50:56,400
In fact, I don't really know what it's doing at the moment so it is

953
00:50:56,800 --> 00:50:59,800
possibly the case that we should, you know, try to take a look at

954
00:51:00,000 --> 00:51:03,300
It's doing those loads and figure out what's going on.

955
00:51:03,300 --> 00:51:06,000
So I suspect that that is what's going on here.

956
00:51:06,600 --> 00:51:13,200
And you can see this doing like a bunch of these mobs here and it

957
00:51:13,200 --> 00:51:17,500
looks like just looking through it here.

958
00:51:18,300 --> 00:51:20,300
Just looking through it here.

959
00:51:23,000 --> 00:51:25,700
Move dqa X of m word.

960
00:51:25,700 --> 00:51:27,400
So those guys

961
00:51:29,000 --> 00:51:30,500
Yeah.

962
00:51:30,500 --> 00:51:33,400
Are the four so I feel like that is what Square?

963
00:51:33,400 --> 00:51:35,000
We're this is what it looks like to me.

964
00:51:35,300 --> 00:51:43,000
It looks like This Is Us loading in, you know, us loading in all of

965
00:51:43,000 --> 00:51:44,900
our of our textual data there.

966
00:51:45,400 --> 00:51:47,900
And let's take a look at that.

967
00:51:47,900 --> 00:51:49,200
If that holds any water.

968
00:51:50,100 --> 00:51:51,200
Let's see here.

969
00:51:51,700 --> 00:51:53,400
It's doing the unpack.

970
00:51:54,500 --> 00:51:56,500
It's doing p.m.

971
00:51:56,500 --> 00:51:57,300
pack load.

972
00:51:57,300 --> 00:52:05,800
Q LD Q, PS r.

973
00:52:06,900 --> 00:52:08,900
LD and then stirring the p.

974
00:52:08,900 --> 00:52:13,100
And so yeah I think I think that is what this is.

975
00:52:14,700 --> 00:52:17,600
So if it's doing that, what it's doing is it's doing a bunch of moved.

976
00:52:17,600 --> 00:52:18,900
He's how many's is doing swing 1.

977
00:52:18,900 --> 00:52:25,700
2 3 4 5 6 7 8 9 10 11 12 13.

978
00:52:31,500 --> 00:52:33,500
Looks like that's all of them, right?

979
00:52:35,100 --> 00:52:35,900
although,

980
00:52:39,200 --> 00:52:42,000
Well, we've still got some of these guys up here.

981
00:52:45,100 --> 00:52:48,200
I don't know because we're not doing any loads up here.

982
00:52:48,200 --> 00:52:52,700
We're just doing the loads in here and then everything else doesn't

983
00:52:52,700 --> 00:52:57,500
actually have to do any loads till we get down to actually doing the

984
00:52:57,500 --> 00:52:59,700
load for the destination, right?

985
00:52:59,800 --> 00:53:04,500
The destination is the only other load that we do at, all right?

986
00:53:04,500 --> 00:53:05,400
These guys here,

987
00:53:09,300 --> 00:53:11,800
So I don't know, I don't know.

988
00:53:12,900 --> 00:53:13,900
It looks like

989
00:53:16,500 --> 00:53:22,200
If it's shifting by 8 there, it looks like it's doing this operation.

990
00:53:24,400 --> 00:53:26,600
And it looks like it's doing that.

991
00:53:30,200 --> 00:53:31,700
Directly after mmm.

992
00:53:32,900 --> 00:53:34,400
This is hard for me to read.

993
00:53:34,900 --> 00:53:37,700
This is largely probably due to the fact that I don't spend a lot of

994
00:53:37,700 --> 00:53:39,100
time reading this kind of code.

995
00:53:40,300 --> 00:53:44,500
So it's harder for me to kind of like parse through it quickly but

996
00:53:46,700 --> 00:53:47,400
I'm not sure.

997
00:53:47,400 --> 00:53:48,700
So I don't know p.m.

998
00:53:48,700 --> 00:53:50,100
pack ldq.

999
00:53:51,700 --> 00:53:53,600
Can we take a look at P unpack?

1000
00:53:53,600 --> 00:53:54,300
Ldq?

1001
00:53:56,300 --> 00:53:59,400
Because I'm not familiar with all the instruction.

1002
00:54:00,000 --> 00:54:04,100
By name, but that's not something we called explicitly if I'm not

1003
00:54:04,100 --> 00:54:05,700
mistaken, right?

1004
00:54:05,800 --> 00:54:12,600
That is actually an M&M unpack intrinsic, which if I, if I remember

1005
00:54:12,600 --> 00:54:14,800
correctly we don't use right?

1006
00:54:15,800 --> 00:54:20,400
So the compiler has decided to do the unpack itself.

1007
00:54:20,400 --> 00:54:23,000
It felt like that was the right way to implement this.

1008
00:54:23,300 --> 00:54:24,100
So,

1009
00:54:25,500 --> 00:54:30,300
That suggests to me that it actually.

1010
00:54:30,400 --> 00:54:35,200
So it kind of redid how that code, how our code, how it thought, our

1011
00:54:35,200 --> 00:54:37,200
code should work, right?

1012
00:54:37,500 --> 00:54:39,200
It's unpacking the load.

1013
00:54:39,200 --> 00:54:43,200
So you know we're if we're loading one of these guys in its unpacking

1014
00:54:43,200 --> 00:54:43,900
that load.

1015
00:54:45,500 --> 00:54:46,000
Where do we got?

1016
00:54:46,000 --> 00:54:49,600
There we go, it's unpacking that load.

1017
00:54:51,200 --> 00:54:52,100
and then,

1018
00:54:53,300 --> 00:54:54,800
It just goes ahead and unpacks.

1019
00:54:56,000 --> 00:54:56,800
It twice.

1020
00:54:58,700 --> 00:55:01,000
Right, so you can see here.

1021
00:55:01,000 --> 00:55:02,600
It's loading off the pointer.

1022
00:55:03,800 --> 00:55:04,800
Into XM m 1.

1023
00:55:06,200 --> 00:55:10,400
It's loading another one in on top of it, but first it, unpacks that,

1024
00:55:10,600 --> 00:55:12,000
then it unpacks it again.

1025
00:55:12,100 --> 00:55:14,200
And it's got xmm 14.

1026
00:55:14,200 --> 00:55:17,900
Now is the result of a double unpack, right?

1027
00:55:18,900 --> 00:55:20,500
So the double unpack,

1028
00:55:21,700 --> 00:55:25,100
The next time it takes a look at 14.

1029
00:55:26,300 --> 00:55:28,300
Is here when it actually does the shift.

1030
00:55:29,300 --> 00:55:33,200
So just trying to reverse engineer, what it's doing there, right?

1031
00:55:33,700 --> 00:55:34,400
It looks like that.

1032
00:55:34,400 --> 00:55:35,600
Once it loads something.

1033
00:55:37,200 --> 00:55:41,200
It is actually going ahead and jumping straight to here, right?

1034
00:55:41,200 --> 00:55:42,700
So sample A8.

1035
00:55:42,900 --> 00:55:47,300
So the way that it chooses to produce sample, a which we have told it

1036
00:55:47,300 --> 00:55:50,700
to do this way is to do a load.

1037
00:55:52,000 --> 00:55:53,100
and,

1038
00:55:55,100 --> 00:55:56,300
To unpacks.

1039
00:55:57,800 --> 00:55:58,900
Am I missing something?

1040
00:55:59,700 --> 00:56:01,200
Here's the load into XM m.

1041
00:56:01,200 --> 00:56:02,800
1 it unpacks X-Men.

1042
00:56:02,800 --> 00:56:03,900
1 to XM m 2

1043
00:56:05,300 --> 00:56:07,400
Unpack some into XM M14.

1044
00:56:08,600 --> 00:56:11,800
X-Men 14 is never touched again.

1045
00:56:14,400 --> 00:56:15,500
Oh no, there it is.

1046
00:56:16,700 --> 00:56:17,200
It copies.

1047
00:56:17,200 --> 00:56:18,300
It over 20.

1048
00:56:20,000 --> 00:56:20,500
Right.

1049
00:56:21,700 --> 00:56:23,900
And you can see why that is because it has to use it twice.

1050
00:56:23,900 --> 00:56:25,400
I guess that makes some sense.

1051
00:56:26,100 --> 00:56:30,500
It copies it over 20 it shifts one of them down, it does the ad with 0

1052
00:56:30,500 --> 00:56:31,000
and 1?

1053
00:56:31,000 --> 00:56:34,500
It does the and I saw the and with 0 and 1 it does the and with 14 and

1054
00:56:34,500 --> 00:56:34,800
1.

1055
00:56:35,000 --> 00:56:36,800
So that's doing this right here.

1056
00:56:38,600 --> 00:56:39,100
Right?

1057
00:56:40,600 --> 00:56:42,500
Because I'm assuming that X mm0 in.

1058
00:56:42,500 --> 00:56:45,900
There is what contains the mask I'm sorry.

1059
00:56:45,900 --> 00:56:50,700
X-Men, 1 is what contains the mask ff0000 FF, right?

1060
00:56:50,700 --> 00:56:52,500
Because it's doing that and with both of those.

1061
00:56:52,900 --> 00:56:58,500
So I'm assuming that somewhere in here it loaded up xmm one with with

1062
00:56:58,500 --> 00:56:59,800
that value and

1063
00:57:00,000 --> 00:57:04,400
Assuming that that's probably, you know, where's where's that going to

1064
00:57:04,400 --> 00:57:04,600
be?

1065
00:57:04,700 --> 00:57:07,700
It's going to be the last time we touch texting one, it's that

1066
00:57:08,800 --> 00:57:11,400
And so this right here is called, Rip relative addressing.

1067
00:57:12,100 --> 00:57:15,800
Also, I believe again, I'm not the Assembly Language guy.

1068
00:57:17,100 --> 00:57:21,000
Ask Fabien or find another Assembly.

1069
00:57:21,000 --> 00:57:23,600
Language expert, if you want to, I feel bad where you're forcing

1070
00:57:23,600 --> 00:57:25,200
Fabien, to do all our homework for us.

1071
00:57:27,300 --> 00:57:28,600
but as long as he's willing,

1072
00:57:29,700 --> 00:57:32,400
He's a good person to ask, so we'll take advantage of it.

1073
00:57:35,300 --> 00:57:43,200
So anyway, basically what this is is it's a cheap way to do extra

1074
00:57:43,200 --> 00:57:47,300
addressing essentially the instruction pointer, like where you are in

1075
00:57:47,300 --> 00:57:52,500
the code, you can actually do loads off of that and it makes it easier

1076
00:57:52,500 --> 00:57:53,800
to load in constant space.

1077
00:57:53,800 --> 00:57:55,300
Clay is what that boils down to.

1078
00:57:55,300 --> 00:57:59,300
And so this I assume right here is what's loading in the FF 00 FF

1079
00:57:59,500 --> 00:58:01,000
Then it's going to end with that.

1080
00:58:01,700 --> 00:58:06,500
So it basically just did unpack LD cues and two of those, it looks

1081
00:58:06,500 --> 00:58:09,400
like it's doing two of those per sample.

1082
00:58:11,100 --> 00:58:12,000
I'm sorry, /.

1083
00:58:12,200 --> 00:58:15,700
/ load per fetch instruction, right?

1084
00:58:18,600 --> 00:58:20,800
And to be honest, I don't really understand

1085
00:58:26,600 --> 00:58:28,100
I don't really understand how that's working.

1086
00:58:30,400 --> 00:58:32,300
I guess it's doing it as a shuffle.

1087
00:58:34,100 --> 00:58:40,000
So, the unpack, presumably, it's loaded xmm to already.

1088
00:58:43,100 --> 00:58:44,400
Where is X mm2?

1089
00:58:46,100 --> 00:58:47,600
X-Men 2.

1090
00:58:52,500 --> 00:58:53,000
Right there.

1091
00:58:55,300 --> 00:59:00,400
Okay, so extra time to Got Loaded off of our nine, which I'm just

1092
00:59:00,400 --> 00:59:03,200
going to go ahead and assume is another one of our texture pointers.

1093
00:59:04,600 --> 00:59:07,100
One of the one of the cat an address into the texture.

1094
00:59:08,100 --> 00:59:09,500
So it's taking XM m 2.

1095
00:59:10,400 --> 00:59:10,900
Its P.

1096
00:59:10,900 --> 00:59:12,600
Unpacking it out of X-Men, 1.

1097
00:59:15,300 --> 00:59:17,000
It's should be worse.

1098
00:59:17,000 --> 00:59:17,900
Is it p.m.

1099
00:59:17,900 --> 00:59:18,400
pack me out?

1100
00:59:18,400 --> 00:59:20,800
We covered, we covered the impacts of for, with a kind of internally

1101
00:59:20,800 --> 00:59:21,300
values.

1102
00:59:21,400 --> 00:59:26,200
So it's interleaving that xmm one load with the X-Men, to load, and

1103
00:59:26,200 --> 00:59:27,000
then it's going to X.

1104
00:59:27,600 --> 00:59:32,100
Presumably XM, M14 was loaded somewhere up here as well.

1105
00:59:32,100 --> 00:59:32,700
There it is.

1106
00:59:34,400 --> 00:59:37,600
So I guess what that suggests to me?

1107
00:59:38,800 --> 00:59:43,900
Is it the compiler is kind of already doing a very smart thing for

1108
00:59:43,900 --> 00:59:49,200
this like it's actually doing it as an interleave which would make it

1109
00:59:49,200 --> 00:59:52,400
way more efficient than what we wrote here.

1110
00:59:52,900 --> 00:59:56,600
So I'm going to go ahead and say that actually, this is okay.

1111
00:59:56,700 --> 00:59:59,800
It looks like the compiler is actually doing pretty smart job.

1112
01:00:00,000 --> 01:00:04,400
Turning those into unpacks which is what we would have had to do to

1113
01:00:04,400 --> 01:00:05,700
make them more efficient anyway.

1114
01:00:06,900 --> 01:00:07,400
Yeah.

1115
01:00:08,100 --> 01:00:09,400
So so that was good.

1116
01:00:09,400 --> 01:00:10,200
That was worth.

1117
01:00:10,200 --> 01:00:12,300
That was worth looking into because now we know we really don't have

1118
01:00:12,300 --> 01:00:13,200
to play with that.

1119
01:00:13,500 --> 01:00:16,100
I don't think I could think of a better way to do it than to unpack.

1120
01:00:16,100 --> 01:00:17,200
That sounds pretty good.

1121
01:00:20,100 --> 01:00:20,600
Yeah.

1122
01:00:21,700 --> 01:00:24,800
So I think this is fine, then I think that's okay.

1123
01:00:25,300 --> 01:00:30,100
I think we can be reasonably happy with that this stuff.

1124
01:00:30,100 --> 01:00:32,000
On the other hand, I don't really know much about.

1125
01:00:32,000 --> 01:00:35,900
Unfortunately this is something that I've never really worked with

1126
01:00:35,900 --> 01:00:36,900
before on SSE.

1127
01:00:37,800 --> 01:00:43,500
And so specifically this stuff right here the the fetching in order to

1128
01:00:43,500 --> 01:00:47,300
do the fetch, we have this problem where

1129
01:00:50,500 --> 01:00:50,900
oh,

1130
01:00:52,500 --> 01:00:55,300
Well, so there's a couple stupid things.

1131
01:00:59,000 --> 01:01:02,900
The compiler may have already figured this out but I'll interrupt,

1132
01:01:02,900 --> 01:01:06,800
what I was about to say to point out the fact that we multiply by

1133
01:01:06,800 --> 01:01:12,100
texture pitched for wide manually, which is stupid and we X size of

1134
01:01:12,100 --> 01:01:14,900
you in 30 to manually for Y which is stupid.

1135
01:01:14,900 --> 01:01:19,300
So hopefully everyone on the stream at this point could figure out

1136
01:01:19,300 --> 01:01:20,700
without me having to say it.

1137
01:01:21,600 --> 01:01:23,800
But really how we should have done this was.

1138
01:01:23,800 --> 01:01:27,000
Before we did that we should have done the multiply wide if we're

1139
01:01:27,000 --> 01:01:28,700
going to multiply each of these values by

1140
01:01:28,800 --> 01:01:29,100
Our pitch.

1141
01:01:29,100 --> 01:01:31,400
We should just I'm sorry, each of these values by texture pitch.

1142
01:01:31,400 --> 01:01:34,600
We should just multiply fetch y 4x B, actually pitch and then extract

1143
01:01:34,600 --> 01:01:38,600
it afterwards right now, I don't know whether the compiler already did

1144
01:01:38,600 --> 01:01:39,200
that or not.

1145
01:01:40,300 --> 01:01:41,200
So it might be that.

1146
01:01:41,200 --> 01:01:47,200
It was kind of cleaning up our stupidity, but I feel like we should

1147
01:01:47,200 --> 01:01:51,800
probably just go ahead and put put in that just in case.

1148
01:01:52,000 --> 01:01:53,300
And let's take a look here.

1149
01:01:53,800 --> 01:01:54,500
One more time.

1150
01:01:55,100 --> 01:01:56,900
Oops, we compile this.

1151
01:01:58,100 --> 01:02:00,700
Yeah, let's take a look at that one more time.

1152
01:02:02,400 --> 01:02:03,200
Go up in here.

1153
01:02:04,400 --> 01:02:06,400
So right now we're at a hundred and three Cycles.

1154
01:02:06,400 --> 01:02:09,800
I'm just going to go ahead and do that multiply here.

1155
01:02:10,300 --> 01:02:16,100
So, this is a mmm Mo epi32, right?

1156
01:02:16,500 --> 01:02:21,500
And I want to multiply fetch X for X.

1157
01:02:22,000 --> 01:02:24,000
I want to multiply that by texture pitch.

1158
01:02:24,600 --> 01:02:25,200
Oops, sorry.

1159
01:02:25,600 --> 01:02:28,200
Sighs of you, you're in 32, right?

1160
01:02:29,300 --> 01:02:31,300
And you know what I guess.

1161
01:02:32,200 --> 01:02:37,700
Sighs of you in 32 though, I don't need to multiply because I know

1162
01:02:37,700 --> 01:02:42,700
that that's I know that size of you and 32 is is just a shift.

1163
01:02:43,200 --> 01:02:45,900
So I could do it by an immediate so we don't have to use another

1164
01:02:45,900 --> 01:02:49,100
register for that if that makes sense.

1165
01:02:49,200 --> 01:02:53,800
Meaning, I know that that to get something to go up by the size of a

1166
01:02:53,800 --> 01:02:54,900
32-bit integer.

1167
01:02:54,900 --> 01:02:57,200
I really only have to shift it up by.

1168
01:02:58,200 --> 01:02:58,700
Bye.

1169
01:03:01,300 --> 01:03:03,400
This is the power of to write this is for.

1170
01:03:03,700 --> 01:03:04,900
So it's 2 to the second power.

1171
01:03:04,900 --> 01:03:09,600
So I should be able to shift it up by 2, if that makes sense and that,

1172
01:03:09,600 --> 01:03:10,700
that would give me the value.

1173
01:03:11,000 --> 01:03:14,900
So if I want to, I could do the shift left by immediate and just shift

1174
01:03:14,900 --> 01:03:17,900
it up and that's, you know, that would get rid.

1175
01:03:18,000 --> 01:03:19,300
I guess is what I'm saying of this.

1176
01:03:21,700 --> 01:03:22,200
Right.

1177
01:03:24,000 --> 01:03:24,700
So like that.

1178
01:03:24,800 --> 01:03:26,100
I don't know why I deleted that.

1179
01:03:26,100 --> 01:03:27,200
I gotta keep it in here for now.

1180
01:03:27,200 --> 01:03:29,500
We sell to extract these but so, yeah.

1181
01:03:29,500 --> 01:03:31,800
So if I was to do that, right?

1182
01:03:31,800 --> 01:03:37,800
That should give me what I needed in terms of stepping, right?

1183
01:03:39,900 --> 01:03:40,700
So, there we go.

1184
01:03:42,000 --> 01:03:44,800
And then similarly, this guy right here should have just done.

1185
01:03:45,000 --> 01:03:45,800
This should have just done.

1186
01:03:45,800 --> 01:03:48,900
Fetch y, 4x equals m.

1187
01:03:48,900 --> 01:03:54,100
M Mo PS, and that should be the texture pitch that we've got there,

1188
01:03:54,200 --> 01:03:54,600
right?

1189
01:03:54,900 --> 01:04:02,300
So, texture pitch for X for x and fetch, y for x, and now, those are

1190
01:04:02,300 --> 01:04:02,700
gone.

1191
01:04:03,800 --> 01:04:09,500
and so yes, so the compiler May well have oh God, you know it's just

1192
01:04:09,500 --> 01:04:10,300
like it's like

1193
01:04:11,600 --> 01:04:14,200
It's like Casey's stupid weekend here, isn't it?

1194
01:04:14,600 --> 01:04:21,000
I mean, well, it's AA run stupid in weekend but right I mean what's

1195
01:04:21,000 --> 01:04:21,800
going on here?

1196
01:04:22,800 --> 01:04:27,300
That's a for why Dad people like why am I making the compiler have to

1197
01:04:27,300 --> 01:04:28,000
do that?

1198
01:04:30,300 --> 01:04:31,600
When it shouldn't have to.

1199
01:04:34,700 --> 01:04:39,700
Should at least give it the wide stuff so they can see it as wide.

1200
01:04:39,700 --> 01:04:44,500
I feel like that would generally be better anyway so yeah and this is

1201
01:04:44,500 --> 01:04:45,600
why did I do PS?

1202
01:04:45,800 --> 01:04:54,900
And then add epi32, alright for x or y?

1203
01:04:56,100 --> 01:04:56,600
Yeah.

1204
01:04:58,500 --> 01:05:02,000
You know, it sometimes takes a little while to see each individual

1205
01:05:02,000 --> 01:05:02,300
things.

1206
01:05:02,300 --> 01:05:08,000
You should be collapsing, you know, I don't claim to be an

1207
01:05:08,000 --> 01:05:12,200
optimization guy and it's true.

1208
01:05:13,800 --> 01:05:19,200
So let's go ahead and mmm set, one epi32 that so that we have that guy

1209
01:05:19,200 --> 01:05:19,400
there.

1210
01:05:19,400 --> 01:05:20,400
We can probably clean up some of these.

1211
01:05:20,400 --> 01:05:22,500
Some of these are probably just not even used anymore because we

1212
01:05:22,800 --> 01:05:23,900
Shuffle stuff around.

1213
01:05:24,400 --> 01:05:27,800
But anyway, texture if it's for X, that's just extra pitch.

1214
01:05:30,900 --> 01:05:33,400
Oops, texture pitch.

1215
01:05:36,000 --> 01:05:36,700
Like so.

1216
01:05:38,200 --> 01:05:42,000
And I feel like I don't want to jump the gun here but I feel like what

1217
01:05:42,000 --> 01:05:44,000
did I do wrong cannot convert.

1218
01:05:44,000 --> 01:05:45,600
Yes, that's true, sorry about that.

1219
01:05:49,500 --> 01:05:51,900
I feel like there's plenty of other stuff we could do here.

1220
01:05:54,000 --> 01:05:54,700
looks like,

1221
01:05:55,900 --> 01:05:58,100
We still need that.

1222
01:05:59,200 --> 01:05:59,800
Hmm.

1223
01:06:00,000 --> 01:06:02,900
I don't know if we want to really extract the only thing because

1224
01:06:02,900 --> 01:06:04,500
otherwise we could get rid of that as well.

1225
01:06:04,500 --> 01:06:07,900
But anyway, texture catch fish.

1226
01:06:08,300 --> 01:06:08,800
All right.

1227
01:06:10,200 --> 01:06:13,800
So anyway, there's another thing we could still do there, I suppose.

1228
01:06:14,000 --> 01:06:15,000
Oh that doesn't look pretty.

1229
01:06:16,200 --> 01:06:17,500
That doesn't look pretty at all.

1230
01:06:18,600 --> 01:06:19,800
What I what I mess up there.

1231
01:06:29,800 --> 01:06:30,500
so,

1232
01:06:34,600 --> 01:06:40,800
Shift left by 2 of fetch x 4x.

1233
01:06:42,900 --> 01:06:48,700
And then Molly pi32 of fetch y 4x by texture pitch.

1234
01:06:49,400 --> 01:06:50,500
4X

1235
01:06:54,000 --> 01:06:54,800
Mmm-hmm.

1236
01:06:59,400 --> 01:06:59,800
Excuse me.

1237
01:07:02,700 --> 01:07:05,100
What am I missing here?

1238
01:07:07,400 --> 01:07:08,400
I'm not asking anything.

1239
01:07:08,600 --> 01:07:11,500
I just forgot to get rid of the weight.

1240
01:07:12,000 --> 01:07:12,700
That's correct.

1241
01:07:15,400 --> 01:07:15,600
Yeah.

1242
01:07:15,600 --> 01:07:16,600
So what am I missing here?

1243
01:07:20,000 --> 01:07:23,800
This should multiply 4X by for although I mean well you know what, why

1244
01:07:23,800 --> 01:07:26,500
bother guessing might as well just step through

1245
01:07:27,800 --> 01:07:28,600
Check it out.

1246
01:07:29,900 --> 01:07:30,800
We'll see what goes on.

1247
01:07:31,500 --> 01:07:31,900
Alright.

1248
01:07:31,900 --> 01:07:32,500
So

1249
01:07:33,700 --> 01:07:35,400
if we go in here,

1250
01:07:37,000 --> 01:07:43,800
And we are we yeah if we go in here, let's find out what happens.

1251
01:07:45,000 --> 01:07:50,300
So we have our fetch x 4x.

1252
01:07:51,800 --> 01:07:55,600
And I want to see that as I 32s.

1253
01:07:58,400 --> 01:07:59,900
And 128 II.

1254
01:07:59,900 --> 01:08:03,600
Oops, I'm going to mate, I have 32.

1255
01:08:05,500 --> 01:08:07,300
11 12, 13 and 14.

1256
01:08:08,000 --> 01:08:10,100
Are the values that it looks like we are getting there.

1257
01:08:16,899 --> 01:08:20,500
I guess that's kind of commonly going to be the case for rectilinear

1258
01:08:20,500 --> 01:08:20,899
Blitz.

1259
01:08:20,899 --> 01:08:23,700
They'll often go in series if they're not rotated, right?

1260
01:08:23,800 --> 01:08:24,500
That makes sense.

1261
01:08:25,500 --> 01:08:26,500
Multiplying by 2

1262
01:08:28,200 --> 01:08:30,700
I'm Sorry by for that.

1263
01:08:30,700 --> 01:08:33,800
Look does look like it X for, right.

1264
01:08:35,000 --> 01:08:36,600
I feel like so fetch.

1265
01:08:36,600 --> 01:08:37,399
Why?

1266
01:08:38,800 --> 01:08:39,399
Nice.

1267
01:08:41,500 --> 01:08:45,300
Fetch y for X 0 for X.

1268
01:08:45,700 --> 01:08:47,300
I'm going to get II 32.

1269
01:08:49,100 --> 01:08:51,500
These are all from the zeroth, row of the texture.

1270
01:08:51,500 --> 01:08:52,600
Also not surprising.

1271
01:08:53,800 --> 01:08:55,500
So we won't find out much about this.

1272
01:08:57,000 --> 01:08:59,800
And so, then when we get to the fetch,

1273
01:09:00,000 --> 01:09:00,800
Xxxx.

1274
01:09:03,899 --> 01:09:05,899
And 128 II 32.

1275
01:09:08,200 --> 01:09:09,700
Let's see what we get here.

1276
01:09:12,399 --> 01:09:14,800
So that looks like what we would want, right?

1277
01:09:14,800 --> 01:09:16,500
Those are the the pixels.

1278
01:09:18,300 --> 01:09:24,899
So that looks correct to me.

1279
01:09:27,800 --> 01:09:28,300
Right.

1280
01:09:35,800 --> 01:09:38,399
I don't quite see what the problem is there.

1281
01:09:57,800 --> 01:09:58,600
All right.

1282
01:09:58,600 --> 01:10:01,800
Well, let's step through and do a why that's not zero, see if maybe

1283
01:10:01,800 --> 01:10:04,400
something obvious is going around because it's hard to say,

1284
01:10:08,200 --> 01:10:10,200
Hard to say about that I suppose.

1285
01:10:13,000 --> 01:10:13,800
Is that right?

1286
01:10:13,800 --> 01:10:17,400
Let me look, get to some kind of a why that's that's not at zero.

1287
01:10:19,900 --> 01:10:20,500
There we go.

1288
01:10:21,900 --> 01:10:26,900
So we come through here and we do our, our fetch y 4x.

1289
01:10:33,400 --> 01:10:34,000
There we go.

1290
01:10:35,500 --> 01:10:37,800
And I want to take a look at what texture pitch.

1291
01:10:38,500 --> 01:10:39,400
We're exes.

1292
01:10:40,600 --> 01:10:43,500
And that's M 128 II 32.

1293
01:10:43,600 --> 01:10:43,900
Oops.

1294
01:10:47,100 --> 01:10:48,800
there's art extra pitch, 324

1295
01:10:49,900 --> 01:10:54,800
So now we're going to do the multiplication of fetch y 4x and texture

1296
01:10:54,800 --> 01:10:55,400
pitch.

1297
01:10:56,200 --> 01:10:57,000
4X

1298
01:10:59,500 --> 01:11:00,600
Know what I just realized.

1299
01:11:01,600 --> 01:11:02,900
That might be my problem.

1300
01:11:04,000 --> 01:11:06,600
Shouldn't just have a mole low and mole high in it.

1301
01:11:10,900 --> 01:11:12,400
We'll check, I'll check that out.

1302
01:11:12,400 --> 01:11:13,000
In just one second.

1303
01:11:13,000 --> 01:11:14,600
I'll let me go ahead and stop this here.

1304
01:11:15,100 --> 01:11:17,500
So fetch y 4x is this guy right here.

1305
01:11:17,500 --> 01:11:21,100
It's got ones in it so it should come out to all those and it doesn't.

1306
01:11:21,100 --> 01:11:23,100
That's the problem, duh.

1307
01:11:23,500 --> 01:11:23,800
All right.

1308
01:11:23,800 --> 01:11:27,100
So what mmm that was just me being Hasty and not thinking it through,

1309
01:11:27,700 --> 01:11:33,800
MMO epi32 does not do, integer times integer, does 32-bit by 32-bit

1310
01:11:33,800 --> 01:11:35,200
out to a 64.

1311
01:11:35,500 --> 01:11:38,100
So it probably only does the low integers or something like that.

1312
01:11:38,100 --> 01:11:39,800
That's just some, that's not the instruction.

1313
01:11:39,800 --> 01:11:40,500
I was even thinking,

1314
01:11:40,700 --> 01:11:42,300
King of right.

1315
01:11:43,600 --> 01:11:44,900
So you can see that here.

1316
01:11:45,700 --> 01:11:46,800
Mo epi32.

1317
01:11:46,800 --> 01:11:47,200
Oops.

1318
01:11:49,600 --> 01:11:51,200
It's not even in sse2.

1319
01:11:52,500 --> 01:11:53,700
Well epi32.

1320
01:11:53,900 --> 01:11:57,800
See it just grabs those two lows and then produces the full 64-bit

1321
01:11:57,800 --> 01:11:59,500
result, which is not in any way.

1322
01:12:00,000 --> 01:12:04,700
We want what I actually wanted to do is just multiply the two values

1323
01:12:04,700 --> 01:12:05,400
together.

1324
01:12:05,800 --> 01:12:07,500
I don't know what that just did.

1325
01:12:08,100 --> 01:12:10,000
Do not want to know what hockey that was.

1326
01:12:12,800 --> 01:12:16,300
I actually want to do a thing here where I'm just taking the low, I

1327
01:12:16,300 --> 01:12:20,400
want to take each of the 32 bit Lanes, multiply them together and just

1328
01:12:20,400 --> 01:12:23,400
take whatever the low is of that result, right?

1329
01:12:24,000 --> 01:12:27,100
Because I'm pre saying that it's not going to overflow into I'm saying

1330
01:12:27,100 --> 01:12:29,400
that they're going to be small enough values that they won't overflow

1331
01:12:29,700 --> 01:12:32,000
into a 64-bit result, right?

1332
01:12:32,600 --> 01:12:35,300
And so in theory, that should fix it.

1333
01:12:35,400 --> 01:12:37,800
Yeah, it does okay.

1334
01:12:39,600 --> 01:12:43,500
So, that was a, that was a good thing to remember.

1335
01:12:43,800 --> 01:12:49,400
Don't forget, there is a mole command, you will be able to into du Mal

1336
01:12:49,400 --> 01:12:53,200
epi32 by accident and then forget that that is not at all.

1337
01:12:53,200 --> 01:12:54,800
What you probably were trying to do.

1338
01:12:56,200 --> 01:12:56,800
So, there you go.

1339
01:12:57,200 --> 01:13:00,800
All right, so I'm imagining maybe the compiler was smart enough to do

1340
01:13:00,800 --> 01:13:03,200
that for us anyway, but there we go.

1341
01:13:03,900 --> 01:13:06,100
Now, one of the interesting things seriously, we could actually do the

1342
01:13:06,100 --> 01:13:08,600
texture memory, add as well.

1343
01:13:10,100 --> 01:13:17,000
Meaning we could just do that ad for a wide but on, you know, 64-bit

1344
01:13:17,000 --> 01:13:20,300
processors, that's actually a 64-bit pointer potentially.

1345
01:13:20,300 --> 01:13:23,000
So I don't want to push it, you know.

1346
01:13:23,000 --> 01:13:25,700
I don't want to push it that far, if that makes sense.

1347
01:13:27,400 --> 01:13:32,900
So yeah, so that's about it, I don't know that there's anything else

1348
01:13:32,900 --> 01:13:35,900
to be done with just that unpack situation here.

1349
01:13:36,500 --> 01:13:39,800
But now the, the most important part, it was good to just kind of

1350
01:13:39,800 --> 01:13:40,700
clean that up a little bit.

1351
01:13:40,700 --> 01:13:43,100
Just so we're not forcing the composite figure that out.

1352
01:13:44,400 --> 01:13:48,300
What I do want to do though now is get back to what we're sort of

1353
01:13:48,300 --> 01:13:51,300
looking at originally which is that Port pressure, right?

1354
01:13:52,100 --> 01:13:52,900
So here we go.

1355
01:13:55,200 --> 01:13:58,500
So who is our Port?

1356
01:13:58,800 --> 01:13:59,500
Who is our

1357
01:14:01,100 --> 01:14:02,100
Rhino to here yet.

1358
01:14:04,000 --> 01:14:09,100
who is our, who is are pressured, Port are pressured Port into it over

1359
01:14:09,100 --> 01:14:10,800
back to enter iteration are we

1360
01:14:14,300 --> 01:14:16,900
So some of us saying the inter iteration is what happens.

1361
01:14:17,100 --> 01:14:20,400
When it believes that if you were to run the block repeatedly, that

1362
01:14:20,400 --> 01:14:21,200
would be the problem.

1363
01:14:21,700 --> 01:14:25,200
Meaning it would be dependencies between Loops or something like this.

1364
01:14:25,200 --> 01:14:26,500
That's what someone was saying.

1365
01:14:26,600 --> 01:14:31,300
I haven't read up about that yet so I'm not sure if that's actually a

1366
01:14:31,300 --> 01:14:34,200
meaningful thing but

1367
01:14:36,100 --> 01:14:38,900
It actually looks kind of like to me.

1368
01:14:41,000 --> 01:14:41,600
Yeah.

1369
01:14:51,500 --> 01:14:53,300
It looks kind of like to me.

1370
01:14:56,600 --> 01:14:59,000
That we kind of have things a little more spread out here.

1371
01:15:02,800 --> 01:15:06,900
It's weird because one of the things that's I guess kind of difficult

1372
01:15:06,900 --> 01:15:09,900
to work through, as well, you know, when I'm looking at this and

1373
01:15:09,900 --> 01:15:12,500
again, this is the first time I've ever done SSE, anything with this

1374
01:15:12,500 --> 01:15:17,300
tool, is that the cycle count doesn't necessarily match up with the

1375
01:15:17,300 --> 01:15:20,200
cycles per pixel that we observe and presumably that has a lot to do

1376
01:15:20,200 --> 01:15:21,800
with how the memory actually works out.

1377
01:15:21,800 --> 01:15:27,200
Like, in theory, I feel like that this one should have been slower

1378
01:15:27,600 --> 01:15:31,500
because it says 116 Cycles but I feel like we had 101

1379
01:15:31,700 --> 01:15:36,700
Cycles up here and and that one was actually not faster though when we

1380
01:15:36,700 --> 01:15:38,100
had going this way.

1381
01:15:40,100 --> 01:15:42,500
So I don't know, little bit odd.

1382
01:15:43,500 --> 01:15:44,200
Anyway.

1383
01:15:46,500 --> 01:15:47,400
point being

1384
01:15:50,000 --> 01:15:52,700
We do have one thing that's kind of bizarre, right?

1385
01:15:52,900 --> 01:15:55,600
And we looked at that the other day and it was because I wasn't

1386
01:15:55,600 --> 01:15:57,000
actually sure how to use the tool.

1387
01:15:57,200 --> 01:16:00,300
It was a bit of a problem, but one thing that we did is we tried

1388
01:16:00,300 --> 01:16:08,000
taking the bilinear and making the bi-linear unpack be done in 16, bit

1389
01:16:08,200 --> 01:16:13,400
per per element, instead of doing it as 32-bit per element, right?

1390
01:16:13,400 --> 01:16:17,000
So, we were basically, instead of doing multiplies with the floating

1391
01:16:17,000 --> 01:16:18,100
Point Unit, we did

1392
01:16:18,500 --> 01:16:22,400
Plies with the 16 wide Lanes.

1393
01:16:24,200 --> 01:16:25,800
And there's a number of things that we could do there.

1394
01:16:25,800 --> 01:16:29,700
Like we could try to continue that on and do 16 bit further through

1395
01:16:29,700 --> 01:16:31,100
the pipe, right?

1396
01:16:32,000 --> 01:16:34,900
We could try reverting this back to doing the floating point because

1397
01:16:34,900 --> 01:16:37,700
since we know that we have too much pressure on Port 1, in a lot of

1398
01:16:37,700 --> 01:16:43,200
circumstances, moving the pressure over to Port 0, which is what we

1399
01:16:43,200 --> 01:16:44,200
had before we did.

1400
01:16:44,200 --> 01:16:49,200
This conversion might be helpful and so on but the problem as I see it

1401
01:16:49,200 --> 01:16:53,500
at the moment like I was saying is that I feel like we

1402
01:16:53,700 --> 01:16:55,900
I have a memory problem as well.

1403
01:17:00,900 --> 01:17:02,900
Which is to say that.

1404
01:17:05,100 --> 01:17:08,900
If we take, for example, what this tool thinks is the number of cycles

1405
01:17:08,900 --> 01:17:14,700
that we might have, we actually observing more Cycles than then it is

1406
01:17:14,700 --> 01:17:15,300
reporting.

1407
01:17:16,700 --> 01:17:20,300
Which it suggests that we're not getting stuff back as immediately as

1408
01:17:20,300 --> 01:17:21,600
we should write.

1409
01:17:21,700 --> 01:17:25,100
It suggests that there are some longer memory latency stalls in there.

1410
01:17:26,000 --> 01:17:28,500
And so one thing that we might want to do at this point and one thing

1411
01:17:28,500 --> 01:17:34,900
that I'm considering is now might be a time to try to switch to

1412
01:17:34,900 --> 01:17:36,100
multi-threading in the renderer

1413
01:17:38,700 --> 01:17:43,600
and the reason for that, I say that is because if you take a look at

1414
01:17:43,600 --> 01:17:45,100
how these sorts of things work,

1415
01:17:47,100 --> 01:17:49,100
Remember I talked about hyper-threading before?

1416
01:17:51,000 --> 01:17:54,700
So, the way these Intel processors work on anything that has the

1417
01:17:54,700 --> 01:17:55,800
hyper-threading in it.

1418
01:17:56,800 --> 01:17:59,800
is that the idea behind the hyper-threading is, it's actually,

1419
01:18:00,000 --> 01:18:00,700
Pretty simple.

1420
01:18:03,200 --> 01:18:08,400
If you imagine the processor has these, you know units, right?

1421
01:18:08,400 --> 01:18:09,400
She may have to blow my nose.

1422
01:18:16,700 --> 01:18:18,700
So, when we talked about the diagrams and I mentioned hyper-threading

1423
01:18:18,700 --> 01:18:20,000
at the time, but it's gonna mention again.

1424
01:18:22,700 --> 01:18:24,600
So, you know, the processor has these units, right?

1425
01:18:25,500 --> 01:18:27,700
And the way that it looks at any given time, you know, is the

1426
01:18:27,700 --> 01:18:30,300
processor may be is in there and let's say, you know, it's got an f p,

1427
01:18:30,300 --> 01:18:33,800
add right unit or something, that's adding floating Point numbers.

1428
01:18:34,200 --> 01:18:37,300
And then it's got, you know, some unit over here that's like doing

1429
01:18:37,300 --> 01:18:38,900
loads or whatever, right?

1430
01:18:39,600 --> 01:18:45,400
And so you know, the thing issues a load and at least use a floating

1431
01:18:45,400 --> 01:18:49,100
Point, add or something, and those are impressed in, you know, going

1432
01:18:49,100 --> 01:18:50,200
through the timeline.

1433
01:18:50,600 --> 01:18:52,000
You know, we've got our tix here.

1434
01:18:52,500 --> 01:18:52,900
Tick tick.

1435
01:18:52,900 --> 01:18:54,200
Tick tick, right?

1436
01:18:54,400 --> 01:18:59,300
So here is cycle 0, let's say, and if we issue one of these FP ads and

1437
01:18:59,300 --> 01:19:01,200
we issue a load, let's say we issue.

1438
01:19:01,200 --> 01:19:04,500
Both of those, we issue like the ad and the load both on this cycle,

1439
01:19:04,800 --> 01:19:05,400
right?

1440
01:19:06,000 --> 01:19:10,700
And let's say the load hits the cash perfectly and the ad works out

1441
01:19:10,700 --> 01:19:11,300
and whatever.

1442
01:19:11,500 --> 01:19:14,100
So, like the total amount of time, you know, maybe it takes to do this

1443
01:19:14,100 --> 01:19:17,300
thing is just like a, you know, maybe it's only two cycles or even

1444
01:19:17,300 --> 01:19:18,200
just one cycle.

1445
01:19:18,200 --> 01:19:21,900
And so, the results come back like right here, and it's totally fine.

1446
01:19:22,700 --> 01:19:26,000
Or if they were long latency, maybe they take this long, let's say,

1447
01:19:26,000 --> 01:19:28,400
you know, five Cycles or four Cycles or something like this.

1448
01:19:28,800 --> 01:19:31,900
But once they're in there, we can also issue some more things like

1449
01:19:31,900 --> 01:19:34,900
we've got more things to issue, so we issue another ad and a load and

1450
01:19:34,900 --> 01:19:36,900
we can issue another load or an ad or whatever.

1451
01:19:36,900 --> 01:19:38,100
Who knows, right?

1452
01:19:38,200 --> 01:19:40,400
And they go into the pipeline and they complete serially.

1453
01:19:40,400 --> 01:19:43,200
So like this guy completes over here, and this guy completes over here

1454
01:19:43,200 --> 01:19:44,400
and whatever right?

1455
01:19:44,600 --> 01:19:47,600
Again, this is nothing specific, I'm just saying, we've got things

1456
01:19:47,600 --> 01:19:49,900
going into these units and then we've got things coming out of them,

1457
01:19:49,900 --> 01:19:50,500
right?

1458
01:19:50,900 --> 01:19:52,300
And from the perspective,

1459
01:19:52,500 --> 01:19:56,800
Of like this tool what we're looking at is saying, let's make sure we

1460
01:19:56,800 --> 01:19:58,200
can always issue.

1461
01:19:58,300 --> 01:20:01,700
Let's try and figure out how to minimize the number of things that go

1462
01:20:02,100 --> 01:20:03,500
the minimum number of cycle.

1463
01:20:03,500 --> 01:20:07,700
The minimum number of instructions to anyone Port that we want to try

1464
01:20:07,700 --> 01:20:09,700
and minimize the maximum number.

1465
01:20:09,700 --> 01:20:10,700
They're right.

1466
01:20:11,300 --> 01:20:14,800
Because the maximum number is going to be how slowly we run because

1467
01:20:14,800 --> 01:20:16,300
you can only issue to that Port.

1468
01:20:16,300 --> 01:20:17,000
See, really.

1469
01:20:17,300 --> 01:20:20,800
So even though you can issue as many things as you want across

1470
01:20:20,800 --> 01:20:22,300
multiple ports, you can while you can

1471
01:20:22,400 --> 01:20:25,500
you up to four or whatever it is, you can issue a certain number of

1472
01:20:25,500 --> 01:20:28,500
instructions at any given cycle, you could only issue 12 any given

1473
01:20:28,500 --> 01:20:31,300
port on that cycle, so that becomes the bottleneck, right?

1474
01:20:32,000 --> 01:20:40,000
But if we are having a problem where we the inputs to these, right?

1475
01:20:40,000 --> 01:20:43,500
Because like an ad or a load has inputs, it's got like the address or

1476
01:20:43,500 --> 01:20:47,500
the things to add if we get into a situation where the inputs, the

1477
01:20:47,500 --> 01:20:52,000
sources are not here yet because they're coming from memory.

1478
01:20:52,400 --> 01:20:54,100
We're waiting for them to arrive.

1479
01:20:54,400 --> 01:20:58,000
What we can end up with is a situation where all of the instructions

1480
01:20:58,000 --> 01:20:59,800
like we get to some point and all

1481
01:21:00,000 --> 01:21:04,300
The instructions that we could issue all of them all depend on some

1482
01:21:04,300 --> 01:21:08,500
loads that have not arrived yet because like the load takes, you know,

1483
01:21:08,700 --> 01:21:09,800
a hundred milliseconds or so.

1484
01:21:09,800 --> 01:21:10,200
I'm sorry.

1485
01:21:10,200 --> 01:21:11,600
100 Cycles or something.

1486
01:21:11,900 --> 01:21:13,800
Wow, 100 Ms load that be awful.

1487
01:21:15,000 --> 01:21:17,200
And so, there's this big huge window and there's nothing we can do

1488
01:21:17,200 --> 01:21:18,200
about it, right?

1489
01:21:20,200 --> 01:21:24,100
So what that means is at that time when we get to that stall, right?

1490
01:21:24,100 --> 01:21:29,900
When we get to that point where we are completely waiting on inputs

1491
01:21:30,000 --> 01:21:34,400
from memory or a slow part of the lower part of the cash in L3 cache

1492
01:21:34,400 --> 01:21:37,700
or something or an L2 cache, probably not no one cash.

1493
01:21:39,000 --> 01:21:41,900
Because those are very fast, but when we get to the point where we're

1494
01:21:41,900 --> 01:21:46,000
waiting on that, we've got all these units that are sitting around

1495
01:21:46,000 --> 01:21:46,800
doing nothing.

1496
01:21:47,100 --> 01:21:50,500
Like we could stuff another load into the load pipeline, we could

1497
01:21:50,500 --> 01:21:51,600
stuff another FP.

1498
01:21:51,600 --> 01:21:52,600
Add into the FBI piping.

1499
01:21:52,600 --> 01:21:56,800
If only we had one to put in there, so the units are basically just

1500
01:21:56,800 --> 01:21:59,600
sitting there doing absolutely nothing and that's a huge amount of

1501
01:21:59,600 --> 01:22:00,900
wasted performance for us.

1502
01:22:02,000 --> 01:22:06,000
So what hyper-threading attempts to do is take advantage of the fact.

1503
01:22:06,300 --> 01:22:07,900
These are called latency bubbles.

1504
01:22:10,100 --> 01:22:10,700
Right.

1505
01:22:11,000 --> 01:22:14,400
And they're basically like little bubbles of time that form because

1506
01:22:14,400 --> 01:22:17,100
we're just waiting to have something to put into our units.

1507
01:22:17,100 --> 01:22:17,700
Right.

1508
01:22:19,200 --> 01:22:23,100
What we can do with hyper-threading is say well what if we just had

1509
01:22:23,200 --> 01:22:25,900
two streams of code, right?

1510
01:22:26,000 --> 01:22:29,500
So here is Loop, you know, 0 and this is Loop 1.

1511
01:22:30,100 --> 01:22:33,300
And what if we were just to run both Loops zero and loop.

1512
01:22:33,300 --> 01:22:38,500
One at the same time on the same processor on the same core so it's

1513
01:22:38,500 --> 01:22:39,800
still it's still

1514
01:22:39,900 --> 01:22:42,200
Entirely single-threaded in some sense.

1515
01:22:42,400 --> 01:22:45,400
Meaning there's only one thing executing at a given time.

1516
01:22:47,000 --> 01:22:52,400
But what can happen is it'll execute Loop 0 till it hits one of those

1517
01:22:52,400 --> 01:22:54,900
bubbles and it hits a point where it goes.

1518
01:22:54,900 --> 01:22:57,900
I'm completely starved for memory.

1519
01:22:57,900 --> 01:23:02,300
I can't get what I actually need to get in order to issue any more

1520
01:23:02,300 --> 01:23:06,600
instructions, and the units on a processor, will just go fallow, what

1521
01:23:06,600 --> 01:23:11,300
it then does, is it immediately task switches over to Loop one in a

1522
01:23:11,300 --> 01:23:12,300
very, very fast way.

1523
01:23:12,300 --> 01:23:16,500
It's got like a special Bank switching ability to make it so that it

1524
01:23:16,500 --> 01:23:17,000
doesn't have to do.

1525
01:23:17,100 --> 01:23:17,700
Like, register.

1526
01:23:17,700 --> 01:23:18,600
Save and load from memory.

1527
01:23:18,600 --> 01:23:21,000
There, like all the processors like ready to go with them.

1528
01:23:22,900 --> 01:23:26,400
That's what makes them a Hyper Shred because it's a thread switch.

1529
01:23:26,400 --> 01:23:29,000
That doesn't go through the operating system in that way.

1530
01:23:29,700 --> 01:23:32,000
It doesn't have to, like, ask the operating system to manually.

1531
01:23:32,000 --> 01:23:33,100
Do it right?

1532
01:23:33,500 --> 01:23:34,600
Which takes a bunch of time.

1533
01:23:34,900 --> 01:23:38,300
So, in that memory bubble, it can go ahead and switch over to Loop one

1534
01:23:38,300 --> 01:23:43,000
and see, does the other loop have any instructions that I could fill

1535
01:23:43,000 --> 01:23:44,400
in here, right?

1536
01:23:45,200 --> 01:23:49,600
So, it's basically this way of giving the processor more potential

1537
01:23:49,600 --> 01:23:52,500
things to do, so that when it gets,

1538
01:23:52,700 --> 01:23:54,100
Some point in the loop.

1539
01:23:54,100 --> 01:23:59,100
When it's waiting on membranes, like it can go go over to the other

1540
01:23:59,100 --> 01:23:59,800
loop.

1541
01:24:00,300 --> 01:24:01,600
We'll have some instructions to execute.

1542
01:24:01,600 --> 01:24:04,800
It does those and when that guy hits the part where he's waiting on

1543
01:24:04,800 --> 01:24:09,900
memory, it ping-pongs back over right it comes back to the previous

1544
01:24:09,900 --> 01:24:13,400
Loop and we hope that now all the memory we were waiting for on that

1545
01:24:13,400 --> 01:24:18,400
Loop has had time to arrive and so that's what hyper-threading is.

1546
01:24:20,100 --> 01:24:24,100
So what I was thinking we might do because we want our render to be

1547
01:24:24,100 --> 01:24:25,000
hyper threaded.

1548
01:24:25,000 --> 01:24:30,200
Last thing you might do is hyper thread the renderer so that we can

1549
01:24:30,200 --> 01:24:33,000
start to see real performance measurements of something with

1550
01:24:33,000 --> 01:24:36,200
hyper-threading on so that we don't do a bunch of work to optimize

1551
01:24:36,200 --> 01:24:40,100
memory latency that we don't actually need to optimize, right?

1552
01:24:40,100 --> 01:24:41,900
Because a hyper thread would have just done it.

1553
01:24:44,700 --> 01:24:48,100
Again with anything with that position it's very hard to know whether

1554
01:24:48,100 --> 01:24:50,500
you're making a good decision at the time unless you had a lot of

1555
01:24:50,500 --> 01:24:51,200
experience.

1556
01:24:52,400 --> 01:24:56,000
And so and I haven't like I said on x64 S, I do pretty light

1557
01:24:56,000 --> 01:24:56,700
optimization.

1558
01:25:00,600 --> 01:25:02,300
so it's a little bit hard to tell, but

1559
01:25:04,500 --> 01:25:07,000
that was just something I thought of as like, maybe we should switch

1560
01:25:07,000 --> 01:25:10,000
to that earlier rather than later.

1561
01:25:10,700 --> 01:25:15,500
So that's actually surprisingly easy to do.

1562
01:25:16,100 --> 01:25:17,200
It's not that hard.

1563
01:25:18,700 --> 01:25:21,200
So I don't know if you want to do it and make this like a marathon

1564
01:25:21,200 --> 01:25:26,900
stream or whatever, but we could, we could do it now.

1565
01:25:28,200 --> 01:25:31,600
Maybe what we'll do is we won't actually try to multi-thread the

1566
01:25:31,600 --> 01:25:34,000
renderer too much but I'll show how to actually

1567
01:25:34,500 --> 01:25:36,600
Get more than one thread working in Windows.

1568
01:25:36,600 --> 01:25:40,900
For example, we could at least do some of that before going to the

1569
01:25:40,900 --> 01:25:41,400
Q&A.

1570
01:25:42,400 --> 01:25:43,500
So, let's take a look in here.

1571
01:25:45,700 --> 01:25:46,300
Threading.

1572
01:25:49,500 --> 01:25:50,400
You don't, we could do.

1573
01:25:51,500 --> 01:25:54,000
I wonder if we should just break this up into two days though because

1574
01:25:54,000 --> 01:25:55,400
if I introduce threading,

1575
01:25:57,100 --> 01:25:57,800
Hmm.

1576
01:25:58,200 --> 01:25:58,600
You know what?

1577
01:25:58,600 --> 01:25:59,900
I'll do it the other way around.

1578
01:26:00,100 --> 01:26:00,900
That's what I'll do.

1579
01:26:01,000 --> 01:26:04,600
We'll introduce threading on Monday but we can do is prepare the

1580
01:26:04,600 --> 01:26:07,400
renderer to be threaded.

1581
01:26:08,000 --> 01:26:09,000
That's what we should do.

1582
01:26:09,400 --> 01:26:10,800
Yeah, yeah, that's a better idea.

1583
01:26:10,800 --> 01:26:12,400
And then we'll have one day that it chooses reading.

1584
01:26:12,400 --> 01:26:12,800
Okay?

1585
01:26:13,300 --> 01:26:17,000
So what we need to do to get the renderer ready for threading really,

1586
01:26:17,600 --> 01:26:19,500
it's we can do something pretty simple.

1587
01:26:19,800 --> 01:26:23,700
There's two ways we could do it and I'll sort of talk, say, a little

1588
01:26:23,700 --> 01:26:26,400
bit about how I'm thinking about it and I don't know.

1589
01:26:26,900 --> 01:26:31,100
Hard to say, what the right decision is, we can try a couple different

1590
01:26:31,100 --> 01:26:34,300
things, but here's what I think, would probably be smart.

1591
01:26:35,500 --> 01:26:37,200
So, we've got a screen.

1592
01:26:38,700 --> 01:26:41,400
And we know we have to render this whole screens worth of stuff,

1593
01:26:41,800 --> 01:26:42,300
right?

1594
01:26:43,300 --> 01:26:47,600
And what we also know is that typically what we are drawing

1595
01:26:48,900 --> 01:26:51,500
Is rectangular, right?

1596
01:26:51,500 --> 01:26:54,000
It has to look like that, you know.

1597
01:26:54,000 --> 01:26:55,600
It doesn't look like this.

1598
01:26:56,300 --> 01:26:59,100
You know, we're not drawing very many things that are long slippery.

1599
01:26:59,300 --> 01:26:59,900
It doesn't look like

1600
01:27:00,000 --> 01:27:03,300
This you know, it doesn't look like that.

1601
01:27:04,100 --> 01:27:06,900
It tends to look like this and when it doesn't look like this it looks

1602
01:27:06,900 --> 01:27:10,100
you know, like a rotated version of this or a smaller version of this

1603
01:27:10,100 --> 01:27:11,500
but it's very much this way.

1604
01:27:13,200 --> 01:27:17,800
And so remembering that we want to try and optimize to make sure that

1605
01:27:17,800 --> 01:27:20,600
we don't have things being in and out of the cash a lot and that sort

1606
01:27:20,600 --> 01:27:21,000
of thing.

1607
01:27:23,200 --> 01:27:26,500
We want to try and design how we're going to break up the rendering

1608
01:27:26,500 --> 01:27:29,900
for multi-threading in ways that don't put lots of extra pressure on

1609
01:27:29,900 --> 01:27:30,600
the caches.

1610
01:27:31,400 --> 01:27:32,200
So what does that mean?

1611
01:27:33,500 --> 01:27:36,600
Well, we've got two things that have to go in the caches, right?

1612
01:27:36,600 --> 01:27:41,500
We got two fundamental pieces of memory that we are working with right

1613
01:27:41,600 --> 01:27:44,100
technically three but one of them is probably not very relevant.

1614
01:27:45,000 --> 01:27:47,100
Okay, so I'll say what they all are.

1615
01:27:47,300 --> 01:27:50,700
Got zero one and two, and I'm sort of saying that zero is probably not

1616
01:27:50,700 --> 01:27:51,600
super important.

1617
01:27:51,700 --> 01:27:52,900
0 is the command buffer.

1618
01:27:55,400 --> 01:27:58,700
Right, that's the thing that we've got there that render group that

1619
01:27:58,700 --> 01:28:01,700
basically just says, all the stuff that actually has to happen when we

1620
01:28:01,700 --> 01:28:03,400
render, right?

1621
01:28:05,000 --> 01:28:09,000
And I don't think that's going to cause us a huge amount of headache

1622
01:28:09,000 --> 01:28:10,700
because it's just not access that frequently.

1623
01:28:11,300 --> 01:28:15,300
Write the number of command commands in the command buffer versus the

1624
01:28:15,300 --> 01:28:19,000
number of pixels and textiles that we touch is just not that relevant.

1625
01:28:19,100 --> 01:28:21,700
So even though this technically is a piece of memory that we have to

1626
01:28:21,700 --> 01:28:24,400
access, it's not really relevant.

1627
01:28:24,500 --> 01:28:25,100
I don't think

1628
01:28:26,600 --> 01:28:31,400
So okay, we've got that, we've got a much more important thing which

1629
01:28:31,400 --> 01:28:32,600
is the frame buffer.

1630
01:28:33,900 --> 01:28:35,600
Write the actual thing that we're writing to.

1631
01:28:37,600 --> 01:28:38,200
What did I do?

1632
01:28:38,900 --> 01:28:39,400
Oh no!

1633
01:28:40,000 --> 01:28:40,400
No!

1634
01:28:40,600 --> 01:28:41,300
What happened?

1635
01:28:42,100 --> 01:28:42,900
I don't know what happened.

1636
01:28:43,200 --> 01:28:44,300
Hey, control X!

1637
01:28:44,700 --> 01:28:45,800
Don't know what that does.

1638
01:28:47,700 --> 01:28:48,500
XXX.

1639
01:28:51,200 --> 01:28:52,400
Doesn't even look like that's a thing.

1640
01:28:56,600 --> 01:28:57,300
Control X.

1641
01:28:57,800 --> 01:28:58,700
This is the great.

1642
01:28:58,700 --> 01:29:01,000
Wow, there's a hotkeys window for you.

1643
01:29:02,500 --> 01:29:09,100
All right, so anyway maybe I just hit control s accidentally and it

1644
01:29:09,100 --> 01:29:09,700
just saved.

1645
01:29:09,700 --> 01:29:10,200
I don't know.

1646
01:29:10,200 --> 01:29:11,800
Anyway, well, I hope it's nothing bad.

1647
01:29:12,300 --> 01:29:17,800
So there's the frame buffer, which is obviously, you know, a huge

1648
01:29:17,800 --> 01:29:19,700
thing that we're writing to and reading from.

1649
01:29:21,000 --> 01:29:23,900
So this is basically a read right thing, and then we've got our

1650
01:29:23,900 --> 01:29:24,500
textures.

1651
01:29:26,100 --> 01:29:27,000
Which are read only.

1652
01:29:28,000 --> 01:29:28,400
Right.

1653
01:29:28,400 --> 01:29:30,100
We never write back to the textures.

1654
01:29:30,300 --> 01:29:33,600
Now, once in a while, the frame buffer might actually be something

1655
01:29:33,600 --> 01:29:34,600
that we texture from.

1656
01:29:36,000 --> 01:29:39,600
So, we do have in a sense, some readwrite textures, but they're, we're

1657
01:29:39,600 --> 01:29:41,400
just going to really treat those as frame buffers, right?

1658
01:29:41,400 --> 01:29:43,300
That's what we're producing like our ground chunks.

1659
01:29:43,700 --> 01:29:47,600
We write to the ground chunks first, but then we draw from the ground

1660
01:29:47,600 --> 01:29:49,300
chunks later, potentially, right?

1661
01:29:49,700 --> 01:29:55,000
So, it's a little bit weird in that sense but anyway, so that's how

1662
01:29:55,000 --> 01:29:55,600
that works.

1663
01:29:56,800 --> 01:29:59,800
and if we think about this,

1664
01:30:00,300 --> 01:30:03,900
What that means is that in terms of our managing, how the memory flows

1665
01:30:03,900 --> 01:30:09,700
through the system, what we're trying to do is minimize the degree to

1666
01:30:09,700 --> 01:30:14,000
which we load from these and read and write from these things in ways

1667
01:30:14,000 --> 01:30:17,100
that are spatially incoherent, right?

1668
01:30:17,400 --> 01:30:19,800
So like what we don't want to do with the frame buffer.

1669
01:30:19,800 --> 01:30:24,800
For example is we don't want to have a situation where we like

1670
01:30:25,900 --> 01:30:31,100
Read and write some part of the frame, buffer read and write some

1671
01:30:31,100 --> 01:30:34,500
other part of the frame, buffer at a size, sufficient to blow out the

1672
01:30:34,500 --> 01:30:35,100
cash.

1673
01:30:35,100 --> 01:30:38,200
Meaning like we completely replace, like a bunch of stuff in the cash

1674
01:30:38,200 --> 01:30:41,800
with new stuff and then go back and read and write the exact same

1675
01:30:41,800 --> 01:30:42,400
stuff again.

1676
01:30:43,200 --> 01:30:46,200
Because basically what that would mean, is we've filled the cash for

1677
01:30:46,200 --> 01:30:46,600
something.

1678
01:30:46,600 --> 01:30:50,900
Once we've then spent another whole amount of time to fill the cash to

1679
01:30:50,900 --> 01:30:51,800
completely other things.

1680
01:30:51,800 --> 01:30:54,800
And then we've gone right back and filled it again with stuff that was

1681
01:30:54,800 --> 01:30:55,400
already in there.

1682
01:30:55,600 --> 01:30:58,200
For that we could have had for free if we just done the work at that

1683
01:30:58,200 --> 01:30:59,600
time, right.

1684
01:31:00,200 --> 01:31:03,100
So we're trying to do is do a little bit of management of that

1685
01:31:03,100 --> 01:31:04,300
locality here.

1686
01:31:06,200 --> 01:31:09,100
So that we can avoid that process.

1687
01:31:11,700 --> 01:31:12,100
Okay.

1688
01:31:16,200 --> 01:31:18,100
So, the first thing I'm going to take just a try.

1689
01:31:19,600 --> 01:31:23,500
As I'm going to try and manage the frame buffer locality and the

1690
01:31:23,500 --> 01:31:26,600
reason that I'm going to try to manage the frame buffer locality is

1691
01:31:26,600 --> 01:31:29,400
because managing the texture locality, I feel like is going to be

1692
01:31:29,400 --> 01:31:29,900
harder.

1693
01:31:30,500 --> 01:31:33,000
The reason I feel like it's going to be harder is because there's

1694
01:31:33,000 --> 01:31:38,200
rules about what has to be drawn texture wise in what order.

1695
01:31:39,100 --> 01:31:43,700
So, it's not like I can necessarily sort things by the order in which

1696
01:31:43,700 --> 01:31:46,800
they use textures, because we have to do things, like, sort them, by

1697
01:31:46,800 --> 01:31:49,200
the order that they stack up on the screen and other things.

1698
01:31:49,400 --> 01:31:52,300
That's potentially for other reasons.

1699
01:31:52,300 --> 01:31:55,900
Like getting the correct result and other stuff like this, but the

1700
01:31:55,900 --> 01:32:00,400
frame buffer, it's pretty free for me to pick how I want to dice up

1701
01:32:00,400 --> 01:32:01,200
the frame buffer.

1702
01:32:01,300 --> 01:32:02,000
Right?

1703
01:32:02,200 --> 01:32:05,200
I can for example, if I have two threads choose to just break the

1704
01:32:05,200 --> 01:32:08,000
frame buffer in half and have one thread render one side and one

1705
01:32:08,000 --> 01:32:12,600
friend thread rather the other side and there's no like that.

1706
01:32:12,600 --> 01:32:14,500
There's no constraints on how I do that.

1707
01:32:14,500 --> 01:32:17,200
I can literally break up the frame buffer anyway, I want it doesn't

1708
01:32:17,200 --> 01:32:18,900
really affect anything else in the system.

1709
01:32:19,400 --> 01:32:21,000
So, I'm going to try it that way first.

1710
01:32:22,600 --> 01:32:26,500
And so, what I'd like to do is I'd like to design it so that we work

1711
01:32:26,500 --> 01:32:30,300
potentially in chunks of the frame buffer, right?

1712
01:32:30,700 --> 01:32:36,600
That are sized appropriately for the cash, right?

1713
01:32:36,900 --> 01:32:41,000
Meaning I would like to break up the frame buffer into pieces, which I

1714
01:32:41,000 --> 01:32:48,100
think will fit into the cache in, in a nice in a way that that if I

1715
01:32:48,100 --> 01:32:51,100
were to just operate on everything inside that region, I wouldn't blow

1716
01:32:51,100 --> 01:32:51,700
out the cash too.

1717
01:32:52,400 --> 01:32:52,700
Right?

1718
01:32:52,700 --> 01:32:54,100
It could fit into the cache nicely.

1719
01:32:54,500 --> 01:32:57,300
So there is, you know, it's not a region that's significantly larger

1720
01:32:57,300 --> 01:32:59,800
than the cash is right now in for

1721
01:33:00,000 --> 01:33:01,900
Don't actually know what the cache size is on this particular

1722
01:33:01,900 --> 01:33:05,600
processor, but I remember it was like a w 5580, right?

1723
01:33:07,400 --> 01:33:10,400
And so, you know, on this particular cache on this particular

1724
01:33:10,400 --> 01:33:13,300
processor, we could see what the cash was because, you know, usually

1725
01:33:13,300 --> 01:33:14,500
they'll list that sort of thing.

1726
01:33:17,900 --> 01:33:18,800
Let's see here.

1727
01:33:18,900 --> 01:33:21,900
Do they have L1 L2 listed?

1728
01:33:23,300 --> 01:33:31,900
I'm gonna have to look at a different place for caches L1 cache size,

1729
01:33:31,900 --> 01:33:33,600
for example, how big is it?

1730
01:33:33,600 --> 01:33:34,200
There it is.

1731
01:33:34,800 --> 01:33:36,300
Halon microarchitecture.

1732
01:33:37,800 --> 01:33:40,200
So let's assume that that's somewhat, right?

1733
01:33:40,300 --> 01:33:44,400
Although I feel like how can this is a little dis little weird?

1734
01:33:45,000 --> 01:33:48,800
I feel like because I don't feel like the cache size is constant for

1735
01:33:48,800 --> 01:33:51,300
across all Nehalem 's, right?

1736
01:33:52,200 --> 01:33:53,300
Is that actually true?

1737
01:33:59,300 --> 01:33:59,900
Maybe it is.

1738
01:34:00,300 --> 01:34:03,500
So it might be the old Nehalem, said the exact same L1 and L2 cache

1739
01:34:03,500 --> 01:34:06,500
and it's only the L3 cache that changes, right?

1740
01:34:07,700 --> 01:34:10,600
But anyway, if you take a look at this, you can see like the L1 cache

1741
01:34:10,600 --> 01:34:11,600
is 64k.

1742
01:34:11,600 --> 01:34:14,900
The L2 cache is 256 K, right?

1743
01:34:15,700 --> 01:34:18,700
So if we thought about how big that was, right?

1744
01:34:18,800 --> 01:34:21,300
If we thought about how big that was, how big of a square that was

1745
01:34:21,300 --> 01:34:24,000
even just to get, like, a ballpark value, right?

1746
01:34:24,500 --> 01:34:28,900
You can imagine, you know, I've got square root of 20.

1747
01:34:29,100 --> 01:34:30,000
56.

1748
01:34:33,100 --> 01:34:39,800
X 1024 is to, and 56k, and I know that each pixel is is 4 bytes per

1749
01:34:39,800 --> 01:34:40,900
pixel, right?

1750
01:34:41,600 --> 01:34:45,300
So if I want to know if that's how much pixel area there is or

1751
01:34:45,300 --> 01:34:45,800
whatever, right?

1752
01:34:45,800 --> 01:34:47,300
That's how big that thing should be.

1753
01:34:47,400 --> 01:34:51,200
And you can see it's actually a 256 by 256, 56 square, right?

1754
01:34:51,200 --> 01:34:57,900
So 286 by 256 by 4 bytes per pixel that ends up being 20 56k.

1755
01:34:58,800 --> 01:35:01,800
So roughly, if we were to take up the entire cache with the frame

1756
01:35:01,800 --> 01:35:02,000
buffer,

1757
01:35:02,200 --> 01:35:06,100
Obviously, you can't actually do because you need space for the other

1758
01:35:06,100 --> 01:35:08,500
stuff like reloading for the textures and these sorts of things.

1759
01:35:09,500 --> 01:35:15,900
But basically the size of the L2 cache is actually a 256 by 256 square

1760
01:35:16,000 --> 01:35:19,100
of 4 B pixels, right?

1761
01:35:20,000 --> 01:35:24,700
So thinking about that for a second that means that you know if we

1762
01:35:24,700 --> 01:35:28,200
were to take our current screen like how many tiles across we would

1763
01:35:28,200 --> 01:35:29,900
have, what were we?

1764
01:35:29,900 --> 01:35:30,600
What were we at?

1765
01:35:30,600 --> 01:35:31,500
We're at like a

1766
01:35:32,100 --> 01:35:33,700
1820 by 2, right?

1767
01:35:33,700 --> 01:35:35,500
We're at 960 right?

1768
01:35:35,500 --> 01:35:40,300
So nine sixty divided by 256, right 3.75.

1769
01:35:40,300 --> 01:35:47,200
So almost like for across and 1080 / 2540, that's like to in a little

1770
01:35:47,200 --> 01:35:48,900
bit across, right?

1771
01:35:50,400 --> 01:35:54,200
So like I said, we can't really do that sighs because it's just a

1772
01:35:54,200 --> 01:35:57,300
little it'd be a little too big for the cash anyway but I don't really

1773
01:35:57,300 --> 01:35:59,900
know exactly how big we would want it to be.

1774
01:36:00,000 --> 01:36:03,000
So we'll probably have to play with that size, a little like the only

1775
01:36:03,000 --> 01:36:06,000
way to really know I think would probably be to like adjust the size a

1776
01:36:06,000 --> 01:36:09,400
little but we can start to see sort of what the size would actually

1777
01:36:09,400 --> 01:36:10,000
be.

1778
01:36:10,000 --> 01:36:10,500
Right.

1779
01:36:10,500 --> 01:36:16,500
Like let's say we did maybe, you know, something like 128 by 128 by 4,

1780
01:36:16,500 --> 01:36:17,400
right?

1781
01:36:17,700 --> 01:36:23,000
So it was a 64k size and you know, that would be one way we could try

1782
01:36:23,000 --> 01:36:24,600
to say well that should fit in the cache.

1783
01:36:24,600 --> 01:36:25,700
Very well whatever, right.

1784
01:36:25,700 --> 01:36:30,000
So you know, that's an example of how we could do that.

1785
01:36:30,000 --> 01:36:34,600
That now we probably wouldn't do it.

1786
01:36:34,600 --> 01:36:38,100
Exactly a power of two sides, because we need to eat divided evenly,

1787
01:36:38,100 --> 01:36:40,500
sonar 1920, / 2960.

1788
01:36:41,000 --> 01:36:43,600
So let's say, we took that 960 right, you know?

1789
01:36:43,600 --> 01:36:47,800
And you could imagine dividing that into six chunks, let's say, so

1790
01:36:47,800 --> 01:36:51,400
they'd be like 160 is relatively close.

1791
01:36:51,400 --> 01:36:58,900
So, let's say, you know, 160, what's 160 divided by the, the sort of

1792
01:36:58,900 --> 01:36:59,900
the, the width of

1793
01:37:00,000 --> 01:37:03,700
Thing, we know we load for pixels at a time, so that be 40 pixels.

1794
01:37:03,900 --> 01:37:11,100
So we could do, I'm sorry about 40 pixels, 40 warps of four pixels.

1795
01:37:12,300 --> 01:37:17,500
So we know we could do like, you know, sort of 40 warps across by

1796
01:37:17,500 --> 01:37:18,500
however, many Works down.

1797
01:37:18,500 --> 01:37:20,400
We wanted to do could be a chunk, right?

1798
01:37:22,200 --> 01:37:26,200
So, what I want to do is I want to figure out a way that we can have

1799
01:37:26,200 --> 01:37:30,000
the renderer easily break, things up into chunks, and then what I'm

1800
01:37:30,000 --> 01:37:34,600
going to do is multi-threading wise, meaning when we actually are

1801
01:37:34,600 --> 01:37:39,200
using multiple cores of the processor, I will assign different chunks

1802
01:37:39,400 --> 01:37:41,200
to different processor cores.

1803
01:37:41,500 --> 01:37:46,300
So they can each work on a different course part separately, but then

1804
01:37:46,300 --> 01:37:48,400
the other thing we will do is for hyper threads.

1805
01:37:48,400 --> 01:37:49,800
We will treat them specially.

1806
01:37:50,700 --> 01:37:55,600
Because what I want to do is I want to maximize the likelihood that

1807
01:37:55,600 --> 01:38:01,100
textures hit the cache as well and because of particular H individual

1808
01:38:01,100 --> 01:38:01,800
core, right?

1809
01:38:01,800 --> 01:38:04,700
You can see on each core, it shares a cash.

1810
01:38:05,300 --> 01:38:08,900
So like the L1 cache is shared on the cores.

1811
01:38:09,100 --> 01:38:14,200
The L3 cache is shared across course, but the L1 and L2 are only

1812
01:38:14,200 --> 01:38:17,900
shared on hyper threads inside that individual core.

1813
01:38:18,800 --> 01:38:20,300
So what that means is that

1814
01:38:21,100 --> 01:38:23,800
Well, I do care about texture locality with some degree.

1815
01:38:24,000 --> 01:38:25,600
You know, I've got four mags 8.

1816
01:38:25,600 --> 01:38:26,300
Mags on this particular process.

1817
01:38:26,300 --> 01:38:27,400
I think it said eight Meg's.

1818
01:38:27,500 --> 01:38:31,300
I've got eight megabytes of backing in the cash for the textures.

1819
01:38:31,300 --> 01:38:36,400
That's a lot, but for the frame buffer, I don't have very much

1820
01:38:36,400 --> 01:38:40,400
necessarily because if I want to keep that local to the core and I

1821
01:38:40,400 --> 01:38:42,100
have hyper-threading, what?

1822
01:38:42,100 --> 01:38:47,300
I might want to do is take and try to dice this up in a way where the

1823
01:38:47,300 --> 01:38:50,300
pixels getting hit by the hyper.

1824
01:38:50,400 --> 01:38:54,500
Kids are like very close to each other in terms of what they need so

1825
01:38:54,500 --> 01:38:57,800
that like if a texture is filling it here, it's very likely that one

1826
01:38:57,800 --> 01:38:59,800
hyper thread will be like doing these pixels.

1827
01:39:00,000 --> 01:39:02,200
The other hyper threat is like doing these pixels.

1828
01:39:03,300 --> 01:39:04,800
Just try to do it, right?

1829
01:39:04,800 --> 01:39:06,900
See if I can get it to be in that way.

1830
01:39:08,100 --> 01:39:12,900
And so what I might want to do is not use rectangular break up for the

1831
01:39:12,900 --> 01:39:16,300
hyper threads, maybe what I do for the hyper threads is interleave

1832
01:39:16,300 --> 01:39:18,300
scanlines, right?

1833
01:39:19,900 --> 01:39:23,600
So basically, like the scan lines on the hyper threads it's actually

1834
01:39:23,600 --> 01:39:27,300
doing like like every other scanline is a different, hyper thread or

1835
01:39:27,300 --> 01:39:29,000
something like that, right?

1836
01:39:31,500 --> 01:39:32,800
Just something to think about.

1837
01:39:33,900 --> 01:39:35,200
I don't know if that's a good idea.

1838
01:39:35,900 --> 01:39:40,800
I'm just throwing it out there but I was thinking that that might be

1839
01:39:40,800 --> 01:39:45,200
better, it might end up being a better way to do it than breaking it

1840
01:39:45,200 --> 01:39:47,600
up so that they don't share any of the frame buffer.

1841
01:39:47,600 --> 01:39:50,100
And each type of thread does is different one because since I know

1842
01:39:50,100 --> 01:39:53,300
they're on the same core, I just think that might be better.

1843
01:39:54,400 --> 01:39:55,000
Just a guess.

1844
01:39:56,000 --> 01:39:58,300
So, what I was thinking of doing is basically setting up the renderer

1845
01:39:58,300 --> 01:40:06,300
so that we have essentially A dispatch which does, you know, render

1846
01:40:06,300 --> 01:40:07,300
this rectangle

1847
01:40:08,300 --> 01:40:12,700
Render this, you know, sub wrecked basically of the frame buffer and

1848
01:40:12,700 --> 01:40:17,800
you're either even lines or your odd lines, right?

1849
01:40:18,500 --> 01:40:22,500
This is how it works and then we just dispatch, we have a thing, which

1850
01:40:22,500 --> 01:40:25,100
will basically go through and do that.

1851
01:40:26,200 --> 01:40:28,500
Across as many things as we want.

1852
01:40:28,600 --> 01:40:31,100
So we can basically just set parameters at the top of it.

1853
01:40:31,100 --> 01:40:35,900
That's a how many rectangles what their layout is and then it'll issue

1854
01:40:35,900 --> 01:40:41,900
even and odd lines of each of those to each core based on, you know,

1855
01:40:42,100 --> 01:40:47,000
which ones are on which which which threads are on which core so

1856
01:40:47,000 --> 01:40:48,500
that's what I'm thinking, right?

1857
01:40:50,300 --> 01:40:52,600
So, we can simulate that pretty easily, right?

1858
01:40:52,700 --> 01:40:53,800
I can turn this off for now.

1859
01:40:55,300 --> 01:40:58,300
But, well, you know what I can do at the very first thing is, I can

1860
01:40:58,300 --> 01:41:02,300
say, well, doing even and odd lines is really pretty easy, right?

1861
01:41:02,600 --> 01:41:07,200
All that involves is a pre step two step, you know, one to start one

1862
01:41:07,200 --> 01:41:11,200
down, you know, like y Min would just be pre stepped down by one,

1863
01:41:11,400 --> 01:41:11,800
right?

1864
01:41:11,900 --> 01:41:16,500
So we could basically just do like, you know, if if even or whatever,

1865
01:41:16,700 --> 01:41:19,300
if you're the even lines, are the odds,

1866
01:41:20,200 --> 01:41:24,600
So I guess if you're the odd lines you know why Min plus equals one

1867
01:41:24,800 --> 01:41:26,500
would be about it, right?

1868
01:41:26,600 --> 01:41:29,600
So when we do this thing where we do Wyman wax, we just do it that

1869
01:41:29,900 --> 01:41:30,400
right?

1870
01:41:30,900 --> 01:41:35,200
That be all there is to it and I assume that we're when we do our, I

1871
01:41:35,200 --> 01:41:36,700
can't remember exactly where we're doing that.

1872
01:41:36,700 --> 01:41:39,200
But remember, yeah, we use y Min so we just work properly.

1873
01:41:40,300 --> 01:41:40,900
So

1874
01:41:43,000 --> 01:41:43,400
Jimmy.

1875
01:41:44,100 --> 01:41:46,400
So, you know, if we take a look at this, that's all we would have to

1876
01:41:46,400 --> 01:41:47,800
do to support odd lines.

1877
01:41:47,800 --> 01:41:53,700
Is that plus now when we actually step our pixel pitch, you can see

1878
01:41:53,700 --> 01:41:58,500
down here where we do buffer pitch, we just have to make buffer pitch.

1879
01:41:58,500 --> 01:41:59,400
Be a thing.

1880
01:42:00,000 --> 01:42:03,500
That we pre compute differently.

1881
01:42:03,600 --> 01:42:08,500
So that right here where we do our I guess our row Advanced might be a

1882
01:42:08,500 --> 01:42:09,800
better word to call it.

1883
01:42:10,000 --> 01:42:13,300
When we take that buffer pitch we would just take the buffer pitch and

1884
01:42:13,300 --> 01:42:15,700
we multiply it by 2, right?

1885
01:42:16,400 --> 01:42:20,000
So really, you know, you get a thing where Y is incrementing by 2 and

1886
01:42:20,000 --> 01:42:25,000
the buffer reduced twice, the buffer pitch for the row Advance, right?

1887
01:42:26,800 --> 01:42:29,900
And that would now draw like basically, you know, almost like

1888
01:42:30,000 --> 01:42:31,100
A screen pattern, right?

1889
01:42:31,100 --> 01:42:34,500
It's only going to draw every other line when we call this routine.

1890
01:42:34,900 --> 01:42:38,600
So if we look at, you know, we should be able to see it happen and

1891
01:42:38,600 --> 01:42:44,600
I'll just go ahead and and do Boule 32 odd here, right.

1892
01:42:47,500 --> 01:42:51,800
And what we can do is we can just pass through, you know, to do those

1893
01:42:51,800 --> 01:42:53,200
lines and what we should see.

1894
01:42:53,400 --> 01:42:58,600
Now in theory is when I run this, we should just have every other line

1895
01:42:58,600 --> 01:42:59,500
being drawn, right?

1896
01:42:59,500 --> 01:43:02,900
Which it just won't draw some of those lines, right?

1897
01:43:03,400 --> 01:43:06,700
And you can kind of see that's exactly what it's doing there, right?

1898
01:43:06,800 --> 01:43:08,300
It's only drawing every other line.

1899
01:43:10,100 --> 01:43:10,800
Although

1900
01:43:12,000 --> 01:43:12,700
Looks a little.

1901
01:43:13,100 --> 01:43:14,200
Why is it blinking out?

1902
01:43:14,200 --> 01:43:16,900
It should, it should always still draw.

1903
01:43:24,900 --> 01:43:26,600
Oh, all right.

1904
01:43:27,400 --> 01:43:32,100
Yeah, I just realized something that's not quite what I wanted to do

1905
01:43:32,100 --> 01:43:32,500
there.

1906
01:43:35,200 --> 01:43:39,900
If I say only draw the odd lines, it has to first see, whether it's

1907
01:43:39,900 --> 01:43:44,600
odd to figure out, whether it should pre step it, right?

1908
01:43:45,100 --> 01:43:49,100
That's that was pretty dumb of me, actually, draw a rectangle quickly

1909
01:43:52,200 --> 01:43:55,300
So if I say, I want to draw the odd lines, I first have to see,

1910
01:43:55,500 --> 01:43:59,200
whether it's odd or not to know, whether I step, right?

1911
01:43:59,600 --> 01:44:04,100
So, what I would actually need to do here is say, like, okay, if I

1912
01:44:04,100 --> 01:44:12,200
mod, you know, and Wyman is actually odd, right?

1913
01:44:13,400 --> 01:44:18,300
So I would have to say if y Min ma to, I should probably do if even

1914
01:44:18,700 --> 01:44:19,700
and why mid mod 2.

1915
01:44:19,800 --> 01:44:20,800
That's what that tells me.

1916
01:44:25,100 --> 01:44:29,700
Okay, so if I'm supposed to draw the evens, but the why that I was

1917
01:44:29,700 --> 01:44:32,900
supposed to say that I was going to start on is actually odd.

1918
01:44:33,200 --> 01:44:36,800
Then I have to move to the next line and then I can go right and then

1919
01:44:36,800 --> 01:44:37,500
I can do it.

1920
01:44:39,900 --> 01:44:44,700
So yeah, okay, so there's that so that's that's more what I was trying

1921
01:44:44,700 --> 01:44:47,000
to do here but I still don't understand the flashing.

1922
01:44:47,000 --> 01:44:48,600
I feel like I still got one thing.

1923
01:44:48,600 --> 01:44:51,600
That doesn't make sense because it should just be.

1924
01:44:51,600 --> 01:44:54,200
It should just look exactly.

1925
01:44:54,200 --> 01:44:56,600
Like only every other line is.

1926
01:44:58,300 --> 01:44:59,800
It's being drawn and I'm not sure.

1927
01:45:00,500 --> 01:45:00,800
Why?

1928
01:45:00,800 --> 01:45:04,700
That isn't what it looks like, right?

1929
01:45:06,800 --> 01:45:11,000
like, I don't understand, like if you look at that, I don't understand

1930
01:45:11,200 --> 01:45:12,400
why I'm getting

1931
01:45:14,000 --> 01:45:16,400
A yellowed version of the guy here.

1932
01:45:17,600 --> 01:45:22,600
And a non yellowed version of the guy here that does not make sense to

1933
01:45:22,600 --> 01:45:22,900
me.

1934
01:45:23,500 --> 01:45:24,000
Right?

1935
01:45:24,400 --> 01:45:30,000
Because what I should be seeing is just an every other line version of

1936
01:45:30,000 --> 01:45:31,100
the thing, right?

1937
01:45:31,100 --> 01:45:32,900
That's what I should be seeing, I would think.

1938
01:45:34,500 --> 01:45:38,000
Now what I can do is make sure that I clear I don't actually know if

1939
01:45:38,000 --> 01:45:39,200
we clear the frame of front.

1940
01:45:39,200 --> 01:45:43,600
We do, we clear the flavor a so that should be working and doesn't

1941
01:45:43,700 --> 01:45:45,400
make super good sense to me.

1942
01:45:50,600 --> 01:45:52,200
alright, let's try to figure out why that is

1943
01:45:53,400 --> 01:45:56,000
Also, I want to try to draw a rectangle quickly.

1944
01:46:00,500 --> 01:46:03,600
If I change it to false, we should see the other lines, right?

1945
01:46:11,600 --> 01:46:12,700
Yeah, so that's just not.

1946
01:46:13,000 --> 01:46:15,700
I've, I've done it incorrectly.

1947
01:46:16,500 --> 01:46:18,600
This is not, I did not do what I wanted.

1948
01:46:21,900 --> 01:46:23,200
Oh yeah.

1949
01:46:23,700 --> 01:46:28,500
Well, so for even and Run online, we need to add but we need to do the

1950
01:46:28,500 --> 01:46:29,900
opposite as well.

1951
01:46:31,300 --> 01:46:33,100
So, we kind of need to do.

1952
01:46:35,300 --> 01:46:37,100
This is more of an equals, right?

1953
01:46:37,300 --> 01:46:39,600
What we need to do is this

1954
01:46:41,000 --> 01:46:42,500
we need to say, right?

1955
01:46:42,500 --> 01:46:46,100
I don't know how to draw this out in the best possible way here, but

1956
01:46:50,000 --> 01:46:52,400
So this is what we do.

1957
01:46:52,400 --> 01:46:54,200
This is if we do evens.

1958
01:46:57,200 --> 01:46:59,800
And we do odds, right?

1959
01:47:00,000 --> 01:47:01,200
And I guess I set this the other way.

1960
01:47:01,200 --> 01:47:02,800
So this would be, we had even.

1961
01:47:02,800 --> 01:47:09,900
So if even is set to 0 or 1, and if the so the bottom bit is either

1962
01:47:09,900 --> 01:47:14,400
set to 0, oops 0 or 1, right?

1963
01:47:15,400 --> 01:47:18,700
So this right here is the address that we're writing to or sorry, the

1964
01:47:18,700 --> 01:47:19,400
line number

1965
01:47:20,300 --> 01:47:23,100
Right, the row number this will call it.

1966
01:47:23,400 --> 01:47:24,300
This is our row.

1967
01:47:26,100 --> 01:47:30,100
So if the row number is actually even right?

1968
01:47:30,100 --> 01:47:32,700
So it's 0 2, 4 6, right?

1969
01:47:32,700 --> 01:47:34,900
So this is an even row, right?

1970
01:47:35,400 --> 01:47:40,300
Then we want to we want to advance only here, right?

1971
01:47:42,100 --> 01:47:43,100
We don't Advance here.

1972
01:47:44,300 --> 01:47:50,000
If it was an odd row, then we would want to leave it or we would

1973
01:47:50,000 --> 01:47:50,500
Advance here.

1974
01:47:50,500 --> 01:47:53,100
So really what I want to show here, right?

1975
01:47:53,100 --> 01:47:57,500
Was that what we wanted to do was say if the value passed in for even

1976
01:47:57,500 --> 01:48:00,000
matches the value of

1977
01:48:00,000 --> 01:48:03,600
That bottom bit then we do it right.

1978
01:48:03,600 --> 01:48:04,800
So it's basically like Annie.

1979
01:48:04,800 --> 01:48:06,300
It's an equals here.

1980
01:48:06,500 --> 01:48:14,400
It's saying you know if even equals true, right right, if even is

1981
01:48:14,400 --> 01:48:14,800
true,

1982
01:48:21,500 --> 01:48:22,900
Then we want to.

1983
01:48:30,700 --> 01:48:32,000
I'll talk to the other way around.

1984
01:48:36,100 --> 01:48:38,100
So I guess we do want this to be odd, right?

1985
01:48:38,100 --> 01:48:41,400
I want to be able to make it do this, right?

1986
01:48:43,100 --> 01:48:44,600
I want to be able to make it be this.

1987
01:48:45,700 --> 01:48:47,100
I want to basically say,

1988
01:48:49,800 --> 01:48:52,400
I guess I could say not even which would also guarantee that it would

1989
01:48:52,400 --> 01:48:54,400
convert it to a 0 or 1 for me.

1990
01:48:54,500 --> 01:48:55,400
So that might be fine.

1991
01:48:55,900 --> 01:48:57,200
So if not even

1992
01:48:58,600 --> 01:49:02,700
equals the actual mod value of this thing, right?

1993
01:49:02,700 --> 01:49:05,100
The actual bottom bit, we could also say and one, right?

1994
01:49:05,100 --> 01:49:09,500
Whatever that bottom bit is of the road, then we need to advance it.

1995
01:49:12,800 --> 01:49:13,600
so,

1996
01:49:17,700 --> 01:49:20,300
That should be more what I wanted.

1997
01:49:21,400 --> 01:49:21,800
Okay.

1998
01:49:22,000 --> 01:49:26,600
So now what I wanted to do for our rectangle quickly is we should be

1999
01:49:26,600 --> 01:49:27,500
able to see

2000
01:49:29,100 --> 01:49:32,300
Glee This flip back and forth, right?

2001
01:49:35,300 --> 01:49:35,800
In theory.

2002
01:49:41,000 --> 01:49:43,500
And it still does not seem to be doing it.

2003
01:49:44,100 --> 01:49:45,500
What is going on here?

2004
01:49:49,700 --> 01:49:50,300
All right.

2005
01:49:50,800 --> 01:49:52,100
What is the problem people?

2006
01:49:52,900 --> 01:49:54,100
Oh, yeah.

2007
01:49:54,100 --> 01:49:58,300
Well why I think it's so many things that I forgot to think about in

2008
01:49:58,300 --> 01:49:59,300
that step.

2009
01:50:00,100 --> 01:50:00,400
I did.

2010
01:50:00,400 --> 01:50:04,600
Forget one obvious thing, which is that we're not pre stepping the

2011
01:50:04,600 --> 01:50:04,900
texture.

2012
01:50:04,900 --> 01:50:05,400
Probably.

2013
01:50:05,400 --> 01:50:05,900
Right.

2014
01:50:08,200 --> 01:50:11,300
P and X floor test P.

2015
01:50:14,500 --> 01:50:17,100
So first of all, you can't do it there.

2016
01:50:18,100 --> 01:50:19,800
Got to do it after we clip.

2017
01:50:20,100 --> 01:50:20,700
Right.

2018
01:50:21,100 --> 01:50:23,400
Like so, so that has to happen.

2019
01:50:26,100 --> 01:50:27,500
That's still not doing it after Eclipse.

2020
01:50:27,500 --> 01:50:29,600
Oh, there's all of our processing for that.

2021
01:50:29,600 --> 01:50:30,700
So we got to do that.

2022
01:50:30,700 --> 01:50:32,600
So that way, it'll happen after the clipping.

2023
01:50:33,500 --> 01:50:35,400
And then, where do we preset the texture?

2024
01:50:38,400 --> 01:50:41,200
Rho equals buffer memory row, Advanced extra memory.

2025
01:50:41,200 --> 01:50:42,800
Okay, so those are just we don't have right?

2026
01:50:42,800 --> 01:50:45,000
We don't have to re-type sex anymore because those are using bees.

2027
01:50:45,800 --> 01:50:47,700
Alright, so that was probably why we were get.

2028
01:50:47,700 --> 01:50:50,500
Yeah, okay, so now we look like what I thought we should look like.

2029
01:50:50,500 --> 01:50:53,500
So, it's just because I was doing that in the wrong place, stupidly.

2030
01:50:53,900 --> 01:50:54,600
So, there we go.

2031
01:50:56,100 --> 01:50:59,400
And now hopefully, when I do my switch, it'll actually work the way I

2032
01:50:59,400 --> 01:50:59,800
wanted it to

2033
01:51:01,400 --> 01:51:03,200
Which is that we should see the other rows.

2034
01:51:04,600 --> 01:51:05,200
There we go.

2035
01:51:06,000 --> 01:51:07,800
So that's what I actually wanted.

2036
01:51:07,800 --> 01:51:08,700
So now, that's good.

2037
01:51:09,600 --> 01:51:13,200
Alright, so now we're drawing every other row, right?

2038
01:51:13,500 --> 01:51:16,800
Which means that I feel like I should be able to do this where I can

2039
01:51:16,800 --> 01:51:21,900
draw twice in a row with the two separate ones and you can see that I

2040
01:51:21,900 --> 01:51:27,200
get out the full composite result, right?

2041
01:51:28,600 --> 01:51:29,300
So that's good.

2042
01:51:31,200 --> 01:51:32,700
Our cycle counts are wrong now.

2043
01:51:33,300 --> 01:51:36,500
So I should probably fix that so that we don't make a mistake.

2044
01:51:42,600 --> 01:51:44,900
So in draw rectangle quickly.

2045
01:51:46,100 --> 01:51:49,800
We, you know, in order to not actually have two time each time through

2046
01:51:49,800 --> 01:51:52,100
the loop so that we wouldn't affect things negatively.

2047
01:51:53,100 --> 01:51:55,200
This value, this is actually wrong now.

2048
01:51:56,300 --> 01:52:00,400
So we're actually doing half of these right?

2049
01:52:02,400 --> 01:52:04,700
So that's the way that goes right?

2050
01:52:04,800 --> 01:52:10,400
And there's also another thing here which is that, if the if the Y Min

2051
01:52:10,400 --> 01:52:12,300
well I'll do it since it's not super expensive.

2052
01:52:12,300 --> 01:52:13,100
I'll do it up here.

2053
01:52:13,300 --> 01:52:14,900
I'll also do if y min

2054
01:52:16,700 --> 01:52:19,200
Tweet, we Loop through to thing.

2055
01:52:21,700 --> 01:52:22,900
Equal to Y Max.

2056
01:52:23,700 --> 01:52:28,800
So if in here y Min was actually greater than I mean.

2057
01:52:28,800 --> 01:52:31,900
They like the only thing I'm worried about here is basically if that

2058
01:52:31,900 --> 01:52:36,200
pre step movement actually were to move y, Min to be greater than 1 x.

2059
01:52:36,200 --> 01:52:38,600
This would miscount want to put it to do here.

2060
01:52:40,300 --> 01:52:41,700
Clamp counters.

2061
01:52:44,300 --> 01:52:44,900
Right?

2062
01:52:45,400 --> 01:52:46,800
We want to clamp our counter ad.

2063
01:52:46,800 --> 01:52:48,100
In fact, I'm going to put that

2064
01:52:51,100 --> 01:52:53,400
I'm going to put that actually in the

2065
01:52:55,600 --> 01:52:58,000
handmade platform.

2066
01:52:58,000 --> 01:53:02,300
I'm going to put that in the actual block enter stuff.

2067
01:53:06,400 --> 01:53:10,400
because if the clamp counter is so that if a calc

2068
01:53:13,400 --> 01:53:20,900
Is this a clamp and time, but counted, so that, if we're if the calc

2069
01:53:20,900 --> 01:53:23,100
is wrong, it won't overflow.

2070
01:53:23,700 --> 01:53:26,600
The thing we can do here is people were asking on the forums for this

2071
01:53:27,100 --> 01:53:30,000
just to give them an easier time of compiling other platforms.

2072
01:53:30,500 --> 01:53:34,900
I think there were saying doing the our dtsc they were asking if we

2073
01:53:34,900 --> 01:53:38,200
could make the intrinsic stuff different.

2074
01:53:38,200 --> 01:53:42,800
They were saying that basically x86 intron was what was necessary.

2075
01:53:44,300 --> 01:53:46,900
I don't know if you maybe we can do that on all the platforms.

2076
01:53:47,600 --> 01:53:48,500
No, I guess not.

2077
01:53:49,100 --> 01:53:51,100
So you know,

2078
01:53:53,100 --> 01:53:54,600
you could do something like this for them.

2079
01:53:57,500 --> 01:53:59,500
And hope that that works, I don't know if it will.

2080
01:54:01,600 --> 01:54:03,300
But that'll give him something to play with.

2081
01:54:03,300 --> 01:54:04,500
First of all, they can do it.

2082
01:54:04,500 --> 01:54:09,500
Oh, and I guess we could do this we go.

2083
01:54:13,500 --> 01:54:14,700
Could even do something like this.

2084
01:54:16,300 --> 01:54:18,500
We could issue an error right.

2085
01:54:18,500 --> 01:54:21,500
Is that the right way to do it?

2086
01:54:24,200 --> 01:54:24,700
See here.

2087
01:54:24,700 --> 01:54:25,900
It might be a pragma error.

2088
01:54:28,400 --> 01:54:30,600
Preprocessor error.

2089
01:54:32,300 --> 01:54:33,700
Lb are directive.

2090
01:54:34,000 --> 01:54:37,200
So if you want to emit an error we can do it this way like you can

2091
01:54:37,200 --> 01:54:37,600
see.

2092
01:54:38,300 --> 01:54:40,900
So we could say that if none of these were here it's like

2093
01:54:42,600 --> 01:54:43,100
You know.

2094
01:54:46,000 --> 01:54:46,900
SSE.

2095
01:54:49,500 --> 01:54:57,400
Neon optimizations are not available for this platform yet, Pilar.

2096
01:54:59,500 --> 01:55:01,100
Just so it knows.

2097
01:55:01,500 --> 01:55:01,900
Okay.

2098
01:55:02,600 --> 01:55:03,100
So,

2099
01:55:04,700 --> 01:55:07,800
not that we have neon optimizations for anything, but still

2100
01:55:08,900 --> 01:55:10,700
So yeah.

2101
01:55:12,400 --> 01:55:15,300
Now that we've got that and we've got our counter working properly.

2102
01:55:15,300 --> 01:55:19,800
Now now we've got it so that we can do every other line, which is

2103
01:55:19,800 --> 01:55:20,300
good.

2104
01:55:20,500 --> 01:55:23,000
And so the other thing I'd like to do is make it so that we can

2105
01:55:23,000 --> 01:55:27,600
properly do the frame buffer split up in those ways as well.

2106
01:55:28,300 --> 01:55:32,000
So, in order to do that, what I need to do is I need to make it so

2107
01:55:32,000 --> 01:55:35,300
that when we draw the bitmap, the clipping is not based on the buffer

2108
01:55:35,300 --> 01:55:36,500
but on something else.

2109
01:55:36,900 --> 01:55:41,100
So inside draw a rectangle quickly you can see here how we do this,

2110
01:55:41,100 --> 01:55:41,700
right?

2111
01:55:41,800 --> 01:55:41,900
It

2112
01:55:42,300 --> 01:55:48,800
X-Men xmax ymin and ymax to these four values all we would have to do

2113
01:55:48,800 --> 01:55:51,300
if we want to clip to a smaller rectangle is set those two different

2114
01:55:51,300 --> 01:55:51,800
things right.

2115
01:55:51,800 --> 01:55:53,400
In fact I shouldn't have Shrunk the window.

2116
01:55:53,400 --> 01:55:56,400
I shouldn't have explained it the window up because we can see right

2117
01:55:56,400 --> 01:55:59,100
here the results of it, right?

2118
01:55:59,100 --> 01:56:02,600
So if I want to, I can switch over, I can say oh you know what?

2119
01:56:05,400 --> 01:56:07,600
Oh well actually this is the inverse this finds the rectangle.

2120
01:56:08,200 --> 01:56:10,500
So it's a sorry it's this part right here, right?

2121
01:56:10,900 --> 01:56:11,400
Here's what we do.

2122
01:56:11,400 --> 01:56:12,100
Are clamping.

2123
01:56:12,800 --> 01:56:16,800
So if I wanted to I can just introduce here some new values, right?

2124
01:56:17,300 --> 01:56:24,700
Which is like you know like say our car clip X-Men clip climb in

2125
01:56:27,500 --> 01:56:29,400
Like so perfect.

2126
01:56:29,400 --> 01:56:35,000
Max the climax and I can just put those in here in instead of the

2127
01:56:35,000 --> 01:56:36,200
other values, right?

2128
01:56:36,500 --> 01:56:39,400
So I can just do this is going to be clip X-Men.

2129
01:56:42,300 --> 01:56:43,200
And clip Wyman.

2130
01:56:45,400 --> 01:56:47,800
That clip X-Men.

2131
01:56:49,800 --> 01:56:51,200
Clip xmax.

2132
01:56:52,900 --> 01:56:53,700
WiMAX.

2133
01:56:59,700 --> 01:56:59,900
there we

2134
01:57:01,700 --> 01:57:04,500
So, if I put that in there now, we should get it basically the exact

2135
01:57:04,500 --> 01:57:05,600
same result if I run it.

2136
01:57:05,600 --> 01:57:06,400
So that's good.

2137
01:57:06,900 --> 01:57:09,300
And you can see that it's doing the same thing.

2138
01:57:10,000 --> 01:57:14,000
But now, what I can do is say, oh, you know, I really didn't want to

2139
01:57:14,100 --> 01:57:20,100
do the upper corner or whatever, right and you can see that.

2140
01:57:20,400 --> 01:57:24,900
Now we're only doing this one region of the screen and I can say oh

2141
01:57:24,900 --> 01:57:28,500
yeah like really I just I just only want to do this 1256.

2142
01:57:29,700 --> 01:57:30,100
I mean what?

2143
01:57:30,300 --> 01:57:32,900
One 128 by 128 chunk, right?

2144
01:57:33,100 --> 01:57:37,000
And now, it's only rendering that piece, right?

2145
01:57:37,500 --> 01:57:38,600
Which is what we wanted.

2146
01:57:44,100 --> 01:57:45,900
Pretty straightforward, right?

2147
01:57:45,900 --> 01:57:46,800
Pretty simple stuff.

2148
01:57:47,500 --> 01:57:48,400
So, that's good.

2149
01:57:48,400 --> 01:57:52,500
The only thing I'm a little weirded out by the edge motion there.

2150
01:57:53,700 --> 01:57:57,500
Because I'm not sure why that edge should be moving.

2151
01:57:59,800 --> 01:58:01,500
That should not be happening.

2152
01:58:06,600 --> 01:58:07,800
I don't like that.

2153
01:58:09,200 --> 01:58:10,700
Why are we getting that behavior?

2154
01:58:11,700 --> 01:58:15,500
We're doing our clipping, we're doing our even odd which is fine

2155
01:58:15,500 --> 01:58:16,900
because that has nothing to do with it.

2156
01:58:17,700 --> 01:58:20,500
But why are we not filling the entire rectangle?

2157
01:58:20,500 --> 01:58:21,200
Every time?

2158
01:58:21,200 --> 01:58:24,500
Because we should basically have everything that wants to fill in

2159
01:58:24,500 --> 01:58:26,100
there should be filling in there?

2160
01:58:26,600 --> 01:58:28,600
I don't understand why that's the case.

2161
01:58:32,700 --> 01:58:34,900
It's like are stepping over over.

2162
01:58:34,900 --> 01:58:36,700
Xmax is not quite correct.

2163
01:58:49,400 --> 01:58:51,300
I'm not sure what's going on there.

2164
01:58:52,600 --> 01:58:54,100
I am not sure.

2165
01:58:58,000 --> 01:59:00,600
So let me take a look here.

2166
01:59:05,700 --> 01:59:06,800
What something that will.

2167
01:59:09,100 --> 01:59:10,800
Yes, you can kind of see.

2168
01:59:13,800 --> 01:59:19,400
So I feel like What's Happening Here is we're being too conservative

2169
01:59:19,400 --> 01:59:22,100
on like the right hand side clipping.

2170
01:59:23,600 --> 01:59:24,000
Right?

2171
01:59:24,000 --> 01:59:29,400
It's like it's not actually always doing.

2172
01:59:31,300 --> 01:59:32,700
The right number of things.

2173
01:59:32,700 --> 01:59:33,200
Now,

2174
01:59:35,100 --> 01:59:38,000
Okay, so I think I get what's going on here.

2175
01:59:39,400 --> 01:59:41,800
So okay now that actually makes perfect sense.

2176
01:59:42,000 --> 01:59:45,800
So what's happening here is just that since we're writing by 4 pixels

2177
01:59:45,800 --> 01:59:52,500
every time but we're not actually writing by 4 pixels aligned to where

2178
01:59:52,500 --> 01:59:54,000
the clip buffer starts.

2179
01:59:54,200 --> 01:59:58,200
It's wherever the texture starts, we'll go over by that many.

2180
01:59:59,500 --> 01:59:59,800
however,

2181
02:00:00,000 --> 02:00:01,500
Need, the alignment is off.

2182
02:00:04,300 --> 02:00:05,300
That's interesting.

2183
02:00:06,700 --> 02:00:11,800
So, with that suggests to me, is that either because will want this to

2184
02:00:11,800 --> 02:00:13,200
line up properly, right?

2185
02:00:13,200 --> 02:00:17,300
We don't want once we break these up into chunks and assign them to

2186
02:00:17,300 --> 02:00:18,400
different cores.

2187
02:00:18,400 --> 02:00:23,000
We don't want to cores writing into the same memory because they may

2188
02:00:23,600 --> 02:00:25,800
overlap improperly, right?

2189
02:00:26,400 --> 02:00:27,400
So we don't want to do that.

2190
02:00:27,400 --> 02:00:29,000
We want them to be perfectly clipped.

2191
02:00:29,300 --> 02:00:35,000
So either if we, if we want to continue doing this unaligned right,

2192
02:00:35,300 --> 02:00:36,300
then what we would need to do.

2193
02:00:36,500 --> 02:00:39,900
You is when we get to the end, right?

2194
02:00:40,500 --> 02:00:43,200
And we actually would probably aligned to the end and do it at the

2195
02:00:43,200 --> 02:00:43,600
beginning.

2196
02:00:43,600 --> 02:00:45,400
We probably do the first time through the loop.

2197
02:00:45,800 --> 02:00:49,200
We would preload the first time through the loop weed.

2198
02:00:49,200 --> 02:00:56,100
Preload the mask for writing to be something you and in where it's

2199
02:00:56,100 --> 02:00:59,900
it's got that those first few pixels, masked out so that it doesn't

2200
02:00:59,900 --> 02:01:00,500
write them.

2201
02:01:02,900 --> 02:01:05,800
that's what we would probably do there, but

2202
02:01:13,400 --> 02:01:17,500
The question is, do we just want to always right aligned anyway?

2203
02:01:18,100 --> 02:01:19,600
Right, that's the other question.

2204
02:01:19,900 --> 02:01:23,700
Do we just want to try and always right aligned because maybe aligned

2205
02:01:23,700 --> 02:01:26,100
rights would be faster and we don't know because we haven't tried

2206
02:01:26,100 --> 02:01:26,500
that.

2207
02:01:27,700 --> 02:01:32,500
So what we can do is we could do a quick test to see right here.

2208
02:01:32,500 --> 02:01:34,500
We are running around.

2209
02:01:35,000 --> 02:01:37,000
It's all bundle.

2210
02:01:37,000 --> 02:01:37,700
Oh fun.

2211
02:01:37,900 --> 02:01:39,000
You can see it happening here.

2212
02:01:43,200 --> 02:01:44,500
Okay.

2213
02:01:48,500 --> 02:01:50,300
Why is our count wrong now?

2214
02:01:52,400 --> 02:01:53,500
Did I miss something?

2215
02:01:54,200 --> 02:01:56,200
Our count is now totally bogus.

2216
02:02:03,700 --> 02:02:05,800
How did our count get busted?

2217
02:02:06,800 --> 02:02:08,200
You see what I'm looking at, right?

2218
02:02:10,500 --> 02:02:13,300
Why are we getting one cycle per pixel all of a sudden?

2219
02:02:15,500 --> 02:02:16,800
What's going on there?

2220
02:02:18,200 --> 02:02:21,900
I don't understand, there's no way to get one cycle per pixel.

2221
02:02:21,900 --> 02:02:23,600
That's not even, theoretically possible.

2222
02:02:24,400 --> 02:02:29,100
So that's just a bogus value but I don't actually know why we're

2223
02:02:29,100 --> 02:02:30,700
getting said, bogus value,

2224
02:02:32,400 --> 02:02:34,900
Because this is still the right number, right?

2225
02:02:34,900 --> 02:02:37,700
That were passing, we're passing in half.

2226
02:02:37,700 --> 02:02:42,200
The why span X-Men - yeah, right.

2227
02:02:42,400 --> 02:02:45,100
And we're just dividing by 2 the number that we're submitting for

2228
02:02:45,100 --> 02:02:46,000
process pixel.

2229
02:02:50,700 --> 02:02:51,700
And it was working.

2230
02:02:51,700 --> 02:02:53,700
I mean it worked properly when we did it before.

2231
02:02:54,300 --> 02:02:59,300
So like something is busted now where our counts are totally are

2232
02:02:59,300 --> 02:02:59,800
totally irrelevant.

2233
02:03:00,000 --> 02:03:02,700
Yes, which I don't get.

2234
02:03:08,200 --> 02:03:09,700
so, I suppose

2235
02:03:10,900 --> 02:03:11,800
That is exact.

2236
02:03:11,800 --> 02:03:14,100
Well, you know what, that probably is, probably exactly the thing that

2237
02:03:14,100 --> 02:03:14,800
I said it was.

2238
02:03:15,100 --> 02:03:18,300
It's probably that when this thing gets clipped the weinman in the,

2239
02:03:18,300 --> 02:03:20,700
why Mac this actually becomes like a negative number.

2240
02:03:21,100 --> 02:03:23,200
And then this goes backwards.

2241
02:03:25,000 --> 02:03:27,400
Let's go ahead and find out if that's the case.

2242
02:03:33,700 --> 02:03:35,500
You know what, I just realized I realized something else.

2243
02:03:35,500 --> 02:03:38,300
I mean, there's so many things, I think, normally when I don't, when I

2244
02:03:38,300 --> 02:03:40,000
only see him for an hour, things are kind of compressed.

2245
02:03:40,000 --> 02:03:42,100
I'm thinking about all these things in the code now, because I'm like

2246
02:03:42,100 --> 02:03:44,100
in the code for long enough, you know, what else?

2247
02:03:44,100 --> 02:03:48,400
I just realized, we were running our assertions when we were looking

2248
02:03:48,400 --> 02:03:49,800
at the Deep at the code.

2249
02:03:50,700 --> 02:03:53,100
Like, until I replaced those fetches.

2250
02:03:53,200 --> 02:03:56,100
The assertions were actually in there, right?

2251
02:03:56,200 --> 02:03:59,300
Because we didn't actually take out our assertions, did we?

2252
02:04:03,500 --> 02:04:06,500
Like handmade internal in handmade, slow are still set.

2253
02:04:07,700 --> 02:04:10,500
Right, all we were doing is flipping 02.

2254
02:04:11,500 --> 02:04:15,100
So basically the assertions that were for on the fetches, we're still

2255
02:04:15,100 --> 02:04:19,800
in there and somehow because they were basically branches that never

2256
02:04:19,800 --> 02:04:25,200
actually occurred, I guess somehow they were never costing us

2257
02:04:25,200 --> 02:04:25,800
anything.

2258
02:04:27,100 --> 02:04:30,200
Or the compiler, somehow magically was able to figure out that, it

2259
02:04:30,200 --> 02:04:33,500
couldn't possibly happen because of the min max, I don't even know,

2260
02:04:33,800 --> 02:04:35,100
but that was kind of weird.

2261
02:04:35,600 --> 02:04:35,900
All right.

2262
02:04:35,900 --> 02:04:38,400
Well, it doesn't really matter point.

2263
02:04:38,400 --> 02:04:38,900
Being

2264
02:04:41,400 --> 02:04:42,800
What I want to do here is an end time.

2265
02:04:42,800 --> 02:04:44,000
Block counted for a second.

2266
02:04:44,700 --> 02:04:47,500
I want to go ahead and see if what I just said is actually the case

2267
02:04:47,500 --> 02:04:48,600
but I suspect that it is.

2268
02:04:48,900 --> 02:04:50,600
In fact I can just go ahead and do it in here.

2269
02:04:51,300 --> 02:04:54,600
Let's go ahead and do build up at and I'll do 02 d.

2270
02:05:00,500 --> 02:05:01,100
and,

2271
02:05:06,000 --> 02:05:08,400
yeah, so when I step into here,

2272
02:05:13,100 --> 02:05:14,700
Or not.

2273
02:05:14,800 --> 02:05:16,300
Why are we not break pointing?

2274
02:05:19,200 --> 02:05:19,800
Hello.

2275
02:05:21,700 --> 02:05:22,300
Hello, mr.

2276
02:05:22,300 --> 02:05:23,000
Code.

2277
02:05:23,500 --> 02:05:25,700
I would like you to break those out the wrong.

2278
02:05:27,000 --> 02:05:27,400
That's right.

2279
02:05:27,400 --> 02:05:28,300
Darkness slowly.

2280
02:05:29,100 --> 02:05:30,700
All right, my bad.

2281
02:05:31,000 --> 02:05:32,700
Draw a rectangle slowly.

2282
02:05:33,400 --> 02:05:33,900
Here we go.

2283
02:05:35,000 --> 02:05:39,200
So if you step in here, I assume that's what I will find.

2284
02:05:39,900 --> 02:05:45,600
Go to disassembly is that this value is actually wrong, right?

2285
02:05:45,600 --> 02:05:50,300
Like this value is actually getting to be negative, so, let's actually

2286
02:05:50,300 --> 02:05:52,400
find out if that is the case.

2287
02:05:53,200 --> 02:05:55,800
So there's the moles

2288
02:05:56,800 --> 02:05:59,900
and let's see, we have

2289
02:06:00,000 --> 02:06:01,000
To do.

2290
02:06:02,200 --> 02:06:04,000
We have to do.

2291
02:06:05,100 --> 02:06:07,400
What is it actually increment this value.

2292
02:06:07,400 --> 02:06:08,300
Let's take a look here.

2293
02:06:09,000 --> 02:06:12,000
So that is in our debug counters, right?

2294
02:06:12,000 --> 02:06:13,400
So, this is in global memory.

2295
02:06:16,000 --> 02:06:18,600
What's that actually called global global cane memory?

2296
02:06:20,200 --> 02:06:21,300
Debug level memory.

2297
02:06:22,700 --> 02:06:24,100
That's in debug level memory.

2298
02:06:24,900 --> 02:06:25,800
Here's our counters.

2299
02:06:27,400 --> 02:06:30,600
Here's the actual cycle count that we're looking for their I guess,

2300
02:06:32,700 --> 02:06:32,900
right?

2301
02:06:32,900 --> 02:06:35,000
Because this number three is the one we're talking about.

2302
02:06:35,400 --> 02:06:39,500
So as we come through here, that one actually worked with the hit

2303
02:06:39,500 --> 02:06:40,300
count.

2304
02:06:41,300 --> 02:06:42,900
So the hit counts, what we're looking for.

2305
02:06:46,000 --> 02:06:46,500
It's at six.

2306
02:06:46,500 --> 02:06:48,000
Six, nine, two four.

2307
02:06:54,500 --> 02:07:00,300
Yeah, so it's just incrementing the cycle count, but the hit count.

2308
02:07:01,400 --> 02:07:02,200
Is bogus.

2309
02:07:04,700 --> 02:07:05,700
My thing is that should

2310
02:07:07,500 --> 02:07:09,400
Ah no I bet.

2311
02:07:09,700 --> 02:07:12,000
So if those are you at 32 s?

2312
02:07:12,400 --> 02:07:19,100
Probably it just becomes very large negative and at some point and

2313
02:07:19,100 --> 02:07:21,500
wraps around or something like that you can see it happening.

2314
02:07:21,500 --> 02:07:22,900
See the hit count going down.

2315
02:07:23,500 --> 02:07:26,400
So the hit count, probably keeps going down because it produces a

2316
02:07:26,400 --> 02:07:29,600
negative number because it overflows the negative number.

2317
02:07:29,900 --> 02:07:30,200
Yeah.

2318
02:07:30,200 --> 02:07:35,400
Then probably wraps the hit count around until it's you know, goes

2319
02:07:35,400 --> 02:07:36,800
down below zero.

2320
02:07:37,500 --> 02:07:39,100
You can see it going down, right?

2321
02:07:39,200 --> 02:07:42,200
Goes down below zero and then it's a huge value.

2322
02:07:42,800 --> 02:07:44,900
Crap, didn't mean to type key there.

2323
02:07:45,300 --> 02:07:47,400
I wish you could tell that Visual Studio.

2324
02:07:47,900 --> 02:07:51,100
Like I would absolutely love a way to say do not.

2325
02:07:51,100 --> 02:07:52,200
Let me edit any code in here.

2326
02:07:52,200 --> 02:07:53,200
I never edit any code.

2327
02:07:53,200 --> 02:07:54,600
Just only show me the code.

2328
02:07:55,700 --> 02:07:56,200
So yeah.

2329
02:07:56,200 --> 02:07:59,800
So what we need to do in here is we need to just have a thing that

2330
02:08:00,500 --> 02:08:02,700
that's wise about that, right?

2331
02:08:03,500 --> 02:08:07,100
And not sure how we exactly

2332
02:08:07,200 --> 02:08:14,200
They want to do that, but I will probably want to do it in here so we

2333
02:08:14,200 --> 02:08:21,800
can actually do something like, you know pixel count.

2334
02:08:23,700 --> 02:08:25,000
And here is the pixel count.

2335
02:08:28,400 --> 02:08:29,000
Right?

2336
02:08:29,700 --> 02:08:32,000
And what I'll do is I'll just wrap it in an if

2337
02:08:36,900 --> 02:08:39,200
so, if x max

2338
02:08:40,600 --> 02:08:44,900
It's greater than equal to X Men and WiMAX is greater than equal to Y

2339
02:08:44,900 --> 02:08:45,300
Min.

2340
02:08:46,600 --> 02:08:47,300
Then do it.

2341
02:08:50,800 --> 02:08:51,600
Count.

2342
02:08:52,200 --> 02:08:53,900
Thank you compiler, for catching that.

2343
02:08:55,300 --> 02:08:58,800
So, now we shouldn't be having this ridiculous - naskh.

2344
02:08:58,900 --> 02:08:59,900
And hopefully, we

2345
02:09:00,000 --> 02:09:01,300
Our cycle count back, that's good.

2346
02:09:01,300 --> 02:09:03,500
That's what our debug said, count should look like.

2347
02:09:03,800 --> 02:09:07,100
And if we turn on O2, we should see it back down in the 30 to 40

2348
02:09:07,100 --> 02:09:07,500
range.

2349
02:09:07,500 --> 02:09:08,600
Like, it was supposed to be

2350
02:09:11,500 --> 02:09:11,800
Yeah.

2351
02:09:16,000 --> 02:09:16,600
All right.

2352
02:09:20,100 --> 02:09:23,400
Okay, so that's what we want and that's a good thing.

2353
02:09:24,500 --> 02:09:29,600
So now what we want to do is we pretty much want to just be able to

2354
02:09:29,600 --> 02:09:31,500
pass that in, and then we're pretty much done.

2355
02:09:31,500 --> 02:09:33,600
And the renderer we can multi-thread it.

2356
02:09:33,600 --> 02:09:34,800
We can start monitoring on a Monday.

2357
02:09:34,800 --> 02:09:39,400
The renderer will have the ability to sort of spam those things out to

2358
02:09:39,400 --> 02:09:40,900
different places, right?

2359
02:09:42,300 --> 02:09:43,600
So draw a rectangle quickly.

2360
02:09:45,300 --> 02:09:46,300
It takes that clipping.

2361
02:09:47,700 --> 02:09:52,900
It will need to get this passed into it and then we need to go figure

2362
02:09:52,900 --> 02:09:54,800
out what we want to do with that alignment stuff.

2363
02:09:54,800 --> 02:09:55,300
Right.

2364
02:09:55,300 --> 02:09:56,500
Maybe we'll do that tonight, too.

2365
02:09:56,600 --> 02:09:57,100
We're on it.

2366
02:09:57,100 --> 02:09:58,100
We're on, we're kind of going.

2367
02:09:58,100 --> 02:10:01,100
We're going for it, you know, sometimes you got to go for it.

2368
02:10:01,400 --> 02:10:02,600
I don't know how long we've been programming now.

2369
02:10:02,600 --> 02:10:03,000
Two hours.

2370
02:10:03,000 --> 02:10:03,500
Maybe.

2371
02:10:05,000 --> 02:10:05,800
So let's see.

2372
02:10:06,000 --> 02:10:09,900
So we've got these guys here, they do the clipping.

2373
02:10:09,900 --> 02:10:13,400
So we just need to make sure that this can be passed in.

2374
02:10:13,800 --> 02:10:15,400
We don't have right now.

2375
02:10:15,400 --> 02:10:20,700
A rectangle structure, that's in integer space which might be kind of

2376
02:10:20,700 --> 02:10:23,400
nice because that's kind of what we're doing here, right?

2377
02:10:23,700 --> 02:10:28,300
You know, if we had a rectangle to I that was basically like a you

2378
02:10:28,300 --> 02:10:32,600
know, just something that worked like this where it was like you know,

2379
02:10:32,800 --> 02:10:33,500
the sort of thing.

2380
02:10:37,100 --> 02:10:39,800
Might be easier for us to deal with because then we could kind of pass

2381
02:10:39,800 --> 02:10:42,200
these around and not have to have so many different things here.

2382
02:10:42,400 --> 02:10:46,000
And we could also just make a thing that does clipping with them.

2383
02:10:46,000 --> 02:10:48,200
So that like, you know, we don't have to repeat this kind of code all

2384
02:10:48,200 --> 02:10:51,600
the time would also be kind of nice just so there's, there's some

2385
02:10:51,600 --> 02:10:52,200
stuff like that.

2386
02:10:52,200 --> 02:10:54,400
That's kind of just, I don't know.

2387
02:10:54,600 --> 02:10:56,600
It's just it's it's handy.

2388
02:10:57,200 --> 02:10:57,800
Let's say.

2389
02:10:59,100 --> 02:11:02,500
So maybe we want to do that and maybe we want to do something like

2390
02:11:02,500 --> 02:11:05,400
this like cliprect, you know?

2391
02:11:06,000 --> 02:11:07,900
And so we do this.

2392
02:11:10,600 --> 02:11:11,900
And replace these guys.

2393
02:11:14,700 --> 02:11:17,300
and then what that would look like is that's just like, you know,

2394
02:11:17,300 --> 02:11:25,600
cliprect Minix Chipwrecked and why the brecht

2395
02:11:28,200 --> 02:11:29,300
Max X.

2396
02:11:30,600 --> 02:11:32,300
Kappa rekt, Maxwell.

2397
02:11:33,400 --> 02:11:34,000
Same here.

2398
02:11:39,000 --> 02:11:44,300
Graham x y x, x x y.

2399
02:11:49,200 --> 02:11:49,600
We go.

2400
02:11:52,000 --> 02:11:56,400
And off we go with our little rectangle and then we want to do is we

2401
02:11:56,400 --> 02:11:59,300
just want to make that into an actual thing, right?

2402
02:11:59,300 --> 02:11:59,800
I don't know where I'm

2403
02:12:00,000 --> 02:12:02,500
Put that actually may be down here.

2404
02:12:06,300 --> 02:12:06,700
Okay.

2405
02:12:08,800 --> 02:12:13,700
So, I want to grab this and I want to put this in here and I want to

2406
02:12:13,700 --> 02:12:17,400
do something where I can basically say, like girl, right, you know,

2407
02:12:17,400 --> 02:12:23,800
rectangle to I, you know, intersect so I get the intersection of two

2408
02:12:23,800 --> 02:12:25,800
of these rectangles, right?

2409
02:12:26,600 --> 02:12:30,700
And I can do something where I intersect one rectangle, to eye with

2410
02:12:30,700 --> 02:12:32,100
another rectangle to eye.

2411
02:12:32,500 --> 02:12:36,100
And it'll do that computation this this thing here.

2412
02:12:37,000 --> 02:12:37,400
You know.

2413
02:12:40,700 --> 02:12:41,900
Just seems like a good thing to do.

2414
02:12:42,300 --> 02:12:45,900
So what I want to do is I want to do this now where I just say you

2415
02:12:45,900 --> 02:12:46,700
know, a

2416
02:12:51,800 --> 02:12:55,000
xyxy and then this is like be

2417
02:12:57,500 --> 02:12:58,000
Right.

2418
02:12:59,300 --> 02:13:04,700
And then, you know, I guess this is really a result kind of thing.

2419
02:13:05,500 --> 02:13:12,800
So I can say result, Min x equals result in y equals result.

2420
02:13:12,800 --> 02:13:16,600
Max x equals result, Max y equals

2421
02:13:18,100 --> 02:13:21,900
And I can just look at whichever one of these is greater.

2422
02:13:22,800 --> 02:13:30,300
So to produce the new Min, what I want to do here is I want to

2423
02:13:34,800 --> 02:13:35,900
Be able to pick.

2424
02:13:37,600 --> 02:13:41,200
Whichever one I want, okay.

2425
02:13:45,100 --> 02:13:49,300
So in this case, so we basically if we're talking about rectangles,

2426
02:13:49,300 --> 02:13:49,500
right?

2427
02:13:49,500 --> 02:13:51,900
We've got two fundamental operations that we might want to do their

2428
02:13:51,900 --> 02:13:55,700
basic exact same with just one thing flipped, right?

2429
02:13:56,900 --> 02:13:59,000
We'll come back to that one second, right?

2430
02:13:59,100 --> 02:14:00,400
So if I have a rectangle,

2431
02:14:02,100 --> 02:14:03,300
And some other rectangle.

2432
02:14:04,500 --> 02:14:06,000
There's two things I might want to produce.

2433
02:14:06,300 --> 02:14:08,600
I might want to produce the enclosing rectangle.

2434
02:14:10,100 --> 02:14:10,600
Right?

2435
02:14:10,600 --> 02:14:14,900
So if this is a and this is B, I might want to produce this rectangle

2436
02:14:14,900 --> 02:14:19,800
here and that's the union operation, right?

2437
02:14:19,800 --> 02:14:23,500
That unify that like, makes something that that is the combination of

2438
02:14:23,500 --> 02:14:28,400
the two, maximally encloses, all of the area of both of them and some

2439
02:14:28,400 --> 02:14:33,300
extra area potentially or I might want their overlap, right?

2440
02:14:33,300 --> 02:14:36,500
This part right here and that's the intersection.

2441
02:14:37,700 --> 02:14:38,500
For clipping.

2442
02:14:38,500 --> 02:14:40,900
What we typically want is the intersection because we have like a

2443
02:14:40,900 --> 02:14:45,200
screen or an area of a screen and then a Sprite or something.

2444
02:14:45,200 --> 02:14:48,600
And we want to know what part we need to actually operate on where

2445
02:14:48,600 --> 02:14:50,300
they are, where they, where are they both?

2446
02:14:50,600 --> 02:14:53,400
But other times, we might want to do other operations where we're

2447
02:14:53,400 --> 02:14:56,800
trying to do stuff where we want to know, like, oh, I have to process

2448
02:14:56,800 --> 02:14:59,800
something and I want to press it only once, but it needs to

2449
02:15:00,000 --> 02:15:03,100
Over the entire area of like two different Sprites, I might want to

2450
02:15:03,100 --> 02:15:04,700
Union them together or something, right?

2451
02:15:05,700 --> 02:15:09,400
That's what you can see is really all these two operations are are

2452
02:15:09,500 --> 02:15:13,700
either taking the minimal or maximal versions of each of the

2453
02:15:13,700 --> 02:15:14,300
components.

2454
02:15:14,500 --> 02:15:17,200
So, like here is the Min X of ay.

2455
02:15:17,500 --> 02:15:19,700
And here is the Min X of B.

2456
02:15:20,100 --> 02:15:24,800
If I want the union of them, I want, whichever one is less, right?

2457
02:15:25,300 --> 02:15:28,300
So if this were the Union operation, right?

2458
02:15:28,800 --> 02:15:30,600
You know, if I'm doing Union,

2459
02:15:35,500 --> 02:15:37,600
I want whichever one of these is going to be less.

2460
02:15:37,900 --> 02:15:42,200
So if a if a has the Lesser Min X, right?

2461
02:15:44,700 --> 02:15:47,000
Then that's the one that I want for the Union.

2462
02:15:48,200 --> 02:15:49,100
Actually do this here.

2463
02:15:51,700 --> 02:15:54,900
If the Minix, what am I saying here?

2464
02:15:56,300 --> 02:15:58,300
Let's see, this is the Min y.

2465
02:15:58,300 --> 02:16:03,400
This is the max X then the max, why they're gonna transfer more time.

2466
02:16:04,400 --> 02:16:05,400
Let's try that one more time.

2467
02:16:05,500 --> 02:16:10,800
Alright, so if a has the Lesser Min X then we're going to take it

2468
02:16:11,500 --> 02:16:16,100
right where I'm sorry that's a if a had the Lesser my next we're gonna

2469
02:16:16,100 --> 02:16:19,700
take it if B has a lesser known as right the first time that's B's.

2470
02:16:19,800 --> 02:16:20,400
This is Ace.

2471
02:16:20,800 --> 02:16:21,300
So

2472
02:16:21,600 --> 02:16:24,000
Whichever one has the Lesser, my next, we're going to take it a has a

2473
02:16:24,000 --> 02:16:25,400
lesser, my next, we're going to take that.

2474
02:16:25,400 --> 02:16:27,900
If be had, the less Terminex, like I was out here, we would take that

2475
02:16:27,900 --> 02:16:28,800
to produce the union.

2476
02:16:29,000 --> 02:16:31,200
So to everyone's less we would take similarly them.

2477
02:16:31,200 --> 02:16:34,200
In, why the max we want to take, whichever one's higher right?

2478
02:16:34,200 --> 02:16:36,700
We want to take, whichever one would enclose the most amount of area

2479
02:16:37,100 --> 02:16:38,600
and so that's what we did here as well, right?

2480
02:16:38,600 --> 02:16:42,900
If the max X is greater, I'm sorry, the max X is greater, we take that

2481
02:16:42,900 --> 02:16:46,200
otherwise, not now for the intersection we wanted to ask with the

2482
02:16:46,200 --> 02:16:48,100
exact opposite, right?

2483
02:16:50,600 --> 02:16:54,600
We want to take whichever one of these values is actually going to be

2484
02:16:54,600 --> 02:16:55,299
greater, right?

2485
02:16:55,299 --> 02:16:59,100
So if the Min X, we take the two men X's, we want to produce whoever

2486
02:16:59,100 --> 02:17:03,299
is going to be higher so that we use the least, we want take the least

2487
02:17:03,299 --> 02:17:05,500
amount of air because we want to make sure we start on.

2488
02:17:05,500 --> 02:17:09,700
Whoever would start last night whoever would start first, right?

2489
02:17:10,299 --> 02:17:13,299
And so really all we're doing here is we're doing the exact same thing

2490
02:17:13,299 --> 02:17:16,700
only with the sense changed around, right?

2491
02:17:16,799 --> 02:17:19,799
We're just we're just picking the opposite person's thing.

2492
02:17:20,400 --> 02:17:23,000
Based on which is going on, right?

2493
02:17:25,799 --> 02:17:27,799
So those are those two operations, right?

2494
02:17:28,500 --> 02:17:30,700
So now, if we take a look at what's Happening Here,

2495
02:17:34,100 --> 02:17:37,400
You can basically see that what we were doing here is saying well okay

2496
02:17:37,600 --> 02:17:39,299
we want to do the intersection here.

2497
02:17:39,299 --> 02:17:42,200
So we were saying whoever is one is less, we'll take it.

2498
02:17:42,299 --> 02:17:46,200
We know that X-Men is already set to something in particular so we're

2499
02:17:46,200 --> 02:17:50,799
just going to say if clip rect mx's was going to be higher than it

2500
02:17:50,900 --> 02:17:51,400
right?

2501
02:17:52,799 --> 02:17:55,200
We want to take that because it's the intersection.

2502
02:17:55,200 --> 02:17:58,000
So we want to take whoever was higher and so here's our intersection

2503
02:17:58,000 --> 02:17:58,500
right?

2504
02:17:58,900 --> 02:17:59,799
This takes whoever was

2505
02:18:00,000 --> 02:18:00,799
Abby was higher.

2506
02:18:00,799 --> 02:18:03,600
In this case, I'm either section case if we were doing the union and

2507
02:18:03,600 --> 02:18:05,700
grabbing the whole thing, we would have done it the other way around.

2508
02:18:07,400 --> 02:18:07,900
So yeah.

2509
02:18:08,299 --> 02:18:11,799
So you can imagine that doing that this way where we have the the like

2510
02:18:11,799 --> 02:18:13,400
the fill wrecked, right?

2511
02:18:13,400 --> 02:18:20,900
And the fill wrecked is X Min y Min xmax ymax like so right you can

2512
02:18:20,900 --> 02:18:25,200
then imagine us doing rectangle to or just fill wrecked equals

2513
02:18:25,200 --> 02:18:30,299
intersect, cliprect Phil wrapped and that would just give us that

2514
02:18:30,299 --> 02:18:31,400
intersection of them.

2515
02:18:33,299 --> 02:18:36,600
And then obviously at the moment since we're not using the rectangles

2516
02:18:37,000 --> 02:18:39,500
through the pipe, although I guess we could now, right?

2517
02:18:39,799 --> 02:18:43,799
So now we could let's just go ahead and take X-Men everywhere that it

2518
02:18:43,799 --> 02:18:44,799
occurs right?

2519
02:18:44,799 --> 02:18:48,299
You can see where X Min occurs here we could just go ahead and replace

2520
02:18:48,600 --> 02:18:50,700
all of those with the fill wrecked version.

2521
02:18:51,200 --> 02:18:55,000
So let's go ahead and replace X-Men with Phil wrecked dot Min EX

2522
02:19:00,500 --> 02:19:01,000
Right.

2523
02:19:04,000 --> 02:19:06,100
Let's go ahead and replace.

2524
02:19:08,299 --> 02:19:09,299
Where are we here?

2525
02:19:09,500 --> 02:19:10,299
Where's my feel wrecked?

2526
02:19:10,400 --> 02:19:10,799
There it is.

2527
02:19:11,100 --> 02:19:15,100
Let's go ahead and replace y Min with Phil wrecked Min.

2528
02:19:15,100 --> 02:19:15,600
Why

2529
02:19:17,100 --> 02:19:20,200
Oops, didn't quite mean to do it there and gotten there yet.

2530
02:19:23,200 --> 02:19:24,299
So, let's go ahead and replace.

2531
02:19:27,799 --> 02:19:33,299
Why Min Oops, why Moon fill wrecked and why?

2532
02:19:40,400 --> 02:19:41,200
X, max.

2533
02:19:41,700 --> 02:19:42,299
Same thing.

2534
02:19:45,100 --> 02:19:49,000
Place xmax go wrecked, XX.

2535
02:19:52,000 --> 02:19:55,100
And then finally we would want to do.

2536
02:19:56,600 --> 02:20:03,000
Let's see, let's see why Max Phil wrecked Max.

2537
02:20:03,000 --> 02:20:03,400
Why?

2538
02:20:05,700 --> 02:20:06,200
All right.

2539
02:20:08,200 --> 02:20:09,900
So, oops, that's no good.

2540
02:20:13,200 --> 02:20:19,200
so now we've got it working off of the rectangle which is good and if

2541
02:20:19,200 --> 02:20:23,500
I go into there and I take a look at what's going on here,

2542
02:20:25,100 --> 02:20:29,300
I can say, well, we're doing all this with the Phil wreck stuff.

2543
02:20:30,400 --> 02:20:32,700
We could actually do a couple other things here.

2544
02:20:33,200 --> 02:20:37,900
Oh, we've got a to do, remove this to, let's do that tonight to before

2545
02:20:37,900 --> 02:20:38,900
we go anywhere else.

2546
02:20:40,100 --> 02:20:42,700
So what I could do to is I've got down here, right?

2547
02:20:42,800 --> 02:20:46,300
I want to get the area of this thing.

2548
02:20:46,500 --> 02:20:50,100
I could make that a thing to get the pixel count, right?

2549
02:20:50,200 --> 02:20:54,700
I could do something where I just divide by 2, whatever is

2550
02:20:54,700 --> 02:20:57,900
the like Get Wrecked area.

2551
02:21:00,300 --> 02:21:06,100
Get clamped wrecked area you know so it's not going to be below zero

2552
02:21:06,100 --> 02:21:09,600
basically and just pass the fill wrecked and that would be this value,

2553
02:21:10,400 --> 02:21:10,900
right?

2554
02:21:11,200 --> 02:21:14,400
So then inside handmade math, I can have here.

2555
02:21:14,600 --> 02:21:19,800
A thing that's just get clamped wrecked area and that produces a un 32

2556
02:21:20,700 --> 02:21:22,400
because it cannot be - let's say.

2557
02:21:22,900 --> 02:21:24,900
But I don't know, I think we probably won't stay in in three to four

2558
02:21:24,900 --> 02:21:27,400
everything you'll still be clamped but we just won't actually do that.

2559
02:21:27,800 --> 02:21:30,000
And so that in here what we can do is

2560
02:21:30,100 --> 02:21:33,300
We can actually just do in fact we can just do it this way.

2561
02:21:33,800 --> 02:21:37,400
You can just do result equals

2562
02:21:43,100 --> 02:21:51,600
Yes, eh, eh eh, eh and we don't do the divide by 2 because that's

2563
02:21:51,600 --> 02:21:53,800
specific to that particular routine out there.

2564
02:21:55,900 --> 02:21:56,600
So there we go.

2565
02:21:58,300 --> 02:21:59,600
So a Max.

2566
02:21:59,600 --> 02:22:00,000
Yep.

2567
02:22:00,000 --> 02:22:01,400
That's all good.

2568
02:22:02,000 --> 02:22:06,100
And then we go ahead and take the pixel count is actually results.

2569
02:22:06,100 --> 02:22:09,700
Now, all we have to do is say, if the result is less than zero, the

2570
02:22:09,700 --> 02:22:11,900
result equals zero and then we return the result.

2571
02:22:12,200 --> 02:22:12,800
So there we go.

2572
02:22:13,600 --> 02:22:20,500
Now there is a sort of problematic thing here that I'm going to point

2573
02:22:20,500 --> 02:22:22,800
out and I don't know how we want to handle it.

2574
02:22:25,900 --> 02:22:32,500
But our convention for rectangles before was that they did not include

2575
02:22:32,500 --> 02:22:33,700
their final value.

2576
02:22:34,900 --> 02:22:35,400
Right.

2577
02:22:36,600 --> 02:22:40,000
In fact, I'm pretty sure we said that so that they could overlap

2578
02:22:40,200 --> 02:22:41,700
properly, right?

2579
02:22:45,000 --> 02:22:46,900
Not sure where we actually talked about that.

2580
02:22:47,000 --> 02:22:53,400
But if you look at the min max here if you say if you if you look at

2581
02:22:53,400 --> 02:22:57,600
the operations on the rectangles we essentially had rectangle

2582
02:22:57,600 --> 02:23:02,200
operations that would do like overlap tests and the overlap test so

2583
02:23:02,200 --> 02:23:06,700
he's used less than on the final pixel, right?

2584
02:23:08,300 --> 02:23:09,300
You can see that happening.

2585
02:23:10,600 --> 02:23:16,600
So it's kind of broken for us to introduce this other, you know, just

2586
02:23:16,600 --> 02:23:19,200
because we're doing some slightly different thing with the integer,

2587
02:23:19,200 --> 02:23:19,900
rectangles.

2588
02:23:20,400 --> 02:23:24,000
It's kinda messed up in a way to have that one.

2589
02:23:24,000 --> 02:23:25,100
Not work that way.

2590
02:23:25,900 --> 02:23:30,400
So I do wonder if we want to make that work slightly differently.

2591
02:23:30,400 --> 02:23:34,200
Where, you know, we can just sort of rewrite this routine to actually

2592
02:23:34,200 --> 02:23:36,700
have it so that it does not work that way.

2593
02:23:36,700 --> 02:23:38,000
It's still considered

2594
02:23:38,200 --> 02:23:41,600
That final one not there and then we would get rid of like these plus

2595
02:23:41,600 --> 02:23:44,700
ones and all of this stuff would actually use the Max's and so on.

2596
02:23:45,800 --> 02:23:47,800
So I feel like that's probably the right thing to do.

2597
02:23:47,800 --> 02:23:48,900
So I'm going to go ahead and try it.

2598
02:23:48,900 --> 02:23:51,700
And if we hit some reason, why we don't want to do that, then we

2599
02:23:51,700 --> 02:23:53,700
cannot do that, right?

2600
02:23:55,600 --> 02:23:56,700
That seems like a good idea.

2601
02:23:56,700 --> 02:23:59,800
Now, in with Mac's here, we're not using those in this routine.

2602
02:24:00,000 --> 02:24:04,300
We think so those were for the lighting stuff, so I'm going to get rid

2603
02:24:04,300 --> 02:24:06,200
of those in here.

2604
02:24:07,800 --> 02:24:08,300
We go.

2605
02:24:09,900 --> 02:24:14,200
And, and we have these to do is to hear like, we haven't actually

2606
02:24:14,200 --> 02:24:17,200
finished with the row alignment and stuff like that either.

2607
02:24:17,300 --> 02:24:18,100
So, stuff like that.

2608
02:24:18,100 --> 02:24:21,100
We have to do fixed cast, why?

2609
02:24:21,100 --> 02:24:21,400
I don't know.

2610
02:24:21,400 --> 02:24:24,000
This stuff is not used anymore in this routine.

2611
02:24:26,400 --> 02:24:27,100
All right.

2612
02:24:29,200 --> 02:24:30,300
so,

2613
02:24:31,500 --> 02:24:36,100
So, what we want to do here is change this around so that we're

2614
02:24:36,100 --> 02:24:41,800
actually not doing not assuming that the max is actually in anymore.

2615
02:24:42,500 --> 02:24:46,600
And so in order to do that properly, that's actually not that hard,

2616
02:24:46,700 --> 02:24:47,000
right?

2617
02:24:47,000 --> 02:24:52,000
I mean basically all were doing here is is treating these values like

2618
02:24:52,000 --> 02:24:55,300
that instead and that's it.

2619
02:24:55,800 --> 02:24:57,700
So that's really not all that.

2620
02:24:58,000 --> 02:24:59,000
All that interesting.

2621
02:24:59,300 --> 02:25:01,000
How is this Min EX?

2622
02:25:03,200 --> 02:25:04,100
That's pretty funny.

2623
02:25:04,100 --> 02:25:09,600
If we change that one over anyway, doesn't matter.

2624
02:25:09,800 --> 02:25:10,900
We'll take care of that in a second.

2625
02:25:11,600 --> 02:25:14,700
So if we got these to the width and the height here, and we start

2626
02:25:14,700 --> 02:25:18,100
treating this way we come through here, and we're actually doing this.

2627
02:25:19,600 --> 02:25:21,400
The, the key here is just that.

2628
02:25:21,400 --> 02:25:26,200
Now when we're actually testing these guys, we need to test them,

2629
02:25:26,400 --> 02:25:27,200
that's good drive me nuts.

2630
02:25:27,200 --> 02:25:28,300
So I gonna I'm gonna have that

2631
02:25:29,700 --> 02:25:32,000
Change that just temporarily that would drive me insane.

2632
02:25:32,200 --> 02:25:34,200
If it just that one is written that way.

2633
02:25:34,700 --> 02:25:35,700
It's a little OCD there.

2634
02:25:35,700 --> 02:25:36,400
But what do you do?

2635
02:25:37,900 --> 02:25:39,800
So, the problem here is now we come through here.

2636
02:25:39,800 --> 02:25:42,100
Everything else will work fine, right?

2637
02:25:42,100 --> 02:25:45,100
Everything else that comes in here is actually pretty straightforward,

2638
02:25:45,200 --> 02:25:48,300
because everything else that we did in here, really, the only

2639
02:25:48,300 --> 02:25:51,900
difference right is that this would happen, that's it right?

2640
02:25:51,900 --> 02:25:55,100
We would just we wouldn't work on that last guy.

2641
02:25:55,200 --> 02:25:56,300
That's that's all there is.

2642
02:25:57,100 --> 02:26:00,300
So that's pretty straightforward and you know, these become this way

2643
02:26:00,300 --> 02:26:01,900
and then you know, that's it.

2644
02:26:01,900 --> 02:26:04,700
So it's really not particularly difficult to change.

2645
02:26:04,800 --> 02:26:07,100
The only thing that actually has to change

2646
02:26:07,400 --> 02:26:09,400
Um that I'm thinking of at the moment.

2647
02:26:09,400 --> 02:26:14,000
Anyway, is this thing right here that produces the extents because

2648
02:26:14,000 --> 02:26:15,100
what happens is this thing?

2649
02:26:15,100 --> 02:26:19,500
Doesn't actually consider that it assumes that it's going to touch

2650
02:26:19,500 --> 02:26:21,300
that last pixel.

2651
02:26:22,800 --> 02:26:24,200
The CLX pixel here.

2652
02:26:24,900 --> 02:26:29,000
And of course, it's not, that's not actually going to do that.

2653
02:26:29,600 --> 02:26:30,300
So

2654
02:26:32,200 --> 02:26:33,600
Let's take a look at this for a second.

2655
02:26:34,600 --> 02:26:39,100
It floors X and then ceilings X, so that's fine.

2656
02:26:42,000 --> 02:26:43,100
So, the floor X is in ceiling.

2657
02:26:43,100 --> 02:26:46,900
X is all, we would really have to do is make sure that the ceiling is

2658
02:26:46,900 --> 02:26:47,900
incremented by 1.

2659
02:26:49,300 --> 02:26:51,400
I think that's really all we have to do, so that's the floor.

2660
02:26:53,200 --> 02:26:54,100
I think that's it.

2661
02:26:55,000 --> 02:26:58,300
I don't think there be anything else, but don't quote me on that.

2662
02:26:59,700 --> 02:26:59,800
So,

2663
02:27:00,000 --> 02:27:01,100
Looks pretty reasonable.

2664
02:27:03,500 --> 02:27:05,100
That looks pretty, pretty, okay, to me.

2665
02:27:05,800 --> 02:27:07,800
So we'll go ahead and clip that out.

2666
02:27:10,000 --> 02:27:14,200
All right, so what's going on here?

2667
02:27:17,700 --> 02:27:21,200
Next x, max y, result result, equals 0.

2668
02:27:23,100 --> 02:27:23,600
Results.

2669
02:27:23,600 --> 02:27:25,900
Okay, so

2670
02:27:27,800 --> 02:27:30,600
what is actually, although, What's Happening Here

2671
02:27:33,900 --> 02:27:35,400
I have gone and broken it again.

2672
02:27:36,100 --> 02:27:37,000
Check it out.

2673
02:27:37,400 --> 02:27:37,900
We're back down.

2674
02:27:37,900 --> 02:27:39,000
20 Cycles.

2675
02:27:39,400 --> 02:27:41,600
Don't know how I keep breaking this.

2676
02:27:42,800 --> 02:27:44,100
That's kind of absurd.

2677
02:27:44,400 --> 02:27:45,400
When you think about it.

2678
02:27:45,600 --> 02:27:50,800
I shouldn't have this much trouble, keeping that working.

2679
02:27:51,600 --> 02:27:55,700
But apparently, I do, I do not know why.

2680
02:27:56,300 --> 02:27:58,200
Let's take a look and see.

2681
02:27:59,500 --> 02:28:00,800
Clamp platform.

2682
02:28:02,600 --> 02:28:05,900
So, we passed the count in here, right?

2683
02:28:06,100 --> 02:28:09,900
And we add the count, you know, the count to it.

2684
02:28:10,700 --> 02:28:15,600
You know, what I could do here also is just quickly do cert count

2685
02:28:15,700 --> 02:28:16,900
greater than equal to 0.

2686
02:28:22,200 --> 02:28:23,800
Okay, so that does not seem to be the problem.

2687
02:28:25,400 --> 02:28:25,900
There we go.

2688
02:28:27,900 --> 02:28:34,900
So yeah, so our for some reason, we're not getting the right value out

2689
02:28:34,900 --> 02:28:39,900
of here, because the hit count is drastically higher than the cycle

2690
02:28:39,900 --> 02:28:41,400
count that we're taking.

2691
02:28:42,300 --> 02:28:45,800
And so, I'm not sure why that is happening.

2692
02:28:45,900 --> 02:28:50,500
I do not understand why we were getting such a high hit rate there.

2693
02:28:50,800 --> 02:28:54,400
So let's go ahead and take a look at what I messed up.

2694
02:28:55,600 --> 02:28:57,700
Cuz let's not let's not mince words.

2695
02:28:57,700 --> 02:28:58,500
Here people.

2696
02:28:59,800 --> 02:29:01,700
I am the person who did it, right?

2697
02:29:01,700 --> 02:29:02,600
I broke it.

2698
02:29:02,600 --> 02:29:05,100
It was me, there's really no question about that.

2699
02:29:05,700 --> 02:29:06,900
So, coming here

2700
02:29:07,900 --> 02:29:11,400
And let's take a look, should be able to step into that.

2701
02:29:11,900 --> 02:29:12,900
What's the result here?

2702
02:29:12,900 --> 02:29:14,100
845?

2703
02:29:14,900 --> 02:29:21,900
So that reasonable Min x, max X.

2704
02:29:23,900 --> 02:29:27,200
Oh, no, no.

2705
02:29:27,700 --> 02:29:28,800
So this was total East.

2706
02:29:28,800 --> 02:29:30,900
Yes, that's, that's totally wrong.

2707
02:29:32,500 --> 02:29:34,900
I tried to take a shortcut there but that's totally wrong.

2708
02:29:35,000 --> 02:29:39,900
So, if both of these are negative, they'll multiply into a positive.

2709
02:29:40,400 --> 02:29:43,000
So you can't actually write you can't cheat.

2710
02:29:43,000 --> 02:29:45,900
I tried to cheat and you see what happens to cheaters, right?

2711
02:29:45,900 --> 02:29:48,700
They get punished, it's actually true in the real world.

2712
02:29:48,700 --> 02:29:51,400
Most of the time cheaters do just fine.

2713
02:29:53,000 --> 02:29:53,200
What we

2714
02:29:53,500 --> 02:29:56,300
All the financial services industry.

2715
02:29:57,900 --> 02:29:58,900
In America, I don't know.

2716
02:29:58,900 --> 02:29:59,800
And also in London.

2717
02:30:00,000 --> 02:30:02,300
Know, if you guys have that wherever you're listening out there, if

2718
02:30:02,300 --> 02:30:06,600
you guys also have people who primarily make their money by cheating.

2719
02:30:07,100 --> 02:30:10,500
So if we go in here, we need me at now to say, we need to make sure

2720
02:30:10,500 --> 02:30:16,000
that our with and our height are both greater than 0 and then and only

2721
02:30:16,000 --> 02:30:20,600
then can we actually multiply them together and actually produce the

2722
02:30:21,000 --> 02:30:23,500
result for the rectangle area?

2723
02:30:23,500 --> 02:30:24,000
Okay.

2724
02:30:26,600 --> 02:30:33,600
So that should, hopefully maybe for lucky that should potentially give

2725
02:30:33,600 --> 02:30:34,000
us.

2726
02:30:34,200 --> 02:30:36,300
Well, I don't know what it will give us, but hopefully it'll give us

2727
02:30:36,300 --> 02:30:37,100
something correctly.

2728
02:30:37,100 --> 02:30:41,600
Yeah, that looks like brick, debug cycle town again, and

2729
02:30:42,800 --> 02:30:45,700
Let's see if we can get a reasonable 02 cycle.

2730
02:30:45,700 --> 02:30:47,600
Count again again.

2731
02:30:47,600 --> 02:30:48,800
Yes, does look, okay.

2732
02:30:49,000 --> 02:30:53,300
So, all right, so we're not, we're not too messed up, okay?

2733
02:30:54,400 --> 02:30:54,900
So

2734
02:30:57,100 --> 02:30:59,900
Now that we've done that and change that into something, that's a

2735
02:30:59,900 --> 02:31:02,300
little more systemize there, we've got a wreck stuff going.

2736
02:31:04,600 --> 02:31:09,200
We can go ahead and hoist this up a little bit further potentially,

2737
02:31:09,700 --> 02:31:10,200
right?

2738
02:31:10,900 --> 02:31:16,800
And so what I could do is I could say, you know we've got this clip,

2739
02:31:16,800 --> 02:31:20,300
rect in this fill wrecked we could basically what this routine is

2740
02:31:20,300 --> 02:31:21,000
doing, right.

2741
02:31:21,000 --> 02:31:23,900
What I mean with this Loop is doing is all.

2742
02:31:23,900 --> 02:31:26,300
It's just trying to go through and it's

2743
02:31:26,400 --> 02:31:30,700
Trying to take each individual point of the four corners of our

2744
02:31:30,700 --> 02:31:35,600
potentially rotated texture map that we're you know, our Pepsi rotated

2745
02:31:36,300 --> 02:31:39,900
quad that we're texture mapping and it's trying to make sure that it

2746
02:31:39,900 --> 02:31:42,400
gets the Min and Max bounds of those.

2747
02:31:44,000 --> 02:31:47,400
So in order to do it that way, if we want to keep doing it that way

2748
02:31:47,400 --> 02:31:48,000
which is fine.

2749
02:31:48,000 --> 02:31:52,000
I mean this isn't a, this is probably not going to be a critical part

2750
02:31:52,000 --> 02:31:54,300
of the, the performance of the application or anything.

2751
02:31:55,000 --> 02:31:57,400
If we want to keep doing it that way, what we could do is just have a

2752
02:31:57,400 --> 02:32:02,500
thing that's like expand rectangle to include point or something,

2753
02:32:02,600 --> 02:32:03,200
right?

2754
02:32:03,500 --> 02:32:07,200
And we could say that we would like, you know, our fill wrecked to be

2755
02:32:07,200 --> 02:32:11,100
expanded to include 4, x 4 y,

2756
02:32:12,300 --> 02:32:13,000
Right?

2757
02:32:13,200 --> 02:32:15,200
And we would like it to be include.

2758
02:32:15,500 --> 02:32:18,500
See Lex and seal why, right?

2759
02:32:19,400 --> 02:32:22,600
And, you know, we could do it that way.

2760
02:32:22,600 --> 02:32:28,100
The downside to doing that is that we lose the fact that we know that

2761
02:32:28,100 --> 02:32:30,300
we only care about the sidedness of it.

2762
02:32:30,700 --> 02:32:32,700
So I don't know if we really want to do it that way.

2763
02:32:33,300 --> 02:32:36,900
It's a little weird to say the least what we could do.

2764
02:32:36,900 --> 02:32:41,900
At the very least is Loftus up one higher so do something.

2765
02:32:42,000 --> 02:32:42,500
This.

2766
02:32:44,700 --> 02:32:46,700
And just access the things out of this.

2767
02:32:47,100 --> 02:32:55,800
So now we're just doing basically with Max height, Max 00, something,

2768
02:32:55,800 --> 02:32:56,400
right?

2769
02:32:58,100 --> 02:32:59,900
And we get rid of these guys all together.

2770
02:33:00,000 --> 02:33:01,200
So we could do that.

2771
02:33:01,500 --> 02:33:02,900
That's not too big of a deal.

2772
02:33:04,000 --> 02:33:06,100
It's not actually doing anything useful at all.

2773
02:33:07,000 --> 02:33:07,300
Oops,

2774
02:33:15,600 --> 02:33:16,100
Right.

2775
02:33:17,800 --> 02:33:20,700
So yeah, now we do have one more thing we have to check,

2776
02:33:20,800 --> 02:33:21,500
unfortunately.

2777
02:33:24,500 --> 02:33:27,100
This is one of those things that, you know, I wish we didn't have to

2778
02:33:27,100 --> 02:33:31,300
check but we've seen it already happened once before and so I got to

2779
02:33:31,300 --> 02:33:33,300
do it just to make sure.

2780
02:33:33,500 --> 02:33:34,900
But let's go ahead and do this now.

2781
02:33:37,300 --> 02:33:41,200
Every now and again, the reason I'm doing this is just so we can use

2782
02:33:41,200 --> 02:33:44,100
reuse this code a little more easily because we're going to have to

2783
02:33:44,100 --> 02:33:44,900
clip everything.

2784
02:33:45,000 --> 02:33:47,400
Like we're going to have to clip all the different functions that we

2785
02:33:47,400 --> 02:33:49,700
do, they'll have to clip to this all the rendering function.

2786
02:33:49,700 --> 02:33:53,100
So we need to make sure that we add clipping for our like rectangle

2787
02:33:53,100 --> 02:33:55,300
outlines and all that sort of stuff, right?

2788
02:33:56,300 --> 02:34:01,500
But so what I was saying is what we need to check here is that putting

2789
02:34:01,500 --> 02:34:06,300
these things in a structure, doesn't confuse the optimizer, right?

2790
02:34:07,200 --> 02:34:11,700
So what I'm going to do is I'm going to go ahead and and just take a

2791
02:34:11,700 --> 02:34:12,700
look at this, right?

2792
02:34:12,900 --> 02:34:14,300
So you take a look at that?

2793
02:34:14,300 --> 02:34:16,400
It's 43 Cycles, right?

2794
02:34:16,400 --> 02:34:22,300
Or whatever per hit, and let's take a quick Gander at it here as well.

2795
02:34:22,300 --> 02:34:23,400
Do we still have that on?

2796
02:34:24,000 --> 02:34:24,300
No.

2797
02:34:30,100 --> 02:34:30,400
It's cool.

2798
02:34:30,400 --> 02:34:33,200
It looks like we can just leave that on and somehow it doesn't

2799
02:34:33,200 --> 02:34:36,700
actually bother the the runtime of the thing either at the moment

2800
02:34:36,700 --> 02:34:37,100
anyway.

2801
02:34:38,300 --> 02:34:40,900
So yeah, so we're doing that and that's all good.

2802
02:34:41,200 --> 02:34:45,200
But I also wanted to kind of see what what it was here if we take the

2803
02:34:45,200 --> 02:34:48,900
count of it right 160 95.

2804
02:34:48,900 --> 02:34:51,400
So 117 Cycles, right?

2805
02:34:52,100 --> 02:34:56,200
And so I just wanted to see if if we have any, if there, if it

2806
02:34:56,200 --> 02:34:57,500
confuses the compiler.

2807
02:34:57,600 --> 02:34:59,800
So I just wanted to see if we

2808
02:34:59,900 --> 02:35:04,900
Took out any accessing of Phil wrecked from the actual Loop, right?

2809
02:35:04,900 --> 02:35:09,700
Meaning this this code right here, I just wanted to make sure that

2810
02:35:09,700 --> 02:35:10,700
that went away

2811
02:35:12,000 --> 02:35:12,300
Right.

2812
02:35:12,300 --> 02:35:14,200
So that if I took this out,

2813
02:35:15,900 --> 02:35:19,000
It didn't actually affect the runtime performance in any in any

2814
02:35:19,000 --> 02:35:20,300
particular way, right?

2815
02:35:20,300 --> 02:35:23,900
So Min why you'll spill wrecked lime in

2816
02:35:39,200 --> 02:35:41,600
I know why I was in the habit of reversing those

2817
02:35:43,200 --> 02:35:43,600
There we go.

2818
02:35:44,600 --> 02:35:47,200
So I just want to see if that has any adverse effects.

2819
02:35:47,200 --> 02:35:50,100
Basically doesn't look like it does on the run time there.

2820
02:35:57,000 --> 02:35:58,300
And it does well.

2821
02:36:00,200 --> 02:36:02,700
It definitely had an adverse effect on the runtime.

2822
02:36:04,500 --> 02:36:07,900
I mean, not the actual runtime but it confuse the compiler.

2823
02:36:07,900 --> 02:36:12,600
The fact that we because 117 before and it's 113 now.

2824
02:36:12,600 --> 02:36:18,700
So unfortunately, it does look like we'll have to even if we like sort

2825
02:36:18,700 --> 02:36:24,000
of pull out the reusable code at the front end into some useful

2826
02:36:24,000 --> 02:36:24,500
structs.

2827
02:36:25,400 --> 02:36:27,500
I don't know that will actually be able to access them directly

2828
02:36:27,500 --> 02:36:30,500
because it looks like it's confused about that even though it's just a

2829
02:36:30,500 --> 02:36:32,600
stack variable, looks like a confused.

2830
02:36:33,400 --> 02:36:33,900
All right.

2831
02:36:35,400 --> 02:36:38,900
Okay, so a couple of things we could do here, we have a remove this.

2832
02:36:40,400 --> 02:36:45,400
And I'm assuming that the reason that we have a remove, this is

2833
02:36:45,400 --> 02:36:47,300
because this pixel PX thing.

2834
02:36:47,300 --> 02:36:51,200
We could just keep as a wide value in incremented every time at least

2835
02:36:51,200 --> 02:36:52,200
I'm assuming

2836
02:36:53,400 --> 02:36:56,200
That's what we, that's what I meant by remove this.

2837
02:36:57,300 --> 02:36:57,800
But yeah.

2838
02:36:58,400 --> 02:37:02,200
So it also looks like origin X for X.

2839
02:37:02,400 --> 02:37:04,600
So we could just roll all the thin, right?

2840
02:37:06,700 --> 02:37:10,300
So instead of using Min X at all, what we couldn't do here is just

2841
02:37:10,300 --> 02:37:11,500
say, all right, we've got a.m.

2842
02:37:11,600 --> 02:37:12,600
128.

2843
02:37:13,200 --> 02:37:16,600
The M 128 is, is called pixel p x, right?

2844
02:37:16,600 --> 02:37:20,700
And pixel p x doesn't get modified in the loop anywhere, right?

2845
02:37:21,600 --> 02:37:23,100
It just gets incremented this way.

2846
02:37:24,400 --> 02:37:26,300
Oh wait.

2847
02:37:26,300 --> 02:37:26,600
We

2848
02:37:28,800 --> 02:37:30,400
Oh okay, so it does never mind.

2849
02:37:31,300 --> 02:37:34,400
So what we need to do here is we need to introduce a new thing which

2850
02:37:34,400 --> 02:37:40,600
is like pixel p x on the for the row and that's just going to be set

2851
02:37:40,600 --> 02:37:43,100
to whatever that y Min is right.

2852
02:37:43,500 --> 02:37:47,200
So basically I'm sorry, whatever the that mean X is in this way.

2853
02:37:47,200 --> 02:37:51,800
So we're going to do this once still to get it initialized to what we

2854
02:37:51,800 --> 02:37:54,300
were actually starting with as a value, right?

2855
02:37:55,600 --> 02:37:59,000
we're going to do that, and

2856
02:38:01,300 --> 02:38:03,000
Because that's always going to be that first value.

2857
02:38:03,400 --> 02:38:08,300
But then what we're going to do is every time through here, we don't

2858
02:38:08,300 --> 02:38:10,000
actually need to re

2859
02:38:11,600 --> 02:38:13,600
Well actually guess we don't really need to do this at all right.

2860
02:38:13,600 --> 02:38:15,800
This is just, this is just, this is all

2861
02:38:17,100 --> 02:38:18,700
This is all just obvious stuff.

2862
02:38:18,700 --> 02:38:20,700
The compiler probably already did this.

2863
02:38:21,600 --> 02:38:25,200
I would hope as it should have been pretty obvious, but just in case,

2864
02:38:25,800 --> 02:38:29,500
so we can get rid of that because this is always initialized to the

2865
02:38:29,500 --> 02:38:30,200
correct value.

2866
02:38:30,200 --> 02:38:35,100
So really we're just taking this and subbing out the origin, right?

2867
02:38:38,000 --> 02:38:42,200
Like so and really we could have just subtracted the origin there.

2868
02:38:42,200 --> 02:38:44,700
Do we ever even use origin X for X again?

2869
02:38:45,000 --> 02:38:45,400
No.

2870
02:38:46,500 --> 02:38:50,800
So really we could just set this once, right?

2871
02:38:53,800 --> 02:38:54,700
Something like this.

2872
02:38:57,700 --> 02:38:59,800
I feel like and then just get rid of origin for

2873
02:39:00,200 --> 02:39:00,800
Entirely.

2874
02:39:04,000 --> 02:39:06,900
The moment because unless we set aside to do the whole Preamble and

2875
02:39:06,900 --> 02:39:10,400
somebody at some point, which we could decide to do, but it probably

2876
02:39:10,400 --> 02:39:11,600
isn't necessarily worth it.

2877
02:39:12,700 --> 02:39:15,500
There's just no point in even doing that wide because we only do that

2878
02:39:15,500 --> 02:39:17,600
there and that's it, right?

2879
02:39:17,800 --> 02:39:19,200
That's that's the end of that.

2880
02:39:20,600 --> 02:39:21,300
So that's fine.

2881
02:39:21,900 --> 02:39:22,400
Pixel P.

2882
02:39:22,400 --> 02:39:25,600
Why we could also do that way?

2883
02:39:25,900 --> 02:39:29,700
I don't know if it's useful to do it that way, but we absolutely

2884
02:39:29,700 --> 02:39:30,200
could.

2885
02:39:30,500 --> 02:39:33,600
I also don't know why on Earth we were doing this as a sub PS?

2886
02:39:34,200 --> 02:39:35,300
That's just ridiculous.

2887
02:39:35,400 --> 02:39:38,400
Because if you're already doing this as a set, why I don't know why

2888
02:39:38,400 --> 02:39:43,300
you wouldn't just do it this way, again, more Ridiculousness in our

2889
02:39:43,300 --> 02:39:43,800
Loop.

2890
02:39:44,900 --> 02:39:45,500
But yeah.

2891
02:39:46,200 --> 02:39:47,900
So we can take a look at that in a second.

2892
02:39:53,400 --> 02:39:54,100
So, there we go.

2893
02:39:56,400 --> 02:39:57,400
Let's take a quick look.

2894
02:40:00,500 --> 02:40:02,100
117 Cycles.

2895
02:40:04,100 --> 02:40:05,900
So how did that go back up?

2896
02:40:05,900 --> 02:40:08,900
What did we do that made that go back up

2897
02:40:10,800 --> 02:40:15,600
So I guess saving this register was actually worse than setting it

2898
02:40:15,600 --> 02:40:17,400
every time, right?

2899
02:40:17,600 --> 02:40:19,000
I mean that's what that appears to be.

2900
02:40:19,000 --> 02:40:19,600
The case.

2901
02:40:20,300 --> 02:40:21,500
Am I wrong about that?

2902
02:40:22,000 --> 02:40:26,600
Like it looks like setting that having it have to remember that

2903
02:40:26,600 --> 02:40:28,100
register was actually bad.

2904
02:40:28,100 --> 02:40:31,600
It would rather have just used this value which I guess it already

2905
02:40:31,600 --> 02:40:34,000
needed to have, right and go from there.

2906
02:40:35,000 --> 02:40:37,700
That's what it looked like, I don't know, but that would it look like.

2907
02:40:38,300 --> 02:40:41,000
So if that's the case, that's fine, you know, we don't have to argue

2908
02:40:41,000 --> 02:40:41,500
about it.

2909
02:40:42,100 --> 02:40:43,200
We can just do it this way.

2910
02:40:45,200 --> 02:40:45,800
And that's fine.

2911
02:40:48,200 --> 02:40:49,600
Let's see if it prefers that.

2912
02:40:53,400 --> 02:40:54,600
That didn't change it at all.

2913
02:40:56,900 --> 02:40:58,400
Which also doesn't make any sense.

2914
02:40:58,900 --> 02:41:00,500
So, how is this possible?

2915
02:41:00,900 --> 02:41:03,100
Someone explain to me what is going on there?

2916
02:41:03,200 --> 02:41:05,400
That is the compiler is just doing weird stuff.

2917
02:41:05,400 --> 02:41:06,100
At this point.

2918
02:41:06,100 --> 02:41:08,900
I feel like because why would that actually matter

2919
02:41:10,000 --> 02:41:13,000
That does not make any sense to me, why that would matter.

2920
02:41:15,100 --> 02:41:16,400
It just seems very strange.

2921
02:41:17,900 --> 02:41:19,000
Very, very strange.

2922
02:41:24,400 --> 02:41:25,700
Hmm.

2923
02:41:26,300 --> 02:41:27,300
Hmm.

2924
02:41:36,400 --> 02:41:37,400
I don't get it people.

2925
02:41:37,800 --> 02:41:38,700
I really don't.

2926
02:41:40,200 --> 02:41:42,000
I don't understand why that, why?

2927
02:41:42,000 --> 02:41:44,800
It's the compiler should not have been able to produce the exact same

2928
02:41:45,300 --> 02:41:46,300
code, right?

2929
02:41:46,400 --> 02:41:49,200
But it couldn't it didn't it had 113 Cycles here.

2930
02:41:50,300 --> 02:41:56,100
And then when you try to do it the other way, it didn't it couldn't do

2931
02:41:56,100 --> 02:41:57,300
that, right?

2932
02:42:01,200 --> 02:42:02,300
So that's pretty strange.

2933
02:42:02,500 --> 02:42:04,000
So it really wants.

2934
02:42:05,600 --> 02:42:08,400
It just it would prefer, right?

2935
02:42:12,100 --> 02:42:12,900
It to look.

2936
02:42:16,000 --> 02:42:18,700
Like this, that's what it would like to see.

2937
02:42:19,900 --> 02:42:24,200
According to the minimum coming through here anyway, right?

2938
02:42:24,200 --> 02:42:25,500
113 Cycles.

2939
02:42:26,400 --> 02:42:28,000
So it would really like it to look like this.

2940
02:42:30,400 --> 02:42:32,000
So we'll leave it like that.

2941
02:42:34,000 --> 02:42:35,300
That's what I want.

2942
02:42:35,500 --> 02:42:36,600
I'm not going to tell you.

2943
02:42:38,700 --> 02:42:40,200
I'm not going to tell you what else you should do.

2944
02:42:45,500 --> 02:42:46,800
Because remember, this isn't even.

2945
02:42:46,900 --> 02:42:49,800
This part of the code is not even getting counted by this.

2946
02:42:50,600 --> 02:42:53,000
So what that was meaning is that are critical.

2947
02:42:53,000 --> 02:42:55,200
Poor are the part of our Loop gets executed.

2948
02:42:55,200 --> 02:42:59,100
Most often rearranging, what was happening here, was causing it to

2949
02:42:59,100 --> 02:43:02,400
have a problem doing the optimization, whatever optimization it was

2950
02:43:02,400 --> 02:43:05,000
doing on Pixel py hoisting.

2951
02:43:05,800 --> 02:43:10,300
Because presumably pixel P Y, which is constant across the loop right

2952
02:43:10,400 --> 02:43:11,600
across the inner loop.

2953
02:43:12,700 --> 02:43:14,800
They can hoist out these two moles.

2954
02:43:15,900 --> 02:43:16,300
Right?

2955
02:43:16,300 --> 02:43:17,200
It can do that.

2956
02:43:17,800 --> 02:43:21,200
That's the only thing that pixel py actually multiplies by right?

2957
02:43:21,300 --> 02:43:25,500
So it can hoist out those two moles, but why hoisting out those two

2958
02:43:25,500 --> 02:43:28,000
moles was getting so much harder for it when I did the other way, I'm

2959
02:43:28,000 --> 02:43:28,900
not actually sure.

2960
02:43:30,400 --> 02:43:35,100
So, maybe we'll take a brief look at that just to see right.

2961
02:43:35,100 --> 02:43:42,000
We're getting that 113, 20 Cycles, let me hoist that out and see what

2962
02:43:42,000 --> 02:43:44,000
starts happening as I play with that.

2963
02:43:45,000 --> 02:43:52,900
So this is, you know, PP m, xor p y and x or something, no, we're

2964
02:43:52,900 --> 02:43:55,900
going to call that and this is py and why

2965
02:43:57,500 --> 02:43:59,000
That's just those two values, right?

2966
02:44:00,100 --> 02:44:01,700
So there's there's the X.

2967
02:44:04,300 --> 02:44:05,100
There's the why.

2968
02:44:08,000 --> 02:44:14,000
P YN X py NY and presumably now literally all I've done is waste out

2969
02:44:14,000 --> 02:44:14,700
exactly what.

2970
02:44:14,700 --> 02:44:16,400
Presumably the compiler was already hoisting out.

2971
02:44:16,400 --> 02:44:19,200
And yes, so it stays the same so that's what I would expect.

2972
02:44:20,200 --> 02:44:23,500
And so now the question is, okay, pixel py, right?

2973
02:44:23,500 --> 02:44:24,200
Which is getting set?

2974
02:44:24,200 --> 02:44:26,700
Once here we do them all.

2975
02:44:29,600 --> 02:44:30,800
I don't understand.

2976
02:44:31,300 --> 02:44:34,800
Okay, so let's say, I just look at it like this, right?

2977
02:44:34,900 --> 02:44:41,200
And here's that pixel py stuff, I check it out, I'm 113, 20 cycles and

2978
02:44:41,200 --> 02:44:44,700
now all I want to do is I don't want to just subtract origin .y in

2979
02:44:44,700 --> 02:44:45,100
here.

2980
02:44:45,600 --> 02:44:48,200
How bad is that, right?

2981
02:44:48,200 --> 02:44:50,500
How about how much do you dislike that?

2982
02:44:55,200 --> 02:44:56,400
You just like it quite a bit.

2983
02:44:57,600 --> 02:44:59,100
You just like it by 3 Cycles.

2984
02:45:00,200 --> 02:45:01,800
So you really don't want to have to do that.

2985
02:45:02,200 --> 02:45:03,900
You want to do this for some reason.

2986
02:45:04,100 --> 02:45:06,800
I don't know the reason but for some reason,

2987
02:45:07,800 --> 02:45:08,300
Okay.

2988
02:45:09,400 --> 02:45:16,000
So the Y value is only used in this Loop in that one place.

2989
02:45:16,800 --> 02:45:22,300
So how about I try a different tact and I just asked you to go between

2990
02:45:22,300 --> 02:45:23,400
these two values

2991
02:45:26,100 --> 02:45:29,100
Like so right, let's say I was to do that.

2992
02:45:29,300 --> 02:45:34,300
So I'm going to go ahead and say that these actual values here are

2993
02:45:34,300 --> 02:45:36,800
going to be this way, right?

2994
02:45:39,900 --> 02:45:45,000
Because that'll still Loop over the same actual pixels because I'm not

2995
02:45:45,000 --> 02:45:46,500
changing the actual pointer.

2996
02:45:46,600 --> 02:45:49,500
It'll still do the same number of iterations, but the multiply has

2997
02:45:49,500 --> 02:45:51,900
been folded in, right?

2998
02:45:53,300 --> 02:45:54,200
Does that make some sense?

2999
02:45:54,700 --> 02:45:57,300
And so then we just eliminate this all together, we're just doing a

3000
02:45:57,500 --> 02:45:59,600
set 1, PS, that's it.

3001
02:46:02,700 --> 02:46:04,300
Oh, I can't quite do that, can I?

3002
02:46:04,700 --> 02:46:06,200
Because that's a floating point value.

3003
02:46:07,600 --> 02:46:08,300
Wow.

3004
02:46:08,800 --> 02:46:11,000
That's that's that's why right?

3005
02:46:11,000 --> 02:46:13,300
Because we're trying to compute the texture coordinates there.

3006
02:46:14,400 --> 02:46:15,900
Mmm-hmm

3007
02:46:24,700 --> 02:46:25,300
Well.

3008
02:46:31,200 --> 02:46:34,300
It was complaining about, sorry.

3009
02:46:34,300 --> 02:46:35,500
I didn't mean to leave that in there.

3010
02:46:38,200 --> 02:46:38,700
Well.

3011
02:46:40,900 --> 02:46:44,400
I mean, I could try to Loop over a floating point value.

3012
02:46:46,300 --> 02:46:48,200
I don't know if I love that idea though.

3013
02:46:49,300 --> 02:46:49,900
Right?

3014
02:46:50,700 --> 02:46:53,800
I mean yeah, hard to say.

3015
02:46:56,900 --> 02:46:57,400
Wait.

3016
02:46:58,800 --> 02:47:00,500
How do we go back 216?

3017
02:47:00,800 --> 02:47:02,000
How do we go back?

3018
02:47:02,200 --> 02:47:04,000
How do we just go backwards people?

3019
02:47:05,300 --> 02:47:06,000
What?

3020
02:47:07,600 --> 02:47:08,400
What happened?

3021
02:47:09,100 --> 02:47:10,100
How did that happen?

3022
02:47:10,400 --> 02:47:11,500
I didn't do anything.

3023
02:47:12,500 --> 02:47:14,400
This is the way we had it before, right?

3024
02:47:15,600 --> 02:47:16,600
Before I did anything.

3025
02:47:23,600 --> 02:47:25,900
That's what it was, right.

3026
02:47:30,200 --> 02:47:30,800
What?

3027
02:47:30,900 --> 02:47:32,600
That's the same code.

3028
02:47:36,500 --> 02:47:38,500
That was like exactly the same code.

3029
02:47:42,800 --> 02:47:43,300
Okay.

3030
02:47:46,200 --> 02:47:47,700
I'm very interested to know.

3031
02:47:48,900 --> 02:47:49,600
Mr.

3032
02:47:49,900 --> 02:47:50,900
Fancy pants here.

3033
02:47:51,700 --> 02:47:56,300
What was the typo or the slight change that caused the compiler, to

3034
02:47:56,300 --> 02:47:58,600
not do it that way?

3035
02:48:04,300 --> 02:48:05,100
All right, got texture.

3036
02:48:05,100 --> 02:48:07,500
Memory of got the Phils, get the process pixel.

3037
02:48:07,600 --> 02:48:08,500
X Y.

3038
02:48:08,800 --> 02:48:09,200
Pixel p.

3039
02:48:09,200 --> 02:48:12,800
Y can set one origin, y 4x.

3040
02:48:16,700 --> 02:48:17,900
What's the difference?

3041
02:48:35,300 --> 02:48:37,400
Oh, that's the problem.

3042
02:48:39,200 --> 02:48:39,900
Okay.

3043
02:48:41,400 --> 02:48:42,000
Okay.

3044
02:48:42,900 --> 02:48:48,400
It was just because since I had still, I had not allowed the actual

3045
02:48:48,500 --> 02:48:50,000
guy to complete.

3046
02:48:50,300 --> 02:48:54,300
It was just holding the dll open, so it didn't rewrite it.

3047
02:48:54,800 --> 02:48:57,700
Okay, that's fine.

3048
02:48:58,300 --> 02:49:00,600
I thought I was going crazy there for a second.

3049
02:49:01,300 --> 02:49:04,700
But basically what happens is, when I had it open, like I did, the

3050
02:49:04,700 --> 02:49:08,900
more, this is Hope holding the dll open for some reason, this guy

3051
02:49:08,900 --> 02:49:12,700
doesn't close the dll after it's done with the analysis, and it's

3052
02:49:12,700 --> 02:49:15,100
printing it out so that that's fine.

3053
02:49:15,200 --> 02:49:20,700
It would be nice if that weren't the case, but it is the case.

3054
02:49:20,700 --> 02:49:21,900
So that's what we're gonna do.

3055
02:49:22,100 --> 02:49:23,800
I could do it like this.

3056
02:49:23,800 --> 02:49:26,000
I suppose W, temp dot out.

3057
02:49:26,000 --> 02:49:29,800
And then try to do a more on tempt at out.

3058
02:49:30,100 --> 02:49:31,300
I don't know if that'll work.

3059
02:49:31,400 --> 02:49:35,500
Work groups.

3060
02:49:38,000 --> 02:49:38,500
There we go.

3061
02:49:39,300 --> 02:49:41,300
So let's try that actually, I should probably do it.

3062
02:49:41,400 --> 02:49:43,100
Temp, temp, dot out.

3063
02:49:44,400 --> 02:49:44,800
So,

3064
02:49:46,300 --> 02:49:47,400
Okay, so let's see if that works.

3065
02:49:47,400 --> 02:49:51,200
So if I hold that open now and I can pile, I should be fine.

3066
02:49:51,200 --> 02:49:51,600
Yeah.

3067
02:49:51,700 --> 02:49:53,200
So just going to an intermediate files.

3068
02:49:53,200 --> 02:49:54,800
Fine, that's totally fine.

3069
02:49:55,300 --> 02:49:56,200
Let me delete that though.

3070
02:49:56,200 --> 02:49:59,700
I didn't mean to put one you need to put temp that out in the root

3071
02:49:59,700 --> 02:50:02,200
directory there so that's fine.

3072
02:50:02,200 --> 02:50:05,500
And I'd like to capture that this should just be a line that we do.

3073
02:50:06,600 --> 02:50:10,600
Basically that should just be a bin because we're going to want to do

3074
02:50:10,600 --> 02:50:11,600
that periodically.

3075
02:50:11,600 --> 02:50:13,600
So what I'm going to do is I'm going to throw that into the Mist

3076
02:50:13,600 --> 02:50:17,500
directory and I'm going to go ahead and make that in here where we do

3077
02:50:17,500 --> 02:50:24,300
like you know, where we do a like clot NH m dot bat.

3078
02:50:25,900 --> 02:50:26,700
I'll do the Nehalem.

3079
02:50:27,900 --> 02:50:28,400
Right.

3080
02:50:29,100 --> 02:50:34,700
And so what that's going to do is that's going to, I don't know where

3081
02:50:34,700 --> 02:50:41,100
will actually run it, so I guess we'll maybe just leave it like that

3082
02:50:41,200 --> 02:50:41,900
for now.

3083
02:50:44,600 --> 02:50:51,100
Yeah, so this way if I just go in hm I get it and it's good, just do

3084
02:50:51,100 --> 02:50:52,000
that anytime I want.

3085
02:50:52,000 --> 02:50:53,500
All right, we'll see that like that for now.

3086
02:50:53,900 --> 02:50:55,100
Think about how that should go later.

3087
02:50:55,500 --> 02:50:57,000
Okay, so if I do all that

3088
02:51:00,300 --> 02:51:02,400
Kind of surprising doesn't look like, there's a whole lot of ways we

3089
02:51:02,400 --> 02:51:07,600
can do anything that doesn't make the compiler for feel worse, really?

3090
02:51:07,900 --> 02:51:09,100
About what it's doing than what?

3091
02:51:09,100 --> 02:51:14,100
It's what it's doing already, so that's just Jimmy,

3092
02:51:15,700 --> 02:51:16,500
That's just the way it goes.

3093
02:51:16,500 --> 02:51:17,000
I guess.

3094
02:51:18,200 --> 02:51:21,700
So I think we may be down to just thinking about that alignment

3095
02:51:21,700 --> 02:51:22,200
problem.

3096
02:51:23,100 --> 02:51:28,900
And so, the alignment is, is basically let's just go over this real

3097
02:51:28,900 --> 02:51:29,500
briefly.

3098
02:51:29,500 --> 02:51:33,900
We talked about it a little bit, but alignment just means that when

3099
02:51:33,900 --> 02:51:35,000
we're writing the stuff,

3100
02:51:38,200 --> 02:51:42,000
You know, we've got these 128-bit wide vectors right.

3101
02:51:42,700 --> 02:51:43,300
Hello mr.

3102
02:51:43,300 --> 02:51:44,700
Chief wake up.

3103
02:51:45,100 --> 02:51:45,600
Okay.

3104
02:51:46,000 --> 02:51:50,300
So we've got these 128-bit wide registers, right it inside.

3105
02:51:50,300 --> 02:51:50,400
Then.

3106
02:51:50,400 --> 02:51:51,500
We've got four pixels.

3107
02:51:51,500 --> 02:51:52,800
Here's pixel 0 yours.

3108
02:51:52,800 --> 02:51:57,300
Pixel one, pixel to pixel three.

3109
02:51:57,300 --> 02:51:58,900
And we're writing these out to memory.

3110
02:51:59,800 --> 02:52:02,700
And right now what we're doing is we're writing them on a lined, which

3111
02:52:02,700 --> 02:52:07,300
means that if you imagine memory was broken up, starting from B 0.

3112
02:52:08,900 --> 02:52:12,200
Right, if you imagine it was broken up into bites.

3113
02:52:14,100 --> 02:52:18,300
You would basically have every 128 bits starting from the very

3114
02:52:18,300 --> 02:52:22,000
beginning of memory starting, every 128 bits, you would essentially

3115
02:52:22,000 --> 02:52:23,500
have a chunk.

3116
02:52:23,600 --> 02:52:26,400
So, here is 8, Bits 8, B 8, B 8, right?

3117
02:52:26,400 --> 02:52:27,200
Like here we go.

3118
02:52:27,200 --> 02:52:35,600
8, 8 8, 8, 8, 8, 8, 8, 8, 8, 8 and here is 128-bit boundary right?

3119
02:52:35,600 --> 02:52:37,500
Or 16 bytes boundary.

3120
02:52:38,300 --> 02:52:39,900
And then we go again, eight.

3121
02:52:39,900 --> 02:52:40,700
And there's a boundary

3122
02:52:41,900 --> 02:52:45,400
So these boundaries are absolute in memory space.

3123
02:52:45,700 --> 02:52:49,400
It doesn't care where you think things start there, literally

3124
02:52:49,400 --> 02:52:50,400
absolute.

3125
02:52:50,500 --> 02:52:53,700
So, if you were to take a look at the pointer value, right?

3126
02:52:54,200 --> 02:52:56,000
The pointer value is going to be something like.

3127
02:52:56,000 --> 02:52:58,600
Okay, so this is never, we're never gonna get a pointer here because

3128
02:52:58,600 --> 02:53:02,900
you low memory is not mapped in this way ever because you know, the

3129
02:53:02,900 --> 02:53:04,400
null address is 0, right?

3130
02:53:04,500 --> 02:53:07,600
But let's say you had a pointer with a value of 7, right?

3131
02:53:08,000 --> 02:53:11,000
So that's the seventh bite right here is 0 1 2.

3132
02:53:11,200 --> 02:53:15,900
2, 3 4, 5 6 7, I should say it's the eighth B numerically.

3133
02:53:16,400 --> 02:53:17,600
So we're pointing into here.

3134
02:53:18,900 --> 02:53:24,300
So the question is, if I was going to do 128 bits of writing right?

3135
02:53:24,300 --> 02:53:32,800
16 b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 so write that.

3136
02:53:34,300 --> 02:53:39,500
What you can see is this is unaligned in the sense that some portion

3137
02:53:39,500 --> 02:53:45,600
of the right that will occur happens in one of these buckets that is

3138
02:53:45,600 --> 02:53:46,200
broken up.

3139
02:53:46,200 --> 02:53:47,000
Absolutely.

3140
02:53:48,300 --> 02:53:52,400
And the rest of the right happens in the next bucket.

3141
02:53:55,100 --> 02:53:59,800
So we've got two essential, you know, anytime we do 128-bit, right?

3142
02:54:00,000 --> 02:54:02,100
There's only two ways that that can really happen.

3143
02:54:02,500 --> 02:54:08,000
One way is we're perfectly in only one bucket so we start on B 0 B 16

3144
02:54:08,000 --> 02:54:08,700
or something.

3145
02:54:08,700 --> 02:54:14,600
Mod 16 we start right there so that we write entirely into one bucket.

3146
02:54:15,600 --> 02:54:20,600
Or we straddle two, buckets is the other way, and we can't ever

3147
02:54:20,600 --> 02:54:23,100
straddle three buckets because 100 because the buckets are the same

3148
02:54:23,100 --> 02:54:23,800
size of the, right.

3149
02:54:23,800 --> 02:54:27,300
So we can't possibly get more than two buckets, but we can get either

3150
02:54:27,300 --> 02:54:29,400
one or two buckets that we have to touch.

3151
02:54:31,300 --> 02:54:35,000
And the processors depending on which processor you're talking about,

3152
02:54:35,600 --> 02:54:38,800
like these more or less meaning.

3153
02:54:39,300 --> 02:54:41,000
Sometimes the processor doesn't really care.

3154
02:54:41,000 --> 02:54:44,800
If you write things underlined right in the old days, that really

3155
02:54:44,800 --> 02:54:45,500
certainly wasn't anything.

3156
02:54:45,500 --> 02:54:51,600
Anyone thought about because processors could only write things at a

3157
02:54:51,600 --> 02:54:55,400
size at one size and like, you know, things could only write a bite.

3158
02:54:55,400 --> 02:54:58,000
There was no such thing as being like, unaligned on the bike, right,

3159
02:54:58,000 --> 02:54:58,500
or whatever.

3160
02:54:59,100 --> 02:55:00,900
But when things go out to starting to work on,

3161
02:55:01,100 --> 02:55:02,500
Or B, like 32 bits.

3162
02:55:02,900 --> 02:55:06,300
There are processors that were like, okay, if the 32 bits happens to

3163
02:55:06,300 --> 02:55:10,200
be aligned on a 32-bit boundary for B, right?

3164
02:55:10,900 --> 02:55:13,700
It could go a little faster let's say because it doesn't have to think

3165
02:55:13,700 --> 02:55:14,400
about it as much.

3166
02:55:14,400 --> 02:55:16,700
Maybe you're one of the processors like working with 32 bits at a

3167
02:55:16,700 --> 02:55:16,900
time.

3168
02:55:16,900 --> 02:55:18,000
It was easier for it.

3169
02:55:18,000 --> 02:55:21,700
If they all kind of slot it in together or something and that's been

3170
02:55:21,700 --> 02:55:25,400
true all throughout history since then, you know, you pretty much have

3171
02:55:25,400 --> 02:55:26,300
this case where

3172
02:55:28,600 --> 02:55:32,600
As the processor deals with wider and wider stuff some processors have

3173
02:55:32,600 --> 02:55:37,400
an easier time dealing with operations that line up with memory along

3174
02:55:37,400 --> 02:55:41,100
the boundaries of, however, why those values are.

3175
02:55:42,000 --> 02:55:45,600
And that's a situation that we want to investigate.

3176
02:55:45,600 --> 02:55:49,000
Now is this this picture situation now in some processors, that's

3177
02:55:49,000 --> 02:55:50,100
extraordinary.

3178
02:55:50,100 --> 02:55:52,400
Ali important on other processors.

3179
02:55:52,400 --> 02:55:53,700
It's not so important.

3180
02:55:54,000 --> 02:55:57,100
And so it's always kind of a balancing act that.

3181
02:55:57,100 --> 02:55:57,800
Did you do there?

3182
02:55:58,800 --> 02:56:02,600
So, the first thing we can do to test this, right?

3183
02:56:05,300 --> 02:56:10,100
It's we could just align our X-Men's so that we're and xmax is so that

3184
02:56:10,100 --> 02:56:14,200
we're always aligned basically, right?

3185
02:56:14,400 --> 02:56:18,000
So what we could do is we could say, you know, we've got this robe

3186
02:56:18,000 --> 02:56:20,200
pointer here, right?

3187
02:56:20,900 --> 02:56:25,300
We could just cheat for a second and say, let's pretend we were always

3188
02:56:25,300 --> 02:56:25,900
aligned.

3189
02:56:26,100 --> 02:56:31,100
So let's look at this guy here and we'll look at the this this is kind

3190
02:56:31,100 --> 02:56:33,800
of a it's a pretty janky way of doing this, but I'm just going to do

3191
02:56:33,800 --> 02:56:34,500
it briefly

3192
02:56:35,300 --> 02:56:38,200
It's running at like 38 Cycles right now, right?

3193
02:56:38,200 --> 02:56:39,100
Let me just run it.

3194
02:56:39,500 --> 02:56:42,900
You know, let's run it without the the clipping to because we want a

3195
02:56:42,900 --> 02:56:44,100
bigger test case here.

3196
02:56:44,600 --> 02:56:50,600
So our clip, rect is just going to be, you know, the whole screen.

3197
02:56:54,200 --> 02:56:56,400
All right, so there we go.

3198
02:56:56,900 --> 02:56:57,800
There's the guy.

3199
02:56:58,000 --> 02:56:59,200
We'll just do it straight forward here.

3200
02:56:59,200 --> 02:56:59,900
36

3201
02:57:00,000 --> 02:57:00,800
Seven Cycles, right?

3202
02:57:00,800 --> 02:57:02,500
You can see that's what we're getting.

3203
02:57:03,200 --> 02:57:07,800
So if we come through here and we now, say all right, this row pointer

3204
02:57:07,800 --> 02:57:10,900
the place that we're going to be reading and writing from now.

3205
02:57:10,900 --> 02:57:12,900
Remember, there's really not much we can do about alignment on

3206
02:57:12,900 --> 02:57:14,200
Textures, right?

3207
02:57:14,200 --> 02:57:16,400
Because the textures were randomly accessing stuff.

3208
02:57:16,400 --> 02:57:16,600
Right?

3209
02:57:16,600 --> 02:57:17,400
Straight out of them.

3210
02:57:17,600 --> 02:57:21,300
There's not a whole lot we can do about aligning the textures other

3211
02:57:21,300 --> 02:57:25,400
than trying to do something, fancier about maybe like the way the

3212
02:57:25,400 --> 02:57:27,100
pixels are stored in them or something, I don't know.

3213
02:57:27,500 --> 02:57:29,900
But point being there's those are random.

3214
02:57:30,000 --> 02:57:30,400
Access.

3215
02:57:30,500 --> 02:57:32,300
But the frame buffer is not random acts of.

3216
02:57:32,300 --> 02:57:36,600
So what we could do is say, okay let's pretend we were always doing a

3217
02:57:36,600 --> 02:57:37,600
line stuff here.

3218
02:57:37,800 --> 02:57:41,700
So what we could do is say all right our alignment offset so are

3219
02:57:41,700 --> 02:57:43,100
aligned value, right?

3220
02:57:43,200 --> 02:57:47,200
Whatever that pointer is look we'll go ahead and grab that pointer.

3221
02:57:47,700 --> 02:57:49,300
I think we have you went pointer.

3222
02:57:51,600 --> 02:57:52,800
We have a un pointer.

3223
02:57:56,000 --> 02:57:56,900
Let's take a look.

3224
02:57:58,700 --> 02:57:59,500
We do not.

3225
02:58:01,100 --> 02:58:04,400
So we don't know what the, what the pointer size is, unfortunately.

3226
02:58:04,400 --> 02:58:07,300
We haven't actually done any work to get that.

3227
02:58:08,000 --> 02:58:11,900
And I'm not sure how you'd I don't remember how you do that.

3228
02:58:11,900 --> 02:58:15,300
See now has a newfangled way of you can get some of these things.

3229
02:58:16,000 --> 02:58:21,100
So what I want to do is is have a UNT pointer and I don't know.

3230
02:58:21,800 --> 02:58:25,100
Is that can I just can I just Hail Mary it?

3231
02:58:27,600 --> 02:58:28,000
No.

3232
02:58:28,800 --> 02:58:30,200
So what is the pointer type?

3233
02:58:30,200 --> 02:58:31,100
Let's find out.

3234
02:58:32,500 --> 02:58:33,900
They've got to have done this, right?

3235
02:58:33,900 --> 02:58:34,900
You wouldn't

3236
02:58:35,700 --> 02:58:37,800
You wouldn't go ahead and do this stuff.

3237
02:58:38,000 --> 02:58:43,600
I really hope without putting that in there, so let's just assume that

3238
02:58:43,600 --> 02:58:44,700
it has that.

3239
02:58:46,200 --> 02:58:48,400
So there's I thought I saw it.

3240
02:58:48,400 --> 02:58:49,500
Yeah, it pointer.

3241
02:58:51,000 --> 02:58:51,600
It's there.

3242
02:58:51,600 --> 02:58:53,100
So how do I there it is.

3243
02:58:53,100 --> 02:58:53,600
There it is.

3244
02:58:57,000 --> 02:58:58,700
In pointer Inuit pointer T.

3245
02:58:59,700 --> 02:59:00,500
Well, wait a minute.

3246
02:59:00,500 --> 02:59:02,000
That's what I just hope.

3247
02:59:02,000 --> 02:59:02,800
I had it backwards.

3248
02:59:05,200 --> 02:59:05,600
Sorry.

3249
02:59:09,400 --> 02:59:13,700
Okay, so basically what that allows me to do is say I want to change

3250
02:59:13,700 --> 02:59:17,100
this to an integer that I can manipulate, but I want it.

3251
02:59:17,100 --> 02:59:20,400
It's the same size as whatever the pointer is, right?

3252
02:59:22,500 --> 02:59:26,700
So that way on a 64-bit build, it'll be 64 bits and a 32-bit build.

3253
02:59:26,700 --> 02:59:28,900
It will be 32 bits since this is a pointer.

3254
02:59:30,400 --> 02:59:35,000
So there we go, I get the pointer, I turn the pointer into the thing

3255
02:59:35,000 --> 02:59:39,400
and then I just want to look and see if it's if it's 16 B alignment

3256
02:59:39,400 --> 02:59:41,500
that we're looking for, right?

3257
02:59:42,100 --> 02:59:43,900
That's going to be 2 to the fourth

3258
02:59:44,800 --> 02:59:47,900
So, what I want to do is I want to take two to the fourth, right?

3259
02:59:47,900 --> 02:59:48,500
16.

3260
02:59:49,000 --> 02:59:52,200
And I want to just subtract one from it, right?

3261
02:59:52,200 --> 02:59:58,100
Because that would give me all 1, B below where the 16 is, so I can

3262
02:59:58,100 --> 02:59:59,800
just look at what the bottom bits are of.

3263
03:00:00,000 --> 03:00:00,900
Alignment, right?

3264
03:00:01,500 --> 03:00:03,700
So that'll give me essentially whatever.

3265
03:00:03,800 --> 03:00:07,900
However, far off this thing is from being alignment for being from

3266
03:00:07,900 --> 03:00:09,000
being in alignment.

3267
03:00:10,000 --> 03:00:13,100
And then I'm just going to go ahead and just flat-out subtract that

3268
03:00:14,400 --> 03:00:16,100
times bitmap bytes per pixel.

3269
03:00:16,200 --> 03:00:18,000
I'm just going to flat out move the thing back.

3270
03:00:18,500 --> 03:00:20,000
So this is a complete lie.

3271
03:00:20,400 --> 03:00:22,800
It's not even going to render the right stuff.

3272
03:00:23,900 --> 03:00:26,200
It's just it's fully garbage, right?

3273
03:00:28,600 --> 03:00:29,100
Oh dear.

3274
03:00:31,300 --> 03:00:32,100
What have I done?

3275
03:00:35,500 --> 03:00:38,400
I think I know why that happened but I don't understand why the

3276
03:00:38,400 --> 03:00:39,600
debugger crashes.

3277
03:00:41,300 --> 03:00:44,700
It's just it's supposed to be the debugger like did it?

3278
03:00:44,700 --> 03:00:48,100
Buggers should not crash people God.

3279
03:00:49,600 --> 03:00:51,200
Our program Should Crash.

3280
03:00:51,300 --> 03:00:53,100
We are the one developing the program.

3281
03:00:53,200 --> 03:00:54,200
You're supposed to be done.

3282
03:00:54,200 --> 03:00:56,400
Developing your program and it shouldn't crash.

3283
03:00:58,000 --> 03:01:00,200
I don't feel like I should have to explain this to you Microsoft.

3284
03:01:00,200 --> 03:01:01,700
This is not complicated.

3285
03:01:02,900 --> 03:01:06,100
Maybe if you spent less time, installing SQL server on my machine for

3286
03:01:06,100 --> 03:01:10,000
your Visual Studio nonsense and more time, making sure that the bugger

3287
03:01:10,000 --> 03:01:13,100
didn't crash when debugging a program we wouldn't be in this

3288
03:01:13,100 --> 03:01:13,700
situation.

3289
03:01:13,800 --> 03:01:15,800
Anyway, point being

3290
03:01:18,800 --> 03:01:20,000
I was trying to say,

3291
03:01:21,200 --> 03:01:21,800
Was that?

3292
03:01:24,100 --> 03:01:26,200
In here, when I'm doing this alignment, right?

3293
03:01:26,300 --> 03:01:29,500
The that could step back off the end of the bitmap.

3294
03:01:29,800 --> 03:01:32,800
So in order to prevent that I would have to sort of always clip to

3295
03:01:32,800 --> 03:01:35,900
something that gives me like, you know, we could just have a whole row

3296
03:01:35,900 --> 03:01:40,800
of padding even at the moment, right to do, stop patting by a row.

3297
03:01:41,300 --> 03:01:43,600
This is much like what we're doing here for the padding.

3298
03:01:47,100 --> 03:01:47,800
So that's fine.

3299
03:01:52,600 --> 03:01:53,700
Yeah.

3300
03:01:57,400 --> 03:01:58,000
You know what I did?

3301
03:01:58,000 --> 03:02:02,100
This is stupid way to didn't I hear because this we probably could

3302
03:02:02,100 --> 03:02:03,800
have well, no mine.

3303
03:02:04,100 --> 03:02:06,800
Anyway, so point being off, we go.

3304
03:02:07,200 --> 03:02:09,700
Hopefully that would stop it from crashing because I think we can

3305
03:02:09,700 --> 03:02:13,200
always, we would never fetch backwards too far at that point.

3306
03:02:13,900 --> 03:02:16,200
But as you can see, right, it doesn't render things in the right place

3307
03:02:16,200 --> 03:02:17,500
because I'm not doing any work.

3308
03:02:17,500 --> 03:02:21,700
After I'm just flat-out forcing the alignment to be correct, even

3309
03:02:21,700 --> 03:02:24,600
though the alignment is not correct, right?

3310
03:02:25,900 --> 03:02:27,100
And so that's not good.

3311
03:02:27,200 --> 03:02:30,200
Obviously, but if I go ahead and do that, well, I'm going to try and

3312
03:02:30,200 --> 03:02:35,100
do here is see whether moving to alignment helps or not, right?

3313
03:02:36,100 --> 03:02:39,200
And so, if we take a look at what was happening here, right?

3314
03:02:39,200 --> 03:02:40,100
And take a look at that line.

3315
03:02:40,100 --> 03:02:43,600
I'll just go ahead and take that out for a second, right?

3316
03:02:46,200 --> 03:02:49,000
Here we are running 37 Cycles.

3317
03:02:49,300 --> 03:02:49,700
Yeah.

3318
03:02:50,500 --> 03:02:53,100
If I turn on alignment, stepping

3319
03:02:54,400 --> 03:02:56,400
should stay the same roughly, I would assume.

3320
03:02:59,600 --> 03:02:59,800
Well.

3321
03:03:00,800 --> 03:03:02,900
Actually gets a, just a slight bit faster.

3322
03:03:03,800 --> 03:03:06,300
And then so, then when I wanted to do was I want to go in here and

3323
03:03:06,300 --> 03:03:10,600
change our load and stores to no longer be unaligned.

3324
03:03:11,100 --> 03:03:12,800
So you remember, we were calling load you.

3325
03:03:12,800 --> 03:03:14,900
Because pixel was not aligned, right?

3326
03:03:14,900 --> 03:03:18,100
I can change load you to just a load, right?

3327
03:03:18,500 --> 03:03:20,100
And we didn't have any other ones there.

3328
03:03:20,500 --> 03:03:23,400
And so then we've also got the store you, which is unaligned, but

3329
03:03:23,400 --> 03:03:24,900
let's change that to aligned.

3330
03:03:25,600 --> 03:03:30,200
So now I'm just using the aligned versions of those guys and that's

3331
03:03:30,200 --> 03:03:30,700
it.

3332
03:03:32,200 --> 03:03:33,600
What happened here?

3333
03:03:33,800 --> 03:03:35,500
So I guess I did not do that.

3334
03:03:35,500 --> 03:03:37,800
Alignment properly start with that.

3335
03:03:46,600 --> 03:03:47,000
oh,

3336
03:03:50,300 --> 03:03:52,000
Do not ask me what I was thinking there.

3337
03:03:52,000 --> 03:03:54,600
First of all, I don't know why why?

3338
03:03:54,600 --> 03:03:56,800
I thought I wanted to make that be that way.

3339
03:03:56,800 --> 03:03:57,600
I didn't want to do that.

3340
03:03:57,600 --> 03:03:59,900
I want to literally step it to the actual lineman.

3341
03:03:59,900 --> 03:04:01,900
I don't want to multiply by a pixel value.

3342
03:04:01,900 --> 03:04:03,300
This is how much it's off.

3343
03:04:03,600 --> 03:04:04,800
So we're just going to do it that way.

3344
03:04:05,000 --> 03:04:06,200
Yeah, that was pretty dumb.

3345
03:04:06,900 --> 03:04:14,800
Anyway, so here's the version that's using store, you and load you and

3346
03:04:14,800 --> 03:04:16,400
it doesn't look any different to me.

3347
03:04:17,100 --> 03:04:17,500
Right?

3348
03:04:17,600 --> 03:04:20,500
The speed did not change at all.

3349
03:04:21,200 --> 03:04:26,300
They're so basically what that tells me unless I've made some kind of

3350
03:04:26,300 --> 03:04:29,900
an error is that at least at this point

3351
03:04:32,900 --> 03:04:39,200
until we address potentially other memory issues that alignment is

3352
03:04:39,300 --> 03:04:39,600
doing.

3353
03:04:39,600 --> 03:04:41,000
It unaligned is not a problem.

3354
03:04:42,300 --> 03:04:45,100
And furthermore, for all, we know, even after we address other

3355
03:04:45,100 --> 03:04:47,000
members, that might still not be a problem.

3356
03:04:47,200 --> 03:04:50,300
Meaning, it's possible that the unaligned, this of the store in the

3357
03:04:50,300 --> 03:04:54,800
load based on the fact that there's so much other work that we do is

3358
03:04:54,800 --> 03:04:59,200
just it just isn't relevant and will always be better off doing it

3359
03:04:59,200 --> 03:05:02,500
that way so that we don't have to overfill by more pixels, right?

3360
03:05:03,400 --> 03:05:04,400
Because yeah.

3361
03:05:04,700 --> 03:05:08,200
So I think the alignment there does not really look to me.

3362
03:05:08,900 --> 03:05:11,700
Like it's an issue at the moment so we're pretty.

3363
03:05:11,900 --> 03:05:13,700
They're all right.

3364
03:05:14,100 --> 03:05:18,600
So we have one last thing that we probably want to do here in terms of

3365
03:05:18,600 --> 03:05:20,300
stuff as we're fiddling with this routine.

3366
03:05:22,800 --> 03:05:29,400
What we'd like to do is we would like to make sure that we actually

3367
03:05:29,400 --> 03:05:34,300
always fill the real clip region and we don't right outside the clip

3368
03:05:34,300 --> 03:05:36,000
region, right?

3369
03:05:37,300 --> 03:05:42,200
And so the way that that's going to work is we know that we have to go

3370
03:05:42,200 --> 03:05:44,100
over our pixels.

3371
03:05:44,100 --> 03:05:47,400
Like so right, we know that we have to do four pixels at a time.

3372
03:05:48,400 --> 03:05:50,200
And so if we're doing four pixels at a time,

3373
03:05:51,400 --> 03:05:56,000
We have to make sure that our Mask doesn't allow us to write pixels

3374
03:05:56,000 --> 03:05:58,800
that are outside of where we're trying to write them.

3375
03:05:58,900 --> 03:05:59,900
So, like, on the last,

3376
03:06:00,200 --> 03:06:04,200
Time through the loop when we're going to write the final thing.

3377
03:06:05,600 --> 03:06:10,200
We would need to make sure that our our mask was set to not include

3378
03:06:10,200 --> 03:06:11,800
those at an additional pixels.

3379
03:06:13,000 --> 03:06:17,300
Now, the other way we could do it is we could make sure that it's

3380
03:06:17,300 --> 03:06:19,800
aligned at the end and it's the beginning.

3381
03:06:19,800 --> 03:06:25,800
That's going to be on a line 24 and I'm not sure which one we want to

3382
03:06:25,800 --> 03:06:26,700
do there.

3383
03:06:27,800 --> 03:06:32,300
Probably, we want to align the end and the reason that I say that

3384
03:06:32,300 --> 03:06:34,100
probably we want to align the end.

3385
03:06:35,600 --> 03:06:37,100
Is because I'm imagining.

3386
03:06:39,700 --> 03:06:43,800
I'm imagining that really the way we'd want to do, this is to

3387
03:06:43,800 --> 03:06:48,600
initialize the mask at the outset.

3388
03:06:50,000 --> 03:06:53,600
And then overwrite the mask with zero at the end, right?

3389
03:06:53,900 --> 03:06:56,900
So here's the right mask, you know what I mean?

3390
03:06:58,400 --> 03:06:59,100
And

3391
03:07:03,900 --> 03:07:06,200
and so here's what I wanted to try and do

3392
03:07:10,700 --> 03:07:12,700
We're writing for pixels at a time.

3393
03:07:15,200 --> 03:07:16,200
I drew that potential little bit.

3394
03:07:16,200 --> 03:07:16,700
Large.

3395
03:07:16,700 --> 03:07:20,400
You're writing for a pixels at a time doo-doo-doo-doo-doo-doo

3396
03:07:20,400 --> 03:07:21,900
doo-doo-doo-doo-doo.

3397
03:07:21,900 --> 03:07:22,400
There we go.

3398
03:07:23,800 --> 03:07:29,000
So here are pixels that we are going to right and these are broken up

3399
03:07:29,000 --> 03:07:30,500
into chunks of four.

3400
03:07:31,100 --> 03:07:34,900
So we have two options that we could do here for writing.

3401
03:07:36,600 --> 03:07:37,200
Right.

3402
03:07:37,700 --> 03:07:39,500
I'm actually probably make these line up as well.

3403
03:07:40,000 --> 03:07:41,200
So let's just do it this way.

3404
03:07:43,700 --> 03:07:46,800
So here's option one here is option 2.

3405
03:07:47,600 --> 03:07:50,100
So what we want to do, right?

3406
03:07:51,000 --> 03:07:52,600
Is we want to fill some region.

3407
03:07:53,300 --> 03:07:57,700
We want to fill between here and here, let's say right?

3408
03:07:57,700 --> 03:08:01,700
So we want to fill 0 1, 2, 3, 4.

3409
03:08:02,000 --> 03:08:06,300
So there's 5 pixels to fill but we know that we're going to fill them

3410
03:08:06,500 --> 03:08:07,500
in chunks of for.

3411
03:08:08,100 --> 03:08:12,700
So you have two options here, we could either fill these

3412
03:08:13,700 --> 03:08:16,200
And these right?

3413
03:08:16,400 --> 03:08:18,000
So here's pass.

3414
03:08:18,300 --> 03:08:20,000
This is our first time through the loop.

3415
03:08:20,100 --> 03:08:22,300
Here's our second time through the loop, right?

3416
03:08:22,400 --> 03:08:27,700
And mask these out so that we don't write them or we can do the

3417
03:08:27,700 --> 03:08:33,400
opposite alignment and try to write these out of line to that, that,

3418
03:08:33,400 --> 03:08:38,000
that ending Edge and write these and over instead.

3419
03:08:38,000 --> 03:08:40,400
So here is 0 and here's one.

3420
03:08:40,600 --> 03:08:42,900
So the first time through the loop, we don't

3421
03:08:43,200 --> 03:08:46,900
is and in the other case in the first in this than last time to the

3422
03:08:46,900 --> 03:08:47,900
rip, we don't write these

3423
03:08:48,900 --> 03:08:52,500
So what I was saying is usually, it's easier to start things up than

3424
03:08:52,500 --> 03:08:55,600
to change them at the end because what we can do is just initialize

3425
03:08:55,600 --> 03:08:59,800
the mask to this, and then at the end of the loop, Clear the mask.

3426
03:09:00,200 --> 03:09:03,800
So that we could never have to actually ever check to see which

3427
03:09:03,800 --> 03:09:05,100
iteration of the loop or on.

3428
03:09:05,100 --> 03:09:08,700
It always does the same every time rather than having to go are we at

3429
03:09:08,700 --> 03:09:10,800
the end of the loop are within the loop are within the loop?

3430
03:09:10,800 --> 03:09:11,600
Are you in the loop, right?

3431
03:09:11,600 --> 03:09:12,900
Just it's just seems simpler.

3432
03:09:13,700 --> 03:09:18,600
So what I'd rather do is do it this way where we start at the end X

3433
03:09:18,600 --> 03:09:23,600
Max, and we back up X-Men to be to start here, right?

3434
03:09:26,000 --> 03:09:27,800
So let's do that, right?

3435
03:09:27,800 --> 03:09:32,000
Because we can see if I switch back on our cliprect, right?

3436
03:09:32,300 --> 03:09:35,900
If I go in here and switch back on our clip clip, right groups, that's

3437
03:09:35,900 --> 03:09:36,700
on our cliprect.

3438
03:09:37,700 --> 03:09:40,200
If I go back in here and and switch back on our clip.

3439
03:09:40,200 --> 03:09:43,400
Rect and we can actually stop this now, since we don't need that

3440
03:09:43,400 --> 03:09:43,800
anymore.

3441
03:09:50,600 --> 03:09:54,900
When we move around, you can see that.

3442
03:09:54,900 --> 03:09:56,300
We've got this bug here.

3443
03:09:56,400 --> 03:09:59,100
That I was talking about right where we overfill because we're not

3444
03:09:59,100 --> 03:10:01,300
doing anything to prevent that, right?

3445
03:10:01,600 --> 03:10:05,000
What I want to do first is change it so that that error occurs on this

3446
03:10:05,000 --> 03:10:07,800
side that's why I'm going to do first, right?

3447
03:10:08,100 --> 03:10:11,600
So what I want to do is I want to see that this Edge firm up and this

3448
03:10:11,600 --> 03:10:12,600
Edge becomes Wiggly.

3449
03:10:12,700 --> 03:10:13,700
That's what we're looking for.

3450
03:10:16,500 --> 03:10:20,600
So, in order to do that, what I want to do here is come up with a

3451
03:10:20,600 --> 03:10:21,500
different way of computing.

3452
03:10:21,500 --> 03:10:26,200
This, I want to go ahead and take sort of like, the fill Whip and that

3453
03:10:26,200 --> 03:10:30,900
is going to be the max minus the Min X, right?

3454
03:10:31,100 --> 03:10:34,100
That's the amount we're going to fill by and then we're going to

3455
03:10:34,100 --> 03:10:38,600
compute the max X and actually line that up with exactly where I want

3456
03:10:38,600 --> 03:10:39,200
it to be.

3457
03:10:39,400 --> 03:10:42,700
But then what we're going to do is the Min X is actually going to be

3458
03:10:42,700 --> 03:10:45,600
whatever that Max X is minus the fill with

3459
03:10:46,100 --> 03:10:46,600
Right?

3460
03:10:47,600 --> 03:10:49,400
It's going to be - however much we want to fill.

3461
03:10:50,200 --> 03:10:54,100
And what I want to do is I want to round that fill with up so that it

3462
03:10:54,100 --> 03:10:57,900
actually is based on chunks of for, right?

3463
03:10:58,800 --> 03:11:00,800
So again, we already sort of saw how to do this.

3464
03:11:01,100 --> 03:11:06,700
So we have sort of are filled with sort of are filled with alignment.

3465
03:11:06,800 --> 03:11:11,300
If you will, we can take the fill with and we can end it with three

3466
03:11:11,300 --> 03:11:13,300
you know, 4 minus 1, right?

3467
03:11:14,700 --> 03:11:17,900
To find out how much it is off.

3468
03:11:19,300 --> 03:11:23,300
And then what we can do is try to, we just need to compute the value

3469
03:11:23,400 --> 03:11:28,100
that we would add to it to round it up to that value, right?

3470
03:11:28,300 --> 03:11:32,000
And that's going to be whatever you know, assuming that this if the

3471
03:11:32,000 --> 03:11:34,700
fill with the line, I can do this in a better way but I'm just I'm

3472
03:11:34,700 --> 03:11:36,200
getting a little tired, this point.

3473
03:11:36,200 --> 03:11:39,600
It's getting late through this in this the easiest way.

3474
03:11:40,300 --> 03:11:44,900
So assuming there's fill with a line is greater than 0.

3475
03:11:45,500 --> 03:11:48,500
We would just take whatever it would be to add it up.

3476
03:11:50,500 --> 03:11:52,500
24, right.

3477
03:11:55,200 --> 03:11:56,300
Hopefully, that makes some sense.

3478
03:11:57,400 --> 03:11:59,400
Oops, putting the fill rate to there.

3479
03:12:01,200 --> 03:12:02,900
Correct, right?

3480
03:12:03,500 --> 03:12:08,600
So this is actually going to align that fill with for us at least

3481
03:12:08,600 --> 03:12:09,100
hopefully.

3482
03:12:13,400 --> 03:12:14,600
That doesn't look right at all.

3483
03:12:24,200 --> 03:12:25,500
What is the problem?

3484
03:12:25,500 --> 03:12:29,400
They're filled with the line is however, much.

3485
03:12:29,400 --> 03:12:34,700
We were off assuming that we are off in some way, if it's exactly, for

3486
03:12:34,700 --> 03:12:40,900
we're fine, then we're going to increase that fill with bye-bye.

3487
03:12:48,800 --> 03:12:49,800
Fill with a line.

3488
03:12:55,500 --> 03:12:56,600
Let's go step into it.

3489
03:12:56,600 --> 03:12:58,800
Like I said, it's getting late and I'm tired.

3490
03:13:00,500 --> 03:13:01,200
Let's take a look.

3491
03:13:03,800 --> 03:13:04,900
Fill with this here.

3492
03:13:05,900 --> 03:13:07,800
Oh alright.

3493
03:13:07,800 --> 03:13:08,300
That's true.

3494
03:13:08,300 --> 03:13:09,400
We do have negatives.

3495
03:13:11,700 --> 03:13:14,200
So that's irrelevant for these.

3496
03:13:14,200 --> 03:13:17,200
I guess we want to look at non negative values because only

3497
03:13:17,200 --> 03:13:19,300
non-negative values are going to actually get filled.

3498
03:13:23,900 --> 03:13:26,200
That just because we're in optimization mode.

3499
03:13:26,600 --> 03:13:27,900
Let's turn off my patience off.

3500
03:13:28,100 --> 03:13:31,100
So we know we're actually looking at real values and not maybe

3501
03:13:31,100 --> 03:13:33,700
potentially some mistakes, okay?

3502
03:13:35,800 --> 03:13:36,800
Let's see here.

3503
03:13:46,300 --> 03:13:46,900
There we go.

3504
03:13:48,600 --> 03:13:52,600
So we're going to feel something that's 48 wide and that should be

3505
03:13:52,600 --> 03:13:53,300
exactly.

3506
03:13:53,300 --> 03:13:55,000
That's exactly a for, right?

3507
03:13:55,000 --> 03:13:55,900
That's a 12.

3508
03:13:56,500 --> 03:13:59,700
And so fill with a line should be zero.

3509
03:14:00,900 --> 03:14:06,100
So when we back this thing up, we should

3510
03:14:09,000 --> 03:14:12,000
See exactly the same values that were in the fill wrecked to begin

3511
03:14:12,000 --> 03:14:13,100
with, right?

3512
03:14:17,200 --> 03:14:17,700
And we do.

3513
03:14:18,100 --> 03:14:18,800
So that's fine.

3514
03:14:19,100 --> 03:14:22,900
So let's take something that isn't aligned hopefully, we'll get

3515
03:14:22,900 --> 03:14:24,600
something 73.

3516
03:14:24,600 --> 03:14:25,300
That's good.

3517
03:14:27,700 --> 03:14:31,200
So it says that the fill with the line is one, which means that it's

3518
03:14:31,200 --> 03:14:32,000
one off.

3519
03:14:32,100 --> 03:14:33,200
Let's see if that's true.

3520
03:14:33,900 --> 03:14:36,000
18 times 4 is 72.

3521
03:14:36,100 --> 03:14:36,700
That's correct.

3522
03:14:38,600 --> 03:14:39,300
That's correct.

3523
03:14:39,400 --> 03:14:40,400
It's one off from.

3524
03:14:40,500 --> 03:14:41,500
Yeah it's one over.

3525
03:14:42,900 --> 03:14:48,500
So we want to add to it for - the fill with the line and this line

3526
03:14:49,200 --> 03:14:49,900
which is 3.

3527
03:14:50,900 --> 03:14:54,400
So we're basically going to make the fill width snap up to the next

3528
03:14:54,700 --> 03:14:56,200
largest to.

3529
03:14:56,300 --> 03:14:58,900
I've been like Star just for evenly.

3530
03:15:00,200 --> 03:15:02,000
Which is what we did with 76.

3531
03:15:03,200 --> 03:15:07,400
And so now we're going to set up the places that were iterating over,

3532
03:15:08,100 --> 03:15:08,700
like so,

3533
03:15:13,100 --> 03:15:13,600
oh,

3534
03:15:15,200 --> 03:15:18,200
Yeah, so, I mean, it all looks correct.

3535
03:15:18,200 --> 03:15:26,500
But again, just for getting here, that only, right, that only actually

3536
03:15:26,500 --> 03:15:27,100
does it.

3537
03:15:27,500 --> 03:15:30,800
Before we've actually stepped to the location that we were going to

3538
03:15:30,800 --> 03:15:32,100
step to, right?

3539
03:15:32,500 --> 03:15:39,500
We have not actually set up the other values that we need here based

3540
03:15:39,500 --> 03:15:41,100
on that adjustment.

3541
03:15:41,500 --> 03:15:44,500
So that adjustment actually has to happen up.

3542
03:15:44,900 --> 03:15:45,900
Are right?

3543
03:15:46,200 --> 03:15:50,700
We that, you know, I can't just do it at the end in this sort of nice

3544
03:15:50,700 --> 03:15:51,700
convenient way.

3545
03:15:52,100 --> 03:15:54,800
That's, that's not going to work because all the rest of our

3546
03:15:54,800 --> 03:15:58,300
calculations based on that aren't getting redone, right?

3547
03:15:59,100 --> 03:16:05,000
So, that was just a little bit of stupidity as is happened as happens.

3548
03:16:06,200 --> 03:16:08,300
So we could just do that in here, right?

3549
03:16:10,600 --> 03:16:12,800
Where we then say, okay, we'll take that.

3550
03:16:12,800 --> 03:16:16,300
Phil wrecked, will take the Min X and we'll make that equal to the

3551
03:16:16,300 --> 03:16:19,000
fill wrecked Max x minus, whatever that fill with this.

3552
03:16:22,500 --> 03:16:23,300
And that'll do that.

3553
03:16:23,400 --> 03:16:27,000
And of course we only need to do that if we actually adjusted it, and

3554
03:16:27,000 --> 03:16:27,500
there we go.

3555
03:16:28,200 --> 03:16:30,100
In fact, I guess we, yeah.

3556
03:16:31,900 --> 03:16:34,800
There we go, because if we didn't adjust it, then we don't have to

3557
03:16:34,800 --> 03:16:35,600
change it at all.

3558
03:16:36,000 --> 03:16:37,600
So, let's go ahead and check that out.

3559
03:16:38,200 --> 03:16:39,200
See how we're doing there.

3560
03:16:40,000 --> 03:16:41,100
And that looks a little better to me.

3561
03:16:41,100 --> 03:16:46,200
You can see we're now solid on the right Edge, but we've got like

3562
03:16:46,500 --> 03:16:48,200
Badness happening on the left Edge.

3563
03:16:48,400 --> 03:16:49,300
Just what we want.

3564
03:16:49,900 --> 03:16:53,800
And so now what I'd like to do is I'd like to go ahead and actually do

3565
03:16:53,800 --> 03:16:56,600
the clipping there since we already have a right mask.

3566
03:16:57,100 --> 03:17:00,100
What I'm going to say is we'll introduce this will add a little bit of

3567
03:17:00,100 --> 03:17:01,400
a cost to our thing.

3568
03:17:02,000 --> 03:17:06,900
But what I'd like to do is basically just take that right mask and add

3569
03:17:06,900 --> 03:17:11,300
in the concept that we have to, we have to end it with yet, you know,

3570
03:17:11,300 --> 03:17:14,100
like one more thing, right?

3571
03:17:14,300 --> 03:17:19,000
So when we do this, mmm and right, when we, when we do that, the m and

3572
03:17:19,000 --> 03:17:19,600
Bs here,

3573
03:17:22,300 --> 03:17:28,100
I want to do essentially like right, mask equals, m m-- and si128.

3574
03:17:28,300 --> 03:17:32,900
I want to do that on right mask and clip mask.

3575
03:17:33,800 --> 03:17:37,100
Right and clip mask.

3576
03:17:37,900 --> 03:17:41,300
Is just some value put masks.

3577
03:17:43,200 --> 03:17:47,700
That we set to something here and at the moment I'll just do a set 1.

3578
03:17:47,700 --> 03:17:55,800
PS --mm set1 epi32 to just make it be all eats, right?

3579
03:17:56,100 --> 03:17:57,200
Can you do this?

3580
03:18:01,500 --> 03:18:02,700
You know, is that allowed?

3581
03:18:06,700 --> 03:18:07,300
apparently,

3582
03:18:10,600 --> 03:18:13,400
of course, it looks like, you know?

3583
03:18:14,700 --> 03:18:18,000
Yeah, it looks like you have to set an integer 8 and of course, I

3584
03:18:18,000 --> 03:18:21,300
can't actually set that, I could set it like that, I guess, which

3585
03:18:21,300 --> 03:18:25,600
would say, well, you know, - one is all F in the B so I could do that.

3586
03:18:26,200 --> 03:18:27,500
But yeah, all right, let's see.

3587
03:18:32,500 --> 03:18:32,900
So yeah.

3588
03:18:32,900 --> 03:18:35,200
So now we're still getting the exact same result which is what I

3589
03:18:35,200 --> 03:18:38,200
wanted just to make sure that that extra and is working out.

3590
03:18:38,200 --> 03:18:38,600
Okay.

3591
03:18:39,300 --> 03:18:40,600
So it's set to all ones.

3592
03:18:41,400 --> 03:18:44,600
And so what I want to do is at the end of the routine, I want to set

3593
03:18:44,600 --> 03:18:45,200
it to all one.

3594
03:18:45,200 --> 03:18:50,000
So when we go to step to the next pixel, I want the clip mask to be

3595
03:18:50,000 --> 03:18:54,300
set to all ones certainly because every other time through the loop,

3596
03:18:54,300 --> 03:18:55,500
it's always going to write everything.

3597
03:18:55,900 --> 03:18:59,500
And so the now all I need to do is set this clip mask to be like the

3598
03:18:59,500 --> 03:19:01,300
startup clip mask, you know?

3599
03:19:01,900 --> 03:19:02,200
And

3600
03:19:02,300 --> 03:19:06,200
Startup type mask is something that we're going to set based on this,

3601
03:19:06,200 --> 03:19:06,800
right?

3602
03:19:07,000 --> 03:19:11,500
So we have a 128 I which is our startup clip mask.

3603
03:19:11,700 --> 03:19:12,200
Okay.

3604
03:19:12,600 --> 03:19:15,800
And by default it will be set to just, you know, not having to

3605
03:19:15,800 --> 03:19:17,000
actually click anything.

3606
03:19:17,200 --> 03:19:22,300
But if we have to do an alignment adjustment here, then we essentially

3607
03:19:22,400 --> 03:19:26,900
want to set that clip mask to something that will cause the clipping

3608
03:19:26,900 --> 03:19:28,800
to to work properly.

3609
03:19:29,600 --> 03:19:30,100
Right.

3610
03:19:32,500 --> 03:19:35,300
So here is our adjustment.

3611
03:19:36,200 --> 03:19:36,800
Right.

3612
03:19:37,300 --> 03:19:41,300
We know that we have to adjust by that much

3613
03:19:42,500 --> 03:19:47,200
And what that is is that's essentially how many pixels we want to

3614
03:19:47,200 --> 03:19:47,800
clip.

3615
03:19:48,700 --> 03:19:53,000
So what that means is if you think about what's in our clip Basque

3616
03:19:54,200 --> 03:19:58,000
Our clip mask right now is set like this.

3617
03:19:58,200 --> 03:20:00,500
It's got all ones in here, right?

3618
03:20:00,600 --> 03:20:05,900
Oh, ones or ones or ones or ones, and these are 32-bit Lanes.

3619
03:20:07,500 --> 03:20:08,500
One for each pixel.

3620
03:20:09,300 --> 03:20:11,400
So all we really want to do here.

3621
03:20:12,600 --> 03:20:14,400
is if

3622
03:20:17,000 --> 03:20:21,800
We are going to align our pixels if we're going to clip pixels for

3623
03:20:21,800 --> 03:20:22,500
every pixel.

3624
03:20:22,500 --> 03:20:23,400
We're going to clip.

3625
03:20:23,900 --> 03:20:27,900
We want to clear out, 32 bits of ones, we want to basically write

3626
03:20:27,900 --> 03:20:29,700
zeros in there, right?

3627
03:20:29,900 --> 03:20:33,000
So one, pretty trivial way we could do it is take the number of pixels

3628
03:20:33,100 --> 03:20:38,500
number of pixels and shift down by 32 times that number right.

3629
03:20:41,500 --> 03:20:42,800
W a trivial way to do it.

3630
03:20:42,900 --> 03:20:46,000
I don't know if that's expensive or even possible in sse2.

3631
03:20:47,700 --> 03:20:49,500
It's basically like a shuffle.

3632
03:20:50,300 --> 03:20:55,000
It's like a well let's take a look, we'll see what we got.

3633
03:20:56,300 --> 03:20:59,200
So what do we have for shifting and swiveling?

3634
03:21:00,000 --> 03:21:00,800
Just take a look.

3635
03:21:04,000 --> 03:21:04,500
Sue me.

3636
03:21:06,500 --> 03:21:09,200
So if we wanted to do that, kind of a shift that would be a shift,

3637
03:21:09,700 --> 03:21:12,300
that would be a shift left by an immediate.

3638
03:21:13,500 --> 03:21:14,300
Let's take a look here.

3639
03:21:16,400 --> 03:21:22,300
So shift a right by IMM 8 B, while shifting in zeros and store the

3640
03:21:22,300 --> 03:21:23,600
result in dest.

3641
03:21:23,700 --> 03:21:25,900
So actually that would just do it.

3642
03:21:26,200 --> 03:21:28,900
The throughput is quite fine for our purposes.

3643
03:21:30,100 --> 03:21:33,100
So let's just do that looks fine to me.

3644
03:21:34,800 --> 03:21:35,800
So we'll do.

3645
03:21:36,200 --> 03:21:38,800
Oh and we don't even care here, really because now I think about it.

3646
03:21:38,800 --> 03:21:40,300
This is startup code, who cares?

3647
03:21:41,000 --> 03:21:42,600
It's hardly gets run over at all.

3648
03:21:43,200 --> 03:21:45,600
So our startup clip mask is

3649
03:21:45,700 --> 03:21:50,300
Going to be equal to the MMS rli.

3650
03:21:50,300 --> 03:21:55,200
Si128 of the startup quick mask and this is in B.

3651
03:21:55,800 --> 03:21:58,800
So we basically want our adjustment times for right.

3652
03:21:58,800 --> 03:22:02,400
We want to to shift it that many over.

3653
03:22:04,400 --> 03:22:05,400
Oh, nasty.

3654
03:22:05,400 --> 03:22:06,400
But it's an immediate.

3655
03:22:07,000 --> 03:22:07,600
All right.

3656
03:22:07,700 --> 03:22:10,000
Well, is there a one that is very thing?

3657
03:22:10,000 --> 03:22:10,500
We could do.

3658
03:22:10,500 --> 03:22:13,600
That doesn't need an immediate

3659
03:22:15,700 --> 03:22:16,300
Probably not.

3660
03:22:16,300 --> 03:22:19,100
So, what we probably have to do here is just do something cheesy.

3661
03:22:20,300 --> 03:22:23,900
This, this is probably not the best way to do this.

3662
03:22:26,300 --> 03:22:27,700
Just in case anyone was wondering.

3663
03:22:30,100 --> 03:22:30,600
You know what?

3664
03:22:30,700 --> 03:22:32,000
It's time for one of those comments.

3665
03:22:36,500 --> 03:22:37,300
so,

3666
03:22:40,700 --> 03:22:44,400
If the adjustment is one, we need to show us.

3667
03:22:46,100 --> 03:22:50,600
Go ahead and shift it by one, two, three.

3668
03:22:52,500 --> 03:22:53,300
So off we go.

3669
03:23:00,600 --> 03:23:02,100
Not quite right.

3670
03:23:06,000 --> 03:23:07,300
It is shift, right?

3671
03:23:07,300 --> 03:23:14,100
Correct, because we want to clear out the top guys for the clip mask.

3672
03:23:16,600 --> 03:23:17,300
I feel like,

3673
03:23:21,700 --> 03:23:23,500
so, for every one we add,

3674
03:23:24,500 --> 03:23:28,600
We would want to clear out the top dudes of our clip mask.

3675
03:23:29,300 --> 03:23:29,700
Yes.

3676
03:23:30,900 --> 03:23:38,700
So I'm not sure why I feel like that should be correct but who knows?

3677
03:23:39,100 --> 03:23:41,400
Let's go ahead and take a look.

3678
03:23:46,000 --> 03:23:49,200
Okay, so come in here.

3679
03:23:50,600 --> 03:23:52,000
Startup clip mask.

3680
03:23:56,500 --> 03:23:59,800
There's the startup foot mask and

3681
03:24:00,000 --> 03:24:04,600
Here we have our see it in HEX.

3682
03:24:05,600 --> 03:24:09,700
We've got our dudes first pickle sex, because third pixel for Pixel,

3683
03:24:11,100 --> 03:24:14,600
And we come in here, and we've got an adjustment to do.

3684
03:24:15,100 --> 03:24:18,700
The adjustment is one fill with the, with the line.

3685
03:24:20,500 --> 03:24:21,800
That's a negative guy, that wasn't it.

3686
03:24:21,800 --> 03:24:23,800
So this won't, this guy won't actually be used, but that's okay.

3687
03:24:23,800 --> 03:24:25,600
We can still take a look at what it does when it has to do an

3688
03:24:25,600 --> 03:24:26,300
adjustment of one.

3689
03:24:27,000 --> 03:24:32,600
When I have to do adjustment of one, it should get rid of this top.

3690
03:24:32,600 --> 03:24:33,900
I'm sorry, this, this talk.

3691
03:24:33,900 --> 03:24:34,100
I?

3692
03:24:34,100 --> 03:24:35,900
Umm, right, it does.

3693
03:24:37,100 --> 03:24:41,700
So, that actually looks kind of correct to me.

3694
03:24:46,100 --> 03:24:48,900
So I do wonder if maybe I've got something else wrong here.

3695
03:24:54,600 --> 03:24:55,500
Let's take a look.

3696
03:24:58,600 --> 03:25:00,500
Where is our like 73, dude?

3697
03:25:01,700 --> 03:25:02,200
There we go.

3698
03:25:03,200 --> 03:25:05,500
Alright, so our 73, dude.

3699
03:25:06,300 --> 03:25:08,800
He's got some sombreros to clear out here.

3700
03:25:09,400 --> 03:25:11,100
He's gotta clear up 12, bro.

3701
03:25:11,100 --> 03:25:14,700
So he should only write the first pixel, so let's see what happens

3702
03:25:15,000 --> 03:25:16,400
when we come down through here.

3703
03:25:17,900 --> 03:25:18,200
Go.

3704
03:25:18,200 --> 03:25:19,100
Go, go, go, go.

3705
03:25:19,100 --> 03:25:19,400
Go.

3706
03:25:19,400 --> 03:25:19,900
Go, go.

3707
03:25:19,900 --> 03:25:20,300
Go.

3708
03:25:21,900 --> 03:25:22,600
What?

3709
03:25:24,900 --> 03:25:25,900
Was the fill height?

3710
03:25:25,900 --> 03:25:28,700
Nothing to fill height was nothing great.

3711
03:25:28,700 --> 03:25:33,500
All that, all, that people for nothing.

3712
03:25:34,600 --> 03:25:35,400
Seriously.

3713
03:25:37,000 --> 03:25:38,000
It's just absurd.

3714
03:25:38,500 --> 03:25:38,800
Really?

3715
03:25:38,800 --> 03:25:39,700
When you think about it,

3716
03:25:41,000 --> 03:25:43,200
So here we are in our clip masks.

3717
03:25:43,200 --> 03:25:44,900
What's our startup clip Mass look like.

3718
03:25:44,900 --> 03:25:46,800
So here is another one where we've got that.

3719
03:25:55,800 --> 03:25:59,400
You know we should really early out these guys I mean it's doing all

3720
03:25:59,400 --> 03:26:04,100
this work on stuff, that doesn't actually fit into the region at all.

3721
03:26:04,400 --> 03:26:08,500
Let's go ahead and just do that because that just seems a lot better.

3722
03:26:10,800 --> 03:26:12,800
All right, so let's do this.

3723
03:26:13,700 --> 03:26:14,800
Let's just take that.

3724
03:26:16,500 --> 03:26:17,300
Pixel count.

3725
03:26:18,700 --> 03:26:19,200
Here.

3726
03:26:21,200 --> 03:26:24,700
It's not like pixel count, more appropriately.

3727
03:26:24,700 --> 03:26:26,200
It should be called.

3728
03:26:29,300 --> 03:26:34,000
Well I'll just leave this the way it is, s, okay?

3729
03:26:36,400 --> 03:26:40,500
So what I want to do is at the earliest possible time which would

3730
03:26:40,500 --> 03:26:41,800
basically be here

3731
03:26:43,500 --> 03:26:46,900
I want to go ahead and just make sure that we're actually feeling

3732
03:26:46,900 --> 03:26:48,600
something, right?

3733
03:26:48,600 --> 03:26:54,600
So I'm going to go through here and say, you know, let's let's just

3734
03:26:54,800 --> 03:26:55,900
early out the whole thing.

3735
03:26:57,100 --> 03:26:59,800
and so for that, I'm just going to do like if

3736
03:27:00,400 --> 03:27:02,800
Has area fill wrecked.

3737
03:27:02,900 --> 03:27:05,800
I'm just going to make a function in math.h.

3738
03:27:05,900 --> 03:27:15,800
Basically like inline pool 32 has area rectangle to I and this is just

3739
03:27:15,800 --> 03:27:23,800
going to be equal to you know results a DOT Min is less than a top Max

3740
03:27:25,500 --> 03:27:30,000
and a top Min less than a top Max.

3741
03:27:30,400 --> 03:27:35,700
So so we're basically just checking to make sure that in both cases it

3742
03:27:35,700 --> 03:27:39,300
has extents on those axes, right?

3743
03:27:40,500 --> 03:27:45,900
So that way we are not constantly going through a bunch of Loops for

3744
03:27:45,900 --> 03:27:46,800
no reason.

3745
03:27:49,700 --> 03:27:52,000
And so now here are filled with should always be something.

3746
03:27:52,000 --> 03:27:52,400
Valid.

3747
03:27:52,400 --> 03:27:53,000
There we go.

3748
03:27:53,900 --> 03:27:55,700
So we've got an adjustment of to here.

3749
03:27:56,400 --> 03:27:57,400
We fill that up.

3750
03:27:58,100 --> 03:27:58,600
Right.

3751
03:27:59,400 --> 03:27:59,800
There we go.

3752
03:27:59,800 --> 03:28:04,900
We've got the two masked out there come down here and now, finally

3753
03:28:04,900 --> 03:28:08,500
will get to see this because I've actually ensured that we're going to

3754
03:28:08,500 --> 03:28:12,100
be in things that actually go into the loop, which is nice.

3755
03:28:13,600 --> 03:28:17,700
And so, let's take a look at what we end up getting with that right

3756
03:28:17,700 --> 03:28:18,500
mask.

3757
03:28:19,000 --> 03:28:20,000
And the clip mask.

3758
03:28:20,000 --> 03:28:26,200
So the right mask, there is our white mask and the clip mask.

3759
03:28:34,800 --> 03:28:35,200
Oh,

3760
03:28:36,900 --> 03:28:37,400
you know.

3761
03:28:39,100 --> 03:28:42,700
And this is not because I'm on stream, just to be clear.

3762
03:28:43,100 --> 03:28:47,500
Actually make these kind of mistakes all the time, like, my brain just

3763
03:28:47,500 --> 03:28:52,600
isn't solid enough on always, keeping everything in the right order.

3764
03:28:53,100 --> 03:28:53,700
I make these.

3765
03:28:53,700 --> 03:28:56,600
I actually just these are the kinds of mistakes that I make in like

3766
03:28:56,600 --> 03:28:57,700
reels life.

3767
03:28:57,700 --> 03:28:58,400
All the time.

3768
03:29:00,300 --> 03:29:02,900
Like, you saw me explicitly.

3769
03:29:02,900 --> 03:29:05,800
Say like, it wasn't like I was confused.

3770
03:29:05,900 --> 03:29:08,700
You saw me explicitly, say I wanted to clear out

3771
03:29:09,500 --> 03:29:13,600
The top guys thinking that I want to clear out the later pixels but

3772
03:29:13,600 --> 03:29:15,300
it's at the beginning of the row.

3773
03:29:15,400 --> 03:29:18,600
So you want to clear out the earlier pixels, right?

3774
03:29:19,000 --> 03:29:25,800
I mean that's just kind of obvious so I don't know like yeah, I don't

3775
03:29:25,800 --> 03:29:28,700
know why I have that problem, but I definitely do and that always

3776
03:29:28,700 --> 03:29:29,300
happens to me.

3777
03:29:30,200 --> 03:29:34,000
So I was thinking of mentally, what I wanted to do correctly, but

3778
03:29:34,000 --> 03:29:36,600
mapping that to what actually happens in the register, I was totally

3779
03:29:36,600 --> 03:29:37,000
wrong.

3780
03:29:39,400 --> 03:29:42,400
So now it looks like we have much more solid clipping, right?

3781
03:29:43,100 --> 03:29:48,000
So that's good and I'll go ahead and turn on the optimized version

3782
03:29:48,200 --> 03:29:50,400
which presumably should not have broken much.

3783
03:29:50,600 --> 03:29:55,700
It does cost us a little bit to do it, so that's unfortunate but you

3784
03:29:55,700 --> 03:29:58,400
know, we're going to need it if you want to break up stuff into

3785
03:29:58,400 --> 03:29:58,900
chunks.

3786
03:30:00,000 --> 03:30:01,900
So there we go, right?

3787
03:30:02,500 --> 03:30:06,500
So now what I'd like to do and this will actually probably hurt our

3788
03:30:06,500 --> 03:30:10,800
frame rate because obviously you wouldn't necessarily want to do this

3789
03:30:12,100 --> 03:30:13,300
for any particular reason.

3790
03:30:13,300 --> 03:30:16,000
But let's go ahead and

3791
03:30:18,900 --> 03:30:20,300
And actually break this up a little bit.

3792
03:30:20,700 --> 03:30:25,400
So, instead of doing this stuff here, what I'm actually going to do is

3793
03:30:25,400 --> 03:30:31,200
I'm actually going to start passing through that clip that those those

3794
03:30:31,200 --> 03:30:33,500
clip regions and stuff, right?

3795
03:30:34,300 --> 03:30:38,900
So what I want to do is when we, you know, when we passed the stuff in

3796
03:30:38,900 --> 03:30:42,900
here to draw a rectangle quickly rectangle quickly.

3797
03:30:42,900 --> 03:30:43,400
Oops.

3798
03:30:45,300 --> 03:30:46,600
Robert angle quickly.

3799
03:30:48,800 --> 03:30:51,800
What I want to do is I don't really want this guy to look at the

3800
03:30:51,800 --> 03:30:56,900
buffer anymore like the buffer width and height are just not going to

3801
03:30:56,900 --> 03:30:58,100
be relevant to it anymore.

3802
03:30:59,100 --> 03:31:02,800
And so it's just going to use the buffer memory and pitch.

3803
03:31:02,800 --> 03:31:04,700
And that's it, right?

3804
03:31:05,700 --> 03:31:08,800
So it's going to take in addition to what it's getting here.

3805
03:31:09,700 --> 03:31:13,700
It's going to take a rectangle to I, which is the clip rect and it's

3806
03:31:13,700 --> 03:31:18,200
going to take an even or odd value, which is that parameter to say.

3807
03:31:18,800 --> 03:31:20,000
What is going on there?

3808
03:31:20,700 --> 03:31:25,200
And then it is going to be

3809
03:31:27,100 --> 03:31:29,000
It's going to do.

3810
03:31:31,500 --> 03:31:32,300
This clip reps.

3811
03:31:32,800 --> 03:31:38,800
This clip right here, it's going to do this for initialization like so

3812
03:31:39,700 --> 03:31:44,200
and then with Max and height, Max should never be used ever again,

3813
03:31:45,100 --> 03:31:45,600
right?

3814
03:31:45,800 --> 03:31:46,200
Yeah.

3815
03:31:47,600 --> 03:31:48,100
so,

3816
03:31:54,700 --> 03:31:57,100
I got to be honest with you, I'm not sure.

3817
03:31:58,700 --> 03:31:59,000
Why?

3818
03:31:59,000 --> 03:32:03,800
We were subtracting 3 from the height before.

3819
03:32:06,600 --> 03:32:10,400
That doesn't make a lot of sense because we're writing by four things

3820
03:32:10,400 --> 03:32:10,800
at a time.

3821
03:32:10,800 --> 03:32:15,400
So it makes sense why we would need the width to not overwrite in that

3822
03:32:15,400 --> 03:32:15,700
way.

3823
03:32:15,700 --> 03:32:19,600
But why the height would have to be that way?

3824
03:32:19,600 --> 03:32:21,700
I don't understand.

3825
03:32:23,300 --> 03:32:27,600
So that's a bit odd to say, the very least.

3826
03:32:31,200 --> 03:32:32,900
But that's the way it goes.

3827
03:32:32,900 --> 03:32:37,400
I guess sometimes so let's get rid of that and then we can make it

3828
03:32:37,400 --> 03:32:37,600
work.

3829
03:32:37,600 --> 03:32:41,300
It's early off of the cliprect but now we have to actually pass the

3830
03:32:41,300 --> 03:32:42,300
cliprect in here.

3831
03:32:42,700 --> 03:32:47,300
So here's our clip rect and our cliprect of course, is going to be

3832
03:32:49,200 --> 03:32:53,100
This way right with an alpha Target height.

3833
03:32:53,100 --> 03:32:59,200
Now, this should crash or at least have the potential to crash.

3834
03:32:59,300 --> 03:32:59,800
I should say.

3835
03:33:01,300 --> 03:33:02,900
And I'll talk about why in a second.

3836
03:33:05,100 --> 03:33:06,400
It may not actually crash.

3837
03:33:13,100 --> 03:33:14,400
What's what is happening?

3838
03:33:17,700 --> 03:33:18,800
Something bad is happening.

3839
03:33:20,400 --> 03:33:23,600
Something very bad is happening but I don't know what it actually is.

3840
03:33:34,300 --> 03:33:35,100
Whoa.

3841
03:33:38,700 --> 03:33:41,000
We are like super slow right now.

3842
03:33:44,300 --> 03:33:45,200
What happened?

3843
03:33:48,700 --> 03:33:49,200
What did we?

3844
03:33:49,200 --> 03:33:50,200
What did we do?

3845
03:33:50,300 --> 03:33:51,200
What did we do?

3846
03:33:57,800 --> 03:33:58,100
Ah,

3847
03:34:01,600 --> 03:34:04,500
Something very bad happened, but I'm not exactly sure what it was.

3848
03:34:07,000 --> 03:34:12,000
We are calling this twice now but that can't really account for that

3849
03:34:12,100 --> 03:34:13,300
ridiculous of a thing, right?

3850
03:34:13,300 --> 03:34:20,000
Take take that out of the equation and we're that was still really

3851
03:34:20,000 --> 03:34:21,600
bad, right?

3852
03:34:24,200 --> 03:34:26,100
Like that's just crazy slow.

3853
03:34:30,800 --> 03:34:36,300
But I don't know why, I have no idea why you're so slow Robert, I go

3854
03:34:36,300 --> 03:34:36,900
quickly.

3855
03:34:38,900 --> 03:34:44,200
It's still only taking 36 cycles per pixel, according to that.

3856
03:34:46,700 --> 03:34:51,000
But I'm not sure how it was able to get so much slower like that, it

3857
03:34:51,000 --> 03:34:52,300
doesn't make a whole lot of sense to me.

3858
03:34:57,400 --> 03:35:01,500
I'm totally stumped by that just to be clear.

3859
03:35:02,300 --> 03:35:04,900
I have absolutely no idea why that would be the case.

3860
03:35:16,500 --> 03:35:17,100
Well.

3861
03:35:20,600 --> 03:35:22,100
I would like to go to bed soon.

3862
03:35:22,100 --> 03:35:24,800
So this is definitely one of those bugs that we are going to have to

3863
03:35:24,800 --> 03:35:30,600
think about how we can solve in short order, because what on Earth?

3864
03:35:31,600 --> 03:35:32,900
Is going on there.

3865
03:35:38,200 --> 03:35:38,500
oh,

3866
03:35:45,200 --> 03:35:45,900
That's funny.

3867
03:35:46,600 --> 03:35:49,300
That's just stupid as always.

3868
03:35:50,800 --> 03:35:54,400
So yeah, you know this has to be inverted, right?

3869
03:35:54,400 --> 03:35:57,200
Because this finds the area, so we were basically looping over the

3870
03:35:57,200 --> 03:35:58,100
entire screen.

3871
03:35:59,100 --> 03:35:59,800
It's a kind of increase.

3872
03:36:00,000 --> 03:36:01,000
That's how fast I was.

3873
03:36:01,200 --> 03:36:04,700
We were looping over the entire screen and touching every pixel.

3874
03:36:06,200 --> 03:36:10,700
For every single Sprite and it still ran that fast.

3875
03:36:10,900 --> 03:36:12,800
That's pretty good man.

3876
03:36:12,800 --> 03:36:14,300
We made this routine fast.

3877
03:36:15,000 --> 03:36:16,000
That's pretty funny.

3878
03:36:17,100 --> 03:36:20,400
Yeah, so this has to actually this is this is not right.

3879
03:36:21,600 --> 03:36:24,600
I'm going to go ahead and introduce the inverted, Infinity rectangle

3880
03:36:25,400 --> 03:36:28,300
because everyone loves the infinite, inverted, Infinity rectangle.

3881
03:36:30,400 --> 03:36:32,800
And what the inverted Infinity rectangle is, right?

3882
03:36:34,000 --> 03:36:40,900
Is this just an easy shorthand for saying, I want the Min to be equal

3883
03:36:40,900 --> 03:36:41,700
to the maximum.

3884
03:36:41,700 --> 03:36:44,000
It could possibly be and the max to be equal to the minimum.

3885
03:36:44,000 --> 03:36:46,700
It could possibly be so that when you do a loop like this when you

3886
03:36:46,700 --> 03:36:52,300
just go through it and you try to expand the bounds, it just works,

3887
03:36:52,600 --> 03:36:53,100
right?

3888
03:36:53,600 --> 03:36:55,600
So it's basically just saying okay?

3889
03:36:56,100 --> 03:36:58,900
You know, I want you to produce for me.

3890
03:37:00,100 --> 03:37:08,900
Something, which is going to be the Min X and the Min y equal to n Max

3891
03:37:09,500 --> 03:37:14,000
and the Min y.

3892
03:37:14,800 --> 03:37:15,900
Sorry at the max

3893
03:37:17,000 --> 03:37:22,500
X and the max y equals negative 60.

3894
03:37:30,400 --> 03:37:31,600
Whoops, in lien.

3895
03:37:31,600 --> 03:37:32,400
That's a good thing.

3896
03:37:34,300 --> 03:37:34,800
There we go.

3897
03:37:35,200 --> 03:37:37,200
Okay, so the inverted Infinity rectangle.

3898
03:37:37,200 --> 03:37:38,800
Hopefully, we'll save our frame mate.

3899
03:37:38,800 --> 03:37:40,400
I don't know if it actually will or not.

3900
03:37:40,900 --> 03:37:43,300
We'll find out and this is presumably.

3901
03:37:43,300 --> 03:37:47,100
The crash that I was mentioning so temporarily.

3902
03:37:49,700 --> 03:37:55,300
Temporarily will will sort of adjust our cliprect to make sure that

3903
03:37:55,300 --> 03:37:56,000
doesn't happen.

3904
03:37:56,000 --> 03:38:00,000
But then I want to actually go fix that so that we no longer have to

3905
03:38:00,200 --> 03:38:00,800
adjust the clip.

3906
03:38:00,800 --> 03:38:01,200
Rect.

3907
03:38:01,900 --> 03:38:02,800
Alright, so the clip.

3908
03:38:02,800 --> 03:38:12,000
Rect right, here's our right to do correct buffers with overflow,

3909
03:38:13,000 --> 03:38:13,500
right?

3910
03:38:15,500 --> 03:38:18,800
So okay, what I want to do here is just say, okay, let's make sure we

3911
03:38:18,800 --> 03:38:23,300
have four pixels on all of the borders so that we can't possibly over,

3912
03:38:23,300 --> 03:38:23,600
right?

3913
03:38:23,600 --> 03:38:26,600
No matter how stupid our code is temporarily, right?

3914
03:38:27,400 --> 03:38:30,300
Didn't mean to actually do that to the one I was saving.

3915
03:38:32,000 --> 03:38:38,200
So if I do that temporarily hope that can avoid the crash or we can

3916
03:38:38,200 --> 03:38:41,000
just still crash, which would be cool.

3917
03:38:44,700 --> 03:38:48,300
Do not know why be getting that because this should still give me at

3918
03:38:48,300 --> 03:38:50,900
least in theory the correct.

3919
03:38:50,900 --> 03:38:53,100
Well, but it totally didn't.

3920
03:38:56,600 --> 03:38:57,400
Why is my clip?

3921
03:38:57,400 --> 03:38:59,600
Rect I set the clip rectangle.

3922
03:39:00,200 --> 03:39:01,500
Oh wow.

3923
03:39:02,000 --> 03:39:02,200
Yeah.

3924
03:39:02,200 --> 03:39:03,300
Someone's getting sleepy.

3925
03:39:03,600 --> 03:39:04,700
And that someone is me.

3926
03:39:06,700 --> 03:39:08,100
That's the one I wanted to set.

3927
03:39:11,400 --> 03:39:15,500
So there we go and now we're not in the dreaded super slow.

3928
03:39:15,500 --> 03:39:16,200
Everything.

3929
03:39:16,700 --> 03:39:17,200
Right.

3930
03:39:18,300 --> 03:39:20,400
So now that we're passing the clip rect down,

3931
03:39:21,900 --> 03:39:23,000
And that's all good.

3932
03:39:23,100 --> 03:39:23,900
Everyone's happy.

3933
03:39:24,600 --> 03:39:28,600
What I want to do is make it so that render group to Output is

3934
03:39:28,600 --> 03:39:31,600
actually some totally other thing, right?

3935
03:39:31,900 --> 03:39:36,800
Actually want it to look like this, where render group to Output?

3936
03:39:39,400 --> 03:39:40,700
Rid of all this stuff.

3937
03:39:43,000 --> 03:39:44,000
Actually, you know what, though?

3938
03:39:46,400 --> 03:39:49,100
I do want to still time this one, I think.

3939
03:39:50,300 --> 03:39:56,600
So, what I'm actually going to do, I guess is make this B tiled render

3940
03:39:56,600 --> 03:39:58,400
group to Output or something like that.

3941
03:39:59,700 --> 03:40:00,800
And I'm not going to time it.

3942
03:40:03,800 --> 03:40:04,200
Okay.

3943
03:40:06,200 --> 03:40:06,700
And

3944
03:40:08,400 --> 03:40:11,300
Yeah, and we'll see, I don't know how we're going to actually line

3945
03:40:11,300 --> 03:40:12,900
this up eventually.

3946
03:40:12,900 --> 03:40:15,900
That's what we'll start looking at on a Monday.

3947
03:40:16,900 --> 03:40:21,400
But in here, where we do render grouped output,

3948
03:40:26,000 --> 03:40:26,400
Oops.

3949
03:40:26,900 --> 03:40:31,200
I actually went and made out to be, I guess it doesn't want to give

3950
03:40:31,200 --> 03:40:31,500
me.

3951
03:40:31,800 --> 03:40:33,300
Give me hand me that CPP.

3952
03:40:34,400 --> 03:40:37,900
There we go, surrender, group to Output.

3953
03:40:38,700 --> 03:40:40,500
I'm going to just call tiled render group tab.

3954
03:40:40,500 --> 03:40:41,000
But now,

3955
03:40:42,400 --> 03:40:45,800
We're going to have to do something a little fancier there but that'll

3956
03:40:45,800 --> 03:40:47,300
be next week's job.

3957
03:40:48,000 --> 03:40:48,200
Alright.

3958
03:40:48,200 --> 03:40:50,100
So we do our Todd render group to Output.

3959
03:40:52,500 --> 03:40:52,600
What?

3960
03:40:52,600 --> 03:40:56,300
This is going to do is I'm going to pass the clip rect in.

3961
03:40:58,500 --> 03:41:02,000
Like so and then I'm going to pass in.

3962
03:41:02,000 --> 03:41:06,300
Also, in addition to that, the even odd, right?

3963
03:41:08,100 --> 03:41:12,800
So in here, this will now pass the even on

3964
03:41:17,500 --> 03:41:21,800
All right, so we do that and everyone's happy and everything's good,

3965
03:41:23,200 --> 03:41:27,400
and then I just go ahead and grab this out and put it in the outside

3966
03:41:27,400 --> 03:41:27,800
thing.

3967
03:41:28,500 --> 03:41:34,900
So, tiled group will just do render group to Output like so render

3968
03:41:34,900 --> 03:41:41,600
group out the target with Rex false and true.

3969
03:41:42,800 --> 03:41:46,600
Okay, and now we can only just beaten us do one of these because we're

3970
03:41:46,600 --> 03:41:48,800
calling it twice, right?

3971
03:41:49,700 --> 03:41:50,400
And off we go.

3972
03:41:52,200 --> 03:41:55,300
Or not, as the case may be.

3973
03:41:58,000 --> 03:41:58,400
What happened?

3974
03:41:58,400 --> 03:41:59,900
They're calling it twice.

3975
03:42:07,900 --> 03:42:09,800
begin time blocked even

3976
03:42:12,300 --> 03:42:15,700
Toronto to quickly clip rect even.

3977
03:42:18,200 --> 03:42:19,600
Which is passing both.

3978
03:42:21,200 --> 03:42:24,300
And we call it twice once with each.

3979
03:42:25,400 --> 03:42:26,600
Why am I not?

3980
03:42:27,700 --> 03:42:29,900
Why am I not seeing the proper thing here?

3981
03:42:42,400 --> 03:42:43,300
I would like to know.

3982
03:42:52,200 --> 03:42:52,800
All right.

3983
03:42:54,900 --> 03:42:55,900
Let's see what happens.

3984
03:42:57,200 --> 03:42:59,200
So we should get no update to the frame buffer here.

3985
03:42:59,300 --> 03:43:01,100
Meaning I won't see anything if I try to move

3986
03:43:02,400 --> 03:43:03,500
This should give me.

3987
03:43:05,400 --> 03:43:06,500
One set of lines.

3988
03:43:06,600 --> 03:43:07,500
This should give me.

3989
03:43:09,200 --> 03:43:11,400
The other set of lines which it does.

3990
03:43:12,300 --> 03:43:13,700
Oh well,

3991
03:43:15,100 --> 03:43:19,100
Yeah, that's another thing we would need to do, isn't it?

3992
03:43:21,100 --> 03:43:26,000
So right now our clear call right?

3993
03:43:27,800 --> 03:43:32,300
Our clear call is actually just doing a draw rectangle and that draw

3994
03:43:32,300 --> 03:43:38,100
rectangle call does not in any way obey the even odd lines, right?

3995
03:43:38,500 --> 03:43:42,400
So we need to do is we need to update our draw rectangle call to take,

3996
03:43:42,700 --> 03:43:43,900
you know, the

3997
03:43:45,800 --> 03:43:47,700
The clipping information, right?

3998
03:43:48,300 --> 03:43:51,900
And that will allow us also, I suppose to start clipping the rest of

3999
03:43:51,900 --> 03:43:53,400
these things, which we want to do.

4000
03:43:56,100 --> 03:43:56,800
So that's fine.

4001
03:43:58,300 --> 03:44:00,000
All right so let's go ahead and do that.

4002
03:44:00,000 --> 03:44:00,800
Draw a rectangle.

4003
03:44:01,500 --> 03:44:05,600
So rectangle to I clip rect rule 32 even

4004
03:44:06,900 --> 03:44:10,800
And this is probably pretty straightforward.

4005
03:44:10,800 --> 03:44:15,200
I would think it looks like these are just doing the clip here, right?

4006
03:44:16,000 --> 03:44:19,000
So, so basically, this is just the fill wrecked, right?

4007
03:44:19,000 --> 03:44:23,700
This is rectangle to, I feel wrecked and this is just going to do

4008
03:44:24,600 --> 03:44:26,600
that, right?

4009
03:44:27,900 --> 03:44:28,800
That's the Phil wreck.

4010
03:44:28,800 --> 03:44:32,100
So then we can just do Phil wreck equals intersect

4011
03:44:32,900 --> 03:44:35,600
Direct and cliprect get rid of this stuff.

4012
03:44:38,700 --> 03:44:43,200
Then we just go ahead and use the fill wrecked here.

4013
03:44:48,400 --> 03:44:51,300
60 and off it goes.

4014
03:44:52,300 --> 03:44:52,800
Right.

4015
03:44:54,500 --> 03:44:55,600
Feel like that should do it.

4016
03:44:56,900 --> 03:44:58,600
Draw a rectangle outline.

4017
03:45:00,700 --> 03:45:01,200
Who calls?

4018
03:45:01,200 --> 03:45:02,400
Draw a rectangle outline.

4019
03:45:14,600 --> 03:45:16,900
What, what?

4020
03:45:19,700 --> 03:45:21,000
Does this even exist anymore?

4021
03:45:23,600 --> 03:45:26,300
It doesn't, it doesn't does it.

4022
03:45:26,800 --> 03:45:29,100
All right, let's get rid of this guy.

4023
03:45:29,500 --> 03:45:30,600
We don't care about him.

4024
03:45:31,900 --> 03:45:33,200
Not even used anymore.

4025
03:45:35,300 --> 03:45:37,100
Probably leave that case entirely.

4026
03:45:38,500 --> 03:45:44,100
And draw a rectangle, trance state, initialized test diffuse.

4027
03:45:45,100 --> 03:45:48,400
All right, so this guy is some kind of clear.

4028
03:45:48,400 --> 03:45:51,800
We're sort of cheating and using the renderer directly out from

4029
03:45:51,800 --> 03:45:55,200
underneath itself that will probably have to go away at some point

4030
03:45:55,200 --> 03:45:59,000
relatively soon because we won't be allowed to do stuff quite like

4031
03:45:59,000 --> 03:45:59,800
that anymore.

4032
03:46:00,600 --> 03:46:04,800
But all right so if we did want to do that we would have to pass it

4033
03:46:05,800 --> 03:46:06,600
more information.

4034
03:46:06,600 --> 03:46:10,400
I'm just going to go ahead and and nuke this test.

4035
03:46:10,400 --> 03:46:13,600
If use test normal guys I think for now.

4036
03:46:24,900 --> 03:46:25,400
Well.

4037
03:46:35,700 --> 03:46:36,700
Where is actually used?

4038
03:46:43,300 --> 03:46:45,400
All right, so I'll nuke this guy for now.

4039
03:46:46,600 --> 03:46:47,800
But just that guy.

4040
03:46:51,400 --> 03:46:52,600
We'll just do that with.

4041
03:46:54,100 --> 03:46:54,500
What was he was?

4042
03:46:54,500 --> 03:46:54,800
Just

4043
03:46:56,200 --> 03:46:58,500
Passing gray basically.

4044
03:46:59,600 --> 03:47:03,100
So, all we really need to do here is we need to do something where

4045
03:47:03,100 --> 03:47:04,700
we'd actually fill him with gray.

4046
03:47:08,500 --> 03:47:10,700
Give you a C3.

4047
03:47:11,600 --> 03:47:14,000
Build this guy with gray.

4048
03:47:15,000 --> 03:47:15,500
Okay.

4049
03:47:16,000 --> 03:47:17,100
Leave that like that for now.

4050
03:47:20,200 --> 03:47:23,500
Okay, so let's get back to what we were doing.

4051
03:47:24,500 --> 03:47:28,500
So now we have this guy, we have the draw rectangle call taking those

4052
03:47:28,500 --> 03:47:32,000
parents, but we're not actually using the even odd guy, the even odd

4053
03:47:32,000 --> 03:47:34,700
part of it, which we need to do.

4054
03:47:36,300 --> 03:47:41,100
So, if we take a look at draw rectangle quickly, you can see that

4055
03:47:41,100 --> 03:47:49,300
we've got the even there and we need to do this operation, right.

4056
03:47:50,100 --> 03:47:53,200
And we could actually make this operation, be something that is common

4057
03:47:53,200 --> 03:47:56,800
between the two routines since they're so similar, right.

4058
03:47:57,400 --> 03:47:59,800
They can see the way that this works up here,

4059
03:48:00,100 --> 03:48:05,800
When I do the the Phil, you know, draw a rectangle, where's the other

4060
03:48:05,800 --> 03:48:06,100
guy?

4061
03:48:06,200 --> 03:48:07,600
Where's where's my draw rectangle?

4062
03:48:07,900 --> 03:48:08,300
Oops.

4063
03:48:10,800 --> 03:48:17,100
Okay, so if I come over here and look at draw a rectangle, you can see

4064
03:48:17,100 --> 03:48:19,700
that essentially I'm doing exact same thing and I would I would be

4065
03:48:19,700 --> 03:48:22,500
doing the exact same thing here, right?

4066
03:48:23,300 --> 03:48:28,200
And so I don't know if maybe we want to make that the something you

4067
03:48:28,200 --> 03:48:29,000
know that's more.

4068
03:48:30,700 --> 03:48:34,100
More standardized, it's pretty trivial piece of code but you know you

4069
03:48:34,100 --> 03:48:34,600
never know.

4070
03:48:35,900 --> 03:48:43,300
So now I think we are probably proper properly doing every other line.

4071
03:48:45,900 --> 03:48:47,000
looks like we've got

4072
03:48:49,300 --> 03:48:50,400
because that's still in the buffer.

4073
03:48:50,800 --> 03:48:53,800
So it looks like we're probably doing every other line in those calls

4074
03:48:53,800 --> 03:48:54,200
now.

4075
03:48:54,600 --> 03:48:59,800
So, let's take a look and see like there, go ahead and fix that.

4076
03:48:59,800 --> 03:49:00,700
So we're doing both.

4077
03:49:01,400 --> 03:49:02,300
And there we go.

4078
03:49:03,600 --> 03:49:07,500
So that looks pretty good, I think.

4079
03:49:12,500 --> 03:49:13,600
Feels reasonably.

4080
03:49:14,100 --> 03:49:18,200
Feels okay, I would say not too bad.

4081
03:49:19,900 --> 03:49:23,000
So alright, so now we've got that working.

4082
03:49:23,500 --> 03:49:27,200
And so then the last thing that we kind of want to do now is I'd like

4083
03:49:27,200 --> 03:49:29,900
to get it so that we can do our tiles.

4084
03:49:30,400 --> 03:49:33,900
And so what I'd like to do is do something like this.

4085
03:49:34,000 --> 03:49:38,600
So let's go ahead and do a for I Loop where we do tile.

4086
03:49:38,600 --> 03:49:46,900
X tile, X is less than some number of tiles account X tile, X plus

4087
03:49:46,900 --> 03:49:47,400
plus.

4088
03:49:47,800 --> 03:49:49,300
And in here,

4089
03:49:50,000 --> 03:49:53,700
We will do a loop over both tiles.

4090
03:49:55,000 --> 03:49:59,500
And inside each of those, we will do this whole operation.

4091
03:50:00,900 --> 03:50:05,000
Like so and so now what I'm going to do is I'm just going to break the

4092
03:50:05,000 --> 03:50:09,500
screen up into those pieces that we talked about and render each one

4093
03:50:09,700 --> 03:50:10,300
separately.

4094
03:50:11,600 --> 03:50:14,900
So, what I'd like to do is say, okay, we've got a tile count X, and

4095
03:50:14,900 --> 03:50:16,300
we've got a tile count, why?

4096
03:50:17,600 --> 03:50:20,600
And those are, how many tiles we want across and how many tiles do you

4097
03:50:20,600 --> 03:50:21,200
want down?

4098
03:50:25,500 --> 03:50:28,200
so, what I want to do is I want to

4099
03:50:30,000 --> 03:50:33,300
Set that number to something relatively reasonable.

4100
03:50:33,500 --> 03:50:38,400
Like I think we said before you know, six or something was good,

4101
03:50:39,000 --> 03:50:39,900
something like that.

4102
03:50:40,500 --> 03:50:43,300
So maybe something like six by four or something.

4103
03:50:44,100 --> 03:50:44,800
I don't know.

4104
03:50:45,100 --> 03:50:50,800
Tell you divided by 2 is 5 40, by 40 divided by 4, seems maybe about,

4105
03:50:50,800 --> 03:50:51,700
right?

4106
03:50:52,400 --> 03:50:53,200
1925?

4107
03:50:53,200 --> 03:50:56,200
By 2960 divided by 6.

4108
03:50:57,000 --> 03:50:58,800
You know, something like that.

4109
03:51:01,400 --> 03:51:02,500
Just throwing it out there.

4110
03:51:03,200 --> 03:51:06,500
So there'd be 24 tiles that we broken up into.

4111
03:51:06,800 --> 03:51:09,000
Maybe that's a few too many.

4112
03:51:11,600 --> 03:51:16,900
It's hard to say you know, maybe we want more of like a 5 or a 4 by 4

4113
03:51:16,900 --> 03:51:19,700
so would be 16 of them.

4114
03:51:21,100 --> 03:51:22,700
So let's take a look at what that would be.

4115
03:51:23,700 --> 03:51:30,400
That'd be like more like 256 1080 divided by 2, so that's oops.

4116
03:51:31,300 --> 03:51:37,700
540 / 4135 so yeah, I don't know.

4117
03:51:37,700 --> 03:51:39,100
I don't know about that.

4118
03:51:39,400 --> 03:51:41,500
That's really hard to say again that's going to catch them up to tweak

4119
03:51:41,500 --> 03:51:41,600
it.

4120
03:51:41,600 --> 03:51:42,600
But let's go ahead and see.

4121
03:51:42,700 --> 03:51:46,300
So if those are our tile counts that were looping over, then we would

4122
03:51:46,300 --> 03:51:51,100
basically just need to know how big each tile was, you know in each

4123
03:51:51,100 --> 03:51:51,700
case

4124
03:51:55,600 --> 03:51:59,500
And I guess we don't since we're not aligned, we don't really have any

4125
03:51:59,500 --> 03:52:03,200
restrictions on what the tile widths actually are.

4126
03:52:05,800 --> 03:52:09,100
Because it won't actually affect how we blind to them.

4127
03:52:09,100 --> 03:52:13,300
Then we might want them to be aligned to, for anyway, just because

4128
03:52:13,300 --> 03:52:16,400
that way, if you happen to be building, something that covers the

4129
03:52:16,400 --> 03:52:20,200
whole tile, you wouldn't pay the price on both sides.

4130
03:52:20,200 --> 03:52:24,000
But due to do Casey round to 4,

4131
03:52:25,800 --> 03:52:26,400
but,

4132
03:52:28,800 --> 03:52:34,000
Basically, what we want to do here is just figure out how big the tile

4133
03:52:34,000 --> 03:52:39,400
with needs to be, so we can go ahead and do those divides output.

4134
03:52:39,800 --> 03:52:42,900
Height / top count, why?

4135
03:52:43,300 --> 03:52:45,800
And that's how many we need to do there and of course, we need our

4136
03:52:45,800 --> 03:52:50,600
tiles, we need the tiles to actually fill the whole Space so they

4137
03:52:50,600 --> 03:52:53,600
might overflow slightly right now will undercut it.

4138
03:52:55,500 --> 03:52:57,000
And we'll figure out what we want to do about that later.

4139
03:52:57,800 --> 03:53:04,800
Alright, so we do to make sure that allocator allocates enough space.

4140
03:53:07,500 --> 03:53:13,000
So we can round these whatever we'll figure out how we want, do that?

4141
03:53:13,000 --> 03:53:20,400
Exactly so we get our tiles in then all we have to do is say okay our

4142
03:53:20,400 --> 03:53:23,500
clip rect is actually going to be

4143
03:53:31,300 --> 03:53:37,300
The men ax will be the tile x times, the tile width, and the clip, and

4144
03:53:37,300 --> 03:53:43,300
the max X, obviously, we'll just be whatever the Minix is plus the

4145
03:53:43,300 --> 03:53:48,200
tile Whip, and the same will be true for the Y, right here.

4146
03:53:48,200 --> 03:53:49,000
Goes the, why?

4147
03:53:53,000 --> 03:53:53,900
And there we go.

4148
03:53:58,700 --> 03:53:59,800
so, if that

4149
03:54:00,000 --> 03:54:04,100
Is what we're going to do for the cliprect, which is now done.

4150
03:54:05,700 --> 03:54:17,300
Then I can adjust it by those sort of four values here and be done.

4151
03:54:19,600 --> 03:54:23,300
And that will now give me little guys who they should have, like on

4152
03:54:23,300 --> 03:54:29,000
the screen, a little blockade if you will although that does not look

4153
03:54:29,000 --> 03:54:31,000
what I would like, what I would have expected.

4154
03:54:31,300 --> 03:54:33,600
I don't really understand what's going on there with the clip.

4155
03:54:33,600 --> 03:54:34,100
Rect

4156
03:54:35,200 --> 03:54:36,000
Still got a bug.

4157
03:54:36,300 --> 03:54:37,300
I stand up for a second.

4158
03:54:37,300 --> 03:54:38,300
My legs are tired.

4159
03:55:05,500 --> 03:55:08,500
Tired legs, tired legs.

4160
03:55:11,700 --> 03:55:12,300
All right.

4161
03:55:14,800 --> 03:55:20,400
So if we do the tiled render group to Output here, we're passing in

4162
03:55:20,400 --> 03:55:20,900
the clip.

4163
03:55:20,900 --> 03:55:24,800
Rect and we're getting some weird Behavior there.

4164
03:55:24,800 --> 03:55:28,000
So I've got the clip, rect ilex time with -4.

4165
03:55:28,200 --> 03:55:33,500
So those are the things we're supposed to be clipping to and I don't

4166
03:55:33,500 --> 03:55:37,900
quite understand why we're getting that look that we just got.

4167
03:55:37,900 --> 03:55:38,600
So

4168
03:55:43,800 --> 03:55:49,300
Like basically I oh no wait that's totally correct.

4169
03:55:49,600 --> 03:55:53,600
Those are the the ground patches.

4170
03:55:56,400 --> 03:55:59,400
Which are which are getting tile rendered basically.

4171
03:56:00,600 --> 03:56:03,400
Which is kind of funny but that's just how that is.

4172
03:56:05,000 --> 03:56:05,800
So there we go.

4173
03:56:06,400 --> 03:56:09,500
So there's our tiled renders and we can see the tiles because I

4174
03:56:09,500 --> 03:56:10,700
subtracted for from them.

4175
03:56:12,300 --> 03:56:14,800
And so I think we're pretty close to correct their.

4176
03:56:15,000 --> 03:56:18,100
I don't know why we have to go look at why those ground tiles.

4177
03:56:18,100 --> 03:56:22,300
Do that weird disappearing thing but those are kind of a thing that

4178
03:56:22,300 --> 03:56:23,500
are separate our list anyway.

4179
03:56:24,500 --> 03:56:27,000
But if we take a look at what's going on there, I think we're pretty

4180
03:56:27,000 --> 03:56:27,900
much good to go.

4181
03:56:28,800 --> 03:56:32,900
So I think we're I think we can finally end the stream.

4182
03:56:33,400 --> 03:56:36,600
We've done all the stuff I wanted to do for child rendering so that's

4183
03:56:36,600 --> 03:56:40,200
good and we can look at the rest of it starting next week.

4184
03:56:40,600 --> 03:56:41,600
All right, so let's do the Q&A.

4185
03:56:42,200 --> 03:56:43,200
Here at midnight.

4186
03:56:50,000 --> 03:56:51,600
Because I want to go stretch my legs.

4187
03:56:55,200 --> 03:56:58,100
My poor left leg, my gimp leg.

4188
03:57:00,700 --> 03:57:04,100
I wish Medical Science was smart enough to fix my left leg.

4189
03:57:05,900 --> 03:57:06,700
But it's not.

4190
03:57:14,000 --> 03:57:15,000
Your top and right.

4191
03:57:15,000 --> 03:57:19,100
Clip is off by one top and right clip.

4192
03:57:19,100 --> 03:57:20,900
So you're talking about

4193
03:57:32,900 --> 03:57:36,000
All right, well, I got to take a look.

4194
03:57:41,800 --> 03:57:44,500
So, the top and right clip is off by one.

4195
03:57:47,700 --> 03:57:52,900
Which is you're talking about in here, right?

4196
03:57:53,400 --> 03:57:56,100
Is that we're talking about, you're talking about the intersection

4197
03:57:56,100 --> 03:57:56,700
code.

4198
03:58:00,300 --> 03:58:02,700
Not sure what you exactly mean by top and right clip.

4199
03:58:02,700 --> 03:58:04,400
But I'm going to assume that's true.

4200
03:58:06,200 --> 03:58:06,900
So let's see.

4201
03:58:11,000 --> 03:58:12,600
Well, I guess the other problem is here.

4202
03:58:12,600 --> 03:58:14,800
I'm not sure what you mean by off by one.

4203
03:58:16,500 --> 03:58:19,900
Are you trying to say that there's a calculation that should be

4204
03:58:19,900 --> 03:58:22,000
aligned like that.

4205
03:58:24,500 --> 03:58:27,900
That's being too conservative and it's filling one extra or one too,

4206
03:58:27,900 --> 03:58:29,000
few pixels.

4207
03:58:30,300 --> 03:58:33,800
So, it's either it's either not always certain but it's filling one

4208
03:58:33,800 --> 03:58:35,700
too many or one too, few pixels.

4209
03:58:36,800 --> 03:58:41,100
In the in the region to consider or are you saying that something

4210
03:58:41,100 --> 03:58:45,000
based on the clip that should be adjusted is being adjusted wrong?

4211
03:58:45,900 --> 03:58:49,000
I'm not sure which one of those you're saying unfortunately,

4212
03:58:50,900 --> 03:58:52,500
Let's see if I can figure it out.

4213
03:58:55,000 --> 03:59:00,000
So the inverted Infinity erectile, we come through here and this is

4214
03:59:00,000 --> 03:59:02,700
just taking the total size.

4215
03:59:02,700 --> 03:59:06,400
I assume you don't mean anything in here because you said clip which

4216
03:59:06,400 --> 03:59:08,800
is this is not the clip, this is the clip.

4217
03:59:09,800 --> 03:59:12,400
So when it does the intersection we've got The Fill wrecked and we've

4218
03:59:12,400 --> 03:59:17,300
got the clip, rect and we just want to know, whichever one of those is

4219
03:59:17,300 --> 03:59:19,300
going to be greater, right?

4220
03:59:21,700 --> 03:59:23,800
so that

4221
03:59:27,900 --> 03:59:31,400
I don't understand exactly why that wouldn't be this value.

4222
03:59:32,100 --> 03:59:35,000
Can you be more specific about that potentially?

4223
03:59:55,700 --> 03:59:59,200
Mmm, molo epi32 is an S SE for intrinsic.

4224
04:00:00,200 --> 04:00:00,400
Really.

4225
04:00:05,500 --> 04:00:06,500
That's too bad.

4226
04:00:09,000 --> 04:00:09,900
Bolo.

4227
04:00:12,000 --> 04:00:13,100
That's too bad.

4228
04:00:13,900 --> 04:00:15,500
So don't really want to use those.

4229
04:00:17,800 --> 04:00:20,000
Mmm, mole low.

4230
04:00:30,200 --> 04:00:31,800
Epi 32.

4231
04:00:33,500 --> 04:00:34,100
Yep.

4232
04:00:36,900 --> 04:00:40,000
It sure is hmm.

4233
04:00:41,100 --> 04:00:42,100
Hmm.

4234
04:00:48,100 --> 04:00:48,500
Well.

4235
04:00:53,100 --> 04:00:54,200
The good news here.

4236
04:00:56,300 --> 04:00:56,900
Is that really?

4237
04:00:56,900 --> 04:00:59,300
Everything would work fine with a 60-minute?

4238
04:00:59,300 --> 04:01:04,200
Multiply probably if we just clip out.

4239
04:01:09,200 --> 04:01:11,200
the top because the fetch

4240
04:01:16,500 --> 04:01:18,500
the fetch y 4x.

4241
04:01:19,600 --> 04:01:22,400
Is going to be.

4242
04:01:31,400 --> 04:01:34,500
So that texture pitch, right?

4243
04:01:36,000 --> 04:01:39,800
I assume we can we can keep all the texture pitches.

4244
04:01:41,200 --> 04:01:43,000
Less than 64,000.

4245
04:01:43,200 --> 04:01:45,000
Because how big would that be right?

4246
04:01:46,200 --> 04:01:46,900
Think about this.

4247
04:01:46,900 --> 04:01:50,000
So 65536 or five, I should say.

4248
04:01:51,200 --> 04:01:57,100
65536 divided by 4, that's a 16,000 wide texture.

4249
04:01:57,600 --> 04:02:00,000
So that's not going to happen, right?

4250
04:02:01,200 --> 04:02:03,500
So the fetch y 4x.

4251
04:02:05,200 --> 04:02:06,300
That value.

4252
04:02:07,400 --> 04:02:13,800
Is just going to be whatever the the also proportional to it's going

4253
04:02:13,800 --> 04:02:15,700
to be whatever the height of the texture is.

4254
04:02:16,500 --> 04:02:23,800
So I feel like, you know, if the total texture size was always going

4255
04:02:23,800 --> 04:02:24,700
to be,

4256
04:02:25,900 --> 04:02:28,500
Well, now that could still exceed it.

4257
04:02:29,500 --> 04:02:33,500
Yeah, yeah, that's unfortunate.

4258
04:02:35,200 --> 04:02:36,800
That is unfortunate.

4259
04:02:39,100 --> 04:02:44,200
I'm not sure what the best way would be to make that work.

4260
04:02:45,000 --> 04:02:48,000
I mean, I guess you could do a mole low and a mole.

4261
04:02:48,000 --> 04:02:48,700
Hi.

4262
04:02:49,900 --> 04:02:54,100
Like, you could try to recombine the two because, you know, that each

4263
04:02:54,100 --> 04:02:57,200
one of them is going to be 16.

4264
04:02:59,400 --> 04:02:59,800
So, I see.

4265
04:03:00,000 --> 04:03:01,000
You can do it that way.

4266
04:03:01,000 --> 04:03:04,300
But at that point I do wonder if maybe this was just a stupid idea

4267
04:03:04,300 --> 04:03:07,100
because then you're probably introducing too many extra instructions

4268
04:03:07,100 --> 04:03:09,500
and maybe you would just rather have done it in scalar to begin with,

4269
04:03:10,200 --> 04:03:10,700
right?

4270
04:03:14,300 --> 04:03:15,900
And I don't know if that's true or not.

4271
04:03:17,300 --> 04:03:18,100
But you see what I'm saying?

4272
04:03:18,100 --> 04:03:18,400
Right?

4273
04:03:18,400 --> 04:03:20,100
You could, you could do something.

4274
04:03:23,500 --> 04:03:27,400
where you're just like okay yeah we've got, you know,

4275
04:03:29,100 --> 04:03:36,300
We've got a mole, low animal, high of the 16-bit values that are in

4276
04:03:36,300 --> 04:03:40,900
here, and then we try to reconstruct them.

4277
04:03:44,200 --> 04:03:48,800
We try to reconstruct those by ordering them together and shifting up,

4278
04:03:48,800 --> 04:03:52,600
you know, the the other guy.

4279
04:03:56,700 --> 04:03:59,400
SLI epi32.

4280
04:03:59,800 --> 04:04:04,100
We try to shift up the other guy by 16 and or them together like

4281
04:04:04,100 --> 04:04:08,000
recreate a multiply, right?

4282
04:04:09,600 --> 04:04:11,800
So we could do it that way but unfortunately it's a little more

4283
04:04:11,800 --> 04:04:15,200
expensive but I guess that's just what we'd have to do to stay in

4284
04:04:15,200 --> 04:04:15,400
there.

4285
04:04:15,400 --> 04:04:17,000
So, you saw what I did there, right?

4286
04:04:17,000 --> 04:04:20,700
All I was doing there was, I was

4287
04:04:22,000 --> 04:04:26,400
I needed to do a 32-bit multiply but there is no 33 B multiplied in

4288
04:04:26,400 --> 04:04:27,200
SC2.

4289
04:04:27,900 --> 04:04:31,800
So what I did is I just did two 16-bit multiplies and ask for the low

4290
04:04:31,800 --> 04:04:35,200
and the High bits of the result and just combine them together to make

4291
04:04:35,200 --> 04:04:36,300
a 32-bit value.

4292
04:04:37,500 --> 04:04:40,300
That's all I did because I knew that the two values that I was

4293
04:04:40,300 --> 04:04:44,500
multiplying, we're both only 16 bits but when you multiply them

4294
04:04:44,500 --> 04:04:47,200
together, then their greater than 16 bits.

4295
04:04:48,800 --> 04:04:50,500
So yeah.

4296
04:04:58,900 --> 04:05:01,900
We revert yesterday's code changes, where you changed by linear pixel,

4297
04:05:01,900 --> 04:05:04,400
unpacking code from float mode to enter, while it was faster with

4298
04:05:04,400 --> 04:05:05,100
float Mal.

4299
04:05:05,500 --> 04:05:08,100
I don't know, because I'm not sure we're ready to do that yet.

4300
04:05:10,200 --> 04:05:13,100
I think we should probably do that but we might want to switch some

4301
04:05:13,100 --> 04:05:17,700
other part of the loop to be 16 bit when we do that.

4302
04:05:17,700 --> 04:05:19,500
So I'm not sure what we want to do there yet.

4303
04:05:19,500 --> 04:05:21,600
I wanted to try and do the memory stuff first

4304
04:05:25,000 --> 04:05:27,200
How many more marathons fumes will be have?

4305
04:05:27,700 --> 04:05:31,400
They will not be often but sometimes I'm from in the mood and I

4306
04:05:31,400 --> 04:05:35,300
happened to be like I know that like I don't have any plans for the

4307
04:05:35,300 --> 04:05:39,800
day and, you know, I'm not gonna be hanging out with anyone or

4308
04:05:39,800 --> 04:05:40,300
whatever.

4309
04:05:40,800 --> 04:05:41,000
You know.

4310
04:05:41,000 --> 04:05:42,300
I can I can throw one in

4311
04:05:49,100 --> 04:05:51,700
You should give a big thanks to rigorous for sticking around and try

4312
04:05:51,700 --> 04:05:53,900
to give you tips knowing full well that you wouldn't see them in the

4313
04:05:53,900 --> 04:05:54,600
chat.

4314
04:05:55,100 --> 04:05:56,600
Of course I give a big, thanks for rigorous.

4315
04:05:56,600 --> 04:05:58,300
We always give a big thanks to him.

4316
04:06:08,000 --> 04:06:09,500
Would it be better to have tile sizes?

4317
04:06:09,500 --> 04:06:11,600
Always, divisible by 4 horizontally.

4318
04:06:11,900 --> 04:06:13,900
Then there would be no need to deal with alignment and masking.

4319
04:06:13,900 --> 04:06:17,800
Unfortunately, no, that's not true, right?

4320
04:06:18,800 --> 04:06:20,800
So the reason that we have to do the masking,

4321
04:06:22,400 --> 04:06:28,400
Is is actually because we are unaligned when we're writing to the

4322
04:06:28,400 --> 04:06:29,000
tiles.

4323
04:06:30,000 --> 04:06:35,700
So even if the tiles were aligned, we're writing for pixels based on

4324
04:06:35,700 --> 04:06:38,600
the texture itself, right?

4325
04:06:39,400 --> 04:06:45,400
So, you know, I don't, I don't know,

4326
04:06:46,600 --> 04:06:49,100
There is a way for us to.

4327
04:06:50,000 --> 04:06:54,800
I don't, maybe I'm missing something, but I don't know how we can fix

4328
04:06:55,700 --> 04:07:00,600
that part by aligning the tiles, because we're not aligned to the

4329
04:07:00,600 --> 04:07:01,300
tiles ever.

4330
04:07:01,300 --> 04:07:01,800
Anyway.

4331
04:07:02,700 --> 04:07:03,600
Does that make sense?

4332
04:07:04,100 --> 04:07:05,100
Don't that make some sense.

4333
04:07:08,400 --> 04:07:09,900
Clip 12.

4334
04:07:09,900 --> 04:07:11,100
Few pixels.

4335
04:07:11,300 --> 04:07:13,400
Look at the edge of the screen.

4336
04:07:17,200 --> 04:07:23,100
Look at the edge of the screen you're talking about out here.

4337
04:07:24,200 --> 04:07:25,900
I'm not sure.

4338
04:07:28,100 --> 04:07:31,100
now, keep in mind, we've got like,

4339
04:07:34,100 --> 04:07:37,400
Well, okay, I'm not sure exactly what you're talking about.

4340
04:07:39,400 --> 04:07:46,100
So we'll start with that but we also have some some annoying things

4341
04:07:46,100 --> 04:07:48,600
here that I just want to point out.

4342
04:07:49,100 --> 04:07:53,400
So I'll we're not really at the point where we've gotten down to like

4343
04:07:53,400 --> 04:07:54,800
looking at some of the robustness things.

4344
04:07:54,800 --> 04:08:02,000
So you know, there's I realize that there's some weirdness here but

4345
04:08:02,000 --> 04:08:03,500
push wrecked outline.

4346
04:08:07,000 --> 04:08:11,100
So there's a bunch of things that get outlined right now and in fact,

4347
04:08:11,400 --> 04:08:16,200
maybe if I turn that off for a second it'll be clearer just so we make

4348
04:08:16,200 --> 04:08:17,900
sure we're all talking about the same thing.

4349
04:08:18,600 --> 04:08:22,500
So if I turn off push wrecked outline which is

4350
04:08:28,200 --> 04:08:28,700
Here.

4351
04:08:32,300 --> 04:08:34,200
so, if we turn off push rekt outline,

4352
04:08:37,200 --> 04:08:38,900
Now, we can take a better.

4353
04:08:38,900 --> 04:08:40,100
Look at what's going on.

4354
04:08:41,700 --> 04:08:46,500
Do you still think there is an off by one error looking at what we're

4355
04:08:46,500 --> 04:08:47,500
looking at now?

4356
04:08:49,700 --> 04:08:52,000
And you know, maybe you do, maybe you don't, but I just want to make

4357
04:08:52,000 --> 04:08:59,500
sure we're all thinking about the same thing before before we go

4358
04:08:59,500 --> 04:08:59,800
looking for.

4359
04:09:00,000 --> 04:09:01,800
App that makes sense.

4360
04:09:22,200 --> 04:09:24,600
Just pretty sure I saw glitchy just up and pick the stuff near the

4361
04:09:24,600 --> 04:09:26,200
edges but it might have been doing its okay.

4362
04:09:26,200 --> 04:09:31,200
Well let's see, I'm because I'm just wondering like we were drawing a

4363
04:09:31,200 --> 04:09:35,000
rectangle outline there which is just was for a separate thing, which

4364
04:09:35,000 --> 04:09:38,900
is the same region and the Sim this is just like too many things that

4365
04:09:38,900 --> 04:09:40,700
kind of get piled on as we're sort of doing this.

4366
04:09:40,700 --> 04:09:44,400
Because you know, one hour a night, I got to cut some slack sometimes.

4367
04:09:44,400 --> 04:09:48,000
And I don't always go back and like, pull out code and put it in a way

4368
04:09:48,000 --> 04:09:49,500
that I can turn on and off and stuff like that.

4369
04:09:49,500 --> 04:09:51,800
So there's always like, debug code kind of cruft.

4370
04:09:52,000 --> 04:09:52,600
Things.

4371
04:09:53,100 --> 04:09:56,600
And so what you may have been looking at is the fact that there was a

4372
04:09:56,600 --> 04:09:59,900
rectangle outline outline, just the edge of the screen that if we

4373
04:09:59,900 --> 04:10:04,300
don't pull the camera back to show our Region's in the debug camera

4374
04:10:04,300 --> 04:10:04,800
mode.

4375
04:10:05,400 --> 04:10:09,400
It draws like right at the edge, but the draw rectangle code is not

4376
04:10:09,400 --> 04:10:10,800
sub-pixel accurate yet, right?

4377
04:10:10,800 --> 04:10:12,200
We still are using the way old.

4378
04:10:12,200 --> 04:10:15,600
When we wrote at the very beginning of the stream that just, you know,

4379
04:10:16,100 --> 04:10:17,200
fully just rounds.

4380
04:10:17,600 --> 04:10:20,700
And so you may have seen it kind of coming in and out over here.

4381
04:10:20,900 --> 04:10:21,800
I'm guessing that might have been

4382
04:10:21,900 --> 04:10:22,400
Ben it.

4383
04:10:24,900 --> 04:10:25,700
But I could be wrong.

4384
04:10:27,000 --> 04:10:31,400
But yeah, so I don't know if, you know, we can do it, we can can look

4385
04:10:31,400 --> 04:10:33,800
at this as well, right?

4386
04:10:38,900 --> 04:10:42,900
And like I said, you know, it may there may very well be a problem.

4387
04:10:42,900 --> 04:10:49,400
Still that's totally on the table, but I just wanted to make sure that

4388
04:10:49,400 --> 04:10:53,500
we're all looking at it fairly because other people may not have

4389
04:10:53,500 --> 04:10:58,500
remembered well and Fabien probably never saw that stream.

4390
04:10:58,500 --> 04:11:01,100
So he doesn't even know that we were drawing that, you know?

4391
04:11:07,500 --> 04:11:08,000
So yeah.

4392
04:11:11,100 --> 04:11:16,100
Tile size mod for not masking for textures, but clip best variable.

4393
04:11:22,700 --> 04:11:25,600
Yes, I'm sorry Martin's.

4394
04:11:25,600 --> 04:11:28,900
I I'm just not sure exactly what you're talking about there.

4395
04:11:29,500 --> 04:11:30,400
So

4396
04:11:32,100 --> 04:11:35,500
The thing that I don't understand about the suggestion.

4397
04:11:37,100 --> 04:11:40,400
But I am trying these guys back on the thing that I don't really

4398
04:11:40,400 --> 04:11:43,800
understand about the suggestion that you're saying, is that the clip

4399
04:11:43,800 --> 04:11:48,700
mask variable has nothing to do with the tile size, right?

4400
04:11:50,300 --> 04:11:52,000
I've started with the tile alignment.

4401
04:11:52,000 --> 04:11:56,600
It has to do with where the fill wrecked is relative to the tile

4402
04:11:56,900 --> 04:11:59,600
because we write unaligned

4403
04:12:00,000 --> 04:12:09,300
we are our fill routine aligns with the texture not with the tile and

4404
04:12:09,300 --> 04:12:13,000
so no matter what the alignment of the tile is

4405
04:12:16,200 --> 04:12:20,300
it's still going to have to clip either the front or the back because

4406
04:12:20,300 --> 04:12:24,600
the texture, The Fill region is a certain with, right?

4407
04:12:25,700 --> 04:12:28,600
And that fill with is not aligned to for

4408
04:12:30,800 --> 04:12:35,800
So, no matter what we do, we have to do that that backing up, right?

4409
04:12:38,900 --> 04:12:40,700
Either on the front or the back.

4410
04:12:42,500 --> 04:12:46,800
So I just don't, I just don't understand how a lying, the tile would

4411
04:12:46,800 --> 04:12:50,000
ever get you out of the business of still having to not draw those

4412
04:12:50,000 --> 04:12:50,400
pixels.

4413
04:12:50,400 --> 04:12:53,700
Because it doesn't have anything to do with what the alignment of the

4414
04:12:53,700 --> 04:13:00,000
tile is its, the alignment of the texture of the fill region, that's

4415
04:13:00,400 --> 04:13:01,500
what's causing the clip.

4416
04:13:02,800 --> 04:13:03,600
Does that make sense?

4417
04:13:12,600 --> 04:13:15,800
And Martin's, yes, I understand why you're not thinking clearly so

4418
04:13:15,800 --> 04:13:17,500
late because I am not thinking clearly.

4419
04:13:17,500 --> 04:13:19,400
So late either, it's time for bed.

4420
04:13:19,800 --> 04:13:20,500
Certainly

4421
04:13:31,700 --> 04:13:32,000
Yes.

4422
04:13:32,000 --> 04:13:35,200
It's pretty much one hour a day, but I think we've had a two-hour one

4423
04:13:35,200 --> 04:13:37,200
before to to our ones before.

4424
04:13:37,200 --> 04:13:39,800
And today we did the basically up a giant for our one.

4425
04:13:39,800 --> 04:13:40,600
It was crazy.

4426
04:13:41,100 --> 04:13:42,900
Like I said, I hadn't had enough program and get to.

4427
04:13:43,000 --> 04:13:45,300
I had to do a bunch of Toppers I conference on Friday.

4428
04:13:46,300 --> 04:13:47,000
So

4429
04:13:48,700 --> 04:13:49,200
Yeah.

4430
04:13:51,400 --> 04:13:52,900
And you can see it's 12:27.

4431
04:13:52,900 --> 04:13:54,900
Am here time for me to go to bed.

4432
04:14:01,600 --> 04:14:03,300
All right, folks.

4433
04:14:05,800 --> 04:14:10,600
Good work today though, we got a bunch of stuff resolved, so that's

4434
04:14:10,600 --> 04:14:11,500
pretty good.

4435
04:14:11,700 --> 04:14:15,900
And now that we've got tiled stuff in, we can go ahead and do

4436
04:14:15,900 --> 04:14:17,000
multi-threading next.

4437
04:14:17,000 --> 04:14:20,700
Week in that'll be pretty fun, I think.

4438
04:14:22,000 --> 04:14:24,500
And then we can start working on render or correct this and stuff.

4439
04:14:25,000 --> 04:14:26,200
Get the lighting going.

4440
04:14:27,400 --> 04:14:31,800
Get get our our whatever our fill rule is ironed out.

4441
04:14:35,800 --> 04:14:36,400
Yeah.

4442
04:14:37,600 --> 04:14:38,600
This is going to be good.

4443
04:14:39,100 --> 04:14:43,600
The render is the biggest part of the engine, really, in terms of

4444
04:14:43,600 --> 04:14:45,300
stuff, that's kind of fiddly and stuff.

4445
04:14:45,300 --> 04:14:47,400
We have to work through in the way that we're working through with,

4446
04:14:47,400 --> 04:14:54,100
like, observations, all that stuff that are really sensitive, because

4447
04:14:54,100 --> 04:14:56,400
there's just so many pixels that you deal with.

4448
04:14:57,100 --> 04:14:59,500
So, you know, I think we've done it pretty well, you know, I think

4449
04:14:59,500 --> 04:14:59,900
we've

4450
04:15:00,000 --> 04:15:06,300
Pretty well, you know, obviously, you know, not everything goes

4451
04:15:06,300 --> 04:15:08,500
perfectly but it's, it's gone pretty well.

4452
04:15:08,500 --> 04:15:11,700
You know, I'm pretty happy with that even chunky and have you checked

4453
04:15:11,700 --> 04:15:13,800
up and do an hour a night, you know, we were able to make pretty good

4454
04:15:13,800 --> 04:15:14,300
progress.

4455
04:15:14,300 --> 04:15:16,200
We've got a renderer now, that's pretty good.

4456
04:15:16,300 --> 04:15:19,900
I mean, you know, it's not going to win any words for world's best

4457
04:15:19,900 --> 04:15:23,500
render or anything, but, you know, it's totally at, you know, working

4458
04:15:23,500 --> 04:15:27,500
at speed and, you know, we'll be able to get it multi-threaded soon

4459
04:15:27,500 --> 04:15:29,100
and that's, I don't know.

4460
04:15:29,100 --> 04:15:29,900
I'm pretty happy with that.

4461
04:15:30,000 --> 04:15:32,100
That support scaling and rotation already.

4462
04:15:32,800 --> 04:15:33,900
So we'll have to take a little bit.

4463
04:15:33,900 --> 04:15:36,400
Look at what we can do with the lighting stuff which is, which is

4464
04:15:36,900 --> 04:15:39,900
obviously worse and much slower.

4465
04:15:39,900 --> 04:15:43,800
So I don't know how much of that lighting stuff will be able to do in

4466
04:15:43,800 --> 04:15:48,300
the software path necessarily but we'll think about it a little later

4467
04:15:48,300 --> 04:15:49,700
on after we have the whole thing working.

4468
04:15:49,700 --> 04:15:55,100
Well without the lighting will go ahead and get all that good and then

4469
04:15:55,100 --> 04:15:58,600
we'll switch on the lighting stuff and see what we can do there, and

4470
04:15:58,600 --> 04:15:59,800
that might take a little while to

4471
04:16:00,700 --> 04:16:01,400
It's good stuff.

4472
04:16:02,300 --> 04:16:05,000
All right, so thanks everyone for joining me for another episode of

4473
04:16:05,000 --> 04:16:05,900
handmade hero.

4474
04:16:06,800 --> 04:16:10,800
It has been a pleasure coding with you, as always, and it has been a

4475
04:16:10,800 --> 04:16:12,100
marathon session today.

4476
04:16:12,100 --> 04:16:15,400
Our first real Marathon session, we've never gone anything like four

4477
04:16:15,400 --> 04:16:18,700
hours before, so, that was kind of fun, just, you know, it's good to

4478
04:16:18,700 --> 04:16:20,700
work on the code sometimes for a little bit longer.

4479
04:16:22,100 --> 04:16:23,900
And I never got a chance to do that before.

4480
04:16:24,800 --> 04:16:27,900
As always, if you would like to follow along the source code at home,

4481
04:16:28,200 --> 04:16:29,600
the game comes the source code.

4482
04:16:29,600 --> 04:16:31,900
So if you preorder it at any time, you get all the source code to

4483
04:16:31,900 --> 04:16:35,300
every day that we've ever done and you can always download it every

4484
04:16:35,300 --> 04:16:35,900
night if you want.

4485
04:16:35,900 --> 04:16:39,700
The latest, it's always up there so you can do that on handmade here

4486
04:16:39,700 --> 04:16:41,700
at whore or using the pre order.

4487
04:16:41,700 --> 04:16:46,400
Now button if you would like, you can also support our patreon page

4488
04:16:46,800 --> 04:16:48,200
which is basically just supports the video.

4489
04:16:48,200 --> 04:16:49,600
Which of course we do is a free thing.

4490
04:16:50,900 --> 04:16:55,000
But if you want to support it, we love that you do and we also have a

4491
04:16:55,000 --> 04:16:55,600
forum site.

4492
04:16:55,600 --> 04:16:58,600
You can go to ask questions, get poorest a Mac and Linux or any other

4493
04:16:58,600 --> 04:16:59,700
stuff like that.

4494
04:17:00,000 --> 04:17:01,400
We've got a tweet bot.

4495
04:17:01,400 --> 04:17:06,500
That treats the schedule at you and we have, we have a little, we're

4496
04:17:06,500 --> 04:17:07,400
working on this.

4497
04:17:07,600 --> 04:17:13,900
It's a, it's not really there yet, but there's some JavaScript that

4498
04:17:13,900 --> 04:17:18,000
someone sent in that I put in that sort of work sometimes to set this

4499
04:17:18,000 --> 04:17:18,600
properly.

4500
04:17:19,700 --> 04:17:20,100
And

4501
04:17:20,200 --> 04:17:24,300
Hopefully when I get a chance I will go clean up the JavaScript so

4502
04:17:24,300 --> 04:17:26,300
that it always gets the right thing.

4503
04:17:26,300 --> 04:17:27,700
So hopefully eventually this live button.

4504
04:17:27,700 --> 04:17:31,500
Will also tell you how long it is to the next livestream to so that's

4505
04:17:31,500 --> 04:17:35,600
coming but it's going to be a while till I have a chance to look at it

4506
04:17:35,600 --> 04:17:36,100
myself.

4507
04:17:36,700 --> 04:17:38,500
So anyway, thanks everyone for joining me.

4508
04:17:39,300 --> 04:17:41,900
Next dream will be Monday back to the regular schedule.

4509
04:17:41,900 --> 04:17:42,800
You will not be a marathon.

4510
04:17:42,800 --> 04:17:47,100
Just a regular one hour stream and I hope to see you all there until

4511
04:17:47,100 --> 04:17:49,300
then have a fabulous rest of your weekend.

4512
04:17:50,000 --> 04:17:51,900
And have fun programming.

