1
00:00:00,500 --> 00:00:01,100
There we go.

2
00:00:01,800 --> 00:00:04,300
Hello, everyone and welcome to handmade hero.

3
00:00:04,300 --> 00:00:08,400
The show where we code a complete game live on Twitch, on the air with

4
00:00:08,400 --> 00:00:11,900
no engine and no libraries.

5
00:00:12,300 --> 00:00:20,200
So really, you know, you could say that this is, is the whole package.

6
00:00:20,200 --> 00:00:21,700
This is the complete game.

7
00:00:21,700 --> 00:00:26,000
This is every last little drop of gaming goodness.

8
00:00:26,000 --> 00:00:27,800
Nothing hidden, you know?

9
00:00:27,800 --> 00:00:28,200
Nothing.

10
00:00:28,200 --> 00:00:29,500
Squirreled away.

11
00:00:30,400 --> 00:00:31,600
You know, behind the curtain.

12
00:00:32,400 --> 00:00:37,400
It's all here in the raw and what we did yesterday due to the fact

13
00:00:37,400 --> 00:00:41,300
that there was a regrettable incident on the train is we decided to do

14
00:00:41,300 --> 00:00:44,500
something lighter, and fluffier than we had planned on doing.

15
00:00:44,600 --> 00:00:47,600
So we decided to do some work on ground rendering and play around with

16
00:00:47,600 --> 00:00:48,400
that a little bit.

17
00:00:49,300 --> 00:00:53,600
And so, what I would like to do today is just maybe finish up a little

18
00:00:53,600 --> 00:00:55,500
bit that ground rendering because we were kind of having fun with it

19
00:00:55,500 --> 00:01:00,200
yesterday and so we'll just finish that up, maybe today and

20
00:01:00,300 --> 00:01:04,599
Do a little bit, maybe a clean up tomorrow, and then next week, we'll

21
00:01:04,599 --> 00:01:07,500
start back on closer, inspection stuff that we wanted to clean up,

22
00:01:07,500 --> 00:01:07,700
really?

23
00:01:07,700 --> 00:01:10,300
It's clear detection logic that we were sort of working on where the

24
00:01:10,300 --> 00:01:11,500
ground was that sort of stuff.

25
00:01:12,200 --> 00:01:17,400
So, let's go ahead and and do that before I open up the code, I just

26
00:01:17,400 --> 00:01:20,100
remind everyone that if you are trying to follow along at home and you

27
00:01:20,100 --> 00:01:23,400
pre-ordered the game on handmade hero dot-org, you should have gotten

28
00:01:23,400 --> 00:01:26,900
a link in your email, that link has a zip file in, which you will find

29
00:01:27,000 --> 00:01:28,500
all the days Source codes.

30
00:01:29,200 --> 00:01:30,200
And if you look

31
00:01:30,300 --> 00:01:34,700
Today is day 82, so you can unzip date, 81 source code.

32
00:01:34,700 --> 00:01:38,600
If you want to play around with the same stuff that I am playing

33
00:01:38,600 --> 00:01:41,700
around with today, you'll be at the exact same point that I am.

34
00:01:42,300 --> 00:01:48,200
So let's take a look at where things were so if we go ahead and run

35
00:01:48,200 --> 00:01:49,500
this year, I think we're we stop.

36
00:01:49,500 --> 00:01:51,800
Yeah, we just kind of made a little thing that would Splat out the

37
00:01:51,800 --> 00:01:52,100
ground.

38
00:01:52,100 --> 00:01:54,300
There you can kind of see where it is.

39
00:01:54,700 --> 00:01:56,400
We're still drawing some things in there.

40
00:01:56,400 --> 00:01:59,600
Like our room boundaries I suppose we should probably turn that off.

41
00:01:59,700 --> 00:02:00,200
But the other

42
00:02:00,300 --> 00:02:04,100
Thing that I pointed out was because we didn't have any optimizations

43
00:02:04,100 --> 00:02:08,199
on our bitmap letting you know, it gets very slow to put that

44
00:02:08,199 --> 00:02:09,199
background in there, right?

45
00:02:09,199 --> 00:02:12,300
So that's something else that we can kind of think about a little bit.

46
00:02:12,300 --> 00:02:14,000
So you know what?

47
00:02:14,000 --> 00:02:16,900
I'm going to go ahead and just turn off that those debug boundaries

48
00:02:16,900 --> 00:02:21,300
since we don't care about those at the moment, I'll go ahead and I'll

49
00:02:21,300 --> 00:02:22,300
go ahead and toggle those off.

50
00:02:22,500 --> 00:02:23,700
Let's see here.

51
00:02:23,900 --> 00:02:27,300
So, we've got draw a rectangle calls where we're drawing.

52
00:02:27,300 --> 00:02:30,100
Those see here, actually, I think,

53
00:02:30,300 --> 00:02:33,200
It's pushed rectangle calls where we were sort of putting those

54
00:02:33,200 --> 00:02:37,000
boundaries in there so we had our push outline.

55
00:02:37,000 --> 00:02:41,100
So this this right here we really don't want to do that at the moment

56
00:02:41,400 --> 00:02:43,200
because I don't really want to see those blue lines.

57
00:02:43,200 --> 00:02:45,000
Those are just there for our debug purposes.

58
00:02:45,000 --> 00:02:48,400
So I'm gonna get rid of them and so we can just look at the stuff that

59
00:02:48,400 --> 00:02:49,400
wasn't the blue lines.

60
00:02:50,000 --> 00:02:53,700
So I guess what I wanted to kind of do here is I wanted to kind of

61
00:02:53,700 --> 00:02:59,900
take a look at first of all I sort of suggested when someone in the

62
00:03:00,000 --> 00:03:02,800
You had said, you know, well what would we do when we want to start

63
00:03:02,800 --> 00:03:03,700
speeding this up?

64
00:03:05,400 --> 00:03:08,800
I was saying, well, I'd probably do something where we would have some

65
00:03:08,800 --> 00:03:12,600
kind of backing tiles, where we would draw the background once, and

66
00:03:12,600 --> 00:03:14,800
then just pull it out of that.

67
00:03:14,900 --> 00:03:18,000
So that the constant sort of splatting of things that we use to make

68
00:03:18,000 --> 00:03:22,700
these patterns wouldn't be causing a huge problem in terms of

69
00:03:22,700 --> 00:03:25,800
performance every frame, we just do that compositing on the Fly and

70
00:03:25,800 --> 00:03:27,300
little like, sort of sections.

71
00:03:28,400 --> 00:03:30,400
And so, that's something that we could consider playing route.

72
00:03:30,400 --> 00:03:32,700
That sounded kind of sounds like a fun thing to do.

73
00:03:32,800 --> 00:03:35,000
The other thing that it would be that we

74
00:03:35,300 --> 00:03:39,000
Of need to figure out how to do is, well, if we want to have multiple

75
00:03:39,000 --> 00:03:42,500
layers of things like, which is kind of where we started down this.

76
00:03:42,600 --> 00:03:43,700
Why we started down this path?

77
00:03:43,700 --> 00:03:44,900
If we want to have multiple layers.

78
00:03:44,900 --> 00:03:47,900
So that there's, you know, an upper floor in a lower floor, like, we

79
00:03:47,900 --> 00:03:50,500
were kind of doing here because remember, we still have this sort of

80
00:03:50,500 --> 00:03:53,200
notion of two floors worth of content.

81
00:03:53,200 --> 00:03:55,600
There's you can go up our sort of virtual stairwell here that we have

82
00:03:55,600 --> 00:03:56,800
no graphics for yet.

83
00:03:58,400 --> 00:04:01,300
If we wanted to make those two different floors and start to think

84
00:04:01,300 --> 00:04:05,100
about like, where these things go, we need some concept of

85
00:04:05,200 --> 00:04:05,600
That right?

86
00:04:05,600 --> 00:04:07,700
We need some way to make that work.

87
00:04:07,900 --> 00:04:11,700
So that's sort of one thing that we should probably think about.

88
00:04:11,700 --> 00:04:14,400
And like I said, I'm not 100% sure what it is that we really want to

89
00:04:14,400 --> 00:04:14,600
do.

90
00:04:14,600 --> 00:04:18,000
So that's on the table what I'm going to start with because it's the

91
00:04:18,000 --> 00:04:21,399
easiest thing is when we start with is just cleaning up the random

92
00:04:21,399 --> 00:04:23,400
number situation, a little bit, right?

93
00:04:23,400 --> 00:04:25,700
So I'm going to clean up that random number generator situation.

94
00:04:25,700 --> 00:04:29,600
Just that just a tad because I kind of said we should probably do that

95
00:04:30,000 --> 00:04:31,300
at the end of the stream before.

96
00:04:31,300 --> 00:04:35,000
And, you know, we left it sort of in a bit of

97
00:04:35,200 --> 00:04:36,600
Of of a nasty State.

98
00:04:36,600 --> 00:04:36,900
You can see.

99
00:04:36,900 --> 00:04:38,100
I got this to do right here.

100
00:04:38,400 --> 00:04:39,700
Make random number generation more.

101
00:04:39,700 --> 00:04:40,200
Systematic.

102
00:04:40,200 --> 00:04:42,400
So I think I'm going to take a second just to do that.

103
00:04:42,400 --> 00:04:45,300
And again, this will also set us up for later on when we want to

104
00:04:45,300 --> 00:04:48,400
actually talk about random number generation where we replace this

105
00:04:48,400 --> 00:04:51,900
random number table with an actual random number generator, which

106
00:04:51,900 --> 00:04:52,400
would be good.

107
00:04:52,400 --> 00:04:55,000
So you can see, there's really no code right now, in the random number

108
00:04:55,000 --> 00:04:57,300
generator, it was just a table and we were just sampling directly out

109
00:04:57,300 --> 00:04:57,800
of the table.

110
00:04:57,800 --> 00:05:00,900
So what I'd like to do is I like to pull out this code, that we've

111
00:05:00,900 --> 00:05:04,700
been using many times and I'd like to turn it into something that I

112
00:05:04,700 --> 00:05:05,100
can just

113
00:05:05,200 --> 00:05:06,500
use any time I want.

114
00:05:08,600 --> 00:05:10,700
Again, straight up compression oriented programming here.

115
00:05:10,700 --> 00:05:15,500
Just trying to condense down some of these things that you've seen

116
00:05:15,500 --> 00:05:16,100
happening.

117
00:05:16,200 --> 00:05:17,300
A bunch of different times.

118
00:05:17,300 --> 00:05:20,900
So I'd like to do is introduce the concept that people can have a

119
00:05:20,900 --> 00:05:26,500
stream of random numbers that they can access and make some of these

120
00:05:26,500 --> 00:05:29,200
ways in which we're using them like the, you know, down here we were

121
00:05:29,200 --> 00:05:31,700
trying to get a number between zero and one for example, and then we

122
00:05:31,700 --> 00:05:34,100
were turning it into a number between negative two and one and all

123
00:05:34,100 --> 00:05:34,700
that sort of stuff.

124
00:05:35,100 --> 00:05:36,900
I'd like to sort of make that

125
00:05:37,100 --> 00:05:41,000
Stuff more systemic so that when people want to use and by people I

126
00:05:41,000 --> 00:05:41,500
mean me.

127
00:05:41,500 --> 00:05:44,800
But you know, when we want to go use the random number generator to

128
00:05:44,800 --> 00:05:50,400
generate Randomness for us, we will be able to easily get the types of

129
00:05:50,400 --> 00:05:50,800
Randomness.

130
00:05:50,800 --> 00:05:53,600
We want out of it without having to Think Through the math every time,

131
00:05:53,800 --> 00:05:54,200
right?

132
00:05:55,500 --> 00:05:59,800
so, what I'd like to point out

133
00:06:00,200 --> 00:06:07,600
First of all, is that we don't typically know upfront, very much about

134
00:06:07,600 --> 00:06:10,300
how the people want to use these random numbers, right?

135
00:06:10,700 --> 00:06:14,800
Sometimes when you want to use random numbers, you would like to them

136
00:06:14,800 --> 00:06:17,600
to be sort of effectively random, right?

137
00:06:17,600 --> 00:06:20,300
So when you're asking for a random number in the code sometimes you

138
00:06:20,300 --> 00:06:23,300
want it to be really completely random or at least as close to as

139
00:06:23,300 --> 00:06:25,500
possible or in distinguish from random etcetera, Etc.

140
00:06:26,500 --> 00:06:29,900
But other times what you want is,

141
00:06:30,000 --> 00:06:34,900
Is a series that has the properties of Randomness but that actually is

142
00:06:34,900 --> 00:06:37,100
completely predictable, right?

143
00:06:38,100 --> 00:06:41,300
And the reason I say this is because if you think about how we might

144
00:06:41,300 --> 00:06:48,200
want to do things, let's suppose that we generate a whole world right

145
00:06:48,800 --> 00:06:49,900
out of Randomness.

146
00:06:49,900 --> 00:06:52,400
So we're going to try to rent a random world for the player to play

147
00:06:52,400 --> 00:06:58,900
through, but we would like to the player to be able to send some small

148
00:06:58,900 --> 00:06:59,900
piece of information.

149
00:07:00,300 --> 00:07:05,000
To his friend that that friend could enter into the game on their

150
00:07:05,000 --> 00:07:07,800
computer to play through that same random world.

151
00:07:07,800 --> 00:07:08,500
Right.

152
00:07:08,700 --> 00:07:11,200
And now the random will be generated might have been hundreds of

153
00:07:11,200 --> 00:07:12,600
megabytes worth of stuff.

154
00:07:13,500 --> 00:07:17,000
But we know that it all came from this one, you know, stream of random

155
00:07:17,000 --> 00:07:17,500
numbers.

156
00:07:17,800 --> 00:07:22,000
So, we would want to be able to send just one little piece of

157
00:07:22,000 --> 00:07:25,400
information that's like, how do you reconstruct that stream of random

158
00:07:25,400 --> 00:07:28,900
numbers so that you don't have to send that whole thing across, right?

159
00:07:30,000 --> 00:07:32,800
And that is typically What's called the seed, right?

160
00:07:32,900 --> 00:07:35,900
It's called the the seed because you start the random number

161
00:07:35,900 --> 00:07:41,400
generation with it and basically what it is when we get up to real

162
00:07:41,400 --> 00:07:45,200
random number generation, that's the number that you start out with to

163
00:07:45,200 --> 00:07:48,000
start running through the permutations of the random number generator,

164
00:07:48,000 --> 00:07:50,600
does to produce a series of random numbers.

165
00:07:50,600 --> 00:07:53,000
And of course it's always pseudo-random, really because they're not

166
00:07:53,000 --> 00:07:55,100
random if they're reproducible like that.

167
00:07:56,300 --> 00:07:59,200
And so you could think about that in terms of our random number.

168
00:07:59,500 --> 00:08:01,200
Abel pretty easily.

169
00:08:01,200 --> 00:08:06,500
Actually, because really, for in our case, what the seed is, is just

170
00:08:06,700 --> 00:08:08,800
what number in the table you started on.

171
00:08:09,300 --> 00:08:12,900
So, for example, if we wanted to pick a random series here, we would

172
00:08:12,900 --> 00:08:15,800
just say, oh, start on number, 35, or whatever.

173
00:08:15,900 --> 00:08:19,300
And just keep reading, you know, sequentially right through there.

174
00:08:20,600 --> 00:08:24,300
That would be our seed because that's the only real control we have

175
00:08:24,300 --> 00:08:25,800
over where we get in a sequence.

176
00:08:25,800 --> 00:08:27,700
Now, we could have a little more information.

177
00:08:27,700 --> 00:08:32,200
We could say, for example, what index, we're going to start on and how

178
00:08:32,200 --> 00:08:35,400
many numbers to skip each time or something like that, right.

179
00:08:35,400 --> 00:08:38,400
So go by twos, or go by fours, right?

180
00:08:38,400 --> 00:08:39,200
Something like that.

181
00:08:40,000 --> 00:08:42,900
So you can imagine different ways that we could construct our own

182
00:08:42,900 --> 00:08:45,400
notion of a seed for our random number table.

183
00:08:45,900 --> 00:08:48,700
But for the time being, we don't really have to care too much about

184
00:08:48,700 --> 00:08:50,200
that because we're not doing those sorts of things.

185
00:08:50,400 --> 00:08:53,000
I wanted to bring it up so you'd understand the concept of it because

186
00:08:53,000 --> 00:08:54,800
it is something that will come into play later.

187
00:08:55,000 --> 00:08:57,200
What we want to do, fancier things to the random number generator,

188
00:08:58,200 --> 00:08:59,800
And what that motivates for our design.

189
00:09:00,000 --> 00:09:05,400
Is that I want to have a way because looking at, you know, this is

190
00:09:05,400 --> 00:09:07,700
just my experience as a programmer speaking.

191
00:09:07,700 --> 00:09:10,500
We haven't seen this become necessary in the code right now.

192
00:09:10,500 --> 00:09:13,200
It's just my experience saying, hey look we want to do this trust,

193
00:09:13,200 --> 00:09:14,200
he'll save us time.

194
00:09:14,200 --> 00:09:17,600
Later my experience says that generally what you want to do with

195
00:09:17,600 --> 00:09:18,300
random numbers?

196
00:09:18,300 --> 00:09:21,600
Is you never want people to just grab random numbers.

197
00:09:22,000 --> 00:09:26,500
You want them to basically have some handle that they use to get

198
00:09:26,500 --> 00:09:29,800
random numbers so that that handle can track.

199
00:09:30,000 --> 00:09:33,400
Back up a particular stream so that you can have multiple streams of

200
00:09:33,400 --> 00:09:35,600
coherent random numbers in your program.

201
00:09:35,900 --> 00:09:39,200
Some of which might be actually see things that are supposed to appear

202
00:09:39,200 --> 00:09:42,600
random on that playthrough like particle effects and whatever and

203
00:09:42,600 --> 00:09:45,500
others might need to be controlled Randomness.

204
00:09:46,000 --> 00:09:49,400
That that's, you know, producing a repeatable series on multiple

205
00:09:49,400 --> 00:09:52,500
people's machines at the same time so that you can do things like,

206
00:09:52,500 --> 00:09:54,900
send those seeds across and that sort of thing.

207
00:09:55,300 --> 00:09:57,600
And that's something that you probably would have seen in.

208
00:09:57,600 --> 00:09:59,900
Like I think even the new Binding of Isaac rebirth.

209
00:10:00,000 --> 00:10:00,400
Earth.

210
00:10:00,400 --> 00:10:02,400
I don't actually know for sure, but I think in the new Binding of

211
00:10:02,400 --> 00:10:05,300
Isaac rebirth, they do things where you can basically like, enter a

212
00:10:05,300 --> 00:10:07,300
seed or something to start playing, right?

213
00:10:07,300 --> 00:10:11,500
I think that so I think this kind of thing has been sort of exposed to

214
00:10:11,500 --> 00:10:12,400
users in the past.

215
00:10:12,400 --> 00:10:16,200
It's not, you know, it's not an unusual thing right to think about,

216
00:10:18,800 --> 00:10:24,100
So what that means is, I want to transform this code, to start

217
00:10:24,100 --> 00:10:26,800
thinking in terms of some kind of a handle, right?

218
00:10:27,100 --> 00:10:31,200
That's like a random series, you know, it's some series of Randomness

219
00:10:32,300 --> 00:10:35,500
and for our purposes all it's really going to be you can see it here.

220
00:10:35,500 --> 00:10:36,700
We've got this random number index.

221
00:10:36,900 --> 00:10:38,800
All it's going to be is that Index, right?

222
00:10:38,800 --> 00:10:42,000
It's just going to be that indexed that we need to pull stuff out.

223
00:10:42,100 --> 00:10:45,400
But later, it might, you know, you're not mean that so much, right?

224
00:10:45,400 --> 00:10:46,900
So when we draw test ground, what we'll

225
00:10:47,000 --> 00:10:49,600
Do is, we'll just initialize our random Series.

226
00:10:49,600 --> 00:10:53,500
So, we'll do series equals and we'll just say like, oh, will seed it

227
00:10:53,500 --> 00:10:57,200
with zero because that's what we seeded it with before, or we could

228
00:10:57,200 --> 00:10:59,000
see it with whatever with one, two, three, four.

229
00:10:59,000 --> 00:11:01,600
It doesn't really matter and we'll just assume that this seed, call

230
00:11:01,600 --> 00:11:04,800
produces a random series starting with, whatever the seed that was

231
00:11:04,800 --> 00:11:06,000
input, somehow.

232
00:11:06,000 --> 00:11:07,200
It generates a random series out of that.

233
00:11:07,200 --> 00:11:12,900
And any any time that anyone anywhere in the world for any reason

234
00:11:12,900 --> 00:11:16,500
running handmade hero creates a random series with that seed.

235
00:11:16,500 --> 00:11:16,600
We

236
00:11:17,000 --> 00:11:19,300
Too serious, to be the same and this case if it's just going to become

237
00:11:19,300 --> 00:11:22,800
that random number index, that's what it will do and so that's fine,

238
00:11:23,000 --> 00:11:23,500
right?

239
00:11:24,800 --> 00:11:28,200
So then once we have that, we don't have to do this anymore because it

240
00:11:28,200 --> 00:11:30,800
will start soon that they'll get taken care of inside thing.

241
00:11:31,300 --> 00:11:34,000
And then I just want to pull out the things that we were doing.

242
00:11:34,400 --> 00:11:36,200
So here's one of them, right?

243
00:11:36,500 --> 00:11:41,000
We've got random number table and then we did a mod by 2, right?

244
00:11:41,000 --> 00:11:44,600
So we're getting one and we're doing some kind of a mod and what I'd

245
00:11:44,600 --> 00:11:46,300
like to what I'd like to call.

246
00:11:46,300 --> 00:11:49,800
That basically is random choice, you know, we're making a random

247
00:11:49,800 --> 00:11:53,300
Choice here right between things, so I want to pass that random

248
00:11:53,300 --> 00:11:53,900
series.

249
00:11:54,900 --> 00:11:58,600
And then I want to say, I want to make a random choice where you pick

250
00:11:58,600 --> 00:11:59,800
one out of two.

251
00:12:00,000 --> 00:12:00,400
Options.

252
00:12:00,400 --> 00:12:03,300
So, I'm just going to pass the two options, you know, 01, whatever,

253
00:12:03,700 --> 00:12:04,200
right.

254
00:12:05,800 --> 00:12:07,900
And then, when I come down here, I see this other way that we were

255
00:12:07,900 --> 00:12:09,000
using it, right?

256
00:12:09,700 --> 00:12:14,400
We had this this one in here, where we were basically doing a random.

257
00:12:14,700 --> 00:12:17,700
I'm going to call this random unilateral, right?

258
00:12:18,700 --> 00:12:20,600
And so, I'll explain what I mean by that in a second.

259
00:12:20,600 --> 00:12:24,700
So by the way, this is going to be, I guess this is going to be a

260
00:12:25,200 --> 00:12:26,200
random choice.

261
00:12:26,200 --> 00:12:30,100
So we'll call this random choice and that's going to take the random

262
00:12:30,100 --> 00:12:30,800
series.

263
00:12:31,700 --> 00:12:35,100
And then it's going to take the choice count like so.

264
00:12:36,100 --> 00:12:38,200
And I guess this could really be unsigned because we're not going to

265
00:12:38,200 --> 00:12:42,000
support negative numbers in there, and that's what we were doing here.

266
00:12:42,000 --> 00:12:43,800
So that way when I implement this will know.

267
00:12:44,800 --> 00:12:47,600
And then similarly, we had one here that was going to basically return

268
00:12:47,600 --> 00:12:49,400
one floating-point number, right?

269
00:12:49,800 --> 00:12:53,900
And it's returning a floating floating Point number between zero and

270
00:12:53,900 --> 00:12:54,800
one, right?

271
00:12:54,800 --> 00:12:55,900
That's what this was doing.

272
00:12:55,900 --> 00:12:59,700
So it doesn't really take any inputs, it just returns between 0 and 1

273
00:12:59,900 --> 00:13:01,200
and that's a useful thing.

274
00:13:01,500 --> 00:13:02,900
To have it do as well.

275
00:13:03,200 --> 00:13:05,700
Now, the interesting thing about this, the reason I said random

276
00:13:05,700 --> 00:13:09,000
unilateral is because I like to separate my random numbers.

277
00:13:09,000 --> 00:13:11,600
And again, this is just experience talking here in the way I like to

278
00:13:11,600 --> 00:13:16,200
do things is, I like to have random unilateral and random, bilateral.

279
00:13:16,400 --> 00:13:21,700
And what those are, is 021 unilateral negative 1 to 1 bilateral,

280
00:13:21,900 --> 00:13:22,500
right?

281
00:13:23,600 --> 00:13:24,100
And

282
00:13:26,000 --> 00:13:27,400
I don't really know.

283
00:13:29,800 --> 00:13:34,600
I don't really know where I picked up that terminology, in fact.

284
00:13:36,000 --> 00:13:40,900
I guess you could also call it random normal and random by normal

285
00:13:41,800 --> 00:13:43,200
might be another way to do it.

286
00:13:43,300 --> 00:13:46,700
So, you know, a normalized number is 0 to 1 and a by normal.

287
00:13:46,700 --> 00:13:48,000
Number negative 1 to 1.

288
00:13:53,500 --> 00:13:54,500
That's pretty good too.

289
00:13:55,000 --> 00:13:57,900
I'm not sure I'm going to I'm going to go ahead and stick with that

290
00:13:58,400 --> 00:14:00,600
because I think that's the way I've typically prepared to do it.

291
00:14:00,600 --> 00:14:01,200
I don't, let's roll.

292
00:14:01,200 --> 00:14:01,900
Let's look it up.

293
00:14:02,000 --> 00:14:02,700
Let's look it up.

294
00:14:02,800 --> 00:14:04,100
Let's see what's a good term?

295
00:14:04,100 --> 00:14:08,800
I mean it's never, it's never too late but you can see having or

296
00:14:08,800 --> 00:14:11,300
relating to two sides or affecting both sides, right?

297
00:14:11,300 --> 00:14:12,700
It's kind of that.

298
00:14:12,700 --> 00:14:19,400
Nice sort of feel for negative 1 to 1, right, and unilateral, right?

299
00:14:20,300 --> 00:14:21,300
Only one side.

300
00:14:21,700 --> 00:14:22,400
Right?

301
00:14:23,500 --> 00:14:24,200
So, I don't know.

302
00:14:24,300 --> 00:14:26,300
I'm going to leave it that way because that's the way I typically name

303
00:14:26,300 --> 00:14:26,500
them.

304
00:14:26,500 --> 00:14:27,300
So let's just do that.

305
00:14:27,300 --> 00:14:30,500
But you could imagine other names and you can pick what's, when you're

306
00:14:30,500 --> 00:14:33,300
doing your version of this code, you should pick whatever.

307
00:14:33,300 --> 00:14:34,800
Makes the most sense to you, right?

308
00:14:34,800 --> 00:14:35,300
Certainly.

309
00:14:36,300 --> 00:14:37,700
So that's random unilateral.

310
00:14:37,700 --> 00:14:40,800
But, you know, the other thing that we might want to look at, right?

311
00:14:40,800 --> 00:14:43,800
Is this format, seems kind of useful to write.

312
00:14:43,800 --> 00:14:47,000
We sort of have this thing where we're doing, you know, we wanted to

313
00:14:47,000 --> 00:14:48,200
produce something.

314
00:14:49,700 --> 00:14:51,200
In fact, we did this whole math.

315
00:14:52,200 --> 00:14:54,300
This hope we have this home a situation about it.

316
00:14:54,300 --> 00:14:55,900
We that we did, right?

317
00:14:56,300 --> 00:14:59,800
We came in and we said this this whole thing here,

318
00:15:00,600 --> 00:15:02,300
Where we were talking about.

319
00:15:03,800 --> 00:15:08,000
You know, we need to solve to produce a number between negative 1 and

320
00:15:08,000 --> 00:15:09,400
1 or whatever else.

321
00:15:09,900 --> 00:15:13,200
What would be nice is if we could just do that from now, on without

322
00:15:13,200 --> 00:15:17,100
having to worry about doing the math, we could just ask for the random

323
00:15:17,100 --> 00:15:18,700
number that we wanted, right?

324
00:15:18,700 --> 00:15:22,700
So we could just say random, you know, between so something like

325
00:15:22,700 --> 00:15:26,200
random real between or something like that or just random between and

326
00:15:26,200 --> 00:15:29,100
say, like minimum and maximum, right?

327
00:15:29,200 --> 00:15:32,500
Because then we could just do something where we say, you know, what

328
00:15:32,500 --> 00:15:33,400
do you actually

329
00:15:33,500 --> 00:15:36,700
I want this thing to be right now.

330
00:15:36,700 --> 00:15:38,400
Of course, in this case, it happens.

331
00:15:38,400 --> 00:15:41,600
It just so happens that the equation that we wanted was between

332
00:15:41,600 --> 00:15:43,800
negative one and one.

333
00:15:43,900 --> 00:15:47,500
So we could just call random bilateral here, right?

334
00:15:47,500 --> 00:15:52,100
Because that happens to be exactly the range that we wanted.

335
00:15:52,300 --> 00:15:55,300
But you can imagine us wanting something, a little more flexible than

336
00:15:55,300 --> 00:15:55,700
that.

337
00:15:55,800 --> 00:15:57,700
And so, you know, let's just throw it in there as well.

338
00:15:58,300 --> 00:16:01,600
Just so we can kind of have that that nicely rounded out, right?

339
00:16:02,400 --> 00:16:03,400
So basically that's just

340
00:16:03,500 --> 00:16:06,300
It to random bilaterals like so.

341
00:16:07,700 --> 00:16:10,100
So that's all good, but you could imagine taking this even a little

342
00:16:10,100 --> 00:16:10,800
bit further.

343
00:16:11,300 --> 00:16:15,300
What if I wanted to have a way to make those two?

344
00:16:15,300 --> 00:16:20,800
You know, we could, we could do random, bilateral, bilateral, oops,

345
00:16:20,800 --> 00:16:25,700
bilateral to write or something like that and and that actually

346
00:16:25,700 --> 00:16:28,100
produces this kind of vector for me.

347
00:16:28,200 --> 00:16:30,700
Now, we haven't seen much of that yet and I expect we'll see more of

348
00:16:30,700 --> 00:16:31,300
it in the world thing.

349
00:16:31,300 --> 00:16:33,600
So it's a little premature to go down that route.

350
00:16:33,600 --> 00:16:34,900
So I'm not going to

351
00:16:36,500 --> 00:16:39,000
but you can kind of see where that's headed, right?

352
00:16:39,200 --> 00:16:40,900
So let's take a look at this right here.

353
00:16:41,400 --> 00:16:44,200
This this is another case of that random Choice thing.

354
00:16:44,200 --> 00:16:47,000
We're choosing bitmaps out of this.

355
00:16:47,000 --> 00:16:50,000
So this would just be saying, okay, whatever that array count is, we

356
00:16:50,000 --> 00:16:52,000
want to, we want to pick one of those, right?

357
00:16:52,000 --> 00:16:53,500
That's how we're doing that.

358
00:16:54,300 --> 00:16:56,900
Random Choice, actually, I don't need the parentheses anymore, random

359
00:16:56,900 --> 00:16:57,400
choice.

360
00:16:58,000 --> 00:17:04,200
And similarly, this one as well, random groups, random choice at

361
00:17:04,200 --> 00:17:05,200
series array cow.

362
00:17:06,000 --> 00:17:11,000
So now we've got, you know, that kind of nicely cleaned up and yeah

363
00:17:11,099 --> 00:17:12,099
that looks pretty good to me.

364
00:17:12,400 --> 00:17:13,599
That looks pretty good.

365
00:17:14,200 --> 00:17:15,599
So let's go ahead and Implement that.

366
00:17:15,700 --> 00:17:16,800
Let's make sure this compiles.

367
00:17:16,800 --> 00:17:17,400
Okay.

368
00:17:18,000 --> 00:17:20,300
Oh right, we didn't actually make our seed function yet.

369
00:17:20,700 --> 00:17:22,099
So here is our seed function.

370
00:17:24,000 --> 00:17:24,700
There we go.

371
00:17:25,000 --> 00:17:26,000
Random series.

372
00:17:27,099 --> 00:17:32,400
And this is our seed and our seed takes some kind of an unsigned

373
00:17:32,400 --> 00:17:36,900
integer there and Returns the result.

374
00:17:37,500 --> 00:17:37,900
Oops.

375
00:17:39,100 --> 00:17:41,300
So in order to do our seed function, right?

376
00:17:41,300 --> 00:17:42,600
This is going to be really simple.

377
00:17:42,600 --> 00:17:46,200
The seed function is probably the easiest thing all we really need to

378
00:17:46,200 --> 00:17:48,200
do for that for that is a sign.

379
00:17:48,200 --> 00:17:52,500
The random number index to be whatever the the seed value that comes

380
00:17:52,500 --> 00:17:52,900
in.

381
00:17:53,600 --> 00:17:58,100
Like so, but we also need to make sure that it's sort of, you know,

382
00:17:58,500 --> 00:17:59,800
that it's going to be kind of clamp.

383
00:18:00,000 --> 00:18:00,500
Here, right?

384
00:18:00,500 --> 00:18:05,400
So, it's going to be, it's we don't want to be out indexing outside

385
00:18:05,400 --> 00:18:07,300
the range of the table, right?

386
00:18:07,900 --> 00:18:12,000
So we want to do something where we're going to make sure that we mod

387
00:18:12,000 --> 00:18:16,400
by whatever the array count is of that, of that random number table,

388
00:18:16,400 --> 00:18:16,600
right?

389
00:18:16,600 --> 00:18:19,200
So that way, it's always inside the table.

390
00:18:20,400 --> 00:18:25,700
So, yeah, I mean implementing the rest of this is just pretty wrote.

391
00:18:25,700 --> 00:18:27,400
It's basically what we've already done.

392
00:18:28,000 --> 00:18:29,600
So, I'm going to write all these

393
00:18:30,000 --> 00:18:33,100
Terms of essentially you can you can see this operation happened in

394
00:18:33,100 --> 00:18:36,000
each one of them, this random, number table, unit increment, the thing

395
00:18:36,100 --> 00:18:36,700
and go.

396
00:18:36,900 --> 00:18:40,300
So what I'm going to do is just say, alright, let's assume that

397
00:18:40,300 --> 00:18:44,300
there's a thing which is like next random you in 32 kind of a thing

398
00:18:45,200 --> 00:18:49,300
where you pass the random series and that's responsible for getting

399
00:18:49,300 --> 00:18:50,500
that next random number.

400
00:18:51,000 --> 00:18:54,800
So, it just returns you that random number table with the random

401
00:18:54,800 --> 00:18:55,600
number index.

402
00:18:55,600 --> 00:18:57,500
And I can just make that index now, right?

403
00:18:57,500 --> 00:18:59,800
We don't really need to Beaver,

404
00:19:00,200 --> 00:19:01,500
Because inside the series.

405
00:19:01,900 --> 00:19:04,900
So that series index, we're just going to go ahead and grab whatever

406
00:19:04,900 --> 00:19:07,900
one is out of there and that's going to be the result.

407
00:19:07,900 --> 00:19:11,700
And then we're just going to quickly test to see if we have outstayed

408
00:19:11,700 --> 00:19:12,600
our welcome, right?

409
00:19:12,600 --> 00:19:17,100
So the series index, if the series index is now greater than or equal

410
00:19:17,100 --> 00:19:20,300
to that size of the table, random number table,

411
00:19:21,600 --> 00:19:24,700
We'll go ahead and wrap it back around 0, right?

412
00:19:25,000 --> 00:19:27,700
And then we'll return, whatever, it was the result that pop back out.

413
00:19:27,900 --> 00:19:33,000
So once we have that really, all we need to do is produce, you know,

414
00:19:33,000 --> 00:19:35,900
use that to, to produce all the other.

415
00:19:36,300 --> 00:19:38,600
All the other things that we actually needed, right?

416
00:19:38,800 --> 00:19:43,200
So in this case, we've got, you know, we're going to ask for the next

417
00:19:43,200 --> 00:19:45,200
round of the comes back and they were going to mod it, by whatever

418
00:19:45,200 --> 00:19:47,500
that choice count, is right like so.

419
00:19:48,500 --> 00:19:50,700
And that's really the entirety of the function.

420
00:19:51,200 --> 00:19:52,700
Similarly, same thing here like all.

421
00:19:52,700 --> 00:19:56,700
I'm really doing is just, you know, literally doing the wrote

422
00:19:56,700 --> 00:19:58,800
transformation of saying, you know.

423
00:19:58,800 --> 00:20:02,000
Next random you went 32 replaces wherever we were going to look up in

424
00:20:02,000 --> 00:20:02,600
the table.

425
00:20:03,000 --> 00:20:05,700
And that's how we produce the result now, right?

426
00:20:05,700 --> 00:20:07,000
So, there's that result.

427
00:20:07,900 --> 00:20:12,400
We could also make this be something that's that's precomputed, right?

428
00:20:13,100 --> 00:20:19,000
We could say something like, you know, divisor or something like this.

429
00:20:19,600 --> 00:20:21,000
And we could say, let's

430
00:20:21,100 --> 00:20:22,600
It just Lau the compiler.

431
00:20:22,600 --> 00:20:28,300
A really clear way to pre invert that number, and then we'll multiply

432
00:20:28,300 --> 00:20:32,900
by it instead and that's just allowing it to allowing the the compiler

433
00:20:32,900 --> 00:20:35,700
to know that we're just doing a coefficient multiplication here.

434
00:20:36,000 --> 00:20:40,500
Now, is that really all that important, not really in this context,

435
00:20:40,500 --> 00:20:44,900
but you know, usually CPUs are much better at multiplying than they

436
00:20:44,900 --> 00:20:48,000
are at dividing and phrasing things in terms of multiplication when

437
00:20:48,000 --> 00:20:50,300
you can is typically a good idea.

438
00:20:51,900 --> 00:20:55,300
So think since it's literally like trivial for me to modify the code

439
00:20:55,300 --> 00:20:59,800
to do that, you know, conveniently might as well, right?

440
00:21:00,800 --> 00:21:04,700
So yeah, let's go ahead and here and just again, not particularly

441
00:21:04,700 --> 00:21:06,000
doing anything special here.

442
00:21:06,200 --> 00:21:10,000
I'm not even trying to make these at all optimal or even interesting.

443
00:21:10,800 --> 00:21:14,600
I'm going to say that if we want to do random bilateral, we've got

444
00:21:14,600 --> 00:21:15,300
that code here.

445
00:21:15,300 --> 00:21:16,400
The way we did it before, right?

446
00:21:16,400 --> 00:21:20,600
It's this sort of two times.

447
00:21:22,600 --> 00:21:25,500
Whatever the unilateral result was, right?

448
00:21:25,600 --> 00:21:29,900
So, here's random unilateral and then you subtract one, that was, how

449
00:21:29,900 --> 00:21:32,200
we're doing it really straightforward.

450
00:21:32,800 --> 00:21:36,000
And finally, if we did want to implement this random between, we did,

451
00:21:36,000 --> 00:21:37,900
we know we worked out the math for that.

452
00:21:38,700 --> 00:21:40,000
You remember how we did it?

453
00:21:40,000 --> 00:21:43,900
We basically said, okay, there was sort of a range and that's the max

454
00:21:43,900 --> 00:21:45,400
minus the Min, right?

455
00:21:45,500 --> 00:21:47,100
That's the total range of values.

456
00:21:47,700 --> 00:21:51,100
And then what we want to do is say, all right, to produce the results.

457
00:21:51,600 --> 00:21:52,300
We take a random

458
00:21:52,400 --> 00:21:55,000
Some unilateral from the series.

459
00:21:55,100 --> 00:21:56,700
Oops, gotta add that Series in there.

460
00:21:58,800 --> 00:22:01,800
We take a random unilateral from the series and we need to multiply

461
00:22:01,800 --> 00:22:04,900
that you know the range times that so that gives us somewhere in the

462
00:22:04,900 --> 00:22:08,700
range and then we just add that that bin offset to it, right?

463
00:22:08,700 --> 00:22:11,100
That's a that's a pretty straightforward way to produce something in

464
00:22:11,100 --> 00:22:12,100
between those two.

465
00:22:12,300 --> 00:22:16,600
We know that if the random unilateral produce is 0, then we'll end up

466
00:22:16,600 --> 00:22:18,900
and, you know, I could phrase it this way to make it a little clearer.

467
00:22:19,000 --> 00:22:23,200
So you start at the minimum and then you're just taking some amount of

468
00:22:23,200 --> 00:22:25,600
the range and adding it in there.

469
00:22:25,600 --> 00:22:27,900
And again, this is that this is that function.

470
00:22:29,000 --> 00:22:31,400
Format that I talk about all the time, the blending function starts

471
00:22:31,400 --> 00:22:35,600
somewhere and you go a certain amount towards towards the other end

472
00:22:35,700 --> 00:22:38,300
and we could phrase it in that way as well.

473
00:22:38,300 --> 00:22:41,200
In fact, you know what, why don't I do that just to reinforce it here

474
00:22:41,600 --> 00:22:42,800
just just to make it clear.

475
00:22:42,800 --> 00:22:43,600
What's going on?

476
00:22:43,900 --> 00:22:44,300
I think.

477
00:22:44,300 --> 00:22:46,900
Do we did we make one of these?

478
00:22:47,100 --> 00:22:49,700
Do we make a linear blend function?

479
00:22:49,700 --> 00:22:50,500
We didn't

480
00:22:51,800 --> 00:22:52,400
Oh man.

481
00:22:52,800 --> 00:22:54,200
How disappointing is that?

482
00:22:54,600 --> 00:22:58,100
I thought we probably would have already but it looks like we never

483
00:22:58,100 --> 00:22:58,600
did.

484
00:22:59,400 --> 00:23:00,400
That's too bad.

485
00:23:00,700 --> 00:23:05,000
That's too bad and I feel like we've been using it, right?

486
00:23:05,000 --> 00:23:07,600
I mean, we used in the same region.

487
00:23:08,800 --> 00:23:12,100
I feel like we definitely will actually, you know what, I think we

488
00:23:12,100 --> 00:23:14,900
made moved it out to to the entities.

489
00:23:14,900 --> 00:23:15,200
Right?

490
00:23:15,200 --> 00:23:16,300
The get stared round.

491
00:23:16,700 --> 00:23:19,800
Yeah, so I mean, you can see that this, this forum pops up everywhere,

492
00:23:19,800 --> 00:23:20,400
right?

493
00:23:22,100 --> 00:23:23,200
It's the same thing, right?

494
00:23:23,300 --> 00:23:27,800
If you can see it happening, see how it happens here, and here, right?

495
00:23:27,800 --> 00:23:31,800
When you have the range and the minimum and then you multiply by

496
00:23:31,900 --> 00:23:34,600
whatever the amount from 0 to 1 is that you want to go.

497
00:23:36,300 --> 00:23:37,200
Well, sigh.

498
00:23:37,200 --> 00:23:39,800
That's just the way that goes.

499
00:23:39,800 --> 00:23:41,900
But what I was basically saying is we could have done it this way

500
00:23:41,900 --> 00:23:45,000
which is like a linear interpolate or something like that which is

501
00:23:45,000 --> 00:23:46,900
often called lerp, right?

502
00:23:46,900 --> 00:23:51,300
You can say, I want to go from the Min to the max by some value, which

503
00:23:51,300 --> 00:23:54,300
is going to be random unilateral Series, right?

504
00:23:54,300 --> 00:23:59,800
So that's, you know, sort of the thing that I assume that we had

505
00:23:59,800 --> 00:23:59,900
already

506
00:24:00,000 --> 00:24:01,700
Didn't doesn't look like we did.

507
00:24:02,000 --> 00:24:04,100
But again, that's just that that blend format.

508
00:24:04,100 --> 00:24:06,300
I've talked about on the stream multiple times.

509
00:24:06,300 --> 00:24:11,800
It's like, you know, it's like an A and A B that you're going between

510
00:24:12,200 --> 00:24:14,200
and it has that form of

511
00:24:16,600 --> 00:24:21,500
Of 1 minus t times a plus T times B, right?

512
00:24:22,600 --> 00:24:27,100
And at the risk of beating a dead horse because maybe people didn't

513
00:24:27,100 --> 00:24:29,600
watch the old streams or something like that.

514
00:24:29,600 --> 00:24:29,900
You know.

515
00:24:29,900 --> 00:24:33,200
This again is that sort of it's so important that it's worth saying

516
00:24:33,200 --> 00:24:36,200
over and over and over and over again, until we're blue in the face,

517
00:24:36,200 --> 00:24:37,600
just so everyone.

518
00:24:37,600 --> 00:24:42,900
So there's no chance that you could ever possibly watch handmade hero

519
00:24:42,900 --> 00:24:46,200
and not know it, it's 82, right?

520
00:24:47,200 --> 00:24:47,600
Yeah.

521
00:24:49,600 --> 00:24:50,600
Just in case.

522
00:24:52,300 --> 00:24:55,200
Again the way that that the reason that I say, those two are the same

523
00:24:55,200 --> 00:25:00,000
equation is because if you're going to blend from a between two things

524
00:25:00,000 --> 00:25:05,200
from A to B by some value, that goes from 0 to 1, which is T, right?

525
00:25:05,300 --> 00:25:09,000
That is that, that sort of universal blending equation, which is 1

526
00:25:09,000 --> 00:25:12,400
minus t, A+ T, be right?

527
00:25:12,500 --> 00:25:16,800
And if you multiply that out you get 1, minus t a

528
00:25:17,100 --> 00:25:19,400
Right I'm just distributive property right?

529
00:25:19,400 --> 00:25:24,500
Straight up high school math at best TB, you know.

530
00:25:25,300 --> 00:25:32,000
And so if you think about what happens here in terms of grouping these

531
00:25:32,000 --> 00:25:35,300
terms, you can see that there's a TV in both of these.

532
00:25:35,500 --> 00:25:38,500
So if we there, if we go ahead and group that out like this is the

533
00:25:38,500 --> 00:25:41,500
equation grouped by a write.

534
00:25:41,500 --> 00:25:45,200
This this term here being grouped by a so it's 1, minus ta.

535
00:25:45,600 --> 00:25:46,800
If we instead grouped it bite,

536
00:25:46,900 --> 00:25:48,300
It right?

537
00:25:48,500 --> 00:25:54,500
You end up with plus T, you know, B minus a right that's just pulling

538
00:25:54,500 --> 00:25:57,200
out the tea and you end up with a negative a and a positive B.

539
00:25:57,200 --> 00:26:02,300
So B minus a right, that is the range, that's the difference between a

540
00:26:02,300 --> 00:26:04,800
and b and this is the Min, right?

541
00:26:04,800 --> 00:26:06,200
It's the place you're starting at now.

542
00:26:06,200 --> 00:26:07,600
They don't have to be mins and Max's.

543
00:26:07,600 --> 00:26:09,000
Doesn't matter what direction this goes.

544
00:26:09,000 --> 00:26:09,900
You don't really care.

545
00:26:10,100 --> 00:26:11,500
So, Min and Max is irrelevant really?

546
00:26:11,500 --> 00:26:15,000
Just a and b but in terms of the phrasing that we were using before

547
00:26:15,200 --> 00:26:16,000
it's Min and Max, right?

548
00:26:16,000 --> 00:26:16,800
So you can see

549
00:26:17,200 --> 00:26:19,400
That these are the same equation there.

550
00:26:19,400 --> 00:26:21,300
Just grouped a little bit differently.

551
00:26:22,200 --> 00:26:24,200
And yeah, like I said, you can never really repeat this too many

552
00:26:24,200 --> 00:26:28,800
times, because if you don't know this equation by heart cold, you are

553
00:26:28,800 --> 00:26:34,200
going to be a Sad Panda because it is basically the most useful thing,

554
00:26:34,200 --> 00:26:36,600
you can possibly know it.

555
00:26:36,900 --> 00:26:41,900
If you could only know one thing mathematically in game programming,

556
00:26:41,900 --> 00:26:45,400
it be this hopefully, you know, a lot more than one, but

557
00:26:46,200 --> 00:26:47,100
But this would be it.

558
00:26:47,900 --> 00:26:48,500
So anyway,

559
00:26:49,900 --> 00:26:53,700
There it is and I'm since I bothered to write it, I'm going to stick

560
00:26:53,700 --> 00:26:57,600
it in here and use it because you know, gosh darn it.

561
00:26:59,300 --> 00:26:59,900
You know the

562
00:27:00,000 --> 00:27:03,700
This is running out of code and we need to conserve the code.

563
00:27:03,700 --> 00:27:05,200
It's a scalar operation after all.

564
00:27:05,200 --> 00:27:06,500
It should go in the scalar operations.

565
00:27:06,500 --> 00:27:07,100
There it is.

566
00:27:07,700 --> 00:27:09,200
No, it's there.

567
00:27:10,000 --> 00:27:10,900
There it is.

568
00:27:11,100 --> 00:27:14,000
See, I knew we had it.

569
00:27:14,000 --> 00:27:15,300
How come I couldn't find it.

570
00:27:15,600 --> 00:27:16,700
It's my search busted.

571
00:27:16,700 --> 00:27:17,200
What did I do?

572
00:27:17,200 --> 00:27:18,500
I my fat fingered it.

573
00:27:18,500 --> 00:27:20,500
Didn't I lame?

574
00:27:21,000 --> 00:27:23,300
Alright, so there it is and you can see that I've already written it

575
00:27:23,300 --> 00:27:24,100
there so that's good.

576
00:27:24,100 --> 00:27:24,700
So you can do it.

577
00:27:24,700 --> 00:27:25,000
Alright.

578
00:27:25,000 --> 00:27:25,200
Okay.

579
00:27:25,200 --> 00:27:25,900
I feel better.

580
00:27:26,000 --> 00:27:27,700
I was like so ready for it to be there.

581
00:27:27,700 --> 00:27:29,900
I was like hoping that was there and then I would like it wasn't.

582
00:27:30,000 --> 00:27:31,900
There I was in this big letdown so.

583
00:27:31,900 --> 00:27:32,100
Okay.

584
00:27:32,100 --> 00:27:34,400
So it's just a search fat fingered.

585
00:27:35,400 --> 00:27:38,900
So you know disaster narrowly averted disaster narrowly averted good

586
00:27:38,900 --> 00:27:39,300
good.

587
00:27:40,300 --> 00:27:45,100
But yes again if anyone who hasn't gotten that totally down will still

588
00:27:45,100 --> 00:27:47,500
say it a few more times, I'll be on the stream but that's that's the

589
00:27:47,500 --> 00:27:48,600
function that you got to know.

590
00:27:49,600 --> 00:27:50,300
So there we go.

591
00:27:50,300 --> 00:27:53,800
That's that's alert going on there and that's all good.

592
00:27:54,100 --> 00:27:58,900
So let's finish the the fixer that the replacement here.

593
00:27:59,600 --> 00:27:59,900
So

594
00:28:00,000 --> 00:28:06,700
need to change this to a random Choice as well and just grab out that

595
00:28:09,400 --> 00:28:14,200
There, these are land random bilaterals so we can do.

596
00:28:15,700 --> 00:28:17,600
Oops, that's an address of series.

597
00:28:18,300 --> 00:28:18,900
There we go.

598
00:28:19,600 --> 00:28:21,200
Another random bilateral.

599
00:28:21,800 --> 00:28:26,900
And let's see if that worked out for us.

600
00:28:26,900 --> 00:28:27,500
It did.

601
00:28:27,500 --> 00:28:28,800
That's what we expect to see.

602
00:28:28,800 --> 00:28:29,900
So that's all good.

603
00:28:31,700 --> 00:28:34,100
And you know what we could do to?

604
00:28:37,200 --> 00:28:38,100
You know, I don't know if we actually

605
00:28:38,200 --> 00:28:40,700
I really want to but, you know, we could make it so just to

606
00:28:40,700 --> 00:28:44,400
demonstrate what happens there, we could make it so that this seed

607
00:28:44,400 --> 00:28:46,700
kind of permutes itself, periodically.

608
00:28:48,500 --> 00:28:50,300
I don't know that we really care about that but that's something we

609
00:28:50,300 --> 00:28:50,900
could do.

610
00:28:51,100 --> 00:28:53,700
So we could see how it changes, what the background is, but we'll

611
00:28:53,700 --> 00:28:54,700
leave that for some of the time.

612
00:28:55,300 --> 00:28:58,600
So anyway, what we can do is we can continue this down.

613
00:28:58,600 --> 00:29:01,800
Now, to anywhere, we were using the random number table, right?

614
00:29:01,800 --> 00:29:05,500
And so we can make another random series here, that's something else,

615
00:29:06,700 --> 00:29:08,000
you know, four, five, six, seven,

616
00:29:08,200 --> 00:29:08,700
Or whatever.

617
00:29:08,700 --> 00:29:10,700
I don't know, doesn't have to be something else, could be the same

618
00:29:10,700 --> 00:29:11,700
series, who cares?

619
00:29:12,600 --> 00:29:13,600
We'll deal with that little bit later.

620
00:29:13,600 --> 00:29:17,000
But point being, what we can do now is make sure everything works off

621
00:29:17,000 --> 00:29:18,300
of this because, why not?

622
00:29:18,500 --> 00:29:21,400
We spent the time to do it, we might as well clean up all the code.

623
00:29:21,800 --> 00:29:25,500
And so we can do is just say, all right, get rid of that, it looks

624
00:29:25,500 --> 00:29:28,600
like we actually have a random Choice variable here.

625
00:29:28,600 --> 00:29:31,300
So perhaps I shouldn't have called the function, random choice.

626
00:29:32,000 --> 00:29:33,900
But you know what?

627
00:29:34,800 --> 00:29:36,500
It's it's an oversight.

628
00:29:37,000 --> 00:29:38,000
Let's go ahead and say

629
00:29:38,200 --> 00:29:42,500
That random choice is going to be, what is this, actually, a choice of

630
00:29:42,900 --> 00:29:46,500
this is actually like a door direction, right?

631
00:29:47,800 --> 00:29:49,300
I think is what we actually did.

632
00:29:49,600 --> 00:29:52,800
So let's call that door Direction because that's actually what it is.

633
00:29:52,800 --> 00:29:55,300
It's not just a random Choice, it's the random choice of door

634
00:29:55,300 --> 00:29:55,900
Direction.

635
00:29:57,400 --> 00:29:59,800
So it looks like we want to

636
00:30:00,000 --> 00:30:09,300
You random Choice series of to here and we want to do random Choice

637
00:30:09,800 --> 00:30:17,600
series of three here like so otherwise known as if that's true then we

638
00:30:17,600 --> 00:30:20,700
do a to otherwise we do a three right what's that?

639
00:30:20,800 --> 00:30:25,300
Basically all that was doing seems like that was true.

640
00:30:25,800 --> 00:30:27,600
So let's go ahead and make that be true.

641
00:30:28,300 --> 00:30:28,800
ZZ

642
00:30:30,500 --> 00:30:35,700
And then we come down here and it looks like there's really not much

643
00:30:35,700 --> 00:30:42,700
else in terms of Randomness looks like just the familiar set where the

644
00:30:42,700 --> 00:30:47,100
familiars were going in our random familiar generator here, but we can

645
00:30:47,100 --> 00:30:49,000
do that one as well, right?

646
00:30:49,300 --> 00:30:54,600
We can just say that we want, I guess it looks like it's just an X Y

647
00:30:54,600 --> 00:30:59,200
there, and it's an XY between

648
00:31:00,200 --> 00:31:02,100
Between negative 7.

649
00:31:03,400 --> 00:31:04,600
And three.

650
00:31:06,800 --> 00:31:07,200
Right.

651
00:31:07,200 --> 00:31:09,500
I mean, that's what we wrote here, because we're producing a number

652
00:31:09,500 --> 00:31:10,500
between 0 and 9.

653
00:31:10,500 --> 00:31:12,800
And there were subtracting 7 from it.

654
00:31:13,800 --> 00:31:14,200
So, no.

655
00:31:14,200 --> 00:31:16,400
So it's between negative seven and two.

656
00:31:17,800 --> 00:31:21,900
So that's kind of hard to read and we don't even know what's going on

657
00:31:21,900 --> 00:31:22,200
there.

658
00:31:22,200 --> 00:31:26,800
So I think this might be another good reason to augment this with, you

659
00:31:26,800 --> 00:31:30,300
know, one of these random betweens that works for integers to, you

660
00:31:30,300 --> 00:31:37,200
know, if we did something like this where we can say, give me a minute

661
00:31:37,200 --> 00:31:39,800
Max can integer space and get one out there.

662
00:31:39,800 --> 00:31:43,700
That that seems like a pretty good idea to me.

663
00:31:44,100 --> 00:31:46,000
I don't know about you guys.

664
00:31:46,200 --> 00:31:47,800
So yeah, I would say

665
00:31:47,900 --> 00:31:50,300
In this case, we could use that form, we can't use the lip because

666
00:31:50,300 --> 00:31:53,900
it's that's floating point and you wouldn't want to produce those

667
00:31:53,900 --> 00:31:54,500
Infinity values.

668
00:31:54,500 --> 00:31:58,400
You need actual integer values, but, you know, we can still do the

669
00:31:58,400 --> 00:31:59,500
exact same thing, right?

670
00:31:59,500 --> 00:32:04,200
It's just, a Min, plus the max minus the Min, as the range.

671
00:32:04,200 --> 00:32:06,500
So all we really need to do is just say next.

672
00:32:06,500 --> 00:32:10,900
Random Unit 32 mod that range, right?

673
00:32:11,600 --> 00:32:12,200
Like so,

674
00:32:13,300 --> 00:32:16,200
And so that way that'll give us, you know, it'll start at the minimum

675
00:32:16,200 --> 00:32:17,300
and then we'll make it.

676
00:32:17,300 --> 00:32:20,100
We'll get a random number and will produce some offset basically,

677
00:32:20,100 --> 00:32:22,100
doing the exact same thing we're doing here.

678
00:32:22,600 --> 00:32:25,400
Only at least now it'll be a little more readable so we can say, you

679
00:32:25,400 --> 00:32:28,300
know, random between past that series.

680
00:32:28,300 --> 00:32:32,600
And then say, all right, we want a random number between negative 7

681
00:32:32,600 --> 00:32:33,200
and 2.

682
00:32:33,400 --> 00:32:36,700
And now at least we can see that that's what's what it's doing, right?

683
00:32:37,100 --> 00:32:42,200
And similarly here, I want, you know, that random number between

684
00:32:42,800 --> 00:32:43,600
It is.

685
00:32:46,200 --> 00:32:51,700
Three, right, and plus 9.

686
00:32:51,700 --> 00:32:55,800
So it's going to be 6 I guess again, don't really know what we were

687
00:32:55,800 --> 00:32:58,600
doing there, but I guess we were just trying to figure out reasonable

688
00:32:58,600 --> 00:32:59,900
places where the familiar

689
00:33:00,000 --> 00:33:00,800
Could be.

690
00:33:02,900 --> 00:33:04,200
But yeah, but I don't know.

691
00:33:04,500 --> 00:33:07,100
So we'll just do that and make sure it works.

692
00:33:07,100 --> 00:33:07,600
Okay.

693
00:33:08,900 --> 00:33:09,800
That doesn't look quite right.

694
00:33:09,800 --> 00:33:11,000
Are familiar, is gone.

695
00:33:11,200 --> 00:33:12,500
Where did our familiar go?

696
00:33:13,800 --> 00:33:16,800
Brandon between series past them in?

697
00:33:17,100 --> 00:33:22,900
Get the max Min, we mod by that, we add, of course, this is coming out

698
00:33:22,900 --> 00:33:28,400
as a unit 32, which is, you know, it's not the best possible thing.

699
00:33:28,400 --> 00:33:29,800
So, I wonder if we want to make sure,

700
00:33:30,000 --> 00:33:34,900
Sure, we can sort of do that to make sure that we've got the positive

701
00:33:34,900 --> 00:33:35,700
negative range there.

702
00:33:35,700 --> 00:33:37,300
But yeah, what did I must have?

703
00:33:37,600 --> 00:33:38,800
Must something up.

704
00:33:39,000 --> 00:33:42,300
Let's go in and set a breakpoint there.

705
00:33:43,400 --> 00:33:43,900
There we go.

706
00:33:49,900 --> 00:33:53,100
Wait, so no, it's offset from the camera now, so that's fine.

707
00:33:53,600 --> 00:33:54,900
All right, so let's double check here.

708
00:33:55,300 --> 00:34:00,900
Random between, let's see, Min and Max.

709
00:34:01,500 --> 00:34:03,900
We actually want to see those in regular numbers.

710
00:34:04,400 --> 00:34:08,300
So max minus Min is 9 which is what we expect.

711
00:34:08,600 --> 00:34:10,100
So what's our results there?

712
00:34:11,699 --> 00:34:17,699
It's negative 7 that seems like you're totally plausible value to me.

713
00:34:18,600 --> 00:34:19,600
What happens here?

714
00:34:20,600 --> 00:34:25,100
Result is 5, which is also a totally plausible value.

715
00:34:28,199 --> 00:34:29,500
Yeah.

716
00:34:31,900 --> 00:34:33,699
So, where did our familiar go?

717
00:34:35,300 --> 00:34:37,000
Are familiar is up there.

718
00:34:37,000 --> 00:34:40,300
So I must have really misread what we were doing.

719
00:34:41,000 --> 00:34:44,300
Which again is why I said I wanted to replace those routines I guess I

720
00:34:44,300 --> 00:34:46,300
was not concentrating well enough on that.

721
00:34:46,900 --> 00:34:53,300
So I yeah I thought it was saying - seven such as start at negative 7

722
00:34:53,699 --> 00:34:57,000
and then it should go between 0 and 10.

723
00:34:57,000 --> 00:34:59,600
Right now let's see what the

724
00:35:02,700 --> 00:35:03,000
No.

725
00:35:06,100 --> 00:35:07,200
I feel like that.

726
00:35:07,300 --> 00:35:07,600
Yeah.

727
00:35:07,600 --> 00:35:09,700
But I must have, I must have misread that there.

728
00:35:09,900 --> 00:35:13,400
I guess, what I can do is just take a look at what it actually was.

729
00:35:13,800 --> 00:35:14,500
Let's take a look.

730
00:35:15,100 --> 00:35:18,400
So what did I misinterpret here for modding by 10?

731
00:35:19,200 --> 00:35:21,400
So whatever comes out of the random number table is going to be

732
00:35:21,400 --> 00:35:23,500
between zero and nine, right?

733
00:35:24,300 --> 00:35:24,800
Well, you know what?

734
00:35:24,800 --> 00:35:28,600
We don't even have to guess, I guess we'll just go ahead and and see

735
00:35:28,600 --> 00:35:29,800
what that is next.

736
00:35:29,800 --> 00:35:31,800
Random you went 32

737
00:35:33,600 --> 00:35:33,900
You know what?

738
00:35:33,900 --> 00:35:34,600
It could be.

739
00:35:34,900 --> 00:35:39,400
It could be that it was just happening to produce a number that happen

740
00:35:39,400 --> 00:35:42,400
to be pretty far forward and we just haven't ever rerun it again

741
00:35:42,400 --> 00:35:44,700
because you know it wasn't, it was always going to produce the same

742
00:35:44,700 --> 00:35:48,000
random series since we're going through the table in the same order

743
00:35:48,400 --> 00:35:51,200
that could actually be the be the whole thing could be that I

744
00:35:51,200 --> 00:35:55,800
translated entirely properly, which does seem potentially to be the

745
00:35:55,800 --> 00:35:56,100
case.

746
00:35:56,100 --> 00:35:57,000
But let's take a look.

747
00:35:57,100 --> 00:35:58,100
Let me just verify

748
00:36:00,700 --> 00:36:01,500
That's the case.

749
00:36:02,200 --> 00:36:03,200
We're all set 16.

750
00:36:05,300 --> 00:36:06,700
So let's see what we get there.

751
00:36:08,000 --> 00:36:08,400
Okay.

752
00:36:10,100 --> 00:36:11,300
So yeah, we're totally fine.

753
00:36:12,200 --> 00:36:15,600
So I think what actually was happening there was we just happen to

754
00:36:15,600 --> 00:36:18,800
have a fortuitous random number and one time in 18, you know, when we

755
00:36:18,800 --> 00:36:21,900
were kind of going through things, it turned out that it was you know,

756
00:36:22,200 --> 00:36:26,500
some sort of a situation that that fortuity to fortuitously still

757
00:36:26,500 --> 00:36:29,600
placed it in the right place spot on the screen.

758
00:36:29,800 --> 00:36:33,600
I feel like that's probably true but you know, I could be wrong about

759
00:36:33,600 --> 00:36:34,000
that.

760
00:36:34,700 --> 00:36:38,500
So yeah, let's think about this for one second though.

761
00:36:38,700 --> 00:36:39,800
If the monstars

762
00:36:40,000 --> 00:36:41,300
Negative 3 plus 2.

763
00:36:41,900 --> 00:36:42,100
Yes.

764
00:36:42,100 --> 00:36:47,500
If I go back, if I go back in here and just sort of put this back in,

765
00:36:48,000 --> 00:36:51,000
if I actually wanted to do, what's probably the right thing for the

766
00:36:51,000 --> 00:36:52,600
familiar Randomness wise?

767
00:36:52,800 --> 00:36:55,100
We probably want his y offset.

768
00:36:55,600 --> 00:36:58,800
If the monster, is that camera tile plus 2.

769
00:36:59,600 --> 00:37:02,800
We probably want the familiar to be it, like something that's going to

770
00:37:02,800 --> 00:37:07,500
be negative off the camera tile and then it's probably fine.

771
00:37:07,500 --> 00:37:09,800
However, you know far he is in either direction.

772
00:37:09,900 --> 00:37:14,200
Correction - 727 or something like that.

773
00:37:16,000 --> 00:37:16,500
I don't know.

774
00:37:16,500 --> 00:37:17,300
Let's take a look.

775
00:37:17,700 --> 00:37:18,800
See what that gives us.

776
00:37:19,500 --> 00:37:20,200
So that's fine.

777
00:37:20,200 --> 00:37:23,500
And let's maybe let's generate just a few more of those just to see

778
00:37:25,900 --> 00:37:30,200
Yeah, so that looks a little bit better in terms of what's going on

779
00:37:30,200 --> 00:37:31,900
with the with the familiars there.

780
00:37:32,400 --> 00:37:36,900
Similarly, maybe give them a little more range in terms of the

781
00:37:36,900 --> 00:37:38,200
locations there.

782
00:37:39,100 --> 00:37:40,300
So that looks pretty good.

783
00:37:40,800 --> 00:37:45,100
Yeah, and I do I feel like maybe

784
00:37:47,000 --> 00:37:52,100
maybe we've got to do, you know, I realize the phrasing of this

785
00:37:52,100 --> 00:37:57,900
routine is a little bit off so like

786
00:37:59,200 --> 00:38:01,100
Just hear me out for a second on this.

787
00:38:02,000 --> 00:38:06,000
So basically, you know, we've got this situation where we're saying

788
00:38:06,000 --> 00:38:06,800
Min and Max.

789
00:38:06,800 --> 00:38:10,700
And in this case we're including the max in the range.

790
00:38:11,300 --> 00:38:14,000
And in this case, we're not including the max in the range.

791
00:38:17,300 --> 00:38:19,500
I mean it's pretty self-explanatory, right?

792
00:38:19,500 --> 00:38:24,200
If this came out to be 0, we would, it would be kind of invalid,

793
00:38:24,200 --> 00:38:24,700
right?

794
00:38:24,800 --> 00:38:29,400
But if it comes out to be 1, then we're only ever going to produce a 0

795
00:38:29,400 --> 00:38:31,600
here, which means we always produce them in.

796
00:38:31,800 --> 00:38:34,600
Whereas what we want to do, if there's a range of one is produced

797
00:38:34,600 --> 00:38:38,700
either, the Min or the max, right, and so on and so forth.

798
00:38:39,100 --> 00:38:42,200
So I feel like really what we would want to do to match this routine

799
00:38:42,200 --> 00:38:44,600
is is include that extra

800
00:38:44,800 --> 00:38:49,200
Ra, you know, the max in fact you could say it's the max plus 1, minus

801
00:38:49,200 --> 00:38:50,000
the Min, right?

802
00:38:50,000 --> 00:38:53,500
Because we're want to be one over from that.

803
00:38:53,900 --> 00:38:56,800
Hopefully, that makes some sense and that's why we were seeing that

804
00:38:56,800 --> 00:38:59,800
familiar would only on one line before it really should be on.

805
00:39:00,300 --> 00:39:01,200
Three lines, right?

806
00:39:01,200 --> 00:39:04,600
And so now it is on three lines and that's better so that's good.

807
00:39:05,300 --> 00:39:06,200
I think that's a good thing.

808
00:39:07,600 --> 00:39:09,500
So yeah, now we got that Randomness in there.

809
00:39:09,500 --> 00:39:10,500
That's pretty good.

810
00:39:10,800 --> 00:39:15,100
I think that's a nice thing so I'm not sure what to tackle exactly.

811
00:39:15,100 --> 00:39:20,100
Next, we've got about 15 minutes to go so we probably should do

812
00:39:20,100 --> 00:39:21,200
something else.

813
00:39:21,200 --> 00:39:23,700
Relatively substantial, not too big but

814
00:39:27,200 --> 00:39:31,500
We've taken care of everything, regarding the random number table.

815
00:39:31,500 --> 00:39:31,800
Here.

816
00:39:31,800 --> 00:39:32,500
We could.

817
00:39:32,500 --> 00:39:37,800
I suppose also do something where we like, you know, move this move

818
00:39:37,800 --> 00:39:38,200
this down.

819
00:39:38,200 --> 00:39:42,100
Let's let's make sure that nobody's asking for that outside here yet

820
00:39:42,100 --> 00:39:42,600
or not.

821
00:39:43,000 --> 00:39:44,200
So I think we're pretty much good.

822
00:39:44,200 --> 00:39:46,800
We've removed any dependency directly on that table from the code.

823
00:39:46,800 --> 00:39:50,300
And so that way, when we vaporize it, we just redo these routines and

824
00:39:50,300 --> 00:39:50,500
effect.

825
00:39:50,500 --> 00:39:53,400
Basically, we set ourselves up so we only have to redo one routine.

826
00:39:53,400 --> 00:39:55,300
Which is next random un 32.

827
00:39:56,200 --> 00:39:59,600
That's the only thing that we're really after you do well, and see

828
00:39:59,600 --> 00:40:03,800
that, I suppose, when we switch to an actual random number generator,

829
00:40:03,800 --> 00:40:04,700
instead of a table.

830
00:40:05,000 --> 00:40:06,900
So I think that's in good shape.

831
00:40:09,200 --> 00:40:09,600
Yeah.

832
00:40:09,700 --> 00:40:13,800
So what next is the question and I don't really know which one we

833
00:40:13,800 --> 00:40:14,400
should do next.

834
00:40:14,400 --> 00:40:17,700
I suppose what we could do is we could try doing.

835
00:40:19,100 --> 00:40:20,900
Let's try doing a pre composite.

836
00:40:20,900 --> 00:40:21,700
You know why not?

837
00:40:21,700 --> 00:40:22,800
I mean it's a smaller.

838
00:40:22,800 --> 00:40:23,800
It's a smallish thing to do.

839
00:40:23,800 --> 00:40:25,800
We could probably do that right here.

840
00:40:26,300 --> 00:40:31,700
So what I'm thinking right is, you know, I want to start, I want to

841
00:40:31,700 --> 00:40:38,200
take this this draw test ground thing and I just kind of want to make

842
00:40:38,200 --> 00:40:41,800
this into something that can do a composite of the ground without

843
00:40:41,800 --> 00:40:43,300
having to redo it every frame.

844
00:40:43,500 --> 00:40:44,000
Right.

845
00:40:44,100 --> 00:40:48,500
So I want to do is say oh I want to you know build test ground or

846
00:40:48,500 --> 00:40:50,300
something like that, right?

847
00:40:51,200 --> 00:40:54,100
And make that make that happen.

848
00:40:54,100 --> 00:40:55,900
I guess, you know, technically, I could still call

849
00:40:56,000 --> 00:40:57,000
That drug test ground.

850
00:40:57,000 --> 00:40:58,000
It's not really a big deal.

851
00:40:58,000 --> 00:41:00,600
But basically what I'm going to do is take this game off screen buffer

852
00:41:00,600 --> 00:41:01,100
thing.

853
00:41:02,700 --> 00:41:06,500
I want to make that so that I can just sort of pass something, that's

854
00:41:06,500 --> 00:41:08,700
not actually the real game off-screen buffer.

855
00:41:08,900 --> 00:41:09,400
Right?

856
00:41:09,900 --> 00:41:12,800
So here's what that was, you know.

857
00:41:14,000 --> 00:41:16,800
And what I could do is just say, alright, well,

858
00:41:18,500 --> 00:41:20,800
Loaded bitmap, right?

859
00:41:22,000 --> 00:41:24,800
I don't know if you remember, whereas loaded bitmap load.

860
00:41:24,800 --> 00:41:27,700
A bitmap looks exactly like that.

861
00:41:27,800 --> 00:41:32,400
So if I, if you take a look at handmade platform and I've Got Game

862
00:41:32,400 --> 00:41:34,000
asking buffer, right?

863
00:41:34,100 --> 00:41:38,500
And then I've got loaded bitmap, they're really really similar, you

864
00:41:38,500 --> 00:41:38,600
know?

865
00:41:38,600 --> 00:41:43,100
I'm saying so I'm wondering is what if we just condense, those two

866
00:41:43,100 --> 00:41:44,400
things down

867
00:41:45,400 --> 00:41:46,200
To one thing.

868
00:41:47,900 --> 00:41:48,900
You see what I'm saying there?

869
00:41:49,100 --> 00:41:52,200
Hopefully, that makes some sense so that really we don't have two

870
00:41:52,200 --> 00:41:52,700
different things.

871
00:41:52,700 --> 00:41:55,400
We just have one and we go from there.

872
00:41:55,400 --> 00:41:58,800
So let's say we have a loaded bitmap and we were to introduce the

873
00:41:58,800 --> 00:41:59,600
pitch to that

874
00:42:00,400 --> 00:42:04,800
Right and and you know, maybe loaded bitmap isn't the greatest term,

875
00:42:04,800 --> 00:42:07,400
maybe just bitmap would be a better term for it, right?

876
00:42:08,000 --> 00:42:10,200
Or something like that, but either way.

877
00:42:11,200 --> 00:42:13,200
So let's say introduced pitch to that.

878
00:42:13,200 --> 00:42:15,900
How hard would that be for us to support?

879
00:42:15,900 --> 00:42:18,200
Because we only have one function really that uses it.

880
00:42:18,600 --> 00:42:22,500
And so if we take a look through here, we can kind of see that that

881
00:42:22,500 --> 00:42:27,700
really we don't have to care to, we don't, we don't really do much

882
00:42:28,000 --> 00:42:30,000
that has to deal with with that pitch.

883
00:42:30,400 --> 00:42:33,500
Well, we were really doing before, was sort of banking on the fact

884
00:42:33,500 --> 00:42:34,700
that we could just use the whip.

885
00:42:34,700 --> 00:42:37,900
But if we were to update things to work with the pitch, you can you

886
00:42:37,900 --> 00:42:45,000
can see us doing it right here with the, with the gain buffer.

887
00:42:45,000 --> 00:42:48,300
So we should be able to do the exact same thing with our source

888
00:42:48,300 --> 00:42:49,200
buffer, right?

889
00:42:49,200 --> 00:42:51,600
So let's just go ahead and make that modification, right?

890
00:42:51,600 --> 00:42:55,300
Let's say that we go ahead and pull stuff out of the source.

891
00:42:55,300 --> 00:42:58,200
The same way we do for the pitch, right?

892
00:42:59,200 --> 00:43:00,000
And it looks like what we're

893
00:43:00,100 --> 00:43:01,000
We're doing here.

894
00:43:01,100 --> 00:43:06,000
Is we're actually pre inverting that and because remember, our bitmaps

895
00:43:06,000 --> 00:43:08,500
were like bottom up instead of the top down.

896
00:43:10,200 --> 00:43:14,000
You know, we were kind of doing a flip in there, but that's kind of

897
00:43:14,000 --> 00:43:16,300
interesting because that means we could just bake that right into the

898
00:43:16,300 --> 00:43:16,800
pitch, right?

899
00:43:16,800 --> 00:43:20,000
So from now on, we could just say, it's whatever the bitmap pitches.

900
00:43:20,300 --> 00:43:23,800
That's what we're going to use as the offset and then that way we set

901
00:43:23,800 --> 00:43:25,900
it to flipped, or we don't set to flip, it doesn't matter which one it

902
00:43:25,900 --> 00:43:26,100
is.

903
00:43:26,100 --> 00:43:27,600
So, whichever way we loaded it in.

904
00:43:27,600 --> 00:43:30,000
We could still the blind would now work.

905
00:43:30,200 --> 00:43:34,700
I would do the right thing by reading that that pitch out, right?

906
00:43:35,600 --> 00:43:39,600
And so, you know, if I basically turn this equation, you know, this

907
00:43:39,600 --> 00:43:44,200
Destro thing, if I basically do, the Destro thing exactly the same way

908
00:43:44,200 --> 00:43:48,100
for the source row, and it's weird that we have two of these here.

909
00:43:48,300 --> 00:43:51,500
Weird that we do a plus equals a - I mean this is what we're doing,

910
00:43:51,800 --> 00:43:52,300
right?

911
00:43:53,500 --> 00:43:58,200
So let's do that, that that whole thing together and in fact I guess

912
00:43:58,200 --> 00:44:00,000
we are Source row

913
00:44:00,300 --> 00:44:02,900
Is actually supposed to be un dates here, right?

914
00:44:02,900 --> 00:44:04,300
Because we're just like Destro.

915
00:44:04,800 --> 00:44:07,300
So if we do our sorcerer that way we say alright we've got the bitmap

916
00:44:07,300 --> 00:44:10,100
pixels, we want to add the pitch.

917
00:44:12,200 --> 00:44:16,000
You know, with the the height minus one and I guess we don't really

918
00:44:16,000 --> 00:44:20,800
need to do that part either because we could bake that into the pixels

919
00:44:20,800 --> 00:44:21,900
pointer as well.

920
00:44:23,000 --> 00:44:26,100
So that may be what we want to do there too.

921
00:44:27,100 --> 00:44:31,200
So maybe we maybe we get rid of that as well, right?

922
00:44:31,200 --> 00:44:33,900
Let me just put that up there for now, temporarily.

923
00:44:34,700 --> 00:44:37,700
So really all we need to do is this, right?

924
00:44:37,800 --> 00:44:41,200
We just need to say, all right, we need to move.

925
00:44:41,400 --> 00:44:46,800
Move by our Tsar Source offset, why we need to move by that in the

926
00:44:46,800 --> 00:44:51,700
pitch pitch base, right and we need to move by that Source offset X.

927
00:44:51,700 --> 00:44:55,300
So this is just pre stepping us to where we need to grab out of this

928
00:44:55,300 --> 00:44:56,700
bitmap, right?

929
00:44:57,900 --> 00:44:59,800
And I guess by

930
00:45:00,000 --> 00:45:04,900
Per pixel interestingly is is not specified in our bitmap.

931
00:45:04,900 --> 00:45:06,800
We kind of know that it's always for.

932
00:45:07,400 --> 00:45:10,700
So I don't know that I really want to introduce that into this

933
00:45:10,700 --> 00:45:11,800
specifically.

934
00:45:11,900 --> 00:45:16,100
So I might just say that there's a bytes per pixel equals four on here

935
00:45:16,800 --> 00:45:19,100
for now, because we're not really going to allow multiple bytes for

936
00:45:19,100 --> 00:45:20,400
Pixel in our bitmaps.

937
00:45:20,400 --> 00:45:21,700
They always have to be 4.

938
00:45:22,300 --> 00:45:24,200
So I'm just going to say it's got to be for.

939
00:45:24,700 --> 00:45:26,700
So basically it's that.

940
00:45:26,700 --> 00:45:29,900
So you can see this is the exact same pretty stepping.

941
00:45:30,000 --> 00:45:32,800
Basically that we're doing nothing particularly fancy there.

942
00:45:33,900 --> 00:45:36,000
All right, so if I were to do that, right?

943
00:45:36,000 --> 00:45:39,800
And now I can Pilot We compile but of course we totally wouldn't work

944
00:45:40,000 --> 00:45:44,900
because our loading are loaded bitmap called doesn't actually set any

945
00:45:44,900 --> 00:45:45,500
of that up at.

946
00:45:45,500 --> 00:45:46,600
All right.

947
00:45:47,600 --> 00:45:52,300
So what we want to do here is at the end we want to set this stuff up

948
00:45:52,400 --> 00:45:55,400
so we've got a pitch we need to set it and then we need to set the

949
00:45:55,400 --> 00:45:58,900
pixels pointer properly right and the pixels pointer.

950
00:45:58,900 --> 00:46:02,800
I'm going to set to avoid now is to make sure that we don't do any

951
00:46:03,200 --> 00:46:03,600
funny business.

952
00:46:03,800 --> 00:46:05,400
The stair with it, right?

953
00:46:06,500 --> 00:46:10,700
So all right, so the pitch is always just going to be the width

954
00:46:12,100 --> 00:46:13,800
X the bytes per pixel.

955
00:46:15,400 --> 00:46:18,400
And, you know, we could actually put the b or pixel in here, but I

956
00:46:18,400 --> 00:46:19,700
really just don't want to do that.

957
00:46:20,400 --> 00:46:23,300
So I guess what we have to what we might want to do is just have a

958
00:46:23,300 --> 00:46:24,600
global defined for that.

959
00:46:24,900 --> 00:46:28,700
Like something like loaded bitmap, bytes per pixel.

960
00:46:30,200 --> 00:46:32,200
Something like that, you know I'm saying.

961
00:46:33,400 --> 00:46:36,900
And so that we just kind of go ahead and grab that any time we need it

962
00:46:37,400 --> 00:46:40,400
because I just don't think that that's a useful thing to parameterize

963
00:46:40,400 --> 00:46:41,300
in the bitmap.

964
00:46:41,300 --> 00:46:42,500
I'd rather have the compiler.

965
00:46:42,500 --> 00:46:43,900
Be able to see that.

966
00:46:43,900 --> 00:46:46,600
It's just a constant value that doesn't have to worry about

967
00:46:49,100 --> 00:46:52,400
I feel like we did Source row needs to be changed based on clipping,

968
00:46:52,600 --> 00:46:55,300
like that's a stale to do anyway.

969
00:46:55,900 --> 00:46:57,200
So yeah, so we go ahead and do that.

970
00:46:57,200 --> 00:46:59,100
Let's go down here.

971
00:46:59,500 --> 00:47:04,200
So the pitch is right there, there it is.

972
00:47:05,100 --> 00:47:08,200
And what is a result is not a pointer.

973
00:47:08,200 --> 00:47:09,700
So there's there's that.

974
00:47:11,300 --> 00:47:12,800
So yeah, so it's just the width times.

975
00:47:12,800 --> 00:47:14,800
However, many bytes per pixel, they are that's the pitch.

976
00:47:14,800 --> 00:47:16,700
But like I said, we want to go backwards.

977
00:47:16,700 --> 00:47:17,200
So we're going to make

978
00:47:17,400 --> 00:47:22,900
- and then we want our pixels pointer to actually be synthetically set

979
00:47:23,200 --> 00:47:25,800
to that top row just like we're doing before.

980
00:47:25,800 --> 00:47:31,100
So that's again just this where we have that pitch, we want to take

981
00:47:31,400 --> 00:47:35,300
what our old pixel pointer was that we were using before and we want

982
00:47:35,300 --> 00:47:39,900
to back that up so that it's basically at the that that first row.

983
00:47:40,600 --> 00:47:43,100
So I think that's the stuff that we would need to do for that.

984
00:47:43,300 --> 00:47:44,200
Let's take a look.

985
00:47:44,700 --> 00:47:47,000
Of course, we will crash immediately because I typed

986
00:47:47,300 --> 00:47:48,900
something wrong.

987
00:47:49,900 --> 00:47:50,700
Hold on a second.

988
00:47:51,400 --> 00:47:53,300
Let's take a look.

989
00:47:56,100 --> 00:47:57,800
So let's see, we got the pitch, correct?

990
00:47:57,800 --> 00:47:59,800
Its - 10.

991
00:48:00,000 --> 00:48:05,200
Are there we are properly.

992
00:48:05,300 --> 00:48:06,100
This is not.

993
00:48:06,100 --> 00:48:06,400
Okay.

994
00:48:06,400 --> 00:48:07,700
So we've got first of all.

995
00:48:07,700 --> 00:48:08,300
Hold on a second.

996
00:48:08,300 --> 00:48:09,100
We've got one more thing.

997
00:48:09,100 --> 00:48:12,000
We need to adjust their is now that we've changed our pointer sighs.

998
00:48:12,400 --> 00:48:12,900
Right?

999
00:48:14,700 --> 00:48:19,800
We would like to be able to, we need to be able to step our stuff.

1000
00:48:20,200 --> 00:48:21,300
Oh wait, no, that's not.

1001
00:48:21,300 --> 00:48:22,100
That's not true.

1002
00:48:22,100 --> 00:48:23,900
These are casted to you and 32s.

1003
00:48:24,000 --> 00:48:27,200
So these are still stepping a full pixel at a time so that's totally

1004
00:48:27,200 --> 00:48:27,600
fine.

1005
00:48:28,100 --> 00:48:29,300
That's not a problem at all.

1006
00:48:29,600 --> 00:48:29,700
So,

1007
00:48:30,000 --> 00:48:31,000
That's all good.

1008
00:48:31,000 --> 00:48:31,400
Nothing.

1009
00:48:31,400 --> 00:48:32,400
Weird going on there.

1010
00:48:32,700 --> 00:48:34,900
And yeah.

1011
00:48:34,900 --> 00:48:35,400
Okay.

1012
00:48:36,000 --> 00:48:36,300
All right.

1013
00:48:36,300 --> 00:48:36,900
So that's fine.

1014
00:48:37,400 --> 00:48:40,800
So let's go ahead and step through and see what the whatever it was

1015
00:48:40,800 --> 00:48:41,400
that I introduced.

1016
00:48:41,400 --> 00:48:43,100
That was incorrect.

1017
00:48:43,400 --> 00:48:44,100
So

1018
00:48:46,400 --> 00:48:48,900
Oh yeah, it's this right here.

1019
00:48:50,000 --> 00:48:53,400
So, the pitch being - moves us back a row.

1020
00:48:53,400 --> 00:48:58,200
But we needed to move forward rows because this is actually going the

1021
00:48:58,200 --> 00:49:00,000
other direction, right?

1022
00:49:00,100 --> 00:49:05,500
So that's actually stepping us back based on the direction that the

1023
00:49:05,500 --> 00:49:06,900
pitch is going now.

1024
00:49:07,500 --> 00:49:08,400
So that was dumb.

1025
00:49:09,100 --> 00:49:10,600
Alright, so that was our only problem.

1026
00:49:10,600 --> 00:49:12,600
So, we're in good, we're in good shape now.

1027
00:49:13,200 --> 00:49:16,500
And so now really like, you can see what I've done here is just made

1028
00:49:16,500 --> 00:49:19,700
it so that it doesn't actually matter for drawbitmap.

1029
00:49:20,100 --> 00:49:22,300
What's actually getting passed to it?

1030
00:49:22,300 --> 00:49:27,400
Could be an off-screen buffer or it could be another bitmap so I could

1031
00:49:27,400 --> 00:49:30,700
do loaded bitmap buffer now, right?

1032
00:49:30,700 --> 00:49:31,900
And then oops.

1033
00:49:31,900 --> 00:49:37,200
And then in here when we do memory, what I can do is just change This

1034
00:49:37,200 --> 00:49:41,100
to Memory and now everything lines up properly.

1035
00:49:41,100 --> 00:49:42,200
They're exactly the same.

1036
00:49:42,900 --> 00:49:47,400
So let's let's do pixels to memory anybody else.

1037
00:49:50,300 --> 00:49:52,500
What is that complaining about bytes per pixel?

1038
00:49:52,800 --> 00:49:56,900
Yeah, so this is just going to be this again and I don't remember why

1039
00:49:56,900 --> 00:50:00,000
we even have that in here.

1040
00:50:00,700 --> 00:50:05,300
So I'm going to go ahead and say you know, can we just remove this

1041
00:50:05,300 --> 00:50:06,100
entirely?

1042
00:50:06,700 --> 00:50:09,900
Because it says right here, pixels are always 32 bits wide.

1043
00:50:10,500 --> 00:50:14,100
So I'm just going to maybe just say that that has to go away, right?

1044
00:50:15,600 --> 00:50:18,700
And and we could we could put this in here as well, right?

1045
00:50:20,600 --> 00:50:24,000
Something like this because we really don't ever allow that to very

1046
00:50:25,100 --> 00:50:27,500
and so we should just we should just say that goes away.

1047
00:50:28,300 --> 00:50:30,300
So that's that's that.

1048
00:50:34,500 --> 00:50:34,900
Here we go.

1049
00:50:35,100 --> 00:50:37,300
Let's put that in here.

1050
00:50:37,500 --> 00:50:38,900
Get that by two pixel.

1051
00:50:39,700 --> 00:50:41,100
Get that bite the pixels.

1052
00:50:41,100 --> 00:50:47,000
I'm like that pixels memory now.

1053
00:50:48,200 --> 00:50:51,900
Right bitmap B pixel and I'll throw that in there.

1054
00:50:52,700 --> 00:50:54,500
Get Matt bytes per pixel.

1055
00:50:55,800 --> 00:50:58,400
Keep on going pixels.

1056
00:50:58,400 --> 00:50:59,800
- result pitch pixels is

1057
00:51:00,000 --> 00:51:02,500
Remember, that's true memory.

1058
00:51:02,500 --> 00:51:02,900
Now

1059
00:51:06,800 --> 00:51:10,700
And should be almost done draw a bitmap, right?

1060
00:51:11,200 --> 00:51:16,300
So now, when we call drawbitmap, right, what we can do is we can just

1061
00:51:16,300 --> 00:51:21,300
say, okay, everything now takes sort of one of these loaded bitmap

1062
00:51:21,300 --> 00:51:26,500
things and when we pass it buffer, instead of that buffer that we were

1063
00:51:26,500 --> 00:51:28,700
getting before, right?

1064
00:51:29,300 --> 00:51:31,200
We're we're calling it here.

1065
00:51:31,400 --> 00:51:34,800
What I'm going to do is say that, that buffer is a

1066
00:51:35,000 --> 00:51:39,100
She going to be all name it, something else, let's say, draw buffer or

1067
00:51:39,100 --> 00:51:39,800
something like that.

1068
00:51:39,800 --> 00:51:45,400
Draw, buffer, like so drop by for a job offer draw, buffer drop off a

1069
00:51:45,400 --> 00:51:47,500
draw buffer like that.

1070
00:51:49,400 --> 00:51:49,900
And

1071
00:51:52,200 --> 00:51:57,600
Then I'm going to say loaded bitmap draw buffer and I want to make it

1072
00:51:57,600 --> 00:52:00,000
a pointer so I don't have to make all these be Anne's.

1073
00:52:00,600 --> 00:52:04,100
So I'm just going to make a little synthetic one here, 2.2, like so

1074
00:52:05,200 --> 00:52:09,800
like that again, this is just I don't feel like making these be Anne's

1075
00:52:09,800 --> 00:52:11,500
vert, you know, have to have Ann's in front of all time.

1076
00:52:11,500 --> 00:52:14,700
So I want it to be a pointer but what I can do here is now just

1077
00:52:14,700 --> 00:52:20,100
initialize this to be whatever the stuff was that we were getting sent

1078
00:52:20,400 --> 00:52:21,300
from the 0s.

1079
00:52:21,900 --> 00:52:24,600
It pitch memory.

1080
00:52:26,400 --> 00:52:29,500
They're all just exactly the same and we could even collapse these

1081
00:52:29,500 --> 00:52:30,200
even further.

1082
00:52:30,200 --> 00:52:40,500
Now if we really wanted to oops, so draw rectangle, same thing that

1083
00:52:40,500 --> 00:52:44,100
can just be a loaded bitmap now and you know the name loaded bitmap

1084
00:52:44,100 --> 00:52:45,100
doesn't really make a lot of sense.

1085
00:52:45,100 --> 00:52:48,600
That might be something we want to change the future, bytes per pixel

1086
00:52:48,600 --> 00:52:50,200
is now not a thing.

1087
00:52:51,800 --> 00:52:55,900
And so off we go, here's our games to the rendering properly, and so

1088
00:52:55,900 --> 00:53:00,300
now if we do want to catch something, we've set ourselves up to do

1089
00:53:00,300 --> 00:53:00,800
that.

1090
00:53:00,900 --> 00:53:03,500
So, for example, I mean, you can see how slow this is running right

1091
00:53:03,500 --> 00:53:04,000
now, right?

1092
00:53:04,000 --> 00:53:06,600
Look at that frame rates just chugging along and all of that sin, that

1093
00:53:06,600 --> 00:53:07,900
stamping really.

1094
00:53:08,700 --> 00:53:13,900
So now if we wanted to cash that when we drew draw test ground, right?

1095
00:53:13,900 --> 00:53:16,600
When we actually do that, that draw test G function.

1096
00:53:17,300 --> 00:53:20,400
If instead we just did that an IT time, right?

1097
00:53:20,400 --> 00:53:21,400
We could do that at an it.

1098
00:53:21,600 --> 00:53:25,500
Now, if we wanted to, so when we do this, we could say draw test

1099
00:53:25,500 --> 00:53:31,600
ground and we can draw that into some kind of a buffer just to give

1100
00:53:31,600 --> 00:53:32,400
you an example there.

1101
00:53:32,400 --> 00:53:37,600
Let's say we do game State ground buffer like this.

1102
00:53:38,000 --> 00:53:39,500
We're kind of running out of time here.

1103
00:53:39,500 --> 00:53:42,100
Maybe we'll go just a few minutes over.

1104
00:53:42,200 --> 00:53:44,000
Think we have two or three minutes on the clock.

1105
00:53:44,000 --> 00:53:49,000
Spare, I didn't start right on time, but if I come in here to game

1106
00:53:49,000 --> 00:53:51,400
State, and I say, all right, we've got a loaded.

1107
00:53:51,500 --> 00:53:52,100
Bitmap.

1108
00:53:52,100 --> 00:53:53,600
That's just the ground buffer.

1109
00:53:53,900 --> 00:53:54,700
You know I'm saying?

1110
00:53:55,500 --> 00:53:57,100
And so let's go ahead and do that.

1111
00:53:57,100 --> 00:53:59,500
Then all I would need to do is my this

1112
00:54:00,000 --> 00:54:05,300
For thing would just have to be like make you know empty buffer or

1113
00:54:05,300 --> 00:54:09,200
something like this or make empty bitmap and I just want to make it

1114
00:54:09,200 --> 00:54:09,900
empty bitmap.

1115
00:54:09,900 --> 00:54:13,200
That's some size of something who cares.

1116
00:54:13,200 --> 00:54:17,600
It's 1024 by 1024, I don't even care at all and we just need a place

1117
00:54:17,900 --> 00:54:18,900
to get that from.

1118
00:54:19,700 --> 00:54:21,700
And so that can come out of.

1119
00:54:22,100 --> 00:54:24,000
We haven't really talked still about.

1120
00:54:24,100 --> 00:54:28,800
We still have kind of a big old standing to do for World Arenas here.

1121
00:54:28,800 --> 00:54:29,800
So you know,

1122
00:54:30,000 --> 00:54:35,300
It's it be nice if we at some point actually started to get these

1123
00:54:35,300 --> 00:54:37,100
Arenas into into more shape.

1124
00:54:37,200 --> 00:54:38,300
Something we have to do pretty soon.

1125
00:54:38,300 --> 00:54:44,700
But anyway, if I wanted to I can go ahead and and still use that that

1126
00:54:44,700 --> 00:54:47,500
game arena for this and say

1127
00:54:50,100 --> 00:54:50,900
Let's see here.

1128
00:54:52,400 --> 00:54:57,300
Say, go ahead and use this Arena, get me one of those and and and give

1129
00:54:57,300 --> 00:54:59,300
it back and then we can draw it into that ground buffer.

1130
00:54:59,300 --> 00:55:05,000
And then when we come down here I'll just re-enable this call so that

1131
00:55:05,000 --> 00:55:08,500
we're basically on top of it, we're going to draw that that ground

1132
00:55:08,500 --> 00:55:13,100
buffer and we'll draw it at, I guess, 004, now now, I mean, we don't

1133
00:55:13,100 --> 00:55:13,600
really know.

1134
00:55:13,700 --> 00:55:14,700
I guess we would draw it.

1135
00:55:14,700 --> 00:55:19,100
It something, you know, an offset that was proportional to the

1136
00:55:19,100 --> 00:55:20,000
difference between height.

1137
00:55:20,000 --> 00:55:22,100
So I could even do this to do case we draw,

1138
00:55:22,700 --> 00:55:29,300
This that Center but that's basically all we would need to do, right?

1139
00:55:29,400 --> 00:55:31,200
So here we go, let's do that.

1140
00:55:31,200 --> 00:55:34,200
Let's make this make empty bitmap, that's going to return a loaded

1141
00:55:34,200 --> 00:55:36,300
bitmap struct.

1142
00:55:36,400 --> 00:55:39,500
That has the information about the bitmap that was created.

1143
00:55:39,800 --> 00:55:44,200
We've got our Arena here that we want it to allocate from.

1144
00:55:44,700 --> 00:55:46,700
We've got the width and the height.

1145
00:55:47,200 --> 00:55:51,800
So there's the width and the height of that buffer.

1146
00:55:52,200 --> 00:55:56,200
1024 by 1024, it may have been a little bit large that may have been a

1147
00:55:56,200 --> 00:55:56,900
mistake.

1148
00:55:57,600 --> 00:56:00,600
So maybe we want that to be like 512 by 512 for now.

1149
00:56:01,000 --> 00:56:04,600
So we'll just take a look at that and we'll go back to make empty

1150
00:56:04,600 --> 00:56:08,900
bitmap, their make empty bitmap and implement it.

1151
00:56:08,900 --> 00:56:10,900
Now, the question is, can I implement it in 2 minutes?

1152
00:56:10,900 --> 00:56:13,800
Which I think is are three minutes which we had left, it seems

1153
00:56:13,800 --> 00:56:15,400
plausible, you never know.

1154
00:56:15,900 --> 00:56:17,300
So here's that result.

1155
00:56:18,600 --> 00:56:20,600
The result has a width of width.

1156
00:56:20,600 --> 00:56:22,400
It has a height of height.

1157
00:56:22,500 --> 00:56:27,500
It has a pitch of whatever.

1158
00:56:28,700 --> 00:56:32,900
The pitch is times, the bitmap bytes per pixel, right?

1159
00:56:33,900 --> 00:56:36,600
And then it has memory

1160
00:56:38,600 --> 00:56:42,400
That is going to be 0.

1161
00:56:42,400 --> 00:56:42,800
And you know what?

1162
00:56:42,800 --> 00:56:45,100
Us realized we can even use this call.

1163
00:56:46,400 --> 00:56:48,300
Now, think about it, to clear it.

1164
00:56:49,000 --> 00:56:52,000
So we don't have to clear it ourselves, which is pretty funny.

1165
00:56:53,500 --> 00:56:55,700
I don't know if we really needed that we could just do we have a zero

1166
00:56:55,700 --> 00:56:57,800
size call we do.

1167
00:56:57,900 --> 00:56:59,800
So we really only need that zero size call.

1168
00:57:00,000 --> 00:57:00,600
Never mind.

1169
00:57:01,100 --> 00:57:03,100
So we do have a 0 / call.

1170
00:57:03,100 --> 00:57:05,000
So we just want to zero that memory out.

1171
00:57:05,600 --> 00:57:09,700
So we'll just say total bitmap size.

1172
00:57:10,400 --> 00:57:16,400
And this will be an arena push where we're basically saying, we want

1173
00:57:16,400 --> 00:57:16,700
to push.

1174
00:57:16,700 --> 00:57:17,200
Well, you know what?

1175
00:57:17,200 --> 00:57:18,600
This is just a direct push size.

1176
00:57:18,900 --> 00:57:21,300
Like, so that's all that is.

1177
00:57:21,600 --> 00:57:27,200
So we're going to say take the arena that we were past due, the total

1178
00:57:27,200 --> 00:57:29,900
bitmap size and of course, we know what the total bitmap.

1179
00:57:30,000 --> 00:57:35,400
Is is the total bitmap size is just the width times.

1180
00:57:35,400 --> 00:57:38,000
The height times, the bitmap bytes per pixel, right?

1181
00:57:38,000 --> 00:57:40,000
And we could use the pitch for that if you wanted to.

1182
00:57:40,000 --> 00:57:42,800
But you know, if we set the pitch to - or something that wouldn't

1183
00:57:42,800 --> 00:57:46,400
work, so that makes an empty bitmap that we can draw into.

1184
00:57:46,400 --> 00:57:48,600
It's basically doing the same thing that we did way back at the

1185
00:57:48,600 --> 00:57:49,600
beginning of the series.

1186
00:57:51,100 --> 00:57:51,500
Oops.

1187
00:57:51,600 --> 00:57:52,400
What did I do wrong?

1188
00:57:52,400 --> 00:57:53,400
That should return.

1189
00:57:53,400 --> 00:57:54,400
That was right, wasn't it?

1190
00:57:54,600 --> 00:57:56,000
Yeah, I know what's going on there.

1191
00:57:58,200 --> 00:57:59,300
All right, so let's see.

1192
00:58:00,300 --> 00:58:02,100
Okay, so we ran out of space.

1193
00:58:05,400 --> 00:58:06,400
In our memory Rina.

1194
00:58:06,400 --> 00:58:08,800
Oh why is that so huge though?

1195
00:58:08,800 --> 00:58:10,300
Did I compute that wrong?

1196
00:58:11,200 --> 00:58:12,800
Width times height.

1197
00:58:12,900 --> 00:58:14,700
Whoa what?

1198
00:58:15,200 --> 00:58:16,400
What did I type in?

1199
00:58:16,900 --> 00:58:22,800
Ah Ah that's that's too large.

1200
00:58:24,400 --> 00:58:25,700
That's too large.

1201
00:58:26,900 --> 00:58:29,500
All right, so not quite there yet.

1202
00:58:29,500 --> 00:58:33,000
I don't see our bitmap which is not a good sign.

1203
00:58:33,800 --> 00:58:35,000
It was supposed to work.

1204
00:58:35,300 --> 00:58:36,300
It didn't work.

1205
00:58:36,400 --> 00:58:39,600
Let's take a quick look and see if we can find it.

1206
00:58:39,800 --> 00:58:43,700
So, we're drawing our bitmap now into that into that buffer.

1207
00:58:45,900 --> 00:58:52,400
And and we are hoping that it works properly ground buffer.

1208
00:58:54,200 --> 00:58:54,600
Yeah.

1209
00:58:54,600 --> 00:58:57,600
Like so and then we act we are actually drawing it.

1210
00:58:57,600 --> 00:59:04,600
Yes, in here at 0 0 and I don't know, I don't know if I will have to

1211
00:59:04,600 --> 00:59:07,300
delay debugging this because who knows?

1212
00:59:07,300 --> 00:59:10,600
I don't know how complicated the bug might be.

1213
00:59:11,300 --> 00:59:12,700
I don't want to go too far over time.

1214
00:59:12,700 --> 00:59:14,500
I'd like to make sure we have time for questions.

1215
00:59:16,300 --> 00:59:25,400
But yeah, I think feel like that should have been sufficient unless

1216
00:59:25,400 --> 00:59:29,400
I'm missing something, we are definitely drawing into.

1217
00:59:31,100 --> 00:59:34,900
We are not like woefully drawing at drawing outside the boundaries of

1218
00:59:34,900 --> 00:59:41,000
this guy and we know that because oh well you know what it could be it

1219
00:59:41,000 --> 00:59:44,200
could be that that we don't have a big enough bitmap to cover where

1220
00:59:44,200 --> 00:59:44,200
the

1221
00:59:44,600 --> 00:59:47,400
Actually was or something like that, but I don't think that's true

1222
00:59:47,400 --> 00:59:48,700
because it uses the center.

1223
00:59:49,400 --> 00:59:53,700
Does it not of the actual yet he uses the center of the actual

1224
00:59:56,200 --> 00:59:59,800
of the actual screen there, I thought M to pick

1225
01:00:00,000 --> 01:00:04,600
Some rest, Max bitmap Center and whereas bitmap Center bitmap Center

1226
01:00:04,600 --> 01:00:05,200
is defined here.

1227
01:00:05,200 --> 01:00:10,700
In fact we could pull that out to their fitness center so on, oh wait.

1228
01:00:10,700 --> 01:00:12,900
No that's the never mind, that's not the buffer Center.

1229
01:00:12,900 --> 01:00:14,100
That's this is the screen center.

1230
01:00:14,100 --> 01:00:17,500
So there's that screen center that it's using, so that seems like that

1231
01:00:17,500 --> 01:00:19,900
should put everything at the center of the bitmap nicely.

1232
01:00:20,500 --> 01:00:22,600
So I'm not sure why we weren't getting anything there.

1233
01:00:23,300 --> 01:00:26,700
It would be nice to see why that.

1234
01:00:27,100 --> 01:00:27,700
Oh,

1235
01:00:30,100 --> 01:00:31,100
I know why.

1236
01:00:32,300 --> 01:00:33,300
It's right here.

1237
01:00:33,300 --> 01:00:37,900
People, we're never setting the alpha channel, right?

1238
01:00:38,300 --> 01:00:39,400
We're noticing the alpha Channel.

1239
01:00:39,400 --> 01:00:44,900
We've got to set the alpha channel of our of our composited bitmap.

1240
01:00:45,000 --> 01:00:47,800
Otherwise, it'll just think that, you know, it's basically marked as

1241
01:00:47,800 --> 01:00:49,900
not not being there, right?

1242
01:00:50,600 --> 01:00:51,300
So there it is.

1243
01:00:51,900 --> 01:00:54,000
And now you can kind of see like,

1244
01:00:56,600 --> 01:00:59,300
You can kind of see that that we got the acceleration, kind of that,

1245
01:00:59,300 --> 01:01:01,600
we were expecting their, it looks like that.

1246
01:01:01,600 --> 01:01:05,400
We've still got some kind of bug there, you can see down in the

1247
01:01:05,400 --> 01:01:07,800
corner, like that should not be a notch.

1248
01:01:07,900 --> 01:01:09,700
I would think so.

1249
01:01:09,700 --> 01:01:12,900
We kind of have we've got we got something, although you know what,

1250
01:01:12,900 --> 01:01:16,200
that probably is that's just because nothing ever touched there.

1251
01:01:16,200 --> 01:01:17,700
So that's till Alpha 0.

1252
01:01:18,700 --> 01:01:20,300
So we probably want to do here though.

1253
01:01:20,300 --> 01:01:25,000
Still is just go ahead and fix the fact that we, you know, instead of

1254
01:01:25,000 --> 01:01:26,200
always having that Alpha

1255
01:01:27,000 --> 01:01:30,900
What we might want to do is is right, the alpha actually into the

1256
01:01:30,900 --> 01:01:31,400
buffer.

1257
01:01:31,700 --> 01:01:35,100
Of course, the problem with that is we actually need to think about

1258
01:01:35,100 --> 01:01:38,100
what the a value actually should be, right?

1259
01:01:38,100 --> 01:01:43,800
Like, what is the alpha that you actually would write in there and and

1260
01:01:43,800 --> 01:01:47,400
that's probably a topic better left for a different day.

1261
01:01:47,800 --> 01:01:53,900
So let's, let's, let's do that tomorrow to do Casey compute the right

1262
01:01:54,400 --> 01:01:56,400
Alpha here, just left a bar.

1263
01:01:56,600 --> 01:01:57,700
Pretty multiplied Alpha.

1264
01:01:58,300 --> 01:02:01,800
But when we do compute the right Alpha here, that'll go there and then

1265
01:02:01,800 --> 01:02:06,900
we can go ahead and actually do this for reals, where we do something

1266
01:02:06,900 --> 01:02:09,400
like that, and write an alpha Channel out.

1267
01:02:09,400 --> 01:02:12,800
So, for now, what I'll do is, I'll just say, okay, we'll just take the

1268
01:02:12,800 --> 01:02:16,100
alpha of whatever the thing is that we're writing, you know, just the

1269
01:02:16,100 --> 01:02:20,100
actual Alpha Channel itself but that's not correct.

1270
01:02:20,100 --> 01:02:22,900
And so maybe tomorrow, we will do that.

1271
01:02:23,500 --> 01:02:26,400
So this should be s.

1272
01:02:26,500 --> 01:02:27,700
Is a right?

1273
01:02:28,900 --> 01:02:34,600
Not a sa so that should be sa everywhere.

1274
01:02:35,800 --> 01:02:36,300
That.

1275
01:02:37,000 --> 01:02:37,500
All right.

1276
01:02:38,600 --> 01:02:40,000
So I think that's about it.

1277
01:02:41,400 --> 01:02:42,000
That didn't work.

1278
01:02:42,300 --> 01:02:43,400
What'd I do wrong there.

1279
01:02:47,100 --> 01:02:49,500
What did I do wrong there?

1280
01:02:50,200 --> 01:02:54,100
You did sa we grab sa take C Alpha.

1281
01:02:54,100 --> 01:02:55,100
We did all that.

1282
01:02:55,300 --> 01:02:58,000
We grab the a equals sa.

1283
01:02:58,000 --> 01:02:59,800
We do the blending based on.

1284
01:03:00,000 --> 01:03:05,600
- sa + sa, then we write in whatever the source Alpha was.

1285
01:03:10,000 --> 01:03:12,100
You went through to a plus 0.5.

1286
01:03:12,100 --> 01:03:14,800
We cast it back down, we shift it up, 24.

1287
01:03:14,800 --> 01:03:16,300
That should have been fine.

1288
01:03:16,300 --> 01:03:16,600
Right.

1289
01:03:16,600 --> 01:03:19,900
Let's let's just double-check 1.00.

1290
01:03:19,900 --> 01:03:20,400
It's 250.

1291
01:03:20,400 --> 01:03:22,300
5.0 ah-huh.

1292
01:03:23,600 --> 01:03:25,100
This is actually yeah.

1293
01:03:25,100 --> 01:03:29,300
So we at would actually would have to multiply it by 255 because we

1294
01:03:29,300 --> 01:03:32,800
converted the alpha to be 0 to 1 because we want to do the blending,

1295
01:03:32,800 --> 01:03:33,100
right?

1296
01:03:33,100 --> 01:03:34,300
We wanted to duel Earp's.

1297
01:03:34,500 --> 01:03:35,300
All through here.

1298
01:03:36,300 --> 01:03:36,800
So yeah.

1299
01:03:37,100 --> 01:03:41,300
Yeah, we deserved that so you can kind of see if I put the alpha in

1300
01:03:41,300 --> 01:03:46,900
there then you can see if I just use whatever the source Alpha is I

1301
01:03:46,900 --> 01:03:49,300
get whatever bitmap got stamped down.

1302
01:03:49,300 --> 01:03:52,700
Last is the one that is the one that shows through.

1303
01:03:52,700 --> 01:03:56,000
I mean, I could do something a little cheesy but I could do something

1304
01:03:56,000 --> 01:03:59,600
where we just take, whatever the maximum one is, right?

1305
01:03:59,600 --> 01:04:04,400
We could say, oh, you know, the destination Alpha whatever was in

1306
01:04:04,400 --> 01:04:05,400
that, you know, the

1307
01:04:06,000 --> 01:04:06,800
Target buffer.

1308
01:04:07,000 --> 01:04:11,200
Originally, we could do something where we basically say, like, you

1309
01:04:11,200 --> 01:04:15,300
know, whatever the maximum value is out of these two.

1310
01:04:15,600 --> 01:04:17,000
That's the one that will take.

1311
01:04:18,200 --> 01:04:20,700
But again, we should we should really go through it and do it more

1312
01:04:20,700 --> 01:04:21,300
correctly.

1313
01:04:21,400 --> 01:04:23,600
So you can kind of, see it starting to get a little more correct now,

1314
01:04:23,600 --> 01:04:25,100
but still not quite, right?

1315
01:04:26,100 --> 01:04:26,400
Yeah.

1316
01:04:26,400 --> 01:04:27,000
And there you go.

1317
01:04:27,700 --> 01:04:30,500
So that's, you know, that's just the, the beginnings of how we might

1318
01:04:30,500 --> 01:04:31,000
cash that.

1319
01:04:31,000 --> 01:04:33,900
And now, our frame rate is back up to normal, which is nice, even

1320
01:04:33,900 --> 01:04:35,900
though we're doing all those things because we only did the

1321
01:04:36,000 --> 01:04:38,600
Them once and now we're just reproducing them and you can kind of see.

1322
01:04:38,600 --> 01:04:41,000
I did that I didn't really do anything, you know, ignoring this, which

1323
01:04:41,000 --> 01:04:42,400
of course, like I said, we ran out of time.

1324
01:04:42,400 --> 01:04:44,000
We could cover how we actually want you.

1325
01:04:44,000 --> 01:04:45,100
That destination Alpha.

1326
01:04:46,400 --> 01:04:48,700
So ignoring that temporarily and well, maybe that's what we'll do

1327
01:04:48,700 --> 01:04:49,100
tomorrow is.

1328
01:04:49,100 --> 01:04:53,200
We'll talk about that a little bit more completely ignoring that for

1329
01:04:53,200 --> 01:04:55,200
now you can see how simple it was from you do this.

1330
01:04:55,300 --> 01:04:57,700
Basically, all I need to do is collapse those two things down.

1331
01:04:57,700 --> 01:05:01,200
So that the thing that we read from and the thing that we write to are

1332
01:05:01,200 --> 01:05:04,500
handled symmetrically and that's a pretty important thing to get,

1333
01:05:04,500 --> 01:05:04,700
right?

1334
01:05:04,700 --> 01:05:09,100
If you know if you can you want to be able to draw into stuff that you

1335
01:05:09,100 --> 01:05:12,400
draw from because that's what allows you to cash, right?

1336
01:05:12,500 --> 01:05:15,800
If I have all these things that are taking lots of bitmaps collage

1337
01:05:16,000 --> 01:05:18,000
Them together to produce the ground or whatever.

1338
01:05:18,200 --> 01:05:21,000
And I want to e be able to Simply take that code.

1339
01:05:21,000 --> 01:05:24,700
That was working when it was drawing to the screen and make it so that

1340
01:05:24,700 --> 01:05:28,600
it works when I'm drawing to something that I will save and use later

1341
01:05:28,600 --> 01:05:29,900
as a composite.

1342
01:05:30,100 --> 01:05:33,300
You want all of those routines to be as symmetric as you can make them

1343
01:05:33,300 --> 01:05:36,100
so that you can always sort of switch between which of those you're

1344
01:05:36,100 --> 01:05:39,400
doing without having to make it this huge deal, right?

1345
01:05:39,900 --> 01:05:42,000
And so that's something that you know is a good thing to know.

1346
01:05:42,000 --> 01:05:44,800
So as we build our render in the future, that's something you really

1347
01:05:44,800 --> 01:05:45,500
want to do.

1348
01:05:46,100 --> 01:05:47,900
And obviously graphics card support this.

1349
01:05:47,900 --> 01:05:51,400
Now all the with render to texture is what this is, right?

1350
01:05:51,400 --> 01:05:53,700
It's like allowing you to render into something that you then used to

1351
01:05:53,700 --> 01:05:54,200
texture from.

1352
01:05:54,200 --> 01:05:55,900
That's exactly what we just did, right?

1353
01:05:57,300 --> 01:05:58,700
And you can see that was very simple to do.

1354
01:05:58,700 --> 01:05:59,800
All we have to do

1355
01:06:00,000 --> 01:06:05,200
Was make it so that we could use a loaded bitmap struct to point to be

1356
01:06:05,200 --> 01:06:06,300
a desk, or a source.

1357
01:06:06,300 --> 01:06:08,600
And because they really all need exact same information.

1358
01:06:08,600 --> 01:06:09,300
How big is it?

1359
01:06:09,400 --> 01:06:09,900
What's the pitch?

1360
01:06:09,900 --> 01:06:10,900
And where's the memory at?

1361
01:06:10,900 --> 01:06:11,900
That's all they need.

1362
01:06:12,400 --> 01:06:16,500
And so, and so off, you go, alright, so let's go ahead and go.

1363
01:06:18,200 --> 01:06:21,800
Let's go ahead and go to the Q&A, right?

1364
01:06:21,800 --> 01:06:23,300
I'm going to type in the old Q&A there.

1365
01:06:25,000 --> 01:06:29,000
And and let's let's let's take questions.

1366
01:06:29,000 --> 01:06:32,800
So please keep your questions to stuff that we have been working on

1367
01:06:32,800 --> 01:06:37,600
and also put Q: in front of the questions so that I can see.

1368
01:06:40,600 --> 01:06:42,300
What's going on over there on the Stream?

1369
01:06:48,000 --> 01:06:49,600
Did you do?

1370
01:06:59,500 --> 01:07:00,700
Okay.

1371
01:07:03,000 --> 01:07:06,200
Casey, I missed the earlier part of the feed, but what was the

1372
01:07:06,200 --> 01:07:09,500
intention of moving the ground plane with the player?

1373
01:07:13,200 --> 01:07:14,700
Can you be a little more specific about I'm sorry?

1374
01:07:14,700 --> 01:07:18,300
I'm not sure, I am not sure.

1375
01:07:21,700 --> 01:07:24,100
That I actually understand the question.

1376
01:07:25,000 --> 01:07:27,400
Can you be more specific about moving the ground plane with the

1377
01:07:27,400 --> 01:07:27,700
player?

1378
01:07:27,700 --> 01:07:31,900
Every time you disagree ethics question or a collision question,

1379
01:07:32,800 --> 01:07:36,100
elaborate a little bit more on that stegosaurus so I and then I'll and

1380
01:07:36,100 --> 01:07:36,900
I'll tackle it

1381
01:07:38,200 --> 01:07:42,000
Why aren't random unilateral and random bilateral, not just using the

1382
01:07:42,000 --> 01:07:44,900
implementation of random between seems like a pretty clear violation

1383
01:07:44,900 --> 01:07:45,500
of dry.

1384
01:07:45,500 --> 01:07:47,800
Although I realize you aren't currently intending to this code to be

1385
01:07:47,800 --> 01:07:48,900
extremely clean right now.

1386
01:07:49,400 --> 01:07:55,700
So I don't really like obviously I'm not someone who thinks that

1387
01:07:55,700 --> 01:07:59,300
there's such a thing as dry or that it should be violated or not.

1388
01:07:59,600 --> 01:08:02,600
But I can answer that specific question in the context.

1389
01:08:04,500 --> 01:08:05,700
Of good or bad code.

1390
01:08:05,700 --> 01:08:10,000
So, when you're talking about functions that are this straightforward,

1391
01:08:10,400 --> 01:08:15,900
I don't think there's a very good reason to to reorganize them that

1392
01:08:15,900 --> 01:08:17,300
way, right?

1393
01:08:17,600 --> 01:08:24,700
Because there's a very fine line between making code that uses itself,

1394
01:08:24,700 --> 01:08:28,200
which is what you're suggesting right, trying to make the maximally

1395
01:08:28,800 --> 01:08:33,000
overlapping set of functions and basically setting things up to allow

1396
01:08:33,000 --> 01:08:33,800
blaz Style

1397
01:08:34,200 --> 01:08:35,200
Asian right?

1398
01:08:36,500 --> 01:08:40,000
And by blast style upper is just, I mean, basic linear algebra system.

1399
01:08:40,000 --> 01:08:44,200
Which was the kind of this old concept, where you basically have core

1400
01:08:44,200 --> 01:08:48,100
operations are broken out, so that they can be optimized individually

1401
01:08:48,800 --> 01:08:51,899
when you go to do your performance optimization.

1402
01:08:52,700 --> 01:08:55,899
And so usually what happens when I'm coding is when I'm down at the

1403
01:08:55,899 --> 01:08:59,000
level where I know that like each of these things is going to be a

1404
01:08:59,000 --> 01:08:59,899
specific operation.

1405
01:09:00,000 --> 01:09:04,000
And that's used when they're this simple, I don't tend to collapse

1406
01:09:04,000 --> 01:09:08,300
them and the reason I do tend to collapse them is because a there's no

1407
01:09:08,300 --> 01:09:09,200
reason to collapse them.

1408
01:09:09,200 --> 01:09:13,000
Usually like if I, you know, if I want to collapse them if I thought

1409
01:09:13,000 --> 01:09:15,200
that they were going to be doing exactly the same thing, I would

1410
01:09:15,200 --> 01:09:16,100
collapse them perhaps.

1411
01:09:16,399 --> 01:09:18,000
But if they're not doing exactly the same thing.

1412
01:09:18,000 --> 01:09:21,800
Like if they're special-purpose versions of each other, that you can

1413
01:09:21,800 --> 01:09:26,399
do, I'll often leave them broken out because I'll probably want to

1414
01:09:26,399 --> 01:09:29,899
write specific code to do those later in a more

1415
01:09:30,000 --> 01:09:31,000
isn't way, right?

1416
01:09:31,000 --> 01:09:38,200
So in this example, you know, really even here, I probably would get

1417
01:09:38,200 --> 01:09:40,899
rid of this lerp eventually, I wanted to use it because like I was

1418
01:09:40,899 --> 01:09:44,300
saying, as I mentioned, when I typed it in, I wanted to remind people

1419
01:09:44,300 --> 01:09:45,600
that it was that function.

1420
01:09:45,600 --> 01:09:47,800
So that's really the only reason that normally, I wouldn't even have

1421
01:09:47,800 --> 01:09:48,300
used it.

1422
01:09:48,300 --> 01:09:51,500
There usually what'll end up happening.

1423
01:09:51,500 --> 01:09:55,500
Is I'll try to think through what the right way to write the code, is

1424
01:09:55,500 --> 01:09:59,600
knowing the things that I know because random between

1425
01:10:00,000 --> 01:10:03,500
Is much more General than random unilateral or random bilateral.

1426
01:10:03,700 --> 01:10:06,800
So by forcing those to go through random between there's less

1427
01:10:06,800 --> 01:10:11,300
possibilities for optimization there and it makes it more confusing

1428
01:10:11,300 --> 01:10:13,400
for the compiler as well, right?

1429
01:10:13,900 --> 01:10:17,300
And so, I tend not to once I get down to a certain level, I don't tend

1430
01:10:17,300 --> 01:10:21,900
to just have things call it, call utilities for their own sake.

1431
01:10:24,400 --> 01:10:25,200
If that makes sense.

1432
01:10:26,000 --> 01:10:28,700
Now, would I criticize someone for doing that?

1433
01:10:28,700 --> 01:10:30,200
No, absolutely not.

1434
01:10:30,600 --> 01:10:35,000
Because the structure as it is exported to the rest of the program.

1435
01:10:35,000 --> 01:10:36,500
Still works fine if you do that.

1436
01:10:36,500 --> 01:10:39,200
So if you were to have random unilateral and bilateral, call random

1437
01:10:39,200 --> 01:10:40,800
between, right?

1438
01:10:41,600 --> 01:10:45,100
You could still have the opt, the opportunity to optimize them later

1439
01:10:45,100 --> 01:10:48,000
because, you know, the rest of the code is still calling random

1440
01:10:48,000 --> 01:10:51,200
unilateral or random bilateral as necessary, and just because your

1441
01:10:51,200 --> 01:10:53,700
refactoring through them, it doesn't matter, right?

1442
01:10:54,200 --> 01:10:58,600
Um, but the reason I didn't bother to collapse them was because in my

1443
01:10:58,600 --> 01:11:01,000
head I'm just thinking oh these want to be broken out anyway,

1444
01:11:01,000 --> 01:11:01,900
probably, right?

1445
01:11:01,900 --> 01:11:02,900
That's like what I'm thinking.

1446
01:11:03,100 --> 01:11:05,700
So I'm not going to bother trying to make sure that I have all of

1447
01:11:05,700 --> 01:11:08,300
these things reusing each other because I don't think that's how

1448
01:11:08,300 --> 01:11:09,700
they're going to work eventually, right?

1449
01:11:09,700 --> 01:11:10,300
So that makes sense.

1450
01:11:10,900 --> 01:11:14,300
So hopefully that is a little bit of, gives a little bit of that

1451
01:11:14,300 --> 01:11:14,800
perspective.

1452
01:11:14,800 --> 01:11:16,500
I'm the way I would doing those things.

1453
01:11:18,400 --> 01:11:22,900
So, clock, count, someone wants a clock count, but I've forgotten how

1454
01:11:22,900 --> 01:11:23,900
to get the clock counted.

1455
01:11:24,100 --> 01:11:25,300
Think we put it out here, right?

1456
01:11:25,300 --> 01:11:26,500
Clock .exe.

1457
01:11:27,100 --> 01:11:32,000
I like how something that counts the number of lines in a program is

1458
01:11:32,000 --> 01:11:34,500
11 megabytes large.

1459
01:11:36,800 --> 01:11:37,800
Fantastic.

1460
01:11:37,800 --> 01:11:39,300
All right, so we got clock.

1461
01:11:40,900 --> 01:11:44,800
And we're going to go ahead and say, all right, 4:00 let's go.

1462
01:11:44,800 --> 01:11:47,500
Handmade duck.

1463
01:11:48,400 --> 01:11:50,200
Is that how that works?

1464
01:11:51,500 --> 01:11:52,400
So is this not?

1465
01:11:52,400 --> 01:11:54,900
We're not very large, we're five thousand lines of code.

1466
01:11:54,900 --> 01:11:56,900
That's not large, right?

1467
01:11:57,300 --> 01:11:59,200
That's, that's pretty

1468
01:12:00,100 --> 01:12:02,500
I feel like that's pretty small.

1469
01:12:05,000 --> 01:12:05,400
Yeah.

1470
01:12:12,500 --> 01:12:16,400
Why does the seed function not have a prefix or suffix, random?

1471
01:12:20,800 --> 01:12:24,300
No, I think really just because there's nothing else that could be,

1472
01:12:26,800 --> 01:12:30,100
but I don't have a problem with that, you know, if you, if you see

1473
01:12:30,100 --> 01:12:34,700
this as a, you know, if you wanted to, I'd be fine with that, you

1474
01:12:34,700 --> 01:12:38,200
know, I'd be fine with saying that the way this works is, is this way

1475
01:12:38,900 --> 01:12:42,900
if you wanted to and everything was is prefix or any of, you know, if

1476
01:12:42,900 --> 01:12:46,200
that was something that made you more comfortable, regularize, it's

1477
01:12:46,200 --> 01:12:49,100
close enough to that that that seems fine.

1478
01:12:52,300 --> 01:12:56,900
You know, so I'm I don't know that I would necessarily have ever

1479
01:12:56,900 --> 01:13:02,100
bothered to regularize it in that way, because I'm not sure that

1480
01:13:02,100 --> 01:13:04,500
there's really any practical benefit to it.

1481
01:13:04,500 --> 01:13:08,100
But if it helps you keep it more compartmentalize there than you know.

1482
01:13:08,100 --> 01:13:12,900
And since this just takes a bear you went 3-2, you know, maybe it's

1483
01:13:12,900 --> 01:13:16,900
nice to have randoms to, you know, these guys are never going to get

1484
01:13:16,900 --> 01:13:20,600
mistaken for anything else because even if someone else had something

1485
01:13:20,600 --> 01:13:22,200
called random or had something,

1486
01:13:22,300 --> 01:13:25,700
Next to you in 32 they wouldn't take a random series pointer so

1487
01:13:25,700 --> 01:13:30,100
function overloading would prevent them from getting from colliding,

1488
01:13:30,400 --> 01:13:32,500
but random seed is definitely true that.

1489
01:13:32,500 --> 01:13:37,400
You know, you went 3-2 is not special so so you know, I could see that

1490
01:13:37,500 --> 01:13:38,300
and so that's fine.

1491
01:13:38,600 --> 01:13:38,800
You know?

1492
01:13:38,800 --> 01:13:42,400
That's that's a totally fine thing to want in the code.

1493
01:13:55,100 --> 01:13:55,800
Is it okay?

1494
01:13:55,800 --> 01:13:59,300
That random Choice, doesn't select, the random value uniformly,

1495
01:13:59,300 --> 01:14:04,700
depending on Choice, count argument value, it will prefer smaller

1496
01:14:04,700 --> 01:14:05,500
values.

1497
01:14:05,700 --> 01:14:11,300
For example, if random, if Max random value is 10, then R and D mod 8,

1498
01:14:11,400 --> 01:14:12,800
or returns you to up?

1499
01:14:13,700 --> 01:14:15,600
Well, I would say, no, it's not.

1500
01:14:15,600 --> 01:14:21,400
Okay for now, it's fine but in the long run, no, it's not.

1501
01:14:21,400 --> 01:14:24,800
Okay, like that's one of the reasons why having a tinier and

1502
01:14:24,900 --> 01:14:25,200
Table.

1503
01:14:25,200 --> 01:14:29,400
Like this is not a good idea, but the random number generator that we

1504
01:14:29,400 --> 01:14:30,500
actually use in practice.

1505
01:14:30,500 --> 01:14:36,900
We will attempt to make produce completely random bits in terms of

1506
01:14:36,900 --> 01:14:37,700
distribution.

1507
01:14:38,000 --> 01:14:41,400
So that's really a thing to deal with more once we actually put the

1508
01:14:41,400 --> 01:14:42,300
random number generator.

1509
01:14:42,300 --> 01:14:46,800
And at which point at which point like, random Choice should be

1510
01:14:46,800 --> 01:14:50,500
actually uniform in this distribution, unless there's something else

1511
01:14:50,500 --> 01:14:53,800
about it that I'm missing, but I feel like this should be as long as

1512
01:14:53,800 --> 01:14:54,300
the

1513
01:14:55,800 --> 01:14:59,500
As the actual series itself is random, right?

1514
01:15:00,600 --> 01:15:01,100
So yeah.

1515
01:15:01,100 --> 01:15:05,600
So I would say no, it's not really okay, but it's okay for now because

1516
01:15:05,600 --> 01:15:08,000
we're not gonna actually use that random table as the real thing that

1517
01:15:08,000 --> 01:15:08,500
we use.

1518
01:15:23,500 --> 01:15:26,700
Wouldn't random Choice have a slightly uneven distribution?

1519
01:15:26,700 --> 01:15:31,500
If the number of choices, didn't evenly divide, the maximum random

1520
01:15:31,500 --> 01:15:32,200
number.

1521
01:15:36,700 --> 01:15:37,600
Mmm.

1522
01:15:40,800 --> 01:15:43,400
I think you're probably right about that.

1523
01:15:43,400 --> 01:15:46,800
In other words, once we go to something that generates 32, random

1524
01:15:46,800 --> 01:15:51,200
bits, right, as opposed to this random number table table which does

1525
01:15:51,200 --> 01:15:52,000
not do that.

1526
01:15:52,500 --> 01:15:55,300
But once we move to something that actually generates 32 random bits,

1527
01:15:55,300 --> 01:15:56,200
the question is

1528
01:15:57,600 --> 01:15:59,700
You know what?

1529
01:16:00,600 --> 01:16:04,300
What consequence does random Choice have because it's using a mod.

1530
01:16:05,500 --> 01:16:09,900
And I feel like you're probably right that, there's a tiny tiny bit of

1531
01:16:09,900 --> 01:16:13,700
bias towards the lower numbers like really, really tiny.

1532
01:16:16,800 --> 01:16:21,900
Because you've basically got four billion unbiased regions and then

1533
01:16:21,900 --> 01:16:26,600
this one little biased region at the very end but I think you're

1534
01:16:26,600 --> 01:16:27,700
correct.

1535
01:16:27,700 --> 01:16:35,100
However, I am not good with number Theory and so I want to say that if

1536
01:16:35,100 --> 01:16:37,500
you really want to know the answer to that question.

1537
01:16:39,100 --> 01:16:42,200
You're going to have to ask someone with a better discrete math

1538
01:16:42,200 --> 01:16:46,000
background than me because I'm only guessing at the answer, I don't

1539
01:16:46,000 --> 01:16:49,800
know, certainly it won't produce any real problem.

1540
01:16:49,800 --> 01:16:55,400
In practice, I can pretty much guarantee you that, but if you really

1541
01:16:55,400 --> 01:16:59,800
needed to care, for some reason that there was literally no possible

1542
01:16:59,800 --> 01:17:00,800
bias ever,

1543
01:17:05,400 --> 01:17:07,700
You may you may have to do something else.

1544
01:17:07,700 --> 01:17:09,500
You may have to do it a little differently.

1545
01:17:09,500 --> 01:17:10,800
I don't know, right.

1546
01:17:20,400 --> 01:17:21,600
Okay, keep going.

1547
01:17:22,200 --> 01:17:25,200
When is it okay?

1548
01:17:26,300 --> 01:17:30,500
To pass larger objects, like r3s by value.

1549
01:17:30,500 --> 01:17:32,200
Instead of by reference.

1550
01:17:36,700 --> 01:17:38,700
So, really the answer to that question.

1551
01:17:39,500 --> 01:17:41,100
I'll say, two different things.

1552
01:17:41,500 --> 01:17:44,100
The first one is inline functions.

1553
01:17:44,300 --> 01:17:44,900
You can pass.

1554
01:17:44,900 --> 01:17:46,600
Pretty much whatever you want.

1555
01:17:48,100 --> 01:17:51,800
Most of the time, the optimizer in the compiler.

1556
01:17:51,800 --> 01:17:54,600
Should be good enough to just expand those inline functions.

1557
01:17:54,600 --> 01:17:55,900
Look at them figure out what they need to do.

1558
01:17:55,900 --> 01:17:57,700
And do the right thing, right?

1559
01:17:57,700 --> 01:17:59,800
Probably now,

1560
01:18:00,100 --> 01:18:02,300
As with everything else that has to do with compilers, you need to

1561
01:18:02,300 --> 01:18:03,900
verify if you care, right?

1562
01:18:03,900 --> 01:18:06,200
So in any circumstance, where you really care, you gotta go verify.

1563
01:18:07,600 --> 01:18:11,900
for other things, what I would say basically is, keep in mind that a

1564
01:18:11,900 --> 01:18:16,100
pointer in 64-bit code, is 8, bytes long,

1565
01:18:17,400 --> 01:18:21,200
So any structure that's like in the neighborhood of 8?

1566
01:18:21,200 --> 01:18:23,700
Bytes long, let's say that's 8 B.

1567
01:18:23,700 --> 01:18:26,100
16 B, maybe even 32 bytes

1568
01:18:27,900 --> 01:18:31,100
You know, if you pass a pointer to it versus passing it, you're not

1569
01:18:31,100 --> 01:18:37,000
saving much and so, especially depending on, it's really mostly.

1570
01:18:37,100 --> 01:18:38,300
All right, let's back up.

1571
01:18:38,700 --> 01:18:40,000
So when you call a function,

1572
01:18:41,100 --> 01:18:43,500
In 64-bit x86 and x64 code.

1573
01:18:43,500 --> 01:18:44,700
Our current compile Target.

1574
01:18:45,400 --> 01:18:47,100
We call a function x, 64 code.

1575
01:18:48,100 --> 01:18:50,500
Basically, what you're going to do is you're going to the compiler, is

1576
01:18:50,500 --> 01:18:56,000
going to push the, the it's going to push the arguments on the stack,

1577
01:18:56,500 --> 01:18:58,400
if it can't fit them in the registers.

1578
01:18:58,400 --> 01:19:00,800
According to the ABI, the application binary interface.

1579
01:19:00,800 --> 01:19:06,700
The thing that says how function calls work by convention, right?

1580
01:19:06,800 --> 01:19:09,200
Because, you know, there's no such thing as a function call at the

1581
01:19:09,200 --> 01:19:10,100
hardware level.

1582
01:19:10,400 --> 01:19:10,700
There's

1583
01:19:12,100 --> 01:19:14,700
Like calling a function is just calling an address.

1584
01:19:14,700 --> 01:19:16,600
There's no parameters, right?

1585
01:19:17,000 --> 01:19:22,300
So it's just expected that the code on one side of the call, puts the

1586
01:19:22,300 --> 01:19:24,500
parameters, in some place, where the code on the other side of the

1587
01:19:24,500 --> 01:19:26,000
call knows where to get them.

1588
01:19:26,600 --> 01:19:30,100
And so one place is on the stack, another places in the registers of

1589
01:19:30,100 --> 01:19:35,200
the CPU and the registers on x64 CPU, there's 64 bits obviously.

1590
01:19:35,200 --> 01:19:39,000
So they're eight, bytes long, they may be significantly more than

1591
01:19:39,000 --> 01:19:41,100
eight bytes long because there's registers

1592
01:19:41,400 --> 01:19:45,400
There's xmm registers there's a VX and all that stuff and those get

1593
01:19:45,400 --> 01:19:46,900
longer than eight bytes right?

1594
01:19:47,200 --> 01:19:51,100
Those can be 128-bit to and 56-bit, they could be very long.

1595
01:19:53,400 --> 01:19:56,800
And so basically it's going to stuff a bunch of stuff in registers for

1596
01:19:56,800 --> 01:20:01,000
the call and when it can't fit in registers, it will go ahead and put

1597
01:20:01,000 --> 01:20:01,600
on the stack.

1598
01:20:02,400 --> 01:20:04,200
And I don't remember what the API says.

1599
01:20:04,200 --> 01:20:05,100
I should remember.

1600
01:20:05,100 --> 01:20:08,000
I think the FBI says, like, you get half the registers for the push or

1601
01:20:08,000 --> 01:20:08,700
something.

1602
01:20:08,700 --> 01:20:12,700
I don't really remember, but, you know, it's going to be something

1603
01:20:12,700 --> 01:20:16,200
that's like, in the neighborhood of, you know, 64 byte something like

1604
01:20:16,200 --> 01:20:17,600
that, right?

1605
01:20:18,000 --> 01:20:20,700
So when you're passing stuff to a function, you can kind of think of

1606
01:20:20,700 --> 01:20:22,800
it as like, you know, if you're passing

1607
01:20:23,300 --> 01:20:23,800
Stuff.

1608
01:20:23,800 --> 01:20:26,200
That's not going to be that much larger than 64.

1609
01:20:26,200 --> 01:20:27,800
Bytes 80, B, 90 B.

1610
01:20:27,800 --> 01:20:30,300
I don't know, most, that's probably going to registers.

1611
01:20:30,300 --> 01:20:32,600
Anyway, you know, how much does it really matter at the end of the

1612
01:20:32,600 --> 01:20:33,000
day?

1613
01:20:35,500 --> 01:20:36,100
So I don't know.

1614
01:20:36,200 --> 01:20:37,100
It's tough to say.

1615
01:20:37,200 --> 01:20:39,200
The other thing is, you know, it's gonna be perfectly cast.

1616
01:20:39,200 --> 01:20:42,500
You're going to put it into the memory and put it right back out.

1617
01:20:42,500 --> 01:20:45,700
So you're only really worried about if you're kind of overflowing

1618
01:20:45,700 --> 01:20:47,800
catch this, there's a lot of stuff involved there.

1619
01:20:49,400 --> 01:20:52,000
So I would say, you know, it's just not something that I think about

1620
01:20:52,000 --> 01:20:52,700
too hard.

1621
01:20:52,800 --> 01:20:56,400
You know don't pass for K objects on the stack.

1622
01:20:56,400 --> 01:20:58,900
Certainly you don't don't don't pass things that are certainly large

1623
01:20:58,900 --> 01:20:59,700
but anything that's

1624
01:21:00,000 --> 01:21:03,100
In the neighborhood really shouldn't be that big of a deal.

1625
01:21:03,400 --> 01:21:09,000
And you know what, you should probably be able to do is anywhere that

1626
01:21:09,000 --> 01:21:10,300
you really cared about it.

1627
01:21:11,300 --> 01:21:13,400
Just take a look at what the computer is doing and make sure that it's

1628
01:21:13,400 --> 01:21:17,900
okay and time it, you know, if it's if it's in there just time the

1629
01:21:17,900 --> 01:21:19,400
calls in either way and see what happens.

1630
01:21:19,400 --> 01:21:23,300
That's really the only way to know for sure but, you know, hopefully

1631
01:21:23,400 --> 01:21:26,600
that gave you a little perspective on kind of roughly what's going on

1632
01:21:26,600 --> 01:21:29,900
in the process and to be honest with you on exit before, I've never

1633
01:21:30,000 --> 01:21:36,200
Ever done really any optimization where I've timed register versus out

1634
01:21:36,200 --> 01:21:36,700
of line.

1635
01:21:36,700 --> 01:21:38,000
How big things have to be?

1636
01:21:38,000 --> 01:21:41,100
I've never really done that Performance Tuning, so I don't even really

1637
01:21:41,100 --> 01:21:45,600
know what the best rule of thumb would be on any particular Intel

1638
01:21:45,600 --> 01:21:46,000
processor.

1639
01:21:46,000 --> 01:21:49,400
For example, let alone like an arm or something like that.

1640
01:22:01,800 --> 01:22:04,900
Kissy just curious because the background tiles are static at the

1641
01:22:04,900 --> 01:22:05,400
moment.

1642
01:22:05,400 --> 01:22:09,700
Ah well yeah so that's because we really just haven't gotten to how

1643
01:22:09,700 --> 01:22:12,600
we're going to put the how we're really going to want the ground to go

1644
01:22:12,600 --> 01:22:15,100
around the player that's just that's just we were just getting the

1645
01:22:15,100 --> 01:22:17,900
compositing working and so that's the only reason they're static.

1646
01:22:18,200 --> 01:22:19,800
We haven't really decided how that's going to work.

1647
01:22:19,800 --> 01:22:21,000
Well maybe we'll do that tomorrow.

1648
01:22:29,200 --> 01:22:31,600
Do you see yourself extending random number to have anything other

1649
01:22:31,600 --> 01:22:32,900
than a uniform distribution?

1650
01:22:34,000 --> 01:22:38,300
Yeah, I mean I would suspect I mean I don't know that we'll put it

1651
01:22:38,300 --> 01:22:41,900
necessarily, I'm not sure that it will go in this random set.

1652
01:22:41,900 --> 01:22:44,300
They get might I mean I don't know, I think about that but when we do

1653
01:22:44,300 --> 01:22:47,400
the procedural world generation will probably want to have non uniform

1654
01:22:47,400 --> 01:22:54,500
distributions so you know, I couldn't say for sure right now but I

1655
01:22:54,500 --> 01:22:58,300
strongly suspect that yes, we will have some way of

1656
01:22:58,700 --> 01:22:59,900
Getting non-uniform students.

1657
01:22:59,900 --> 01:23:03,100
However, will probably always start with a uniform distribution.

1658
01:23:04,500 --> 01:23:08,000
So our random number generator, will probably always generate uniform,

1659
01:23:08,000 --> 01:23:08,500
distributions.

1660
01:23:08,500 --> 01:23:11,900
And then we'll like warp the distributions to be calm down.

1661
01:23:11,900 --> 01:23:13,500
Uniform is what I suspect will happen.

1662
01:23:13,500 --> 01:23:14,000
I don't suspect.

1663
01:23:14,000 --> 01:23:18,200
We will have like a non uniform, random number generator at the core,

1664
01:23:18,300 --> 01:23:19,000
right?

1665
01:23:20,200 --> 01:23:21,100
That's my assumption.

1666
01:23:23,100 --> 01:23:24,400
Is this strictly handled in Ram?

1667
01:23:24,400 --> 01:23:27,000
Do you have plans to use GPU resources for rendering?

1668
01:23:27,400 --> 01:23:28,000
Yes.

1669
01:23:28,000 --> 01:23:33,300
Oh, we will be doing the entire game with software rendering first

1670
01:23:33,900 --> 01:23:37,400
because that's part of the educational process and I shouldn't say the

1671
01:23:37,400 --> 01:23:37,700
entire game.

1672
01:23:37,700 --> 01:23:42,500
But we'll have a renderer that runs entirely in software and then

1673
01:23:42,500 --> 01:23:47,500
later, after that, we will show how to do Hardware acceleration as a

1674
01:23:47,500 --> 01:23:48,500
separate path.

1675
01:23:49,000 --> 01:23:51,700
So you'll always be able to run the whole game through the software

1676
01:23:51,700 --> 01:23:52,200
path.

1677
01:23:53,600 --> 01:23:57,000
And possibly some of the features in the will be turned off in the

1678
01:23:57,000 --> 01:23:59,700
software path that aren't fast enough or something.

1679
01:24:01,100 --> 01:24:01,600
But yeah.

1680
01:24:07,300 --> 01:24:10,400
I noticed in functions, you will always use a result variable, even if

1681
01:24:10,400 --> 01:24:13,000
the calculation is a one liner rather than using the expression

1682
01:24:13,000 --> 01:24:15,700
directly in return statement, does this incur an extra copy and are

1683
01:24:15,700 --> 01:24:17,000
their performance implications.

1684
01:24:17,600 --> 01:24:20,300
So know, any optimizing compiler, that works at all.

1685
01:24:21,600 --> 01:24:23,300
Doesn't care about that performance wise.

1686
01:24:23,300 --> 01:24:26,400
There's no extra copy in debug mode.

1687
01:24:26,400 --> 01:24:29,500
There might be because in debug mode the compiler might not do

1688
01:24:29,500 --> 01:24:33,200
anything at all, but in debug mode, the compiler does so many extra

1689
01:24:33,200 --> 01:24:34,100
copies of that form.

1690
01:24:34,100 --> 01:24:35,700
Any way that you'd never notice these

1691
01:24:36,400 --> 01:24:40,700
But, yeah, in optimization mode those all go away.

1692
01:24:41,200 --> 01:24:45,300
That's, you know, the the SSA analysis of it would trivially trim that

1693
01:24:45,300 --> 01:24:47,300
out, you know, it's not a problem.

1694
01:24:47,900 --> 01:24:50,200
The reason I do it is because that way it's easier to inspect the

1695
01:24:50,200 --> 01:24:53,800
variables when you debug you can always set a breakpoint before the

1696
01:24:53,800 --> 01:24:57,300
return and see what the returns going to be without having to trust

1697
01:24:57,300 --> 01:25:00,400
that your debugger will give you a way to view it easily.

1698
01:25:07,200 --> 01:25:10,100
Do you plan to move all the other loaded bitmap memory to be in a

1699
01:25:10,100 --> 01:25:11,100
memory as well?

1700
01:25:11,600 --> 01:25:18,700
No, well yes, yes, I should say that not now but yes once we do the

1701
01:25:18,700 --> 01:25:22,800
asset loading path that will all be Memory Arena based right now.

1702
01:25:22,800 --> 01:25:25,000
It's using the debug file load stuff.

1703
01:25:25,100 --> 01:25:26,700
So you know

1704
01:25:29,000 --> 01:25:30,200
I believe, that's how that's going.

1705
01:25:38,200 --> 01:25:44,000
I think you've used an aggregate initializer in one place with random

1706
01:25:44,000 --> 01:25:50,100
series being seated IE you only have one call to random seed but you

1707
01:25:50,100 --> 01:25:51,000
have at least two?

1708
01:25:51,400 --> 01:25:52,100
Yeah, you're right.

1709
01:25:52,100 --> 01:25:52,700
You know what?

1710
01:25:53,300 --> 01:25:54,500
That's a force of habit.

1711
01:25:54,500 --> 01:25:59,900
I probably shouldn't do it so I was trying to be a little nicer on the

1712
01:25:59,900 --> 01:26:01,100
stream that I normally am.

1713
01:26:01,100 --> 01:26:01,600
I real code?

1714
01:26:01,600 --> 01:26:07,200
This is how my real code looks usually, but it's better to write it

1715
01:26:07,200 --> 01:26:07,800
this way.

1716
01:26:08,600 --> 01:26:10,000
So yes, thanks for catching that.

1717
01:26:10,000 --> 01:26:14,200
That's really what I meant to type rather than assuming the structure

1718
01:26:14,200 --> 01:26:14,400
of it.

1719
01:26:14,400 --> 01:26:17,600
So that's, that's actually yeah, that's actually what I would have

1720
01:26:17,600 --> 01:26:18,100
typed.

1721
01:26:20,500 --> 01:26:24,000
in my regular way that I do random series I actually don't do that but

1722
01:26:24,000 --> 01:26:24,500
I should

1723
01:26:25,800 --> 01:26:27,200
It's a little bit little bit better.

1724
01:26:48,900 --> 01:26:51,300
Let's see.

1725
01:26:54,100 --> 01:26:56,400
Initially, you put B for Pixel into the bitmap.

1726
01:26:56,400 --> 01:26:56,600
Sure.

1727
01:26:56,600 --> 01:26:57,600
Because it can be useful.

1728
01:26:57,700 --> 01:26:59,900
Then I asked you to remove it because

1729
01:27:00,000 --> 01:27:01,400
Ever changes and you did that.

1730
01:27:01,500 --> 01:27:04,100
But 10 or so episodes, later, you added it back because it would be

1731
01:27:04,100 --> 01:27:06,400
useful and now you're moving again, this is funny.

1732
01:27:06,400 --> 01:27:10,000
Yeah, and that's, that's not untypical in programming.

1733
01:27:10,000 --> 01:27:13,000
At least for me, it's like, I'm allow things to be flexible if I

1734
01:27:13,100 --> 01:27:16,500
especially there's some things where you just can't tell, which way

1735
01:27:16,500 --> 01:27:18,200
it's going to go and they vacillate.

1736
01:27:20,400 --> 01:27:24,100
So, I guess the funny thing will be, which way, will it end up?

1737
01:27:25,700 --> 01:27:27,900
I think having it constants, probably, right.

1738
01:27:27,900 --> 01:27:29,500
I mean, it is.

1739
01:27:30,000 --> 01:27:33,300
Instant we're not going to allow it to be anything else so I think

1740
01:27:33,300 --> 01:27:37,300
probably it should have been this way when you asked me to remove it

1741
01:27:37,300 --> 01:27:39,800
before you were probably right.

1742
01:27:39,800 --> 01:27:43,400
And maybe we'll stick with it this time because we had a real reason

1743
01:27:43,400 --> 01:27:43,700
to

1744
01:27:46,800 --> 01:27:49,000
You fix random to the uniform by generating a full.

1745
01:27:49,000 --> 01:27:53,500
32-bit random number do, mod next power of 2 Choice count then check

1746
01:27:53,500 --> 01:27:55,300
if result is less than Choice count.

1747
01:27:55,300 --> 01:27:57,800
If not repeat the whole process oh man

1748
01:27:59,500 --> 01:28:02,000
Who that sounds brutal though?

1749
01:28:03,800 --> 01:28:05,100
That's a loop, man.

1750
01:28:07,000 --> 01:28:08,100
Yeah, we're not going to do that.

1751
01:28:08,100 --> 01:28:08,600
Sorry.

1752
01:28:08,700 --> 01:28:11,100
We're going to accept the the slight bias I'm afraid.

1753
01:28:17,900 --> 01:28:21,000
So, all right, we are done.

1754
01:28:21,200 --> 01:28:28,100
We have come to the end of another full Power episode of handmade

1755
01:28:28,100 --> 01:28:33,600
hero, which was dedicated today, actually, to Abner Cumbre, one of our

1756
01:28:33,800 --> 01:28:34,400
whose name.

1757
01:28:34,400 --> 01:28:35,400
I never know how to pronounce.

1758
01:28:35,400 --> 01:28:38,000
This is the weird part with handmade sure.

1759
01:28:38,000 --> 01:28:41,500
Oh, I've made so many friends now through the series.

1760
01:28:42,100 --> 01:28:46,000
I, they can hear me say stuff, but I can never hear them.

1761
01:28:46,000 --> 01:28:46,500
Say stuff.

1762
01:28:46,500 --> 01:28:47,400
I don't know how to pronounce.

1763
01:28:47,900 --> 01:28:55,200
Anyone's name, even the moderators, I just guess when I see it but

1764
01:28:55,400 --> 01:28:59,100
this stream of course was dedicated to Abner because he had an awful

1765
01:28:59,100 --> 01:29:03,200
day the other day and we were talking about it on Twitter and we

1766
01:29:03,200 --> 01:29:07,600
decided that there should be an episode dedicated to him and

1767
01:29:07,600 --> 01:29:10,000
commiserating with him for having an awful day.

1768
01:29:10,000 --> 01:29:16,000
Because let's be honest, we have all had awful days at some point and

1769
01:29:16,000 --> 01:29:17,500
sometimes it's nice to know that other people.

1770
01:29:17,700 --> 01:29:20,800
Care about the fact that you had an awful day even though that doesn't

1771
01:29:20,800 --> 01:29:23,600
help your awful day at all, like let's face it the awful day, was

1772
01:29:23,600 --> 01:29:24,300
still awful.

1773
01:29:25,400 --> 01:29:28,300
Knowing the other people are bummed that you had an awful day.

1774
01:29:28,300 --> 01:29:30,600
Can kind of help make you feel a little better sometimes.

1775
01:29:31,800 --> 01:29:39,700
So this one's for you Abner and yeah, I hope that that maybe Future

1776
01:29:39,700 --> 01:29:40,800
Days will be better days.

1777
01:29:41,100 --> 01:29:42,400
So let's take a look here.

1778
01:29:42,700 --> 01:29:43,500
Where are we at?

1779
01:29:45,700 --> 01:29:47,500
We have we have come to the end of another episode.

1780
01:29:47,600 --> 01:29:48,700
So Dove handmade hero.

1781
01:29:49,500 --> 01:29:52,300
If you are someone new to the series and don't know, the don't know

1782
01:29:52,300 --> 01:29:55,600
the drill, you can get access to the source code by pre-ordering the

1783
01:29:55,600 --> 01:29:56,500
game on handmade hero.

1784
01:29:56,500 --> 01:29:59,800
Dot-org comes with a link that you can use Save the link that you

1785
01:30:00,400 --> 01:30:03,400
Because you can use it to redownload the source code and I'm putting

1786
01:30:03,400 --> 01:30:03,800
up a thing.

1787
01:30:03,800 --> 01:30:08,800
I found out that send owl has a way to re get links if you forgotten

1788
01:30:08,800 --> 01:30:09,600
what yours is.

1789
01:30:09,700 --> 01:30:12,400
So I'm going to put that up on handmade here at Oregon as well, kind

1790
01:30:12,400 --> 01:30:13,700
of like under here soon.

1791
01:30:14,200 --> 01:30:15,600
I figured it out because I asked them.

1792
01:30:15,600 --> 01:30:18,400
I was like, sometimes people lose their link and they need to get it

1793
01:30:18,400 --> 01:30:18,700
again.

1794
01:30:18,700 --> 01:30:19,500
How can they get it?

1795
01:30:19,500 --> 01:30:21,000
And they said, oh, there's this hidden thing.

1796
01:30:21,000 --> 01:30:21,800
It was like a good.

1797
01:30:21,800 --> 01:30:22,500
We could do that.

1798
01:30:22,600 --> 01:30:23,700
So I'm going to do that as well.

1799
01:30:24,700 --> 01:30:27,000
And also, we've got a patreon.

1800
01:30:27,200 --> 01:30:30,000
If you want to support the video series, you can subscribe to

1801
01:30:30,100 --> 01:30:32,400
That we have a news in forms that you can check out.

1802
01:30:32,400 --> 01:30:33,600
It's got a lot of good info on.

1803
01:30:33,600 --> 01:30:36,900
It's got an episode guide for catching up, with all the old episodes.

1804
01:30:36,900 --> 01:30:39,600
If you have someone who's new to the series, check that out.

1805
01:30:40,400 --> 01:30:43,100
Every last thing we've done every last bit of programming done on this

1806
01:30:43,100 --> 01:30:46,400
game, is there is a video that shows exactly how it was done, and

1807
01:30:46,400 --> 01:30:47,600
that's a good place to get that.

1808
01:30:47,600 --> 01:30:50,500
There's also Community ports to Linux, and Mac up there that you can

1809
01:30:50,500 --> 01:30:51,400
check out.

1810
01:30:51,600 --> 01:30:54,100
If you're interested in running on a different platform, before we get

1811
01:30:54,100 --> 01:30:57,100
to it, officially on the series, they've already done it and there's

1812
01:30:57,100 --> 01:30:59,100
also a place to post questions up there.

1813
01:31:00,200 --> 01:31:04,700
So yeah, if you're interested in the schedule, we're going to be here

1814
01:31:04,700 --> 01:31:07,100
tomorrow morning, I guess because it's Friday tomorrow, is it?

1815
01:31:07,100 --> 01:31:07,500
Not.

1816
01:31:08,000 --> 01:31:10,200
Yeah, so it'll be tomorrow at 9:00 a.m.

1817
01:31:10,600 --> 01:31:14,900
we will be kind of following up with the doing a little more of that

1818
01:31:15,000 --> 01:31:16,600
that ground composite work there.

1819
01:31:17,300 --> 01:31:18,600
So tomorrow morning at 9:00 a.m.

1820
01:31:18,600 --> 01:31:20,200
if you want to come back for the next episode.

1821
01:31:20,200 --> 01:31:23,000
If not, we'll be starting again next week and I think next week we'll

1822
01:31:23,000 --> 01:31:24,000
try a new time slot.

1823
01:31:24,000 --> 01:31:26,900
I was saying possibly 55 p.m.

1824
01:31:26,900 --> 01:31:27,900
might be the new time slot.

1825
01:31:27,900 --> 01:31:29,900
So if you're trying to keep track of all that I know,

1826
01:31:30,100 --> 01:31:30,900
It's a little crazy.

1827
01:31:31,200 --> 01:31:33,300
What you want to do is take a look at the Tweet bot.

1828
01:31:33,400 --> 01:31:36,100
The Tweet Bots, pretty good the tweetbot.

1829
01:31:36,100 --> 01:31:39,200
Basically will tell you everything you need to know about the

1830
01:31:39,200 --> 01:31:39,800
schedule.

1831
01:31:40,400 --> 01:31:41,300
So check that out.

1832
01:31:41,300 --> 01:31:46,500
It tweets the whole schedule on weekends and it also tweets every day.

1833
01:31:46,500 --> 01:31:49,000
What the schedule B, so it should be pretty easy to keep a track.

1834
01:31:49,000 --> 01:31:50,100
It's low noise.

1835
01:31:50,100 --> 01:31:54,500
Otherwise it only treats the schedule and any schedule related stuff

1836
01:31:54,500 --> 01:31:57,200
that comes from me like the time when my train was stuck and we

1837
01:31:57,200 --> 01:31:58,600
weren't sure if I was gonna get here in time,

1838
01:31:59,700 --> 01:32:00,700
So thanks again for joining me.

1839
01:32:00,700 --> 01:32:05,800
I hope to see you tomorrow and have a good Friday whether I do or not.

1840
01:32:05,800 --> 01:32:06,700
Take it easy, everyone.

