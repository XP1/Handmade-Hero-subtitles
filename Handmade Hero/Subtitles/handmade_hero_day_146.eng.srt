1
00:00:01,800 --> 00:00:03,700
Hello everyone and welcome to handmade hero.

2
00:00:03,700 --> 00:00:06,600
The show recode a complete game live on stream.

3
00:00:06,900 --> 00:00:09,900
We do not use any engines, we do not use any libraries.

4
00:00:09,900 --> 00:00:14,900
This is an educational project designed to show the entire set of

5
00:00:14,900 --> 00:00:18,200
actual code, that it takes to run a game from start to finish.

6
00:00:18,600 --> 00:00:21,600
And so, whatever it is that you're interested in, we cover it at some

7
00:00:21,600 --> 00:00:25,200
point and if you're interested in being a generalist, which is

8
00:00:25,200 --> 00:00:29,300
generally what I am put intended, then this is the sort of stuff that

9
00:00:29,300 --> 00:00:30,600
you would, it be?

10
00:00:31,000 --> 00:00:35,200
It to know at a minimum certainly in order to be a good game

11
00:00:35,200 --> 00:00:38,400
development generalist, which is I think a pretty good thing to be

12
00:00:38,400 --> 00:00:40,700
because hey game development, generals can do just about anything on a

13
00:00:40,700 --> 00:00:43,200
project and you can do an entire project by yourself which is also

14
00:00:43,200 --> 00:00:46,000
pretty handy so that's all pretty cool as well.

15
00:00:46,000 --> 00:00:51,300
But today we would like to possibly finish up our audio code that

16
00:00:51,300 --> 00:00:55,500
we've been working on for a week or two and I don't even know how long

17
00:00:55,500 --> 00:00:58,600
we were kind of I guess something like six, six or seven days, I don't

18
00:00:58,600 --> 00:00:58,800
know.

19
00:00:59,100 --> 00:01:00,800
So six seven hours of audio coding.

20
00:01:00,900 --> 00:01:03,400
Not very much but audio is very simple.

21
00:01:03,500 --> 00:01:06,300
So we got done most of the stuff that I wanted to get done and we

22
00:01:06,300 --> 00:01:09,300
don't have any particular Advanced super Advanced effects or anything

23
00:01:09,300 --> 00:01:11,900
that we needed to do for this particular project.

24
00:01:11,900 --> 00:01:16,200
So, you know, we didn't have to get to too much into signal

25
00:01:16,200 --> 00:01:17,200
processing, anything like this.

26
00:01:17,900 --> 00:01:20,900
So what we'd like to do today is kind of wrap that up and we more or

27
00:01:20,900 --> 00:01:24,700
less finished it yesterday, but I had found that, we shouldn't

28
00:01:24,700 --> 00:01:27,400
actually do things eight wide because the fact that we're doing

29
00:01:27,400 --> 00:01:30,800
variable rate and so what I ended up wanting to do

30
00:01:31,000 --> 00:01:32,400
Is changing over to be for wide.

31
00:01:32,400 --> 00:01:35,600
So what I want to do is make that change today just go through

32
00:01:35,600 --> 00:01:39,700
everything, kind of make sure it's all kosher and then we can pretty

33
00:01:39,700 --> 00:01:44,500
much call our audio done and move on to assets pack file stuff, which

34
00:01:44,500 --> 00:01:46,700
is something that we would really like to get to because it's kind of

35
00:01:46,700 --> 00:01:47,500
holding up.

36
00:01:48,200 --> 00:01:53,000
Well honestly, it's holding up pretty much us, checking off the asset

37
00:01:53,000 --> 00:01:56,600
system, permanently from our list and so we really want to get that

38
00:01:56,600 --> 00:01:56,900
done.

39
00:01:59,900 --> 00:02:00,400
So

40
00:02:00,900 --> 00:02:04,200
Let's pop over to the code.

41
00:02:04,800 --> 00:02:07,100
And I would mention that if you are someone who has pre-ordered the

42
00:02:07,100 --> 00:02:10,000
game today is day, 1, 45 6, rather.

43
00:02:10,000 --> 00:02:12,000
So you want to unzip, they 145 source code.

44
00:02:12,000 --> 00:02:15,800
If you're trying to follow along at home and you would like your code

45
00:02:15,800 --> 00:02:18,100
to match mine at the start.

46
00:02:18,100 --> 00:02:20,500
So here we go.

47
00:02:22,300 --> 00:02:26,700
Let's take a look at where we left things, I think everything is still

48
00:02:26,700 --> 00:02:27,900
in good working order.

49
00:02:28,000 --> 00:02:31,400
It's just a little janky internally in terms of How It's structured.

50
00:02:34,600 --> 00:02:41,300
Yep, are panting still working, all that good stuff, so no real

51
00:02:41,300 --> 00:02:42,200
issues, one thing.

52
00:02:42,200 --> 00:02:46,400
I did want to mention is since we can't do alignment,

53
00:02:47,700 --> 00:02:49,000
On reads anymore.

54
00:02:49,000 --> 00:02:51,900
Because if you remember I was saying, I would like to align on Reed's

55
00:02:52,600 --> 00:02:55,700
since we can't align on reads because we support pitch bending.

56
00:02:56,600 --> 00:02:58,900
What I wanted to point out is that I had mentioned that we weren't

57
00:02:58,900 --> 00:02:59,800
going to bother supporting

58
00:03:00,000 --> 00:03:04,300
Beeping sounds, but since we are not going to bother doing aligned

59
00:03:04,300 --> 00:03:06,200
reads, that me is not true anymore.

60
00:03:06,400 --> 00:03:10,700
So we now can totally support looping sounds and what one of the

61
00:03:10,700 --> 00:03:13,200
things that we would want to do to support looping sounds properly.

62
00:03:13,200 --> 00:03:15,800
I noticed this the other day, and I mentioned it even, but we just

63
00:03:15,800 --> 00:03:17,000
didn't have a chance to get to it.

64
00:03:17,900 --> 00:03:23,600
Is this code right here when our samples played advances past the end

65
00:03:23,600 --> 00:03:24,800
of the sample count that.

66
00:03:24,800 --> 00:03:28,800
So it goes over the end and we say, oh, we may have to play another

67
00:03:28,800 --> 00:03:29,800
sound if

68
00:03:30,000 --> 00:03:31,400
We want to support looping sounds.

69
00:03:31,400 --> 00:03:34,600
All we have to do is make next idea to play point to ourselves.

70
00:03:36,100 --> 00:03:36,600
Right?

71
00:03:38,100 --> 00:03:43,100
So, for example, you know, if I just just show you what I mean because

72
00:03:43,100 --> 00:03:47,000
we support streaming streaming and looping is really the same thing,

73
00:03:47,200 --> 00:03:47,500
right?

74
00:03:47,500 --> 00:03:50,600
Streaming is just saying, oh, when I get to this buffer, I need to

75
00:03:50,600 --> 00:03:51,600
play another buffer.

76
00:03:52,000 --> 00:03:53,800
That's like the next part of this song.

77
00:03:54,500 --> 00:03:59,000
Well, looping is just doing the same thing but pointing at the same

78
00:03:59,000 --> 00:04:00,800
chunk over and over, right?

79
00:04:01,300 --> 00:04:04,200
So now that we're not going to do alignment, it's pretty trivial for

80
00:04:04,200 --> 00:04:05,800
us to support looping, sounds, if you want

81
00:04:05,900 --> 00:04:08,700
You all we would have to do is in here, right?

82
00:04:08,700 --> 00:04:14,500
Where we do this sort of stuff, right, where we've got our, our asset

83
00:04:14,500 --> 00:04:18,399
stuff going over all the samples and chaining them together, right?

84
00:04:18,399 --> 00:04:20,899
So you can see me doing this, this next idea to play.

85
00:04:20,899 --> 00:04:23,900
So, if you're right, chaining them together, what we could do, is if

86
00:04:23,900 --> 00:04:28,000
we wanted to, we could take one of our bloops and make our bloops do

87
00:04:28,000 --> 00:04:28,600
the same thing.

88
00:04:28,600 --> 00:04:32,300
So let's take out the varied bloops that we've got here so that we're

89
00:04:32,300 --> 00:04:33,100
only working on one.

90
00:04:33,100 --> 00:04:35,000
Bloop and what we would do, right?

91
00:04:35,000 --> 00:04:35,700
Is we just

92
00:04:35,900 --> 00:04:40,900
Say, okay, you know, grab out the bloop when we when we actually do it

93
00:04:41,100 --> 00:04:45,800
and then set that next idea to play properly, right?

94
00:04:45,800 --> 00:04:50,900
So, when we come in here, we would say, okay, whatever that that slot

95
00:04:50,900 --> 00:04:55,500
ID was for the bloop, the thing that comes after the bloop is actually

96
00:04:55,500 --> 00:04:58,500
going to be the bloop itself, right?

97
00:04:59,500 --> 00:05:00,300
Like so.

98
00:05:01,400 --> 00:05:04,300
And then it would just keep on playing and playing and playing, right?

99
00:05:04,300 --> 00:05:05,700
And so, you know,

100
00:05:12,400 --> 00:05:15,100
So, again, looping since we're not gonna Force the mixture to be

101
00:05:15,100 --> 00:05:17,100
aligned, really, really simple.

102
00:05:17,600 --> 00:05:21,100
We've basically, we had already essentially engineer at the support

103
00:05:21,100 --> 00:05:21,500
for.

104
00:05:21,700 --> 00:05:25,900
We just didn't think of it as that at the time, but because streaming

105
00:05:25,900 --> 00:05:29,200
and looping, or basically the same, we get it for free.

106
00:05:29,200 --> 00:05:33,300
So if people want to add Loop sounds, they can I don't like Loop

107
00:05:33,300 --> 00:05:33,900
sounds.

108
00:05:34,200 --> 00:05:36,300
So I don't think I'll probably use that.

109
00:05:36,300 --> 00:05:37,000
Feature.

110
00:05:37,000 --> 00:05:38,400
But it's their right.

111
00:05:38,400 --> 00:05:46,700
And so what I wanted to point out in relation to looping and I care

112
00:05:46,700 --> 00:05:49,600
about it, more from the streaming side of things, is that, if you look

113
00:05:49,600 --> 00:05:53,600
at what's going to happen here, when samples played runs, over the

114
00:05:53,600 --> 00:05:58,700
sample count and it's time to go to the next sound if we don't have to

115
00:05:58,700 --> 00:05:59,700
go to next sound, that it doesn't.

116
00:06:00,300 --> 00:06:00,800
Right?

117
00:06:00,800 --> 00:06:03,600
But if we do have to go to a next sound, then samp setting samples

118
00:06:03,600 --> 00:06:09,800
played 20 is only correct in the case where we actually ended right on

119
00:06:09,800 --> 00:06:13,400
a sample boundary which is going to be the case for 121 playback

120
00:06:13,400 --> 00:06:16,800
perhaps but it would not be the case if we're doing some kind of a

121
00:06:16,800 --> 00:06:21,100
pitch Bend and so really what we would rather do here is take samples,

122
00:06:21,100 --> 00:06:24,800
played and subtract the sample count from it.

123
00:06:26,000 --> 00:06:30,900
So that it leaves, whatever fractional overhang was in there, still

124
00:06:30,900 --> 00:06:32,700
there, right?

125
00:06:33,200 --> 00:06:36,100
Again, not necessarily something, you'll ever actually be able to hear

126
00:06:36,100 --> 00:06:40,100
as an audio glitch, if you don't get just the right circumstances to

127
00:06:40,100 --> 00:06:45,900
accentuate it perhaps, but just worth noting that that's, I believe a

128
00:06:45,900 --> 00:06:49,300
more correct way of looking at the problem that makes sense.

129
00:06:58,200 --> 00:06:58,500
Yeah.

130
00:07:01,100 --> 00:07:03,800
So that's you know, just something I wanted to mention.

131
00:07:04,400 --> 00:07:08,700
So I think that's mostly all there is to talk about with respect to

132
00:07:09,000 --> 00:07:11,700
the looping stuff by just forgotten to mention it.

133
00:07:11,700 --> 00:07:14,200
And we were kind of caught up and stuff yesterday so I didn't have a

134
00:07:14,200 --> 00:07:14,900
chance to.

135
00:07:15,400 --> 00:07:19,400
But what I'd like to do here is just go ahead and go through this

136
00:07:19,400 --> 00:07:19,600
Loop.

137
00:07:19,600 --> 00:07:25,500
Like I was saying and sort of pull down the the eight- of it and and

138
00:07:25,500 --> 00:07:28,800
change it over to just working with sample account.

139
00:07:28,800 --> 00:07:30,200
For instead of sample count,

140
00:07:30,400 --> 00:07:30,800
Exams.

141
00:07:34,200 --> 00:07:38,900
Okay, so for going in for is at a time, I'm going to delete that and

142
00:07:38,900 --> 00:07:42,400
I'm going to go through here and and take a look at the 8.

143
00:07:43,300 --> 00:07:46,500
So when we do total samples to mix, we're going to switch it down to

144
00:07:46,500 --> 00:07:47,500
four, right?

145
00:07:47,500 --> 00:07:52,800
Which is good when we do our our loop again, We're looping over for us

146
00:07:52,800 --> 00:07:53,200
now.

147
00:07:55,200 --> 00:07:58,600
And so now we're just going to have D volumes are, you know, all of

148
00:07:58,600 --> 00:07:59,800
this stuff is going to be

149
00:08:00,400 --> 00:08:03,300
Based on force, not on AIDS, right?

150
00:08:04,100 --> 00:08:09,200
So now if we take our Master volumes here, our master volume is not

151
00:08:09,200 --> 00:08:11,100
going to change because that's just a replicated value.

152
00:08:11,900 --> 00:08:15,900
But our volume changes actually can be a little bit simpler now.

153
00:08:17,600 --> 00:08:18,100
Excuse me.

154
00:08:21,700 --> 00:08:23,300
Our volume changes can be a little bit simpler.

155
00:08:23,300 --> 00:08:25,500
Now there's there's also something that I would probably want to do to

156
00:08:25,500 --> 00:08:26,600
change our naming scheme.

157
00:08:26,800 --> 00:08:32,500
So our sample count for maybe we should have also like maybe we should

158
00:08:32,500 --> 00:08:36,500
just call this a chunk count or like a bin count or something, right?

159
00:08:36,500 --> 00:08:39,200
I don't know what we want to call it, but we want to call like a chunk

160
00:08:39,200 --> 00:08:43,000
of for this thing so that we can stop using the forest suffix, which I

161
00:08:43,000 --> 00:08:45,000
think, is possibly bad, right?

162
00:08:46,200 --> 00:08:49,300
So maybe I'll actually call that the chunk count something like,

163
00:08:49,300 --> 00:08:50,200
That right.

164
00:08:51,200 --> 00:08:55,000
All right, so we'll say how many chunks are there going to be in our

165
00:08:55,000 --> 00:08:55,600
in our thing.

166
00:08:55,600 --> 00:08:59,800
And we want to again, make sure that the the sample count is a line

167
00:09:00,000 --> 00:09:02,200
That as well, right?

168
00:09:03,000 --> 00:09:04,500
So when we come in here, I'm going to change it.

169
00:09:04,500 --> 00:09:07,300
So I'm going to do, I'm going to call this total chunks to mix, and

170
00:09:07,300 --> 00:09:09,700
we're going to call this chunk count.

171
00:09:09,700 --> 00:09:14,400
Like we did up there and then we'll say, while we have chunks left to

172
00:09:14,400 --> 00:09:17,100
mix, will keep going.

173
00:09:17,500 --> 00:09:17,800
All right?

174
00:09:18,400 --> 00:09:22,400
So we go in here to the loaded sound, we have our volume, we have our

175
00:09:22,400 --> 00:09:27,300
change in volume over time, and then we have our D volume, which is

176
00:09:27,300 --> 00:09:29,600
going to be the volume change.

177
00:09:30,000 --> 00:09:31,200
For one with right.

178
00:09:31,200 --> 00:09:35,300
So maybe we'd call this D volume chunk, something like that and D

179
00:09:35,300 --> 00:09:37,100
sample chunk, right?

180
00:09:38,200 --> 00:09:41,400
Just to unpack that for which was getting really pretty confusing.

181
00:09:41,400 --> 00:09:45,000
Especially when we had master volume for, which doesn't really make

182
00:09:45,000 --> 00:09:45,500
any sense.

183
00:09:45,500 --> 00:09:48,700
So I'm just going to call these master volume, 0 and master volume 1,

184
00:09:49,100 --> 00:09:51,900
which is a lot nicer because we don't really need to differentiate

185
00:09:51,900 --> 00:09:53,200
them any further than that.

186
00:09:53,600 --> 00:09:58,900
Then we've got volume here and volume is actually just going to be.

187
00:10:00,700 --> 00:10:02,500
I think we really can just call it.

188
00:10:04,900 --> 00:10:07,000
Regular volume, right?

189
00:10:07,700 --> 00:10:10,400
Because the place where we actually used volume

190
00:10:11,600 --> 00:10:17,600
Again later when we're looking at it here, I think we could always

191
00:10:17,600 --> 00:10:19,600
have just used the first element.

192
00:10:19,800 --> 00:10:23,400
We could always just do the math in the first element of that SSE so I

193
00:10:23,400 --> 00:10:27,700
don't know that we actually ever need to store volume multiple times,

194
00:10:27,900 --> 00:10:28,200
right?

195
00:10:28,200 --> 00:10:33,000
Because really we're just doing math that we already did.

196
00:10:33,600 --> 00:10:37,300
So I feel like what we want to do here is actually just switch to

197
00:10:37,300 --> 00:10:41,100
having volume 0 and volume 1.

198
00:10:41,300 --> 00:10:45,700
And that's all I really want there to be right and we'd have D volume

199
00:10:45,700 --> 00:10:48,000
chunk as well, right?

200
00:10:48,600 --> 00:10:52,400
And I think that means we could probably get rid of this stuff in

201
00:10:52,400 --> 00:10:54,000
addition, right?

202
00:10:56,500 --> 00:10:59,800
Yeah, well, so we'll take it one step at a time but again, I think we

203
00:10:59,800 --> 00:11:01,000
can kind of clean up a lot of this.

204
00:11:01,000 --> 00:11:03,700
So that's really, that's really all I want to be doing today is just,

205
00:11:03,700 --> 00:11:04,700
you know, take care of all that stuff.

206
00:11:04,700 --> 00:11:06,100
So it's not all janky in here.

207
00:11:07,600 --> 00:11:13,000
Okay, so if we have the volume chunk, there we go.

208
00:11:14,600 --> 00:11:17,300
And we've got that for left and right channels.

209
00:11:17,300 --> 00:11:21,200
Looks like, well, this is actually just a volume 1.

210
00:11:21,200 --> 00:11:22,900
And this is chunk one, right?

211
00:11:23,700 --> 00:11:27,500
So, we'll actually see which one's of these, we actually need, but go

212
00:11:27,500 --> 00:11:29,700
ahead and change those there.

213
00:11:30,600 --> 00:11:31,200
There we go.

214
00:11:32,900 --> 00:11:36,600
And I think that should do it for now, right?

215
00:11:37,000 --> 00:11:40,800
So basically we have, you know, we could even look at it in terms of

216
00:11:40,800 --> 00:11:42,000
channels, right?

217
00:11:42,000 --> 00:11:43,700
So here's channel, right?

218
00:11:43,700 --> 00:11:46,500
This is Channel Zero.

219
00:11:48,200 --> 00:11:49,200
And this is Channel One.

220
00:11:53,300 --> 00:11:57,400
And that all looks fine, nothing particularly weird going on there.

221
00:11:58,700 --> 00:11:59,800
So I think that's okay.

222
00:12:00,000 --> 00:12:00,400
Out.

223
00:12:01,400 --> 00:12:05,500
So we're going to assert that the samples played is not ever below the

224
00:12:05,500 --> 00:12:07,600
zero account and that's fine for now.

225
00:12:08,500 --> 00:12:13,100
So then we're going to have a new value to samples to mix for the

226
00:12:13,100 --> 00:12:13,600
chunk.

227
00:12:13,600 --> 00:12:16,100
So it's actually going to be chunks to mix, right?

228
00:12:16,300 --> 00:12:19,400
And this is going to be total chunks to mix.

229
00:12:21,200 --> 00:12:26,500
Like, so we're then going to do real remaining real sample.

230
00:12:26,500 --> 00:12:28,600
So this is just going to be the same thing, but it's going to be

231
00:12:28,600 --> 00:12:29,500
chunks, right?

232
00:12:29,500 --> 00:12:31,000
Real chunks are raining and sound.

233
00:12:31,600 --> 00:12:33,400
We're going to take the sample count.

234
00:12:33,400 --> 00:12:36,100
We're going to subtract, how many that we have played from that sample

235
00:12:36,100 --> 00:12:40,200
count and then we're going to divide by whatever the the Delta is /

236
00:12:40,200 --> 00:12:41,700
chunk, right?

237
00:12:42,600 --> 00:12:43,700
I believe, that's correct.

238
00:12:43,900 --> 00:12:44,300
Yeah.

239
00:12:44,900 --> 00:12:45,600
Is that right?

240
00:12:45,600 --> 00:12:46,800
Do you sample chunk is for time?

241
00:12:46,800 --> 00:12:47,200
Sample?

242
00:12:47,200 --> 00:12:50,800
Yeah, so that's how much we're going to do and then

243
00:12:51,000 --> 00:12:53,000
And in here, we've got samples remaining.

244
00:12:53,000 --> 00:12:57,400
So this is just going to be chunks remaining in sound, and this is

245
00:12:57,600 --> 00:13:03,400
real chunks remaining in sound, and that should be it, right?

246
00:13:03,700 --> 00:13:05,200
So this is Chunks to mix.

247
00:13:07,000 --> 00:13:08,400
And that's chunks to mix.

248
00:13:10,000 --> 00:13:12,400
And this is Chunks.

249
00:13:13,800 --> 00:13:21,700
And chunks, so that all looks good, the volume ending check.

250
00:13:22,700 --> 00:13:25,300
I guess doesn't really have anything specific going on here.

251
00:13:25,300 --> 00:13:31,500
So this is D volume chunk and this is volume chunk count, I guess,

252
00:13:32,000 --> 00:13:32,500
right?

253
00:13:33,300 --> 00:13:35,200
And then we've got our samples to mix.

254
00:13:35,200 --> 00:13:36,500
So that's our chunks to mix.

255
00:13:42,100 --> 00:13:45,100
And our volume sample count is just our volume truck.

256
00:13:47,800 --> 00:13:52,100
Okay, let's do a little compiled here to see where we're at sample.

257
00:13:52,100 --> 00:13:54,300
Count for is really just chunk count.

258
00:13:55,900 --> 00:13:56,700
D volume.

259
00:13:56,700 --> 00:13:58,400
8 is D volume chunk.

260
00:13:59,900 --> 00:14:00,700
And then we're down.

261
00:14:01,300 --> 00:14:02,600
Okay, so that's all good.

262
00:14:03,500 --> 00:14:07,500
So in here and I guess,

263
00:14:11,100 --> 00:14:12,600
No, I think about it.

264
00:14:12,600 --> 00:14:14,200
We have this to do here handle stereo.

265
00:14:14,200 --> 00:14:16,900
We should probably just do some of these to do is we should probably

266
00:14:16,900 --> 00:14:18,500
take care of that to do and this to do.

267
00:14:18,500 --> 00:14:21,900
So after I finish this week through will take care of those two, dues

268
00:14:21,900 --> 00:14:24,100
as well so we can handle that way.

269
00:14:24,100 --> 00:14:27,500
You can handle stereo sounds not that we can actually use them yet

270
00:14:27,500 --> 00:14:32,100
because we don't have the at them in the actual asset system.

271
00:14:32,200 --> 00:14:35,700
I mean they're supported by the SM but not by the wave loader is

272
00:14:35,700 --> 00:14:36,500
basically what I would say.

273
00:14:36,700 --> 00:14:41,000
So anyway, we're doing the handle stereo thing, that's all well and

274
00:14:41,000 --> 00:14:41,100
good.

275
00:14:41,100 --> 00:14:41,700
Good.

276
00:14:41,700 --> 00:14:45,700
What we would like to do here is make sure all of this stuff works

277
00:14:45,700 --> 00:14:46,200
properly.

278
00:14:46,200 --> 00:14:50,800
Now, what we can do, is our sample value now gets a lot easier, right?

279
00:14:50,900 --> 00:14:55,400
Because now that we're doing this, in chunks to mix, we're kind of, we

280
00:14:55,400 --> 00:14:58,400
don't have all of that annoying stuff where we had to do everything

281
00:14:58,400 --> 00:14:59,800
twice, which is nice.

282
00:15:00,000 --> 00:15:00,400
Right.

283
00:15:01,100 --> 00:15:07,300
So now we can have just our zero in 1 Min are two channels types,

284
00:15:07,300 --> 00:15:10,700
which is exactly, which is really what we would like, right?

285
00:15:11,600 --> 00:15:12,500
So that's all good.

286
00:15:12,900 --> 00:15:14,100
So here we go.

287
00:15:14,100 --> 00:15:18,400
Let's load those guys in again, we can get rid of half of it nicely.

288
00:15:19,400 --> 00:15:23,100
And you can see going ahead and doing these guys here, right?

289
00:15:23,100 --> 00:15:26,900
We've got our volume 0 and our volume 1 and our sample value.

290
00:15:26,900 --> 00:15:29,000
So that's just a lot nicer to read, right?

291
00:15:29,000 --> 00:15:32,600
So that's just our multiply accumulate happening there, and that's all

292
00:15:32,600 --> 00:15:33,100
good.

293
00:15:33,500 --> 00:15:35,900
So, let's see.

294
00:15:35,900 --> 00:15:40,200
We've got our stores and those are all good as well, but we only have

295
00:15:40,200 --> 00:15:41,300
to do half of them now.

296
00:15:42,600 --> 00:15:47,000
We can update these guys just singly because we're only writing out

297
00:15:47,300 --> 00:15:48,300
for Paris now.

298
00:15:48,800 --> 00:15:53,000
And when we update these guys, we can just think of them as 0 and 1.

299
00:15:53,400 --> 00:15:54,800
So that's all good as well.

300
00:15:55,500 --> 00:16:01,600
So these are do volume chunk the volume chunk and I think that's all

301
00:16:01,600 --> 00:16:02,000
good.

302
00:16:02,000 --> 00:16:05,700
So yeah, let's take a look.

303
00:16:05,700 --> 00:16:07,200
You sample chunk as well there.

304
00:16:07,400 --> 00:16:10,300
Let's take a look at where that's at, right?

305
00:16:10,300 --> 00:16:11,400
These guys have to be

306
00:16:11,500 --> 00:16:11,500
B.

307
00:16:13,100 --> 00:16:14,500
How to calm down a little bit there.

308
00:16:15,300 --> 00:16:17,800
D Volume 8 is divine chunk.

309
00:16:19,100 --> 00:16:21,000
And now we're down here.

310
00:16:21,000 --> 00:16:24,800
So now we're just doing, this is just renaming.

311
00:16:24,800 --> 00:16:27,900
Basically chunks to mix chunks to mix.

312
00:16:28,800 --> 00:16:39,100
We've got total chunks to mix, chunks to mix and yeah, I think that's

313
00:16:39,100 --> 00:16:40,400
basically it.

314
00:16:41,200 --> 00:16:43,100
Not a lot more to it.

315
00:16:43,100 --> 00:16:44,300
So, let's see where we're at.

316
00:16:57,400 --> 00:16:58,200
That's no good.

317
00:17:01,900 --> 00:17:02,700
What do we do?

318
00:17:03,800 --> 00:17:08,500
What heinous crime have we committed ladies and gentlemen, in our

319
00:17:08,500 --> 00:17:10,099
fussing with the sound code.

320
00:17:11,300 --> 00:17:14,700
So let's see where we're at here.

321
00:17:15,200 --> 00:17:20,400
Total chunks to mix is 96 chunks to mix?

322
00:17:20,500 --> 00:17:22,700
Drinks, Romanian sound or 0.

323
00:17:23,700 --> 00:17:25,200
So the sound is over,

324
00:17:27,099 --> 00:17:27,700
Right.

325
00:17:28,900 --> 00:17:30,600
Trunks remaining in sound is zero.

326
00:17:35,000 --> 00:17:37,200
So we won't mix anything.

327
00:17:39,000 --> 00:17:40,400
Did we mess up our end condition?

328
00:17:40,400 --> 00:17:42,300
Potentially, you may have.

329
00:17:45,400 --> 00:17:45,800
Yeah.

330
00:17:49,800 --> 00:17:50,000
Yeah.

331
00:17:50,000 --> 00:17:52,200
So this is kind of a little bit janky here, right?

332
00:17:53,200 --> 00:17:54,800
When we compute it, our ending,

333
00:17:56,900 --> 00:17:58,500
This is, this is not.

334
00:18:00,100 --> 00:18:02,400
This is not going to, this is not going to do it anymore.

335
00:18:02,400 --> 00:18:06,800
Now that we're not, we kind of wrote that back when we were doing non

336
00:18:07,500 --> 00:18:09,300
non floating-point playback, right?

337
00:18:10,700 --> 00:18:12,100
So we're going to have to be a little bit more.

338
00:18:12,100 --> 00:18:14,600
Careful about that to be sure.

339
00:18:14,900 --> 00:18:17,600
So let's go ahead and Mark that guy in here.

340
00:18:17,800 --> 00:18:20,100
Clean up a few more things and then we'll go through and do our 32

341
00:18:20,100 --> 00:18:20,600
dues.

342
00:18:21,200 --> 00:18:23,400
This is not an acceptable.

343
00:18:24,700 --> 00:18:27,600
Check for the end, right?

344
00:18:29,700 --> 00:18:34,700
Okay, so now I just want to simplify this guy a little bit, I just

345
00:18:34,700 --> 00:18:37,200
want to go through here and see what we can do.

346
00:18:37,200 --> 00:18:43,100
In terms of simplifying, things potentially a little bit so it looks

347
00:18:43,100 --> 00:18:46,000
like we can just make that in there.

348
00:18:46,000 --> 00:18:46,400
There we go.

349
00:18:48,100 --> 00:18:52,800
Yeah, so I'm going to take a quick spin through here and see if maybe

350
00:18:52,800 --> 00:18:55,500
some of these things don't have to be duplicated anymore.

351
00:18:55,500 --> 00:18:59,400
So there aren't so many different things sort of flapping around.

352
00:18:59,600 --> 00:19:00,300
That makes sense.

353
00:19:01,600 --> 00:19:02,900
So let's see.

354
00:19:05,100 --> 00:19:06,000
Yeah.

355
00:19:09,300 --> 00:19:11,100
The first thing I would observe.

356
00:19:17,600 --> 00:19:20,300
Is that if you look here, we're storing volume here.

357
00:19:20,300 --> 00:19:23,100
And then we're storing it again here and we really don't need to do

358
00:19:23,100 --> 00:19:24,500
that, right?

359
00:19:25,700 --> 00:19:28,200
We don't need to keep incrementing to it.

360
00:19:28,200 --> 00:19:28,700
That guy.

361
00:19:28,700 --> 00:19:31,500
So these are really temporary values to some degree.

362
00:19:31,700 --> 00:19:35,700
That should probably only be used to set up these things here, right?

363
00:19:37,000 --> 00:19:38,700
At least that's what I would suspect.

364
00:19:38,900 --> 00:19:42,100
And so if we take a look down here, like where we're actually

365
00:19:42,100 --> 00:19:46,900
updating, these guys, we should be able to not do that anymore, right?

366
00:19:47,000 --> 00:19:47,300
Like,

367
00:19:47,400 --> 00:19:52,900
This should be able to go away for starters and then here where we're

368
00:19:53,100 --> 00:19:55,900
actually using that volume.

369
00:19:56,100 --> 00:19:56,700
Right?

370
00:19:56,800 --> 00:20:00,300
What we could do there instead is the current volume that we want to

371
00:20:00,300 --> 00:20:01,100
write back.

372
00:20:01,400 --> 00:20:03,900
We could just write out the individual.

373
00:20:06,300 --> 00:20:11,200
Just, you know, we could just grab out the one that we want, right?

374
00:20:11,800 --> 00:20:18,400
So we could just go ahead and grab out the actual individual values

375
00:20:18,400 --> 00:20:19,200
from the same date.

376
00:20:19,500 --> 00:20:20,000
Like so,

377
00:20:23,300 --> 00:20:26,300
Yeah, so what do we call those volume 0 and volume 1?

378
00:20:26,400 --> 00:20:26,700
Yeah.

379
00:20:27,900 --> 00:20:31,600
So that would get us out of the business of updating that variable,

380
00:20:31,700 --> 00:20:33,900
which seems good to me, right?

381
00:20:36,500 --> 00:20:39,700
Of course I got to actually address it properly.

382
00:20:40,800 --> 00:20:41,300
So yeah.

383
00:20:41,300 --> 00:20:44,000
I think that's probably what we would want to do there.

384
00:20:44,800 --> 00:20:48,500
And looking at that I mean it's probably nice to still do it.

385
00:20:48,500 --> 00:20:49,800
Deep to do D volume.

386
00:20:49,800 --> 00:20:55,900
This way though, and volume just because you know it makes it easier

387
00:20:55,900 --> 00:20:57,700
to initialize these guys just by having them.

388
00:20:57,700 --> 00:20:59,800
So leave those temporary as temporary calculation

389
00:21:00,000 --> 00:21:02,000
Want to get them out of the actual Loop.

390
00:21:02,000 --> 00:21:03,500
So they're not being used anymore.

391
00:21:04,300 --> 00:21:06,600
That seems like a good idea to me anyway.

392
00:21:07,700 --> 00:21:10,100
And you know, and because they're used up here in the startup or

393
00:21:10,100 --> 00:21:10,300
whatever.

394
00:21:10,300 --> 00:21:14,600
So I just want to take it out of the loop that all seems pretty good.

395
00:21:16,500 --> 00:21:19,400
I don't see anything else immediately obvious that I would want to get

396
00:21:19,400 --> 00:21:19,900
rid of

397
00:21:22,100 --> 00:21:24,000
I suppose the other thing we could do is actually just store, the

398
00:21:24,000 --> 00:21:26,300
volume is somebody's butt that seems to Overkill.

399
00:21:27,100 --> 00:21:33,600
So let's see here, we have not done the we're still on our sort of our

400
00:21:33,600 --> 00:21:35,000
simpler path, right?

401
00:21:35,000 --> 00:21:39,200
Where we do the the just the basic loads before.

402
00:21:39,900 --> 00:21:43,300
And so if we wanted to do something a little fancier here,

403
00:21:48,600 --> 00:21:52,700
Like supporting the lerp, which I guess we decided we couldn't really

404
00:21:52,700 --> 00:21:53,300
hear it.

405
00:21:56,100 --> 00:21:59,300
So, I don't know if we want to bother supporting the lip, but maybe we

406
00:21:59,300 --> 00:22:05,600
should just write the code in there just because, you know, so if you

407
00:22:05,600 --> 00:22:09,100
want to want to do the lerp Implement of the way we did it here, where

408
00:22:09,100 --> 00:22:12,600
we've got an alert from sample, 0 to sample one, right?

409
00:22:13,000 --> 00:22:16,100
We would want to do something where we loaded sample value, 0.

410
00:22:17,200 --> 00:22:18,300
And that's again.

411
00:22:18,500 --> 00:22:22,300
To be sort of a truncation here, right?

412
00:22:22,500 --> 00:22:24,600
So this is going to be a floor.

413
00:22:29,600 --> 00:22:32,300
And we probably want to save those things.

414
00:22:32,300 --> 00:22:34,600
So we'd have to do this sort of thing, right?

415
00:22:34,600 --> 00:22:40,000
We have to do a sample index where we would, actually, I guess we

416
00:22:40,000 --> 00:22:41,600
could do it this way, right?

417
00:22:42,400 --> 00:22:47,200
We're Loops, that's not good, where we would actually go ahead and

418
00:22:47,300 --> 00:22:48,900
grab these guys out, right?

419
00:22:48,900 --> 00:22:53,000
So we do, you know, this sort of thing.

420
00:22:54,000 --> 00:22:54,400
Oops.

421
00:23:00,700 --> 00:23:04,700
So that way we actually know what they are, so we can do the Frac and

422
00:23:04,700 --> 00:23:05,900
all that stuff, right?

423
00:23:06,500 --> 00:23:11,500
So if we have these guys, we would also need to do I guess.

424
00:23:11,700 --> 00:23:13,600
Well, the frak is going to be

425
00:23:15,100 --> 00:23:19,800
Yeah, so we would also need to do like sample pose, right?

426
00:23:21,800 --> 00:23:23,700
We'd want to do that as well, right?

427
00:23:23,800 --> 00:23:27,300
So we do like sample pose, zero equal sample position.

428
00:23:29,100 --> 00:23:30,700
And then we would do our sample.

429
00:23:30,700 --> 00:23:34,900
Index is going to be that sample post rounded down and then our Frac

430
00:23:35,100 --> 00:23:41,500
right is going to be whatever that sample position is, oops, whatever

431
00:23:41,500 --> 00:23:46,700
that it's a pollution is - the florid value.

432
00:23:48,700 --> 00:23:49,200
Right.

433
00:23:49,600 --> 00:23:52,300
So again just duplicating this code right here.

434
00:23:52,700 --> 00:23:55,500
So we have to do this for all four of the samples, right?

435
00:23:55,500 --> 00:23:58,700
Because we're going to have a different Frac for each of them as well.

436
00:23:59,200 --> 00:23:59,900
Now what we could

437
00:24:00,000 --> 00:24:04,200
You is, we could widen that as well, which I guess, maybe we would

438
00:24:04,200 --> 00:24:05,600
like to do, right?

439
00:24:05,600 --> 00:24:08,100
So you could imagine me doing something like this.

440
00:24:08,700 --> 00:24:13,700
I'd say, okay, I've got well, I guess I've got one of these, right?

441
00:24:13,700 --> 00:24:21,200
And I do sample pose, and that's going to be equal to M set RPS, and I

442
00:24:21,200 --> 00:24:23,800
want to set it to like, sample, position, sample, position, sample

443
00:24:23,800 --> 00:24:24,100
version.

444
00:24:24,300 --> 00:24:29,400
I want to basically set it to be the, you know, the various

445
00:24:29,400 --> 00:24:29,800
deposition.

446
00:24:30,000 --> 00:24:33,100
And I'll just put them into a wide thing themselves.

447
00:24:33,300 --> 00:24:35,600
Write something like this.

448
00:24:36,000 --> 00:24:39,100
So now I've got the sample positions wide and I've got, you know, the

449
00:24:39,100 --> 00:24:41,600
first sample, second sample, third sample, for example, right?

450
00:24:42,300 --> 00:24:47,800
And then I can just wrap, I could floor them all together, right?

451
00:24:51,000 --> 00:24:52,800
For this case, I guess truncate them all together.

452
00:24:52,900 --> 00:24:53,400
Right?

453
00:24:54,200 --> 00:24:55,300
So we got sample.

454
00:24:55,700 --> 00:24:58,300
Index is going to be convert P.

455
00:24:58,400 --> 00:25:02,200
It's like CVT PS.

456
00:25:02,200 --> 00:25:03,300
What is it called that?

457
00:25:03,300 --> 00:25:04,200
I think that's what it is.

458
00:25:11,500 --> 00:25:11,800
Forgot.

459
00:25:11,800 --> 00:25:13,100
We moved it over to optimized.

460
00:25:13,800 --> 00:25:14,000
Yeah.

461
00:25:14,000 --> 00:25:16,300
So you can see here, you know, when we're doing our

462
00:25:17,400 --> 00:25:22,500
When we're doing our linear blend here where we want to get the

463
00:25:22,500 --> 00:25:26,100
fractional values and stuff, you can see this is the truncation,

464
00:25:26,100 --> 00:25:26,500
right?

465
00:25:26,500 --> 00:25:27,000
That we were doing.

466
00:25:27,000 --> 00:25:29,600
So we want to do exactly the same thing here, right?

467
00:25:29,600 --> 00:25:32,300
Where you just want to truncate these values so that we're taking them

468
00:25:32,300 --> 00:25:37,700
and figuring out what their closest actual index is right, and then

469
00:25:37,700 --> 00:25:38,800
I'm going to do again.

470
00:25:38,800 --> 00:25:40,500
Exactly the same thing we do here, right?

471
00:25:40,500 --> 00:25:43,700
It's literally the same exact thing for a linear blend.

472
00:25:43,700 --> 00:25:45,500
Whether you're doing it in graphics are doing and sound.

473
00:25:45,500 --> 00:25:47,300
What we want to do is figure out what the

474
00:25:47,500 --> 00:25:50,700
Actual value is and the fractional value again is just going to be

475
00:25:50,800 --> 00:25:55,800
subtracting that sample index from the original sample pose that we

476
00:25:55,800 --> 00:25:58,600
had so that we can see like, how much they were off.

477
00:25:58,600 --> 00:25:59,100
Right.

478
00:25:59,100 --> 00:26:02,400
So we that kind of nice because that means we can do that whole thing

479
00:26:02,700 --> 00:26:04,500
sort of together, right?

480
00:26:05,300 --> 00:26:08,100
And that gets us out of the business of having to do any of this other

481
00:26:08,100 --> 00:26:10,200
Ridiculousness right now.

482
00:26:10,200 --> 00:26:12,900
Unfortunately, the thing that that does not get us out of the business

483
00:26:12,900 --> 00:26:17,300
of doing is doing the loads, so we have to actually do the loads.

484
00:26:17,400 --> 00:26:22,100
Again, which is really too bad but there's really not much we can do

485
00:26:22,100 --> 00:26:25,000
if we want to support the arbitrary pitch, Bend, I'm not sure there's

486
00:26:25,000 --> 00:26:26,900
really much of a way around it.

487
00:26:27,300 --> 00:26:33,100
So when we come in here and we want to get a sample value, you know, I

488
00:26:33,100 --> 00:26:37,000
guess I'm not sure what we want to call it sample value.

489
00:26:37,400 --> 00:26:39,700
The, the one we're going from then we're going to.

490
00:26:40,000 --> 00:26:42,900
So maybe we'll call the floor and ceiling like sample value F and

491
00:26:42,900 --> 00:26:43,900
Sample value C.

492
00:26:45,000 --> 00:26:48,800
So when we load these guys in here, we need to get them out of the

493
00:26:48,800 --> 00:26:50,400
sample Index, right?

494
00:26:52,300 --> 00:26:54,300
But the sample index is not something.

495
00:26:54,300 --> 00:26:55,900
You can actually address directly, right?

496
00:26:55,900 --> 00:26:57,100
That's, that's a thing.

497
00:26:57,100 --> 00:26:58,900
That's an integer now, right?

498
00:26:58,900 --> 00:26:59,800
It's an M1.

499
00:27:00,000 --> 00:27:00,700
A tie.

500
00:27:01,400 --> 00:27:04,800
So, what we would need to do there is again, do exactly the same sort

501
00:27:04,800 --> 00:27:09,200
of tricky thing we did before where we're sort of addressing into it

502
00:27:09,200 --> 00:27:13,500
and saying, oh, I want to get you remember, I just did it down here,

503
00:27:13,500 --> 00:27:13,700
right?

504
00:27:13,700 --> 00:27:18,000
Where I sing it, I want to be able to get something out of the Sim

505
00:27:18,000 --> 00:27:18,600
devalue.

506
00:27:19,300 --> 00:27:22,500
So I'm just going to go ahead and say all right give me that value.

507
00:27:23,300 --> 00:27:26,000
Give me the value of this guy.

508
00:27:27,100 --> 00:27:33,100
As if he were an in 32 and then we'll grab the zero with one, right?

509
00:27:34,200 --> 00:27:35,200
So let's do that.

510
00:27:42,200 --> 00:27:44,500
And that should do it.

511
00:27:45,000 --> 00:27:49,300
I think we're grabbing those guys and then what we have to do since

512
00:27:49,300 --> 00:27:50,700
that's our sample index.

513
00:27:52,300 --> 00:27:55,800
We have to also, grab whatever the thing is on the other side of it,

514
00:27:56,000 --> 00:27:56,300
right?

515
00:27:56,300 --> 00:27:58,100
So the seat, the ceiling value.

516
00:27:58,700 --> 00:28:03,900
So, we would need to do, you know one one over that number, right?

517
00:28:03,900 --> 00:28:05,100
To fetch into the next one.

518
00:28:06,500 --> 00:28:10,600
And so, that's really it for that.

519
00:28:10,600 --> 00:28:14,400
I think that gets our floor and our ceiling values load it in

520
00:28:14,400 --> 00:28:20,000
properly, and then we just need to actually take some action.

521
00:28:20,000 --> 00:28:21,700
So, this stuff is now

522
00:28:21,900 --> 00:28:26,000
All represented in Cindy's, so we don't need that and we don't need

523
00:28:26,000 --> 00:28:26,800
that anymore.

524
00:28:26,800 --> 00:28:30,000
All we need to do now is just this part right here, where we do the

525
00:28:30,000 --> 00:28:33,800
actual lurk, and of course, LARPing is pretty simple.

526
00:28:34,000 --> 00:28:40,200
As we know, lerp is just the, oops, it's just an ad of two things that

527
00:28:40,200 --> 00:28:43,300
have been multiplied by the slurping coefficient, right?

528
00:28:44,000 --> 00:28:46,400
So we want to take that sample value floor.

529
00:28:48,000 --> 00:28:51,700
And so and we want to take

530
00:28:51,800 --> 00:28:53,400
that sample value ceiling.

531
00:28:55,300 --> 00:28:55,900
Right.

532
00:28:56,900 --> 00:28:59,500
And what we want to do now is we want to multiply these by whatever

533
00:28:59,500 --> 00:29:01,800
the appropriate fractional values are, right?

534
00:29:02,300 --> 00:29:06,800
So the fractional value, we multiply directly times the ceiling to

535
00:29:06,800 --> 00:29:08,000
move toward it, right?

536
00:29:08,000 --> 00:29:10,100
As a fraction goes up, we blend in more of see.

537
00:29:10,400 --> 00:29:13,600
And what we want to do is have inverse of the fractional value 2

538
00:29:13,600 --> 00:29:16,600
multiplied by F and so you remember how to do that, right?

539
00:29:16,800 --> 00:29:21,300
We just subtract it from 1, right to get it to be an inverted value.

540
00:29:23,500 --> 00:29:24,800
And that performs the lerp.

541
00:29:24,900 --> 00:29:26,800
So all we really need now is that constant?

542
00:29:26,800 --> 00:29:27,600
We need a one.

543
00:29:27,600 --> 00:29:29,300
We don't have a one right now, right?

544
00:29:29,300 --> 00:29:32,200
We had a zero, I guess I will stick of these up here is little

545
00:29:32,200 --> 00:29:33,900
constants just in case, anyone wants them.

546
00:29:34,400 --> 00:29:36,800
So weeps have a one and a zero now.

547
00:29:37,800 --> 00:29:39,800
And so now we can do that, that lurk.

548
00:29:40,800 --> 00:29:43,700
So let's see if this compiles it does.

549
00:29:43,800 --> 00:29:46,400
Of course, it doesn't mean it works quick check just make sure

550
00:29:46,400 --> 00:29:47,800
everything makes some sense.

551
00:29:48,000 --> 00:29:51,600
We've got the sample pose here and we're just setting that to be

552
00:29:51,600 --> 00:29:52,800
sequential samples.

553
00:29:53,200 --> 00:29:56,300
moving by D sample which of course May mean we're not moving a whole

554
00:29:56,300 --> 00:29:59,000
sample index at a time it's just sequentially where we're sampling

555
00:29:59,000 --> 00:29:59,400
from

556
00:30:00,400 --> 00:30:01,600
It could be more than one sample time.

557
00:30:01,600 --> 00:30:02,500
Could be anything, really?

558
00:30:03,100 --> 00:30:07,100
We then grab our sample index out of it by essentially truncating, the

559
00:30:07,100 --> 00:30:10,100
value, which is a floor in this case because we're, you know, we're

560
00:30:10,100 --> 00:30:10,900
positive numbers.

561
00:30:11,500 --> 00:30:15,700
We then take the fractional value to figure out how far we are by

562
00:30:15,700 --> 00:30:19,200
taking the number that we just floored converting it back to real and

563
00:30:19,200 --> 00:30:22,300
subtracting it from the original sample, post to get just the

564
00:30:22,300 --> 00:30:27,000
fractional portion, we then go ahead and grab out those samples,

565
00:30:27,100 --> 00:30:27,600
right?

566
00:30:27,700 --> 00:30:29,800
We grab out the actual sample locations.

567
00:30:30,000 --> 00:30:32,100
Then the their neighbor to their right.

568
00:30:33,100 --> 00:30:35,900
And then we do the lerp, right?

569
00:30:35,900 --> 00:30:40,300
We multiply the fluoride sample value by the inverse of the fraction

570
00:30:40,300 --> 00:30:43,600
and the sample value that will ceiling by the fraction to do that

571
00:30:43,800 --> 00:30:45,200
standard again.

572
00:30:45,200 --> 00:30:46,100
Standard blend equation.

573
00:30:46,100 --> 00:30:49,200
Everyone should be super comfortable that by now because we've done it

574
00:30:49,200 --> 00:30:53,200
so many times, all right?

575
00:30:57,900 --> 00:31:01,600
And let's just double check by setting, some kind of a really weird

576
00:31:01,700 --> 00:31:06,000
sample rate on this particular sound here, just to make sure that we

577
00:31:06,000 --> 00:31:07,000
get something weird.

578
00:31:14,400 --> 00:31:15,800
So it all sounds pretty good.

579
00:31:16,300 --> 00:31:17,700
We just got that nasty little bug.

580
00:31:17,700 --> 00:31:18,900
We also have to take care of

581
00:31:21,000 --> 00:31:27,700
So that all seems fine, but we have obviously somewhat reduce that, we

582
00:31:27,700 --> 00:31:28,800
might want to take care of here.

583
00:31:28,800 --> 00:31:30,400
So let's, let's think about our today's.

584
00:31:33,900 --> 00:31:37,100
So the first one is that sea bed with her termination condition is way

585
00:31:37,100 --> 00:31:39,800
too sloppy and that's not acceptable.

586
00:31:40,600 --> 00:31:42,700
We're going to hang in here all the time if we leave it like that.

587
00:31:42,700 --> 00:31:43,600
So that's no good.

588
00:31:44,700 --> 00:31:49,100
So, what we want to do here, first of all, I think before we actually

589
00:31:49,100 --> 00:31:50,100
clean it up the

590
00:31:50,500 --> 00:31:55,200
Lesion is we want to do the same thing we did with volume ended which

591
00:31:55,200 --> 00:31:56,600
is that we want to set.

592
00:31:56,600 --> 00:31:58,900
Instead we want to set sound finished.

593
00:31:58,900 --> 00:32:05,500
Here we essentially want something that says like you know, input

594
00:32:05,500 --> 00:32:11,100
ended or something like that and then we'll use input ended like input

595
00:32:11,100 --> 00:32:12,500
samples ended, right?

596
00:32:12,500 --> 00:32:18,400
So that we can know that that we either did or did not expect

597
00:32:18,400 --> 00:32:19,300
ourselves to end.

598
00:32:19,300 --> 00:32:20,500
And the reason I'm doing

599
00:32:20,500 --> 00:32:23,900
Doing that is because there's a bunch of kind of finicky meth in here.

600
00:32:24,300 --> 00:32:27,000
And while we do want to go through and make sure that we get it as

601
00:32:27,000 --> 00:32:28,000
correct as we can.

602
00:32:28,100 --> 00:32:31,800
But we don't want our to do is have our program hang if we made a

603
00:32:31,800 --> 00:32:34,500
mistake somewhere because it's very easy to have a mistake in there.

604
00:32:34,500 --> 00:32:39,400
That's hard to find that we don't see but that's some player some poor

605
00:32:39,400 --> 00:32:42,800
player finds because they did something we didn't test or whatever and

606
00:32:42,800 --> 00:32:44,000
happens to getting exactly what condition.

607
00:32:44,000 --> 00:32:48,000
So it would rather do is say that up here, right?

608
00:32:48,000 --> 00:32:50,400
Just like we did with the volume we want.

609
00:32:50,500 --> 00:32:54,900
Want to be able to say that the input samples ended like this, right?

610
00:32:54,900 --> 00:32:58,400
So that we say, okay, when we do our chunks to mix, we're going to

611
00:32:58,400 --> 00:32:59,800
expect it to do the total chunks.

612
00:33:00,000 --> 00:33:04,400
In the buffer, if we have to stop early because we don't think we'll

613
00:33:04,400 --> 00:33:06,200
have enough samples in our input buffer.

614
00:33:06,400 --> 00:33:08,800
Well that's fine, but remember that.

615
00:33:09,200 --> 00:33:12,300
So that we will actually exit appropriately.

616
00:33:12,400 --> 00:33:15,800
When we get down here, instead of checking some things that we just

617
00:33:15,800 --> 00:33:17,800
hope will line up based on the math that we did.

618
00:33:17,800 --> 00:33:20,500
But we have no idea if they actually will write.

619
00:33:20,600 --> 00:33:24,200
Or we know what we have, not hard guarantee that they actually will

620
00:33:24,200 --> 00:33:24,800
write.

621
00:33:25,500 --> 00:33:29,200
And so that's, that's, I think better there, right?

622
00:33:29,200 --> 00:33:29,800
And I just

623
00:33:30,000 --> 00:33:32,100
Had this in a case that was crashing will try that case.

624
00:33:32,100 --> 00:33:36,500
Again, not really a comprehensive way to do it but just to make sure

625
00:33:49,000 --> 00:33:50,500
So that, okay.

626
00:33:50,500 --> 00:33:52,200
And that's actually kind of interesting.

627
00:33:52,400 --> 00:33:54,800
Whoa, that's not what I would expect it at all.

628
00:33:57,300 --> 00:34:00,600
So I was going to say I could expect that to be slightly off because

629
00:34:00,600 --> 00:34:01,600
of this thing here.

630
00:34:02,300 --> 00:34:06,400
But yes, is that getting triggered?

631
00:34:06,600 --> 00:34:09,400
A my triggering that in a dumb way?

632
00:34:10,900 --> 00:34:14,199
I want I'm going to actually put that assertion a little further down

633
00:34:14,199 --> 00:34:18,600
because I want to want to kind of take a look here.

634
00:34:20,600 --> 00:34:24,300
I want to do this right?

635
00:34:26,199 --> 00:34:28,100
Because I was going to say we could have an off by one.

636
00:34:28,100 --> 00:34:33,500
They're certainly because of what we just witnessed or input sample

637
00:34:33,500 --> 00:34:37,699
played and so we do want to fix that, but I that was a very large

638
00:34:37,699 --> 00:34:38,199
number.

639
00:34:38,600 --> 00:34:40,100
So I would like to know why we were

640
00:34:42,000 --> 00:34:46,900
Okay, so I'm just putting the assert, I put the assert in a place

641
00:34:47,100 --> 00:34:48,500
where I'd be able to inspect the things.

642
00:34:48,500 --> 00:34:51,900
I actually wanted to inspect, if that makes sense.

643
00:34:53,600 --> 00:34:54,800
So, let's see.

644
00:34:54,900 --> 00:34:56,300
Loaded sound.

645
00:34:57,800 --> 00:35:03,900
Has a sample count of 480,000, really.

646
00:35:05,000 --> 00:35:05,600
Okay.

647
00:35:06,700 --> 00:35:08,700
I'm not sure, I believe you.

648
00:35:10,000 --> 00:35:14,700
That sounds like an unusually round number.

649
00:35:17,500 --> 00:35:18,200
Oh, you know what?

650
00:35:18,200 --> 00:35:18,700
But that's okay.

651
00:35:18,800 --> 00:35:19,400
That's fine.

652
00:35:19,400 --> 00:35:24,000
Because this is probably one of the music chunks, and we did set those

653
00:35:24,000 --> 00:35:25,700
to be 10 seconds of peace, I believe.

654
00:35:25,700 --> 00:35:30,300
So that's that's what it should have been, that's fine.

655
00:35:31,600 --> 00:35:33,700
And so, let's take a look at playing sound.

656
00:35:34,900 --> 00:35:38,700
See what that is and samples played.

657
00:35:38,800 --> 00:35:41,500
Wow, that is just not even close, right?

658
00:35:41,600 --> 00:35:43,600
That is not even remotely close.

659
00:35:45,000 --> 00:35:49,900
So that could just because our math is sloppy, right?

660
00:35:50,500 --> 00:35:53,700
But I would like to see what the actual situation is here.

661
00:35:53,700 --> 00:35:58,600
Before we before we conclude that if you would.

662
00:35:59,200 --> 00:35:59,800
So, let's see.

663
00:36:00,000 --> 00:36:03,400
Chunks remaining in sound is 312 894.

664
00:36:03,400 --> 00:36:05,000
74 5.

665
00:36:06,100 --> 00:36:09,800
So we round that down.

666
00:36:10,400 --> 00:36:12,800
2313, right?

667
00:36:13,400 --> 00:36:14,300
I guess that rounded up.

668
00:36:14,300 --> 00:36:14,700
Sorry.

669
00:36:14,900 --> 00:36:18,500
2313 and the chunks to mix.

670
00:36:18,500 --> 00:36:19,300
120 Chimes.

671
00:36:19,300 --> 00:36:19,700
Ringing sound.

672
00:36:19,700 --> 00:36:21,000
313.

673
00:36:22,700 --> 00:36:27,100
So the chunks to mix was something, I guess we don't really have a way

674
00:36:27,100 --> 00:36:29,200
of seeing what it was before hand.

675
00:36:30,200 --> 00:36:31,200
If that makes sense.

676
00:36:31,500 --> 00:36:34,000
This total chunks to mix been updated at this point.

677
00:36:34,700 --> 00:36:38,700
It has unfortunately but that's okay, we can reconstruct it.

678
00:36:38,700 --> 00:36:41,000
So chunks to mix and total chunks to mix.

679
00:36:41,800 --> 00:36:46,800
So we'll chunks to mix + trunks to mix.

680
00:36:50,300 --> 00:36:52,900
360 was the actual number there.

681
00:36:53,900 --> 00:37:00,100
So that's how many we had to go and what we said was, well, we think

682
00:37:00,100 --> 00:37:06,900
we've only got 313 so it makes sense that we would have to stop early

683
00:37:07,300 --> 00:37:09,200
right now.

684
00:37:09,400 --> 00:37:15,000
What's weird is why we thought we had to stop that early, but I could

685
00:37:15,000 --> 00:37:16,900
be just missing something obvious here.

686
00:37:16,900 --> 00:37:17,500
Saudi Sam.

687
00:37:17,700 --> 00:37:18,400
Apple chunk.

688
00:37:19,500 --> 00:37:21,700
Is just exactly what you would think.

689
00:37:21,700 --> 00:37:25,900
It would be the samples played in the sample count.

690
00:37:26,700 --> 00:37:32,300
So yeah, when we look at that number, I mean, I guess what I'm saying

691
00:37:32,300 --> 00:37:36,700
is, there's definitely a serious bug in here, I think because they

692
00:37:36,700 --> 00:37:43,100
should be no way for it to be that far off of where it would actually

693
00:37:43,100 --> 00:37:44,500
need to be, right.

694
00:37:47,500 --> 00:37:48,700
yeah, I'm gonna, I'm gonna

695
00:37:50,800 --> 00:37:51,700
Take a look at this guy.

696
00:37:53,900 --> 00:37:57,900
So chunks to mix is 480, total chunks to mix is also for it, as you

697
00:37:57,900 --> 00:38:03,600
would expect remaining chunks and sound here is 63 157, that's how

698
00:38:03,600 --> 00:38:05,900
many chunks are left in the sound according to this.

699
00:38:06,200 --> 00:38:09,600
So, let's see if that actually makes some sense if that's a reasonable

700
00:38:09,600 --> 00:38:10,700
thing to think about.

701
00:38:10,900 --> 00:38:16,100
So we've got 480, thousand is how many samples there are, right?

702
00:38:17,000 --> 00:38:19,200
And presumably there's been none played yet, right?

703
00:38:19,200 --> 00:38:20,600
Because I stepped ready beginning.

704
00:38:20,700 --> 00:38:21,900
So none of been played.

705
00:38:22,300 --> 00:38:23,600
So if we want to know how many

706
00:38:23,700 --> 00:38:28,500
These are going to be, we want to be able to see whatever, you know,

707
00:38:28,500 --> 00:38:32,900
D, sample chunk tells us is going to be the number of chunks in here.

708
00:38:32,900 --> 00:38:35,500
So let's see how many that's going to be right.

709
00:38:36,700 --> 00:38:37,500
Let's see here.

710
00:38:38,200 --> 00:38:43,700
If we said D sample, chunk so divide P sample chunk.

711
00:38:45,000 --> 00:38:46,900
How many deep of these are there?

712
00:38:47,700 --> 00:38:49,300
That's 63 thousand.

713
00:38:49,300 --> 00:38:51,000
One hundred fifty Seven point eight.

714
00:38:51,000 --> 00:38:51,300
Okay?

715
00:38:51,300 --> 00:38:53,500
So, that's the value that we're actually seeing.

716
00:38:55,800 --> 00:38:59,700
so if we were going to see how many of these

717
00:39:01,100 --> 00:39:03,800
Chunks were going to do if this is the number of chunks were going to

718
00:39:03,800 --> 00:39:10,400
do how many samples would we actually consume at that rate like where

719
00:39:10,400 --> 00:39:14,600
would playing sample actually be so we'd want to multiply it up.

720
00:39:14,600 --> 00:39:18,800
I do sample Chuck again and hey not surprisingly we get the exact

721
00:39:19,100 --> 00:39:23,500
right answer so that's all seems pretty good I guess the question.

722
00:39:23,500 --> 00:39:27,300
Now is what happens once we do some rounding in here.

723
00:39:27,300 --> 00:39:29,800
So chunks remaining in sound right?

724
00:39:30,000 --> 00:39:30,500
Many chunks.

725
00:39:30,500 --> 00:39:33,200
Is it think we're meeting in Sam's 63 158

726
00:39:38,000 --> 00:39:38,900
Yeah.

727
00:39:42,600 --> 00:39:43,600
Yeah.

728
00:39:45,900 --> 00:39:46,400
All right.

729
00:39:46,400 --> 00:39:46,800
Well,

730
00:39:49,000 --> 00:39:51,700
Let's go ahead and jump right to the bad case, and we'll see where

731
00:39:51,700 --> 00:39:52,200
we're at.

732
00:39:59,900 --> 00:40:00,500
All right.

733
00:40:01,800 --> 00:40:03,300
So, here we are at the bad case.

734
00:40:05,000 --> 00:40:11,800
We are asked to do 480 chunks, we believe there to be 313 chunks left

735
00:40:11,900 --> 00:40:13,100
that we could actually do.

736
00:40:14,300 --> 00:40:19,300
And so is that a again a reasonable value to think about so are

737
00:40:19,300 --> 00:40:20,100
loaded.

738
00:40:20,200 --> 00:40:21,100
We know are loaded one.

739
00:40:21,100 --> 00:40:29,400
Has four for an 80,000 are playing sound is that 47 76 to 1781, right?

740
00:40:29,900 --> 00:40:31,500
So let's take a look for

741
00:40:32,900 --> 00:40:34,400
This where we at.

742
00:40:35,300 --> 00:40:42,600
So we believe we have somewhere around that many samples left to play.

743
00:40:44,000 --> 00:40:47,200
And so, let's take a look at what the actual if we take a look at

744
00:40:47,200 --> 00:40:47,400
that.

745
00:40:47,400 --> 00:40:55,100
Actual value, 2 3, 7 8 to 18 and 99, 99, write x d sample, Charming, /

746
00:40:55,100 --> 00:40:57,500
D, sample trunk, right?

747
00:40:59,200 --> 00:41:00,300
What, what?

748
00:41:02,600 --> 00:41:03,500
What is happening?

749
00:41:06,300 --> 00:41:06,900
All right.

750
00:41:07,000 --> 00:41:10,600
Some kind of heinous nastiness happened with the cut and pasting

751
00:41:10,600 --> 00:41:11,000
there.

752
00:41:11,400 --> 00:41:12,400
We won't ask.

753
00:41:12,500 --> 00:41:17,200
We'll just assume that Visual Studio is doing something fantastic.

754
00:41:18,500 --> 00:41:20,800
So that's how many we think we're going to have.

755
00:41:21,000 --> 00:41:25,300
And so as we increment that, if we'd go ahead and take that actual

756
00:41:25,300 --> 00:41:30,700
number 9 to 3 if I 5654 509 or whatever and multiply it by D sample

757
00:41:30,700 --> 00:41:31,200
chunk.

758
00:41:34,300 --> 00:41:36,700
We get exactly the right value so that's good.

759
00:41:37,000 --> 00:41:45,900
If we are to multiply it by what we routed up to again super duper

760
00:41:45,900 --> 00:41:46,400
close.

761
00:41:46,400 --> 00:41:52,000
So yeah, that that seems like everything was done properly.

762
00:41:52,600 --> 00:41:54,300
So what's our problem here?

763
00:41:54,300 --> 00:41:56,800
We're not doing any volume LARPing.

764
00:41:57,800 --> 00:41:59,800
We start out at samples played, which is this?

765
00:42:00,300 --> 00:42:02,900
Which is what we think it should be right.

766
00:42:04,800 --> 00:42:07,100
And then we're going to add as we go.

767
00:42:07,500 --> 00:42:08,300
So you know what?

768
00:42:08,300 --> 00:42:13,300
Honestly, I wonder if this might just be a case of

769
00:42:15,300 --> 00:42:16,400
Of the accumulator.

770
00:42:16,700 --> 00:42:19,600
If you remember, I said this very early on.

771
00:42:19,800 --> 00:42:24,000
I said the accumulators may not actually have enough precision and we

772
00:42:24,000 --> 00:42:29,100
might have to do them as things that divide themselves out rather than

773
00:42:29,100 --> 00:42:33,000
actually doing an accumulation every time because the error, as it,

774
00:42:33,000 --> 00:42:36,900
accumulates can get up to the point where it's actually significant.

775
00:42:37,500 --> 00:42:38,200
So I don't know.

776
00:42:38,200 --> 00:42:38,700
We'll see.

777
00:42:38,700 --> 00:42:43,300
So, what we expect the sample position to actually be, right?

778
00:42:43,600 --> 00:42:44,800
We would expect the sample.

779
00:42:45,100 --> 00:42:53,200
Mission after we're done to be something like 47 7621 78 1.

780
00:42:53,500 --> 00:43:00,400
+ 2 3, 7 8 8 Loops 805, right?

781
00:43:00,400 --> 00:43:04,500
So that's what we would expect to see and Sample position is going to

782
00:43:04,500 --> 00:43:08,500
get chunks, chunks to mix going to be done, 313 times, right?

783
00:43:08,500 --> 00:43:09,700
It's going to be done this D.

784
00:43:09,700 --> 00:43:13,100
Sample chunks was going to add and I'm just betting that that's all

785
00:43:13,100 --> 00:43:14,700
that's happening here, right?

786
00:43:15,200 --> 00:43:18,000
So, when we come down here, let's see what samples are.

787
00:43:18,000 --> 00:43:23,400
And actually is, here we go, sample position.

788
00:43:25,800 --> 00:43:28,000
So yeah, really not.

789
00:43:28,200 --> 00:43:29,400
It's not close enough.

790
00:43:29,400 --> 00:43:32,400
I mean, it's bad enough.

791
00:43:32,400 --> 00:43:35,100
I think we should probably concerned about although that is not nearly

792
00:43:35,100 --> 00:43:36,500
as bad as what we were observing before.

793
00:43:36,500 --> 00:43:41,900
So what what actually happened in the case we were looking at, I

794
00:43:41,900 --> 00:43:45,200
wonder if I just sort of Miss looked at something, because it seems

795
00:43:45,200 --> 00:43:50,100
like what I was seeing was was way way worse than that, right?

796
00:43:52,800 --> 00:43:53,200
Yeah.

797
00:43:53,500 --> 00:43:55,700
Anyway, so let's see here.

798
00:43:56,000 --> 00:43:57,300
So loaded sound.

799
00:43:57,300 --> 00:44:01,000
We've got playing sounds and sound samples played with this.

800
00:44:01,600 --> 00:44:07,600
So, yeah, I feel like playing sound samples.

801
00:44:07,600 --> 00:44:10,500
Played, you can ignore that.

802
00:44:11,500 --> 00:44:14,700
You can ignore that disassembly.

803
00:44:15,500 --> 00:44:20,400
Set next statement, go to source code.

804
00:44:21,200 --> 00:44:23,700
So what I want to do is just see what that ends up being.

805
00:44:23,700 --> 00:44:26,600
Yes, so that's more what I would have expected but that's not what I

806
00:44:26,600 --> 00:44:27,400
remember seeing last.

807
00:44:27,400 --> 00:44:28,800
I remember it being way off.

808
00:44:29,000 --> 00:44:34,100
Now, maybe we just hit a different case but that is exactly what I was

809
00:44:34,100 --> 00:44:34,700
worried about.

810
00:44:34,700 --> 00:44:37,400
When I was saying before about that problem, where you're going to

811
00:44:37,400 --> 00:44:41,200
have this, this nasty situation of the accumulator is not going to be

812
00:44:41,200 --> 00:44:42,100
precise enough.

813
00:44:42,900 --> 00:44:45,400
And that definitely does look like a problem.

814
00:44:45,500 --> 00:44:50,200
All right, so I'm not sure exactly what we should do about that.

815
00:44:51,100 --> 00:44:52,300
I'll have to think about it.

816
00:44:52,600 --> 00:44:56,400
What we can do is we can make the since the sample position is

817
00:44:56,400 --> 00:44:58,100
actually relatively important to us.

818
00:44:58,300 --> 00:44:59,800
What we could do is we could spend

819
00:45:00,700 --> 00:45:04,200
The money we could spend the money on making sample position.

820
00:45:04,200 --> 00:45:05,300
Actually, the accurate.

821
00:45:05,300 --> 00:45:06,900
That's not particularly hard to do.

822
00:45:10,400 --> 00:45:10,800
Right.

823
00:45:13,300 --> 00:45:17,100
We could totally do that whether we want to do that, I don't know.

824
00:45:18,100 --> 00:45:21,500
But if we did want to do it, I can show you how we would do that.

825
00:45:21,800 --> 00:45:24,300
And then I guess I would just have to think about whether it's what we

826
00:45:24,300 --> 00:45:25,000
want to do.

827
00:45:25,000 --> 00:45:27,100
So here's how you would spend the money to do that.

828
00:45:27,900 --> 00:45:32,400
So when we come through here, we end up with this, you know, this D

829
00:45:32,400 --> 00:45:35,100
sample chunk which is basically saying how much we want to move.

830
00:45:36,200 --> 00:45:37,800
Overtime, right?

831
00:45:38,200 --> 00:45:41,600
And for something like volume, that's totally fine because we don't

832
00:45:41,600 --> 00:45:43,500
care for a little bit off when we get to the end.

833
00:45:43,900 --> 00:45:45,000
No one's going to be able to tell.

834
00:45:45,700 --> 00:45:48,100
But with the sample position since we care about things like where

835
00:45:48,100 --> 00:45:52,700
buffers end and all that sort of stuff, we may want to be more careful

836
00:45:52,700 --> 00:45:53,200
about that.

837
00:45:53,200 --> 00:45:57,800
And so what we want to do here is basically change up to saying that

838
00:45:57,800 --> 00:46:00,900
we instead of a sample position that's accumulated over time and where

839
00:46:00,900 --> 00:46:03,400
the floating point or you can build up what we want to do is say we

840
00:46:03,400 --> 00:46:05,700
have a begin sample position and that we have

841
00:46:05,900 --> 00:46:07,600
And Sample position, right?

842
00:46:07,800 --> 00:46:11,700
And our begin sample position is just going to be equal to samples

843
00:46:11,700 --> 00:46:13,300
played, right?

844
00:46:13,800 --> 00:46:17,000
And our n sample position is just going to be whatever our begin

845
00:46:17,000 --> 00:46:18,300
sample position was.

846
00:46:19,900 --> 00:46:23,500
And we would like it to come out to be whatever.

847
00:46:23,500 --> 00:46:28,200
The, the actual ending was that we have in mind up here, right?

848
00:46:28,200 --> 00:46:31,100
In fact, what we could do is move this up here and actually do this

849
00:46:31,100 --> 00:46:34,800
calculation exactly perfect as well, right?

850
00:46:35,000 --> 00:46:35,600
So we could say,

851
00:46:35,800 --> 00:46:40,100
Well, the begin sample position should be, you know, samples played

852
00:46:40,100 --> 00:46:43,800
the N sample position should be whatever the begin sample position

853
00:46:43,800 --> 00:46:48,700
was, you know, plus you know, the chunks to mix times the D sample

854
00:46:48,700 --> 00:46:49,900
chunk, right?

855
00:46:50,100 --> 00:46:50,700
Like so on.

856
00:46:51,900 --> 00:46:53,400
In fact, that's probably fine now.

857
00:46:53,400 --> 00:46:55,400
I think we can only be off by a little bit, so never mind.

858
00:46:55,400 --> 00:46:56,000
We don't have to do it.

859
00:46:56,000 --> 00:46:58,100
If we don't have to do it that exact we can just do it like this down

860
00:46:58,100 --> 00:46:58,400
here.

861
00:46:59,400 --> 00:47:01,600
So the chunks to mix, we multiply by the do sample.

862
00:47:01,600 --> 00:47:04,600
Chunk, that will give us the beginning in the end, right?

863
00:47:04,800 --> 00:47:05,700
And then instead of saying

864
00:47:05,800 --> 00:47:07,200
Position being an accumulator.

865
00:47:07,500 --> 00:47:09,700
What we would do here is we would just get rid of that concept

866
00:47:09,700 --> 00:47:10,300
altogether.

867
00:47:11,100 --> 00:47:14,300
We would get rid of the accumulator, we would say that this was going

868
00:47:14,300 --> 00:47:16,200
to be n sample position, right?

869
00:47:16,200 --> 00:47:17,800
So we just hop right to it there.

870
00:47:19,700 --> 00:47:22,800
And then sample position would just be single we back compute as we

871
00:47:22,800 --> 00:47:24,300
step, right?

872
00:47:24,600 --> 00:47:26,900
So the way that we would do that is we say, well, we know that Loop

873
00:47:26,900 --> 00:47:30,900
index goes from zero to chunks to mix, right?

874
00:47:31,700 --> 00:47:35,400
So what we want to do is have some way of quickly recovering what the

875
00:47:35,400 --> 00:47:36,700
samples played should be.

876
00:47:37,400 --> 00:47:38,700
I don't start with sampler to be

877
00:47:41,800 --> 00:47:43,200
Based on that Loop index.

878
00:47:44,900 --> 00:47:48,200
So, you want to take the loop index and we basically want to multiply

879
00:47:48,200 --> 00:47:50,300
it by a coefficient, right?

880
00:47:50,800 --> 00:47:54,800
Which is, you know, one over chunks to mix, basically, right?

881
00:47:55,300 --> 00:47:56,000
That makes sense.

882
00:47:56,400 --> 00:47:59,800
So that as it moves towards chunks to mix, we

883
00:48:00,000 --> 00:48:04,100
We get closer and closer to 1, we get we get closer closer to whatever

884
00:48:04,100 --> 00:48:05,900
the value is that we wanted, right?

885
00:48:07,100 --> 00:48:08,100
In fact, we don't really want image.

886
00:48:08,100 --> 00:48:09,400
That would that would move from 0 to 1.

887
00:48:09,400 --> 00:48:12,400
We still have to multiply, we still have to blend between these two

888
00:48:12,400 --> 00:48:12,800
guys.

889
00:48:13,400 --> 00:48:16,300
So what we can actually do is I guess we can do that a little bit more

890
00:48:16,300 --> 00:48:17,100
straightforward.

891
00:48:17,300 --> 00:48:22,500
What we can do is, is this right plus Loop index see which is just

892
00:48:22,500 --> 00:48:27,100
whatever we would have to multiply Loop index by, to move it to n

893
00:48:27,100 --> 00:48:28,600
sample position, right?

894
00:48:28,900 --> 00:48:30,600
And so, what's that going to be right?

895
00:48:30,600 --> 00:48:33,700
Well, we know that we're going to have it range from zero to chunks to

896
00:48:33,700 --> 00:48:36,600
mix - one like the final one is going to be chunks to mix.

897
00:48:37,000 --> 00:48:38,500
Minus 1, right?

898
00:48:39,700 --> 00:48:43,600
And this n sample position, of course we don't want to actually end

899
00:48:43,800 --> 00:48:47,400
there that's like one past where we want to end, right?

900
00:48:47,400 --> 00:48:51,100
Because the chunks to mix, that's how many we will be at, after we do

901
00:48:51,100 --> 00:48:53,100
the last one not before.

902
00:48:54,100 --> 00:48:57,300
So I believe that Loop in this coefficient is just going to be

903
00:48:57,300 --> 00:48:57,700
whatever.

904
00:48:57,700 --> 00:49:01,100
The final, whatever the and Sample vision is - the beginning sample

905
00:49:01,100 --> 00:49:01,400
position.

906
00:49:01,400 --> 00:49:06,700
So however far we have to go / whatever the

907
00:49:06,800 --> 00:49:12,300
Chunks to mix is right and that way we can just take Loop index.

908
00:49:12,300 --> 00:49:16,900
And and with a multiplying an ad here, we can just go ahead and

909
00:49:16,900 --> 00:49:19,900
reconstructs a position entirely and we don't have to accumulate it,

910
00:49:20,400 --> 00:49:20,900
right.

911
00:49:21,800 --> 00:49:23,800
I think that's a little bit more correct.

912
00:49:23,800 --> 00:49:24,600
Let's take a look.

913
00:49:31,900 --> 00:49:32,500
So, let's see.

914
00:49:32,500 --> 00:49:34,400
Here is our bad case again.

915
00:49:36,800 --> 00:49:38,500
Let's see how we do this time.

916
00:49:38,600 --> 00:49:45,500
So we come through here and we're going to end C and put sample.

917
00:49:45,500 --> 00:49:49,000
Oops, that's not what I meant to do input sample, and it's we come in

918
00:49:49,000 --> 00:49:56,800
here and let's see our samples played, that's perfect right.

919
00:49:56,800 --> 00:49:58,000
Where we thought it should be.

920
00:49:58,800 --> 00:49:59,600
That's great.

921
00:50:00,300 --> 00:50:00,600
Yeah.

922
00:50:08,500 --> 00:50:12,900
So hopefully that makes some sense what I did there and I'm going to

923
00:50:12,900 --> 00:50:16,900
explain it just kind of really simply on the on the Blackboard for a

924
00:50:16,900 --> 00:50:20,300
second just so people understand because it's pretty useful thing for

925
00:50:20,300 --> 00:50:21,100
people to know.

926
00:50:21,500 --> 00:50:25,000
So let me just go ahead and say it pretty pretty straightforward here.

927
00:50:25,400 --> 00:50:28,400
So accumulation

928
00:50:31,600 --> 00:50:38,300
Versus I guess I should say accumulation versus explicit.

929
00:50:38,300 --> 00:50:41,400
I don't know what you want to call the, the other kind, I think about

930
00:50:41,400 --> 00:50:41,700
it.

931
00:50:42,800 --> 00:50:47,500
So, if you have something like, we had, where we need to the sample

932
00:50:47,500 --> 00:50:51,200
position and that's that operation right?

933
00:50:52,000 --> 00:50:53,900
There's two ways that we could phrase it.

934
00:50:54,000 --> 00:50:56,000
So, we have some value, right?

935
00:50:56,000 --> 00:50:59,600
We have taught, you know, we have some Loop index, I guess we'll just

936
00:50:59,600 --> 00:50:59,800
call it.

937
00:51:00,900 --> 00:51:05,400
And, you know, for any given I were coming out with some value, right?

938
00:51:05,400 --> 00:51:07,900
And this case, it's the sample position, right?

939
00:51:09,300 --> 00:51:12,200
So in this case we've got our F of I is going to be the sample

940
00:51:12,200 --> 00:51:12,700
position.

941
00:51:13,000 --> 00:51:16,200
Now, if you can just there's there's different ways that we could

942
00:51:16,200 --> 00:51:17,600
choose to compute this right?

943
00:51:17,600 --> 00:51:21,300
One way that we could choose to compute It Is by picking whatever the

944
00:51:21,300 --> 00:51:22,600
first thing is.

945
00:51:22,700 --> 00:51:23,400
So whatever.

946
00:51:23,400 --> 00:51:25,500
F of 0 is right?

947
00:51:25,800 --> 00:51:28,000
And then adding I

948
00:51:30,500 --> 00:51:37,900
Times the times, whatever the the the Delta is right.

949
00:51:38,300 --> 00:51:42,900
Whatever the Delta is from from, you know, from one from one to the

950
00:51:42,900 --> 00:51:43,800
next, right?

951
00:51:43,900 --> 00:51:47,600
So, we can always say, okay, we can start at the first value and we

952
00:51:47,600 --> 00:51:52,300
can recover any one of these values right by just multiplying,

953
00:51:52,300 --> 00:51:54,100
whichever one we are on by however much.

954
00:51:54,100 --> 00:51:57,500
The change is per per step, right?

955
00:51:58,700 --> 00:52:01,800
That's when we do it another way to do it, right?

956
00:52:01,800 --> 00:52:05,400
Is saying that, well, whatever the f of I is, it's just recursive,

957
00:52:05,500 --> 00:52:06,100
right?

958
00:52:06,300 --> 00:52:11,100
So F of 0 is going to equal something and F of I is just going to

959
00:52:11,100 --> 00:52:16,600
equal, you know, it's you know what they inductive I guess is what

960
00:52:16,600 --> 00:52:17,500
this was be called.

961
00:52:19,100 --> 00:52:22,000
You know, like those inductive proofs that might be a reasonable name

962
00:52:22,000 --> 00:52:26,500
for it, it's just going to be whatever the previous one was right.

963
00:52:27,300 --> 00:52:28,400
Plus the delta

964
00:52:29,500 --> 00:52:30,300
Does that make sense?

965
00:52:31,200 --> 00:52:33,900
And so we were using this method here.

966
00:52:33,900 --> 00:52:37,700
We were basically saying okay we're going to start F of 0 at some

967
00:52:37,700 --> 00:52:38,600
value, right?

968
00:52:38,600 --> 00:52:40,300
Whatever it is, right?

969
00:52:40,500 --> 00:52:41,400
The samples played.

970
00:52:41,400 --> 00:52:43,600
And then anytime we need an f.

971
00:52:43,600 --> 00:52:47,000
I we're just going to assume that we kept whatever the previous one

972
00:52:47,000 --> 00:52:49,900
is, and we're going to add in whatever the Delta is.

973
00:52:49,900 --> 00:52:53,900
So we would have loops, you know, we have our for Loop here, right?

974
00:52:53,900 --> 00:52:58,800
And what we would do is we would say something like, oh at the top, we

975
00:52:58,800 --> 00:53:01,200
would just say, you know, whatever our value is.

976
00:53:01,200 --> 00:53:04,600
Equals something and then in here we would say our value equals

977
00:53:04,800 --> 00:53:06,800
whatever the Delta is, right?

978
00:53:06,900 --> 00:53:09,600
So that would correspond to this this kind of a construction, right?

979
00:53:09,600 --> 00:53:11,100
That's this is how we would do it.

980
00:53:12,100 --> 00:53:15,800
And the problem with that is every time you do an addition like that,

981
00:53:16,000 --> 00:53:18,400
you can have a rounding error, right?

982
00:53:18,400 --> 00:53:20,800
Because floating-point only has a certain amount of precision.

983
00:53:21,000 --> 00:53:23,600
And so when you're dealing with numbers, like we were with like 9 1,

984
00:53:23,600 --> 00:53:25,900
.9, F was like the step size or whatever.

985
00:53:25,900 --> 00:53:29,800
They're when you're dealing with with a fractional stuff like that.

986
00:53:29,900 --> 00:53:31,700
You get rounding error every time you do that.

987
00:53:31,700 --> 00:53:35,700
And we know that these numbers are like, you know, 400 right?

988
00:53:35,700 --> 00:53:37,000
Or something like this, right?

989
00:53:37,200 --> 00:53:41,800
So we have 400 rounding errors building themselves up, as we do this,

990
00:53:41,900 --> 00:53:44,500
This right, rounding error rounding, error rounding, error rounding,

991
00:53:44,500 --> 00:53:45,500
error, rounding error, rather.

992
00:53:45,500 --> 00:53:49,700
So you do an operation like this, once you don't necessarily care,

993
00:53:49,700 --> 00:53:50,800
that's got rounding error.

994
00:53:50,800 --> 00:53:54,400
You an operation like this eight hundred times, and each one depends

995
00:53:54,400 --> 00:53:55,500
on the previous one.

996
00:53:55,700 --> 00:53:58,600
You compound, the rounding, error, rounding, error, rounding, error,

997
00:53:58,600 --> 00:53:59,400
rounding error.

998
00:54:01,200 --> 00:54:04,500
And hey, when you get to the end, it's not where you expect it to be

999
00:54:04,500 --> 00:54:05,500
by quite a bit.

1000
00:54:06,500 --> 00:54:10,300
On the other hand, if we were to do it like this, then we only have

1001
00:54:10,300 --> 00:54:12,000
rounding error in a couple places.

1002
00:54:12,100 --> 00:54:13,900
We only have rounding error on this.

1003
00:54:13,900 --> 00:54:18,300
Add this multiply and the original storage amount of these values,

1004
00:54:18,300 --> 00:54:20,300
which by the way we had here as well, right?

1005
00:54:20,300 --> 00:54:23,800
So, we had rounding error, just in Computing, the values to begin with

1006
00:54:23,900 --> 00:54:25,300
that didn't change between the two.

1007
00:54:25,800 --> 00:54:28,800
And so this one just has, you know, to rounding errors in it and this

1008
00:54:28,800 --> 00:54:31,800
one has the loop count number of rounding errors in it.

1009
00:54:33,100 --> 00:54:36,100
And so, you know, sometimes you care and in this

1010
00:54:36,400 --> 00:54:37,800
Particular case, we care.

1011
00:54:39,900 --> 00:54:42,600
As you can see, from it actually happening in practice.

1012
00:54:43,500 --> 00:54:47,100
So, in this case, it's free free for us to do the

1013
00:54:49,500 --> 00:54:50,600
calculations this way.

1014
00:54:51,100 --> 00:54:55,400
And so, since we are doing that since we, since we have found that a

1015
00:54:55,400 --> 00:54:59,700
reasonable thing to be concerned about it seems like maybe the things

1016
00:54:59,700 --> 00:55:04,800
that are done that way, should just be all back computed right?

1017
00:55:05,000 --> 00:55:07,300
Because we could do the same thing here, right?

1018
00:55:07,300 --> 00:55:08,500
For our volumes.

1019
00:55:08,700 --> 00:55:13,200
Instead of having them be a human errors which would also be highly

1020
00:55:13,200 --> 00:55:13,600
erroneous.

1021
00:55:13,600 --> 00:55:18,900
Potentially what we could do is make them into the M1, 28 for volume.

1022
00:55:19,400 --> 00:55:23,600
Zero and volume one here at that are just computed this exact same

1023
00:55:23,600 --> 00:55:23,900
way.

1024
00:55:24,000 --> 00:55:30,400
So they're mmps is of whatever the begin volumes are and then we just

1025
00:55:30,400 --> 00:55:33,700
multiply D volume chunk, right?

1026
00:55:33,700 --> 00:55:39,300
MLPs by again, whatever this, this sort of

1027
00:55:43,200 --> 00:55:47,000
A value based on the loop index basically, right?

1028
00:55:47,700 --> 00:55:51,300
So we're at the Q&A.

1029
00:55:51,500 --> 00:55:52,500
Well, you know what?

1030
00:55:52,500 --> 00:55:53,500
That I won't do that.

1031
00:55:53,500 --> 00:55:54,500
I will do it tomorrow.

1032
00:55:54,700 --> 00:55:57,700
If we rescue a, you know, exactly what I'm about to do.

1033
00:55:58,100 --> 00:56:01,400
So anyone who wants to do that tonight, for homework can go ahead and

1034
00:56:01,400 --> 00:56:03,500
do that, but it is time for the Q&A now.

1035
00:56:04,600 --> 00:56:05,900
So let's go ahead and do that.

1036
00:56:18,100 --> 00:56:19,600
And then what I'd also like to do.

1037
00:56:19,600 --> 00:56:22,100
So I'll move that up there so I guess.

1038
00:56:24,200 --> 00:56:32,600
Do Casey, move volume here to explicit.

1039
00:56:33,800 --> 00:56:39,800
And the other thing we would want to do there is make sure that we are

1040
00:56:39,800 --> 00:56:41,900
always think.

1041
00:56:41,900 --> 00:56:43,600
Well I think that's all good.

1042
00:56:44,800 --> 00:56:45,200
Yeah.

1043
00:56:46,100 --> 00:56:49,500
I think that's all good but we could do is double we could just be

1044
00:56:49,500 --> 00:56:53,400
absolutely sure here we can say if playing sound samples played is

1045
00:56:53,400 --> 00:56:59,600
less than zero equals zero just to just to add a little bit extra.

1046
00:57:00,000 --> 00:57:01,100
The unnecessary security.

1047
00:57:02,300 --> 00:57:03,100
All right.

1048
00:57:04,600 --> 00:57:05,200
All right.

1049
00:57:05,200 --> 00:57:09,200
Does anyone have any questions on that please prefix the questions

1050
00:57:09,200 --> 00:57:11,100
with Q: so that I will see them.

1051
00:57:11,100 --> 00:57:13,000
You folks know the drill

1052
00:57:32,700 --> 00:57:35,100
Girl, Linda Bloom says you're a rad dude.

1053
00:57:35,700 --> 00:57:36,100
Technically.

1054
00:57:36,100 --> 00:57:37,300
No not anymore.

1055
00:57:38,300 --> 00:57:40,700
I don't work for rad anymore.

1056
00:57:40,900 --> 00:57:42,200
I used to work for rad.

1057
00:57:43,300 --> 00:57:48,500
And and so that would have made me a rad dude, but nowadays, I'm a

1058
00:57:48,500 --> 00:57:49,600
normal dude.

1059
00:57:56,200 --> 00:57:59,300
What would you recommend as a good tutorial Source or area to learn

1060
00:57:59,300 --> 00:58:00,300
how to code?

1061
00:58:01,200 --> 00:58:02,900
Well, to be honest, I don't know.

1062
00:58:05,500 --> 00:58:10,700
I it's on my list of things to do some day to make a good tutorial

1063
00:58:10,700 --> 00:58:14,200
series for brand new people, which is, you know, handmade Heroes kind

1064
00:58:14,200 --> 00:58:15,900
of for people who sort of know how to program.

1065
00:58:18,200 --> 00:58:23,000
And so you know, the the day one of handmade hero is still fairly

1066
00:58:23,000 --> 00:58:23,400
assumes.

1067
00:58:23,400 --> 00:58:25,200
You know, some familiarity with programming.

1068
00:58:25,400 --> 00:58:28,600
There is a five-part intro to see series that I did as a test stream

1069
00:58:28,600 --> 00:58:34,200
before handmade hero but it's, you know, it's only five days so it

1070
00:58:34,200 --> 00:58:35,100
doesn't really cover everything.

1071
00:58:35,300 --> 00:58:36,600
Thing that would actually need to be covered.

1072
00:58:36,600 --> 00:58:37,000
So,

1073
00:58:38,500 --> 00:58:41,600
you know, someday there's probably a good hundred day series or

1074
00:58:41,600 --> 00:58:44,700
something to do, which is just like introduction to programming for

1075
00:58:44,700 --> 00:58:47,900
people who've never done it before but I don't know what's good in Leo

1076
00:58:47,900 --> 00:58:48,500
of that.

1077
00:58:50,000 --> 00:58:58,100
Robot chocolate Dino, is your Cindy clear 20 faster than a memset?

1078
00:59:02,100 --> 00:59:08,400
So I would assume just thinking off the top of my head, I would assume

1079
00:59:08,400 --> 00:59:14,700
that they would both be the same speed but I don't know.

1080
00:59:15,400 --> 00:59:16,400
That's my assumption.

1081
00:59:17,000 --> 00:59:21,600
And the reason I say that is just because the majority of the time of

1082
00:59:21,600 --> 00:59:25,900
that clear is going to be just streaming out the memory.

1083
00:59:26,800 --> 00:59:31,600
So I would assume that no matter how you did it, it would be fine, we

1084
00:59:31,600 --> 00:59:33,100
might be a little faster.

1085
00:59:33,100 --> 00:59:36,500
We could maybe a little bit faster because we know that the things are

1086
00:59:36,500 --> 00:59:40,200
aligned and memset might have to test for us to say that they were

1087
00:59:40,200 --> 00:59:40,800
aligned.

1088
00:59:43,300 --> 00:59:47,200
But you know, I mean, if you want to look, if you if you want to get

1089
00:59:47,200 --> 00:59:50,300
some perspective on what it's doing,

1090
00:59:52,100 --> 00:59:58,700
In there, you can certainly try and see what ends up happening.

1091
00:59:58,700 --> 00:59:59,900
So you know if

1092
01:00:00,000 --> 01:00:06,400
I was to come in here and actually do the same stuff, right?

1093
01:00:06,700 --> 01:00:13,900
So, if I wanted to mess that, you know, death zero with chunk count X

1094
01:00:14,000 --> 01:00:19,600
size of mmm 128, like, so.

1095
01:00:20,900 --> 01:00:24,700
And I think that's the format for memset quite remember.

1096
01:00:26,300 --> 01:00:29,300
But if we, you know, if we did something like that,

1097
01:00:32,300 --> 01:00:33,000
See here.

1098
01:00:35,100 --> 01:00:36,000
Sorry I got a little business.

1099
01:00:36,000 --> 01:00:39,100
I'd so if we did something like that you should be able.

1100
01:00:39,100 --> 01:00:43,500
Well I got actually have memset better.

1101
01:00:46,600 --> 01:00:47,100
What is it?

1102
01:00:47,100 --> 01:00:48,500
Memory .h.

1103
01:00:48,600 --> 01:00:49,400
Yeah there we go.

1104
01:00:50,300 --> 01:00:58,400
So you know we can take a look at these guys just to get a feel for

1105
01:00:58,400 --> 01:01:00,000
what it's actually happening.

1106
01:01:02,100 --> 01:01:06,000
And so if we take a look in here, you can see what's going on, right?

1107
01:01:06,500 --> 01:01:13,000
We're just doing move aps's in a loop like, so, right.

1108
01:01:13,400 --> 01:01:24,300
And I'll be honest, I I don't really understand why it looks like

1109
01:01:24,300 --> 01:01:29,300
that, but so you can see this is the instruction stream, right?

1110
01:01:29,700 --> 01:01:30,600
For that.

1111
01:01:30,800 --> 01:01:31,500
That's happening.

1112
01:01:31,900 --> 01:01:33,300
All right so you can watch it.

1113
01:01:33,300 --> 01:01:33,700
Go.

1114
01:01:34,700 --> 01:01:37,100
So to get some idea of what's involved.

1115
01:01:37,100 --> 01:01:38,600
That's, that's what's involved.

1116
01:01:38,600 --> 01:01:40,300
I think for the most part, right?

1117
01:01:41,000 --> 01:01:47,100
And we could we can grab this out, put it into the scratch buffer.

1118
01:01:47,500 --> 01:01:50,700
That's that's what's actually right getting executed.

1119
01:01:51,500 --> 01:01:56,100
And we could so you can see you can see exactly what it's doing to

1120
01:01:56,100 --> 01:01:56,500
write.

1121
01:01:56,700 --> 01:02:00,600
Its incrementing the values and then

1122
01:02:00,700 --> 01:02:02,000
I'm storing them out.

1123
01:02:02,200 --> 01:02:06,300
So you can see here, it's taking rcx.

1124
01:02:08,000 --> 01:02:11,200
And storing it in a temporary, right?

1125
01:02:11,700 --> 01:02:15,000
Rcx is the pointer the desk 0 pointer.

1126
01:02:15,200 --> 01:02:19,200
It's an incrementing, the dussehra pointer and then using the old

1127
01:02:19,200 --> 01:02:21,700
value that it kept the temporary to do the store.

1128
01:02:22,900 --> 01:02:28,600
Then it goes ahead and again, gets a temporary for for our, for our BX

1129
01:02:29,700 --> 01:02:32,000
and and does the exact same thing now.

1130
01:02:34,000 --> 01:02:36,100
You know, I'm not really an x 64 guy.

1131
01:02:36,600 --> 01:02:41,300
If Fabien were here, I would ask him why it's doing it that way,

1132
01:02:41,300 --> 01:02:47,100
because it feels like you just rearrange these and just do xmm word

1133
01:02:47,100 --> 01:02:50,100
pointer rcx, right?

1134
01:02:50,200 --> 01:02:53,500
And then add to our CX afterwards, so that you can get rid of this

1135
01:02:53,500 --> 01:02:54,100
mauve.

1136
01:02:54,800 --> 01:02:58,800
But I suspect assuming, I mean, the compartment just be dumb, right?

1137
01:02:58,800 --> 01:02:59,700
And that made us just been a

1138
01:03:00,000 --> 01:03:04,400
But thing to do, but assuming that that's a smart thing to do, it may

1139
01:03:04,400 --> 01:03:08,100
be that there's a good reason why you don't want to do that because

1140
01:03:08,100 --> 01:03:09,400
you want to like overload.

1141
01:03:09,500 --> 01:03:13,800
You know, you want this ad to be overlapped with the move APS and so

1142
01:03:13,800 --> 01:03:16,200
you want both values live or something.

1143
01:03:16,200 --> 01:03:16,700
I don't know.

1144
01:03:18,000 --> 01:03:20,800
So, anyway, but that's the entirety of the code for our memset.

1145
01:03:20,800 --> 01:03:26,400
So now what we can do, is look at the code for the memset in the C

1146
01:03:26,600 --> 01:03:27,400
library,

1147
01:03:30,000 --> 01:03:30,900
Which is here.

1148
01:03:31,400 --> 01:03:33,700
And so, so, here we go.

1149
01:03:37,100 --> 01:03:43,600
Into that and you know, we're going we're going there.

1150
01:03:45,200 --> 01:03:49,800
So yeah, I mean just looking at this I guess I would say, I think we

1151
01:03:49,800 --> 01:03:54,500
probably should be either the same speed or faster because their Loop

1152
01:03:54,500 --> 01:03:59,100
is not not doing aligned and it's not doing wide.

1153
01:03:59,700 --> 01:04:02,900
So you know are we going to be faster?

1154
01:04:02,900 --> 01:04:04,100
Because it's probably just Bound by memory.

1155
01:04:04,100 --> 01:04:05,400
Anyway, are we going faster?

1156
01:04:05,400 --> 01:04:06,800
I don't know but I don't.

1157
01:04:06,900 --> 01:04:08,800
We could be slower, right?

1158
01:04:08,800 --> 01:04:09,900
Because I mean, look at this.

1159
01:04:09,900 --> 01:04:16,000
That's just, you know, that's definitely doing things less efficiently

1160
01:04:16,000 --> 01:04:19,300
than we were doing them if that makes sense.

1161
01:04:19,300 --> 01:04:23,300
So, and just to give you a comparison there, again, I don't

1162
01:04:23,300 --> 01:04:24,800
necessarily know the nature of your question.

1163
01:04:24,800 --> 01:04:28,000
Just trying to give you some perspective on how you could investigate

1164
01:04:28,000 --> 01:04:28,600
things like this.

1165
01:04:28,600 --> 01:04:30,600
So, you know, looking at this

1166
01:04:31,800 --> 01:04:33,800
So you look at how this is, this is working.

1167
01:04:34,700 --> 01:04:40,200
It's doing some kind of nastiness here, where I guess it decided that

1168
01:04:40,200 --> 01:04:43,800
it could write out several of these at a time, right?

1169
01:04:43,800 --> 01:04:44,300
You can see it.

1170
01:04:44,300 --> 01:04:52,500
Doing, writing out to rcx that RC X plus eight, then R CX plus 16.

1171
01:04:52,800 --> 01:05:00,200
So it's writing out like, you know, it 388 B values of time and then

1172
01:05:00,200 --> 01:05:01,000
it's moving.

1173
01:05:02,100 --> 01:05:06,800
Forward and writing backwards you know it's writing the you know - 28

1174
01:05:06,800 --> 01:05:10,500
- 20 - 18 negative 10 negative 8 so it's writing up right?

1175
01:05:11,900 --> 01:05:17,400
And so they're writing eights at a time and we're writing 16s and they

1176
01:05:17,400 --> 01:05:18,600
really don't have much less business.

1177
01:05:18,600 --> 01:05:20,900
Now what they do do is they do a little bit wider.

1178
01:05:20,900 --> 01:05:24,700
So you know, they have less iterations of the loop to do.

1179
01:05:24,900 --> 01:05:30,700
Because here's they're doing, we're writing 16s at a time they're

1180
01:05:30,800 --> 01:05:31,400
writing.

1181
01:05:32,000 --> 01:05:35,100
One, two, three, four.

1182
01:05:35,200 --> 01:05:41,400
So they're writing for different 16s at a time so they might get more

1183
01:05:41,400 --> 01:05:45,600
of a win for having from having less business to do with increments

1184
01:05:45,600 --> 01:05:49,000
because they have reduced the number of increments, right?

1185
01:05:51,100 --> 01:05:52,700
So there's that as well.

1186
01:05:53,000 --> 01:05:58,500
So you know, that's that's I guess what I'd say is you know now you

1187
01:05:58,500 --> 01:05:59,800
have some perspective on who's doing

1188
01:06:00,900 --> 01:06:03,900
If you really want to know which one's faster though same answer as

1189
01:06:03,900 --> 01:06:06,800
always, you got to time it and you got to time it in real world

1190
01:06:06,800 --> 01:06:07,500
scenarios.

1191
01:06:07,900 --> 01:06:10,700
So you would have to actually go in here and you know,

1192
01:06:12,800 --> 01:06:17,000
have passed something that actually did and if 0 around these two

1193
01:06:17,000 --> 01:06:22,100
guys, you know that did did this sort of thing actually get it in a

1194
01:06:22,200 --> 01:06:24,500
big enough thing the matter and then actually time it

1195
01:06:27,700 --> 01:06:30,500
But yes, so hopefully that gives you some perspective though, and you

1196
01:06:30,500 --> 01:06:31,300
saw, I did that, right?

1197
01:06:31,300 --> 01:06:36,000
So if you want to just get an idea of who's doing, what you can just

1198
01:06:36,000 --> 01:06:39,000
step into this assembly in an optimized build you notice.

1199
01:06:39,000 --> 01:06:41,100
I switched it optimized for us because otherwise the compiler, who

1200
01:06:41,100 --> 01:06:44,800
knows if I was going to do, but that would, you know, gives you just a

1201
01:06:44,800 --> 01:06:46,200
little bit perspective, what's going on?

1202
01:06:46,300 --> 01:06:48,500
If you actually didn't want to get down to the bottom of it of who's

1203
01:06:48,500 --> 01:06:51,200
really going to be faster again, you're going to have to time it.

1204
01:06:51,200 --> 01:06:54,000
But now at least you know who does what

1205
01:07:01,500 --> 01:07:04,900
Do you have a public style guide?

1206
01:07:11,400 --> 01:07:14,900
I guess I don't know what a public style guide is.

1207
01:07:18,200 --> 01:07:18,900
No.

1208
01:07:21,400 --> 01:07:22,800
I guess would be the answer.

1209
01:07:30,100 --> 01:07:32,700
I'm looking to learn something other than Java so I can have diverse

1210
01:07:32,700 --> 01:07:33,200
knowledge.

1211
01:07:33,300 --> 01:07:36,100
Any recommendations on how to go about doing that.

1212
01:07:38,500 --> 01:07:43,400
Well, I guess my recommendation would depend on what was that you were

1213
01:07:43,400 --> 01:07:47,500
trying to to diversify towards.

1214
01:07:47,900 --> 01:07:51,600
So like handmade hero for example, what we do here would be really

1215
01:07:51,600 --> 01:07:54,600
good for you if you were trying to diversify into like more low-level

1216
01:07:54,600 --> 01:07:58,400
programming and knowing exactly what the computer actually does with

1217
01:07:58,400 --> 01:08:02,500
the code that you write and how you manage memory and how you do a

1218
01:08:02,500 --> 01:08:03,700
bunch of things like that.

1219
01:08:04,800 --> 01:08:08,300
Because Java is usually about abstract you know being very abstract in

1220
01:08:08,300 --> 01:08:08,800
those ways.

1221
01:08:08,800 --> 01:08:10,700
You know you're on a virtual machine, you have all these other things,

1222
01:08:10,700 --> 01:08:14,300
you don't really connect with the CPU and stuff like that.

1223
01:08:15,200 --> 01:08:17,700
So you know, that's a good thing.

1224
01:08:17,700 --> 01:08:20,300
But you know, that may not be what you're trying to diversify into it,

1225
01:08:20,300 --> 01:08:21,500
what you're trying to diversify into.

1226
01:08:21,500 --> 01:08:25,399
It's like I want to try writing in a pure functional language or

1227
01:08:25,399 --> 01:08:26,100
something, right?

1228
01:08:26,100 --> 01:08:28,500
I want to know what that's like, or, right?

1229
01:08:28,600 --> 01:08:31,600
There's a lot of different Avenues you could explore.

1230
01:08:32,300 --> 01:08:34,300
I want to know what a declarative - like I like

1231
01:08:34,500 --> 01:08:37,200
Want to go play around prologue for a while because right, that would

1232
01:08:37,200 --> 01:08:38,500
really mess with your head.

1233
01:08:39,899 --> 01:08:44,600
So I think the the answer there really has to be about what do you

1234
01:08:44,600 --> 01:08:48,899
actually want your diverse diversity to be about?

1235
01:08:49,000 --> 01:08:51,600
And if it really is just every, a little bit of everything, then I

1236
01:08:51,600 --> 01:08:53,600
would say you probably want to do all sorts of stuff.

1237
01:08:53,600 --> 01:08:56,899
Do a little tiny product and ml do a little bit, you know, watch a

1238
01:08:56,899 --> 01:08:58,500
little handmade hero, do a little of this.

1239
01:08:58,500 --> 01:08:59,700
Do a little of that, right?

1240
01:09:01,399 --> 01:09:03,899
Go follow the instructions for making your own operating system on

1241
01:09:03,899 --> 01:09:04,700
Raspberry Pi.

1242
01:09:04,700 --> 01:09:08,000
You know, do do a whole bunch of different small things.

1243
01:09:08,100 --> 01:09:11,500
If all you want is just general diversity but if you have a particular

1244
01:09:11,600 --> 01:09:14,700
Avenue that you're looking at, when you're like I want to diversify

1245
01:09:14,700 --> 01:09:20,600
more in this direction, then I would say, think about what that is and

1246
01:09:20,600 --> 01:09:22,200
what kinds of projects you could do.

1247
01:09:22,200 --> 01:09:26,300
That would be most directly speaking to that.

1248
01:09:30,500 --> 01:09:33,100
At what point did you first feel like you could easily write software

1249
01:09:33,100 --> 01:09:34,000
independently?

1250
01:09:41,300 --> 01:09:44,300
I would say that I probably when I was 16.

1251
01:09:45,899 --> 01:09:49,100
and then I lost it again when I was 18 because I started doing

1252
01:09:49,100 --> 01:09:52,500
object-oriented programming, which is awful and then I gained it back

1253
01:09:52,500 --> 01:09:56,700
again, probably around twenty one, twenty two, when I switch back to

1254
01:09:56,700 --> 01:09:58,000
not just during programming,

1255
01:10:03,400 --> 01:10:05,100
Why is the sample index floating point?

1256
01:10:05,100 --> 01:10:06,400
Is it for the pitch shifting?

1257
01:10:06,800 --> 01:10:10,600
Yeah it is for the pitch, shifting it so that we can have the sample

1258
01:10:10,600 --> 01:10:13,000
back samples playback at an arbitrary rate.

1259
01:10:18,100 --> 01:10:21,400
Why do gaming companies like riots or Blizzard Entertainment to use?

1260
01:10:21,400 --> 01:10:25,100
C++ over all the rest would the other is not work.

1261
01:10:27,300 --> 01:10:34,600
So I mean, honestly, the answer there usually has to do with control.

1262
01:10:37,100 --> 01:10:41,500
I would say the way to look at C and C++ and why they are prevalent in

1263
01:10:41,500 --> 01:10:41,800
the game.

1264
01:10:41,800 --> 01:10:50,700
Industry is usually about risk management and control if you write,

1265
01:10:52,700 --> 01:10:55,900
you know, think about the scale at which these people are operating,

1266
01:10:56,400 --> 01:10:56,900
okay?

1267
01:10:58,600 --> 01:11:03,600
You take a game like League of Legends because you mentioned dry it.

1268
01:11:05,200 --> 01:11:13,100
There are many billions of dollars a year riding on that game for Ryan

1269
01:11:13,100 --> 01:11:14,300
entertainment, right?

1270
01:11:14,300 --> 01:11:17,500
I mean, it is, it is economically.

1271
01:11:18,000 --> 01:11:21,900
A massive, massive product

1272
01:11:24,000 --> 01:11:30,100
Now, if you program in C or C++ then, you know, one very basic thing

1273
01:11:30,400 --> 01:11:37,100
and that is that you pretty much will never have any unexpected thing

1274
01:11:37,100 --> 01:11:38,600
that you did not create.

1275
01:11:39,700 --> 01:11:45,400
Cause your game to slip or crash, or not run on a bun feels machines

1276
01:11:45,400 --> 01:11:46,400
or whatever, right?

1277
01:11:47,500 --> 01:11:50,800
You know, that that can't happen with your piece of code.

1278
01:11:51,300 --> 01:11:55,000
Now, it can still happen with the graphics driver and don't get me

1279
01:11:55,000 --> 01:11:55,900
started on that.

1280
01:11:56,900 --> 01:11:59,900
But what, you know is C and C++, is you compiled?

1281
01:12:00,000 --> 01:12:02,100
To a binary and everything that's happening in the game.

1282
01:12:02,100 --> 01:12:02,800
You wrote.

1283
01:12:05,200 --> 01:12:11,600
now, if on the other hand, you were to write it in say python

1284
01:12:13,700 --> 01:12:15,800
You now have no idea, right?

1285
01:12:15,800 --> 01:12:19,500
You could get to some part of your development process and all of a

1286
01:12:19,500 --> 01:12:24,800
sudden, something about pythons, internals starts rearing, its ugly

1287
01:12:24,800 --> 01:12:25,400
head.

1288
01:12:25,500 --> 01:12:30,700
And now, all of a sudden, you have absolutely no ability to actually,

1289
01:12:30,700 --> 01:12:33,300
do whatever it is that you need to ship your game because something,

1290
01:12:33,300 --> 01:12:38,900
in the core of python that you were using is, is busted, right?

1291
01:12:40,200 --> 01:12:45,600
And now your team suddenly has to shift from being an expert in League

1292
01:12:45,600 --> 01:12:48,800
of Legends, which is what they were suppose to be programming and you

1293
01:12:48,800 --> 01:12:52,400
have to switch over to being an expert on Python and write your own

1294
01:12:52,400 --> 01:12:56,100
python interpreter or take the open-source one and change it or do all

1295
01:12:56,100 --> 01:12:57,400
the other sort of things, right?

1296
01:12:59,300 --> 01:13:04,800
And so I suspect that since games have always been about important

1297
01:13:04,800 --> 01:13:09,200
hard performance, things 30 frames per second, 60 frames per second

1298
01:13:09,600 --> 01:13:10,700
maximizing.

1299
01:13:10,700 --> 01:13:14,400
You know, the impact that the technology has on the player experience,

1300
01:13:14,400 --> 01:13:17,800
all these sorts of things that other Tech other domains don't tend to

1301
01:13:17,800 --> 01:13:21,000
care about very much and don't have Central to their being

1302
01:13:22,200 --> 01:13:23,800
I would say that because of that.

1303
01:13:25,000 --> 01:13:29,300
They sort of probably, you know, I think that the industry grew up

1304
01:13:29,300 --> 01:13:30,700
with a very deep.

1305
01:13:30,700 --> 01:13:36,300
And I think probably well-founded mistrust of these technologies that

1306
01:13:36,300 --> 01:13:39,200
are meant to save programmer Time by saying, well, we don't really

1307
01:13:39,200 --> 01:13:43,600
know what happens in there is some memory, it's gets used and there's

1308
01:13:43,600 --> 01:13:47,000
some interpreters and they do some stuff, right.

1309
01:13:48,500 --> 01:13:52,000
And so, the C and C++ part is about that connection between knowing

1310
01:13:52,000 --> 01:13:54,900
that what you write controls directly with the CPU does, and you have

1311
01:13:54,900 --> 01:13:58,900
a very easy path of reasoning about what it will cost to do every

1312
01:13:58,900 --> 01:14:02,500
individual thing and there are no surprises so you can't get to a

1313
01:14:02,500 --> 01:14:05,200
point and then suddenly something you do that's very simple.

1314
01:14:05,400 --> 01:14:08,400
Completely changes the performance dynamics of your game that doesn't

1315
01:14:08,400 --> 01:14:09,300
happen, right?

1316
01:14:09,900 --> 01:14:12,900
Whereas in pretty much all the other prevalent languages Java, C sharp

1317
01:14:12,900 --> 01:14:16,300
python, it's not true because there's a virtual memory.

1318
01:14:16,500 --> 01:14:17,900
I'm sorry, there's a virtual machine underneath.

1319
01:14:18,000 --> 01:14:21,600
If you there's a garbage collector underneath you, who dares like all

1320
01:14:21,600 --> 01:14:25,000
kinds of built-in types that God knows what they do, blah blah blah,

1321
01:14:25,000 --> 01:14:25,500
right?

1322
01:14:26,500 --> 01:14:33,000
And so really I think that is what underlies, the mindset.

1323
01:14:33,700 --> 01:14:37,800
I think that game developers would like higher-level language stuff,

1324
01:14:38,100 --> 01:14:42,400
but I think they would like to have it in a way that doesn't pose

1325
01:14:42,400 --> 01:14:46,500
those risks, which are real and if you don't believe me, you can go

1326
01:14:46,500 --> 01:14:50,400
read, like the Minecraft maintainer as talking about how there's huge

1327
01:14:50,400 --> 01:14:54,100
hiccups in the performance because of the Java garbage collector

1328
01:14:54,100 --> 01:14:56,200
running and what they tried to do to work around

1329
01:14:56,300 --> 01:14:57,700
Didn't know Bob lot, right?

1330
01:14:57,700 --> 01:14:58,600
And all this sort of stuff.

1331
01:15:00,000 --> 01:15:05,000
So you know, I think that's, that's the thing and if your project

1332
01:15:05,000 --> 01:15:09,900
never happens to hit those things then you know, that's okay.

1333
01:15:09,900 --> 01:15:15,300
And so if you're a tiny developer and you're just making a game and

1334
01:15:16,000 --> 01:15:19,800
you're like I want to use C sharp and you know, you go use it and even

1335
01:15:19,800 --> 01:15:23,300
if maybe you do encounter some problems, maybe that's not the end of

1336
01:15:23,300 --> 01:15:24,300
the world, right?

1337
01:15:25,100 --> 01:15:29,800
But your Riot and two billion dollars or something,

1338
01:15:30,000 --> 01:15:33,700
Is riding on you guys, not hitting these snags that cause serious

1339
01:15:33,700 --> 01:15:35,400
problems or not doing whatever.

1340
01:15:35,400 --> 01:15:37,200
And you don't want that risk.

1341
01:15:37,300 --> 01:15:42,600
And I think they just, you know, the people who work on the stuff,

1342
01:15:42,600 --> 01:15:46,800
just don't want to accept that they don't want, except that level of

1343
01:15:46,800 --> 01:15:49,400
uncertainty and that loss of control.

1344
01:15:50,800 --> 01:15:53,900
And that's also why you'll see some very paradoxical things happen in

1345
01:15:53,900 --> 01:15:54,400
the game industry.

1346
01:15:54,400 --> 01:15:58,000
Like people will write their own scripting language or something.

1347
01:15:58,800 --> 01:16:02,800
That has all the same drawbacks but from their perspective, that's

1348
01:16:02,800 --> 01:16:03,500
okay.

1349
01:16:03,700 --> 01:16:07,400
Because they made those decisions and they are an expert in that

1350
01:16:07,400 --> 01:16:10,400
scripting language implementation because they wrote it and so they're

1351
01:16:10,400 --> 01:16:15,400
not afraid of hitting some mysterious problem in someone else's

1352
01:16:15,400 --> 01:16:17,000
technology that was unforeseen.

1353
01:16:17,000 --> 01:16:17,500
Right.

1354
01:16:17,600 --> 01:16:21,100
You might think of it almost like a Titanic iceberg thing.

1355
01:16:21,900 --> 01:16:25,800
If you like, there's plenty of icebergs, right?

1356
01:16:26,100 --> 01:16:27,400
In C sharp

1357
01:16:28,600 --> 01:16:31,200
And there's plenty of icebergs in Java performance icebergs.

1358
01:16:32,200 --> 01:16:36,800
If you are some little dinghy with a little outboard motor and you're

1359
01:16:36,800 --> 01:16:38,900
like just tooling around out there.

1360
01:16:40,200 --> 01:16:41,500
Your parental care.

1361
01:16:41,600 --> 01:16:44,200
If you hit the iceberg, like your little guy.

1362
01:16:44,200 --> 01:16:46,500
I'll get kind of stuck on there and you just like push it off and then

1363
01:16:46,500 --> 01:16:48,100
you'll like go away, right?

1364
01:16:48,400 --> 01:16:52,400
If you're the Titanic you can't afford to hit that Iceberg like it's

1365
01:16:52,400 --> 01:16:53,600
really costly.

1366
01:16:55,300 --> 01:16:58,600
And so I think that's just the case with you know, AAA development

1367
01:16:58,600 --> 01:17:01,700
where you're like if we are doing this massive scale development and

1368
01:17:01,700 --> 01:17:04,500
we have all of these risks already that are separate things and all

1369
01:17:04,500 --> 01:17:07,800
this other stuff, we are not willing to take on a language that we

1370
01:17:07,800 --> 01:17:09,500
know, has these dangers in it.

1371
01:17:10,200 --> 01:17:13,300
Because we can't prove to ourselves ahead of time that we won't hit

1372
01:17:13,300 --> 01:17:17,500
them and we don't want to take on the burden of managing someone

1373
01:17:17,500 --> 01:17:20,300
else's entire development system.

1374
01:17:20,400 --> 01:17:23,500
If we find out that there is a problem and then have to go be the ones

1375
01:17:23,500 --> 01:17:24,500
to fix it, right?

1376
01:17:26,200 --> 01:17:30,500
So I would say that, you know, is probably the way to look at it,

1377
01:17:30,500 --> 01:17:32,200
that's an opinion.

1378
01:17:32,200 --> 01:17:39,300
Obviously the truth is probably much more complicated and varies

1379
01:17:39,300 --> 01:17:40,300
across many studios.

1380
01:17:40,300 --> 01:17:46,700
And so there is no Pat answer that really can satisfy.

1381
01:17:46,700 --> 01:17:51,100
All of the reasons that people use C++ versus using some of their

1382
01:17:51,100 --> 01:17:54,800
language, but I feel like that's a fairly solid one.

1383
01:17:54,800 --> 01:17:56,000
That is at least.

1384
01:17:56,200 --> 01:17:59,800
Least somewhat widely applicable, which is just that programmers.

1385
01:18:00,000 --> 01:18:04,500
You care a lot about performance and know that they have to hit 30 60

1386
01:18:04,500 --> 01:18:05,300
frames a second.

1387
01:18:05,300 --> 01:18:08,600
On a diversity of Platforms in a lot of scenarios and need that

1388
01:18:08,600 --> 01:18:09,300
control.

1389
01:18:10,100 --> 01:18:13,100
Just don't feel comfortable based on the track records of these

1390
01:18:13,100 --> 01:18:15,800
languages embracing them in that way.

1391
01:18:15,800 --> 01:18:18,900
And that may change in the future but right now it's still kind of the

1392
01:18:18,900 --> 01:18:22,100
case pretty much for all the major

1393
01:18:23,000 --> 01:18:25,200
for all the AAA game studios that are out there.

1394
01:18:45,500 --> 01:18:48,600
So Sean McGrath says, no League of Legends is written in Flash.

1395
01:18:49,100 --> 01:18:50,300
So I guess, there you go.

1396
01:18:50,500 --> 01:18:52,700
So there there's, there's an answer for you.

1397
01:18:53,100 --> 01:18:55,800
League of Legends is written in Flash which is, which is totally not

1398
01:18:55,800 --> 01:18:56,000
that.

1399
01:18:56,000 --> 01:18:57,500
I've never actually played League of Legends.

1400
01:18:57,500 --> 01:18:58,200
So I don't know.

1401
01:18:58,800 --> 01:19:00,200
I just assumed that, right?

1402
01:19:00,200 --> 01:19:03,900
You C++, because you asked the question that they did, but I don't

1403
01:19:03,900 --> 01:19:05,900
know anything about Riot themselves.

1404
01:19:06,500 --> 01:19:10,800
I guess I do know that Blizzard Entertainment wrote World of Warcraft

1405
01:19:10,800 --> 01:19:14,200
and C++, but

1406
01:19:14,500 --> 01:19:19,500
I believe and I could be wrong about this but I believe that Blizzard

1407
01:19:19,500 --> 01:19:21,600
Entertainment used.

1408
01:19:23,500 --> 01:19:25,800
C sharp for Hearthstone.

1409
01:19:27,000 --> 01:19:30,100
Right because it or something, didn't they use Unity for Hearthstone

1410
01:19:30,100 --> 01:19:30,900
or something?

1411
01:19:31,200 --> 01:19:33,300
Which I and unity C sharp, right?

1412
01:19:33,400 --> 01:19:37,200
I mean obviously the underlying stuff is all C++, but some portion of

1413
01:19:37,200 --> 01:19:40,300
the game heart, like the game part of our Stone written in C sharp.

1414
01:19:40,300 --> 01:19:46,200
So, you know, that's an example of a AAA studio and that's not, you

1415
01:19:46,200 --> 01:19:51,400
know, one of their sort of Tripoli titles in the 3D Graphics, sensor,

1416
01:19:51,400 --> 01:19:51,700
whatever.

1417
01:19:51,700 --> 01:19:54,100
But it is a major release from them, right?

1418
01:19:54,100 --> 01:19:56,300
It's a it wasn't a minor release.

1419
01:19:56,300 --> 01:19:56,600
It was a

1420
01:19:56,800 --> 01:19:57,700
Was a real thing.

1421
01:19:58,700 --> 01:20:02,800
So you know they were obviously willing to accept C sharp for the at

1422
01:20:02,800 --> 01:20:05,900
least the game side of the code assuming that I'm remembering that

1423
01:20:05,900 --> 01:20:06,200
correctly.

1424
01:20:06,200 --> 01:20:07,900
That that just seems to be my recollection.

1425
01:20:08,200 --> 01:20:10,800
I don't know anything about League of Legends, if it was really

1426
01:20:10,800 --> 01:20:14,900
written in Flash, that's hilarious because League of Legends.

1427
01:20:19,300 --> 01:20:22,600
It's funny to think of the fact that Binding of Isaac, can't run

1428
01:20:23,100 --> 01:20:24,600
properly and Flash.

1429
01:20:25,400 --> 01:20:27,900
And it's just that one thing, whereas League of Legends, this is big

1430
01:20:27,900 --> 01:20:29,400
game and that worked in Flash.

1431
01:20:29,400 --> 01:20:30,100
That's crazy.

1432
01:20:30,100 --> 01:20:30,900
If that's true.

1433
01:20:31,100 --> 01:20:35,700
They must be much better at flash, I guess Than The Binding of Isaac

1434
01:20:36,600 --> 01:20:38,700
folks for our something, I don't know.

1435
01:20:40,700 --> 01:20:41,900
That's, that's kind of wild.

1436
01:20:54,100 --> 01:20:55,800
All right, Shawn.

1437
01:20:55,900 --> 01:20:58,100
You've now been you've been corrected.

1438
01:20:58,100 --> 01:20:59,800
They say no League of Legends was written in C.

1439
01:21:00,000 --> 01:21:02,500
Plus only the login client is in flash.

1440
01:21:04,200 --> 01:21:07,300
We'll look, I don't know what Riot rights in.

1441
01:21:07,400 --> 01:21:11,200
I have no friends at Riot, even I guess I have friends that ride right

1442
01:21:11,200 --> 01:21:13,100
now but they were not involved in League of Legends.

1443
01:21:14,800 --> 01:21:16,000
I would be shocked to learn.

1444
01:21:16,000 --> 01:21:16,800
That was written in Flash.

1445
01:21:16,800 --> 01:21:18,200
Like I wouldn't have been shocked to learn.

1446
01:21:18,200 --> 01:21:23,200
It was written in like, C, sharp or something, but flash is so slow.

1447
01:21:23,200 --> 01:21:25,800
Like, I would be kind of shocked if it could have been written in

1448
01:21:25,800 --> 01:21:30,300
Flash, because Flash is Flash is like kind of on the worst end of that

1449
01:21:30,300 --> 01:21:31,100
Spectrum, right?

1450
01:21:31,100 --> 01:21:33,800
Like, like C sharp is a lot more thought

1451
01:21:34,000 --> 01:21:36,200
Through then flashes, you know.

1452
01:21:36,200 --> 01:21:37,500
Yes, it has garbage collection.

1453
01:21:37,500 --> 01:21:38,200
Yes, whatever.

1454
01:21:38,200 --> 01:21:40,100
And you know, is it something I would rely on?

1455
01:21:40,100 --> 01:21:43,100
No, but there's a real big difference between relying on flash and

1456
01:21:43,100 --> 01:21:43,700
Lansky sharp.

1457
01:21:43,700 --> 01:21:46,400
But yeah, so I would be shocked to learn that League of Legends was

1458
01:21:46,400 --> 01:21:47,700
actually written in Flash.

1459
01:21:49,100 --> 01:21:51,300
I would be pretty surprised.

1460
01:22:06,400 --> 01:22:07,000
So yeah.

1461
01:22:08,200 --> 01:22:11,400
Also, there is a new version of Binding of Isaac that is not in Flash.

1462
01:22:12,000 --> 01:22:14,500
Well, yeah, but it's Binding of Isaac rebirth, right?

1463
01:22:14,600 --> 01:22:17,200
You can't actually get in a version of the original Binding of Isaac.

1464
01:22:17,200 --> 01:22:19,900
That's, not in Flash, which I wish you could, because I really like

1465
01:22:19,900 --> 01:22:22,000
the original and wasn't.

1466
01:22:22,500 --> 01:22:26,400
I wasn't much for the new one, so I wish that I could get the original

1467
01:22:27,000 --> 01:22:30,400
in non-flash but I guess what I'll just do is I'll wait 10 years to

1468
01:22:30,400 --> 01:22:34,100
computers are so fast that it can actually run a 2-D game.

1469
01:22:35,800 --> 01:22:37,700
2-D game at frame, right.

1470
01:22:38,600 --> 01:22:40,700
And then I'll be able to run the original, I guess.

1471
01:22:51,700 --> 01:22:53,800
SMC McGrath.

1472
01:22:53,900 --> 01:22:55,000
SSS, Mr.

1473
01:22:55,000 --> 01:22:57,100
McGrath are is Flash, though.

1474
01:22:57,500 --> 01:22:59,500
Aaron flash are basically the same, right?

1475
01:22:59,500 --> 01:23:04,100
Like are is just the packaging, the, the packaging for Flash because

1476
01:23:04,100 --> 01:23:08,100
Binding of Isaac was written in are as well, in that sense like you

1477
01:23:08,100 --> 01:23:12,300
can when you get the Standalone it it'll come with it comes in are for

1478
01:23:12,300 --> 01:23:13,900
him but that's not

1479
01:23:14,700 --> 01:23:17,000
It's really no difference between those two things that I know about.

1480
01:23:24,800 --> 01:23:28,900
Gaston five, what's the difference between arbitrary and random?

1481
01:23:32,100 --> 01:23:34,800
I guess I'm not sure what context you mean in?

1482
01:23:36,100 --> 01:23:39,700
Random and arbitrary can mean very different things in certain

1483
01:23:39,700 --> 01:23:40,500
contexts I suppose.

1484
01:23:40,500 --> 01:23:43,100
But I'm not sure what the context is that you're asking.

1485
01:23:43,100 --> 01:23:45,400
Those are always just adjectives and what they apply to makes a big

1486
01:23:45,400 --> 01:23:45,900
difference.

1487
01:23:56,300 --> 01:23:56,800
I'm trying to guess.

1488
01:23:56,800 --> 01:23:59,500
I think that air has the same runtime.

1489
01:24:00,200 --> 01:24:02,600
I believe that it's the same runtime as

1490
01:24:04,500 --> 01:24:07,000
that's just the normal flash, interpreter that you would install if

1491
01:24:07,000 --> 01:24:08,200
you download it from Adobe.

1492
01:24:08,200 --> 01:24:10,600
As far as I know, they don't maintain two separate run times but I

1493
01:24:10,600 --> 01:24:11,600
could be wrong about that.

1494
01:24:15,200 --> 01:24:18,000
Gaston 5 in the mathematical sense.

1495
01:24:18,700 --> 01:24:22,700
Well, so in the mathematical sense, Something That Is Random.

1496
01:24:24,100 --> 01:24:28,800
is actually has a bunch of properties like, you know, non

1497
01:24:28,800 --> 01:24:33,600
predictability and even distributions and or you know, these sorts of

1498
01:24:33,600 --> 01:24:34,100
things

1499
01:24:35,000 --> 01:24:36,100
So it's arbitrary.

1500
01:24:36,100 --> 01:24:37,600
Just means that you didn't care.

1501
01:24:37,700 --> 01:24:40,400
Like there was no reason for it, right?

1502
01:24:41,600 --> 01:24:45,800
So I don't know, I guess you'd have to ask student him 73.

1503
01:24:45,800 --> 01:24:48,800
If there's a mathematical definition of arbitrary.

1504
01:24:50,900 --> 01:24:52,100
There might be a rigorous.

1505
01:24:52,100 --> 01:24:55,800
Mathematical definition for arbitrary, but I don't know that I've ever

1506
01:24:55,800 --> 01:24:58,600
seen arbitrary used in a precise way.

1507
01:25:04,100 --> 01:25:09,000
What would you rather write a game in Java or C sharp eye?

1508
01:25:10,000 --> 01:25:17,500
If I had if for some reason, my situation was that I could only write

1509
01:25:17,500 --> 01:25:20,400
a game in Java or C sharp like that was what I had to do.

1510
01:25:21,200 --> 01:25:22,500
I would quit the game industry.

1511
01:25:22,800 --> 01:25:24,200
That would that would be the end of it.

1512
01:25:25,200 --> 01:25:28,700
Like I have no interest in programming in either of those languages

1513
01:25:28,700 --> 01:25:29,900
ever for any reason.

1514
01:25:30,500 --> 01:25:32,900
So if that's what I had to do I just quit and go do something.

1515
01:25:32,900 --> 01:25:36,600
I do something else with my life before I would write in one of those

1516
01:25:36,600 --> 01:25:39,000
languages they hold absolutely no interest.

1517
01:25:42,600 --> 01:25:44,500
Have you ever smoked weed and programmed?

1518
01:25:44,500 --> 01:25:46,700
I have never smoked weed.

1519
01:25:47,200 --> 01:25:48,400
Actually.

1520
01:25:49,700 --> 01:25:54,700
So no, it is legal here in Washington state.

1521
01:25:55,700 --> 01:25:57,600
So I guess that would be a pretty easy thing to do.

1522
01:25:57,600 --> 01:25:59,400
But I just I have never done it.

1523
01:25:59,400 --> 01:25:59,900
Sorry.

1524
01:26:11,500 --> 01:26:14,700
Jonathan Blow says that the Axiom of choice is kind of about

1525
01:26:14,700 --> 01:26:17,000
arbitrariness and is kind of controversial.

1526
01:26:17,400 --> 01:26:18,200
So there you go.

1527
01:26:18,800 --> 01:26:22,600
Hey, so John, if you're on the stream, can we do a reverse question?

1528
01:26:23,400 --> 01:26:25,600
Because all the way at the beginning of the stream?

1529
01:26:26,000 --> 01:26:31,600
Somebody asked me if I had designed the game before hand, because

1530
01:26:31,600 --> 01:26:33,200
designing it on stream.

1531
01:26:33,700 --> 01:26:36,400
Seems like it would be a bad idea, basically, because it would be too

1532
01:26:36,400 --> 01:26:37,900
much trial and error, right?

1533
01:26:37,900 --> 01:26:39,600
Or designing on the Fly, basically.

1534
01:26:40,700 --> 01:26:45,000
And what I said was, I designed the game ahead of time but just

1535
01:26:45,000 --> 01:26:46,700
because I'm not a game designer.

1536
01:26:46,700 --> 01:26:49,400
So I don't want the stream to be about game design because I don't

1537
01:26:49,400 --> 01:26:51,800
really have much to say in that regard.

1538
01:26:52,800 --> 01:26:57,100
So that's why I designed it ahead of time, but my feeling from

1539
01:26:57,100 --> 01:26:58,900
listening to you,

1540
01:27:00,000 --> 01:27:05,900
Well, as other designers that I respect, is that actually designing on

1541
01:27:05,900 --> 01:27:08,700
the Fly is a very important skill.

1542
01:27:08,700 --> 01:27:16,500
Like it's I felt like the question was operating on a mistaken premise

1543
01:27:17,400 --> 01:27:21,100
and I wanted somebody who really knew game design to weigh in on that

1544
01:27:21,100 --> 01:27:22,900
because I don't feel like I'm qualified to answer.

1545
01:27:22,900 --> 01:27:26,900
But that was my feeling was just that I felt like it was necessary to

1546
01:27:26,900 --> 01:27:29,300
correct the assumption that that sort of

1547
01:27:30,000 --> 01:27:33,000
Emergent design, where you're playing around with the design is

1548
01:27:33,000 --> 01:27:37,400
somehow not good because it felt to me, like what I had heard from

1549
01:27:37,500 --> 01:27:41,400
from you and others was that actually, that is a very important skill

1550
01:27:41,600 --> 01:27:44,600
and you definitely need to develop it and be able to do that if you're

1551
01:27:44,600 --> 01:27:45,500
a good designer.

1552
01:27:46,800 --> 01:27:49,500
So I just throw that question out there.

1553
01:27:49,500 --> 01:27:54,100
If you happen to be interested in typing in the answer, it's kind of a

1554
01:27:54,100 --> 01:27:56,100
yes or no question some degree I guess.

1555
01:28:21,200 --> 01:28:24,800
Okay, so let's go through the last couple questions here.

1556
01:28:29,500 --> 01:28:31,000
But wait, Johnny answered.

1557
01:28:31,000 --> 01:28:34,400
So he says I think designing on the Fly is very important.

1558
01:28:34,400 --> 01:28:34,900
Yes.

1559
01:28:35,200 --> 01:28:37,700
If you know everything you're going to do before you start, you

1560
01:28:37,700 --> 01:28:40,200
probably aren't doing something very interesting.

1561
01:28:40,200 --> 01:28:40,800
I think.

1562
01:28:41,700 --> 01:28:49,100
So yeah, that that is that is what I assumed was the answer from

1563
01:28:49,100 --> 01:28:52,100
having heard you and other people describe things.

1564
01:28:52,400 --> 01:28:57,200
But, you know, I just didn't really know myself because I'm not.

1565
01:28:57,800 --> 01:28:59,200
I don't really have those skills.

1566
01:28:59,200 --> 01:28:59,600
So

1567
01:29:00,800 --> 01:29:04,100
I hope the person who asked the question is still listening there.

1568
01:29:04,100 --> 01:29:07,900
You have a very definitive answer so so design on the Fly is actually

1569
01:29:07,900 --> 01:29:08,600
something you do.

1570
01:29:08,600 --> 01:29:12,100
I think want to learn to do, if you're going to be someone, I know

1571
01:29:12,100 --> 01:29:15,900
certainly personally if I was going to hire a game designer, I would

1572
01:29:15,900 --> 01:29:21,400
want to see that skill like I feel like it's really important but you

1573
01:29:21,400 --> 01:29:25,400
know, not having done game design much myself.

1574
01:29:25,400 --> 01:29:29,100
I feel like I should defer to experts on that.

1575
01:29:35,600 --> 01:29:39,200
And John also says for me and a lot of people whose games I like the

1576
01:29:39,200 --> 01:29:42,600
ideas behind the game are just enough to get you into a territory of

1577
01:29:42,600 --> 01:29:46,300
interestingness, but then you have to explore that territory which you

1578
01:29:46,300 --> 01:29:50,300
can't have done before you go there, which to me, sounds like a very

1579
01:29:50,300 --> 01:29:52,100
excellent way of putting it, right?

1580
01:29:53,900 --> 01:29:57,000
I mean, in some sense it's like saying, you know, I want to go explore

1581
01:29:57,000 --> 01:29:58,000
this forest or whatever.

1582
01:29:58,000 --> 01:29:59,700
Well you don't know exactly all the

1583
01:30:00,000 --> 01:30:02,200
That you're going to find there, you just have a feeling that it's

1584
01:30:02,200 --> 01:30:04,900
going to be interesting because you saw it and it looked kind of cool

1585
01:30:04,900 --> 01:30:06,200
from the outside, right?

1586
01:30:07,300 --> 01:30:07,900
So I don't know.

1587
01:30:07,900 --> 01:30:11,200
It seems, it seems to make good intuitive sense.

1588
01:30:11,200 --> 01:30:11,500
I don't know.

1589
01:30:22,700 --> 01:30:23,400
Let's see.

1590
01:30:23,500 --> 01:30:26,500
Why do you say 00 is awful?

1591
01:30:27,200 --> 01:30:29,600
Well, I think we've covered this quite a bit there.

1592
01:30:29,800 --> 01:30:35,100
I don't know that there's a really succinct way to say why but the the

1593
01:30:35,100 --> 01:30:39,300
general root of it is that programming is about telling a CPU what to

1594
01:30:39,300 --> 01:30:39,700
do.

1595
01:30:40,500 --> 01:30:45,700
And there is no concept of object orientation inside a CPU, like, it's

1596
01:30:45,700 --> 01:30:46,300
not a thing.

1597
01:30:47,700 --> 01:30:49,100
And so fundamentally.

1598
01:30:49,100 --> 01:30:53,800
What writing code is about is actually about figuring out what the

1599
01:30:53,800 --> 01:30:57,100
process is like what is the CPU going to do, right?

1600
01:30:57,100 --> 01:30:58,500
What's it actually going to do?

1601
01:30:59,600 --> 01:31:04,100
And then from when you figure out what the CPU has to do from there,

1602
01:31:04,400 --> 01:31:08,600
the objects are actually kind of obvious, right?

1603
01:31:09,400 --> 01:31:13,500
So the order of programming is figure out what the CPU is supposed to

1604
01:31:13,500 --> 01:31:16,900
do, figure out what the data needs to look like the support.

1605
01:31:17,500 --> 01:31:21,400
And that in turn is your definition of your objects, right?

1606
01:31:21,500 --> 01:31:24,300
And usually I don't even bother with the object part of it because I

1607
01:31:24,300 --> 01:31:25,400
don't even I think autosar.

1608
01:31:25,400 --> 01:31:28,000
So unimportant that I just think those bags of data, right?

1609
01:31:28,000 --> 01:31:30,900
So that's why we use structs on handmade hero because it's just like

1610
01:31:31,600 --> 01:31:36,300
the whole notion of an object in general I think is overblown and so

1611
01:31:36,300 --> 01:31:40,800
that process is the opposite of how object-oriented encourages you to

1612
01:31:40,800 --> 01:31:43,900
think, object-oriented encourage you to think it means in the word

1613
01:31:43,900 --> 01:31:44,900
object oriented.

1614
01:31:44,900 --> 01:31:46,900
It encourage you to think from the other direction.

1615
01:31:47,000 --> 01:31:49,200
Even so from the objects down to the CPU.

1616
01:31:50,000 --> 01:31:53,200
And that is very kind of productive because it has nothing to do with

1617
01:31:53,200 --> 01:31:53,600
the program.

1618
01:31:53,600 --> 01:31:57,700
Actually needs to do and you don't have to take my word for it.

1619
01:31:57,700 --> 01:31:59,800
Most people can actually census by intuition.

1620
01:32:00,000 --> 01:32:04,000
Most people, if you ask them to write code, to do a particular thing,

1621
01:32:04,000 --> 01:32:06,200
and you don't tell them about objects or a train or any faster.

1622
01:32:06,200 --> 01:32:08,800
If you just try to teach them basic stuff House of yours, they will

1623
01:32:08,800 --> 01:32:11,700
actually write relatively good code after a while.

1624
01:32:11,700 --> 01:32:13,600
They'll be like, oh, here's the things I need to do and I do them in

1625
01:32:13,600 --> 01:32:16,900
order invariably whenever I see people who

1626
01:32:17,100 --> 01:32:18,900
To do object oriented program.

1627
01:32:18,900 --> 01:32:22,300
It's massively over complicated and there's all of this additional

1628
01:32:22,300 --> 01:32:23,000
business in there.

1629
01:32:23,000 --> 01:32:28,800
That doesn't actually help the CPU actually do things and tends to get

1630
01:32:28,800 --> 01:32:29,400
in the way.

1631
01:32:30,100 --> 01:32:32,700
And in the worst case it's like slows things down or makes things more

1632
01:32:32,700 --> 01:32:35,600
brittle or make things harder to work with than the code.

1633
01:32:37,000 --> 01:32:40,200
And so what I usually like to say is just the project problem with

1634
01:32:40,200 --> 01:32:42,900
object-oriented programming is not the objects.

1635
01:32:43,100 --> 01:32:46,200
It's the oriented, it's the fact that you're orienting around the

1636
01:32:46,200 --> 01:32:49,700
objects, I don't care if the code has objects in it or not.

1637
01:32:50,600 --> 01:32:53,500
It's the orientation around the objects as the problem with

1638
01:32:53,500 --> 01:32:59,000
object-oriented programming and that focus on thinking, that things

1639
01:32:59,000 --> 01:32:59,700
have to become.

1640
01:33:00,000 --> 01:33:01,500
That they have to be encapsulated.

1641
01:33:02,100 --> 01:33:06,600
That is the goal is all unnecessary.

1642
01:33:06,800 --> 01:33:09,500
Baggage that gets in the way of good programming.

1643
01:33:10,700 --> 01:33:15,200
And so that's the reason that I don't like object-oriented and it's

1644
01:33:15,200 --> 01:33:18,200
also unfortunate something that's kind of sometimes hard to explain.

1645
01:33:18,700 --> 01:33:21,600
Because people seem to think that

1646
01:33:24,200 --> 01:33:29,600
That like certain single things that might show up in object-oriented

1647
01:33:29,600 --> 01:33:30,000
programming.

1648
01:33:30,000 --> 01:33:32,400
Sometimes means you're doing ab training programming.

1649
01:33:32,500 --> 01:33:36,200
Like, I actually had someone say to me, specifically, I'll give you

1650
01:33:36,200 --> 01:33:36,800
example.

1651
01:33:37,200 --> 01:33:41,700
The fact that I have functions where I take a thing as a first

1652
01:33:41,700 --> 01:33:44,700
parameter as the pointer is object oriented programming.

1653
01:33:44,800 --> 01:33:48,200
So they would consider like you know output playing sounds to be

1654
01:33:48,200 --> 01:33:51,800
object-oriented because it has audio State as the first parameter and

1655
01:33:51,800 --> 01:33:53,700
it's a function that kind of like logically live

1656
01:33:54,000 --> 01:33:55,200
If the audio state, right?

1657
01:33:57,200 --> 01:34:01,000
If that's where your brain is, I don't know what to say.

1658
01:34:01,200 --> 01:34:04,300
Usually those people just get a mute on Twitter so I never have to

1659
01:34:04,300 --> 01:34:09,400
hear from them again because I don't even know how like I don't know

1660
01:34:09,400 --> 01:34:11,000
where you go with that, right?

1661
01:34:11,000 --> 01:34:13,900
And if the person is super nice about it fine, but it never is, right?

1662
01:34:13,900 --> 01:34:18,400
The people who make those comments are usually like to make it in a

1663
01:34:18,400 --> 01:34:22,800
very snide and annoying way, which you know, is fine.

1664
01:34:22,800 --> 01:34:26,300
If you're trying to go argue with some somebody who actually cares

1665
01:34:26,300 --> 01:34:26,800
about arguing,

1666
01:34:27,000 --> 01:34:30,100
About as far as I'm concerned, people who are program, our journey

1667
01:34:30,100 --> 01:34:32,500
programming, who are really dedicated to that method and want to argue

1668
01:34:32,500 --> 01:34:33,000
about it.

1669
01:34:33,100 --> 01:34:35,900
I just assumed they'd let them right.

1670
01:34:35,900 --> 01:34:40,600
Like I it's hey it less competition for me for fright.

1671
01:34:40,900 --> 01:34:48,100
I would rather at some level other programmers program poorly as job

1672
01:34:48,100 --> 01:34:48,400
security.

1673
01:34:48,400 --> 01:34:50,400
It's I'm not going to argue with them about it.

1674
01:34:52,700 --> 01:34:53,000
Yeah.

1675
01:34:53,000 --> 01:34:55,900
But maybe that's a mistake because it means you know, maybe that's

1676
01:34:55,900 --> 01:34:56,800
that's why all the

1677
01:34:56,900 --> 01:34:59,500
The stuff that I try to use on daily basis is all broken.

1678
01:35:00,000 --> 01:35:00,500
I don't know.

1679
01:35:00,500 --> 01:35:01,100
So who knows.

1680
01:35:01,700 --> 01:35:02,300
So yeah.

1681
01:35:02,300 --> 01:35:06,000
So that's, you know, object-oriented programming in a nutshell for me.

1682
01:35:06,200 --> 01:35:08,100
It's the oriented part that I don't like.

1683
01:35:09,400 --> 01:35:12,000
But it's I'm not some kind of weird fanatic.

1684
01:35:12,000 --> 01:35:15,600
I do like other kinds of programming, like I the functional

1685
01:35:15,600 --> 01:35:17,900
programming I think is very good.

1686
01:35:18,000 --> 01:35:21,500
I try to do things in a functional form often times, even in C, which

1687
01:35:21,500 --> 01:35:24,200
is not a functional language, but obviously, it supports the ability

1688
01:35:24,200 --> 01:35:26,600
to write things that are functional because you can just not have

1689
01:35:26,600 --> 01:35:26,800
side.

1690
01:35:26,900 --> 01:35:27,300
Effects.

1691
01:35:27,300 --> 01:35:27,700
Right?

1692
01:35:28,700 --> 01:35:31,200
So I do like there.

1693
01:35:31,200 --> 01:35:34,100
I think there are a lot of saying programming methodologies.

1694
01:35:34,100 --> 01:35:37,500
I don't I'm not a zealot who thinks there's only one right way to

1695
01:35:37,500 --> 01:35:38,200
write a program.

1696
01:35:38,800 --> 01:35:43,600
I'm what I am zealous about is that object-oriented is not a right way

1697
01:35:43,600 --> 01:35:47,800
so I'm more of a like anti oop I'm not necessarily Pro.

1698
01:35:47,800 --> 01:35:51,500
Some other thing as exclusive, I think there's a number of good attack

1699
01:35:51,500 --> 01:35:53,200
skills for how you program.

1700
01:35:54,100 --> 01:35:59,500
Data oriented programming, very interesting, functional style is very

1701
01:35:59,500 --> 01:35:59,800
interesting.

1702
01:36:00,000 --> 01:36:02,600
Are all like techniques that can work together, whatever.

1703
01:36:02,900 --> 01:36:04,800
I think of things in terms of compression.

1704
01:36:04,800 --> 01:36:06,600
I've said, many times compression oriented programming.

1705
01:36:06,800 --> 01:36:11,200
I think those are all great things and I hope people learn to do them.

1706
01:36:11,300 --> 01:36:14,500
It's really just just object-oriented, just happens to be really bad,

1707
01:36:15,000 --> 01:36:18,600
and I've never found anything useful or good about it and so, I'm kind

1708
01:36:18,600 --> 01:36:19,800
of zealously against it.

1709
01:36:19,800 --> 01:36:23,900
Because I find that so many people think it's a good idea and have

1710
01:36:23,900 --> 01:36:27,000
absolutely, no, actual evidence of that.

1711
01:36:27,000 --> 01:36:29,900
Like, I've never actually been able to see someone show me here is

1712
01:36:30,000 --> 01:36:32,300
The place where this was a really good way to think about this problem

1713
01:36:32,300 --> 01:36:33,600
and so it's like not right?

1714
01:36:35,400 --> 01:36:38,100
But yeah, but I'm not a zealot for some other particular thing, I

1715
01:36:38,100 --> 01:36:40,400
think there's a lot of good techniques out there programming wise.

1716
01:36:40,600 --> 01:36:43,400
And actually I think good programmers tend to have more than one

1717
01:36:43,400 --> 01:36:44,500
attack skill, right?

1718
01:36:44,600 --> 01:36:47,500
They tend to have a lot of different ways that they think about

1719
01:36:47,500 --> 01:36:51,600
programming and they pick which ones they want to use based on the

1720
01:36:51,600 --> 01:36:53,200
circumstances and how things are going.

1721
01:36:53,200 --> 01:36:53,600
I think.

1722
01:36:59,100 --> 01:37:01,700
Will hand me here support physics, simulation and rendering in

1723
01:37:01,700 --> 01:37:02,700
different threads.

1724
01:37:03,400 --> 01:37:08,200
So it already does actually, like, rendering ground chunks happens on

1725
01:37:08,200 --> 01:37:11,200
a separate thread front, while the simulation is occurring right now,

1726
01:37:11,200 --> 01:37:12,900
so that, that already happens.

1727
01:37:17,500 --> 01:37:19,100
B3z man 41.

1728
01:37:19,100 --> 01:37:20,200
You make it sound like those things.

1729
01:37:20,200 --> 01:37:21,000
We just have no purpose.

1730
01:37:21,000 --> 01:37:23,200
They're great for other things than Game Dev.

1731
01:37:23,300 --> 01:37:24,000
I disagree.

1732
01:37:24,200 --> 01:37:25,500
I don't like them for anything.

1733
01:37:26,300 --> 01:37:31,600
Not just game development, so, you know, if you like them, that's

1734
01:37:31,600 --> 01:37:32,000
great.

1735
01:37:32,100 --> 01:37:36,700
You know, you should use whatever language you want to use, but I am

1736
01:37:36,700 --> 01:37:37,700
not going to use them.

1737
01:37:40,400 --> 01:37:41,200
Shoot him 76.

1738
01:37:41,200 --> 01:37:44,700
As arbitrary as the bottom element of a mathematical lattice see as

1739
01:37:44,700 --> 01:37:44,800
well.

1740
01:37:44,800 --> 01:37:49,400
Systems blog Cliff, 2012 0212 too, much theory for details.

1741
01:37:50,600 --> 01:37:53,500
So hopefully whoever is asking that question did actually look up that

1742
01:37:53,500 --> 01:37:54,300
for details.

1743
01:37:56,100 --> 01:37:56,800
What do you do?

1744
01:37:56,800 --> 01:37:58,800
In order to help prevent carpal tunnel syndrome?

1745
01:37:59,000 --> 01:38:00,200
Does it get real bad?

1746
01:38:00,200 --> 01:38:01,800
Anything particular you try and avoid?

1747
01:38:01,900 --> 01:38:04,100
I don't really know anything about carpal tunnel syndrome.

1748
01:38:04,800 --> 01:38:06,400
I've never had carpal tunnel syndrome.

1749
01:38:08,500 --> 01:38:14,200
if I don't wear these my wrist braces, I get tendonitis in like right

1750
01:38:14,200 --> 01:38:18,200
here typically and for whatever reason we're in Greece braces, I don't

1751
01:38:19,500 --> 01:38:24,100
But I've never really had carpal tunnel syndrome, which I think is

1752
01:38:24,100 --> 01:38:27,500
where you start to lose some some feeling hero.

1753
01:38:27,500 --> 01:38:33,100
The other thing I have is, if I don't keep my my wrists and arm like

1754
01:38:33,300 --> 01:38:37,300
also elbow, like and shoulders, I find, I do get a little, like, nerve

1755
01:38:37,300 --> 01:38:38,600
impingement up here stuff.

1756
01:38:38,600 --> 01:38:40,700
And I start to lose some feeling in my fingers.

1757
01:38:41,800 --> 01:38:45,100
But carpal tunnel is about, is about nerve restriction in here.

1758
01:38:45,100 --> 01:38:47,400
And I've never really had that.

1759
01:38:49,500 --> 01:38:53,400
My understanding is that is not as common in men it's much more common

1760
01:38:53,400 --> 01:38:58,100
in women because they have narrower I guess passage for the nerves in

1761
01:38:58,100 --> 01:38:59,800
here whereas men.

1762
01:39:00,000 --> 01:39:01,300
Have a wider one.

1763
01:39:01,600 --> 01:39:06,000
And so my understanding was actually a lot of times like like people

1764
01:39:06,000 --> 01:39:09,200
think they have carpal tunnel syndrome maybe but they haven't actually

1765
01:39:09,200 --> 01:39:09,900
determined that.

1766
01:39:09,900 --> 01:39:10,900
That's actually what they have.

1767
01:39:10,900 --> 01:39:13,700
So a lot of times if a guy thinks they have carpal tunnel syndrome, I

1768
01:39:13,700 --> 01:39:15,600
would say make sure that's actually what you have.

1769
01:39:15,600 --> 01:39:18,700
If you or if you think you might have that because what you may have

1770
01:39:18,700 --> 01:39:20,100
something else, right?

1771
01:39:21,300 --> 01:39:23,500
And then trying to fix carpal tunnel syndrome isn't going to help you

1772
01:39:23,500 --> 01:39:25,100
because that's not what you have, right?

1773
01:39:25,100 --> 01:39:28,300
So you want to make sure you actually know, if you're having hand

1774
01:39:28,500 --> 01:39:29,800
issues, you want to make sure.

1775
01:39:30,000 --> 01:39:32,800
Sure that, you know, whether you have like tendonitis or a nerve

1776
01:39:32,800 --> 01:39:36,000
impingement somewhere, or carpal tunnel or whatever, first before you

1777
01:39:36,000 --> 01:39:40,600
try to do it, which can be tough to diagnose but you can try things,

1778
01:39:40,700 --> 01:39:45,000
try experiments, you know, keeping various areas, warm aligning, you

1779
01:39:45,000 --> 01:39:47,900
know, changing the alignment of how you're doing things wearing braces

1780
01:39:47,900 --> 01:39:48,500
on different parts.

1781
01:39:48,600 --> 01:39:53,500
Try to figure out what does and does not affect it is definitely worth

1782
01:39:53,500 --> 01:39:55,700
doing before you try to cure something that you don't maybe

1783
01:39:55,700 --> 01:39:56,600
necessarily have.

1784
01:39:56,700 --> 01:39:59,300
Well something that you do have is going unchecked, which can be a

1785
01:39:59,300 --> 01:39:59,800
problem.

1786
01:40:09,100 --> 01:40:13,400
Let's see, I miss part of the stream.

1787
01:40:13,400 --> 01:40:14,200
So you may have answered this.

1788
01:40:14,200 --> 01:40:17,400
Do you know of any opengl resources that actually explain why they are

1789
01:40:17,400 --> 01:40:20,600
doing what they are doing the arc synthesis tutorials?

1790
01:40:20,600 --> 01:40:23,700
I try to mention because I think those are pretty good but honestly,

1791
01:40:23,700 --> 01:40:24,800
no, I really don't.

1792
01:40:24,800 --> 01:40:26,200
It's under documented.

1793
01:40:27,600 --> 01:40:29,200
It's definitely under documented

1794
01:40:35,400 --> 01:40:36,000
Guest 05.

1795
01:40:36,000 --> 01:40:39,100
So by what you said, can I conclude that you have not written a game?

1796
01:40:39,100 --> 01:40:40,300
Design document.

1797
01:40:40,900 --> 01:40:42,600
Well, yes and no.

1798
01:40:42,600 --> 01:40:45,200
I actually do have a fair bit of game design stuff.

1799
01:40:45,200 --> 01:40:48,700
I don't like I said, I'm not a formal game designer, so I don't really

1800
01:40:48,700 --> 01:40:53,600
know very much about writing a game design document because you put

1801
01:40:53,600 --> 01:40:56,000
that in capital letters like it was a very specific thing.

1802
01:40:58,000 --> 01:40:58,700
Sounds like the kind of thing.

1803
01:40:58,700 --> 01:41:01,200
A producer wants where it's like 150 pages and

1804
01:41:02,300 --> 01:41:04,800
Lots of verbose verbosity.

1805
01:41:11,200 --> 01:41:12,200
Third your aha.

1806
01:41:12,200 --> 01:41:14,900
So 0 is kind of like when you design a game ahead.

1807
01:41:15,600 --> 01:41:19,600
Yeah, I mean, and like I tried to impress, hopefully, in fact, the

1808
01:41:19,600 --> 01:41:20,900
stream, we've mentioned it many times.

1809
01:41:20,900 --> 01:41:27,400
Now, I just my understanding from really good game designers is that

1810
01:41:27,500 --> 01:41:29,500
you don't want to design a game up front like that.

1811
01:41:29,500 --> 01:41:30,400
Like, that's not how you do it.

1812
01:41:30,400 --> 01:41:31,600
And the same is true of code.

1813
01:41:32,400 --> 01:41:34,300
The reason I'm doing that I have made here is I, you know, I'm not a

1814
01:41:34,300 --> 01:41:37,500
game designer that's that's not my skill set.

1815
01:41:37,800 --> 01:41:40,700
And so I tried to put together a design that I'd be like, okay, here's

1816
01:41:40,700 --> 01:41:40,900
a

1817
01:41:41,000 --> 01:41:43,100
Has of things that we'd have to implement, you know, it'll be

1818
01:41:43,100 --> 01:41:46,200
interesting hopefully but you know it's I'm not a game designer.

1819
01:41:46,200 --> 01:41:51,100
I can't promise you anything about handmade hero being some amazing

1820
01:41:51,100 --> 01:41:53,300
game design because that's just, that's not what I do.

1821
01:41:54,500 --> 01:41:57,100
Can made here as a programming project, it's a game.

1822
01:41:57,200 --> 01:41:59,200
It's about game development knocking design.

1823
01:42:01,000 --> 01:42:05,900
And so, you know, if and I will, when we get to the game part of

1824
01:42:05,900 --> 01:42:09,900
things, you know, like I said maybe today, 200 250 somewhere around

1825
01:42:09,900 --> 01:42:10,100
there.

1826
01:42:10,100 --> 01:42:13,100
I'm not sure when we'll switch over to doing mostly game work and not

1827
01:42:13,100 --> 01:42:15,300
really doing the engine stuff anymore.

1828
01:42:16,700 --> 01:42:20,200
What what I will say often and just to make sure everyone knows is

1829
01:42:20,200 --> 01:42:22,800
like, it's still about game programming.

1830
01:42:22,800 --> 01:42:24,100
Even at that point, right?

1831
01:42:24,100 --> 01:42:26,600
I'm showing how to implement a bunch of game design things.

1832
01:42:26,600 --> 01:42:29,800
And I've picked the game design things to try to make it so that we

1833
01:42:29,800 --> 01:42:30,600
have to

1834
01:42:30,800 --> 01:42:34,900
You a lot of the same kinds of code that we would have to do in any

1835
01:42:35,600 --> 01:42:41,000
intricate sort of advanced game design, but I'm not trying to show you

1836
01:42:41,000 --> 01:42:41,800
how to game design.

1837
01:42:41,800 --> 01:42:47,300
I do not think you would want to make a game design up front like that

1838
01:42:47,300 --> 01:42:51,100
if you were actually trying to make a game and it was about making a

1839
01:42:51,100 --> 01:42:52,000
great design.

1840
01:42:52,300 --> 01:42:56,800
And so, you know, that's a whole different skill set that you will

1841
01:42:56,800 --> 01:42:59,900
need to learn from someone else's stream because I do not know

1842
01:42:59,900 --> 01:43:00,500
anything about games.

1843
01:43:00,700 --> 01:43:02,500
Zayn and I cannot help you there.

1844
01:43:02,600 --> 01:43:07,200
I can only show you how to make a game from a design that someone else

1845
01:43:07,200 --> 01:43:07,700
does.

1846
01:43:08,300 --> 01:43:14,700
And hopefully that will be enough for anyone to work with who has

1847
01:43:14,800 --> 01:43:15,500
design skills.

1848
01:43:15,600 --> 01:43:18,800
And if you don't have design skills, there's nothing I can say other

1849
01:43:18,800 --> 01:43:23,400
than beg John to do a tutorial or beg.

1850
01:43:23,400 --> 01:43:29,000
Someone else who's a great game designer to to do a tutorial or

1851
01:43:29,100 --> 01:43:30,600
something because there's

1852
01:43:30,700 --> 01:43:32,100
Nothing I can do to help you there.

1853
01:43:32,300 --> 01:43:33,900
That there's nothing I can do.

1854
01:43:44,400 --> 01:43:48,700
Is this project plan to be a game playable for real in quotes or more

1855
01:43:48,700 --> 01:43:51,400
like, quote, how I create games.

1856
01:43:53,600 --> 01:43:57,800
I'm not sure what you mean, but this game will be should be totally

1857
01:43:57,800 --> 01:44:02,000
professional programming throughout meaning, when you actually play

1858
01:44:02,000 --> 01:44:07,800
it, it will feel expertly tuned, the code will run extremely smoothly,

1859
01:44:07,900 --> 01:44:09,300
you know, no loading screens.

1860
01:44:09,300 --> 01:44:14,100
No craziness, everything streamed, everything's super responsive.

1861
01:44:14,400 --> 01:44:18,200
It should be absolutely top-notch code wise and yankton's also doing

1862
01:44:18,200 --> 01:44:19,600
some pretty fantastic art for it.

1863
01:44:19,600 --> 01:44:21,600
So I think it will also look very good.

1864
01:44:23,600 --> 01:44:28,300
The only thing like I said is not a game designer and the design is

1865
01:44:28,300 --> 01:44:33,900
specifically selected to force us to do a bunch of programming things.

1866
01:44:34,400 --> 01:44:38,600
So, game design wise, it will be relatively traditional, don't expect

1867
01:44:38,600 --> 01:44:44,000
anything, crazy, groundbreaking or whatever in the design.

1868
01:44:44,200 --> 01:44:46,800
Because that is off-limits for this project.

1869
01:44:56,100 --> 01:44:59,000
Since we are talking about oh programming languages, I must ask how do

1870
01:44:59,000 --> 01:44:59,800
you feel about Pearl?

1871
01:45:00,300 --> 01:45:01,600
Haven't used much Pearl.

1872
01:45:01,600 --> 01:45:02,300
I think I wrote it.

1873
01:45:02,300 --> 01:45:04,000
Like one or two Perl scripts, but

1874
01:45:06,700 --> 01:45:10,200
I didn't think it was particularly noteworthy, but I didn't spend

1875
01:45:10,200 --> 01:45:13,900
enough time with it to form an educated opinion.

1876
01:45:21,200 --> 01:45:24,000
Do you feel Minecraft is a success because of the idea rather than the

1877
01:45:24,000 --> 01:45:26,000
execution for the first time ever?

1878
01:45:26,400 --> 01:45:32,000
Well I don't know that that you could say that Minecraft was the first

1879
01:45:32,000 --> 01:45:35,700
time that something was successful because of an idea rather than the

1880
01:45:35,700 --> 01:45:40,100
execution, I think they're probably have been games in the past that

1881
01:45:40,100 --> 01:45:43,400
were successful because of their idea rather than their execution.

1882
01:45:44,900 --> 01:45:46,600
But yeah, probably.

1883
01:45:46,900 --> 01:45:50,100
I mean, you know, there's a lot of things about Minecraft that could

1884
01:45:50,100 --> 01:45:54,700
have been executed better than they were but like anything else.

1885
01:45:55,200 --> 01:46:00,700
If you have a unique enough thing that you make, and it happens to hit

1886
01:46:00,700 --> 01:46:03,900
that sweet spot of something that people really want to play.

1887
01:46:04,700 --> 01:46:08,100
Then you can get a lot of slack in the execution, right?

1888
01:46:09,800 --> 01:46:14,400
And so, you know that's great, if you can do it personally,

1889
01:46:15,800 --> 01:46:19,100
I haven't played Minecraft.

1890
01:46:19,400 --> 01:46:22,700
I don't really know much about it so I don't really have an opinion

1891
01:46:22,700 --> 01:46:25,100
about why it was successful or anything I just know that.

1892
01:46:25,100 --> 01:46:28,600
Obviously if you look at screenshots of Minecraft obviously you could

1893
01:46:28,600 --> 01:46:31,100
have imagined a much more polished version of that game.

1894
01:46:32,700 --> 01:46:39,500
But you know whether that's how relevant that is, I don't know.

1895
01:46:40,200 --> 01:46:42,600
You could also Imagine a less polished version of it, right?

1896
01:46:42,600 --> 01:46:44,200
So they did polish it to a certain degree.

1897
01:46:45,400 --> 01:46:46,000
So, I don't know.

1898
01:46:51,100 --> 01:46:53,000
All right, think we've come to the end.

1899
01:46:54,300 --> 01:46:56,600
We've come to the end of the questions.

1900
01:46:57,700 --> 01:46:59,900
Someone asked dynamically generated Maps.

1901
01:46:59,900 --> 01:47:03,200
Yes, the maps will be dynamically generated there, in fact, already

1902
01:47:03,200 --> 01:47:04,100
dynamically generated.

1903
01:47:04,100 --> 01:47:07,600
We just don't have any actual code to generate interesting Dynamic

1904
01:47:07,600 --> 01:47:09,900
Maps, but it actually does generate the map at the beginning.

1905
01:47:10,400 --> 01:47:11,800
It's just stand in.

1906
01:47:12,000 --> 01:47:14,200
So it's a really boring map.

1907
01:47:20,400 --> 01:47:22,700
All right, all right, everyone.

1908
01:47:22,700 --> 01:47:24,900
I'm going to wind its down.

1909
01:47:25,200 --> 01:47:26,700
I'm going to wind it down.

1910
01:47:28,200 --> 01:47:30,000
So, let's go ahead and close this guy.

1911
01:47:32,000 --> 01:47:33,900
And switch over here.

1912
01:47:34,800 --> 01:47:37,000
Alright everyone, thank you for joining me for another episode of

1913
01:47:37,000 --> 01:47:37,600
handmade hero.

1914
01:47:37,600 --> 01:47:38,800
It's been a pleasure coding with you.

1915
01:47:38,800 --> 01:47:42,300
As always, if you would like to follow along at home you can always

1916
01:47:42,300 --> 01:47:42,500
do.

1917
01:47:42,500 --> 01:47:46,200
So if you preorder the game on handmade here at org, you can get the

1918
01:47:46,200 --> 01:47:49,300
source code, which I upload every night after I am done.

1919
01:47:49,500 --> 01:47:53,300
So, if you'd like to play around with it and experiment, do whatever

1920
01:47:53,300 --> 01:47:54,500
you want to do there.

1921
01:47:55,100 --> 01:47:58,600
As part of learning to program, you can do.

1922
01:47:58,600 --> 01:47:59,000
So

1923
01:48:00,000 --> 01:48:03,700
And also we have a forum site if you want to ask questions there, we

1924
01:48:03,700 --> 01:48:05,700
also have a patreon page, you can go to.

1925
01:48:06,200 --> 01:48:09,300
If you would like to support the video series that we do here.

1926
01:48:09,800 --> 01:48:12,800
And we also have a tweetbot that tells you when the video series is

1927
01:48:12,800 --> 01:48:15,800
live on Twitch, so you can plan to be here.

1928
01:48:15,800 --> 01:48:19,400
If it's something that you want to catch live, that's the place to do

1929
01:48:19,400 --> 01:48:19,700
it.

1930
01:48:20,500 --> 01:48:21,800
I will be back here again.

1931
01:48:21,800 --> 01:48:22,700
Tomorrow, 5:00 p.m.

1932
01:48:22,700 --> 01:48:23,800
Pacific Daylight time.

1933
01:48:24,600 --> 01:48:26,600
I think the mixer is basically done.

1934
01:48:28,600 --> 01:48:29,600
I would like to move

1935
01:48:30,000 --> 01:48:32,800
I'm out too explicit since it seemed like that was useful thing to do

1936
01:48:33,600 --> 01:48:37,700
and maybe we should support stereo sounds which would just be calling

1937
01:48:37,700 --> 01:48:40,200
that Loop twice in the case where we have stereo.

1938
01:48:41,200 --> 01:48:42,500
So I don't know.

1939
01:48:43,700 --> 01:48:47,200
You know, I think maybe one more day would be a good idea and we'll

1940
01:48:47,200 --> 01:48:47,700
take a look.

1941
01:48:48,100 --> 01:48:52,200
So let's go ahead and plan on doing one more day audio tomorrow and

1942
01:48:52,200 --> 01:48:55,400
then probably move on to the asset pack file stuff, which I think

1943
01:48:55,400 --> 01:48:57,900
should be pretty straightforward because we've pretty much already

1944
01:48:57,900 --> 01:48:59,900
done, the vast majority.

1945
01:49:00,000 --> 01:49:01,800
Any of the work that we need to do for it.

1946
01:49:01,800 --> 01:49:05,100
So it's going to be a bit like shooting fish in a barrel.

1947
01:49:05,400 --> 01:49:08,800
Now why fish would be in a barrel and why you would feel the need to

1948
01:49:08,800 --> 01:49:09,500
shoot them at that point?

1949
01:49:09,500 --> 01:49:10,100
I don't know.

1950
01:49:10,500 --> 01:49:12,000
But that's just what the saying is.

1951
01:49:12,400 --> 01:49:17,700
So until tomorrow everyone have a good one and I will catch you guys

1952
01:49:17,700 --> 01:49:18,700
on the internet.

1953
01:49:18,700 --> 01:49:19,300
Take it easy.

