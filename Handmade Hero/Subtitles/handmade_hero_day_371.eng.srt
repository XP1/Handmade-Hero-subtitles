1
00:00:04,500 --> 00:00:07,000
Hello everyone and welcome to handmade here on the show.

2
00:00:07,000 --> 00:00:09,500
We could have complete game live on stream.

3
00:00:09,900 --> 00:00:18,000
We are in the middle here of doing a conversion of our opengl fixed

4
00:00:18,000 --> 00:00:22,400
function pipeline code, to sort of the more modern core opengl

5
00:00:22,800 --> 00:00:23,200
pipeline.

6
00:00:23,200 --> 00:00:26,600
Now that we have everything working and last week we have started last

7
00:00:26,600 --> 00:00:30,600
week yesterday, we stopped right at the point where we had sort of

8
00:00:31,000 --> 00:00:32,000
moved over to

9
00:00:33,500 --> 00:00:39,000
We sort of began the move over to more of a streaming triangle system

10
00:00:39,600 --> 00:00:42,100
from something that was more logical based.

11
00:00:42,100 --> 00:00:45,300
And today we're just going to try and finish up that move or at least

12
00:00:45,300 --> 00:00:49,900
the first part of that move, which is what we, what will put us in a

13
00:00:49,900 --> 00:00:55,800
good position to do sort of a cleaner and more modern opengl pipeline.

14
00:00:57,200 --> 00:00:58,600
So that's all we're doing right now.

15
00:00:59,200 --> 00:01:01,300
If you followed yesterday then you kind of know what we're doing

16
00:01:01,300 --> 00:01:03,700
because we stopped at a point where we're like all right here's you

17
00:01:03,700 --> 00:01:07,400
know the this working with just one batch and now we're going to try

18
00:01:07,400 --> 00:01:10,400
to make it so that it's sort of buffers up a large number of triangles

19
00:01:10,400 --> 00:01:15,300
rather than just one set of single set of a single quad per batch.

20
00:01:15,800 --> 00:01:17,000
So that's all we're really doing here.

21
00:01:17,000 --> 00:01:20,600
So let's go ahead and dive in today is a 371.

22
00:01:20,600 --> 00:01:23,600
So if you want to follow along at home, you want start with a 370

23
00:01:23,600 --> 00:01:24,300
source code.

24
00:01:25,100 --> 00:01:26,500
Let's go ahead and

25
00:01:26,700 --> 00:01:27,000
Ben.

26
00:01:29,800 --> 00:01:30,700
The project.

27
00:01:31,900 --> 00:01:32,400
All right.

28
00:01:34,700 --> 00:01:35,900
alrighty, so

29
00:01:37,700 --> 00:01:40,000
if I go ahead and

30
00:01:41,700 --> 00:01:42,400
Right?

31
00:01:43,300 --> 00:01:46,700
You can see that we've got everything working relatively correctly

32
00:01:46,700 --> 00:01:47,200
here.

33
00:01:47,200 --> 00:01:51,900
However, as you know, each of these sort of Sprites that you see on

34
00:01:51,900 --> 00:01:55,800
the screen is drawn with a separate in our render, is it putting a

35
00:01:55,800 --> 00:01:59,700
separate entry in for each one of those but the whole point of what we

36
00:01:59,700 --> 00:02:04,600
did yesterday was to make it so that we no longer have to do that, at

37
00:02:04,600 --> 00:02:06,900
least on the submission side.

38
00:02:07,300 --> 00:02:11,100
So what we did is we added this thing here called render entry text

39
00:02:11,200 --> 00:02:11,700
Quads.

40
00:02:12,000 --> 00:02:16,100
Those textured quads is just a number which says, how many quads are

41
00:02:16,100 --> 00:02:20,700
going to be and then an offset into a giant buffer, fill of vertices,

42
00:02:20,700 --> 00:02:24,300
where the vertices for the quads get pushed along side, that is a

43
00:02:24,300 --> 00:02:26,600
parallel array of bitmap pointers.

44
00:02:26,600 --> 00:02:29,100
Each bitmap pointer corresponds to one of the quads.

45
00:02:29,300 --> 00:02:32,400
So for every quad, we can say, here's the bitmap that we want to draw

46
00:02:32,600 --> 00:02:33,500
with that quad.

47
00:02:34,700 --> 00:02:35,300
Right?

48
00:02:35,800 --> 00:02:37,400
So that's all we want to do here.

49
00:02:37,900 --> 00:02:41,700
And if we bounce back over to the opengl code, we can see that.

50
00:02:41,700 --> 00:02:43,200
Actually, we're all ready.

51
00:02:43,500 --> 00:02:49,000
We're ready to support that quad cab, you know, quad count being

52
00:02:49,000 --> 00:02:49,500
anything.

53
00:02:49,500 --> 00:02:54,000
It wants to be it Loops over the quad count and just draws whatever it

54
00:02:54,000 --> 00:02:54,700
finds there.

55
00:02:54,900 --> 00:02:58,600
It's still submitting it fire, the opengl fixed function pipeline.

56
00:02:58,700 --> 00:02:59,800
So like I said, well,

57
00:03:00,000 --> 00:03:03,600
Quite a mean it's switching to its own program but the vertex

58
00:03:03,600 --> 00:03:06,200
submission is via the opengl fixed function pipeline.

59
00:03:06,600 --> 00:03:10,800
What we want to do is switch this over to be a more modern version,

60
00:03:10,800 --> 00:03:14,600
that doesn't use the fixed function pipeline, which we, or at least

61
00:03:16,400 --> 00:03:20,600
I should say we don't want to use immediate mode submission so that

62
00:03:20,600 --> 00:03:23,200
will be a little bit more modern immediate but its mission is kind of

63
00:03:23,800 --> 00:03:24,800
old at this point.

64
00:03:25,600 --> 00:03:29,100
So in order to get to that point though, what I want to do first is

65
00:03:29,100 --> 00:03:32,000
just make it so that rather than sending these down one at a time and

66
00:03:32,000 --> 00:03:35,900
because all of our entries right now have a quad count of one and you

67
00:03:35,900 --> 00:03:38,000
know so it's just 1 1 quad /.

68
00:03:38,100 --> 00:03:41,400
What I want to do is get to the point where we're sending down a large

69
00:03:41,400 --> 00:03:43,400
batch of them at the same time, right?

70
00:03:43,400 --> 00:03:46,000
So many many, many quads like I said,

71
00:03:46,200 --> 00:03:49,500
We'll still have a problem with the bitmap part of things and we'll

72
00:03:49,500 --> 00:03:50,700
talk about that a little bit later.

73
00:03:51,400 --> 00:03:56,000
But for right now we're just trying to get all of our vertices in into

74
00:03:56,000 --> 00:03:57,700
a more sane submission way.

75
00:04:01,600 --> 00:04:05,500
My nose is very runny, so you're going to hear a lot of NOS blowing on

76
00:04:05,500 --> 00:04:05,900
today's show you.

77
00:04:05,900 --> 00:04:06,600
It's not gonna be pretty.

78
00:04:10,800 --> 00:04:12,500
I'm not sick, it's just allergy season.

79
00:04:13,400 --> 00:04:17,899
The weather is getting warmer and it's always a always rough when the

80
00:04:17,899 --> 00:04:19,399
weather gets warmer in Seattle, right?

81
00:04:19,500 --> 00:04:20,500
So here we go.

82
00:04:21,200 --> 00:04:27,400
What we want to do is essentially take all of these calls inside, our

83
00:04:28,100 --> 00:04:29,400
are handmade render group.

84
00:04:29,700 --> 00:04:33,500
And right now, what we're doing is, every time we push a bitmap on,

85
00:04:34,100 --> 00:04:36,700
you can see this, this is the call for pushing it back up here.

86
00:04:37,100 --> 00:04:39,800
Every time we push a bitmap on, you can see us doing this

87
00:04:40,000 --> 00:04:45,300
Process where we actually create a new entry render entry, textured

88
00:04:45,300 --> 00:04:47,200
quads every time.

89
00:04:47,400 --> 00:04:47,900
Right?

90
00:04:48,800 --> 00:04:53,300
And so, what we want to do instead is just if we already have a render

91
00:04:53,300 --> 00:05:00,400
entry textured quads lying around, then we will just add to it right?

92
00:05:00,400 --> 00:05:02,700
That's all we really want to do.

93
00:05:03,000 --> 00:05:06,400
So what we want to do here is basically say something like, okay,

94
00:05:07,300 --> 00:05:09,800
inside the render group itself.

95
00:05:09,900 --> 00:05:10,000
F.

96
00:05:12,300 --> 00:05:16,900
What I want to do is say at the end and you can see I stuck it here at

97
00:05:16,900 --> 00:05:17,900
the end of the thing.

98
00:05:17,900 --> 00:05:22,600
I'm just going to have a notion of the last render entry textured

99
00:05:22,600 --> 00:05:23,200
quads.

100
00:05:23,200 --> 00:05:26,500
We pushed on there and every time we get a new one,

101
00:05:28,700 --> 00:05:31,300
What I want to do is just append it, right?

102
00:05:31,300 --> 00:05:39,100
I just want to append that that the new data to the old textured quad

103
00:05:39,100 --> 00:05:40,600
struct, okay?

104
00:05:41,600 --> 00:05:44,700
So what I want to do when we come in here to push bitmap is say,

105
00:05:44,700 --> 00:05:48,300
alright, there's an entry for this thing right?

106
00:05:48,600 --> 00:05:52,700
And the entry is going to be the red, the current quads, oops.

107
00:05:56,400 --> 00:05:59,800
Right to the answer is going to be the current quads for you.

108
00:06:00,000 --> 00:06:01,800
Whatever this, this render group is.

109
00:06:02,200 --> 00:06:07,700
And, as I go with this current quads here, I will basically, I'll know

110
00:06:07,700 --> 00:06:11,200
when I, when I look at it, if it's not there, right?

111
00:06:11,200 --> 00:06:14,200
If, if it was set to zero so current quads doesn't currently have

112
00:06:14,200 --> 00:06:16,800
anything in it, then I'll push a new one.

113
00:06:20,900 --> 00:06:21,300
Right?

114
00:06:21,300 --> 00:06:24,900
And I'm not going to use this plus size of loaded bitmap here.

115
00:06:25,100 --> 00:06:26,200
We'll see why in a second.

116
00:06:26,700 --> 00:06:31,000
So I'm just going to push the new render entry textured quads struct

117
00:06:31,000 --> 00:06:31,400
on.

118
00:06:31,400 --> 00:06:36,900
If I don't have one right, that's what I'm going to do here and then

119
00:06:37,000 --> 00:06:38,300
assuming that I got it.

120
00:06:38,300 --> 00:06:41,000
Now if there's an error case and we ran on the memory, then this will

121
00:06:41,000 --> 00:06:41,500
fail this.

122
00:06:41,500 --> 00:06:45,800
If will fail, but assuming that I got it, then also what I'll do is

123
00:06:45,800 --> 00:06:47,900
I'm going to save it, right?

124
00:06:48,200 --> 00:06:50,600
So in some sense, I could also do it this way I suppose.

125
00:06:52,800 --> 00:06:53,900
This might be a little better.

126
00:06:55,800 --> 00:06:56,100
Right.

127
00:06:56,100 --> 00:07:00,400
So basically if that, you know, if that member isn't set to something,

128
00:07:00,600 --> 00:07:01,400
let's fill it in.

129
00:07:02,100 --> 00:07:02,600
Okay?

130
00:07:02,900 --> 00:07:05,500
Then we grab it out and we go from there.

131
00:07:06,000 --> 00:07:09,200
And then for that point, the only way this would be 0 is if we ran out

132
00:07:09,200 --> 00:07:12,000
of memory for our stuff, right?

133
00:07:13,200 --> 00:07:18,300
Okay, so the other thing we can do here is move our assertion up to

134
00:07:18,300 --> 00:07:19,700
make this more robust as well.

135
00:07:19,700 --> 00:07:20,300
We could say.

136
00:07:20,300 --> 00:07:22,500
Alright, the other thing we need to probably know

137
00:07:25,700 --> 00:07:29,800
Is that however, many vertices we have so far that if we were to push

138
00:07:29,800 --> 00:07:34,600
four of them on, we would not exceed our maximum vertex count, right?

139
00:07:34,600 --> 00:07:38,000
So we'll also clip that off there and then there's one other thing.

140
00:07:38,000 --> 00:07:39,900
We're going to have to check and you'll see what that is in a second.

141
00:07:39,900 --> 00:07:44,500
So once we push this on, you can see that we could just go from here

142
00:07:44,500 --> 00:07:50,100
because the vertex array stream is is all fine and dandy, but we end

143
00:07:50,100 --> 00:07:54,000
up in a another sort of problem where we've got these loaded bitmaps.

144
00:07:54,300 --> 00:07:57,700
And the loaded bitmaps are in the same sort of

145
00:07:59,900 --> 00:08:01,800
They have the same situation as the vertices, right.

146
00:08:01,800 --> 00:08:03,600
We're sort of pushing them on one at a time.

147
00:08:03,700 --> 00:08:08,100
We need a place for them to go and so it seems like probably what we

148
00:08:08,100 --> 00:08:10,900
want to do here and it's hard to say but it seems like probably what

149
00:08:10,900 --> 00:08:15,000
we want to do here is just have that be also part of the stream, we

150
00:08:15,000 --> 00:08:19,500
could put it as part of the the the memory that we're using to as the

151
00:08:19,500 --> 00:08:20,200
push buffer.

152
00:08:21,200 --> 00:08:22,000
In this case.

153
00:08:23,000 --> 00:08:26,500
But I'm not sure there's any real point to doing it that because we

154
00:08:26,500 --> 00:08:29,300
know that we've got to fix vertex size buffer, we might as well have a

155
00:08:29,300 --> 00:08:32,900
buffer of pointers as well, right?

156
00:08:33,700 --> 00:08:38,000
And so I think what we want to do here is say, hey, just drive this

157
00:08:38,000 --> 00:08:42,500
off of the vertex count, since we know the vertex count corresponds

158
00:08:42,500 --> 00:08:44,200
one to one with the loaded bitmaps.

159
00:08:44,500 --> 00:08:48,300
Let's just use that at least for now if that changes, then we can do

160
00:08:48,300 --> 00:08:50,800
something different obviously but so

161
00:08:51,000 --> 00:08:54,400
All we need to do here is say, alright, let's get rid of the bitmap

162
00:08:54,400 --> 00:08:59,300
array concept and Winstead will say, is the commands.

163
00:09:00,000 --> 00:09:02,500
Bitmaps or quad bitmaps.

164
00:09:03,100 --> 00:09:04,100
I don't know, we'll call it.

165
00:09:09,500 --> 00:09:10,800
I guess we'll call it quad boot camps.

166
00:09:11,700 --> 00:09:15,600
So we have our quad bitmaps and we just want to set like we were

167
00:09:15,600 --> 00:09:16,500
setting here.

168
00:09:16,800 --> 00:09:21,400
We just want to use whatever the the vertex, count, basically divided

169
00:09:21,400 --> 00:09:22,700
by 4, right?

170
00:09:22,700 --> 00:09:27,300
So we're basically just shifting down by to the the value of this

171
00:09:27,300 --> 00:09:31,800
thing and saying, whatever that, you know, whatever the vertex count

172
00:09:31,800 --> 00:09:36,200
is, we know that we want one bitmap for every four vertices.

173
00:09:36,200 --> 00:09:38,100
And so off we go, right?

174
00:09:39,100 --> 00:09:41,600
And like I said, we can play around with that a little bit more.

175
00:09:43,800 --> 00:09:44,900
If we get fancier later.

176
00:09:44,900 --> 00:09:45,700
But for now,

177
00:09:47,100 --> 00:09:48,300
That would be all we would need.

178
00:09:49,400 --> 00:09:54,700
And so that will just work except for one slight problem, which we can

179
00:09:54,700 --> 00:09:55,800
talk about in a second.

180
00:09:56,200 --> 00:09:59,600
But what we do know is that if we want that to work, we will need in

181
00:09:59,600 --> 00:10:01,800
our platform layer to supply.

182
00:10:02,000 --> 00:10:03,700
Also the buffer of pointers here.

183
00:10:05,200 --> 00:10:09,700
So if we come up in here and we wanted to put a loaded bitmap struct

184
00:10:09,700 --> 00:10:14,200
in here, we would say this is quad bitmaps and that would have to be

185
00:10:14,200 --> 00:10:16,700
initialized to the same size.

186
00:10:17,000 --> 00:10:25,000
All right so moving on oops I forgot a pointer in there.

187
00:10:25,000 --> 00:10:27,300
This is pointers to bitmaps not bitmaps themselves.

188
00:10:28,400 --> 00:10:30,100
So in the platform layer,

189
00:10:31,600 --> 00:10:32,900
That means that has to be.

190
00:10:36,000 --> 00:10:37,000
Allocated as well.

191
00:10:37,600 --> 00:10:40,400
So what we want to do here, probably is say.

192
00:10:43,000 --> 00:10:47,900
We've got a block that's just a Max vertex count times, loaded bitmap

193
00:10:47,900 --> 00:10:54,300
star, and then that's going to be loaded bitmap star star bitmap

194
00:10:54,300 --> 00:10:54,800
array.

195
00:10:59,400 --> 00:11:04,100
And inside our platform initializer, when we do render command struct

196
00:11:04,100 --> 00:11:08,300
with that vertex array, there, we also want to put the bitmap Arabian.

197
00:11:13,200 --> 00:11:16,500
And so, when we go ahead and specify that will just push it on here.

198
00:11:16,500 --> 00:11:20,600
And now, the platform layer sends those buffers down and it's Off to

199
00:11:20,600 --> 00:11:21,200
the Races.

200
00:11:21,700 --> 00:11:22,100
Oops.

201
00:11:31,600 --> 00:11:35,900
So now we should have exactly what we expect to have.

202
00:11:36,700 --> 00:11:42,200
A fact I can if we want to have this happen every time where we just

203
00:11:42,200 --> 00:11:47,800
say let's allocate one each time we go and and this should still work,

204
00:11:47,900 --> 00:11:48,300
right?

205
00:11:49,100 --> 00:11:52,600
Oh except for the fact that we forgot to have the reader do the same

206
00:11:52,600 --> 00:11:52,900
thing.

207
00:11:53,100 --> 00:11:54,700
So let's quickly just do that as well.

208
00:11:55,300 --> 00:11:58,700
So on these, let's go ahead and get rid of this bitmap right here.

209
00:12:11,600 --> 00:12:12,100
All right.

210
00:12:13,000 --> 00:12:16,700
So since we have the vertex array offset in there, again the vertex

211
00:12:16,700 --> 00:12:19,700
array offset divided by four is all we would need to know where to

212
00:12:19,700 --> 00:12:21,800
load the bitmap from.

213
00:12:22,200 --> 00:12:26,800
So in terms of the bitmap at all, we really want to do is just say, in

214
00:12:26,800 --> 00:12:29,100
fact, bitmap at doesn't really need to.

215
00:12:29,300 --> 00:12:29,700
Yeah.

216
00:12:30,600 --> 00:12:34,200
So all we need to do here is say well, we're going to grab the the

217
00:12:34,200 --> 00:12:37,900
quad bitmaps and we're going to offset by the vertex array offset.

218
00:12:37,900 --> 00:12:40,700
But again, we just want to divide that by 4

219
00:12:41,400 --> 00:12:45,200
So, we just want to say like, all right, you know, use the same offset

220
00:12:45,200 --> 00:12:48,900
into a separate array, but just get one, every four instead of one

221
00:12:49,200 --> 00:12:51,400
every time, right?

222
00:12:51,700 --> 00:12:53,000
And so, that's all we need to do.

223
00:12:53,100 --> 00:12:57,000
Furthermore we no longer need to do this offsetting here.

224
00:12:57,000 --> 00:13:02,700
Because now, we're back to just adding the size that that the actual

225
00:13:03,500 --> 00:13:06,400
struct is, we don't have to advance anything else, right?

226
00:13:07,200 --> 00:13:11,000
And so here we are to where we were before and all we have to do.

227
00:13:11,200 --> 00:13:14,000
To finish this transition.

228
00:13:14,000 --> 00:13:17,900
Now is just make it so that when we're inside the render group, we

229
00:13:17,900 --> 00:13:21,000
actually push this on in some kind of coherent way.

230
00:13:21,500 --> 00:13:24,000
So if you take a look at what's happening here, if we have a current

231
00:13:24,000 --> 00:13:28,200
quad structure, when we come through here, this quad count, right?

232
00:13:28,200 --> 00:13:31,300
Is going to be something that could be, you know.

233
00:13:33,700 --> 00:13:35,200
Already set, right?

234
00:13:35,300 --> 00:13:37,800
It might be 0 in the case of if, this is the first one.

235
00:13:38,300 --> 00:13:38,700
Oops.

236
00:13:42,300 --> 00:13:45,500
So if this is the first time anyone's pushed went on, so if we hit

237
00:13:45,500 --> 00:13:47,400
this path, then this would be 0.

238
00:13:47,800 --> 00:13:50,400
But if we didn't hit this path then it wouldn't be right?

239
00:13:50,600 --> 00:13:54,500
And same is true here where we're going to only set that vertex offset

240
00:13:54,500 --> 00:13:56,000
the first time, right?

241
00:13:56,400 --> 00:14:00,600
So those get set the first time and then every time thereafter when we

242
00:14:00,600 --> 00:14:02,900
look at the quad count, what we're really doing is just incrementing

243
00:14:02,900 --> 00:14:03,300
it, right?

244
00:14:03,300 --> 00:14:07,100
We're saying okay we're going to add another trying, another quad two

245
00:14:07,100 --> 00:14:09,000
triangles right on to the end.

246
00:14:10,000 --> 00:14:12,700
And so as we go through here, you can see all the rest of this stuff,

247
00:14:12,700 --> 00:14:17,200
should stay essentially the same except this bit right here where

248
00:14:17,200 --> 00:14:18,900
we're looking at the vertex count.

249
00:14:19,300 --> 00:14:21,800
Now has to be a little bit smarter, right?

250
00:14:21,800 --> 00:14:26,800
It has to use the vertex array offset for the vertex count, and it

251
00:14:26,800 --> 00:14:30,100
needs to add the quad count times for to that, right?

252
00:14:30,600 --> 00:14:34,700
So, in here, we've got sort of the vertex count, which is a separate

253
00:14:34,700 --> 00:14:35,300
thing now,

254
00:14:37,100 --> 00:14:38,100
Well actually you know what?

255
00:14:38,100 --> 00:14:41,400
No we don't why am I saying that this this will still increment

256
00:14:41,400 --> 00:14:42,000
properly.

257
00:14:42,500 --> 00:14:44,200
So actually all that's I guess just fine.

258
00:14:44,900 --> 00:14:48,200
So I think this all just works as it is and this will append to the

259
00:14:48,200 --> 00:14:50,500
current quads as it goes, right?

260
00:14:51,100 --> 00:14:55,900
So now the only question becomes well, when do we have to stop using

261
00:14:55,900 --> 00:14:56,800
current quads?

262
00:14:57,100 --> 00:14:57,600
Right?

263
00:15:00,900 --> 00:15:05,200
If the answer is any time, someone does a push, right?

264
00:15:14,300 --> 00:15:18,000
Any time someone does a push that might affect what we are doing.

265
00:15:18,000 --> 00:15:21,700
Then we need to because these things get retired in order, right?

266
00:15:22,200 --> 00:15:23,400
Any time someone does a push.

267
00:15:23,400 --> 00:15:26,600
That's not one of these quads technically if we want to preserve the

268
00:15:26,600 --> 00:15:27,600
order then we have to it.

269
00:15:27,600 --> 00:15:29,800
So for example if we put too much quads into a clearer than push bunt

270
00:15:29,800 --> 00:15:34,300
squads we have to rescue the the clear in between those two if we want

271
00:15:34,300 --> 00:15:37,000
to preserve the order that people sent them down and now the things

272
00:15:37,000 --> 00:15:41,700
that we are setting again, most of these will go away so bitmap Cube.

273
00:15:41,800 --> 00:15:43,100
Rectangle, all go away.

274
00:15:43,300 --> 00:15:45,500
So the only thing is will be pushing our clip.

275
00:15:45,500 --> 00:15:47,600
Rex blend targets and textured quads.

276
00:15:47,900 --> 00:15:52,100
And so obviously, if we pushed say a new clip, rect we need to respect

277
00:15:52,100 --> 00:15:56,300
that cliprect as we move forward.

278
00:15:56,300 --> 00:15:59,000
And so, you know, change the transform change stuff like that.

279
00:15:59,400 --> 00:16:01,700
Actually is important when we're pushing quads.

280
00:16:01,900 --> 00:16:06,900
So, any time we do a push of that nature, we're going to have to clear

281
00:16:06,900 --> 00:16:08,000
it out, right?

282
00:16:08,700 --> 00:16:11,600
So what we need, here is something that essentially says all

283
00:16:11,800 --> 00:16:14,700
right, every time you push a render and element,

284
00:16:16,200 --> 00:16:19,800
We need to clear the current quads and I think that should be

285
00:16:19,800 --> 00:16:20,300
sufficient for.

286
00:16:20,300 --> 00:16:23,100
Now, we may have to be a little bit smarter about that later depending

287
00:16:23,100 --> 00:16:26,300
on the sorts of stuff that we push at the end, but I think that is

288
00:16:26,300 --> 00:16:28,200
sufficient and there you go.

289
00:16:30,300 --> 00:16:32,600
So now, we are submitting everything.

290
00:16:32,600 --> 00:16:35,000
As part of this sort of quad batches.

291
00:16:35,100 --> 00:16:39,100
We can take a quick break point into the open gel layer to see how big

292
00:16:39,100 --> 00:16:43,000
those quad batches end up being, which is kind of just something to be

293
00:16:43,000 --> 00:16:47,000
aware of, for our own sort of Sanity check here.

294
00:16:47,500 --> 00:16:51,300
So, let's take a look at how big the quad count is when we go through

295
00:16:51,300 --> 00:16:53,800
a couple different cases here.

296
00:16:57,200 --> 00:16:58,500
So not great.

297
00:16:58,500 --> 00:17:02,200
And I'm assuming that part of the reason for this, let's see if this

298
00:17:02,200 --> 00:17:05,200
is true, is do we push?

299
00:17:05,599 --> 00:17:06,700
I don't know what we do.

300
00:17:06,700 --> 00:17:07,400
Inside the entities.

301
00:17:07,400 --> 00:17:09,800
Do we push a transform every time on the entities?

302
00:17:14,500 --> 00:17:15,300
Yeah, we do.

303
00:17:26,700 --> 00:17:27,400
Or do we?

304
00:17:41,200 --> 00:17:43,700
I'm going to set a breakpoint inside push render on it might just

305
00:17:43,700 --> 00:17:47,900
because we push cubes and other and entities interchangeably and we

306
00:17:47,900 --> 00:17:49,100
move to cubes, it'll be fine.

307
00:17:49,100 --> 00:17:50,300
But let me just double check here.

308
00:17:52,100 --> 00:17:54,800
Because again, I want to make sure we don't have any funny business

309
00:17:54,800 --> 00:17:55,500
going on there.

310
00:18:10,100 --> 00:18:13,800
Alright, so here we are in push render elements, this is pushing a set

311
00:18:13,800 --> 00:18:16,100
up, so we don't care about that one.

312
00:18:19,900 --> 00:18:20,500
Here we are.

313
00:18:20,500 --> 00:18:25,400
Drawing hip points that draws a rectangle rectangle rectangle.

314
00:18:26,600 --> 00:18:27,900
Draw a bunch of rectangles.

315
00:18:38,300 --> 00:18:39,200
Okay, there's a push with Map.

316
00:18:39,200 --> 00:18:40,400
There's a push Cube.

317
00:18:43,400 --> 00:18:45,300
So, you can see their kind of sandwich in there.

318
00:18:47,600 --> 00:18:49,200
Why is this feeling so sluggish?

319
00:18:52,000 --> 00:18:52,500
There we go.

320
00:18:52,800 --> 00:18:54,100
You can actually see what's going on.

321
00:18:56,100 --> 00:18:57,900
So a lot of these are push Cube calls.

322
00:18:57,900 --> 00:19:01,200
So, maybe the best thing to do would just be to switch to a push to

323
00:19:01,200 --> 00:19:02,000
the push Cube.

324
00:19:05,700 --> 00:19:08,400
All right, so let's take a look at something here.

325
00:19:08,400 --> 00:19:12,600
Let me just go ahead and and really quickly move the push cube in

326
00:19:12,600 --> 00:19:16,000
there too, because there's no reason we can't do the push cube in

327
00:19:16,000 --> 00:19:16,700
there as well.

328
00:19:18,900 --> 00:19:19,700
Because right now,

329
00:19:23,700 --> 00:19:26,300
We can't a great much because push Cube gets called a lot.

330
00:19:27,200 --> 00:19:32,000
All right, so if we come up through here and take a look at render

331
00:19:32,000 --> 00:19:37,300
group entry render type enter Cube, let's just grab that out and make

332
00:19:37,300 --> 00:19:38,500
that work in the other way.

333
00:19:38,500 --> 00:19:45,300
Now, we do a disabled of GL texture 2D here and so I'll replicate that

334
00:19:45,300 --> 00:19:49,300
behavior temporarily just because we don't have any textures to slap

335
00:19:49,300 --> 00:19:52,400
on here, but eventually, that would go away, right?

336
00:19:53,500 --> 00:19:58,500
So in here, where we do the buying texture call, right?

337
00:19:58,900 --> 00:20:00,900
What I'll do is I'll just do if bitmap.

338
00:20:02,100 --> 00:20:02,700
Else.

339
00:20:04,800 --> 00:20:05,600
And I don't know.

340
00:20:05,600 --> 00:20:09,600
So here's a question, I'm not really sure what will happen if I bind

341
00:20:10,000 --> 00:20:11,100
no texture.

342
00:20:12,600 --> 00:20:14,100
Let me just see what happens.

343
00:20:14,100 --> 00:20:15,400
If I don't bind a texture.

344
00:20:15,400 --> 00:20:15,900
I'm curious.

345
00:20:15,900 --> 00:20:18,700
If we draw white or, if it's all black

346
00:20:21,400 --> 00:20:22,300
It's all black.

347
00:20:24,200 --> 00:20:27,800
So I do have to disable what I could do is make a texture.

348
00:20:28,200 --> 00:20:33,000
That's the untextured texture, which is probably the better thing to

349
00:20:33,000 --> 00:20:33,200
do.

350
00:20:33,200 --> 00:20:36,300
But like I said, temporarily, since this is not really a case that I

351
00:20:36,300 --> 00:20:39,100
care about, I'm probably not going to bother

352
00:20:41,100 --> 00:20:46,300
All right, so in here let's just go ahead and say that in this case.

353
00:20:49,400 --> 00:20:50,500
We do a disabled.

354
00:21:07,900 --> 00:21:12,500
Okay, so we do a disabled if we have 240 and then we come and

355
00:21:12,500 --> 00:21:14,200
re-enable it again at the end.

356
00:21:14,400 --> 00:21:17,600
Like so and that will allow us to just do the cubes way.

357
00:21:17,600 --> 00:21:22,000
We are doing them now as well, just for debugging purposes, so when

358
00:21:22,000 --> 00:21:25,600
someone does push a cube on again, all I'm going to do here is I'm

359
00:21:25,600 --> 00:21:29,900
just going to grab the render entry Cube code exactly as it is.

360
00:21:29,900 --> 00:21:32,200
And I'm pretty much just going to translate it into something that

361
00:21:32,200 --> 00:21:36,200
pushes the vertices on as they are.

362
00:21:36,700 --> 00:21:37,600
And rather than

363
00:21:37,700 --> 00:21:39,600
Pushing just that description of the cube.

364
00:21:39,600 --> 00:21:41,400
It'll just push the vertices on and off.

365
00:21:41,400 --> 00:21:42,000
We will go.

366
00:21:43,200 --> 00:21:47,900
And so the same we could do the exact same thing for the rectangles

367
00:21:47,900 --> 00:21:50,100
to, but one thing at a time.

368
00:21:50,800 --> 00:21:52,800
So let's get rid of rendering for cube here.

369
00:21:52,800 --> 00:21:56,500
And in fact, I'll actually just get rid of render entry Cube at a like

370
00:21:56,500 --> 00:21:57,600
in its entirety.

371
00:22:07,700 --> 00:22:11,000
And now I just need to actually convert this stuff.

372
00:22:11,400 --> 00:22:14,100
So instead of pushing render entry Cube instead, what we're going to

373
00:22:14,100 --> 00:22:18,900
do here is I'm going to do the same thing that we did for getting the

374
00:22:19,000 --> 00:22:20,000
rendering tree quads.

375
00:22:20,200 --> 00:22:23,000
So what I want here is I want a little utility function that will just

376
00:22:23,000 --> 00:22:25,800
do a section centrally this right here.

377
00:22:26,600 --> 00:22:28,200
So this this code,

378
00:22:35,500 --> 00:22:38,200
At will basically get the current quads out.

379
00:22:42,000 --> 00:22:46,400
Like so and when you call me, just put that into it.

380
00:22:49,800 --> 00:22:50,100
Yeah.

381
00:22:52,600 --> 00:22:55,800
When I call this function, it'll check to make sure that we actually

382
00:22:55,800 --> 00:23:00,900
have some, if we don't have some, it'll make some and then give it

383
00:23:00,900 --> 00:23:01,400
back.

384
00:23:01,500 --> 00:23:05,400
So then whenever we do this, I can just say, get current quads and

385
00:23:05,400 --> 00:23:09,600
pass the group and then anyone who wants to do this, can just take a

386
00:23:09,600 --> 00:23:10,600
look, right.

387
00:23:11,200 --> 00:23:17,500
The other thing I can do is make this be more of a sort of automated

388
00:23:17,500 --> 00:23:18,300
function here.

389
00:23:18,600 --> 00:23:21,800
So what I can do is in here, check the if

390
00:23:22,900 --> 00:23:25,400
To see whether or not the thing that's going to be put in there will

391
00:23:25,400 --> 00:23:28,000
fit and if the thing that's going to put in there won't fit will

392
00:23:28,000 --> 00:23:30,600
pretend that we didn't get one, right?

393
00:23:31,300 --> 00:23:35,000
So, basically in here, will say, what's the, you know, number of quads

394
00:23:35,000 --> 00:23:41,200
that you intend to push like so and then what we can do is say, well,

395
00:23:41,200 --> 00:23:45,600
alright, if the current vertex X, the quad count.

396
00:23:46,000 --> 00:23:50,700
Sorry, plus the quad count times 4 is going to be

397
00:23:51,900 --> 00:23:55,900
Greater than or equal to I'm sorry or just greater than the max vertex

398
00:23:55,900 --> 00:23:56,600
count.

399
00:23:58,100 --> 00:23:58,600
Then.

400
00:24:00,300 --> 00:24:01,400
To do to do to do.

401
00:24:04,800 --> 00:24:05,900
Then we'd be in trouble.

402
00:24:06,800 --> 00:24:09,800
I guess we could also just since we know that the, the amounts the

403
00:24:09,800 --> 00:24:11,600
same, well, no, I guess that's all.

404
00:24:11,600 --> 00:24:14,900
We need to check because we know that the other that the bitmap array

405
00:24:14,900 --> 00:24:17,400
is also exactly in line.

406
00:24:17,600 --> 00:24:21,300
So we could just say that four times the quad cap plus the max vertex

407
00:24:21,300 --> 00:24:21,500
count.

408
00:24:21,500 --> 00:24:23,900
That's that's really all we need to know, right?

409
00:24:25,300 --> 00:24:25,900
So

410
00:24:27,000 --> 00:24:32,600
when I call this, I know that this is only going to push one quad on

411
00:24:34,100 --> 00:24:34,600
and

412
00:24:37,200 --> 00:24:40,600
In fact, I guess we could also increment this.

413
00:24:45,200 --> 00:24:47,600
And let's leave that in case the other person wants to do it, all

414
00:24:47,600 --> 00:24:48,000
right.

415
00:24:50,200 --> 00:24:52,800
So there's our quad count for push Cube.

416
00:24:52,800 --> 00:24:56,600
We want to do the same thing, so I want to have a render entry

417
00:24:56,600 --> 00:24:57,600
textured quads.

418
00:24:57,600 --> 00:24:59,700
I want to get that entry.

419
00:25:00,000 --> 00:25:01,400
I don't know why I just deleted that.

420
00:25:01,900 --> 00:25:04,800
And so I'm going to do get current quads here.

421
00:25:04,800 --> 00:25:06,200
And I'm going to pass the group.

422
00:25:06,200 --> 00:25:08,400
And I'm also going to say how many I want to push.

423
00:25:08,600 --> 00:25:13,300
Obviously, I need 14 quad for every face of the cube, which is going

424
00:25:13,300 --> 00:25:15,900
to be six faces total for six squads.

425
00:25:16,800 --> 00:25:19,100
And then, when I come through here, I need to now

426
00:25:20,000 --> 00:25:21,600
You know place the stuff in that.

427
00:25:21,600 --> 00:25:24,100
I need to record, right?

428
00:25:25,500 --> 00:25:26,100
All right.

429
00:25:26,900 --> 00:25:31,400
So looking at all this, most of this code can stay the same, right?

430
00:25:31,400 --> 00:25:33,500
Most of this code, you can see here.

431
00:25:33,500 --> 00:25:35,800
We've just got a Primo color on there.

432
00:25:36,600 --> 00:25:40,200
Otherwise we just have bitmap p, height, and radius are actually all

433
00:25:40,200 --> 00:25:41,800
directly stored.

434
00:25:42,000 --> 00:25:45,200
So all of this stuff should work, instead of cube P.

435
00:25:45,800 --> 00:25:47,100
We should just be able to use p.

436
00:25:48,600 --> 00:25:53,000
And instead of like Cube Arrow, we can use that radius and height for

437
00:25:53,000 --> 00:25:53,600
everything.

438
00:25:54,500 --> 00:25:56,200
And then these peas, ER, 123.

439
00:25:56,200 --> 00:25:57,200
Those all stay the same.

440
00:25:57,200 --> 00:26:01,200
All these computations will all stay the same as well.

441
00:26:01,800 --> 00:26:04,000
Everything here should be roughly.

442
00:26:04,000 --> 00:26:04,800
Correct.

443
00:26:05,000 --> 00:26:07,800
And then we don't need any of these sorts of things, but we do need to

444
00:26:07,800 --> 00:26:12,100
record the bitmap texture handle in this case, right?

445
00:26:12,700 --> 00:26:15,400
But it's just going to be bitmap for our purposes.

446
00:26:15,700 --> 00:26:17,100
So we need to record this.

447
00:26:18,800 --> 00:26:19,900
I'll do that one second.

448
00:26:20,700 --> 00:26:26,300
And then we need to actually make these quads into vertex pushes right

449
00:26:26,700 --> 00:26:32,000
now, what you can see here is we sort of have a notion in GL land that

450
00:26:32,000 --> 00:26:35,700
it would be easier if we could just say, hey here's you know,

451
00:26:37,900 --> 00:26:39,000
Here's a quad.

452
00:26:39,200 --> 00:26:43,400
So what what I probably want to do is just say, you know, push quad

453
00:26:45,300 --> 00:26:48,100
and have a way to push the quad on to the entry directly.

454
00:26:48,400 --> 00:26:48,900
Right?

455
00:26:49,300 --> 00:26:53,300
That seems pretty much like the way I would want to do this because

456
00:26:53,300 --> 00:26:56,900
that way, I don't have to write code separately to push these every

457
00:26:56,900 --> 00:26:57,400
time.

458
00:26:57,900 --> 00:26:59,900
And similarly, the code for

459
00:27:00,100 --> 00:27:04,100
Or the bitmap pushing could do basically the same thing, right?

460
00:27:05,000 --> 00:27:06,700
There's no reason we can't just

461
00:27:09,500 --> 00:27:10,800
Use this in both cases.

462
00:27:11,300 --> 00:27:15,100
Now, in terms of the top color, but color thing, obviously at this

463
00:27:15,100 --> 00:27:17,300
point, we want to turn these hoops.

464
00:27:19,600 --> 00:27:22,600
We want to turn all these things into a 32-bit ones.

465
00:27:22,900 --> 00:27:26,600
We could because we could pack these ahead of time.

466
00:27:26,700 --> 00:27:28,700
I'm going to not do that at the moment.

467
00:27:29,800 --> 00:27:33,800
I'm going to let that happen in here, but let's because we'll just

468
00:27:34,000 --> 00:27:34,900
that's an optimization.

469
00:27:34,900 --> 00:27:37,300
We probably don't need to think about too much at this point.

470
00:27:37,800 --> 00:27:39,000
So here's push quad.

471
00:27:39,700 --> 00:27:41,300
Compiler might even just do it for us.

472
00:27:42,400 --> 00:27:45,800
So assuming we have a rendered render entry, textured quads

473
00:27:49,100 --> 00:27:52,300
We're just going to go ahead and increment that quad count here.

474
00:27:53,100 --> 00:27:56,000
And then I'm going to grab this stuff for.

475
00:27:56,000 --> 00:28:00,700
We've got the quad bitmaps, you know, we got the bitmap here and and

476
00:28:00,700 --> 00:28:02,300
all the output here we go.

477
00:28:06,100 --> 00:28:07,700
so, I'm just going to go ahead and make this

478
00:28:13,400 --> 00:28:14,600
Function, do the logical thing.

479
00:28:14,600 --> 00:28:15,800
So, we need a bitmap

480
00:28:19,200 --> 00:28:23,200
And we also need we're going to need to pass the game render commands

481
00:28:23,200 --> 00:28:23,500
here.

482
00:28:24,200 --> 00:28:25,700
I guess we'll pass the render group.

483
00:28:30,200 --> 00:28:32,700
And in fact we could if we want to just get this out of the group as

484
00:28:32,700 --> 00:28:33,000
well.

485
00:28:41,900 --> 00:28:42,500
All right.

486
00:28:45,200 --> 00:28:47,500
So when we pet, when we push the squad, we'd need the group.

487
00:28:47,500 --> 00:28:49,900
We need the bitmap that corresponds to the squad.

488
00:28:50,300 --> 00:28:51,800
We will push the quad on here.

489
00:28:52,200 --> 00:28:52,400
I guess.

490
00:28:52,400 --> 00:28:54,300
This is kind of a little more stain to do this way.

491
00:28:54,300 --> 00:28:54,800
Probably, huh?

492
00:28:56,500 --> 00:29:00,600
We'll push the the quad bitmaps will push that bitmap that we got

493
00:29:00,600 --> 00:29:01,300
specified.

494
00:29:01,600 --> 00:29:04,400
Will take a Vertex from the vertex array at the location.

495
00:29:04,400 --> 00:29:08,500
We expect will add 4 to it so that we know that we've recorded four of

496
00:29:08,500 --> 00:29:13,300
them and then in here, where we've got the vertex stuff, we just need

497
00:29:13,300 --> 00:29:16,300
to basically allow these to be passed directly.

498
00:29:16,500 --> 00:29:21,600
So we just have, you know, one for each of these like so,

499
00:29:24,600 --> 00:29:26,100
Let's go ahead and clear these out.

500
00:29:27,600 --> 00:29:30,300
And these are just numeric, right?

501
00:29:30,300 --> 00:29:37,400
We're going to push one piece of data for every vertex here and we're

502
00:29:37,400 --> 00:29:39,300
going to pass that data in.

503
00:29:39,600 --> 00:29:41,000
So here's the P0.

504
00:29:41,500 --> 00:29:42,800
Here's the UV 0.

505
00:29:43,300 --> 00:29:46,000
Here's the C 0 and we just want four of those.

506
00:29:51,000 --> 00:29:54,300
Right.

507
00:29:54,300 --> 00:29:56,900
So that's what we need to do to do the push quad.

508
00:29:56,900 --> 00:29:59,900
And so what we can do here is say oh, all right, if we're going to

509
00:30:00,000 --> 00:30:00,900
A push quad.

510
00:30:03,100 --> 00:30:06,400
We can just now wrap all this up as well.

511
00:30:06,900 --> 00:30:10,800
So we can say, okay, we need to pass the render group.

512
00:30:10,800 --> 00:30:14,000
We need to pass the bitmap, and then we need to pass each of these

513
00:30:14,000 --> 00:30:14,400
things.

514
00:30:14,400 --> 00:30:15,400
So there's the P.

515
00:30:17,000 --> 00:30:18,000
There's the UV.

516
00:30:19,400 --> 00:30:20,300
There's the color.

517
00:30:25,300 --> 00:30:25,700
Oops.

518
00:30:30,100 --> 00:30:32,900
And again this is just making it a little easier to push these on.

519
00:30:33,600 --> 00:30:36,900
So the codes a little more concise and we're not repeating ourselves

520
00:30:36,900 --> 00:30:37,700
over and over again.

521
00:30:37,700 --> 00:30:38,200
Oops.

522
00:30:40,400 --> 00:30:42,200
Clipped off a, why there accidentally?

523
00:30:54,100 --> 00:30:54,700
There we go.

524
00:30:55,800 --> 00:30:59,200
And so we've got our push Squad working in both places now and so this

525
00:30:59,200 --> 00:31:01,000
these should basically both be the same.

526
00:31:01,800 --> 00:31:07,100
Now, the only difference is we have one that is if you have pre-packed

527
00:31:07,100 --> 00:31:08,000
colors, which is this one.

528
00:31:08,300 --> 00:31:11,200
And so, all I want to do is is also have one if you don't have

529
00:31:11,200 --> 00:31:13,300
pre-packed colors just to make it a little easier.

530
00:31:14,100 --> 00:31:17,900
And so, all I'm going to do here is say, well, if you want one, that

531
00:31:17,900 --> 00:31:20,100
doesn't that will pack the colors for you.

532
00:31:20,500 --> 00:31:21,800
We can do that as well.

533
00:31:22,200 --> 00:31:29,100
And all that's going to be is if we just do our GBA Pac 4 by 8, we're

534
00:31:29,100 --> 00:31:33,800
just going to do that pack this call right here, basically the 255

535
00:31:33,800 --> 00:31:37,300
times, the color value, right?

536
00:31:39,700 --> 00:31:41,900
And again, that's just to make it a little easier for anyone.

537
00:31:41,900 --> 00:31:45,000
Who wants to call it, who doesn't already have them that way?

538
00:31:45,900 --> 00:31:48,500
Was, there's no sense in not just having utility for it.

539
00:31:48,500 --> 00:31:50,500
So there's just another push quad, that will happen.

540
00:31:51,600 --> 00:31:52,700
That will automatically do that.

541
00:31:52,700 --> 00:31:54,500
Push that will do that conversion.

542
00:31:55,800 --> 00:31:58,400
So, now, this code should be relatively correct.

543
00:31:58,400 --> 00:32:02,000
The only thing we have to do is actually push the bitmap in here

544
00:32:02,300 --> 00:32:06,000
because this code wasn't set up for that kind of work.

545
00:32:10,200 --> 00:32:11,600
and instead of the entry,

546
00:32:12,800 --> 00:32:14,200
this is a group.

547
00:32:15,800 --> 00:32:16,200
Right.

548
00:32:17,100 --> 00:32:20,000
So inserting that in here, we end up with that.

549
00:32:22,500 --> 00:32:26,600
And I think that's basically it, right?

550
00:32:26,900 --> 00:32:29,300
That we also have to come back up in here and say, well, we don't need

551
00:32:29,300 --> 00:32:35,100
to me, we don't need to do this anymore.

552
00:32:37,600 --> 00:32:39,900
Because that's already taken care of inside, the push quad call.

553
00:32:40,800 --> 00:32:44,500
And now in theory, both of these are correct.

554
00:32:46,500 --> 00:32:51,500
All right, so the we got to grab that commands array out here.

555
00:32:53,300 --> 00:32:53,900
I also don't know.

556
00:32:53,900 --> 00:32:55,400
Does this do that anymore?

557
00:32:55,400 --> 00:32:56,400
No, it doesn't.

558
00:32:57,000 --> 00:32:59,500
So this actually doesn't need the commands or anymore.

559
00:33:00,400 --> 00:33:02,800
So that's strictly happening inside here.

560
00:33:03,300 --> 00:33:03,900
And here?

561
00:33:08,300 --> 00:33:13,500
All right, so the Primo color for the top tube is the top layer is

562
00:33:13,500 --> 00:33:14,700
just this.

563
00:33:17,200 --> 00:33:21,200
And so we've got that down and then push bottom of the okay, can't

564
00:33:21,200 --> 00:33:21,500
cover it.

565
00:33:21,500 --> 00:33:22,700
All the argument types.

566
00:33:23,100 --> 00:33:23,800
What have we got?

567
00:33:23,800 --> 00:33:26,100
V 4 V to V for?

568
00:33:26,400 --> 00:33:27,800
I thought we had that one.

569
00:33:29,000 --> 00:33:29,700
Do we not?

570
00:33:35,400 --> 00:33:41,800
Render group little bit map, before V2, before before.

571
00:33:41,800 --> 00:33:42,100
V2.

572
00:33:42,100 --> 00:33:43,200
Before before V2.

573
00:33:43,200 --> 00:33:44,600
Before before V2.

574
00:33:44,600 --> 00:33:45,500
V4,

575
00:33:47,500 --> 00:33:48,400
That's this one.

576
00:33:48,900 --> 00:33:50,500
These are v3's.

577
00:33:54,300 --> 00:33:54,900
Well.

578
00:33:58,300 --> 00:34:00,400
That certainly easier to rectify.

579
00:34:02,400 --> 00:34:04,400
So, none of these need, is he bias on them?

580
00:34:06,300 --> 00:34:09,800
So these can all be set to a z bias of zero.

581
00:34:12,400 --> 00:34:13,900
And then I think that's all we need.

582
00:34:14,800 --> 00:34:19,699
Yeah, so in theory are cubes, should now be going down and they almost

583
00:34:19,699 --> 00:34:26,500
are, it's just I forgot we had the bitmap set, so they're still

584
00:34:26,500 --> 00:34:29,100
getting a bitmap on them for now.

585
00:34:41,600 --> 00:34:42,900
We want to set that off.

586
00:34:44,300 --> 00:34:46,000
That should be.

587
00:34:47,199 --> 00:34:49,000
Turning off the texturing.

588
00:34:49,699 --> 00:34:52,400
Oh hmm.

589
00:34:53,199 --> 00:34:55,199
All right, so that's actually not true.

590
00:34:55,500 --> 00:34:58,900
Now that I think about it, this is one place where we can't lean on

591
00:34:58,900 --> 00:35:00,200
the fixed function pipeline anymore.

592
00:35:00,200 --> 00:35:03,900
It's going to force us to actually not do anymore.

593
00:35:03,900 --> 00:35:09,500
So once we do use program, we're not going to be able to turn off

594
00:35:09,500 --> 00:35:10,200
texturing.

595
00:35:11,600 --> 00:35:15,600
I totally forgot about that as one of the things that's definitely

596
00:35:15,600 --> 00:35:16,400
going to be the case.

597
00:35:16,900 --> 00:35:19,200
so, once we do a used program here,

598
00:35:24,700 --> 00:35:27,400
We won't be able to disable GL texture.

599
00:35:27,400 --> 00:35:30,700
2D so pretty much

600
00:35:35,300 --> 00:35:38,200
This, this to do is going to have to get handled immediately.

601
00:35:41,200 --> 00:35:42,700
Because we always have to bind.

602
00:35:44,400 --> 00:35:49,400
Something, the reason for that is once you switch to use program, the

603
00:35:49,400 --> 00:35:53,800
parts of the fixed function pipeline, that would have affected, that

604
00:35:53,800 --> 00:35:56,000
would have been about compiling the program.

605
00:35:56,300 --> 00:35:58,400
No longer have effect.

606
00:35:58,500 --> 00:35:59,800
So if you take a look down here,

607
00:36:00,400 --> 00:36:03,700
What you can see is, we do this text sample equals texture texture,

608
00:36:03,700 --> 00:36:07,500
sampler, fragmovie, call, I believe that we'll just always fetch from

609
00:36:07,500 --> 00:36:08,200
the texture.

610
00:36:08,200 --> 00:36:12,600
So we have to have some kind of texture bound to it the sampler

611
00:36:12,600 --> 00:36:14,500
because the sampler will sample something.

612
00:36:14,700 --> 00:36:18,600
Now we can bind just a straight white texture to it if we want to but

613
00:36:18,600 --> 00:36:20,100
we have to find something.

614
00:36:22,600 --> 00:36:25,200
And that's just going to be the way it is.

615
00:36:25,700 --> 00:36:27,100
So yeah.

616
00:36:30,800 --> 00:36:34,700
We will have to make a pure white texture or something like this for

617
00:36:34,700 --> 00:36:35,300
now, it's okay.

618
00:36:35,300 --> 00:36:36,500
We can just leave it like this.

619
00:36:36,500 --> 00:36:41,300
I don't mind because we got to switch to having some something else in

620
00:36:41,300 --> 00:36:41,900
there, anyway.

621
00:36:43,000 --> 00:36:47,500
But as you can see, now all of our stuff is going through that

622
00:36:47,500 --> 00:36:51,700
pipeline as as evidenced by the bug, we just had which is great,

623
00:36:51,900 --> 00:36:52,300
right?

624
00:36:52,600 --> 00:36:53,900
That's what we wanted it.

625
00:36:53,900 --> 00:36:56,000
So now that more stuff is going through there.

626
00:36:56,100 --> 00:37:00,400
Let's just, let's just get rid of the vestigial remains here.

627
00:37:00,500 --> 00:37:02,400
Actually, you know what, let's do one more first.

628
00:37:02,400 --> 00:37:07,600
Let's go ahead and put push wrecked in there and I guess that'll Force

629
00:37:07,600 --> 00:37:10,700
us to do sort of the white texture thing that we were just talking

630
00:37:10,700 --> 00:37:11,300
about.

631
00:37:11,700 --> 00:37:12,500
So,

632
00:37:18,200 --> 00:37:22,800
Trying to think about what the most efficient way is for us to to do

633
00:37:22,800 --> 00:37:23,000
this.

634
00:37:23,000 --> 00:37:28,400
What we'd really like to do is have had a sort of a pure white bitmap

635
00:37:28,400 --> 00:37:32,300
that gets created as a texture that's sort of just sits around and

636
00:37:32,300 --> 00:37:34,400
then still have a bitmap handle.

637
00:37:34,400 --> 00:37:37,400
We can use to talk about that, right?

638
00:37:38,500 --> 00:37:43,200
And so I'm not sure what the best way to do that would be, but it

639
00:37:43,200 --> 00:37:46,100
probably looks a little bit like

640
00:37:54,800 --> 00:37:57,700
Probably looks a little bit like okay.

641
00:38:06,500 --> 00:38:07,400
Like that.

642
00:38:07,600 --> 00:38:12,300
So if we just have a loaded bitmap pointer that's basically just like

643
00:38:12,300 --> 00:38:16,400
the Pure White texture, we could do it like that, it might be better

644
00:38:16,400 --> 00:38:20,300
to have the asset system do it.

645
00:38:20,500 --> 00:38:21,700
I'm just not sure.

646
00:38:21,700 --> 00:38:25,600
I have to go back and see exactly how we would do that because the

647
00:38:25,600 --> 00:38:26,600
asset system

648
00:38:30,400 --> 00:38:34,500
I don't know to what extent it really has support for doing something

649
00:38:34,600 --> 00:38:35,300
like that.

650
00:38:35,300 --> 00:38:37,600
Like, solid car bitmaps now we could add it.

651
00:38:37,700 --> 00:38:41,500
I just don't know if it's worth adding it because I'm not sure if that

652
00:38:42,100 --> 00:38:43,600
there's really much point to it.

653
00:38:45,500 --> 00:38:50,600
When we do the load asset work directly stuff here you can see we have

654
00:38:50,600 --> 00:38:52,200
a finalized bitmap call.

655
00:38:53,200 --> 00:38:56,900
I mean really what we want is just for our asset pack to have a one of

656
00:38:56,900 --> 00:38:59,000
these in there so you actually just ask for it.

657
00:39:12,800 --> 00:39:15,100
And the other thing is I feel like if we put it through the asset

658
00:39:15,100 --> 00:39:18,400
system it can get paged out, right?

659
00:39:18,400 --> 00:39:21,800
I mean like technically so it's not really that kind of asset.

660
00:39:21,800 --> 00:39:25,500
It's kind of something that just wants to be resident permanently and

661
00:39:25,500 --> 00:39:28,500
so I kind of feel like it's something that wants a special path.

662
00:39:29,000 --> 00:39:30,000
That's just how I feel.

663
00:39:30,300 --> 00:39:32,000
That's my gut feeling about it, you know.

664
00:39:35,700 --> 00:39:36,700
So, yeah, I don't know.

665
00:39:36,700 --> 00:39:38,600
I think that should probably look this way.

666
00:39:48,300 --> 00:39:49,300
Something like this.

667
00:39:53,000 --> 00:39:56,200
and So then whenever we're doing something like, for example, if we

668
00:39:56,200 --> 00:39:57,300
are doing the cubes

669
00:40:09,400 --> 00:40:09,900
There we go.

670
00:40:13,800 --> 00:40:16,500
So we have a thing here that's like get bitmap and we pass down the

671
00:40:16,500 --> 00:40:17,100
ID.

672
00:40:23,100 --> 00:40:26,500
I guess mostly what we want to do there is if that bitmap ID was like,

673
00:40:26,500 --> 00:40:29,500
the, you know, that bitmap idea, we want it to be able to return that

674
00:40:29,500 --> 00:40:30,400
white bitmap.

675
00:40:33,400 --> 00:40:34,200
You take a look?

676
00:40:56,300 --> 00:40:57,100
Yeah, I don't know.

677
00:40:57,100 --> 00:40:58,000
It's a tough call.

678
00:40:58,000 --> 00:41:00,500
I feel like it's that's the best way to do it.

679
00:41:01,000 --> 00:41:02,700
Let's just take a look at what that would look like.

680
00:41:02,700 --> 00:41:04,900
Inside the win32 side of things.

681
00:41:05,200 --> 00:41:10,300
So if I'm in here and I've got this initialization code going on, at

682
00:41:10,300 --> 00:41:13,700
this point, opengl has been initialized, right?

683
00:41:13,700 --> 00:41:17,800
It's going on right here and we've gotten back in opengl RC.

684
00:41:17,800 --> 00:41:22,900
So I think you know what I probably want here is just to say like okay

685
00:41:22,900 --> 00:41:26,000
we've also got a loaded bitmap that's like white bitmap.

686
00:41:26,400 --> 00:41:26,900
Right?

687
00:41:27,900 --> 00:41:32,500
And when we're setting up that white bitmap, we need to say like okay,

688
00:41:33,400 --> 00:41:37,000
that white bitmap is going to come from the opengl layer.

689
00:41:37,400 --> 00:41:38,900
So it would be like

690
00:41:41,900 --> 00:41:46,100
It has to come I guess from whichever layer.

691
00:41:49,800 --> 00:41:52,200
It has to come from whichever layer is, the current is doing the

692
00:41:52,200 --> 00:41:52,800
current rendering.

693
00:41:52,800 --> 00:41:55,700
Now I guess that's not technically true because it can be both

694
00:41:57,000 --> 00:41:59,600
It could actually just be a white bitmap that's actually in memory as

695
00:41:59,600 --> 00:41:59,800
well.

696
00:42:00,900 --> 00:42:03,300
but it just has to be one that corresponds to

697
00:42:04,500 --> 00:42:05,800
Yeah, so I guess it's fine.

698
00:42:06,000 --> 00:42:11,600
So what we would basically say is okay, you know, opengl

699
00:42:15,600 --> 00:42:19,500
White bitmap or something like this and I guess we don't even need to

700
00:42:19,500 --> 00:42:19,900
do that.

701
00:42:19,900 --> 00:42:21,900
We could just do it when we do the render commands.

702
00:42:24,800 --> 00:42:25,300
Like so.

703
00:42:28,400 --> 00:42:32,100
And so then what we'd say is okay, inside of the opengl layer when we

704
00:42:32,100 --> 00:42:35,600
initialize, we know that inside opengl.

705
00:42:35,600 --> 00:42:38,300
We're going to have a jie Lun.

706
00:42:38,300 --> 00:42:40,100
That's the white bit of a deep.

707
00:42:40,100 --> 00:42:42,500
Well actually guess we'll just have a loaded bitmap.

708
00:42:43,600 --> 00:42:45,600
It's the white bitmap like so.

709
00:42:49,400 --> 00:42:54,400
And an initialization in here, what we do is we make one of those

710
00:42:55,400 --> 00:42:58,100
textures for the white bitmap.

711
00:42:58,300 --> 00:43:04,200
So inside we've got where's that opengl allocate texture like so

712
00:43:06,200 --> 00:43:07,500
we would have that in here.

713
00:43:08,400 --> 00:43:14,400
Oops and are loaded bitmap in this case would need a place to store.

714
00:43:16,300 --> 00:43:17,900
It's pixel which can be right there.

715
00:43:18,800 --> 00:43:23,500
And I think this would actually technically need to be aligned though

716
00:43:23,500 --> 00:43:24,700
for the software.

717
00:43:24,700 --> 00:43:28,400
Renderer, I don't know if we actually know, it doesn't because their

718
00:43:28,400 --> 00:43:30,200
texture fetches, so that's not true.

719
00:43:31,400 --> 00:43:34,600
So when we do an opengl allocate texture, in this case, we're just

720
00:43:34,600 --> 00:43:37,900
going to do a one and a one.

721
00:43:38,600 --> 00:43:43,400
And the data is going to be that white value.

722
00:43:47,200 --> 00:43:50,600
The opengl white bitmap.

723
00:43:52,500 --> 00:43:53,700
We now need in our

724
00:44:06,700 --> 00:44:08,200
We now need to fill these out.

725
00:44:10,600 --> 00:44:13,200
so, the white bitmap memory equals,

726
00:44:14,600 --> 00:44:15,200
This.

727
00:44:23,200 --> 00:44:24,600
The aligned percentage.

728
00:44:27,600 --> 00:44:29,100
Let's just say it's centered.

729
00:44:31,200 --> 00:44:33,800
Why not the with over height?

730
00:44:34,000 --> 00:44:36,400
Is one because it's the same as Square.

731
00:44:38,100 --> 00:44:38,800
The width.

732
00:44:40,300 --> 00:44:42,900
Is one height is 1.

733
00:44:44,500 --> 00:44:46,300
The pitch is 4.

734
00:44:47,700 --> 00:44:48,900
And the texture handle.

735
00:44:50,400 --> 00:44:53,600
I assume up Angelica texture will return this to us by, don't

736
00:44:53,600 --> 00:44:54,100
remember?

737
00:44:59,300 --> 00:44:59,800
That is true.

738
00:45:06,400 --> 00:45:14,600
It looks like loaded bitmap isn't defined yet when we are here which

739
00:45:14,800 --> 00:45:19,000
should not really be the case.

740
00:45:19,000 --> 00:45:21,200
Where was that defined?

741
00:45:22,000 --> 00:45:23,400
It's in a render group.

742
00:45:24,700 --> 00:45:29,200
So I'm going to go ahead and move that to render.

743
00:45:34,300 --> 00:45:37,000
Because it needs it should have those, right?

744
00:45:37,800 --> 00:45:39,200
Why does it not have?

745
00:45:40,200 --> 00:45:43,000
When is this actually included?

746
00:45:43,000 --> 00:45:46,900
Because open, gel .h should have a bunch of that stuff.

747
00:45:47,000 --> 00:45:48,000
Let me take a look here.

748
00:45:48,200 --> 00:45:49,700
So we went through to your handmade

749
00:45:55,100 --> 00:45:56,400
Surrendered on, aah.

750
00:45:58,200 --> 00:45:58,900
Is.

751
00:46:00,100 --> 00:46:01,300
Included.

752
00:46:03,000 --> 00:46:04,600
It's not included before this I guess.

753
00:46:04,600 --> 00:46:06,100
So it needs to be up here.

754
00:46:07,500 --> 00:46:08,000
There we go.

755
00:46:12,200 --> 00:46:14,100
I can't see but I'm sure I know what to do.

756
00:46:14,100 --> 00:46:14,600
There we go.

757
00:46:16,700 --> 00:46:19,400
So I think that's mostly it now.

758
00:46:19,400 --> 00:46:21,600
All we need to do is inside the platform layer.

759
00:46:21,600 --> 00:46:24,400
We need to make sure that we're actually going to have a way to push

760
00:46:24,400 --> 00:46:25,000
that on there.

761
00:46:25,000 --> 00:46:29,500
So this is the white bitmap like so.

762
00:46:30,800 --> 00:46:36,000
And now what we do is inside handmade render group it what we need to

763
00:46:36,000 --> 00:46:40,800
do is make a version of push Cube that takes the the pointer directly.

764
00:46:41,100 --> 00:46:44,000
So this is just a case of having a double call.

765
00:46:44,000 --> 00:46:45,700
Like we have in the other case, where if your

766
00:46:46,000 --> 00:46:49,300
The bitmap ID, it'll do the get bitmap for you.

767
00:46:51,000 --> 00:46:55,500
And Paul called push Cube redundantly like so.

768
00:46:56,900 --> 00:46:58,100
Or rather as a thunk.

769
00:47:05,800 --> 00:47:06,700
With the actual bitmap.

770
00:47:09,300 --> 00:47:13,000
So that way you can call either one and it allows you to pass the

771
00:47:13,000 --> 00:47:16,100
white bitmap directly if that's what you're trying to so.

772
00:47:16,100 --> 00:47:22,700
Similarly push bitmap in either case here again, we'll do the exact

773
00:47:22,700 --> 00:47:25,900
same thing and I think that's all good.

774
00:47:41,100 --> 00:47:41,600
There we are.

775
00:47:43,900 --> 00:47:44,500
and,

776
00:48:06,200 --> 00:48:07,000
Head is in the way.

777
00:48:07,000 --> 00:48:07,500
There we go.

778
00:48:12,100 --> 00:48:14,100
So, this should just work.

779
00:48:16,300 --> 00:48:19,800
Now, if we want to start using that, I really have to update my

780
00:48:19,800 --> 00:48:22,400
keyboard bindings to the same ones I was at work.

781
00:48:22,600 --> 00:48:24,600
So don't keep trying to hit 62 indent.

782
00:48:25,900 --> 00:48:28,700
So now all we have to do, if we want to change something to a white

783
00:48:28,700 --> 00:48:31,900
bitmap is when we actually call, whatever that something is

784
00:48:36,400 --> 00:48:40,900
for example, in this case, what we can do in this in now is if we want

785
00:48:40,900 --> 00:48:46,300
to get the white bitmap, we can just say, you know what, use the white

786
00:48:46,300 --> 00:48:46,900
bitmap

787
00:48:48,700 --> 00:48:54,300
from the render group, and that should be a solid color and at least

788
00:48:54,300 --> 00:48:54,800
in theory.

789
00:48:55,900 --> 00:48:56,400
So,

790
00:48:58,100 --> 00:49:00,800
Guess the only thing left, the reason that we don't see anything at

791
00:49:00,800 --> 00:49:04,100
this point is we haven't actually initialize that to anything.

792
00:49:04,900 --> 00:49:09,500
So the opengl white color, just needs to be basically all ones.

793
00:49:09,500 --> 00:49:14,700
So it's just 225, 225 225 225 and then it should be a texture.

794
00:49:14,700 --> 00:49:16,400
We can bind, that's just solid.

795
00:49:16,800 --> 00:49:20,500
Whoo, my goodness, that's not what I expected at all.

796
00:49:26,100 --> 00:49:28,000
I'm not sure how we manage that one does.

797
00:49:28,000 --> 00:49:31,100
It think this texture is bigger than it actually is?

798
00:49:31,100 --> 00:49:35,200
Or did we set the Border type to not be clamp or something?

799
00:49:41,500 --> 00:49:43,000
That's fascinating.

800
00:49:46,200 --> 00:49:47,700
You have to admit, that was pretty cool.

801
00:49:56,700 --> 00:49:59,400
Now, one thing we probably will have to do is that white texture if

802
00:49:59,400 --> 00:50:02,100
it's ever used is going to have to have some padding because our

803
00:50:02,100 --> 00:50:06,600
software renderer, I think had some padding requirements as well, but

804
00:50:06,600 --> 00:50:07,300
that sort of here.

805
00:50:07,300 --> 00:50:10,000
So we've got clamp on the S&T,

806
00:50:22,100 --> 00:50:23,600
I am really not sure.

807
00:50:25,800 --> 00:50:28,900
What the deal is with that and there's no srgb involved here because

808
00:50:28,900 --> 00:50:31,200
everything is 255.

809
00:50:31,900 --> 00:50:33,500
So it's you know,

810
00:50:42,500 --> 00:50:44,500
That is pretty fancy.

811
00:50:46,900 --> 00:50:48,400
I don't know what to make of that.

812
00:51:00,500 --> 00:51:02,100
so, it looks like

813
00:51:08,400 --> 00:51:10,600
it looks like for whatever reason.

814
00:51:20,900 --> 00:51:24,500
We're getting a lot of alpha in there, but I don't know why.

815
00:51:39,600 --> 00:51:40,700
That's a Puzzler.

816
00:51:43,800 --> 00:51:47,100
We have a white bitmap with a texture handle, be allocated from

817
00:51:47,100 --> 00:51:48,000
opengl.

818
00:51:49,900 --> 00:51:54,500
We're sending it down, just a basic White.

819
00:51:55,500 --> 00:51:57,400
Pixel a single white pixel.

820
00:51:59,400 --> 00:52:03,300
I'm pretty sure the submission format is just RGB, right?

821
00:52:03,300 --> 00:52:03,900
Like

822
00:52:05,700 --> 00:52:06,800
Here's like a texture.

823
00:52:06,800 --> 00:52:08,000
We're going to get a texture.

824
00:52:08,600 --> 00:52:09,900
We're going to buy in the texture.

825
00:52:13,300 --> 00:52:14,300
We're going to send it down.

826
00:52:14,300 --> 00:52:17,300
Its be gra, it's a width and height of one.

827
00:52:21,900 --> 00:52:25,500
It's got a linear minification in magnification filter, but no mitt

828
00:52:25,500 --> 00:52:29,100
maps have been specified so it wouldn't matter.

829
00:52:29,100 --> 00:52:29,500
Anyway.

830
00:52:29,500 --> 00:52:30,300
Presumably

831
00:52:36,200 --> 00:52:38,000
And it's supposed to clamp at the border.

832
00:52:39,000 --> 00:52:41,900
Let's see what happens when we step in there, I guess.

833
00:52:43,000 --> 00:52:44,900
Maybe there's something weird going on.

834
00:52:44,900 --> 00:52:47,100
That's not what I would assume.

835
00:53:00,700 --> 00:53:02,900
That's definitely the value.

836
00:53:02,900 --> 00:53:08,800
We would expect we generate a handle this handle to we're going to

837
00:53:08,800 --> 00:53:10,700
send down the texture here.

838
00:53:10,900 --> 00:53:14,100
Unsigned, B, with the one height of one.

839
00:53:15,800 --> 00:53:17,000
Photo texture parameters.

840
00:53:18,800 --> 00:53:19,600
Stop binding.

841
00:53:19,600 --> 00:53:24,900
It put the handle back in and that's all there is.

842
00:53:30,400 --> 00:53:31,000
ah,

843
00:53:38,800 --> 00:53:45,300
Well well I can't say why that would be a problem in this case, that's

844
00:53:45,300 --> 00:53:46,800
definitely a bug that I'll fix.

845
00:53:47,800 --> 00:53:51,500
So since we're using this as something that sticks around now opengl

846
00:53:51,500 --> 00:53:58,100
in it would have to basically be a destination based thing like so

847
00:54:00,100 --> 00:54:03,300
Um wait no, it doesn't what am I talking about?

848
00:54:05,000 --> 00:54:05,900
Open jail isn't?

849
00:54:05,900 --> 00:54:07,600
That's the just the info structure.

850
00:54:08,300 --> 00:54:08,800
Don't know why?

851
00:54:08,800 --> 00:54:10,400
We're returning the info structure either?

852
00:54:10,400 --> 00:54:11,800
When it's getting passed in here.

853
00:54:12,700 --> 00:54:14,000
In fact, why are we doing that?

854
00:54:14,900 --> 00:54:15,700
Let's get rid of that.

855
00:54:18,400 --> 00:54:18,900
There we go.

856
00:54:21,000 --> 00:54:21,900
That's a global.

857
00:54:22,900 --> 00:54:25,800
So since that's a since open, jails are Global, that's that what I was

858
00:54:25,800 --> 00:54:27,600
thinking would be a problem with definitely not a problem.

859
00:54:27,600 --> 00:54:31,100
So that was just, that was just a I saw that return thing there and

860
00:54:31,100 --> 00:54:33,600
it's like, oh, we're turning by value, but we're not actually doing

861
00:54:33,600 --> 00:54:33,800
that.

862
00:54:33,800 --> 00:54:35,100
So, this is should be fine.

863
00:54:36,300 --> 00:54:38,000
So, I don't know what's going on there.

864
00:54:38,000 --> 00:54:39,100
I'm curious.

865
00:54:39,300 --> 00:54:47,100
Now, I wonder what happens if we just make this be something else,

866
00:54:47,600 --> 00:54:50,300
just so I can see what's going on.

867
00:55:08,400 --> 00:55:09,800
Do you have a set call?

868
00:55:26,400 --> 00:55:29,300
So I just want to see what happens if I actually give this bitmap some

869
00:55:29,300 --> 00:55:30,000
size.

870
00:55:31,800 --> 00:55:34,800
I thought it might help me understand what open gels drawing.

871
00:55:46,600 --> 00:55:47,600
Let's take a look here.

872
00:56:05,200 --> 00:56:08,300
so, it looks like maybe

873
00:56:10,500 --> 00:56:14,400
Let's, let's be a little bit more aggressive here with our test art.

874
00:56:19,700 --> 00:56:28,400
So it looks like it is definitely using the color value, but it looks

875
00:56:28,400 --> 00:56:32,000
like maybe it's the vertices of the cube that are broken.

876
00:56:34,800 --> 00:56:36,400
And a not our texture.

877
00:56:43,200 --> 00:56:44,800
Is I guess what I would say there?

878
00:56:46,100 --> 00:56:47,700
So, let's see if that's true.

879
00:56:49,700 --> 00:56:56,600
Let's go ahead over to render group and see what the problem is there.

880
00:56:59,400 --> 00:56:59,800
so,

881
00:57:04,000 --> 00:57:10,000
Is there some reason that the vertices of the cube would be broken

882
00:57:10,900 --> 00:57:13,500
compared to see our bitmaps?

883
00:57:28,800 --> 00:57:31,200
So we are using a different call.

884
00:57:31,500 --> 00:57:36,100
We're using the RGB aipac 4x8 call.

885
00:57:37,000 --> 00:57:37,600
Right.

886
00:57:49,300 --> 00:57:51,600
where is the other one is doing the pack and then calling

887
00:57:58,700 --> 00:58:02,400
Meaning, the push bitmap which is as far as we know, working properly

888
00:58:03,100 --> 00:58:04,600
isn't using that path.

889
00:58:06,000 --> 00:58:08,400
So but I don't think that should have much to do with it.

890
00:58:08,400 --> 00:58:11,300
I mean, in this case, let's let's step in and find out I guess.

891
00:58:29,800 --> 00:58:31,400
So here's our two colors.

892
00:58:32,200 --> 00:58:38,100
We've got one that's sort of a got the green in it, and one that's got

893
00:58:38,200 --> 00:58:40,500
nothing, right?

894
00:58:43,400 --> 00:58:45,500
But they both have an alpha value of one.

895
00:58:46,100 --> 00:58:49,800
So, you know, we would expect no Alpha here.

896
00:58:51,200 --> 00:58:55,600
So, let's go ahead and step into push quad and see what we end up

897
00:58:55,600 --> 00:58:56,000
with.

898
00:59:13,200 --> 00:59:13,700
All right.

899
00:59:22,700 --> 00:59:27,700
So, all of the alpha values for these colors are all full Alpha,

900
00:59:28,400 --> 00:59:29,000
right?

901
00:59:29,400 --> 00:59:32,000
So I would expect to see.

902
00:59:33,800 --> 00:59:35,300
Let's see what the movies are, as well.

903
00:59:45,100 --> 00:59:47,400
so I would have expected to see

904
00:59:49,900 --> 00:59:50,800
No Alpha.

905
00:59:52,200 --> 00:59:52,400
Right?

906
00:59:52,400 --> 00:59:55,500
Because the alpha value is one, exactly?

907
00:59:55,500 --> 00:59:57,400
Like I would have expected it to be.

908
01:00:17,600 --> 01:00:21,200
So yeah, I'm still really not sure what I'm looking at there.

909
01:00:21,200 --> 01:00:25,700
It seems like a Vertex problem, but at the same time, I'm not sure how

910
01:00:25,700 --> 01:00:29,400
it could be a Vertex problem, if it doesn't look like that.

911
01:00:29,400 --> 01:00:30,200
When we

912
01:00:31,700 --> 01:00:35,800
Switch to a different texture, right?

913
01:00:36,000 --> 01:00:41,000
So for example, if I go back to entity and switch it

914
01:00:47,200 --> 01:00:47,900
Like so.

915
01:00:53,800 --> 01:00:55,500
This doesn't look that way.

916
01:00:57,200 --> 01:00:57,500
Right.

917
01:00:57,500 --> 01:00:59,600
This texture looks correct.

918
01:01:00,600 --> 01:01:04,300
So, it really does look like something texture related.

919
01:01:10,400 --> 01:01:13,900
because only when we set it to the other texture,

920
01:01:15,700 --> 01:01:17,000
are we having that problem?

921
01:01:41,200 --> 01:01:42,700
That's a real Puzzler.

922
01:01:43,300 --> 01:01:46,300
I don't think I have a good idea about what would be happening there.

923
01:01:46,300 --> 01:01:47,500
I really don't.

924
01:01:56,600 --> 01:01:59,300
We are using multi sample and we do have Alpha R.

925
01:01:59,300 --> 01:02:05,500
Alpha 2 coverage on so that explains the banding because obviously the

926
01:02:05,500 --> 01:02:09,200
coverage values make it so that because that cube is setting its Alpha

927
01:02:09,200 --> 01:02:09,800
value.

928
01:02:10,400 --> 01:02:12,700
The alpha is going into the coverage and the coverage.

929
01:02:12,700 --> 01:02:17,700
Therefore is saying hey, you know, you've only got eight steps of

930
01:02:17,700 --> 01:02:18,600
brightness here.

931
01:02:19,600 --> 01:02:20,200
Right.

932
01:02:21,200 --> 01:02:24,100
You can kind of see those 12345.

933
01:02:24,600 --> 01:02:27,500
Kind of gets a little hazy in their six seven eight.

934
01:02:31,400 --> 01:02:35,200
So you can kind of see that the alpha to coverage is doing that, but I

935
01:02:35,200 --> 01:02:38,500
just really don't have any idea why I would be getting that pattern

936
01:02:38,700 --> 01:02:42,600
when I should be sending down a full Alpha everywhere.

937
01:02:42,700 --> 01:02:47,800
I don't know where the alpha how the alpha is getting set to

938
01:02:47,800 --> 01:02:48,500
something.

939
01:02:55,100 --> 01:02:56,100
Yeah, to something else.

940
01:02:56,100 --> 01:02:59,200
So let's try a couple other things here just to provoke.

941
01:02:59,300 --> 01:02:59,800
Sometimes you

942
01:03:00,000 --> 01:03:05,700
To provoke when we allocate this texture, you know, normally when we

943
01:03:05,700 --> 01:03:11,500
do allocate texture, we get the linear filtering if we were to turn

944
01:03:11,500 --> 01:03:12,800
linear filtering off.

945
01:03:14,400 --> 01:03:17,100
So just temporarily, I'm going to add a thing here that just does

946
01:03:17,100 --> 01:03:17,800
nearest.

947
01:03:19,300 --> 01:03:23,800
So no filtering, you're just going to take whatever sample you think

948
01:03:23,800 --> 01:03:24,600
is closest.

949
01:03:25,700 --> 01:03:32,400
So it's only the filter that's grabbing black somehow or at least

950
01:03:32,400 --> 01:03:34,200
something with an alpha value of zero.

951
01:03:35,300 --> 01:03:38,400
It's almost like it's disobeying, rgl clamp.

952
01:03:40,600 --> 01:03:41,500
Call.

953
01:03:51,100 --> 01:03:54,400
You know, I'm saying it's almost like a thinks there's a texture

954
01:03:54,400 --> 01:03:55,000
border.

955
01:03:59,500 --> 01:04:01,600
And it's fetching into the texture border.

956
01:04:28,000 --> 01:04:28,800
I'm just curious.

957
01:04:28,800 --> 01:04:30,800
So if rap smt,

958
01:04:33,000 --> 01:04:35,100
Are set to GL clamp.

959
01:04:45,600 --> 01:04:47,500
Let's just take a look at what those are now.

960
01:04:47,500 --> 01:04:50,200
Maybe I need to set something slightly different joining us that clamp

961
01:04:50,200 --> 01:04:51,300
to Edge instead.

962
01:05:08,300 --> 01:05:10,400
Let's just try clamp to Edge.

963
01:05:12,200 --> 01:05:14,600
I didn't think there was a difference between those two things.

964
01:05:14,700 --> 01:05:17,300
I didn't even know there was such, as I thought clamp was clamped

965
01:05:17,300 --> 01:05:17,700
Edge.

966
01:05:18,200 --> 01:05:22,200
Maybe it's not as if I clamped Edge.

967
01:05:55,400 --> 01:05:55,900
Huh.

968
01:05:58,800 --> 01:05:59,300
so,

969
01:06:00,000 --> 01:06:03,700
Is the difference between clamp to Edge and clamp?

970
01:06:05,200 --> 01:06:06,400
Somebody tell me.

971
01:06:08,000 --> 01:06:11,000
Obviously, I don't know the difference between these two things.

972
01:06:11,300 --> 01:06:15,500
So for those of you who don't know, texture wrap is basically just the

973
01:06:15,500 --> 01:06:20,000
way in which texture coordinates are processed if they're outside the

974
01:06:20,000 --> 01:06:21,000
zero to one range.

975
01:06:21,000 --> 01:06:25,000
So obviously as you would expect if you have something like GL repeat

976
01:06:25,000 --> 01:06:27,000
on, you can go zero to one.

977
01:06:27,400 --> 01:06:30,600
Then when you go from 1 to 2, it will repeat the range of 0 to 1.

978
01:06:30,600 --> 01:06:33,300
So just like, repeat, it'll tie all the texture, right?

979
01:06:33,700 --> 01:06:36,800
Clamp is supposed to just clamp it to the value that it gets to the

980
01:06:36,800 --> 01:06:37,100
edge, but

981
01:06:37,200 --> 01:06:39,100
Guess that's not exactly what it does.

982
01:06:39,900 --> 01:06:44,300
I would like a list of these somewhere.

983
01:06:44,600 --> 01:06:47,600
Let's take a look at the opengl.

984
01:06:49,600 --> 01:06:56,100
Latest spec, and just see what it says in terms of GL clamp, because I

985
01:06:56,100 --> 01:07:02,200
guess, obviously, I despite having used that for a long time, have

986
01:07:02,200 --> 01:07:03,900
never understood what it actually means.

987
01:07:05,400 --> 01:07:07,900
Can we search for geo clamp?

988
01:07:08,000 --> 01:07:10,100
Oops, it probably would just be called, clamp, wouldn't it?

989
01:07:11,600 --> 01:07:15,500
in the GL docks, they leave off the GL in the spec, they leave off the

990
01:07:18,300 --> 01:07:18,500
G.

991
01:07:18,500 --> 01:07:19,800
L prefixes.

992
01:07:27,700 --> 01:07:31,300
So they're starting to talk about it here.

993
01:07:33,600 --> 01:07:35,600
but I'm looking really more for a

994
01:07:45,400 --> 01:07:48,700
So looks like just regular clamp is actually gone now.

995
01:08:05,000 --> 01:08:10,400
So, I guess the answer is clamped has been removed, and maybe that's

996
01:08:10,400 --> 01:08:12,300
why I don't know this.

997
01:08:12,300 --> 01:08:15,800
So This document won't tell us what the original clamp was defined to

998
01:08:15,800 --> 01:08:19,600
do opengl 2.0 spec.

999
01:08:35,700 --> 01:08:36,700
All right.

1000
01:08:38,500 --> 01:08:39,399
Jill, normally clamps.

1001
01:08:39,399 --> 01:08:42,000
If the texture which are limited to exactly the range zero to one, one

1002
01:08:42,000 --> 01:08:43,399
touch recording is clamped his out of the texture.

1003
01:08:43,399 --> 01:08:45,899
Sampling filter straddles, the edge of texture image, taking half a

1004
01:08:45,899 --> 01:08:49,399
single values position and the other half from the texture border.

1005
01:08:49,899 --> 01:08:52,399
It is sometimes desirable to clamp a texture without requiring a

1006
01:08:52,399 --> 01:08:56,000
border and without using the constant border color, a new texture,

1007
01:08:56,000 --> 01:08:59,200
kind of ground, clamp to Edge, clamps texture coordinates at all meant

1008
01:08:59,200 --> 01:08:59,800
map levels, which is

1009
01:09:00,000 --> 01:09:03,000
Your filter never samples a border Texel, the color returned.

1010
01:09:03,000 --> 01:09:05,300
When clamping is derived only from deck to the edge of the cards.

1011
01:09:05,600 --> 01:09:08,399
So I guess clamp actually was sampling.

1012
01:09:08,399 --> 01:09:09,200
The texture border.

1013
01:09:09,200 --> 01:09:11,300
I didn't realize that at all.

1014
01:09:14,399 --> 01:09:15,200
All right.

1015
01:09:16,399 --> 01:09:17,700
You learn something new everyday.

1016
01:09:18,399 --> 01:09:20,600
Well, so that's fine.

1017
01:09:21,300 --> 01:09:23,800
That just means we were setting that value wrong for everything.

1018
01:09:23,800 --> 01:09:26,100
It just didn't matter because we always had an apron around the

1019
01:09:26,100 --> 01:09:26,500
textures.

1020
01:09:26,500 --> 01:09:27,100
Anyway,

1021
01:09:31,200 --> 01:09:33,000
So I guess that's all fine.

1022
01:09:35,100 --> 01:09:35,500
Yeah.

1023
01:09:35,600 --> 01:09:36,200
All right.

1024
01:09:36,500 --> 01:09:37,300
Well, there you go.

1025
01:09:38,100 --> 01:09:40,000
Okay, so let's see here.

1026
01:09:44,100 --> 01:09:45,399
I guess that's all.

1027
01:09:47,000 --> 01:09:51,500
We are now drawing what we expect to draw.

1028
01:09:51,500 --> 01:09:52,200
I think.

1029
01:10:03,800 --> 01:10:06,400
And so I think everything is going through there except for push wreck

1030
01:10:06,400 --> 01:10:06,800
now.

1031
01:10:07,100 --> 01:10:10,700
So let's go ahead and get pushed going through there so that we can

1032
01:10:10,700 --> 01:10:12,400
have everything going through that path.

1033
01:10:12,400 --> 01:10:14,900
And then we can talk about what the next steps are.

1034
01:10:15,300 --> 01:10:18,400
Now that we have that digression into learning the GL, clamp to Edge

1035
01:10:18,400 --> 01:10:19,900
is actually the proper thing to clamp.

1036
01:10:21,500 --> 01:10:28,300
Okay, we've also got so the store color there is now going through

1037
01:10:28,300 --> 01:10:33,400
srgb properly as well which means the entity for our push Cube.

1038
01:10:34,000 --> 01:10:34,500
Color.

1039
01:10:53,800 --> 01:10:59,300
when we call srgb linearize on this, that's turning one of our colors

1040
01:10:59,300 --> 01:11:00,700
into srgb,

1041
01:11:04,400 --> 01:11:06,300
And then we run srg being it.

1042
01:11:08,900 --> 01:11:11,300
so, the question there is

1043
01:11:22,400 --> 01:11:26,100
Are we properly preserving srgb through this path or not?

1044
01:11:26,900 --> 01:11:29,100
So when we do our push Cube here,

1045
01:11:31,400 --> 01:11:32,800
We do the store color.

1046
01:11:37,300 --> 01:11:39,600
This is this is not going to be nicer to be conversions.

1047
01:11:40,000 --> 01:11:46,300
So in the Shader in opengl, when we're working with these, and those

1048
01:11:46,300 --> 01:11:47,400
colors come in,

1049
01:11:49,800 --> 01:11:51,400
You can see in here, right?

1050
01:11:52,600 --> 01:11:56,900
If if the Shader, if srgb is not supported.

1051
01:12:11,000 --> 01:12:15,500
I guess it doesn't matter whether srgb is supported or not the colors

1052
01:12:15,500 --> 01:12:21,800
that we pass down, are no longer going to get srgb converted by opengl

1053
01:12:21,800 --> 01:12:25,300
anymore which is actually a good thing.

1054
01:12:26,300 --> 01:12:30,900
So what we want to do here is stop passing down srgb.

1055
01:12:33,600 --> 01:12:34,700
We don't want to pass anything down.

1056
01:12:34,700 --> 01:12:35,200
Srgb.

1057
01:12:35,200 --> 01:12:38,800
We want to pass everything down in light linear space, which I thought

1058
01:12:38,800 --> 01:12:40,600
we were actually doing, but let's verify that.

1059
01:12:41,700 --> 01:12:44,300
So when we pass down here, we pass down a color.

1060
01:12:45,800 --> 01:12:52,100
That color goes through unadulterated, right, not modified in any way

1061
01:12:52,600 --> 01:12:57,400
and so when we do the multiplication by it here again, none of that's

1062
01:12:57,400 --> 01:12:58,200
srgb.

1063
01:12:58,600 --> 01:13:04,500
If we have to when we actually go later to operate on that color, when

1064
01:13:04,500 --> 01:13:11,300
we write it out we have to simulate the srgb reverse conversion.

1065
01:13:11,500 --> 01:13:13,400
So that's what the square root is doing there.

1066
01:13:14,700 --> 01:13:16,500
But I think everything else should be fine.

1067
01:13:19,900 --> 01:13:26,700
We don't have to srgb convert the incoming colors frag color.

1068
01:13:26,700 --> 01:13:30,600
Like we do the texture because we're submitting it in srgb ahead of

1069
01:13:30,600 --> 01:13:31,800
time, right?

1070
01:13:32,300 --> 01:13:35,000
So I want to look at what store color does though.

1071
01:13:36,300 --> 01:13:40,000
So store color just does the pre multiplication that's the only thing

1072
01:13:40,000 --> 01:13:42,700
it does so that should be fine.

1073
01:13:43,800 --> 01:13:44,400
and,

1074
01:13:47,200 --> 01:13:47,700
Yeah.

1075
01:13:47,900 --> 01:13:49,200
So inside World mode.

1076
01:13:49,400 --> 01:13:54,000
When we do srgb, linearize for the push queue for the push Cube.

1077
01:13:54,500 --> 01:13:57,200
I want to take a look at what happens or srgb linearize.

1078
01:13:58,800 --> 01:14:04,300
that just squares everything so that takes it from srgb and puts it

1079
01:14:04,300 --> 01:14:05,100
into

1080
01:14:08,200 --> 01:14:12,700
That that takes srgb and puts it into linear space, which is what we

1081
01:14:12,700 --> 01:14:13,400
want to do.

1082
01:14:14,900 --> 01:14:16,500
However, I'm just

1083
01:14:18,000 --> 01:14:18,900
Thinking about that.

1084
01:14:19,000 --> 01:14:23,800
I feel like we're getting colors that are too bright, right?

1085
01:14:23,900 --> 01:14:28,500
This is what we're passing down for srgb, linearize, and if you look

1086
01:14:28,500 --> 01:14:32,200
at what we're getting here, that's just that's very bright by

1087
01:14:32,200 --> 01:14:34,000
comparison to what I would expect.

1088
01:14:36,200 --> 01:14:39,300
And if I, if I take a look at the values that are actually being

1089
01:14:39,300 --> 01:14:43,800
passed down, let me look at them in color, cop just to make sure

1090
01:14:46,700 --> 01:14:49,300
31 4932, right?

1091
01:14:50,000 --> 01:14:51,800
Let me see if that's the right color.

1092
01:14:52,600 --> 01:14:54,800
Well, now that does look like the right color, doesn't it?

1093
01:14:55,500 --> 01:14:55,700
I guess.

1094
01:14:55,700 --> 01:14:57,400
It just happens to be very bright.

1095
01:15:01,800 --> 01:15:02,100
Yeah.

1096
01:15:02,400 --> 01:15:03,000
All right.

1097
01:15:03,700 --> 01:15:04,400
I take it back.

1098
01:15:05,300 --> 01:15:07,500
So I guess we don't have any issues there, at least not that I can

1099
01:15:07,500 --> 01:15:08,700
perceive at the moment.

1100
01:15:08,700 --> 01:15:11,000
So, our srgb appears to be working roughly properly.

1101
01:15:11,000 --> 01:15:13,700
Again, srgb is in quotes because we're using squaring at this point

1102
01:15:13,700 --> 01:15:17,700
because we don't have real srgb conversion in on this card because it

1103
01:15:17,700 --> 01:15:18,300
can't do it.

1104
01:15:21,100 --> 01:15:22,300
At least during the right phase.

1105
01:15:23,700 --> 01:15:26,400
But we still got one more thing to do here.

1106
01:15:26,400 --> 01:15:28,100
So let's go ahead and do that thing.

1107
01:15:28,100 --> 01:15:30,200
Now that I've confirmed there wasn't a funny business going on there.

1108
01:15:30,900 --> 01:15:34,900
Let's remove bitmap and let's remove rectangle and so now we're just

1109
01:15:34,900 --> 01:15:38,200
down to texture quads and cliprect that means we're going to have to

1110
01:15:38,200 --> 01:15:41,100
get rid of push wrecked as well.

1111
01:15:41,600 --> 01:15:45,900
So push wrecked is going to have to conform to the same procedure that

1112
01:15:45,900 --> 01:15:47,100
everyone else is doing now.

1113
01:15:47,700 --> 01:15:51,800
Which is to say it's going to have to get the current quads render

1114
01:15:51,800 --> 01:15:53,300
entry stuff and

1115
01:15:53,500 --> 01:15:54,000
Who's that?

1116
01:15:55,400 --> 01:15:58,700
So in here, when we do this push render element, actually we're going

1117
01:15:58,700 --> 01:16:01,300
to do is get current quads, right?

1118
01:16:02,000 --> 01:16:04,900
And then when we do the get current quads, we're going to have to

1119
01:16:04,900 --> 01:16:10,800
adhere to do something that pushes on a rectangle, that conforms to

1120
01:16:10,800 --> 01:16:12,800
the specification that we were talking about before now.

1121
01:16:14,800 --> 01:16:19,200
In order to do that, I'm just going to jump over to opengl.

1122
01:16:19,400 --> 01:16:24,600
And when you use again, exactly the same process as before we knew we

1123
01:16:24,600 --> 01:16:26,000
were drawing a rectangle, right?

1124
01:16:26,000 --> 01:16:27,700
This was the code for drawing the rectangle.

1125
01:16:27,700 --> 01:16:28,800
It's going to come out.

1126
01:16:29,700 --> 01:16:30,300
Here it is.

1127
01:16:30,900 --> 01:16:35,400
So as you can see, all we were doing is just calling opengl rectangle

1128
01:16:35,400 --> 01:16:36,400
with those parameters.

1129
01:16:36,400 --> 01:16:39,800
So let's go ahead and go to opengl rectangle.

1130
01:16:41,400 --> 01:16:42,600
And grab that.

1131
01:16:46,700 --> 01:16:48,900
And that is what we are actually trying to do.

1132
01:16:52,100 --> 01:16:52,600
Right.

1133
01:16:53,800 --> 01:16:59,200
So we know we've got a couple different things here, we know we've got

1134
01:16:59,500 --> 01:17:02,300
the Min p and the max P.

1135
01:17:02,400 --> 01:17:07,000
So let's go ahead and make them in p and a Max p.

1136
01:17:07,600 --> 01:17:09,300
And those were first

1137
01:17:11,000 --> 01:17:12,500
What we call our entry p.

1138
01:17:12,700 --> 01:17:15,900
And then, our entry p+ are dim, right?

1139
01:17:16,300 --> 01:17:18,000
And you can see what those ended up being a peer.

1140
01:17:18,000 --> 01:17:20,400
So, the entropy was just the basis p.

1141
01:17:20,900 --> 01:17:22,700
And the gym was just the scale dim.

1142
01:17:29,500 --> 01:17:33,200
So really, what we need to do here is just say, alright will state the

1143
01:17:33,200 --> 01:17:35,900
basis p and then we'll do the Min P.

1144
01:17:37,200 --> 01:17:39,000
Plus the V4 scaled in.

1145
01:17:40,400 --> 01:17:41,000
Like so.

1146
01:17:42,700 --> 01:17:46,600
And I think that creates exactly what we wanted to create.

1147
01:17:46,600 --> 01:17:50,300
We have our pre multiplied color here again like before.

1148
01:17:52,300 --> 01:17:57,500
But really, we can just go ahead and say you through to color equals

1149
01:17:58,000 --> 01:17:59,100
rgba pack.

1150
01:18:03,000 --> 01:18:06,500
And get rid of all these cuz that's really all we needed, right?

1151
01:18:08,100 --> 01:18:11,400
So now when we come through here and we want to start recording

1152
01:18:11,400 --> 01:18:12,300
vertices,

1153
01:18:21,100 --> 01:18:27,100
we want to do these push quads again, and so we're going to pass the

1154
01:18:27,100 --> 01:18:29,700
group, The bitmap in this case,

1155
01:18:31,700 --> 01:18:34,500
It's just going to be since there's no textures on these rectangles,

1156
01:18:35,100 --> 01:18:38,100
it's just going to be that white bitmap.

1157
01:18:40,500 --> 01:18:43,900
And we've got the P0 u v 0, c 1 situation.

1158
01:18:44,500 --> 01:18:49,300
What we want to do here is just use exactly what we've got in this

1159
01:18:49,300 --> 01:18:49,800
case.

1160
01:18:50,000 --> 01:18:56,200
So this becomes V 2, I guess these didn't have to be v4s because I

1161
01:18:56,200 --> 01:18:57,700
guess we're not using them that way.

1162
01:18:58,900 --> 01:18:59,500
Right.

1163
01:19:04,500 --> 01:19:05,000
There we go.

1164
01:19:05,900 --> 01:19:08,900
So really we can just turn these into v4s again.

1165
01:19:08,900 --> 01:19:10,600
There's no Z bias in this case,

1166
01:19:18,400 --> 01:19:20,500
And again, we're just basically simulating.

1167
01:19:20,500 --> 01:19:23,900
We're basically doing exactly what the opengl pipeline was doing 4S

1168
01:19:23,900 --> 01:19:28,100
with a six function before, which is taking a series of calls and

1169
01:19:28,100 --> 01:19:32,300
turning them into just flat data that can be sent down to the card for

1170
01:19:32,300 --> 01:19:33,600
use, right?

1171
01:19:33,900 --> 01:19:38,000
So we're basically doing exactly that in preparation for doing exactly

1172
01:19:38,000 --> 01:19:38,400
that.

1173
01:19:39,700 --> 01:19:42,500
So then we just need to do this push quad which each of these.

1174
01:19:43,400 --> 01:19:44,900
And in this case we've since

1175
01:19:45,200 --> 01:19:46,500
Have a lower trying to Upper triangle.

1176
01:19:46,500 --> 01:19:47,900
That was getting used for the rectangles here.

1177
01:19:47,900 --> 01:19:52,200
We don't have to do that anymore so we can just go ahead and use our

1178
01:19:52,200 --> 01:19:57,600
final vertex as the final purchase the quad and just use for, right?

1179
01:19:58,700 --> 01:20:02,900
So okay, so off we go and now we just need to put the colors in there

1180
01:20:02,900 --> 01:20:03,400
as well.

1181
01:20:03,400 --> 01:20:07,600
So in addition to these at each step, we're going to have to send down

1182
01:20:07,600 --> 01:20:07,900
the color.

1183
01:20:07,900 --> 01:20:10,900
Now the color happens to be constant, so we're just passing the same

1184
01:20:10,900 --> 01:20:11,600
color each time.

1185
01:20:11,600 --> 01:20:13,700
So each of the vertices will have the same color

1186
01:20:30,600 --> 01:20:31,100
All right.

1187
01:20:40,600 --> 01:20:42,500
Oops, don't still want that in there.

1188
01:20:46,200 --> 01:20:53,000
So the menu, V-Max you V in this case, I guess also is kind of

1189
01:20:53,000 --> 01:20:55,300
irrelevant but we'll put one in there anyway.

1190
01:20:57,300 --> 01:20:59,800
Just in case, we someday want to have the

1191
01:21:00,000 --> 01:21:01,600
Have textures on it, I suppose.

1192
01:21:09,100 --> 01:21:12,400
Oh, and I got a reverse, the order of these, I was pushing them in the

1193
01:21:12,400 --> 01:21:14,800
opengl order, which is not what I wanted.

1194
01:21:15,400 --> 01:21:17,900
You need to be an hour order where position comes first.

1195
01:21:26,600 --> 01:21:27,000
Yeah.

1196
01:21:29,200 --> 01:21:29,800
All right.

1197
01:21:30,200 --> 01:21:34,300
And so now we still have the software renderer here which we are not

1198
01:21:34,300 --> 01:21:40,400
going to update right now, but we need to at least have it not cost us

1199
01:21:40,400 --> 01:21:41,100
compile errors.

1200
01:21:41,100 --> 01:21:42,500
So since we aren't,

1201
01:21:46,300 --> 01:21:47,800
Supporting this anymore.

1202
01:21:49,400 --> 01:21:49,900
Oh wait no.

1203
01:21:49,900 --> 01:21:50,100
Sorry.

1204
01:21:50,100 --> 01:21:51,200
This is the opengl render.

1205
01:21:52,500 --> 01:21:54,500
Yeah, we got to delete all this.

1206
01:22:12,800 --> 01:22:13,400
All right.

1207
01:22:16,600 --> 01:22:21,000
So now, everything is going through that path as you can hopefully

1208
01:22:21,000 --> 01:22:21,500
see.

1209
01:22:22,800 --> 01:22:24,800
And so that's all good, right?

1210
01:22:25,400 --> 01:22:29,000
And now, if I set a breakpoint in there, we should hopefully see more

1211
01:22:29,000 --> 01:22:30,800
aggregation than we were seeing before.

1212
01:22:31,000 --> 01:22:33,100
Because now most things are going to that path.

1213
01:22:33,100 --> 01:22:38,200
So hopefully most things should get be able to get pushed into like

1214
01:22:38,200 --> 01:22:40,900
they should be able to Clump together and so when we get one of these

1215
01:22:40,900 --> 01:22:44,100
entries we should see more quads in it then.

1216
01:22:44,300 --> 01:22:45,200
We're seeing before.

1217
01:22:45,800 --> 01:22:49,000
So let's take a look at the entry quad count each time through.

1218
01:22:49,900 --> 01:22:52,100
So here's a batch with 121 in it.

1219
01:22:53,200 --> 01:22:56,700
3,400, 181 3400.

1220
01:22:56,700 --> 01:22:58,600
So basically just drawing in two batches.

1221
01:22:58,600 --> 01:23:03,800
Now as you can see, and that's great right now.

1222
01:23:03,800 --> 01:23:06,500
Why is that great, like, why did I bother?

1223
01:23:06,500 --> 01:23:07,500
Why do I care about this?

1224
01:23:07,500 --> 01:23:10,600
Well, first of all, one thing that you'll notice there's a couple

1225
01:23:10,600 --> 01:23:14,000
reasons why this is an improvement and we'll go through them.

1226
01:23:14,900 --> 01:23:15,600
In order here.

1227
01:23:16,300 --> 01:23:20,900
So the first reason is we're sort of getting closer to a simpler

1228
01:23:21,300 --> 01:23:23,300
format for the render layer, right?

1229
01:23:23,300 --> 01:23:27,600
And that's pretty great because if you can force everything through

1230
01:23:27,600 --> 01:23:31,800
the same set of Primitives and make those Primitives, very simple.

1231
01:23:32,500 --> 01:23:39,300
It makes it a lot easier to optimize and make portable that render

1232
01:23:39,300 --> 01:23:40,600
back and layer, right?

1233
01:23:40,600 --> 01:23:45,200
So now if, you know, even when we go back to do the software, renderer

1234
01:23:45,200 --> 01:23:48,100
things are get a lot easier because it's got less things to worry

1235
01:23:48,100 --> 01:23:48,500
about, right?

1236
01:23:48,500 --> 01:23:51,800
It only asked to draw one type of primitive and that's a textured

1237
01:23:51,800 --> 01:23:52,700
quad, right?

1238
01:23:52,700 --> 01:23:56,900
And it all comes through in one batch and says, hey, here's the whole

1239
01:23:56,900 --> 01:23:59,900
set of textured quads for you to do just do

1240
01:24:00,000 --> 01:24:01,100
In order, right?

1241
01:24:01,400 --> 01:24:04,700
So, we simplify that back end by removing cases, write the number of

1242
01:24:04,700 --> 01:24:08,500
cases, get smaller and smaller and that's just better and better for

1243
01:24:08,500 --> 01:24:09,700
us, right?

1244
01:24:10,500 --> 01:24:13,100
So, you know, that's all fantastic.

1245
01:24:13,600 --> 01:24:16,100
Now, the other thing, that's the important part about it and the

1246
01:24:16,100 --> 01:24:20,300
reason why I want to do it now is because as we move away, from the

1247
01:24:20,300 --> 01:24:22,600
fixed function pipeline, which is what I wanted to do, wanted to move

1248
01:24:22,600 --> 01:24:26,500
us into, just basically the core profile, which is the more modern way

1249
01:24:26,500 --> 01:24:27,800
of using opengl.

1250
01:24:30,000 --> 01:24:33,900
Is we want to start talking in terms of batches of stuff.

1251
01:24:33,900 --> 01:24:38,900
We can hand over to the GPU without very much hand holding from us.

1252
01:24:39,400 --> 01:24:42,600
And previously, what happened with those GL vertex calls, right?

1253
01:24:42,900 --> 01:24:46,500
If you look at what's happening here, where we've got these things

1254
01:24:46,700 --> 01:24:50,200
like the old school way like this where it's 2x squared vertex.

1255
01:24:50,200 --> 01:24:51,800
X cord vertex x squared vertex.

1256
01:24:52,400 --> 01:24:58,300
These are calls into the driver every time and you know, if I go ahead

1257
01:24:58,300 --> 01:24:59,800
and set a breakpoint open jar

1258
01:25:00,000 --> 01:25:00,500
Which I don't.

1259
01:25:00,500 --> 01:25:03,300
I don't know if it gets called anymore, so we'll probably have to

1260
01:25:03,300 --> 01:25:04,500
force a call to it.

1261
01:25:05,000 --> 01:25:06,500
Let me just go ahead and force the call there.

1262
01:25:13,100 --> 01:25:14,200
Dude.

1263
01:25:38,400 --> 01:25:43,300
So, if I call opengl rectangle here, as you can see, I'm just going to

1264
01:25:43,300 --> 01:25:44,400
force the call to it.

1265
01:25:44,400 --> 01:25:47,100
It's a completely meaningless call, but that's fine.

1266
01:25:47,700 --> 01:25:49,500
So, here we are an open jar rectangle.

1267
01:25:49,600 --> 01:25:52,700
Take a look at what happens if I go into the disassembly here, right?

1268
01:25:54,300 --> 01:26:00,500
So what you can see is that this all we're doing here is outputting a

1269
01:26:00,500 --> 01:26:01,900
few vertices, right?

1270
01:26:01,900 --> 01:26:04,100
All we're doing is outputting six vertices.

1271
01:26:05,000 --> 01:26:09,800
When I come through here, I'm doing all the work to copy the vertices.

1272
01:26:09,800 --> 01:26:13,500
You can see, you know, I'm setting up the vertices here.

1273
01:26:13,800 --> 01:26:16,700
That's what I would want to do, right?

1274
01:26:17,500 --> 01:26:22,100
What I would want to do is just move this into some place where it's

1275
01:26:22,100 --> 01:26:23,100
going to get used.

1276
01:26:23,100 --> 01:26:24,000
But then I have to

1277
01:26:24,100 --> 01:26:30,400
Take the other step of calling into some completely other function in

1278
01:26:30,400 --> 01:26:32,100
the driver, right.

1279
01:26:32,500 --> 01:26:34,800
And you can see it's a double jump so it has a jump through an

1280
01:26:34,800 --> 01:26:35,600
indirection.

1281
01:26:35,800 --> 01:26:36,800
Here is the code.

1282
01:26:36,800 --> 01:26:39,000
It has to go through to do that.

1283
01:26:39,000 --> 01:26:40,900
It's got another call, right?

1284
01:26:40,900 --> 01:26:43,700
Here's another caller inside, okay.

1285
01:26:45,500 --> 01:26:47,800
I mean, there's just a tremendous amount of work.

1286
01:26:47,800 --> 01:26:50,200
Look at all this work that's going on here, right?

1287
01:26:50,200 --> 01:26:52,600
That was just for the color call.

1288
01:26:53,400 --> 01:26:55,600
Just this one call, right?

1289
01:26:56,600 --> 01:26:59,800
And so as you can imagine, that's just lumping this huge amount.

1290
01:27:00,000 --> 01:27:04,700
Optimizer can't do anything with this because the call has to occur,

1291
01:27:05,000 --> 01:27:05,600
right?

1292
01:27:05,600 --> 01:27:08,100
It can't this is a driver specific call.

1293
01:27:08,100 --> 01:27:10,500
That's happening here potentially, right?

1294
01:27:11,800 --> 01:27:13,600
You know, who knows what has to happen.

1295
01:27:13,600 --> 01:27:16,700
AMD versus Nvidia versus whatever we have no idea.

1296
01:27:17,900 --> 01:27:20,200
So the optimizer can't even reach in there.

1297
01:27:20,200 --> 01:27:22,100
And look at what that is or inline.

1298
01:27:22,100 --> 01:27:26,200
It, it can't really be inlined in any way because it doesn't even know

1299
01:27:26,200 --> 01:27:27,400
what the code is doing.

1300
01:27:27,400 --> 01:27:29,800
It has its never seen it at compile time.

1301
01:27:30,300 --> 01:27:33,400
So you end up in a really bad situation where there's a tremendous

1302
01:27:33,400 --> 01:27:36,600
amount of work being done per vertex on the CPU side for no reason

1303
01:27:36,800 --> 01:27:40,400
because fundamentally all we want to do is just hand it over to the

1304
01:27:40,400 --> 01:27:41,500
card, right?

1305
01:27:42,500 --> 01:27:46,900
and so what I've done now is I put us into a situation where we have a

1306
01:27:46,900 --> 01:27:51,400
much cleaner way of working with this, where, instead of that,

1307
01:27:54,000 --> 01:27:56,000
We pretty much have everything.

1308
01:27:56,800 --> 01:28:00,900
As you can see from here, we pretty much have everything in one big

1309
01:28:00,900 --> 01:28:03,000
array which if we wanted to.

1310
01:28:03,000 --> 01:28:06,100
Now, if we had some way of just telling the graphics card, hey

1311
01:28:06,100 --> 01:28:09,300
graphics card, take this whole array from us.

1312
01:28:10,800 --> 01:28:12,600
We would be all set, right?

1313
01:28:13,600 --> 01:28:17,100
And that's exactly what we can do, as we move away from the fixed

1314
01:28:17,100 --> 01:28:17,900
function pipeline.

1315
01:28:17,900 --> 01:28:22,600
So, instead of having to make this call every time where we go through

1316
01:28:22,600 --> 01:28:23,200
here each

1317
01:28:23,300 --> 01:28:26,000
I'm and say, okay, here's a Vertex here as a Vertex.

1318
01:28:26,000 --> 01:28:27,200
Here is a vertex here as a Vertex.

1319
01:28:27,200 --> 01:28:28,400
Here's a Vertex, here's a Vertex.

1320
01:28:28,400 --> 01:28:31,500
Here's a vertex and doing a tremendous amount of work, each time

1321
01:28:31,800 --> 01:28:36,300
calling into the driver three separate times for every vertex, right?

1322
01:28:36,300 --> 01:28:38,800
Because we have to set the color than the cord, then the vertex

1323
01:28:39,300 --> 01:28:39,900
location.

1324
01:28:41,700 --> 01:28:45,600
Instead of doing that, tremendous amount of work, we can now

1325
01:28:45,600 --> 01:28:49,900
drastically simplify that by just saying, here's all the vertices and

1326
01:28:49,900 --> 01:28:54,300
I'm just going to tell you what to do with those vertices in bulk

1327
01:28:54,900 --> 01:28:56,800
right now.

1328
01:28:57,300 --> 01:29:01,500
If we were fully bind lists, we could do this in bulk completely.

1329
01:29:01,800 --> 01:29:06,100
So if we wanted to use like Nvidia extensions, for example, we could

1330
01:29:06,100 --> 01:29:09,900
actually do one call that would draw everything.

1331
01:29:10,600 --> 01:29:11,100
We would

1332
01:29:11,900 --> 01:29:15,900
Basically say, I mean, I shouldn't say one call, it's three calls we

1333
01:29:15,900 --> 01:29:16,500
would say.

1334
01:29:16,600 --> 01:29:21,600
Here's a pointer that says all the textures to use that star bitmap

1335
01:29:21,600 --> 01:29:22,100
array.

1336
01:29:22,300 --> 01:29:26,000
Here's a pointer that says all the vertices to use and here's that's

1337
01:29:26,000 --> 01:29:26,900
the vertex array.

1338
01:29:27,400 --> 01:29:30,400
And then we just say draw quads, right?

1339
01:29:30,400 --> 01:29:34,000
Basically, it's what we would do, it's not quite grow cause would be

1340
01:29:34,000 --> 01:29:37,000
like draw, try strips of the restart, but that's a separate thing and

1341
01:29:37,000 --> 01:29:38,600
it would just go through and draw them all.

1342
01:29:38,600 --> 01:29:39,400
And that would be it.

1343
01:29:40,200 --> 01:29:40,700
Right?

1344
01:29:40,900 --> 01:29:45,600
So at the limit, if you're programming a heavily programmable hardware

1345
01:29:45,600 --> 01:29:48,800
and you're willing to use extensions or you're on like a console or

1346
01:29:48,800 --> 01:29:52,900
something and so you know that you just have all the capabilities of

1347
01:29:52,900 --> 01:29:54,900
the card at your fingertips.

1348
01:29:54,900 --> 01:29:57,800
You don't have to worry about like, Intel integrated Graphics parts,

1349
01:29:57,800 --> 01:29:59,800
are these sorts of things, which might not have the

1350
01:30:00,000 --> 01:30:05,200
You need, you can actually take all of the load off, and this is what

1351
01:30:05,200 --> 01:30:08,300
a CDO is approaching zero driver overhead.

1352
01:30:08,500 --> 01:30:12,700
The idea that you basically make almost no calls to the driver and you

1353
01:30:12,700 --> 01:30:16,200
just give it huge sets of data and then it just interprets the data so

1354
01:30:16,200 --> 01:30:21,400
that the driver and you don't have any need to communicate and there's

1355
01:30:21,400 --> 01:30:22,700
no overhead and translation.

1356
01:30:22,700 --> 01:30:24,800
It's basically just shoveling things to the card.

1357
01:30:25,700 --> 01:30:29,600
So once you put things in just some flat arrays that can be used off

1358
01:30:29,600 --> 01:30:29,800
you go.

1359
01:30:30,000 --> 01:30:30,100
Go.

1360
01:30:30,500 --> 01:30:34,100
Now we can't get that good and the reason that we can't get that good

1361
01:30:34,100 --> 01:30:37,300
is because we are still using rectangular bitmaps are not packed in

1362
01:30:37,300 --> 01:30:38,200
any particular way.

1363
01:30:38,700 --> 01:30:42,100
So we need to tell opengl for every quad.

1364
01:30:42,100 --> 01:30:44,900
What the bitmap is that it's supposed to use or in this case since

1365
01:30:44,900 --> 01:30:49,200
it's been sent out a textures which texture handle to use and using

1366
01:30:49,500 --> 01:30:52,500
setting, the texture handle is something that requires a call.

1367
01:30:57,200 --> 01:30:57,800
Again.

1368
01:30:59,700 --> 01:31:01,200
if you don't have an extension,

1369
01:31:02,300 --> 01:31:05,800
there and like I said, if you are willing to use specific extensions

1370
01:31:05,800 --> 01:31:09,100
for specific Hardware, that's not true anymore, because plenty of

1371
01:31:09,100 --> 01:31:12,600
Hardware does have the ability to switch textures / primitive

1372
01:31:12,600 --> 01:31:19,900
potentially based on input data because, yeah, because depending on

1373
01:31:19,900 --> 01:31:24,200
how the hardware setup, if that is a generic operation, meaning when

1374
01:31:24,200 --> 01:31:27,300
it goes to sample a texture, if it really just needs a location of the

1375
01:31:27,300 --> 01:31:31,800
texture information, you can just apply that as data other,

1376
01:31:32,100 --> 01:31:32,500
Cards.

1377
01:31:32,900 --> 01:31:36,800
Certainly older cards but also I think still modern until cards at

1378
01:31:36,800 --> 01:31:38,200
least up to a certain point.

1379
01:31:38,200 --> 01:31:44,100
I don't know about the very latest, they actually still required the

1380
01:31:44,100 --> 01:31:47,700
concept of texture units and those units being bound.

1381
01:31:49,700 --> 01:31:52,900
And so their Hardware actually still had the limitation that when it

1382
01:31:52,900 --> 01:31:54,000
was sampling for a texture.

1383
01:31:54,000 --> 01:31:58,100
It had to be a textured unit, not a texture address and at that point

1384
01:31:58,100 --> 01:32:02,700
it meant that every time you went through a new texture you had to do

1385
01:32:02,700 --> 01:32:03,800
that actual swap.

1386
01:32:05,000 --> 01:32:11,300
So to the best of my knowledge, there is no way to get around that

1387
01:32:11,300 --> 01:32:12,800
part yet everywhere.

1388
01:32:13,500 --> 01:32:18,600
It'd be really nice if it was because like I said, most high-end

1389
01:32:18,800 --> 01:32:20,400
Cards can just do this.

1390
01:32:20,800 --> 01:32:25,700
And so you're kind of in this very bad lowest, common denominator land

1391
01:32:25,700 --> 01:32:29,200
where the only reason you have these apis have all this ridiculous

1392
01:32:29,200 --> 01:32:32,200
stupid texture State associated with them is pretty much just because

1393
01:32:32,200 --> 01:32:37,300
we still have Legacy or less capable Hardware that we have to support.

1394
01:32:37,300 --> 01:32:39,800
Otherwise, we could have moved to something much better a long time

1395
01:32:39,800 --> 01:32:43,400
ago where texture data was just part of the regular data that fed down

1396
01:32:45,000 --> 01:32:48,600
and you didn't have this sort of overwhelming like state.

1397
01:32:48,700 --> 01:32:52,400
Eight sort of management that is associated with switching a texture.

1398
01:32:53,000 --> 01:32:55,800
Because, again, a lot of things like texture atlases and stuff like

1399
01:32:55,800 --> 01:32:59,800
that, you know, they don't necessarily need to be

1400
01:33:00,000 --> 01:33:06,000
Used in a lot of cases if it isn't for the fact that you just have to

1401
01:33:06,000 --> 01:33:07,800
worry about those texture State changes.

1402
01:33:08,100 --> 01:33:11,900
And so it forces people to do stuff in certain cases, that they really

1403
01:33:11,900 --> 01:33:15,500
wouldn't need to do because the hardware doesn't really care as much

1404
01:33:15,500 --> 01:33:17,600
as the API makes it seem like it does.

1405
01:33:18,100 --> 01:33:22,600
But the reason that the apis look that way is because of older or less

1406
01:33:22,600 --> 01:33:23,700
capable Hardware.

1407
01:33:24,100 --> 01:33:29,700
Not because the most fancy like modern and video part actually has

1408
01:33:29,700 --> 01:33:29,900
those

1409
01:33:30,000 --> 01:33:33,300
limitations because it probably doesn't, is I guess the way I would

1410
01:33:33,300 --> 01:33:33,800
say it.

1411
01:33:35,400 --> 01:33:40,000
But all that is neither here nor there because we still have to deal

1412
01:33:40,000 --> 01:33:41,700
with those cards when we ship on the PC.

1413
01:33:41,700 --> 01:33:44,900
So unfortunately, we're still in a situation where we will have to set

1414
01:33:44,900 --> 01:33:46,200
the texture a lot of times.

1415
01:33:46,600 --> 01:33:48,900
However just because we have to set the texture, a lot of times

1416
01:33:48,900 --> 01:33:53,000
doesn't mean that we have to live with the rest of the sort of

1417
01:33:53,100 --> 01:33:55,100
inefficient stuff that's going on.

1418
01:33:55,500 --> 01:34:02,100
So we can do some stuff now to sort of help move towards something.

1419
01:34:02,100 --> 01:34:03,900
That's that's not going to

1420
01:34:06,100 --> 01:34:08,700
This is not going to have to at least send down vertices piecemeal

1421
01:34:09,100 --> 01:34:10,400
because we've done the work of that.

1422
01:34:10,400 --> 01:34:15,400
And that is a nice simple change to make simple in theory.

1423
01:34:15,500 --> 01:34:19,100
Not so simple because the opengl API is absolutely disgusting.

1424
01:34:19,800 --> 01:34:21,200
When it comes to this sort of stuff.

1425
01:34:23,300 --> 01:34:25,500
Nobody really properly, ever updated.

1426
01:34:25,500 --> 01:34:29,100
It uses just the most heinous syntax which is going to just be you're

1427
01:34:29,100 --> 01:34:29,300
going to see.

1428
01:34:29,300 --> 01:34:35,200
It's just it's I mean it's just awful but once we actually get

1429
01:34:35,400 --> 01:34:38,200
Through the torture of the actual set of calls we have to do.

1430
01:34:38,400 --> 01:34:41,100
Hopefully, we don't get too many things along the way, where I don't

1431
01:34:41,100 --> 01:34:45,700
remember the exact magic Ridiculousness that we specify.

1432
01:34:45,700 --> 01:34:47,900
Hopefully, eventually we'll be able to

1433
01:34:51,000 --> 01:34:53,800
Get it working though because once it works, it's it's fine either

1434
01:34:53,800 --> 01:34:54,500
way, right?

1435
01:34:55,500 --> 01:35:01,000
So anyway, there's a, there's a bunch of stuff in here.

1436
01:35:01,000 --> 01:35:02,100
It's not client.

1437
01:35:02,100 --> 01:35:03,600
It's let's see.

1438
01:35:03,600 --> 01:35:04,900
It's not a real element.

1439
01:35:04,900 --> 01:35:05,600
Let's see.

1440
01:35:05,600 --> 01:35:07,900
Jill, draw a raise.

1441
01:35:07,900 --> 01:35:08,600
Let's, let's

1442
01:35:10,700 --> 01:35:12,000
Let's start here.

1443
01:35:12,400 --> 01:35:13,100
All right.

1444
01:35:14,400 --> 01:35:16,900
And like I said, it's just it's a question of me, remembering all of

1445
01:35:16,900 --> 01:35:17,500
these things.

1446
01:35:17,500 --> 01:35:19,200
So basically what happens is.

1447
01:35:20,400 --> 01:35:25,100
All right, so we have calls like this GL drawer raised.

1448
01:35:25,100 --> 01:35:28,700
For example, you can see what it, what it looks like, you give it a

1449
01:35:28,700 --> 01:35:31,500
mode and so you can see what the modes are here.

1450
01:35:31,600 --> 01:35:34,700
Points line stripline Loop lines adjacency blah, blah blah.

1451
01:35:34,700 --> 01:35:39,000
So you pass, basically what you're trying to draw in our case we want

1452
01:35:39,000 --> 01:35:40,400
to draw quads, but of course

1453
01:35:40,500 --> 01:35:42,200
We can't quite draw quads.

1454
01:35:42,600 --> 01:35:46,100
So we're going to try to draw a GL triangle strips and we'll use a

1455
01:35:46,100 --> 01:35:47,000
restart.

1456
01:35:47,200 --> 01:35:50,600
I'll kind of talk about what that is in a second, but that's putting

1457
01:35:50,600 --> 01:35:52,600
the cart a little bit before the horse in this case.

1458
01:35:54,100 --> 01:35:57,000
Okay, so you call this g l drawer.

1459
01:35:57,000 --> 01:35:57,800
He's right.

1460
01:35:58,000 --> 01:35:59,300
You've got the first

1461
01:36:00,000 --> 01:36:03,800
Says, hey, I'm guess there's some erase somewhere, right?

1462
01:36:03,900 --> 01:36:05,200
Which element did you want?

1463
01:36:05,200 --> 01:36:05,800
Start with?

1464
01:36:06,000 --> 01:36:07,500
And then we got count, which is like, okay.

1465
01:36:07,500 --> 01:36:08,400
You're drawing a raise.

1466
01:36:08,500 --> 01:36:12,400
What, you know, is the number that you want to do, right?

1467
01:36:13,000 --> 01:36:15,400
And so you can see here, this is the indexed version.

1468
01:36:15,700 --> 01:36:18,000
So, in this case, you

1469
01:36:20,900 --> 01:36:23,900
I believe there's this the in this version know, this might not be the

1470
01:36:23,900 --> 01:36:27,700
index version, so this might be the regular business on indexed so you

1471
01:36:27,700 --> 01:36:28,500
can see what happens.

1472
01:36:28,500 --> 01:36:31,900
Here is in the example code and this is exactly what we're going to

1473
01:36:31,900 --> 01:36:32,500
have to do.

1474
01:36:33,500 --> 01:36:36,500
Here's the deal drawer raised, it's going to draw a Vertex count here.

1475
01:36:37,300 --> 01:36:40,800
And what you can see is it first goes through a bunch of enable calls

1476
01:36:41,000 --> 01:36:42,100
and those enable calls.

1477
01:36:42,100 --> 01:36:44,600
Say, here are the

1478
01:36:47,900 --> 01:36:51,800
Here are the arrays that are going to be active at this point, right?

1479
01:36:52,100 --> 01:36:58,300
Then we say hey in those arrays, here are Pointers to where the data

1480
01:36:58,300 --> 01:37:00,400
is going to come from, right?

1481
01:37:00,400 --> 01:37:04,000
So it's basically saying, alright, in this array I'm telling you that

1482
01:37:04,000 --> 01:37:06,400
there's two packed floating Point values.

1483
01:37:07,400 --> 01:37:09,000
They're not normalized.

1484
01:37:09,000 --> 01:37:14,600
This is what that I believe usually means they here is the the pointer

1485
01:37:14,600 --> 01:37:15,600
to where they're at.

1486
01:37:16,200 --> 01:37:16,700
And here's

1487
01:37:16,900 --> 01:37:19,200
The base of it and we'll look at that call separately.

1488
01:37:19,800 --> 01:37:23,200
Then we do GL draw arrays and then we disable all those.

1489
01:37:23,200 --> 01:37:23,700
Right?

1490
01:37:23,800 --> 01:37:26,900
So it's sort of a case of saying hey here's all the the places to get

1491
01:37:26,900 --> 01:37:28,200
the data that I'm going to use.

1492
01:37:28,300 --> 01:37:34,100
Here's where they are in those arrays, do it, draw them, and then end,

1493
01:37:34,400 --> 01:37:34,900
right?

1494
01:37:36,600 --> 01:37:38,700
Okay, like I said, it's going to be real messy.

1495
01:37:38,700 --> 01:37:39,600
So here we go.

1496
01:37:39,600 --> 01:37:41,200
In jail vertex of trip pointer.

1497
01:37:42,300 --> 01:37:45,600
This is the call that we need to be able to specify where the stuff

1498
01:37:45,600 --> 01:37:46,000
is.

1499
01:37:46,300 --> 01:37:48,700
This is the pointer to the to the data.

1500
01:37:49,100 --> 01:37:52,500
And you can see, you need these indices in here to tell you sort of

1501
01:37:52,500 --> 01:37:54,300
where things are right?

1502
01:37:55,300 --> 01:37:58,800
And it's basically saying which array you're talking about because you

1503
01:37:58,800 --> 01:38:01,600
can have multiple Rays bound at any time, right?

1504
01:38:01,700 --> 01:38:03,000
So we're going to need these two calls.

1505
01:38:03,000 --> 01:38:04,400
We're gonna have to basically do what this says.

1506
01:38:04,800 --> 01:38:06,300
And then we've got yet another

1507
01:38:06,400 --> 01:38:11,000
Other thing that's a problem, because the other asset we have of this

1508
01:38:11,200 --> 01:38:13,700
is that this is what happens if you're using with the fixed function

1509
01:38:13,700 --> 01:38:14,300
pipeline.

1510
01:38:14,500 --> 01:38:18,100
But we also have the problem of we're using a Vertex Shader.

1511
01:38:18,300 --> 01:38:21,900
So in order to specify these things to the vertex Shader, we also need

1512
01:38:21,900 --> 01:38:27,200
a way of saying, hey, here's how you get the various values that the

1513
01:38:27,200 --> 01:38:30,400
vertex Shader is trying to read, right?

1514
01:38:32,300 --> 01:38:37,500
So if we come back in here, you can see we've got this sort of vertex

1515
01:38:37,500 --> 01:38:42,000
Shader here, and you'll notice we've got a bunch of output variables,

1516
01:38:42,000 --> 01:38:44,500
but we have no input variables, right?

1517
01:38:44,700 --> 01:38:48,000
And that's kind of messed up the reason for that is because we were

1518
01:38:48,000 --> 01:38:50,100
trying to use the fixed function pipeline.

1519
01:38:50,200 --> 01:38:55,400
So, we had this like GL vertex stuff going on here that is like a

1520
01:38:55,400 --> 01:38:57,700
built-in variable that was getting passed down to us.

1521
01:38:58,000 --> 01:38:59,600
Same is true of the techs coordinates

1522
01:39:00,000 --> 01:39:01,300
Don't want to do that anymore.

1523
01:39:01,300 --> 01:39:03,500
We want to convert away from the fixed function pipeline.

1524
01:39:03,700 --> 01:39:07,400
So, in addition, once we make that change, we're also going to need

1525
01:39:07,400 --> 01:39:15,200
two way of saying, how the vertex Shader binds name wise to the array

1526
01:39:15,200 --> 01:39:18,100
elements that were passing down, right?

1527
01:39:18,300 --> 01:39:20,000
So we got to do all of this crap.

1528
01:39:20,400 --> 01:39:21,800
Again, it's complete.

1529
01:39:21,800 --> 01:39:27,400
Busywork the API is absolutely horrid like it's just awful but that's

1530
01:39:27,400 --> 01:39:28,900
just the way it goes.

1531
01:39:29,500 --> 01:39:29,900
One of the things.

1532
01:39:30,000 --> 01:39:32,800
You have to remember out opengl one of the reasons has been around so

1533
01:39:32,800 --> 01:39:33,200
long.

1534
01:39:35,200 --> 01:39:38,700
Is they have a process for like a creating things together and moving

1535
01:39:38,700 --> 01:39:39,700
the thing forward?

1536
01:39:40,700 --> 01:39:43,800
They don't really have a process for stopping and going.

1537
01:39:43,800 --> 01:39:49,200
Wait, we've gone too far down this this road and it's all been

1538
01:39:49,200 --> 01:39:50,900
bootstrapped off of the old way.

1539
01:39:50,900 --> 01:39:51,800
The API was set up.

1540
01:39:51,800 --> 01:39:52,800
That doesn't make sense anymore.

1541
01:39:52,800 --> 01:39:55,200
We need to wipe the Slate clean and do a new thing.

1542
01:39:55,200 --> 01:39:58,400
That that makes more sense with how people are using it.

1543
01:39:58,400 --> 01:40:02,900
Now that doesn't really exist, they tried to do it once or twice in

1544
01:40:02,900 --> 01:40:03,600
its history.

1545
01:40:03,600 --> 01:40:04,600
It doesn't really work.

1546
01:40:04,600 --> 01:40:08,800
Super well, it's also designed by committee is rough when you get to

1547
01:40:08,800 --> 01:40:09,600
stuff like this.

1548
01:40:10,500 --> 01:40:14,000
It's a kind of thing where you end up just having just too many cooks

1549
01:40:14,000 --> 01:40:15,300
spoil the broth and that sort of stuff.

1550
01:40:15,300 --> 01:40:20,600
So, you know, you got to take it for what it is but it's an awful API

1551
01:40:20,600 --> 01:40:22,400
at this point for doing this sort of stuff.

1552
01:40:22,400 --> 01:40:24,200
There's just no two ways about it.

1553
01:40:24,200 --> 01:40:28,800
But hopefully you can appreciate why the API is the way it is.

1554
01:40:28,800 --> 01:40:36,700
And, you know, you can't really it's hard to have something that lasts

1555
01:40:36,700 --> 01:40:37,400
for this long.

1556
01:40:37,400 --> 01:40:40,400
Not get into a circumstance like this.

1557
01:40:41,000 --> 01:40:45,300
I guess one thing you might say is it's surprising it's not worse than

1558
01:40:45,300 --> 01:40:46,700
it is, right?

1559
01:40:48,800 --> 01:40:51,700
So if you look at what's Happening Here of the things we care about,

1560
01:40:51,700 --> 01:40:54,800
we don't care about normals because we're not sending down any normals

1561
01:40:54,800 --> 01:40:57,500
because we're not doing any directional lighting at this point.

1562
01:40:58,200 --> 01:40:59,200
So we don't need those.

1563
01:40:59,200 --> 01:41:02,500
So, really what we're looking at Kara's, we need to do enable vertex

1564
01:41:02,500 --> 01:41:04,900
of trib array and vertex, a trip pointer.

1565
01:41:05,600 --> 01:41:08,000
That's really all we need to do in this case.

1566
01:41:08,800 --> 01:41:13,000
So we need to set up these arrays and then we need to specify that

1567
01:41:13,000 --> 01:41:16,900
they're being used in a particular way, we don't really need to

1568
01:41:16,900 --> 01:41:18,300
disable them so much.

1569
01:41:18,500 --> 01:41:21,800
But we probably should just because we might want to mix other opengl

1570
01:41:22,100 --> 01:41:24,400
calls in here at some point I suppose.

1571
01:41:25,400 --> 01:41:27,600
So we're looking at something that's going to look a little bit like

1572
01:41:27,600 --> 01:41:34,900
this, but we need to do here is say, okay, let's, let's first start

1573
01:41:34,900 --> 01:41:37,000
with getting our vertex specification down.

1574
01:41:37,400 --> 01:41:40,400
Now, what you can see about vertex at your pointer and let's go ahead

1575
01:41:40,400 --> 01:41:43,000
and here and and see how this is.

1576
01:41:43,400 --> 01:41:45,900
So we're going to ignore index for now because we're not going to look

1577
01:41:45,900 --> 01:41:46,800
at that part of it.

1578
01:41:47,400 --> 01:41:48,300
So let's take a look at

1579
01:41:48,400 --> 01:41:50,000
The size, right?

1580
01:41:50,700 --> 01:41:55,300
So the size here, in this case is telling us how many elements were

1581
01:41:55,300 --> 01:41:56,000
specifying.

1582
01:41:56,400 --> 01:41:59,300
So in our case, when we're stressing text, chords were specifying to,

1583
01:41:59,300 --> 01:41:59,800
we're supposed to be

1584
01:42:00,000 --> 01:42:04,400
Colors were actually specifying four not three because we have an

1585
01:42:04,400 --> 01:42:06,200
alpha component and in position.

1586
01:42:06,200 --> 01:42:09,200
We're also specifying for because we have that extra Z bias component.

1587
01:42:09,200 --> 01:42:10,800
So it's not what opengl.

1588
01:42:10,900 --> 01:42:13,200
It's not what the people who are doing an example expecting which is

1589
01:42:13,200 --> 01:42:13,900
just 3D positions.

1590
01:42:13,900 --> 01:42:16,700
We've actually got three positions, plus one piece of information

1591
01:42:18,600 --> 01:42:20,000
So then we've got a type parameter here.

1592
01:42:20,000 --> 01:42:22,900
That says, what we're going to sending down, that's actually correct.

1593
01:42:22,900 --> 01:42:25,600
We are specifying floating-point texture coordinates unsigned B for

1594
01:42:25,600 --> 01:42:30,400
verdicts for colors and floats for vertex coordinates.

1595
01:42:31,300 --> 01:42:33,800
Then we've got normalized which is whether or not.

1596
01:42:34,000 --> 01:42:38,700
The things should be normalized from the values set that's in 2021

1597
01:42:38,700 --> 01:42:41,500
range obviously for floating-point values, that's not necessary, but

1598
01:42:41,500 --> 01:42:44,800
for these unsigned B, it is necessary because we basically want them

1599
01:42:44,800 --> 01:42:47,700
to take a value that's going to go from

1600
01:42:47,900 --> 01:42:49,800
55 and change it to one's going 0 to 1.

1601
01:42:49,800 --> 01:42:51,800
That's the normalization that it's referring to there.

1602
01:42:52,200 --> 01:42:54,800
So we want stuff that to true in that case stride.

1603
01:42:54,800 --> 01:42:58,400
In our case we have don't have separated vertex arrays.

1604
01:42:58,500 --> 01:43:01,300
We have one array of vertex data, right?

1605
01:43:01,400 --> 01:43:04,900
And so because we have one array of vertex data what that means is we

1606
01:43:04,900 --> 01:43:09,300
want to actually set this up so that all of our vertices are basically

1607
01:43:09,400 --> 01:43:12,100
moving as you would expect, right?

1608
01:43:13,800 --> 01:43:16,600
All of our arrays are pointing into the same array but they're moving

1609
01:43:16,600 --> 01:43:18,200
one full vertex at a time.

1610
01:43:18,700 --> 01:43:25,200
So what this means is sort of the the the distance that it has to go

1611
01:43:25,500 --> 01:43:29,400
is the size of our textured vertex primitive, right?

1612
01:43:34,800 --> 01:43:36,000
Hopefully that makes some sense.

1613
01:43:36,800 --> 01:43:39,400
So you can kind of see, all right, we're going to have these arrays

1614
01:43:40,000 --> 01:43:43,200
multiple arrays, supposedly of the data coming in, but really we just

1615
01:43:43,200 --> 01:43:43,900
have one array.

1616
01:43:44,100 --> 01:43:46,400
So we need all the arrays to pointing to the same place.

1617
01:43:46,600 --> 01:43:49,000
And every time they want to go to their next value, they're just going

1618
01:43:49,000 --> 01:43:51,600
to go Advanced by the size of a whole vertex.

1619
01:43:51,600 --> 01:43:52,100
Right?

1620
01:43:52,800 --> 01:43:55,400
And then similarly, when we come in here, we know that everything is

1621
01:43:55,400 --> 01:43:58,400
effectively pointing to the same location, right?

1622
01:43:58,400 --> 01:44:02,300
Everybody is going to be pointing into that commands vertex, array.

1623
01:44:05,200 --> 01:44:07,800
Right, so everyone is effectively.

1624
01:44:11,100 --> 01:44:12,300
Looking at it like this.

1625
01:44:13,500 --> 01:44:17,700
But each one of them is going to be offset by the address of whatever

1626
01:44:17,700 --> 01:44:20,900
the member is that they particularly care about, right?

1627
01:44:21,500 --> 01:44:25,300
So what we want to do here is basically say vertex base or something

1628
01:44:25,300 --> 01:44:25,900
like this.

1629
01:44:26,600 --> 01:44:30,200
And we want to take this and cast it to a you ate, so that we can do

1630
01:44:30,200 --> 01:44:31,100
offsets on it.

1631
01:44:31,700 --> 01:44:37,400
And then what we do is say vertex base plus, you know, offset from

1632
01:44:38,300 --> 01:44:41,600
offset of do we have, what do we got here platform?

1633
01:44:42,800 --> 01:44:45,100
see offset offset of

1634
01:44:47,200 --> 01:44:50,500
So, we want to do here is say, hey, we've got the textured vertex.

1635
01:44:50,800 --> 01:44:53,500
We want the offset of the one that corresponds to it.

1636
01:44:53,500 --> 01:44:57,900
So we want for our text chords, we want the offset of the UV inside it

1637
01:44:58,800 --> 01:44:59,800
and for the vertex base,

1638
01:45:00,600 --> 01:45:07,600
We want the offset of the color, sorry for the color array.

1639
01:45:08,200 --> 01:45:09,900
And for the position array.

1640
01:45:12,900 --> 01:45:15,400
We want the offset of the position, right?

1641
01:45:16,000 --> 01:45:19,500
And so just to underscore what's happening here, where is the pain?

1642
01:45:19,500 --> 01:45:23,600
There's the pain pain is in my hand.

1643
01:45:33,200 --> 01:45:38,000
so, basically, what we're going to do here is just say, okay, we've

1644
01:45:38,000 --> 01:45:39,100
got a Vertex array

1645
01:45:41,400 --> 01:45:44,400
And that vertex array is packed, right?

1646
01:45:44,900 --> 01:45:50,400
So we have position UV color position.

1647
01:45:50,700 --> 01:45:59,600
UV color position, UV color position, UV color.that that, right?

1648
01:46:00,500 --> 01:46:03,600
And opengl wants one array for each.

1649
01:46:03,700 --> 01:46:05,800
So we have one array, but it wants three.

1650
01:46:06,500 --> 01:46:08,200
So all we're doing is saying, okay.

1651
01:46:08,200 --> 01:46:11,000
Well if you want a position array, what we're going to do

1652
01:46:11,200 --> 01:46:15,600
Is point right here and we're going to tell you the stride is this

1653
01:46:15,600 --> 01:46:18,900
much is one whole vertex you want to you via Ray.

1654
01:46:18,900 --> 01:46:22,100
Okay, where we're going to point right here at the start of the UV.

1655
01:46:22,100 --> 01:46:25,900
So all from the beginning of our array by however much the UVS are and

1656
01:46:25,900 --> 01:46:29,700
again that same stride so it's going to skip over the other two

1657
01:46:29,700 --> 01:46:32,900
elements in the array, get to the next one and grab that, right?

1658
01:46:33,200 --> 01:46:38,700
And then finally, same thing color points to hear and skips over so

1659
01:46:38,700 --> 01:46:41,000
it's basically we're just setting up three array pointers to pointers

1660
01:46:41,100 --> 01:46:42,500
Point into the same array.

1661
01:46:42,600 --> 01:46:45,500
We're offsetting them slightly so that they point to the right

1662
01:46:45,500 --> 01:46:49,000
starting member as if they were array of just UVS or whatever.

1663
01:46:49,200 --> 01:46:52,900
But then we set the stride to be much larger than a UV would be.

1664
01:46:53,100 --> 01:46:57,300
So that every time it reads, 1uv, it will skip the interceding color

1665
01:46:57,300 --> 01:47:01,100
and position values, and get to the next actual UV value, right?

1666
01:47:03,600 --> 01:47:06,900
So now we've told opengl basically how to get these out.

1667
01:47:07,400 --> 01:47:13,100
And, you know, you could imagine a setting this stuff up like, so with

1668
01:47:13,100 --> 01:47:16,400
the vertex of him pointers and and all this other sorts of nonsense,

1669
01:47:17,000 --> 01:47:17,600
but

1670
01:47:27,400 --> 01:47:29,300
You can imagine we have some indices like this.

1671
01:47:29,700 --> 01:47:32,800
Our problem at this point is still that we don't know what these

1672
01:47:32,800 --> 01:47:35,900
indexes should actually be right.

1673
01:47:36,200 --> 01:47:39,200
And so in some sense I mean actually changes something that we can

1674
01:47:39,600 --> 01:47:40,500
talk about here.

1675
01:47:41,500 --> 01:47:42,000
There we go.

1676
01:47:42,800 --> 01:47:46,000
So that's a Glu in so position, array.

1677
01:47:50,000 --> 01:47:51,100
so I guess I'll say

1678
01:47:52,900 --> 01:47:57,200
P array UV ray and C array.

1679
01:48:14,000 --> 01:48:14,400
Yeah.

1680
01:48:29,900 --> 01:48:30,400
All right.

1681
01:48:35,500 --> 01:48:36,000
so,

1682
01:48:39,700 --> 01:48:43,300
it looks like we still use some a little bit here.

1683
01:48:43,300 --> 01:48:45,800
We do the budget, we still use an opengl rectangle call.

1684
01:48:46,200 --> 01:48:47,500
So until that's out of there, I guess.

1685
01:48:47,500 --> 01:48:50,900
Technically, what I'll have to do is move these down into the actual

1686
01:48:50,900 --> 01:48:53,200
batch call, which is fine again.

1687
01:48:53,200 --> 01:48:57,100
Like I said, it's it's called so infrequently.

1688
01:48:57,100 --> 01:49:01,400
Now, because there's only two of these per frame, that that's okay.

1689
01:49:01,400 --> 01:49:04,400
We can do as much set up as we want in there and it's really not an

1690
01:49:04,400 --> 01:49:04,900
issue.

1691
01:49:09,800 --> 01:49:14,100
Alright, so here we have all of our enable/disable stuff, we're going

1692
01:49:14,100 --> 01:49:15,200
to have to get some of those functions.

1693
01:49:15,200 --> 01:49:17,800
I don't think they were in opengl that early on.

1694
01:49:17,800 --> 01:49:20,500
He can see that they're going to have to be things that we get.

1695
01:49:21,300 --> 01:49:24,300
But we have some problems here, which is

1696
01:49:26,800 --> 01:49:27,600
What is the problem?

1697
01:49:35,100 --> 01:49:38,200
We still have a problem here which is, we really just don't know what

1698
01:49:38,200 --> 01:49:39,300
these values should be.

1699
01:49:39,300 --> 01:49:42,600
And so that's the primary thing that we're going to have to deal with

1700
01:49:42,600 --> 01:49:42,800
here.

1701
01:49:42,800 --> 01:49:43,700
Is this color?

1702
01:49:45,700 --> 01:49:46,000
Yeah.

1703
01:49:47,000 --> 01:49:48,900
And so the primary thing that we need to know now for the

1704
01:49:48,900 --> 01:49:50,700
documentation is where to get these.

1705
01:49:51,200 --> 01:49:55,400
Now one interesting thing about this is I suspect that if we want to

1706
01:49:55,400 --> 01:49:58,900
try to stick with the fixed function pipeline again and just stick

1707
01:49:58,900 --> 01:50:03,000
with it, as long as we can at each stage so we can only do the change

1708
01:50:03,000 --> 01:50:05,500
necessary to move one step closer.

1709
01:50:06,400 --> 01:50:11,900
We could try to find out what the values are for the original opengl

1710
01:50:11,900 --> 01:50:13,200
fixed function pipeline.

1711
01:50:15,800 --> 01:50:16,500
Arrays.

1712
01:50:17,600 --> 01:50:19,500
And so I don't actually know

1713
01:50:31,500 --> 01:50:34,100
I don't actually know if that how possible that is.

1714
01:50:41,400 --> 01:50:41,800
Well.

1715
01:50:46,300 --> 01:50:47,700
Yeah, I don't know.

1716
01:50:48,000 --> 01:50:52,200
Let's go ahead and just assume that we won't be able to do that hard

1717
01:50:52,200 --> 01:50:55,200
that it would take too long to do that and we'll do the will get oops.

1718
01:50:55,200 --> 01:50:58,600
I didn't mean that will go a long with

1719
01:51:00,900 --> 01:51:04,100
Well, we'll just skip that part of the fixed function pipeline

1720
01:51:04,100 --> 01:51:07,700
entirely and move forward and maybe it takes longer to debug as a

1721
01:51:07,700 --> 01:51:08,100
result.

1722
01:51:08,100 --> 01:51:08,700
But oh well.

1723
01:51:09,800 --> 01:51:12,900
Okay, so here we are with GL, get a trip location.

1724
01:51:12,900 --> 01:51:13,500
What is GL?

1725
01:51:13,600 --> 01:51:14,800
Get a triple location.

1726
01:51:15,400 --> 01:51:18,300
Well, gee L, get a trip location is the thing that I was talking about

1727
01:51:18,300 --> 01:51:25,700
before, that's when we're looking at the, this Shader code, what we

1728
01:51:25,700 --> 01:51:26,600
did before, right?

1729
01:51:26,600 --> 01:51:29,600
As we have these things called uniforms and we were saying, okay,

1730
01:51:29,600 --> 01:51:29,900
these things

1731
01:51:30,000 --> 01:51:34,800
Things called uniforms are the same for every invocation of the Shader

1732
01:51:34,800 --> 01:51:35,500
in a batch.

1733
01:51:35,500 --> 01:51:37,400
That's why they're called uniform, they don't vary.

1734
01:51:38,400 --> 01:51:41,700
And so when we're doing something like vertices and we're doing a

1735
01:51:41,700 --> 01:51:44,500
bunch of vertices in a batch then, obviously it's something like the

1736
01:51:44,500 --> 01:51:47,400
transfer Matrix that they're all using is going to be the same for

1737
01:51:47,400 --> 01:51:48,400
many vertices in a row.

1738
01:51:48,400 --> 01:51:51,900
Hence it's a uniform in order to set that we use the thing called GL,

1739
01:51:51,900 --> 01:51:53,700
get uniform location.

1740
01:51:53,700 --> 01:51:57,000
I think we passed the program and the name of the uniform and it goes

1741
01:51:57,000 --> 01:51:57,500
into the Shader.

1742
01:51:57,500 --> 01:51:59,100
And says, where is that name?

1743
01:51:59,300 --> 01:51:59,800
What's the off?

1744
01:52:00,000 --> 01:52:03,700
Of that name that I need to set the like writes Shader information for

1745
01:52:03,700 --> 01:52:04,300
it or whatever.

1746
01:52:05,300 --> 01:52:07,300
And that's what we used to talk about wear.

1747
01:52:07,300 --> 01:52:09,100
The uniform was right?

1748
01:52:09,200 --> 01:52:11,900
And you remember, we did that right here, you can see get uniform

1749
01:52:11,900 --> 01:52:13,400
location, get uniform location.

1750
01:52:13,600 --> 01:52:14,000
Right.

1751
01:52:14,500 --> 01:52:17,900
So now what we need to do is essentially do that same thing but for

1752
01:52:18,000 --> 01:52:18,700
inputs.

1753
01:52:18,900 --> 01:52:22,800
So instead of relying on opengl to give us the vertex position and the

1754
01:52:22,800 --> 01:52:26,500
vertex coordinate of the and the UV coordinates, right?

1755
01:52:26,900 --> 01:52:31,600
And the color, what we want to do is we want to specify those, right?

1756
01:52:31,600 --> 01:52:34,300
So we want to say that we're going to get a veck for.

1757
01:52:34,700 --> 01:52:35,000
That's the

1758
01:52:35,200 --> 01:52:37,200
Vert, you know, position or whatever.

1759
01:52:37,300 --> 01:52:38,800
We want to get a victim too.

1760
01:52:39,300 --> 01:52:44,400
That's the vert UV and we want to get a veck for that's the color.

1761
01:52:49,200 --> 01:52:49,700
Right?

1762
01:52:49,800 --> 01:52:52,500
So we want these as inputs to our Shader.

1763
01:52:53,400 --> 01:52:56,900
And then instead of using something like GL vertex, we're going to

1764
01:52:56,900 --> 01:52:58,400
just use like vert P.

1765
01:52:59,900 --> 01:53:03,500
So we're no longer asking the fixed function pipeline for anything.

1766
01:53:03,600 --> 01:53:07,100
We're going entirely our own programmable route, right?

1767
01:53:13,900 --> 01:53:17,000
So now, the fixed function pipeline is not referenced anywhere.

1768
01:53:17,400 --> 01:53:21,500
The only thing that we do is the GL position is being used here.

1769
01:53:21,500 --> 01:53:26,000
Because again, that is a part that remains fixed function, even in the

1770
01:53:26,000 --> 01:53:30,900
most modern graphics cards, you can possibly by rasterization is just

1771
01:53:30,900 --> 01:53:34,900
simply not programmable yet, so that is still fixed function, the

1772
01:53:34,900 --> 01:53:37,400
blend unit and rasterization are still fixed function.

1773
01:53:37,400 --> 01:53:38,600
And probably will remain.

1774
01:53:38,600 --> 01:53:42,500
So, for a while, I imagine maybe rasterization not but

1775
01:53:43,400 --> 01:53:45,300
Ending, you know is is rough.

1776
01:53:46,900 --> 01:53:50,700
Anyway, there's a bunch of reasons why blending is kind of special,

1777
01:53:50,800 --> 01:53:54,600
it's because of the multi-threaded synchronization necessary to make

1778
01:53:54,600 --> 01:53:55,100
it all work.

1779
01:53:55,100 --> 01:53:58,500
Fast is, it's a bit dicey to make it programmable anyway.

1780
01:53:59,600 --> 01:53:59,800
So

1781
01:54:00,300 --> 01:54:03,100
if we go ahead and say and I shouldn't say that program will

1782
01:54:05,700 --> 01:54:06,500
Make it.

1783
01:54:08,200 --> 01:54:11,100
Eventually, it probably could be more programmable but it would still

1784
01:54:11,100 --> 01:54:12,600
have to be very fixed function.

1785
01:54:12,600 --> 01:54:15,100
It would have to look like shaders where they're kind of like

1786
01:54:15,500 --> 01:54:17,900
interleaved and understand what that things aren't.

1787
01:54:18,300 --> 01:54:18,900
That doesn't matter.

1788
01:54:19,800 --> 01:54:21,500
Your honor anyway.

1789
01:54:21,800 --> 01:54:26,600
So what we want to do here is say let's take these attributes and get

1790
01:54:26,600 --> 01:54:31,400
their locations, just like we did with the texture, sampler ID, the

1791
01:54:31,400 --> 01:54:32,600
transfer Mighty that sort of stuff.

1792
01:54:33,100 --> 01:54:34,500
So what we want to do is say

1793
01:54:36,600 --> 01:54:37,400
PID.

1794
01:54:39,200 --> 01:54:41,000
A triplication hoping.

1795
01:54:41,000 --> 01:54:42,600
She'll basic see bias program.

1796
01:54:44,700 --> 01:54:45,300
Burpee.

1797
01:54:47,500 --> 01:54:50,300
and then so we know we have vert UV invert, see

1798
01:54:54,400 --> 01:54:55,400
Brick color in this case.

1799
01:54:58,800 --> 01:55:03,800
And once we get those, then we will be able to talk about those inputs

1800
01:55:04,000 --> 01:55:07,500
specifically in the vertex Shader and feed them, right?

1801
01:55:07,900 --> 01:55:14,200
And so then when we do our enable vertex at Rib array, that sort of

1802
01:55:14,200 --> 01:55:16,000
stuff, I think.

1803
01:55:20,800 --> 01:55:21,700
I can't remember.

1804
01:55:22,500 --> 01:55:25,300
Do we need to do the enable or not?

1805
01:55:28,000 --> 01:55:30,900
I don't remember whether we need to do the enable or not but I think

1806
01:55:30,900 --> 01:55:31,300
we do.

1807
01:55:31,300 --> 01:55:36,500
So I'm just going to I'm sorry this is like I said, it's just it's

1808
01:55:36,500 --> 01:55:39,800
very weird the way this opengl stuff works.

1809
01:55:45,400 --> 01:55:46,600
Oh well, you know what?

1810
01:55:47,900 --> 01:55:49,600
I can just assign them to the variables.

1811
01:55:49,600 --> 01:55:50,300
I've already got

1812
01:56:00,500 --> 01:56:02,900
Okay, and so now you can sort of see what's happening here.

1813
01:56:03,100 --> 01:56:06,000
What we're doing is we're saying, all right, we know that this Shader

1814
01:56:06,000 --> 01:56:07,600
is expecting a bunch of inputs.

1815
01:56:08,000 --> 01:56:10,900
We're going to get those inputs by asking the Shader compiler.

1816
01:56:10,900 --> 01:56:11,700
Essentially.

1817
01:56:11,900 --> 01:56:12,900
Where did you put them?

1818
01:56:12,900 --> 01:56:15,100
Like, how did you assign them right?

1819
01:56:15,400 --> 01:56:17,400
And then we're telling opengl, here's the pointers.

1820
01:56:17,400 --> 01:56:19,900
We want you to grab for those, right?

1821
01:56:21,600 --> 01:56:26,300
Okay, so now we just need to actually get these functions, right?

1822
01:56:26,300 --> 01:56:29,400
You can see well I guess I have to Define these as well.

1823
01:56:42,600 --> 01:56:45,600
But we just need these functions that were actually using here and

1824
01:56:45,600 --> 01:56:47,500
those functions have to exist.

1825
01:56:47,500 --> 01:56:52,100
We also will have to do one other thing, which is that.

1826
01:56:52,100 --> 01:56:54,600
If you take a look at what's going on here, we're still drawing using

1827
01:56:54,600 --> 01:56:58,200
the fixed function pipeline, which is not what we want to do again.

1828
01:56:58,200 --> 01:56:59,300
Instead of this

1829
01:57:08,300 --> 01:57:09,700
What we actually want to do here?

1830
01:57:10,400 --> 01:57:14,100
Is we want to do one of those deal dry erase calls.

1831
01:57:17,800 --> 01:57:20,500
And in order to do that again, we need.

1832
01:57:20,500 --> 01:57:25,600
So now that we specified our vertex base here, we need to basically

1833
01:57:25,600 --> 01:57:26,200
say, well.

1834
01:57:26,500 --> 01:57:30,600
Alright, what vertex would we be drawing?

1835
01:57:31,600 --> 01:57:34,400
And I guess this, I can also sort of put inside here.

1836
01:57:47,200 --> 01:57:48,500
That would be right there.

1837
01:57:50,600 --> 01:57:52,700
So, that is doing the vertices piece mail.

1838
01:57:52,700 --> 01:57:56,400
In this case, we just need to specify sort of an index.

1839
01:57:56,400 --> 01:57:59,000
In fact, I guess what I could do is turn this into.

1840
01:58:01,300 --> 01:58:02,100
Let's do this.

1841
01:58:07,000 --> 01:58:09,500
In fact, these could both be the same.

1842
01:58:11,300 --> 01:58:13,600
Let me do one more transform on this first.

1843
01:58:17,100 --> 01:58:18,400
Let's do an if one here.

1844
01:58:19,800 --> 01:58:21,600
And I'm going to F0 out these guys.

1845
01:58:31,500 --> 01:58:33,200
Because I want both these past to work.

1846
01:58:34,900 --> 01:58:35,700
So,

1847
01:58:46,300 --> 01:58:47,100
Go and run that.

1848
01:58:48,200 --> 01:58:48,600
Oh dear.

1849
01:58:51,200 --> 01:58:51,500
oh,

1850
01:58:54,800 --> 01:58:55,300
Right.

1851
01:58:55,300 --> 01:58:58,100
I can't run both pass because I changed the name in the Shader.

1852
01:58:58,500 --> 01:59:04,500
All right so yeah can't test that never mind I wanted to but can't

1853
01:59:09,400 --> 01:59:10,000
That's right.

1854
01:59:10,000 --> 01:59:10,600
We can just do it.

1855
01:59:10,600 --> 01:59:11,000
Blind.

1856
01:59:14,200 --> 01:59:15,100
all right, so

1857
01:59:18,500 --> 01:59:20,000
the other transformation I want to do at it.

1858
01:59:20,000 --> 01:59:21,100
Here was just say, alright?

1859
01:59:21,100 --> 01:59:23,700
So we're going to do quad index here.

1860
01:59:24,800 --> 01:59:30,200
And so in order to do this quite a next thing, what I actually wanted

1861
01:59:30,200 --> 01:59:36,100
to say was what if we just said, we know what the max vertex count is

1862
01:59:36,700 --> 01:59:37,300
or rather?

1863
01:59:37,300 --> 01:59:42,400
I should say, we know what the starting vertex is because it's the

1864
01:59:42,400 --> 01:59:44,400
vertex array offset, right?

1865
01:59:45,500 --> 01:59:48,100
So what I was thinking is we could just say, hey,

1866
01:59:48,300 --> 01:59:52,700
Hey, what if instead of quad index we just did vert index.

1867
01:59:52,700 --> 01:59:59,200
Here, we started at the vertex array offset because that is exactly

1868
01:59:59,200 --> 01:59:59,800
what that is.

1869
02:00:00,600 --> 02:00:04,200
And then we ended at the vertex array offset.

1870
02:00:06,400 --> 02:00:08,100
Plus 4 times the quad count.

1871
02:00:09,800 --> 02:00:10,300
Right?

1872
02:00:10,500 --> 02:00:12,100
Then we get rid of these two.

1873
02:00:14,200 --> 02:00:17,700
And in here where we want to get the bitmap, we just we're just

1874
02:00:17,700 --> 02:00:19,700
accident directly, right?

1875
02:00:19,800 --> 02:00:23,400
So, it's just whatever the vertex index is shifted down by two.

1876
02:00:28,600 --> 02:00:30,600
And this one is whatever the vertex index is.

1877
02:00:32,400 --> 02:00:37,300
So basically those two just come out directly and they don't have to

1878
02:00:37,300 --> 02:00:38,900
be fussed with at all.

1879
02:00:41,100 --> 02:00:46,100
Okay, so this stuff can now get put into this vert at.

1880
02:00:46,100 --> 02:00:47,400
Doesn't need to be updated.

1881
02:00:48,600 --> 02:00:53,500
So this stuff can now just go inside the the quads version.

1882
02:00:53,800 --> 02:00:58,500
It's in case we ever want to try to put that case back together and

1883
02:00:58,500 --> 02:01:01,600
then we now have the drawer raised version can be much simpler.

1884
02:01:01,600 --> 02:01:06,900
It can just say you know GL quads which again I don't know if we can

1885
02:01:06,900 --> 02:01:08,300
actually support properly.

1886
02:01:08,700 --> 02:01:10,500
I don't know if it'll support our quiet, it's so far.

1887
02:01:10,500 --> 02:01:10,700
It's been

1888
02:01:10,900 --> 02:01:13,700
Happy to do quads for us so I assume we can but I don't actually know

1889
02:01:14,400 --> 02:01:18,800
but then we've got the offset which is just going to be that vert

1890
02:01:18,800 --> 02:01:22,600
index and then I think the Primitive count is all we need.

1891
02:01:26,600 --> 02:01:26,900
Oh no.

1892
02:01:26,900 --> 02:01:30,100
Sorry is the actually the number of indices.

1893
02:01:31,800 --> 02:01:33,200
Did you do?

1894
02:01:39,500 --> 02:01:44,100
Yeah, so I'm pretty sure all we need to do here is then just say when

1895
02:01:44,100 --> 02:01:47,400
we do our GL draw risk, all we know we're just submitting one quad at

1896
02:01:47,400 --> 02:01:51,800
a time and so we just called yellow draw are raised for the GL quads,

1897
02:01:52,700 --> 02:01:53,300
right?

1898
02:01:53,600 --> 02:01:54,900
And I think that's basically it.

1899
02:01:55,500 --> 02:01:57,900
Now we just have to get those opengl calls.

1900
02:02:01,400 --> 02:02:03,700
And also I was a little overzealous there.

1901
02:02:03,700 --> 02:02:05,900
The bitmap still needs to be accessed regardless.

1902
02:02:24,000 --> 02:02:24,400
We are.

1903
02:02:25,300 --> 02:02:28,600
And now we just need to get the opengl calls that we need, for this,

1904
02:02:28,600 --> 02:02:30,500
which is enabled.

1905
02:02:30,500 --> 02:02:35,000
Disabled, actor, pointer and a trip location.

1906
02:02:36,100 --> 02:02:39,800
So I will go ahead and get the core ARB header out.

1907
02:02:53,900 --> 02:02:57,800
And B bump over to the win32 side of things.

1908
02:03:01,200 --> 02:03:04,400
Yeah, and I'll just put these guys in there.

1909
02:03:04,400 --> 02:03:05,500
So, let's see.

1910
02:03:05,600 --> 02:03:09,300
Get active uniform and of this, that's not what we want.

1911
02:03:09,400 --> 02:03:16,000
We want to Sable vertex that River, Ray, get a trip location.

1912
02:03:19,900 --> 02:03:21,700
And attrib pointer.

1913
02:03:32,600 --> 02:03:33,300
There it is.

1914
02:03:39,400 --> 02:03:40,100
All right.

1915
02:03:55,300 --> 02:04:00,200
So I do also think maybe based on how many of these we have.

1916
02:04:00,200 --> 02:04:05,200
I feel like I could have saved myself, probably a lot of time at the,

1917
02:04:05,200 --> 02:04:08,600
you know, at the very least by not using the complete.

1918
02:04:12,800 --> 02:04:14,100
by not using the, like,

1919
02:04:15,200 --> 02:04:22,100
Complete lower lower case of occasion, for lack of a better term.

1920
02:04:25,600 --> 02:04:28,000
right, because it's probably just easier to do something like

1921
02:04:31,600 --> 02:04:37,200
That just saves a lot of typing and similarly when you've got stuff

1922
02:04:37,200 --> 02:04:42,000
like this, you know, you can you could automate it a little bit more

1923
02:04:42,700 --> 02:04:44,500
so I might sort of switch over to that.

1924
02:04:51,300 --> 02:04:51,800
Breakers.

1925
02:04:51,800 --> 02:04:52,900
Let's say we did this.

1926
02:05:06,800 --> 02:05:09,600
Something like this and then we just have the name of it.

1927
02:05:10,000 --> 02:05:13,800
We know what the format of that would be it's just going to be Global

1928
02:05:13,800 --> 02:05:14,500
variable.

1929
02:05:15,900 --> 02:05:20,100
Type underscore the name and then the pointer.

1930
02:05:21,600 --> 02:05:28,600
Name like so that seems like a lot better, right?

1931
02:05:30,300 --> 02:05:33,400
so if we were to do something like this, then what we can do is just

1932
02:05:33,400 --> 02:05:33,900
say

1933
02:05:39,800 --> 02:05:41,200
Oh, Geo Global function.

1934
02:05:44,400 --> 02:05:46,700
I might as well have opened a little that?

1935
02:06:01,000 --> 02:06:03,700
And you could even go a little bit more ridiculous with this, right?

1936
02:06:05,100 --> 02:06:08,700
You could use a pound include.

1937
02:06:08,700 --> 02:06:11,700
You could use it include file that had these listed and do some macro

1938
02:06:11,700 --> 02:06:15,700
tricks to make it even fancier if you wanted to add I'm not inclined

1939
02:06:15,700 --> 02:06:18,600
to go that far but you know we could.

1940
02:06:19,500 --> 02:06:22,000
So if we have something like this right?

1941
02:06:22,000 --> 02:06:24,000
Then what we can do is

1942
02:06:26,000 --> 02:06:30,700
same thing can be true down here, so we could do a pound to find like

1943
02:06:34,700 --> 02:06:42,000
three to get opengl function name and when we've got one of these, we

1944
02:06:42,000 --> 02:06:48,400
would just say, like okay, the name equals type name

1945
02:06:50,700 --> 02:06:52,500
Get proc address string eyes name.

1946
02:06:54,900 --> 02:06:59,200
And off you go and so you can just do win32 open, get up and she'll

1947
02:06:59,200 --> 02:07:01,300
function and just put the names in.

1948
02:07:03,600 --> 02:07:06,100
So I probably should have done that to begin with I just always

1949
02:07:06,100 --> 02:07:07,700
thought like, oh, we're just doing a couple of these.

1950
02:07:07,700 --> 02:07:10,900
I won't think too hard about it, but, you know, eventually we ended up

1951
02:07:10,900 --> 02:07:13,000
deciding to use the full opengl pipeline stuff.

1952
02:07:13,000 --> 02:07:17,300
And so at that point, it becomes a bunch of typing.

1953
02:07:17,300 --> 02:07:20,200
If you don't actually take a second to save yourself, some of it.

1954
02:07:21,000 --> 02:07:24,600
So, you know, maybe we can convert those over at some point into it,

1955
02:07:24,600 --> 02:07:26,300
just to be a little bit more consistent.

1956
02:07:27,600 --> 02:07:30,100
Anyway, let's go ahead and start to bugging this.

1957
02:07:30,100 --> 02:07:31,500
Well, that's just lovely.

1958
02:07:31,700 --> 02:07:32,800
I think everyone can agree.

1959
02:07:32,900 --> 02:07:34,500
See that, that looks fantastic.

1960
02:07:37,400 --> 02:07:40,900
Amusingly it's sort of works, which that's not.

1961
02:07:40,900 --> 02:07:41,900
I usually expect.

1962
02:07:41,900 --> 02:07:45,400
When I do a change like that, more of like it's a black screen or

1963
02:07:45,400 --> 02:07:46,100
something, right?

1964
02:07:46,800 --> 02:07:47,900
But in this case, it's not.

1965
02:07:48,800 --> 02:07:50,300
So anyway, let's see what we've got here.

1966
02:07:50,300 --> 02:07:54,800
We probably just have a few mistakes in terms of how we're setting up

1967
02:07:54,800 --> 02:07:55,800
our specification.

1968
02:07:56,500 --> 02:07:58,600
So let's go ahead and take a look.

1969
02:07:58,600 --> 02:08:01,000
I'm going to flip this around so I can read the part.

1970
02:08:01,000 --> 02:08:04,700
I actually care about at the top instead of at the bottom.

1971
02:08:07,400 --> 02:08:07,900
There we go.

1972
02:08:09,000 --> 02:08:14,600
So we have our vertex index here and we're starting with index 0 and

1973
02:08:14,600 --> 02:08:19,000
we're going to whatever the, you know, four times the quad count

1974
02:08:19,000 --> 02:08:19,900
number of vertices.

1975
02:08:19,900 --> 02:08:24,400
Oh, that's supposed to be going up by 4's.

1976
02:08:28,300 --> 02:08:30,800
Hey look, that was a lot better than I thought.

1977
02:08:31,600 --> 02:08:36,200
We're not getting any texture coordinates or textures, but we're

1978
02:08:36,200 --> 02:08:36,900
getting close.

1979
02:08:38,300 --> 02:08:40,700
All right, so let's see what else we've got here.

1980
02:08:42,000 --> 02:08:45,100
Maybe our UV array is messed up or something like this.

1981
02:08:45,100 --> 02:08:46,800
We are pointing to the correct offset.

1982
02:08:46,800 --> 02:08:49,000
It looks like in this case.

1983
02:08:49,000 --> 02:08:51,500
We've got the UV rays to floats.

1984
02:08:51,500 --> 02:08:52,600
It's not normalized.

1985
02:08:52,600 --> 02:08:55,800
It's the right size so that all looks pretty good.

1986
02:08:56,500 --> 02:08:57,900
When we're binding the texture here,

1987
02:08:58,000 --> 02:08:59,900
Here, we're presuming.

1988
02:09:00,000 --> 02:09:01,100
Finding the right texture.

1989
02:09:01,100 --> 02:09:06,600
It's the vertex index shifted down by two, which I think is exactly

1990
02:09:06,600 --> 02:09:09,500
what we'd expect it to because that's where it would have to be.

1991
02:09:11,600 --> 02:09:15,000
I don't see any way that could not be right unless I'm missing

1992
02:09:15,000 --> 02:09:15,500
something.

1993
02:09:16,600 --> 02:09:21,500
So let me take a quick look to make sure we are enabling it to right.

1994
02:09:22,400 --> 02:09:24,500
Yeah let's make a quick check here.

1995
02:09:24,900 --> 02:09:29,800
We've got vert, you VI D is getting very VI D out of the basic.

1996
02:09:30,300 --> 02:09:31,400
Z bias program.

1997
02:09:31,800 --> 02:09:32,800
Let's see what's going on there.

1998
02:09:35,600 --> 02:09:36,400
That's the problem.

1999
02:09:38,500 --> 02:09:40,600
The ID was on the end, shouldn't have been.

2000
02:09:42,700 --> 02:09:46,900
Okay, so now we're in a good place here.

2001
02:09:46,900 --> 02:09:50,300
Now we're actually using pretty much none of the fixed function

2002
02:09:50,300 --> 02:09:54,700
pipeline along that path, which is nice and we're drawing everything

2003
02:09:54,700 --> 02:09:55,400
that we want to draw.

2004
02:09:55,400 --> 02:10:00,200
So now we're drawing using the GL arrays call, and that's a better

2005
02:10:00,900 --> 02:10:04,100
again, stepping stone to getting us completely off of the fixed

2006
02:10:04,100 --> 02:10:04,800
function pipeline.

2007
02:10:04,800 --> 02:10:06,200
So, if you take a look at what's happening.

2008
02:10:06,200 --> 02:10:11,600
Now, in here, again, the number of calls to opengl has been

2009
02:10:11,600 --> 02:10:12,400
drastically reduced,

2010
02:10:12,500 --> 02:10:15,800
Used, even though we're still not at the point where we're hands-free

2011
02:10:15,800 --> 02:10:18,600
or anything, it's much closer.

2012
02:10:18,700 --> 02:10:19,300
So you can see.

2013
02:10:19,300 --> 02:10:21,700
Now we make just a few calls here.

2014
02:10:21,700 --> 02:10:23,700
We make about nine calls, like one here.

2015
02:10:23,700 --> 02:10:25,300
Here, here, here, here, here.

2016
02:10:25,300 --> 02:10:26,600
And then here, here here, right?

2017
02:10:26,800 --> 02:10:31,000
So, make those nine calls to set things up, and we make three calls to

2018
02:10:31,000 --> 02:10:31,600
shut down.

2019
02:10:31,600 --> 02:10:34,600
I'm sorry for calls to shut down, which we could probably save some of

2020
02:10:34,600 --> 02:10:35,900
those we wanted to amortize.

2021
02:10:35,900 --> 02:10:39,800
But yeah, and then remember like our numbers in here whereas 121 and

2022
02:10:39,800 --> 02:10:40,700
then 3000.

2023
02:10:40,800 --> 02:10:42,300
So these calls

2024
02:10:42,400 --> 02:10:44,300
Are very minimal they hardly ever happened.

2025
02:10:44,300 --> 02:10:46,500
They only happened twice per frame so we don't even really care about

2026
02:10:46,500 --> 02:10:46,800
those.

2027
02:10:47,000 --> 02:10:49,400
So, all we care about is really inside this Loop.

2028
02:10:49,500 --> 02:10:51,500
And so we went from calling opengl

2029
02:10:53,400 --> 02:11:04,100
1 2 3 4 5 6 7 8 9 10 11 12, 13 14, 15 times per quod to calling it

2030
02:11:04,100 --> 02:11:10,000
twice for quad once with the texture and once for the instruction to

2031
02:11:10,000 --> 02:11:11,700
render one quad, right?

2032
02:11:12,800 --> 02:11:15,900
And so, what you can see, is we've gotten down to a really good place

2033
02:11:15,900 --> 02:11:17,900
for us by comparison.

2034
02:11:17,900 --> 02:11:22,000
But like I said, we would like to do much better than this, right?

2035
02:11:22,200 --> 02:11:25,900
Like what we would like to do is be able to just set those set in a

2036
02:11:26,000 --> 02:11:29,800
those two arrays, all the vertices and all because we know that

2037
02:11:29,800 --> 02:11:30,900
they're all quads.

2038
02:11:31,500 --> 02:11:36,500
All the vertices in that one buffer, all the texture for another we'd

2039
02:11:36,500 --> 02:11:40,100
like to just say go, but like I said, I don't think we can really do

2040
02:11:40,100 --> 02:11:42,400
that in this case.

2041
02:11:43,700 --> 02:11:46,600
And the reason for that is just because there's no way to use like

2042
02:11:46,600 --> 02:11:51,800
multiple bitmap pointers in a way that works across all cards.

2043
02:11:52,600 --> 02:11:57,300
But now that we've done that, we can also just sort of get rid of this

2044
02:11:57,300 --> 02:11:58,100
stuff here.

2045
02:11:59,600 --> 02:11:59,800
Tire.

2046
02:12:00,000 --> 02:12:01,400
This is no longer necessary.

2047
02:12:03,200 --> 02:12:06,000
And this becomes a pretty nice little function, right?

2048
02:12:06,200 --> 02:12:08,500
And like I said this, it would just be nice if we could get rid of

2049
02:12:08,500 --> 02:12:13,600
this Loop, but we can't really get rid of that Loop without a bunch of

2050
02:12:14,000 --> 02:12:17,400
without without using some kind of extended opengl.

2051
02:12:18,800 --> 02:12:22,200
All right, let's go for to a brief Q&A now.

2052
02:12:28,600 --> 02:12:29,000
Oops.

2053
02:12:32,000 --> 02:12:32,400
There we go.

2054
02:12:50,700 --> 02:12:51,600
Kim Jorgensen.

2055
02:12:51,600 --> 02:12:53,500
Would it be better to expose an opengl?

2056
02:12:53,500 --> 02:12:56,900
Get proc address method in the platform layer and do the lookups in

2057
02:12:56,900 --> 02:12:58,600
the handmade opengl layer.

2058
02:13:02,100 --> 02:13:04,100
So it depends on what you mean by better.

2059
02:13:05,900 --> 02:13:07,200
Unfortunately.

2060
02:13:14,000 --> 02:13:18,500
I guess what I would say is unfortunately the term better in this case

2061
02:13:18,900 --> 02:13:22,900
is depends on what you're aiming to do.

2062
02:13:23,200 --> 02:13:27,300
If you're trying to be more cross-platform than no, it's not better.

2063
02:13:27,500 --> 02:13:30,600
And the reason for that is some platforms already have a bunch of

2064
02:13:30,600 --> 02:13:34,700
these things built in and don't allow you to do a get proc address

2065
02:13:34,700 --> 02:13:35,800
call to get them.

2066
02:13:36,400 --> 02:13:37,100
Right.

2067
02:13:37,500 --> 02:13:40,000
And so on those platforms, it would all break.

2068
02:13:41,500 --> 02:13:47,900
I however you could use a macro and that might be okay because then

2069
02:13:47,900 --> 02:13:52,900
that macro would just just do it like at equal like this function

2070
02:13:52,900 --> 02:13:54,800
pointer equals itself kind of a thing.

2071
02:13:58,400 --> 02:14:01,700
So I would say, yeah, probably not exposing the get proc address call

2072
02:14:01,700 --> 02:14:05,200
but you could expose a macro and have that be included and then it

2073
02:14:05,200 --> 02:14:08,000
would probably be better because then the platform layers don't have

2074
02:14:08,000 --> 02:14:12,800
to duplicate it for ones that do have to do the get proc address, that

2075
02:14:12,800 --> 02:14:13,500
makes sense.

2076
02:14:22,400 --> 02:14:26,000
Val bus, we will use, I guess.

2077
02:14:26,200 --> 02:14:30,200
We'll, we use vertex buffer objects at index 0 for objects, in that

2078
02:14:30,200 --> 02:14:30,600
case.

2079
02:14:30,700 --> 02:14:34,700
Do you prefer using GL buffer data to send the data into the buffer or

2080
02:14:34,700 --> 02:14:37,100
using map before unmapped buffer to send the data?

2081
02:14:38,800 --> 02:14:44,100
So it the answer that question is, it depends at this point?

2082
02:14:44,200 --> 02:14:51,100
No, there's no point in US using vertex buffer, objects or index,

2083
02:14:51,100 --> 02:14:51,800
buffer objects.

2084
02:14:52,200 --> 02:14:55,100
First of all index, buffer objects we definitely don't need and would

2085
02:14:55,100 --> 02:14:59,300
never need as far as I know, because our vertex data is unique per

2086
02:14:59,300 --> 02:14:59,800
quod.

2087
02:15:00,400 --> 02:15:03,700
So we save Nothing by using index, a indices.

2088
02:15:04,400 --> 02:15:10,200
If we had shared vertex data ever then, an index tougher, makes a lot

2089
02:15:10,200 --> 02:15:11,600
of sense, obviously.

2090
02:15:12,400 --> 02:15:14,900
So index, buffers, not not something.

2091
02:15:14,900 --> 02:15:19,700
We need vertex buffers on the other hand would be something we needed.

2092
02:15:21,200 --> 02:15:24,700
If we weren't still having to make one call per quod, since we're at

2093
02:15:24,700 --> 02:15:27,300
the point right now, where we have to make one call per quad, which is

2094
02:15:27,300 --> 02:15:28,700
not good at all, right?

2095
02:15:28,700 --> 02:15:30,000
You do not want to do that.

2096
02:15:34,200 --> 02:15:38,100
Going to something like vertex, buffer objects in order to save some

2097
02:15:38,200 --> 02:15:43,100
additional performance time in terms of how things are specified down

2098
02:15:43,100 --> 02:15:43,800
to the card.

2099
02:15:44,000 --> 02:15:47,200
Just doesn't make a whole lot of sense because we're already too.

2100
02:15:47,200 --> 02:15:48,600
We're already way too slow.

2101
02:15:48,600 --> 02:15:52,800
Because of this stuff here, probably to care about something.

2102
02:15:52,800 --> 02:15:57,600
Like when the copy happens of the vertex data but

2103
02:15:59,000 --> 02:16:02,100
If we wanted to do a path at some point that actually took advantage

2104
02:16:02,100 --> 02:16:07,400
of by endless textures, for example, then absolutely vertex buffers

2105
02:16:07,600 --> 02:16:09,900
would be the way to go because we just put everything in the vertex

2106
02:16:09,900 --> 02:16:10,500
buffer.

2107
02:16:11,200 --> 02:16:15,200
And then have the drift dispatch call, go and we'd never have really

2108
02:16:15,200 --> 02:16:18,100
any driver stuff happening at all, which would be great.

2109
02:16:19,100 --> 02:16:21,900
To answer your question about Matt buffer unmapped buffer versus GL,

2110
02:16:21,900 --> 02:16:24,000
buffer data, the answer.

2111
02:16:24,000 --> 02:16:27,100
There is it depends entirely on your circumstance.

2112
02:16:28,700 --> 02:16:32,799
You need to test the two and find out which one's faster in some

2113
02:16:32,799 --> 02:16:35,799
circumstances map unmapped buffer should be faster because it can

2114
02:16:35,799 --> 02:16:40,000
avoid an additional copy in other cases map on Matt buffer will not be

2115
02:16:40,000 --> 02:16:44,500
as fast because the driver has to synchronize at that point to give

2116
02:16:44,500 --> 02:16:47,100
you memory that it can use.

2117
02:16:47,799 --> 02:16:52,200
And so it depends a lot on how you're doing it now, keep in mind that

2118
02:16:52,200 --> 02:16:56,700
there are new apis, in a zdo that allow you to map a buffer and leave

2119
02:16:56,700 --> 02:16:57,700
the buffer mapped,

2120
02:16:59,299 --> 02:17:03,700
And that is probably going to be the fastest thing eventually but the

2121
02:17:03,700 --> 02:17:06,799
extent to which drivers support it and it works well.

2122
02:17:06,799 --> 02:17:07,799
I don't know yet.

2123
02:17:08,799 --> 02:17:15,600
I do use it on our code at Molly rocket right now, but I haven't like

2124
02:17:15,600 --> 02:17:20,100
shift that platform layer out to anyone but myself, so I don't really

2125
02:17:20,100 --> 02:17:21,700
know if it's something you can trust on.

2126
02:17:30,299 --> 02:17:34,000
Robbie we use for a coder in full Window mode for Ed minus F in the

2127
02:17:34,000 --> 02:17:34,500
future.

2128
02:17:34,799 --> 02:17:37,600
I don't think I knew that there was a full Window mode.

2129
02:17:39,700 --> 02:17:41,500
But it sounds like something I would like.

2130
02:17:48,000 --> 02:17:49,299
Is this, you know what?

2131
02:17:49,299 --> 02:17:54,100
I'm on 4010 here though, is that something that got added?

2132
02:17:56,799 --> 02:17:58,400
Is there a command line reference?

2133
02:17:58,400 --> 02:17:58,600
I don't know.

2134
02:17:58,600 --> 02:17:59,799
There is I may have to

2135
02:18:00,000 --> 02:18:01,700
82, latest version of for coder.

2136
02:18:04,900 --> 02:18:05,799
Hold that thought.

2137
02:18:16,000 --> 02:18:21,100
Let's do that by moving, the construction of the vertex array to the

2138
02:18:21,100 --> 02:18:21,700
render group.

2139
02:18:21,700 --> 02:18:24,100
We kind of missed the opportunity of writing.

2140
02:18:24,100 --> 02:18:26,400
The quads directly into driver owned memory.

2141
02:18:26,600 --> 02:18:27,500
Is that statement correct?

2142
02:18:27,500 --> 02:18:27,799
If so?

2143
02:18:27,799 --> 02:18:28,500
Is that a problem?

2144
02:18:28,700 --> 02:18:30,500
No, that statement is not correct.

2145
02:18:30,500 --> 02:18:35,299
That is in fact, what you're getting out there is exactly why I

2146
02:18:35,299 --> 02:18:35,799
structured it.

2147
02:18:35,799 --> 02:18:37,000
The way that I did.

2148
02:18:37,500 --> 02:18:43,500
So what you'll notice here is, I was very careful when we did that

2149
02:18:43,500 --> 02:18:44,500
part of the code.

2150
02:18:45,400 --> 02:18:50,900
Platform layer to enable that kind of optimization if one, we're so

2151
02:18:50,900 --> 02:18:51,600
inclined.

2152
02:18:52,299 --> 02:18:54,000
I don't know that we will be so inclined.

2153
02:18:54,400 --> 02:18:56,500
But here, you can see the game render commands.

2154
02:18:57,299 --> 02:19:00,000
And as you can see, the textured vertex, array is a pointer in the

2155
02:19:00,000 --> 02:19:01,000
game render commands.

2156
02:19:01,299 --> 02:19:07,500
All we do in render group is right into this address, right?

2157
02:19:07,600 --> 02:19:11,700
So you can see that, you know, all we care about inside the render

2158
02:19:12,299 --> 02:19:15,100
actual code, that's in the platform Independence.

2159
02:19:15,299 --> 02:19:18,700
Side is that we have that pointer and we're writing into that pointer.

2160
02:19:19,100 --> 02:19:19,500
Okay?

2161
02:19:20,200 --> 02:19:25,500
That pointer comes from the the win32 side, right?

2162
02:19:25,500 --> 02:19:28,299
So in here we've got

2163
02:19:30,100 --> 02:19:34,000
This code at startup creates that buffer that's being used.

2164
02:19:34,600 --> 02:19:39,100
So, if we want to in the future, right directly into a hardware back

2165
02:19:39,100 --> 02:19:42,900
buffer, all we have to do is make this code right here.

2166
02:19:42,900 --> 02:19:45,500
Call opengl to get us the buffer, that's it.

2167
02:19:46,600 --> 02:19:49,600
all the rest of our render code is already set up, to do exactly what

2168
02:19:49,600 --> 02:19:54,600
you're talking about which is right directly in to the

2169
02:19:57,300 --> 02:19:59,000
coding question, right?

2170
02:20:08,800 --> 02:20:10,300
Kim Jorgensen couldn't opengl.

2171
02:20:10,300 --> 02:20:10,900
Get proc address.

2172
02:20:10,900 --> 02:20:13,600
Just return the method directly on some platforms using string look

2173
02:20:13,600 --> 02:20:13,900
up.

2174
02:20:14,400 --> 02:20:15,100
Yeah, it could.

2175
02:20:15,100 --> 02:20:19,000
But then now you haven't saved yourself, any typing right now, you

2176
02:20:19,000 --> 02:20:23,300
have to type in all of the strings somehow and all of their mappings

2177
02:20:23,300 --> 02:20:26,500
which is a function, which is exactly what you were trying to avoid,

2178
02:20:26,800 --> 02:20:27,400
right?

2179
02:20:28,900 --> 02:20:33,700
So, you know, the idea of the only reason to do what you're talking

2180
02:20:33,700 --> 02:20:35,200
about is to save yourself typing.

2181
02:20:35,400 --> 02:20:37,900
So you have to make sure you do it in a way that doesn't create the

2182
02:20:37,900 --> 02:20:38,500
typing summer.

2183
02:20:38,600 --> 02:20:39,000
Else.

2184
02:20:39,100 --> 02:20:41,000
And I think doing a macro does do that, right?

2185
02:20:41,000 --> 02:20:44,700
So you could just say that while okay, the platform layer before it

2186
02:20:44,700 --> 02:20:49,000
includes opengl dot, CPP has two pound Define, like, function.

2187
02:20:49,000 --> 02:20:51,900
Look up as a macro and then the opengl layer.

2188
02:20:51,900 --> 02:20:56,200
Just does that and maybe that macro just Returns the same name.

2189
02:20:56,200 --> 02:20:57,900
It's passed directly.

2190
02:20:57,900 --> 02:20:59,800
So basically just like function pointer equals function.

2191
02:21:00,500 --> 02:21:01,000
Or it.

2192
02:21:01,000 --> 02:21:04,000
Expands it to we're going to get proc address parentheses open, quote,

2193
02:21:04,000 --> 02:21:05,600
blah, blah blah, right?

2194
02:21:06,700 --> 02:21:11,100
So we could absolutely do that, but I think that's the way to do it

2195
02:21:11,700 --> 02:21:13,800
because if you did it any other way, I think you'd end up in a

2196
02:21:13,800 --> 02:21:16,800
situation where some platforms just have to duplicate all the typing

2197
02:21:16,800 --> 02:21:20,600
that you were trying to get rid of in the first place.

2198
02:21:35,100 --> 02:21:36,700
Justin Myer.

2199
02:21:36,700 --> 02:21:39,700
Why not build one massive vertex, buffer and just draw that once,

2200
02:21:39,700 --> 02:21:41,000
that's exactly what we are doing.

2201
02:21:41,000 --> 02:21:46,400
We just build one massive vertex buffer, but the problem is, we have

2202
02:21:46,400 --> 02:21:51,000
no way in without being specific, as far as I know, anyway, without

2203
02:21:51,000 --> 02:21:54,800
being specific to certain graphics cards, that we can actually

2204
02:21:54,800 --> 02:21:58,400
dispatch the entire drawn one call, the reason for that is every quad

2205
02:21:58,400 --> 02:21:59,000
has a different texture.

2206
02:21:59,300 --> 02:22:02,300
So we need to set a different texture per quod, right?

2207
02:22:02,300 --> 02:22:05,100
So what you can do, if you really

2208
02:22:05,200 --> 02:22:08,200
They care about this and like I said, we would have to first find that

2209
02:22:08,200 --> 02:22:12,300
we actually had performance concerns that we needed to address before

2210
02:22:12,300 --> 02:22:13,100
we would do this.

2211
02:22:13,100 --> 02:22:17,300
But what you can do this is where texture Atlas is or Texture arrays

2212
02:22:17,300 --> 02:22:21,700
are things like that come into play where you start to do things like

2213
02:22:21,700 --> 02:22:25,500
packing things into a single texture so that you don't have to change

2214
02:22:25,500 --> 02:22:26,200
textures.

2215
02:22:29,200 --> 02:22:31,600
Inside primitive dispatch.

2216
02:22:32,000 --> 02:22:36,400
And again the it's stupid because a lot of cards don't need that.

2217
02:22:36,400 --> 02:22:41,300
A lot of cards don't need you to specify vertices to specify textures

2218
02:22:41,600 --> 02:22:42,300
outside of the batch.

2219
02:22:42,300 --> 02:22:46,100
They can specify textures inside the batch because it's just a piece

2220
02:22:46,100 --> 02:22:48,000
of data that's used during the texture.

2221
02:22:48,000 --> 02:22:51,100
Look up, which can just as easily come in as all the rest of the data,

2222
02:22:51,700 --> 02:22:55,100
but because that's just not true on all Hardware.

2223
02:22:55,100 --> 02:22:57,500
You end up in these six are some cases where the programmer has to do

2224
02:22:57,500 --> 02:22:58,800
a lot of extra work to get that.

2225
02:22:59,500 --> 02:23:02,900
Such as packing things into an atlas or a texture array because

2226
02:23:02,900 --> 02:23:06,500
atlases and texture arrays are not different textures right there, one

2227
02:23:06,500 --> 02:23:08,300
texture with the way of indexing into them.

2228
02:23:08,300 --> 02:23:11,200
And one case is the UVS, in case of the atlas, and the other case is

2229
02:23:11,200 --> 02:23:15,200
an index in case of the texture array, which allow you to basically

2230
02:23:15,400 --> 02:23:21,100
essentially specify a different texture / primitive by using something

2231
02:23:21,100 --> 02:23:23,300
that the cards can do for indexing.

2232
02:23:23,300 --> 02:23:24,300
That all cards can do

2233
02:23:51,400 --> 02:23:52,200
Jesse Mayer.

2234
02:23:52,200 --> 02:23:52,600
I see!

2235
02:23:52,600 --> 02:23:53,400
Thanks any chance!

2236
02:23:53,400 --> 02:23:56,600
We can see a render call stack from Insight or render doc just to see

2237
02:23:56,600 --> 02:23:57,900
what the driver has to work through.

2238
02:24:00,000 --> 02:24:02,700
Don't know if we can actually.

2239
02:24:06,200 --> 02:24:07,900
Get that working on this card.

2240
02:24:08,300 --> 02:24:10,400
I need to replace the graphics card in this machine.

2241
02:24:10,400 --> 02:24:11,600
It's very old.

2242
02:24:11,600 --> 02:24:12,700
It's not what I want.

2243
02:24:16,600 --> 02:24:22,600
I don't know if we can because it probably just won't work but we can

2244
02:24:22,600 --> 02:24:23,200
try.

2245
02:24:24,600 --> 02:24:25,900
Let's see.

2246
02:24:34,900 --> 02:24:40,200
If it works awesome but I just don't know if it will because this

2247
02:24:40,200 --> 02:24:42,900
graphics card is really old and I just don't know it.

2248
02:24:42,900 --> 02:24:47,200
You know, if these sorts of things can be finicky, if it works, that's

2249
02:24:47,200 --> 02:24:48,300
going to be awesome.

2250
02:24:49,600 --> 02:24:52,400
But I just don't know because it's great for debugging to which we've

2251
02:24:52,400 --> 02:24:53,200
been fortunate.

2252
02:24:53,300 --> 02:24:55,600
We've been careful and we haven't run into anything.

2253
02:24:55,600 --> 02:25:00,200
That was really hard to debug but you know, how do I get to the

2254
02:25:00,200 --> 02:25:00,800
downloads?

2255
02:25:00,800 --> 02:25:01,300
There we go.

2256
02:25:05,600 --> 02:25:09,200
But you know, that's just because well and we're you know, we're not

2257
02:25:09,200 --> 02:25:12,000
doing anything really complicated in the shaders or anything, right?

2258
02:25:13,300 --> 02:25:13,900
So

2259
02:25:38,300 --> 02:25:39,800
All right, so I usually use Insight.

2260
02:25:39,800 --> 02:25:45,000
I pretty much never have used render dock at all, but let's see here.

2261
02:25:51,100 --> 02:25:52,300
if I open it up,

2262
02:25:56,000 --> 02:25:57,100
See, if it does anything.

2263
02:26:03,000 --> 02:26:04,000
Thinking about it.

2264
02:26:04,500 --> 02:26:07,600
Alright, let's see here executable path.

2265
02:26:09,100 --> 02:26:12,500
Is w and made.

2266
02:26:14,900 --> 02:26:16,500
Oh wait, w build.

2267
02:26:18,000 --> 02:26:24,400
32, handmade the working directory is handmade data.

2268
02:26:25,900 --> 02:26:27,600
We don't need a command-line arguments.

2269
02:26:28,600 --> 02:26:33,200
So let's see what happens if we tell it to go.

2270
02:26:40,900 --> 02:26:44,100
Only opengl 3.2 plus contacts are supported.

2271
02:26:44,500 --> 02:26:51,200
That might be a problem since we don't create one of those, but we

2272
02:26:51,200 --> 02:26:52,200
could.

2273
02:26:53,100 --> 02:26:59,400
So if we came in here and change it to an opengl 3.2 context,

2274
02:27:00,000 --> 02:27:01,500
Probably could.

2275
02:27:08,700 --> 02:27:10,200
So, let's try that.

2276
02:27:17,500 --> 02:27:20,500
So maybe this is working, don't know.

2277
02:27:31,100 --> 02:27:32,800
Not seeing a lot here.

2278
02:27:50,100 --> 02:27:53,400
So yeah, I don't know, just to conclude that it's probably not going

2279
02:27:53,400 --> 02:27:54,400
to happen or what.

2280
02:27:55,900 --> 02:27:56,500
Let's see.

2281
02:27:57,500 --> 02:27:58,800
Oh, you press F12 to capture?

2282
02:27:58,800 --> 02:28:02,500
Okay, because I've never used this before, so I only ever use n site.

2283
02:28:04,700 --> 02:28:06,800
Oh, crash my program.

2284
02:28:11,300 --> 02:28:12,700
Where did it crash the program?

2285
02:28:21,500 --> 02:28:22,100
Okay.

2286
02:28:26,800 --> 02:28:29,400
Not sure what's going on here, folks.

2287
02:28:43,400 --> 02:28:43,900
There we go.

2288
02:28:45,700 --> 02:28:54,200
So we crash inside render doc render, Doc is jumping to null, so it's

2289
02:28:54,200 --> 02:28:55,100
trying to call.

2290
02:28:55,100 --> 02:29:01,700
You can see we get pretty deep down here, drilling for oil and then we

2291
02:29:01,700 --> 02:29:02,900
hit the zero.

2292
02:29:02,900 --> 02:29:10,700
And so this, this sausage gentleman right here, dispatch 2000.

2293
02:29:12,600 --> 02:29:17,800
So I don't know what that implies exactly.

2294
02:29:17,800 --> 02:29:22,300
That could be because again if this card doesn't support certain calls

2295
02:29:22,300 --> 02:29:26,000
that it needs or something, but there you go.

2296
02:29:29,700 --> 02:29:37,300
so the answer is no I guess you can't you can't see a driver call

2297
02:29:37,300 --> 02:29:39,000
stack but

2298
02:29:43,100 --> 02:29:43,500
Yeah.

2299
02:29:47,200 --> 02:29:47,500
That's the other.

2300
02:29:47,500 --> 02:29:48,200
Does the debug you?

2301
02:29:48,200 --> 02:29:48,700
I still work is.

2302
02:29:48,700 --> 02:29:51,100
So how does one actually we haven't done that yet?

2303
02:29:51,100 --> 02:29:52,600
No, it basically.

2304
02:29:52,600 --> 02:29:58,100
It's pretty much we'll just work but we have to go do the orthographic

2305
02:29:58,100 --> 02:29:59,700
transforms stuff.

2306
02:30:00,100 --> 02:30:01,600
but after that, we it will work

2307
02:30:08,400 --> 02:30:11,600
Jimbo have you set a version Target for the pipeline?

2308
02:30:11,600 --> 02:30:15,200
Will you go full embedded systems bananas opengl es?

2309
02:30:17,100 --> 02:30:21,000
Well, no, we probably won't really support anything other than a Pat

2310
02:30:21,000 --> 02:30:22,200
from your typical game on.

2311
02:30:22,700 --> 02:30:27,500
But that would include, you know, opengl es on Android or something.

2312
02:30:27,500 --> 02:30:28,200
Probably.

2313
02:30:31,000 --> 02:30:33,400
All right, I got to close it down because I got to get going here.

2314
02:30:33,600 --> 02:30:34,500
It's getting late.

2315
02:30:38,700 --> 02:30:43,400
All right, I am pretty pleased with how that all worked out though.

2316
02:30:43,400 --> 02:30:47,700
I mean, we're basically running through shaders now and our own data

2317
02:30:47,700 --> 02:30:50,900
set set up the game looks good to me.

2318
02:30:52,800 --> 02:30:56,100
I think it really just now needs artwork to be dropped in there so

2319
02:30:56,100 --> 02:30:58,800
we're getting close next week.

2320
02:30:58,800 --> 02:31:02,400
I feel like I am going to be away for the weekend so don't do anything

2321
02:31:02,400 --> 02:31:05,800
next week but the week after that, when I come back we should be able

2322
02:31:05,800 --> 02:31:08,300
to sort of clean up the

2323
02:31:08,500 --> 02:31:13,800
The remaining stuff that we might want to clean up on in certain terms

2324
02:31:13,800 --> 02:31:17,600
of like, eliminating anything fixed function and probably we could

2325
02:31:17,600 --> 02:31:25,500
then switch over to just the core profile and have the core profile be

2326
02:31:25,500 --> 02:31:30,300
entirely all we use and then we're pretty fully modernized.

2327
02:31:30,400 --> 02:31:33,200
Like I said, the only step, I don't know that I'm going to take is

2328
02:31:33,200 --> 02:31:38,300
trying to texture Atlas our assets or anything and the reason for

2329
02:31:38,400 --> 02:31:41,600
That is just because I don't know I think it's some diminishing

2330
02:31:41,600 --> 02:31:42,400
returns there.

2331
02:31:42,400 --> 02:31:47,600
I don't know that we have the kind of performance profile that's going

2332
02:31:47,600 --> 02:31:51,000
to really care about the texture swaps.

2333
02:31:51,500 --> 02:31:54,600
We may just have to do one thing which is add one.

2334
02:31:54,600 --> 02:31:57,700
Other primitive type which is a bunch of things that are rendered with

2335
02:31:57,700 --> 02:32:02,800
the same texture and use use that for particles when we get particles

2336
02:32:02,800 --> 02:32:03,200
in there.

2337
02:32:04,800 --> 02:32:08,800
I think that might be all we really need to do so I think that's

2338
02:32:08,800 --> 02:32:09,600
probably the approach.

2339
02:32:09,600 --> 02:32:15,300
I will take, I won't try to go the Atlas Route, but we could also play

2340
02:32:15,300 --> 02:32:16,800
around a little with some Nvidia extensions.

2341
02:32:16,800 --> 02:32:22,300
And just for fun, do a version that does all the things in one draw

2342
02:32:22,300 --> 02:32:26,000
batch by using buying this textures because that would be just kind of

2343
02:32:26,000 --> 02:32:29,200
fun and it's eminently possible.

2344
02:32:32,100 --> 02:32:34,300
So yeah, that's about it.

2345
02:32:34,500 --> 02:32:35,600
I'm going to wrap it up now.

2346
02:32:35,700 --> 02:32:37,900
Thanks so much for joining me for another episode of handmade here.

2347
02:32:37,900 --> 02:32:39,100
It's been a pleasure coding with you.

2348
02:32:39,100 --> 02:32:43,600
As always, if you would like to follow along at home, you can always

2349
02:32:43,600 --> 02:32:45,400
pre-order the game on handmade here a.org.

2350
02:32:45,400 --> 02:32:47,400
It comes with a source code so you can play around with it.

2351
02:32:47,800 --> 02:32:50,200
There's also forms that you can go to if you'd like to support the

2352
02:32:50,200 --> 02:32:55,600
video series a patreon page, you can go to, I'm sorry, splits, those

2353
02:32:56,100 --> 02:32:58,500
forms that you go to, you want to ask questions a patreon page and

2354
02:32:58,500 --> 02:32:59,700
judgments fourth video series.

2355
02:33:00,000 --> 02:33:03,300
Schedule about you can use to know when we're going to be live and an

2356
02:33:03,300 --> 02:33:04,000
episode guide.

2357
02:33:04,000 --> 02:33:08,700
You can go to if you want to catch up on old episodes, that's about it

2358
02:33:08,700 --> 02:33:09,200
for this week.

2359
02:33:09,200 --> 02:33:10,500
I will be off next week.

2360
02:33:10,500 --> 02:33:14,900
I'm not going to be around, so I expect to not have a handmade hero

2361
02:33:14,900 --> 02:33:17,900
stream next weekend, but we'll be back the weekend after that to close

2362
02:33:17,900 --> 02:33:18,200
out.

2363
02:33:18,200 --> 02:33:22,400
Our opengl modernization pass because I think we've basically done all

2364
02:33:22,400 --> 02:33:26,000
the stuff I wanted to do and so we've kind of got a that stuff.

2365
02:33:26,000 --> 02:33:28,900
Nicely cleaned up, that's about it.

2366
02:33:28,900 --> 02:33:29,800
Thanks for joining me.

2367
02:33:30,100 --> 02:33:32,500
Have fun programming next weekend without me.

2368
02:33:32,900 --> 02:33:34,200
But I'll see you guys the weekend.

2369
02:33:34,200 --> 02:33:35,900
After take it easy everyone.

