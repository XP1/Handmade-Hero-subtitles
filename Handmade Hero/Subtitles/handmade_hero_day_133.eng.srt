1
00:00:01,800 --> 00:00:04,500
Okay, hello everyone, and welcome to handmade hero.

2
00:00:04,500 --> 00:00:07,800
The show Rico to complete game live on stream on Twitch.

3
00:00:07,800 --> 00:00:09,200
No library's new engine.

4
00:00:09,600 --> 00:00:13,900
It's all our own code right down to the individual little tiny baby

5
00:00:13,900 --> 00:00:15,400
little pixels on the screen.

6
00:00:15,600 --> 00:00:19,700
Every single one of those, we put them there by hand and it's been

7
00:00:19,700 --> 00:00:20,600
pretty glorious.

8
00:00:20,600 --> 00:00:24,000
I have to tell you yesterday, we implemented asset streaming in the

9
00:00:24,000 --> 00:00:28,900
background because I for some reason just decided to do it.

10
00:00:29,000 --> 00:00:30,700
It was not at all planned.

11
00:00:30,900 --> 00:00:31,700
Just what happened.

12
00:00:32,500 --> 00:00:35,900
But we didn't have a chance because we, again only program for an hour

13
00:00:35,900 --> 00:00:39,800
on it, we didn't really have a chance to do all of the things that we

14
00:00:39,800 --> 00:00:41,500
might want to do with asset streaming.

15
00:00:41,500 --> 00:00:45,600
So it's still a little bit primitive at the moment and it's not

16
00:00:45,600 --> 00:00:49,200
something that you would actually want to call done because it has a

17
00:00:49,200 --> 00:00:49,900
number of issues.

18
00:00:49,900 --> 00:00:53,600
Mostly the biggest one just has to do with how it uses memory at the

19
00:00:53,600 --> 00:00:54,200
moment.

20
00:00:54,200 --> 00:00:58,200
It does not really have any strategy for what would happen if the, if

21
00:00:58,200 --> 00:01:00,700
the total number of assets that

22
00:01:00,800 --> 00:01:02,500
You were going to use in the game.

23
00:01:02,600 --> 00:01:06,000
Did not actually fit in memory now, it's entirely possible that for

24
00:01:06,000 --> 00:01:09,800
our game, all of the assets will fit in memory because machines have a

25
00:01:09,800 --> 00:01:11,000
lot of memory these days.

26
00:01:11,100 --> 00:01:14,700
And so we could, you know, choose to ignore that problem if we wanted

27
00:01:14,700 --> 00:01:15,000
to.

28
00:01:15,000 --> 00:01:19,400
But I would rather not do that because I would like the game much

29
00:01:19,400 --> 00:01:22,200
like, how we've been trying to make all of the programming, be very

30
00:01:22,200 --> 00:01:24,400
industrial strength here on inmate hero.

31
00:01:24,800 --> 00:01:28,500
I would like to make sure that our engine could handle the situation.

32
00:01:29,300 --> 00:01:32,800
Where are you have vastly more art resources than can fit in the

33
00:01:32,800 --> 00:01:34,500
memory of the machine at any given time?

34
00:01:34,900 --> 00:01:40,100
So in the case where, you know, you have a user who has 4 gigabytes of

35
00:01:40,100 --> 00:01:44,200
memory in the machine, it should be able to handle a situation where

36
00:01:44,200 --> 00:01:47,100
the uncompressed asset load for the game was 32 megabytes or

37
00:01:47,100 --> 00:01:48,000
something, right?

38
00:01:48,000 --> 00:01:49,400
That we'd like that, to be true.

39
00:01:52,800 --> 00:01:57,600
So we're going to go ahead and push forward on that and see if we

40
00:01:57,600 --> 00:02:02,000
can't bring our background streaming up to a higher quality level

41
00:02:02,000 --> 00:02:03,600
where we can sort of start to do.

42
00:02:03,900 --> 00:02:08,199
Some more of those things that we would want in sort of an industrial

43
00:02:08,199 --> 00:02:09,000
strength solution.

44
00:02:09,300 --> 00:02:09,800
Okay.

45
00:02:10,300 --> 00:02:14,200
Before I get started today is day 133.

46
00:02:14,500 --> 00:02:18,600
So if you would like to follow along at home, you can unzip day 132

47
00:02:18,600 --> 00:02:22,400
source code and that is the source code that I'll be programming with.

48
00:02:23,100 --> 00:02:23,400
Today.

49
00:02:23,400 --> 00:02:26,200
So if you pre-ordered the game, I hammer here at org, download the

50
00:02:26,200 --> 00:02:29,200
source, and then unzipped a 132.

51
00:02:29,200 --> 00:02:30,300
So, that's what I've got.

52
00:02:31,000 --> 00:02:34,800
And that is what if you, if you start with that source code, you're

53
00:02:34,800 --> 00:02:36,800
exactly where I am right now.

54
00:02:37,700 --> 00:02:38,200
All right.

55
00:02:38,200 --> 00:02:43,200
So let's take a look at what we've done so far, so that we can explain

56
00:02:43,200 --> 00:02:47,000
what we're going to need to do and so that we can go do it.

57
00:02:47,600 --> 00:02:49,600
So, we've got our background loading in there.

58
00:02:49,600 --> 00:02:52,500
And so now we can see that when we start the game, when it loads in

59
00:02:52,700 --> 00:02:57,000
Instantly it also nothing is there yet and it just kind of pages in

60
00:02:57,000 --> 00:02:59,000
the background, which is exactly what we wanted.

61
00:02:59,700 --> 00:02:59,900
And

62
00:03:00,000 --> 00:03:02,700
So what are the things that this is not doing yet?

63
00:03:02,700 --> 00:03:05,200
And what do we want to start making sure that it does?

64
00:03:05,400 --> 00:03:08,400
Well, first of all, you can also see that our guy is like floating and

65
00:03:08,400 --> 00:03:09,600
things are in the wrong place.

66
00:03:10,000 --> 00:03:12,600
So one thing that we do have to do which is just pure clean up, is we

67
00:03:12,600 --> 00:03:16,300
have to go back and put in that concept of having the displacement

68
00:03:16,400 --> 00:03:19,700
because we took that out of there just as we were finishing up this

69
00:03:19,700 --> 00:03:20,800
case we have to put that back in there.

70
00:03:20,800 --> 00:03:22,400
That really doesn't have anything to do with the system though.

71
00:03:22,400 --> 00:03:24,300
That's just a minor thing.

72
00:03:24,400 --> 00:03:28,100
So I have to do that but the the more important things really have to

73
00:03:28,100 --> 00:03:29,800
do with memory

74
00:03:30,000 --> 00:03:34,000
Me and you can kind of see what I'm talking about if we just take a

75
00:03:34,000 --> 00:03:35,600
look at some circumstances here.

76
00:03:36,200 --> 00:03:40,900
Here's the load asset work, all right, the load asset work called.

77
00:03:40,900 --> 00:03:42,100
Obviously, you can tell

78
00:03:45,700 --> 00:03:47,200
From the load asset work call.

79
00:03:48,300 --> 00:03:53,700
That we have this sort of process where we're loading a bitmap and

80
00:03:53,700 --> 00:03:57,800
then at the end when we've loaded the bitmap, we go ahead and set that

81
00:03:57,800 --> 00:04:00,800
pointer here equal to the bitmap that we loaded.

82
00:04:00,800 --> 00:04:04,400
And this is the pointer that the rest of the game can pick up and use.

83
00:04:05,000 --> 00:04:07,000
Now the problem with this system

84
00:04:08,300 --> 00:04:09,200
We have two problems.

85
00:04:09,200 --> 00:04:13,500
Really one is that this debug load bitmap call the debug bitmap called

86
00:04:13,500 --> 00:04:15,000
doesn't in any way.

87
00:04:18,000 --> 00:04:21,500
Guarantee of any kind of a bounded memory footprint, right?

88
00:04:21,600 --> 00:04:24,700
Basically what will happen is As We Run the game, every time we call

89
00:04:24,700 --> 00:04:30,900
debug load bitmap, it will load more memory into the system and so

90
00:04:30,900 --> 00:04:33,400
we'll just keep allocating more and more and more and more memory ad

91
00:04:33,400 --> 00:04:37,200
infinitum, until we run out of virtual paging in the operating system

92
00:04:37,200 --> 00:04:40,200
and then the game will just flat-out, stop working, right?

93
00:04:40,200 --> 00:04:41,200
I'll just crash or

94
00:04:42,900 --> 00:04:44,900
or encounter an operating system are where it puts up with those

95
00:04:44,900 --> 00:04:45,600
dialog boxes.

96
00:04:45,600 --> 00:04:48,200
Like your system is running low on virtual memory, right?

97
00:04:49,200 --> 00:04:51,300
So, it's really bad to do that.

98
00:04:51,300 --> 00:04:52,300
I don't really want to do that.

99
00:04:52,300 --> 00:04:53,600
Like I said, it'd be fine.

100
00:04:53,600 --> 00:04:56,500
If you knew that you only had as many art assets as would fit in Ram

101
00:04:56,700 --> 00:04:59,300
and you didn't care, then you don't have to worry about it, but I'd

102
00:04:59,300 --> 00:05:00,300
rather do something a little better there.

103
00:05:00,300 --> 00:05:05,100
So, what we have to do here is understand the concept, kind of like,

104
00:05:05,100 --> 00:05:09,200
if you've ever seen Arrested Development, you know, there's a one in

105
00:05:09,200 --> 00:05:11,700
one out policy in the military, right?

106
00:05:12,200 --> 00:05:12,500
And

107
00:05:13,400 --> 00:05:17,900
What I want to talk about here is the concept of you, no one in one

108
00:05:17,900 --> 00:05:18,400
out.

109
00:05:21,700 --> 00:05:25,700
Which is basically to say that what I would rather do is I'd rather

110
00:05:25,700 --> 00:05:27,700
say how big of a memory footprint.

111
00:05:27,700 --> 00:05:31,900
Do we actually want the artist to take art assets to take, right?

112
00:05:32,300 --> 00:05:34,800
So let's say we say that it's going to be 2 gigabytes.

113
00:05:35,000 --> 00:05:36,700
So that's like, what we want.

114
00:05:36,700 --> 00:05:40,100
Our backing store to be for art assets at any given time is 2 GB.

115
00:05:40,200 --> 00:05:40,700
Okay?

116
00:05:41,700 --> 00:05:43,100
And again this is an arbitrary number.

117
00:05:43,100 --> 00:05:45,000
We just would pick it based on what we think.

118
00:05:45,000 --> 00:05:48,700
The minimum spec of a machine for running handmade Heroes should be

119
00:05:48,900 --> 00:05:49,900
okay, maybe it'd be

120
00:05:50,000 --> 00:05:50,800
Much larger than that.

121
00:05:50,800 --> 00:05:51,900
Maybe be much smaller than that.

122
00:05:51,900 --> 00:05:54,500
It just depends on the circumstance, right?

123
00:05:56,500 --> 00:05:59,800
So let's say we have that and we have that chunk of memory.

124
00:06:00,000 --> 00:06:06,100
Allocated out of the transit pool and then we have, you know, on disk

125
00:06:06,100 --> 00:06:08,200
somewhere we've got and who knows?

126
00:06:08,200 --> 00:06:10,600
We don't know how big it actually is on the drive.

127
00:06:10,700 --> 00:06:13,700
But you know, because it might be impressed or something like this but

128
00:06:13,700 --> 00:06:17,300
decompressed, you know, we've got 32 GB of art assets or something.

129
00:06:17,300 --> 00:06:19,200
So some giant set here, right?

130
00:06:19,300 --> 00:06:21,800
And maybe that's pretty small on disk you know, maybe it's only six

131
00:06:21,800 --> 00:06:24,900
gigabytes on disk or something but you know it decompresses out to

132
00:06:24,900 --> 00:06:27,600
something much larger than that, or who knows what right?

133
00:06:28,700 --> 00:06:30,200
So who knows what the situation here is.

134
00:06:30,200 --> 00:06:32,800
But we know that this is how much we would actually have.

135
00:06:33,700 --> 00:06:38,600
So what I would rather do is I'd rather say, well, okay, at any given

136
00:06:38,600 --> 00:06:42,200
time we have 2 gigabytes worth of art assets loaded and when we

137
00:06:42,200 --> 00:06:46,200
encounter an asset that we do not have loaded but that we need, what

138
00:06:46,200 --> 00:06:51,100
we would like to do is take something from here that was previously

139
00:06:51,100 --> 00:06:55,500
being used and that we haven't touched in a while and I'd like to

140
00:06:55,500 --> 00:06:56,800
evict that, right?

141
00:06:56,800 --> 00:06:58,200
I'd like to get rid of it.

142
00:06:58,600 --> 00:07:02,400
So that we no longer are storing that our asset, and then I would like

143
00:07:02,400 --> 00:07:06,300
to load in whatever the one is, you know, that we're actually going to

144
00:07:06,300 --> 00:07:08,600
use and put that in its place.

145
00:07:09,200 --> 00:07:09,600
Okay.

146
00:07:10,900 --> 00:07:12,400
So that's what I'd rather do.

147
00:07:12,900 --> 00:07:14,700
I'd rather have something that works like this.

148
00:07:15,000 --> 00:07:17,400
And the reason that I'd rather have something that works like this is

149
00:07:17,400 --> 00:07:21,900
because then we know that as long as at startup, we get our initial

150
00:07:21,900 --> 00:07:23,700
memory footprint that we asked for.

151
00:07:23,900 --> 00:07:27,100
We know that we will never run out of memory and crash or anything.

152
00:07:27,100 --> 00:07:31,900
Like this will always be able to operate in the size of memory that we

153
00:07:31,900 --> 00:07:36,200
are given, and we know that the art asset loading won't ever do

154
00:07:36,200 --> 00:07:39,200
anything, you know stupid, right?

155
00:07:41,400 --> 00:07:42,700
So that's what I'd rather do.

156
00:07:43,900 --> 00:07:47,400
So that's one thing we want to get to and the other thing that we have

157
00:07:47,400 --> 00:07:51,700
to get to that's actually considerably easier than this is just making

158
00:07:51,700 --> 00:07:54,800
sure that nobody tries to load the same or an asset twice.

159
00:07:55,100 --> 00:07:55,600
Okay?

160
00:07:55,900 --> 00:08:00,300
So right now what happens is on a particular frame, if we go in here

161
00:08:00,800 --> 00:08:04,700
and we say like, you know, so you know only load once

162
00:08:08,200 --> 00:08:08,700
Right?

163
00:08:09,700 --> 00:08:12,000
So, what happens currently is on a particular frame.

164
00:08:12,000 --> 00:08:15,800
If we come in here, and we say, oh, you know what, I need you to load

165
00:08:15,800 --> 00:08:17,400
the shadow, right?

166
00:08:20,500 --> 00:08:23,600
And then somebody else comes along on the same frame and says load

167
00:08:23,600 --> 00:08:25,100
Shadow, right?

168
00:08:25,600 --> 00:08:28,000
Well, the background task for loading, the shadow probably hasn't

169
00:08:28,000 --> 00:08:28,900
completed yet.

170
00:08:28,900 --> 00:08:31,500
So both of these guys are going to do this, right?

171
00:08:31,500 --> 00:08:33,799
The first guys going to kick off that load thread.

172
00:08:33,799 --> 00:08:37,400
The second guys, also going to kick off the load thread, when all we

173
00:08:37,400 --> 00:08:40,700
really wanted it to do was kick off a single load thread and the

174
00:08:40,700 --> 00:08:43,500
second guy should not have kicked off a load thread because it's just

175
00:08:43,500 --> 00:08:45,200
the same thread, right?

176
00:08:46,300 --> 00:08:49,600
This, you know, it's just it's completely wasted work and it'll be

177
00:08:49,600 --> 00:08:53,700
wasted memory to because we'd lose, you know, that allocation in

178
00:08:53,700 --> 00:08:54,100
there, right?

179
00:08:54,100 --> 00:08:55,700
It would be a memory leak essentially.

180
00:08:56,700 --> 00:08:59,200
So what we want to do is make sure that we also do that, we talked

181
00:08:59,200 --> 00:08:59,800
about that a little bit.

182
00:09:00,000 --> 00:09:02,900
End of the previous stream so we want to do both those things.

183
00:09:03,000 --> 00:09:04,900
This one is harder.

184
00:09:05,000 --> 00:09:08,000
This one is definitely the easier of the two things to achieve.

185
00:09:08,000 --> 00:09:12,800
It's really just about being a little more, careful about how we label

186
00:09:12,800 --> 00:09:13,300
things.

187
00:09:13,900 --> 00:09:16,600
So that's that's really it, right?

188
00:09:17,600 --> 00:09:18,500
That's what you want to do.

189
00:09:18,800 --> 00:09:22,200
So I'm going to take these in order of easiness, which is to say that

190
00:09:22,200 --> 00:09:25,400
first, I'm going to go ahead and put in the line X top down a line

191
00:09:25,400 --> 00:09:25,900
stuff.

192
00:09:26,600 --> 00:09:29,800
Get that back in there since we act, you know, we kind of lost it.

193
00:09:30,000 --> 00:09:32,700
it, it was supposed to be in there, and then we

194
00:09:34,500 --> 00:09:37,000
We sort of lost it when we were quickly getting things working

195
00:09:37,000 --> 00:09:38,600
yesterday so we got to put that back in.

196
00:09:38,900 --> 00:09:42,300
Then I'm going to do the only load once and then we'll start in on the

197
00:09:42,300 --> 00:09:45,800
the more difficult problem of making sure that we always use a fixed

198
00:09:45,800 --> 00:09:46,600
resource for print.

199
00:09:46,600 --> 00:09:49,200
Now granted, that's actually not that difficult of a problem.

200
00:09:49,300 --> 00:09:52,700
If all your resources are the same size but when we don't know what

201
00:09:52,700 --> 00:09:56,800
the size of the resources are we kind of have some decisions to make

202
00:09:57,000 --> 00:09:59,900
in terms of how we handle that right in terms of how we deal with

203
00:09:59,900 --> 00:10:00,400
that?

204
00:10:03,200 --> 00:10:03,600
Okay.

205
00:10:05,700 --> 00:10:08,300
So, here we go.

206
00:10:09,100 --> 00:10:11,500
Here we go, indeed.

207
00:10:12,000 --> 00:10:15,600
So in order to do this here, with the line X and the top down a line

208
00:10:15,600 --> 00:10:16,800
Y, right?

209
00:10:17,200 --> 00:10:21,500
I can essentially just, you know, again, not replacing the bitmap,

210
00:10:21,500 --> 00:10:24,700
debug load call yet, even though that you know, might be something

211
00:10:25,100 --> 00:10:25,900
that we want to do.

212
00:10:25,900 --> 00:10:31,000
Eventually I'm going to go ahead and make it so that we essentially do

213
00:10:31,000 --> 00:10:33,800
you know a little bit about just a branch here and call the original

214
00:10:33,800 --> 00:10:35,300
functions exactly how

215
00:10:35,500 --> 00:10:36,400
Have them before.

216
00:10:36,700 --> 00:10:39,400
Probably we could clean this up a little bit and make this be a little

217
00:10:39,400 --> 00:10:41,100
more smarter in the way it passes through.

218
00:10:41,100 --> 00:10:44,000
But that's certainly something we can address a little bit down the

219
00:10:44,000 --> 00:10:45,100
line if that makes sense.

220
00:10:46,300 --> 00:10:51,600
So in this particular circumstance, what I want to do is I want to

221
00:10:51,600 --> 00:10:53,900
store in that load asset work.

222
00:10:54,200 --> 00:10:57,700
I want to store these two things that we have here that we were using

223
00:10:57,700 --> 00:11:00,900
before, so that I can put them in there.

224
00:11:00,900 --> 00:11:03,500
I don't actually remember what types those were.

225
00:11:03,500 --> 00:11:08,600
Let me go take a look and see, they were in 32, so that's good.

226
00:11:08,700 --> 00:11:12,500
And then I'll just stir a bull 32 as well which is like has alignment

227
00:11:12,500 --> 00:11:15,900
or something like this and then I can, you know, put that

228
00:11:16,100 --> 00:11:17,600
Here at something to check.

229
00:11:17,600 --> 00:11:21,100
So if it has an alignment, it'll use the alignment, if it doesn't have

230
00:11:21,100 --> 00:11:24,400
the alignment, it won't use the alignment and again, that's something

231
00:11:24,400 --> 00:11:25,500
that I'd rather clean up.

232
00:11:25,500 --> 00:11:27,100
But you know we can push that down to one.

233
00:11:27,100 --> 00:11:29,500
We're looking at RSS little more it really didn't have anything to do

234
00:11:30,100 --> 00:11:32,100
with this routine whatsoever.

235
00:11:32,100 --> 00:11:32,700
So

236
00:11:34,300 --> 00:11:38,300
In here, I'll just go ahead and assume that it doesn't have alignment.

237
00:11:38,800 --> 00:11:42,700
And then later what we can do is anybody who does have an alignment

238
00:11:43,000 --> 00:11:44,000
can set that.

239
00:11:44,100 --> 00:11:47,000
So, has alignment equals true, right?

240
00:11:47,500 --> 00:11:51,600
What are these guys top down a line Y, and a line X.

241
00:11:52,700 --> 00:11:53,300
Right.

242
00:11:54,700 --> 00:11:55,400
There we go.

243
00:11:56,400 --> 00:11:59,300
So if I want to go ahead and insert these in here, I should be able to

244
00:11:59,300 --> 00:11:59,800
do so.

245
00:12:00,000 --> 00:12:01,200
Then I can just cut and paste.

246
00:12:01,200 --> 00:12:06,000
The old values that we had in there into the work order.

247
00:12:06,000 --> 00:12:07,900
And now, the work order will have the information.

248
00:12:07,900 --> 00:12:11,400
It needs to accurately reflect the stuff that used to be happening

249
00:12:11,400 --> 00:12:12,300
single-threaded.

250
00:12:12,600 --> 00:12:16,400
So that we're back to like the feature parity of the thing that we

251
00:12:16,400 --> 00:12:18,400
started with, which obviously is what we want.

252
00:12:19,800 --> 00:12:21,800
So anyway, there we go.

253
00:12:21,800 --> 00:12:26,200
And now our guys are aligned properly which is good, and everything is

254
00:12:26,200 --> 00:12:26,800
fine.

255
00:12:27,100 --> 00:12:29,900
So now let's tackle that other problem of making

256
00:12:30,000 --> 00:12:31,900
Make sure the things only load once.

257
00:12:32,200 --> 00:12:35,600
Now, you can see that we sort of talked about this again a little bit

258
00:12:36,500 --> 00:12:39,300
where we said, oh, because someone asked about it on the last day when

259
00:12:39,300 --> 00:12:42,600
I was like, okay, we're well eventually we need to sort of upgrade

260
00:12:42,600 --> 00:12:45,800
this to have a notion of what's going on so that we can Mark things as

261
00:12:45,800 --> 00:12:48,300
being in progress so they won't get queued twice.

262
00:12:51,500 --> 00:12:52,100
Right.

263
00:12:53,400 --> 00:12:56,900
And the way I was proposing to do that was to actually make, you know,

264
00:12:56,900 --> 00:13:00,700
an asset thing here, I'm going to call this an asset slot and then I'm

265
00:13:00,700 --> 00:13:02,400
just going to change this right here.

266
00:13:02,600 --> 00:13:07,200
This bitmap spit to actually be bitmap slots essentially.

267
00:13:08,900 --> 00:13:13,200
So yeah, so if we do that, then what I would look for is, I basically

268
00:13:13,200 --> 00:13:17,300
say, okay, we've got this result here when we're going to return this

269
00:13:17,300 --> 00:13:24,100
result what I've actually like to do is say, okay, you know, when,

270
00:13:24,500 --> 00:13:27,500
when it looks at the actual result, it's fine for it to go ahead

271
00:13:27,600 --> 00:13:32,400
probably and just get the bitmap right from the pointer.

272
00:13:32,400 --> 00:13:33,100
That's probably.

273
00:13:33,100 --> 00:13:33,700
Okay.

274
00:13:34,100 --> 00:13:37,000
And we'll make sure we always make that be authoritative in terms of

275
00:13:37,000 --> 00:13:38,400
whether you can actually

276
00:13:38,600 --> 00:13:39,600
Use it or not.

277
00:13:40,300 --> 00:13:42,300
But what we would like to do

278
00:13:46,400 --> 00:13:49,400
is on the load, right?

279
00:13:50,200 --> 00:13:54,600
So when we do load asset, when we're about to kick off the asset, what

280
00:13:54,600 --> 00:14:00,400
we would like to do is actually ensure that well a that it needs to be

281
00:14:00,400 --> 00:14:05,000
loaded and be that it hasn't already been cute.

282
00:14:05,000 --> 00:14:08,100
So what I'd like to do is basically do something here where we're

283
00:14:08,100 --> 00:14:09,500
going to check

284
00:14:11,400 --> 00:14:12,100
Like so.

285
00:14:15,200 --> 00:14:21,200
We're going to check to see whether or not the asset in question needs

286
00:14:21,200 --> 00:14:23,400
to be loaded or whether it's already been cute.

287
00:14:23,400 --> 00:14:27,700
So what you can see here, what I'm doing is I'm going to check that

288
00:14:27,700 --> 00:14:29,200
state, right?

289
00:14:29,500 --> 00:14:32,000
And I'm going to see whether it's unloaded.

290
00:14:32,000 --> 00:14:34,000
If it's unloaded, then we'll go ahead and do it.

291
00:14:34,000 --> 00:14:35,100
Otherwise, we won't.

292
00:14:35,300 --> 00:14:40,400
Now there is something that we need to be aware of here that this

293
00:14:40,400 --> 00:14:41,400
doesn't want to be written.

294
00:14:41,400 --> 00:14:41,900
Exactly.

295
00:14:41,900 --> 00:14:42,400
This way.

296
00:14:42,400 --> 00:14:44,400
And the reason is because multi-thread

297
00:14:44,900 --> 00:14:48,500
It would make it so that two threads could potentially see this

298
00:14:48,500 --> 00:14:49,800
unloaded State at the same time.

299
00:14:49,800 --> 00:14:53,400
And we want a fair bit of flexibility with loading assets on separate

300
00:14:53,400 --> 00:14:56,700
threads potentially depending on how we're going to do it.

301
00:14:56,800 --> 00:14:59,800
And so, I would just like to say this probably is not.

302
00:15:00,000 --> 00:15:04,500
We want to do what we would like to do is we would like to do again.

303
00:15:04,500 --> 00:15:07,800
One of those locked compare exchange, right?

304
00:15:09,800 --> 00:15:13,600
Like so maybe I'll call it Atomic compare exchange, right?

305
00:15:13,700 --> 00:15:19,100
What I'd like to do is atomic compare exchange of an integer here.

306
00:15:19,200 --> 00:15:22,700
Right, I guess this is technically you want 32 right?

307
00:15:23,000 --> 00:15:27,900
I'd like to do an atomic a exchange of that you in 32 and what I want

308
00:15:27,900 --> 00:15:34,100
to do is say Okay I want to Atomic compare exchange this with that and

309
00:15:34,100 --> 00:15:35,900
set it to queued, right?

310
00:15:35,900 --> 00:15:39,200
So I basically want to take this guy, I want to make sure

311
00:15:39,400 --> 00:15:42,800
These unloaded and assuming that he is unloaded, I want to then set

312
00:15:42,800 --> 00:15:46,700
him to queued and then when I could do is just check the return result

313
00:15:46,700 --> 00:15:50,300
to make sure that what I actually got back was unloaded because if

314
00:15:50,300 --> 00:15:53,000
that's true that means no other thread could have seen the unloaded

315
00:15:53,000 --> 00:15:55,200
because it would have been replaced with cued by the time that they

316
00:15:55,200 --> 00:15:56,400
did right.

317
00:15:56,900 --> 00:16:00,600
And so what I want to do is make sure that that state again is always

318
00:16:00,600 --> 00:16:03,800
going through that Atomic compare exchange.

319
00:16:03,800 --> 00:16:07,200
So that we know that we're not going to have any kind of nasty

320
00:16:07,200 --> 00:16:08,000
contention there.

321
00:16:11,100 --> 00:16:11,700
Right.

322
00:16:12,800 --> 00:16:13,500
So there we go.

323
00:16:14,200 --> 00:16:19,000
Alright, so that's pretty much it for for doing that.

324
00:16:19,400 --> 00:16:23,200
What we do have to do, of course in the intrinsics is, we have to

325
00:16:23,200 --> 00:16:28,500
actually make these and unfortunately again these are ones that are

326
00:16:28,500 --> 00:16:32,100
dependent on the particular compiler, in question.

327
00:16:32,300 --> 00:16:34,900
So they will be things that people pointing to other platforms.

328
00:16:35,200 --> 00:16:36,200
You're going to have to deal with.

329
00:16:36,200 --> 00:16:39,200
You're going to have to specify what they should be that makes.

330
00:16:39,300 --> 00:16:43,900
and so in here, what we've got to do is we've got Atomic compare

331
00:16:43,900 --> 00:16:48,500
exchange, you went 32, I should probably actually delete this because

332
00:16:48,500 --> 00:16:54,300
that way people to do case you need GCC llvm equivalents

333
00:16:55,800 --> 00:16:58,900
So anyway, we do atomic compare exchange.

334
00:16:59,100 --> 00:17:02,100
Oh, and we even have complete previous rights before future rights in

335
00:17:02,100 --> 00:17:02,600
here.

336
00:17:02,800 --> 00:17:06,000
How come I didn't just use that because we're supposed to have this

337
00:17:06,000 --> 00:17:06,800
fence in here.

338
00:17:07,300 --> 00:17:11,099
Good now we've got that fence, so if we have Atomic compare exchange

339
00:17:11,099 --> 00:17:14,800
you in 32, what that's going to do is it's going to take, you know, a

340
00:17:14,800 --> 00:17:16,500
pointer to a un 32.

341
00:17:17,200 --> 00:17:22,000
This is the the, you know, the sort of the value change, right?

342
00:17:22,099 --> 00:17:24,900
And then we have the expected value and the new value.

343
00:17:25,200 --> 00:17:25,800
Right?

344
00:17:26,300 --> 00:17:29,300
And what that's going to do is that's actually going to call right

345
00:17:29,300 --> 00:17:32,600
into the interlocked compare Exchange.

346
00:17:34,500 --> 00:17:37,900
Function which I don't actually remember exactly what intrinsic it

347
00:17:37,900 --> 00:17:38,900
actually is.

348
00:17:39,200 --> 00:17:40,900
But here we go.

349
00:17:41,100 --> 00:17:46,500
New and then we have the result, which we need to return.

350
00:17:47,300 --> 00:17:47,800
Okay.

351
00:17:48,700 --> 00:17:50,100
So let's see what that has introduc.

352
00:17:50,100 --> 00:17:54,200
Compare exchange cannot convert argument one from volatile too long.

353
00:17:54,200 --> 00:17:55,500
That's totally fine.

354
00:17:55,500 --> 00:17:58,100
Because those are the same thing.

355
00:17:58,700 --> 00:17:59,800
There's your cast.

356
00:18:01,500 --> 00:18:03,600
Let's see here.

357
00:18:04,000 --> 00:18:04,400
Okay?

358
00:18:04,400 --> 00:18:05,200
And that's it.

359
00:18:06,000 --> 00:18:07,800
Well, no time.

360
00:18:07,800 --> 00:18:11,100
I compare exchange, telling it through to cannot convert.

361
00:18:11,100 --> 00:18:13,200
One from asset state to you at 32.

362
00:18:13,200 --> 00:18:16,800
So, we have to do this one as well, so there we go.

363
00:18:17,900 --> 00:18:24,800
And this guy here, it just needs to be talking about the bitmap

364
00:18:25,000 --> 00:18:26,000
explicitly.

365
00:18:26,900 --> 00:18:31,100
And once it does that, of course, it also has to go ahead and set the

366
00:18:31,100 --> 00:18:37,200
state to the correct State value, which is loaded, right?

367
00:18:39,000 --> 00:18:40,500
That's why I think that should be good.

368
00:18:41,300 --> 00:18:43,200
So that way we get the bitmap pointer in there.

369
00:18:43,200 --> 00:18:47,200
We've set it to loaded so we know what's going on and then we can

370
00:18:47,200 --> 00:18:49,400
retire that thread.

371
00:18:49,600 --> 00:18:51,400
So I think that should be fine.

372
00:18:53,700 --> 00:18:57,800
I suppose it's also possible for us to do that slowly differently.

373
00:18:57,800 --> 00:19:00,500
But I'm going to go ahead and and leave it like that for now.

374
00:19:01,100 --> 00:19:01,800
All right.

375
00:19:02,600 --> 00:19:04,300
Oops I don't know why I said stamp

376
00:19:05,600 --> 00:19:11,000
So I think that should give us what we want and now we should have

377
00:19:11,000 --> 00:19:14,900
some protection from the case of calling this multiple times.

378
00:19:14,900 --> 00:19:19,100
Of course, again, we don't have a whole lot of debugging visualization

379
00:19:19,100 --> 00:19:20,100
stuff in here yet.

380
00:19:20,100 --> 00:19:23,400
So it's pretty hard for us to actually know that it's working

381
00:19:23,400 --> 00:19:26,800
properly, but that is something we'll have to address a little later

382
00:19:26,800 --> 00:19:28,900
on when we can maybe visualize a few more things.

383
00:19:28,900 --> 00:19:30,500
So that's good.

384
00:19:30,500 --> 00:19:33,700
And that's roughly what we have to do to make that lockout.

385
00:19:33,700 --> 00:19:35,600
But now we've got sort

386
00:19:35,700 --> 00:19:40,800
Have some some some other little bit of nastiness to deal with, right?

387
00:19:42,000 --> 00:19:42,600
So,

388
00:19:43,900 --> 00:19:50,100
if you remember, we do have a problem with our code, which is that

389
00:19:50,100 --> 00:19:52,400
Phil ground chunk when we call Phil ground chunk.

390
00:19:52,400 --> 00:19:57,900
But that actually does, is that just builds the push buffer stuff.

391
00:19:58,200 --> 00:20:05,300
And and then it goes ahead and and and you know, puts a puts a work, a

392
00:20:05,300 --> 00:20:06,800
work order in, right?

393
00:20:07,800 --> 00:20:13,100
And you know, there's a there's an issue with this which is that if

394
00:20:13,200 --> 00:20:17,100
the thing that is being composited, doesn't exist, yet the bitmap that

395
00:20:17,100 --> 00:20:18,800
was going to be used doesn't exist yet.

396
00:20:19,100 --> 00:20:22,600
Then when this goes to do, its rendering, the rendering will be

397
00:20:22,600 --> 00:20:23,800
incorrect, right?

398
00:20:23,800 --> 00:20:25,300
Because it will be missing one of the stamps.

399
00:20:25,300 --> 00:20:28,500
It should have stamped in and we'll just get an incorrect ground

400
00:20:28,500 --> 00:20:29,000
chunk.

401
00:20:29,100 --> 00:20:33,200
That's might be fine when we're talking about the actual frame buffer,

402
00:20:33,200 --> 00:20:36,000
when we're rendering actual frames in the game because at worst case

403
00:20:36,000 --> 00:20:37,300
it's a flicker but more often, I'll

404
00:20:37,500 --> 00:20:40,900
Happened because we're streaming far enough out that things left.

405
00:20:40,900 --> 00:20:44,100
Time to page in before they actually move on to the screen, but we

406
00:20:44,100 --> 00:20:46,300
don't have any such guarantees here.

407
00:20:46,300 --> 00:20:50,000
And once we met, if we even have one failure in here, that gets baked

408
00:20:50,000 --> 00:20:51,600
into ground chuck, you're going to see a lot.

409
00:20:51,800 --> 00:20:54,700
That could be a pretty bad error that I don't want to have.

410
00:20:55,600 --> 00:20:59,300
So we have a couple of different ways that we can approach this.

411
00:21:00,000 --> 00:21:05,300
And I'm not sure which one is the best one, but one way to do it is to

412
00:21:05,300 --> 00:21:07,500
make sure that all of the stuff that's used in ground.

413
00:21:07,500 --> 00:21:10,600
Chunks is always resident and cannot be evicted, right?

414
00:21:10,600 --> 00:21:11,300
That's one way.

415
00:21:12,000 --> 00:21:17,100
Another way to do it is to only allow the ground chunk to be filled in

416
00:21:17,100 --> 00:21:21,000
the case where it actually got all of the things that it actually

417
00:21:21,000 --> 00:21:22,400
needed, right?

418
00:21:24,000 --> 00:21:25,300
And the final thing.

419
00:21:28,100 --> 00:21:35,600
Would be to make it so that it just stalls out and weights on loading

420
00:21:35,600 --> 00:21:37,800
until the loading is done, right?

421
00:21:40,900 --> 00:21:41,900
I don't know if that makes sense.

422
00:21:43,300 --> 00:21:44,900
I don't know which of those is best.

423
00:21:45,900 --> 00:21:49,800
Certainly the simplest one for right now is just to make sure that it

424
00:21:50,200 --> 00:21:54,000
you know, to basically not Mark, the ground chunk, as actually having

425
00:21:54,000 --> 00:21:59,200
been filled until you actually know that everything is fine with it.

426
00:21:59,300 --> 00:22:03,200
So the way to do that, for example, would be something like this.

427
00:22:03,700 --> 00:22:06,500
I don't know if this makes any sense, but hopefully it will.

428
00:22:07,200 --> 00:22:09,700
Let's say, I do all this work here, right?

429
00:22:09,800 --> 00:22:12,900
I can then say, if all bit

430
00:22:13,100 --> 00:22:19,100
Apps valid on the render group then go for it, right?

431
00:22:19,600 --> 00:22:25,900
And so what I can do is go into my render group here and and say, all

432
00:22:25,900 --> 00:22:28,700
right, there's a call called all bitmaps valid.

433
00:22:29,100 --> 00:22:33,800
What all bitmaps valid does is it checks to see whether or not you've

434
00:22:33,800 --> 00:22:39,300
ever had a cache Miss in that case, so all bitmaps valid render group

435
00:22:39,500 --> 00:22:41,000
on the group, right?

436
00:22:43,000 --> 00:22:46,200
And if all the bitmaps are valid than it can render, right?

437
00:22:48,200 --> 00:22:49,000
So, there's that.

438
00:22:51,300 --> 00:22:55,900
There's one additional piece to it, so, we'll see.

439
00:22:57,100 --> 00:22:59,400
Again, like I said, I don't really know if this is good way to do it,

440
00:22:59,400 --> 00:23:02,300
it might be that we want to just always Force ground, chunk, members

441
00:23:02,300 --> 00:23:03,000
to be resident.

442
00:23:03,000 --> 00:23:06,300
But, you know, I again, it's an educational stream.

443
00:23:06,300 --> 00:23:10,300
I want to show options and I want to show things I consider doing.

444
00:23:10,300 --> 00:23:16,800
So I'm just going to put this in here and see, you know, what happens

445
00:23:17,900 --> 00:23:20,900
bitmap, missing bitmap

446
00:23:21,100 --> 00:23:22,100
Out, right?

447
00:23:22,300 --> 00:23:24,500
Or we could even just say missing resource caps.

448
00:23:25,300 --> 00:23:27,600
So when you allocate a render group,

449
00:23:28,700 --> 00:23:33,300
Okay, when you come in here when you start off it'll just assume that

450
00:23:33,300 --> 00:23:35,400
the missing resource count is 0.

451
00:23:35,400 --> 00:23:40,000
And then leader, when it goes, if it has to issue a load asset called,

452
00:23:40,200 --> 00:23:44,200
what it will do is it will link the missing resource count so that

453
00:23:44,200 --> 00:23:47,400
everyone knows that there are resources, missing.

454
00:23:48,000 --> 00:23:51,600
And then at the end, when you say, like, I guess we should say, all

455
00:23:51,600 --> 00:23:56,000
resources present might be a better way to say it all resources

456
00:23:56,000 --> 00:23:56,800
present.

457
00:23:58,900 --> 00:23:59,700
what we can do there is

458
00:24:01,000 --> 00:24:05,600
If all the resources are present, it will return true, right?

459
00:24:05,900 --> 00:24:12,800
So it's just group missing resource, count equals zero and then you

460
00:24:12,800 --> 00:24:13,300
return.

461
00:24:14,300 --> 00:24:17,800
So that's one thing we could do, right, all resources present.

462
00:24:17,800 --> 00:24:20,300
Now, we know that will never actually fill a ground.

463
00:24:20,300 --> 00:24:26,400
Chunk will abort if it turns into a circumstance, where the stuff that

464
00:24:26,400 --> 00:24:28,900
it had wasn't there, right?

465
00:24:30,000 --> 00:24:31,000
So we can do that.

466
00:24:32,000 --> 00:24:37,800
There's a problem with this still, even if we do it that which is that

467
00:24:38,100 --> 00:24:39,100
technically.

468
00:24:39,200 --> 00:24:43,300
So one thing that we can do with the main renderer is, we can make it

469
00:24:43,300 --> 00:24:49,000
so that during the time, when stuff is going to be rendered, we can

470
00:24:49,000 --> 00:24:54,400
guarantee that nothing is going to get evicted from the resource cash,

471
00:24:54,500 --> 00:24:55,200
right?

472
00:24:55,500 --> 00:24:58,200
Because we could just make sure that resource eviction happens at a

473
00:24:58,200 --> 00:24:59,000
known time.

474
00:24:59,000 --> 00:25:00,900
And that time is not during the rendering.

475
00:25:01,700 --> 00:25:04,000
So that would be fine, right?

476
00:25:05,100 --> 00:25:09,000
But with ground chunks, ground chunks happen, on a separate thread.

477
00:25:09,100 --> 00:25:14,600
So what could happen here is we could go ahead and pull all these in

478
00:25:14,600 --> 00:25:18,100
right then be about to render them and have one of them, get evicted.

479
00:25:18,600 --> 00:25:24,200
So the reason that and that's really bad, because actually, what that

480
00:25:24,200 --> 00:25:27,800
would do is that would potentially even crash because when it goes to

481
00:25:27,800 --> 00:25:29,600
use one of those bitmaps, it will find that.

482
00:25:29,600 --> 00:25:32,700
There's just, it's a good, be a garbage pointer or a zero pointer or

483
00:25:32,700 --> 00:25:34,700
just it's other memory probably, wouldn't crash what

484
00:25:34,900 --> 00:25:40,400
Really do actually is is probably just split the wrong sizes and the

485
00:25:40,400 --> 00:25:44,800
wrong data completely, it would be bad, right?

486
00:25:44,800 --> 00:25:47,500
And it could crash if the sizes got corrupted to be things that were

487
00:25:47,500 --> 00:25:48,600
large enough, right?

488
00:25:50,200 --> 00:25:51,600
So it's a bad situation.

489
00:25:52,000 --> 00:25:55,500
And so the question is, you know, what do we want to do about that,

490
00:25:55,500 --> 00:26:00,900
you know, is there anything in particular that we want to do to try to

491
00:26:00,900 --> 00:26:01,900
combat that, right?

492
00:26:06,700 --> 00:26:08,000
And there's a couple things we could do.

493
00:26:08,900 --> 00:26:11,900
So one is, you can just cross your fingers, right?

494
00:26:11,900 --> 00:26:18,100
One is a finger Crossing and that would be probably not such a great

495
00:26:18,100 --> 00:26:18,400
idea.

496
00:26:18,400 --> 00:26:21,200
I think and the reason you can cross your fingers is that depending on

497
00:26:21,200 --> 00:26:25,200
how you implement, your least, recently used scheme, you can probably

498
00:26:25,200 --> 00:26:29,500
be sure that if you just went through and asked for all these bitmaps

499
00:26:29,500 --> 00:26:35,000
and they were there, they've all been sort of marked hot and will not

500
00:26:35,000 --> 00:26:35,200
be a

501
00:26:35,400 --> 00:26:36,600
Did any time soon, right?

502
00:26:36,600 --> 00:26:40,400
It'll be many frames from now that they would ever be evicted if

503
00:26:40,400 --> 00:26:41,900
they're going to be evicted, right?

504
00:26:42,000 --> 00:26:44,900
So you could cross your fingers and just hope

505
00:26:46,200 --> 00:26:50,500
not actually fabulous, but it would probably work, right?

506
00:26:50,900 --> 00:26:55,100
You certain will certainly wouldn't Kraut crash any more frequently

507
00:26:55,400 --> 00:26:59,800
than anyone else is games that get shipped, but, you know, it would be

508
00:27:00,000 --> 00:27:01,400
Nice to be able to do something.

509
00:27:01,400 --> 00:27:04,200
That was at least going to be theoretically correct.

510
00:27:04,600 --> 00:27:07,700
And so the other things we could do is temporarily lock those

511
00:27:07,700 --> 00:27:13,200
resources in by every time that we actually use one in the renderer,

512
00:27:13,500 --> 00:27:18,800
we do some kind of a state change on that resource to make sure that

513
00:27:18,800 --> 00:27:22,100
it changes to a state that is basically a used State.

514
00:27:22,700 --> 00:27:26,800
And then when we're done we clean up the used state, right?

515
00:27:27,500 --> 00:27:29,800
And I don't really know what to say.

516
00:27:30,000 --> 00:27:30,800
About that.

517
00:27:33,900 --> 00:27:34,700
I mean.

518
00:27:38,400 --> 00:27:40,500
It's the correct way to do it.

519
00:27:40,500 --> 00:27:42,000
Probably I would say.

520
00:27:45,500 --> 00:27:47,600
It's not hard to implement.

521
00:27:48,000 --> 00:27:52,800
The only thing that's a little bit problematic about it is that it

522
00:27:52,800 --> 00:27:56,300
does involve reiterating over the buffer.

523
00:27:57,800 --> 00:28:04,600
So, you know, I don't know, I don't know what to say about that, but

524
00:28:07,000 --> 00:28:09,100
You know, it's it's an option.

525
00:28:10,200 --> 00:28:11,200
So you know what?

526
00:28:11,200 --> 00:28:13,300
Maybe I'll just write it and we'll see how it is.

527
00:28:13,900 --> 00:28:19,300
But basically what that boils down to is when you go and do an

528
00:28:19,300 --> 00:28:20,200
allocate

529
00:28:22,500 --> 00:28:24,300
When you're in the render group, right?

530
00:28:24,300 --> 00:28:29,200
And you do and allocate render group, then what you would need to do

531
00:28:29,200 --> 00:28:34,200
at that point afterwards is, you would need to go and have a sort of

532
00:28:34,200 --> 00:28:35,400
clean up, right?

533
00:28:35,400 --> 00:28:38,400
We would actually need to have clean up, which is annoying.

534
00:28:38,500 --> 00:28:41,400
I hate clean up because it's something that someone might forget to do

535
00:28:41,400 --> 00:28:42,100
or that.

536
00:28:42,600 --> 00:28:44,600
You know, might take longer than it should.

537
00:28:45,000 --> 00:28:47,000
Because you can't just go ahead and straight up or use the memory.

538
00:28:47,000 --> 00:28:48,400
You've got to actually do that.

539
00:28:48,400 --> 00:28:51,900
Step of cleaning things up, but you know, who knows.

540
00:28:52,200 --> 00:28:55,900
So we'll go ahead and say, you know, here's the group and then we can

541
00:28:55,900 --> 00:28:59,100
say like cleanup render group or something like this.

542
00:29:00,400 --> 00:29:04,700
And what that would do is that would just step through these guys,

543
00:29:04,700 --> 00:29:05,100
right?

544
00:29:05,100 --> 00:29:09,600
It would do nothing other than stepping through this list exactly the

545
00:29:09,600 --> 00:29:14,000
same way that it that the other people are doing it only this time.

546
00:29:14,500 --> 00:29:19,300
What would happen is each time through any, any of these guys which

547
00:29:19,300 --> 00:29:22,000
actually had something in it that need to get free.

548
00:29:22,200 --> 00:29:27,100
Three, which would basically be the bitmap one loops and do that.

549
00:29:28,800 --> 00:29:30,400
That would basically be the pit map going here.

550
00:29:33,100 --> 00:29:36,600
That one would have to Market stuff as not being used anymore, right?

551
00:29:37,400 --> 00:29:41,800
So yeah, so you'd have something like this and again this is one of

552
00:29:41,800 --> 00:29:42,700
those things that

553
00:29:44,700 --> 00:29:47,300
Looking at this, if we're going to have two people who iterate over

554
00:29:47,300 --> 00:29:51,000
it, it feels like we would probably want to pull that out into

555
00:29:51,000 --> 00:29:51,400
something.

556
00:29:51,400 --> 00:29:54,900
That's going to be a little more easily shareable and harder to screw

557
00:29:54,900 --> 00:29:55,100
up.

558
00:29:55,100 --> 00:29:58,100
The only problem with it is since it is a rendering thing.

559
00:29:58,100 --> 00:29:59,900
I'm a little hesitant to do that.

560
00:30:00,500 --> 00:30:05,200
I don't love that idea but, you know, we'll see how it goes again.

561
00:30:05,200 --> 00:30:09,100
Like I said, most of the time, it's exactly sort of that, you know,

562
00:30:09,800 --> 00:30:11,800
it's that we'll see how it goes, kind of a thing.

563
00:30:13,000 --> 00:30:18,000
So yeah, so in here, if we do the cleanup render group call, what we

564
00:30:18,000 --> 00:30:21,800
would need to do is assuming that it was actually a bitmap that we

565
00:30:21,800 --> 00:30:22,700
were using.

566
00:30:22,800 --> 00:30:25,600
We would need to be able to release it, right?

567
00:30:25,900 --> 00:30:29,800
So we need to basically like release resource and

568
00:30:30,000 --> 00:30:33,800
In here, the the loaded good map for necessary, the little bit map.

569
00:30:33,800 --> 00:30:38,500
The actual thing that that does it would have its game asset ID in

570
00:30:38,500 --> 00:30:39,600
here, right?

571
00:30:39,600 --> 00:30:47,700
Like so and yeah we wouldn't probably need the loaded bitmap pointer

572
00:30:47,700 --> 00:30:49,300
anymore for that matter.

573
00:30:49,800 --> 00:30:54,000
We would just record the asset ID and that would be it, right?

574
00:30:54,000 --> 00:30:57,500
So it would probably something more like this where the bitmap

575
00:30:57,500 --> 00:30:59,000
actually comes in here.

576
00:31:00,500 --> 00:31:03,300
Although I don't know, it may be that we need that bitmap pointer a

577
00:31:03,300 --> 00:31:06,000
little earlier on to get like the dimensions of it.

578
00:31:06,600 --> 00:31:11,200
Let's, let's take a look because I don't actually know, I don't

579
00:31:11,200 --> 00:31:11,600
remember.

580
00:31:11,600 --> 00:31:14,200
So let's take a look at what happens there.

581
00:31:16,200 --> 00:31:16,500
Yeah.

582
00:31:16,500 --> 00:31:21,000
So as you can see, we actually use that bitmap information so it means

583
00:31:21,000 --> 00:31:23,200
we do need to have the pointer a little earlier on.

584
00:31:23,600 --> 00:31:26,300
So we do need to actually still store it, if that makes sense.

585
00:31:27,200 --> 00:31:31,400
So what I'm going to do here is just say, okay, you know if the entry

586
00:31:31,400 --> 00:31:35,500
bitmap actually was valid then I've got that game asset ID.

587
00:31:35,900 --> 00:31:39,500
I'm going to have to release a set or something like that release

588
00:31:39,500 --> 00:31:44,600
asset something like this or unlock asset.

589
00:31:45,600 --> 00:31:50,100
And that would just be whatever the entry ID is and this is the group

590
00:31:50,100 --> 00:31:52,700
The assets, you know, for the group, right?

591
00:31:55,100 --> 00:31:59,200
This game asset ID, where is that?

592
00:31:59,200 --> 00:32:01,000
Actually, there it is.

593
00:32:02,700 --> 00:32:06,000
Okay, so, where am I?

594
00:32:06,300 --> 00:32:12,900
Yeah, so this actually wants to be up there again, and this is render

595
00:32:12,900 --> 00:32:14,400
group, right?

596
00:32:14,400 --> 00:32:16,000
So this is going to unlock that asset.

597
00:32:16,000 --> 00:32:20,000
And then we need to do down here, right?

598
00:32:20,000 --> 00:32:24,500
Is when we actually do the push bitmap, call we need to lock the

599
00:32:24,500 --> 00:32:25,700
asset, right?

600
00:32:26,100 --> 00:32:28,800
So we need to do a lock asset call.

601
00:32:29,500 --> 00:32:30,300
Like so,

602
00:32:32,600 --> 00:32:39,500
and assuming that that succeeded then we should be able to, you know,

603
00:32:43,100 --> 00:32:44,400
Dispense with this check.

604
00:32:47,200 --> 00:32:51,300
And in fact I guess we can dispense with the check up above as well

605
00:32:51,300 --> 00:32:55,000
because since we have to get the bitmap in, we don't actually need to

606
00:32:55,000 --> 00:32:59,700
do and if bitmap anymore because that's just never thing, right?

607
00:33:00,200 --> 00:33:03,600
We always know that we had one because otherwise we wouldn't have

608
00:33:03,600 --> 00:33:04,300
pushed the call.

609
00:33:05,300 --> 00:33:08,900
So yeah, so that should be that should be exactly that.

610
00:33:10,700 --> 00:33:11,200
So yeah.

611
00:33:11,200 --> 00:33:15,200
So that would really be all we would do we have the lock asset in the

612
00:33:15,200 --> 00:33:16,500
unlock asset?

613
00:33:16,500 --> 00:33:17,500
If that makes sense.

614
00:33:23,800 --> 00:33:31,900
And, you know, again, this is why I say it's kind of ugly and I don't

615
00:33:31,900 --> 00:33:32,800
super love this.

616
00:33:33,200 --> 00:33:38,700
I would probably say that based on how much I'm seeing here, I would

617
00:33:38,700 --> 00:33:39,000
say that.

618
00:33:39,000 --> 00:33:43,000
The better thing to do is just leave ground chunk bitmaps resident at

619
00:33:43,000 --> 00:33:43,900
all times.

620
00:33:43,900 --> 00:33:46,100
So they cannot be evicted.

621
00:33:46,600 --> 00:33:49,100
It's like only victim oil if that makes sense.

622
00:33:49,800 --> 00:33:51,700
Because the number of things that are going to be participating them

623
00:33:51,700 --> 00:33:52,700
as far as so small, they

624
00:33:52,900 --> 00:33:54,100
Still be streamed in.

625
00:33:54,200 --> 00:33:57,600
They just can't ever be kicked streamed out, right.

626
00:33:59,400 --> 00:34:00,100
But we'll see.

627
00:34:00,700 --> 00:34:01,200
We'll see.

628
00:34:01,600 --> 00:34:04,800
So the way that that would work is in here, we've got, you know, our

629
00:34:04,800 --> 00:34:06,300
asset state right?

630
00:34:07,400 --> 00:34:12,199
And and in there we basically need a lock count which would tell us.

631
00:34:12,300 --> 00:34:18,400
You know, how often, you know how many people were using this thing.

632
00:34:18,500 --> 00:34:22,699
Now, if we wanted to we could also say, oh, you know actually this

633
00:34:22,800 --> 00:34:27,100
This lockout could just be one thing could just have a single variable

634
00:34:27,699 --> 00:34:31,300
and, you know, you you just kind of like increment on it or something

635
00:34:31,300 --> 00:34:31,900
like that.

636
00:34:33,100 --> 00:34:36,100
And yeah, I'm not sure.

637
00:34:36,100 --> 00:34:37,199
I really like that.

638
00:34:37,600 --> 00:34:40,400
So yeah, it would be something like this where you just do a lockout

639
00:34:41,000 --> 00:34:46,100
and then inside lock asset, it would be a locked increment and

640
00:34:46,699 --> 00:34:48,199
Outsider would be a lakh decrement.

641
00:34:48,199 --> 00:34:48,800
You know what?

642
00:34:49,300 --> 00:34:51,600
I just having seen all that.

643
00:34:51,600 --> 00:34:52,300
I'm just like,

644
00:34:53,000 --> 00:34:55,400
I cannot believe that would ever be worth the trade-off.

645
00:34:55,500 --> 00:35:00,000
It just doesn't seem like it would ever be worth the trade-off to me.

646
00:35:00,100 --> 00:35:04,400
I can't see that being a good idea to me.

647
00:35:04,900 --> 00:35:11,400
It just seems like it would be inviting trouble in so many places,

648
00:35:11,600 --> 00:35:12,200
right?

649
00:35:12,600 --> 00:35:16,300
So, I think what I would rather do is just say that those assets.

650
00:35:17,000 --> 00:35:17,800
Get locked.

651
00:35:18,100 --> 00:35:19,200
That's just how they work.

652
00:35:20,300 --> 00:35:22,700
I'm there, they're just always in place, right?

653
00:35:22,800 --> 00:35:23,000
Right?

654
00:35:23,400 --> 00:35:27,100
So I think that's what I would do, I think that's what I what I would

655
00:35:27,100 --> 00:35:27,600
prefer.

656
00:35:30,700 --> 00:35:32,200
So, I'm going to go ahead and back that out.

657
00:35:33,100 --> 00:35:34,500
I just really don't like that.

658
00:35:34,600 --> 00:35:39,800
That was giving me a really bad it just it, required so much more

659
00:35:39,800 --> 00:35:46,600
stuff for such a small for really just such a small piece of the code

660
00:35:46,800 --> 00:35:49,300
because everybody else doesn't need that feature.

661
00:35:49,800 --> 00:35:53,800
And so like putting it in there just for background loading of ground

662
00:35:53,800 --> 00:35:54,100
chunks.

663
00:35:54,100 --> 00:35:58,000
Just seems so bad, right?

664
00:35:58,300 --> 00:35:59,100
So that's

665
00:36:00,000 --> 00:36:01,600
That's my call on that.

666
00:36:01,700 --> 00:36:06,500
I'm saying I'm saying it's not going in, that is not happening.

667
00:36:09,300 --> 00:36:12,200
Okay, so that's out.

668
00:36:13,900 --> 00:36:15,300
That is out.

669
00:36:16,300 --> 00:36:18,600
Oops, I went too far.

670
00:36:23,200 --> 00:36:23,800
My bad.

671
00:36:25,200 --> 00:36:25,800
Sorry.

672
00:36:28,700 --> 00:36:29,700
That's still fine.

673
00:36:44,100 --> 00:36:44,500
There we go.

674
00:36:47,000 --> 00:36:50,700
Okay, so

675
00:36:58,300 --> 00:36:59,000
see.

676
00:37:02,900 --> 00:37:03,400
All right.

677
00:37:04,400 --> 00:37:05,900
Just making sure everything's kosher there.

678
00:37:06,700 --> 00:37:07,100
So yeah.

679
00:37:07,100 --> 00:37:09,200
So I don't think that's a good idea.

680
00:37:09,900 --> 00:37:11,600
I don't like that at all.

681
00:37:12,300 --> 00:37:17,900
So what I would rather do is say that there's a concept of a locked

682
00:37:17,900 --> 00:37:22,200
resource, and lock resources are not allowed to get streamed out.

683
00:37:22,300 --> 00:37:23,000
That makes sense.

684
00:37:23,600 --> 00:37:28,300
So I'd much rather say something like asset State locked and a lock

685
00:37:28,300 --> 00:37:30,600
tree sorts can never get streamed out.

686
00:37:30,600 --> 00:37:34,000
Ever once it's loaded, its

687
00:37:34,200 --> 00:37:35,800
It for good, right?

688
00:37:37,200 --> 00:37:40,400
And the way that I would do that is inside load asset.

689
00:37:40,600 --> 00:37:46,100
When we do this stuff here, at the end of this work, when it's get

690
00:37:46,100 --> 00:37:46,600
set.

691
00:37:46,600 --> 00:37:49,700
So that it says that the asset state is loaded, what I'd rather do is

692
00:37:49,700 --> 00:37:58,500
say final State like so and that way we can have the luxury of marking

693
00:37:58,500 --> 00:38:02,400
anything, we want to be locked and then that thing can never be

694
00:38:02,800 --> 00:38:04,800
streamed out ever again.

695
00:38:05,100 --> 00:38:05,600
So

696
00:38:06,800 --> 00:38:12,800
That seems better to me right, there we go asset State, final State.

697
00:38:14,500 --> 00:38:17,800
And so, in this case, right, we don't have any of these are can all be

698
00:38:17,800 --> 00:38:22,100
streamed out there, not a problem, but when we add things later that

699
00:38:22,100 --> 00:38:27,300
have to be in the ground, chunk Arena, I shouldn't use the word Arena,

700
00:38:27,300 --> 00:38:32,800
but in the ground chunk usage case, then does those have to be locked

701
00:38:32,800 --> 00:38:35,000
because anything that happens for the rendering of the other thread

702
00:38:35,000 --> 00:38:35,900
has to stay locked.

703
00:38:36,900 --> 00:38:38,000
And we'll see how that goes.

704
00:38:38,100 --> 00:38:41,900
If we decide that it's too much, or too onerous for us to do that.

705
00:38:41,900 --> 00:38:44,600
Like there's too much stuff that gets has to stay in memory.

706
00:38:44,600 --> 00:38:47,700
In that case, we can know he's back pedal on that.

707
00:38:47,900 --> 00:38:51,800
But that seems like a pretty reasonable compromise because it means

708
00:38:51,800 --> 00:38:53,800
that there's a hell of a lot less code to deal with.

709
00:38:54,600 --> 00:38:55,100
All right?

710
00:38:57,300 --> 00:38:58,300
So there we go.

711
00:38:58,300 --> 00:38:59,800
That's it is

712
00:39:00,100 --> 00:39:05,600
Basically it for all that stuff, we still have to do some of the

713
00:39:05,600 --> 00:39:06,300
structural things.

714
00:39:06,300 --> 00:39:09,300
But at this point, I think we should probably start to talk about

715
00:39:09,300 --> 00:39:15,000
eviction right since it's a you know, since it's a thing, we should

716
00:39:15,000 --> 00:39:17,000
talk about this stuff the winning to announce stuff.

717
00:39:18,100 --> 00:39:22,900
So what we want to do here is when we load an asset currently, what

718
00:39:22,900 --> 00:39:27,700
we're doing is I think, you know, the debug load bitmap nonsense

719
00:39:28,900 --> 00:39:30,000
What's actually happening here?

720
00:39:30,000 --> 00:39:32,000
Is it just reads the entire file.

721
00:39:33,400 --> 00:39:34,900
And then it pretty much.

722
00:39:35,300 --> 00:39:38,800
I think it just does its work in place.

723
00:39:40,500 --> 00:39:41,600
Is that correct?

724
00:39:43,700 --> 00:39:44,600
Yeah.

725
00:39:45,100 --> 00:39:47,000
Yeah, Source desk.

726
00:39:47,000 --> 00:39:49,600
So you can kind of see here, right?

727
00:39:50,400 --> 00:39:54,800
When we load these, these bitmaps in the bitmaps, are just getting

728
00:39:54,800 --> 00:39:55,200
loaded.

729
00:39:55,200 --> 00:40:01,000
They're getting allocated by the, by the platform layer and we just

730
00:40:01,000 --> 00:40:03,000
always use that memory in place, right?

731
00:40:04,100 --> 00:40:08,700
So really, we don't even have the option here of doing anything smart

732
00:40:08,700 --> 00:40:13,500
about this when we actually load this guy into into memory.

733
00:40:14,300 --> 00:40:18,500
So I I guess maybe it's premature.

734
00:40:18,500 --> 00:40:22,400
Now, I think about it to do this quite yet it may be.

735
00:40:22,400 --> 00:40:28,400
That what we would rather do is actually tackle this other part first

736
00:40:28,600 --> 00:40:31,700
which is like the bitmap structural stuff.

737
00:40:32,200 --> 00:40:33,700
Because what I'm seeing when I look at

738
00:40:33,900 --> 00:40:36,400
this and I suppose, I could move this back down to where we had it for

739
00:40:36,400 --> 00:40:39,200
now, like so,

740
00:40:43,000 --> 00:40:48,900
What I'm seeing when I look at this is it's looking to me like will

741
00:40:48,900 --> 00:40:52,300
want to start working with a table of what are all the things are that

742
00:40:52,300 --> 00:40:53,300
we have in the game.

743
00:40:55,500 --> 00:41:02,300
And if we're working in that space I feel like that's where we want to

744
00:41:02,300 --> 00:41:05,500
start to do stuff like have a general table that stores all of our

745
00:41:05,500 --> 00:41:07,500
bitmap information and this sort of stuff.

746
00:41:08,100 --> 00:41:10,900
So I kind of feel like that's where we should actually be headed.

747
00:41:10,900 --> 00:41:14,900
So I think I'm going to push that direction first finish up that part

748
00:41:14,900 --> 00:41:17,300
of the asset stuff, which isn't really have anything to do with

749
00:41:17,300 --> 00:41:17,800
background screaming.

750
00:41:17,800 --> 00:41:22,000
That's just starting to put ourselves in a more complete position.

751
00:41:22,000 --> 00:41:25,000
In terms of just our asset Concept in general,

752
00:41:26,200 --> 00:41:32,900
I think I'd rather do that and then come back to the to the sort of

753
00:41:32,900 --> 00:41:34,900
memory management aspect of it.

754
00:41:35,300 --> 00:41:37,900
And again we're under a really no pressure to do that because we don't

755
00:41:37,900 --> 00:41:40,500
have hardly that many asset resources.

756
00:41:40,800 --> 00:41:43,300
I don't even know if in the end we'll have that many asset resources.

757
00:41:43,300 --> 00:41:49,000
I suspect, we will though like are uncompressed compressed asset load.

758
00:41:50,100 --> 00:41:53,400
Could very easily be well above, say four gigabytes or something, that

759
00:41:53,400 --> 00:41:55,200
might be a reasonable footprint for a game.

760
00:41:56,300 --> 00:41:59,500
Unlike the lower spec machines or something, although

761
00:42:00,900 --> 00:42:02,700
I don't know if that's actually true because on the lower start

762
00:42:02,700 --> 00:42:05,200
machines, you probably wouldn't be loading the highest risk, all

763
00:42:05,200 --> 00:42:05,500
right?

764
00:42:05,500 --> 00:42:08,300
So you could do other stuff but yeah, but yeah.

765
00:42:09,800 --> 00:42:11,800
Suffice to say, it could happen.

766
00:42:12,800 --> 00:42:15,800
So anyway what I want to do here is start to tackle some of these

767
00:42:15,800 --> 00:42:16,500
other problems.

768
00:42:16,500 --> 00:42:19,800
So we have these irate assets here and I'd like to start to tackle The

769
00:42:19,800 --> 00:42:23,900
Irate assets as something that we want to deal with right.

770
00:42:24,700 --> 00:42:26,600
And so we have a game asset ID here.

771
00:42:26,900 --> 00:42:30,300
What I'd like to do is expand the notion of a game asset ID to talk

772
00:42:30,300 --> 00:42:34,800
about things that maybe don't really have anything to do with specific

773
00:42:34,800 --> 00:42:39,200
bitmaps and that are rather a more General concept of what is going

774
00:42:39,200 --> 00:42:39,400
on.

775
00:42:39,700 --> 00:42:40,500
Right.

776
00:42:41,500 --> 00:42:46,800
So we've got two types of things there that we would expect, we have

777
00:42:46,800 --> 00:42:51,300
grass stone, tough stuff, which is like an array of things.

778
00:42:51,300 --> 00:42:53,500
So we have like grass and there's some array of them.

779
00:42:54,000 --> 00:42:59,100
And then we also have things like hero bitmaps where the hero bitmaps

780
00:42:59,100 --> 00:43:02,300
have like a facing Direction and then there's like some of them

781
00:43:02,300 --> 00:43:03,900
they're like kind of paired together.

782
00:43:04,900 --> 00:43:09,400
So we kind of have two sets of things that were talking about.

783
00:43:09,500 --> 00:43:14,300
Two two types of structure that we want to address directly, right?

784
00:43:15,400 --> 00:43:20,100
So what I'd like to do with this one here is I say well, okay, we've

785
00:43:20,100 --> 00:43:21,400
got these grass arrays.

786
00:43:21,600 --> 00:43:26,700
What I'd like to do is introduce sort of the concept that we have.

787
00:43:27,500 --> 00:43:32,200
You know, I don't know what you want to call it a game asset.

788
00:43:34,000 --> 00:43:41,500
I don't know, maybe a game, let's say asset bitmap label or something

789
00:43:41,500 --> 00:43:43,200
like this or something.

790
00:43:43,200 --> 00:43:45,000
I'm not sure what exactly would be called.

791
00:43:45,300 --> 00:43:48,700
But what I want to do is basically something that describes this

792
00:43:48,700 --> 00:43:51,000
particular thing, right?

793
00:43:51,500 --> 00:43:55,800
And so loaded bitmap, you know, is basically what that was before.

794
00:43:57,000 --> 00:44:01,800
All we would use is in the render group we'd have loaded bitmap and

795
00:44:01,800 --> 00:44:03,600
you can see exactly what it has on there.

796
00:44:03,600 --> 00:44:08,000
It's got a line percentage with over height with high pitch and

797
00:44:08,000 --> 00:44:09,000
memory, right?

798
00:44:09,000 --> 00:44:10,000
It's got that stuff.

799
00:44:10,600 --> 00:44:10,800
What?

800
00:44:10,800 --> 00:44:15,000
I'm more interested now is the part of these things that we

801
00:44:15,200 --> 00:44:18,000
Might want to save as a descriptor of this thing, right?

802
00:44:18,000 --> 00:44:20,400
We don't care about the pitch of the memory that's like stuff that's

803
00:44:20,400 --> 00:44:21,000
loaded.

804
00:44:22,200 --> 00:44:23,800
I guess we can call up it mapinfo.

805
00:44:24,500 --> 00:44:27,700
And these are some, some properties that we know we had, but in

806
00:44:27,700 --> 00:44:33,000
addition to that, maybe we also have like a couple Properties or tags

807
00:44:33,000 --> 00:44:33,700
of this thing.

808
00:44:36,500 --> 00:44:38,200
That can be on there, right?

809
00:44:38,600 --> 00:44:42,500
So maybe we have something like an asset tag, right?

810
00:44:42,500 --> 00:44:47,400
And that asset tag is like the tag and the value or something like

811
00:44:47,400 --> 00:44:48,600
this, right?

812
00:44:49,200 --> 00:44:56,100
And there's something in cure of the form, you know, tag count and,

813
00:44:56,700 --> 00:44:59,800
and or something like, you know, first

814
00:45:00,200 --> 00:45:03,200
Index and tag count something like that.

815
00:45:04,400 --> 00:45:04,900
I don't know.

816
00:45:05,100 --> 00:45:06,600
You get the idea, right?

817
00:45:08,400 --> 00:45:12,100
So I'd like to do is sort of talk about like can we make something

818
00:45:12,500 --> 00:45:17,500
that allows us to start to sort of start to create a table of these

819
00:45:17,500 --> 00:45:24,600
assets where the code could read the table and know something about

820
00:45:24,600 --> 00:45:25,000
what?

821
00:45:25,000 --> 00:45:26,900
It was getting right?

822
00:45:27,700 --> 00:45:32,000
And so for example, in the case of like the grasses or the stones,

823
00:45:32,000 --> 00:45:32,500
right?

824
00:45:32,800 --> 00:45:37,100
Is there some way that we could make a way of marking up the art

825
00:45:37,100 --> 00:45:38,100
assets to

826
00:45:38,500 --> 00:45:43,000
That here are the things that ground chunk construction are concerned

827
00:45:43,000 --> 00:45:47,100
with, and here are some that represent like a Stony surface.

828
00:45:47,100 --> 00:45:49,000
And here are some that represent a grassy surface.

829
00:45:49,000 --> 00:45:51,900
And for the ones that represent a graph, these grassy surface here is

830
00:45:51,900 --> 00:45:54,500
like this and that and whatever, right?

831
00:45:55,900 --> 00:45:58,000
So I'm just wondering if we can maybe do something like this.

832
00:45:58,000 --> 00:46:02,500
I don't know if that's a good particular way that I've got it in there

833
00:46:02,500 --> 00:46:06,700
right now but that's sort of the thing that I am going to sort of look

834
00:46:06,700 --> 00:46:07,100
towards.

835
00:46:07,100 --> 00:46:08,100
So what I want to do here is

836
00:46:08,200 --> 00:46:08,600
Is right?

837
00:46:08,600 --> 00:46:12,900
The usage code first, I want to write the usage code so that we can

838
00:46:16,400 --> 00:46:20,400
See how it would actually play out in practice and so I'm going to go

839
00:46:20,400 --> 00:46:22,500
over to fill ground chunk, right?

840
00:46:22,900 --> 00:46:24,700
And infill, ground chunk.

841
00:46:25,100 --> 00:46:30,000
You can see that it's sort of does this random seed stuff here, right?

842
00:46:30,000 --> 00:46:31,500
It's doing a random seed thing.

843
00:46:32,200 --> 00:46:35,000
It's a little hard without having more World, building code to know

844
00:46:35,000 --> 00:46:36,100
exactly how this would work.

845
00:46:36,100 --> 00:46:38,500
But you can kind of see and hear when it picks stuff.

846
00:46:41,200 --> 00:46:43,400
Wait sorry that random seed is for inner Flame, the series.

847
00:46:43,500 --> 00:46:43,700
Sorry.

848
00:46:43,700 --> 00:46:44,300
I was back bill.

849
00:46:44,300 --> 00:46:48,200
It's it's a random choice, right?

850
00:46:48,800 --> 00:46:50,600
It's randomly choosing between these things.

851
00:46:50,600 --> 00:46:53,100
It randomly chooses between one of two different things and then it

852
00:46:53,100 --> 00:46:56,900
randomly chooses, in here, out of whether it's going to put down stone

853
00:46:56,900 --> 00:46:58,500
or grass or whatever, right?

854
00:46:59,700 --> 00:47:00,500
This sort of stuff.

855
00:47:00,700 --> 00:47:07,400
And, and in the, in the decoration case does base of the same thing at

856
00:47:07,400 --> 00:47:10,400
picks one of the random Tufts that it has there, or whatever.

857
00:47:11,400 --> 00:47:15,300
So if we think about what that's doing, you could imagine if we were

858
00:47:15,300 --> 00:47:17,800
trying to fill a ground chuck, where we have specific information

859
00:47:17,800 --> 00:47:19,900
about what we're supposed to go in this ground chunk, you could

860
00:47:19,900 --> 00:47:24,100
imagine first of all, us wanting to make this choice not necessarily

861
00:47:24,100 --> 00:47:24,600
randomly.

862
00:47:24,600 --> 00:47:27,800
Like, for example, we would say whether it was grass or stone would be

863
00:47:27,800 --> 00:47:31,800
based on some input as to the region that we were placed at the

864
00:47:31,800 --> 00:47:33,700
current like location, right?

865
00:47:34,500 --> 00:47:38,700
And the other thing that we would want to do is in here where we're

866
00:47:38,700 --> 00:47:40,300
doing things like random

867
00:47:40,400 --> 00:47:40,900
choices.

868
00:47:41,000 --> 00:47:44,400
We may want to pick choices that make more sense for the area.

869
00:47:44,400 --> 00:47:48,800
So, for example, if this is an area with taller grasses, then maybe

870
00:47:48,800 --> 00:47:52,300
we're airing on the side of tall grasses, more often than other

871
00:47:52,300 --> 00:47:52,900
grasses.

872
00:47:53,400 --> 00:47:57,100
Whereas, if we are in an area of Short Grass, then we wouldn't pick

873
00:47:57,400 --> 00:47:59,200
the tall grasses, right?

874
00:48:00,700 --> 00:48:05,500
So that's just, that's just what I'm thinking.

875
00:48:10,400 --> 00:48:13,600
I'm trying to think whether I can really emulate that with the art

876
00:48:13,600 --> 00:48:15,800
assets that we have in here right now.

877
00:48:15,800 --> 00:48:16,800
Oh, I can, you know what?

878
00:48:16,800 --> 00:48:21,900
I could just scale them and pretend that but but let's take a look.

879
00:48:21,900 --> 00:48:25,500
As I don't actually remember, it's been a long time since we actually

880
00:48:25,500 --> 00:48:30,400
took a look at any of these, what they actually are in the tuft case.

881
00:48:30,900 --> 00:48:34,100
So there's the Tufts, I don't really have much in here.

882
00:48:34,100 --> 00:48:38,700
I probably should have put in some more art assets, sometime soon.

883
00:48:40,000 --> 00:48:42,600
So we can start playing with them the Rocks.

884
00:48:42,800 --> 00:48:45,500
However I guess are a good example.

885
00:48:45,500 --> 00:48:50,800
You can see there's like a Flat Rock as well as some more bulbous

886
00:48:50,800 --> 00:48:52,600
rocks and that would be an example.

887
00:48:52,600 --> 00:48:54,800
But yeah, I don't know that.

888
00:48:54,800 --> 00:48:57,200
We really have anything we can super test with.

889
00:48:57,700 --> 00:49:02,200
So maybe I'll have to go dig around and put some more ass at it, art

890
00:49:02,200 --> 00:49:04,500
Assets in there that we could use for this.

891
00:49:06,300 --> 00:49:10,100
But suffice to say the way that we would do this, presumably is it

892
00:49:10,100 --> 00:49:12,700
would basically rank the ones are in there.

893
00:49:12,700 --> 00:49:15,700
I don't know if it would be a little too long to rank and each

894
00:49:15,700 --> 00:49:21,000
individual one but yeah, that's sort of what I'm thinking, right?

895
00:49:21,000 --> 00:49:22,200
That's sort of what I'm thinking.

896
00:49:23,900 --> 00:49:25,500
So how to do this efficiently?

897
00:49:27,600 --> 00:49:30,100
So here is one way, right?

898
00:49:31,500 --> 00:49:36,100
Let's say you have these tags, right?

899
00:49:36,900 --> 00:49:43,800
Let's say I have something like asset or or you know in to pick best,

900
00:49:44,000 --> 00:49:44,500
right?

901
00:49:45,000 --> 00:49:48,800
And I was going to go over some array of these Assets in fact bitmap

902
00:49:48,800 --> 00:49:50,100
infos, right?

903
00:49:52,400 --> 00:49:54,900
So, I had something like this, and I was going to e.r.

904
00:49:54,900 --> 00:49:56,000
iterate over these.

905
00:49:56,000 --> 00:50:02,300
So I have, you know, an info count and I go over them and I, you know,

906
00:50:04,300 --> 00:50:05,000
Do this.

907
00:50:07,900 --> 00:50:10,400
And I oops, that's not what I do at all.

908
00:50:13,900 --> 00:50:15,200
Sorry, I do this.

909
00:50:18,400 --> 00:50:22,100
And inside here, I'm just going to Loop over however many there

910
00:50:22,100 --> 00:50:23,700
actually are, right?

911
00:50:26,300 --> 00:50:32,100
And when I do this, what I have to do now is ranked the tags of this

912
00:50:32,100 --> 00:50:33,300
guy, right?

913
00:50:33,900 --> 00:50:38,300
So I would I would essentially go, you know, tag and x equals First

914
00:50:38,300 --> 00:50:39,300
tag index.

915
00:50:40,300 --> 00:50:42,300
And then I would do tug index is less than.

916
00:50:42,300 --> 00:50:45,600
In fact, this is probably one passed last tag index.

917
00:50:46,300 --> 00:50:51,100
So I would do something like that tag and x 60.

918
00:50:51,600 --> 00:50:55,700
So, I would go in through this table and I would read out what all the

919
00:50:55,700 --> 00:50:56,000
things,

920
00:50:56,100 --> 00:50:57,700
Is were in there, right?

921
00:50:58,200 --> 00:50:59,600
And when I did that,

922
00:51:01,100 --> 00:51:04,800
I would be able to to grab whatever the tag was.

923
00:51:04,800 --> 00:51:10,800
So I'd have an asset tag tag and I would see which one it actually was

924
00:51:11,100 --> 00:51:11,500
okay.

925
00:51:15,100 --> 00:51:17,100
And I'd probably also have a big in here that was like

926
00:51:18,700 --> 00:51:20,600
Match Vector, right?

927
00:51:22,500 --> 00:51:27,200
And so, what I would do is, I'd say, all right, the tags list, right?

928
00:51:27,300 --> 00:51:28,500
Whichever tag Index.

929
00:51:28,500 --> 00:51:33,200
This is, I'd go ahead and take, you know, the difference or something.

930
00:51:34,800 --> 00:51:39,000
I could also do the wait, you know, something like this match, vector,

931
00:51:39,000 --> 00:51:40,000
and a weight vector.

932
00:51:42,200 --> 00:51:44,800
What I do is I say all right the difference here is whatever the

933
00:51:44,800 --> 00:51:51,700
weight Vector is for this tag ID or whatever, right?

934
00:51:52,100 --> 00:51:56,500
For this tag Ivy times, whatever the match Vector is for this tag ID,

935
00:51:58,700 --> 00:52:01,400
write the absolute value.

936
00:52:05,100 --> 00:52:05,800
Value.

937
00:52:12,200 --> 00:52:16,700
Of that and whatever the value of the actual tag is, right?

938
00:52:20,000 --> 00:52:23,400
Like so I should probably maybe do it like this so you can see it a

939
00:52:23,400 --> 00:52:24,300
little more clearly.

940
00:52:25,400 --> 00:52:28,700
So I have the difference which is just the difference between the tag

941
00:52:28,700 --> 00:52:33,400
value and what I would want to get and then I would have you know,

942
00:52:33,400 --> 00:52:36,300
something that sort of does awaited difference, right?

943
00:52:36,300 --> 00:52:37,000
Waited

944
00:52:38,600 --> 00:52:43,000
Like so and then I would sum those or something.

945
00:52:45,100 --> 00:52:53,800
so I'd say total GIF or total weighted death 10 total weighted, if

946
00:52:53,800 --> 00:52:55,000
plus equals waited

947
00:52:57,200 --> 00:53:02,200
and then I would say, okay, whichever one

948
00:53:06,600 --> 00:53:07,300
was best.

949
00:53:11,000 --> 00:53:12,600
This would be the best F here.

950
00:53:14,700 --> 00:53:16,800
Best gift would be real 32 maximum.

951
00:53:18,300 --> 00:53:25,800
I've come through here and say, if the best, if is greater than the

952
00:53:25,800 --> 00:53:29,000
total weighted death, then the best is equals, the total weighted diff

953
00:53:30,100 --> 00:53:32,200
and it also have the best index here.

954
00:53:33,100 --> 00:53:36,400
And I'd say best index equals info index

955
00:53:39,500 --> 00:53:41,600
So this is the super slow way, right?

956
00:53:43,100 --> 00:53:46,900
So basically, what could happen is here someone who had a particular

957
00:53:46,900 --> 00:53:50,000
idea of something that they wanted to grab, right?

958
00:53:50,400 --> 00:53:53,300
And these all of these disciples will be marked up by tags.

959
00:53:53,300 --> 00:53:55,000
That were basically, some set of ID's.

960
00:53:55,000 --> 00:53:58,100
Just I don't care how many there are and I don't care what they mean,

961
00:53:58,600 --> 00:53:59,800
but we just agree.

962
00:54:00,100 --> 00:54:03,000
That, you know, any particular piece of code is using some set of ID's

963
00:54:03,000 --> 00:54:07,100
that the art assets has to be marked up by and those IDs have some

964
00:54:07,100 --> 00:54:08,000
value associate with them.

965
00:54:08,000 --> 00:54:11,100
These could be stuff like tallness and then this value would be like

966
00:54:11,100 --> 00:54:12,800
how tall the thing is, right or whatever.

967
00:54:14,700 --> 00:54:17,200
This thing that does pick best with then actually just do that.

968
00:54:17,200 --> 00:54:21,500
It would go through these things and, you know, you'd pass in a match

969
00:54:21,500 --> 00:54:22,600
vector and a weight Vector.

970
00:54:22,600 --> 00:54:26,800
The weight Vector is how much you care about, you know, from 0 to 1,

971
00:54:26,900 --> 00:54:30,500
how much you care about each of these traits.

972
00:54:30,500 --> 00:54:33,400
And this is what the value of each of the traits is that you're trying

973
00:54:33,400 --> 00:54:34,000
to match.

974
00:54:34,200 --> 00:54:37,200
You would then go through and for each one of them you would see how

975
00:54:37,200 --> 00:54:41,800
far away you are from the desired value and multiply that by whatever

976
00:54:41,800 --> 00:54:43,000
the wait was for that.

977
00:54:43,600 --> 00:54:44,100
And then you'd see.

978
00:54:44,300 --> 00:54:46,100
Who came up with the best score.

979
00:54:46,300 --> 00:54:49,400
That would basically allow you to select out of a pool of assets that

980
00:54:49,400 --> 00:54:52,300
you've never seen before and had no idea what they were.

981
00:54:52,400 --> 00:54:55,100
It would allow you to select the one that best matches the criteria

982
00:54:55,100 --> 00:54:58,500
that you're trying to get for whatever the thing is that you're trying

983
00:54:58,500 --> 00:55:01,500
to draw, right?

984
00:55:01,700 --> 00:55:08,400
And so, you know, that's one example of how we could do it, right?

985
00:55:09,000 --> 00:55:12,500
And so when we load in the asset pact with the asset Packwood having

986
00:55:12,500 --> 00:55:14,000
it is would have these bitmaps.

987
00:55:14,000 --> 00:55:14,100
They

988
00:55:14,200 --> 00:55:18,700
Would be tagged we would then have at load time all those tags loaded

989
00:55:18,700 --> 00:55:22,100
in so we would know what bitmap we were looking for in a given time by

990
00:55:22,100 --> 00:55:25,200
looking at the how the tax matched out, for whatever it is that we're

991
00:55:25,200 --> 00:55:26,900
trying to do at that time, right?

992
00:55:28,100 --> 00:55:29,900
So we can do that, right?

993
00:55:30,500 --> 00:55:32,600
We could straight up do that and

994
00:55:40,400 --> 00:55:41,100
What can I say?

995
00:55:44,800 --> 00:55:47,300
I can't think of a whole lot of reasons not to do it that way.

996
00:55:48,600 --> 00:55:50,000
Seems pretty flexible.

997
00:55:51,100 --> 00:55:54,400
And then what we could have on top of that, is just some set of fixed

998
00:55:54,400 --> 00:55:54,800
Arena.

999
00:55:54,800 --> 00:55:59,300
So that this search doesn't take too long, where we would essentially

1000
00:55:59,300 --> 00:56:03,000
say that, you know, each one of these bitmap infos has something in it

1001
00:56:03,100 --> 00:56:08,000
or probably even that they come in bulk groups, right?

1002
00:56:08,000 --> 00:56:12,200
So we have like an asset bitmap group or something like this.

1003
00:56:14,000 --> 00:56:18,500
I or just an asset group and that asset group itself has an ID.

1004
00:56:18,500 --> 00:56:19,600
That's like, what are these?

1005
00:56:19,600 --> 00:56:22,600
Oh, this is hero bitmaps or something like this, right?

1006
00:56:23,600 --> 00:56:26,500
And so maybe they can be matched, kind of like a little bit more,

1007
00:56:26,500 --> 00:56:29,600
hierarchical e, you know, or could we could even do it this way,

1008
00:56:29,800 --> 00:56:30,000
right?

1009
00:56:30,000 --> 00:56:33,000
Where an asset group has a set of tags on it.

1010
00:56:33,700 --> 00:56:38,600
And so you can sort of pull out particular asset groups that go with

1011
00:56:38,600 --> 00:56:42,000
certain things that you're trying to do and then you don't have to

1012
00:56:42,000 --> 00:56:42,800
search all the bit

1013
00:56:43,000 --> 00:56:44,200
Between them, right.

1014
00:56:47,200 --> 00:56:48,100
Something like this.

1015
00:56:50,400 --> 00:56:53,400
So yeah, I think I'm going to leave it there for now.

1016
00:56:56,300 --> 00:56:59,500
because I think at least at the moment and I'm going to put this

1017
00:57:00,000 --> 00:57:03,200
I'm gonna make this compile, I think we want to explore this a little

1018
00:57:03,200 --> 00:57:06,900
bit more before committing to anything since we're kind of getting to

1019
00:57:06,900 --> 00:57:10,900
the end of the stream here, I just want to leave it at that and we can

1020
00:57:10,900 --> 00:57:12,200
talk about it, some more tomorrow.

1021
00:57:12,600 --> 00:57:19,800
For now we can go to the Q&A because it is Q and A Time as you know.

1022
00:57:20,200 --> 00:57:24,500
So if anyone has any questions, please go ahead and ask them now.

1023
00:57:24,500 --> 00:57:28,000
Put Q: in front of them so that I can see them and please try to keep

1024
00:57:28,000 --> 00:57:29,700
them to the stuff that we are.

1025
00:57:30,000 --> 00:57:34,300
Working on so that it can be on topic.

1026
00:57:38,800 --> 00:57:40,700
Robot chocolate Dino in pick best.

1027
00:57:40,700 --> 00:57:42,900
Would you want other types of fall-off and Computing?

1028
00:57:42,900 --> 00:57:43,500
The difference?

1029
00:57:43,500 --> 00:57:45,600
Probably.

1030
00:57:46,400 --> 00:57:52,400
You wouldn't care but you could certainly have that, right?

1031
00:57:58,100 --> 00:58:01,000
When compiling for 64-bit shouldn't you be using interlocked compare

1032
00:58:01,000 --> 00:58:02,300
exchange 64?

1033
00:58:05,600 --> 00:58:06,800
I'm not sure.

1034
00:58:07,800 --> 00:58:10,500
Are you saying that for like a performance reason or something?

1035
00:58:12,200 --> 00:58:14,900
The value that we're exchanging is only 32 bits.

1036
00:58:14,900 --> 00:58:18,700
So I don't know why.

1037
00:58:18,800 --> 00:58:22,100
I don't I'm not sure why we would do a little luck, a exchange 64.

1038
00:58:22,100 --> 00:58:23,300
In this particular case,

1039
00:58:30,200 --> 00:58:33,200
In your example of having 32 GB of assets uncompressed and two

1040
00:58:33,200 --> 00:58:34,200
gigabytes of space for them.

1041
00:58:34,200 --> 00:58:36,500
Are there techniques you can use to tell whether you will need more

1042
00:58:36,500 --> 00:58:38,200
than 2 gigabytes at one time?

1043
00:58:38,900 --> 00:58:43,700
Well obviously you can do this by playing the game and monitoring it

1044
00:58:45,100 --> 00:58:48,300
and you can also make reasonably conservative estimates like for our

1045
00:58:48,300 --> 00:58:48,500
game.

1046
00:58:48,500 --> 00:58:51,100
For example, we know that we're a 2-D game, we know there's only so

1047
00:58:51,100 --> 00:58:55,300
much overdraw and so many different Graphics that we're going to have.

1048
00:58:55,300 --> 00:58:59,200
We can probably put a pretty conservative bound on it, but no.

1049
00:58:59,400 --> 00:59:03,700
There is no way, I mean, without having some kind of a crazy sort of

1050
00:59:03,700 --> 00:59:08,500
like, static code, analyzing solver or nightmare thing to actually be

1051
00:59:08,500 --> 00:59:11,600
able to prove exactly what the maximum you would.

1052
00:59:12,100 --> 00:59:15,800
The minimum you would need to guarantee that you can always load

1053
00:59:15,800 --> 00:59:17,800
everything you might need for any given frame.

1054
00:59:17,800 --> 00:59:19,800
The game could possibly draw.

1055
00:59:19,900 --> 00:59:23,600
But usually, you can make sure that you're so far above what that

1056
00:59:23,600 --> 00:59:24,300
could possibly be.

1057
00:59:24,300 --> 00:59:25,900
Anyway, that's not that big of a deal.

1058
00:59:44,800 --> 00:59:48,500
To summarize what you've done from the artists perspective.

1059
00:59:48,500 --> 00:59:53,300
Did you add a light obligation to the contract between the programmer

1060
00:59:53,300 --> 00:59:54,300
and the artist?

1061
00:59:57,400 --> 00:59:59,800
I'm sorry, I'm not a sure I understand.

1062
01:00:00,200 --> 01:00:02,400
That question.

1063
01:00:08,300 --> 01:00:11,500
I mean it is Gang scene is a contractor.

1064
01:00:11,500 --> 01:00:19,400
She's not an employee if that's what you mean but I mean she's under

1065
01:00:19,400 --> 01:00:23,000
no obligation to keep working on the game if she wants to stop working

1066
01:00:23,000 --> 01:00:27,000
on it she can just like an employee could quit at any time.

1067
01:00:28,500 --> 01:00:32,200
I don't think it's common for contracts to have obligations that

1068
01:00:32,200 --> 01:00:35,400
somebody like an artist stay on till the end of a project.

1069
01:00:35,400 --> 01:00:37,600
I think that's very rare sometimes.

1070
01:00:37,700 --> 01:00:47,400
Our payment contingencies like, you know, maybe you get some bonus, if

1071
01:00:47,400 --> 01:00:50,500
you stay to completion, or if there's like royalties involved, you

1072
01:00:50,500 --> 01:00:51,300
only get the royalties.

1073
01:00:51,300 --> 01:00:54,600
If you certainly, there's things like that sometimes, but that's the

1074
01:00:54,600 --> 01:00:55,300
only thing I could think of.

1075
01:00:55,300 --> 01:00:56,200
So, I'm sorry, I'm not sure.

1076
01:00:56,200 --> 01:00:57,400
I really understand what the question is.

1077
01:00:57,400 --> 01:00:58,200
Trying to ask.

1078
01:01:02,700 --> 01:01:05,300
If you can't evict luck resources, what would be the point of

1079
01:01:05,300 --> 01:01:06,000
streaming them?

1080
01:01:06,000 --> 01:01:08,800
Over just loading them up front and doesn't it put a restraint on the

1081
01:01:08,800 --> 01:01:10,200
diversity of the environments?

1082
01:01:10,200 --> 01:01:11,100
You can have.

1083
01:01:12,300 --> 01:01:15,000
So I don't think it really puts a restraint on the diversity of the

1084
01:01:15,000 --> 01:01:17,800
environment you have because we're only talking about ground chunks.

1085
01:01:18,100 --> 01:01:20,600
So the number of things that will make up a ground texture.

1086
01:01:20,800 --> 01:01:26,100
I mean, even if you had to lock half a gigabytes worth of bitmaps or

1087
01:01:26,100 --> 01:01:28,000
something, the streaming was still work.

1088
01:01:28,000 --> 01:01:29,100
Fine, right?

1089
01:01:29,500 --> 01:01:32,000
And that's so much ground.

1090
01:01:32,100 --> 01:01:35,300
Texture to work with, like I can't imagine that ever being a problem

1091
01:01:35,500 --> 01:01:41,000
and chances are we're talking more like 256k or something like this.

1092
01:01:41,000 --> 01:01:41,300
Oh G.

1093
01:01:41,300 --> 01:01:43,800
Well, probably not that we probably talked about something like 64.

1094
01:01:43,800 --> 01:01:45,500
MB of locked worst.

1095
01:01:45,500 --> 01:01:46,100
Right.

1096
01:01:47,500 --> 01:01:49,400
So I'm not sure I care about it too much.

1097
01:01:49,400 --> 01:01:51,600
Like I said, it looked like the code overhead was just going to be

1098
01:01:51,600 --> 01:01:52,200
annoying.

1099
01:01:52,300 --> 01:01:56,600
So I don't think it would be a good idea to do it that way, but we'll

1100
01:01:56,600 --> 01:02:00,200
revisit that, if it turns out, we somehow have 10 gigabytes of ground

1101
01:02:00,200 --> 01:02:01,700
texture then,

1102
01:02:02,100 --> 01:02:04,800
You know, we'd revisit that but I suspect that it will be a very, very

1103
01:02:04,800 --> 01:02:08,400
small portion of the footprint as to why you still stream them.

1104
01:02:08,700 --> 01:02:10,400
The reason is so you never have a loading screen.

1105
01:02:11,000 --> 01:02:13,200
Like, I always liked games to run immediately, right?

1106
01:02:14,000 --> 01:02:16,200
And so I don't want to have a loading screen, it's like hey, why don't

1107
01:02:16,200 --> 01:02:17,000
you sit here?

1108
01:02:17,100 --> 01:02:21,500
And wait, while I load up all of the ground chunk data, even though

1109
01:02:21,900 --> 01:02:25,900
we're not going to draw half of it even, or even 10% of it for a long

1110
01:02:25,900 --> 01:02:28,100
time, till you get to like the ice area or whatever.

1111
01:02:28,100 --> 01:02:30,400
We don't need the ice bitmaps, right?

1112
01:02:30,400 --> 01:02:32,000
So I don't like to waste the users time.

1113
01:02:32,100 --> 01:02:33,700
Waiting for things that aren't necessary.

1114
01:02:33,700 --> 01:02:36,500
So that's why I want everything to be streamed even if some things

1115
01:02:36,500 --> 01:02:39,500
never stream out because it makes it easier to make sure the code will

1116
01:02:39,500 --> 01:02:40,200
be correct.

1117
01:02:43,400 --> 01:02:47,000
Shouldn't you fill work completely before calling platform at entry

1118
01:02:47,000 --> 01:02:48,300
for load asset work?

1119
01:02:50,800 --> 01:02:52,400
Yes, I should.

1120
01:02:52,400 --> 01:02:53,600
Did I miss something?

1121
01:02:57,900 --> 01:02:59,300
So,

1122
01:03:05,700 --> 01:03:06,600
Bonus at work.

1123
01:03:06,600 --> 01:03:10,900
We have assets file name ID should I put these in the right order?

1124
01:03:10,900 --> 01:03:11,600
Not that it matters.

1125
01:03:11,600 --> 01:03:15,800
But task bitmap has alignment Ally next.

1126
01:03:15,800 --> 01:03:16,200
Top down.

1127
01:03:16,200 --> 01:03:17,000
Line wife up.

1128
01:03:18,700 --> 01:03:19,800
Yeah, so there are all.

1129
01:03:20,400 --> 01:03:21,700
They are all filled.

1130
01:03:23,300 --> 01:03:25,000
Oh no.

1131
01:03:25,000 --> 01:03:26,100
How did this get there?

1132
01:03:27,300 --> 01:03:27,900
Ah,

1133
01:03:29,700 --> 01:03:30,900
thank you for catching that.

1134
01:03:31,500 --> 01:03:33,100
That was definitely not supposed to be.

1135
01:03:33,100 --> 01:03:35,000
I did not think that was what was happening?

1136
01:03:36,400 --> 01:03:38,000
That is totally wrong.

1137
01:03:39,100 --> 01:03:40,400
Totally, totally wrong.

1138
01:03:40,400 --> 01:03:41,700
That's supposed to be down here.

1139
01:03:43,100 --> 01:03:43,400
Yeah.

1140
01:03:43,600 --> 01:03:44,200
Sorry about that.

1141
01:03:44,200 --> 01:03:45,000
Thank you for catching that.

1142
01:03:45,000 --> 01:03:46,400
I have no idea why that was there.

1143
01:03:46,400 --> 01:03:51,500
I must have like cut and pasted something and and totally flubbed it.

1144
01:03:52,400 --> 01:03:54,300
Yeah, but no, that was not supposed to be the case.

1145
01:03:54,300 --> 01:03:57,300
So yes, you absolutely should.

1146
01:04:06,700 --> 01:04:09,100
I may have missed this but do you have the ability to set a hard limit

1147
01:04:09,100 --> 01:04:10,400
on memory usage yet?

1148
01:04:10,400 --> 01:04:13,100
So, you know, you can support lower memory machines.

1149
01:04:15,100 --> 01:04:19,500
So right now, when we start up, we only do the one allocation and

1150
01:04:19,500 --> 01:04:20,100
that's it.

1151
01:04:21,100 --> 01:04:24,800
So, we already only run in whatever memory we have, but that's not

1152
01:04:24,800 --> 01:04:27,300
really very meaningful because we just don't have any art assets yet.

1153
01:04:27,300 --> 01:04:29,900
So obviously, we're never going to hit that because art assets is what

1154
01:04:29,900 --> 01:04:31,100
will take up all that memory.

1155
01:04:32,400 --> 01:04:35,800
So, really the point where we'll be able to say we can set a

1156
01:04:36,000 --> 01:04:40,200
memory usage limit is when we actually go and finish the streaming

1157
01:04:40,200 --> 01:04:41,300
stuff to have eviction

1158
01:04:49,500 --> 01:04:51,800
in a prior episode, you implemented by linear filtering.

1159
01:04:51,800 --> 01:04:53,200
Are you going to take it a step further?

1160
01:04:53,200 --> 01:04:55,200
And Implement mipmapping and trilinear filtering?

1161
01:04:56,000 --> 01:05:01,000
So trilinear filtering is never necessary obviously because we're 2D

1162
01:05:01,000 --> 01:05:02,100
flat projected.

1163
01:05:02,700 --> 01:05:05,000
So there isn't really isn't any.

1164
01:05:05,100 --> 01:05:07,900
You would never try linear that, right?

1165
01:05:07,900 --> 01:05:10,300
You're just literally a me unless I'm

1166
01:05:11,700 --> 01:05:17,300
I guess unless I'm not thinking about it properly, you you never

1167
01:05:17,300 --> 01:05:20,700
actually need trilinear filtering because you just make sure that your

1168
01:05:20,700 --> 01:05:27,100
bit, your mitt Maps would always be bilinear downed versions of the

1169
01:05:27,100 --> 01:05:30,600
higher res stuff so that you never have to do trilinear, right?

1170
01:05:32,400 --> 01:05:35,500
But the reason I say are going to take a step further, I would say no,

1171
01:05:35,500 --> 01:05:37,900
we're not going to get further because it's unlikely that we're really

1172
01:05:37,900 --> 01:05:41,300
going to be scaling things by that much more than 2X.

1173
01:05:41,500 --> 01:05:42,200
The direction.

1174
01:05:42,500 --> 01:05:45,900
So I don't feel like mipmapping would really benefit us in any

1175
01:05:45,900 --> 01:05:52,300
particular way, I feel like it would just waste memory but to be

1176
01:05:52,300 --> 01:05:57,400
clear, we don't have to do any work to implement it mipmapping would

1177
01:05:57,400 --> 01:05:59,700
be free on architecture, currently all

1178
01:06:00,000 --> 01:06:04,300
To do is switch which bitmap we were using based on the size, that's

1179
01:06:04,300 --> 01:06:04,700
it.

1180
01:06:04,700 --> 01:06:06,700
So, we would not have to rewrite the render at all.

1181
01:06:07,500 --> 01:06:10,300
We already effectively support.

1182
01:06:10,300 --> 01:06:11,600
Mipmapping in that sense.

1183
01:06:13,000 --> 01:06:16,100
So yet, so the answer is no, we would not modify the renderer in any

1184
01:06:16,100 --> 01:06:16,300
way.

1185
01:06:16,300 --> 01:06:20,200
If for some reason we find that mipmapping is going to be important.

1186
01:06:20,300 --> 01:06:23,800
Meaning, we see that we are doing a lot of that scaling and things are

1187
01:06:23,800 --> 01:06:25,100
not looking good to us.

1188
01:06:25,500 --> 01:06:28,700
Then what we would do is we would just have at the head end when you

1189
01:06:28,700 --> 01:06:29,800
do a push bitmap call it would

1190
01:06:30,000 --> 01:06:32,200
Look at how big you are trying to draw it.

1191
01:06:32,200 --> 01:06:36,000
And pick the bitmap scaled versions with a bitmap based on that.

1192
01:06:36,000 --> 01:06:42,100
That'd be the only change and then it and then we'd have the full

1193
01:06:42,100 --> 01:06:43,400
quality that you would get.

1194
01:06:43,500 --> 01:06:46,500
If you turned on mipmapping and trilinear in a hardware.

1195
01:06:46,500 --> 01:06:47,100
Renderer

1196
01:06:52,500 --> 01:06:55,100
Well, the assets loaded in from a file be stored in evicted in the

1197
01:06:55,100 --> 01:06:56,300
same way as the ground chunks.

1198
01:06:56,500 --> 01:06:59,200
I don't know because our ground chunks game is kind of hacked right

1199
01:06:59,200 --> 01:07:01,800
now that the eviction scheme was just something we threw in there.

1200
01:07:02,400 --> 01:07:06,400
So I suppose, we'll probably think a little bit harder about it, but I

1201
01:07:06,400 --> 01:07:06,800
don't know.

1202
01:07:18,900 --> 01:07:26,500
Questions questions, are there questions on the string?

1203
01:07:29,000 --> 01:07:36,500
Maybe there are, but maybe the lag is keeping them from being asked.

1204
01:07:38,500 --> 01:07:41,900
But there may not be any more questions, everyone might be totally on

1205
01:07:41,900 --> 01:07:42,200
it.

1206
01:07:50,800 --> 01:07:52,600
Then see why only BMP.

1207
01:07:52,800 --> 01:07:57,500
So the answer is we will not the answer should not even be why only

1208
01:07:57,500 --> 01:08:00,100
BMP I tried the question shouldn't be why only be a the question

1209
01:08:00,100 --> 01:08:01,700
should be why anything?

1210
01:08:02,100 --> 01:08:06,600
And the answer is because it's temporary we will not be loading any

1211
01:08:06,600 --> 01:08:09,600
type of Art in the game later.

1212
01:08:09,600 --> 01:08:13,000
Any type of standard file will be loading from a pack file, that's our

1213
01:08:13,000 --> 01:08:14,800
own devising.

1214
01:08:16,700 --> 01:08:18,300
So that's why we only load be empty at the moment.

1215
01:08:18,300 --> 01:08:21,500
It just happens to be an easy format to load and so when I was

1216
01:08:21,500 --> 01:08:24,500
implementing it to show people how to get that working, I just picked

1217
01:08:24,500 --> 01:08:29,700
the MP and did it because it's really easy to load but yeah in the

1218
01:08:29,700 --> 01:08:33,200
future there will be no such thing as loading a BMP basically they'll

1219
01:08:33,200 --> 01:08:34,600
just be a giant pack file.

1220
01:08:34,600 --> 01:08:38,500
The PAC file will have a bitmap format that we have devised that we

1221
01:08:38,500 --> 01:08:42,300
are comfortable with and that we load directly, it will probably be

1222
01:08:42,300 --> 01:08:45,600
compressed with something like you know in lzma

1223
01:08:45,700 --> 01:08:47,399
A or something, who knows?

1224
01:08:47,899 --> 01:08:51,700
And we will just have that will be our format in the PAC file.

1225
01:08:52,399 --> 01:08:53,600
So there won't even be BMP.

1226
01:08:53,600 --> 01:08:56,000
Loading in the in the actual version.

1227
01:08:56,000 --> 01:08:58,200
Once we finish shipping it,

1228
01:09:05,200 --> 01:09:05,800
Soy sauce.

1229
01:09:05,800 --> 01:09:08,500
The kid the eviction stuff you're doing is it basically garbage

1230
01:09:08,500 --> 01:09:11,600
collection know so it's not garbage collection.

1231
01:09:11,899 --> 01:09:14,399
It's sort of more like

1232
01:09:16,700 --> 01:09:17,600
How should I put this?

1233
01:09:18,000 --> 01:09:21,800
So the way that garbage collection works is garbage collection waits

1234
01:09:21,800 --> 01:09:26,200
to see if something isn't used anymore and when it isn't used anymore,

1235
01:09:26,399 --> 01:09:28,000
it gets rid of it, right?

1236
01:09:29,300 --> 01:09:33,000
But what this is is not that all of these things are things that we're

1237
01:09:33,000 --> 01:09:34,100
using, right?

1238
01:09:34,100 --> 01:09:34,399
Meaning.

1239
01:09:34,399 --> 01:09:38,300
All the Assets in the game, are things that we're using, but we just

1240
01:09:38,300 --> 01:09:39,399
can't fit them all in memory.

1241
01:09:39,399 --> 01:09:42,800
Like, we'd love to have all 32 gigabytes of addresses or whatever just

1242
01:09:42,800 --> 01:09:43,300
in memory.

1243
01:09:43,300 --> 01:09:45,700
And then we not to care about any of this, but the truth is, we don't

1244
01:09:45,700 --> 01:09:46,700
have that much space.

1245
01:09:48,000 --> 01:09:51,899
So what we do is we page in whatever is being most recently used.

1246
01:09:52,100 --> 01:09:54,900
So this is not akin to garbage collection.

1247
01:09:55,100 --> 01:09:58,300
It's akin to virtual memory if that makes sense, right?

1248
01:09:58,300 --> 01:09:58,700
We're sort of

1249
01:09:59,100 --> 01:10:00,200
Our own virtual memory.

1250
01:10:00,500 --> 01:10:07,000
So what we do is we have 32 gigabytes of virtual bitmap space, and

1251
01:10:07,000 --> 01:10:10,800
then two gigabytes of physical bitmap space.

1252
01:10:11,100 --> 01:10:14,400
And we're just moving in, whatever the two gigabytes you know.

1253
01:10:14,400 --> 01:10:17,200
We're trying to keep that 2 gigabytes of physical map to whatever the

1254
01:10:17,200 --> 01:10:18,800
most useful ones are at the time.

1255
01:10:18,800 --> 01:10:19,200
Right?

1256
01:10:20,200 --> 01:10:21,100
So hopefully that makes sense.

1257
01:10:21,100 --> 01:10:22,700
So it really has nothing to do with garbage.

1258
01:10:22,700 --> 01:10:25,500
Collection, garbage collections, about seeing what's used in, what's

1259
01:10:25,500 --> 01:10:26,300
not used.

1260
01:10:26,600 --> 01:10:28,900
This is not that this is about trying to

1261
01:10:29,000 --> 01:10:32,800
Keep in ask in a fixed amount of space, the things that are most

1262
01:10:32,800 --> 01:10:36,200
likely to be used soon if that makes sense.

1263
01:10:41,000 --> 01:10:43,700
Will we be using AMD hair physics?

1264
01:10:44,100 --> 01:10:48,300
Obviously, how could you even ship a game that doesn't have a hair

1265
01:10:48,300 --> 01:10:49,000
physics in it?

1266
01:10:49,000 --> 01:10:49,900
That's ridiculous.

1267
01:10:50,800 --> 01:10:54,100
Probably what we'll do and obviously this is hush-hush.

1268
01:10:54,100 --> 01:10:58,300
So don't tell anyone about this like this stays just between me and

1269
01:10:58,300 --> 01:11:04,000
the you know a couple hundred people are ever who are watching the

1270
01:11:04,000 --> 01:11:08,300
entire game will be constructed entirely out of hair.

1271
01:11:08,700 --> 01:11:10,200
So basically like the main character.

1272
01:11:10,400 --> 01:11:12,000
There will be all care that one that's in there.

1273
01:11:12,000 --> 01:11:14,700
Now, just a stand-in, it's just going to be like a hairball.

1274
01:11:15,100 --> 01:11:17,200
And then like all the ground is going to be hair.

1275
01:11:17,200 --> 01:11:18,700
That's kind of like mad and out.

1276
01:11:18,800 --> 01:11:22,000
And then the trees will be hair and the Monsters will be hair, but

1277
01:11:22,000 --> 01:11:22,900
like a different color.

1278
01:11:22,900 --> 01:11:27,100
So, for example, like maybe the main character will be will have dark

1279
01:11:27,100 --> 01:11:30,700
hair and I'll be fighting against like blond-haired things, right?

1280
01:11:30,900 --> 01:11:33,500
It's kind of like a statement on racism, if that makes sense.

1281
01:11:34,900 --> 01:11:38,300
You know, you know, I don't want to go too deep here but, you know, I

1282
01:11:38,300 --> 01:11:40,000
don't want to bring Ferguson into it, right?

1283
01:11:40,000 --> 01:11:40,200
But

1284
01:11:40,300 --> 01:11:42,800
Like, that's that's basically what we're going for.

1285
01:11:42,800 --> 01:11:46,400
So that's why we need the Ambi hair physics and that's why that will

1286
01:11:46,400 --> 01:11:47,400
be going in soon.

1287
01:11:47,700 --> 01:11:51,900
It'll be all about AMD hair physics and like I said, that's not

1288
01:11:51,900 --> 01:11:52,700
cosmetic.

1289
01:11:53,000 --> 01:11:57,400
That's a that's like about theme and so the AMD hair for this will be

1290
01:11:57,400 --> 01:11:59,900
letting us address racism in a much deeper.

1291
01:12:00,000 --> 01:12:03,400
Way then we could have if like the rest of the game was made out of

1292
01:12:03,800 --> 01:12:05,000
real stuff instead of hair.

1293
01:12:08,100 --> 01:12:11,200
If you turn a bit matte black and white by altering the pixel, then

1294
01:12:11,200 --> 01:12:12,700
would you have two copies of the bitmap?

1295
01:12:12,700 --> 01:12:14,400
Would you delete one if you have to

1296
01:12:17,000 --> 01:12:18,100
Yeah.

1297
01:12:19,200 --> 01:12:22,800
I mean I'm not sure I totally understand the question.

1298
01:12:24,300 --> 01:12:29,400
but I guess what I would say is the

1299
01:12:32,500 --> 01:12:37,200
the idea is a bitmap is sort of a cash in some ways, right?

1300
01:12:37,300 --> 01:12:40,300
Like you could imagine saying, Well what we'll do is, we'll

1301
01:12:40,300 --> 01:12:43,400
procedurally generate all the graphics with some complicated routine

1302
01:12:43,400 --> 01:12:46,200
that like take sanctions brain and breaks it down into a neural

1303
01:12:46,200 --> 01:12:49,800
network and then tells it to paint the hero and it Paints the here or

1304
01:12:49,800 --> 01:12:50,100
whatever.

1305
01:12:50,100 --> 01:12:50,900
Like right.

1306
01:12:51,700 --> 01:12:54,600
But what a bitmap is is it's sort of like a Memento it's like here was

1307
01:12:54,600 --> 01:12:57,000
a process that was expensive to do.

1308
01:12:57,000 --> 01:13:00,400
It took human effort even right to produce what this thing should look

1309
01:13:00,400 --> 01:13:00,700
like.

1310
01:13:01,300 --> 01:13:03,300
And it's what we're going to do is, we're going to load that and lift

1311
01:13:03,300 --> 01:13:04,100
that, right?

1312
01:13:05,200 --> 01:13:07,900
You can think about that as being true for like all bitmaps.

1313
01:13:08,300 --> 01:13:12,300
Essentially, any bitmap is just a cache of some process that was

1314
01:13:12,300 --> 01:13:15,900
potentially expensive and so what you have to think about in terms of

1315
01:13:15,900 --> 01:13:20,300
your game, is anytime there's bitmaps that I could be generating.

1316
01:13:20,300 --> 01:13:22,800
So like in your case, you're saying, there's a procedural modification

1317
01:13:22,800 --> 01:13:24,700
to the bitmap, like I'm turning some of the pixels to a different

1318
01:13:24,700 --> 01:13:25,500
color, right?

1319
01:13:26,300 --> 01:13:29,000
If there are procedural modifications, you can make, you have to ask

1320
01:13:29,000 --> 01:13:30,900
the same question, are those procedural?

1321
01:13:30,900 --> 01:13:34,900
Modifications fast enough so that they could happen during the frame

1322
01:13:35,000 --> 01:13:38,300
When we render if so then it's probably more efficient to do it that

1323
01:13:38,300 --> 01:13:42,400
way but if they're expensive then it's probably more efficient to cash

1324
01:13:42,400 --> 01:13:45,100
them in bitmaps and make new bitmaps and that's like what we do with

1325
01:13:45,100 --> 01:13:47,000
the ground chunks, for example, right?

1326
01:13:48,300 --> 01:13:52,100
So you yeah, to give it a totally concrete example.

1327
01:13:52,100 --> 01:13:55,100
In fact, look at the way we deal with the hero versus how we deal with

1328
01:13:55,100 --> 01:13:57,600
the ground chunks because the ground chunks are going to have a lot

1329
01:13:57,600 --> 01:14:01,700
more logic to them and a lot more splatting I chose to cash them.

1330
01:14:02,200 --> 01:14:04,800
The hero is just three Sprites on top of each other that we'll just

1331
01:14:05,000 --> 01:14:05,700
kind of bounced.

1332
01:14:05,700 --> 01:14:07,900
So I chose to Creak and posit them every frame.

1333
01:14:08,100 --> 01:14:09,900
And that's just a decision that you have to be comfortable with

1334
01:14:09,900 --> 01:14:10,500
making.

1335
01:14:10,500 --> 01:14:13,700
Sometimes you have to make with a profile and actually timing it if

1336
01:14:13,700 --> 01:14:16,300
you're uncomfortable, knowing which one is going to be correct, but

1337
01:14:16,300 --> 01:14:17,400
it's always about that.

1338
01:14:17,400 --> 01:14:20,900
It's about what can I do dynamically versus what do I have to cash,

1339
01:14:21,000 --> 01:14:21,400
right?

1340
01:14:23,200 --> 01:14:25,100
Why do people care so much about garbage collection?

1341
01:14:25,100 --> 01:14:26,000
I have no idea.

1342
01:14:26,000 --> 01:14:28,200
As far as I'm concerned is completely useless concept.

1343
01:14:29,300 --> 01:14:31,000
Why use a pack file instead of bmps?

1344
01:14:31,000 --> 01:14:32,000
What makes it better.

1345
01:14:32,600 --> 01:14:38,200
So basically there's two reasons, well, three reasons really, one of

1346
01:14:38,200 --> 01:14:38,900
them silly.

1347
01:14:39,200 --> 01:14:42,100
The silly reason is that I hate games spamming my hard drive with

1348
01:14:42,100 --> 01:14:43,100
eight thousand files.

1349
01:14:43,900 --> 01:14:48,000
I just want an executable and a data file, like that's it.

1350
01:14:49,200 --> 01:14:49,900
It's nice and clean.

1351
01:14:49,900 --> 01:14:53,700
I can copy it around, it's not a nightmare, it's all good.

1352
01:14:53,700 --> 01:14:54,300
Right.

1353
01:14:54,800 --> 01:14:58,600
So there's a little person acting as their but that's the silly

1354
01:14:58,600 --> 01:14:58,900
reason.

1355
01:14:59,000 --> 01:14:59,600
And the good.

1356
01:15:00,000 --> 01:15:04,300
R1 you don't pollute the OS handle pool, and you're not opening files

1357
01:15:04,300 --> 01:15:05,600
all the time, right?

1358
01:15:05,600 --> 01:15:06,400
With a Pac file.

1359
01:15:06,400 --> 01:15:08,200
You just open one file handle to the OS.

1360
01:15:08,200 --> 01:15:08,600
It knows.

1361
01:15:08,600 --> 01:15:11,100
You're always going to be looking at that file, right?

1362
01:15:11,200 --> 01:15:12,200
The file is now locked.

1363
01:15:12,200 --> 01:15:14,200
So no one's going to delete it out from under you, or do anything

1364
01:15:14,200 --> 01:15:14,400
else.

1365
01:15:14,400 --> 01:15:15,000
Ridiculous.

1366
01:15:15,000 --> 01:15:16,500
The OS is expecting you to have it in there.

1367
01:15:16,500 --> 01:15:18,000
It's warm in the in the cash.

1368
01:15:18,400 --> 01:15:19,400
Everything's good.

1369
01:15:19,900 --> 01:15:23,900
And so it's going to be able to pull those in as full pages and all

1370
01:15:23,900 --> 01:15:24,900
these other good things.

1371
01:15:25,000 --> 01:15:27,800
And then all I'm doing is pulling parts out of it, right?

1372
01:15:29,000 --> 01:15:31,400
It also allows me to issue background reads really easily.

1373
01:15:31,400 --> 01:15:33,700
There's all these sorts of things, you'll see a little when we get to

1374
01:15:33,700 --> 01:15:35,900
pack file, how much better it is than individual files.

1375
01:15:35,900 --> 01:15:40,900
It's way better but that's that's the majority of it, right?

1376
01:15:41,300 --> 01:15:45,500
And the other part that's great about it is also the the indexing so

1377
01:15:45,500 --> 01:15:49,000
the the Manifest of all the stuff that's in there and I don't mean

1378
01:15:49,000 --> 01:15:49,900
like a Windows manifest.

1379
01:15:49,900 --> 01:15:52,700
I mean like our whatever our table is that tells us about what's in

1380
01:15:52,700 --> 01:15:53,000
there.

1381
01:15:53,200 --> 01:15:57,400
Could all use offsets into the file which is just a simple probably 32

1382
01:15:57,400 --> 01:15:58,100
bit number.

1383
01:15:59,300 --> 01:16:02,800
And that way we don't have to use strings and have strings in there

1384
01:16:02,800 --> 01:16:05,700
that point tell you like what file to go load and all that garbage.

1385
01:16:06,000 --> 01:16:09,600
So pack files are like, it's not even like a subtly better thing.

1386
01:16:09,900 --> 01:16:13,700
Pack files in practice are like so much better than individual files

1387
01:16:13,700 --> 01:16:15,900
that it's like it's not even a contest.

1388
01:16:21,900 --> 01:16:24,500
Earlier, someone asked why we Implement virtual memory on top of the

1389
01:16:24,500 --> 01:16:25,600
OS is virtual memory?

1390
01:16:25,800 --> 01:16:26,400
Are we doing this?

1391
01:16:26,400 --> 01:16:28,200
Just so we can have more virtual space.

1392
01:16:28,600 --> 01:16:31,500
The reason is because relying on the OS is virtual memory is extremely

1393
01:16:31,500 --> 01:16:32,000
tenuous.

1394
01:16:32,000 --> 01:16:33,300
You have no idea what it's going to do.

1395
01:16:33,300 --> 01:16:36,400
You have no idea when it's going to page in, you have no idea who

1396
01:16:36,400 --> 01:16:38,100
which thread is going to hit the paging.

1397
01:16:39,000 --> 01:16:42,200
It's just, it's just very dicey and so typically you do not want to

1398
01:16:42,200 --> 01:16:45,200
rely on the OS is virtual memory for something as critical as asset

1399
01:16:45,200 --> 01:16:45,700
streaming.

1400
01:16:45,700 --> 01:16:48,500
It just tends to be a pretty bad idea, right?

1401
01:16:49,500 --> 01:16:51,400
Furthermore, you don't even know if the

1402
01:16:51,700 --> 01:16:53,200
System has that much virtual memory.

1403
01:16:53,300 --> 01:16:56,300
It's entirely possible that the machine is not configured to have 32

1404
01:16:56,300 --> 01:16:59,000
gigabytes of virtual memory and in that case, you will just fail.

1405
01:16:59,700 --> 01:17:02,000
So those are, those are not really good options.

1406
01:17:03,900 --> 01:17:05,300
Yeah, it's not fabulous.

1407
01:17:05,600 --> 01:17:08,600
You could try using a memory mapped file instead, which would solve

1408
01:17:08,600 --> 01:17:09,500
that problem.

1409
01:17:10,200 --> 01:17:12,800
But then you have the problem with the fact that that's actually not

1410
01:17:12,800 --> 01:17:15,600
the thing that you're cashing, that's probably compressed.

1411
01:17:15,800 --> 01:17:21,300
So you would need a second memory mapped file which was your sponsor

1412
01:17:21,300 --> 01:17:21,500
yet.

1413
01:17:21,700 --> 01:17:24,700
it's just there's a lot more complexity there, it's not as simple as

1414
01:17:24,700 --> 01:17:27,200
just saying, let the OS, do the virtual memory for you, it's really

1415
01:17:27,200 --> 01:17:31,500
not that simple because the paging process involves decompression and

1416
01:17:31,500 --> 01:17:34,300
all these other sorts of things that are, you know, that the OS

1417
01:17:34,300 --> 01:17:34,900
doesn't do

1418
01:17:46,200 --> 01:17:46,900
Are the ground trucks.

1419
01:17:46,900 --> 01:17:50,000
Going to be peaking positive when using the GPU, I would assume.

1420
01:17:50,000 --> 01:17:53,200
So, yeah, I don't see any reason why not to, and it'll be much faster

1421
01:17:53,200 --> 01:17:56,500
that way than trying to have the CPU, do them and then upload them,

1422
01:17:56,900 --> 01:17:59,500
which when we could just have the GPU to them directly.

1423
01:18:02,400 --> 01:18:04,200
Is there a reason why you split the character three B is, yes.

1424
01:18:04,200 --> 01:18:07,400
So it can have some nice bounce to it, some squash and stretch.

1425
01:18:12,400 --> 01:18:15,800
Is the rendering going to be eventually done on the GPU.

1426
01:18:16,200 --> 01:18:20,600
Yeah I mean at this point it's unclear whether we'll ever really need

1427
01:18:20,600 --> 01:18:23,100
it but we would want to ship it that way.

1428
01:18:23,100 --> 01:18:26,300
Because in fact, I was talking to Danielle, bemberg read about that.

1429
01:18:26,300 --> 01:18:31,400
This just earlier today, it's more power efficient to use a GPU in

1430
01:18:31,400 --> 01:18:35,600
most contact still like on laptops, for example, even if our software

1431
01:18:35,600 --> 01:18:38,100
renderer turns out to be so good that we could showed leadership with

1432
01:18:38,100 --> 01:18:38,100
it.

1433
01:18:38,100 --> 01:18:41,000
And it's not an issue, it will be much more power hungry.

1434
01:18:41,100 --> 01:18:42,800
Even using a GPU for the same workload.

1435
01:18:42,800 --> 01:18:43,800
I would suspect.

1436
01:18:43,900 --> 01:18:46,600
And so for example, on a laptop that was using Intel integrated

1437
01:18:46,600 --> 01:18:50,800
Graphics, I can pretty much guarantee that if we go through the GPU,

1438
01:18:50,800 --> 01:18:56,000
it will not burn the battery nearly as fast as if we spun up the whole

1439
01:18:56,000 --> 01:18:59,100
CPU to do that rendering if that makes sense.

1440
01:18:59,600 --> 01:19:00,800
But that's just my assumption.

1441
01:19:06,200 --> 01:19:09,000
Our game saves going to be part of that asset pack file or their own

1442
01:19:09,000 --> 01:19:09,900
pack file know.

1443
01:19:09,900 --> 01:19:12,200
The game saves cannot be part of the pack file.

1444
01:19:12,400 --> 01:19:16,200
The reason they can't be part of the pack file among other things is

1445
01:19:16,200 --> 01:19:18,400
because they are writable.

1446
01:19:18,400 --> 01:19:21,000
So the pack file will be read only and potentially installed on the

1447
01:19:21,000 --> 01:19:23,000
user's machine in a place that cannot be written to.

1448
01:19:23,000 --> 01:19:24,600
We don't know whether it can or not.

1449
01:19:25,300 --> 01:19:29,500
And so the same game saves have to go in like a Windows directory,

1450
01:19:29,500 --> 01:19:32,400
that's allowed to have writing Privileges and all these other sorts of

1451
01:19:32,400 --> 01:19:32,600
things.

1452
01:19:32,600 --> 01:19:35,800
So we want to make sure that we write say files.

1453
01:19:36,000 --> 01:19:41,100
Totally different location or at least can because there's a bunch of

1454
01:19:41,100 --> 01:19:43,300
compliance reasons why that will have to be true.

1455
01:19:43,500 --> 01:19:46,100
So, in general, you want the save Palace to be separate anyway.

1456
01:19:46,100 --> 01:19:48,900
So people could like copy them around or do anything they want, right?

1457
01:19:49,100 --> 01:19:51,600
So generally, you want to save files, to be separate for other reasons

1458
01:19:51,600 --> 01:19:54,800
to probably, but even if you wanted them to be part of the pack file,

1459
01:19:54,800 --> 01:19:57,400
I would probably advise against it because of platform compliance

1460
01:19:57,400 --> 01:19:57,800
reasons.

1461
01:19:59,100 --> 01:20:01,200
On Windows and on elsewhere and also for cloud.

1462
01:20:01,200 --> 01:20:02,400
Save, right?

1463
01:20:02,700 --> 01:20:05,900
If you have a save game and you're using, like, let's say we shipped

1464
01:20:05,900 --> 01:20:09,800
the game on Steam and we want this saves to be cloud-enabled.

1465
01:20:11,000 --> 01:20:13,700
That's a perfect example of where you couldn't be part of the pack

1466
01:20:13,700 --> 01:20:16,500
file because the pack the whole pack file is not going to be recent

1467
01:20:16,500 --> 01:20:16,900
every time.

1468
01:20:16,900 --> 01:20:20,700
So we need the it to be like a sort of separate file that that's just

1469
01:20:20,700 --> 01:20:21,700
for saved game data.

1470
01:20:24,500 --> 01:20:24,900
All right.

1471
01:20:24,900 --> 01:20:27,300
Have you come to the end of the q's and the A's?

1472
01:20:31,900 --> 01:20:37,300
Q's and A's using a skews cues and A's.

1473
01:20:40,300 --> 01:20:42,900
just putting the rendering Tree on the GPU mean, you have to write a

1474
01:20:42,900 --> 01:20:46,200
renderer completely separate to the CPU on or is it is most of the

1475
01:20:46,200 --> 01:20:50,900
groundwork done by having the CPU render or done, it's usually

1476
01:20:50,900 --> 01:20:58,100
completely separate because everything that the GPU renderer does is,

1477
01:20:58,700 --> 01:20:59,800
you know, all the

1478
01:21:00,000 --> 01:21:03,900
Is that our CPU render or does the GPU render has like different calls

1479
01:21:03,900 --> 01:21:05,100
and stuff for, right?

1480
01:21:05,800 --> 01:21:09,400
So, probably like the render group that CPP file has two would be

1481
01:21:09,400 --> 01:21:13,500
like, you know, replaced by a separate one for the GPU.

1482
01:21:15,500 --> 01:21:18,300
And GPU rendering is pretty complicated actually, especially if we do

1483
01:21:18,300 --> 01:21:18,800
Vulcan.

1484
01:21:19,000 --> 01:21:21,700
There's a lot of setup in a lot of management fencing and all these

1485
01:21:21,700 --> 01:21:22,900
other sorts of things, right?

1486
01:21:23,300 --> 01:21:31,400
So for doing like a mantle Vulcan d3d 12 kind of a thing, those are,

1487
01:21:32,000 --> 01:21:36,600
you know, much more low level and they involve a lot of work that has

1488
01:21:36,600 --> 01:21:39,200
nothing to do with what the CPU renderer is doing.

1489
01:21:39,200 --> 01:21:40,600
Its totally separate.

1490
01:21:41,000 --> 01:21:43,600
It's about setting up things for Hardware, right?

1491
01:21:44,300 --> 01:21:45,200
And so if we

1492
01:21:45,300 --> 01:21:49,700
End up going that route which you know I think we probably will

1493
01:21:49,700 --> 01:21:54,700
because by the time we get to that you know either d3d 12 or Vulcan

1494
01:21:54,700 --> 01:21:55,800
will be a viable thing.

1495
01:21:55,800 --> 01:21:57,600
I'm quite sure for us to use.

1496
01:21:57,700 --> 01:22:02,700
I suspect you know because since the software under turned out to be

1497
01:22:02,700 --> 01:22:06,200
so good, we aren't in any rush, we can choose to wait till the very

1498
01:22:06,200 --> 01:22:08,100
end of the project to put in the GPU render.

1499
01:22:08,600 --> 01:22:11,400
So, you know, for talking a year from now or you're in a half from now

1500
01:22:11,400 --> 01:22:15,100
when the project is getting in you know into ship mode or

1501
01:22:15,200 --> 01:22:15,600
Ever.

1502
01:22:16,700 --> 01:22:19,500
I feel like we'll be able to use one of those and there's a lot of

1503
01:22:19,500 --> 01:22:20,000
work in there.

1504
01:22:24,900 --> 01:22:28,400
I thought you hated both DRM and cloud-based stuff based off of Jeff

1505
01:22:28,400 --> 01:22:29,100
and crazy show.

1506
01:22:30,600 --> 01:22:33,800
Yeah, I do, well, I wouldn't say that.

1507
01:22:33,800 --> 01:22:38,000
I hate all cloud-based stuff obviously.

1508
01:22:38,000 --> 01:22:40,800
I like the idea of backing things up to a server or things like this.

1509
01:22:40,800 --> 01:22:42,300
I mean you source code control stuff like that.

1510
01:22:42,300 --> 01:22:46,300
I hate DRM which is why handmade here, hasn't any DRM.

1511
01:22:47,600 --> 01:22:51,100
But I'm also don't have a problem with putting handmade Hero on

1512
01:22:51,100 --> 01:22:54,200
something like steam that might have DRM on.

1513
01:22:54,300 --> 01:22:57,200
As long as people have the choice of buying it somewhere where it

1514
01:22:57,200 --> 01:22:58,400
doesn't have DRM, right?

1515
01:22:58,400 --> 01:23:01,500
Because if people want to use Steam and they don't care about digital

1516
01:23:01,500 --> 01:23:06,000
Rights Management, then, you know, I want people to be able to, to

1517
01:23:06,000 --> 01:23:09,800
get, I mean, in fact, the reason I don't like dear Emma specifically

1518
01:23:09,800 --> 01:23:12,300
because I want people to get things the way that they want them,

1519
01:23:12,300 --> 01:23:13,000
right?

1520
01:23:13,000 --> 01:23:17,400
And DRM is about preventing you from being able to get the game, the

1521
01:23:17,400 --> 01:23:20,700
way you want and store it, the way you want and run it the way that

1522
01:23:20,700 --> 01:23:21,300
you want.

1523
01:23:21,300 --> 01:23:24,100
And so I certainly wouldn't prohibit people.

1524
01:23:24,400 --> 01:23:28,800
From getting the game on a platform that they liked such as Steam just

1525
01:23:28,800 --> 01:23:30,200
because it happens to be dare end.

1526
01:23:30,200 --> 01:23:32,900
And also, I'm pretty sure and I could be wrong about this.

1527
01:23:33,200 --> 01:23:35,500
That steam doesn't require the DRM.

1528
01:23:35,500 --> 01:23:39,900
So when I put it on Steam, I could also, I believe turn off any sorts

1529
01:23:39,900 --> 01:23:43,200
of DRM features on Steam so that when you when it downloaded the game

1530
01:23:43,200 --> 01:23:47,800
to you, you could then copy those files to a different machine of

1531
01:23:47,800 --> 01:23:49,000
yours and Run the game.

1532
01:23:49,000 --> 01:23:49,900
And that would be fine.

1533
01:23:51,000 --> 01:23:51,500
So yeah.

1534
01:23:53,200 --> 01:23:54,200
Just be clear on that.

1535
01:24:01,100 --> 01:24:01,700
All right.

1536
01:24:04,200 --> 01:24:07,300
I think, creepy Uncle cases going to go get some Ramen now.

1537
01:24:07,800 --> 01:24:12,600
So let's go ahead and wind things down so they don't see any more

1538
01:24:13,000 --> 01:24:14,000
questions.

1539
01:24:15,800 --> 01:24:18,700
Let's go ahead and close this.

1540
01:24:20,300 --> 01:24:21,300
Close it down.

1541
01:24:24,000 --> 01:24:25,500
Close it down.

1542
01:24:25,900 --> 01:24:26,500
Alright.

1543
01:24:27,400 --> 01:24:27,800
Oops.

1544
01:24:29,200 --> 01:24:30,200
Try to close down.

1545
01:24:30,500 --> 01:24:33,600
All right, thank you, everyone for joining me for another episode of

1546
01:24:33,600 --> 01:24:34,100
handmade here.

1547
01:24:34,100 --> 01:24:35,100
It's my pleasure coding with you.

1548
01:24:35,100 --> 01:24:38,000
As always, if you would like to follow along with the source code at

1549
01:24:38,000 --> 01:24:40,900
home, you could always pre-order the game on him, made here a DOT org

1550
01:24:41,000 --> 01:24:42,500
and it comes all the source code.

1551
01:24:43,000 --> 01:24:46,400
The handy dandy pre-order button allows you to get a link in email and

1552
01:24:46,400 --> 01:24:48,500
then you can download the source code any time.

1553
01:24:48,500 --> 01:24:50,700
After I finish every night, I upload the changes.

1554
01:24:51,200 --> 01:24:54,500
So you're always current if you want to just support the video series,

1555
01:24:54,500 --> 01:24:57,800
we do have a patreon page, which we very much appreciate subscriptions

1556
01:24:57,800 --> 01:24:58,900
to we

1557
01:24:59,100 --> 01:25:03,300
Have a forum site where you can ask questions and you can also take a

1558
01:25:03,300 --> 01:25:04,600
look at Community ports there.

1559
01:25:04,600 --> 01:25:07,200
People have done some reporting to Mac and Linux, if you want to try

1560
01:25:07,200 --> 01:25:09,000
that and you need some help.

1561
01:25:09,300 --> 01:25:12,100
We also have annotate episode guide, which you can look at their,

1562
01:25:12,100 --> 01:25:15,000
which helps to catch up on old things, old episodes.

1563
01:25:15,000 --> 01:25:15,700
You may have missed.

1564
01:25:16,300 --> 01:25:18,300
And finally, if you're trying to catch the show live, we do have a

1565
01:25:18,300 --> 01:25:18,900
tweak bought.

1566
01:25:18,900 --> 01:25:22,600
The Tweet bot will treat the schedule at you.

1567
01:25:22,600 --> 01:25:25,300
So if you want to know when it streams going to be live any given day,

1568
01:25:25,300 --> 01:25:27,100
that's the place to check.

1569
01:25:27,100 --> 01:25:28,900
And it should always be able to

1570
01:25:29,000 --> 01:25:32,400
to tell you that's about it.

1571
01:25:32,800 --> 01:25:34,200
I think for today.

1572
01:25:34,500 --> 01:25:35,600
Thank you everyone for joining me.

1573
01:25:36,200 --> 01:25:40,000
And I will see you back here tomorrow, when we will go ahead and push

1574
01:25:40,000 --> 01:25:44,700
forwards on our asset storage format, which probably means we'll also

1575
01:25:44,700 --> 01:25:46,000
do some pack file stuff.

1576
01:25:46,500 --> 01:25:48,600
I feel like now that we're in there, you might as well just finish up

1577
01:25:48,600 --> 01:25:49,400
asset stuff.

1578
01:25:49,400 --> 01:25:51,900
Like I said, it's not super complicated so you might as well.

1579
01:25:51,900 --> 01:25:56,300
Just try to get that finished up in a reasonable state, so we can just

1580
01:25:56,300 --> 01:25:58,800
check that off our list and be done with it.

1581
01:25:59,100 --> 01:26:00,300
So, thank you very much for joining me.

1582
01:26:00,300 --> 01:26:01,000
I hope to see you here.

1583
01:26:01,000 --> 01:26:01,800
Tomorrow, 5 p.m.

1584
01:26:01,800 --> 01:26:05,800
Pacific Daylight time until then Happy coding everyone.

