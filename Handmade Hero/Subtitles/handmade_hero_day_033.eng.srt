1
00:00:01,100 --> 00:00:01,700
Okay.

2
00:00:01,700 --> 00:00:04,800
Hello everyone and welcome to aim.

3
00:00:04,900 --> 00:00:08,400
The Morning Edition of handmade here of the show where we can code a

4
00:00:08,400 --> 00:00:09,900
complete game from scratch.

5
00:00:10,300 --> 00:00:11,700
No library is no engines.

6
00:00:11,700 --> 00:00:14,900
So we can see the entire process and learn about absolutely everything

7
00:00:14,900 --> 00:00:20,500
that happens in the full pipeline of a game, right down to how every

8
00:00:20,500 --> 00:00:22,600
single Pixel is drawn.

9
00:00:22,900 --> 00:00:26,600
We are at the point where we are experimenting with our sort of game,

10
00:00:26,600 --> 00:00:27,900
what it's going to need.

11
00:00:28,100 --> 00:00:29,900
We're basically making this a little, some little

12
00:00:30,200 --> 00:00:33,300
Bug stuff where we can move like a little rectangle around a tile map

13
00:00:33,300 --> 00:00:36,400
and do some stuff with it so that we can kind of Define what our

14
00:00:36,400 --> 00:00:38,400
engine architecture needs to be.

15
00:00:38,600 --> 00:00:40,900
And basically the way that I always do architecture as much as

16
00:00:40,900 --> 00:00:46,100
possible as I write the code that uses what I'm going to make first,

17
00:00:46,100 --> 00:00:47,200
without it being there.

18
00:00:47,200 --> 00:00:50,200
So I just pretend that I have stuff that does whatever I want.

19
00:00:50,400 --> 00:00:52,800
And I hack something together, that sort of makes it work.

20
00:00:52,900 --> 00:00:56,300
And then when I'm satisfied that that sort of like definition of what

21
00:00:56,300 --> 00:00:58,300
it needs to do is good and works.

22
00:00:58,300 --> 00:01:00,000
Well, then I kind of break.

23
00:01:00,100 --> 00:01:01,800
It off and say this is the design.

24
00:01:01,800 --> 00:01:05,200
This is what the it sort of API, the interface needs to be to that

25
00:01:05,200 --> 00:01:09,000
part part of the code and then I can go start making it for real and

26
00:01:09,000 --> 00:01:12,200
doing sort of an industrial strength engineering job on it.

27
00:01:13,300 --> 00:01:16,800
So that is the point that we're at and so I'm going to go ahead and

28
00:01:16,800 --> 00:01:19,300
Dive Right In because we have some stuff that we wanted to finish up

29
00:01:19,300 --> 00:01:23,100
from yesterday around basically how we're structuring our tile map

30
00:01:23,100 --> 00:01:23,600
interface.

31
00:01:23,900 --> 00:01:25,700
So I am going to get right into that.

32
00:01:25,700 --> 00:01:28,700
If you are following along at home, if you preorder the source code on

33
00:01:28,700 --> 00:01:30,000
handmade hero dot-org, using the

34
00:01:30,100 --> 00:01:33,100
The Dandy pre-order button, you should have gotten a link in your

35
00:01:33,100 --> 00:01:33,500
email.

36
00:01:33,500 --> 00:01:36,200
If you click on that link, it will allow you to download the source

37
00:01:36,200 --> 00:01:40,200
code in a zip file, that zip file has zip files for every day.

38
00:01:40,400 --> 00:01:46,100
You are going to want to unzip day 32 because we are on day 33 right

39
00:01:46,100 --> 00:01:46,300
now.

40
00:01:46,300 --> 00:01:49,800
And so, you always unzip the previous day's, so unzip days, 32 and you

41
00:01:49,800 --> 00:01:51,600
will be exactly where I am in the source code.

42
00:01:51,600 --> 00:01:56,400
If you would like to file follow along at home with the video.

43
00:01:56,400 --> 00:01:59,200
So let's go ahead in here to handmade code.

44
00:01:59,200 --> 00:01:59,900
Here we are.

45
00:02:00,100 --> 00:02:04,200
Let's start up our editor and our debugger.

46
00:02:04,700 --> 00:02:07,600
And if you remember where we were at, we basically had it so that we

47
00:02:07,600 --> 00:02:12,100
were running our little dude around and we had just finished making it

48
00:02:12,100 --> 00:02:18,200
so that all of our units for the guys motion were in, sort of we move

49
00:02:18,200 --> 00:02:20,300
them, basically, out of pixel space.

50
00:02:20,300 --> 00:02:23,600
We move them into real space, so that everything's happening in meters

51
00:02:23,800 --> 00:02:27,400
inside the game and then it only translates them out into pixels when

52
00:02:27,400 --> 00:02:28,200
it's time to render.

53
00:02:28,200 --> 00:02:30,000
And this was important because we want to support

54
00:02:30,500 --> 00:02:33,200
Basically, any resolution of the game, we don't want everything to be

55
00:02:33,200 --> 00:02:34,300
hard-coded in pixels.

56
00:02:34,700 --> 00:02:36,200
So that is why we were doing that.

57
00:02:36,500 --> 00:02:40,200
So what I want to do now is start to work on the tile map structure a

58
00:02:40,200 --> 00:02:42,500
little bit because I said that there was some stuff in there that I

59
00:02:42,500 --> 00:02:43,200
wanted to do.

60
00:02:43,300 --> 00:02:44,500
We talked about it yesterday.

61
00:02:44,500 --> 00:02:45,600
So there were two things.

62
00:02:45,900 --> 00:02:50,300
In one thing that I wanted to do was I wanted to change to a math,

63
00:02:50,300 --> 00:02:51,300
friendly coordinate system.

64
00:02:51,300 --> 00:02:55,500
So one where y goes up and X goes over, you know, the standard

65
00:02:55,600 --> 00:02:59,500
coordinate system and right now we're not doing that we've got

66
00:03:00,000 --> 00:03:02,900
Going down because that just happens to be how our bitmap is set up,

67
00:03:03,200 --> 00:03:03,600
right?

68
00:03:03,600 --> 00:03:04,400
That's about it.

69
00:03:05,300 --> 00:03:07,500
And so similarly to that.

70
00:03:07,700 --> 00:03:11,600
I also want to make it so that our tile map is accessed in a more sort

71
00:03:11,600 --> 00:03:15,000
of coherent way that I talked about and we'll cover what I want to do

72
00:03:15,000 --> 00:03:15,200
with that.

73
00:03:15,200 --> 00:03:15,400
Again.

74
00:03:15,400 --> 00:03:16,800
I'll just just a brief refresher.

75
00:03:17,100 --> 00:03:19,200
So I want to do those two things today if I can.

76
00:03:19,500 --> 00:03:22,200
So basically all we really need to do is just flip everything upside

77
00:03:22,200 --> 00:03:23,800
down to make our y, go up.

78
00:03:23,800 --> 00:03:27,600
We haven't defined any real information about the maps or anything

79
00:03:27,600 --> 00:03:28,300
like that.

80
00:03:28,900 --> 00:03:29,900
So we should be able to

81
00:03:30,000 --> 00:03:33,200
to do that pretty easily and start to think about what it means to

82
00:03:33,200 --> 00:03:35,400
have our stuff flipped upside down, in that sense relative to the

83
00:03:35,400 --> 00:03:40,300
bitmaps, but I'm not sure which order I want to do them in.

84
00:03:40,400 --> 00:03:42,600
So I'm going to go take a look at the code and see what it whether I

85
00:03:42,600 --> 00:03:44,300
want to flip things upside down first.

86
00:03:44,300 --> 00:03:46,900
And then do the time I have stuff or was I want to do the tile map

87
00:03:46,900 --> 00:03:48,000
stuff first and then, flip up.

88
00:03:48,000 --> 00:03:49,000
Things upside down.

89
00:03:49,100 --> 00:03:49,800
I'm not sure.

90
00:03:50,200 --> 00:03:52,600
So, let's go take a look where we're at.

91
00:03:55,000 --> 00:03:56,900
Inside are handmade .h.

92
00:03:56,900 --> 00:03:59,800
Here, we have this canonical position structure which now

93
00:04:00,200 --> 00:04:03,100
We've kind of worked it down to the point where it can sort of be

94
00:04:03,100 --> 00:04:04,300
considered a World position.

95
00:04:04,500 --> 00:04:08,200
And so one of the things that we were going to talk about is possibly

96
00:04:08,200 --> 00:04:10,000
just renaming it from canonical position.

97
00:04:10,200 --> 00:04:12,500
And I think that's a reasonable thing for us to do.

98
00:04:12,500 --> 00:04:13,600
Just right off the bat.

99
00:04:13,700 --> 00:04:18,700
We can replace canonical position with World position and we shouldn't

100
00:04:18,700 --> 00:04:21,399
really shouldn't really worry about that anymore because there's only

101
00:04:21,399 --> 00:04:25,300
going to be one world position struct and that's just a trivial change

102
00:04:25,300 --> 00:04:25,600
to make.

103
00:04:25,600 --> 00:04:26,800
So that's pretty easy to do.

104
00:04:27,100 --> 00:04:29,800
And yeah, and so let's do it now.

105
00:04:29,900 --> 00:04:31,300
Now just flip.

106
00:04:31,300 --> 00:04:32,900
Why to going up?

107
00:04:33,700 --> 00:04:35,400
Obviously, I could easily flip.

108
00:04:35,400 --> 00:04:35,800
Why?

109
00:04:35,800 --> 00:04:37,000
I could easily flip these two.

110
00:04:37,000 --> 00:04:38,500
These are just offsets from a tile.

111
00:04:38,500 --> 00:04:39,500
I could easily flip.

112
00:04:39,500 --> 00:04:42,400
Why from going up here, but the other thing I want to do is

113
00:04:42,400 --> 00:04:45,100
potentially make it so that they're based on the center of a tile.

114
00:04:45,100 --> 00:04:46,600
We could also do that.

115
00:04:46,900 --> 00:04:48,600
I'm not sure which of these we want to do.

116
00:04:48,600 --> 00:04:51,300
Like I said, if we wanted to switch, why to going up?

117
00:04:54,300 --> 00:05:01,000
And everything from being the lower right now, if you remember, oops,

118
00:05:01,400 --> 00:05:02,300
didn't mean to do that.

119
00:05:03,400 --> 00:05:03,800
There we go.

120
00:05:04,600 --> 00:05:08,700
If you remember right now, when we're talking about a tile, we use the

121
00:05:08,700 --> 00:05:12,100
upper left corner and we create an offset from there to say, where

122
00:05:12,100 --> 00:05:14,500
somebody is relative to the tile and then if they move out of the

123
00:05:14,500 --> 00:05:17,700
tile, we start tracking them in the next aisle over.

124
00:05:17,700 --> 00:05:20,300
And we use the upper corner of that tile to say where they are.

125
00:05:20,600 --> 00:05:21,100
Right?

126
00:05:21,700 --> 00:05:25,500
And so what we could do is we could switch inside the tile to being

127
00:05:25,500 --> 00:05:27,200
from the lower, right?

128
00:05:27,200 --> 00:05:30,400
The the lower left corner instead of the upper left corner and that

129
00:05:30,400 --> 00:05:32,900
would flip the direction of all of the guys motion.

130
00:05:34,200 --> 00:05:37,300
But the tiles would still go in the wrong order, right?

131
00:05:37,300 --> 00:05:38,000
The tile.

132
00:05:38,000 --> 00:05:41,100
Why would still be going down as you went down?

133
00:05:41,100 --> 00:05:45,200
So we would also have to flip that I'm guessing that probably the

134
00:05:45,200 --> 00:05:48,400
right thing to do since we have this working is to maybe just go ahead

135
00:05:48,500 --> 00:05:53,900
and actually think about flipping this actually go ahead and flip this

136
00:05:54,400 --> 00:05:55,600
with what we have right now.

137
00:05:55,800 --> 00:05:57,900
So let's let's look at what it will take to do that.

138
00:05:58,100 --> 00:05:59,800
So first of all, we defined these Maps.

139
00:06:00,300 --> 00:06:03,800
And we defined these Maps, the way that we type them in here.

140
00:06:04,000 --> 00:06:08,100
We defined them upside down, if we were to go bottom up, right?

141
00:06:08,100 --> 00:06:10,300
If you think about the way, we wrote it in the code.

142
00:06:10,400 --> 00:06:15,700
The first row in the array is at the top and this makes sense, because

143
00:06:15,800 --> 00:06:18,500
we're defining it in, ask me where we're going from top down.

144
00:06:18,500 --> 00:06:19,000
Right?

145
00:06:19,700 --> 00:06:24,000
So, you know, if we were to switch it, so that y was up then the first

146
00:06:24,000 --> 00:06:26,800
row that we drew at the bottom of the screen, right?

147
00:06:26,800 --> 00:06:29,900
Because, remember, if we start drawing, you know, if we were to

148
00:06:30,100 --> 00:06:32,600
Drawing Tiles at the bottom corner of the stream.

149
00:06:32,600 --> 00:06:34,600
This is this is the 00 tile.

150
00:06:34,700 --> 00:06:35,400
All of a sudden.

151
00:06:36,100 --> 00:06:39,200
Well, the 00 tile in this array is up here, right?

152
00:06:39,200 --> 00:06:43,500
So this would it be flipped upside down all of these prefab tile maps

153
00:06:43,500 --> 00:06:45,800
that we created would be flipped upside down.

154
00:06:46,100 --> 00:06:50,000
And since we're actually, I mean, we don't really, we are not wedded

155
00:06:50,000 --> 00:06:50,600
to this.

156
00:06:50,800 --> 00:06:53,700
We didn't really spend any time making anything meaningful here so we

157
00:06:53,700 --> 00:06:56,600
could just flip this upside down but it's worth noting that that's

158
00:06:56,600 --> 00:06:57,300
what would happen.

159
00:06:57,500 --> 00:06:57,800
Right?

160
00:06:57,800 --> 00:06:59,800
Our entire tilemap would be flipped.

161
00:07:00,100 --> 00:07:00,900
Upside down.

162
00:07:01,000 --> 00:07:04,600
So, for example, and we could do that right now, actually it pretty

163
00:07:04,600 --> 00:07:06,400
easily in our drawing code.

164
00:07:06,400 --> 00:07:06,900
Right?

165
00:07:06,900 --> 00:07:10,500
The only thing that made it so that this stuff Drew in the way that it

166
00:07:10,500 --> 00:07:12,000
drew for the tiles.

167
00:07:12,200 --> 00:07:17,400
Is the fact that when we started off on row 0, right, that we did the

168
00:07:17,400 --> 00:07:23,100
upper left corner right plus so this is the X, which would say the

169
00:07:23,100 --> 00:07:27,300
same, the upper left corner is y, plus, however, many rows down.

170
00:07:27,300 --> 00:07:28,600
We were times the side and pixels.

171
00:07:28,600 --> 00:07:29,800
So this was essentially

172
00:07:30,000 --> 00:07:31,700
Way that we were drawing as we started here.

173
00:07:31,700 --> 00:07:32,900
And we said the first tile is here.

174
00:07:32,900 --> 00:07:36,600
And then for every row we went down, we added however long, this was

175
00:07:36,600 --> 00:07:37,700
to get to the next one.

176
00:07:37,900 --> 00:07:38,100
Right?

177
00:07:38,100 --> 00:07:40,700
So we're just kind of doing this process on the way down.

178
00:07:40,800 --> 00:07:44,400
So the if we wanted to invert The Way We Were drawing, it's pretty

179
00:07:44,400 --> 00:07:45,600
darn trivial, right?

180
00:07:45,600 --> 00:07:48,800
All we would have to do is say that this now is going to be the

181
00:07:48,800 --> 00:07:51,000
lower-left right from now on.

182
00:07:51,100 --> 00:07:54,100
And instead of adding this in, right?

183
00:07:54,200 --> 00:07:57,800
We're going to actually subtract the tile side in pixels, right?

184
00:07:57,800 --> 00:07:59,800
But in in subtracting

185
00:08:01,300 --> 00:08:05,300
This this Min X now, this Min y Max X thing, right?

186
00:08:05,900 --> 00:08:10,400
We actually have to draw from the base up and Min and Max is kind of

187
00:08:10,400 --> 00:08:14,800
an incorrect terminology now as well, because our coordinate system

188
00:08:14,800 --> 00:08:20,100
that were actually outputting to still has why sort of going down on

189
00:08:20,100 --> 00:08:20,700
the screen.

190
00:08:20,700 --> 00:08:25,000
So we would actually have to pass the Min and Max backwards, right?

191
00:08:25,000 --> 00:08:26,400
And I think it's see what's happening here.

192
00:08:26,900 --> 00:08:30,400
So this basically would do the inversion if we wanted to flip things.

193
00:08:30,600 --> 00:08:35,299
Side down, we could do that and it wouldn't be that hard for us to do.

194
00:08:35,500 --> 00:08:38,500
So, let me just show you what that looks like if we just do that flip

195
00:08:38,799 --> 00:08:39,500
right here.

196
00:08:41,100 --> 00:08:43,799
So let's set the lower left like that.

197
00:08:44,300 --> 00:08:49,200
And so the lower left X is still what it is, but the lower left Y is

198
00:08:49,200 --> 00:08:52,500
actually now going to be instead of 0 it's going to be the height of

199
00:08:52,500 --> 00:08:53,100
that buffer.

200
00:08:53,100 --> 00:08:53,500
It's right.

201
00:08:53,500 --> 00:08:58,600
It's going to be when the gain buffer comes in and tells us what the

202
00:08:58,600 --> 00:08:59,500
entire screen is.

203
00:09:00,000 --> 00:09:01,600
Want to start drawing it.

204
00:09:01,700 --> 00:09:03,900
Basically, at that bottom corner, right?

205
00:09:03,900 --> 00:09:06,900
And so that is this height parameter here, right?

206
00:09:06,900 --> 00:09:10,900
And so that, that buffer that we get passed in in game update and

207
00:09:10,900 --> 00:09:18,000
render basically, if you remember it takes this, well, that's good

208
00:09:18,000 --> 00:09:20,200
sound samples, or is it this one time?

209
00:09:20,400 --> 00:09:22,500
It takes this off-screen buffer, right?

210
00:09:22,500 --> 00:09:26,800
And so what we want to do there is we want to say, okay that buffers

211
00:09:26,800 --> 00:09:29,800
height is where we're going to start in the lower left corner, right?

212
00:09:30,000 --> 00:09:31,000
Right, so, that's that.

213
00:09:31,300 --> 00:09:32,800
So, that would be where we would start.

214
00:09:32,800 --> 00:09:35,300
And then what we have to do is what's this?

215
00:09:35,300 --> 00:09:37,500
Oh, I got convert that to float.

216
00:09:38,000 --> 00:09:41,000
And then what we'd have to do is when we draw the player, we'd have to

217
00:09:41,000 --> 00:09:42,200
repeat the same math.

218
00:09:42,300 --> 00:09:45,600
We're now at the lower left corner, the X computation stays the same,

219
00:09:45,700 --> 00:09:48,000
but the why computation is different.

220
00:09:48,000 --> 00:09:51,900
We start at the lower left corner, we subtract however, far, we have

221
00:09:51,900 --> 00:09:54,200
to go for each individual tile.

222
00:09:54,200 --> 00:09:57,200
So, you know, if the tile by 5:00, we start, we're still exactly where

223
00:09:57,200 --> 00:09:57,600
we are.

224
00:09:58,000 --> 00:09:59,000
Then we go to

225
00:10:01,000 --> 00:10:03,100
Excuse me, the relative, why?

226
00:10:03,300 --> 00:10:04,300
And the tile relative?

227
00:10:04,300 --> 00:10:08,000
Why for the guy now will also be based off that bottom corner, right?

228
00:10:08,400 --> 00:10:12,300
And now our guy motion code is is busted, but in general, we should

229
00:10:12,300 --> 00:10:14,200
still be able to see the game.

230
00:10:14,500 --> 00:10:18,500
And so, as you can see here, like when I'm moving, I'm actually moving

231
00:10:18,500 --> 00:10:19,000
backwards.

232
00:10:19,000 --> 00:10:22,900
You can't see me pushing the wrong key, but now we flipped our tile

233
00:10:22,900 --> 00:10:23,800
map upside down.

234
00:10:23,800 --> 00:10:27,900
And so, why is now going up in our world instead of down, right?

235
00:10:28,400 --> 00:10:30,600
And that's, you know, obviously pretty.

236
00:10:30,800 --> 00:10:31,500
Forward.

237
00:10:31,500 --> 00:10:34,700
There's really nothing else that has to happen in terms of handling

238
00:10:34,700 --> 00:10:37,300
the world, because everything works upside down or right side up,

239
00:10:37,300 --> 00:10:40,700
obviously, but you know, you get the idea.

240
00:10:41,500 --> 00:10:45,300
So the only other thing we need to do now is fix the guy's movement

241
00:10:45,300 --> 00:10:49,800
code, so that the guys movement code is not is going to be sending him

242
00:10:49,800 --> 00:10:50,400
in the right direction.

243
00:10:50,400 --> 00:10:54,400
So instead of using the negative version.

244
00:10:54,400 --> 00:10:56,500
So right now I'm pushing down to move them up or it right.

245
00:10:56,500 --> 00:11:00,600
Like I'm pushing the S key to move them upwards instead of that up in

246
00:11:00,600 --> 00:11:00,600
our

247
00:11:00,700 --> 00:11:04,500
Our guy movement code, wherever our guy movement code actually was.

248
00:11:04,800 --> 00:11:05,900
Let's see here.

249
00:11:06,200 --> 00:11:09,100
It's one of the things about not breaking things off into functions is

250
00:11:09,800 --> 00:11:12,000
I can't use the Alt-J to jump to them.

251
00:11:12,100 --> 00:11:15,900
I wish there was a jump to comment but unfortunately, there isn't.

252
00:11:16,200 --> 00:11:18,200
Oh, the things that a good editor could do.

253
00:11:18,900 --> 00:11:21,700
So anyway, inside our movement code here, right?

254
00:11:21,800 --> 00:11:24,800
You'll notice that basically we have things inverted.

255
00:11:24,800 --> 00:11:28,500
So ended down for move up and move down are inverted from what they

256
00:11:28,500 --> 00:11:29,800
are here left and right.

257
00:11:29,900 --> 00:11:30,600
It's - and

258
00:11:30,700 --> 00:11:34,000
Positive but move up if - so what we'd want to do in our guy movement

259
00:11:34,000 --> 00:11:36,200
code, right is we'd want to move him in the opposite way.

260
00:11:36,200 --> 00:11:40,500
And then when we come here, now, he's moving correctly around the

261
00:11:40,500 --> 00:11:41,400
screen, right?

262
00:11:41,400 --> 00:11:44,000
And so now, I'm pushing s to go downwards and off we go.

263
00:11:44,300 --> 00:11:47,600
So, I think that was the right order to do things then because that

264
00:11:47,600 --> 00:11:48,500
was pretty simple to do.

265
00:11:48,500 --> 00:11:49,500
And now we're in that order.

266
00:11:49,500 --> 00:11:53,900
And now when we do our tile map stuff to that, we're going to do will,

267
00:11:53,900 --> 00:11:55,900
or we'll just start out in the right coordinate system when we won't

268
00:11:55,900 --> 00:11:56,700
have to rewrite everything.

269
00:11:56,700 --> 00:11:57,400
Right?

270
00:11:57,600 --> 00:11:59,200
So pretty straightforward.

271
00:11:59,200 --> 00:11:59,900
Hopefully that made sense.

272
00:12:00,000 --> 00:12:03,700
Sense, all right, so it flipped our world upside down.

273
00:12:03,700 --> 00:12:05,500
But like I said, we don't care about that yet.

274
00:12:05,500 --> 00:12:06,000
Basically.

275
00:12:06,000 --> 00:12:08,800
All that means is when we write the code that does our world

276
00:12:08,800 --> 00:12:09,500
generation.

277
00:12:09,500 --> 00:12:11,500
We will just write it knowing that our coordinate system.

278
00:12:11,500 --> 00:12:12,400
Has why going up?

279
00:12:12,400 --> 00:12:14,700
And it will, you know, think about when it's putting a tile above

280
00:12:14,700 --> 00:12:19,000
another tile, it will use plus 1 instead of negative 1 and we never

281
00:12:19,000 --> 00:12:20,600
have to really make stuff in a ski.

282
00:12:20,600 --> 00:12:23,200
So we don't really have to solve the problem that these come, that

283
00:12:23,200 --> 00:12:25,200
these are backwards from how they appear on the screen.

284
00:12:25,300 --> 00:12:28,600
That doesn't really, you know, there's nothing particularly special

285
00:12:28,600 --> 00:12:29,300
about that.

286
00:12:29,600 --> 00:12:29,900
So,

287
00:12:30,000 --> 00:12:31,700
That seems like not really a big problem.

288
00:12:32,300 --> 00:12:32,600
Okay.

289
00:12:32,600 --> 00:12:34,200
So we're chopping through our to do is here.

290
00:12:34,200 --> 00:12:34,700
That's good.

291
00:12:34,700 --> 00:12:36,300
Why is going up whether or not?

292
00:12:36,300 --> 00:12:38,500
These should be from the center of a tile is something we can deal

293
00:12:38,500 --> 00:12:39,300
with a little bit later.

294
00:12:39,300 --> 00:12:41,700
Certainly because it really doesn't have anything to do with anything

295
00:12:41,700 --> 00:12:42,900
other than the player movement code.

296
00:12:42,900 --> 00:12:44,900
So when we look at the player movement code, again, maybe we can talk

297
00:12:44,900 --> 00:12:45,600
about that.

298
00:12:46,200 --> 00:12:48,400
But basically what we need to do now is we need to start thinking

299
00:12:48,400 --> 00:12:49,400
about this, right?

300
00:12:50,000 --> 00:12:51,300
And so, here's what I want to do.

301
00:12:51,700 --> 00:12:54,000
I've said it a couple times, but I think it keeps bearing repeating

302
00:12:54,000 --> 00:12:55,400
because, again, it's kind of complicated.

303
00:12:55,400 --> 00:12:58,100
It's a little bit of an advanced thing to some degree.

304
00:12:59,100 --> 00:12:59,800
I'm just going to state

305
00:13:00,000 --> 00:13:03,100
Thing one more time, just so we're all clear on what's going on.

306
00:13:03,400 --> 00:13:03,900
Okay.

307
00:13:04,300 --> 00:13:09,900
So what I want to State very clearly is we need a lot of precision as

308
00:13:09,900 --> 00:13:11,900
to where people are in the world.

309
00:13:12,400 --> 00:13:16,700
So if we were to use 32-bit floating Point values, right?

310
00:13:16,800 --> 00:13:18,100
Which are, which are what we're calling.

311
00:13:18,100 --> 00:13:20,700
We're calling those real 32s in the code, right?

312
00:13:20,700 --> 00:13:26,400
And that's type Deft to be a float, a C++ float, right?

313
00:13:26,900 --> 00:13:29,800
That gives us 24 bits of

314
00:13:29,900 --> 00:13:30,900
Actual data.

315
00:13:30,900 --> 00:13:34,600
Basically, there's an exponent there's a sign bit but we have 24 bits

316
00:13:34,600 --> 00:13:35,700
of actual resolution.

317
00:13:35,900 --> 00:13:36,500
Right?

318
00:13:37,100 --> 00:13:38,800
Well what ends up happening there?

319
00:13:39,900 --> 00:13:41,900
Is ice as I explained before.

320
00:13:41,900 --> 00:13:46,600
I need at least eight bits of fractional, Precision per pixel, right?

321
00:13:46,600 --> 00:13:50,900
So for each individual pixel, on the screen, I need eight bits that

322
00:13:50,900 --> 00:13:54,300
say how far through that pixel you are basically.

323
00:13:54,400 --> 00:13:56,900
And the reason for that is I want to support the full color.

324
00:13:56,900 --> 00:14:00,100
Range of blending and colors are 8 Bits, at least, on most modern

325
00:14:00,100 --> 00:14:00,700
displays.

326
00:14:00,900 --> 00:14:04,800
So, when we output colors, we need to Output a level of color between

327
00:14:04,800 --> 00:14:06,100
0 and 255.

328
00:14:06,100 --> 00:14:09,200
And so, when we are alpha blending and we're talking about

329
00:14:09,500 --> 00:14:12,400
Someone is this is a pixel right here, right now.

330
00:14:12,400 --> 00:14:14,800
We're talking about where a shape passes through it.

331
00:14:15,000 --> 00:14:19,200
I want to be able to talk about how much of the pixel is covered X and

332
00:14:19,200 --> 00:14:25,100
Y wise, I want to be able to talk about that at 256 steps of

333
00:14:25,100 --> 00:14:27,900
resolution, which is 8 Bits because that will make sure that I have

334
00:14:27,900 --> 00:14:31,200
full color resolution to do like anti-aliasing and stuff like that.

335
00:14:31,600 --> 00:14:32,400
So I need eight bits.

336
00:14:32,400 --> 00:14:33,000
That immediately.

337
00:14:33,000 --> 00:14:37,700
Chops us down to six bits of resolution on our, on our floating point

338
00:14:37,700 --> 00:14:38,800
value, right?

339
00:14:39,500 --> 00:14:46,000
16 16 bits of resolution is 65536 pixels, right?

340
00:14:46,000 --> 00:14:49,400
Because this is fractions of a pixel is I took the 8 Bits for that.

341
00:14:49,500 --> 00:14:55,000
So, we have 65,000 pixels, right of resolution, before I start to lose

342
00:14:55,000 --> 00:14:57,400
resolution and I lose some of this.

343
00:14:57,400 --> 00:14:58,900
I lose some bits here.

344
00:14:58,900 --> 00:14:59,700
I lose bits.

345
00:15:00,000 --> 00:15:01,500
In terms of my, of my rounding.

346
00:15:01,500 --> 00:15:05,200
So if you imagine the guy starting out at 0-0 in the world, what I

347
00:15:05,200 --> 00:15:06,500
want to talk about, I'm just a nice.

348
00:15:06,600 --> 00:15:10,200
Like I said, I've said this again, but how far can he move from zero

349
00:15:10,200 --> 00:15:13,700
zero along X or along y before I run out of this Precision.

350
00:15:14,500 --> 00:15:19,200
Well, like I was saying before, we know that a screen on an HD display

351
00:15:19,200 --> 00:15:23,500
is going to be like at least 1920 across in X, right?

352
00:15:23,800 --> 00:15:26,300
And let's plays are getting even higher res than that.

353
00:15:26,300 --> 00:15:27,300
So that's being generous.

354
00:15:27,300 --> 00:15:29,900
We may want to run handmade Hero at a higher resolution at some

355
00:15:30,000 --> 00:15:30,600
It than that.

356
00:15:30,900 --> 00:15:33,500
So, 65536 / 1920.

357
00:15:34,500 --> 00:15:38,300
You can see that basically, we have 34 screens that we can go in this

358
00:15:38,300 --> 00:15:40,800
direction, right before we lose Precision.

359
00:15:41,100 --> 00:15:42,700
So 34 screens in that direction.

360
00:15:42,700 --> 00:15:45,400
We'd have 34 screens in this direction, which means the maximum span

361
00:15:45,400 --> 00:15:50,200
of our game world would be 68 screens right at 68 screens.

362
00:15:50,300 --> 00:15:50,500
I don't know.

363
00:15:50,500 --> 00:15:52,300
How long does it take to walk across the screen.

364
00:15:52,400 --> 00:15:54,000
I'm trying to imagine a game like, Legend of Zelda.

365
00:15:54,000 --> 00:15:55,800
It only takes a couple of seconds.

366
00:15:55,800 --> 00:15:59,500
Maybe let's say five seconds to walk across the screen, so I don't

367
00:15:59,500 --> 00:15:59,900
know, just doing

368
00:16:00,000 --> 00:16:04,700
A ballpark if the max I could have with 68 screens and I want to take

369
00:16:04,700 --> 00:16:06,200
five seconds ago, across them.

370
00:16:06,400 --> 00:16:07,500
How many minutes is that?

371
00:16:07,500 --> 00:16:10,000
Well, it would take five minutes to walk from one end to the other.

372
00:16:10,300 --> 00:16:10,800
Right?

373
00:16:11,000 --> 00:16:12,000
That's not very long game.

374
00:16:12,000 --> 00:16:12,200
Time.

375
00:16:12,200 --> 00:16:14,200
6 minutes course, you'd have to clear out the monsters there.

376
00:16:14,200 --> 00:16:15,900
I suppose, you know what I'm saying.

377
00:16:15,900 --> 00:16:19,800
So, so we could we could consider just using 32-bit floating Point

378
00:16:19,800 --> 00:16:22,300
values to store where we are in the world, right?

379
00:16:22,400 --> 00:16:23,600
We could consider it.

380
00:16:23,600 --> 00:16:24,300
It would be a game.

381
00:16:24,300 --> 00:16:25,100
Limitation.

382
00:16:26,100 --> 00:16:27,000
We could consider it.

383
00:16:27,000 --> 00:16:28,200
I don't really want to consider it.

384
00:16:28,200 --> 00:16:29,700
Because again, part of the reason.

385
00:16:29,900 --> 00:16:32,700
For this is to sort of show programming techniques.

386
00:16:32,700 --> 00:16:37,500
And so if we just slap some floats in there were sort of we're only

387
00:16:37,500 --> 00:16:39,300
showing a technique that doesn't really scale very well.

388
00:16:39,300 --> 00:16:42,800
So what I'm doing instead is I want to show a technique that will

389
00:16:42,800 --> 00:16:47,000
scale to basically an arbitrary number of screens something that the

390
00:16:47,000 --> 00:16:48,000
player could never walk across.

391
00:16:48,000 --> 00:16:51,500
And so what I'm doing instead is I'm going to store what tile you're

392
00:16:51,500 --> 00:16:52,300
on as an integer.

393
00:16:52,300 --> 00:16:55,000
So I'm going to use a 32-bit integer to store what tile you're on,

394
00:16:55,000 --> 00:16:55,500
right?

395
00:16:55,500 --> 00:16:58,800
And then which is what we're doing right now.

396
00:16:58,800 --> 00:16:59,900
We're using the

397
00:17:00,000 --> 00:17:00,200
Alex.

398
00:17:00,200 --> 00:17:00,500
Tell y.

399
00:17:00,500 --> 00:17:02,300
Now we have a secondary layer here and that's the part.

400
00:17:02,300 --> 00:17:03,400
I'm going to talk about in a second.

401
00:17:03,900 --> 00:17:04,700
So we have 30 minutes to.

402
00:17:04,700 --> 00:17:07,900
This is what tile you're on, write X and Y and of course, our wives

403
00:17:07,900 --> 00:17:09,599
going up now, so I have to start drawing it that way.

404
00:17:09,800 --> 00:17:10,400
Right.

405
00:17:10,400 --> 00:17:14,000
So here's why here's X and there's the 00 tile, and then there's tiles

406
00:17:14,000 --> 00:17:14,300
that go out.

407
00:17:14,300 --> 00:17:18,500
And of course, there can be 4 billion tiles in any direction, right?

408
00:17:18,599 --> 00:17:22,500
And then I'm going to use the 32-bit floating point value, right?

409
00:17:22,700 --> 00:17:25,300
That 32-bit floating point value would just tell you where you are

410
00:17:25,300 --> 00:17:27,400
inside a tile which basically gives me way.

411
00:17:27,400 --> 00:17:29,200
Overkill resolution.

412
00:17:29,300 --> 00:17:29,800
Now, we

413
00:17:29,900 --> 00:17:34,400
We really only need, you know, an 8-bit or 16-bit value for that, but

414
00:17:34,400 --> 00:17:38,800
there's no real benefit to it because storing 16 bits for something

415
00:17:38,800 --> 00:17:40,700
versus storing 32 bits for something.

416
00:17:41,000 --> 00:17:43,400
There's no way to really go in between those very efficiently.

417
00:17:43,400 --> 00:17:44,700
You kind of have to pick one of the other.

418
00:17:45,100 --> 00:17:48,200
So what I'm trying to do is I want to pick something.

419
00:17:48,200 --> 00:17:52,700
We're essentially, I can take two things that are on the same screen,

420
00:17:53,200 --> 00:17:56,200
change them into floating Point values that operate just only in the

421
00:17:56,200 --> 00:17:59,300
screen space and then do everything in 32-bit float from then on.

422
00:18:00,000 --> 00:18:03,100
But I want this 32-bit integer for the tile index.

423
00:18:03,300 --> 00:18:07,600
I want to have that for storing, my canonical positions everywhere, so

424
00:18:07,600 --> 00:18:12,100
that I can always talk about wherever you are relative to something

425
00:18:12,400 --> 00:18:13,700
that keeps the Precision.

426
00:18:13,900 --> 00:18:16,900
And so, what we'll do in general, I think is will take, like, sort of

427
00:18:16,900 --> 00:18:20,200
the stuff that's on the screen, will map it all into the space of the

428
00:18:20,200 --> 00:18:24,200
screen or something like that, you know, some around some Center tile,

429
00:18:24,300 --> 00:18:24,500
right?

430
00:18:24,500 --> 00:18:28,200
Well, map, everything into one set of floats for doing our

431
00:18:28,200 --> 00:18:29,800
computations about like, you know,

432
00:18:30,000 --> 00:18:32,500
Checking where people are relative to each other or that sort of

433
00:18:32,500 --> 00:18:33,000
stuff.

434
00:18:33,000 --> 00:18:36,500
We can do that mapping once and then do everything in 32-bit float.

435
00:18:36,500 --> 00:18:38,500
So we don't have to use doubles or anything like that.

436
00:18:38,900 --> 00:18:42,300
And we'll just have this sort of tile index as a thing that we

437
00:18:42,300 --> 00:18:46,300
preserve when we're sort of talking about stuff in the permanent

438
00:18:46,300 --> 00:18:47,000
storage.

439
00:18:47,200 --> 00:18:49,300
So that we never have to worry about losing Precision.

440
00:18:49,300 --> 00:18:52,400
When and we can make the world effectively, infinitely large like much

441
00:18:52,400 --> 00:18:56,200
larger than a player could ever hope to walk across four billion

442
00:18:56,200 --> 00:18:57,800
tiles, obviously.

443
00:18:59,100 --> 00:19:02,500
With each tile being 60 pixels.

444
00:19:02,500 --> 00:19:03,400
So four billion tiles.

445
00:19:03,400 --> 00:19:06,800
I don't know how many we said was on a screen, but I think if there

446
00:19:06,800 --> 00:19:09,700
was something like, you know, 16-bit, so be something like, it'd be

447
00:19:09,700 --> 00:19:14,100
something like 200 million tiles across which is a pretty darn big

448
00:19:14,700 --> 00:19:18,200
world for 200 million screens across which is pretty darn Big World.

449
00:19:18,600 --> 00:19:21,300
All right, so that's basically what I wanted to do and that's why

450
00:19:21,300 --> 00:19:23,300
we're using this system that has multiple things.

451
00:19:23,500 --> 00:19:26,100
But if you notice the way we implemented it, currently we have a tile

452
00:19:26,100 --> 00:19:28,800
Map X and Y, and a tile X and Y, and that gets kind of

453
00:19:28,900 --> 00:19:32,400
Some what I'd rather be able to do is switch to a scheme.

454
00:19:32,400 --> 00:19:33,700
That's a little more agnostic about that.

455
00:19:33,700 --> 00:19:36,500
And also people were concerned about scrolling, they were saying they

456
00:19:36,500 --> 00:19:39,500
didn't like the fact that we were going to use a fixed perspective on

457
00:19:39,500 --> 00:19:41,800
things because they thought scrolling would be harder to program in

458
00:19:41,800 --> 00:19:42,500
more interesting.

459
00:19:43,700 --> 00:19:48,100
So I also am just for for educational purposes.

460
00:19:48,100 --> 00:19:51,100
Also going to point out that we want to pick a scheme that would work

461
00:19:51,100 --> 00:19:52,000
for scrolling as well.

462
00:19:52,000 --> 00:19:53,400
So we're not trying to cheat here.

463
00:19:53,700 --> 00:19:56,400
I'm going to write this thing as if you could scroll, anytime you

464
00:19:56,400 --> 00:19:57,000
wanted to.

465
00:19:59,200 --> 00:20:01,400
And then that way if we ever do find that we want to turn on scrolling

466
00:20:01,400 --> 00:20:05,200
for some reason we can I just don't like scrolling from a gameplay

467
00:20:05,200 --> 00:20:10,000
perspective that separate issue anyway, so what I'd like to do now is

468
00:20:10,000 --> 00:20:12,200
what we were doing is we were thinking about tile Maps.

469
00:20:12,400 --> 00:20:13,800
This is the screen right?

470
00:20:13,800 --> 00:20:16,200
In fact, well, let's let's let me make that a little bit bigger.

471
00:20:17,200 --> 00:20:19,400
This is the screen and what we were doing before.

472
00:20:19,400 --> 00:20:21,700
As we were saying that a tile map is one screen Worth, right?

473
00:20:21,700 --> 00:20:23,000
That's how we were drawing it.

474
00:20:23,300 --> 00:20:27,600
And so then we had like a tile map for every screen and we index those

475
00:20:27,700 --> 00:20:28,400
using this.

476
00:20:28,700 --> 00:20:32,300
Then we talked about the tile on each individual tile map.

477
00:20:32,300 --> 00:20:35,000
Once we, which is basically a screen, we used these to index into

478
00:20:35,000 --> 00:20:35,400
those.

479
00:20:35,600 --> 00:20:38,800
What I want to do now is switch to saying that the screen and the tile

480
00:20:38,800 --> 00:20:40,100
maps are unrelated.

481
00:20:40,800 --> 00:20:44,400
The screen is just a window into our four billion by four billion.

482
00:20:44,600 --> 00:20:45,300
Tilemap.

483
00:20:45,400 --> 00:20:46,800
So we have a giant tile map.

484
00:20:46,900 --> 00:20:49,600
And the screen at any given time is just looking at some portion of

485
00:20:49,600 --> 00:20:50,300
that world.

486
00:20:50,400 --> 00:20:51,300
Right now.

487
00:20:51,300 --> 00:20:53,500
We can't store a 4 billion by 4 billion.

488
00:20:53,500 --> 00:20:54,000
Tilemap.

489
00:20:54,000 --> 00:20:55,600
There's no way to store that, right.

490
00:20:55,600 --> 00:20:58,900
We there's just it's not possible because if we were to actually store

491
00:20:58,900 --> 00:20:59,900
that if you

492
00:21:00,000 --> 00:21:01,100
At how big that would be.

493
00:21:01,600 --> 00:21:07,100
So, we have a four billion, 10 2014, 12 4, Giga tiles.

494
00:21:07,200 --> 00:21:08,200
It's really Giga tiles.

495
00:21:08,200 --> 00:21:08,700
Right?

496
00:21:09,200 --> 00:21:14,200
We have four billion even just a store for billion tiles, right?

497
00:21:14,200 --> 00:21:16,700
Would be even his one byte per tile, which we're going to want to

498
00:21:16,700 --> 00:21:17,900
store more than one byte per tile.

499
00:21:17,900 --> 00:21:20,000
I strongly suspect right there.

500
00:21:20,000 --> 00:21:22,300
That would be 4 GB, right?

501
00:21:22,500 --> 00:21:26,700
Just four gigabytes, just for one row of tiles in our town map, but

502
00:21:26,700 --> 00:21:29,900
now we would need four billion for

503
00:21:30,000 --> 00:21:33,800
GB things to store our tiles, which is, there's no way that's not

504
00:21:33,800 --> 00:21:34,200
impossible.

505
00:21:34,200 --> 00:21:36,600
You can't even get a hard drive that we store that many right, let

506
00:21:36,600 --> 00:21:38,500
alone in game memory for that many.

507
00:21:39,400 --> 00:21:44,600
So what we want to do instead is we want to store this sparsely.

508
00:21:44,800 --> 00:21:50,900
So, if you imagine are four billion by four billion, tilemap, here's

509
00:21:50,900 --> 00:21:55,800
four billion by 4 billion and we imagine we create the world.

510
00:21:55,800 --> 00:21:57,600
The world is only going to exist.

511
00:21:57,600 --> 00:21:59,900
You know, our whatever our world is, it's only

512
00:22:00,000 --> 00:22:05,800
Going to exist in some small kind of sparse set of things.

513
00:22:05,800 --> 00:22:06,400
Right?

514
00:22:06,700 --> 00:22:10,400
And so, the game doesn't need to store all of that empty space.

515
00:22:10,400 --> 00:22:13,000
We just want to make sure that it could be as long as it wanted in a

516
00:22:13,000 --> 00:22:15,300
direction and never doesn't have any constraints on that.

517
00:22:15,400 --> 00:22:18,300
So we just want to make sure that we can store it all.

518
00:22:18,400 --> 00:22:21,400
So what we're going to do is we're going to partition it into tiles

519
00:22:21,400 --> 00:22:24,100
like our tile map system from before, but instead of making them

520
00:22:24,100 --> 00:22:24,500
screens.

521
00:22:24,500 --> 00:22:26,300
They're just going to be arbitrary chunks.

522
00:22:26,400 --> 00:22:29,700
That are however big it happens to be for efficiency, right?

523
00:22:29,900 --> 00:22:33,300
And then we're only going to store the chunks that happen to be where

524
00:22:33,300 --> 00:22:34,900
there are things in the world.

525
00:22:34,900 --> 00:22:36,900
So if there isn't anything, we don't store a chump.

526
00:22:36,900 --> 00:22:39,300
Look, we don't store chunks out here, but where there are things we

527
00:22:39,300 --> 00:22:40,700
store chunks, right?

528
00:22:40,900 --> 00:22:42,600
So our chunks can be whatever we want.

529
00:22:42,600 --> 00:22:48,900
Let's say they'd be 128 by 128 tiles or something or 256 by 256 tiles.

530
00:22:48,900 --> 00:22:52,000
And that would basically be based on how much sparseness we want to

531
00:22:52,000 --> 00:22:58,100
exploit the bigger the tile size, the less sparseness we can exploit

532
00:22:58,100 --> 00:22:59,800
because you're starting to get

533
00:23:00,100 --> 00:23:03,100
Into things where you know, you kind of maybe are too big for the

534
00:23:03,100 --> 00:23:04,100
thing, you're trying to represent.

535
00:23:04,100 --> 00:23:08,200
So if a screen is, you know, I forget what we said 17 by 9 is that we

536
00:23:08,200 --> 00:23:09,000
said 70 by 9.

537
00:23:09,100 --> 00:23:11,600
So the screen is 17 by 9, right?

538
00:23:12,100 --> 00:23:15,400
Then if we make something that was like 64 by 64, that might be a good

539
00:23:15,400 --> 00:23:18,700
fit for something, right, but if we start to get up to too high, we

540
00:23:18,700 --> 00:23:21,300
might be losing some sparseness.

541
00:23:21,400 --> 00:23:22,900
So it depends on how much we want to do.

542
00:23:23,300 --> 00:23:25,500
And if we look at the calc for that, right?

543
00:23:25,600 --> 00:23:29,800
If we look at what 256 x, 256 is that

544
00:23:29,900 --> 00:23:31,800
64k 41, B /.

545
00:23:31,900 --> 00:23:34,000
And let's say, we were storing something a little more aggressive.

546
00:23:34,000 --> 00:23:36,600
Like, maybe we're storing instead of one byte per.

547
00:23:36,700 --> 00:23:40,400
Maybe we're storing 128, bytes per that would still be pretty large.

548
00:23:40,400 --> 00:23:44,600
That'd be like, eight megabytes for one of these tile chunks, right?

549
00:23:45,200 --> 00:23:48,000
And so, like I said, I don't know how big we want those to be exactly

550
00:23:48,600 --> 00:23:50,500
but we, you know, that's a parameter we can do.

551
00:23:50,500 --> 00:23:52,600
So we could start out by doing them to 156.

552
00:23:52,600 --> 00:23:58,400
That would be 24.8 as our format for our 32-bit integer where

553
00:23:58,400 --> 00:23:59,800
basically the lower,

554
00:24:00,000 --> 00:24:03,700
It's of the index into the tile map would tell you which of the tiles

555
00:24:03,700 --> 00:24:07,400
you were here and the upper 24 would tell you which of these chunks

556
00:24:07,400 --> 00:24:08,600
you were right.

557
00:24:09,500 --> 00:24:13,300
So to be more explicit about that, essentially what we have is a

558
00:24:13,300 --> 00:24:15,200
virtual addressing scheme here, right?

559
00:24:15,300 --> 00:24:18,400
We've got our y position of a tile in our exposition of a tile and

560
00:24:18,400 --> 00:24:22,100
they're just 32-bit numbers, but instead of accessing the like 32-bit

561
00:24:22,100 --> 00:24:25,900
numbers, we can have the value for x and y, in half and the lower

562
00:24:25,900 --> 00:24:29,300
part, however, many bits, we decide if it was 256 by 256, to be eight

563
00:24:29,300 --> 00:24:29,800
bits on the lower.

564
00:24:30,000 --> 00:24:33,600
Part, however, much that lower part is tells us where in the Chunk we

565
00:24:33,600 --> 00:24:37,400
are, which tile which in the to G6, Like a G6, would mean there's 26

566
00:24:37,600 --> 00:24:41,600
tiles across two interfaces tells down in each chunk, which of those

567
00:24:41,600 --> 00:24:44,500
tiles were in a particular chunk and the upper 24s.

568
00:24:44,800 --> 00:24:45,700
So, we have an eight.

569
00:24:45,700 --> 00:24:50,900
We have an 8-bit comma 8 B, which is a 256 by 256 tile map for each

570
00:24:50,900 --> 00:24:51,400
chunk.

571
00:24:51,800 --> 00:24:56,600
And then we have a 224 comma 24-bit value, that would tell us, which

572
00:24:56,600 --> 00:24:57,400
of these were in.

573
00:24:57,400 --> 00:24:59,400
And we know that we only store some of these, right?

574
00:24:59,400 --> 00:24:59,900
So this would

575
00:25:00,000 --> 00:25:04,000
Would be a sparse look up into our tile Universe, right?

576
00:25:04,600 --> 00:25:05,500
So that's what we want to do.

577
00:25:05,500 --> 00:25:07,300
Here for the screen.

578
00:25:07,700 --> 00:25:08,200
The screen.

579
00:25:08,200 --> 00:25:11,700
We'll just remember, for example, it could be whatever its Center tile

580
00:25:11,700 --> 00:25:14,800
is we could say, the screen is looking at this Tile Center tile and

581
00:25:14,800 --> 00:25:16,600
then it's got some offset from that Center tile.

582
00:25:16,600 --> 00:25:17,500
That's looking at.

583
00:25:17,800 --> 00:25:21,200
And then when it does is it will ask this guy to please give it

584
00:25:21,200 --> 00:25:23,900
whatever the tile maps are that overlap it.

585
00:25:23,900 --> 00:25:26,300
So maybe we're looking at a tile boundary here.

586
00:25:26,700 --> 00:25:28,700
So this is one tile, this is one chunk.

587
00:25:28,700 --> 00:25:29,800
This is one chunk this winter.

588
00:25:29,900 --> 00:25:33,300
Unk this one chunk and so creating a screen will basically be about

589
00:25:33,300 --> 00:25:40,400
drawing up to four of these tilemap sections sections of the tile map

590
00:25:40,400 --> 00:25:42,700
chunks right to fill in the whole screen.

591
00:25:42,700 --> 00:25:48,800
So this might be a this might be b c and d and up here, right?

592
00:25:48,900 --> 00:25:54,700
That would be a b c and d and this is essentially the screen mapping

593
00:25:54,700 --> 00:25:56,100
to that area, right?

594
00:25:56,200 --> 00:25:58,500
That region of the of the tile map sections.

595
00:25:59,600 --> 00:26:01,200
So, that is what we are trying to accomplish.

596
00:26:01,200 --> 00:26:02,600
Now, is moving to this.

597
00:26:02,600 --> 00:26:06,500
This thing where the screen is just a query into our tile maps, and we

598
00:26:06,500 --> 00:26:09,500
get out the tile maps that we wanted, and we draw whatever portion

599
00:26:09,500 --> 00:26:11,500
them happen to overlap the screen, right?

600
00:26:12,100 --> 00:26:13,700
And again, it should be immediately.

601
00:26:13,700 --> 00:26:14,100
Obvious.

602
00:26:14,100 --> 00:26:16,400
How you can now, do smooth scrolling if you wanted to, with this

603
00:26:16,400 --> 00:26:17,000
system.

604
00:26:17,200 --> 00:26:19,000
Of course, you could have done it with the other system as well.

605
00:26:19,300 --> 00:26:21,800
But you know, this support smooth scrolling exactly.

606
00:26:21,800 --> 00:26:25,300
Like as far as regular schooling because you can query any region and

607
00:26:25,300 --> 00:26:26,700
get out what it should be.

608
00:26:26,700 --> 00:26:28,900
So if you want to move smoothly along it, you could.

609
00:26:28,900 --> 00:26:29,200
Or if you

610
00:26:29,300 --> 00:26:31,900
Want to just do a fixed position like I'm going to do, you can do that

611
00:26:31,900 --> 00:26:32,300
as well.

612
00:26:32,500 --> 00:26:33,100
Right?

613
00:26:33,700 --> 00:26:34,300
Alright.

614
00:26:34,400 --> 00:26:39,800
So in order to do that, what we now need to do is we need to switch to

615
00:26:39,800 --> 00:26:42,200
using just one tile X and tile.

616
00:26:42,200 --> 00:26:42,700
Why?

617
00:26:43,900 --> 00:26:47,700
So what I'm going to do is I'm going to go ahead and change our world

618
00:26:47,700 --> 00:26:49,300
positions to be that.

619
00:26:49,300 --> 00:26:51,900
Now, I've put an underscore in front of them, so I can see everywhere

620
00:26:51,900 --> 00:26:52,800
they're used.

621
00:26:53,100 --> 00:26:56,900
And that way, I can go look at all the code that's using it and fix

622
00:26:56,900 --> 00:26:57,000
it.

623
00:26:57,000 --> 00:26:59,900
So, for Rican, analyzed canonicalizing, coordinates, we

624
00:27:00,000 --> 00:27:03,400
No longer have to worry about the tile Map X and Y.

625
00:27:03,400 --> 00:27:08,400
And we also don't have to worry too much about the world context or

626
00:27:08,400 --> 00:27:11,300
the world can't lie, what we really need.

627
00:27:11,400 --> 00:27:13,600
Well, we'll need a different value that we'll talk about in a second,

628
00:27:13,600 --> 00:27:15,900
but we so we can get rid of those for now.

629
00:27:16,100 --> 00:27:18,400
So what we have here is we're just going to for Rican, alkalizing

630
00:27:18,400 --> 00:27:18,800
coordinates.

631
00:27:18,800 --> 00:27:21,000
We're just going to pass those in.

632
00:27:21,000 --> 00:27:25,500
And when we re canonicalize the coordinates, we now just have the tile

633
00:27:26,000 --> 00:27:28,600
value and the relative value, right?

634
00:27:28,800 --> 00:27:29,900
And we still do all the

635
00:27:30,000 --> 00:27:30,900
The same stuff.

636
00:27:30,900 --> 00:27:35,400
But when we get in here, when we do these adjustments, that we were

637
00:27:35,400 --> 00:27:37,600
doing for the tile map, we can just get rid of them.

638
00:27:37,700 --> 00:27:37,900
Right?

639
00:27:37,900 --> 00:27:40,600
We no longer have to worry about what towel mapper in because that's

640
00:27:40,600 --> 00:27:42,200
just baked into the value.

641
00:27:42,500 --> 00:27:43,000
Right?

642
00:27:43,700 --> 00:27:44,800
And furthermore.

643
00:27:44,900 --> 00:27:48,700
This value is actually now, effectively, a un 32.

644
00:27:49,000 --> 00:27:53,100
I'm probably, I don't know if I'm gonna it's a little bit tricky,

645
00:27:53,200 --> 00:27:53,700
right?

646
00:27:58,300 --> 00:28:02,300
Because basically we haven't 32 here and we need to then subtract or

647
00:28:02,300 --> 00:28:04,000
add from this value.

648
00:28:04,100 --> 00:28:06,100
So I don't know if it makes sense to start calling this.

649
00:28:06,100 --> 00:28:07,400
A you in 32 or not.

650
00:28:08,300 --> 00:28:10,100
We're still going to have to deal with the negatives here.

651
00:28:10,100 --> 00:28:11,200
So it doesn't really matter.

652
00:28:11,300 --> 00:28:14,900
So what we could do is say that the center tile of the world is 00 and

653
00:28:14,900 --> 00:28:15,200
things.

654
00:28:15,200 --> 00:28:18,200
Go out to negative 2 billion, positive, 2 billion.

655
00:28:18,400 --> 00:28:21,500
I don't know if there's any real reason to care one way or the other

656
00:28:21,500 --> 00:28:24,500
about that, but I think what I'd rather do is say we never have

657
00:28:24,500 --> 00:28:27,600
negative numbers just to make maybe things a little bit easier.

658
00:28:27,700 --> 00:28:28,200
I'm parts.

659
00:28:28,400 --> 00:28:31,400
So I want to say that that's just a Unit 32, right?

660
00:28:32,000 --> 00:28:37,300
And the UN 32, then can be subtracted or added from by the offset that

661
00:28:37,300 --> 00:28:38,100
we compute.

662
00:28:38,100 --> 00:28:43,300
But we want to basically assert that it never goes - and so basically,

663
00:28:43,300 --> 00:28:47,600
what we want to do is before we do this, we want to assert

664
00:28:48,300 --> 00:28:53,700
essentially, that whatever, whatever whatever we would have been doing

665
00:28:53,700 --> 00:28:54,400
to our number.

666
00:28:54,900 --> 00:28:57,500
It's not going to be any

667
00:28:57,700 --> 00:28:59,300
It's not going to cause it to underflow.

668
00:28:59,300 --> 00:28:59,800
Right?

669
00:29:00,000 --> 00:29:05,500
So basically the assertion here is that the tile, sorry, the tile

670
00:29:05,500 --> 00:29:11,200
position that we have is going to be greater than the offset is, and

671
00:29:11,200 --> 00:29:13,100
it's assigned unsigned comparison.

672
00:29:13,100 --> 00:29:17,900
So basically, like I just want to, how should I do this?

673
00:29:17,900 --> 00:29:19,900
What's the easy way to do is I want to say, like, basically the

674
00:29:19,900 --> 00:29:21,500
absolute value, right?

675
00:29:21,500 --> 00:29:23,900
I want to say that the absolute value of this offset.

676
00:29:24,100 --> 00:29:26,000
So, I'll just going to say absolute.

677
00:29:27,500 --> 00:29:28,300
In 32.

678
00:29:29,500 --> 00:29:34,000
Our sorry, absolute Infinity to 2 Union, 32, something like this where

679
00:29:34,000 --> 00:29:35,800
I can basically say whatever this is.

680
00:29:36,000 --> 00:29:42,700
I want to make sure that in the case where it is - I want to make sure

681
00:29:42,700 --> 00:29:44,600
that this value is always greater than it.

682
00:29:44,900 --> 00:29:51,000
So basically it would be assumed that offset is either greater than 0

683
00:29:51,000 --> 00:29:55,100
in which case we can add it if offsets greater than 0.

684
00:29:55,800 --> 00:29:56,500
Just yeah.

685
00:29:56,500 --> 00:29:58,900
I just I almost just want to do this in debug code.

686
00:30:01,000 --> 00:30:02,200
So, what's our debug code?

687
00:30:02,600 --> 00:30:03,300
We have it here.

688
00:30:04,900 --> 00:30:05,600
Let's see.

689
00:30:05,600 --> 00:30:06,600
It's called handmade slow.

690
00:30:06,600 --> 00:30:07,200
I believe.

691
00:30:07,200 --> 00:30:07,800
Yeah, there we go.

692
00:30:08,400 --> 00:30:10,900
So, if we're in handmade slow, then I'm just going to write this out

693
00:30:10,900 --> 00:30:13,300
explicitly, because it was getting too hard to pack into a search in

694
00:30:13,300 --> 00:30:13,500
there.

695
00:30:13,700 --> 00:30:18,000
So what I want to do is I want to say if the offset is greater than 0,

696
00:30:18,200 --> 00:30:18,800
right?

697
00:30:19,000 --> 00:30:23,300
And then if the offset is less than 0 will do something else or if

698
00:30:23,300 --> 00:30:23,800
it's zero.

699
00:30:24,600 --> 00:30:28,300
What I want to do is say if the offset was less than zero, then I want

700
00:30:28,300 --> 00:30:29,800
to basically assert here.

701
00:30:30,200 --> 00:30:31,200
That the tile.

702
00:30:33,100 --> 00:30:36,400
Is less than the negative offset, right?

703
00:30:36,600 --> 00:30:36,900
I'm sorry.

704
00:30:36,900 --> 00:30:38,300
Greater than the negative offset.

705
00:30:38,900 --> 00:30:42,600
So, basically, if this value well as well, it can be greater than

706
00:30:42,600 --> 00:30:42,800
equal to.

707
00:30:42,800 --> 00:30:45,000
You could move right to the 0th tile if you wanted to.

708
00:30:45,300 --> 00:30:49,500
So basically if this was like 5 and negative off and offset was

709
00:30:49,500 --> 00:30:51,200
negative 6, right.

710
00:30:52,000 --> 00:30:54,900
I really don't want you to ever do that because you'll wrap around and

711
00:30:54,900 --> 00:30:56,900
go back to the other side of the tile map.

712
00:30:57,000 --> 00:30:58,100
Now we could argue.

713
00:30:58,100 --> 00:31:01,700
I mean, I guess the other thing I could do is just allow that I

714
00:31:01,700 --> 00:31:02,400
suppose there's no harm.

715
00:31:02,500 --> 00:31:04,700
Our minute, we could say that our worlds toroidal.

716
00:31:13,000 --> 00:31:15,100
I guess now that I think about it.

717
00:31:15,300 --> 00:31:17,100
Do I really care?

718
00:31:17,100 --> 00:31:17,500
Right?

719
00:31:17,600 --> 00:31:20,100
Maybe I'll just say that the world's toroidal and then we don't care.

720
00:31:20,400 --> 00:31:23,000
If you walk off one of the world you walk it back on the other side.

721
00:31:24,000 --> 00:31:27,100
I mean we're saying you can't get to the end of the world anyway, so I

722
00:31:27,100 --> 00:31:32,100
guess I could just say that that was true so I could just say

723
00:31:33,600 --> 00:31:36,700
World is assumed to be toroidal.

724
00:31:38,700 --> 00:31:41,800
If you step off one end.

725
00:31:41,800 --> 00:31:44,900
You come back on the other.

726
00:31:45,700 --> 00:31:48,200
I guess, let's just say that's true.

727
00:31:48,400 --> 00:31:49,100
And then that's it.

728
00:31:49,100 --> 00:31:52,300
And so what for those of you don't know what I mean, when I say to

729
00:31:52,300 --> 00:31:56,500
Royal basically, there's a concept called topology, a branch of

730
00:31:56,500 --> 00:31:59,900
mathematics and so on, which honestly I'm not an expert in.

731
00:31:59,900 --> 00:32:02,500
So if you want to know more about it, you really got to

732
00:32:02,800 --> 00:32:06,700
Some better sources, but basically, there's the there's the sort of

733
00:32:06,700 --> 00:32:11,500
concepts of how things are connected house, faces are connected.

734
00:32:12,100 --> 00:32:15,100
And so what I was thinking about original originally would be called

735
00:32:15,100 --> 00:32:21,500
disk topology, which is basically to say that essentially my my world

736
00:32:21,600 --> 00:32:25,100
was was sort of they call it homeomorphic.

737
00:32:25,100 --> 00:32:30,700
Usually was basically or isomorphic to to a disk.

738
00:32:30,800 --> 00:32:32,600
So basically what that means is where

739
00:32:32,700 --> 00:32:34,400
Ever, I could go right.

740
00:32:34,400 --> 00:32:38,500
I've got a guy and he's walking around on the surface of this world

741
00:32:38,500 --> 00:32:42,300
that I've created wherever he would walk, right?

742
00:32:42,400 --> 00:32:46,400
The rules are the same as if I was just on some kind of a flat disk,

743
00:32:46,400 --> 00:32:46,900
right?

744
00:32:47,000 --> 00:32:48,500
It is no difference between these two.

745
00:32:48,500 --> 00:32:52,600
I could warp this one into this one and the connectivity is the same.

746
00:32:53,400 --> 00:32:58,500
Another way of thinking about it is if I had a tail, if I had a, if I

747
00:32:58,500 --> 00:32:59,900
had a tail that was pinned.

748
00:33:00,000 --> 00:33:01,500
The center, right?

749
00:33:01,500 --> 00:33:06,100
And I started walking around the tail would loop around the exact same

750
00:33:06,100 --> 00:33:07,100
way on a disk.

751
00:33:07,100 --> 00:33:08,100
As it would on me.

752
00:33:08,400 --> 00:33:10,400
There's no sort of fanciness that you could play.

753
00:33:11,400 --> 00:33:18,200
But toroidal topology means that my world is actually homeomorphic to

754
00:33:18,200 --> 00:33:18,800
a Taurus.

755
00:33:18,900 --> 00:33:22,400
Now, I know that sounds a little weird, but basically if you've ever

756
00:33:22,400 --> 00:33:25,400
seen a tourist before, this is going to be kind of a trick to draw,

757
00:33:25,400 --> 00:33:27,300
but it's basically a donut, right?

758
00:33:27,500 --> 00:33:29,500
It's basically a thing that looks

759
00:33:30,000 --> 00:33:32,000
Kind of like this sort of a thing right?

760
00:33:32,000 --> 00:33:37,400
Where it's got a hole in it and and sort of it's got rings around it.

761
00:33:37,400 --> 00:33:37,900
Right?

762
00:33:38,000 --> 00:33:39,700
Like the sort of thing, you know, I'm saying?

763
00:33:40,400 --> 00:33:43,000
And so you kind of go along the edge, right?

764
00:33:43,600 --> 00:33:45,400
Like a life preserver that sort of thing.

765
00:33:45,600 --> 00:33:46,000
Right?

766
00:33:47,000 --> 00:33:50,600
So if the world is home you over to a tourist, if you think about what

767
00:33:50,600 --> 00:33:54,900
a Taurus looks like, it means that in either axis, you can walk along

768
00:33:54,900 --> 00:33:58,500
and just keep walking, you can just Loop and loop and loop, which

769
00:33:58,500 --> 00:33:59,900
means if I walk off one end.

770
00:34:00,300 --> 00:34:01,900
I walked back onto the other, right?

771
00:34:01,900 --> 00:34:04,200
And if you think about this, this tourist, you could cut it.

772
00:34:04,200 --> 00:34:07,300
You could cut it along the seam and then cut it along.

773
00:34:07,300 --> 00:34:08,000
This seam.

774
00:34:08,000 --> 00:34:12,000
I could I could pick two seams and cut it and unwrap it into my world.

775
00:34:12,400 --> 00:34:13,000
Right?

776
00:34:13,199 --> 00:34:14,500
This right here.

777
00:34:16,800 --> 00:34:19,600
Is this seem right?

778
00:34:19,600 --> 00:34:24,500
And this right here is this seam, and you can see how I could bend

779
00:34:24,500 --> 00:34:28,699
that back into my, my, my Taurus and the rules.

780
00:34:28,699 --> 00:34:30,300
Here are the same as on the tourist.

781
00:34:30,300 --> 00:34:31,800
If I walk along it, right?

782
00:34:31,800 --> 00:34:34,900
And I can walk like this pattern on it.

783
00:34:34,900 --> 00:34:36,400
The same is true on the torus, right?

784
00:34:36,400 --> 00:34:39,699
It just it loops around the torus as it goes around right?

785
00:34:40,100 --> 00:34:44,199
And so when I say toroidal topology, what that means is that I've got

786
00:34:44,199 --> 00:34:45,900
a world that's actually a Taurus.

787
00:34:45,900 --> 00:34:46,500
Now, even

788
00:34:46,699 --> 00:34:51,199
It's not shaped like that in terms of its physical form.

789
00:34:51,600 --> 00:34:56,300
It's behaving as if it were on the surface of a torus knot on the

790
00:34:56,300 --> 00:34:58,600
surface of a plate or a disc, right?

791
00:34:59,800 --> 00:35:02,700
And so, so this is toroidal topology.

792
00:35:02,700 --> 00:35:03,600
That's what that is.

793
00:35:05,200 --> 00:35:10,400
Yeah, if you're into topology and want to read more about it, I don't

794
00:35:10,400 --> 00:35:11,600
know what to recommend.

795
00:35:13,000 --> 00:35:14,600
Maybe everyone has a tail.

796
00:35:17,200 --> 00:35:18,300
Let me see.

797
00:35:18,300 --> 00:35:21,000
Everyone has a tail kouga.

798
00:35:23,100 --> 00:35:24,100
So let's see.

799
00:35:24,400 --> 00:35:26,600
That's what's called, gal was dream.

800
00:35:26,800 --> 00:35:27,800
That's what it's called.

801
00:35:29,100 --> 00:35:33,600
Most books aren't kept topology are very hard to read.

802
00:35:34,500 --> 00:35:36,600
This one is not perfect.

803
00:35:36,600 --> 00:35:40,400
But it would, it would probably be the best one to start with.

804
00:35:40,400 --> 00:35:44,500
I don't know, maybe topologies hard to kind of get into but, but

805
00:35:44,500 --> 00:35:45,800
Galvez dream is

806
00:35:45,900 --> 00:35:49,100
Pretty good, and maybe people on the forums, could recommend something

807
00:35:49,100 --> 00:35:50,100
some other things as well.

808
00:35:50,100 --> 00:35:52,200
But that's something, you know, if you're into apologies.

809
00:35:52,400 --> 00:35:53,700
There's a lot of other things.

810
00:35:54,500 --> 00:35:54,800
Yeah.

811
00:35:55,800 --> 00:35:59,100
To think about anyway, so I'm going to go ahead and say that and that

812
00:35:59,100 --> 00:35:59,800
way we don't even have.

813
00:36:00,000 --> 00:36:02,200
Problem there, we can just go ahead and wrap, we don't have to assert.

814
00:36:02,200 --> 00:36:03,800
If you walk off when you walk on the other.

815
00:36:04,100 --> 00:36:04,900
Everyone's happy.

816
00:36:04,900 --> 00:36:05,700
No real problems.

817
00:36:05,700 --> 00:36:09,000
I think this will do the addition properly with the signed edition,

818
00:36:09,000 --> 00:36:10,700
but we'll have to check to make sure that's true.

819
00:36:11,100 --> 00:36:13,500
Although it shouldn't be too hard to verify that's working.

820
00:36:13,900 --> 00:36:15,500
We then don't have to check that at all.

821
00:36:15,500 --> 00:36:16,500
It's an unsigned integer.

822
00:36:17,200 --> 00:36:18,500
We don't have to care.

823
00:36:18,500 --> 00:36:20,100
Oh, wait, that's the towel relative thing.

824
00:36:20,100 --> 00:36:21,300
So we have to check that at all.

825
00:36:22,700 --> 00:36:25,300
Are we not checking to see whether tile relative is greater than or

826
00:36:25,300 --> 00:36:28,100
equal to 0, and I must have deleted that by accident.

827
00:36:28,200 --> 00:36:31,400
So we'll put that back in and we'll save that.

828
00:36:31,400 --> 00:36:33,100
Alright, so there we go.

829
00:36:34,300 --> 00:36:35,800
We also need.

830
00:36:35,800 --> 00:36:38,500
So that's all we really need to do for that because it's just, that's

831
00:36:38,500 --> 00:36:42,500
a standard adjustment tile X is not a member of world position, right?

832
00:36:42,500 --> 00:36:46,500
So that's that's fine because I just changed what it was meaning

833
00:36:46,900 --> 00:36:47,600
there.

834
00:36:47,600 --> 00:36:48,000
Okay.

835
00:36:48,400 --> 00:36:49,500
So let's move on to here.

836
00:36:49,700 --> 00:36:50,800
It's World Point empty.

837
00:36:50,800 --> 00:36:52,300
I passed the canonical position.

838
00:36:53,100 --> 00:36:55,500
We no longer have to do this.

839
00:36:55,500 --> 00:36:57,500
Get tilemap thing exactly this way.

840
00:36:58,000 --> 00:36:59,600
Really, what we would do here.

841
00:36:59,600 --> 00:37:02,800
So as World Point empty, what we want to do is we're still I guess we

842
00:37:02,800 --> 00:37:09,300
could still call get tile map and we just call tile X and Tau Y and

843
00:37:09,300 --> 00:37:12,300
that will get us back the tile map for that tile location.

844
00:37:13,200 --> 00:37:16,800
And then when we do is tell my point empty, we would pass the tile map

845
00:37:16,900 --> 00:37:17,800
and we pass those.

846
00:37:17,800 --> 00:37:18,000
Okay.

847
00:37:18,000 --> 00:37:21,100
So so if you look at what has to happen here, this is basically going

848
00:37:21,100 --> 00:37:22,400
to be our query into

849
00:37:22,500 --> 00:37:25,100
Ooh, the tile system to get the chunk that we're on, and then we're

850
00:37:25,100 --> 00:37:26,500
going to have to query inside the chunk.

851
00:37:26,500 --> 00:37:30,900
And so, what we want to do is we want to have basically a mapped

852
00:37:30,900 --> 00:37:31,300
result.

853
00:37:31,300 --> 00:37:34,500
So we have these World positions that we're going to use and then

854
00:37:34,500 --> 00:37:37,300
we're going to kind of introduce a lower-level thing.

855
00:37:37,300 --> 00:37:38,000
And this will never.

856
00:37:38,000 --> 00:37:39,200
I think the exposed.

857
00:37:39,500 --> 00:37:43,300
Well, yeah might be basically what we're going to have to do is have

858
00:37:43,300 --> 00:37:46,000
our tile chunk position, right?

859
00:37:47,100 --> 00:37:50,500
Which is actually going to be something that's a little more explicit.

860
00:37:50,700 --> 00:37:52,400
And this would basically be like,

861
00:37:53,300 --> 00:37:55,000
Sort of a tile map.

862
00:37:55,400 --> 00:37:59,200
This this would have our town map X and our tile map Y in it which

863
00:37:59,200 --> 00:38:00,600
are, which are essentially chunk.

864
00:38:00,600 --> 00:38:03,300
So I'm going to maybe start to call them not maps anymore because

865
00:38:03,300 --> 00:38:05,900
tilemap kind of sounds like something that you authored and that's not

866
00:38:05,900 --> 00:38:09,900
the case and then the tile X and the tile why inside that chunk,

867
00:38:09,900 --> 00:38:10,500
right?

868
00:38:10,900 --> 00:38:13,600
So are basically moving that stuff that we have in here into a

869
00:38:13,600 --> 00:38:18,200
transient variable transient struct, which is only used during the

870
00:38:18,200 --> 00:38:18,800
accessing.

871
00:38:19,000 --> 00:38:19,600
Right?

872
00:38:19,600 --> 00:38:22,300
And so what we would do is we'd essentially have a simple function

873
00:38:22,400 --> 00:38:24,800
Ocean that's going to be trivial to implement.

874
00:38:24,800 --> 00:38:29,000
It's just like a shift in an ad and kind of a thing where we do, you

875
00:38:29,000 --> 00:38:33,400
know where we do kind of a get chunk position for a canonical, right?

876
00:38:33,400 --> 00:38:34,300
We get that back.

877
00:38:34,700 --> 00:38:35,800
We have our chunk pose.

878
00:38:36,200 --> 00:38:36,600
Right?

879
00:38:37,400 --> 00:38:41,000
And then we just say we can get the tile map for a chunk pose.

880
00:38:41,700 --> 00:38:43,800
And this will basically a tell chunk.

881
00:38:43,800 --> 00:38:45,600
Now we can get back at I'll chunk.

882
00:38:46,100 --> 00:38:50,200
And then we can also ask for on a particular one.

883
00:38:50,700 --> 00:38:52,200
Whether the chunk pose is

884
00:38:52,500 --> 00:38:53,100
You're not right?

885
00:38:53,100 --> 00:38:56,000
So we can say, for the time after we got back.

886
00:38:56,400 --> 00:38:59,800
Does this tile X and tile y and

887
00:39:00,000 --> 00:39:02,400
This is a, this is inside the tower.

888
00:39:02,400 --> 00:39:02,600
Now.

889
00:39:02,600 --> 00:39:04,300
These are going to be named the same thing.

890
00:39:04,500 --> 00:39:06,600
So this is a real tile X I guess.

891
00:39:07,200 --> 00:39:13,400
And this is kind of we've got, we've got Shunk relative X and chunk

892
00:39:13,400 --> 00:39:14,500
relative, why?

893
00:39:15,200 --> 00:39:16,800
So it's kind of hard with these sorts of things.

894
00:39:16,800 --> 00:39:19,200
But like I said, this is going to be kind of buried, so that's okay.

895
00:39:19,200 --> 00:39:21,700
Nobody in the interface now has to think about those anymore.

896
00:39:21,700 --> 00:39:24,100
So they can kind of think about absolute tile X.

897
00:39:24,100 --> 00:39:24,900
Absolute Taiwan.

898
00:39:24,900 --> 00:39:26,700
We could call these app style except style.

899
00:39:26,700 --> 00:39:26,900
Why.

900
00:39:26,900 --> 00:39:28,900
If we wanted to, in fact, maybe that's

901
00:39:30,000 --> 00:39:33,300
Maybe that's a good thing and then we can have real tile ex Rel tile.

902
00:39:33,300 --> 00:39:33,700
Why.

903
00:39:34,300 --> 00:39:37,700
And then these right here, could be, maybe I might change these to be

904
00:39:37,700 --> 00:39:39,800
calling these offsets as well.

905
00:39:39,800 --> 00:39:42,600
Like offset X offset y, well, to think about that.

906
00:39:47,500 --> 00:39:47,900
Okay.

907
00:39:48,700 --> 00:39:50,700
So again, we're just moving down the stuff that we had here.

908
00:39:50,700 --> 00:39:53,400
We're moving it down into another layer, that kind of will always do

909
00:39:53,400 --> 00:39:53,500
it.

910
00:39:53,500 --> 00:39:54,800
So we don't have to track those.

911
00:39:54,800 --> 00:39:57,200
We're just everyone who actually uses positions will only know about

912
00:39:57,200 --> 00:40:00,600
their absolute tile X and Y and then we'll only compute those relative

913
00:40:00,600 --> 00:40:05,700
ones on the Fly and the computation will set up to be basically free,

914
00:40:05,900 --> 00:40:09,000
so that it just really doesn't cost anything to actually do it.

915
00:40:09,300 --> 00:40:11,000
So, we'll have this get chunk pose.

916
00:40:11,100 --> 00:40:11,400
Right?

917
00:40:11,400 --> 00:40:15,300
And our internal get chunk post here again.

918
00:40:15,300 --> 00:40:16,900
This will probably this one actually death.

919
00:40:17,100 --> 00:40:19,500
I think we'd want it, make it in line because it'll be so easy.

920
00:40:19,900 --> 00:40:21,500
This will be a touch of position.

921
00:40:21,800 --> 00:40:22,000
Sorry.

922
00:40:22,000 --> 00:40:25,900
This will be a world position that it passes in, right, that world

923
00:40:25,900 --> 00:40:26,500
position.

924
00:40:27,000 --> 00:40:27,400
Choose me.

925
00:40:29,000 --> 00:40:32,600
Basically, we're going to use the ABS tile X and the ABS tile why?

926
00:40:33,100 --> 00:40:36,000
And in fact, you know what, we could just do, we don't really need the

927
00:40:36,000 --> 00:40:36,900
Rolex in The Relic.

928
00:40:36,900 --> 00:40:41,200
Well here, so this could just take the X and the Y so that even people

929
00:40:41,200 --> 00:40:44,300
who don't aren't using anything particular can look it up.

930
00:40:44,400 --> 00:40:46,800
Generically, we could basically say, okay.

931
00:40:47,000 --> 00:40:49,500
Get the the trunk position for these two things, right?

932
00:40:49,700 --> 00:40:52,400
So there's AB cell extract, those tab style.

933
00:40:52,400 --> 00:40:53,500
Why, right?

934
00:40:54,100 --> 00:40:58,100
So basically these to come in and all we need to do now is make a tile

935
00:40:58,100 --> 00:41:02,500
chunk position and that tile chunk position is going to have which

936
00:41:02,500 --> 00:41:06,600
tile chunk X and Y, you're in and, and where you are relative to that

937
00:41:06,600 --> 00:41:11,000
one right rail tile ex Rel tile, why, right?

938
00:41:11,200 --> 00:41:15,100
And then I said before, basically that what we want to do is we want

939
00:41:15,100 --> 00:41:16,700
to basically Define our tile map.

940
00:41:16,700 --> 00:41:16,800
I should

941
00:41:17,000 --> 00:41:19,600
We passed the world here so that we can have worlds or dynamic size as

942
00:41:19,600 --> 00:41:22,700
we may want to fix this so that the math can be computed at compile

943
00:41:22,700 --> 00:41:23,000
time.

944
00:41:23,000 --> 00:41:26,600
But for now, we'll do it in a dynamically.

945
00:41:29,900 --> 00:41:30,100
Right.

946
00:41:30,100 --> 00:41:31,200
What I want to say here.

947
00:41:32,500 --> 00:41:33,000
Is this enough?

948
00:41:33,000 --> 00:41:41,100
The tile chunk X is going to use the app style, X shifted down by

949
00:41:41,100 --> 00:41:42,400
however, many the Fret.

950
00:41:42,400 --> 00:41:45,200
However, what that, whatever the fractional bit count is, right?

951
00:41:45,400 --> 00:41:50,000
So there's going to be essentially a chunk shift value, right?

952
00:41:50,000 --> 00:41:52,300
So, ABS Telex gets shifted down by that Apatow.

953
00:41:52,300 --> 00:41:53,200
Why also?

954
00:41:53,900 --> 00:41:55,800
And so, all that's doing right.

955
00:41:55,800 --> 00:41:58,600
Remember I said, I want to store it, something like this.

956
00:41:58,600 --> 00:41:59,800
So there's going to be fractional.

957
00:42:00,000 --> 00:42:02,300
This is a 32-bit value here, right?

958
00:42:02,400 --> 00:42:04,600
There's gonna be fractional B, maybe there's eight of them may be so

959
00:42:04,600 --> 00:42:05,600
two days by 2 is trunks.

960
00:42:05,600 --> 00:42:05,900
I don't know.

961
00:42:05,900 --> 00:42:07,900
We'll start with that and 24 bits here.

962
00:42:08,000 --> 00:42:09,800
All I want to do for the chunk index.

963
00:42:09,900 --> 00:42:12,000
The chunk index is just I'm shifting that down.

964
00:42:12,000 --> 00:42:12,900
So I'm getting rid of this.

965
00:42:12,900 --> 00:42:15,200
I'm shifting down the 24, so we just have the 24.

966
00:42:15,200 --> 00:42:19,100
So we're basically looking at our new value is going to be 24, bits

967
00:42:19,100 --> 00:42:24,100
and 80's at the top and 24 bits of actual value here, right?

968
00:42:24,300 --> 00:42:25,700
So we do those two shifts down.

969
00:42:26,500 --> 00:42:29,600
We might do something different here in the long run and just compute

970
00:42:29,600 --> 00:42:31,800
like a hash value directly for how to look up the town map.

971
00:42:31,800 --> 00:42:33,800
But that's going to be down when we actually start implementing the

972
00:42:33,800 --> 00:42:34,200
engine.

973
00:42:34,400 --> 00:42:36,300
All right, so we got real tile X and real tile.

974
00:42:36,300 --> 00:42:39,100
Why those are now going to be the exact same thing?

975
00:42:39,100 --> 00:42:39,700
In Reverse.

976
00:42:39,700 --> 00:42:43,100
We're going to end with a chunk mask, right?

977
00:42:44,900 --> 00:42:45,600
Like this.

978
00:42:47,300 --> 00:42:50,800
And the chunk mask is, just the thing that will that will mask it out.

979
00:42:50,800 --> 00:42:55,000
Now, if the chunk, if the shift down is 8, then if you think about it,

980
00:42:55,000 --> 00:42:58,300
if we actually wanted to, we could probably do something that compute.

981
00:42:58,300 --> 00:42:59,800
Well, let's just, we're just gonna Store The Mask.

982
00:43:00,000 --> 00:43:01,900
There's no point in making getting things fancier.

983
00:43:02,200 --> 00:43:02,700
Alright.

984
00:43:02,700 --> 00:43:06,700
So basically the chunk mask is going to be all ones down here and all

985
00:43:06,700 --> 00:43:07,900
zeros up here.

986
00:43:07,900 --> 00:43:10,400
So that we and with it, we get rid of that 24 part.

987
00:43:10,400 --> 00:43:11,400
We get rid of it's gone.

988
00:43:11,500 --> 00:43:14,100
So we're just left with an 8-bit value.

989
00:43:14,500 --> 00:43:16,700
You know, that would say what the relative Telex is.

990
00:43:17,200 --> 00:43:18,000
And that's it.

991
00:43:18,000 --> 00:43:19,900
That's the entirety of what we need to do there.

992
00:43:20,300 --> 00:43:23,600
So in the world, we now have these two values, right?

993
00:43:23,800 --> 00:43:29,200
We have a chunk shift and we have a chunk mask and those two I'm going

994
00:43:29,200 --> 00:43:34,600
to set them at the moment to basically be to basically be the two

995
00:43:34,600 --> 00:43:36,300
values that I that I said before.

996
00:43:38,000 --> 00:43:42,300
I'm going to say that we have a chunk shift and a chunk mask.

997
00:43:42,300 --> 00:43:45,600
The chunk Mast is going to be, I'm going to assume that it's 8 Bits

998
00:43:45,600 --> 00:43:46,200
for now.

999
00:43:46,500 --> 00:43:50,600
So we shift down my 8 and we mask out by f f so that we basically are

1000
00:43:50,600 --> 00:43:53,900
using 24.2., No note.

1001
00:43:54,000 --> 00:43:54,600
Casey.

1002
00:43:54,600 --> 00:44:00,300
This is set to using 256 by 256 tile chunks, right?

1003
00:44:00,500 --> 00:44:01,100
So, there we go.

1004
00:44:02,000 --> 00:44:03,100
So that's that.

1005
00:44:03,600 --> 00:44:04,100
Excuse me.

1006
00:44:06,000 --> 00:44:08,700
And then we have to go ahead and say in actually use this.

1007
00:44:08,700 --> 00:44:11,100
We do the get trunk forward, get tile map.

1008
00:44:11,500 --> 00:44:15,100
That will have to now take those and is tilemap point empty.

1009
00:44:15,500 --> 00:44:20,900
I think for the most part, this stuff just works.

1010
00:44:20,900 --> 00:44:25,200
I think these will just work the same as they used to count X and

1011
00:44:25,200 --> 00:44:25,500
count.

1012
00:44:25,500 --> 00:44:29,900
Why will now be set to 256 by 256?

1013
00:44:30,100 --> 00:44:31,000
And furthermore.

1014
00:44:31,300 --> 00:44:34,000
They will basically be only, they'll be only one.

1015
00:44:34,000 --> 00:44:34,700
So they'll be a word.

1016
00:44:34,900 --> 00:44:40,000
Old basically, chunk dim will call it.

1017
00:44:40,000 --> 00:44:41,700
Let's say we're a chunk.

1018
00:44:41,700 --> 00:44:45,400
Tim will basically be 256 across.

1019
00:44:45,600 --> 00:44:47,900
So now we'll just switch to using chunk.

1020
00:44:47,900 --> 00:44:52,800
Tim instead of count.txt come by so chunk them, jump down that and off

1021
00:44:52,800 --> 00:44:53,100
we go.

1022
00:44:53,100 --> 00:44:54,900
Wow, only 15 minutes left in the Stream.

1023
00:44:55,000 --> 00:44:56,300
We are not going to finish this today.

1024
00:44:56,300 --> 00:44:58,300
Unfortunately, that's unfortunate.

1025
00:44:58,900 --> 00:44:59,600
Good stretch.

1026
00:45:01,100 --> 00:45:02,700
Haven't got the neck worked out today yet.

1027
00:45:03,300 --> 00:45:03,900
All right.

1028
00:45:06,100 --> 00:45:07,700
Chunk Tim is not.

1029
00:45:07,700 --> 00:45:08,400
That's right.

1030
00:45:08,400 --> 00:45:09,500
It's true chunk.

1031
00:45:09,500 --> 00:45:10,100
Damn.

1032
00:45:10,100 --> 00:45:10,600
There we go.

1033
00:45:10,600 --> 00:45:14,000
We got all those and let's see.

1034
00:45:14,000 --> 00:45:16,700
So test ilex test tile.

1035
00:45:16,700 --> 00:45:21,700
Why we could those are never allowed to be negative.

1036
00:45:21,700 --> 00:45:26,700
So we could just make them always be positive, which I think is

1037
00:45:26,700 --> 00:45:29,200
probably what we want to do in here as well.

1038
00:45:29,200 --> 00:45:31,800
So we'll just say that these always have to be there.

1039
00:45:31,800 --> 00:45:33,200
We don't have to check against that.

1040
00:45:33,200 --> 00:45:35,600
In fact, these are

1041
00:45:36,100 --> 00:45:40,000
To do lookups into the chunk map and style all tiles are valid.

1042
00:45:40,000 --> 00:45:41,600
So we don't even need this check anymore.

1043
00:45:42,200 --> 00:45:47,200
We can just say that all of these are unchecked basically because

1044
00:45:47,200 --> 00:45:49,700
there really isn't any way to do them.

1045
00:45:49,700 --> 00:45:54,900
Otherwise, so basically, yeah, basically all we need to do is check to

1046
00:45:54,900 --> 00:45:56,500
see if the tile map is valid at the town.

1047
00:45:56,500 --> 00:45:57,500
Map is valid.

1048
00:45:57,700 --> 00:46:00,200
Basically everything should work from there on.

1049
00:46:00,200 --> 00:46:03,600
It's only assertions because there's never going to be a way to look

1050
00:46:03,600 --> 00:46:04,300
up something else.

1051
00:46:04,900 --> 00:46:05,900
So wait, where's my empty?

1052
00:46:06,000 --> 00:46:07,200
Betel nut values that.

1053
00:46:07,200 --> 00:46:10,800
Okay, so get Tau value and checked that's going to pass the tile map

1054
00:46:10,800 --> 00:46:14,600
tile test, textile test why I like that and that will basically do a

1055
00:46:14,600 --> 00:46:15,500
check here.

1056
00:46:15,900 --> 00:46:21,000
These are all un so they don't have to check against zero, but they do

1057
00:46:21,000 --> 00:46:23,400
have to check these.

1058
00:46:23,400 --> 00:46:26,100
Let's go ahead and put leave those assertions in there to make sure

1059
00:46:26,100 --> 00:46:29,300
that we're never outside the chunk Tim, right?

1060
00:46:29,300 --> 00:46:31,600
So they have to be below that.

1061
00:46:31,800 --> 00:46:35,900
And then we will just go ahead and and and dupes.

1062
00:46:36,100 --> 00:46:37,600
Type countdown.

1063
00:46:38,100 --> 00:46:38,800
Not right?

1064
00:46:39,100 --> 00:46:39,400
Tim.

1065
00:46:39,800 --> 00:46:40,500
Come on Tim.

1066
00:46:41,300 --> 00:46:44,500
And that is that I think, right.

1067
00:46:44,500 --> 00:46:45,400
Let's take a look here.

1068
00:46:50,400 --> 00:46:52,400
Tell really like these should be ABS.

1069
00:46:52,400 --> 00:46:59,500
Tie Labs tile and Chuck position for function needs to take the world.

1070
00:46:59,500 --> 00:47:03,200
Certainly get tile map tile, chunk.

1071
00:47:03,500 --> 00:47:07,900
Of course, we now have tile chunk, which is exactly the same as our

1072
00:47:07,900 --> 00:47:13,800
tiles from before, and then we still have our town Maps array, and

1073
00:47:13,800 --> 00:47:16,200
then we need to do our sparseness that to do is still valid.

1074
00:47:16,200 --> 00:47:16,700
We get rid of these.

1075
00:47:16,800 --> 00:47:19,600
Is got these, here we go.

1076
00:47:21,100 --> 00:47:22,900
These are going to, this is going to go away.

1077
00:47:22,900 --> 00:47:26,900
In fact, it already could, I think this is going to be something that

1078
00:47:26,900 --> 00:47:29,000
we can just just put in here.

1079
00:47:29,000 --> 00:47:31,200
So lower left X.

1080
00:47:31,900 --> 00:47:34,900
That could just be here.

1081
00:47:39,600 --> 00:47:44,400
Okay, and where are we at?

1082
00:47:45,000 --> 00:47:48,400
Tile chunk and this is really good tile chunk now.

1083
00:47:49,500 --> 00:47:55,000
So these are actually map is really chunk and all of these places.

1084
00:48:00,000 --> 00:48:12,400
Yeah, Mariah, and so these for now we're also basically saying that

1085
00:48:12,400 --> 00:48:17,500
these lookups yeah, this is kind of a meaningless check as well.

1086
00:48:18,200 --> 00:48:20,700
But we'll kind of get what one thing at a time.

1087
00:48:20,700 --> 00:48:25,500
We've got to actually sort of get things into roughly workable shape.

1088
00:48:25,500 --> 00:48:27,800
Before we talk about how we're actually cause right now, I haven't

1089
00:48:27,800 --> 00:48:29,800
talked about how we're actually do the sparse look up.

1090
00:48:30,500 --> 00:48:32,300
And in some sense, we don't even want to do this for us.

1091
00:48:32,300 --> 00:48:33,000
Look up yet.

1092
00:48:33,100 --> 00:48:34,000
That's an engine thing.

1093
00:48:34,000 --> 00:48:37,900
So we want to do a speck at all to work properly and then move it off

1094
00:48:37,900 --> 00:48:40,200
into a file that will basically say when we start doing the engine.

1095
00:48:40,200 --> 00:48:41,400
This is one thing we have to do.

1096
00:48:41,400 --> 00:48:41,700
Right?

1097
00:48:41,700 --> 00:48:44,600
But we don't need to worry about are about that yet because we can

1098
00:48:44,600 --> 00:48:47,800
just do a dense look up for our testing purposes.

1099
00:48:48,900 --> 00:48:50,000
And not have to worry about it.

1100
00:48:50,500 --> 00:48:50,900
Okay.

1101
00:48:51,400 --> 00:48:52,800
So tile chunk.

1102
00:48:53,600 --> 00:48:54,300
There we go.

1103
00:48:54,600 --> 00:48:56,200
Tile chunk value.

1104
00:48:59,700 --> 00:49:01,100
And let's see.

1105
00:49:01,400 --> 00:49:02,600
Yeah, there we go.

1106
00:49:03,300 --> 00:49:05,300
So those chunks same here.

1107
00:49:05,300 --> 00:49:06,700
Let's just do map to chunk.

1108
00:49:10,200 --> 00:49:10,700
There we go.

1109
00:49:11,000 --> 00:49:12,300
And we don't really want that.

1110
00:49:12,300 --> 00:49:14,200
It shouldn't be, is Taichung Point empty.

1111
00:49:14,300 --> 00:49:15,400
It's just is tile.

1112
00:49:15,400 --> 00:49:16,800
Empty, right?

1113
00:49:18,800 --> 00:49:19,400
How did we do?

1114
00:49:20,100 --> 00:49:21,200
Did we, what do we do?

1115
00:49:21,200 --> 00:49:23,400
We call that from is World Point empty.

1116
00:49:23,500 --> 00:49:25,800
So this is just is tile empty and I guess this one is.

1117
00:49:26,000 --> 00:49:26,200
Yeah.

1118
00:49:26,200 --> 00:49:27,300
It's tile, chunk Point empty.

1119
00:49:27,300 --> 00:49:28,500
I guess that's actually true.

1120
00:49:29,000 --> 00:49:30,800
So is tile trunk tile.

1121
00:49:30,800 --> 00:49:34,700
Empty is probably the correct thing because it's not testing a point

1122
00:49:35,200 --> 00:49:35,500
anymore.

1123
00:49:35,500 --> 00:49:39,100
It's just testing a tile to see if it's empty.

1124
00:49:39,100 --> 00:49:39,900
It doesn't even get

1125
00:49:40,100 --> 00:49:40,800
Information.

1126
00:49:41,800 --> 00:49:46,900
All right, get jump is good for can pose ABS tile X.

1127
00:49:47,400 --> 00:49:49,600
Can pose ABS tile.

1128
00:49:49,600 --> 00:49:50,100
Why?

1129
00:49:50,100 --> 00:49:53,300
There we go, and let's see.

1130
00:49:53,300 --> 00:49:58,300
The chunk pose tile X of Tau y, or is it?

1131
00:49:58,300 --> 00:49:58,800
What is it called?

1132
00:49:58,800 --> 00:50:01,500
It's like tile relative ex Rel.

1133
00:50:01,500 --> 00:50:02,100
Tilak's.

1134
00:50:02,600 --> 00:50:04,300
Yeah, you have a bit of a naming problem.

1135
00:50:04,300 --> 00:50:06,800
I we'd have to think of your nice think a better names for a couple of

1136
00:50:06,800 --> 00:50:09,800
these things because there's like, which relative or Utah.

1137
00:50:10,000 --> 00:50:12,600
Talking about relative to what and you don't want things to get too

1138
00:50:12,600 --> 00:50:13,300
verbose.

1139
00:50:13,300 --> 00:50:17,000
And yeah, it's always a bit of a struggle to name things properly.

1140
00:50:21,800 --> 00:50:26,600
Alright, so now we have a problem, which is that we have to actually

1141
00:50:26,600 --> 00:50:31,500
do something, which, you know, which actually has one of these.

1142
00:50:31,900 --> 00:50:34,900
We're basically saying it's 256 by 256.

1143
00:50:35,000 --> 00:50:37,400
So that makes it a little bit harder on us, of course, what we could

1144
00:50:37,400 --> 00:50:41,500
do and is what I'm going to propose, we do is just weld these together

1145
00:50:41,500 --> 00:50:44,100
for now and just have one that we can store.

1146
00:50:44,100 --> 00:50:45,600
That's a 256 by 256.

1147
00:50:45,600 --> 00:50:45,900
Ur.

1148
00:50:46,600 --> 00:50:47,700
So here we go.

1149
00:50:47,800 --> 00:50:49,400
I'm going to just go ahead and do that.

1150
00:50:49,800 --> 00:50:50,800
So this

1151
00:50:52,500 --> 00:50:53,100
oh boy.

1152
00:50:53,300 --> 00:50:53,900
Oh boy.

1153
00:50:54,100 --> 00:50:54,700
I don't know.

1154
00:50:54,800 --> 00:50:56,200
This is a bad idea.

1155
00:50:56,300 --> 00:50:57,800
I'm sure this is a bad idea.

1156
00:51:00,000 --> 00:51:03,200
Probably shouldn't shouldn't do this.

1157
00:51:08,400 --> 00:51:09,600
I really want to though.

1158
00:51:10,200 --> 00:51:11,400
All right, let's take a look.

1159
00:51:11,400 --> 00:51:12,700
Let's see what happens.

1160
00:51:12,700 --> 00:51:13,600
If I do it.

1161
00:51:13,900 --> 00:51:14,800
You ready for this?

1162
00:51:14,900 --> 00:51:20,000
This is just stupid and I apologize ahead of time for what's about to

1163
00:51:20,000 --> 00:51:20,400
happen.

1164
00:51:20,400 --> 00:51:22,300
It probably won't work, but I'm going to try it.

1165
00:51:22,300 --> 00:51:24,100
Anyway, here we go.

1166
00:51:24,300 --> 00:51:29,200
Record keyboard macro comma, space space.

1167
00:51:30,200 --> 00:51:31,300
Alt w.

1168
00:51:32,600 --> 00:51:35,700
Control space End of Line.

1169
00:51:35,700 --> 00:51:36,700
Back up.

1170
00:51:37,300 --> 00:51:40,200
Delete, go back down to the next one.

1171
00:51:40,700 --> 00:51:41,700
Come here.

1172
00:51:41,900 --> 00:51:42,900
Paste it.

1173
00:51:43,100 --> 00:51:46,100
Down to the previous row, previous there.

1174
00:51:46,100 --> 00:51:48,200
There we go and recording doot.

1175
00:51:48,200 --> 00:51:50,300
Doot, doot, doot do do doot.

1176
00:51:53,300 --> 00:51:55,500
Do 222-2222.

1177
00:51:55,500 --> 00:51:58,600
There we go, emacs keyboard macros, ladies and gentlemen, to the

1178
00:51:58,600 --> 00:51:59,200
rescue.

1179
00:51:59,300 --> 00:52:02,400
We have now welded ourselves into a single tile.

1180
00:52:02,600 --> 00:52:06,400
It is not to be 6 by 256, but see will explore fill in zeros there for

1181
00:52:06,400 --> 00:52:07,300
the rest of them for us.

1182
00:52:07,900 --> 00:52:13,500
So we just have a thing called tiles now, which is 256 by 256 least, I

1183
00:52:13,500 --> 00:52:15,000
think see will fill in the rest of them for us.

1184
00:52:15,000 --> 00:52:16,200
Will it or will it complain?

1185
00:52:16,200 --> 00:52:17,000
It didn't complain.

1186
00:52:17,800 --> 00:52:22,900
So basically, we now have our world and the world is essentially just

1187
00:52:23,100 --> 00:52:25,600
He has one tile set in it.

1188
00:52:25,600 --> 00:52:29,100
That's 56 at the moment and we're going to have to just start with

1189
00:52:29,100 --> 00:52:31,100
that and we'll have to fill it in a little.

1190
00:52:31,100 --> 00:52:38,000
We can we can make it bigger later anyway, so then we have tile chunks

1191
00:52:38,800 --> 00:52:44,600
is going to equal our tile chunk here, which is this guy tile chunk.

1192
00:52:45,000 --> 00:52:45,800
There we go.

1193
00:52:46,300 --> 00:52:48,800
And so yeah.

1194
00:52:49,100 --> 00:52:52,900
Yeah, you get the idea and so

1195
00:52:53,000 --> 00:52:56,400
Do tile chunk count, X and Y.

1196
00:52:56,400 --> 00:52:57,900
We only have one now.

1197
00:52:58,500 --> 00:52:59,400
So there we go.

1198
00:53:02,200 --> 00:53:03,700
World tile chunks.

1199
00:53:06,600 --> 00:53:10,200
What is the problem of cannot convert between?

1200
00:53:11,200 --> 00:53:13,900
Oh, yeah, you're right.

1201
00:53:13,900 --> 00:53:16,200
That's, that's not what I meant to do at all, is it?

1202
00:53:16,600 --> 00:53:17,700
That's a bad idea.

1203
00:53:18,600 --> 00:53:24,600
So, basically tile Chunk, we can actually say this is a tile.

1204
00:53:24,600 --> 00:53:25,500
Well, no, we can't really.

1205
00:53:25,500 --> 00:53:27,900
So we'll say tile.

1206
00:53:28,100 --> 00:53:30,500
This is, this is our actual tiles, temp tiles.

1207
00:53:30,800 --> 00:53:33,100
Essentially, so we'll just say here.

1208
00:53:33,600 --> 00:53:37,300
We have to define a fake tile chunk tile chunk.

1209
00:53:37,600 --> 00:53:41,200
We're going to point that at this and tile chunk tiles equals our temp

1210
00:53:41,200 --> 00:53:44,100
tiles and that should be better.

1211
00:53:45,400 --> 00:53:46,800
What is what are you complaining about?

1212
00:53:46,800 --> 00:53:47,300
Right?

1213
00:53:47,400 --> 00:53:49,700
You at 30s are going to cast that because it's a two-dimensional

1214
00:53:49,700 --> 00:53:55,300
array, which doesn't like alright, so we got that out of the way

1215
00:53:55,700 --> 00:53:58,600
already Tom a pecs Tom at the Y.

1216
00:53:59,200 --> 00:53:59,900
So this

1217
00:54:00,000 --> 00:54:01,800
Now they're just on tile 33.

1218
00:54:01,800 --> 00:54:03,300
They don't need to know that anymore.

1219
00:54:03,600 --> 00:54:05,000
So we basically just have that.

1220
00:54:06,200 --> 00:54:11,200
We've got the tile map that we're on is just going to be.

1221
00:54:12,000 --> 00:54:14,800
Yeah, to get the tile map for the particular player.

1222
00:54:14,800 --> 00:54:19,700
So we can do that the way we're doing here and we're going to, where

1223
00:54:19,700 --> 00:54:21,600
do we actually use that tile map, though.

1224
00:54:22,400 --> 00:54:24,400
We don't use it till till down there.

1225
00:54:25,200 --> 00:54:30,100
So really let's go ahead and make this super piggy for now.

1226
00:54:30,200 --> 00:54:31,800
Maybe, I don't know if I should put the pig hat on.

1227
00:54:31,800 --> 00:54:34,900
It's possible that the pig at should go on for this, but let's take a

1228
00:54:34,900 --> 00:54:35,200
look.

1229
00:54:35,200 --> 00:54:35,900
So, really the only thing

1230
00:54:36,000 --> 00:54:38,900
I have to do now is update our drawing code, right?

1231
00:54:39,300 --> 00:54:40,600
Because I drawing code is wrong.

1232
00:54:41,100 --> 00:54:44,400
And so our drawing code has to be able to draw a tile map.

1233
00:54:44,400 --> 00:54:48,400
So what I could do is just literally do get tile function.

1234
00:54:48,400 --> 00:54:52,900
If I'm going to put the the hats going on because this is super piggy

1235
00:54:53,000 --> 00:54:54,100
right now, what's happening?

1236
00:54:55,500 --> 00:54:58,300
This is going to be super inefficient, but it's probably the right way

1237
00:54:58,300 --> 00:55:01,100
to go, just to test the things are working as we go forwards.

1238
00:55:01,200 --> 00:55:05,300
So I'm going to make a function here like is World Point empty, right?

1239
00:55:05,500 --> 00:55:05,900
I'm going to

1240
00:55:06,000 --> 00:55:09,400
Actually make a thing that just gets the tile value, right?

1241
00:55:09,900 --> 00:55:11,200
And so I'm going to do something.

1242
00:55:11,200 --> 00:55:12,200
That's essentially.

1243
00:55:12,400 --> 00:55:13,300
I'm going to change.

1244
00:55:13,300 --> 00:55:14,800
This is, I guess what I'm saying.

1245
00:55:15,000 --> 00:55:18,000
I'm going to change this to something, that's like you and three to

1246
00:55:18,400 --> 00:55:21,500
get tile value right from a can post.

1247
00:55:21,500 --> 00:55:23,000
It'll do this, do this.

1248
00:55:23,000 --> 00:55:29,900
And then instead of is child tongue is tile, chunk tile empty this guy

1249
00:55:29,900 --> 00:55:30,600
right here.

1250
00:55:31,100 --> 00:55:31,900
Instead of that.

1251
00:55:31,900 --> 00:55:34,800
I'm going to change this function around to basically be get tile

1252
00:55:34,800 --> 00:55:35,700
value, right?

1253
00:55:35,700 --> 00:55:35,900
It's

1254
00:55:36,100 --> 00:55:41,000
To be this it's going to be debt tile value and it's the the checked

1255
00:55:41,000 --> 00:55:41,500
version.

1256
00:55:41,700 --> 00:55:41,900
Right?

1257
00:55:41,900 --> 00:55:43,700
And so instead of having the empty here.

1258
00:55:43,800 --> 00:55:45,300
We're going to move the empty down.

1259
00:55:46,100 --> 00:55:50,200
We're going to say, okay, we've got the tile chunk value will assume

1260
00:55:50,200 --> 00:55:51,400
the top tank value is 0.

1261
00:55:51,400 --> 00:55:53,500
If we couldn't find anything there.

1262
00:55:53,800 --> 00:55:56,600
We will return that the actual value.

1263
00:55:56,800 --> 00:55:59,600
And then, we'll make this guy Israel Point empty.

1264
00:55:59,700 --> 00:56:02,500
He's actually going to do that empty check.

1265
00:56:02,500 --> 00:56:05,900
So what he'll do is so basically say that this is

1266
00:56:06,000 --> 00:56:07,600
Is the value their right?

1267
00:56:07,600 --> 00:56:08,600
Empty equals that.

1268
00:56:08,900 --> 00:56:17,600
And so he'll say tile chunk value equals get tile tile, chunk value.

1269
00:56:17,700 --> 00:56:18,200
Here we go.

1270
00:56:20,400 --> 00:56:24,800
Well until that so he'll pass those kill, get the Top Value.

1271
00:56:24,800 --> 00:56:27,900
He'll do the check to it's empty and that way, I can now have a thing,

1272
00:56:28,200 --> 00:56:32,500
but does get tell value with a Campos and that Campos will then pass

1273
00:56:32,500 --> 00:56:38,000
it directly back to the user right tile chunk value and and similarly.

1274
00:56:38,000 --> 00:56:39,600
I guess we can just reuse this now.

1275
00:56:39,800 --> 00:56:44,000
So basically this this can just be called in here directly.

1276
00:56:44,000 --> 00:56:47,000
So I don't have to have two of those so we can just go ahead and

1277
00:56:47,000 --> 00:56:48,400
collapse that down, right?

1278
00:56:48,400 --> 00:56:48,700
Like that.

1279
00:56:48,900 --> 00:56:48,900
At.

1280
00:56:48,900 --> 00:56:53,500
So, what we can do now is we can just say, all right.

1281
00:56:53,500 --> 00:56:56,400
Well, we're we want to view on the screen.

1282
00:56:56,400 --> 00:56:58,800
We basically want to view.

1283
00:56:58,800 --> 00:56:59,900
In fact, we could even say

1284
00:57:00,000 --> 00:57:04,400
Be one of you wherever the player is at is at the center or something

1285
00:57:04,400 --> 00:57:04,900
like this.

1286
00:57:06,200 --> 00:57:09,800
Yeah, I don't know exactly how we want to save that.

1287
00:57:10,300 --> 00:57:15,900
But basically if I just draw the, the 9 by 17, what I could do is just

1288
00:57:15,900 --> 00:57:21,400
say get tile value and when I call get Tau value, I just pass it.

1289
00:57:21,600 --> 00:57:24,600
The row in the column for the absolute ones and I don't have to pass

1290
00:57:25,000 --> 00:57:26,400
tilemap at all anymore.

1291
00:57:26,600 --> 00:57:28,800
And that would give me exactly the value.

1292
00:57:28,800 --> 00:57:29,800
I don't, we don't have

1293
00:57:30,000 --> 00:57:31,600
Yet where in the world were looking at?

1294
00:57:31,600 --> 00:57:34,800
And so that's the thing we'll have to do tomorrow, but get tile value.

1295
00:57:36,200 --> 00:57:38,000
What does get Tau value?

1296
00:57:38,400 --> 00:57:44,100
Take get tell value, takes a can pose.

1297
00:57:44,200 --> 00:57:46,800
So what I'd like to do here is make it so it doesn't actually need a

1298
00:57:46,800 --> 00:57:47,900
can pose as well.

1299
00:57:47,900 --> 00:57:52,900
I've liked this guy to just take a nap style X AB style.

1300
00:57:52,900 --> 00:57:53,300
Why?

1301
00:57:53,300 --> 00:57:53,800
For now?

1302
00:57:53,800 --> 00:57:56,100
Of course, we might want one that actually takes Campos as well.

1303
00:57:56,500 --> 00:57:59,600
AB style X can put those abs tile.

1304
00:57:59,600 --> 00:57:59,800
Why?

1305
00:58:00,100 --> 00:58:03,400
And we may want to yeah, we met in want to change some of those things

1306
00:58:03,400 --> 00:58:03,900
and so on.

1307
00:58:03,900 --> 00:58:06,800
But for now, there we go.

1308
00:58:06,800 --> 00:58:07,700
Up Q&A.

1309
00:58:07,900 --> 00:58:08,300
Yeah.

1310
00:58:08,400 --> 00:58:10,400
Not enough time in the day sometimes people.

1311
00:58:10,600 --> 00:58:11,000
All right.

1312
00:58:11,000 --> 00:58:14,200
Anyway, what we're checking with here is these and that's fine.

1313
00:58:15,600 --> 00:58:23,100
We've got a few more things to do signed unsigned smash as well.

1314
00:58:23,600 --> 00:58:27,000
There we go, lower left X lower left.

1315
00:58:27,000 --> 00:58:27,400
Why?

1316
00:58:27,400 --> 00:58:28,000
Yes, they are.

1317
00:58:28,000 --> 00:58:28,900
Not a member of the world.

1318
00:58:28,900 --> 00:58:29,700
That is true.

1319
00:58:30,300 --> 00:58:33,400
They are now just members of this routine because they don't actually

1320
00:58:33,400 --> 00:58:37,600
have any meaning anymore in the actual larger sense of the of the

1321
00:58:37,600 --> 00:58:38,200
world.

1322
00:58:38,900 --> 00:58:44,200
So there we go and this stuff all now needs to get redone tomorrow to

1323
00:58:44,200 --> 00:58:45,700
to allow us to do other supplement.

1324
00:58:45,700 --> 00:58:49,200
Want to do, that is not good.

1325
00:58:49,600 --> 00:58:52,200
That does not look like what I want to look like a tall.

1326
00:58:52,500 --> 00:58:53,000
People.

1327
00:58:53,900 --> 00:58:56,400
We've got a bug, do Ida bug it.

1328
00:58:56,400 --> 00:58:56,600
Now.

1329
00:58:56,600 --> 00:58:57,900
I kind of want to debug it now.

1330
00:58:57,900 --> 00:58:59,200
We made so many code changes.

1331
00:58:59,200 --> 00:58:59,800
I just want to

1332
00:59:00,700 --> 00:59:03,500
This is the problem with limited times on the stream.

1333
00:59:03,700 --> 00:59:07,500
I'm going to give myself, like, like till 11:05.

1334
00:59:07,600 --> 00:59:10,200
Let's say, because I want to take a look at this.

1335
00:59:10,800 --> 00:59:11,400
All right.

1336
00:59:11,500 --> 00:59:17,800
So so when we are drawing, we are going through here.

1337
00:59:17,800 --> 00:59:21,900
We're saying get tile value for a column and a row, and that is going

1338
00:59:21,900 --> 00:59:28,300
to go ahead and go up into the get Top Value call, right?

1339
00:59:28,300 --> 00:59:29,800
It's going to be looping from 0 to 7.

1340
00:59:29,900 --> 00:59:34,500
18, the get Top Value call will go ahead and say let's Hoops.

1341
00:59:34,500 --> 00:59:36,100
That's that's not it.

1342
00:59:36,100 --> 00:59:38,000
It's this one, get Tau value for call.

1343
00:59:38,000 --> 00:59:42,400
It will say let me get the chunk position for those to let me get back

1344
00:59:42,900 --> 00:59:45,900
the tile chunk for the Rel 0.

1345
00:59:46,000 --> 00:59:46,900
Nope, that's wrong.

1346
00:59:47,500 --> 00:59:49,200
That's totally not right.

1347
00:59:49,800 --> 00:59:50,800
Get tile Chunk.

1348
00:59:51,300 --> 00:59:54,200
We are supposed to look up the tile chunk X and the tile chunk.

1349
00:59:54,200 --> 00:59:56,900
Y/x tile jump.

1350
00:59:56,900 --> 00:59:57,300
Why?

1351
00:59:58,400 --> 00:59:59,800
Right, so it's look up the top.

1352
01:00:00,000 --> 01:00:02,300
X the tower chunk Y which we do.

1353
01:00:02,900 --> 01:00:03,900
We'll get back at uh, chunk.

1354
01:00:04,100 --> 01:00:07,400
Look up the relative tile X and low to try y to get the actual Tau

1355
01:00:07,400 --> 01:00:07,900
value.

1356
01:00:09,400 --> 01:00:10,300
And that's good.

1357
01:00:10,400 --> 01:00:13,300
So that was the bug, which is now thankfully gone.

1358
01:00:14,100 --> 01:00:19,000
When we actually do our ketchup position for, we shift down by

1359
01:00:19,000 --> 01:00:22,500
whatever the shift is to get our chunk X and Y and we mask out to get

1360
01:00:22,500 --> 01:00:24,400
our relatives when I go, I want to step through all this to make sure

1361
01:00:24,400 --> 01:00:27,100
it's all working properly, obviously, because there's so many changes

1362
01:00:27,100 --> 01:00:29,100
that we made here and on the stream.

1363
01:00:29,100 --> 01:00:33,700
I tend to make, like I said, I make sort of typos a lot that you don't

1364
01:00:33,700 --> 01:00:34,200
want to make.

1365
01:00:34,600 --> 01:00:36,000
So anyway, let's take a look.

1366
01:00:36,000 --> 01:00:38,600
We can look at that, uh, chunks.

1367
01:00:38,900 --> 01:00:41,100
Because World touch is blah, blah, blah.

1368
01:00:41,200 --> 01:00:44,200
That seems those should always be 0.

1369
01:00:44,200 --> 01:00:46,600
All right, so let's just see if that one bug, was it?

1370
01:00:46,900 --> 01:00:47,500
And then I could.

1371
01:00:47,500 --> 01:00:48,400
Yeah, so there we go.

1372
01:00:49,200 --> 01:00:49,800
Alright.

1373
01:00:49,800 --> 01:00:50,500
So now we're in.

1374
01:00:50,500 --> 01:00:51,200
Good shape.

1375
01:00:51,300 --> 01:00:54,300
We got all that stuff working again, but we do have a problem, which

1376
01:00:54,300 --> 01:00:58,100
is now we don't have a notion of moving from one screen to another at

1377
01:00:58,100 --> 01:00:58,600
the moment.

1378
01:00:58,600 --> 01:01:01,500
So, like when for example, the player goes off, they're just off and

1379
01:01:01,500 --> 01:01:06,000
they're still drawing up there, but they're they're we're not telling

1380
01:01:06,000 --> 01:01:08,700
the screen to move to follow the

1381
01:01:08,800 --> 01:01:09,300
Player.

1382
01:01:09,600 --> 01:01:11,300
Now we could try to do something.

1383
01:01:11,800 --> 01:01:14,800
You know, where we, where we actually do, do that.

1384
01:01:15,000 --> 01:01:17,100
Unfortunately, right now.

1385
01:01:20,800 --> 01:01:24,400
Well, you know, I mean, I guess we could even, we could, I guess in

1386
01:01:24,400 --> 01:01:28,000
theory just do something just to test it.

1387
01:01:28,400 --> 01:01:33,600
We could do something where we said that, the actual thing that we

1388
01:01:33,600 --> 01:01:43,700
want, the actual values that we want to check, you know, something

1389
01:01:43,700 --> 01:01:44,200
like

1390
01:01:48,800 --> 01:01:49,600
I'm just going to do it.

1391
01:01:50,000 --> 01:01:53,700
So we could say is we could just take wherever the player is, right,

1392
01:01:54,000 --> 01:01:58,500
we could say wherever the player is minus 10, or whatever, Rose in

1393
01:01:58,500 --> 01:02:01,700
that direction and then plus 10 in this direction or something like

1394
01:02:01,700 --> 01:02:02,100
that.

1395
01:02:02,700 --> 01:02:03,300
Right?

1396
01:02:03,400 --> 01:02:04,600
We could say that.

1397
01:02:05,300 --> 01:02:07,900
And and then we could say, oops.

1398
01:02:07,900 --> 01:02:12,300
This should be why because that's the row and then you know, whatever

1399
01:02:12,300 --> 01:02:14,700
and we're drawing more than we need to hear but whatever.

1400
01:02:14,700 --> 01:02:18,000
And so we could go ahead and say say that.

1401
01:02:18,800 --> 01:02:25,500
And then instead of using just the row and column here, we would use

1402
01:02:25,500 --> 01:02:31,600
whatever the offset is of from, from the players location.

1403
01:02:31,800 --> 01:02:39,200
So we basically say, you know, Rel column equals column, wherever

1404
01:02:39,200 --> 01:02:45,300
whatever the column is - the players location game State player P dot

1405
01:02:45,400 --> 01:02:48,100
ABS tile X and similarly

1406
01:02:48,200 --> 01:02:54,000
Ali railro Stripes, right Row, game stay tab style.

1407
01:02:54,000 --> 01:02:56,200
Well, I like that and then do this.

1408
01:02:56,500 --> 01:02:57,500
I kind of slammed that in there.

1409
01:02:57,500 --> 01:02:59,600
It's probably wrong, but you get the idea.

1410
01:03:00,000 --> 01:03:03,100
These are supposed to be reals everywhere.

1411
01:03:04,800 --> 01:03:05,600
Convert them up.

1412
01:03:08,400 --> 01:03:10,000
Oh, my, that was not good.

1413
01:03:10,700 --> 01:03:11,400
What did I do?

1414
01:03:11,500 --> 01:03:12,500
What did I do?

1415
01:03:17,300 --> 01:03:18,600
I don't know what I did wrong there.

1416
01:03:20,400 --> 01:03:23,600
These will course wrap around, but I thought we handled wrapping.

1417
01:03:24,200 --> 01:03:26,200
So I don't know that that's necessarily a problem.

1418
01:03:27,800 --> 01:03:30,700
Oh my God, and I'm at the time I said I was going to be, I just wanted

1419
01:03:30,700 --> 01:03:33,200
to put something in here to see if we could do kind of trivial

1420
01:03:33,200 --> 01:03:33,800
scrolling.

1421
01:03:36,000 --> 01:03:38,100
You know what I'm saying, you know what I'm saying?

1422
01:03:38,900 --> 01:03:42,200
But, I didn't do a very good job of throwing in Trivial scrolling.

1423
01:03:42,200 --> 01:03:42,600
Apparently.

1424
01:03:42,600 --> 01:03:43,700
Wait, what is?

1425
01:03:43,900 --> 01:03:47,700
So it's not actually drawing anything Rose.

1426
01:03:47,800 --> 01:03:50,900
Oh, right, when it wraps, it won't be less than.

1427
01:03:52,000 --> 01:03:52,100
Oh.

1428
01:03:52,100 --> 01:03:52,900
Yeah.

1429
01:03:53,900 --> 01:03:57,400
Well, you know, we could do this, we could do it this, I suppose.

1430
01:04:02,700 --> 01:04:03,200
Right.

1431
01:04:05,800 --> 01:04:08,100
Do something something a little fancier.

1432
01:04:08,800 --> 01:04:11,600
So what basically what's happening there is that it would just stop

1433
01:04:11,600 --> 01:04:15,700
immediately because of course, when it wraps around to because it was

1434
01:04:15,700 --> 01:04:18,500
a, you know, when railroad when the player is here and you're

1435
01:04:18,500 --> 01:04:21,800
subtracting from it, you end up with a really huge number.

1436
01:04:21,800 --> 01:04:23,000
And so, of course, it was failing.

1437
01:04:23,000 --> 01:04:25,100
The check the first time through the loop.

1438
01:04:25,200 --> 01:04:25,600
Sorry.

1439
01:04:25,600 --> 01:04:29,000
I'm I should have explained all that in detail, but we're right at the

1440
01:04:29,000 --> 01:04:29,600
end.

1441
01:04:30,100 --> 01:04:31,100
We could do it in the Q&A.

1442
01:04:31,100 --> 01:04:33,500
If people want me to explain it in detail, what was going on there.

1443
01:04:33,500 --> 01:04:34,200
We could restore the code.

1444
01:04:34,200 --> 01:04:35,400
I just, I just wanted to see if we

1445
01:04:36,000 --> 01:04:39,300
It's just kind of I wanted to move the map around a little bit before

1446
01:04:39,300 --> 01:04:40,300
I ended the stream.

1447
01:04:40,800 --> 01:04:44,500
Anyway, so we are going in here and these are the Rel.

1448
01:04:44,500 --> 01:04:49,800
These are now Rel column and Rel Rel row, right?

1449
01:04:49,900 --> 01:04:54,500
And so what we actually need to do when we look it up in here is we

1450
01:04:54,500 --> 01:04:58,800
need to compute, the actual column and row, right?

1451
01:04:58,800 --> 01:05:00,500
So we need to actually do these two.

1452
01:05:00,800 --> 01:05:03,600
And again, this is all just total nonsense code.

1453
01:05:04,400 --> 01:05:05,400
So it'd be it'd be

1454
01:05:05,500 --> 01:05:07,600
Be it be done like this.

1455
01:05:08,100 --> 01:05:15,500
Basically absolutes, AB style+ that rail ABS tile, X, plus the rail.

1456
01:05:15,500 --> 01:05:16,700
Column we go.

1457
01:05:17,300 --> 01:05:19,500
I think that might be more correct.

1458
01:05:21,900 --> 01:05:27,000
Well, it's not quite right, not quite right almost there, almost there

1459
01:05:27,200 --> 01:05:27,700
sometimes.

1460
01:05:27,700 --> 01:05:27,900
Sorry.

1461
01:05:27,900 --> 01:05:28,900
I'm fixated on this.

1462
01:05:28,900 --> 01:05:31,100
I know I'm supposed to end the stream just fixated on this.

1463
01:05:31,100 --> 01:05:33,000
I just wanted to just test the scrolling.

1464
01:05:33,100 --> 01:05:36,800
You're never, I really shouldn't throw things in like this, because I

1465
01:05:36,800 --> 01:05:40,200
don't have time to actually write them properly, obviously, but I just

1466
01:05:40,200 --> 01:05:42,900
kind of wanted to to try it.

1467
01:05:42,900 --> 01:05:46,400
And so if we were to draw the map this way, then where would the

1468
01:05:46,400 --> 01:05:51,000
player be the player would I guess be at the same we could get rid of

1469
01:05:51,000 --> 01:05:51,300
this law.

1470
01:05:51,400 --> 01:05:53,700
Lower left and this thing entirely, right?

1471
01:05:53,700 --> 01:05:55,800
We could just do it that way.

1472
01:05:56,200 --> 01:05:59,500
And so basically, if the player was drawn to the center, we would need

1473
01:05:59,500 --> 01:05:59,800
to add.

1474
01:06:00,000 --> 01:06:02,500
Offset for the center of the screen, right?

1475
01:06:02,600 --> 01:06:04,900
So we basically need we would need a center.

1476
01:06:08,500 --> 01:06:09,600
How is this working before?

1477
01:06:11,200 --> 01:06:13,600
Yeah, so we would need, we would need a center.

1478
01:06:13,600 --> 01:06:18,600
Why the screen and a center X for the screen, right?

1479
01:06:18,900 --> 01:06:21,400
And then the player would just be drawn.

1480
01:06:21,500 --> 01:06:23,400
Would we would delete all of this stuff?

1481
01:06:23,400 --> 01:06:23,600
Right?

1482
01:06:23,600 --> 01:06:26,100
The player would just be drawn at the center of the screen roughly.

1483
01:06:26,100 --> 01:06:28,300
He would never have that offset.

1484
01:06:28,300 --> 01:06:35,400
It would just have the world M, the regular World M offset that he

1485
01:06:35,400 --> 01:06:36,500
normally had.

1486
01:06:37,700 --> 01:06:42,300
Yeah, so that would basically it and then Center X and Center.

1487
01:06:42,300 --> 01:06:43,000
Why?

1488
01:06:45,700 --> 01:06:48,700
Would be equal to I again, apologize for fixating on this.

1489
01:06:48,900 --> 01:06:51,600
I just really, really wanted to see if I could make the screen scroll.

1490
01:06:51,600 --> 01:06:54,900
Sometimes, you know, you get into that and I will explain all this

1491
01:06:54,900 --> 01:06:56,400
tomorrow or in the Q&A.

1492
01:06:56,400 --> 01:06:59,400
So, I don't mean to leave everyone in the Lurch there.

1493
01:06:59,400 --> 01:07:01,400
I just really wanted to see if I could get it working.

1494
01:07:02,400 --> 01:07:04,600
So close, so close.

1495
01:07:05,100 --> 01:07:06,500
So you can see, it's sort of working.

1496
01:07:06,500 --> 01:07:10,600
Now, in the sense that my, my player is not quite drawn, right?

1497
01:07:10,600 --> 01:07:14,500
So he just needs, he needs that Center X, the center y offset as well,

1498
01:07:14,700 --> 01:07:15,300
which I forgot.

1499
01:07:15,600 --> 01:07:18,300
Of course, Center X Center.

1500
01:07:18,300 --> 01:07:18,800
Why?

1501
01:07:19,900 --> 01:07:20,400
There we go.

1502
01:07:22,000 --> 01:07:22,600
All right.

1503
01:07:23,000 --> 01:07:25,500
So now this guy is like the worlds.

1504
01:07:27,800 --> 01:07:28,900
That's kind of odd.

1505
01:07:32,700 --> 01:07:33,600
One more bug.

1506
01:07:34,300 --> 01:07:34,800
There we go.

1507
01:07:38,400 --> 01:07:38,800
Yeah.

1508
01:07:39,100 --> 01:07:40,300
All right now.

1509
01:07:40,300 --> 01:07:41,100
I think we're good.

1510
01:07:42,200 --> 01:07:43,300
Do you do?

1511
01:07:43,400 --> 01:07:43,900
Okay.

1512
01:07:44,100 --> 01:07:49,400
So now our guy is actually properly walking around on the map and of

1513
01:07:49,400 --> 01:07:52,100
course, we are not actually bothering to smooth.

1514
01:07:52,100 --> 01:07:53,100
Scroll, anything.

1515
01:07:53,200 --> 01:07:56,000
We could smooth scroll, pretty trivial at this point, but I just

1516
01:07:56,000 --> 01:07:58,700
wanted to verify that we were fetching into the tile Maps correctly

1517
01:07:58,700 --> 01:08:02,600
now, which we are and I just didn't feel like we could quite do that

1518
01:08:02,700 --> 01:08:05,400
without something that actually allowed us to see more of the tile

1519
01:08:05,400 --> 01:08:06,000
map.

1520
01:08:06,200 --> 01:08:08,800
And so now we can see the rest of the Tama.

1521
01:08:08,800 --> 01:08:09,300
Okay.

1522
01:08:09,400 --> 01:08:11,200
All right, pick hat off.

1523
01:08:12,000 --> 01:08:12,800
For that diversion.

1524
01:08:12,800 --> 01:08:15,900
I just really wanted to slam in something that would allow me to view

1525
01:08:15,900 --> 01:08:18,899
the whole map, which we can now do.

1526
01:08:18,899 --> 01:08:19,800
Okay.

1527
01:08:19,800 --> 01:08:20,200
All right.

1528
01:08:20,200 --> 01:08:21,500
Sorry, I went crazy there.

1529
01:08:21,800 --> 01:08:23,500
I just really want to get that in there.

1530
01:08:23,800 --> 01:08:27,800
Okay, now now we can go to the Q&A.

1531
01:08:27,800 --> 01:08:33,500
Please prefix your questions with Q: so that we can

1532
01:08:35,000 --> 01:08:38,100
See them on the stream and please try to keep your questions to the

1533
01:08:38,100 --> 01:08:42,300
code that we've written today or that we wrote in previous day's so we

1534
01:08:42,300 --> 01:08:43,200
can stay on topic.

1535
01:08:43,500 --> 01:08:45,200
If you want to ask an off topic question.

1536
01:08:45,899 --> 01:08:49,300
You can always come 15 minutes before the stream schedule to start and

1537
01:08:49,300 --> 01:08:49,800
ask if there.

1538
01:08:49,800 --> 01:08:53,500
We always filled any random questions no matter what their about on

1539
01:08:53,500 --> 01:08:54,200
the free stream.

1540
01:08:55,000 --> 01:08:57,899
All right, see if we got any, Q&A is

1541
01:09:07,600 --> 01:09:11,200
How about chunk chunk mask equals chunk?

1542
01:09:11,200 --> 01:09:13,899
Chef - yeah, so that is a pretty good idea.

1543
01:09:14,300 --> 01:09:16,899
Let me show you what someone was suggesting there.

1544
01:09:17,300 --> 01:09:18,200
Let me close that down.

1545
01:09:18,800 --> 01:09:22,399
Let me show you what son was suggesting basically to avoid typing the

1546
01:09:22,399 --> 01:09:23,600
same constant in twice.

1547
01:09:23,899 --> 01:09:26,000
So choose me.

1548
01:09:28,800 --> 01:09:31,200
What I was saying before, and I kind of explain this this part in

1549
01:09:31,200 --> 01:09:32,200
detail, right?

1550
01:09:32,500 --> 01:09:33,899
Is that what we need to do?

1551
01:09:33,899 --> 01:09:38,000
Is we have a thing, that's 24 bits in 8 Bits, and we're using them

1552
01:09:38,000 --> 01:09:38,399
separately.

1553
01:09:38,399 --> 01:09:40,399
We're using this part to access the chunk.

1554
01:09:40,399 --> 01:09:42,399
We're using this part to access tiles are going to chunk.

1555
01:09:42,500 --> 01:09:43,600
So we need to extract the to.

1556
01:09:44,100 --> 01:09:49,500
So if I say what I want to do to get the to get this value down,

1557
01:09:49,700 --> 01:09:50,200
right?

1558
01:09:50,300 --> 01:09:54,300
I need to shift it down by eight, to put it into the bottom part.

1559
01:09:54,400 --> 01:09:57,000
So that's how I access it, but then I need a mask, too.

1560
01:09:57,200 --> 01:09:59,500
At this part out to get rid of this part.

1561
01:10:00,400 --> 01:10:04,500
So what we want to do is we want to produce a mask that works the same

1562
01:10:04,900 --> 01:10:06,900
as a shift down by eight in Reverse.

1563
01:10:07,000 --> 01:10:07,200
Right?

1564
01:10:07,200 --> 01:10:10,700
So what we want to do is say okay, something that's going to shift

1565
01:10:10,700 --> 01:10:14,600
down by eight is going to move the 24 into here, right?

1566
01:10:14,600 --> 01:10:18,500
We want the symmetric operation, which is something that masks out the

1567
01:10:18,500 --> 01:10:20,600
the 24 and just leaves the eight.

1568
01:10:20,700 --> 01:10:22,900
Can we do that using just this value?

1569
01:10:23,500 --> 01:10:26,900
And the answer is we can because if you think about what happens,

1570
01:10:28,300 --> 01:10:30,400
It's kind of at this is just one of those binary tricks.

1571
01:10:30,400 --> 01:10:34,800
Basically, if we were to use the shift in, reverse on one, right?

1572
01:10:34,800 --> 01:10:37,700
So let's say we put a 1 in here and we use the reverse ship.

1573
01:10:37,700 --> 01:10:40,000
So instead of 8 we shifted down by 8.

1574
01:10:40,000 --> 01:10:44,400
We shift up by 8, that would move the one into this location, right?

1575
01:10:44,500 --> 01:10:47,800
So, it would essentially create the value 256, for what we have now,

1576
01:10:47,800 --> 01:10:48,100
right?

1577
01:10:48,100 --> 01:10:51,800
It would create 256 one shifted up by is 256, right?

1578
01:10:52,300 --> 01:10:56,900
So that's that would create 56 if we then subtract 1 from it.

1579
01:10:57,500 --> 01:11:00,300
So we just say, we shift it up, we subtract we shift one up by

1580
01:11:00,300 --> 01:11:01,100
whatever the shift value is.

1581
01:11:01,100 --> 01:11:04,800
We've tracked, one for it that will basically all of these are zero

1582
01:11:04,800 --> 01:11:07,100
right in here right now at 00:00, right?

1583
01:11:07,300 --> 01:11:12,900
It's like it's eight zeros and a one on the 9th bit, right?

1584
01:11:14,600 --> 01:11:19,500
To me if we subtract one from it, it will carry through and set all of

1585
01:11:19,500 --> 01:11:22,700
these to one until it gets to the one, which will set to 0.

1586
01:11:23,400 --> 01:11:26,700
And that is exactly the mask that we actually wanted, right?

1587
01:11:26,700 --> 01:11:28,700
We wanted all of those.

1588
01:11:28,900 --> 01:11:33,000
And so, if you think about what happens here in our in our actual

1589
01:11:33,000 --> 01:11:34,000
code, right?

1590
01:11:36,300 --> 01:11:37,600
So we look at what we have.

1591
01:11:37,700 --> 01:11:45,700
We have our, our world chunk shift, and our world chunk mask.

1592
01:11:48,000 --> 01:11:51,800
Oops, typing typing skills, right?

1593
01:11:51,800 --> 01:11:54,100
You can see that we want 8 and 255, right?

1594
01:11:54,100 --> 01:11:57,500
Because that is basically, the eighth is a shift and the FF is the

1595
01:11:57,500 --> 01:11:58,600
mask that we would use, right?

1596
01:11:58,600 --> 01:11:59,800
You can see if we and with

1597
01:12:00,300 --> 01:12:03,400
We would knock out all of the things up here and only leave the bottom

1598
01:12:03,400 --> 01:12:04,600
eight, which is what we wanted.

1599
01:12:05,200 --> 01:12:08,500
So if we wanted to do, if we wanted to produce this value, from that

1600
01:12:08,500 --> 01:12:13,000
value again, what the what the commenter was suggesting is we could

1601
01:12:13,000 --> 01:12:18,300
say instead that the chunk mask, right equals one shifted up by the

1602
01:12:18,300 --> 01:12:19,600
shift amount, right?

1603
01:12:20,600 --> 01:12:25,200
And then we just go ahead and subtract one from that value.

1604
01:12:25,500 --> 01:12:25,800
Right?

1605
01:12:25,800 --> 01:12:30,700
So we do 1, minus that value and that should give us that same mass

1606
01:12:30,700 --> 01:12:32,000
that we wanted, right?

1607
01:12:32,000 --> 01:12:33,200
And you can see that happen.

1608
01:12:33,200 --> 01:12:37,700
Now, if, when we step into the butter, so we have the chunk mask, it

1609
01:12:37,700 --> 01:12:39,000
becomes 256.

1610
01:12:39,000 --> 01:12:40,000
Like I said, right?

1611
01:12:40,000 --> 01:12:44,500
See because we shift up that one and we shift it just out of the area

1612
01:12:44,500 --> 01:12:45,200
that we were in.

1613
01:12:45,700 --> 01:12:49,500
We then subtract 1 and that borrows all the things over.

1614
01:12:51,800 --> 01:12:53,600
Oh, except.

1615
01:12:53,600 --> 01:12:54,500
I typed it wrong.

1616
01:12:54,700 --> 01:12:56,500
That's one - junk mask.

1617
01:12:56,500 --> 01:12:59,000
I want to subtract one from chunk mask.

1618
01:12:59,000 --> 01:12:59,800
Nice, work Casey.

1619
01:13:02,000 --> 01:13:02,300
All right.

1620
01:13:02,300 --> 01:13:02,800
There we go.

1621
01:13:03,000 --> 01:13:04,000
Try that one more time.

1622
01:13:05,100 --> 01:13:07,800
We get that value, we subtract one from it, and you can see that it

1623
01:13:07,800 --> 01:13:08,700
carries, right?

1624
01:13:08,800 --> 01:13:12,300
If we want to look in binary, we can do this as well.

1625
01:13:12,400 --> 01:13:12,800
Right?

1626
01:13:13,500 --> 01:13:15,900
So if we come in here, we can see that.

1627
01:13:15,900 --> 01:13:18,500
We basically take that one, shift it up.

1628
01:13:20,900 --> 01:13:21,400
There we go.

1629
01:13:21,700 --> 01:13:23,200
We have the one shifted up by 8.

1630
01:13:23,200 --> 01:13:25,000
So it went one, two, three, four, five, seven.

1631
01:13:25,000 --> 01:13:25,900
Eight up to there.

1632
01:13:26,000 --> 01:13:28,600
And then we do the subtract and that'll Say, it'll do a carry.

1633
01:13:28,900 --> 01:13:30,600
We're just basically tries to pull from the next number.

1634
01:13:30,600 --> 01:13:32,800
Next to the next owners are all the way to the guests of the one so

1635
01:13:32,800 --> 01:13:34,400
it'll leave all of those ones filled.

1636
01:13:34,400 --> 01:13:36,300
And that is the mass that we wanted, right?

1637
01:13:36,300 --> 01:13:37,300
So, that was a good suggestion.

1638
01:13:37,300 --> 01:13:37,800
Thank you site.

1639
01:13:37,800 --> 01:13:39,200
We've never talked about that in the Stream.

1640
01:13:39,400 --> 01:13:40,500
That is a kind of convenient way.

1641
01:13:40,500 --> 01:13:41,000
You can make it.

1642
01:13:41,000 --> 01:13:44,100
So you only have to type in one thing and so that I can, I'm just

1643
01:13:44,100 --> 01:13:44,700
gonna simplify that.

1644
01:13:44,700 --> 01:13:47,700
Now since we've walked through it by just doing that, right?

1645
01:13:49,000 --> 01:13:53,300
And now we can see when we step in that we have that mask and we've

1646
01:13:53,300 --> 01:13:54,200
only added one place.

1647
01:13:54,200 --> 01:13:58,000
So if we change this to something else, if we change this to for it

1648
01:13:58,000 --> 01:13:59,000
would still work, right?

1649
01:13:59,100 --> 01:13:59,900
Which is kind of cool.

1650
01:14:06,500 --> 01:14:08,800
How did you make the map randomly generated?

1651
01:14:09,000 --> 01:14:10,400
We haven't gotten there yet.

1652
01:14:10,400 --> 01:14:11,800
The map is not randomly generated.

1653
01:14:11,800 --> 01:14:13,400
We just kind of put in a test map.

1654
01:14:13,600 --> 01:14:15,500
We haven't started doing generation work yet.

1655
01:14:15,500 --> 01:14:15,900
That's coming.

1656
01:14:15,900 --> 01:14:16,300
Later.

1657
01:14:28,100 --> 01:14:29,800
I have a question to the new time of system.

1658
01:14:29,800 --> 01:14:32,000
How do you want to make that third dimension of your world?

1659
01:14:32,000 --> 01:14:35,800
For example, when you go up a ladder, so what we'll be doing for that

1660
01:14:36,000 --> 01:14:37,900
is as soon as we have everything done for this.

1661
01:14:37,900 --> 01:14:43,500
We will just add a z only to the chunks.

1662
01:14:43,700 --> 01:14:49,400
So the Z's, they'll be a z on the chunk so you can go up or down and I

1663
01:14:49,400 --> 01:14:55,100
don't actually know, we'll add an ABS tile, a z here as well.

1664
01:14:55,200 --> 01:14:57,300
I don't know if we'll have a Rel Z.

1665
01:14:57,500 --> 01:14:59,900
Z or not, but we'll basically just add one.

1666
01:15:00,000 --> 01:15:02,600
Our coordinate and which will be pretty free to do, but it's not

1667
01:15:02,600 --> 01:15:07,400
handled the same, quite as X and Y, because you can't see up and down.

1668
01:15:07,400 --> 01:15:10,100
When you do like games are weird the way that they work.

1669
01:15:10,100 --> 01:15:13,300
Like you, you go down a level and you can't see the level below.

1670
01:15:13,300 --> 01:15:14,900
You exactly.

1671
01:15:15,400 --> 01:15:18,300
You can't move smoothly between them in the same ways.

1672
01:15:18,300 --> 01:15:21,400
So we may have to handle it a little bit differently, but it'll be,

1673
01:15:21,600 --> 01:15:24,000
it'll just be another parameter to our look up once we get to that

1674
01:15:24,000 --> 01:15:24,500
point.

1675
01:15:28,700 --> 01:15:29,700
Let's see.

1676
01:15:57,800 --> 01:16:01,100
Well, there are a lot of non question questions in the street.

1677
01:16:05,000 --> 01:16:07,000
What are your thoughts about how to handle screaming boundaries now?

1678
01:16:07,000 --> 01:16:11,000
Since now tile chunks are not equal to screens, so I don't really know

1679
01:16:11,000 --> 01:16:12,400
exactly how we're going to handle it.

1680
01:16:12,400 --> 01:16:14,700
I thought that's a good question.

1681
01:16:15,100 --> 01:16:18,200
And so I one way to handle it is to not make it explicit and just make

1682
01:16:18,200 --> 01:16:18,900
it implicit.

1683
01:16:18,900 --> 01:16:22,500
So, the generator that generates the, the world always generate

1684
01:16:22,500 --> 01:16:26,600
screens worth of content that are kind of a line that way.

1685
01:16:26,800 --> 01:16:32,500
And then the camera always just Moves In in as as it wants to in that

1686
01:16:32,500 --> 01:16:34,300
way, but the other thing we could do,

1687
01:16:34,400 --> 01:16:39,300
Is actually placed explicit screen markers so that basically, we could

1688
01:16:39,300 --> 01:16:43,400
have different sized screens that you move into and it would scale up

1689
01:16:43,400 --> 01:16:45,700
or down based on how big they were or something.

1690
01:16:45,900 --> 01:16:46,400
I don't know.

1691
01:16:46,400 --> 01:16:47,800
So we'll have to play with that.

1692
01:16:47,900 --> 01:16:50,300
So the answer is I don't know yet how we'll handle it.

1693
01:16:50,600 --> 01:16:53,000
But I wanted to get to the point where we could essentially freely

1694
01:16:53,000 --> 01:16:56,100
walk around the world so that we know that we can basically do

1695
01:16:56,100 --> 01:16:58,400
anything we want and then we'll figure out how to fix it.

1696
01:16:58,400 --> 01:17:00,200
Two screens that are gameplay related.

1697
01:17:07,400 --> 01:17:12,800
Is a chunk a quarter of what the map is right now, at chunk, is 256 by

1698
01:17:12,800 --> 01:17:13,200
256.

1699
01:17:13,200 --> 01:17:15,400
Which means it's even bigger than what we specified.

1700
01:17:15,400 --> 01:17:18,300
This the part we specified is actually a small fraction of it.

1701
01:17:19,000 --> 01:17:23,200
It's only, you know, a tiny fraction of what a chunk would be.

1702
01:17:23,400 --> 01:17:28,800
So we'll probably reduce this chunk size, potentially will look at

1703
01:17:29,000 --> 01:17:30,600
into that sort of stuff more tomorrow.

1704
01:17:37,200 --> 01:17:38,800
Let's see.

1705
01:17:39,800 --> 01:17:42,200
How about operator overloading for manipulating role positions?

1706
01:17:42,400 --> 01:17:44,600
Yes, we will be adding stuff like that.

1707
01:17:44,800 --> 01:17:46,500
Once I start introducing vectors.

1708
01:17:47,100 --> 01:17:49,600
We will be looking at operator overloading, simplify things, but we're

1709
01:17:49,600 --> 01:17:50,600
not quite there yet.

1710
01:17:50,600 --> 01:17:52,800
So I'm doing most of the stuff without operator overloading.

1711
01:17:53,100 --> 01:17:56,100
There's just there's not too much code so I don't mind doing it

1712
01:17:56,100 --> 01:17:59,000
manually, but yeah, once we actually

1713
01:18:00,000 --> 01:18:03,000
The time lapse up straightened away and I start talking more about

1714
01:18:03,000 --> 01:18:07,100
moving things around, we're going to want to introduce vectors and

1715
01:18:07,100 --> 01:18:08,500
talk a little bit about how that'll work.

1716
01:18:13,800 --> 01:18:14,800
Let's see.

1717
01:18:19,400 --> 01:18:21,900
Should you be considering multi-threading and networking right from

1718
01:18:21,900 --> 01:18:22,800
the scratch?

1719
01:18:24,200 --> 01:18:27,900
Well, networking is not really a goal for this game.

1720
01:18:28,300 --> 01:18:30,400
So not that one but multi-threading.

1721
01:18:30,900 --> 01:18:31,800
Yes and no.

1722
01:18:31,900 --> 01:18:35,100
Since we want to run on Raspberry Pi, there's not much we can do with

1723
01:18:35,100 --> 01:18:40,700
multi-threading for the main game code, but for the renderer will be

1724
01:18:40,700 --> 01:18:43,600
doing a lot of multi-threading because the render on Raspberry Pi will

1725
01:18:43,600 --> 01:18:44,600
use the GPU.

1726
01:18:45,100 --> 01:18:47,500
And so for our CPU renderer will do a bunch of multi-threading but

1727
01:18:47,500 --> 01:18:49,100
there's not, I don't know how much

1728
01:18:49,200 --> 01:18:50,500
Other threading we can really do.

1729
01:18:51,200 --> 01:18:55,200
We might have to accept some things like we might multi-thread the

1730
01:18:55,200 --> 01:18:58,800
world generation and then on Raspberry Pi will accept the fact that

1731
01:18:58,800 --> 01:19:01,600
there's like, sort of a world generation, loading screen, or

1732
01:19:01,600 --> 01:19:04,000
something, because maybe we can't really do anything about it.

1733
01:19:05,000 --> 01:19:05,700
We'll have to see.

1734
01:19:05,900 --> 01:19:09,100
So, there's a lot of ifs in there but, you know, I don't really think

1735
01:19:09,100 --> 01:19:09,400
so.

1736
01:19:09,400 --> 01:19:13,800
Like, there's not a whole lot, you need to do to consider

1737
01:19:14,200 --> 01:19:14,900
multi-threading.

1738
01:19:14,900 --> 01:19:18,300
I mean, multi-threading is something that you should be able to if you

1739
01:19:18,300 --> 01:19:19,100
have your code set

1740
01:19:19,200 --> 01:19:21,900
Well, you should be able to pull out multi-threaded threading Parts as

1741
01:19:21,900 --> 01:19:23,000
you go, if you really need to.

1742
01:19:36,700 --> 01:19:37,700
What does the?

1743
01:19:39,300 --> 01:19:42,500
0xffff value represent.

1744
01:19:42,900 --> 01:19:45,000
Oh, you're talking about these.

1745
01:19:45,600 --> 01:19:51,300
So that's just the largest possible, 32-bit integer, right?

1746
01:19:51,600 --> 01:19:53,200
Unsigned 32-bit integer.

1747
01:19:53,700 --> 01:19:56,900
So basically that's all the bits set that's in hexadecimal.

1748
01:19:57,400 --> 01:20:02,600
So if you go in here and you imagine typing that into something like

1749
01:20:02,600 --> 01:20:03,100
this,

1750
01:20:04,900 --> 01:20:07,400
Right, you can see that.

1751
01:20:07,400 --> 01:20:12,300
That is that's the largest possible 32-bit unsigned number because

1752
01:20:12,300 --> 01:20:13,500
this represents 32 bits.

1753
01:20:13,500 --> 01:20:16,000
In fact, we can see it in binary if you'd like.

1754
01:20:16,400 --> 01:20:16,900
There it is.

1755
01:20:16,900 --> 01:20:19,400
It's 32 ones in a row, right?

1756
01:20:19,400 --> 01:20:21,700
11, 11 11, 11, 11.

1757
01:20:23,300 --> 01:20:25,200
That is all that is.

1758
01:20:25,300 --> 01:20:29,500
And so you use it if you want to just quickly, write in the biggest

1759
01:20:30,200 --> 01:20:31,100
32-bit number.

1760
01:20:32,100 --> 01:20:33,500
That's, that's what that is.

1761
01:20:44,100 --> 01:20:46,200
Colonel Dragon says, I'm a little surprised.

1762
01:20:46,200 --> 01:20:48,200
You find flipping the y direction to be easier to work with

1763
01:20:48,200 --> 01:20:51,000
considering you've been programming and dealing with plus y down

1764
01:20:51,000 --> 01:20:52,400
display buffer is for so long.

1765
01:20:52,400 --> 01:20:55,200
Are there a lot of cases where the math is easier to deal with for

1766
01:20:55,200 --> 01:20:56,100
positive y.

1767
01:20:56,300 --> 01:20:57,600
Yeah, so

1768
01:20:59,000 --> 01:20:59,900
basically, having

1769
01:21:02,900 --> 01:21:06,900
Having worked in 3D, you get pretty used to right-handed coordinate

1770
01:21:06,900 --> 01:21:12,000
systems, which are basically, you know, coordinate systems where

1771
01:21:12,000 --> 01:21:16,200
you've got stuff that kind of obeys the right-hand rule.

1772
01:21:16,500 --> 01:21:23,500
So if you draw something like X and Y, and you look at sort of, if you

1773
01:21:23,500 --> 01:21:28,100
imagine a curl Circle, right?

1774
01:21:28,400 --> 01:21:29,900
Going counterclockwise from

1775
01:21:30,000 --> 01:21:36,700
Um, X to Y, then sort of the, the right-hand rule is if you curl, if

1776
01:21:36,700 --> 01:21:41,600
you curl your right hand like this, in the direction of the circle

1777
01:21:41,600 --> 01:21:42,800
from X to Y.

1778
01:21:42,800 --> 01:21:47,700
So you curl from X to Y, your thumb is pointing where the z-axis

1779
01:21:47,700 --> 01:21:49,000
should go, right?

1780
01:21:49,200 --> 01:21:51,500
You get really used to this coordinate system.

1781
01:21:52,800 --> 01:21:57,500
And so what you expect to see when you're on a tile map, is you expect

1782
01:21:57,500 --> 01:21:59,700
to see X going this way.

1783
01:22:00,000 --> 01:22:02,800
Going that way and Z going up, right?

1784
01:22:02,800 --> 01:22:06,300
So Z is coming out at you, you could equivalently, if you wanted to

1785
01:22:06,300 --> 01:22:08,200
maintain a right-handed coordinate system.

1786
01:22:08,700 --> 01:22:11,900
You could do it the other way around.

1787
01:22:11,900 --> 01:22:13,500
Where you've got X going this way.

1788
01:22:13,900 --> 01:22:15,100
Why going this way?

1789
01:22:15,200 --> 01:22:17,900
And then Z would be going into the screen.

1790
01:22:17,900 --> 01:22:22,200
So instead of Z like, in this case, coming out of the screen, right?

1791
01:22:22,200 --> 01:22:27,200
In this case, z is going sort of into the screen, right?

1792
01:22:28,900 --> 01:22:29,700
If that makes sense.

1793
01:22:30,500 --> 01:22:32,800
So you could do it that way, but then you'd have to deal with all your

1794
01:22:32,800 --> 01:22:35,000
circles always go the wrong direction, right?

1795
01:22:35,000 --> 01:22:37,800
So when you're thinking about all of your trig, it's going the wrong

1796
01:22:37,800 --> 01:22:38,300
direction.

1797
01:22:38,300 --> 01:22:41,500
So I prefer to just flip it and always be in right-handed with Z

1798
01:22:41,500 --> 01:22:46,400
coming out at me when I'm when I'm thinking of Tom apps.

1799
01:22:57,100 --> 01:22:57,600
Thanks a bunch.

1800
01:22:57,600 --> 01:22:59,100
I've never done hex as integers.

1801
01:22:59,100 --> 01:23:01,200
Always been blessed with you, Aunt Dot Max.

1802
01:23:01,500 --> 01:23:04,800
So if you want, if you're programming in c and you do just want the

1803
01:23:04,800 --> 01:23:07,300
max, you actually have that as well.

1804
01:23:07,600 --> 01:23:11,300
I think there is a thing like, you know, like that.

1805
01:23:11,700 --> 01:23:13,000
I don't remember what it is.

1806
01:23:13,500 --> 01:23:14,000
Exactly.

1807
01:23:14,000 --> 01:23:18,100
So I guess it actually is just that value, right?

1808
01:23:18,700 --> 01:23:21,000
So you can actually do that at Sea as well.

1809
01:23:21,300 --> 01:23:25,500
It's in standard in, I think but you you have those if you want them.

1810
01:23:33,000 --> 01:23:34,300
I see five minutes left.

1811
01:23:34,300 --> 01:23:35,900
Let's see.

1812
01:23:37,000 --> 01:23:42,900
I don't see any more questions related to the code that I can find.

1813
01:23:48,400 --> 01:23:50,500
Yeah, I don't see any more code related questions.

1814
01:23:50,700 --> 01:23:53,800
So I guess I will just answer in 5 minutes.

1815
01:23:54,600 --> 01:23:57,200
Anything that was sort of code related at all.

1816
01:23:58,900 --> 01:23:59,800
So basically

1817
01:24:00,100 --> 01:24:05,000
Someone was asking about why we don't use a high-level more high-level

1818
01:24:05,100 --> 01:24:09,300
code and the answer is because the whole point of this project is to

1819
01:24:09,300 --> 01:24:13,500
show how to write everything involved in a game, not to use someone

1820
01:24:13,500 --> 01:24:14,200
else's COBRA.

1821
01:24:14,200 --> 01:24:16,400
They already wrote stuff for us, and then we use it.

1822
01:24:16,700 --> 01:24:18,900
So, that's why we're not using any higher level stuff.

1823
01:24:19,300 --> 01:24:22,500
But also, I think that a lot of higher level stuff is overrated.

1824
01:24:22,900 --> 01:24:25,500
I just don't think it's very good and it doesn't take very long to

1825
01:24:25,500 --> 01:24:26,900
write these things yourself.

1826
01:24:27,400 --> 01:24:28,800
I mean, here we are.

1827
01:24:28,800 --> 01:24:29,800
We're 30.

1828
01:24:30,000 --> 01:24:31,900
Three hours into it.

1829
01:24:31,900 --> 01:24:33,200
That's not even one workweek.

1830
01:24:33,200 --> 01:24:36,200
A work week is 40 hours were 33 hours into it.

1831
01:24:36,300 --> 01:24:39,600
By the time you get one work week in, we will basically have all of

1832
01:24:39,600 --> 01:24:40,900
our tile map stuff.

1833
01:24:40,900 --> 01:24:41,500
Suspect.

1834
01:24:41,500 --> 01:24:42,700
We'll have our movement stuff, kind of.

1835
01:24:42,700 --> 01:24:45,000
We have our win32 prototyping layer done.

1836
01:24:46,300 --> 01:24:48,800
By the time you get two weeks into it, which is 80 hours.

1837
01:24:49,200 --> 01:24:52,200
We'll probably have part of the renderer finished as well.

1838
01:24:52,200 --> 01:24:56,400
Unlike if you just think about it, like if you spend a week doing

1839
01:24:56,400 --> 01:24:59,100
these things and we need to do like four of them, whatever, you know.

1840
01:25:00,200 --> 01:25:02,800
In based on what ends up, being a month's worth of programming time.

1841
01:25:02,800 --> 01:25:05,500
All told will probably have most of all the stuff we would have gained

1842
01:25:05,500 --> 01:25:07,600
from a high-level language, but we wrote it all ourselves and it's

1843
01:25:07,600 --> 01:25:11,100
going to be better because it's not going to have all kinds of janky

1844
01:25:11,100 --> 01:25:12,000
crusty stuff in it.

1845
01:25:12,000 --> 01:25:15,400
Like that makes things slower or that, you know, doesn't work the way

1846
01:25:15,400 --> 01:25:18,500
that we want to or that we can't optimized for Speed all that sort of

1847
01:25:18,500 --> 01:25:18,900
stuff.

1848
01:25:19,500 --> 01:25:23,400
So, at the end of the day, I would like to program in high-level

1849
01:25:23,400 --> 01:25:23,800
languages.

1850
01:25:23,800 --> 01:25:24,300
Eventually.

1851
01:25:24,300 --> 01:25:26,000
It's just most of the high-level stuff that's out there.

1852
01:25:26,000 --> 01:25:29,800
Right now just isn't very good and so someday,

1853
01:25:29,900 --> 01:25:32,900
A, I feel like I will start programming in more higher level stuff,

1854
01:25:33,100 --> 01:25:35,100
but it's got to be a lot better than the high level stuff.

1855
01:25:35,100 --> 01:25:38,300
That's out there right now, like maybe John blows programming

1856
01:25:38,300 --> 01:25:39,600
language, for example, that he's working on.

1857
01:25:39,600 --> 01:25:42,200
Now will be something that I could get into, because it will allow me

1858
01:25:42,200 --> 01:25:45,500
to do more high-level stuff, but it won't ask me to sacrifice things

1859
01:25:45,900 --> 01:25:46,400
in that.

1860
01:25:46,400 --> 01:25:47,300
In that transition.

1861
01:25:47,400 --> 01:25:51,100
It'll just be high level when I want it, but it won't force me to

1862
01:25:51,100 --> 01:25:53,600
accept all the compromises that high-level things of forced me to

1863
01:25:53,600 --> 01:25:54,300
accept.

1864
01:25:59,500 --> 01:26:00,200
Oh, okay.

1865
01:26:00,200 --> 01:26:04,300
So got some new questions here, some of which are let's see here.

1866
01:26:09,700 --> 01:26:11,900
Why did you introduce M as a unit?

1867
01:26:12,500 --> 01:26:14,900
So the reason are integers, m is a unit is because we wanted something

1868
01:26:14,900 --> 01:26:20,000
that wasn't in pixels and M is the most standard SI unit to use for

1869
01:26:20,000 --> 01:26:20,300
Stuff.

1870
01:26:20,300 --> 01:26:22,300
Basically, you know, M.

1871
01:26:22,300 --> 01:26:26,900
KS is typically M kg s is a very typical convention to use.

1872
01:26:26,900 --> 01:26:30,100
And so I wanted a real world unit so that we would basically have a

1873
01:26:30,100 --> 01:26:32,700
way to sort of tie things back Loosely to the real world.

1874
01:26:32,700 --> 01:26:33,100
Obviously.

1875
01:26:33,100 --> 01:26:34,500
These characters are gonna be very cartoony.

1876
01:26:34,500 --> 01:26:36,400
So there's no way to really tie them back to the real world, but just

1877
01:26:36,400 --> 01:26:36,700
so that we're

1878
01:26:36,800 --> 01:26:38,400
In the ballpark, you know?

1879
01:26:38,400 --> 01:26:40,500
So that whatever our guys sizes are.

1880
01:26:40,500 --> 01:26:44,500
There's somewhere between you know, you know, three feet tall and 10

1881
01:26:44,500 --> 01:26:49,500
feet tall or something but not ridiculous like 100 feet tall in for a

1882
01:26:49,500 --> 01:26:52,500
kid or something like that so that we their physics will behave

1883
01:26:52,500 --> 01:26:52,900
properly.

1884
01:26:52,900 --> 01:26:55,900
If we Implement things like gravity and stuff, we can tune it close to

1885
01:26:55,900 --> 01:26:57,500
real world and so it feels better.

1886
01:26:58,200 --> 01:26:59,800
So that's why I introduced m

1887
01:27:00,000 --> 01:27:02,000
That basically, everything would be in a real world unit.

1888
01:27:04,400 --> 01:27:06,400
Will you be checking your code complexity and creating smaller

1889
01:27:06,400 --> 01:27:07,700
functions as necessary?

1890
01:27:08,000 --> 01:27:09,700
So we already do that all the time.

1891
01:27:10,000 --> 01:27:11,500
We've already done, lots of that.

1892
01:27:11,700 --> 01:27:14,200
If you've been watching the stream, we often times will take things

1893
01:27:14,200 --> 01:27:15,600
and break them out right now.

1894
01:27:15,600 --> 01:27:17,800
We're just kind of defining the spec for the engine.

1895
01:27:18,200 --> 01:27:21,300
So this code is just kind of waiting here for a bit.

1896
01:27:21,400 --> 01:27:23,800
When we're totally done with the town Maps up to my satisfaction.

1897
01:27:23,800 --> 01:27:25,700
It will get moved out into a new file.

1898
01:27:25,900 --> 01:27:28,400
That will basically be the spec for our tile map system.

1899
01:27:42,100 --> 01:27:43,300
Let's see.

1900
01:27:45,400 --> 01:27:46,700
Did I set up a Kickstarter?

1901
01:27:46,700 --> 01:27:47,300
No?

1902
01:27:50,300 --> 01:27:51,500
I have not set up a Kickstarter.

1903
01:27:51,500 --> 01:27:54,400
There is a patreon which I will point out at the end of the stream,

1904
01:27:54,400 --> 01:27:56,200
but there is, we do not have a Kickstarter.

1905
01:27:56,300 --> 01:27:58,200
There's nothing really to kick-start at the moment.

1906
01:28:01,100 --> 01:28:02,600
Let's see.

1907
01:28:04,300 --> 01:28:07,800
Let's see, anything else?

1908
01:28:09,300 --> 01:28:13,900
Wouldn't it be nice if tiles were 1.0 M instead of 1.4 meters?

1909
01:28:19,900 --> 01:28:22,800
Yeah, I mean maybe but I don't know.

1910
01:28:22,800 --> 01:28:26,100
I'd rather have the freedom to set the tile sizes to whatever we want.

1911
01:28:26,100 --> 01:28:27,900
Then have to constrain it to 1 meter.

1912
01:28:28,300 --> 01:28:28,900
I don't know.

1913
01:28:29,600 --> 01:28:32,400
It's interesting point though, but I don't I don't think I'm going to

1914
01:28:32,900 --> 01:28:34,800
I think I'd rather leave it because it's right now.

1915
01:28:34,800 --> 01:28:36,800
Everything's going to be in tiles, was just an offset from the tile

1916
01:28:36,800 --> 01:28:39,400
anyway, so it should be fine, but you're right.

1917
01:28:39,400 --> 01:28:40,000
It would be nicer.

1918
01:28:40,000 --> 01:28:41,100
If tiles were one meter.

1919
01:28:43,100 --> 01:28:44,100
It'd be a little cleaner.

1920
01:28:44,100 --> 01:28:44,700
I don't know.

1921
01:28:45,100 --> 01:28:46,100
We get think about it.

1922
01:28:46,100 --> 01:28:48,300
You could think about it since everything's parameterised off.

1923
01:28:48,300 --> 01:28:48,800
That currently.

1924
01:28:48,800 --> 01:28:49,600
Anyway, we're it's

1925
01:28:49,700 --> 01:28:54,200
Free for us to change it to something else so we could think about it.

1926
01:28:54,600 --> 01:28:56,400
All right, that is the end of the stream.

1927
01:28:56,400 --> 01:28:58,700
Ladies and gentlemen, thank you so much for joining me is been a

1928
01:28:58,700 --> 01:29:05,600
pleasure coding with you, as always, if you would like to follow along

1929
01:29:05,600 --> 01:29:07,200
with the source code at home.

1930
01:29:08,200 --> 01:29:08,700
Let me close.

1931
01:29:08,700 --> 01:29:10,300
Well, I got tons of stuff open here.

1932
01:29:10,500 --> 01:29:11,900
Close, close, everybody.

1933
01:29:11,900 --> 01:29:13,800
Everybody close down now, please.

1934
01:29:15,400 --> 01:29:17,200
Yes, too many things open.

1935
01:29:17,300 --> 01:29:19,500
All right, if you would like to follow,

1936
01:29:19,600 --> 01:29:21,700
Along with the code at home.

1937
01:29:21,700 --> 01:29:24,400
You can pre-order the game and get full access to the source code.

1938
01:29:24,400 --> 01:29:27,800
So everything that I work on gets uploaded right after we finish the

1939
01:29:27,800 --> 01:29:32,800
stream so you can download it every day and follow along at home.

1940
01:29:32,800 --> 01:29:35,400
You can go ahead and pre-order here at handmade hero dot-org.

1941
01:29:35,400 --> 01:29:38,400
We also have a patreon since someone was asking about that where you

1942
01:29:38,400 --> 01:29:40,800
can subscribe, if you just want to support the video series, you can

1943
01:29:40,800 --> 01:29:41,100
do that.

1944
01:29:41,100 --> 01:29:44,000
There's also a news and four of us page, which I highly recommend you

1945
01:29:44,000 --> 01:29:44,300
check out.

1946
01:29:44,300 --> 01:29:45,700
It's got a lot of good stuff on it.

1947
01:29:45,700 --> 01:29:49,000
It's got the schedule for the week posted usually on Monday for what

1948
01:29:49,000 --> 01:29:49,500
the rest of the

1949
01:29:49,700 --> 01:29:52,100
Will be if you want to know when we're going to be live on Twitch.

1950
01:29:52,300 --> 01:29:55,600
There's also an episode guide for helping you catch up with episodes

1951
01:29:55,600 --> 01:29:58,900
in the past that maybe that you have missed, there is a coding

1952
01:29:58,900 --> 01:29:59,800
resources section.

1953
01:30:00,000 --> 01:30:02,500
Has like a pork to Mac and a port to Linux and stuff.

1954
01:30:02,500 --> 01:30:05,500
So if you want to take a look at running on different platforms or

1955
01:30:05,500 --> 01:30:07,100
other sorts of guides that are available there.

1956
01:30:07,100 --> 01:30:07,800
That's a great place to go.

1957
01:30:07,800 --> 01:30:09,800
And finally, there's a Code discussion board where you can ask

1958
01:30:09,800 --> 01:30:13,700
questions about the code and talk to other people who are working on

1959
01:30:13,700 --> 01:30:13,900
it.

1960
01:30:14,000 --> 01:30:17,000
So if you're trying to learn from the series, I highly recommend going

1961
01:30:17,000 --> 01:30:17,100
there.

1962
01:30:17,100 --> 01:30:19,700
It's got a lot of resources that will help you.

1963
01:30:19,900 --> 01:30:22,800
So thank you everyone for joining me tomorrow.

1964
01:30:23,100 --> 01:30:29,100
I believe my post the schedule, I said tomorrow is going to be evening

1965
01:30:29,100 --> 01:30:29,500
again.

1966
01:30:30,000 --> 01:30:31,100
So eight pm are.

1967
01:30:31,100 --> 01:30:33,600
So we're in our standard slot tomorrow, 8:00 p.m.

1968
01:30:33,600 --> 01:30:37,500
Pacific Standard time and then our standard slot on Friday, as well,

1969
01:30:37,500 --> 01:30:41,000
10 a.m., Although I guess we moved it down from 11 to 10, but we're in

1970
01:30:41,000 --> 01:30:42,800
the morning on Friday as we normally are.

1971
01:30:43,000 --> 01:30:44,700
We always try to do one stream in the morning.

1972
01:30:44,800 --> 01:30:48,100
So so these two will be basically the same as they normally are during

1973
01:30:48,100 --> 01:30:48,400
the week.

1974
01:30:48,400 --> 01:30:50,900
But today was a special kind of early one for holiday hours.

1975
01:30:51,400 --> 01:30:52,800
So yeah, tomorrow night 8:00 p.m.

1976
01:30:52,800 --> 01:30:53,300
PST.

1977
01:30:53,300 --> 01:30:57,100
I hope to see you there and that is it for today.

1978
01:30:57,100 --> 01:30:59,800
Have a happy New Years, everyone, if you

1979
01:31:00,000 --> 01:31:02,500
Are in a part of the world that celebrates mirrors today.

1980
01:31:02,800 --> 01:31:04,400
So thank you everyone for joining us.

1981
01:31:04,500 --> 01:31:06,600
And, and I will hopefully see you tomorrow.

