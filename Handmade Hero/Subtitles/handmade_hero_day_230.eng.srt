1
00:00:01,600 --> 00:00:04,300
Hello, everyone, and welcome to handmade hero.

2
00:00:04,300 --> 00:00:06,800
The show Rico to complete game live on stream.

3
00:00:07,400 --> 00:00:12,900
This is the second day of sorting, because yesterday, we went ahead

4
00:00:12,900 --> 00:00:14,900
and implemented sorting in the renderer, because it's something that

5
00:00:14,900 --> 00:00:16,900
we've needed to do ever since the beginning, really.

6
00:00:16,900 --> 00:00:19,700
But it just was never the right time, and it finally was the right

7
00:00:19,700 --> 00:00:24,800
time, for whatever reason, just got the whim, the urge to put sorting

8
00:00:24,800 --> 00:00:25,100
in.

9
00:00:25,100 --> 00:00:28,800
And so, we did that yesterday, but we did it with an extremely simple

10
00:00:28,800 --> 00:00:30,200
sort one.

11
00:00:30,400 --> 00:00:37,500
Has a few problems with its runtime potentially, although it's hard to

12
00:00:37,500 --> 00:00:38,300
say definitively.

13
00:00:38,300 --> 00:00:40,600
So we'll kind of talk about that a little bit more later on.

14
00:00:41,300 --> 00:00:44,400
But we did a very simple sort yesterday and we talked about the fact

15
00:00:44,400 --> 00:00:48,800
that what we really need to do in order to use any sort, even our

16
00:00:48,800 --> 00:00:51,900
simple one is, we need to have a thing called a sort key.

17
00:00:52,100 --> 00:00:55,400
And the sort key is the thing that allows us to know what elements go

18
00:00:55,400 --> 00:00:58,200
in front of what other elements when we are rendering.

19
00:00:59,200 --> 00:01:02,300
And we did that but we didn't really think too hard about it.

20
00:01:02,300 --> 00:01:04,900
We just basically putting a stand in one so that we could work on the

21
00:01:04,900 --> 00:01:05,500
sort.

22
00:01:07,000 --> 00:01:08,500
And we got the start working, just fine.

23
00:01:08,500 --> 00:01:13,600
But now it's time for us to take a closer look at that sort key and

24
00:01:13,600 --> 00:01:17,300
actually make something that's going to work a little bit better for

25
00:01:17,400 --> 00:01:20,900
what we actually want to do or that's going to give us the features

26
00:01:20,900 --> 00:01:21,600
that we need.

27
00:01:21,600 --> 00:01:22,800
However you want to look at it.

28
00:01:24,000 --> 00:01:31,100
So, let's let's talk for a second about what's going on with this sort

29
00:01:31,100 --> 00:01:31,400
key.

30
00:01:33,000 --> 00:01:33,900
This makes sense.

31
00:01:34,600 --> 00:01:40,700
So essentially what we've got is we have a problem of needing to sort

32
00:01:40,700 --> 00:01:45,800
our objects in two different ways really here on Day 2, 30.

33
00:01:47,400 --> 00:01:51,200
So, let's talk about the sort key for rendering.

34
00:01:56,500 --> 00:01:59,500
So thus our key for rendering needs to do two things for us.

35
00:01:59,500 --> 00:02:04,700
First of all, it needs to be able to do our sort of our fake, you

36
00:02:04,700 --> 00:02:08,500
know, our fake sort of Staggering of things as they get closer to the

37
00:02:08,500 --> 00:02:09,000
camera.

38
00:02:09,199 --> 00:02:12,600
So as we have these sorts of things where we got trees here and trees

39
00:02:12,600 --> 00:02:16,200
here, you know, and we've got our little dude who's walking around,

40
00:02:17,100 --> 00:02:21,200
obviously, we want this to draw so that this draws first, this dress,

41
00:02:21,200 --> 00:02:23,300
s this draws third, right?

42
00:02:23,700 --> 00:02:25,600
So, you know, it's one, two,

43
00:02:25,700 --> 00:02:27,800
In our current skin because we want to draw back to front at the

44
00:02:27,800 --> 00:02:30,200
moment, if we wanted to draw front to back which, you know, we might

45
00:02:30,200 --> 00:02:33,200
switch the render to do something like that later, who knows we would

46
00:02:33,200 --> 00:02:36,400
need the opposite order, but either way we want this order and then

47
00:02:36,400 --> 00:02:38,600
it's just a question of whether we Traverse it this way or that way,

48
00:02:38,600 --> 00:02:40,600
but this is the order that it's always going to go in.

49
00:02:43,300 --> 00:02:43,600
Okay?

50
00:02:43,600 --> 00:02:46,800
So we need to do that and that's a simple matter of looking at the

51
00:02:46,800 --> 00:02:48,700
screen, space y, right?

52
00:02:49,300 --> 00:02:52,600
That's the screen space y-coordinate essentially as it goes up and

53
00:02:52,600 --> 00:02:55,500
down but things are not quite so

54
00:02:55,600 --> 00:02:59,900
so simple, because what we don't really know is if

55
00:03:00,000 --> 00:03:05,100
Was actually some elevation change involved as well in the placement

56
00:03:05,100 --> 00:03:09,300
of these entities, because we might want to do things like, have

57
00:03:09,800 --> 00:03:11,700
multiple stacks of things.

58
00:03:11,700 --> 00:03:15,900
So, for example, you know, we've got house or something and there's

59
00:03:15,900 --> 00:03:18,900
the upper level of the house and then there's the lower level of the

60
00:03:18,900 --> 00:03:19,900
house, right?

61
00:03:20,000 --> 00:03:24,500
And if perchance you can see through like a hole in the floor, or

62
00:03:24,500 --> 00:03:27,100
something like that, or a stairwell, if you can see down to the lower

63
00:03:27,100 --> 00:03:29,600
region, obviously, all of the

64
00:03:30,000 --> 00:03:30,900
Is that are down here.

65
00:03:30,900 --> 00:03:36,200
Need to sort of the things, I'm sorry need to sort like further back,

66
00:03:36,200 --> 00:03:39,700
they need to be drawn earlier than the things that are up here no

67
00:03:39,700 --> 00:03:41,800
matter where the thing is.

68
00:03:41,800 --> 00:03:46,600
So even if its y-coordinate, like let's say it was here and there's

69
00:03:46,600 --> 00:03:47,600
another thing that's here.

70
00:03:47,600 --> 00:03:51,100
So this this thing is, or I should say here.

71
00:03:51,700 --> 00:03:55,200
So this thing on the floor, like this thing here, there's a box on the

72
00:03:55,200 --> 00:03:58,700
top floor and then here there's another box on the bottom floor.

73
00:03:59,100 --> 00:03:59,800
This things

74
00:03:59,900 --> 00:04:02,500
I mean, why would obviously be closer, right?

75
00:04:02,500 --> 00:04:05,000
It's going to be further towards the camera.

76
00:04:05,100 --> 00:04:06,700
So we draw this thing.

77
00:04:07,500 --> 00:04:10,500
Last normally, if we were going to all these two, we draw this one

78
00:04:10,500 --> 00:04:12,300
first and this one second, right?

79
00:04:13,000 --> 00:04:14,800
But that's not really correct.

80
00:04:14,900 --> 00:04:18,000
Because we know that this thing is actually always going to be on top

81
00:04:18,000 --> 00:04:19,399
because it's on this higher plane.

82
00:04:19,399 --> 00:04:21,700
It's on this thing that's stacked on top and that's always going to be

83
00:04:21,700 --> 00:04:25,500
closer to the camera and that was that becomes a problem.

84
00:04:25,500 --> 00:04:28,500
As this thing is closer to this thing as it gets down to here, we're

85
00:04:28,500 --> 00:04:29,800
going to have it so that they would occur.

86
00:04:29,900 --> 00:04:30,900
Glued in properly.

87
00:04:31,100 --> 00:04:35,500
So we have to take Z into account as well as why we can't just use one

88
00:04:36,000 --> 00:04:36,800
or the other.

89
00:04:37,000 --> 00:04:40,700
And you can actually see this happen even on a single plane.

90
00:04:40,700 --> 00:04:42,800
And this is the problem that we were having with the ground chunks,

91
00:04:42,800 --> 00:04:45,800
which is that if you take a look at the ground chunks, you know, a

92
00:04:45,800 --> 00:04:50,600
ground chunk might be some patch like, you know, like a little square

93
00:04:50,600 --> 00:04:51,800
on the ground like this.

94
00:04:52,600 --> 00:04:55,800
And then there might be somebody who's standing on that, right?

95
00:04:55,800 --> 00:04:58,500
So if we have like a thing that's here, like that's on top of that

96
00:04:58,500 --> 00:04:59,800
ground patch, all these

97
00:05:00,000 --> 00:05:04,200
We know that we would always draw this ground patch first because

98
00:05:04,200 --> 00:05:06,000
actually all the ground gets drawn before.

99
00:05:06,000 --> 00:05:09,600
Anything else gets drawn the ground, never occludes, somebody who's

100
00:05:09,600 --> 00:05:10,500
standing on it.

101
00:05:10,500 --> 00:05:12,600
It doesn't even matter if they were all the way back here.

102
00:05:12,600 --> 00:05:15,800
It's still would never really be in front of this guy, right?

103
00:05:15,900 --> 00:05:20,100
They don't overlap so it doesn't matter but even if we were to

104
00:05:20,100 --> 00:05:23,000
consider that case, logically like it extended all the way back here

105
00:05:23,000 --> 00:05:27,300
we still render the ground last underneath.

106
00:05:27,700 --> 00:05:29,800
So we drench the ground first, then we'd run to the guy on

107
00:05:29,900 --> 00:05:30,800
Top of it, right?

108
00:05:32,400 --> 00:05:37,600
So that's a problem because normally, if all we were to use was the Z

109
00:05:37,600 --> 00:05:40,900
and these guys are both have the same Z and then the, why the ground

110
00:05:40,900 --> 00:05:43,100
patches will come out on top.

111
00:05:43,500 --> 00:05:46,400
And so as you can see again, there is really what we need is.

112
00:05:46,400 --> 00:05:49,800
We need a more sophisticated concept of that.

113
00:05:49,800 --> 00:05:53,700
Sort key for our two and a half D stuff and really I think what we

114
00:05:53,700 --> 00:05:59,500
probably want to do is treat Z as something a little bit more magical

115
00:05:59,500 --> 00:05:59,700
than

116
00:06:00,000 --> 00:06:02,600
I've been treating it so far.

117
00:06:06,500 --> 00:06:12,200
I think what we probably need to do is make Z be purely semantic and

118
00:06:12,200 --> 00:06:14,500
not be an actual continuous value.

119
00:06:15,200 --> 00:06:20,900
And the reason that I say that is because no amount of of fussing with

120
00:06:20,900 --> 00:06:24,800
the actual sort orders of these things is going to make it.

121
00:06:24,800 --> 00:06:28,900
Do the right thing in all cases, other than simply saying ground

122
00:06:28,900 --> 00:06:32,300
chunks always render before anything that standing on the ground,

123
00:06:32,500 --> 00:06:33,100
right?

124
00:06:33,300 --> 00:06:34,400
I mean, that's just

125
00:06:35,700 --> 00:06:36,800
That's just how it is.

126
00:06:37,800 --> 00:06:40,300
So what we need to do is we need to consider that a little more

127
00:06:40,300 --> 00:06:41,600
carefully, right?

128
00:06:42,600 --> 00:06:46,300
And one thing that we could do for example is we could call all of

129
00:06:46,300 --> 00:06:47,100
these things.

130
00:06:47,300 --> 00:06:51,200
We could call these at some Z like let's say this is equal 0 and then

131
00:06:51,200 --> 00:06:54,400
we could call things that are standing on the ground at Z equals 1 and

132
00:06:54,400 --> 00:06:57,700
then we could call anything that's flying at Z equals 2 or something

133
00:06:57,700 --> 00:06:58,400
like that.

134
00:06:58,700 --> 00:06:59,200
Although I guess.

135
00:06:59,200 --> 00:07:00,300
No we don't really want to do that.

136
00:07:00,300 --> 00:07:02,900
That's these are still even if it's flying as long as it's still in

137
00:07:02,900 --> 00:07:05,800
the same plane it should still be at Z equals 1 and then anything I

138
00:07:05,800 --> 00:07:08,900
guess that's up kind of that's that's on top of these things.

139
00:07:08,900 --> 00:07:12,200
Is that Z equals to on that floor and then

140
00:07:12,400 --> 00:07:14,800
This whole process would like repeat again.

141
00:07:14,900 --> 00:07:18,800
So then we'd have Z equals 3 would be if there's a floor above this,

142
00:07:18,800 --> 00:07:22,300
that's their Z equals 4 would be something that's standing on it and

143
00:07:22,300 --> 00:07:22,600
so on.

144
00:07:22,600 --> 00:07:28,100
So we just have our Stacks, have this Z to tell us how they stack up,

145
00:07:28,100 --> 00:07:28,400
right?

146
00:07:28,400 --> 00:07:31,200
And similarly, we'd have here, you know, this would be negative 1 or

147
00:07:31,200 --> 00:07:32,300
negative 2 or whatever.

148
00:07:32,500 --> 00:07:37,100
So we'd have a semantic Z value, that set very specifically, and

149
00:07:37,100 --> 00:07:40,900
doesn't really have anything to do with any continuous value that

150
00:07:40,900 --> 00:07:42,200
we're tracking, whether it's physics.

151
00:07:42,300 --> 00:07:43,100
Or anything else.

152
00:07:43,700 --> 00:07:44,900
It doesn't matter at all.

153
00:07:46,100 --> 00:07:50,100
And the interesting thing about this is I also feel like this is

154
00:07:50,100 --> 00:07:54,100
really what we kind of want to be going towards in general for our

155
00:07:54,100 --> 00:07:56,800
system because we played around with doing things in full 3d.

156
00:07:58,000 --> 00:08:00,800
And what I think we found over and over again because we've run into

157
00:08:00,800 --> 00:08:05,600
this many times is that it just doesn't work that well to treat things

158
00:08:05,600 --> 00:08:09,300
as full 3d inside a game that is inherently not full 3d.

159
00:08:09,900 --> 00:08:13,400
And so I feel like at some point we need to do a appropriate amount of

160
00:08:13,400 --> 00:08:15,800
back off where we say, okay, we're not really.

161
00:08:15,900 --> 00:08:21,100
Using a real Z coordinate, you know, we've got something else which is

162
00:08:21,100 --> 00:08:25,700
like X Y on the ground and then Z that's off the ground but it's still

163
00:08:25,700 --> 00:08:27,800
just like how you're hovering or something.

164
00:08:27,800 --> 00:08:28,300
Right.

165
00:08:28,400 --> 00:08:32,299
And then we actually have like what your plane is or something right?

166
00:08:32,299 --> 00:08:34,900
Which is this thing over here, you know what I mean?

167
00:08:35,200 --> 00:08:39,600
And this is what we track this never is involved in any kind of

168
00:08:39,600 --> 00:08:41,000
perspective, right?

169
00:08:41,100 --> 00:08:44,600
And you know so if something is floating up and above something else

170
00:08:44,600 --> 00:08:45,700
and going up and down

171
00:08:45,900 --> 00:08:50,500
No, it never goes in and out of whenever it does any perspective?

172
00:08:50,500 --> 00:08:53,200
Foreshortening it just hovers there, right?

173
00:08:54,500 --> 00:08:56,900
But then this does so anything.

174
00:08:56,900 --> 00:08:59,500
That's using that plane value, right?

175
00:08:59,500 --> 00:08:59,700
That

176
00:09:00,000 --> 00:09:03,500
In value does create the perspective foreshortening so that if we have

177
00:09:03,500 --> 00:09:06,800
a level above, you know, we want to do something like that that works.

178
00:09:07,400 --> 00:09:11,300
Now, the reason that we were trying to avoid doing something like this

179
00:09:11,700 --> 00:09:15,000
was, because we wanted to try doing some things where we had

180
00:09:15,000 --> 00:09:19,700
continuous motion up and down a stairwell, right?

181
00:09:20,300 --> 00:09:22,500
And we actually implemented that, right?

182
00:09:22,500 --> 00:09:28,300
You can you can actually see that happening here if I

183
00:09:31,200 --> 00:09:32,400
Go into.

184
00:09:33,800 --> 00:09:38,800
The code here and turn off the ground chunk thing that we were working

185
00:09:38,800 --> 00:09:39,300
on there.

186
00:09:39,300 --> 00:09:40,400
Let's see.

187
00:09:40,500 --> 00:09:41,700
Where was that?

188
00:09:43,000 --> 00:09:45,000
Where was that?

189
00:09:46,000 --> 00:09:50,100
My brain still always wants to look for handmade World mode stuffy and

190
00:09:50,100 --> 00:09:52,300
handmade dot CPP because that's where it used to be.

191
00:09:53,800 --> 00:09:54,200
Yeah.

192
00:09:54,600 --> 00:09:56,900
Anyway, ground chunk.

193
00:09:57,000 --> 00:09:59,400
So let's see here right there.

194
00:10:00,000 --> 00:10:02,200
So in this, right?

195
00:10:02,200 --> 00:10:05,600
If I am to take these out for a minute,

196
00:10:09,500 --> 00:10:10,700
Let's see here.

197
00:10:11,000 --> 00:10:11,700
Run that

198
00:10:16,500 --> 00:10:17,200
There we go.

199
00:10:18,300 --> 00:10:20,600
So, if we are to look at this, right?

200
00:10:21,000 --> 00:10:22,700
You can see that we actually implemented.

201
00:10:22,700 --> 00:10:26,100
Continuous motion between the two levels just fine, right?

202
00:10:26,400 --> 00:10:29,800
And now that we have sorting it, even all works correctly as well.

203
00:10:29,900 --> 00:10:33,700
Like you can see that the top room sorts on top of the bottom room and

204
00:10:34,000 --> 00:10:36,300
all that other kinds of fanciness.

205
00:10:36,800 --> 00:10:37,900
So that's all fine.

206
00:10:38,300 --> 00:10:43,700
But, you know, the problem with doing that is that when we introduced

207
00:10:43,700 --> 00:10:46,100
this concept that we can smoothly transition

208
00:10:46,300 --> 00:10:50,300
In the two levels, we introduce just a whole other series of headaches

209
00:10:50,500 --> 00:10:53,800
which is that what happens to the guy when he's standing like just

210
00:10:53,800 --> 00:10:55,400
right in between there?

211
00:10:55,500 --> 00:11:01,200
You know we don't necessarily have a real concrete idea of what's

212
00:11:01,200 --> 00:11:05,300
supposed to happen and so I don't know whether we want to actually

213
00:11:05,300 --> 00:11:06,300
handle that or not.

214
00:11:10,400 --> 00:11:15,700
On the plus side we can handle literally just you doing it right?

215
00:11:15,700 --> 00:11:18,500
We can special case you doing it because that's not that hard.

216
00:11:18,700 --> 00:11:22,200
The problem would be if we allowed everything else to work as well,

217
00:11:22,200 --> 00:11:25,300
like Monsters being able to like fly up and down the stairwells and

218
00:11:25,300 --> 00:11:26,100
stuff like that.

219
00:11:26,400 --> 00:11:29,500
I just don't know about that because if we allow all of that stuff to

220
00:11:29,500 --> 00:11:34,500
happen then we really do need to remain basically entirely in 3D all

221
00:11:34,500 --> 00:11:38,600
the time and it becomes very difficult for the renderer to figure out

222
00:11:38,600 --> 00:11:39,300
what to do.

223
00:11:39,400 --> 00:11:40,000
Because it doesn't

224
00:11:40,200 --> 00:11:44,400
Actually have 3D models for anything so it's constantly got to make

225
00:11:44,400 --> 00:11:48,900
these decisions without actually the information that it needs, right?

226
00:11:49,500 --> 00:11:51,600
So I don't really know what we should do about that.

227
00:11:51,600 --> 00:11:55,500
I don't, but I'm just kind of pointing out at this point.

228
00:11:56,000 --> 00:11:59,700
How it feels like we need to do something about that situation.

229
00:12:00,000 --> 00:12:03,400
Probably, we're getting to the point since we're running out of like

230
00:12:03,400 --> 00:12:05,600
Engine, speculatively things to do, we kind of had to start

231
00:12:05,600 --> 00:12:07,300
implementing specific game.

232
00:12:07,300 --> 00:12:13,800
Things to move forwards, we need to figure out some way that we're

233
00:12:13,800 --> 00:12:17,500
going to marry those two and I don't really know exactly what it is.

234
00:12:17,500 --> 00:12:20,900
But with something like the sort key, we can kind of see where this is

235
00:12:20,900 --> 00:12:22,900
already important.

236
00:12:22,900 --> 00:12:27,300
Because you know, we've got this sort of nasty situation where we sort

237
00:12:27,300 --> 00:12:29,400
of have all these things that need to

238
00:12:30,000 --> 00:12:35,000
Need to work within this framework so I don't know.

239
00:12:36,500 --> 00:12:39,500
I don't really know how we would deal with that.

240
00:12:39,500 --> 00:12:43,900
I guess one thing we could do to support this and maybe this just

241
00:12:43,900 --> 00:12:49,200
works is if you have a ground position that is full 3d, we just snap

242
00:12:49,200 --> 00:12:52,000
you to the closest one for your sort key.

243
00:12:52,900 --> 00:12:53,800
That may just work.

244
00:12:53,900 --> 00:12:58,200
I don't know if it does or if it doesn't, but it might, it seems like

245
00:12:58,200 --> 00:12:59,100
it could.

246
00:13:00,100 --> 00:13:03,700
And to be honest, snapping probably isn't going to work.

247
00:13:03,800 --> 00:13:07,300
What we would probably have to do is we'd probably want to do

248
00:13:07,300 --> 00:13:12,200
something like a ceiling, a slightly biased ceiling because like, for

249
00:13:12,200 --> 00:13:15,400
example, when you start walking up the stairwell, the instant you get

250
00:13:15,400 --> 00:13:17,200
a little bit of this up to stairwell.

251
00:13:17,400 --> 00:13:20,600
You need to start a cluding things that are

252
00:13:22,200 --> 00:13:23,700
On the one, a front of you.

253
00:13:23,800 --> 00:13:24,200
Mmm.

254
00:13:25,100 --> 00:13:25,700
Yeah, I don't know.

255
00:13:25,700 --> 00:13:28,000
Like, I just want to make sure everyone understands.

256
00:13:28,000 --> 00:13:30,800
It's like, I hope it doesn't sound like, I'm just throwing over

257
00:13:30,800 --> 00:13:35,400
nothing, but this really is just a really nasty problem when you have

258
00:13:35,400 --> 00:13:37,800
to deal with with sudo stuff.

259
00:13:37,800 --> 00:13:38,900
And I guess there's other ways.

260
00:13:38,900 --> 00:13:40,100
We might be able to deal with it to.

261
00:13:40,100 --> 00:13:45,600
We could do sort of a zebra free thing with it I guess.

262
00:13:45,600 --> 00:13:46,200
I don't know.

263
00:13:46,200 --> 00:13:48,900
I don't know that we want to get into that but I'll talk about that in

264
00:13:48,900 --> 00:13:49,400
a second.

265
00:13:49,700 --> 00:13:51,900
Alright so here is the the

266
00:13:52,000 --> 00:13:53,600
That I'm thinking of in my head.

267
00:13:54,300 --> 00:13:56,600
So let's suppose that we took the case of the stairwell.

268
00:13:57,400 --> 00:13:59,800
And so, here's the top floor, right?

269
00:13:59,800 --> 00:14:01,700
And here is the stairwell going down

270
00:14:03,900 --> 00:14:04,900
Then we got the bottom floor.

271
00:14:05,800 --> 00:14:11,600
So as this person is coming this way, obviously this part should

272
00:14:11,600 --> 00:14:13,500
always be occluding him, right?

273
00:14:13,600 --> 00:14:18,000
The top floor should be including him as he moves this way until he

274
00:14:18,000 --> 00:14:20,200
moves into here at least, right?

275
00:14:20,200 --> 00:14:22,200
So anytime you hear he's got to be included.

276
00:14:22,500 --> 00:14:26,600
But then as he starts walking up here, when is ground point, is like

277
00:14:26,600 --> 00:14:30,600
there when you standing roughly on that, his head is definitely going

278
00:14:30,600 --> 00:14:33,000
to come up above.

279
00:14:34,800 --> 00:14:36,500
It's going to like poke up, right?

280
00:14:36,600 --> 00:14:39,800
And now it is occluding things that are on that plane.

281
00:14:40,300 --> 00:14:46,200
So there's no single rule that says exactly what has to happen.

282
00:14:47,900 --> 00:14:51,600
But I think something like as soon as I'm standing on the stairwell,

283
00:14:51,900 --> 00:14:57,300
I'm going to occlude anything on the I'm technically like on the next

284
00:14:57,400 --> 00:14:58,400
level, right?

285
00:14:58,500 --> 00:14:59,900
Because as soon as I'm standing here,

286
00:15:00,000 --> 00:15:02,200
I think you want to start processing in that way.

287
00:15:02,600 --> 00:15:03,700
I suspect that works.

288
00:15:03,700 --> 00:15:04,400
I don't really know.

289
00:15:05,900 --> 00:15:08,300
And so the other thing that I was going to say, is another thing that

290
00:15:08,300 --> 00:15:13,000
you could do in theory is if you use a z-buffer for rendering, I know

291
00:15:13,000 --> 00:15:16,300
there's people who try tricks of like, making everything actually

292
00:15:16,300 --> 00:15:18,100
looks slanted from the side.

293
00:15:18,700 --> 00:15:23,500
So you know, you look at on and it's and here is your guy and he's a,

294
00:15:23,600 --> 00:15:27,500
you know, he's a little sprite card like this, you know, and there he

295
00:15:27,500 --> 00:15:27,900
is.

296
00:15:28,100 --> 00:15:29,200
And we render them, right?

297
00:15:29,200 --> 00:15:29,900
And this is obviously

298
00:15:30,000 --> 00:15:30,700
SLI all transparent.

299
00:15:30,700 --> 00:15:34,300
So you don't see it but when you look from the side, it's actually

300
00:15:34,300 --> 00:15:35,700
slanted like this.

301
00:15:35,700 --> 00:15:39,900
And the reason that that helps out is because it makes it so that the

302
00:15:39,900 --> 00:15:44,500
guy gets higher and further back as he goes which makes it a little

303
00:15:44,500 --> 00:15:50,600
bit easier for it to to sort situations like this where part of him

304
00:15:50,600 --> 00:15:53,300
should be above stuff but maybe part of him should be below stuff.

305
00:15:53,300 --> 00:15:57,500
It's again, it's kind of a weird trick that they use for like two and

306
00:15:57,500 --> 00:15:58,800
a half D sorts of games.

307
00:15:58,800 --> 00:15:59,700
It's something.

308
00:16:00,000 --> 00:16:01,900
But I don't think something we really want to get into.

309
00:16:03,500 --> 00:16:06,400
So yeah, so I feel like we could do something like that.

310
00:16:07,400 --> 00:16:10,800
Not this something where we just say like okay we could still preserve

311
00:16:10,800 --> 00:16:13,400
some continuous motion there and maybe we're tracking the motion, but

312
00:16:13,400 --> 00:16:18,000
as soon as we go to render, we immediately snap that to whatever that

313
00:16:18,000 --> 00:16:21,900
sorting plane is, that gets snapped in some kind of a, like,

314
00:16:21,900 --> 00:16:26,300
discretized way so that the planes of Z are actually known in some

315
00:16:26,300 --> 00:16:28,000
very specific fashion.

316
00:16:28,900 --> 00:16:31,100
I don't know that just seems like something that we probably want to

317
00:16:31,100 --> 00:16:31,700
be able to do.

318
00:16:31,700 --> 00:16:32,200
I don't know.

319
00:16:32,200 --> 00:16:33,000
And again the same

320
00:16:33,200 --> 00:16:35,700
True for the for the ground chunks.

321
00:16:35,700 --> 00:16:40,200
Those would want to be, you know, specifically set to occur in a very

322
00:16:40,200 --> 00:16:43,000
specific plane which is like the underlying ground plane.

323
00:16:43,000 --> 00:16:46,800
Not the things that are standing up on their, on their end, right?

324
00:16:47,600 --> 00:16:49,200
And similarly, like this thing,

325
00:16:50,600 --> 00:16:53,100
This this solution that I was sort of alluding to here where you have

326
00:16:53,100 --> 00:16:57,000
kind of things that stand up like that, the ground chunks would be

327
00:16:57,000 --> 00:16:58,600
lying down flat, right?

328
00:16:58,700 --> 00:17:01,800
And so, this would include the ground chunk properly, even though

329
00:17:01,800 --> 00:17:04,500
they're at the same Z, because one is standing upright and one is

330
00:17:04,500 --> 00:17:05,200
lying down.

331
00:17:07,400 --> 00:17:09,800
That's all anyway.

332
00:17:16,200 --> 00:17:17,300
Ignoring that.

333
00:17:19,000 --> 00:17:22,700
For now, we need to start moving towards something where we can get

334
00:17:22,700 --> 00:17:24,300
the that sorting stuff work properly.

335
00:17:24,300 --> 00:17:27,400
And as you can sort of see when we're doing a rendering, we kind of

336
00:17:27,400 --> 00:17:29,700
would need to know even if we were going to do a system like the

337
00:17:29,700 --> 00:17:30,600
Tilted card thing.

338
00:17:30,900 --> 00:17:34,500
But certainly also if we're going to use sort keys that do some kind

339
00:17:34,500 --> 00:17:38,200
of magical stuff there, where they've got more information them, we

340
00:17:38,200 --> 00:17:42,900
need to know for anything we're drawing which type of thing.

341
00:17:42,900 --> 00:17:45,400
It is and we sort of talked about this before.

342
00:17:46,700 --> 00:17:47,400
What did I do?

343
00:17:47,900 --> 00:17:48,400
I don't know what you're

344
00:17:48,600 --> 00:17:49,100
Happened.

345
00:17:49,200 --> 00:17:50,900
I have no idea what just happened.

346
00:17:52,000 --> 00:17:54,700
We ran out of size for our push buffer.

347
00:17:55,600 --> 00:17:56,600
How is that possible?

348
00:17:57,600 --> 00:17:58,600
What did we do?

349
00:18:02,200 --> 00:18:02,700
That's right.

350
00:18:02,700 --> 00:18:03,200
Interesting.

351
00:18:06,300 --> 00:18:07,200
Let's take a look.

352
00:18:07,800 --> 00:18:08,800
Push bitmap.

353
00:18:09,200 --> 00:18:10,500
Debug Tech Stop.

354
00:18:12,700 --> 00:18:15,700
Hmm, what were we displaying?

355
00:18:21,000 --> 00:18:22,300
That's kind of interesting, right?

356
00:18:22,300 --> 00:18:26,400
Inside our debug and frame end text out thing.

357
00:18:26,400 --> 00:18:29,400
That just displays it, we ran out of room in the push buffer for a bit

358
00:18:29,400 --> 00:18:31,800
Maps which is kind of odd.

359
00:18:32,700 --> 00:18:35,500
I'm not really sure how we have that many fonts.

360
00:18:36,300 --> 00:18:37,100
Let's take a look.

361
00:18:39,400 --> 00:18:41,000
I'm interested to see what this says.

362
00:18:44,100 --> 00:18:44,800
Let's see.

363
00:18:44,800 --> 00:18:46,800
Sword entry at push before element.

364
00:18:46,800 --> 00:18:47,100
Count.

365
00:18:47,100 --> 00:18:48,400
97.

366
00:18:50,000 --> 00:18:51,200
How big are those tiles?

367
00:18:51,200 --> 00:18:53,600
Sword entries, and how big is the max put Versailles?

368
00:18:53,600 --> 00:18:54,700
How what?

369
00:19:00,900 --> 00:19:02,700
What, what are we what?

370
00:19:05,500 --> 00:19:06,700
How is that possible?

371
00:19:07,500 --> 00:19:10,600
That's we must be initializing this value totally wrong.

372
00:19:11,500 --> 00:19:12,000
Look at that.

373
00:19:12,000 --> 00:19:13,900
There's no way that could possibly be true.

374
00:19:17,300 --> 00:19:18,800
I know what their problem is.

375
00:19:19,700 --> 00:19:21,700
We never actually clear that.

376
00:19:22,500 --> 00:19:23,100
Do we

377
00:19:26,600 --> 00:19:28,200
Can allocate render group?

378
00:19:29,900 --> 00:19:31,100
If I could go the right file.

379
00:19:34,200 --> 00:19:37,800
We never actually reset this stuff, which, which actually brings up a

380
00:19:37,800 --> 00:19:42,200
good point, which is we should probably keep track of all the stuff

381
00:19:42,200 --> 00:19:46,400
that needs to get reset essentially.

382
00:19:46,400 --> 00:19:48,200
Yes.

383
00:19:48,200 --> 00:19:53,900
Oh, like, because when we do, when we render all our stuff and we do

384
00:19:53,900 --> 00:19:57,600
an end render, doesn't that we reset the push buffer but we're not

385
00:19:57,600 --> 00:19:58,800
resetting the tiled entries.

386
00:19:58,800 --> 00:20:00,400
So did you guys see what was happening there?

387
00:20:00,400 --> 00:20:03,300
Basically, like our sort just kept getting bigger and bigger and

388
00:20:03,300 --> 00:20:04,100
bigger, and bigger and bigger.

389
00:20:04,300 --> 00:20:08,300
And bigger and bigger forever which is kind of hilarious.

390
00:20:08,500 --> 00:20:11,400
That would also explain why our frame time was slower potentially

391
00:20:15,300 --> 00:20:16,500
Yeah, hold on a second.

392
00:20:17,100 --> 00:20:18,000
Let's take a look here.

393
00:20:18,300 --> 00:20:19,700
I want to show you guys what I mean.

394
00:20:20,200 --> 00:20:22,900
So here's our push buffer element count, right?

395
00:20:22,900 --> 00:20:27,200
And, you know, in allocate render group, we were setting it here and

396
00:20:27,200 --> 00:20:29,700
we were also setting sort entry at

397
00:20:31,500 --> 00:20:33,300
These things go together, right?

398
00:20:35,900 --> 00:20:38,100
Meaning this stuff all has to get set this way.

399
00:20:38,200 --> 00:20:42,900
You'll have to be kind of initialized this way every time, but I

400
00:20:42,900 --> 00:20:47,000
believe when in N render, yeah, as you can see, an end render.

401
00:20:47,100 --> 00:20:50,800
We actually reset this stuff, but we didn't actually reset the other

402
00:20:50,800 --> 00:20:51,400
value.

403
00:20:51,600 --> 00:20:55,300
And so I feel like we want to do something where that's just like to

404
00:20:55,300 --> 00:20:58,600
avoid that kind of situation because we could accidentally forget that

405
00:20:58,600 --> 00:20:59,200
again.

406
00:21:00,300 --> 00:21:04,900
I think we want to do like an initialized push buffer value or render

407
00:21:04,900 --> 00:21:06,100
values or something.

408
00:21:06,300 --> 00:21:09,900
We're like clear render values, something like that.

409
00:21:10,100 --> 00:21:13,300
I feel like we want to do something like that because otherwise we

410
00:21:13,300 --> 00:21:16,900
could make that that's a mistake like many times, right?

411
00:21:17,400 --> 00:21:22,300
So what I'd like to do is gather up all of these and and maybe see I

412
00:21:22,300 --> 00:21:26,200
don't know if there's other ones of these that we would want to treat

413
00:21:26,200 --> 00:21:27,800
that way, I suspect.

414
00:21:28,400 --> 00:21:31,900
We might just want to do them all because I can't really think of a

415
00:21:31,900 --> 00:21:33,400
reason why we wouldn't.

416
00:21:33,500 --> 00:21:38,400
So like, you know, probably actually, all of these are things that

417
00:21:39,000 --> 00:21:40,200
would make sense.

418
00:21:42,300 --> 00:21:43,100
Yeah.

419
00:21:43,200 --> 00:21:47,800
Even the missing resource count, I would think we would want to reset.

420
00:21:49,400 --> 00:21:51,600
So I think we really want all of this.

421
00:21:51,900 --> 00:21:57,200
I think all of that wants to be there and this stuff obviously is only

422
00:21:57,200 --> 00:21:58,000
done once.

423
00:22:00,200 --> 00:22:03,500
I like so, and we can also do that, right?

424
00:22:03,500 --> 00:22:07,200
And so, all of these guys would come in here and we'd say, you know,

425
00:22:07,800 --> 00:22:09,500
clear render values, right?

426
00:22:09,500 --> 00:22:12,700
Before we go any further and we'd have our render group here.

427
00:22:15,400 --> 00:22:16,200
Brenda group.

428
00:22:18,000 --> 00:22:20,900
And there's the result and there's been to group and hoops.

429
00:22:27,100 --> 00:22:30,600
And yeah, so that would be nice.

430
00:22:30,600 --> 00:22:36,500
And then down in here when we actually do our when we finish up we do

431
00:22:36,500 --> 00:22:41,200
clear render values again just to leave it in a pristine State.

432
00:22:41,500 --> 00:22:44,200
Like, so I think that's a good idea.

433
00:22:44,600 --> 00:22:49,600
It just seems to make it a little bit more, a little less error-prone

434
00:22:49,600 --> 00:22:52,100
than, trying to remember to set it at the two, different places all

435
00:22:52,100 --> 00:22:52,900
the time, right?

436
00:22:54,500 --> 00:22:56,900
I don't see anything else in here that would want to do that.

437
00:22:56,900 --> 00:23:01,100
I don't think we're is render transform.

438
00:23:01,100 --> 00:23:02,100
Does that have surrender?

439
00:23:02,100 --> 00:23:08,300
Transform has a lot of stuff in it so I think I may also want to do

440
00:23:08,300 --> 00:23:12,800
render transform a little bit more completely.

441
00:23:13,100 --> 00:23:21,400
So when here we'd say, like we've got the offset and the scale, all

442
00:23:21,400 --> 00:23:23,400
the rest of that stuff, I guess, I don't.

443
00:23:23,600 --> 00:23:28,500
know, if we want to reset it because the user kind of sets that stuff,

444
00:23:29,900 --> 00:23:31,800
So so maybe we don't, I don't know.

445
00:23:31,800 --> 00:23:34,400
We'll leave it like this for now, but we may decide we want to move

446
00:23:34,400 --> 00:23:36,700
some of those in there a little bit later.

447
00:23:36,700 --> 00:23:41,000
I'll say to do reset more of the transform.

448
00:23:43,500 --> 00:23:44,600
Should it be sticky?

449
00:23:48,100 --> 00:23:51,300
So yeah, so I feel like that was just an obvious thing that we would

450
00:23:51,300 --> 00:23:55,200
want to do because now we just don't have that that bug and hey

451
00:23:57,000 --> 00:23:59,700
Colombian there's your answer from the pre stream.

452
00:24:00,000 --> 00:24:03,400
The reason we were slower is because we kept having more and more

453
00:24:03,400 --> 00:24:07,700
stuff in that buffer, we kept adding things to it, right.

454
00:24:09,000 --> 00:24:12,200
So, I think that probably had something to do with it, although, well,

455
00:24:12,500 --> 00:24:14,700
now I guess is the push buffer count now.

456
00:24:14,700 --> 00:24:16,100
So that wasn't true, never mind.

457
00:24:16,700 --> 00:24:20,100
And I guess we aren't, we are not actually fat back to faster.

458
00:24:20,100 --> 00:24:22,300
For some reason, we were temporarily down at 16.

459
00:24:22,300 --> 00:24:22,900
I don't know.

460
00:24:23,000 --> 00:24:24,000
It's very flickery.

461
00:24:24,700 --> 00:24:27,600
We're going to have to re-enable the profiling to get any more

462
00:24:27,600 --> 00:24:28,400
information about that.

463
00:24:28,400 --> 00:24:29,800
I think it's too hard to tell from here.

464
00:24:30,400 --> 00:24:32,800
Because again that also could just be the debug system stuff that

465
00:24:32,800 --> 00:24:34,000
takes up that extra time.

466
00:24:34,600 --> 00:24:37,400
So yeah, so it's faster when we go up here because it's got less stuff

467
00:24:37,400 --> 00:24:37,800
to render.

468
00:24:37,800 --> 00:24:40,500
Right more stuffs off the screen, but when you're right here and

469
00:24:40,500 --> 00:24:42,500
you're rendering the maximum out of stuff, it's slower.

470
00:24:43,200 --> 00:24:46,300
Anyway, ignoring all that point being I think that's better because

471
00:24:46,300 --> 00:24:47,500
that is a bug.

472
00:24:47,500 --> 00:24:50,600
We could have had for any number of things in the render system and

473
00:24:50,600 --> 00:24:52,100
now they're in one place.

474
00:24:52,100 --> 00:24:54,200
So that we're less likely to make that mistake.

475
00:24:56,300 --> 00:24:57,100
Which is a good thing.

476
00:24:58,600 --> 00:25:00,100
Okay, so back to sorting keys.

477
00:25:00,700 --> 00:25:05,800
So, yeah, we have the capability to create our sort key here, right?

478
00:25:06,400 --> 00:25:08,100
And that's great, and all.

479
00:25:08,300 --> 00:25:11,600
But we also need now some way.

480
00:25:11,600 --> 00:25:12,900
Oops, that's not what I wanted.

481
00:25:12,900 --> 00:25:16,700
I wanted in the basis.

482
00:25:16,700 --> 00:25:17,400
There it is.

483
00:25:18,800 --> 00:25:21,200
Nope, where is the sort key?

484
00:25:21,200 --> 00:25:23,800
It's in the get entity render basis.

485
00:25:26,100 --> 00:25:27,300
That produces it, right?

486
00:25:27,800 --> 00:25:28,900
Yeah, that's what I was looking for.

487
00:25:29,700 --> 00:25:30,900
So our sort key.

488
00:25:32,400 --> 00:25:35,000
We are producing it, but we're not producing it with what we want.

489
00:25:35,100 --> 00:25:38,600
The py I think is, is roughly correct.

490
00:25:38,600 --> 00:25:41,300
Meaning the py part is what we want.

491
00:25:41,300 --> 00:25:45,900
The problem is the pz part is not really what we want and we're going

492
00:25:45,900 --> 00:25:51,800
to need some way of handling that a little bit more delicately and so

493
00:25:51,800 --> 00:25:52,400
I don't know.

494
00:25:52,500 --> 00:25:54,300
Like I said exactly how we want to do that.

495
00:25:54,300 --> 00:25:57,600
I think what we want to do is sort of treat it as something that's

496
00:25:57,800 --> 00:26:01,200
again like kind of a truncated

497
00:26:01,900 --> 00:26:04,900
Or rounded kind of value that allows us to do something a little

498
00:26:04,900 --> 00:26:12,200
Smarter with it but I'm just not sure I'm just not sure exactly what.

499
00:26:12,400 --> 00:26:17,200
So one example would be we do know for example in handmade

500
00:26:19,300 --> 00:26:20,300
And handmade world.

501
00:26:21,100 --> 00:26:25,300
We do have the concept of how high it is, like how high it is to the

502
00:26:25,300 --> 00:26:26,500
next floor, right?

503
00:26:26,500 --> 00:26:30,600
We've got that sort of Chunk demand M sort of situation and the chunk.

504
00:26:30,600 --> 00:26:35,000
Demon m is like, you know, we sort of said that these were blocks and

505
00:26:35,200 --> 00:26:39,700
you know we can introduce the concept certainly that like the floors

506
00:26:39,700 --> 00:26:42,600
are at a certain place and we can figure out like how we would go

507
00:26:42,600 --> 00:26:43,900
ahead and round those that sort of thing.

508
00:26:44,600 --> 00:26:47,400
But my no matter what we do, by the time we get to render entity

509
00:26:47,400 --> 00:26:48,200
basis, pee,

510
00:26:48,300 --> 00:26:48,600
P.

511
00:26:48,600 --> 00:26:51,600
We don't have enough information, really?

512
00:26:51,600 --> 00:26:51,900
Right?

513
00:26:51,900 --> 00:26:56,900
We don't actually know at by the time we get here.

514
00:26:58,300 --> 00:26:59,900
What that, whether this?

515
00:27:00,000 --> 00:27:03,300
Was like something that's like a ground chunk, that has to be rendered

516
00:27:03,300 --> 00:27:05,400
early or something that's standing on the ground.

517
00:27:05,400 --> 00:27:07,000
That would be rendered always later.

518
00:27:07,700 --> 00:27:10,000
And so, since we don't actually know that,

519
00:27:11,200 --> 00:27:14,100
It means that either way we're going to have to get more information

520
00:27:14,100 --> 00:27:14,500
in here.

521
00:27:15,500 --> 00:27:18,900
We have the transform in the original P but we just don't have any

522
00:27:18,900 --> 00:27:21,700
piece of information that says like whether it's standing up or not so

523
00:27:21,700 --> 00:27:26,800
really like that render transform is going to have to have a little

524
00:27:26,800 --> 00:27:28,200
more information in it.

525
00:27:28,300 --> 00:27:32,100
And I think what we need to do there is say like okay that render

526
00:27:32,100 --> 00:27:35,600
transform has something in it, you know we've got the orthographic,

527
00:27:35,600 --> 00:27:40,000
for example we would need something as well which was like, oh is this

528
00:27:40,000 --> 00:27:40,600
thing?

529
00:27:41,000 --> 00:27:47,100
Whatever this thing is, is this thing a upright or not, right?

530
00:27:48,800 --> 00:27:52,500
And the other thing about this is that this is sort of starting, you

531
00:27:52,500 --> 00:27:54,400
can see it kind of breaks down a little bit here.

532
00:27:54,600 --> 00:27:58,800
The render transform has everything in it, but all of this stuff is

533
00:27:58,800 --> 00:28:00,100
pertaining to the camera.

534
00:28:00,300 --> 00:28:03,700
Whereas this stuff is pertaining to the entity, you know what I mean.

535
00:28:07,800 --> 00:28:10,700
So, at some point very soon, I think that should probably be right

536
00:28:10,700 --> 00:28:11,800
after we finish the Sorting.

537
00:28:12,300 --> 00:28:17,000
We probably want to do like move this out to its own thing, right?

538
00:28:17,300 --> 00:28:20,600
Because it's something that we kind of had been having troubles with,

539
00:28:20,600 --> 00:28:21,700
and I think we want to make it.

540
00:28:21,700 --> 00:28:23,900
So it's something that's a little more explicit in the calling code

541
00:28:23,900 --> 00:28:26,400
where it actually creates one of these and passes it when it's going

542
00:28:26,400 --> 00:28:26,600
to.

543
00:28:26,700 --> 00:28:29,300
So, it says, like, here's a transform I'm using or whatever.

544
00:28:30,500 --> 00:28:33,200
So, yeah, so in this render transform, if we had something that was

545
00:28:33,200 --> 00:28:36,900
like is this upright or not, we would know whether to bias the Z.

546
00:28:37,700 --> 00:28:40,800
No one way or the other if that makes sense.

547
00:28:41,600 --> 00:28:44,600
We could do something here with that right away just to see if that

548
00:28:44,600 --> 00:28:45,300
would work.

549
00:28:45,600 --> 00:28:49,100
We could do something and I guess this gives us a good chance to use

550
00:28:49,100 --> 00:28:50,900
our clear render values.

551
00:28:55,400 --> 00:28:56,100
Exactly the way.

552
00:28:56,100 --> 00:28:59,700
I just said we wanted to, which is now here, when we're doing this

553
00:28:59,700 --> 00:29:05,800
transform thing, we could reset the transform upright to always be

554
00:29:06,100 --> 00:29:10,100
true because most things are cards that are upright.

555
00:29:10,500 --> 00:29:13,800
So when we're rendering the floor, we would set that up right to false

556
00:29:14,100 --> 00:29:16,800
and then when we rendered, it would know that that was what was

557
00:29:16,800 --> 00:29:17,400
happening.

558
00:29:18,000 --> 00:29:21,700
And so when we do that, let's see here.

559
00:29:22,200 --> 00:29:22,600
Let's

560
00:29:25,800 --> 00:29:29,100
So when we do that in here, now we have the option of adding to our

561
00:29:29,100 --> 00:29:29,700
sort key.

562
00:29:29,700 --> 00:29:36,000
The concept that something here is going to be like in addition to

563
00:29:36,000 --> 00:29:40,200
that Z value, we're going to have this ability to sort of toggle which

564
00:29:40,200 --> 00:29:41,500
plane you're on, right?

565
00:29:41,900 --> 00:29:44,100
So I can keep kind of doing this in a ridiculous way.

566
00:29:44,100 --> 00:29:47,100
This is not quite correct but I could say here, like for example,

567
00:29:47,300 --> 00:29:52,500
well, whatever the transfer I'm says, if I'm up right, you know then

568
00:29:52,500 --> 00:29:54,800
I'm going to do something where I add, you know,

569
00:29:54,900 --> 00:29:55,000
No.

570
00:29:56,200 --> 00:29:57,300
You could imagine this.

571
00:30:01,700 --> 00:30:05,200
So now anything that's like upright is always going to be one, you

572
00:30:05,200 --> 00:30:09,200
know, biased one up from from this, right?

573
00:30:09,500 --> 00:30:13,300
And I guess what I really want is I want it to be inside here, right?

574
00:30:13,300 --> 00:30:16,600
I want it to be multiplied by the, by the larger value, so something

575
00:30:16,600 --> 00:30:17,700
like that, right?

576
00:30:19,400 --> 00:30:22,200
Of course, you have to spell transform correctly, but something like

577
00:30:22,200 --> 00:30:23,800
that, introduces the bias there.

578
00:30:23,900 --> 00:30:30,100
And then, that way out in world's mode, when I'm doing that,

579
00:30:30,300 --> 00:30:31,500
Quote, unquote bias.

580
00:30:34,500 --> 00:30:35,800
Like here.

581
00:30:36,600 --> 00:30:42,900
So when I'm doing this, now I've got the ability to say that I want

582
00:30:42,900 --> 00:30:48,700
this thing to be flat, and it will should render behind other things,

583
00:30:49,000 --> 00:30:49,600
right?

584
00:30:56,800 --> 00:30:57,200
Okay.

585
00:30:59,700 --> 00:31:04,800
So yeah, so now you can see, we no longer change what the Z value of

586
00:31:04,800 --> 00:31:09,000
that ground is, but because we had bias it backwards to be a flat

587
00:31:09,000 --> 00:31:13,000
thing, it now, sorts properly with everything else, right?

588
00:31:13,000 --> 00:31:17,200
And I can still do this ground sort of sorting stuff here.

589
00:31:17,200 --> 00:31:19,200
I can still do it for upper levels as well.

590
00:31:19,700 --> 00:31:22,900
Now, what this brings up that's kind of interesting now that we have

591
00:31:22,900 --> 00:31:25,900
sorting, we can actually do something that we've wanted to do for a

592
00:31:25,900 --> 00:31:28,400
while and get continuous get

593
00:31:28,600 --> 00:31:32,200
Round chunk thing working where you continuously go between 2 and

594
00:31:32,200 --> 00:31:36,900
we're relieved all hole where the stairwell is, which is probably

595
00:31:36,900 --> 00:31:38,600
something we should do pretty soon actually.

596
00:31:38,600 --> 00:31:40,600
Now that I think about it because that would be kind of fun.

597
00:31:41,100 --> 00:31:44,100
So maybe that's something we do after the Sorting as well right now,

598
00:31:44,100 --> 00:31:45,900
I'm not sure why we do the flashing.

599
00:31:45,900 --> 00:31:49,600
I think it's because we only really handle one level of ground chunks

600
00:31:49,600 --> 00:31:50,200
right now.

601
00:31:50,300 --> 00:31:52,700
And so we'd want to do a thing where we actually did more ground

602
00:31:52,700 --> 00:31:53,100
chunks.

603
00:31:55,500 --> 00:31:56,400
We're different planes.

604
00:31:57,100 --> 00:32:00,300
But yeah, I forgot we never did that because we didn't have sorting.

605
00:32:00,300 --> 00:32:03,100
Now, we've got sorting, we can fully make our 3D stack stuff.

606
00:32:03,800 --> 00:32:06,800
So yeah, we should probably just do it, we should probably just do it.

607
00:32:07,400 --> 00:32:09,900
So anyway, yeah, now we can transition smoothly between the two.

608
00:32:09,900 --> 00:32:13,400
Everything sorting properly are sort key is not as good as I would

609
00:32:13,400 --> 00:32:18,600
like, but like I said, it's something that we kind of have to probably

610
00:32:18,600 --> 00:32:21,700
keep pushing on a little bit, maybe we should go.

611
00:32:21,700 --> 00:32:22,600
How much time do I have?

612
00:32:22,600 --> 00:32:23,600
Probably not much because I had

613
00:32:23,800 --> 00:32:25,300
Go explain the render thing there.

614
00:32:25,300 --> 00:32:27,700
Oh well, no I've got I've got 20 minutes.

615
00:32:28,100 --> 00:32:31,900
So yeah, maybe we should try doing a thing where we like have the

616
00:32:31,900 --> 00:32:32,800
stairwell.

617
00:32:34,100 --> 00:32:36,600
Let's try getting the stairwell thing working a little bit.

618
00:32:36,700 --> 00:32:40,900
So first, let's try to have our ground chunks work continuously and

619
00:32:41,000 --> 00:32:45,100
and I don't know exactly how we were doing that because it's been so

620
00:32:45,100 --> 00:32:51,200
long, but I believe, the problem there is we just we only do ya like,

621
00:32:51,300 --> 00:32:53,600
you can see here where we do our grand buffers, right?

622
00:32:54,600 --> 00:32:58,600
When we do our ground before updating, you can see here, we do like a

623
00:32:58,600 --> 00:32:59,500
Min chunk.

624
00:33:00,900 --> 00:33:01,500
Thing.

625
00:33:02,000 --> 00:33:08,900
And so I'm assuming that when we do that the the camera bound

626
00:33:08,900 --> 00:33:11,300
situation here, where we do the min/max thing.

627
00:33:12,900 --> 00:33:17,400
I don't actually know, well, I don't know, shouldn't that do

628
00:33:17,400 --> 00:33:18,000
something.

629
00:33:18,000 --> 00:33:19,500
What is that going to do for us?

630
00:33:22,200 --> 00:33:23,200
This is a good question.

631
00:33:24,300 --> 00:33:27,800
It seems like it should be doing a few different layers of these.

632
00:33:29,400 --> 00:33:33,300
Well, let's find out, I don't know what the camera Bound in M actually

633
00:33:33,300 --> 00:33:35,800
is, so let's find out.

634
00:33:36,000 --> 00:33:39,600
So it looks like typical floor height minus three and one.

635
00:33:39,800 --> 00:33:41,900
So that should be giving us multiple levels.

636
00:33:41,900 --> 00:33:45,500
So why does it do our ground chunks disappear?

637
00:33:47,400 --> 00:33:50,400
You know, what's the deal with that?

638
00:33:50,600 --> 00:33:52,000
Why are we getting that happening?

639
00:33:52,000 --> 00:33:55,600
And I'm not sure, but I feel like it should be easy enough for us to

640
00:33:55,600 --> 00:33:59,200
figure out because all, we've would really have to do right.

641
00:33:59,200 --> 00:34:04,500
Is there's a time when, when we're moving where we don't see any?

642
00:34:04,500 --> 00:34:07,300
Like here I am on the ground floor and I see it, right?

643
00:34:07,500 --> 00:34:14,400
I start walking and and they disappear entirely right there.

644
00:34:14,800 --> 00:34:16,300
Now there's again, there's a couple things so

645
00:34:16,400 --> 00:34:17,699
Can see our sort key.

646
00:34:17,900 --> 00:34:22,800
One thing that are sort key is not handling and I guess I don't know

647
00:34:22,800 --> 00:34:26,000
why, it's not handling that as we get up, I'm not sure why those

648
00:34:26,000 --> 00:34:26,900
ground chunks.

649
00:34:28,600 --> 00:34:33,800
I suppose this is all related to because the ground doesn't seem to be

650
00:34:33,800 --> 00:34:38,500
moving with the camera properly either, right?

651
00:34:40,000 --> 00:34:41,900
You can see how it's not.

652
00:34:41,900 --> 00:34:43,300
It doesn't get smaller.

653
00:34:46,100 --> 00:34:47,000
And it should.

654
00:34:48,300 --> 00:34:52,000
Like it should be, it should be scaling away from us and it's not.

655
00:34:52,699 --> 00:34:55,300
So that also is a problem.

656
00:34:56,199 --> 00:34:57,700
And why is that happening?

657
00:34:58,600 --> 00:35:01,400
Okay, so that is also, that's also happening because of this

658
00:35:01,400 --> 00:35:02,100
situation.

659
00:35:02,500 --> 00:35:05,400
So that's because we're just not when we do our ground chunk

660
00:35:05,400 --> 00:35:05,900
rendering.

661
00:35:06,000 --> 00:35:10,400
We're not actually giving it an easy, right?

662
00:35:10,500 --> 00:35:13,300
Because here is the transform that controls the Z, and it's not going

663
00:35:13,300 --> 00:35:13,800
to use that.

664
00:35:13,800 --> 00:35:16,500
All right, so we need that week.

665
00:35:16,500 --> 00:35:16,900
Yeah.

666
00:35:17,900 --> 00:35:20,600
This is the same old problem, which is why I say we want to do that.

667
00:35:20,600 --> 00:35:23,000
Sort of we want to probably fix the way this stuff gets handled sooner

668
00:35:23,000 --> 00:35:23,500
rather than later.

669
00:35:23,500 --> 00:35:27,800
But yeah, this offset, really should, you know this whole thing here

670
00:35:27,800 --> 00:35:30,300
where it's doing this Delta, this whole situation.

671
00:35:31,900 --> 00:35:33,000
And I don't even know what is this.

672
00:35:33,000 --> 00:35:35,800
Delta Z greater than or equal to negative 1.

673
00:35:36,700 --> 00:35:39,100
Delta Z less than y was the rendering.

674
00:35:39,100 --> 00:35:41,400
This must have been to restrict it to stuff.

675
00:35:41,400 --> 00:35:43,200
We could before we had sorting.

676
00:35:43,500 --> 00:35:45,100
Because why would we ever restrict it?

677
00:35:45,100 --> 00:35:47,000
Based on the Delta Z have no idea.

678
00:35:47,400 --> 00:35:47,500
So

679
00:35:47,600 --> 00:35:50,300
Think this is all this code is just all from when we didn't have

680
00:35:50,300 --> 00:35:52,900
sorting and really probably shouldn't even be there.

681
00:35:53,500 --> 00:35:56,400
So that's probably part of the problem for starters but then another

682
00:35:56,400 --> 00:35:57,900
part is we're not actually offsetting this.

683
00:35:57,900 --> 00:35:59,800
So this is Delta, this Delta

684
00:36:00,000 --> 00:36:00,600
Not being here.

685
00:36:00,600 --> 00:36:02,100
There really should be nose Delta.

686
00:36:03,600 --> 00:36:07,500
The Delta should be what we actually pass to offset, right?

687
00:36:08,300 --> 00:36:09,500
It should be this.

688
00:36:13,400 --> 00:36:15,700
Right, that's what we should actually be doing.

689
00:36:15,900 --> 00:36:17,200
I believe.

690
00:36:19,100 --> 00:36:21,500
And we don't really need multiple semicolons.

691
00:36:23,500 --> 00:36:25,300
So let's take a look at that.

692
00:36:32,500 --> 00:36:37,100
So yeah, that actually is what we would expect.

693
00:36:37,200 --> 00:36:39,800
Unfortunately, our ground chunk.

694
00:36:41,600 --> 00:36:44,300
Yeah, our ground chunks are now.

695
00:36:44,300 --> 00:36:48,400
The topmost one is rendering in front of everybody, which is what it

696
00:36:48,400 --> 00:36:49,000
should do.

697
00:36:49,600 --> 00:36:52,700
We need that to Alpha Fade Out and I don't really remember how our

698
00:36:52,700 --> 00:36:56,400
Alpha fade was working there.

699
00:37:00,000 --> 00:37:01,700
How were we doing that?

700
00:37:02,600 --> 00:37:04,600
Was that manual in here?

701
00:37:05,700 --> 00:37:07,100
Yeah, it was

702
00:37:13,100 --> 00:37:16,800
Yeah, so that's less good to right.

703
00:37:16,800 --> 00:37:20,500
Because we were doing that man doing here, which means if we want our

704
00:37:20,500 --> 00:37:22,700
ground chunks to work with that, we'd have to do it.

705
00:37:25,500 --> 00:37:26,800
We'd have to do it up there.

706
00:37:26,800 --> 00:37:30,600
Now we could write we can cut and paste this code but we really want

707
00:37:30,600 --> 00:37:31,600
that to be.

708
00:37:31,700 --> 00:37:34,200
Yeah we really want to clean this stuff up now that we're starting to

709
00:37:34,200 --> 00:37:37,000
do this a little bit more for real so we probably want.

710
00:37:37,400 --> 00:37:41,200
Maybe what we'll do is when we get this kind of to a point place where

711
00:37:41,200 --> 00:37:48,100
we're relatively happy with it, we'll go ahead and we'll go ahead and

712
00:37:49,600 --> 00:37:52,700
After the Sorting, we'll go do the sorting and we'll come back here

713
00:37:52,700 --> 00:37:54,400
and actually make this code nice.

714
00:37:54,400 --> 00:37:58,200
Because at this point, when we've got sorting working properly, we,

715
00:37:58,400 --> 00:38:00,200
there's no reason not to.

716
00:38:02,000 --> 00:38:03,900
There's no reason not to do this.

717
00:38:04,700 --> 00:38:07,300
Do this code for real now because we can actually start rendering

718
00:38:07,300 --> 00:38:08,200
stuff, right?

719
00:38:16,200 --> 00:38:19,600
babe top start Z is

720
00:38:21,100 --> 00:38:27,200
Is some constants which should come up here.

721
00:38:27,700 --> 00:38:28,300
There we go.

722
00:38:28,400 --> 00:38:28,800
Oops.

723
00:38:32,900 --> 00:38:36,700
And I guess those will just be set here for now, but we may need to

724
00:38:36,700 --> 00:38:39,300
make those more of a render, a thing at some point.

725
00:38:40,500 --> 00:38:42,400
Let's see if that helps us at all.

726
00:38:44,400 --> 00:38:47,700
So we come up here and yeah.

727
00:38:48,000 --> 00:38:50,400
So now we're actually much more correct.

728
00:38:50,400 --> 00:38:51,500
You can kind of see

729
00:38:53,800 --> 00:38:55,700
They're in much better shape, right?

730
00:38:56,400 --> 00:38:58,600
Everything seems to be rendering properly.

731
00:38:58,600 --> 00:38:59,100
Now,

732
00:39:00,900 --> 00:39:02,500
And so, that's actually great.

733
00:39:03,200 --> 00:39:05,700
I'm pretty happy with that, unfortunately.

734
00:39:06,300 --> 00:39:09,600
Like I said, we now need a way to actually see our stairwells.

735
00:39:09,700 --> 00:39:14,000
I remember where they are sort of, so I can probably get two one.

736
00:39:15,300 --> 00:39:17,100
I hope maybe.

737
00:39:18,900 --> 00:39:20,300
Shouldn't it be here somewhere?

738
00:39:22,700 --> 00:39:23,900
All right, it's on this side.

739
00:39:24,400 --> 00:39:24,900
There it is.

740
00:39:26,700 --> 00:39:27,100
Yeah.

741
00:39:30,400 --> 00:39:32,100
So that all works great actually.

742
00:39:32,400 --> 00:39:35,400
And so really what we need to do now is we just need to actually leave

743
00:39:35,400 --> 00:39:38,000
some, some some viewable space.

744
00:39:38,000 --> 00:39:41,800
We need to be able to see down toward where the stairwell is so that

745
00:39:41,800 --> 00:39:46,100
we can actually use it, you know, because otherwise we'd never

746
00:39:46,100 --> 00:39:47,000
actually see it.

747
00:39:47,000 --> 00:39:48,300
We wouldn't know that it was there.

748
00:39:49,300 --> 00:39:52,600
So, yeah, that would just involve having the ground chunks know where

749
00:39:52,600 --> 00:39:54,400
the stairwells are and not put them in there.

750
00:39:55,000 --> 00:39:59,400
Now, we have another problem at this point to that hopefully is

751
00:39:59,600 --> 00:40:04,400
Parent and this is one of the reasons that I was sort of saying before

752
00:40:04,900 --> 00:40:08,200
that you know, rendering back to front, may be a good idea.

753
00:40:08,200 --> 00:40:13,300
Now we don't really have to care because honestly 3D acceleration

754
00:40:13,300 --> 00:40:14,000
wise.

755
00:40:14,000 --> 00:40:17,400
We're always probably going to be fast enough without doing this but

756
00:40:17,400 --> 00:40:20,500
if we want our software renderer to run fast enough for example,

757
00:40:21,000 --> 00:40:23,200
rendering back to front would be important because what you have to

758
00:40:23,200 --> 00:40:24,400
remember is right now.

759
00:40:24,700 --> 00:40:26,100
We're drawing the entire screen.

760
00:40:26,100 --> 00:40:29,200
Many times for every level of ground chunk.

761
00:40:29,500 --> 00:40:31,300
We're drawing the whole screen again.

762
00:40:31,700 --> 00:40:32,300
Right?

763
00:40:32,600 --> 00:40:35,600
And that's just a ton of work that doesn't need to happen because the

764
00:40:35,600 --> 00:40:40,200
only ground chunks we can see are the ones that are like right on

765
00:40:40,200 --> 00:40:43,000
this, this very level and the only time we can see down to other ones

766
00:40:43,000 --> 00:40:45,800
is when there's some kind of hole in the ground for something like a

767
00:40:45,800 --> 00:40:47,100
stairwell, right?

768
00:40:48,200 --> 00:40:55,000
And so what I'd like to do, you know what I what I would do if you

769
00:40:55,000 --> 00:40:58,200
know if we want to accelerate the software under which you know, like

770
00:40:58,200 --> 00:41:00,800
I said maybe we don't want to do maybe we've got enough software

771
00:41:00,800 --> 00:41:03,400
rendering under our belts that we don't need to spend any more time on

772
00:41:03,400 --> 00:41:08,200
it but if we wanted to make it better, what we would do is make it so

773
00:41:08,200 --> 00:41:12,300
that we render instead starting with the earliest items and going

774
00:41:12,300 --> 00:41:15,400
backwards and as we do that, we remember what chunks?

775
00:41:15,400 --> 00:41:17,600
Rough chunks of the screen are fully occluded

776
00:41:19,800 --> 00:41:21,300
That's what we would do now, unfortunately.

777
00:41:21,300 --> 00:41:23,600
There's a lot of work involved in that so that's why I say, don't know

778
00:41:23,600 --> 00:41:25,500
that it's necessarily worth it to do.

779
00:41:28,300 --> 00:41:30,700
But it's worth noting because like you can see our frame rates not

780
00:41:30,700 --> 00:41:33,400
particularly good at 1080p.

781
00:41:33,600 --> 00:41:37,200
Now granted, we can always choose to run our software renderer in less

782
00:41:37,200 --> 00:41:38,800
than 1080p, right?

783
00:41:39,000 --> 00:41:41,500
So you know, we were running in 1080P because it happened to be so

784
00:41:41,500 --> 00:41:48,300
darn fast that we could but we can always decide to drop down to to

785
00:41:48,300 --> 00:41:51,000
something that's more like what a software renderer might have done in

786
00:41:51,000 --> 00:41:54,300
the old days which we have more than enough power for certainly right?

787
00:41:55,200 --> 00:41:57,800
So we can go ahead and yeah.

788
00:41:58,900 --> 00:41:59,800
Go ahead and run it back.

789
00:42:00,400 --> 00:42:03,300
And you can see, now, we're back up to 16 fish.

790
00:42:03,600 --> 00:42:09,300
I guess hard to say looks like we're that's an oddly consistent top

791
00:42:09,300 --> 00:42:11,900
frame rate, but yeah, I guess we're at 20.

792
00:42:12,200 --> 00:42:13,200
So we're still 30.

793
00:42:13,200 --> 00:42:14,300
We're not 60 though.

794
00:42:17,700 --> 00:42:18,100
But yeah.

795
00:42:25,100 --> 00:42:27,300
That's yeah.

796
00:42:27,900 --> 00:42:29,900
So that's actually totally fine, right?

797
00:42:29,900 --> 00:42:30,900
And that's pretty usable.

798
00:42:30,900 --> 00:42:34,400
So, who knows we could just do that, but it is, obviously, always

799
00:42:34,400 --> 00:42:35,100
tempting to go.

800
00:42:35,100 --> 00:42:38,900
Since I know there's plenty of performance left on the table for our

801
00:42:38,900 --> 00:42:41,600
software, renderer, it's always tempting to kind of go do it because

802
00:42:41,600 --> 00:42:45,000
hey, this is game programming, not game design.

803
00:42:45,200 --> 00:42:48,200
And so it's always tempting to go solve a tech problem since that's

804
00:42:48,200 --> 00:42:49,900
what we do here anyway.

805
00:42:51,500 --> 00:42:53,300
But I'm really satisfied with all that.

806
00:42:53,600 --> 00:43:00,700
And so I think that's actually probably enough to satisfy me actually

807
00:43:01,300 --> 00:43:03,800
that sort Keys, okay?

808
00:43:04,300 --> 00:43:06,900
And works for the purposes that we needed to at least for now.

809
00:43:08,300 --> 00:43:10,100
So, yeah, let me take a look at how much time I have left.

810
00:43:10,200 --> 00:43:12,400
I've got 10 minutes left, probably a little more than two minutes.

811
00:43:12,800 --> 00:43:16,600
What I think I'd like to do is I would like to actually go.

812
00:43:16,600 --> 00:43:18,400
I'm going to put this back to because I don't actually care if the

813
00:43:18,400 --> 00:43:19,700
frame rates low, for the time.

814
00:43:19,700 --> 00:43:20,900
Being what?

815
00:43:21,000 --> 00:43:26,800
I'd like to do is I'd like to go to our handmaids render group here

816
00:43:27,100 --> 00:43:29,700
and I think I'd like to actually pull this thing out

817
00:43:32,100 --> 00:43:34,300
I think I'd like to actually do that.

818
00:43:34,300 --> 00:43:37,700
We have some time, we know we have to do it because it's leading to a

819
00:43:37,700 --> 00:43:38,700
lot of ugly things.

820
00:43:38,700 --> 00:43:43,000
The fact that it's the sticky mode in there, right?

821
00:43:43,300 --> 00:43:45,600
The way that all of our stuff works right now.

822
00:43:45,700 --> 00:43:49,000
Like if we go to where we were just drawing those, we have to like set

823
00:43:49,000 --> 00:43:51,800
stuff and then unset it and it's just kind of ugly.

824
00:43:52,000 --> 00:43:55,200
And that's there's really not much of a reason to do that.

825
00:43:56,700 --> 00:43:58,700
There's no point to it, right?

826
00:43:59,400 --> 00:44:01,500
Because all we would have to do to make it

827
00:44:01,800 --> 00:44:06,600
Cleaner to use is just have a regular transform where we do like,

828
00:44:06,600 --> 00:44:06,900
okay.

829
00:44:06,900 --> 00:44:11,400
There's a, you know, an object transform or something and a camera

830
00:44:11,400 --> 00:44:14,100
transform, right, where we just have two of them.

831
00:44:14,500 --> 00:44:17,900
And then this is here in its own thing.

832
00:44:18,100 --> 00:44:20,500
So this guy attracts others up, right?

833
00:44:20,500 --> 00:44:24,000
And whether where it is offset is and what its scale is right?

834
00:44:24,500 --> 00:44:28,800
And and this guy tracks, you know, whether he's worth the graphic and

835
00:44:28,800 --> 00:44:31,500
what the m 2 pixels is and the focal length and all that.

836
00:44:31,600 --> 00:44:32,100
Stuff.

837
00:44:33,300 --> 00:44:38,000
You know, I would also point out that distance above Target is pretty

838
00:44:38,000 --> 00:44:38,500
dumb.

839
00:44:38,800 --> 00:44:43,000
I do not know why we have it because it's should just be something

840
00:44:43,000 --> 00:44:45,200
that's in everyone's object transform.

841
00:44:45,200 --> 00:44:51,700
Probably like, it's just, it's kind of stupid, but we'll leave it in

842
00:44:51,700 --> 00:44:52,200
there for now.

843
00:44:52,200 --> 00:44:55,200
But it's just it's not necessarily like all it is, is just a value

844
00:44:55,200 --> 00:44:57,000
that gets added to offset P, right?

845
00:44:57,000 --> 00:44:58,200
So it's, yeah.

846
00:44:58,700 --> 00:44:59,300
Anyway,

847
00:45:00,000 --> 00:45:01,400
Dumb, but whatever.

848
00:45:02,400 --> 00:45:05,000
Anyway, I think this might be a more interesting way to go.

849
00:45:05,200 --> 00:45:10,500
And then, inside here, we've got the camera transform, but, but we

850
00:45:10,500 --> 00:45:13,700
don't have an object transform and that'll cause a ton of compile

851
00:45:13,700 --> 00:45:15,900
errors, but they're not going to be ones that are particularly

852
00:45:15,900 --> 00:45:17,600
difficult to fix.

853
00:45:18,000 --> 00:45:20,300
So I would say, let's do it.

854
00:45:20,400 --> 00:45:21,300
Let's go for it.

855
00:45:21,400 --> 00:45:22,200
Why not?

856
00:45:23,600 --> 00:45:27,600
So, the way this would work is we'd have some way of getting like a

857
00:45:27,600 --> 00:45:29,300
default transform or something.

858
00:45:30,000 --> 00:45:34,900
Maybe something, you know, like this object transform.

859
00:45:37,300 --> 00:45:39,400
Default transform.

860
00:45:42,500 --> 00:45:44,600
Something like that, you know?

861
00:45:45,800 --> 00:45:49,700
And then we just say, like, okay, whatever the result is.

862
00:45:54,400 --> 00:45:58,900
We make into this.

863
00:46:06,500 --> 00:46:09,100
Maybe this would be good too.

864
00:46:13,200 --> 00:46:13,700
Or.

865
00:46:14,900 --> 00:46:15,400
That.

866
00:46:16,800 --> 00:46:20,100
Flat, something like that.

867
00:46:20,400 --> 00:46:21,400
Flatten up, right?

868
00:46:22,000 --> 00:46:24,500
And so we would have something that looked like this.

869
00:46:30,400 --> 00:46:34,500
Where you can just get, whatever the default is and then you modify

870
00:46:34,500 --> 00:46:35,400
it, however, you want.

871
00:46:35,400 --> 00:46:38,000
And you just throw it away when you're done with it so that you don't

872
00:46:38,000 --> 00:46:40,300
really have to do anything fussy.

873
00:46:40,500 --> 00:46:41,100
Right.

874
00:46:41,600 --> 00:46:44,100
We don't need to realize that because already initialized for the flat

875
00:46:44,100 --> 00:46:45,800
transforms, we don't have initialize that.

876
00:46:46,200 --> 00:46:50,000
So we'd really just be talking about this is all we would actually be

877
00:46:50,000 --> 00:46:55,600
doing those would be our default transforms and now everywhere, we use

878
00:46:55,600 --> 00:46:56,200
this stuff.

879
00:46:56,300 --> 00:46:57,500
Oops, it's no good.

880
00:46:58,000 --> 00:46:59,400
You turn everywhere.

881
00:46:59,400 --> 00:46:59,700
We

882
00:46:59,900 --> 00:47:03,500
This stuff we can to make that happen.

883
00:47:03,500 --> 00:47:05,500
So okay these guys are all camera.

884
00:47:07,100 --> 00:47:08,300
Transforms obviously.

885
00:47:10,500 --> 00:47:11,300
Like so.

886
00:47:17,100 --> 00:47:18,600
Those are not actually a transform.

887
00:47:18,600 --> 00:47:22,500
So, so the camera transforms in here.

888
00:47:22,500 --> 00:47:28,700
When we do entity basis P, that's going to need both transforms and I

889
00:47:28,700 --> 00:47:31,200
don't know why we pass an address here.

890
00:47:31,900 --> 00:47:35,600
I don't know if we had a reason for that, but I'm not going to do that

891
00:47:35,600 --> 00:47:36,000
anymore.

892
00:47:36,000 --> 00:47:38,800
I'm just going to pass these by value object transform.

893
00:47:43,500 --> 00:47:46,700
Like so, so doesn't have to worry about whether they point to the same

894
00:47:46,700 --> 00:47:49,100
thing or aliasing or any that stuff, it just knows, it doesn't have

895
00:47:49,100 --> 00:47:49,300
to.

896
00:47:50,000 --> 00:47:53,400
And so, then we'd have the object transform as their, the camera

897
00:47:53,400 --> 00:47:55,800
transform is it's getting this information?

898
00:47:56,400 --> 00:47:58,900
Yeah, camera transform.

899
00:48:00,200 --> 00:48:01,500
So, that's all good.

900
00:48:02,000 --> 00:48:03,400
This is the camera transform.

901
00:48:03,400 --> 00:48:08,900
Again, it's looking at the orthographic bit, and this is the camera

902
00:48:08,900 --> 00:48:10,000
transform as well with that.

903
00:48:10,000 --> 00:48:11,200
This is above Target.

904
00:48:11,500 --> 00:48:13,200
We then have the object.

905
00:48:13,200 --> 00:48:17,600
Transform coming in here, at some point.

906
00:48:17,600 --> 00:48:19,600
Or is it only with the Ossipee of the scale?

907
00:48:19,600 --> 00:48:22,100
There should be in here somewhere, right?

908
00:48:25,800 --> 00:48:27,300
We never use the scale.

909
00:48:30,900 --> 00:48:31,500
At all.

910
00:48:39,000 --> 00:48:39,600
Okay.

911
00:48:41,300 --> 00:48:42,800
that's,

912
00:48:46,000 --> 00:48:46,700
Probably.

913
00:48:46,700 --> 00:48:47,300
Okay.

914
00:48:47,800 --> 00:48:50,500
I'm guessing that that's used elsewhere.

915
00:48:50,500 --> 00:48:51,900
Do we really just never use it anywhere?

916
00:48:51,900 --> 00:48:54,100
Was that just like oh we could use it so we stuck it in there and

917
00:48:54,100 --> 00:48:55,000
we've never used it.

918
00:48:55,600 --> 00:48:57,700
Well, alright, we don't use it, we don't use it.

919
00:48:58,400 --> 00:49:03,000
We can always get rid of it or actually go in and put in the multiply

920
00:49:03,000 --> 00:49:08,000
here at some point because that probably would be good thing to have.

921
00:49:08,000 --> 00:49:10,400
I mean scaling who doesn't like the scale stuff?

922
00:49:10,700 --> 00:49:12,000
Everyone likes to scale stuff.

923
00:49:12,900 --> 00:49:16,700
All right, so let's see anything else here.

924
00:49:16,800 --> 00:49:17,700
Ah, there it is.

925
00:49:19,800 --> 00:49:21,500
There is a result scale in there.

926
00:49:21,900 --> 00:49:22,400
Oh nope.

927
00:49:22,400 --> 00:49:23,200
That's just computed.

928
00:49:23,200 --> 00:49:26,600
No, so no, we don't, we don't touch it, we just straight up, don't

929
00:49:26,600 --> 00:49:27,200
touch it.

930
00:49:28,600 --> 00:49:29,100
Who knew?

931
00:49:30,600 --> 00:49:33,500
Learn something new every day about your own code, which you wrote.

932
00:49:33,900 --> 00:49:38,200
All right, so in here when we do this, now we have two sources so we

933
00:49:38,200 --> 00:49:42,600
always need to have a way of getting whatever the object

934
00:49:42,600 --> 00:49:43,100
Transformations.

935
00:49:43,100 --> 00:49:45,600
So I'm just going to say that that gets passed.

936
00:49:45,700 --> 00:49:52,300
So in here we've got the object transform like so and we just pass it

937
00:49:52,300 --> 00:49:52,800
on through.

938
00:49:55,100 --> 00:49:57,300
Now every time these people get called, that means that every time we

939
00:49:57,300 --> 00:50:00,000
do one of these that gets passed.

940
00:50:00,000 --> 00:50:05,600
Now, I don't know if we still want offset to be passed or not, how we

941
00:50:05,600 --> 00:50:06,200
want to do that.

942
00:50:06,200 --> 00:50:09,500
Exactly, because we can, we can now make that be a little bit

943
00:50:09,500 --> 00:50:12,800
different than what it was before, but I'm going to leave it the way

944
00:50:12,800 --> 00:50:14,600
it is just for the time being

945
00:50:15,800 --> 00:50:18,300
And just add literally the new part to it.

946
00:50:18,800 --> 00:50:23,400
So here's object transform and that will now get past here.

947
00:50:24,900 --> 00:50:26,700
Here is object transform again.

948
00:50:30,100 --> 00:50:31,500
And that would get past here.

949
00:50:35,300 --> 00:50:40,900
Let's see everyone who calls push bitmap has to think about this, a

950
00:50:40,900 --> 00:50:42,200
little harder here.

951
00:50:42,700 --> 00:50:45,200
So now this is object transform.

952
00:50:47,400 --> 00:50:51,000
And that would get passed in there.

953
00:50:52,500 --> 00:50:56,500
And just takes an object transform as well.

954
00:50:59,300 --> 00:50:59,800
And that way.

955
00:51:00,000 --> 00:51:00,900
Past here.

956
00:51:03,500 --> 00:51:04,600
and,

957
00:51:06,500 --> 00:51:09,000
Again this is really just totally wrote.

958
00:51:09,100 --> 00:51:12,000
I'm just making this be something that flows down the pipe.

959
00:51:12,100 --> 00:51:15,500
Instead of something that gets set globally on the render group.

960
00:51:17,000 --> 00:51:19,200
So, let's see, we've got a render transform.

961
00:51:20,600 --> 00:51:22,900
For on Project is actually camera, transform.

962
00:51:27,400 --> 00:51:31,000
And I'm going to go ahead and make that not be a pointer anymore.

963
00:51:32,500 --> 00:51:33,000
Hi there.

964
00:51:38,700 --> 00:51:39,100
Okay.

965
00:51:40,700 --> 00:51:41,800
Initializing.

966
00:51:42,400 --> 00:51:42,700
Yeah.

967
00:51:42,700 --> 00:51:44,100
That's not an address anymore.

968
00:51:44,800 --> 00:51:46,800
And what else we got?

969
00:51:46,800 --> 00:51:50,000
Transform offset p z, transform focal length.

970
00:51:50,300 --> 00:51:51,500
So offset pz.

971
00:51:51,500 --> 00:51:56,800
So in this case, the offset pz we need to know what that was.

972
00:51:56,800 --> 00:51:59,700
So we need the object transform to be passed here.

973
00:52:06,300 --> 00:52:08,400
Yeah, same here.

974
00:52:13,300 --> 00:52:15,200
And what else we got?

975
00:52:15,700 --> 00:52:19,500
I'm project-- old, transform, focal length.

976
00:52:19,500 --> 00:52:21,200
That's just the camera transform.

977
00:52:23,100 --> 00:52:24,600
Get camera rectangle.

978
00:52:24,600 --> 00:52:25,800
That's the camera transform.

979
00:52:25,800 --> 00:52:26,200
Again.

980
00:52:27,500 --> 00:52:31,600
All right, and so now these guys like for draw hip points and stuff,

981
00:52:32,200 --> 00:52:36,600
so what we need to do here for the render group that we're doing,

982
00:52:36,800 --> 00:52:39,600
these guys need to know when you're doing stuff like drawing hit

983
00:52:39,600 --> 00:52:40,800
points and that sort of stuff.

984
00:52:40,800 --> 00:52:43,100
These guys need to know what the object transform is now.

985
00:52:46,900 --> 00:52:50,100
And they would just be passed through as as with everyone else.

986
00:52:53,100 --> 00:52:54,600
What's where are we here?

987
00:52:54,600 --> 00:52:56,700
These are for chunks, right?

988
00:52:57,100 --> 00:52:58,800
Let's see, push bitmap.

989
00:53:00,500 --> 00:53:03,300
So these guys are not really doing much.

990
00:53:04,100 --> 00:53:08,000
These guys don't actually touch the renderer transform, right?

991
00:53:08,200 --> 00:53:12,000
They don't actually do anything and so they can just use and this

992
00:53:12,000 --> 00:53:14,100
shows the first way that we would actually use this.

993
00:53:14,300 --> 00:53:16,700
This would just be like default flat transform meaning.

994
00:53:16,700 --> 00:53:18,200
I don't actually want

995
00:53:25,700 --> 00:53:28,000
I don't actually want to transform these guys at all.

996
00:53:29,100 --> 00:53:32,900
They're not actually being they're not using anything other than this

997
00:53:32,900 --> 00:53:33,500
offset.

998
00:53:34,300 --> 00:53:37,900
So I'm just going to go ahead and let them take no transform.

999
00:53:41,600 --> 00:53:45,200
Like so, so that they will not actually modify the location at all.

1000
00:53:45,300 --> 00:53:46,800
Since that's what would have been happening.

1001
00:53:48,200 --> 00:53:50,800
Then, in here, we've got so again,

1002
00:53:52,100 --> 00:53:53,900
This is object transform.

1003
00:53:57,800 --> 00:53:59,300
Default flat transform.

1004
00:54:01,000 --> 00:54:04,000
so in here now we can do what we actually wanted and not have to do

1005
00:54:04,000 --> 00:54:08,700
that sort of craziness and say okay, you know, the object transform

1006
00:54:10,200 --> 00:54:14,300
Is just whatever the default is, and then I'm going to get that offset

1007
00:54:14,300 --> 00:54:14,700
p.

1008
00:54:16,000 --> 00:54:16,500
Right?

1009
00:54:16,800 --> 00:54:18,700
And then all this crap goes away.

1010
00:54:19,100 --> 00:54:23,300
Now we still have the alpha, which we don't really know what we're

1011
00:54:23,300 --> 00:54:24,400
going to do with the alpha.

1012
00:54:24,900 --> 00:54:27,700
Because that's a separate thing and like I said we don't we don't

1013
00:54:27,700 --> 00:54:29,400
really know what we're doing with that yet.

1014
00:54:29,600 --> 00:54:33,000
So we won't try to tackle that for now, but we kind of got

1015
00:54:34,500 --> 00:54:36,700
I think I've still got like five minutes left or something.

1016
00:54:36,700 --> 00:54:39,000
So I'm going to keep going since we're right in the middle of this and

1017
00:54:39,300 --> 00:54:41,900
got quite a few guys to go.

1018
00:54:41,900 --> 00:54:43,000
So I want to finish this up.

1019
00:54:43,900 --> 00:54:47,600
So again, okay so foreground chunk rendering now we just go.

1020
00:54:47,600 --> 00:54:51,400
Okay, we've got the transform their past, the transform in and that's

1021
00:54:51,400 --> 00:54:51,900
good.

1022
00:54:52,700 --> 00:54:55,800
We've got pushed wrecked outline, which can use the exact same

1023
00:54:55,800 --> 00:54:57,600
transform so that a lineup

1024
00:55:01,200 --> 00:55:04,700
And then out here, this would have been using no transform at all.

1025
00:55:05,000 --> 00:55:08,500
So we could actually just right here, do like default flat transform.

1026
00:55:09,700 --> 00:55:10,800
It's just call it right in place.

1027
00:55:10,800 --> 00:55:13,200
We don't even really need to do anything else because it'll just go

1028
00:55:13,200 --> 00:55:14,700
struck the 0 value for us.

1029
00:55:14,700 --> 00:55:20,600
If we want to hear when we're doing this render group offset P.

1030
00:55:20,600 --> 00:55:21,800
This is a perfect example.

1031
00:55:21,800 --> 00:55:25,300
Now, this Global in this kind of goes away, we can just do object,

1032
00:55:25,300 --> 00:55:34,800
transform entity transform and actually do default, upright transform.

1033
00:55:35,100 --> 00:55:38,800
And then we just set its offset p and now there's no

1034
00:55:39,100 --> 00:55:41,200
Leftover icky State nonsense.

1035
00:55:41,200 --> 00:55:45,900
And then everyone just passes this one when, as they're doing their

1036
00:55:45,900 --> 00:55:47,900
push bitmap calls, right?

1037
00:55:50,600 --> 00:55:51,800
Super straightforward.

1038
00:55:59,200 --> 00:55:59,800
Here we go.

1039
00:56:02,900 --> 00:56:05,400
And so, this is a really basic code transformation, right?

1040
00:56:05,400 --> 00:56:08,500
All I'm doing is I'm taking Global variable and I'm making us a thing

1041
00:56:08,500 --> 00:56:09,800
that gets passed as a parameter.

1042
00:56:09,800 --> 00:56:10,400
That's it.

1043
00:56:10,900 --> 00:56:14,400
But in doing, so I get rid of that weird, like state that sits around

1044
00:56:14,400 --> 00:56:17,600
and in that way, you can have multiple ones in Flight, any given time,

1045
00:56:18,100 --> 00:56:19,600
and there's no weird confusion.

1046
00:56:20,900 --> 00:56:21,300
Oops,

1047
00:56:23,000 --> 00:56:23,600
Cuz there.

1048
00:56:26,100 --> 00:56:29,700
So yeah, I don't know where the particles go.

1049
00:56:29,700 --> 00:56:32,400
We're not really I don't even think we kept the particles working.

1050
00:56:32,400 --> 00:56:37,700
So I'm just going to go ahead and stick that stuff in here for now

1051
00:56:38,200 --> 00:56:41,900
that goes there respect outline.

1052
00:56:43,200 --> 00:56:49,600
Okay so for this one project render group Mouse P, this will also be,

1053
00:56:50,000 --> 00:56:53,000
I believe I'm projecting The Entity transform, right?

1054
00:56:53,000 --> 00:56:55,400
Because this is trying to in be in that

1055
00:56:55,500 --> 00:56:56,100
At space.

1056
00:56:57,000 --> 00:56:59,700
And since the Transformer hasn't been modified here,

1057
00:57:00,200 --> 00:57:02,300
That would still be the end of you transform as well.

1058
00:57:02,800 --> 00:57:08,300
Push Vector, outline is this is for the mouse P.

1059
00:57:08,300 --> 00:57:09,300
So this is with orthographic.

1060
00:57:09,300 --> 00:57:12,000
So this is just a default flat transform rights.

1061
00:57:12,000 --> 00:57:14,200
Not going to try to, it's not transferring that at all.

1062
00:57:15,200 --> 00:57:16,600
And so then, where are we?

1063
00:57:16,700 --> 00:57:24,400
This is just our, this is our our cutscene code.

1064
00:57:24,700 --> 00:57:28,500
And so this would be a default flat transform as well, right?

1065
00:57:28,500 --> 00:57:29,600
I've been transformed.

1066
00:57:30,400 --> 00:57:33,800
Transform equals default, but transform.

1067
00:57:34,600 --> 00:57:39,100
And then here, anytime we would have touched the transform, we would

1068
00:57:39,200 --> 00:57:42,300
just get rid of the render group part, and we just use our own local

1069
00:57:42,300 --> 00:57:42,600
one.

1070
00:57:42,900 --> 00:57:46,400
So again, just nice getting rid of like stuff that was sort of being

1071
00:57:46,400 --> 00:57:48,900
in this weird Global State and who knows what was happening to it.

1072
00:57:49,400 --> 00:57:54,000
Just feels better and safer to me to always pass it through, so

1073
00:57:54,000 --> 00:57:55,400
there's none of that weirdness.

1074
00:57:55,700 --> 00:57:58,600
All right, so none of the to overloads for the argument type.

1075
00:57:58,600 --> 00:57:59,900
That's true on push bitmap.

1076
00:58:01,100 --> 00:58:03,900
What is the transform situation here?

1077
00:58:03,900 --> 00:58:08,000
I don't actually know it's not used at all, so that's again, we're

1078
00:58:08,000 --> 00:58:09,200
just be a get default.

1079
00:58:09,200 --> 00:58:09,900
Flat transformed.

1080
00:58:09,900 --> 00:58:10,700
There's nothing.

1081
00:58:14,100 --> 00:58:14,500
Right.

1082
00:58:17,200 --> 00:58:19,100
Get bitmap Dimensions.

1083
00:58:20,300 --> 00:58:22,800
So that also does need to take it, I guess.

1084
00:58:28,200 --> 00:58:29,800
Draw a profile in.

1085
00:58:30,800 --> 00:58:32,900
Yep, this is just a default flat Transformers.

1086
00:58:32,900 --> 00:58:34,300
Well, no transform.

1087
00:58:35,800 --> 00:58:41,900
In fact, these guys probably just want to have a no transform of at

1088
00:58:41,900 --> 00:58:42,500
the top.

1089
00:58:44,300 --> 00:58:47,200
Transform, transform to fall flat.

1090
00:58:47,200 --> 00:58:47,900
Transform.

1091
00:58:50,200 --> 00:58:51,500
and,

1092
00:58:54,300 --> 00:58:55,000
Put it in there.

1093
00:59:01,600 --> 00:59:02,500
Okay.

1094
00:59:07,200 --> 00:59:10,200
Yeah, probably still just want no transform because these guys just

1095
00:59:10,200 --> 00:59:12,200
don't get these guys just aren't using transforms.

1096
00:59:25,400 --> 00:59:26,100
Good, good.

1097
00:59:34,000 --> 00:59:36,100
Probably should just make that some kind of constant.

1098
00:59:41,500 --> 00:59:41,900
There we go.

1099
00:59:43,600 --> 00:59:46,000
And last but not least.

1100
00:59:52,100 --> 00:59:57,100
Okay, and so now hopefully everything's exactly the same.

1101
00:59:57,500 --> 00:59:59,800
Like all we did was just remove something that

1102
01:00:00,000 --> 01:00:02,300
a little worried about, but

1103
01:00:04,300 --> 01:00:07,200
it looks like the mouse is still working properly.

1104
01:00:08,500 --> 01:00:12,100
And all this stuff is working properly.

1105
01:00:12,900 --> 01:00:16,000
Doesn't look like our picking is working.

1106
01:00:16,000 --> 01:00:16,700
So hot.

1107
01:00:16,700 --> 01:00:17,200
Oh wait, no.

1108
01:00:17,200 --> 01:00:20,500
That is how it used to work because we don't sort the entities so that

1109
01:00:20,500 --> 01:00:21,500
actually is fine.

1110
01:00:24,700 --> 01:00:25,200
Yeah.

1111
01:00:33,000 --> 01:00:33,400
Yeah.

1112
01:00:34,800 --> 01:00:35,500
Good, good.

1113
01:00:42,700 --> 01:00:45,300
All right, so I'll go ahead and end it there.

1114
01:00:45,800 --> 01:00:48,200
I'm glad we did that because that had been bugging me for a while.

1115
01:00:48,900 --> 01:00:50,800
So let's go ahead and go

1116
01:00:53,000 --> 01:00:53,700
two.

1117
01:00:55,200 --> 01:00:56,700
the Q and the, a

1118
01:01:00,600 --> 01:01:01,400
If I can.

1119
01:01:02,600 --> 01:01:03,400
I'll try.

1120
01:01:25,600 --> 01:01:28,100
Abner coimbra a brace yourself.

1121
01:01:29,000 --> 01:01:29,900
For what?

1122
01:01:31,700 --> 01:01:33,700
That doesn't that sounds ominous Abner.

1123
01:01:53,900 --> 01:01:55,600
What is your preferred sorting method?

1124
01:01:55,800 --> 01:01:57,800
I don't have a preferred sorting method.

1125
01:01:57,900 --> 01:02:03,000
I'm not, I I don't really find that sorting is something.

1126
01:02:03,000 --> 01:02:07,500
I spend a lot of time working on so typically like, like honestly, you

1127
01:02:07,500 --> 01:02:09,600
know, we could ship this game with bubble sort.

1128
01:02:10,700 --> 01:02:12,100
Honestly, honestly, we probably could.

1129
01:02:13,100 --> 01:02:16,400
So like there are plenty of times.

1130
01:02:16,400 --> 01:02:18,100
There are plenty of problems in the world.

1131
01:02:18,100 --> 01:02:21,300
We're sorting is really important and it becomes something you really

1132
01:02:21,300 --> 01:02:22,700
want to know how to do correctly.

1133
01:02:23,600 --> 01:02:27,400
I almost never face those problems and so I don't really have a

1134
01:02:27,400 --> 01:02:28,500
favorite sorting method.

1135
01:02:28,500 --> 01:02:29,100
I find that.

1136
01:02:29,100 --> 01:02:31,700
I just don't spend that much time on sorting tomorrow.

1137
01:02:31,700 --> 01:02:34,400
We'll go over a couple different sorting methods and I'll talk about

1138
01:02:34,400 --> 01:02:37,100
them but I'm not going to like pick one and say you should use this or

1139
01:02:37,100 --> 01:02:37,400
something.

1140
01:02:37,400 --> 01:02:40,300
I'm just going to be like here's sorting every single one of these.

1141
01:02:40,400 --> 01:02:42,700
Would work for our purposes.

1142
01:02:43,200 --> 01:02:46,900
We just won't have a million entities on the screen that need to get

1143
01:02:46,900 --> 01:02:47,300
sorted.

1144
01:02:47,300 --> 01:02:48,600
Like that's not going to happen.

1145
01:02:49,600 --> 01:02:53,100
So you know you're not trying to figure out how to like do the

1146
01:02:53,100 --> 01:02:54,300
ultimate sorting thing.

1147
01:02:55,600 --> 01:02:58,200
and I think part of the reason for that is in games, you have such a

1148
01:02:58,200 --> 01:02:59,800
tight time budget that usually

1149
01:03:00,000 --> 01:03:03,300
Ends up happening, is if you really need a huge number of things

1150
01:03:03,300 --> 01:03:05,400
sorted, you can't afford to sort them every frame.

1151
01:03:05,400 --> 01:03:08,300
Anyway, you've got to keep them roughly sorted and only deal with the

1152
01:03:08,300 --> 01:03:08,900
Deltas.

1153
01:03:09,100 --> 01:03:14,400
So, you end up using something more like a binary tree that keeps

1154
01:03:14,400 --> 01:03:16,000
things sorted all the time.

1155
01:03:18,600 --> 01:03:20,900
If you're actually talking about getting to enough elements where you

1156
01:03:20,900 --> 01:03:25,500
start to care, but who knows that maybe just because the stuff that

1157
01:03:25,500 --> 01:03:29,000
I've worked on in games doesn't happen to use it and you know, maybe

1158
01:03:29,000 --> 01:03:29,800
someone out there it's got a

1159
01:03:30,000 --> 01:03:31,600
Better example of where they use it in the game.

1160
01:03:33,100 --> 01:03:33,600
Hi Kasey.

1161
01:03:33,600 --> 01:03:35,900
I'm currently working on an opengl framework for games.

1162
01:03:35,900 --> 01:03:40,500
Wanted to ask, whether I can use the code up to De 23 with the intent

1163
01:03:40,500 --> 01:03:41,500
of making a commercial game.

1164
01:03:41,500 --> 01:03:45,000
Eventually with it might be important to note that I'm also streaming.

1165
01:03:45,000 --> 01:03:47,400
So the code might be visible sometimes when I stream framework

1166
01:03:47,400 --> 01:03:51,900
development, yeah, if you want to use, if you want to use up through

1167
01:03:51,900 --> 01:03:53,500
day 23, that's totally fine.

1168
01:03:57,900 --> 01:03:58,300
Gimpy.

1169
01:03:58,300 --> 01:04:02,100
CPU, I know you said you really like discriminated unions.

1170
01:04:02,100 --> 01:04:04,700
But how do you deal with managing the big case?

1171
01:04:04,700 --> 01:04:09,900
Which they may cause that is usually handled by the up model by

1172
01:04:09,900 --> 01:04:11,000
delegating to the object.

1173
01:04:12,000 --> 01:04:15,000
Well so I guess I would say

1174
01:04:18,400 --> 01:04:19,400
I guess I would say.

1175
01:04:21,000 --> 01:04:23,300
It's six of one half dozen of the other, right?

1176
01:04:24,200 --> 01:04:29,500
There's to me there's no difference between like you know, let me let

1177
01:04:29,500 --> 01:04:31,800
me take some place where we have a switch statement.

1178
01:04:32,100 --> 01:04:34,500
So let's take like here.

1179
01:04:37,600 --> 01:04:40,800
So here is an example like of a switch statement, right?

1180
01:04:40,900 --> 01:04:43,600
And and here I'm going to go down to the bottom of this.

1181
01:04:45,900 --> 01:04:47,600
And I'm just going to take it, right?

1182
01:04:48,000 --> 01:04:50,800
So here is the switch statement.

1183
01:04:57,200 --> 01:05:01,300
And what you're sort of saying is like, well, how do you deal with

1184
01:05:01,300 --> 01:05:02,300
this switch statement?

1185
01:05:03,200 --> 01:05:06,200
Now, first of all, my first question is, why is the switch statement

1186
01:05:06,200 --> 01:05:07,900
of problem, right?

1187
01:05:08,800 --> 01:05:11,300
Because I don't know it's not a problem for me.

1188
01:05:12,100 --> 01:05:14,800
So you must have some reason why it's a problem.

1189
01:05:14,900 --> 01:05:16,400
I don't necessarily know what that is.

1190
01:05:17,200 --> 01:05:18,900
So I would come need to know what that is first.

1191
01:05:18,900 --> 01:05:23,500
But the second thing I would say is why do you think that dispatch

1192
01:05:23,700 --> 01:05:25,900
solves any problem?

1193
01:05:25,900 --> 01:05:30,000
That a switch statement might be, might have there really isn't

1194
01:05:30,000 --> 01:05:32,500
anything that it does, because all it does is.

1195
01:05:32,500 --> 01:05:32,900
It means,

1196
01:05:33,000 --> 01:05:36,000
You have to now take what used to be here?

1197
01:05:36,500 --> 01:05:38,000
You're going to do something like this.

1198
01:05:41,200 --> 01:05:41,700
Right.

1199
01:05:42,100 --> 01:05:44,100
You're going to you're going to replace all this code with something

1200
01:05:44,100 --> 01:05:45,000
that looks like that.

1201
01:05:45,300 --> 01:05:47,800
And then, you're going to have to write this.

1202
01:06:13,700 --> 01:06:15,400
now, if you'll note,

1203
01:06:16,500 --> 01:06:21,600
What you end up with is exactly the same thing.

1204
01:06:28,600 --> 01:06:30,700
It's the same, right?

1205
01:06:31,000 --> 01:06:35,700
There's no difference between these two pieces of code, you had to

1206
01:06:35,700 --> 01:06:38,300
write exactly the same code in both cases.

1207
01:06:38,800 --> 01:06:42,400
So for some reason, people like can't handle the concept that a switch

1208
01:06:42,400 --> 01:06:42,700
statement.

1209
01:06:42,700 --> 01:06:45,000
Just has the code one after the other.

1210
01:06:45,000 --> 01:06:49,300
Instead of spewing it out to a bunch of unrelated files which to me

1211
01:06:49,300 --> 01:06:50,300
seems strictly worse.

1212
01:06:50,600 --> 01:06:54,900
But I just want to underscore a switch statement and a dispatch are

1213
01:06:54,900 --> 01:06:55,900
exactly the same.

1214
01:06:55,900 --> 01:06:58,200
There is absolutely no difference to them other than

1215
01:06:58,400 --> 01:07:01,100
Back that the switch statement has the advantage of putting

1216
01:07:01,100 --> 01:07:03,700
everything, the programmer needs to know about that operation in one

1217
01:07:03,700 --> 01:07:04,200
place.

1218
01:07:04,500 --> 01:07:07,500
So they know if they change something about it, how it ends up going

1219
01:07:07,500 --> 01:07:08,500
together, right?

1220
01:07:08,500 --> 01:07:12,000
Whereas this one might have a potential advantage of, putting

1221
01:07:12,000 --> 01:07:15,200
everything for a particular type of thing in one place.

1222
01:07:15,300 --> 01:07:18,000
So if you change something about that type you can change it.

1223
01:07:18,000 --> 01:07:18,400
Right?

1224
01:07:18,500 --> 01:07:24,100
So one is one is Operation Centric and one is type Centric and I find

1225
01:07:24,100 --> 01:07:25,900
that typically I'd prefer type sent.

1226
01:07:25,900 --> 01:07:28,100
I prefer operation Centric because it's

1227
01:07:28,300 --> 01:07:31,400
The operation that tends to get changed as a whole, much more than the

1228
01:07:31,400 --> 01:07:36,300
type tends to in ways that need to get seen together.

1229
01:07:36,700 --> 01:07:38,600
Right for me.

1230
01:07:39,800 --> 01:07:46,100
But you know, your mileage may vary in the case of this sort of code,

1231
01:07:46,400 --> 01:07:50,300
I also really don't like separating it out like this because now

1232
01:07:50,300 --> 01:07:53,700
there's no shared variables between this code, right?

1233
01:07:53,800 --> 01:07:58,200
I if I want to share anything, I got a pass it so I can't do.

1234
01:07:58,400 --> 01:07:58,600
Stuff.

1235
01:07:58,600 --> 01:08:01,800
Like just have a bunch of things up here, like, null pixels to meters

1236
01:08:01,800 --> 01:08:02,100
or something.

1237
01:08:02,100 --> 01:08:06,200
It's just defined and everyone can use it or they gets computed or a

1238
01:08:06,200 --> 01:08:09,200
piece of code that happens the same between everybody that always

1239
01:08:09,200 --> 01:08:09,900
happens before.

1240
01:08:09,900 --> 01:08:14,800
And after I have to start making like base classes to do that and all

1241
01:08:14,800 --> 01:08:17,700
this other nonsense, when it would have just been right in line.

1242
01:08:18,399 --> 01:08:20,300
So I tend to really hate this.

1243
01:08:20,300 --> 01:08:24,399
I don't like the fact that programmers do this and I actually prefer

1244
01:08:24,399 --> 01:08:25,000
this way.

1245
01:08:25,399 --> 01:08:28,100
So my sort of long

1246
01:08:28,300 --> 01:08:31,100
The answer to how do you handle such things as I like switch

1247
01:08:31,100 --> 01:08:31,500
statements?

1248
01:08:31,500 --> 01:08:32,300
I think they're great.

1249
01:08:32,300 --> 01:08:33,800
I think they're the correct way to program.

1250
01:08:34,100 --> 01:08:36,899
I actually don't think this is a very good way to program.

1251
01:08:38,200 --> 01:08:39,399
I think it's got a lot of drawbacks.

1252
01:08:42,700 --> 01:08:45,500
Colonel Dragon obviously we lost some performance of the last couple

1253
01:08:45,500 --> 01:08:46,100
streams.

1254
01:08:46,100 --> 01:08:48,200
Are you playing to try to optimize it back down or just leave the

1255
01:08:48,200 --> 01:08:50,600
software under as is and move into GPU rendering?

1256
01:08:52,000 --> 01:08:55,700
I don't know, I think probably what I would like to do is use it as an

1257
01:08:55,700 --> 01:08:56,200
impetus.

1258
01:08:56,399 --> 01:08:59,800
After we're done with a few more things to go back and finish, the

1259
01:09:00,000 --> 01:09:04,300
Debug view stuff because so that we could actually investigate like,

1260
01:09:04,300 --> 01:09:05,899
where the performance went, right?

1261
01:09:06,600 --> 01:09:10,200
Obviously, we know a little bit bit of it went to the fact that now we

1262
01:09:10,200 --> 01:09:13,200
draw way too much stuff and that will that's a majority of it

1263
01:09:13,200 --> 01:09:15,800
actually, but we also don't know if we did other things and so on and

1264
01:09:15,800 --> 01:09:16,300
so forth.

1265
01:09:17,300 --> 01:09:21,399
So, you know, I would like to do that and then I would like to at that

1266
01:09:21,399 --> 01:09:22,100
point make a decision.

1267
01:09:22,100 --> 01:09:25,000
Do we want to do optimization on the software under?

1268
01:09:25,000 --> 01:09:25,800
I do want to move on

1269
01:09:34,899 --> 01:09:37,500
Elven a lot of times when you develop something, you write is the

1270
01:09:37,500 --> 01:09:38,700
simplest way.

1271
01:09:39,300 --> 01:09:41,899
A lot of times you develop something, you write it in the simplest

1272
01:09:41,899 --> 01:09:42,600
way, that just works.

1273
01:09:42,600 --> 01:09:45,000
Then you polish it to something good and we're finished.

1274
01:09:45,800 --> 01:09:48,000
EG what you did with D sound.

1275
01:09:48,500 --> 01:09:51,600
I don't think we ever finished anything with D sound, but okay, for

1276
01:09:51,600 --> 01:09:52,200
someone catching up.

1277
01:09:52,200 --> 01:09:54,500
Do you think it's good enough to just study and focus on the better

1278
01:09:54,500 --> 01:09:54,900
version?

1279
01:09:54,900 --> 01:09:57,500
Or is there value in writing the initial version ourselves?

1280
01:09:58,100 --> 01:09:59,800
Yeah, you want to go through the whole process.

1281
01:09:59,800 --> 01:10:03,700
That's the reason why I'm doing handmade hero is because it's the

1282
01:10:03,900 --> 01:10:07,000
What you need to learn like you need to learn how to do that because

1283
01:10:07,900 --> 01:10:11,400
if all you do is study my finished version, the only thing you're ever

1284
01:10:11,400 --> 01:10:14,100
going to be able to write is that finished version, but you don't want

1285
01:10:14,100 --> 01:10:14,500
to do that.

1286
01:10:14,500 --> 01:10:17,300
Like, you want to be able to adapt and make new things and make better

1287
01:10:17,300 --> 01:10:20,600
things than what I wrote and make things that are better for your

1288
01:10:20,600 --> 01:10:23,900
specific case than what I wrote and you're only going to do that.

1289
01:10:23,900 --> 01:10:28,800
If you know the steps and then you apply the steps but you apply them

1290
01:10:29,300 --> 01:10:32,000
to a different problem or a different way or towards a different end

1291
01:10:32,100 --> 01:10:33,600
or with more cleverness than I did.

1292
01:10:33,800 --> 01:10:34,300
Right?

1293
01:10:34,300 --> 01:10:37,400
And you get a better result for a more appropriate result or anything

1294
01:10:37,400 --> 01:10:38,200
else, right?

1295
01:10:40,000 --> 01:10:40,600
So yeah.

1296
01:10:47,600 --> 01:10:48,500
Snuffy crystals.

1297
01:10:48,500 --> 01:10:50,800
Hey Casey, I just found your series and was amazed that you're

1298
01:10:50,800 --> 01:10:53,900
creating entire game without using external Library like sdl from what

1299
01:10:53,900 --> 01:10:55,300
your episode 1 said, at least.

1300
01:10:55,300 --> 01:10:57,500
I really wanted to watch your progress through the series but I have

1301
01:10:57,500 --> 01:11:00,400
no idea where to start in the 200-plus episode since I'm already

1302
01:11:00,400 --> 01:11:01,900
working on sdl opengl game.

1303
01:11:01,900 --> 01:11:02,900
What is your suggestion?

1304
01:11:05,900 --> 01:11:08,200
I would say, probably.

1305
01:11:10,700 --> 01:11:16,900
I would say probably you'd have to go by the playlists that are on my

1306
01:11:16,900 --> 01:11:22,800
YouTube channel and try to work for that because we don't tend to

1307
01:11:22,800 --> 01:11:23,900
really segregate stuff.

1308
01:11:23,900 --> 01:11:26,900
We tend to work on stuff as I normally would, which is bouncing around

1309
01:11:26,900 --> 01:11:28,700
to whatever needs doing at a particular time.

1310
01:11:29,000 --> 01:11:31,100
So it doesn't tend to be super segregated.

1311
01:11:31,100 --> 01:11:34,700
Like, you know, sometimes we're working on the software renderer and

1312
01:11:34,700 --> 01:11:38,500
we'll might go do something that's in the debug system or whatever.

1313
01:11:38,500 --> 01:11:39,800
Like we don't necessarily

1314
01:11:40,000 --> 01:11:41,000
Always go in chunks.

1315
01:11:41,500 --> 01:11:42,900
So you may have to lean on the playlist.

1316
01:11:42,900 --> 01:11:45,700
A little, if you're trying to avoid stuff like software rendering

1317
01:11:45,700 --> 01:11:46,600
because you don't want to know,

1318
01:11:49,900 --> 01:11:50,500
Quarter truant.

1319
01:11:50,500 --> 01:11:52,800
I can't remember if you discussed this when I first cropped up.

1320
01:11:52,800 --> 01:11:55,700
But when you are halfway up the stairs and blending, the trees, you

1321
01:11:55,700 --> 01:11:59,200
get a darker area, where they overlap, what's the fix for that?

1322
01:12:00,800 --> 01:12:04,600
so unfortunately, there really isn't a fix for that other than using

1323
01:12:04,600 --> 01:12:09,100
two-stage blending, which is

1324
01:12:10,100 --> 01:12:15,600
Not great but it's really simple.

1325
01:12:15,600 --> 01:12:16,500
It's just expensive.

1326
01:12:18,400 --> 01:12:21,900
So anyway, what happens is we talked about this?

1327
01:12:21,900 --> 01:12:24,000
I thought at the time but I guess I may be in there.

1328
01:12:24,000 --> 01:12:24,700
So what the solution is.

1329
01:12:25,800 --> 01:12:30,000
So if you've got two trees, normally what happens is you draw this

1330
01:12:30,000 --> 01:12:31,400
tree and you draw this tree on top of it.

1331
01:12:31,900 --> 01:12:36,900
But if we then take an alpha value and we Alpha those together so that

1332
01:12:37,000 --> 01:12:38,700
you know, they're these are translucent.

1333
01:12:39,500 --> 01:12:41,800
Now, what you'll get is to get a darker, it part thing here.

1334
01:12:42,800 --> 01:12:46,600
So when we want to fade out an entire level, we don't really want to

1335
01:12:46,600 --> 01:12:47,800
fade out each thing individually.

1336
01:12:47,800 --> 01:12:51,100
What we want to do is figure out the whole thing as a as one giant

1337
01:12:51,100 --> 01:12:51,700
sheet.

1338
01:12:51,700 --> 01:12:55,200
So what you need to do first is you need to First composite everything

1339
01:12:55,200 --> 01:12:57,400
that you're going to fade out, right?

1340
01:13:00,500 --> 01:13:04,500
And then you do the whole thing as one giant Op with a particular,

1341
01:13:04,500 --> 01:13:09,800
Alpha value of whatever it is, so that it all gets faded out as one

1342
01:13:09,800 --> 01:13:10,500
sheet.

1343
01:13:11,400 --> 01:13:12,900
That's unfortunately, the only way to do it,

1344
01:13:29,500 --> 01:13:33,400
Let's see, it's standard qsort worth using compared to Rolling your

1345
01:13:33,400 --> 01:13:34,000
own.

1346
01:13:34,500 --> 01:13:40,900
Um I guess I would say as quicksort is pretty simple to implement.

1347
01:13:43,700 --> 01:13:44,700
so, like

1348
01:13:46,200 --> 01:13:48,200
I don't even know if the questions worth asking.

1349
01:13:49,900 --> 01:13:54,500
It's so easy to write a qsort that that it doesn't matter.

1350
01:13:54,500 --> 01:13:56,600
Like you could call the C runtime Library one, if you're using C

1351
01:13:56,600 --> 01:14:00,400
runtime Library already or you can just write your own and

1352
01:14:02,500 --> 01:14:06,700
I mean, quicksort is not complicated, will do one.

1353
01:14:08,400 --> 01:14:10,600
We'll do one tomorrow will probably do mergesort tomorrow but we'll do

1354
01:14:10,600 --> 01:14:11,400
a quick sort, as well.

1355
01:14:11,400 --> 01:14:14,100
Or at least I'll say how to do it and you can see that's not very hard

1356
01:14:15,800 --> 01:14:16,700
and like anything else.

1357
01:14:16,700 --> 01:14:18,900
You could write it once and just save it in a file and then have it

1358
01:14:18,900 --> 01:14:19,300
forever.

1359
01:14:19,300 --> 01:14:21,600
So, it's not like you have to write it like every time, right?

1360
01:14:24,800 --> 01:14:30,000
NORAD 91, how would you deal with collisions between multiple

1361
01:14:30,000 --> 01:14:33,100
entities, in terms of collision resolution, not detection like

1362
01:14:33,100 --> 01:14:35,500
deciding, how to resolve conflicts to be, multiple moving things.

1363
01:14:35,800 --> 01:14:37,100
I kind of hit a wall.

1364
01:14:37,400 --> 01:14:40,600
They're not seeing solutions that aren't very ugly, especially moving

1365
01:14:40,600 --> 01:14:43,800
or dependency to be honest.

1366
01:14:43,800 --> 01:14:48,000
I don't think there is much of a great solution to that problem.

1367
01:14:48,600 --> 01:14:52,200
You tend to have to introduce some kind of logic for it that involves

1368
01:14:52,200 --> 01:14:53,700
like precedents or something like that.

1369
01:14:57,000 --> 01:14:59,800
Because computers just aren't good at doing continuous.

1370
01:15:00,000 --> 01:15:00,900
Solution of things.

1371
01:15:01,000 --> 01:15:02,900
They always want to do discrete things.

1372
01:15:03,300 --> 01:15:06,700
And so it's really very difficult.

1373
01:15:07,200 --> 01:15:10,600
I mean, even the universe doesn't solve this problem might be one way

1374
01:15:10,600 --> 01:15:11,300
to say it.

1375
01:15:11,300 --> 01:15:14,600
Even the universe boils down to a bunch of molecules that have

1376
01:15:14,600 --> 01:15:17,600
discrete kind of collisions with each other at some level.

1377
01:15:18,600 --> 01:15:20,000
I mean, I guess we don't know.

1378
01:15:21,700 --> 01:15:22,400
We don't really know.

1379
01:15:22,400 --> 01:15:24,700
We have no idea what makes up gravity and those sorts of things, I

1380
01:15:24,700 --> 01:15:25,000
suppose.

1381
01:15:25,000 --> 01:15:26,200
So it's far be it for me to say.

1382
01:15:26,200 --> 01:15:31,600
But I guess what I'm saying is even the universe, doesn't try to

1383
01:15:31,600 --> 01:15:34,900
actually resolve rigidbody multiple rigid body collisions at once.

1384
01:15:35,200 --> 01:15:38,600
It thinks about it in terms of atoms and like sums, all those up to

1385
01:15:38,600 --> 01:15:40,200
get the rigid body collision, right?

1386
01:15:40,600 --> 01:15:47,300
And so you're inherently working with an abstraction over the real

1387
01:15:47,300 --> 01:15:48,700
physical occurrence.

1388
01:15:49,000 --> 01:15:51,300
And the only way that you can really

1389
01:15:51,500 --> 01:15:54,300
Handle that abstraction is by having some kind of rule about how

1390
01:15:54,300 --> 01:15:55,900
things resolved.

1391
01:15:55,900 --> 01:16:01,300
And so typically you know the one way to do it that's fairly

1392
01:16:01,700 --> 01:16:04,600
reasonable and not to physically and accurate is to use actually use

1393
01:16:04,600 --> 01:16:05,200
Mass.

1394
01:16:05,500 --> 01:16:08,800
So when you move things you you know you're moving things and you try

1395
01:16:08,800 --> 01:16:12,600
to resolve their collisions based on mass and collision actual cousin

1396
01:16:12,600 --> 01:16:13,200
response.

1397
01:16:13,800 --> 01:16:16,600
So that heavier things, take precedence over lighter, things

1398
01:16:16,800 --> 01:16:19,700
precedents, in terms of how much they move out of the way and that

1399
01:16:19,700 --> 01:16:20,600
sort of stuff, right?

1400
01:16:28,400 --> 01:16:31,000
Robert you said scaling value is not used with the camera transfers.

1401
01:16:31,000 --> 01:16:32,200
Everything what is the difference?

1402
01:16:32,700 --> 01:16:36,500
The difference is we use the camera to do a perspective transform to

1403
01:16:36,500 --> 01:16:41,200
scale things and that scale gets used.

1404
01:16:41,600 --> 01:16:45,800
But we also had a scale value, we passed in but as far as I can tell,

1405
01:16:45,800 --> 01:16:47,000
we never use that's going by you.

1406
01:16:47,000 --> 01:16:50,900
So we don't ever scale anything everything's always the same size I

1407
01:16:50,900 --> 01:16:56,500
guess as far as its passing through the transform but I don't actually

1408
01:16:56,500 --> 01:16:57,100
know maybe

1409
01:16:57,300 --> 01:16:58,000
That's not true.

1410
01:17:02,000 --> 01:17:03,500
I didn't actually go investigate.

1411
01:17:03,500 --> 01:17:06,200
That can delete all this here.

1412
01:17:10,800 --> 01:17:11,900
I don't really know.

1413
01:17:11,900 --> 01:17:13,600
I think the scale we do allow skiing.

1414
01:17:13,600 --> 01:17:17,500
So the scale I think what happens is the scale takes effect earlier is

1415
01:17:17,500 --> 01:17:19,800
probably what happens, right?

1416
01:17:24,000 --> 01:17:24,800
Yeah, here it is.

1417
01:17:25,100 --> 01:17:26,500
So this is where it happens.

1418
01:17:26,600 --> 01:17:30,200
So really what we do is we just pretend the bitmap is larger so it

1419
01:17:30,200 --> 01:17:33,700
does get used it just gets used before that part of the pipeline.

1420
01:17:44,400 --> 01:17:44,700
Car.

1421
01:17:44,700 --> 01:17:45,500
1948.

1422
01:17:45,500 --> 01:17:47,200
What keyboard are using these days, huh?

1423
01:17:48,100 --> 01:17:49,000
I'm using question.

1424
01:17:50,200 --> 01:17:51,200
You said I know your kind of Sir.

1425
01:17:51,200 --> 01:17:54,900
I'd love to hear Recreation my recommendation is the razor Stealth Pro

1426
01:17:54,900 --> 01:17:55,900
tournament Edition?

1427
01:17:56,000 --> 01:17:57,200
Absolutely loved it.

1428
01:17:57,500 --> 01:17:59,100
It is not what I'm typing on right now.

1429
01:17:59,300 --> 01:17:59,900
Why is it that?

1430
01:18:00,300 --> 01:18:03,900
Right now because like an idiot, I spilled water on it and destroyed

1431
01:18:03,900 --> 01:18:04,600
the thing.

1432
01:18:06,200 --> 01:18:08,800
And they're relatively expensive, they're like 70 bucks or something.

1433
01:18:09,300 --> 01:18:12,600
So I haven't bought a new one yet, but if I had infinite money, I just

1434
01:18:12,600 --> 01:18:18,600
would have bought a new one because they were my favorite and

1435
01:18:20,800 --> 01:18:22,700
And that's my current recommendation for the keyboard.

1436
01:18:22,700 --> 01:18:23,500
I like the most

1437
01:18:26,000 --> 01:18:28,800
Culver fly, how would a front-to-back render actually work but it test

1438
01:18:28,800 --> 01:18:30,100
every pixel before writing to it.

1439
01:18:30,200 --> 01:18:32,000
No, there's two different ways that would work.

1440
01:18:32,400 --> 01:18:37,400
One is that they just work in blocks of the screen and they do it

1441
01:18:37,400 --> 01:18:38,000
semantically.

1442
01:18:38,000 --> 01:18:42,600
So you use rectangles basically, you take your bitmaps and you assign

1443
01:18:42,600 --> 01:18:43,700
rectangles to your bitmaps.

1444
01:18:43,700 --> 01:18:47,700
That's the rectangle that is the fully opaque part, right.

1445
01:18:48,400 --> 01:18:52,100
And you can assign multiple if you want and then you just Union those

1446
01:18:52,100 --> 01:18:54,900
rectangles together and make sort of a

1447
01:18:55,700 --> 01:18:59,500
If you sort of a mask, if you will, in rectangle space so that you can

1448
01:18:59,500 --> 01:19:04,100
just clip things directly to that mask and never even start rendering

1449
01:19:04,100 --> 01:19:08,900
them, if they are behind stuff, that's the way that you do it

1450
01:19:08,900 --> 01:19:12,900
semantically, or you can do it inside the rasterizer, by having a

1451
01:19:12,900 --> 01:19:19,200
flag, that says, whether all the pixels in some chunk are filled and

1452
01:19:19,400 --> 01:19:20,700
it's like a mask.

1453
01:19:20,700 --> 01:19:25,400
So it's like, you know, imagine a 6 and 8 by 8 square.

1454
01:19:25,700 --> 01:19:29,500
And you have one 64-bit value that says, which things are filled and

1455
01:19:29,500 --> 01:19:33,900
you look at the mask and if, if that mask says, you know, everything

1456
01:19:33,900 --> 01:19:34,200
is filled.

1457
01:19:34,200 --> 01:19:37,500
You just don't you just skip that chunk entirely, it's early out.

1458
01:19:37,500 --> 01:19:40,700
That's how that's more how a graphics card actually does it because

1459
01:19:40,700 --> 01:19:44,900
the graphics card has to do early easy stuff and it doesn't have the

1460
01:19:44,900 --> 01:19:47,700
luxury of doing weird like Symantec things like we could do.

1461
01:19:57,400 --> 01:19:57,600
Mr.

1462
01:19:57,600 --> 01:20:01,100
First Dimension does multiple dispatch come up for you much as in and

1463
01:20:01,100 --> 01:20:04,300
types with N squared branches, how do you handle it when it does?

1464
01:20:05,500 --> 01:20:07,200
No, it doesn't come up very much.

1465
01:20:07,400 --> 01:20:14,500
And the reason for that is usually N squared in programming in terms

1466
01:20:14,500 --> 01:20:18,600
of code, is usually just as bad as N squared in programming in terms

1467
01:20:18,600 --> 01:20:20,600
of actual like, algorithms.

1468
01:20:21,500 --> 01:20:24,400
If you have something that's an N squared, dispatch it won't scale

1469
01:20:25,300 --> 01:20:26,700
because you know, if you

1470
01:20:26,800 --> 01:20:28,100
N squared, different things.

1471
01:20:28,100 --> 01:20:33,200
That means if there's 30 different types in your system, you have 900

1472
01:20:33,200 --> 01:20:35,400
pieces of code, you have to test it, right?

1473
01:20:35,400 --> 01:20:37,700
And test and make sure work, right?

1474
01:20:38,600 --> 01:20:39,800
And that's just really difficult.

1475
01:20:40,000 --> 01:20:42,400
So, typically, if I have something that looks like it's going in

1476
01:20:42,400 --> 01:20:48,200
squared, I try to break it into some kind of more fundamental set of

1477
01:20:48,200 --> 01:20:50,200
types either where the types are much smaller.

1478
01:20:50,200 --> 01:20:53,000
So that the branch count is low enough, meaning, okay?

1479
01:20:53,000 --> 01:20:55,900
There were 30, but I broke it down to four fundamental categories with

1480
01:20:55,900 --> 01:20:56,400
parameters.

1481
01:20:56,400 --> 01:20:56,600
So,

1482
01:20:56,800 --> 01:20:59,700
now, it's only 16 total things, so the n

1483
01:21:00,000 --> 01:21:03,000
Not so bad so because the ends lower or I try to make it so that it's

1484
01:21:03,000 --> 01:21:06,400
not squared anymore by again refactoring, what I'm doing into a way

1485
01:21:06,400 --> 01:21:07,900
that allows it to not work that way.

1486
01:21:09,500 --> 01:21:12,800
I don't find that comes up that often, but that's not to say that

1487
01:21:12,800 --> 01:21:13,600
doesn't come up.

1488
01:21:14,300 --> 01:21:15,900
So you do have to think about it.

1489
01:21:15,900 --> 01:21:18,900
And, you know, like I said, there's, there's different strategies for

1490
01:21:18,900 --> 01:21:20,100
approaching it, which one would work?

1491
01:21:20,100 --> 01:21:22,000
The best usually depends on the situation.

1492
01:21:30,700 --> 01:21:33,500
Narada 91 would you rather have an explicit fall through statement

1493
01:21:33,500 --> 01:21:34,600
with an implicit break?

1494
01:21:34,600 --> 01:21:36,200
Instead of standard switch statements?

1495
01:21:36,500 --> 01:21:38,500
Yes, I would seems much cleaner to me.

1496
01:21:38,500 --> 01:21:39,600
Or am I missing something?

1497
01:21:39,600 --> 01:21:40,800
I don't think you're missing anything.

1498
01:21:40,800 --> 01:21:42,200
I think that would be much better.

1499
01:21:43,500 --> 01:21:46,600
In fact the probably the way I would do it is the break would always

1500
01:21:46,600 --> 01:21:50,700
be implied, it's always there and then yeah you would do something

1501
01:21:50,700 --> 01:21:57,000
like fall through like that and it's a different thing, right?

1502
01:21:58,300 --> 01:21:59,100
Something like that.

1503
01:22:01,800 --> 01:22:03,500
Especially since I usually don't use it.

1504
01:22:03,600 --> 01:22:08,100
I hardly ever use that really, I could get by almost probably entirely

1505
01:22:08,100 --> 01:22:10,100
with just this something like that.

1506
01:22:10,100 --> 01:22:12,800
Where you say, here's this, this is a bunch of cases together.

1507
01:22:12,900 --> 01:22:14,000
That's really all I would need.

1508
01:22:14,000 --> 01:22:17,400
I don't, you know, usually when I use fall through, I'm using it like

1509
01:22:17,400 --> 01:22:18,900
this, right?

1510
01:22:19,700 --> 01:22:22,700
Which doesn't really even need the fall through part of it much.

1511
01:22:22,700 --> 01:22:27,300
I'm just saying, hey these two types, both are the same result.

1512
01:22:42,400 --> 01:22:43,900
That's what I was afraid of a thought.

1513
01:22:43,900 --> 01:22:46,800
Maybe you had some trick, like a messed-up precomputed Alpha.

1514
01:22:47,100 --> 01:22:48,500
I don't think there is a trick.

1515
01:22:48,600 --> 01:22:52,500
I remember, I think even asking Shawn Barrett since he's like mr.

1516
01:22:52,500 --> 01:22:53,800
Alpha oh, mr.

1517
01:22:53,800 --> 01:22:54,900
Old-school, Alpha guy.

1518
01:22:55,500 --> 01:22:58,000
If there was anything, and he didn't seem to think so.

1519
01:22:58,000 --> 01:23:00,800
And if he doesn't think so, then there probably isn't

1520
01:23:05,600 --> 01:23:09,800
Alrighty, I think we're out of time here, so let me see if there's any

1521
01:23:09,800 --> 01:23:11,300
other last questions.

1522
01:23:17,000 --> 01:23:19,900
I know we just got over the holiday break, but will there be a

1523
01:23:19,900 --> 01:23:22,000
break-in handmade here when the witness launches?

1524
01:23:23,700 --> 01:23:25,000
Probably not know,

1525
01:23:36,600 --> 01:23:40,100
Robbie, are you productive feel good at programming?

1526
01:23:40,100 --> 01:23:42,600
No matter how many hours you work per week.

1527
01:23:46,000 --> 01:23:47,500
I don't think the number of hours.

1528
01:23:47,500 --> 01:23:50,400
I work per week, really have anything to do with it.

1529
01:23:50,600 --> 01:23:55,300
It's how many unknown problems I have to encounter really

1530
01:23:58,400 --> 01:23:59,600
That's that's mostly it.

1531
01:24:00,000 --> 01:24:03,500
If I just have a bunch of stuff to do that, I know how to do.

1532
01:24:04,000 --> 01:24:06,200
I can just work all week and it's really not a problem.

1533
01:24:08,000 --> 01:24:10,600
Usually what, what slows me down is when I have to hit something where

1534
01:24:10,600 --> 01:24:13,300
I'm just really, not sure what the right answer is and I need to play

1535
01:24:13,300 --> 01:24:16,100
around with it and sometimes I'm not sure what to do to play around,

1536
01:24:16,100 --> 01:24:20,000
sometimes that can be difficult and that is usually easier.

1537
01:24:20,000 --> 01:24:23,100
When you're fresh to like, push through those, it's usually easier

1538
01:24:23,100 --> 01:24:27,400
when you're fresh and so that maybe would have more to do with like,

1539
01:24:27,500 --> 01:24:29,600
oh, too many hours of that could be bad.

1540
01:24:31,800 --> 01:24:35,100
Where it's like, if it's just stuff I just you know just got to do

1541
01:24:35,100 --> 01:24:37,700
this code, it's not always.

1542
01:24:37,700 --> 01:24:41,000
So it's not always really a problem for four hours.

1543
01:24:41,600 --> 01:24:43,600
All right, that's it.

1544
01:24:44,400 --> 01:24:46,300
I'm going to go ahead and close up shop here.

1545
01:24:47,400 --> 01:24:49,900
Save the old Blackboard.

1546
01:24:52,000 --> 01:24:54,100
Thanks everyone for joining me for this episode of ham be here.

1547
01:24:54,100 --> 01:24:55,000
It's been a pleasure working with you.

1548
01:24:55,000 --> 01:24:55,500
As always.

1549
01:24:55,500 --> 01:24:58,500
If you want to follow along with serious at home, you can always

1550
01:24:58,500 --> 01:25:02,700
pre-order the game, but handmade hero dot-org and it comes with a

1551
01:25:02,700 --> 01:25:06,300
source code, so you can follow along and that's a little button for

1552
01:25:06,300 --> 01:25:07,200
that right there.

1553
01:25:07,600 --> 01:25:10,100
Also, we have a forum site, you can go to if you want to ask questions

1554
01:25:10,100 --> 01:25:13,800
about the series, we have a patreon page, you can sign up for if you

1555
01:25:13,800 --> 01:25:19,200
want to support these videos which are and will always remain free of

1556
01:25:19,200 --> 01:25:20,500
charge to everyone.

1557
01:25:21,500 --> 01:25:24,000
And we have a tweet box which treats the schedule at you if you want

1558
01:25:24,000 --> 01:25:28,500
to stream live speaking of catching the stream live you can catch it

1559
01:25:28,500 --> 01:25:29,900
live tomorrow at 5 p.m.

1560
01:25:30,000 --> 01:25:32,300
I will be right back here where we will talk about.

1561
01:25:32,500 --> 01:25:35,700
Honestly I think you know we're going to do tomorrow because we're

1562
01:25:35,700 --> 01:25:36,800
going to talk about sorting.

1563
01:25:36,900 --> 01:25:39,000
I think we're going to I think I'm going to actually talk about order

1564
01:25:39,000 --> 01:25:40,800
notation for reals.

1565
01:25:40,800 --> 01:25:43,800
Like I'm actually going to explain how I think about it and why you

1566
01:25:43,800 --> 01:25:47,200
should care and why it's not just something for your CSS class.

1567
01:25:48,000 --> 01:25:51,300
So we'll probably talk about that in the context of sorting because

1568
01:25:51,400 --> 01:25:54,400
It makes sense to talk about their it's a classic problem for order

1569
01:25:54,400 --> 01:25:56,500
notation seems like the right thing to do.

1570
01:25:56,500 --> 01:26:00,700
So order notation starting tomorrow and probably the next day as well.

1571
01:26:01,200 --> 01:26:03,500
And then that then we'll move on to some other.

1572
01:26:03,500 --> 01:26:05,400
I don't know what but something.

1573
01:26:05,900 --> 01:26:10,200
All right, thanks everyone for joining me until tomorrow.

1574
01:26:10,900 --> 01:26:13,200
I hope you have fun programming and I'll see you guys on the internet.

1575
01:26:13,200 --> 01:26:14,000
Take it easy everyone.

